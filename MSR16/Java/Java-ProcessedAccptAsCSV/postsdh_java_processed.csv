"1splitHere46","20099685splitHere46","final Button button = (Button) findViewById(R.id.button_main);<newline46mondego>"
"2splitHere46","20099685splitHere46","<Button<newline46mondego>android:id=<doubleQuotes46>@+id/button_main<doubleQuotes46> // id is button_main not activity_button<newline46mondego>"
"3splitHere46","20099685splitHere46","activity_button"
"4splitHere46","20099685splitHere46","Button"
"5splitHere46","20099834splitHere46","String"
"6splitHere46","20099834splitHere46","Object"
"7splitHere46","20099834splitHere46","String"
"8splitHere46","20099834splitHere46","String[] a = new String[10];<newline46mondego>"
"9splitHere46","20099986splitHere46","printf()"
"10splitHere46","20099986splitHere46","print()"
"11splitHere46","20099986splitHere46","println()"
"12splitHere46","20099986splitHere46","printf()"
"13splitHere46","20099986splitHere46","%n"
"14splitHere46","20100128splitHere46","int count = 0;<newline46mondego>    while (count < n) {<newline46mondego>        if (input.hasNextLine()) {<newline46mondego>            output.println(input.nextLine()); // this is where i don't know what to place<newline46mondego>            count++;<newline46mondego>        }else<newline46mondego>        {<newline46mondego>            break;<newline46mondego>        }<newline46mondego><newline46mondego>    }<newline46mondego><newline46mondego>    /**<newline46mondego>     * Close scanner <newline46mondego>     */<newline46mondego><newline46mondego>    input.close();<newline46mondego>    console.close();<newline46mondego>    output.close();<newline46mondego>"
"15splitHere46","20100165splitHere46","List"
"16splitHere46","20100165splitHere46","List"
"17splitHere46","20100165splitHere46","public List modifyList() // returning list<newline46mondego>"
"18splitHere46","20100165splitHere46","public int modifyList() // number of elements changed<newline46mondego>"
"19splitHere46","20100249splitHere46","consultaPortada"
"20splitHere46","20100249splitHere46","rs"
"21splitHere46","20100249splitHere46","stt.executeQuery();<newline46mondego>"
"22splitHere46","20100249splitHere46","rs = stt.executeQuery();<newline46mondego>"
"23splitHere46","20100278splitHere46","web.xml"
"24splitHere46","20100278splitHere46","<jsp-config><newline46mondego>    <jsp-property-group><newline46mondego>        <url-pattern>*.jsp</url-pattern><newline46mondego>        <trim-directive-whitespaces>true</trim-directive-whitespaces><newline46mondego>     </jsp-property-group><newline46mondego></jsp-config><newline46mondego>"
"25splitHere46","20100278splitHere46","/conf/web.xml"
"26splitHere46","20100278splitHere46","<servlet>"
"27splitHere46","20100278splitHere46","<init-param><newline46mondego>    <param-name>trimSpaces</param-name><newline46mondego>    <param-value>true</param-value><newline46mondego></init-param><newline46mondego>"
"28splitHere46","20100278splitHere46","@page"
"29splitHere46","20100278splitHere46","<%@page pageEncoding=<doubleQuotes46>UTF-8<doubleQuotes46>%><newline46mondego>"
"30splitHere46","20100430splitHere46","1"
"31splitHere46","20100430splitHere46","new Object()"
"32splitHere46","20100430splitHere46","public static File createCSV(List<String[]> custList, String filename) {<newline46mondego>    â€¦<newline46mondego>}<newline46mondego>"
"33splitHere46","20100684splitHere46","remainder()"
"34splitHere46","20100961splitHere46","package com.prectice;<newline46mondego>    import java.io.FileWriter;<newline46mondego>    import java.io.PrintWriter;<newline46mondego>    import java.util.ArrayList;<newline46mondego>    import java.util.List;<newline46mondego><newline46mondego>    public class ListOfNumbers {<newline46mondego><newline46mondego>     private List<Integer> list;<newline46mondego>     private static final int SIZE = 3;<newline46mondego><newline46mondego>     public ListOfNumbers () {<newline46mondego>         list = new ArrayList<Integer>(SIZE);<newline46mondego>         for (int i = 0; i < SIZE; i++) {<newline46mondego>             list.add(new Integer(i));<newline46mondego>         }<newline46mondego>     }<newline46mondego><newline46mondego><newline46mondego>     static PrintWriter out;<newline46mondego><newline46mondego>     public void writeList() {<newline46mondego>         //PrintWriter out=null;<newline46mondego>         try{<newline46mondego>         out = new PrintWriter(new FileWriter(<doubleQuotes46>OutFile.txt<doubleQuotes46>));<newline46mondego>         for (int i = 0; i < SIZE; i++) {<newline46mondego>             System.out.println(<doubleQuotes46>Value at: <doubleQuotes46> + i + <doubleQuotes46> = <doubleQuotes46> + list.get(i));<newline46mondego>         }<newline46mondego>         }catch (Exception e){<newline46mondego>             System.out.println(<doubleQuotes46>IO Exception!<doubleQuotes46>);<newline46mondego>         }finally {<newline46mondego>             out.close();<newline46mondego>             }<newline46mondego>     }<newline46mondego>     public static void main (String[] args){<newline46mondego>            ListOfNumbers list = new ListOfNumbers();<newline46mondego>            list.writeList();<newline46mondego>          }<newline46mondego><newline46mondego><newline46mondego>    }<newline46mondego>"
"35splitHere46","20100969splitHere46","InputStream in = HTML.class.getResourceAsStream(<doubleQuotes46>/htmlFiles/base.html<doubleQuotes46>);<newline46mondego>"
"36splitHere46","20101031splitHere46","String sql =<newline46mondego>    <doubleQuotes46>INSERT INTO EC_TABLE<doubleQuotes46> +<newline46mondego>    <doubleQuotes46>(licenseid, customername, description, servername,licensetype, username,password, createdDateTime,ExpiredDateTime)<doubleQuotes46> +<newline46mondego>    <doubleQuotes46> VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?)<doubleQuotes46>;<newline46mondego>PreparedStatement stmt = connection.prepareStatement(sql);<newline46mondego>stmt.setString(1, licenseId);<newline46mondego>...<newline46mondego>stmt.setTimestamp(9, timestampexpired);<newline46mondego>"
"37splitHere46","20101137splitHere46","StrictMode.ThreadPolicy policy = new StrictMode.ThreadPolicy.Builder().permitAll().build();<newline46mondego><newline46mondego>StrictMode.setThreadPolicy(policy); <newline46mondego>"
"38splitHere46","20101137splitHere46","<uses-permission android:name=<doubleQuotes46>android.permission.INTERNET<doubleQuotes46>/><newline46mondego>"
"39splitHere46","20101341splitHere46","TaskTracker"
"40splitHere46","20101422splitHere46","MyObject"
"41splitHere46","20101422splitHere46","static"
"42splitHere46","20101422splitHere46","public"
"43splitHere46","20101422splitHere46","protected"
"44splitHere46","20101422splitHere46","public MyObject(String i) {<newline46mondego>    i = this.i;<newline46mondego>}<newline46mondego>"
"45splitHere46","20101422splitHere46","i"
"46splitHere46","20101422splitHere46","i"
"47splitHere46","20101422splitHere46","public MyObject(String i) {<newline46mondego>    this.i = i;<newline46mondego>}<newline46mondego>"
"48splitHere46","20101426splitHere46","&alternatives=true<newline46mondego>"
"49splitHere46","20101610splitHere46","/**<newline46mondego> * @return the _latitude<newline46mondego> */<newline46mondego>public double getLatitude() {<newline46mondego>    return _latitude;<newline46mondego>}<newline46mondego><newline46mondego>/**<newline46mondego> * @return the _longitude<newline46mondego> */<newline46mondego>public double getLongitude() {<newline46mondego>    return _longitude;<newline46mondego>}<newline46mondego>"
"50splitHere46","20101610splitHere46","Location l = new Location();<newline46mondego>l.setLatitude(1.0d);<newline46mondego>l.setLongitude(2.0d);<newline46mondego><newline46mondego>JSONObject jsonResponseObject = (JSONObject) JSONSerializer.toJSON(l);<newline46mondego>"
"51splitHere46","20101610splitHere46","{<doubleQuotes46>latitude<doubleQuotes46>:1,<doubleQuotes46>longitude<doubleQuotes46>:2}<newline46mondego>"
"52splitHere46","20101671splitHere46","Intent sendIntent = new Intent(Intent.ACTION_VIEW, Uri.parse(<doubleQuotes46>sms:<doubleQuotes46>));<newline46mondego>smsIntent.putExtra(<doubleQuotes46>address<doubleQuotes46>, <doubleQuotes46>12125551212<doubleQuotes46>);<newline46mondego>"
"53splitHere46","20101671splitHere46","Intent intent = new Intent(Intent.ACTION_CALL, Uri.parse(<doubleQuotes46>tel:12125551212<doubleQuotes46>));<newline46mondego>startActivity(intent);<newline46mondego>"
"54splitHere46","20101671splitHere46","<uses-permission android:name=<doubleQuotes46>android.permission.CALL_PHONE<doubleQuotes46> /><newline46mondego>"
"55splitHere46","20101748splitHere46","public interface AllowedValue<T extends Class<? extends SystemValue>>"
"56splitHere46","20101748splitHere46","T"
"57splitHere46","20101748splitHere46","Class<? extends SystemValue>"
"58splitHere46","20101748splitHere46","Class"
"59splitHere46","20101748splitHere46","interface AllowedValue<Class<? extends SystemValue>>"
"60splitHere46","20101748splitHere46","interface AllowedValue<T extends SystemValue>"
"61splitHere46","20101748splitHere46","Class"
"62splitHere46","20101748splitHere46","Class<T>"
"63splitHere46","20101748splitHere46","public interface ValuesSystem {<newline46mondego><newline46mondego>  public interface AllowedValue<T extends SystemValue>{};<newline46mondego><newline46mondego>  AllowedValue<? extends SystemValue> getAllowedValue(Enum<?> id);<newline46mondego><newline46mondego>  public <T extends SystemValue> T create<newline46mondego>                     (AllowedValue<T> allowedClass, ValueData data);<newline46mondego>}<newline46mondego>"
"64splitHere46","20101748splitHere46","BasicAllowedValue"
"65splitHere46","20101748splitHere46","private class BasicAllowedValue<T extends SystemValue> implements AllowedValue<T><newline46mondego>"
"66splitHere46","20101748splitHere46","BasicValueSystem bvs = new BasicValueSystem();<newline46mondego>AllowedValue<? extends SystemValue> allowed = bvs<newline46mondego>    .getAllowedValue(BasicValueSystem.VALUES_ID.MODIFIER);<newline46mondego>bvs.create(allowed, new ModifierValueData());<newline46mondego>"
"67splitHere46","20101748splitHere46","AllowedValue"
"68splitHere46","20101748splitHere46","Class<T>"
"69splitHere46","20101748splitHere46","public interface ValuesSystem {<newline46mondego>  Class<? extends SystemValue> getAllowedValue(Enum<?> id);<newline46mondego>  public <T extends SystemValue> T create(Class<T> allowedClass, ValueData data);<newline46mondego>}<newline46mondego>"
"70splitHere46","20101748splitHere46","BasicValueSystem bvs = new BasicValueSystem();<newline46mondego>Class<? extends SystemValue> allowed = bvs<newline46mondego>    .getAllowedValue(BasicValueSystem.VALUES_ID.MODIFIER);<newline46mondego>bvs.create(allowed, new ModifierValueData());<newline46mondego>"
"71splitHere46","20101756splitHere46","component.requestFocusInWindow();<newline46mondego>"
"72splitHere46","20101795splitHere46","ArrayList"
"73splitHere46","20101795splitHere46","World"
"74splitHere46","20101795splitHere46","Map"
"75splitHere46","20101795splitHere46","World"
"76splitHere46","20101795splitHere46","List"
"77splitHere46","20101795splitHere46","Location"
"78splitHere46","20101795splitHere46","Map<World,List<Location>> allSpawnpoints = new HashMap<World,List<Location>>();<newline46mondego>"
"79splitHere46","20101795splitHere46","World"
"80splitHere46","20101795splitHere46","Map"
"81splitHere46","20101795splitHere46","allSpawnpoints.put(yourWorld,Spawnpoints);<newline46mondego>"
"82splitHere46","20101795splitHere46","Spawnpoints"
"83splitHere46","20101795splitHere46","spawnPoints"
"84splitHere46","20101869splitHere46","Thread"
"85splitHere46","20101869splitHere46","Runnable"
"86splitHere46","20101869splitHere46","Thread"
"87splitHere46","20101869splitHere46","Runnable"
"88splitHere46","20101869splitHere46","Runnable"
"89splitHere46","20101869splitHere46","void run()"
"90splitHere46","20101869splitHere46","void run()"
"91splitHere46","20101869splitHere46","CopyFile"
"92splitHere46","20101869splitHere46","Runnable"
"93splitHere46","20101869splitHere46","Thread"
"94splitHere46","20101869splitHere46","Runnable"
"95splitHere46","20101869splitHere46","Thread thread = new Thread(new CopyFile(<doubleQuotes46>A.txt<doubleQuotes46>, <doubleQuotes46>B.txt<doubleQuotes46>);<newline46mondego>thread.start();<newline46mondego>"
"96splitHere46","20101869splitHere46","public static class CopyFile implements Runnable {<newline46mondego>    private File input;<newline46mondego>    private File output;<newline46mondego><newline46mondego>    public CopyFile(File input, File output) {<newline46mondego>        this.input = input;<newline46mondego>        this.output = output;<newline46mondego>    }<newline46mondego><newline46mondego>    public void run() {<newline46mondego>        System.out.println(<doubleQuotes46>Copy file:<doubleQuotes46> + input.toString());<newline46mondego>        System.out.println(<doubleQuotes46>Destination:<doubleQuotes46> + output.toString());<newline46mondego><newline46mondego>        InputStream InputReader = null;<newline46mondego>        OutputStream OutputWriter = null;<newline46mondego>        try {<newline46mondego>            InputReader = new FileInputStream(input);<newline46mondego>            OutputWriter = new FileOutputStream(output);<newline46mondego>            byte[] buffer = new byte[1024];<newline46mondego>            int length;<newline46mondego>            while ((length = InputReader.read(buffer)) > 0) {<newline46mondego>                OutputWriter.write(buffer, 0, length);<newline46mondego>            }<newline46mondego>            InputReader.close();<newline46mondego>            OutputWriter.close();<newline46mondego>        } catch (FileNotFoundException e) {<newline46mondego>            System.out.println(<doubleQuotes46>FileNotFoundException<doubleQuotes46>);<newline46mondego>        } catch (IOException e) {<newline46mondego>            System.out.println(<doubleQuotes46>IOException<doubleQuotes46>);<newline46mondego>        }<newline46mondego>    }<newline46mondego>}<newline46mondego>"
"97splitHere46","20101965splitHere46","mapred.job.reuse.jvm.num.tasks"
"98splitHere46","20101965splitHere46","Map"
"99splitHere46","20101969splitHere46","regex"
"100splitHere46","20101969splitHere46","if condition"
"101splitHere46","20101969splitHere46","if ( phoneNumber[a].matches(<doubleQuotes46>^[0-9]{11}$<doubleQuotes46>) ) {<newline46mondego>    System.out.println(<doubleQuotes46>Continue<doubleQuotes46>);<newline46mondego>    invalidinput = false;<newline46mondego> }<newline46mondego>"
"102splitHere46","20101969splitHere46","phoneNumber[a]"
"103splitHere46","20101969splitHere46","0-9"
"104splitHere46","20102086splitHere46","1. Pop two elements from the queue.  <newline46mondego>2. Compare them.  <newline46mondego>3. Push the lesser one in the queue.  <newline46mondego>4. Pop another element.<newline46mondego>5. Keep repeating from step no. 2.  <newline46mondego>6. After n-1 comparisons, you will get the largest element in the queue. <newline46mondego>7. Push it and repeat the above n-1 times. At each iteration, you need to make one less comparison as the last element is already the maximum.<newline46mondego>"
"105splitHere46","20102127splitHere46","HashMap"
"106splitHere46","20102127splitHere46","threshold = (int)(newCapacity * loadFactor);<newline46mondego>"
"107splitHere46","20102132splitHere46","servlet-api"
"108splitHere46","20102132splitHere46","pom.xml"
"109splitHere46","20102132splitHere46","<dependency><newline46mondego>            <groupId>javax.servlet</groupId><newline46mondego>            <artifactId>servlet-api</artifactId><newline46mondego>            <version>2.5</version><newline46mondego>            <scope>provided</scope><newline46mondego>        </dependency><newline46mondego>"
"110splitHere46","20102271splitHere46","ByteBuffer"
"111splitHere46","20102271splitHere46","buffer.getInt"
"112splitHere46","20102271splitHere46","buffer.getFloat"
"113splitHere46","20102271splitHere46","wrap"
"114splitHere46","20102271splitHere46","byte[] name = new byte[nameLength];<newline46mondego> buffer.get(name);<newline46mondego> nameString = byteRangeToString(name);<newline46mondego>"
"115splitHere46","20102271splitHere46","public String byteRangeToString(byte[] data)<newline46mondego>{<newline46mondego>    try<newline46mondego>    {<newline46mondego>         return new String(data, <doubleQuotes46>UTF-8<doubleQuotes46>);<newline46mondego>    }<newline46mondego>    catch (UnsupportedEncodingException e)<newline46mondego>    {<newline46mondego>         /* handle accordingly */<newline46mondego>    }<newline46mondego>}<newline46mondego>"
"116splitHere46","20102412splitHere46","null"
"117splitHere46","20102412splitHere46","NullPointerException"
"118splitHere46","20102412splitHere46","if (vec[i].equalsIgnoreCase(s))<newline46mondego>"
"119splitHere46","20102471splitHere46","select"
"120splitHere46","20102471splitHere46","Iterator"
"121splitHere46","20102471splitHere46","Iterator <Element> ele2 = ele.**next()**.select(<doubleQuotes46>td[class=row1]<doubleQuotes46>).iterator();<newline46mondego>"
"122splitHere46","20102590splitHere46","grails"
"123splitHere46","20102590splitHere46",".bat"
"124splitHere46","20102590splitHere46",".bat"
"125splitHere46","20102590splitHere46","Runtime.exec"
"126splitHere46","20102590splitHere46","ProcessBuilder"
"127splitHere46","20102590splitHere46","<doubleQuotes46>...<doubleQuotes46>.execute"
"128splitHere46","20102590splitHere46","cmd /c"
"129splitHere46","20102590splitHere46","println [<doubleQuotes46>cmd<doubleQuotes46>, <doubleQuotes46>/c<doubleQuotes46>, <doubleQuotes46>grails -version<doubleQuotes46>].execute(envs, new File(<doubleQuotes46>c:\\<doubleQuotes46>)).text<newline46mondego>"
"130splitHere46","20102590splitHere46","println [<doubleQuotes46>cmd<doubleQuotes46>, <doubleQuotes46>/c<doubleQuotes46>, <doubleQuotes46>grails<doubleQuotes46>, <doubleQuotes46>-version<doubleQuotes46>].execute(envs, new File(<doubleQuotes46>c:\\<doubleQuotes46>)).text<newline46mondego>"
"131splitHere46","20102617splitHere46","ClassCastException"
"132splitHere46","20102617splitHere46","List#toArray()"
"133splitHere46","20102617splitHere46","Object[]"
"134splitHere46","20102617splitHere46","Foo[]"
"135splitHere46","20102617splitHere46","new T[size]"
"136splitHere46","20102617splitHere46","Object[]"
"137splitHere46","20102617splitHere46","List#toArray(T[])"
"138splitHere46","20102617splitHere46","ArrayList"
"139splitHere46","20102617splitHere46","new Foo[fooList.size()]"
"140splitHere46","20102617splitHere46","new Foo[0]"
"141splitHere46","20102638splitHere46","List"
"142splitHere46","20102638splitHere46","Map"
"143splitHere46","20102638splitHere46","equals()"
"144splitHere46","20102638splitHere46","hashCode()"
"145splitHere46","20102638splitHere46","SortedMap"
"146splitHere46","20102638splitHere46","Map"
"147splitHere46","20102638splitHere46","SortedMap"
"148splitHere46","20102942splitHere46","Mappa"
"149splitHere46","20102942splitHere46","scrollabile.setViewportView(content);<newline46mondego>"
"150splitHere46","20102942splitHere46","Mappa"
"151splitHere46","20102942splitHere46","public void setImage(File file) throws IOException {<newline46mondego>    this.immagine = ImageIO.read(file);<newline46mondego>    repaint();<newline46mondego>}<newline46mondego>"
"152splitHere46","20102942splitHere46","paintComponent()"
"153splitHere46","20102942splitHere46","g.drawImage(immagine, 0, 0, getWidth(), getHeight(), this);<newline46mondego>"
"154splitHere46","20102942splitHere46","ImageObserver"
"155splitHere46","20102942splitHere46","JPanel"
"156splitHere46","20102983splitHere46","@Entity<newline46mondego>@Table(name = <doubleQuotes46>Customer<doubleQuotes46>)<newline46mondego>public class Customer {<newline46mondego><newline46mondego>    private static final String IS_ACTIVE = <doubleQuotes46>T<doubleQuotes46>;<newline46mondego><newline46mondego>    private long id;<newline46mondego>    private String firstName;<newline46mondego>    private String lastName;<newline46mondego>    private String isActive = <doubleQuotes46><doubleQuotes46>;<newline46mondego><newline46mondego>    protected Customer() {}<newline46mondego><newline46mondego>    public Customer(String firstName, String lastName) {<newline46mondego>        this.firstName = firstName;<newline46mondego>        this.lastName = lastName;<newline46mondego>    }<newline46mondego><newline46mondego>    @Id<newline46mondego>    @GeneratedValue(strategy=GenerationType.AUTO)<newline46mondego>    public long getId() {<newline46mondego>        return id;<newline46mondego>    }<newline46mondego><newline46mondego>    public void setId(long id) {<newline46mondego>        this.id = id;<newline46mondego>    }<newline46mondego><newline46mondego>    @Column(unique = true, nullable = false)<newline46mondego>    public String getFirstName() {<newline46mondego>        return firstName;<newline46mondego>    }<newline46mondego><newline46mondego>    public void setFirstName(String firstName) {<newline46mondego>        this.firstName = firstName;<newline46mondego>    }<newline46mondego><newline46mondego>    @Column(unique = true, nullable = false)<newline46mondego>    public String getLastName() {<newline46mondego>        return lastName;<newline46mondego>    }<newline46mondego><newline46mondego>    public void setLastName(String lastName) {<newline46mondego>        this.lastName = lastName;<newline46mondego>    }<newline46mondego><newline46mondego>    @Column(unique = true, nullable = false)<newline46mondego>    public String getIsActive() {<newline46mondego>        return isActive;<newline46mondego>    }<newline46mondego><newline46mondego>    public void setIsActive(String isActive) {<newline46mondego>        this.isActive = isActive;<newline46mondego>    }<newline46mondego><newline46mondego>    @Transient<newline46mondego>    public boolean isActive() {<newline46mondego>        return isActive.equals(IS_ACTIVE);<newline46mondego>    }<newline46mondego><newline46mondego>    @Override<newline46mondego>    public String toString() {<newline46mondego>        return String.format(<newline46mondego>                <doubleQuotes46>Customer[id=%d, firstName='%s', lastName='%s']<doubleQuotes46>,<newline46mondego>                id, firstName, lastName);<newline46mondego>    }<newline46mondego>}<newline46mondego>"
"157splitHere46","20103064splitHere46","Calories[] array;<newline46mondego>String answer2;<newline46mondego>"
"158splitHere46","20103064splitHere46","for(int i = 0; i < array.length; i++) {<newline46mondego>    if(array[i].getName().equals(answer2)) {<newline46mondego>        return array[i].getCalorie();<newline46mondego>    }<newline46mondego>}<newline46mondego>"
"159splitHere46","20103075splitHere46","<dependency><newline46mondego>  <groupId>javax.servlet</groupId><newline46mondego>  <artifactId>servlet-api</artifactId><newline46mondego>  <version>2.5</version><newline46mondego>  <scope>provided</scope><newline46mondego></dependency><newline46mondego>"
"160splitHere46","20103245splitHere46","BufferedWriter wr = new BufferedWriter(new FileWriter(<doubleQuotes46>target.txt<doubleQuotes46>));"
"161splitHere46","20103245splitHere46","file_interface"
"162splitHere46","20103245splitHere46","public class file_interface {<newline46mondego>    BufferedWriter wr;<newline46mondego>    public file_interface() {<newline46mondego>         wr = new BufferedWriter(new FileWriter(<doubleQuotes46>target.txt<doubleQuotes46>));<newline46mondego>    }<newline46mondego>}<newline46mondego>"
"163splitHere46","20103245splitHere46","public class file_interface {<newline46mondego>    public void foo() {<newline46mondego>        //your code goes here...<newline46mondego>        //now this is not a field but a variable in the method<newline46mondego>        BufferedWriter wr = new BufferedWriter(new FileWriter(<doubleQuotes46>target.txt<doubleQuotes46>));<newline46mondego>        BufferedReader br = new BufferedReader(new FileReader(<doubleQuotes46>Assign4.txt<doubleQuotes46>));<newline46mondego>        //rest of your code...<newline46mondego>        try  {<newline46mondego>             //...<newline46mondego>        } catch (...) {<newline46mondego>             //...<newline46mondego>        }<newline46mondego>        //...<newline46mondego>    }<newline46mondego>}<newline46mondego>"
"164splitHere46","20103245splitHere46","main"
"165splitHere46","20103245splitHere46","public class AMainClass {<newline46mondego>    public static void main(String[] args) {<newline46mondego>        file_interface fi = new file_interface();<newline46mondego>        fi.foo();<newline46mondego>    }<newline46mondego>}<newline46mondego>"
"166splitHere46","20103245splitHere46","public class SomeClientClass {<newline46mondego>    public void bar() {<newline46mondego>        file_interface fi = new file_interface();<newline46mondego>        fi.foo();<newline46mondego>    }<newline46mondego>}<newline46mondego>"
"167splitHere46","20103245splitHere46","file_interface"
"168splitHere46","20103245splitHere46","FileInterface"
"169splitHere46","20103245splitHere46","MyFileUtil"
"170splitHere46","20103245splitHere46","interface"
"171splitHere46","20103245splitHere46","interface"
"172splitHere46","20103298splitHere46","BigDecimal"
"173splitHere46","20103298splitHere46","class BigDecimalMethods{<newline46mondego>     public static BigDecimal reciprocal(BigDecimal bd){<newline46mondego>     }<newline46mondego>     //etc<newline46mondego>}<newline46mondego>"
"174splitHere46","20103455splitHere46","||"
"175splitHere46","20103455splitHere46","if(inputSuit = 1 || 2 || 3 || 4 ){<newline46mondego>"
"176splitHere46","20103455splitHere46","if(inputSuit == 1 || inputSuit == 2 || inputSuit == 3 || inputSuit == 4 ){<newline46mondego>"
"177splitHere46","20103455splitHere46","||"
"178splitHere46","20103455splitHere46","((Boolean Expression 1) || (Boolean Expression 2) || (Boolean Expression 3)...)<newline46mondego>"
"179splitHere46","20103455splitHere46","if(inputValue = 1 || 2 || 3 || 4 || 5 || 6 || 7 || 8 || 9 || 10 || 11 || 12 || 13){<newline46mondego>"
"180splitHere46","20103482splitHere46","ToolRunner"
"181splitHere46","20103566splitHere46","...<newline46mondego>public class A implements Serializable<newline46mondego>    @Id<newline46mondego>    @GeneratedValue(strategy = ...) // assuming you are generating values for personId<newline46mondego>    private long personId;<newline46mondego>...<newline46mondego>"
"182splitHere46","20103566splitHere46","...<newline46mondego>public class B implements Serializable<newline46mondego>...<newline46mondego>    @JoinColumn(name=<doubleQuotes46>personId<doubleQuotes46>, nullable=false)<newline46mondego>    @ManyToOne<newline46mondego>    private A person;<newline46mondego>"
"183splitHere46","20103566splitHere46","A a = ... // create person object for person with appropriate personID<newline46mondego>B b = ...<newline46mondego>b.setPerson(a);<newline46mondego>b.setPersonAlias(alias);<newline46mondego>"
"184splitHere46","20103566splitHere46","@NamedQuery"
"185splitHere46","20103566splitHere46","A"
"186splitHere46","20103566splitHere46","A"
"187splitHere46","20103566splitHere46","personID"
"188splitHere46","20103566splitHere46","personAlias"
"189splitHere46","20103566splitHere46","...<newline46mondego>@NamedQuery(name = <doubleQuotes46>A.personByAlias<doubleQuotes46>, query = <doubleQuotes46>select a from A a, B b<doubleQuotes46><newline46mondego>            + <doubleQuotes46> where a.personId = b.personId and b.personAlias = :personAlias<doubleQuotes46>)<newline46mondego>public class A implements Serializable<newline46mondego>...<newline46mondego>"
"190splitHere46","20103566splitHere46","Query query = em.createNamedQuery(<doubleQuotes46>A.personByAlias<doubleQuotes46>);<newline46mondego>    query.setParameter(<doubleQuotes46>personAlias<doubleQuotes46>, id);<newline46mondego>    List<A> result = query.getResultList();<newline46mondego>"
"191splitHere46","20103810splitHere46","System.getProperty(<doubleQuotes46>java.version<doubleQuotes46>);<newline46mondego>"
"192splitHere46","20103860splitHere46","public enum Something {<newline46mondego>    CAR (1),<newline46mondego>    HOUSE (2),<newline46mondego>    DOG (3),<newline46mondego><newline46mondego>    private int value;<newline46mondego><newline46mondego>    private Something(int value) {<newline46mondego>         this.value = value;<newline46mondego>    }<newline46mondego><newline46mondego>    public int getValue() {<newline46mondego>         return value;<newline46mondego>    }<newline46mondego>}<newline46mondego>"
"193splitHere46","20103860splitHere46","public static final int CAR = 1;<newline46mondego>public static final int HOUSE = 2;<newline46mondego>public static final int DOG = 3;<newline46mondego>"
"194splitHere46","20103892splitHere46","actual"
"195splitHere46","20103892splitHere46","List<YourPojo>"
"196splitHere46","20103892splitHere46","assertThat(actual, hasItem(Matchers.<YourPojo>hasProperty(<doubleQuotes46>id<doubleQuotes46>, equalTo(1L))));<newline46mondego>"
"197splitHere46","20103919splitHere46","a"
"198splitHere46","20103919splitHere46","int initialInvestment, endValue;<newline46mondego>double cdValue, annualDecimalConvert, annualRate;<newline46mondego><newline46mondego>initialInvestment = Integer.parseInt(initialInvestmentInput.getText());<newline46mondego>annualRate = Double.parseDouble(interestRateInput.getText())/100;<newline46mondego>endValue = Integer.parseInt(endingValueInput.getText());<newline46mondego><newline46mondego>// First year interest is counted here.<newline46mondego>cdValue = initialInvestment + (initialInvestment * annualRate);<newline46mondego>int years = 1;<newline46mondego><newline46mondego>while (cdValue < endValue){<newline46mondego>  cdValue = cdValue + (cdValue * annualRate);<newline46mondego>  years++;<newline46mondego>}<newline46mondego><newline46mondego>yearsOutput.setText(<doubleQuotes46>The required year needed is: <doubleQuotes46> + years);<newline46mondego>"
"199splitHere46","20103949splitHere46","JScrollBar"
"200splitHere46","20103949splitHere46","knob"
"201splitHere46","20103949splitHere46","JScrollBar"
"202splitHere46","20103949splitHere46","track"
"203splitHere46","20103949splitHere46","knob"
"204splitHere46","20103992splitHere46","class Bar {<newline46mondego>    static final long bar;<newline46mondego><newline46mondego>    static {<newline46mondego>        System.out.println(<doubleQuotes46>Assigning bar<doubleQuotes46>);<newline46mondego>        bar = Foo.foo;<newline46mondego>    }<newline46mondego>}<newline46mondego>class Foo extends Bar {<newline46mondego>    static final long foo;<newline46mondego><newline46mondego>    static {<newline46mondego>        System.out.println(<doubleQuotes46>Assigning foo<doubleQuotes46>);<newline46mondego>        foo = 1;<newline46mondego>    }<newline46mondego>}<newline46mondego><newline46mondego>public class Test {<newline46mondego>    public static void main(String[] args) {<newline46mondego>        new Foo();<newline46mondego>        System.out.println(Bar.bar);<newline46mondego>    }<newline46mondego>}<newline46mondego>"
"205splitHere46","20103992splitHere46","Assigning bar<newline46mondego>Assigning foo<newline46mondego>0<newline46mondego>1<newline46mondego>"
"206splitHere46","20103992splitHere46","Foo"
"207splitHere46","20103992splitHere46","Foo.class"
"208splitHere46","20103992splitHere46","Bar.class"
"209splitHere46","20103992splitHere46","Foo.class"
"210splitHere46","20103992splitHere46","Foo.class"
"211splitHere46","20103992splitHere46","Foo.foo"
"212splitHere46","20103992splitHere46","Bar.bar"
"213splitHere46","20103992splitHere46","Bar.class"
"214splitHere46","20103992splitHere46","Foo.class"
"215splitHere46","20103992splitHere46","Foo.foo"
"216splitHere46","20104055splitHere46","390 int i = indexFor(hash, table.length);<newline46mondego>"
"217splitHere46","20104055splitHere46","table[i]"
"218splitHere46","20104055splitHere46","391 for (Entry<K,V> e = table[i]; e != null; e = e.next) {<newline46mondego>392     Object k;<newline46mondego>393     if (e.hash == hash && ((k = e.key) == key || key.equals(k))) {<newline46mondego>"
"219splitHere46","20104055splitHere46","394         V oldValue = e.value;<newline46mondego>395         e.value = value;<newline46mondego>396         e.recordAccess(this);<newline46mondego>"
"220splitHere46","20104055splitHere46","397         return oldValue;<newline46mondego>398     }<newline46mondego>"
"221splitHere46","20104055splitHere46","399 }<newline46mondego>"
"222splitHere46","20104055splitHere46","402 addEntry(hash, key, value, i);<newline46mondego>"
"223splitHere46","20104176splitHere46","char"
"224splitHere46","20104176splitHere46","'\u0000'"
"225splitHere46","20104176splitHere46","0"
"226splitHere46","20104176splitHere46","for"
"227splitHere46","20104176splitHere46","int"
"228splitHere46","20104176splitHere46","char"
"229splitHere46","20104183splitHere46","(?i).*[s]+[\\s]*[p]+[\\s]*[a]+[\\s]*[m]+[\\s]*.*<newline46mondego>"
"230splitHere46","20104271splitHere46","getPath()"
"231splitHere46","20104271splitHere46","URL"
"232splitHere46","20104271splitHere46","E:/Servers/JBOSS/standalone/deployments/isms.war/WEB-INF/lib/ariba.aribaweb.jar/META-INF/config.properties<newline46mondego>"
"233splitHere46","20104271splitHere46","jar:file:"
"234splitHere46","20104271splitHere46",".jar"
"235splitHere46","20104271splitHere46","getPath()"
"236splitHere46","20104271splitHere46",".jar!"
"237splitHere46","20104332splitHere46","<doubleQuotes46>\n<doubleQuotes46>"
"238splitHere46","20104332splitHere46","<doubleQuotes46>\n<doubleQuotes46>"
"239splitHere46","20104332splitHere46","println"
"240splitHere46","20104332splitHere46","<doubleQuotes46>\n<doubleQuotes46>"
"241splitHere46","20104582splitHere46","UnhandledExceptionHandler"
"242splitHere46","20104582splitHere46","UnhandledExceptionHandler"
"243splitHere46","20104608splitHere46","Taylor name = (Taylor)rr.readObject();<newline46mondego>"
"244splitHere46","20104608splitHere46","Taylor name = (Taylor)rr.readObject();<newline46mondego>System.out.println(name.age + <doubleQuotes46>, <doubleQuotes46> + name.name + <doubleQuotes46>, <doubleQuotes46> + name.school);<newline46mondego>"
"245splitHere46","20104608splitHere46","public String toString() <newline46mondego>{<newline46mondego>   return name + <doubleQuotes46>, <doubleQuotes46> + age + <doubleQuotes46>, <doubleQuotes46> + school;<newline46mondego>}<newline46mondego>"
"246splitHere46","20104608splitHere46","Taylor name = (Taylor)rr.readObject();<newline46mondego>System.out.println(name);<newline46mondego>"
"247splitHere46","20104608splitHere46","System.out.println(<doubleQuotes46>\tlast access was at: <doubleQuotes46> + name.toString());<newline46mondego>"
"248splitHere46","20104688splitHere46","List<? extends X>"
"249splitHere46","20104688splitHere46","List<T>"
"250splitHere46","20104688splitHere46","T"
"251splitHere46","20104688splitHere46","X"
"252splitHere46","20104688splitHere46","List<List<?>>"
"253splitHere46","20104688splitHere46","List<List<T>>"
"254splitHere46","20104688splitHere46","T"
"255splitHere46","20104688splitHere46","List<? extends List<?>>"
"256splitHere46","20104688splitHere46","List<T>"
"257splitHere46","20104688splitHere46","T"
"258splitHere46","20104688splitHere46","List<?>"
"259splitHere46","20104688splitHere46","?"
"260splitHere46","20104721splitHere46","arrayString"
"261splitHere46","20104721splitHere46","new"
"262splitHere46","20104813splitHere46","String url = <doubleQuotes46>http://<ip_address_of_server>/WebserviceHCX.asmx<doubleQuotes46>;<newline46mondego>"
"263splitHere46","20104883splitHere46","Date date = new Date(1384174174);<newline46mondego>SimpleDateFormat f = new SimpleDateFormat(<doubleQuotes46>Y/M/d H:m:s<doubleQuotes46>);<newline46mondego>String dateFormatted = f.format(date);<newline46mondego>"
"264splitHere46","20104883splitHere46","M"
"265splitHere46","20104883splitHere46","m"
"266splitHere46","20104932splitHere46","import com.jhlabs.image.*;<newline46mondego>"
"267splitHere46","20104932splitHere46","import com.jhlabs.image.CheckFilter;<newline46mondego>"
"268splitHere46","20104932splitHere46","CheckFilter checkFilter = new CheckFilter();<newline46mondego>"
"269splitHere46","20104964splitHere46",".nextLine()"
"270splitHere46","20104964splitHere46",".next()"
"271splitHere46","20104964splitHere46",".nextLine()"
"272splitHere46","20105094splitHere46","<configuration><newline46mondego>  <goals>deploy</goals><newline46mondego></configuration><newline46mondego>"
"273splitHere46","20105327splitHere46","@PostConstruct"
"274splitHere46","20105350splitHere46","split"
"275splitHere46","20105350splitHere46","ArrayList"
"276splitHere46","20105350splitHere46","ArrayList"
"277splitHere46","20105463splitHere46","SecurityContext"
"278splitHere46","20105463splitHere46","@Context"
"279splitHere46","20105463splitHere46","containerRequest.getUserPrincipal()"
"280splitHere46","20105463splitHere46","UnsupportedOperationException"
"281splitHere46","20105463splitHere46","Principal"
"282splitHere46","20105463splitHere46","Request"
"283splitHere46","20105463splitHere46","filter"
"284splitHere46","20105463splitHere46","@Context<newline46mondego>private ThreadLocal<Request> request;<newline46mondego>"
"285splitHere46","20105934splitHere46","Graphics2D"
"286splitHere46","20105934splitHere46","rotate(double theta)"
"287splitHere46","20105934splitHere46","Graphics2D"
"288splitHere46","20105934splitHere46","rotate(double theta, double x, double y)"
"289splitHere46","20105934splitHere46","translate(x, y);<newline46mondego>rotate(theta);<newline46mondego>translate(-x, -y);<newline46mondego>"
"290splitHere46","20105934splitHere46","Graphics2D g2d = (Graphics2D)g.create();<newline46mondego>   g2d.rotate(theta);<newline46mondego>   g2d.draw(new Arc2D.Double(200, 200,100,200,90.123, 135.3456,Arc2D.OPEN));<newline46mondego>   g2d.dispose();<newline46mondego>"
"291splitHere46","20105934splitHere46","g2d.rotate(theta);<newline46mondego>   g2d.draw(new Arc2D.Double(200, 200,100,200,90.123, 135.3456,Arc2D.OPEN));<newline46mondego>   g2d.rotate(-theta);<newline46mondego>"
"292splitHere46","20105951splitHere46","n"
"293splitHere46","20105951splitHere46","k"
"294splitHere46","20105951splitHere46","n"
"295splitHere46","20105951splitHere46","public int power(int x, int n){<newline46mondego>    int k;<newline46mondego>    if (n==2){<newline46mondego>        k = square(x);<newline46mondego>    }<newline46mondego>    else if (n==3){<newline46mondego>        k = cube(x);<newline46mondego>    }<newline46mondego>    else if (n==4){<newline46mondego>        k = hypercube(x);<newline46mondego>    }<newline46mondego>    else if (n==1){<newline46mondego>        k = x;<newline46mondego>    }<newline46mondego>    else {<newline46mondego>        k = 1;<newline46mondego>        for (int i = 0; i < n; i++) {<newline46mondego>            k *= x;<newline46mondego>        }<newline46mondego>    }<newline46mondego>    return k;<newline46mondego>}<newline46mondego>"
"296splitHere46","20106044splitHere46","GZIPOutputStream"
"297splitHere46","20106044splitHere46","GZIPOutputStream"
"298splitHere46","20106044splitHere46","GZIPOutputStream"
"299splitHere46","20106185splitHere46","SimpleDateFormat"
"300splitHere46","20106185splitHere46","SimpleDateFormat formatter = new SimpleDateFormat( <doubleQuotes46>MM/dd-HH:mm:ss.S<doubleQuotes46> );<newline46mondego>Calendar c = Calendar.getInstance();<newline46mondego>c.setTime( formatter.parse( <doubleQuotes46>07/21-04:00:14.766098<doubleQuotes46> ) );<newline46mondego>c.set( Calendar.YEAR, 2012 );<newline46mondego>System.out.println( new SimpleDateFormat( <doubleQuotes46>dd/MM/yyyy HH:mm:ss.S<doubleQuotes46> ).format( c.getTime() ) );<newline46mondego>"
"301splitHere46","20106185splitHere46","c.set( Calendar.YEAR, 2012 );<newline46mondego>"
"302splitHere46","20106185splitHere46","formatter.parse( <doubleQuotes46>07/21-04:00:14.766098<doubleQuotes46> )"
"303splitHere46","20106185splitHere46","Timestamp"
"304splitHere46","20106185splitHere46","Timestamp"
"305splitHere46","20106185splitHere46","String dateString = <doubleQuotes46>07/21-04:00:14.766098<doubleQuotes46>;<newline46mondego><newline46mondego>    String[] parts = dateString.split( <doubleQuotes46>\\.<doubleQuotes46> );<newline46mondego><newline46mondego>    Calendar c = Calendar.getInstance();<newline46mondego>    c.setTime( ( new SimpleDateFormat( <doubleQuotes46>M/d-H:m:s<doubleQuotes46> ) ).parse( parts[0] ) );<newline46mondego>    c.set( Calendar.YEAR, 2014 );<newline46mondego><newline46mondego>    java.sql.Timestamp timestamp = new java.sql.Timestamp( c.getTimeInMillis() );<newline46mondego><newline46mondego>    if( parts.length == 2 ) {<newline46mondego>        // Your fractional part must be 9 numbers length with tailing zeros<newline46mondego>        // I am not sure how to pad string with zeros at right <newline46mondego>        int nanos = Integer.parseInt( String.format( <doubleQuotes46>%-9s<doubleQuotes46>, parts[1] ).replace( ' ', '0' ) );<newline46mondego>        timestamp.setNanos( nanos );<newline46mondego>    }<newline46mondego><newline46mondego>    System.out.println( <doubleQuotes46>Date string: <doubleQuotes46> + dateString );<newline46mondego>    System.out.println( <doubleQuotes46>Timestamp  : <doubleQuotes46> + timestamp.toString() );<newline46mondego>"
"306splitHere46","20106185splitHere46","Timestamp"
"307splitHere46","20106286splitHere46","Map<String, View> views = mapper.readValue( viewFile.getInputStream(), new TypeReference<Map<String, View>>() {});<newline46mondego>"
"308splitHere46","20106286splitHere46","TypeReference"
"309splitHere46","20106286splitHere46","View"
"310splitHere46","20106286splitHere46","Map<String, View>"
"311splitHere46","20106368splitHere46","LD_LIBRARY_PATH"
"312splitHere46","20106418splitHere46","{<newline46mondego>   <doubleQuotes46>literatures<doubleQuotes46>:[<newline46mondego>      {<newline46mondego>         <doubleQuotes46>id<doubleQuotes46>:10,<newline46mondego>         <doubleQuotes46>name<doubleQuotes46>:<doubleQuotes46>abc<doubleQuotes46><newline46mondego>      }<newline46mondego>   ],<newline46mondego>   <doubleQuotes46>recycleFacilities<doubleQuotes46>:[<newline46mondego>      {<newline46mondego>         <doubleQuotes46>id<doubleQuotes46>:20,<newline46mondego>         <doubleQuotes46>name<doubleQuotes46>:<doubleQuotes46>testFaculty<doubleQuotes46><newline46mondego>      }<newline46mondego>   ],<newline46mondego>   <doubleQuotes46>assents<doubleQuotes46>:[<newline46mondego>      {<newline46mondego>         <doubleQuotes46>id<doubleQuotes46>:30,<newline46mondego>         <doubleQuotes46>name<doubleQuotes46>:<doubleQuotes46>Test<doubleQuotes46><newline46mondego>      }<newline46mondego>   ]<newline46mondego>}<newline46mondego>"
"313splitHere46","20106418splitHere46","Class Another{ <newline46mondego><newline46mondego>@OneToMany(cascade=CascadeType.ALL)<newline46mondego>@JoinColumn(name=<doubleQuotes46>hall_id<doubleQuotes46>)<newline46mondego><newline46mondego>Set<Literature> literatures;<newline46mondego><newline46mondego>@OneToMany(cascade=CascadeType.ALL)<newline46mondego>@JoinColumn(name=<doubleQuotes46>hall_id<doubleQuotes46>)<newline46mondego><newline46mondego>Set<RecycleFacility> recycleFacilities;<newline46mondego><newline46mondego>@OneToMany(cascade=CascadeType.ALL)<newline46mondego>@JoinColumn(name=<doubleQuotes46>hall_id<doubleQuotes46>)<newline46mondego><newline46mondego>Set<Assent> assents;<newline46mondego>// getter/setter<newline46mondego>}<newline46mondego>"
"314splitHere46","20106418splitHere46","Another response = gson.fromJson(reader, Another.class);<newline46mondego>"
"315splitHere46","20106418splitHere46","Gson gson = new Gson();<newline46mondego>String jsonString= gson.toJson(yourObject);<newline46mondego>"
"316splitHere46","20106435splitHere46","retainAll"
"317splitHere46","20106435splitHere46","removeAll"
"318splitHere46","20106435splitHere46","String"
"319splitHere46","20106435splitHere46","String"
"320splitHere46","20106435splitHere46","hashCode"
"321splitHere46","20106435splitHere46","equals"
"322splitHere46","20106435splitHere46","retainAll"
"323splitHere46","20106435splitHere46","removeAll"
"324splitHere46","20106435splitHere46","class ByteArrayWrapper {<newline46mondego>    private final byte[] data;<newline46mondego>    private int hc;<newline46mondego>    public ByteArrayWrapper(byte[] data) {<newline46mondego>        this.data = data;<newline46mondego>        for (int i = 0 ; i != data.length ; i++) {<newline46mondego>            hc = 31*hc + data[i];<newline46mondego>        }<newline46mondego>    }<newline46mondego>    public byte[] getData() {<newline46mondego>        return data;<newline46mondego>    }<newline46mondego>    @Override<newline46mondego>    public int hashCode() {<newline46mondego>        return hc;<newline46mondego>    }<newline46mondego>    @override<newline46mondego>    public boolean equals(Object obj) {<newline46mondego>        if (obj == null || !(obj instanceof ByteArrayWrapper)) return false;<newline46mondego>        ByteArrayWrapper other = (ByteArrayWrapper)obj;<newline46mondego>        if (other.data.length != data.length) return false;<newline46mondego>        for (int i = 0 ; i != data.length ; i++) {<newline46mondego>            if (data[i] != other.data[i]) return false;<newline46mondego>        }<newline46mondego>        return true;<newline46mondego>    }<newline46mondego>}<newline46mondego>"
"325splitHere46","20106520splitHere46","classA"
"326splitHere46","20106520splitHere46","src"
"327splitHere46","20106520splitHere46","javac"
"328splitHere46","20106520splitHere46","classA"
"329splitHere46","20106658splitHere46","public Set<Integer> lineNumbers;<newline46mondego>"
"330splitHere46","20106658splitHere46","lineNumbers = new TreeSet<Integer>();<newline46mondego>"
"331splitHere46","20106765splitHere46","RuntimeException"
"332splitHere46","20106792splitHere46",".get(Calendar.YEAR) + 1,<newline46mondego>"
"333splitHere46","20106911splitHere46","AndroidManifest"
"334splitHere46","20106911splitHere46","android:windowSoftInputMode=<doubleQuotes46>adjustPan<doubleQuotes46><newline46mondego>"
"335splitHere46","20106993splitHere46","if"
"336splitHere46","20106993splitHere46","pathX"
"337splitHere46","20106993splitHere46","bottomX"
"338splitHere46","20106993splitHere46","upperX"
"339splitHere46","20106993splitHere46","pathX"
"340splitHere46","20106993splitHere46","bottomX"
"341splitHere46","20106993splitHere46","upperX"
"342splitHere46","20106993splitHere46","x"
"343splitHere46","20106993splitHere46","-10"
"344splitHere46","20106993splitHere46","10"
"345splitHere46","20106993splitHere46","if (pathX > bottomX) {<newline46mondego>  pathX = bottomX;<newline46mondego>} else if (pathX < upperX) {<newline46mondego>  pathX = upperX;<newline46mondego>}<newline46mondego><newline46mondego>if (pathY < bottomY) {<newline46mondego>  pathY = bottomY;<newline46mondego>} else if (pathY > upperY) {<newline46mondego>  pathY = upperY;<newline46mondego>}<newline46mondego>"
"346splitHere46","20107247splitHere46","parseInt"
"347splitHere46","20107247splitHere46","inputReader.readLine()"
"348splitHere46","20107247splitHere46","inputReader.read()"
"349splitHere46","20107247splitHere46","int sum = 0;<newline46mondego>while((sum = inputReader.read()) != -1) {<newline46mondego>    intValue = sum + intValue<newline46mondego>}<newline46mondego>"
"350splitHere46","20107369splitHere46","SQLException"
"351splitHere46","20107369splitHere46","SQLWarning"
"352splitHere46","20107369splitHere46","SQLWarning"
"353splitHere46","20107369splitHere46","java.sql.Statement"
"354splitHere46","20107369splitHere46","getWarnings()"
"355splitHere46","20107369splitHere46","SQLWarning"
"356splitHere46","20107410splitHere46","String[] ages = request.getParameterValues(<doubleQuotes46>age<doubleQuotes46>);<newline46mondego>"
"357splitHere46","20107410splitHere46","names"
"358splitHere46","20107564splitHere46","public static void main(String[] args) {<newline46mondego>    int a = 60;<newline46mondego>    int b = 24;<newline46mondego><newline46mondego>    for(int i = Math.min(a, b); i > 0; i--){<newline46mondego>        if(a % i == 0 && b % i == 0){<newline46mondego>            System.out.println(<doubleQuotes46>GCD: <doubleQuotes46> + i);<newline46mondego>            break;<newline46mondego>        }<newline46mondego>    }<newline46mondego>}<newline46mondego>"
"359splitHere46","20107564splitHere46","Math.min()"
"360splitHere46","20107564splitHere46","a"
"361splitHere46","20107564splitHere46","b"
"362splitHere46","20107684splitHere46","in"
"363splitHere46","20107720splitHere46","try {<newline46mondego>    BufferedReader br = <newline46mondego>                  new BufferedReader(new InputStreamReader(System.in));<newline46mondego><newline46mondego>    String input;<newline46mondego><newline46mondego>    while((input = br.readLine()) != null){<newline46mondego>        System.out.println(input);<newline46mondego>    }<newline46mondego><newline46mondego>} catch (IOException io){<newline46mondego>    io.printStackTrace();<newline46mondego>}   <newline46mondego>"
"364splitHere46","20107785splitHere46","sun.net.www.protocol.file.Handler"
"365splitHere46","20107785splitHere46","sun.net.www.protocol.jar.Handler"
"366splitHere46","20107785splitHere46","Handler"
"367splitHere46","20107785splitHere46","FileURLConnection"
"368splitHere46","20107785splitHere46","if (resource.getProtocol.equals(<doubleQuotes46>file<doubleQuotes46>)) {<newline46mondego>    return new File(resource.getPath()).isDirectory();<newline46mondego>}<newline46mondego>"
"369splitHere46","20107785splitHere46","Handler"
"370splitHere46","20107785splitHere46","JarURLConnection"
"371splitHere46","20107785splitHere46","ZipCoder"
"372splitHere46","20107785splitHere46","jzentry"
"373splitHere46","20107785splitHere46","null"
"374splitHere46","20107785splitHere46","com/google"
"375splitHere46","20107785splitHere46","ZipCoder"
"376splitHere46","20107785splitHere46","com/google"
"377splitHere46","20107785splitHere46","com/google/"
"378splitHere46","20107785splitHere46","jzentry"
"379splitHere46","20107785splitHere46","/"
"380splitHere46","20107785splitHere46","URLClassLoader"
"381splitHere46","20107785splitHere46","ClassLoader.getResource()"
"382splitHere46","20107896splitHere46","NodeAddException extends NodeException"
"383splitHere46","20107922splitHere46","(a * b) % p = ((a % p) * (b % p)) % p<newline46mondego>"
"384splitHere46","20107922splitHere46","(a^x * b^y) % z = ( ((a^x) % z) * ((b^y) % z) ) % z;<newline46mondego>"
"385splitHere46","20107922splitHere46","BigInteger result = a.modPow(x, z).multiply( b.modPow(y, z) ).mod(z);<newline46mondego>"
"386splitHere46","20107955splitHere46","try {<newline46mondego>        File file = new File(<doubleQuotes46>program.java<doubleQuotes46>);<newline46mondego>        Scanner scanner = new Scanner(file);<newline46mondego>        while(scanner.hasNextLine())<newline46mondego>        System.out.println(scanner.nextLine());<newline46mondego>    } catch (FileNotFoundException e) {<newline46mondego>        e.printStackTrace();<newline46mondego>    }<newline46mondego>"
"387splitHere46","20108078splitHere46","for (String element : testArrayList) {<newline46mondego>    if (!element.contains(query)) {<newline46mondego>        testArrayList.remove(element);<newline46mondego>    }<newline46mondego>}<newline46mondego>"
"388splitHere46","20108078splitHere46","Iterator<String> iter = testArrayList.iterator();<newline46mondego>while(iter.hasNext()){<newline46mondego>   if (!iter.next().contains(query)) {<newline46mondego>        iter.remove();<newline46mondego>}<newline46mondego>"
"389splitHere46","20108131splitHere46","isLineTooLong"
"390splitHere46","20108131splitHere46","s"
"391splitHere46","20108131splitHere46","s"
"392splitHere46","20108131splitHere46","isLineTooLong"
"393splitHere46","20108131splitHere46","private val isLineTooLong: String => Boolean = {<newline46mondego>  val bufferedImage = new BufferedImage(1, 1, BufferedImage.TYPE_INT_RGB)<newline46mondego>  val graphics = bufferedImage.getGraphics<newline46mondego><newline46mondego>  val metrics = graphics.getFontMetrics(font)<newline46mondego><newline46mondego>  (line: String) => metrics.stringWidth(line) > imgWidth<newline46mondego>}<newline46mondego>"
"394splitHere46","20108131splitHere46","BufferedImage"
"395splitHere46","20108131splitHere46","isLineTooLong"
"396splitHere46","20108201splitHere46","while(true)"
"397splitHere46","20108201splitHere46","accept()"
"398splitHere46","20108201splitHere46","ping"
"399splitHere46","20108201splitHere46","netstat"
"400splitHere46","20108284splitHere46","class Outer<newline46mondego>  {<newline46mondego>      class Inner<newline46mondego>      {<newline46mondego>        // field declaration and other code<newline46mondego>      }<newline46mondego>  }<newline46mondego>  //...........<newline46mondego>  Outer outerObj = new Outer();<newline46mondego>  Outer.Inner innerObj = outerObj.new Inner(); // instance creation of inner class<newline46mondego><newline46mondego>  Outer.Inner[] innrArr = new Outer.Inner[5]; // array creation of inner class<newline46mondego>"
"401splitHere46","20108284splitHere46","MultiplePrintableInvoiceData.Product[] product = new MultiplePrintableInvoiceData.Product[10];<newline46mondego>"
"402splitHere46","20108326splitHere46","JViewport#getViewRect"
"403splitHere46","20108326splitHere46","JViewport#getViewPosition"
"404splitHere46","20108326splitHere46","JViewport#setViewPosition"
"405splitHere46","20108326splitHere46","JScrollPane"
"406splitHere46","20108326splitHere46","JComponent#scrollRectToVisible"
"407splitHere46","20108362splitHere46","for (int i = 0; i < line.length(); i++)<newline46mondego>{<newline46mondego>    int letter = line.charAt(i) - 96;<newline46mondego>    if (letter > 0 && letter < 27) freq[letter]++;<newline46mondego>}<newline46mondego>"
"408splitHere46","20108362splitHere46","if (letter > 0 && letter < 27)"
"409splitHere46","20108362splitHere46","char"
"410splitHere46","20108362splitHere46","String"
"411splitHere46","20108362splitHere46","for-loop"
"412splitHere46","20108362splitHere46","for (int i = 0; i < freq.length - 1; i++)<newline46mondego>"
"413splitHere46","20108362splitHere46","for (int i = 1; i < freq.length; i++)<newline46mondego>"
"414splitHere46","20108362splitHere46","freq[26]"
"415splitHere46","20108362splitHere46","freq[0]"
"416splitHere46","20108362splitHere46","freq"
"417splitHere46","20108362splitHere46","line.charAt(i)"
"418splitHere46","20108362splitHere46","if-statement"
"419splitHere46","20108362splitHere46","for-loop"
"420splitHere46","20108362splitHere46","if (letter > -1 && letter < 26)"
"421splitHere46","20108362splitHere46","for (int i = 0; i < freq.length; i++)"
"422splitHere46","20108362splitHere46","System.out.println((char)(i + 96) + <doubleQuotes46>: <doubleQuotes46> + freq[i]);<newline46mondego>"
"423splitHere46","20108362splitHere46","freq"
"424splitHere46","20108362splitHere46","System.out.println((char)(i + 97) + <doubleQuotes46>: <doubleQuotes46> + freq[i]);<newline46mondego>"
"425splitHere46","20108497splitHere46","Double.parseDouble(kbIn.nextLine());<newline46mondego>"
"426splitHere46","20108503splitHere46","i"
"427splitHere46","20108503splitHere46","for"
"428splitHere46","20108503splitHere46","i"
"429splitHere46","20108503splitHere46","if ( i % 2 != 0){"
"430splitHere46","20108503splitHere46","i"
"431splitHere46","20108503splitHere46","for"
"432splitHere46","20108503splitHere46","++i;  ++j;<newline46mondego>"
"433splitHere46","20108503splitHere46","++j;<newline46mondego>"
"434splitHere46","20108506splitHere46","11-20 17:07:57.755: W/dalvikvm(12564): VFY: unable to resolve static method 5320: Lorg/jsoup/Jsoup;.connect (Ljava/lang/String;)Lorg/jsoup/Connection;<newline46mondego>"
"435splitHere46","20108530splitHere46","page.drawPolygon(new int[] {50,200,10}, new int[] {20,300,50}, 3);<newline46mondego>"
"436splitHere46","20108530splitHere46","int[] x = { 50, 200, 10 };<newline46mondego>"
"437splitHere46","20108545splitHere46","LinkedList"
"438splitHere46","20108545splitHere46","ConcurrentLinkedQueue"
"439splitHere46","20108545splitHere46","BlockingQueue"
"440splitHere46","20108545splitHere46","take()"
"441splitHere46","20108545splitHere46","public class EchoServer implements Thread {<newline46mondego><newline46mondego>    public static BlockingQueue<String> requests = new LinkedBlockingQueue<>();<newline46mondego><newline46mondego>    public void echo(String s) {<newline46mondego>        if(isInterrupted()) throw new IllegalStateException(<doubleQuotes46>Queue is closing!<doubleQuotes46>);<newline46mondego>        requests.add(s);<newline46mondego>    }<newline46mondego><newline46mondego>    @Override<newline46mondego>    public void run() {<newline46mondego>        try(<newline46mondego>            while(!isInterrupted() || requests.peek()!=null)<newline46mondego>               processEchoRequest(requests.take());<newline46mondego>        } catch (InterruptedException e) {}<newline46mondego>    }<newline46mondego><newline46mondego>    private void processEchoRequest(String s) { /* [...] */ }<newline46mondego><newline46mondego>}<newline46mondego>"
"442splitHere46","20108545splitHere46","public static void main(String[] args) {<newline46mondego><newline46mondego>    EchoServer clientEchoServer = new EchoServer(), \<newline46mondego>               managerEchoServer = new EchoServer();<newline46mondego><newline46mondego>    managerEchoServer.start();<newline46mondego>    managerEchoServer.echo(<doubleQuotes46>HI!<doubleQuotes46>);<newline46mondego><newline46mondego>    Thread manager = new Thread(managerEchoServer, <doubleQuotes46>manager<doubleQuotes46>);<newline46mondego>    manger.start();<newline46mondego><newline46mondego><newline46mondego>    clientEchoServer.start();<newline46mondego>    clientEchoServer.echo(<doubleQuotes46>HI!<doubleQuotes46>);<newline46mondego><newline46mondego>    Thread client = new Thread(managerEchoServer, <doubleQuotes46>manager<doubleQuotes46>);<newline46mondego>    client.start();<newline46mondego><newline46mondego>}<newline46mondego>"
"443splitHere46","20108555splitHere46","this"
"444splitHere46","20108555splitHere46","aload_0"
"445splitHere46","20108601splitHere46","Runtime.getRuntime().exec(<doubleQuotes46>c:\\program files\\test\\test.exe<doubleQuotes46>, null, new File(<doubleQuotes46>c:\\program files\\test\\<doubleQuotes46>));<newline46mondego>"
"446splitHere46","20108799splitHere46","java.sql.Time"
"447splitHere46","20108799splitHere46","java.util.Date"
"448splitHere46","20108799splitHere46","getTime()"
"449splitHere46","20108799splitHere46","Thread.sleep(end.getTime() - begin.getTime());<newline46mondego>"
"450splitHere46","20108799splitHere46","getHours()"
"451splitHere46","20108799splitHere46","getMinutes()"
"452splitHere46","20108810splitHere46","Stack"
"453splitHere46","20108810splitHere46","list"
"454splitHere46","20108810splitHere46","null"
"455splitHere46","20108810splitHere46","private LinkedList<E> list = new LinkedList<E>();<newline46mondego>"
"456splitHere46","20108832splitHere46","factorial"
"457splitHere46","20108832splitHere46","n - 1"
"458splitHere46","20108832splitHere46","3! = 3*2*1<newline46mondego>"
"459splitHere46","20108832splitHere46","3! = 3*2!<newline46mondego>"
"460splitHere46","20108832splitHere46","factorial(n) = n * factorial(n-1)<newline46mondego>"
"461splitHere46","20108832splitHere46","factorial(3);<newline46mondego>"
"462splitHere46","20108832splitHere46","3*factorial(2)"
"463splitHere46","20108832splitHere46","3*factorial(2)"
"464splitHere46","20108832splitHere46","factorial(2)"
"465splitHere46","20108832splitHere46","2*factorial(1)"
"466splitHere46","20108832splitHere46","3*2*factorial(1)"
"467splitHere46","20108832splitHere46","2*factorial(1)"
"468splitHere46","20108832splitHere46","2*1 = 2"
"469splitHere46","20108832splitHere46","3*2 = 6"
"470splitHere46","20108832splitHere46","0"
"471splitHere46","20108832splitHere46","0,-1,-2,-3,-4,..."
"472splitHere46","20108832splitHere46","1"
"473splitHere46","20108832splitHere46","private static long factorial(int n) {<newline46mondego><newline46mondego>    if (n == 1 || n == 0) {<newline46mondego>        return 1;<newline46mondego>    } else if (n < 0) {  // factorials are not defined below 0, they can be interpolated<newline46mondego>        return null;     // though, see note below<newline46mondego>    } else {<newline46mondego>        return n * factorial(n - 1);<newline46mondego>    }<newline46mondego>}<newline46mondego>"
"474splitHere46","20108916splitHere46","if(scan.hasNextInt()) {<newline46mondego>    coin1.setValue(scan.nextInt());<newline46mondego>} else {<newline46mondego>    System.out.println(<doubleQuotes46>C'mon, you need to enter an int!<doubleQuotes46>);<newline46mondego>    sc.next(); // clear their garbage response<newline46mondego>}<newline46mondego>"
"475splitHere46","20109013splitHere46","byte hashedBytes[] = digest.digest();<newline46mondego>"
"476splitHere46","20109053splitHere46","currentGuessPhrase[x] = currentGuessArray[x].toString();<newline46mondego>"
"477splitHere46","20109053splitHere46","currentGuessPhrase[x] = new String(currentGuessArray[x]);<newline46mondego>"
"478splitHere46","20109355splitHere46","rectangleArea"
"479splitHere46","20109355splitHere46","void"
"480splitHere46","20109355splitHere46","public static void rectangleArea(){<newline46mondego>"
"481splitHere46","20109355splitHere46","}"
"482splitHere46","20109355splitHere46","value"
"483splitHere46","20109355splitHere46","width"
"484splitHere46","20109355splitHere46","length"
"485splitHere46","20109355splitHere46","main"
"486splitHere46","20109355splitHere46","length"
"487splitHere46","20109355splitHere46","width"
"488splitHere46","20109355splitHere46","value"
"489splitHere46","20109355splitHere46","public static double rectangleArea(double length, double width) {<newline46mondego>    return length * width;<newline46mondego>}<newline46mondego>"
"490splitHere46","20109355splitHere46","length"
"491splitHere46","20109355splitHere46","width"
"492splitHere46","20109355splitHere46","value = rectangleArea(length, width);<newline46mondego>"
"493splitHere46","20109362splitHere46","StringBuilder outSB = new StringBuilder();<newline46mondego>for(int i=0; i < str.length(); i++){<newline46mondego>    if(str.charAt(i) == 'a' || str.charAt(i) == 'A') outSB.append(<doubleQuotes46>Alpha <doubleQuotes46>);<newline46mondego>    if(str.charAt(i) == 'b' || str.charAt(i) == 'B') outSB.append(<doubleQuotes46>Bravo <doubleQuotes46>);<newline46mondego>    // and so on<newline46mondego>}<newline46mondego>String output = outSB.toString();<newline46mondego>"
"494splitHere46","20109520splitHere46","package stackoverflow.questions;<newline46mondego><newline46mondego>import com.google.gson.*;<newline46mondego><newline46mondego>import java.util.ArrayList;<newline46mondego>import java.util.List;<newline46mondego><newline46mondego>public class ParentChildApp {<newline46mondego><newline46mondego>   public static class Entry {<newline46mondego><newline46mondego>      private String name;<newline46mondego><newline46mondego>      public Entry(String name) {<newline46mondego>         this.name = name;<newline46mondego>      }<newline46mondego><newline46mondego>      private List<Entry> children;<newline46mondego><newline46mondego>      public void add(Entry node){<newline46mondego>         if (children == null)<newline46mondego>            children = new ArrayList<Entry>();<newline46mondego>         children.add(node);<newline46mondego>      }<newline46mondego><newline46mondego>   }<newline46mondego><newline46mondego>   public static void main(String[] args) {<newline46mondego><newline46mondego>      Entry workNode = new Entry(<doubleQuotes46>Work<doubleQuotes46>);<newline46mondego>      workNode.add(new Entry(<doubleQuotes46>Effort<doubleQuotes46>));<newline46mondego>      workNode.add(new Entry(<doubleQuotes46>Trust<doubleQuotes46>));<newline46mondego><newline46mondego>      Entry salaryNode = new Entry(<doubleQuotes46>Salary<doubleQuotes46>);<newline46mondego><newline46mondego><newline46mondego>      Entry cultureNode = new Entry(<doubleQuotes46>Culture<doubleQuotes46>);<newline46mondego>      cultureNode.add(salaryNode);<newline46mondego>      cultureNode.add(workNode);<newline46mondego><newline46mondego>      Gson g = new Gson();<newline46mondego><newline46mondego>      System.out.println(g.toJson(cultureNode));<newline46mondego>   }<newline46mondego><newline46mondego>}<newline46mondego>"
"495splitHere46","20109552splitHere46","white.setColor(1, 1, 1, <alpha>);<newline46mondego>"
"496splitHere46","20109552splitHere46","white.setColor(1, 1, 1, 1);<newline46mondego>"
"497splitHere46","20109574splitHere46","bufferedReader"
"498splitHere46","20109574splitHere46","String nextLine = br.readLine()"
"499splitHere46","20109574splitHere46","2,"
"500splitHere46","20109574splitHere46","NoSuchElementException"
"501splitHere46","20109597splitHere46","User"
"502splitHere46","20110100splitHere46","int index = Arrays.asList(flowerName).indexOf(strFlowerIn);<newline46mondego>double price = flowerPrice[index];<newline46mondego>double total = price * intFlowerNumIn;<newline46mondego>"
"503splitHere46","20110100splitHere46","String[] flowerName = {<doubleQuotes46>Pentunia<doubleQuotes46>, <doubleQuotes46>Pansy<doubleQuotes46>, <doubleQuotes46>Rose<doubleQuotes46>, <doubleQuotes46>Violet<doubleQuotes46>, <doubleQuotes46>Carnation<doubleQuotes46>};<newline46mondego>Double[] flowerPrice = {.50d, .75d, 1.50d, .50d, .80d};<newline46mondego><newline46mondego>System.out.println(<doubleQuotes46>What kind of flower would you like?<doubleQuotes46>);<newline46mondego><newline46mondego>Scanner keyboard = new Scanner(System.in);<newline46mondego>String strFlowerIn = keyboard.nextLine();<newline46mondego>int index = Arrays.asList(flowerName).indexOf(strFlowerIn);<newline46mondego><newline46mondego>System.out.println(<doubleQuotes46>How many would you like?<doubleQuotes46>);<newline46mondego>int intFlowerNumIn = keyboard.nextInt();<newline46mondego>decimal price = flowerPrice[index];<newline46mondego>decimal total = price * intFlowerNumIn;<newline46mondego><newline46mondego>System.out.println(<doubleQuotes46>Total price: <doubleQuotes46> + total);<newline46mondego>"
"504splitHere46","20110116splitHere46","Module"
"505splitHere46","20110116splitHere46","Module"
"506splitHere46","20110116splitHere46","ObjectMapper"
"507splitHere46","20110116splitHere46","import java.io.IOException;<newline46mondego><newline46mondego>import com.fasterxml.jackson.core.JsonGenerator;<newline46mondego>import com.fasterxml.jackson.core.JsonProcessingException;<newline46mondego>import com.fasterxml.jackson.databind.JsonSerializer;<newline46mondego>import com.fasterxml.jackson.databind.ObjectMapper;<newline46mondego>import com.fasterxml.jackson.databind.SerializerProvider;<newline46mondego>import com.fasterxml.jackson.databind.module.SimpleModule;<newline46mondego><newline46mondego>public class JacksonProgram {<newline46mondego><newline46mondego>    public static void main(String[] args) throws Exception {<newline46mondego>        SimpleModule module = new SimpleModule();<newline46mondego>        module.addSerializer(Error.class, new ErrorJsonSerializer());<newline46mondego><newline46mondego>        ObjectMapper mapper = new ObjectMapper();<newline46mondego>        mapper.registerModule(module);<newline46mondego><newline46mondego>        System.out.println(mapper.writeValueAsString(Error.NOT_FOUND));<newline46mondego>    }<newline46mondego>}<newline46mondego>"
"508splitHere46","20110116splitHere46","{<doubleQuotes46>code<doubleQuotes46>:1,<doubleQuotes46>text<doubleQuotes46>:<doubleQuotes46>Not found<doubleQuotes46>}<newline46mondego>"
"509splitHere46","20110116splitHere46","ObjectMapper"
"510splitHere46","20110130splitHere46","FontFactory factory = FontFactory.getInstance();<newline46mondego>Font[] fonts = factory.loadFonts( ... ); // pulls every TTF out of TTC<newline46mondego>ArrayList<PDTrueTypeFont> pdf_fonts = new ArrayList<PDTrueTypeFont>();<newline46mondego>for( Font f : fonts ){<newline46mondego>   // sfntly writes each font to a TTF stream<newline46mondego>   ByteArrayOutputStream out = ByteArrayOutputStream();<newline46mondego>   factory.serializeFont(f, out);<newline46mondego><newline46mondego>   // PDFBox reads the stream and embeds the font<newline46mondego>   ByteArrayInputStream ttf_font_stream = ByteArrayInputStream(out.toByteArray());<newline46mondego>   pdf_fonts.add(PDTrueTypeFont.loadTTF(document, ttf_font_stream));<newline46mondego>}<newline46mondego>"
"511splitHere46","20110130splitHere46","Font"
"512splitHere46","20110130splitHere46","FontFactory"
"513splitHere46","20110130splitHere46","com.google.typography.sfntly"
"514splitHere46","20110163splitHere46","return recursiveDFShelper(v, des);<newline46mondego>"
"515splitHere46","20110163splitHere46","if(recursiveDFShelper(v, des)) {<newline46mondego>  return true;<newline46mondego>}<newline46mondego>"
"516splitHere46","20110319splitHere46","onCreateView"
"517splitHere46","20110319splitHere46","@Override<newline46mondego>    public View onCreateView(LayoutInflater inflater, <newline46mondego>            ViewGroup container, Bundle savedInstanceState) {<newline46mondego>        View view = inflater.inflate(R.layout.event, <newline46mondego>                container, false);<newline46mondego>        // Check for an open session<newline46mondego>        Session session = Session.getActiveSession();<newline46mondego>        if (session != null && session.isOpened()) {<newline46mondego>            // Get the user's data<newline46mondego>            ShowEventsFromFQL();<newline46mondego><newline46mondego>        }<newline46mondego>        return view;<newline46mondego>    }<newline46mondego>"
"518splitHere46","20110319splitHere46","onCreateView"
"519splitHere46","20110319splitHere46","linearProgress = (LinearLayout) getView().findViewById(R.id.linProgress);<newline46mondego>"
"520splitHere46","20110319splitHere46","linearProgress = (LinearLayout) view.findViewById(R.id.linProgress);<newline46mondego>"
"521splitHere46","20110319splitHere46","view"
"522splitHere46","20110349splitHere46","if(ins.readLine().contains(<doubleQuotes46>Logged Out<doubleQuotes46>))<newline46mondego>"
"523splitHere46","20110349splitHere46","System.out.println(ins.readLine());<newline46mondego>"
"524splitHere46","20110349splitHere46","String serverResponse = ins.readLine();<newline46mondego>if (serverResponse.contains(<doubleQuotes46>Logged Out<doubleQuotes46>)) {<newline46mondego>  System.exit(0);<newline46mondego>} else {<newline46mondego>  // reuse serverResponse instead of reading another line...<newline46mondego>  System.out.println(serverResponse);  <newline46mondego>}<newline46mondego>"
"525splitHere46","20110398splitHere46","currentGuessArray"
"526splitHere46","20110398splitHere46","//Convert chars back to string array<newline46mondego>for (int x = 0; x < currentGuessArray.length ; x++) {<newline46mondego>    currentGuessPhrase[x] = new String(currentGuessArray[x]);<newline46mondego>}<newline46mondego>"
"527splitHere46","20110445splitHere46","ListView LV = (ListView) V.findViewById(R.id.dealsListView);<newline46mondego>"
"528splitHere46","20110445splitHere46","ListView LV = (ListView) this.getActivity().findViewById(R.id.dealsListView);<newline46mondego>"
"529splitHere46","20110445splitHere46","V"
"530splitHere46","20110561splitHere46","factory.createSocket(host,port)"
"531splitHere46","20110561splitHere46","google.com"
"532splitHere46","20110561splitHere46","host"
"533splitHere46","20110561splitHere46","host https://google.com"
"534splitHere46","20110565splitHere46","ggt"
"535splitHere46","20110565splitHere46","ggt"
"536splitHere46","20110565splitHere46","ggt"
"537splitHere46","20110565splitHere46","int ggt = ggt(Math.abs(neuZaehler), Math.abs(neuNenner));<newline46mondego>"
"538splitHere46","20110565splitHere46","x"
"539splitHere46","20110565splitHere46","y"
"540splitHere46","20110565splitHere46","x % y"
"541splitHere46","20110565splitHere46","AssertionError"
"542splitHere46","20110565splitHere46","neuNenner"
"543splitHere46","20110565splitHere46","neuNenner"
"544splitHere46","20110565splitHere46","long"
"545splitHere46","20110565splitHere46","bruchAddition"
"546splitHere46","20110565splitHere46","ggt"
"547splitHere46","20110565splitHere46","BigInteger"
"548splitHere46","20110565splitHere46","bruchAddition"
"549splitHere46","20110565splitHere46","n1 == n2"
"550splitHere46","20110565splitHere46","n1"
"551splitHere46","20110565splitHere46","n2"
"552splitHere46","20110565splitHere46","n1/n2"
"553splitHere46","20110565splitHere46","n2/n1"
"554splitHere46","20110565splitHere46","n1"
"555splitHere46","20110565splitHere46","n2"
"556splitHere46","20110565splitHere46","int"
"557splitHere46","20110565splitHere46","long"
"558splitHere46","20110565splitHere46","public static String bruchAddition(int z1, int n1, int z2, int n2) {<newline46mondego><newline46mondego>    long neuZaehler = (z1 * n2) + (z2 * n1);<newline46mondego>    long neuNenner = n1 * n2;<newline46mondego>"
"559splitHere46","20110565splitHere46","int"
"560splitHere46","20110565splitHere46","long"
"561splitHere46","20110565splitHere46","public static String bruchAddition(int z1, int n1, int z2, int n2) {<newline46mondego><newline46mondego>    long neuZaehler = ((long)z1 * (long)n2) + ((long)z2 * (long)n1);<newline46mondego>    long neuNenner = (long)n1 * (long)n2;<newline46mondego>"
"562splitHere46","20110565splitHere46","ggt"
"563splitHere46","20110565splitHere46","long"
"564splitHere46","20110565splitHere46","ggt"
"565splitHere46","20110565splitHere46","long"
"566splitHere46","20110594splitHere46","IOException"
"567splitHere46","20110594splitHere46","create server socket<newline46mondego>while (1) {<newline46mondego>    try {<newline46mondego>        accept client connection<newline46mondego>        set up your I/O streams<newline46mondego><newline46mondego>        while (1) {<newline46mondego>            interact with client until connection closes<newline46mondego>        }<newline46mondego>    } catch (...) {<newline46mondego>        handle errors<newline46mondego>    }<newline46mondego>} // loop back to the accept call here<newline46mondego>"
"568splitHere46","20110597splitHere46","trim()"
"569splitHere46","20110597splitHere46","temp1 = Integer.parseInt(display.getText().trim(), 16 );<newline46mondego>"
"570splitHere46","20110659splitHere46","String args[]"
"571splitHere46","20110659splitHere46","String[] args"
"572splitHere46","20110659splitHere46","public static void main(String... args)<newline46mondego>"
"573splitHere46","20110738splitHere46","String url = <doubleQuotes46><a href=\<doubleQuotes46>http://www.google.com\<doubleQuotes46>>Google</a><br/><doubleQuotes46>;<newline46mondego>    String[] separate = url.split(<doubleQuotes46>\<doubleQuotes46><doubleQuotes46>);<newline46mondego>    String URL = separate[1];<newline46mondego>    String text = separate[2].substring(1).split(<doubleQuotes46><<doubleQuotes46>)[0];<newline46mondego>"
"574splitHere46","20110751splitHere46","Box"
"575splitHere46","20110751splitHere46","box1"
"576splitHere46","20110751splitHere46","Box b1 = new Box(width, height, length);<newline46mondego>"
"577splitHere46","20110751splitHere46","box2"
"578splitHere46","20110751splitHere46","Box b2 = new Box(width,height,length);<newline46mondego>"
"579splitHere46","20110751splitHere46","if"
"580splitHere46","20110751splitHere46","volume1 > volume2"
"581splitHere46","20110751splitHere46","if(b1.getVolume() > b2.getVolume())<newline46mondego>"
"582splitHere46","20110751splitHere46","getVolume()"
"583splitHere46","20110751splitHere46","Box"
"584splitHere46","20110751splitHere46","public int getVolume() {<newline46mondego>    return volume;<newline46mondego>} <newline46mondego>"
"585splitHere46","20110751splitHere46","volume"
"586splitHere46","20110751splitHere46","Box"
"587splitHere46","20110751splitHere46","return (width * height * length);"
"588splitHere46","20110751splitHere46","int"
"589splitHere46","20110751splitHere46","width"
"590splitHere46","20110751splitHere46","height"
"591splitHere46","20110751splitHere46","length"
"592splitHere46","20110751splitHere46","b1"
"593splitHere46","20110751splitHere46","b1"
"594splitHere46","20110751splitHere46","b2"
"595splitHere46","20110751splitHere46","volume1"
"596splitHere46","20110751splitHere46","volume2"
"597splitHere46","20110751splitHere46","surfacearea1"
"598splitHere46","20110751splitHere46","surfacearea2"
"599splitHere46","20110751splitHere46","Box"
"600splitHere46","20110751splitHere46","Box"
"601splitHere46","20110751splitHere46","getVolume()"
"602splitHere46","20110751splitHere46","getSurfaceArea()"
"603splitHere46","20110833splitHere46","if( expression )<newline46mondego>    throw new MyCustomException();<newline46mondego>}<newline46mondego>"
"604splitHere46","20110833splitHere46","class MyCustomException extends RuntimeException ...<newline46mondego>"
"605splitHere46","20110858splitHere46","getColumnClass(int)"
"606splitHere46","20110858splitHere46","Class<Object>"
"607splitHere46","20110858splitHere46","cast(Object)"
"608splitHere46","20110858splitHere46","getValueAt(int,int)"
"609splitHere46","20110858splitHere46","AbstractTableModel"
"610splitHere46","20110858splitHere46","getValueAt(int,int)"
"611splitHere46","20110858splitHere46","instanceof"
"612splitHere46","20110943splitHere46","public Sound(Sound s) {<newline46mondego>  int j = 0;<newline46mondego>  set(s.samples);<newline46mondego>}<newline46mondego>"
"613splitHere46","20110943splitHere46","public void set(double[] mySamples) {<newline46mondego>  if (mySamples == null) {<newline46mondego>    throw new IllegalArgumentException(<newline46mondego>        <doubleQuotes46>samples cannot be null<doubleQuotes46>);<newline46mondego>  } else {<newline46mondego>    samples = new double[mySamples.length];<newline46mondego>    for (int i = 0; i < mySamples.length; i++) {<newline46mondego>      samples[i] = mySamples[i];<newline46mondego>    }<newline46mondego>  }<newline46mondego>}<newline46mondego>"
"614splitHere46","20111049splitHere46","O(N)"
"615splitHere46","20111049splitHere46","LinkedHashMap"
"616splitHere46","20111049splitHere46","String[] data = new String[] {<doubleQuotes46>foo 123<doubleQuotes46>, <doubleQuotes46>bar 124<doubleQuotes46>, <doubleQuotes46>foobar 124<doubleQuotes46>,<doubleQuotes46>foo 125<doubleQuotes46>};<newline46mondego>Map<String,Integer> counts = new LinkedHashMap<String,Integer>();<newline46mondego>for (String s : data) {<newline46mondego>    String[] tok = s.split(<doubleQuotes46> <doubleQuotes46>);<newline46mondego>    Integer count = Integer.valueOf(tok[1]);<newline46mondego>    if (!counts.containsKey(tok[0]) || counts.get(tok[0]) < count) {<newline46mondego>        counts.put(tok[0], count);<newline46mondego>    }<newline46mondego>}<newline46mondego>for (Map.Entry<String,Integer> e : counts.entrySet()) {<newline46mondego>    System.out.println(e.getKey() + <doubleQuotes46> <doubleQuotes46> +e.getValue());<newline46mondego>}<newline46mondego>"
"617splitHere46","20111141splitHere46","(1000 * 24 * 60 * 60)"
"618splitHere46","20111141splitHere46","// Â© 2013 Basil Bourque. This source code may be used freely forever by anyone taking full responsibility for doing so.<newline46mondego><newline46mondego>// Using US west coast time zone because March 9, 2014 at 02:00 is the start of DST Daylight Saving Time.<newline46mondego>org.joda.time.DateTimeZone californiaTimeZone = org.joda.time.DateTimeZone.forID(<doubleQuotes46>America/Los_Angeles<doubleQuotes46>);<newline46mondego><newline46mondego>org.joda.time.DateTime now = new org.joda.time.DateTime(californiaTimeZone);<newline46mondego><newline46mondego>// Note the arbitrary choice of times (14 & 21 hours) assigned to new DateTimes.<newline46mondego>org.joda.time.DateTime march_8_2014 = new org.joda.time.DateTime( 2014, 3, 8, 14, 0);<newline46mondego>org.joda.time.DateTime march_9_2014 = new org.joda.time.DateTime( 2014, 3, 9, 21, 0);<newline46mondego><newline46mondego>int daysUntil8th = org.joda.time.Days.daysBetween( now , march_8_2014 ).getDays();<newline46mondego>int daysUntil9th = org.joda.time.Days.daysBetween( now , march_9_2014 ).getDays();<newline46mondego><newline46mondego>// If you want whole days, call 'withTimeAtStartOfDate()' method.<newline46mondego>// Don't get clever with trying to set a midnight time. Not every day in every time zone has a midnight.<newline46mondego>int daysUntil8thStarts = org.joda.time.Days.daysBetween( now , march_8_2014.withTimeAtStartOfDay() ).getDays();<newline46mondego>int daysUntil9thStarts = org.joda.time.Days.daysBetween( now , march_9_2014.withTimeAtStartOfDay() ).getDays();<newline46mondego><newline46mondego>System.out.println(<doubleQuotes46>Now in 'America/Los_Angeles' (Pacific Standard Time): <doubleQuotes46> + now );<newline46mondego><newline46mondego>System.out.println(<doubleQuotes46>Days until <doubleQuotes46> +  march_8_2014 + <doubleQuotes46>: <doubleQuotes46> + daysUntil8th );<newline46mondego>System.out.println(<doubleQuotes46>Days until <doubleQuotes46> + march_9_2014 + <doubleQuotes46>: <doubleQuotes46> + daysUntil9th );<newline46mondego><newline46mondego>System.out.println(<doubleQuotes46>Days until March 8, 2014 starts: <doubleQuotes46> + daysUntil8thStarts );<newline46mondego>System.out.println(<doubleQuotes46>Days until March 9, 2014 starts: <doubleQuotes46> + daysUntil9thStarts );<newline46mondego>"
"619splitHere46","20111141splitHere46","Now in 'America/Los_Angeles' (Pacific Standard Time): 2013-11-20T18:25:06.424-08:00<newline46mondego>Days until 2014-03-08T14:00:00.000-08:00: 107<newline46mondego>Days until 2014-03-09T21:00:00.000-07:00: 109<newline46mondego>Days until March 8, 2014 starts: 107<newline46mondego>Days until March 9, 2014 starts: 108<newline46mondego>"
"620splitHere46","20111215splitHere46","// Don't do this!!!<newline46mondego>public class HouseTour extends Room {<newline46mondego><newline46mondego>    public HouseTour() {<newline46mondego>      super(<doubleQuotes46>foo<doubleQuotes46>, <doubleQuotes46>bar<doubleQuotes46>);<newline46mondego>      ....<newline46mondego>    }<newline46mondego>"
"621splitHere46","20111215splitHere46","extends Room"
"622splitHere46","20111215splitHere46","public class HouseTour {  // no extends!<newline46mondego>  private Room[] rooms; // has-a not is-a<newline46mondego><newline46mondego>  public HouseTour() {<newline46mondego>    // don't call super here<newline46mondego>  }<newline46mondego>"
"623splitHere46","20111215splitHere46","rooms.toString()"
"624splitHere46","20111215splitHere46","public String rooms( ) <newline46mondego>{<newline46mondego>    output = <doubleQuotes46>House Rooms included in tour\n<doubleQuotes46>;<newline46mondego>    for (int i = 0; i <=7; i++)<newline46mondego>    {<newline46mondego>        output += rooms[i]; // I can't do this but how do i?<newline46mondego>    }<newline46mondego>    return output.toString(); // do I do this?<newline46mondego>}<newline46mondego>"
"625splitHere46","20111215splitHere46","public String rooms( ) {<newline46mondego>    // declare your String locally, not globally in the class<newline46mondego>    String output = <doubleQuotes46>House Rooms included in tour\n<doubleQuotes46>;<newline46mondego>    // again, avoid using <doubleQuotes46>magic<doubleQuotes46> numbers like 7<newline46mondego>    for (int i = 0; i < rooms.length; i++) {<newline46mondego>        output += rooms[i].toString(); // **** you must extract Room's String<newline46mondego>    }<newline46mondego>    return output;  // no need to call toString() on a String<newline46mondego>}<newline46mondego>"
"626splitHere46","20111245splitHere46","<Button<newline46mondego>    android:id=<doubleQuotes46>@+id/alpha_button<doubleQuotes46><newline46mondego>    android:layout_width=<doubleQuotes46>fill_parent<doubleQuotes46><newline46mondego>    android:layout_height=<doubleQuotes46>fill_parent<doubleQuotes46><newline46mondego>    android:layout_weight=<doubleQuotes46>1<doubleQuotes46><newline46mondego>    android:text=<doubleQuotes46>@string/alpha<doubleQuotes46><newline46mondego>    android:onClick=<doubleQuotes46>onButtonClick<doubleQuotes46> /><newline46mondego><newline46mondego><Button<newline46mondego>    android:id=<doubleQuotes46>@+id/beta_button<doubleQuotes46><newline46mondego>    android:layout_width=<doubleQuotes46>fill_parent<doubleQuotes46><newline46mondego>    android:layout_height=<doubleQuotes46>fill_parent<doubleQuotes46><newline46mondego>    android:layout_weight=<doubleQuotes46>1<doubleQuotes46><newline46mondego>    android:text=<doubleQuotes46>@string/beta<doubleQuotes46><newline46mondego>    android:onClick=<doubleQuotes46>onButtonClick<doubleQuotes46>  /><newline46mondego><newline46mondego><newline46mondego><newline46mondego>public void onButtonClick(View view) {<newline46mondego>        Intent intent;<newline46mondego>        switch (view.getId()) {<newline46mondego>        case R.id.alpha_button:<newline46mondego>            intent = new Intent(this, AlphaActivity.class);<newline46mondego>            break;<newline46mondego>        case R.id.beta_button:<newline46mondego>            intent = new Intent(this, BetaActivity.class);<newline46mondego>            break;<newline46mondego>        default:<newline46mondego>            return;<newline46mondego>        }<newline46mondego>        startActivity(intent);<newline46mondego>    }<newline46mondego>"
"627splitHere46","20111311splitHere46","sum()"
"628splitHere46","20111311splitHere46","public static int sum(int[] a, int start, int end){<newline46mondego>    int sum = 0;<newline46mondego>    for(int i = start; i < end; i++) sum += a[i];<newline46mondego>    return sum;<newline46mondego>}<newline46mondego>"
"629splitHere46","20111311splitHere46","sum()"
"630splitHere46","20111311splitHere46","daysToEnd"
"631splitHere46","20111311splitHere46","daysFromStart"
"632splitHere46","20111311splitHere46","static int[] daysInMonth = {31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31};<newline46mondego><newline46mondego>public static int daysToEnd(int day, int month){<newline46mondego>    return sum(daysInMonth, month - 1, 12) - day;<newline46mondego>}<newline46mondego><newline46mondego>public static int daysFromStart(int day, int month){<newline46mondego>    return sum(daysInMonth, 0, month - 1) + day;<newline46mondego>}<newline46mondego><newline46mondego>public static void main(String... args){<newline46mondego>    int[] date1 = {23, 1, 1994};<newline46mondego>    int[] date2 = {1, 1, 1997};<newline46mondego><newline46mondego>    // This actually works for same or different years<newline46mondego>    int days = daysToEnd(date1[0], date1[1]) +<newline46mondego>               365*(date2[2] - date1[2] - 1) +<newline46mondego>               daysFromStart(date2[0], date2[1]);<newline46mondego><newline46mondego>    System.out.println(days);<newline46mondego>}<newline46mondego>"
"633splitHere46","20111459splitHere46","A"
"634splitHere46","20111459splitHere46","public T getK();<newline46mondego>public void setK(T k);<newline46mondego>"
"635splitHere46","20111459splitHere46","B"
"636splitHere46","20111459splitHere46","public T getZ();<newline46mondego>public void setZ(T z);<newline46mondego>"
"637splitHere46","20111459splitHere46","UnsupportedOperationException"
"638splitHere46","20111459splitHere46","C"
"639splitHere46","20111459splitHere46","class A implements C{<newline46mondego><newline46mondego>     T x;<newline46mondego>     T y;<newline46mondego>     T z; <newline46mondego>     ...<newline46mondego>     public T getK(){<newline46mondego>         throw new UnsupportedOperationException(<doubleQuotes46>YOUR MESSAGE<doubleQuotes46>);<newline46mondego>     }<newline46mondego><newline46mondego>}<newline46mondego>"
"640splitHere46","20111492splitHere46","Personality.java:16: error: method asksForFile in class Personality cannot be applied to given types;<newline46mondego>      Scanner scanner = asksForFile(input);<newline46mondego>                        ^<newline46mondego>  required: Scanner,PrintStream<newline46mondego>  found: Scanner<newline46mondego>  reason: actual and formal argument lists differ in length<newline46mondego>"
"641splitHere46","20111492splitHere46","//Asks for input file<newline46mondego>public static Scanner asksForFile(Scanner scanner, PrintStream output) throws FileNotFoundException {<newline46mondego>    output.print(<doubleQuotes46>input file name? <doubleQuotes46>);<newline46mondego>    String filename = input.nextLine();<newline46mondego>    return new Scanner(new File(filename));<newline46mondego><newline46mondego>}<newline46mondego>"
"642splitHere46","20111492splitHere46","asksForFile()"
"643splitHere46","20111498splitHere46","static import"
"644splitHere46","20111498splitHere46","import static com.example.foo.GameStatus.*;<newline46mondego>"
"645splitHere46","20111498splitHere46","if(gameStatus == GameStatus.WON)<newline46mondego>{<newline46mondego>    point++;<newline46mondego>}<newline46mondego>else if(gameStatus == GameStatus.LOST)<newline46mondego>{<newline46mondego>    point--;<newline46mondego>}<newline46mondego>"
"646splitHere46","20111498splitHere46","switch"
"647splitHere46","20111498splitHere46","if/else"
"648splitHere46","20111498splitHere46","switch (gameStatus) {<newline46mondego>    case WON:<newline46mondego>        point++;<newline46mondego>        break;<newline46mondego>    case LOST:<newline46mondego>        point--;<newline46mondego>        break;   <newline46mondego>}<newline46mondego>"
"649splitHere46","20111605splitHere46","phones[phones.length - 1] = null;"
"650splitHere46","20111605splitHere46","phones"
"651splitHere46","20111605splitHere46","newPhones"
"652splitHere46","20111605splitHere46","for (int i = deleteIndex; i < phones.length - 1; i++) {<newline46mondego>    phones[i] = phones[i + 1];<newline46mondego>    // Move three lines of code<newline46mondego>    phones[phones.length - 1] = null; // <= Problem here<newline46mondego>    CellPhone[] newPhones = new CellPhone[phones.length - 1];<newline46mondego>    // Need some code to copy data<newline46mondego>    phones = newPhones;<newline46mondego>}<newline46mondego>"
"653splitHere46","20111605splitHere46","CellPhone[] newPhones = new CellPhone[phones.length - 1];<newline46mondego>int oldIndex = 0, newIndex = 0;<newline46mondego>while (oldIndex < phones.length) {<newline46mondego>    if (oldIndex != deleteIndex) { // Skip copying deleted number<newline46mondego>        newPhones[newIndex++] = phones[oldIndex];<newline46mondego>    }<newline46mondego><newline46mondego>    oldIndex++;<newline46mondego>}<newline46mondego>"
"654splitHere46","20111662splitHere46","public void paint(Graphics g){ //Draw function<newline46mondego>    Graphics2D g2d = (Graphics2D) g;<newline46mondego>    ///////////////////////////////////<newline46mondego>    Thread audioThrd = new Thread(new playAudio());<newline46mondego>    audioThrd.start();<newline46mondego>}<newline46mondego>"
"655splitHere46","20111662splitHere46","repaint()"
"656splitHere46","20111662splitHere46","paint(Graphics g)"
"657splitHere46","20111662splitHere46","paintComponent(Graphics g)"
"658splitHere46","20111893splitHere46","HelpProvider"
"659splitHere46","20111893splitHere46","getHelpDocuments()"
"660splitHere46","20111893splitHere46","Service-Component"
"661splitHere46","20111893splitHere46","Bundle-Blueprint"
"662splitHere46","20111893splitHere46","persistence.xml"
"663splitHere46","20111893splitHere46","Meta-Persistence"
"664splitHere46","20111893splitHere46","plugin.xml"
"665splitHere46","20111972splitHere46","Math.max"
"666splitHere46","20111972splitHere46","double max;<newline46mondego>double min;<newline46mondego><newline46mondego>public static void getMaxAndMin(<newline46mondego>                   double day1, double day2, double day3, double day4, <newline46mondego>                                double day5, double day6, double day7){<newline46mondego><newline46mondego>    max = Math.max(day1, day2);<newline46mondego>    max = Math.max(max, day3);<newline46mondego>    max = Math.max(max, day4);<newline46mondego>    max = Math.max(max, day5);<newline46mondego>    max = Math.max(max, day6);<newline46mondego>    max = Math.max(max, day7);<newline46mondego><newline46mondego>    min = Math.min(day1, day2);<newline46mondego>    min = Math.min(min, day3);<newline46mondego>    min = Math.min(min, day4);<newline46mondego>    min = Math.min(min, day5);<newline46mondego>    min = Math.min(min, day6);<newline46mondego>    min = Math.min(min, day7);<newline46mondego><newline46mondego>}<newline46mondego>"
"667splitHere46","20112073splitHere46","userChoice =JOptionPane.showInputDialog(null, <doubleQuotes46>Enter one of the following as your choice: \n Rock: (valid choices include 0, r, rock) \n Paper: (valid choices include 1, p, paper) \n Scissors: (valid choices include 2, s, scissors)<doubleQuotes46>);<newline46mondego>yourChoice = Integer.parseInt(userChoice);<newline46mondego><newline46mondego>ConvertStringtoNum(userChoice);<newline46mondego><newline46mondego>yourChoice= ConvertStringtoNum(userChoice);<newline46mondego>"
"668splitHere46","20112073splitHere46","userChoice"
"669splitHere46","20112073splitHere46","Integer"
"670splitHere46","20112073splitHere46","0, 1"
"671splitHere46","20112073splitHere46","2"
"672splitHere46","20112073splitHere46","NumberFormatException"
"673splitHere46","20112073splitHere46","ConvertStringtoNum"
"674splitHere46","20112073splitHere46","yourChoice"
"675splitHere46","20112073splitHere46","yourChoice= ConvertStringtoNum(userChoice);"
"676splitHere46","20112073splitHere46","NumberFormatException"
"677splitHere46","20112073splitHere46","ConvertStringtoNum"
"678splitHere46","20112073splitHere46","userChoice =JOptionPane.showInputDialog(null, <doubleQuotes46>Enter one of the following as your choice: \n Rock: (valid choices include 0, r, rock) \n Paper: (valid choices include 1, p, paper) \n Scissors: (valid choices include 2, s, scissors)<doubleQuotes46>);<newline46mondego><newline46mondego>yourChoice= ConvertStringtoNum(userChoice);<newline46mondego>"
"679splitHere46","20112073splitHere46","ConvertStringtoNum"
"680splitHere46","20112073splitHere46","if {} else if {}"
"681splitHere46","20112073splitHere46","yourChoice"
"682splitHere46","20112073splitHere46","return yourChoice = 1"
"683splitHere46","20112073splitHere46","1"
"684splitHere46","20112073splitHere46","return yourChoice;"
"685splitHere46","20112073splitHere46","DetermineWinner"
"686splitHere46","20112073splitHere46","userChoice==<doubleQuotes46>sissors<doubleQuotes46>"
"687splitHere46","20112073splitHere46",".equals"
"688splitHere46","20112073splitHere46","userChoice"
"689splitHere46","20112073splitHere46","yourChoice"
"690splitHere46","20112073splitHere46","userChoice"
"691splitHere46","20112073splitHere46","DetermineWinner"
"692splitHere46","20112073splitHere46","DetermineWinner"
"693splitHere46","20112073splitHere46","ConvertStringtoNum"
"694splitHere46","20112073splitHere46","public final void DetermineWinner(int yourChoice, int computerChoice){<newline46mondego>    //determines the winner<newline46mondego>    if(yourChoice == computerChoice){<newline46mondego>        JOptionPane.showMessageDialog(null,<doubleQuotes46>It's a tie!<doubleQuotes46>);<newline46mondego>        tieGames++;<newline46mondego>        return; // with return we exit the function at this point. Otherwise another case could be executed from below.<newline46mondego>    }<newline46mondego><newline46mondego>    if (yourChoice == 0) {<newline46mondego>        if (computerChoice == 1) {<newline46mondego>            JOptionPane.showMessageDialog(null,<doubleQuotes46>You chose:Rock  \n Computer chose:Paper \n Rock loses against Paper YOU LOSE! :-(<doubleQuotes46>);<newline46mondego>            lossGames++;<newline46mondego>        } else {<newline46mondego>            // computerChoice has to be 2.<newline46mondego>            JOptionPane.showMessageDialog(null,<doubleQuotes46>You chose:Rock \n Computer chose:Scissors \n Rock beats Scissors You WIN!<doubleQuotes46>);<newline46mondego>            wonGames++;<newline46mondego>        }<newline46mondego>    }<newline46mondego><newline46mondego>    if (yourChoice==1){<newline46mondego>        if (computerChoice == 0) {<newline46mondego>            JOptionPane.showMessageDialog(null,<doubleQuotes46>You chose:Paper \n Computer chose:Rock \n Paper beats Rock You WIN!<doubleQuotes46>);<newline46mondego>            wonGames++;<newline46mondego>        } else {<newline46mondego>            //computerChoice has to be 2.<newline46mondego>            JOptionPane.showMessageDialog(null,<doubleQuotes46>You chose:Paper \n Computer chose:Scissors \n Paper loses against Scissors YOU LOSE! :-(<doubleQuotes46>);<newline46mondego>            lossGames++;<newline46mondego>        }<newline46mondego>    }<newline46mondego><newline46mondego>    if (yourChoice==2){<newline46mondego>        if (computerChoice == 0) {<newline46mondego>            JOptionPane.showMessageDialog(null,<doubleQuotes46>You chose:Scissors \n Computer chose:rock \n Scissors lose against Rock YOU LOSE! :-(<doubleQuotes46>);<newline46mondego>            lossGames++;<newline46mondego>        } else {<newline46mondego>            //computerChoice has to be 1.<newline46mondego>            JOptionPane.showMessageDialog(null,<doubleQuotes46>You chose:Sissors \n Computer chose:Rock \n Scissors beats Paper You WIN!<doubleQuotes46>);<newline46mondego>            wonGames++;<newline46mondego>        }<newline46mondego>    }<newline46mondego>}<newline46mondego><newline46mondego>public static int ConvertStringtoNum(String userChoice){<newline46mondego><newline46mondego>    if (userChoice.equals(<doubleQuotes46>rock<doubleQuotes46>) || userChoice.equals(<doubleQuotes46>r<doubleQuotes46>) || userChoice.equals(<doubleQuotes46>0<doubleQuotes46>)) {<newline46mondego>        yourChoice = 0;<newline46mondego>    }<newline46mondego><newline46mondego>    if (userChoice.equals(<doubleQuotes46>paper<doubleQuotes46>) || userChoice.equals(<doubleQuotes46>p<doubleQuotes46>) || userChoice.equals(<doubleQuotes46>1<doubleQuotes46>)) {<newline46mondego>        yourChoice = 1;<newline46mondego>    }<newline46mondego><newline46mondego>    if (userChoice.equals(<doubleQuotes46>scissors<doubleQuotes46>) || userChoice.equals(<doubleQuotes46>s<doubleQuotes46>) || userChoice.equals(<doubleQuotes46>2<doubleQuotes46>)) {<newline46mondego>        yourChoice = 2;    <newline46mondego>    }<newline46mondego><newline46mondego>    return yourChoice;<newline46mondego>}<newline46mondego>"
"695splitHere46","20112085splitHere46","EditText2"
"696splitHere46","20112085splitHere46","$"
"697splitHere46","20112085splitHere46","<view class=<doubleQuotes46>first.words.firstwords.MainActivity$EditText2<doubleQuotes46><newline46mondego>...<newline46mondego>...<newline46mondego>"
"698splitHere46","20112085splitHere46","EditText2.java"
"699splitHere46","20112226splitHere46","new"
"700splitHere46","20112226splitHere46","List"
"701splitHere46","20112226splitHere46","class Foobar {<newline46mondego>  private List<Car> cars;<newline46mondego>  public Foobar() {<newline46mondego>    // create your cars, put them in the list<newline46mondego>  }<newline46mondego><newline46mondego>  public void paint(Graphics g) {<newline46mondego>    Graphics2D g2d = (Graphics2D) g;<newline46mondego>    for (Car car : cars) {<newline46mondego>      g2d.setColor(car.color);<newline46mondego>      g2d.fill(car.rect);<newline46mondego>    }<newline46mondego>  }<newline46mondego>}<newline46mondego><newline46mondego>class Car {<newline46mondego>  Rectangle rect;<newline46mondego>  Color color;<newline46mondego>  // constructors etc.<newline46mondego>}<newline46mondego>"
"702splitHere46","20112331splitHere46","//try this way<newline46mondego>1. you need <doubleQuotes46>ArrayList<LinkedHashMap<String,String>> data = new ArrayList<LinkedHashMap<String, String>>()<doubleQuotes46> for data<newline46mondego>2. your each LinkedHashMap have two key <doubleQuotes46>time<doubleQuotes46> and <doubleQuotes46>number'<newline46mondego>3. now one by one store each data item in LinkedHashMap and add each LinkedHashMap to  <doubleQuotes46>ArrayList<LinkedHashMap<String,String>> data<doubleQuotes46><newline46mondego>4 now access data whatever you want using <doubleQuotes46>ArrayList<LinkedHashMap<String,String>> data<doubleQuotes46> get index wise LinkedHashMap again get value LinkedHashMap  key.<newline46mondego>**Note** LinkedHashMap - is store sequential data and HashMap - is store unsequential <newline46mondego>"
"703splitHere46","20112967splitHere46","System.out.println((char)data[i]);<newline46mondego>"
"704splitHere46","20113124splitHere46","for"
"705splitHere46","20113124splitHere46","for (int i = 0; i < numbers.length; i++) {<newline46mondego>    System.out.print(<doubleQuotes46>Hour <doubleQuotes46> + i + <doubleQuotes46>:<doubleQuotes46>);<newline46mondego>    if (numbers[i] == min)<newline46mondego>        currentchar = MIN;<newline46mondego>    else if (numbers[i] == max)<newline46mondego>        currentchar = MAX;<newline46mondego>    else<newline46mondego>        currentchar = MIDDLE;<newline46mondego>    printTimes(currentchar, numbers[i]);<newline46mondego>    System.out.println(<doubleQuotes46><doubleQuotes46>);<newline46mondego>}<newline46mondego>"
"706splitHere46","20113148splitHere46","Parser.xmlParser()"
"707splitHere46","20113148splitHere46","Document doc = Jsoup.parse(new File(<doubleQuotes46>c:/movies.xml<doubleQuotes46>), <doubleQuotes46><doubleQuotes46>, Parser.xmlParser());<newline46mondego>Elements movies = doc.getElementsByTag(<doubleQuotes46>movies<doubleQuotes46>);<newline46mondego>System.out.println(movies.html());<newline46mondego>"
"708splitHere46","20113148splitHere46","<movie> <newline46mondego> <id><newline46mondego>  0<newline46mondego> </id><newline46mondego> <name><newline46mondego>  Aag - 1948<newline46mondego> </name><newline46mondego> <link><newline46mondego>  http://www.songspk.pk/indian/aag_1948.html<newline46mondego> </link> <newline46mondego></movie><newline46mondego><movie> <newline46mondego> <id><newline46mondego>  1<newline46mondego> </id> <newline46mondego> <name></name> <newline46mondego> <link><newline46mondego>  #<newline46mondego> </link> <newline46mondego></movie> <newline46mondego><movie> <newline46mondego> <id><newline46mondego>  2<newline46mondego> </id> <newline46mondego> <name><newline46mondego>  Aa Ab Laut Chalain<newline46mondego> </name> <newline46mondego> <link><newline46mondego>  http://www.songspk.pk/aa_ab_laut_chalein.html<newline46mondego> </link> <newline46mondego></movie> <newline46mondego><movie> <newline46mondego> <id><newline46mondego>  3<newline46mondego> </id> <newline46mondego> <name><newline46mondego>  Aag - RGV Ki Aag<newline46mondego> </name> <newline46mondego> <link><newline46mondego>  http://www.songspk.pk/aag.html<newline46mondego> </link> <newline46mondego></movie><newline46mondego>"
"709splitHere46","20113148splitHere46","<link>"
"710splitHere46","20113148splitHere46","Elements links = doc.getElementsByTag(<doubleQuotes46>link<doubleQuotes46>);<newline46mondego>"
"711splitHere46","20113224splitHere46","# Root logger option<newline46mondego>log4j.rootLogger=INFO, file, stdout<newline46mondego><newline46mondego># Direct log messages to a log file<newline46mondego>log4j.appender.file=org.apache.log4j.RollingFileAppender<newline46mondego>log4j.appender.file.File=C:\\springtest.log<newline46mondego>log4j.appender.file.MaxFileSize=1MB<newline46mondego>log4j.appender.file.MaxBackupIndex=1<newline46mondego>log4j.appender.file.layout=org.apache.log4j.PatternLayout<newline46mondego>log4j.appender.file.layout.ConversionPattern=%d{yyyy-MM-dd HH:mm:ss} %-5p %c{1}:%L - %m%n<newline46mondego><newline46mondego># Direct log messages to stdout<newline46mondego>log4j.appender.stdout=org.apache.log4j.ConsoleAppender<newline46mondego>log4j.appender.stdout.Target=System.out<newline46mondego>log4j.appender.stdout.layout=org.apache.log4j.PatternLayout<newline46mondego>log4j.appender.stdout.layout.ConversionPattern=%d{yyyy-MM-dd HH:mm:ss} %-5p %c{1}:%L - %m%n<newline46mondego>"
"712splitHere46","20113258splitHere46","public class MathValue<T extends Object> {<newline46mondego><newline46mondego>    public static MathValue<String> from(String s) {<newline46mondego>        MathValue<String> mv = new MathValue<String>();<newline46mondego><newline46mondego>        mv.setValue(s);<newline46mondego>        mv.setIsOperand(true);<newline46mondego>        return mv;<newline46mondego>    }<newline46mondego><newline46mondego>     public static MathValue<Integer> from(Integer s) {<newline46mondego>        MathValue<Integer> mv = new MathValue<Integer>();<newline46mondego><newline46mondego>        mv.setValue(i);<newline46mondego>        mv.setIsOperand(false);<newline46mondego>        return mv;<newline46mondego>    }<newline46mondego><newline46mondego>    // Rest of your class below<newline46mondego>}<newline46mondego>"
"713splitHere46","20113370splitHere46","accountChoice"
"714splitHere46","20113370splitHere46","accountActivity"
"715splitHere46","20113370splitHere46","{"
"716splitHere46","20113370splitHere46","}"
"717splitHere46","20113370splitHere46","do { // do below first before checking the while condition<newline46mondego>    if(accountChoice.equalsIgnoreCase(<doubleQuotes46>regular<doubleQuotes46>)) <newline46mondego>    {<newline46mondego>        // do your work.<newline46mondego>    } else if (accountChoice.equalsIgnoreCase(<doubleQuotes46>savings<doubleQuotes46>)) <newline46mondego>    {<newline46mondego>        // do the rest<newline46mondego>    }<newline46mondego>} while (!accountChoice.equalsIgnoreCase(<doubleQuotes46>Q<doubleQuotes46>));<newline46mondego>"
"718splitHere46","20113370splitHere46","public class Crawford_Driver<newline46mondego>{<newline46mondego><newline46mondego>    public static void main(String[] args)<newline46mondego>    {<newline46mondego>        Scanner keyboard = new Scanner(System.in);<newline46mondego>        double input1;<newline46mondego>        String accountChoice;<newline46mondego>        String accountActivity;<newline46mondego>        RegularAccount regAcct = new RegularAccount(0, .5);<newline46mondego>        SavingsAccount savAcct = new SavingsAccount(0, .5);<newline46mondego><newline46mondego><newline46mondego>        do {<newline46mondego>            System.out.println(<doubleQuotes46>What account would you like to access(regular or savings)?<doubleQuotes46> );<newline46mondego>            accountChoice = keyboard.nextLine();<newline46mondego><newline46mondego>            System.out.println(<doubleQuotes46>What action do you wish to perform(deposit, withdraw or monthly process)? <doubleQuotes46>);<newline46mondego>            accountActivity = keyboard.nextLine();<newline46mondego><newline46mondego><newline46mondego>            if(accountChoice.equalsIgnoreCase(<doubleQuotes46>regular<doubleQuotes46>)) { // LINE moved and BRACKET MISSING<newline46mondego><newline46mondego>                if (accountActivity.equalsIgnoreCase(<doubleQuotes46>deposit<doubleQuotes46>))<newline46mondego>                {<newline46mondego>                    System.out.println(<doubleQuotes46>How much would you like to deposit?<doubleQuotes46>);<newline46mondego>                    input1= keyboard.nextDouble();<newline46mondego>                    regAcct.deposit(input1);<newline46mondego>                    System.out.println(<doubleQuotes46>Your balance is <doubleQuotes46> + regAcct.getBalance() );<newline46mondego>                }<newline46mondego>                else if (accountActivity.equalsIgnoreCase(<doubleQuotes46>withdraw<doubleQuotes46>))<newline46mondego>                {<newline46mondego>                    System.out.println(<doubleQuotes46>How much would you like to withdraw?<doubleQuotes46>);<newline46mondego>                    input1= keyboard.nextDouble();<newline46mondego>                    regAcct.withdraw(input1);<newline46mondego>                    System.out.println(<doubleQuotes46>Your balance is <doubleQuotes46>+ regAcct.getBalance());<newline46mondego>                }<newline46mondego>                else if (accountActivity.equalsIgnoreCase(<doubleQuotes46>monthly process<doubleQuotes46>))<newline46mondego>                {<newline46mondego>                    regAcct.monthlyProcess();<newline46mondego>                }<newline46mondego>            } <newline46mondego>            else if (accountChoice.equalsIgnoreCase(<doubleQuotes46>savings<doubleQuotes46>)) <newline46mondego>            { // line changed &  BRACKET MISSING<newline46mondego><newline46mondego>                if (accountActivity.equalsIgnoreCase(<doubleQuotes46>deposit<doubleQuotes46>))<newline46mondego>                {<newline46mondego>                    System.out.println(<doubleQuotes46>How much would you like to deposit?<doubleQuotes46>);<newline46mondego>                    input1= keyboard.nextDouble();<newline46mondego>                    savAcct.deposit(input1);<newline46mondego>                    System.out.println(<doubleQuotes46>Your balance is <doubleQuotes46> + savAcct.getBalance() );<newline46mondego>                }<newline46mondego>                else if (accountActivity.equalsIgnoreCase(<doubleQuotes46>withdraw<doubleQuotes46>)) <newline46mondego>                { // bracket missing<newline46mondego><newline46mondego>                    System.out.println(<doubleQuotes46>How much would you like to withdraw?<doubleQuotes46>);<newline46mondego>                    input1= keyboard.nextDouble();<newline46mondego>                    savAcct.withdraw(input1);<newline46mondego>                    System.out.println(<doubleQuotes46>Your balance is <doubleQuotes46>+ savAcct.getBalance());<newline46mondego>               }<newline46mondego>           }<newline46mondego>       } while (!accountChoice.equalsIgnoreCase(<doubleQuotes46>Q<doubleQuotes46>));<newline46mondego>   }<newline46mondego>}<newline46mondego>"
"719splitHere46","20113386splitHere46","@FXML<newline46mondego>private ProgressBar bar;<newline46mondego>int max = 1000000;<newline46mondego>int i=0;<newline46mondego>"
"720splitHere46","20113386splitHere46","btn.setOnAction(new EventHandler<ActionEvent>() {<newline46mondego>        @Override<newline46mondego>        public void handle(ActionEvent t) <newline46mondego>        {<newline46mondego>           loadAppConfigurationFile();<newline46mondego>        }<newline46mondego>    });<newline46mondego>"
"721splitHere46","20113386splitHere46","private void loadAppConfigurationFile() {<newline46mondego>    Task task = new Task<Void>() {<newline46mondego>@Override public Void call() throws InterruptedException {<newline46mondego><newline46mondego>    for ( i=1; i<=max; i=i+10) {<newline46mondego>        if (isCancelled()) {<newline46mondego>           break;<newline46mondego>        }<newline46mondego>       // System.out.println(<doubleQuotes46>value of time - <doubleQuotes46>+now.getMinutes());<newline46mondego>        //if(i==1)<newline46mondego>        //{<newline46mondego>          //    Thread.sleep(pk);<newline46mondego>        //}<newline46mondego><newline46mondego>                    updateProgress(i, max);<newline46mondego><newline46mondego><newline46mondego>        //System.out.println(<doubleQuotes46>1<doubleQuotes46>);<newline46mondego>                    DecimalFormat df = new DecimalFormat(<doubleQuotes46>#.00<doubleQuotes46>); <newline46mondego>        System.out.println(<doubleQuotes46>progress - <doubleQuotes46>+df.format(bar.getProgress()));<newline46mondego>        Double abc = Double.parseDouble(df.format(bar.getProgress()));<newline46mondego><newline46mondego>       if(abc==1.00)<newline46mondego>       {<newline46mondego>           System.out.println(<doubleQuotes46>at here<doubleQuotes46>);<newline46mondego>            Parent root;<newline46mondego>                try <newline46mondego>                {                    <newline46mondego>        URL url = getClass().getResource(<doubleQuotes46>Check.fxml<doubleQuotes46>);<newline46mondego>        FXMLLoader fxmlLoader = new FXMLLoader();<newline46mondego>        fxmlLoader.setLocation(url);<newline46mondego>        fxmlLoader.setBuilderFactory(new JavaFXBuilderFactory());<newline46mondego>        root = (Parent)fxmlLoader.load(url.openStream());            <newline46mondego>        Stage stage = new Stage();<newline46mondego>        //sstage.initStyle(StageStyle.UNDECORATED);<newline46mondego>       // stage.setFullScreen(true);<newline46mondego>        stage.setTitle(<doubleQuotes46>Welcome User<doubleQuotes46>);<newline46mondego>        stage.setScene(new Scene(root, 631, 437));<newline46mondego><newline46mondego>        stage.show();<newline46mondego>                }<newline46mondego>                catch(IOException ea)<newline46mondego>                {<newline46mondego>                    System.out.println(ea.toString());<newline46mondego>                    ea.printStackTrace();<newline46mondego>                }<newline46mondego>       }<newline46mondego>    }<newline46mondego><newline46mondego><newline46mondego>    return null;<newline46mondego>}<newline46mondego>};<newline46mondego><newline46mondego>bar.progressProperty().bind(task.progressProperty());<newline46mondego>new Thread(task).start();<newline46mondego>}<newline46mondego>"
"722splitHere46","20113458splitHere46","onProgressUpdate()"
"723splitHere46","20113458splitHere46","@Override<newline46mondego>protected void onProgressUpdate(Integer... progress) {<newline46mondego>    super.onProgressUpdate(progress);<newline46mondego><newline46mondego>    this.mProgressDialog2.setProgress(progress[0] * 100/progress[1]);<newline46mondego>}<newline46mondego>"
"724splitHere46","20113458splitHere46","this.mProgressDialog2.setProgress(p*100/size);<newline46mondego>"
"725splitHere46","20113458splitHere46","publishProgress(new int[]{p,size})<newline46mondego>"
"726splitHere46","20113504splitHere46","indexOf"
"727splitHere46","20113504splitHere46","loop"
"728splitHere46","20113504splitHere46","String"
"729splitHere46","20113504splitHere46",","
"730splitHere46","20113504splitHere46","split"
"731splitHere46","20113504splitHere46","String str = <doubleQuotes46>one, two, three, four<doubleQuotes46>;<newline46mondego>    int lastIndex = 0;<newline46mondego>    int firstIndex=0;<newline46mondego>    while (lastIndex != -1) {<newline46mondego><newline46mondego>        lastIndex = str.indexOf(',', lastIndex);<newline46mondego><newline46mondego>        if (lastIndex != -1) {<newline46mondego>            System.out.print(str.substring(firstIndex, lastIndex));<newline46mondego><newline46mondego>            if(lastIndex==str.lastIndexOf(',')){<newline46mondego>            System.out.print(str.substring(lastIndex));<newline46mondego>            }<newline46mondego>            lastIndex += 1;<newline46mondego>        }<newline46mondego><newline46mondego>        firstIndex=lastIndex;<newline46mondego>    }<newline46mondego>    System.out.println();<newline46mondego>"
"732splitHere46","20113584splitHere46","PushService.setDefaultPushCallback(this, SampleClass.class);<newline46mondego>"
"733splitHere46","20113584splitHere46","<receiver android:name=<doubleQuotes46>com.parse.ParseBroadcastReceiver<doubleQuotes46> ><newline46mondego>        <intent-filter><newline46mondego>            <action android:name=<doubleQuotes46>android.intent.action.BOOT_COMPLETED<doubleQuotes46> /><newline46mondego>            <action android:name=<doubleQuotes46>android.intent.action.USER_PRESENT<doubleQuotes46> /><newline46mondego>        </intent-filter><newline46mondego>    </receiver><newline46mondego>"
"734splitHere46","20113584splitHere46","{ <doubleQuotes46>alert<doubleQuotes46>: <doubleQuotes46>Notification<doubleQuotes46>, <doubleQuotes46>title<doubleQuotes46>: <doubleQuotes46>Push<doubleQuotes46>, <doubleQuotes46>objectId<doubleQuotes46>: <doubleQuotes46>objectId<doubleQuotes46>, <newline46mondego> <doubleQuotes46>objectType<doubleQuotes46>: <doubleQuotes46>type<doubleQuotes46>, <doubleQuotes46>action<doubleQuotes46>: <doubleQuotes46>Your Action Name<doubleQuotes46> }<newline46mondego>"
"735splitHere46","20113584splitHere46","<receiver<newline46mondego>    android:name=<doubleQuotes46>packagename.CustomReceiver<doubleQuotes46><newline46mondego>    android:exported=<doubleQuotes46>false<doubleQuotes46> ><newline46mondego>    <intent-filter><newline46mondego>        <action android:name=<doubleQuotes46>custom-action-name<doubleQuotes46> /><newline46mondego>    </intent-filter><newline46mondego></receiver><newline46mondego>"
"736splitHere46","20113584splitHere46","public class CustomReceiver extends BroadcastReceiver <newline46mondego><newline46mondego>{<newline46mondego> **public static final String ACTION = <doubleQuotes46>custom-action-name<doubleQuotes46>;**<newline46mondego><newline46mondego><newline46mondego>@Override<newline46mondego>public void onReceive(Context context, Intent intent) {<newline46mondego><newline46mondego>{<newline46mondego><newline46mondego>}<newline46mondego>"
"737splitHere46","20113804splitHere46","j"
"738splitHere46","20113804splitHere46","i"
"739splitHere46","20113804splitHere46","i"
"740splitHere46","20113804splitHere46","j - 1"
"741splitHere46","20113804splitHere46","cards.remove(i);<newline46mondego>cards.remove(j-1);<newline46mondego>"
"742splitHere46","20114039splitHere46","Class pieceKlass = Class.forName(spawnPiece)<newline46mondego>"
"743splitHere46","20114039splitHere46","Constructor ctor = pieceKlass.getDeclaredConstructor(String.class);<newline46mondego>ctor.setAccessible(true);<newline46mondego>ChessPiece piece = (ChessPiece)ctor.newInstance(pieceRepresentation);<newline46mondego>"
"744splitHere46","20114039splitHere46","class ChessPieceFactory {<newline46mondego>    public ChessPiece create(String pieceName, String pieceRepresentation) {<newline46mondego>      ChessPiece piece;<newline46mondego>      try {<newline46mondego>        Class pieceKlass = Class.forName(pieceName)<newline46mondego>        Constructor ctor = pieceKlass.getDeclaredConstructor(String.class);<newline46mondego>        ctor.setAccessible(true);<newline46mondego>        piece = (ChessPiece)ctor.newInstance(pieceRepresentation);<newline46mondego>       // production code should handle these exceptions more gracefully<newline46mondego>     } catch (ClassNotFoundException x) {<newline46mondego>        x.printStackTrace();<newline46mondego>     } catch (InstantiationException x) {<newline46mondego>        x.printStackTrace();<newline46mondego>     } catch (IllegalAccessException x) {<newline46mondego>        x.printStackTrace();<newline46mondego>     } catch (InvocationTargetException x) {<newline46mondego>        x.printStackTrace();<newline46mondego>     } catch (NoSuchMethodException x) {<newline46mondego>        x.printStackTrace();<newline46mondego>     }<newline46mondego><newline46mondego>     return piece;<newline46mondego>  }<newline46mondego>"
"745splitHere46","20114088splitHere46","try {<newline46mondego>    ip = InetAddress.getLocalHost();<newline46mondego> }catch (UnknownHostException e) {<newline46mondego>      e.printStackTrace();<newline46mondego> }<newline46mondego>"
"746splitHere46","20114088splitHere46","Enumeration<NetworkInterface> nis = null;<newline46mondego>                try {<newline46mondego>                    nis = NetworkInterface.getNetworkInterfaces();<newline46mondego>                } catch (SocketException e1) {<newline46mondego>                    // TODO Auto-generated catch block<newline46mondego>                    e1.printStackTrace();<newline46mondego>                }<newline46mondego>                NetworkInterface ni;<newline46mondego>                while (nis.hasMoreElements()) {<newline46mondego>                    ni = nis.nextElement();<newline46mondego>                    try {<newline46mondego>                        if (!ni.isLoopback() && ni.isUp()) {<newline46mondego>                            for (InterfaceAddress ia : ni.getInterfaceAddresses()) {<newline46mondego>                                //filter for ipv4/ipv6<newline46mondego>                                if (ia.getAddress().getAddress().length == 4) {<newline46mondego>                                    //4 for ipv4, 16 for ipv6<newline46mondego>                                    System.out.println(ia.getAddress());<newline46mondego>                                }<newline46mondego>                            }<newline46mondego>                        }<newline46mondego>                    } catch (SocketException e) {<newline46mondego>                        // TODO Auto-generated catch block<newline46mondego>                        e.printStackTrace();<newline46mondego>                    }<newline46mondego>                }<newline46mondego>"
"747splitHere46","20114198splitHere46","GridBagLayout"
"748splitHere46","20114198splitHere46","import java.awt.*;<newline46mondego>import javax.swing.*;<newline46mondego>import javax.swing.border.*;<newline46mondego><newline46mondego>public class BorderPanels extends JFrame {<newline46mondego><newline46mondego>    private static final long serialVersionUID = 1L;<newline46mondego><newline46mondego>    public BorderPanels() {<newline46mondego>        setLayout(new GridBagLayout());// set LayoutManager<newline46mondego>        GridBagConstraints gbc = new GridBagConstraints();<newline46mondego>        JPanel panel1 = new JPanel();<newline46mondego>        Border eBorder = BorderFactory.createEtchedBorder();<newline46mondego><newline46mondego>        panel1.setBorder(BorderFactory.createTitledBorder(eBorder, <doubleQuotes46>80pct<doubleQuotes46>));<newline46mondego>        gbc.gridx = gbc.gridy = 0;<newline46mondego>        gbc.gridwidth = gbc.gridheight = 1;<newline46mondego>        gbc.fill = GridBagConstraints.BOTH;<newline46mondego>        gbc.anchor = GridBagConstraints.NORTHWEST;<newline46mondego>        gbc.weightx = gbc.weighty = 70;<newline46mondego>        add(panel1, gbc); // add component to the ContentPane<newline46mondego><newline46mondego>        JPanel panel2 = new JPanel();<newline46mondego>        panel2.setBorder(BorderFactory.createTitledBorder(eBorder, <doubleQuotes46>20pct<doubleQuotes46>));<newline46mondego>        gbc.gridy = 1;<newline46mondego>        gbc.weightx = gbc.weighty = 20;<newline46mondego>        gbc.insets = new Insets(2, 2, 2, 2);<newline46mondego>        add(panel2, gbc); // add component to the ContentPane<newline46mondego><newline46mondego>        JPanel panel3 = new JPanel();<newline46mondego>        panel3.setBorder(BorderFactory.createTitledBorder(eBorder, <doubleQuotes46>20pct<doubleQuotes46>));<newline46mondego>        gbc.gridx = 1;<newline46mondego>        gbc.gridy = 0;<newline46mondego>        gbc.gridwidth = 1;<newline46mondego>        gbc.gridheight = 2;<newline46mondego>        gbc.weightx = /*gbc.weighty = */ 20;<newline46mondego>        gbc.insets = new Insets(2, 2, 2, 2);<newline46mondego>        add(panel3, gbc); // add component to the ContentPane<newline46mondego><newline46mondego>        setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE); // important<newline46mondego>        pack();<newline46mondego>        setVisible(true); // important<newline46mondego>    }<newline46mondego><newline46mondego>    public static void main(String[] args) {<newline46mondego>        javax.swing.SwingUtilities.invokeLater(new Runnable() { // important<newline46mondego><newline46mondego>            @Override<newline46mondego>            public void run() {<newline46mondego>                BorderPanels borderPanels = new BorderPanels();<newline46mondego>            }<newline46mondego>        });<newline46mondego>    }<newline46mondego>}<newline46mondego>"
"749splitHere46","20114198splitHere46","MigLayout"
"750splitHere46","20114241splitHere46","sun.tools.jmap.JMap"
"751splitHere46","20114241splitHere46","sun.tools.jmap.JMap"
"752splitHere46","20114241splitHere46","<JAVA_HOME>/lib/tools.jar"
"753splitHere46","20114241splitHere46","<JAVA_HOME>/bin"
"754splitHere46","20114241splitHere46","sun.tools.jmap.JMap"
"755splitHere46","20114241splitHere46","jmap.exe"
"756splitHere46","20114241splitHere46","<JAVA_HOME>/lib/tools.jar"
"757splitHere46","20114328splitHere46","JPanel thePanel = new JPanel(new FlowLayout(FlowLayout.LEFT));<newline46mondego>JButton theButton = new JButton(<doubleQuotes46>Britness<doubleQuotes46>);<newline46mondego><newline46mondego>thePanel.add(theButton);<newline46mondego>"
"758splitHere46","20114447splitHere46","PKG2"
"759splitHere46","20114447splitHere46","additivity"
"760splitHere46","20114447splitHere46","log4j.appender.PKG2.additivity=false<newline46mondego>"
"761splitHere46","20114556splitHere46","Method Area"
"762splitHere46","20114556splitHere46","PermGen"
"763splitHere46","20114556splitHere46","PermSize"
"764splitHere46","20114556splitHere46","PermGen"
"765splitHere46","20114556splitHere46","Method Area"
"766splitHere46","20114556splitHere46","PermGen"
"767splitHere46","20114556splitHere46","PermGen"
"768splitHere46","20114556splitHere46","PermGen"
"769splitHere46","20114556splitHere46","Method Area"
"770splitHere46","20114556splitHere46","OutOfMemoryError"
"771splitHere46","20114650splitHere46","import java.awt.FlowLayout;<newline46mondego><newline46mondego>import javax.swing.JButton;<newline46mondego>import javax.swing.JDialog;<newline46mondego>import javax.swing.JFrame;<newline46mondego>import javax.swing.JLabel;<newline46mondego><newline46mondego>public class BDialog extends JDialog {<newline46mondego><newline46mondego>    private JButton okBtn = new JButton(<doubleQuotes46>OK<doubleQuotes46>);<newline46mondego>    private JButton cancelBtn = new JButton(<doubleQuotes46>Cancel<doubleQuotes46>);<newline46mondego>    private JLabel messageLbl = new JLabel(<doubleQuotes46>This is a message<doubleQuotes46>);<newline46mondego><newline46mondego>    public BDialog() {<newline46mondego>        super(new JFrame(), true);<newline46mondego>        setDefaultCloseOperation(DO_NOTHING_ON_CLOSE);<newline46mondego>        setUndecorated(true);<newline46mondego>        setLayout(new FlowLayout(FlowLayout.CENTER));<newline46mondego>        add(messageLbl);<newline46mondego>        add(okBtn);<newline46mondego>        add(cancelBtn);<newline46mondego>        pack();<newline46mondego>        setLocationRelativeTo(null);<newline46mondego>        setVisible(true);<newline46mondego>    }<newline46mondego><newline46mondego>    public static void main(String[] args) {<newline46mondego>        new BDialog();<newline46mondego>    }<newline46mondego><newline46mondego>}<newline46mondego>"
"772splitHere46","20114691splitHere46","public Number(int n) {<newline46mondego>        number = n;<newline46mondego>        head = new Node(0);<newline46mondego>        Node prev = head;<newline46mondego>        for (int i = 1; i <=number; i++) {<newline46mondego>            Node node = new Node(i);<newline46mondego>            prev.next=node; // head I will have 1, 2, 3... n<newline46mondego>            prev=node;<newline46mondego>        }<newline46mondego>        tail=prev;<newline46mondego>    }<newline46mondego>"
"773splitHere46","20114691splitHere46","public String toString() {<newline46mondego>        String strVal = <doubleQuotes46><doubleQuotes46>;<newline46mondego>        for (Node current = head; current != null; current = current.next) {<newline46mondego>            strVal = strVal +<doubleQuotes46> <doubleQuotes46>+ current.num;<newline46mondego>        }<newline46mondego>        return strVal;<newline46mondego>    }<newline46mondego>"
"774splitHere46","20114691splitHere46","tail=head"
"775splitHere46","20114818splitHere46","for (Map.Entry<String, String> entry : yourMap.entrySet()) {<newline46mondego>    String key = entry.getKey();<newline46mondego>    String value = entry.getValue();<newline46mondego><newline46mondego>    System.out.println (<doubleQuotes46>Key: <doubleQuotes46> + key + <doubleQuotes46> Value: <doubleQuotes46> + value);<newline46mondego>}<newline46mondego>"
"776splitHere46","20114843splitHere46","getFromLocationName(String locationName, int maxResults)<newline46mondego>"
"777splitHere46","20114843splitHere46","distanceTo(Location dest)<newline46mondego>Returns the approximate distance in meters between this location and the given location.<newline46mondego>"
"778splitHere46","20114857splitHere46","public interface Category {<newline46mondego>    String getName();<newline46mondego>    Category getParent();<newline46mondego>    List<Category> getSiblings();<newline46mondego>    List<Category> getChildren();<newline46mondego>    List<Category> getDescendants();<newline46mondego>    void addChild(Category category);<newline46mondego>    void addChildren(List<Category> categories);<newline46mondego>}<newline46mondego>"
"779splitHere46","20114864splitHere46","static {<newline46mondego>    ConsoleHandler handler = new ConsoleHandler();<newline46mondego>    handler.setLevel(Level.ALL);<newline46mondego>    Logger log = LogManager.getLogManager().getLogger(<doubleQuotes46><doubleQuotes46>);<newline46mondego>    log.addHandler(handler);<newline46mondego>    log.setLevel(Level.ALL);<newline46mondego>}<newline46mondego>"
"780splitHere46","20115069splitHere46","jdbc:h2:/directory/test"
"781splitHere46","20115069splitHere46","/directory/test.h2.db"
"782splitHere46","20115069splitHere46","String fileName = file.getAbsolutePath();<newline46mondego>if (!fileName.endsWith(<doubleQuotes46>.h2.db<doubleQuotes46>)) {<newline46mondego>    // not a H2 database<newline46mondego>    return;<newline46mondego>}<newline46mondego>String databaseName = fileName.substring(0, fileName.length() - <doubleQuotes46>.h2.db<doubleQuotes46>.length());<newline46mondego>String url = <doubleQuotes46>jdbc:h2:<doubleQuotes46> + databaseName;<newline46mondego>"
"783splitHere46","20115237splitHere46","^(\\d),[A-Za-z]+(,[A-Za-z]+=[A-Za-z0-9]+)+$<newline46mondego>"
"784splitHere46","20115237splitHere46","^(\\d)+,[A-Za-z]+(,[A-Za-z]+=[A-Za-z0-9{};]+)+$<newline46mondego>"
"785splitHere46","20115254splitHere46","TimerTask"
"786splitHere46","20115254splitHere46","Toast"
"787splitHere46","20115311splitHere46","HEAD -> a -> b -> c -> null<newline46mondego>"
"788splitHere46","20115311splitHere46","HEAD -> c -> b -> a -> null<newline46mondego>"
"789splitHere46","20115311splitHere46","public Node<T> reverse(Node<T> current)<newline46mondego>{<newline46mondego>    if (current == head) {<newline46mondego>        return reverse(current.next);<newline46mondego>    }<newline46mondego><newline46mondego>    // rest of your original code.<newline46mondego>}<newline46mondego>"
"790splitHere46","20115311splitHere46","public void reverse() {<newline46mondego>    this.head = reverseInternal(head);<newline46mondego>}<newline46mondego><newline46mondego>private Node<T> reverseInternal(Node<T> node) {<newline46mondego>    // your original reverse logic<newline46mondego>}<newline46mondego>"
"791splitHere46","20115311splitHere46","reverseInternal(head.next)"
"792splitHere46","20115311splitHere46","reverse()"
"793splitHere46","20115453splitHere46","<uses-permission android:name=<doubleQuotes46>android.permission.WRITE_EXTERNAL_STOREAGE<doubleQuotes46>/><newline46mondego>"
"794splitHere46","20115453splitHere46","<uses-permission android:name=<doubleQuotes46>android.permission.WRITE_EXTERNAL_STORAGE<doubleQuotes46>/><newline46mondego>"
"795splitHere46","20115453splitHere46","boolean mExternalStorageAvailable = false;<newline46mondego>boolean mExternalStorageWriteable = false;<newline46mondego>String state = Environment.getExternalStorageState();<newline46mondego><newline46mondego>if (Environment.MEDIA_MOUNTED.equals(state)) {<newline46mondego>    // We can read and write the media<newline46mondego>    mExternalStorageAvailable = mExternalStorageWriteable = true;<newline46mondego>} else if (Environment.MEDIA_MOUNTED_READ_ONLY.equals(state)) {<newline46mondego>    // We can only read the media<newline46mondego>    mExternalStorageAvailable = true;<newline46mondego>    mExternalStorageWriteable = false;<newline46mondego>} else {<newline46mondego>    // Something else is wrong. It may be one of many other states, but all we need<newline46mondego>    //  to know is we can neither read nor write<newline46mondego>    mExternalStorageAvailable = mExternalStorageWriteable = false;<newline46mondego>}<newline46mondego>"
"796splitHere46","20115621splitHere46","@SessionAttributes"
"797splitHere46","20115621splitHere46","@Controller<newline46mondego>public class LoginController {<newline46mondego>...<newline46mondego>@RequestMapping(value = <doubleQuotes46>/login<doubleQuotes46>, method = RequestMethod.POST)<newline46mondego>public ModelAndView login(@RequestParam(value = <doubleQuotes46>tbusername<doubleQuotes46>) String username,<newline46mondego>        @RequestParam(value = <doubleQuotes46>tbpassword<doubleQuotes46>) String password,<newline46mondego>        @ModelAttribute(value = <doubleQuotes46>account<doubleQuotes46>) Account account,<newline46mondego>        HttpSession session) {<newline46mondego>    ModelAndView modelAndView = new ModelAndView();<newline46mondego>    account = accountSerivce.authenticate(username, password);<newline46mondego>    //modelAndView.addObject(<doubleQuotes46>account<doubleQuotes46>, account);<newline46mondego>    session.setAttribute(<doubleQuotes46>account<doubleQuotes46>, account);<newline46mondego>    return new ModelAndView(<doubleQuotes46>index<doubleQuotes46>);<newline46mondego>}<newline46mondego>}<newline46mondego>"
"798splitHere46","20115810splitHere46","exec-maven-plugin"
"799splitHere46","20115810splitHere46","<plugin><newline46mondego>    <groupId>org.codehaus.mojo</groupId><newline46mondego>    <artifactId>exec-maven-plugin</artifactId><newline46mondego>    <version>1.2.1</version><newline46mondego>    <executions><newline46mondego>        <execution><newline46mondego>            <phase>deploy</phase><newline46mondego>            <goals><newline46mondego>                <goal>exec</goal><newline46mondego>            </goals><newline46mondego>        </execution><newline46mondego>    </executions><newline46mondego>    <configuration><newline46mondego>        <executable>bash</executable><newline46mondego>        <arguments><newline46mondego>            <argument>${basedir}/scripts/copy-your-files.sh</argument><newline46mondego>        </arguments><newline46mondego>    </configuration><newline46mondego></plugin><newline46mondego>"
"800splitHere46","20115842splitHere46","Application"
"801splitHere46","20115842splitHere46","Thread.setDefaultUncaughtExceptionHandler(<newline46mondego>                new DefaultExceptionHandler(this));<newline46mondego>"
"802splitHere46","20115925splitHere46","class MyConstants<newline46mondego>  CONST_1 = <doubleQuotes46>Constant1<doubleQuotes46><newline46mondego>  CONST_2 = <doubleQuotes46>Constant2<doubleQuotes46><newline46mondego>  # ...<newline46mondego>end<newline46mondego>"
"803splitHere46","20115925splitHere46","module MyConstants<newline46mondego>  CONST_1 = <doubleQuotes46>Constant1<doubleQuotes46><newline46mondego>  CONST_2 = <doubleQuotes46>Constant2<doubleQuotes46><newline46mondego>end<newline46mondego>"
"804splitHere46","20115925splitHere46","MyConstants::CONST<newline46mondego>"
"805splitHere46","20115971splitHere46","private Trainer trainer;<newline46mondego>private Vector TraineeList;<newline46mondego>"
"806splitHere46","20116061splitHere46","org.eclipse.ui.internal.progress.ProgressManager"
"807splitHere46","20116061splitHere46","IProgressMonitor"
"808splitHere46","20116061splitHere46","IProgressService"
"809splitHere46","20116251splitHere46","List<Person> list = Collections.synchronizedList(new LinkedList<Person>())<newline46mondego>"
"810splitHere46","20116251splitHere46","LinkedList"
"811splitHere46","20116251splitHere46","List"
"812splitHere46","20116251splitHere46","addPerson(Person person)"
"813splitHere46","20116251splitHere46","public interface PersonManagerListener {<newline46mondego>    void onPersonAdded(Person newPerson);<newline46mondego>}<newline46mondego>"
"814splitHere46","20116251splitHere46","PersonManager"
"815splitHere46","20116251splitHere46","addListener(PersonManagerListener listener"
"816splitHere46","20116251splitHere46","onPersonAdded(Person newPerson)"
"817splitHere46","20116359splitHere46","2,147,483,647"
"818splitHere46","20116359splitHere46","2,147,483,647"
"819splitHere46","20116646splitHere46","public"
"820splitHere46","20116646splitHere46","final"
"821splitHere46","20116646splitHere46","this"
"822splitHere46","20116646splitHere46","final"
"823splitHere46","20116646splitHere46","private"
"824splitHere46","20116646splitHere46","safe initialization"
"825splitHere46","20116646splitHere46","public"
"826splitHere46","20116646splitHere46","constructor"
"827splitHere46","20116776splitHere46","TreeSet cities<newline46mondego>Exception in thread <doubleQuotes46>main<doubleQuotes46> java.lang.NullPointerException<newline46mondego>        at java.lang.String.compareTo(String.java:1167)<newline46mondego>        at java.lang.String.compareTo(String.java:92)<newline46mondego>        at java.util.TreeMap.put(TreeMap.java:545)<newline46mondego>        at java.util.TreeSet.add(TreeSet.java:238)<newline46mondego>"
"828splitHere46","20116776splitHere46","From the source code <newline46mondego>Hashset hases Hashmap to store the data and LinkedHashSet extends Hashset and hence uses same add method of Hashset But TreeSet uses NavigableMap to store the data<newline46mondego>"
"829splitHere46","20116790splitHere46","ConcurrentModificationException"
"830splitHere46","20116790splitHere46","list"
"831splitHere46","20116790splitHere46","Iterator<CartEntry> it = list.iterator();<newline46mondego>    while (it.hasNext()) {<newline46mondego>        if (it.next().getpId() == pId) {<newline46mondego>            it.remove();<newline46mondego>            break;<newline46mondego>        }<newline46mondego>    }<newline46mondego>"
"832splitHere46","20116803splitHere46","public static int[][] blockSplitter(int[] data) {<newline46mondego>    List<int[]> blocks = new ArrayList<int[]>();<newline46mondego>    for (int i = 0; i < data.length;) {<newline46mondego>      int blockSize = data[i];<newline46mondego>      int[] block = Arrays.copyOfRange(data, i + 1, i + blockSize + 1);<newline46mondego>      blocks.add(block);<newline46mondego>      i += (blockSize + 1);<newline46mondego>    }<newline46mondego>    return (int[][]) blocks.toArray(new int[blocks.size()][]);<newline46mondego>  }<newline46mondego>"
"833splitHere46","20116939splitHere46","PortletSession"
"834splitHere46","20116939splitHere46","@RequestMapping<newline46mondego>public String view(RenderRequest request, Model model){<newline46mondego>    PortletSession session = request.getPortletSession();<newline46mondego>    if (session.getAttribute(<doubleQuotes46>foo<doubleQuotes46>, <newline46mondego>            PortletSession.APPLICATION_SCOPE) != null) {<newline46mondego>        model.addAttribute(<doubleQuotes46>foo<doubleQuotes46>, session.getAttribute(<doubleQuotes46>foo<doubleQuotes46>, <newline46mondego>            PortletSession.APPLICATION_SCOPE).toString());<newline46mondego>    }<newline46mondego>    return <doubleQuotes46>somewhere/view<doubleQuotes46>;<newline46mondego>}<newline46mondego>"
"835splitHere46","20116939splitHere46","liferay-portlet.xml"
"836splitHere46","20116939splitHere46","<portlet><newline46mondego>    <!-- ..some previous settings and then --><newline46mondego>    <private-session-attributes>false</private-session-attributes><newline46mondego></portlet><newline46mondego>"
"837splitHere46","20116944splitHere46","Action"
"838splitHere46","20116944splitHere46","index"
"839splitHere46","20116944splitHere46","update()"
"840splitHere46","20116944splitHere46","JLabel"
"841splitHere46","20116944splitHere46","List<String>"
"842splitHere46","20116944splitHere46","JTextArea"
"843splitHere46","20116944splitHere46","List<Employee>"
"844splitHere46","20116944splitHere46","package gui;<newline46mondego><newline46mondego>import java.awt.BorderLayout;<newline46mondego>import java.awt.EventQueue;<newline46mondego>import java.awt.event.ActionEvent;<newline46mondego>import java.util.ArrayList;<newline46mondego>import java.util.Arrays;<newline46mondego>import java.util.List;<newline46mondego>import javax.swing.AbstractAction;<newline46mondego>import javax.swing.JButton;<newline46mondego>import javax.swing.JFrame;<newline46mondego>import javax.swing.JLabel;<newline46mondego><newline46mondego>/**<newline46mondego> * @see http://stackoverflow.com/a/20116944/230513<newline46mondego> */<newline46mondego>public class PrevNext {<newline46mondego><newline46mondego>    private final List<String> list = new ArrayList<>(<newline46mondego>        Arrays.asList(<doubleQuotes46>Alpher<doubleQuotes46>, <doubleQuotes46>Bethe<doubleQuotes46>, <doubleQuotes46>Gamow<doubleQuotes46>, <doubleQuotes46>Dirac<doubleQuotes46>, <doubleQuotes46>Einstein<doubleQuotes46>));<newline46mondego>    private int index = list.indexOf(<doubleQuotes46>Einstein<doubleQuotes46>);<newline46mondego>    private final JLabel label = new JLabel(list.get(index), JLabel.CENTER);<newline46mondego><newline46mondego>    private void display() {<newline46mondego>        JFrame f = new JFrame(<doubleQuotes46>PrevNext<doubleQuotes46>);<newline46mondego>        f.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);<newline46mondego>        f.add(new JButton(new AbstractAction(<doubleQuotes46><Prev<doubleQuotes46>) {<newline46mondego><newline46mondego>            @Override<newline46mondego>            public void actionPerformed(ActionEvent e) {<newline46mondego>                if (--index < 0) {<newline46mondego>                    index = list.size() - 1;<newline46mondego>                }<newline46mondego>                update();<newline46mondego>            }<newline46mondego>        }), BorderLayout.LINE_START);<newline46mondego>        f.add(label);<newline46mondego>        f.add(new JButton(new AbstractAction(<doubleQuotes46>Next><doubleQuotes46>) {<newline46mondego><newline46mondego>            @Override<newline46mondego>            public void actionPerformed(ActionEvent e) {<newline46mondego>                if (++index == list.size()) {<newline46mondego>                    index = 0;<newline46mondego>                }<newline46mondego>                update();<newline46mondego>            }<newline46mondego>        }), BorderLayout.LINE_END);<newline46mondego>        f.pack();<newline46mondego>        f.setLocationRelativeTo(null);<newline46mondego>        f.setVisible(true);<newline46mondego>    }<newline46mondego><newline46mondego>    private void update() {<newline46mondego>        label.setText(list.get(index));<newline46mondego>    }<newline46mondego><newline46mondego>    public static void main(String[] args) {<newline46mondego>        EventQueue.invokeLater(new Runnable() {<newline46mondego><newline46mondego>            @Override<newline46mondego>            public void run() {<newline46mondego>                new PrevNext().display();<newline46mondego>            }<newline46mondego>        });<newline46mondego>    }<newline46mondego>}<newline46mondego>"
"845splitHere46","20116974splitHere46","BigDecimal"
"846splitHere46","20116974splitHere46",".toString()"
"847splitHere46","20116974splitHere46","BigDecimal bd = new BigDecimal(<doubleQuotes46>10000000.00000<doubleQuotes46>);<newline46mondego>System.out.println(bd);<newline46mondego>"
"848splitHere46","20116974splitHere46","10000000.00000"
"849splitHere46","20116974splitHere46","Jaxb XmlAdapters"
"850splitHere46","20116974splitHere46","BigDecimmal"
"851splitHere46","20116974splitHere46","public class BigDecimalXmlAdapter extends XmlAdapter{<newline46mondego><newline46mondego>    @Override<newline46mondego>    public String marshal(BigDecimal bigDecimal) throws Exception {<newline46mondego>        if (bigDecimal != null){<newline46mondego>            return bigDecimal.toString();<newline46mondego>        }<newline46mondego>        else {<newline46mondego>            return null;<newline46mondego>        }<newline46mondego>    }<newline46mondego><newline46mondego>    @Override<newline46mondego>    public BigDecimal unmarshal(String s) throws Exception {<newline46mondego>        try {<newline46mondego>            return new BigDecimal(s);<newline46mondego>        } catch (NumberFormatException e) {<newline46mondego>            return null;<newline46mondego>        }<newline46mondego>    }<newline46mondego>}<newline46mondego>"
"852splitHere46","20117107splitHere46","entityManager.merge()"
"853splitHere46","20117107splitHere46","user"
"854splitHere46","20117107splitHere46","session"
"855splitHere46","20117107splitHere46","User"
"856splitHere46","20117114splitHere46","NullPointerException"
"857splitHere46","20117114splitHere46","f()"
"858splitHere46","20117114splitHere46","f()"
"859splitHere46","20117114splitHere46","@Override<newline46mondego>public void f() {<newline46mondego>    //Anything that access o.<newline46mondego>    o.hashCode(); //Throws NullPointerException as o has not been initialised yet<newline46mondego>    super.f();<newline46mondego>}<newline46mondego>"
"860splitHere46","20117139splitHere46","Optional"
"861splitHere46","20117139splitHere46","null"
"862splitHere46","20117216splitHere46","JSONArray"
"863splitHere46","20117216splitHere46","String message;<newline46mondego>JSONObject json = new JSONObject();<newline46mondego>json.put(<doubleQuotes46>name<doubleQuotes46>, <doubleQuotes46>student<doubleQuotes46>);<newline46mondego><newline46mondego>JSONArray array = new JSONArray();<newline46mondego>JSONObject item = new JSONObject();<newline46mondego>item.put(<doubleQuotes46>information<doubleQuotes46>, <doubleQuotes46>test<doubleQuotes46>);<newline46mondego>item.put(<doubleQuotes46>id<doubleQuotes46>, 3);<newline46mondego>item.put(<doubleQuotes46>name<doubleQuotes46>, <doubleQuotes46>course1<doubleQuotes46>);<newline46mondego>array.put(item);<newline46mondego><newline46mondego>json.put(<doubleQuotes46>course<doubleQuotes46>, array);<newline46mondego><newline46mondego>message = json.toString();<newline46mondego><newline46mondego>// message<newline46mondego>// {<doubleQuotes46>course<doubleQuotes46>:[{<doubleQuotes46>id<doubleQuotes46>:3,<doubleQuotes46>information<doubleQuotes46>:<doubleQuotes46>test<doubleQuotes46>,<doubleQuotes46>name<doubleQuotes46>:<doubleQuotes46>course1<doubleQuotes46>}],<doubleQuotes46>name<doubleQuotes46>:<doubleQuotes46>student<doubleQuotes46>}<newline46mondego>"
"864splitHere46","20117266splitHere46","ID"
"865splitHere46","20117266splitHere46","PARKINGSPACE_ID"
"866splitHere46","20117266splitHere46","PARKINGSPACE_ID"
"867splitHere46","20117266splitHere46","ID"
"868splitHere46","20117437splitHere46","package test;<newline46mondego><newline46mondego>public class Test<newline46mondego>{<newline46mondego>    static private int i=30;<newline46mondego>    static private int  j=20; <newline46mondego>    static private int l=5;<newline46mondego><newline46mondego>    public static void main(String[] args)<newline46mondego>    {<newline46mondego>        if (l==5)<newline46mondego>        {<newline46mondego><newline46mondego>            for (; j<=50  ; j+=2)<newline46mondego>            {<newline46mondego>                System.out.printf(<doubleQuotes46>value of j is %d\n<doubleQuotes46>,j);<newline46mondego>                increamenti_Value ();<newline46mondego>            }<newline46mondego>            for (; j>=4; j-=2) // i want here the value j to be 20 ... <newline46mondego><newline46mondego>            {<newline46mondego>                System.out.printf(<doubleQuotes46>value of decrement is %d\n<doubleQuotes46>,j);<newline46mondego>                increamenti_Value ();<newline46mondego>            }<newline46mondego>        }<newline46mondego>    }<newline46mondego><newline46mondego>    private static void increamenti_Value ()<newline46mondego>    {<newline46mondego>        for (; i<=50  ; i+=2) {System.out.printf(<doubleQuotes46>value of i is %d\n<doubleQuotes46>,i);}  <newline46mondego>    }<newline46mondego><newline46mondego>}<newline46mondego>"
"869splitHere46","20117437splitHere46","value of j is 20<newline46mondego>value of i is 30<newline46mondego>value of i is 32<newline46mondego>value of i is 34<newline46mondego>value of i is 36<newline46mondego>value of i is 38<newline46mondego>value of i is 40<newline46mondego>value of i is 42<newline46mondego>value of i is 44<newline46mondego>value of i is 46<newline46mondego>value of i is 48<newline46mondego>value of i is 50<newline46mondego>value of j is 22<newline46mondego>value of j is 24<newline46mondego>value of j is 26<newline46mondego>value of j is 28<newline46mondego>value of j is 30<newline46mondego>value of j is 32<newline46mondego>value of j is 34<newline46mondego>value of j is 36<newline46mondego>value of j is 38<newline46mondego>value of j is 40<newline46mondego>value of j is 42<newline46mondego>value of j is 44<newline46mondego>value of j is 46<newline46mondego>value of j is 48<newline46mondego>value of j is 50<newline46mondego>value of decrement is 52<newline46mondego>value of decrement is 50<newline46mondego>value of decrement is 48<newline46mondego>value of decrement is 46<newline46mondego>value of decrement is 44<newline46mondego>value of decrement is 42<newline46mondego>value of decrement is 40<newline46mondego>value of decrement is 38<newline46mondego>value of decrement is 36<newline46mondego>value of decrement is 34<newline46mondego>value of decrement is 32<newline46mondego>value of decrement is 30<newline46mondego>value of decrement is 28<newline46mondego>value of decrement is 26<newline46mondego>value of decrement is 24<newline46mondego>value of decrement is 22<newline46mondego>value of decrement is 20<newline46mondego>value of decrement is 18<newline46mondego>value of decrement is 16<newline46mondego>value of decrement is 14<newline46mondego>value of decrement is 12<newline46mondego>value of decrement is 10<newline46mondego>value of decrement is 8<newline46mondego>value of decrement is 6<newline46mondego>value of decrement is 4<newline46mondego>"
"870splitHere46","20117575splitHere46","@Override<newline46mondego>    public void mouseReleased(MouseEvent e) {<newline46mondego>        try {<newline46mondego>            Thread.sleep(3000);<newline46mondego>            //thread will then resume<newline46mondego>        } catch (InterruptedException e1) {<newline46mondego>            e1.printStackTrace();<newline46mondego>        }   <newline46mondego>    }<newline46mondego>"
"871splitHere46","20117659splitHere46","pt.get(locCursor)"
"872splitHere46","20117659splitHere46",";"
"873splitHere46","20117659splitHere46","true"
"874splitHere46","20117659splitHere46",";"
"875splitHere46","20117659splitHere46","!egual(';') OR !equal(' ')<newline46mondego>"
"876splitHere46","20117659splitHere46","!( equal(';') OR equal(' ') ) <newline46mondego>"
"877splitHere46","20117659splitHere46","!egual(';') AND !equal(' ')<newline46mondego>"
"878splitHere46","20117772splitHere46","PDFTextStripper"
"879splitHere46","20117772splitHere46","* This class will take a pdf document and strip out all of the text and ignore the<newline46mondego>* formatting and such.<newline46mondego>"
"880splitHere46","20117772splitHere46","protected void writePage() throws IOException<newline46mondego>{<newline46mondego>    [...]<newline46mondego>    for( int i = 0; i < charactersByArticle.size(); i++)<newline46mondego>    {<newline46mondego>        [...]<newline46mondego>        List<TextPosition> line = new ArrayList<TextPosition>();<newline46mondego>        [...]<newline46mondego>        while( textIter.hasNext() )<newline46mondego>        {<newline46mondego>            [...]<newline46mondego>            if( lastPosition != null )<newline46mondego>            {<newline46mondego>                [...]<newline46mondego>                if(!overlap(positionY, positionHeight, maxYForLine, maxHeightForLine))<newline46mondego>                {<newline46mondego>                    writeLine(normalize(line,isRtlDominant,hasRtl),isRtlDominant);<newline46mondego>                    line.clear();<newline46mondego>                    [...]<newline46mondego>                }<newline46mondego>............<newline46mondego>"
"881splitHere46","20117772splitHere46","TextPosition"
"882splitHere46","20117772splitHere46","line"
"883splitHere46","20117772splitHere46","line"
"884splitHere46","20117772splitHere46","getText"
"885splitHere46","20117772splitHere46","private List<String> normalize(List<TextPosition> line, boolean isRtlDominant, boolean hasRtl)<newline46mondego>"
"886splitHere46","20117772splitHere46","[Arial]"
"887splitHere46","20117772splitHere46","PDFTextStripper"
"888splitHere46","20117772splitHere46","List<List<TextPosition>>"
"889splitHere46","20117772splitHere46","PDFTextStripper"
"890splitHere46","20117772splitHere46","protected"
"891splitHere46","20117772splitHere46","writePage"
"892splitHere46","20117772splitHere46","writeLine(normalize(line,isRtlDominant,hasRtl),isRtlDominant);<newline46mondego>"
"893splitHere46","20117772splitHere46","public class MyPDFTextStripper extends PDFTextStripper<newline46mondego>{<newline46mondego>    public List<List<TextPosition>> myLines = new ArrayList<List<TextPosition>>();<newline46mondego>    [...]<newline46mondego>                if(!overlap(positionY, positionHeight, maxYForLine, maxHeightForLine))<newline46mondego>                {<newline46mondego>                    writeLine(normalize(line,isRtlDominant,hasRtl),isRtlDominant);<newline46mondego>                    myLines.add(new ArrayList<TextPosition>(line));<newline46mondego>                    line.clear();<newline46mondego>                    [...]<newline46mondego>                }<newline46mondego>"
"894splitHere46","20117772splitHere46","getText"
"895splitHere46","20117772splitHere46","MyPDFTextStripper"
"896splitHere46","20117963splitHere46","<resources><newline46mondego>  <resource><newline46mondego>    <directory>src/test/resources/data</directory><newline46mondego>    <filtering>true</filtering><newline46mondego>  </resource><newline46mondego></resources><newline46mondego>"
"897splitHere46","20117963splitHere46","myVar = ${myVar}<newline46mondego>"
"898splitHere46","20117963splitHere46","mvn -DmyVar=value clean install<newline46mondego>"
"899splitHere46","20117963splitHere46","@Component<newline46mondego>public class MyTest<newline46mondego>{<newline46mondego>   @Value(${myProperty})<newline46mondego>   private String myValue;<newline46mondego><newline46mondego>   // ... Test methods which can use myValue ...<newline46mondego>}<newline46mondego>"
"900splitHere46","20118132splitHere46","if"
"901splitHere46","20118132splitHere46","session.getAttribute(<doubleQuotes46>testAttribute<doubleQuotes46>)"
"902splitHere46","20118132splitHere46","expect(session.getAttribute(<doubleQuotes46>testAttribute<doubleQuotes46>)).andReturn(<doubleQuotes46>testValue<doubleQuotes46>);<newline46mondego>"
"903splitHere46","20118132splitHere46","if(session.getAttribute(<doubleQuotes46>testAttribute<doubleQuotes46>)!=null){<newline46mondego>    System.out.println(<doubleQuotes46>fired session<doubleQuotes46>);<newline46mondego>    System.out.println((String)session.getAttribute(<doubleQuotes46>testAttribute<doubleQuotes46>));<newline46mondego>}<newline46mondego>"
"904splitHere46","20118132splitHere46","times(int)"
"905splitHere46","20118132splitHere46","anyTimes()"
"906splitHere46","20118132splitHere46","1. expect(session.getAttribute(<doubleQuotes46>testAttribute<doubleQuotes46>)).andReturn(<doubleQuotes46>testValue<doubleQuotes46>).times(2);<newline46mondego><newline46mondego>2. expect(session.getAttribute(<doubleQuotes46>testAttribute<doubleQuotes46>)).andReturn(<doubleQuotes46>testValue<doubleQuotes46>).anyTimes();<newline46mondego><newline46mondego>3. expect(session.getAttribute(<doubleQuotes46>testAttribute<doubleQuotes46>)).andReturn(<doubleQuotes46>testValue<doubleQuotes46>);<newline46mondego>   expect(session.getAttribute(<doubleQuotes46>testAttribute<doubleQuotes46>)).andReturn(<doubleQuotes46>testValue<doubleQuotes46>);<newline46mondego>"
"907splitHere46","20118134splitHere46","<int-mail:inbound-channel-adapter store-uri=<doubleQuotes46>pop3:foo<doubleQuotes46><newline46mondego>                              channel=<doubleQuotes46>channel<doubleQuotes46>><newline46mondego>      <int:poller fixed-rate=<doubleQuotes46>60000<doubleQuotes46>/><newline46mondego></int-mail:inbound-channel-adapter><newline46mondego>"
"908splitHere46","20118134splitHere46","Pop3MailReceiver"
"909splitHere46","20118134splitHere46","<int-mail:inbound-channel-adapter/>"
"910splitHere46","20118134splitHere46","<beans:bean id=<doubleQuotes46>pop3MailReceiver<doubleQuotes46> class=<doubleQuotes46>org.springframework.integration.mail.Pop3MailReceiver<doubleQuotes46>/><newline46mondego><newline46mondego><int:inbound-channel-adapter channel=<doubleQuotes46>getEmailsChannel<doubleQuotes46> expression=<doubleQuotes46>''<doubleQuotes46>><newline46mondego>    <int:poller fixed-rate=<doubleQuotes46>60000<doubleQuotes46>/><newline46mondego></int:inbound-channel-adapter><newline46mondego><newline46mondego><int:service-activator input-channel=<doubleQuotes46>getEmailsChannel<doubleQuotes46> output-channel=<doubleQuotes46>processEmailsChannel<doubleQuotes46><newline46mondego>                               expression=<doubleQuotes46>@pop3MailReceiver.receive()<doubleQuotes46>/><newline46mondego>"
"911splitHere46","20118134splitHere46","Pop3MailReceiver"
"912splitHere46","20118134splitHere46","<int:inbound-channel-adapter>"
"913splitHere46","20118134splitHere46","Pop3MailReceiver"
"914splitHere46","20118134splitHere46","<int:service-activator>"
"915splitHere46","20118134splitHere46","<int:service-activator>"
"916splitHere46","20118134splitHere46","MailReceiver#receive()"
"917splitHere46","20118134splitHere46","<int-mail:inbound-channel-adapter/>"
"918splitHere46","20118243splitHere46","FileInputStream is = null;<newline46mondego>    FileOutputStream fo = null;<newline46mondego>    FileChannel inputChannel = null;<newline46mondego>    FileChannel outputChannel = null;<newline46mondego>    File bfile = new File(directoryPath + <doubleQuotes46>/icons/<doubleQuotes46> + outputFileName);<newline46mondego>    try {<newline46mondego>        is = FileLocator.openStream(Activator.getDefault().getBundle(), new Path(<doubleQuotes46>/images/<doubleQuotes46> + imgFileName), false);<newline46mondego>        inputChannel = is.getChannel();<newline46mondego>        fo = new FileOutputStream(bfile);<newline46mondego>        outputChannel = fo.getChannel();<newline46mondego>        outputChannel.transferFrom(inputChannel, 0, inputChannel.size());<newline46mondego>    } finally {<newline46mondego>        // close everything in finally<newline46mondego>    }<newline46mondego>"
"919splitHere46","20118243splitHere46","finally"
"920splitHere46","20118330splitHere46","Elements nodeBlogStats = doc.select(<doubleQuotes46>div.news-col-0 h3<doubleQuotes46>);<newline46mondego>"
"921splitHere46","20118330splitHere46",".news-col-1"
"922splitHere46","20118330splitHere46","<h3>"
"923splitHere46","20118330splitHere46","Elements nodeBlogStats = doc.select(<doubleQuotes46>div#news_wrapper h3<doubleQuotes46>);<newline46mondego>"
"924splitHere46","20118330splitHere46","nodeBlogStats"
"925splitHere46","20118330splitHere46","get(0)"
"926splitHere46","20118330splitHere46","if(nodeBlogStats.size() > 0) {<newline46mondego>    // get value<newline46mondego>    result = nodeBlogStats.get(0).text();<newline46mondego>}<newline46mondego>"
"927splitHere46","20118330splitHere46","List"
"928splitHere46","20118330splitHere46","nodeBlogStats.text()"
"929splitHere46","20118330splitHere46","ArrayList"
"930splitHere46","20118330splitHere46","protected ArrayList<String> getBlogStats() throws Exception {<newline46mondego>    // get html document structure<newline46mondego>    Document document = Jsoup.connect(BLOG_URL).get();<newline46mondego>    // selector query<newline46mondego>    Elements nodeBlogStats = document.select(<doubleQuotes46>div#news_wrapper<doubleQuotes46>);<newline46mondego>    // check results<newline46mondego>    ArrayList<String> list = new ArrayList<String>();<newline46mondego>    for (Element e : nodeBlogStats) {<newline46mondego>        list.add(e.text());<newline46mondego>    }<newline46mondego>    return list;<newline46mondego>}<newline46mondego>"
"931splitHere46","20118377splitHere46","HashMap"
"932splitHere46","20118377splitHere46","ArrayList"
"933splitHere46","20118377splitHere46","HashMap"
"934splitHere46","20118377splitHere46","HashMap"
"935splitHere46","20118784splitHere46","&"
"936splitHere46","20118784splitHere46","&&"
"937splitHere46","20118800splitHere46","192.168.1.23 test.anydomain.com<newline46mondego>"
"938splitHere46","20118805splitHere46","interface DataSource {<newline46mondego>    void supplyData(List<Data> list);<newline46mondego>}<newline46mondego>"
"939splitHere46","20118805splitHere46","interface DataSource {<newline46mondego>    List<Data> supplyData(); <newline46mondego>}<newline46mondego>"
"940splitHere46","20118805splitHere46","List<Data> bigList = new ArrayList<Data>();<newline46mondego>foreach (DataSource s : mySources) {<newline46mondego>    s.supplyData(bigList);<newline46mondego>}<newline46mondego>"
"941splitHere46","20118805splitHere46","supplyData"
"942splitHere46","20118805splitHere46","List<Data> bigList = new ArrayList<Data>();<newline46mondego>foreach (DataSource s : mySources) {<newline46mondego>    List<Data> tmp = s.supplyData();<newline46mondego>    bigList.addAll(tmp);<newline46mondego>}<newline46mondego>"
"943splitHere46","20118805splitHere46","tmp"
"944splitHere46","20118805splitHere46","DataSource"
"945splitHere46","20118904splitHere46","enum Foo{<newline46mondego>  RED,GREEN,BLUE;<newline46mondego><newline46mondego>  private final int value;<newline46mondego>  private Foo(){<newline46mondego>     this.value = ++ Bar.heresMyStaticField;<newline46mondego>  }<newline46mondego><newline46mondego>  static class Bar{<newline46mondego>     private static int heresMyStaticField;<newline46mondego>  }<newline46mondego>}<newline46mondego>"
"946splitHere46","20118910splitHere46","execSQL()"
"947splitHere46","20118910splitHere46","rawQuery()"
"948splitHere46","20118910splitHere46","CREATE TABLE"
"949splitHere46","20118910splitHere46","rawQuery"
"950splitHere46","20118910splitHere46","SQLiteDatabase"
"951splitHere46","20118910splitHere46","rawQuery"
"952splitHere46","20118910splitHere46","rawQuery"
"953splitHere46","20118910splitHere46","execSQL()"
"954splitHere46","20118910splitHere46","sqlite3_exec()"
"955splitHere46","20118910splitHere46","rawQuery()"
"956splitHere46","20118910splitHere46","sqlite3_prepare()"
"957splitHere46","20118910splitHere46","moveTo...()"
"958splitHere46","20118910splitHere46","Cursor"
"959splitHere46","20118910splitHere46","sqlite3_step()"
"960splitHere46","20118910splitHere46","rawQuery()"
"961splitHere46","20118910splitHere46","moveTo...()"
"962splitHere46","20118910splitHere46","execSQL(String sql, Object[] bindArgs)"
"963splitHere46","20118910splitHere46","execSQL(String, Object[])"
"964splitHere46","20118997splitHere46","<doubleQuotes46>"
"965splitHere46","20118997splitHere46","<doubleQuotes46>"
"966splitHere46","20118997splitHere46","\<doubleQuotes46>"
"967splitHere46","20118997splitHere46","WRONG:<newline46mondego>String soapXml = <doubleQuotes46><soapenv:Envelope xmlns:soapenv=<doubleQuotes46>http://sc ... to be continued       <newline46mondego><newline46mondego>CORRECT:<newline46mondego>String soapXml = <doubleQuotes46><soapenv:Envelope xmlns:soapenv=\<doubleQuotes46>http://sc ... to be continued<newline46mondego>"
"968splitHere46","20119109splitHere46","@Context"
"969splitHere46","20119109splitHere46","URIInfo"
"970splitHere46","20119109splitHere46","public void setUriInfo(@Context UriInfo uriInfo) {<newline46mondego>        System.out.println(<doubleQuotes46>UserResource - set uriInfo:<doubleQuotes46>+uriInfo);<newline46mondego>        this.uriInfo = uriInfo;<newline46mondego>    }<newline46mondego>"
"971splitHere46","20119109splitHere46","@Context<newline46mondego>protected UriInfo uriInfo;<newline46mondego>"
"972splitHere46","20119148splitHere46","KeyPair keyPair = KeyPairGenerator.getInstance(<doubleQuotes46>RSA<doubleQuotes46>).generateKeyPair();<newline46mondego>Key pubKey = keyPair.getPublic();  // add this<newline46mondego>PrivateKey privateKey = keyPair.getPrivate();<newline46mondego>// several lines later...<newline46mondego>// Initiate the cipher<newline46mondego>cipher.init(Cipher.ENCRYPT_MODE, pubKey);  // change privateKey to pubKey<newline46mondego>"
"973splitHere46","20119212splitHere46","String[] b = new String[a.size()];<newline46mondego>a.toArray(b);<newline46mondego>"
"974splitHere46","20119212splitHere46","toArray()"
"975splitHere46","20119212splitHere46","Object[]"
"976splitHere46","20119212splitHere46","String[]"
"977splitHere46","20119316splitHere46","this.class().getClassLoader().getResourceAsStream(<doubleQuotes46>/res/xxx<doubleQuotes46>)"
"978splitHere46","20119316splitHere46","src/main/resources"
"979splitHere46","20119316splitHere46","getResourceAsStream(...)"
"980splitHere46","20119316splitHere46","<scope>provided</scope>"
"981splitHere46","20119316splitHere46","new File(<doubleQuotes46>C:\\path\\to\\your\\file.txt<doubleQuotes46>)"
"982splitHere46","20119316splitHere46","FileReader"
"983splitHere46","20119462splitHere46","Thread"
"984splitHere46","20119462splitHere46","Subject"
"985splitHere46","20119462splitHere46","JTextArea"
"986splitHere46","20119462splitHere46","Observer"
"987splitHere46","20119462splitHere46","Thread"
"988splitHere46","20119462splitHere46","run()"
"989splitHere46","20119462splitHere46","notify(String)"
"990splitHere46","20119462splitHere46","public void run() {<newline46mondego>      System.out.println(<doubleQuotes46>lecture COM...<doubleQuotes46>);<newline46mondego>      for(;;){<newline46mondego>          String st = null;<newline46mondego>        try {<newline46mondego>            st=port.readLine();<newline46mondego>        } catch (IOException e) {System.out.println(e.getMessage());}<newline46mondego>                    System.out.println(st);<newline46mondego>      }<newline46mondego>}<newline46mondego>"
"991splitHere46","20119462splitHere46","public void run() {<newline46mondego>      System.out.println(<doubleQuotes46>lecture COM...<doubleQuotes46>);<newline46mondego>      for(;;){<newline46mondego>          String st = null;<newline46mondego>        try {<newline46mondego>            st=port.readLine();<newline46mondego>        } catch (IOException e) {System.out.println(e.getMessage());}<newline46mondego>                   notifyObservers(st); //Pass the data to the observers.<newline46mondego>      }<newline46mondego>}<newline46mondego>"
"992splitHere46","20119462splitHere46","Thread"
"993splitHere46","20119462splitHere46","Thread"
"994splitHere46","20119462splitHere46","Future<String>"
"995splitHere46","20119462splitHere46","public class GpsReader {<newline46mondego>    public class GenericGPSException extends Exception {<newline46mondego><newline46mondego>        public GenericGPSException(String message, Throwable cause) {<newline46mondego>            super(message, cause);<newline46mondego>        }<newline46mondego>    }<newline46mondego><newline46mondego>    public static void main(String[] args) {<newline46mondego><newline46mondego>        // Example of usage<newline46mondego><newline46mondego>        GpsReader gpsReader = new GpsReader();<newline46mondego><newline46mondego>        String messageFromDevice;<newline46mondego>        try {<newline46mondego>            // Try read it<newline46mondego>            messageFromDevice = gpsReader.getCoordinate();<newline46mondego>        } catch (GenericGPSException e) {<newline46mondego>            // Error, what does it says?<newline46mondego>            messageFromDevice = e.getMessage();<newline46mondego>        }<newline46mondego><newline46mondego>        JTextArea mockArea = new JTextArea();<newline46mondego>        // Show to user anything that comes to it.<newline46mondego>        mockArea.setText(messageFromDevice);<newline46mondego><newline46mondego>    }<newline46mondego><newline46mondego>    private boolean isReady;<newline46mondego><newline46mondego>    private RandomAccessFile port;<newline46mondego><newline46mondego>    public GpsReader() {<newline46mondego>    }<newline46mondego><newline46mondego>    public String getCoordinate() throws GenericGPSException {<newline46mondego><newline46mondego>        if (!isReady) {<newline46mondego>            try {<newline46mondego>                port = new RandomAccessFile(<doubleQuotes46>COM3<doubleQuotes46>, <doubleQuotes46>rwd<doubleQuotes46>);<newline46mondego>                port.writeBytes(<doubleQuotes46>\r\n<doubleQuotes46>);<newline46mondego>                port.writeBytes(<doubleQuotes46>c,31,0,0,5\r\n<doubleQuotes46>);<newline46mondego>                port.writeBytes(<doubleQuotes46>T,1000,1\r\n<doubleQuotes46>);<newline46mondego>                isReady = true;<newline46mondego>            } catch (FileNotFoundException e) {<newline46mondego>                throw new GenericGPSException(<newline46mondego>                        <doubleQuotes46>Error at starting communication to Device <doubleQuotes46>, e);<newline46mondego>            } catch (IOException e) {<newline46mondego>                throw new GenericGPSException(<newline46mondego>                        <doubleQuotes46>Error at starting communication to Device <doubleQuotes46>, e);<newline46mondego>            }<newline46mondego><newline46mondego>        }<newline46mondego><newline46mondego>        try {<newline46mondego>            return port.readLine();<newline46mondego>        } catch (IOException e) {<newline46mondego>            throw new GenericGPSException(<doubleQuotes46>Error at reading the Device <doubleQuotes46>, e);<newline46mondego>        }<newline46mondego>    }<newline46mondego>}<newline46mondego>"
"996splitHere46","20119585splitHere46","File path = android.os.Environment.getExternalStorageDirectory();<newline46mondego><newline46mondego>Bitmap bm = BitmapFactory.decodeFile(path + <doubleQuotes46>/Images/My photos/img.jpg<doubleQuotes46>, options);<newline46mondego><newline46mondego>imgView.setImageBitmap(bm)<newline46mondego>"
"997splitHere46","20119595splitHere46","listFiles()"
"998splitHere46","20119595splitHere46","list()"
"999splitHere46","20119595splitHere46","public class Program {<newline46mondego><newline46mondego>    public static void main(String args[]) throws IOException {<newline46mondego>        search(new File(<doubleQuotes46>.<doubleQuotes46>), 0);<newline46mondego>    }<newline46mondego><newline46mondego>    public static void search(File file, int level) {<newline46mondego>        if (!file.isDirectory()) {<newline46mondego>            return;<newline46mondego>        }<newline46mondego><newline46mondego>        for (File f : file.listFiles()) {<newline46mondego>            for (int i = 0; i < level; i++) {<newline46mondego>                System.out.print(<doubleQuotes46>    <doubleQuotes46>);<newline46mondego>            }<newline46mondego>            System.out.println(f.getName());<newline46mondego>            if (f.isDirectory()) {<newline46mondego>                search(f, ++level);<newline46mondego>            }<newline46mondego>        }<newline46mondego>    }<newline46mondego>}<newline46mondego>"
"1000splitHere46","20119737splitHere46","Object[]"
"1001splitHere46","20119737splitHere46","toString"
"1002splitHere46","20119737splitHere46","cells"
"1003splitHere46","20119737splitHere46","[Ljava.lang.Object;@2bbd86"
"1004splitHere46","20119737splitHere46","System.out.println(new Object[]{});<newline46mondego>"
"1005splitHere46","20119737splitHere46","[Ljava.lang.Object;@2bbd86<newline46mondego>"
"1006splitHere46","20119737splitHere46","System.out.println(new Object[]{new Object(), new Object()});<newline46mondego>"
"1007splitHere46","20119737splitHere46","[Ljava.lang.Object;@2bbd86<newline46mondego>"
"1008splitHere46","20119737splitHere46","for (Station s1 : allStationOfOneGraph)"
"1009splitHere46","20119768splitHere46","TeamList"
"1010splitHere46","20119768splitHere46","List"
"1011splitHere46","20119768splitHere46","get(0)"
"1012splitHere46","20119768splitHere46","get(1)"
"1013splitHere46","20120129splitHere46","class SO {<newline46mondego>public static void main(String args[]) {<newline46mondego>try {<newline46mondego>    Process proc = Runtime.getRuntime().exec(<doubleQuotes46>your command<doubleQuotes46>);<newline46mondego>    proc.waitFor(); //Wait for it to finish<newline46mondego>    System.exit(0);<newline46mondego>} catch (IOException e) {<newline46mondego>    e.printStackTrace();<newline46mondego>} catch (InterruptedException e) {<newline46mondego>    e.printStackTrace();<newline46mondego>}<newline46mondego>}<newline46mondego>}<newline46mondego>"
"1014splitHere46","20120249splitHere46","Any code is stored in this space(seems vague to me)?<newline46mondego>"
"1015splitHere46","20120451splitHere46","public class CountingInputStream extends FilterInputStream {<newline46mondego>  long count;<newline46mondego><newline46mondego>  protected CountingInputStream(InputStream in)<newline46mondego>  {<newline46mondego>    super(in);<newline46mondego>  }<newline46mondego>  public long getCount()<newline46mondego>  {<newline46mondego>    return count;<newline46mondego>  }<newline46mondego>  @Override<newline46mondego>  public int read() throws IOException<newline46mondego>  {<newline46mondego>    final int read = super.read();<newline46mondego>    if(read>=0) count++;<newline46mondego>    return read;<newline46mondego>  }<newline46mondego>  @Override<newline46mondego>  public int read(byte[] b, int off, int len) throws IOException {<newline46mondego>    final int read = super.read(b, off, len);<newline46mondego>    if(read>0) count+=read;<newline46mondego>    return read;<newline46mondego>  }<newline46mondego>  @Override<newline46mondego>  public long skip(long n) throws IOException {<newline46mondego>    final long skipped = super.skip(n);<newline46mondego>    if(skipped>0) count+=skipped;<newline46mondego>    return skipped;<newline46mondego>  }<newline46mondego>}<newline46mondego>"
"1016splitHere46","20120451splitHere46","BufferedReader rd = new BufferedReader(new InputStreamReader(<newline46mondego>            conn.getInputStream()));<newline46mondego>"
"1017splitHere46","20120451splitHere46","CountingInputStream counting = new CountingInputStream(conn.getInputStream());<newline46mondego>BufferedReader rd = new BufferedReader(new InputStreamReader(counting));<newline46mondego>"
"1018splitHere46","20120451splitHere46","counting.getCount()"
"1019splitHere46","20120451splitHere46","progressInPercent=progressInBytes*100/totalNumberOfBytes"
"1020splitHere46","20120451splitHere46","ProgressMonitor"
"1021splitHere46","20120451splitHere46","ProgressMonitorInputStream"
"1022splitHere46","20120454splitHere46","private final ReentrantLock lock = new ReentrantLock(true); //fair lock<newline46mondego>   // ...<newline46mondego><newline46mondego>   public void m() {<newline46mondego>     lock.lock();  // block until condition holds<newline46mondego>     try {<newline46mondego>       // ... method body<newline46mondego>     } finally {<newline46mondego>       lock.unlock()<newline46mondego>     }<newline46mondego>   }<newline46mondego>"
"1023splitHere46","20120503splitHere46","<doubleQuotes46>json<doubleQuotes46>"
"1024splitHere46","20120503splitHere46","jqGrid"
"1025splitHere46","20120503splitHere46","<doubleQuotes46>json<doubleQuotes46>"
"1026splitHere46","20120503splitHere46","@Transactional  <newline46mondego>public List<Marcacion> getLista() throws Exception {<newline46mondego>    List<Marcacion> lista = mapper.listado();<newline46mondego>    return lista;<newline46mondego>}<newline46mondego>"
"1027splitHere46","20120503splitHere46","<doubleQuotes46>root<doubleQuotes46>"
"1028splitHere46","20120503splitHere46","<result type=<doubleQuotes46>json<doubleQuotes46>><newline46mondego>  <param name=<doubleQuotes46>root<doubleQuotes46>>lista</param><newline46mondego></result><newline46mondego>"
"1029splitHere46","20120503splitHere46","@Transactional"
"1030splitHere46","20120563splitHere46","public class MainActivity extends Activity<newline46mondego>{<newline46mondego>    EditText edtFirst, edtMiddle, edtLast, edtDay, edtMonth, edtYear;<newline46mondego><newline46mondego>    @Override<newline46mondego>    public void onCreate(Bundle savedInstanceState)<newline46mondego>    {<newline46mondego>        super.onCreate(savedInstanceState);<newline46mondego>        setContentView(R.layout.main);<newline46mondego><newline46mondego>        edtFirst = (EditText) findViewById(R.id.editText1);<newline46mondego>        edtMiddle = (EditText) findViewById(R.id.editText2);<newline46mondego>        edtLast = (EditText) findViewById(R.id.editText3);<newline46mondego>        edtDay = (EditText) findViewById(R.id.editText7);        <newline46mondego>        edtMonth = (EditText) findViewById(R.id.editText8);<newline46mondego>        edtYear = (EditText) findViewById(R.id.editText9);<newline46mondego>    }<newline46mondego><newline46mondego>    public void gReport(View v)<newline46mondego>    {<newline46mondego>        String first = edtFirst.getText().toString();<newline46mondego><newline46mondego>        if (first.length() == 0)<newline46mondego>        {<newline46mondego>            Toast.makeText(this, <doubleQuotes46>Please enter a First Name.<doubleQuotes46>, Toast.LENGTH_SHORT).show();<newline46mondego>            return;<newline46mondego>        }<newline46mondego><newline46mondego>        try<newline46mondego>        {<newline46mondego>            int day = Integer.parseInt(edtDay.getText().toString());<newline46mondego>            int month = Integer.parseInt(edtMonth.getText().toString());<newline46mondego>            int year = Integer.parseInt(edtYear.getText().toString());<newline46mondego><newline46mondego>            int age = getAge(year, month, day);<newline46mondego>            int sum17 = getSum17(first, age);<newline46mondego><newline46mondego>            Intent i = new Intent(this, FullExplanation.class);<newline46mondego>            i.putExtra(<doubleQuotes46>name17<doubleQuotes46>, sum17);<newline46mondego>            i.putExtra(<doubleQuotes46>age<doubleQuotes46>, age);<newline46mondego>            startActivity(i);<newline46mondego>        }<newline46mondego>        catch (NumberFormatException e)<newline46mondego>        {<newline46mondego>            Toast.makeText(this, <doubleQuotes46>Please enter Day, Month, and Year<doubleQuotes46>, Toast.LENGTH_SHORT).show();<newline46mondego>        }<newline46mondego>        catch (IllegalArgumentException e)<newline46mondego>        {           <newline46mondego>            Toast.makeText(this, <doubleQuotes46>Invalid Birthdate<doubleQuotes46>, Toast.LENGTH_SHORT).show();<newline46mondego>        }<newline46mondego>    }<newline46mondego><newline46mondego>    private int getSum17(String name, int age)<newline46mondego>    {<newline46mondego>        int sum17 = 0;<newline46mondego>        int ct = 0;<newline46mondego>        boolean done = false;<newline46mondego><newline46mondego>        char[] name17 = name.toUpperCase().toCharArray();<newline46mondego><newline46mondego>        if (name17.length == 0 || value17(name17[0]) > age)<newline46mondego>        {<newline46mondego>            return 0;<newline46mondego>        }<newline46mondego><newline46mondego>        do<newline46mondego>        {<newline46mondego>            sum17 += value17(name17[ct]);<newline46mondego>            ct++;<newline46mondego><newline46mondego>            if (ct > name.length() - 1)<newline46mondego>            {<newline46mondego>                ct = 0;<newline46mondego>            }<newline46mondego><newline46mondego>            if (sum17 + value17(name17[ct]) > age)<newline46mondego>            {<newline46mondego>                done = true;<newline46mondego>            }<newline46mondego>        }<newline46mondego>        while (!done);<newline46mondego><newline46mondego>        return sum17;       <newline46mondego>    }<newline46mondego><newline46mondego>    private int value17(char c)<newline46mondego>    {<newline46mondego>        if (c < 65 || c > 90)<newline46mondego>        {<newline46mondego>            return 0;<newline46mondego>        }<newline46mondego><newline46mondego>        int v = (c - 64) % 9;<newline46mondego>        return v == 0 ? 9 : v;      <newline46mondego>    }<newline46mondego><newline46mondego>    public int getAge(int _year, int _month, int _day)<newline46mondego>    {<newline46mondego>        GregorianCalendar cal = new GregorianCalendar();<newline46mondego>        int y, m, d, a;         <newline46mondego><newline46mondego>        y = cal.get(Calendar.YEAR);<newline46mondego>        m = cal.get(Calendar.MONTH) + 1;<newline46mondego>        d = cal.get(Calendar.DAY_OF_MONTH);<newline46mondego>        cal.set(_year, _month, _day);<newline46mondego>        a = y - cal.get(Calendar.YEAR);<newline46mondego>        if ((m < cal.get(Calendar.MONTH) + 1)<newline46mondego>            || ((m == cal.get(Calendar.MONTH) + 1) && (d < cal<newline46mondego>            .get(Calendar.DAY_OF_MONTH))))<newline46mondego>        {<newline46mondego>            --a;<newline46mondego>        }<newline46mondego>        if (a < 0)<newline46mondego>            throw new IllegalArgumentException(<doubleQuotes46>Age < 0<doubleQuotes46>);<newline46mondego>        return a;<newline46mondego>    }<newline46mondego>}<newline46mondego>"
"1031splitHere46","20120563splitHere46","android:digits=<doubleQuotes46>abcdefghijklmnopqrstuvwxyz ABCDEFGHIJKLMNOPQRSTUVWXYZ<doubleQuotes46><newline46mondego>"
"1032splitHere46","20120563splitHere46","android:inputType=<doubleQuotes46>number<doubleQuotes46><newline46mondego>"
"1033splitHere46","20120582splitHere46","valueOf"
"1034splitHere46","20120582splitHere46","interface ValueGetter<T> {<newline46mondego>    T getValue(String data);<newline46mondego>}<newline46mondego>"
"1035splitHere46","20120582splitHere46","notifyMessageListeners"
"1036splitHere46","20120582splitHere46","private void notifyMessageListeners(Message message, ValueGetter<T> getter) {<newline46mondego>    LinkedList<IRequestListener<?>> listeners = <newline46mondego>         requestListenerMap.get(message.getType());<newline46mondego><newline46mondego>    for (IRequestListener<?> listener : listeners) {<newline46mondego>        IRequestListener<T> notificationListener = <newline46mondego>            (IRequestListener<T>) listener;<newline46mondego>        notificationListener.resultUpdated(getter.getValue(message.getData()));<newline46mondego>     }<newline46mondego>}<newline46mondego>"
"1037splitHere46","20120582splitHere46","notifyMessageListeners"
"1038splitHere46","20120582splitHere46","ValueGetter<T>"
"1039splitHere46","20120582splitHere46","notifyMessageListeners(message, new ValueGetter<T>() {<newline46mondego>    public T getValue(String data) {<newline46mondego>        return (T) Notification.valueOf(data);<newline46mondego>    }<newline46mondego>});<newline46mondego><newline46mondego>notifyMessageListeners(message, new ValueGetter<T>() {<newline46mondego>    public T getValue(String data) {<newline46mondego>        return (T) Integer.valueOf(data);<newline46mondego>    }<newline46mondego>});<newline46mondego>"
"1040splitHere46","20120614splitHere46","panelRight.revalidate();<newline46mondego>panelRight.repaint();<newline46mondego>"
"1041splitHere46","20120659splitHere46","BACKUP DATABASE 'databaseOfNames' TO DISK = 'c:\myFile' <newline46mondego>"
"1042splitHere46","20120659splitHere46","try (<newline46mondego>         // Step 1: Allocate a database <doubleQuotes46>Connection<doubleQuotes46> object<newline46mondego>         Connection conn = DriverManager.getConnection(<newline46mondego>               <doubleQuotes46>jdbc:mysql://localhost:8888/ebookshop<doubleQuotes46>, <doubleQuotes46>myuser<doubleQuotes46>, <doubleQuotes46>password<doubleQuotes46>); // MySQL<newline46mondego><newline46mondego>         // Step 2: Allocate a <doubleQuotes46>Statement<doubleQuotes46> object in the Connection<newline46mondego>         Statement stmt = conn.createStatement();<newline46mondego>      ) {<newline46mondego>         String strSelect = <doubleQuotes46>BACKUP DATABASE 'databaseOfNames' TO DISK = 'c:\myFile' <doubleQuotes46>;<newline46mondego>         ResultSet rset = stmt.execute(strSelect);<newline46mondego>      }<newline46mondego>"
"1043splitHere46","20120699splitHere46","String newString = <doubleQuotes46>4a2b<doubleQuotes46>;<newline46mondego>    String num = <doubleQuotes46><doubleQuotes46>;<newline46mondego>    StringBuilder res = new StringBuilder();<newline46mondego>    for (int i = 0; i < newString.length(); i++) {<newline46mondego>        char ch = newString.charAt(i);<newline46mondego><newline46mondego>        if (Character.isDigit(ch)) {<newline46mondego>            num += ch;<newline46mondego><newline46mondego>        } else if (Character.isLetter(ch)) {<newline46mondego>            if (num.length() > 0) {<newline46mondego>                for (int j = 0; j < Integer.parseInt(num); j++) {<newline46mondego>                    res.append(ch);<newline46mondego>                }<newline46mondego>            }<newline46mondego>            num=<doubleQuotes46><doubleQuotes46>;<newline46mondego>        }<newline46mondego>    }<newline46mondego>    System.out.println(res);<newline46mondego>"
"1044splitHere46","20120933splitHere46","package matrixConvertion;<newline46mondego>import java.util.Arrays;<newline46mondego><newline46mondego>public class matrixConvertion {<newline46mondego><newline46mondego>        public static void main(String[] args)<newline46mondego>            {<newline46mondego><newline46mondego>                int i,j=0;<newline46mondego>                int count=10;<newline46mondego>                int array2D[][]=new int[2][3];<newline46mondego>                int array1D[]=new int[6];<newline46mondego><newline46mondego>                for(i=0;i<2;i++)<newline46mondego>                {<newline46mondego>                     for(j=0;j<3;j++)<newline46mondego>                     {<newline46mondego>                          array2D[i][j]=count;<newline46mondego>                          count++;<newline46mondego>                     }<newline46mondego>                }<newline46mondego><newline46mondego>                for(i=0;i<2;i++)<newline46mondego>                {<newline46mondego>                     for(j=0;j<3;j++)<newline46mondego>                     {<newline46mondego>                          array1D[i+j+i*(array2D[0].length-1)] = array2D[i][j];                       <newline46mondego>                     }<newline46mondego>                }   <newline46mondego>                System.out.println(<doubleQuotes46>1D array is:<doubleQuotes46>);<newline46mondego>                System.out.println(Arrays.toString(array1D));<newline46mondego><newline46mondego><newline46mondego>                Arrays.sort(array1D);<newline46mondego>                System.out.println(<doubleQuotes46>sorted 1D array is:<doubleQuotes46>);<newline46mondego>                System.out.println(Arrays.toString(array1D));<newline46mondego>                int n=0, g=2;<newline46mondego>                int[] reSorted=new int[array1D.length];<newline46mondego>                for(int k=0; k<array1D.length; k++)<newline46mondego>                {   <newline46mondego>                      reSorted[k]=array1D[array1D.length-1-n];                    <newline46mondego>                      n+=g;<newline46mondego>                         if(n>=array1D.length)<newline46mondego>                         {<newline46mondego>                            n=array1D.length-1; g=-2; <newline46mondego>                         }<newline46mondego>                }<newline46mondego>                System.out.println(<doubleQuotes46>reSorted 1D array is:<doubleQuotes46>);<newline46mondego>                System.out.println(Arrays.toString(reSorted));              <newline46mondego><newline46mondego><newline46mondego>            }<newline46mondego><newline46mondego>}<newline46mondego>"
"1045splitHere46","20120989splitHere46","void show() {<newline46mondego>}<newline46mondego>"
"1046splitHere46","20120989splitHere46","void show(int arg)<newline46mondego>"
"1047splitHere46","20121009splitHere46","NetworkOnMainThreadException"
"1048splitHere46","20121158splitHere46","Hello World"
"1049splitHere46","20121158splitHere46","\users"
"1050splitHere46","20121158splitHere46","\"
"1051splitHere46","20121158splitHere46","u"
"1052splitHere46","20121158splitHere46","sers"
"1053splitHere46","20121158splitHere46","\u"
"1054splitHere46","20121158splitHere46","public class HelloWorld {<newline46mondego><newline46mondego>    /**<newline46mondego>     * Source: C:\users\devnull\HelloWorld.java<newline46mondego>     */<newline46mondego>    public static void main(String[] args) {<newline46mondego>        System.out.println(<doubleQuotes46>Hello World!<doubleQuotes46>);<newline46mondego>    }<newline46mondego>}<newline46mondego>"
"1055splitHere46","20121172splitHere46","showVisibleRadio"
"1056splitHere46","20121172splitHere46","<window>    <newline46mondego>       <radio selected=<doubleQuotes46>@bind(vm.value)<doubleQuotes46>   onCheck=<doubleQuotes46>@command('showVisibleRadio')<doubleQuotes46>/> <newline46mondego>    </window>  <newline46mondego>"
"1057splitHere46","20121172splitHere46","@Command<newline46mondego>     public void  showVisibleRadio(){<newline46mondego><newline46mondego>       if (value.isChecked()){<newline46mondego>       value.setChecked(false);<newline46mondego>       }<newline46mondego>       else{<newline46mondego>       value.setChecked(true);<newline46mondego>      }<newline46mondego>    }<newline46mondego>"
"1058splitHere46","20121275splitHere46","Location"
"1059splitHere46","20121275splitHere46","Parcelable"
"1060splitHere46","20121275splitHere46","bytes"
"1061splitHere46","20121275splitHere46","Location"
"1062splitHere46","20121275splitHere46","Parcel p = Parcel.obtain();<newline46mondego>objLocation.writeToParcel(p, 0);<newline46mondego>final byte[] b = p.marshall();      //now you've got bytes<newline46mondego>p.recycle();<newline46mondego>"
"1063splitHere46","20121275splitHere46","Parecelable"
"1064splitHere46","20121288splitHere46","<doubleQuotes46>I'm here<doubleQuotes46>"
"1065splitHere46","20121288splitHere46","sr"
"1066splitHere46","20121288splitHere46","r"
"1067splitHere46","20121605splitHere46","_ @ ."
"1068splitHere46","20121605splitHere46","[32][95][32][64][32][46]"
"1069splitHere46","20121605splitHere46","So, when you call your function:<newline46mondego>Low: 0 - Middle: 2 - High: 5<newline46mondego>Seach: 46 - Actual: 32<newline46mondego>Low: 3<newline46mondego>Low: 3 - Middle: 4 - High: 5<newline46mondego>Seach: 46 - Actual: 32<newline46mondego>Low: 5<newline46mondego>Low: 5 - Middle: 5 - High: 5<newline46mondego>Found!!!<newline46mondego>true<newline46mondego>"
"1070splitHere46","20121605splitHere46","<doubleQuotes46>_@.<doubleQuotes46>"
"1071splitHere46","20121605splitHere46","Low: 0 - Middle: 1 - High: 2<newline46mondego>Seach: 46 - Actual: 64<newline46mondego>High: 0<newline46mondego>Low: 0 - Middle: 0 - High: 0<newline46mondego>Seach: 46 - Actual: 95<newline46mondego>High: -1<newline46mondego>Not found!!!<newline46mondego>false<newline46mondego>"
"1072splitHere46","20121758splitHere46","^www.test.com/#!search/(.+)/cat=(.+)/$<newline46mondego><newline46mondego>Pattern p = Pattern.compile(<doubleQuotes46>^www.test.com/#!search/(.+)/cat=(.+)/$<doubleQuotes46>);<newline46mondego>Matcher m = p.matcher(url);<newline46mondego><newline46mondego>while(m.find()) {<newline46mondego>    String keyword = m.group(1);<newline46mondego>    String cat = m.group(2);<newline46mondego>}<newline46mondego>"
"1073splitHere46","20121813splitHere46","@Query(<doubleQuotes46>select new FilteredOrder(o.name, o.size, o.cost) from Order o where o.id = ?1<doubleQuotes46>)<newline46mondego>Page<FilteredOrder> findFilteredOrderById(Pageable pageable, String id);<newline46mondego>"
"1074splitHere46","20122120splitHere46","import java.awt.*;<newline46mondego>import java.awt.event.MouseEvent;<newline46mondego>import java.awt.geom.Ellipse2D;<newline46mondego>import java.util.ArrayList;<newline46mondego>import java.util.List;<newline46mondego><newline46mondego>import javax.swing.JFrame;<newline46mondego><newline46mondego>public class FRMMain extends JFrame {<newline46mondego>  private final List<Shape> list=new ArrayList<>();<newline46mondego>  private boolean paintPhase=true;<newline46mondego><newline46mondego>  public FRMMain() {<newline46mondego>      this.setUndecorated(true);<newline46mondego>      final Dimension screenSize = Toolkit.getDefaultToolkit().getScreenSize();<newline46mondego>      this.setSize(screenSize.width, screenSize.height);<newline46mondego>      this.setDefaultCloseOperation(DISPOSE_ON_CLOSE);<newline46mondego>      this.setBackground(new Color(0, 0, 0, 1));<newline46mondego>      this.setOpacity(1f);<newline46mondego>      this.setAlwaysOnTop(true);<newline46mondego>      this.setVisible(true);<newline46mondego>      enableEvents(AWTEvent.MOUSE_EVENT_MASK|AWTEvent.MOUSE_MOTION_EVENT_MASK);<newline46mondego>  }<newline46mondego>  @Override<newline46mondego>  protected void processMouseEvent(MouseEvent e) {<newline46mondego>    if(paintPhase && e.getID()==MouseEvent.MOUSE_RELEASED) {<newline46mondego>      paintPhase = false;<newline46mondego>      // on my machine the following line is enough to enable click-through<newline46mondego>      setBackground(new Color(0, 0, 0, 0));<newline46mondego>      // but if this doesnâ€™t work, the following should do:<newline46mondego>      Area area=new Area();<newline46mondego>      BasicStroke b=new BasicStroke(2f);<newline46mondego>      for(Shape s:list) area.add(new Area(b.createStrokedShape(s)));<newline46mondego>      setShape(area);<newline46mondego>    }<newline46mondego>    super.processMouseEvent(e);<newline46mondego>  }<newline46mondego>  @Override<newline46mondego>  protected void processMouseMotionEvent(MouseEvent event)<newline46mondego>  {<newline46mondego>    if(paintPhase && event.getID()==MouseEvent.MOUSE_DRAGGED) {<newline46mondego>      int x = event.getX();<newline46mondego>      int y = event.getY();<newline46mondego>      list.add(new Ellipse2D.Float(x, y, 8, 8));<newline46mondego>      repaint();<newline46mondego>    }<newline46mondego>    super.processMouseMotionEvent(event);<newline46mondego>  }<newline46mondego>  @Override<newline46mondego>  public boolean contains(int x, int y) {<newline46mondego>    return paintPhase;<newline46mondego>  }<newline46mondego><newline46mondego>  public static void main(String[] args) {<newline46mondego>      new FRMMain();<newline46mondego>  }<newline46mondego><newline46mondego>  @Override<newline46mondego>  public void paint(Graphics g) {<newline46mondego>    Graphics2D gfx=(Graphics2D)g;<newline46mondego>    gfx.setColor(Color.RED);<newline46mondego>    for(Shape s:list) gfx.draw(s);<newline46mondego>  }<newline46mondego>}<newline46mondego>"
"1075splitHere46","20122148splitHere46","jmsTemplate"
"1076splitHere46","20122148splitHere46","MessageCreator"
"1077splitHere46","20122148splitHere46","createMessage()"
"1078splitHere46","20122313splitHere46","class Data {<newline46mondego>    List<String> userNames = new ArrayList<>();<newline46mondego><newline46mondego>    public List<String> getUserNames() {<newline46mondego>        return userNames;<newline46mondego>    }<newline46mondego><newline46mondego>    public void setUserNames( List<String> userNames ) {<newline46mondego>        this.userNames = userNames;<newline46mondego>    }<newline46mondego>}<newline46mondego><newline46mondego>public static void main( String[] args ) throws IOException<newline46mondego>{<newline46mondego>    String obj = <doubleQuotes46> {\<doubleQuotes46>userNames\<doubleQuotes46>:[\<doubleQuotes46>aaaaa aaaaa\<doubleQuotes46>,\<doubleQuotes46>Anders Ohm\<doubleQuotes46>,\<doubleQuotes46>Arthur Hansen\<doubleQuotes46>]}<doubleQuotes46>;<newline46mondego><newline46mondego>    ObjectMapper mapper = new ObjectMapper();<newline46mondego>    Data data = mapper.readValue( obj, Data.class );<newline46mondego><newline46mondego>    System.out.println(data.getUserNames());<newline46mondego>}<newline46mondego>"
"1079splitHere46","20122356splitHere46","public class TreeNode<T> implements Comparable {<newline46mondego><newline46mondego> public T data;<newline46mondego> public double costs;<newline46mondego> public List<TreeNode<T>> children;<newline46mondego><newline46mondego> // Bunch of getters and setters<newline46mondego><newline46mondego> public int compareTo(TreeNode that) { return (int)(this.cost - that.cost); }<newline46mondego> }<newline46mondego>"
"1080splitHere46","20122356splitHere46","Collections.sort(ls, new Comparator() <newline46mondego>                       {<newline46mondego><newline46mondego>                        public int compare(Object o1, Object o2) <newline46mondego>                        {<newline46mondego>                           //typecast and compare here<newline46mondego>                        }<newline46mondego>                       }    <newline46mondego>                );<newline46mondego>"
"1081splitHere46","20122425splitHere46","public void insertNode(Node r, Node n)<newline46mondego>{<newline46mondego>    if(r == null)<newline46mondego>    {<newline46mondego>        System.out.println(<doubleQuotes46>r=n<doubleQuotes46>+ n.data);<newline46mondego>        r = n; //you overwrite the value of r but never use it<newline46mondego>    }<newline46mondego>"
"1082splitHere46","20122425splitHere46","Node r"
"1083splitHere46","20122425splitHere46","t.root"
"1084splitHere46","20122425splitHere46","r"
"1085splitHere46","20122425splitHere46","t.root"
"1086splitHere46","20122430splitHere46","Scanner scanner = new Scanner(System.in);<newline46mondego>"
"1087splitHere46","20122430splitHere46","System.in"
"1088splitHere46","20122430splitHere46","read"
"1089splitHere46","20122430splitHere46","toCharArray()"
"1090splitHere46","20122430splitHere46","toCharArray()"
"1091splitHere46","20122515splitHere46","MyValidationEventHandler"
"1092splitHere46","20122553splitHere46","<result>"
"1093splitHere46","20122553splitHere46","column"
"1094splitHere46","20122553splitHere46","property"
"1095splitHere46","20122553splitHere46","<result property=<doubleQuotes46>SERVICES_XML<doubleQuotes46> column=<doubleQuotes46>SERVICES_XML<doubleQuotes46> javaType=<doubleQuotes46>string<doubleQuotes46> jdbcType=<doubleQuotes46>CLOB<doubleQuotes46> typeHandler=<doubleQuotes46>com.foo.bar.OracleClobTypeHandler<doubleQuotes46> /><newline46mondego>"
"1096splitHere46","20122553splitHere46","<configuration>"
"1097splitHere46","20122553splitHere46","typeHandler"
"1098splitHere46","20122553splitHere46","<configuration><newline46mondego>  <typeHandlers><newline46mondego>    <typeHandler javaType=<doubleQuotes46>java.lang.String<doubleQuotes46> jdbcType=<doubleQuotes46>CLOB<doubleQuotes46> handler=<doubleQuotes46>com.foo.bar.OracleClobTypeHandler<doubleQuotes46>/>        <newline46mondego>  </typeHandlers><newline46mondego></configuration><newline46mondego>"
"1099splitHere46","20122553splitHere46","<result property=<doubleQuotes46>SERVICES_XML<doubleQuotes46> column=<doubleQuotes46>SERVICES_XML<doubleQuotes46> javaType=<doubleQuotes46>string<doubleQuotes46> jdbcType=<doubleQuotes46>CLOB<doubleQuotes46> /><newline46mondego>"
"1100splitHere46","20122674splitHere46","ok(index.render());"
"1101splitHere46","20122721splitHere46","Artifacts"
"1102splitHere46","20122721splitHere46","Output Layout"
"1103splitHere46","20122721splitHere46","Context"
"1104splitHere46","20122721splitHere46","META-INF/context.xml"
"1105splitHere46","20122721splitHere46","tomcat-context.xml"
"1106splitHere46","20122721splitHere46","context.xml"
"1107splitHere46","20122851splitHere46","getActionListeners()"
"1108splitHere46","20122851splitHere46","ConfusedListener"
"1109splitHere46","20122851splitHere46","ActionListener"
"1110splitHere46","20122851splitHere46","public void actionPerformed(ActionEvent event) <newline46mondego>{<newline46mondego>    if(clickCount > 3)<newline46mondego>    {<newline46mondego>        button.removeActionListener(this);<newline46mondego>    }<newline46mondego>    else<newline46mondego>        System.out.println(<doubleQuotes46>I don't know!<doubleQuotes46>);<newline46mondego>}<newline46mondego>"
"1111splitHere46","20122905splitHere46","for (Iterator<String> iterator = source.iterator(); iterator.hasNext(); ) {<newline46mondego>    String element = iterator.hasNext();<newline46mondego>    if (shouldDrain(element)) {<newline46mondego>        destination.add(element);<newline46mondego>        iterator.remove();<newline46mondego>    }<newline46mondego>}<newline46mondego>"
"1112splitHere46","20123189splitHere46","//currentY = currentY - legoHeight;<newline46mondego>"
"1113splitHere46","20123189splitHere46","for (int row = 1; row <= baseLength; row++) {<newline46mondego>        currentX = startX;<newline46mondego>        if (row % 2 == 0) {<newline46mondego>            g.setColor(Color.blue);<newline46mondego>        }<newline46mondego>        else {<newline46mondego>            g.setColor(Color.red);<newline46mondego>        }<newline46mondego>        System.out.println(<doubleQuotes46>row = <doubleQuotes46> + row);<newline46mondego><newline46mondego><newline46mondego>        for (int col = 0; col <= baseLength - row; col++) {<newline46mondego>            System.out.println(<doubleQuotes46>col = <doubleQuotes46> + col);<newline46mondego>            g.fillRoundRect(currentX, currentY, legoWidth, legoHeight, arcWidth, arcHeight);<newline46mondego>            currentX = currentX + legoWidth;<newline46mondego>        }<newline46mondego>        currentY -= legoHeight;<newline46mondego>        startX += legoWidth / 2;<newline46mondego>    }<newline46mondego>"
"1114splitHere46","20123234splitHere46","keyCode"
"1115splitHere46","20123234splitHere46","keyCode"
"1116splitHere46","20123234splitHere46","System.out.println(<doubleQuotes46>keycode <doubleQuotes46> + keyCode);"
"1117splitHere46","20123291splitHere46","INSERT INTO [ANTICIPI_FATTURE_KOFAX]<newline46mondego>       ([ID],[ID_BATCH],[ID_FASCICOLO],[ABI],[CED]<newline46mondego>       ,[ORIGINE],[TIPO],[IMPORTO],[PEZZI]<newline46mondego>       ,[NUMERO_FATTURA],[PAGINA_FATTURA],[TRASMESSO]<newline46mondego>       ,[NUMERO_FATTURA_ELAB],[DATA_CREAZIONE])<newline46mondego>   <foreach collection=<doubleQuotes46>anticipi<doubleQuotes46> item=<doubleQuotes46>item<doubleQuotes46> open=<doubleQuotes46>SELECT<doubleQuotes46> separator=<doubleQuotes46>UNION ALL SELECT<doubleQuotes46>><newline46mondego>      #{item.ID} ,#{item.ID_BATCH},#{item.ID_FASCICOLO}<newline46mondego>       ,#{item.ABI},#{item.CED},#{item.ORIGINE}<newline46mondego>       ,#{item.TIPO},#{item.IMPORTO},#{item.PEZZI}<newline46mondego>       ,#{item.NUMERO_FATTURA},#{item.PAGINA_FATTURA}<newline46mondego>       ,#{item.TRASMESSO},#{item.NUMERO_FATTURA_ELAB}<newline46mondego>       ,#{item.DATA_CREAZIONE}<newline46mondego>   </foreach> <newline46mondego></insert><newline46mondego>"
"1118splitHere46","20123300splitHere46","\PRODUCTION"
"1119splitHere46","20123300splitHere46","\TEST"
"1120splitHere46","20123300splitHere46","\SQLEXPRESS"
"1121splitHere46","20123300splitHere46","\"
"1122splitHere46","20123300splitHere46","jdbc:sqlserver://serverName;database=myDb<newline46mondego>"
"1123splitHere46","20123473splitHere46","class ATest<T> {<newline46mondego>  Map<String, String> props = new HashMap<String, String>();<newline46mondego><newline46mondego>  void aTest() {<newline46mondego>    // Works fine.<newline46mondego>    for (Map.Entry<String, String> entry : props.entrySet()) {<newline46mondego>    }<newline46mondego>  }<newline46mondego><newline46mondego>  void bTest() {<newline46mondego>    ATest aTest = new ATest();<newline46mondego>    // ERROR! incompatible types: Object cannot be converted to Entry<String,String><newline46mondego>    for (Map.Entry<String, String> entry : aTest.props.entrySet()) {<newline46mondego>    }<newline46mondego>  }<newline46mondego><newline46mondego>  void cTest(Map props) {<newline46mondego>    // ERROR! incompatible types: Object cannot be converted to Entry<String,String><newline46mondego>    for (Map.Entry<String, String> entry : props.entrySet()) {<newline46mondego>    }<newline46mondego>  }<newline46mondego><newline46mondego>}<newline46mondego>"
"1124splitHere46","20123473splitHere46","bTest"
"1125splitHere46","20123473splitHere46","ATest"
"1126splitHere46","20123473splitHere46","<String,String>"
"1127splitHere46","20123473splitHere46","props"
"1128splitHere46","20123473splitHere46","cTest"
"1129splitHere46","20123581splitHere46","System.loadLibrary(<doubleQuotes46>opencv_java247<doubleQuotes46>);<newline46mondego>"
"1130splitHere46","20123581splitHere46","System.loadLibrary(<doubleQuotes46>libopencv_java247<doubleQuotes46>);<newline46mondego>"
"1131splitHere46","20123591splitHere46","String"
"1132splitHere46","20123591splitHere46","Book book = new Book(<doubleQuotes46>ChildrensBook<doubleQuotes46>, 0,0,0);<newline46mondego>"
"1133splitHere46","20123591splitHere46","null"
"1134splitHere46","20123591splitHere46","null"
"1135splitHere46","20123591splitHere46","public Book(String nameOfTheBook, int pages, int characters, int numPictures){  <newline46mondego>     super(nameOfTheBook,22,5,20);  <newline46mondego> }<newline46mondego>"
"1136splitHere46","20123602splitHere46","(<img[^>]*[^/]>)(?!\s*</img>)<newline46mondego>"
"1137splitHere46","20123602splitHere46","$1</img><newline46mondego>"
"1138splitHere46","20123602splitHere46","<img src=<doubleQuotes46>path<doubleQuotes46>></img>"
"1139splitHere46","20123602splitHere46","<img src=<doubleQuotes46>path<doubleQuotes46>></img></img>"
"1140splitHere46","20123602splitHere46","str.replaceAll(<doubleQuotes46>(<img[^>]*[^/]>)(?!\\s*</img>)<doubleQuotes46>, <doubleQuotes46>$1</img><doubleQuotes46>);<newline46mondego>"
"1141splitHere46","20123663splitHere46","@RunWith(PowerMockRunner.class)"
"1142splitHere46","20123663splitHere46","@PrepareForTest(CommandLineOptionProcessor.class)"
"1143splitHere46","20123663splitHere46","@RunWith(PowerMockRunner.class)<newline46mondego> @PrepareForTest(CommandLineOptionProcessor.class)<newline46mondego> public class TestClass {<newline46mondego><newline46mondego>     @Test<newline46mondego>     public void testRun(){<newline46mondego>"
"1144splitHere46","20123663splitHere46","@PrepareForTest(CommandLineOptionProcessor.class)"
"1145splitHere46","20123663splitHere46","java.lang.IllegalArgumentException: Not a mock: java.lang.Class<newline46mondego>"
"1146splitHere46","20123663splitHere46","EasyMock.replay()"
"1147splitHere46","20123663splitHere46","PowerMock.replay()"
"1148splitHere46","20123851splitHere46","PdfPCell"
"1149splitHere46","20123851splitHere46","cell"
"1150splitHere46","20123851splitHere46","Chunk"
"1151splitHere46","20123851splitHere46","Chunk chunk = new Chunk(<doubleQuotes46>Leistungsscheinziffer<doubleQuotes46>);<newline46mondego>chunk.setHyphenation(new HyphenationAuto(<doubleQuotes46>de<doubleQuotes46>, <doubleQuotes46>DE<doubleQuotes46>, 2,2));<newline46mondego>table.addCell(new Phrase(chunk));<newline46mondego>"
"1152splitHere46","20123851splitHere46","Phrase"
"1153splitHere46","20123851splitHere46","Phrase"
"1154splitHere46","20123851splitHere46","Phrase"
"1155splitHere46","20123851splitHere46","Chunk"
"1156splitHere46","20123851splitHere46","Phrase phrase = new Phrase();<newline46mondego>phrase.setHyphenation(new HyphenationAuto(<doubleQuotes46>de<doubleQuotes46>, <doubleQuotes46>DE<doubleQuotes46>, 2,2));<newline46mondego>phrase.add(new Chunk(<doubleQuotes46>Leistungsscheinziffer<doubleQuotes46>));<newline46mondego>"
"1157splitHere46","20123893splitHere46","if (boolean expression(){<newline46mondego>        something();<newline46mondego>        if (boolean expression(){<newline46mondego>            something2();<newline46mondego>        }<newline46mondego>        else{<newline46mondego>            something3();<newline46mondego>        }<newline46mondego>"
"1158splitHere46","20123927splitHere46","import java.util.ArrayList;<newline46mondego>import java.util.List;<newline46mondego><newline46mondego>public class Test {<newline46mondego>    public Test() {<newline46mondego>        List<String> list = new ArrayList<String>();<newline46mondego>        list.add(<doubleQuotes46>Monkey<doubleQuotes46>);<newline46mondego>    }<newline46mondego>}<newline46mondego>"
"1159splitHere46","20123982splitHere46","toString()"
"1160splitHere46","20123982splitHere46","data/continuous/..."
"1161splitHere46","20123982splitHere46","/data/continuous/..."
"1162splitHere46","20124014splitHere46","@BeforeClass"
"1163splitHere46","20124047splitHere46","{<newline46mondego>   int i = 0;<newline46mondego>}<newline46mondego>//the scope of i will end here and will be eligible for garbage collection<newline46mondego>"
"1164splitHere46","20124273splitHere46","(?=[a-z0-9-]{1,63})"
"1165splitHere46","20124273splitHere46","(?=[a-z0-9-]{1,63}$)"
"1166splitHere46","20124273splitHere46","-"
"1167splitHere46","20124273splitHere46","-"
"1168splitHere46","20124273splitHere46","([a-z0-9]++-){0,63}[a-z0-9]+"
"1169splitHere46","20124273splitHere46","-"
"1170splitHere46","20124273splitHere46","-"
"1171splitHere46","20124273splitHere46","(?=[a-z0-9-]{1,63}$)([a-z0-9]++-){0,63}[a-z0-9]+"
"1172splitHere46","20124273splitHere46","^"
"1173splitHere46","20124273splitHere46","$"
"1174splitHere46","20124273splitHere46","matches"
"1175splitHere46","20124315splitHere46","21 November 2013, at 17:00:00<newline46mondego>21 November 2013, at 17:01:00<newline46mondego>21 November 2013, at 17:02:00<newline46mondego>"
"1176splitHere46","20124315splitHere46","21 November 2013, at 17:00:01<newline46mondego>"
"1177splitHere46","20124315splitHere46","<value>0       *      *         *        *          ?      </value><newline46mondego>       ^       ^      ^         ^        ^          ^<newline46mondego>    second  minute   hour  day-of-month  month  day-of-week<newline46mondego>"
"1178splitHere46","20124315splitHere46","*"
"1179splitHere46","20124315splitHere46","?"
"1180splitHere46","20124436splitHere46","@SerializedName(value=<doubleQuotes46>tv_show<doubleQuotes46>)<newline46mondego>private TV_Shows tv_shows;<newline46mondego>"
"1181splitHere46","20124436splitHere46","{<newline46mondego> <doubleQuotes46>data<doubleQuotes46>:[<newline46mondego>      {<newline46mondego>         <doubleQuotes46>id<doubleQuotes46>:<doubleQuotes46>664878940211923<doubleQuotes46>,<newline46mondego>         <doubleQuotes46>data<doubleQuotes46>:{<newline46mondego>            <doubleQuotes46>tv_show<doubleQuotes46>:{<newline46mondego>               <doubleQuotes46>id<doubleQuotes46>:<doubleQuotes46>108611845829948<doubleQuotes46>,<newline46mondego>               <doubleQuotes46>url<doubleQuotes46>:<doubleQuotes46>https://www.facebook.com/pages/Popeye-the-Sailor/108611845829948<doubleQuotes46>,<newline46mondego>               <doubleQuotes46>type<doubleQuotes46>:<doubleQuotes46>video.tv_show<doubleQuotes46>,<newline46mondego>               <doubleQuotes46>title<doubleQuotes46>:<doubleQuotes46>Popeye the Sailor<doubleQuotes46><newline46mondego>            }<newline46mondego>         },<newline46mondego>         <doubleQuotes46>type<doubleQuotes46>:<doubleQuotes46>video.watches<doubleQuotes46><newline46mondego>      },<newline46mondego>      {<newline46mondego>         <doubleQuotes46>id<doubleQuotes46>:<doubleQuotes46>664878940211923<doubleQuotes46>,<newline46mondego>         <doubleQuotes46>data<doubleQuotes46>:{<newline46mondego>            <doubleQuotes46>tv_show<doubleQuotes46>:{<newline46mondego>               <doubleQuotes46>id<doubleQuotes46>:<doubleQuotes46>108611845829948<doubleQuotes46>,<newline46mondego>               <doubleQuotes46>url<doubleQuotes46>:<doubleQuotes46>https://www.facebook.com/pages/Popeye-the-Sailor/108611845829948<doubleQuotes46>,<newline46mondego>               <doubleQuotes46>type<doubleQuotes46>:<doubleQuotes46>video.tv_show<doubleQuotes46>,<newline46mondego>               <doubleQuotes46>title<doubleQuotes46>:<doubleQuotes46>Popeye the Sailor<doubleQuotes46><newline46mondego>            }<newline46mondego>         },<newline46mondego>         <doubleQuotes46>type<doubleQuotes46>:<doubleQuotes46>video.watches<doubleQuotes46><newline46mondego>      }<newline46mondego>   ]<newline46mondego>}<newline46mondego>"
"1182splitHere46","20124436splitHere46","public class FBUserVideoWatches {<newline46mondego><newline46mondego>    private List<Data> data;<newline46mondego><newline46mondego>    public List<Data> getData() { return data; }<newline46mondego><newline46mondego>    public void setData(List<Data> data) {  this.data = data;}<newline46mondego>}<newline46mondego><newline46mondego><newline46mondego>public class Data {<newline46mondego><newline46mondego>    private TVData data;<newline46mondego><newline46mondego>    private String id;<newline46mondego>    private String type;<newline46mondego><newline46mondego>// setter/getter here<newline46mondego>}<newline46mondego><newline46mondego>public class TVData {<newline46mondego><newline46mondego>    @SerializedName(value=<doubleQuotes46>tv_show<doubleQuotes46>)<newline46mondego>    private Show show;<newline46mondego>// setter/getter here<newline46mondego>}<newline46mondego><newline46mondego>public class Show {<newline46mondego><newline46mondego>    private String id;<newline46mondego>    private String url;<newline46mondego>    private String type;<newline46mondego>    private String title;<newline46mondego>       // setter/getter here<newline46mondego>   }<newline46mondego>"
"1183splitHere46","20124436splitHere46","Gson gson = new Gson();<newline46mondego>FBUserVideoWatches fbUserVideoWatches =gson.fromJson(json_string, FBUserVideoWatches.class);<newline46mondego>"
"1184splitHere46","20124438splitHere46",".*<.+\bonload\s*=.+>.*<newline46mondego>"
"1185splitHere46","20124438splitHere46","<"
"1186splitHere46","20124438splitHere46","<"
"1187splitHere46","20124438splitHere46",".+"
"1188splitHere46","20124438splitHere46","[^>]+"
"1189splitHere46","20124438splitHere46",">"
"1190splitHere46","20124438splitHere46",".*<[^>]+\bonload\s*=.+>.*<newline46mondego>"
"1191splitHere46","20124490splitHere46","meetingType.Meetings"
"1192splitHere46","20124490splitHere46","${meetingType.Meetings}"
"1193splitHere46","20124490splitHere46","<c:forEach items=<doubleQuotes46>${meetingList}<doubleQuotes46> var=<doubleQuotes46>meetingType<doubleQuotes46>><newline46mondego>    <td>  This from MeetingTypes:  ${meetingType.typeName}</td> <newline46mondego>    <c:forEach items=<doubleQuotes46>${meetingType.Meetings}<doubleQuotes46> var=<doubleQuotes46>meet<doubleQuotes46>><newline46mondego>        <td>  This from Meetings:   ${meet.roomName}   </td>        <newline46mondego>    </c:forEach><newline46mondego></c:forEach><newline46mondego>"
"1194splitHere46","20124528splitHere46","player"
"1195splitHere46","20124528splitHere46","player"
"1196splitHere46","20124528splitHere46","null"
"1197splitHere46","20124528splitHere46","public static Player player = new Player();<newline46mondego>"
"1198splitHere46","20124542splitHere46","VideoListFragment"
"1199splitHere46","20124542splitHere46","MainActivity"
"1200splitHere46","20124542splitHere46","VideoListDemoActivity"
"1201splitHere46","20124542splitHere46","VideoListFragment"
"1202splitHere46","20124550splitHere46","AdRequest adRequest = new AdRequest();<newline46mondego>    String[] keywords = getResources().getStringArray(R.array.key_words);<newline46mondego>    Set<String> set = new HashSet<String>();<newline46mondego>    int count = 0;<newline46mondego>    while (count < keywords.length) {<newline46mondego>        set.add(keywords[count]);<newline46mondego>        count++;<newline46mondego>    }<newline46mondego>    adRequest.addKeywords(set);<newline46mondego>    adView.loadAd(adRequest);<newline46mondego>"
"1203splitHere46","20124800splitHere46","BigInteger"
"1204splitHere46","20124800splitHere46","order"
"1205splitHere46","20124800splitHere46","ByteBuffer"
"1206splitHere46","20124800splitHere46","long"
"1207splitHere46","20124800splitHere46","// before loop<newline46mondego>byteBuffer.order(ByteOrder.LITTLE_ENDIAN);<newline46mondego><newline46mondego>// in loop<newline46mondego>long bigIndex = byteBuffer.getLong();<newline46mondego>byteBuffer.rewind();<newline46mondego>System.out.println(<doubleQuotes46>INDEX <doubleQuotes46>+Long.toHexString(bigIndex));<newline46mondego>"
"1208splitHere46","20124800splitHere46","long"
"1209splitHere46","20124800splitHere46","BigInteger"
"1210splitHere46","20124800splitHere46","long"
"1211splitHere46","20124800splitHere46","BigInteger bi = BigInteger.valueOf(bigIndex & ~Long.MIN_VALUE);<newline46mondego>if (bigIndex < 0) bi = bi.setBit(63);<newline46mondego>"
"1212splitHere46","20124922splitHere46","[\\[(][^\\])]*[\\])]<newline46mondego>"
"1213splitHere46","20124927splitHere46","class DottedCells implements PdfPTableEvent {<newline46mondego>    @Override<newline46mondego>    public void tableLayout(PdfPTable table, float[][] widths,<newline46mondego>        float[] heights, int headerRows, int rowStart,<newline46mondego>        PdfContentByte[] canvases) {<newline46mondego>        PdfContentByte canvas = canvases[PdfPTable.LINECANVAS];<newline46mondego>        canvas.setLineDash(3f, 3f);<newline46mondego>        float llx = widths[0][0];<newline46mondego>        float urx = widths[0][widths[0].length -1];<newline46mondego>        for (int i = 0; i < heights.length; i++) {<newline46mondego>            canvas.moveTo(llx, heights[i]);<newline46mondego>            canvas.lineTo(urx, heights[i]);<newline46mondego>        }<newline46mondego>        for (int i = 0; i < widths.length; i++) {<newline46mondego>            for (int j = 0; j < widths[i].length; j++) {<newline46mondego>                canvas.moveTo(widths[i][j], heights[i]);<newline46mondego>                canvas.lineTo(widths[i][j], heights[i+1]);<newline46mondego>            }<newline46mondego>        }<newline46mondego>        canvas.stroke();<newline46mondego>    }<newline46mondego>}<newline46mondego>"
"1214splitHere46","20124927splitHere46","stroke()"
"1215splitHere46","20124927splitHere46","class DottedCell implements PdfPCellEvent {<newline46mondego>    @Override<newline46mondego>    public void cellLayout(PdfPCell cell, Rectangle position,<newline46mondego>        PdfContentByte[] canvases) {<newline46mondego>        PdfContentByte canvas = canvases[PdfPTable.LINECANVAS];<newline46mondego>        canvas.setLineDash(3f, 3f);<newline46mondego>        canvas.rectangle(position.getLeft(), position.getBottom(),<newline46mondego>            position.getWidth(), position.getHeight());<newline46mondego>        canvas.stroke();<newline46mondego>    }<newline46mondego>}<newline46mondego>"
"1216splitHere46","20124927splitHere46","stroke()"
"1217splitHere46","20125084splitHere46","private final static int BASIC_STOPWATCH_ID = <newline46mondego>  Audits.mapAudit(<doubleQuotes46>example.basicStopwatch<doubleQuotes46>);<newline46mondego><newline46mondego>  public void tryOut(){<newline46mondego>    final Stopwatch stopwatch = Audits.getBasicStopwatch(BASIC_STOPWATCH_ID);<newline46mondego>    stopwatch.start();<newline46mondego>    doSomeWork();<newline46mondego>    stopwatch.stop();<newline46mondego>  }<newline46mondego>"
"1218splitHere46","20125114splitHere46","number.nextInt (100);"
"1219splitHere46","20125114splitHere46","0"
"1220splitHere46","20125114splitHere46","99"
"1221splitHere46","20125114splitHere46","min"
"1222splitHere46","20125114splitHere46","a[0];"
"1223splitHere46","20125114splitHere46","int"
"1224splitHere46","20125114splitHere46","min"
"1225splitHere46","20125114splitHere46","min = Integer.MAX_VALUE;"
"1226splitHere46","20125223splitHere46","double multiplies =8 * 4;<newline46mondego>System.out.println(Math.floor(Math.pow( multiplies/ Math.PI, 1.0/3)*100.0));<newline46mondego><newline46mondego>double multiplies =8 * 4;<newline46mondego>System.out.println(Math.ceil(Math.pow( multiplies/ Math.PI, 1.0/3)*100.0));<newline46mondego><newline46mondego>double multiplies =8 * 4;<newline46mondego>System.out.println(Math.round(Math.pow( multiplies/ Math.PI, 1.0/3)*100.0));<newline46mondego>"
"1227splitHere46","20125339splitHere46","AboutController.view"
"1228splitHere46","20125339splitHere46","AboutController"
"1229splitHere46","20125339splitHere46","Shell"
"1230splitHere46","20125362splitHere46","System.out.println(<doubleQuotes46>Password is: <doubleQuotes46> +rs.getString(1));<newline46mondego>"
"1231splitHere46","20125362splitHere46","pwd1 = rs.getString(1));<newline46mondego>"
"1232splitHere46","20125372splitHere46","for(j=1;j<=i;j++)"
"1233splitHere46","20125630splitHere46","<plugin><newline46mondego>    <artifactId>maven-ear-plugin</artifactId><newline46mondego>    <version>2.8</version><newline46mondego>    <configuration><newline46mondego>      <modules><newline46mondego>        <ejbModule><newline46mondego>           <groupId>com.huwag</groupId><newline46mondego>           <artifactId>AlmexOffice-ejb</artifactId><newline46mondego>        </ejbModule><newline46mondego>        <webModule><newline46mondego>           <groupId>com.huwag</groupId><newline46mondego>           <artifactId>AlmexOffice-web</artifactId><newline46mondego>           <contextRoot>/custom-context-root</contextRoot><newline46mondego>         </webModule><newline46mondego>      </modules><newline46mondego>    </configuration><newline46mondego></plugin><newline46mondego>"
"1234splitHere46","20125840splitHere46","Array"
"1235splitHere46","20125840splitHere46","Collection"
"1236splitHere46","20125840splitHere46","String[] arr = (String[]) resultSet.getArray(1).getArray();<newline46mondego>result.add(arr);<newline46mondego>"
"1237splitHere46","20125844splitHere46","graphs"
"1238splitHere46","20125844splitHere46","Graph"
"1239splitHere46","20125844splitHere46","Partite"
"1240splitHere46","20125844splitHere46","Partite"
"1241splitHere46","20125844splitHere46","Partite p = new Partite(blah, blah);<newline46mondego>graphs.add(p);<newline46mondego>Partite other = (Partite)graphs.get(0);<newline46mondego>other.methodFromPartite();<newline46mondego>"
"1242splitHere46","20125882splitHere46","Pattern regex = Pattern.compile(<doubleQuotes46>ar<doubleQuotes46>,  Pattern.CASE_INSENSITIVE | Pattern.UNICODE_CASE);<newline46mondego>DBObject query = new DBObject(<doubleQuotes46>fields.name<doubleQuotes46>, regex);<newline46mondego>Cursor result = myCollection.find(query);<newline46mondego>"
"1243splitHere46","20125959splitHere46","makeMove(row - 1, col - 1);<newline46mondego>makeMove(row - 1, col + 1);<newline46mondego>makeMove(row + 1, col - 1);<newline46mondego>makeMove(row + 1, col + 1);<newline46mondego>"
"1244splitHere46","20125986splitHere46","winner[turn] = subField[(int)Math.floor(i / 10.0)][i % 10].<newline46mondego>                              equalsIgnoreCase(<doubleQuotes46>O<doubleQuotes46>) ^ winner[turn++];<newline46mondego>"
"1245splitHere46","20125986splitHere46","String aSubField = subField[(int)Math.floor(i / 10.0)][i % 10];<newline46mondego>if (aSubField.equalsIgnoreCase(<doubleQuotes46>O<doubleQuotes46>))<newline46mondego>    winner[turn] = false;<newline46mondego>turn++;<newline46mondego>"
"1246splitHere46","20125986splitHere46","false"
"1247splitHere46","20125986splitHere46","winner[turn] = !subField[i/10][i%10].equalsIgnoreCase(<doubleQuotes46>O<doubleQuotes46>) & winner[turn++];<newline46mondego>"
"1248splitHere46","20125986splitHere46","winner[turn++] &= !subField[i/10][i%10].equalsIgnoreCase(<doubleQuotes46>O<doubleQuotes46>);<newline46mondego>"
"1249splitHere46","20126110splitHere46","for(j=1;j<i+1;j+=2)<newline46mondego>"
"1250splitHere46","20126110splitHere46","for (j = i; j <= 5; j++)<newline46mondego>"
"1251splitHere46","20126233splitHere46","sun.misc.Unsafe"
"1252splitHere46","20126233splitHere46","java.lang.Field"
"1253splitHere46","20126233splitHere46","java.lang.Method"
"1254splitHere46","20126233splitHere46","FieldSerializer"
"1255splitHere46","20126233splitHere46","FieldSerializer"
"1256splitHere46","20126259splitHere46","List<String> listTwo = new ArrayList<String>(){};<newline46mondego>"
"1257splitHere46","20126259splitHere46","ArrayList<String>"
"1258splitHere46","20126259splitHere46","listTwo instanceof ArrayList"
"1259splitHere46","20126259splitHere46","ArrayList"
"1260splitHere46","20126259splitHere46","private class SomeClass extends ArrayList<String><newline46mondego>{<newline46mondego>}<newline46mondego>"
"1261splitHere46","20126259splitHere46","List<String> listThree = new ArrayList<String>() {{}};<newline46mondego>"
"1262splitHere46","20126259splitHere46","private class SomeClass2 extends ArrayList<String><newline46mondego>{<newline46mondego>    {<newline46mondego>        // some code could go here...<newline46mondego>    }<newline46mondego>}<newline46mondego>"
"1263splitHere46","20126259splitHere46","List<String> listThree = new ArrayList<String>()<newline46mondego>{{<newline46mondego>    add(<doubleQuotes46>hello<doubleQuotes46>);<newline46mondego>}};<newline46mondego>"
"1264splitHere46","20126259splitHere46","List<String> listOne = new ArrayList<String>();<newline46mondego>"
"1265splitHere46","20126382splitHere46","Time time1 =  new Time(72000000);<newline46mondego>"
"1266splitHere46","20126382splitHere46","Time<newline46mondego><newline46mondego>public Time(long time)<newline46mondego><newline46mondego>Constructs a Time object using a milliseconds time value.<newline46mondego><newline46mondego>Parameters:<newline46mondego>    time - milliseconds since January 1, 1970, 00:00:00 GMT; a negative number is milliseconds before January 1, 1970, 00:00:00 GMT<newline46mondego>"
"1267splitHere46","20126390splitHere46","setContentView(gameView);<newline46mondego>"
"1268splitHere46","20126412splitHere46","keyPressed"
"1269splitHere46","20126412splitHere46","keyReleased"
"1270splitHere46","20126462splitHere46","pete"
"1271splitHere46","20126462splitHere46","Employee"
"1272splitHere46","20126462splitHere46","pete"
"1273splitHere46","20126462splitHere46","Worker"
"1274splitHere46","20126462splitHere46","((Worker)pete).work(5);<newline46mondego>"
"1275splitHere46","20126566splitHere46","Set<NprDto>"
"1276splitHere46","20126566splitHere46","equals"
"1277splitHere46","20126566splitHere46","hasCode"
"1278splitHere46","20126566splitHere46","NproDto"
"1279splitHere46","20126566splitHere46","class NprDto{<newline46mondego>   Long accountId;<newline46mondego>   .......<newline46mondego><newline46mondego>@Override<newline46mondego>public boolean equals(Object obj) {<newline46mondego>   NproDto other=(NproDto) obj;<newline46mondego>   return this.accountId==other.accountId;<newline46mondego>}<newline46mondego><newline46mondego>@Override<newline46mondego>public int hashCode() {<newline46mondego>    return accountId.hashCode();<newline46mondego>}<newline46mondego>}<newline46mondego>"
"1280splitHere46","20126566splitHere46","getUniqueAccountList"
"1281splitHere46","20126566splitHere46","private Set<NprDto> getUniqueAccountSet(){    <newline46mondego>    Map<Long,NprDto> uniqueAccountsMapList = new HashMap<Long,NprDto>();<newline46mondego>    Set<NprDto> uniqueAccounts = new HashSet<NprDto>(uniqueAccountsMapList.values());    <newline46mondego>    return uniqueAccounts;<newline46mondego><newline46mondego>}<newline46mondego>"
"1282splitHere46","20126574splitHere46","new XmlOutputter().output(document, System.out);<newline46mondego>"
"1283splitHere46","20126574splitHere46","new XmlOutputter(Format.getPrettyFormat()).output(document, System.out);<newline46mondego>"
"1284splitHere46","20126674splitHere46","switch"
"1285splitHere46","20126674splitHere46","MenuItem"
"1286splitHere46","20126674splitHere46","public static void main(String[] args)<newline46mondego>{<newline46mondego>    final Display display = Display.getDefault();<newline46mondego>    Shell shell = new Shell(display);<newline46mondego>    shell.setLayout(new FillLayout());<newline46mondego><newline46mondego>    Menu bar = new Menu(shell, SWT.BAR);<newline46mondego>    shell.setMenuBar(bar);<newline46mondego><newline46mondego>    MenuItem fileItem = new MenuItem(bar, SWT.CASCADE);<newline46mondego>    fileItem.setText(<doubleQuotes46>&File<doubleQuotes46>);<newline46mondego>    Menu submenu = new Menu(shell, SWT.DROP_DOWN);<newline46mondego>    fileItem.setMenu(submenu);<newline46mondego><newline46mondego>    File dir = new File(<doubleQuotes46>C:\\<doubleQuotes46>);<newline46mondego><newline46mondego>    for (File file : dir.listFiles())<newline46mondego>    {<newline46mondego>        if (file.isFile())<newline46mondego>        {<newline46mondego>            MenuItem item = new MenuItem(submenu, SWT.NONE);<newline46mondego>            item.setText(file.getName());<newline46mondego>        }<newline46mondego>    }<newline46mondego><newline46mondego>    shell.pack();<newline46mondego>    shell.open();<newline46mondego>    while (!shell.isDisposed())<newline46mondego>    {<newline46mondego>        if (!display.readAndDispatch())<newline46mondego>        {<newline46mondego>            display.sleep();<newline46mondego>        }<newline46mondego>    }<newline46mondego>}<newline46mondego>"
"1287splitHere46","20126687splitHere46","System.out.println(connection.next());<newline46mondego>"
"1288splitHere46","20126687splitHere46","connection.next();<newline46mondego>"
"1289splitHere46","20126724splitHere46","Accept"
"1290splitHere46","20126724splitHere46","WebTarget#request(MediaType)"
"1291splitHere46","20126724splitHere46","ClientBuilder.newClient()<newline46mondego>    .target(<doubleQuotes46>mytarget<doubleQuotes46>)<newline46mondego>    .request(<doubleQuotes46>application/xml<doubleQuotes46>)<newline46mondego>    .method(req.getMethod(), Entity.entity(req, req.getMediaType()));<newline46mondego>"
"1292splitHere46","20126724splitHere46","Content-Type"
"1293splitHere46","20126724splitHere46","WriterInterceptor"
"1294splitHere46","20126724splitHere46","Response response = ...;<newline46mondego>response.getStringHeaders().putSingle(HttpHeaders.CONTENT_TYPE, <doubleQuotes46>text/plain<doubleQuotes46>);<newline46mondego>T resp = response.readEntity(respType);<newline46mondego>"
"1295splitHere46","20126969splitHere46","DateTime dt = new DateTime()<newline46mondego>    .withYear(year)<newline46mondego>    .withWeekOfWeekyear(weekOfYear)<newline46mondego>    .withDayOfWeek(weekDay);<newline46mondego>DateTimeFormatter dateTimeFormatter = DateTimeFormat.forPattern(<doubleQuotes46>yyMMdd<doubleQuotes46>);<newline46mondego>System.out.println(dateTimeFormatter.print(dt));<newline46mondego>"
"1296splitHere46","20127051splitHere46","org.springframework.scheduling.annotation.AsyncAnnotationBeanPostProcessor"
"1297splitHere46","20127051splitHere46","@Async"
"1298splitHere46","20127051splitHere46","org.springframework.scheduling.annotation.ScheduledAnnotationBeanPostProcessor"
"1299splitHere46","20127051splitHere46","@Scheduled"
"1300splitHere46","20127051splitHere46","ScheduledAnnotationBeanPostProcessor"
"1301splitHere46","20127078splitHere46","int km = (int) Math.round(miles * 1.609344D);<newline46mondego>"
"1302splitHere46","20127293splitHere46","java MostFrequent 1 2 3 4 5 6 7 8 9<newline46mondego>"
"1303splitHere46","20127347splitHere46","Scanner.nextInt()"
"1304splitHere46","20127347splitHere46","Scanner.nextLine()"
"1305splitHere46","20127347splitHere46","Scanner"
"1306splitHere46","20127347splitHere46","int"
"1307splitHere46","20127347splitHere46","Scanner.nextLine()"
"1308splitHere46","20127347splitHere46","nextInt()"
"1309splitHere46","20127347splitHere46","input.nextLine()"
"1310splitHere46","20127347splitHere46","int servings = input.nextInt();<newline46mondego>input.nextLine(); //this is the empty remainder of the line<newline46mondego>"
"1311splitHere46","20127432splitHere46","try"
"1312splitHere46","20127432splitHere46","catch"
"1313splitHere46","20127432splitHere46","if"
"1314splitHere46","20127432splitHere46","else"
"1315splitHere46","20127432splitHere46","try"
"1316splitHere46","20127432splitHere46","try"
"1317splitHere46","20127432splitHere46","if"
"1318splitHere46","20127432splitHere46","else"
"1319splitHere46","20127432splitHere46","try"
"1320splitHere46","20127432splitHere46","catch"
"1321splitHere46","20127432splitHere46","return"
"1322splitHere46","20127611splitHere46","2147483648"
"1323splitHere46","20127611splitHere46","Integer.MAX_VALUE"
"1324splitHere46","20127611splitHere46","Integer.parseInt"
"1325splitHere46","20127611splitHere46","ffffffff"
"1326splitHere46","20127611splitHere46","80000000"
"1327splitHere46","20127611splitHere46","int"
"1328splitHere46","20127611splitHere46","Scanner.nextInt(int radix)"
"1329splitHere46","20127611splitHere46","int"
"1330splitHere46","20127611splitHere46","Integer.parseInt"
"1331splitHere46","20127611splitHere46","Integer.parseInt"
"1332splitHere46","20127611splitHere46","NumberFormatException"
"1333splitHere46","20127611splitHere46","int"
"1334splitHere46","20127611splitHere46","-1"
"1335splitHere46","20127611splitHere46","-80000000"
"1336splitHere46","20127746splitHere46","getResourceAsStream"
"1337splitHere46","20127746splitHere46","FileInputStream"
"1338splitHere46","20127746splitHere46","Properties props = new Properties();<newline46mondego>FileInputStream in = new FileInputStream(<doubleQuotes46>C:\\someprops.properties<doubleQuotes46>);<newline46mondego>try {<newline46mondego>  props.load(in);<newline46mondego>} finally {<newline46mondego>  in.close();<newline46mondego>}<newline46mondego>"
"1339splitHere46","20127746splitHere46","FileInputStream"
"1340splitHere46","20127746splitHere46","BufferedInputStream"
"1341splitHere46","20127804splitHere46",">>>"
"1342splitHere46","20127804splitHere46","a"
"1343splitHere46","20127804splitHere46","111100"
"1344splitHere46","20127804splitHere46","1111"
"1345splitHere46","20127871splitHere46","import java.awt.Color;<newline46mondego><newline46mondego>import javax.swing.JFrame;<newline46mondego>import javax.swing.JPanel;<newline46mondego>import javax.swing.JSplitPane;<newline46mondego><newline46mondego>public class SplitPane extends JFrame {<newline46mondego><newline46mondego>    private JPanel p1 = new JPanel(), p2 = new JPanel();<newline46mondego>    private JSplitPane jsp;<newline46mondego>    public SplitPane() {<newline46mondego>        super(<doubleQuotes46>SplitPane example<doubleQuotes46>);<newline46mondego>        setDefaultCloseOperation(EXIT_ON_CLOSE);<newline46mondego><newline46mondego>        p1.setBackground(Color.orange);<newline46mondego><newline46mondego>        p2.setBackground(Color.green);<newline46mondego><newline46mondego>        jsp = new JSplitPane(JSplitPane.HORIZONTAL_SPLIT, true, p1, p2);<newline46mondego>        jsp.setDividerLocation(getWidth() / 2);<newline46mondego>        setContentPane(jsp);<newline46mondego><newline46mondego>        setSize(300, 300);<newline46mondego><newline46mondego>        setLocationRelativeTo(null);<newline46mondego><newline46mondego>        setVisible(true);<newline46mondego><newline46mondego>    }<newline46mondego><newline46mondego>    public static void main(String[] args) {<newline46mondego>        new SplitPane();<newline46mondego>    }<newline46mondego><newline46mondego>}<newline46mondego>"
"1346splitHere46","20127987splitHere46","User"
"1347splitHere46","20127987splitHere46","College"
"1348splitHere46","20127987splitHere46","Main"
"1349splitHere46","20127987splitHere46","JSON"
"1350splitHere46","20128083splitHere46","<plugin><newline46mondego><newline46mondego>  <groupId>org.apache.maven.plugins</groupId><newline46mondego>  <artifactId>maven-antrun-plugin</artifactId><newline46mondego>  <version>1.7</version><newline46mondego><newline46mondego>  <dependencies><newline46mondego><newline46mondego>    <dependency><newline46mondego>      <groupId>org.apache.ant</groupId><newline46mondego>      <artifactId>ant-junit</artifactId><newline46mondego>      <version>1.8.4</version><newline46mondego>    </dependency><newline46mondego><newline46mondego>  </dependencies><newline46mondego><newline46mondego>  <executions><newline46mondego><newline46mondego>    <execution><newline46mondego><newline46mondego>      <id>test</id><newline46mondego>      <phase>test</phase><newline46mondego><newline46mondego>      <configuration><newline46mondego>        <target><newline46mondego><newline46mondego>          <property name=<doubleQuotes46>reports.tests<doubleQuotes46> value=<doubleQuotes46>${basedir}/target/ant-test-reports<doubleQuotes46>/><newline46mondego>          <property name=<doubleQuotes46>compile.classpath<doubleQuotes46> refid=<doubleQuotes46>maven.compile.classpath<doubleQuotes46>/><newline46mondego>          <property name=<doubleQuotes46>test.classpath<doubleQuotes46> refid=<doubleQuotes46>maven.test.classpath<doubleQuotes46>/><newline46mondego><newline46mondego>          <mkdir dir=<doubleQuotes46>${reports.tests}<doubleQuotes46>/><newline46mondego><newline46mondego>          <junit printsummary=<doubleQuotes46>yes<doubleQuotes46> haltonfailure=<doubleQuotes46>yes<doubleQuotes46>><newline46mondego><newline46mondego>            <classpath><newline46mondego>              <pathelement path=<doubleQuotes46>${compile.classpath}<doubleQuotes46>/><newline46mondego>              <pathelement path=<doubleQuotes46>${test.classpath}<doubleQuotes46>/><newline46mondego>            </classpath><newline46mondego><newline46mondego>            <formatter type=<doubleQuotes46>plain<doubleQuotes46>/><newline46mondego><newline46mondego>            <batchtest fork=<doubleQuotes46>yes<doubleQuotes46> todir=<doubleQuotes46>${reports.tests}<doubleQuotes46>><newline46mondego><newline46mondego>              <fileset dir=<doubleQuotes46>${basedir}/src/test/java<doubleQuotes46>><newline46mondego>                <include name=<doubleQuotes46>**/*Test.java<doubleQuotes46>/><newline46mondego>              </fileset><newline46mondego><newline46mondego>            </batchtest><newline46mondego><newline46mondego>          </junit><newline46mondego><newline46mondego>        </target><newline46mondego><newline46mondego>      </configuration><newline46mondego><newline46mondego>      <goals><newline46mondego>        <goal>run</goal><newline46mondego>      </goals><newline46mondego><newline46mondego>    </execution><newline46mondego><newline46mondego>  </executions><newline46mondego><newline46mondego></plugin><newline46mondego>"
"1351splitHere46","20128083splitHere46","<plugin><newline46mondego><newline46mondego>  <groupId>org.apache.maven.plugins</groupId><newline46mondego>  <artifactId>maven-surefire-plugin</artifactId><newline46mondego>  <version>2.16</version><newline46mondego><newline46mondego>  <configuration><newline46mondego>    <skipTests>true</skipTests><newline46mondego>  </configuration><newline46mondego><newline46mondego></plugin><newline46mondego>"
"1352splitHere46","20128221splitHere46","public static void main(String[] args) {<newline46mondego>    Map<Integer, Set<String>> levelSet = new HashMap();<newline46mondego>    //Your code goes here to get the level and word<newline46mondego>    //<newline46mondego>    String word=<doubleQuotes46><doubleQuotes46>;<newline46mondego>    int level=0;<newline46mondego>    addStringToLevel(levelSet,word,level);<newline46mondego><newline46mondego>    }<newline46mondego><newline46mondego>    private static void addStringToLevel(Map<Integer, Set<String>> levelSet,<newline46mondego>            String word, int level) {<newline46mondego>        if(levelSet.get(level) == null)<newline46mondego>        {<newline46mondego>            // this means this is the first string added for this level<newline46mondego>            // so create a container to hold the object<newline46mondego>            levelSet.put(level, new HashSet()); <newline46mondego>        }<newline46mondego><newline46mondego>        Set<String> wordContainer = levelSet.get(level);<newline46mondego>        wordContainer.add(word);<newline46mondego>    }<newline46mondego><newline46mondego>    private static String getStringFromLevel(Map<Integer, Set<String>> levelSet,<newline46mondego>            int level) {<newline46mondego>        if(levelSet.get(level) == null)<newline46mondego>        {<newline46mondego>            return null;<newline46mondego>        }<newline46mondego><newline46mondego>        Set<String> wordContainer = levelSet.get(level);<newline46mondego>        return <doubleQuotes46><doubleQuotes46>;// return a random string from wordContainer`<newline46mondego>    }<newline46mondego>"
"1353splitHere46","20128307splitHere46","return"
"1354splitHere46","20128307splitHere46","assert"
"1355splitHere46","20128336splitHere46","bindFactory(FooFactory.class)<newline46mondego>       .to(FooInterface.class);<newline46mondego>"
"1356splitHere46","20128336splitHere46","private static class FooFactory() implements Factory<FooInterface> {<newline46mondego>    @Override<newline46mondego>    public void dispose(FooInterface foo) {<newline46mondego>           // meh<newline46mondego>    }<newline46mondego><newline46mondego>    @Override<newline46mondego>    public FooInterface provide() {<newline46mondego>      return SomeFactory.getInstance();<newline46mondego>    }<newline46mondego> }<newline46mondego>"
"1357splitHere46","20128418splitHere46","onClick()"
"1358splitHere46","20128418splitHere46","clickListener"
"1359splitHere46","20128525splitHere46","s1.append(<doubleQuotes46>ration<doubleQuotes46>);<newline46mondego>"
"1360splitHere46","20128569splitHere46","XmlMapper"
"1361splitHere46","20128569splitHere46","NullSerializer"
"1362splitHere46","20128569splitHere46","class NullSerializer extends JsonSerializer<Object> {<newline46mondego><newline46mondego>    @Override<newline46mondego>    public void serialize(Object value, JsonGenerator jgen, SerializerProvider provider) throws IOException, JsonProcessingException {<newline46mondego>        jgen.writeString(<doubleQuotes46><doubleQuotes46>);<newline46mondego>    }<newline46mondego>}<newline46mondego>"
"1363splitHere46","20128569splitHere46","XmlSerializerProvider provider = new XmlSerializerProvider(new XmlRootNameLookup());<newline46mondego>provider.setNullValueSerializer(new NullSerializer());<newline46mondego><newline46mondego>XmlMapper xmlMapper = new XmlMapper();<newline46mondego>xmlMapper.setSerializerProvider(provider);<newline46mondego><newline46mondego>System.out.println(xmlMapper.writeValueAsString(new Entity()));<newline46mondego>"
"1364splitHere46","20128569splitHere46","<Entity xmlns=<doubleQuotes46><doubleQuotes46>><field></field></Entity><newline46mondego>"
"1365splitHere46","20128591splitHere46","S[i]"
"1366splitHere46","20128591splitHere46","X[i]"
"1367splitHere46","20128591splitHere46","X[3]"
"1368splitHere46","20128591splitHere46","S[3]"
"1369splitHere46","20128591splitHere46","S[3]"
"1370splitHere46","20128591splitHere46","X[j]"
"1371splitHere46","20128591splitHere46","X[i]"
"1372splitHere46","20128591splitHere46","X[j]"
"1373splitHere46","20128591splitHere46","X[i]"
"1374splitHere46","20128591splitHere46","X[0]"
"1375splitHere46","20128591splitHere46","X[1]"
"1376splitHere46","20128591splitHere46","X[2]"
"1377splitHere46","20128591splitHere46","X[3]"
"1378splitHere46","20128591splitHere46","X[3]"
"1379splitHere46","20128606splitHere46","baseAdapter"
"1380splitHere46","20128606splitHere46","editText"
"1381splitHere46","20128606splitHere46","listView"
"1382splitHere46","20128606splitHere46","EditText"
"1383splitHere46","20128606splitHere46","getItem(int i)"
"1384splitHere46","20128606splitHere46","onItemClick"
"1385splitHere46","20128606splitHere46","public class IndexPageActivity extends Activity implements OnItemClickListener{ <newline46mondego>ListView listView;<newline46mondego>EditText editTextB;<newline46mondego>PagesAdapter adapter1;<newline46mondego><newline46mondego>@Override<newline46mondego>    protected void onCreate(Bundle savedInstanceState) {<newline46mondego>        // TODO Auto-generated method stub<newline46mondego>        super.onCreate(savedInstanceState);<newline46mondego>         setContentView(R.layout.activity_main);<newline46mondego>            listView = (ListView) findViewById(R.id.pageList);<newline46mondego>            editTextB = (EditText) findViewById(R.id.searchB);<newline46mondego>            adapter1 = new PagesAdapter(this);<newline46mondego>            listView.setAdapter(adapter1);<newline46mondego>            adapter1.notifyDataSetChanged();<newline46mondego>            listView.setOnItemClickListener(this);<newline46mondego><newline46mondego>            editTextB.addTextChangedListener(new TextWatcher() {<newline46mondego><newline46mondego>                @Override<newline46mondego>                public void onTextChanged(CharSequence cs, int arg1, int arg2,<newline46mondego>                        int arg3) {<newline46mondego>                    // When user changed the Text<newline46mondego>                    IndexPageActivity.this.adapter1.getFilter().filter(cs.toString());<newline46mondego>                    adapter1.notifyDataSetChanged();<newline46mondego>                }<newline46mondego><newline46mondego>                @Override<newline46mondego>                public void beforeTextChanged(CharSequence arg0, int arg1,<newline46mondego>                        int arg2, int arg3) {<newline46mondego>                    // TODO Auto-generated method stub<newline46mondego><newline46mondego>                }<newline46mondego><newline46mondego>                @Override<newline46mondego>                public void afterTextChanged(Editable arg0) {<newline46mondego>                    // TODO Auto-generated method stub<newline46mondego>                }<newline46mondego>            });<newline46mondego>    }<newline46mondego><newline46mondego><newline46mondego>@Override<newline46mondego>public void onItemClick(AdapterView<?> arg0, View v, int position, long arg3) {<newline46mondego>    // TODO Auto-generated method stub<newline46mondego>    Intent i;<newline46mondego>    String name = adapter1.getItem(position);<newline46mondego>            Log.d(<doubleQuotes46>id<doubleQuotes46>, name);<newline46mondego>    if (name.equals(<doubleQuotes46>Item1<doubleQuotes46>))<newline46mondego>    {<newline46mondego>        i = new Intent(this, anActivity.class);<newline46mondego>        startActivity(i);<newline46mondego>    }<newline46mondego>    else if (name.equals(<doubleQuotes46>Item2<doubleQuotes46>))<newline46mondego>    {<newline46mondego>        i = new Intent(this, anActivity2.class);<newline46mondego>        startActivity(i);<newline46mondego>    }<newline46mondego>}<newline46mondego>}<newline46mondego><newline46mondego><newline46mondego>class SingleRow {<newline46mondego>String pagedata;<newline46mondego>SingleRow(String pagedata){<newline46mondego>    this.pagedata=pagedata;<newline46mondego>}<newline46mondego>}<newline46mondego>class PagesAdapter extends BaseAdapter implements Filterable{<newline46mondego>ArrayList<String> pagelist;<newline46mondego>List<String> arrayList;<newline46mondego>Context context;<newline46mondego>String [] pagedatas;<newline46mondego><newline46mondego>PagesAdapter(Context c){<newline46mondego>    context=c;<newline46mondego>    pagelist = new ArrayList<String>();<newline46mondego>    Resources res = c.getResources();<newline46mondego>    pagedatas = res.getStringArray(R.array.pages_data);<newline46mondego>    for (int i=0;i<463;i++){<newline46mondego>        pagelist.add(pagedatas[i]);<newline46mondego>    }<newline46mondego>}<newline46mondego>@Override<newline46mondego>public int getCount() {<newline46mondego>    // TODO Auto-generated method stub<newline46mondego>    return pagelist.size();<newline46mondego>}<newline46mondego><newline46mondego>@Override<newline46mondego>public String getItem(int i) {<newline46mondego>    // TODO Auto-generated method stub<newline46mondego>    return pagelist.get(i);<newline46mondego>}<newline46mondego><newline46mondego>@Override<newline46mondego>public long getItemId(int i) {<newline46mondego>    // TODO Auto-generated method stub<newline46mondego>    return i;<newline46mondego>}<newline46mondego><newline46mondego><newline46mondego>@Override<newline46mondego>public View getView(int i, View view, ViewGroup viewG) {<newline46mondego>    // TODO Auto-generated method stub<newline46mondego>    LayoutInflater inflater=(LayoutInflater)             context.getSystemService(Context.LAYOUT_INFLATER_SERVICE);<newline46mondego>    View row=inflater.inflate(R.layout.single_row,viewG,false);<newline46mondego>    TextView pagetitle = (TextView) row.findViewById(R.id.textViewRow);<newline46mondego><newline46mondego>    String temp=pagelist.get(i);<newline46mondego><newline46mondego>    pagetitle.setText(temp);<newline46mondego>    return row;<newline46mondego>}<newline46mondego><newline46mondego>public class filter_here extends Filter{<newline46mondego><newline46mondego>    @Override<newline46mondego>    protected FilterResults performFiltering(CharSequence constraint) {<newline46mondego>        // TODO Auto-generated method stub<newline46mondego><newline46mondego>        FilterResults Result = new FilterResults();<newline46mondego>        // if constraint is empty return the original names<newline46mondego>        if(constraint.length() == 0 ){<newline46mondego>            Result.values = pagelist;<newline46mondego>            Result.count = pagelist.size();<newline46mondego>            return Result;<newline46mondego>        }<newline46mondego><newline46mondego>        ArrayList<String> Filtered_Names = new ArrayList<String>();<newline46mondego>        String filterString = constraint.toString().toLowerCase();<newline46mondego>        String filterableString;<newline46mondego><newline46mondego>        for(int i = 0; i<pagelist.size(); i++){<newline46mondego>            filterableString = pagelist.get(i);<newline46mondego>            if(filterableString.toLowerCase().contains(filterString)){<newline46mondego>                Filtered_Names.add(filterableString);<newline46mondego>            }<newline46mondego>        }<newline46mondego>        Result.values = Filtered_Names;<newline46mondego>        Result.count = Filtered_Names.size();<newline46mondego><newline46mondego>        return Result;<newline46mondego>    }<newline46mondego><newline46mondego>    @Override<newline46mondego>    protected void publishResults(CharSequence constraint,FilterResults results) {<newline46mondego>        // TODO Auto-generated method stub<newline46mondego>        pagelist = (ArrayList<String>) results.values;<newline46mondego>        notifyDataSetChanged();<newline46mondego>    }<newline46mondego><newline46mondego>}<newline46mondego><newline46mondego>@Override<newline46mondego>public Filter getFilter() {<newline46mondego>    // TODO Auto-generated method stub<newline46mondego><newline46mondego>    return new filter_here();<newline46mondego>}<newline46mondego>}<newline46mondego>"
"1386splitHere46","20128648splitHere46","private void saveNode(Node n){<newline46mondego>    FileOutputStream fout = new FileOutputStream(<doubleQuotes46>file.txt<doubleQuotes46>);<newline46mondego>    ObjectOutputStream oos = new ObjectOutputStream(fout);<newline46mondego>    oos.writeObject(n);<newline46mondego>    oos.close();<newline46mondego>}<newline46mondego><newline46mondego>private Node readNode(){<newline46mondego>   FileInputStream fin = new FileInputStream(<doubleQuotes46>file.txt<doubleQuotes46>);<newline46mondego>   ObjectInputStream ois = new ObjectInputStream(fin);<newline46mondego>   Node n = (Node)ois.readObject();<newline46mondego>   ois.close();<newline46mondego>   return n;<newline46mondego>}<newline46mondego>"
"1387splitHere46","20128750splitHere46","Animal"
"1388splitHere46","20128750splitHere46","Animal"
"1389splitHere46","20128811splitHere46","int[] iArr = new int[50];<newline46mondego>for (int i=0; i<iArr.length; i++) {<newline46mondego>  iArr[i] = (int)random(min,max);<newline46mondego>}<newline46mondego>"
"1390splitHere46","20128811splitHere46","System.out.println(<doubleQuotes46>Unsorted:<doubleQuotes46>);<newline46mondego>for(int i=0; i<iArr.length; i++) {<newline46mondego>  System.out.println(iArr[i]);<newline46mondego>}<newline46mondego>"
"1391splitHere46","20128846splitHere46","ArrayList<Card> hand = new ArrayList<Card>();<newline46mondego>"
"1392splitHere46","20128846splitHere46","List<Card> hand = new ArrayList<Card>();<newline46mondego>"
"1393splitHere46","20128846splitHere46","List<Card> hand = new ArrayList<>();<newline46mondego>"
"1394splitHere46","20128846splitHere46","LinkedList<T>"
"1395splitHere46","20128937splitHere46","Runtime r = Runtime.getRuntime();<newline46mondego>Process p = r.exec(yourcmd);<newline46mondego>"
"1396splitHere46","20129020splitHere46","Accordion"
"1397splitHere46","20129119splitHere46",".png"
"1398splitHere46","20129122splitHere46","ROOT.war"
"1399splitHere46","20129122splitHere46","mvn jetty:run"
"1400splitHere46","20129122splitHere46","contextPath"
"1401splitHere46","20129122splitHere46","<plugin><newline46mondego>    <groupId>org.mortbay.jetty</groupId><newline46mondego>    <artifactId>maven-jetty-plugin</artifactId><newline46mondego>    <version>6.1.25</version><newline46mondego>    <configuration><newline46mondego>        <contextPath>/</contextPath><newline46mondego>        <scanIntervalSeconds>5</scanIntervalSeconds><newline46mondego>        <connectors><newline46mondego>            <connector implementation=<doubleQuotes46>org.mortbay.jetty.nio.SelectChannelConnector<doubleQuotes46>><newline46mondego>                <port>8081</port><newline46mondego>                <maxIdleTime>60000</maxIdleTime><newline46mondego>            </connector><newline46mondego>        </connectors><newline46mondego>    </configuration><newline46mondego></plugin><newline46mondego>"
"1402splitHere46","20129122splitHere46","ROOT.war"
"1403splitHere46","20129122splitHere46","webapps"
"1404splitHere46","20129122splitHere46","webapps"
"1405splitHere46","20129122splitHere46","http[s]://<host>[:<port>]/"
"1406splitHere46","20129122splitHere46","finalName"
"1407splitHere46","20129122splitHere46","<build><newline46mondego>    <finalName>ROOT</finalName><newline46mondego><newline46mondego>    [...]<newline46mondego></build><newline46mondego>"
"1408splitHere46","20129175splitHere46","ServiceHolder"
"1409splitHere46","20129175splitHere46","<reference id=...>"
"1410splitHere46","20129175splitHere46","ServiceHolder"
"1411splitHere46","20129180splitHere46","panel.repaint();<newline46mondego>panel.revalidate();<newline46mondego>"
"1412splitHere46","20129180splitHere46","PlayGame();"
"1413splitHere46","20129201splitHere46","A"
"1414splitHere46","20129201splitHere46","B"
"1415splitHere46","20129201splitHere46","B"
"1416splitHere46","20129201splitHere46","A"
"1417splitHere46","20129201splitHere46","B"
"1418splitHere46","20129201splitHere46","A"
"1419splitHere46","20129201splitHere46","A"
"1420splitHere46","20129201splitHere46","B"
"1421splitHere46","20129201splitHere46","A"
"1422splitHere46","20129201splitHere46","B"
"1423splitHere46","20129201splitHere46","Activity"
"1424splitHere46","20129201splitHere46","A"
"1425splitHere46","20129201splitHere46","onPause()"
"1426splitHere46","20129201splitHere46","B"
"1427splitHere46","20129201splitHere46","onResume()"
"1428splitHere46","20129201splitHere46","A"
"1429splitHere46","20129201splitHere46","onPause()"
"1430splitHere46","20129201splitHere46","onStop()"
"1431splitHere46","20129201splitHere46","B"
"1432splitHere46","20129201splitHere46","onStart()"
"1433splitHere46","20129201splitHere46","onResume()"
"1434splitHere46","20129201splitHere46","A"
"1435splitHere46","20129201splitHere46","onCreate()"
"1436splitHere46","20129201splitHere46","onStart()"
"1437splitHere46","20129201splitHere46","onResume()"
"1438splitHere46","20129244splitHere46","public abstract class Controller<T extends View> {<newline46mondego>    protected T view;<newline46mondego><newline46mondego>    public Controller(T v) {<newline46mondego>        view = v;<newline46mondego>    }<newline46mondego><newline46mondego>    protected void render() {<newline46mondego>        data();<newline46mondego>        view.setData(data);<newline46mondego>        view.render();<newline46mondego>        listeners();<newline46mondego>        if (display)<newline46mondego>            view.open();<newline46mondego>    }<newline46mondego>    protected void data() {}<newline46mondego><newline46mondego>    protected void listeners() {}<newline46mondego>}<newline46mondego><newline46mondego>public class AboutController extends Controller<AboutView> {<newline46mondego><newline46mondego>    public AboutController() {<newline46mondego>        super(new AboutView());<newline46mondego>        super.render();<newline46mondego>    }<newline46mondego><newline46mondego>    public void doSomething() {<newline46mondego>        view.getAboutStuff();<newline46mondego>    }<newline46mondego>}<newline46mondego>"
"1439splitHere46","20129261splitHere46","public static void main (String[] args) {<newline46mondego>    JFileChooser chooser = new JFileChooser();<newline46mondego>    FileNameExtensionFilter filter = new FileNameExtensionFilter(<newline46mondego>        <doubleQuotes46>CSV files<doubleQuotes46>, <doubleQuotes46>csv<doubleQuotes46>);<newline46mondego>    chooser.setFileFilter(filter);<newline46mondego>    int returnVal = chooser.showOpenDialog(chooser);<newline46mondego>    if (returnVal == JFileChooser.APPROVE_OPTION) {<newline46mondego>        File file = chooser.getSelectedFile();<newline46mondego>        System.out.println(file.getAbsolutePath());<newline46mondego>    }<newline46mondego>}<newline46mondego>"
"1440splitHere46","20129283splitHere46","arr[i]"
"1441splitHere46","20129283splitHere46","char"
"1442splitHere46","20129283splitHere46","char"
"1443splitHere46","20129283splitHere46","replace"
"1444splitHere46","20129283splitHere46","arr[i]=a;"
"1445splitHere46","20129465splitHere46","while ((lines = br.readLine()) != null) {<newline46mondego>   String myarray[] = lines.split(<doubleQuotes46>,<doubleQuotes46>);<newline46mondego>   System.out.format(<doubleQuotes46>%s - %s\n<doubleQuotes46>, myarray[1],myarray[0]);<newline46mondego>}<newline46mondego>"
"1446splitHere46","20129572splitHere46","JPanel"
"1447splitHere46","20129572splitHere46","ActionListener"
"1448splitHere46","20129572splitHere46","JCheckBox"
"1449splitHere46","20129572splitHere46","final JCheckBox check1 = new JCheckBox(<doubleQuotes46>Check1<doubleQuotes46>);<newline46mondego>final JCheckBox check2 = new JCheckBox(<doubleQuotes46>Check2<doubleQuotes46>);<newline46mondego>final JCheckBox check3 = new JCheckBox(<doubleQuotes46>Check3<doubleQuotes46>);<newline46mondego><newline46mondego>final JButton buttonToBeEnabled = new JButton(<doubleQuotes46>Submit<doubleQuotes46>);<newline46mondego>buttonToBeEnabled.setEnabled(false);<newline46mondego><newline46mondego>ActionListener actionListener = new ActionListener() {<newline46mondego>    @Override<newline46mondego>    public void actionPerformed(ActionEvent e) {<newline46mondego>        boolean enable = check1.isSelected() && check3.isSelected();<newline46mondego>        buttonToBeEnabled.setEnabled(enable);<newline46mondego>    }<newline46mondego>};<newline46mondego><newline46mondego>check1.addActionListener(actionListener);<newline46mondego>check2.addActionListener(actionListener);<newline46mondego>check3.addActionListener(actionListener);<newline46mondego>"
"1450splitHere46","20129572splitHere46","check1"
"1451splitHere46","20129572splitHere46","check3"
"1452splitHere46","20129696splitHere46","ObjectMapper mapper = new ObjectMapper();<newline46mondego>Thing impl = mapper.readValue(username, Thing.class);<newline46mondego>"
"1453splitHere46","20129696splitHere46","username"
"1454splitHere46","20129696splitHere46","Thing"
"1455splitHere46","20129696splitHere46","Thing"
"1456splitHere46","20129696splitHere46","com.fasterxml.jackson.annotation.JsonManagedReference"
"1457splitHere46","20129761splitHere46","char"
"1458splitHere46","20129791splitHere46","// PrintAndEmpty 'this' stack.<newline46mondego>public void PrintAndEmpty()<newline46mondego>{<newline46mondego>   // The condition to check - e.g. 'this' stack.<newline46mondego>   while(!this.empty()) {<newline46mondego>       // Pop from the stack - e.g. 'this' stack.<newline46mondego>       System.out.println(this.pop().getName());<newline46mondego>   }<newline46mondego>}<newline46mondego>"
"1459splitHere46","20129842splitHere46","import java.util.ArrayList;<newline46mondego><newline46mondego><newline46mondego>public class Comment {<newline46mondego><newline46mondego><newline46mondego>    public static void main(String[] args) {<newline46mondego>        String comment = <doubleQuotes46><doubleQuotes46>;<newline46mondego>        //This will hold the comments after split<newline46mondego>        ArrayList<String> splittedComments = new ArrayList<String>();<newline46mondego>        while(comment.length() > 500)<newline46mondego>        {<newline46mondego>            String splitCOmment = comment.substring(0,500);<newline46mondego><newline46mondego>            int lastIndexOfWhiteSapce = splitCOmment.lastIndexOf(<doubleQuotes46> <doubleQuotes46>);<newline46mondego>            splitCOmment = splitCOmment.substring(0,lastIndexOfWhiteSapce);<newline46mondego>            splittedComments.add(splitCOmment);<newline46mondego>            //trim off the taken comment and process again<newline46mondego>            comment = comment.substring(lastIndexOfWhiteSapce).trim();<newline46mondego>        }<newline46mondego>        splittedComments.add(comment);<newline46mondego>    }<newline46mondego>}<newline46mondego>"
"1460splitHere46","20129960splitHere46","try {<newline46mondego>        int i = 0;<newline46mondego>        if (i == 1) {<newline46mondego>            throw new IOException(<doubleQuotes46>wont be thrown<doubleQuotes46>);<newline46mondego>        }<newline46mondego>        throw new RuntimeException(<doubleQuotes46>boom<doubleQuotes46>);<newline46mondego>    } catch(IOException e) {<newline46mondego>        System.out.println(<doubleQuotes46>Got an exception<doubleQuotes46>);<newline46mondego>    } finally {<newline46mondego>        return <doubleQuotes46>a result<doubleQuotes46>;<newline46mondego>    }<newline46mondego>"
"1461splitHere46","20129960splitHere46","...<newline46mondego>    } catch(IOException e) {<newline46mondego>        System.out.println(<doubleQuotes46>Got an exception<doubleQuotes46>);<newline46mondego>    } catch(Throwable te) {<newline46mondego>        System.out.println(<doubleQuotes46>Got another exception<doubleQuotes46>);<newline46mondego>    } finally {<newline46mondego>    ...<newline46mondego>"
"1462splitHere46","20129962splitHere46","jar"
"1463splitHere46","20129962splitHere46","zip"
"1464splitHere46","20129962splitHere46","dos2unix"
"1465splitHere46","20129963splitHere46","<!-- Hibernate SessionFactory --><newline46mondego>    <bean id=<doubleQuotes46>sessionFactory<doubleQuotes46> class=<doubleQuotes46>org.springframework.orm.hibernate4.LocalSessionFactoryBean<doubleQuotes46>><newline46mondego>        <property name=<doubleQuotes46>dataSource<doubleQuotes46> ref=<doubleQuotes46>myDataSource<doubleQuotes46>></property><newline46mondego>        <property name=<doubleQuotes46>annotatedClasses<doubleQuotes46>><newline46mondego>            <list><newline46mondego>                <value>com...</value><newline46mondego>                all the annotated classes come here<newline46mondego>            </list><newline46mondego>        </property><newline46mondego>        <property name=<doubleQuotes46>hibernateProperties<doubleQuotes46>><newline46mondego>        <props><newline46mondego>            <prop key=<doubleQuotes46>hibernate.dialect<doubleQuotes46>>${jdbc.dialect}</prop><newline46mondego>            <prop key=<doubleQuotes46>hibernate.show_sql<doubleQuotes46>>true</prop><newline46mondego>            <prop key=<doubleQuotes46>hibernate.connection.SetBigStringTryClob<doubleQuotes46>>true</prop><newline46mondego>            <prop key=<doubleQuotes46>hibernate.jdbc.batch_size<doubleQuotes46>>0</prop><newline46mondego>        </props><newline46mondego>        </property><newline46mondego>    </bean><newline46mondego>"
"1466splitHere46","20130003splitHere46","~/build/classes"
"1467splitHere46","20130003splitHere46","/Library/Java/JavaVirtualMachines/jdk1.7.0_45.jdk/Contents/Home/jre/bin/rmiregistry"
"1468splitHere46","20130131splitHere46","Iterable"
"1469splitHere46","20130131splitHere46","Stream"
"1470splitHere46","20130131splitHere46","Iterator"
"1471splitHere46","20130131splitHere46","Stream"
"1472splitHere46","20130131splitHere46","Iterable"
"1473splitHere46","20130131splitHere46","Iterable"
"1474splitHere46","20130131splitHere46","Exception"
"1475splitHere46","20130131splitHere46","for (element : iterable)"
"1476splitHere46","20130167splitHere46","timeout<newline46mondego>    Connection timeout / negotiated heartbeat interval, in seconds.<newline46mondego>"
"1477splitHere46","20130167splitHere46","ConnectionFactory.setRequestedHeartbeat(int seconds)"
"1478splitHere46","20130273splitHere46","System.exit(0);"
"1479splitHere46","20130273splitHere46","int i , integer1<newline46mondego>while(i<10){<newline46mondego>    codes... + an integer1++<newline46mondego>}<newline46mondego>if (integer1>10){<newline46mondego>    System.exit(0);<newline46mondego>}<newline46mondego>else{<newline46mondego>//don't do anything<newline46mondego>}<newline46mondego>"
"1480splitHere46","20130445splitHere46","getSurfaceGravity"
"1481splitHere46","20130445splitHere46","double g = (universalConstant * mass)/Math.pow((1000 * 1.609344 * diameter / 2), 2);<newline46mondego>"
"1482splitHere46","20130445splitHere46","getSurfaceGravity"
"1483splitHere46","20130445splitHere46","return g / 9.80665;<newline46mondego>"
"1484splitHere46","20130469splitHere46","onLocationChanged()"
"1485splitHere46","20130481splitHere46","ALTER TABLE `table_name`  AUTO_INCREMENT = 1<newline46mondego>"
"1486splitHere46","20130700splitHere46","<form:form method=<doubleQuotes46>POST<doubleQuotes46> action=<doubleQuotes46>${requestContext.pathToServlet}/add<doubleQuotes46> commandName=<doubleQuotes46>user<doubleQuotes46>><newline46mondego>"
"1487splitHere46","20130736splitHere46","final"
"1488splitHere46","20130736splitHere46","private final Object lock = new Object();<newline46mondego>"
"1489splitHere46","20130886splitHere46","@XmlSchema"
"1490splitHere46","20130886splitHere46","@XmlSchema(<newline46mondego>        elementFormDefault = XmlNsForm.QUALIFIED,<newline46mondego>        namespace = <doubleQuotes46>http://example.com<doubleQuotes46>)<newline46mondego>package forum20127191;<newline46mondego><newline46mondego>import javax.xml.bind.annotation.*;<newline46mondego>"
"1491splitHere46","20130886splitHere46","package forum20127191;<newline46mondego><newline46mondego>import javax.xml.bind.annotation.*;<newline46mondego><newline46mondego>@XmlRootElement(name=<doubleQuotes46>RootElement<doubleQuotes46>)<newline46mondego>public class RootElement {<newline46mondego><newline46mondego>    private String foo;<newline46mondego><newline46mondego>    public String getFoo() {<newline46mondego>        return foo;<newline46mondego>    }<newline46mondego><newline46mondego>    public void setFoo(String foo) {<newline46mondego>        this.foo = foo;<newline46mondego>    }<newline46mondego><newline46mondego>}<newline46mondego>"
"1492splitHere46","20130886splitHere46","@XmlSchema"
"1493splitHere46","20130886splitHere46","@XmlSchema"
"1494splitHere46","20130886splitHere46","RootElement"
"1495splitHere46","20130886splitHere46","package forum20127191;<newline46mondego><newline46mondego>import javax.xml.bind.annotation.*;<newline46mondego><newline46mondego>@XmlRootElement(name=<doubleQuotes46>RootElement<doubleQuotes46>, namespace=<doubleQuotes46>http://example.com<doubleQuotes46>)<newline46mondego>public class RootElement {<newline46mondego><newline46mondego>    private String foo;<newline46mondego><newline46mondego>    @XmlElement(namespace=<doubleQuotes46>http://example.com<doubleQuotes46>)<newline46mondego>    public String getFoo() {<newline46mondego>        return foo;<newline46mondego>    }<newline46mondego><newline46mondego>    public void setFoo(String foo) {<newline46mondego>        this.foo = foo;<newline46mondego>    }<newline46mondego><newline46mondego>}<newline46mondego>"
"1496splitHere46","20131302splitHere46","test.keys().nextElement();<newline46mondego>"
"1497splitHere46","20131302splitHere46","test.element().nextElement();<newline46mondego>"
"1498splitHere46","20131313splitHere46","if (currentapiVersion <= 16)<newline46mondego>{<newline46mondego>    Settings.System.putInt(this.getContentResolver(),Settings.System.STAY_ON_WHILE_PLUGGED_IN, BatteryManager.BATTERY_PLUGGED_USB);<newline46mondego>}<newline46mondego>else<newline46mondego>{   <newline46mondego>  Settings.Global.putInt(this.getContentResolver(),Settings.Global.STAY_ON_WHILE_PLUGGED_IN, BatteryManager.BATTERY_PLUGGED_USB);<newline46mondego>}<newline46mondego>"
"1499splitHere46","20131330splitHere46","com.example.idg2.VideoListDemoActivity<newline46mondego>"
"1500splitHere46","20131330splitHere46","Fragment"
"1501splitHere46","20131448splitHere46","http"
"1502splitHere46","20131448splitHere46","WebSecurityConfigurerAdapter"
"1503splitHere46","20131448splitHere46","WebSecurityConfigurerAdapter"
"1504splitHere46","20131448splitHere46","http.antMatchers"
"1505splitHere46","20131448splitHere46","WebSecurityConfigurerAdapter"
"1506splitHere46","20131448splitHere46","WebSecurityConfigurerAdapter"
"1507splitHere46","20131539splitHere46","ClassLoader"
"1508splitHere46","20131539splitHere46","ClassCastExceptions"
"1509splitHere46","20131539splitHere46","ClassLoader.findClass(String name)"
"1510splitHere46","20131539splitHere46","ClassNotFoundException"
"1511splitHere46","20131539splitHere46","protected Class<?> findClass(String name) throws ClassNotFoundException {<newline46mondego>   return loadClass(name);<newline46mondego>}<newline46mondego>"
"1512splitHere46","20131560splitHere46","i"
"1513splitHere46","20131560splitHere46","freq = i * Fs / N;<newline46mondego>"
"1514splitHere46","20131560splitHere46","Fs"
"1515splitHere46","20131560splitHere46","N"
"1516splitHere46","20131560splitHere46","i"
"1517splitHere46","20131560splitHere46","double freq = (double)i*(double)fs/(double)N;<newline46mondego>System.out.println(<doubleQuotes46>Frequency: <doubleQuotes46>+ Double.toString(freq) + <doubleQuotes46>Magnitude: <doubleQuotes46>+ Double.toString(mag[i]));<newline46mondego>"
"1518splitHere46","20131560splitHere46","mag"
"1519splitHere46","20131560splitHere46","phase"
"1520splitHere46","20131560splitHere46","0..N/2"
"1521splitHere46","20131620splitHere46","commands"
"1522splitHere46","20131620splitHere46","Hashtable"
"1523splitHere46","20131620splitHere46","UI = new UserInterface();<newline46mondego>"
"1524splitHere46","20131620splitHere46","IHMObserver ihm = new IHMObserver(editor);<newline46mondego>"
"1525splitHere46","20131620splitHere46","IHMObserver"
"1526splitHere46","20131620splitHere46","UserInterface"
"1527splitHere46","20131620splitHere46","UI"
"1528splitHere46","20131620splitHere46","ihm"
"1529splitHere46","20131620splitHere46","commands"
"1530splitHere46","20131620splitHere46","null"
"1531splitHere46","20131620splitHere46","new UserInterface()"
"1532splitHere46","20131620splitHere46","ihm"
"1533splitHere46","20131620splitHere46","editor = new EditorEngine();<newline46mondego>IHMObserver ihm = new IHMObserver(editor);<newline46mondego><newline46mondego>// commands creation comes here<newline46mondego><newline46mondego>ihm.setCommands(commands);<newline46mondego>editor.registerObserver(ihm);<newline46mondego>"
"1534splitHere46","20131699splitHere46","UpdatableRecord"
"1535splitHere46","20131699splitHere46","FolderProcessChecklistRecord"
"1536splitHere46","20131699splitHere46","UpdatableRecord"
"1537splitHere46","20131699splitHere46","batchDelete()"
"1538splitHere46","20131699splitHere46","Transaction.current()"
"1539splitHere46","20131699splitHere46","DSLContext"
"1540splitHere46","20131699splitHere46","DSLContext.batchDelete()"
"1541splitHere46","20131699splitHere46","batchDelete(UpdatableRecord...)"
"1542splitHere46","20131699splitHere46","batchDelete(Collection<? extends UpdatableRecord<?>>)"
"1543splitHere46","20131699splitHere46","Transaction"
"1544splitHere46","20131699splitHere46","DSLContext"
"1545splitHere46","20131771splitHere46","public static StatusTracker getInstance() {<newline46mondego>return ourInstance;<newline46mondego>}<newline46mondego>"
"1546splitHere46","20131771splitHere46","StatusTracker.getInstance()<newline46mondego>"
"1547splitHere46","20131985splitHere46","import java.io.IOException;<newline46mondego>import java.io.PrintWriter;<newline46mondego>import java.net.Socket;<newline46mondego>import java.net.UnknownHostException;<newline46mondego><newline46mondego>import android.content.Context;<newline46mondego>import android.os.AsyncTask;<newline46mondego>import android.os.Handler;<newline46mondego>import android.util.Log;<newline46mondego>import android.widget.Toast;<newline46mondego><newline46mondego>public class TcpClient {<newline46mondego><newline46mondego>private static final String TAG = TcpClient.class.getSimpleName();<newline46mondego><newline46mondego>private Socket socket;<newline46mondego>private PrintWriter out;<newline46mondego>private boolean connected;<newline46mondego><newline46mondego>public TcpClient()<newline46mondego>{<newline46mondego>    socket = null;<newline46mondego>    out = null;<newline46mondego>    connected = false;<newline46mondego>}<newline46mondego><newline46mondego><newline46mondego>public void connect(Context context, String host, int port)<newline46mondego>{<newline46mondego>    new ConnectTask(context).execute(host, String.valueOf(port));<newline46mondego>}<newline46mondego><newline46mondego>private class ConnectTask extends AsyncTask<String, Void, Void> {<newline46mondego><newline46mondego>    private Context context;<newline46mondego><newline46mondego>    public ConnectTask(Context context) {<newline46mondego>        this.context = context;<newline46mondego>    }<newline46mondego><newline46mondego>    @Override<newline46mondego>    protected void onPreExecute() {<newline46mondego>        showToast(context, <doubleQuotes46>Connecting..<doubleQuotes46>);<newline46mondego>        super.onPreExecute();<newline46mondego>    }<newline46mondego><newline46mondego>    @Override<newline46mondego>    protected void onPostExecute(Void result) {<newline46mondego>        if (connected) {<newline46mondego>            showToast(context, <doubleQuotes46>Connection successfull<doubleQuotes46>);<newline46mondego>        }           <newline46mondego>        super.onPostExecute(result);<newline46mondego>    }<newline46mondego><newline46mondego>    private String host;<newline46mondego>    private int port;<newline46mondego><newline46mondego>    @Override<newline46mondego>    protected Void doInBackground(String... params) {<newline46mondego>        try {<newline46mondego>            String host = params[0];<newline46mondego>            int port = Integer.parseInt(params[1]);<newline46mondego>            socket = new Socket(host, port);<newline46mondego>            out = new PrintWriter(socket.getOutputStream(), true);<newline46mondego>        } catch (UnknownHostException e) {<newline46mondego>            showToast(context, <doubleQuotes46>Don't know about host: <doubleQuotes46> + host + <doubleQuotes46>:<doubleQuotes46> + port);<newline46mondego>            Log.e(TAG, e.getMessage());<newline46mondego>        } catch (IOException e) {<newline46mondego>            showToast(context, <doubleQuotes46>Couldn't get I/O for the connection to: <doubleQuotes46> + host + <doubleQuotes46>:<doubleQuotes46> + port);<newline46mondego>            Log.e(TAG, e.getMessage());<newline46mondego>        }<newline46mondego>        connected = true;<newline46mondego>        return null;<newline46mondego>    }<newline46mondego><newline46mondego><newline46mondego>}<newline46mondego><newline46mondego>public void disconnect(Context context)<newline46mondego>{<newline46mondego>    if ( connected )<newline46mondego>    {<newline46mondego>        try {<newline46mondego>            out.close();<newline46mondego>            socket.close();<newline46mondego>            connected = false;<newline46mondego>        } catch (IOException e) {<newline46mondego>            showToast(context, <doubleQuotes46>Couldn't get I/O for the connection<doubleQuotes46>);<newline46mondego>            Log.e(TAG, e.getMessage());<newline46mondego>        }            <newline46mondego>    }<newline46mondego>}<newline46mondego><newline46mondego><newline46mondego>/**<newline46mondego> * Send command to a Pure Data audio engine. <newline46mondego> */<newline46mondego>public void send(String command)<newline46mondego>{<newline46mondego>    if ( connected ) out.println(command +<doubleQuotes46>;<doubleQuotes46>);   <newline46mondego>}<newline46mondego><newline46mondego>private void showToast(final Context context, final String message) {<newline46mondego>    new Handler(context.getMainLooper()).post(new Runnable() {<newline46mondego><newline46mondego>        @Override<newline46mondego>        public void run() {<newline46mondego>            Toast.makeText(context, message, Toast.LENGTH_LONG).show();<newline46mondego>        }<newline46mondego>    });<newline46mondego>}<newline46mondego>}<newline46mondego>"
"1548splitHere46","20132029splitHere46","ActionContext#getName()"
"1549splitHere46","20132029splitHere46","execute"
"1550splitHere46","20132129splitHere46","Positionsart"
"1551splitHere46","20132129splitHere46","Test"
"1552splitHere46","20132129splitHere46","xs:string"
"1553splitHere46","20132129splitHere46","xs:enumeration"
"1554splitHere46","20132129splitHere46","Positionsart"
"1555splitHere46","20132129splitHere46","Test"
"1556splitHere46","20132129splitHere46","Test"
"1557splitHere46","20132129splitHere46","<xs:enumeration value=<doubleQuotes46>0010<doubleQuotes46>/><newline46mondego>  <xs:enumeration value=<doubleQuotes46>0018<doubleQuotes46>/><newline46mondego>"
"1558splitHere46","20132363splitHere46","int[] array;<newline46mondego>array = new int[] {2, 7, 9};<newline46mondego>"
"1559splitHere46","20132387splitHere46","try {<newline46mondego>   // some stuff here<newline46mondego>   throw new QueueT();<newline46mondego>} catch (RuntimeException e) {<newline46mondego>   System.out.print(<doubleQuotes46><<<doubleQuotes46>+e+<doubleQuotes46>>><doubleQuotes46>);<newline46mondego>}<newline46mondego>"
"1560splitHere46","20132387splitHere46","catch (RuntimeException e)"
"1561splitHere46","20132387splitHere46","catch (QueueTe)"
"1562splitHere46","20132387splitHere46","try {<newline46mondego>   // some stuff here<newline46mondego>   throw new QueueT();<newline46mondego>} catch (QueueTe e) {<newline46mondego>   System.out.print(<doubleQuotes46><<<doubleQuotes46>+e+<doubleQuotes46>>><doubleQuotes46>);<newline46mondego>}<newline46mondego>"
"1563splitHere46","20132387splitHere46","QueueT"
"1564splitHere46","20132474splitHere46","private void btnCheckoutActionPerformed(java.awt.event.ActionEvent evt) {                                            <newline46mondego><newline46mondego>do<newline46mondego>    String value = JOptionPane.showInputDialog(<doubleQuotes46>Enter item price<doubleQuotes46>,<doubleQuotes46><doubleQuotes46>);<newline46mondego>    itemPrice = Double.parseDouble(value) <newline46mondego><newline46mondego>while();<newline46mondego><newline46mondego>}<newline46mondego>"
"1565splitHere46","20132486splitHere46","IsTrue"
"1566splitHere46","20132486splitHere46","IsFalse"
"1567splitHere46","20132486splitHere46","interface PersonRepository extends Repository<Person, Long> {<newline46mondego><newline46mondego>  Iterable<Person> findByActiveIsTrue();<newline46mondego>}<newline46mondego>"
"1568splitHere46","20132497splitHere46","getClasses()"
"1569splitHere46","20132497splitHere46","Class.getInterfaces()"
"1570splitHere46","20132497splitHere46","import org.junit.Test;  <newline46mondego>import static org.hamcrest.CoreMatchers.is;<newline46mondego>import static org.junit.Assert.assertThat;<newline46mondego><newline46mondego>public class GetInterfacesTest{     <newline46mondego><newline46mondego>    public interface A {}<newline46mondego>    class Aa implements A {}<newline46mondego><newline46mondego>    @Test<newline46mondego>    public void getInterfacesDoesWork(){<newline46mondego>        assertThat( <doubleQuotes46>should pass, and passes<doubleQuotes46>, Aa.class.getInterfaces(), is( new Class[]{A.class} ) );<newline46mondego>    }<newline46mondego>}<newline46mondego>"
"1571splitHere46","20132590splitHere46","java -cp classes edu.univ.Main<newline46mondego>"
"1572splitHere46","20132590splitHere46","classes"
"1573splitHere46","20132925splitHere46","NullPointerException"
"1574splitHere46","20132925splitHere46","validUsernames = theUserList.getValidUsernames();<newline46mondego>"
"1575splitHere46","20132925splitHere46","NullPointerException"
"1576splitHere46","20132925splitHere46","theUserList"
"1577splitHere46","20132925splitHere46","theUserList"
"1578splitHere46","20132925splitHere46","UserList theUserList = new UserList();<newline46mondego>"
"1579splitHere46","20132925splitHere46","if(theUserList == null) {<newline46mondego>    // do something about it<newline46mondego>}<newline46mondego>validUsernames = new ArrayList();<newline46mondego>validUsernames = theUserList.getValidUsernames();<newline46mondego>...<newline46mondego>"
"1580splitHere46","20133088splitHere46","getAll"
"1581splitHere46","20133088splitHere46","findAllByIdInList"
"1582splitHere46","20133088splitHere46","def ids = [7, 9, 5, 6, 12, 2, 10, 1, 42, 13]<newline46mondego>result = Project.getAll(ids).collect {<newline46mondego>    projectUtil.createProjectDTO(it)<newline46mondego>}<newline46mondego>"
"1583splitHere46","20133155splitHere46","List<Object> array = new ArrayList<Object>();<newline46mondego>"
"1584splitHere46","20133178splitHere46","Connection.prepareStatement()"
"1585splitHere46","20133178splitHere46","com.mysql.jdbc.PreparedStatement"
"1586splitHere46","20133178splitHere46","java.sql.PreparedStatement"
"1587splitHere46","20133178splitHere46","Connection.prepareStatement()"
"1588splitHere46","20133264splitHere46","Contact Us"
"1589splitHere46","20133264splitHere46","First DewMocracy"
"1590splitHere46","20133264splitHere46","NullPointerException"
"1591splitHere46","20133264splitHere46","contactPanel"
"1592splitHere46","20133264splitHere46","firstPanel"
"1593splitHere46","20133264splitHere46","null"
"1594splitHere46","20133264splitHere46","center"
"1595splitHere46","20133264splitHere46","actionPerformed()"
"1596splitHere46","20133264splitHere46","CardLayout"
"1597splitHere46","20133514splitHere46","LString"
"1598splitHere46","20133514splitHere46","return this;<newline46mondego>"
"1599splitHere46","20133514splitHere46","LString"
"1600splitHere46","20133514splitHere46","Node LString = new Node();<newline46mondego>"
"1601splitHere46","20133554splitHere46","Window"
"1602splitHere46","20133554splitHere46","VerticalScrollingWindow"
"1603splitHere46","20133554splitHere46","HorizontalScrollingWindow"
"1604splitHere46","20133554splitHere46","BidirectionalScrollingWindow"
"1605splitHere46","20133554splitHere46","Window"
"1606splitHere46","20133554splitHere46","VerticalScrollDecorator"
"1607splitHere46","20133554splitHere46","HorizontalScrollDecorator"
"1608splitHere46","20133612splitHere46","while (o < month.length) {<newline46mondego><newline46mondego>    if (tempChoice.equalsIgnoreCase(<doubleQuotes46>C<doubleQuotes46>)) {<newline46mondego>        System.out.printf(<doubleQuotes46>%n<doubleQuotes46>);<newline46mondego>        System.out.printf(month[o]);<newline46mondego>        System.out.printf(<doubleQuotes46>%20.2f<doubleQuotes46>, celsius[o]);<newline46mondego>        System.out.printf(<doubleQuotes46>%25.2f<doubleQuotes46>, precipitation[o]);<newline46mondego>        o++;<newline46mondego>    }<newline46mondego>}<newline46mondego>"
"1609splitHere46","20133612splitHere46","tempChoice"
"1610splitHere46","20133612splitHere46","F"
"1611splitHere46","20133612splitHere46","o"
"1612splitHere46","20133612splitHere46","for-loop"
"1613splitHere46","20133612splitHere46","for (o = 0; o < month.length; o++) {<newline46mondego><newline46mondego>    if (tempChoice.equalsIgnoreCase(<doubleQuotes46>C<doubleQuotes46>)) {<newline46mondego>        System.out.printf(<doubleQuotes46>%n<doubleQuotes46>);<newline46mondego>        System.out.printf(month[o]);<newline46mondego>        System.out.printf(<doubleQuotes46>%20.2f<doubleQuotes46>, celsius[o]);<newline46mondego>        System.out.printf(<doubleQuotes46>%25.2f<doubleQuotes46>, precipitation[o]);<newline46mondego>    }<newline46mondego><newline46mondego>}<newline46mondego>"
"1614splitHere46","20133665splitHere46","os.writeBytes(message);<newline46mondego>"
"1615splitHere46","20133665splitHere46","os.write(message.getBytes(), 0, message.getBytes().length);<newline46mondego>"
"1616splitHere46","20133665splitHere46","writeBytes"
"1617splitHere46","20133665splitHere46","String"
"1618splitHere46","20133665splitHere46","writeInt"
"1619splitHere46","20133665splitHere46","writeInt"
"1620splitHere46","20133665splitHere46","readInt"
"1621splitHere46","20133791splitHere46","new BookDAO()"
"1622splitHere46","20133791splitHere46","em"
"1623splitHere46","20133791splitHere46","em"
"1624splitHere46","20133806splitHere46","Question"
"1625splitHere46","20133806splitHere46","public abstract class Question{<newline46mondego>    // ... general question fields and methods.<newline46mondego>    String question;<newline46mondego>    double answer;<newline46mondego><newline46mondego>    public boolean evaluate(double input){<newline46mondego>        if (input == this.answer) { return true; }<newline46mondego>        else { return false; }<newline46mondego>    }<newline46mondego>}<newline46mondego><newline46mondego>public class LogarithmQ extends Question{<newline46mondego><newline46mondego>    // Declare relevant fields such as x, y, ... , answer<newline46mondego><newline46mondego>    // Define a constructor that generates random numbers to populate fields<newline46mondego>    // so that every question 'object' is different.<newline46mondego><newline46mondego>    // also have an <doubleQuotes46>evaluate()<doubleQuotes46> method that <newline46mondego>    // takes as input the user's answer<newline46mondego>    // and returns true/false based on the correct answer value<newline46mondego>}<newline46mondego><newline46mondego>public class AdditionQ extends Question{<newline46mondego>    // similar stuff here<newline46mondego>}<newline46mondego>"
"1626splitHere46","20133806splitHere46","question"
"1627splitHere46","20133822splitHere46","MainIterator i = new MainIterator();<newline46mondego>"
"1628splitHere46","20133822splitHere46","Iterator i = new MainIterator();<newline46mondego>"
"1629splitHere46","20133877splitHere46","class ButtonObject extends JButton<newline46mondego>{<newline46mondego>    public ButtonObject(String text, int x, int y, int width, int height)<newline46mondego>    {<newline46mondego>        super(text);<newline46mondego>        this.setBounds(x, y, width, height);<newline46mondego>    }<newline46mondego>}<newline46mondego>"
"1630splitHere46","20133877splitHere46","ButtonObject[] enemies = new ButtonObject[10];<newline46mondego>for (int i = 0; i < 10; i++)<newline46mondego>{<newline46mondego>    String text = String.valueOf(i);<newline46mondego>    int y = 300 - (i * 55);<newline46mondego>    enemies[i] = new ButtonObject(text, 16, y, 40, 55);<newline46mondego>}<newline46mondego>"
"1631splitHere46","20133886splitHere46","cmd /C start /B /NORMAL cmd /c <doubleQuotes46>client.exe<doubleQuotes46><newline46mondego>"
"1632splitHere46","20133886splitHere46","Runtime#exec(String[])"
"1633splitHere46","20133886splitHere46","String[] cmd = {<doubleQuotes46>cmd<doubleQuotes46>, <doubleQuotes46>/C<doubleQuotes46>, <doubleQuotes46>start<doubleQuotes46>, <doubleQuotes46>/B<doubleQuotes46>, <doubleQuotes46>/NORMAL<doubleQuotes46>, <doubleQuotes46>cmd<doubleQuotes46>, <doubleQuotes46>/c<doubleQuotes46>, <doubleQuotes46>client.exe<doubleQuotes46>};<newline46mondego>runtime.exec(cmd);<newline46mondego>"
"1634splitHere46","20133886splitHere46","ProcessBuilder"
"1635splitHere46","20133886splitHere46","Runtime#exec"
"1636splitHere46","20133901splitHere46","}"
"1637splitHere46","20133901splitHere46","{"
"1638splitHere46","20133901splitHere46","getName"
"1639splitHere46","20133913splitHere46","@PrimaryKeyJoinColumn"
"1640splitHere46","20133913splitHere46","@JoinColumn"
"1641splitHere46","20133913splitHere46","@PrimaryKeyJoinColumn"
"1642splitHere46","20133917splitHere46","JPanel"
"1643splitHere46","20133917splitHere46","revalidate()"
"1644splitHere46","20133917splitHere46","JPanel"
"1645splitHere46","20133917splitHere46","ActionListener"
"1646splitHere46","20133917splitHere46","this.removeAll();<newline46mondego>this.addEntriesAccordingtoList();<newline46mondego>this.revalidate();<newline46mondego>"
"1647splitHere46","20134021splitHere46","s == null"
"1648splitHere46","20134021splitHere46","if (s == null || s.equals(<doubleQuotes46><doubleQuotes46>)) {<newline46mondego>"
"1649splitHere46","20134129splitHere46","class DepositListener implements ActionListener {<newline46mondego>    private MainFrame mainFrame;<newline46mondego><newline46mondego>    public DepositListener(MainFrame mainFrame) {<newline46mondego>       this.mainFrame = mainFrame;<newline46mondego>    }<newline46mondego><newline46mondego>    public void actionPerformed(ActionEvent event) {<newline46mondego><newline46mondego>        // you'll need to give MainFrame public methods to extract information, e.g.,<newline46mondego>        double depositAmount = Double.parseDouble(mainFrame.getAmount());<newline46mondego>        // ... etccc<newline46mondego><newline46mondego>        // and to display information<newline46mondego>        mainFrame.setBalanceText(....);<newline46mondego><newline46mondego>    }<newline46mondego>}<newline46mondego>"
"1650splitHere46","20134129splitHere46","public interface AccountDisplay {<newline46mondego>    double getAmount();<newline46mondego>    BankAccount getAccount(); // this is OK if BankAccount is non GUI<newline46mondego>    void setBalanceText(String text);<newline46mondego>}<newline46mondego>"
"1651splitHere46","20134172splitHere46","double degCel = ((fahren - 32)*(5/9));<newline46mondego>"
"1652splitHere46","20134172splitHere46","5/9"
"1653splitHere46","20134172splitHere46","5.0/9"
"1654splitHere46","20134172splitHere46","double degCel = ((fahren - 32)*(5.0/9));<newline46mondego>"
"1655splitHere46","20134227splitHere46","Statement.RETURN_GENERATED_KEYS"
"1656splitHere46","20134227splitHere46","PreparedStatement.getGeneratedKeys()"
"1657splitHere46","20134227splitHere46","String sql = <doubleQuotes46>insert into table1(name,address,city,state,zip) values(?,?,?,?,?)<doubleQuotes46>;<newline46mondego>PreparedStatement preparedstatement<newline46mondego>= con.prepareStatement(sql, Statement.RETURN_GENERATED_KEYS);<newline46mondego><newline46mondego>//....<newline46mondego><newline46mondego>preparedstatement.setString(1,name);<newline46mondego>preparedstatement.setString(2,address);<newline46mondego>preparedstatement.setString(3,city);<newline46mondego>preparedstatement.setString(4,state);<newline46mondego>preparedstatement.setString(5,zip);<newline46mondego><newline46mondego>preparedstatement.executeUpdate();<newline46mondego><newline46mondego>ResultSet generatedKeys = preparedstatement.getGeneratedKeys();<newline46mondego>//....<newline46mondego>"
"1658splitHere46","20134311splitHere46","private Entry readEntry(XmlPullParser parser) throws XmlPullParserException, IOException {<newline46mondego>    // ...<newline46mondego>    while (parser.next() != XmlPullParser.END_DOCUMENT) {<newline46mondego>    // ...<newline46mondego>}<newline46mondego>"
"1659splitHere46","20134327splitHere46","public int countNumbers(String line) {<newline46mondego>    return new StringTokenizer(line).countTokens();<newline46mondego>}<newline46mondego>"
"1660splitHere46","20134327splitHere46","StringTokenizer"
"1661splitHere46","20134330splitHere46","age"
"1662splitHere46","20134330splitHere46","MongoClient mongo = new MongoClient(new ServerAddress(<doubleQuotes46>localhost<doubleQuotes46>, 27017));<newline46mondego>DB db = mongo.getDB(<doubleQuotes46>thedb<doubleQuotes46>);<newline46mondego>DBCollection collection = db.getCollection(<doubleQuotes46>test<doubleQuotes46>);<newline46mondego><newline46mondego>BasicDBObject query = new BasicDBObject();<newline46mondego>query.append(<doubleQuotes46>age<doubleQuotes46>, 25);<newline46mondego><newline46mondego>collection.remove(query);<newline46mondego>"
"1663splitHere46","20134518splitHere46","0"
"1664splitHere46","20134518splitHere46","null"
"1665splitHere46","20134597splitHere46","char"
"1666splitHere46","20134597splitHere46","for (char index = 0; index < ch.length; index++)<newline46mondego>"
"1667splitHere46","20134597splitHere46","for (char index = (char) (ch.length-1); index >= 0; index--)<newline46mondego>"
"1668splitHere46","20134597splitHere46","char"
"1669splitHere46","20134597splitHere46","int"
"1670splitHere46","20134597splitHere46","for (int index = 0; index < ch.length; index++)<newline46mondego>"
"1671splitHere46","20134597splitHere46","for (int index = (ch.length-1); index >= 0; index--)<newline46mondego>"
"1672splitHere46","20134608splitHere46","String s = <doubleQuotes46>7 + 5 = 12<doubleQuotes46>;<newline46mondego>s = s.substring(0, s.indexOf(<doubleQuotes46>=<doubleQuotes46>)).trim();<newline46mondego>int number = Integer.parseInt(s.substring(s.lastIndexOf(<doubleQuotes46> <doubleQuotes46>) + 1))<newline46mondego>"
"1673splitHere46","20134663splitHere46","NewRelic.addCustomParameter(String key, String value)"
"1674splitHere46","20134665splitHere46","Entry a(10,<doubleQuotes46>a title<doubleQuotes46>,<doubleQuotes46>a description<doubleQuotes46>);<newline46mondego>"
"1675splitHere46","20134665splitHere46","Entry a = new Entry (10,<doubleQuotes46>a title<doubleQuotes46>,<doubleQuotes46>a description<doubleQuotes46>);<newline46mondego>"
"1676splitHere46","20134665splitHere46","Entry"
"1677splitHere46","20134665splitHere46","Entry"
"1678splitHere46","20134665splitHere46","com.example"
"1679splitHere46","20134665splitHere46","import com.example.Entry;<newline46mondego>"
"1680splitHere46","20134665splitHere46","import com.example.*;<newline46mondego>"
"1681splitHere46","20134754splitHere46","GL20.glUniformMatrix4(<newline46mondego>    GL20.glGetUniformLocation(getProgram(), <doubleQuotes46>projectionMatrix<doubleQuotes46>),<newline46mondego>    [...]<newline46mondego>"
"1682splitHere46","20134754splitHere46","Get"
"1683splitHere46","20134754splitHere46","GLint"
"1684splitHere46","20134759splitHere46","EditText uFirstName1 = (EditText)findViewById(R.id.editTextFirstName);<newline46mondego>EditText uLastName1 = (EditText)findViewById(R.id.editTextLastName);<newline46mondego>uFirstName = uFirstName1.getText().toString();<newline46mondego>uLastName = uLastName1.getText().toString();<newline46mondego>"
"1685splitHere46","20135108splitHere46","new Point"
"1686splitHere46","20135108splitHere46","Entry"
"1687splitHere46","20135108splitHere46","Point"
"1688splitHere46","20135108splitHere46","HashSet"
"1689splitHere46","20135108splitHere46","Set"
"1690splitHere46","20135108splitHere46","HashSet"
"1691splitHere46","20135108splitHere46","contains(int, int)"
"1692splitHere46","20135108splitHere46","HashSet.contains"
"1693splitHere46","20135108splitHere46","HashMap.containsKey"
"1694splitHere46","20135108splitHere46","HashMap.containsKey"
"1695splitHere46","20135108splitHere46","hashCode"
"1696splitHere46","20135108splitHere46","equals"
"1697splitHere46","20135108splitHere46","-XX:+PrintAssembly"
"1698splitHere46","20135108splitHere46","HashSet"
"1699splitHere46","20135183splitHere46","class A {<newline46mondego>    public A() {<newline46mondego>    }<newline46mondego>}<newline46mondego><newline46mondego>class B {<newline46mondego>   public void method1() {<newline46mondego>      // do something<newline46mondego>   }<newline46mondego><newline46mondego>   public void method2() {<newline46mondego>      A a = new A();<newline46mondego>   }<newline46mondego>}<newline46mondego>"
"1700splitHere46","20135183splitHere46","B.method2()"
"1701splitHere46","20135205splitHere46","boolean make"
"1702splitHere46","20135205splitHere46","boolean make = false;<newline46mondego><newline46mondego>makeButton.addActionListener(new ActionListener(){<newline46mondego>    public void actionPerformed(ActionEvent){<newline46mondego>        make = true;<newline46mondego>    }<newline46mondego>});<newline46mondego><newline46mondego>missButton.addActionListener(new ActionListener(){<newline46mondego>    public void actionPerformed(ActionEvent){<newline46mondego>        make = false;<newline46mondego>    }<newline46mondego>});<newline46mondego>"
"1703splitHere46","20135205splitHere46","paintComponent"
"1704splitHere46","20135205splitHere46","protected void paintComponent(Graphics g){<newline46mondego>    super.paintComponent(g);<newline46mondego><newline46mondego>    if (make){<newline46mondego>        drawOval(whataver are your point requirements)<newline46mondego>    } else {<newline46mondego>        // draw an x at whatever points<newline46mondego>    }<newline46mondego>}<newline46mondego>"
"1705splitHere46","20135205splitHere46","made"
"1706splitHere46","20135205splitHere46","Point p;<newline46mondego><newline46mondego>courtPanel.addMouseListener(new MouseAdapter(){<newline46mondego>    public void mouseClicked(MouseEvent e){<newline46mondego>        p = e.getLocationOnScreen();<newline46mondego>        repaint();   <newline46mondego>    }<newline46mondego>});<newline46mondego>"
"1707splitHere46","20135205splitHere46","makeButton"
"1708splitHere46","20135205splitHere46","made"
"1709splitHere46","20135205splitHere46","X"
"1710splitHere46","20135205splitHere46","missButtton"
"1711splitHere46","20135205splitHere46","mouseListener to the"
"1712splitHere46","20135205splitHere46","becuase everytime the panel is clicked somewhere, that's the point on the floor where is it either painted an"
"1713splitHere46","20135205splitHere46","or a"
"1714splitHere46","20135205splitHere46","X"
"1715splitHere46","20135205splitHere46","circle"
"1716splitHere46","20135205splitHere46","private boolean make = false;<newline46mondego>private HashMap<Boolean, Point> points = new HaspMap<>();<newline46mondego><newline46mondego>makeButton.addActionListener(new ActionListener(){<newline46mondego>    public void actionPerformed(ActionEvent){<newline46mondego>        make = true;<newline46mondego>    }<newline46mondego>});<newline46mondego><newline46mondego>missButton.addActionListener(new ActionListener(){<newline46mondego>    public void actionPerformed(ActionEvent){<newline46mondego>        make = false;<newline46mondego>    }<newline46mondego>});<newline46mondego><newline46mondego>courtPanel.addMouseListener(new MouseAdapter(){<newline46mondego>    public void mouseClicked(MouseEvent e){<newline46mondego>        if (make) {<newline46mondego>            points.put(true, e.getLocationOnScreen());<newline46mondego>            repaint();   <newline46mondego>        } else {<newline46mondego>            points.put(false, e.getLocationOnScreen());<newline46mondego>            repaint();<newline46mondego>        }<newline46mondego><newline46mondego>});<newline46mondego><newline46mondego>protected void paintComponent(Graphics g){<newline46mondego>    super.paintComponent(g);<newline46mondego><newline46mondego>    for (Map.Entry<Boolean, Point> entry : points.entrySet()) {<newline46mondego>        Boolean key = entry.getKey();<newline46mondego>        Point point = entry.getValue();<newline46mondego><newline46mondego>        if (key) {<newline46mondego>            g.grawOval(point.getX(), point.getY(), 10, 20);<newline46mondego>        } esle {<newline46mondego>            g.drawLine(.., .., .., ..);  //draws one half of `X`<newline46mondego>            g.drawLine(.., .., .., ..);  //draws other half<newline46mondego>        }<newline46mondego>    }<newline46mondego>}<newline46mondego>"
"1717splitHere46","20135206splitHere46","<tx:annotation-driven transaction-manager=<doubleQuotes46>transactionManager<doubleQuotes46>  />"
"1718splitHere46","20135206splitHere46","class DocumentDaoImpl<newline46mondego>{<newline46mondego>     @Transactional   <newline46mondego>     public void save(document){<newline46mondego><newline46mondego>     }<newline46mondego>     public void someMethod(){<newline46mondego><newline46mondego>     }<newline46mondego>}<newline46mondego>"
"1719splitHere46","20135206splitHere46","@Transactional   <newline46mondego>class DocumentDaoImpl<newline46mondego>{<newline46mondego>     public void save(document){<newline46mondego><newline46mondego>     }<newline46mondego>     public void someMethod(){<newline46mondego><newline46mondego>     }<newline46mondego>}<newline46mondego>"
"1720splitHere46","20135206splitHere46","Blob blob = Hibernate.getLobCreator(sessionFactory.getCurrentSession()).createBlob(file.getInputStream(), file.getSize());<newline46mondego>"
"1721splitHere46","20135249splitHere46","class Node"
"1722splitHere46","20135249splitHere46","Node"
"1723splitHere46","20135249splitHere46","binary Tree"
"1724splitHere46","20135249splitHere46","Node class"
"1725splitHere46","20135249splitHere46","class Node<newline46mondego>     {<newline46mondego>        Node left;<newline46mondego>        Node right;<newline46mondego>        int info;<newline46mondego>        Node(int value)<newline46mondego>        {<newline46mondego>         this.info = value;<newline46mondego>        }<newline46mondego>        //Add more attributes or functionalities<newline46mondego>     }<newline46mondego>"
"1726splitHere46","20135249splitHere46","Node class"
"1727splitHere46","20135455splitHere46","getJSONFromUrl()"
"1728splitHere46","20135455splitHere46","HttpClient client = new DefaultHttpClient();<newline46mondego>HttpGet request = new HttpGet(url);<newline46mondego><newline46mondego>HttpResponse response = client.execute(request);<newline46mondego><newline46mondego><newline46mondego>BufferedReader rd = new BufferedReader(<newline46mondego>    new InputStreamReader(response.getEntity().getContent()));<newline46mondego><newline46mondego>StringBuffer result = new StringBuffer();<newline46mondego>String line = <doubleQuotes46><doubleQuotes46>;<newline46mondego>while ((line = rd.readLine()) != null) {<newline46mondego>    result.append(line);<newline46mondego>}<newline46mondego>     return result.toString();<newline46mondego>"
"1729splitHere46","20135489splitHere46","public Root()<newline46mondego>{<newline46mondego>    while (true) {<newline46mondego>        try{<newline46mondego>            for(int y=0;y<System.in.available();++y)<newline46mondego>            {<newline46mondego>                try <newline46mondego>                {<newline46mondego>                    System.out.print((char)System.in.read());<newline46mondego>                } <newline46mondego>                catch (IOException exep)<newline46mondego>                {<newline46mondego>                    System.out.print(exep.getLocalizedMessage());<newline46mondego>                }<newline46mondego>            }<newline46mondego>        }<newline46mondego>        catch(IOException exep)<newline46mondego>        {<newline46mondego>            System.out.println(exep.getLocalizedMessage());<newline46mondego>        }<newline46mondego>    }<newline46mondego>}<newline46mondego>"
"1730splitHere46","20135651splitHere46","paintComponent()"
"1731splitHere46","20135651splitHere46","JPanel"
"1732splitHere46","20135651splitHere46","getPreferredSize()"
"1733splitHere46","20135651splitHere46","repaint()"
"1734splitHere46","20135658splitHere46","public void withdraw(double amount) {<newline46mondego>    if(balance - amount < 0) {<newline46mondego>        JOptionPane.showMessageDialog(null, <doubleQuotes46>Can't withdraw that amount, account balance is too low.<doubleQuotes46>, <doubleQuotes46>Error<doubleQuotes46>, JOptionPane.ERROR_MESSAGE);<newline46mondego>    } else {<newline46mondego>        balance = balance - amount;<newline46mondego>    }<newline46mondego>}<newline46mondego>"
"1735splitHere46","20135721splitHere46","Future"
"1736splitHere46","20135721splitHere46","Future"
"1737splitHere46","20135721splitHere46","isDone()"
"1738splitHere46","20135721splitHere46","true"
"1739splitHere46","20135721splitHere46","cancel()"
"1740splitHere46","20135721splitHere46","Future"
"1741splitHere46","20135721splitHere46","Future"
"1742splitHere46","20135721splitHere46","get()"
"1743splitHere46","20135721splitHere46","Future"
"1744splitHere46","20135721splitHere46","Future"
"1745splitHere46","20135806splitHere46","public class Customer extends Person {<newline46mondego>    String number=<doubleQuotes46><doubleQuotes46>; // you forgot the type declaration<newline46mondego>"
"1746splitHere46","20135806splitHere46","number"
"1747splitHere46","20135806splitHere46","private"
"1748splitHere46","20135806splitHere46","Person"
"1749splitHere46","20135806splitHere46","protected String number;<newline46mondego>"
"1750splitHere46","20135806splitHere46","Customer"
"1751splitHere46","20135842splitHere46","ImageView image_status=(ImageView)polis.findViewById(R.id.image_status_1);<newline46mondego>"
"1752splitHere46","20135842splitHere46","nama_pp.addTextChangedListener(new TextWatcher()<newline46mondego>    {<newline46mondego>        public void beforeTextChanged(CharSequence p1, int p2, int p3, int p4)<newline46mondego>        {<newline46mondego>            // TODO: Implement this method<newline46mondego>        }<newline46mondego><newline46mondego>        public void afterTextChanged(Editable p1)<newline46mondego>        {<newline46mondego>            // TODO: Implement this method<newline46mondego>        }<newline46mondego><newline46mondego>        public void onTextChanged(CharSequence s, int start, int before, int count)<newline46mondego>        { <newline46mondego>            if(s.length() == 0)<newline46mondego>            {<newline46mondego>                image_status.setImageResource(R.drawable.espaj_yellow_checklist);<newline46mondego>            }<newline46mondego>            else<newline46mondego>            {<newline46mondego>                image_status.setImageResource(R.drawable.espaj_gray_checklist);<newline46mondego>            }<newline46mondego>        }<newline46mondego>    }<newline46mondego>);<newline46mondego>"
"1753splitHere46","20135937splitHere46","Random"
"1754splitHere46","20135937splitHere46","UUID"
"1755splitHere46","20135937splitHere46","Random"
"1756splitHere46","20135997splitHere46","resolveClass()"
"1757splitHere46","20135997splitHere46","import java.io.DataInputStream;<newline46mondego>import java.io.File;<newline46mondego>import java.io.FileInputStream;<newline46mondego>import java.io.IOException;<newline46mondego>import java.util.Set;<newline46mondego><newline46mondego>/**<newline46mondego> * This class provides dynamic loading in the sense that the given class and <newline46mondego> * other changed classes are loaded from disk, not from cache.<newline46mondego> * Ensures most recent version is used for those classes.<newline46mondego> */<newline46mondego>public class DynamicClassLoader extends ClassLoader{<newline46mondego><newline46mondego>    private Set<String> classes;<newline46mondego><newline46mondego>    public DynamicClassLoader(Set<String> changedClasses) {<newline46mondego>        this.classes = changedClasses;<newline46mondego>    }<newline46mondego><newline46mondego>    /**<newline46mondego>     * Dynamically loads the class from it's binary file. <newline46mondego>     * Classes this class depends on will only be loaded dynamically when <newline46mondego>     * they are in list of changed classes given at construction.<newline46mondego>     * @throws ClassNotFoundException <newline46mondego>     */<newline46mondego>    public Class<?> dynamicallyLoadClass(String name) <newline46mondego>        throws ClassNotFoundException {<newline46mondego>        classes.add(name);<newline46mondego>        return loadClass(name);<newline46mondego>    }<newline46mondego><newline46mondego>    /**<newline46mondego>     * Finds the class dynamically, contrary to Class.forname which can use <newline46mondego>     * cached copies.<newline46mondego>     * This means it forces a reload of the class data.<newline46mondego>     * Source: http://stackoverflow.com/questions/3971534/<newline46mondego>     */<newline46mondego>    @Override<newline46mondego>    protected Class<?> findClass(String s) throws ClassNotFoundException {<newline46mondego>        try {<newline46mondego>            byte[] bytes;<newline46mondego>            bytes = loadClassData(s);<newline46mondego>            return defineClass(s, bytes, 0, bytes.length);<newline46mondego>        } catch (IOException e) {<newline46mondego>            e.printStackTrace();<newline46mondego>            throw new ClassNotFoundException();<newline46mondego>        }<newline46mondego>    }<newline46mondego><newline46mondego>    @Override<newline46mondego>    public Class<?> loadClass(String name) throws ClassNotFoundException{<newline46mondego>        return loadClass(name, true);<newline46mondego>    }<newline46mondego><newline46mondego>    /**<newline46mondego>     * Overridden to not check the parent's loadClass method first.<newline46mondego>     */<newline46mondego>    @Override<newline46mondego>    protected Class<?> loadClass(String name, boolean resolve) <newline46mondego>        throws ClassNotFoundException {<newline46mondego>        Class<?> clazz = findLoadedClass(name);<newline46mondego>        if(clazz != null)<newline46mondego>            return clazz;<newline46mondego><newline46mondego>        if(classes.contains(name)) {<newline46mondego>            clazz = findClass(name);<newline46mondego>            resolveClass(clazz);<newline46mondego>            return clazz;<newline46mondego>        }<newline46mondego>        return super.loadClass(name, resolve);<newline46mondego>    }<newline46mondego><newline46mondego>    /**<newline46mondego>     * Load class data from byte code.<newline46mondego>     * <newline46mondego>     * @param className<newline46mondego>     * @return<newline46mondego>     * @throws IOException<newline46mondego>     */<newline46mondego>    protected byte[] loadClassData(String className) throws IOException {<newline46mondego>        File f = new File(<doubleQuotes46>bin/<doubleQuotes46> <newline46mondego>            + className.replaceAll(<doubleQuotes46>\\.<doubleQuotes46>, <doubleQuotes46>/<doubleQuotes46>) + <doubleQuotes46>.class<doubleQuotes46>);<newline46mondego>        int size = (int) f.length();<newline46mondego>        byte buff[] = new byte[size];<newline46mondego>        FileInputStream fis = new FileInputStream(f);<newline46mondego>        DataInputStream dis = new DataInputStream(fis);<newline46mondego>        dis.readFully(buff);<newline46mondego>        dis.close();<newline46mondego>        return buff;<newline46mondego>    }<newline46mondego>}<newline46mondego>"
"1758splitHere46","20136012splitHere46","public String copies(String s int n) {<newline46mondego>    StringBuilder sb = new StringBuilder();<newline46mondego>    if (n > 0) {<newline46mondego>        int i = 0;<newline46mondego>        while (i < n) {<newline46mondego>           sb.append(s);<newline46mondego>           i++;<newline46mondego>        }<newline46mondego>    }<newline46mondego>    return sb.toString();<newline46mondego>}<newline46mondego>"
"1759splitHere46","20136258splitHere46","final"
"1760splitHere46","20136258splitHere46","final"
"1761splitHere46","20136258splitHere46","String s = <doubleQuotes46>select * from users<doubleQuotes46>;<newline46mondego><newline46mondego>// many lines of code<newline46mondego>s = <doubleQuotes46>temp<doubleQuotes46>;<newline46mondego>// do something with s<newline46mondego>// many lines of code<newline46mondego>PreparedStatement stmt = conn.prepareStatement(sql);<newline46mondego>"
"1762splitHere46","20136258splitHere46","s"
"1763splitHere46","20136258splitHere46","s"
"1764splitHere46","20136258splitHere46","final"
"1765splitHere46","20136258splitHere46","sql"
"1766splitHere46","20136258splitHere46","s"
"1767splitHere46","20136258splitHere46","final"
"1768splitHere46","20136258splitHere46","final"
"1769splitHere46","20136258splitHere46","private"
"1770splitHere46","20136258splitHere46","<doubleQuotes46>selct * from users<doubleQuotes46>"
"1771splitHere46","20136258splitHere46","private final String SELECT_STAR_FROM = <doubleQuotes46>select * from <doubleQuotes46>;<newline46mondego>private final String USERS_TABLE = <doubleQuotes46>users<doubleQuotes46>;<newline46mondego><newline46mondego>// many lines of code<newline46mondego>PreparedStatement stmt0 = conn.prepareStatement(SELECT_STAR_FROM + USERS_TABLE);<newline46mondego><newline46mondego>// this line would fail at run time<newline46mondego>PreparedStatement stmt1 = conn.prepareStatement(<doubleQuotes46>selct * from users<doubleQuotes46>);<newline46mondego><newline46mondego>// this line fails at compile time and the compiler points you at it<newline46mondego>PreparedStatement stmt0 = conn.prepareStatement(SELCT_STAR_FROM + USERS_TABLE);<newline46mondego>"
"1772splitHere46","20136258splitHere46","#define JSIG_CONSTRUCTOR <doubleQuotes46><init><doubleQuotes46><newline46mondego>"
"1773splitHere46","20136258splitHere46","<doubleQuotes46><intt><doubleQuotes46>"
"1774splitHere46","20136258splitHere46","JSIG_CONSTRUCTOR"
"1775splitHere46","20136281splitHere46","Rational r1 = new Rational ( rationalNum1, rationalDen1);<newline46mondego>Rational r2 = new Rational ( rationalNum2, rationalDen2);<newline46mondego>"
"1776splitHere46","20136281splitHere46","public Rational(int rationalNumber, int rationalDen){  <newline46mondego> Numerator = rationalNumber;<newline46mondego> Denominator = rationalDen;<newline46mondego><newline46mondego> }<newline46mondego>"
"1777splitHere46","20136281splitHere46","public void question()<newline46mondego>{<newline46mondego> System.out.println(<doubleQuotes46>Do you want to exit? [y/n]<doubleQuotes46>);  // ask user if they want to quit   with yes or no option<newline46mondego> Scanner q = new Scanner(System.in);<newline46mondego> switch (q.nextInt()) // here you are assuming that you are reading a int in step <newline46mondego> {                    // of a string<newline46mondego> case 'y' : // ' ' arent used for strings...<newline46mondego> System.out.println (<doubleQuotes46>Thank you and goodbye.<doubleQuotes46>);<newline46mondego> break;<newline46mondego><newline46mondego> case 'n' :<newline46mondego> InputMenu();<newline46mondego> break;<newline46mondego> default:<newline46mondego><newline46mondego> System.err.println ( <doubleQuotes46>Unrecognized option<doubleQuotes46> );<newline46mondego> break;<newline46mondego> }<newline46mondego>}<newline46mondego>"
"1778splitHere46","20136281splitHere46","public void question()<newline46mondego>{<newline46mondego> System.out.println(<doubleQuotes46>Do you want to exit? [y/n]<doubleQuotes46>);  // ask user if they want to quit   with yes or no option<newline46mondego> Scanner q = new Scanner(System.in);<newline46mondego> switch (q.nextLine()) // change nextInt to nextLine, that is the string method <newline46mondego> {                    // of a string<newline46mondego> case <doubleQuotes46>y<doubleQuotes46> : //change ' ' to <doubleQuotes46> <doubleQuotes46><newline46mondego> System.out.println (<doubleQuotes46>Thank you and goodbye.<doubleQuotes46>);<newline46mondego> break;<newline46mondego><newline46mondego> case <doubleQuotes46>n<doubleQuotes46> :  //change ' ' to <doubleQuotes46> <doubleQuotes46><newline46mondego> InputMenu();<newline46mondego> break;<newline46mondego> default:<newline46mondego><newline46mondego> System.err.println ( <doubleQuotes46>Unrecognized option<doubleQuotes46> );<newline46mondego> break;<newline46mondego> }<newline46mondego>}<newline46mondego>"
"1779splitHere46","20136281splitHere46","int rationalNum1, rationalDen1, rationalNum2, rationalDen2; // this are local variables, they only exist inside main method<newline46mondego>...`<newline46mondego>}<newline46mondego>"
"1780splitHere46","20136281splitHere46","public class RationalDriver{<newline46mondego> private static int rationalNum1, rationalDen1, rationalNum2, rationalDen2;<newline46mondego> public static void main(String[] args){<newline46mondego>  // your main<newline46mondego> }<newline46mondego>"
"1781splitHere46","20136281splitHere46","rationalNum1 = your valor;<newline46mondego>"
"1782splitHere46","20136328splitHere46","'1'"
"1783splitHere46","20136328splitHere46","'0'"
"1784splitHere46","20136328splitHere46","49"
"1785splitHere46","20136328splitHere46","48"
"1786splitHere46","20136328splitHere46","0"
"1787splitHere46","20136328splitHere46","49"
"1788splitHere46","20136328splitHere46","48"
"1789splitHere46","20136328splitHere46","char bit = path.charAt(i);<newline46mondego>answer = (answer << 1) | (bit - '0');<newline46mondego>"
"1790splitHere46","20136356splitHere46","WebViewClient"
"1791splitHere46","20136356splitHere46","browser.setWebViewClient(new WebViewClient() {<newline46mondego>        public boolean shouldOverrideUrlLoading(WebView view, String url) {<newline46mondego>            // TODO Auto-generated method stub<newline46mondego>            view.loadUrl(url);<newline46mondego>            return true;<newline46mondego>        }<newline46mondego>    });<newline46mondego>"
"1792splitHere46","20136356splitHere46","@Override<newline46mondego>protected void onCreate(Bundle savedInstanceState) {<newline46mondego>    super.onCreate(savedInstanceState);<newline46mondego>    setContentView(R.layout.activity_main);<newline46mondego><newline46mondego>    String url = <doubleQuotes46>http://www.kylesutherland.com<doubleQuotes46>;<newline46mondego><newline46mondego>    WebView view = (WebView) findViewById(R.id.webview);<newline46mondego>    view.getSettings().setJavaScriptEnabled(true);<newline46mondego>    view.loadUrl(url);<newline46mondego>    //starting from here<newline46mondego>    view.setWebViewClient(new WebViewClient() {<newline46mondego>        public boolean shouldOverrideUrlLoading(WebView view, String url) {<newline46mondego>            // TODO Auto-generated method stub<newline46mondego>            view.loadUrl(url);<newline46mondego>            return true;<newline46mondego>}<newline46mondego>"
"1793splitHere46","20136438splitHere46","List<FileServer> fsList = new ArrayList<FileServer>();<newline46mondego>for(FSSpec spec : fileServerSpecs)<newline46mondego>{<newline46mondego>    FileServer fs = FileServerFactory.create(spec);<newline46mondego>    fsList.add(fs);<newline46mondego>}<newline46mondego><newline46mondego>// do something with your list of file servers.<newline46mondego>"
"1794splitHere46","20136468splitHere46","ContainsDescription"
"1795splitHere46","20136468splitHere46","public class ContainsDescription extends Attachments<newline46mondego>{<newline46mondego>    private String description;<newline46mondego><newline46mondego>    public ContainsDescription(String description, String filename, int kilobytes)<newline46mondego>    {<newline46mondego>        super(filename, kilobytes);<newline46mondego>        this.description = description;          <newline46mondego>    }<newline46mondego>}<newline46mondego>"
"1796splitHere46","20136468splitHere46","Description"
"1797splitHere46","20136468splitHere46","public class ContainsDescription extends Attachments<newline46mondego>{<newline46mondego>    private String description;<newline46mondego><newline46mondego>    public ContainsDescription(String description)<newline46mondego>    {<newline46mondego>        super(<doubleQuotes46><doubleQuotes46>, 0);<newline46mondego>        this.description = description;          <newline46mondego>    }<newline46mondego>}<newline46mondego>"
"1798splitHere46","20136663splitHere46","public GradeBook (String courseName, String instructorName)<newline46mondego>{<newline46mondego>    courseName = name; // variable <doubleQuotes46>name<doubleQuotes46> is not declared anywhere<newline46mondego>    instructorName = professor; // variable <doubleQuotes46>teacher<doubleQuotes46> was not declared.<newline46mondego>} // fim do constructor<newline46mondego>"
"1799splitHere46","20136663splitHere46","public GradeBook (String courseName, String instructorName)<newline46mondego>{<newline46mondego>    this.courseName = courseName;<newline46mondego>    this.instructorName = instructorName;<newline46mondego>} // fim do construtor<newline46mondego>"
"1800splitHere46","20136688splitHere46","whereLocation()"
"1801splitHere46","20136688splitHere46","int endZipRegex = addressRegex.indexOf(<doubleQuotes46>)<doubleQuotes46>, startZipRegex);<newline46mondego>"
"1802splitHere46","20136688splitHere46","int endZipRegex = addressRegex.lastIndexOf(<doubleQuotes46>)<doubleQuotes46>);<newline46mondego>"
"1803splitHere46","20136688splitHere46","String zipRegex = addressRegex.substring(startZipRegex,<newline46mondego>                endZipRegex);<newline46mondego>"
"1804splitHere46","20136688splitHere46","<doubleQuotes46>)<doubleQuotes46>"
"1805splitHere46","20136888splitHere46","Ploygon"
"1806splitHere46","20136888splitHere46","Shape"
"1807splitHere46","20136888splitHere46","Path2D"
"1808splitHere46","20136914splitHere46","public class Map extends Mapper<LongWritable, Text, Text, IntWritable><newline46mondego>"
"1809splitHere46","20136914splitHere46","context.write(key, new Text(cipherString));<newline46mondego>"
"1810splitHere46","20136914splitHere46","public class Map extends Mapper<LongWritable, Text, LongWritable, Text><newline46mondego>"
"1811splitHere46","20136991splitHere46","values"
"1812splitHere46","20136991splitHere46",".push()"
"1813splitHere46","20136991splitHere46","color"
"1814splitHere46","20136991splitHere46","fill()"
"1815splitHere46","20136991splitHere46","int rotationCount = 0;<newline46mondego>int translateX ;<newline46mondego>int translateY ;<newline46mondego>int currentTime = 0;<newline46mondego>int circlesOrLines ;<newline46mondego>int timeLimit ;<newline46mondego>int r;<newline46mondego>int g;<newline46mondego>int b;<newline46mondego>ArrayList values;<newline46mondego>int maxValue = 226;<newline46mondego>int minValue = 75;<newline46mondego>int timeIndex = 0;<newline46mondego><newline46mondego>void setup () {<newline46mondego>    size(500, 700);<newline46mondego>    r = 226;<newline46mondego>    g = 226;<newline46mondego>    b = 75;<newline46mondego><newline46mondego>    smooth();<newline46mondego>    background(0);<newline46mondego>    rectMode(CENTER);<newline46mondego>    frameRate (10);<newline46mondego>    noStroke();<newline46mondego>    fill(r, g, b, 30);<newline46mondego>    translateX = width/2;<newline46mondego>    translateY = height/2;<newline46mondego>    timeLimit = 10000;<newline46mondego>    circlesOrLines = 0;<newline46mondego>    currentTime = millis();<newline46mondego><newline46mondego><newline46mondego>    values = new ArrayList();  <newline46mondego>    generateColor ();<newline46mondego><newline46mondego>}<newline46mondego><newline46mondego>void draw () {<newline46mondego>    background(80);<newline46mondego><newline46mondego>    fill( values.get( frameCount % values.size()));<newline46mondego>    int passedTime = millis() - currentTime;<newline46mondego><newline46mondego>    translate(translateX % width, translateY % height);<newline46mondego><newline46mondego>    translateX += 3 % width;<newline46mondego>    translateY += 3 % height;<newline46mondego><newline46mondego>    rotationCount += (PI/2008);<newline46mondego>    if (passedTime < timeLimit) {<newline46mondego>        makeCircles ();<newline46mondego>    }<newline46mondego>    else {<newline46mondego>        if (passedTime >=20000)<newline46mondego>        {<newline46mondego>            passedTime = 0;<newline46mondego>            currentTime = millis();<newline46mondego>        }<newline46mondego>        makeLines ();<newline46mondego><newline46mondego>    }<newline46mondego>}<newline46mondego>void makeCircles () {<newline46mondego><newline46mondego>    for (int i = 0; i < 25; i++) {<newline46mondego>        rotate (rotationCount);<newline46mondego>        ellipse(i+7, i % width, 100, height/2);<newline46mondego>    }<newline46mondego>}<newline46mondego><newline46mondego>void makeLines () {<newline46mondego>    for (int i = 0; i < 25; i++) {<newline46mondego>        rotate (rotationCount);<newline46mondego>        rect(i+7, i % width, 100, height/2);<newline46mondego>    }<newline46mondego>}<newline46mondego><newline46mondego><newline46mondego>void generateColor () <newline46mondego>{<newline46mondego><newline46mondego>    for (g=g; g>minValue; g--)<newline46mondego>    {<newline46mondego>        values.add (color(r,g,b,30));<newline46mondego>    }<newline46mondego>    for (r=r; r>minValue; r--)<newline46mondego>    {<newline46mondego>        values.add (color(r,g,b,30));<newline46mondego>    }<newline46mondego>    for (b=b; b<maxValue; b++)<newline46mondego>    {<newline46mondego>        values.add (color(r,g,b,30));<newline46mondego>    }<newline46mondego>    for (g=g; g<maxValue; g++)<newline46mondego>    {<newline46mondego>        values.add (color(r,g,b,30));<newline46mondego>    }<newline46mondego>    for (r=r; r<maxValue; r++)<newline46mondego>    {<newline46mondego>        values.add (color(r,g,b,30));<newline46mondego>    }<newline46mondego>    for (b=b; b>minValue; b--)<newline46mondego>    {<newline46mondego>        values.add (color(r,g,b,30));<newline46mondego>    }<newline46mondego>}<newline46mondego>"
"1816splitHere46","20137091splitHere46","AWTEventListener listener = new AWTEventListener() {<newline46mondego>        @Override<newline46mondego>        public void eventDispatched(AWTEvent event) {<newline46mondego>            try {<newline46mondego>                if (event instanceof KeyEvent) {<newline46mondego>                    KeyEvent evt = (KeyEvent) event;<newline46mondego>                    if (evt.getID() == KeyEvent.KEY_PRESSED &&<newline46mondego>                            evt.getModifiers() == KeyEvent.CTRL_MASK &&<newline46mondego>                            evt.getKeyCode() == KeyEvent.VK_F) {<newline46mondego>                        System.out.println(<doubleQuotes46>Ctrl+F is pressed!<doubleQuotes46>);<newline46mondego>                    }<newline46mondego>                }<newline46mondego><newline46mondego>            } catch (Exception e) {<newline46mondego>                e.printStackTrace();<newline46mondego>            }<newline46mondego>        }<newline46mondego>    };<newline46mondego>            Toolkit.getDefaultToolkit().addAWTEventListener(listener, AWTEvent.KEY_EVENT_MASK|AWTEvent.ACTION_EVENT_MASK);<newline46mondego><newline46mondego><newline46mondego>}<newline46mondego><newline46mondego><newline46mondego>public static void main(String[] args) {<newline46mondego>new JFrame(<doubleQuotes46><doubleQuotes46>).setVisible(true);<newline46mondego>    Main b = new Main();<newline46mondego>    b.start();<newline46mondego>}<newline46mondego>"
"1817splitHere46","20137117splitHere46","public Car{<newline46mondego> public Motor{<newline46mondego><newline46mondego> }<newline46mondego>}<newline46mondego>"
"1818splitHere46","20137238splitHere46","clientSocket = new Socket(<doubleQuotes46>appname.herokuapp.com<doubleQuotes46>, 40506);<newline46mondego>"
"1819splitHere46","20137272splitHere46","System.exit(0)"
"1820splitHere46","20137303splitHere46","// Read file to a byte array.<newline46mondego>String privateKeyFileName = <doubleQuotes46>C:\\myPrivateKey.der<doubleQuotes46>;   <newline46mondego>Path path = Paths.get(privateKeyFileName);<newline46mondego>byte[] privKeyByteArray = Files.readAllBytes(path);<newline46mondego><newline46mondego>PKCS8EncodedKeySpec keySpec = new PKCS8EncodedKeySpec(privKeyByteArray);<newline46mondego><newline46mondego>KeyFactory keyFactory = KeyFactory.getInstance(<doubleQuotes46>RSA<doubleQuotes46>);<newline46mondego><newline46mondego>PrivateKey myPrivKey = keyFactory.generatePrivate(keySpec);<newline46mondego><newline46mondego>System.out.println(<doubleQuotes46>Algorithm: <doubleQuotes46> + myPrivKey.getAlgorithm());<newline46mondego>"
"1821splitHere46","20137303splitHere46","KeyFactory"
"1822splitHere46","20137303splitHere46","generatePrivate()"
"1823splitHere46","20137303splitHere46","InvalidKeySpecException"
"1824splitHere46","20137343splitHere46","easyDecryp(aux)"
"1825splitHere46","20137343splitHere46","+="
"1826splitHere46","20137379splitHere46","hasNextInt"
"1827splitHere46","20137379splitHere46","hasNextInt()"
"1828splitHere46","20137402splitHere46","<dependency><newline46mondego><groupId>cglib</groupId><newline46mondego><artifactId>cglib</artifactId><newline46mondego><version>2.2.2</version><newline46mondego></dependency><newline46mondego>"
"1829splitHere46","20137524splitHere46","Scanner scan = new Scanner(System.in);<newline46mondego>public airplane(int num_of_seats)<newline46mondego>{<newline46mondego>"
"1830splitHere46","20137524splitHere46","boolean[] seats = new boolean[num_of_seats];<newline46mondego><newline46mondego>    for (int counter = 0; counter < num_of_seats; counter++)<newline46mondego>    {<newline46mondego>        seats[counter] = true;<newline46mondego>    }<newline46mondego>}<newline46mondego>"
"1831splitHere46","20137524splitHere46","public airplane(int num_of_seats)<newline46mondego>{<newline46mondego>    seats = new boolean[num_of_seats];<newline46mondego>    for (int counter = 0; counter < num_of_seats; counter++)<newline46mondego>    {<newline46mondego>        seats[counter] = true;<newline46mondego>    }<newline46mondego>}<newline46mondego>"
"1832splitHere46","20137584splitHere46","public boolean canViewArtwork(String userPrincipal, Long artworkId);<newline46mondego>public boolean canEditArtwork(String userPrincipal, Long artworkId);<newline46mondego>"
"1833splitHere46","20137593splitHere46","n"
"1834splitHere46","20137593splitHere46","main"
"1835splitHere46","20137593splitHere46","calcNumFactors"
"1836splitHere46","20137593splitHere46","calcNumFactors"
"1837splitHere46","20137593splitHere46","int"
"1838splitHere46","20137593splitHere46","int"
"1839splitHere46","20137593splitHere46","n"
"1840splitHere46","20137593splitHere46","public static void calcNumFactors(int number) {<newline46mondego>   // work with number in here<newline46mondego>}<newline46mondego>"
"1841splitHere46","20137593splitHere46","int n = keyboard.nextInt(); <newline46mondego>calcNumFactors(n);<newline46mondego>"
"1842splitHere46","20137698splitHere46","public static void main(String[] args)<newline46mondego>{<newline46mondego>    String str = <doubleQuotes46>christian<doubleQuotes46>;<newline46mondego>    String new_str = <doubleQuotes46><doubleQuotes46>;<newline46mondego><newline46mondego>    for (int i = 0; i < str.length(); i++) {<newline46mondego>        new_str += str.charAt(i);<newline46mondego>        if (isVowel(str.charAt(i))) // If is a vowel<newline46mondego>            new_str += <doubleQuotes46>ub<doubleQuotes46>;<newline46mondego>    }<newline46mondego>    System.out.println(new_str);<newline46mondego>}<newline46mondego><newline46mondego>private static boolean isVowel(char c)<newline46mondego>{<newline46mondego>    if (c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u')<newline46mondego>        return true;<newline46mondego>    return false;<newline46mondego>}<newline46mondego>"
"1843splitHere46","20137709splitHere46","JFrame newFrame = new JFrame();<newline46mondego>"
"1844splitHere46","20137715splitHere46","static"
"1845splitHere46","20137715splitHere46","main"
"1846splitHere46","20137715splitHere46","HibernateUtil"
"1847splitHere46","20137715splitHere46","SessionFactory"
"1848splitHere46","20137715splitHere46","main"
"1849splitHere46","20137715splitHere46","static"
"1850splitHere46","20137716splitHere46","public void resize(int reSize){<newline46mondego>    E[] tmp = (E[]) new Object[reSize];<newline46mondego><newline46mondego>       int current = front;<newline46mondego>       for (int i = 0; i < count; i++)<newline46mondego>          {<newline46mondego>          tmp[i] = elements[current];<newline46mondego>          current = (current + 1) % count;<newline46mondego>          }<newline46mondego>     elements = tmp;<newline46mondego>     front = 0;<newline46mondego>     back = count-1;<newline46mondego>     capacity=reSize;<newline46mondego>       }<newline46mondego>"
"1851splitHere46","20137859splitHere46","${pageContext.request.contextPath}"
"1852splitHere46","20137868splitHere46","JSONObject jsonObject = new JSONObject(json);<newline46mondego>"
"1853splitHere46","20137868splitHere46","try {<newline46mondego><newline46mondego>        InputStream is = new URL(url).openStream();<newline46mondego>        BufferedReader rd = new BufferedReader(<newline46mondego>                    new InputStreamReader(is, Charset.forName(<doubleQuotes46>UTF-8<doubleQuotes46>)));<newline46mondego>        try {<newline46mondego>        String json = rd.readLine();<newline46mondego>        } finally {<newline46mondego>            rd.close();<newline46mondego>        }<newline46mondego>        }  catch (Exception e) {<newline46mondego>            System.out.println(e.toString());<newline46mondego>        } <newline46mondego><newline46mondego>JSONObject obj = new JSONObject(json);<newline46mondego>"
"1854splitHere46","20138024splitHere46","for (int i = 0; i < matrix.length; i++) {<newline46mondego>    for (int j = 1; j < matrix[i].length - 1; j++) {<newline46mondego>        if (matrix[i][j-1] == matrix[i][j] && matrix[i][j] == matrix[i][j+1]) {<newline46mondego>            // do something here<newline46mondego>        }<newline46mondego>    }<newline46mondego>}<newline46mondego>"
"1855splitHere46","20138041splitHere46","//define framedPanel for later use<newline46mondego>private FramedPanel fupanel;<newline46mondego><newline46mondego>//Instantiate the widget i want to add when the option is clicked<newline46mondego>final FileUp fileUp = new FileUp();<newline46mondego><newline46mondego>//Create the HtmlLayoutContainer in which add the widget later on<newline46mondego><newline46mondego>HtmlLayoutContainer conEnlaces = new HtmlLayoutContainer(getTablaEnlaces());<newline46mondego><newline46mondego>public Widget asWidget() {<newline46mondego>    if (fupanel == null) {<newline46mondego>        fupanel = new FramedPanel();<newline46mondego>        fupanel.setHeadingText(<doubleQuotes46>AdministraciÃ³n<doubleQuotes46>);<newline46mondego>        (some other code here)<newline46mondego><newline46mondego>      VerticalLayoutContainer p = new VerticalLayoutContainer();      <newline46mondego><newline46mondego>      conEnlaces.setWidth(Window.getClientWidth());<newline46mondego><newline46mondego>      fupanel.add(p);<newline46mondego><newline46mondego>      p.add(conEnlaces);<newline46mondego><newline46mondego>      Hyperlink fileUph = new Hyperlink();<newline46mondego>      fileUph.setText(<doubleQuotes46>- ImportaciÃ³n de CSV<doubleQuotes46>);<newline46mondego>      conEnlaces.add(fileUph, new HtmlData(<doubleQuotes46>.fileUph<doubleQuotes46>));  <newline46mondego><newline46mondego>      filexh.addClickHandler(new ClickHandler() {<newline46mondego><newline46mondego>        @Override<newline46mondego>        public void onClick(ClickEvent event) {<newline46mondego>            conEnlaces.add(filex, new HtmlData(<doubleQuotes46>.resultado<doubleQuotes46>));<newline46mondego><newline46mondego>        }<newline46mondego>    });<newline46mondego><newline46mondego>        fupanel.add(conEnlaces);<newline46mondego>    }<newline46mondego>    return fupanel;<newline46mondego>  }<newline46mondego><newline46mondego>private native String getTablaEnlaces() /*-{<newline46mondego>  return [ '<table border=<doubleQuotes46>0<doubleQuotes46> cellspacing=<doubleQuotes46>0<doubleQuotes46> cellpadding=<doubleQuotes46>0<doubleQuotes46>>',<newline46mondego>      '<tr><td>',<newline46mondego>      '<table border=<doubleQuotes46>0<doubleQuotes46> width=<doubleQuotes46>75%<doubleQuotes46>>',<newline46mondego>      '<tr><td class=fileUph></td></tr>',     <newline46mondego>      '</table></td>',<newline46mondego>      '<td><table border=<doubleQuotes46>0<doubleQuotes46> style=<doubleQuotes46>margin-left: 25px;<doubleQuotes46>>',<newline46mondego>      '<tr><td class=resultado></td></tr>',<newline46mondego>      '</table>',<newline46mondego>      '</td></tr></table>'<newline46mondego>  ].join(<doubleQuotes46><doubleQuotes46>);<newline46mondego>}-*/;               <newline46mondego><newline46mondego>public void onModuleLoad() {<newline46mondego>    RootPanel.get().add(asWidget());<newline46mondego>  }<newline46mondego>"
"1856splitHere46","20138046splitHere46","private void uploadToServer(byte[] data) {<newline46mondego>    Bitmap bitmapOrg = BitmapFactory.decodeByteArray(data, 0, data.length);<newline46mondego>    ByteArrayOutputStream bao = new ByteArrayOutputStream();<newline46mondego>    bitmapOrg.compress(Bitmap.CompressFormat.JPEG, 90, bao);<newline46mondego>    byte[] ba = bao.toByteArray();<newline46mondego>    String ba1 = Base64.encodeBytes(ba);<newline46mondego>    final ArrayList<NameValuePair> nameValuePairs = new<newline46mondego>    ArrayList<NameValuePair>();<newline46mondego>    nameValuePairs.add(new BasicNameValuePair(<doubleQuotes46>image<doubleQuotes46>, ba1));<newline46mondego>    Thread t = new Thread() {<newline46mondego>        @Override<newline46mondego>        public void run() {<newline46mondego>            try {<newline46mondego>                HttpClient httpclient = new DefaultHttpClient();<newline46mondego>                HttpPost httppost = new<newline46mondego>                HttpPost(<doubleQuotes46>http://www.yoururl.com<doubleQuotes46>);<newline46mondego>                httppost.setEntity(new UrlEncodedFormEntity(nameValuePairs));<newline46mondego>                HttpResponse response = httpclient.execute(httppost);<newline46mondego>                // HttpEntity entity = response.getEntity();<newline46mondego><newline46mondego>                // is = entity.getContent();<newline46mondego>                // String the_string_response =<newline46mondego>                // convertResponseToString(response);<newline46mondego>                // Log.e(<doubleQuotes46>log_tag<doubleQuotes46>, <doubleQuotes46>Image Uploaded  <doubleQuotes46>+the_string_response);<newline46mondego>            } catch (Exception e) {<newline46mondego>                Log.e(<doubleQuotes46>log_tag<doubleQuotes46>, <doubleQuotes46>Error in http connection <doubleQuotes46> + e.toString());<newline46mondego>            }<newline46mondego>        }<newline46mondego>    };<newline46mondego><newline46mondego>}<newline46mondego>"
"1857splitHere46","20138046splitHere46","<?php<newline46mondego><newline46mondego>$base=$_REQUEST['image'];<newline46mondego><newline46mondego>echo $base;<newline46mondego><newline46mondego>// base64 encoded utf-8 string<newline46mondego><newline46mondego>$binary=base64_decode($base);<newline46mondego><newline46mondego>// binary, utf-8 bytes<newline46mondego><newline46mondego>header('Content-Type: bitmap; charset=utf-8');<newline46mondego><newline46mondego>// print($binary);<newline46mondego><newline46mondego>//$theFile = base64_decode($image_data);<newline46mondego><newline46mondego>$file = fopen('test.jpg', 'wb');<newline46mondego><newline46mondego>fwrite($file, $binary);<newline46mondego><newline46mondego>fclose($file);<newline46mondego><newline46mondego>echo '<img src=test.jpg>';<newline46mondego><newline46mondego>?><newline46mondego>"
"1858splitHere46","20138169splitHere46","JScrollPane#add"
"1859splitHere46","20138169splitHere46","JScrollPane"
"1860splitHere46","20138169splitHere46","JViewport"
"1861splitHere46","20138169splitHere46","JScrollPane"
"1862splitHere46","20138169splitHere46","setViewportView"
"1863splitHere46","20138169splitHere46","JScrollPane#getViewport#setView"
"1864splitHere46","20138169splitHere46","add"
"1865splitHere46","20138169splitHere46","JComponent"
"1866splitHere46","20138169splitHere46","Container"
"1867splitHere46","20138193splitHere46","HomeLoan[] hLoans = new HomeLoan[hHowMany];"
"1868splitHere46","20138193splitHere46","while"
"1869splitHere46","20138193splitHere46","while"
"1870splitHere46","20138193splitHere46","hLoans"
"1871splitHere46","20138193splitHere46","case <doubleQuotes46>h<doubleQuotes46>"
"1872splitHere46","20138193splitHere46","switch"
"1873splitHere46","20138193splitHere46","hLoans"
"1874splitHere46","20138193splitHere46","while"
"1875splitHere46","20138193splitHere46","while"
"1876splitHere46","20138193splitHere46","HomeLoan[] hLoans; // Before while<newline46mondego>while(aa) {<newline46mondego>...<newline46mondego>   switch..<newline46mondego>   case <doubleQuotes46>h<doubleQuotes46>: hLoans = new HomeLoan[hHowMany];<newline46mondego>}<newline46mondego>printHLoans(hLoans);<newline46mondego>"
"1877splitHere46","20138323splitHere46","final List<Integer> list = new ArrayList<Integer>();<newline46mondego>list.add(1);<newline46mondego>list.add(2);<newline46mondego>list.add(3);<newline46mondego>list.addAll(Collections.nCopies(8, 1));<newline46mondego>"
"1878splitHere46","20138323splitHere46","Collections.nCopies()"
"1879splitHere46","20138347splitHere46","<%@include file=<doubleQuotes46>example2.jsp<doubleQuotes46> %>"
"1880splitHere46","20138347splitHere46","<%@include file=<doubleQuotes46>example3.jsp<doubleQuotes46> %>"
"1881splitHere46","20138368splitHere46","data"
"1882splitHere46","20138368splitHere46","dependencies { runtime project(<doubleQuotes46>:data<doubleQuotes46>) }"
"1883splitHere46","20138368splitHere46","data"
"1884splitHere46","20138368splitHere46","sourceSets.main.resources.srcDir <doubleQuotes46>../date/main/resources<doubleQuotes46>; sourceSets.test.resources.srcDir <doubleQuotes46>../data/test/resources<doubleQuotes46>"
"1885splitHere46","20138469splitHere46","try<newline46mondego> {<newline46mondego> FileInputStream in = new FileInputStream(<doubleQuotes46>records.txt<doubleQuotes46>);<newline46mondego> BufferedReader br = new BufferedReader(new InputStreamReader(in));<newline46mondego> String strLine;<newline46mondego> StringBuffer sb = new StringBuffer();<newline46mondego> while((strLine = br.readLine())!= null)<newline46mondego> {<newline46mondego>     sb.append(strLine +<doubleQuotes46>\n<doubleQuotes46>);<newline46mondego> }<newline46mondego> JOptionPane.showMessageDialog( null, sb.toString());<newline46mondego> }catch(Exception e){<newline46mondego> JOptionPane.showOptionDialog(null, <doubleQuotes46>Error<doubleQuotes46>, <doubleQuotes46>Customers<doubleQuotes46>,       JOptionPane.PLAIN_MESSAGE,JOptionPane.QUESTION_MESSAGE, null, options, options[0]);<newline46mondego> }<newline46mondego>"
"1886splitHere46","20138524splitHere46","Document doc = new SAXBuilder().build(new File(<doubleQuotes46>ACL.xml<doubleQuotes46>));<newline46mondego>    Element root = doc.getRootElement();<newline46mondego>    for (Element testcase : root.getChildren()) {<newline46mondego>        int id = Integer.parseInt(testcase.getChildText(<doubleQuotes46>id<doubleQuotes46>));<newline46mondego>        String name = testcase.getChildText(<doubleQuotes46>testCaseName<doubleQuotes46>);<newline46mondego>        String expect = testcase.getChildText(<doubleQuotes46>expectedResult<doubleQuotes46>);<newline46mondego>        Map<String,String> params = new LinkedHashMap<String,String>();<newline46mondego>        Element parmemt = testcase.getChild(<doubleQuotes46>parameter<doubleQuotes46>);<newline46mondego>        if (parmemt != null) {<newline46mondego>            Iterator<Element> it = parmemt.getChildren().iterator();<newline46mondego>            while (it.hasNext()) {<newline46mondego>                Element key = it.next();<newline46mondego>                if (!<doubleQuotes46>key<doubleQuotes46>.equals(key.getName())) {<newline46mondego>                    throw new IllegalStateException(<doubleQuotes46>Expected key but got <doubleQuotes46> + key);<newline46mondego>                }<newline46mondego>                if (!it.hasNext()) {<newline46mondego>                    throw new IllegalStateException(<doubleQuotes46>Expected value for key <doubleQuotes46> + key);<newline46mondego>                }<newline46mondego>                Element val = it.next();<newline46mondego>                if (!<doubleQuotes46>value<doubleQuotes46>.equals(val.getName())) {<newline46mondego>                    throw new IllegalStateException(<doubleQuotes46>Expected value but got <doubleQuotes46> + val);<newline46mondego>                }<newline46mondego>                params.put(key.getValue(), val.getValue());<newline46mondego>            }<newline46mondego>        }<newline46mondego>        System.out.printf(<doubleQuotes46>Processing test case %d -> %s\n    Expect %s\n    Parameters: %s\n<doubleQuotes46>,<newline46mondego>             id, name, expect, params.toString());<newline46mondego>    }<newline46mondego>"
"1887splitHere46","20138524splitHere46","Processing test case 1 -> EditTest<newline46mondego>    Expect nooptionsacltrue<newline46mondego>    Parameters: {}<newline46mondego>Processing test case 2 -> AddTest<newline46mondego>    Expect featuresaddedacltrue<newline46mondego>    Parameters: {featues=w,f}<newline46mondego>Processing test case 3 -> AddTest<newline46mondego>    Expect duplicateacltrue<newline46mondego>    Parameters: {projectType=NEW, Name=28HPM, status=ACTIVE, canOrder=Yes}<newline46mondego>"
"1888splitHere46","20138530splitHere46","newcaseid"
"1889splitHere46","20138530splitHere46","<x:parse xml=<doubleQuotes46>${xml}<doubleQuotes46> var=<doubleQuotes46>output<doubleQuotes46>/><newline46mondego><ul class=<doubleQuotes46>list<doubleQuotes46>><newline46mondego>  <x:forEach select=<doubleQuotes46>$output/knowledgecases/knowledgecase/caseid<doubleQuotes46> var=<doubleQuotes46>newcaseid<doubleQuotes46>><newline46mondego>     <c:set var=<doubleQuotes46>current<doubleQuotes46>><x:out select=<doubleQuotes46>$newcaseid<doubleQuotes46>/></c:set><newline46mondego>     <li>adjacent case <c:out value=<doubleQuotes46>${current + 1}<doubleQuotes46> /></li><newline46mondego>  </x:forEach><newline46mondego></ul><newline46mondego>"
"1890splitHere46","20138539splitHere46","userAnswer = Integer.parseInt(answer);<newline46mondego>"
"1891splitHere46","20138539splitHere46","try {<newline46mondego>                    userAnswer = Integer.parseInt(answer);//Add this line here <newline46mondego>                    if (userAnswer == 5) {<newline46mondego>                        JOptionPane.showMessageDialog(null, <doubleQuotes46>Good!!<doubleQuotes46>);<newline46mondego>                        score = score + awarded;<newline46mondego>                    }<newline46mondego><newline46mondego>                    else {<newline46mondego>                        JOptionPane.showMessageDialog(null,<newline46mondego>                                <doubleQuotes46>Not Even Close!<doubleQuotes46>);<newline46mondego>                    }<newline46mondego>                } catch (NumberFormatException e) {<newline46mondego>                    System.out.println(<doubleQuotes46>enter a number<doubleQuotes46>);<newline46mondego>                }<newline46mondego>"
"1892splitHere46","20138598splitHere46","return new Variable((sum/2) - Math.sqrt( ((sum/2) * (sum/2)) - product), sum - x);<newline46mondego>"
"1893splitHere46","20138646splitHere46","engData.replace(<doubleQuotes46>'<doubleQuotes46>, <doubleQuotes46>\\\'<doubleQuotes46>);<newline46mondego>"
"1894splitHere46","20138765splitHere46","bw.write(s);"
"1895splitHere46","20138765splitHere46","toString"
"1896splitHere46","20138765splitHere46","import java.io.BufferedWriter;<newline46mondego>    import java.io.FileWriter;<newline46mondego>    import java.io.IOException;<newline46mondego><newline46mondego>    import javax.swing.JOptionPane;<newline46mondego><newline46mondego>    public class Customer<newline46mondego>    {<newline46mondego><newline46mondego>        private final String firstName;<newline46mondego><newline46mondego>        private final String lastName;<newline46mondego><newline46mondego>        private final String address;<newline46mondego><newline46mondego>        private final int    age;<newline46mondego><newline46mondego>        private final int    id;<newline46mondego><newline46mondego>        public Customer(String firstName, String lastName, String address, int age,<newline46mondego>                int id)<newline46mondego>        {<newline46mondego>            super();<newline46mondego>            this.firstName = firstName;<newline46mondego>            this.lastName = lastName;<newline46mondego>            this.address = address;<newline46mondego>            this.age = age;<newline46mondego>            this.id = id;<newline46mondego>        }<newline46mondego><newline46mondego>        @Override<newline46mondego>        public String toString ()<newline46mondego>        {<newline46mondego>            return <doubleQuotes46>Customer [firstName=<doubleQuotes46> + firstName + <doubleQuotes46>, lastName=<doubleQuotes46> + lastName<newline46mondego>                    + <doubleQuotes46>, address=<doubleQuotes46> + address + <doubleQuotes46>, age=<doubleQuotes46> + age + <doubleQuotes46>]<doubleQuotes46>;<newline46mondego>        }<newline46mondego><newline46mondego>        public static void main (String[] args)<newline46mondego>        {<newline46mondego><newline46mondego>        }<newline46mondego><newline46mondego>        public void writetofile (String custname, String custlname, int agee,<newline46mondego>                String address, int age)<newline46mondego>        {<newline46mondego><newline46mondego>            Customer customer = new Customer(custname, custlname, address, age, id);<newline46mondego>            try (BufferedWriter bw = new BufferedWriter(new FileWriter(<newline46mondego>                    <doubleQuotes46>records.txt<doubleQuotes46>, true)))<newline46mondego>            {<newline46mondego>                String s = customer.toString();<newline46mondego>                bw.write(s);<newline46mondego>                bw.newLine();<newline46mondego>                bw.flush();<newline46mondego>            }<newline46mondego><newline46mondego>            catch (IOException ex)<newline46mondego>            {<newline46mondego>                JOptionPane.showMessageDialog(null, <doubleQuotes46>Error In File<doubleQuotes46>);<newline46mondego>            }<newline46mondego>        }<newline46mondego><newline46mondego>    }<newline46mondego>"
"1897splitHere46","20138841splitHere46","for(int i=0;i<in_vid.length();i++) {<newline46mondego>            char ch = in_vid.charAt(i);<newline46mondego>       if( Character.isDigit(ch)) {<newline46mondego>//   do something<newline46mondego>}<newline46mondego>    }<newline46mondego>"
"1898splitHere46","20138928splitHere46","<?xml version=<doubleQuotes46>1.0<doubleQuotes46> encoding=<doubleQuotes46>utf-8<doubleQuotes46>?><newline46mondego><LinearLayout xmlns:android=<doubleQuotes46>http://schemas.android.com/apk/res/android<doubleQuotes46><newline46mondego>android:layout_width=<doubleQuotes46>fill_parent<doubleQuotes46><newline46mondego>android:layout_height=<doubleQuotes46>fill_parent<doubleQuotes46><newline46mondego>android:orientation=<doubleQuotes46>vertical<doubleQuotes46> ><newline46mondego><newline46mondego><RadioGroup<newline46mondego>    android:id=<doubleQuotes46>@+id/radioSex<doubleQuotes46><newline46mondego>    android:layout_width=<doubleQuotes46>wrap_content<doubleQuotes46><newline46mondego>    android:layout_height=<doubleQuotes46>wrap_content<doubleQuotes46> ><newline46mondego><newline46mondego>    <RadioButton<newline46mondego>        android:id=<doubleQuotes46>@+id/radioMale<doubleQuotes46><newline46mondego>        android:layout_width=<doubleQuotes46>wrap_content<doubleQuotes46><newline46mondego>        android:layout_height=<doubleQuotes46>wrap_content<doubleQuotes46><newline46mondego>        android:text=<doubleQuotes46>@string/radio_male<doubleQuotes46> <newline46mondego>        android:checked=<doubleQuotes46>true<doubleQuotes46> /><newline46mondego><newline46mondego>    <RadioButton<newline46mondego>        android:id=<doubleQuotes46>@+id/radioFemale<doubleQuotes46><newline46mondego>        android:layout_width=<doubleQuotes46>wrap_content<doubleQuotes46><newline46mondego>        android:layout_height=<doubleQuotes46>wrap_content<doubleQuotes46><newline46mondego>        android:text=<doubleQuotes46>@string/radio_female<doubleQuotes46> /><newline46mondego><newline46mondego></RadioGroup><newline46mondego><newline46mondego><Button<newline46mondego>    android:id=<doubleQuotes46>@+id/btnDisplay<doubleQuotes46><newline46mondego>    android:layout_width=<doubleQuotes46>wrap_content<doubleQuotes46><newline46mondego>    android:layout_height=<doubleQuotes46>wrap_content<doubleQuotes46><newline46mondego>    android:text=<doubleQuotes46>@string/btn_display<doubleQuotes46> /><newline46mondego><newline46mondego></LinearLayout><newline46mondego>"
"1899splitHere46","20138928splitHere46","package com.mkyong.android;<newline46mondego><newline46mondego>import android.app.Activity;<newline46mondego>import android.os.Bundle;<newline46mondego>import android.view.View;<newline46mondego>import android.view.View.OnClickListener;<newline46mondego>import android.widget.Button;<newline46mondego>import android.widget.RadioButton;<newline46mondego>import android.widget.RadioGroup;<newline46mondego>import android.widget.Toast;<newline46mondego><newline46mondego>public class MyAndroidAppActivity extends Activity {<newline46mondego>private RadioGroup radioSexGroup;<newline46mondego>private RadioButton radioSexButton;<newline46mondego>private Button btnDisplay;<newline46mondego><newline46mondego>@Override<newline46mondego>public void onCreate(Bundle savedInstanceState) {<newline46mondego>super.onCreate(savedInstanceState);<newline46mondego>setContentView(R.layout.main);<newline46mondego><newline46mondego>addListenerOnButton();<newline46mondego><newline46mondego>}<newline46mondego><newline46mondego>public void addListenerOnButton() {<newline46mondego><newline46mondego>radioSexGroup = (RadioGroup) findViewById(R.id.radioSex);<newline46mondego>btnDisplay = (Button) findViewById(R.id.btnDisplay);<newline46mondego><newline46mondego>btnDisplay.setOnClickListener(new OnClickListener() {<newline46mondego><newline46mondego>    @Override<newline46mondego>    public void onClick(View v) {<newline46mondego><newline46mondego>            // get selected radio button from radioGroup<newline46mondego>        int selectedId = radioSexGroup.getCheckedRadioButtonId();<newline46mondego><newline46mondego>        // find the radiobutton by returned id<newline46mondego>            radioSexButton = (RadioButton) findViewById(selectedId);<newline46mondego><newline46mondego>        Toast.makeText(MyAndroidAppActivity.this,<newline46mondego>            radioSexButton.getText(), Toast.LENGTH_SHORT).show();<newline46mondego><newline46mondego>    }<newline46mondego><newline46mondego>});<newline46mondego><newline46mondego>  }<newline46mondego>}<newline46mondego>"
"1900splitHere46","20138933splitHere46","MM"
"1901splitHere46","20138933splitHere46","mm"
"1902splitHere46","20139036splitHere46","mouseClicked(MouseEvent)"
"1903splitHere46","20139036splitHere46","tabLabel"
"1904splitHere46","20139036splitHere46","tabLabel.getText()"
"1905splitHere46","20139223splitHere46","stage.focusedProperty().addListener(new ChangeListener<Boolean><newline46mondego>    () {<newline46mondego><newline46mondego>        @Override<newline46mondego>        public void changed(ObservableValue<? extends Boolean> ov, Boolean t, Boolean t1) {<newline46mondego>           if(t1==false)<newline46mondego>           {<newline46mondego>               System.out.println(<doubleQuotes46>focus losted<doubleQuotes46>);<newline46mondego>               btn.getScene().getWindow().hide();<newline46mondego>           }<newline46mondego>        }<newline46mondego>    });<newline46mondego>"
"1906splitHere46","20139380splitHere46","public class main {<newline46mondego><newline46mondego>  int n;<newline46mondego>  int i;<newline46mondego>  public main() {<newline46mondego>    n = 1;<newline46mondego>    System.out.print(n + i);<newline46mondego>  }<newline46mondego><newline46mondego>  public number(){<newline46mondego>    i = 1;<newline46mondego>  }<newline46mondego>}<newline46mondego>"
"1907splitHere46","20139454splitHere46","Ini"
"1908splitHere46","20139454splitHere46","setConfig"
"1909splitHere46","20139454splitHere46","Config"
"1910splitHere46","20139454splitHere46","escape"
"1911splitHere46","20139718splitHere46","JComponent"
"1912splitHere46","20139718splitHere46","JTable"
"1913splitHere46","20139718splitHere46","Model"
"1914splitHere46","20139718splitHere46","- Boolean â€” rendered with a check box.<newline46mondego>- Number â€” rendered by a right-aligned label.<newline46mondego>- Double, Float â€” same as Number, but the object-to-text translation is performed <newline46mondego>  by a NumberFormat instance (using the default number format for the current locale).<newline46mondego>- Date â€” rendered by a label, with the object-to-text translation performed <newline46mondego>  by a DateFormat instance (using a short style for the date and time).<newline46mondego>- ImageIcon, Icon â€” rendered by a centered label.<newline46mondego>- Object â€” rendered by a label that displays the object's string value.<newline46mondego>"
"1915splitHere46","20139718splitHere46","Renderer"
"1916splitHere46","20139718splitHere46","JLabel"
"1917splitHere46","20139718splitHere46","JComponent"
"1918splitHere46","20139720splitHere46","protected Void doInBackground(String airfield)<newline46mondego>"
"1919splitHere46","20139720splitHere46","protected Void doInBackground(String... airfield)<newline46mondego>"
"1920splitHere46","20139720splitHere46","protected Void doInBackground(String[] airfield)<newline46mondego>"
"1921splitHere46","20139720splitHere46","try {<newline46mondego>        doc = Jsoup<newline46mondego>                .connect(<newline46mondego>                        <doubleQuotes46>https://pilotweb.nas.faa.gov/PilotWeb/notamRetrievalByICAOAction.do?method=displayByICAOs<doubleQuotes46>)<newline46mondego>                .data(<doubleQuotes46>retrieveLocId<doubleQuotes46>, airfield[0])<newline46mondego>                .data(<doubleQuotes46>formatType<doubleQuotes46>, <doubleQuotes46>ICAO<doubleQuotes46>)<newline46mondego>                .data(<doubleQuotes46>reportType<doubleQuotes46>, <doubleQuotes46>REPORT<doubleQuotes46>)<newline46mondego>                .data(<doubleQuotes46>actionType<doubleQuotes46>, <doubleQuotes46>notamRetrievalByICAOs<doubleQuotes46>)<newline46mondego>                // .userAgent(<doubleQuotes46>Mozilla<doubleQuotes46>)<newline46mondego>                // .cookie(<doubleQuotes46>auth<doubleQuotes46>, <doubleQuotes46>token<doubleQuotes46>)<newline46mondego>                .timeout(3000).post();<newline46mondego>    } catch (IOException e) {<newline46mondego>        // TODO Auto-generated catch block<newline46mondego>        e.printStackTrace();<newline46mondego>    }<newline46mondego>"
"1922splitHere46","20139780splitHere46","@OneToMany<newline46mondego>@Sort(...)<newline46mondego>private Set<Student> students; //note leave as Set<newline46mondego>"
"1923splitHere46","20139798splitHere46","equals()"
"1924splitHere46","20139798splitHere46","equals()"
"1925splitHere46","20139798splitHere46","equals"
"1926splitHere46","20139798splitHere46","hashCode"
"1927splitHere46","20139798splitHere46","TIntArrayList"
"1928splitHere46","20139934splitHere46","renderer.setAnnotationsTextSize(size);<newline46mondego>"
"1929splitHere46","20139958splitHere46","size()"
"1930splitHere46","20139958splitHere46","import java.util.ArrayList;<newline46mondego>import java.util.List;<newline46mondego><newline46mondego>public class Visitors {<newline46mondego><newline46mondego>    private final List<Visitor> visitors;<newline46mondego><newline46mondego>    public Visitors() {<newline46mondego>        this.visitors = new ArrayList<Visitor>(); //Initialise the list within the constructor here.<newline46mondego>    }<newline46mondego><newline46mondego>    public void AdmitNewVisitor(final String theName, final String theGender, final int theAge, final String theCitizenship ) {<newline46mondego>        //create your new visitor with the new keyword. Then add it to the list of visitors.<newline46mondego>        final Visitor visitor = new Visitor(theName, theGender, theAge, theCitizenship);<newline46mondego>        this.visitors.add( visitor );<newline46mondego>    }<newline46mondego><newline46mondego>    public Integer getNumberOfVisitors() {<newline46mondego>        //There's no need to maintain the number of visitors yourself, you can let the List do it.<newline46mondego>        return this.visitors.size();<newline46mondego>    }<newline46mondego>}<newline46mondego>"
"1931splitHere46","20139958splitHere46","public class Visitor {<newline46mondego><newline46mondego>    private final String theName;<newline46mondego>    private final String theGender;<newline46mondego>    private final int theAge;<newline46mondego>    private final String theCitizenship;<newline46mondego><newline46mondego>    public Visitor(final String theName, final String theGender, final int theAge, final String theCitizenship) {<newline46mondego>        this.theName = theName;<newline46mondego>        this.theGender = theGender;<newline46mondego>        this.theAge = theAge;<newline46mondego>        this.theCitizenship = theCitizenship;<newline46mondego>    }<newline46mondego><newline46mondego>    public String getTheCitizenship() {<newline46mondego>        return theCitizenship;<newline46mondego>    }<newline46mondego><newline46mondego>    public int getTheAge() {<newline46mondego>        return theAge;<newline46mondego>    }<newline46mondego><newline46mondego>    public String getTheGender() {<newline46mondego>        return theGender;<newline46mondego>    }<newline46mondego><newline46mondego>    public String getTheName() {<newline46mondego>        return theName;<newline46mondego>    }<newline46mondego>}<newline46mondego>"
"1932splitHere46","20139958splitHere46","( this.visitors.length - 1 )"
"1933splitHere46","20139958splitHere46","Visitor.new(the_name, the_gender, the_age, the_citizenship)"
"1934splitHere46","20139958splitHere46","new Visitor(theName, theGender, theAge, theCitizenship)"
"1935splitHere46","20139958splitHere46","@num_visitors"
"1936splitHere46","20139958splitHere46","admitNewVisitor"
"1937splitHere46","20139958splitHere46","public class Visitors {<newline46mondego><newline46mondego>    private int numberOfVisitors = 0;<newline46mondego>    private final Visitor[] visitors;<newline46mondego><newline46mondego>    public Visitors() {<newline46mondego>        this.visitors = new Visitor[250];<newline46mondego>    }<newline46mondego><newline46mondego>    public void AdmitNewVisitor(final String theName, final String theGender, final int theAge, final String theCitizenship ) {<newline46mondego>        final Visitor visitor = new Visitor(theName, theGender, theAge, theCitizenship);<newline46mondego>        this.visitors[this.numberOfVisitors] = visitor;<newline46mondego>        this.numberOfVisitors++;<newline46mondego>    }<newline46mondego><newline46mondego>    public Integer getNumberOfVisitors() {<newline46mondego>        return this.numberOfVisitors;<newline46mondego>    }<newline46mondego>}<newline46mondego>"
"1938splitHere46","20139958splitHere46","@Test<newline46mondego>public void thatnumberOfVisitorsIncreasesWhenAVisitorIsAdmitted() {<newline46mondego>    final Visitors visitors = new Visitors();<newline46mondego><newline46mondego>    Assert.assertEquals(visitors.getNumberOfVisitors(), (Integer) 0);<newline46mondego><newline46mondego>    visitors.AdmitNewVisitor(<doubleQuotes46>name<doubleQuotes46>, <doubleQuotes46>male<doubleQuotes46>, 50, <doubleQuotes46>British<doubleQuotes46>);<newline46mondego><newline46mondego>    Assert.assertEquals(visitors.getNumberOfVisitors(), (Integer) 1);<newline46mondego><newline46mondego>    visitors.AdmitNewVisitor(<doubleQuotes46>name2<doubleQuotes46>, <doubleQuotes46>female<doubleQuotes46>, 48, <doubleQuotes46>British<doubleQuotes46>);<newline46mondego><newline46mondego>    Assert.assertEquals(visitors.getNumberOfVisitors(), (Integer) 2);<newline46mondego>}<newline46mondego>"
"1939splitHere46","20140013splitHere46","<servlet><newline46mondego>            <servlet-name>dispatcher</servlet-name><newline46mondego>            <servlet-class>org.springframework.web.servlet.DispatcherServlet</servlet-class><newline46mondego>            <init-param><newline46mondego>                <param-name>contextConfigLocation</param-name><newline46mondego>                <param-value>/WEB-INF/dispatcher-servlet.xml</param-value><newline46mondego>            </init-param><newline46mondego>            <load-on-startup>1</load-on-startup><newline46mondego>    </servlet><newline46mondego>"
"1940splitHere46","20140283splitHere46","public class SumValue{<newline46mondego>   private BigInteger myId; <newline46mondego>   private String myName;<newline46mondego>   private BigInteger myOrder;<newline46mondego>   private BigInteger mySum;<newline46mondego>   ....<newline46mondego>   getters and setters here<newline46mondego>   ....<newline46mondego>}<newline46mondego>"
"1941splitHere46","20140283splitHere46","SELECT id as <doubleQuotes46>myId<doubleQuotes46>,<newline46mondego>       name as <doubleQuotes46>myName<doubleQuotes46>,<newline46mondego>       order as <doubleQuotes46>myOrder<doubleQuotes46>,<newline46mondego>       SUM(CASE<newline46mondego>       WHEN pv.value_id = 1 <newline46mondego>        AND pv.value=1 THEN 1 ELSE 0 END) AS <doubleQuotes46>mySum<doubleQuotes46><newline46mondego>"
"1942splitHere46","20140283splitHere46","List<SumValue> jobStateViewList = (List<SumValue>)getSessionFactory().getCurrentSession()<newline46mondego>                                   .createSQLQuery(yourQuery)<newline46mondego>                                   .setResultTransformer(<newline46mondego>                                        new AliasToBeanResultTransformer(SumValue.class)<newline46mondego>                                   ).list();<newline46mondego>"
"1943splitHere46","20140313splitHere46","file2 = bytes.toString();<newline46mondego>"
"1944splitHere46","20140313splitHere46","byte[]"
"1945splitHere46","20140313splitHere46","ByteArrayInputStream"
"1946splitHere46","20140313splitHere46","ImageIO.read()"
"1947splitHere46","20140313splitHere46","InputStream in = new ByteArrayInputStream(bytes);<newline46mondego>Image img = ImageIO.read(in);<newline46mondego>"
"1948splitHere46","20140406splitHere46","session = NotesFactory.createSession(DOMINO_SERVER, DOMINO_USER, DOMINO_PW);<newline46mondego>if ( session == null ) {<newline46mondego>//do something<newline46mondego>}<newline46mondego>DbDirectory dir = session.getDbDirectory(null);<newline46mondego>db = dir.openDatabase(DOMINO_DATABASE);<newline46mondego>"
"1949splitHere46","20140441splitHere46","new"
"1950splitHere46","20140441splitHere46","SaveAction action = new SaveAction();<newline46mondego>// don't expect any injection has happened - it can't! no magic!<newline46mondego>// action.bean is still null here!<newline46mondego>"
"1951splitHere46","20140441splitHere46","@Default"
"1952splitHere46","20140458splitHere46","defaultPage()"
"1953splitHere46","20140458splitHere46","PageFormat"
"1954splitHere46","20140458splitHere46","setImageableArea()"
"1955splitHere46","20140458splitHere46","paper.setImageableArea(0, 0, width, height);"
"1956splitHere46","20140481splitHere46","Select dropdown = new Select(driver.findElement(By.id(<doubleQuotes46>identifier<doubleQuotes46>)));<newline46mondego>"
"1957splitHere46","20140481splitHere46","<html><newline46mondego><body><newline46mondego><select id = <doubleQuotes46>designation<doubleQuotes46>><newline46mondego><option value = <doubleQuotes46>MD<doubleQuotes46>>MD</option><newline46mondego><option value = <doubleQuotes46>prog<doubleQuotes46>> Programmer </option><newline46mondego><option value = <doubleQuotes46>CEO<doubleQuotes46>> CEO </option><newline46mondego></option><newline46mondego></select><newline46mondego><body><newline46mondego></html><newline46mondego>"
"1958splitHere46","20140481splitHere46","Select dropdown = new Select(driver.findElement(By.id(<doubleQuotes46>designation<doubleQuotes46>)));"
"1959splitHere46","20140481splitHere46","dropdown.selectByVisibleText(<doubleQuotes46>Programmer <doubleQuotes46>);"
"1960splitHere46","20140481splitHere46","dropdown.selectByIndex(1);"
"1961splitHere46","20140481splitHere46","dropdown.selectByValue(<doubleQuotes46>prog<doubleQuotes46>);<newline46mondego>"
"1962splitHere46","20140699splitHere46","int"
"1963splitHere46","20140699splitHere46","byte r = (byte)((couleur >> 16) & 0x000000ff);<newline46mondego>byte g = (byte)((couleur >> 8) & 0x000000ff);<newline46mondego>byte b = (byte)(couleur & 0x000000ff);<newline46mondego>"
"1964splitHere46","20140699splitHere46","String"
"1965splitHere46","20140762splitHere46","<set-properties-rule><newline46mondego>  <ignore attr-name=<doubleQuotes46>IsTerritory<doubleQuotes46> /><newline46mondego></set-properties-rule><newline46mondego>"
"1966splitHere46","20140762splitHere46","<set-properties-rule/><newline46mondego>"
"1967splitHere46","20140765splitHere46","/META-INF/testing.tld<newline46mondego>/test/StubCTag.class<newline46mondego>"
"1968splitHere46","20140781splitHere46","t.getClass().getSimpleName().toLowerCase().equals(<doubleQuotes46>nosuchelementexception<doubleQuotes46>)<newline46mondego>"
"1969splitHere46","20140810splitHere46","public class Test {<newline46mondego><newline46mondego>public static void main(String[] args) throws Exception {<newline46mondego>   solve();<newline46mondego>}<newline46mondego><newline46mondego>public static void solve() throws Exception {<newline46mondego><newline46mondego>    BufferedReader reader = new BufferedReader(new InputStreamReader(System.in));<newline46mondego>    int testcases = Integer.parseInt(reader.readLine());<newline46mondego><newline46mondego>    int i = 0;<newline46mondego>    for (i = 0; i < testcases; ++i) {<newline46mondego>        int n = Integer.parseInt(reader.readLine());<newline46mondego>        int[][] result ;<newline46mondego><newline46mondego>        result = parseInput(reader, n);<newline46mondego><newline46mondego>        System.out.println(<doubleQuotes46>####<doubleQuotes46>);<newline46mondego>        for(int j=0;j<n;++j){<newline46mondego>            for(int k=0;k<n;++k){<newline46mondego>                System.out.print(result[j][k] + <doubleQuotes46> <doubleQuotes46>);<newline46mondego>            }<newline46mondego>            System.out.println();<newline46mondego>        }<newline46mondego>        System.out.println(<doubleQuotes46>####<doubleQuotes46>);<newline46mondego>    }<newline46mondego>}<newline46mondego><newline46mondego>public static int[][] parseInput(BufferedReader reader, int n) throws Exception {<newline46mondego><newline46mondego>    int[][] result = new int[n][n];<newline46mondego><newline46mondego>    String line;<newline46mondego>    int i = 0;<newline46mondego>    for (i = 0; i < n; ++i) {<newline46mondego>        line = reader.readLine();<newline46mondego>        for (int j = 0; j < n; j++) {<newline46mondego>            result[i][j] = line.charAt(j);<newline46mondego>        }<newline46mondego>    }<newline46mondego><newline46mondego>    return result;<newline46mondego>}<newline46mondego>}<newline46mondego>"
"1970splitHere46","20140813splitHere46","<a href=<doubleQuotes46>http://docs.oracle.com/cd/E11882_01/appdev.112/e13995/oracle/jdbc/OracleCallableStatement.html<doubleQuotes46> rel=<doubleQuotes46>nofollow<doubleQuotes46>>CallableStatement</a></Code>. It works, but tell me if there's a better solution!</p><newline46mondego><newline46mondego><pre><code>String funcCall = <doubleQuotes46>{? = call schema.mypkg.somefunc(?)}<doubleQuotes46>;<newline46mondego>Connection conn = ((SessionImpl)em.getDelegate()).connection();<newline46mondego>CallableStatement stmt = conn.prepareCall(funcCall);<newline46mondego>stmt.setInt(2, 42);<newline46mondego>stmt.registerOutParameter(1, Types.CHAR);<newline46mondego>stmt.executeUpdate();<newline46mondego>String result = stmt.getString(1);<newline46mondego>"
"1971splitHere46","20140928splitHere46","Image createImage(URL url)<br/><newline46mondego>Image getImage(URL url)<br/><newline46mondego>"
"1972splitHere46","20140928splitHere46","createImage()"
"1973splitHere46","20140928splitHere46","getImage()"
"1974splitHere46","20140928splitHere46","getImage()"
"1975splitHere46","20140993splitHere46","Statement s;<newline46mondego>         Connection c;      <newline46mondego>         FileInputStream fis;<newline46mondego>         PreparedStatement ps;<newline46mondego>         File file; <newline46mondego>         try<newline46mondego>        {<newline46mondego>               Class.forName(<doubleQuotes46>sun.jdbc.odbc.JdbcOdbcDriver<doubleQuotes46>);//your driver<newline46mondego>               c=DriverManager.getConnection(<doubleQuotes46>Jdbc:Odbc:image<doubleQuotes46>,<doubleQuotes46>scott<doubleQuotes46>,<doubleQuotes46>tiger<doubleQuotes46>);//password and name changes according to your db<newline46mondego>               s=c.createStatement();   <newline46mondego>               st.execute(<doubleQuotes46>Create table ImageStoring(Image_No number(5),Photo blob)<doubleQuotes46>);<newline46mondego>         }<newline46mondego>         catch(Exception e1) <newline46mondego>        {<newline46mondego>               e1.printStackTrace();<newline46mondego>         }  <newline46mondego><newline46mondego>         try<newline46mondego>        {       <newline46mondego>               file=new File<doubleQuotes46>D:/ARU/Aruphotos/4.jpg<doubleQuotes46>);<newline46mondego>               fis=new FileInputStream(file);<newline46mondego><newline46mondego>               Class.forName(<doubleQuotes46>sun.jdbc.odbc.JdbcOdbcDriver<doubleQuotes46>);<newline46mondego>               c=DriverManager.getConnection(<doubleQuotes46>Jdbc:Odbc:image<doubleQuotes46>,<doubleQuotes46>scott<doubleQuotes46>,<doubleQuotes46>tiger<doubleQuotes46>);<newline46mondego>               s=c.createStatement();<newline46mondego><newline46mondego>               ps=c.prepareStatement(<doubleQuotes46>insert into ImageStoring values(?,?)<doubleQuotes46>);<newline46mondego>               ps.setInt(1,2);<newline46mondego>               ps.setBinaryStream(2,fis,(int)file.length());<newline46mondego>               System.out.println(<doubleQuotes46>success<doubleQuotes46>);<newline46mondego>               ps.execute();<newline46mondego>               ps.close();<newline46mondego>               c.close();<newline46mondego>         }<newline46mondego>         catch(Exception e)<newline46mondego>         {<newline46mondego>               e.printStackTrace();<newline46mondego>         }<newline46mondego>     }<newline46mondego>"
"1976splitHere46","20141025splitHere46","if(<doubleQuotes46>5<doubleQuotes46>.equals(expArray[i]))<newline46mondego>"
"1977splitHere46","20141103splitHere46","Pixel.getRed()"
"1978splitHere46","20141103splitHere46","Color(float, float, float)"
"1979splitHere46","20141103splitHere46","Color(int, int, int)"
"1980splitHere46","20141103splitHere46","0.9"
"1981splitHere46","20141103splitHere46","Color newColor = new Color((int)(amountRed*0.9), (int)(amountGreen*0.9), (int)(amountBlue*0.9));<newline46mondego>"
"1982splitHere46","20141323splitHere46","answer = myScanner.next();<newline46mondego>"
"1983splitHere46","20141323splitHere46","answer = myScanner.nextLine();<newline46mondego>"
"1984splitHere46","20141465splitHere46","%f"
"1985splitHere46","20141465splitHere46","%.2f"
"1986splitHere46","20141465splitHere46","System.out.printf(<doubleQuotes46>%f<doubleQuotes46>,2.00-1.10);<newline46mondego>"
"1987splitHere46","20141465splitHere46","System.out.printf(<doubleQuotes46>%.1f<doubleQuotes46>,2.00-1.10);<newline46mondego>"
"1988splitHere46","20141465splitHere46","%[flags][width][.precision][argsize]typechar <newline46mondego>"
"1989splitHere46","20141583splitHere46","sonarProperties {<newline46mondego>    property <doubleQuotes46>sonar.host.url<doubleQuotes46>, <doubleQuotes46>http://sonar.someserver.int<doubleQuotes46><newline46mondego>    property <doubleQuotes46>sonar.jdbc.url<doubleQuotes46>, <doubleQuotes46>jdbc:mysql://sonar.someserver.int:3306/sonar<doubleQuotes46><newline46mondego>    property <doubleQuotes46>sonar.jdbc.driverClassName<doubleQuotes46>, <doubleQuotes46>com.mysql.jdbc.Driver<doubleQuotes46><newline46mondego>    property <doubleQuotes46>sonar.jdbc.username<doubleQuotes46>, <doubleQuotes46>*****<doubleQuotes46><newline46mondego>    property <doubleQuotes46>sonar.jdbc.password<doubleQuotes46>, <doubleQuotes46>*****<doubleQuotes46><newline46mondego><newline46mondego>    //I added these properties to my gradle.build<newline46mondego>    property <doubleQuotes46>sonar.projectKey<doubleQuotes46>, <doubleQuotes46>GradleAndroidTest<doubleQuotes46><newline46mondego>    property <doubleQuotes46>sonar.projectName<doubleQuotes46>, <doubleQuotes46>GradleAndroidTest<doubleQuotes46><newline46mondego>    property <doubleQuotes46>sonar.projectVersion<doubleQuotes46>, <doubleQuotes46>V1.0<doubleQuotes46><newline46mondego>    property <doubleQuotes46>sonar.language<doubleQuotes46>, <doubleQuotes46>java<doubleQuotes46><newline46mondego>    property <doubleQuotes46>sonar.sources<doubleQuotes46>, <doubleQuotes46>src<doubleQuotes46><newline46mondego>    property <doubleQuotes46>sonar.binaries<doubleQuotes46>, <doubleQuotes46>build<doubleQuotes46><newline46mondego>}<newline46mondego>"
"1990splitHere46","20141600splitHere46","Display#asyncExec()"
"1991splitHere46","20141600splitHere46","Display.getDefault().asyncExec(new Runnable() {<newline46mondego>    public void run() {<newline46mondego>        // do any work that updates the screen<newline46mondego>        // e.g., call browser.setURL(...);<newline46mondego>    }<newline46mondego>});<newline46mondego>"
"1992splitHere46","20141617splitHere46","equals()"
"1993splitHere46","20141617splitHere46","new"
"1994splitHere46","20141617splitHere46","MyRequest EMPTY_MYREQYEST = new MyRequest();<newline46mondego><newline46mondego>if (myRequest.equals(EMPTY_MYREQUEST)) { ... }<newline46mondego>"
"1995splitHere46","20141617splitHere46","-Xequals"
"1996splitHere46","20141617splitHere46","-XhashCode"
"1997splitHere46","20141715splitHere46","messed up"
"1998splitHere46","20141715splitHere46","currentBoardState"
"1999splitHere46","20141715splitHere46","ChessPiece[][] originalBoard = InGameActivity.currentBoardState;<newline46mondego>"
"2000splitHere46","20141715splitHere46","originalBoard"
"2001splitHere46","20141715splitHere46","currentBoardState"
"2002splitHere46","20141715splitHere46","originalBoard"
"2003splitHere46","20141715splitHere46","originalBoard"
"2004splitHere46","20141715splitHere46","ChessPiece[][] originalBoard = new ChessPiece[InGameActivity.currentBoardState.length][];<newline46mondego>for(int i = 0; i < InGameActivity.currentBoardState.length; i++){<newline46mondego>    ChessPiece[] pieces = InGameActivity.currentBoardState[i];<newline46mondego>    int len = pieces.length;<newline46mondego>    originalBoard[i] = new ChessPiece[len];<newline46mondego>    System.arraycopy(pieces, 0, originalBoard[i], 0, len);<newline46mondego>}<newline46mondego><newline46mondego>//Rest of code here...<newline46mondego>"
"2005splitHere46","20141715splitHere46","="
"2006splitHere46","20141873splitHere46","HttpServletResponse"
"2007splitHere46","20141873splitHere46","HttpServletResponse"
"2008splitHere46","20141879splitHere46","ArrayList<String> namen = new ArrayList<>();"
"2009splitHere46","20141879splitHere46","public class MyClass {<newline46mondego>    private ArrayList<String> namen = new ArrayList<>();<newline46mondego><newline46mondego>    public void addName(){<newline46mondego>        System.out.print(<doubleQuotes46>Enter a name: <doubleQuotes46>);<newline46mondego>        Scanner in = new Scanner(System.in);<newline46mondego>        namen.add(in.next());<newline46mondego><newline46mondego>        for(String naam: namen){<newline46mondego>            System.out.println(naam);<newline46mondego>        }<newline46mondego>    }<newline46mondego>}<newline46mondego>"
"2010splitHere46","20141968splitHere46","resolvers += <doubleQuotes46>sbtplugins<doubleQuotes46> at <doubleQuotes46>http://repo.scala-sbt.org/scalasbt/sbt-plugin-releases<doubleQuotes46><newline46mondego>"
"2011splitHere46","20142095splitHere46","int i;"
"2012splitHere46","20142095splitHere46","int i;"
"2013splitHere46","20142095splitHere46","int"
"2014splitHere46","20142095splitHere46","int i;  //first decleration. <newline46mondego><newline46mondego>for (int i = 1; i <= 10; i++) // second decleration (int i = 1)<newline46mondego>"
"2015splitHere46","20142115splitHere46","String s = <doubleQuotes46>This a String<doubleQuotes46>;<newline46mondego>    StringBuffer buffer = new StringBuffer(s);<newline46mondego>    buffer.insert(5, <doubleQuotes46>is <doubleQuotes46>);<newline46mondego>    System.out.println(buffer.toString());<newline46mondego>    // will give <doubleQuotes46>This is a String<doubleQuotes46><newline46mondego>"
"2016splitHere46","20142116splitHere46","your.pkg.FooA<newline46mondego>your.pkg.FooB<newline46mondego>"
"2017splitHere46","20142116splitHere46","for (Foo instance : ServiceLoader.load(Foo.class)) { <newline46mondego>    /* do something with instance of FooA and FooB */ <newline46mondego>}<newline46mondego>"
"2018splitHere46","20142196splitHere46","for(int i=p;i>0;i-=size){<newline46mondego>        for(int j=0;j<o;j+=size){<newline46mondego>            jButton[k][l] = new javax.swing.JButton();<newline46mondego>            jButton[k][l].setBounds(j, i, size, size);<newline46mondego>            jButton[k][l].setBackground(Color.yellow);<newline46mondego>            javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);<newline46mondego>            this.setLayout(layout);<newline46mondego>"
"2019splitHere46","20142196splitHere46","setLayout"
"2020splitHere46","20142196splitHere46","NULL"
"2021splitHere46","20142196splitHere46","GridLayout"
"2022splitHere46","20142196splitHere46","Container"
"2023splitHere46","20142196splitHere46","GroupLayout"
"2024splitHere46","20142268splitHere46","compareTo"
"2025splitHere46","20142268splitHere46","compare"
"2026splitHere46","20142268splitHere46","return Double.compare(array[index1], array[index2]);<newline46mondego>"
"2027splitHere46","20142268splitHere46","double"
"2028splitHere46","20142431splitHere46","public static void addURLToSystemClassLoader(URL url) throws IntrospectionException {<newline46mondego>    URLClassLoader systemClassLoader = (URLClassLoader) ClassLoader.getSystemClassLoader();<newline46mondego>    Class<URLClassLoader> classLoaderClass = URLClassLoader.class;<newline46mondego><newline46mondego>    try {<newline46mondego>        Method method = classLoaderClass.getDeclaredMethod(<doubleQuotes46>addURL<doubleQuotes46>, new Class[]{URL.class});<newline46mondego>        method.setAccessible(true);<newline46mondego>        method.invoke(systemClassLoader, new Object[]{url});<newline46mondego>    } catch (Throwable t) {<newline46mondego>        t.printStackTrace();<newline46mondego>        throw new IntrospectionException(<doubleQuotes46>Error when adding url to system ClassLoader <doubleQuotes46>);<newline46mondego>    }<newline46mondego>}<newline46mondego>"
"2029splitHere46","20142431splitHere46","FXMLLoader loader = new FXMLLoader();<newline46mondego>loader.setController(TabController.this);<newline46mondego><newline46mondego>try {<newline46mondego>    addURLToSystemClassLoader(new URL(<doubleQuotes46>hive://<doubleQuotes46> + pageURL.getHost() + <doubleQuotes46>:<doubleQuotes46> + pageURL.getPort() + <doubleQuotes46>/<doubleQuotes46> + pageURL.getApplicationName() + <doubleQuotes46>/origJar.jar<doubleQuotes46>));<newline46mondego>} catch (Exception e) {<newline46mondego>    e.printStackTrace();<newline46mondego>}<newline46mondego>"
"2030splitHere46","20142490splitHere46","tv2_r7 = (TextView) this.findViewById(R.id.textView2_r7);<newline46mondego><newline46mondego>    final Timer timer = new Timer();<newline46mondego>    timer.scheduleAtFixedRate(new TimerTask()<newline46mondego>    {<newline46mondego>        int i = 10;<newline46mondego><newline46mondego>        public void run()<newline46mondego>        {<newline46mondego>            runOnUIThread(new Runnable()<newline46mondego>            {<newline46mondego><newline46mondego>                @Override<newline46mondego>                public void run()<newline46mondego>                {<newline46mondego>                    tv2_r7.setText(String.valueOf(i));<newline46mondego><newline46mondego>                }<newline46mondego>            });<newline46mondego><newline46mondego>            i--;<newline46mondego>            if (i < 0)<newline46mondego>                timer.cancel();<newline46mondego>        }<newline46mondego>    }, 0, 1000);<newline46mondego>}<newline46mondego>"
"2031splitHere46","20142603splitHere46","super.method"
"2032splitHere46","20142603splitHere46","this.method"
"2033splitHere46","20142603splitHere46","class Base { <newline46mondego>  void intercepted() { ... }<newline46mondego>}<newline46mondego><newline46mondego>class BaseImpl extends Base { <newline46mondego>  void doSomething() { ... }<newline46mondego>}<newline46mondego><newline46mondego>class BaseImpl$$cglib extends BaseImpl { <newline46mondego>  @Override void intercepted() { ... }<newline46mondego>}<newline46mondego>"
"2034splitHere46","20142603splitHere46","INVOKEVIRTUAL"
"2035splitHere46","20142603splitHere46","this.intercepted"
"2036splitHere46","20142603splitHere46","intercepted"
"2037splitHere46","20142603splitHere46","BaseImpl$$cglib"
"2038splitHere46","20142603splitHere46","BaseImpl$$cglib.intercepted"
"2039splitHere46","20142603splitHere46","BaseImpl$$cglib"
"2040splitHere46","20142603splitHere46","Base.intercepted"
"2041splitHere46","20142603splitHere46","BaseImpl"
"2042splitHere46","20142603splitHere46","intercepted"
"2043splitHere46","20142603splitHere46","Base.intercepted"
"2044splitHere46","20142603splitHere46","INVOKESTATIC"
"2045splitHere46","20142603splitHere46","super.intercepted"
"2046splitHere46","20142603splitHere46","BaseImpl"
"2047splitHere46","20142603splitHere46","Base"
"2048splitHere46","20142603splitHere46","BaseImpl$$cglib"
"2049splitHere46","20142603splitHere46","super.intercepted"
"2050splitHere46","20142626splitHere46","private static final String FILENAME = <doubleQuotes46>resources/skyscrapper<doubleQuotes46>;<newline46mondego>"
"2051splitHere46","20142664splitHere46","Fail-safe"
"2052splitHere46","20142664splitHere46","Weakly consistent"
"2053splitHere46","20142664splitHere46","ConcurrentModificationException"
"2054splitHere46","20142664splitHere46","weakly consistent iterators:"
"2055splitHere46","20142664splitHere46","Fail safe iterator"
"2056splitHere46","20142664splitHere46","CopyOnWriteArrayList"
"2057splitHere46","20142664splitHere46","public CopyOnWriteArrayList(Collection<? extends E> c) {<newline46mondego>        Object[] elements = c.toArray();<newline46mondego><newline46mondego>        if (elements.getClass() != Object[].class)<newline46mondego>            elements = Arrays.copyOf(elements, elements.length, Object[].class);<newline46mondego>        setArray(elements);<newline46mondego>    }<newline46mondego>"
"2058splitHere46","20142664splitHere46","Java Generics and Collections: 11.5. Collections and Thread Safety"
"2059splitHere46","20142664splitHere46","Iterators â€“ Fail fast Vs Fail safe"
"2060splitHere46","20142701splitHere46","String#split"
"2061splitHere46","20142701splitHere46","String[] resultArray = yourString.split(<doubleQuotes46>;<doubleQuotes46>);<newline46mondego>"
"2062splitHere46","20142701splitHere46","string's"
"2063splitHere46","20142701splitHere46","for (String string : resultArray) {<newline46mondego>        System.out.println(string);<newline46mondego>     }<newline46mondego>"
"2064splitHere46","20142707splitHere46","org.eclipse.core.resources.builders"
"2065splitHere46","20142758splitHere46","if(i == 10){<newline46mondego>        namen.remove(9);<newline46mondego>}<newline46mondego>"
"2066splitHere46","20142758splitHere46","for (int i = 0; i<10; i++){<newline46mondego>    namen.add(in.next());<newline46mondego>    int aantalNamen = namen.size();<newline46mondego>    System.out.println(namen);<newline46mondego>    System.out.println(aantalNamen);<newline46mondego>}<newline46mondego>namen.remove(9);<newline46mondego>"
"2067splitHere46","20142782splitHere46","StaleElementReferenceException"
"2068splitHere46","20142782splitHere46","for (String sTextTime : sListItemTextListBox3) {<newline46mondego><newline46mondego>            iCountGeo++;<newline46mondego><newline46mondego>            iAttempts = 0;<newline46mondego>            while (iAttempts < 5) {<newline46mondego>                try {<newline46mondego>                    oList3.selectByVisibleText(sTextTime);<newline46mondego>                    break;<newline46mondego>                } catch (StaleElementReferenceException e) {<newline46mondego>                }<newline46mondego>                iAttempts++;<newline46mondego>            }<newline46mondego>         }<newline46mondego>"
"2069splitHere46","20142782splitHere46","oList"
"2070splitHere46","20142782splitHere46","DropDownValidation()"
"2071splitHere46","20142782splitHere46","if (iCountGeo == 2) {<newline46mondego><newline46mondego>                iCountGeo = 0;<newline46mondego>                dev.navigate().to(<doubleQuotes46>http://www.google.com<doubleQuotes46>);<newline46mondego>                dev.navigate().to(sHomeURL);<newline46mondego>                continue;<newline46mondego>            }<newline46mondego>"
"2072splitHere46","20142782splitHere46","sListItemTextListBox3"
"2073splitHere46","20142782splitHere46","sListItemTextListBox4"
"2074splitHere46","20142782splitHere46","oList3"
"2075splitHere46","20142782splitHere46","oList4"
"2076splitHere46","20142782splitHere46","oList3 = new Select(dev.findElement(By.id(<doubleQuotes46>tool3<doubleQuotes46>)));"
"2077splitHere46","20142782splitHere46","oList3.selectByVisibleText(sTextTime);"
"2078splitHere46","20142782splitHere46","for"
"2079splitHere46","20142782splitHere46","for (String sTextProduct : sListItemTextListBox4) {<newline46mondego><newline46mondego>                iAttempts = 0;<newline46mondego>                while (iAttempts < 5) {<newline46mondego>                    try {<newline46mondego>                        oList4 = new Select(dev.findElement(By.id(<doubleQuotes46>tool4<doubleQuotes46>))); //here<newline46mondego>                        oList4.selectByVisibleText(sTextProduct);<newline46mondego>                        break;<newline46mondego>                    } catch (StaleElementReferenceException e) {<newline46mondego>                    }<newline46mondego>                    iAttempts++;<newline46mondego>                }<newline46mondego>"
"2080splitHere46","20142782splitHere46","DropDownValidation()"
"2081splitHere46","20142782splitHere46","iAttempts = 0;<newline46mondego>while (iAttempts < 5) {<newline46mondego>    try {<newline46mondego>        oList1 = new Select(dev.findElement(By.id(<doubleQuotes46>tool1<doubleQuotes46>)));<newline46mondego>        break;<newline46mondego>    } catch (StaleElementReferenceException e) {<newline46mondego>    }<newline46mondego>    iAttempts++;<newline46mondego>}<newline46mondego>"
"2082splitHere46","20143097splitHere46","flush()"
"2083splitHere46","20143097splitHere46","FileUtils.copyURLToFile(u, f)"
"2084splitHere46","20143097splitHere46","public void copyURLToFile(u, f) {<newline46mondego>    InputStream in = u.openStream();        <newline46mondego>    try {<newline46mondego>       FileOutputStream out = new FileOutputStream(f);<newline46mondego>       try {                  <newline46mondego>          byte[] buffer = new byte[1024];<newline46mondego>          int count;<newline46mondego>          while ((count = in.read(buffer) > 0) {<newline46mondego>             out.write(buffer, 0, count);<newline46mondego>          }<newline46mondego>          out.flush();<newline46mondego>       } finally {<newline46mondego>          out.close();<newline46mondego>       }<newline46mondego>    } finally {<newline46mondego>       in.close();<newline46mondego>    }<newline46mondego>}<newline46mondego>"
"2085splitHere46","20143140splitHere46","notepad invalidf:ile.txt<newline46mondego>"
"2086splitHere46","20143172splitHere46","SchemaFactory schemafac =<newline46mondego>     SchemaFactory.newInstance(XMLConstants.W3C_XML_SCHEMA_NS_URI);<newline46mondego>     Schema schema = schemafac.newSchema(new File(<doubleQuotes46>myschema.xsd<doubleQuotes46>));<newline46mondego>     XMLReaderJDOMFactory factory = new XMLReaderSchemaFactory(schema);<newline46mondego>     SAXBuilder sb = new SAXBuilder(factory);<newline46mondego>     Document doc = sb.build(new File(<doubleQuotes46>file.xml<doubleQuotes46>));<newline46mondego>"
"2087splitHere46","20143172splitHere46","<xs:schema attributeFormDefault=<doubleQuotes46>unqualified<doubleQuotes46> elementFormDefault=<doubleQuotes46>qualified<doubleQuotes46> xmlns:xs=<doubleQuotes46>http://www.w3.org/2001/XMLSchema<doubleQuotes46>><newline46mondego>  <xs:element name=<doubleQuotes46>document<doubleQuotes46>><newline46mondego>    <xs:complexType><newline46mondego>      <xs:sequence><newline46mondego>        <xs:element name=<doubleQuotes46>testCaseDataName<doubleQuotes46> maxOccurs=<doubleQuotes46>unbounded<doubleQuotes46> minOccurs=<doubleQuotes46>0<doubleQuotes46>><newline46mondego>          <xs:complexType><newline46mondego>            <xs:sequence><newline46mondego>              <xs:element type=<doubleQuotes46>xs:byte<doubleQuotes46> name=<doubleQuotes46>id<doubleQuotes46>/><newline46mondego>              <xs:element type=<doubleQuotes46>xs:string<doubleQuotes46> name=<doubleQuotes46>testCaseName<doubleQuotes46>/><newline46mondego>              <xs:element type=<doubleQuotes46>xs:string<doubleQuotes46> name=<doubleQuotes46>expectedResult<doubleQuotes46>/><newline46mondego>              <xs:element name=<doubleQuotes46>parameter<doubleQuotes46> minOccurs=<doubleQuotes46>0<doubleQuotes46>><newline46mondego>                <xs:complexType><newline46mondego>                  <xs:choice maxOccurs=<doubleQuotes46>unbounded<doubleQuotes46> minOccurs=<doubleQuotes46>0<doubleQuotes46>><newline46mondego>                    <xs:element type=<doubleQuotes46>xs:string<doubleQuotes46> name=<doubleQuotes46>key<doubleQuotes46>/><newline46mondego>                    <xs:element type=<doubleQuotes46>xs:string<doubleQuotes46> name=<doubleQuotes46>value<doubleQuotes46>/><newline46mondego>                  </xs:choice><newline46mondego>                </xs:complexType><newline46mondego>              </xs:element><newline46mondego>            </xs:sequence><newline46mondego>          </xs:complexType><newline46mondego>        </xs:element><newline46mondego>      </xs:sequence><newline46mondego>    </xs:complexType><newline46mondego>  </xs:element><newline46mondego></xs:schema><newline46mondego>"
"2088splitHere46","20143191splitHere46","description = description.replaceAll(<doubleQuotes46>https?://\\S+\\s?<doubleQuotes46>, <doubleQuotes46><doubleQuotes46>);<newline46mondego>"
"2089splitHere46","20143191splitHere46","\\s?"
"2090splitHere46","20143303splitHere46","android:layout_centerHorizontal=<doubleQuotes46>true<doubleQuotes46>"
"2091splitHere46","20143303splitHere46","android:layout_centerVertical=<doubleQuotes46>true<doubleQuotes46>"
"2092splitHere46","20143303splitHere46","<?xml version=<doubleQuotes46>1.0<doubleQuotes46> encoding=<doubleQuotes46>utf-8<doubleQuotes46>?><newline46mondego><RelativeLayout xmlns:android=<doubleQuotes46>http://schemas.android.com/apk/res/android<doubleQuotes46><newline46mondego>    android:id=<doubleQuotes46>@+id/scrollView1<doubleQuotes46><newline46mondego>    android:layout_width=<doubleQuotes46>fill_parent<doubleQuotes46><newline46mondego>    android:layout_height=<doubleQuotes46>fill_parent<doubleQuotes46> ><newline46mondego><newline46mondego>    <RelativeLayout <newline46mondego>        android:layout_width=<doubleQuotes46>match_parent<doubleQuotes46><newline46mondego>        android:layout_height=<doubleQuotes46>match_parent<doubleQuotes46><newline46mondego>        android:orientation=<doubleQuotes46>vertical<doubleQuotes46> ><newline46mondego><newline46mondego>        <ImageView<newline46mondego>        android:id=<doubleQuotes46>@+id/itemItem<doubleQuotes46><newline46mondego>        android:src=<doubleQuotes46>@drawable/content_picture<doubleQuotes46><newline46mondego>        android:tag=<doubleQuotes46>image_item_grid_image<doubleQuotes46><newline46mondego>        android:layout_width=<doubleQuotes46>wrap_content<doubleQuotes46><newline46mondego>        android:background=<doubleQuotes46>@drawable/layout_bg<doubleQuotes46><newline46mondego>        android:layout_height=<doubleQuotes46>wrap_content<doubleQuotes46><newline46mondego>        android:layout_centerHorizontal=<doubleQuotes46>true<doubleQuotes46><newline46mondego>        android:layout_centerVertical=<doubleQuotes46>true<doubleQuotes46><newline46mondego>        android:adjustViewBounds=<doubleQuotes46>true<doubleQuotes46><newline46mondego>        android:contentDescription=<doubleQuotes46>Desc<doubleQuotes46><newline46mondego>        android:scaleType=<doubleQuotes46>fitCenter<doubleQuotes46> /><newline46mondego><newline46mondego><newline46mondego>        <TextView<newline46mondego>            android:id=<doubleQuotes46>@+id/textView1<doubleQuotes46><newline46mondego>            android:layout_width=<doubleQuotes46>wrap_content<doubleQuotes46><newline46mondego>            android:layout_height=<doubleQuotes46>wrap_content<doubleQuotes46><newline46mondego>            android:text=<doubleQuotes46>TextView<doubleQuotes46> /><newline46mondego><newline46mondego>        <TextView<newline46mondego>            android:id=<doubleQuotes46>@+id/textView2<doubleQuotes46><newline46mondego>            android:layout_width=<doubleQuotes46>wrap_content<doubleQuotes46><newline46mondego>            android:layout_height=<doubleQuotes46>wrap_content<doubleQuotes46><newline46mondego>            android:text=<doubleQuotes46>TextView<doubleQuotes46> /><newline46mondego><newline46mondego>        <TextView<newline46mondego>            android:id=<doubleQuotes46>@+id/textView3<doubleQuotes46><newline46mondego>            android:layout_width=<doubleQuotes46>wrap_content<doubleQuotes46><newline46mondego>            android:layout_height=<doubleQuotes46>wrap_content<doubleQuotes46><newline46mondego>            android:text=<doubleQuotes46>TextView<doubleQuotes46> /><newline46mondego><newline46mondego>        <RatingBar<newline46mondego>            android:id=<doubleQuotes46>@+id/ratingBar1<doubleQuotes46><newline46mondego>            android:layout_width=<doubleQuotes46>wrap_content<doubleQuotes46><newline46mondego>            android:layout_height=<doubleQuotes46>wrap_content<doubleQuotes46> /><newline46mondego><newline46mondego>    </RelativeLayout ><newline46mondego><newline46mondego></RelativeLayout><newline46mondego>"
"2093splitHere46","20143303splitHere46","params.addRule(RelativeLayout.CENTER_VERTICAL,RelativeLayout.TRUE);<newline46mondego>params.addRule(RelativeLayout.CENTER_HORIZONTAL,RelativeLayout.TRUE);<newline46mondego>"
"2094splitHere46","20143499splitHere46","boolean match = <doubleQuotes46>2010.12.12<doubleQuotes46> ==~ /\d{4}\.\d{2}\.\d{2}/<newline46mondego>"
"2095splitHere46","20143501splitHere46","Session session = factory.openSession();<newline46mondego>"
"2096splitHere46","20143501splitHere46","null"
"2097splitHere46","20143501splitHere46","private static SessionFactory factory;<newline46mondego>"
"2098splitHere46","20143501splitHere46","addPaymentMethod"
"2099splitHere46","20143526splitHere46","Clerck object = new Clerck();<newline46mondego>"
"2100splitHere46","20143671splitHere46","<resources xmlns:android=<doubleQuotes46>http://schemas.android.com/apk/res/android<doubleQuotes46>><newline46mondego>"
"2101splitHere46","20143671splitHere46","<resources><newline46mondego>"
"2102splitHere46","20143704splitHere46","String.format"
"2103splitHere46","20143704splitHere46","StringBuilder"
"2104splitHere46","20143704splitHere46","public class Test {<newline46mondego>  static Pattern regex = Pattern.compile(<doubleQuotes46>(..)(..)(..)(..)(..)(..)<doubleQuotes46>);<newline46mondego>  public static void main(String[] args) {<newline46mondego>    final List<String> inMacs = new ArrayList<>(), outMacs = new ArrayList<>();<newline46mondego>    for (int i = 0; i < 80_000; i++) inMacs.add(mac());<newline46mondego>    final long start = System.nanoTime();<newline46mondego>    for (String mac : inMacs) {<newline46mondego>      final Matcher m = regex.matcher(mac);<newline46mondego>      m.matches();<newline46mondego>      outMacs.add(String.format(<doubleQuotes46>%s:%s:%s:%s:%s:%s<doubleQuotes46>,<newline46mondego>          m.group(1), m.group(2), m.group(3), m.group(4), m.group(5), m.group(6)));<newline46mondego>    }<newline46mondego>    System.out.println(<doubleQuotes46>Took <doubleQuotes46> + (System.nanoTime() - start)/1_000_000 + <doubleQuotes46> milliseconds<doubleQuotes46>);<newline46mondego>    final Iterator<String> it = outMacs.iterator();<newline46mondego>    for (int i = 0; i < 100; i++) System.out.println(it.next());<newline46mondego>  }<newline46mondego><newline46mondego>  static Random rnd = new Random();<newline46mondego>  static String mac() {<newline46mondego>    final long mac = (long) (rnd.nextDouble()*(1L<<48));<newline46mondego>    return String.format(<doubleQuotes46>%012x<doubleQuotes46>, mac).toUpperCase();<newline46mondego>  }<newline46mondego>}<newline46mondego>"
"2105splitHere46","20143704splitHere46","static List<String> fixMacs(List<String> inMacs) {<newline46mondego>    final List<String> outMacs = new ArrayList<>(inMacs.size());<newline46mondego>    for (String mac : inMacs) outMacs.add(<newline46mondego>          mac.charAt(2) == '-'? mac.replace(<doubleQuotes46>-<doubleQuotes46>, <doubleQuotes46>:<doubleQuotes46>)<newline46mondego>        : mac.charAt(2) != ':'? fixMac(mac)<newline46mondego>        : mac);<newline46mondego>    return outMacs;<newline46mondego>  }<newline46mondego><newline46mondego>  static String fixMac(String inMac) {<newline46mondego>    final StringBuilder b = new StringBuilder(18);<newline46mondego>    for (int i = 0; i < inMac.length(); i++) {<newline46mondego>      b.append(inMac.charAt(i));<newline46mondego>      if (i%2 == 1 && i != inMac.length()-1) b.append(':');<newline46mondego>    }<newline46mondego>    return b.toString();<newline46mondego>  }<newline46mondego>"
"2106splitHere46","20143787splitHere46","split()"
"2107splitHere46","20143787splitHere46","List<String> delimList = new ArrayList<String>();<newline46mondego>List<String> sectionList = new ArrayList<String>();<newline46mondego>Pattern regex = Pattern.compile(<newline46mondego>    <doubleQuotes46>(<:==[\\]}]:>)     # Match a delimiter, capture it in group 1.\n<doubleQuotes46> +<newline46mondego>    <doubleQuotes46>(                  # Match and capture in group 2:\n<doubleQuotes46> +<newline46mondego>    <doubleQuotes46> (?:               # the following group which matches...\n<doubleQuotes46> +<newline46mondego>    <doubleQuotes46>  (?!<:==[\\]}]:>) # (unless we're at the start of another delimiter)\n<doubleQuotes46> +<newline46mondego>    <doubleQuotes46>  .                # any character\n<doubleQuotes46> +<newline46mondego>    <doubleQuotes46> )*                # any number of times.\n<doubleQuotes46> +<newline46mondego>    <doubleQuotes46>)                  # End of group 2<doubleQuotes46>, <newline46mondego>    Pattern.COMMENTS | Pattern.DOTALL);<newline46mondego>Matcher regexMatcher = regex.matcher(subjectString);<newline46mondego>while (regexMatcher.find()) {<newline46mondego>    delimList.add(regexMatcher.group(1));<newline46mondego>    sectionList.add(regexMatcher.group(2));<newline46mondego>} <newline46mondego>"
"2108splitHere46","20144301splitHere46","commons-lang"
"2109splitHere46","20144301splitHere46","3.1"
"2110splitHere46","20144301splitHere46","SPACE"
"2111splitHere46","20144301splitHere46","3.2"
"2112splitHere46","20144459splitHere46","// If the drop items are files<newline46mondego> if (flavor.isFlavorJavaFileListType()) {<newline46mondego><newline46mondego>     // Get all of the dropped files<newline46mondego>     List files = (List) transferable.getTransferData(flavor);<newline46mondego><newline46mondego>         // Loop them through<newline46mondego>         for (File file : files) {<newline46mondego>"
"2113splitHere46","20144481splitHere46","SELECT Rank,total<newline46mondego>FROM<newline46mondego>(<newline46mondego>    SELECT @Rank:=IF(@Prev=COMP, @Rank, @FullRank) AS Rank,<newline46mondego>            ADM,<newline46mondego>            @Prev:=COMP,<newline46mondego>            COMP AS total,<newline46mondego>            @FullRank:=@FullRank+1<newline46mondego>    FROM my_table<newline46mondego>    CROSS JOIN (SELECT @Rank:=0, @Prev:='fred', @FullRank:=1) Sub1<newline46mondego>    ORDER BY total DESC<newline46mondego>) RESULT<newline46mondego>"
"2114splitHere46","20144516splitHere46","public class MyClass<E extends MyClass<E>> ...<newline46mondego>"
"2115splitHere46","20144516splitHere46","new MyClass();<newline46mondego>"
"2116splitHere46","20144516splitHere46","add"
"2117splitHere46","20144516splitHere46","public boolean add(E element){<newline46mondego>     if (!(element instanceof MyClass))<newline46mondego>          throw new IllegalArgumentException(<doubleQuotes46>Element is not an instance of MyClass<doubleQuotes46>);<newline46mondego><newline46mondego>    // rest of add code here<newline46mondego>}<newline46mondego>"
"2118splitHere46","20144554splitHere46","ApplicationContext"
"2119splitHere46","20144554splitHere46","BeanFactory"
"2120splitHere46","20144554splitHere46","public static void main(String[] args) {<newline46mondego>    logger.info(<doubleQuotes46>StreamingController testing<doubleQuotes46>);<newline46mondego>    ApplicationContext ctx = new ClassPathXmlApplicationContext(BEAN_FILE);<newline46mondego>    StreamingController obj = (StreamingController) ctx.getBean(<doubleQuotes46>streamingController<doubleQuotes46>); <newline46mondego>    obj.streamingMgr.test();<newline46mondego>}<newline46mondego>"
"2121splitHere46","20144554splitHere46","<context:annotation-config />"
"2122splitHere46","20144554splitHere46","<context:component-scan />"
"2123splitHere46","20144554splitHere46","<?xml version=<doubleQuotes46>1.0<doubleQuotes46> encoding=<doubleQuotes46>UTF-8<doubleQuotes46>?><newline46mondego><beans><newline46mondego>    <context:component-scan base-package=<doubleQuotes46>com.xxx<doubleQuotes46>/><newline46mondego></beans><newline46mondego>"
"2124splitHere46","20144686splitHere46","<doubleQuotes46>mm/dd/yyyy<doubleQuotes46>"
"2125splitHere46","20144686splitHere46","<doubleQuotes46>MM/dd/yyyy<doubleQuotes46>"
"2126splitHere46","20144686splitHere46","m"
"2127splitHere46","20144686splitHere46","M"
"2128splitHere46","20144805splitHere46","ServiceReference"
"2129splitHere46","20144805splitHere46","ServiceTracker"
"2130splitHere46","20144805splitHere46","addingService"
"2131splitHere46","20144805splitHere46","BundleActivator"
"2132splitHere46","20144805splitHere46","unGetService"
"2133splitHere46","20144805splitHere46","getService(serviceReference)"
"2134splitHere46","20144866splitHere46","-Xint"
"2135splitHere46","20144909splitHere46","Matcher.find()"
"2136splitHere46","20144909splitHere46","CLASSIC(\s*)"
"2137splitHere46","20144909splitHere46","CLASSIC STF"
"2138splitHere46","20144909splitHere46","Matcher.matches()"
"2139splitHere46","20144909splitHere46","Matcher.find()"
"2140splitHere46","20144909splitHere46","^CLASSIC(\s*)$"
"2141splitHere46","20145111splitHere46","attached"
"2142splitHere46","20145111splitHere46","jint AttachCurrentThread(JavaVM *vm, void **p_env, void *thr_args);<newline46mondego>jint DetachCurrentThread(JavaVM *vm);<newline46mondego>"
"2143splitHere46","20145111splitHere46","synchronized"
"2144splitHere46","20145120splitHere46","Servlet"
"2145splitHere46","20145120splitHere46","<div id=<doubleQuotes46>loadedImages<doubleQuotes46> style=<doubleQuotes46>display: inline-block;<doubleQuotes46>><newline46mondego>  <c:url var=<doubleQuotes46>firstURL<doubleQuotes46><newline46mondego>    value=<doubleQuotes46>/ImageServlet?imageId=First.jpg<doubleQuotes46> /><newline46mondego>  <img alt=<doubleQuotes46>First image<doubleQuotes46> src=<doubleQuotes46>${firstURL}<doubleQuotes46> /><newline46mondego><newline46mondego>  <c:url var=<doubleQuotes46>secondURL<doubleQuotes46><newline46mondego>    value=<doubleQuotes46>/ImageServlet?imageId=Second.jpg<doubleQuotes46> /><newline46mondego>  <img alt=<doubleQuotes46>Second image<doubleQuotes46> src=<doubleQuotes46>${secondURL}<doubleQuotes46> /> <newline46mondego></div>  <newline46mondego>"
"2146splitHere46","20145120splitHere46","Servlet"
"2147splitHere46","20145120splitHere46","public class ImageServlet extends HttpServlet {<newline46mondego>...<newline46mondego>     protected void doGet(HttpServletRequest request,<newline46mondego>         HttpServletResponse response) throws ServletException, IOException {<newline46mondego>     String imageName = request.getParameter(<doubleQuotes46>imageId<doubleQuotes46>);<newline46mondego>     //Read image into byte array<newline46mondego>     byte[] data = ImageHolder.readImage(imageName);<newline46mondego>     //Write image into output stream<newline46mondego>     response.setContentType(<doubleQuotes46>image/jpeg<doubleQuotes46>);<newline46mondego>     response.getOutputStream().write(data);<newline46mondego>     }<newline46mondego><newline46mondego>}<newline46mondego>"
"2148splitHere46","20145136splitHere46","@Override<newline46mondego>protected void onCreate(Bundle savedInstanceState) {<newline46mondego><newline46mondego>        super.onCreate(savedInstanceState);<newline46mondego>        setContentView(R.layout.menu_listview);<newline46mondego><newline46mondego>        mTitle = <doubleQuotes46>Androi Reboot<doubleQuotes46>;<newline46mondego>        getActionBar().setTitle(mTitle);<newline46mondego><newline46mondego>        // Getting reference to the DrawerLayout<newline46mondego>        mDrawerLayout = (DrawerLayout) findViewById(R.id.drawer_layout);<newline46mondego><newline46mondego>        mDrawerList = (ListView) findViewById(R.id.drawer_list);<newline46mondego><newline46mondego>        // Getting reference to the ActionBarDrawerToggle<newline46mondego>        mDrawerToggle = new ActionBarDrawerToggle(this, mDrawerLayout,<newline46mondego>                        R.drawable.ic_drawer, R.string.drawer_open,<newline46mondego>                        R.string.drawer_close) {<newline46mondego><newline46mondego>                /** Called when drawer is closed */<newline46mondego>                public void onDrawerClosed(View view) {<newline46mondego>                        getActionBar().setTitle(mTitle);<newline46mondego>                        invalidateOptionsMenu();<newline46mondego><newline46mondego>                }<newline46mondego><newline46mondego>                /** Called when a drawer is opened */<newline46mondego>                public void onDrawerOpened(View drawerView) {<newline46mondego>                        getActionBar().setTitle(<doubleQuotes46>Androi Reboot<doubleQuotes46>);<newline46mondego>                        invalidateOptionsMenu();<newline46mondego>                }<newline46mondego><newline46mondego>        };<newline46mondego><newline46mondego><newline46mondego><newline46mondego>        // Setting DrawerToggle on DrawerLayout<newline46mondego>        mDrawerLayout.setDrawerListener(mDrawerToggle);<newline46mondego><newline46mondego>        // Creating an ArrayAdapter to add items to the listview mDrawerList<newline46mondego>        ArrayAdapter<String> adapter = new ArrayAdapter<String>(getBaseContext(), <newline46mondego>                        R.layout.arraylist, getResources().getStringArray(R.array.menus));<newline46mondego><newline46mondego>        // Setting the adapter on mDrawerList<newline46mondego>        mDrawerList.setAdapter(adapter);<newline46mondego><newline46mondego>        // Enabling Home button<newline46mondego>        getActionBar().setHomeButtonEnabled(true);<newline46mondego><newline46mondego>        // Enabling Up navigation<newline46mondego>        getActionBar().setDisplayHomeAsUpEnabled(true);<newline46mondego><newline46mondego>        // Setting item click listener for the listview mDrawerList<newline46mondego>        mDrawerList.setOnItemClickListener(new OnItemClickListener() {<newline46mondego><newline46mondego>                @Override<newline46mondego>                public void onItemClick(AdapterView<?> parent, View view,<newline46mondego>                                int position, long id) {<newline46mondego><newline46mondego>                        fireFragment(position)<newline46mondego>                        // Closing the drawer<newline46mondego>                        mDrawerLayout.closeDrawer(mDrawerList);<newline46mondego><newline46mondego>                }<newline46mondego>        });<newline46mondego><newline46mondego>        fireFragment(0);<newline46mondego>}<newline46mondego><newline46mondego>private void fireFragment(int position){<newline46mondego>     // Getting an array of rivers<newline46mondego>    String[] menuItems = getResources().getStringArray(R.array.menus);<newline46mondego><newline46mondego>    // Currently selected river<newline46mondego>    mTitle = menuItems[position];<newline46mondego><newline46mondego>    // Creating a fragment object<newline46mondego>    MainActivity rFragment = new MainActivity();<newline46mondego><newline46mondego>    // Passing selected item information to fragment<newline46mondego>    Bundle data = new Bundle();<newline46mondego>    data.putInt(<doubleQuotes46>position<doubleQuotes46>, position);<newline46mondego>    data.putString(<doubleQuotes46>url<doubleQuotes46>, getUrl(position));<newline46mondego>    rFragment.setArguments(data);<newline46mondego><newline46mondego><newline46mondego>    // Getting reference to the FragmentManager<newline46mondego>    FragmentManager fragmentManager = getFragmentManager();<newline46mondego><newline46mondego>    // Creating a fragment transaction<newline46mondego>    FragmentTransaction ft = fragmentManager.beginTransaction();<newline46mondego><newline46mondego>    // Adding a fragment to the fragment transaction<newline46mondego>    ft.replace(R.id.content_frame, rFragment);<newline46mondego><newline46mondego>    // Committing the transaction<newline46mondego>    ft.commit();<newline46mondego>}<newline46mondego>"
"2149splitHere46","20145461splitHere46",";"
"2150splitHere46","20145461splitHere46",":"
"2151splitHere46","20145461splitHere46","."
"2152splitHere46","20145463splitHere46","@Parameter(defaultValue = <doubleQuotes46>${project}<doubleQuotes46>)"
"2153splitHere46","20145463splitHere46","project.getCompileArtifacts()"
"2154splitHere46","20145463splitHere46","project.getTestArtifacts()"
"2155splitHere46","20145463splitHere46","project.getRuntimeArtifacts()"
"2156splitHere46","20145468splitHere46","visitBlank"
"2157splitHere46","20145468splitHere46","null"
"2158splitHere46","20145468splitHere46","visit"
"2159splitHere46","20145468splitHere46","TokenStream"
"2160splitHere46","20145468splitHere46","EOF"
"2161splitHere46","20145468splitHere46","prog"
"2162splitHere46","20145468splitHere46","EOF"
"2163splitHere46","20145468splitHere46","prog"
"2164splitHere46","20145480splitHere46","int"
"2165splitHere46","20145480splitHere46","int"
"2166splitHere46","20145480splitHere46","int"
"2167splitHere46","20145480splitHere46","<doubleQuotes46>%<doubleQuotes46>"
"2168splitHere46","20145480splitHere46","String"
"2169splitHere46","20145480splitHere46","%"
"2170splitHere46","20145480splitHere46","public List<T> searchByInt(int id) {<newline46mondego>    return getEntityManager().createNamedQuery(<doubleQuotes46>Userdetails.searchByInt<doubleQuotes46>).setParameter(<doubleQuotes46>id<doubleQuotes46>, id).getResultList();<newline46mondego>}<newline46mondego>"
"2171splitHere46","20145770splitHere46","doWork(hi)"
"2172splitHere46","20145770splitHere46","hi"
"2173splitHere46","20145770splitHere46","Set<Integer> set"
"2174splitHere46","20145770splitHere46","Set<Integer> set = hi;<newline46mondego>"
"2175splitHere46","20145770splitHere46","set"
"2176splitHere46","20145770splitHere46","hi"
"2177splitHere46","20145770splitHere46","-------<newline46mondego>| set | ----> [HashSet instance]<newline46mondego>-------               ^<newline46mondego>                      |<newline46mondego>-------               |<newline46mondego>| hi  | ---------------<newline46mondego>-------<newline46mondego>"
"2178splitHere46","20145770splitHere46","set.add(1)"
"2179splitHere46","20145770splitHere46","1"
"2180splitHere46","20145770splitHere46","set"
"2181splitHere46","20145770splitHere46","hi"
"2182splitHere46","20145770splitHere46","1"
"2183splitHere46","20145770splitHere46","temp"
"2184splitHere46","20145770splitHere46","Set<Integer> temp = set;<newline46mondego>"
"2185splitHere46","20145770splitHere46","-------                             --------<newline46mondego>| set | ----> [HashSet instance] <--| temp |<newline46mondego>-------               ^             --------<newline46mondego>                      |<newline46mondego>-------               |<newline46mondego>| hi  | ---------------<newline46mondego>-------<newline46mondego>"
"2186splitHere46","20145770splitHere46","1"
"2187splitHere46","20145770splitHere46","temp"
"2188splitHere46","20145770splitHere46","temp.add(1);<newline46mondego>"
"2189splitHere46","20145805splitHere46","function Person(personName) {<newline46mondego>  var name = personName;<newline46mondego>  this.getName = function() {<newline46mondego>    return name;<newline46mondego>  }<newline46mondego>}<newline46mondego><newline46mondego>Person.prototype.upperName = function() {<newline46mondego>  return this.getName().toUpperCase();<newline46mondego>}<newline46mondego><newline46mondego>var person = new Person(<doubleQuotes46>john doe<doubleQuotes46>);<newline46mondego><newline46mondego>console.log(person.upperName()); // prints JOHN DOE<newline46mondego>"
"2190splitHere46","20145805splitHere46","metaClass"
"2191splitHere46","20145805splitHere46","class Person {<newline46mondego>  String name<newline46mondego>}<newline46mondego><newline46mondego>Person.metaClass.upperName = {<newline46mondego>  delegate.name.toUpperCase()<newline46mondego>}<newline46mondego><newline46mondego>def person = new Person(name: <doubleQuotes46>john doe<doubleQuotes46>)<newline46mondego><newline46mondego>println person.upperName() // prints JOHN DOE<newline46mondego>"
"2192splitHere46","20145864splitHere46","Multimap<String, String> filteredMap = Multimaps.filterValues(map, Predicates.notNull());<newline46mondego>"
"2193splitHere46","20145865splitHere46","Cat cat = animals.loadCat(id);<newline46mondego>Collar collar = animals.reload(collar);<newline46mondego>cat.setCollar(collar);<newline46mondego>collar.setAddress(<doubleQuotes46>new address<doubleQuotes46>);<newline46mondego>animals.update(cat);<newline46mondego>"
"2194splitHere46","20145955splitHere46","myPane.getSelectedComponent().getComponents();<newline46mondego>"
"2195splitHere46","20146022splitHere46","<a id=<doubleQuotes46>screenId<doubleQuotes46> href=<doubleQuotes46>#<doubleQuotes46>><newline46mondego>"
"2196splitHere46","20146022splitHere46","<div id=<doubleQuotes46>container<doubleQuotes46>></div>"
"2197splitHere46","20146022splitHere46","$('#screenId').click(function() {<newline46mondego>    $.ajax({<newline46mondego>         type: <doubleQuotes46>GET<doubleQuotes46>,<newline46mondego>         cache: false,<newline46mondego>         url: yourControllerURL,<newline46mondego>         data: <doubleQuotes46><doubleQuotes46>,<newline46mondego>         success: function(response){<newline46mondego>             $('#container').load(response);<newline46mondego>         }<newline46mondego>    });<newline46mondego>});<newline46mondego>"
"2198splitHere46","20146022splitHere46","@RequestMapping(value=<doubleQuotes46>yourControllerURL<doubleQuotes46>) <newline46mondego>public String includeAnotherJSP(ModelMap model) {<newline46mondego>    model.addAttribute(<doubleQuotes46>commandObjectName<doubleQuotes46>, commandObject);<newline46mondego>    return <doubleQuotes46>yourJSPMapping/jspName<doubleQuotes46>;<newline46mondego>}<newline46mondego>"
"2199splitHere46","20146022splitHere46","<div id=<doubleQuotes46>container<doubleQuotes46>>"
"2200splitHere46","20146564splitHere46","compareTo()"
"2201splitHere46","20146564splitHere46","Tuple"
"2202splitHere46","20146564splitHere46","Tuple"
"2203splitHere46","20146564splitHere46","CustomTupleComparator"
"2204splitHere46","20146564splitHere46","public class CustomTupleComparator<T1 extends Comparable<? super T1>, <newline46mondego>                                   T2 extends Comparable<? super T2>> <newline46mondego>             implements Comparator<Tuple<T1, T2>><newline46mondego>{<newline46mondego>    @Override<newline46mondego>    public int compare(Tuple<T1, T2> o1, Tuple<T1, T2> o2)<newline46mondego>    {<newline46mondego>        int result = o1.getSecond().compareTo(o2.getSecond());<newline46mondego><newline46mondego>        return result != 0 ? result<newline46mondego>                           : -o1.getFirst().compareTo(o2.getFirst());<newline46mondego>    }<newline46mondego>}<newline46mondego>"
"2205splitHere46","20146564splitHere46","Tuple"
"2206splitHere46","20146564splitHere46","Comparable"
"2207splitHere46","20146564splitHere46","public class Tuple<T1 extends Comparable<? super T1>, <newline46mondego>                   T2 extends Comparable<? super T2>> { }<newline46mondego>"
"2208splitHere46","20146564splitHere46","Comparable<? super T1>"
"2209splitHere46","20146564splitHere46","Comparable<T1>"
"2210splitHere46","20146564splitHere46","Comparable<SuperType>"
"2211splitHere46","20146564splitHere46","Comparable"
"2212splitHere46","20146564splitHere46","? super T1"
"2213splitHere46","20146629splitHere46","IServiceLocator serviceLocator = PlatformUI.getWorkbench();<newline46mondego>ICommandService commandService = (ICommandService) serviceLocator.getService(ICommandService.class);<newline46mondego><newline46mondego>try  { <newline46mondego>        Command command = commandService.getCommand(<doubleQuotes46>my_command_id<doubleQuotes46>);<newline46mondego>        Map<String, String> map = new HashMap<String, String>();<newline46mondego>        map.put(<doubleQuotes46>param_name<doubleQuotes46>, <doubleQuotes46>param_value<doubleQuotes46>);<newline46mondego>        /*more parameter's can be added to Map and passed*/<newline46mondego>        command.executeWithChecks(new ExecutionEvent(null, map, null, null));<newline46mondego><newline46mondego>    } catch (ExecutionException e1) {<newline46mondego><newline46mondego>    } catch (NotDefinedException e2){<newline46mondego><newline46mondego>    } catch(NotEnabledException e3){<newline46mondego><newline46mondego>    } catch(NotHandledException e4){<newline46mondego><newline46mondego>    }<newline46mondego>"
"2214splitHere46","20146663splitHere46","java.io.FileOutputStream"
"2215splitHere46","20146663splitHere46","java.io.FileOutputStream"
"2216splitHere46","20146735splitHere46","java.*"
"2217splitHere46","20147057splitHere46","private final"
"2218splitHere46","20147057splitHere46","@PersistenceContstructor"
"2219splitHere46","20147057splitHere46","org.springframework.core.convert.converter.Converter"
"2220splitHere46","20147057splitHere46","@ReadingConverter<newline46mondego>public class SnapshotReadingConverter implements Converter<DBObject, Snapshot> {<newline46mondego><newline46mondego>    @Override<newline46mondego>    public Snapshot convert(DBObject source) {<newline46mondego>        long id = (Long) source.get(<doubleQuotes46>_id<doubleQuotes46>);<newline46mondego>        String description = (String) source.get(<doubleQuotes46>description<doubleQuotes46>);<newline46mondego>        boolean active = (Boolean) source.get(<doubleQuotes46>active<doubleQuotes46>);<newline46mondego>        boolean billable = false;<newline46mondego>        if (source.get(<doubleQuotes46>billable<doubleQuotes46>) != null) {<newline46mondego>            billable = (Boolean) source.get(<doubleQuotes46>billable<doubleQuotes46>);<newline46mondego>        }<newline46mondego>        return new Snapshot(id, description, active, billable);<newline46mondego>    }<newline46mondego>}<newline46mondego>"
"2221splitHere46","20147155splitHere46","org.jboss.proxy.ClientContainer"
"2222splitHere46","20147330splitHere46","@SuppressWarnings(<doubleQuotes46>deprecation<doubleQuotes46>)"
"2223splitHere46","20147330splitHere46","org.apache.coyote. USE_CUSTOM_STATUS_MSG_IN_HEADER"
"2224splitHere46","20147330splitHere46","true"
"2225splitHere46","20147354splitHere46","barrier.await()"
"2226splitHere46","20147446splitHere46","output=$(liquibase --<doubleQuotes46>lots of parameters here<doubleQuotes46>) > /dev/null 2> /dev/null<newline46mondego>"
"2227splitHere46","20147446splitHere46","STDOUT"
"2228splitHere46","20147446splitHere46","STDERR"
"2229splitHere46","20147446splitHere46","STDERR"
"2230splitHere46","20147446splitHere46","STDOUT"
"2231splitHere46","20147446splitHere46","STDERR"
"2232splitHere46","20147446splitHere46","output=$(liquibase --<doubleQuotes46>lots of parameters here<doubleQuotes46> 2>&1)<newline46mondego>"
"2233splitHere46","20147446splitHere46","STDOUT"
"2234splitHere46","20147446splitHere46","output=$(liquibase --<doubleQuotes46>lots of parameters here<doubleQuotes46> 2>/dev/null)<newline46mondego>"
"2235splitHere46","20147451splitHere46","Attributes matchAttrs = new BasicAttributes(true);<newline46mondego>matchAttrs.put(new BasiAttribute(<doubleQuotes46>mail<doubleQuotes46>, <doubleQuotes46>admin@test.com<doubleQuotes46>));<newline46mondego>NamingEnumeration<SearchResult> answer = ctx.search(context, matchAttrs);<newline46mondego>"
"2236splitHere46","20147451splitHere46","ctx"
"2237splitHere46","20147451splitHere46","InitialDirContext"
"2238splitHere46","20147451splitHere46","context"
"2239splitHere46","20147459splitHere46","<source>"
"2240splitHere46","20147459splitHere46","<target>"
"2241splitHere46","20147459splitHere46","pluginManagenent"
"2242splitHere46","20147459splitHere46","maven-compiler-plugin"
"2243splitHere46","20147459splitHere46","<pluginManagement><newline46mondego>    <plugins><newline46mondego>        <plugin><newline46mondego>            <groupId>org.eclipse.m2e</groupId><newline46mondego>            <artifactId>lifecycle-mapping</artifactId><newline46mondego>            <version>1.0.0</version><newline46mondego>            <configuration><newline46mondego>                 <lifecycleMappingMetadata><newline46mondego>                       <pluginExecutions><newline46mondego>                             <pluginExecution><newline46mondego>                                 <pluginExecutionFilter><newline46mondego>                                       <groupId>org.apache.maven.plugins</groupId><newline46mondego>                                       <artifactId>maven-compiler-plugin</artifactId><newline46mondego>                                       <versionRange>[1.0.0,)</versionRange><newline46mondego>                                     <goals><newline46mondego>                                         <goal>compile</goal><newline46mondego>                                     </goals><newline46mondego>                                 </pluginExecutionFilter><newline46mondego>                                 <action><newline46mondego>                                      <ignore /><newline46mondego>                                 </action><newline46mondego>                             </pluginExecution><newline46mondego>                       </pluginExecutions><newline46mondego>                 </lifecycleMappingMetadata><newline46mondego>           </configuration><newline46mondego>       </plugin><newline46mondego>    </plugins><newline46mondego></pluginManagement><newline46mondego>"
"2244splitHere46","20147464splitHere46","clone()"
"2245splitHere46","20147464splitHere46","Object"
"2246splitHere46","20147464splitHere46","ArrayList"
"2247splitHere46","20147464splitHere46","this.productOrderList =  new ArrayList<ViewOrderProduct>(globalOrderProductList);<newline46mondego>"
"2248splitHere46","20147464splitHere46","clone()"
"2249splitHere46","20147464splitHere46","SuppressWarning"
"2250splitHere46","20147877splitHere46","picture"
"2251splitHere46","20147877splitHere46","FieldBridge"
"2252splitHere46","20147877splitHere46","picture.tags"
"2253splitHere46","20147877splitHere46","tags"
"2254splitHere46","20147901splitHere46","java classpath"
"2255splitHere46","20147901splitHere46","java"
"2256splitHere46","20147901splitHere46","CLASSPATH"
"2257splitHere46","20147901splitHere46","//if CLASSPATH variable set in environment<newline46mondego>java -cp . com.lara.CoffeeTest<newline46mondego>"
"2258splitHere46","20147901splitHere46","java com.lara.CoffeeTest<newline46mondego>"
"2259splitHere46","20148072splitHere46","public class Player{<newline46mondego><newline46mondego>    String name;<newline46mondego>    int age; //I'm not sure what the integer is supposed to represent<newline46mondego><newline46mondego>    //constructor<newline46mondego>    Player(String playerName, int playerAge){<newline46mondego>        this.name = playerName;<newline46mondego>        this.age = playerAge;<newline46mondego>    }<newline46mondego><newline46mondego>    //getters<newline46mondego>    public String getName(){<newline46mondego>        return this.name;    <newline46mondego>    }<newline46mondego><newline46mondego>    public int getAge(){<newline46mondego>        return this.age;    <newline46mondego>    }<newline46mondego><newline46mondego>}<newline46mondego>"
"2260splitHere46","20148072splitHere46","Player sam = new Player(<doubleQuotes46>Sam<doubleQuotes46>, 24);<newline46mondego>"
"2261splitHere46","20148072splitHere46","stack.push(sam);<newline46mondego>"
"2262splitHere46","20148524splitHere46","Java Build Path"
"2263splitHere46","20148524splitHere46","Order and Export"
"2264splitHere46","20148639splitHere46","10.0.2.2"
"2265splitHere46","20148712splitHere46","Object o = new Object(); <newline46mondego>"
"2266splitHere46","20148712splitHere46","do<newline46mondego> {<newline46mondego>   Object o = new Object(); // set o to point to a new Object<newline46mondego>   arrayList.add(o); //add a reference to the new object to the ArrayList<newline46mondego> }while(true)<newline46mondego>"
"2267splitHere46","20148712splitHere46","do<newline46mondego> {<newline46mondego>   g.setName(<doubleQuotes46>Steven<doubleQuotes46>);<newline46mondego>   arrayList.add(o);<newline46mondego> }while(true)<newline46mondego>"
"2268splitHere46","20148774splitHere46","Serializable"
"2269splitHere46","20148774splitHere46","Non-Serializable Object exception"
"2270splitHere46","20148774splitHere46","transient"
"2271splitHere46","20148927splitHere46","OutputStream os = new FileOutputStream(<doubleQuotes46>C:/feed.xml<doubleQuotes46>), <doubleQuotes46>UTF-8<doubleQuotes46>)<newline46mondego>byte[] buffer = new byte[4096];<newline46mondego>int len = 0;<newline46mondego>while ((len = is.read(buffer)) > 0) {<newline46mondego>    os.write(buffer, 0, len);<newline46mondego>}<newline46mondego>os.flush();<newline46mondego>os.close();<newline46mondego>"
"2272splitHere46","20148927splitHere46","~/junk $ curl -v -O http://www.deutschlandradio.de/podcast-bildung-und-wissenschaft.419.de.podcast<newline46mondego>* About to connect() to www.deutschlandradio.de port 80 (#0)<newline46mondego>*   Trying 217.69.91.96... connected<newline46mondego>* Connected to www.deutschlandradio.de (217.69.91.96) port 80 (#0)<newline46mondego>> GET /podcast-bildung-und-wissenschaft.419.de.podcast HTTP/1.1<newline46mondego>> User-Agent: curl/7.19.7 (x86_64-redhat-linux-gnu) libcurl/7.19.7 NSS/3.12.9.0 zlib/1.2.3 libidn/1.18 libssh2/1.2.2<newline46mondego>> Host: www.deutschlandradio.de<newline46mondego>> Accept: */*<newline46mondego>> <newline46mondego>  % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current<newline46mondego>                                 Dload  Upload   Total   Spent    Left  Speed<newline46mondego>  0     0    0     0    0     0      0      0 --:--:-- --:--:-- --:--:--     0< HTTP/1.1 200 OK<newline46mondego>< Server: Apache<newline46mondego>< P3P: CP=<doubleQuotes46>NOI NID ADMa OUR IND UNI COM NAV<doubleQuotes46><newline46mondego>< Expires: Fri, 22 Nov 2013 15:48:50 GMT<newline46mondego>< Cache-Control: public, max-age=60, pre-check=60, no-transform<newline46mondego>< Pragma:<newline46mondego>< Last-modified: Fri, 22 Nov 2013 15:47:51 GMT<newline46mondego>< Content-Encoding: gzip<newline46mondego>< X-DW-Server: www05<newline46mondego>< Content-Type: application/xml; charset=utf-8<newline46mondego>< Content-Length: 5111<newline46mondego>< Date: Fri, 22 Nov 2013 15:53:18 GMT<newline46mondego>< X-Varnish: 1993556337 1993540162<newline46mondego>< Age: 327<newline46mondego>< Via: 1.1 varnish<newline46mondego>< Connection: keep-alive<newline46mondego>"
"2273splitHere46","20148927splitHere46","if (<doubleQuotes46>gzip<doubleQuotes46>.equals(httpOpenConnection.getContentEncoding()) {<newline46mondego>    is = new GZipInputStream(is);<newline46mondego>}<newline46mondego>OutputStream os = new FileOutputStream(<doubleQuotes46>C:/feed.xml<doubleQuotes46>), <doubleQuotes46>UTF-8<doubleQuotes46>)<newline46mondego>byte[] buffer = new byte[4096];<newline46mondego>int len = 0;<newline46mondego>while ((len = is.read(buffer)) > 0) {<newline46mondego>    os.write(buffer, 0, len);<newline46mondego>}<newline46mondego>os.flush();<newline46mondego>os.close();<newline46mondego>"
"2274splitHere46","20148951splitHere46","ResponseList<Post> feed = facebook.getFeed(<doubleQuotes46>eclipse.org<doubleQuotes46>);<newline46mondego>"
"2275splitHere46","20148959splitHere46","ServletContextAttributeExporter"
"2276splitHere46","20148959splitHere46","attributes"
"2277splitHere46","20148959splitHere46","key and value"
"2278splitHere46","20148959splitHere46","ServletContext"
"2279splitHere46","20148959splitHere46","<bean class=<doubleQuotes46>org.springframework.web.context.support.ServletContextAttributeExporter<doubleQuotes46>><newline46mondego>    <property name=<doubleQuotes46>attributes<doubleQuotes46>><newline46mondego>        <map><newline46mondego>            <entry key=<doubleQuotes46>myKey<doubleQuotes46> value=<doubleQuotes46>1<doubleQuotes46> /><newline46mondego>        </map><newline46mondego>    </property><newline46mondego></bean><newline46mondego>"
"2280splitHere46","20148990splitHere46","List<Programmer> listOfProgrammers = new ArrayList<Programmer>();<newline46mondego>"
"2281splitHere46","20148990splitHere46","listOfProgrammers.add(p);<newline46mondego>"
"2282splitHere46","20149096splitHere46","synchronized"
"2283splitHere46","20149096splitHere46","private final Object lock = new Object();<newline46mondego><newline46mondego>public void run() {<newline46mondego>    synchronized (lock) {<newline46mondego>        doSomething();<newline46mondego>    }<newline46mondego>}<newline46mondego>"
"2284splitHere46","20149096splitHere46","synchronized"
"2285splitHere46","20149096splitHere46","java.util.concurrent.locks.Lock"
"2286splitHere46","20149096splitHere46","synchornized"
"2287splitHere46","20149113splitHere46","setLayout( new BorderLayout() );<newline46mondego>add(game, BorderLayout.CENTER);<newline46mondego>add(options, BorderLayout.EAST);<newline46mondego>add(conditions, BorderLayout.SOUTH);<newline46mondego>"
"2288splitHere46","20149245splitHere46","day.setMaxValue(30);<newline46mondego>day.setMinValue(0);<newline46mondego>month.setMinValue(0);<newline46mondego>month.setMaxValue(11);<newline46mondego>"
"2289splitHere46","20149284splitHere46","@Override<newline46mondego>protected void onCreate(Bundle savedInstanceState) {<newline46mondego>    super.onCreate(savedInstanceState);<newline46mondego><newline46mondego>    LinearLayout rootLayout = new LinearLayout(getApplicationContext());<newline46mondego>    rootLayout.setOrientation(LinearLayout.VERTICAL);<newline46mondego><newline46mondego>    //Convert DIPs to Pixels<newline46mondego>    int dp = 50;<newline46mondego>    int px = (int) TypedValue.applyDimension(TypedValue.COMPLEX_UNIT_DIP, dp, getResources().getDisplayMetrics());<newline46mondego><newline46mondego>    LinearLayout.LayoutParams layoutParams = new LinearLayout.LayoutParams(px * 4, px);<newline46mondego><newline46mondego>    for (int i = 1; i < 6; i++) {<newline46mondego>        Button button = new Button(getApplicationContext());<newline46mondego>        button.setLayoutParams(layoutParams);<newline46mondego>        button.setText(<doubleQuotes46>Button <doubleQuotes46> + i);<newline46mondego>        rootLayout.addView(button);<newline46mondego>    }<newline46mondego><newline46mondego>    setContentView(rootLayout);<newline46mondego>}<newline46mondego>"
"2290splitHere46","20149385splitHere46","public static String[] blammy(final Scanner input)<newline46mondego>{<newline46mondego>    boolean success = false;<newline46mondego><newline46mondego>    while (!success)<newline46mondego>    {<newline46mondego>        try<newline46mondego>        {<newline46mondego>            // stuff.<newline46mondego>            success = true;<newline46mondego>        }<newline46mondego>        catch (FileNotFouncException exception)<newline46mondego>        {<newline46mondego>            // error stuff here.<newline46mondego>        }<newline46mondego>    }<newline46mondego>}<newline46mondego>"
"2291splitHere46","20149588splitHere46","public class ScrabbleAssistant { <newline46mondego>    //int maxScore = 0;  <newline46mondego>    //String bestWord = <doubleQuotes46><doubleQuotes46>;  moved into getBestWord(), does not need class scope<newline46mondego>    //int totalScore = 0; moved into methods, class scope could cause issues<newline46mondego><newline46mondego>    // added public, do not forget to give your methods a scope, changed letterScores to camelCase for readability<newline46mondego>    public String getBestWord(List<String> options, Map<Character, Integer> letterScores) {<newline46mondego>        String bestWord = <doubleQuotes46><doubleQuotes46>;<newline46mondego>        int maxScore = 0;<newline46mondego>        int totalScore;<newline46mondego><newline46mondego>        for (int i = 0; i < options.size(); i++) {<newline46mondego><newline46mondego>            totalScore = //what method should go here? hint: calculates the score of the given word<newline46mondego><newline46mondego>            if (totalScore > maxScore) {<newline46mondego>                maxScore = totalScore;<newline46mondego>                bestWord = // what is the best word? hint: its the current index of options <newline46mondego>               //return totalScore; //this is the wrong place to make a return, and you can't return an int in a class that returns a String  <newline46mondego>             }<newline46mondego>        }<newline46mondego>        return // what should you return here? hint: must be a string<newline46mondego>    }<newline46mondego><newline46mondego>// added public, do not forget to give your methods a scope, chnaged letterScores to camelCase for readability, removed Integer total parameter, was unnecessary<newline46mondego>    public Integer getScore(String word, Map<Character, Integer>letterScores) {<newline46mondego>        int totalScore = 0;<newline46mondego><newline46mondego>        for (int i = 0; i < word.length(); i++)  { // you were iterating through the map of letter scores, not the actual String passed in<newline46mondego>            // you should not remove, you should use get the score of the letter from the current index of the string<newline46mondego>            // this is fixed for you<newline46mondego>            totalScore = totalScore + (letterScores.get(word.charAt(i).intValue();<newline46mondego>        }<newline46mondego><newline46mondego>        //if (totalScore > maxScore){  This logic should not be here, this method should return the total score<newline46mondego>        //maxScore = totalScore;<newline46mondego>        //bestWord + word;<newline46mondego>        //}<newline46mondego>        return totalScore;<newline46mondego>    }<newline46mondego>}<newline46mondego>"
"2292splitHere46","20149666splitHere46","nextDouble()"
"2293splitHere46","20149666splitHere46","InputStream"
"2294splitHere46","20149666splitHere46","\n"
"2295splitHere46","20149666splitHere46","input.next();"
"2296splitHere46","20149666splitHere46","input.nextLine();"
"2297splitHere46","20149666splitHere46","catch"
"2298splitHere46","20149666splitHere46","\n"
"2299splitHere46","20149666splitHere46","nextDouble"
"2300splitHere46","20149666splitHere46","\n"
"2301splitHere46","20149666splitHere46","Scanner"
"2302splitHere46","20149666splitHere46","double"
"2303splitHere46","20149666splitHere46","double"
"2304splitHere46","20149666splitHere46","nextDouble"
"2305splitHere46","20149666splitHere46","input.next();"
"2306splitHere46","20149666splitHere46","System.out.println(<doubleQuotes46>Please enter fluids ID: <doubleQuotes46>);<newline46mondego>while (true) {<newline46mondego>    try {<newline46mondego>        f.setFluidID(input.next());<newline46mondego>        break; // break out of the current loop<newline46mondego>    } catch (InputMismatchException e) {<newline46mondego>        System.out.println(<doubleQuotes46>Error! Please provide the right input.<doubleQuotes46>);<newline46mondego>        input.next();<newline46mondego>    }<newline46mondego>}<newline46mondego><newline46mondego>System.out.println(<doubleQuotes46>Please enter fluids molecular weight: <doubleQuotes46>);<newline46mondego>while (true) {<newline46mondego>    try {<newline46mondego>        f.setMolecularWeight(input.nextDouble());<newline46mondego>        break; // break out of the current loop<newline46mondego>    } catch (InputMismatchException e) {<newline46mondego>        System.out.println(<doubleQuotes46>Error! Please provide the right input.<doubleQuotes46>);<newline46mondego>        input.next();<newline46mondego>    }<newline46mondego>}<newline46mondego><newline46mondego>System.out.println(<doubleQuotes46>Please enter fluids temperature: <doubleQuotes46>);<newline46mondego>while (true) {<newline46mondego>    try {<newline46mondego>        f.setTemperature(input.nextDouble());<newline46mondego>        break; // break out of the current loop<newline46mondego>    } catch (InputMismatchException e) {<newline46mondego>        System.out.println(<doubleQuotes46>Error! Please provide the right input.<doubleQuotes46>);<newline46mondego>        input.next();<newline46mondego>    }<newline46mondego>}<newline46mondego>"
"2307splitHere46","20149666splitHere46","input.next()"
"2308splitHere46","20149771splitHere46","return new File(sb.toString());<newline46mondego>"
"2309splitHere46","20149771splitHere46","java.io.File"
"2310splitHere46","20149771splitHere46","File"
"2311splitHere46","20149771splitHere46","FileWriter"
"2312splitHere46","20149771splitHere46","PrintWriter"
"2313splitHere46","20149771splitHere46","File"
"2314splitHere46","20149771splitHere46","PrintWriter pw = new PrintWriter(new FileWriter(<doubleQuotes46>somename.txt<doubleQuotes46>));<newline46mondego>while(kb.hasNext())<newline46mondego>    pw.println(kb.nextLine());<newline46mondego>pw.close();<newline46mondego>return new File(<doubleQuotes46>somename.txt<doubleQuotes46>);<newline46mondego>"
"2315splitHere46","20149794splitHere46","public class Response {<newline46mondego>  public long id;<newline46mondego>  public Object rated;<newline46mondego>}<newline46mondego>// OR<newline46mondego>public class Response {<newline46mondego>  public long id;<newline46mondego>  public JsonNode rated;<newline46mondego>}<newline46mondego>Response r = mapper.readValue(source, Response.class);<newline46mondego>"
"2316splitHere46","20149794splitHere46","Boolean"
"2317splitHere46","20149794splitHere46","java.util.Map"
"2318splitHere46","20149794splitHere46","JsonNode"
"2319splitHere46","20149794splitHere46","if (r.rated instanced Boolean) {<newline46mondego>    // handle that<newline46mondego>} else {<newline46mondego>    ActualRated actual = mapper.convertValue(r.rated, ActualRated.class);<newline46mondego>}<newline46mondego>// or, if you used JsonNode, use <doubleQuotes46>mapper.treeToValue(ActualRated.class)<newline46mondego>"
"2320splitHere46","20149861splitHere46","String"
"2321splitHere46","20149861splitHere46","byte[]"
"2322splitHere46","20149935splitHere46","test.aar|-----META_INF<newline46mondego>        |<newline46mondego>        |......folder contains classes  <newline46mondego>"
"2323splitHere46","20149942splitHere46","${basedir}"
"2324splitHere46","20149942splitHere46","${basedir}"
"2325splitHere46","20149942splitHere46","<fileset/>"
"2326splitHere46","20149942splitHere46","regexreplace"
"2327splitHere46","20149942splitHere46","<var name=<doubleQuotes46>dest.name<doubleQuotes46>               unset=<doubleQuotes46>true<doubleQuotes46>/><newline46mondego>            <var name=<doubleQuotes46>file.lastmodified<doubleQuotes46>       unset=<doubleQuotes46>true<doubleQuotes46>/><newline46mondego>            <var name=<doubleQuotes46>file.type<doubleQuotes46>               unset=<doubleQuotes46>true<doubleQuotes46>/><newline46mondego><newline46mondego>            <file.mdate file=<doubleQuotes46>@{file}<doubleQuotes46><newline46mondego>            property=<doubleQuotes46>file.lastmodified<doubleQuotes46>/><newline46mondego><newline46mondego>            <propertyregex property=<doubleQuotes46>file<doubleQuotes46><newline46mondego>            input=<doubleQuotes46>@{file}<doubleQuotes46><newline46mondego>            regexp=<doubleQuotes46>\\<doubleQuotes46><newline46mondego>            replace=<doubleQuotes46>/<doubleQuotes46><newline46mondego>            override=<doubleQuotes46>true<doubleQuotes46><newline46mondego>            defaultvalue=<doubleQuotes46>@{file}<doubleQuotes46>/><newline46mondego><newline46mondego>            <propertyregex property=<doubleQuotes46>dest.name<doubleQuotes46><newline46mondego>            input=<doubleQuotes46>${file}<doubleQuotes46><newline46mondego>            regexp=<doubleQuotes46>^${fileset}/<doubleQuotes46><newline46mondego>            replace=<doubleQuotes46><doubleQuotes46><newline46mondego>            override=<doubleQuotes46>true<doubleQuotes46>/><newline46mondego>"
"2328splitHere46","20149942splitHere46","<var/>"
"2329splitHere46","20149942splitHere46","<for>"
"2330splitHere46","20149942splitHere46","regexreplace"
"2331splitHere46","20149942splitHere46","C:\projects\Dev\Main\Sample Game\js\simple\welcome\ss.js<newline46mondego>"
"2332splitHere46","20149942splitHere46","C:/projects/Dev/Main/Sample Game/js/simple/welcome/ss.js<newline46mondego>"
"2333splitHere46","20149942splitHere46","basedir"
"2334splitHere46","20149942splitHere46","/js/"
"2335splitHere46","20149942splitHere46","<regexreplace property=<doubleQuotes46>currentdirectory<doubleQuotes46><newline46mondego>    file=<doubleQuotes46>@{file}<doubleQuotes46><newline46mondego>    regex=<doubleQuotes46>.*/js/(.*)<doubleQuotes46><newline46mondego>    select=<doubleQuotes46>\1<doubleQuotes46><newline46mondego>    override=<doubleQuotes46>true<doubleQuotes46>/><newline46mondego>"
"2336splitHere46","20149976splitHere46","public static boolean itisSorted(int[] data, int n) {<newline46mondego>  // Null or less then 2 elements is sorted.<newline46mondego>  if (data == null || n < 2) {<newline46mondego>    return true;<newline46mondego>  } else if (data[n - 2] > data[n - 1]) {<newline46mondego>    // If the element before (n-2) this one (n-1) is greater,<newline46mondego>    return false;<newline46mondego>  }<newline46mondego>  // recurse.<newline46mondego>  return itisSorted(data, n - 1);<newline46mondego>}<newline46mondego><newline46mondego>public static void main(String[] args) {<newline46mondego>  int [] data = {1,2,3};<newline46mondego>  System.out.println(Arrays.toString(data) //<newline46mondego>      + (itisSorted(data, data.length) ? <doubleQuotes46> Sorted<doubleQuotes46> : <doubleQuotes46> Unsorted<doubleQuotes46>));<newline46mondego>  data = new int[] {3,2,1};<newline46mondego>  System.out.println(Arrays.toString(data) //<newline46mondego>      + (itisSorted(data, data.length) ? <doubleQuotes46> Sorted<doubleQuotes46> : <doubleQuotes46> Unsorted<doubleQuotes46>));<newline46mondego>}<newline46mondego>"
"2337splitHere46","20149993splitHere46","@PrimaryKeyJoinColumn"
"2338splitHere46","20149993splitHere46","@JoinColumn"
"2339splitHere46","20149994splitHere46","volatile"
"2340splitHere46","20149994splitHere46","AtomicInteger"
"2341splitHere46","20150038splitHere46","/**<newline46mondego> * your description here *&#47<newline46mondego> */<newline46mondego>"
"2342splitHere46","20150102splitHere46","mapNulls"
"2343splitHere46","20150102splitHere46","ConfigurableMapper"
"2344splitHere46","20150178splitHere46","export JAVA_HOME=/home/jdk/jdk1.7.0_45<newline46mondego>export PATH=$JAVA_HOME/bin:$PATH<newline46mondego>"
"2345splitHere46","20150193splitHere46","for"
"2346splitHere46","20150193splitHere46","size()"
"2347splitHere46","20150193splitHere46","5"
"2348splitHere46","20150193splitHere46","0"
"2349splitHere46","20150193splitHere46","get()"
"2350splitHere46","20150193splitHere46","set()"
"2351splitHere46","20150193splitHere46","ArrayList"
"2352splitHere46","20150193splitHere46","LinkedList"
"2353splitHere46","20150193splitHere46","arrayList.get(linkedListNumber).offer(card);"
"2354splitHere46","20150309splitHere46","s.equals(cis)"
"2355splitHere46","20150309splitHere46","false"
"2356splitHere46","20150309splitHere46","String"
"2357splitHere46","20150309splitHere46","String"
"2358splitHere46","20150309splitHere46","false"
"2359splitHere46","20150309splitHere46","s.equals(cis)"
"2360splitHere46","20150309splitHere46","false"
"2361splitHere46","20150309splitHere46","cis.equals(s)"
"2362splitHere46","20150309splitHere46","false"
"2363splitHere46","20150309splitHere46","instanceof"
"2364splitHere46","20150309splitHere46","String#equals(Object o)"
"2365splitHere46","20150309splitHere46","o instanceof String"
"2366splitHere46","20150309splitHere46","String"
"2367splitHere46","20150309splitHere46","final"
"2368splitHere46","20150309splitHere46","String"
"2369splitHere46","20150309splitHere46","String s = <doubleQuotes46>Hello<doubleQuotes46>;<newline46mondego>SubclassOfString sos = new SubclassOfString(<doubleQuotes46>Hello<doubleQuotes46>);<newline46mondego>s.equals(sos) == true // as sos is instanceof String<newline46mondego>sos.equals(s) == false // as s is NOT instanceof SubclassOfString<newline46mondego>"
"2370splitHere46","20150309splitHere46","final"
"2371splitHere46","20150309splitHere46","this.getClass() == o.getClass()"
"2372splitHere46","20150309splitHere46","instanceof"
"2373splitHere46","20150309splitHere46","equals(Object)"
"2374splitHere46","20150406splitHere46","request.getAttribute(<doubleQuotes46>javax.servlet.forward.request_uri<doubleQuotes46>)  <newline46mondego>"
"2375splitHere46","20150406splitHere46","request.getHeader(<doubleQuotes46>Referer<doubleQuotes46>); <newline46mondego>"
"2376splitHere46","20150406splitHere46","String requestUrl=request.getRequestURL();<newline46mondego> session.setAttribute(<doubleQuotes46>pervious_page<doubleQuotes46>,requestUrl);<newline46mondego>"
"2377splitHere46","20150406splitHere46","session.getAttribute(<doubleQuotes46>pervious_page<doubleQuotes46>);<newline46mondego>"
"2378splitHere46","20150517splitHere46","String"
"2379splitHere46","20150517splitHere46","writeBytes"
"2380splitHere46","20150573splitHere46","T"
"2381splitHere46","20150573splitHere46","Node"
"2382splitHere46","20150573splitHere46","T"
"2383splitHere46","20150573splitHere46","Graph"
"2384splitHere46","20150573splitHere46","T"
"2385splitHere46","20150573splitHere46","Node"
"2386splitHere46","20150575splitHere46","double[][]"
"2387splitHere46","20150575splitHere46","List<List<Double>>"
"2388splitHere46","20150575splitHere46","InputStream    fis;<newline46mondego>BufferedReader br;<newline46mondego>String         line;<newline46mondego><newline46mondego>fis = new FileInputStream(<doubleQuotes46>the_file_name<doubleQuotes46>);<newline46mondego>br = new BufferedReader(new InputStreamReader(fis, Charset.forName(<doubleQuotes46>UTF-8<doubleQuotes46>)));<newline46mondego>while ((line = br.readLine()) != null) {<newline46mondego>    // Deal with the line<newline46mondego>}<newline46mondego><newline46mondego>// Done with the file<newline46mondego>br.close();<newline46mondego>br = null;<newline46mondego>fis = null;<newline46mondego>"
"2389splitHere46","20150575splitHere46","List<List<Double>>"
"2390splitHere46","20150575splitHere46","double[][]"
"2391splitHere46","20150575splitHere46","readLine()"
"2392splitHere46","20150575splitHere46","while ((line = br.readLine()) != null) {<newline46mondego>    for (int i = 0; i < rows; i++){<newline46mondego>        for(int j = 0; j< columns; j++){<newline46mondego>            line = array[i][j];<newline46mondego>         }<newline46mondego>     }   <newline46mondego>}<newline46mondego>"
"2393splitHere46","20150575splitHere46","int i = 0;<newline46mondego>while ((line = br.readLine()) != null) {<newline46mondego>    array[i][0] = line;<newline46mondego>    i++<newline46mondego>}<newline46mondego>"
"2394splitHere46","20150605splitHere46","public void onLocaitonChanged(Location location){<newline46mondego><newline46mondego>  // this if statement may achieve the condition many times<newline46mondego>  if(somethingHappened){<newline46mondego><newline46mondego>       if (!isAlreadyCalled){   <newline46mondego>           callAMethodOnce();// this method is called once even if the condition achieved again<newline46mondego>           isAlreadyCalled = true;<newline46mondego>       }<newline46mondego>  }<newline46mondego><newline46mondego>}<newline46mondego>"
"2395splitHere46","20150627splitHere46","Button go = new Button(<doubleQuotes46>Go<doubleQuotes46>);<newline46mondego><newline46mondego>EventHandler<ActionEvent> goAction = new EventHandler<ActionEvent>() {<newline46mondego>    @Override<newline46mondego>    public void handle(ActionEvent arg0) {<newline46mondego>        browser.load(location.getText(), new Runnable() {<newline46mondego>            @Override<newline46mondego>            public void run() {<newline46mondego>                System.out.println(<doubleQuotes46>---------------<doubleQuotes46>);<newline46mondego>                System.out.println(browser.getHTML());<newline46mondego>            }<newline46mondego>        });<newline46mondego>    }<newline46mondego>};<newline46mondego><newline46mondego>...<newline46mondego><newline46mondego>MenuItem menuItem = new MenuItem(<doubleQuotes46>Go!<doubleQuotes46>);<newline46mondego>menuItem.setAccelerator(new KeyCodeCombination(KeyCode.G, KeyCombination.CONTROL_DOWN));<newline46mondego><newline46mondego>go.setOnAction(goAction);<newline46mondego>menuItem.setOnAction(goAction);<newline46mondego>"
"2396splitHere46","20150631splitHere46","Scanner reader = new Scanner(new File(nameMachine+<doubleQuotes46>.txt<doubleQuotes46>));<newline46mondego>"
"2397splitHere46","20150656splitHere46","\deleted"
"2398splitHere46","20150656splitHere46","store +flags.silent \deleted"
"2399splitHere46","20150656splitHere46","\deleted"
"2400splitHere46","20150656splitHere46","expunge"
"2401splitHere46","20150676splitHere46","Pattern"
"2402splitHere46","20150676splitHere46","public static String format(String input, String[] args) {<newline46mondego>    StringBuffer sb = new StringBuffer();<newline46mondego><newline46mondego>    Matcher matcher = Pattern.compile(<doubleQuotes46>\\d+<doubleQuotes46>).matcher(input);<newline46mondego>    while (matcher.find()) {<newline46mondego>        int nr = Integer.parseInt(matcher.group());<newline46mondego>        if (nr <= args.length) {<newline46mondego>            matcher.appendReplacement(sb, Matcher.quoteReplacement(args[nr - 1]));<newline46mondego>        }<newline46mondego>    }<newline46mondego><newline46mondego>    matcher.appendTail(sb);<newline46mondego><newline46mondego>    return sb.toString();<newline46mondego>}<newline46mondego>"
"2403splitHere46","20150702splitHere46","E"
"2404splitHere46","20150702splitHere46","ProblemClass"
"2405splitHere46","20150702splitHere46","E"
"2406splitHere46","20150702splitHere46","InnerClass"
"2407splitHere46","20150702splitHere46","public class SuperClass<E> {<newline46mondego><newline46mondego>    private class InnerClass<F> {<newline46mondego>    }<newline46mondego><newline46mondego>    private class ProblemClass<G> {<newline46mondego>        private InnerClass<G> o;<newline46mondego><newline46mondego>        public ProblemClass() {<newline46mondego>            o = a;<newline46mondego>        }<newline46mondego>    }<newline46mondego><newline46mondego>    private InnerClass<E> a;<newline46mondego>}<newline46mondego>"
"2408splitHere46","20150702splitHere46","a"
"2409splitHere46","20150702splitHere46","o"
"2410splitHere46","20150744splitHere46","jsvc -cp globalclasspath/*:daemons/service.jar (...)<newline46mondego>"
"2411splitHere46","20150744splitHere46","URLClassLoader"
"2412splitHere46","20150744splitHere46","globalclasspath"
"2413splitHere46","20150744splitHere46","URLClassLoader"
"2414splitHere46","20150744splitHere46","URLClassLoader"
"2415splitHere46","20150744splitHere46","ResourceList"
"2416splitHere46","20150744splitHere46","public class MyClass {<newline46mondego>    /**<newline46mondego>     * Creates a {@code URLClassLoader} from JAR files found in the<newline46mondego>     * globalclasspath directory, assuming that globalclasspath is in<newline46mondego>     * {@code System.getProperty(<doubleQuotes46>java.class.path<doubleQuotes46>)}.<newline46mondego>     */<newline46mondego>    private static URLClassLoader createURLClassLoader() {<newline46mondego>        Collection<String> resources = ResourceList.getResources(Pattern.compile(<doubleQuotes46>.*\\.jar<doubleQuotes46>));<newline46mondego>        Collection<URL> urls = new ArrayList<URL>();<newline46mondego>        for (String resource : resources) {<newline46mondego>            File file = new File(resource);<newline46mondego>            // Ensure that the JAR exists<newline46mondego>            // and is in the globalclasspath directory.<newline46mondego>            if (file.isFile() && <doubleQuotes46>globalclasspath<doubleQuotes46>.equals(file.getParentFile().getName())) {<newline46mondego>                try {<newline46mondego>                    urls.add(file.toURI().toURL());<newline46mondego>                } catch (MalformedURLException e) {<newline46mondego>                    // This should never happen.<newline46mondego>                    e.printStackTrace();<newline46mondego>                }<newline46mondego>            }<newline46mondego>        }<newline46mondego>        return new URLClassLoader(urls.toArray(new URL[urls.size()]));<newline46mondego>    }<newline46mondego><newline46mondego>    public static void main(String[] args) {<newline46mondego>        URLClassLoader classLoader = createURLClassLoader();<newline46mondego>        System.out.println(classLoader.getResource(<doubleQuotes46>mine.properties<doubleQuotes46>));<newline46mondego>    }<newline46mondego>}<newline46mondego>"
"2417splitHere46","20150744splitHere46","java -cp globalclasspath:daemons/service.jar MyClass<newline46mondego>"
"2418splitHere46","20150744splitHere46","jar:file:/workspace/all/globalclasspath/data.jar!/mine.properties<newline46mondego>"
"2419splitHere46","20150752splitHere46","int[][] tutorData = { // students per day (MTW) per tutor<newline46mondego>                {25, 3, 0}, // Amy<newline46mondego>                {14, 5, 12}, // John<newline46mondego>                {33, 22, 10}, // Nick<newline46mondego>                {0, 20, 5}}; // Maria<newline46mondego><newline46mondego>int numOfDays = tutorData[0].length; // number of days = number of <doubleQuotes46>columns<doubleQuotes46><newline46mondego>int numOfTutors = tutorData.length; // number of tutors = number of <doubleQuotes46>rows<doubleQuotes46><newline46mondego>int[] sumPerDay = new int [numOfDays]; // array to store total # of students per day<newline46mondego>int[] sumPerTutor = new int[numOfTutors]; // array to store total # of students per tutor<newline46mondego><newline46mondego>for(int i=0; i<numOfDays; i++){<newline46mondego>    for(int j=0; j<numOfTutors; j++){<newline46mondego>        sumPerDay[i] += tutorData[j][i];<newline46mondego>        sumPerTutor[j] += tutorData[j][i];<newline46mondego>    }<newline46mondego>}<newline46mondego>"
"2420splitHere46","20150752splitHere46","sumPerDay"
"2421splitHere46","20150752splitHere46","sumPerTutor"
"2422splitHere46","20150794splitHere46","public void onSensorChanged(SensorEvent event)"
"2423splitHere46","20150794splitHere46","android.hardware.SensorEventListener"
"2424splitHere46","20150794splitHere46","Activity"
"2425splitHere46","20150794splitHere46","@Override<newline46mondego>public void onSensorChanged(SensorEvent event) {<newline46mondego><newline46mondego>    if (event.sensor.getType() == Sensor.TYPE_ACCELEROMETER) {<newline46mondego>        // Execute accelerometer code<newline46mondego>    }<newline46mondego>    if (event.sensor.getType() == Sensor.TYPE_GYROSCOPE) {<newline46mondego>        // Execute gyroscope code<newline46mondego>    }<newline46mondego>}<newline46mondego>"
"2426splitHere46","20150805splitHere46","return arrlist.toArray(new Object[arrlist.size()][]);<newline46mondego>"
"2427splitHere46","20150805splitHere46","final Object[][] ret = new Object[col.length][];<newline46mondego>for (int i = 0; i < col.length; i++) ret[i] = createColumnList(col[i]);<newline46mondego>return ret;<newline46mondego>"
"2428splitHere46","20150920splitHere46","rslts.setText((Integer.parseInt(MonthlyDep.getText())+Integer.parseInt(NewAcc.getText()))+<doubleQuotes46><doubleQuotes46>);<newline46mondego>"
"2429splitHere46","20151208splitHere46","String string = <doubleQuotes46>Hello!<doubleQuotes46>;<newline46mondego>byte[] array;<newline46mondego>//String to byte[]<newline46mondego>array = string.getBytes();<newline46mondego>//byte[] to String<newline46mondego>string = new String(array);<newline46mondego>"
"2430splitHere46","20151208splitHere46","String decompressed = <doubleQuotes46>[-119, 80, 78, 71, 13, 10, 26, 10, 0, 0, 0, 13, 73, 72]<doubleQuotes46>;<newline46mondego>String[] input = decompressed.replaceAll(<doubleQuotes46>[\\[\\]]<doubleQuotes46>, <doubleQuotes46><doubleQuotes46>).split(<doubleQuotes46>, <doubleQuotes46>);<newline46mondego>byte[] output = new byte[input.length];<newline46mondego>for (int i = 0; i < input.length; i++) {<newline46mondego>    output[i] = Byte.parseByte(input[i]);<newline46mondego>}<newline46mondego>System.out.println(new String(output));<newline46mondego>"
"2431splitHere46","20151208splitHere46","PNG"
"2432splitHere46","20151259splitHere46","webView.getEngine().loadContent(<doubleQuotes46><html>hello, world</html><doubleQuotes46>, <doubleQuotes46>text/html<doubleQuotes46>);<newline46mondego>"
"2433splitHere46","20151273splitHere46","return myObjList.isEmpty()? null : myObjList.get(0);<newline46mondego>"
"2434splitHere46","20151273splitHere46","return myObjList.get(0);<newline46mondego>"
"2435splitHere46","20151273splitHere46","IndexOutOfBoundsException"
"2436splitHere46","20151310splitHere46","FE FF"
"2437splitHere46","20151310splitHere46","FF FE"
"2438splitHere46","20151310splitHere46","[-2, -1, 0, 65, 0, 66]"
"2439splitHere46","20151310splitHere46","byte[]"
"2440splitHere46","20151310splitHere46","AB"
"2441splitHere46","20151310splitHere46","char[2]"
"2442splitHere46","20151310splitHere46","byte[6]"
"2443splitHere46","20151340splitHere46","java.util.Map.Entry"
"2444splitHere46","20151340splitHere46","#!/usr/bin/jython<newline46mondego>import java.util.HashMap<newline46mondego><newline46mondego>channelList = java.util.HashMap()<newline46mondego>channelList.put(<doubleQuotes46>Hello<doubleQuotes46>, <doubleQuotes46>World<doubleQuotes46>)<newline46mondego>it = channelList.entrySet().iterator()<newline46mondego>while (it.hasNext()):<newline46mondego>    e = it.next()<newline46mondego>    print(<doubleQuotes46>key = <doubleQuotes46> + e.getKey())<newline46mondego>    print(<doubleQuotes46>value = <doubleQuotes46> + e.getValue())<newline46mondego>"
"2445splitHere46","20151340splitHere46","$ ./test.py<newline46mondego>key = Hello<newline46mondego>value = World<newline46mondego>$<newline46mondego>"
"2446splitHere46","20151387splitHere46","default: result = Integer.toString(n/16) + result; break;<newline46mondego>"
"2447splitHere46","20151387splitHere46","default: result = Integer.toString(remainder) + result; break;<newline46mondego>"
"2448splitHere46","20151387splitHere46","default: result = remainder + result; break;"
"2449splitHere46","20151387splitHere46","int"
"2450splitHere46","20151387splitHere46","String"
"2451splitHere46","20151387splitHere46","String"
"2452splitHere46","20151387splitHere46","break"
"2453splitHere46","20151387splitHere46","default"
"2454splitHere46","20151387splitHere46","'F' = 'A' + (15 - 10)"
"2455splitHere46","20151387splitHere46","Integer.toString(0)"
"2456splitHere46","20151387splitHere46","<doubleQuotes46>0<doubleQuotes46>"
"2457splitHere46","20151387splitHere46","<doubleQuotes46><doubleQuotes46>"
"2458splitHere46","20151387splitHere46","0"
"2459splitHere46","20151387splitHere46","<doubleQuotes46>0<doubleQuotes46>"
"2460splitHere46","20151467splitHere46","NetworkOnMainThreadException"
"2461splitHere46","20151467splitHere46","jParser.getJSONFromUrl(url);"
"2462splitHere46","20151467splitHere46","getJSONFromUrl()"
"2463splitHere46","20151467splitHere46","protected void onCreate(Bundle savedInstanceState) {<newline46mondego><newline46mondego>super.onCreate(savedInstanceState);<newline46mondego><newline46mondego>setContentView(R.layout.activity_main);<newline46mondego><newline46mondego>// Creating new JSON Parser<newline46mondego>JSONParser jParser = new JSONParser();<newline46mondego><newline46mondego>// Getting JSON from URL<newline46mondego>JSONObject json = jParser.getJSONFromUrl(url);<newline46mondego><newline46mondego>// get the data from your JSONObject<newline46mondego><newline46mondego>}<newline46mondego>"
"2464splitHere46","20151467splitHere46","protected void onCreate(Bundle savedInstanceState) {<newline46mondego><newline46mondego>super.onCreate(savedInstanceState);<newline46mondego><newline46mondego>setContentView(R.layout.activity_main);<newline46mondego><newline46mondego>// Getting JSON from URL<newline46mondego>new JsonRequest().execute(url);<newline46mondego><newline46mondego>}<newline46mondego><newline46mondego>private class JsonRequest extends AsyncTask<String, Void, JSONObject><newline46mondego>// I will talk about the parameters to AsyncTask below<newline46mondego>    @Override<newline46mondego>    protected JSONObject doInBackground(String... urls) {<newline46mondego>        // Creating new JSON Parser<newline46mondego>        JSONParser jParser = new JSONParser();<newline46mondego><newline46mondego>        // Getting JSON from URL<newline46mondego>        JSONObject json = jParser.getJSONFromUrl(url);<newline46mondego><newline46mondego>        return json;<newline46mondego>    }<newline46mondego><newline46mondego><newline46mondego>    @Override<newline46mondego>    protected void onPostExecute(JSONObject result) {<newline46mondego><newline46mondego>        // Get the array<newline46mondego>        JSONArray array = result.getJSONArray(<doubleQuotes46>data<doubleQuotes46>);<newline46mondego><newline46mondego>        // Display the data<newline46mondego>        // Import textviews<newline46mondego>        // and so on..<newline46mondego>    }<newline46mondego>"
"2465splitHere46","20151467splitHere46","AsyncTask"
"2466splitHere46","20151467splitHere46","doInBackground"
"2467splitHere46","20151467splitHere46","onProgressUpdate"
"2468splitHere46","20151467splitHere46","doInBackground"
"2469splitHere46","20151467splitHere46","onPostExecute"
"2470splitHere46","20151467splitHere46","JSONParser"
"2471splitHere46","20151467splitHere46","getJSONFromUrl()"
"2472splitHere46","20151467splitHere46","JSONObject"
"2473splitHere46","20151467splitHere46","String"
"2474splitHere46","20151467splitHere46","getJSONFromUrl()"
"2475splitHere46","20151467splitHere46","if (json.startsWith(<doubleQuotes46>[<doubleQuotes46>)) {<newline46mondego>    // We have a JSONArray<newline46mondego>    try {<newline46mondego>        jObj = new JSONObject();<newline46mondego>        jObj.put(<doubleQuotes46>data<doubleQuotes46>, new JSONArray(json));<newline46mondego>    } catch (JSONException e) {<newline46mondego>        Log.d(<doubleQuotes46>JSON Parser<doubleQuotes46>, <doubleQuotes46>Error parsing JSONArray <doubleQuotes46> + e.toString());<newline46mondego>    }<newline46mondego>    return jObj;<newline46mondego>}<newline46mondego>"
"2476splitHere46","20151467splitHere46","// try parse the string to a JSON object<newline46mondego>try {<newline46mondego>    jObj = new JSONObject(json);<newline46mondego>} catch (JSONException e) {<newline46mondego>    Log.e(<doubleQuotes46>JSON Parser<doubleQuotes46>, <doubleQuotes46>Error parsing data <doubleQuotes46> + e.toString());<newline46mondego>}<newline46mondego>"
"2477splitHere46","20151467splitHere46","getJSONFromUrl()"
"2478splitHere46","20151467splitHere46","JSONObject"
"2479splitHere46","20151467splitHere46","JSONArray"
"2480splitHere46","20151467splitHere46","JSONObject"
"2481splitHere46","20151467splitHere46","data"
"2482splitHere46","20151467splitHere46","JSONArray"
"2483splitHere46","20151467splitHere46","JSONObject json = jParser.getJSONFromUrl(url);<newline46mondego><newline46mondego>JSONArray array = json.getJSONArray(<doubleQuotes46>data<doubleQuotes46>);<newline46mondego>"
"2484splitHere46","20151467splitHere46","JSONException"
"2485splitHere46","20151521splitHere46","StringBuilder sql = new StringBuilder(<doubleQuotes46>INSERT INTO <doubleQuotes46>).append(tableName).append(<doubleQuotes46> (<doubleQuotes46>);<newline46mondego>StringBuilder placeholders = new StringBuilder();<newline46mondego><newline46mondego>for (Iterator<String> iter = dataMap.keySet().iterator(); iter.hasNext();) {<newline46mondego>    sql.append(iter.next());<newline46mondego>    placeholders.append(<doubleQuotes46>?<doubleQuotes46>);<newline46mondego><newline46mondego>    if (iter.hasNext()) {<newline46mondego>        sql.append(<doubleQuotes46>,<doubleQuotes46>);<newline46mondego>        placeholders.append(<doubleQuotes46>,<doubleQuotes46>);<newline46mondego>    }<newline46mondego>}<newline46mondego><newline46mondego>sql.append(<doubleQuotes46>) VALUES (<doubleQuotes46>).append(placeholders).append(<doubleQuotes46>)<doubleQuotes46>);<newline46mondego>preparedStatement = connection.prepareStatement(sql.toString());<newline46mondego>int i = 0;<newline46mondego><newline46mondego>for (String value : dataMap.values()) {<newline46mondego>    preparedStatement.setObject(i++, value);<newline46mondego>}<newline46mondego><newline46mondego>int affectedRows = prepatedStatement.executeUpdate();<newline46mondego>// ...<newline46mondego>"
"2486splitHere46","20151521splitHere46","Map<String, Object>"
"2487splitHere46","20151521splitHere46","Object"
"2488splitHere46","20151521splitHere46","Number"
"2489splitHere46","20151521splitHere46","Integer"
"2490splitHere46","20151521splitHere46","Long"
"2491splitHere46","20151521splitHere46","Date"
"2492splitHere46","20151521splitHere46","byte[]"
"2493splitHere46","20151521splitHere46","PreparedStatement"
"2494splitHere46","20151521splitHere46","tableName"
"2495splitHere46","20151613splitHere46","TextView"
"2496splitHere46","20151613splitHere46","RadioGroup"
"2497splitHere46","20151613splitHere46","RadioGroup rg = new RadioGroup(getContext());<newline46mondego><newline46mondego>RadioButton rb1 = new RadioButton(getContext());<newline46mondego>RadioButton rb2 = new RadioButton(getContext());<newline46mondego>TextView tv = new TextView(getContext());<newline46mondego><newline46mondego>rg.addView(rb1);<newline46mondego>rg.addView(rb2);<newline46mondego>rg.addView(tv);<newline46mondego>"
"2498splitHere46","20151679splitHere46","1234"
"2499splitHere46","20151679splitHere46","5"
"2500splitHere46","20151679splitHere46","1234 + 5 * 10000<newline46mondego>"
"2501splitHere46","20151679splitHere46","5"
"2502splitHere46","20151679splitHere46","1234 * 10 + 5 <newline46mondego>"
"2503splitHere46","20151679splitHere46","10000"
"2504splitHere46","20151769splitHere46","onCreate"
"2505splitHere46","20151769splitHere46","lista = new String[10][10];<newline46mondego>lista[0][0] = <doubleQuotes46>55<doubleQuotes46>;<newline46mondego>lista[0][1] = <doubleQuotes46>jacek<doubleQuotes46>;<newline46mondego>lista[0][2] = <doubleQuotes46>miecz<doubleQuotes46>;<newline46mondego>lista[0][3] = <doubleQuotes46>12<doubleQuotes46>;<newline46mondego>"
"2506splitHere46","20151769splitHere46","ArrayList<String[]>"
"2507splitHere46","20151769splitHere46","public String[][] lista;"
"2508splitHere46","20151769splitHere46","ArrayList<String[]> lista"
"2509splitHere46","20151769splitHere46","onCreate"
"2510splitHere46","20151769splitHere46","lista = new ArrayList<String[]>();<newline46mondego>lista.add(new String[]{<doubleQuotes46>55<doubleQuotes46>,<doubleQuotes46>jacek<doubleQuotes46>,<doubleQuotes46>miez<doubleQuotes46>,<doubleQuotes46>12<doubleQuotes46>});//your example array of 4 elements<newline46mondego>lista.add(new String[4]);//empty array for 4 elements<newline46mondego>"
"2511splitHere46","20151769splitHere46","lista.get(row)[column]"
"2512splitHere46","20151967splitHere46","public class Test<newline46mondego>    {<newline46mondego><newline46mondego>        private void replaceIndividuals(int individualsTurnover) {<newline46mondego>            //individualTurnover = number of individuals I need to re-generate<newline46mondego>           while(individualsTurnover > 1)<newline46mondego>           {<newline46mondego>               individualsTurnover = individualsTurnover - replaceIndividuals();<newline46mondego>               //I am deducting this count because those many individuals are already created<newline46mondego>           }<newline46mondego>           //This is the only possible count > 0<newline46mondego>           if(individualsTurnover == 1)<newline46mondego>           {<newline46mondego>               mutate();<newline46mondego>           }<newline46mondego>        }<newline46mondego>        /**<newline46mondego>         * <newline46mondego>         * @return No of individulas created<newline46mondego>         */<newline46mondego>        private int  replaceIndividuals() {<newline46mondego>            int random = generator.nextInt(10);<newline46mondego><newline46mondego>            if (random < 1) {<newline46mondego>                // generates one individual via mutation<newline46mondego>                mutate();<newline46mondego>                retrun 1;<newline46mondego>            }<newline46mondego>            else if (random < 2) {<newline46mondego>                // generates one individual randomly<newline46mondego>                createRandomIndividual();<newline46mondego>                return 1;<newline46mondego>            }<newline46mondego>            else  {<newline46mondego>                //generates two individuals by crossing-over individuals from a pool of parents<newline46mondego>                crossover();<newline46mondego><newline46mondego>                return 2;<newline46mondego>            }<newline46mondego>        }<newline46mondego>    }<newline46mondego>"
"2513splitHere46","20152075splitHere46","ForwardingSet"
"2514splitHere46","20152133splitHere46","action"
"2515splitHere46","20152133splitHere46","intent"
"2516splitHere46","20152133splitHere46","onReceieve"
"2517splitHere46","20152134splitHere46","adb shell uiautomator runtest <NAME_OF_JAR>.jar -c <YOUR_CLASS>#<YOUR_FIRST_METHOD>, -c <YOUR_CLASS>#<YOUR_SECOND_METHOD><newline46mondego>"
"2518splitHere46","20152138splitHere46","M2_REPO\org\jmock\jmock-parent\2.6.0\jmock-parent-2.6.0.pom"
"2519splitHere46","20152138splitHere46","<packaging>pom</packaging>"
"2520splitHere46","20152138splitHere46","mvn deploy:deploy-file"
"2521splitHere46","20152138splitHere46","mvn deploy"
"2522splitHere46","20152151splitHere46","System.out.print(x)"
"2523splitHere46","20152151splitHere46","randomInt"
"2524splitHere46","20152152splitHere46","// board<newline46mondego>static boolean[][] board = new boolean[SQUARES][SQUARES];<newline46mondego><newline46mondego>// represents values for number of squares eliminated if queen is placed in square<newline46mondego>static int[][] elimination = new int[SQUARES][SQUARES];<newline46mondego><newline46mondego>// store position of queens<newline46mondego>static boolean[][] position = new boolean[SQUARES][SQUARES];<newline46mondego><newline46mondego>// store row<newline46mondego>static int[] row = new int[8];<newline46mondego><newline46mondego>// store column<newline46mondego>static int[] column = new int[8];<newline46mondego><newline46mondego>// Write a program to solve the Eight Queens problem<newline46mondego>public static void main(String[] args)<newline46mondego>{<newline46mondego>    Arrays.fill(row, -1);<newline46mondego>    Arrays.fill(column, -1);<newline46mondego><newline46mondego>    // required if a loop is used to loop through all squares<newline46mondego>    //resetPositions();<newline46mondego><newline46mondego>    // set custom starting point, not required<newline46mondego>    //row[0] = 5;<newline46mondego>    //column[0] = 6;<newline46mondego><newline46mondego>    // enter first point on board, use if set custom starting point<newline46mondego>    //position[row[0]][column[0]] = true;<newline46mondego><newline46mondego>    // eliminate squares if a custom starting point is set<newline46mondego>    elimSquares();<newline46mondego><newline46mondego>    // set elimination table<newline46mondego>    fillElim();<newline46mondego><newline46mondego>    // count queens on board<newline46mondego>    // if first quuen is entered, counter must be 1<newline46mondego>    short counter = 0;<newline46mondego><newline46mondego>    // while board is not full<newline46mondego>    while(counter < 8) {<newline46mondego>        // place next queen on board<newline46mondego>        placeQueen(-1, -1);<newline46mondego><newline46mondego>        // reset elimination table<newline46mondego>        fillElim();<newline46mondego><newline46mondego>        // backtrack and fill board back to this point<newline46mondego>        while(isFull() && counter < 7)<newline46mondego>            backtrack(counter);<newline46mondego><newline46mondego>        counter++;<newline46mondego><newline46mondego>    }   // end while<newline46mondego><newline46mondego>    // print starting square and board<newline46mondego>    System.out.println(row[0] + <doubleQuotes46>/<doubleQuotes46> + column[0]);<newline46mondego>    printBoard();<newline46mondego><newline46mondego>}   // end method main<newline46mondego><newline46mondego>// Print board<newline46mondego>public static void printBoard()<newline46mondego>{<newline46mondego>    for(int i = 0; i < board.length; i++) {<newline46mondego>        for(int j = 0; j < board.length; j++) {<newline46mondego><newline46mondego>            if(board[i][j] && position[i][j])<newline46mondego>                System.out.print(<doubleQuotes46>o <doubleQuotes46>);<newline46mondego>            else if(board[i][j])<newline46mondego>                System.out.print(<doubleQuotes46>x <doubleQuotes46>);<newline46mondego>            else<newline46mondego>                System.out.print(<doubleQuotes46>% <doubleQuotes46>);<newline46mondego><newline46mondego>        }   // end inner for<newline46mondego><newline46mondego>        System.out.println();<newline46mondego><newline46mondego>    }   // end outer for<newline46mondego>}   // end method printBoard<newline46mondego><newline46mondego>// Write method to calculate how many squares are eliminated if queen is placed in that square<newline46mondego>public static void fillElim()<newline46mondego>{<newline46mondego>    // if any squares that could be eliminated already are eliminated, subtract 1<newline46mondego>    for(int i = 0; i < elimination.length; i++) {<newline46mondego>        for(int j = 0; j < elimination[i].length; j++) {<newline46mondego><newline46mondego>            elimination[i][j] = openSquares(i, j);<newline46mondego><newline46mondego>        }   // end inner for<newline46mondego>    }   // end outer for<newline46mondego>}   // end method fillElimination<newline46mondego><newline46mondego>// Number of squares eliminatable by placing queen in any given square<newline46mondego>public static int openSquares(int row, int column)<newline46mondego>{<newline46mondego>    // if square is already eliminated, it cannot be used<newline46mondego>    if(board[row][column])<newline46mondego>        return 0;<newline46mondego><newline46mondego>    // total number of squares elimintable from any given square, count square itself<newline46mondego>    int total = 1 + openHorizontal(row) + openVertical(column) + openUpSlope(row, column) + openDownSlope(row, column);<newline46mondego><newline46mondego>    return total;<newline46mondego><newline46mondego>}   // end method openSquares<newline46mondego><newline46mondego>// Return number of open squares in a row<newline46mondego>public static int openHorizontal(int row)<newline46mondego>{<newline46mondego>    // total of row<newline46mondego>    int total = 0;<newline46mondego><newline46mondego>    for(boolean b : board[row]) {<newline46mondego><newline46mondego>        // if square is <doubleQuotes46>true<doubleQuotes46> (open), increment total open squares<newline46mondego>        if(!b)<newline46mondego>            total++;<newline46mondego><newline46mondego>    }   // end for<newline46mondego><newline46mondego>    // return total not counting current square<newline46mondego>    return total - 1;<newline46mondego><newline46mondego>}   // end method openHorizontal<newline46mondego><newline46mondego>// Return number of open squares in a column<newline46mondego>public static int openVertical(int column)<newline46mondego>{<newline46mondego>    // total of column<newline46mondego>    int total = 0;<newline46mondego><newline46mondego>    // if square is <doubleQuotes46>true<doubleQuotes46> (open), increment total open squares<newline46mondego>    for(boolean[] b : board) {<newline46mondego><newline46mondego>        // if square is <doubleQuotes46>true<doubleQuotes46> (open), increment total open square<newline46mondego>        if(!b[column])<newline46mondego>            total++;<newline46mondego><newline46mondego>    }   // end for<newline46mondego><newline46mondego>    // return total not counting current square<newline46mondego>    return total - 1;<newline46mondego><newline46mondego>}   // end method openVertical<newline46mondego><newline46mondego>// Return number of open squares in a column<newline46mondego>public static int openDownSlope(int x, int y)<newline46mondego>{<newline46mondego>    // total of downward-sloping diagonal<newline46mondego>    int total = 0;<newline46mondego><newline46mondego>    // if square is <doubleQuotes46>true<doubleQuotes46> (open), increment total open squares<newline46mondego>    for(int i = 0; i < board.length; i++) {<newline46mondego><newline46mondego>        // test all values before use to prevent array index errors<newline46mondego>        // all squares to the top right of the checking square<newline46mondego>        if(x+i >= 0 && x+i < board.length && y+i >= 0 && y+i < board.length) {<newline46mondego><newline46mondego>            // else increment total<newline46mondego>            if(!board[x+i][y+i])<newline46mondego>                total++;<newline46mondego><newline46mondego>        }   // end if<newline46mondego><newline46mondego>        // all squares to the bottom left of the checking square<newline46mondego>        if(x-i >= 0 && x-i < board.length && y-i >= 0 && y-i < board.length) {<newline46mondego><newline46mondego>            // else increment total<newline46mondego>            if(!board[x-i][y-i])<newline46mondego>                total++;<newline46mondego><newline46mondego>        }   // end if<newline46mondego>    }   // end for<newline46mondego><newline46mondego>    // return total not counting current square<newline46mondego>    return total - 2;<newline46mondego><newline46mondego>}   // end method openDownSlope<newline46mondego><newline46mondego>// Return number of open squares in a column<newline46mondego>public static int openUpSlope(int x, int y)<newline46mondego>{<newline46mondego>    // total of upward-sloping diagonal<newline46mondego>    int total = 0;<newline46mondego><newline46mondego>    // if square is <doubleQuotes46>true<doubleQuotes46> (open), increment total open squares<newline46mondego>    for(int i = 0; i < board.length; i++) {<newline46mondego><newline46mondego>        // test all values before use to prevent array index errors<newline46mondego>        // all squares to the top right of the checking square<newline46mondego>        if(x+i >= 0 && x+i < board.length && y-i >= 0 && y-i < board.length) {<newline46mondego><newline46mondego>            // else increment total<newline46mondego>            if(!board[x+i][y-i])<newline46mondego>                total++;<newline46mondego><newline46mondego>        }   // end if<newline46mondego><newline46mondego>        // all squares to the bottom left of the checking square<newline46mondego>        if(x-i >= 0 && x-i < board.length && y+i >= 0 && y+i < board.length) {<newline46mondego><newline46mondego>            // else increment total<newline46mondego>            if(!board[x-i][y+i])<newline46mondego>                total++;<newline46mondego><newline46mondego>        }   // end if<newline46mondego>    }   // end for<newline46mondego><newline46mondego>    // return total not counting current square<newline46mondego>    return total - 2;<newline46mondego><newline46mondego>}   // end method openUpSlope<newline46mondego><newline46mondego>// Are all squares on the board filled?<newline46mondego>public static boolean isFull()<newline46mondego>{<newline46mondego>    // check all squares<newline46mondego>    for(boolean b[] : board) {<newline46mondego>        for(boolean bb : b) {<newline46mondego><newline46mondego>            // if encounter open square<newline46mondego>            if(!bb)<newline46mondego>                return false;<newline46mondego><newline46mondego>        }   // end inner for<newline46mondego>    }   // end outer for<newline46mondego><newline46mondego>    // if this point is reached, board is full<newline46mondego>    return true;<newline46mondego><newline46mondego>}   // end method isFull<newline46mondego><newline46mondego>// Place a queen on the board<newline46mondego>public static void placeQueen(int lastRow, int lastCol)<newline46mondego>{<newline46mondego>    // get next move<newline46mondego>    int[] bestSquare = bestMove(lastRow, lastCol);<newline46mondego><newline46mondego>    // mark queen's position<newline46mondego>    position[bestSquare[0]][bestSquare[1]] = true;<newline46mondego><newline46mondego>    // mark blocked squares as dead<newline46mondego>    elimSquares();<newline46mondego><newline46mondego>    // store squares<newline46mondego>    for(int i = 0; i < row.length; i++) {<newline46mondego><newline46mondego>        if(row[i] == -1) {<newline46mondego>            row[i] = bestSquare[0];<newline46mondego>            column[i] = bestSquare[1];<newline46mondego>            break;<newline46mondego><newline46mondego>        }   // end if<newline46mondego>    }   // end for<newline46mondego>}   // end method placeQueen<newline46mondego><newline46mondego>// Return lowest number in elimination table<newline46mondego>public static int[] bestMove(int lastRow, int lastCol)<newline46mondego>{<newline46mondego>    // store coordinates<newline46mondego>    int[] move = {-1, -1};<newline46mondego><newline46mondego>    // if lastRow is not -1, search for duplicate numbers after current square<newline46mondego>    if(lastRow != -1)<newline46mondego>        move = dupElimNums(lastRow, lastCol);<newline46mondego><newline46mondego>    // if not received a value from dupElimNums, return value<newline46mondego>    if(move[0] == -1)<newline46mondego>        move = checkBoard(lastRow, lastCol);<newline46mondego><newline46mondego>    return move;<newline46mondego><newline46mondego>}   // end method bestMove<newline46mondego><newline46mondego>// Check for ties for elimination numbers, return first found after current position<newline46mondego>public static int[] dupElimNums(int lastRow, int lastCol)<newline46mondego>{<newline46mondego>    // store limit of use<newline46mondego>    int limit;<newline46mondego><newline46mondego>    // set limit<newline46mondego>    if(lastRow == -1)<newline46mondego>        limit = -1;<newline46mondego>    else<newline46mondego>        limit = elimination[lastRow][lastCol];<newline46mondego><newline46mondego>    // store move coordinates<newline46mondego>    int[] move = {-1, -1};<newline46mondego><newline46mondego>    // get next square, accounting for end-of-row situations<newline46mondego>    int[] nextSquare = nextSquare(lastRow, lastCol);<newline46mondego><newline46mondego>    // test for equal elimination numbers farther down on board<newline46mondego>    for(int i = nextSquare[0]; i < board.length; i++) {<newline46mondego>        for(int j = 0; j < board[i].length; j++) {<newline46mondego><newline46mondego>            // start at 1 square after first position, then loop through rest of squares<newline46mondego>            if(i >= lastRow && j == 0)<newline46mondego>                j = nextSquare[1];<newline46mondego><newline46mondego>             if(!board[i][j] && elimination[i][j] == limit) {<newline46mondego>                move[0] = i;<newline46mondego>                move[1] = j;<newline46mondego>                return move;<newline46mondego><newline46mondego>            }   // end if<newline46mondego>        }   // end inner for<newline46mondego>    }   // end outer for<newline46mondego><newline46mondego>    return move;<newline46mondego><newline46mondego>}   // end method dupElimNums<newline46mondego><newline46mondego>// Return next column, accounting for end-of-column/next-row situations<newline46mondego>public static int[] nextSquare(int row, int column)<newline46mondego>{<newline46mondego>    // num is not end of row<newline46mondego>    if(column < 7)<newline46mondego>        column++;<newline46mondego><newline46mondego>    // num is end of row - go to next row<newline46mondego>    else {<newline46mondego>        column = 0;<newline46mondego>        row++;<newline46mondego>    }<newline46mondego><newline46mondego>    // create array with coordinates<newline46mondego>    int[] square = {row, column};<newline46mondego><newline46mondego>    // return array<newline46mondego>    return square;<newline46mondego><newline46mondego>}   // end method nextSquare<newline46mondego><newline46mondego>// Check entire board for usable numbers<newline46mondego>public static int[] checkBoard(int lastRow, int lastCol)<newline46mondego>{<newline46mondego>    // store lowest number - set to impossibly low<newline46mondego>    int low = 100;<newline46mondego><newline46mondego>    // store move coordinates<newline46mondego>    int[] move = {-1, -1};<newline46mondego><newline46mondego>    // store limit of use<newline46mondego>    int limit;<newline46mondego><newline46mondego>    // set limit<newline46mondego>    if(lastRow == -1)<newline46mondego>        limit = -1;<newline46mondego>    else<newline46mondego>        limit = elimination[lastRow][lastCol];<newline46mondego><newline46mondego>    // test for any available squares left on board<newline46mondego>    for(int i = 0; i < board.length; i++) {<newline46mondego>        for(int j = 0; j < board[i].length; j++) {<newline46mondego><newline46mondego>            if(!board[i][j] && elimination[i][j] > limit && elimination[i][j] < low)<newline46mondego>                low = elimination[i][j];<newline46mondego><newline46mondego>        }   // end inner for<newline46mondego>    }   // end outer for<newline46mondego><newline46mondego>    // get move coordinates for square, if needed to get best square after two backtracks<newline46mondego>    for(int i = 0; i < board.length; i++) {<newline46mondego>        for(int j = 0; j < board[i].length; j++) {<newline46mondego><newline46mondego>            // return after executing so we return the first square available<newline46mondego>            if(!board[i][j] && elimination[i][j] == low) {<newline46mondego><newline46mondego>                move[0] = i;<newline46mondego>                move[1] = j;<newline46mondego><newline46mondego>                return move;<newline46mondego><newline46mondego>            }   // end if<newline46mondego>        }   // end inner for<newline46mondego>    }   // end outer for<newline46mondego><newline46mondego>    return move;<newline46mondego><newline46mondego>}   // end method checkBoard<newline46mondego><newline46mondego>// Eliminate dead squares<newline46mondego>public static void elimSquares()<newline46mondego>{<newline46mondego>    // reset board<newline46mondego>    resetBoard();<newline46mondego><newline46mondego>    // eliminate dead squares<newline46mondego>    for(int r = 0; r < position.length; r++) {<newline46mondego>        for(int c = 0; c < position[r].length; c++) {<newline46mondego><newline46mondego>            // if square is used, eliminate all squares vertically, horizontally, and diagonally<newline46mondego>            if(position[r][c]) {<newline46mondego><newline46mondego>                elimHorizontal(r);<newline46mondego>                elimVertical(c);<newline46mondego>                elimUpSlope(r, c);<newline46mondego>                elimDownSlope(r, c);<newline46mondego><newline46mondego>            }   // end if<newline46mondego>        }   // end inner for<newline46mondego>    }   // end outer for<newline46mondego><newline46mondego>    // reset elimination table<newline46mondego>    fillElim();<newline46mondego><newline46mondego>}   // end method elimSquares<newline46mondego><newline46mondego>// Eliminate row<newline46mondego>public static void elimHorizontal(int row)<newline46mondego>{<newline46mondego>    // eliminate row<newline46mondego>    for (int i = 0; i < board[row].length; i++)<newline46mondego>        board[row][i] = true;<newline46mondego><newline46mondego>}   // end method elimHorizontal<newline46mondego><newline46mondego>// Eliminate column<newline46mondego>public static void elimVertical(int column)<newline46mondego>{<newline46mondego>    // eliminate column<newline46mondego>    for(boolean[] b : board)<newline46mondego>        b[column] = true;<newline46mondego><newline46mondego>}   // end method elimVertical<newline46mondego><newline46mondego>// Eliminate downward slope<newline46mondego>public static void elimDownSlope(int x, int y)<newline46mondego>{<newline46mondego>    // loop through downward slope<newline46mondego>    for(int i = 0; i < board.length; i++) {<newline46mondego><newline46mondego>        // test all values before use to prevent array index errors<newline46mondego><newline46mondego>        // eliminate all squares to the bottom right of the checking square<newline46mondego>        if(x+i >= 0 && x+i < board.length && y+i >= 0 && y+i < board.length)<newline46mondego>            board[x+i][y+i] = true;<newline46mondego><newline46mondego>        // eliminate all squares to the top left of the checking square<newline46mondego>        if(x-i >= 0 && x-i < board.length && y-i >= 0 && y-i < board.length)<newline46mondego>            board[x-i][y-i] = true;<newline46mondego><newline46mondego>    }   // end for<newline46mondego>}   // end method elimDownSlope<newline46mondego><newline46mondego>// Eliminate upward slope<newline46mondego>public static void elimUpSlope(int x, int y)<newline46mondego>{<newline46mondego>    // loop through upward slope<newline46mondego>    for(int i = 0; i < board.length; i++) {<newline46mondego><newline46mondego>        // test all values before use to prevent array index errors<newline46mondego><newline46mondego>        // eliminate all squares to the bottom right of the checking square<newline46mondego>        if(x+i >= 0 && x+i < board.length && y-i >= 0 && y-i < board.length)<newline46mondego>            board[x+i][y-i] = true;<newline46mondego><newline46mondego>        // eliminate all squares to the top left of the checking square<newline46mondego>        if(x-i >= 0 && x-i < board.length && y+i >= 0 && y+i < board.length)<newline46mondego>            board[x-i][y+i] = true;<newline46mondego><newline46mondego>    }   // end for<newline46mondego>}   // end method elimUpSlope<newline46mondego><newline46mondego>// If not found solution and board is full<newline46mondego>public static void backtrack(int lastMove)<newline46mondego>{<newline46mondego>    // store last move<newline46mondego>    int lastRow = row[lastMove];<newline46mondego>    int lastCol = column[lastMove];<newline46mondego><newline46mondego>    // clear positions<newline46mondego>    resetPositions();<newline46mondego><newline46mondego>    // go back 1 move<newline46mondego>    goBack(lastMove);<newline46mondego><newline46mondego>    // refill board up to, not including, last point<newline46mondego>    for(int i = 0; i < row.length; i++) {<newline46mondego><newline46mondego>        // escape if out of bounds<newline46mondego>        if(row[i] == -1)<newline46mondego>            break;<newline46mondego><newline46mondego>        // enter position<newline46mondego>        position[row[i]][column[i]] = true;<newline46mondego><newline46mondego>        // fill elimination table<newline46mondego>        elimSquares();<newline46mondego><newline46mondego>    }   // end for<newline46mondego><newline46mondego>    // while no open squares, go back one more row<newline46mondego>    while(!openSpaces(lastRow, lastCol)) {<newline46mondego>        backtrack(lastMove-1);<newline46mondego><newline46mondego>        // reset numbers if go back a move so we come down without useless restrictions<newline46mondego>        if(openSpaces(lastRow, lastCol)) {<newline46mondego>            lastRow = -1;<newline46mondego>            lastCol = -1;<newline46mondego><newline46mondego>            // exit loop so we do not check for open spaces with -1 and -1<newline46mondego>            break;<newline46mondego><newline46mondego>        }   // end if<newline46mondego>    }   // end while<newline46mondego><newline46mondego>    // set queen in square<newline46mondego>    placeQueen(lastRow, lastCol);<newline46mondego><newline46mondego>}   // end method backtrack<newline46mondego><newline46mondego>// Clear board<newline46mondego>public static void resetBoard()<newline46mondego>{<newline46mondego>    // clear board<newline46mondego>    for(boolean[] b : board)<newline46mondego>        for(int i = 0; i < b.length; i++)<newline46mondego>            b[i] = false;<newline46mondego><newline46mondego>}   // end method resetBoard<newline46mondego><newline46mondego>// Clear positions<newline46mondego>public static void resetPositions()<newline46mondego>{<newline46mondego>    // clear positions<newline46mondego>    for(boolean[] b : position)<newline46mondego>        for(int i = 0; i < b.length; i++)<newline46mondego>            b[i] = false;<newline46mondego><newline46mondego>}   // end method resetPositions<newline46mondego><newline46mondego>// Go back 1 move<newline46mondego>public static void goBack(int lastMove)<newline46mondego>{<newline46mondego>    // remove last move from table<newline46mondego>    row[lastMove] = -1;<newline46mondego>    column[lastMove] = -1;<newline46mondego><newline46mondego>}   // end method goBack<newline46mondego><newline46mondego>// Return number of open, untested spaces on board<newline46mondego>public static boolean openSpaces(int lastRow, int lastCol)<newline46mondego>{<newline46mondego>    // store limit of use<newline46mondego>    int limit = elimination[lastRow][lastCol];<newline46mondego><newline46mondego>    // test for any available squares left on board<newline46mondego>    for(int i = 0; i < board.length; i++) {<newline46mondego>        for(int j = 0; j < board[i].length; j++) {<newline46mondego><newline46mondego>            if(!board[i][j] && elimination[i][j] > limit)<newline46mondego>                return true;<newline46mondego><newline46mondego>        }   // end inner for<newline46mondego>    }   // end outer for<newline46mondego><newline46mondego>    return false;<newline46mondego><newline46mondego>}   // end method openSpaces<newline46mondego>"
"2525splitHere46","20152265splitHere46","_"
"2526splitHere46","20152265splitHere46","<jaxb:bindings <newline46mondego>    xmlns:jaxb=<doubleQuotes46>http://java.sun.com/xml/ns/jaxb<doubleQuotes46><newline46mondego>    version=<doubleQuotes46>2.1<doubleQuotes46>><newline46mondego>    <jaxb:globalBindings underscoreBinding=<doubleQuotes46>asCharInWord<doubleQuotes46>/><newline46mondego></jaxb:bindings><newline46mondego>"
"2527splitHere46","20152265splitHere46","import java.io.File;<newline46mondego>import java.util.*;<newline46mondego>import javax.xml.bind.*;<newline46mondego>import javax.xml.transform.stream.StreamSource;<newline46mondego>import org.eclipse.persistence.dynamic.DynamicEntity;<newline46mondego>import org.eclipse.persistence.jaxb.dynamic.DynamicJAXBContextFactory;<newline46mondego><newline46mondego>public class Demo {<newline46mondego><newline46mondego>    public static void main(String[] args) throws Exception {<newline46mondego>        StreamSource schemaSource = new StreamSource(<doubleQuotes46>src/forum20146935/schema.xsd<doubleQuotes46>);<newline46mondego>        Map<String, Object> properties = new HashMap<String, Object>(1);<newline46mondego>        properties.put(DynamicJAXBContextFactory.EXTERNAL_BINDINGS_KEY, new StreamSource(<doubleQuotes46>src/forum20146935/binding.xml<doubleQuotes46>));<newline46mondego>        JAXBContext jc = DynamicJAXBContextFactory.createContextFromXSD(schemaSource, null, Demo.class.getClassLoader(), properties);<newline46mondego><newline46mondego>        Unmarshaller unmarshaller = jc.createUnmarshaller();<newline46mondego>        File xml = new File(<doubleQuotes46>src/forum20146935/input.xml<doubleQuotes46>);<newline46mondego>        DynamicEntity root = (DynamicEntity) unmarshaller.unmarshal(xml);<newline46mondego>        System.out.println(root.get(<doubleQuotes46>foo_bar<doubleQuotes46>));<newline46mondego>    }<newline46mondego><newline46mondego>}<newline46mondego>"
"2528splitHere46","20152265splitHere46","_"
"2529splitHere46","20152265splitHere46","@XmlElement(name = <doubleQuotes46>foo_bar<doubleQuotes46>, required = true)<newline46mondego>protected String fooBar;<newline46mondego><newline46mondego>public String getFoo_Bar() {<newline46mondego>    return fooBar;<newline46mondego>}<newline46mondego><newline46mondego>public void setFoo_Bar(String value) {<newline46mondego>    this.fooBar = value;<newline46mondego>}<newline46mondego>"
"2530splitHere46","20152265splitHere46","getValueByXPath"
"2531splitHere46","20152265splitHere46","JAXBContext"
"2532splitHere46","20152265splitHere46","import java.io.File;<newline46mondego>import java.util.*;<newline46mondego><newline46mondego>import javax.xml.bind.*;<newline46mondego>import javax.xml.transform.stream.StreamSource;<newline46mondego><newline46mondego>import org.eclipse.persistence.dynamic.DynamicEntity;<newline46mondego>import org.eclipse.persistence.jaxb.JAXBHelper;<newline46mondego>import org.eclipse.persistence.jaxb.dynamic.DynamicJAXBContextFactory;<newline46mondego><newline46mondego>public class Demo {<newline46mondego><newline46mondego>    public static void main(String[] args) throws Exception {<newline46mondego>        StreamSource schemaSource = new StreamSource(<doubleQuotes46>src/forum20146935/schema.xsd<doubleQuotes46>);<newline46mondego>        Map<String, Object> properties = new HashMap<String, Object>(1);<newline46mondego>        properties.put(DynamicJAXBContextFactory.EXTERNAL_BINDINGS_KEY, new StreamSource(<doubleQuotes46>src/forum20146935/binding.xml<doubleQuotes46>));<newline46mondego>        JAXBContext jc = DynamicJAXBContextFactory.createContextFromXSD(schemaSource, null, Demo.class.getClassLoader(), properties);<newline46mondego><newline46mondego>        Unmarshaller unmarshaller = jc.createUnmarshaller();<newline46mondego>        File xml = new File(<doubleQuotes46>src/forum20146935/input.xml<doubleQuotes46>);<newline46mondego>        DynamicEntity root = (DynamicEntity) unmarshaller.unmarshal(xml);<newline46mondego><newline46mondego>        String fooBar = JAXBHelper.getJAXBContext(jc).getValueByXPath(root, <doubleQuotes46>foo_bar/text()<doubleQuotes46>, null, String.class);<newline46mondego>        System.out.println(fooBar);<newline46mondego>    }<newline46mondego><newline46mondego>}<newline46mondego>"
"2533splitHere46","20152426splitHere46","back"
"2534splitHere46","20152426splitHere46","enqueue()"
"2535splitHere46","20152426splitHere46","back"
"2536splitHere46","20152426splitHere46","dequeu()"
"2537splitHere46","20152426splitHere46","back"
"2538splitHere46","20152426splitHere46","count"
"2539splitHere46","20152426splitHere46","back = (back + 1) % capacity;<newline46mondego>"
"2540splitHere46","20152426splitHere46","back = count % capacity;<newline46mondego>"
"2541splitHere46","20152518splitHere46","newWord[i] = (this.stripPunctuation(linewords[i])).toLowerCase();<newline46mondego>"
"2542splitHere46","20152587splitHere46","fav_up_btn.setOnClickListener(new View.OnClickListener() {<newline46mondego>    public void onClick(View v) {<newline46mondego>        if (v == fav_up_btn) {<newline46mondego>            fav_up_btn.setBackgroundResource(R.drawable.fav_dwn_btn);<newline46mondego>        }<newline46mondego>    }<newline46mondego>});<newline46mondego>"
"2543splitHere46","20152587splitHere46","fav_up_btn = (Button)findViewById(R.id.fav_up_btn);<newline46mondego>fav_up_btn.setOnClickListener(new View.OnClickListener() {<newline46mondego>    @Override<newline46mondego>    public void onClick(View v) {       <newline46mondego>        fav_up_btn.setBackgroundResource(R.drawable.fav_dwn_btn);<newline46mondego>        Log.d(<doubleQuotes46>mylog<doubleQuotes46>,<doubleQuotes46>fav_up_btn is clicked<doubleQuotes46>);<newline46mondego>    }<newline46mondego>});<newline46mondego>"
"2544splitHere46","20152587splitHere46","fav_up_btn.setOnClickListener(new View.OnClickListener() {<newline46mondego>    @Override<newline46mondego>    public void onClick(View v) {<newline46mondego>        boolean favIsUp = fav_up_btn.getBackground().getConstantState()<newline46mondego>                                    .equals(getResources().getDrawable(R.drawable.fav_up_btn).getConstantState());  <newline46mondego>        //set the background                            <newline46mondego>        fav_up_btn.setBackgroundResource(favIsUp ? R.drawable.fav_dwn_btn : R.drawable.fav_up_btn);<newline46mondego>    }<newline46mondego>});<newline46mondego>"
"2545splitHere46","20152866splitHere46","double result = jobj.get(<doubleQuotes46>test<doubleQuotes46>).getAsDouble();<newline46mondego>"
"2546splitHere46","20153101splitHere46","for (int i = 0; i < 5; i++) {<newline46mondego>        Button button = new Button(getApplicationContext());<newline46mondego>        button = new Button(getApplicationContext());<newline46mondego>        button.setId(i+1);<newline46mondego>        button.setText(<doubleQuotes46><doubleQuotes46> + i);<newline46mondego>        relativelayout.addView(button);<newline46mondego>        bList[i] = button;<newline46mondego>    }<newline46mondego>"
"2547splitHere46","20153101splitHere46","button.setId(i+1);"
"2548splitHere46","20153101splitHere46","0"
"2549splitHere46","20153170splitHere46","Date startDate = new Date(request.getStartTime().getYear(), request.getStartTime().getMonth(), request.getStartTime().getDay(), 0, 0, 0);<newline46mondego>"
"2550splitHere46","20153355splitHere46","playerx"
"2551splitHere46","20153355splitHere46","playery"
"2552splitHere46","20153355splitHere46","left"
"2553splitHere46","20153355splitHere46","right"
"2554splitHere46","20153355splitHere46","up"
"2555splitHere46","20153355splitHere46","down"
"2556splitHere46","20153355splitHere46","final"
"2557splitHere46","20153355splitHere46","volatile"
"2558splitHere46","20153355splitHere46","synchronized"
"2559splitHere46","20153371splitHere46","// solution for API < 11<newline46mondego>if (Build.VERSION.SDK_INT < Build.VERSION_CODES.HONEYCOMB) {<newline46mondego>   for (Entry<String, Object> item : cv.valueSet()) {<newline46mondego>      String key = item.getKey(); // getting key<newline46mondego>      Object value = item.getValue(); // getting value<newline46mondego>      ...<newline46mondego>      // do your stuff<newline46mondego>   }<newline46mondego>}<newline46mondego><newline46mondego>// solution for API >= 11<newline46mondego>if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.HONEYCOMB) {<newline46mondego>   // your current solution<newline46mondego>}<newline46mondego>"
"2560splitHere46","20153456splitHere46","true"
"2561splitHere46","20153767splitHere46","ir"
"2562splitHere46","20153767splitHere46","intersect()"
"2563splitHere46","20153767splitHere46","result = new IntersectResult(i);<newline46mondego>"
"2564splitHere46","20153767splitHere46","material"
"2565splitHere46","20153767splitHere46","material"
"2566splitHere46","20153767splitHere46","intersect"
"2567splitHere46","20153767splitHere46","intersect()"
"2568splitHere46","20153767splitHere46","result"
"2569splitHere46","20153767splitHere46","ir = root.intersect(ray, ir);<newline46mondego>"
"2570splitHere46","20153767splitHere46","if"
"2571splitHere46","20153767splitHere46","ir.material"
"2572splitHere46","20153767splitHere46","r.material"
"2573splitHere46","20153775splitHere46","public class MultiDemPoint{<newline46mondego>    public MultiDemPoint(double[] coords){<newline46mondego><newline46mondego>    }<newline46mondego>}<newline46mondego>"
"2574splitHere46","20153775splitHere46","new MultiDemPoint(new double[]{4, 5.0, 3, 2, 6, 4.6});"
"2575splitHere46","20153775splitHere46","public class MultiDemPoint{<newline46mondego>    public MultiDemPoint(double... coords){<newline46mondego><newline46mondego>    }<newline46mondego>}<newline46mondego>"
"2576splitHere46","20153775splitHere46","new MultiDemPoint(4, 5.0, 3, 2, 6, 4.6);"
"2577splitHere46","20153775splitHere46","MultDemPoint.java"
"2578splitHere46","20153775splitHere46","public class MultiDemPoint{<newline46mondego>    private double[] coords;<newline46mondego>    //double... coords will automatically convert all supplied coordinates to the array,<newline46mondego>    // we can store it in double[] coords.<newline46mondego>    public MultiDemPoint(double... coords){<newline46mondego>        this.coords = coords;<newline46mondego>    }<newline46mondego><newline46mondego>    public void printCoords(){<newline46mondego>        for(int i=0; i<coords.length; i++){<newline46mondego>            System.out.println(<doubleQuotes46>Coordinate #<doubleQuotes46>+i+<doubleQuotes46>: <doubleQuotes46>+coords[i]);<newline46mondego>        }<newline46mondego>        System.out.println(<doubleQuotes46><doubleQuotes46>);<newline46mondego>    }<newline46mondego>}<newline46mondego>"
"2579splitHere46","20153775splitHere46","Main.java"
"2580splitHere46","20153775splitHere46","public class Main {<newline46mondego>        public static void main(String[] args){<newline46mondego>        MultiDemPoint point1 = new MultiDemPoint(1,2,3,4);<newline46mondego>        MultiDemPoint point2 = new MultiDemPoint(3);<newline46mondego>        MultiDemPoint point3 = new MultiDemPoint(5.44444444,232323.12323,321321);<newline46mondego>        System.out.println(<doubleQuotes46>Point1 coordinates:<doubleQuotes46>);<newline46mondego>        point1.printCoords();<newline46mondego><newline46mondego>        System.out.println(<doubleQuotes46>Point2 coordinates:<doubleQuotes46>);<newline46mondego>        point2.printCoords();<newline46mondego><newline46mondego>        System.out.println(<doubleQuotes46>Point3 coordinates:<doubleQuotes46>);<newline46mondego>        point3.printCoords();<newline46mondego><newline46mondego>    }<newline46mondego>}<newline46mondego>"
"2581splitHere46","20153792splitHere46","playMP3.stop()"
"2582splitHere46","20153792splitHere46","MediaPlayer"
"2583splitHere46","20153792splitHere46","playMP3.play();"
"2584splitHere46","20153792splitHere46","while(!musicThread.isInterrupted()){<newline46mondego>"
"2585splitHere46","20153792splitHere46","playMP3.play();<newline46mondego>"
"2586splitHere46","20153792splitHere46","Thread.interrupt()"
"2587splitHere46","20153792splitHere46","<strike>musicThread.interrupt()</strike>"
"2588splitHere46","20153792splitHere46","playMP3.close();<newline46mondego>"
"2589splitHere46","20153792splitHere46","public synchronized void close()"
"2590splitHere46","20153830splitHere46","long timeStamp = System.currentTimeMillis();<newline46mondego>"
"2591splitHere46","20153855splitHere46","stmt.executeQuery(queryAccount);<newline46mondego>"
"2592splitHere46","20153855splitHere46","stmt.executeUpdate(queryAccount);<newline46mondego>"
"2593splitHere46","20153983splitHere46","if (actionBarDrawerToggle.onOptionsItemSelected(item)) {<newline46mondego>                return true;<newline46mondego>            }<newline46mondego>            return super.onOptionsItemSelected(item);<newline46mondego>"
"2594splitHere46","20153983splitHere46","catch/finally"
"2595splitHere46","20154032splitHere46","System.nanoTime()"
"2596splitHere46","20154226splitHere46","file:"
"2597splitHere46","20154226splitHere46","file:"
"2598splitHere46","20154226splitHere46","jar:"
"2599splitHere46","20154226splitHere46","file:"
"2600splitHere46","20154226splitHere46","file:"
"2601splitHere46","20154226splitHere46","*.class"
"2602splitHere46","20154226splitHere46","classpath*:"
"2603splitHere46","20154273splitHere46","Object"
"2604splitHere46","20154273splitHere46","toString()"
"2605splitHere46","20154273splitHere46","Arrays.toString()"
"2606splitHere46","20154273splitHere46","System.out.print(Arrays.toString(remove(new int[] {1, 2, 3, 4})));<newline46mondego>"
"2607splitHere46","20154334splitHere46","FileReader"
"2608splitHere46","20154334splitHere46","try"
"2609splitHere46","20154424splitHere46","setLineWrap(boolean)"
"2610splitHere46","20154432splitHere46","PrintWriter"
"2611splitHere46","20154432splitHere46","new FileWriter(<doubleQuotes46>timeWorked.dat<doubleQuotes46>, true)"
"2612splitHere46","20154454splitHere46","Map"
"2613splitHere46","20154454splitHere46","List"
"2614splitHere46","20154454splitHere46","Map<MapKeyParent, Integer>"
"2615splitHere46","20154454splitHere46","List<Map<MapKeyParent, Integer>> mapList;<newline46mondego>"
"2616splitHere46","20154454splitHere46","class MapStorage{<newline46mondego>    List<Map<MapKeyParent, Integer>> mapList;<newline46mondego><newline46mondego>    public MapStorage() {<newline46mondego>       mapList.add(new HashMap<MapKeyParent, Integer>());<newline46mondego>       mapList.add(new HashMap<MapKeyParent, Integer>());<newline46mondego>    ....<newline46mondego>    }<newline46mondego><newline46mondego>    public void addToMap(int index, MapKeyParent key, Integer value )<newline46mondego>    {<newline46mondego>       mapList.get(index).put(key, value);<newline46mondego>    }<newline46mondego><newline46mondego>    public Integer getFromMap(int index, MapKeyParent key)<newline46mondego>    {<newline46mondego>       return mapList.get(index).get(key);<newline46mondego>    }<newline46mondego>}<newline46mondego>"
"2617splitHere46","20154608splitHere46","edgeLine = link.getNext();<newline46mondego>"
"2618splitHere46","20154608splitHere46","edgeLine"
"2619splitHere46","20154608splitHere46","edgeLine = edgeLine.getNext();<newline46mondego>"
"2620splitHere46","20154674splitHere46","import java.util.Random;<newline46mondego><newline46mondego>public class YourClass {<newline46mondego>    Random rnd = new Random();<newline46mondego>    // insert variable declarations here...<newline46mondego><newline46mondego>    public void yourMethod() {<newline46mondego>        if (centerX > width + 200) {<newline46mondego>            isTravelling = false;<newline46mondego>            centerX = -200;<newline46mondego>            centerY = rnd.nextInt(499) + 101;<newline46mondego>        }<newline46mondego>    }<newline46mondego>}<newline46mondego>"
"2621splitHere46","20154755splitHere46","public class ValidateUser{<newline46mondego>    private String user;<newline46mondego>    private String pass;<newline46mondego>    private double rating;<newline46mondego>    private String type;<newline46mondego>    public void setUser(String user) {<newline46mondego>        this.user = user;<newline46mondego>    }<newline46mondego>    public void setPass(String pass) {<newline46mondego>        this.pass = pass;<newline46mondego>    }<newline46mondego>    public void setRating(double rating) {<newline46mondego>        this.rating = rating;<newline46mondego>    }<newline46mondego>    public void setType(String type) {<newline46mondego>        this.type = type;<newline46mondego>    }<newline46mondego>}<newline46mondego>"
"2622splitHere46","20154755splitHere46","ValidateUser user = new ValidateUser();<newline46mondego>    user.setUser(<doubleQuotes46>admin<doubleQuotes46>);<newline46mondego>    user.setPass(<doubleQuotes46>*****<doubleQuotes46>);<newline46mondego>    user.setRating(5.4);<newline46mondego>    user.setType(<doubleQuotes46>admin<doubleQuotes46>);<newline46mondego>    personer.add(user);<newline46mondego>"
"2623splitHere46","20154769splitHere46","String"
"2624splitHere46","20154769splitHere46","msg"
"2625splitHere46","20154769splitHere46","TextView"
"2626splitHere46","20154769splitHere46","msg.setText(<doubleQuotes46>Please complete both fields<doubleQuotes46>)<newline46mondego>"
"2627splitHere46","20155237splitHere46","for(i = 0; i < rows; i++){ // iterate through row<newline46mondego>            for(j = 0; j < columns; j++){ // iterate through column<newline46mondego>                while((line = bufferedReader.readLine())!= null){ // while the next line is not null<newline46mondego>                    array[i][j] = line; // assign i-th j-th index as line (the input)<newline46mondego>                    // System.out.println(array[i][j]);<newline46mondego>                    count++;<newline46mondego>                }<newline46mondego>            }<newline46mondego>        }<newline46mondego>"
"2628splitHere46","20155248splitHere46","Scanner#next"
"2629splitHere46","20155248splitHere46","Scanner"
"2630splitHere46","20155248splitHere46","Scanner input = new Scanner(System.in);<newline46mondego>input.useDelimiter(<doubleQuotes46>\+|\-|\*|\\<doubleQuotes46>);<newline46mondego>"
"2631splitHere46","20155289splitHere46","Class"
"2632splitHere46","20155289splitHere46","hashcode"
"2633splitHere46","20155289splitHere46","equals"
"2634splitHere46","20155289splitHere46","Class"
"2635splitHere46","20155289splitHere46","destination"
"2636splitHere46","20155289splitHere46","date"
"2637splitHere46","20155289splitHere46","Set"
"2638splitHere46","20155493splitHere46","<dependency><newline46mondego>    <groupId>org.springframework.data</groupId><newline46mondego>    <artifactId>spring-data-commons</artifactId><newline46mondego>    <version>1.7.0.M1</version><newline46mondego></dependency>   <newline46mondego>"
"2639splitHere46","20155593splitHere46","public boolean[] isOdd(int[] nums)<newline46mondego>{<newline46mondego>    boolean[] results = new boolean[nums.length];<newline46mondego>    for(int i=0;i<nums.length;i++)<newline46mondego>        results[i]=(nums[i]%2==1);<newline46mondego>    return results;<newline46mondego>}<newline46mondego><newline46mondego>//int[] input = new int[]{1,2,3};<newline46mondego>//isOdd(input) will return {true,false,true}<newline46mondego>"
"2640splitHere46","20155612splitHere46","CREATE TABLE `IMAGES` ( <newline46mondego>`ID` INTEGER UNSIGNED NOT NULL AUTO_INCREMENT, <newline46mondego>`IMAGE` LONGBLOB NOT NULL, <newline46mondego>PRIMARY KEY(`ID`) <newline46mondego>)<newline46mondego>TYPE = InnoDB;<newline46mondego>"
"2641splitHere46","20155612splitHere46","PreparedStatement ps = null;<newline46mondego>InputStream is = null;<newline46mondego>try {<newline46mondego><newline46mondego>    con = // get your database connection<newline46mondego>    ps = con.prepareCall(<doubleQuotes46>insert into IMAGES values (?)<doubleQuotes46>);<newline46mondego>    is = new FileInputStream(new File(<doubleQuotes46>file path<doubleQuotes46>));<newline46mondego>    ps.setBinaryStream(1, is);<newline46mondego>    int count = ps.executeUpdate();<newline46mondego><newline46mondego>} catch (ClassNotFoundException e) {        <newline46mondego>    e.printStackTrace();<newline46mondego>} catch (SQLException e) {           <newline46mondego>    e.printStackTrace();<newline46mondego>} catch (FileNotFoundException e) {  <newline46mondego>    e.printStackTrace();<newline46mondego>} finally{<newline46mondego>    try{<newline46mondego>        if(is != null) is.close();<newline46mondego>        if(ps != null) ps.close();<newline46mondego>        if(con != null) con.close();<newline46mondego>    } catch(Exception ex){}<newline46mondego>}<newline46mondego>"
"2642splitHere46","20155628splitHere46","FileOutputStream saveFile = new FileOutputStream(<doubleQuotes46>F:\\Download\\<doubleQuotes46>+obj1.fileExtension);<newline46mondego>//ObjectOutputStream save = new ObjectOutputStream(saveFile);<newline46mondego>byte[] buf= convertToByteArray(obj1.file);<newline46mondego>saveFile.write(buf);<newline46mondego>saveFile.close();<newline46mondego>"
"2643splitHere46","20155633splitHere46","enterGradeNames()"
"2644splitHere46","20155633splitHere46","input.next()<newline46mondego>"
"2645splitHere46","20155633splitHere46","input.hasNext()"
"2646splitHere46","20155633splitHere46","public class Grades {<newline46mondego>private int len;<newline46mondego>private String [] gradeNames;<newline46mondego>private int [] gradeArray;<newline46mondego><newline46mondego>private int enterGradeNames(){<newline46mondego>    Scanner input = new Scanner(System.in);<newline46mondego>    for (int i = 0; i < len; i++){<newline46mondego>        System.out.println(<doubleQuotes46>Enter the type of grades you will be reporting: (<doubleQuotes46> + <newline46mondego>                (i + 1) + <doubleQuotes46> of <doubleQuotes46> + gradeArray.length + <doubleQuotes46>)<doubleQuotes46> );<newline46mondego>        gradeNames[i] = new String(input.next());<newline46mondego>    }<newline46mondego>    return 0;<newline46mondego>}<newline46mondego><newline46mondego>public Grades(int length){<newline46mondego>    this.len = length;<newline46mondego>    gradeArray = new int[len];<newline46mondego>    gradeNames = new String[len];<newline46mondego>}<newline46mondego>"
"2647splitHere46","20155633splitHere46","public static Grades buildGrades(){<newline46mondego>    Scanner s = new Scanner(System.in);<newline46mondego>    System.out.println(<doubleQuotes46>Enter size:<doubleQuotes46>);<newline46mondego>    int size = s.nextInt();<newline46mondego>    Grades grades = new Grades(size);<newline46mondego>    grades.enterGradeNames();<newline46mondego><newline46mondego>    return grades;<newline46mondego>}<newline46mondego>"
"2648splitHere46","20155633splitHere46","Scanner"
"2649splitHere46","20155633splitHere46","Scanner"
"2650splitHere46","20155633splitHere46","Closeable"
"2651splitHere46","20155633splitHere46","System.in"
"2652splitHere46","20155633splitHere46","Scanner"
"2653splitHere46","20155832splitHere46","index1"
"2654splitHere46","20155832splitHere46","index2"
"2655splitHere46","20155832splitHere46","int i, j;<newline46mondego>    int MDArray[][]=new int [13][13];<newline46mondego>    for(i=0; i<13; i++)<newline46mondego>        for(j=0; j<13; j++)<newline46mondego>            MDArray[i][j]=i*j;<newline46mondego>    int index1=(int)(Math.random()*13);<newline46mondego>    int index2=(int)(Math.random()*13);<newline46mondego><newline46mondego><newline46mondego><newline46mondego>    int answer;<newline46mondego>    answer = MDArray[index1][index2];<newline46mondego>    System.out.println(index1+<doubleQuotes46>x<doubleQuotes46>+index2+<doubleQuotes46> = <doubleQuotes46>+answer);<newline46mondego>"
"2656splitHere46","20155832splitHere46","System.out.println(index1);<newline46mondego>"
"2657splitHere46","20155972splitHere46","charArray"
"2658splitHere46","20155972splitHere46","getWord.substring()"
"2659splitHere46","20155972splitHere46","String[] charArray = currentItem.split(<doubleQuotes46>\\+<doubleQuotes46>);<newline46mondego>for(int i = 0; i < charArray[1].length(); i++){<newline46mondego>   String getWord = charArray[charArray.length - 1];<newline46mondego>   StringBuilder sb = new StringBuilder(getWord);<newline46mondego>   String addWord = (getWord.charAt(i) + charArray[0] + <doubleQuotes46>+<doubleQuotes46> + sb.deleteCharAt(i).toString());<newline46mondego>   System.out.println(addWord);<newline46mondego>   permStack.push(addWord);<newline46mondego><newline46mondego>}<newline46mondego>"
"2660splitHere46","20156107splitHere46","<build>     <newline46mondego>   <sourceDirectory>src/main/java</sourceDirectory><newline46mondego>   <testSourceDirectory>src/test/java</testSourceDirectory><newline46mondego>   <resources><newline46mondego>     <resource><newline46mondego>       <directory>src/main/resources</directory><newline46mondego>     </resource><newline46mondego>   </resources><newline46mondego>   <testResources><newline46mondego>     <testResource><newline46mondego>       <directory>src/test/resources</directory><newline46mondego>     </testResource><newline46mondego>   </testResources><newline46mondego></build><newline46mondego>"
"2661splitHere46","20156107splitHere46","src/main/java"
"2662splitHere46","20156107splitHere46","src"
"2663splitHere46","20156107splitHere46","build-helper-maven-plugin:add-source"
"2664splitHere46","20156107splitHere46","<plugin><newline46mondego>    <groupId>org.codehaus.mojo</groupId><newline46mondego>    <artifactId>build-helper-maven-plugin</artifactId><newline46mondego>    <version>1.8</version><newline46mondego>    <executions><newline46mondego>      <execution><newline46mondego>        <id>add-source</id><newline46mondego>        <phase>generate-sources</phase><newline46mondego>        <goals><newline46mondego>          <goal>add-source</goal><newline46mondego>        </goals><newline46mondego>        <configuration><newline46mondego>          <sources><newline46mondego>            <source>some directory</source><newline46mondego>          </sources><newline46mondego>        </configuration><newline46mondego>      </execution><newline46mondego>    </executions><newline46mondego>  </plugin><newline46mondego>"
"2665splitHere46","20156107splitHere46","mvn package<newline46mondego>"
"2666splitHere46","20156237splitHere46","public class Foo {<newline46mondego><newline46mondego>  private Bar bar = new Bar();  // this field is visible throughout the object<newline46mondego><newline46mondego>  public Foo() {<newline46mondego>    Baz baz = new Baz(); // this is only visible within this constructor<newline46mondego>  } <newline46mondego>"
"2667splitHere46","20156246splitHere46","public int calculateFloors(int current, Set<Integer> visited) {<newline46mondego>    int floors = 0;<newline46mondego><newline46mondego>    // get the values of the directions (add your code here to get them)<newline46mondego>    int north = Integer.parseInt(scanner.nextLine()); <newline46mondego>    int east = Integer.parseInt(scanner.nextLine()); <newline46mondego>    int west = Integer.parseInt(scanner.nextLine()); <newline46mondego>    int south = Integer.parseInt(scanner.nextLine()); <newline46mondego>    int down = Integer.parseInt(scanner.nextLine()); <newline46mondego>    int up = Integer.parseInt(scanner.nextLine()); <newline46mondego><newline46mondego><newline46mondego>    if (up > 0 && !visited.contains(up)) {<newline46mondego>        visited.add(up);<newline46mondego>        floors = calculateFloors(up, visited) + 1;<newline46mondego>    }<newline46mondego><newline46mondego>    if (down > 0 && !visited.contains(down)) {<newline46mondego>        visited.add(down);<newline46mondego>        int result = calculateFloors(down, visited) - 1;<newline46mondego>        floors = result > floors ? result : floors;<newline46mondego>    }<newline46mondego><newline46mondego>    if (north > 0 && !visited.contains(north)) {<newline46mondego>        visited.add(north);<newline46mondego>        int result = calculateFloors(norht, visited);<newline46mondego>        floors = result > floors ? result : floors;<newline46mondego>    }<newline46mondego><newline46mondego>    if (south > 0 && !visited.contains(south)) {<newline46mondego>        visited.add(south);<newline46mondego>        int result = calculateFloors(south, visited);<newline46mondego>        floors = result > floors ? result : floors;<newline46mondego>    }<newline46mondego>    if (west > 0 && !visited.contains(west)) {<newline46mondego>        visited.add(west);<newline46mondego>        int result = calculateFloors(west, visited);<newline46mondego>        floors = result > floors ? result : floors;<newline46mondego>    }<newline46mondego>    if (east > 0 && !visited.contains(east)) {<newline46mondego>        visited.add(east);<newline46mondego>        int result = calculateFloors(east, visited);<newline46mondego>        floors = result > floors ? result : floors;<newline46mondego>    }<newline46mondego><newline46mondego><newline46mondego>    return floors;<newline46mondego>}<newline46mondego>"
"2668splitHere46","20156281splitHere46","public static void main(String[] args) throws Exception {<newline46mondego>    OWLOntologyManager manager = OWLManager.createOWLOntologyManager();<newline46mondego>    // load the importing ontology<newline46mondego>    OWLOntology ontology = manager.loadOntologyFromOntologyDocument(new StringDocumentSource(test_owl));<newline46mondego>    OWLReasoner r = new FaCTPlusPlusReasonerFactory().createReasoner(ontology);<newline46mondego>    OWLClass person = ontology.getOWLOntologyManager().getOWLDataFactory().getOWLClass(IRI.create(<doubleQuotes46>http://localhost/CA/SmartHome/SmartHome_1113#Person<doubleQuotes46>));<newline46mondego>    Set<OWLClass> classes = r.getSubClasses(person, false).getFlattened();<newline46mondego>    System.out.println(classes);<newline46mondego>}<newline46mondego>"
"2669splitHere46","20156281splitHere46","[<http://localhost/CA/SmartHome/SmartHome_1113#Adult>, owl:Nothing]"
"2670splitHere46","20156281splitHere46","OWLEntity.getIRI().getFragment()"
"2671splitHere46","20156325splitHere46","BroadcastReceiver"
"2672splitHere46","20156325splitHere46","setExact()"
"2673splitHere46","20156325splitHere46","setExact()"
"2674splitHere46","20156325splitHere46","setExact()"
"2675splitHere46","20156326splitHere46","valCount"
"2676splitHere46","20156326splitHere46","cnt"
"2677splitHere46","20156326splitHere46","valCount"
"2678splitHere46","20156326splitHere46","cnt"
"2679splitHere46","20156326splitHere46","valCount"
"2680splitHere46","20156326splitHere46","valCount"
"2681splitHere46","20156326splitHere46","cnt"
"2682splitHere46","20156326splitHere46","cnt"
"2683splitHere46","20156326splitHere46","cnt"
"2684splitHere46","20156326splitHere46","valCount"
"2685splitHere46","20156326splitHere46","valCount"
"2686splitHere46","20156326splitHere46","valCount"
"2687splitHere46","20156326splitHere46","int leftCount = valCount(val, root.left);<newline46mondego>"
"2688splitHere46","20156326splitHere46","leftCount"
"2689splitHere46","20156326splitHere46","valCount"
"2690splitHere46","20156326splitHere46","root.data"
"2691splitHere46","20156326splitHere46","root.left.data"
"2692splitHere46","20156326splitHere46","root.right.data"
"2693splitHere46","20156400splitHere46","import java.awt.*;<newline46mondego><newline46mondego>import java.awt.event.*;<newline46mondego><newline46mondego>import javax.swing.*;<newline46mondego><newline46mondego><newline46mondego>public class ApplicationCentre extends JApplet implements ActionListener {<newline46mondego><newline46mondego><newline46mondego>JButton b1, b2, b3, b4, b5, b6;<newline46mondego>JRadioButton rb1 ;<newline46mondego>JLabel l1, l2, l3, l4, l5, l6, l7, l8, l9, l10, l11;<newline46mondego>JTextField t1,t2,t3,t4,t5,t6;<newline46mondego>JTextArea ta1, ta2;<newline46mondego>JList j1;<newline46mondego>JComboBox studentList;<newline46mondego>JRadioButton accept[], reject[];<newline46mondego>ButtonGroup radioGroup[];  <newline46mondego>JPanel deck;<newline46mondego>CardLayout cardManager = new CardLayout();<newline46mondego>Student s[];<newline46mondego>String uniList [] = {<doubleQuotes46>Toronto<doubleQuotes46>, <doubleQuotes46>York<doubleQuotes46>, <doubleQuotes46>Western<doubleQuotes46>, <doubleQuotes46>Brock<doubleQuotes46>, <doubleQuotes46>Guelph<doubleQuotes46>, <doubleQuotes46>Waterloo<doubleQuotes46>,       <doubleQuotes46>McGill<doubleQuotes46>, <doubleQuotes46>Concordia<doubleQuotes46>, <doubleQuotes46>Laval<doubleQuotes46>, <doubleQuotes46>Macmaster<doubleQuotes46>};<newline46mondego><newline46mondego>public void init(){<newline46mondego>s= new Student [100];<newline46mondego><newline46mondego>Container container = getContentPane();<newline46mondego><newline46mondego><newline46mondego>deck = new JPanel();<newline46mondego>cardManager = new CardLayout(); <newline46mondego>deck.setLayout( cardManager ); <newline46mondego><newline46mondego>//add panels to deck<newline46mondego><newline46mondego>deck.add( inputPanel(), <doubleQuotes46>input<doubleQuotes46> );<newline46mondego>deck.add( admitPanel(), <doubleQuotes46>admit<doubleQuotes46> );<newline46mondego>deck.add( allPanel(), <doubleQuotes46>displayAll<doubleQuotes46> );<newline46mondego>deck.add( onePanel(), <doubleQuotes46>displayOne<doubleQuotes46> );<newline46mondego><newline46mondego>//Left-side Buttons<newline46mondego><newline46mondego>JPanel P1 = new JPanel();<newline46mondego>P1.setLayout (new GridLayout(4, 1));<newline46mondego><newline46mondego>b1 = new JButton(<doubleQuotes46>INPUT<doubleQuotes46>);<newline46mondego>b1.addActionListener(this);<newline46mondego>P1.add(b1);<newline46mondego>b2 = new JButton(<doubleQuotes46>ADMIT<doubleQuotes46>);<newline46mondego>b2.addActionListener(this);<newline46mondego>P1.add(b2);<newline46mondego>b3 = new JButton(<doubleQuotes46>DISPLAY ALL<doubleQuotes46>);<newline46mondego>b3.addActionListener(this);<newline46mondego>P1.add(b3);<newline46mondego>b4 = new JButton(<doubleQuotes46>DISPLAY ONE<doubleQuotes46>);<newline46mondego>b4.addActionListener(this);    <newline46mondego>P1.add(b4);<newline46mondego><newline46mondego>container.add(P1, BorderLayout.WEST);<newline46mondego><newline46mondego>// add deck to container<newline46mondego><newline46mondego><newline46mondego>container.add(deck, BorderLayout.CENTER); <newline46mondego><newline46mondego><newline46mondego> }<newline46mondego><newline46mondego>// Input panel<newline46mondego><newline46mondego>public JPanel inputPanel (){<newline46mondego>JPanel P2 = new JPanel();<newline46mondego>P2.setLayout (new GridLayout(6,2));<newline46mondego><newline46mondego>l1 = new JLabel (<doubleQuotes46>Name<doubleQuotes46>);    <newline46mondego>P2.add(l1);    <newline46mondego>t1 = new JTextField (15);<newline46mondego><newline46mondego>P2.add(t1);    <newline46mondego>l2 = new JLabel (<doubleQuotes46>Name of Program<doubleQuotes46>);<newline46mondego>P2.add(l2);    <newline46mondego>t2 = new JTextField ();<newline46mondego>P2.add(t2);<newline46mondego>l3 = new JLabel (<doubleQuotes46>Average Mark<doubleQuotes46>);<newline46mondego>P2.add(l3);    <newline46mondego>t3 = new JTextField ();<newline46mondego>P2.add(t3);<newline46mondego>l4 = new JLabel (<doubleQuotes46>Type of postgrad degree<doubleQuotes46>);<newline46mondego>P2.add(l4);<newline46mondego>t4 = new JTextField ();<newline46mondego>P2.add(t4);    <newline46mondego>l5 = new JLabel (<doubleQuotes46>Universities (select 3)<doubleQuotes46>);<newline46mondego>P2.add(l5);<newline46mondego><newline46mondego>j1 = new JList (uniList);<newline46mondego>j1.setVisibleRowCount(3);<newline46mondego>j1.setSelectionMode(ListSelectionModel.MULTIPLE_INTERVAL_SELECTION);<newline46mondego>P2.add(j1);<newline46mondego><newline46mondego>b5 = new JButton (<doubleQuotes46>Submit<doubleQuotes46>);<newline46mondego>P2.add(b5);<newline46mondego>l7 = new JLabel ();<newline46mondego>P2.add(l7);<newline46mondego><newline46mondego>return P2;<newline46mondego>}<newline46mondego><newline46mondego>// Admit panel<newline46mondego><newline46mondego>public JPanel admitPanel(){<newline46mondego>JPanel P3 = new JPanel();<newline46mondego>P3.setLayout (new BorderLayout());<newline46mondego><newline46mondego><newline46mondego>studentList = new JComboBox(s);<newline46mondego>studentList.setMaximumRowCount(8);<newline46mondego><newline46mondego><newline46mondego>P3.add(studentList, BorderLayout.NORTH);<newline46mondego><newline46mondego><newline46mondego>JPanel P3a = new JPanel();<newline46mondego>P3a.setLayout (new GridLayout (3,3));<newline46mondego>radioGroup = new ButtonGroup[3];<newline46mondego>accept = new JRadioButton[3];<newline46mondego>reject = new JRadioButton[3];<newline46mondego>  for (int j=0; j<3; j++) {<newline46mondego>    radioGroup[j] = new ButtonGroup();<newline46mondego>    accept[j] = new JRadioButton(<doubleQuotes46>Accept<doubleQuotes46>, false);<newline46mondego>    reject[j] = new JRadioButton(<doubleQuotes46>Reject<doubleQuotes46>, true);<newline46mondego>    radioGroup[j].add(accept[j]);<newline46mondego>    radioGroup[j].add(reject[j]);<newline46mondego>  }<newline46mondego><newline46mondego> l8 = new JLabel ();<newline46mondego> P3a.add(l8);<newline46mondego> P3a.add(accept[0]);<newline46mondego> P3a.add(reject[0]);<newline46mondego><newline46mondego> l9 = new JLabel ();<newline46mondego> P3a.add(l9);     <newline46mondego> P3a.add(accept[1]);<newline46mondego> P3a.add(reject[1]);<newline46mondego><newline46mondego> l10 = new JLabel ();<newline46mondego> P3a.add(l10);     <newline46mondego> P3a.add(accept[2]);<newline46mondego> P3a.add(reject[2]);<newline46mondego><newline46mondego> P3.add(P3a, BorderLayout.CENTER);<newline46mondego><newline46mondego> b6 = new JButton (<doubleQuotes46>Submit<doubleQuotes46>);<newline46mondego> P3.add(b6, BorderLayout.SOUTH);<newline46mondego><newline46mondego> return P3;<newline46mondego>}<newline46mondego><newline46mondego>// DisplayAll panel<newline46mondego><newline46mondego>public JPanel allPanel(){<newline46mondego> JPanel P4 = new JPanel();<newline46mondego><newline46mondego> ta1 = new JTextArea ();<newline46mondego> ta1.setFont(new Font(<doubleQuotes46>Serif<doubleQuotes46>, Font.ITALIC, 12));<newline46mondego> ta1.setEditable(false);<newline46mondego><newline46mondego> P4.add(ta1);<newline46mondego><newline46mondego> return P4;<newline46mondego>}<newline46mondego><newline46mondego>//DisplayOne Panel<newline46mondego><newline46mondego>public JPanel onePanel(){<newline46mondego> JPanel P5 = new JPanel();<newline46mondego> P5.setLayout (new BorderLayout());<newline46mondego><newline46mondego> JPanel P5a = new JPanel();<newline46mondego> l11 = new JLabel (<doubleQuotes46>Enter Student's name<doubleQuotes46>);<newline46mondego> P5a.add(l11);<newline46mondego> t6 = new JTextField ();<newline46mondego> P5a.add(t6);<newline46mondego><newline46mondego> P5.add(P5a, BorderLayout.NORTH);<newline46mondego><newline46mondego> ta2 = new JTextArea();<newline46mondego> ta2.setFont(new Font(<doubleQuotes46>Arial<doubleQuotes46>, Font.PLAIN, 14));<newline46mondego> ta2.setEditable(false);<newline46mondego><newline46mondego> P5.add(ta2, BorderLayout.CENTER);<newline46mondego><newline46mondego><newline46mondego> return P5;<newline46mondego>}<newline46mondego><newline46mondego><newline46mondego><newline46mondego><newline46mondego><newline46mondego><newline46mondego><newline46mondego>public void actionPerformed(ActionEvent e) {<newline46mondego><newline46mondego> if ( e.getSource() == b1 )    <newline46mondego>     cardManager.show( deck,<doubleQuotes46>input<doubleQuotes46> );<newline46mondego> else if ( e.getSource() == b2 )    <newline46mondego>     cardManager.show( deck,<doubleQuotes46>admit<doubleQuotes46> );<newline46mondego> else if ( e.getSource() == b3 )    <newline46mondego>     cardManager.show( deck,<doubleQuotes46>displayAll<doubleQuotes46> ); <newline46mondego> else if ( e.getSource() == b4 )    <newline46mondego>     cardManager.show( deck,<doubleQuotes46>displayOne<doubleQuotes46> ); <newline46mondego><newline46mondego>}<newline46mondego>}<newline46mondego><newline46mondego>// student class and extensions<newline46mondego><newline46mondego>abstract class Student {<newline46mondego>  private String name, programName, uni1, uni2, uni3;<newline46mondego>  public boolean u1a=false;<newline46mondego>  public boolean u2a=false;<newline46mondego>  public boolean u3a=false;<newline46mondego><newline46mondego>  public Student (String n, String p, String u1, String u2, String u3){<newline46mondego>    setName(n);<newline46mondego>    setProgramName(p);<newline46mondego>    setUni1(u1);<newline46mondego>    setUni2(u2);<newline46mondego>    setUni3(u3);<newline46mondego>  }<newline46mondego><newline46mondego>public String getProgramName() {<newline46mondego>    return programName;<newline46mondego>}<newline46mondego><newline46mondego>public void setProgramName(String programName) {<newline46mondego>    this.programName = programName;<newline46mondego>}<newline46mondego><newline46mondego>public String getUni3() {<newline46mondego>    return uni3;<newline46mondego>}<newline46mondego><newline46mondego>public void setUni3(String uni3) {<newline46mondego>    this.uni3 = uni3;<newline46mondego>}<newline46mondego><newline46mondego>public String getUni2() {<newline46mondego>    return uni2;<newline46mondego>}<newline46mondego><newline46mondego>public void setUni2(String uni2) {<newline46mondego>    this.uni2 = uni2;<newline46mondego>}<newline46mondego><newline46mondego>public String getUni1() {<newline46mondego>    return uni1;<newline46mondego>}<newline46mondego><newline46mondego>public void setUni1(String uni1) {<newline46mondego>    this.uni1 = uni1;<newline46mondego>}<newline46mondego><newline46mondego>public String getName() {<newline46mondego>    return name;<newline46mondego>}<newline46mondego><newline46mondego>public void setName(String name) {<newline46mondego>    this.name = name;<newline46mondego>}<newline46mondego>}<newline46mondego><newline46mondego><newline46mondego>class Postgrad extends Student{<newline46mondego><newline46mondego>  private double avgMark;<newline46mondego>  private String degree;<newline46mondego><newline46mondego>  public Postgrad (String n, String p, String u1, String u2, String u3, double avg,    String d){<newline46mondego>    super(n, p, u1, u2, u3);<newline46mondego>    setAvgMark(avg);<newline46mondego>    setDegree(d);<newline46mondego>  }<newline46mondego><newline46mondego>public double getAvgMark() {<newline46mondego>    return avgMark;<newline46mondego>}<newline46mondego><newline46mondego>public void setAvgMark(double avgMark) {<newline46mondego>    this.avgMark = avgMark;<newline46mondego>}<newline46mondego><newline46mondego>public String getDegree() {<newline46mondego>    return degree;<newline46mondego>}<newline46mondego><newline46mondego>public void setDegree(String degree) {<newline46mondego>    this.degree = degree;<newline46mondego>}<newline46mondego><newline46mondego>}<newline46mondego><newline46mondego><newline46mondego>class Undergrad extends Student {<newline46mondego><newline46mondego>  private double avgMark;<newline46mondego><newline46mondego>  public Undergrad (String n, String p, String u1, String u2, String u3, double   avg){<newline46mondego>    super( n, p, u1, u2, u3);<newline46mondego>    setAvgMark(avg);<newline46mondego>  }<newline46mondego><newline46mondego>public double getAvgMark() {<newline46mondego>    return avgMark;<newline46mondego>}<newline46mondego><newline46mondego>public void setAvgMark(double avgMark) {<newline46mondego>    this.avgMark = avgMark;<newline46mondego>}<newline46mondego>}<newline46mondego>"
"2694splitHere46","20156447splitHere46","public class MainActivity extends Activity {<newline46mondego>    //declared as class field, will be accessible in every method of the class<newline46mondego>    private WebView myWebView;<newline46mondego><newline46mondego>    @Override<newline46mondego>    protected void onCreate(Bundle savedInstanceState) {<newline46mondego>        super.onCreate(savedInstanceState);<newline46mondego>        setContentView(R.layout.activity_main);<newline46mondego><newline46mondego>        //initialise it here<newline46mondego>        myWebView= (WebView) findViewById(R.id.webview);<newline46mondego><newline46mondego>        //rest of your code<newline46mondego>}<newline46mondego>"
"2695splitHere46","20156489splitHere46",".DS_Store"
"2696splitHere46","20156538splitHere46","setPrototypeCellValue(...)"
"2697splitHere46","20156577splitHere46","null"
"2698splitHere46","20156577splitHere46","putForNullKey"
"2699splitHere46","20156577splitHere46","put"
"2700splitHere46","20156577splitHere46","putForNullKey"
"2701splitHere46","20156577splitHere46","public V put(K key, V value) {<newline46mondego>    if (key == null)<newline46mondego>        return putForNullKey(value);<newline46mondego><newline46mondego>    // ... here comes the put code for non-null-keys<newline46mondego>}<newline46mondego>"
"2702splitHere46","20156682splitHere46","'0'"
"2703splitHere46","20156682splitHere46","if (find2 == array[i] || find3 == array[i]) {<newline46mondego>    array[i] = (char)(i + '0');<newline46mondego><newline46mondego>} // omit your else self-assignment, it is redundant<newline46mondego>"
"2704splitHere46","20156682splitHere46","String[] out = new String[array.length];<newline46mondego>for (int i = 0; i < array.length; i++) {<newline46mondego>    if (array[i] == findUp || array[i] == findLo) {<newline46mondego>        out[i] = String.valueOf(i);<newline46mondego>    } else {<newline46mondego>        out[i] = String.valueOf(array[i]);<newline46mondego>    }<newline46mondego>}<newline46mondego>"
"2705splitHere46","20156682splitHere46","Character.forDigit(i, 10)"
"2706splitHere46","20156682splitHere46","'0' + digit"
"2707splitHere46","20156682splitHere46","('a' + digit - 10)"
"2708splitHere46","20156682splitHere46","Character.forDigit(10, 10)"
"2709splitHere46","20156682splitHere46","Character.forDigit(10, 16)"
"2710splitHere46","20156682splitHere46","'a'"
"2711splitHere46","20156682splitHere46","(char)9"
"2712splitHere46","20156682splitHere46","'0'"
"2713splitHere46","20156682splitHere46","48 + 2 = 50"
"2714splitHere46","20156682splitHere46","'0' + 2 = '2'"
"2715splitHere46","20156682splitHere46","'2' - '0' = 2"
"2716splitHere46","20156695splitHere46","ana.lesUlovligeOrd(<doubleQuotes46>sensurord.txt<doubleQuotes46>);"
"2717splitHere46","20156695splitHere46","void lesUloveligeOrd(String s)"
"2718splitHere46","20156695splitHere46","ana.lesUloveligeOrd(<doubleQuotes46>sensurord.txt<doubleQuotes46>);"
"2719splitHere46","20156713splitHere46","Comparator<Fruit>"
"2720splitHere46","20156757splitHere46","public class Main extends ActionBarActivity implements View.OnClickListener {<newline46mondego>   // do your stuff<newline46mondego>}<newline46mondego>"
"2721splitHere46","20156757splitHere46","buttonname.setOnClickListener(this);<newline46mondego>"
"2722splitHere46","20156757splitHere46","->"
"2723splitHere46","20156757splitHere46","buttonname.setOnClickListener(new View.OnClickListener() {<newline46mondego><newline46mondego>   @Override<newline46mondego>   public void onClick(View view) {<newline46mondego><newline46mondego>   }<newline46mondego>});<newline46mondego>"
"2724splitHere46","20156767splitHere46","package stackoverflow.questions;<newline46mondego><newline46mondego>import java.lang.reflect.Type;<newline46mondego>import java.util.List;<newline46mondego><newline46mondego>import stackoverflow.questions.Test.Wrapper;<newline46mondego><newline46mondego>import com.google.gson.*;<newline46mondego>import com.google.gson.reflect.TypeToken;<newline46mondego><newline46mondego>public class Q20118749 {<newline46mondego><newline46mondego>   /**<newline46mondego>    * @param args<newline46mondego>    */<newline46mondego>   public static void main(String[] args) {<newline46mondego>      String json = <doubleQuotes46>{\<doubleQuotes46>values\<doubleQuotes46>:[[1,1,0,0,0,0,11,0.09090909090909091],[[0,0,0,0,0,1,0],[0,0,0,0,0,1,0],[0,0,0,0,0,0,0],[0,0,0,0,0,0,0],[0,0,0,0,0,0,0],[0,0,0,0,0,0,0],[0,0,0,0,0,11,0],[0,0,0,0,0,0.09090909090909091,0]]]}<doubleQuotes46>;<newline46mondego><newline46mondego>      JsonElement je = new JsonParser().parse(json);<newline46mondego>      JsonArray list = je.getAsJsonObject().get(<doubleQuotes46>values<doubleQuotes46>).getAsJsonArray(); // to get rid of the value part<newline46mondego><newline46mondego>      Type listType1 = new TypeToken<List<Double>>() {}.getType();<newline46mondego>      Type listType2 = new TypeToken<List<List<Double>>>() {}.getType();<newline46mondego><newline46mondego>      Gson g = new Gson();<newline46mondego><newline46mondego>      List<Double> listOfDouble = g.fromJson(list.get(0), listType1);<newline46mondego>      List<List<Double>> listOfListOfDouble = g.fromJson(list.get(1), listType2);<newline46mondego><newline46mondego>      System.out.println(listOfDouble);<newline46mondego>      System.out.println(listOfListOfDouble);<newline46mondego>   }<newline46mondego><newline46mondego>}<newline46mondego>"
"2725splitHere46","20156767splitHere46","[1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 11.0, 0.09090909090909091]<newline46mondego>[[0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0], [0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0], [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [0.0, 0.0, 0.0, 0.0, 0.0, 11.0, 0.0], [0.0, 0.0, 0.0, 0.0, 0.0, 0.09090909090909091, 0.0]]<newline46mondego>"
"2726splitHere46","20156914splitHere46","System.out.println(new java.util.Date(Long.MAX_VALUE).toGMTString());<newline46mondego>// output:  17 Aug 292278994 07:12:55 GMT<newline46mondego>"
"2727splitHere46","20156999splitHere46","ArithmeticException"
"2728splitHere46","20156999splitHere46","RuntimeException"
"2729splitHere46","20156999splitHere46","throws"
"2730splitHere46","20156999splitHere46","catch"
"2731splitHere46","20156999splitHere46","Exception"
"2732splitHere46","20156999splitHere46","RuntimeException"
"2733splitHere46","20156999splitHere46","Error"
"2734splitHere46","20156999splitHere46","RuntimeException"
"2735splitHere46","20156999splitHere46","y"
"2736splitHere46","20156999splitHere46","0"
"2737splitHere46","20156999splitHere46","x / y"
"2738splitHere46","20156999splitHere46","0"
"2739splitHere46","20157075splitHere46","id"
"2740splitHere46","20157075splitHere46","public Integer getId() { return id; }<newline46mondego><newline46mondego>public void setId(Integer i){ id= i; }<newline46mondego>"
"2741splitHere46","20157178splitHere46","BayeuxServer"
"2742splitHere46","20157178splitHere46","MyService"
"2743splitHere46","20157178splitHere46","OrderService"
"2744splitHere46","20157178splitHere46","initChannel()"
"2745splitHere46","20157178splitHere46","BayeuxServer"
"2746splitHere46","20157178splitHere46","@PostConstruct"
"2747splitHere46","20157178splitHere46","public class MyService<newline46mondego>{<newline46mondego>    @Inject<newline46mondego>    private BayeuxServer bayeuxServer;<newline46mondego>    @Session<newline46mondego>    private LocalSession sender;<newline46mondego>    private final String _channelName;<newline46mondego>    private ServerChannel _channel;<newline46mondego><newline46mondego>    public MyService() <newline46mondego>    {<newline46mondego>        _channelName = <doubleQuotes46>/cometd/<doubleQuotes46>;<newline46mondego>    }<newline46mondego><newline46mondego>    @PostConstruct<newline46mondego>    private void initChannel() <newline46mondego>    {<newline46mondego>        _channel = bayeuxServer.createChannelIfAbsent(_channelName).getReference();<newline46mondego>    }<newline46mondego>}<newline46mondego>"
"2748splitHere46","20157179splitHere46","public static String translateToEnglish(String phrase) {<newline46mondego><newline46mondego>    if (phrase == null)<newline46mondego>        return null;<newline46mondego><newline46mondego>    boolean threeAtBeginning = false, threeAtEnd = fal;<newline46mondego><newline46mondego>    if (phrase.charAt(0) == '3' && phrase.charAt(1) == ' ')<newline46mondego>        threeAtBeginning = true;      <newline46mondego><newline46mondego>    int length = phrase.length();<newline46mondego><newline46mondego>    if (phrase.charAt(length - 1) == '3' && phrase.charAt(length - 2) == ' ')<newline46mondego>        threeAtEnd = true;<newline46mondego><newline46mondego>    String finished = phrase.replace('4', 'a') .replace('1', 'l') .replace('2', 'z') .replace('5', 's') .replace('8', 'b') .replace('0', 'o') .replace('7', 't') .replace(<doubleQuotes46>|_|<doubleQuotes46>, <doubleQuotes46>u<doubleQuotes46>)  .replace(<doubleQuotes46>3<doubleQuotes46>, <doubleQuotes46>e<doubleQuotes46>);<newline46mondego>    finished = finished.replace(<doubleQuotes46> e <doubleQuotes46>, <doubleQuotes46> 3 <doubleQuotes46>);<newline46mondego><newline46mondego>    if (threeAtBeginning)<newline46mondego>        finished = '3' + finished.substring(1);   <newline46mondego>    if (threeAtEnd)<newline46mondego>        finished = finished.substring(0, length - 1) + '3'; <newline46mondego><newline46mondego>    return finished;<newline46mondego>}<newline46mondego>"
"2749splitHere46","20157189splitHere46","return"
"2750splitHere46","20157189splitHere46","break"
"2751splitHere46","20157189splitHere46","break"
"2752splitHere46","20157189splitHere46","break"
"2753splitHere46","20157243splitHere46","-Djava.rmi.server.hostname=192.168.0.x"
"2754splitHere46","20157253splitHere46","ResultSet"
"2755splitHere46","20157253splitHere46","Statement"
"2756splitHere46","20157253splitHere46","PreparedStatement"
"2757splitHere46","20157305splitHere46","public static final String KEY_COLOR = <doubleQuotes46>color<doubleQuotes46>;<newline46mondego>public static final String KEY_SIZE = <doubleQuotes46>size<doubleQuotes46>;<newline46mondego>"
"2758splitHere46","20157305splitHere46","enum"
"2759splitHere46","20157305splitHere46","package com.me.whatever;<newline46mondego>public class Something {<newline46mondego>    static final String KEY_COLOR = <doubleQuotes46>com.me.whatever.Something.color<doubleQuotes46>;<newline46mondego>    static final String KEY_SIZE = <doubleQuotes46>com.me.whatever.Something.size<doubleQuotes46>;<newline46mondego>}<newline46mondego><newline46mondego>package com.me.util;<newline46mondego>public class Other {<newline46mondego>    static final String KEY_SIZE = <doubleQuotes46>com.me.util.Other.size<doubleQuotes46>;<newline46mondego>    static final String KEY_GROUP = <doubleQuotes46>com.me.util.Other.group<doubleQuotes46>;<newline46mondego>}<newline46mondego>"
"2760splitHere46","20157305splitHere46","Preferences"
"2761splitHere46","20157305splitHere46","systemNodeForPackage()"
"2762splitHere46","20157305splitHere46","enum"
"2763splitHere46","20157305splitHere46","enum"
"2764splitHere46","20157305splitHere46","enum"
"2765splitHere46","20157305splitHere46","enum"
"2766splitHere46","20157305splitHere46","public class Conf {<newline46mondego><newline46mondego>    public static class Key {<newline46mondego><newline46mondego>        final String key; <newline46mondego>        final Class<?> type;<newline46mondego><newline46mondego>        public Key (String key, Class<?> type) {<newline46mondego>            this.key = key;<newline46mondego>            this.type = type;<newline46mondego>        }<newline46mondego><newline46mondego>    }<newline46mondego><newline46mondego>    public Object getValue (Key key) {<newline46mondego>        ...<newline46mondego>    }<newline46mondego><newline46mondego>}<newline46mondego>"
"2767splitHere46","20157305splitHere46","package com.me.whatever;<newline46mondego>public class Something {<newline46mondego>    static final Conf.Key KEY_COLOR = new Conf.Key(<doubleQuotes46>com.me.whatever.Something.color<doubleQuotes46>, Color.class);<newline46mondego>    static final Conf.Key KEY_SIZE = new Conf.Key(<doubleQuotes46>com.me.whatever.Something.size<doubleQuotes46>, Integer.class);<newline46mondego>}<newline46mondego>"
"2768splitHere46","20157305splitHere46","Conf.Key"
"2769splitHere46","20157305splitHere46","Preferences.systemNodeForPackage()"
"2770splitHere46","20157305splitHere46","static final Conf.Key KEY_COLOR = new Conf.Key(Something.class, <doubleQuotes46>color<doubleQuotes46>, Color.class);<newline46mondego>"
"2771splitHere46","20157501splitHere46","Edge[] myNewEdge = new Edge[7];<newline46mondego>for(i=0; i<7;i++) {<newline46mondego>    myNewEdge[i] = new Edge(...);<newline46mondego>}<newline46mondego>"
"2772splitHere46","20157501splitHere46","vertexList.get(b).adjacencies = myNewEdge;<newline46mondego>"
"2773splitHere46","20157537splitHere46","public static <Item> void main(String[] args) {<newline46mondego>"
"2774splitHere46","20157537splitHere46","public static void main(String[] args) {<newline46mondego>"
"2775splitHere46","20157537splitHere46","System.out.println(<doubleQuotes46>Name\tPrice\tQuantity\tSeller\tTotal<doubleQuotes46>)<newline46mondego>for (Product p : item){<newline46mondego>    double total = p.price * p.quantity;<newline46mondego>    System.out.println(p.name + <doubleQuotes46>\t<doubleQuotes46> + p.price + <doubleQuotes46>\t<doubleQuotes46> p.quantity + <doubleQuotes46>\t<doubleQuotes46> + p.seller + <doubleQuotes46>\t<doubleQuotes46> + total);<newline46mondego>}<newline46mondego>"
"2776splitHere46","20157537splitHere46","Product item2 = new Product(Name, Price, Quantity, Seller);<newline46mondego>item.add(item2);<newline46mondego>"
"2777splitHere46","20157537splitHere46","the toString"
"2778splitHere46","20157537splitHere46","Product"
"2779splitHere46","20157537splitHere46","public class Product {<newline46mondego>    String name;<newline46mondego>    String Seller;<newline46mondego>    double price;<newline46mondego>    int quantity;<newline46mondego><newline46mondego>    public Product(String name, double price, int quantity, String seller){<newline46mondego>        this.name = name;<newline46mondego>        this.seller = seller;<newline46mondego>        this.price = price;<newline46mondego>        this.seller = seller;<newline46mondego>    }<newline46mondego><newline46mondego>    public String toString(){<newline46mondego>        double total = p.price * p.quantity;<newline46mondego>        return name + <doubleQuotes46>\t<doubleQuotes46> + price + <doubleQuotes46>\t<doubleQuotes46> quantity + <doubleQuotes46>\t<doubleQuotes46> + seller + <doubleQuotes46>\t<doubleQuotes46> + total;<newline46mondego>    }<newline46mondego>}<newline46mondego>"
"2780splitHere46","20157537splitHere46","for (Product p : item){<newline46mondego>    System.out.println(p);<newline46mondego>}<newline46mondego>"
"2781splitHere46","20157621splitHere46","Unsafe"
"2782splitHere46","20157645splitHere46","MultiPoint"
"2783splitHere46","20157645splitHere46","double[]"
"2784splitHere46","20157645splitHere46","public MultiPoint(double[] coordPt)<newline46mondego>"
"2785splitHere46","20157645splitHere46","MultiPoint"
"2786splitHere46","20157645splitHere46","Double[]"
"2787splitHere46","20157645splitHere46","Double coordPt[] = new Double[ coordList.size() ];<newline46mondego>MultiPoint myMultiPoint = new MultiPoint(coordPt);<newline46mondego>"
"2788splitHere46","20157743splitHere46","Client client = ClientBuilder.newClient();"
"2789splitHere46","20157844splitHere46","public static void fillWithFalse(boolean[][] array, int row) {<newline46mondego>    if (row < array.length) {<newline46mondego>        fillWithFalse(array[row], 0);<newline46mondego>        fillWithFalse(array, row + 1);<newline46mondego>    }<newline46mondego>}<newline46mondego><newline46mondego>public static void fillWithFalse(boolean[] array, int col) {<newline46mondego>    if (col < array.length) {<newline46mondego>        array[col] = false;<newline46mondego>        fillWithFalse(array, col + 1);<newline46mondego>    }<newline46mondego>}<newline46mondego>"
"2790splitHere46","20157844splitHere46","public static void fillWithFalse(boolean[][] array, int row, int col) {<newline46mondego>    if (row < array.length) {<newline46mondego>        if (col < array[row].length) {<newline46mondego>            array[row][col] = false;<newline46mondego>            fillWithFalse(array, row, col + 1);<newline46mondego>        } else {<newline46mondego>            fillWithFalse(array, row + 1, 0);<newline46mondego>        }<newline46mondego>    }<newline46mondego>}<newline46mondego>"
"2791splitHere46","20157844splitHere46","boolean[][] matrix = new boolean[length][width];<newline46mondego>"
"2792splitHere46","20157976splitHere46","public class Vehicle {<newline46mondego>    public int getWheelCount() {<newline46mondego>        return 1;<newline46mondego>    }<newline46mondego>}<newline46mondego><newline46mondego>public class Car extends Parent {<newline46mondego>    public int getWheelCount() {<newline46mondego>        return 4;<newline46mondego>    }<newline46mondego><newline46mondego>    public void blowHorn() {<newline46mondego>        System.out.println(<doubleQuotes46>Honk honk!<doubleQuotes46>);<newline46mondego>    }<newline46mondego>}<newline46mondego><newline46mondego>public class Bicycle extends Parent {<newline46mondego>    public int getWheelCount() {<newline46mondego>        return 2;<newline46mondego>    }<newline46mondego>}<newline46mondego><newline46mondego>Car car = new Car();<newline46mondego>car.getWheelCount();  // 4<newline46mondego>car.blowHorn();  //<doubleQuotes46>Honk honk!<doubleQuotes46><newline46mondego><newline46mondego>Vehicle v = new Car();<newline46mondego>v.getWheelCount()  // 4<newline46mondego>v.blowHorn();  // COMPILE ERROR HERE!  Unknown method<newline46mondego><newline46mondego>Bicycle b = new Bicycle();<newline46mondego>b.getWheelCount();  // 2<newline46mondego><newline46mondego>Vehicle v = new Bicycle();<newline46mondego>v.getWheelCount();  // 2<newline46mondego>"
"2793splitHere46","20157976splitHere46","Vehicle"
"2794splitHere46","20157976splitHere46","Vehicle"
"2795splitHere46","20157976splitHere46","blowHorn()"
"2796splitHere46","20157976splitHere46","Object i = new Integer(5);<newline46mondego>i.toString();  // 5<newline46mondego>"
"2797splitHere46","20158162splitHere46","c:url"
"2798splitHere46","20158162splitHere46","<c:url>"
"2799splitHere46","20158162splitHere46","<c:url value=<doubleQuotes46>a.jsp<doubleQuotes46>><newline46mondego><newline46mondego>/context/a.jsp // when cookies is enabled<newline46mondego>/context/a.jsp;jsessionid=B01F432.... // when cookie is disabled<newline46mondego>"
"2800splitHere46","20158162splitHere46","<spring:url>"
"2801splitHere46","20158162splitHere46","<spring:url value=<doubleQuotes46>/url/path/{variableName}<doubleQuotes46>><newline46mondego>   <spring:param name=<doubleQuotes46>variableName<doubleQuotes46> value=<doubleQuotes46>more than JSTL c:url<doubleQuotes46> /><newline46mondego> </spring:url><newline46mondego>"
"2802splitHere46","20158206splitHere46","for (int n = 1; n <= numberOfTransactions; n++) {<newline46mondego>        for (int c = 0; c < numberOfcurrencies; c++) {<newline46mondego>            double max = Double.NEGATIVE_INFINITY;<newline46mondego>            double temp;<newline46mondego>            for (int i = 0; i < numberOfcurrencies;i++) {<newline46mondego>                temp = rates[0][i][c]*V[n-1][i];<newline46mondego>                if (temp > max)<newline46mondego>                    max = temp;<newline46mondego>                temp = rates[1][i][c]*V[n-1][i];<newline46mondego>                if (temp > max)<newline46mondego>                    max = temp;<newline46mondego>            }<newline46mondego>            V[n][c] = max;<newline46mondego>        }<newline46mondego>    }<newline46mondego>"
"2803splitHere46","20158313splitHere46","Directory: /Users/omavine/Desktop/aPlusComputerScience<newline46mondego>Path: /Users/maven/Desktop/aPlusComputerScience/newfile.dat<newline46mondego>"
"2804splitHere46","20158313splitHere46","omavine"
"2805splitHere46","20158313splitHere46","maven"
"2806splitHere46","20158313splitHere46","File f = new File(<doubleQuotes46>/Users/maven/Desktop/aPlusComputerScience/newfile.dat<doubleQuotes46>);<newline46mondego>"
"2807splitHere46","20158313splitHere46","NullPointerException"
"2808splitHere46","20158313splitHere46","getResourceAsStream"
"2809splitHere46","20158313splitHere46","Scanner"
"2810splitHere46","20158313splitHere46","NullPointerException"
"2811splitHere46","20158390splitHere46","ToggleGroup group = new ToggleGroup();<newline46mondego>RadioButton button1 = new RadioButton(<doubleQuotes46>select first<doubleQuotes46>);<newline46mondego>button1.setToggleGroup(group);<newline46mondego>button1.setSelected(true);<newline46mondego>RadioButton button2 = new RadioButton(<doubleQuotes46>select second<doubleQuotes46>);<newline46mondego>button2.setToggleGroup(group);<newline46mondego>"
"2812splitHere46","20158418splitHere46","Exception"
"2813splitHere46","20158418splitHere46","IOException"
"2814splitHere46","20158418splitHere46","print()"
"2815splitHere46","20158418splitHere46","B"
"2816splitHere46","20158418splitHere46","IOException"
"2817splitHere46","20158418splitHere46","IOException"
"2818splitHere46","20158418splitHere46","B"
"2819splitHere46","20158418splitHere46","class B extends A {<newline46mondego><newline46mondego>    public void print() throws IOException {<newline46mondego>        System.out.println(<doubleQuotes46>In Class B.<doubleQuotes46>);<newline46mondego>        throw new IOException(<doubleQuotes46>Printed in B.<doubleQuotes46>);<newline46mondego>    }<newline46mondego><newline46mondego>}<newline46mondego>"
"2820splitHere46","20158452splitHere46","public class MinHeap<E extends Comparable> extends ArrayList<E> <newline46mondego>"
"2821splitHere46","20158452splitHere46","public class MinHeap<E extends Comparable<E>> extends ArrayList<E> <newline46mondego>"
"2822splitHere46","20158452splitHere46","Comparable"
"2823splitHere46","20158521splitHere46","static float cowCount, income, cowMult;<newline46mondego>...<newline46mondego>protected void onResume()<newline46mondego>{<newline46mondego>    super.onResume();<newline46mondego>    SharedPreferences sharedPref = getSharedPreferences(<doubleQuotes46>com.example.cowcount<doubleQuotes46>, Context.MODE_PRIVATE);<newline46mondego>    cowCount = sharedPref.getFloat(<doubleQuotes46>cowCount<doubleQuotes46>, 197);<newline46mondego>    cowMult = sharedPref.getFloat(<doubleQuotes46>cowMult<doubleQuotes46>, 1);<newline46mondego>    income = sharedPref.getFloat(<doubleQuotes46>income<doubleQuotes46>, 0);<newline46mondego>}<newline46mondego>...<newline46mondego>"
"2824splitHere46","20158521splitHere46","SharedPreferences.getFloat()"
"2825splitHere46","20158521splitHere46","SharedPreferences"
"2826splitHere46","20158521splitHere46","SharedPreferences"
"2827splitHere46","20158521splitHere46","onResume"
"2828splitHere46","20158521splitHere46","TextView"
"2829splitHere46","20158521splitHere46","onCreate"
"2830splitHere46","20158587splitHere46","JComponent"
"2831splitHere46","20158587splitHere46","EventListenerList"
"2832splitHere46","20158587splitHere46","listenerList"
"2833splitHere46","20158587splitHere46","protected"
"2834splitHere46","20158587splitHere46","ControlPane"
"2835splitHere46","20158587splitHere46","public void addChangeListener(ChangeListener listener) {<newline46mondego>    listenerList.add(ChangeListener.class, listener);<newline46mondego>}<newline46mondego>"
"2836splitHere46","20158587splitHere46","public void removeChangeListener(ChangeListener listener) {<newline46mondego>    listenerList.remove(ChangeListener.class, listener);<newline46mondego>}<newline46mondego>"
"2837splitHere46","20158587splitHere46","protected void fireStateChanged() {<newline46mondego>    ChangeListener[] listeners = listenerList.getListeners(ChangeListener.class);<newline46mondego>    if (listeners != null && listeners.length > 0) {<newline46mondego>        ChangeEvent evt = new ChangeEvent(evt);<newline46mondego>        for (ChangeListener listener : listeners) {<newline46mondego>            listener.stateChanged(evt);<newline46mondego>        }<newline46mondego>    }<newline46mondego>}<newline46mondego>"
"2838splitHere46","20158587splitHere46","ControlPane"
"2839splitHere46","20158587splitHere46","fireStateChanged"
"2840splitHere46","20158587splitHere46","public void actionPerformed(ActionEvent evt) {<newline46mondego>    fireStateChanged();<newline46mondego>}<newline46mondego>"
"2841splitHere46","20158587splitHere46","GamePane"
"2842splitHere46","20158587splitHere46","ChangeListener"
"2843splitHere46","20158587splitHere46","ControlPane"
"2844splitHere46","20158587splitHere46","private ControlPane cp;<newline46mondego>private HangManPane hangManPane;<newline46mondego><newline46mondego>//...<newline46mondego><newline46mondego>public GamePane() {<newline46mondego>    cp = new ControlPane();<newline46mondego>    hangManPane = new HangManPane(null);<newline46mondego><newline46mondego>    cp.addChangeListener(new ChangeListener() {<newline46mondego>        public void stateChanged(ChangeEvent evt) {<newline46mondego>            String secret = cp.getSecretWord();<newline46mondego>            DefaultHangManModel model = new DefaultHangManModel(secret);<newline46mondego>            hangManPane.setModel(model);<newline46mondego>        }<newline46mondego>    });<newline46mondego>}<newline46mondego>"
"2845splitHere46","20158619splitHere46","btnsa.setStyle(<doubleQuotes46>-fx-background-color:transparent;<doubleQuotes46>);<newline46mondego>    btnsa.setGraphic(new ImageView(new Image(getClass().getResourceAsStream(<doubleQuotes46>JavafxSm.gif<doubleQuotes46>))));<newline46mondego><newline46mondego>    btnsa.setOnMouseEntered(new EventHandler<MouseEvent><newline46mondego>    () {<newline46mondego><newline46mondego>        @Override<newline46mondego>        public void handle(MouseEvent t) {<newline46mondego>           btnsa.setStyle(<doubleQuotes46>-fx-background-color:#dae7f3;<doubleQuotes46>);<newline46mondego>        }<newline46mondego>    });<newline46mondego><newline46mondego>    btnsa.setOnMouseExited(new EventHandler<MouseEvent><newline46mondego>    () {<newline46mondego><newline46mondego>        @Override<newline46mondego>        public void handle(MouseEvent t) {<newline46mondego>           btnsa.setStyle(<doubleQuotes46>-fx-background-color:transparent;<doubleQuotes46>);<newline46mondego>        }<newline46mondego>    });<newline46mondego>"
"2846splitHere46","20158635splitHere46","getHostAddress()"
"2847splitHere46","20158663splitHere46","int i = 0;"
"2848splitHere46","20158663splitHere46","Integer.valueOf"
"2849splitHere46","20158663splitHere46","Float.valueOf"
"2850splitHere46","20158663splitHere46","int()"
"2851splitHere46","20158663splitHere46","float()"
"2852splitHere46","20158730splitHere46","setPrefHeight"
"2853splitHere46","20158730splitHere46","pane.setPrefHeight(400);<newline46mondego>"
"2854splitHere46","20158736splitHere46","-fx-background-radius: 10, 10, 10, 10;"
"2855splitHere46","20158750splitHere46","import java.io.File;<newline46mondego>import java.io.FileNotFoundException;<newline46mondego>import java.util.ArrayList;<newline46mondego>import java.util.Scanner;<newline46mondego><newline46mondego>public class DOW {<newline46mondego><newline46mondego>  public static void main(String[] args) {<newline46mondego>    File file = new File(<doubleQuotes46>/Users/***/RandomInts.txt<doubleQuotes46>);<newline46mondego>    try {<newline46mondego>      Scanner scanner = new Scanner(file);<newline46mondego><newline46mondego>      ArrayList<Integer>[] multiarray = new ArrayList[7]; // This is how one would make an array of ArrayList's.<newline46mondego>      for (int i = 0; i < multiarray.length; i++)<newline46mondego>        multiarray[i] = new ArrayList<Integer>();<newline46mondego><newline46mondego>      while (scanner.hasNextInt()) { //This is how you would save the values. You were saving temperatures incorrectly.<newline46mondego>        int dow = scanner.nextInt() - 1; //Get day of week.<newline46mondego>        int temp = scanner.nextInt(); //Get temperature. [Would throw exception here if your input was bad]<newline46mondego>        multiarray[dow].add(temp); //Store temperature in the array representing the day of week.<newline46mondego>      }<newline46mondego><newline46mondego>      // Looks like you want to find min, max and average in each column here.<newline46mondego>      for (int x = 0; x < 7; x++) {<newline46mondego>        int hightemp = Integer.MIN_VALUE; // Set this to something really low. (You will see why in a minute)<newline46mondego>        int lowtemp = Integer.MAX_VALUE; // Set this to something really high.<newline46mondego>        double avetemp = 0; // You seem to be using ave as <doubleQuotes46>sum<doubleQuotes46> right now and then you plan on dividing which is fine. This should also be a double.<newline46mondego>        int size = multiarray[x].size(); // No point calling .size() [or in general any function] over and over again. Its better to just cache the answer.<newline46mondego>        for (int y = 0; y < size; y++) {<newline46mondego>          int num = multiarray[x].get(y); // Same logic as size here.<newline46mondego>          hightemp = Math.max(hightemp, num);<newline46mondego>          lowtemp = Math.min(lowtemp, num);<newline46mondego>          avetemp += num;<newline46mondego>        }<newline46mondego>        avetemp = avetemp / size;<newline46mondego>        // P.S.: Also you probably want to save the values of hightemp, lowtemp, avetemp somewhere after doing all this work!<newline46mondego>        // Removed the rest of your code as it is irrelevant for your question.<newline46mondego>      }<newline46mondego>      // Close your streams.<newline46mondego>      scanner.close();<newline46mondego>    } catch (FileNotFoundException e) {<newline46mondego>      e.printStackTrace();<newline46mondego>    } catch (Exception e) {<newline46mondego>      // This would happen if your input file is bad.<newline46mondego>      e.printStackTrace();<newline46mondego>    }<newline46mondego>  }<newline46mondego>}<newline46mondego>"
"2856splitHere46","20158758splitHere46","public class LongIntegersAritymetic {<newline46mondego><newline46mondego>// MAKE SURE TO CHECK THE SIGNS OF BOTH NUMBERS<newline46mondego>// 4 SITUATIONS:<newline46mondego>/* num1 + and num2 + =====> add<newline46mondego> * num1 + and num2 - =====> remove the sign from num2<newline46mondego> * and call substract(num1, num2_without_sign)<newline46mondego> * num1 - and num2 + =====> remove the sign from num1<newline46mondego> * and call substract(num2, num1_without_sign)<newline46mondego> * num1 - and num2 - =====> remove the sign from num1 and num2<newline46mondego> * and call add(num1_without_sing, num2_without_sign)<newline46mondego> * finally add the - sign to result*/<newline46mondego><newline46mondego><newline46mondego>private static boolean changeResultSign = false;<newline46mondego><newline46mondego><newline46mondego><newline46mondego>public static String add(String num1, String num2) {<newline46mondego><newline46mondego>   String result = <doubleQuotes46><doubleQuotes46>;<newline46mondego><newline46mondego>   int n1 = 0, n2 = 0, res = 0, minLength = 0, carry = 0, maxLength = 0;<newline46mondego><newline46mondego>   if(num1 != null & num2 != null) {<newline46mondego>           // num1 + and num2 + =====> add default<newline46mondego>       // num1 - and num2 - =====> remove the sign from num1 || solved! <newline46mondego>       ////and call add(num1_without_sing, num2_without_sign) || solved!<newline46mondego>       if(num1.charAt(0) == '-' & num2.charAt(0)== '-'){<newline46mondego>           num1 = num1.substring(1);<newline46mondego>           num2 = num2.substring(1);<newline46mondego>           changeResultSign  = true;<newline46mondego>       }<newline46mondego>       // num1 - and num2 + =====> remove the sign from num1 || solved!<newline46mondego>       //and call add(num1_without_sing, num2) || solved!<newline46mondego>   else if(num1.charAt(0)=='-'){<newline46mondego>       num1 = num1.substring(1);<newline46mondego>       String a = subtarct(num2,num1);<newline46mondego>       return a;<newline46mondego>   }<newline46mondego>   // num1 + and num2 - =====> remove the sign from num2 ||solved!<newline46mondego>   //and call substract(num1, num2_without_sign) ||solved!<newline46mondego>   else if(num2.charAt(0)=='-'){<newline46mondego>       num2 = num2.substring(1);<newline46mondego>       String b = subtarct(num1,num2);<newline46mondego>       return b;<newline46mondego>   }<newline46mondego>  if(checkDigits(num1) & checkDigits(num2)) {<newline46mondego>     minLength = Math.min(num1.length(), num2.length());<newline46mondego>     maxLength = Math.max(num1.length(), num2.length());<newline46mondego>     for(int i = 0; i < minLength; i++) {<newline46mondego>       n1 = num1.charAt(num1.length()-1-i) - '0';<newline46mondego>       n2 = num2.charAt(num2.length()-1-i) - '0';<newline46mondego>       res = (n1 + n2 + carry) % 10 ;<newline46mondego>       carry = (n1 + n2 + carry) / 10;<newline46mondego>       // (new Integer(res)).toString();<newline46mondego>       result = res + result ;  // CHECK THE VALIDITY OF THIS!!!<newline46mondego>     }<newline46mondego>     for(int i = minLength; i < maxLength; i++) {<newline46mondego>        if(num1.length() >  num2.length()) {<newline46mondego>           n1 = num1.charAt(num1.length()-1-i) - '0';<newline46mondego>           res = (n1 + carry) % 10 ;<newline46mondego>           carry = (n1 + carry) / 10;<newline46mondego>           result =res + result ; // CHECK THE VALIDITY OF THIS!!!<newline46mondego>        }<newline46mondego>        else {<newline46mondego>           n2 = num2.charAt(num2.length()-1-i) - '0';<newline46mondego>           res = (n2 + carry) % 10 ;<newline46mondego>           carry = (n2 + carry) / 10;<newline46mondego>           result = res+ result ; // CHECK THE VALIDITY OF THIS!!!<newline46mondego>        }<newline46mondego>      }<newline46mondego>      if(carry == 1)<newline46mondego>        result = carry +result ; // CHECK THE VALIDITY OF THIS!!!<newline46mondego>   } // End of if for valid digit Strings<newline46mondego>   else<newline46mondego>      throw new IllegalArgumentException(<doubleQuotes46>Invalid numbers!<doubleQuotes46>);<newline46mondego>   }<newline46mondego>   else<newline46mondego>     throw new NullPointerException(<doubleQuotes46>Missing number(s)!<doubleQuotes46>);<newline46mondego>return result ;<newline46mondego>}<newline46mondego><newline46mondego><newline46mondego><newline46mondego>public static boolean checkDigits(String num) {<newline46mondego>   boolean a = true;<newline46mondego>    if(num != null) {<newline46mondego>      for(int i = 0; i < num.length(); i++) {<newline46mondego>         if(num.charAt(i) < '0' | num.charAt(i) > '9')<newline46mondego>             a = false;<newline46mondego><newline46mondego>      }<newline46mondego>      return a;  }<newline46mondego>   else<newline46mondego>     throw new NullPointerException(<doubleQuotes46>Missing number(s)!<doubleQuotes46>);<newline46mondego>  }<newline46mondego><newline46mondego><newline46mondego><newline46mondego>public static void main (String[] args){<newline46mondego>    System.out.print(add(<doubleQuotes46>8437598745<doubleQuotes46>,<doubleQuotes46>8437598745<doubleQuotes46>));<newline46mondego>}}<newline46mondego>"
"2857splitHere46","20158822splitHere46","Emp"
"2858splitHere46","20158822splitHere46","hibernate.cfg.xml"
"2859splitHere46","20158822splitHere46","Emp.hbm.xml"
"2860splitHere46","20158822splitHere46","<mapping resource=<doubleQuotes46>info/inetsolv/Emp.hbm.xml<doubleQuotes46>/><newline46mondego>"
"2861splitHere46","20158849splitHere46","mvn compile"
"2862splitHere46","20158849splitHere46","properties:read-project-properties"
"2863splitHere46","20158849splitHere46","initialize"
"2864splitHere46","20158849splitHere46","initialize"
"2865splitHere46","20158849splitHere46","compile"
"2866splitHere46","20158849splitHere46","test"
"2867splitHere46","20158849splitHere46","mvn flyway:init"
"2868splitHere46","20158849splitHere46","flyway:init"
"2869splitHere46","20158849splitHere46","initialize"
"2870splitHere46","20158849splitHere46","mvn initialize"
"2871splitHere46","20158849splitHere46","flyway:init"
"2872splitHere46","20158849splitHere46","mvn flyway:init initialize"
"2873splitHere46","20158879splitHere46","DataSource"
"2874splitHere46","20158879splitHere46","URLDataSource"
"2875splitHere46","20158879splitHere46","DataSource source = new URLDataSource(file);<newline46mondego>"
"2876splitHere46","20158950splitHere46","static private int requestNum = 0;<newline46mondego>"
"2877splitHere46","20158964splitHere46","LabelField"
"2878splitHere46","20158964splitHere46","paint()"
"2879splitHere46","20158964splitHere46","Graphics#setColor()"
"2880splitHere46","20158964splitHere46","public class CustomColorChoiceField extends ObjectChoiceField {<newline46mondego><newline46mondego>      public CustomColorChoiceField(String label, Object[] choices, int initialIndex) {<newline46mondego>         super(<doubleQuotes46>title<doubleQuotes46>, choices, initialIndex);<newline46mondego>      }<newline46mondego><newline46mondego>      protected void paint(Graphics graphics) {<newline46mondego>         int oldColor = graphics.getColor();<newline46mondego>         graphics.setColor(Color.GREEN);<newline46mondego>         super.paint(graphics);<newline46mondego>         graphics.setColor(oldColor);<newline46mondego>      }<newline46mondego>   }<newline46mondego>"
"2881splitHere46","20158964splitHere46","add(new CustomColorChoiceField(<doubleQuotes46>title<doubleQuotes46>, choices1, 0));<newline46mondego>"
"2882splitHere46","20158964splitHere46","ObjectChoiceField"
"2883splitHere46","20158964splitHere46","<doubleQuotes46><doubleQuotes46>"
"2884splitHere46","20158964splitHere46","LabelField"
"2885splitHere46","20158964splitHere46","ObjectChoiceField"
"2886splitHere46","20158964splitHere46","LabelField"
"2887splitHere46","20159021splitHere46","xyzService"
"2888splitHere46","20159021splitHere46","// Lookup the EJB from JNDI<newline46mondego>InitialContext ctx = new InitialContext();<newline46mondego>xyzRemote remoteobj = (xyzRemote)ctx.lookup(<doubleQuotes46>ejb/xyzService<doubleQuotes46>);<newline46mondego>"
"2889splitHere46","20159021splitHere46","@EJB (mappedName=<doubleQuotes46>ejb/xyzService<doubleQuotes46>)<newline46mondego>private xyzRemote remoteobj;<newline46mondego>"
"2890splitHere46","20159021splitHere46","InitialContext ctx = new InitialContext();<newline46mondego>xyzRemote remoteobj = (xyzRemote) ctx.lookup(<doubleQuotes46>java:comp/env/ejb/xyzService<doubleQuotes46>);<newline46mondego>"
"2891splitHere46","20159021splitHere46","jndi.properties"
"2892splitHere46","20159021splitHere46","### JBossNS properties<newline46mondego>java.naming.factory.initial=org.jnp.interfaces.NamingContextFactory<newline46mondego>java.naming.provider.url=jnp://192.108.1.2:1099<newline46mondego>java.naming.factory.url.pkgs=org.jboss.naming:org.jnp.interfaces<newline46mondego>"
"2893splitHere46","20159023splitHere46","Change(int x, ArrayList<Integer> c){<newline46mondego>    numberOfCoins = x;<newline46mondego>    Coins = new ArrayList<Integer>(c);<newline46mondego>}<newline46mondego>"
"2894splitHere46","20159049splitHere46","Window"
"2895splitHere46","20159049splitHere46","SurfaceView"
"2896splitHere46","20159049splitHere46","TextureView"
"2897splitHere46","20159049splitHere46","MediaPlayer"
"2898splitHere46","20159049splitHere46","View"
"2899splitHere46","20159049splitHere46","Window"
"2900splitHere46","20159049splitHere46","MediaController"
"2901splitHere46","20159121splitHere46","static"
"2902splitHere46","20159121splitHere46","static"
"2903splitHere46","20159121splitHere46","private static int counter = 0;<newline46mondego>public Die()<newline46mondego>{<newline46mondego>    counter++;<newline46mondego>    // Other stuffs<newline46mondego>}<newline46mondego>// Have a getter method for the counter so that you can <newline46mondego>// get the count of instances created at any point of time<newline46mondego>public static int getCounter() {<newline46mondego>    return counter;<newline46mondego>}<newline46mondego>"
"2904splitHere46","20159121splitHere46","void someMethodInAnotherClass() {<newline46mondego>    int instanceCount = Die.getCounter(); // You need to call static method using the Class name<newline46mondego>    // other stuffs.<newline46mondego>}<newline46mondego>"
"2905splitHere46","20159398splitHere46","myDieValue = (rand.nextInt(myDieSides) + 1);<newline46mondego>"
"2906splitHere46","20159398splitHere46","rand"
"2907splitHere46","20159398splitHere46","null"
"2908splitHere46","20159398splitHere46","private Random rand= new Random();<newline46mondego>"
"2909splitHere46","20159443splitHere46","@Autowired"
"2910splitHere46","20159443splitHere46","setFood()"
"2911splitHere46","20159443splitHere46","PecintaKuliner"
"2912splitHere46","20159443splitHere46","@Autowired<newline46mondego>@Qualifier(<doubleQuotes46>nasigoreng<doubleQuotes46>)<newline46mondego>private Food food;<newline46mondego><newline46mondego>public void setFood(Food food) {<newline46mondego>    this.food = food;<newline46mondego>}<newline46mondego>"
"2913splitHere46","20159531splitHere46","if(grid[i][j] == 'N') {<newline46mondego>   if(grid[i-1][j]=='N'&&grid[i+1][j]=='N'&&grid[i][j-1]=='N'&&grid[i][j+1]=='N'&&grid[i-1][j-1]=='N'$$grid[i-1][j+1]=='N'&&grid[i+1][j-1]=='N'&&grid[i+1][j+1]=='N'){<newline46mondego>    System.out.println(<doubleQuotes46>Key is <doubleQuotes46>+i+<doubleQuotes46>,<doubleQuotes46>+j)<newline46mondego>   }<newline46mondego> }<newline46mondego>"
"2914splitHere46","20159531splitHere46","your i and j should start with 1"
"2915splitHere46","20159531splitHere46","upto < 5-1"
"2916splitHere46","20159531splitHere46","key"
"2917splitHere46","20159531splitHere46","8 N's"
"2918splitHere46","20159532splitHere46","public static void System.out.println(String inStr)<newline46mondego>"
"2919splitHere46","20159532splitHere46","public static void println(String inStr)<newline46mondego>"
"2920splitHere46","20159532splitHere46","if (myInput.indexOf(<doubleQuotes46>and<doubleQuotes46>) != -1 || myInput.indexOf(<doubleQuotes46>end<doubleQuotes46>));<newline46mondego>"
"2921splitHere46","20159532splitHere46","if (myInput.indexOf(<doubleQuotes46>and<doubleQuotes46>) != -1 || myInput.indexOf(<doubleQuotes46>end<doubleQuotes46>) != -1);<newline46mondego>"
"2922splitHere46","20159532splitHere46","if(Character.isLowerCase(myInput.charA(x)))<newline46mondego>"
"2923splitHere46","20159532splitHere46","if(Character.isLowerCase(myInput.charAt(x)))<newline46mondego>"
"2924splitHere46","20159564splitHere46","MyActivity"
"2925splitHere46","20159564splitHere46","setCallback"
"2926splitHere46","20159564splitHere46","WeakReference"
"2927splitHere46","20159564splitHere46","setCallback(Callback cb)"
"2928splitHere46","20159564splitHere46","sDrawable"
"2929splitHere46","20159564splitHere46","sDrawable"
"2930splitHere46","20159564splitHere46","MainActivity"
"2931splitHere46","20159564splitHere46","package com.douglasdrumond.leaky;<newline46mondego><newline46mondego>import android.os.Bundle;<newline46mondego>import android.app.Activity;<newline46mondego>import android.graphics.drawable.Drawable;<newline46mondego>import android.widget.TextView;<newline46mondego><newline46mondego>public class MainActivity extends Activity {<newline46mondego>    private static Drawable sBackground;<newline46mondego><newline46mondego>    @Override<newline46mondego>    protected void onCreate(Bundle savedInstanceState) {<newline46mondego>        super.onCreate(savedInstanceState);<newline46mondego><newline46mondego>        TextView label = new TextView(this);<newline46mondego>        System.gc();<newline46mondego>        long memory = Runtime.getRuntime().totalMemory()<newline46mondego>                - Runtime.getRuntime().freeMemory();<newline46mondego>        label.setText(<doubleQuotes46>Memory: <doubleQuotes46> + memory / 1024f);<newline46mondego><newline46mondego>        if (sBackground == null) {<newline46mondego>            sBackground = getResources().getDrawable(R.drawable.large_bitmap);<newline46mondego>        }<newline46mondego>        label.setBackgroundDrawable(sBackground);<newline46mondego><newline46mondego>        setContentView(label);<newline46mondego>    }<newline46mondego><newline46mondego>}<newline46mondego>"
"2932splitHere46","20159596splitHere46","<Context crossContext=<doubleQuotes46>true<doubleQuotes46>><newline46mondego><newline46mondego>    <!-- Default set of monitored resources --><newline46mondego>    <WatchedResource>WEB-INF/web.xml</WatchedResource><newline46mondego><newline46mondego>    <!-- Uncomment this to disable session persistence across Tomcat restarts --><newline46mondego>    <!--<newline46mondego>    <Manager pathname=<doubleQuotes46><doubleQuotes46> /><newline46mondego>    --><newline46mondego><newline46mondego>    <!-- Uncomment this to enable Comet connection tacking (provides events<newline46mondego>         on session expiration as well as webapp lifecycle) --><newline46mondego>    <!--<newline46mondego>    <Valve className=<doubleQuotes46>org.apache.catalina.valves.CometConnectionManagerValve<doubleQuotes46> /><newline46mondego>    --><newline46mondego><newline46mondego></Context><newline46mondego>"
"2933splitHere46","20159596splitHere46","package interServletComm1;<newline46mondego><newline46mondego>import java.io.IOException;<newline46mondego>import java.io.PrintWriter;<newline46mondego><newline46mondego>import javax.servlet.RequestDispatcher;<newline46mondego>import javax.servlet.ServletContext;<newline46mondego>import javax.servlet.ServletException;<newline46mondego>import javax.servlet.annotation.WebServlet;<newline46mondego>import javax.servlet.http.HttpServlet;<newline46mondego>import javax.servlet.http.HttpServletRequest;<newline46mondego>import javax.servlet.http.HttpServletResponse;<newline46mondego><newline46mondego>/**<newline46mondego> * Servlet implementation class Servlet1<newline46mondego> */<newline46mondego>@WebServlet(<doubleQuotes46>/Servlet1<doubleQuotes46>)<newline46mondego>public class Servlet1 extends HttpServlet {<newline46mondego>    private static final long serialVersionUID = 1L;<newline46mondego><newline46mondego>    /**<newline46mondego>     * @see HttpServlet#HttpServlet()<newline46mondego>     */<newline46mondego>    public Servlet1() {<newline46mondego>        super();<newline46mondego>        // TODO Auto-generated constructor stub<newline46mondego>    }<newline46mondego><newline46mondego>    /**<newline46mondego>     * @see HttpServlet#doGet(HttpServletRequest request, HttpServletResponse response)<newline46mondego>     */<newline46mondego>    protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException <newline46mondego>    {<newline46mondego>        response.setContentType(<doubleQuotes46>text/html<doubleQuotes46>);<newline46mondego>        PrintWriter pw = response.getWriter();<newline46mondego><newline46mondego>        request.setAttribute(<doubleQuotes46>name<doubleQuotes46>, <doubleQuotes46>WebApp1<doubleQuotes46>);<newline46mondego>        ServletContext context = getServletContext().getContext(<doubleQuotes46>/InterServletComm2<doubleQuotes46>);<newline46mondego>        RequestDispatcher rd = context.getRequestDispatcher(<doubleQuotes46>/Servlet2<doubleQuotes46>);<newline46mondego>        rd.forward(request, response);<newline46mondego>    }<newline46mondego><newline46mondego>    /**<newline46mondego>     * @see HttpServlet#doPost(HttpServletRequest request, HttpServletResponse response)<newline46mondego>     */<newline46mondego>    protected void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {<newline46mondego>        // TODO Auto-generated method stub<newline46mondego>    }<newline46mondego><newline46mondego>}<newline46mondego>"
"2934splitHere46","20159596splitHere46","package interServletComm2;<newline46mondego><newline46mondego>import java.io.IOException;<newline46mondego>import java.io.PrintWriter;<newline46mondego><newline46mondego>import javax.servlet.RequestDispatcher;<newline46mondego>import javax.servlet.ServletException;<newline46mondego>import javax.servlet.annotation.WebServlet;<newline46mondego>import javax.servlet.http.HttpServlet;<newline46mondego>import javax.servlet.http.HttpServletRequest;<newline46mondego>import javax.servlet.http.HttpServletResponse;<newline46mondego><newline46mondego>/**<newline46mondego> * Servlet implementation class Servlet2<newline46mondego> */<newline46mondego>@WebServlet(<doubleQuotes46>/Servlet2<doubleQuotes46>)<newline46mondego>public class Servlet2 extends HttpServlet {<newline46mondego>    private static final long serialVersionUID = 1L;<newline46mondego><newline46mondego>    /**<newline46mondego>     * @see HttpServlet#HttpServlet()<newline46mondego>     */<newline46mondego>    public Servlet2() {<newline46mondego>        super();<newline46mondego>        // TODO Auto-generated constructor stub<newline46mondego>    }<newline46mondego><newline46mondego>    /**<newline46mondego>     * @see HttpServlet#doGet(HttpServletRequest request, HttpServletResponse response)<newline46mondego>     */<newline46mondego>    protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException <newline46mondego>    {<newline46mondego>        response.setContentType(<doubleQuotes46>text/html<doubleQuotes46>);<newline46mondego>        PrintWriter pw = response.getWriter();<newline46mondego>        String name = (String) request.getAttribute(<doubleQuotes46>name<doubleQuotes46>);<newline46mondego>        pw.println(<doubleQuotes46>This is web application 2.<doubleQuotes46>);<newline46mondego>        pw.println(<doubleQuotes46><newline46mondego>The value received from web application one is: <doubleQuotes46> + name);<newline46mondego>    }<newline46mondego><newline46mondego>    /**<newline46mondego>     * @see HttpServlet#doPost(HttpServletRequest request, HttpServletResponse response)<newline46mondego>     */<newline46mondego>    protected void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {<newline46mondego>        // TODO Auto-generated method stub<newline46mondego>    }<newline46mondego><newline46mondego>}<newline46mondego>"
"2935splitHere46","20159709splitHere46","v -> Vapi<newline46mondego>E -> Vapi<newline46mondego>V -> Eapi<newline46mondego>E -> Eapi<newline46mondego>"
"2936splitHere46","20159709splitHere46","E -> V<newline46mondego>E -> Eapi<newline46mondego>V -> Eapi<newline46mondego>"
"2937splitHere46","20159767splitHere46","MyClass.class.getResource(<doubleQuotes46>/path/to/myfile.txt<doubleQuotes46>)<newline46mondego>"
"2938splitHere46","20159800splitHere46","org.apache.hadoop.hbase.filter.Filter"
"2939splitHere46","20159800splitHere46","hbase-X.X.X.jar"
"2940splitHere46","20159907splitHere46","note.setLayout(new FlowLayout());<newline46mondego>"
"2941splitHere46","20159907splitHere46","center"
"2942splitHere46","20159914splitHere46","for (int i=0; i<remain; i++){<newline46mondego>     array[current+i] = helper[helperLeft + i];<newline46mondego>    }<newline46mondego>"
"2943splitHere46","20159914splitHere46","while (helperLeft <= mid) {<newline46mondego>        array[current] = helper[helperLeft];<newline46mondego>        current++;<newline46mondego>        helperLeft++;<newline46mondego>    }<newline46mondego>"
"2944splitHere46","20159968splitHere46","public void connect(View v) { // missed View as param<newline46mondego>"
"2945splitHere46","20159968splitHere46","android:onClick=<doubleQuotes46>sayHello<doubleQuotes46>"
"2946splitHere46","20159968splitHere46","public void sayHello(View v)"
"2947splitHere46","20159968splitHere46","connect(); // in onCreate<newline46mondego>"
"2948splitHere46","20159968splitHere46","thread"
"2949splitHere46","20159968splitHere46","AsyncTask"
"2950splitHere46","20159968splitHere46","public void connect(View v) { <newline46mondego>      new TheTask().execute();<newline46mondego>}<newline46mondego>class TheTask extends Asynctask<Void,Void,Void><newline46mondego>{<newline46mondego> @Override<newline46mondego> protected Void doInBackground(Void... params) {<newline46mondego>   HttpClient client = new DefaultHttpClient();<newline46mondego>   HttpGet request = new HttpGet(<doubleQuotes46>http://www.yiinotes.com/nutrimondo/web/meals/week<doubleQuotes46>);<newline46mondego>    try {<newline46mondego>        client.execute(request);<newline46mondego>    } catch (IOException e) {<newline46mondego>        e.printStackTrace();<newline46mondego>    }<newline46mondego>   return null; <newline46mondego> }<newline46mondego>}<newline46mondego>"
"2951splitHere46","20160025splitHere46","for(int index = 0; index < array.length; index++) {<newline46mondego>      if (search == array[index])<newline46mondego>       { <newline46mondego>       isThere = true;<newline46mondego>       break; <newline46mondego>       }<newline46mondego>      else<newline46mondego>        isThere = false; } // end for<newline46mondego>"
"2952splitHere46","20160035splitHere46","getType()"
"2953splitHere46","20160035splitHere46","getTypes()"
"2954splitHere46","20160035splitHere46","getType()"
"2955splitHere46","20160035splitHere46","Window class"
"2956splitHere46","20160035splitHere46","Window"
"2957splitHere46","20160035splitHere46","JDialog"
"2958splitHere46","20160035splitHere46","getType(){}"
"2959splitHere46","20160075splitHere46","class SuperSample { }<newline46mondego>    class Sample extends SuperSample { }<newline46mondego>    ...<newline46mondego>    ArrayList<Sample> sList = new ArrayList<Sample>();<newline46mondego>    Object o = sList;<newline46mondego>    ArrayList<SuperSample> ssList = (ArrayList<SuperSample>)o;<newline46mondego>"
"2960splitHere46","20160075splitHere46","ClassCastException"
"2961splitHere46","20160075splitHere46","ArrayList"
"2962splitHere46","20160075splitHere46","ClassCastException"
"2963splitHere46","20160075splitHere46","Object"
"2964splitHere46","20160075splitHere46","ArrayList<SuperSample> ssList = (ArrayList)sList;<newline46mondego>"
"2965splitHere46","20160075splitHere46","@SuppressWarnings"
"2966splitHere46","20160075splitHere46","@SuppressWarnings"
"2967splitHere46","20160075splitHere46","-Xlint:unchecked -Werror"
"2968splitHere46","20160075splitHere46","javac"
"2969splitHere46","20160075splitHere46","sList"
"2970splitHere46","20160075splitHere46","List<Sample> sList = Collections.checkedList(new ArrayList<Sample>(), Sample.class);<newline46mondego>"
"2971splitHere46","20160075splitHere46","ClassCastException"
"2972splitHere46","20160075splitHere46","SuperSample"
"2973splitHere46","20160080splitHere46","to make it invisible by changing its opacity<newline46mondego>msg.setalpha(0.0f);<newline46mondego><newline46mondego>and to make it visible by changing its opacity<newline46mondego>msg.setalpha(1.0f);<newline46mondego>"
"2974splitHere46","20160115splitHere46","grids"
"2975splitHere46","20160115splitHere46","char[][][] grids = new char[numberOfCases][][];<newline46mondego>"
"2976splitHere46","20160115splitHere46","grids"
"2977splitHere46","20160129splitHere46","pm.getObjectById(User.class, idValue);<newline46mondego>"
"2978splitHere46","20160129splitHere46","pm.getObjectId(obj)"
"2979splitHere46","20160138splitHere46","toString()"
"2980splitHere46","20160138splitHere46","AdjList"
"2981splitHere46","20160138splitHere46","public String toString() {<newline46mondego>  StringBuilder sb = new StringBuilder();<newline46mondego>  sb.append(<doubleQuotes46>AdjList [<doubleQuotes46>).append(N).append(<doubleQuotes46>] = {<doubleQuotes46>);<newline46mondego>  Node n = this.first;<newline46mondego>  for (int i = 0; i < N; i++) {<newline46mondego>    if (i != 0) {<newline46mondego>      sb.append(<doubleQuotes46>, <doubleQuotes46>);<newline46mondego>    }<newline46mondego>    sb.append(n.toString());<newline46mondego>    n = n.next;<newline46mondego>  }<newline46mondego>  sb.append(<doubleQuotes46>}<doubleQuotes46>);<newline46mondego>  return sb.toString();<newline46mondego>}<newline46mondego>"
"2982splitHere46","20160138splitHere46","Node"
"2983splitHere46","20160138splitHere46","public String toString() {<newline46mondego>  return String.valueOf(a);<newline46mondego>}<newline46mondego>"
"2984splitHere46","20160153splitHere46","<beaneditor add=<doubleQuotes46>bar<doubleQuotes46>... >"
"2985splitHere46","20160201splitHere46","DOM.sinkEvent(panel.getElement(), Event.ONCLICK);<newline46mondego>"
"2986splitHere46","20160201splitHere46","RootPanel.get(<doubleQuotes46>modal_panel<doubleQuotes46>).add(panel);<newline46mondego>"
"2987splitHere46","20160257splitHere46","return this.getClass().getName();"
"2988splitHere46","20160260splitHere46","ExceptionInInitializerError"
"2989splitHere46","20160260splitHere46","SoundEffect"
"2990splitHere46","20160260splitHere46","catch (Exception e) {<newline46mondego>  e.printStackTrace();<newline46mondego>}<newline46mondego>"
"2991splitHere46","20160282splitHere46","sql"
"2992splitHere46","20160282splitHere46","PreparedStatement ps = <newline46mondego>(PreparedStatement) c.prepareStatement(<doubleQuotes46>INSERT INTO foods(id,type,name,price) <doubleQuotes46><newline46mondego>                + <doubleQuotes46>VALUES(NULL,?,?,?)<doubleQuotes46>);<newline46mondego>"
"2993splitHere46","20160282splitHere46",")"
"2994splitHere46","20160355splitHere46","// Suppose list1, and list2 are initialized like this<newline46mondego>List<? super Number> list1 = new ArrayList<Object>();  // valid assignment<newline46mondego>List<? extends Integer> list2 = new ArrayList<Integer>();  // valid<newline46mondego><newline46mondego>// had this been valid, list1 and list2 both point to ArrayList<Integer><newline46mondego>list1 = list2;   <newline46mondego><newline46mondego>// This is fine, as list1 declared type is `List<? super Number>`<newline46mondego>list1.add(new Float(2.4f));<newline46mondego><newline46mondego>// The below code will compile fine, as list2.get(0) type is Integer.<newline46mondego>// But it would throw ClassCastException at runtime.<newline46mondego>Integer in = list2.get(0);  <newline46mondego>"
"2995splitHere46","20160355splitHere46","List<Number> list1 = null;<newline46mondego>List<? super Integer> list2 = null;<newline46mondego>list1 = list2;  <newline46mondego>"
"2996splitHere46","20160355splitHere46","list1"
"2997splitHere46","20160355splitHere46","list2"
"2998splitHere46","20160355splitHere46","list2 = list1"
"2999splitHere46","20160355splitHere46","List<? super Integer>"
"3000splitHere46","20160355splitHere46","List<Integer>"
"3001splitHere46","20160355splitHere46","List<Number>"
"3002splitHere46","20160355splitHere46","List<Object>"
"3003splitHere46","20160355splitHere46","List<Serializable>"
"3004splitHere46","20160355splitHere46","List<Number>"
"3005splitHere46","20160355splitHere46","list2 = list1"
"3006splitHere46","20160355splitHere46","list1"
"3007splitHere46","20160355splitHere46","List<Number>"
"3008splitHere46","20160355splitHere46","list1 = list2"
"3009splitHere46","20160355splitHere46","List<Integer>"
"3010splitHere46","20160355splitHere46","List<Number>"
"3011splitHere46","20160355splitHere46","List<? super Number>"
"3012splitHere46","20160355splitHere46","List<Object>"
"3013splitHere46","20160355splitHere46","List<Serializable>"
"3014splitHere46","20160355splitHere46","List<Number>"
"3015splitHere46","20160355splitHere46","List<? extends Integer>"
"3016splitHere46","20160355splitHere46","List<Integer>"
"3017splitHere46","20160355splitHere46","List<Integer>"
"3018splitHere46","20160355splitHere46","List<? super Number>"
"3019splitHere46","20160355splitHere46","list1 = list2"
"3020splitHere46","20160355splitHere46","List<Object>"
"3021splitHere46","20160355splitHere46","List<? extends Integer>"
"3022splitHere46","20160355splitHere46","list2 = list1"
"3023splitHere46","20160363splitHere46","public AudioRecordTest() {<newline46mondego>    mFileName = Environment.getExternalStorageDirectory().getAbsolutePath();<newline46mondego>    mFileName += <doubleQuotes46>/audiorecordtest.3gp<doubleQuotes46>;<newline46mondego>}<newline46mondego>"
"3024splitHere46","20160363splitHere46","@Override<newline46mondego>public void onCreate(Bundle icicle) {<newline46mondego>    super.onCreate(icicle);<newline46mondego><newline46mondego>    //initialise the path here<newline46mondego>    mFileName = Environment.getExternalStorageDirectory().getAbsolutePath();<newline46mondego>    mFileName += <doubleQuotes46>/audiorecordtest.3gp<doubleQuotes46>;<newline46mondego><newline46mondego>    //rest of the code<newline46mondego>"
"3025splitHere46","20160453splitHere46","setLenient"
"3026splitHere46","20160453splitHere46","SimpleDateFormat"
"3027splitHere46","20160453splitHere46","SimpleDateFormat"
"3028splitHere46","20160453splitHere46","sdf.setLenient(false)"
"3029splitHere46","20160457splitHere46","public static void main (String[] args) throws FileNotFoundException {<newline46mondego>            Scanner sc = new Scanner(System.in);<newline46mondego>            System.out.print(<doubleQuotes46>Enter the input file name: <doubleQuotes46>);<newline46mondego>        String newfile = sc.nextLine() + <doubleQuotes46>.txt<doubleQuotes46>;<newline46mondego>}<newline46mondego>"
"3030splitHere46","20160465splitHere46","stampa()"
"3031splitHere46","20160465splitHere46","if(n==0) JOptionPane.showMessageDialog(null, combinazione);<newline46mondego>"
"3032splitHere46","20160465splitHere46","if (n < 1) {<newline46mondego>  JOptionPane.showMessageDialog(null,<newline46mondego>      combinazione.get(n));<newline46mondego>  return;<newline46mondego>}<newline46mondego>"
"3033splitHere46","20160480splitHere46","Book"
"3034splitHere46","20160480splitHere46","if (x.getName().equals(<doubleQuotes46>Book<doubleQuotes46>))<newline46mondego>"
"3035splitHere46","20160480splitHere46","Book"
"3036splitHere46","20160480splitHere46","bookName"
"3037splitHere46","20160480splitHere46","bookSection"
"3038splitHere46","20160480splitHere46","memorization"
"3039splitHere46","20160480splitHere46","START_TAG"
"3040splitHere46","20160480splitHere46","if (x.getName().equals(<doubleQuotes46>bookName<doubleQuotes46>)) {<newline46mondego>    seleccion.setBook(x.nextText());<newline46mondego>} else if (x.getName().equals(<doubleQuotes46>bookSection<doubleQuotes46>)) {<newline46mondego>    seleccion.setSection(x.nextText());<newline46mondego>} else if (x.getName().equals(<doubleQuotes46>memorization<doubleQuotes46>)) {<newline46mondego>    seleccion.setMemorization(x.nextText());<newline46mondego>}<newline46mondego>"
"3041splitHere46","20160480splitHere46","<x y=<doubleQuotes46>z<doubleQuotes46>>Foo</x><newline46mondego>"
"3042splitHere46","20160480splitHere46","<x>"
"3043splitHere46","20160480splitHere46","y"
"3044splitHere46","20160480splitHere46","<doubleQuotes46>z<doubleQuotes46>"
"3045splitHere46","20160480splitHere46","Foo"
"3046splitHere46","20160480splitHere46","x"
"3047splitHere46","20160580splitHere46","<animation-list xmlns:android=<doubleQuotes46>http://schemas.android.com/apk/res/android<doubleQuotes46><newline46mondego>    android:oneshot=<doubleQuotes46>true<doubleQuotes46>><newline46mondego>    <item android:drawable=<doubleQuotes46>@drawable/rocket_thrust1<doubleQuotes46> android:duration=<doubleQuotes46>200<doubleQuotes46> /><newline46mondego>    <item android:drawable=<doubleQuotes46>@drawable/rocket_thrust2<doubleQuotes46> android:duration=<doubleQuotes46>200<doubleQuotes46> /><newline46mondego>    <item android:drawable=<doubleQuotes46>@drawable/rocket_thrust3<doubleQuotes46> android:duration=<doubleQuotes46>200<doubleQuotes46> /><newline46mondego></animation-list><newline46mondego>"
"3048splitHere46","20160617splitHere46","public class main {<newline46mondego>    public static void main(String[] args) {<newline46mondego>        String filename = <doubleQuotes46>image.jpg<doubleQuotes46>;<newline46mondego>        String filenameArray[] = filename.split(<doubleQuotes46>\\.<doubleQuotes46>);<newline46mondego>        String extension = filenameArray[filenameArray.length-1];<newline46mondego>        System.out.println(extension);<newline46mondego>    }<newline46mondego>}<newline46mondego>"
"3049splitHere46","20160648splitHere46","import java.io.FileInputStream;<newline46mondego>import java.io.FileNotFoundException;<newline46mondego>import java.security.PublicKey;<newline46mondego>import java.security.cert.CertificateException;<newline46mondego>import java.security.cert.CertificateFactory;<newline46mondego>import java.security.cert.X509Certificate;<newline46mondego><newline46mondego>public static void main(String[] args) throws FileNotFoundException, CertificateException {<newline46mondego>         FileInputStream fin = new FileInputStream(<doubleQuotes46>C://Users/admin/Desktop/uidai_auth_stage.cer<doubleQuotes46>);<newline46mondego>         CertificateFactory f = CertificateFactory.getInstance(<doubleQuotes46>X.509<doubleQuotes46>);<newline46mondego>         X509Certificate certificate = (X509Certificate)f.generateCertificate(fin);<newline46mondego>         PublicKey pk = certificate.getPublicKey();<newline46mondego>         System.out.println(pk);<newline46mondego>    }<newline46mondego>"
"3050splitHere46","20160648splitHere46","Sun RSA public key, 2048 bits<newline46mondego>  modulus: 24997837043438188953607876466237786267538116823171823066632273818789601748586746440305433922940695151571735365523051675886995065116460565496861407875514773210269965513442232418015450789090428409276489545406694488823092308675874342532769927581914928367201662168201179961444037956523723476457691797490148453388604630304483861894406799761861931859139814624419421952118624143676117705606807289725313505871679662196624284199277807296317727434572557780473195825103383647653402128556252829571054599064686396724089686056490117328555759648852424450610766660552196304214260431235894942706902606159465251944070268033712979539561<newline46mondego>  public exponent: 65537<newline46mondego>"
"3051splitHere46","20160763splitHere46","HttpURLConnection"
"3052splitHere46","20160763splitHere46","HttpsURLConnection"
"3053splitHere46","20160763splitHere46","import java.net.URL;<newline46mondego>import java.util.List;<newline46mondego>import java.util.Map;<newline46mondego><newline46mondego>import javax.net.ssl.HttpsURLConnection;<newline46mondego><newline46mondego>public class Test<newline46mondego>{<newline46mondego><newline46mondego>    public static void main(String[] args) throws Exception<newline46mondego>    {<newline46mondego>        URL url = new URL(<doubleQuotes46>https://www.google.com<doubleQuotes46>);<newline46mondego>        HttpsURLConnection con = (HttpsURLConnection) url.openConnection();<newline46mondego>        Map<String,List<String>> fields = con.getHeaderFields();<newline46mondego>        con.disconnect();<newline46mondego>    }<newline46mondego>}<newline46mondego>"
"3054splitHere46","20160797splitHere46","Application"
"3055splitHere46","20160797splitHere46","java.lang.Thread"
"3056splitHere46","20160797splitHere46","run()"
"3057splitHere46","20160797splitHere46","Platform.runLater(new Runnable(){<newline46mondego>  @Override<newline46mondego>  public void run(){<newline46mondego>    // change your scene graph here<newline46mondego>  }<newline46mondego>});  <newline46mondego>"
"3058splitHere46","20160797splitHere46","Application"
"3059splitHere46","20160797splitHere46","javafx.concurrent.Service<V>"
"3060splitHere46","20160834splitHere46","HashMap"
"3061splitHere46","20160834splitHere46","HashMap"
"3062splitHere46","20160834splitHere46","HashMap"
"3063splitHere46","20160834splitHere46","HashMap"
"3064splitHere46","20160834splitHere46","HashMap"
"3065splitHere46","20160834splitHere46","HashMap"
"3066splitHere46","20160878splitHere46","SELECT *  <newline46mondego>FROM claz  <newline46mondego>WHERE student = 'somevalue'<newline46mondego>  AND date_column BETWEEN '2013/02/25' AND '2013/02/27'<newline46mondego>"
"3067splitHere46","20160878splitHere46","SELECT *  <newline46mondego>FROM claz  <newline46mondego>WHERE student = 'somevalue'<newline46mondego>  AND date_column >'2013/02/25' AND date_column <'2013/02/27'<newline46mondego>"
"3068splitHere46","20160885splitHere46","&&"
"3069splitHere46","20160885splitHere46","||"
"3070splitHere46","20160885splitHere46","&"
"3071splitHere46","20160885splitHere46","|"
"3072splitHere46","20160885splitHere46","&&"
"3073splitHere46","20160885splitHere46","||"
"3074splitHere46","20160885splitHere46","&"
"3075splitHere46","20160885splitHere46","|"
"3076splitHere46","20160891splitHere46","log4j.appender.<your appender>.Append=false<newline46mondego>"
"3077splitHere46","20160927splitHere46","if"
"3078splitHere46","20160927splitHere46","true"
"3079splitHere46","20160927splitHere46","if (c.getName().equals(nameSearch))  {<newline46mondego>  System.out.println( it.next().toString());      <newline46mondego> return;<newline46mondego>}<newline46mondego>"
"3080splitHere46","20160927splitHere46","System.out"
"3081splitHere46","20160927splitHere46","return"
"3082splitHere46","20161169splitHere46","double"
"3083splitHere46","20161169splitHere46","String[] weight=new String[(int)N];<newline46mondego>"
"3084splitHere46","20161169splitHere46","double"
"3085splitHere46","20161169splitHere46","length"
"3086splitHere46","20161189splitHere46","{"
"3087splitHere46","20161189splitHere46","{"
"3088splitHere46","20161189splitHere46","}"
"3089splitHere46","20161189splitHere46","$"
"3090splitHere46","20161189splitHere46","Pattern pattern = Pattern.compile(<doubleQuotes46>value=\<doubleQuotes46>\\$\\{(.*?)\\}<doubleQuotes46>);<newline46mondego>"
"3091splitHere46","20161189splitHere46","matcher.find()"
"3092splitHere46","20161189splitHere46","if (matcher.find()) {    <newline46mondego>    System.out.println(matcher.group(1));<newline46mondego>}<newline46mondego>"
"3093splitHere46","20161199splitHere46","db = helper.getReadableDatabase();"
"3094splitHere46","20161199splitHere46","helper"
"3095splitHere46","20161199splitHere46","java.lang.IllegalArgumentException: column '_id' does not exist"
"3096splitHere46","20161199splitHere46","_id INTEGER PRIMARY KEY AUTOINCREMENT"
"3097splitHere46","20161199splitHere46","<doubleQuotes46>CREATE TABLE IF NOT EXISTS TABLE_NAME( _id INTEGER PRIMARY KEY AUTOINCREMENT,  ...);<doubleQuotes46><newline46mondego>"
"3098splitHere46","20161565splitHere46","register"
"3099splitHere46","20161565splitHere46","setOnClickListener"
"3100splitHere46","20161565splitHere46","register.setOnClickListener(new View.OnClickListener() {<newline46mondego><newline46mondego>    @Override<newline46mondego>    public void onClick(View v) {<newline46mondego>        // TODO Auto-generated method stub<newline46mondego>        Intent intent = new Intent(Login.this, Register.class);<newline46mondego>        startActivity(intent);<newline46mondego>    }<newline46mondego>});<newline46mondego>"
"3101splitHere46","20161565splitHere46","<activity<newline46mondego>    android:name=<doubleQuotes46>.Register<doubleQuotes46><newline46mondego>    android:label=<doubleQuotes46>@string/app_name<doubleQuotes46>><newline46mondego></activity><newline46mondego>"
"3102splitHere46","20161619splitHere46","Object"
"3103splitHere46","20161619splitHere46","Object"
"3104splitHere46","20161682splitHere46","@Pattern.List"
"3105splitHere46","20161682splitHere46","@Pattern.List"
"3106splitHere46","20161682splitHere46","(...)?"
"3107splitHere46","20161682splitHere46","@NotNull<newline46mondego>@Pattern(regexp=<doubleQuotes46>[A-Z][a-z]+(\\s[A-Z][a-z]+)?<doubleQuotes46>, message=<doubleQuotes46>Name contains invalid characters.<doubleQuotes46>)<newline46mondego>public String getName() {<newline46mondego>    return name;<newline46mondego>}<newline46mondego>"
"3108splitHere46","20161757splitHere46","validate"
"3109splitHere46","20161757splitHere46","validate"
"3110splitHere46","20161757splitHere46","ActionSupport"
"3111splitHere46","20161757splitHere46","validate()"
"3112splitHere46","20161757splitHere46","public void validateLogin() {    <newline46mondego>   //This is for login action   <newline46mondego>   if(login == null) {<newline46mondego>     addActionError(<doubleQuotes46>Login is null<doubleQuotes46>); <newline46mondego>   } else            <newline46mondego>   if(<doubleQuotes46>foobar<doubleQuotes46>.equals(login.getPassword()){<newline46mondego>     addActionMessage(SUCCESS); <newline46mondego>   } else {<newline46mondego>     addFieldError(<doubleQuotes46>Password<doubleQuotes46>, <doubleQuotes46>Password should be greater then 6<doubleQuotes46>); <newline46mondego>   }   <newline46mondego> }   <newline46mondego><newline46mondego><newline46mondego> public void validateRegister() {<newline46mondego>   //This is for registration action<newline46mondego>   if(user == null) {  <newline46mondego>     addActionError(<doubleQuotes46>User is null<doubleQuotes46>); <newline46mondego>   } else            <newline46mondego>   if(user.getPassword() == null || user.getPassword().length() < 6) {<newline46mondego>     addFieldError(<doubleQuotes46>Password<doubleQuotes46>, <doubleQuotes46>Password should be greater then 6<doubleQuotes46>); <newline46mondego>   } <newline46mondego><newline46mondego> }    <newline46mondego>"
"3113splitHere46","20161761splitHere46","protected"
"3114splitHere46","20161761splitHere46","android.app.ActivityManager"
"3115splitHere46","20161761splitHere46","public"
"3116splitHere46","20161761splitHere46","protected"
"3117splitHere46","20161761splitHere46","public"
"3118splitHere46","20161779splitHere46","if(boom)<newline46mondego>{<newline46mondego>    t1 = Time.current();  //t1 is now the current time<newline46mondego>    t2 = Time.current() + 30000L; //t2 is now the current time + 5 minutes<newline46mondego>    if(t1 < t2) //Is t1 smaller then t2? Yes it is!<newline46mondego>        MarkTarget(); //call the function<newline46mondego>    //Anything else? no so we will have had 1 call to it<newline46mondego>}<newline46mondego>"
"3119splitHere46","20161779splitHere46","if (boom)<newline46mondego>{<newline46mondego>    t1 = Time.current();<newline46mondego>    t2 = t1 + 30000L;<newline46mondego>    while (t1 < t2) {<newline46mondego>        MarkTarget();<newline46mondego>        t1 = Time.current();<newline46mondego>    }<newline46mondego>}<newline46mondego>"
"3120splitHere46","20161779splitHere46","MarkTarget();<newline46mondego>while (t1 < t2) {<newline46mondego>    t1 = Time.current();<newline46mondego>}<newline46mondego>"
"3121splitHere46","20161847splitHere46","public static final class OsUtils<newline46mondego>{<newline46mondego>   private static String OS = null;<newline46mondego>   public static String getOsName()<newline46mondego>   {<newline46mondego>      if(OS == null) { OS = System.getProperty(<doubleQuotes46>os.name<doubleQuotes46>); }<newline46mondego>      return OS;<newline46mondego>   }<newline46mondego>   public static boolean isWindows()<newline46mondego>   {<newline46mondego>      return getOsName().startsWith(<doubleQuotes46>Windows<doubleQuotes46>);<newline46mondego>   }<newline46mondego><newline46mondego>   public static boolean isUnix() // and so on<newline46mondego>}<newline46mondego>"
"3122splitHere46","20161865splitHere46","name"
"3123splitHere46","20161865splitHere46","Name"
"3124splitHere46","20161865splitHere46","<p>User name is ${user.name}</p>"
"3125splitHere46","20161865splitHere46","<c:out value=<doubleQuotes46>${user.name}<doubleQuotes46>></c:out>"
"3126splitHere46","20161865splitHere46","$"
"3127splitHere46","20161865splitHere46","<c:out>"
"3128splitHere46","20161871splitHere46","Event Dispatch Thread(EDT)"
"3129splitHere46","20161871splitHere46","Thread.sleep(5000);<newline46mondego>"
"3130splitHere46","20161871splitHere46","NullLayout"
"3131splitHere46","20161871splitHere46","frame"
"3132splitHere46","20161871splitHere46","setVisible(true)"
"3133splitHere46","20161871splitHere46","SwingUtilities.invokeLater"
"3134splitHere46","20161871splitHere46","SwingUtilities.invokeLater(new Runnable() {<newline46mondego><newline46mondego>        @Override<newline46mondego>        public void run() {<newline46mondego>           new MyWindow().setVisible(true);<newline46mondego>        }<newline46mondego>    });<newline46mondego>"
"3135splitHere46","20161871splitHere46","Card Layout"
"3136splitHere46","20161871splitHere46","Andrew Thompson"
"3137splitHere46","20161897splitHere46","BufferedWriter"
"3138splitHere46","20161897splitHere46","BufferedWriter"
"3139splitHere46","20161897splitHere46","decorates"
"3140splitHere46","20161897splitHere46","BufferedWriter"
"3141splitHere46","20161897splitHere46","BufferedWriter"
"3142splitHere46","20161940splitHere46","UTF-16"
"3143splitHere46","20161940splitHere46","Charset"
"3144splitHere46","20161940splitHere46","UTF-16BE"
"3145splitHere46","20161940splitHere46","System.out.println(<doubleQuotes46>A<doubleQuotes46>.getBytes(<doubleQuotes46>UTF-16BE<doubleQuotes46>).length);   // 2 (2 + 2 with UTF-16)<newline46mondego>System.out.println(<doubleQuotes46>AA<doubleQuotes46>.getBytes(<doubleQuotes46>UTF-16BE<doubleQuotes46>).length);  // 4 (2 + 4 with UTF-16)<newline46mondego>System.out.println(<doubleQuotes46>AAA<doubleQuotes46>.getBytes(<doubleQuotes46>UTF-16BE<doubleQuotes46>).length); // 6 (2 + 6 with UTF-16)<newline46mondego>"
"3146splitHere46","20162059splitHere46","groovyc"
"3147splitHere46","20162059splitHere46","java"
"3148splitHere46","20162059splitHere46","groovy-all.jar"
"3149splitHere46","20162059splitHere46","$ groovyc Fib.groovy<newline46mondego>"
"3150splitHere46","20162059splitHere46","$ java -cp $GROOVY_HOME/embeddable/groovy-all-2.2.0.jar:classes Fib<newline46mondego>"
"3151splitHere46","20162059splitHere46","$ java -cp $GROOVY_HOME/embeddable/groovy-all-2.2.0.jar:. Fib<newline46mondego>test for fib<newline46mondego>"
"3152splitHere46","20162059splitHere46","fibonacci"
"3153splitHere46","20162059splitHere46","package up.foo<newline46mondego>println <doubleQuotes46>test for fib<doubleQuotes46><newline46mondego>"
"3154splitHere46","20162059splitHere46","$ groovyc Fib.groovy<newline46mondego>"
"3155splitHere46","20162059splitHere46","$ java -cp $GROOVY_HOME/embeddable/groovy-all-2.2.0.jar:. up.foo.Fib<newline46mondego>"
"3156splitHere46","20162059splitHere46","test for fib<newline46mondego>"
"3157splitHere46","20162074splitHere46","registerFunction(<doubleQuotes46>fn_concatTerritory<doubleQuotes46>, new StandardSQLFunction(<doubleQuotes46>dbo.fn_concatTerritory<doubleQuotes46>,StandardBasicTypes.STRING));<newline46mondego>"
"3158splitHere46","20162074splitHere46","registerFunction(<doubleQuotes46>fn_concatterritory<doubleQuotes46>, new StandardSQLFunction(<doubleQuotes46>dbo.fn_concatterritory<doubleQuotes46>,StandardBasicTypes.STRING));<newline46mondego>"
"3159splitHere46","20162075splitHere46","new Thread"
"3160splitHere46","20162075splitHere46","Thread"
"3161splitHere46","20162075splitHere46","start()"
"3162splitHere46","20162075splitHere46","Thread"
"3163splitHere46","20162075splitHere46","Thread"
"3164splitHere46","20162075splitHere46","threads[i] = new Thread() {<newline46mondego>   @Override public void run() {<newline46mondego>     doSomeWork();<newline46mondego>   }<newline46mondego>};<newline46mondego>threads[i].start();<newline46mondego>"
"3165splitHere46","20162075splitHere46","threads[i] = new Thread(new Runnable() {<newline46mondego>   @Override public void run() {<newline46mondego>     doSomeWork();<newline46mondego>   }<newline46mondego>});<newline46mondego>threads[i].start();<newline46mondego>"
"3166splitHere46","20162100splitHere46","0x0001"
"3167splitHere46","20162100splitHere46","0b00000001"
"3168splitHere46","20162100splitHere46","00000001"
"3169splitHere46","20162100splitHere46","1"
"3170splitHere46","20162100splitHere46","0x0111"
"3171splitHere46","20162100splitHere46","0b00000001 00010001"
"3172splitHere46","20162100splitHere46","11000100 10010001"
"3173splitHere46","20162100splitHere46","-60 -111"
"3174splitHere46","20162100splitHere46","0x1111"
"3175splitHere46","20162100splitHere46","0b00010001 00010001"
"3176splitHere46","20162100splitHere46","11100001 11100001 10010001"
"3177splitHere46","20162100splitHere46","-31 -124 -111"
"3178splitHere46","20162199splitHere46","@Override<newline46mondego>public int compare(Integer i1, Integer i2) {<newline46mondego>    long l1 = participants.get(i1).kpTime.get(kpSelected); <newline46mondego>    long l2 = participants.get(i2).kpTime.get(kpSelected);<newline46mondego>    return Long.compare(l1, l2);<newline46mondego>}<newline46mondego>"
"3179splitHere46","20162249splitHere46","str.substring(i, j-i)"
"3180splitHere46","20162249splitHere46","substring(beginIndex, endIndex)"
"3181splitHere46","20162249splitHere46","substring(beginIndex, lengthOfNewString)"
"3182splitHere46","20162249splitHere46","endIndex"
"3183splitHere46","20162249splitHere46","beginIndex"
"3184splitHere46","20162249splitHere46","StringIndexOutOfBoundsException"
"3185splitHere46","20162249splitHere46","str.substring(i, j)"
"3186splitHere46","20162249splitHere46","size"
"3187splitHere46","20162249splitHere46","str"
"3188splitHere46","20162249splitHere46","for (int i = 0; i <= size; i++)<newline46mondego>"
"3189splitHere46","20162249splitHere46","for (int i = 0; i < size; i++)<newline46mondego>"
"3190splitHere46","20162295splitHere46","paintComponent()"
"3191splitHere46","20162295splitHere46","super.paintComponent(g);"
"3192splitHere46","20162295splitHere46","Image"
"3193splitHere46","20162295splitHere46","BufferedImage"
"3194splitHere46","20162295splitHere46","ImageIO"
"3195splitHere46","20162295splitHere46","Image"
"3196splitHere46","20162295splitHere46","new ImageIcon(<doubleQuotes46>cat2.jpg<doubleQuotes46>).getImage();"
"3197splitHere46","20162295splitHere46","URL"
"3198splitHere46","20162295splitHere46","class DrawPanel extends JPanel {<newline46mondego>    private BufferedImage image;<newline46mondego><newline46mondego>    public DrawPanel() {<newline46mondego>        URL resource = getClass().getResource(<doubleQuotes46>cat2.jpg<doubleQuotes46>);<newline46mondego>        try {<newline46mondego>            image = ImageIO.read(resource);<newline46mondego>        } catch (IOException e) {<newline46mondego>            e.printStackTrace();<newline46mondego>        }<newline46mondego>    }<newline46mondego><newline46mondego>    public void paintComponent(Graphics g) {<newline46mondego>        super.paintComponent(g);<newline46mondego>        g.drawImage(image, 3, 4, this);<newline46mondego>    }<newline46mondego>}<newline46mondego>"
"3199splitHere46","20162304splitHere46","class SimpleComparator implements Comparator<Couple<URL, Integer>> {<newline46mondego>    public int compare(Couple<URL, Integer> a, Couple<URL, Integer> b) {<newline46mondego>        return a.second.compareTo(b.second); <newline46mondego>    }<newline46mondego>}<newline46mondego>"
"3200splitHere46","20162304splitHere46","Collections.sort(a,new SimpleComparator()); // now a is sorted based on second value.       <newline46mondego>"
"3201splitHere46","20162317splitHere46","public static void main(String[]args){<newline46mondego>         int[] intArray=new int[]{1,2};   //took sample elements<newline46mondego>         int sum = calculateSum(intArray); // create an array and pass here.<newline46mondego>      }<newline46mondego>"
"3202splitHere46","20162344splitHere46","char"
"3203splitHere46","20162344splitHere46","length()"
"3204splitHere46","20162344splitHere46","codePointCount"
"3205splitHere46","20162383splitHere46","Course.student"
"3206splitHere46","20162383splitHere46","students"
"3207splitHere46","20162383splitHere46","Student.course"
"3208splitHere46","20162383splitHere46","courses"
"3209splitHere46","20162383splitHere46","c.getStudents().add(student)"
"3210splitHere46","20162423splitHere46","class PrimaryHighway extends Highway"
"3211splitHere46","20162423splitHere46","render()"
"3212splitHere46","20162423splitHere46","render()"
"3213splitHere46","20162423splitHere46","Drawable"
"3214splitHere46","20162423splitHere46","render()"
"3215splitHere46","20162433splitHere46","answer"
"3216splitHere46","20162433splitHere46","while(answer!=-33)<newline46mondego>    {<newline46mondego>        if (answer == 1)<newline46mondego>        {<newline46mondego>            votescount[0] = votescount[0]+1;<newline46mondego>        }<newline46mondego>        else if (answer == 2)<newline46mondego>        {<newline46mondego>            votescount[1] = votescount[1]+1;<newline46mondego>        }<newline46mondego>        else if (answer == 3)<newline46mondego>        {<newline46mondego>            votescount[2] = votescount[2]+1;<newline46mondego>        }<newline46mondego>        else if (answer == 4)<newline46mondego>        {<newline46mondego>            votescount[3] = votescount[3]+1;<newline46mondego>        }<newline46mondego>        else<newline46mondego>        {<newline46mondego>            JOptionPane.showMessageDialog(null, <doubleQuotes46>Vote for one of these four paintings!<doubleQuotes46>);<newline46mondego>        }<newline46mondego>        JOptionPane.showMessageDialog<newline46mondego>        (null, <doubleQuotes46>The current votes are<doubleQuotes46> + <doubleQuotes46>\n<doubleQuotes46> +<newline46mondego>        votescount[0] + <doubleQuotes46> :<doubleQuotes46> + painting[0] + <doubleQuotes46>\n<doubleQuotes46> +<newline46mondego>        votescount[1] + <doubleQuotes46> :<doubleQuotes46> + painting[1] + <doubleQuotes46>\n<doubleQuotes46> + <newline46mondego>        votescount[2] + <doubleQuotes46> :<doubleQuotes46> + painting[2] + <doubleQuotes46>\n<doubleQuotes46> +<newline46mondego>        votescount[3] + <doubleQuotes46> :<doubleQuotes46> + painting[3]);<newline46mondego><newline46mondego>        userinput = JOptionPane.showInputDialog<newline46mondego>        (<doubleQuotes46>Please tell us which painting you think is the best.<doubleQuotes46>+<doubleQuotes46>\n<doubleQuotes46>+<newline46mondego>        <doubleQuotes46>Vote 1 <doubleQuotes46>+painting[0]+<doubleQuotes46>\n<doubleQuotes46>+<newline46mondego>        <doubleQuotes46>Vote 2 <doubleQuotes46>+painting[1]+<doubleQuotes46>\n<doubleQuotes46>+<newline46mondego>        <doubleQuotes46>Vote 3 <doubleQuotes46>+painting[2]+<doubleQuotes46>\n<doubleQuotes46>+<newline46mondego>        <doubleQuotes46>Vote 4 <doubleQuotes46>+painting[3]);<newline46mondego><newline46mondego>        answer = Integer.parseInt(userinput);<newline46mondego>   }//ENDS LOOP<newline46mondego>"
"3217splitHere46","20162512splitHere46","java MyTool -xyz -a someArg --aaa=someArg --bbb=someArg --ccc=someArg<newline46mondego>"
"3218splitHere46","20162525splitHere46","Parcelable"
"3219splitHere46","20162525splitHere46","EdgeList"
"3220splitHere46","20162525splitHere46","EdgeList"
"3221splitHere46","20162525splitHere46","Vertex"
"3222splitHere46","20162525splitHere46","public List<Edge> adjacencies = new ArrayList<Edge>();<newline46mondego><newline46mondego>public Edge(Parcel in) {<newline46mondego>    name = in.getString();<newline46mondego>    minDistance = in.getDouble();<newline46mondego>    adjancencies = in.readParcelableArray(Edge.getClass().getClassLoader()); <newline46mondego>}<newline46mondego><newline46mondego>@Override<newline46mondego>public void writeToParcel(Parcel dest, int flags) {<newline46mondego>    dest.writeString(name);<newline46mondego>    dest.writeDouble(minDistance);<newline46mondego>    pc.writeParcelableArray((ArrayList<? extends Parcelable>) adjacencies, flags);<newline46mondego><newline46mondego>}<newline46mondego>"
"3223splitHere46","20162525splitHere46","Vertex"
"3224splitHere46","20162525splitHere46","Edge"
"3225splitHere46","20162525splitHere46","Edge"
"3226splitHere46","20162525splitHere46","Vertex"
"3227splitHere46","20162525splitHere46","writeToParcel()"
"3228splitHere46","20162525splitHere46","public class Edge implements Parcelable {<newline46mondego><newline46mondego>    private Vertex from;<newline46mondego>    private Vertex target;<newline46mondego>    private double weigth;<newline46mondego><newline46mondego>    static HashMap<Long, Vertex> _parentsFrom = new HashMap<Long, Vertex>();<newline46mondego>    static HashMap<Long, Vertex> _parentsTarget = new HashMap<Long, Vertex>();<newline46mondego><newline46mondego>    public long get_PKhash() { /* Return a unique identifier of your Edge object here */ }<newline46mondego><newline46mondego>    private ItemClass( Parcel in ) {<newline46mondego>        (...)<newline46mondego>        assertTrue( (from = _parentsFrom.remove( get_PKhash() )) != null );<newline46mondego>        assertTrue( (target = _parentsTarget.remove( get_PKhash() )) != null );<newline46mondego>    }<newline46mondego><newline46mondego>    public void writeToParcel( Parcel p, int args ) {<newline46mondego>        (...)//Don't write to the parcel your from and target objects<newline46mondego>        _parentsFrom.put( this.get_PKhash, from);<newline46mondego>        _parentsTarget.put( this.get_PKhash, to);<newline46mondego>    }<newline46mondego>}   <newline46mondego>"
"3229splitHere46","20162525splitHere46","Parcelable"
"3230splitHere46","20162600splitHere46","System.load()"
"3231splitHere46","20162600splitHere46","RegisterNatives()"
"3232splitHere46","20162600splitHere46","JNI_OnLoad()"
"3233splitHere46","20162600splitHere46","javah"
"3234splitHere46","20162600splitHere46","RegisterNatives()"
"3235splitHere46","20162600splitHere46","RegisterNatives()"
"3236splitHere46","20162600splitHere46","UnregisterNatives()"
"3237splitHere46","20162600splitHere46","SwitchPlugin() {<newline46mondego>    UnregisterNatives();<newline46mondego>    unloadPlugin(oldHandle);<newline46mondego>    newHandle = loadPlugin(newPluginName);<newline46mondego>    RegisterNatives();<newline46mondego>}<newline46mondego>"
"3238splitHere46","20162600splitHere46","UnregisterNatives()"
"3239splitHere46","20162639splitHere46","java.util.Scanner input = new java.util.Scanner(System.in);<newline46mondego>String s = input.next();  <newline46mondego>int n = s.length();<newline46mondego>"
"3240splitHere46","20162650splitHere46","this.title = s;<newline46mondego>"
"3241splitHere46","20162650splitHere46","title"
"3242splitHere46","20162650splitHere46","ArrayList"
"3243splitHere46","20162650splitHere46","s"
"3244splitHere46","20162650splitHere46","public ArrayList<String> title;<newline46mondego>"
"3245splitHere46","20162650splitHere46","public String title;<newline46mondego>"
"3246splitHere46","20162650splitHere46","title"
"3247splitHere46","20162650splitHere46","list"
"3248splitHere46","20162650splitHere46","String"
"3249splitHere46","20162650splitHere46","List"
"3250splitHere46","20162650splitHere46","public Tweet(ArrayList<String> title) {<newline46mondego>        super();      <newline46mondego>        this.title = title;<newline46mondego>    }<newline46mondego>"
"3251splitHere46","20162675splitHere46","<a href=<doubleQuotes46>${pageContext.request.contextPath}/clients/${c.id}.htm<doubleQuotes46>>...</a><newline46mondego>"
"3252splitHere46","20162675splitHere46","<form:form method=<doubleQuotes46>post<doubleQuotes46><newline46mondego>           action=<doubleQuotes46>clientsNavigate.htm<doubleQuotes46><newline46mondego>"
"3253splitHere46","20162675splitHere46","<form:form method=<doubleQuotes46>post<doubleQuotes46><newline46mondego>           action=<doubleQuotes46>${pageContext.request.contextPath}/clientsNavigate.htm<doubleQuotes46> ...<newline46mondego>"
"3254splitHere46","20162675splitHere46","c:url"
"3255splitHere46","20162675splitHere46","<c:url var=<doubleQuotes46>navFormUrl<doubleQuotes46> value= <doubleQuotes46>/clientsNavigate.htm<doubleQuotes46> /><newline46mondego><form:form method=<doubleQuotes46>post<doubleQuotes46> action=<doubleQuotes46>${navFormUrl}<doubleQuotes46> ...<newline46mondego>"
"3256splitHere46","20162705splitHere46","setupSubTexture"
"3257splitHere46","20162705splitHere46","public TradeInDialog(Database _db) throws SQLException<newline46mondego>{<newline46mondego>    selectedTexture = 1;<newline46mondego>    setupSubTexture();<newline46mondego>    setupTexture();<newline46mondego><newline46mondego>    cbTexture.addItemListener(new ItemListener() {<newline46mondego><newline46mondego>        public void itemStateChanged(ItemEvent e) {<newline46mondego><newline46mondego>            if(e.getStateChange() == ItemEvent.SELECTED) {<newline46mondego>                selectedTexture = cbTexture.getSelectedIndex()+1;<newline46mondego>                setupSubTexture();<newline46mondego>        }<newline46mondego>    });<newline46mondego><newline46mondego>    cbTexture.setSelectedIndex(0);<newline46mondego>}<newline46mondego>"
"3258splitHere46","20162769splitHere46","array_bytes.length"
"3259splitHere46","20162769splitHere46","number_bytesread += array_bytes.length;<newline46mondego>"
"3260splitHere46","20162769splitHere46","number_bytesread += nread;<newline46mondego>"
"3261splitHere46","20162769splitHere46","nread"
"3262splitHere46","20162769splitHere46","send_package"
"3263splitHere46","20162769splitHere46","arrayBytes"
"3264splitHere46","20162769splitHere46","array_bytes"
"3265splitHere46","20162769splitHere46","buffer"
"3266splitHere46","20162769splitHere46","data"
"3267splitHere46","20162913splitHere46","ThreadLocal"
"3268splitHere46","20162913splitHere46","ThreadLocal#remove()"
"3269splitHere46","20162913splitHere46","ThreadLocal"
"3270splitHere46","20162913splitHere46","Thread"
"3271splitHere46","20162913splitHere46","Thread"
"3272splitHere46","20162958splitHere46","for (int i = 0; i < particularRadioGroup.getChildCount(); i++) {<newline46mondego>    RadioButton childAt = (RadioButton) particularRadioGroup.getChildAt(i);<newline46mondego>    boolean checked = childAt.isChecked();<newline46mondego>    int id = childAt.getId();<newline46mondego>    String text = childAt.getText().toString();<newline46mondego>    // Save the Data of the RadioButton of the Particluar RadioGroup<newline46mondego>    // Save Here<newline46mondego>}<newline46mondego>"
"3273splitHere46","20162978splitHere46","for(PirateDictionary w: words){<newline46mondego><newline46mondego>    nameSearch = w.toString();<newline46mondego>    Iterator<Phrase> it = phrases.iterator();<newline46mondego>    boolean found = false;<newline46mondego><newline46mondego>    while(it.hasNext() && !found) {<newline46mondego><newline46mondego>       Phrase c = it.next();<newline46mondego><newline46mondego>       if (c.getName().equals(nameSearch))  {<newline46mondego>           System.out.println( c.getName());<newline46mondego>           found = true;<newline46mondego>       }<newline46mondego>    }<newline46mondego><newline46mondego>    if (!found)<newline46mondego>        System.out.println(w.toString());<newline46mondego>}<newline46mondego>"
"3274splitHere46","20162978splitHere46","boolean"
"3275splitHere46","20162978splitHere46","it.next()"
"3276splitHere46","20162984splitHere46","JOptionPane"
"3277splitHere46","20162984splitHere46","OK_CANCEL_OPTION"
"3278splitHere46","20162984splitHere46","JOptionPane.OK_CANCEL_OPTION"
"3279splitHere46","20162984splitHere46","JOptionPane"
"3280splitHere46","20162984splitHere46","int choice = showConfirmDialog(Marathon.this, reg, <doubleQuotes46>New participant<doubleQuotes46>, JOptionPane.OK_CANCEL_OPTION);<newline46mondego>    if (choice != JOptionPane.OK_OPTION){ ... }<newline46mondego>"
"3281splitHere46","20163035splitHere46","// to test singleton<newline46mondego>    BeanDefinitionRegistry registry = (BeanDefinitionRegistry)applicationContext.getAutowireCapableBeanFactory();                                                                                                                                                                                                          <newline46mondego>    // registry.getBeanDefinition(<doubleQuotes46>myBean<doubleQuotes46>).setScope(<doubleQuotes46>prototype<doubleQuotes46>); <-- removed this<newline46mondego>    BeanDefinition def = registry.getBeanDefinition(<doubleQuotes46>myBean<doubleQuotes46>);<newline46mondego>    def.setScope(<doubleQuotes46>prototype<doubleQuotes46>); // or `singleton`                                                                                                                                                                                                                                                                                             <newline46mondego>    registry.registerBeanDefinition(<doubleQuotes46>myBean<doubleQuotes46>, def);<newline46mondego><newline46mondego>    // it's called from separate thread<newline46mondego>    MyBean myBean = applicationContext.getBean(<doubleQuotes46>myBean<doubleQuotes46>);<newline46mondego>"
"3282splitHere46","20163055splitHere46","new File(<doubleQuotes46>abc.txt<doubleQuotes46>)<newline46mondego>"
"3283splitHere46","20163055splitHere46","abc.txt"
"3284splitHere46","20163055splitHere46","c:\foo\bar"
"3285splitHere46","20163055splitHere46","java -cp d:\java\app\MyApplication.jar MyApplication"
"3286splitHere46","20163055splitHere46","c:\foo\bar"
"3287splitHere46","20163096splitHere46","ui.staafdiagram.StaafDiagramPanel"
"3288splitHere46","20163096splitHere46","System.setErr(new PrintStream(new OutputStream() {<newline46mondego>    public void write(int b) throws IOException {<newline46mondego>        //nothing<newline46mondego>    }<newline46mondego>}));<newline46mondego>throw new RuntimeException(<doubleQuotes46>test<doubleQuotes46>); //this should not be printed, ever.<newline46mondego>"
"3289splitHere46","20163107splitHere46","synchronized"
"3290splitHere46","20163107splitHere46","synchronized"
"3291splitHere46","20163107splitHere46","synchronized"
"3292splitHere46","20163182splitHere46","Long.valueOf(l1).compareTo(Long.valueOf(l2));<newline46mondego>"
"3293splitHere46","20163248splitHere46","Runtime#addShutdownHook()"
"3294splitHere46","20163248splitHere46","Runtime.getRuntime().addShutdownHook(new Thread() {<newline46mondego>    public void run() {<newline46mondego>        es.shutdown();<newline46mondego>        try {<newline46mondego>            es.awaitTermination(5, TimeUnit.SECONDS);<newline46mondego>        } catch (InterruptedException e) {<newline46mondego>            logger.info(<doubleQuotes46>during await<doubleQuotes46>,e);<newline46mondego>        }<newline46mondego>    }<newline46mondego>});<newline46mondego>"
"3295splitHere46","20163321splitHere46","int diceRoll = ..."
"3296splitHere46","20163321splitHere46","diceRoll = dice.nextInt(6) + 1;<newline46mondego>innings[0] =+ diceRoll;<newline46mondego>"
"3297splitHere46","20163321splitHere46","innings[0] =+ diceRoll;<newline46mondego>diceRoll = dice.nextInt(6) + 1;<newline46mondego>"
"3298splitHere46","20163327splitHere46","public class Application<newline46mondego>{<newline46mondego>    public static void main(String [] args)<newline46mondego>    {<newline46mondego>        DerivedDataset1 dataset = new DerivedDataset1();<newline46mondego>        BaseMeasure<DerivedDataset1> measure = new DerivedMeasure1();<newline46mondego>        SocialNetworkBuilder socialNetworkBuilder = new SocialNetworkBuilder();<newline46mondego>        socialNetworkBuilder.build(dataset, measure);<newline46mondego>    }<newline46mondego>}<newline46mondego>"
"3299splitHere46","20163331splitHere46","public Tweet(ArrayList<String> title) {<newline46mondego>    super();<newline46mondego>    for(String s : title)<newline46mondego>    this.title = s;<newline46mondego>}<newline46mondego>"
"3300splitHere46","20163331splitHere46","public Tweet(String title) {<newline46mondego>    this.title = title;<newline46mondego>} <newline46mondego>"
"3301splitHere46","20163331splitHere46","List<Tweet> tweets = new ArratList<Tweet>();<newline46mondego>for (String s: statusListTextOnly)<newline46mondego>    tweets.add(new Tweet(s))<newline46mondego>"
"3302splitHere46","20163331splitHere46","tweets"
"3303splitHere46","20163539splitHere46","String model = (<doubleQuotes46><doubleQuotes46>+modeltoken[1]);<newline46mondego>"
"3304splitHere46","20163539splitHere46","String model = <doubleQuotes46>No Data In File<doubleQuotes46>;<newline46mondego><newline46mondego>if(modeltoken.length < 2)<newline46mondego>System.err.println(<doubleQuotes46>modeltoken has less than 2 elements. Size is:<doubleQuotes46>+String.valueOf(smodeltoken.length));<newline46mondego>else<newline46mondego>model = (<doubleQuotes46><doubleQuotes46>+modeltoken[1]);<newline46mondego>"
"3305splitHere46","20163557splitHere46","// Map with the longest word for each letter<newline46mondego>Map<Character, String> longestWordMap = new HashMap<Character, String>();<newline46mondego>// Map with the word with highest occurrences of each letter<newline46mondego>Map<Character, String> mostCharsWordMap = new HashMap<Character, String>();<newline46mondego><newline46mondego>while((word = br.readLine()) != null) { {<newline46mondego>    word = word.toLowerCase();<newline46mondego>    Character beginning = word.charAt(0);<newline46mondego>    String longestWord = longestWordMap.get(beginning);<newline46mondego>    // If the current word is the longest, put the word in the map<newline46mondego>    if (longestWord == null || word.length() > longestWord.length()) {<newline46mondego>            longestWordMap.put(beginning, word);<newline46mondego>    }<newline46mondego>    for (char letter = 'a'; letter <= 'z'; letter++) {<newline46mondego>        String mostCharsWord = mostCharsWordMap.get(Character.valueOf(letter));<newline46mondego>        if (mostCharsWord == null || <newline46mondego>            characterCount(letter, word) > characterCount(letter, mostCharsWord)) {<newline46mondego>            mostCharsWordMap.put(Character.valueOf(letter), word);<newline46mondego>        }<newline46mondego>    }<newline46mondego>}<newline46mondego>"
"3306splitHere46","20163557splitHere46","public static int characterCount(char letter, String word) {<newline46mondego>    int characterCount = 0;<newline46mondego>    for (char c : word.toCharArray()) {<newline46mondego>        if (c == letter) {<newline46mondego>            characterCount++;<newline46mondego>        }<newline46mondego>    }<newline46mondego>    return characterCount;<newline46mondego>}<newline46mondego>"
"3307splitHere46","20163590splitHere46","current"
"3308splitHere46","20163590splitHere46","SList.this.head"
"3309splitHere46","20163590splitHere46","head"
"3310splitHere46","20163590splitHere46","this"
"3311splitHere46","20163590splitHere46","@Override<newline46mondego>public Iterator<A> iterator() {<newline46mondego>    return new MyListIterator();<newline46mondego>}<newline46mondego><newline46mondego>private class MyListIterator implements Iterator<A> {<newline46mondego>    private Listelem current;<newline46mondego><newline46mondego>    private MyListIterator() {<newline46mondego>        this.current = head;<newline46mondego>    }<newline46mondego><newline46mondego>    @Override<newline46mondego>    public boolean hasNext() {<newline46mondego>       return this.current.getSucessor != null;<newline46mondego>    }<newline46mondego><newline46mondego>    @Override<newline46mondego>    public A next() {<newline46mondego>        A next       = this.current.getValue;<newline46mondego>        this.current = this.current.getSuccessor();<newline46mondego>        return next;<newline46mondego>    }<newline46mondego><newline46mondego>    @Override<newline46mondego>    public void remove() {<newline46mondego>        // TODO Auto-generated method stub<newline46mondego>    }<newline46mondego>}<newline46mondego>"
"3312splitHere46","20163615splitHere46","ArrayList<? extends Object><newline46mondego>"
"3313splitHere46","20163615splitHere46","ArrayList<?><newline46mondego>"
"3314splitHere46","20163615splitHere46","ArrayList"
"3315splitHere46","20163615splitHere46","ArrayList<? extends Object> list = new ArrayList<String>();<newline46mondego>"
"3316splitHere46","20163615splitHere46","Object"
"3317splitHere46","20163615splitHere46","null"
"3318splitHere46","20163615splitHere46","public static void main(String[] args) {<newline46mondego>  ArrayList<? extends Object> list = new ArrayList<String>();<newline46mondego>  addOwn(list);<newline46mondego>}<newline46mondego>static <T> void addOwn(List<T> l) { l.add(l.get(0)); }<newline46mondego>"
"3319splitHere46","20163638splitHere46","import java.awt.Component;<newline46mondego>import java.awt.Container;<newline46mondego>import java.awt.GridBagConstraints;<newline46mondego>import java.awt.GridBagLayout;<newline46mondego>import java.awt.Insets;<newline46mondego>import java.util.Observable;<newline46mondego>import java.util.Observer;<newline46mondego><newline46mondego>import javax.swing.JFrame;<newline46mondego>import javax.swing.JLabel;<newline46mondego><newline46mondego>public class Controller implements Observer {<newline46mondego>    private static final Insets INSETS = new Insets(1, 1, 1, 1);<newline46mondego>    private Chronometer chrono = new Chronometer();<newline46mondego>    private final JLabel message = new JLabel();<newline46mondego><newline46mondego>    public Controller() {<newline46mondego>        final JFrame messageFrame = new JFrame(<doubleQuotes46>Warning<doubleQuotes46>);<newline46mondego><newline46mondego>        messageFrame.setLayout(new GridBagLayout());<newline46mondego>        messageFrame.setSize(1000,1000);<newline46mondego>        messageFrame.setLocationRelativeTo(null);<newline46mondego><newline46mondego>        addComponent(messageFrame, message, 0, 0, 1, 1, GridBagConstraints.CENTER, GridBagConstraints.CENTER);<newline46mondego><newline46mondego>        messageFrame.setVisible(true);<newline46mondego><newline46mondego>        chrono.addObserver(this);<newline46mondego>    }<newline46mondego><newline46mondego>    public void startChrono(int delay) {<newline46mondego>        chrono.startCountDown(delay);<newline46mondego>    }<newline46mondego><newline46mondego>    public void refreshLabel() {<newline46mondego>        SwingUtilities.invokeLater(new Runnable() {<newline46mondego>            @Override<newline46mondego>            public void run() {<newline46mondego>                message.setText(<doubleQuotes46>Preventing connection block. Next query in <doubleQuotes46> + chrono.getTime()/1000 + <doubleQuotes46> seconds.<doubleQuotes46>);<newline46mondego>            }<newline46mondego>        });<newline46mondego>    }<newline46mondego><newline46mondego>    @Override<newline46mondego>    public void update(Observable o, Object arg) {<newline46mondego>        refreshLabel();<newline46mondego>    }<newline46mondego><newline46mondego>    private static void addComponent(Container container, Component component, int gridx, int gridy, int gridwidth, int gridheight, int anchor, int fill) {<newline46mondego>        GridBagConstraints gbc = new GridBagConstraints(gridx, gridy, gridwidth, gridheight, 1.0, 1.0,anchor, fill, INSETS, 0, 0);<newline46mondego>        container.add(component, gbc);<newline46mondego>    }<newline46mondego>}<newline46mondego>"
"3320splitHere46","20163638splitHere46","import java.util.Observable;<newline46mondego>import java.util.Timer;<newline46mondego>import java.util.TimerTask;<newline46mondego><newline46mondego>public class Chronometer extends Observable {<newline46mondego><newline46mondego>    private Timer timer = new Timer();<newline46mondego>    private final int startTime = 30000;<newline46mondego>    private int time = 30000;<newline46mondego><newline46mondego>    public void decreaseTime() {<newline46mondego>        if (time > 0) time--;<newline46mondego>    }<newline46mondego><newline46mondego>    public int getTime() {<newline46mondego>        return time;<newline46mondego>    }<newline46mondego><newline46mondego>    public void reset() {<newline46mondego>        time = startTime;<newline46mondego>    }<newline46mondego><newline46mondego>    public void startCountDown(int delay) {<newline46mondego>        timer.schedule(new TimerTask() {<newline46mondego>            @Override<newline46mondego>            public void run() {<newline46mondego>                decreaseTime();<newline46mondego>                setChanged();<newline46mondego>                notifyObservers();<newline46mondego>            }<newline46mondego>        }, delay,1);<newline46mondego>    }<newline46mondego>}<newline46mondego>"
"3321splitHere46","20163638splitHere46","public class Main {<newline46mondego>    public static void main(String[] args) {<newline46mondego>        SwingUtilities.invokeLater(new Runnable() {<newline46mondego>            @Override<newline46mondego>            public void run() {<newline46mondego>                new Controller().startChrono(1);<newline46mondego>            }<newline46mondego>        });<newline46mondego>    }<newline46mondego>}<newline46mondego>"
"3322splitHere46","20163677splitHere46","if (BMI < 18.5)<newline46mondego>    System.out.println(<doubleQuotes46>Underweight<doubleQuotes46>);<newline46mondego><newline46mondego>if (BMI >= 18.5 && BMI < 25)<newline46mondego>    System.out.println(<doubleQuotes46>Normal<doubleQuotes46>);<newline46mondego><newline46mondego>if (BMI >=25 && BMI <= 30)<newline46mondego>    System.out.println(<doubleQuotes46>Overweight<doubleQuotes46>);<newline46mondego><newline46mondego>else<newline46mondego>    if (BMI > 30)<newline46mondego>        System.out.println(<doubleQuotes46>Obese<doubleQuotes46>);    <newline46mondego>"
"3323splitHere46","20163677splitHere46","if(BMI < 18.5) System.out.println(<doubleQuotes46>Underweight<doubleQuotes46>);<newline46mondego>else if (BMI < 25) System.out.println(<doubleQuotes46>Normal<doubleQuotes46>);<newline46mondego>else if (BMI < 30) System.out.println(<doubleQuotes46>Overweight<doubleQuotes46>);<newline46mondego>else System.out.println(<doubleQuotes46>Obese<doubleQuotes46>);<newline46mondego>"
"3324splitHere46","20163733splitHere46","[]"
"3325splitHere46","20163733splitHere46","public int returnArray()[] { ... }<newline46mondego>"
"3326splitHere46","20163733splitHere46","public"
"3327splitHere46","20163733splitHere46","int"
"3328splitHere46","20163733splitHere46","returnArray"
"3329splitHere46","20163733splitHere46","()"
"3330splitHere46","20163733splitHere46","[]"
"3331splitHere46","20163733splitHere46","public String[] returnArray(String[] array[])[]<newline46mondego>"
"3332splitHere46","20163733splitHere46","public"
"3333splitHere46","20163733splitHere46","String[]"
"3334splitHere46","20163733splitHere46","returnArray"
"3335splitHere46","20163733splitHere46","(String[] array[])"
"3336splitHere46","20163733splitHere46","String[]"
"3337splitHere46","20163733splitHere46","array"
"3338splitHere46","20163733splitHere46","[]"
"3339splitHere46","20163733splitHere46","[]"
"3340splitHere46","20163733splitHere46","String[] array[]"
"3341splitHere46","20163733splitHere46","String[][] array"
"3342splitHere46","20163733splitHere46","public <T> List<T> rerurnList(List<T> list) { ... }<newline46mondego>"
"3343splitHere46","20163733splitHere46","public"
"3344splitHere46","20163733splitHere46","<T>"
"3345splitHere46","20163733splitHere46","T"
"3346splitHere46","20163733splitHere46","List<T>"
"3347splitHere46","20163733splitHere46","List"
"3348splitHere46","20163733splitHere46","T"
"3349splitHere46","20163733splitHere46","rerurnList"
"3350splitHere46","20163733splitHere46","(List<T> list)"
"3351splitHere46","20163733splitHere46","List<T>"
"3352splitHere46","20163733splitHere46","List"
"3353splitHere46","20163733splitHere46","T"
"3354splitHere46","20163733splitHere46","list"
"3355splitHere46","20163959splitHere46","# Routes<newline46mondego>  # This file defines all application routes (Higher priority routes first)<newline46mondego>  # ~~~~<newline46mondego><newline46mondego>  # Home page<newline46mondego>  GET     /                       controllers.Application.index()<newline46mondego><newline46mondego>  # Login and Logout<newline46mondego>  GET     /login                  controllers.Application.login()<newline46mondego>  POST    /login                  controllers.Application.authenticate()<newline46mondego>  GET     /logout                 controllers.Application.logout()<newline46mondego><newline46mondego>  # Adding new task<newline46mondego>  GET     /newtask                controllers.TaskController.taskNewForm()<newline46mondego>  POST    /newtask                controllers.TaskController.taskAdd()<newline46mondego><newline46mondego>  # Tasks<newline46mondego>  GET     /:category              controllers.TaskController.taskList(category)<newline46mondego>  GET     /:category/:taskId      controllers.TaskController.taskDetails(category, taskId: Long)<newline46mondego><newline46mondego>  # User<newline46mondego>  GET     /register               controllers.UserController.userForm()<newline46mondego>  POST    /register               controllers.UserController.userNewSave()<newline46mondego><newline46mondego>  # Map static resources from the /public folder to the /assets URL path<newline46mondego>  GET     /assets/*file           controllers.Assets.at(path=<doubleQuotes46>/public<doubleQuotes46>, file)<newline46mondego>"
"3356splitHere46","20163959splitHere46","/:category"
"3357splitHere46","20163959splitHere46","/:category/:taskId"
"3358splitHere46","20163959splitHere46","/:category"
"3359splitHere46","20163959splitHere46","GET     /Category/:category              controllers.TaskController.taskList(category)<newline46mondego>  GET     /Category/:category/:taskId      controllers.TaskController.taskDetails(category, taskId: Long)<newline46mondego>"
"3360splitHere46","20164039splitHere46","static"
"3361splitHere46","20164045splitHere46","JSONObject data= (JSONObject)JSONValue.parse(new InputStreamReader(JsonSimpleEx.class.getResourceAsStream(<doubleQuotes46>/test.json<doubleQuotes46>)) );<newline46mondego>JSONArray dropped = (JSONArray)data.get(<doubleQuotes46>dropped<doubleQuotes46>);<newline46mondego>JSONObject first = (JSONObject)dropped.get(0);<newline46mondego>System.out.println( first.get(<doubleQuotes46>crc32<doubleQuotes46>));<newline46mondego>"
"3362splitHere46","20164059splitHere46","<filter><newline46mondego><filter-name>OpenEntityManagerInViewFilter</filter-name><newline46mondego><filter-class>org.springframework.orm.jpa.support.OpenEntityManagerInViewFilter</filter-class><newline46mondego></filter><newline46mondego><filter-mapping><newline46mondego><filter-name>OpenEntityManagerInViewFilter</filter-name><newline46mondego><url-pattern>/*</url-pattern><newline46mondego></filter-mapping><newline46mondego>"
"3363splitHere46","20164164splitHere46","@Override<newline46mondego>protected PageList onNewRootPageList() {<newline46mondego><newline46mondego>    return new PageList(<newline46mondego>            new LoginInfoPage(this, <doubleQuotes46>Login Information<doubleQuotes46>).setRequired(true));<newline46mondego>}<newline46mondego>"
"3364splitHere46","20164164splitHere46","String data = mWizardModel.findByKey(<doubleQuotes46>LoginInformation<doubleQuotes46>).getData().getString(LoginInfoPage.EMAIL_DATA_KEY);<newline46mondego>"
"3365splitHere46","20164167splitHere46","myArray.clone()"
"3366splitHere46","20164218splitHere46","nameProperty"
"3367splitHere46","20164218splitHere46","name"
"3368splitHere46","20164218splitHere46","public IntegerProperty rIDProperty() {<newline46mondego>    return rID;<newline46mondego>}<newline46mondego>"
"3369splitHere46","20164218splitHere46","getName"
"3370splitHere46","20164218splitHere46","Name"
"3371splitHere46","20164218splitHere46","public Integer getRID() {<newline46mondego>    return rID.get();<newline46mondego>}<newline46mondego>"
"3372splitHere46","20164415splitHere46","SpannableString WordtoSpan = new SpannableString(<doubleQuotes46>This is simple<doubleQuotes46>);        <newline46mondego>    WordtoSpan.setSpan(new ForegroundColorSpan(Color.BLUE), 0, 7, Spannable.SPAN_EXCLUSIVE_EXCLUSIVE);<newline46mondego><newline46mondego>//0 is starting character and 7 is ending character you need to specify it<newline46mondego><newline46mondego><newline46mondego>  textView.setText(WordtoSpan);<newline46mondego>"
"3373splitHere46","20164415splitHere46","String styledText = <doubleQuotes46>This is <font color='red'>simple</font>.<doubleQuotes46>;<newline46mondego>textView.setText(Html.fromHtml(styledText), TextView.BufferType.SPANNABLE);<newline46mondego>"
"3374splitHere46","20164415splitHere46","String txt = <doubleQuotes46>partial colored #text<doubleQuotes46>;<newline46mondego>        int to_len = txt.length();<newline46mondego>        int sim_pos = txt.indexOf(<doubleQuotes46>#<doubleQuotes46>);<newline46mondego><newline46mondego>        SpannableString WordtoSpan = new SpannableString(txt);        <newline46mondego>          WordtoSpan.setSpan(new ForegroundColorSpan(Color.BLUE), sim_pos, to_len, Spannable.SPAN_EXCLUSIVE_EXCLUSIVE);<newline46mondego>          textView.setText(WordtoSpan);<newline46mondego>"
"3375splitHere46","20164589splitHere46","replaceAll"
"3376splitHere46","20164589splitHere46","replace"
"3377splitHere46","20164589splitHere46","replace"
"3378splitHere46","20164589splitHere46","String REGEX_TEAMSPLIT = <doubleQuotes46>([0-9]*)\\s-\\s([A-Z,a-z][a-z,\\s,A-Z]*)<doubleQuotes46>;<newline46mondego>String reg = <doubleQuotes46>62401 - Breakers<doubleQuotes46>;<newline46mondego>String teamNumber = reg.replaceAll(REGEX_TEAMSPLIT, <doubleQuotes46>$1<doubleQuotes46>);<newline46mondego>System.out.println(teamNumber); // => 62401<newline46mondego>"
"3379splitHere46","20164749splitHere46","Reflections reflections = new Reflections(<doubleQuotes46>my.project.prefix<doubleQuotes46>);<newline46mondego>Set<Class<? extends SomeType>> subTypes = <newline46mondego>           reflections.getSubTypesOf(SomeType.class);<newline46mondego>"
"3380splitHere46","20164749splitHere46","Object"
"3381splitHere46","20164749splitHere46","SomeType"
"3382splitHere46","20164749splitHere46","Set<Class<? extends Object>> allClasses = <newline46mondego>     reflections.getSubTypesOf(Object.class);<newline46mondego>"
"3383splitHere46","20164846splitHere46","<doubleQuotes46>user<doubleQuotes46>"
"3384splitHere46","20164846splitHere46","// setup input fields<newline46mondego>user = (EditText) findViewById(R.id.username);<newline46mondego><newline46mondego>SharedPreferences sp = PreferenceManager.getDefaultSharedPreferences(this);<newline46mondego>String userName = sp.getString(<doubleQuotes46>user<doubleQuotes46>, <doubleQuotes46><doubleQuotes46>);<newline46mondego>user.setText(userName);<newline46mondego><newline46mondego>pass = (EditText) findViewById(R.id.password);<newline46mondego>"
"3385splitHere46","20164866splitHere46","E do_something() {<newline46mondego>  try {<newline46mondego>    System.out.println(<doubleQuotes46>method entry<doubleQuotes46>);<newline46mondego>    // something else<newline46mondego>    System.out.println(<doubleQuotes46>method exit<doubleQuotes46>);<newline46mondego>    return something;<newline46mondego>  } finally {<newline46mondego>    System.out.println(<doubleQuotes46>finally entry<doubleQuotes46>);<newline46mondego>    // something else<newline46mondego>    System.out.println(<doubleQuotes46>finally exit<doubleQuotes46>);<newline46mondego>  }<newline46mondego>}<newline46mondego>"
"3386splitHere46","20164889splitHere46","commandName"
"3387splitHere46","20164889splitHere46","<form:form commandName=<doubleQuotes46>products[0]<doubleQuotes46>><newline46mondego>   <form:input path=<doubleQuotes46>name<doubleQuotes46>/><newline46mondego></form:form><newline46mondego>"
"3388splitHere46","20164889splitHere46","products[0]"
"3389splitHere46","20164889splitHere46","<form>"
"3390splitHere46","20164899splitHere46","'[B@48eb2326'"
"3391splitHere46","20164899splitHere46","rowTest[0]"
"3392splitHere46","20164899splitHere46","byte[]"
"3393splitHere46","20164899splitHere46","Blob"
"3394splitHere46","20164899splitHere46","byte[] myLongBlob = (byte[]) file"
"3395splitHere46","20164910splitHere46","Parcel"
"3396splitHere46","20164910splitHere46","public final <T extends Parcelable> Parcelable.Creator<T> readParcelableCreator()"
"3397splitHere46","20164910splitHere46","...<newline46mondego>    Parcelable.Creator<T> creator;<newline46mondego>    synchronized (mCreators) {<newline46mondego>        HashMap<String,Parcelable.Creator> map = mCreators.get(loader);<newline46mondego>        if (map == null) {<newline46mondego>            map = new HashMap<String,Parcelable.Creator>();<newline46mondego>            mCreators.put(loader, map);<newline46mondego>        }<newline46mondego>        creator = map.get(name);<newline46mondego>        if (creator == null) {<newline46mondego>            try {<newline46mondego>                Class c = loader == null ?<newline46mondego>                    Class.forName(name) : Class.forName(name, true, loader);<newline46mondego>                Field f = c.getField(<doubleQuotes46>CREATOR<doubleQuotes46>);<newline46mondego>                creator = (Parcelable.Creator)f.get(null);<newline46mondego>            }<newline46mondego>...<newline46mondego>"
"3398splitHere46","20164910splitHere46","c.getField(<doubleQuotes46>CREATOR<doubleQuotes46>)"
"3399splitHere46","20165067splitHere46","CharSequence i = tweet.title.indexOf(Integer.valueOf(<doubleQuotes46>I<doubleQuotes46>));<newline46mondego>"
"3400splitHere46","20165067splitHere46","CharSequence i = tweet.title.substring(tweet.title.indexOf(<doubleQuotes46>I<doubleQuotes46>), tweet.title.indexOf(<doubleQuotes46>I<doubleQuotes46>) + 1);<newline46mondego>"
"3401splitHere46","20165067splitHere46","int index = tweet.title.indexOf(<doubleQuotes46>I<doubleQuotes46>); // find int position of <doubleQuotes46>I<newline46mondego><newline46mondego>// set to be the String of where <doubleQuotes46>I<doubleQuotes46> is to plus 1 of that position<newline46mondego>CharSequence i = tweet.title.substring(index, index + 1); <newline46mondego>"
"3402splitHere46","20165067splitHere46","indexOf(String)"
"3403splitHere46","20165067splitHere46","int"
"3404splitHere46","20165067splitHere46","String"
"3405splitHere46","20165067splitHere46","indexOf(String)"
"3406splitHere46","20165067splitHere46","Integer.valueOf(<doubleQuotes46>I<doubleQuotes46>)"
"3407splitHere46","20165067splitHere46","String"
"3408splitHere46","20165067splitHere46","Integer.valueOf(String)"
"3409splitHere46","20165067splitHere46","String"
"3410splitHere46","20165067splitHere46","Integer"
"3411splitHere46","20165067splitHere46","indexOf(String)"
"3412splitHere46","20165067splitHere46","Integer"
"3413splitHere46","20165067splitHere46","<doubleQuotes46>I<doubleQuotes46>"
"3414splitHere46","20165067splitHere46","int"
"3415splitHere46","20165067splitHere46","CharSequence i = tweet.title.indexOf(<doubleQuotes46>I<doubleQuotes46>);"
"3416splitHere46","20165067splitHere46","int"
"3417splitHere46","20165067splitHere46","tweet.title"
"3418splitHere46","20165067splitHere46","<doubleQuotes46>I<doubleQuotes46>"
"3419splitHere46","20165067splitHere46","tweet.title.indexOf(<doubleQuotes46>I<doubleQuotes46>)"
"3420splitHere46","20165067splitHere46","CharSequence"
"3421splitHere46","20165067splitHere46","tweet.title"
"3422splitHere46","20165067splitHere46","char"
"3423splitHere46","20165067splitHere46","I"
"3424splitHere46","20165103splitHere46","main"
"3425splitHere46","20165152splitHere46","Java EE"
"3426splitHere46","20165152splitHere46","Java EE"
"3427splitHere46","20165309splitHere46","for (Tile p : platforms) {<newline46mondego>  if (p == null) {<newline46mondego>    continue; // or break, whatever is better in your case<newline46mondego>  }<newline46mondego>  if (p.y == br.y && br.x >= p.x && bl.x <= p.x + p.width) {<newline46mondego>    // ...<newline46mondego>  }<newline46mondego>}<newline46mondego>"
"3428splitHere46","20165328splitHere46","kleur"
"3429splitHere46","20165328splitHere46","case"
"3430splitHere46","20165328splitHere46","switch"
"3431splitHere46","20165328splitHere46","kleur"
"3432splitHere46","20165328splitHere46","Color"
"3433splitHere46","20165328splitHere46","Color kleur"
"3434splitHere46","20165328splitHere46","case"
"3435splitHere46","20165328splitHere46","Color kleur"
"3436splitHere46","20165328splitHere46","switch"
"3437splitHere46","20165328splitHere46","Color kleur;  // <--- here declaring it<newline46mondego><newline46mondego>    switch (appel){<newline46mondego>    case <doubleQuotes46>Gifgroen<doubleQuotes46>:<newline46mondego>        kleur = new Color(184, 208, 68); // ere initializing it if needed<newline46mondego>        break;<newline46mondego>    case <doubleQuotes46>Rood<doubleQuotes46>:<newline46mondego>        kleur = new Color(142, 41, 13);<newline46mondego>        break;<newline46mondego>    // other cases <newline46mondego>    default:<newline46mondego>        kleur = new Color(142, 41, 13);<newline46mondego>        break;<newline46mondego>}<newline46mondego>"
"3438splitHere46","20165337splitHere46","PanelWidget"
"3439splitHere46","20165337splitHere46","WidgetFactory"
"3440splitHere46","20165337splitHere46","Map<String, Provider<IDashboardWidget>>"
"3441splitHere46","20165337splitHere46","Map<String, IDashboardWidget>"
"3442splitHere46","20165403splitHere46","par"
"3443splitHere46","20165403splitHere46","ParHashMap"
"3444splitHere46","20165403splitHere46","par"
"3445splitHere46","20165403splitHere46","ParHashMap"
"3446splitHere46","20165403splitHere46","JavaConverters"
"3447splitHere46","20165403splitHere46","asJava"
"3448splitHere46","20165403splitHere46","asScala"
"3449splitHere46","20165503splitHere46","int"
"3450splitHere46","20165503splitHere46","long"
"3451splitHere46","20165503splitHere46","long"
"3452splitHere46","20165503splitHere46","int"
"3453splitHere46","20165503splitHere46","for (int c = 0; c < ...; c++) {<newline46mondego>  check = input.nextLong();<newline46mondego>  seatFinder[c - 1] = seatHolders[(int)(check - 1)];<newline46mondego>}<newline46mondego>"
"3454splitHere46","20165503splitHere46","for (long c = 0; c < ...; c++) {<newline46mondego>  check = input.nextLong();<newline46mondego>  seatFinder[(int)(c - 1)] = seatHolders[(int)(check - 1)];<newline46mondego>}<newline46mondego>"
"3455splitHere46","20165503splitHere46","int"
"3456splitHere46","20165503splitHere46","int"
"3457splitHere46","20165540splitHere46","apple.laf.useScreenMenuBar"
"3458splitHere46","20165540splitHere46","JMenuBar"
"3459splitHere46","20165540splitHere46","if (System.getProperty(<doubleQuotes46>os.name<doubleQuotes46>).startsWith(<doubleQuotes46>Mac OS X<doubleQuotes46>)) {<newline46mondego>    System.setProperty(<doubleQuotes46>apple.laf.useScreenMenuBar<doubleQuotes46>, <doubleQuotes46>true<doubleQuotes46>);<newline46mondego>    System.setProperty(<doubleQuotes46>apple.awt.graphics.UseQuartz<doubleQuotes46>, <doubleQuotes46>true<doubleQuotes46>);<newline46mondego>    // etc.<newline46mondego>}<newline46mondego>"
"3460splitHere46","20165570splitHere46","matches"
"3461splitHere46","20165570splitHere46","true"
"3462splitHere46","20165570splitHere46","a-z"
"3463splitHere46","20165570splitHere46","A-Z"
"3464splitHere46","20165570splitHere46","."
"3465splitHere46","20165570splitHere46",".*"
"3466splitHere46","20165570splitHere46","."
"3467splitHere46","20165570splitHere46","[.]"
"3468splitHere46","20165570splitHere46","if (<doubleQuotes46>test%$@*)$(%<doubleQuotes46>.matches(<doubleQuotes46>.*[^a-zA-Z.].*<doubleQuotes46>)) {<newline46mondego>    //string contains character that is not in rage a-z, A-Z, or '.'<newline46mondego>"
"3469splitHere46","20165580splitHere46","public"
"3470splitHere46","20165580splitHere46","public"
"3471splitHere46","20165580splitHere46","java."
"3472splitHere46","20165594splitHere46","ListView lv;"
"3473splitHere46","20165594splitHere46","lv"
"3474splitHere46","20165770splitHere46","double unitPrice = 1.23235;<newline46mondego>java.text.DecimalFormat decimalFormat = new java.text.DecimalFormat( <doubleQuotes46>#,###,###,##0.##<doubleQuotes46> );<newline46mondego>String formattedUnitPrice = decimalFormat.format(unitPrice);<newline46mondego>"
"3475splitHere46","20165885splitHere46","String..."
"3476splitHere46","20165885splitHere46","String[]"
"3477splitHere46","20165885splitHere46","public static <T> T[] asArray(T... ts) {<newline46mondego>    return ts;<newline46mondego>}<newline46mondego>"
"3478splitHere46","20165885splitHere46","asArray(1, 2, 3); // much shorter.<newline46mondego>"
"3479splitHere46","20165885splitHere46","asArray(new Integer[] { 1, 2, 3 });<newline46mondego>"
"3480splitHere46","20165993splitHere46","-fx-background-color:transparent"
"3481splitHere46","20166006splitHere46","List<Animal>"
"3482splitHere46","20166006splitHere46","List<? extends Animal>"
"3483splitHere46","20166006splitHere46","List<Animal>"
"3484splitHere46","20166006splitHere46","List<Reptile>"
"3485splitHere46","20166006splitHere46","List<Lion>"
"3486splitHere46","20166006splitHere46","List<Reptile>"
"3487splitHere46","20166006splitHere46","List<? super Animal>"
"3488splitHere46","20166006splitHere46","List<Animal>"
"3489splitHere46","20166006splitHere46","List<Object>"
"3490splitHere46","20166006splitHere46","List<Animal>"
"3491splitHere46","20166006splitHere46","List<Object>"
"3492splitHere46","20166006splitHere46","List<? extends Animal>"
"3493splitHere46","20166006splitHere46","List<Animal>"
"3494splitHere46","20166006splitHere46","List<Reptile>"
"3495splitHere46","20166006splitHere46","List<Lion>"
"3496splitHere46","20166006splitHere46","List<? super Animal>"
"3497splitHere46","20166006splitHere46","List<Animal>"
"3498splitHere46","20166006splitHere46","List<Object>"
"3499splitHere46","20166006splitHere46","List<Animal>"
"3500splitHere46","20166055splitHere46","C's"
"3501splitHere46","20166055splitHere46","<dependencyManagement>"
"3502splitHere46","20166090splitHere46","first = splitArray[0];<newline46mondego>last = splitArray[1];<newline46mondego>ID = splitArray[2];<newline46mondego>"
"3503splitHere46","20166090splitHere46","splitArray"
"3504splitHere46","20166090splitHere46","Arrays.#toString(java.lang.Object[])"
"3505splitHere46","20166090splitHere46","System.out.println(Arrays.toString(splitArray));<newline46mondego>"
"3506splitHere46","20166151splitHere46","From the nbusers mailing list I got the following hint:<newline46mondego><newline46mondego><doubleQuotes46>workaround it by deselecting 'Compile On Save' in the project options<doubleQuotes46>.  <newline46mondego>"
"3507splitHere46","20166172splitHere46","Please enter price of tree:"
"3508splitHere46","20166172splitHere46","while"
"3509splitHere46","20166172splitHere46","while (!done)<newline46mondego>    // do something<newline46mondego>// do something else<newline46mondego>"
"3510splitHere46","20166172splitHere46","do something"
"3511splitHere46","20166172splitHere46","while (!done) {<newline46mondego>    // do something<newline46mondego>    // set done to true at some point, or break from the loop<newline46mondego>} <newline46mondego>"
"3512splitHere46","20166172splitHere46","System.out.println"
"3513splitHere46","20166172splitHere46","while"
"3514splitHere46","20166172splitHere46","while"
"3515splitHere46","20166219splitHere46","^"
"3516splitHere46","20166219splitHere46","Math.pow(number, degree);"
"3517splitHere46","20166222splitHere46","Object arr1[] = { <doubleQuotes46>1<doubleQuotes46>, <doubleQuotes46>2<doubleQuotes46>, <doubleQuotes46>3<doubleQuotes46> };<newline46mondego>    Object arr2[] = { <doubleQuotes46>One<doubleQuotes46>, <doubleQuotes46>Two<doubleQuotes46>, <doubleQuotes46>Three<doubleQuotes46> };<newline46mondego>    Object arr3[] = { <doubleQuotes46>Red<doubleQuotes46>, <doubleQuotes46>Blue<doubleQuotes46>, <doubleQuotes46>Yellow<doubleQuotes46> };<newline46mondego>    //make an array of arrays<newline46mondego>    Object allArr[] = { arr1, arr2, arr3 };<newline46mondego>    //the new array to store values<newline46mondego>    Object arr4[][] = new Object[3][3];<newline46mondego><newline46mondego>    for (int i = 0; i < 3; i++) {<newline46mondego>        for (int j = 0, k = 0; j < 3 && k < 3; j++, k++) {<newline46mondego>            //take the first array from array of arrays<newline46mondego>            Object tmp[] = (Object[]) allArr[k];<newline46mondego>            //take the ith element of each individual array and store in the new array in correct position <newline46mondego>            arr4[i][j] = tmp[i];<newline46mondego><newline46mondego>        }<newline46mondego>    }<newline46mondego>     //print the new array<newline46mondego>    for (int i = 0; i < 3; i++) {<newline46mondego>        for (int j = 0; j < 3; j++) {<newline46mondego>            System.out.print(arr4[i][j] + <doubleQuotes46> <doubleQuotes46>);<newline46mondego>        }<newline46mondego>        System.out.println();<newline46mondego>    }<newline46mondego>"
"3518splitHere46","20166222splitHere46","1 One Red <newline46mondego>2 Two Blue <newline46mondego>3 Three Yellow <newline46mondego>"
"3519splitHere46","20166391splitHere46","ConcurrentModificationException"
"3520splitHere46","20166391splitHere46","Iterator<String> iterator = notes.iterator();<newline46mondego>while(iterator.hasNext()) {<newline46mondego>  String file = iterator.next();<newline46mondego>  if (file == r)<newline46mondego>    iterator.remove();<newline46mondego>}<newline46mondego>"
"3521splitHere46","20166391splitHere46","equals()"
"3522splitHere46","20166391splitHere46","=="
"3523splitHere46","20166409splitHere46","public class Factorial {<newline46mondego><newline46mondego>    private static Map<Integer, Long> memo = new ConcurrentHashMap<Integer, Long>();<newline46mondego><newline46mondego>    public static void main(String[] args) {<newline46mondego>        for (int i = 0; i < 11; ++i) {<newline46mondego>            System.out.println(String.format(<doubleQuotes46>n: %d n!: %d<doubleQuotes46>, i, factorial(i)));<newline46mondego>        }<newline46mondego>    }<newline46mondego>    public static long factorial(int n) {<newline46mondego>        long value = 1L;<newline46mondego>        if (n > 1) {<newline46mondego>            if (memo.containsKey(n)) {<newline46mondego>                value = memo.get(n);<newline46mondego>            } else {<newline46mondego>                for (int i = 1; i <= n; ++i) {<newline46mondego>                    value *= i;<newline46mondego>                }<newline46mondego>                memo.put(n, value);<newline46mondego>            }<newline46mondego>        }<newline46mondego>        return value;<newline46mondego>    }<newline46mondego>}<newline46mondego>"
"3524splitHere46","20166523splitHere46","JComboBox"
"3525splitHere46","20166523splitHere46","DefaultComboBoxModel"
"3526splitHere46","20166523splitHere46","JComboBox"
"3527splitHere46","20166523splitHere46","if-else"
"3528splitHere46","20166523splitHere46","switch-case"
"3529splitHere46","20166523splitHere46","public class PanelFlowers extends javax.swing.JPanel {<newline46mondego><newline46mondego>     private int amount;<newline46mondego>     // private String color = <doubleQuotes46><doubleQuotes46>;<newline46mondego>     Color chosenColor;<newline46mondego>     public PanelFlowers() {<newline46mondego>         initComponents();<newline46mondego>         // repaint(); // <--- no need to call repaint in constructor<newline46mondego>     }<newline46mondego><newline46mondego>  private void initComponents() {<newline46mondego><newline46mondego>     // your other code------------<newline46mondego><newline46mondego>   DefaultComboBoxModel model = new DefaultComboBoxModel();<newline46mondego>   model.addElement(new Color(152, 52, 152));<newline46mondego>   model.addElement(new Color(152, 12, 52));<newline46mondego>   model.addElement(new Color(152, 142, 120));<newline46mondego>   colorCombo.setModel(model);<newline46mondego><newline46mondego><newline46mondego>   colorCombo.addItemListener(new ItemListener() {<newline46mondego><newline46mondego><newline46mondego>        @Override<newline46mondego>        public void itemStateChanged(ItemEvent e) {<newline46mondego><newline46mondego>            JComboBox comb = (JComboBox)e.getSource();<newline46mondego>            chosenColor = (Color) comb.getSelectedItem();<newline46mondego>            repaint();<newline46mondego><newline46mondego>        }<newline46mondego>    }); <newline46mondego>"
"3530splitHere46","20166523splitHere46","chosenColor"
"3531splitHere46","20166523splitHere46","paintComponent"
"3532splitHere46","20166523splitHere46","colorCombo"
"3533splitHere46","20166523splitHere46","java.awt.Color[r=xxx,g=xxx,b=xxx]"
"3534splitHere46","20166535splitHere46","aTextView_2.setText(first);"
"3535splitHere46","20166535splitHere46","myTextView.setText( String.valueOf( someInteger ) );"
"3536splitHere46","20166536splitHere46","SupportMapFragment"
"3537splitHere46","20166536splitHere46","AsyncTask"
"3538splitHere46","20166536splitHere46","doInBackground()"
"3539splitHere46","20166536splitHere46","onPostExecute()"
"3540splitHere46","20166536splitHere46","onPostExecute()"
"3541splitHere46","20166536splitHere46","Observer"
"3542splitHere46","20166643splitHere46","public Frame() {<newline46mondego>    Objects a = new Objects(); //<-- new object of type Objects<newline46mondego>    list = a.getList(); //<-- call getList but list is null<newline46mondego>}<newline46mondego>"
"3543splitHere46","20166643splitHere46","public Frame() {<newline46mondego>        Objects a = new Objects(); <newline46mondego>        a.addStudents(); // <-- calling this method will initialize your list<newline46mondego>        list = a.getList();<newline46mondego>}<newline46mondego>"
"3544splitHere46","20166643splitHere46","Objects"
"3545splitHere46","20166643splitHere46","public Frame(Objects a) {<newline46mondego>    list = a.getList(); //<-- call getList but list is null<newline46mondego>}<newline46mondego>"
"3546splitHere46","20166643splitHere46","Frame f = new Frame(a);<newline46mondego>"
"3547splitHere46","20166668splitHere46","LEFT JOIN"
"3548splitHere46","20166668splitHere46","SELECT cu from Customer cu  <newline46mondego>LEFT JOIN cu.person p<newline46mondego>LEFT JOIN cu.company co<newline46mondego>where lower(p.name) like :name escape '!' <newline46mondego>or lower(co.name) like :name escape '!'<newline46mondego>"
"3549splitHere46","20166677splitHere46","public class Piece {<newline46mondego><newline46mondego>    public String getName() {<newline46mondego>        return <doubleQuotes46>P<doubleQuotes46>;<newline46mondego>    }<newline46mondego>}<newline46mondego><newline46mondego>public class King extends Piece {<newline46mondego><newline46mondego>    @Override<newline46mondego>    public String getName() {<newline46mondego>        return <doubleQuotes46>K<doubleQuotes46>;<newline46mondego>    }<newline46mondego>}<newline46mondego><newline46mondego>public class JavaTest {<newline46mondego><newline46mondego>    public static void showNames(Piece[] p) {<newline46mondego>       for (Piece x : p) {<newline46mondego>          System.out.println(x.getName());<newline46mondego>       }<newline46mondego>    }<newline46mondego><newline46mondego>    public static void main(String[] args) {<newline46mondego><newline46mondego>        Piece[] p = new Piece[]{<newline46mondego>            new Piece(),<newline46mondego>            new King()<newline46mondego>        };<newline46mondego><newline46mondego>        showNames(p);<newline46mondego>    }<newline46mondego>}<newline46mondego>"
"3550splitHere46","20166677splitHere46","P<newline46mondego>K<newline46mondego>"
"3551splitHere46","20166778splitHere46","JFrame frame = new JFrame();<newline46mondego>frame.setSize(Toolkit.getDefaultToolkit().getScreenSize());<newline46mondego>"
"3552splitHere46","20166855splitHere46","String"
"3553splitHere46","20166855splitHere46","class MyString {<newline46mondego>    private String value;<newline46mondego><newline46mondego>    public MyString(String value) {<newline46mondego>        this.value = value;<newline46mondego>    }<newline46mondego><newline46mondego>    void setValue(String value) {<newline46mondego>        this.value = value;<newline46mondego>    }<newline46mondego><newline46mondego>    @Override<newline46mondego>    public String toString() {<newline46mondego>       return value;<newline46mondego>    }<newline46mondego>}<newline46mondego>"
"3554splitHere46","20166855splitHere46","public MyString a = new MyString(null);<newline46mondego>public MyString b = new MyString(null);<newline46mondego>public MyString c = new MyString(null);<newline46mondego><newline46mondego>public MyString[] d = {a,b,c};<newline46mondego><newline46mondego>...<newline46mondego><newline46mondego>a.setValue(<doubleQuotes46>5<doubleQuotes46>);  // <--<newline46mondego>"
"3555splitHere46","20166855splitHere46","a"
"3556splitHere46","20166855splitHere46","null"
"3557splitHere46","20166855splitHere46","setValue()"
"3558splitHere46","20166903splitHere46","entityManager.merge(entity);"
"3559splitHere46","20166903splitHere46","entityManager.flush()"
"3560splitHere46","20166903splitHere46","entityManager"
"3561splitHere46","20166903splitHere46","merge()"
"3562splitHere46","20166903splitHere46","detach()"
"3563splitHere46","20166903splitHere46","entityManager.merge(root)"
"3564splitHere46","20166957splitHere46","#!/bin/bash<newline46mondego><newline46mondego>the_output=$(java -jar portalOutputFormater.jar $1 $2 $3 $4 2>&1)<newline46mondego><newline46mondego>echo $the_output<newline46mondego>"
"3565splitHere46","20166994splitHere46","ovalBounds.set(x, y, x + 2 * radius, y + 2 * radius);<newline46mondego>"
"3566splitHere46","20167040splitHere46","getDeclaredMethods()"
"3567splitHere46","20167040splitHere46","getMethods()"
"3568splitHere46","20167073splitHere46","contor++"
"3569splitHere46","20167073splitHere46","get"
"3570splitHere46","20167073splitHere46","null"
"3571splitHere46","20167084splitHere46","System.out.println(String.format(<doubleQuotes46>%8s<doubleQuotes46>, Integer.toBinaryString(data[0] & 0xFF)).replace(' ', '0'));<newline46mondego>System.out.println(String.format(<doubleQuotes46>%8s<doubleQuotes46>, Integer.toBinaryString(data[1] & 0xFF)).replace(' ', '0'));<newline46mondego>"
"3572splitHere46","20167084splitHere46","00001000<newline46mondego>00110010<newline46mondego>"
"3573splitHere46","20167084splitHere46","System.out.println(Integer.toBinaryString((0x100|0xff&data[1]).substring(1))<newline46mondego>"
"3574splitHere46","20167084splitHere46","Integer.toBinaryString()"
"3575splitHere46","20167084splitHere46","Integer.toBinaryString(0x300+b).substring(2) //for b < 256<newline46mondego>"
"3576splitHere46","20167084splitHere46","Integer.toBinaryString(0x30000+bb).substring(2)  //for bb < 65536<newline46mondego>"
"3577splitHere46","20167084splitHere46","int bits = 8;<newline46mondego>Long mask =  (1L << bits) - 1;<newline46mondego>Long.toBinaryString((3L << bits) + (mask & n)).substring(2);<newline46mondego>"
"3578splitHere46","20167084splitHere46","Long.toBinaryString((1L << bits) + (mask & n)).substring(1);<newline46mondego>"
"3579splitHere46","20167231splitHere46","String str =<doubleQuotes46>Billy Joe Bob<doubleQuotes46>;<newline46mondego><newline46mondego>    int targetMatch = 1;<newline46mondego>    int offset = 0;<newline46mondego>    int position = str.indexOf(' ',offset);<newline46mondego>    String result = <doubleQuotes46><doubleQuotes46>;<newline46mondego>    result += str.substring(0, 1);<newline46mondego>    while(position != -1){<newline46mondego>        position++;<newline46mondego>        result += str.substring(position,position+1);<newline46mondego>        position = str.indexOf(' ', position);<newline46mondego>    }<newline46mondego>    System.out.println(result);<newline46mondego>"
"3580splitHere46","20167240splitHere46","-public void eraseCircle(Graphics g, int x, int y)<newline46mondego>-c.eraseCircle(g,temp.getY(),temp.getX());<newline46mondego>"
"3581splitHere46","20167240splitHere46","public void paint(Graphics g)<newline46mondego>{<newline46mondego>    int incX = 5;   // initial x increment for circle locations<newline46mondego>    int incY = 5;   // initial y increment for circle locations<newline46mondego><newline46mondego>    Coord temp = new Coord(0,0);<newline46mondego>    Queue<Coord> q = new LinkedList<Coord>();<newline46mondego><newline46mondego>    Circle c = new Circle(g,circleSize,incX,incY,TIME_DELAY);<newline46mondego>    try<newline46mondego>    {<newline46mondego>        for(int i = 1; i <= TOTAL_NUM_CIRCLES; i++)<newline46mondego>        {<newline46mondego>            if(q.size() >= 50)<newline46mondego>            {<newline46mondego>                temp = q.remove();<newline46mondego>                c.eraseCircle(g,temp.getX(),temp.getY());<newline46mondego>            }<newline46mondego>            temp = new Coord(getX(),getY());<newline46mondego>            //q.add(temp);<newline46mondego>            q.add(c.drawCircle(g));<newline46mondego>            c.hitEdge();<newline46mondego>        }<newline46mondego>    }<newline46mondego>    catch(InterruptedException e){}<newline46mondego>}<newline46mondego>"
"3582splitHere46","20167240splitHere46","/**<newline46mondego> * draws a blue circle and sets the tlX and tlY for the next drawing<newline46mondego> * @param g Graphics object<newline46mondego> * @return <newline46mondego> */<newline46mondego>public Coord drawCircle(Graphics g) throws InterruptedException<newline46mondego>{<newline46mondego>    g.setColor(Color.blue);<newline46mondego>    g.drawOval(tlX,tlY,size,size);<newline46mondego>    delay(timeDelay);<newline46mondego>    if (addX)<newline46mondego>        tlX+=incX;<newline46mondego>    else<newline46mondego>        tlX-=incX;<newline46mondego>    if (addY)<newline46mondego>        tlY+=incY;<newline46mondego>    else<newline46mondego>        tlY-=incY;<newline46mondego>    return new Coord(tlX, tlY);<newline46mondego>}<newline46mondego>"
"3583splitHere46","20167303splitHere46","platforms[3] = new Tile(500, 250, tileSize*4, tileSize); // <-- this line throws the exception<newline46mondego>"
"3584splitHere46","20167303splitHere46","public Tile[] platforms = new Tile[3]; //<- length of 3<newline46mondego><newline46mondego>/*********/<newline46mondego><newline46mondego>platforms[0] = new Tile(100, Frame.height-80, tileSize*8, tileSize);<newline46mondego>platforms[1] = new Tile(400, 350, tileSize*2, tileSize);<newline46mondego>platforms[2] = new Tile(500, 250, tileSize*4, tileSize);<newline46mondego>"
"3585splitHere46","20167364splitHere46","SpringSocialSecurityConnectionSignUp"
"3586splitHere46","20167364splitHere46","execute"
"3587splitHere46","20167392splitHere46","nextline = reader.readLine(); // I'm assuming you have this here<newline46mondego>while(nextline != null){<newline46mondego>"
"3588splitHere46","20167392splitHere46","<doubleQuotes46>4,<doubleQuotes46>"
"3589splitHere46","20167392splitHere46",","
"3590splitHere46","20167392splitHere46","<doubleQuotes46>4<doubleQuotes46>"
"3591splitHere46","20167392splitHere46","StringTokenizer st = new StringTokenizer(nextline,<doubleQuotes46>,<doubleQuotes46>);<newline46mondego>"
"3592splitHere46","20167392splitHere46","st.hasMoreTokens()"
"3593splitHere46","20167392splitHere46","<doubleQuotes46>4<doubleQuotes46>"
"3594splitHere46","20167392splitHere46","st"
"3595splitHere46","20167392splitHere46","int size = Integer.parseInt(st.nextToken());<newline46mondego>       System.out.println(size);<newline46mondego><newline46mondego>       // We read the next line into <doubleQuotes46>nextline<doubleQuotes46>, this is okay but not pretty.<newline46mondego>       // Also you need to check that nextline is not `null` here.<newline46mondego>       nextline = reader.readLine();<newline46mondego><newline46mondego>       StringTokenizer st2 = new StringTokenizer(nextline, <doubleQuotes46>,<doubleQuotes46>); //why???<newline46mondego>"
"3596splitHere46","20167392splitHere46","st"
"3597splitHere46","20167392splitHere46","<doubleQuotes46>4,<doubleQuotes46>"
"3598splitHere46","20167392splitHere46","nextline"
"3599splitHere46","20167392splitHere46","st"
"3600splitHere46","20167392splitHere46","st.nextToken()"
"3601splitHere46","20167392splitHere46","NoSuchElementException"
"3602splitHere46","20167392splitHere46","<doubleQuotes46>4<doubleQuotes46>"
"3603splitHere46","20167392splitHere46","st"
"3604splitHere46","20167392splitHere46","StringTokenizer"
"3605splitHere46","20167392splitHere46","<doubleQuotes46>Mo Farah,30,<doubleQuotes46>"
"3606splitHere46","20167392splitHere46","<doubleQuotes46>Mo Farah<doubleQuotes46>"
"3607splitHere46","20167392splitHere46","<doubleQuotes46>30<doubleQuotes46>"
"3608splitHere46","20167392splitHere46","st = new StringTokenizer(nextline, <doubleQuotes46>,<doubleQuotes46>); // Just parse the new line.<newline46mondego>       // You can reuse the old st variable as it is now depleted.<newline46mondego>"
"3609splitHere46","20167392splitHere46","<doubleQuotes46>Mo Farah<doubleQuotes46>"
"3610splitHere46","20167392splitHere46","st.hasMoreTokens()"
"3611splitHere46","20167392splitHere46","String name = st.nextToken(); // Change from st2 to st<newline46mondego>       System.out.println(name);<newline46mondego>       int age = Integer.parseInt(st.nextToken()); // Ditto<newline46mondego><newline46mondego>       System.out.println(age);<newline46mondego>"
"3612splitHere46","20167392splitHere46","StringTokenizer"
"3613splitHere46","20167392splitHere46","StringTokenizer"
"3614splitHere46","20167392splitHere46","StringTokenizer"
"3615splitHere46","20167512splitHere46","onBackPressed()"
"3616splitHere46","20167512splitHere46","@Override<newline46mondego>public void onBackPressed() {<newline46mondego>  setResult(RESULT_CANCELED);<newline46mondego>  finish();<newline46mondego>}<newline46mondego>"
"3617splitHere46","20167512splitHere46","onActivityResult"
"3618splitHere46","20167512splitHere46","resultCode"
"3619splitHere46","20167512splitHere46","requestCode"
"3620splitHere46","20167512splitHere46","@Override<newline46mondego>protected void onActivityResult(int requestCode, int resultCode, Intent intent) {<newline46mondego>    super.onActivityResult(requestCode, resultCode, intent);<newline46mondego> if (resultCode == RESULT_OK) {<newline46mondego>    Bundle extras = intent.getExtras();<newline46mondego>    switch(requestCode) {<newline46mondego>        case ACTIVITY_CREATE:<newline46mondego>            String title = extras.getString(NotesDbAdapter.KEY_TITLE);<newline46mondego>            String body = extras.getString(NotesDbAdapter.KEY_BODY);<newline46mondego>            mDbHelper.createNote(title, body);<newline46mondego>            fillData();<newline46mondego>            break;<newline46mondego>        case ACTIVITY_EDIT:<newline46mondego>            Long rowId = extras.getLong(NotesDbAdapter.KEY_ROWID);<newline46mondego>            if (rowId != null) {<newline46mondego>                String editTitle = extras.getString(NotesDbAdapter.KEY_TITLE);<newline46mondego>                String editBody = extras.getString(NotesDbAdapter.KEY_BODY);<newline46mondego>                mDbHelper.updateNote(rowId, editTitle, editBody);<newline46mondego>            }<newline46mondego>            fillData();<newline46mondego>            break;<newline46mondego>    }<newline46mondego>}<newline46mondego>}<newline46mondego>"
"3621splitHere46","20167533splitHere46","frame1.setVisible(true);"
"3622splitHere46","20167533splitHere46","StudentGUI"
"3623splitHere46","20167533splitHere46","yourframe.dispose()"
"3624splitHere46","20167533splitHere46","public void actionPerformed(ActionEvent e)<newline46mondego>        {<newline46mondego>            if(sb.isSelected())<newline46mondego>                StudentGUI();<newline46mondego>            else if(lb.isSelected())<newline46mondego>                System.out.println(<doubleQuotes46>Lecturer<doubleQuotes46>);<newline46mondego>            else if(cdb.isSelected())<newline46mondego>                System.out.println(<doubleQuotes46>Course Director<doubleQuotes46>);<newline46mondego>            else if(ab.isSelected())<newline46mondego>                System.out.println(<doubleQuotes46>Admin<doubleQuotes46>);<newline46mondego>            yourframe.dispose();//don't know your frame variable<newline46mondego>        }<newline46mondego><newline46mondego><newline46mondego><newline46mondego>public static void StudentGUI() <newline46mondego> {<newline46mondego>    JFrame frame1 = new JFrame(<doubleQuotes46>Input Username<doubleQuotes46>);<newline46mondego>    frame1.setSize(350, 180);<newline46mondego>    frame1.setDefaultCloseOperation(<newline46mondego>      JFrame.EXIT_ON_CLOSE);<newline46mondego>    frame1.setVisible(true);<newline46mondego>     //code omitted<newline46mondego>}<newline46mondego>"
"3625splitHere46","20167602splitHere46","Letter temp = new Letter ...<newline46mondego>"
"3626splitHere46","20167602splitHere46","return temp[];<newline46mondego>"
"3627splitHere46","20167602splitHere46","return temp;<newline46mondego>"
"3628splitHere46","20167602splitHere46","ArrayList<Letter>"
"3629splitHere46","20167602splitHere46","add"
"3630splitHere46","20167695splitHere46","int input = Integer.parseInt(text.getText());<newline46mondego>"
"3631splitHere46","20167745splitHere46","Ctrl"
"3632splitHere46","20167745splitHere46","Space"
"3633splitHere46","20167783splitHere46","=="
"3634splitHere46","20167783splitHere46","equals()"
"3635splitHere46","20167783splitHere46","str1.equals(str2)<newline46mondego>"
"3636splitHere46","20167783splitHere46","=="
"3637splitHere46","20167783splitHere46","String"
"3638splitHere46","20167995splitHere46","version"
"3639splitHere46","20167995splitHere46","version"
"3640splitHere46","20167995splitHere46","version"
"3641splitHere46","20167995splitHere46","version"
"3642splitHere46","20167995splitHere46","last_modified"
"3643splitHere46","20167995splitHere46","version"
"3644splitHere46","20167995splitHere46","@Version"
"3645splitHere46","20168075splitHere46","HKEY_LOCAL_MACHINE\SOFTWARE\Wow6432Node\JavaSoft\Java Runtime Environment<newline46mondego>"
"3646splitHere46","20168075splitHere46","RegistryKey.OpenBaseKey(RegistryHive.LocalMachine, RegistryView.Registry64);<newline46mondego>"
"3647splitHere46","20168097splitHere46","public class FilePanel /* extends not sure */ {<newline46mondego>    private File file;<newline46mondego><newline46mondego>    ...<newline46mondego><newline46mondego>    public File getFile() { return file; }<newline46mondego>    public void setFile(File f) { file = f; }<newline46mondego><newline46mondego>    ...<newline46mondego>}<newline46mondego><newline46mondego>/*<newline46mondego> * not sure how your event structure works<newline46mondego> * this is the common way to do it<newline46mondego> *<newline46mondego> * @Override<newline46mondego> * public void actionPerformed(ActionEvent evt) {<newline46mondego> *     if (evt.getSource() == saveAsButton) {<newline46mondego> *         saveAsAction();<newline46mondego> *     } else if (evt.getSource() == saveButton) {<newline46mondego> *         saveAction();<newline46mondego> *     }<newline46mondego> * }<newline46mondego> *<newline46mondego> */<newline46mondego><newline46mondego>// recommend refactor so <doubleQuotes46>save<doubleQuotes46> can call <doubleQuotes46>save as<doubleQuotes46> without regard to event<newline46mondego>private void saveAsAction() {<newline46mondego><newline46mondego>    int exInput = JOptionPane.NO_OPTION;<newline46mondego>    File file = null;<newline46mondego><newline46mondego>    // use a do-while and <doubleQuotes46>no<doubleQuotes46> to reshow the save dialog if exists<newline46mondego><newline46mondego>    do {<newline46mondego>        int returnVal = fileChooser.showSaveDialog(null);<newline46mondego><newline46mondego>        if (returnVal != JFileChooser.APPROVE_OPTION) {<newline46mondego>            return;<newline46mondego>        }<newline46mondego><newline46mondego>        file = fileChooser.getSelectedFile();<newline46mondego><newline46mondego>        if (!file.getName().endsWith(<doubleQuotes46>.txt<doubleQuotes46>)) {<newline46mondego>            file = new File(file.getParentFile(), file.getName() + <doubleQuotes46>.txt<doubleQuotes46>);<newline46mondego>        }<newline46mondego><newline46mondego>        if (file.exists()) {<newline46mondego>            exInput = JOptionPane.showConfirmDialog(<newline46mondego>                            null, <doubleQuotes46>This file already exists, overwrite it?<doubleQuotes46>);<newline46mondego><newline46mondego>            if (exInput == JOptionPane.CANCEL_OPTION) {<newline46mondego>                return;<newline46mondego>            }<newline46mondego>        }<newline46mondego>    } while (file.exists() && exInput == JOptionPane.NO_OPTION);<newline46mondego><newline46mondego>    FilePanel selectedComp = (FilePanel)tabbedPane.getSelectedComponent();<newline46mondego><newline46mondego>    if (selectedComp != null) {<newline46mondego>        String text = selectedComp.getTextArea().getText();<newline46mondego>        file = writeToFile(file, text);<newline46mondego>        selectedComp.setFile(file);<newline46mondego><newline46mondego>    } else {<newline46mondego>        System.out.println(<doubleQuotes46>No component selected<doubleQuotes46>);<newline46mondego>        return;<newline46mondego>    }<newline46mondego><newline46mondego>    tabbedPane.setTitleAt(tabbedPane.getSelectedIndex(), file.getName());<newline46mondego>    ClosableTab.apply(tabbedPane, tabbedPane.getTabCount() - 1);<newline46mondego>}<newline46mondego><newline46mondego>private void saveAction() {<newline46mondego><newline46mondego>    FilePanel selectedComp = (FilePanel)tabbedPane.getSelectedComponent();<newline46mondego><newline46mondego>    if (selectedComp != null) {<newline46mondego>        File file = selectedComp.getFile();<newline46mondego><newline46mondego>        if (file == null) {<newline46mondego>            // imply no <doubleQuotes46>save as<doubleQuotes46> performed<newline46mondego><newline46mondego>            saveAsAction();<newline46mondego>            return;<newline46mondego>        }<newline46mondego><newline46mondego>        String text = selectedComp.getTextArea().getText();<newline46mondego>        file = writeToFile(file, text);<newline46mondego>        selectedComp.setFile(file);<newline46mondego><newline46mondego>    } else {<newline46mondego>        System.out.println(<doubleQuotes46>No component selected<doubleQuotes46>);<newline46mondego>    }<newline46mondego>}<newline46mondego><newline46mondego>// recommend refactor so <doubleQuotes46>save<doubleQuotes46> and <doubleQuotes46>save as<doubleQuotes46> can share write code<newline46mondego>private static File writeToFile(File file, String text) {<newline46mondego><newline46mondego>    try {<newline46mondego><newline46mondego>        FileWriter fw = new FileWriter(file);<newline46mondego>        BufferedWriter bw = new BufferedWriter(fw);<newline46mondego><newline46mondego>        bw.write(text);<newline46mondego>        bw.close();<newline46mondego><newline46mondego>        return file;<newline46mondego><newline46mondego>    } catch(Exception e) {<newline46mondego>        // handle your IO errors better than this<newline46mondego>        // files are not willy-nilly!<newline46mondego><newline46mondego>        System.out.println(<doubleQuotes46>err<doubleQuotes46>);<newline46mondego>        return null;<newline46mondego>    }<newline46mondego>}<newline46mondego>"
"3648splitHere46","20168106splitHere46","HashMap"
"3649splitHere46","20168106splitHere46","HashMap<Integer, CheckBox> map = new HashMap<Integer, CheckBox>();<newline46mondego>map.put(1, (CheckBox)findViewById(R.id.checkBox1));<newline46mondego>...<newline46mondego>CheckBox a = map.get(1);<newline46mondego>"
"3650splitHere46","20168106splitHere46","String"
"3651splitHere46","20168106splitHere46","Object"
"3652splitHere46","20168106splitHere46","HashMap<Integer, CheckBox> map = new HashMap<Integer, CheckBox>();<newline46mondego>map.put(1, (CheckBox)findViewById(R.id.checkBox1));<newline46mondego>map.put(2, (CheckBox)findViewById(R.id.checkBox2));<newline46mondego>...<newline46mondego>CheckBox a = map.get(1);<newline46mondego>CheckBox b = map.get(2);<newline46mondego>"
"3653splitHere46","20168106splitHere46","View"
"3654splitHere46","20168106splitHere46","CheckBox a = myView.getCheckBoxMap().get(1);<newline46mondego>"
"3655splitHere46","20168106splitHere46","Activity"
"3656splitHere46","20168106splitHere46","HashMap<View, HashMap<Integer, CheckBox>> mainMap = new HashMap<View, HashMap<Integer, CheckBox>>();<newline46mondego>"
"3657splitHere46","20168106splitHere46","View view1 = createFirstView();<newline46mondego>CheckBox a = (CheckBox)view1.findViewById(R.id.checkBox1);<newline46mondego>CheckBox b = (CheckBox)view1.findViewById(R.id.checkBox2);<newline46mondego>HashMap<Integer, CheckBox> view1Map = new HashMap<Integer, CheckBox>();<newline46mondego>view1Map.put(1, a);<newline46mondego>view1Map.put(2, b);<newline46mondego>mainMap.put(view1, view1Map);<newline46mondego>// rinse and repeat for every instantiated view, changing the variables each time - ie, view2/view2Map, etc.<newline46mondego>"
"3658splitHere46","20168110splitHere46","@EnableTransactionManagement<newline46mondego>"
"3659splitHere46","20168110splitHere46","@EnableTransactionManagement<newline46mondego>    public class DBTest extends AbstractH2TestCase {<newline46mondego>"
"3660splitHere46","20168145splitHere46","<uses-permission android:name=<doubleQuotes46>android.permission.READ_EXTERNAL_STORAGE<doubleQuotes46> /><newline46mondego>"
"3661splitHere46","20168268splitHere46","i = (495 / (1.0324 - 0.19077 * (Math.log10(76.2 - 25.4)) + 0.15456 * (Math.log10(170.18))) - 450);<newline46mondego>"
"3662splitHere46","20168268splitHere46","20.630024173730078<newline46mondego>"
"3663splitHere46","20168363splitHere46","void run() {<newline46mondego>    //some work<newline46mondego>    try (FileInputStream fis=new FileInputStream(new File(<doubleQuotes46>/home/share/_config<doubleQuotes46>))) {<newline46mondego>        //some work with fis<newline46mondego>    }<newline46mondego>}<newline46mondego>"
"3664splitHere46","20168363splitHere46","fis"
"3665splitHere46","20168363splitHere46","try"
"3666splitHere46","20168376splitHere46","import java.math.BigInteger;<newline46mondego>"
"3667splitHere46","20168376splitHere46","BigInteger n = BigInteger.valueOf(2);<newline46mondego>"
"3668splitHere46","20168376splitHere46","n = n.pow(1000);<newline46mondego>"
"3669splitHere46","20168376splitHere46","toString()"
"3670splitHere46","20168376splitHere46","int"
"3671splitHere46","20168393splitHere46","Student s = new Student(<doubleQuotes46>Mike<doubleQuotes46>, <doubleQuotes46>Tyson<doubleQuotes46>);<newline46mondego>Student s1 = new Student(<doubleQuotes46>Mike<doubleQuotes46>, <doubleQuotes46>Wilson<doubleQuotes46>);<newline46mondego>City c = new City(<doubleQuotes46>London<doubleQuotes46>);<newline46mondego>s.setCity(c);<newline46mondego>s1.setCity(c);<newline46mondego>session.save(c);<newline46mondego>session.save(s);<newline46mondego>session.save(s1);<newline46mondego>"
"3672splitHere46","20168447splitHere46","return (double)((elapsedTime/1000000000.0)/queries.length);<newline46mondego>"
"3673splitHere46","20168447splitHere46","return (double)((elapsedTime*1000.0)/queries.length);<newline46mondego>"
"3674splitHere46","20168447splitHere46","startTime"
"3675splitHere46","20168447splitHere46","endTime"
"3676splitHere46","20168447splitHere46","elapsedTime"
"3677splitHere46","20168468splitHere46","setDocumentFilter(...)"
"3678splitHere46","20168602splitHere46","ValidateUser newUser = new ValidateUser();<newline46mondego>    newUser.setUser(<doubleQuotes46>administrator<doubleQuotes46>);<newline46mondego>    newUser.setPass(<doubleQuotes46>asdf123<doubleQuotes46>);<newline46mondego>    newUser.setBalance(0.8);<newline46mondego>    newUser.setType(<doubleQuotes46>admin<doubleQuotes46>);<newline46mondego>    personer.add(newUser);<newline46mondego><newline46mondego>    newUser.setUser(<doubleQuotes46>different admin<doubleQuotes46>);<newline46mondego>    personer.add(newUser);<newline46mondego>"
"3679splitHere46","20168602splitHere46","newUser = new ValidateUser();<newline46mondego> newUser.setUser(<doubleQuotes46>foo<doubleQuotes46>);<newline46mondego> personer.add(newUser);<newline46mondego>"
"3680splitHere46","20168648splitHere46","("
"3681splitHere46","20168648splitHere46","\\("
"3682splitHere46","20168668splitHere46","<doubleQuotes46>//*[local-name()='startEvent']/@id<doubleQuotes46>"
"3683splitHere46","20168691splitHere46","javac *.java"
"3684splitHere46","20168691splitHere46",".class"
"3685splitHere46","20168691splitHere46",".java"
"3686splitHere46","20168691splitHere46","// file: A.java<newline46mondego>public class A { public static void main(String[] args) { new B().run(); } }<newline46mondego><newline46mondego>// file: B.java<newline46mondego>public class B { void run() { new C().run(); } }<newline46mondego><newline46mondego>// file: C.java<newline46mondego>public class C { void run() { System.out.println(<doubleQuotes46>hello world<doubleQuotes46>); } }<newline46mondego>"
"3687splitHere46","20168691splitHere46","A"
"3688splitHere46","20168691splitHere46","B"
"3689splitHere46","20168691splitHere46","C"
"3690splitHere46","20168691splitHere46","B.java"
"3691splitHere46","20168691splitHere46","A"
"3692splitHere46","20168691splitHere46","A"
"3693splitHere46","20168691splitHere46","B"
"3694splitHere46","20168691splitHere46","B.java"
"3695splitHere46","20168691splitHere46","B.class"
"3696splitHere46","20168691splitHere46","C"
"3697splitHere46","20168691splitHere46","C.java"
"3698splitHere46","20168691splitHere46","C.java"
"3699splitHere46","20168691splitHere46","A"
"3700splitHere46","20168691splitHere46","A"
"3701splitHere46","20168691splitHere46","B"
"3702splitHere46","20168691splitHere46","B.java"
"3703splitHere46","20168691splitHere46","C"
"3704splitHere46","20168691splitHere46","C.java"
"3705splitHere46","20168692splitHere46","?"
"3706splitHere46","20168693splitHere46","Z"
"3707splitHere46","20168693splitHere46","SimpleDateFormat sdf = new SimpleDateFormat(<doubleQuotes46>yyyy-MM-dd'T'HH:mm:ss.SSS'Z'<doubleQuotes46>);<newline46mondego>"
"3708splitHere46","20168854splitHere46","{<newline46mondego>    <doubleQuotes46>deptNo<doubleQuotes46>:{<newline46mondego>          <doubleQuotes46>deptNo<doubleQuotes46>:500,<newline46mondego>          <doubleQuotes46>dname<doubleQuotes46>:<doubleQuotes46>RESEARCH<doubleQuotes46>,<newline46mondego>          <doubleQuotes46>loc<doubleQuotes46>:<doubleQuotes46>DALLAS<doubleQuotes46><newline46mondego>       },<newline46mondego>       <doubleQuotes46>empno<doubleQuotes46>:7876,<newline46mondego>       <doubleQuotes46>ename<doubleQuotes46>:<doubleQuotes46>ADAMS<doubleQuotes46>,<newline46mondego>       <doubleQuotes46>job<doubleQuotes46>:<doubleQuotes46>1100<doubleQuotes46>,<newline46mondego>       <doubleQuotes46>sal<doubleQuotes46>:<doubleQuotes46>7788<doubleQuotes46><newline46mondego>    }<newline46mondego>"
"3709splitHere46","20168854splitHere46","function formToJSON() {<newline46mondego><newline46mondego>  var test = {  empno:7876, ename:'ADAMS', job:1100, sal:7788,<newline46mondego>                 deptNo:{deptNo:6, dname:'RESEARCH', loc:'DALLAS'}<newline46mondego>               };<newline46mondego><newline46mondego>    return JSON.stringify(test);<newline46mondego><newline46mondego>    }<newline46mondego>"
"3710splitHere46","20169024splitHere46","String.format"
"3711splitHere46","20169024splitHere46","sprintf"
"3712splitHere46","20169024splitHere46","g.drawString(String.format(<doubleQuotes46>The numbers entered are: %.3f, %.3f, %.3f<doubleQuotes46>, number1, number2, number3), 25, 25) <newline46mondego>"
"3713splitHere46","20169035splitHere46","JFileChooser chooser = new JFileChooser();<newline46mondego>if (chooser.showOpenDialog(null) == JFileChooser.APPROVE_OPTION) {<newline46mondego>File myfile = chooser.getSelectedFile();<newline46mondego>try {<newline46mondego><newline46mondego>    Scanner in = new Scanner(myfile);<newline46mondego><newline46mondego>    int counter = 0;<newline46mondego>while(in.hasNextLine()){<newline46mondego> String word = in.nextLine();<newline46mondego>    for (int i = 0; i < word.length(); i++) {<newline46mondego>        if (word.charAt(i) == 'a') {<newline46mondego>            counter++;<newline46mondego>        }<newline46mondego>    }<newline46mondego>}<newline46mondego><newline46mondego>    System.out.println(<doubleQuotes46># of chars: <doubleQuotes46> + counter);<newline46mondego>} catch (IOException e) {<newline46mondego>    System.err.println(<doubleQuotes46>A reading error occured<doubleQuotes46>);<newline46mondego>}<newline46mondego>}<newline46mondego>"
"3714splitHere46","20169054splitHere46","if(word.length()==0){<newline46mondego>    System.out.println(<doubleQuotes46>word length is 0<doubleQuotes46>);<newline46mondego>} else if(action.equals(<doubleQuotes46>insert<doubleQuotes46>)){<newline46mondego>    insert(word);<newline46mondego>} else if(action.equals(<doubleQuotes46>delete<doubleQuotes46>)){<newline46mondego>    delete(word);<newline46mondego>}<newline46mondego>"
"3715splitHere46","20169054splitHere46","if(word.length()==0){<newline46mondego>    System.out.println(<doubleQuotes46>word length is 0<doubleQuotes46>);<newline46mondego>} else <newline46mondego>    if(action.equals(<doubleQuotes46>insert<doubleQuotes46>)){<newline46mondego>       insert(word);<newline46mondego>    } else <newline46mondego>       if(action.equals(<doubleQuotes46>delete<doubleQuotes46>)){<newline46mondego>           delete(word);<newline46mondego>       }<newline46mondego>"
"3716splitHere46","20169054splitHere46","if(word.length()==0){<newline46mondego>    System.out.println(<doubleQuotes46>word length is 0<doubleQuotes46>);<newline46mondego>} else {<newline46mondego>    if(action.equals(<doubleQuotes46>insert<doubleQuotes46>)){<newline46mondego>       insert(word);<newline46mondego>    } else {<newline46mondego>       if(action.equals(<doubleQuotes46>delete<doubleQuotes46>)){<newline46mondego>           delete(word);<newline46mondego>       }<newline46mondego>    }<newline46mondego>}<newline46mondego>"
"3717splitHere46","20169138splitHere46","File f = new File(strFilePath);<newline46mondego>if(f.exists() && !file.isDirectory()) {<newline46mondego>    /* crash the way you like */<newline46mondego>}<newline46mondego>"
"3718splitHere46","20169182splitHere46","IllegalStateException"
"3719splitHere46","20169182splitHere46","SQLException"
"3720splitHere46","20169182splitHere46","SQLException"
"3721splitHere46","20169199splitHere46","RectF rect = new RectF(left, top, right, bottom);<newline46mondego>canvas.drawRect(rect, paint);<newline46mondego>canvas.drawOval(rect, paint);<newline46mondego>"
"3722splitHere46","20169313splitHere46","0011<newline46mondego>0101<newline46mondego>----- AND<newline46mondego>0001 == 1<newline46mondego>"
"3723splitHere46","20169313splitHere46","0011<newline46mondego>0101<newline46mondego>----- OR<newline46mondego>0111 == 7<newline46mondego>"
"3724splitHere46","20169313splitHere46","-x = ~x + 1 = ~(x - 1)"
"3725splitHere46","20169313splitHere46","00001000 //8<newline46mondego>11111000 //-8<newline46mondego>-------- AND<newline46mondego>00001000 // 8<newline46mondego>"
"3726splitHere46","20169313splitHere46","00001000 // 8<newline46mondego>00000111 // 8 - 1 = 7<newline46mondego>11111000 // -8<newline46mondego>"
"3727splitHere46","20169313splitHere46","100 & -100"
"3728splitHere46","20169313splitHere46","01100100 // 100<newline46mondego>01100011 // 99<newline46mondego>10011100 // -100<newline46mondego>"
"3729splitHere46","20169313splitHere46","01100100 // 100<newline46mondego>10011100 // -100<newline46mondego>-------- AND<newline46mondego>00000100 // 4<newline46mondego>"
"3730splitHere46","20169313splitHere46","x & -x"
"3731splitHere46","20169313splitHere46","x & x"
"3732splitHere46","20169313splitHere46","x"
"3733splitHere46","20169313splitHere46","0 & 1 = 0"
"3734splitHere46","20169318splitHere46","for(i=0; i<x.length;i++)<newline46mondego>{<newline46mondego>    System.out.println(<doubleQuotes46>Enter name: <doubleQuotes46>);<newline46mondego>    x[i] = in.nextLine();<newline46mondego>    System.out.println(<doubleQuotes46>Enter  Mark one:  <doubleQuotes46>);<newline46mondego>    x2[i] = in.nextFloat();<newline46mondego>    in.nextLine();   // consume newline character<newline46mondego>    System.out.println(<doubleQuotes46>Enter  Mark two:  <doubleQuotes46>);<newline46mondego>    x3[i] = in.nextFloat();<newline46mondego>    in.nextLine();   // consume newline character<newline46mondego>}<newline46mondego>"
"3735splitHere46","20169318splitHere46","for(i=0; i<x.length;i++)<newline46mondego>{<newline46mondego>    System.out.println(<doubleQuotes46>Enter name: <doubleQuotes46>);<newline46mondego>    x[i] = in.nextLine();<newline46mondego>    System.out.println(<doubleQuotes46>Enter  Mark one:  <doubleQuotes46>);<newline46mondego>    x2[i] = Float.parseFloat(in.nextLine());<newline46mondego>    System.out.println(<doubleQuotes46>Enter  Mark two:  <doubleQuotes46>);<newline46mondego>    x3[i] = Float.parseFloat(in.nextLine());<newline46mondego>}<newline46mondego>"
"3736splitHere46","20169333splitHere46","<?xml version=<doubleQuotes46>1.0<doubleQuotes46> encoding=<doubleQuotes46>UTF-8<doubleQuotes46>?><newline46mondego><xs:schema xmlns:xs=<doubleQuotes46>http://www.w3.org/2001/XMLSchema<doubleQuotes46> xmlns=<doubleQuotes46>http://www.samnunnally.com<doubleQuotes46> targetNamespace=<doubleQuotes46>http://www.samnunnally.com<doubleQuotes46> version=<doubleQuotes46>1.0<doubleQuotes46>><newline46mondego><xs:element name=<doubleQuotes46>xmlMessage<doubleQuotes46>><newline46mondego>    <xs:complexType><newline46mondego>        <xs:sequence><newline46mondego>            <xs:element name=<doubleQuotes46>header<doubleQuotes46> type=<doubleQuotes46>header<doubleQuotes46> minOccurs=<doubleQuotes46>1<doubleQuotes46> maxOccurs=<doubleQuotes46>1<doubleQuotes46>/><newline46mondego>            <xs:element ref=<doubleQuotes46>body<doubleQuotes46>/><newline46mondego>        </xs:sequence><newline46mondego>    </xs:complexType><newline46mondego></xs:element><newline46mondego><xs:complexType name=<doubleQuotes46>header<doubleQuotes46>><newline46mondego>    <xs:sequence><newline46mondego>        <xs:element name=<doubleQuotes46>message_class<doubleQuotes46> type=<doubleQuotes46>xs:string<doubleQuotes46>/><newline46mondego>        <xs:element name=<doubleQuotes46>message_id<doubleQuotes46> type=<doubleQuotes46>xs:int<doubleQuotes46>/><newline46mondego>        <xs:element name=<doubleQuotes46>message_length<doubleQuotes46> type=<doubleQuotes46>xs:int<doubleQuotes46>/><newline46mondego>        <xs:element name=<doubleQuotes46>software_version<doubleQuotes46> type=<doubleQuotes46>xs:string<doubleQuotes46>/><newline46mondego>        <xs:element name=<doubleQuotes46>correlation_id<doubleQuotes46> type=<doubleQuotes46>xs:string<doubleQuotes46>/><newline46mondego>        <xs:element name=<doubleQuotes46>session_id<doubleQuotes46> type=<doubleQuotes46>xs:string<doubleQuotes46>/><newline46mondego>        <xs:element name=<doubleQuotes46>return_code<doubleQuotes46> type=<doubleQuotes46>xs:string<doubleQuotes46>/><newline46mondego>    </xs:sequence><newline46mondego></xs:complexType><newline46mondego><xs:element name=<doubleQuotes46>body<doubleQuotes46> type=<doubleQuotes46>body<doubleQuotes46>/><newline46mondego><xs:complexType name=<doubleQuotes46>body<doubleQuotes46> abstract=<doubleQuotes46>true<doubleQuotes46>><newline46mondego>    <xs:sequence/><newline46mondego></xs:complexType><newline46mondego>"
"3737splitHere46","20169333splitHere46","<?xml version=<doubleQuotes46>1.0<doubleQuotes46> encoding=<doubleQuotes46>UTF-8<doubleQuotes46>?><newline46mondego><xs:schema xmlns:xs=<doubleQuotes46>http://www.w3.org/2001/XMLSchema<doubleQuotes46><newline46mondego>       xmlns=<doubleQuotes46>http://www.samnunnally.com<doubleQuotes46> <newline46mondego>       targetNamespace=<doubleQuotes46>http://www.samnunnally.com<doubleQuotes46> <newline46mondego>       version=<doubleQuotes46>1.0<doubleQuotes46>><newline46mondego><xs:include schemaLocation=<doubleQuotes46>XmlMessage.xsd<doubleQuotes46>/><newline46mondego><xs:element name=<doubleQuotes46>foo<doubleQuotes46> type=<doubleQuotes46>foo<doubleQuotes46> substitutionGroup=<doubleQuotes46>body<doubleQuotes46>/><newline46mondego><xs:complexType name=<doubleQuotes46>foo<doubleQuotes46>><newline46mondego>    <xs:complexContent><newline46mondego>        <xs:extension base=<doubleQuotes46>body<doubleQuotes46>><newline46mondego>            <xs:sequence><newline46mondego>                <xs:element name=<doubleQuotes46>customers<doubleQuotes46> type=<doubleQuotes46>customer<doubleQuotes46> minOccurs=<doubleQuotes46>1<doubleQuotes46> maxOccurs=<doubleQuotes46>unbounded<doubleQuotes46>/><newline46mondego>            </xs:sequence><newline46mondego>        </xs:extension><newline46mondego>    </xs:complexContent><newline46mondego></xs:complexType><newline46mondego><xs:complexType name=<doubleQuotes46>customer<doubleQuotes46>><newline46mondego>    <xs:sequence><newline46mondego>        <xs:element name=<doubleQuotes46>customer_id<doubleQuotes46> type=<doubleQuotes46>customerId<doubleQuotes46> nillable=<doubleQuotes46>false<doubleQuotes46> minOccurs=<doubleQuotes46>1<doubleQuotes46> maxOccurs=<doubleQuotes46>1<doubleQuotes46>/><newline46mondego>        <xs:element name=<doubleQuotes46>name<doubleQuotes46> type=<doubleQuotes46>xs:string<doubleQuotes46>/><newline46mondego>        <xs:element name=<doubleQuotes46>street<doubleQuotes46> type=<doubleQuotes46>xs:string<doubleQuotes46>/><newline46mondego>        <xs:element name=<doubleQuotes46>city<doubleQuotes46> type=<doubleQuotes46>xs:string<doubleQuotes46>/><newline46mondego>        <xs:element name=<doubleQuotes46>state<doubleQuotes46> type=<doubleQuotes46>xs:string<doubleQuotes46>/><newline46mondego>        <xs:element name=<doubleQuotes46>zip<doubleQuotes46> type=<doubleQuotes46>xs:string<doubleQuotes46>/><newline46mondego>        <xs:element name=<doubleQuotes46>phone<doubleQuotes46> type=<doubleQuotes46>xs:string<doubleQuotes46>/><newline46mondego>    </xs:sequence><newline46mondego></xs:complexType><newline46mondego><xs:complexType name=<doubleQuotes46>customerId<doubleQuotes46>><newline46mondego>    <xs:sequence><newline46mondego>        <xs:element name=<doubleQuotes46>id<doubleQuotes46> type=<doubleQuotes46>xs:string<doubleQuotes46> minOccurs=<doubleQuotes46>1<doubleQuotes46> maxOccurs=<doubleQuotes46>1<doubleQuotes46>/><newline46mondego>    </xs:sequence><newline46mondego></xs:complexType><newline46mondego>"
"3738splitHere46","20169333splitHere46","package com.samnunnally;<newline46mondego><newline46mondego>import javax.xml.bind.JAXBElement;<newline46mondego>import javax.xml.bind.annotation.XmlAccessType;<newline46mondego>import javax.xml.bind.annotation.XmlAccessorType;<newline46mondego>import javax.xml.bind.annotation.XmlElement;<newline46mondego>import javax.xml.bind.annotation.XmlElementRef;<newline46mondego>import javax.xml.bind.annotation.XmlRootElement;<newline46mondego>import javax.xml.bind.annotation.XmlType;<newline46mondego><newline46mondego>@XmlAccessorType(XmlAccessType.FIELD)<newline46mondego>@XmlType(name = <doubleQuotes46><doubleQuotes46>, propOrder = {<newline46mondego>    <doubleQuotes46>header<doubleQuotes46>,<newline46mondego>    <doubleQuotes46>body<doubleQuotes46><newline46mondego>})<newline46mondego>@XmlRootElement(name = <doubleQuotes46>xmlMessage<doubleQuotes46>)<newline46mondego>public class XmlMessage {<newline46mondego><newline46mondego>    @XmlElement(required = true)<newline46mondego>    protected Header header;<newline46mondego>    @XmlElementRef(name = <doubleQuotes46>body<doubleQuotes46>, namespace = <doubleQuotes46>http://www.samnunnally.com<doubleQuotes46>, type = JAXBElement.class)<newline46mondego>    protected JAXBElement<? extends Body> body;<newline46mondego><newline46mondego>    public Header getHeader() {<newline46mondego>        return header;<newline46mondego>    }<newline46mondego><newline46mondego>    public void setHeader(Header value) {<newline46mondego>        this.header = value;<newline46mondego>    }<newline46mondego><newline46mondego>    public JAXBElement<? extends Body> getBody() {<newline46mondego>        return body;<newline46mondego>    }<newline46mondego><newline46mondego>    public void setBody(JAXBElement<? extends Body> value) {<newline46mondego>        this.body = value;<newline46mondego>    }<newline46mondego>}<newline46mondego>"
"3739splitHere46","20169333splitHere46","package com.samnunnally;<newline46mondego><newline46mondego>import javax.xml.bind.annotation.XmlAccessType;<newline46mondego>import javax.xml.bind.annotation.XmlAccessorType;<newline46mondego>import javax.xml.bind.annotation.XmlSeeAlso;<newline46mondego>import javax.xml.bind.annotation.XmlType;<newline46mondego><newline46mondego>@XmlAccessorType(XmlAccessType.FIELD)<newline46mondego>@XmlType(name = <doubleQuotes46>body<doubleQuotes46>)<newline46mondego>@XmlSeeAlso({<newline46mondego>Foo.class<newline46mondego>})<newline46mondego>public abstract class Body {<newline46mondego>}<newline46mondego>"
"3740splitHere46","20169333splitHere46","package com.samnunnally;<newline46mondego><newline46mondego>import java.util.ArrayList;<newline46mondego>import java.util.List;<newline46mondego>import javax.xml.bind.annotation.XmlAccessType;<newline46mondego>import javax.xml.bind.annotation.XmlAccessorType;<newline46mondego>import javax.xml.bind.annotation.XmlElement;<newline46mondego>import javax.xml.bind.annotation.XmlType;<newline46mondego><newline46mondego>@XmlAccessorType(XmlAccessType.FIELD)<newline46mondego>@XmlType(name = <doubleQuotes46>foo<doubleQuotes46>, propOrder = {<newline46mondego>    <doubleQuotes46>customers<doubleQuotes46><newline46mondego>})<newline46mondego>public class Foo<newline46mondego>    extends Body<newline46mondego>{<newline46mondego><newline46mondego>    @XmlElement(required = true)<newline46mondego>    protected List<Customer> customers;<newline46mondego><newline46mondego>    public List<Customer> getCustomers() {<newline46mondego>        if (customers == null) {<newline46mondego>            customers = new ArrayList<Customer>();<newline46mondego>        }<newline46mondego>        return this.customers;<newline46mondego>    }<newline46mondego><newline46mondego>}<newline46mondego>"
"3741splitHere46","20169337splitHere46","abstract class Tree { .... }<newline46mondego>class Leave extends Tree { int number; ... }<newline46mondego>class Expr  extends Tree { Tree left, right; String operation;  .... }<newline46mondego><newline46mondego>public Tree makeBinaryTree(expr):<newline46mondego>   element = next element in expr<newline46mondego>   if element is a number:<newline46mondego>      return new Leave(element)<newline46mondego>   else: // element is an operator<newline46mondego>      left = makeBinaryTree(expr)<newline46mondego>      right = makeBinaryTree(expr)<newline46mondego>   return new Expr(left, right, element)<newline46mondego>"
"3742splitHere46","20169337splitHere46","* + 5 1 7<newline46mondego>"
"3743splitHere46","20169337splitHere46","Expr(Expr(Leave(5), Leave(1), <doubleQuotes46>+<doubleQuotes46>), Leave(7), <doubleQuotes46>*<doubleQuotes46>)<newline46mondego>"
"3744splitHere46","20169350splitHere46","setText(...)"
"3745splitHere46","20169350splitHere46","setText(..)"
"3746splitHere46","20169350splitHere46","append(...)"
"3747splitHere46","20169350splitHere46","append(...)"
"3748splitHere46","20169350splitHere46","for (int i = 0; i < someLength; i++) {<newline46mondego>  double value = doSomeCalculation():<newline46mondego>  myTextField.append(<doubleQuotes46>result: <doubleQuotes46> + value + <doubleQuotes46>\n<doubleQuotes46>);<newline46mondego>}<newline46mondego>"
"3749splitHere46","20169413splitHere46","public void restart() {<newline46mondego>          StringBuilder cmd = new StringBuilder();<newline46mondego>            cmd.append(System.getProperty(<doubleQuotes46>java.home<doubleQuotes46>) + File.separator + <doubleQuotes46>bin<doubleQuotes46> + File.separator + <doubleQuotes46>java <doubleQuotes46>);<newline46mondego>            for (String jvmArg : ManagementFactory.getRuntimeMXBean().getInputArguments()) {<newline46mondego>                cmd.append(jvmArg + <doubleQuotes46> <doubleQuotes46>);<newline46mondego>            }<newline46mondego>            cmd.append(<doubleQuotes46>-cp <doubleQuotes46>).append(ManagementFactory.getRuntimeMXBean().getClassPath()).append(<doubleQuotes46> <doubleQuotes46>);<newline46mondego>            cmd.append(Window.class.getName()).append(<doubleQuotes46> <doubleQuotes46>);<newline46mondego><newline46mondego>            try {<newline46mondego>                Runtime.getRuntime().exec(cmd.toString());<newline46mondego>            } catch (IOException e) {<newline46mondego>                // TODO Auto-generated catch block<newline46mondego>                e.printStackTrace();<newline46mondego>            }<newline46mondego>            System.exit(0);<newline46mondego>    }<newline46mondego>"
"3750splitHere46","20169432splitHere46","$ wget --no-cookies --no-check-certificate --header <doubleQuotes46>Cookie: gpw_e24=http%3A%2F%2Fwww.oracle.com%2F<doubleQuotes46> <doubleQuotes46>http://download.oracle.com/otn-pub/java/jdk/6u38-b05/jdk-6u38-linux-i586.bin<doubleQuotes46><newline46mondego>"
"3751splitHere46","20169453splitHere46","public class Carsavings3  { <newline46mondego><newline46mondego>    //These are your class attributes.<newline46mondego>    private double equalAmounts;<newline46mondego>    private double l;<newline46mondego>    private double amount;<newline46mondego>    private double numberOfYears;<newline46mondego>    private double carCost;<newline46mondego><newline46mondego>    public static void main(String[] args) {<newline46mondego>       //Here you are declaring a variable to use later in the method.<newline46mondego>       double equalAmounts, l, amount, numberOfYears, carCost;<newline46mondego><newline46mondego>       // Then you assign values to those variables. You must always assign the variables you declare with some value before you can use them.<newline46mondego>       equalAmounts = 0;<newline46mondego>       l = 0;<newline46mondego>       amount = 0;<newline46mondego><newline46mondego>       //numberOfYears, carCost variables are being initialized inside your while loops, so you need not initialize them here.        <newline46mondego><newline46mondego>    Scanner read = new Scanner(System.in);<newline46mondego><newline46mondego>    do {<newline46mondego>        //This will print out a request for the user<newline46mondego>        System.out.println(<doubleQuotes46>Please input the cost of the car, a real number 0 or greater\n<doubleQuotes46>);<newline46mondego>        //This will ensure the input value will remain between 0 and above<newline46mondego>        carCost = read.nextDouble();<newline46mondego>    } while (carCost <= 1);<newline46mondego><newline46mondego>    do {<newline46mondego>        //This will print out a request for the user<newline46mondego>        System.out.println(<doubleQuotes46>Please input number of years, an integer between 1 and 10\n<doubleQuotes46>);<newline46mondego>        //This will ensure the input value will remain between 1 and 10<newline46mondego>        numberOfYears = read.nextDouble();<newline46mondego>    } while ((numberOfYears < 1) || (numberOfYears > 10));<newline46mondego><newline46mondego>  //This is where you create an instance of the class Carsavings3 using a parametrized constructor. You can use the variables declared and initialzed above here. But in order to use a parametrized constructor, you need to create such a constructor in your class.<newline46mondego>  Carsavings3 Carsavings2Object = new Carsavings3 (equalAmounts, l, amount, numberOfYears, carCost);<newline46mondego>}<newline46mondego><newline46mondego> // This is how a parametrized constructor is written. A parametrized constructor is used to initialize the attributes of that class to the values passed as the parameters to this method.<newline46mondego>private Carsavings3 (double equalAmounts, double l, double amount, double numberOfYears, double carCost) {<newline46mondego>    this.equalAmounts = equalAmounts;<newline46mondego>    this.l = l;<newline46mondego>    this.amount = amount;<newline46mondego>    this.numberOfYears = numberOfYears;<newline46mondego>    this.carCost = carCost;<newline46mondego><newline46mondego>}<newline46mondego>"
"3752splitHere46","20169470splitHere46","URL"
"3753splitHere46","20169470splitHere46","File"
"3754splitHere46","20169470splitHere46","URL"
"3755splitHere46","20169507splitHere46","Object"
"3756splitHere46","20169507splitHere46","obj"
"3757splitHere46","20169507splitHere46","Class<?> clazz = obj.getClass();<newline46mondego>Field field = clazz.getDeclaredField(<doubleQuotes46>context<doubleQuotes46>);<newline46mondego>field.setAccessible(true);<newline46mondego>UriInfo context = (UriInfo) field.get(obj);<newline46mondego>"
"3758splitHere46","20169593splitHere46","paintComponent(...)"
"3759splitHere46","20169593splitHere46","ArrayList<Point>"
"3760splitHere46","20169593splitHere46","f.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);"
"3761splitHere46","20169653splitHere46","(arg1.b + arg2)"
"3762splitHere46","20169653splitHere46","char"
"3763splitHere46","20169653splitHere46","char"
"3764splitHere46","20169653splitHere46","int"
"3765splitHere46","20169653splitHere46","97"
"3766splitHere46","20169653splitHere46","System.out.println( (char)97 ); // will display 'a', instead of 97<newline46mondego>"
"3767splitHere46","20169653splitHere46","a"
"3768splitHere46","20169653splitHere46","97"
"3769splitHere46","20169653splitHere46","int"
"3770splitHere46","20169653splitHere46","(arg1.b + arg2)"
"3771splitHere46","20169653splitHere46","char"
"3772splitHere46","20169653splitHere46","'a'"
"3773splitHere46","20169653splitHere46","arg1.b"
"3774splitHere46","20169653splitHere46","5"
"3775splitHere46","20169653splitHere46","arg2"
"3776splitHere46","20169653splitHere46","char x = (char)('a' + 5);<newline46mondego>System.out.println(x); // displayed 'f'<newline46mondego>"
"3777splitHere46","20169653splitHere46","'f'"
"3778splitHere46","20169653splitHere46","'a'"
"3779splitHere46","20169653splitHere46","5"
"3780splitHere46","20169653splitHere46","'a'"
"3781splitHere46","20169653splitHere46","int"
"3782splitHere46","20169653splitHere46","(char)(102)"
"3783splitHere46","20169653splitHere46","'f'"
"3784splitHere46","20169653splitHere46","char"
"3785splitHere46","20169653splitHere46","102"
"3786splitHere46","20169690splitHere46","System.out.println(format.format(num1));<newline46mondego>"
"3787splitHere46","20169707splitHere46","pstmtFld.setAsciiStream(1, dataStream, 4);  <newline46mondego>"
"3788splitHere46","20169707splitHere46","String urlFld = <doubleQuotes46>jdbc:teradata://whomooz/TMODE=ANSI,CHARSET=UTF8,TYPE=FASTLOADCSV<doubleQuotes46>;  <newline46mondego>"
"3789splitHere46","20169832splitHere46","computerChose"
"3790splitHere46","20169832splitHere46","String computerChose;"
"3791splitHere46","20169832splitHere46","String computerChose = <doubleQuotes46><doubleQuotes46>;"
"3792splitHere46","20169832splitHere46","computerChose = new String();"
"3793splitHere46","20169832splitHere46","computerChoose"
"3794splitHere46","20169941splitHere46","getListCellRendererComponent"
"3795splitHere46","20169941splitHere46","super.getListCellRendererComponent(...)"
"3796splitHere46","20169941splitHere46","@SuppressWarnings(<doubleQuotes46>serial<doubleQuotes46>)<newline46mondego>class MyLabPanelListCellRenderer extends DefaultListCellRenderer {<newline46mondego>   @Override<newline46mondego>   public Component getListCellRendererComponent(JList list, Object value,<newline46mondego>         int index, boolean isSelected, boolean cellHasFocus) {<newline46mondego>      if (value == null) {<newline46mondego>         value = <doubleQuotes46><doubleQuotes46>;<newline46mondego>      } else {<newline46mondego>         value = ((LabPanel) value).getLabPanelDisplayName();<newline46mondego>      }<newline46mondego>      return super.getListCellRendererComponent(list, value, index, isSelected,<newline46mondego>            cellHasFocus);<newline46mondego>   }<newline46mondego>}<newline46mondego>"
"3797splitHere46","20169941splitHere46","import java.awt.Color;<newline46mondego>import java.awt.Component;<newline46mondego>import java.awt.Dimension;<newline46mondego>import java.util.Random;<newline46mondego>import javax.swing.*;<newline46mondego><newline46mondego>@SuppressWarnings(<doubleQuotes46>serial<doubleQuotes46>)<newline46mondego>public class TestListRenderer extends JPanel {<newline46mondego>   private static final int TOTAL_ITEMS = 100;<newline46mondego>   private static final int MAX_VALUE = 15;<newline46mondego>   private static final int VISIBLE_ROW_COUNT = 15;<newline46mondego>   private DefaultListModel<Integer> listModel = new DefaultListModel<>();<newline46mondego>   private JList<Integer> myList = new JList<>(listModel);<newline46mondego>   private Random random = new Random();<newline46mondego><newline46mondego>   public TestListRenderer() {<newline46mondego>      for (int i = 0; i < TOTAL_ITEMS; i++) {<newline46mondego>         listModel.addElement(random.nextInt(MAX_VALUE));<newline46mondego>      }<newline46mondego><newline46mondego>      myList.setCellRenderer(new MyListCellRenderer());<newline46mondego><newline46mondego>      myList.setVisibleRowCount(VISIBLE_ROW_COUNT);<newline46mondego>      add(new JScrollPane(myList));<newline46mondego>   }<newline46mondego><newline46mondego>   private class MyListCellRenderer extends DefaultListCellRenderer {<newline46mondego>      private static final int PREF_W = 50;<newline46mondego>      private static final int MAX_INT_VALUE = 10;<newline46mondego>      private final Color HIGH_VALUE_FG = Color.white;<newline46mondego>      private final Color HIGH_VALUE_BG = Color.red;<newline46mondego><newline46mondego>      @Override<newline46mondego>      public Dimension getPreferredSize() {<newline46mondego>         Dimension superSize = super.getPreferredSize();<newline46mondego>         return new Dimension(PREF_W, superSize.height);<newline46mondego>      }<newline46mondego><newline46mondego>      @Override<newline46mondego>      public Component getListCellRendererComponent(JList<?> list,<newline46mondego>            Object value, int index, boolean isSelected, boolean cellHasFocus) {<newline46mondego>         Component superRenderer = super.getListCellRendererComponent(list, value, index, isSelected,<newline46mondego>               cellHasFocus);<newline46mondego><newline46mondego>         setBackground(null);<newline46mondego>         setForeground(null);<newline46mondego>         if (value != null && ((Integer) value).intValue() > MAX_INT_VALUE) {<newline46mondego>            setBackground(HIGH_VALUE_BG);<newline46mondego>            setForeground(HIGH_VALUE_FG);<newline46mondego>         }<newline46mondego><newline46mondego>         return superRenderer;<newline46mondego>      }<newline46mondego>   }<newline46mondego><newline46mondego>   private static void createAndShowGui() {<newline46mondego>      TestListRenderer mainPanel = new TestListRenderer();<newline46mondego><newline46mondego>      JFrame frame = new JFrame(<doubleQuotes46>TestListRenderer<doubleQuotes46>);<newline46mondego>      frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);<newline46mondego>      frame.getContentPane().add(mainPanel);<newline46mondego>      frame.pack();<newline46mondego>      frame.setLocationByPlatform(true);<newline46mondego>      frame.setVisible(true);<newline46mondego>   }<newline46mondego><newline46mondego>   public static void main(String[] args) {<newline46mondego>      SwingUtilities.invokeLater(new Runnable() {<newline46mondego>         public void run() {<newline46mondego>            createAndShowGui();<newline46mondego>         }<newline46mondego>      });<newline46mondego>   }<newline46mondego>}<newline46mondego>"
"3798splitHere46","20169961splitHere46","BeanTableModel"
"3799splitHere46","20169961splitHere46","TableModel"
"3800splitHere46","20169961splitHere46","Person"
"3801splitHere46","20169961splitHere46","Dog"
"3802splitHere46","20169961splitHere46","BeanTableModel<Dog> dogModel = new BeanTableModel<Dog>(Dog.class);<newline46mondego>dogModel.insertRows(...);<newline46mondego>table.setModel( dogModel );<newline46mondego>"
"3803splitHere46","20169961splitHere46","updateTable()"
"3804splitHere46","20169961splitHere46","TablePanel"
"3805splitHere46","20169980splitHere46","public static void main(String[] args){}"
"3806splitHere46","20169980splitHere46","main"
"3807splitHere46","20169980splitHere46","public class Apple{<newline46mondego>    public void eat(){}<newline46mondego>    public static void describe(){}<newline46mondego>}<newline46mondego>"
"3808splitHere46","20169980splitHere46","new Apple yourApple().eat();"
"3809splitHere46","20169980splitHere46","Apple.describe();"
"3810splitHere46","20169980splitHere46","new Apple yourApple().describe();"
"3811splitHere46","20169980splitHere46","Apple.describe()"
"3812splitHere46","20169980splitHere46","public class Apple{<newline46mondego>    public static void main(String[] args){<newline46mondego>        Apple apple = new Apple();<newline46mondego>        Apple.eat();<newline46mondego>    }<newline46mondego>    public void eat(){<newline46mondego>        System.out.println(<doubleQuotes46>Nom<doubleQuotes46>);<newline46mondego>    }<newline46mondego>}<newline46mondego>"
"3813splitHere46","20169985splitHere46","@Override<newline46mondego>public int hashCode() {<newline46mondego>    return getName().hashCode();<newline46mondego>}<newline46mondego><newline46mondego><newline46mondego>@Override<newline46mondego>public boolean equals(Object o) {<newline46mondego>    if(o == null){<newline46mondego>        return false;<newline46mondego>    }<newline46mondego>    if(!o.getClass().equals(getClass())){<newline46mondego>        return false;<newline46mondego>    }<newline46mondego>    return this.getName().equals(((Item)o).getName());<newline46mondego>}<newline46mondego>"
"3814splitHere46","20169985splitHere46","Item list[] = new Item[10];<newline46mondego><newline46mondego>Set<Item> itemSet = new HashSet();<newline46mondego><newline46mondego><newline46mondego>for(int i = 0; i < list.length; i++)<newline46mondego>{   <newline46mondego><newline46mondego>    do{<newline46mondego>    int random = (int)(Math.random() * 2);<newline46mondego><newline46mondego>        if(random == 0)<newline46mondego>            list[i] = new Perish();<newline46mondego>        else<newline46mondego>            list[i] = new Nonperish();<newline46mondego><newline46mondego>        if(itemSet.contains(list[i])){<newline46mondego>            continue;<newline46mondego>        }else {<newline46mondego>            itemSet.add(list[i]);<newline46mondego>            break;<newline46mondego>        }<newline46mondego>    }while(true);<newline46mondego><newline46mondego>}<newline46mondego>"
"3815splitHere46","20170109splitHere46","JFrame"
"3816splitHere46","20170109splitHere46","BorderLayout"
"3817splitHere46","20170109splitHere46","frame.add(OK);"
"3818splitHere46","20170109splitHere46","Center"
"3819splitHere46","20170109splitHere46","frame.add(Cancel);"
"3820splitHere46","20170109splitHere46","frame.add(OK,BorderLayout.WEST);"
"3821splitHere46","20170109splitHere46","BorderLayout"
"3822splitHere46","20170120splitHere46","import java.awt.event.*;<newline46mondego>import javax.swing.*;<newline46mondego>import javax.swing.text.*;<newline46mondego><newline46mondego>public class NavigationFilterPrefixWithBackspace extends NavigationFilter<newline46mondego>{<newline46mondego>    private int prefixLength;<newline46mondego>    private Action deletePrevious;<newline46mondego><newline46mondego>    public NavigationFilterPrefixWithBackspace(int prefixLength, JTextComponent component)<newline46mondego>    {<newline46mondego>        this.prefixLength = prefixLength;<newline46mondego>        deletePrevious = component.getActionMap().get(<doubleQuotes46>delete-previous<doubleQuotes46>);<newline46mondego>        component.getActionMap().put(<doubleQuotes46>delete-previous<doubleQuotes46>, new BackspaceAction());<newline46mondego>        component.setCaretPosition(prefixLength);<newline46mondego>    }<newline46mondego><newline46mondego>    public void setDot(NavigationFilter.FilterBypass fb, int dot, Position.Bias bias)<newline46mondego>    {<newline46mondego>        fb.setDot(Math.max(dot, prefixLength), bias);<newline46mondego>    }<newline46mondego><newline46mondego>    public void moveDot(NavigationFilter.FilterBypass fb, int dot, Position.Bias bias)<newline46mondego>    {<newline46mondego>        fb.moveDot(Math.max(dot, prefixLength), bias);<newline46mondego>    }<newline46mondego><newline46mondego>    class BackspaceAction extends AbstractAction<newline46mondego>    {<newline46mondego>        public void actionPerformed(ActionEvent e)<newline46mondego>        {<newline46mondego>            JTextComponent component = (JTextComponent)e.getSource();<newline46mondego><newline46mondego>            if (component.getCaretPosition() > prefixLength)<newline46mondego>            {<newline46mondego>                deletePrevious.actionPerformed( null );<newline46mondego>            }<newline46mondego>        }<newline46mondego>    }<newline46mondego><newline46mondego>    public static void main(String args[]) throws Exception {<newline46mondego><newline46mondego>        JTextField textField = new JTextField(<doubleQuotes46>Prefix_<doubleQuotes46>, 20);<newline46mondego>        textField.setNavigationFilter( new NavigationFilterPrefixWithBackspace(7, textField) );<newline46mondego><newline46mondego>        JFrame frame = new JFrame(<doubleQuotes46>Navigation Filter Example<doubleQuotes46>);<newline46mondego>        frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);<newline46mondego>        frame.getContentPane().add(textField);<newline46mondego>        frame.pack();<newline46mondego>        frame.setLocationRelativeTo( null );<newline46mondego>        frame.setVisible(true);<newline46mondego>    }<newline46mondego>}<newline46mondego>"
"3823splitHere46","20170125splitHere46","// I assume Page.class is your second ativity<newline46mondego>Intent intent = new Intent(this, Page.class); <newline46mondego>intent.putExtra(<doubleQuotes46>arg<doubleQuotes46>, getText()); // getText() SHOULD NOT be static!!!<newline46mondego>startActivity(intent);<newline46mondego>"
"3824splitHere46","20170125splitHere46","String passedArg = getIntent().getExtras().getString(<doubleQuotes46>arg<doubleQuotes46>);<newline46mondego>enteredValue.setText(passedArg);<newline46mondego>"
"3825splitHere46","20170125splitHere46","public static final String ARG_FROM_MAIN = <doubleQuotes46>arg<doubleQuotes46>;<newline46mondego>"
"3826splitHere46","20170167splitHere46","private BplusTree<String><String> bptree;<newline46mondego>"
"3827splitHere46","20170167splitHere46","private BplusTree<String, String> bptree = new BplusTree<String, String>(); /* or new BplusTree<>(); in Java 7 */ <newline46mondego>"
"3828splitHere46","20170175splitHere46","public class Queens {<newline46mondego>    static int counter = 0;<newline46mondego>    static int[] pos = new int[8];<newline46mondego><newline46mondego>    static void printBoard(){<newline46mondego>        for(int p: pos) {<newline46mondego>            for(int i = 0; i < p; i++) System.out.print(<doubleQuotes46>.<doubleQuotes46>);<newline46mondego>            System.out.print(<doubleQuotes46>Q<doubleQuotes46>);<newline46mondego>            for(int i = p+1; i < 8; i++) System.out.print(<doubleQuotes46>.<doubleQuotes46>);<newline46mondego>            System.out.println();<newline46mondego>        }<newline46mondego>        System.out.println();<newline46mondego>    }<newline46mondego><newline46mondego>    static boolean threatened(int x, int y){<newline46mondego>        for (int i = 0; i < y; i++){<newline46mondego>            int d = y - i;<newline46mondego>            if(pos[i] == x || pos[i] == x - d || pos[i] == x + d) {<newline46mondego>                return true;<newline46mondego>            }<newline46mondego>        }<newline46mondego>        return false;<newline46mondego>    }<newline46mondego><newline46mondego>    static void place(int y) {<newline46mondego>        for(int x = 0; x < pos.length ; x++){<newline46mondego>            if(!threatened(x, y)){<newline46mondego>                pos[y] = x;<newline46mondego>                if(y == 7){<newline46mondego>                    printBoard();<newline46mondego>                    counter++;<newline46mondego>                } else{<newline46mondego>                    place(y + 1);<newline46mondego>                }<newline46mondego>            }<newline46mondego>        }<newline46mondego>    }<newline46mondego><newline46mondego>    public static void main(String[] args){<newline46mondego>        place(0);<newline46mondego>        System.out.print(<doubleQuotes46>found <doubleQuotes46> + counter + <doubleQuotes46> solutions<doubleQuotes46>);<newline46mondego>    }<newline46mondego>}<newline46mondego>"
"3829splitHere46","20170202splitHere46","public static void main(String[] args);{ // remove the ;<newline46mondego>"
"3830splitHere46","20170254splitHere46","if(pass.equals(passConf)){<newline46mondego>        passSame = true;<newline46mondego>}else{<newline46mondego>        passSame = false;<newline46mondego>}<newline46mondego>"
"3831splitHere46","20170254splitHere46","}else if(passSame==true){<newline46mondego>    noErrors=false;<newline46mondego>    ErrorCode = <doubleQuotes46>Passwords Don't Match<doubleQuotes46>;<newline46mondego>"
"3832splitHere46","20170254splitHere46","noErrors"
"3833splitHere46","20170254splitHere46","}else{<newline46mondego>"
"3834splitHere46","20170463splitHere46","public double getMetersFromFeet(double feet) {<newline46mondego>    return feet * 0.3048;<newline46mondego>}<newline46mondego><newline46mondego>public double getFeetFromMeters(double meters) {<newline46mondego>    return meters * 3.28084;<newline46mondego>}<newline46mondego>"
"3835splitHere46","20170463splitHere46","static"
"3836splitHere46","20170463splitHere46","Math"
"3837splitHere46","20170463splitHere46","double distanceInFeet"
"3838splitHere46","20170463splitHere46","getDistanceInFeet()"
"3839splitHere46","20170463splitHere46","distanceInFeet"
"3840splitHere46","20170463splitHere46","getDistanceInMeters()"
"3841splitHere46","20170463splitHere46","public double getDistanceInMeters() {<newline46mondego>    return getMetersFromFeet(self.distanceInFeet);<newline46mondego>}<newline46mondego>"
"3842splitHere46","20170463splitHere46","public void setDistanceInMeters(double distance) {<newline46mondego>    self.distanceInFeet = getFeetFromMeters(distance);<newline46mondego>}<newline46mondego>"
"3843splitHere46","20170463splitHere46","static"
"3844splitHere46","20170463splitHere46","instance"
"3845splitHere46","20170625splitHere46","Scanner"
"3846splitHere46","20170625splitHere46","Scanner"
"3847splitHere46","20170639splitHere46","import java.awt.Color;<newline46mondego><newline46mondego>import java.awt.Graphics;<newline46mondego><newline46mondego>import javax.swing.JFrame;<newline46mondego>"
"3848splitHere46","20170639splitHere46","public Legos2() {<newline46mondego><newline46mondego>    colors = new Color[4];<newline46mondego><newline46mondego>    //Initialize the values of the array<newline46mondego>    colors[0] = Color.red;<newline46mondego>    colors[1] = Color.blue;<newline46mondego>    colors[2] = Color.yellow;<newline46mondego>    colors[3] = Color.green;<newline46mondego>"
"3849splitHere46","20170643splitHere46","try {<newline46mondego>    //URL u  = new URL(<doubleQuotes46>https://www.uct.ac.za/downloads/uct.ac.za/currentstud/services/jammie/term/10_hiddingh_weekwkndph.pdf<doubleQuotes46>);<newline46mondego>    URL u  = new URL(<doubleQuotes46>https://www.uct.ac.za/downloads/uct.ac.za/currentstud/services/jammie/vac/10_hiddingh.pdf<doubleQuotes46>);<newline46mondego><newline46mondego>    HttpsURLConnection connection;<newline46mondego><newline46mondego>    connection = (HttpsURLConnection)u.openConnection();<newline46mondego>    BufferedInputStream is = new BufferedInputStream(connection.getInputStream());<newline46mondego>    ByteArrayOutputStream bos = new ByteArrayOutputStream();<newline46mondego>    int byte_read = is.read();<newline46mondego>    while(byte_read != -1)<newline46mondego>    {<newline46mondego>        bos.write(byte_read);<newline46mondego>        byte_read = is.read();<newline46mondego>    }<newline46mondego><newline46mondego>    byte[] bos_data = bos.toByteArray();<newline46mondego>    System.out.println(<doubleQuotes46>buffer data length <doubleQuotes46> + bos_data.length);<newline46mondego>    } catch (IOException e) {<newline46mondego>        e.printStackTrace();<newline46mondego>    }<newline46mondego>"
"3850splitHere46","20170677splitHere46","mvn eclipse:eclipse -Dwtpversion=2.0<newline46mondego>"
"3851splitHere46","20170721splitHere46","ImageIcon"
"3852splitHere46","20170721splitHere46","setUrl"
"3853splitHere46","20170721splitHere46","setUrl"
"3854splitHere46","20170721splitHere46","URL imgURL = getClass().getClassLoader().getResource(url);<newline46mondego>    if (imgURL != null) {<newline46mondego>       return imgURL;<newline46mondego>    } else {<newline46mondego>       return null;<newline46mondego>    }<newline46mondego>"
"3855splitHere46","20170721splitHere46","return getClass().getClassLoader().getResource(url);<newline46mondego>"
"3856splitHere46","20170729splitHere46","for (int y = 1; y <= 10; y++) {<newline46mondego><newline46mondego>        System.out.print(y + <doubleQuotes46> <doubleQuotes46>);<newline46mondego>    }<newline46mondego>    System.out.println();<newline46mondego>    for (int y = 3; y <= 10; y++) {<newline46mondego><newline46mondego>        System.out.println(y);<newline46mondego>    }<newline46mondego>"
"3857splitHere46","20170740splitHere46","T"
"3858splitHere46","20170740splitHere46","T"
"3859splitHere46","20170740splitHere46","T"
"3860splitHere46","20170769splitHere46","//TilePanel panel= new TilePanel(); // not needed.<newline46mondego>TileMap map = new TileMap(rows, cols, 9, 9);<newline46mondego>map.addBorder(Tile.EMPTY, 9);<newline46mondego>JScrollPane scrollPane = new JScrollPane( map );<newline46mondego>frame.add( scrollPane );<newline46mondego>"
"3861splitHere46","20170797splitHere46","CourseData"
"3862splitHere46","20170797splitHere46","AddCourseForm"
"3863splitHere46","20170797splitHere46","public class RefTest {<newline46mondego><newline46mondego>    private static class Ref {<newline46mondego>        /* Don't do this in real life, public fields are bad practice.<newline46mondego>         * just done here for sake of example.<newline46mondego>         * make a getter and setter at the very least.<newline46mondego>         */<newline46mondego>        public int someInt;  <newline46mondego>    }<newline46mondego><newline46mondego>    private static class RefMod {<newline46mondego>        private Ref r;<newline46mondego>        public RefMod(Ref r) {<newline46mondego>            this.r = r;<newline46mondego>        }<newline46mondego><newline46mondego>        public void setRefInt(int newInt) {<newline46mondego>            r.someInt = newInt;<newline46mondego>        }<newline46mondego>    }<newline46mondego><newline46mondego>    public static void main(String[] args) {<newline46mondego>        Ref ref = new Ref();<newline46mondego>        ref.someInt = 11;<newline46mondego><newline46mondego>        System.out.println(ref.someInt);<newline46mondego><newline46mondego>        RefMod refMod = new RefMod(ref);<newline46mondego>        refMod.setRefInt(42);<newline46mondego><newline46mondego>        System.out.println(ref.someInt);<newline46mondego><newline46mondego>        final Ref fRef = new Ref();<newline46mondego>        fRef.someInt = 300;<newline46mondego><newline46mondego>        System.out.println(fRef.someInt);<newline46mondego><newline46mondego>        refMod = new RefMod(fRef);<newline46mondego>        refMod.setRefInt(500);<newline46mondego><newline46mondego>        System.out.println(fRef.someInt);<newline46mondego>    }<newline46mondego>}<newline46mondego>"
"3864splitHere46","20170797splitHere46","11<newline46mondego>42<newline46mondego>300<newline46mondego>500<newline46mondego>"
"3865splitHere46","20170797splitHere46","CourseData"
"3866splitHere46","20170797splitHere46","CourseData"
"3867splitHere46","20170797splitHere46","Ref"
"3868splitHere46","20170797splitHere46","fRef"
"3869splitHere46","20170797splitHere46","someInt"
"3870splitHere46","20170921splitHere46","Beta3 betaku;<newline46mondego>betaku = new Beta3();<newline46mondego>System.out.println(<doubleQuotes46>b = <doubleQuotes46> + betaku.perolehB());<newline46mondego>"
"3871splitHere46","20170921splitHere46","b"
"3872splitHere46","20170921splitHere46","Beta3"
"3873splitHere46","20170921splitHere46","class Beta3 extends Alpha<newline46mondego>{<newline46mondego>   //Another code <newline46mondego><newline46mondego>   public void info()<newline46mondego>   {<newline46mondego>       // super.info(); if you wanna show the a value too<newline46mondego>       System.out.println(<doubleQuotes46>b=<doubleQuotes46> + this.b);<newline46mondego>   }<newline46mondego><newline46mondego>   //Some other code<newline46mondego>}   <newline46mondego>"
"3874splitHere46","20170921splitHere46","class Alpha<newline46mondego>{<newline46mondego>    public void info(Beta3 aux)<newline46mondego>    {<newline46mondego>        this.info();<newline46mondego>        aux.info();<newline46mondego>    }<newline46mondego>}  <newline46mondego>"
"3875splitHere46","20170921splitHere46","public static void main(String[] args) <newline46mondego>{ <newline46mondego>       Beta3 varobjBeta;<newline46mondego>       varobjBeta = new Beta3();<newline46mondego>       varobjBeta.isiB(10); <newline46mondego><newline46mondego><newline46mondego>      Alpha varobjAlpha; <newline46mondego>      varobjAlpha = new Alpha(); <newline46mondego>      varobjAlpha.info(varobjBeta); <newline46mondego>}   <newline46mondego>"
"3876splitHere46","20170935splitHere46","numbersToSort"
"3877splitHere46","20170935splitHere46","competition.participant"
"3878splitHere46","20170935splitHere46","kpTime"
"3879splitHere46","20170935splitHere46","OutOfBoundsException"
"3880splitHere46","20170935splitHere46","numbersToSort"
"3881splitHere46","20170935splitHere46","participants"
"3882splitHere46","20170935splitHere46","participants"
"3883splitHere46","20170935splitHere46","ArrayList<Participant> participants"
"3884splitHere46","20170935splitHere46","sortNumbers"
"3885splitHere46","20170935splitHere46","FinalProtocolActivity"
"3886splitHere46","20170935splitHere46","Collections.sort()"
"3887splitHere46","20170935splitHere46","Comparator"
"3888splitHere46","20170935splitHere46","public class ParticipantIndexComparator implements Comparator<Participant><newline46mondego>{<newline46mondego>    public int compare(Participant p1, Participant p2)<newline46mondego>    {<newline46mondego>        Long time1 = p1.kpTime.get(kpSelected);<newline46mondego>        Long time2 = p2.kpTime.get(kpSelected);<newline46mondego>        return Long.valueOf(time1).compareTo(time2);<newline46mondego>    }<newline46mondego>}<newline46mondego>"
"3889splitHere46","20171083splitHere46","<T extends Number>"
"3890splitHere46","20171083splitHere46","List<Integer> list1;<newline46mondego>List<Double> list2;<newline46mondego>list1.add(list2.get(0);<newline46mondego>"
"3891splitHere46","20171083splitHere46","Number"
"3892splitHere46","20171083splitHere46","List<Integer> list1;<newline46mondego>List<Integer> list2;<newline46mondego>list1.add(list2.get(0);<newline46mondego>"
"3893splitHere46","20171203splitHere46","Director"
"3894splitHere46","20171203splitHere46","last value"
"3895splitHere46","20171203splitHere46","Director"
"3896splitHere46","20171203splitHere46","Director"
"3897splitHere46","20171203splitHere46","ResultSet res = objBBDD.sentencia.executeQuery(sql);<newline46mondego><newline46mondego> while(res.next){<newline46mondego>  Director direc = new Director();// Declare Director instance here.<newline46mondego>   .....<newline46mondego>  list.add(direc);<newline46mondego> }<newline46mondego>"
"3898splitHere46","20171217splitHere46","List<Survivor> toRemove = new ArrayList<Survivor>();<newline46mondego>    List<Zombie> toAdd = new ArrayList<Zombie>();<newline46mondego><newline46mondego>    Iterator<Survivor> survIt = survivors.iterator();<newline46mondego>    Iterator<Zombie> zombIt = zombies.iterator();<newline46mondego>    while (survIt.hasNext()) {<newline46mondego>        Survivor s = survIt.next();<newline46mondego>        while (zombIt.hasNext()) {<newline46mondego>            Zombie z = zombIt.next();<newline46mondego>            if (z.bounds.intersects(s.bounds)){<newline46mondego>                toAdd.add(new Zombie(s.position, this));<newline46mondego>                toRemove.add(s);<newline46mondego>                System.out.println(<doubleQuotes46>collided<doubleQuotes46>);<newline46mondego>            }<newline46mondego>        }<newline46mondego>    }<newline46mondego><newline46mondego>    for (Survivor s : toRemove) {<newline46mondego>        survivors.remove(s);<newline46mondego>    }<newline46mondego><newline46mondego>    for (Zombie z : toAdd) {<newline46mondego>        zombies.add(z);<newline46mondego>    }<newline46mondego>"
"3899splitHere46","20171248splitHere46","protected void combat(List<Character> heroes, List<Character> enemies) {<newline46mondego>  if (heroes.isEmpty() || enemies.isEmpty()) {<newline46mondego>    //one of the parties wins<newline46mondego>    return;<newline46mondego>  }<newline46mondego><newline46mondego>  List<Pair<Character, Character>> vs = new LinkedList<>();<newline46mondego>  int i = 0;<newline46mondego>  while ( i< heroes.length() && i< enemies.length()) {<newline46mondego>   vs.add(heroes.get(i), enemies.get(i));<newline46mondego>   ++i;<newline46mondego>  }<newline46mondego>  for (Pair<Character, Character> fight : vs) {<newline46mondego>   //figure out the loser<newline46mondego>   Character loser = fight(vs.getFirst(), vs.getSecond();<newline46mondego>   if (loser.isEnemy()) {<newline46mondego>     enemies.remove(loser);<newline46mondego>   } else {<newline46mondego>      heroes.remove(loser);<newline46mondego>   }<newline46mondego>  }<newline46mondego>  combat(heroes, enemies);<newline46mondego>}<newline46mondego>"
"3900splitHere46","20171312splitHere46","DELETE"
"3901splitHere46","20171312splitHere46","empNo"
"3902splitHere46","20171312splitHere46","url"
"3903splitHere46","20171312splitHere46","$(document).ready(function () {<newline46mondego>    var empNo = 9870;<newline46mondego>    $(<doubleQuotes46>#btnSubmit<doubleQuotes46>).click(function () {<newline46mondego>        $.ajax({<newline46mondego>            url: <doubleQuotes46>http://localhost:8181/Test1/rest/employee/<doubleQuotes46> + empNo, // Pass empNo<newline46mondego>            type: <doubleQuotes46>DELETE<doubleQuotes46>, // Use DELETE<newline46mondego>           // data: JSON.stringify(empNo), Commented these two.<newline46mondego>           // dataType: <doubleQuotes46>json<doubleQuotes46>,<newline46mondego>        })<newline46mondego>    });<newline46mondego>});<newline46mondego>"
"3904splitHere46","20171375splitHere46","StringTokenizer"
"3905splitHere46","20171375splitHere46","x"
"3906splitHere46","20171375splitHere46","y"
"3907splitHere46","20171375splitHere46","Scanner input = new Scanner(System.in);<newline46mondego>// check if there's still input lines.<newline46mondego>outer: while (input.hasNextLine()) {<newline46mondego>  // get a line.<newline46mondego>  String line = input.nextLine();<newline46mondego>  // create a tokenizer for the line.<newline46mondego>  StringTokenizer st = new StringTokenizer(line);<newline46mondego><newline46mondego>  // while there are more tokens.<newline46mondego>  while (st.hasMoreTokens()) {<newline46mondego>    // Get a token, convert it to a character array<newline46mondego>    char[] c = st.nextToken().toCharArray();<newline46mondego>    // loop over the array of characters 2 at a time<newline46mondego>    for (int i = 0; i + 1 < c.length; i += 2) {<newline46mondego>      // get a letter.<newline46mondego>      char letter = c[i];<newline46mondego>      // make sure the next character is a digit.<newline46mondego>      if (!Character.isDigit(c[i + 1])) {<newline46mondego>        continue outer;<newline46mondego>      }<newline46mondego>      // convert that character digit to an integer.<newline46mondego>      int count = Integer.valueOf(String<newline46mondego>          .valueOf(c[i + 1]));<newline46mondego>      // loop for count times printing the letter.<newline46mondego>      for (int t = 0; t < count; t++) {<newline46mondego>        System.out.print(letter);<newline46mondego>      }<newline46mondego>    }<newline46mondego>    // print a new line.<newline46mondego>    System.out.println();<newline46mondego>  }<newline46mondego>}<newline46mondego>// close the input.<newline46mondego>input.close();<newline46mondego>"
"3908splitHere46","20171421splitHere46","#\\w+"
"3909splitHere46","20171421splitHere46","#"
"3910splitHere46","20171421splitHere46","\\w"
"3911splitHere46","20171421splitHere46","String s = <doubleQuotes46>hello i'm #chilling#likeAVillain but like #forreal<doubleQuotes46>;<newline46mondego>Pattern p = Pattern.compile(<doubleQuotes46>#\\w+<doubleQuotes46>);<newline46mondego>Matcher m = p.matcher(s);<newline46mondego>while (m.find())<newline46mondego>    System.out.println(m.group());<newline46mondego>"
"3912splitHere46","20171421splitHere46","#chilling<newline46mondego>#likeAVillain<newline46mondego>#forreal<newline46mondego>"
"3913splitHere46","20171475splitHere46","Resources.getIdentifier()"
"3914splitHere46","20171475splitHere46","String ResId = <doubleQuotes46>webview1<doubleQuotes46>;<newline46mondego>int id = getResources().getIdentifier(ResId, <doubleQuotes46>id<doubleQuotes46>, getPackageName());<newline46mondego>WebView webv = (WebView) findViewById(id);<newline46mondego>"
"3915splitHere46","20171475splitHere46","findViewById()"
"3916splitHere46","20171475splitHere46","int"
"3917splitHere46","20171620splitHere46","void print()<newline46mondego>"
"3918splitHere46","20171620splitHere46","void Print()<newline46mondego>"
"3919splitHere46","20171620splitHere46","abstract"
"3920splitHere46","20171620splitHere46","interface"
"3921splitHere46","20171625splitHere46","m"
"3922splitHere46","20171625splitHere46","comma"
"3923splitHere46","20171625splitHere46","String data=<doubleQuotes46>stoooooop partyyyyyy<doubleQuotes46>;<newline46mondego>System.out.println(data.replaceAll(<doubleQuotes46>([a-zA-Z])(\\1{2,})<doubleQuotes46>, <doubleQuotes46>$1<doubleQuotes46>));<newline46mondego>//                                       |       |          |<newline46mondego>//                                   group 1    match     replace with <newline46mondego>//                                              from     match from group 1<newline46mondego>//                                             group 1<newline46mondego>"
"3924splitHere46","20171625splitHere46","stop party<newline46mondego>"
"3925splitHere46","20171721splitHere46","String to=<doubleQuotes46>somebody@something.com<doubleQuotes46>;//change accordingly  <newline46mondego>    final String user=<doubleQuotes46>me@gmail.com<doubleQuotes46>; //change accordingly  <newline46mondego>    final String password=<doubleQuotes46>xxxxx<doubleQuotes46>;//change accordingly  <newline46mondego><newline46mondego>    //1) get the session object     <newline46mondego>    Properties props = new Properties();<newline46mondego>    props.put(<doubleQuotes46>mail.smtp.host<doubleQuotes46>, <doubleQuotes46>smtp.gmail.com<doubleQuotes46>); // for gmail use smtp.gmail.com<newline46mondego>    props.put(<doubleQuotes46>mail.smtp.auth<doubleQuotes46>, <doubleQuotes46>true<doubleQuotes46>);<newline46mondego>    props.put(<doubleQuotes46>mail.debug<doubleQuotes46>, <doubleQuotes46>true<doubleQuotes46>); <newline46mondego>    props.put(<doubleQuotes46>mail.smtp.starttls.enable<doubleQuotes46>, <doubleQuotes46>true<doubleQuotes46>);<newline46mondego>    props.put(<doubleQuotes46>mail.smtp.port<doubleQuotes46>, <doubleQuotes46>465<doubleQuotes46>);<newline46mondego>    props.put(<doubleQuotes46>mail.smtp.socketFactory.port<doubleQuotes46>, <doubleQuotes46>465<doubleQuotes46>);<newline46mondego>    props.put(<doubleQuotes46>mail.smtp.socketFactory.class<doubleQuotes46>, <doubleQuotes46>javax.net.ssl.SSLSocketFactory<doubleQuotes46>);<newline46mondego>    props.put(<doubleQuotes46>mail.smtp.socketFactory.fallback<doubleQuotes46>, <doubleQuotes46>false<doubleQuotes46>);<newline46mondego><newline46mondego>    Session session = Session.getDefaultInstance(props,  <newline46mondego>            new javax.mail.Authenticator() {  <newline46mondego>        protected javax.mail.PasswordAuthentication getPasswordAuthentication() {  <newline46mondego>            return new javax.mail.PasswordAuthentication(user,password);  <newline46mondego>        }  <newline46mondego>    });  <newline46mondego><newline46mondego>    //2) compose message     <newline46mondego>    try{  <newline46mondego>        MimeMessage message = new MimeMessage(session);  <newline46mondego>        message.setFrom(new InternetAddress(user));  <newline46mondego>        message.addRecipient(Message.RecipientType.TO,new InternetAddress(to));  <newline46mondego>        message.setSubject(<doubleQuotes46>Message Alert<doubleQuotes46>);  <newline46mondego><newline46mondego>        //3) create MimeBodyPart object and set your message text     <newline46mondego>        BodyPart messageBodyPart1 = new MimeBodyPart();  <newline46mondego>        messageBodyPart1.setText(<doubleQuotes46>This is message body<doubleQuotes46>);  <newline46mondego><newline46mondego>        //4) create new MimeBodyPart object and set DataHandler object to this object      <newline46mondego>        MimeBodyPart messageBodyPart2 = new MimeBodyPart();  <newline46mondego><newline46mondego>        String filename = <doubleQuotes46>SendAttachment.doc<doubleQuotes46>;//change accordingly  <newline46mondego>        DataSource source = new FileDataSource(filename);  <newline46mondego>        messageBodyPart2.setDataHandler(new DataHandler(source));  <newline46mondego>        messageBodyPart2.setFileName(filename);  <newline46mondego><newline46mondego><newline46mondego>        //5) create Multipart object and add MimeBodyPart objects to this object      <newline46mondego>        Multipart multipart = new MimeMultipart();  <newline46mondego>        multipart.addBodyPart(messageBodyPart1);  <newline46mondego>        multipart.addBodyPart(messageBodyPart2);  <newline46mondego><newline46mondego>        //6) set the multipart object to the message object  <newline46mondego>        message.setContent(multipart );  <newline46mondego><newline46mondego>        //7) send message  <newline46mondego>        Transport.send(message);  <newline46mondego><newline46mondego>        System.out.println(<doubleQuotes46>message sent....<doubleQuotes46>);  <newline46mondego>    }catch (MessagingException ex) {<newline46mondego>        ex.printStackTrace();<newline46mondego>    }<newline46mondego>"
"3926splitHere46","20172011splitHere46","putIfAbsent"
"3927splitHere46","20172011splitHere46","putIfAbsent"
"3928splitHere46","20172011splitHere46","null"
"3929splitHere46","20172011splitHere46","run()"
"3930splitHere46","20172209splitHere46","while(true){<newline46mondego>   switch(end)<newline46mondego>â€¦..<newline46mondego>â€¦..<newline46mondego>â€¦..<newline46mondego>â€¦..<newline46mondego>}<newline46mondego>"
"3931splitHere46","20172317splitHere46","<link"
"3932splitHere46","20172317splitHere46","<body>.*"
"3933splitHere46","20172317splitHere46","String targetFileStr = IOUtils.toString(new FileInputStream(new File(<newline46mondego>        <doubleQuotes46>input.txt<doubleQuotes46>)), <doubleQuotes46>UTF-8<doubleQuotes46>);<newline46mondego>Matcher matcher = Pattern.compile(<doubleQuotes46>(?<=(<body>.{0,1000}))<link<doubleQuotes46>,<newline46mondego>        Pattern.DOTALL).matcher(targetFileStr);<newline46mondego>while (matcher.find()) {<newline46mondego>    System.out.println(matcher.group(1) + matcher.group());<newline46mondego>    System.out.println(<doubleQuotes46>---------<doubleQuotes46>);<newline46mondego>}<newline46mondego>"
"3934splitHere46","20172317splitHere46","<body><newline46mondego>        <script src=<doubleQuotes46>1<doubleQuotes46>></script><newline46mondego>        <link<newline46mondego>---------<newline46mondego><body><newline46mondego>        <script src=<doubleQuotes46>1<doubleQuotes46>></script><newline46mondego>        <link href=<doubleQuotes46>1<doubleQuotes46> /><newline46mondego>        <link<newline46mondego>---------<newline46mondego><body><newline46mondego>        <script src=<doubleQuotes46>1<doubleQuotes46>></script><newline46mondego>        <link href=<doubleQuotes46>1<doubleQuotes46> /><newline46mondego>        <link href=<doubleQuotes46>2<doubleQuotes46> /><newline46mondego>        <link<newline46mondego>---------<newline46mondego>"
"3935splitHere46","20172389splitHere46","Math.random()"
"3936splitHere46","20172415splitHere46","data"
"3937splitHere46","20172415splitHere46","int[][] data = new int[5][5];<newline46mondego>"
"3938splitHere46","20172415splitHere46","int[][] data = new int[6][6];<newline46mondego>"
"3939splitHere46","20172415splitHere46","cbin=5"
"3940splitHere46","20172415splitHere46","data[nbin][cbin] = 1;// ArrayIndexOutOfBoundsException.<newline46mondego>"
"3941splitHere46","20172492splitHere46","for (p = 0; p < l - 1; p++)  {// It skip last one    <newline46mondego>  num[p] = Double.parseDouble(nums[p]);<newline46mondego>  ..............<newline46mondego> }   <newline46mondego>"
"3942splitHere46","20172492splitHere46","for (p = 0; p < l; p++)  { //Use l insted of l-1<newline46mondego>  num[p] = Double.parseDouble(nums[p]);<newline46mondego>  ..............<newline46mondego> }  <newline46mondego>"
"3943splitHere46","20172509splitHere46","item1"
"3944splitHere46","20172509splitHere46","item2"
"3945splitHere46","20172509splitHere46","Items = new ArrayList<SetAdd>();<newline46mondego>SetAdd item0 = new SetAdd();<newline46mondego>item0.setNewNews(5);<newline46mondego>item0.setImageID(images[1]);<newline46mondego>Items.add(item0);<newline46mondego><newline46mondego>SetAdd item1 = new SetAdd();<newline46mondego>item1.setNewNews(3); // changed this line<newline46mondego>item1.setImageID(images[2]);<newline46mondego>Items.add(item1);<newline46mondego><newline46mondego>SetAdd item2 = new SetAdd();<newline46mondego>item2.setNewNews(4); // changed this line<newline46mondego>item2.setImageID(images[3]);<newline46mondego>Items.add(item2);<newline46mondego>"
"3946splitHere46","20172617splitHere46","boolean"
"3947splitHere46","20172617splitHere46","AtomicBoolean"
"3948splitHere46","20172617splitHere46","synchronized (game)"
"3949splitHere46","20172617splitHere46","suspend"
"3950splitHere46","20172617splitHere46","resume"
"3951splitHere46","20172617splitHere46","Thread.suspend"
"3952splitHere46","20172617splitHere46","Thread.resume"
"3953splitHere46","20172617splitHere46","...<newline46mondego>AtomicBoolean isPaused = new AtomicBoolean(false);<newline46mondego>...<newline46mondego><newline46mondego>private void gamePause() {<newline46mondego>   synchronized(game) {<newline46mondego>      game.isPaused.set(true);<newline46mondego>      game.notify();<newline46mondego>   }<newline46mondego>}<newline46mondego><newline46mondego>private void gameContinue() {<newline46mondego>   synchronized(game) {<newline46mondego>      game.isPaused.set(false);<newline46mondego>      game.notify();<newline46mondego>   }<newline46mondego>}<newline46mondego>...<newline46mondego>"
"3954splitHere46","20172617splitHere46","...<newline46mondego>public void run() {<newline46mondego>  xSpeed = 1;<newline46mondego>  while(true) {<newline46mondego>    synchronized(game) {<newline46mondego>      while(game.isPaused().get()) {<newline46mondego>         try {<newline46mondego>            Thread.sleep(1000);<newline46mondego>         } catch (InterruptedException iex) {<newline46mondego>            // This most likely means your JVM stops. Maybe log the Exception.<newline46mondego>            game.destroy();<newline46mondego>            return;<newline46mondego>         }<newline46mondego>      }<newline46mondego>      int x1 = ball.getX();<newline46mondego>      int y1 = ball.getY();<newline46mondego>      ...<newline46mondego>      }<newline46mondego>    }<newline46mondego>  }<newline46mondego>}<newline46mondego>"
"3955splitHere46","20172617splitHere46","synchronized(game)"
"3956splitHere46","20172617splitHere46","synchronized"
"3957splitHere46","20172617splitHere46","stop()"
"3958splitHere46","20172617splitHere46","public void checkLives() {<newline46mondego>    if (bricksLeft == 0) {<newline46mondego>        ...<newline46mondego>        if(!game.isPaused().get())<newline46mondego>           stop();<newline46mondego>    }<newline46mondego>    if (lives == 0) {<newline46mondego>        repaint();<newline46mondego>        if(!game.isPaused().get())<newline46mondego>           stop();<newline46mondego>    }<newline46mondego>}<newline46mondego>"
"3959splitHere46","20172617splitHere46","checkLives()"
"3960splitHere46","20172617splitHere46","stop()"
"3961splitHere46","20172617splitHere46","isPaused"
"3962splitHere46","20172617splitHere46","KeyListener"
"3963splitHere46","20172617splitHere46","isPaused"
"3964splitHere46","20172647splitHere46","for (int k = i - 1; k <= i + 1; k++) {<newline46mondego>    for (int l = j - 1; l <= j + 1; l++) {<newline46mondego>        if (l - j == k - i) continue;<newline46mondego>        try {<newline46mondego>            if(<doubleQuotes46>**<doubleQuotes46>.equals(state[k][l])){<newline46mondego>                state[k][l] = String.valueOf(stopState);<newline46mondego>                stopState++;<newline46mondego>                willBeInitialized[k][l] = true;<newline46mondego>            }<newline46mondego>        } catch (Exception e) {<newline46mondego>            //do nothing, loop to next try block<newline46mondego>        }<newline46mondego>    }<newline46mondego>}<newline46mondego>"
"3965splitHere46","20172768splitHere46","arrayAdapter =  new ArrayAdapter<String> (this,android.R.layout.select_dialog_item,newDownloadedList);<newline46mondego>AutoCompleteTextView.setAdapter(arrayAdapter);<newline46mondego>arrayAdapter.notifyDataSetChanged();<newline46mondego>"
"3966splitHere46","20172896splitHere46","FileWriter fileWriter = null;<newline46mondego>String content = <doubleQuotes46>A string to be written to file<doubleQuotes46>;<newline46mondego>File newTextFile = new File(<doubleQuotes46>C:\\output.txt<doubleQuotes46>);<newline46mondego>fileWriter = new FileWriter(newTextFile);<newline46mondego>fileWriter.write(content);<newline46mondego>fileWriter.close();<newline46mondego>"
"3967splitHere46","20172896splitHere46","BufferedWriter out = new BufferedWriter(new FileWriter(<doubleQuotes46>C:\\output.txt<doubleQuotes46><doubleQuotes46>));<newline46mondego>out.write(<doubleQuotes46>A string to be written to file<doubleQuotes46>);<newline46mondego>out.close();<newline46mondego>"
"3968splitHere46","20172924splitHere46","when(userRoleMapper.update(user)).thenThrow(new RuntimeException(<doubleQuotes46>test exception<doubleQuotes46>));<newline46mondego>"
"3969splitHere46","20172924splitHere46","update()"
"3970splitHere46","20172924splitHere46","void"
"3971splitHere46","20172924splitHere46","doThrow(new RuntimeException(<doubleQuotes46>test exception<doubleQuotes46>)).when(userRoleMapper).update(user);<newline46mondego>"
"3972splitHere46","20172972splitHere46","import java.util.Scanner;<newline46mondego><newline46mondego>public class Sample {<newline46mondego>    public static void main(String[] args) {<newline46mondego>        String inputs[] = { <doubleQuotes46>100.26kg<doubleQuotes46>, <doubleQuotes46>100g<doubleQuotes46>, <doubleQuotes46>100 pounds<doubleQuotes46>, <doubleQuotes46>100litre<doubleQuotes46>};<newline46mondego><newline46mondego>        String weight, unit;<newline46mondego><newline46mondego>        for(String input : inputs){<newline46mondego>            Scanner scan = new Scanner(input);<newline46mondego>            weight = scan.findInLine(<doubleQuotes46>\\d+(\\.\\d+)?<doubleQuotes46>);<newline46mondego>            unit = scan.next();//scan.next(<doubleQuotes46>\\w+<doubleQuotes46>);<newline46mondego><newline46mondego>            System.out.println(weight);<newline46mondego>            System.out.println(unit);<newline46mondego>        }<newline46mondego>    }<newline46mondego>}<newline46mondego>"
"3973splitHere46","20173060splitHere46","Character"
"3974splitHere46","20173060splitHere46","Character"
"3975splitHere46","20173060splitHere46","java.lang.Character"
"3976splitHere46","20173060splitHere46","ArrayList"
"3977splitHere46","20173060splitHere46","ArrayList<Character>"
"3978splitHere46","20173060splitHere46","List<Character>"
"3979splitHere46","20173149splitHere46","StyledCellLabelProvider"
"3980splitHere46","20173149splitHere46","DelegatingStyledCellLabelProvider"
"3981splitHere46","20173149splitHere46","DelegatingStyledCellLabelProvider.IStyledLabelProvider"
"3982splitHere46","20173149splitHere46","public StyledString getStyledText(Object element);<newline46mondego>"
"3983splitHere46","20173149splitHere46","StyledString"
"3984splitHere46","20173230splitHere46","actionPerformed()"
"3985splitHere46","20173230splitHere46","ActionListener"
"3986splitHere46","20173230splitHere46","ActionListener"
"3987splitHere46","20173230splitHere46","public void actionPerformed(ActionEvent e, int answer) <newline46mondego>"
"3988splitHere46","20173230splitHere46","public void actionPerformed(ActionEvent e) <newline46mondego>"
"3989splitHere46","20173230splitHere46","int answer"
"3990splitHere46","20173230splitHere46","timesTableFrame"
"3991splitHere46","20173230splitHere46","actionPerformed"
"3992splitHere46","20173230splitHere46","answer"
"3993splitHere46","20173230splitHere46","generateArray"
"3994splitHere46","20173230splitHere46","answer"
"3995splitHere46","20173230splitHere46","class timesTableFrame ... {<newline46mondego>    int answer;  // now answer is a class member of timesTableeFrame<newline46mondego><newline46mondego>    public void actionPerformed(ActionEvent e){<newline46mondego>        // answer can be accessed from inside this method<newline46mondego>    }<newline46mondego><newline46mondego>    class generateArray{<newline46mondego>        // answer can be accessed from inside the inner class<newline46mondego>    }<newline46mondego>}<newline46mondego>"
"3996splitHere46","20173230splitHere46","answer"
"3997splitHere46","20173230splitHere46","class timesTableFrame ... {<newline46mondego>    generateArray generatedArray = new generatedArray();<newline46mondego><newline46mondego>    public void actionPerformed(ActionEvent e){<newline46mondego>        int answer = generatedArray.getAnswer();<newline46mondego>    }<newline46mondego><newline46mondego>    class generateArray{<newline46mondego>        private int answer;<newline46mondego><newline46mondego>        public int getAnswer(){<newline46mondego>             return answer;<newline46mondego>        }<newline46mondego>    }<newline46mondego>}<newline46mondego>"
"3998splitHere46","20173259splitHere46","public class MyButton extends JButton{<newline46mondego>    private Runnable onActionPerfomed;<newline46mondego><newline46mondego>    public Runnable getMyAction(){<newline46mondego>        return onActionPerfomed;<newline46mondego>    }<newline46mondego><newline46mondego>    public void setMyAction(Runnable r){<newline46mondego>        onActionPerfomed = r;<newline46mondego>    }<newline46mondego>}<newline46mondego><newline46mondego>final MyButton button = new MyButton();<newline46mondego>button.setName(<doubleQuotes46>button xpto<doubleQuotes46>);<newline46mondego>button.setMyAction(new Runnable() {<newline46mondego><newline46mondego>    @Override<newline46mondego>    public void run() {<newline46mondego>        System.out.println(<doubleQuotes46>Hey I'm running this on button <doubleQuotes46> + button.getName());<newline46mondego>    }<newline46mondego>});<newline46mondego><newline46mondego>button.addActionListener(new ActionListener() {<newline46mondego>    @Override<newline46mondego>    public void actionPerformed(ActionEvent e) {<newline46mondego>        if(e.getSource() instanceof MyButton){<newline46mondego>            MyButton btn = (MyButton)e.getSource();<newline46mondego>            btn.getMyAction().run();<newline46mondego>        }<newline46mondego>    }<newline46mondego>});<newline46mondego>"
"3999splitHere46","20173419splitHere46","<address>"
"4000splitHere46","20173461splitHere46","static final"
"4001splitHere46","20173461splitHere46","MyFace.a"
"4002splitHere46","20173615splitHere46","public void writeToParcel(Parcel out, int flags) {<newline46mondego>    out.writeInt(mData);<newline46mondego><newline46mondego>    //we want to keep siteName in our parcel, so let's write it to the Parcel obj<newline46mondego>    out.writeString(siteName);<newline46mondego>}<newline46mondego>"
"4003splitHere46","20173615splitHere46","private Site(Parcel in) {<newline46mondego>    mData = in.readInt();<newline46mondego><newline46mondego>    //let's read from in Parcel an set our siteName<newline46mondego>    siteName = in.readString();<newline46mondego>}<newline46mondego>"
"4004splitHere46","20173827splitHere46","public static <E> E mostFrequentElement(Iterable<E> iterable) {<newline46mondego>    Map<E, Integer> freqMap = new HashMap<>();<newline46mondego>    E mostFreq = null;<newline46mondego>    int mostFreqCount = -1;<newline46mondego>    for (E e : iterable) {<newline46mondego>        Integer count = freqMap.get(e);<newline46mondego>        freqMap.put(e, count = (count == null ? 1 : count+1));<newline46mondego>        // maintain the most frequent in a single pass.<newline46mondego>        if (count > mostFreqCount) {<newline46mondego>            mostFreq = e;<newline46mondego>            mostFreqCount = count;<newline46mondego>        }<newline46mondego>    }<newline46mondego>    return mostFreq;<newline46mondego>}<newline46mondego>"
"4005splitHere46","20173827splitHere46","V v = mostFrequentElement(map.values());<newline46mondego>"
"4006splitHere46","20174082splitHere46","new"
"4007splitHere46","20174103splitHere46","Arrays.fill(int[] a, int val)"
"4008splitHere46","20174103splitHere46","java.util.Arrays"
"4009splitHere46","20174103splitHere46","a"
"4010splitHere46","20174103splitHere46","val"
"4011splitHere46","20174103splitHere46","int[] high = new int[5]; <newline46mondego>Arrays.fill(high, -1);<newline46mondego>"
"4012splitHere46","20174104splitHere46","menu.show(parentComponent, 0, -menu.getPreferredSize().height);<newline46mondego>"
"4013splitHere46","20174104splitHere46","parentComponent"
"4014splitHere46","20174288splitHere46","<doubleQuotes46>\\.\\s+<doubleQuotes46>"
"4015splitHere46","20174334splitHere46","sdkType=GAE<newline46mondego>sdkBundlePath=appengine-java-sdk-1.8.6<newline46mondego>"
"4016splitHere46","20174334splitHere46","Manifest-Version: 1.0<newline46mondego>Bundle-ManifestVersion: 2<newline46mondego>Bundle-Name: Google App Engine Java SDK<newline46mondego>Bundle-SymbolicName: com.google.appengine.eclipse.sdkbundle<newline46mondego>Bundle-Version: 1.8.6<newline46mondego>Bundle-Vendor: Google Inc.<newline46mondego>Require-Bundle: org.eclipse.core.runtime<newline46mondego>Bundle-RequiredExecutionEnvironment: J2SE-1.5<newline46mondego>Bundle-ActivationPolicy: lazy<newline46mondego>"
"4017splitHere46","20174354splitHere46","<newline46mondego>11-24 13:00:27.429: E/AndroidRuntime(31304):    at android.widget.ArrayAdapter.<init>(ArrayAdapter.java:153)<newline46mondego>11-24 13:00:27.429: E/AndroidRuntime(31304):    at com.laurenswuyts.witpa.ListEventAdapter.<init>(ListEventAdapter.java:23)"
"4018splitHere46","20174354splitHere46","mInflater = (LayoutInflater)context.getSystemService(Context.LAYOUT_INFLATER_SERVICE);"
"4019splitHere46","20174354splitHere46","context"
"4020splitHere46","20174354splitHere46","null"
"4021splitHere46","20174354splitHere46","null"
"4022splitHere46","20174354splitHere46","getActivity()"
"4023splitHere46","20174354splitHere46","null"
"4024splitHere46","20174443splitHere46","DateFormat df = DateFormat.getDateInstance(DateFormat.FULL, new Locale(<doubleQuotes46>ja<doubleQuotes46>));<newline46mondego>"
"4025splitHere46","20174443splitHere46","DateFormat df = DateFormat.getDateInstance(DateFormat.FULL, new Locale(<doubleQuotes46>ja<doubleQuotes46>));<newline46mondego>System.out.println(df.format(new Date()));<newline46mondego>System.out.println(df.parse(<doubleQuotes46>2013å¹´11æœˆ24æ—¥<doubleQuotes46>));<newline46mondego>"
"4026splitHere46","20174446splitHere46","netError.setVisibility(View.VISIBLE);<newline46mondego>"
"4027splitHere46","20174446splitHere46","doInbackground"
"4028splitHere46","20174446splitHere46","doInbackground"
"4029splitHere46","20174446splitHere46","onPostExecute"
"4030splitHere46","20174539splitHere46","final Rect[] r1 = new Rect[number_of_cubes];<newline46mondego>for (int i = 0; i < number_of_cubes; i++) {<newline46mondego>  final int targetIndex = i;<newline46mondego>  new Thread(new Runnable() { public void run() {<newline46mondego>    ...<newline46mondego>    r1[targetIndex] = ...<newline46mondego>  }}).start();<newline46mondego>"
"4031splitHere46","20174539splitHere46","Random"
"4032splitHere46","20174539splitHere46","join"
"4033splitHere46","20174539splitHere46","main"
"4034splitHere46","20174596splitHere46","super(x, y);"
"4035splitHere46","20174596splitHere46","makeName()"
"4036splitHere46","20174596splitHere46","name = makeName();"
"4037splitHere46","20174596splitHere46","return super.makeName() + <doubleQuotes46>:<doubleQuotes46> + color;"
"4038splitHere46","20174596splitHere46","return super.makeName() + <doubleQuotes46>:<doubleQuotes46> + null;"
"4039splitHere46","20174596splitHere46","new ColorPoint(4, 2, <doubleQuotes46>purple<doubleQuotes46>) //<-- creating ColorPoint object<newline46mondego>super(x, y); //<-- super call<newline46mondego>this.x = 4; <newline46mondego>this.y = 2;<newline46mondego>name = makeName(); //<-- call makeName() in your ColorPoint class<newline46mondego>return super.makeName() + <doubleQuotes46>:<doubleQuotes46> + color; //<-- here color isn't defined yet so it's null<newline46mondego>name = <doubleQuotes46>[4, 2]:null<doubleQuotes46>;<newline46mondego>color = <doubleQuotes46>purple<doubleQuotes46>;<newline46mondego>/***/<newline46mondego>print [4, 2]:null in the console //you call the toString() method, since it returns name you get the following output<newline46mondego>"
"4040splitHere46","20174596splitHere46","class Point { <newline46mondego>    protected final int x, y;<newline46mondego><newline46mondego>    public Point(int x, int y) { <newline46mondego>        this.x = x;<newline46mondego>        this.y = y;<newline46mondego>    }<newline46mondego><newline46mondego>    @Override<newline46mondego>    public String toString() { <newline46mondego>        return <doubleQuotes46>[<doubleQuotes46>+x+<doubleQuotes46>, <doubleQuotes46>+y+<doubleQuotes46>]<doubleQuotes46>;<newline46mondego>    }<newline46mondego>}<newline46mondego><newline46mondego>class ColorPoint extends Point { <newline46mondego>    private final String color;<newline46mondego><newline46mondego>    public ColorPoint(int x,int y, String color) { <newline46mondego>        super(x, y);<newline46mondego>        this.color = color;<newline46mondego>    }<newline46mondego><newline46mondego>    @Override<newline46mondego>    public String toString() {<newline46mondego>        return super.toString() + <doubleQuotes46>:<doubleQuotes46> + color;<newline46mondego>    }<newline46mondego>}<newline46mondego>"
"4041splitHere46","20174619splitHere46","<property name=<doubleQuotes46>databasePlatform<doubleQuotes46> value=<doubleQuotes46>org.hibernate.dialect.MySQL5Dialect<doubleQuotes46>/><newline46mondego>"
"4042splitHere46","20174815splitHere46","int"
"4043splitHere46","20174815splitHere46","double"
"4044splitHere46","20174824splitHere46","<pluginRepositories><newline46mondego>    <pluginRepository><newline46mondego>        <id>Dukes Shopping List Github Repo</id><newline46mondego>        <url>http://your-repository</url><newline46mondego>        <snapshots><newline46mondego>            <enabled>true</enabled><newline46mondego>            <updatePolicy>always</updatePolicy><newline46mondego>        </snapshots><newline46mondego>    </pluginRepository><newline46mondego></pluginRepositories><newline46mondego>"
"4045splitHere46","20175019splitHere46","// Every enum class extends Enum<ThisEnumClassName>. <newline46mondego>// Since we want T to be enum we must write it as <doubleQuotes46>extends Enum<doubleQuotes46><newline46mondego>// but Enum is also generic and require type of store parameters <newline46mondego>// so we need to describe it as Enum<T> which finally gives us - T extends Enum<T><newline46mondego>static <T extends Enum<T>> T reverse(String name, Class<T> clazz) {<newline46mondego>    for (T t : clazz.getEnumConstants())<newline46mondego>        if (t.name().equals(name))<newline46mondego>            return t;<newline46mondego>    return null;<newline46mondego>}<newline46mondego>"
"4046splitHere46","20175019splitHere46","full.package.name.of.YourEnum.VALUE"
"4047splitHere46","20175019splitHere46","Enum.valueOf(YourEnumClass.clazz, <doubleQuotes46>ENUM_FIELD_NAME<doubleQuotes46>)<newline46mondego>"
"4048splitHere46","20175019splitHere46","null"
"4049splitHere46","20175019splitHere46","java.lang.IllegalArgumentException"
"4050splitHere46","20175124splitHere46","//Create a style. We want a blue dashed line.<newline46mondego>    final Style drawStyle = new Style(); //create a Style to use<newline46mondego>    drawStyle.setFillColor(<doubleQuotes46>white<doubleQuotes46>);<newline46mondego>    drawStyle.setGraphicName(<doubleQuotes46>x<doubleQuotes46>);<newline46mondego>    drawStyle.setPointRadius(4);<newline46mondego>    drawStyle.setStrokeWidth(3);<newline46mondego>    drawStyle.setStrokeColor(<doubleQuotes46>#66FFFF<doubleQuotes46>);<newline46mondego>    drawStyle.setStrokeDashstyle(<doubleQuotes46>dash<doubleQuotes46>);<newline46mondego><newline46mondego>    //create a StyleMap using the Style<newline46mondego>    StyleMap drawStyleMap = new StyleMap(drawStyle);<newline46mondego><newline46mondego>    //Create PathHanlderOptions using this StyleMap<newline46mondego>    PathHandlerOptions phOpt = new PathHandlerOptions();<newline46mondego>    phOpt.setStyleMap(drawStyleMap);   <newline46mondego><newline46mondego>    //Create DrawFeatureOptions and set the PathHandlerOptions (that have the StyleMap, that have the Style we wish)<newline46mondego>    DrawFeatureOptions drawFeatureOptions = new DrawFeatureOptions();<newline46mondego>    drawFeatureOptions.setHandlerOptions(phOpt);<newline46mondego><newline46mondego>    PathHandler pathHanlder = new PathHandler();<newline46mondego><newline46mondego>    // Create the DrawFeature control to draw on the map, and pass the DrawFeatureOptions to control the style of the sketch<newline46mondego>    final DrawFeature drawLine = new DrawFeature(vectorLayer, pathHanlder, drawFeatureOptions);<newline46mondego>    map.addControl(drawLine);<newline46mondego>    drawLine.activate();<newline46mondego>"
"4051splitHere46","20175234splitHere46","Init"
"4052splitHere46","20175234splitHere46","TESSDATA_PREFIX"
"4053splitHere46","20175290splitHere46","int"
"4054splitHere46","20175290splitHere46","L"
"4055splitHere46","20175290splitHere46","Integer.MAX_VALUE"
"4056splitHere46","20175290splitHere46","long"
"4057splitHere46","20175290splitHere46","long[] powers = {..., 2863245995L, 11453115051L, ...};<newline46mondego>"
"4058splitHere46","20175407splitHere46","query"
"4059splitHere46","20175407splitHere46","query"
"4060splitHere46","20175407splitHere46","{<newline46mondego>    <doubleQuotes46>query<doubleQuotes46> : {<newline46mondego>        <doubleQuotes46>query<doubleQuotes46> : { <newline46mondego>          <doubleQuotes46>match_all<doubleQuotes46> : {} <newline46mondego>        }<newline46mondego>    }<newline46mondego>}<newline46mondego>"
"4061splitHere46","20175407splitHere46","query"
"4062splitHere46","20175407splitHere46","match_all"
"4063splitHere46","20175458splitHere46","A[] tab = new A[7];<newline46mondego>tab[0] = new B(-10); // permitted since B derives from A<newline46mondego>tab[1] = new A();<newline46mondego>// ...<newline46mondego>tab[2].analyser(tab[1]);<newline46mondego>tab[5].analyser(tab[1]);<newline46mondego>"
"4064splitHere46","20175458splitHere46","A"
"4065splitHere46","20175458splitHere46","object[]"
"4066splitHere46","20175458splitHere46","Object"
"4067splitHere46","20175458splitHere46","A"
"4068splitHere46","20175458splitHere46","A"
"4069splitHere46","20175458splitHere46","B"
"4070splitHere46","20175458splitHere46","A[]"
"4071splitHere46","20175458splitHere46","A"
"4072splitHere46","20175458splitHere46","A"
"4073splitHere46","20175458splitHere46","B"
"4074splitHere46","20175458splitHere46","((A)tab[2])"
"4075splitHere46","20175458splitHere46","tab[2]"
"4076splitHere46","20175458splitHere46","A"
"4077splitHere46","20175458splitHere46","tab[2]"
"4078splitHere46","20175458splitHere46","A"
"4079splitHere46","20175458splitHere46","tab"
"4080splitHere46","20175458splitHere46","Object"
"4081splitHere46","20175458splitHere46","Object"
"4082splitHere46","20175458splitHere46","analyser"
"4083splitHere46","20175458splitHere46","analyser"
"4084splitHere46","20175458splitHere46","tab[0]"
"4085splitHere46","20175458splitHere46","B"
"4086splitHere46","20175458splitHere46","A"
"4087splitHere46","20175458splitHere46","((A)tab[0]).analyzer(tab[1])"
"4088splitHere46","20175458splitHere46","((B)tab[0]).analyser(tab[1])"
"4089splitHere46","20175458splitHere46","B"
"4090splitHere46","20175458splitHere46","analyser"
"4091splitHere46","20175615splitHere46","String"
"4092splitHere46","20175648splitHere46","while(autoRun = true)<newline46mondego>"
"4093splitHere46","20175648splitHere46","while(autoRun)<newline46mondego>"
"4094splitHere46","20175648splitHere46","="
"4095splitHere46","20175648splitHere46","autoRun"
"4096splitHere46","20175648splitHere46","true"
"4097splitHere46","20175648splitHere46","false"
"4098splitHere46","20175648splitHere46","=="
"4099splitHere46","20175648splitHere46","if(credPassCheck.equals(<doubleQuotes46>numbers<doubleQuotes46>)){<newline46mondego>    System.out.print(<doubleQuotes46>Credential Password: <doubleQuotes46>);<newline46mondego>    double credPassNum = e.nextDouble();<newline46mondego>}<newline46mondego>"
"4100splitHere46","20175648splitHere46","if(credPassCheck.equals(<doubleQuotes46>numbers<doubleQuotes46>)){<newline46mondego>    System.out.print(<doubleQuotes46>Credential Password: <doubleQuotes46>);<newline46mondego>    double credPassNum = e.nextDouble();<newline46mondego>    e.nextLine(); //Add this Line<newline46mondego>}<newline46mondego>"
"4101splitHere46","20175713splitHere46","XPath xpath = XPathFactory.newInstance().newXPath();  <newline46mondego>String expression = <doubleQuotes46>//sura<doubleQuotes46>;  <newline46mondego>InputSource inputSource = new InputSource(<doubleQuotes46>filename.xml<doubleQuotes46>);  <newline46mondego>NodeList nodes = (NodeList) xpath.evaluate(expression, inputSource, XPathConstants.NODESET);  <newline46mondego><newline46mondego>for(int i=0; i<nodes.getLength(); i++) {  <newline46mondego>    Node sura = nodes.item(i);  <newline46mondego>    NamedNodeMap attributes = sura.getAttributes();  <newline46mondego>    attributes.getNamedItem(<doubleQuotes46>name<doubleQuotes46>).getNodeValue()  <newline46mondego>}  <newline46mondego>"
"4102splitHere46","20175912splitHere46","HttpRoutePlanner rp = new DefaultRoutePlanner(DefaultSchemePortResolver.INSTANCE) {<newline46mondego><newline46mondego>    @Override<newline46mondego>    public HttpRoute determineRoute(<newline46mondego>            final HttpHost host,<newline46mondego>            final HttpRequest request,<newline46mondego>            final HttpContext context) throws HttpException {<newline46mondego>        HttpHost target = host != null ? host : new HttpHost(<doubleQuotes46>some.default.host<doubleQuotes46>);<newline46mondego>        return super.determineRoute(target, request, context);<newline46mondego>    }<newline46mondego>};<newline46mondego><newline46mondego>CloseableHttpClient client = HttpClients.custom()<newline46mondego>        .setRoutePlanner(rp)<newline46mondego>        .build();<newline46mondego>"
"4103splitHere46","20176072splitHere46","this.mat= new double [this.l][a][b];<newline46mondego>"
"4104splitHere46","20176072splitHere46","this.mat= new double [x][a][b];<newline46mondego>"
"4105splitHere46","20176072splitHere46","public void read() {<newline46mondego>        Scanner citast = new Scanner(System.in);<newline46mondego>        System.out.println(<doubleQuotes46>How many arrays do you want to enter?<doubleQuotes46>);<newline46mondego>        x=citast.nextInt();<newline46mondego>        this.mat = new double[x][][]; //<-- added this line<newline46mondego>        for (this.l=0; this.l<x; this.l++)<newline46mondego>        {<newline46mondego>            System.out.println(<doubleQuotes46>Matrix <doubleQuotes46>+this.l);<newline46mondego>            System.out.println(<doubleQuotes46>Number of lines: <doubleQuotes46>);<newline46mondego>            this.a = citast.nextInt();<newline46mondego>            System.out.println(<doubleQuotes46>Number of columns: <doubleQuotes46>);<newline46mondego>            this.b = citast.nextInt();<newline46mondego>            this.mat[l] =  new double [a][b]; //<-- modified this line<newline46mondego>            for (int i=0; i<this.a; i++)<newline46mondego>                for (int j=0; j<this.b; j++)<newline46mondego>                {<newline46mondego>                    System.out.print(<doubleQuotes46>Matrice <doubleQuotes46> + l + <doubleQuotes46> [<doubleQuotes46>+ i +<doubleQuotes46>][<doubleQuotes46>+ j +<doubleQuotes46>]= <doubleQuotes46>);<newline46mondego>                    this.mat[l][i][j]=citast.nextInt();<newline46mondego>                }<newline46mondego>            System.out.println();<newline46mondego>        }<newline46mondego>        System.out.println(Arrays.deepToString(mat));<newline46mondego>    }<newline46mondego>"
"4106splitHere46","20176072splitHere46","[[[4.0, 4.0], [4.0, 4.0]], [[5.0, 5.0], [5.0, 5.0]]]<newline46mondego>"
"4107splitHere46","20176109splitHere46","2d string array"
"4108splitHere46","20176109splitHere46","Object obj=Array.newInstance(Class.forName(c), n);// Here <doubleQuotes46>c<doubleQuotes46> variable will<newline46mondego>                                                   // known through the run time<newline46mondego>"
"4109splitHere46","20176132splitHere46","Vector2 gravity = new Vector2(0, -1);<newline46mondego><newline46mondego>myobject.velocity.add(gravity);<newline46mondego>myobject.position.add(myobject.velocity.x*delta, myobject.velocity.y*delta);<newline46mondego>"
"4110splitHere46","20176150splitHere46","final static String newline = <doubleQuotes46>/n<doubleQuotes46>;<newline46mondego>"
"4111splitHere46","20176150splitHere46","final static String newline = <doubleQuotes46>\n<doubleQuotes46>;<newline46mondego>"
"4112splitHere46","20176185splitHere46","List<MyRecursive> list = new ArrayList<>();"
"4113splitHere46","20176185splitHere46","MainRecursionClass"
"4114splitHere46","20176185splitHere46","MyRecursive"
"4115splitHere46","20176185splitHere46","list"
"4116splitHere46","20176185splitHere46","MyRecursive"
"4117splitHere46","20176185splitHere46","public synchronized void resume() {<newline46mondego>   notify();<newline46mondego>}<newline46mondego>"
"4118splitHere46","20176185splitHere46","MainRecursionClass.resume()"
"4119splitHere46","20176185splitHere46","public void resume() {<newline46mondego>   System.out.println(<doubleQuotes46>Resumed<doubleQuotes46>);<newline46mondego><newline46mondego>   pause = false;<newline46mondego>   for(MyRecursive mr : list) {<newline46mondego>      if(mr != null)<newline46mondego>         mr.resume();<newline46mondego>      }<newline46mondego>   }<newline46mondego>}<newline46mondego>"
"4120splitHere46","20176196splitHere46","Token{access='1-58925-4628866-7ec476b4b519dea0', refresh='null', scope='non-expiring', expires=null}<newline46mondego>"
"4121splitHere46","20176196splitHere46","Token{access='1-58925-4628866-7ec476b4b519dea0', refresh='null', scope='null', expires=null}<newline46mondego>"
"4122splitHere46","20176196splitHere46","String access = (String) session.getAttribute(<doubleQuotes46>access<doubleQuotes46>);<newline46mondego>String refresh = (String) session.getAttribute(<doubleQuotes46>refresh<doubleQuotes46>);<newline46mondego>Token t = new Token(access, refresh, <doubleQuotes46>non-expiring<doubleQuotes46>);<newline46mondego>"
"4123splitHere46","20176198splitHere46","for(int counter = 0; counter < firstList.size(); counter++) {<newline46mondego>    if(secondList.contains(firstList.get(counter))) {<newline46mondego>          comparingList.set(counter,1);<newline46mondego>      }<newline46mondego>  }<newline46mondego>"
"4124splitHere46","20176198splitHere46","import java.util.ArrayList;<newline46mondego>import java.util.List;<newline46mondego><newline46mondego>public class CompareArrayListTest{<newline46mondego><newline46mondego> public static void main(String[] args) {<newline46mondego><newline46mondego>    ArrayList<String> firstList = new ArrayList<String>();<newline46mondego><newline46mondego>    firstList.add(<doubleQuotes46>book1<doubleQuotes46>);<newline46mondego>    firstList.add(<doubleQuotes46>book2<doubleQuotes46>);<newline46mondego>    firstList.add(<doubleQuotes46>book3<doubleQuotes46>);<newline46mondego>    firstList.add(<doubleQuotes46>book4<doubleQuotes46>);<newline46mondego><newline46mondego>    ArrayList<String> secondList = new ArrayList<String>();<newline46mondego><newline46mondego>    secondList.add(<doubleQuotes46>book1<doubleQuotes46>);<newline46mondego>    secondList.add(<doubleQuotes46>book2<doubleQuotes46>);<newline46mondego>    secondList.add(<doubleQuotes46>book3<doubleQuotes46>);<newline46mondego><newline46mondego>    List<Integer> comparingList = new ArrayList<Integer>();<newline46mondego>    // adding default values as one<newline46mondego>    for (int a = 0; a < firstList.size(); a++) {<newline46mondego>        comparingList.add(0);<newline46mondego><newline46mondego>    }<newline46mondego><newline46mondego>    for (int counter = 0; counter < firstList.size(); counter++) {<newline46mondego>        if (secondList.contains(firstList.get(counter))) {<newline46mondego>            comparingList.set(counter, 1);<newline46mondego>        }<newline46mondego>    }<newline46mondego><newline46mondego>    System.out.println(comparingList);<newline46mondego><newline46mondego>}<newline46mondego>"
"4125splitHere46","20176198splitHere46","BitSet bitset = new BitSet();<newline46mondego>// adding default values as one<newline46mondego>for (int a = 0; a < firstList.size(); a++) {<newline46mondego>    comparingList.add(0);<newline46mondego><newline46mondego>}<newline46mondego><newline46mondego>for (int counter = 0; counter < firstList.size(); counter++) {<newline46mondego>    for (int counter2 = 0; counter < secondList.size(); counter++) {<newline46mondego>        if (secondList.get(counter2).equals(firstList.get(counter))) {<newline46mondego>            bitset.set(counter, 1);<newline46mondego>        }<newline46mondego>    }<newline46mondego>}<newline46mondego>"
"4126splitHere46","20176495splitHere46","http://mydomain/MyApp/rest/carbean/savecarorder<newline46mondego>"
"4127splitHere46","20176495splitHere46","http://mydomain/MyApp/rest/carbean/getcarorder?equipmentId=570674<newline46mondego>"
"4128splitHere46","20176495splitHere46","package com.samnunnally.services;<newline46mondego><newline46mondego>import javax.ejb.EJB;<newline46mondego>import javax.ejb.LocalBean;<newline46mondego>import javax.ejb.Stateless;<newline46mondego>import javax.ws.rs.Consumes;<newline46mondego>import javax.ws.rs.GET;<newline46mondego>import javax.ws.rs.POST;<newline46mondego>import javax.ws.rs.PUT;<newline46mondego>import javax.ws.rs.Path;<newline46mondego>import javax.ws.rs.Produces;<newline46mondego>import javax.ws.rs.QueryParam;<newline46mondego>import javax.ws.rs.core.MediaType;<newline46mondego><newline46mondego>import com.samnunnally.CarManager;<newline46mondego>import com.samnunnally.CarOrder;<newline46mondego>/**<newline46mondego> * Session Bean implementation class CarService<newline46mondego> */<newline46mondego>@Stateless(mappedName = <doubleQuotes46>ejb/CarService<doubleQuotes46>)<newline46mondego>@LocalBean<newline46mondego>@Path (<doubleQuotes46>/carbean<doubleQuotes46>)<newline46mondego>public class CarService {<newline46mondego><newline46mondego>    @EJB<newline46mondego>    CarManager carManager;<newline46mondego><newline46mondego>    @GET<newline46mondego>    @Produces({ MediaType.APPLICATION_JSON })<newline46mondego>    @Path(<doubleQuotes46>/getcarorder<doubleQuotes46>)<newline46mondego>    public CarOrder getCar(@QueryParam(<doubleQuotes46>equipmentId<doubleQuotes46>) String equipmentId) {<newline46mondego><newline46mondego>        return carManager.getCarOrder(equipmentId);<newline46mondego>    }<newline46mondego><newline46mondego>    @Path(<doubleQuotes46>/savecarorder<doubleQuotes46>)<newline46mondego>    @PUT<newline46mondego>    @Consumes({ <doubleQuotes46>application/xml<doubleQuotes46>, <doubleQuotes46>application/json<doubleQuotes46> })<newline46mondego>    public String saveCarOrder(CarOrder carOrder) {<newline46mondego><newline46mondego>        carManager.saveCarOrder(carOrder);<newline46mondego><newline46mondego>        return <doubleQuotes46>true<doubleQuotes46>;<newline46mondego>    }<newline46mondego><newline46mondego>}<newline46mondego>"
"4129splitHere46","20176495splitHere46","<servlet><newline46mondego>        <servlet-name>javax.ws.rs.core.Application</servlet-name><newline46mondego>    </servlet><newline46mondego>    <servlet-mapping><newline46mondego>        <servlet-name>javax.ws.rs.core.Application</servlet-name><newline46mondego>        <url-pattern>/rest/*</url-pattern><newline46mondego>    </servlet-mapping><newline46mondego>"
"4130splitHere46","20176495splitHere46","package com.samnunnally.managers;<newline46mondego><newline46mondego>import java.util.HashMap;<newline46mondego>import java.util.Map;<newline46mondego><newline46mondego>import javax.ejb.LocalBean;<newline46mondego>import javax.ejb.Singleton;<newline46mondego><newline46mondego>import com.samnunnally.model.CarOrder;<newline46mondego><newline46mondego>/**<newline46mondego> * Session Bean implementation class CarManager<newline46mondego> *<newline46mondego> * @author Sam Nunnally<newline46mondego> *<newline46mondego> */<newline46mondego>@Singleton(mappedName = <doubleQuotes46>ejb/CarManager<doubleQuotes46>)<newline46mondego>@LocalBean<newline46mondego>public class CarManager {<newline46mondego><newline46mondego>    /*<newline46mondego>     * this should be a database of some sort<newline46mondego>     */<newline46mondego>    private Map<String, CarOrder> carOrders = null;<newline46mondego><newline46mondego>    public CarOrder getCarOrder(String equipmentId) {<newline46mondego>        return getCarOrders().get(equipmentId);<newline46mondego>    }<newline46mondego><newline46mondego>    public void saveCarOrder(CarOrder carOrder) {<newline46mondego>        getCarOrders().put(carOrder.getEquipmentId(), carOrder);<newline46mondego>    }<newline46mondego><newline46mondego>    private Map<String, CarOrder> getCarOrders(){<newline46mondego>        if(carOrders == null){<newline46mondego>            carOrders = new HashMap<String, CarOrder>();<newline46mondego>        }<newline46mondego><newline46mondego>        return carOrders;<newline46mondego>    }<newline46mondego>}<newline46mondego>"
"4131splitHere46","20176530splitHere46","String.hashCode()"
"4132splitHere46","20176530splitHere46","String"
"4133splitHere46","20176587splitHere46","((lng >> ((7 - i) * 8)) & 0xff);<newline46mondego>"
"4134splitHere46","20176587splitHere46","((7 - i) * 8)"
"4135splitHere46","20176587splitHere46",">>"
"4136splitHere46","20176587splitHere46","lng"
"4137splitHere46","20176587splitHere46","(7-i)"
"4138splitHere46","20176587splitHere46","&"
"4139splitHere46","20176587splitHere46","0xff"
"4140splitHere46","20176587splitHere46","lng"
"4141splitHere46","20176587splitHere46","lng"
"4142splitHere46","20176654splitHere46","BatteryStatusUtil"
"4143splitHere46","20176654splitHere46","BatteryStatusUtil"
"4144splitHere46","20176669splitHere46","findViewById"
"4145splitHere46","20176669splitHere46","null"
"4146splitHere46","20176669splitHere46","NPE"
"4147splitHere46","20176669splitHere46","login.setOnClickListener(/**/)"
"4148splitHere46","20176669splitHere46","onCreate(Bundle)"
"4149splitHere46","20176669splitHere46","setContentView(int)"
"4150splitHere46","20176669splitHere46","findViewById(int)"
"4151splitHere46","20176669splitHere46","Button login;<newline46mondego>Button register;<newline46mondego><newline46mondego>@SuppressLint(<doubleQuotes46>NewApi<doubleQuotes46>)<newline46mondego>@Override<newline46mondego>protected void onCreate(Bundle savedInstanceState) {<newline46mondego>    super.onCreate(savedInstanceState);<newline46mondego>    setContentView(R.layout.activity_login); //<-- here the layout is inflated<newline46mondego>    //Now you can retrieve your elements from the XML file.<newline46mondego>    login = (Button) findViewById(R.id.login);<newline46mondego>    register = (Button) findViewById(R.id.register);<newline46mondego>    /*****/<newline46mondego>}<newline46mondego>"
"4152splitHere46","20176733splitHere46","scan.useDelimiter(<doubleQuotes46>[\\s.\\-/]+<doubleQuotes46>);<newline46mondego>"
"4153splitHere46","20176733splitHere46","\\s"
"4154splitHere46","20176733splitHere46","\r\n"
"4155splitHere46","20176733splitHere46","."
"4156splitHere46","20176733splitHere46","-"
"4157splitHere46","20176733splitHere46","/"
"4158splitHere46","20176831splitHere46","init"
"4159splitHere46","20176831splitHere46","main"
"4160splitHere46","20176831splitHere46","init"
"4161splitHere46","20176831splitHere46","import java.awt.*;<newline46mondego>import java.awt.event.*;<newline46mondego>import javax.swing.*;<newline46mondego>import java.applet.*;<newline46mondego><newline46mondego>public class Topics extends Applet {<newline46mondego>String topicTotal = <doubleQuotes46><doubleQuotes46>;<newline46mondego>JPanel topicPanel;<newline46mondego>JLabel title, username, topic, paragraph, topicsTitle;<newline46mondego>JTextField nameField, topicField;<newline46mondego>JButton submitButton;<newline46mondego>JTextArea paragraphArea;<newline46mondego><newline46mondego>public String getTopicTotal() {<newline46mondego>    return topicTotal;<newline46mondego>}<newline46mondego><newline46mondego>public void init() {<newline46mondego>    final JPanel topicGUI = new JPanel();<newline46mondego>    topicGUI.setLayout(null);<newline46mondego><newline46mondego>    // posting panel<newline46mondego>    final JPanel postPanel = new JPanel();<newline46mondego>    postPanel.setLayout(null);<newline46mondego>    postPanel.setLocation(0, 0);<newline46mondego>    postPanel.setSize(500, 270);<newline46mondego>    add(postPanel);<newline46mondego><newline46mondego>    setVisible(true);<newline46mondego><newline46mondego>    // JLabels<newline46mondego><newline46mondego>    JLabel title = new JLabel(<doubleQuotes46>Make A Post<doubleQuotes46>);<newline46mondego>    title.setLocation(170, 3);<newline46mondego>    title.setSize(150, 25);<newline46mondego>    title.setFont(new Font(<doubleQuotes46>Serif<doubleQuotes46>, Font.PLAIN, 25));<newline46mondego>    title.setHorizontalAlignment(0);<newline46mondego>    add(title);<newline46mondego><newline46mondego>    JLabel username = new JLabel(<doubleQuotes46>Username: <doubleQuotes46>);<newline46mondego>    username.setLocation(20, 30);<newline46mondego>    username.setSize(70, 15);<newline46mondego>    username.setHorizontalAlignment(0);<newline46mondego>    add(username);<newline46mondego><newline46mondego>    JLabel topic = new JLabel(<doubleQuotes46>Topic: <doubleQuotes46>);<newline46mondego>    topic.setLocation(20, 50);<newline46mondego>    topic.setSize(40, 15);<newline46mondego>    topic.setHorizontalAlignment(0);<newline46mondego>    add(topic);<newline46mondego><newline46mondego>    JLabel paragraph = new JLabel(<doubleQuotes46>Paragraph: <doubleQuotes46>);<newline46mondego>    paragraph.setLocation(20, 70);<newline46mondego>    paragraph.setSize(70, 15);<newline46mondego>    paragraph.setHorizontalAlignment(0);<newline46mondego>    add(paragraph);<newline46mondego><newline46mondego>    // JTextFields<newline46mondego><newline46mondego>    nameField = new JTextField(8);<newline46mondego>    nameField.setLocation(90, 30);<newline46mondego>    nameField.setSize(150, 18);<newline46mondego>    add(nameField);<newline46mondego><newline46mondego>    topicField = new JTextField(8);<newline46mondego>    topicField.setLocation(60, 50);<newline46mondego>    topicField.setSize(180, 18);<newline46mondego>    add(topicField);<newline46mondego><newline46mondego>    // JTextAreas<newline46mondego><newline46mondego>    paragraphArea = new JTextArea(8, 5);<newline46mondego>    paragraphArea.setLocation(20, 85);<newline46mondego>    paragraphArea.setSize(450, 100);<newline46mondego>    paragraphArea.setLineWrap(true);<newline46mondego>    paragraphArea.setEditable(true);<newline46mondego>    JScrollPane scrollParagraph = new JScrollPane(paragraphArea);<newline46mondego>    scrollParagraph<newline46mondego>            .setVerticalScrollBarPolicy(JScrollPane.VERTICAL_SCROLLBAR_ALWAYS);<newline46mondego>    add(paragraphArea);<newline46mondego><newline46mondego>    // JButton<newline46mondego><newline46mondego>    JButton submitButton = new JButton(<doubleQuotes46>SUBMIT<doubleQuotes46>);<newline46mondego>    submitButton.setLocation(250, 30);<newline46mondego>    submitButton.setSize(100, 30);<newline46mondego>    submitButton.addActionListener(new ActionListener() {<newline46mondego>        @Override<newline46mondego>        public void actionPerformed(ActionEvent e) {<newline46mondego><newline46mondego>            topicTotal = topicTotal + <doubleQuotes46>/n<doubleQuotes46> + nameField + <doubleQuotes46>/n<doubleQuotes46> + topicTotal<newline46mondego>                    + <doubleQuotes46>/n<doubleQuotes46> + paragraphArea + <doubleQuotes46>/n<doubleQuotes46>;<newline46mondego>        }<newline46mondego>    });<newline46mondego>    add(submitButton);<newline46mondego>}<newline46mondego><newline46mondego>}<newline46mondego>"
"4162splitHere46","20176879splitHere46","FileOutputStream"
"4163splitHere46","20176879splitHere46","ByteArrayOutputStream"
"4164splitHere46","20176879splitHere46","getBytes()"
"4165splitHere46","20176879splitHere46","byte[] data"
"4166splitHere46","20176879splitHere46","/uploads"
"4167splitHere46","20176879splitHere46","ImageAction"
"4168splitHere46","20176961splitHere46","public static void main(String[] args) {<newline46mondego>    StandardPBEStringEncryptor encryptor = new StandardPBEStringEncryptor();<newline46mondego>    encryptor.setPassword(<doubleQuotes46>mySecretPassword<doubleQuotes46>);        <newline46mondego>    String encryptedText = encryptor.encrypt(<doubleQuotes46>Hello World<doubleQuotes46>);<newline46mondego>    System.out.println(<doubleQuotes46>Encrypted text is: <doubleQuotes46> + encryptedText);<newline46mondego><newline46mondego>    StandardPBEStringEncryptor decryptor = new StandardPBEStringEncryptor();<newline46mondego>    decryptor.setPassword(<doubleQuotes46>mySecretPassword<doubleQuotes46>);  <newline46mondego>    String decryptedText = decryptor.decrypt(encryptedText);<newline46mondego>    System.out.println(<doubleQuotes46>Decrypted text is: <doubleQuotes46> + decryptedText);<newline46mondego>    }<newline46mondego>"
"4169splitHere46","20176961splitHere46","Encrypted text is: +pBbr+KOb7D6Ap/5vYJIUoHbhOruls+L<newline46mondego>Decrypted text is: Hello World<newline46mondego>"
"4170splitHere46","20176988splitHere46","org.apache.struts2.dispatcher.ng.filter"
"4171splitHere46","20176988splitHere46","org.apache.struts2.dispatcher.filter"
"4172splitHere46","20177008splitHere46","getContentResolver()"
"4173splitHere46","20177008splitHere46","context.getContentResolver()"
"4174splitHere46","20177008splitHere46","getActivity().getContentResolver()"
"4175splitHere46","20177008splitHere46","getActivity().getWindow()"
"4176splitHere46","20177008splitHere46","getActivity()"
"4177splitHere46","20177019splitHere46","dateTime.setText(app.getTotalDl());<newline46mondego>"
"4178splitHere46","20177019splitHere46","dateTime.setText(String.valueOf(app.getTotalDl()));<newline46mondego>"
"4179splitHere46","20177019splitHere46","setText"
"4180splitHere46","20177019splitHere46","app.getTotalDl()"
"4181splitHere46","20177019splitHere46","setText"
"4182splitHere46","20177181splitHere46","concurrency"
"4183splitHere46","20177181splitHere46","TimeConsumptionCallable implements Callable"
"4184splitHere46","20177264splitHere46","var options = {<newline46mondego>  enableHighAccuracy: true,<newline46mondego>  timeout: 30000,<newline46mondego>  maximumAge: 0<newline46mondego>};<newline46mondego>"
"4185splitHere46","20177264splitHere46","<uses-permission android:name=<doubleQuotes46>android.permission.ACCESS_COARSE_LOCATION<doubleQuotes46> /><newline46mondego><uses-permission android:name=<doubleQuotes46>android.permission.ACCESS_FINE_LOCATION<doubleQuotes46> /><newline46mondego>"
"4186splitHere46","20177264splitHere46","<plugin name=<doubleQuotes46>Geolocation<doubleQuotes46> value=<doubleQuotes46>org.apache.cordova.GeoBroker<doubleQuotes46> /><newline46mondego>"
"4187splitHere46","20177305splitHere46","INTERNET"
"4188splitHere46","20177305splitHere46","e.getMessage()"
"4189splitHere46","20177351splitHere46","fn:doc"
"4190splitHere46","20177351splitHere46","transform"
"4191splitHere46","20177379splitHere46","SimpleDateFormat"
"4192splitHere46","20177379splitHere46","u"
"4193splitHere46","20177379splitHere46","String text = String.valueOf(calendar.get(Calendar.DAY_OF_WEEK));<newline46mondego>"
"4194splitHere46","20177481splitHere46","do{ <newline46mondego>    ...<newline46mondego>    GuesstheNum game= new GuesstheNum(max2);<newline46mondego>    game.ChecktheNum();<newline46mondego>}while(game.ChecktheNum == false)<newline46mondego>"
"4195splitHere46","20177481splitHere46","game"
"4196splitHere46","20177481splitHere46","while"
"4197splitHere46","20177481splitHere46","GuesstheNum game;<newline46mondego><newline46mondego>do{ <newline46mondego>    ...<newline46mondego>    game= new GuesstheNum(max2);<newline46mondego>    game.ChecktheNum();<newline46mondego>}while(game.ChecktheNum == false)<newline46mondego>"
"4198splitHere46","20177481splitHere46","GuesstheNum game;<newline46mondego>    boolean guess;<newline46mondego>    do {<newline46mondego>        String num2 = JOptionPane.showInputDialog(<doubleQuotes46> Guess a integer between 1 and <doubleQuotes46> + max);<newline46mondego>        int max2 = Integer.parseInt(num2);<newline46mondego>        game = new GuesstheNum(max2);<newline46mondego>        guess = game.ChecktheNum();<newline46mondego>    } while (guess);<newline46mondego>"
"4199splitHere46","20177481splitHere46","GuesstheNum game;<newline46mondego><newline46mondego>    do {<newline46mondego>        String num2 = JOptionPane.showInputDialog(<doubleQuotes46> Guess a integer between 1 and <doubleQuotes46> + max);<newline46mondego>        int max2 = Integer.parseInt(num2);<newline46mondego>        game = new GuesstheNum(max2);<newline46mondego>    } while (game.ChecktheNum());<newline46mondego>"
"4200splitHere46","20177481splitHere46","GuesstheNum game;<newline46mondego>do {<newline46mondego>    String num2 = JOptionPane.showInputDialog(<doubleQuotes46> Guess a integer between 1 and <doubleQuotes46> + max);<newline46mondego>    int max2;<newline46mondego>    try{<newline46mondego>        int max2 = Integer.parseInt(num2);<newline46mondego>    } catch (NumberFormatException ex){<newline46mondego>        continue;<newline46mondego>    }<newline46mondego>    game = new GuesstheNum(max2);<newline46mondego>} while (!game.ChecktheNum());<newline46mondego>"
"4201splitHere46","20177540splitHere46","%.2f"
"4202splitHere46","20177540splitHere46","String.format(<doubleQuotes46> %.2f<doubleQuotes46>, outputValue);<newline46mondego>"
"4203splitHere46","20177662splitHere46","In Java, Objects do not always get garbage collected. <newline46mondego>"
"4204splitHere46","20177662splitHere46","finalize()"
"4205splitHere46","20177662splitHere46","finalize()"
"4206splitHere46","20177662splitHere46","finalize()"
"4207splitHere46","20177662splitHere46","WeakReference"
"4208splitHere46","20177687splitHere46","String line1 = match_dataset1.readLine();<newline46mondego>"
"4209splitHere46","20177687splitHere46","line1"
"4210splitHere46","20177687splitHere46","null"
"4211splitHere46","20177687splitHere46","BufferedReader.readLine()"
"4212splitHere46","20177687splitHere46","null"
"4213splitHere46","20177687splitHere46","for loop"
"4214splitHere46","20177687splitHere46","while"
"4215splitHere46","20177687splitHere46","String line1 = <doubleQuotes46><doubleQuotes46>;<newline46mondego>while((line1 = match_dataset1.readLine())!=null)<newline46mondego>{<newline46mondego>    //  other code<newline46mondego>}<newline46mondego>"
"4216splitHere46","20177867splitHere46","name := <doubleQuotes46>testHibernate<doubleQuotes46><newline46mondego><newline46mondego>version := <doubleQuotes46>1.0-SNAPSHOT<doubleQuotes46><newline46mondego><newline46mondego>libraryDependencies ++= Seq(<newline46mondego>  jdbc,<newline46mondego>  anorm,<newline46mondego>  cache,<newline46mondego>  <doubleQuotes46>org.hibernate<doubleQuotes46> % <doubleQuotes46>hibernate-core<doubleQuotes46> % <doubleQuotes46>4.3.0.CR1<doubleQuotes46>,<newline46mondego>  <doubleQuotes46>org.hibernate<doubleQuotes46> % <doubleQuotes46>hibernate-entitymanager<doubleQuotes46> % <doubleQuotes46>4.3.0.CR1<doubleQuotes46>,<newline46mondego>  <doubleQuotes46>org.hibernate.javax.persistence<doubleQuotes46> % <doubleQuotes46>hibernate-jpa-2.1-api<doubleQuotes46> % <doubleQuotes46>1.0.0.Draft-16<doubleQuotes46><newline46mondego>)     <newline46mondego><newline46mondego>play.Project.playScalaSettings<newline46mondego>"
"4217splitHere46","20177867splitHere46","<doubleQuotes46>groupId<doubleQuotes46> % <doubleQuotes46>artifactId<doubleQuotes46> % <doubleQuotes46>version<doubleQuotes46><newline46mondego>"
"4218splitHere46","20177884splitHere46","svn checkout http://wunderground-core.googlecode.com/svn/trunk/ wunderground-core-read-only<newline46mondego>"
"4219splitHere46","20177884splitHere46","public static final Map<String, WeatherStation> ALL = new HashMap<String, WeatherStation>();<newline46mondego>static {<newline46mondego>    ALL.put(<doubleQuotes46>INRWKLEV2<doubleQuotes46>, INRWKLEV2_KLEVE);<newline46mondego>    ALL.put(<doubleQuotes46>INORDRHE110<doubleQuotes46>, INORDRHE110_GOCH);<newline46mondego>    ALL.put(<doubleQuotes46>IDRENTHE48<doubleQuotes46>, IDRENTHE48_COEVORDEN);<newline46mondego>    ALL.put(<doubleQuotes46>IZEELAND13<doubleQuotes46>, IZEELAND13_GOES);<newline46mondego>    ALL.put(<doubleQuotes46>INORDRHE72<doubleQuotes46>, INORDRHE72_DORTMUND);<newline46mondego>    ALL.put(<doubleQuotes46>INOORDBR35<doubleQuotes46>, INOORDBR35_BOXMEER);<newline46mondego>}; <newline46mondego>"
"4220splitHere46","20177957splitHere46","=="
"4221splitHere46","20177957splitHere46","if(e.getSource() == radBtn1){<newline46mondego> // do something<newline46mondego>}  <newline46mondego>"
"4222splitHere46","20177957splitHere46","instanceof"
"4223splitHere46","20177957splitHere46","JButton"
"4224splitHere46","20177957splitHere46","JRadioButton"
"4225splitHere46","20177957splitHere46","Object source = e.getSource();<newline46mondego>if (source instanceof JButton){<newline46mondego>  JButton btn = (JButton) source;<newline46mondego>} else if (source instanceof JRadioButton){<newline46mondego>  JRadioButton btn = (JRadioButton) source;<newline46mondego>}<newline46mondego>"
"4226splitHere46","20177983splitHere46","t4.getText() .equals( <doubleQuotes46>PhD<doubleQuotes46> )<newline46mondego>"
"4227splitHere46","20177983splitHere46","t4.getText() == <doubleQuotes46>PhD<doubleQuotes46> <newline46mondego>"
"4228splitHere46","20179115splitHere46","private MyPolygon p = new MyPolygon();<newline46mondego>"
"4229splitHere46","20179295splitHere46","vaTest();"
"4230splitHere46","20179295splitHere46","vaTest(new int[] {});<newline46mondego>"
"4231splitHere46","20179373splitHere46","Pattern pattern = Pattern.compile(<doubleQuotes46>[ ,\\.]<doubleQuotes46>);<newline46mondego>Matcher matcher = pattern.matcher(title);<newline46mondego>int index = matcher.find() ? matcher.start() : -1;<newline46mondego>"
"4232splitHere46","20179373splitHere46","BreakIterator"
"4233splitHere46","20179415splitHere46","A"
"4234splitHere46","20179415splitHere46","A(int a){<newline46mondego>}<newline46mondego>"
"4235splitHere46","20179415splitHere46","A"
"4236splitHere46","20179415splitHere46","A a = new A(42);<newline46mondego>"
"4237splitHere46","20179415splitHere46","B"
"4238splitHere46","20179415splitHere46","B"
"4239splitHere46","20179415splitHere46","A"
"4240splitHere46","20179415splitHere46","class A{<newline46mondego>    A(){<newline46mondego>    }<newline46mondego><newline46mondego>class B extends A{<newline46mondego>    B(){<newline46mondego>        // super(); injected by compiler<newline46mondego>    }<newline46mondego>}<newline46mondego>"
"4241splitHere46","20179415splitHere46","super(...)"
"4242splitHere46","20179415splitHere46","class A{<newline46mondego>    A(int a){<newline46mondego>    }<newline46mondego><newline46mondego>class B extends A{<newline46mondego>    B(){    <newline46mondego>        super(42);<newline46mondego>    }<newline46mondego>}<newline46mondego>"
"4243splitHere46","20179415splitHere46","A"
"4244splitHere46","20179415splitHere46","B"
"4245splitHere46","20179415splitHere46","A"
"4246splitHere46","20179462splitHere46","rs1.next();<newline46mondego> noproduct=rs1.getInt(1);<newline46mondego>"
"4247splitHere46","20179462splitHere46","ResultSet"
"4248splitHere46","20179462splitHere46","Statement"
"4249splitHere46","20179486splitHere46","Parser"
"4250splitHere46","20179486splitHere46","ParseContext"
"4251splitHere46","20179486splitHere46","-z"
"4252splitHere46","20179486splitHere46","FileEmbeddedDocumentExtractor"
"4253splitHere46","20179486splitHere46","final AutoDetectParser parser = new AutoDetectParser();<newline46mondego><newline46mondego>public class ExtractParser extends AbstractParser {<newline46mondego>   private int att = 0;<newline46mondego>   public Set<MediaType> getSupportedTypes(ParseContext context) {<newline46mondego>     // Everything AutoDetect parser does<newline46mondego>     return parser.getSupportedTypes(context);<newline46mondego>   }<newline46mondego>   public void parse(<newline46mondego>        InputStream stream, ContentHandler handler,<newline46mondego>        Metadata metadata, ParseContext context)<newline46mondego>        throws IOException, SAXException, TikaException {<newline46mondego>      // Stream to a new file<newline46mondego>      File f = new File(<doubleQuotes46>out-<doubleQuotes46> + (++att) + <doubleQuotes46>.bin<doubleQuotes46>);<newline46mondego>      FileOutputStream fout = new FileOutputStream(f);<newline46mondego>      IOUtils.copy(strea, fout);<newline46mondego>      fout.closee();<newline46mondego>   }<newline46mondego>}<newline46mondego><newline46mondego>InputStream input = new FileInputStream(new File(<doubleQuotes46>1.docx<doubleQuotes46>));<newline46mondego>Metadata metadata = new Metadata();<newline46mondego>ParseContext context = new ParseContext();<newline46mondego>context.set(Parser.class, extractParser);<newline46mondego>parser.parse(input, handler, metadata, context);<newline46mondego>"
"4254splitHere46","20179486splitHere46","EmbeddedDocumentExtractor"
"4255splitHere46","20179590splitHere46","@EJB<newline46mondego>private static CounterSessionBeanRemote counterSessionBean;<newline46mondego>"
"4256splitHere46","20179590splitHere46","Context jndiContext = new InitialContext();<newline46mondego>CounterSessionBeanRemote bean = (CounterSessionBeanRemote ) jndiContext.lookup(<doubleQuotes46>....<doubleQuotes46>);<newline46mondego>"
"4257splitHere46","20179607splitHere46","class Race {<newline46mondego>  public void synchronized print(){<newline46mondego>    ...<newline46mondego>  }<newline46mondego>}<newline46mondego><newline46mondego>Race r = new Race();<newline46mondego>Thread t1 = new Thread(r); <newline46mondego>Thread t2 = new Thread(r); //notice both threads share r.<newline46mondego><newline46mondego>t1.start();<newline46mondego>t2.start();<newline46mondego>"
"4258splitHere46","20179607splitHere46","synchornized"
"4259splitHere46","20179609splitHere46","Random r = new Random(1);<newline46mondego><newline46mondego>Field f;<newline46mondego>try {<newline46mondego>    f = r.getClass().getDeclaredField(<doubleQuotes46>seed<doubleQuotes46>);<newline46mondego>    f.setAccessible(true);<newline46mondego>    AtomicLong seed = (AtomicLong) f.get(r);<newline46mondego>    System.out.println(<doubleQuotes46>seed: <doubleQuotes46> + seed);<newline46mondego><newline46mondego>    f = r.getClass().getDeclaredField(<doubleQuotes46>mask<doubleQuotes46>);<newline46mondego>    f.setAccessible(true);<newline46mondego>    Long mask = (Long) f.get(r);<newline46mondego>    System.out.println(<doubleQuotes46>mask: <doubleQuotes46> + mask);<newline46mondego><newline46mondego>    f = r.getClass().getDeclaredField(<doubleQuotes46>multiplier<doubleQuotes46>);<newline46mondego>    f.setAccessible(true);<newline46mondego>    Long multiplier = (Long) f.get(r);<newline46mondego>    System.out.println(<doubleQuotes46>multiplier: <doubleQuotes46> + multiplier);<newline46mondego><newline46mondego><newline46mondego>    long initialSeed = (seed.longValue() ^ multiplier);<newline46mondego>    System.out.println(<doubleQuotes46>restored initial seed: <doubleQuotes46> + initialSeed);<newline46mondego>} catch (NoSuchFieldException e1) {<newline46mondego>} catch (SecurityException e2) {<newline46mondego>} catch (IllegalAccessException e3) {<newline46mondego>} catch (IllegalArgumentException e4) {<newline46mondego>}   <newline46mondego>"
"4260splitHere46","20179609splitHere46","seed: 25214903916<newline46mondego>mask: 281474976710655<newline46mondego>multiplier: 25214903917<newline46mondego>restored initial seed: 1<newline46mondego>"
"4261splitHere46","20179609splitHere46","seed"
"4262splitHere46","20179609splitHere46","public Random(long seed) {<newline46mondego>    if (getClass() == Random.class)<newline46mondego>        this.seed = new AtomicLong(initialScramble(seed));<newline46mondego>    else {<newline46mondego>        // subclass might have overriden setSeed<newline46mondego>        this.seed = new AtomicLong();<newline46mondego>        setSeed(seed);<newline46mondego>    }<newline46mondego>}<newline46mondego><newline46mondego>private static long initialScramble(long seed) {<newline46mondego>    return (seed ^ multiplier) & mask; // (seed XOR multiplier) AND mask<newline46mondego>}<newline46mondego>"
"4263splitHere46","20179609splitHere46","mask"
"4264splitHere46","20179609splitHere46","multiplier"
"4265splitHere46","20179609splitHere46","private static final long mask = (1L << 48) - 1;<newline46mondego>private static final long multiplier = 0x5DEECE66DL;<newline46mondego>"
"4266splitHere46","20179609splitHere46","mask"
"4267splitHere46","20179609splitHere46","1"
"4268splitHere46","20179609splitHere46","Random r = new Random((1L << 48)-1);<newline46mondego><newline46mondego>seed: 281449761806738<newline46mondego>mask: 281474976710655<newline46mondego>multiplier: 25214903917<newline46mondego>restored initial seed: 281474976710655<newline46mondego>"
"4269splitHere46","20179609splitHere46","Random r = new Random((1L << 48));<newline46mondego><newline46mondego>seed: 25214903917<newline46mondego>mask: 281474976710655<newline46mondego>multiplier: 25214903917<newline46mondego>restored initial seed: 0<newline46mondego>"
"4270splitHere46","20179621splitHere46","_recordControl.startRecord()"
"4271splitHere46","20179621splitHere46","_player.start()"
"4272splitHere46","20179622splitHere46","flush"
"4273splitHere46","20179622splitHere46","outToclient.writeBytes(<doubleQuotes46>alaa\n<doubleQuotes46>);<newline46mondego>outToclient.flush();<newline46mondego>"
"4274splitHere46","20179716splitHere46","(child <= n-1)"
"4275splitHere46","20179716splitHere46","child"
"4276splitHere46","20179716splitHere46","child+1"
"4277splitHere46","20179716splitHere46","(child <= n-1)"
"4278splitHere46","20179716splitHere46","while (child <= n)<newline46mondego>{<newline46mondego>    if (child < n && tab[child] < tab[child+1])<newline46mondego>    {<newline46mondego>        child = child+1;<newline46mondego>    }<newline46mondego>"
"4279splitHere46","20179764splitHere46","while"
"4280splitHere46","20179764splitHere46","final"
"4281splitHere46","20179764splitHere46","str"
"4282splitHere46","20179764splitHere46","while"
"4283splitHere46","20179764splitHere46","Runnable"
"4284splitHere46","20179764splitHere46","run()"
"4285splitHere46","20179764splitHere46","while ((str = rd.readLine()) != null) {<newline46mondego>    final String value = str;<newline46mondego>    runOnUiThread(new Runnable() {<newline46mondego>        public void run() {<newline46mondego>            TextView newMsg = new TextView(getApplicationContext());<newline46mondego>            newMsg.setText(value);<newline46mondego><newline46mondego>            newMsg.setLayoutParams(new LayoutParams (<newline46mondego>                                                LayoutParams.MATCH_PARENT,<newline46mondego>                                                LayoutParams.WRAP_CONTENT));<newline46mondego>                                        m_receivedMessagesLayout.addView(newMsg);<newline46mondego>            }<newline46mondego>    });<newline46mondego>}<newline46mondego>"
"4286splitHere46","20179956splitHere46","List<Object[]> list = ....<newline46mondego>for (Iterator<Object[]> it = list.iterator(); it.hasNext();) {<newline46mondego>    Object[] arr = it.next();<newline46mondego>    for (Object o : arr) {<newline46mondego>        ...<newline46mondego>    }<newline46mondego>}<newline46mondego>"
"4287splitHere46","20179964splitHere46","replace(...)"
"4288splitHere46","20179964splitHere46","int length"
"4289splitHere46","20179964splitHere46","public void replace(DocumentFilter.FilterBypass fb, int offset, int length, String string, AttributeSet attr){<newline46mondego>  System.out.print(<doubleQuotes46>replace invoked<doubleQuotes46>);<newline46mondego>  try {<newline46mondego>    super.insertString(fb, offset, <doubleQuotes46>; You inserted the string: <doubleQuotes46>+string, attr);<newline46mondego>  } catch (BadLocationException e) {<newline46mondego>    e.printStackTrace();                                                                                                                                                            <newline46mondego>  }                                                                                                                                                                                   <newline46mondego>}    <newline46mondego>"
"4290splitHere46","20180112splitHere46","AbstractDocument.Content"
"4291splitHere46","20180112splitHere46","content = new StringContent();<newline46mondego>content.insertString(0, <doubleQuotes46>some text<doubleQuotes46>);<newline46mondego>final AbstractDocument document = new PlainDocument(content);<newline46mondego>"
"4292splitHere46","20180112splitHere46","StringContent.insertString"
"4293splitHere46","20180112splitHere46","class CharBufferDocument implements Document {<newline46mondego>    private final CharBuffer charBuffer;<newline46mondego>    private final int length;<newline46mondego>    private final int[] lineOffsets;<newline46mondego><newline46mondego>    public CharBufferDocument(CharBuffer charBuffer) {<newline46mondego>        this.charBuffer = charBuffer;<newline46mondego><newline46mondego>        charBuffer.position(0);<newline46mondego>        length = charBuffer.length();<newline46mondego><newline46mondego>        int[] lineOffsets = new int[] { 0 };<newline46mondego>        int lineCount = 1;<newline46mondego><newline46mondego>        for (int i = 0; i < length; i++) {<newline46mondego>            char c = charBuffer.get(i);<newline46mondego>            if (c == '\n') {<newline46mondego>                if (lineCount == lineOffsets.length) {<newline46mondego>                    if (lineCount == Integer.MAX_VALUE) throw new OutOfMemoryError();<newline46mondego>                    int newLength = (int)Math.min(lineCount * 2L, Integer.MAX_VALUE);<newline46mondego>                    lineOffsets = Arrays.copyOf(lineOffsets, newLength);<newline46mondego>                }<newline46mondego>                lineOffsets[lineCount++] = i + 1;<newline46mondego>            }<newline46mondego>        }<newline46mondego><newline46mondego>        lineOffsets = Arrays.copyOf(lineOffsets, lineCount);<newline46mondego>        this.lineOffsets = lineOffsets;<newline46mondego>    }<newline46mondego><newline46mondego>    @Override<newline46mondego>    public int getLength() {<newline46mondego>        return length;<newline46mondego>    }<newline46mondego><newline46mondego>    @Override<newline46mondego>    public void addDocumentListener(DocumentListener listener) {}<newline46mondego><newline46mondego>    @Override<newline46mondego>    public void removeDocumentListener(DocumentListener listener) {}<newline46mondego><newline46mondego>    @Override<newline46mondego>    public void addUndoableEditListener(UndoableEditListener listener) {}<newline46mondego><newline46mondego>    @Override<newline46mondego>    public void removeUndoableEditListener(UndoableEditListener listener) {}<newline46mondego><newline46mondego>    @Override<newline46mondego>    public void putProperty(Object key, Object value) {}<newline46mondego><newline46mondego>    @Override<newline46mondego>    public Object getProperty(Object key) {<newline46mondego>        return null;<newline46mondego>    }<newline46mondego><newline46mondego>    @Override<newline46mondego>    public void remove(int offs, int len) throws BadLocationException {<newline46mondego>        throw new UnsupportedOperationException(<doubleQuotes46>Document is immutable<doubleQuotes46>);<newline46mondego>    }<newline46mondego><newline46mondego>    @Override<newline46mondego>    public void insertString(int offset, String str, AttributeSet a)<newline46mondego>            throws BadLocationException {<newline46mondego>        throw new UnsupportedOperationException(<doubleQuotes46>Document is immutable<doubleQuotes46>);<newline46mondego>    }<newline46mondego><newline46mondego>    @Override<newline46mondego>    public String getText(int offset, int length) throws BadLocationException {<newline46mondego>        char[] out = new char[length];<newline46mondego>        charBuffer.position(offset);<newline46mondego>        charBuffer.get(out);<newline46mondego>        return new String(out);<newline46mondego>    }<newline46mondego><newline46mondego>    @Override<newline46mondego>    public void getText(int offset, int length, Segment segment) throws BadLocationException {<newline46mondego>        segment.array = new char[length];<newline46mondego>        charBuffer.position(offset);<newline46mondego>        charBuffer.get(segment.array);<newline46mondego>        segment.offset = 0;<newline46mondego>        segment.count = length;<newline46mondego>    }<newline46mondego><newline46mondego>    @Override<newline46mondego>    public Position getStartPosition() {<newline46mondego>        return createPosition(0);<newline46mondego>    }<newline46mondego><newline46mondego>    @Override<newline46mondego>    public Position getEndPosition() {<newline46mondego>        return createPosition(getLength());<newline46mondego>    }<newline46mondego><newline46mondego>    @Override<newline46mondego>    public Position createPosition(int offset) {<newline46mondego>        return new ImmutablePosition(offset);<newline46mondego>    }<newline46mondego><newline46mondego>    private final Element rootElement = new Element() {<newline46mondego>        @Override<newline46mondego>        public Document getDocument() {<newline46mondego>            return CharBufferDocument.this;<newline46mondego>        }<newline46mondego><newline46mondego>        @Override<newline46mondego>        public Element getParentElement() {<newline46mondego>            return null;<newline46mondego>        }<newline46mondego><newline46mondego>        @Override<newline46mondego>        public String getName() {<newline46mondego>            return <doubleQuotes46>root<doubleQuotes46>;<newline46mondego>        }<newline46mondego><newline46mondego>        @Override<newline46mondego>        public AttributeSet getAttributes() {<newline46mondego>            return null;<newline46mondego>        }<newline46mondego><newline46mondego>        @Override<newline46mondego>        public int getStartOffset() {<newline46mondego>            return 0;<newline46mondego>        }<newline46mondego><newline46mondego>        @Override<newline46mondego>        public int getEndOffset() {<newline46mondego>            return getLength();<newline46mondego>        }<newline46mondego><newline46mondego>        @Override<newline46mondego>        public int getElementIndex(int offset) {<newline46mondego>            // binary search for the line that contains offset<newline46mondego>            int low = 0;<newline46mondego>            int high = lineOffsets.length - 1;<newline46mondego><newline46mondego>            while (low <= high) {<newline46mondego>                int mid = (low + high) >>> 1;<newline46mondego>                int midLineStart = lineOffsets[mid];<newline46mondego>                int midLineEnd = (mid + 1 < lineOffsets.length) ? (lineOffsets[mid + 1] - 1) : getLength();<newline46mondego><newline46mondego>                if (offset < midLineStart) {<newline46mondego>                    high = mid - 1;<newline46mondego>                } else if (offset > midLineEnd) {<newline46mondego>                    low = mid + 1;<newline46mondego>                } else {<newline46mondego>                    return mid;<newline46mondego>                }<newline46mondego>            }<newline46mondego>            return 0;<newline46mondego>        }<newline46mondego><newline46mondego>        @Override<newline46mondego>        public int getElementCount() {<newline46mondego>            return lineOffsets.length;<newline46mondego>        }<newline46mondego><newline46mondego>        @Override<newline46mondego>        public Element getElement(int index) {<newline46mondego>            return createLineElement(<newline46mondego>                lineOffsets[index],<newline46mondego>                (index + 1 < lineOffsets.length) ? (lineOffsets[index + 1] - 1) : getLength()<newline46mondego>            );<newline46mondego>        }<newline46mondego><newline46mondego>        @Override<newline46mondego>        public boolean isLeaf() {<newline46mondego>            return false;<newline46mondego>        }<newline46mondego>    };<newline46mondego><newline46mondego>    private Element createLineElement(final int start, final int end) {<newline46mondego>        return new Element() {<newline46mondego>            @Override<newline46mondego>            public Document getDocument() {<newline46mondego>                return CharBufferDocument.this;<newline46mondego>            }<newline46mondego><newline46mondego>            @Override<newline46mondego>            public Element getParentElement() {<newline46mondego>                return CharBufferDocument.this.getDefaultRootElement();<newline46mondego>            }<newline46mondego><newline46mondego>            @Override<newline46mondego>            public String getName() {<newline46mondego>                return <doubleQuotes46>line<doubleQuotes46>; // XXX: Does the name matter?<newline46mondego>            }<newline46mondego><newline46mondego>            @Override<newline46mondego>            public AttributeSet getAttributes() {<newline46mondego>                return null;<newline46mondego>            }<newline46mondego><newline46mondego>            @Override<newline46mondego>            public int getStartOffset() {<newline46mondego>                return start;<newline46mondego>            }<newline46mondego><newline46mondego>            @Override<newline46mondego>            public int getEndOffset() {<newline46mondego>                return end;<newline46mondego>            }<newline46mondego><newline46mondego>            @Override<newline46mondego>            public int getElementIndex(int offset) {<newline46mondego>                return -1;<newline46mondego>            }<newline46mondego><newline46mondego>            @Override<newline46mondego>            public int getElementCount() {<newline46mondego>                return 0;<newline46mondego>            }<newline46mondego><newline46mondego>            @Override<newline46mondego>            public Element getElement(int index) {<newline46mondego>                return null;<newline46mondego>            }<newline46mondego><newline46mondego>            @Override<newline46mondego>            public boolean isLeaf() {<newline46mondego>                return true;<newline46mondego>            }<newline46mondego>        };<newline46mondego>    }<newline46mondego><newline46mondego>    @Override<newline46mondego>    public Element getDefaultRootElement() {<newline46mondego>        return rootElement;<newline46mondego>    }<newline46mondego><newline46mondego>    @Override<newline46mondego>    public Element[] getRootElements() {<newline46mondego>        return new Element[] { getDefaultRootElement() };<newline46mondego>    }<newline46mondego><newline46mondego>    @Override<newline46mondego>    public void render(Runnable r) {<newline46mondego>        r.run();<newline46mondego>    }<newline46mondego><newline46mondego>    private static class ImmutablePosition implements Position {<newline46mondego>        private final int offset;<newline46mondego><newline46mondego>        private ImmutablePosition(int offset) {<newline46mondego>            this.offset = offset;<newline46mondego>        }<newline46mondego><newline46mondego>        @Override<newline46mondego>        public int getOffset() {<newline46mondego>            return offset;<newline46mondego>        }<newline46mondego>    }<newline46mondego>}<newline46mondego>"
"4294splitHere46","20180147splitHere46","{ // json object node<newline46mondego><doubleQuotes46>upc<doubleQuotes46>: <doubleQuotes46>028400071932<doubleQuotes46>,// string<newline46mondego>"
"4295splitHere46","20180147splitHere46","{"
"4296splitHere46","20180147splitHere46","["
"4297splitHere46","20180147splitHere46","JSONObject jObj = new JSONObject(data);<newline46mondego>String value = jObj.getString(<doubleQuotes46>upc<doubleQuotes46>);<newline46mondego>"
"4298splitHere46","20180147splitHere46","<doubleQuotes46>allergens<doubleQuotes46>: [ // jsonarray allergens<newline46mondego>    {          // json object <newline46mondego>    <doubleQuotes46>allergen_name<doubleQuotes46>: <doubleQuotes46>Cereals<doubleQuotes46>, // string<newline46mondego>"
"4299splitHere46","20180147splitHere46","JSONArray  jsonData = jObj.getJSONArray(<doubleQuotes46>allergens<doubleQuotes46>);<newline46mondego>for(int i=0;i<jsonData.length();i++)<newline46mondego>{<newline46mondego>     JSONObject jb = (JSONObject) jsonData.get(i);<newline46mondego>     String allergenname = jb.getString(<doubleQuotes46>allergen_name<doubleQuotes46>);  <newline46mondego>}<newline46mondego>"
"4300splitHere46","20180194splitHere46","<meta-data<newline46mondego>    android:name=<doubleQuotes46>com.google.android.gms.version<doubleQuotes46><newline46mondego>    android:value=<doubleQuotes46>@integer/google_play_services_version<doubleQuotes46> /><newline46mondego>"
"4301splitHere46","20180207splitHere46","javax.media"
"4302splitHere46","20180225splitHere46","if (active_numsys==2 && numsys_pushed.equals(<doubleQuotes46>DEC<doubleQuotes46>)) {<newline46mondego>    String newStringVariable = chng_numsys_bin_dec(display.getText());<newline46mondego>    // now use it<newline46mondego>}<newline46mondego>"
"4303splitHere46","20180236splitHere46","ArrayList"
"4304splitHere46","20180236splitHere46","List<CheckBox> ethChecks = new ArrayList<CheckBox>();<newline46mondego>"
"4305splitHere46","20180236splitHere46","ethChecks"
"4306splitHere46","20180236splitHere46","ethChecks = new ArrayList<CheckBox>();<newline46mondego>"
"4307splitHere46","20180250splitHere46","public class AdjacencyList {<newline46mondego>    private int n;<newline46mondego>    private int density;<newline46mondego><newline46mondego>    //method to get value of n<newline46mondego>    public int getN() { return this.n; }<newline46mondego><newline46mondego>    //method to set n to new value<newline46mondego>    public void setN(final int n) { this.n = n; }<newline46mondego>"
"4308splitHere46","20180250splitHere46","AdjacencyList myList = new AdjacencyList();<newline46mondego><newline46mondego>//set n to any value, here 10<newline46mondego>myList.setN(10);<newline46mondego><newline46mondego>//get n's current value<newline46mondego>int currentN = myList.getN();<newline46mondego>"
"4309splitHere46","20180257splitHere46","MultipartResolver"
"4310splitHere46","20180257splitHere46","multipartResolver"
"4311splitHere46","20180257splitHere46","CommonsMultipartResolver"
"4312splitHere46","20180257splitHere46","@Bean(name = <doubleQuotes46>multipartResolver<doubleQuotes46>)<newline46mondego>public CommonsMultipartResolver multipartResolver() {<newline46mondego>    CommonsMultipartResolver commonsMultipartResolver = new CommonsMultipartResolver(); <newline46mondego>    // set any fields<newline46mondego>    return commonsMultipartResolver; <newline46mondego>}<newline46mondego>"
"4313splitHere46","20180257splitHere46","<bean id=<doubleQuotes46>multipartResolver<doubleQuotes46><newline46mondego>    class=<doubleQuotes46>org.springframework.web.multipart.commons.CommonsMultipartResolver<doubleQuotes46>><newline46mondego><newline46mondego>    <!-- set any properties --><newline46mondego></bean><newline46mondego>"
"4314splitHere46","20180303splitHere46","if (blocks[x + (y * width)] & 0xFFFFFF == 0x000000)<newline46mondego>"
"4315splitHere46","20180303splitHere46","if (blocks[x + (y * width)] & 0xFFFFFF == 0x9EEDFF)<newline46mondego>"
"4316splitHere46","20180309splitHere46","{}"
"4317splitHere46","20180309splitHere46","if (e.getSource() == cmdYes) {<newline46mondego>            new UIManager();<newline46mondego>            UIManager.put(<doubleQuotes46>OptionPane.background<doubleQuotes46>, new ColorUIResource(0, 255, 0));<newline46mondego>            UIManager.put(<doubleQuotes46>Panel.background<doubleQuotes46>, new ColorUIResource(0, 255, 0));<newline46mondego>            JOptionPane.showMessageDialog(null, <doubleQuotes46>Green Message<doubleQuotes46>, <doubleQuotes46>Green<doubleQuotes46>, JOptionPane.INFORMATION_MESSAGE);<newline46mondego>}<newline46mondego>if (e.getSource() == cmdNo) {<newline46mondego>            new UIManager();<newline46mondego>            UIManager.put(<doubleQuotes46>OptionPane.background<doubleQuotes46>, new ColorUIResource(255, 0, 0));<newline46mondego>            UIManager.put(<doubleQuotes46>Panel.background<doubleQuotes46>, new ColorUIResource(255, 0, 0));<newline46mondego>            JOptionPane.showMessageDialog(null, <doubleQuotes46>Red Message<doubleQuotes46>, <doubleQuotes46>Red<doubleQuotes46>, JOptionPane.INFORMATION_MESSAGE);<newline46mondego>}<newline46mondego>"
"4318splitHere46","20180384splitHere46","KeyEvent"
"4319splitHere46","20180384splitHere46","KeyEvent"
"4320splitHere46","20180384splitHere46","KeyListener"
"4321splitHere46","20180384splitHere46","public class MyClass extends JPanel implements KeyListener<newline46mondego>{<newline46mondego>    // Add your intialization code here<newline46mondego><newline46mondego>    @Override<newline46mondego>    public void keyTyped(KeyEvent e)<newline46mondego>    {<newline46mondego>        switch (evt.getKeyCode())<newline46mondego>        {<newline46mondego>            case KeyEvent.VK_DOWN:<newline46mondego>                myY += 5;<newline46mondego>                break;<newline46mondego>            case KeyEvent.VK_UP:<newline46mondego>                myY -= 5;<newline46mondego>                break;<newline46mondego>            case KeyEvent.VK_LEFT:<newline46mondego>                myX -= 5;<newline46mondego>                break;<newline46mondego>            case KeyEvent.VK_RIGHT:<newline46mondego>                myX += 5;<newline46mondego>                break;<newline46mondego>        }<newline46mondego>    }<newline46mondego>}<newline46mondego>"
"4322splitHere46","20180465splitHere46","final Set<String> keys = allowedInput.keySet();<newline46mondego>final int keyNumber = (int)(Math.random() * keys.size());<newline46mondego>final Iterator<String> keyIterator = keys.iterator();<newline46mondego><newline46mondego>String randomKey = null;<newline46mondego><newline46mondego>for (int i = 0; i < keyNumber && keyIterator.hasNext(); i++) {<newline46mondego>    randomKey = keyIterator.next();<newline46mondego>}<newline46mondego><newline46mondego>if (randomKey == null) {<newline46mondego>    // This should not happen unless the map was empty, or it was modified<newline46mondego>    // externally.  Handle the potential error case accordingly.<newline46mondego>}<newline46mondego><newline46mondego>final HashSet<Integer> value = allowedInput.get(randomKey);<newline46mondego><newline46mondego>// `value` now contains a random element from the `allowedInput` map.<newline46mondego>"
"4323splitHere46","20180465splitHere46","Integer"
"4324splitHere46","20180465splitHere46","HashSet<Integer>"
"4325splitHere46","20180611splitHere46","<p:inputText style=<doubleQuotes46>vertical-align: top;<doubleQuotes46> /><newline46mondego>"
"4326splitHere46","20180618splitHere46","int num;<newline46mondego>   Scanner scan = new Scanner(System.in);<newline46mondego><newline46mondego>   while (true)<newline46mondego>   {<newline46mondego>      System.out.println(<doubleQuotes46>Please input a positive number: <doubleQuotes46>);<newline46mondego>      num = scan.nextInt();<newline46mondego><newline46mondego>      if (num < 0)<newline46mondego>      {<newline46mondego>        System.out.println(<doubleQuotes46>That number is negative.<doubleQuotes46>);<newline46mondego>      }<newline46mondego>      else if ((num >= 90 && num <= 110) || (num >= 190 && num <= 210))<newline46mondego>      {<newline46mondego>        break;<newline46mondego>      }<newline46mondego>   }<newline46mondego>"
"4327splitHere46","20180688splitHere46","key.reset();<newline46mondego>"
"4328splitHere46","20180688splitHere46","while"
"4329splitHere46","20180688splitHere46","WatchKey#reset()"
"4330splitHere46","20180834splitHere46","import java.util.Arrays;<newline46mondego>import java.util.Scanner;<newline46mondego>Scanner scanner = new Scanner(System.in);<newline46mondego>String[] hand = (scanner.nextLine() + 'u').toUpperCase().split(<doubleQuotes46><doubleQuotes46>);<newline46mondego>String values = <doubleQuotes46>  23456789TJQKA<doubleQuotes46>;<newline46mondego>int[] cards = new int[] {values.indexOf(hand[1]), values.indexOf(hand[2])};<newline46mondego>Arrays.sort(cards);<newline46mondego>int gap = cards[1] - cards[0] - 1;<newline46mondego>boolean pair = gap == -1;<newline46mondego>boolean suited = hand[3].equals(<doubleQuotes46>S<doubleQuotes46>);<newline46mondego>char[] cards = new char[] {(char)values.charAt(cards[0]), (char)values.charAt(cards[1])};<newline46mondego>int handValue = 0;<newline46mondego><newline46mondego>// adjust value based on pairs, suitedness or connectedness<newline46mondego>if (pair) // hand is a pair<newline46mondego>    handValue += 10; //or whatever you want<newline46mondego>else if (suited) // hand is suited<newline46mondego>    handValue += 3; //or whatever you want<newline46mondego><newline46mondego>if (gap == 0) // hand is no gap<newline46mondego>    handValue += 5; //or whatever you want.<newline46mondego><newline46mondego>if (gap == 1) // hand is one gap<newline46mondego>    handValue += 3; //or whatever you want.<newline46mondego><newline46mondego>if (cards[1] == 'A' && cards[0] == 'K' && suited) // AK suited<newline46mondego>    System.out.println(<doubleQuotes46>AK Suited!<doubleQuotes46>);<newline46mondego>else if (cards[1] == 'A' && suited) // Ax suited<newline46mondego>    System.out.println(<doubleQuotes46>Ax Suited!<doubleQuotes46>);<newline46mondego>"
"4331splitHere46","20180856splitHere46","Collections.sort(employees, new EmployeeNameComparator());<newline46mondego>"
"4332splitHere46","20180873splitHere46","import javax.swing.JApplet;<newline46mondego>import javax.swing.JButton;<newline46mondego>import javax.swing.JFrame;<newline46mondego><newline46mondego><newline46mondego>public class MyWordGame extends JApplet {<newline46mondego><newline46mondego>    public void init(){<newline46mondego>        add(new JButton(<doubleQuotes46>Test<doubleQuotes46>));<newline46mondego>    }<newline46mondego><newline46mondego>    /**<newline46mondego>     * @param args<newline46mondego>     */<newline46mondego>    public static void main(String[] args) {<newline46mondego>        MyWordGame game=new MyWordGame();<newline46mondego>        JFrame myFrame=new JFrame(<doubleQuotes46>Test<doubleQuotes46>);<newline46mondego>        myFrame.add(game);<newline46mondego>        myFrame.pack();<newline46mondego>        myFrame.setVisible(true);<newline46mondego>        game.init();<newline46mondego><newline46mondego>    }<newline46mondego><newline46mondego>}<newline46mondego>"
"4333splitHere46","20180922splitHere46","if (password.length() < 10) { return false; }  <newline46mondego>"
"4334splitHere46","20180922splitHere46","if (password.length() > 10) { return false; }  <newline46mondego>"
"4335splitHere46","20180922splitHere46","if (!Character.isDigit(c)) { return false; }<newline46mondego>"
"4336splitHere46","20180922splitHere46","public static boolean isValid(String password) {  <newline46mondego>        if (password.length() < 10) {   <newline46mondego>            return false;  <newline46mondego>        } else {      <newline46mondego>            char c;  <newline46mondego>            int digitCount, letterCount;   <newline46mondego>            for (int i = 0; i < password.length(); i++) {  <newline46mondego>                c = password.charAt(i);  <newline46mondego>                if (Character.isLetter(c)) {          <newline46mondego>                    letterCount++; <newline46mondego>                } else if (Character.isDigit(c))   <newline46mondego>                    digitCount++;      <newline46mondego>            }  <newline46mondego>            if(digitCount < 1 || lettercount < 1) { return false; }<newline46mondego>        }  <newline46mondego>        return true;  <newline46mondego>    } <newline46mondego>"
"4337splitHere46","20180930splitHere46","principle of least surprise"
"4338splitHere46","20180930splitHere46","com.....util.matrixutil"
"4339splitHere46","20180942splitHere46","Class"
"4340splitHere46","20181023splitHere46","UUID.randomUUID()"
"4341splitHere46","20181053splitHere46","public class Border {<newline46mondego>   // ... put here anything that's useful<newline46mondego>   // e.g. length of border or type of border (land,sea,river)<newline46mondego>}<newline46mondego>"
"4342splitHere46","20181053splitHere46","public class Distance {<newline46mondego>   // ... put here anything that's useful<newline46mondego>   // e.g. the distance between the two capitals<newline46mondego>}<newline46mondego>"
"4343splitHere46","20181086splitHere46","ConcurrentHashMultiset"
"4344splitHere46","20181086splitHere46","private final transient ConcurrentMap<E, AtomicInteger> countMap;<newline46mondego>"
"4345splitHere46","20181086splitHere46","toArray()"
"4346splitHere46","20181086splitHere46","AtomicInteger"
"4347splitHere46","20181101splitHere46","id id id"
"4348splitHere46","20181209splitHere46","int"
"4349splitHere46","20181209splitHere46","Vertex"
"4350splitHere46","20181209splitHere46","Vertex"
"4351splitHere46","20181209splitHere46","int"
"4352splitHere46","20181209splitHere46","vertexList[0].add(new Vertex(vertexInput.nextInt()));<newline46mondego>"
"4353splitHere46","20181351splitHere46","Thread.interrupted()"
"4354splitHere46","20181351splitHere46","Thread.currentThread().isInterrupted()"
"4355splitHere46","20181351splitHere46","if (i % 10000 == 0)"
"4356splitHere46","20181351splitHere46","Thread.interrupted()"
"4357splitHere46","20181351splitHere46","for (int i = 0; i < max; i++) {<newline46mondego>    // loop-body using i<newline46mondego>}<newline46mondego>"
"4358splitHere46","20181351splitHere46","i"
"4359splitHere46","20181351splitHere46","INTERVAL_SIZE"
"4360splitHere46","20181351splitHere46","int start = 0;<newline46mondego>while (start < max) {       <newline46mondego>    final int next = Math.min(start + INTERVAL_SIZE, max);<newline46mondego>    for(int i = start; i < next; i++) {<newline46mondego>        // loop-body using i<newline46mondego>    }<newline46mondego>    start = next;<newline46mondego>}<newline46mondego>"
"4361splitHere46","20181351splitHere46","if (i % 2 == 0) x++;<newline46mondego>"
"4362splitHere46","20181351splitHere46","Integer.MAX_VALUE / 2"
"4363splitHere46","20181351splitHere46","Thread.interrupted()"
"4364splitHere46","20181352splitHere46","Gson"
"4365splitHere46","20181352splitHere46","double"
"4366splitHere46","20181352splitHere46","ObjectTypeAdapter#read(JsonReader)"
"4367splitHere46","20181352splitHere46","...<newline46mondego>case NUMBER:<newline46mondego>  return in.nextDouble();<newline46mondego>...<newline46mondego>"
"4368splitHere46","20181352splitHere46","List<List<Integer>> data = GsonParser.gson.fromJson(json, new TypeToken<List<List<Integer>>>() {}.getType());<newline46mondego>"
"4369splitHere46","20181352splitHere46","Integer"
"4370splitHere46","20181352splitHere46","TypeToken"
"4371splitHere46","20181463splitHere46","year"
"4372splitHere46","20181463splitHere46","month"
"4373splitHere46","20181463splitHere46","day"
"4374splitHere46","20181463splitHere46","Calendar"
"4375splitHere46","20181527splitHere46","Menu"
"4376splitHere46","20181527splitHere46","onOptionsItemSelected()"
"4377splitHere46","20181527splitHere46","MenuItem.getTitle()"
"4378splitHere46","20181590splitHere46","@Reference"
"4379splitHere46","20181590splitHere46","@DBRef"
"4380splitHere46","20181593splitHere46","public class StarsAndStripesLabRunner {<newline46mondego>    public static void main( String args[] )<newline46mondego>    {<newline46mondego>        StarsAndStripesLab stars = new StarsAndStripesLab();<newline46mondego>        stars.printTwentyStars(); // and all the other methods in correct order<newline46mondego>    }<newline46mondego>}<newline46mondego>"
"4381splitHere46","20181700splitHere46","\s"
"4382splitHere46","20181700splitHere46","\"
"4383splitHere46","20181700splitHere46","\\s"
"4384splitHere46","20181700splitHere46","tokensX = tokensY[i].split(<doubleQuotes46>(\\s)*<doubleQuotes46>);<newline46mondego>"
"4385splitHere46","20181726splitHere46","if(check !=0){  <newline46mondego>         if (wee[i]>wee[i+1])<newline46mondego>        {<newline46mondego>            System.out.println(<doubleQuotes46>False<doubleQuotes46>);<newline46mondego>            check = 0;<newline46mondego>       }<newline46mondego>        else<newline46mondego>       {<newline46mondego>            System.out.println(<doubleQuotes46>True!<doubleQuotes46>); <newline46mondego>       }<newline46mondego><newline46mondego>}<newline46mondego>"
"4386splitHere46","20181843splitHere46","DepthFirstSearchIterator"
"4387splitHere46","20181843splitHere46","import org.jgrapht.DirectedGraph;<newline46mondego>import org.jgrapht.graph.DefaultDirectedGraph;<newline46mondego>import org.jgrapht.graph.DefaultEdge;<newline46mondego>import org.jgrapht.traverse.DepthFirstIterator;<newline46mondego>import org.jgrapht.traverse.GraphIterator;<newline46mondego><newline46mondego>public class GraphDemo {<newline46mondego><newline46mondego>    public static void main(String[] args) {<newline46mondego>        DirectedGraph<Integer, DefaultEdge> graph = <newline46mondego>            new DefaultDirectedGraph <Integer, DefaultEdge>(DefaultEdge.class);<newline46mondego><newline46mondego>        graph.addVertex(7);<newline46mondego>        graph.addVertex(4);<newline46mondego>        graph.addVertex(9);<newline46mondego>        graph.addVertex(3);<newline46mondego>        graph.addVertex(2);<newline46mondego>        graph.addVertex(5);<newline46mondego><newline46mondego><newline46mondego>        graph.addEdge(7, 4);<newline46mondego>        graph.addEdge(7, 9);<newline46mondego>        graph.addEdge(9, 3);<newline46mondego>        graph.addEdge(3, 2);<newline46mondego>        graph.addEdge(3, 5);<newline46mondego><newline46mondego>        GraphIterator<Integer, DefaultEdge> iterator = <newline46mondego>                new DepthFirstIterator<Integer, DefaultEdge>(graph);<newline46mondego>        while (iterator.hasNext()) {<newline46mondego>            System.out.println( iterator.next() );<newline46mondego>        }<newline46mondego>    }<newline46mondego>}<newline46mondego>"
"4388splitHere46","20181843splitHere46","TraversalListener"
"4389splitHere46","20181848splitHere46","g.setA(vertexInput.nextBoolean());<newline46mondego>"
"4390splitHere46","20181848splitHere46","boolean"
"4391splitHere46","20181848splitHere46","Scanner.nextBoolean()"
"4392splitHere46","20181848splitHere46","g.setA(new Vertex(String));<newline46mondego>"
"4393splitHere46","20181848splitHere46","g.setA(new Vertex(vertexInput.nextLine()));"
"4394splitHere46","20181875splitHere46","String value = <doubleQuotes46><doubleQuotes46> + myPicker.getValue();<newline46mondego>"
"4395splitHere46","20181875splitHere46","private class MyListener implements NumberPicker.OnValueChangeListener {<newline46mondego>    @Override<newline46mondego>    public void onValueChange(NumberPicker picker, int oldVal, int newVal) {<newline46mondego>        //get new value and convert it to String<newline46mondego>        //if you want to use variable value elsewhere, declare it as a field <newline46mondego>        //of your main function<newline46mondego>        String value = <doubleQuotes46><doubleQuotes46> + newVal;<newline46mondego>    }<newline46mondego>}<newline46mondego>"
"4396splitHere46","20181875splitHere46","myPicker.setOnValueChangedListener(new MyListener());<newline46mondego>"
"4397splitHere46","20181881splitHere46","pom.xml"
"4398splitHere46","20181881splitHere46","<plugin><newline46mondego> <groupId>org.eclipse.m2e</groupId><newline46mondego> <artifactId>lifecycle-mapping</artifactId><newline46mondego> <version>1.0.0</version><newline46mondego> <configuration><newline46mondego>   <lifecycleMappingMetadata><newline46mondego>     <pluginExecutions><newline46mondego>       <pluginExecution><newline46mondego>         <pluginExecutionFilter><newline46mondego>           <groupId>org.codehaus.mojo</groupId><newline46mondego>           <artifactId>aspectj-maven-plugin</artifactId><newline46mondego>           <versionRange>[1.0.0,)</versionRange><newline46mondego>           <goals><newline46mondego>             <goal>some-goal</goal><newline46mondego>           </goals><newline46mondego>         </pluginExecutionFilter><newline46mondego>         <action><newline46mondego>           <ignore /> or <execute /><newline46mondego>         </action><newline46mondego>       </pluginExecution><newline46mondego>     </pluginExecutions><newline46mondego>   </lifecycleMappingMetadata><newline46mondego> </configuration><newline46mondego></plugin><newline46mondego>"
"4399splitHere46","20181905splitHere46","like"
"4400splitHere46","20181905splitHere46","TEXT"
"4401splitHere46","20181905splitHere46","NTEXT"
"4402splitHere46","20181905splitHere46","keyy"
"4403splitHere46","20181905splitHere46","update win set seq=? where keyy like ?<newline46mondego>"
"4404splitHere46","20181905splitHere46","TEXT"
"4405splitHere46","20181905splitHere46","NTEXT"
"4406splitHere46","20181905splitHere46","CHAR"
"4407splitHere46","20181905splitHere46","VARCHAR"
"4408splitHere46","20181924splitHere46","method"
"4409splitHere46","20181924splitHere46","A::method"
"4410splitHere46","20181924splitHere46","B"
"4411splitHere46","20181924splitHere46","B"
"4412splitHere46","20181924splitHere46","A"
"4413splitHere46","20181924splitHere46","stack"
"4414splitHere46","20181924splitHere46","vector"
"4415splitHere46","20181924splitHere46","B::method"
"4416splitHere46","20181924splitHere46","A::method"
"4417splitHere46","20181924splitHere46","B"
"4418splitHere46","20181943splitHere46","JSONObject#get(String)"
"4419splitHere46","20181943splitHere46","HashMap.get(String)"
"4420splitHere46","20181943splitHere46","time"
"4421splitHere46","20181943splitHere46","title"
"4422splitHere46","20181943splitHere46","time"
"4423splitHere46","20181943splitHere46","{<doubleQuotes46>schedule<doubleQuotes46>:{<doubleQuotes46>service<doubleQuotes46>:{<doubleQuotes46>type<doubleQuotes46>:<doubleQuotes46>radio<doubleQuotes46>,<doubleQuotes46>key<doubleQuotes46>:<doubleQuotes46>radio1<doubleQuotes46>,<doubleQuotes46>title<doubleQuotes46>:<doubleQuotes46>BBC Radio 1<doubleQuotes46>,...<newline46mondego>"
"4424splitHere46","20181943splitHere46","schedule"
"4425splitHere46","20181943splitHere46","JSONObject"
"4426splitHere46","20181943splitHere46","service"
"4427splitHere46","20181943splitHere46","JSONObject"
"4428splitHere46","20181943splitHere46","title"
"4429splitHere46","20181943splitHere46","String"
"4430splitHere46","20182128splitHere46","if (fValue*100 == (int)(fValue*100)) { <newline46mondego>    //fValue had 2 decimal places or less <newline46mondego>}<newline46mondego>"
"4431splitHere46","20182128splitHere46","fValue = 0.11"
"4432splitHere46","20182128splitHere46","fValue*100 = 11"
"4433splitHere46","20182128splitHere46","11 == (int)11"
"4434splitHere46","20182128splitHere46","true"
"4435splitHere46","20182128splitHere46","fValue = 0.111"
"4436splitHere46","20182128splitHere46","fValue*100 = 11.1"
"4437splitHere46","20182128splitHere46","11.1 == (int)11.1"
"4438splitHere46","20182128splitHere46","false"
"4439splitHere46","20182208splitHere46","str3 = localBufferedReader1.readLine();<newline46mondego>if (arrayOfChar3[0] == '\r')<newline46mondego>{<newline46mondego>  n = 1;<newline46mondego>  if (str3.indexOf(<doubleQuotes46>SOA|OK|<doubleQuotes46>) >= 0) {<newline46mondego>"
"4440splitHere46","20182208splitHere46","null"
"4441splitHere46","20182208splitHere46","indexOf"
"4442splitHere46","20182341splitHere46","Ctrl"
"4443splitHere46","20182341splitHere46","public class Ctrl<T> {<newline46mondego>    LinkedStack<T> x = new LinkedStack<T>();<newline46mondego>"
"4444splitHere46","20182341splitHere46","T"
"4445splitHere46","20182341splitHere46","public class AppCtrl extends Ctrl<Integer> {<newline46mondego>}<newline46mondego>"
"4446splitHere46","20182341splitHere46","Ctrl myctrl = new Ctrl<Integer>();// + necessary constructor params<newline46mondego>"
"4447splitHere46","20182341splitHere46","Ctrl"
"4448splitHere46","20182341splitHere46","public class Ctrl {<newline46mondego>        LinkedStack<Integer> x = new LinkedStack<Integer>();<newline46mondego>"
"4449splitHere46","20182509splitHere46","int height = 5;<newline46mondego>for (int i = 1; i <= 2 * height; i += 2) {<newline46mondego>    int numAsterisks;<newline46mondego>    if (i <= height) {<newline46mondego>        numAsterisks = i;<newline46mondego>    } else {<newline46mondego>        numAsterisks = 2 * height - i;<newline46mondego>    }<newline46mondego><newline46mondego>    for (int j = 0; j < numAsterisks; j++) {<newline46mondego>        System.out.print(<doubleQuotes46>*<doubleQuotes46>);<newline46mondego>    }<newline46mondego>    System.out.println();<newline46mondego>}<newline46mondego>"
"4450splitHere46","20182710splitHere46","PreparedStatement stmt = <doubleQuotes46>Select ID, CO1Name, CO2Rating<doubleQuotes46><newline46mondego>    + <doubleQuotes46> FROM Table1<doubleQuotes46><newline46mondego>    + <doubleQuotes46> WHERE ID >= ? AND ID <= ?<doubleQuotes46><newline46mondego>    + <doubleQuotes46> ORDER BY ID<doubleQuotes46>;<newline46mondego>"
"4451splitHere46","20182710splitHere46","stmt.setInt(1, 1);<newline46mondego>stmt.setInt(2, 8);<newline46mondego>"
"4452splitHere46","20182710splitHere46","ResultSet rs = stmt.executeQuery();<newline46mondego>"
"4453splitHere46","20182710splitHere46","rs.next()"
"4454splitHere46","20182710splitHere46","while (rs.next()) {<newline46mondego>   int id = rs.getInt(<doubleQuotes46>ID<doubleQuotes46>);<newline46mondego>   String title = rs.getString(<doubleQuotes46>CO1Name<doubleQuotes46>);<newline46mondego>   String name = rs.getString(<doubleQuotes46>CO2Rating<doubleQuotes46>);<newline46mondego>   // do stuff with this record<newline46mondego>}<newline46mondego>"
"4455splitHere46","20182710splitHere46","close"
"4456splitHere46","20182831splitHere46","2013-11-25 03:17:25.237:WARN:oejx.XmlConfiguration:main: Config error at <newline46mondego><Call name=<doubleQuotes46>addBean<doubleQuotes46>><newline46mondego>    <Arg><newline46mondego>        <New class=<doubleQuotes46>org.eclipse.jetty.monitor.ThreadMonitor<doubleQuotes46>><newline46mondego>            <Set name=<doubleQuotes46>scanInterval<doubleQuotes46>>2000</Set><newline46mondego>            <Set name=<doubleQuotes46>busyThreshold<doubleQuotes46>>90</Set><newline46mondego>            <Set name=<doubleQuotes46>stackDepth<doubleQuotes46>>3</Set><newline46mondego>            <Set name=<doubleQuotes46>trailLength<doubleQuotes46>>2</Set><newline46mondego>        </New><newline46mondego>    </Arg><newline46mondego></Call><newline46mondego><newline46mondego>java.lang.ClassNotFoundException: org.eclipse.jetty.monitor.ThreadMonitor <newline46mondego>   in file:/D:/servers/jetty907/jetty-distribution-9.0.7.v20131107/etc/jetty-monitor.xml<newline46mondego>"
"4457splitHere46","20182831splitHere46","jetty-monitor"
"4458splitHere46","20182831splitHere46","D:\servers\jetty907\jetty-distribution-9.0.7.v20131107> java -jar start.jar --version<newline46mondego>Active Options: [Server, annotations, client, ext, jaas, jmx, jndi, jndi.demo, jsp, plus, resources, rewrite, websocket]<newline46mondego>Version Information on 37 entries in the classpath.<newline46mondego>Note: order presented here is how they would appear on the classpath.<newline46mondego>      changes to the OPTIONS=[option,option,...] command line option will be reflected here.<newline46mondego> 0:      9.0.7.v20131107 | ${jetty.home}/lib/jetty-xml-9.0.7.v20131107.jar<newline46mondego> 1:  3.0.0.v201112011016 | ${jetty.home}/lib/servlet-api-3.0.jar<newline46mondego> 2:      9.0.7.v20131107 | ${jetty.home}/lib/jetty-http-9.0.7.v20131107.jar<newline46mondego> 3:      9.0.7.v20131107 | ${jetty.home}/lib/jetty-continuation-9.0.7.v20131107.jar<newline46mondego> 4:      9.0.7.v20131107 | ${jetty.home}/lib/jetty-server-9.0.7.v20131107.jar<newline46mondego> 5:      9.0.7.v20131107 | ${jetty.home}/lib/jetty-security-9.0.7.v20131107.jar<newline46mondego> 6:      9.0.7.v20131107 | ${jetty.home}/lib/jetty-servlet-9.0.7.v20131107.jar<newline46mondego> 7:      9.0.7.v20131107 | ${jetty.home}/lib/jetty-webapp-9.0.7.v20131107.jar<newline46mondego> 8:      9.0.7.v20131107 | ${jetty.home}/lib/jetty-deploy-9.0.7.v20131107.jar<newline46mondego> 9:      9.0.7.v20131107 | ${jetty.home}/lib/jetty-annotations-9.0.7.v20131107.jar<newline46mondego>10:  1.1.0.v201108011116 | ${jetty.home}/lib/annotations/javax.annotation-1.1.0.v201108011116.jar<newline46mondego>11:  3.1.0.v200803061910 | ${jetty.home}/lib/annotations/org.objectweb.asm-3.1.0.v200803061910.jar<newline46mondego>12:      9.0.7.v20131107 | ${jetty.home}/lib/jetty-client-9.0.7.v20131107.jar<newline46mondego>13:      9.0.7.v20131107 | ${jetty.home}/lib/jetty-jaas-9.0.7.v20131107.jar<newline46mondego>14:      9.0.7.v20131107 | ${jetty.home}/lib/jetty-jmx-9.0.7.v20131107.jar<newline46mondego>15:      9.0.7.v20131107 | ${jetty.home}/lib/jetty-jndi-9.0.7.v20131107.jar<newline46mondego>16:      9.0.7.v20131107 | ${jetty.home}/lib/jetty-plus-9.0.7.v20131107.jar<newline46mondego>17:  1.1.0.v201105071233 | ${jetty.home}/lib/jndi/javax.activation-1.1.0.v201105071233.jar<newline46mondego>18:  1.4.1.v201005082020 | ${jetty.home}/lib/jndi/javax.mail.glassfish-1.4.1.v201005082020.jar<newline46mondego>19:                1.1.1 | ${jetty.home}/lib/jndi/javax.transaction-1.1.1.v201105210645.jar<newline46mondego>20:      9.0.7.v20131107 | ${jetty.home}/lib/jndi.demo/test-mock-resources-9.0.7.v20131107.jar<newline46mondego>21:  2.2.0.v201303151357 | ${jetty.home}/lib/jsp/com.sun.el-2.2.0.v201303151357.jar<newline46mondego>22:  2.2.0.v201303151357 | ${jetty.home}/lib/jsp/javax.el-2.2.0.v201303151357.jar<newline46mondego>23:  1.2.0.v201105211821 | ${jetty.home}/lib/jsp/javax.servlet.jsp.jstl-1.2.0.v201105211821.jar<newline46mondego>24:  2.2.0.v201112011158 | ${jetty.home}/lib/jsp/javax.servlet.jsp-2.2.0.v201112011158.jar<newline46mondego>25:  2.2.2.v201112011158 | ${jetty.home}/lib/jsp/org.apache.jasper.glassfish-2.2.2.v201112011158.jar<newline46mondego>26:  1.2.0.v201112081803 | ${jetty.home}/lib/jsp/org.apache.taglibs.standard.glassfish-1.2.0.v201112081803.jar<newline46mondego>27: 3.8.2.v20130121-145325 | ${jetty.home}/lib/jsp/org.eclipse.jdt.core-3.8.2.v20130121.jar<newline46mondego>28:                (dir) | ${jetty.home}/resources<newline46mondego>29:      9.0.7.v20131107 | ${jetty.home}/lib/jetty-rewrite-9.0.7.v20131107.jar<newline46mondego>30:      9.0.7.v20131107 | ${jetty.home}/lib/websocket/websocket-api-9.0.7.v20131107.jar<newline46mondego>31:      9.0.7.v20131107 | ${jetty.home}/lib/websocket/websocket-client-9.0.7.v20131107.jar<newline46mondego>32:      9.0.7.v20131107 | ${jetty.home}/lib/websocket/websocket-common-9.0.7.v20131107.jar<newline46mondego>33:      9.0.7.v20131107 | ${jetty.home}/lib/websocket/websocket-server-9.0.7.v20131107.jar<newline46mondego>34:      9.0.7.v20131107 | ${jetty.home}/lib/websocket/websocket-servlet-9.0.7.v20131107.jar<newline46mondego>35:      9.0.7.v20131107 | ${jetty.home}/lib/jetty-util-9.0.7.v20131107.jar<newline46mondego>36:      9.0.7.v20131107 | ${jetty.home}/lib/jetty-io-9.0.7.v20131107.jar<newline46mondego>"
"4459splitHere46","20182831splitHere46","start.ini"
"4460splitHere46","20182831splitHere46","OPTIONS=monitor<newline46mondego>etc/jetty-monitor.xml<newline46mondego>"
"4461splitHere46","20182831splitHere46","java -jar start.jar --version"
"4462splitHere46","20182831splitHere46","${jetty.home}/lib/monitor/jetty-monitor-9.0.7.v20131107.jar"
"4463splitHere46","20183015splitHere46","public static boolean validation(String correct1, String correct2)<newline46mondego>{<newline46mondego>    Scanner in = new Scanner(System.in);<newline46mondego>    String userInput;<newline46mondego><newline46mondego>    while (true)<newline46mondego>    {<newline46mondego>        System.out.print(<doubleQuotes46>Type in <doubleQuotes46> + correct1 + <doubleQuotes46> or <doubleQuotes46> + correct2);<newline46mondego>        userInput = in.next();<newline46mondego><newline46mondego>        if ( userInput.equals(correct1) )<newline46mondego>        {<newline46mondego>            return true;<newline46mondego>        }<newline46mondego>        else if ( userInput.equals(correct2) )<newline46mondego>        {<newline46mondego>            return false;<newline46mondego>        }<newline46mondego>        else<newline46mondego>        {<newline46mondego>            System.out.println(<doubleQuotes46>Try again!<doubleQuotes46>);<newline46mondego>        }<newline46mondego>    }<newline46mondego><newline46mondego>    return false; // Doesn't really matter, loop will never reach here<newline46mondego>}<newline46mondego>"
"4464splitHere46","20183128splitHere46","public static void printArray(double[] array) <newline46mondego> {<newline46mondego>    for (int i = 0; i < array.length; i++)<newline46mondego>    {<newline46mondego>       System.out.println(array[i])<newline46mondego>    }<newline46mondego> }<newline46mondego>"
"4465splitHere46","20183128splitHere46","public static void printArray(double[] array) <newline46mondego> {    <newline46mondego>    for (double value : array) <newline46mondego>    {<newline46mondego>        System.out.println(value);<newline46mondego>    }<newline46mondego> }<newline46mondego>"
"4466splitHere46","20183201splitHere46","br.close()"
"4467splitHere46","20183201splitHere46","br.close"
"4468splitHere46","20183225splitHere46","SSCCE"
"4469splitHere46","20183225splitHere46","SSCCE"
"4470splitHere46","20183263splitHere46","slot"
"4471splitHere46","20183263splitHere46","slot"
"4472splitHere46","20183263splitHere46","JTextField"
"4473splitHere46","20183437splitHere46","<modelVersion>4.0.0</modelVersion>"
"4474splitHere46","20183437splitHere46","project"
"4475splitHere46","20183437splitHere46","..."
"4476splitHere46","20183489splitHere46","+"
"4477splitHere46","20183489splitHere46","operator"
"4478splitHere46","20183489splitHere46","substring"
"4479splitHere46","20183489splitHere46","String operator = fileContent.substring(fileContent.indexOf('+'), fileContent.indexOf('+') + 1);<newline46mondego>"
"4480splitHere46","20183489splitHere46","int index = fileContent.indexOf('+');<newline46mondego>String operator = fileContent.substring(index, index + 1);<newline46mondego>"
"4481splitHere46","20183489splitHere46","charAt"
"4482splitHere46","20183489splitHere46","char operator = fileContent.charAt(fileContent.indexOf('+'));<newline46mondego>"
"4483splitHere46","20183489splitHere46","int index = fileContent.indexOf('+');<newline46mondego>char operator = fileContent.charAt(index);<newline46mondego>"
"4484splitHere46","20183489splitHere46","String eqn = <doubleQuotes46>7 + 13 = 20<doubleQuotes46>;<newline46mondego><newline46mondego>int operatorIndex = eqn.indexOf(operator); // already defined operator as a String<newline46mondego>int equalIndex = eqn.indexOf('=');<newline46mondego><newline46mondego>int first = Integer.parseInt(eqn.substring(0, operatorIndex).trim());<newline46mondego>int second = Integer.parseInt(eqn.substring(operatorIndex + 1, equalIndex).trim());<newline46mondego>"
"4485splitHere46","20183489splitHere46","String operator = <doubleQuotes46>+<doubleQuotes46>;"
"4486splitHere46","20183489splitHere46","int first = 7;"
"4487splitHere46","20183489splitHere46","int second = 13;"
"4488splitHere46","20183489splitHere46","String operator = <doubleQuotes46>+<doubleQuotes46>;<newline46mondego><newline46mondego>int first = 7; int second = 13;<newline46mondego><newline46mondego>switch (operator)<newline46mondego>{<newline46mondego>    case <doubleQuotes46>+<doubleQuotes46>: <newline46mondego>        System.out.print(<doubleQuotes46><doubleQuotes46> + (first + second));<newline46mondego>        break;<newline46mondego><newline46mondego>    case <doubleQuotes46>-<doubleQuotes46>: <newline46mondego>        System.out.print(<doubleQuotes46><doubleQuotes46> + (first - second));<newline46mondego>        break;<newline46mondego><newline46mondego>    case <doubleQuotes46>*<doubleQuotes46>: <newline46mondego>        System.out.print(<doubleQuotes46><doubleQuotes46> + (first * second));<newline46mondego>        break;<newline46mondego><newline46mondego>    case <doubleQuotes46>/<doubleQuotes46>: <newline46mondego>        System.out.print(<doubleQuotes46><doubleQuotes46> + (first / second));<newline46mondego>        break;<newline46mondego><newline46mondego>    default: System.out.print(<doubleQuotes46>not sum, difference, product or quotient<doubleQuotes46>);<newline46mondego>}<newline46mondego>"
"4489splitHere46","20183489splitHere46","operator = <doubleQuotes46>+<doubleQuotes46>;"
"4490splitHere46","20183489splitHere46","20"
"4491splitHere46","20183489splitHere46","operator = <doubleQuotes46>-<doubleQuotes46>;"
"4492splitHere46","20183489splitHere46","-6"
"4493splitHere46","20183531splitHere46","private File getInstallPath()<newline46mondego>{<newline46mondego>    return new File(MyClass.class.getProtectionDomain().getCodeSource().getLocation().getPath());<newline46mondego>}<newline46mondego>"
"4494splitHere46","20183531splitHere46","Class myClass = Class.forName(<doubleQuotes46>MyClass<doubleQuotes46>);<newline46mondego>ClassLoader myLoader = myclass.getClassLoader();<newline46mondego>InputStream myStream = myLoader.getResourceAsStream(myFile);<newline46mondego>"
"4495splitHere46","20183562splitHere46","System.nanoTime();"
"4496splitHere46","20183562splitHere46","nanoTime()"
"4497splitHere46","20183562splitHere46","// It would probably be a better idea to use HH:mm:ss.SSS, and the nanoseconds.<newline46mondego>// Not to imply that that's a good idea, just better then this (but would add even more digits).<newline46mondego>private static final SimpleDateFormat sdf = new SimpleDateFormat(<doubleQuotes46>HH:mm:ss<doubleQuotes46>);<newline46mondego>// This isn't really nanosecond accurate, and is probably a bad idea.<newline46mondego>private static String getNanoTime() {<newline46mondego>  long start = System.nanoTime();<newline46mondego>  StringBuilder sb = new StringBuilder();<newline46mondego>  Calendar c = Calendar.getInstance();<newline46mondego>  sb.append(sdf.format(c.getTime()));<newline46mondego>  sb.append(<doubleQuotes46>.<doubleQuotes46>);<newline46mondego>  sb.append(System.nanoTime() - start);<newline46mondego>  return sb.toString();<newline46mondego>}<newline46mondego><newline46mondego>public static void main(String[] args) {<newline46mondego>  System.out.println(getNanoTime());<newline46mondego>}<newline46mondego>"
"4498splitHere46","20183616splitHere46","@Override<newline46mondego>public void handle(ActionEvent arg0) {<newline46mondego>    int numberOfItemsToRemove=4;<newline46mondego>    for(int i=0;i<numberOfItemsToRemove;i++){<newline46mondego>        data.remove(0);<newline46mondego>    }<newline46mondego>}<newline46mondego>"
"4499splitHere46","20183616splitHere46","@Override<newline46mondego>public void handle(ActionEvent arg0) {<newline46mondego>    data.remove(9);<newline46mondego>    data.remove(6);<newline46mondego>    data.remove(1);<newline46mondego>}<newline46mondego>"
"4500splitHere46","20183671splitHere46","public class MainActivity extends Activity {<newline46mondego><newline46mondego>    private ProgressDialog mLoadingDialog;<newline46mondego>    private Handler mHandler = new Handler();<newline46mondego>    private void showLoadingDialog(final String title, final String msg) {<newline46mondego>        mHandler.post(new Runnable() {<newline46mondego>            @Override<newline46mondego>            public void run() {<newline46mondego>                if(mLoadingDialog == null) {<newline46mondego>                    mLoadingDialog = ProgressDialog.show(MainActivity.this, title, msg);<newline46mondego>                }<newline46mondego>                mLoadingDialog.setTitle(title);<newline46mondego>                mLoadingDialog.setMessage(msg);<newline46mondego>            }<newline46mondego>        });<newline46mondego>    }<newline46mondego><newline46mondego>private void hideLoadingDialog() {<newline46mondego>    mHandler.post(new Runnable() { //Make sure it happens in sequence after showLoadingDialog<newline46mondego>        @Override<newline46mondego>        public void run() {<newline46mondego>            if(mLoadingDialog != null) {<newline46mondego>                mLoadingDialog.dismiss();<newline46mondego>            }<newline46mondego>        }<newline46mondego>    });<newline46mondego>}<newline46mondego><newline46mondego>    @Override<newline46mondego>    protected void onCreate(Bundle savedInstanceState) {<newline46mondego>        super.onCreate(savedInstanceState);<newline46mondego>        setContentView(R.layout.activity_main);<newline46mondego>        new Thread() {<newline46mondego>            @Override<newline46mondego>            public void run() {<newline46mondego>                showLoadingDialog(<doubleQuotes46>Loading<doubleQuotes46>, <doubleQuotes46>Please wait...<doubleQuotes46>);<newline46mondego>                //DO something<newline46mondego>                hideLoadingDialog();<newline46mondego>            }<newline46mondego>        }.start();<newline46mondego>    }<newline46mondego>}<newline46mondego>"
"4501splitHere46","20183745splitHere46","else if (selectedValue1.equals(<doubleQuotes46>Login as  Lecturer<doubleQuotes46>))<newline46mondego>"
"4502splitHere46","20183745splitHere46","Object[] menuItems1 = {<doubleQuotes46>Login as Admin<doubleQuotes46>, <doubleQuotes46>Login as Course Leader<doubleQuotes46>, <doubleQuotes46>Login as Lecturer<doubleQuotes46>, <doubleQuotes46>Login as  Student<doubleQuotes46>, <doubleQuotes46>Quit<doubleQuotes46>};<newline46mondego>"
"4503splitHere46","20183790splitHere46","String[] name = {<doubleQuotes46>John<doubleQuotes46>, <doubleQuotes46>Mike<doubleQuotes46>, <doubleQuotes46>Jim<doubleQuotes46>};<newline46mondego><newline46mondego>// this out put will be like this <newline46mondego>[ John, Mike, Jim ]<newline46mondego>System.out.prinln(Arrays.asList(name));<newline46mondego><newline46mondego><newline46mondego>// this way is better for formatting. Prints:<newline46mondego>John<newline46mondego>Mike<newline46mondego>Jim<newline46mondego>for (String s : name){<newline46mondego>    System.out.println(s);     <newline46mondego>}<newline46mondego><newline46mondego>// or this will print out<newline46mondego>John Mike Jim<newline46mondego>System.out.println(Arrays.toString(name));<newline46mondego>"
"4504splitHere46","20183799splitHere46","class Teller<newline46mondego>{<newline46mondego>String name;<newline46mondego>String dateProcessed;<newline46mondego>Boolean Savings; <newline46mondego>int random;<newline46mondego><newline46mondego>public Teller(String n, String dP, Boolean Savings)<newline46mondego>{<newline46mondego>    name = n;<newline46mondego>    dateProcessed = dP;<newline46mondego>    this.Savings = Savings;<newline46mondego><newline46mondego>    System.out.println(<doubleQuotes46>Teller:<doubleQuotes46> + <doubleQuotes46> <doubleQuotes46> + name + <doubleQuotes46> <doubleQuotes46> + <doubleQuotes46>This transaction will process:<doubleQuotes46>     + <doubleQuotes46> <doubleQuotes46> + dateProcessed);<newline46mondego>}<newline46mondego>"
"4505splitHere46","20183799splitHere46","class Teller<newline46mondego>{<newline46mondego>Account acct;<newline46mondego>String name;<newline46mondego>String dateProcessed;<newline46mondego>int random;<newline46mondego><newline46mondego>public Teller(Account act, String dP)<newline46mondego>{<newline46mondego>    acct=act;<newline46mondego>    name = acct.getname();<newline46mondego>    dateProcessed = dP;<newline46mondego><newline46mondego>    System.out.println(<doubleQuotes46>Teller:<doubleQuotes46> + <doubleQuotes46> <doubleQuotes46> + name + <doubleQuotes46> <doubleQuotes46> + <doubleQuotes46>This transaction will process:<doubleQuotes46>     + <doubleQuotes46> <doubleQuotes46> + dateProcessed);<newline46mondego>}<newline46mondego><newline46mondego><newline46mondego>public void acctStuff()<newline46mondego>{<newline46mondego>    if(acct instenceof checkingAccount)<newline46mondego>     { //do checking stuff}<newline46mondego>    else { //do savings stuff}<newline46mondego>}<newline46mondego>"
"4506splitHere46","20183855splitHere46","public boolean addPerson(Person x){<newline46mondego>    boolean found = false;<newline46mondego><newline46mondego>    for(int i = 0; i < people.length; i++){   // you're filling the array in this loop<newline46mondego>        if (people[i] == null){<newline46mondego>            people[i] = x;<newline46mondego>            found = true;<newline46mondego>        }<newline46mondego>    }<newline46mondego>    return found;<newline46mondego>}<newline46mondego>"
"4507splitHere46","20183875splitHere46","Thread.sleep"
"4508splitHere46","20183875splitHere46","javax.swing.Timer"
"4509splitHere46","20183875splitHere46","import java.awt.Color;<newline46mondego>import java.awt.Dimension;<newline46mondego>import java.awt.EventQueue;<newline46mondego>import java.awt.event.ActionEvent;<newline46mondego>import java.awt.event.ActionListener;<newline46mondego>import javax.swing.JFrame;<newline46mondego>import javax.swing.JPanel;<newline46mondego>import javax.swing.Timer;<newline46mondego>import javax.swing.UIManager;<newline46mondego>import javax.swing.UnsupportedLookAndFeelException;<newline46mondego><newline46mondego>public class ColorPane {<newline46mondego><newline46mondego>    public static void main(String[] args) {<newline46mondego>        new ColorPane();<newline46mondego>    }<newline46mondego><newline46mondego>    public ColorPane() {<newline46mondego>        EventQueue.invokeLater(new Runnable() {<newline46mondego>            @Override<newline46mondego>            public void run() {<newline46mondego>                try {<newline46mondego>                    UIManager.setLookAndFeel(UIManager.getSystemLookAndFeelClassName());<newline46mondego>                } catch (ClassNotFoundException | InstantiationException | IllegalAccessException | UnsupportedLookAndFeelException ex) {<newline46mondego>                    ex.printStackTrace();<newline46mondego>                }<newline46mondego><newline46mondego>                JFrame frame = new JFrame(<doubleQuotes46>Testing<doubleQuotes46>);<newline46mondego>                frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);<newline46mondego>                frame.add(new TestPane());<newline46mondego>                frame.pack();<newline46mondego>                frame.setLocationRelativeTo(null);<newline46mondego>                frame.setVisible(true);<newline46mondego>            }<newline46mondego>        });<newline46mondego>    }<newline46mondego><newline46mondego>    public class TestPane extends JPanel {<newline46mondego><newline46mondego>        private Color[] colors = new Color[]{Color.RED, Color.GREEN, Color.BLUE};<newline46mondego>        private int colorIndex = -1;<newline46mondego><newline46mondego>        public TestPane() {<newline46mondego>            Timer timer = new Timer(1000, new ActionListener() {<newline46mondego>                @Override<newline46mondego>                public void actionPerformed(ActionEvent e) {<newline46mondego>                    colorIndex++;<newline46mondego>                    if (colorIndex >= colors.length) {<newline46mondego>                        colorIndex = 0;<newline46mondego>                    }<newline46mondego>                    setBackground(colors[colorIndex]);<newline46mondego>                }<newline46mondego>            });<newline46mondego>            timer.start();<newline46mondego>        }<newline46mondego><newline46mondego>        @Override<newline46mondego>        public Dimension getPreferredSize() {<newline46mondego>            return new Dimension(200, 200);<newline46mondego>        }<newline46mondego><newline46mondego>    }<newline46mondego><newline46mondego>}<newline46mondego>"
"4510splitHere46","20184088splitHere46","messageLabel.setText(total);<newline46mondego>"
"4511splitHere46","20184088splitHere46","actioPerformed()"
"4512splitHere46","20184088splitHere46","total"
"4513splitHere46","20184088splitHere46","actioPerformed()"
"4514splitHere46","20184088splitHere46","public void actionPerformed(ActionEvent e){<newline46mondego>    ...<newline46mondego>    ...<newline46mondego><newline46mondego>    total = Double.toString(cost1 + cost2 + cost3);<newline46mondego><newline46mondego>    messageLabel.setText(<doubleQuotes46>$<doubleQuotes46> + total);<newline46mondego>}<newline46mondego>"
"4515splitHere46","20184088splitHere46","total = Double.toString(cost1 + cost2 + cost3);<newline46mondego>"
"4516splitHere46","20184088splitHere46","total += Double.toString(cost1 + cost2 + cost3);<newline46mondego>"
"4517splitHere46","20184123splitHere46","setSmallIcon()"
"4518splitHere46","20184205splitHere46","static"
"4519splitHere46","20184205splitHere46","public static int x;<newline46mondego>public static int y;<newline46mondego>"
"4520splitHere46","20184205splitHere46","static"
"4521splitHere46","20184205splitHere46","static"
"4522splitHere46","20184205splitHere46","static"
"4523splitHere46","20184205splitHere46","private int x; // or public like you did<newline46mondego>private int y;<newline46mondego>"
"4524splitHere46","20184485splitHere46","Process sh = Runtime.getRuntime().exec(<doubleQuotes46>su<doubleQuotes46>, null,null);<newline46mondego><newline46mondego>                    OutputStream  os = sh.getOutputStream();<newline46mondego>                    os.write((<doubleQuotes46>/system/bin/screencap -p <doubleQuotes46> + <doubleQuotes46>/sdcard/img.png<doubleQuotes46>).getBytes(<doubleQuotes46>ASCII<doubleQuotes46>));<newline46mondego>                    os.flush();<newline46mondego><newline46mondego>                    os.close();<newline46mondego>                    sh.waitFor();<newline46mondego><newline46mondego>then read img.png as bitmap and convert it jpg as follows <newline46mondego><newline46mondego>Bitmap screen = BitmapFactory.decodeFile(Environment.getExternalStorageDirectory()+         <newline46mondego>File.separator +<doubleQuotes46>img.png<doubleQuotes46>);<newline46mondego><newline46mondego>//my code for saving<newline46mondego>    ByteArrayOutputStream bytes = new ByteArrayOutputStream();<newline46mondego>    screen.compress(Bitmap.CompressFormat.JPEG, 15, bytes);<newline46mondego><newline46mondego>//you can create a new file name <doubleQuotes46>test.jpg<doubleQuotes46> in sdcard folder.<newline46mondego><newline46mondego>File f = new File(Environment.getExternalStorageDirectory()+ File.separator + <doubleQuotes46>test.jpg<doubleQuotes46>);<newline46mondego>            f.createNewFile();<newline46mondego>//write the bytes in file<newline46mondego>    FileOutputStream fo = new FileOutputStream(f);<newline46mondego>    fo.write(bytes.toByteArray());<newline46mondego>// remember close de FileOutput<newline46mondego><newline46mondego>    fo.close();<newline46mondego>"
"4525splitHere46","20184606splitHere46","p = Runtime.getRuntime().exec(String.format(<doubleQuotes46>./CutyCapt --url=%s --out=%s<doubleQuotes46>,<newline46mondego>        url, path));<newline46mondego>"
"4526splitHere46","20184612splitHere46","if(thisLine==<doubleQuotes46>*<doubleQuotes46>)<newline46mondego>"
"4527splitHere46","20184612splitHere46","equals()"
"4528splitHere46","20184612splitHere46","if(thisLine.equals(<doubleQuotes46>*<doubleQuotes46>))<newline46mondego>"
"4529splitHere46","20184643splitHere46","public static void main (String[] args) throws java.lang.Exception<newline46mondego>    {<newline46mondego>        BigInteger biggestNumber = null;<newline46mondego>        Scanner s = new Scanner(new FileReader(args[0]));<newline46mondego>        while( s.hasNext() ){<newline46mondego>            if( s.hasNextBigInteger() ){<newline46mondego>                BigInteger number = s.nextBigInteger();<newline46mondego>                if( biggestNumber == null || number.compareTo(biggestNumber) == 1 ){<newline46mondego>                    biggestNumber = number;<newline46mondego>                }<newline46mondego>            }<newline46mondego>            else {<newline46mondego>                s.next();<newline46mondego>            }<newline46mondego>        }<newline46mondego>        System.out.println(<doubleQuotes46>Biggest Number: <doubleQuotes46> + biggestNumber.toString());<newline46mondego>    }<newline46mondego>"
"4530splitHere46","20184645splitHere46","long price = (long)primaryAmount * (long)this.price;<newline46mondego>"
"4531splitHere46","20184652splitHere46","AndroidTestCase"
"4532splitHere46","20184652splitHere46","InstrumentationTestCase"
"4533splitHere46","20184706splitHere46","/**<newline46mondego> * Constant to return from {@link #onStartCommand}: if this service's<newline46mondego> * process is killed while it is started (after returning from<newline46mondego> * {@link #onStartCommand}), then leave it in the started state but<newline46mondego> * don't retain this delivered intent.  Later the system will try to<newline46mondego> * re-create the service.  Because it is in the started state, it will<newline46mondego> * guarantee to call {@link #onStartCommand} after creating the new<newline46mondego> * service instance; if there are not any pending start commands to be<newline46mondego> * delivered to the service, it will be called with a null intent<newline46mondego> * object, so you must take care to check for this.<newline46mondego> * <newline46mondego> * <p>This mode makes sense for things that will be explicitly started<newline46mondego> * and stopped to run for arbitrary periods of time, such as a service<newline46mondego> * performing background music playback.<newline46mondego> */<newline46mondego>public static final int START_STICKY = 1;<newline46mondego>"
"4534splitHere46","20184846splitHere46","if (arr[i - 1] > arr[i])"
"4535splitHere46","20184924splitHere46","FileInputStream"
"4536splitHere46","20184924splitHere46","FileOutputStream"
"4537splitHere46","20184924splitHere46","FileInputStream in = new FileInputStream(new File(input.nextLine()));<newline46mondego><newline46mondego>FileOutputStream in = new FileOutputStream(new File(input.nextLine()));<newline46mondego>"
"4538splitHere46","20184924splitHere46","C:/Users/Richard/Documents/Me.txt"
"4539splitHere46","20184965splitHere46","Integer#parseInt(String)"
"4540splitHere46","20184965splitHere46","String"
"4541splitHere46","20184965splitHere46","char"
"4542splitHere46","20184965splitHere46","Character#getNumericValue(char)"
"4543splitHere46","20184965splitHere46","int pp = Character.getNumericValue(p);<newline46mondego>int bp = Character.getNumericValue(b);<newline46mondego>"
"4544splitHere46","20185028splitHere46","Cube(){<newline46mondego>    // This is the constructor called.<newline46mondego>    super();<newline46mondego>    depth = 0;<newline46mondego>}<newline46mondego><newline46mondego>Cube(int x, int y, int sideLength, int d){<newline46mondego>    super(x, y, sideLength);<newline46mondego>    this.depth = d;<newline46mondego>}<newline46mondego>"
"4545splitHere46","20185028splitHere46","String x = getinput(<doubleQuotes46>Set variable X<doubleQuotes46>);<newline46mondego>    String y = getinput(<doubleQuotes46>Set variable Y<doubleQuotes46>);<newline46mondego>    String sideLength = getinput(<doubleQuotes46>Set variable Side Length<doubleQuotes46>);<newline46mondego>    String depth getinput(<doubleQuotes46>Set variable depth<doubleQuotes46>);<newline46mondego><newline46mondego>    Cube cube = new Cube(x, y, sideLength, depth);<newline46mondego>"
"4546splitHere46","20185031splitHere46","try {<newline46mondego>                   dbf = DocumentBuilderFactory.newInstance();<newline46mondego>                   db = dbf.newDocumentBuilder();<newline46mondego>                   InputSource is = new InputSource(new ByteArrayInputStream(response.getBytes(<doubleQuotes46>UTF-8<doubleQuotes46>)));<newline46mondego>                   document = db.parse(is);<newline46mondego>                   System.out.println(document);//here we get null;<newline46mondego>                       System.out.println(document.getNodeName());//here we get document;<newline46mondego>                      for(int i =0 ; i<document.getChildNodes().getLength();i++)<newline46mondego>                   System.out.println(document.getChildNodes().item(i).getChildNodes().item(i).getNodeName());<newline46mondego>                }<newline46mondego><newline46mondego><newline46mondego>    Output :<newline46mondego><newline46mondego>    [#document: null]<newline46mondego>    document<newline46mondego>    soap:Body<newline46mondego>"
"4547splitHere46","20185031splitHere46","javax.xml.soap.*"
"4548splitHere46","20185069splitHere46","Switch"
"4549splitHere46","20185069splitHere46","if/else"
"4550splitHere46","20185069splitHere46","case=<doubleQuotes46>1<doubleQuotes46>"
"4551splitHere46","20185085splitHere46","null"
"4552splitHere46","20185085splitHere46","0"
"4553splitHere46","20185085splitHere46","null"
"4554splitHere46","20185085splitHere46","NullPointerException"
"4555splitHere46","20185085splitHere46","String text1=jt1.getText();<newline46mondego>String text2=jt2.getText();<newline46mondego>String text3=jt3.getText();<newline46mondego>String text4=jt4.getText();<newline46mondego>String text5=jt5.getText();<newline46mondego><newline46mondego>if (text1 != null && !text1.trim().isEmpty() &&<newline46mondego>    text2 != null && !text2.trim().isEmpty() &&<newline46mondego>    text3 != null && !text3.trim().isEmpty() &&<newline46mondego>    text4 != null && !text4.trim().isEmpty() &&<newline46mondego>    text5 != null && !text5.trim().isEmpty()) {<newline46mondego>     //... Do insert<newline46mondego> } else {<newline46mondego>     // Deal with the fact that one or more of the values are invalid<newline46mondego> }<newline46mondego>"
"4556splitHere46","20185149splitHere46","matches"
"4557splitHere46","20185149splitHere46","^(?!.*(--|  )).*$<newline46mondego>"
"4558splitHere46","20185196splitHere46","setContentView(R.layout.activity_login);"
"4559splitHere46","20185196splitHere46","super.onCreate"
"4560splitHere46","20185196splitHere46","button"
"4561splitHere46","20185196splitHere46","textview"
"4562splitHere46","20185196splitHere46","@Override<newline46mondego>    protected void onCreate(Bundle savedInstanceState) {<newline46mondego>        super.onCreate(savedInstanceState);<newline46mondego>        setContentView(R.layout.activity_login);<newline46mondego>        btnLogin = (Button) findViewById(R.id.btnLogin);<newline46mondego>        progressBar_Login = (ProgressBar) findViewById(R.id.progressBar_Login);<newline46mondego><newline46mondego>***************************<newline46mondego>        //btnLogin.setOnClickListener(btnLoginClickListener);<newline46mondego>***************************        <newline46mondego>    }<newline46mondego>"
"4563splitHere46","20185206splitHere46","try/catch"
"4564splitHere46","20185206splitHere46","actioPerformed()"
"4565splitHere46","20185206splitHere46","actionPerformed()"
"4566splitHere46","20185206splitHere46","submit.addActionListener(new ActionListener() {<newline46mondego>    public void actionPerformed(ActionEvent e) <newline46mondego>    {<newline46mondego>        try {<newline46mondego>             String name = tf1.getText();<newline46mondego>             String ID = tf2.getText();<newline46mondego>             String email = tf3.getText();<newline46mondego>             String address = tf4.getText();<newline46mondego>             String fileName = ID + <doubleQuotes46>Details.csv<doubleQuotes46>;<newline46mondego>             File file = new File(fileName);<newline46mondego>             FileWriter fw = new FileWriter(fileName); <newline46mondego>             name = name.concat(<doubleQuotes46>,<doubleQuotes46>);<newline46mondego>             ID = ID.concat(<doubleQuotes46>,<doubleQuotes46>);<newline46mondego>             email = email.concat(<doubleQuotes46>,<doubleQuotes46>);<newline46mondego>             address = address.concat(<doubleQuotes46>,<doubleQuotes46>);<newline46mondego>             fw.write(name);<newline46mondego>             fw.write(ID);<newline46mondego>             fw.write(email);<newline46mondego>             fw.write(address);<newline46mondego>             fw.close();<newline46mondego>        }<newline46mondego>        catch (IOException ex){<newline46mondego>             ex .printStackTrace();<newline46mondego>             System.exit(0);<newline46mondego>        }          <newline46mondego>    }<newline46mondego>});<newline46mondego>"
"4567splitHere46","20185206splitHere46","addStudent()"
"4568splitHere46","20185206splitHere46","try/catch"
"4569splitHere46","20185282splitHere46","ANT_HOME/lib"
"4570splitHere46","20185282splitHere46","mail-1.4.jar"
"4571splitHere46","20185282splitHere46","mail-1.4.jar"
"4572splitHere46","20185291splitHere46","NetworkClassLoader"
"4573splitHere46","20185297splitHere46","cv =0; spacedWord=<doubleQuotes46><doubleQuotes46>;"
"4574splitHere46","20185297splitHere46","while ((word=readBot.readLine()) != null) {<newline46mondego>        //spliter<newline46mondego>        cv =0;<newline46mondego>        spacedWord=<doubleQuotes46><doubleQuotes46>;<newline46mondego>        while ( cv <word.length()) {   <newline46mondego>                spacedWord = spacedWord + <doubleQuotes46> <doubleQuotes46> + word.charAt(cv);<newline46mondego>                cv = cv + 1;<newline46mondego>            }   <newline46mondego>            System.out.println(word + <doubleQuotes46> OR <doubleQuotes46> + spacedWord);<newline46mondego>    }<newline46mondego>"
"4575splitHere46","20185297splitHere46","This program will read from a File at :TEST.txt<newline46mondego><newline46mondego>APPLE OR  A P P L E<newline46mondego>ELABORATE OR  E L A B O R A T E<newline46mondego>FUTURE OR  F U T U R E<newline46mondego>PROOF OR  P R O O F<newline46mondego>LOGICAL OR  L O G I C A L<newline46mondego>"
"4576splitHere46","20185381splitHere46","Promise<Boolean> myPromise = Promise.promise(new Function0<Boolean>() {<newline46mondego>    public Boolean apply() throws Throwable {<newline46mondego>        // TODO - Add Implementation here.<newline46mondego>        return Boolean.TRUE;<newline46mondego>    }<newline46mondego><newline46mondego>});<newline46mondego>"
"4577splitHere46","20185388splitHere46","String str = <doubleQuotes46>rdl_mod_id:0123456789\n\nrdl_mod_name:Driving Test\n\nrdl_mod_type:PUBL\n\nrdl_mod_mode:Practice\n\nrdl_mod_date:2013-04-23<doubleQuotes46>;<newline46mondego>        Pattern pattern = Pattern.compile(<doubleQuotes46>rdl_mod_name:(.*?)\n<doubleQuotes46>);<newline46mondego>        Matcher matcher = pattern.matcher(str);<newline46mondego>        while (matcher.find()) {<newline46mondego>            System.out.println(matcher.group(1));<newline46mondego>        }<newline46mondego>"
"4578splitHere46","20185388splitHere46","regex"
"4579splitHere46","20185388splitHere46","matcher"
"4580splitHere46","20185388splitHere46","pattern"
"4581splitHere46","20185516splitHere46","if(first.equals(next)){<newline46mondego>  copy.remove(j);<newline46mondego>  j--;<newline46mondego>}<newline46mondego>"
"4582splitHere46","20185532splitHere46","@Value(<doubleQuotes46>#{'${dmin.details.fields}'.split(',')}<doubleQuotes46>)<newline46mondego>private List<String> fields;<newline46mondego><newline46mondego>private Map<String, String> fieldsMap;<newline46mondego><newline46mondego>@PostConstruct<newline46mondego>public void init() {<newline46mondego>    fieldsMap = new HashMap<String, String>();<newline46mondego>    if (fields != null && fields.size() != 0) {<newline46mondego>        for (String field : fields) {<newline46mondego>            String[] splittedField = field.split(<doubleQuotes46>,<doubleQuotes46>);<newline46mondego>            fieldsMap.put(splittedField[0], splittedField[1]);<newline46mondego>        }<newline46mondego>    }<newline46mondego>}<newline46mondego>"
"4583splitHere46","20185676splitHere46","Jlabels"
"4584splitHere46","20185676splitHere46","JTextFields"
"4585splitHere46","20185676splitHere46","saveBox"
"4586splitHere46","20185676splitHere46","errorBox"
"4587splitHere46","20185676splitHere46","MessageBox savedBox;"
"4588splitHere46","20185676splitHere46","MessageBox errorBox;"
"4589splitHere46","20185676splitHere46","savedBox = new MessageBox(this, <doubleQuotes46>Data Submitted<doubleQuotes46>, <doubleQuotes46>The vehicle information has been saved.<doubleQuotes46>);<newline46mondego>saveBox.setVisible(true);<newline46mondego><newline46mondego>errorBox = new MessageBox(this, <doubleQuotes46>Data Entry Error<doubleQuotes46>, <doubleQuotes46>You must complete all fields.<doubleQuotes46>);<newline46mondego>errorBox.setVisible(true);<newline46mondego>"
"4590splitHere46","20185676splitHere46","JOptionPane"
"4591splitHere46","20185676splitHere46","JOptionPane.showInputDialog(null, <doubleQuotes46>Data Entry Error<doubleQuotes46>, <doubleQuotes46>You must complete all fields.<doubleQuotes46>);<newline46mondego>"
"4592splitHere46","20185862splitHere46","/usr/libexec/java_home"
"4593splitHere46","20185862splitHere46","/usr/libexec/java_home -v 1.7"
"4594splitHere46","20185873splitHere46","BasicSliderUI"
"4595splitHere46","20185873splitHere46","paintThumb()"
"4596splitHere46","20185873splitHere46","Shape"
"4597splitHere46","20185873splitHere46","drawLine()"
"4598splitHere46","20185878splitHere46","array of boolean"
"4599splitHere46","20185878splitHere46","private List<Integer> getMissingNo(String text){<newline46mondego>    ArrayList<Integer> missingNo = new ArrayList<Integer>();<newline46mondego><newline46mondego>    boolean[] usedNos = new boolean[9];<newline46mondego>    for(int i=0; i<text.length(); i++){<newline46mondego>        usedNos [value70(text.charAt(i))-1] = true;<newline46mondego>    }<newline46mondego><newline46mondego>    for(int i=0; i<9; i++){<newline46mondego>        if(!usedNos[i]){<newline46mondego>            missingNo.add(i+1);<newline46mondego>            System.out.println((i+1) + <doubleQuotes46> is missing<doubleQuotes46>);<newline46mondego>        }<newline46mondego>    }<newline46mondego><newline46mondego>    return missingNo;<newline46mondego>}<newline46mondego>"
"4600splitHere46","20185956splitHere46","== null"
"4601splitHere46","20185956splitHere46","null"
"4602splitHere46","20185956splitHere46","== <doubleQuotes46><doubleQuotes46>"
"4603splitHere46","20185956splitHere46","str.equals(<doubleQuotes46><doubleQuotes46>)"
"4604splitHere46","20185956splitHere46","=="
"4605splitHere46","20185956splitHere46","String.isEmpty()"
"4606splitHere46","20185956splitHere46","if (userReorderSelection == null)"
"4607splitHere46","20185956splitHere46","userReorderSelection"
"4608splitHere46","20185956splitHere46","null"
"4609splitHere46","20186015splitHere46","v"
"4610splitHere46","20186015splitHere46","(format nil <doubleQuotes46>~vd<doubleQuotes46> 10 42)<newline46mondego>"
"4611splitHere46","20186018splitHere46","javax.servlet.ServletContextListener"
"4612splitHere46","20186018splitHere46","contextInitialized(ServletContextEvent event)"
"4613splitHere46","20186018splitHere46","<listener><newline46mondego>    <listener-class>com.example.YourServletContextListener</listener-class><newline46mondego></listener><newline46mondego>"
"4614splitHere46","20186099splitHere46","import java.awt.Container;<newline46mondego>import java.awt.FlowLayout;<newline46mondego>import java.awt.event.ActionEvent;<newline46mondego>import java.awt.event.ActionListener;<newline46mondego><newline46mondego>import javax.swing.JApplet;<newline46mondego>import javax.swing.JButton;<newline46mondego>import javax.swing.JLabel;<newline46mondego>import javax.swing.JTextField;<newline46mondego><newline46mondego>public class SecretPhraseUI <newline46mondego>    extends JApplet<newline46mondego>    implements ActionListener {<newline46mondego><newline46mondego>    SecretPhrase phrase = new SecretPhrase();<newline46mondego>    JLabel passwordLabel = new JLabel(<doubleQuotes46>Enter a letter to guess the phrase.<doubleQuotes46>); //sets label to display message<newline46mondego>    JLabel passwordLabel2 = new JLabel(<newline46mondego>            phrase.hiddenPhrase  ); //sets label to display message<newline46mondego>    JTextField inputBox = new JTextField(40); //sets text field<newline46mondego>    JButton runButton = new JButton(<doubleQuotes46>Run<doubleQuotes46>); //button that starts program<newline46mondego>    Container con = getContentPane(); //gets container<newline46mondego><newline46mondego>    public void init() {<newline46mondego>        con.setLayout(new FlowLayout());//sets flowlayout<newline46mondego>        con.add(new JLabel());      //jlabel container<newline46mondego>        con.add(inputBox);  //input box container<newline46mondego>        con.add(runButton);  //run button container<newline46mondego>        con.add(passwordLabel); //password label container<newline46mondego>        con.add(passwordLabel2); //password label container<newline46mondego>        runButton.addActionListener(this);//looks to see if run is clicked<newline46mondego>        inputBox.addActionListener(this);//looks to see if input box is used<newline46mondego>    }<newline46mondego><newline46mondego>    public void actionPerformed(ActionEvent e) {<newline46mondego>        if (!inputBox.getText().isEmpty()) {<newline46mondego>            phrase.changeLetter(<newline46mondego>                    inputBox.getText().charAt(0)); //gets input from user <newline46mondego>            passwordLabel2.setText(phrase.hiddenPhrase);<newline46mondego>        }<newline46mondego>    }<newline46mondego>}<newline46mondego><newline46mondego><newline46mondego>public class SecretPhrase {<newline46mondego>    int wrong = 0; //ignore for now<newline46mondego>    String phrase = <doubleQuotes46>Bad hair day<doubleQuotes46>; //hidden, what the user has to guess<newline46mondego>    String hiddenPhrase = <doubleQuotes46>*** **** ***<doubleQuotes46>; //what the user originally sees<newline46mondego><newline46mondego>    public void changeLetter(char input) {<newline46mondego>         StringBuilder checker = new StringBuilder(hiddenPhrase);<newline46mondego>         boolean wrongGuess = true;<newline46mondego>         for (int i=0; i<phrase.length(); i++) {<newline46mondego>            if (phrase.charAt(i) == input){<newline46mondego>                checker.setCharAt(i, input);<newline46mondego>                wrongGuess = false;<newline46mondego>            }<newline46mondego>         }<newline46mondego>         hiddenPhrase = checker.toString();<newline46mondego>         if (wrongGuess){<newline46mondego>             wrong++;<newline46mondego>         }<newline46mondego>    }<newline46mondego>}<newline46mondego>"
"4615splitHere46","20186107splitHere46","transferTo"
"4616splitHere46","20186107splitHere46","fromchannel.transferTo(n,fromfile.length()-n,tochannel)<newline46mondego>"
"4617splitHere46","20186107splitHere46","transferFrom"
"4618splitHere46","20186107splitHere46","transferTo"
"4619splitHere46","20186209splitHere46","SimpleAttributeSet normal = new SimpleAttributeSet();<newline46mondego>StyleConstants.setFontFamily(normal, <doubleQuotes46>SansSerif<doubleQuotes46>);<newline46mondego>StyleConstants.setFontSize(normal, 16);<newline46mondego><newline46mondego>SimpleAttributeSet bold = new SimpleAttributeSet(normal);<newline46mondego>StyleConstants.setBold(bold, true);<newline46mondego><newline46mondego>SimpleAttributeSet italic = new SimpleAttributeSet(normal);<newline46mondego>StyleConstants.setItalic(italic, true);<newline46mondego><newline46mondego>doc.insertString(doc.getLength(), s + <doubleQuotes46>\n<doubleQuotes46>, normal);<newline46mondego>doc.insertString(doc.getLength(), s + <doubleQuotes46>\n<doubleQuotes46>, bold);<newline46mondego>doc.insertString(doc.getLength(), s + <doubleQuotes46>\n<doubleQuotes46>, italic);<newline46mondego>"
"4620splitHere46","20186383splitHere46","ParseUser.getCurrentUser().put(<doubleQuotes46>username<doubleQuotes46>, username);<newline46mondego>ParseUser.getCurrentUser().put(<doubleQuotes46>email<doubleQuotes46>, email);<newline46mondego>ParseUser.getCurrentUser().put(<doubleQuotes46>password<doubleQuotes46>, hashedPassword);<newline46mondego>ParseUser.getCurrentUser().put(<doubleQuotes46>last_session<doubleQuotes46>, last_session);<newline46mondego>ParseUser.getCurrentUser().saveInBackground();<newline46mondego>"
"4621splitHere46","20186418splitHere46","public class MyClass<T extends Averageable><newline46mondego>"
"4622splitHere46","20186640splitHere46","Scanner input = new Scanner (inFile);<newline46mondego>"
"4623splitHere46","20186640splitHere46","input"
"4624splitHere46","20186640splitHere46","makeSmallerLists()"
"4625splitHere46","20186640splitHere46","class"
"4626splitHere46","20186640splitHere46","static"
"4627splitHere46","20186640splitHere46","public class Grocery{<newline46mondego><newline46mondego>  Scanner input;<newline46mondego>"
"4628splitHere46","20186640splitHere46","public Grocery(){<newline46mondego><newline46mondego>            File inFile = new File (<doubleQuotes46>lists.txt<doubleQuotes46>);<newline46mondego>             input = new Scanner (inFile);<newline46mondego>"
"4629splitHere46","20186710splitHere46","term weighting"
"4630splitHere46","20186710splitHere46","string similarity"
"4631splitHere46","20186710splitHere46","SELECT ... FROM ... WHERE field LIKE '%keyword%'"
"4632splitHere46","20186710splitHere46","term weighting"
"4633splitHere46","20186710splitHere46","string similarity"
"4634splitHere46","20186749splitHere46","ArrayList"
"4635splitHere46","20186749splitHere46","C"
"4636splitHere46","20186749splitHere46","int index = url.indexOf(itemToMove);<newline46mondego>url.removeAt(index);<newline46mondego>url.add(0, itemToMove);<newline46mondego>"
"4637splitHere46","20186749splitHere46","List"
"4638splitHere46","20186749splitHere46","LinkedList"
"4639splitHere46","20186775splitHere46","R"
"4640splitHere46","20186775splitHere46","import android.R;"
"4641splitHere46","20186775splitHere46","R"
"4642splitHere46","20186775splitHere46","com.example.R"
"4643splitHere46","20187261splitHere46","List<String> items = new ArrayList<String>();<newline46mondego>items.add(<doubleQuotes46>this<doubleQuotes46>);<newline46mondego>items.add(<doubleQuotes46>that<doubleQuotes46>);<newline46mondego>"
"4644splitHere46","20187261splitHere46","setSingleChoiceItems"
"4645splitHere46","20187261splitHere46","b.setSingleChoiceItems(items.toArray(new String[items.size()]), 0, new  DialogInterface.OnClickListener() { ... });<newline46mondego>"
"4646splitHere46","20187264splitHere46","IFolder"
"4647splitHere46","20187264splitHere46","IContainer"
"4648splitHere46","20187264splitHere46","getMembers()"
"4649splitHere46","20187264splitHere46","IResource[]"
"4650splitHere46","20187264splitHere46","instanceof"
"4651splitHere46","20187264splitHere46","IFolder"
"4652splitHere46","20187264splitHere46","IFile"
"4653splitHere46","20187264splitHere46","IPath"
"4654splitHere46","20187264splitHere46","IJavaProject#getOutputLocation()"
"4655splitHere46","20187264splitHere46","bin"
"4656splitHere46","20187264splitHere46","IPath outputPath = project.getOutputLocation();<newline46mondego>"
"4657splitHere46","20187264splitHere46","IFile"
"4658splitHere46","20187264splitHere46","IFolder"
"4659splitHere46","20187264splitHere46","IContainer"
"4660splitHere46","20187264splitHere46","IWorkspaceRoot"
"4661splitHere46","20187264splitHere46","IFolder outputFolder = ResourcesPlugin.getWorkspace().getRoot().getFolder(outputPath);<newline46mondego>"
"4662splitHere46","20187264splitHere46","void printStructure(IContainer container, String intent) {<newline46mondego>    for(IResource member : folder.members()) {<newline46mondego>        System.out.println(intent + member.getName());<newline46mondego>        if (member instanceof IContainer) {<newline46mondego>            printStructure((IContainer)member, intent + <doubleQuotes46>  <doubleQuotes46>);<newline46mondego>        }<newline46mondego>    }<newline46mondego>}<newline46mondego>"
"4663splitHere46","20187334splitHere46","Map"
"4664splitHere46","20187334splitHere46","map"
"4665splitHere46","20187334splitHere46","import java.io.BufferedReader;<newline46mondego>import java.io.FileNotFoundException;<newline46mondego>import java.io.FileReader;<newline46mondego>import java.io.IOException;<newline46mondego>import java.util.ArrayList;<newline46mondego>import java.util.HashMap;<newline46mondego>import java.util.List;<newline46mondego>import java.util.Map;<newline46mondego>import java.util.Map.Entry;<newline46mondego>import java.util.Set;<newline46mondego><newline46mondego>public class Sorter {<newline46mondego><newline46mondego>    static Map<String, List<String>> read() throws FileNotFoundException,<newline46mondego>            IOException {<newline46mondego>        BufferedReader reader = new BufferedReader(new FileReader(<doubleQuotes46>data.txt<doubleQuotes46>));<newline46mondego>        String line;<newline46mondego>        Map<String, List<String>> map = new HashMap<String, List<String>>();<newline46mondego>        String value = <doubleQuotes46><doubleQuotes46>;<newline46mondego>        while ((line = reader.readLine()) != null) {<newline46mondego>            if (line.matches(<doubleQuotes46>\\s*<doubleQuotes46>)) {<newline46mondego>                continue; // skip blank lines<newline46mondego>            }<newline46mondego>            // Assume line that begins with space is a course.<newline46mondego>            if (Character.isSpaceChar(line.charAt(0))) {<newline46mondego>                // Add new course to data if it's there.<newline46mondego>                if (!map.containsKey(line)) {<newline46mondego>                    map.put(line, new ArrayList<String>());<newline46mondego>                }<newline46mondego>                map.get(line).add(value);<newline46mondego>            } else {<newline46mondego>                // Add completed data to list if there is one.<newline46mondego>                value = line;<newline46mondego>            }<newline46mondego>        }<newline46mondego>        return map;<newline46mondego>    }<newline46mondego><newline46mondego>    public static void main(String[] args) {<newline46mondego>        try {<newline46mondego>            Map<String, List<String>> list = read();<newline46mondego>            Set<Entry<String, List<String>>> set = list.entrySet();<newline46mondego>            for (Entry<String, List<String>> e : set) {<newline46mondego>                System.out.println(e.getKey());<newline46mondego>                for (String s : e.getValue()) {<newline46mondego>                    System.out.println(<doubleQuotes46>\t<doubleQuotes46> + s);<newline46mondego>                }<newline46mondego>            }<newline46mondego>        } catch (Exception ex) {<newline46mondego>            System.err.println(<doubleQuotes46>Read failed.<doubleQuotes46>);<newline46mondego>        }<newline46mondego>    }<newline46mondego>}<newline46mondego>"
"4666splitHere46","20187334splitHere46","SS828 Problem Based Programming<newline46mondego>    17b0585<newline46mondego>   SS555 Calculus for Distributed Computing<newline46mondego>    18b0885  <newline46mondego>   SS844 Parallel Algorithms        <newline46mondego>    18b0885  <newline46mondego>   SS876 Positronics<newline46mondego>    17b2582<newline46mondego>   SS660 Genetic Computation<newline46mondego>    17b0585<newline46mondego>   SS567 Hacking Quantum Network<newline46mondego>    17b0585<newline46mondego>    17b2582<newline46mondego>   SS880 Quark-based Logic<newline46mondego>    17b2582<newline46mondego>   SS501 Quantum Communication<newline46mondego>    18b0885  <newline46mondego>"
"4667splitHere46","20187398splitHere46","List<Element> params = testcase.getChildren(<doubleQuotes46>parameter<doubleQuotes46>);<newline46mondego>            for(Element ele : params){<newline46mondego>                String key = ele.getChildText(<doubleQuotes46>key<doubleQuotes46>);<newline46mondego>                String value = ele.getChildText(<doubleQuotes46>value<doubleQuotes46>);<newline46mondego>                parameters.put(key, value);<newline46mondego>            }<newline46mondego>"
"4668splitHere46","20187406splitHere46","createDurableQueue"
"4669splitHere46","20187406splitHere46","HornetQ"
"4670splitHere46","20187406splitHere46","<permission type=<doubleQuotes46>createDurableQueue<doubleQuotes46> roles=<doubleQuotes46>guest<doubleQuotes46>/><newline46mondego><permission type=<doubleQuotes46>deleteDurableQueue<doubleQuotes46> roles=<doubleQuotes46>guest<doubleQuotes46>/><newline46mondego>"
"4671splitHere46","20187449splitHere46","xmlOutput.output(document, new FileWriter(path));<newline46mondego>"
"4672splitHere46","20187449splitHere46","FileWriter"
"4673splitHere46","20187449splitHere46","FileOutputStream"
"4674splitHere46","20187449splitHere46","output"
"4675splitHere46","20187449splitHere46","XMLOutputter"
"4676splitHere46","20187449splitHere46","CDATA"
"4677splitHere46","20187466splitHere46","AcroFields.Item"
"4678splitHere46","20187466splitHere46","AcroFields.Item"
"4679splitHere46","20187466splitHere46","getMerged()"
"4680splitHere46","20187466splitHere46","Map<String,AcroFields.Item> fields = form.getFields();<newline46mondego>AcroFields.Item item;<newline46mondego>PdfDictionary dict;<newline46mondego>int flags;<newline46mondego>for (Map.Entry<String,AcroFields.Item> entry : fields.entrySet()) {<newline46mondego>    out.write(entry.getKey());<newline46mondego>    item = entry.getValue();<newline46mondego>    dict = item.getMerged(0);<newline46mondego>    // inspect dict<newline46mondego>}<newline46mondego>"
"4681splitHere46","20187466splitHere46","/FF"
"4682splitHere46","20187466splitHere46","/MK"
"4683splitHere46","20187510splitHere46","try{<newline46mondego>        WebElement element = driver.findElement(By.xpath(<doubleQuotes46>//html/body/table[2]/form/table/tbody/tr/td/font<doubleQuotes46>));<newline46mondego>        String strngAcc = element.getText();<newline46mondego>        System.out.println(strngAcc);<newline46mondego>        AssertJUnit.assertEquals(<doubleQuotes46>Account Information Created Successfully<doubleQuotes46>,strngAcc);<newline46mondego><newline46mondego>        }<newline46mondego>        catch(WebDriverException ex) {<newline46mondego><newline46mondego><newline46mondego>          // Take **Screen Shot** here by Calling ScreenShot Capture Method<newline46mondego>          ScreenShot.takeScreenShot(driver, <doubleQuotes46>AccountTest<doubleQuotes46>, <doubleQuotes46>createAccount<doubleQuotes46>);<newline46mondego>"
"4684splitHere46","20187510splitHere46","static Properties prop = null;<newline46mondego>       public static void takeScreenShot(WebDriver driver, String className,<newline46mondego>        String methodName) {<newline46mondego><newline46mondego>    try {<newline46mondego><newline46mondego>        prop = PropertiesLoader.getPropertiesLoader();<newline46mondego>        File scrnsht=null;<newline46mondego>        String isSequential = prop.getProperty(<doubleQuotes46>isSequential<doubleQuotes46>);<newline46mondego>        if (isSequential.equalsIgnoreCase(<doubleQuotes46>true<doubleQuotes46>)) {<newline46mondego>            scrnsht = ((TakesScreenshot) driver)<newline46mondego>                    .getScreenshotAs(OutputType.FILE);<newline46mondego><newline46mondego><newline46mondego>        } else {<newline46mondego><newline46mondego>            WebDriver augmentedDriver = new Augmenter().augment(driver);<newline46mondego>            scrnsht = ((TakesScreenshot) augmentedDriver)<newline46mondego>                    .getScreenshotAs(OutputType.FILE);<newline46mondego><newline46mondego>        }<newline46mondego><newline46mondego>            Calendar currentDate = Calendar.getInstance();<newline46mondego>    SimpleDateFormat formatter = new SimpleDateFormat(<newline46mondego>            <doubleQuotes46>yyyy/MMM/dd HH:mm:ss<doubleQuotes46>);<newline46mondego>    String date = formatter.format(currentDate.getTime()).replace(<newline46mondego>            <doubleQuotes46>/<doubleQuotes46>, <doubleQuotes46>_<doubleQuotes46>);<newline46mondego>    String dateFormatetd = dateN.replace(<doubleQuotes46>:<doubleQuotes46>, <doubleQuotes46>_<doubleQuotes46>);<newline46mondego>    FileUtils.copyFile(scrnsht, new File(<newline46mondego>            <doubleQuotes46>D:\\SeleniumScreenShots\\<doubleQuotes46> + className + <doubleQuotes46>\\<doubleQuotes46><newline46mondego>                    + methodName + dateFormatted + <doubleQuotes46>.png<doubleQuotes46>));<newline46mondego>"
"4685splitHere46","20187597splitHere46","DefaultServlet"
"4686splitHere46","20187597splitHere46","ServletContext"
"4687splitHere46","20187597splitHere46","DispatcherServlet"
"4688splitHere46","20187597splitHere46","@Configuration<newline46mondego>@EnableAutoConfiguration<newline46mondego>public class SampleWebStaticApplication implements EmbeddedServletContainerCustomizer {<newline46mondego><newline46mondego>    @Override<newline46mondego>    public void customize(ConfigurableEmbeddedServletContainerFactory factory) {<newline46mondego>        MimeMappings mappings = new MimeMappings(MimeMappings.DEFAULT);<newline46mondego>        mappings.add(<doubleQuotes46>html<doubleQuotes46>, <doubleQuotes46>text/html;charset=utf-8<doubleQuotes46>);<newline46mondego>        factory.setMimeMappings(mappings );<newline46mondego>    }<newline46mondego><newline46mondego>    public static void main(String[] args) throws Exception {<newline46mondego>    SpringApplication.run(SampleWebStaticApplication.class, args);<newline46mondego>    }<newline46mondego><newline46mondego>}<newline46mondego>"
"4689splitHere46","20187619splitHere46","Validator"
"4690splitHere46","20187619splitHere46","@Inject"
"4691splitHere46","20187619splitHere46","${validatedValue}"
"4692splitHere46","20187619splitHere46","ConstraintValidator#isValid()"
"4693splitHere46","20187619splitHere46","public boolean isValid(Date value, ConstraintValidatorContext context) {<newline46mondego>    Date now = GregorianCalendar.getInstance().getTime();<newline46mondego><newline46mondego>    if ( value.before( now ) ) {<newline46mondego>        HibernateConstraintValidatorContext hibernateContext =<newline46mondego>                context.unwrap( HibernateConstraintValidatorContext.class );<newline46mondego><newline46mondego>        hibernateContext.disableDefaultConstraintViolation();<newline46mondego>        hibernateContext.addExpressionVariable( <doubleQuotes46>now<doubleQuotes46>, now )<newline46mondego>                .buildConstraintViolationWithTemplate( <doubleQuotes46>Must be after ${now}<doubleQuotes46> )<newline46mondego>                .addConstraintViolation();<newline46mondego><newline46mondego>        return false;<newline46mondego>    }<newline46mondego><newline46mondego>    return true;<newline46mondego>}<newline46mondego>"
"4694splitHere46","20187672splitHere46","FRUIT"
"4695splitHere46","20187672splitHere46","APPLE"
"4696splitHere46","20187672splitHere46","ORANGE"
"4697splitHere46","20187672splitHere46","FRUIT"
"4698splitHere46","20187672splitHere46","Fruit appleFruit = new Apple();<newline46mondego>"
"4699splitHere46","20187672splitHere46","IS A KIND OF"
"4700splitHere46","20187765splitHere46","ERROR_MESSAGE, INFORMATION_MESSAGE, WARNING_MESSAGE, QUESTION_MESSAGE, or PLAIN_MESSAGE"
"4701splitHere46","20187785splitHere46","<?xml"
"4702splitHere46","20187818splitHere46","private void SendBookingData(final String SendCustomerId,final String SendCustomerName, final String BookingDate,<newline46mondego>            final String BookingTime, final String SendNetAmount,final String SendTotalAmount, final String SendTotalQuantity,<newline46mondego>            final String SendDeliveryDate, final String GetBranchId,final String Senduserid,final String Sendratelistid) {<newline46mondego><newline46mondego>                    HttpClient client = new DefaultHttpClient();<newline46mondego>                    JSONObject json = new JSONObject();<newline46mondego>                    try {<newline46mondego><newline46mondego><newline46mondego>                        String SendBookingURL= <doubleQuotes46>your url<doubleQuotes46>;<newline46mondego>                        HttpPost post = new HttpPost(SendBookingURL);       <newline46mondego>                        HttpResponse response;<newline46mondego>                        json.put(<doubleQuotes46>GetcustomerName<doubleQuotes46>, SendCustomerName);<newline46mondego>                        json.put(<doubleQuotes46>GetBookingDate<doubleQuotes46>,BookingDate);<newline46mondego>                        json.put(<doubleQuotes46>GetTotalCost<doubleQuotes46>, SendTotalAmount);<newline46mondego>                        json.put(<doubleQuotes46>GetNetAmount<doubleQuotes46>, SendNetAmount);<newline46mondego>                        json.put(<doubleQuotes46>GetTotalQuantity<doubleQuotes46>,SendTotalQuantity );<newline46mondego>                        json.put(<doubleQuotes46>GetCustomerId<doubleQuotes46>, SendCustomerId);<newline46mondego>                        json.put(<doubleQuotes46>GetDeliveryDate<doubleQuotes46>, SendDeliveryDate);<newline46mondego>                        json.put(<doubleQuotes46>GetBookingtime<doubleQuotes46>, BookingTime);<newline46mondego>                        json.put(<doubleQuotes46>GetBranchId<doubleQuotes46>, GetBranchId);<newline46mondego>                        json.put(<doubleQuotes46>GetUserId<doubleQuotes46>, Senduserid);<newline46mondego>                        json.put(<doubleQuotes46>GetRateListId<doubleQuotes46>, Sendratelistid);<newline46mondego>                        StringEntity se = new StringEntity( json.toString()); <newline46mondego>                        se.setContentType(new BasicHeader(HTTP.CONTENT_TYPE, <doubleQuotes46>application/json<doubleQuotes46>));<newline46mondego>                        post.setEntity(se);<newline46mondego>                        try {<newline46mondego>                            response = client.execute(post);<newline46mondego>                            HttpEntity entity = response.getEntity();<newline46mondego>                            if(entity != null) {<newline46mondego>                                ResponseSummaryTable = EntityUtils.toString(entity);<newline46mondego>                                System.out.println(<doubleQuotes46>body<doubleQuotes46> + ResponseSummaryTable);<newline46mondego>                            }<newline46mondego>                        }<newline46mondego>                          catch (Exception e) {<newline46mondego>                                e.printStackTrace();<newline46mondego>                            }<newline46mondego>                       }<newline46mondego>                            catch(Exception e){<newline46mondego>                                e.printStackTrace();<newline46mondego>                            }       <newline46mondego>                       }<newline46mondego>"
"4703splitHere46","20187870splitHere46","FAXSERVER"
"4704splitHere46","20187870splitHere46","ttyIAX3@127.0.0.1"
"4705splitHere46","20187870splitHere46","modemcommand = <doubleQuotes46>FAXSERVER=ttyIAX3@127.0.0.1 my_command<doubleQuotes46>;<newline46mondego>"
"4706splitHere46","20187899splitHere46","ctrl"
"4707splitHere46","20187899splitHere46","space"
"4708splitHere46","20187899splitHere46","for"
"4709splitHere46","20187899splitHere46","ctrl"
"4710splitHere46","20187899splitHere46","space"
"4711splitHere46","20188177splitHere46","OpenVPN-AS REST API<newline46mondego>-------------------<newline46mondego><newline46mondego>The OpenVPN Access Server supports a Web Services API that can be<newline46mondego>used to fetch a client configuration file from the Access Server.<newline46mondego><newline46mondego>The curl command can be used to easily access this API as follows:<newline46mondego><newline46mondego>  curl -u USERNAME:PASSWORD https://ACCESS_SERVER:CWS_PORT/rest/METHOD<newline46mondego><newline46mondego>Any generic HTTPS client tool (including even a web browser) can be used<newline46mondego>to access the API -- curl is just used here as an example.  Whatever<newline46mondego>method is used, the USERNAME:PASSWORD pair should be passed to the API<newline46mondego>using HTTP Basic Authentication.<newline46mondego><newline46mondego>Replace the above variables in the curl command as follows:<newline46mondego><newline46mondego>USERNAME -- the username of the Access Server user for whom a configuration<newline46mondego>            file is sought.<newline46mondego><newline46mondego>PASSWORD -- the password of the Access Server user for whom a configuration<newline46mondego>            file is sought.<newline46mondego><newline46mondego>ACCESS_SERVER -- the domain name or public IP address of the Access Server.<newline46mondego><newline46mondego>CWS_PORT -- the port that the client web server is listening on.  Usually<newline46mondego>            443 but may be different based on the specific Access Server<newline46mondego>            configuration.  This is normally the same port that you would<newline46mondego>            use to connect to the Client Web Server UI.<newline46mondego><newline46mondego>METHOD:<newline46mondego><newline46mondego>  * GetUserlogin -- get an OpenVPN client configuration file<newline46mondego>    that will require a username and password to connect to the Access<newline46mondego>    Server.<newline46mondego><newline46mondego>  * GetAutologin -- get an OpenVPN configuration file that will<newline46mondego>    authenticate with the Access Server using only a client<newline46mondego>    certificate, with no username and password required.  This is ideal<newline46mondego>    for unattended clients such as routers, servers, or appliances.<newline46mondego>    Note that for Autologin configurations, the user (specified by<newline46mondego>    USERNAME) must have the Autologin permission enabled in the User<newline46mondego>    Permissions page of the Access Server Admin UI.<newline46mondego><newline46mondego>  * GetGeneric -- get a generic OpenVPN configuration file that is not<newline46mondego>    customized to a particular user.  This type of configuration is<newline46mondego>    used in External PKI mode, when client certificates/keys are<newline46mondego>    distributed out-of-band relative to the OpenVPN configuration<newline46mondego>    file.  Also note that when External PKI mode is enabled, both<newline46mondego>    GetUserlogin and GetAutologin methods return the generic<newline46mondego>    version configuration file.<newline46mondego><newline46mondego>On success, the web services API will return the OpenVPN client configuration<newline46mondego>file as content-type text/plain.<newline46mondego><newline46mondego>On error, an error message will be returned as content-type text/xml.  These<newline46mondego>are some of the common error returns:<newline46mondego><newline46mondego>Authentication failed (bad USERNAME or PASSWORD):<newline46mondego><newline46mondego><?xml version=<doubleQuotes46>1.0<doubleQuotes46> encoding=<doubleQuotes46>UTF-8<doubleQuotes46>?><newline46mondego><Error><newline46mondego>  <Type>Authorization Required</Type><newline46mondego>  <Synopsis>REST method failed</Synopsis><newline46mondego>  <Message>AUTH_FAILED: Server Agent XML method requires authentication (9007)</Message><newline46mondego></Error><newline46mondego><newline46mondego>User does not have permission to use an Autologin profile:<newline46mondego><newline46mondego><?xml version=<doubleQuotes46>1.0<doubleQuotes46> encoding=<doubleQuotes46>UTF-8<doubleQuotes46>?><newline46mondego><Error><newline46mondego>  <Type>Internal Server Error</Type><newline46mondego>  <Synopsis>REST method failed</Synopsis><newline46mondego>  <Message>NEED_AUTOLOGIN: User 'USERNAME' lacks autologin privilege (9000)</Message><newline46mondego></Error><newline46mondego><newline46mondego>Handling challenge/response authentication:<newline46mondego><newline46mondego>It is possible that the server may issue a challenge to the authentication<newline46mondego>request, for example suppose we have a user called 'test' and a password<newline46mondego>of 'mypass<doubleQuotes46>.  Get the OpenVPN config file:<newline46mondego><newline46mondego>  curl -u test:mypass https://ACCESS_SERVER/rest/GetUserlogin<newline46mondego><newline46mondego>But instead of immediately receiving the config file,<newline46mondego>we might get a challenge instead:<newline46mondego><newline46mondego><Error><newline46mondego>  <Type>Authorization Required</Type><newline46mondego>  <Synopsis>REST method failed</Synopsis><newline46mondego>  <Message>CRV1:R,E:miwN39AlF4k40Fd8X8r9j74FuOoaJKJM:dGVzdA==:Turing test: what is 1 x 3? (9007)</Message><newline46mondego></Error><newline46mondego><newline46mondego>a challenge is indicated by the <doubleQuotes46>CRV1:<doubleQuotes46> prefix in the <Message> (meaning<newline46mondego>Challenge Response protocol Version 1).  The CRV1 message is formatted<newline46mondego>as follows:<newline46mondego><newline46mondego>CRV1:<flags>:<state_id>:<username_base64>:<challenge_text><newline46mondego><newline46mondego>flags : a series of optional, comma-separated flags:<newline46mondego>  E : echo the response when the user types it<newline46mondego>  R : a response is required<newline46mondego><newline46mondego>state_id: an opaque string that should be returned to the server<newline46mondego>along with the response.<newline46mondego><newline46mondego>username_base64 : the username formatted as base64<newline46mondego><newline46mondego>challenge_text : the challenge text to be shown to the user<newline46mondego><newline46mondego>After showing the challenge_text and getting a response from the user<newline46mondego>(if R flag is specified), the client should resubmit the REST<newline46mondego>request with the USERNAME:PASSWORD field in the HTTP header set<newline46mondego>as follows:<newline46mondego><newline46mondego><username decoded from username_base64>:CRV1::<state_id>::<response_text><newline46mondego><newline46mondego>Where state_id is taken from the challenge request and response_text<newline46mondego>is what the user entered in response to the challenge_text.<newline46mondego>If the R flag is not present, response_text may be the empty<newline46mondego>string.<newline46mondego><newline46mondego>Using curl to respond to the turing test given in the example above:<newline46mondego><newline46mondego>  curl -u <doubleQuotes46>test:CRV1::miwN39AlF4k40Fd8X8r9j74FuOoaJKJM::3<doubleQuotes46> https://ACCESS_SERVER/rest/GetUserlogin<newline46mondego><newline46mondego>If the challenge response (In this case '3' in response to the turing<newline46mondego>test) is verified by the server, it will then return the configuration<newline46mondego>file per the GetUserlogin method.<newline46mondego>"
"4712splitHere46","20188290splitHere46","String oldstring = <doubleQuotes46>04112013<doubleQuotes46>;<newline46mondego>Date date = new SimpleDateFormat(<doubleQuotes46>ddMMyyyy<doubleQuotes46>).parse(oldstring);<newline46mondego>"
"4713splitHere46","20188290splitHere46","String newstring = new SimpleDateFormat(<doubleQuotes46>yyyy.MM.dd<doubleQuotes46>).format(date);<newline46mondego>System.out.println(newstring);<newline46mondego>"
"4714splitHere46","20188359splitHere46","Clob myClob = this.con.createClob();<newline46mondego>Writer clobWriter = myClob.setCharacterStream(1);<newline46mondego>"
"4715splitHere46","20188540splitHere46","int[] points = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0};<newline46mondego>"
"4716splitHere46","20188740splitHere46","jmap"
"4717splitHere46","20188740splitHere46","jmap -dump:format=b,file=heap.bin <pid><newline46mondego>"
"4718splitHere46","20188740splitHere46","Java 7"
"4719splitHere46","20188760splitHere46","ActionBarImplICS.java"
"4720splitHere46","20188760splitHere46","@Override<newline46mondego>public Context getThemedContext() {<newline46mondego>        return mActionBar.getThemedContext(); // here<newline46mondego>}<newline46mondego>"
"4721splitHere46","20188760splitHere46","android:minSdkVersion=<doubleQuotes46>11<doubleQuotes46>"
"4722splitHere46","20188760splitHere46","android:theme=<doubleQuotes46>@style/Theme.NoTitle<doubleQuotes46>"
"4723splitHere46","20188760splitHere46","android:windowIsFloating"
"4724splitHere46","20188760splitHere46","android:backgroundDimEnabled"
"4725splitHere46","20188760splitHere46","android:windowNoTitle"
"4726splitHere46","20188785splitHere46","Pattern pattern = Pattern.compile(<doubleQuotes46>.*<p rendition=\<doubleQuotes46>#indent-1\<doubleQuotes46>>\\d+\\.\\s*.*?</p><doubleQuotes46>,<newline46mondego>                Pattern.CASE_INSENSITIVE);<newline46mondego>/*<newline46mondego>instead of the following<newline46mondego>Pattern pattern = Pattern.compile(<doubleQuotes46><p rendition=\<doubleQuotes46>#indent-1\<doubleQuotes46>>\\d+\\.\\s*.*?</p><doubleQuotes46>,<newline46mondego>                Pattern.CASE_INSENSITIVE);<newline46mondego>*/<newline46mondego>"
"4727splitHere46","20188785splitHere46","<p rendition=\<doubleQuotes46>#indent-1\<doubleQuotes46>>\\d+\\.\\s*.*?</p>"
"4728splitHere46","20188785splitHere46","<p ...> ... </p>"
"4729splitHere46","20188785splitHere46","<p ...> ... </p>"
"4730splitHere46","20188785splitHere46",".*<p rendition=\<doubleQuotes46>#indent-1\<doubleQuotes46>>\\d+\\.\\s*.*?</p>"
"4731splitHere46","20188785splitHere46","Text <p ...> ... </p>"
"4732splitHere46","20188785splitHere46","Text <p ...> ... </p>"
"4733splitHere46","20188785splitHere46","<term xml:lang=<doubleQuotes46>la<doubleQuotes46>>text</term>"
"4734splitHere46","20188785splitHere46","<term xml:lang=<doubleQuotes46>la<doubleQuotes46> sortKey=<doubleQuotes46>text<doubleQuotes46>>text</term>"
"4735splitHere46","20188791splitHere46","final byte[] digestOfPassword = md.digest(Base64.decodeBase64(keyString.getBytes(<doubleQuotes46>UTF-8<doubleQuotes46>)));`<newline46mondego>"
"4736splitHere46","20188791splitHere46","final byte[] digestOfPassword = md.digest(keyString.getBytes(<doubleQuotes46>UTF-8<doubleQuotes46>));<newline46mondego>"
"4737splitHere46","20188791splitHere46","keyArray = hashmd5.ComputeHash(UTF8Encoding.UTF8.GetBytes(SecKey));<newline46mondego>"
"4738splitHere46","20189019splitHere46","OK"
"4739splitHere46","20189019splitHere46","<script type=<doubleQuotes46>text/javascript<doubleQuotes46> src=<doubleQuotes46>http://codeorigin.jquery.com/jquery-1.10.2.min.js<doubleQuotes46>><newline46mondego></script><newline46mondego><script type=<doubleQuotes46>text/javascript<doubleQuotes46>><newline46mondego>jQuery(function(){ jQuery.get(<doubleQuotes46>/path/to/your/dynamic/dummy/page<doubleQuotes46>)})<newline46mondego></script><newline46mondego>"
"4740splitHere46","20189038splitHere46","private class MyAdapter extends ArrayAdapter<String><newline46mondego>"
"4741splitHere46","20189038splitHere46","private class MyAdapter extends ArrayAdapter<detail><newline46mondego>"
"4742splitHere46","20189038splitHere46","super(context, resource, textViewResourceId);<newline46mondego>"
"4743splitHere46","20189038splitHere46","super(context, resource, textViewResourceId, detaillist);<newline46mondego>"
"4744splitHere46","20189042splitHere46","final String test = <doubleQuotes46>123absÃ¤Ã¶Ã¼#+a<doubleQuotes46>;<newline46mondego>final String result = test.replaceAll(<doubleQuotes46>[^\\p{IsDigit}\\p{IsAlphabetic}]<doubleQuotes46>, <doubleQuotes46><doubleQuotes46>);<newline46mondego>System.out.println(result);<newline46mondego>"
"4745splitHere46","20189042splitHere46","[^\\p{IsDigit}\\p{IsAlphabetic}]"
"4746splitHere46","20189042splitHere46","[]"
"4747splitHere46","20189042splitHere46","^"
"4748splitHere46","20189042splitHere46","\\p{IsDigit}"
"4749splitHere46","20189042splitHere46","\\p{IsAlphabetic}"
"4750splitHere46","20189042splitHere46","\\w"
"4751splitHere46","20189071splitHere46","character"
"4752splitHere46","20189071splitHere46","List<Character> dups = new ArrayList<Character>();<newline46mondego>        Iterator<String> itr = collection.iterator();<newline46mondego>        while(itr.hasNext()) {<newline46mondego>            String s = itr.next();<newline46mondego>            char c = s.charAt(0);<newline46mondego>            if(dups.contains(c)) {<newline46mondego>                itr.remove();<newline46mondego>                continue;<newline46mondego>            }<newline46mondego>            dups.add(c);<newline46mondego>        }<newline46mondego>        System.out.println(collection);<newline46mondego>"
"4753splitHere46","20189096splitHere46","boolean running = false;<newline46mondego>    while (running) {<newline46mondego>        // TODO do your stuff<newline46mondego>        try {<newline46mondego>            Thread.sleep(1000);<newline46mondego>        } catch (InterruptedException e) {<newline46mondego>            e.printStackTrace();<newline46mondego>        }<newline46mondego>    }<newline46mondego>"
"4754splitHere46","20189096splitHere46","running=true;<newline46mondego>"
"4755splitHere46","20189096splitHere46","running=false;<newline46mondego>"
"4756splitHere46","20189136splitHere46","write"
"4757splitHere46","20189136splitHere46","writeln"
"4758splitHere46","20189136splitHere46","write"
"4759splitHere46","20189136splitHere46","writeln"
"4760splitHere46","20189136splitHere46","ln"
"4761splitHere46","20189136splitHere46","write"
"4762splitHere46","20189136splitHere46","CRLF"
"4763splitHere46","20189136splitHere46","print"
"4764splitHere46","20189136splitHere46","write"
"4765splitHere46","20189137splitHere46","List<Integer> list = new ArrayList<Integer>(Arrays.asList(5, 10, 42));<newline46mondego>if (list.contains(10)) {<newline46mondego>    list.remove(10); // IOOBE<newline46mondego>}<newline46mondego>"
"4766splitHere46","20189137splitHere46","List#remove(Object)"
"4767splitHere46","20189137splitHere46","List#remove(int)"
"4768splitHere46","20189137splitHere46","List<Integer> list = new ArrayList<Integer>(Arrays.asList(5, 10, 42));<newline46mondego>if (list.contains(10)) {<newline46mondego>    list.remove((Integer) 10);<newline46mondego>}<newline46mondego>"
"4769splitHere46","20189137splitHere46","List#remove(Object)"
"4770splitHere46","20189196splitHere46","<%@ taglib prefix=<doubleQuotes46>c<doubleQuotes46> uri=<doubleQuotes46>http://java.sun.com/jsp/jstl/core<doubleQuotes46> %><newline46mondego><html><newline46mondego><body><newline46mondego><c:forEach var=<doubleQuotes46>i<doubleQuotes46> items=<doubleQuotes46>${A.keySet()}<doubleQuotes46>><newline46mondego>   Key <c:out value=<doubleQuotes46>${i}<doubleQuotes46>/><newline46mondego>   Value <c:out value=<doubleQuotes46>${A.get(i)}<doubleQuotes46>/><newline46mondego></c:forEach><newline46mondego></body><newline46mondego></html><newline46mondego>"
"4771splitHere46","20189289splitHere46","domain2"
"4772splitHere46","20189289splitHere46","domain2"
"4773splitHere46","20189289splitHere46","target"
"4774splitHere46","20189289splitHere46","--target"
"4775splitHere46","20189289splitHere46","create-blah"
"4776splitHere46","20189289splitHere46","server"
"4777splitHere46","20189289splitHere46","cluster"
"4778splitHere46","20189297splitHere46","new Thread(new Philosopher(monitor, i)).run();<newline46mondego>"
"4779splitHere46","20189297splitHere46","new Thread(new Philosopher(monitor, i)).start();<newline46mondego>"
"4780splitHere46","20189426splitHere46","AsyncDatastoreService ds = DatastoreServiceFactory.getAsyncDatastoreService();<newline46mondego><newline46mondego>// create query for your kind<newline46mondego>Query query = new Query(<doubleQuotes46>Kind<doubleQuotes46>);<newline46mondego><newline46mondego>// we don't need anything else than the key<newline46mondego>query.setKeysOnly();<newline46mondego><newline46mondego>// set the filter for date before now <newline46mondego>query.setFilter(<newline46mondego>    new FilterPredicate(<newline46mondego>        <doubleQuotes46>date<doubleQuotes46>, <newline46mondego>        FilterOperator.LESS_THAN_OR_EQUAL, <newline46mondego>        new Date()));<newline46mondego><newline46mondego>PreparedQuery pq = ds.prepare(query);<newline46mondego><newline46mondego>// asIterable is more efficient than asList<newline46mondego>for (Entity en : pq.asIterable()) {<newline46mondego>    // delete each entity<newline46mondego>    ds.delete(en.getKey());<newline46mondego>}<newline46mondego>"
"4781splitHere46","20189449splitHere46","web.xml"
"4782splitHere46","20189449splitHere46","<error-page><newline46mondego>    <error-code>404</error-code><newline46mondego>    <location>/error.jsp</location><newline46mondego></error-page><newline46mondego><error-page><newline46mondego>    <error-code>500</error-code><newline46mondego>    <location>/Error.jsp</location><newline46mondego></error-page><newline46mondego>"
"4783splitHere46","20189610splitHere46","public class mandag25nov<newline46mondego>{<newline46mondego>    public static void main(Strings[] args)<newline46mondego>    {<newline46mondego>        max(0, 1) //place the desired arguments in here<newline46mondego>    }<newline46mondego><newline46mondego>    public static int max(int a, int b)<newline46mondego>    {<newline46mondego>        if (a > b)<newline46mondego>        {<newline46mondego>            return a;<newline46mondego>        }<newline46mondego>        else<newline46mondego>        {<newline46mondego>            return b;<newline46mondego>        }<newline46mondego>    }<newline46mondego>}<newline46mondego>"
"4784splitHere46","20189622splitHere46","Iterator"
"4785splitHere46","20189622splitHere46","map traversal"
"4786splitHere46","20189622splitHere46","Map<String,Integer> sortedTree = new TreeMap<String,Integer>();<newline46mondego>            System.out.println(sortedTree.toString());<newline46mondego>            Iterator<Entry<String,Integer>> itr = sortedTree.entrySet().iterator();<newline46mondego>            while(itr.hasNext())<newline46mondego>            {<newline46mondego>                Entry<String,Integer> entry = itr.next();<newline46mondego>                if(entry.getKey().equals(<doubleQuotes46>A<doubleQuotes46>))<newline46mondego>                    itr.remove();<newline46mondego>            }<newline46mondego>"
"4787splitHere46","20189622splitHere46","map.remove"
"4788splitHere46","20189622splitHere46","ConcurrentModificationException"
"4789splitHere46","20189622splitHere46","Iterator"
"4790splitHere46","20189622splitHere46","TreeMap"
"4791splitHere46","20189661splitHere46","getClass().getResource(<doubleQuotes46>/resources/Door&Vase.jpg<doubleQuotes46>))"
"4792splitHere46","20189661splitHere46","new File(<doubleQuotes46>/resources/Door&Vase.jpg<doubleQuotes46>)"
"4793splitHere46","20189661splitHere46","getClass().getResource(<doubleQuotes46>/resources/Door&Vase.jpg<doubleQuotes46>))"
"4794splitHere46","20189661splitHere46","BufferedImage origImage = ImageIO.read(getClass().getResource(<doubleQuotes46>/resources/Door&Vase.jpg<doubleQuotes46>));<newline46mondego>"
"4795splitHere46","20189775splitHere46","String"
"4796splitHere46","20189820splitHere46","private void check() {<newline46mondego>    SigmaLog.d(<doubleQuotes46>first line\n<doubleQuotes46> + <doubleQuotes46>second line<doubleQuotes46>);<newline46mondego>    String receiveString = <doubleQuotes46><doubleQuotes46>;<newline46mondego>    String newString = <doubleQuotes46>first line<doubleQuotes46>;<newline46mondego>    int i = 0;<newline46mondego>    while (i < 2) {<newline46mondego>        receiveString += newString + <doubleQuotes46>\n<doubleQuotes46>;<newline46mondego>        newString = <doubleQuotes46>second line<doubleQuotes46>;<newline46mondego>        i++;<newline46mondego>    }<newline46mondego>    SigmaLog.d(receiveString);<newline46mondego>}<newline46mondego>"
"4797splitHere46","20189901splitHere46","The complex part in your json format is deserialize total record number<newline46mondego> in Wall class object<newline46mondego>"
"4798splitHere46","20189901splitHere46","GsonBuilder b = new GsonBuilder();<newline46mondego><newline46mondego>b.registerTypeAdapter(WallResponse.class,new JsonDeserializer<WallResponse>() {<newline46mondego><newline46mondego>@Override<newline46mondego>public WallResponse deserialize(JsonElement jsonElement,Type typeOf, JsonDeserializationContext context)  throws JsonParseException {<newline46mondego><newline46mondego>    final Gson g = new Gson();<newline46mondego><newline46mondego>    final JsonObject jsonObject = jsonElement.getAsJsonObject();<newline46mondego><newline46mondego>    final WallResponse wallResponse = new WallResponse(new Response());                                         <newline46mondego>    final Entry<String, JsonElement> entry = jsonObject.entrySet().iterator().next();<newline46mondego>    final JsonElement element = entry.getValue();<newline46mondego>    final JsonObject jsonObject2 = element.getAsJsonObject();<newline46mondego><newline46mondego>    final Entry<String, JsonElement> entry2 = jsonObject2.entrySet().iterator().next();<newline46mondego>    final JsonArray jsonArray = entry2.getValue().getAsJsonArray();<newline46mondego>    final Iterator<JsonElement> jsonElement2 = jsonArray.iterator();<newline46mondego>    int totalRecord=-1;<newline46mondego><newline46mondego>    while (jsonElement2.hasNext()) {<newline46mondego>        final JsonElement element2 = jsonElement2.next();<newline46mondego>        if (element2.isJsonPrimitive())<newline46mondego>            totalRecord=element2.getAsInt();<newline46mondego>        if (element2.isJsonObject()) {<newline46mondego>            final Wall wall = g.fromJson(element2, Wall.class);<newline46mondego>            wall.setTotalRecord(totalRecord);<newline46mondego>            List<Wall> walls= new ArrayList<>();<newline46mondego>            walls.add(wall);<newline46mondego>            wallResponse.getResponse().setWall(walls);<newline46mondego>        }<newline46mondego>    }<newline46mondego><newline46mondego><newline46mondego>    return wallResponse;<newline46mondego>  }<newline46mondego>});<newline46mondego><newline46mondego>WallResponse response = b.create().fromJson(reader, WallResponse.class);<newline46mondego>"
"4799splitHere46","20189901splitHere46","public class WallResponse {<newline46mondego><newline46mondego>    private Response response;<newline46mondego><newline46mondego>    public WallResponse() { super();{<newline46mondego><newline46mondego>    public WallResponse(Response response) {super();this.response = response;}<newline46mondego><newline46mondego>    public Response getResponse() { return this.response;}<newline46mondego><newline46mondego>    public void setResponse(Response response) { this.response = response;  }<newline46mondego><newline46mondego>    @Override<newline46mondego>    public String toString() { return <doubleQuotes46>WallResponse [response=<doubleQuotes46> + response + <doubleQuotes46>]<doubleQuotes46>; }<newline46mondego><newline46mondego>}<newline46mondego>"
"4800splitHere46","20189901splitHere46","public class Response {<newline46mondego><newline46mondego>    private List<Wall> wall;<newline46mondego><newline46mondego>    public List<Wall> getWall() { return this.wall; }<newline46mondego><newline46mondego>    public void setWall(List<Wall> wall) {  this.wall = wall; }<newline46mondego><newline46mondego>    @Override<newline46mondego>    public String toString() { return <doubleQuotes46>Response [wall=<doubleQuotes46> + wall + <doubleQuotes46>]<doubleQuotes46>; }<newline46mondego>}<newline46mondego>"
"4801splitHere46","20189901splitHere46","public class Wall {<newline46mondego><newline46mondego>    private int totalRecord;<newline46mondego>    private Media media;<newline46mondego>    private Attachment attachment;<newline46mondego>    private List<Attachments> attachments;<newline46mondego>    @SerializedName(value = <doubleQuotes46>post_source<doubleQuotes46>)<newline46mondego>    private PostSource postSource;<newline46mondego>    private Comments comments;<newline46mondego>    @SerializedName(value = <doubleQuotes46>likes<doubleQuotes46>)<newline46mondego>    private Like like;<newline46mondego>    @SerializedName(value = <doubleQuotes46>reposts<doubleQuotes46>)<newline46mondego>    private Repost repost;<newline46mondego><newline46mondego>    private String id;<newline46mondego>    private String from_id;<newline46mondego>    private String to_id;<newline46mondego>    private String date;<newline46mondego>    private String post_type;<newline46mondego>    private String text;<newline46mondego>    private String can_delete;<newline46mondego>    private String reply_count;<newline46mondego>    private String online;<newline46mondego><newline46mondego>        // setter getter here<newline46mondego>}<newline46mondego>"
"4802splitHere46","20189901splitHere46","public class Media {<newline46mondego><newline46mondego>    private String type;<newline46mondego>    private String owner_id;<newline46mondego>    private String item_id;<newline46mondego>    private String thumb_src;<newline46mondego>//setter getter here<newline46mondego>        @Override<newline46mondego>    public String toString() {<newline46mondego>        return <doubleQuotes46>Media [type=<doubleQuotes46> + type + <doubleQuotes46>, owner_id=<doubleQuotes46> + owner_id + <doubleQuotes46>, item_id=<doubleQuotes46><newline46mondego>                + item_id + <doubleQuotes46>, thumb_src=<doubleQuotes46> + thumb_src + <doubleQuotes46>]<doubleQuotes46>;<newline46mondego>    }<newline46mondego>}<newline46mondego>"
"4803splitHere46","20189901splitHere46","public class Attachment {<newline46mondego><newline46mondego>    private String type;<newline46mondego>    private Photo photo;<newline46mondego>// setter getter here<newline46mondego>    @Override<newline46mondego>    public String toString() {<newline46mondego>        return <doubleQuotes46>Attachment [type=<doubleQuotes46> + type + <doubleQuotes46>, photo=<doubleQuotes46> + photo + <doubleQuotes46>]<doubleQuotes46>;<newline46mondego>    }<newline46mondego>}<newline46mondego>"
"4804splitHere46","20189901splitHere46","public class Attachments {<newline46mondego><newline46mondego>    private String type;<newline46mondego>    private Photo photo;<newline46mondego>// getter setter here<newline46mondego>    @Override<newline46mondego>    public String toString() {<newline46mondego>        return <doubleQuotes46>Attachment [type=<doubleQuotes46> + type + <doubleQuotes46>, photo=<doubleQuotes46> + photo + <doubleQuotes46>]<doubleQuotes46>;<newline46mondego>    }<newline46mondego>}<newline46mondego>"
"4805splitHere46","20189901splitHere46","public class Photo {<newline46mondego><newline46mondego>    private String pid;<newline46mondego>    private String aid;<newline46mondego>    private String owner_id;<newline46mondego>    private String src;<newline46mondego>    private String src_big;<newline46mondego>    private String src_small;<newline46mondego>    private String src_xbig;<newline46mondego>    private String width;<newline46mondego>    private String height;<newline46mondego>    private String text;<newline46mondego>    private String created;<newline46mondego>    private String access_key;<newline46mondego>// setter getter here<newline46mondego>    @Override<newline46mondego>    public String toString() {<newline46mondego>        return <doubleQuotes46>Photo [pid=<doubleQuotes46> + pid + <doubleQuotes46>, aid=<doubleQuotes46> + aid + <doubleQuotes46>, owner_id=<doubleQuotes46> + owner_id<newline46mondego>                + <doubleQuotes46>, src=<doubleQuotes46> + src + <doubleQuotes46>, src_big=<doubleQuotes46> + src_big + <doubleQuotes46>, src_small=<doubleQuotes46><newline46mondego>                + src_small + <doubleQuotes46>, src_xbig=<doubleQuotes46> + src_xbig + <doubleQuotes46>, width=<doubleQuotes46> + width<newline46mondego>                + <doubleQuotes46>, height=<doubleQuotes46> + height + <doubleQuotes46>, text=<doubleQuotes46> + text + <doubleQuotes46>, created=<doubleQuotes46><newline46mondego>                + created + <doubleQuotes46>, access_key=<doubleQuotes46> + access_key + <doubleQuotes46>]<doubleQuotes46>;<newline46mondego>    }<newline46mondego><newline46mondego>}<newline46mondego>"
"4806splitHere46","20189901splitHere46","public class BaseModel {<newline46mondego><newline46mondego>    private String type;<newline46mondego>    private int count;<newline46mondego><newline46mondego>    public void setType(String type) {  this.type = type; }<newline46mondego>    public String getType() {return type;}<newline46mondego>    public int getCount() { return count;}<newline46mondego>    public void setCount(int count) {this.count = count;}<newline46mondego><newline46mondego>    @Override<newline46mondego>    public String toString() {return <doubleQuotes46>BaseModel [type=<doubleQuotes46> + type + <doubleQuotes46>, count=<doubleQuotes46> + count + <doubleQuotes46>]<doubleQuotes46>;}<newline46mondego><newline46mondego>}<newline46mondego>"
"4807splitHere46","20189901splitHere46","public class Comments extends BaseModel {<newline46mondego><newline46mondego>    private String can_post;<newline46mondego><newline46mondego>    @Override<newline46mondego>    public String toString() {<newline46mondego>        return <doubleQuotes46>Comments [count=<doubleQuotes46> + getCount() + <doubleQuotes46>, can_post=<doubleQuotes46> + can_post + <doubleQuotes46>]<doubleQuotes46>;<newline46mondego>    }<newline46mondego>}<newline46mondego>"
"4808splitHere46","20189901splitHere46","public class Like extends BaseModel {<newline46mondego><newline46mondego>    private int user_likes;<newline46mondego>    private String can_like;<newline46mondego>    private String can_publish;<newline46mondego><newline46mondego>    @Override<newline46mondego>    public String toString() {<newline46mondego>        return <doubleQuotes46>Like [user_likes=<doubleQuotes46> + user_likes + <doubleQuotes46>, can_like=<doubleQuotes46> + can_like<newline46mondego>                + <doubleQuotes46>, can_publish=<doubleQuotes46> + can_publish + <doubleQuotes46>, count =<doubleQuotes46> + getCount()<newline46mondego>                + <doubleQuotes46>]<doubleQuotes46>;<newline46mondego>    }<newline46mondego>}<newline46mondego>"
"4809splitHere46","20189901splitHere46","public class Repost extends BaseModel {<newline46mondego><newline46mondego>    private String user_reposted;<newline46mondego><newline46mondego>    @Override<newline46mondego>    public String toString() {<newline46mondego>        return <doubleQuotes46>Repost [user_reposted=<doubleQuotes46> + user_reposted + <doubleQuotes46>, count=<doubleQuotes46> + getCount() + <doubleQuotes46>]<doubleQuotes46>;<newline46mondego>    }<newline46mondego>}<newline46mondego>"
"4810splitHere46","20189901splitHere46","// wallResponse object.<newline46mondego>WallResponse [  // response object<newline46mondego>              response=Response <newline46mondego>              [wall=   // wall object<newline46mondego>                    [Wall [totalRecord=10, media=Media [type=photo, owner_id=21454540, item_id=314573297, thumb_src=http://cs313417.vk.me/v313417540/6cc9/Ze-8KY9tYfc.jpg], <newline46mondego>                           attachment=Attachment [type=photo, <newline46mondego>                                                   // photo object inside attachment    <newline46mondego>                                                  photo=Photo [pid=314573297, aid=-5, owner_id=21454540, src=http://cs313417.vk.me/v313417540/6cc9/Ze-8KY9tYfc.jpg, src_big=http://cs313417.vk.me/v313417540/6cca/ndKUage2w4I.jpg, src_small=http://cs313417.vk.me/v313417540/6cc8/A5m7zXxTAlQ.jpg, src_xbig=http://cs313417.vk.me/v313417540/6ccb/gaW8MQhFiFQ.jpg, width=760, height=606, text=, created=1384634699, access_key=bafb734c3dd74c5656]], <newline46mondego>                           attachments=[Attachment [type=photo,  <newline46mondego>                                                     // photo object inside attachements                           <newline46mondego>                                                    photo=Photo [pid=314573297, aid=-5, owner_id=21454540, src=http://cs313417.vk.me/v313417540/6cc9/Ze-8KY9tYfc.jpg, src_big=http://cs313417.vk.me/v313417540/6cca/ndKUage2w4I.jpg, src_small=http://cs313417.vk.me/v313417540/6cc8/A5m7zXxTAlQ.jpg, src_xbig=http://cs313417.vk.me/v313417540/6ccb/gaW8MQhFiFQ.jpg, width=760, height=606, text=, created=1384634699, access_key=bafb734c3dd74c5656]]], <newline46mondego>                            // postSource object                        <newline46mondego>                           postSource=PostSource [getType()=vk], <newline46mondego>                           // comments object<newline46mondego>                           comments=Comments [count=0, can_post=1], like=Like [user_likes=0, can_like=1, can_publish=0, count =1], <newline46mondego>                           //report object<newline46mondego>                           repost=Repost [user_reposted=0, count=0],<newline46mondego>                           // wall data...<newline46mondego>                           id=727, from_id=21454540, to_id=52158932, date=1384634706, post_type=post, text=, can_delete=1, reply_count=0, online=0]]]]<newline46mondego>"
"4811splitHere46","20189910splitHere46","ArrayList(Collection<? extends E> c)"
"4812splitHere46","20189910splitHere46","List<String> list = new ArrayList<>(Arrays.asList(<doubleQuotes46>Larry<doubleQuotes46>,<doubleQuotes46>Curly<doubleQuotes46>,<doubleQuotes46>Moe<doubleQuotes46>));<newline46mondego>"
"4813splitHere46","20189910splitHere46","list.add(<doubleQuotes46>Shemp<doubleQuotes46>);<newline46mondego>"
"4814splitHere46","20189922splitHere46","Process myProcess = Runtime.getRuntime().exec(command);"
"4815splitHere46","20189952splitHere46","import liquibase.database.Database;<newline46mondego>import liquibase.exception.CustomPreconditionErrorException;<newline46mondego>import liquibase.exception.CustomPreconditionFailedException;<newline46mondego>import liquibase.precondition.CustomPrecondition;<newline46mondego>import liquibase.snapshot.SnapshotGeneratorFactory;<newline46mondego>import liquibase.structure.core.ForeignKey;<newline46mondego>import liquibase.structure.core.Schema;<newline46mondego>import liquibase.structure.core.Table;<newline46mondego>import liquibase.util.StringUtils;<newline46mondego><newline46mondego>/**<newline46mondego> * {@link CustomPrecondition} implementation that checks if a column on a table<newline46mondego> * has a foreign key constraint for some other table.<newline46mondego> */<newline46mondego>public final class CheckForeignKey implements CustomPrecondition {<newline46mondego><newline46mondego>    /**<newline46mondego>     * Schema.<newline46mondego>     */<newline46mondego>    private String schemaName;<newline46mondego><newline46mondego>    /**<newline46mondego>     * Table name (that has the column).<newline46mondego>     */<newline46mondego>    private String tableName;<newline46mondego><newline46mondego>    /**<newline46mondego>     * Column (that might have the foreign key).<newline46mondego>     */<newline46mondego>    private String columnName;<newline46mondego><newline46mondego>    /**<newline46mondego>     * Referenced table of the foreign key.<newline46mondego>     */<newline46mondego>    private String foreignTableName;<newline46mondego><newline46mondego>    @Override<newline46mondego>    public void check(final Database db)<newline46mondego>            throws CustomPreconditionFailedException,<newline46mondego>            CustomPreconditionErrorException {<newline46mondego><newline46mondego>        try {<newline46mondego>            // The fkey we are looking for<newline46mondego>            final ForeignKey fKey = new ForeignKey();<newline46mondego><newline46mondego>            // Schema, base table<newline46mondego>            fKey.setForeignKeyTable(new Table());<newline46mondego>            if (StringUtils.trimToNull(getTableName()) != null) {<newline46mondego>                fKey.getForeignKeyTable().setName(getTableName());<newline46mondego>            }<newline46mondego><newline46mondego>            final Schema schema = new Schema();<newline46mondego>            schema.setName(getSchemaName());<newline46mondego>            fKey.getForeignKeyTable().setSchema(schema);<newline46mondego><newline46mondego>            // Base column<newline46mondego>            fKey.addForeignKeyColumn(getColumnName());<newline46mondego><newline46mondego>            // Referenced table<newline46mondego>            fKey.setPrimaryKeyTable(new Table());<newline46mondego>            if (StringUtils.trimToNull(getForeignTableName()) != null) {<newline46mondego>                fKey.getPrimaryKeyTable().setName(getForeignTableName());<newline46mondego>            }<newline46mondego><newline46mondego>            if (!SnapshotGeneratorFactory.getInstance().has(fKey, db)) {<newline46mondego>                throw new CustomPreconditionFailedException(<newline46mondego>                        String.format(<newline46mondego>                                <doubleQuotes46>Error fkey not found schema %s table %s column %s ftable %s<doubleQuotes46>,<newline46mondego>                                getSchemaName(), getTableName(),<newline46mondego>                                getColumnName(), getForeignTableName()));<newline46mondego>            }<newline46mondego>        } catch (final CustomPreconditionFailedException e) {<newline46mondego>            throw e;<newline46mondego>        } catch (final Exception e) {<newline46mondego>            throw new CustomPreconditionErrorException(<doubleQuotes46>Error<doubleQuotes46>, e);<newline46mondego>        }<newline46mondego>    }<newline46mondego><newline46mondego>    public String getSchemaName() {<newline46mondego>        return schemaName;<newline46mondego>    }<newline46mondego><newline46mondego>    public void setSchemaName(final String schemaName) {<newline46mondego>        this.schemaName = schemaName;<newline46mondego>    }<newline46mondego><newline46mondego>    public String getTableName() {<newline46mondego>        return tableName;<newline46mondego>    }<newline46mondego><newline46mondego>    public void setTableName(final String tableName) {<newline46mondego>        this.tableName = tableName;<newline46mondego>    }<newline46mondego><newline46mondego>    public String getColumnName() {<newline46mondego>        return columnName;<newline46mondego>    }<newline46mondego><newline46mondego>    public void setColumnName(final String columnName) {<newline46mondego>        this.columnName = columnName;<newline46mondego>    }<newline46mondego><newline46mondego>    public String getForeignTableName() {<newline46mondego>        return foreignTableName;<newline46mondego>    }<newline46mondego><newline46mondego>    public void setForeignTableName(final String foreignTableName) {<newline46mondego>        this.foreignTableName = foreignTableName;<newline46mondego>    }<newline46mondego>}<newline46mondego>"
"4816splitHere46","20190129splitHere46","position"
"4817splitHere46","20190129splitHere46","appInfoArrayList.remove(position);"
"4818splitHere46","20190172splitHere46","9/2 = 4 <newline46mondego>4*2 = 8<newline46mondego>9-8 = 1<newline46mondego>"
"4819splitHere46","20190172splitHere46","9/2 = 4.5<newline46mondego>4.5*2 = 9<newline46mondego>9-9 = 0<newline46mondego>"
"4820splitHere46","20190172splitHere46","System.out.println(9 - (((double)9 / 2) * 2));<newline46mondego>"
"4821splitHere46","20190277splitHere46","int"
"4822splitHere46","20190277splitHere46","int imageNumber = 1;<newline46mondego><newline46mondego> ...<newline46mondego><newline46mondego> if (imageNumber == 1)<newline46mondego> {<newline46mondego>  //change image to image 2<newline46mondego>  //also change imageNumber to 2<newline46mondego> }<newline46mondego> else if (imageNumber == 2)<newline46mondego> {<newline46mondego>  //change image to image 1<newline46mondego>  //also change imageNumber to 1<newline46mondego> }<newline46mondego>"
"4823splitHere46","20190425splitHere46","Returl null"
"4824splitHere46","20190425splitHere46","return obj.toString()"
"4825splitHere46","20190493splitHere46","echo | openssl s_client -connect yoursever:port 2>&1 | sed -ne '/-BEGIN CERTIFICATE-/,/-END CERTIFICATE-/p' > yourcert.pem<newline46mondego>"
"4826splitHere46","20190493splitHere46","keytool -keystore cacerts -importcert -alias youralias -file yourcert.pem<newline46mondego>"
"4827splitHere46","20190493splitHere46","keytool -list -keystore cacerts keytool"
"4828splitHere46","20190493splitHere46","-Djavax.net.ssl.trustStore=<doubleQuotes46>/Library/Java/Home/lib/security/cacerts<doubleQuotes46>"
"4829splitHere46","20190493splitHere46","-Djavax.net.ssl.trustStorePassword=<doubleQuotes46>changeit<doubleQuotes46>"
"4830splitHere46","20190493splitHere46","-Djava.security.debug=certpath"
"4831splitHere46","20190493splitHere46","-Djavax.net.debug=trustmanager"
"4832splitHere46","20190527splitHere46","log.debug(<doubleQuotes46>path=<doubleQuotes46>+myAppDir.getAbsolutePath());<newline46mondego>log.debug(<doubleQuotes46>url=<doubleQuotes46>+databaseFileLocation);<newline46mondego>"
"4833splitHere46","20190577splitHere46","private String readString()<newline46mondego>{<newline46mondego>    Scanner scanner = new Scanner(System.in);<newline46mondego>    return scanner.nextLine();<newline46mondego>} <newline46mondego>"
"4834splitHere46","20190662splitHere46","String str = new String(<doubleQuotes46>Hawaede<doubleQuotes46>);<newline46mondego>    int a=str.indexOf('d');<newline46mondego>    int b=str.indexOf('e');<newline46mondego>    if(a!=-1 && a<b) <newline46mondego>    {<newline46mondego>        return 'd'<newline46mondego>    }<newline46mondego>    else if(b!=-1) return 'e';<newline46mondego>"
"4835splitHere46","20190680splitHere46","ServletContext#setAttribute"
"4836splitHere46","20190680splitHere46","ServletContext#setAttribute"
"4837splitHere46","20190680splitHere46","ServletContext#getAttribute"
"4838splitHere46","20190680splitHere46","HashMap"
"4839splitHere46","20190680splitHere46","ConcurrentHashMap"
"4840splitHere46","20190680splitHere46","null"
"4841splitHere46","20190680splitHere46","ConcurrentMap<String, Object> shared = (...)servletContext.getAttribute(<doubleQuotes46>sharedData<doubleQuotes46>);<newline46mondego>if (shared == null) {<newline46mondego>    shared = new ConcurrentHashMap<>();<newline46mondego>    servletContext.setAttribute(<doubleQuotes46>sharedData<doubleQuotes46>, shared);<newline46mondego>}<newline46mondego>"
"4842splitHere46","20190680splitHere46","ServletContextListener"
"4843splitHere46","20190776splitHere46","NumOfSub"
"4844splitHere46","20190776splitHere46","Subjects"
"4845splitHere46","20190776splitHere46","Faculty"
"4846splitHere46","20190776splitHere46","FacultySubject<newline46mondego>----------------<newline46mondego>FacultyId  -- fk for Faculty.FacultyId<newline46mondego>SubjectId  -- fk for Subject.SubjectId<newline46mondego>"
"4847splitHere46","20190776splitHere46","SELECT Faculty.FacultyId, COUNT(*)<newline46mondego>FROM Faculty<newline46mondego>JOIN FacultySubject<newline46mondego>  ON FacultySubject.FacultyId = FacultyId.FacultyId<newline46mondego>WHERE Faculty.FacultyName = 'Really Cool Professor'<newline46mondego>GROUP BY Faculty.FacultyId<newline46mondego>"
"4848splitHere46","20190776splitHere46","SELECT Subject.SubjectId, Subject.SubjectName<newline46mondego>FROM Faculty<newline46mondego>JOIN FacultySubject<newline46mondego>  ON FacultySubject.FacultyId = FacultyId.FacultyId<newline46mondego>JOIN Subject<newline46mondego>  ON Subject.SubjectId = FacultySubject.SubjectId<newline46mondego>WHERE Faculty.FacultyName = 'Really Cool Professor'<newline46mondego>"
"4849splitHere46","20190776splitHere46","SubjectId    SubjectName<newline46mondego>=========================<newline46mondego>1            Tree Houses<newline46mondego>2            Annoying Younger Sisters<newline46mondego>3            Swimming Holes<newline46mondego>4            Fishing<newline46mondego>"
"4850splitHere46","20192010splitHere46","Matcher"
"4851splitHere46","20192010splitHere46","Matcher"
"4852splitHere46","20192010splitHere46","Matcher"
"4853splitHere46","20192010splitHere46","NOT_"
"4854splitHere46","20192010splitHere46","(EQUALS|NOT_EQUALS)"
"4855splitHere46","20192283splitHere46","LinkedBlockingDequeue"
"4856splitHere46","20192283splitHere46","offerFirst"
"4857splitHere46","20192283splitHere46","offerLast"
"4858splitHere46","20192394splitHere46","Java implementations"
"4859splitHere46","20192394splitHere46","Map<String, LinkedList<String>>"
"4860splitHere46","20192394splitHere46","Trie"
"4861splitHere46","20192428splitHere46","{}"
"4862splitHere46","20192473splitHere46","protected String doInBackground(String... args) {<newline46mondego>                List<NameValuePair> params = new ArrayList<NameValuePair>();<newline46mondego><newline46mondego>                // getting JSON string from URL<newline46mondego>                String json = jsonParser.makeHttpRequest(EventsActivity.URL_CATEGORIES, <doubleQuotes46>GET<doubleQuotes46>,<newline46mondego>                        params);<newline46mondego><newline46mondego>                try {               <newline46mondego>                    arrayAngels = new JSONArray(json).getJSONObject(0).getJSONArray(<doubleQuotes46>angelList<doubleQuotes46>);<newline46mondego><newline46mondego>                    if (arrayAngels != null) {<newline46mondego><newline46mondego>                        // looping through All albums<newline46mondego>                        for (int i = 0; i < arrayAngels.length(); i++) {<newline46mondego>                            JSONObject c = arrayAngels.getJSONObject(i);<newline46mondego><newline46mondego>                            // Storing each json item values in variable<newline46mondego>                            String name = c.getString(ANGEL_NAME);<newline46mondego><newline46mondego>                            // creating new HashMap<newline46mondego>                            HashMap<String, String> map = new HashMap<String, String>();<newline46mondego><newline46mondego>                            // adding each child node to HashMap key => value<newline46mondego>                            map.put(ANGEL_NAME, name);                          <newline46mondego><newline46mondego>                            // adding HashList to ArrayList<newline46mondego>                            angelsList.add(map);<newline46mondego>                        }<newline46mondego>                    }else{<newline46mondego>                        Log.d(<doubleQuotes46>Angels: <doubleQuotes46>, <doubleQuotes46>null<doubleQuotes46>);<newline46mondego>                    }<newline46mondego><newline46mondego>                } catch (JSONException e) {<newline46mondego>                    e.printStackTrace();<newline46mondego>                }<newline46mondego><newline46mondego>                return null;<newline46mondego>            }<newline46mondego>"
"4863splitHere46","20192567splitHere46","public static String getDomainName(String testUrl) throws URISyntaxException {<newline46mondego>    URI fullUri = new URI(testUrl);<newline46mondego>    String domainName = fullUri.getHost();<newline46mondego>    return domainName.startsWith(<doubleQuotes46>www.<doubleQuotes46>) ? domainName.substring(4) : domainName;<newline46mondego>}<newline46mondego>"
"4864splitHere46","20192606splitHere46","ContentSigner getCertSigner(PrivateKey issuerKey) {<newline46mondego>  AsymmetricKeyParameter akp = PrivateKeyFactory.createKey(issuerKey.getEncoded());<newline46mondego>  AlgorithmIdentifier sigAlgId = new DefaultSignatureAlgorithmIdentifierFinder().find(<doubleQuotes46>SHA1withRSA<doubleQuotes46>);<newline46mondego>  AlgorithmIdentifier digAlgId = new DefaultDigestAlgorithmIdentifierFinder().find(sigAlgId);<newline46mondego>  return new BcRSAContentSignerBuilder(sigAlgId, digAlgId).build(akp);<newline46mondego>}<newline46mondego><newline46mondego>X509CertificateHolder generateCertificate(X509Certificate issuerCert, PrivateKey issuerKey, X500Name subject, PublicKey subjectKey, Date notBefore, Date notAfter) {<newline46mondego>  X509Principal issuerDN = PrincipalUtil.getSubjectX509Principal(issuerCert);<newline46mondego>  SubjectPublicKeyInfo key = SubjectPublicKeyInfo.getInstance(subjectKey.getEncoded());<newline46mondego>  X509v3CertificateBuilder builder = new X509v3CertificateBuilder(issuerDN, BigInteger.valueOf(new SecureRandom().nextInt()), before, after, subject, key);<newline46mondego><newline46mondego>  // Add authority key identifier<newline46mondego>  builder.addExtension(X509Extension.authorityKeyIdentifier, false, JcaX509ExtensionUtils.createAuthorityKeyIdentifier(issuerCert));<newline46mondego><newline46mondego>  // Add subject key identifier<newline46mondego>  builder.addExtension(X509Extension.subjectKeyIdentifier, false, JcaX509ExtensionUtils.createSubjectKeyIdentifier(subjectKey));<newline46mondego><newline46mondego>  // Add basic constraints<newline46mondego>  builder.addExtension(X509Extension.basicConstraints, true, new BasicConstraints(false));<newline46mondego><newline46mondego>  // Add key usage<newline46mondego>  KeyUsage keyUsage = new KeyUsage(KeyUsage.keyEncipherment|KeyUsage.digitalSignature);<newline46mondego>  builder.addExtension(X509Extension.keyUsage, true, keyUsage);<newline46mondego><newline46mondego>  // Add extended key usage<newline46mondego>  ExtendedKeyUsage extKeyUsage = new ExtendedKeyUsage(KeyPurposeId.id_kp_serverAuth);<newline46mondego>  builder.addExtension(X509Extension.extendedKeyUsage, false, extKeyUsage);<newline46mondego><newline46mondego>  return builder.build(getCertSigner(issuerKey));<newline46mondego>}<newline46mondego>"
"4865splitHere46","20192647splitHere46","@Path"
"4866splitHere46","20192647splitHere46","String path = Hello.class.getAnnotation(Path.class).value;<newline46mondego>"
"4867splitHere46","20192647splitHere46","Method"
"4868splitHere46","20192647splitHere46","getHtml"
"4869splitHere46","20192647splitHere46","Method m = Hello.class.getMethod(<doubleQuotes46>getHtml<doubleQuotes46>, ..);<newline46mondego>String mime = m.getAnnotation(Produces.class).value;<newline46mondego>"
"4870splitHere46","20192757splitHere46","version"
"4871splitHere46","20192757splitHere46","compile"
"4872splitHere46","20192757splitHere46","provided"
"4873splitHere46","20192837splitHere46","rawQuery"
"4874splitHere46","20192837splitHere46","execSQL"
"4875splitHere46","20192837splitHere46","SQLiteDatabase db = this.getWritableDatabase();<newline46mondego> db.execSQL(<doubleQuotes46>ALTER TABLE <doubleQuotes46> + MNEMONICTABLE +<doubleQuotes46> ADD COLUMN <doubleQuotes46> + F_STATUS +<doubleQuotes46> int DEFAULT 0<doubleQuotes46>);<newline46mondego>"
"4876splitHere46","20193036splitHere46","indexOf()"
"4877splitHere46","20193036splitHere46","<doubleQuotes46>_<doubleQuotes46>"
"4878splitHere46","20193036splitHere46","indexOf"
"4879splitHere46","20193036splitHere46","col"
"4880splitHere46","20193036splitHere46","IndexOutOfBoundsException"
"4881splitHere46","20193036splitHere46","<doubleQuotes46>_<doubleQuotes46>"
"4882splitHere46","20193036splitHere46","row"
"4883splitHere46","20193036splitHere46","row"
"4884splitHere46","20193036splitHere46","public class StringFragementation<newline46mondego><newline46mondego>{<newline46mondego><newline46mondego>public static  String [][]  mymethod(String [] mystring)<newline46mondego>{<newline46mondego><newline46mondego>    int row = 0, col = 0;<newline46mondego><newline46mondego>    String[][] india = new String[2][9];<newline46mondego><newline46mondego>    String mystringno2[];<newline46mondego><newline46mondego>    mystringno2 = mystring;<newline46mondego><newline46mondego>    int i = 0;<newline46mondego><newline46mondego>    int j = 0;<newline46mondego><newline46mondego>    String x = <doubleQuotes46>_<doubleQuotes46>;<newline46mondego><newline46mondego>    int i1;<newline46mondego><newline46mondego>    String Nahda=<doubleQuotes46><doubleQuotes46>;<newline46mondego><newline46mondego>    int l;<newline46mondego><newline46mondego>    for( l=0;l<mystringno2.length;l++)<newline46mondego><newline46mondego>    {<newline46mondego><newline46mondego>        Nahda =  Nahda.concat(mystringno2[l]);<newline46mondego><newline46mondego>    }<newline46mondego><newline46mondego>    System.out.println( Nahda );<newline46mondego><newline46mondego>    i1 =0;<newline46mondego><newline46mondego>    // set i before the loop<newline46mondego>    i = Nahda.indexOf(x, i); <newline46mondego><newline46mondego>    while (j <Nahda.length()) {<newline46mondego><newline46mondego>        i1 = Nahda.indexOf(x, i + 1);<newline46mondego><newline46mondego>        if (i1 == -1) { <newline46mondego>            // No more <doubleQuotes46>_<doubleQuotes46> we're at the end but we still need to add the last country!<newline46mondego>            india[row][col] = Nahda.substring(i, Nahda.length() - 1);<newline46mondego>            break;<newline46mondego>        }<newline46mondego><newline46mondego>        india[row][col] = Nahda.substring(i + 1, i1);<newline46mondego><newline46mondego>        // set i to the <doubleQuotes46>_<doubleQuotes46> after the current country.<newline46mondego>        i = i1; <newline46mondego><newline46mondego>        System.out.print(<doubleQuotes46>Element  <doubleQuotes46> + row + <doubleQuotes46>  <doubleQuotes46> + col + <doubleQuotes46>   <doubleQuotes46> + india[row][col].toString()+<doubleQuotes46>\n<doubleQuotes46>);<newline46mondego><newline46mondego>        col++;<newline46mondego><newline46mondego>        if (col >= 9) { <newline46mondego>            // we're at the end of the first row, go to second row<newline46mondego>            col = 0;<newline46mondego>            row++;<newline46mondego>        }<newline46mondego><newline46mondego>    }<newline46mondego><newline46mondego>    return india;<newline46mondego><newline46mondego>}<newline46mondego><newline46mondego>public static void main(String[] args)<newline46mondego><newline46mondego>{<newline46mondego><newline46mondego>    String[] s ={<doubleQuotes46>_Netherlands_Iceland_Norway_Denmark_Usa_Brazil_Argentina_Colombuia_Bolivia<doubleQuotes46>,<doubleQuotes46>_Belgium_Romania_France_Germany_Switherland_Russia_Sweden_Italy_Austria<doubleQuotes46>};<newline46mondego><newline46mondego>    String [][] singapore = new String[s.length][9];<newline46mondego><newline46mondego>    singapore = mymethod(s);<newline46mondego><newline46mondego>    for(int col=0; col < 9;col++)<newline46mondego><newline46mondego>        for(int row=0;row<s.length;row++) <newline46mondego><newline46mondego>        {<newline46mondego>            System.out.print(  singapore[row][col]+<doubleQuotes46>\t<doubleQuotes46>   )   ;<newline46mondego><newline46mondego>        }<newline46mondego><newline46mondego>    System.out.println(<doubleQuotes46>\n<doubleQuotes46>);<newline46mondego><newline46mondego>}<newline46mondego><newline46mondego>}<newline46mondego>"
"4885splitHere46","20193175splitHere46","@POST<newline46mondego>@Consumes(MediaType.MULTIPART_FORM_DATA)<newline46mondego>public Response post(<newline46mondego>        @FormDataParam(<doubleQuotes46>part<doubleQuotes46>) String s,<newline46mondego>        @FormDataParam(<doubleQuotes46>part<doubleQuotes46>) FormDataContentDisposition d) {<newline46mondego><newline46mondego>    final Map<String, String> parameters = Maps.newHashMap();<newline46mondego>    parameters.put(<doubleQuotes46>boundary<doubleQuotes46>, <doubleQuotes46>myboundary<doubleQuotes46>);<newline46mondego><newline46mondego>    final MediaType mediaType = new MediaType(<doubleQuotes46>multipart<doubleQuotes46>, <doubleQuotes46>form-data<doubleQuotes46>, parameters);<newline46mondego><newline46mondego>    return Response<newline46mondego>            .ok(s + <doubleQuotes46>:<doubleQuotes46> + d.getFileName(), mediaType)<newline46mondego>            .build();<newline46mondego>}<newline46mondego>"
"4886splitHere46","20193176splitHere46","int i= 0;<newline46mondego>testArray[i++]= testArray[i++]+1;<newline46mondego>"
"4887splitHere46","20193176splitHere46","int i= 0;<newline46mondego>testArray[0]= testArray[1]+1;<newline46mondego>"
"4888splitHere46","20193176splitHere46","int i= 0;<newline46mondego>testArray[0]= 20 + 1;<newline46mondego>"
"4889splitHere46","20193176splitHere46","int"
"4890splitHere46","20193176splitHere46","=="
"4891splitHere46","20193257splitHere46","int i = 0;<newline46mondego>if (isAset()) i++;<newline46mondego>if (isBset()) i++;<newline46mondego>if (isCset()) i++;<newline46mondego>if (isDset()) i++;<newline46mondego><newline46mondego>if (i > 1)<newline46mondego>  ...<newline46mondego>"
"4892splitHere46","20193257splitHere46","static int trueCount(boolean... booleans) {<newline46mondego>  int sum = 0;<newline46mondego>  for (boolean b : booleans) {<newline46mondego>    if (b) {<newline46mondego>      sum++;<newline46mondego>    }<newline46mondego>  }<newline46mondego>  return sum;<newline46mondego>}<newline46mondego>"
"4893splitHere46","20193302splitHere46","<html xmls:wicket....><newline46mondego>    <wicket:panel><newline46mondego>        This is my panel <br /><newline46mondego>        <div wicket:id=<doubleQuotes46>subComponents<doubleQuotes46>></div><newline46mondego>    </wicket:panel><newline46mondego></html><newline46mondego><newline46mondego>class MyPanel extends Panel { <newline46mondego>    RepeatingView repeater;<newline46mondego>    MyPanel() {<newline46mondego>        add(repeater = new RepeatingView(<doubleQuotes46>subComponents<doubleQuotes46>);<newline46mondego>    }<newline46mondego><newline46mondego>    public void addSub(Component component) {<newline46mondego>        repeater.add(component);<newline46mondego>    }<newline46mondego>} <newline46mondego>"
"4894splitHere46","20193340splitHere46","ClassA"
"4895splitHere46","20193340splitHere46","ClassA"
"4896splitHere46","20193340splitHere46","DecimalFormat f = new DecimalFormat(<doubleQuotes46>#0.00<doubleQuotes46>);<newline46mondego>public ArrayList<String> listContent; <newline46mondego>DefaultListModel<String> ListModelNew = new DefaultListModel<String>();<newline46mondego><newline46mondego>public static void main(String args[]) {<newline46mondego>ClassA pMain = new ClassA();<newline46mondego>listContent = new ArrayList<String>(pMain.collCollect);<newline46mondego>for (int i = 0; i < listContent.size(); i++){<newline46mondego>        ListModelNew.add(i, listContent.get(i));<newline46mondego>    } <newline46mondego>}<newline46mondego>"
"4897splitHere46","20193340splitHere46","DecimalFormat f = new DecimalFormat(<doubleQuotes46>#0.00<doubleQuotes46>);<newline46mondego>DefaultListModel<String> ListModelNew = new DefaultListModel<String>();<newline46mondego><newline46mondego>public static void main(String args[]) {<newline46mondego>ClassA pMain = new ClassA();<newline46mondego>for (int i = 0; i < pMain.collCollect.size(); i++){<newline46mondego>        ListModelNew.add(i, pMain.collCollect.get(i));<newline46mondego>    } <newline46mondego>}<newline46mondego>"
"4898splitHere46","20193351splitHere46","Thread.sleep(1000);<newline46mondego>"
"4899splitHere46","20193351splitHere46","InterruptedException"
"4900splitHere46","20193351splitHere46","try<newline46mondego>{<newline46mondego>  Thread.sleep(1000);<newline46mondego>}<newline46mondego>catch(InterruptedException e)<newline46mondego>{<newline46mondego> System.out.println(e.getMessage());<newline46mondego>}<newline46mondego>"
"4901splitHere46","20193351splitHere46","EventQueue.invokeLater(new Runnable(){<newline46mondego>  public void run()<newline46mondego>  { <newline46mondego>    //make gui change here<newline46mondego>  }<newline46mondego> });<newline46mondego>"
"4902splitHere46","20193378splitHere46","type"
"4903splitHere46","20193378splitHere46","setType(obj)"
"4904splitHere46","20193378splitHere46","type"
"4905splitHere46","20193578splitHere46","-keep class * implements android.os.Parcelable {<newline46mondego>  public static final android.os.Parcelable$Creator *;<newline46mondego>}<newline46mondego>"
"4906splitHere46","20193618splitHere46","SELECT g FROM Game g//you have game<newline46mondego>"
"4907splitHere46","20193618splitHere46","game"
"4908splitHere46","20193618splitHere46","Game"
"4909splitHere46","20193618splitHere46","@Table"
"4910splitHere46","20193747splitHere46","private Object largerVariable;<newline46mondego>private Object LARGER_VARIABLE;<newline46mondego>"
"4911splitHere46","20193934splitHere46","event.getX()"
"4912splitHere46","20193934splitHere46","first"
"4913splitHere46","20193934splitHere46","getX(int pointerIndex)"
"4914splitHere46","20193934splitHere46","Log.d(<doubleQuotes46>CV<doubleQuotes46>, <doubleQuotes46>Point number <doubleQuotes46> +id+ <doubleQuotes46> is down at X value <doubleQuotes46> +event.getX(getIndex(event)));<newline46mondego>"
"4915splitHere46","20193983splitHere46","service.saveAll(list);<newline46mondego><newline46mondego>for (int i:list)<newline46mondego>{<newline46mondego>    Mockito.verify(daoMock).save(Matchers.eq(i));<newline46mondego>}<newline46mondego>"
"4916splitHere46","20194072splitHere46","static"
"4917splitHere46","20194072splitHere46","public"
"4918splitHere46","20194072splitHere46","protected"
"4919splitHere46","20194072splitHere46","private"
"4920splitHere46","20194072splitHere46","HelloWorldAnonymousClasses"
"4921splitHere46","20194072splitHere46","HelloWorldAnonymousClasses.HelloWorld"
"4922splitHere46","20194079splitHere46","glPushAttrib"
"4923splitHere46","20194079splitHere46","glPopAttrib"
"4924splitHere46","20194079splitHere46","glPushAttrib"
"4925splitHere46","20194079splitHere46","GL_COLOR_BUFFER_BIT"
"4926splitHere46","20194079splitHere46","GL_CURRENT_BIT"
"4927splitHere46","20194112splitHere46","ActorSystem system = ActorSystem.create(<doubleQuotes46>PiSystem<doubleQuotes46>);<newline46mondego>final ActorRef listener = system.actorOf(Props.create(Listener.class), <doubleQuotes46>listener<doubleQuotes46>);<newline46mondego>ActorRef master = system.actorOf(Props.create(Master.class, nrOfWorkers, nrOfMessages, nrOfElements, listener), <doubleQuotes46>master<doubleQuotes46>);<newline46mondego>master.tell(new Calculate(), ActorRef.noSender());<newline46mondego>"
"4928splitHere46","20194112splitHere46","Creator"
"4929splitHere46","20194112splitHere46","public class MasterCreator implements Creator<Master>{<newline46mondego>  private int nrOfWorkers, nrOfMessages, nrOfElements;<newline46mondego>  private ActorRef listener;<newline46mondego>  public MasterCreator(int nrOfWorkers, int nrOfMessages, int nrOfElements, ActorRef listener){<newline46mondego>    this.listener = listener;<newline46mondego>    this.nrOfElements = nrOfElements;<newline46mondego>    this.nrOfMessages = nrOfMessages;<newline46mondego>    this.nrOfWorkers = nrOfWorkers;<newline46mondego>  }<newline46mondego><newline46mondego>  public Master create(){<newline46mondego>    return new Master(nrOfWorkers, nrOfMessages, nrOfElements, listener);<newline46mondego>  }<newline46mondego>}<newline46mondego>"
"4930splitHere46","20194112splitHere46","ActorSystem system = ActorSystem.create(<doubleQuotes46>PiSystem<doubleQuotes46>);<newline46mondego>  final ActorRef listener = system.actorOf(Props.create(Listener.class), <doubleQuotes46>listener<doubleQuotes46>);<newline46mondego>  ActorRef master = system.actorOf(Props.create(new MasterCreator(nrOfWorkers, nrOfMessages, nrOfElements, listener)), <doubleQuotes46>master<doubleQuotes46>);<newline46mondego>  master.tell(new Calculate(), ActorRef.noSender());<newline46mondego>"
"4931splitHere46","20194226splitHere46","public Object execute(Command command) throws BusinessException {<newline46mondego><newline46mondego>        EntityManager em = Jpa.createEntityManager();<newline46mondego>        EntityTransaction trx = em.getTransaction();<newline46mondego>        trx.begin();<newline46mondego><newline46mondego>        Object ret = null;<newline46mondego>        try {<newline46mondego>            ret = command.execute(); // <-- This line throws RuntimeException<newline46mondego>            trx.commit();<newline46mondego>        } catch (BusinessException bex) {<newline46mondego>            if(trx.isActive())<newline46mondego>                trx.rollback();<newline46mondego>            throw bex;<newline46mondego>        } catch (RuntimeException tex) {<newline46mondego>            if(trx.isActive())<newline46mondego>                trx.rollback();<newline46mondego>            trx.rollback(); <--- **The problem was here.**<newline46mondego>            throw  tex;<newline46mondego>        } finally {<newline46mondego>            if(em.isOpen())<newline46mondego>                em.close();<newline46mondego>        }<newline46mondego><newline46mondego><newline46mondego><newline46mondego>        return ret;<newline46mondego>    }<newline46mondego>"
"4932splitHere46","20194235splitHere46",".{0,70}(\\S(-| |$)|$)<newline46mondego>"
"4933splitHere46","20194235splitHere46",".{0,70}"
"4934splitHere46","20194235splitHere46","'\S-'"
"4935splitHere46","20194235splitHere46","-"
"4936splitHere46","20194235splitHere46","'\S '"
"4937splitHere46","20194235splitHere46","'\S$'"
"4938splitHere46","20194235splitHere46","'$'"
"4939splitHere46","20194235splitHere46","-"
"4940splitHere46","20194235splitHere46","-"
"4941splitHere46","20194235splitHere46",".{0,70}"
"4942splitHere46","20194235splitHere46",".{0,10)"
"4943splitHere46","20194235splitHere46","<doubleQuotes46>Hello how are you? My name is Dr Bob Scott-Thomas<doubleQuotes46><newline46mondego>"
"4944splitHere46","20194235splitHere46","|<-10 limit here<newline46mondego><doubleQuotes46>Hello how <doubleQuotes46><newline46mondego><doubleQuotes46>are you? <doubleQuotes46>|<newline46mondego><doubleQuotes46>My name is <doubleQuotes46><newline46mondego><doubleQuotes46>Dr Bob <doubleQuotes46>  |<newline46mondego><doubleQuotes46>Scott-<doubleQuotes46>   |<newline46mondego><doubleQuotes46>Thomas<doubleQuotes46>   |<newline46mondego>"
"4945splitHere46","20194283splitHere46","MyClass"
"4946splitHere46","20194283splitHere46","JSONObject"
"4947splitHere46","20194283splitHere46","MyClass"
"4948splitHere46","20194283splitHere46","public static MyClass convertFromJSONToMyClass(JSONObject json) {<newline46mondego>    if (json == null) {<newline46mondego>        return null;<newline46mondego>    }<newline46mondego>    MyClass result = new MyClass();<newline46mondego>    result.username = (String) json.get(<doubleQuotes46>username<doubleQuotes46>);<newline46mondego>    result.name = (String) json.get(<doubleQuotes46>name<doubleQuotes46>);<newline46mondego>    return result;<newline46mondego>}<newline46mondego>"
"4949splitHere46","20194387splitHere46","<context-param><newline46mondego>    <!-- MyFaces and Mojarra don't agree on the default setting for actually <newline46mondego>        serializing state in the session as opposed to just storing a reference. <newline46mondego>        Mojarra's default is false, but can be switched to true. MyFaces' default <newline46mondego>        is true, and can be switched to false, which we thus do below. See http://jdevelopment.nl/jsf-22/#1127 --><newline46mondego>    <param-name>org.apache.myfaces.SERIALIZE_STATE_IN_SESSION</param-name><newline46mondego>    <param-value>false</param-value><newline46mondego></context-param><newline46mondego>"
"4950splitHere46","20194448splitHere46","public static String getNameReflection(Color colorParam) {<newline46mondego>        try {<newline46mondego>            //first read all fields in array<newline46mondego>            Field[] field = Class.forName(<doubleQuotes46>java.awt.Color<doubleQuotes46>).getDeclaredFields();<newline46mondego>            for (Field f : field) {<newline46mondego>                String colorName = f.getName();<newline46mondego>                Class<?> t = f.getType();<newline46mondego>                if (t == java.awt.Color.class) {<newline46mondego>                    Color defined = (Color) f.get(null);<newline46mondego>                    if (defined.equals(colorParam)) {<newline46mondego>                        System.out.println(colorName);<newline46mondego>                        return colorName.toUpperCase();<newline46mondego>                    }<newline46mondego>                }<newline46mondego>            }<newline46mondego>        } catch (Exception e) {<newline46mondego>            System.out.println(<doubleQuotes46>Error... <doubleQuotes46> + e.toString());<newline46mondego>        }<newline46mondego>        return <doubleQuotes46>NO_MATCH<doubleQuotes46>;<newline46mondego>    }<newline46mondego>"
"4951splitHere46","20194448splitHere46","Color colr = new Color(1.0f, 0.0f, 0.0f);<newline46mondego>        Main m = new Main();<newline46mondego>        m.getNameReflection(colr);<newline46mondego>    }<newline46mondego>"
"4952splitHere46","20194448splitHere46","<doubleQuotes46>java.awt.Color<doubleQuotes46>"
"4953splitHere46","20194448splitHere46","white<newline46mondego>WHITE<newline46mondego>lightGray<newline46mondego>LIGHT_GRAY<newline46mondego>gray<newline46mondego>GRAY<newline46mondego>darkGray<newline46mondego>DARK_GRAY<newline46mondego>black<newline46mondego>BLACK<newline46mondego>red<newline46mondego>RED<newline46mondego>pink<newline46mondego>PINK<newline46mondego>orange<newline46mondego>ORANGE<newline46mondego>yellow<newline46mondego>YELLOW<newline46mondego>green<newline46mondego>GREEN<newline46mondego>magenta<newline46mondego>MAGENTA<newline46mondego>cyan<newline46mondego>CYAN<newline46mondego>blue<newline46mondego>BLUE<newline46mondego>"
"4954splitHere46","20194481splitHere46","draughtsSS = new ServerSocket(50000);<newline46mondego>"
"4955splitHere46","20194481splitHere46","draughtsSS.accept()<newline46mondego>"
"4956splitHere46","20194521splitHere46","CascadeType.ALL"
"4957splitHere46","20194521splitHere46","cascade = {CascadeType.PERSIST, CascadeType.REFRESH, CascadeType.DELETE})<newline46mondego>"
"4958splitHere46","20194618splitHere46","public Item getItem()<newline46mondego>{<newline46mondego>    System.out.println(<doubleQuotes46>Trying to get item: <doubleQuotes46> + item.toString());<newline46mondego>    return item;<newline46mondego>}<newline46mondego>"
"4959splitHere46","20194663splitHere46","kCCAlgorithmAES128"
"4960splitHere46","20194663splitHere46","NSData *passwordData = [@<doubleQuotes46>[B@71e2b67c<doubleQuotes46> dataUsingEncoding:NSUTF8StringEncoding];<newline46mondego>"
"4961splitHere46","20194663splitHere46","kCCAlgorithmAES128"
"4962splitHere46","20194663splitHere46","kCCKeySizeAES256"
"4963splitHere46","20194682splitHere46","button.putClientProperty(<doubleQuotes46>panel<doubleQuotes46>, panel1);<newline46mondego>//and somewhere in code<newline46mondego>((JPanel)button.getClientProperty(<doubleQuotes46>panel<doubleQuotes46>)).setVisible(false);<newline46mondego>"
"4964splitHere46","20194854splitHere46","<param name=<doubleQuotes46>file<doubleQuotes46> value=<doubleQuotes46>demoApplication.log<doubleQuotes46> /><newline46mondego>"
"4965splitHere46","20194854splitHere46","System.out.println( System.getProperty(<doubleQuotes46>user.dir<doubleQuotes46>) + File.separator + <newline46mondego>                    <doubleQuotes46>demoApplication.log<doubleQuotes46> );<newline46mondego>"
"4966splitHere46","20194887splitHere46","ALTER TABLE table_name AUTO_INCREMENT=1;"
"4967splitHere46","20194887splitHere46","TRUNCATE TABLE table_name;"
"4968splitHere46","20194887splitHere46","Table DROP TABLE table_name;"
"4969splitHere46","20194887splitHere46","CREATE TABLE table_name { ... };"
"4970splitHere46","20194955splitHere46","<doubleQuotes46>One more<doubleQuotes46><newline46mondego><doubleQuotes46>Hi again<doubleQuotes46><newline46mondego><doubleQuotes46>how are you?<doubleQuotes46><newline46mondego><doubleQuotes46>hi<doubleQuotes46>    <newline46mondego>"
"4971splitHere46","20194955splitHere46","top"
"4972splitHere46","20194955splitHere46","pop"
"4973splitHere46","20194955splitHere46","4"
"4974splitHere46","20194955splitHere46","[0-3]"
"4975splitHere46","20194955splitHere46","top"
"4976splitHere46","20194955splitHere46","IndexOutOfBoundsException"
"4977splitHere46","20195019splitHere46","WizardNewFileCreationPage"
"4978splitHere46","20195019splitHere46","org.eclipse.ui.ide"
"4979splitHere46","20195019splitHere46","org.eclipse.ui.dialogs"
"4980splitHere46","20195074splitHere46","XMLStreamReader reader =<newline46mondego>    XMLInputFactory.newInstance().createXMLStreamReader(new<newline46mondego>        ByteArrayInputStream(document.getBytes()));<newline46mondego>"
"4981splitHere46","20195074splitHere46","getBytes"
"4982splitHere46","20195074splitHere46","<doubleQuotes46>utf-8<doubleQuotes46>"
"4983splitHere46","20195074splitHere46","StringReader"
"4984splitHere46","20195074splitHere46","XMLStreamReader reader = XMLInputFactory.newInstance()<newline46mondego>    .createXMLStreamReader(new StringReader(document));<newline46mondego>"
"4985splitHere46","20195119splitHere46","public Contact answer(InvocationOnMock invocation) throws Throwable {<newline46mondego>    Contact testContact = new Contact();<newline46mondego>    contact.setId(<doubleQuotes46>12345<doubleQuotes46>);<newline46mondego>    return testContact;<newline46mondego>  }<newline46mondego>"
"4986splitHere46","20195119splitHere46","contact"
"4987splitHere46","20195119splitHere46","testContact"
"4988splitHere46","20195168splitHere46","out.putNextEntry(new ZipEntry(files[i].getAbsolutePath()));<newline46mondego>"
"4989splitHere46","20195168splitHere46","out.putNextEntry(new ZipEntry(<doubleQuotes46>someDir/somefile<doubleQuotes46>));<newline46mondego>"
"4990splitHere46","20195168splitHere46","someDir/somefile"
"4991splitHere46","20195168splitHere46","E:someDir/someDir/somefile"
"4992splitHere46","20195277splitHere46","new A().funct();<newline46mondego>"
"4993splitHere46","20195277splitHere46","A a = new A();<newline46mondego>a.funct();<newline46mondego>"
"4994splitHere46","20195277splitHere46","a"
"4995splitHere46","20195313splitHere46","private static int page = 0;<newline46mondego>private static int pageSize = 10;<newline46mondego><newline46mondego>public static void main(String[] args)<newline46mondego>{<newline46mondego>    Display display = new Display();<newline46mondego>    Shell shell = new Shell(display);<newline46mondego>    shell.setLayout(new FillLayout());<newline46mondego><newline46mondego>    final Table table = new Table(shell, SWT.NONE);<newline46mondego>    table.addListener(SWT.MouseWheel, new Listener()<newline46mondego>    {<newline46mondego>        @Override<newline46mondego>        public void handleEvent(Event e)<newline46mondego>        {<newline46mondego>            if(e.count < 0)<newline46mondego>                addItems(table, page++);<newline46mondego>            else if(e.count > 0)<newline46mondego>                addItems(table, page--);<newline46mondego>        }<newline46mondego>    });<newline46mondego><newline46mondego>    addItems(table, page);<newline46mondego><newline46mondego>    shell.pack();<newline46mondego>    shell.open();<newline46mondego>    while (!shell.isDisposed())<newline46mondego>    {<newline46mondego>        if (!display.readAndDispatch())<newline46mondego>            display.sleep();<newline46mondego>    }<newline46mondego>    display.dispose();<newline46mondego>}<newline46mondego><newline46mondego>private static void addItems(Table table, int topIndex)<newline46mondego>{<newline46mondego>    table.removeAll();<newline46mondego>    for(int i = 0; i < pageSize; i++)<newline46mondego>    {<newline46mondego>        TableItem item = new TableItem(table, SWT.NONE);<newline46mondego>        item.setText(<doubleQuotes46>Item: <doubleQuotes46> + (i + (topIndex * pageSize)));<newline46mondego>    }<newline46mondego>}<newline46mondego>"
"4996splitHere46","20195313splitHere46","MouseWheel"
"4997splitHere46","20195313splitHere46","Table"
"4998splitHere46","20195313splitHere46","TableViewer"
"4999splitHere46","20195313splitHere46","Table"
"5000splitHere46","20195313splitHere46","Listener"
"5001splitHere46","20195313splitHere46","table.addListener(SWT.MouseWheel, new Listener()<newline46mondego>{<newline46mondego>    @Override<newline46mondego>    public void handleEvent(Event e)<newline46mondego>    {<newline46mondego>        if(e.count < 0)<newline46mondego>            viewer.setInput(ModelProvider.INSTANCE.getItems(page++));<newline46mondego>        else if(e.count > 0)<newline46mondego>            viewer.setInput(ModelProvider.INSTANCE.getItems(page--));<newline46mondego>    }<newline46mondego>});<newline46mondego>"
"5002splitHere46","20195350splitHere46","public static final Dialog getDialog(int id, String title) {<newline46mondego>   // do your stuff<newline46mondego>}<newline46mondego>"
"5003splitHere46","20195350splitHere46","public Dialog(Context context, String title, int data) {<newline46mondego>   super(context);<newline46mondego>   this.title = title;<newline46mondego>   this.data = data;<newline46mondego>}<newline46mondego>"
"5004splitHere46","20195350splitHere46","super(Context context);<newline46mondego>super(Context context, int theme);<newline46mondego>super(Context context, boolean cancelable, OnCancelListener listener);<newline46mondego>"
"5005splitHere46","20195583splitHere46","CommissionEditor"
"5006splitHere46","20195583splitHere46","public void setAcceptableValues(List<CommissionType> values) {<newline46mondego>    type.setAcceptableValues(values);<newline46mondego><newline46mondego>}<newline46mondego>"
"5007splitHere46","20195583splitHere46","driver.edit(entity);"
"5008splitHere46","20195583splitHere46","commissionEditor.setAcceptableValues(commission.getCommissionTypes());<newline46mondego>"
"5009splitHere46","20195583splitHere46","Editor"
"5010splitHere46","20195583splitHere46","setValue()"
"5011splitHere46","20195583splitHere46","setAcceptableValues"
"5012splitHere46","20195832splitHere46","*.xls"
"5013splitHere46","20195832splitHere46","<doubleQuotes46>sh -c libreoffice --blabla *.xls<doubleQuotes46><newline46mondego>"
"5014splitHere46","20195900splitHere46","// Setting this environment variable forces the OpenCL <newline46mondego>// source code to be recompiled every time.<newline46mondego>setenv(<doubleQuotes46>CUDA_CACHE_DISABLE<doubleQuotes46>, <doubleQuotes46>1<doubleQuotes46>, 1);<newline46mondego>"
"5015splitHere46","20195903splitHere46","FileInputStream inputStream1 = new FileInputStream(file);<newline46mondego>FileInputStream inputStream2 = new FileInputStream(file);<newline46mondego>[...]<newline46mondego>ps.setBinaryStream(2, (InputStream) inputStream1, file.length());<newline46mondego>ps.setBinaryStream(3, (InputStream) inputStream2, file.length());<newline46mondego>"
"5016splitHere46","20195964splitHere46","OceanShip"
"5017splitHere46","20195964splitHere46","MeansOfTransport"
"5018splitHere46","20195964splitHere46","Integer"
"5019splitHere46","20195964splitHere46","OceanShip"
"5020splitHere46","20195964splitHere46","@ManyToOne<newline46mondego>@Column(name = <doubleQuotes46>ocean_ship<doubleQuotes46>)<newline46mondego>public OceanShip oceanShip;<newline46mondego>"
"5021splitHere46","20195964splitHere46","@ManyToOne<newline46mondego>@JoinColumn(name = <doubleQuotes46>ocean_ship<doubleQuotes46>, referencedColumnName = <doubleQuotes46>means_of_transport_id<doubleQuotes46>)<newline46mondego>public OceanShip oceanCarrierShip;<newline46mondego>"
"5022splitHere46","20195969splitHere46","<rdf:RDF<newline46mondego>    xmlns:rdf=<doubleQuotes46>http://www.w3.org/1999/02/22-rdf-syntax-ns#<doubleQuotes46><newline46mondego>    xmlns:rdfs=<doubleQuotes46>http://www.w3.org/2000/01/rdf-schema#<doubleQuotes46>><newline46mondego>  <rdf:Property rdf:about=<doubleQuotes46>http://stackoverflow.com/q/20194409/1281433/PropertyName<doubleQuotes46>><newline46mondego>    <rdfs:range rdf:resource=<doubleQuotes46>http://www.w3.org/2000/01/rdf-schema#Literal<doubleQuotes46>/><newline46mondego>    <rdfs:domain rdf:resource=<doubleQuotes46>http://stackoverflow.com/q/20194409/1281433/ClassName<doubleQuotes46>/><newline46mondego>  </rdf:Property><newline46mondego></rdf:RDF><newline46mondego>"
"5023splitHere46","20195969splitHere46","import com.hp.hpl.jena.rdf.model.Model;<newline46mondego>import com.hp.hpl.jena.rdf.model.ModelFactory;<newline46mondego>import com.hp.hpl.jena.rdf.model.Property;<newline46mondego>import com.hp.hpl.jena.vocabulary.RDFS;<newline46mondego><newline46mondego>public class JenaPropertyExample {<newline46mondego>    public static void main(String[] args) {<newline46mondego>        final String NS = <doubleQuotes46>http://stackoverflow.com/q/20194409/1281433/<doubleQuotes46>;<newline46mondego>        final Model model = ModelFactory.createDefaultModel();<newline46mondego><newline46mondego>        final Property p = model.createResource( NS+<doubleQuotes46>PropertyName<doubleQuotes46>, RDF.Property ).as( Property.class );<newline46mondego>        p.addProperty( RDFS.domain, model.createResource( NS+<doubleQuotes46>ClassName<doubleQuotes46> ));<newline46mondego>        p.addProperty( RDFS.range, RDFS.Literal );<newline46mondego><newline46mondego>        model.write( System.out, <doubleQuotes46>RDF/XML-ABBREV<doubleQuotes46> );<newline46mondego>    }<newline46mondego>}<newline46mondego>"
"5024splitHere46","20195969splitHere46","Model"
"5025splitHere46","20195969splitHere46","createOntProperty"
"5026splitHere46","20195969splitHere46","p rdf:type rdf:Property"
"5027splitHere46","20195969splitHere46","addRange"
"5028splitHere46","20195969splitHere46","addDomain"
"5029splitHere46","20195969splitHere46","public static void main2( String[] args ) {<newline46mondego>    final String NS = <doubleQuotes46>http://stackoverflow.com/q/20194409/1281433/<doubleQuotes46>;<newline46mondego>    final OntModel model = ModelFactory.createOntologyModel( OntModelSpec.RDFS_MEM );<newline46mondego>    OntProperty p = model.createOntProperty( NS+<doubleQuotes46>PropertyName<doubleQuotes46> );<newline46mondego>    p.addDomain( model.getOntClass( NS+<doubleQuotes46>ClassName<doubleQuotes46> ));<newline46mondego>    p.addRange( RDFS.Literal );<newline46mondego>    model.write( System.out, <doubleQuotes46>RDF/XML-ABBREV<doubleQuotes46> );<newline46mondego>}<newline46mondego>"
"5030splitHere46","20196016splitHere46","USER"
"5031splitHere46","20196016splitHere46","string sql =<newline46mondego>   <doubleQuotes46>declare<newline46mondego>        user_param user%rowtype;<newline46mondego>    begin<newline46mondego>        -- Set necessary parameters <newline46mondego>        user_param.col0 := :p0In;<newline46mondego>        user_param.col1 := :p1In;<newline46mondego>        ...<newline46mondego><newline46mondego>        -- Call procedure.<newline46mondego>        cleansing(io_user => user_param);<newline46mondego><newline46mondego>        -- Read necessary output values into cursor.<newline46mondego>        open :pOut for select user_param.col99 as col99<newline46mondego>                              user_param.col98 as col98<newline46mondego>                              ...<newline46mondego>                       from dual;<newline46mondego>    end;<doubleQuotes46><newline46mondego>"
"5032splitHere46","20196016splitHere46","callableStatement.registerOutParameter(<doubleQuotes46>pOut<doubleQuotes46>, OracleTypes.CURSOR);<newline46mondego>...<newline46mondego>callableStatement.execute();<newline46mondego>...<newline46mondego>ResultSet rs = (ResultSet) callableStatement.getObject(<doubleQuotes46>pOut<doubleQuotes46>);<newline46mondego>// Read from result set.<newline46mondego>"
"5033splitHere46","20196024splitHere46","ViewResolver"
"5034splitHere46","20196024splitHere46","setupViewResolver()"
"5035splitHere46","20196024splitHere46","viewResolver()"
"5036splitHere46","20196039splitHere46","GET / POST"
"5037splitHere46","20196039splitHere46","Filter"
"5038splitHere46","20196039splitHere46","public void  doFilter(ServletRequest request, <newline46mondego>                      ServletResponse response, <newline46mondego>                      FilterChain chain)<newline46mondego>    ((HttpServletResponse) response).sendError(405,<newline46mondego>                                <doubleQuotes46>the error message<doubleQuotes46> );                          <newline46mondego>}<newline46mondego>"
"5039splitHere46","20196062splitHere46","ProdCalendar"
"5040splitHere46","20196062splitHere46","//First date<newline46mondego>Date d1 = dateFormat.parse(<doubleQuotes46>31-10-13<doubleQuotes46>);<newline46mondego><newline46mondego>//Second date<newline46mondego>Date d2 = dateFormat.parse(<doubleQuotes46>31-08-13<doubleQuotes46>);<newline46mondego><newline46mondego>//Interval:     <newline46mondego>long intervalMs = d1.getTime() - d2.getTime();<newline46mondego>long intervalDays = intervalMs/(1000*60*60*24);<newline46mondego>"
"5041splitHere46","20196062splitHere46","date22"
"5042splitHere46","20196062splitHere46","new date()"
"5043splitHere46","20196062splitHere46","cal"
"5044splitHere46","20196062splitHere46","Calendar cal = Calendar.getInstance();<newline46mondego>cal.setTime(row.getCell(0).getDateCellValue());<newline46mondego>"
"5045splitHere46","20196242splitHere46","OutputStream fileStream = new FileOutputStream(path);<newline46mondego>"
"5046splitHere46","20196242splitHere46","outputRoot.mkdirs();<newline46mondego>"
"5047splitHere46","20196291splitHere46","List<String> lines = Files.readAllLines(Paths.get(<doubleQuotes46>path to file<doubleQuotes46>), StandardCharsets.UTF_8);<newline46mondego>"
"5048splitHere46","20196311splitHere46","int year = 2010 + choice / 12;<newline46mondego>int month = 1 + choice % 12;<newline46mondego><newline46mondego>switch (month) {<newline46mondego>    case 1: System.out.println(<doubleQuotes46>January <doubleQuotes46> + year);<newline46mondego>            break;<newline46mondego>    case 2: System.out.println(<doubleQuotes46>February <doubleQuotes46> + year);<newline46mondego>            break;<newline46mondego><newline46mondego>    // so on<newline46mondego>}<newline46mondego>"
"5049splitHere46","20196311splitHere46","while (number == true && count < 48) {<newline46mondego><newline46mondego>}<newline46mondego>"
"5050splitHere46","20196311splitHere46","while (number && count < 48) {<newline46mondego><newline46mondego>}<newline46mondego>"
"5051splitHere46","20196311splitHere46","if (value == true)"
"5052splitHere46","20196311splitHere46","if (value == false)"
"5053splitHere46","20196311splitHere46","if (value)"
"5054splitHere46","20196311splitHere46","if (!value)"
"5055splitHere46","20196311splitHere46","number"
"5056splitHere46","20196311splitHere46","choice"
"5057splitHere46","20196311splitHere46","count"
"5058splitHere46","20196311splitHere46","count"
"5059splitHere46","20196311splitHere46","do {<newline46mondego>    System.out.println(<doubleQuotes46>Enter a sales for the month: <doubleQuotes46>);<newline46mondego>    getInt = keyboard.nextInt();<newline46mondego><newline46mondego>    if (getInt < 0) break;<newline46mondego><newline46mondego>    if (getInt > max) max = getInt;<newline46mondego>    if (getInt < min) min = getInt;<newline46mondego><newline46mondego>    sum += getInt;<newline46mondego>    count++;<newline46mondego><newline46mondego>} while (count < 48);<newline46mondego><newline46mondego>if (count == 0) {<newline46mondego>    System.out.println(<doubleQuotes46>No sales ever!<doubleQuotes46>);<newline46mondego>    return;<newline46mondego>}<newline46mondego><newline46mondego>int year = 2010 + count / 12;<newline46mondego>int month = 1 + count % 12;<newline46mondego>"
"5060splitHere46","20196384splitHere46","<param name=<doubleQuotes46>inputName<doubleQuotes46>>inputStream</param>"
"5061splitHere46","20196384splitHere46","inputStream=ZipInputStream"
"5062splitHere46","20196384splitHere46","inputStream = new ZipInputStream(new ByteArrayInputStream(baos.toByteArray()))<newline46mondego>"
"5063splitHere46","20196384splitHere46","inputStream = new ByteArrayInputStream(baos.toByteArray())<newline46mondego>"
"5064splitHere46","20196489splitHere46","this.getContentPanel().setLayout(null);<newline46mondego>"
"5065splitHere46","20196692splitHere46","client"
"5066splitHere46","20196692splitHere46","PublishClient client = new PublishClient();<newline46mondego>"
"5067splitHere46","20196692splitHere46","client = new PublishClient();<newline46mondego>"
"5068splitHere46","20196706splitHere46","public final class XssFilter implements Filter {<newline46mondego><newline46mondego>public void doFilter(ServletRequest request, ServletResponse response, FilterChain chain)<newline46mondego>  throws IOException, ServletException<newline46mondego>{<newline46mondego>    //check request...<newline46mondego>    if (ok) {<newline46mondego>       chain.doFilter(request, response);<newline46mondego>    } else {<newline46mondego>       // do something with the response<newline46mondego>    }<newline46mondego>}<newline46mondego>"
"5069splitHere46","20196712splitHere46","MECARD:N:Elliott Frisch;URL:frischcode.com;<newline46mondego>"
"5070splitHere46","20196712splitHere46","http:"
"5071splitHere46","20196712splitHere46","ftp:"
"5072splitHere46","20196712splitHere46","sms:"
"5073splitHere46","20196712splitHere46","mailto<doubleQuotes46>"
"5074splitHere46","20196742splitHere46","1111"
"5075splitHere46","20196742splitHere46","11111111"
"5076splitHere46","20196750splitHere46","toString()"
"5077splitHere46","20196750splitHere46","public String toString() {<newline46mondego>    return StaticLib.GSON.toJson(this);<newline46mondego>}<newline46mondego>"
"5078splitHere46","20196750splitHere46","StaticLib"
"5079splitHere46","20196753splitHere46","java.lang.Object"
"5080splitHere46","20196753splitHere46","getSuperclass"
"5081splitHere46","20196753splitHere46","null"
"5082splitHere46","20196753splitHere46","Class objSuper = Object.class.getSuperclass();<newline46mondego>"
"5083splitHere46","20196753splitHere46","objSuper"
"5084splitHere46","20196753splitHere46","null"
"5085splitHere46","20196753splitHere46","modelClass"
"5086splitHere46","20196753splitHere46","java.lang.Object"
"5087splitHere46","20196753splitHere46","java.lang.Object"
"5088splitHere46","20197054splitHere46","getName()"
"5089splitHere46","20197054splitHere46","getText()"
"5090splitHere46","20197054splitHere46",".trim()"
"5091splitHere46","20197054splitHere46","Assert.assertEquals(l.get(i).getName().trim(),rst.get(i).getText().trim());<newline46mondego>"
"5092splitHere46","20197054splitHere46","assertEquals()"
"5093splitHere46","20197054splitHere46","assertSame()"
"5094splitHere46","20197183splitHere46","hh"
"5095splitHere46","20197183splitHere46","HH"
"5096splitHere46","20197183splitHere46","public static final String DATE_DDMMMMYYHHMM_PATTERN = <doubleQuotes46>dd MMMM yyyy, HH:mm<doubleQuotes46>;<newline46mondego>"
"5097splitHere46","20197183splitHere46","h - Hour in am/pm (1-12)<newline46mondego>H - Hour in day (0-23)<newline46mondego>"
"5098splitHere46","20197232splitHere46","public static int compare(double d1, double d2)<newline46mondego>"
"5099splitHere46","20197340splitHere46","toggleGroup.getToggles()<newline46mondego>"
"5100splitHere46","20197340splitHere46","toggleGroup.getSelectedToggle()<newline46mondego>"
"5101splitHere46","20197340splitHere46","RadioButton temp = toggleGroup.getSelectedObject();"
"5102splitHere46","20197340splitHere46","RadioButton temp =(RadioButton) toggleGroup.getSelectedObject();"
"5103splitHere46","20197350splitHere46","<activity<newline46mondego>        android:name=<doubleQuotes46>com.example.sdz.Test<doubleQuotes46>><newline46mondego>        <intent-filter><newline46mondego>            <action android:name=<doubleQuotes46>android.intent.action.MAIN<doubleQuotes46> /><newline46mondego><newline46mondego>            <category android:name=<doubleQuotes46>android.intent.category.LAUNCHER<doubleQuotes46> /><newline46mondego>        </intent-filter><newline46mondego>    </activity><newline46mondego>"
"5104splitHere46","20197361splitHere46","BindAuthenticator"
"5105splitHere46","20197361splitHere46","ContextSource"
"5106splitHere46","20197361splitHere46","LdapAuthenticationProvider"
"5107splitHere46","20197361splitHere46","AuthenticationProvider"
"5108splitHere46","20197361splitHere46","public class DelegatingLdapAuthenticationProvider implements AuthenticationProvider {<newline46mondego>    // Inject these via the app context<newline46mondego>    private LdapAuthenticationProvider primary;<newline46mondego>    private LdapAuthenticationProvider secondary;<newline46mondego><newline46mondego>    public Authentication authenticate(Authentication a) {<newline46mondego>        if (a.getName().contains(<doubleQuotes46>secondDomain<doubleQuotes46>)) {<newline46mondego>            return secondary.authenticate(a);<newline46mondego>        } else {<newline46mondego>            return primary.authenticate(a);<newline46mondego>        }<newline46mondego>    }<newline46mondego>}<newline46mondego>"
"5109splitHere46","20197385splitHere46","imgButton1.setTag(<doubleQuotes46>1|1<doubleQuotes46>);<newline46mondego>imgButton2.setTag(<doubleQuotes46>1|2<doubleQuotes46>);<newline46mondego>...<newline46mondego>imgButton10.setTag(<doubleQuotes46>1|10<doubleQuotes46>);<newline46mondego>imgButton11.setTag(<doubleQuotes46>2|1<doubleQuotes46>);<newline46mondego>etc<newline46mondego>"
"5110splitHere46","20197385splitHere46","android:tag=<doubleQuotes46>1|1<doubleQuotes46><newline46mondego>"
"5111splitHere46","20197385splitHere46","String tag = (String) view.getTag();<newline46mondego>"
"5112splitHere46","20197439splitHere46","for (SemaineTpsRegDto semaine : ecranDto.getListeSemaine()) {<newline46mondego>  for (EntiteTpsRegDto entitesTps : semaine.getListeEntite()) {<newline46mondego>    for (AgentTpsRegDto agentsTpsReg : entitesTps.getListeAgent()) {<newline46mondego>      for (TempsRegJournalierDto tempsRegJour : agentsTpsReg.getListeTempsJournalier()) {<newline46mondego>        tempsRegJour.getHeureReelle().getDepassement();<newline46mondego>      }<newline46mondego>    }<newline46mondego>  }    <newline46mondego>}<newline46mondego>"
"5113splitHere46","20197613splitHere46","List[] results = allRows.toArray(new List[allRows.size()]);<newline46mondego>"
"5114splitHere46","20197674splitHere46","SELECT a FROM TheLeftTable a, TheRightTable b WHERE b.size = a.size<newline46mondego>"
"5115splitHere46","20197674splitHere46","size"
"5116splitHere46","20197768splitHere46","public Double[][] convertToDoubleArray(){<newline46mondego>    int i;<newline46mondego>    int j;<newline46mondego>    doubleArray = new Double[rows][columns];<newline46mondego><newline46mondego>    for(i = 0; i < rows; i++){ // iterate through row<newline46mondego>        for(j = 0; j < columns; j++){ // iterate through column<newline46mondego>            doubleArray[i][j] = Double.parseDouble(stringArray[i][j]); // cast each string value to <newline46mondego>        }<newline46mondego>    }<newline46mondego>    return doubleArray;<newline46mondego>}<newline46mondego>"
"5117splitHere46","20197768splitHere46","double"
"5118splitHere46","20197838splitHere46","scheduleAtFixedRate"
"5119splitHere46","20197838splitHere46","Runnable"
"5120splitHere46","20197838splitHere46","run"
"5121splitHere46","20197895splitHere46","CurrentPurchases.getModel()"
"5122splitHere46","20197895splitHere46","CurrentPurchases"
"5123splitHere46","20197895splitHere46","CurrentPurchases"
"5124splitHere46","20197895splitHere46","public JTable getCurrentPurchasesTable() {<newline46mondego>    return this.CurrentPurchases;<newline46mondego>}<newline46mondego>"
"5125splitHere46","20197895splitHere46","DefaultTableModel CurrPurchases= (DefaultTableModel) otherFormVariable.getCurrentPurchasesTable().getModel();<newline46mondego>"
"5126splitHere46","20197895splitHere46","otherFormVariable"
"5127splitHere46","20197895splitHere46","Form1"
"5128splitHere46","20197895splitHere46","Form2"
"5129splitHere46","20197895splitHere46","public class Form1 extends JDialog {<newline46mondego><newline46mondego>    JTable currentPurchases;<newline46mondego>    JButton addRecordButton;<newline46mondego><newline46mondego>    private initComponents() {<newline46mondego>        addRecordButton = new JButton(<doubleQuotes46>Add record<doubleQuotes46>);<newline46mondego>        addRecord.addActionListener(new ActionListener() {<newline46mondego>            @Override<newline46mondego>            public void actionPerformed(ActionEvent evt) {<newline46mondego>                Form2 form2 = new Form2();<newline46mondego>                form2.setForm1(this);<newline46mondego>                form2.setVisible(true);<newline46mondego>            }<newline46mondego>        };<newline46mondego>        ... // init the table and other components<newline46mondego>    }<newline46mondego><newline46mondego>    public JTable getCurrentPurchasesTable() {<newline46mondego>        return this.currentPurchases;<newline46mondego>    }<newline46mondego>}<newline46mondego><newline46mondego>public class Form2 extends JDialog {<newline46mondego><newline46mondego>    Form1 form1; // this variable will keep reference to a Form1 instance<newline46mondego>    JButton saveRecordButton;<newline46mondego><newline46mondego>    private void initComponents() {<newline46mondego>        saveRecordButton = new JButton(<doubleQuotes46>Save record<doubleQuotes46>);<newline46mondego>        saveRecordButton .addActionListener(new ActionListener() {<newline46mondego>            @Override<newline46mondego>            public void actionPerformed(ActionEvent evt) {<newline46mondego>                DefaultTableModel model = (DefaultTableModel) form1.getCurrentPurchasesTable().getModel();<newline46mondego>                // add new rocord to the model<newline46mondego>            }<newline46mondego>        };<newline46mondego>        ... // init the other components<newline46mondego><newline46mondego>    }<newline46mondego><newline46mondego>    public void setForm1(Form1 f) {<newline46mondego>        this.form1 = f;<newline46mondego>    }<newline46mondego><newline46mondego>}<newline46mondego>"
"5130splitHere46","20197895splitHere46","TableModel"
"5131splitHere46","20197895splitHere46","Form2"
"5132splitHere46","20197895splitHere46","public class Form1 extends JDialog {<newline46mondego><newline46mondego>    JTable currentPurchases;<newline46mondego>    JButton addRecordButton;<newline46mondego><newline46mondego>    private initComponents() {<newline46mondego>        addRecordButton = new JButton(<doubleQuotes46>Add record<doubleQuotes46>);<newline46mondego>        addRecord.addActionListener(new ActionListener() {<newline46mondego>            @Override<newline46mondego>            public void actionPerformed(ActionEvent evt) {<newline46mondego>                Form2 form2 = new Form2();<newline46mondego>                form2.setTableModel(currentPurchases.getModel());<newline46mondego>                form2.setVisible(true);<newline46mondego>            }<newline46mondego>        };<newline46mondego>        ... // init the table and other components<newline46mondego>    }<newline46mondego>}<newline46mondego><newline46mondego>public class Form2 extends JDialog {<newline46mondego><newline46mondego>    TableModel model; // this variable will keep reference to a TableModel instance<newline46mondego>    JButton saveRecordButton;<newline46mondego><newline46mondego>    private void initComponents() {<newline46mondego>        saveRecordButton = new JButton(<doubleQuotes46>Save record<doubleQuotes46>);<newline46mondego>        saveRecordButton .addActionListener(new ActionListener() {<newline46mondego>            @Override<newline46mondego>            public void actionPerformed(ActionEvent evt) {<newline46mondego>                // add new rocord to the model:<newline46mondego>                ((DefaultTableModel)model).addRow(...);                    <newline46mondego>            }<newline46mondego>        };<newline46mondego>        ... // init the other components<newline46mondego><newline46mondego>    }<newline46mondego><newline46mondego>    public void setTableModel(TableModel m) {<newline46mondego>        this.model = m;<newline46mondego>    }<newline46mondego><newline46mondego>}<newline46mondego>"
"5133splitHere46","20197897splitHere46","BaseClass.baseFunc2"
"5134splitHere46","20197897splitHere46","Collection< ? extends BaseInterface >"
"5135splitHere46","20197897splitHere46","T"
"5136splitHere46","20197897splitHere46","class BaseClass< T > {<newline46mondego>    void baseFunc1( T foo ) { }<newline46mondego>    void baseFunc2( Collection< ? extends T > foo ) {<newline46mondego>        // use foo in covariant fashion,<newline46mondego>        // e.g., foo.contains( t ) <newline46mondego>        // can accept Collection< T >, Collection< S > (where S <: T)<newline46mondego>    }<newline46mondego>    void baseFunc3( Collection< ? super T > foo ) {<newline46mondego>        // use foo in contravariant fashion,<newline46mondego>        // e.g., foo.add( t )<newline46mondego>        // can accept Collection< T >, Collection< S > (where S >: T)<newline46mondego>    }<newline46mondego>    void baseFunc4( Collection< T > foo ) {<newline46mondego>        // use foo in invariant fashion,<newline46mondego>        // e.g., foo.add( foo.iterator().next() )<newline46mondego>        // can only accept Collection< T ><newline46mondego>    }<newline46mondego>}<newline46mondego>"
"5137splitHere46","20197897splitHere46","class DerivedClass extends BaseClass< DerivedInterface > {<newline46mondego>    void derivedFunc1( DerivedInterface foo ) {<newline46mondego>        baseFunc1( foo );<newline46mondego>    }<newline46mondego>    void derivedFunc2( Collection< DerivedInterface > foo ) {<newline46mondego>        baseFunc2( foo );<newline46mondego>    }<newline46mondego>    void derivedFunc3( Collection< DerivedInterface > foo ) {<newline46mondego>        baseFunc3( foo );<newline46mondego>    }<newline46mondego>}<newline46mondego>"
"5138splitHere46","20197897splitHere46","T"
"5139splitHere46","20197897splitHere46","BaseClass"
"5140splitHere46","20197897splitHere46","class DerivedClass extends BaseClass {<newline46mondego>    void derivedFunc1( DerivedInterface foo ) {<newline46mondego>        baseFunc1( foo );<newline46mondego>    }<newline46mondego>    void derivedFunc2( Collection< DerivedInterface > foo ) {<newline46mondego>        baseFunc2( foo );<newline46mondego>    }<newline46mondego>    void derivedFunc3( Collection< BaseInterface > foo ) {<newline46mondego>        baseFunc3( foo );<newline46mondego>    }<newline46mondego>}<newline46mondego>"
"5141splitHere46","20197951splitHere46","show"
"5142splitHere46","20197951splitHere46","Child"
"5143splitHere46","20197951splitHere46","Base"
"5144splitHere46","20197951splitHere46","x"
"5145splitHere46","20197951splitHere46","Child"
"5146splitHere46","20197951splitHere46","x"
"5147splitHere46","20197951splitHere46","Child"
"5148splitHere46","20197951splitHere46","class Base<newline46mondego>{<newline46mondego>    int x = 1;<newline46mondego><newline46mondego>    void show() {        <newline46mondego>        System.out.println(x);<newline46mondego>    }<newline46mondego>}<newline46mondego><newline46mondego>class Child extends Base<newline46mondego>{<newline46mondego>    public static void main(String s[]) {<newline46mondego><newline46mondego>        Child c = new Child();<newline46mondego><newline46mondego>        c.show();<newline46mondego>        c.x = 2;<newline46mondego>        c.show();<newline46mondego>    }     <newline46mondego>}<newline46mondego>"
"5149splitHere46","20197951splitHere46","x"
"5150splitHere46","20197951splitHere46","main"
"5151splitHere46","20198033splitHere46","Color[] colors = ...;<newline46mondego>"
"5152splitHere46","20198033splitHere46","int randomIndex = random.nextInt(colors.length);<newline46mondego>"
"5153splitHere46","20198033splitHere46","Color color = colors[randomIndex];<newline46mondego>"
"5154splitHere46","20198033splitHere46","if"
"5155splitHere46","20198033splitHere46","Color[] colors ="
"5156splitHere46","20198033splitHere46","this.colors ="
"5157splitHere46","20198033splitHere46","Random random = new Random();"
"5158splitHere46","20198033splitHere46","paintComponent()"
"5159splitHere46","20198033splitHere46","paint()"
"5160splitHere46","20198337splitHere46","A() {<newline46mondego>      this(1);<newline46mondego>      System.out.println(<doubleQuotes46>1<doubleQuotes46>);<newline46mondego>}<newline46mondego>"
"5161splitHere46","20198337splitHere46","this(...)"
"5162splitHere46","20198337splitHere46","super(...)"
"5163splitHere46","20198432splitHere46","randomNumber"
"5164splitHere46","20198432splitHere46","generateNumber()"
"5165splitHere46","20198432splitHere46","playGame()"
"5166splitHere46","20198432splitHere46","playGame()"
"5167splitHere46","20198432splitHere46","public static int generateNumber()<newline46mondego>{<newline46mondego>//Generates number and assigns it to the variable <doubleQuotes46>randomNumber<doubleQuotes46><newline46mondego>System.out.println(<doubleQuotes46>Generating random number between 0 and 100. Please wait.<doubleQuotes46>);<newline46mondego>Random rand = new Random();<newline46mondego>int randomNumber = rand.nextInt(101) + 1;<newline46mondego>System.out.println(<doubleQuotes46>Random number generated<doubleQuotes46>);<newline46mondego>return randomNumber;<newline46mondego>}<newline46mondego><newline46mondego>public static void playGame(int randomNumber)<newline46mondego>{<newline46mondego>...<newline46mondego>}<newline46mondego><newline46mondego>public static void main(String[] args)<newline46mondego>{<newline46mondego>//Declares methods to be used during process<newline46mondego>int randomNumber = generateNumber();<newline46mondego>playGame(randomNumber);<newline46mondego>}<newline46mondego>"
"5168splitHere46","20198432splitHere46","if"
"5169splitHere46","20198432splitHere46","if (userGuess > randomNumber) {<newline46mondego>    // incorrect<newline46mondego>} else {<newline46mondego>    // incorrect<newline46mondego>}<newline46mondego><newline46mondego>if (userGuess == randomNumber) {<newline46mondego>    // correct<newline46mondego>}<newline46mondego>"
"5170splitHere46","20198432splitHere46","guess == random"
"5171splitHere46","20198432splitHere46","else"
"5172splitHere46","20198432splitHere46","if"
"5173splitHere46","20198432splitHere46","if"
"5174splitHere46","20198432splitHere46","if (userGuess == randomNumber) {<newline46mondego>    // correct<newline46mondego>} else if (userGuess > randomNumber) {<newline46mondego>    // incorrect<newline46mondego>} else {<newline46mondego>    // incorrect<newline46mondego>}<newline46mondego>"
"5175splitHere46","20198440splitHere46","help"
"5176splitHere46","20198478splitHere46","Map<Foo, Double>"
"5177splitHere46","20198478splitHere46","Map<Object, Object>"
"5178splitHere46","20198478splitHere46","bar"
"5179splitHere46","20198478splitHere46","Map<Foo, Double>"
"5180splitHere46","20198478splitHere46","Map"
"5181splitHere46","20198478splitHere46","bar"
"5182splitHere46","20198478splitHere46","Map bar"
"5183splitHere46","20198478splitHere46","get"
"5184splitHere46","20198478splitHere46","get"
"5185splitHere46","20198478splitHere46","Object"
"5186splitHere46","20198518splitHere46","getEventType()"
"5187splitHere46","20198518splitHere46","mappedBy"
"5188splitHere46","20198518splitHere46","eventType"
"5189splitHere46","20198518splitHere46","eventmasters"
"5190splitHere46","20198518splitHere46","eventMasters"
"5191splitHere46","20198521splitHere46","NetBeans"
"5192splitHere46","20198521splitHere46","package reversiplay;<newline46mondego>"
"5193splitHere46","20198573splitHere46","textArea.setLineWrap(true);<newline46mondego>textArea.setWrapStyleWord(true);<newline46mondego>"
"5194splitHere46","20198613splitHere46","File.mkdirs()"
"5195splitHere46","20198613splitHere46","String s = <doubleQuotes46>c:\\A Dir\\B Dir\\myFile.txt<doubleQuotes46>;<newline46mondego> File f = new File(s);<newline46mondego> if(!f.getParentFile().exists())         <newline46mondego>      f.getParentFile().mkdirs(); // create the parent directory <doubleQuotes46>c:\\A Dir\\B Dir\\<doubleQuotes46><newline46mondego>"
"5196splitHere46","20198707splitHere46","x"
"5197splitHere46","20198707splitHere46","y"
"5198splitHere46","20198707splitHere46","y"
"5199splitHere46","20198707splitHere46","y"
"5200splitHere46","20198707splitHere46","y.x"
"5201splitHere46","20198707splitHere46","Exercise4"
"5202splitHere46","20198707splitHere46","calculator"
"5203splitHere46","20198707splitHere46","Exercise4"
"5204splitHere46","20198707splitHere46","Exercise4.calculator"
"5205splitHere46","20198742splitHere46","Document doc = Jsoup.parse(myHtmlCode).get();<newline46mondego>Elements imgsWithoutHeighOrWidth = doc.select(<doubleQuotes46>img:not(img[height], img[width])<doubleQuotes46>);<newline46mondego>"
"5206splitHere46","20198742splitHere46","cssQuery"
"5207splitHere46","20198742splitHere46","select"
"5208splitHere46","20198742splitHere46","img               => any img tags<newline46mondego>   :not(          => not in <newline46mondego>      img[height] =>   any img tags with an `height` tag<newline46mondego>      ,           =>   or<newline46mondego>      img[width]  =>   any img tags with a `width` tag<newline46mondego>   )<newline46mondego>"
"5209splitHere46","20198774splitHere46","setVisible(true)"
"5210splitHere46","20198859splitHere46","private boolean canServe = false;<newline46mondego><newline46mondego>public void init(FilterConfig fc) {<newline46mondego>    if( filter activation condition ) {<newline46mondego>        canServe = true;<newline46mondego>    }<newline46mondego>}<newline46mondego><newline46mondego>public void doFilter(ServletRequest request, ServletResponse response, FilterChain chain) {<newline46mondego>    if( canServe ) {<newline46mondego>        // filter logic - filter is ON<newline46mondego>    }<newline46mondego>    else chain.doFilter(request, response); // filter is OFF<newline46mondego>}<newline46mondego>"
"5211splitHere46","20198862splitHere46","public interface BeanPostProcessor<newline46mondego>"
"5212splitHere46","20198952splitHere46","ArrayList"
"5213splitHere46","20198952splitHere46","O(1)"
"5214splitHere46","20198952splitHere46","LOAD"
"5215splitHere46","20198952splitHere46","0x1000"
"5216splitHere46","20198952splitHere46","0x08"
"5217splitHere46","20198952splitHere46","0x1000"
"5218splitHere46","20198952splitHere46","0x1008"
"5219splitHere46","20198952splitHere46","int a = myArray[9];<newline46mondego>"
"5220splitHere46","20198952splitHere46","myArray"
"5221splitHere46","20198952splitHere46","0x1000"
"5222splitHere46","20198952splitHere46","9"
"5223splitHere46","20198952splitHere46","0x1000 + 0x09<newline46mondego>"
"5224splitHere46","20198952splitHere46","0x1009<newline46mondego>"
"5225splitHere46","20198952splitHere46","i"
"5226splitHere46","20198952splitHere46","myArray[i]"
"5227splitHere46","20198952splitHere46","*ptrMyArray"
"5228splitHere46","20198952splitHere46","i"
"5229splitHere46","20198952splitHere46","*(ptrMyArray + i)"
"5230splitHere46","20198952splitHere46","LinkedList"
"5231splitHere46","20198952splitHere46","O(n)"
"5232splitHere46","20198952splitHere46","head"
"5233splitHere46","20198952splitHere46","tail"
"5234splitHere46","20198952splitHere46","next"
"5235splitHere46","20198952splitHere46","head"
"5236splitHere46","20198952splitHere46","BASE_ADDRESS + (ELEMENT_SIZE_IN_BYTES * INDEX)"
"5237splitHere46","20198952splitHere46","1"
"5238splitHere46","20198952splitHere46","BASE_ADDRESS + INDEX"
"5239splitHere46","20198959splitHere46","Locale convertCountryNameToIsoCode(String countryName)<newline46mondego>    for(Locale l : Locale.getAvailableLocales()) {<newline46mondego>        if (l.getDisplayCountry().equals(countryName)) {<newline46mondego>            return l;<newline46mondego>        }<newline46mondego>    }<newline46mondego>    return null;<newline46mondego>}<newline46mondego>"
"5240splitHere46","20199009splitHere46","Stack<Integer>"
"5241splitHere46","20199009splitHere46","Iterable<Integer>"
"5242splitHere46","20199009splitHere46","Stack<E>"
"5243splitHere46","20199009splitHere46","Iterable<E>"
"5244splitHere46","20199009splitHere46","Vector<E>"
"5245splitHere46","20199009splitHere46","AbstractList<E>"
"5246splitHere46","20199009splitHere46","AbstractCollection<E>"
"5247splitHere46","20199009splitHere46","Collection<E>"
"5248splitHere46","20199009splitHere46","Iterable<E>"
"5249splitHere46","20199079splitHere46","power()"
"5250splitHere46","20199079splitHere46","cube()"
"5251splitHere46","20199079splitHere46","hypercube()"
"5252splitHere46","20199079splitHere46","public class Power<newline46mondego>{<newline46mondego>   public static int square(int x)<newline46mondego>   {<newline46mondego>      return x*x;<newline46mondego>   }<newline46mondego><newline46mondego>   public static int cube(int x)<newline46mondego>   {<newline46mondego>      return x*x*x;<newline46mondego>   }<newline46mondego><newline46mondego>   public static int hypercube(int x)<newline46mondego>   {<newline46mondego>      return x*x*x*x;<newline46mondego>   }<newline46mondego><newline46mondego>   public static int power(int x, int n)<newline46mondego>   {<newline46mondego>      if (n==2)<newline46mondego>        return square(x);<newline46mondego><newline46mondego>      if(n==3)<newline46mondego>        return cube(x);<newline46mondego><newline46mondego>      if(n==4)<newline46mondego>        return hypercube(x);<newline46mondego><newline46mondego>      return x;<newline46mondego>   }<newline46mondego><newline46mondego>   public static void main(String[] args)<newline46mondego>   {<newline46mondego>      int x = 6;<newline46mondego><newline46mondego>      System.out.println( <doubleQuotes46>The square of <doubleQuotes46> + x + <doubleQuotes46> is: <doubleQuotes46> + power(x, 2));<newline46mondego><newline46mondego>      System.out.println( <doubleQuotes46>The cube of <doubleQuotes46> + x + <doubleQuotes46> is: <doubleQuotes46> + power(x, 3));<newline46mondego><newline46mondego>      System.out.println( <doubleQuotes46>The hypercube of <doubleQuotes46> + x + <doubleQuotes46> is: <doubleQuotes46> + power(x, 4));<newline46mondego>   }<newline46mondego>}<newline46mondego>"
"5253splitHere46","20199079splitHere46","square()"
"5254splitHere46","20199079splitHere46","cube"
"5255splitHere46","20199079splitHere46","hypercube"
"5256splitHere46","20199217splitHere46","base 10 amount: 154<newline46mondego>R G B<newline46mondego>1 5 4<newline46mondego>"
"5257splitHere46","20199217splitHere46","base 10 amount: 48<newline46mondego>R G B<newline46mondego>1 5 4 (in base 6)<newline46mondego>"
"5258splitHere46","20199324splitHere46","// in your field declarations<newline46mondego>List<JButton> buttonList = new ArrayList<JButton>();<newline46mondego><newline46mondego>// elsewhere in your program<newline46mondego>for (int i = 0; i < numberOfButtonsToAdd; i++) { <newline46mondego>  JButton button = new JButton();<newline46mondego>  buttonList.add(button);<newline46mondego>  somePanel.add(button); <newline46mondego>} <newline46mondego>"
"5259splitHere46","20199324splitHere46","buttonList.get(someIndex)"
"5260splitHere46","20199324splitHere46","public void actionPerformed(ActionEvent e) {<newline46mondego>   AbstractButton myButton = (AbstractButton) e.getSource();<newline46mondego>   // now you can use myButton<newline46mondego>}<newline46mondego>"
"5261splitHere46","20199324splitHere46","for (int i = 0; i < numberOfButtonsToAdd; i++) { <newline46mondego>  JButton button = new JButton();<newline46mondego>  button.setEnabled(false);<newline46mondego>  buttonList.add(button);<newline46mondego>  somePanel.add(button); <newline46mondego>}<newline46mondego>"
"5262splitHere46","20199324splitHere46","ArrayList<JButton>"
"5263splitHere46","20199324splitHere46","import java.awt.BorderLayout;<newline46mondego>import java.awt.GridLayout;<newline46mondego>import java.awt.event.ActionEvent;<newline46mondego>import java.util.ArrayList;<newline46mondego>import java.util.List;<newline46mondego><newline46mondego>import javax.swing.*;<newline46mondego><newline46mondego>public class ButtonLists extends JPanel {<newline46mondego>   private static final int ROWS = 6;<newline46mondego>   private static final int COLS = 6;<newline46mondego>   private List<JButton> allButtons = new ArrayList<JButton>();<newline46mondego>   private List<JButton> evenButtons = new ArrayList<JButton>();<newline46mondego><newline46mondego>   public ButtonLists() {<newline46mondego>      JPanel gridPanel = new JPanel(new GridLayout(ROWS, COLS));<newline46mondego>      for (int i = 0; i < ROWS; i++) {<newline46mondego>         for (int j = 0; j < COLS; j++) {<newline46mondego>            int buttonInt = i * COLS + j;<newline46mondego>            String buttonString = String.valueOf(buttonInt);<newline46mondego>            JButton button = new JButton(buttonString);<newline46mondego>            button.setEnabled(false);<newline46mondego>            gridPanel.add(button);<newline46mondego>            allButtons.add(button);<newline46mondego>            if (buttonInt % 2 == 0) {<newline46mondego>               evenButtons.add(button);<newline46mondego>            }<newline46mondego>         }<newline46mondego>      }<newline46mondego><newline46mondego>      JPanel bottomPanel = new JPanel();<newline46mondego>      bottomPanel.add(new JButton(new AbstractAction(<doubleQuotes46>Activate All<doubleQuotes46>) {<newline46mondego><newline46mondego>         @Override<newline46mondego>         public void actionPerformed(ActionEvent e) {<newline46mondego>            for (JButton btn : allButtons) {<newline46mondego>               btn.setEnabled(true);<newline46mondego>            }<newline46mondego>         }<newline46mondego>      }));<newline46mondego>      bottomPanel.add(new JButton(new AbstractAction(<doubleQuotes46>Activate Even<doubleQuotes46>) {<newline46mondego><newline46mondego>         @Override<newline46mondego>         public void actionPerformed(ActionEvent e) {<newline46mondego>            for (JButton btn : allButtons) {<newline46mondego>               btn.setEnabled(false);<newline46mondego>            }<newline46mondego>            for (JButton btn : evenButtons) {<newline46mondego>               btn.setEnabled(true);<newline46mondego>            }<newline46mondego>         }<newline46mondego>      }));<newline46mondego>      bottomPanel.add(new JButton(new AbstractAction(<doubleQuotes46>Activate Odd<doubleQuotes46>) {<newline46mondego><newline46mondego>         @Override<newline46mondego>         public void actionPerformed(ActionEvent e) {<newline46mondego>            for (JButton btn : allButtons) {<newline46mondego>               btn.setEnabled(true);<newline46mondego>            }<newline46mondego>            for (JButton btn : evenButtons) {<newline46mondego>               btn.setEnabled(false);<newline46mondego>            }<newline46mondego>         }<newline46mondego>      }));<newline46mondego><newline46mondego>      setLayout(new BorderLayout());<newline46mondego>      add(gridPanel, BorderLayout.CENTER);<newline46mondego>      add(bottomPanel, BorderLayout.PAGE_END);<newline46mondego>   }<newline46mondego><newline46mondego>   private static void createAndShowGui() {<newline46mondego>      JFrame frame = new JFrame(<doubleQuotes46>ButtonLists<doubleQuotes46>);<newline46mondego>      frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);<newline46mondego>      frame.getContentPane().add(new ButtonLists());<newline46mondego>      frame.pack();<newline46mondego>      frame.setLocationRelativeTo(null);<newline46mondego>      frame.setVisible(true);<newline46mondego>   }<newline46mondego><newline46mondego>   public static void main(String[] args) {<newline46mondego>      SwingUtilities.invokeLater(new Runnable() {<newline46mondego>         public void run() {<newline46mondego>            createAndShowGui();<newline46mondego>         }<newline46mondego>      });<newline46mondego>   }<newline46mondego>}<newline46mondego>"
"5264splitHere46","20199438splitHere46","private static PreparedStatement prepareStatement(<newline46mondego>    Connection conn, java.util.Date date)<newline46mondego>    throws SQLException {<newline46mondego>  final String sql = <doubleQuotes46>SELECT ItemName, SUM(Unit) AS SoldUnit, <doubleQuotes46><newline46mondego>      + <doubleQuotes46>SUM(Total) AS TotalAmount, <doubleQuotes46><newline46mondego>      + <doubleQuotes46>SUM(Profit) AS TotalProfit <doubleQuotes46><newline46mondego>      + <doubleQuotes46>FROM InvoiceTable WHERE DateSO=? GROUP BY ItemName<doubleQuotes46>;<newline46mondego>  PreparedStatement ps = conn.prepareStatement(sql);<newline46mondego>  ps.setDate(1, new java.sql.Date(date.getTime()));<newline46mondego>  return ps;<newline46mondego>}<newline46mondego>"
"5265splitHere46","20199544splitHere46","<includeBaseDirectory>false</includeBaseDirectory><newline46mondego>"
"5266splitHere46","20199567splitHere46","String text = <doubleQuotes46>test On blah more blah wrote:\n<doubleQuotes46> <newline46mondego>                + <doubleQuotes46>blah blah blah\nblah blah\nblah\n<doubleQuotes46>;<newline46mondego>        StringWriter sw = new StringWriter();<newline46mondego>        PrintWriter pw = new PrintWriter(sw);<newline46mondego>        Pattern PATTERN = Pattern.compile(<doubleQuotes46>^(.*?)\\s*On\\s(.+)wrote:$<doubleQuotes46>, <newline46mondego>                Pattern.MULTILINE);<newline46mondego>        Matcher m = PATTERN.matcher(text);<newline46mondego>        if (m.find()) {<newline46mondego>            pw.println(m.group(1));<newline46mondego>        }<newline46mondego>        pw.close();<newline46mondego>        System.out.println(sw);<newline46mondego>"
"5267splitHere46","20199631splitHere46","ObjectOutputStream"
"5268splitHere46","20199631splitHere46","ObjectInputStream"
"5269splitHere46","20199631splitHere46","try {<newline46mondego>    ...<newline46mondego>    final Map<A, B> yourMap = ...; // Map to send<newline46mondego>    final OutputStream yourOutputStream = ...; // OutputStream where to send the map in case of network you get it from the Socket instance.<newline46mondego>    final ObjectOutputStream mapOutputStream = new ObjectOutputStream(yourOutputStream);<newline46mondego>    mapOutputStream.writeObject(yourMap);<newline46mondego>    ...<newline46mondego>} finally {<newline46mondego>    outputStream.close();<newline46mondego>}<newline46mondego>"
"5270splitHere46","20199631splitHere46","try {<newline46mondego>    ...<newline46mondego>    final InputStream yourInputStream = ...; // InputStream from where to receive the map, in case of network you get it from the Socket instance.<newline46mondego>    final ObjectInputStream mapInputStream = new ObjectInputStream(yourInputStream);<newline46mondego>    final Map<A, B> yourMap = (Map) mapInputStream.readObject();<newline46mondego>    ...<newline46mondego>} finally {<newline46mondego>    mapInputStream.close();<newline46mondego>}<newline46mondego>"
"5271splitHere46","20199655splitHere46","ISelectionListener"
"5272splitHere46","20199655splitHere46","ISelectionService"
"5273splitHere46","20199664splitHere46","DisplayMetrics metrics = context.getResources().getDisplayMetrics();<newline46mondego>int width = metrics.widthPixels;<newline46mondego>int height = metrics.heightPixels;<newline46mondego>"
"5274splitHere46","20199664splitHere46","float density  = metrics.density;<newline46mondego>"
"5275splitHere46","20199666splitHere46","System.out"
"5276splitHere46","20199666splitHere46","final class Test {<newline46mondego><newline46mondego>  public static void main(String[] argv) throws InterruptedException {<newline46mondego>    AtomicInteger shared = new AtomicInteger();<newline46mondego>    Thread a = new B(shared).start();<newline46mondego>    a.join();<newline46mondego>    Thread b = new C(shared).start();<newline46mondego>    b.join();<newline46mondego>  }<newline46mondego><newline46mondego>}<newline46mondego><newline46mondego>final class B extends Thread {<newline46mondego><newline46mondego>  private final AtomicInteger shared;<newline46mondego><newline46mondego>  B(AtomicInteger shared) { this.shared = shared; }<newline46mondego><newline46mondego>  @Override()<newline46mondego>  public void run() {<newline46mondego>    shared.getAndIncrement();<newline46mondego>    shared.getAndIncrement();<newline46mondego>  }<newline46mondego><newline46mondego>}<newline46mondego><newline46mondego>final class C extends Thread {<newline46mondego><newline46mondego>  private final AtomicInteger shared;<newline46mondego><newline46mondego>  C(AtomicInteger shared) { this.shared = shared; }<newline46mondego><newline46mondego>  @Override()<newline46mondego>  public void run() {<newline46mondego>    System.out.println(shared.get());<newline46mondego>  }<newline46mondego><newline46mondego>}<newline46mondego>"
"5277splitHere46","20199767splitHere46","Scanner#hasNextLine()"
"5278splitHere46","20199767splitHere46","n"
"5279splitHere46","20199767splitHere46","Scanner#nextLine()"
"5280splitHere46","20199767splitHere46","if (tableLineScanner.hasNextLine()) {<newline46mondego>    String firstLine = tableLineScanner.nextLine();<newline46mondego><newline46mondego>    if (tableLineScanner.hasNextLine()) {<newline46mondego>        String secondLine = tableLineScanner.nextLine().replaceAll(...);<newline46mondego><newline46mondego>        tableFields.add(firstLine + secondLine);<newline46mondego>    } else {<newline46mondego>        // No-second-line error handling goes here<newline46mondego>    }<newline46mondego>} else {<newline46mondego>    // No-first-line error handling goes here (if any)<newline46mondego>}<newline46mondego>"
"5281splitHere46","20199797splitHere46","println()"
"5282splitHere46","20199797splitHere46","public void println(char[] x)"
"5283splitHere46","20199797splitHere46","print(char[])"
"5284splitHere46","20199797splitHere46","println()"
"5285splitHere46","20199797splitHere46","x"
"5286splitHere46","20199797splitHere46","println()"
"5287splitHere46","20199797splitHere46","toString()"
"5288splitHere46","20199797splitHere46","toString()"
"5289splitHere46","20199797splitHere46","Object"
"5290splitHere46","20199805splitHere46","nextDouble()"
"5291splitHere46","20199805splitHere46","Scanner"
"5292splitHere46","20199805splitHere46","System.out.print(<doubleQuotes46>What is the length of your dog?: <doubleQuotes46>);<newline46mondego>length = input.next();<newline46mondego>"
"5293splitHere46","20199805splitHere46","System.out.print(<doubleQuotes46>What is the length of your dog?: <doubleQuotes46>);<newline46mondego>double length = input.nextDouble();<newline46mondego>"
"5294splitHere46","20199805splitHere46","Animal"
"5295splitHere46","20199867splitHere46","class MyLibClassDefaultDecoratorBase : ILibInterface<newline46mondego>{<newline46mondego>    protected LibClass backingObject;<newline46mondego><newline46mondego>    public MyLibClassDefaultDecoratorBase(LibClass obj)<newline46mondego>    {<newline46mondego>        this.backingObject = obj;<newline46mondego>    }<newline46mondego><newline46mondego>    // have them all here<newline46mondego><newline46mondego>    public method1() { return this.backingObject.method1(); }<newline46mondego>    public method2() { return this.backingObject.method2(); }<newline46mondego>    //...<newline46mondego>}<newline46mondego>"
"5296splitHere46","20199867splitHere46","class MyLibClassSimpleDecorator1 : MyLibClassDefaultDecoratorBase<newline46mondego>{<newline46mondego>    public MyLibClassSimpleDecorator1(LibClass obj)<newline46mondego>        : base(obj)<newline46mondego>    {<newline46mondego>    }<newline46mondego><newline46mondego>    public override method1() { /* ... */ }<newline46mondego>}<newline46mondego>"
"5297splitHere46","20199998splitHere46","<update check=<doubleQuotes46>timeout<doubleQuotes46> policy=<doubleQuotes46>prompt-update<doubleQuotes46>/><newline46mondego>"
"5298splitHere46","20200565splitHere46","takeStep()"
"5299splitHere46","20200639splitHere46","stackArray"
"5300splitHere46","20200639splitHere46","string"
"5301splitHere46","20200639splitHere46","char"
"5302splitHere46","20200639splitHere46","Stack"
"5303splitHere46","20200639splitHere46","char"
"5304splitHere46","20200639splitHere46","String array"
"5305splitHere46","20200639splitHere46","class Stack<newline46mondego>{<newline46mondego>private int maxSize;<newline46mondego>private char[] stackArray;<newline46mondego>private int top;<newline46mondego>/**<newline46mondego> * Constructor for objects of class Stack<newline46mondego> */<newline46mondego>    public Stack(int a)<newline46mondego>    {<newline46mondego>      maxSize = a;<newline46mondego>      stackArray = new char [maxSize];<newline46mondego>       top = -1;<newline46mondego>    }<newline46mondego><newline46mondego>   public void push(char j)<newline46mondego>   {<newline46mondego>     top++;<newline46mondego>     stackArray[top] = j;<newline46mondego>   }  <newline46mondego><newline46mondego>   public char pop()<newline46mondego>   {<newline46mondego>     return stackArray[top--];<newline46mondego>   }<newline46mondego><newline46mondego>   public int getSize(){<newline46mondego>     return maxSize;<newline46mondego>   }<newline46mondego>}<newline46mondego>"
"5306splitHere46","20200639splitHere46","String s = <doubleQuotes46>test<doubleQuotes46>;<newline46mondego>        Stack st = new Stack(s.length());<newline46mondego><newline46mondego>        for(char c : s.toCharArray())<newline46mondego>            st.push(c);<newline46mondego><newline46mondego>        for(int i = 0; i <st.getSize();i++)<newline46mondego>            System.out.print(st.pop());<newline46mondego>"
"5307splitHere46","20200639splitHere46","tset<newline46mondego>"
"5308splitHere46","20200844splitHere46","static{ <newline46mondego>    int a=5;<newline46mondego>    double x=4.1;<newline46mondego>}<newline46mondego>"
"5309splitHere46","20200844splitHere46","static"
"5310splitHere46","20200844splitHere46","static int a=4;<newline46mondego>"
"5311splitHere46","20200871splitHere46","getTextContent()"
"5312splitHere46","20200871splitHere46","getNodeName()"
"5313splitHere46","20200871splitHere46","getNodeName()"
"5314splitHere46","20200871splitHere46","String"
"5315splitHere46","20200871splitHere46","while (child != null && !child.getNodeName().equals(<doubleQuotes46>latest<doubleQuotes46>)) {<newline46mondego>    child = child.getNextSibling();<newline46mondego>}<newline46mondego>"
"5316splitHere46","20200871splitHere46","Node pluginsNode = doc.getFirstChild();<newline46mondego>"
"5317splitHere46","20200871splitHere46","Node pluginsNode = (Node)doc.getDocumentElement();<newline46mondego>"
"5318splitHere46","20200871splitHere46","private double extractVersion(Document doc){<newline46mondego><newline46mondego>String result = <doubleQuotes46><doubleQuotes46>;<newline46mondego><newline46mondego>NodeList nodeList = doc.getElementsByTagName(<doubleQuotes46>latest<doubleQuotes46>);<newline46mondego>for (int i = 0; i < nodeList.getLength(); i++) {<newline46mondego>    Node node = nodeList.item(i);<newline46mondego>    if (node.getNodeName().equals(<doubleQuotes46>latest<doubleQuotes46>)) {<newline46mondego>        result = node.getTextContent();<newline46mondego>    }<newline46mondego>}<newline46mondego><newline46mondego>return Double.parseDouble(result);<newline46mondego>}<newline46mondego>"
"5319splitHere46","20200877splitHere46","int idx = prodL.search((int)prodNo);<newline46mondego>"
"5320splitHere46","20200957splitHere46","FocusTraversalPolicy"
"5321splitHere46","20200957splitHere46","FocusTraversalPolicy"
"5322splitHere46","20200957splitHere46","this.mainPanel.setFocusCycleRoot(true)"
"5323splitHere46","20200957splitHere46","ContainerOrderFocusTraversalPolicy"
"5324splitHere46","20200957splitHere46","Container.getComponents()"
"5325splitHere46","20200957splitHere46","boolean accept(Component aComponent)"
"5326splitHere46","20200957splitHere46","Container"
"5327splitHere46","20200992splitHere46","$(<doubleQuotes46>.addImgBtn<doubleQuotes46>).click(function() {<newline46mondego>        $('#imgTable tbody>tr:last').clone(true).insertAfter('#imgTable tbody>tr:last');<newline46mondego>        $(<doubleQuotes46>#imgTable tbody>tr:last #field1<doubleQuotes46>).val('');<newline46mondego>        $(<doubleQuotes46>#imgTable tbody>tr:last #field2<doubleQuotes46>).val('');<newline46mondego>        $(<doubleQuotes46>#imgTable tbody>tr:last #divFile<doubleQuotes46>).show();<newline46mondego>        $(<doubleQuotes46>.addImgBtn<doubleQuotes46>).attr(<doubleQuotes46>disabled<doubleQuotes46>, <doubleQuotes46>true<doubleQuotes46>);<newline46mondego>        return false;<newline46mondego>    });<newline46mondego>"
"5328splitHere46","20200992splitHere46","$(<doubleQuotes46>.confirmImgBtn<doubleQuotes46>).click(function(eve) {<newline46mondego>    var field1 = $(<doubleQuotes46>#imgTable tbody>tr:last #field1<doubleQuotes46>).val();<newline46mondego>    var field2 = $(<doubleQuotes46>#imgTable tbody>tr:last #field2<doubleQuotes46>).val();<newline46mondego>    var form = $('#confirmImgForm');<newline46mondego>    var newfile = $(<doubleQuotes46>#imgTable tbody>tr:last #imgFile<doubleQuotes46>)[0].files[0];<newline46mondego>    var formdata = false;<newline46mondego>    if (window.FormData) {<newline46mondego>        formdata = new FormData();<newline46mondego>    }<newline46mondego>    if ( window.FileReader ) {<newline46mondego>        reader = new FileReader();<newline46mondego>        reader.onloadend = function (e) {<newline46mondego>            //showUploadedItem(e.target.result, file.fileName);<newline46mondego>        };<newline46mondego>        reader.readAsDataURL(newfile);<newline46mondego>    }<newline46mondego>    if (formdata) {<newline46mondego>        formdata.append(<doubleQuotes46>image<doubleQuotes46>, newfile);<newline46mondego>        formdata.append(<doubleQuotes46>field1<doubleQuotes46>,field1);<newline46mondego>        formdata.append(<doubleQuotes46>field2<doubleQuotes46>,field2);<newline46mondego>    }<newline46mondego>    if (formdata) {<newline46mondego>        jQuery.ajax({<newline46mondego>            url: form.attr('action'),<newline46mondego>            type: <doubleQuotes46>POST<doubleQuotes46>,<newline46mondego>            data: formdata,<newline46mondego>            processData: false,<newline46mondego>            contentType: false,<newline46mondego>            success: function (res) {<newline46mondego>                alert('succeed!!');<newline46mondego>            }<newline46mondego>        });<newline46mondego>    }<newline46mondego>});<newline46mondego>"
"5329splitHere46","20200992splitHere46","org.springframework.web.multipart.MultipartFile"
"5330splitHere46","20201109splitHere46","FlushMode.AUTO"
"5331splitHere46","20201113splitHere46","android:theme=<doubleQuotes46>@android:style/Theme.Dialog<doubleQuotes46><newline46mondego>"
"5332splitHere46","20201116splitHere46","int number1 = 234;<newline46mondego>int number2 = 99;<newline46mondego>System.out.println( String.format(<doubleQuotes46>-C %d -L %d -P 1.0E-12 -N 0 -V -1 -W 1<doubleQuotes46>, number1, number2) );<newline46mondego>"
"5333splitHere46","20201116splitHere46","-C 234 -L 99 -P 1.0E-12 -N 0 -V -1 -W 1<newline46mondego>"
"5334splitHere46","20201116splitHere46","String options = String.format(<doubleQuotes46>-C %d -L %d -P 1.0E-12 -N 0 -V -1 -W 1<doubleQuotes46>, number1, number2);<newline46mondego>"
"5335splitHere46","20201124splitHere46","// Original:<newline46mondego>public void test() throws IOException {<newline46mondego>    try (final StringWriter writer = new StringWriter()) {<newline46mondego>        writer.write(<doubleQuotes46>This is only a test.<doubleQuotes46>);<newline46mondego>    }<newline46mondego>}<newline46mondego><newline46mondego>// Decompiled:<newline46mondego>public void test() throws IOException {<newline46mondego>    final StringWriter writer = new StringWriter();<newline46mondego>    Throwable t = null;<newline46mondego>    try {<newline46mondego>        writer.write(<doubleQuotes46>This is only a test.<doubleQuotes46>);<newline46mondego>    }<newline46mondego>    catch (Throwable t2) {<newline46mondego>        t = t2;<newline46mondego>        throw t2;<newline46mondego>    }<newline46mondego>    finally {<newline46mondego>        if (writer != null) {<newline46mondego>            if (t != null) {<newline46mondego>                try {<newline46mondego>                    writer.close();<newline46mondego>                }<newline46mondego>                catch (Throwable t2) {<newline46mondego>                    t.addSuppressed(t2);<newline46mondego>                }<newline46mondego>            }<newline46mondego>            else {<newline46mondego>                writer.close();<newline46mondego>            }<newline46mondego>        }<newline46mondego>    }<newline46mondego>}<newline46mondego>"
"5336splitHere46","20201124splitHere46","addSuppressed()"
"5337splitHere46","20201284splitHere46","lblHour1 = new CustomClockLabel(<doubleQuotes46>/icons/noa_en/<doubleQuotes46>+Hour.charAt(0)+<doubleQuotes46>.png<doubleQuotes46>);<newline46mondego>lblHour2 = new CustomClockLabel(<doubleQuotes46>/icons/noa_en/<doubleQuotes46>+Hour.charAt(1)+<doubleQuotes46>.png<doubleQuotes46>);<newline46mondego>lblMin1 = new CustomClockLabel(<doubleQuotes46>/icons/noa_en/<doubleQuotes46>+Minute.charAt(0)+<doubleQuotes46>.png<doubleQuotes46>);<newline46mondego>lblMin2 = new CustomClockLabel(<doubleQuotes46>/icons/noa_en/<doubleQuotes46>+Minute.charAt(1)+<doubleQuotes46>.png<doubleQuotes46>);<newline46mondego>"
"5338splitHere46","20201284splitHere46","lblHour1.init(new ImageIcon(<doubleQuotes46>/icons/noa_en/<doubleQuotes46>+Hour.charAt(0)+<doubleQuotes46>.png<doubleQuotes46>));<newline46mondego>lblHour2.init(new ImageIcon(<doubleQuotes46>/icons/noa_en/<doubleQuotes46>+Hour.charAt(1)+<doubleQuotes46>.png<doubleQuotes46>));<newline46mondego>lblMin1.init(new ImageIcon(<doubleQuotes46>/icons/noa_en/<doubleQuotes46>+Minute.charAt(0)+<doubleQuotes46>.png<doubleQuotes46>));<newline46mondego>lblMin2.init(new ImageIcon(<doubleQuotes46>/icons/noa_en/<doubleQuotes46>+Minute.charAt(1)+<doubleQuotes46>.png<doubleQuotes46>));<newline46mondego>revalidate();<newline46mondego>repaint();<newline46mondego>"
"5339splitHere46","20201284splitHere46","super.paintComponent"
"5340splitHere46","20201284splitHere46","0x0"
"5341splitHere46","20201284splitHere46","import java.awt.Dimension;<newline46mondego>import java.awt.EventQueue;<newline46mondego>import java.awt.Graphics;<newline46mondego>import java.awt.Graphics2D;<newline46mondego>import java.awt.RenderingHints;<newline46mondego>import java.awt.event.ActionEvent;<newline46mondego>import java.awt.event.ActionListener;<newline46mondego>import java.awt.image.BufferedImage;<newline46mondego>import java.io.IOException;<newline46mondego>import java.net.URL;<newline46mondego>import javax.imageio.ImageIO;<newline46mondego>import javax.swing.JFrame;<newline46mondego>import javax.swing.JPanel;<newline46mondego>import javax.swing.Timer;<newline46mondego>import javax.swing.UIManager;<newline46mondego>import javax.swing.UnsupportedLookAndFeelException;<newline46mondego><newline46mondego>public class PaintComponentTest {<newline46mondego><newline46mondego>    public static void main(String[] args) {<newline46mondego>        new PaintComponentTest();<newline46mondego>    }<newline46mondego><newline46mondego>    private int time = 0;<newline46mondego><newline46mondego>    public PaintComponentTest() {<newline46mondego>        EventQueue.invokeLater(new Runnable() {<newline46mondego>            @Override<newline46mondego>            public void run() {<newline46mondego>                try {<newline46mondego>                    UIManager.setLookAndFeel(UIManager.getSystemLookAndFeelClassName());<newline46mondego>                } catch (ClassNotFoundException | InstantiationException | IllegalAccessException | UnsupportedLookAndFeelException ex) {<newline46mondego>                    ex.printStackTrace();<newline46mondego>                }<newline46mondego><newline46mondego>                final CustomClockLabel counter = new CustomClockLabel(<doubleQuotes46>/icons/0.png<doubleQuotes46>);<newline46mondego>                Timer timer = new Timer(1000, new ActionListener() {<newline46mondego>                    @Override<newline46mondego>                    public void actionPerformed(ActionEvent e) {<newline46mondego>                        time++;<newline46mondego>                        if (time > 9) {<newline46mondego>                            time = 0;<newline46mondego>                        }<newline46mondego>                        counter.init(<doubleQuotes46>/icons/<doubleQuotes46> + Integer.toString(time) + <doubleQuotes46>.png<doubleQuotes46>);<newline46mondego>                        counter.repaint();<newline46mondego>                    }<newline46mondego>                });<newline46mondego>                timer.start();<newline46mondego><newline46mondego>                JFrame frame = new JFrame(<doubleQuotes46>Testing<doubleQuotes46>);<newline46mondego>                frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);<newline46mondego>                frame.add(counter);<newline46mondego>                frame.pack();<newline46mondego>                frame.setLocationRelativeTo(null);<newline46mondego>                frame.setVisible(true);<newline46mondego>            }<newline46mondego>        });<newline46mondego>    }<newline46mondego><newline46mondego>    public class CustomClockLabel extends JPanel {<newline46mondego><newline46mondego>        BufferedImage background;<newline46mondego>        String Uri;<newline46mondego><newline46mondego>        public CustomClockLabel(String Uri) {<newline46mondego>            init(Uri);<newline46mondego>            this.Uri = Uri;<newline46mondego>        }<newline46mondego><newline46mondego>        public void init(String Uri) {<newline46mondego>            try {<newline46mondego>                URL inp = getClass().getResource(Uri);<newline46mondego>                background = ImageIO.read(inp);<newline46mondego>            } catch (IOException e) {<newline46mondego>                e.printStackTrace();<newline46mondego>            }<newline46mondego>        }<newline46mondego><newline46mondego>        @Override<newline46mondego>        public Dimension getPreferredSize() {<newline46mondego>            return new Dimension(100, 100);<newline46mondego>        }<newline46mondego><newline46mondego>        @Override<newline46mondego>        protected void paintComponent(Graphics g) {<newline46mondego>            super.paintComponent(g);<newline46mondego>            Graphics2D g2 = (Graphics2D) g.create();<newline46mondego>            g2.setRenderingHint(RenderingHints.KEY_ANTIALIASING, RenderingHints.VALUE_ANTIALIAS_ON);<newline46mondego><newline46mondego>            if (background != null) {<newline46mondego>                g2.drawImage(background, 0, 0, getWidth(), getHeight(), this);<newline46mondego>            }<newline46mondego>            g2.dispose();<newline46mondego>        }<newline46mondego>    }<newline46mondego><newline46mondego>}<newline46mondego>"
"5342splitHere46","20201369splitHere46","@Stateless<newline46mondego> public class ReportBean {<newline46mondego> @Resource  <newline46mondego> private ManagedThreadFactory threadFactory;<newline46mondego> public void runReports() {<newline46mondego> Thread thread = threadFactory.newThread(new Runnable());<newline46mondego> thread.start();<newline46mondego> }<newline46mondego>"
"5343splitHere46","20201415splitHere46","java.lang.NullPointerException<newline46mondego>    at sun.applet.AppletAudioClip.<init>(Unknown Source)<newline46mondego>    at java.applet.Applet.newAudioClip(Unknown Source)<newline46mondego>"
"5344splitHere46","20201415splitHere46","clip = Applet.newAudioClip(Sound.class.getResource(filename)); <newline46mondego>"
"5345splitHere46","20201415splitHere46","Sound sound = Sound.class.getResource(filename);<newline46mondego><newline46mondego>System.out.println(sound);<newline46mondego>System.out.println(filename);<newline46mondego><newline46mondego>if (filename != null && sound != null) clip = Applet.newAudioClip(sound); <newline46mondego>"
"5346splitHere46","20201479splitHere46","_if()"
"5347splitHere46","20201479splitHere46","_else()"
"5348splitHere46","20201479splitHere46","JBody"
"5349splitHere46","20201479splitHere46","_then()"
"5350splitHere46","20201479splitHere46","_if()"
"5351splitHere46","20201479splitHere46","_else()"
"5352splitHere46","20201479splitHere46","JBody"
"5353splitHere46","20201479splitHere46","JConditional condition = body._if(input.lt(JExpr.lit(42)));<newline46mondego>condition._then().add(<newline46mondego>    codeModel.ref(System.class).staticRef(<doubleQuotes46>out<doubleQuotes46>).invoke(<doubleQuotes46>println<doubleQuotes46>).arg(JExpr.lit(<doubleQuotes46>hello<doubleQuotes46>))); <newline46mondego>condition._else().add(<newline46mondego>    codeModel.ref(System.class).staticRef(<doubleQuotes46>out<doubleQuotes46>).invoke(<doubleQuotes46>println<doubleQuotes46>).arg(JExpr.lit(<doubleQuotes46>world<doubleQuotes46>)));<newline46mondego>"
"5354splitHere46","20201479splitHere46","if (input< 42) {<newline46mondego>    System.out.println(<doubleQuotes46>hello<doubleQuotes46>);<newline46mondego>} else {<newline46mondego>    System.out.println(<doubleQuotes46>world<doubleQuotes46>);<newline46mondego>}<newline46mondego>"
"5355splitHere46","20201479splitHere46","_for()"
"5356splitHere46","20201479splitHere46","init()"
"5357splitHere46","20201479splitHere46","test()"
"5358splitHere46","20201479splitHere46","update()"
"5359splitHere46","20201479splitHere46","JForLoop forLoop = body._for();<newline46mondego>JVar ivar = forLoop.init(codeModel.INT, <doubleQuotes46>i<doubleQuotes46>, JExpr.lit(0));<newline46mondego>forLoop.test(ivar.lt(JExpr.lit(42)));<newline46mondego>forLoop.update(ivar.assignPlus(JExpr.lit(1)));<newline46mondego><newline46mondego>forLoop.body().add(<newline46mondego>    codeModel.ref(System.class).staticRef(<doubleQuotes46>out<doubleQuotes46>).invoke(<doubleQuotes46>println<doubleQuotes46>).arg(ivar));<newline46mondego>"
"5360splitHere46","20201479splitHere46","for (int i = 0; (i< 42); i += 1) {<newline46mondego>    System.out.println(i);<newline46mondego>}<newline46mondego>"
"5361splitHere46","20201501splitHere46","x"
"5362splitHere46","20201501splitHere46","x"
"5363splitHere46","20201501splitHere46","x"
"5364splitHere46","20201501splitHere46","x"
"5365splitHere46","20201501splitHere46","x"
"5366splitHere46","20201501splitHere46","x"
"5367splitHere46","20201501splitHere46","x"
"5368splitHere46","20201602splitHere46","a.equals(b)"
"5369splitHere46","20201602splitHere46","=="
"5370splitHere46","20201602splitHere46","equals"
"5371splitHere46","20201602splitHere46","LinkedList"
"5372splitHere46","20201602splitHere46","Stack"
"5373splitHere46","20201602splitHere46","List"
"5374splitHere46","20201602splitHere46","List.equals"
"5375splitHere46","20201602splitHere46","IdentityHashMap"
"5376splitHere46","20201602splitHere46","=="
"5377splitHere46","20201602splitHere46","Object.equals()"
"5378splitHere46","20201602splitHere46","System.identityHashCode"
"5379splitHere46","20201602splitHere46","Object.hashCode()"
"5380splitHere46","20201624splitHere46","static class Baz implements Serializable {<newline46mondego>    private static final long   serialVersionUID    = 1L;<newline46mondego>    int i;<newline46mondego>    String s;<newline46mondego>    public Baz(int i, String s) { this.i = i; this.s = s; }<newline46mondego>}<newline46mondego><newline46mondego>@Test<newline46mondego>public void serAL() throws FileNotFoundException, IOException, ClassNotFoundException {<newline46mondego>    List<Baz> list = Arrays.asList(new Baz(1, <doubleQuotes46>one<doubleQuotes46>), new Baz(2, <doubleQuotes46>two<doubleQuotes46>), new Baz(3, <doubleQuotes46>three<doubleQuotes46>));<newline46mondego>    try (ObjectOutputStream oos = new ObjectOutputStream(new FileOutputStream(<doubleQuotes46>al.dat<doubleQuotes46>))) {<newline46mondego>        oos.writeObject(list);<newline46mondego>    }<newline46mondego>    try (ObjectInputStream ois = new ObjectInputStream(new FileInputStream(<doubleQuotes46>al.dat<doubleQuotes46>))) {<newline46mondego>        @SuppressWarnings(<doubleQuotes46>unchecked<doubleQuotes46>)<newline46mondego>        List<Baz> serAL = (List<Baz>) ois.readObject();<newline46mondego>        Assert.assertEquals(3, serAL.size());<newline46mondego>        Assert.assertEquals(1, serAL.get(0).i);<newline46mondego>        Assert.assertEquals(<doubleQuotes46>one<doubleQuotes46>, serAL.get(0).s);<newline46mondego>        Assert.assertEquals(2, serAL.get(1).i);<newline46mondego>        Assert.assertEquals(<doubleQuotes46>two<doubleQuotes46>, serAL.get(1).s);<newline46mondego>        Assert.assertEquals(3, serAL.get(2).i);<newline46mondego>        Assert.assertEquals(<doubleQuotes46>three<doubleQuotes46>, serAL.get(2).s);<newline46mondego>    }<newline46mondego>}<newline46mondego>"
"5381splitHere46","20201629splitHere46","Activity"
"5382splitHere46","20201629splitHere46","Fragment"
"5383splitHere46","20201629splitHere46","Fragment"
"5384splitHere46","20201629splitHere46","PlaceHolderFragment"
"5385splitHere46","20201629splitHere46","<FrameLayout<newline46mondego>    android:id=<doubleQuotes46>@+id/container<doubleQuotes46><newline46mondego>    android:layout_width=<doubleQuotes46>match_parent<doubleQuotes46><newline46mondego>    android:layout_height=<doubleQuotes46>match_parent<doubleQuotes46>/><newline46mondego>"
"5386splitHere46","20201629splitHere46","Activity"
"5387splitHere46","20201779splitHere46","split"
"5388splitHere46","20201779splitHere46",":"
"5389splitHere46","20201779splitHere46","int"
"5390splitHere46","20201779splitHere46","parseInt"
"5391splitHere46","20201961splitHere46","String[] words = bookStr.split(<doubleQuotes46>(?<!^|[a-zA-Z'])|(?![a-zA-Z'])<doubleQuotes46>);<newline46mondego>"
"5392splitHere46","20201961splitHere46","|"
"5393splitHere46","20201961splitHere46","String bookStr = <doubleQuotes46>I just can't figure this out.\nI wonder why LOST ended?<doubleQuotes46>;<newline46mondego>String[] words = bookStr.split(<doubleQuotes46>(?<!^|[a-zA-Z'])|(?![a-zA-Z'])<doubleQuotes46>);<newline46mondego>System.out.println(Arrays.toString( words));<newline46mondego>"
"5394splitHere46","20201961splitHere46","[I, , just, , can't, , figure, , this, , out, ., <newline46mondego>, I, , wonder, , why, , LOST, , ended, ?]<newline46mondego>"
"5395splitHere46","20202080splitHere46","B"
"5396splitHere46","20202080splitHere46","@Transient"
"5397splitHere46","20202080splitHere46","@Entity"
"5398splitHere46","20202334splitHere46","interface TupleVisitor<E extends Field<VariableTuple<E>, E>, <newline46mondego>                       F extends Field<ConstantTuple<F>, F>>  {<newline46mondego>   void visit(VariableTuple<E> tuple, E field);<newline46mondego>   void visit(ConstantTuple<F> tuple, F field);<newline46mondego>}<newline46mondego>"
"5399splitHere46","20202334splitHere46","Tuple"
"5400splitHere46","20202382splitHere46","String"
"5401splitHere46","20202382splitHere46","String"
"5402splitHere46","20202445splitHere46","Sring msg = <doubleQuotes46>add:42,34<doubleQuotes46>;<newline46mondego>ParseUtils.parse(msg, <doubleQuotes46>add:(\\d+),(\\d+)<doubleQuotes46>, (int x,int y) -> simulator.add(x, y));<newline46mondego>ParseUtils.parse(msg, <doubleQuotes46>add:(\\d+),(\\d+)<doubleQuotes46>, simulator::add); //IntBiConsumer match<newline46mondego>ParseUtils.parse(msg, <doubleQuotes46>add:(.*?),<doubleQuotes46>, System.out::println);<newline46mondego>"
"5403splitHere46","20202445splitHere46","public class ParseUtils {<newline46mondego><newline46mondego>    @FunctionalInterface<newline46mondego>    public interface Consumer { void accept(String s); }<newline46mondego><newline46mondego>    @FunctionalInterface<newline46mondego>    public interface BiConsumer { void accept(String a, String b); }<newline46mondego><newline46mondego>    //... you can add TriConsumer etc. if you need to ...<newline46mondego><newline46mondego>    @FunctionalInterface  //conveniently parses integers<newline46mondego>    public interface IntBiConsumer { void accept(int x, int y); }<newline46mondego><newline46mondego>    // implementations -----<newline46mondego>    public static void parse(String src, String regex, Consumer callback) {<newline46mondego>        callback.accept(parse(src, regex)[0]);<newline46mondego>    }<newline46mondego><newline46mondego>    public static void parse(String src, String regex, BiConsumer callback) {<newline46mondego>        String[] p = parse(src, regex);<newline46mondego>        callback.accept(p[0],p[1]);<newline46mondego>    }<newline46mondego><newline46mondego>    public static void parse(String src, String regex, <newline46mondego>                                                    IntBiConsumer callback) {<newline46mondego>        String[] p = parse(src, regex);<newline46mondego>        callback.accept(Integer.parseInt(p[0]), Integer.parseInt(p[1]));<newline46mondego>    }<newline46mondego><newline46mondego>    public static String[] parse(String source, String pattern) {<newline46mondego>        Pattern p = Pattern.compile(pattern);<newline46mondego>        Matcher m = p.matcher(source);<newline46mondego>        String[] ret = new String[m.groupCount()];<newline46mondego>        if (m.matches()) {<newline46mondego>            for (int i=0; i<m.groupCount(); i++) {<newline46mondego>                ret[i] = m.group(1 + i);<newline46mondego>            }<newline46mondego>        }<newline46mondego>        return ret;<newline46mondego>    }<newline46mondego><newline46mondego>}<newline46mondego>"
"5404splitHere46","20202592splitHere46","Connection con = (Connection)DriverManager.getConnection(<doubleQuotes46>jdbc:mysql://185.27.134.10:3306<doubleQuotes46>,<doubleQuotes46>username<doubleQuotes46>,<doubleQuotes46>password<doubleQuotes46>);<newline46mondego>"
"5405splitHere46","20202677splitHere46",">>> import re<newline46mondego>>>> import pprint<newline46mondego>>>> t = [<doubleQuotes46>assertEquals(az, bz);<doubleQuotes46>, \<newline46mondego>...      <doubleQuotes46>assertEquals(az(), bz);<doubleQuotes46>, \<newline46mondego>...      <doubleQuotes46>assertEquals(az, bz());<doubleQuotes46>, \<newline46mondego>...      <doubleQuotes46>assertEquals(az, bz(dz));<doubleQuotes46>, \<newline46mondego>...      <doubleQuotes46>assertEquals(bz(dz), az);<doubleQuotes46>, \<newline46mondego>...      <doubleQuotes46>assertEquals(az, bz(cz, dz));<doubleQuotes46>, \<newline46mondego>...      <doubleQuotes46>assertEquals(bz(cz, dz), az);<doubleQuotes46>]<newline46mondego>>>> var = r'([a-z]+(\(([a-z]+(\s*,\s*[a-z]+)*)?\))?)'<newline46mondego>>>> res = [ \<newline46mondego>...     re.sub( \<newline46mondego>...            r'assertEquals\(\s*' + var + '\s*,\s*' + var + '\s*\)', \<newline46mondego>...            r'\1 == \5', str \<newline46mondego>...           ) \<newline46mondego>...     for str in t]<newline46mondego>>>> pprint.pprint(res)<newline46mondego>['az == bz;',<newline46mondego> 'az() == bz;',<newline46mondego> 'az == bz();',<newline46mondego> 'az == bz(dz);',<newline46mondego> 'bz(dz) == az;',<newline46mondego> 'az == bz(cz, dz);',<newline46mondego> 'bz(cz, dz) == az;']<newline46mondego>"
"5406splitHere46","20202677splitHere46","var"
"5407splitHere46","20202677splitHere46","(                            # group the entire var before the comma<newline46mondego>    [a-z]+                   # acceptable variable name<newline46mondego>    (                        # followed by an optional group<newline46mondego>      \(                     # containing a pair of matching parens<newline46mondego>        (                    # which contain, optionally<newline46mondego>          [a-z]+             # an acceptable variable name<newline46mondego>          (                  # followed by any number (0 or more)<newline46mondego>            \s*,\s*[a-z]+    # of commas followed by acceptable variable names<newline46mondego>          )*<newline46mondego>        )?<newline46mondego>      \)<newline46mondego>    )?<newline46mondego>)<newline46mondego>"
"5408splitHere46","20202677splitHere46","[a-z]"
"5409splitHere46","20202677splitHere46","[a-zA-Z0-9_]"
"5410splitHere46","20202793splitHere46","Ogrenci[] Ogt =  new Ogrenci[30];<newline46mondego><newline46mondego>    for(int z=0; z<30; z++){<newline46mondego>        Ogt[z] = new Ogrenci();<newline46mondego>        Ogt[z].ad();<newline46mondego>        Ogt[z].soyad();<newline46mondego>        Ogt[z].randomNot();<newline46mondego>        Ogt[z].no = 0710000 + z ;<newline46mondego><newline46mondego>    }<newline46mondego>"
"5411splitHere46","20202804splitHere46","KeyEvent.VK_LEFT"
"5412splitHere46","20202804splitHere46","KeyEvent.VK_UP"
"5413splitHere46","20202804splitHere46","List"
"5414splitHere46","20202804splitHere46","List"
"5415splitHere46","20202804splitHere46","KeyListener"
"5416splitHere46","20202850splitHere46","rs.next()"
"5417splitHere46","20202850splitHere46","if (rs.next()) {<newline46mondego>    long bal=rst.getLong(1);<newline46mondego>    ...<newline46mondego>}<newline46mondego>"
"5418splitHere46","20202862splitHere46","System.getProperty( <doubleQuotes46>line.separator<doubleQuotes46> )"
"5419splitHere46","20202943splitHere46","waitFor"
"5420splitHere46","20202943splitHere46","runTime.exec(new String[]{<doubleQuotes46>sh<doubleQuotes46>, <doubleQuotes46>-c<doubleQuotes46>, <doubleQuotes46>some command<doubleQuotes46>}).waitFor();<newline46mondego>runTime.exec(new String[]{<doubleQuotes46>other command<doubleQuotes46>}).waitFor();<newline46mondego>runTime.exec(new String[]{<doubleQuotes46>sh<doubleQuotes46>,<doubleQuotes46>-c<doubleQuotes46>,<doubleQuotes46>final command<doubleQuotes46>}).waitFor();<newline46mondego>"
"5421splitHere46","20202969splitHere46","SupportMapFragment"
"5422splitHere46","20202969splitHere46","android.app.Fragment"
"5423splitHere46","20202969splitHere46","android.app.support.v4.Fragment"
"5424splitHere46","20202969splitHere46","MapsFragment"
"5425splitHere46","20202969splitHere46","MapFragment"
"5426splitHere46","20202969splitHere46","SupportMapFragment"
"5427splitHere46","20202969splitHere46","Fragment"
"5428splitHere46","20202969splitHere46","FragmentActivity"
"5429splitHere46","20202969splitHere46","Activity"
"5430splitHere46","20202969splitHere46","MapFragment"
"5431splitHere46","20203057splitHere46","private IMC imc = new IMC();<newline46mondego>"
"5432splitHere46","20203068splitHere46","pics.get(i)"
"5433splitHere46","20203068splitHere46","ArrayList"
"5434splitHere46","20203125splitHere46","=="
"5435splitHere46","20203125splitHere46","if (<doubleQuotes46><doubleQuotes46>.equals(degree1))"
"5436splitHere46","20203125splitHere46","=="
"5437splitHere46","20203125splitHere46","true"
"5438splitHere46","20203125splitHere46","=="
"5439splitHere46","20203125splitHere46","false"
"5440splitHere46","20203125splitHere46","Object"
"5441splitHere46","20203125splitHere46","equals()"
"5442splitHere46","20203141splitHere46","ClassLoader"
"5443splitHere46","20203164splitHere46","System.out.println(args[1]);  ///<-2"
"5444splitHere46","20203169splitHere46","LinkedList<Integer>[] vertex = new LinkedList[5];<newline46mondego>int i = 0, m = 6;<newline46mondego>while(i!=m){<newline46mondego>  int temp = sc.nextInt();<newline46mondego>  int temp2 = sc.nextInt();<newline46mondego><newline46mondego>  // Make sure the list is initialized before adding to it<newline46mondego>  if (vertex[temp] == null) {<newline46mondego>     vertex[temp] = new LinkedList<Integer>();<newline46mondego>  }<newline46mondego><newline46mondego>  vertex[temp].add(temp2);<newline46mondego>  i++;<newline46mondego>}<newline46mondego>"
"5445splitHere46","20203209splitHere46","@ControllerAdvice<newline46mondego>public class DefaultControllerAdvice extends ResponseEntityExceptionHandler {<newline46mondego><newline46mondego>    protected ResponseEntity<Object> handleHttpMediaTypeNotAcceptable(<newline46mondego>            HttpMediaTypeNotAcceptableException ex, HttpHeaders headers, HttpStatus status, WebRequest request) {<newline46mondego>        return handleExceptionInternal(ex, <doubleQuotes46>Supported media types: <doubleQuotes46> + ex.getSupportedMediaTypes(),<newline46mondego>                headers, status, request);<newline46mondego>    }<newline46mondego><newline46mondego>}<newline46mondego>"
"5446splitHere46","20203209splitHere46","HttpMediaTypeNotAcceptableException"
"5447splitHere46","20203321splitHere46","public static class GenericResponse{<newline46mondego>      public ServerException exception;<newline46mondego>      public StandardResponse1 responseType1;<newline46mondego>      public StandardResponse2 responseType2;<newline46mondego><newline46mondego>      @Override<newline46mondego>      public String toString() {<newline46mondego>         return <doubleQuotes46>GenericResponse [exception=<doubleQuotes46> + exception + <doubleQuotes46>, responseType1=<doubleQuotes46> + responseType1 + <doubleQuotes46>, responseType2=<doubleQuotes46> + responseType2 + <doubleQuotes46>]<doubleQuotes46>;<newline46mondego>      }<newline46mondego><newline46mondego>   }<newline46mondego><newline46mondego>   public static class ServerException{<newline46mondego>      public int error;<newline46mondego>      public String message;<newline46mondego>   }<newline46mondego><newline46mondego>   public static class StandardResponse1{<newline46mondego>      public List<Integer> list;<newline46mondego>      public Date now;<newline46mondego>   }<newline46mondego>"
"5448splitHere46","20203321splitHere46","{<doubleQuotes46>responseType1<doubleQuotes46>:{<doubleQuotes46>list<doubleQuotes46>:[1,2],<doubleQuotes46>now<doubleQuotes46>:<doubleQuotes46>Nov 25, 2013 9:26:51 PM<doubleQuotes46>}}<newline46mondego>"
"5449splitHere46","20203321splitHere46","{<doubleQuotes46>exception<doubleQuotes46>:{<doubleQuotes46>error<doubleQuotes46>:-1,<doubleQuotes46>message<doubleQuotes46>:<doubleQuotes46>Don\u0027t do this at home<doubleQuotes46>}}<newline46mondego>"
"5450splitHere46","20203321splitHere46","GenericResponse out = g.fromJson(fromServerStream, GenericResponse.class);<newline46mondego>System.out.println(out);<newline46mondego>"
"5451splitHere46","20203321splitHere46","GenericResponse [exception=stackoverflow.questions.Q20187804$ServerException@1e9d085, responseType1=null, responseType2=null]<newline46mondego>"
"5452splitHere46","20203321splitHere46","[13,17]<newline46mondego>"
"5453splitHere46","20203321splitHere46","{<doubleQuotes46>error<doubleQuotes46>:-1,<doubleQuotes46>message<doubleQuotes46>:<doubleQuotes46>Don\u0027t do this at home<doubleQuotes46>}<newline46mondego>"
"5454splitHere46","20203321splitHere46","JsonParser"
"5455splitHere46","20203321splitHere46","Gson g = new Gson();<newline46mondego>      JsonParser jp = new JsonParser();<newline46mondego>      JsonElement o = jp.parse(s);<newline46mondego>      if (o.isJsonArray()){<newline46mondego>         List<Integer> list = (List) g.fromJson(o, listType1);<newline46mondego>         System.out.print(list);<newline46mondego>      }<newline46mondego>      else{<newline46mondego>         ServerException e = g.fromJson(s, ServerException.class);<newline46mondego>         System.out.print(e);<newline46mondego>      }<newline46mondego>"
"5456splitHere46","20203321splitHere46","JsonObject"
"5457splitHere46","20203321splitHere46","JsonArray"
"5458splitHere46","20203321splitHere46","TypeAdapter"
"5459splitHere46","20203321splitHere46","JsonParser"
"5460splitHere46","20203321splitHere46","TypeAdapter"
"5461splitHere46","20203321splitHere46","JsonElement"
"5462splitHere46","20203510splitHere46","=="
"5463splitHere46","20203510splitHere46","equals()"
"5464splitHere46","20203510splitHere46","true"
"5465splitHere46","20203510splitHere46","false"
"5466splitHere46","20203510splitHere46","equals()"
"5467splitHere46","20203510splitHere46","System.out.println(obj1.equals(obj2)); // true<newline46mondego>System.out.println(obj1 == obj2);      // false<newline46mondego>"
"5468splitHere46","20203510splitHere46","Test obj1 = new Test(100, 22);<newline46mondego>Test obj2 = new Test(100, 22);<newline46mondego>Test obj3 = obj2;<newline46mondego><newline46mondego>System.out.println(obj1.equals(obj2)); // true<newline46mondego>System.out.println(obj1 == obj2);      // false<newline46mondego>System.out.println(obj2 == obj3);      // true<newline46mondego>System.out.println(obj1.equals(obj3)); // true<newline46mondego>"
"5469splitHere46","20203510splitHere46","equals()"
"5470splitHere46","20203510splitHere46","equals()"
"5471splitHere46","20203510splitHere46","@Override<newline46mondego>public boolean equals(Object obj) {<newline46mondego>    if (this == obj)  // are the objects identical?<newline46mondego>        return true;<newline46mondego>    if (obj == null)  // is the other object null?<newline46mondego>        return false;<newline46mondego>    if (getClass() != obj.getClass()) // do the objects have the same class?<newline46mondego>        return false;<newline46mondego>    Test other = (Test) obj; // cast other object<newline46mondego>    if (a != other.a) // is the `a` field equal in both objects?<newline46mondego>        return false;<newline46mondego>    if (b != other.b) // is the `b` field equal in both objects?<newline46mondego>        return false;<newline46mondego>    return true;      // ok, the objects are equal :)<newline46mondego>}<newline46mondego>"
"5472splitHere46","20203518splitHere46","Scanner input = new Scanner(new File(<doubleQuotes46>someText.txt<doubleQuotes46>));<newline46mondego>int count = 0;<newline46mondego><newline46mondego>while(input.hasNext() && count <= 30){<newline46mondego>    count++;<newline46mondego>    String word = input.next();<newline46mondego><newline46mondego>    if (count == 12){<newline46mondego>        System.out.println(word);<newline46mondego>    }<newline46mondego>    if (count == 30){<newline46mondego>        System.out.println(word);<newline46mondego>    }<newline46mondego>}<newline46mondego>"
"5473splitHere46","20203626splitHere46","Joiner.on(<doubleQuotes46>, <doubleQuotes46>).join(Iterables.transform(names, new Function<String, String>() {<newline46mondego>   public String apply(String str) { return <doubleQuotes46>your guest <doubleQuotes46> + str + <doubleQuotes46> is here<doubleQuotes46>; }<newline46mondego> }));<newline46mondego>"
"5474splitHere46","20203717splitHere46","<dependency><newline46mondego>  <groupId>sample.ProjectA</groupId><newline46mondego>  <artifactId>Project-A</artifactId><newline46mondego>  <version>1.0</version><newline46mondego>  <scope>compile</scope><newline46mondego>  <exclusions><newline46mondego>    <exclusion>  <!-- declare the exclusion here --><newline46mondego>      <groupId>sample.ProjectB</groupId><newline46mondego>      <artifactId>Project-B</artifactId><newline46mondego>    </exclusion><newline46mondego>  </exclusions> <newline46mondego></dependency><newline46mondego>"
"5475splitHere46","20203851splitHere46","scrollPane.getVerticalScrollBar().getValue()"
"5476splitHere46","20203851splitHere46","scrollPane.getVerticalScrollBar().setValue(scrollIndex);"
"5477splitHere46","20203851splitHere46","JScrollPane"
"5478splitHere46","20203851splitHere46","JScrollPane"
"5479splitHere46","20203851splitHere46","scrollPane = new JScrollPane(newpanel);"
"5480splitHere46","20203851splitHere46","scrollPane.getViewport().setView(newpanel);"
"5481splitHere46","20203851splitHere46","public class Example extends JFrame {<newline46mondego><newline46mondego>    private JScrollPane pane;<newline46mondego>    private int value;<newline46mondego><newline46mondego>    public Example() {<newline46mondego>        final JTextArea jTextArea = new JTextArea(10, 10);<newline46mondego><newline46mondego>        final JTextArea jTextArea2 = new JTextArea(10, 10);<newline46mondego>        jTextArea2.setText(<doubleQuotes46>1\n21\n2\n\n\n\n\n121221\ne\n\nee\ne\n<doubleQuotes46>);<newline46mondego>        pane = new JScrollPane(jTextArea);<newline46mondego>        JButton save = new JButton(<doubleQuotes46>save<doubleQuotes46>);<newline46mondego>        save.addActionListener(new ActionListener() {<newline46mondego><newline46mondego>            @Override<newline46mondego>            public void actionPerformed(ActionEvent arg0) {<newline46mondego>                value = pane.getVerticalScrollBar().getValue();<newline46mondego>            }<newline46mondego>        });<newline46mondego><newline46mondego>        JButton load = new JButton(<doubleQuotes46>load<doubleQuotes46>);<newline46mondego>        load.addActionListener(new ActionListener() {<newline46mondego><newline46mondego>            @Override<newline46mondego>            public void actionPerformed(ActionEvent arg0) {<newline46mondego>                pane.getViewport().setView(jTextArea2);<newline46mondego>                pane.getVerticalScrollBar().setValue(value);<newline46mondego>            }<newline46mondego>        });<newline46mondego><newline46mondego>        getContentPane().add(save,BorderLayout.WEST);<newline46mondego>        getContentPane().add(pane,BorderLayout.CENTER);<newline46mondego>        getContentPane().add(load,BorderLayout.EAST);<newline46mondego>        setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);<newline46mondego>        pack();<newline46mondego>        setLocationRelativeTo(null);<newline46mondego>    }<newline46mondego><newline46mondego>    public static void main(String[] args) throws Exception {<newline46mondego>        SwingUtilities.invokeLater(new Runnable() {<newline46mondego><newline46mondego>            public void run() {<newline46mondego>                new Example().setVisible(true);<newline46mondego>            }<newline46mondego>        });<newline46mondego>    }<newline46mondego>}<newline46mondego>"
"5482splitHere46","20203875splitHere46","<constant name=<doubleQuotes46>struts.objectFactory<doubleQuotes46><newline46mondego>          value=<doubleQuotes46>org.apache.struts2.spring.StrutsSpringObjectFactory<doubleQuotes46> /><newline46mondego>"
"5483splitHere46","20203879splitHere46","<doubleQuotes46>com.google.android.gms.maps.SupportMapFragment<doubleQuotes46>"
"5484splitHere46","20203879splitHere46","com.google.android.gms.maps.MapFragment"
"5485splitHere46","20203879splitHere46","MapFragment"
"5486splitHere46","20203879splitHere46","Fragment"
"5487splitHere46","20203912splitHere46","x = 430 y = 230<newline46mondego>rx1 = 555 ry1 = 205<newline46mondego>rx2 = 305 ry2 = 105<newline46mondego>rx3 = 155 ry3 = 205<newline46mondego>rx4 = 905 ry4 = 405<newline46mondego>rx5 = 405 ry5 = 205<newline46mondego>"
"5488splitHere46","20203912splitHere46","if(x == rx1 + 25 && y == ry1 + 25){<newline46mondego>    one = false;<newline46mondego> }<newline46mondego> if(x == rx2 + 25 && y == ry2 + 25){<newline46mondego>    two = false;<newline46mondego> }<newline46mondego> if(x == rx3 + 25 && y == ry3 + 25){<newline46mondego>    three = false;<newline46mondego> }<newline46mondego> if(x == rx4 + 25 && y == ry4 + 25){<newline46mondego>    four = false;<newline46mondego> }<newline46mondego> if(x == rx5 + 25  && y == ry5 + 25){<newline46mondego>    five = false;<newline46mondego> }<newline46mondego>"
"5489splitHere46","20204079splitHere46","addMouseListener(new MouseAdapter() {<newline46mondego>        public void mouseClicked(MouseEvent e) {<newline46mondego>            for (Shape shape : shapeList) {<newline46mondego>                Point convertPoint = SwingUtilities.convertPoint(SSCE1.this, e.getPoint(), shape);<newline46mondego>                if (shape.contains(convertPoint)) {<newline46mondego>                    System.out.println(<doubleQuotes46>Hello<doubleQuotes46>);<newline46mondego>                } else {<newline46mondego>                    System.out.println(<doubleQuotes46>Goodbye<doubleQuotes46>);<newline46mondego>                }<newline46mondego>            }<newline46mondego><newline46mondego>        }<newline46mondego>    });<newline46mondego>"
"5490splitHere46","20204079splitHere46","contains"
"5491splitHere46","20204079splitHere46","the point's x and y coordinates are defined to be relative to the coordinate system of this component."
"5492splitHere46","20204079splitHere46","JPanel"
"5493splitHere46","20204079splitHere46","Shape"
"5494splitHere46","20204079splitHere46","SwingUtilities.convertPoint(...)"
"5495splitHere46","20204104splitHere46","do{<newline46mondego><newline46mondego>  // your all operations...<newline46mondego><newline46mondego> // at last prompt  yes or no ?<newline46mondego>} while(choice.equalsIgnoreCase(<doubleQuotes46>yes<doubleQuotes46>));<newline46mondego>"
"5496splitHere46","20204127splitHere46","findViewById()"
"5497splitHere46","20204127splitHere46","find"
"5498splitHere46","20204145splitHere46","PropertyPlaceholderConfigurer"
"5499splitHere46","20204145splitHere46","<context:property-placeholder location=<doubleQuotes46>classpath:jdbc.properties<doubleQuotes46>/><newline46mondego>"
"5500splitHere46","20204243splitHere46","for (; result.next(); i <= rsmd.getColumnCount())<newline46mondego>"
"5501splitHere46","20204243splitHere46","for (; i <= rsmd.getColumnCount(); result.next())<newline46mondego>"
"5502splitHere46","20204243splitHere46","while (result.next()) {<newline46mondego>    // This outer loop is executed once per row        <newline46mondego><newline46mondego>    for (int i = 1; i <= rsmd.getColumnCount(); i++) {<newline46mondego>        // This inner loop is executed once per column (per row, as it's<newline46mondego>        // within the outer loop)<newline46mondego>    }<newline46mondego>}<newline46mondego>"
"5503splitHere46","20204243splitHere46","rsmd"
"5504splitHere46","20204243splitHere46","ResultSet.getMetadata()"
"5505splitHere46","20204243splitHere46","rsmd = result.getMetadata();<newline46mondego>"
"5506splitHere46","20204243splitHere46","for"
"5507splitHere46","20204243splitHere46","false"
"5508splitHere46","20204243splitHere46","for"
"5509splitHere46","20204336splitHere46","NumberFormatException"
"5510splitHere46","20204373splitHere46","private class DownloadFilesTask extends AsyncTask<URL, Integer, Long> {<newline46mondego>  protected Long doInBackground(URL... urls) {<newline46mondego>     int count = urls.length;<newline46mondego>     long totalSize = 0;<newline46mondego>     for (int i = 0; i < count; i++) {<newline46mondego>         totalSize += Downloader.downloadFile(urls[i]);<newline46mondego>         publishProgress((int) ((i / (float) count) * 100));<newline46mondego>         // Escape early if cancel() is called<newline46mondego>         if (isCancelled()) break;<newline46mondego>     }<newline46mondego>     return totalSize;<newline46mondego>  }<newline46mondego><newline46mondego>  protected void onProgressUpdate(Integer... progress) {<newline46mondego>      setProgressPercent(progress[0]);<newline46mondego>  }<newline46mondego><newline46mondego>  protected void onPostExecute(Long result) {<newline46mondego>      showDialog(<doubleQuotes46>Downloaded <doubleQuotes46> + result + <doubleQuotes46> bytes<doubleQuotes46>);<newline46mondego>  }<newline46mondego> }<newline46mondego>"
"5511splitHere46","20204373splitHere46","new DownloadFilesTask().execute(url1, url2, url3);<newline46mondego>"
"5512splitHere46","20204489splitHere46","FileWriter fw=new FileWriter(file,true);            <newline46mondego>for(int i=25;i<30;i++){    <newline46mondego>    fw.append(String.valueOf(i)); <newline46mondego>    fw.append(<doubleQuotes46>\n<doubleQuotes46>); <newline46mondego>}<newline46mondego>"
"5513splitHere46","20204536splitHere46","private static final String H2_JDBC_URL_TEMPLATE = <doubleQuotes46>jdbc:h2:%s/target/db/sample;AUTO_SERVER=TRUE<doubleQuotes46>;<newline46mondego>@Value(<doubleQuotes46>classpath:seed-data.sql<doubleQuotes46>)<newline46mondego>private Resource H2_SCHEMA_SCRIPT;<newline46mondego><newline46mondego>@Value(<doubleQuotes46>classpath:test-data.sql<doubleQuotes46>)<newline46mondego>private Resource H2_DATA_SCRIPT;<newline46mondego><newline46mondego>@Value(<doubleQuotes46>classpath:drop-data.sql<doubleQuotes46>)<newline46mondego>private Resource H2_CLEANER_SCRIPT;<newline46mondego><newline46mondego><newline46mondego>@Bean<newline46mondego>public DataSource dataSource(Environment env) throws Exception {<newline46mondego>        return createH2DataSource();<newline46mondego>}<newline46mondego><newline46mondego><newline46mondego>@Autowired<newline46mondego>@Bean<newline46mondego>public DataSourceInitializer dataSourceInitializer(final DataSource dataSource) {<newline46mondego><newline46mondego>    final DataSourceInitializer initializer = new DataSourceInitializer();<newline46mondego>    initializer.setDataSource(dataSource);<newline46mondego>    initializer.setDatabasePopulator(databasePopulator());<newline46mondego>    initializer.setDatabaseCleaner(databaseCleaner());<newline46mondego>    return initializer;<newline46mondego>}<newline46mondego><newline46mondego><newline46mondego>private DatabasePopulator databasePopulator() {<newline46mondego>    final ResourceDatabasePopulator populator = new ResourceDatabasePopulator();<newline46mondego>    populator.addScript(H2_SCHEMA_SCRIPT);<newline46mondego>    populator.addScript(H2_DATA_SCRIPT);<newline46mondego>    return populator;<newline46mondego>}<newline46mondego><newline46mondego>private DatabasePopulator databaseCleaner() {<newline46mondego>    final ResourceDatabasePopulator populator = new ResourceDatabasePopulator();<newline46mondego>    populator.addScript(H2_CLEANER_SCRIPT);<newline46mondego>    return populator;<newline46mondego>}<newline46mondego><newline46mondego>private DataSource createH2DataSource() {<newline46mondego>    String jdbcUrl = String.format(H2_JDBC_URL_TEMPLATE, System.getProperty(<doubleQuotes46>user.dir<doubleQuotes46>));<newline46mondego>    JdbcDataSource ds = new JdbcDataSource();       <newline46mondego>    ds.setURL(jdbcUrl);<newline46mondego>    ds.setUser(<doubleQuotes46>sa<doubleQuotes46>);<newline46mondego>    ds.setPassword(<doubleQuotes46><doubleQuotes46>);<newline46mondego><newline46mondego>    return ds;<newline46mondego>}<newline46mondego><newline46mondego>@Bean<newline46mondego>public PlatformTransactionManager transactionManager(EntityManagerFactory entityManagerFactory) {<newline46mondego>    JpaTransactionManager transactionManager = new JpaTransactionManager();<newline46mondego>    transactionManager.setEntityManagerFactory(entityManagerFactory);<newline46mondego>    return transactionManager;<newline46mondego>}<newline46mondego><newline46mondego>@Bean<newline46mondego>public LocalContainerEntityManagerFactoryBean entityManagerFactory(Environment env) throws Exception {<newline46mondego>    HibernateJpaVendorAdapter vendorAdapter = new HibernateJpaVendorAdapter();<newline46mondego>    vendorAdapter.setGenerateDdl(Boolean.TRUE);<newline46mondego>    vendorAdapter.setShowSql(Boolean.TRUE);     <newline46mondego><newline46mondego>    LocalContainerEntityManagerFactoryBean factory = new LocalContainerEntityManagerFactoryBean();<newline46mondego>    factory.setPersistenceUnitName(<doubleQuotes46>sample<doubleQuotes46>);<newline46mondego>    factory.setJpaVendorAdapter(vendorAdapter);<newline46mondego>    factory.setPackagesToScan(<doubleQuotes46>com.sample.model<doubleQuotes46>);<newline46mondego>    factory.setDataSource(dataSource(env));     <newline46mondego><newline46mondego>    factory.setJpaProperties(jpaProperties());<newline46mondego>    factory.setLoadTimeWeaver(new InstrumentationLoadTimeWeaver());<newline46mondego><newline46mondego>    return factory;<newline46mondego>}<newline46mondego><newline46mondego>Properties jpaProperties() {<newline46mondego>    Properties props = new Properties();<newline46mondego>    props.put(<doubleQuotes46>hibernate.query.substitutions<doubleQuotes46>, <doubleQuotes46>true 'Y', false 'N'<doubleQuotes46>);<newline46mondego>    props.put(<doubleQuotes46>hibernate.hbm2ddl.auto<doubleQuotes46>, <doubleQuotes46>create-drop<doubleQuotes46>);<newline46mondego>    props.put(<doubleQuotes46>hibernate.show_sql<doubleQuotes46>, <doubleQuotes46>false<doubleQuotes46>);<newline46mondego>    props.put(<doubleQuotes46>hibernate.format_sql<doubleQuotes46>, <doubleQuotes46>true<doubleQuotes46>);<newline46mondego><newline46mondego>    return props;<newline46mondego>}<newline46mondego>"
"5514splitHere46","20204620splitHere46","if(size == 0)<newline46mondego>    {<newline46mondego>        front = new ListNode(data,null);<newline46mondego>        end = first; <newline46mondego>        size++;<newline46mondego>    }<newline46mondego>    else<newline46mondego>    {<newline46mondego>        ListNode <E> temp = new ListNode(data);<newline46mondego>        end.setNext(temp);<newline46mondego>        end = end.getNext();<newline46mondego>        size++;<newline46mondego>    }<newline46mondego>"
"5515splitHere46","20204679splitHere46","private Scanner console = new Scanner(System.in);<newline46mondego>"
"5516splitHere46","20204679splitHere46","double weekPay;<newline46mondego>"
"5517splitHere46","20204679splitHere46","double weekPayAfterTax;<newline46mondego>"
"5518splitHere46","20204679splitHere46","public Developer() {<newline46mondego>    name = <doubleQuotes46>Ciaran<doubleQuotes46>;<newline46mondego>    //you could initialise all the other variables here as well,<newline46mondego>    //I'll leave it as an exercise for you :)<newline46mondego>}<newline46mondego>"
"5519splitHere46","20204679splitHere46","void setData() {<newline46mondego>    //let's get the name<newline46mondego>    System.out.print(<doubleQuotes46>What's your name: <doubleQuotes46>);<newline46mondego>    name = console.nextLine();<newline46mondego><newline46mondego>    System.out.print(<doubleQuotes46>Are you coding an app or a game? <doubleQuotes46>);<newline46mondego><newline46mondego>    //since we want the user to enter 'app' or 'game'<newline46mondego>    //we need to loop until we got these<newline46mondego>    //we can do this by creating endless while loop,<newline46mondego>    //which we will end when we have correct input<newline46mondego>    while (true) {<newline46mondego>        workType = console.next();<newline46mondego><newline46mondego>        if (workType.equals(<doubleQuotes46>app<doubleQuotes46>)) {<newline46mondego>            pay = 20.0;<newline46mondego><newline46mondego>            //stop the loop<newline46mondego>            break;<newline46mondego>        }<newline46mondego>        else if (workType.equals(<doubleQuotes46>game<doubleQuotes46>)) {<newline46mondego>            pay = 30.0;<newline46mondego><newline46mondego>            //stop the loop<newline46mondego>            break;<newline46mondego>        }<newline46mondego>        else {<newline46mondego>            System.out.print(<doubleQuotes46>Please enter either 'app' or 'game': <doubleQuotes46>);<newline46mondego>            //back to top<newline46mondego>        }<newline46mondego>    }<newline46mondego><newline46mondego>    //ok, we're out the loop, let's get number of hours<newline46mondego>    System.out.print(<doubleQuotes46>Please enter how many hours you have worked this week: <doubleQuotes46>);<newline46mondego>    hrsWorked = console.nextInt();<newline46mondego><newline46mondego>    //calculate weekPay<newline46mondego>    weekPay = hrsWorked * pay;<newline46mondego><newline46mondego>    if(weekPay >= 865) {<newline46mondego>        tax = 0.4;<newline46mondego>    }<newline46mondego>    else {<newline46mondego>        tax = 0.21;<newline46mondego>    }<newline46mondego><newline46mondego>    //calculate pay after tax<newline46mondego>    weekPayAfterTax = weekPay - weekPay * tax;<newline46mondego>}<newline46mondego>"
"5520splitHere46","20204679splitHere46","public void display() {<newline46mondego>    System.out.println(<doubleQuotes46>This display method works<doubleQuotes46>);<newline46mondego>    System.out.println(<doubleQuotes46>User: <doubleQuotes46> + name);<newline46mondego>    System.out.println(<doubleQuotes46>Work type: <doubleQuotes46> + workType);<newline46mondego>    System.out.println(<doubleQuotes46>Pay: <doubleQuotes46> + pay);<newline46mondego>    System.out.println(<doubleQuotes46>Week pay: <doubleQuotes46> + weekPay);<newline46mondego>    System.out.println(<doubleQuotes46>Week pay after tax: <doubleQuotes46> + weekPayAfterTax);<newline46mondego>}<newline46mondego>"
"5521splitHere46","20204679splitHere46","public static void main(String[] args) {<newline46mondego>    Developer myDev = new Developer();<newline46mondego><newline46mondego>    myDev.setData();<newline46mondego>    myDev.display();<newline46mondego>}<newline46mondego>"
"5522splitHere46","20204686splitHere46","JSONObject jsonObject = (JSONObject) obj;               <newline46mondego>    JSONArray msg = (JSONArray) jsonObject.get(<doubleQuotes46>items<doubleQuotes46>);<newline46mondego>    Iterator iterator = msg.iterator();<newline46mondego>    while (iterator.hasNext()) {<newline46mondego>      //System.out.println(iterator.next());<newline46mondego>      JSONObject item = (JSONObject) iterator.next();<newline46mondego>      JSONObject item_snippet = (JSONObject) item.get(<doubleQuotes46>snippet<doubleQuotes46>);<newline46mondego>      System.out.println( item_snippet.get(<doubleQuotes46>title<doubleQuotes46>));<newline46mondego>    }<newline46mondego>"
"5523splitHere46","20204686splitHere46","items"
"5524splitHere46","20204686splitHere46","snippet"
"5525splitHere46","20204686splitHere46","title"
"5526splitHere46","20204708splitHere46","import java.awt.*;<newline46mondego>import javax.swing.*;<newline46mondego>import java.awt.event.ActionEvent;<newline46mondego>import java.awt.event.ActionListener;<newline46mondego><newline46mondego>public class TelephonePanel extends JPanel {<newline46mondego><newline46mondego>String numberString = <doubleQuotes46><doubleQuotes46>;<newline46mondego><newline46mondego>JTextField jtf = new JTextField();<newline46mondego>JButton b1 = new JButton(<doubleQuotes46>1<doubleQuotes46>);<newline46mondego>JButton b2 = new JButton(<doubleQuotes46>2<doubleQuotes46>);<newline46mondego>JButton b3 = new JButton(<doubleQuotes46>3<doubleQuotes46>);<newline46mondego>JButton b4 = new JButton(<doubleQuotes46>4<doubleQuotes46>);<newline46mondego>JButton b5 = new JButton(<doubleQuotes46>5<doubleQuotes46>);<newline46mondego>JButton b6 = new JButton(<doubleQuotes46>6<doubleQuotes46>);<newline46mondego>JButton b7 = new JButton(<doubleQuotes46>7<doubleQuotes46>);<newline46mondego>JButton b8 = new JButton(<doubleQuotes46>8<doubleQuotes46>);<newline46mondego>JButton b9 = new JButton(<doubleQuotes46>9<doubleQuotes46>);<newline46mondego>JButton ba = new JButton(<doubleQuotes46>*<doubleQuotes46>);<newline46mondego>JButton b0 = new JButton(<doubleQuotes46>0<doubleQuotes46>);<newline46mondego>JButton bp = new JButton(<doubleQuotes46>#<doubleQuotes46>);<newline46mondego>JButton bclear = new JButton(<doubleQuotes46>Clear<doubleQuotes46>);<newline46mondego><newline46mondego>public TelephonePanel() {<newline46mondego><newline46mondego>    JPanel panel1 = new JPanel(new GridLayout(4, 3));<newline46mondego><newline46mondego>    panel1.add(b1);<newline46mondego>    panel1.add(b2);<newline46mondego>    panel1.add(b3);<newline46mondego>    panel1.add(b4);<newline46mondego>    panel1.add(b5);<newline46mondego>    panel1.add(b6);<newline46mondego>    panel1.add(b7);<newline46mondego>    panel1.add(b8);<newline46mondego>    panel1.add(b9);<newline46mondego>    panel1.add(ba);<newline46mondego>    panel1.add(b0);<newline46mondego>    panel1.add(bp);<newline46mondego><newline46mondego>    ButtonListener listener = new ButtonListener();<newline46mondego><newline46mondego>    b1.addActionListener(listener);<newline46mondego><newline46mondego>    // add listener to all buttons<newline46mondego><newline46mondego>    setLayout(new BorderLayout());<newline46mondego>    add(panel1, BorderLayout.CENTER);<newline46mondego>    add(bclear, BorderLayout.SOUTH);<newline46mondego>    add(jtf, BorderLayout.NORTH);<newline46mondego><newline46mondego>    jtf.setHorizontalAlignment(SwingConstants.RIGHT);<newline46mondego>    jtf.setPreferredSize(new Dimension(300, 30));<newline46mondego><newline46mondego>}<newline46mondego><newline46mondego>public static void main(String[] args) {<newline46mondego>    SwingUtilities.invokeLater(new Runnable() {<newline46mondego><newline46mondego>        public void run() {<newline46mondego>            JFrame frame = new JFrame();<newline46mondego>            frame.add(new TelephonePanel());<newline46mondego>            frame.setSize(300, 400);<newline46mondego>            frame.setVisible(true);<newline46mondego><newline46mondego>        }<newline46mondego>    });<newline46mondego>}<newline46mondego><newline46mondego>class ButtonListener implements ActionListener {<newline46mondego><newline46mondego>    @Override<newline46mondego>    public void actionPerformed(ActionEvent e) {<newline46mondego>        if (e.getSource() == b1) {<newline46mondego>            numberString += <doubleQuotes46>1<doubleQuotes46>;<newline46mondego>            jtf.setText(numberString);<newline46mondego>        } else if (e.getSource() == b2) {<newline46mondego>            numberString += <doubleQuotes46>2<doubleQuotes46>;<newline46mondego>            jtf.setText(numberString);<newline46mondego>        }<newline46mondego><newline46mondego>        // finish all the else ifs<newline46mondego>    }<newline46mondego><newline46mondego>}<newline46mondego>}<newline46mondego>"
"5527splitHere46","20204849splitHere46","C:\Program Files\Java\jdk1.7.0_XX"
"5528splitHere46","20204954splitHere46","dir.mkdir();<newline46mondego>"
"5529splitHere46","20204954splitHere46","dir.mkdirs();<newline46mondego>"
"5530splitHere46","20204954splitHere46","dir"
"5531splitHere46","20204954splitHere46","dir.getAbsolutePath()"
"5532splitHere46","20204954splitHere46","File myFile = new File(Environment.getExternalStorageDirectory(), <doubleQuotes46>dir/savings.csv<doubleQuotes46>);<newline46mondego>if (!myFile.exists()) {<newline46mondego>     myFile.mkdirs();<newline46mondego>     myFile.createNewFile();<newline46mondego>}<newline46mondego>"
"5533splitHere46","20204960splitHere46","LinkedList<? extends Number> test = new LinkedList<Integer>();<newline46mondego>"
"5534splitHere46","20204960splitHere46","LinkedList<List<? extends Number>> numList = new LinkedList<List<Integer>>();<newline46mondego>"
"5535splitHere46","20204960splitHere46","LinkedList<List<Integer>>"
"5536splitHere46","20204960splitHere46","LinkedList<List<? extends Number>>"
"5537splitHere46","20204960splitHere46","List<Integer>"
"5538splitHere46","20204960splitHere46","List<? extends Number>"
"5539splitHere46","20204960splitHere46","List<Dog>"
"5540splitHere46","20204960splitHere46","List<Animal>"
"5541splitHere46","20204960splitHere46","Dog"
"5542splitHere46","20204960splitHere46","Animal"
"5543splitHere46","20204960splitHere46","Dog"
"5544splitHere46","20204960splitHere46","Animal"
"5545splitHere46","20204960splitHere46","List<Integer>"
"5546splitHere46","20204960splitHere46","List<? extends Number>"
"5547splitHere46","20204960splitHere46","? extends"
"5548splitHere46","20204960splitHere46","List<? extends Animal> animals = new List<Dog>();<newline46mondego>"
"5549splitHere46","20204960splitHere46","? extends"
"5550splitHere46","20204960splitHere46","LinkedList<? extends List<? extends Number>> numList = new LinkedList<List<Integer>>();<newline46mondego>"
"5551splitHere46","20204960splitHere46","? extends"
"5552splitHere46","20204960splitHere46","numList"
"5553splitHere46","20204960splitHere46","List<? extends Number>"
"5554splitHere46","20204960splitHere46","ArrayList<Integer>"
"5555splitHere46","20204960splitHere46","LinkedList"
"5556splitHere46","20204960splitHere46","null"
"5557splitHere46","20204960splitHere46","LinkedList<List<Integer>> numList = new LinkedList<List<Integer>>();"
"5558splitHere46","20204960splitHere46","List<Integer>"
"5559splitHere46","20204960splitHere46","LinkedList"
"5560splitHere46","20204980splitHere46","StyledDocument"
"5561splitHere46","20204980splitHere46","Style"
"5562splitHere46","20204980splitHere46","primary"
"5563splitHere46","20204980splitHere46","secondary"
"5564splitHere46","20204980splitHere46","primary"
"5565splitHere46","20204980splitHere46","secondary"
"5566splitHere46","20204980splitHere46","StyledDocument styleDocument =  jTextPane1.getStyledDocument();<newline46mondego>  Style primaryStyle = styleDocument.addStyle(<doubleQuotes46>Primary<doubleQuotes46>, null);<newline46mondego>  Style secondaryStyle = styleDocument.addStyle(<doubleQuotes46>Secondary<doubleQuotes46>, primaryStyle);<newline46mondego><newline46mondego><newline46mondego>  StyleConstants.setFontFamily(primaryStyle, <doubleQuotes46>American Captain<doubleQuotes46>);<newline46mondego>  StyleConstants.setFontSize(primaryStyle, 24);<newline46mondego><newline46mondego>//  StyleConstants.setFontFamily(secondaryStyle, <doubleQuotes46>Bira PERSONAL USE ONLY<doubleQuotes46>);<newline46mondego>  StyleConstants.setFontSize(secondaryStyle, 20);<newline46mondego>  StyleConstants.setForeground(primaryStyle, new Color(0x552AFF));<newline46mondego>  StyleConstants.setForeground(secondaryStyle, Color.black);<newline46mondego>  StyleConstants.setStrikeThrough(secondaryStyle, true);<newline46mondego>  StyleConstants.setUnderline(primaryStyle, true);<newline46mondego><newline46mondego>  try {<newline46mondego>      styleDocument.insertString(0, <doubleQuotes46>Title with American Captain font\n\n<doubleQuotes46>, primaryStyle);<newline46mondego>      styleDocument.insertString(styleDocument.getLength(), <doubleQuotes46>Font demonstration with JTextPane. <doubleQuotes46><newline46mondego>              + <doubleQuotes46>Seriously, it is powerful and has the power to do all kind of styling with text. <doubleQuotes46><newline46mondego>              + <doubleQuotes46>check it out, check its mighty power and be embrassed\n<doubleQuotes46>, secondaryStyle);<newline46mondego>   } catch (BadLocationException ex) {<newline46mondego>                Logger.getLogger(JTextPaneTest.class.getName()).log(Level.SEVERE, null, ex);<newline46mondego>   }<newline46mondego>"
"5567splitHere46","20204980splitHere46","DefaultStyleDocument"
"5568splitHere46","20204980splitHere46","Style"
"5569splitHere46","20204980splitHere46","styleDocument.insertString(int offs, String str, AttributeSet a)"
"5570splitHere46","20204980splitHere46","KeyBoard"
"5571splitHere46","20204980splitHere46","copy-paste"
"5572splitHere46","20204980splitHere46","StyleDocument"
"5573splitHere46","20204980splitHere46","insertString"
"5574splitHere46","20204980splitHere46","DefaultStyleDocument"
"5575splitHere46","20204980splitHere46","insertString"
"5576splitHere46","20204980splitHere46","class CStyleDocument extends DefaultStyledDocument<newline46mondego>{<newline46mondego>    private  Style primaryStyle;<newline46mondego><newline46mondego>    public CStyleDocument() {<newline46mondego>        super();<newline46mondego>         primaryStyle = this.addStyle(<doubleQuotes46>Primary<doubleQuotes46>, null);<newline46mondego>    }<newline46mondego>    public Style getAttrStyle()<newline46mondego>    {<newline46mondego>        return primaryStyle;<newline46mondego>    }<newline46mondego><newline46mondego>    @Override<newline46mondego>    public void insertString(int offs, String str, AttributeSet a) throws BadLocationException {<newline46mondego>        super.insertString(offs, str, primaryStyle); <newline46mondego><newline46mondego>    }<newline46mondego><newline46mondego>}<newline46mondego><newline46mondego>public class JTextPaneTest extends javax.swing.JFrame {<newline46mondego><newline46mondego>    CStyleDocument styleDocument;<newline46mondego><newline46mondego>    public JTextPaneTest() {<newline46mondego>        initComponents();<newline46mondego><newline46mondego>        styleDocument = new CStyleDocument();<newline46mondego>        jTextPane1.setDocument(styleDocument);<newline46mondego><newline46mondego>}<newline46mondego><newline46mondego>    @SuppressWarnings(<doubleQuotes46>unchecked<doubleQuotes46>)<newline46mondego>    // <editor-fold defaultstate=<doubleQuotes46>collapsed<doubleQuotes46> desc=<doubleQuotes46>Generated Code<doubleQuotes46>>                          <newline46mondego>    private void initComponents() {<newline46mondego><newline46mondego>        jScrollPane1 = new javax.swing.JScrollPane();<newline46mondego>        jTextPane1 = new javax.swing.JTextPane();<newline46mondego>        jPanel1 = new javax.swing.JPanel();<newline46mondego>        boldSelButton = new javax.swing.JToggleButton();<newline46mondego>        ulSelButton = new javax.swing.JToggleButton();<newline46mondego>        strkSelButton = new javax.swing.JToggleButton();<newline46mondego><newline46mondego>        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);<newline46mondego>        setMinimumSize(new java.awt.Dimension(400, 200));<newline46mondego><newline46mondego>        jScrollPane1.setViewportView(jTextPane1);<newline46mondego><newline46mondego>        getContentPane().add(jScrollPane1, java.awt.BorderLayout.CENTER);<newline46mondego><newline46mondego>        boldSelButton.setText(<doubleQuotes46>Bold<doubleQuotes46>);<newline46mondego>        boldSelButton.addChangeListener(new javax.swing.event.ChangeListener() {<newline46mondego>            public void stateChanged(javax.swing.event.ChangeEvent evt) {<newline46mondego>                boldSelButtonStateChanged(evt);<newline46mondego>            }<newline46mondego>        });<newline46mondego>        jPanel1.add(boldSelButton);<newline46mondego><newline46mondego>        ulSelButton.setText(<doubleQuotes46>Under Lined<doubleQuotes46>);<newline46mondego>        ulSelButton.addChangeListener(new javax.swing.event.ChangeListener() {<newline46mondego>            public void stateChanged(javax.swing.event.ChangeEvent evt) {<newline46mondego>                ulSelButtonStateChanged(evt);<newline46mondego>            }<newline46mondego>        });<newline46mondego>        jPanel1.add(ulSelButton);<newline46mondego><newline46mondego>        strkSelButton.setText(<doubleQuotes46>Strike Through<doubleQuotes46>);<newline46mondego>        strkSelButton.addChangeListener(new javax.swing.event.ChangeListener() {<newline46mondego>            public void stateChanged(javax.swing.event.ChangeEvent evt) {<newline46mondego>                strkSelButtonStateChanged(evt);<newline46mondego>            }<newline46mondego>        });<newline46mondego>        jPanel1.add(strkSelButton);<newline46mondego><newline46mondego>        getContentPane().add(jPanel1, java.awt.BorderLayout.PAGE_START);<newline46mondego><newline46mondego>        pack();<newline46mondego>    }// </editor-fold>                        <newline46mondego><newline46mondego>    private void boldSelButtonStateChanged(javax.swing.event.ChangeEvent evt) {                                           <newline46mondego>             StyleConstants.setBold(styleDocument.getAttrStyle(), ((JToggleButton)evt.getSource()).isSelected());<newline46mondego>             jTextPane1.requestFocus();<newline46mondego><newline46mondego><newline46mondego><newline46mondego><newline46mondego>    }                                          <newline46mondego><newline46mondego>    private void ulSelButtonStateChanged(javax.swing.event.ChangeEvent evt) {                                         <newline46mondego>        StyleConstants.setUnderline(styleDocument.getAttrStyle(), ((JToggleButton)evt.getSource()).isSelected());<newline46mondego>        jTextPane1.requestFocus();<newline46mondego>    }                                        <newline46mondego><newline46mondego>    private void strkSelButtonStateChanged(javax.swing.event.ChangeEvent evt) {                                           <newline46mondego>       StyleConstants.setStrikeThrough(styleDocument.getAttrStyle(), ((JToggleButton)evt.getSource()).isSelected());<newline46mondego>       jTextPane1.requestFocus();<newline46mondego>    }                                          <newline46mondego><newline46mondego><newline46mondego>    public static void main(String args[]) {<newline46mondego><newline46mondego>        java.awt.EventQueue.invokeLater(new Runnable() {<newline46mondego>            public void run() {<newline46mondego>                JFrame frame = new JTextPaneTest();<newline46mondego>                frame.setVisible(true);<newline46mondego><newline46mondego>            }<newline46mondego>        });<newline46mondego>    }<newline46mondego>    // Variables declaration - do not modify                     <newline46mondego>    private javax.swing.JToggleButton boldSelButton;<newline46mondego>    private javax.swing.JPanel jPanel1;<newline46mondego>    private javax.swing.JScrollPane jScrollPane1;<newline46mondego>    private javax.swing.JTextPane jTextPane1;<newline46mondego>    private javax.swing.JToggleButton strkSelButton;<newline46mondego>    private javax.swing.JToggleButton ulSelButton;<newline46mondego>    // End of variables declaration                   <newline46mondego>}<newline46mondego>"
"5577splitHere46","20205242splitHere46","+"
"5578splitHere46","20205242splitHere46","+"
"5579splitHere46","20205375splitHere46","String s = <doubleQuotes46><doubleQuotes46>;<newline46mondego>do <newline46mondego>{<newline46mondego>    s = (String)JOptionPane.showInputDialog(<doubleQuotes46>Enter item price:<doubleQuotes46>);<newline46mondego>    if (s == null || s.equals(<doubleQuotes46><doubleQuotes46>)) <newline46mondego>    {<newline46mondego>        ...<newline46mondego>    }<newline46mondego>    ...<newline46mondego>}while(s != null || !s.equals(<doubleQuotes46><doubleQuotes46>));<newline46mondego>"
"5580splitHere46","20205380splitHere46","&& price == item.getPrice())<newline46mondego>"
"5581splitHere46","20205380splitHere46","&& this.price == item.price)<newline46mondego>"
"5582splitHere46","20205380splitHere46","&& this.getPrice() == item.getPrice())<newline46mondego>"
"5583splitHere46","20205380splitHere46","DiscountedItem"
"5584splitHere46","20205380splitHere46","getPrice"
"5585splitHere46","20205380splitHere46","@Override<newline46mondego>public float getPrice() {<newline46mondego>    return Math.floor(super.getPrice());<newline46mondego>} <newline46mondego>"
"5586splitHere46","20205380splitHere46","DiscountedItem firstItem = DiscountedItem(1, <doubleQuotes46><doubleQuotes46>, 1.1, <doubleQuotes46><doubleQuotes46>);<newline46mondego>DiscountedItem secondItem = DiscountedItem(1, <doubleQuotes46><doubleQuotes46>, 1.0, <doubleQuotes46><doubleQuotes46>);<newline46mondego>firstItem.equals(secondItem); // Returns true despite different prices.<newline46mondego>"
"5587splitHere46","20205524splitHere46","findViewById"
"5588splitHere46","20205524splitHere46","View"
"5589splitHere46","20205524splitHere46","View"
"5590splitHere46","20205524splitHere46","View"
"5591splitHere46","20205524splitHere46","TextView"
"5592splitHere46","20205524splitHere46","TextView"
"5593splitHere46","20205524splitHere46","public A someMethod() {<newline46mondego>    return new B();<newline46mondego>}<newline46mondego>"
"5594splitHere46","20205524splitHere46","B b = (B) someMethod();<newline46mondego>"
"5595splitHere46","20205608splitHere46","public class LoginVerification {<newline46mondego><newline46mondego>public static int check(String username, String pin) {<newline46mondego>    boolean usernameFound = false, pinMatches = false;<newline46mondego>    try {<newline46mondego>        Scanner fileReader = new Scanner(new FileReader(<doubleQuotes46>accounts.txt<doubleQuotes46>));<newline46mondego><newline46mondego>        while (fileReader.hasNextLine() && !usernameFound) {<newline46mondego>            usernameFound = fileReader.nextLine().indexOf(username) >= 0; // want username to be passed from other class<newline46mondego>        }<newline46mondego>        pinMatches = fileReader.nextLine().indexOf(pin) >= 0; // want pin to be passed from other class<newline46mondego><newline46mondego>        if (usernameFound && pinMatches) {<newline46mondego>            return 1; // return 1 to other class<newline46mondego>        }<newline46mondego><newline46mondego>        else {<newline46mondego>            return 0; // return 0 to other class<newline46mondego>        }<newline46mondego>    }<newline46mondego><newline46mondego>    catch (FileNotFoundException z) {<newline46mondego>        JOptionPane.showMessageDialog(null, <doubleQuotes46>No Accounts found. Please register a new account.<doubleQuotes46>);<newline46mondego>        return 0;<newline46mondego>    }<newline46mondego><newline46mondego>    }<newline46mondego>}<newline46mondego>"
"5596splitHere46","20205608splitHere46","if (LoginVerification.check (username, pinS) == 1)<newline46mondego>               loggedIn = true;<newline46mondego>        else<newline46mondego>               JOptionPane.showMessageDialog (null, <doubleQuotes46>Account/PIN not found/doesn't match.<doubleQuotes46>);<newline46mondego>"
"5597splitHere46","20205989splitHere46","Thread.sleep()"
"5598splitHere46","20206013splitHere46","void"
"5599splitHere46","20206013splitHere46","This_testing"
"5600splitHere46","20206013splitHere46","void"
"5601splitHere46","20206013splitHere46","new This_testing(x, y)"
"5602splitHere46","20206052splitHere46","^(?!.*(.).*\1)\d{10}$<newline46mondego>"
"5603splitHere46","20206052splitHere46","if (str.matches(<doubleQuotes46>^(?!.*(.).*\\1)\\d{10}<doubleQuotes46>))<newline46mondego>    // number passes<newline46mondego>"
"5604splitHere46","20206087splitHere46","public static Link.Node findnthToLast(Link.Node head, int n) {<newline46mondego>    return findnthToLastHelper(head, head, n);<newline46mondego>}<newline46mondego><newline46mondego>private static Link.Node findnthToLastHelper(Link.Node head, Link.Node end, int n) {<newline46mondego>    if ( end == null ) {<newline46mondego>        return ( n > 0 ? null : head);<newline46mondego>    } elseif ( n > 0 ) {<newline46mondego>        return findnthToLastHelper(head, end.next(), n-1);<newline46mondego>    } else {<newline46mondego>        return findnthToLastHelper(head.next(), end.next(), 0);<newline46mondego>    }<newline46mondego>}<newline46mondego>"
"5605splitHere46","20206104splitHere46","<doubleQuotes46>Window.documentFile<doubleQuotes46>"
"5606splitHere46","20206104splitHere46","public void open(File file) {<newline46mondego>    JFrame frame = new JFrame(<doubleQuotes46>My App<doubleQuotes46>);<newline46mondego>    frame.getRootPane().putClientProperty(<doubleQuotes46>Window.documentFile<doubleQuotes46>, file);<newline46mondego>    frame.getRootPane().putClientProperty(<doubleQuotes46>Window.documentModified<doubleQuotes46>, false);<newline46mondego><newline46mondego>    // Load file<newline46mondego>}<newline46mondego>"
"5607splitHere46","20206120splitHere46","KeyGenerator"
"5608splitHere46","20206120splitHere46","KeyGenerator gen = KeyGenerator.getInstance(<doubleQuotes46>AES<doubleQuotes46>);<newline46mondego>gen.init(128); /* 128-bit AES */<newline46mondego>SecretKey secret = gen.generateKey();<newline46mondego>byte[] binary = secret.getEncoded();<newline46mondego>String text = String.format(<doubleQuotes46>%032X<doubleQuotes46>, new BigInteger(+1, binary));<newline46mondego>System.out.println(text);<newline46mondego>"
"5609splitHere46","20206120splitHere46","SecureRandom"
"5610splitHere46","20206120splitHere46","init()"
"5611splitHere46","20206154splitHere46","username = (EditText) findViewById(R.id.textViewSignUpUsername);<newline46mondego>"
"5612splitHere46","20206154splitHere46","textViewSignUpUsername"
"5613splitHere46","20206154splitHere46","TextView"
"5614splitHere46","20206154splitHere46","EditText"
"5615splitHere46","20206200splitHere46","matches()"
"5616splitHere46","20206200splitHere46","<doubleQuotes46>Cc:.*<doubleQuotes46>"
"5617splitHere46","20206200splitHere46","if (line.matches(<doubleQuotes46>(?i)cc:.*<doubleQuotes46>)) // note the .*<newline46mondego>"
"5618splitHere46","20206200splitHere46","if (line.toLowerCase().startsWith(<doubleQuotes46>cc:<doubleQuotes46>))<newline46mondego>"
"5619splitHere46","20206247splitHere46","Package Explorer"
"5620splitHere46","20206257splitHere46","Process p1 = run.exec(new String[]{<doubleQuotes46>sed<doubleQuotes46>, <doubleQuotes46>-i<doubleQuotes46>, <doubleQuotes46>s/ /\\n/g<doubleQuotes46>, filename});<newline46mondego>"
"5621splitHere46","20206257splitHere46","Runtime.exec()"
"5622splitHere46","20206257splitHere46","StringTokenizer"
"5623splitHere46","20206257splitHere46","new StringTokenizer(command)"
"5624splitHere46","20206259splitHere46","public class TabData extends JPanel {<newline46mondego><newline46mondego>    JComboBox someData;<newline46mondego><newline46mondego>    ...<newline46mondego><newline46mondego>    // Get rid of DataListener class and add this public method instead:<newline46mondego>    public void addActionListenerToComboBox(ActionListener listener) {<newline46mondego>        someData.addActionListener(listener);<newline46mondego>    }<newline46mondego>}<newline46mondego>"
"5625splitHere46","20206259splitHere46","public class Tabs extends JTabbedPane {<newline46mondego><newline46mondego>    public Tabs() {<newline46mondego>        go();<newline46mondego>    }<newline46mondego><newline46mondego>    public void go() {<newline46mondego>        TabData data = new TabData();           <newline46mondego>        data.addActionListenerToComboBox(new ActionListener() {<newline46mondego>            @Override<newline46mondego>            public void actionPerformed(ActionEvent e) {<newline46mondego>                JComboBox comboBox = (JComboBox)e.getSource();<newline46mondego>                boolean enableSecondTab = comboBox.getSelectedIndex() > -1;<newline46mondego>                setEnabledAt(1, enableSecondTab);<newline46mondego>            }<newline46mondego><newline46mondego>        });<newline46mondego>        add(<doubleQuotes46>  Data  <doubleQuotes46>, data);<newline46mondego>        TabCalculation calculation = new TabCalculation();<newline46mondego>        add(<doubleQuotes46>Calculation<doubleQuotes46>, calculation);<newline46mondego>        setEnabledAt(1, false);<newline46mondego>    }<newline46mondego>}<newline46mondego>"
"5626splitHere46","20206285splitHere46","calculatefedax(wages,maritalstatus);<newline46mondego>"
"5627splitHere46","20206285splitHere46","String fedtax = calculatefedax(wages,maritalstatus);<newline46mondego>"
"5628splitHere46","20206285splitHere46","import java.util.Scanner;<newline46mondego><newline46mondego>public class calculatetax {<newline46mondego>    public static void main(String[] args) {<newline46mondego><newline46mondego>        Scanner kb = new Scanner(System.in);<newline46mondego>        int employeehr = 0;<newline46mondego>        int ratehr = 0;<newline46mondego>        String stateresidence = <doubleQuotes46><doubleQuotes46>;<newline46mondego>        String maritalstatus = <doubleQuotes46><doubleQuotes46>;<newline46mondego><newline46mondego>        System.out.println(<doubleQuotes46> Employee Hours pls <doubleQuotes46>);<newline46mondego>        employeehr = kb.nextInt();<newline46mondego><newline46mondego>        System.out.println(<doubleQuotes46> Hourly Rate <doubleQuotes46>);<newline46mondego>        ratehr = kb.nextInt();<newline46mondego><newline46mondego>        System.out.println(<doubleQuotes46> State of residence<doubleQuotes46>);<newline46mondego>        stateresidence = kb.nextLine();<newline46mondego><newline46mondego>        System.out.println(<doubleQuotes46>Marital Status<doubleQuotes46>);<newline46mondego>        maritalstatus = kb.nextLine();<newline46mondego><newline46mondego>        int wages = calculatewages(employeehr, ratehr);<newline46mondego>        double fedtax = calculatefedtax(wages, maritalstatus);<newline46mondego>        System.out.println(<doubleQuotes46>Fedtax:<doubleQuotes46> + fedtax);<newline46mondego>    }<newline46mondego><newline46mondego>    public static int calculatewages(int n1, int n2) {<newline46mondego><newline46mondego>        int wages = n1 * n2;<newline46mondego>        System.out.println(<doubleQuotes46>Return Wages<doubleQuotes46> + wages);<newline46mondego>        return wages;<newline46mondego>    }<newline46mondego><newline46mondego>    public static double calculatefedtax(double fedtax, String maritalstatus) {<newline46mondego><newline46mondego>        if (maritalstatus.equals(<doubleQuotes46>marry<doubleQuotes46>)) {<newline46mondego>            fedtax = fedtax * .20;<newline46mondego>        } else if (maritalstatus.equals(<doubleQuotes46>single<doubleQuotes46>)) {<newline46mondego>            fedtax = fedtax * .25;<newline46mondego>        } else {<newline46mondego>            fedtax = fedtax * .22;<newline46mondego>        }<newline46mondego>        return fedtax;<newline46mondego><newline46mondego>    }<newline46mondego><newline46mondego>}<newline46mondego>"
"5629splitHere46","20206285splitHere46","calculatefedax(wages,maritalstatus);<newline46mondego>"
"5630splitHere46","20206295splitHere46","public void onItemClick(AdapterView<?> adapterView, View view, int i, long l) {<newline46mondego>    String title = ((SingleRow) adapterView.getItemAtPosition(i)).title;<newline46mondego>    Intent intent = new Intent(getContext(), ActivityB.class);<newline46mondego>    intent.putExtra(TITLE, title);<newline46mondego>    startActivity(intent);<newline46mondego>}<newline46mondego>"
"5631splitHere46","20206295splitHere46","TITLE"
"5632splitHere46","20206295splitHere46","String"
"5633splitHere46","20206295splitHere46","ActivityA"
"5634splitHere46","20206295splitHere46","ActivityB"
"5635splitHere46","20206295splitHere46","ActivityA"
"5636splitHere46","20206295splitHere46","ActivityB"
"5637splitHere46","20206295splitHere46","Set<String>"
"5638splitHere46","20206295splitHere46","JSONArray"
"5639splitHere46","20206359splitHere46","Document doc = Jsoup.connect(<doubleQuotes46>http://forums.euw.leagueoflegends.com/board/forumdisplay.php?f=10<doubleQuotes46>).get();<newline46mondego><newline46mondego>for (Element element : doc.select(<doubleQuotes46>tr.odd > td, tr.even > td<doubleQuotes46>)) {<newline46mondego>    System.out.println(element.attr(<doubleQuotes46>title<doubleQuotes46>));<newline46mondego>}<newline46mondego>"
"5640splitHere46","20206359splitHere46","Summoners, welcome to the Service Status forum! Here you can come to see information regarding ongoing issues or events that we are currently working...<newline46mondego><newline46mondego><newline46mondego><newline46mondego><newline46mondego>Summoners, <newline46mondego><newline46mondego>We will be performing a maintenance on 26/11 at 04:00 AM, where we will need to bring the EUW Platform offline. <newline46mondego><newline46mondego>Following up on the...<newline46mondego>"
"5641splitHere46","20206381splitHere46","for (int i=0; i<coords.size(); ++i){<newline46mondego>    newCoords=coords.elementAt(i);<newline46mondego>    displayParams.displayCoords.add(new Point2D.Double(newCoords.getX(), yMax-newCoords.getY()));<newline46mondego>}<newline46mondego>"
"5642splitHere46","20206388splitHere46","private abstract void action(<T> obj);<newline46mondego>"
"5643splitHere46","20206388splitHere46","protected abstract void action(T obj);<newline46mondego>"
"5644splitHere46","20206388splitHere46","protected abstract <T> void action(T obj);<newline46mondego>"
"5645splitHere46","20206388splitHere46","private"
"5646splitHere46","20206388splitHere46","protected"
"5647splitHere46","20206388splitHere46","abstract"
"5648splitHere46","20206388splitHere46","private"
"5649splitHere46","20206388splitHere46","protected"
"5650splitHere46","20206388splitHere46","private"
"5651splitHere46","20206433splitHere46","run()"
"5652splitHere46","20206433splitHere46","RUNNABLE"
"5653splitHere46","20206433splitHere46","run()"
"5654splitHere46","20206433splitHere46","Thread.sleep(...)"
"5655splitHere46","20206433splitHere46","TIMED_WAITING"
"5656splitHere46","20206433splitHere46","synchronized"
"5657splitHere46","20206433splitHere46","Object.wait();"
"5658splitHere46","20206433splitHere46","Object.wait(timeoutMillis)"
"5659splitHere46","20206433splitHere46","new Thread(new Runnable() {<newline46mondego>    public void run() {<newline46mondego>        long x = 0;<newline46mondego>        for (long y = 0; y < Long.MAX_VALUE; y++) {<newline46mondego>            x += y;<newline46mondego>        }<newline46mondego>        System.out.println(<doubleQuotes46>it will never get here of course: <doubleQuotes46> + x);<newline46mondego>    }<newline46mondego>}, <doubleQuotes46>Running-Thread<doubleQuotes46>).start();<newline46mondego>"
"5660splitHere46","20206433splitHere46","RUNNABLE"
"5661splitHere46","20206433splitHere46","new Thread(new Runnable() {<newline46mondego>    public void run() {<newline46mondego>        try {<newline46mondego>            Thread.sleep(Long.MAX_VALUE);<newline46mondego>        } catch (InterruptedException e) {<newline46mondego>            // always a good pattern<newline46mondego>            Thread.currentThread().interrupt();<newline46mondego>            e.printStackTrace();<newline46mondego>            return;<newline46mondego>        }<newline46mondego>    }<newline46mondego>}, <doubleQuotes46>Sleeping-Thread<doubleQuotes46>).start();<newline46mondego>"
"5662splitHere46","20206433splitHere46","TIMED_WAITING"
"5663splitHere46","20206448splitHere46","if (employees.get(j).compareTo(employees.get(j+1)) > 0)<newline46mondego>"
"5664splitHere46","20206448splitHere46","if (employees.get(j).compareTo(employees.get(j+1)) <= 0)<newline46mondego>"
"5665splitHere46","20206508splitHere46","Integers"
"5666splitHere46","20206508splitHere46","equals()"
"5667splitHere46","20206508splitHere46","Integers"
"5668splitHere46","20206508splitHere46","=="
"5669splitHere46","20206508splitHere46","equals()"
"5670splitHere46","20206508splitHere46","=="
"5671splitHere46","20206560splitHere46","if (jTextField1.getText() != null ) {<newline46mondego>   jTextField2.setText(<doubleQuotes46><doubleQuotes46> + Double.parseDouble(jTextField1.getText()) * 0.62137);<newline46mondego>} <newline46mondego><newline46mondego>if (jTextField2.getText() != null) {<newline46mondego><newline46mondego>    jTextField1.setText(<doubleQuotes46><doubleQuotes46> + Double.parseDouble(jTextField2.getText()) * 1.62137);<newline46mondego>}<newline46mondego>"
"5672splitHere46","20206560splitHere46","if"
"5673splitHere46","20206560splitHere46","jTextField2"
"5674splitHere46","20206560splitHere46","null"
"5675splitHere46","20206560splitHere46","if"
"5676splitHere46","20206560splitHere46","if (jTextField1.getText() != null ) {<newline46mondego>   double value = Double.parseDouble(jTextField1.getText());<newline46mondego>   String text1 = (value * 0.62137) + <doubleQuotes46><doubleQuotes46>;<newline46mondego>   String text2 = (value * 1.62137) + <doubleQuotes46><doubleQuotes46>;<newline46mondego><newline46mondego>   jTextField2.setText(text1);<newline46mondego>   jTextField1.setText(text2);<newline46mondego>} <newline46mondego>"
"5677splitHere46","20206560splitHere46","import java.awt.BorderLayout;<newline46mondego>import java.awt.GridLayout;<newline46mondego>import java.awt.event.ActionEvent;<newline46mondego>import java.awt.event.ActionListener;<newline46mondego>import javax.swing.JButton;<newline46mondego>import javax.swing.JFrame;<newline46mondego>import javax.swing.JLabel;<newline46mondego>import javax.swing.JPanel;<newline46mondego>import javax.swing.JTextField;<newline46mondego>import javax.swing.SwingConstants;<newline46mondego>import javax.swing.SwingUtilities;<newline46mondego><newline46mondego>public class MilesKiloConverter {<newline46mondego><newline46mondego>private JTextField jtfMiles = new JTextField(15);<newline46mondego>private JTextField jtfKilos = new JTextField(15);<newline46mondego><newline46mondego>private JLabel jlbMiles = new JLabel(<doubleQuotes46>miles<doubleQuotes46>);<newline46mondego>private JLabel jlbKilos = new JLabel(<doubleQuotes46>km<doubleQuotes46>);<newline46mondego><newline46mondego>private JButton compute = new JButton(<doubleQuotes46>Compute<doubleQuotes46>);<newline46mondego>private JFrame frame = new JFrame();<newline46mondego><newline46mondego>double km = 0;<newline46mondego>double miles = 0;<newline46mondego><newline46mondego>public void createAndSHowGui() {<newline46mondego>    JPanel p1 = new JPanel(new GridLayout(2, 2, 5, 5));<newline46mondego>    p1.add(jtfMiles);<newline46mondego>    p1.add(jlbMiles);<newline46mondego>    p1.add(jtfKilos);<newline46mondego>    p1.add(jlbKilos);<newline46mondego><newline46mondego>    frame.add(p1, BorderLayout.CENTER);<newline46mondego>    frame.add(compute, BorderLayout.SOUTH);<newline46mondego><newline46mondego>    jtfMiles.setHorizontalAlignment(SwingConstants.RIGHT);<newline46mondego>    jtfKilos.setHorizontalAlignment(SwingConstants.RIGHT);<newline46mondego><newline46mondego>    jtfKilos.setFocusable(true);<newline46mondego><newline46mondego><newline46mondego>    compute.addActionListener(new ActionListener(){<newline46mondego>        @Override<newline46mondego>        public void actionPerformed(ActionEvent e) {<newline46mondego>            double newKm = 0;<newline46mondego>            double newMiles = 0;<newline46mondego><newline46mondego>            if (<doubleQuotes46><doubleQuotes46>.equals(jtfMiles.getText())) {<newline46mondego>                newKm = Double.parseDouble(jtfKilos.getText());<newline46mondego>                jtfMiles.setText(String.valueOf(newKm * 1.62137));<newline46mondego>                km = newKm;<newline46mondego>            } else if (<doubleQuotes46><doubleQuotes46>.equals(jtfKilos.getText())) {<newline46mondego>                newMiles = Double.parseDouble(jtfMiles.getText());<newline46mondego>                jtfKilos.setText(String.valueOf(newMiles * 0.62137));<newline46mondego><newline46mondego>            } else {<newline46mondego>                newMiles = Double.parseDouble(jtfMiles.getText());<newline46mondego>                newKm = Double.parseDouble(jtfKilos.getText());<newline46mondego><newline46mondego>                double milesDiff = miles - newMiles;<newline46mondego>                double kiloDiff = km - newKm;<newline46mondego><newline46mondego>                if (Math.abs(milesDiff) > Math.abs(kiloDiff)) {<newline46mondego>                    jtfKilos.setText(String.valueOf(newMiles * 1.62137));<newline46mondego>                    km = newKm;<newline46mondego>                    miles = newMiles;<newline46mondego>                } else {<newline46mondego>                    jtfMiles.setText(String.valueOf(newKm * 0.62137));<newline46mondego>                    km = newKm;<newline46mondego>                    miles = newMiles;<newline46mondego>                }<newline46mondego>            }<newline46mondego>        }<newline46mondego>    });<newline46mondego><newline46mondego>    frame.setTitle(<doubleQuotes46>Miles/Kilometers Converter<doubleQuotes46>);<newline46mondego>    frame.pack();<newline46mondego>    frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);<newline46mondego>    frame.setVisible(true);<newline46mondego><newline46mondego>}<newline46mondego><newline46mondego>public static void main(String[] args) {<newline46mondego>    SwingUtilities.invokeLater(new Runnable(){<newline46mondego>        @Override<newline46mondego>        public void run(){<newline46mondego>            new MilesKiloConverter().createAndSHowGui();<newline46mondego>        }<newline46mondego>    });<newline46mondego>}<newline46mondego>}<newline46mondego>"
"5678splitHere46","20206566splitHere46",".zip"
"5679splitHere46","20206566splitHere46","FileOutputStream fos = new FileOutputStream(<doubleQuotes46>C:/temp/myZip2.zip<doubleQuotes46>);<newline46mondego>fos.write(bos.toByteArray());<newline46mondego>"
"5680splitHere46","20206566splitHere46",".write()"
"5681splitHere46","20206566splitHere46",".print()"
"5682splitHere46","20206566splitHere46",".write()"
"5683splitHere46","20206566splitHere46",".zip"
"5684splitHere46","20206566splitHere46",".zip"
"5685splitHere46","20206566splitHere46","PrintStream ps = new PrintStream(urlc.getOutputStream());<newline46mondego>ps.write(bos.toByteArray());<newline46mondego>ps.close();<newline46mondego>"
"5686splitHere46","20206566splitHere46","http://localhost:8080/MyWebApp/ws/rest"
"5687splitHere46","20206650splitHere46","System.out.println(str);<newline46mondego><newline46mondego>for (i = str.length(); i < 50; i++){<newline46mondego>    System.out.print(<doubleQuotes46>.<doubleQuotes46>);<newline46mondego>}<newline46mondego><newline46mondego>System.out.println(num);<newline46mondego>"
"5688splitHere46","20206650splitHere46","title"
"5689splitHere46","20206650splitHere46","(50 - (title length + page number length))"
"5690splitHere46","20206650splitHere46","page number"
"5691splitHere46","20206651splitHere46","// create an array of coordinates in x, y, x, y... format<newline46mondego>int[] points = {  <newline46mondego>  34, 163,<newline46mondego>  67, 345,<newline46mondego>  474, 84,<newline46mondego>  682, 234,<newline46mondego>  495, 396,<newline46mondego>  174, 379,<newline46mondego>  275, 574<newline46mondego>};<newline46mondego><newline46mondego>void setup() {<newline46mondego>  size(800, 600);<newline46mondego>  smooth();  <newline46mondego>  noFill();<newline46mondego>}<newline46mondego><newline46mondego>void draw() {<newline46mondego>  background(255);<newline46mondego><newline46mondego>  draw_curve_from_points(points);  // draw the curve<newline46mondego>  draw_handles_on_points(points, 6, 126);  // draw the handles<newline46mondego><newline46mondego>}<newline46mondego><newline46mondego>// a function to draw the curve<newline46mondego>void draw_curve_from_points(int[] _points) { <newline46mondego>  noFill();<newline46mondego>  stroke(0);<newline46mondego>  strokeWeight(1);<newline46mondego><newline46mondego>  int len = _points.length;<newline46mondego>  beginShape();<newline46mondego>  curveVertex(_points[0], _points[1]);  // the first point is duplicated to be used as control point<newline46mondego>  for (int i = 0; i < len; i +=2) {<newline46mondego>    curveVertex(_points[i], _points[i+1]);<newline46mondego>  }<newline46mondego>  curveVertex(_points[len-2], _points[len-1]);  // idem for last point<newline46mondego>  endShape();<newline46mondego>}<newline46mondego><newline46mondego>// draw handles on the points<newline46mondego>void draw_handles_on_points(int[] _points, float _size, int _gray) {<newline46mondego>  int len = _points.length;<newline46mondego>  pushStyle();<newline46mondego>  noStroke();<newline46mondego>  fill(_gray);<newline46mondego>  for (int i = 0; i < len; i +=2) {<newline46mondego>    ellipse(_points[i], _points[i+1], _size, _size);<newline46mondego>  }<newline46mondego>  popStyle();<newline46mondego>}<newline46mondego>"
"5692splitHere46","20206865splitHere46","sprites[(i * cols) + j] = bigImg.getSubimage(<newline46mondego>"
"5693splitHere46","20206865splitHere46","ImageIO.read(new File(<doubleQuotes46>res/sheet.png<doubleQuotes46>))<newline46mondego>"
"5694splitHere46","20206946splitHere46","normalize (double[] zahlen, double diff)"
"5695splitHere46","20206984splitHere46","private static String encode(String num, int x)<newline46mondego>{<newline46mondego>  StringBuilder sb = new StringBuilder();<newline46mondego>  for (char c : num.toCharArray()) {<newline46mondego>    sb.append((char) (c + x));<newline46mondego>  }<newline46mondego>  return sb.toString();<newline46mondego>}<newline46mondego>"
"5696splitHere46","20206984splitHere46","public static void main(String[] args) <newline46mondego>{<newline46mondego>  if (args == null || args.length < 2) {<newline46mondego>    System.out.println(<doubleQuotes46>Not enough arguments.<doubleQuotes46>);<newline46mondego>    System.exit(1);<newline46mondego>  }<newline46mondego>  int val = Integer.valueOf(args[args.length - 1]);<newline46mondego>  for (int i = 0; i < args.length - 1; i++) {<newline46mondego>    if (i != 0) {<newline46mondego>      System.out.print(' ');<newline46mondego>    }<newline46mondego>    System.out.print(encode(args[i], val));<newline46mondego>  }<newline46mondego>  System.out.println();<newline46mondego>}<newline46mondego>"
"5697splitHere46","20207023splitHere46","public static char getOperator(String fileContent){<newline46mondego><newline46mondego>    int checkAdd = fileContent.indexOf('+');<newline46mondego>    int checkMinus = fileContent.indexOf('-');<newline46mondego>    int checkMulti = fileContent.indexOf('*');<newline46mondego>    int checkDivi = fileContent.indexOf('/');<newline46mondego><newline46mondego>    if (checkAdd != -1){<newline46mondego>        char operator = fileContent.charAt(checkAdd); <newline46mondego>        return operator;<newline46mondego>    }   <newline46mondego>    else if (checkMinus != -1) {<newline46mondego>        char operator = fileContent.charAt(checkMinus);<newline46mondego>        return operator;<newline46mondego>    }<newline46mondego>    else if (checkMulti != -1) {<newline46mondego>        char operator = fileContent.charAt(checkMulti);<newline46mondego>        return operator;<newline46mondego>    }<newline46mondego>    else if (checkDivi != -1){<newline46mondego>        char operator = fileContent.charAt(checkDivi);<newline46mondego>        return operator;<newline46mondego>    }<newline46mondego><newline46mondego>    return ' ';<newline46mondego>}<newline46mondego>"
"5698splitHere46","20207245splitHere46","DisplayPointsAcceptedByFilter"
"5699splitHere46","20207350splitHere46","ScriptEngineManager manager = new ScriptEngineManager();<newline46mondego>ScriptEngine engine = manager.getEngineByName(<doubleQuotes46>js<doubleQuotes46>);        <newline46mondego>Object result = engine.eval(<doubleQuotes46>67+12-45<doubleQuotes46>); //you can insert any expression here<newline46mondego>"
"5700splitHere46","20207370splitHere46","java.awt.event"
"5701splitHere46","20207370splitHere46","java.awt.BorderLayout myBorderLayout = new java.awt.BorderLayout(5, 5);<newline46mondego>"
"5702splitHere46","20207584splitHere46","for index, sample in enumerate(getSamples(sound)):<newline46mondego>    setSampleValue(sample, int((((min-max)/length) * index) + max))<newline46mondego>"
"5703splitHere46","20207675splitHere46","input = input.replaceAll(<doubleQuotes46> <doubleQuotes46>, <doubleQuotes46><doubleQuotes46>);<newline46mondego>"
"5704splitHere46","20207675splitHere46","replaceAll()"
"5705splitHere46","20207675splitHere46","Hello"
"5706splitHere46","20207675splitHere46","scanner.next()"
"5707splitHere46","20207675splitHere46","scanner.nextLine()"
"5708splitHere46","20207675splitHere46","\r\n"
"5709splitHere46","20207675splitHere46","public static void main (String [] args) {<newline46mondego>        String input;<newline46mondego>        Scanner console = new Scanner(System.in);<newline46mondego><newline46mondego>        System.out.print(<doubleQuotes46>enter text: <doubleQuotes46>);<newline46mondego>        input = console.nextLine(); // Change here<newline46mondego>        System.out.println();<newline46mondego><newline46mondego>        input = input.replaceAll(<doubleQuotes46> <doubleQuotes46>, <doubleQuotes46><doubleQuotes46>); // Change here<newline46mondego>        System.out.println(input);<newline46mondego>}<newline46mondego>"
"5710splitHere46","20207775splitHere46","File->Import"
"5711splitHere46","20207775splitHere46","General"
"5712splitHere46","20207775splitHere46","Archive"
"5713splitHere46","20207775splitHere46","File->Import"
"5714splitHere46","20207775splitHere46","General"
"5715splitHere46","20207775splitHere46","Existing Projects into Workspace"
"5716splitHere46","20207775splitHere46","Netbeans"
"5717splitHere46","20207775splitHere46","Netbeans"
"5718splitHere46","20207775splitHere46","NetBeans"
"5719splitHere46","20207775splitHere46","NetBeans"
"5720splitHere46","20207775splitHere46","File -> Import Project -> From Zip"
"5721splitHere46","20207799splitHere46","entity.addPart(<doubleQuotes46>album<doubleQuotes46>, new StringBody(spinselected, Charset.forName(<doubleQuotes46>UTF-8<doubleQuotes46>)));"
"5722splitHere46","20207799splitHere46","spinselected"
"5723splitHere46","20207799splitHere46","StringBody"
"5724splitHere46","20207799splitHere46","Caused by: java.lang.IllegalArgumentException: Text may not be null<newline46mondego>at org.apache.http.entity.mime.content.StringBody.<init>(StringBody.java:94) <newline46mondego>"
"5725splitHere46","20207875splitHere46","Elements e = doc.select(<doubleQuotes46>td.yfnc_tabledata1<doubleQuotes46>);<newline46mondego>Element open = e.get(1);   // index for open is 1<newline46mondego>Element volume = e.get(9); // index for volume is 9<newline46mondego><newline46mondego>System.out.println(<doubleQuotes46>Open: <doubleQuotes46> + open.text());<newline46mondego>System.out.println(<doubleQuotes46>Volume: <doubleQuotes46> + volume.text());<newline46mondego>"
"5726splitHere46","20207875splitHere46","Open: 1,037.16<newline46mondego>Volume: 1,613,009<newline46mondego>"
"5727splitHere46","20207875splitHere46","getElementsByTag(<doubleQuotes46>Open<doubleQuotes46>)"
"5728splitHere46","20207875splitHere46","getElementsByTag(<doubleQuotes46>Volume<doubleQuotes46>)"
"5729splitHere46","20207977splitHere46","if (dflag) {<newline46mondego>  delay(2000);<newline46mondego>  dflag = false;<newline46mondego>}<newline46mondego>"
"5730splitHere46","20207977splitHere46","if (lives < 1) {<newline46mondego>  // for(int df = 0; df < 1000; df++) {<newline46mondego>  background(0);<newline46mondego>  textSize(100);<newline46mondego>  text(<doubleQuotes46>You Lost<doubleQuotes46>,100,100);<newline46mondego>  dflag = true;<newline46mondego>  //redraw();<newline46mondego>  lives = 10;<newline46mondego>  x = (int)random(width);<newline46mondego>  y = (int)random(height / 2);<newline46mondego>  velocity = new PVector(1,random(-1.4,-0.6));<newline46mondego>  score = 0;<newline46mondego>} else {<newline46mondego>  textSize(13);<newline46mondego>  background(0);<newline46mondego>  stroke(255);<newline46mondego>  text(score,10,10);<newline46mondego>  String l = <doubleQuotes46><doubleQuotes46>;<newline46mondego>  for (int q = 0; q < lives; q++) { l += <doubleQuotes46>%<doubleQuotes46>; }<newline46mondego>  text(l,50,10);<newline46mondego>  strokeWeight(balld);<newline46mondego>  point(x,y);<newline46mondego>  strokeWeight(8);<newline46mondego>  line(paddlex,height - 30,paddlex + paddlew,height-30);<newline46mondego>}<newline46mondego>"
"5731splitHere46","20208057splitHere46","size"
"5732splitHere46","20208057splitHere46","size"
"5733splitHere46","20208057splitHere46","ArrayList"
"5734splitHere46","20208182splitHere46","class Test {<newline46mondego>    static int round(float val) {...}<newline46mondego>}<newline46mondego>"
"5735splitHere46","20208182splitHere46","Method round = Test.class.getMethod(<doubleQuotes46>round<doubleQuotes46>, Float.TYPE);<newline46mondego>"
"5736splitHere46","20208182splitHere46","if (round.getReturnType == Integer.TYPE) {<newline46mondego>    System.out.println(<doubleQuotes46>Method 'round' returns an int.<doubleQuotes46>);<newline46mondego>}<newline46mondego>"
"5737splitHere46","20208182splitHere46","Float.class"
"5738splitHere46","20208182splitHere46","Method round = Test.class.getMethod(<doubleQuotes46>round<doubleQuotes46>, Float.class);<newline46mondego>"
"5739splitHere46","20208182splitHere46","static int round(Float val) {...}<newline46mondego>"
"5740splitHere46","20208386splitHere46","n1"
"5741splitHere46","20208386splitHere46","n2"
"5742splitHere46","20208386splitHere46","John=0"
"5743splitHere46","20208386splitHere46","Bob=1"
"5744splitHere46","20208386splitHere46","coding=0"
"5745splitHere46","20208386splitHere46","QA=1"
"5746splitHere46","20208386splitHere46","support=2"
"5747splitHere46","20208386splitHere46","John->coding"
"5748splitHere46","20208386splitHere46","Bob->support"
"5749splitHere46","20208386splitHere46","g[x]=y"
"5750splitHere46","20208386splitHere46","0 <= x < n1"
"5751splitHere46","20208386splitHere46","0 <= y < n2"
"5752splitHere46","20208386splitHere46","public static void main(String[] args) {<newline46mondego>  Scanner sc = new Scanner(System.in);<newline46mondego>  int n1 = sc.nextInt();<newline46mondego>  int n2 = sc.nextInt();<newline46mondego>  int m = sc.nextInt();<newline46mondego>  LinkedList<Integer>[] g = new LinkedList[n1];<newline46mondego>  for (int j = 0; j < n1; j++) {<newline46mondego>    g[j] = new LinkedList<Integer>();<newline46mondego>  }<newline46mondego>  int i = 0;<newline46mondego>  while(i != m){<newline46mondego>    int v = sc.nextInt();<newline46mondego>    int v2 = sc.nextInt();<newline46mondego>    if(v>=1 && v<=n1) { <newline46mondego>        //v belongs in first set <newline46mondego>        g[v-1].add(v2-n1-1);<newline46mondego>    }else if(v>=n1+1 && v<=n1+n2) { <newline46mondego>        //v belongs in the second set, v2 into the first<newline46mondego>        g[v2-1].add(v-n1-1);<newline46mondego>    }<newline46mondego>    i++;<newline46mondego>  }<newline46mondego>  System.out.println(maxMatching(g, n2));<newline46mondego>}<newline46mondego>"
"5753splitHere46","20208409splitHere46","public static void main (String[] args) throws java.lang.Exception<newline46mondego>    {<newline46mondego>        String[] expr = new String[]{<doubleQuotes46>67<doubleQuotes46>, <doubleQuotes46>+<doubleQuotes46>, <doubleQuotes46>45<doubleQuotes46>, <doubleQuotes46>-<doubleQuotes46>, <doubleQuotes46>12<doubleQuotes46>, <doubleQuotes46>*<doubleQuotes46>, <doubleQuotes46>5<doubleQuotes46>, <doubleQuotes46>/<doubleQuotes46>, <doubleQuotes46>78<doubleQuotes46>};<newline46mondego>        int current = 0;<newline46mondego>        StringBuilder postfix = new StringBuilder();<newline46mondego><newline46mondego>        // handle first three<newline46mondego>        postfix.append(expr[current]).append(<doubleQuotes46> <doubleQuotes46>);<newline46mondego>        postfix.append(expr[current+2]).append(<doubleQuotes46> <doubleQuotes46>);<newline46mondego>        postfix.append(expr[current+1]).append(<doubleQuotes46> <doubleQuotes46>);<newline46mondego>        current += 3;<newline46mondego><newline46mondego>        // handle rest<newline46mondego>        while( current <= expr.length-2 ){<newline46mondego>            postfix.append(expr[current+1]).append(<doubleQuotes46> <doubleQuotes46>);<newline46mondego>            postfix.append(expr[current]).append(<doubleQuotes46> <doubleQuotes46>);<newline46mondego>            current += 2;<newline46mondego>        }<newline46mondego><newline46mondego>        System.out.println(postfix.toString());<newline46mondego>    }<newline46mondego>"
"5754splitHere46","20208590splitHere46","isTie()"
"5755splitHere46","20208590splitHere46","true"
"5756splitHere46","20208590splitHere46","(!((board[0] == 'O' && board[1] == 'O' && board[2] == 'O') || (board[0] == 'O' && board[3] == 'O' && board[6] == 'O') ||<newline46mondego>            (board[0] == 'O' && board[4] == 'O' && board[8] == 'O') || (board[3] == 'O' && board[4] == 'O' && board[5] == 'O') ||<newline46mondego>            (board[1] == 'O' && board[4] == 'X' && board[7] == 'O') || (board[2] == 'O' && board[5] == 'O' && board[8] == 'O') ||<newline46mondego>            (board[6] == 'O' && board[7] == 'O' && board[8] == 'O') || (board[6] == 'O' && board[4] == 'O' && board[2] == 'O'))<newline46mondego>"
"5757splitHere46","20208590splitHere46","true"
"5758splitHere46","20208590splitHere46","true"
"5759splitHere46","20208590splitHere46","isDone()"
"5760splitHere46","20208590splitHere46","isHumanWin"
"5761splitHere46","20208590splitHere46","isComputerWin"
"5762splitHere46","20208590splitHere46","isTie"
"5763splitHere46","20208590splitHere46","private static boolean isDone() {<newline46mondego>    return isComputerWin() || isHumanWin();<newline46mondego>}<newline46mondego>"
"5764splitHere46","20208645splitHere46","Intent intent = new Intent(DashboardScreen.this, ServiceClass.class);<newline46mondego>PendingIntent pintent = PendingIntent.getService(DashboardScreen.this, 0, intent, 0);<newline46mondego>AlarmManager alarm = (AlarmManager)getSystemService(Context.ALARM_SERVICE);<newline46mondego>alarm.setRepeating(AlarmManager.RTC_WAKEUP, cal.getTimeInMillis(), 30*1000, pintent);<newline46mondego>"
"5765splitHere46","20208645splitHere46","<service android:enabled=<doubleQuotes46>true<doubleQuotes46> android:name=<doubleQuotes46>.ServiceClass<doubleQuotes46> /><newline46mondego>"
"5766splitHere46","20208711splitHere46","www.google.com"
"5767splitHere46","20208711splitHere46","> www.google.com<newline46mondego>Non-authoritative answer:<newline46mondego>Server:  perseus.jhmg.pvt<newline46mondego>Address:  192.168.10.254<newline46mondego><newline46mondego>Name:    www.google.com<newline46mondego>Addresses:  2607:f8b0:400a:801::1010<newline46mondego>          173.194.33.146<newline46mondego>          173.194.33.144<newline46mondego>          173.194.33.148<newline46mondego>          173.194.33.147<newline46mondego>          173.194.33.145<newline46mondego>"
"5768splitHere46","20208711splitHere46","www.google.com"
"5769splitHere46","20208711splitHere46","Canonical REQUESTSERVER sea09s17-in-f17.1e100.net<newline46mondego>"
"5770splitHere46","20208711splitHere46","> 173.194.33.146<newline46mondego>Server:  perseus.jhmg.pvt<newline46mondego>Address:  192.168.10.254<newline46mondego><newline46mondego>Name:    sea09s17-in-f18.1e100.net<newline46mondego>Address:  173.194.33.146<newline46mondego>"
"5771splitHere46","20208723splitHere46","public static void addPatients ( String[] n ,int[] a ,char[] t )<newline46mondego><newline46mondego> {<newline46mondego><newline46mondego>    final Scanner scanner = new Scanner(System.in);<newline46mondego>    int i=0;<newline46mondego>    while (i<n.length )<newline46mondego>    {<newline46mondego>        System.out.println(<doubleQuotes46>Enter Patientâ€™s Name: <doubleQuotes46>);<newline46mondego>        n[i] = scanner.nextLine();<newline46mondego><newline46mondego>        System.out.println(<doubleQuotes46>Enter Patientâ€™s Age: <doubleQuotes46>);<newline46mondego>        a[i]=scanner.nextInt();<newline46mondego><newline46mondego>        System.out.println(<doubleQuotes46>Enter Patientâ€™s Medical test: <doubleQuotes46>);<newline46mondego>        t[i]=scanner.next().charAt(0);<newline46mondego>        i++;<newline46mondego>        scanner.nextLine(); // To swallow the extra excess newline(enter) character.<newline46mondego>    }<newline46mondego>    System.out.println(<doubleQuotes46>Enter the patientâ€™s index to find his/her information : <doubleQuotes46>);<newline46mondego>    final int index= scanner.nextInt();<newline46mondego>    System.out.println (<doubleQuotes46>Patient name : <doubleQuotes46> + n[index] +<doubleQuotes46>\n Patient age : <doubleQuotes46> + a[index] +<doubleQuotes46>\n Patient    Medical test: <doubleQuotes46> + t[index]);<newline46mondego>}<newline46mondego>"
"5772splitHere46","20208811splitHere46","@prefix : <http://stackoverflow.com/q/20203733/1281433> .<newline46mondego>@prefix dc: <http://purl.org/dc/elements/1.1/> .<newline46mondego><newline46mondego>:a dc:title <doubleQuotes46>Great Gatsby<doubleQuotes46> .<newline46mondego>:b dc:title <doubleQuotes46>Boring Gatsby<doubleQuotes46> .<newline46mondego>:c dc:title <doubleQuotes46>Great Expectations<doubleQuotes46> .<newline46mondego>:d dc:title <doubleQuotes46>The Great Muppet Caper<doubleQuotes46> .<newline46mondego>"
"5773splitHere46","20208811splitHere46","prefix : <http://stackoverflow.com/q/20203733/1281433><newline46mondego>prefix dc: <http://purl.org/dc/elements/1.1/><newline46mondego><newline46mondego>select ?x ?title where {<newline46mondego>  # this is just in place of this.getTitle().  It provides a value for<newline46mondego>  # ?TITLE that is <doubleQuotes46>Gatsby Strikes Again<doubleQuotes46>.<newline46mondego>  values ?TITLE { <doubleQuotes46>Gatsby Strikes Again<doubleQuotes46> }<newline46mondego><newline46mondego>  # Select a thing and its title.<newline46mondego>  ?x dc:title ?title .<newline46mondego><newline46mondego>  # Then filter based on whether the ?title matches the result<newline46mondego>  # of replacing the strings in ?TITLE with <doubleQuotes46>|<doubleQuotes46>, and matching<newline46mondego>  # case insensitively.<newline46mondego>  filter( regex( ?title, replace( ?TITLE, <doubleQuotes46> <doubleQuotes46>, <doubleQuotes46>|<doubleQuotes46> ), <doubleQuotes46>i<doubleQuotes46> ))<newline46mondego>}<newline46mondego>"
"5774splitHere46","20208811splitHere46","------------------------<newline46mondego>| x  | title           |<newline46mondego>========================<newline46mondego>| :b | <doubleQuotes46>Boring Gatsby<doubleQuotes46> |<newline46mondego>| :a | <doubleQuotes46>Great Gatsby<doubleQuotes46>  |<newline46mondego>------------------------<newline46mondego>"
"5775splitHere46","20208811splitHere46","prefix : <http://stackoverflow.com/q/20203733/1281433><newline46mondego>prefix dc: <http://purl.org/dc/elements/1.1/><newline46mondego><newline46mondego>select ?x ?xtitle ?y ?ytitle where {<newline46mondego>  ?x dc:title ?xtitle .<newline46mondego>  ?y dc:title ?ytitle .<newline46mondego>  filter( regex( ?xtitle, replace( ?ytitle, <doubleQuotes46> <doubleQuotes46>, <doubleQuotes46>|<doubleQuotes46> ), <doubleQuotes46>i<doubleQuotes46> ) && ?x != ?y )<newline46mondego>}<newline46mondego>order by ?x ?y<newline46mondego>"
"5776splitHere46","20208811splitHere46","-----------------------------------------------------------------<newline46mondego>| x  | xtitle                   | y  | ytitle                   |<newline46mondego>=================================================================<newline46mondego>| :a | <doubleQuotes46>Great Gatsby<doubleQuotes46>           | :b | <doubleQuotes46>Boring Gatsby<doubleQuotes46>          |<newline46mondego>| :a | <doubleQuotes46>Great Gatsby<doubleQuotes46>           | :c | <doubleQuotes46>Great Expectations<doubleQuotes46>     |<newline46mondego>| :a | <doubleQuotes46>Great Gatsby<doubleQuotes46>           | :d | <doubleQuotes46>The Great Muppet Caper<doubleQuotes46> |<newline46mondego>| :b | <doubleQuotes46>Boring Gatsby<doubleQuotes46>          | :a | <doubleQuotes46>Great Gatsby<doubleQuotes46>           |<newline46mondego>| :c | <doubleQuotes46>Great Expectations<doubleQuotes46>     | :a | <doubleQuotes46>Great Gatsby<doubleQuotes46>           |<newline46mondego>| :c | <doubleQuotes46>Great Expectations<doubleQuotes46>     | :d | <doubleQuotes46>The Great Muppet Caper<doubleQuotes46> |<newline46mondego>| :d | <doubleQuotes46>The Great Muppet Caper<doubleQuotes46> | :a | <doubleQuotes46>Great Gatsby<doubleQuotes46>           |<newline46mondego>| :d | <doubleQuotes46>The Great Muppet Caper<doubleQuotes46> | :c | <doubleQuotes46>Great Expectations<doubleQuotes46>     |<newline46mondego>-----------------------------------------------------------------<newline46mondego>"
"5777splitHere46","20208811splitHere46","The|Words|With||Two|Spaces"
"5778splitHere46","20208826splitHere46","foo"
"5779splitHere46","20208876splitHere46","char[] characters = {0, 1, 2}; <newline46mondego>"
"5780splitHere46","20208876splitHere46","0 1 2"
"5781splitHere46","20208876splitHere46","'0'  '1'  '2'"
"5782splitHere46","20208876splitHere46","char[] characters = {'0', '1', '2'}; <newline46mondego>"
"5783splitHere46","20208895splitHere46","List<String> myListOfStrings = ...// some List<newline46mondego><newline46mondego>new IterableList<String>() { // missing ()<newline46mondego>    public void action(String s) {<newline46mondego>        // do something<newline46mondego>    }<newline46mondego>}.perfrom(myListOfStrings);<newline46mondego>"
"5784splitHere46","20208895splitHere46","action"
"5785splitHere46","20208895splitHere46","public"
"5786splitHere46","20208895splitHere46","action()"
"5787splitHere46","20208895splitHere46","public"
"5788splitHere46","20208895splitHere46","perform"
"5789splitHere46","20208895splitHere46","public class AnonymousClass extends IterableList<String> {<newline46mondego>    public void action(String s) {<newline46mondego>        // do something<newline46mondego>    }<newline46mondego>}<newline46mondego><newline46mondego>...<newline46mondego>new AnonymousClass().perfrom(myListOfStrings);<newline46mondego>"
"5790splitHere46","20208931splitHere46","Stack.remove"
"5791splitHere46","20208931splitHere46","ConcurrentModificationException"
"5792splitHere46","20208931splitHere46","Iterator"
"5793splitHere46","20208931splitHere46","ConcurrentModificationException"
"5794splitHere46","20208931splitHere46","Iterator.remove()"
"5795splitHere46","20208931splitHere46","Iterator<Integer> it = s.iterator();<newline46mondego>    while(it.hasNext())<newline46mondego>    {<newline46mondego>        Integer val= it.next();          <newline46mondego>        if(val>=0)<newline46mondego>        {<newline46mondego>            it.remove(); //Use Iterator.remove<newline46mondego>            //s.remove(val);<newline46mondego>            q.add(val);<newline46mondego>        }<newline46mondego>    }<newline46mondego>"
"5796splitHere46","20209116splitHere46","public static void main(String args[]) {<newline46mondego>    /* Create and display the form */<newline46mondego>    java.awt.EventQueue.invokeLater(new Runnable() {<newline46mondego>        @Override<newline46mondego>        public void run() {<newline46mondego><newline46mondego>            GameUI cgui = new GameUI();<newline46mondego>            cgui.setVisible(true);<newline46mondego>        }<newline46mondego>    });<newline46mondego><newline46mondego>}<newline46mondego>"
"5797splitHere46","20209116splitHere46","public GameUI() {<newline46mondego>    startGame(<doubleQuotes46>Tic Tac<doubleQuotes46>);<newline46mondego>    storeButtons();<newline46mondego>}<newline46mondego>"
"5798splitHere46","20209116splitHere46","private void startGame(String message) {<newline46mondego>    String host, login;<newline46mondego>    int temp = 0;<newline46mondego><newline46mondego>    JTextField hostText = new JTextField();<newline46mondego>    JTextField loginText = new JTextField();<newline46mondego><newline46mondego>    Object[] info = {<doubleQuotes46>Host: <doubleQuotes46>, hostText, <doubleQuotes46>login ID: <doubleQuotes46>, loginText};<newline46mondego><newline46mondego>    temp = JOptionPane.showConfirmDialog(rootPane, info, message, JOptionPane.OK_CANCEL_OPTION);<newline46mondego><newline46mondego>    while (true) {<newline46mondego>        try {<newline46mondego>            if (temp == JOptionPane.OK_OPTION) {<newline46mondego>                host = hostText.getText();<newline46mondego>                login = loginText.getText();<newline46mondego><newline46mondego>                game = new Client(login, host, 5555, this); //Initializes the game<newline46mondego>                initComponents();<newline46mondego>                break;<newline46mondego>            } else if (temp == JOptionPane.CANCEL_OPTION || temp == JOptionPane.CLOSED_OPTION) {<newline46mondego>                System.exit(0);<newline46mondego>            }<newline46mondego>        } catch (IOException e2) {<newline46mondego>            connectionError(<doubleQuotes46>Can't connect to the game server!<doubleQuotes46>);<newline46mondego>            System.exit(0);<newline46mondego>        }<newline46mondego>    }<newline46mondego>    //Scrubs memory for more RAM :)<newline46mondego>    login = null;<newline46mondego>    host = null;<newline46mondego><newline46mondego>}<newline46mondego>"
"5799splitHere46","20209116splitHere46","while"
"5800splitHere46","20209116splitHere46","Socket"
"5801splitHere46","20209116splitHere46","SwingWorker"
"5802splitHere46","20209116splitHere46","Socket"
"5803splitHere46","20209194splitHere46","id name group_id<newline46mondego> 1 jack  1<newline46mondego> 2  joe  2<newline46mondego> 3  Mack 1<newline46mondego>"
"5804splitHere46","20209194splitHere46","Boolean available<newline46mondego>"
"5805splitHere46","20209194splitHere46","id name group_id available<newline46mondego>1   jack 1         true<newline46mondego>2    Joe  2         true<newline46mondego>3    Mack  1        false<newline46mondego>"
"5806splitHere46","20209214splitHere46","<manifest xmlns:android=<doubleQuotes46>http://schemas.android.com/apk/res/android<doubleQuotes46><newline46mondego>      package=<doubleQuotes46>com.RWF.Wheels5Fun2<doubleQuotes46><newline46mondego>      android:versionCode=<doubleQuotes46>1<doubleQuotes46><newline46mondego>      android:versionName=<doubleQuotes46>1.0<doubleQuotes46>><newline46mondego><newline46mondego>    <uses-sdk android:minSdkVersion=<doubleQuotes46>14<doubleQuotes46>/><newline46mondego>    <uses-feature android:glEsVersion=<doubleQuotes46>0x00020000<doubleQuotes46> /><newline46mondego><newline46mondego>    <application android:label=<doubleQuotes46>@string/app_name<doubleQuotes46><newline46mondego>    android:icon=<doubleQuotes46>@drawable/spinpressed<doubleQuotes46>><newline46mondego><newline46mondego>        <activity android:name=<doubleQuotes46>com.RWF.YOUR_ACTIVITY_NAME<doubleQuotes46><newline46mondego>                  android:label=<doubleQuotes46>@string/app_name<doubleQuotes46><newline46mondego>                  android:screenOrientation=<doubleQuotes46>landscape<doubleQuotes46><newline46mondego>                  android:theme=<doubleQuotes46>@android:style/Theme.NoTitleBar.Fullscreen<doubleQuotes46><newline46mondego>                  android:configChanges=<doubleQuotes46>orientation<doubleQuotes46>><newline46mondego>            <intent-filter><newline46mondego>                <action android:name=<doubleQuotes46>android.intent.action.MAIN<doubleQuotes46> /><newline46mondego>                <category android:name=<doubleQuotes46>android.intent.category.LAUNCHER<doubleQuotes46> /><newline46mondego>            </intent-filter><newline46mondego>        </activity><newline46mondego>    </application><newline46mondego>    <supports-screens android:largeScreens=<doubleQuotes46>true<doubleQuotes46><newline46mondego>                      android:smallScreens=<doubleQuotes46>true<doubleQuotes46><newline46mondego>                      android:anyDensity=<doubleQuotes46>true<doubleQuotes46><newline46mondego>                      android:normalScreens=<doubleQuotes46>true<doubleQuotes46>/><newline46mondego><newline46mondego>    <uses-permission android:name=<doubleQuotes46>android.permission.INTERNET<doubleQuotes46>/><newline46mondego>    </manifest> <newline46mondego>"
"5807splitHere46","20209227splitHere46","ContextMenu popup=new ContextMenu();<newline46mondego>MenuItem itemAdd=new MenuItem(<doubleQuotes46>Add/Edit<doubleQuotes46>);<newline46mondego>MenuItem itemDel=new MenuItem(<doubleQuotes46>Delete<doubleQuotes46>);<newline46mondego>popup.getItems().add(itemAdd);        <newline46mondego>popup.getItems().add(itemDel);    <newline46mondego><newline46mondego><newline46mondego>txtBox.setOnMouseClicked(new EventHandler<MouseEvent>() {<newline46mondego>@Override<newline46mondego>public void handle(MouseEvent t) <newline46mondego>{<newline46mondego>    txt=(TextBox)t.getSource();<newline46mondego>    if(t.getButton()==MouseButton.SECONDARY )<newline46mondego>    {<newline46mondego>        popup.show(txt,t.getScreenX(),t.getScreenY());                   <newline46mondego>    }<newline46mondego>}<newline46mondego>"
"5808splitHere46","20209228splitHere46","if(first.getParentA().equals(second.getParentA()))<newline46mondego>"
"5809splitHere46","20209228splitHere46","first.getParentA()"
"5810splitHere46","20209228splitHere46","null"
"5811splitHere46","20209244splitHere46","for(int i = 2; i< number; i++)<newline46mondego>    {<newline46mondego>        if(number%i ==0){<newline46mondego>            return false;<newline46mondego>        }<newline46mondego>    }<newline46mondego>    return true;<newline46mondego>"
"5812splitHere46","20209273splitHere46","ExecuterService"
"5813splitHere46","20209279splitHere46","public class DataBaseWrapper extends SQLiteOpenHelper<newline46mondego> {<newline46mondego>  private static String TAG = DataBaseWrapper.class.getName();<newline46mondego>  private  String DB_PATH; //= <doubleQuotes46>/data/data/com.example.yourproject/databases/<doubleQuotes46>;<newline46mondego>  private static String DB_NAME = <doubleQuotes46>Database.sqlite<doubleQuotes46>;<newline46mondego>  private SQLiteDatabase myDataBase = null; <newline46mondego>  private final Context myContext;<newline46mondego><newline46mondego>  public DataBaseWrapper(Context context) <newline46mondego>  {<newline46mondego>     super(context, DB_NAME, null, 1);<newline46mondego><newline46mondego>      this.myContext = context;<newline46mondego>      DB_PATH=<doubleQuotes46>/data/data/<doubleQuotes46> + context.getPackageName() + <doubleQuotes46>/<doubleQuotes46> + <doubleQuotes46>databases/<doubleQuotes46>;<newline46mondego>      Log.v(<doubleQuotes46>log_tag<doubleQuotes46>, <doubleQuotes46>DBPath: <doubleQuotes46> + DB_PATH);<newline46mondego>     //  File f=getDatabasePath(DB_NAME);<newline46mondego>  } <newline46mondego><newline46mondego>  public void createDataBase() throws IOException{<newline46mondego>   boolean dbExist = checkDataBase();<newline46mondego>   if(dbExist){<newline46mondego>    Log.v(<doubleQuotes46>log_tag<doubleQuotes46>, <doubleQuotes46>database does exist<doubleQuotes46>);<newline46mondego>    }else{<newline46mondego>     Log.v(<doubleQuotes46>log_tag<doubleQuotes46>, <doubleQuotes46>database does not exist<doubleQuotes46>);<newline46mondego>     this.getReadableDatabase();<newline46mondego>     try {<newline46mondego>      copyDataBase();<newline46mondego>        } catch (IOException e) {<newline46mondego>      throw new Error(<doubleQuotes46>Error copying database<doubleQuotes46>);<newline46mondego>      }<newline46mondego>    }<newline46mondego>   }<newline46mondego><newline46mondego>  private void copyDataBase() throws IOException{<newline46mondego>  InputStream myInput = myContext.getAssets().open(DB_NAME);<newline46mondego>  String outFileName = DB_PATH + DB_NAME;<newline46mondego>  OutputStream myOutput = new FileOutputStream(outFileName);<newline46mondego>  byte[] buffer = new byte[1024];<newline46mondego>  int length;<newline46mondego>   while ((length = myInput.read(buffer))>0){<newline46mondego>    myOutput.write(buffer, 0, length);<newline46mondego>   }<newline46mondego>   myOutput.flush();<newline46mondego>   myOutput.close();<newline46mondego>   myInput.close();<newline46mondego>  }<newline46mondego><newline46mondego>  private boolean checkDataBase(){<newline46mondego><newline46mondego>     File dbFile = new File(DB_PATH + DB_NAME); <newline46mondego>     //Log.v(<doubleQuotes46>dbFile<doubleQuotes46>, dbFile + <doubleQuotes46>   <doubleQuotes46>+ dbFile.exists()); <newline46mondego>     return dbFile.exists(); <newline46mondego><newline46mondego> }<newline46mondego><newline46mondego> public boolean openDataBase() throws SQLException<newline46mondego> {<newline46mondego>    String mPath = DB_PATH + DB_NAME; <newline46mondego>    //Log.v(<doubleQuotes46>mPath<doubleQuotes46>, mPath); <newline46mondego>    myDataBase = SQLiteDatabase.openDatabase(mPath, null, SQLiteDatabase.CREATE_IF_NECESSARY); <newline46mondego>    //mDataBase = SQLiteDatabase.openDatabase(mPath, null, SQLiteDatabase.NO_LOCALIZED_COLLATORS); <newline46mondego>    return myDataBase != null; <newline46mondego><newline46mondego> }<newline46mondego><newline46mondego><newline46mondego>  @Override<newline46mondego>  public synchronized void close() <newline46mondego>  {<newline46mondego>     if(myDataBase != null)<newline46mondego>      myDataBase.close();<newline46mondego>     super.close();<newline46mondego>  }<newline46mondego><newline46mondego> @Override<newline46mondego> public void onCreate(SQLiteDatabase db) <newline46mondego> {<newline46mondego><newline46mondego><newline46mondego>  }<newline46mondego><newline46mondego> @Override<newline46mondego> public void onUpgrade(SQLiteDatabase db, int oldVersion, int newVersion) <newline46mondego> {<newline46mondego>    Log.v(TAG, <doubleQuotes46>Upgrading database, this will drop database and recreate.<doubleQuotes46>);<newline46mondego>  }<newline46mondego>  }<newline46mondego>"
"5814splitHere46","20209326splitHere46","BooleanQuery categoryQuery = new BooleanQuery();"
"5815splitHere46","20209326splitHere46","TermQuery catQuery1 = new TermQuery(new Term(<doubleQuotes46>category_name<doubleQuotes46>, <doubleQuotes46>Electronics<doubleQuotes46>));"
"5816splitHere46","20209326splitHere46","TermQuery catQuery2 = new TermQuery(new Term(<doubleQuotes46>category_name<doubleQuotes46>, <doubleQuotes46>Home<doubleQuotes46>));"
"5817splitHere46","20209326splitHere46","categoryQuery.add(new BooleanClause(catQuery1, BooleanClause.Occur.SHOULD));"
"5818splitHere46","20209326splitHere46","categoryQuery.add(new BooleanClause(catQuery2, BooleanClause.Occur.SHOULD));"
"5819splitHere46","20209326splitHere46","bq.add(new BooleanClause(categoryQuery, BooleanClause.Occur.MUST));"
"5820splitHere46","20209340splitHere46","java.awt.geom.Ellipse2D"
"5821splitHere46","20209340splitHere46","Ellipse2D.Double"
"5822splitHere46","20209340splitHere46","Ellipse2D.Float"
"5823splitHere46","20209340splitHere46","Ellipse2D"
"5824splitHere46","20209340splitHere46","Ellipse2D"
"5825splitHere46","20209340splitHere46","public class Example {<newline46mondego>    public static void main(String[] args) {<newline46mondego>        Foo foo = new Foo();<newline46mondego>        Foo.Bar bar = foo.getBar(); //note, cannot call new Foo.Bar(); as Bar is dependent on Foo<newline46mondego>        for (int i = 0; i < 50; i++){<newline46mondego>            System.out.println(bar.get());<newline46mondego>        }<newline46mondego>    }<newline46mondego>}<newline46mondego>class Foo {<newline46mondego>    int val;<newline46mondego>    Bar b;<newline46mondego><newline46mondego>    public Foo(){<newline46mondego>        b = new Bar();<newline46mondego>    }<newline46mondego>    public Bar getBar(){<newline46mondego>        return b;<newline46mondego>    }<newline46mondego>    public class Bar{<newline46mondego>        public Bar(){<newline46mondego>            val++;<newline46mondego>        }<newline46mondego>        public int get(){<newline46mondego>            return val++;<newline46mondego>        }<newline46mondego>    }<newline46mondego>}<newline46mondego>"
"5826splitHere46","20209340splitHere46","ArrayList"
"5827splitHere46","20209404splitHere46","Z"
"5828splitHere46","20209404splitHere46","org.joda.time.format.ISODateTimeFormat.dateTime().withZoneUTC().parseDateTime( eitherStringGoesHere );<newline46mondego>"
"5829splitHere46","20209404splitHere46","// Â© 2013 Basil Bourque. This source code may be used freely forever by anyone taking full responsibility for doing so.<newline46mondego><newline46mondego>String dateTimeStringZero = <doubleQuotes46>2013-11-22T18:37:55.645+0000<doubleQuotes46>;<newline46mondego>String dateTimeStringZulu = <doubleQuotes46>2013-11-22T18:37:55.645Z<doubleQuotes46>;<newline46mondego><newline46mondego>org.joda.time.DateTime dateTimeZero = org.joda.time.format.ISODateTimeFormat.dateTime().withZoneUTC().parseDateTime( dateTimeStringZero );<newline46mondego>org.joda.time.DateTime dateTimeZulu = org.joda.time.format.ISODateTimeFormat.dateTime().withZoneUTC().parseDateTime( dateTimeStringZulu );<newline46mondego>"
"5830splitHere46","20209404splitHere46","System.out.println( <doubleQuotes46>dateTimeZero: <doubleQuotes46> + dateTimeZero );<newline46mondego>System.out.println( <doubleQuotes46>dateTimeZulu: <doubleQuotes46> + dateTimeZulu );<newline46mondego>"
"5831splitHere46","20209404splitHere46","dateTimeZero: 2013-11-22T18:37:55.645Z<newline46mondego>dateTimeZulu: 2013-11-22T18:37:55.645Z<newline46mondego>"
"5832splitHere46","20209404splitHere46","withZoneUTC()"
"5833splitHere46","20209404splitHere46","withZone"
"5834splitHere46","20209405splitHere46","for (int i = 0; i < rows; i++) {<newline46mondego>        for (int j = 0; j < cols; j++) {<newline46mondego>            System.out.print(intar[i][j] + <doubleQuotes46> <doubleQuotes46>);<newline46mondego>        }<newline46mondego>    }<newline46mondego>"
"5835splitHere46","20209405splitHere46","for (int j = 0; j < cols; j++) {<newline46mondego>        for (int i = 0; i < rows; i++) {<newline46mondego>            System.out.print(intar[i][j] + <doubleQuotes46> <doubleQuotes46>);<newline46mondego>        }<newline46mondego>    }<newline46mondego>"
"5836splitHere46","20209405splitHere46","10 25 29 13 46 30 26 57 41 34 88 52 60 77 82 <newline46mondego>"
"5837splitHere46","20209568splitHere46","// optimized if byte-aligned<newline46mondego>if (N == 0) {<newline46mondego>    try { <newline46mondego>        out.write(x); <newline46mondego>        out.flush();<newline46mondego>    }<newline46mondego>    catch (IOException e) { e.printStackTrace(); }<newline46mondego>    return;<newline46mondego>}<newline46mondego>"
"5838splitHere46","20209613splitHere46","//get the input from standard in or wherever it is<newline46mondego>Scanner scanner = new Scanner(System.in);<newline46mondego><newline46mondego>while(scanner.hasNext()){<newline46mondego>    String output = <doubleQuotes46><doubleQuotes46>;<newline46mondego>    String word = scanner.nextLine();<newline46mondego>    char[] wordChars = word.toCharArray();<newline46mondego><newline46mondego>    for(char wordChar: wordChars){<newline46mondego>        output = output.concat(new String(convert(wordChar)));<newline46mondego>    }<newline46mondego>    //do something with the output<newline46mondego>}<newline46mondego>"
"5839splitHere46","20209954splitHere46","JSONObject cannot be converted to JSONArray. <newline46mondego>"
"5840splitHere46","20209954splitHere46","JSONObject obj = new JSONObject (result);<newline46mondego>"
"5841splitHere46","20210102splitHere46","LogRecord"
"5842splitHere46","20210102splitHere46","toLogEvent(new LogRecord());     // passing superclass instance<newline46mondego>System.out.println();<newline46mondego>toLogEvent(new ExtLogRecord());  // passing subclass instance<newline46mondego>"
"5843splitHere46","20210102splitHere46","element.getClass():class LogRecord<newline46mondego>element.getClass() == ExtLogRecord.class:false<newline46mondego>element instanceof ExtLogRecord:false<newline46mondego>element instanceof LogRecord:true<newline46mondego>element.toString():LogRecord@182f0db<newline46mondego><newline46mondego>element.getClass():class ExtLogRecord<newline46mondego>element.getClass() == ExtLogRecord.class:true  <newline46mondego>element instanceof ExtLogRecord:true  <newline46mondego>element instanceof LogRecord:true<newline46mondego>element.toString():ExtLogRecord@192d342<newline46mondego>"
"5844splitHere46","20210102splitHere46","LogRecord.class"
"5845splitHere46","20210102splitHere46","ExtLogRecord.class"
"5846splitHere46","20210290splitHere46","!="
"5847splitHere46","20210290splitHere46","<>"
"5848splitHere46","20210351splitHere46","SwingWorker"
"5849splitHere46","20210351splitHere46","new QuoteTracker().buildGui()"
"5850splitHere46","20210351splitHere46","Runnable"
"5851splitHere46","20210351splitHere46","SwingUtilities.invokeLater"
"5852splitHere46","20210351splitHere46","SwingWorker"
"5853splitHere46","20210351splitHere46","checkQuote"
"5854splitHere46","20210351splitHere46","checkQuote"
"5855splitHere46","20210351splitHere46","String"
"5856splitHere46","20210351splitHere46","result"
"5857splitHere46","20210351splitHere46","public Class QuoteService{<newline46mondego>    public String checkQuote(String symbol) {<newline46mondego>        try {<newline46mondego>            String url = <doubleQuotes46>http://finance.yahoo.com/q?s=<doubleQuotes46> + symbol + <doubleQuotes46>&ql=0<doubleQuotes46>;<newline46mondego>            this.url = url;<newline46mondego>            Document doc = Jsoup.connect(url).get();<newline46mondego>            Elements css = doc.select(<doubleQuotes46>p > span:first-child > span<doubleQuotes46>);<newline46mondego>            return css.text();<newline46mondego>        } catch (IOException e) {<newline46mondego>            e.printStackTrace();<newline46mondego>        }<newline46mondego>        return <doubleQuotes46><doubleQuotes46>;<newline46mondego>    }<newline46mondego>}<newline46mondego>"
"5858splitHere46","20210351splitHere46","QuoteTracker"
"5859splitHere46","20210351splitHere46","checkQuote"
"5860splitHere46","20210351splitHere46","public void actionPerformed(ActionEvent ev) {<newline46mondego><newline46mondego>    new SwingWorker<Void, String>() {<newline46mondego>        @Override // this method is done in the Worker Thread<newline46mondego>        protected Void doInBackground() throws Exception {<newline46mondego>            while(true){ <newline46mondego>                String res = checkQuote(text.getText());<newline46mondego>                publish(res); //will call the process method<newline46mondego>                Thread.sleep(1000 * 60 * 60); //1 hour<newline46mondego>            }<newline46mondego>        }<newline46mondego><newline46mondego>        @Override // this method is done in the EDT<newline46mondego>        protected void process(List<String> resultList){<newline46mondego>            String res = resultList.get(0);<newline46mondego><newline46mondego>            if(!<doubleQuotes46><doubleQuotes46>.equals(res)){<newline46mondego>                result.setText(res);<newline46mondego>            }<newline46mondego>        }<newline46mondego><newline46mondego>        @Override // this method is done in the EDT. Executed after executing the doInBackground() method<newline46mondego>        protected void done() {<newline46mondego>            //... clean up<newline46mondego>        }<newline46mondego>    }.execute();<newline46mondego>}<newline46mondego>"
"5861splitHere46","20210351splitHere46","done()"
"5862splitHere46","20210351splitHere46","doInBackground()"
"5863splitHere46","20210351splitHere46","checkQuote"
"5864splitHere46","20210379splitHere46","RuntimeException"
"5865splitHere46","20210379splitHere46","public RuntimeException(String message, Throwable cause)"
"5866splitHere46","20210379splitHere46","catch (RuntimeException ex) {<newline46mondego><newline46mondego>        throw new RuntimeException(<doubleQuotes46>Custome message<doubleQuotes46>, ex);<newline46mondego><newline46mondego>    }<newline46mondego>"
"5867splitHere46","20210506splitHere46","exception"
"5868splitHere46","20210506splitHere46","public String setOwnerName() {<newline46mondego>  boolean isName = false;<newline46mondego><newline46mondego>while(!isName) {               <newline46mondego> ownerName = JOptionPane.showInputDialog(null, <doubleQuotes46>Enter the account owner's name.<doubleQuotes46>,<newline46mondego>               <doubleQuotes46>Owner's Name<doubleQuotes46>, JOptionPane.PLAIN_MESSAGE);<newline46mondego><newline46mondego>  if(ownerName.trim().isEmpty()){<newline46mondego>    JOptionPane.showMessageDialog(null,<newline46mondego>        <doubleQuotes46>Error you did not enter a name, please try again.<doubleQuotes46>, <newline46mondego>       <doubleQuotes46>Error<doubleQuotes46>, JOptionPane.ERROR_MESSAGE);<newline46mondego>  }<newline46mondego>  else{<newline46mondego>      isName = true;<newline46mondego>      }               <newline46mondego>   }// end of while<newline46mondego><newline46mondego>    return ownerName;<newline46mondego>}<newline46mondego>"
"5869splitHere46","20210601splitHere46","input"
"5870splitHere46","20210601splitHere46","input.nextLine()"
"5871splitHere46","20210601splitHere46","sentences"
"5872splitHere46","20210601splitHere46","input.hasNext()"
"5873splitHere46","20210601splitHere46","sentences"
"5874splitHere46","20210601splitHere46","sentences"
"5875splitHere46","20210601splitHere46","int wordCount = sentences.split(<doubleQuotes46> <doubleQuotes46>).length;<newline46mondego>"
"5876splitHere46","20210601splitHere46","Scanner scanner = new Scanner(sentences);<newline46mondego>while(scanner.hasNext())<newline46mondego>{<newline46mondego>     scanner.next();<newline46mondego>     wordCount++;<newline46mondego>}<newline46mondego>"
"5877splitHere46","20210601splitHere46","countWords"
"5878splitHere46","20210601splitHere46","wordCount"
"5879splitHere46","20210601splitHere46","sentences"
"5880splitHere46","20210601splitHere46","line"
"5881splitHere46","20210759splitHere46","java.lang.ClassCastException: android.widget.RelativeLayout<newline46mondego>"
"5882splitHere46","20210759splitHere46","String product = ((TextView) view).getText().toString();<newline46mondego>"
"5883splitHere46","20210759splitHere46","TextView txtview = ((TextView) view.findViewById(R.id.your_textview_id));<newline46mondego>    String product = txtview.getText().toString();<newline46mondego>"
"5884splitHere46","20210762splitHere46","HashMap"
"5885splitHere46","20210762splitHere46","get"
"5886splitHere46","20210762splitHere46","put"
"5887splitHere46","20210762splitHere46","Dimension"
"5888splitHere46","20210762splitHere46","d.width = 23"
"5889splitHere46","20210899splitHere46","Toast t = Toast.makeText(getApplicationContext(), <doubleQuotes46>Button One is Clicked<doubleQuotes46>,<newline46mondego>            10000);<newline46mondego>    t.setGravity(Gravity.CENTER, 0, 0);<newline46mondego>    t.show();<newline46mondego>"
"5890splitHere46","20211056splitHere46","NullPointerEXception"
"5891splitHere46","20211056splitHere46","db_helper"
"5892splitHere46","20211056splitHere46","db=db_helper.getWritableDatabase();<newline46mondego>"
"5893splitHere46","20211056splitHere46","sql_controlr"
"5894splitHere46","20211056splitHere46","sql_controlr.insert_Rec_Data(Valid_r_name, Valid_r_ingredients, Valid_r_prepare, Valid_r_servings);<newline46mondego>"
"5895splitHere46","20211090splitHere46","public void doSlideUp(View view) {<newline46mondego>    LinearLayout myView = (LinearLayout) findViewById(R.id.content_area);<newline46mondego>    Animation slideUp = setLayoutAnim_slideup();<newline46mondego>    myView.startAnimation(slideUp);<newline46mondego><newline46mondego>}<newline46mondego><newline46mondego>public void doSlideDown(View view) {<newline46mondego>    RelativeLayout myView = (RelativeLayout) findViewById(R.id.content_area1);<newline46mondego>    Animation slideDown = setLayoutAnim_slidedown();<newline46mondego>    myView.startAnimation(slideDown);<newline46mondego>}<newline46mondego><newline46mondego>public Animation setLayoutAnim_slidedown() {<newline46mondego><newline46mondego>    AnimationSet set = new AnimationSet(true);<newline46mondego><newline46mondego>    Animation animation = new TranslateAnimation(<newline46mondego>            Animation.RELATIVE_TO_SELF, 0.0f, Animation.RELATIVE_TO_SELF,<newline46mondego>            0.0f, Animation.RELATIVE_TO_SELF, -1.0f,<newline46mondego>            Animation.RELATIVE_TO_SELF, 0.0f);<newline46mondego>    animation.setDuration(2000);<newline46mondego>    animation.setAnimationListener(new AnimationListener() {<newline46mondego><newline46mondego>        @Override<newline46mondego>        public void onAnimationStart(Animation animation) {<newline46mondego>        }<newline46mondego><newline46mondego>        @Override<newline46mondego>        public void onAnimationRepeat(Animation animation) {<newline46mondego>        }<newline46mondego><newline46mondego>        @Override<newline46mondego>        public void onAnimationEnd(Animation animation) {<newline46mondego><newline46mondego>        }<newline46mondego>    });<newline46mondego>    set.addAnimation(animation);<newline46mondego><newline46mondego>    LayoutAnimationController controller = new LayoutAnimationController(<newline46mondego>            set, 0.25f);<newline46mondego><newline46mondego>    return animation;<newline46mondego>}<newline46mondego><newline46mondego>public Animation setLayoutAnim_slideup() {<newline46mondego><newline46mondego>    AnimationSet set = new AnimationSet(true);<newline46mondego><newline46mondego>    Animation animation = new TranslateAnimation(<newline46mondego>            Animation.RELATIVE_TO_SELF, 0.0f, Animation.RELATIVE_TO_SELF,<newline46mondego>            0.0f, Animation.RELATIVE_TO_SELF, 0.0f,<newline46mondego>            Animation.RELATIVE_TO_SELF, -1.0f);<newline46mondego>    animation.setDuration(2000);<newline46mondego>    animation.setAnimationListener(new AnimationListener() {<newline46mondego>        @Override<newline46mondego>        public void onAnimationStart(Animation animation) {<newline46mondego><newline46mondego>        }<newline46mondego><newline46mondego>        @Override<newline46mondego>        public void onAnimationRepeat(Animation animation) {<newline46mondego><newline46mondego>        }<newline46mondego><newline46mondego>        @Override<newline46mondego>        public void onAnimationEnd(Animation animation) {<newline46mondego><newline46mondego><newline46mondego><newline46mondego><newline46mondego>        }<newline46mondego>    });<newline46mondego>    set.addAnimation(animation);<newline46mondego>    LayoutAnimationController controller = new LayoutAnimationController(<newline46mondego>            set, 0.25f);<newline46mondego>    return animation;<newline46mondego>}<newline46mondego>"
"5896splitHere46","20211465splitHere46","if"
"5897splitHere46","20211465splitHere46","if((a!=-1) && (a<b) && (a<c) && (a<d) && (a<e))<newline46mondego>"
"5898splitHere46","20211465splitHere46","int min = str.length();<newline46mondego>if(a!=-1 && a<min) {<newline46mondego>    tv1.setText(<doubleQuotes46>a<doubleQuotes46>);<newline46mondego>    min=a;<newline46mondego>}<newline46mondego>if(b!=-1 && b<min) {<newline46mondego>    tv1.setText(<doubleQuotes46>e<doubleQuotes46>);<newline46mondego>    min=b;<newline46mondego>}<newline46mondego>if(c!=-1 && c<min) {<newline46mondego>    tv1.setText(<doubleQuotes46>i<doubleQuotes46>);<newline46mondego>    min=c;<newline46mondego>}<newline46mondego>if(d!=-1 && d<min) {<newline46mondego>    tv1.setText(<doubleQuotes46>o<doubleQuotes46>);<newline46mondego>    min=d;<newline46mondego>}<newline46mondego>if(e!=-1 && e<min) {<newline46mondego>    tv1.setText(<doubleQuotes46>u<doubleQuotes46>);<newline46mondego>    min=e;<newline46mondego>}<newline46mondego>"
"5899splitHere46","20211643splitHere46","Thread"
"5900splitHere46","20211643splitHere46","new MyThreand().start()"
"5901splitHere46","20211643splitHere46","Runnable"
"5902splitHere46","20211643splitHere46","(new Thread(new MyThread)).start()"
"5903splitHere46","20211689splitHere46","System.nanoTime()"
"5904splitHere46","20211705splitHere46","if(edittext.getText().length() = 0)<newline46mondego>   toast.maketest(getApplicationContext(),<doubleQuotes46>Please enter username and password<doubleQuotes46>,Toast.LENGTH_SHORT).show()<newline46mondego>else<newline46mondego>  //do your thing<newline46mondego>"
"5905splitHere46","20211941splitHere46","Console"
"5906splitHere46","20211941splitHere46","readPassword()"
"5907splitHere46","20211941splitHere46","public char[] readPassword(String fmt,Object... args)<newline46mondego>"
"5908splitHere46","20212143splitHere46","br=new BufferedReader(new FileReader(path));            <newline46mondego>    boolean firstLine = true;               <newline46mondego>    while ((line = br.readLine()) != null) {<newline46mondego>        if (line.startsWith(<doubleQuotes46>child's Last Name<doubleQuotes46>)) {<newline46mondego>            if (firstLine) {<newline46mondego>                firstLine = false;<newline46mondego>                continue;<newline46mondego>            } <newline46mondego>            list.add(line);<newline46mondego>        }               <newline46mondego>    }   <newline46mondego>"
"5909splitHere46","20212161splitHere46","Semaphore"
"5910splitHere46","20212161splitHere46","class Pool {<newline46mondego>   private static final int MAX_AVAILABLE = 100;<newline46mondego>   private final Semaphore available = new Semaphore(MAX_AVAILABLE, true);<newline46mondego><newline46mondego>   public Object getItem() throws InterruptedException {<newline46mondego>     available.acquire();<newline46mondego>     return getNextAvailableItem();<newline46mondego>   }<newline46mondego><newline46mondego>   public void putItem(Object x) {<newline46mondego>     if (markAsUnused(x))<newline46mondego>       available.release();<newline46mondego>   }<newline46mondego><newline46mondego>   // Not a particularly efficient data structure; just for demo<newline46mondego><newline46mondego>   protected Object[] items = ... whatever kinds of items being managed<newline46mondego>   protected boolean[] used = new boolean[MAX_AVAILABLE];<newline46mondego><newline46mondego>   protected synchronized Object getNextAvailableItem() {<newline46mondego>     for (int i = 0; i < MAX_AVAILABLE; ++i) {<newline46mondego>       if (!used[i]) {<newline46mondego>          used[i] = true;<newline46mondego>          return items[i];<newline46mondego>       }<newline46mondego>     }<newline46mondego>     return null; // not reached<newline46mondego>   }<newline46mondego><newline46mondego>   protected synchronized boolean markAsUnused(Object item) {<newline46mondego>     for (int i = 0; i < MAX_AVAILABLE; ++i) {<newline46mondego>       if (item == items[i]) {<newline46mondego>          if (used[i]) {<newline46mondego>            used[i] = false;<newline46mondego>            return true;<newline46mondego>          } else<newline46mondego>            return false;<newline46mondego>       }<newline46mondego>     }<newline46mondego>     return false;<newline46mondego>   }<newline46mondego><newline46mondego> }<newline46mondego>"
"5911splitHere46","20212172splitHere46","PdfWriter"
"5912splitHere46","20212172splitHere46","getImportedPage"
"5913splitHere46","20212172splitHere46","PdfStamper"
"5914splitHere46","20212172splitHere46","PdfStamper"
"5915splitHere46","20212172splitHere46","PdfReader reader = new PdfReader(resourceStream); <newline46mondego>PdfStamper stamper = new PdfStamper(reader, new FileOutputStream(<doubleQuotes46>target/test-outputs/test-trimmed-stamper.pdf<doubleQuotes46>)); <newline46mondego><newline46mondego>// Go through all pages <newline46mondego>int n = reader.getNumberOfPages(); <newline46mondego>for (int i = 1; i <= n; i++) <newline46mondego>{ <newline46mondego>    Rectangle pageSize = reader.getPageSize(i); <newline46mondego>    Rectangle rect = getOutputPageSize(pageSize, reader, i); <newline46mondego><newline46mondego>    PdfDictionary page = reader.getPageN(i); <newline46mondego>    page.put(PdfName.CROPBOX, new PdfArray(new float[]{rect.getLeft(), rect.getBottom(), rect.getRight(), rect.getTop()})); <newline46mondego>    stamper.markUsed(page); <newline46mondego>} <newline46mondego>stamper.close(); <newline46mondego>"
"5916splitHere46","20212172splitHere46","getOutputPageSize"
"5917splitHere46","20212172splitHere46","TextMarginFinder"
"5918splitHere46","20212172splitHere46","getOutputPageSize"
"5919splitHere46","20212172splitHere46","private Rectangle getOutputPageSize(Rectangle pageSize, PdfReader reader, int page) throws IOException <newline46mondego>{ <newline46mondego>    PdfReaderContentParser parser = new PdfReaderContentParser(reader);<newline46mondego>    TextMarginFinder finder = parser.processContent(page, new TextMarginFinder());<newline46mondego>    Rectangle result = new Rectangle(finder.getLlx(), finder.getLly(), finder.getUrx(), finder.getUry());<newline46mondego>    System.out.printf(<doubleQuotes46>Text/bitmap boundary: %f,%f to %f, %f\n<doubleQuotes46>, finder.getLlx(), finder.getLly(), finder.getUrx(), finder.getUry());<newline46mondego>    return result;<newline46mondego>}<newline46mondego>"
"5920splitHere46","20212172splitHere46","TextMarginFinder"
"5921splitHere46","20212172splitHere46","Rectangle result = new Rectangle(pageSize.getLeft(), finder.getLly(), pageSize.getRight(), finder.getUry());<newline46mondego>"
"5922splitHere46","20212172splitHere46","TextMarginFinder"
"5923splitHere46","20212258splitHere46","@Override<newline46mondego>public void onInfoWindowClick(Marker marker) {<newline46mondego>    LinearLayout secondLL = (LinearLayout) findViewById(R.id.bigpicture);<newline46mondego>    int visibility = secondLL.getVisibility();<newline46mondego>    if(visibility == View.GONE)<newline46mondego>    {<newline46mondego>         secondLL.setVisibility(View.VISIBLE);<newline46mondego>    }<newline46mondego><newline46mondego>}<newline46mondego>"
"5924splitHere46","20212370splitHere46","Context.PROVIDER_URL"
"5925splitHere46","20212503splitHere46","select un from login where un=<given username> and pw = <given password><newline46mondego>"
"5926splitHere46","20212548splitHere46","NoRouteToHostException"
"5927splitHere46","20212548splitHere46","echo <doubleQuotes46>1<doubleQuotes46> >/proc/sys/net/ipv4/tcp_tw_reuse"
"5928splitHere46","20212548splitHere46","echo <doubleQuotes46>1<doubleQuotes46> >/proc/sys/net/ipv4/tcp_tw_recycle"
"5929splitHere46","20212760splitHere46","{<newline46mondego><doubleQuotes46>devices<doubleQuotes46>: [<newline46mondego>    {<newline46mondego>        <doubleQuotes46>name<doubleQuotes46>: <doubleQuotes46>not set<doubleQuotes46>,<newline46mondego>        <doubleQuotes46>node<doubleQuotes46>: 1,<newline46mondego>        <doubleQuotes46>zone<doubleQuotes46>: 0,<newline46mondego>        <doubleQuotes46>type<doubleQuotes46>: <doubleQuotes46>Portable Remote Controller<doubleQuotes46>,<newline46mondego>        <doubleQuotes46>internalType<doubleQuotes46>: <doubleQuotes46>controller<doubleQuotes46>,<newline46mondego>        <doubleQuotes46>manufName<doubleQuotes46>: <doubleQuotes46>undefined<doubleQuotes46>,<newline46mondego>        <doubleQuotes46>productName<doubleQuotes46>: <doubleQuotes46><doubleQuotes46>,<newline46mondego>        <doubleQuotes46>uuid<doubleQuotes46>: <doubleQuotes46>413e3621-f4eb-4469-b986-78699455541c<doubleQuotes46>,<newline46mondego>        <doubleQuotes46>status<doubleQuotes46>: <doubleQuotes46>Listening<doubleQuotes46>,<newline46mondego>        <doubleQuotes46>source<doubleQuotes46>: <doubleQuotes46>zwave<doubleQuotes46>,<newline46mondego>        <doubleQuotes46>internalName<doubleQuotes46>: <doubleQuotes46>zwave/controller/1<doubleQuotes46>,<newline46mondego>        <doubleQuotes46>values<doubleQuotes46>: {<newline46mondego>            <doubleQuotes46>Basic<doubleQuotes46>: <doubleQuotes46>0<doubleQuotes46><newline46mondego>        }<newline46mondego>    },<newline46mondego>    {<newline46mondego>        <doubleQuotes46>name<doubleQuotes46>: <doubleQuotes46>not set<doubleQuotes46>,<newline46mondego>        <doubleQuotes46>node<doubleQuotes46>: 4,<newline46mondego>        <doubleQuotes46>zone<doubleQuotes46>: 0,<newline46mondego>        <doubleQuotes46>type<doubleQuotes46>: <doubleQuotes46>Routing Binary Sensor<doubleQuotes46>,<newline46mondego>        <doubleQuotes46>internalType<doubleQuotes46>: <doubleQuotes46>binarysensor<doubleQuotes46>,<newline46mondego>        <doubleQuotes46>manufName<doubleQuotes46>: <doubleQuotes46>undefined<doubleQuotes46>,<newline46mondego>        <doubleQuotes46>productName<doubleQuotes46>: <doubleQuotes46><doubleQuotes46>,<newline46mondego>        <doubleQuotes46>uuid<doubleQuotes46>: <doubleQuotes46>0dd6743c-6250-4cda-ab5c-871844090642<doubleQuotes46>,<newline46mondego>        <doubleQuotes46>status<doubleQuotes46>: <doubleQuotes46>Sleeping<doubleQuotes46>,<newline46mondego>        <doubleQuotes46>source<doubleQuotes46>: <doubleQuotes46>zwave<doubleQuotes46>,<newline46mondego>        <doubleQuotes46>internalName<doubleQuotes46>: <doubleQuotes46>zwave/binarysensor/4<doubleQuotes46>,<newline46mondego>        <doubleQuotes46>values<doubleQuotes46>: {<newline46mondego>            <doubleQuotes46>Sensor<doubleQuotes46>: <doubleQuotes46>false<doubleQuotes46>,<newline46mondego>            <doubleQuotes46>Wake-up Interval<doubleQuotes46>: <doubleQuotes46>3600<doubleQuotes46><newline46mondego>        }<newline46mondego>    },<newline46mondego>    {<newline46mondego>        <doubleQuotes46>name<doubleQuotes46>: <doubleQuotes46>not set<doubleQuotes46>,<newline46mondego>        <doubleQuotes46>node<doubleQuotes46>: 3,<newline46mondego>        <doubleQuotes46>zone<doubleQuotes46>: 0,<newline46mondego>        <doubleQuotes46>type<doubleQuotes46>: <doubleQuotes46>Multilevel Power Switch<doubleQuotes46>,<newline46mondego>        <doubleQuotes46>internalType<doubleQuotes46>: <doubleQuotes46>dimmer<doubleQuotes46>,<newline46mondego>        <doubleQuotes46>manufName<doubleQuotes46>: <doubleQuotes46>FIBARO System<doubleQuotes46>,<newline46mondego>        <doubleQuotes46>productName<doubleQuotes46>: <doubleQuotes46>FGD211 Universal Dimmer 500W<doubleQuotes46>,<newline46mondego>        <doubleQuotes46>uuid<doubleQuotes46>: <doubleQuotes46>c00228e5-45cc-4ac4-8371-9ac179857926<doubleQuotes46>,<newline46mondego>        <doubleQuotes46>status<doubleQuotes46>: <doubleQuotes46>Listening<doubleQuotes46>,<newline46mondego>        <doubleQuotes46>source<doubleQuotes46>: <doubleQuotes46>zwave<doubleQuotes46>,<newline46mondego>        <doubleQuotes46>internalName<doubleQuotes46>: <doubleQuotes46>zwave/dimmer/3<doubleQuotes46>,<newline46mondego>        <doubleQuotes46>values<doubleQuotes46>: {<newline46mondego>            <doubleQuotes46>Timeout<doubleQuotes46>: <doubleQuotes46>0<doubleQuotes46>,<newline46mondego>            <doubleQuotes46>1. Enable/Disable ALL ON/OFF<doubleQuotes46>: <doubleQuotes46>null<doubleQuotes46>,<newline46mondego>            <doubleQuotes46>20. ADVANCED Impulse length<doubleQuotes46>: <doubleQuotes46>110<doubleQuotes46>,<newline46mondego>            <doubleQuotes46>Frame Count<doubleQuotes46>: <doubleQuotes46>0<doubleQuotes46>,<newline46mondego>            <doubleQuotes46>17. 3-way switch<doubleQuotes46>: <doubleQuotes46>null<doubleQuotes46>,<newline46mondego>            <doubleQuotes46>8. Dimming step at automatic control<doubleQuotes46>: <doubleQuotes46>1<doubleQuotes46>,<newline46mondego>            <doubleQuotes46>Report<doubleQuotes46>: <doubleQuotes46>null<doubleQuotes46>,<newline46mondego>            <doubleQuotes46>Protocol Version<doubleQuotes46>: <doubleQuotes46>3.34<doubleQuotes46>,<newline46mondego>            <doubleQuotes46>Application Version<doubleQuotes46>: <doubleQuotes46>1.06<doubleQuotes46>,<newline46mondego>            <doubleQuotes46>Test<doubleQuotes46>: <doubleQuotes46>null<doubleQuotes46>,<newline46mondego>            <doubleQuotes46>13. Minimum dimmer level control<doubleQuotes46>: <doubleQuotes46>2<doubleQuotes46>,<newline46mondego>            <doubleQuotes46>10. Time of AUTOMATIC moving between the extreme dimming values<doubleQuotes46>: <doubleQuotes46>1<doubleQuotes46>,<newline46mondego>            <doubleQuotes46>Test Powerlevel<doubleQuotes46>: <doubleQuotes46>null<doubleQuotes46>,<newline46mondego>            <doubleQuotes46>Start Level<doubleQuotes46>: <doubleQuotes46>0<doubleQuotes46>,<newline46mondego>            <doubleQuotes46>Bright<doubleQuotes46>: <doubleQuotes46>null<doubleQuotes46>,<newline46mondego>            <doubleQuotes46>Library Version<doubleQuotes46>: <doubleQuotes46>3<doubleQuotes46>,<newline46mondego>            <doubleQuotes46>12. Maximum dimmer level control<doubleQuotes46>: <doubleQuotes46>99<doubleQuotes46>,<newline46mondego>            <doubleQuotes46>16. Saving state before power faillure<doubleQuotes46>: <doubleQuotes46>null<doubleQuotes46>,<newline46mondego>            <doubleQuotes46>Test Node<doubleQuotes46>: <doubleQuotes46>0<doubleQuotes46>,<newline46mondego>            <doubleQuotes46>39. ALARM FLASHING alarm time<doubleQuotes46>: <doubleQuotes46>600<doubleQuotes46>,<newline46mondego>            <doubleQuotes46>14. Inputs Button/Switch configuration<doubleQuotes46>: <doubleQuotes46>null<doubleQuotes46>,<newline46mondego>            <doubleQuotes46>Dim<doubleQuotes46>: <doubleQuotes46>null<doubleQuotes46>,<newline46mondego>            <doubleQuotes46>18. Synchronizing light level for associated devices<doubleQuotes46>: <doubleQuotes46>null<doubleQuotes46>,<newline46mondego>            <doubleQuotes46>7. Control key #2 behaviour<doubleQuotes46>: <doubleQuotes46>null<doubleQuotes46>,<newline46mondego>            <doubleQuotes46>11. Dimming step at manual control<doubleQuotes46>: <doubleQuotes46>1<doubleQuotes46>,<newline46mondego>            <doubleQuotes46>15. Double click option<doubleQuotes46>: <doubleQuotes46>null<doubleQuotes46>,<newline46mondego>            <doubleQuotes46>30. Alarm<doubleQuotes46>: <doubleQuotes46>null<doubleQuotes46>,<newline46mondego>            <doubleQuotes46>9. Time of MANUALLY moving between the extreme dimming values<doubleQuotes46>: <doubleQuotes46>5<doubleQuotes46>,<newline46mondego>            <doubleQuotes46>Powerlevel<doubleQuotes46>: <doubleQuotes46>null<doubleQuotes46>,<newline46mondego>            <doubleQuotes46>19. Change [On-Off] bi-stable keys<doubleQuotes46>: <doubleQuotes46>null<doubleQuotes46>,<newline46mondego>            <doubleQuotes46>Test Status<doubleQuotes46>: <doubleQuotes46>null<doubleQuotes46>,<newline46mondego>            <doubleQuotes46>Ignore Start Level<doubleQuotes46>: <doubleQuotes46>true<doubleQuotes46>,<newline46mondego>            <doubleQuotes46>Level<doubleQuotes46>: <doubleQuotes46>99<doubleQuotes46>,<newline46mondego>            <doubleQuotes46>Set Powerlevel<doubleQuotes46>: <doubleQuotes46>null<doubleQuotes46>,<newline46mondego>            <doubleQuotes46>Switch All<doubleQuotes46>: <doubleQuotes46>null<doubleQuotes46>,<newline46mondego>            <doubleQuotes46>6. Separation of association sending (key 1)<doubleQuotes46>: <doubleQuotes46>null<doubleQuotes46>,<newline46mondego>            <doubleQuotes46>Acked Frames<doubleQuotes46>: <doubleQuotes46>64<doubleQuotes46><newline46mondego>        }<newline46mondego>    },<newline46mondego>    {<newline46mondego>        <doubleQuotes46>name<doubleQuotes46>: <doubleQuotes46>not set<doubleQuotes46>,<newline46mondego>        <doubleQuotes46>node<doubleQuotes46>: 2,<newline46mondego>        <doubleQuotes46>zone<doubleQuotes46>: 0,<newline46mondego>        <doubleQuotes46>type<doubleQuotes46>: <doubleQuotes46>Routing Alarm Sensor<doubleQuotes46>,<newline46mondego>        <doubleQuotes46>internalType<doubleQuotes46>: <doubleQuotes46>alarmsensor<doubleQuotes46>,<newline46mondego>        <doubleQuotes46>manufName<doubleQuotes46>: <doubleQuotes46>undefined<doubleQuotes46>,<newline46mondego>        <doubleQuotes46>productName<doubleQuotes46>: <doubleQuotes46><doubleQuotes46>,<newline46mondego>        <doubleQuotes46>uuid<doubleQuotes46>: <doubleQuotes46>1588357d-fdf0-4813-b447-10158a72be80<doubleQuotes46>,<newline46mondego>        <doubleQuotes46>status<doubleQuotes46>: <doubleQuotes46>Sleeping<doubleQuotes46>,<newline46mondego>        <doubleQuotes46>source<doubleQuotes46>: <doubleQuotes46>zwave<doubleQuotes46>,<newline46mondego>        <doubleQuotes46>internalName<doubleQuotes46>: <doubleQuotes46>zwave/alarmsensor/2<doubleQuotes46>,<newline46mondego>        <doubleQuotes46>values<doubleQuotes46>: {<newline46mondego>            <doubleQuotes46>Application Version<doubleQuotes46>: <doubleQuotes46>Unknown<doubleQuotes46>,<newline46mondego>            <doubleQuotes46>Alarm Type<doubleQuotes46>: <doubleQuotes46>0<doubleQuotes46>,<newline46mondego>            <doubleQuotes46>Battery Level<doubleQuotes46>: <doubleQuotes46>100<doubleQuotes46>,<newline46mondego>            <doubleQuotes46>Wake-up Interval<doubleQuotes46>: <doubleQuotes46>3600<doubleQuotes46>,<newline46mondego>            <doubleQuotes46>Protocol Version<doubleQuotes46>: <doubleQuotes46>Unknown<doubleQuotes46>,<newline46mondego>            <doubleQuotes46>Alarm Level<doubleQuotes46>: <doubleQuotes46>0<doubleQuotes46>,<newline46mondego>            <doubleQuotes46>Library Version<doubleQuotes46>: <doubleQuotes46>Unknown<doubleQuotes46><newline46mondego>        }<newline46mondego>    }<newline46mondego>]  }<newline46mondego>"
"5930splitHere46","20213017splitHere46","Date.writeObject()"
"5931splitHere46","20213017splitHere46","Date.getTimeImpl()"
"5932splitHere46","20213017splitHere46","getTime()"
"5933splitHere46","20213017splitHere46","getTimeImpl()"
"5934splitHere46","20213017splitHere46","getTimeImpl()"
"5935splitHere46","20213017splitHere46","getTime()"
"5936splitHere46","20213137splitHere46","values()"
"5937splitHere46","20213137splitHere46","Map<String, List<Integer>> m = new HashMap<>();<newline46mondego>m.put(<doubleQuotes46>test<doubleQuotes46>, new ArrayList<Integer>(Arrays.asList(1,2,3)));<newline46mondego>m.put(<doubleQuotes46>test2<doubleQuotes46>, new ArrayList<Integer>(Arrays.asList(2,3,4)));<newline46mondego><newline46mondego>List<List<Integer>> l = new ArrayList<>(m.values());<newline46mondego>System.out.println(l);<newline46mondego>"
"5938splitHere46","20213137splitHere46","[[1, 2, 3], [2, 3, 4]]<newline46mondego>"
"5939splitHere46","20213137splitHere46","List"
"5940splitHere46","20213137splitHere46","List<Integer> flattenList = new ArrayList<>();<newline46mondego>        for(List<Integer> list : m.values()){<newline46mondego>            for(Integer i : list)<newline46mondego>                flattenList.add(i);<newline46mondego>        }<newline46mondego>        System.out.println(flattenList);<newline46mondego>"
"5941splitHere46","20213137splitHere46","[1, 2, 3, 2, 3, 4]<newline46mondego>"
"5942splitHere46","20213275splitHere46","String[] parts = input.split(<doubleQuotes46>,<doubleQuotes46>);<newline46mondego>int halfLength = parts.length / 2;<newline46mondego>for (int i = 0; i < halfLength; i++) {<newline46mondego>    String name = parts[i];<newline46mondego>    String age = parts[i + halfLength];<newline46mondego>    // Store them in whatever structure you want here<newline46mondego>}<newline46mondego>"
"5943splitHere46","20213283splitHere46","paintComponent(Graphics g)"
"5944splitHere46","20213283splitHere46","JPanel"
"5945splitHere46","20213283splitHere46","FrameViewer"
"5946splitHere46","20213283splitHere46","paint(Graphics g)"
"5947splitHere46","20213283splitHere46","FrameViewer"
"5948splitHere46","20213283splitHere46","ActionListener"
"5949splitHere46","20213283splitHere46","actionPerformed()"
"5950splitHere46","20213283splitHere46","ActionListener"
"5951splitHere46","20213283splitHere46","public class Form implements ActionListener {<newline46mondego><newline46mondego>    private static int n;<newline46mondego>    private static JFrame frame;<newline46mondego><newline46mondego>    public static void main(String[] args) {<newline46mondego>        frame = new JFrame();<newline46mondego>        JButton button = new JButton(<doubleQuotes46>Click Me!<doubleQuotes46>);<newline46mondego>        button.addActionListener(new Form());<newline46mondego>        JLabel label = new JLabel(<doubleQuotes46>DrawSquare<doubleQuotes46>);<newline46mondego><newline46mondego>        JPanel panel = new JPanel();<newline46mondego>        panel.add(button);<newline46mondego>        panel.add(label);<newline46mondego>        frame.getContentPane().add(panel,BorderLayout.NORTH);<newline46mondego><newline46mondego>        Scanner user_input = new Scanner(System.in);<newline46mondego>        System.out.println(<doubleQuotes46>Enter The Size Of Your Head!  Or Square.   Whichever!<doubleQuotes46>);<newline46mondego>        n = user_input.nextInt();<newline46mondego><newline46mondego>        int FRAME_WIDTH = (n + 600);<newline46mondego>        int FRAME_HEIGHT = (n + 400);<newline46mondego><newline46mondego>        frame.setSize(FRAME_WIDTH, FRAME_HEIGHT);<newline46mondego>        frame.setTitle(<doubleQuotes46>A nice <doubleQuotes46><newline46mondego>                + n<newline46mondego>                + <doubleQuotes46> by <doubleQuotes46><newline46mondego>                + n<newline46mondego>                + <doubleQuotes46> Square! Just click the button and watch the instantanious magic!<doubleQuotes46>);<newline46mondego>        frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);<newline46mondego>        frame.setVisible(true);<newline46mondego>    }<newline46mondego><newline46mondego>    @Override<newline46mondego>    public void actionPerformed(ActionEvent arg0) {<newline46mondego>        JPanel p = new JPanel(){<newline46mondego>            protected void paintComponent(Graphics g) {<newline46mondego>                super.paintComponent(g);<newline46mondego>                int height = n;<newline46mondego>                int width = n;<newline46mondego>                g.setColor(Color.blue);<newline46mondego>                g.drawRect(10, 10, height, width);<newline46mondego>            };<newline46mondego><newline46mondego>        };<newline46mondego>        frame.getContentPane().add(p,BorderLayout.CENTER);<newline46mondego>        frame.getContentPane().revalidate();<newline46mondego>    }<newline46mondego>}<newline46mondego>"
"5952splitHere46","20213301splitHere46","SavedRequest"
"5953splitHere46","20213301splitHere46","changeSessionIdOnAuthentication"
"5954splitHere46","20213487splitHere46","System.out.println(wElement.getElementsByTagName(<doubleQuotes46>nd<doubleQuotes46>)[0].getAttribute(<doubleQuotes46>ref<doubleQuotes46>));<newline46mondego>"
"5955splitHere46","20213487splitHere46",".item(0)"
"5956splitHere46","20213487splitHere46","[0]"
"5957splitHere46","20213487splitHere46","getAttribute"
"5958splitHere46","20213487splitHere46","Element"
"5959splitHere46","20213487splitHere46","Node"
"5960splitHere46","20213487splitHere46","System.out.println(((Element)wElement.getElementsByTagName(<doubleQuotes46>nd<doubleQuotes46>).item(0))<newline46mondego>                    .getAttribute(<doubleQuotes46>ref<doubleQuotes46>));<newline46mondego>"
"5961splitHere46","20213525splitHere46","placeholder"
"5962splitHere46","20213811splitHere46","String line = <doubleQuotes46>n number 1<doubleQuotes46>;<newline46mondego>            String JAVASCRIPTTextToWrite=<doubleQuotes46><doubleQuotes46>;<newline46mondego>            if(line.contains(<doubleQuotes46>n<doubleQuotes46>))<newline46mondego>            {<newline46mondego>                //split the line with space<newline46mondego>                String[] LineSplit = line.split(<doubleQuotes46> <doubleQuotes46>);<newline46mondego><newline46mondego>                if(LineSplit[0].contains(<doubleQuotes46>n<doubleQuotes46>))<newline46mondego>                {<newline46mondego>                    //split the already split line  with <doubleQuotes46>n thename <doubleQuotes46><newline46mondego>                    String[] LineSplit2 = line.split(<doubleQuotes46>n <doubleQuotes46> + LineSplit[1] + <doubleQuotes46> <doubleQuotes46>);<newline46mondego>                    System.out.println( LineSplit[1]);<newline46mondego>                    System.out.println( LineSplit2[0]);<newline46mondego>                    String text = <doubleQuotes46>var <doubleQuotes46> + LineSplit[1] + <doubleQuotes46>=<doubleQuotes46> + LineSplit2[1] +  <doubleQuotes46>;<doubleQuotes46>;<newline46mondego>                    text = text.replace(<doubleQuotes46>\n<doubleQuotes46>, <doubleQuotes46><doubleQuotes46>).replace(<doubleQuotes46>\r<doubleQuotes46>, <doubleQuotes46><doubleQuotes46>);<newline46mondego><newline46mondego>                    JAVASCRIPTTextToWrite += text;<newline46mondego>                    System.out.println(JAVASCRIPTTextToWrite);<newline46mondego>                }<newline46mondego><newline46mondego>            }<newline46mondego>"
"5963splitHere46","20213926splitHere46","<html><head><newline46mondego><script><newline46mondego>function trigger() {<newline46mondego>    top.frames[<doubleQuotes46>topFrame<doubleQuotes46>].location.href=<doubleQuotes46>http://hobbysite.zz.mu/top.html<doubleQuotes46>;<newline46mondego>    top.frames[<doubleQuotes46>mainFrame<doubleQuotes46>].location.href=<doubleQuotes46>http://hobbysite.zz.mu/Main/main.html<doubleQuotes46>;<newline46mondego>}<newline46mondego></script><newline46mondego></head><newline46mondego><body onload=<doubleQuotes46>trigger();<doubleQuotes46>> <newline46mondego></body></html><newline46mondego>"
"5964splitHere46","20213990splitHere46","BeanFactoryPostProcessor"
"5965splitHere46","20213990splitHere46","PropertySourcesPlaceholderConfigurer"
"5966splitHere46","20213990splitHere46","@PropertySource"
"5967splitHere46","20213990splitHere46","@Configuration<newline46mondego>@PropertySource(name=<doubleQuotes46>main<doubleQuotes46>, value= <doubleQuotes46>${spring.profiles.active}.main.properties<doubleQuotes46>)<newline46mondego>public class PropertyTestConfiguration {<newline46mondego><newline46mondego>    @Autowired<newline46mondego>    private Environment env;<newline46mondego><newline46mondego>    @PostConstruct<newline46mondego>    public void initialize() {<newline46mondego>        String resource = env.getProperty(<doubleQuotes46>spring.profiles.sub<doubleQuotes46>) +<doubleQuotes46>.main.properties<doubleQuotes46>;<newline46mondego>        Resource props = new ClassPathResource(resource);<newline46mondego>        if (env instanceof ConfigurableEnvironment && props.exists()) {<newline46mondego>            MutablePropertySources sources = ((ConfigurableEnvironment) env).getPropertySources();<newline46mondego>            sources.addBefore(<doubleQuotes46>main<doubleQuotes46>, new ResourcePropertySource(props)); <newline46mondego>        }<newline46mondego>    }<newline46mondego><newline46mondego>    @Bean<newline46mondego>    public Main_PropertyTest main_PropertyTest(@Value(<doubleQuotes46>${main.property}<doubleQuotes46>) String property) {<newline46mondego>        Main_PropertyTest main_PropertyTest = new Main_PropertyTest(property);<newline46mondego>        return main_PropertyTest;<newline46mondego>    }<newline46mondego>}<newline46mondego>"
"5968splitHere46","20213990splitHere46","dev.main.properties"
"5969splitHere46","20213990splitHere46","test.main.properties"
"5970splitHere46","20213991splitHere46","assign"
"5971splitHere46","20213991splitHere46","generated"
"5972splitHere46","20214024splitHere46","<item android:drawable=<doubleQuotes46>@drawable/color_white<doubleQuotes46> android:state_pressed=<doubleQuotes46>true<doubleQuotes46>></item><newline46mondego><item android:drawable=<doubleQuotes46>@drawable/color_black<doubleQuotes46>></item><newline46mondego>"
"5973splitHere46","20214024splitHere46","<drawable name=<doubleQuotes46>color_black<doubleQuotes46>>#000000</drawable><newline46mondego><drawable name=<doubleQuotes46>color_white<doubleQuotes46>>#ffffff</drawable><newline46mondego>"
"5974splitHere46","20214076splitHere46","<doubleQuotes46>SomeProject<doubleQuotes46>"
"5975splitHere46","20214076splitHere46","<doubleQuotes46>servletProcess<doubleQuotes46>"
"5976splitHere46","20214076splitHere46","var json = [];<newline46mondego>  $('#update').click(function(){<newline46mondego>   $('.items').find('input').each(function(){<newline46mondego>     var tmp = <doubleQuotes46>{id:<doubleQuotes46> + $(this).attr('id') + <doubleQuotes46>,quantity:<doubleQuotes46> + $(this).val() + <doubleQuotes46>}<doubleQuotes46>;<newline46mondego>     json.push(tmp);<newline46mondego>   });<newline46mondego><newline46mondego>$.ajax( {<newline46mondego> url : '/SomeProject/servletProcess',<newline46mondego> type : 'POST',<newline46mondego> data : json,<newline46mondego> dataType : 'json',<newline46mondego> success: function(data) {<newline46mondego>         alert(<doubleQuotes46>success<doubleQuotes46>);<newline46mondego> }<newline46mondego><newline46mondego>  });<newline46mondego><newline46mondego>});<newline46mondego>"
"5977splitHere46","20214140splitHere46","Text/DoubleWritable"
"5978splitHere46","20214140splitHere46","Text/Text"
"5979splitHere46","20214140splitHere46","Text"
"5980splitHere46","20214140splitHere46","DoubleWritable"
"5981splitHere46","20214140splitHere46","Combiner"
"5982splitHere46","20214183splitHere46","@Override<newline46mondego>protected void setup(Context context) throws IOException,<newline46mondego>                    InterruptedException {<newline46mondego><newline46mondego>            Path[] uris = DistributedCache.getLocalCacheFiles(context<newline46mondego>                    .getConfiguration());<newline46mondego><newline46mondego>            String patternsFile = uris[0].toString();<newline46mondego><newline46mondego><newline46mondego>            BufferedReader in = new BufferedReader(new FileReader(patternsFile));<newline46mondego>           ...<newline46mondego><newline46mondego>            in.close();<newline46mondego><newline46mondego><newline46mondego><newline46mondego>        }<newline46mondego>"
"5983splitHere46","20214183splitHere46","try {<newline46mondego>            DistributedCache.addCacheFile(new URI(filename), job.getConfiguration());<newline46mondego><newline46mondego>        } catch (URISyntaxException e) {<newline46mondego>            System.out.println(<doubleQuotes46>URI exception: <doubleQuotes46>+filename);<newline46mondego>            e.printStackTrace();<newline46mondego>        }<newline46mondego>"
"5984splitHere46","20214239splitHere46","Shell"
"5985splitHere46","20214239splitHere46","shell.layout(true, true);<newline46mondego><newline46mondego>final Point newSize = shell.computeSize(SWT.DEFAULT, SWT.DEFAULT, true);  <newline46mondego><newline46mondego>shell.setSize(newSize);<newline46mondego>"
"5986splitHere46","20214239splitHere46","layout()"
"5987splitHere46","20214239splitHere46","Composite"
"5988splitHere46","20214251splitHere46","Style.addAll(lstStyle);<newline46mondego>Style.addAll(2ndStyle);<newline46mondego>Style.addAll(3rdStyle);<newline46mondego>Style.addAll(4thStyle);<newline46mondego>"
"5989splitHere46","20214251splitHere46","NullPointerException"
"5990splitHere46","20214287splitHere46","SQLQuery"
"5991splitHere46","20214287splitHere46","SQLQuery query = session.createSQLQuery(<doubleQuotes46>BACKUP DATABASE TO '/tmp/backup.tar.gz' BLOCKING<doubleQuotes46>);<newline46mondego>query.executeUpdate();<newline46mondego>"
"5992splitHere46","20214327splitHere46","public AssessmentBaseData(){}<newline46mondego>"
"5993splitHere46","20214334splitHere46","AESencrp"
"5994splitHere46","20214334splitHere46","KeyGenerator gen;<newline46mondego><newline46mondego>public AESencrp() throws NoSuchAlgorithmException {<newline46mondego>    this.gen = KeyGenerator.getInstance(<doubleQuotes46>AES<doubleQuotes46>);<newline46mondego>    gen.init(128); /* 128-bit AES */<newline46mondego>}<newline46mondego>"
"5995splitHere46","20214334splitHere46","import sun.misc.BASE64Decoder;<newline46mondego>import sun.misc.BASE64Encoder;<newline46mondego>"
"5996splitHere46","20214334splitHere46","sun."
"5997splitHere46","20214335splitHere46","true"
"5998splitHere46","20214335splitHere46","false"
"5999splitHere46","20214335splitHere46","<item name=<doubleQuotes46>provider_enabled<doubleQuotes46> type=<doubleQuotes46>bool<doubleQuotes46>>false</item><newline46mondego>"
"6000splitHere46","20214335splitHere46","<item name=<doubleQuotes46>provider_enabled<doubleQuotes46> type=<doubleQuotes46>bool<doubleQuotes46>>true</item><newline46mondego>"
"6001splitHere46","20214335splitHere46","android:enabled=<doubleQuotes46>@bool/provider_enabled<doubleQuotes46><newline46mondego>"
"6002splitHere46","20214463splitHere46","rtpSock.setReceiveBufferSize(size)"
"6003splitHere46","20214512splitHere46","a"
"6004splitHere46","20214512splitHere46","for (i = 0; i < a.length; i++) {<newline46mondego>  Arrays.sort(a[i]);<newline46mondego>}<newline46mondego>"
"6005splitHere46","20214546splitHere46","javax.xml.bind.DatatypeConverter"
"6006splitHere46","20214553splitHere46","NonNull"
"6007splitHere46","20214553splitHere46","Interned"
"6008splitHere46","20214553splitHere46","@NonNull"
"6009splitHere46","20214553splitHere46","@Interned"
"6010splitHere46","20214561splitHere46","<dependencies><newline46mondego>  <dependency><newline46mondego>    <groupId>org.jongo</groupId><newline46mondego>    <artifactId>jongo</artifactId><newline46mondego>    <version>1.0-early-20131120-1751</version><newline46mondego>  </dependency><newline46mondego></dependencies><newline46mondego>...<newline46mondego><repositories><newline46mondego>    <repository><newline46mondego>       <id>cloudbees-jongo-early-release</id><newline46mondego>        <url>http://repository-jongo.forge.cloudbees.com/release</url><newline46mondego>        <releases><newline46mondego>            <enabled>true</enabled><newline46mondego>        </releases><newline46mondego>        <snapshots><newline46mondego>            <enabled>false</enabled><newline46mondego>        </snapshots><newline46mondego>    </repository><newline46mondego></repositories><newline46mondego>"
"6011splitHere46","20214684splitHere46","exec(<doubleQuotes46>DIAL<doubleQuotes46>, <doubleQuotes46>DAHDI/g0/<doubleQuotes46> + callingPhoneNo + <doubleQuotes46>,<doubleQuotes46> + currentTimeOut + <doubleQuotes46>,mg|A(custom/greet)<doubleQuotes46>);<newline46mondego>"
"6012splitHere46","20214684splitHere46","greet"
"6013splitHere46","20214696splitHere46","echo JAVA_HOME: %JAVA_HOME %<newline46mondego>"
"6014splitHere46","20214696splitHere46","SET <doubleQuotes46>JAVA_HOME=Progra~2\Java\jdk1.6.0_23<doubleQuotes46><newline46mondego>"
"6015splitHere46","20214819splitHere46","public interface Field<T> extends Comparable<T> {<newline46mondego>    public String getName();<newline46mondego>}<newline46mondego>"
"6016splitHere46","20214819splitHere46","import java.util.Arrays;<newline46mondego><newline46mondego><newline46mondego>public class ConcreteField implements Field<Field>{<newline46mondego><newline46mondego>    private String name;<newline46mondego><newline46mondego>    @Override<newline46mondego>    public int compareTo(Field other) {<newline46mondego>        return this.name.compareTo(other.getName());<newline46mondego>    }<newline46mondego><newline46mondego>    @Override<newline46mondego>    public String getName() {<newline46mondego>        return name;<newline46mondego>    }<newline46mondego><newline46mondego>    public void setName(String name) {<newline46mondego>        this.name = name;<newline46mondego>    }<newline46mondego><newline46mondego>    public static void main(String[] args) {<newline46mondego>        ConcreteField[] c = new ConcreteField[3];<newline46mondego>        c[0] = new ConcreteField();<newline46mondego>        c[1] = new ConcreteField();<newline46mondego>        c[2] = new ConcreteField();<newline46mondego>        c[0].setName(<doubleQuotes46>c<doubleQuotes46>);<newline46mondego>        c[1].setName(<doubleQuotes46>b<doubleQuotes46>);<newline46mondego>        c[2].setName(<doubleQuotes46>a<doubleQuotes46>);<newline46mondego><newline46mondego>        Arrays.sort(c);<newline46mondego>        for(int i=0;i<c.length;i++) {<newline46mondego>            System.out.println(c[i].getName());<newline46mondego>        }<newline46mondego><newline46mondego>    }<newline46mondego>}<newline46mondego>"
"6017splitHere46","20214819splitHere46","a<newline46mondego>b<newline46mondego>c<newline46mondego>"
"6018splitHere46","20214870splitHere46","// C:\user\...<newline46mondego>"
"6019splitHere46","20214870splitHere46","ser\"
"6020splitHere46","20214953splitHere46","SHUTDOWN"
"6021splitHere46","20214953splitHere46","session.createSQLQuery(<doubleQuotes46>SHUTDOWN<doubleQuotes46>).executeUpdate();"
"6022splitHere46","20214955splitHere46","add"
"6023splitHere46","20214955splitHere46","jsonArray.add(jsonObject)<newline46mondego>"
"6024splitHere46","20215026splitHere46","<doubleQuotes46>yyyy-MM-dd'T'HH:mm:ss.SSS'Z'<doubleQuotes46>"
"6025splitHere46","20215075splitHere46","QuestionnaireBeanWrapper wrapper = <newline46mondego>    ( QuestionnaireBeanWrapper ) session.getAttribute( examPart );<newline46mondego>wrapper.getQuestionnaireBeanList().get( examNumber - 1 ).setQuestionAnswer( examAnswer );<newline46mondego><newline46mondego>QuestionnaireBeanWrapper wrapper2 = ( QuestionnaireBeanWrapper ) session.getAttribute( examPart );<newline46mondego>System.out.println(( wrapper.getQuestionnaireBeanList().get( examNumber - 1 ).getQuestionAnswer() ==  wrapper2.getQuestionnaireBeanList().get( examNumber - 1 ).getQuestionAnswer())? <doubleQuotes46>Same<doubleQuotes46>:<doubleQuotes46>Different<doubleQuotes46>);<newline46mondego>"
"6026splitHere46","20215113splitHere46","if(position==salesReport.size()-1)<newline46mondego>{<newline46mondego>    convertView.setBackgroundColor(Color.parseColor(<doubleQuotes46>#00FF00<doubleQuotes46>));<newline46mondego>    //changing date color for last item in listview<newline46mondego>    tvDate.setTextColor(Color.parseColor(<doubleQuotes46>#00FF00<doubleQuotes46>)); <newline46mondego>}<newline46mondego>"
"6027splitHere46","20215217splitHere46","fieldNPort.text.addListener(new ChangeListener(){<newline46mondego>        @Override public void changed(ObservableValue o,Object oldVal, Object newVal){<newline46mondego>             //Some Code<newline46mondego>             //Here you can use Integer.parseInt methods inside a try/catch <newline46mondego>             //because parseInt throws Exceptions<newline46mondego>        }<newline46mondego>      });<newline46mondego>"
"6028splitHere46","20215357splitHere46","getRow()"
"6029splitHere46","20215357splitHere46","getColumn()"
"6030splitHere46","20215357splitHere46","getRowColumnVector()"
"6031splitHere46","20215715splitHere46","listener= new OnFocusChangeListener() {    <newline46mondego>        LinearLayout layout_nama_pp=(LinearLayout)findViewById(R.id.layout_nama_pp);<newline46mondego>        public void onFocusChange(View v, boolean hasFocus) {<newline46mondego>            if(!hasFocus){<newline46mondego>                layout_nama_pp.setBackgroundResource(R.drawable.border_corner_baris1);<newline46mondego>            }else {<newline46mondego>                layout_nama_pp.setBackgroundResource(R.drawable.border_corner_baris1_klik);<newline46mondego>            }<newline46mondego>        }<newline46mondego>    };<newline46mondego>gelar_pp.setOnFocusChangeListener(listener);<newline46mondego>ibu_pp.setOnFocusChangeListener(listener);<newline46mondego>edit_bukti_lain_pp.setOnFocusChangeListener(listener);<newline46mondego>"
"6032splitHere46","20215715splitHere46","true"
"6033splitHere46","20215715splitHere46","editText.setFocusable(true);<newline46mondego>"
"6034splitHere46","20215850splitHere46","int idx(int x, int y) {<newline46mondego>    return y*widthOfBoard() + x;<newline46mondego>}<newline46mondego><newline46mondego>int x(int idx) {<newline46mondego>    return idx % widthOfBoard();<newline46mondego>}<newline46mondego><newline46mondego>int y(int idx) {<newline46mondego>    return (idx - x(idx)) / widthOfBoard();<newline46mondego>}<newline46mondego>"
"6035splitHere46","20215850splitHere46","x(idx)<newline46mondego>"
"6036splitHere46","20215914splitHere46","@Configurable"
"6037splitHere46","20215914splitHere46","@Configuration"
"6038splitHere46","20215914splitHere46","@Configuration<newline46mondego>public class DaoConfiguration {<newline46mondego><newline46mondego>    private SessionFactory sf;<newline46mondego><newline46mondego>    @Bean<newline46mondego>    public GenericDao<Employee, Integer> employeeDao() {<newline46mondego>         return new GenericDaoImpl<Employee, Integer>(Employee.class, sessionFactory);<newline46mondego>    }<newline46mondego><newline46mondego>    // Other daos<newline46mondego>}<newline46mondego>"
"6039splitHere46","20215985splitHere46","System.out.println(<doubleQuotes46>blah.t!@Z8-st?<doubleQuotes46>.replaceAll(<doubleQuotes46>\\..*?\\?<doubleQuotes46>, <doubleQuotes46>.?<doubleQuotes46>));<newline46mondego>"
"6040splitHere46","20216076splitHere46","<p:ajax event=<doubleQuotes46>eventSelect<doubleQuotes46>  <newline46mondego>        listener=<doubleQuotes46>#{LeadListController.onEventSelect}<doubleQuotes46> /><newline46mondego>"
"6041splitHere46","20216076splitHere46","public void onEventSelect(SelectEvent selectEvent) {  <newline46mondego>    ScheduleEvent event = (ScheduleEvent) selectEvent.getObject();  <newline46mondego>    redirect(event.getData());<newline46mondego>}  <newline46mondego>"
"6042splitHere46","20216116splitHere46","tee"
"6043splitHere46","20216116splitHere46","RESULT_STDOUT=$($java classname | tee -a Mylog.txt)<newline46mondego>"
"6044splitHere46","20216116splitHere46","-a"
"6045splitHere46","20216116splitHere46","true"
"6046splitHere46","20216116splitHere46","2>&1"
"6047splitHere46","20216116splitHere46","RESULT_STDOUT=$($java classname 2>> Mylog.error.txt | tee -a Mylog.txt)<newline46mondego>"
"6048splitHere46","20216116splitHere46","$PIPESTATUS"
"6049splitHere46","20216116splitHere46","RESULT_STDOUT"
"6050splitHere46","20216208splitHere46","searchTF.addKeyListener(new KeyListener() {<newline46mondego><newline46mondego>        @Override<newline46mondego>        public void keyPressed(KeyEvent e) {<newline46mondego>            if (e.getKeyCode() == KeyEvent.VK_ENTER) {<newline46mondego><newline46mondego>                searchTF.getDocument().addDocumentListener(<newline46mondego>                        new DocumentListener() {<newline46mondego><newline46mondego>                            private void searchFieldChangedUpdate(<newline46mondego>                                    DocumentEvent evt) {<newline46mondego>                                String text = searchTF.getText();<newline46mondego>                                if (text.length() == 0) {<newline46mondego>                                    sorter.setRowFilter(null);<newline46mondego>                                } else {<newline46mondego>                                    try {<newline46mondego>                                        sorter.setRowFilter(RowFilter.regexFilter(<doubleQuotes46>(?i)<doubleQuotes46> + text,4));<newline46mondego>                                    } catch (Exception e) {<newline46mondego>                                        e.printStackTrace();<newline46mondego>                                    }<newline46mondego>                                }<newline46mondego>                            }<newline46mondego><newline46mondego>                            @Override<newline46mondego>                            public void insertUpdate(DocumentEvent evt) {<newline46mondego>                                searchFieldChangedUpdate(evt);<newline46mondego>                            }<newline46mondego><newline46mondego>                            @Override<newline46mondego>                            public void removeUpdate(DocumentEvent evt) {<newline46mondego>                                searchFieldChangedUpdate(evt);<newline46mondego>                            }<newline46mondego><newline46mondego>                            @Override<newline46mondego>                            public void changedUpdate(DocumentEvent evt) {<newline46mondego>                                searchFieldChangedUpdate(evt);<newline46mondego>                            }<newline46mondego>                        });<newline46mondego>            }<newline46mondego>        }<newline46mondego><newline46mondego>        @Override<newline46mondego>        public void keyReleased(KeyEvent arg0) {<newline46mondego>            // TODO Auto-generated method stub<newline46mondego><newline46mondego>        }<newline46mondego><newline46mondego>        @Override<newline46mondego>        public void keyTyped(KeyEvent arg0) {<newline46mondego>            // TODO Auto-generated method stub<newline46mondego>        }<newline46mondego>    });<newline46mondego>"
"6051splitHere46","20216208splitHere46","DocumentListener"
"6052splitHere46","20216208splitHere46","KeyListener"
"6053splitHere46","20216208splitHere46","ENTER"
"6054splitHere46","20216208splitHere46","searchTF.getDocument().addDocumentListener(...)"
"6055splitHere46","20216208splitHere46","DocumentListener"
"6056splitHere46","20216208splitHere46","InputMap im = searchTF.getInputMap(JTextField.WHEN_IN_FOCUSED_WINDOW);<newline46mondego>    ActionMap am = searchTF.getActionMap();<newline46mondego>    im.put(KeyStroke.getKeyStroke(KeyEvent.VK_ENTER, 0), <doubleQuotes46>ENTER<doubleQuotes46>);<newline46mondego>    am.put(<doubleQuotes46>ENTER<doubleQuotes46>, new AbstractAction() {<newline46mondego><newline46mondego>        @Override<newline46mondego>        public void actionPerformed(ActionEvent arg0) {<newline46mondego>             String text = searchTF.getText();<newline46mondego>             if (text.isEmpty()) {<newline46mondego>                 sorter.setRowFilter(null);<newline46mondego>             } else {<newline46mondego>                 try {<newline46mondego>                     sorter.setRowFilter(RowFilter.regexFilter(<doubleQuotes46>(?i)<doubleQuotes46> + text, 4));<newline46mondego>                 } catch (Exception e) {<newline46mondego>                     e.printStackTrace();<newline46mondego>                 }<newline46mondego>             }<newline46mondego>        }<newline46mondego>    });<newline46mondego>"
"6057splitHere46","20216294splitHere46","Scanner words = new Scanner(new File(<doubleQuotes46>words.txt<doubleQuotes46>));<newline46mondego>"
"6058splitHere46","20216294splitHere46","while(phones.hasNext())<newline46mondego>{<newline46mondego>    Scanner words = new Scanner(new File(<doubleQuotes46>words.txt<doubleQuotes46>));  <newline46mondego>    number = phones.next();<newline46mondego>    number = number.replace(<doubleQuotes46>-<doubleQuotes46>,<doubleQuotes46><doubleQuotes46>);<newline46mondego>    //Scans for next word string<newline46mondego>    while(words.hasNext())<newline46mondego>    {<newline46mondego>    ...<newline46mondego>    }<newline46mondego>}<newline46mondego>"
"6059splitHere46","20216315splitHere46","HttpClient supports automatic management of cookies, including allowing the server to set cookies and automatically return them to the server when required. It is also possible to manually set cookies to be sent to the server."
"6060splitHere46","20216315splitHere46","HttpState"
"6061splitHere46","20216315splitHere46","ngrep"
"6062splitHere46","20216315splitHere46","import java.io.IOException;<newline46mondego><newline46mondego>import org.apache.commons.httpclient.Cookie;<newline46mondego>import org.apache.commons.httpclient.HttpClient;<newline46mondego>import org.apache.commons.httpclient.HttpException;<newline46mondego>import org.apache.commons.httpclient.HttpMethod;<newline46mondego>import org.apache.commons.httpclient.HttpState;<newline46mondego>import org.apache.commons.httpclient.cookie.CookiePolicy;<newline46mondego>import org.apache.commons.httpclient.methods.GetMethod;<newline46mondego><newline46mondego>public class HttpTest {<newline46mondego><newline46mondego>public static void main(String[] args) throws HttpException, IOException {<newline46mondego>    String url = <doubleQuotes46>http://www.whatarecookies.com/cookietest.asp<doubleQuotes46>;<newline46mondego>    HttpClient client = new HttpClient();<newline46mondego>    client.getParams().setCookiePolicy(CookiePolicy.BROWSER_COMPATIBILITY);<newline46mondego>    HttpMethod method = new GetMethod(url);<newline46mondego>    int res = client.executeMethod(method);<newline46mondego>    System.out.println(<doubleQuotes46>Result: <doubleQuotes46> + res);<newline46mondego>    printCookies(client.getState());<newline46mondego>    method = new GetMethod(url);<newline46mondego>    res = client.executeMethod(method);<newline46mondego>    System.out.println(<doubleQuotes46>Result: <doubleQuotes46> + res);<newline46mondego>    printCookies(client.getState());<newline46mondego>}<newline46mondego>public static void printCookies(HttpState state){<newline46mondego>    System.out.println(<doubleQuotes46>Cookies:<doubleQuotes46>);<newline46mondego>    Cookie[] cookies = state.getCookies();<newline46mondego>    for (Cookie cookie : cookies){<newline46mondego>        System.out.println(<doubleQuotes46>  <doubleQuotes46> + cookie.getName() + <doubleQuotes46>: <doubleQuotes46> + cookie.getValue());<newline46mondego>    }               <newline46mondego>}   <newline46mondego>}<newline46mondego>"
"6063splitHere46","20216315splitHere46","Result: 200<newline46mondego>Cookies:<newline46mondego>  active_template::468: %2Fresponsive%2Fthree_column_inner_ad3b74de5a1c2f311bee7bca5c368aaa4e:b326b5062b2f0e69046810717534cb09<newline46mondego>Result: 200<newline46mondego>Cookies:<newline46mondego>  active_template::468: %2Fresponsive%2Fthree_column_inner_ad%2C+3b74de5a1c2f311bee7bca5c368aaa4e%3Db326b5062b2f0e69046810717534cb09<newline46mondego>  3b74de5a1c2f311bee7bca5c368aaa4e: b326b5062b2f0e69046810717534cb09<newline46mondego>"
"6064splitHere46","20216315splitHere46","ngrep"
"6065splitHere46","20216315splitHere46","MacBook$ sudo ngrep -W byline -d en0 <doubleQuotes46><doubleQuotes46> host www.whatarecookies.com<newline46mondego>interface: en0 (192.168.11.0/255.255.255.0)<newline46mondego>filter: (ip) and ( dst host www.whatarecookies.com )<newline46mondego>#####<newline46mondego>T 192.168.11.70:56267 -> 54.228.218.117:80 [AP]<newline46mondego>GET /cookietest.asp HTTP/1.1.<newline46mondego>User-Agent: Jakarta Commons-HttpClient/3.1.<newline46mondego>Host: www.whatarecookies.com.<newline46mondego>.<newline46mondego><newline46mondego>####<newline46mondego>T 54.228.218.117:80 -> 192.168.11.70:56267 [A]<newline46mondego>HTTP/1.1 200 OK.<newline46mondego>Server: nginx/1.4.0.<newline46mondego>Date: Wed, 27 Nov 2013 10:22:14 GMT.<newline46mondego>Content-Type: text/html; charset=iso-8859-1.<newline46mondego>Content-Length: 36397.<newline46mondego>Connection: keep-alive.<newline46mondego>Vary: Accept-Encoding.<newline46mondego>Vary: Cookie,Host,Accept-Encoding.<newline46mondego>Set-Cookie: active_template::468=%2Fresponsive%2Fthree_column_inner_ad; expires=Fri, 29-Nov-2013 10:22:01 GMT; path=/; domain=whatarecookies.com; httponly.<newline46mondego>Set-Cookie: 3b74de5a1c2f311bee7bca5c368aaa4e=b326b5062b2f0e69046810717534cb09; expires=Thu, 27-Nov-2014 10:22:01 GMT.<newline46mondego>X-Middleton-Response: 200.<newline46mondego>Cache-Control: max-age=0, no-cache.<newline46mondego>X-Mod-Pagespeed: 1.7.30.1-3609.<newline46mondego>.<newline46mondego><!DOCTYPE HTML PUBLIC <doubleQuotes46>-//W3C//DTD HTML 4.0 Transitional//EN<doubleQuotes46> <doubleQuotes46>http://www.w3.org/TR/1998/REC-html40-19980424/loose.dtd<doubleQuotes46>><newline46mondego>...<newline46mondego><newline46mondego>##<newline46mondego>T 192.168.11.70:56267 -> 54.228.218.117:80 [AP]<newline46mondego>GET /cookietest.asp HTTP/1.1.<newline46mondego>User-Agent: Jakarta Commons-HttpClient/3.1.<newline46mondego>Host: www.whatarecookies.com.<newline46mondego>Cookie: active_template::468=%2Fresponsive%2Fthree_column_inner_ad.<newline46mondego>Cookie: 3b74de5a1c2f311bee7bca5c368aaa4e=b326b5062b2f0e69046810717534cb09.<newline46mondego>.<newline46mondego><newline46mondego>##<newline46mondego>T 54.228.218.117:80 -> 192.168.11.70:56267 [A]<newline46mondego>HTTP/1.1 200 OK.<newline46mondego>Server: nginx/1.4.0.<newline46mondego>Date: Wed, 27 Nov 2013 10:22:18 GMT.<newline46mondego>Content-Type: text/html; charset=iso-8859-1.<newline46mondego>Content-Length: 54474.<newline46mondego>Connection: keep-alive.<newline46mondego>Vary: Accept-Encoding.<newline46mondego>Vary: Cookie,Host,Accept-Encoding.<newline46mondego>Set-Cookie: active_template::468=%2Fresponsive%2Fthree_column_inner_ad%2C+3b74de5a1c2f311bee7bca5c368aaa4e%3Db326b5062b2f0e69046810717534cb09; expires=Fri, 29-Nov-2013 10:22:05 GMT; path=/; domain=whatarecookies.com; httponly.<newline46mondego>Set-Cookie: 3b74de5a1c2f311bee7bca5c368aaa4e=b326b5062b2f0e69046810717534cb09; expires=Thu, 27-Nov-2014 10:22:05 GMT.<newline46mondego>X-Middleton-Response: 200.<newline46mondego>Cache-Control: max-age=0, no-cache.<newline46mondego>X-Mod-Pagespeed: 1.7.30.1-3609.<newline46mondego>.<newline46mondego><!DOCTYPE HTML PUBLIC <doubleQuotes46>-//W3C//DTD HTML 4.0 Transitional//EN<doubleQuotes46> <doubleQuotes46>http://www.w3.org/TR/1998/REC-html40-19980424/loose.dtd<doubleQuotes46>><newline46mondego>...<newline46mondego>"
"6066splitHere46","20216318splitHere46","public boolean equals(Object other) {<newline46mondego>        if(this == other)<newline46mondego>            return true;<newline46mondego><newline46mondego>        if (!(other instanceof Pair)) {<newline46mondego>            return false;<newline46mondego>        }<newline46mondego><newline46mondego><newline46mondego>        Pair<?, ?> otherPair = (Pair<?, ?>) other;<newline46mondego><newline46mondego>        return Equality.equals(this.first,otherPair._first) &&<newline46mondego>               Equality.equals(this._second, otherPair._second);<newline46mondego>    }<newline46mondego><newline46mondego><newline46mondego>    class Equality{<newline46mondego>         public static boolean equals(Object first, Object second){ <newline46mondego>              return first == null ? second == null : first.equals(second);<newline46mondego>         }<newline46mondego>    }<newline46mondego>"
"6067splitHere46","20216318splitHere46","equals()"
"6068splitHere46","20216318splitHere46","equals()"
"6069splitHere46","20216318splitHere46","Equality"
"6070splitHere46","20216318splitHere46","null"
"6071splitHere46","20216528splitHere46","@AroundInvoke"
"6072splitHere46","20216528splitHere46","@Interceptors"
"6073splitHere46","20216528splitHere46","XML"
"6074splitHere46","20216528splitHere46","@AroundTimeout"
"6075splitHere46","20216528splitHere46","@Schedule"
"6076splitHere46","20216564splitHere46","xml"
"6077splitHere46","20216564splitHere46","Content is not allowed in trailing section"
"6078splitHere46","20216564splitHere46","System.out.println(<doubleQuotes46>*<doubleQuotes46>+xml+<doubleQuotes46>*<doubleQuotes46>);<newline46mondego>"
"6079splitHere46","20216627splitHere46","public void populateGrid()<newline46mondego>{<newline46mondego>    for(int x =0; x<gridCells[x].length-1; x++) // -1 to avoid outofboundsexception error <newline46mondego>    {<newline46mondego>        for(int y =0; y<gridCells[y].length-1; y++)<newline46mondego>        {<newline46mondego>            gridCells[x][y] = (char)(r.nextInt(numberOfRegions) + 'a'); <newline46mondego>        }<newline46mondego>    }<newline46mondego>}<newline46mondego>"
"6080splitHere46","20216627splitHere46","index < array.length"
"6081splitHere46","20216627splitHere46","index <= array.length-1"
"6082splitHere46","20216627splitHere46","index < array.length-1"
"6083splitHere46","20216627splitHere46","private int numberOfRegions = 0;<newline46mondego>"
"6084splitHere46","20216801splitHere46","switch/case"
"6085splitHere46","20216801splitHere46","default"
"6086splitHere46","20216801splitHere46","switch/case"
"6087splitHere46","20216801splitHere46","public static void main (String[] args){<newline46mondego><newline46mondego>    do{<newline46mondego>        try{<newline46mondego>            System.out.println(<doubleQuotes46>Waiting for instructions: <doubleQuotes46>);<newline46mondego>            instructions= input.nextLine();<newline46mondego>        String preparsedInstructions = instructions;<newline46mondego>        int from = instructions.indexOf(<doubleQuotes46> <doubleQuotes46>);<newline46mondego>        if(from > -1){<newline46mondego>            int to = preparsedInstructions.indexOf(<doubleQuotes46> <doubleQuotes46>, from + 1);<newline46mondego>            if(to > -1){<newline46mondego>                preparsedInstructions = preparsedInstructions.substring(0, to);<newline46mondego>            }<newline46mondego>        }<newline46mondego><newline46mondego>            switch (preparsedInstructions){<newline46mondego>                case <doubleQuotes46>create client<doubleQuotes46>:<newline46mondego>                    createClient();<newline46mondego>                    break;<newline46mondego>                case <doubleQuotes46>create music<doubleQuotes46>:<newline46mondego>                    createMusic();<newline46mondego>                    break;<newline46mondego>                case <doubleQuotes46>create selling<doubleQuotes46>:<newline46mondego>                    //createSelling();<newline46mondego>                    break;<newline46mondego><newline46mondego>                case <doubleQuotes46>list client<doubleQuotes46>:<newline46mondego>                    listClient();<newline46mondego>                    break;<newline46mondego>                case <doubleQuotes46>list music<doubleQuotes46>:<newline46mondego>                    listMusic();<newline46mondego>                    break;<newline46mondego>                case <doubleQuotes46>list selling<doubleQuotes46>:<newline46mondego>                    //listSelling();<newline46mondego>                    break;<newline46mondego>                case <doubleQuotes46>erase client<doubleQuotes46>:<newline46mondego>            if (instructions.length() <= 18 && instructions.length() >= 17 && instructions.substring(0, 16).equals(<doubleQuotes46>erase client<doubleQuotes46>)){<newline46mondego>                String client_code = instructions.substring(16);<newline46mondego>                client_code = client_code.trim();<newline46mondego>                int code = Integer.parseInt(client_code);<newline46mondego>                eraseClientWithCode(code);<newline46mondego>            }else{<newline46mondego>                    eraseClientWithoutCode();<newline46mondego>            }<newline46mondego>                    break;<newline46mondego>        ...//do for erase music,selling<newline46mondego><newline46mondego>        default: //error handling<newline46mondego>            }<newline46mondego>        }catch (NullPointerException npe){<newline46mondego>            System.out.println(<doubleQuotes46>There are not articles on the list<doubleQuotes46>);<newline46mondego>        }<newline46mondego><newline46mondego><newline46mondego><newline46mondego>    }while(!instructions.equals(<doubleQuotes46>close<doubleQuotes46>));<newline46mondego>}<newline46mondego>"
"6088splitHere46","20216814splitHere46","order"
"6089splitHere46","20216814splitHere46","INSERT INTO `order` (customerid, ...<newline46mondego>"
"6090splitHere46","20216831splitHere46","String [] result = request.getParameterValues(<doubleQuotes46>video_array<doubleQuotes46>);<newline46mondego>"
"6091splitHere46","20216831splitHere46","getParameterValues()"
"6092splitHere46","20216921splitHere46","id"
"6093splitHere46","20216921splitHere46","id"
"6094splitHere46","20216921splitHere46","TABLE_PER_CLASS"
"6095splitHere46","20216945splitHere46","GREATEST"
"6096splitHere46","20216945splitHere46","select *"
"6097splitHere46","20216945splitHere46","greatest"
"6098splitHere46","20216984splitHere46","if(number.equals(output));<newline46mondego>        {<newline46mondego>            System.out.println(number + <doubleQuotes46> <doubleQuotes46> + code);<newline46mondego>        }<newline46mondego>"
"6099splitHere46","20216984splitHere46","if(number.equals(output))<newline46mondego>        {<newline46mondego>            System.out.println(number + <doubleQuotes46> <doubleQuotes46> + code);<newline46mondego>        }<newline46mondego>"
"6100splitHere46","20217024splitHere46","@Transactional"
"6101splitHere46","20217094splitHere46","spring-security.xml"
"6102splitHere46","20217094splitHere46","<bean id=<doubleQuotes46>myUserDetailsService<doubleQuotes46> class=<doubleQuotes46>com.ssmb.stweb.security.UserDetailsServiceImpl<doubleQuotes46> ><newline46mondego></bean> <newline46mondego>"
"6103splitHere46","20217094splitHere46","<beans:bean id=<doubleQuotes46>myUserDetailsService<doubleQuotes46> class=<doubleQuotes46>com.ssmb.stweb.security.UserDetailsServiceImpl<doubleQuotes46> ><newline46mondego></beans:bean> <newline46mondego>"
"6104splitHere46","20217130splitHere46","public interface Validator<T> {<newline46mondego>    Class<T> type();<newline46mondego>}<newline46mondego>public static class CollectionValidator<Item> implements Validator<Collection<Item>>{<newline46mondego>    @SuppressWarnings(<doubleQuotes46>unchecked<doubleQuotes46>) <newline46mondego>    public Class<Collection<Item>> type() {<newline46mondego>        return (Class<Collection<Item>>) (Class<?>) Collection.class;<newline46mondego>    }<newline46mondego>}<newline46mondego>"
"6105splitHere46","20217132splitHere46","public <E extends foo & bar & fum> void test(Collection<E> parameter) {<newline46mondego>  ...<newline46mondego>}<newline46mondego>"
"6106splitHere46","20217132splitHere46","E"
"6107splitHere46","20217176splitHere46","actor"
"6108splitHere46","20217176splitHere46","Actor"
"6109splitHere46","20217176splitHere46","actor"
"6110splitHere46","20217176splitHere46","HappyActor"
"6111splitHere46","20217176splitHere46","SadActor"
"6112splitHere46","20217176splitHere46","class Actor {<newline46mondego>  public void act() {}<newline46mondego>}<newline46mondego><newline46mondego>class HappyActor extends Actor {<newline46mondego>  public void act() {print(<doubleQuotes46>HappyActor<doubleQuotes46>); }<newline46mondego>}<newline46mondego><newline46mondego>class Stage extends HappyActor {<newline46mondego>  public void change() { /* Cannot change dynamic type */ }<newline46mondego>  public void performPlay() {this.act(); } // call inherited act method<newline46mondego>}<newline46mondego>"
"6113splitHere46","20217176splitHere46","HappyActor"
"6114splitHere46","20217206splitHere46","MainActivity"
"6115splitHere46","20217206splitHere46","FragmentActivity"
"6116splitHere46","20217206splitHere46","View view = inflater.inflate(R.layout.fragment_view1,container,false);<newline46mondego>"
"6117splitHere46","20217206splitHere46","getView()"
"6118splitHere46","20217206splitHere46","view"
"6119splitHere46","20217288splitHere46","ImageView image1 = (ImageView)      dialog.findViewById(R.id.anim_image);<newline46mondego>"
"6120splitHere46","20217340splitHere46","freq[]"
"6121splitHere46","20217340splitHere46","int[] freq= new int[10];// Declare an array of size 10<newline46mondego><newline46mondego>while (i < 50){<newline46mondego>int value = kbin.nextInt();<newline46mondego>if (value >= 10 & value <= 19) {<newline46mondego>    list[i] = value;<newline46mondego><newline46mondego>    freq[value-10]++; // Count the number in array position.<newline46mondego>    i++;<newline46mondego>} else {<newline46mondego>    System.out.println(<doubleQuotes46>!! Bad number !!<doubleQuotes46>);    <newline46mondego>   }<newline46mondego>}<newline46mondego><newline46mondego>//Now, display the frequency of number.<newline46mondego>for(int k=0;k<freq.length;k++){<newline46mondego>  System.out.println(<doubleQuotes46>value : <doubleQuotes46> +(k+10)+<doubleQuotes46> frequency : <doubleQuotes46>+freq[k]);<newline46mondego>}<newline46mondego>"
"6122splitHere46","20217546splitHere46","BrodcastReceiver"
"6123splitHere46","20217546splitHere46","MediaPlayer"
"6124splitHere46","20217546splitHere46","MediaPlayer"
"6125splitHere46","20217546splitHere46","BroadcastReceiver"
"6126splitHere46","20217643splitHere46","ProcessBuilder pb = new ProcessBuilder(<doubleQuotes46>wsd.pl<doubleQuotes46>, <doubleQuotes46>--context<doubleQuotes46>, <doubleQuotes46>test.txt<doubleQuotes46>, <doubleQuotes46>--format<doubleQuotes46>, <doubleQuotes46>raw<doubleQuotes46>);<newline46mondego>"
"6127splitHere46","20217775splitHere46","if (str.matches(<doubleQuotes46>(?!$)(\\d+D)?(\\d\\d?H)?(\\d\\d?M)?<doubleQuotes46>))<newline46mondego>    // format is correct<newline46mondego>"
"6128splitHere46","20217775splitHere46","^"
"6129splitHere46","20217775splitHere46","$"
"6130splitHere46","20217775splitHere46","String.matches()"
"6131splitHere46","20217775splitHere46","99D99H99M"
"6132splitHere46","20217775splitHere46","if (str.matches(<doubleQuotes46>(?!$)(\\d+D)?([0-5]?\\dH)?([0-5]?\\dM)?<doubleQuotes46>))<newline46mondego>    // format is correct<newline46mondego>"
"6133splitHere46","20217775splitHere46","0-59"
"6134splitHere46","20217775splitHere46","0-9"
"6135splitHere46","20217811splitHere46","<doubleQuotes46>a<doubleQuotes46>"
"6136splitHere46","20217811splitHere46","java.util.HashMap"
"6137splitHere46","20217811splitHere46","java.util.HashSet"
"6138splitHere46","20217811splitHere46","HashSet"
"6139splitHere46","20217811splitHere46","HashMap"
"6140splitHere46","20217811splitHere46","LinkedHashSet"
"6141splitHere46","20217811splitHere46","TreeSet"
"6142splitHere46","20217811splitHere46","LinkedHashSet"
"6143splitHere46","20217811splitHere46","HashSet"
"6144splitHere46","20217811splitHere46","TreeSet"
"6145splitHere46","20217838splitHere46","setValueAt"
"6146splitHere46","20217838splitHere46","setValueAt"
"6147splitHere46","20217838splitHere46","integer value"
"6148splitHere46","20217838splitHere46","JComboBox as CellEditor"
"6149splitHere46","20217838splitHere46","XxxTableModel"
"6150splitHere46","20217838splitHere46","DefaultTableModel"
"6151splitHere46","20217838splitHere46","getColumnClass"
"6152splitHere46","20217838splitHere46","JComboBox"
"6153splitHere46","20217838splitHere46","isCellEditable"
"6154splitHere46","20217838splitHere46","setValueAt"
"6155splitHere46","20217850splitHere46","public void onTextChanged(CharSequence s, int start, int before, int count) {<newline46mondego>   double billAmount = 0.0;<newline46mondego>   if(s.length() != 0){<newline46mondego>        billAmount = Double.parseDouble(s.toString());<newline46mondego>   }<newline46mondego>        tip10EditText.setText(<doubleQuotes46><doubleQuotes46> + billAmount * .1);<newline46mondego>        tip15EditText.setText(<doubleQuotes46><doubleQuotes46> + billAmount * .15);<newline46mondego>        tip20EditText.setText(<doubleQuotes46><doubleQuotes46> + billAmount * .2);<newline46mondego>        total10EditText.setText(<doubleQuotes46><doubleQuotes46> + (billAmount + billAmount * 0.1));<newline46mondego>        total15EditText.setText(<doubleQuotes46><doubleQuotes46> + (billAmount + billAmount * 0.15));<newline46mondego>        total20EditText.setText(<doubleQuotes46><doubleQuotes46> + (billAmount + billAmount * 0.2));<newline46mondego>}<newline46mondego>"
"6156splitHere46","20218154splitHere46","www.stackoverflow.com"
"6157splitHere46","20218154splitHere46","www.somesite.com?foo=bar"
"6158splitHere46","20218197splitHere46","RESULT_OK"
"6159splitHere46","20218197splitHere46","Activity.RESULT_OK"
"6160splitHere46","20218220splitHere46","MyDraw d;<newline46mondego>@Override<newline46mondego>public void onCreate(Bundle savedInstanceState) <newline46mondego>{<newline46mondego>    super.onCreate(savedInstanceState);<newline46mondego>    d = new MyDraw (this);<newline46mondego>    setContentView (d);<newline46mondego>}  <newline46mondego>"
"6161splitHere46","20218220splitHere46","case 4:<newline46mondego>    try {<newline46mondego>        Bitmap bitmap = Bitmap.createBitmap(d.getWidth(),d.getHeight(), Bitmap.Config.ARGB_8888);<newline46mondego>        Canvas canvas = new Canvas(bitmap);<newline46mondego>        d.draw(canvas);<newline46mondego>        File folder = new File(Environment.getExternalStorageDirectory()+ <doubleQuotes46>/DCIM/Camera/<doubleQuotes46>);<newline46mondego>        if (!folder.exists())<newline46mondego>            folder.mkdirs();<newline46mondego>        String fileName = Environment.getExternalStorageDirectory()+ <doubleQuotes46>/DCIM/Camera/img.jpg<doubleQuotes46><doubleQuotes46>;<newline46mondego>        if (new File(fileName).exists())<newline46mondego>            new File(fileName).delete();<newline46mondego>        OutputStream stream = new FileOutputStream(fileName);<newline46mondego>        /*<newline46mondego>         * Write bitmap to file using JPEG or PNG and 100% quality hint<newline46mondego>         * for JPEG.<newline46mondego>         */<newline46mondego>        bitmap.compress(CompressFormat.JPEG, 100, stream);<newline46mondego>        stream.close();<newline46mondego>        } catch (Exception e) {<newline46mondego>                // TODO Auto-generated catch block<newline46mondego>                Toast.makeText(this, <doubleQuotes46>Error: <doubleQuotes46> + e.getMessage(),Toast.LENGTH_LONG).show();<newline46mondego>        }<newline46mondego>        break;<newline46mondego>"
"6162splitHere46","20218220splitHere46","<uses-permission android:name=<doubleQuotes46>android.permission.WRITE_EXTERNAL_STORAGE<doubleQuotes46> /><newline46mondego>"
"6163splitHere46","20218305splitHere46","R < foo.R <newline46mondego>Fatal error: you must specify '--save', '--no-save' or '--vanilla'<newline46mondego>"
"6164splitHere46","20218305splitHere46","--vanilla<newline46mondego>          Combine --no-save, --no-restore, --no-site-file, --no-init-file and --no-environ<newline46mondego>"
"6165splitHere46","20218305splitHere46","processBuilder = new ProcessBuilder().command(<doubleQuotes46>/usr/bin/R --vanilla<doubleQuotes46>).redirectErrorStream(<newline46mondego>            true);<newline46mondego>"
"6166splitHere46","20218313splitHere46","// First convert the String to a Date<newline46mondego>String dateTime = <doubleQuotes46>2013-11-12 13:14:15<doubleQuotes46>;<newline46mondego>SimpleDateFormat dateParser = new SimpleDateFormat(<doubleQuotes46>yyyy-MM-dd HH:mm:ss<doubleQuotes46>,Locale.ITALIAN);<newline46mondego>Date date = dateParser.parse(dateTime);<newline46mondego>// Then convert the Date to a String, formatted as you dd/MM/yyyy<newline46mondego>SimpleDateFormat dateFormatter = new SimpleDateFormat(<doubleQuotes46>dd/MM/yyyy<doubleQuotes46>);<newline46mondego>System.out.println(dateFormatter.format(date));<newline46mondego>"
"6167splitHere46","20218313splitHere46","SimpleDateFromat.setTimeZone()"
"6168splitHere46","20218407splitHere46","if(AssetCategories.getSelectedItem() == <doubleQuotes46>LAND & BUILDINGS<doubleQuotes46>)<newline46mondego>"
"6169splitHere46","20218407splitHere46","<doubleQuotes46>LAND & BUILDINGS<doubleQuotes46>"
"6170splitHere46","20218407splitHere46","=="
"6171splitHere46","20218407splitHere46","=="
"6172splitHere46","20218407splitHere46",".equals()"
"6173splitHere46","20218418splitHere46","for(String str:restricted_words_list){<newline46mondego>        strb.append(<doubleQuotes46>\\b<doubleQuotes46>).append(Pattern.quote(str)).append(<doubleQuotes46>\\b|<doubleQuotes46>);<newline46mondego>}<newline46mondego>"
"6174splitHere46","20218418splitHere46","for(String str:restricted_words_list){<newline46mondego>        strb.append(<doubleQuotes46>\\b*<doubleQuotes46>).append(Pattern.quote(str)).append(<doubleQuotes46>\\b*|<doubleQuotes46>);<newline46mondego>}<newline46mondego>"
"6175splitHere46","20218418splitHere46","restricted_words_list"
"6176splitHere46","20218418splitHere46","abc@"
"6177splitHere46","20218418splitHere46","@"
"6178splitHere46","20218418splitHere46","*"
"6179splitHere46","20218418splitHere46","\\b"
"6180splitHere46","20218418splitHere46","abc@"
"6181splitHere46","20218575splitHere46","JSONArray myJSON = new JSONArray(responseString);<newline46mondego>String[] myValues = new String[myJSON.length];<newline46mondego>for(int i=0; i<myValues.length; i++) {<newline46mondego>    myValues[i] = myJSON.getString(i);<newline46mondego>}<newline46mondego>"
"6182splitHere46","20218575splitHere46","String[] innerArray = myValues[i].split(<doubleQuotes46>,<doubleQuotes46>); <newline46mondego>"
"6183splitHere46","20218650splitHere46","ArrayList"
"6184splitHere46","20218650splitHere46","ensureCapacity(int)"
"6185splitHere46","20218736splitHere46","public void update(double delta)<newline46mondego>"
"6186splitHere46","20218736splitHere46","for (Entity e : entities) {<newline46mondego>    g.fillRect(x, y, w, h);<newline46mondego>}<newline46mondego>"
"6187splitHere46","20218736splitHere46","synchronized(entities)<newline46mondego>{<newline46mondego>    for (Survivor s : toRemove) {<newline46mondego>        survivors.remove(s);<newline46mondego>    }<newline46mondego><newline46mondego>    for (Zombie z : toAdd) {<newline46mondego>        zombies.add(z);<newline46mondego>    }<newline46mondego>}<newline46mondego>"
"6188splitHere46","20218736splitHere46","synchronized(entities)<newline46mondego>{<newline46mondego>    for (Entity e : entities) {<newline46mondego>        g.fillRect(x, y, w, h);<newline46mondego>    }<newline46mondego>}<newline46mondego>"
"6189splitHere46","20218916splitHere46","public class CustLogInInterceptor extends AbstractSoapInterceptor {<newline46mondego><newline46mondego><newline46mondego>    public CustLogInInterceptor() {<newline46mondego>        super(Phase.RECEIVE);<newline46mondego>    }<newline46mondego><newline46mondego>    @Override<newline46mondego>    public void handleMessage(SoapMessage message) throws Fault {<newline46mondego><newline46mondego>        HttpServletRequest httpRequest = (HttpServletRequest) message.get ( AbstractHTTPDestination.HTTP_REQUEST );<newline46mondego>        LoggerUtil.setLog(CustLogInInterceptor.class , LogConstants.DEBUG, <doubleQuotes46>Request From the address : <doubleQuotes46> + httpRequest.getRemoteAddr ( ) );<newline46mondego><newline46mondego>        try<newline46mondego>        {<newline46mondego>            //Handle you custom code add log it<newline46mondego>              LoggerUtil.setLog(CustLogInInterceptor.class , LogConstants.DEBUG, <doubleQuotes46>Log here<doubleQuotes46> );<newline46mondego>        }<newline46mondego><newline46mondego>        catch ( Exception ex )<newline46mondego>        {<newline46mondego>            ex.printStackTrace ( );<newline46mondego>        }<newline46mondego><newline46mondego><newline46mondego><newline46mondego>    }<newline46mondego><newline46mondego>}<newline46mondego>"
"6190splitHere46","20218916splitHere46","<jaxws:endpoint><newline46mondego><newline46mondego>    <jaxws:inInterceptors><newline46mondego>           <ref bean=<doubleQuotes46>custInterceptor<doubleQuotes46>/><newline46mondego>        </jaxws:inInterceptors><newline46mondego><newline46mondego></jaxws:endpoint><newline46mondego><newline46mondego><bean id=<doubleQuotes46>custInterceptor<doubleQuotes46> class=<doubleQuotes46>com.kp.CustLogInInterceptor<doubleQuotes46>><newline46mondego>"
"6191splitHere46","20218944splitHere46","0 0 12 1/2 * ? *<newline46mondego>"
"6192splitHere46","20218944splitHere46","1.     Wednesday, November 27, 2013 12:00 PM<newline46mondego> 2.     Friday, November 29, 2013 12:00 PM<newline46mondego> 3.     Sunday, December 1, 2013 12:00 PM<newline46mondego> 4.     Tuesday, December 3, 2013 12:00 PM<newline46mondego> 5.     Thursday, December 5, 2013 12:00 PM<newline46mondego>"
"6193splitHere46","20218985splitHere46","public class SO{<newline46mondego>  public static void main(String[] args) {<newline46mondego>    int choice = 0;<newline46mondego>    do{<newline46mondego>        choice = JOptionPane.showConfirmDialog(null, <doubleQuotes46>Continue?<doubleQuotes46>);<newline46mondego>    } while(choice == JOptionPane.YES_OPTION);<newline46mondego>  }<newline46mondego>}<newline46mondego>"
"6194splitHere46","20218993splitHere46","increamenti_Value"
"6195splitHere46","20218993splitHere46","main"
"6196splitHere46","20218993splitHere46","i"
"6197splitHere46","20218993splitHere46","for"
"6198splitHere46","20218993splitHere46","increamenti_Value"
"6199splitHere46","20218993splitHere46","for"
"6200splitHere46","20219258splitHere46","<?xml version=<doubleQuotes46>1.0<doubleQuotes46> encoding=<doubleQuotes46>utf-8<doubleQuotes46>?><newline46mondego><set xmlns:android=<doubleQuotes46>http://schemas.android.com/apk/res/android<doubleQuotes46> ><newline46mondego><newline46mondego>    <translate<newline46mondego>        android:duration=<doubleQuotes46>500<doubleQuotes46><newline46mondego>        android:fromYDelta=<doubleQuotes46>100%p<doubleQuotes46><newline46mondego>        android:toYDelta=<doubleQuotes46>0<doubleQuotes46> /><newline46mondego><newline46mondego><newline46mondego><newline46mondego></set><newline46mondego>"
"6201splitHere46","20219258splitHere46","<set xmlns:android=<doubleQuotes46>http://schemas.android.com/apk/res/android<doubleQuotes46> ><newline46mondego><newline46mondego>    <translate<newline46mondego>        android:duration=<doubleQuotes46>500<doubleQuotes46><newline46mondego>        android:fromYDelta=<doubleQuotes46>0<doubleQuotes46><newline46mondego>        android:toYDelta=<doubleQuotes46>-100%p<doubleQuotes46> /><newline46mondego><newline46mondego><newline46mondego></set><newline46mondego>"
"6202splitHere46","20219258splitHere46","overridePendingTransition(R.anim.activity_push_up_in, R.anim.push_up_out);<newline46mondego>"
"6203splitHere46","20219284splitHere46","Number"
"6204splitHere46","20219284splitHere46","CreditCard"
"6205splitHere46","20219284splitHere46","CreditCard"
"6206splitHere46","20219284splitHere46","Number"
"6207splitHere46","20219297splitHere46","Content-Encoding: gzip<newline46mondego>"
"6208splitHere46","20219309splitHere46","ItemPk.eventId"
"6209splitHere46","20219309splitHere46","insertable=false, updatable=false"
"6210splitHere46","20219309splitHere46","Item.event"
"6211splitHere46","20219309splitHere46","EVENT_ID"
"6212splitHere46","20219309splitHere46","Item.event"
"6213splitHere46","20219309splitHere46","@XmlTransient"
"6214splitHere46","20219309splitHere46","null"
"6215splitHere46","20219309splitHere46","insertable=false, updatable=false"
"6216splitHere46","20219309splitHere46","Item"
"6217splitHere46","20219309splitHere46","pair"
"6218splitHere46","20219309splitHere46","event"
"6219splitHere46","20219309splitHere46","ItemPk"
"6220splitHere46","20219327splitHere46","<ul>"
"6221splitHere46","20219327splitHere46","<li>"
"6222splitHere46","20219327splitHere46","<ul>"
"6223splitHere46","20219327splitHere46","public String getMenu(Page page, boolean isRoot) {<newline46mondego>    StringBuilder output = new StringBuilder();<newline46mondego>    if (isRoot) {<newline46mondego>        output.append(<doubleQuotes46><ul id=\<doubleQuotes46>drop-menu\<doubleQuotes46><doubleQuotes46>);<newline46mondego>        output.append(<doubleQuotes46> class=\<doubleQuotes46>popup-menu\<doubleQuotes46>><doubleQuotes46>);<newline46mondego>        }<newline46mondego>    else {<newline46mondego>        output.append(<doubleQuotes46><ul><doubleQuotes46>);<newline46mondego>        }<newline46mondego>    output.append(<doubleQuotes46><li><a href=\<doubleQuotes46><doubleQuotes46>)<newline46mondego>        .append(page.getPath())<newline46mondego>        .append(<doubleQuotes46>.html\<doubleQuotes46> class=\<doubleQuotes46>showSubPage\<doubleQuotes46> rel=\<doubleQuotes46><doubleQuotes46>)<newline46mondego>        .append(rootPage.getPath()).append(<doubleQuotes46>\<doubleQuotes46>><doubleQuotes46>);<newline46mondego>    String title = page.getPageTitle() == null ? page.getTitle() : page.getPageTitle();<newline46mondego>    output.append(title);<newline46mondego>    output.append(<doubleQuotes46></a><doubleQuotes46>);<newline46mondego><newline46mondego>    Iterator<Page> subPages = page.listChildren();<newline46mondego>    while(subPages.hasNext()){<newline46mondego>        output.append(getMenu(subPages.next(), false));<newline46mondego>    }<newline46mondego>    output.append(<doubleQuotes46></li><doubleQuotes46>);<newline46mondego>    output.append(<doubleQuotes46></ul><doubleQuotes46>);<newline46mondego>    return output.toString();<newline46mondego>}<newline46mondego>"
"6224splitHere46","20219338splitHere46","<fork>true</fork><newline46mondego>     <executable>${JAVA_1_7_HOME}/bin/javac</executable><newline46mondego>"
"6225splitHere46","20219338splitHere46","pom.xml"
"6226splitHere46","20219342splitHere46","DecimalFormat"
"6227splitHere46","20219342splitHere46","DecimalFormat decFormat = new DecimalFormat(<doubleQuotes46>#.##<doubleQuotes46>);<newline46mondego>Log.i(<doubleQuotes46>Operation<doubleQuotes46>, <doubleQuotes46>sum: <doubleQuotes46> + decFormat.format(a + b));<newline46mondego>"
"6228splitHere46","20219342splitHere46","2.90"
"6229splitHere46","20219342splitHere46","2.00"
"6230splitHere46","20219342splitHere46","DecimalFormat decFormat = new DecimalFormat(<doubleQuotes46>0.00<doubleQuotes46>);<newline46mondego>Log.i(<doubleQuotes46>Operation<doubleQuotes46>, <doubleQuotes46>sum: <doubleQuotes46> + decFormat.format(a + b));<newline46mondego>"
"6231splitHere46","20219419splitHere46","RecorderActivity"
"6232splitHere46","20219419splitHere46","AudioRecord"
"6233splitHere46","20219419splitHere46","public class RecorderActivity extends Activity {<newline46mondego>  ...     <newline46mondego>  private AudioRecord recorder = null;<newline46mondego>  ...<newline46mondego>}<newline46mondego>"
"6234splitHere46","20219511splitHere46","r"
"6235splitHere46","20219511splitHere46","theta"
"6236splitHere46","20219511splitHere46","r^2"
"6237splitHere46","20219511splitHere46","r^2"
"6238splitHere46","20219511splitHere46","A<newline46mondego><newline46mondego>                                  X<newline46mondego><newline46mondego>                  B          O          C<newline46mondego><newline46mondego><newline46mondego><newline46mondego>                             D<newline46mondego>"
"6239splitHere46","20219511splitHere46","Sin(pi - Theta - pi/4)/c = sin(pi/4)/r(Theta) where C sits at (c,0)<newline46mondego>"
"6240splitHere46","20219511splitHere46","r(Theta) = sqrt(2)*c / (2sin(3pi/4 - Theta)<newline46mondego>"
"6241splitHere46","20219511splitHere46","a*sin(pi/4)ln|tan((Theta+pi/4)/2)| evaluated from 0 to pi/4<newline46mondego>"
"6242splitHere46","20219511splitHere46","R = r(Theta)/s"
"6243splitHere46","20219511splitHere46","r(Theta)"
"6244splitHere46","20219614splitHere46","PreparedStatement"
"6245splitHere46","20219614splitHere46","PreparedStatement statement = connection.prepareStatement(<doubleQuotes46>insert into MyTable(MYSMALLINT) values(?);<doubleQuotes46><newline46mondego>for(Integer value:values){<newline46mondego>   try{<newline46mondego>      statement.setInt(1,value);<newline46mondego>      statement.addBatch();<newline46mondego>   }catch(SQLException e){<newline46mondego>      System.err.println(<doubleQuotes46>Invalid value: <doubleQuotes46> + e.getMessage());<newline46mondego>      throw e;<newline46mondego>   }<newline46mondego>}<newline46mondego>statement.executeBatch();<newline46mondego>"
"6246splitHere46","20219625splitHere46","tf.setDisable(true)<newline46mondego>"
"6247splitHere46","20219625splitHere46","ta.setDisable(true)<newline46mondego>"
"6248splitHere46","20219780splitHere46","LIMIT"
"6249splitHere46","20219780splitHere46","select * from persons LIMIT 1;"
"6250splitHere46","20220045splitHere46","System.out.println(Integer.parseInt(<doubleQuotes46>yellow<doubleQuotes46>, 35));<newline46mondego>System.out.println(Long.parseLong(<doubleQuotes46>howareyou<doubleQuotes46>, 35));<newline46mondego>"
"6251splitHere46","20220045splitHere46","Long.parseLong(<doubleQuotes46>abcdefghijklmno<doubleQuotes46>,25)<newline46mondego>"
"6252splitHere46","20220045splitHere46","System.out.println(Long.MAX_VALUE);<newline46mondego>System.out.println(new BigInteger(<doubleQuotes46>abcdefghijklmno<doubleQuotes46>,25));<newline46mondego>"
"6253splitHere46","20220053splitHere46","(?<=CVC=\<doubleQuotes46>)\d+(?=\<doubleQuotes46>)<newline46mondego>"
"6254splitHere46","20220087splitHere46","synchronized(lock) {<newline46mondego>    synchronized(lock) {<newline46mondego>        lock.synchronizedMethod();<newline46mondego>    }<newline46mondego>}<newline46mondego>"
"6255splitHere46","20220087splitHere46","lock.wait()"
"6256splitHere46","20220275splitHere46","/*<newline46mondego> *  Licensed to the Apache Software Foundation (ASF) under one or more<newline46mondego> *  contributor license agreements.  See the NOTICE file distributed with<newline46mondego> *  this work for additional information regarding copyright ownership.<newline46mondego> *  The ASF licenses this file to You under the Apache License, Version 2.0<newline46mondego> *  (the <doubleQuotes46>License<doubleQuotes46>); you may not use this file except in compliance with<newline46mondego> *  the License.  You may obtain a copy of the License at<newline46mondego> *<newline46mondego> *      http://www.apache.org/licenses/LICENSE-2.0<newline46mondego> *<newline46mondego> *  Unless required by applicable law or agreed to in writing, software<newline46mondego> *  distributed under the License is distributed on an <doubleQuotes46>AS IS<doubleQuotes46> BASIS,<newline46mondego> *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.<newline46mondego> *  See the License for the specific language governing permissions and<newline46mondego> *  limitations under the License.<newline46mondego> *<newline46mondego> */<newline46mondego><newline46mondego>package org.apache.ant.dotnet.build;<newline46mondego><newline46mondego>import java.io.File;<newline46mondego>import java.util.List;<newline46mondego><newline46mondego>import org.apache.ant.dotnet.util.CollectionUtils;<newline46mondego><newline46mondego>import org.w3c.dom.DocumentFragment;<newline46mondego>import org.w3c.dom.Element;<newline46mondego>import org.w3c.dom.Node;<newline46mondego>import org.w3c.dom.NodeList;<newline46mondego><newline46mondego>/**<newline46mondego> * Runs a MSBuild build process.<newline46mondego> */<newline46mondego>public class MSBuildTask extends AbstractBuildTask {<newline46mondego><newline46mondego>    private static final String TARGET = <doubleQuotes46>generated-by-ant<doubleQuotes46>;<newline46mondego>    private static final String ROOT = <doubleQuotes46>Project<doubleQuotes46>;<newline46mondego>    private static final String MSBUILD_NS =<newline46mondego>    <doubleQuotes46>http://schemas.microsoft.com/developer/msbuild/2003<doubleQuotes46>;<newline46mondego><newline46mondego>    public MSBuildTask() {<newline46mondego>        super();<newline46mondego>    }<newline46mondego><newline46mondego>    protected String getExecutable() {<newline46mondego>        return <doubleQuotes46>MSBuild.exe<doubleQuotes46>;<newline46mondego>    }<newline46mondego><newline46mondego>    protected String[] getBuildfileArguments(File buildFile) {<newline46mondego>        if (buildFile != null) {<newline46mondego>            return new String[] {<newline46mondego>                buildFile.getAbsolutePath()<newline46mondego>            };<newline46mondego>        } else {<newline46mondego>            return new String[0];<newline46mondego>        }<newline46mondego>    }<newline46mondego><newline46mondego>    protected String[] getTargetArguments(List targets) {<newline46mondego>        if (targets.size() > 0) {<newline46mondego>            StringBuffer sb = new StringBuffer(<doubleQuotes46>/target:<doubleQuotes46>);<newline46mondego>            sb.append(CollectionUtils.flattenToString(targets, <doubleQuotes46>;<doubleQuotes46>));<newline46mondego>            return new String[]{sb.toString()};<newline46mondego>        } else {<newline46mondego>            return new String[0];<newline46mondego>        }<newline46mondego>    }<newline46mondego><newline46mondego>    protected String[] getPropertyArguments(List properties) {<newline46mondego>        if (properties.size() > 0) {<newline46mondego>            StringBuffer sb = new StringBuffer(<doubleQuotes46>/property:<doubleQuotes46>);<newline46mondego>            sb.append(CollectionUtils.flattenToString(properties, <doubleQuotes46>;<doubleQuotes46>));<newline46mondego>            return new String[]{sb.toString()};<newline46mondego>        } else {<newline46mondego>            return new String[0];<newline46mondego>        }<newline46mondego>    }<newline46mondego><newline46mondego>    /**<newline46mondego>     * Turn the DocumentFragment into a DOM tree suitable as a build<newline46mondego>     * file when serialized.<newline46mondego>     *<newline46mondego>     * <p>If we have exactly one <Project> child, return that.<newline46mondego>     * Otherwise if we have only <Task> children, wrap them into a<newline46mondego>     * <Target> which in turn gets wrapped into a <Project>.<newline46mondego>     * Otherwise, fail.</p><newline46mondego>     */<newline46mondego>    protected Element makeTree(DocumentFragment f) {<newline46mondego>        NodeList nl = f.getChildNodes();<newline46mondego>        if (nl.getLength() == 1 <newline46mondego>            && nl.item(0).getNodeType() == Node.ELEMENT_NODE<newline46mondego>            && nl.item(0).getNodeName().equals(ROOT)) {<newline46mondego>            return (Element) nl.item(0);<newline46mondego>        } else {<newline46mondego>            Element p = f.getOwnerDocument().createElementNS(MSBUILD_NS,<newline46mondego>                                 ROOT);<newline46mondego>            p.setAttribute(<doubleQuotes46>DefaultTargets<doubleQuotes46>, TARGET);<newline46mondego><newline46mondego>            Element t = f.getOwnerDocument().createElementNS(MSBUILD_NS,<newline46mondego>                                 <doubleQuotes46>Target<doubleQuotes46>);<newline46mondego>            t.setAttribute(<doubleQuotes46>Name<doubleQuotes46>, TARGET);<newline46mondego><newline46mondego>            p.appendChild(t);<newline46mondego>            t.appendChild(f);<newline46mondego>            return p;<newline46mondego>        }<newline46mondego>    }<newline46mondego>}<newline46mondego>"
"6257splitHere46","20220319splitHere46","public void timer() {<newline46mondego>    for(int i=0; i<6; i++) {<newline46mondego>        try {<newline46mondego>            Thread.sleep(250L);<newline46mondego>        } catch (InterruptedException e) {<newline46mondego>            e.printStackTrace();<newline46mondego>        }<newline46mondego>    }<newline46mondego>}<newline46mondego>"
"6258splitHere46","20220319splitHere46","Thread.sleep(250L)"
"6259splitHere46","20220319splitHere46","final JSlider horse1 = new JSlider(0, 100, 0);<newline46mondego>final JSlider horse2 = new JSlider(0, 100, 0);<newline46mondego>final JSlider horse3 = new JSlider(0, 100, 0);<newline46mondego><newline46mondego>Timer timer = new Timer(100, new ActionListener() {<newline46mondego>    @Override<newline46mondego>    public void actionPerformed(ActionEvent e) {<newline46mondego>        Random random = new Random();<newline46mondego><newline46mondego>        int horse1Value = horse1.getValue();<newline46mondego>        horse1Value += random.nextInt(101 - horse1Value);<newline46mondego>        horse1.setValue(horse1Value);<newline46mondego><newline46mondego>        int horse2Value = horse2.getValue();<newline46mondego>        horse2Value += random.nextInt(101 - horse2Value);<newline46mondego>        horse2.setValue(horse2Value);<newline46mondego><newline46mondego>        int horse3Value = horse3.getValue();<newline46mondego>        horse3Value += random.nextInt(101 - horse3Value);<newline46mondego>        horse3.setValue(horse3Value);<newline46mondego><newline46mondego>        if(horse1Value == 100 && horse2Value == 100 && horse3Value == 100) {<newline46mondego>            System.out.println(<doubleQuotes46>Race finished!<doubleQuotes46>);<newline46mondego>            Timer timer = (Timer)e.getSource();<newline46mondego>            timer.stop();<newline46mondego>        }<newline46mondego>    }<newline46mondego>});<newline46mondego>timer.setRepeats(true);<newline46mondego>timer.start();<newline46mondego>"
"6260splitHere46","20220609splitHere46","com.example.Marker"
"6261splitHere46","20220609splitHere46","META-INF/services/com.example.Marker<newline46mondego>"
"6262splitHere46","20220609splitHere46","com.example.MarkerImplA<newline46mondego>com.example.MarkerImplB<newline46mondego>com.example.MarkerImplC<newline46mondego>"
"6263splitHere46","20220821splitHere46","<doubleQuotes46>jdk.lang.Process.allowAmbigousCommands<doubleQuotes46>"
"6264splitHere46","20220821splitHere46","<doubleQuotes46>true<doubleQuotes46>"
"6265splitHere46","20220821splitHere46","Runtime.exec(String)"
"6266splitHere46","20220905splitHere46","javax.xml.validation.Schema"
"6267splitHere46","20220905splitHere46","Marshaller"
"6268splitHere46","20220905splitHere46","Unmarshaller"
"6269splitHere46","20221052splitHere46","private void findIslands(List<Hex> playersHexes, Hex currentHex, Map map, List<Hex> island)<newline46mondego>{<newline46mondego>  List<Hex> neighbours = map.getNeighboursOf(currentHex);<newline46mondego><newline46mondego>  // for each neighbour we check if it belongs to player and if it is not already part of this island<newline46mondego>  for(Hex neighbour : neighbours) {<newline46mondego>     if (!island.contains(neighbour) && playersHexes.contains(neighbour))  {<newline46mondego>        island.add(neighbour);<newline46mondego><newline46mondego>        // now find all connecting neighbours of the current neighbour<newline46mondego>        findIslands(playersHexes, neighbour, map, island);<newline46mondego>     }<newline46mondego>  }<newline46mondego>  // now we have in island all connecting Hexes of current hex<newline46mondego>}<newline46mondego>"
"6270splitHere46","20221052splitHere46","while (Player has hexes that are not islands yet) {<newline46mondego>   // call findIsland() on one of those hexes and add the resulting list to your List<List<Hex>><newline46mondego>}<newline46mondego>"
"6271splitHere46","20221077splitHere46","LayoutManager"
"6272splitHere46","20221077splitHere46","setBounds(..)"
"6273splitHere46","20221077splitHere46","setLocation(..)"
"6274splitHere46","20221077splitHere46","setSize(..)"
"6275splitHere46","20221077splitHere46","LayoutManager"
"6276splitHere46","20221077splitHere46","setPreferredSize(..)"
"6277splitHere46","20221077splitHere46","setSize(..)"
"6278splitHere46","20221110splitHere46","HashTable"
"6279splitHere46","20221110splitHere46","Collection"
"6280splitHere46","20221110splitHere46","HashTable<String, ArrayList<Integer>> table = new HashTable<String, ArrayList<Integer>>();<newline46mondego><newline46mondego>// Populate it with values.<newline46mondego><newline46mondego>ArrayList<Integer> value = table.get(<doubleQuotes46>KEY<doubleQuotes46>);<newline46mondego>"
"6281splitHere46","20221110splitHere46","Generic type"
"6282splitHere46","20221110splitHere46","public class Test<T><newline46mondego>{<newline46mondego>      private T instance;<newline46mondego><newline46mondego>      public Test(T instance)<newline46mondego>      {<newline46mondego>          this.instance = instance;<newline46mondego>      }<newline46mondego>}<newline46mondego>"
"6283splitHere46","20221110splitHere46","Test<String> test = new Test<String>();<newline46mondego>Test<Integer> test2 = new Test<Integer>();<newline46mondego>"
"6284splitHere46","20221110splitHere46","instance"
"6285splitHere46","20221110splitHere46","T"
"6286splitHere46","20221110splitHere46","Object"
"6287splitHere46","20221110splitHere46","Collection"
"6288splitHere46","20221110splitHere46","Test<ArrayList<String>> test3 = new Test<ArrayList<String>>();<newline46mondego>"
"6289splitHere46","20221260splitHere46","protected Subscriber updateSubscriberAttributes(Subscriber subscriber, Collection<SubscriberAttributeDto> subscriberAttributesCollection) throws ErrorException {<newline46mondego>    // Do we have any custom attributes to store?<newline46mondego>    if ((subscriberAttributesCollection != null) && !subscriberAttributesCollection.isEmpty()) {<newline46mondego>        // Yes! Convert to a Map first.<newline46mondego>        Map<String, List<Object>> subscriberAttributesMap = new HashMap<String, List<Object>>(subscriberAttributesCollection.size());<newline46mondego>        for (SubscriberAttributeDto subscriberAttribute : subscriberAttributesCollection) {<newline46mondego>            // Convert the input attribute value to a database-appropriate value<newline46mondego>            SubscriberAttributeMetadata attrMetadata = subscriberAttribute.getAttributeMetadata();<newline46mondego>            if (attrMetadata != null) {<newline46mondego>                //<newline46mondego>                String columnName = attrMetadata.getColumnName();<newline46mondego>                List<Object> list = subscriberAttributesMap.get(columnName);<newline46mondego>                if (list == null) {<newline46mondego>                    list = new ArrayList<Object>();<newline46mondego>                    subscriberAttributesMap.put(columnName, list);<newline46mondego>                }<newline46mondego>                //<newline46mondego>                list.add(attrMetadata.convertToDatabaseValue((String) subscriberAttribute.getValue()));<newline46mondego>            }<newline46mondego>        }<newline46mondego><newline46mondego>        // Perform the update<newline46mondego>        return updateSubscriberAttributes(subscriber, subscriberAttributesMap);<newline46mondego>    } else {<newline46mondego>        return subscriber;<newline46mondego>    }<newline46mondego>}<newline46mondego><newline46mondego>protected Subscriber updateSubscriberAttributes(Subscriber subscriber,  Map<String, List<Object>> map) throws ErrorException {<newline46mondego>    // do some logic hiere ...<newline46mondego>    return new Subscriber();<newline46mondego>}<newline46mondego>"
"6290splitHere46","20221285splitHere46","for (String arg : args) {<newline46mondego>    if (arg.matches(<doubleQuotes46>^[A-Z]+$<doubleQuotes46>)) {<newline46mondego>        System.out.println(<doubleQuotes46>uppercase<doubleQuotes46>);<newline46mondego>    } else if (arg.matches(<doubleQuotes46>^[a-z]+$<doubleQuotes46>)) {<newline46mondego>        System.out.println(<doubleQuotes46>lowercase<doubleQuotes46>);<newline46mondego>    } else if (arg.matches(<doubleQuotes46>^[0-9]+$<doubleQuotes46>)) {<newline46mondego>        System.out.println(<doubleQuotes46>digits<doubleQuotes46>);<newline46mondego>    } else {<newline46mondego>        System.out.println(<doubleQuotes46>other<doubleQuotes46>);<newline46mondego>    }<newline46mondego>}<newline46mondego>"
"6291splitHere46","20221291splitHere46","rightIndex == j"
"6292splitHere46","20221291splitHere46","j"
"6293splitHere46","20221291splitHere46","if (rightIndex != j) {<newline46mondego>       list.remove(rightIndex);<newline46mondego>       list.add(rightIndex, list.get(j));<newline46mondego>}<newline46mondego>"
"6294splitHere46","20221450splitHere46","public boolean isAbove (Point other)<newline46mondego>{<newline46mondego>    return _y > other._y;       <newline46mondego>}<newline46mondego><newline46mondego>public boolean isUnder (Point other)<newline46mondego>{<newline46mondego>    return other.isAbove(this);<newline46mondego>}<newline46mondego><newline46mondego>public boolean isLeft (Point other)<newline46mondego>{<newline46mondego>    return _x < other._x;<newline46mondego>}<newline46mondego><newline46mondego>public boolean isRight (Point other)<newline46mondego>{<newline46mondego>    return other.isLeft(this);<newline46mondego>}<newline46mondego>"
"6295splitHere46","20221465splitHere46","DELETE"
"6296splitHere46","20221465splitHere46","DELETE ... LIMIT n"
"6297splitHere46","20221465splitHere46","n"
"6298splitHere46","20221465splitHere46","n"
"6299splitHere46","20221465splitHere46","n"
"6300splitHere46","20221493splitHere46","\\"
"6301splitHere46","20221493splitHere46","\"
"6302splitHere46","20221493splitHere46","String s = <doubleQuotes46>This is a test [url] http://www.google.com.hk [/url]\n<doubleQuotes46><newline46mondego>         + <doubleQuotes46> and [img] http://www.abc.com/test.png [/img]<doubleQuotes46>;<newline46mondego><newline46mondego>Pattern p = Pattern.compile(<doubleQuotes46>\\[[^\\]]*\\]([^\\]]*)\\[[^\\]]*\\]<doubleQuotes46>);<newline46mondego>Matcher m = p.matcher(s);<newline46mondego>while (m.find()) {<newline46mondego>  System.out.println(m.group(1).trim());<newline46mondego>}<newline46mondego>"
"6303splitHere46","20221493splitHere46","working demo"
"6304splitHere46","20221493splitHere46","\[               '['<newline46mondego>[^\]]*           any character except: '\]' (0 or more times)<newline46mondego> \]              ']'<newline46mondego>(                group and capture to \1:<newline46mondego> [^\]]*          any character except: '\]' (0 or more times)<newline46mondego>)                end of \1<newline46mondego>\[               '['<newline46mondego> [^\]]*          any character except: '\]' (0 or more times)<newline46mondego>\]               ']'<newline46mondego>"
"6305splitHere46","20221493splitHere46","img"
"6306splitHere46","20221493splitHere46","url"
"6307splitHere46","20221493splitHere46","Pattern p = Pattern.compile(<doubleQuotes46>(?i)\\[(?:url|img)\\]([^\\]]*)\\[\\/(?:url|img)\\]<doubleQuotes46>);<newline46mondego>"
"6308splitHere46","20221517splitHere46","Callable<R>"
"6309splitHere46","20221517splitHere46","Runnable"
"6310splitHere46","20221517splitHere46","Future<R>"
"6311splitHere46","20221517splitHere46","public static class CalculationThread implements Callable<Integer> {<newline46mondego>    int input;<newline46mondego><newline46mondego>    public CalculationThread(int input) {<newline46mondego>        this.input = input;<newline46mondego>    }<newline46mondego><newline46mondego>    @Override<newline46mondego>    public Integer call() throws Exception {<newline46mondego>        return input + 1;<newline46mondego>    }<newline46mondego>}<newline46mondego><newline46mondego>public static void main(String[] args) throws InterruptedException {<newline46mondego>    ExecutorService executorService = Executors.newFixedThreadPool(4);<newline46mondego><newline46mondego>    Future<Integer> result = executorService.submit(new CalculationThread(3));<newline46mondego><newline46mondego>    try {<newline46mondego>        Integer integer = result.get(10, TimeUnit.MILLISECONDS);<newline46mondego>        System.out.println(<doubleQuotes46>result: <doubleQuotes46> + integer);<newline46mondego>    } catch (Exception e) {<newline46mondego>        // interrupts if there is any possible error<newline46mondego>        result.cancel(true);<newline46mondego>    }<newline46mondego><newline46mondego>    executorService.shutdown();<newline46mondego>    executorService.awaitTermination(1, TimeUnit.SECONDS);<newline46mondego>}<newline46mondego>"
"6312splitHere46","20221517splitHere46","result: 4<newline46mondego>"
"6313splitHere46","20221527splitHere46","k"
"6314splitHere46","20221527splitHere46","m"
"6315splitHere46","20221527splitHere46","n"
"6316splitHere46","20221527splitHere46","m"
"6317splitHere46","20221527splitHere46","O(log m)"
"6318splitHere46","20221527splitHere46","O(k log m)"
"6319splitHere46","20221527splitHere46","O(1)"
"6320splitHere46","20221527splitHere46","O(k)"
"6321splitHere46","20221527splitHere46","m"
"6322splitHere46","20221527splitHere46","O(m log m)"
"6323splitHere46","20221527splitHere46","HashMap"
"6324splitHere46","20221527splitHere46","PriorityQueue"
"6325splitHere46","20221527splitHere46","n"
"6326splitHere46","20221527splitHere46","n"
"6327splitHere46","20221527splitHere46","O(m log n)"
"6328splitHere46","20221527splitHere46","O(k + m log n)"
"6329splitHere46","20221527splitHere46","n <= m"
"6330splitHere46","20221527splitHere46","m <= k"
"6331splitHere46","20221527splitHere46","m log n <= k log m"
"6332splitHere46","20221527splitHere46","n"
"6333splitHere46","20221527splitHere46","m"
"6334splitHere46","20221527splitHere46","k + m log n <= k log m"
"6335splitHere46","20221527splitHere46","HashMap"
"6336splitHere46","20221605splitHere46","gl.glBegin(GL.GL_TRIANGLES);<newline46mondego>{<newline46mondego>    gl.glEnable(GL.GL_DEPTH_TEST);<newline46mondego>    gl.glPolygonMode(GL.GL_FRONT_AND_BACK, GL.GL_LINES);<newline46mondego>    ...<newline46mondego>"
"6337splitHere46","20221605splitHere46","glBegin()/glEnd()"
"6338splitHere46","20221605splitHere46","glEnable()"
"6339splitHere46","20221605splitHere46","glPolygonMode()"
"6340splitHere46","20221605splitHere46","glBegin()"
"6341splitHere46","20221605splitHere46","gl.glVertex3f(v1.x - xMiddle, v1.y - yMiddle, v1.z - zMiddle);<newline46mondego>    gl.glNormal3f(n1.x, n1.y, n1.z);<newline46mondego>"
"6342splitHere46","20221605splitHere46","gl.glNormal3f(n1.x, n1.y, n1.z);<newline46mondego>    gl.glVertex3f(v1.x - xMiddle, v1.y - yMiddle, v1.z - zMiddle);<newline46mondego>"
"6343splitHere46","20221605splitHere46","glNormal()"
"6344splitHere46","20221605splitHere46","glVertex()"
"6345splitHere46","20221627splitHere46","Properties"
"6346splitHere46","20221627splitHere46","System.getProperties()"
"6347splitHere46","20221627splitHere46","Properties"
"6348splitHere46","20221627splitHere46","Properties"
"6349splitHere46","20221827splitHere46","if (nameArrayCount < 10) {<newline46mondego>      System.out.println(<doubleQuotes46>Enter the student's name in the following format - surname, forename: <doubleQuotes46>);<newline46mondego>      studentName = input.next();<newline46mondego>      studentNamesArray[nameArrayCount] = studentName;<newline46mondego>      nameArrayCount = nameArrayCount + 1;<newline46mondego>    }<newline46mondego>"
"6350splitHere46","20221919splitHere46","package stackoverflow;<newline46mondego><newline46mondego>import java.awt.EventQueue;<newline46mondego><newline46mondego>public class Login {<newline46mondego><newline46mondego>    private JFrame frame;<newline46mondego>    private JTextField txtusername;<newline46mondego>    private JPasswordField txtPassword;<newline46mondego>    private JButton btnPlaceorder;<newline46mondego><newline46mondego>    /**<newline46mondego>     * Launch the application.<newline46mondego>     */<newline46mondego>    public static void main(String[] args) {<newline46mondego>        EventQueue.invokeLater(new Runnable() {<newline46mondego>            public void run() {<newline46mondego>                try {<newline46mondego>                    Login window = new Login();<newline46mondego>                    window.frame.setVisible(true);<newline46mondego>                } catch (Exception e) {<newline46mondego>                    e.printStackTrace();<newline46mondego>                }<newline46mondego>            }<newline46mondego>        });<newline46mondego>    }<newline46mondego><newline46mondego>    /**<newline46mondego>     * Create the application.<newline46mondego>     */<newline46mondego>    public Login() {<newline46mondego>        initialize();<newline46mondego>    }<newline46mondego><newline46mondego>    /**<newline46mondego>     * Initialize the contents of the frame.<newline46mondego>     */<newline46mondego>    private void initialize() {<newline46mondego>        frame = new JFrame();<newline46mondego>        frame.setBounds(100, 100, 341, 240);<newline46mondego>        frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);<newline46mondego>        frame.getContentPane().setLayout(null);<newline46mondego><newline46mondego>        JLabel lblUsername = new JLabel(<doubleQuotes46>Username:<doubleQuotes46>);<newline46mondego>        lblUsername.setBounds(21, 56, 52, 14);<newline46mondego>        frame.getContentPane().add(lblUsername);<newline46mondego><newline46mondego>        JLabel lblPassword = new JLabel(<doubleQuotes46>Password<doubleQuotes46>);<newline46mondego>        lblPassword.setBounds(21, 94, 52, 14);<newline46mondego>        frame.getContentPane().add(lblPassword);<newline46mondego><newline46mondego>        txtusername = new JTextField();<newline46mondego>        txtusername.setBounds(83, 53, 86, 20);<newline46mondego>        frame.getContentPane().add(txtusername);<newline46mondego>        txtusername.setColumns(10);<newline46mondego><newline46mondego>        txtPassword = new JPasswordField();<newline46mondego>        txtPassword.setColumns(10);<newline46mondego>        txtPassword.setBounds(83, 91, 86, 20);<newline46mondego>        frame.getContentPane().add(txtPassword);<newline46mondego><newline46mondego>        JButton btnNewButton = new JButton(<doubleQuotes46>Login<doubleQuotes46>);<newline46mondego>        btnNewButton.addActionListener(new ActionListener() {<newline46mondego>            public void actionPerformed(ActionEvent e) {<newline46mondego>                if (txtusername.getText().equals(<doubleQuotes46>admin<doubleQuotes46>) && new String(txtPassword.getPassword()).equals(<doubleQuotes46>admin<doubleQuotes46>)) {<newline46mondego>                    btnPlaceorder.setEnabled(true);<newline46mondego>                } else {<newline46mondego>                    btnPlaceorder.setEnabled(false);<newline46mondego>                }<newline46mondego>            }<newline46mondego>        });<newline46mondego>        btnNewButton.setBounds(10, 138, 89, 23);<newline46mondego>        frame.getContentPane().add(btnNewButton);<newline46mondego><newline46mondego>        btnPlaceorder = new JButton(<doubleQuotes46>PlaceOrder<doubleQuotes46>);<newline46mondego>        btnPlaceorder.setEnabled(false);<newline46mondego>        btnPlaceorder.setBounds(105, 138, 89, 23);<newline46mondego>        frame.getContentPane().add(btnPlaceorder);<newline46mondego>    }<newline46mondego>}<newline46mondego>"
"6351splitHere46","20221930splitHere46","out = new PrintWriter(<newline46mondego>   new BufferedWriter(new OutputStreamWriter(<newline46mondego>        socket.getOutputStream(), <doubleQuotes46>UTF-8<doubleQuotes46>)), true);<newline46mondego>"
"6352splitHere46","20221930splitHere46","in = new BufferedReader(new InputStreamReader(socket.getInputStream(), <doubleQuotes46>UTF-8<doubleQuotes46>));<newline46mondego>"
"6353splitHere46","20222161splitHere46",".*"
"6354splitHere46","20222161splitHere46",".*?"
"6355splitHere46","20222161splitHere46","(?<=CVC=\<doubleQuotes46>).*?(?=<doubleQuotes46>)<newline46mondego>"
"6356splitHere46","20222161splitHere46","(?<=CreditCard.*CVC=\<doubleQuotes46>).*?(?=<doubleQuotes46>)<newline46mondego>"
"6357splitHere46","20222161splitHere46","CreditCard.*?CVC=\<doubleQuotes46>(.*?)<doubleQuotes46><newline46mondego>"
"6358splitHere46","20222161splitHere46",".*"
"6359splitHere46","20222177splitHere46","Button button = new Button(<doubleQuotes46>Click Me!<doubleQuotes46>);<newline46mondego>button.setStyleName(Button.STYLE_LINK);<newline46mondego>button.addClickListener(new Button.ClickListener() {<newline46mondego>    public void buttonClick(ClickEvent event) {<newline46mondego>        // open your sub window here<newline46mondego>        Window sub = new Window(<doubleQuotes46>Subwindow<doubleQuotes46>);<newline46mondego>        v.addWindow(sub);<newline46mondego>    }<newline46mondego>});<newline46mondego><newline46mondego>v.addComponent(button);<newline46mondego>"
"6360splitHere46","20222218splitHere46","You can do something like:-<newline46mondego><newline46mondego>public void closeConnection() {<newline46mondego>    try{<newline46mondego>    if(connection==null)<newline46mondego>    {<newline46mondego>    //Code to create connection and use DB operations<newline46mondego>    }<newline46mondego>}<newline46mondego>    catch (SQLException e) {<newline46mondego>            e.printStackTrace();<newline46mondego>        }<newline46mondego>    finally{<newline46mondego>            if(connection!=null){<newline46mondego>              try {<newline46mondego>                connection.close();<newline46mondego>              } catch (SQLException e) {<newline46mondego>                e.printStackTrace();<newline46mondego>              }<newline46mondego>    }<newline46mondego><newline46mondego><newline46mondego>        }<newline46mondego>"
"6361splitHere46","20222329splitHere46","while (input.hasNext()) {<newline46mondego>        String word = input.next();<newline46mondego>        Pattern pattern1 = Pattern.compile(<doubleQuotes46>Name:<doubleQuotes46>);<newline46mondego>        Pattern pattern2 = Pattern.compile(<doubleQuotes46>Amount:<doubleQuotes46>);            <newline46mondego>        Matcher matcher1 = pattern1.matcher(word);<newline46mondego>        Matcher matcher2 = pattern2.matcher(word);<newline46mondego>        if(matcher1.matches()){<newline46mondego>            System.out.println(input.next());<newline46mondego>        }<newline46mondego>        if(matcher2.matches()){<newline46mondego>            System.out.println(input.next());<newline46mondego>        }           <newline46mondego>    }<newline46mondego>"
"6362splitHere46","20222392splitHere46","grails -noreloading run-app"
"6363splitHere46","20222392splitHere46","org.hibernate.HibernateException: IllegalAccessException trying to instantiate: org.hibernate.type.BlobType"
"6364splitHere46","20222515splitHere46","null pointer exception"
"6365splitHere46","20222515splitHere46","if (!results.getString(<doubleQuotes46>level<doubleQuotes46>).isEmpty()) {                <newline46mondego>    .......<newline46mondego>   } else if (!results.getString(<doubleQuotes46>thesisTitle<doubleQuotes46>).isEmpty() ||<newline46mondego>          !results.getString(<doubleQuotes46>thesisAdvisor<doubleQuotes46>).isEmpty()) {  <newline46mondego>   ..........<newline46mondego>   } else if (!results.getString(<doubleQuotes46>company<doubleQuotes46>).isEmpty()) {     <newline46mondego>   ............<newline46mondego>"
"6366splitHere46","20222515splitHere46","getString( .. )"
"6367splitHere46","20222515splitHere46","null"
"6368splitHere46","20222515splitHere46","getString( ... ).isEmpty()"
"6369splitHere46","20222515splitHere46","null pointer exception"
"6370splitHere46","20222595splitHere46","(mstime - (seconds * 1000))"
"6371splitHere46","20222595splitHere46","long"
"6372splitHere46","20222595splitHere46","double"
"6373splitHere46","20222595splitHere46","double"
"6374splitHere46","20222595splitHere46","double decimal = (mstime - (seconds * 1000)) / 1000d; // note the d<newline46mondego>"
"6375splitHere46","20222595splitHere46","System.nanoTime()"
"6376splitHere46","20222595splitHere46","System.currentTimeMillis()"
"6377splitHere46","20222595splitHere46","System.currentTimeMillis()"
"6378splitHere46","20222714splitHere46","OpenAddressHash"
"6379splitHere46","20222714splitHere46","i"
"6380splitHere46","20222714splitHere46","int index = ((start + (c1 * i) + (c2 * i * i))) % size;<newline46mondego>"
"6381splitHere46","20222714splitHere46","c2   * i    * i<newline46mondego> 1000 * 1999 * 1999<newline46mondego>"
"6382splitHere46","20222714splitHere46","start + (c1 *i)"
"6383splitHere46","20222714splitHere46","c1"
"6384splitHere46","20222714splitHere46","start"
"6385splitHere46","20222714splitHere46","size"
"6386splitHere46","20222773splitHere46","Event.addNativePreviewHandler(new NativePreviewHandler() { <newline46mondego>  @Override <newline46mondego>  public void onPreviewNativeEvent(NativePreviewEvent event) {<newline46mondego>    if (event.getNativeEvent().getType().equals(<doubleQuotes46>click<doubleQuotes46>)) { <newline46mondego>      // reset your timer<newline46mondego>    } <newline46mondego>  }<newline46mondego>});<newline46mondego>"
"6387splitHere46","20222817splitHere46","toReturn = Iterables.find(articles, new Predicate<Object>() {<newline46mondego>    public boolean apply(Object item) {<newline46mondego>            return item.toString().equals(input);<newline46mondego>    }<newline46mondego>});<newline46mondego>"
"6388splitHere46","20222817splitHere46","toReturn = Iterables.find(articles, new Predicate<Object>() {<newline46mondego>    public boolean apply(Object item) {<newline46mondego>            return item.toString().equals(input);<newline46mondego>    }<newline46mondego><newline46mondego>    public boolean equals(Object obj) {<newline46mondego>        // check whether the other object is also a Predicate<newline46mondego>    }<newline46mondego>});<newline46mondego>"
"6389splitHere46","20222931splitHere46","setScore();"
"6390splitHere46","20222931splitHere46","public void setScore(int score)<newline46mondego>                     â†‘<newline46mondego>     Expecting an argument of type int<newline46mondego>"
"6391splitHere46","20222931splitHere46","main"
"6392splitHere46","20222931splitHere46","setScore(score);<newline46mondego>"
"6393splitHere46","20222931splitHere46","static"
"6394splitHere46","20222931splitHere46","static"
"6395splitHere46","20223013splitHere46","import com.hp.hpl.jena.ontology.OntClass;<newline46mondego>import com.hp.hpl.jena.ontology.OntModel;<newline46mondego>import com.hp.hpl.jena.ontology.OntModelSpec;<newline46mondego>import com.hp.hpl.jena.rdf.model.Model;<newline46mondego>import com.hp.hpl.jena.rdf.model.ModelFactory;<newline46mondego>import com.hp.hpl.jena.rdf.model.Resource;<newline46mondego>import com.hp.hpl.jena.vocabulary.RDFS;<newline46mondego><newline46mondego>public class AddTypesExample {<newline46mondego>    final private static String NS = <doubleQuotes46>http://stackoverflow.com/q/20222080/1281433/<doubleQuotes46>;<newline46mondego><newline46mondego>    public static void main( String[] args ) {<newline46mondego>        subclassModel().write( System.out, <doubleQuotes46>RDF/XML<doubleQuotes46> );<newline46mondego>        System.out.println();<newline46mondego>        subclassOntModel().write( System.out, <doubleQuotes46>RDF/XML<doubleQuotes46> );<newline46mondego>    }<newline46mondego><newline46mondego>    public static Model subclassModel() {<newline46mondego>        final Model model = ModelFactory.createDefaultModel();<newline46mondego>        final Resource classA = model.createResource( NS+<doubleQuotes46>A<doubleQuotes46> );<newline46mondego>        final Resource classB = model.createResource( NS+<doubleQuotes46>B<doubleQuotes46> );<newline46mondego>        final Resource classC = model.createResource( NS+<doubleQuotes46>C<doubleQuotes46> );<newline46mondego>        classB.addProperty( RDFS.subClassOf, classA );<newline46mondego>        model.add( classC, RDFS.subClassOf, classA );<newline46mondego>        return model;<newline46mondego>    }<newline46mondego><newline46mondego>    public static OntModel subclassOntModel() { <newline46mondego>        final OntModel model = ModelFactory.createOntologyModel( OntModelSpec.RDFS_MEM );<newline46mondego>        final OntClass a = model.createClass( NS+<doubleQuotes46>A<doubleQuotes46> );<newline46mondego>        final OntClass b = model.createClass( NS+<doubleQuotes46>B<doubleQuotes46> );<newline46mondego>        final OntClass c = model.createClass( NS+<doubleQuotes46>C<doubleQuotes46> );<newline46mondego>        a.addSubClass( b );<newline46mondego>        c.addSuperClass( a );<newline46mondego>        return model;<newline46mondego>    }<newline46mondego>}<newline46mondego>"
"6396splitHere46","20223013splitHere46","<!-- the plain Model --><newline46mondego><rdf:RDF<newline46mondego>    xmlns:rdf=<doubleQuotes46>http://www.w3.org/1999/02/22-rdf-syntax-ns#<doubleQuotes46><newline46mondego>    xmlns:rdfs=<doubleQuotes46>http://www.w3.org/2000/01/rdf-schema#<doubleQuotes46> > <newline46mondego>  <rdf:Description rdf:about=<doubleQuotes46>http://stackoverflow.com/q/20222080/1281433/C<doubleQuotes46>><newline46mondego>    <rdfs:subClassOf rdf:resource=<doubleQuotes46>http://stackoverflow.com/q/20222080/1281433/A<doubleQuotes46>/><newline46mondego>  </rdf:Description><newline46mondego>  <rdf:Description rdf:about=<doubleQuotes46>http://stackoverflow.com/q/20222080/1281433/B<doubleQuotes46>><newline46mondego>    <rdfs:subClassOf rdf:resource=<doubleQuotes46>http://stackoverflow.com/q/20222080/1281433/A<doubleQuotes46>/><newline46mondego>  </rdf:Description><newline46mondego></rdf:RDF><newline46mondego><newline46mondego><!-- the OntModel --><newline46mondego><rdf:RDF<newline46mondego>    xmlns:rdf=<doubleQuotes46>http://www.w3.org/1999/02/22-rdf-syntax-ns#<doubleQuotes46><newline46mondego>    xmlns:owl=<doubleQuotes46>http://www.w3.org/2002/07/owl#<doubleQuotes46><newline46mondego>    xmlns:xsd=<doubleQuotes46>http://www.w3.org/2001/XMLSchema#<doubleQuotes46><newline46mondego>    xmlns:rdfs=<doubleQuotes46>http://www.w3.org/2000/01/rdf-schema#<doubleQuotes46> > <newline46mondego>  <rdf:Description rdf:about=<doubleQuotes46>http://stackoverflow.com/q/20222080/1281433/C<doubleQuotes46>><newline46mondego>    <rdfs:subClassOf rdf:resource=<doubleQuotes46>http://stackoverflow.com/q/20222080/1281433/A<doubleQuotes46>/><newline46mondego>    <rdf:type rdf:resource=<doubleQuotes46>http://www.w3.org/2000/01/rdf-schema#Class<doubleQuotes46>/><newline46mondego>  </rdf:Description><newline46mondego>  <rdf:Description rdf:about=<doubleQuotes46>http://stackoverflow.com/q/20222080/1281433/B<doubleQuotes46>><newline46mondego>    <rdfs:subClassOf rdf:resource=<doubleQuotes46>http://stackoverflow.com/q/20222080/1281433/A<doubleQuotes46>/><newline46mondego>    <rdf:type rdf:resource=<doubleQuotes46>http://www.w3.org/2000/01/rdf-schema#Class<doubleQuotes46>/><newline46mondego>  </rdf:Description><newline46mondego>  <rdf:Description rdf:about=<doubleQuotes46>http://stackoverflow.com/q/20222080/1281433/A<doubleQuotes46>><newline46mondego>    <rdf:type rdf:resource=<doubleQuotes46>http://www.w3.org/2000/01/rdf-schema#Class<doubleQuotes46>/><newline46mondego>  </rdf:Description><newline46mondego></rdf:RDF><newline46mondego>"
"6397splitHere46","20223013splitHere46","<rdf:Description rdf:about=<doubleQuotes46>http://www.help.me/NS/NewResource<doubleQuotes46>><newline46mondego>    <rdf:type rdf:resource=<doubleQuotes46>http://www.help.me/NS/Subclassname<doubleQuotes46>/><newline46mondego>    ...<newline46mondego></rdf:Description><newline46mondego>"
"6398splitHere46","20223013splitHere46","model.createResource( <doubleQuotes46>http://www.help.me/NS/NewResource<doubleQuotes46>,<newline46mondego>                      model.createResource( <doubleQuotes46>http://www.help.me/NS/Subclassname<doubleQuotes46> ));<newline46mondego>"
"6399splitHere46","20223013splitHere46","import com.hp.hpl.jena.rdf.model.Model;<newline46mondego>import com.hp.hpl.jena.rdf.model.ModelFactory;<newline46mondego>import com.hp.hpl.jena.rdf.model.Resource;<newline46mondego>import com.hp.hpl.jena.vocabulary.RDF;<newline46mondego><newline46mondego>public class AddTypesExample {<newline46mondego>    public static void main(String[] args) {<newline46mondego>        final String NS = <doubleQuotes46>http://stackoverflow.com/q/20222080/1281433/<doubleQuotes46>;<newline46mondego>        final Model model = ModelFactory.createDefaultModel();<newline46mondego><newline46mondego>        final Resource classA = model.createResource( NS+<doubleQuotes46>A<doubleQuotes46> );<newline46mondego>        final Resource classB = model.createResource( NS+<doubleQuotes46>B<doubleQuotes46> );<newline46mondego>        final Resource classC = model.createResource( NS+<doubleQuotes46>C<doubleQuotes46> );<newline46mondego>        final Resource classD = model.createResource( NS+<doubleQuotes46>D<doubleQuotes46> );<newline46mondego><newline46mondego>        // You can create a resource with a specified type.<newline46mondego>        final Resource x = model.createResource( NS+<doubleQuotes46>x<doubleQuotes46>, classA );<newline46mondego><newline46mondego>        // And subsequent calls to createResource will add more types.<newline46mondego>        model.createResource( NS+<doubleQuotes46>x<doubleQuotes46>, classB );<newline46mondego><newline46mondego>        // You could also add the type to the resource<newline46mondego>        x.addProperty( RDF.type, classC );<newline46mondego><newline46mondego>        // Or add the statement to the model<newline46mondego>        model.add( x, RDF.type, classD );<newline46mondego><newline46mondego>        model.write( System.out, <doubleQuotes46>RDF/XML<doubleQuotes46> );<newline46mondego>    }<newline46mondego>}<newline46mondego>"
"6400splitHere46","20223013splitHere46","<rdf:RDF<newline46mondego>    xmlns:j.0=<doubleQuotes46>http://stackoverflow.com/q/20222080/1281433/<doubleQuotes46><newline46mondego>    xmlns:rdf=<doubleQuotes46>http://www.w3.org/1999/02/22-rdf-syntax-ns#<doubleQuotes46> > <newline46mondego>  <rdf:Description rdf:about=<doubleQuotes46>http://stackoverflow.com/q/20222080/1281433/x<doubleQuotes46>><newline46mondego>    <rdf:type rdf:resource=<doubleQuotes46>http://stackoverflow.com/q/20222080/1281433/D<doubleQuotes46>/><newline46mondego>    <rdf:type rdf:resource=<doubleQuotes46>http://stackoverflow.com/q/20222080/1281433/C<doubleQuotes46>/><newline46mondego>    <rdf:type rdf:resource=<doubleQuotes46>http://stackoverflow.com/q/20222080/1281433/B<doubleQuotes46>/><newline46mondego>    <rdf:type rdf:resource=<doubleQuotes46>http://stackoverflow.com/q/20222080/1281433/A<doubleQuotes46>/><newline46mondego>  </rdf:Description><newline46mondego></rdf:RDF><newline46mondego>"
"6401splitHere46","20223013splitHere46","createIndividual"
"6402splitHere46","20223013splitHere46","addRDFType"
"6403splitHere46","20223013splitHere46","public static void main( String[] args ) {<newline46mondego>    final OntModel ontModel = ModelFactory.createOntologyModel( OntModelSpec.RDFS_MEM );<newline46mondego>    ontModel.setNsPrefix( <doubleQuotes46>so<doubleQuotes46>, NS );<newline46mondego>    final OntClass classA = ontModel.createClass( NS+<doubleQuotes46>A<doubleQuotes46> );<newline46mondego>    final OntClass classB = ontModel.createClass( NS+<doubleQuotes46>B<doubleQuotes46> );<newline46mondego>    final OntClass classC = ontModel.createClass( NS+<doubleQuotes46>C<doubleQuotes46> );<newline46mondego><newline46mondego>    final Individual x = ontModel.createIndividual( NS+<doubleQuotes46>x<doubleQuotes46>, classA );<newline46mondego>    x.addRDFType( classB );<newline46mondego>    classC.createIndividual( NS+<doubleQuotes46>x<doubleQuotes46> );<newline46mondego><newline46mondego>    ontModel.write( System.out, <doubleQuotes46>RDF/XML<doubleQuotes46> );<newline46mondego>}<newline46mondego>"
"6404splitHere46","20223013splitHere46","<rdf:RDF<newline46mondego>    xmlns:so=<doubleQuotes46>http://stackoverflow.com/q/20222080/1281433/<doubleQuotes46><newline46mondego>    xmlns:rdf=<doubleQuotes46>http://www.w3.org/1999/02/22-rdf-syntax-ns#<doubleQuotes46><newline46mondego>    xmlns:owl=<doubleQuotes46>http://www.w3.org/2002/07/owl#<doubleQuotes46><newline46mondego>    xmlns:xsd=<doubleQuotes46>http://www.w3.org/2001/XMLSchema#<doubleQuotes46><newline46mondego>    xmlns:rdfs=<doubleQuotes46>http://www.w3.org/2000/01/rdf-schema#<doubleQuotes46> > <newline46mondego>  <rdf:Description rdf:about=<doubleQuotes46>http://stackoverflow.com/q/20222080/1281433/C<doubleQuotes46>><newline46mondego>    <rdf:type rdf:resource=<doubleQuotes46>http://www.w3.org/2000/01/rdf-schema#Class<doubleQuotes46>/><newline46mondego>  </rdf:Description><newline46mondego>  <rdf:Description rdf:about=<doubleQuotes46>http://stackoverflow.com/q/20222080/1281433/B<doubleQuotes46>><newline46mondego>    <rdf:type rdf:resource=<doubleQuotes46>http://www.w3.org/2000/01/rdf-schema#Class<doubleQuotes46>/><newline46mondego>  </rdf:Description><newline46mondego>  <rdf:Description rdf:about=<doubleQuotes46>http://stackoverflow.com/q/20222080/1281433/x<doubleQuotes46>><newline46mondego>    <rdf:type rdf:resource=<doubleQuotes46>http://stackoverflow.com/q/20222080/1281433/C<doubleQuotes46>/><newline46mondego>    <rdf:type rdf:resource=<doubleQuotes46>http://stackoverflow.com/q/20222080/1281433/B<doubleQuotes46>/><newline46mondego>    <rdf:type rdf:resource=<doubleQuotes46>http://stackoverflow.com/q/20222080/1281433/A<doubleQuotes46>/><newline46mondego>  </rdf:Description><newline46mondego>  <rdf:Description rdf:about=<doubleQuotes46>http://stackoverflow.com/q/20222080/1281433/A<doubleQuotes46>><newline46mondego>    <rdf:type rdf:resource=<doubleQuotes46>http://www.w3.org/2000/01/rdf-schema#Class<doubleQuotes46>/><newline46mondego>  </rdf:Description><newline46mondego></rdf:RDF><newline46mondego>"
"6405splitHere46","20223049splitHere46","TrieMap"
"6406splitHere46","20223087splitHere46","String[] arrayY = request.getParameterValues(<doubleQuotes46>arrayY<doubleQuotes46>);<newline46mondego>"
"6407splitHere46","20223093splitHere46","<mvc:annotation-driven /><newline46mondego>"
"6408splitHere46","20223093splitHere46","DispatcherServlet"
"6409splitHere46","20223093splitHere46","main"
"6410splitHere46","20223093splitHere46","DispatcherServlet"
"6411splitHere46","20223093splitHere46","<servlet-mapping><newline46mondego>    <servlet-name>main</servlet-name><newline46mondego>    <url-pattern>/</url-pattern><newline46mondego></servlet-mapping><newline46mondego>"
"6412splitHere46","20223103splitHere46","ServletHolder.setInitParameter(name,value)"
"6413splitHere46","20223103splitHere46","pathInfoOnly"
"6414splitHere46","20223103splitHere46","true"
"6415splitHere46","20223103splitHere46","package jetty.demo;<newline46mondego><newline46mondego>import org.eclipse.jetty.server.Server;<newline46mondego>import org.eclipse.jetty.server.ServerConnector;<newline46mondego>import org.eclipse.jetty.servlet.DefaultServlet;<newline46mondego>import org.eclipse.jetty.servlet.ServletContextHandler;<newline46mondego>import org.eclipse.jetty.servlet.ServletHolder;<newline46mondego><newline46mondego>public class AltDefaultServlet<newline46mondego>{<newline46mondego>    public static void main(String[] args)<newline46mondego>    {<newline46mondego>        System.setProperty(<doubleQuotes46>org.eclipse.jetty.LEVEL<doubleQuotes46>,<doubleQuotes46>INFO<doubleQuotes46>);<newline46mondego><newline46mondego>        Server server = new Server();<newline46mondego>        ServerConnector connector = new ServerConnector(server);<newline46mondego>        connector.setPort(8080);<newline46mondego>        server.addConnector(connector);<newline46mondego><newline46mondego>        // Setup the basic appliation <doubleQuotes46>context<doubleQuotes46> for this application at <doubleQuotes46>/<doubleQuotes46><newline46mondego>        // This is also known as the handler tree (in jetty speak)<newline46mondego>        ServletContextHandler context = new ServletContextHandler(ServletContextHandler.SESSIONS);<newline46mondego>        context.setContextPath(<doubleQuotes46>/<doubleQuotes46>);<newline46mondego>        server.setHandler(context);<newline46mondego><newline46mondego>        // The filesystem paths we will map<newline46mondego>        String homePath = System.getProperty(<doubleQuotes46>user.home<doubleQuotes46>);<newline46mondego>        String pwdPath = System.getProperty(<doubleQuotes46>user.dir<doubleQuotes46>);<newline46mondego><newline46mondego>        // add a simple Servlet at <doubleQuotes46>/dynamic/*<doubleQuotes46><newline46mondego>        ServletHolder holderDynamic = new ServletHolder(<doubleQuotes46>dynamic<doubleQuotes46>, DynamicServlet.class);<newline46mondego>        context.addServlet(holderDynamic, <doubleQuotes46>/dynamic/*<doubleQuotes46>);<newline46mondego><newline46mondego>        // add special pathspec of <doubleQuotes46>/home/<doubleQuotes46> content mapped to the homePath<newline46mondego>        ServletHolder holderHome = new ServletHolder(<doubleQuotes46>static-home<doubleQuotes46>, DefaultServlet.class);<newline46mondego>        holderHome.setInitParameter(<doubleQuotes46>resourceBase<doubleQuotes46>,homePath);<newline46mondego>        holderHome.setInitParameter(<doubleQuotes46>dirAllowed<doubleQuotes46>,<doubleQuotes46>true<doubleQuotes46>);<newline46mondego>        holderHome.setInitParameter(<doubleQuotes46>pathInfoOnly<doubleQuotes46>,<doubleQuotes46>true<doubleQuotes46>);<newline46mondego>        context.addServlet(holderHome,<doubleQuotes46>/home/*<doubleQuotes46>);<newline46mondego><newline46mondego>        // Lastly, the default servlet for root content (always needed, to satisfy servlet spec)<newline46mondego>        // It is important that this is last.<newline46mondego>        ServletHolder holderPwd = new ServletHolder(<doubleQuotes46>default<doubleQuotes46>, DefaultServlet.class);<newline46mondego>        holderPwd.setInitParameter(<doubleQuotes46>resourceBase<doubleQuotes46>,pwdPath);<newline46mondego>        holderPwd.setInitParameter(<doubleQuotes46>dirAllowed<doubleQuotes46>,<doubleQuotes46>true<doubleQuotes46>);<newline46mondego>        context.addServlet(holderPwd,<doubleQuotes46>/<doubleQuotes46>);<newline46mondego><newline46mondego>        try<newline46mondego>        {<newline46mondego>            server.start();<newline46mondego>            server.dump(System.err);<newline46mondego>            server.join();<newline46mondego>        }<newline46mondego>        catch (Throwable t)<newline46mondego>        {<newline46mondego>            t.printStackTrace(System.err);<newline46mondego>        }<newline46mondego>    }<newline46mondego><newline46mondego>}<newline46mondego>"
"6416splitHere46","20223396splitHere46","<html><newline46mondego><head><newline46mondego><script src=<doubleQuotes46>jquery-1.9.1.js<doubleQuotes46>></script><newline46mondego></head><newline46mondego><newline46mondego><body><newline46mondego><newline46mondego><form><newline46mondego>  <input type=<doubleQuotes46>radio<doubleQuotes46> path=<doubleQuotes46>gender<doubleQuotes46> id=<doubleQuotes46>Male<doubleQuotes46> name=<doubleQuotes46>sex<doubleQuotes46> value=<doubleQuotes46>Male<doubleQuotes46> checked=<doubleQuotes46>checked<doubleQuotes46> />Male<newline46mondego>  <br /><newline46mondego>  <input type=<doubleQuotes46>radio<doubleQuotes46> path=<doubleQuotes46>gender<doubleQuotes46> id=<doubleQuotes46>Female<doubleQuotes46> name=<doubleQuotes46>sex<doubleQuotes46> value=<doubleQuotes46>Female<doubleQuotes46> />Female<newline46mondego>  <div id=<doubleQuotes46>test<doubleQuotes46>>my test</div><newline46mondego></form><newline46mondego><newline46mondego><script><newline46mondego>alert(<doubleQuotes46>hello<doubleQuotes46>);<newline46mondego>$(<doubleQuotes46>input[value='Female']<doubleQuotes46>).prop('checked',true);<newline46mondego>alert(<doubleQuotes46>bye<doubleQuotes46>);<newline46mondego></script><newline46mondego><newline46mondego></body><newline46mondego></html><newline46mondego>"
"6417splitHere46","20223503splitHere46","Checksum"
"6418splitHere46","20223526splitHere46","for (int i=0; i<distances.length; i++) {<newline46mondego>    for(int j = i+1; j<distances.length; j++)<newline46mondego>    {<newline46mondego>        if (distances[i] > distances[j]) <newline46mondego>        {<newline46mondego>             double temp = distances[j];<newline46mondego>             distances[j] = distances[i];<newline46mondego>             distances[i] = temp;<newline46mondego>        }<newline46mondego>    }<newline46mondego>}<newline46mondego>"
"6419splitHere46","20223526splitHere46","for (int i=0; i<distances.length; i++) {<newline46mondego>    System.out.println(i + <doubleQuotes46> -> <doubleQuotes46> + distances[i]);<newline46mondego>}<newline46mondego>"
"6420splitHere46","20223526splitHere46","if (distances[i] < minVal) <newline46mondego>{<newline46mondego>    double temp = distances[j];<newline46mondego>    int tempindex = indices[j];<newline46mondego>    ...<newline46mondego>"
"6421splitHere46","20223526splitHere46","Class Distance<newline46mondego> {<newline46mondego>      public int ID;<newline46mondego>      public double value;<newline46mondego> }<newline46mondego>"
"6422splitHere46","20223539splitHere46","System.out"
"6423splitHere46","20223539splitHere46","System.setOut(out);<newline46mondego>"
"6424splitHere46","20223539splitHere46","System.out"
"6425splitHere46","20223539splitHere46","System.setOut(out);"
"6426splitHere46","20223553splitHere46","StringBuilder"
"6427splitHere46","20223553splitHere46","String"
"6428splitHere46","20223553splitHere46","StringBuilder"
"6429splitHere46","20223553splitHere46","theShift"
"6430splitHere46","20223553splitHere46","0x"
"6431splitHere46","20223553splitHere46","Integer.toString(x, 16)"
"6432splitHere46","20223553splitHere46","0x"
"6433splitHere46","20223553splitHere46","String result = <doubleQuotes46><doubleQuotes46>;<newline46mondego>for (String thisHex : theHexArray) {<newline46mondego>    result += Integer.toString(Integer.parseInt(thisHex, 16) + theShift, 16) + <doubleQuotes46> <doubleQuotes46>;<newline46mondego>}<newline46mondego>"
"6434splitHere46","20223553splitHere46","toText"
"6435splitHere46","20223560splitHere46","GraphicsEnvironment gEnvironment = GraphicsEnvironment.getLocalGraphicsEnvironment();<newline46mondego>GraphicsDevice[] dDevices= gEnvironment.getScreenDevices();<newline46mondego>"
"6436splitHere46","20223560splitHere46","GraphicsEnvironment gEnvironment = GraphicsEnvironment.getLocalGraphicsEnvironment();<newline46mondego>GraphicsDevice dDevice= gEnvironment.getDefaultScreenDevice();<newline46mondego>"
"6437splitHere46","20223571splitHere46","int end = itemsRemaining >= maxSize ? (start + maxSize) : itemsRemaining;<newline46mondego>"
"6438splitHere46","20223571splitHere46","int end = start + (itemsRemaining >= maxSize ? maxSize : itemsRemaining);<newline46mondego>"
"6439splitHere46","20223571splitHere46","int  end = start + Math.min(maxSize ,itemsRemaining);<newline46mondego>"
"6440splitHere46","20223677splitHere46","Collections.indexOfSubList"
"6441splitHere46","20223677splitHere46","int index=Collections.indexOfSubList(parentDataList, child1);<newline46mondego>â€¦<newline46mondego>"
"6442splitHere46","20223677splitHere46","index"
"6443splitHere46","20223677splitHere46","index+child1.size()"
"6444splitHere46","20223677splitHere46","-1"
"6445splitHere46","20223867splitHere46","Main"
"6446splitHere46","20223867splitHere46","Main.java"
"6447splitHere46","20223867splitHere46","main"
"6448splitHere46","20223867splitHere46","d"
"6449splitHere46","20223867splitHere46","public class Main {  <newline46mondego>    public static void main(String[] args) {  <newline46mondego>        Time time1=new Time();  <newline46mondego>        System.out.println(<doubleQuotes46>For first object:<doubleQuotes46>+time1.getHour()+':'+time1.getMinute()+':'+time1.getSecond());  <newline46mondego>}  <newline46mondego>"
"6450splitHere46","20223867splitHere46","Time"
"6451splitHere46","20223867splitHere46","Main"
"6452splitHere46","20223867splitHere46","Time"
"6453splitHere46","20223867splitHere46","public"
"6454splitHere46","20223867splitHere46","public class Main {  <newline46mondego>    public static void main(String[] args) {  <newline46mondego>        ...<newline46mondego>    }<newline46mondego>}<newline46mondego><newline46mondego>class Time {<newline46mondego>    ...<newline46mondego>}<newline46mondego>"
"6455splitHere46","20223867splitHere46","public class Main {  <newline46mondego>    public static void main(String[] args) {  <newline46mondego>        ....<newline46mondego>    }<newline46mondego>}<newline46mondego>"
"6456splitHere46","20223867splitHere46","public class Time{<newline46mondego>    ...<newline46mondego>}<newline46mondego>"
"6457splitHere46","20223903splitHere46","if"
"6458splitHere46","20223903splitHere46","for (int b = 0; b <shopunits; b++)"
"6459splitHere46","20223903splitHere46","total = 0;"
"6460splitHere46","20223903splitHere46","if"
"6461splitHere46","20223903splitHere46","if (!inFile.hasNextLine()) break;<newline46mondego>Unitnum = inFile.nextLine();<newline46mondego>if (!inFile.hasNextLine()) break;<newline46mondego>Unitnum = inFile.nextLine();<newline46mondego>"
"6462splitHere46","20223903splitHere46","nextLine()"
"6463splitHere46","20223903splitHere46","if"
"6464splitHere46","20223903splitHere46","if (b != shopunits-1) {<newline46mondego>    // Skip lines only if we haven't reached the last block<newline46mondego>    Unitnum = inFile.nextLine();<newline46mondego>    Unitnum = inFile.nextLine();<newline46mondego>}<newline46mondego>"
"6465splitHere46","20223903splitHere46","if"
"6466splitHere46","20224103splitHere46","private final String[] itemName = new String['?'];<newline46mondego>private final String[] itemID = new String['?'];<newline46mondego>"
"6467splitHere46","20224103splitHere46","'?'"
"6468splitHere46","20224103splitHere46","private final List<String> itemName = new ArrayList<String>();<newline46mondego>"
"6469splitHere46","20224146splitHere46","@XmlValue"
"6470splitHere46","20224146splitHere46","@XmlAccessorType(XmlAccessType.FIELD)<newline46mondego>public class Item {<newline46mondego><newline46mondego>    @XmlAttribute<newline46mondego>    private String atr;<newline46mondego><newline46mondego>    @XmlValue<newline46mondego>    private String value;<newline46mondego><newline46mondego>}<newline46mondego>"
"6471splitHere46","20224281splitHere46","Classes"
"6472splitHere46","20224281splitHere46","ABC"
"6473splitHere46","20224281splitHere46","XYZ"
"6474splitHere46","20224281splitHere46","SABC"
"6475splitHere46","20224281splitHere46","public class ABC {<newline46mondego><newline46mondego>class XYZ { }<newline46mondego><newline46mondego>static class SABC { }<newline46mondego><newline46mondego>}<newline46mondego>"
"6476splitHere46","20224368splitHere46","public static void Methods(int a){<newline46mondego>   int loops = a/2;<newline46mondego>   int even = 0;<newline46mondego><newline46mondego>   for(int i = 0; i < loops; i++){<newline46mondego>       even+=2;<newline46mondego><newline46mondego>       System.out.print(even);<newline46mondego>       if (i < loops - 1) {<newline46mondego>           System.out.print(<doubleQuotes46> and <doubleQuotes46>)<newline46mondego>       }<newline46mondego>   }<newline46mondego>"
"6477splitHere46","20224368splitHere46","i"
"6478splitHere46","20224368splitHere46","loops - 1"
"6479splitHere46","20224368splitHere46","<doubleQuotes46> and <doubleQuotes46>"
"6480splitHere46","20224368splitHere46","and"
"6481splitHere46","20224430splitHere46","col1 = input.nextInt();<newline46mondego>col2 = input.nextInt();<newline46mondego>col3 = input.nextInt();<newline46mondego>col4 = input.nextInt();<newline46mondego>col5 = input.nextInt();<newline46mondego>col6 = input.nextInt();<newline46mondego>col7 = input.nextInt();<newline46mondego>col8 = input.nextInt();<newline46mondego>col9 = input.nextInt();<newline46mondego>col10 = input.nextInt();<newline46mondego>"
"6482splitHere46","20224430splitHere46","strings"
"6483splitHere46","20224430splitHere46","col1 = input.nextLine();<newline46mondego>col2 = input.nextLine();<newline46mondego>col3 = input.nextLine();<newline46mondego>col4 = input.nextLine();<newline46mondego>col5 = input.nextLine();<newline46mondego>col6 = input.nextLine();<newline46mondego>col7 = input.nextLine();<newline46mondego>col8 = input.nextLine();<newline46mondego>col9 = input.nextLine();<newline46mondego>col10 = input.nextLine();<newline46mondego>"
"6484splitHere46","20224537splitHere46","relativelayout.addView(view2, new ViewGroup.LayoutParams(2,ViewGroup.LayoutParams.MATCH_PARENT));<newline46mondego>"
"6485splitHere46","20224582splitHere46","for"
"6486splitHere46","20224582splitHere46","for"
"6487splitHere46","20224582splitHere46","break"
"6488splitHere46","20224582splitHere46","for (String string : list) {<newline46mondego>   if (counter >= 5) break;<newline46mondego>   System.out.println(string);<newline46mondego>   counter++;<newline46mondego>}<newline46mondego>"
"6489splitHere46","20224582splitHere46","for"
"6490splitHere46","20224582splitHere46","for"
"6491splitHere46","20224653splitHere46","<plugin><newline46mondego>        <groupId>org.apache.maven.plugins</groupId><newline46mondego>        <artifactId>maven-surefire-plugin</artifactId><newline46mondego>        <configuration><newline46mondego>          <testFailureIgnore>true</testFailureIgnore><newline46mondego>        </configuration><newline46mondego>      </plugin><newline46mondego>"
"6492splitHere46","20224681splitHere46","path.replace(<doubleQuotes46>c:/lotus/notes/data<doubleQuotes46>, <doubleQuotes46><doubleQuotes46>);<newline46mondego>"
"6493splitHere46","20224689splitHere46","MediaEntryModuleImpl.metadata.thumbnail[0].url"
"6494splitHere46","20224689splitHere46","String config = <doubleQuotes46>MediaEntryModuleImpl.player=null\n<doubleQuotes46> +<newline46mondego>                <doubleQuotes46>MediaEntryModuleImpl.interface=interface\n<doubleQuotes46> +    <newline46mondego>                <doubleQuotes46>com.sun.syndication.feed.module.mediarss.MediaModule\n<doubleQuotes46> +<newline46mondego>                <doubleQuotes46>MediaEntryModuleImpl.uri=http://search.yahoo.com/mrss/\n<doubleQuotes46> +<newline46mondego>                <doubleQuotes46>MediaEntryModuleImpl.metadata.hash=null\n<doubleQuotes46> +<newline46mondego>                <doubleQuotes46>MediaEntryModuleImpl.metadata.descriptionType=null\n<doubleQuotes46> +<newline46mondego>                <doubleQuotes46>MediaEntryModuleImpl.metadata.copyright=null\n<doubleQuotes46> +<newline46mondego>                <doubleQuotes46>MediaEntryModuleImpl.metadata.copyrightUrl=null\n<doubleQuotes46> +<newline46mondego>                <doubleQuotes46>MediaEntryModuleImpl.metadata.title=null\n<doubleQuotes46> +<newline46mondego>                <doubleQuotes46>MediaEntryModuleImpl.metadata.thumbnail[0].time=null\n<doubleQuotes46> +<newline46mondego>                <doubleQuotes46>MediaEntryModuleImpl.metadata.thumbnail[0].height=null\n<doubleQuotes46> +<newline46mondego>                <doubleQuotes46>MediaEntryModuleImpl.metadata.thumbnail[0].width=320 \n<doubleQuotes46> +<newline46mondego>                <doubleQuotes46>MediaEntryModuleImpl.metadata.thumbnail[0].url=http://whatever.com/wp-content/uploads/2013/11/mes1-300x186.png\n<doubleQuotes46> +<newline46mondego>                <doubleQuotes46>MediaEntryModuleImpl.metadata.description=null\n<doubleQuotes46> +<newline46mondego>                <doubleQuotes46>MediaEntryModuleImpl.metadata.titleType=null<doubleQuotes46>;<newline46mondego><newline46mondego>Properties properties = new Properties();<newline46mondego>properties.load(new StringReader(config));<newline46mondego><newline46mondego>System.out.println(properties.get(<doubleQuotes46>MediaEntryModuleImpl.metadata.thumbnail[0].url<doubleQuotes46>));<newline46mondego>"
"6495splitHere46","20224772splitHere46","import java.io.FileNotFoundException;<newline46mondego>import java.io.FileReader;<newline46mondego>import java.util.ArrayList;<newline46mondego>import java.util.List;<newline46mondego>import java.util.Scanner;<newline46mondego><newline46mondego>public class Task1 {<newline46mondego>  @SuppressWarnings(<doubleQuotes46>resource<doubleQuotes46>)<newline46mondego>  public static void main(String[] args) throws FileNotFoundException {<newline46mondego>    Scanner inFile = new Scanner(new FileReader(<doubleQuotes46>ExternalData.txt<doubleQuotes46>));<newline46mondego>    List<Employee> employees = new ArrayList<>();<newline46mondego>    while(inFile.hasNext()) {<newline46mondego>      employees.add(new Employee(inFile.next(), inFile.nextDouble(), inFile.nextDouble()));<newline46mondego>    }<newline46mondego>    for(Employee employee : employees) {<newline46mondego>      System.out.println(employee);<newline46mondego>    }<newline46mondego>  }<newline46mondego>}<newline46mondego>"
"6496splitHere46","20224772splitHere46","public class Employee {<newline46mondego>  public final String name;<newline46mondego>  public final double rate;<newline46mondego>  public final double hours;<newline46mondego>  public final double weeklypay;<newline46mondego><newline46mondego>  public Employee(String name, double rate, double hours) {<newline46mondego>    this.name = name;<newline46mondego>    this.rate = rate;<newline46mondego>    this.hours = hours;<newline46mondego>    this.weeklypay = this.rate*this.hours;<newline46mondego>  }<newline46mondego><newline46mondego>  public String toString() {<newline46mondego>    return name+<doubleQuotes46>'s pay:<doubleQuotes46> + weeklypay;<newline46mondego>  }<newline46mondego>}<newline46mondego>"
"6497splitHere46","20224772splitHere46","Dave's pay:245.0<newline46mondego>Lucy's pay:114.0<newline46mondego>"
"6498splitHere46","20224772splitHere46","Map"
"6499splitHere46","20224772splitHere46","import java.io.FileNotFoundException;<newline46mondego>import java.io.FileReader;<newline46mondego>import java.util.HashMap;<newline46mondego>import java.util.Map;<newline46mondego>import java.util.Scanner;<newline46mondego><newline46mondego>public class Task1 {<newline46mondego>  @SuppressWarnings(<doubleQuotes46>resource<doubleQuotes46>)<newline46mondego>  public static void main(String[] args) throws FileNotFoundException {<newline46mondego>    Scanner inFile = new Scanner(new FileReader(<doubleQuotes46>/ExternalData.txt<doubleQuotes46>));<newline46mondego>    Map<String, Employee> employees = new HashMap<>();<newline46mondego>    while(inFile.hasNext()) {<newline46mondego>      Employee employee = new Employee(inFile.next(), inFile.nextDouble(), inFile.nextDouble()); <newline46mondego>      employees.put(employee.name, employee);<newline46mondego>    }<newline46mondego>    System.out.println(employees.get(<doubleQuotes46>Dave<doubleQuotes46>));<newline46mondego>  }<newline46mondego>}<newline46mondego>"
"6500splitHere46","20224800splitHere46","parameter=<doubleQuotes46>method<doubleQuotes46>"
"6501splitHere46","20224800splitHere46","package actions;<newline46mondego><newline46mondego>import javax.servlet.http.HttpServletRequest;<newline46mondego>import javax.servlet.http.HttpServletResponse;<newline46mondego><newline46mondego>import org.apache.struts.action.ActionForm;<newline46mondego>import org.apache.struts.action.ActionForward;<newline46mondego>import org.apache.struts.action.ActionMapping;<newline46mondego>import org.apache.struts.actions.DispatchAction;<newline46mondego><newline46mondego>public class LinkAction extends DispatchAction {<newline46mondego><newline46mondego>    public ActionForward signUp(ActionMapping mapping, ActionForm form,<newline46mondego>            HttpServletRequest request, HttpServletResponse response)<newline46mondego>            throws Exception {<newline46mondego><newline46mondego>        return mapping.findForward(<doubleQuotes46>signUp<doubleQuotes46>);<newline46mondego>    }<newline46mondego><newline46mondego>    public ActionForward homeAdmin(ActionMapping mapping, ActionForm form,<newline46mondego>            HttpServletRequest request, HttpServletResponse response)<newline46mondego>            throws Exception {<newline46mondego><newline46mondego>        return mapping.findForward(<doubleQuotes46>homeAdmin<doubleQuotes46>);<newline46mondego>    }<newline46mondego>}<newline46mondego>"
"6502splitHere46","20224800splitHere46","struts-config.xml"
"6503splitHere46","20224800splitHere46","<form-beans><newline46mondego>    <form-bean name=<doubleQuotes46>SignUpForm<doubleQuotes46> type=<doubleQuotes46>org.apache.struts.action.DynaActionForm<doubleQuotes46>><newline46mondego>        <form-property name=<doubleQuotes46>fname<doubleQuotes46> type=<doubleQuotes46>java.lang.String<doubleQuotes46> /><newline46mondego>        <form-property name=<doubleQuotes46>lname<doubleQuotes46> type=<doubleQuotes46>java.lang.String<doubleQuotes46> /><newline46mondego>        <form-property name=<doubleQuotes46>usr<doubleQuotes46> type=<doubleQuotes46>java.lang.String<doubleQuotes46> /><newline46mondego>        <form-property name=<doubleQuotes46>pwd<doubleQuotes46> type=<doubleQuotes46>java.lang.String<doubleQuotes46> /><newline46mondego>    </form-bean><newline46mondego></form-beans><newline46mondego><action-mappings><newline46mondego>    <action path=<doubleQuotes46>/links<doubleQuotes46><newline46mondego>            type=<doubleQuotes46>actions.LinkAction<doubleQuotes46><newline46mondego>            name=<doubleQuotes46>SignUpForm<doubleQuotes46><newline46mondego>            input=<doubleQuotes46>/index.jsp<doubleQuotes46><newline46mondego>            parameter=<doubleQuotes46>method<doubleQuotes46><newline46mondego>            scope=<doubleQuotes46>session<doubleQuotes46>><newline46mondego>       <forward name=<doubleQuotes46>signUp<doubleQuotes46> path=<doubleQuotes46>/signUp.jsp<doubleQuotes46>/><newline46mondego>       <forward name=<doubleQuotes46>homeAdmin<doubleQuotes46> path=<doubleQuotes46>/homeAdmin.jsp<doubleQuotes46>/><newline46mondego>    </action><newline46mondego></action-mappings><newline46mondego>"
"6504splitHere46","20224800splitHere46","org.apache.struts.actions.DispatchAction"
"6505splitHere46","20224930splitHere46","else{<newline46mondego>            if(!stack.isEmpty())<newline46mondego>                char pop=stack.pop(); // Here you initialized the value inside a condition.<newline46mondego>            else<newline46mondego>                return false;<newline46mondego>            if(c==')'&&pop!='(') return false;<newline46mondego>            else if(c==']'&&pop!='[') return false;// Using the value.<newline46mondego>            else if(c=='}'&&pop!='{') return false;// Using the value.<newline46mondego>        }<newline46mondego>"
"6506splitHere46","20225146splitHere46","en"
"6507splitHere46","20225146splitHere46","en_US"
"6508splitHere46","20225146splitHere46","en_FR"
"6509splitHere46","20225146splitHere46","Locale"
"6510splitHere46","20225146splitHere46","en_FR"
"6511splitHere46","20225146splitHere46","Locale"
"6512splitHere46","20225146splitHere46","en"
"6513splitHere46","20225146splitHere46","fr"
"6514splitHere46","20225146splitHere46","English"
"6515splitHere46","20225262splitHere46","nextInt(int n)"
"6516splitHere46","20225262splitHere46","r.nextInt(50)<newline46mondego>"
"6517splitHere46","20225262splitHere46","10 + r.nextInt(50)<newline46mondego>"
"6518splitHere46","20225263splitHere46","static ArrayList<String> outputs = new ArrayList<String>();<newline46mondego>"
"6519splitHere46","20225263splitHere46","static ArrayList<String> outputs = null;<newline46mondego>"
"6520splitHere46","20225263splitHere46","outputs = new ArrayList<String>();<newline46mondego>"
"6521splitHere46","20225277splitHere46","private void GetTweetsByKeywords()<newline46mondego>     {<newline46mondego><newline46mondego>        TwitterStream twitterStream = new TwitterStreamFactory(config).getInstance();<newline46mondego><newline46mondego>                StatusListener statusListener = new StatusListener() {<newline46mondego>                    private int count = 0;<newline46mondego>                    private long originalTweetId = 0;<newline46mondego><newline46mondego>                    @Override<newline46mondego>                        public void onStatus(Status status) {<newline46mondego><newline46mondego>                        // Here do whatever you want with the status object that is the       <newline46mondego>                         //  tweet you got<newline46mondego><newline46mondego>                        } //end of the onStatus()<newline46mondego>         }; //end of the listener<newline46mondego><newline46mondego>         FilterQuery fq = new FilterQuery();<newline46mondego><newline46mondego>         String keywords[] = {<doubleQuotes46>sad<doubleQuotes46>,<doubleQuotes46>happy<doubleQuotes46>,<doubleQuotes46>joyful<doubleQuotes46>};<newline46mondego><newline46mondego>         fq.track(keywords);<newline46mondego><newline46mondego><newline46mondego>         twitterStream.addListener(statusListener);<newline46mondego>         twitterStream.filter(fq);<newline46mondego>    }<newline46mondego>"
"6522splitHere46","20225366splitHere46","public class LogResponseErrorHandler implements ResponseErrorHandler {<newline46mondego>...<newline46mondego>    @Override<newline46mondego>    public void handleError(ClientHttpResponse response) throws IOException {<newline46mondego>        logResponse(response.getBody());<newline46mondego>    }<newline46mondego>...<newline46mondego>}<newline46mondego>"
"6523splitHere46","20225377splitHere46","<type>"
"6524splitHere46","20225377splitHere46","classifier: 'tests'"
"6525splitHere46","20225377splitHere46","type: ..."
"6526splitHere46","20225432splitHere46","default"
"6527splitHere46","20225432splitHere46","v1"
"6528splitHere46","20225432splitHere46","v1"
"6529splitHere46","20225432splitHere46","v1"
"6530splitHere46","20225432splitHere46","v1"
"6531splitHere46","20225432splitHere46","v1"
"6532splitHere46","20225432splitHere46","default"
"6533splitHere46","20225432splitHere46","https://1-dot-myapp.appspot.com"
"6534splitHere46","20225432splitHere46","default"
"6535splitHere46","20225534splitHere46","http://hostname.com/jira/rest/api/2.0.alpha1/search?jql=project=TST+AND+status=%22Awaiting%20Release%22+AND+issuetype+in%20(Bug,%20%22User%20Story%22)<newline46mondego>"
"6536splitHere46","20225587splitHere46","greeeting"
"6537splitHere46","20225587splitHere46","Integer.class"
"6538splitHere46","20225587splitHere46","getValue()"
"6539splitHere46","20225587splitHere46","public void greeting(String name)<newline46mondego>{<newline46mondego>    ExpressionParser parser = new SpelExpressionParser();<newline46mondego>    Expression exp = parser.parseExpression(name);<newline46mondego>    String message = exp.getValue(Integer.class).toString();<newline46mondego><newline46mondego>    System.out.println(<doubleQuotes46>Hello and welcome to Spring: <doubleQuotes46> + message);<newline46mondego>}<newline46mondego>"
"6540splitHere46","20225587splitHere46","instance.greeting(<doubleQuotes46>5+5<doubleQuotes46>);<newline46mondego>"
"6541splitHere46","20225679splitHere46","label.setIcon( icon );<newline46mondego>"
"6542splitHere46","20225695splitHere46","BACKUPArrayList = AL;"
"6543splitHere46","20225695splitHere46","AL"
"6544splitHere46","20225695splitHere46","BACKUPArrayList"
"6545splitHere46","20225695splitHere46","BACKUPArrayList"
"6546splitHere46","20225695splitHere46","AL"
"6547splitHere46","20225695splitHere46","AL"
"6548splitHere46","20225695splitHere46","BACKUPArrayList"
"6549splitHere46","20225695splitHere46","BACKUPArrayList.addAll(AL);"
"6550splitHere46","20225695splitHere46","AL"
"6551splitHere46","20225695splitHere46","BACKUPArrayList"
"6552splitHere46","20225744splitHere46","LayoutParams"
"6553splitHere46","20225744splitHere46","ChildView"
"6554splitHere46","20225744splitHere46","LinearLayout.LayoutParams params = new LinearLayout.LayoutParams(<newline46mondego>                yourCalculatedWidth, LayoutParams.FILL_PARENT);<newline46mondego><newline46mondego>params.gravity=Gravity.CENTER_HORIZONTAL;<newline46mondego><newline46mondego>imgView.setLayoutParams(params);<newline46mondego>"
"6555splitHere46","20225749splitHere46","Session"
"6556splitHere46","20225749splitHere46","SessionScope"
"6557splitHere46","20225749splitHere46","@Inject<newline46mondego>public UserService users;<newline46mondego>"
"6558splitHere46","20225749splitHere46","@Inject<newline46mondego>public Provider<UserService> userProvider; //and call userProvider.get() when you will need it?<newline46mondego>"
"6559splitHere46","20225749splitHere46","SessionScoped"
"6560splitHere46","20225749splitHere46","GuiceFilter.doFilter()"
"6561splitHere46","20225749splitHere46","Stage"
"6562splitHere46","20225749splitHere46","Production"
"6563splitHere46","20225749splitHere46","Providers"
"6564splitHere46","20225749splitHere46","Scopes"
"6565splitHere46","20225749splitHere46","Subject"
"6566splitHere46","20225749splitHere46","ShiroFilter.doFilter()"
"6567splitHere46","20225749splitHere46","GuiceFilter"
"6568splitHere46","20225749splitHere46","Subject"
"6569splitHere46","20225749splitHere46","Providers"
"6570splitHere46","20225929splitHere46","myArray = [2,4,6,8];"
"6571splitHere46","20225929splitHere46","for (int i : myArray)<newline46mondego>   // returns 2,4,6,8,  NOT 0,1,2,3<newline46mondego>"
"6572splitHere46","20225929splitHere46","for (int idx = 0; idx<myArray.length; i++) {<newline46mondego>  // idx will be 0,1,2,3<newline46mondego>  int value = myArray[i];  <<< in many cases this is an extra step<newline46mondego>  // value will be 2,4,6,8<newline46mondego>}<newline46mondego>"
"6573splitHere46","20225929splitHere46","for (int idx = 0; idx<floatArray .length; i++) {<newline46mondego>      // idx will be 0,1,2,3<newline46mondego>      float value = floatArray [i];<newline46mondego>      // value will be 2.2, 4.4, 6.6, 8.8<newline46mondego>    }<newline46mondego>"
"6574splitHere46","20225929splitHere46","for (float value : floatArray ) {<newline46mondego>     // value will be 2.2, 4.4, 6.6, 8.8<newline46mondego>"
"6575splitHere46","20225970splitHere46","SELECT v FROM Salad s JOIN s.veggies v where s.id = :salad_id<newline46mondego>"
"6576splitHere46","20225970splitHere46","Vegetable"
"6577splitHere46","20225970splitHere46","Salad"
"6578splitHere46","20225999splitHere46","int j = rorder.length;<newline46mondego>"
"6579splitHere46","20225999splitHere46","int j = rorder.length-1;<newline46mondego>"
"6580splitHere46","20225999splitHere46","rorder.length"
"6581splitHere46","20226007splitHere46","boost::uintmax_t"
"6582splitHere46","20226007splitHere46","jlong"
"6583splitHere46","20226007splitHere46","long"
"6584splitHere46","20226007splitHere46","jlong"
"6585splitHere46","20226007splitHere46","// 2â?¶â?´<newline46mondego>private static BigInteger twoP64=BigInteger.ZERO.flipBit(64);<newline46mondego><newline46mondego>public static BigInteger getNumBytes()<newline46mondego>{<newline46mondego>  long longValue=getNumByteNative();<newline46mondego>  BigInteger i=BigInteger.valueOf(longValue);<newline46mondego>  if(longValue<0) i=i.add(twoP64);<newline46mondego>  return i;<newline46mondego>}<newline46mondego><newline46mondego>private native long getNumByteNative();<newline46mondego>"
"6586splitHere46","20226007splitHere46","BigInteger"
"6587splitHere46","20226007splitHere46","long"
"6588splitHere46","20226007splitHere46","BigInteger"
"6589splitHere46","20226038splitHere46","java.awt.Container"
"6590splitHere46","20226038splitHere46","Component"
"6591splitHere46","20226038splitHere46","JFrame"
"6592splitHere46","20226038splitHere46","Container"
"6593splitHere46","20226038splitHere46","JPanel"
"6594splitHere46","20226038splitHere46","comp"
"6595splitHere46","20226038splitHere46","/* Reparent the component and tidy up the tree's state. */<newline46mondego>        if (comp.parent != null) {<newline46mondego>            comp.parent.remove(comp);<newline46mondego>            if (index > component.size()) {<newline46mondego>                throw new IllegalArgumentException(<doubleQuotes46>illegal component position<doubleQuotes46>);<newline46mondego>            }<newline46mondego>        }<newline46mondego>"
"6596splitHere46","20226038splitHere46","java.awt.Container.addImpl(Component, Object, int)"
"6597splitHere46","20226038splitHere46","Container"
"6598splitHere46","20226038splitHere46","Container"
"6599splitHere46","20226066splitHere46","// Trees with nothing yet<newline46mondego>        ArrayList<StackedBarChart.Data<String, Number>> nothingYetDataList = new ArrayList<>();<newline46mondego>        for (TypeE type : TypeE.values()) {<newline46mondego>            didBurnDataList.add(new StackedBarChart.Data<String, Number>(type<newline46mondego>                    .toString(), this.treesFromListWithType(nothingYet, type)<newline46mondego>                    .size()));<newline46mondego>        }<newline46mondego>"
"6600splitHere46","20226066splitHere46","didBurnDataList"
"6601splitHere46","20226066splitHere46","nothingYetDataList"
"6602splitHere46","20226066splitHere46","nothingYetDataList"
"6603splitHere46","20226168splitHere46","public static void main(String[] args) {<newline46mondego>        String content = <doubleQuotes46>complex content number=\<doubleQuotes46>456\<doubleQuotes46> with many linebreaks\n<doubleQuotes46> +<newline46mondego>                <doubleQuotes46>signal number=\<doubleQuotes46>123\<doubleQuotes46> test otherNumber=\<doubleQuotes46>XX\<doubleQuotes46> endsignal\n<doubleQuotes46> +<newline46mondego>                <doubleQuotes46>more complex content<doubleQuotes46>;<newline46mondego><newline46mondego>        Matcher m = Pattern.compile(<doubleQuotes46>signal.*?endsignal<doubleQuotes46>).matcher(content);<newline46mondego>        StringBuffer sb = new StringBuffer();<newline46mondego>        while (m.find()) {<newline46mondego>            String match = m.group(0); // the whole match... including start/end signal.<newline46mondego>            match = Pattern.compile(<doubleQuotes46>(?<=number=\<doubleQuotes46>).*?(\<doubleQuotes46>)<doubleQuotes46>).matcher(match).replaceAll(<doubleQuotes46>XXX<doubleQuotes46>);<newline46mondego><newline46mondego>            m.appendReplacement(sb, match);<newline46mondego>        }<newline46mondego>        m.appendTail(sb);<newline46mondego>        content = sb.toString();       <newline46mondego><newline46mondego>        System.out.println(content);<newline46mondego>    }<newline46mondego>"
"6604splitHere46","20226168splitHere46","private static final Pattern numberpat = Pattern.compile(<doubleQuotes46>(?<=number=\<doubleQuotes46>)(.+?)(?=\<doubleQuotes46>)<doubleQuotes46>);<newline46mondego>    private static final Pattern linepat = Pattern.compile(<doubleQuotes46>signal.*?endsignal<doubleQuotes46>);<newline46mondego><newline46mondego>    public static void main(String[] args) {<newline46mondego>        String content = <doubleQuotes46>complex content number=\<doubleQuotes46>456\<doubleQuotes46> with many linebreaks\n<doubleQuotes46> +<newline46mondego>                <doubleQuotes46>signal number=\<doubleQuotes46>123\<doubleQuotes46> test otherNumber=\<doubleQuotes46>A2\<doubleQuotes46> endsignal\n<doubleQuotes46> +<newline46mondego>                <doubleQuotes46>more complex content<doubleQuotes46>;<newline46mondego><newline46mondego>        Matcher m = linepat.matcher(content);<newline46mondego>        StringBuffer sb = new StringBuffer();<newline46mondego>        while (m.find()) {<newline46mondego>            String match = m.group(0); // the whole match... including start/end signal.<newline46mondego>            m.appendReplacement(sb, <doubleQuotes46><doubleQuotes46>);<newline46mondego>            Matcher nmat = numberpat.matcher(match); // note the new regular expression with only one matching group<newline46mondego>            while (nmat.find()) {<newline46mondego>                nmat.appendReplacement(sb, nmat.group(0).replaceAll(<doubleQuotes46>.<doubleQuotes46>, <doubleQuotes46>X<doubleQuotes46>));<newline46mondego>            }<newline46mondego>            nmat.appendTail(sb);<newline46mondego>        }<newline46mondego>        m.appendTail(sb);<newline46mondego>        content = sb.toString();       <newline46mondego><newline46mondego>        System.out.println(content);<newline46mondego>    }<newline46mondego>"
"6605splitHere46","20226168splitHere46","A1"
"6606splitHere46","20226168splitHere46","otherNumber=<doubleQuotes46>A1<doubleQuotes46>"
"6607splitHere46","20226168splitHere46","<doubleQuotes46>(?<=[Nn]umber=\<doubleQuotes46>)(.+?)(?=\<doubleQuotes46>)<doubleQuotes46>"
"6608splitHere46","20226344splitHere46","JComponents"
"6609splitHere46","20226344splitHere46","JPanel colors"
"6610splitHere46","20226344splitHere46","JTextArea"
"6611splitHere46","20226344splitHere46","colors = new JPanel(new BorderLayout(5, 5));"
"6612splitHere46","20226344splitHere46","JTextArea colorPanel;"
"6613splitHere46","20226344splitHere46","JTextArea textArea"
"6614splitHere46","20226344splitHere46","JPanel"
"6615splitHere46","20226344splitHere46","JTextArea colorPanel"
"6616splitHere46","20226344splitHere46","textArea"
"6617splitHere46","20226344splitHere46","JTextArea"
"6618splitHere46","20226344splitHere46","JPanels"
"6619splitHere46","20226401splitHere46","Initialize"
"6620splitHere46","20226401splitHere46","params0"
"6621splitHere46","20226401splitHere46","addRule"
"6622splitHere46","20226401splitHere46","params0 = new RelativeLayout.LayoutParams(RelativeLayout.LayoutParams.WRAP_CONTENT, 2);<newline46mondego>"
"6623splitHere46","20226695splitHere46","linje[1]"
"6624splitHere46","20226695splitHere46","[<doubleQuotes46>CPI<doubleQuotes46>, <doubleQuotes46>Clock<doubleQuotes46>, <doubleQuotes46>Per<doubleQuotes46>, <doubleQuotes46>Instruction<doubleQuotes46>]<newline46mondego>"
"6625splitHere46","20226695splitHere46","limit"
"6626splitHere46","20226695splitHere46","split"
"6627splitHere46","20226695splitHere46","String[] linje = line.split(<doubleQuotes46>\\s+<doubleQuotes46>, 2);<newline46mondego>"
"6628splitHere46","20226695splitHere46","linje[0]"
"6629splitHere46","20226695splitHere46","CPI"
"6630splitHere46","20226695splitHere46","linje[1]"
"6631splitHere46","20226695splitHere46","Clock Per Instruction"
"6632splitHere46","20226697splitHere46","java.lang.ClassNotFoundException: org.aspectj.weaver.tools.PointcutDesignatorHandler<newline46mondego>"
"6633splitHere46","20226697splitHere46","<dependency><newline46mondego>    <groupId>org.aspectj</groupId><newline46mondego>    <artifactId>aspectjweaver</artifactId><newline46mondego>    <version>1.7.4</version><newline46mondego></dependency><newline46mondego>"
"6634splitHere46","20226765splitHere46","20/100"
"6635splitHere46","20226765splitHere46","int"
"6636splitHere46","20226765splitHere46","int"
"6637splitHere46","20226765splitHere46","double"
"6638splitHere46","20226765splitHere46","double"
"6639splitHere46","20226765splitHere46","((double) 20 / 100)<newline46mondego>"
"6640splitHere46","20226765splitHere46","(20.0 / 100.0)<newline46mondego>"
"6641splitHere46","20226765splitHere46","(80/100)"
"6642splitHere46","20226844splitHere46","if (action == <doubleQuotes46>updateTime<doubleQuotes46>)<newline46mondego>"
"6643splitHere46","20226844splitHere46","if (action.equals(<doubleQuotes46>updateTime<doubleQuotes46>))<newline46mondego>"
"6644splitHere46","20227074splitHere46","void method(int foo, boolean bar, String name) ....<newline46mondego>"
"6645splitHere46","20227074splitHere46","|-other variables-|-...-|-name-|-bar-|-foo-|---- return address etc. --<newline46mondego> ^<newline46mondego> stack pointer<newline46mondego>"
"6646splitHere46","20227074splitHere46","|"
"6647splitHere46","20227177splitHere46","Exception"
"6648splitHere46","20227177splitHere46","public void startConnection() {<newline46mondego>        try {<newline46mondego><newline46mondego>            Class.forName(DRIVER);<newline46mondego>            DriverManager.setLoginTimeout(5);<newline46mondego>            conn = DriverManager.getConnection(DBURL, DBUSER, DBPASS);<newline46mondego><newline46mondego>        } catch (Exception e) {<newline46mondego>            //An exception occurs here, but you don't do anything about it<newline46mondego>        }<newline46mondego>    }<newline46mondego>"
"6649splitHere46","20227177splitHere46","conn"
"6650splitHere46","20227177splitHere46","null"
"6651splitHere46","20227177splitHere46","NullPointerException"
"6652splitHere46","20227177splitHere46","conn"
"6653splitHere46","20227177splitHere46","null"
"6654splitHere46","20227177splitHere46","public void compareData(int id, String pass) throws SQLException{<newline46mondego>    ResultSet rs = null;<newline46mondego>    PreparedStatement prdstmt = null;<newline46mondego><newline46mondego>    String query = <doubleQuotes46>SELECT id, password FROM users WHERE id=?, password=?<doubleQuotes46>;<newline46mondego><newline46mondego>    conn.startConnection();<newline46mondego><newline46mondego>    if (conn.getConnection() == null) {<newline46mondego>        throw new SQLException(<doubleQuotes46>Connection is null!<doubleQuotes46>);<newline46mondego>    }<newline46mondego>"
"6655splitHere46","20227177splitHere46","public void startConnection() throws Exception {<newline46mondego>            Class.forName(DRIVER);<newline46mondego>            DriverManager.setLoginTimeout(5);<newline46mondego>            conn = DriverManager.getConnection(DBURL, DBUSER, DBPASS);<newline46mondego>    }<newline46mondego><newline46mondego>public void compareData(int id, String pass) throws SQLException{<newline46mondego>        ResultSet rs = null;<newline46mondego>        PreparedStatement prdstmt = null;<newline46mondego><newline46mondego>        String query = <doubleQuotes46>SELECT id, password FROM users WHERE id=?, password=?<doubleQuotes46>;<newline46mondego><newline46mondego>        try {<newline46mondego>            conn.startConnection();<newline46mondego>        } catch (Exception e) {<newline46mondego>            throw new SQLException(e);<newline46mondego>        }<newline46mondego>"
"6656splitHere46","20227177splitHere46","MySQLConnection"
"6657splitHere46","20227177splitHere46","com.mysql.jdbc.MySQLConnection"
"6658splitHere46","20227184splitHere46","new BufferedReader(new InputStreamReader(new BufferedInputStream(this.getResourceAsStream(<doubleQuotes46>myPackage/myFile.txt<doubleQuotes46>)), <doubleQuotes46>UTF-8<doubleQuotes46>));<newline46mondego>"
"6659splitHere46","20227224splitHere46","DateTimeDeserializer"
"6660splitHere46","20227224splitHere46","DeserializationContext"
"6661splitHere46","20227224splitHere46","ObjectMapper"
"6662splitHere46","20227224splitHere46","ObjectMapper"
"6663splitHere46","20227224splitHere46","public ObjectMapper setTimeZone(TimeZone tz)<newline46mondego>"
"6664splitHere46","20227224splitHere46","ObjectMapper"
"6665splitHere46","20227224splitHere46","ObjectMapper.setTimeZone(TimeZone tz)"
"6666splitHere46","20227224splitHere46","/**<newline46mondego>  * Method for overriding default TimeZone to use for formatting.<newline46mondego>  * Default value used is {@link TimeZone#getDefault()}.<newline46mondego>  */<newline46mondego>"
"6667splitHere46","20227224splitHere46","protected final static BaseSettings DEFAULT_BASE = new BaseSettings(<newline46mondego>    ...<newline46mondego>    // TimeZone.getDefault()<newline46mondego>    TimeZone.getTimeZone(<doubleQuotes46>GMT<doubleQuotes46>),<newline46mondego>    ...<newline46mondego>"
"6668splitHere46","20227224splitHere46","ObjectMapper.setTimeZone(TimeZone tz)"
"6669splitHere46","20227274splitHere46","public class MainActivity extends Activity{ ... }<newline46mondego>public class MyView extends View { /*insert your View code from above*/ }<newline46mondego>"
"6670splitHere46","20227274splitHere46","setContentView(new MyView(this));<newline46mondego>"
"6671splitHere46","20227274splitHere46","<activity<newline46mondego>        android:name=<doubleQuotes46>.MainActivity<doubleQuotes46><newline46mondego>        android:label=<doubleQuotes46>MainActivity<doubleQuotes46>><newline46mondego>        <intent-filter><newline46mondego>            <action android:name=<doubleQuotes46>android.intent.action.MAIN<doubleQuotes46> /><newline46mondego>            <category android:name=<doubleQuotes46>android.intent.category.LAUNCHER<doubleQuotes46> /><newline46mondego>        </intent-filter><newline46mondego>    </activity><newline46mondego>"
"6672splitHere46","20227370splitHere46","ImageIO.read()"
"6673splitHere46","20227370splitHere46","public static void main(String[] args) {<newline46mondego>    try {<newline46mondego>        // get webcam page<newline46mondego>        URL url = new URL(<doubleQuotes46>...your example URL.../webcam/campob.html<doubleQuotes46>);<newline46mondego>        InputStreamReader isr = new InputStreamReader(url.openStream(), <doubleQuotes46>UTF-8<doubleQuotes46>);<newline46mondego>        Scanner scanner = new Scanner(isr);<newline46mondego>        final Pattern nullDelimiter = Pattern.compile(<doubleQuotes46><<<>>><doubleQuotes46>);<newline46mondego>        String html = scanner.useDelimiter(nullDelimiter).next();<newline46mondego>        scanner.close();<newline46mondego><newline46mondego>        // extract image URL from HTML<newline46mondego>        final Pattern extractPattern = Pattern.compile(<newline46mondego>                <doubleQuotes46>^var BaseURL = \<doubleQuotes46>([^\<doubleQuotes46>]+)\<doubleQuotes46>.*<doubleQuotes46><newline46mondego>                + <doubleQuotes46>^var ImageResolution = \<doubleQuotes46>([^\<doubleQuotes46>]+)\<doubleQuotes46>.*<doubleQuotes46><newline46mondego>                + <doubleQuotes46>^var File = \<doubleQuotes46>([^\<doubleQuotes46>]+)\<doubleQuotes46><doubleQuotes46>, <newline46mondego>                Pattern.MULTILINE|Pattern.DOTALL);<newline46mondego>        Matcher m = extractPattern.matcher(html);<newline46mondego>        if (!m.find()) throw new RuntimeException();<newline46mondego>        URL imgURL = new URL(m.group(1) + m.group(3) + m.group(2));<newline46mondego>        System.out.println(<doubleQuotes46>imgURL=<doubleQuotes46> + imgURL);<newline46mondego><newline46mondego>        // read headers into buffer <newline46mondego>        InputStream is = imgURL.openStream();<newline46mondego>        byte[] buffer = new byte[131072];<newline46mondego>        int bytes = 0;<newline46mondego>        Pattern headersPattern = Pattern.compile(<newline46mondego>                <doubleQuotes46>^Content-Length:\\s*(\\d+)\\s*$.*?^$\\r?\\n<doubleQuotes46>, <newline46mondego>                Pattern.MULTILINE|Pattern.DOTALL);<newline46mondego>        while (bytes < buffer.length) {<newline46mondego>            int count = is.read(buffer, bytes, buffer.length - bytes);<newline46mondego>            if (count < 0) break;<newline46mondego>            bytes += count;<newline46mondego>            m = headersPattern.matcher(new String(buffer, <doubleQuotes46>ASCII<doubleQuotes46>));<newline46mondego>            if (m.find()) break;<newline46mondego>        }<newline46mondego><newline46mondego>        // read rest of image bytes into buffer<newline46mondego>        int offset = m.end();<newline46mondego>        int contentLength = Integer.parseInt(m.group(1));<newline46mondego>        int limit = Math.min(buffer.length, offset + contentLength);<newline46mondego>        while (bytes < limit) {<newline46mondego>            int count = is.read(buffer, bytes, limit - bytes);<newline46mondego>            if (count < 0) break;<newline46mondego>            bytes += count;<newline46mondego>        }<newline46mondego>        is.close();<newline46mondego>        System.out.println(<doubleQuotes46>bytes=<doubleQuotes46> + bytes + <doubleQuotes46> offset=<doubleQuotes46> + offset);<newline46mondego><newline46mondego>        // read image from buffer (start after header)<newline46mondego>        is = new ByteArrayInputStream(buffer);<newline46mondego>        is.skip(offset);<newline46mondego>        Image img = ImageIO.read(is);<newline46mondego>        System.out.println(img);<newline46mondego>    } catch (Exception ex) {<newline46mondego>        ex.printStackTrace(System.err);<newline46mondego>    }<newline46mondego>}<newline46mondego>"
"6674splitHere46","20227392splitHere46","output = output.substring(2);<newline46mondego>"
"6675splitHere46","20227507splitHere46","package model;<newline46mondego><newline46mondego>import java.util.Comparator;<newline46mondego><newline46mondego>public class ShopComparator implements Comparator<Shop> {<newline46mondego><newline46mondego>    @Override<newline46mondego>    public int compare(Shop o1, Shop o2) {<newline46mondego>        return o1.getName().compareTo(o2.getName());<newline46mondego>    }<newline46mondego><newline46mondego>}<newline46mondego>"
"6676splitHere46","20227507splitHere46","package model;<newline46mondego><newline46mondego>public class Shop {<newline46mondego><newline46mondego>    private int id;<newline46mondego>    private String name;<newline46mondego><newline46mondego>    public Shop(int id, String name) {<newline46mondego>        super();<newline46mondego>        this.id = id;<newline46mondego>        this.name = name;<newline46mondego>    }<newline46mondego><newline46mondego>    public int getId() {<newline46mondego>        return id;<newline46mondego>    }<newline46mondego><newline46mondego>    public void setId(int id) {<newline46mondego>        this.id = id;<newline46mondego>    }<newline46mondego><newline46mondego>    public String getName() {<newline46mondego>        return name;<newline46mondego>    }<newline46mondego><newline46mondego>    public void setName(String name) {<newline46mondego>        this.name = name;<newline46mondego>    }<newline46mondego>}<newline46mondego>"
"6677splitHere46","20227507splitHere46","package model;<newline46mondego><newline46mondego>import java.util.HashMap;<newline46mondego>import java.util.Map;<newline46mondego>import java.util.TreeMap;<newline46mondego>import java.util.TreeSet;<newline46mondego><newline46mondego>public class App {<newline46mondego><newline46mondego>    public static void main(String[] args) {<newline46mondego>        Map<String, Shop> shops = new HashMap<String, Shop>();<newline46mondego>        Shop s1 = new Shop(1, <doubleQuotes46>Apus Drugstore<doubleQuotes46>);<newline46mondego>        Shop s2 = new Shop(2, <doubleQuotes46>DM<doubleQuotes46>);<newline46mondego>        Shop s3 = new Shop(3, <doubleQuotes46>Kaufhof<doubleQuotes46>);<newline46mondego>        Shop s4 = new Shop(4, <doubleQuotes46>Moes Traverne<doubleQuotes46>);<newline46mondego><newline46mondego>        shops.put(<doubleQuotes46>one<doubleQuotes46>, s3);<newline46mondego>        shops.put(<doubleQuotes46>two<doubleQuotes46>, s4);<newline46mondego>        shops.put(<doubleQuotes46>three<doubleQuotes46>, s1);<newline46mondego>        shops.put(<doubleQuotes46>four<doubleQuotes46>, s2);<newline46mondego><newline46mondego>        for(Shop s : shops.values()) {<newline46mondego>            System.out.println(s.getName());<newline46mondego>        }<newline46mondego>        ShopComparator sc = new ShopComparator();<newline46mondego>        TreeSet<Shop> sortedShops = new TreeSet<>(sc);<newline46mondego><newline46mondego>        sortedShops.addAll(shops.values());<newline46mondego><newline46mondego>        for(Shop s : sortedShops) {<newline46mondego>            System.out.println(s.getName());<newline46mondego>        }<newline46mondego>    }<newline46mondego><newline46mondego>}<newline46mondego>"
"6678splitHere46","20227530splitHere46","java -version<newline46mondego>javac -version<newline46mondego>"
"6679splitHere46","20227549splitHere46","ChangeLogDialog _ChangelogDialog = new ChangeLogDialog(YourActivity.this);<newline46mondego>"
"6680splitHere46","20227549splitHere46","this"
"6681splitHere46","20227549splitHere46","OnPreferenceClickListener"
"6682splitHere46","20227656splitHere46","ArrayList<String> lines = new ArrayList<String>();<newline46mondego><newline46mondego>//start reader, go over each line<newline46mondego><newline46mondego>while (line != null) {<newline46mondego>    String newLine = //make changes to line<newline46mondego>    lines.add(newLine);<newline46mondego>}<newline46mondego><newline46mondego>//close reader<newline46mondego>//start writer<newline46mondego>//write each line to file<newline46mondego>"
"6683splitHere46","20227748splitHere46","int eval(tree) {<newline46mondego>    if tree is just a number return that number<newline46mondego>    else {<newline46mondego>        l = eval(tree.left)<newline46mondego>        r = eval(tree.right)<newline46mondego>        return result of operation on l and r<newline46mondego>    }<newline46mondego>}<newline46mondego>"
"6684splitHere46","20227757splitHere46","<([DE])-(\d{2})-(.{1,99}?)-(\d{2})><newline46mondego>"
"6685splitHere46","20227757splitHere46","-"
"6686splitHere46","20227757splitHere46","<"
"6687splitHere46","20227757splitHere46",">"
"6688splitHere46","20227757splitHere46","[ ]"
"6689splitHere46","20227815splitHere46","<exclusions><newline46mondego>  <exclusion> <newline46mondego>    <groupId>org.slf4j</groupId><newline46mondego>    <artifactId>slf4j-log4j12</artifactId><newline46mondego>  </exclusion><newline46mondego>  <exclusion> <newline46mondego>    <groupId>log4j</groupId><newline46mondego>    <artifactId>log4j</artifactId><newline46mondego>  </exclusion><newline46mondego></exclusions> <newline46mondego>"
"6690splitHere46","20227850splitHere46","split(<doubleQuotes46>,<doubleQuotes46>)"
"6691splitHere46","20227850splitHere46","import java.util.Arrays;<newline46mondego>public class b {<newline46mondego>  public static void main(String[] args) {<newline46mondego>    String[] processes = { <doubleQuotes46>256,6<doubleQuotes46>, <doubleQuotes46>400,8<doubleQuotes46>, <doubleQuotes46>128,4<doubleQuotes46> };<newline46mondego>    String[] a1 = new String[processes.length];<newline46mondego>    String[] a2 = new String[processes.length];<newline46mondego>    for (int i = 0; i < processes.length; i++) {<newline46mondego>      String[] pieces = processes[i].split(<doubleQuotes46>,<doubleQuotes46>);<newline46mondego>      a1[i] = pieces[0];<newline46mondego>      a2[i] = pieces[1];<newline46mondego>    }<newline46mondego>    System.out.println(Arrays.toString(a1));<newline46mondego>    System.out.println(Arrays.toString(a2));<newline46mondego>  }<newline46mondego>}<newline46mondego>"
"6692splitHere46","20227991splitHere46","try {<newline46mondego>    Thread.sleep(5000);<newline46mondego>} catch (InterruptedException e) {<newline46mondego>    e.printStackTrace();<newline46mondego>}<newline46mondego>"
"6693splitHere46","20227991splitHere46","HomePage a=login.loginAs(<doubleQuotes46>username<doubleQuotes46>,<doubleQuotes46>Password<doubleQuotes46>);"
"6694splitHere46","20227991splitHere46","wait for condition"
"6695splitHere46","20228046splitHere46","scanner.next()"
"6696splitHere46","20228046splitHere46","next()"
"6697splitHere46","20228046splitHere46","filename"
"6698splitHere46","20228046splitHere46","scanner.next()"
"6699splitHere46","20228046splitHere46","test ATest BTest CTest DTest ETest"
"6700splitHere46","20228046splitHere46","Enter"
"6701splitHere46","20228046splitHere46","test"
"6702splitHere46","20228046splitHere46","ATest BTest CTest DTest ETest"
"6703splitHere46","20228046splitHere46","nextLine()"
"6704splitHere46","20228090splitHere46","String cypher = <doubleQuotes46>MATCH (a) WHERE a.name IN {names} RETURN a<doubleQuotes46>;<newline46mondego>Map<String, Object> params = new HashMap<>();<newline46mondego>List<String> names = new ArrayList<>();<newline46mondego>//add some names to the names list<newline46mondego>params.put(<doubleQuotes46>names<doubleQuotes46>, names);<newline46mondego>ExecutionResult result = engine.execute(cypher, params);<newline46mondego>"
"6705splitHere46","20228129splitHere46","Calendar c = Calendar.getInstance();<newline46mondego>c.set(Calendar.DAY_OF_WEEK, Calendar.SUNDAY);<newline46mondego>c.set(Calendar.HOUR_OF_DAY, 15);<newline46mondego>if (c.getTimeInMillis() - Calendar.getInstance().getTimeInMillis() < 0)<newline46mondego>    c.add(Calendar.DAY_OF_YEAR, 7);<newline46mondego>return c.getTimeInMillis();<newline46mondego>"
"6706splitHere46","20228255splitHere46","URL url = ClassLoader.getSystemResource(<doubleQuotes46>map.data<doubleQuotes46>);<newline46mondego>String fileName = in.nextLine();<newline46mondego>String dirPath = new File(url.getPath()).getParent();<newline46mondego>File myImage = new File(dirPath, fileName);<newline46mondego>"
"6707splitHere46","20228255splitHere46","String fileName = in.nextLine();<newline46mondego>URL imageUrl = ClassLoader.getSystemResource(fileName);<newline46mondego>File myImage = new File(imageUrl.getPath());<newline46mondego>"
"6708splitHere46","20228279splitHere46","super(new MigLayout(<newline46mondego>            <doubleQuotes46><doubleQuotes46>,<newline46mondego>            <doubleQuotes46><doubleQuotes46>,<newline46mondego>            <doubleQuotes46>[center][center][b][top]<doubleQuotes46><newline46mondego>            ));<newline46mondego>// This sets the 1st/2nd row to center aligned, 3rd row to bottom aligned and the<newline46mondego>// 4th row to top aligned.<newline46mondego>"
"6709splitHere46","20228279splitHere46","add(new JLabel(<doubleQuotes46>--><doubleQuotes46>),<doubleQuotes46>cell 3 3 1 3, align center<doubleQuotes46>);<newline46mondego>add(new JLabel(<doubleQuotes46><--<doubleQuotes46>),<doubleQuotes46>cell 3 6 1 1, align center<doubleQuotes46>);<newline46mondego>"
"6710splitHere46","20228279splitHere46","add(new JLabel(<doubleQuotes46>--><doubleQuotes46>),<doubleQuotes46>cell 3 3 1 1, align center<doubleQuotes46>);<newline46mondego>add(new JLabel(<doubleQuotes46><--<doubleQuotes46>),<doubleQuotes46>cell 3 4 1 1, align center<doubleQuotes46>);<newline46mondego>"
"6711splitHere46","20228455splitHere46","public boolean isThreeKind( int rankHist[]) <newline46mondego>{<newline46mondego>  for (int i=0;i<=13;i++)<newline46mondego>  {<newline46mondego>      if (rankHist[i]<3)<newline46mondego>      {<newline46mondego>          return false; // Will return false if either of the element have value <3<newline46mondego>      }<newline46mondego>  }<newline46mondego>  return true;  // Will return true only if all the 13 elements have value >=3<newline46mondego>}<newline46mondego>"
"6712splitHere46","20228607splitHere46","@Override<newline46mondego>protected String doInBackground(String... params) {<newline46mondego>    backGroundExecuted = false;<newline46mondego>    Log.d(<doubleQuotes46>doInBackground<doubleQuotes46>, <doubleQuotes46>Start processing doInBackground<doubleQuotes46>);     <newline46mondego><newline46mondego>    HttpClient httpClient = null;<newline46mondego>    HttpPost httpPost = null;<newline46mondego>    HttpGet httpGet = null;<newline46mondego><newline46mondego><newline46mondego>     if (httpMethodType == null || url == null) {<newline46mondego>         Log.d(<doubleQuotes46>doInBackground<doubleQuotes46> , <doubleQuotes46>The URL and Method Type is mandatory, cannot be null - httpMethodType =<doubleQuotes46> + httpMethodType + <doubleQuotes46> and url =<doubleQuotes46> + url);<newline46mondego>         this.getApiResponse().setSuccess(false);<newline46mondego>         this.getApiResponse().setResponseCode(HttpResponseCode.BAD_REQUEST);<newline46mondego>         this.getApiResponse().setResponseDescription(<doubleQuotes46>The URL and Method Type is mandatory, cannot be null<doubleQuotes46>);<newline46mondego>         return null;<newline46mondego>     }<newline46mondego><newline46mondego>    try {<newline46mondego><newline46mondego>         //set timeout<newline46mondego>         HttpParams httpParameters = new BasicHttpParams();<newline46mondego>         HttpConnectionParams.setConnectionTimeout(httpParameters, TIME_OUT);<newline46mondego>         HttpConnectionParams.setSoTimeout(httpParameters, SOCKET_TIME_OUT);<newline46mondego><newline46mondego>         httpClient = new DefaultHttpClient(httpParameters);<newline46mondego>         HttpResponse httpResponse = null;<newline46mondego><newline46mondego>        if (httpMethodType.equals(HTTPMethodType.POST.toString())) {<newline46mondego>            httpPost = new HttpPost(url);<newline46mondego>            //setting json object to request.<newline46mondego>            if (postParams != null) {<newline46mondego>                AbstractHttpEntity entity = null;<newline46mondego>                entity = new ByteArrayEntity(postParams.getBytes(<doubleQuotes46>UTF8<doubleQuotes46>));<newline46mondego>                if (httpContentType != null) {<newline46mondego>                    entity.setContentType(new BasicHeader(HTTP.CONTENT_TYPE, httpContentType));<newline46mondego>                }<newline46mondego>                httpPost.setEntity(entity);<newline46mondego>            }<newline46mondego>            httpResponse = httpClient.execute(httpPost);<newline46mondego><newline46mondego>        } else  if (httpMethodType.equals(HTTPMethodType.GET.toString()) || httpMethodType.equals(HTTPMethodType.PUT.toString())) {<newline46mondego>            if (queryParams != null) {<newline46mondego>                url = url + <doubleQuotes46>?<doubleQuotes46> + URLEncodedUtils.format(queryParams, <doubleQuotes46>utf-8<doubleQuotes46>);<newline46mondego>                Log.d(TAG ,<doubleQuotes46>new URL :<doubleQuotes46> + url);<newline46mondego>            }<newline46mondego>            httpGet = new HttpGet(url);<newline46mondego>            httpResponse = httpClient.execute(httpGet); <newline46mondego>        }<newline46mondego><newline46mondego>        this.getApiResponse().setResponseCode(httpResponse.getStatusLine().getStatusCode());<newline46mondego>        this.getApiResponse().setResponseDescription(httpResponse.getStatusLine().getReasonPhrase());<newline46mondego>         if (this.getApiResponse().getResponseCode() != HttpStatus.SC_OK) { <newline46mondego>             this.getApiResponse().setSuccess(false);<newline46mondego>             Log.w(getClass().getSimpleName(), <newline46mondego>                 <doubleQuotes46>Error <doubleQuotes46> + this.getApiResponse().getResponseCode() + <doubleQuotes46> for URL <doubleQuotes46> + url); <newline46mondego>             Log.w(getClass().getSimpleName(), <newline46mondego>                     <doubleQuotes46>Error <doubleQuotes46> +  this.getApiResponse().getResponseDescription() + <doubleQuotes46> for URL <doubleQuotes46> + url);<newline46mondego>          }<newline46mondego><newline46mondego>         Log.d(<doubleQuotes46>doInBackground<doubleQuotes46>, <doubleQuotes46>The API call executed and will check the response<doubleQuotes46>);<newline46mondego>         HttpEntity entityResp = httpResponse.getEntity();<newline46mondego>         if (entityResp != null) {<newline46mondego>             this.getApiResponse().setResponse(appHelper.getStringFromInputStream(entityResp.getContent()));<newline46mondego>             Log.d(<doubleQuotes46>doInBackground<doubleQuotes46>,<doubleQuotes46>The response is :<doubleQuotes46> + this.getApiResponse().getResponse());<newline46mondego>             this.getApiResponse().setSuccess(true);<newline46mondego>         }<newline46mondego><newline46mondego>     } catch (UnsupportedEncodingException e1) {<newline46mondego>         Log.e(<doubleQuotes46>doInBackground<doubleQuotes46>,<doubleQuotes46>Exception :<doubleQuotes46> + e1.toString());<newline46mondego>         this.getApiResponse().setSuccess(false);<newline46mondego>         this.getApiResponse().setResponseCode(HttpResponseCode.BAD_REQUEST);<newline46mondego>         this.getApiResponse().setResponseDescription(<doubleQuotes46>Exception :<doubleQuotes46> + e1.toString());<newline46mondego>            Log.e(<doubleQuotes46>doInBackground<doubleQuotes46>,<doubleQuotes46>Exception :<doubleQuotes46> + e1.toString());<newline46mondego>            e1.printStackTrace();<newline46mondego>     } catch (Exception e) {<newline46mondego>         Log.e(<doubleQuotes46>doInBackground<doubleQuotes46>,<doubleQuotes46>Exception :<doubleQuotes46> + e.toString());<newline46mondego>         this.getApiResponse().setSuccess(false);<newline46mondego>         this.getApiResponse().setResponseCode(HttpResponseCode.BAD_REQUEST);<newline46mondego>         this.getApiResponse().setResponseDescription(<doubleQuotes46>Exception :<doubleQuotes46> + e.toString());<newline46mondego>         if (httpPost != null && !httpPost.isAborted()) {<newline46mondego>             httpPost.abort(); <newline46mondego>         }<newline46mondego>     } finally {<newline46mondego>         if (httpClient != null) {<newline46mondego>             httpClient.getConnectionManager().shutdown();<newline46mondego>         }<newline46mondego>         backGroundExecuted = true;<newline46mondego><newline46mondego>     }<newline46mondego>    return null;<newline46mondego>}<newline46mondego>"
"6713splitHere46","20228619splitHere46","ScrolledComposite"
"6714splitHere46","20228619splitHere46","setMinSize(Point)"
"6715splitHere46","20228619splitHere46","ScrolledComposite"
"6716splitHere46","20228619splitHere46","layout()"
"6717splitHere46","20228619splitHere46","public class DynamicDialog extends Dialog <newline46mondego>{<newline46mondego>    private int count = 1;<newline46mondego><newline46mondego>    public DynamicDialog(final Shell parent) <newline46mondego>    {<newline46mondego>        super(parent);<newline46mondego>    }<newline46mondego><newline46mondego>    @Override<newline46mondego>    protected Control createDialogArea(final Composite parent) <newline46mondego>    {<newline46mondego>        final Composite container = (Composite) super.createDialogArea(parent);<newline46mondego>        container.setLayout(new FillLayout());<newline46mondego><newline46mondego>        final ScrolledComposite scrolledComposite = new ScrolledComposite(container, SWT.BORDER | SWT.H_SCROLL | SWT.V_SCROLL);<newline46mondego>        scrolledComposite.setExpandHorizontal(true);<newline46mondego>        scrolledComposite.setExpandVertical(true);<newline46mondego><newline46mondego>        final Composite composite = new Composite(scrolledComposite, SWT.NONE);<newline46mondego>        composite.setLayout(new GridLayout(1, false));<newline46mondego>        scrolledComposite.setContent(composite);<newline46mondego>        scrolledComposite.setSize(composite.computeSize(SWT.DEFAULT, SWT.DEFAULT));<newline46mondego><newline46mondego>        final Composite composite_1 = new Composite(composite, SWT.NONE);<newline46mondego>        composite_1.setLayout(new GridLayout(2, false));<newline46mondego>        composite_1.setLayoutData(new GridData(SWT.LEFT, SWT.CENTER, false, false));<newline46mondego><newline46mondego>        final Label lblDefault = new Label(composite_1, SWT.NONE);<newline46mondego>        lblDefault.setLayoutData(new GridData(SWT.RIGHT, SWT.CENTER, false, false, 1, 1));<newline46mondego>        lblDefault.setText(<doubleQuotes46>Default:<doubleQuotes46>);<newline46mondego><newline46mondego>        final Combo combo = new Combo(composite_1, SWT.NONE);<newline46mondego>        combo.setLayoutData(new GridData(SWT.LEFT, SWT.CENTER, true, false, 1, 1));<newline46mondego><newline46mondego>        final Composite composite_2 = new Composite(composite, SWT.NONE);<newline46mondego>        composite_2.setLayout(new GridLayout(4, false));<newline46mondego>        composite_2.setLayoutData(new GridData(SWT.LEFT, SWT.CENTER, false, false));<newline46mondego><newline46mondego>        final Composite composite_3 = new Composite(composite, SWT.NONE);<newline46mondego>        composite_3.setLayout(new GridLayout());<newline46mondego>        composite_3.setLayoutData(new GridData(SWT.LEFT, SWT.CENTER, false, false));<newline46mondego><newline46mondego>        final Button btnAdd = new Button(composite_3, SWT.NONE);<newline46mondego>        btnAdd.setText(<doubleQuotes46>Add<doubleQuotes46>);<newline46mondego>        btnAdd.addSelectionListener(new SelectionAdapter() <newline46mondego>        {<newline46mondego>            @Override public void widgetSelected(final SelectionEvent e) <newline46mondego>            {<newline46mondego>                final Label label2 = new Label(composite_2, SWT.NONE);<newline46mondego>                label2.setLayoutData(new GridData(SWT.RIGHT, SWT.CENTER, false, false, 1, 1));<newline46mondego>                label2.setText( String.valueOf(count++) );<newline46mondego><newline46mondego>                new Text(composite_2, SWT.BORDER).setLayoutData(new GridData(SWT.FILL, SWT.CENTER, true, false));<newline46mondego>                new Text(composite_2, SWT.BORDER).setLayoutData(new GridData(SWT.FILL, SWT.CENTER, true, false));<newline46mondego>                new Button(composite_2, SWT.NONE).setText(<doubleQuotes46>Delete<doubleQuotes46>);<newline46mondego><newline46mondego>                // DO THIS:<newline46mondego>                scrolledComposite.layout(true, true);<newline46mondego>                scrolledComposite.setMinSize(composite.computeSize(SWT.DEFAULT, SWT.DEFAULT));<newline46mondego>                // .. and it will work<newline46mondego>            }<newline46mondego>        });<newline46mondego><newline46mondego>        return container;<newline46mondego>    }<newline46mondego><newline46mondego>    @Override<newline46mondego>    protected void createButtonsForButtonBar(final Composite parent) <newline46mondego>    {<newline46mondego>        createButton(parent, IDialogConstants.OK_ID, IDialogConstants.OK_LABEL, true);<newline46mondego>        createButton(parent, IDialogConstants.CANCEL_ID, IDialogConstants.CANCEL_LABEL, false);<newline46mondego>    }<newline46mondego><newline46mondego>    /**<newline46mondego>     * Return the initial size of the dialog.<newline46mondego>     */<newline46mondego>    @Override<newline46mondego>    protected Point getInitialSize() <newline46mondego>    {<newline46mondego>        return new Point(450, 300);<newline46mondego>    }<newline46mondego><newline46mondego>    public static void main(final String[] args)<newline46mondego>    {<newline46mondego>        final Shell shell = new Shell(new Display());<newline46mondego>        shell.setLayout(new FillLayout());<newline46mondego><newline46mondego>        new DynamicDialog(shell).open();<newline46mondego>    }<newline46mondego>}<newline46mondego>"
"6718splitHere46","20228716splitHere46","private List<AdResources> adResourcesList = new ArrayList<AdResources>();<newline46mondego>"
"6719splitHere46","20228716splitHere46","null"
"6720splitHere46","20228716splitHere46","NullPointerException"
"6721splitHere46","20228766splitHere46","catch (DataAccessException e) {<newline46mondego>    e.printStackTrace();<newline46mondego>}<newline46mondego>"
"6722splitHere46","20228856splitHere46","driver.findElement(By.id(popupid))<newline46mondego>"
"6723splitHere46","20228939splitHere46","symcjit.dll"
"6724splitHere46","20228944splitHere46","String html = <doubleQuotes46><img width='300' height='246' src='http://mesrobian.sarnok.com/wp-content/uploads/2013/11/rayi_slleiman_bkerke-300x246.jpg'<doubleQuotes46> +<newline46mondego>                <doubleQuotes46> class='attachment-medium wp-post-image' alt='rayi_slleiman_bkerke' style='float: right; margin-left: 5px;' /><p><strong>Lorem Ip<doubleQuotes46> +<newline46mondego>                <doubleQuotes46>sum</strong> is simply dummy text of the priectronic typesetting, remaining essentially unchanged. It was popularised in the 1960<doubleQuotes46> +<newline46mondego>                <doubleQuotes46>s with the release of Letraset sheets containing Lorem Ipsum passages, and more recently with desktop publishing software like Al<doubleQuotes46> +<newline46mondego>                <doubleQuotes46>dus PageMaker including versions of Lorem Ipsum.</p> <p><strong>Lorem Ipsum</strong> is simply dummy text of the priectronic type<doubleQuotes46> +<newline46mondego>                <doubleQuotes46>setting, remaining essentially unchanged. It was popularised in the 1960s with the release of Letraset sheets containing Lorem Ip<doubleQuotes46> +<newline46mondego>                <doubleQuotes46>sum passages, and more recently with desktop publishing software like Aldus PageMaker including versions of Lorem Ipsum.</p><doubleQuotes46>;<newline46mondego><newline46mondego>        Document doc = Jsoup.parse(html);<newline46mondego>        Elements paragraphs = doc.select(<doubleQuotes46>p<doubleQuotes46>);      <newline46mondego>        System.out.println(paragraphs);<newline46mondego>"
"6725splitHere46","20228944splitHere46","<p><strong>Lorem Ipsum</strong> is simply dummy text of the priectronic typesetting, remaining essentially unchanged. It was popularised in the 1960s with the release of Letraset sheets containing Lorem Ipsum passages, and more recently with desktop publishing software like Aldus PageMaker including versions of Lorem Ipsum.</p><newline46mondego><p><strong>Lorem Ipsum</strong> is simply dummy text of the priectronic typesetting, remaining essentially unchanged. It was popularised in the 1960s with the release of Letraset sheets containing Lorem Ipsum passages, and more recently with desktop publishing software like Aldus PageMaker including versions of Lorem Ipsum.</p><newline46mondego>"
"6726splitHere46","20229151splitHere46","NestedClass"
"6727splitHere46","20229177splitHere46","if (uniqueName) {<newline46mondego>        PdfFormField parent = PdfFormField.createTextField(<newline46mondego>                stamper.getWriter(), true, false, 0);<newline46mondego>        parent.setFieldName(fieldName);<newline46mondego>        parent.setUserName(<doubleQuotes46>Please enter the common demo data.<doubleQuotes46>);<newline46mondego><newline46mondego>        for (int page = 1; page <= pages; page++) {<newline46mondego>            TextField textField = new TextField(stamper.getWriter(),<newline46mondego>                    new Rectangle(560, 600, 590, 800), null);<newline46mondego>            textField.setOptions(TextField.MULTILINE<newline46mondego>                    | TextField.DO_NOT_SCROLL);<newline46mondego>            textField.setRotation(90);<newline46mondego>            PdfFormField pff = textField.getTextField();<newline46mondego>            parent.addKid(pff);<newline46mondego>            // add widget to each page<newline46mondego>            pff.setPlaceInPage(page);<newline46mondego>        }<newline46mondego>        // add parent<newline46mondego>        stamper.addAnnotation(parent, 1);<newline46mondego>    } else {<newline46mondego>"
"6728splitHere46","20229316splitHere46","isCyclicDirected"
"6729splitHere46","20229463splitHere46","((ChannelExec)channel).setErrStream(System.err);<newline46mondego>"
"6730splitHere46","20229463splitHere46","((ChannelExec)channel).setErrStream(System.err, true);<newline46mondego>"
"6731splitHere46","20229702splitHere46","ServerSocket ss = new ServerSocket(PORT);<newline46mondego>while (LISTENING) {<newline46mondego>    Socket sock = ss.accept();<newline46mondego>    Handler handler = new Handler(sock);<newline46mondego>    new Thread(handler).start();<newline46mondego>    //With the LISTENING variable dealt with as well<newline46mondego>}<newline46mondego>"
"6732splitHere46","20229872splitHere46","public static boolean checkInputs(String input, int questions)<newline46mondego>{<newline46mondego>    boolean checkInputs = true; // intially true, false if proven otherwise<newline46mondego>    if (input.length() == questions) // if proper # of answers to # of questions<newline46mondego>    {<newline46mondego>        for (int question = 0; question < questions; question++)<newline46mondego>        {<newline46mondego>            int letter = input.charAt(question);<newline46mondego>            if (!(letter == 'A' || letter == 'B' || letter == 'C' || letter == 'D' || letter == 'X'))<newline46mondego>            {<newline46mondego>                checkInputs = false;<newline46mondego>            }<newline46mondego>        }<newline46mondego>    }<newline46mondego>    else<newline46mondego>    {<newline46mondego>        return false; // # of answers != # of questions, so return false<newline46mondego>    }<newline46mondego><newline46mondego>    return checkInputs;<newline46mondego>} <newline46mondego>"
"6733splitHere46","20229872splitHere46","for (questions = 0; questions < input.Length(); counter--)<newline46mondego>"
"6734splitHere46","20229872splitHere46","input.Length()"
"6735splitHere46","20229872splitHere46","input.length()"
"6736splitHere46","20229872splitHere46","counter"
"6737splitHere46","20229872splitHere46","counter--"
"6738splitHere46","20229872splitHere46","questions++"
"6739splitHere46","20229872splitHere46","--"
"6740splitHere46","20229872splitHere46","if(isInSet=true)<newline46mondego>{<newline46mondego>    System.out.print(<doubleQuotes46>True<doubleQuotes46>);<newline46mondego>}<newline46mondego>else<newline46mondego>{<newline46mondego>    System.out.print(<doubleQuotes46>False<doubleQuotes46>);<newline46mondego>}<newline46mondego>"
"6741splitHere46","20229872splitHere46","return checkInputs;"
"6742splitHere46","20229872splitHere46","isInSet"
"6743splitHere46","20229872splitHere46","checkInputs"
"6744splitHere46","20229872splitHere46","checkInputs"
"6745splitHere46","20229872splitHere46","boolean checkInputs;"
"6746splitHere46","20229872splitHere46","boolean checkInputs = true;"
"6747splitHere46","20229872splitHere46","int letter = word.charAt(questions);"
"6748splitHere46","20229872splitHere46","int letter = input.charAt(questions);"
"6749splitHere46","20229872splitHere46","if(isInSet=true)<newline46mondego>"
"6750splitHere46","20229872splitHere46","if(isInSet==true)<newline46mondego>"
"6751splitHere46","20229872splitHere46","if (letter == 'A' && letter == 'B' && letter == 'C' && letter == 'D' && letter == 'X')<newline46mondego>"
"6752splitHere46","20229872splitHere46","if (letter == 'A' || letter == 'B' || letter == 'C' || letter == 'D' || letter == 'X')<newline46mondego>"
"6753splitHere46","20229872splitHere46","'A'"
"6754splitHere46","20229872splitHere46","'B'"
"6755splitHere46","20229872splitHere46","'C'"
"6756splitHere46","20229872splitHere46","'D'"
"6757splitHere46","20229872splitHere46","'X'"
"6758splitHere46","20229872splitHere46","||"
"6759splitHere46","20229872splitHere46","&&"
"6760splitHere46","20229872splitHere46","if (!(letter == 'A' || letter == 'B' || letter == 'C' || letter == 'D' || letter == 'X'))<newline46mondego>{<newline46mondego>    checkInputs = false;<newline46mondego>}<newline46mondego>"
"6761splitHere46","20229872splitHere46","questions"
"6762splitHere46","20229872splitHere46","input"
"6763splitHere46","20229872splitHere46","if (input.length() == questions) {<newline46mondego>     // test the letters<newline46mondego> } else {<newline46mondego>     return false; }<newline46mondego>"
"6764splitHere46","20229872splitHere46","for (int question = 0; question < questions; question++)<newline46mondego>"
"6765splitHere46","20229977splitHere46","throws"
"6766splitHere46","20229977splitHere46","extends"
"6767splitHere46","20230037splitHere46","ClassLoader"
"6768splitHere46","20230282splitHere46","while(!isOver()) {<newline46mondego>    // Do stuff<newline46mondego>    try {<newline46mondego>        Thread.sleep(1000);<newline46mondego>    } catch (InterruptedException e) {<newline46mondego>            // Deal with exception here<newline46mondego>    }<newline46mondego>}<newline46mondego>"
"6769splitHere46","20230357splitHere46","Component tabComp = ...<newline46mondego> tab.insertTab(<doubleQuotes46>Title<doubleQuotes46>, null, tabComp, null, index);<newline46mondego>"
"6770splitHere46","20230357splitHere46","index"
"6771splitHere46","20230357splitHere46","tab.getTabCount() - 1"
"6772splitHere46","20230357splitHere46","stateChanged"
"6773splitHere46","20230357splitHere46","tab.getSelectedIndex()"
"6774splitHere46","20230357splitHere46","import java.awt.BorderLayout;<newline46mondego>import java.awt.EventQueue;<newline46mondego>import java.awt.event.ActionEvent;<newline46mondego>import java.awt.event.ActionListener;<newline46mondego>import javax.swing.JButton;<newline46mondego>import javax.swing.JFrame;<newline46mondego>import javax.swing.JPanel;<newline46mondego>import javax.swing.JTabbedPane;<newline46mondego>import javax.swing.UIManager;<newline46mondego>import javax.swing.UnsupportedLookAndFeelException;<newline46mondego>import javax.swing.event.ChangeEvent;<newline46mondego>import javax.swing.event.ChangeListener;<newline46mondego><newline46mondego>public class TestTabSelection {<newline46mondego><newline46mondego>    public static void main(String[] args) {<newline46mondego>        new TestTabSelection();<newline46mondego>    }<newline46mondego><newline46mondego>    public TestTabSelection() {<newline46mondego>        EventQueue.invokeLater(new Runnable() {<newline46mondego>            @Override<newline46mondego>            public void run() {<newline46mondego>                try {<newline46mondego>                    UIManager.setLookAndFeel(UIManager.getSystemLookAndFeelClassName());<newline46mondego>                } catch (ClassNotFoundException | InstantiationException | IllegalAccessException | UnsupportedLookAndFeelException ex) {<newline46mondego>                    ex.printStackTrace();<newline46mondego>                }<newline46mondego><newline46mondego>                final JTabbedPane tab = new JTabbedPane();<newline46mondego>                tab.addTab(<doubleQuotes46>A<doubleQuotes46>, new JPanel());<newline46mondego>                tab.addTab(<doubleQuotes46>+<doubleQuotes46>, new JPanel());<newline46mondego>                tab.getModel().addChangeListener(new ChangeListener() {<newline46mondego>                    private int lastSelected;<newline46mondego>                    private boolean ignore = false;<newline46mondego><newline46mondego>                    @Override<newline46mondego>                    public void stateChanged(ChangeEvent e) {<newline46mondego>                        if (!ignore) {<newline46mondego>                            ignore = true;<newline46mondego>                            try {<newline46mondego>                                int selected = tab.getSelectedIndex();<newline46mondego>                                String title = tab.getTitleAt(selected);<newline46mondego>                                if (<doubleQuotes46>+<doubleQuotes46>.equals(title)) {<newline46mondego>                                    JPanel pane = new JPanel();<newline46mondego>                                    tab.insertTab(<doubleQuotes46>Tab<doubleQuotes46> + (tab.getTabCount() - 1), null, pane, null, lastSelected + 1);<newline46mondego>                                    tab.setSelectedComponent(pane);<newline46mondego>                                } else {<newline46mondego>                                    lastSelected = selected;<newline46mondego>                                }<newline46mondego>                            } finally {<newline46mondego>                                ignore = false;<newline46mondego>                            }<newline46mondego>                        }<newline46mondego>                    }<newline46mondego>                });<newline46mondego>                final JButton btn = new JButton(<doubleQuotes46>Add<doubleQuotes46>);<newline46mondego>                btn.addActionListener(new ActionListener() {<newline46mondego>                    @Override<newline46mondego>                    public void actionPerformed(ActionEvent e) {<newline46mondego>                        System.out.println(tab.getTabCount());<newline46mondego>                    }<newline46mondego>                });<newline46mondego><newline46mondego>                JFrame frame = new JFrame(<doubleQuotes46>Testing<doubleQuotes46>);<newline46mondego>                frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);<newline46mondego>                frame.add(tab);<newline46mondego>                frame.add(btn, BorderLayout.SOUTH);<newline46mondego>                frame.pack();<newline46mondego>                frame.setLocationRelativeTo(null);<newline46mondego>                frame.setVisible(true);<newline46mondego>            }<newline46mondego>        });<newline46mondego>    }<newline46mondego><newline46mondego>}<newline46mondego>"
"6775splitHere46","20230419splitHere46","public int method() {<newline46mondego><newline46mondego>System.out.prontln(<doubleQuotes46>method() started<doubleQuotes46>);<newline46mondego>}<newline46mondego>"
"6776splitHere46","20230419splitHere46","public int method() {<newline46mondego><newline46mondego>// this method() is just an example<newline46mondego><newline46mondego>}<newline46mondego>"
"6777splitHere46","20230423splitHere46","int len;<newline46mondego>    while ((len = fis.read(buffer)) > 0) {<newline46mondego>        output.write(buffer, 0, len);<newline46mondego>    }<newline46mondego>"
"6778splitHere46","20230456splitHere46","JsArrayString"
"6779splitHere46","20230465splitHere46","Object mainMenu = JOptionPane.showInputDialog(null, <doubleQuotes46>Main Menu<doubleQuotes46>, <doubleQuotes46>2062 Voting<doubleQuotes46>, JOptionPane.QUESTION_MESSAGE, null, mainValues, mainfirst);"
"6780splitHere46","20230465splitHere46","do..while"
"6781splitHere46","20230465splitHere46","while"
"6782splitHere46","20230553splitHere46","this.password"
"6783splitHere46","20230553splitHere46","validatePassword()"
"6784splitHere46","20230553splitHere46","inputText"
"6785splitHere46","20230553splitHere46","createUser()"
"6786splitHere46","20230553splitHere46","validatePassword()"
"6787splitHere46","20230556splitHere46","List<StringValue> list = new ArrayList<StringValue>();<newline46mondego>for (MapEntry m : map.entrySet()) {<newline46mondego>  list.add(new StringValue(m.getKey() + <doubleQuotes46>:<doubleQuotes46> + m.getValue());<newline46mondego>}<newline46mondego>return new SequenceExtent(list);<newline46mondego>"
"6788splitHere46","20230607splitHere46","<item><title>Pad & Quill<newline46mondego>"
"6789splitHere46","20230607splitHere46","<item><title>Pad &amp; Quill<newline46mondego>"
"6790splitHere46","20230607splitHere46","<\item><title>Deal of the Day"
"6791splitHere46","20230745splitHere46","if(bullets.size() > 0) for(Bullet b: bullets) b.update(delta);<newline46mondego>"
"6792splitHere46","20230745splitHere46","SpaceInvaders.destroyBullet(this);<newline46mondego>"
"6793splitHere46","20230745splitHere46","bullets.remove(b);<newline46mondego>"
"6794splitHere46","20230943splitHere46","if(rs.next()) // get the first record<newline46mondego>{<newline46mondego>for(int a=0;rs.next();a++) // get the second (and later) records....<newline46mondego>"
"6795splitHere46","20230943splitHere46","do while"
"6796splitHere46","20230943splitHere46","int a = 0;<newline46mondego>do <newline46mondego>{   <newline46mondego>  System.out.println(<doubleQuotes46>hello# <doubleQuotes46>+a);<newline46mondego>  lm.book_ids.add(rs.getString(1));<newline46mondego>  lm.branch_id.add(rs.getInt(2));<newline46mondego>  lm.cards.add(rs.getString(3));<newline46mondego>  lm.date_out.add(rs.getString(4));<newline46mondego>  lm.due_date.add(rs.getString(5));<newline46mondego>  a++;<newline46mondego>} while (rs.next());<newline46mondego>"
"6797splitHere46","20231126splitHere46","Person"
"6798splitHere46","20231126splitHere46","public interface PersonLookup {<newline46mondego><newline46mondego>    void add(Person person);<newline46mondego><newline46mondego>    Set<Person> get(String key); <newline46mondego>}<newline46mondego><newline46mondego>public class Person {<newline46mondego>    private String firstName, lastName;<newline46mondego>    private Double salary;<newline46mondego><newline46mondego>    public Person(String firstName, String lastName, Double salary) {<newline46mondego>        this.firstName = firstName;<newline46mondego>        this.lastName = lastName;<newline46mondego>        this.salary = salary;<newline46mondego>    }<newline46mondego><newline46mondego>    ... getters ...<newline46mondego><newline46mondego>    ... equals() and hashCode() ...<newline46mondego>}<newline46mondego>"
"6799splitHere46","20231126splitHere46","Set"
"6800splitHere46","20231296splitHere46","<many-to-one name=<doubleQuotes46>slaveObject<doubleQuotes46> class=<doubleQuotes46>foreign.Mea_class_no<doubleQuotes46><newline46mondego>        fetch=<doubleQuotes46>select<doubleQuotes46> <newline46mondego>        insert=<doubleQuotes46>false<doubleQuotes46> update=<doubleQuotes46>false<doubleQuotes46> lazy=<doubleQuotes46>false<doubleQuotes46> not-found=<doubleQuotes46>ignore<doubleQuotes46> not-null=<doubleQuotes46>false<doubleQuotes46><newline46mondego>        ><newline46mondego>    <column name=<doubleQuotes46>slave_grade<doubleQuotes46>></column>         <newline46mondego>    <column name=<doubleQuotes46>slave_code<doubleQuotes46>></column><newline46mondego><newline46mondego></many-to-one><newline46mondego>"
"6801splitHere46","20231296splitHere46","<many-to-one name=<doubleQuotes46>slaveObject<doubleQuotes46> class=<doubleQuotes46>foreign.Mea_class_no<doubleQuotes46><newline46mondego>    fetch=<doubleQuotes46>select<doubleQuotes46> <newline46mondego>    insert=<doubleQuotes46>false<doubleQuotes46> update=<doubleQuotes46>false<doubleQuotes46> lazy=<doubleQuotes46>false<doubleQuotes46> not-found=<doubleQuotes46>ignore<doubleQuotes46> not-null=<doubleQuotes46>false<doubleQuotes46><newline46mondego>    ><newline46mondego>    <column name=<doubleQuotes46>slave_code<doubleQuotes46>></column><newline46mondego>    <column name=<doubleQuotes46>slave_grade<doubleQuotes46>></column><newline46mondego></many-to-one><newline46mondego>"
"6802splitHere46","20231326splitHere46","public void recieve(float[] coords) {<newline46mondego>   this.list.add(convertToFloat(coords));<newline46mondego>}<newline46mondego><newline46mondego>public Float[] convertToFloat(float[] coords) {<newline46mondego>  Float[] converted = new Float[coords.length];<newline46mondego>  for (int i = 0; i < coords.length; i++) {<newline46mondego>     converted[i] = Float.valueOf(coords[i]));<newline46mondego>  }<newline46mondego>  return converted;<newline46mondego>}<newline46mondego>"
"6803splitHere46","20231431splitHere46","public static void getFileInfo(String fileName) throws FileNotFoundException {<newline46mondego><newline46mondego>Scanner in = new Scanner(new File(fileName));<newline46mondego>Score = 0;<newline46mondego><newline46mondego>    while (in.hasNext()) { <newline46mondego>    String fileContent = in.nextLine();<newline46mondego>    String result = removeSpaces(fileContent);<newline46mondego><newline46mondego>    double first = Double.parseDouble(fileContent.substring(0, fileContent.indexOf(<doubleQuotes46> <doubleQuotes46>)));<newline46mondego>    char operator = getOperator(fileContent);<newline46mondego>    double second = secondNumber(result, fileContent);<newline46mondego>    double last = Double.parseDouble(result.substring(result.indexOf(<doubleQuotes46>=<doubleQuotes46>) + 1));<newline46mondego><newline46mondego>    double math = mathChecking(first, second, operator);<newline46mondego><newline46mondego>    mathGrading(math , last);<newline46mondego><newline46mondego>    }<newline46mondego>    System.out.println(Score);<newline46mondego><newline46mondego>}<newline46mondego>"
"6804splitHere46","20231471splitHere46","Activity"
"6805splitHere46","20231471splitHere46","layout"
"6806splitHere46","20231471splitHere46","setContentView()"
"6807splitHere46","20231471splitHere46","onBackPressed()"
"6808splitHere46","20231471splitHere46","layout"
"6809splitHere46","20231471splitHere46","layout"
"6810splitHere46","20231471splitHere46","Activities"
"6811splitHere46","20231471splitHere46","Activity"
"6812splitHere46","20231471splitHere46","onCreate()"
"6813splitHere46","20231471splitHere46","setContentView(R.layout.activity_second_screen);"
"6814splitHere46","20231471splitHere46","onClick()"
"6815splitHere46","20231471splitHere46","Intent"
"6816splitHere46","20231471splitHere46","Activity"
"6817splitHere46","20231471splitHere46","public void secondScreen(View v) {<newline46mondego>    Intenet i = new Intent(v.getContext(), NextActivityName.class);<newline46mondego>    startActivity(i);<newline46mondego>}<newline46mondego>"
"6818splitHere46","20231561splitHere46","Class<?> innerClass = o.getClass();<newline46mondego>"
"6819splitHere46","20231561splitHere46","Field allFields[] = innerClass.getDeclaredFields();    <newline46mondego>Constructor<?> constructors[] = innerClass.getDeclaredConstructors();<newline46mondego>Method allMethods[] = innerClass.getDeclaredMethods();<newline46mondego><newline46mondego>constructor.setAccessible(true);  sets the constructor accessible.<newline46mondego>"
"6820splitHere46","20232702splitHere46","( )"
"6821splitHere46","20232702splitHere46","String s  = <doubleQuotes46>{one}{two}{three}<doubleQuotes46>;<newline46mondego>Pattern p = Pattern.compile(<doubleQuotes46>\\{([^}]*)\\}<doubleQuotes46>);<newline46mondego>Matcher m = p.matcher(s);<newline46mondego>while (m.find()) {<newline46mondego>  System.out.println(m.group(1));<newline46mondego>}<newline46mondego>"
"6822splitHere46","20232702splitHere46","one<newline46mondego>two<newline46mondego>three<newline46mondego>"
"6823splitHere46","20232702splitHere46","String s  = <doubleQuotes46>{one}{two}{three}<doubleQuotes46>;<newline46mondego>Pattern p = Pattern.compile(<doubleQuotes46>\\{([^}]*)\\}\\{([^}]*)\\}\\{([^}]*)\\}<doubleQuotes46>);<newline46mondego>Matcher m = p.matcher(s);<newline46mondego>while (m.find()) {<newline46mondego>  System.out.println(m.group(1) + <doubleQuotes46>, <doubleQuotes46> + m.group(2) + <doubleQuotes46>, <doubleQuotes46> + m.group(3));<newline46mondego>}<newline46mondego>"
"6824splitHere46","20232702splitHere46","one, two, three<newline46mondego>"
"6825splitHere46","20232749splitHere46","public static void printLongName(String name, int numOfSpacesBetweenLetters) {<newline46mondego>  StringBuffer sbSpace = New StringBuffer();<newline46mondego>  for (int i = 0; i <= numOfSpacesBetweenLetters; i++) {<newline46mondego>    sbSpace.Append(<doubleQuotes46> <doubleQuotes46>);<newline46mondego>  }<newline46mondego><newline46mondego>  char[] letter = name.toCharArray(); <newline46mondego>  for (int i = 0; i < letter.length; i++) {<newline46mondego>    System.out.print(sbSpace + letter[i]);<newline46mondego>    System.out.println();<newline46mondego>  }<newline46mondego>}<newline46mondego>"
"6826splitHere46","20232781splitHere46","com.site.myname.projectname"
"6827splitHere46","20232781splitHere46","com.myname.projectname"
"6828splitHere46","20232781splitHere46","<url>"
"6829splitHere46","20232807splitHere46","Oui"
"6830splitHere46","20232832splitHere46","repaint()"
"6831splitHere46","20232832splitHere46","paintComponent()"
"6832splitHere46","20232925splitHere46","public ClassicView getClassicViewWithId(int id,Context context) <newline46mondego>                                                throws JSONException {<newline46mondego><newline46mondego>     classicSetLabel(myView.getJSONObject(i).getJSONArray(<doubleQuotes46>Label<doubleQuotes46>),<newline46mondego>                                                myClassicView,context);<newline46mondego>        return null;<newline46mondego>  }<newline46mondego><newline46mondego> public void classicSetLabel(JSONArray myArrayLabel, ClassicView classicView,<newline46mondego>                                      Context context) throws JSONException {<newline46mondego><newline46mondego>        for (int i = 0; i < myArrayLabel.length(); i++) {<newline46mondego>            Log.e(<doubleQuotes46>CLASSICVIEW<doubleQuotes46>, classicView.toString());<newline46mondego>            TextView myTextView = new TextView(context);<newline46mondego><newline46mondego>        }<newline46mondego>}<newline46mondego>"
"6833splitHere46","20232925splitHere46","getClassicViewWithId"
"6834splitHere46","20232925splitHere46","ClassicView view = jParser.getClassicViewWithId(your_id,MainActivity.this);<newline46mondego>"
"6835splitHere46","20232977splitHere46","String lineIndex=<doubleQuotes46>21<doubleQuotes46>;<newline46mondego>String line=<doubleQuotes46>2<doubleQuotes46>;<newline46mondego>String currentBid=<doubleQuotes46>102<doubleQuotes46>;<newline46mondego><newline46mondego>File temp = File.createTempFile(<doubleQuotes46>temp-sh<doubleQuotes46>, <doubleQuotes46>.sh<doubleQuotes46>); <newline46mondego><newline46mondego><newline46mondego><newline46mondego>FileWriter fw = new FileWriter(temp);<newline46mondego>fw.write(<doubleQuotes46>#!/bin/bash\n<doubleQuotes46>);<newline46mondego>fw.write(<doubleQuotes46>sed -i '<doubleQuotes46>+lineIndex+<doubleQuotes46>s/<doubleQuotes46>+line+<doubleQuotes46>/<doubleQuotes46>+currentBid+<doubleQuotes46>/g' data/jsp/items.xml\n<doubleQuotes46>);<newline46mondego>fw.close();<newline46mondego>System.out.println(<doubleQuotes46>. <doubleQuotes46>+temp.getAbsolutePath());<newline46mondego>Runtime.getRuntime().exec(<doubleQuotes46>. <doubleQuotes46>+temp.getAbsolutePath());<newline46mondego>"
"6836splitHere46","20233011splitHere46","private final Random rand = new Random()"
"6837splitHere46","20233011splitHere46","mSplatGraphic"
"6838splitHere46","20233011splitHere46","rand"
"6839splitHere46","20233083splitHere46",":./.m2/repository/org/apache/mahout/mahout-core/0.6/"
"6840splitHere46","20233083splitHere46",":./.m2/repository/org/apache/mahout/mahout-core/0.6/mahout_core.0.6.jar<newline46mondego>"
"6841splitHere46","20233104splitHere46","this.grades = new ArrayList<Long>();<newline46mondego>"
"6842splitHere46","20233104splitHere46","List<Long>()"
"6843splitHere46","20233104splitHere46","ArrayList()"
"6844splitHere46","20233218splitHere46","SELECT Count(*) as numusers FROM users WHERE username = 'THEUSERNAME';<newline46mondego>"
"6845splitHere46","20233223splitHere46","<s:push>"
"6846splitHere46","20233223splitHere46","<s:property>"
"6847splitHere46","20233223splitHere46","<s:push value=<doubleQuotes46>#attr.scoredDocument<doubleQuotes46>><newline46mondego>    <display:column title=<doubleQuotes46>Study Code<doubleQuotes46> sortable=<doubleQuotes46>true<doubleQuotes46>><newline46mondego>        <s:property value=<doubleQuotes46>id<doubleQuotes46>/><newline46mondego>    </display:column><newline46mondego></s:push><newline46mondego>"
"6848splitHere46","20233223splitHere46","#attr"
"6849splitHere46","20233288splitHere46","lazy"
"6850splitHere46","20233288splitHere46","null"
"6851splitHere46","20233288splitHere46","null"
"6852splitHere46","20233288splitHere46","null"
"6853splitHere46","20233288splitHere46","null"
"6854splitHere46","20233288splitHere46","public Groups(){<newline46mondego>       users = null;<newline46mondego>  }<newline46mondego><newline46mondego><newline46mondego>   public retrieveAllUsers(){<newline46mondego><newline46mondego>        if (users == null) users = new ArrayList<User>;<newline46mondego><newline46mondego>         // this method uses it to keep the results of all users retrieved from database<newline46mondego>   }<newline46mondego><newline46mondego>   public retrieveOnlineUsers(){<newline46mondego><newline46mondego>      if (users == null) users = new ArrayList<User>;<newline46mondego><newline46mondego>      // this method uses it to keep the results of all online users retrieved from database<newline46mondego>   }<newline46mondego>"
"6855splitHere46","20233332splitHere46","Scanner#nextLine()"
"6856splitHere46","20233332splitHere46","Scanner"
"6857splitHere46","20233332splitHere46","public int[] readLine(Scanner fileReader) {<newline46mondego>    int[] array = new int[fileReader.nextInt()];<newline46mondego>    for (int i = 0; i < array.length; i++){<newline46mondego>        array[i] = fileReader.nextInt();<newline46mondego>    }<newline46mondego><newline46mondego>    return array;<newline46mondego><newline46mondego>}<newline46mondego>"
"6858splitHere46","20233343splitHere46","ArrayList<Book> booklib = new ArrayList<Book>();"
"6859splitHere46","20233343splitHere46","booklib.add(<doubleQuotes46>Book 1<doubleQuotes46>, 350);<newline46mondego>  booklib.add(<doubleQuotes46>Book 2<doubleQuotes46>, 72);<newline46mondego>"
"6860splitHere46","20233343splitHere46","booklib.add(new Book(<doubleQuotes46>Book 1<doubleQuotes46>, 350));<newline46mondego>  booklib.add(new Book(<doubleQuotes46>Book 2<doubleQuotes46>, 72));<newline46mondego>"
"6861splitHere46","20233343splitHere46","System.out.println(booklib.gettitle(3));<newline46mondego>"
"6862splitHere46","20233343splitHere46","System.out.println(booklib.get(0).gettitle());//Populate the first book's title<newline46mondego>"
"6863splitHere46","20233343splitHere46","for(int i=0; i<booklib.size; i++)<newline46mondego>    if(booklib[i] == 120)<newline46mondego>"
"6864splitHere46","20233343splitHere46","for(int i=0; i<booklib.size(); i++)<newline46mondego>    if(booklib.get(i).getpages() == 120)<newline46mondego>"
"6865splitHere46","20233366splitHere46","this"
"6866splitHere46","20233366splitHere46","this"
"6867splitHere46","20233366splitHere46","static"
"6868splitHere46","20233366splitHere46","hasAllUniqueChars"
"6869splitHere46","20233366splitHere46","static"
"6870splitHere46","20233366splitHere46","static boolean hasAllUniqueChars(String input)"
"6871splitHere46","20233366splitHere46","System.out.println(UniqueChars.hasAllUniqueChars(input));<newline46mondego>"
"6872splitHere46","20233366splitHere46","System.out.println(hasAllUniqueChars(input));<newline46mondego>"
"6873splitHere46","20233366splitHere46","UniqueChars uc = new UniqueChars();<newline46mondego>System.out.println(uc.hasAllUniqueChars(input));<newline46mondego>"
"6874splitHere46","20233402splitHere46","panel.setBackground(Color.YELLOW);<newline46mondego>"
"6875splitHere46","20233402splitHere46","public static final Color myColor = new Color(55,265,44);<newline46mondego>"
"6876splitHere46","20233402splitHere46","panel.setBackground(myColor);<newline46mondego>"
"6877splitHere46","20233676splitHere46","Process#getErrorStream()"
"6878splitHere46","20233676splitHere46","getOutputStream()"
"6879splitHere46","20233712splitHere46","encryptKey"
"6880splitHere46","20233712splitHere46","Crypto.encryptAES(<doubleQuotes46>password<doubleQuotes46>, <doubleQuotes46>yourapplicationsecret<doubleQuotes46>.substring(0, 16))<newline46mondego>"
"6881splitHere46","20233712splitHere46","play console"
"6882splitHere46","20233712splitHere46","play test:console"
"6883splitHere46","20233712splitHere46","import play.api.test._<newline46mondego>Helpers.running(FakeApplication()) { Crypto.encryptAES(<doubleQuotes46>password<doubleQuotes46>) }<newline46mondego>"
"6884splitHere46","20233867splitHere46","byte[] input;<newline46mondego>input = new byte [fis.available()];<newline46mondego>while(fis.read() != -1) {<newline46mondego>    test += new String (input);<newline46mondego>}<newline46mondego>testing = test;<newline46mondego>fis.close();<newline46mondego>"
"6885splitHere46","20233867splitHere46","available()"
"6886splitHere46","20233867splitHere46","InputStream fis = getResources().openRawResource(R.raw.checkit);<newline46mondego>try {<newline46mondego>    byte[] buffer = new byte[4096]; // 4K buffer<newline46mondego>    int len = 0;<newline46mondego>    while((len = fis.read(buffer)) != -1) {<newline46mondego>        test += new String (buffer, 0, len);<newline46mondego>    }<newline46mondego>    testing = test;<newline46mondego>} catch (IOException ioe) {<newline46mondego>    ioe.printStackTrace();<newline46mondego>    // make sure you do any other appropriate handling.<newline46mondego>} finally {<newline46mondego>    fis.close();<newline46mondego>}<newline46mondego>"
"6887splitHere46","20234020splitHere46","GET http://www.example.com/login HTTP/1.1<newline46mondego>"
"6888splitHere46","20234020splitHere46","GET /login HTTP/1.1<newline46mondego>"
"6889splitHere46","20234396splitHere46","setExtendedState(Frame.MAXIMIZED_BOTH);"
"6890splitHere46","20234396splitHere46","if (yourFrame.getExtendedState() != 6)<newline46mondego>    setExtendedState(Frame.MAXIMIZED_BOTH);<newline46mondego>else<newline46mondego>    setExtendedState(Frame.NORMAL);<newline46mondego>"
"6891splitHere46","20234465splitHere46","public static void main(String[] args) {<newline46mondego>    LocalDate birthdate = new LocalDate (1958, 1, 20);<newline46mondego>    LocalDate now = new LocalDate();<newline46mondego>    Years age = Years.yearsBetween(birthdate, now);<newline46mondego>    System.out.println(age.getYears());<newline46mondego>}<newline46mondego>"
"6892splitHere46","20234535splitHere46","private Handler handler = new Handler();<newline46mondego><newline46mondego><newline46mondego>private Runnable runnable = new Runnable() {<newline46mondego><newline46mondego> public void run() {<newline46mondego><newline46mondego>        Dt_textView.setText(//getting  the value from a class object);<newline46mondego>        As_textView.setText(<doubleQuotes46><doubleQuotes46>getting  the value from a class object);<newline46mondego><newline46mondego>  /*<newline46mondego>   * Now register it for running next time<newline46mondego>   */<newline46mondego><newline46mondego>  handler.postDelayed(this, 1000); // refresh every 1000 ms = 1 sec<newline46mondego> }<newline46mondego><newline46mondego><newline46mondego>};<newline46mondego>"
"6893splitHere46","20234538splitHere46","manager.build.getArtifacts()"
"6894splitHere46","20234538splitHere46","manager.build.getArtifactsDir()"
"6895splitHere46","20234540splitHere46","history.setText(<doubleQuotes46>Hide History<doubleQuotes46>);<newline46mondego>"
"6896splitHere46","20234540splitHere46","final"
"6897splitHere46","20234579splitHere46","@PostConstruct<newline46mondego><newline46mondego><newline46mondego>    public void init(){<newline46mondego>        ArryayList fruitList<string>=new ArryayList<String><newline46mondego>         String[] fruitArray = fruitobject.getFruitNames().split(<doubleQuotes46>;<doubleQuotes46>);<newline46mondego>         for (String fruit : fruitArray){<newline46mondego>            fruitList.add(fruit);<newline46mondego>    }<newline46mondego><newline46mondego>   }<newline46mondego>"
"6898splitHere46","20234579splitHere46","<ui:repeat value=<doubleQuotes46>#{backingbeanName. fruitLis}<doubleQuotes46> var=<doubleQuotes46>field<doubleQuotes46> ><newline46mondego>              <tr><newline46mondego>                      <td> <h:outputLabel value=<doubleQuotes46>Fruit Name<doubleQuotes46>/></td><newline46mondego><newline46mondego>                     <td>   <h:outputLabel  value=<doubleQuotes46>:<doubleQuotes46>></h:outputLabel> </td><newline46mondego><newline46mondego><newline46mondego><newline46mondego>               <td> <h:outputLabel value=<doubleQuotes46>#{field}<doubleQuotes46>/></td><newline46mondego><newline46mondego>               </tr><newline46mondego>            </ui:repeat><newline46mondego>"
"6899splitHere46","20234658splitHere46","int height = super.getHeight();<newline46mondego>super.setHeight(++height); <newline46mondego>"
"6900splitHere46","20234658splitHere46","int height = getHeight();<newline46mondego>setHeight(++height);<newline46mondego>"
"6901splitHere46","20234658splitHere46","public int getHeight() {<newline46mondego>    return height;<newline46mondego>    }<newline46mondego><newline46mondego>    public void setHeight(int height) {<newline46mondego>    this.height = height;<newline46mondego><newline46mondego>    }<newline46mondego>"
"6902splitHere46","20234714splitHere46","tmp.remove(Collections.singleton(null));<newline46mondego>for(ArrayList<MyProduct> list : tmp){         <newline46mondego>     lstStyle.addAll(list);<newline46mondego>}<newline46mondego>"
"6903splitHere46","20234868splitHere46","synchronized(this){<newline46mondego>            Singleton.setBuffer(Singleton.getBuffer()+1);<newline46mondego>            notify();<newline46mondego>    }<newline46mondego>"
"6904splitHere46","20234924splitHere46","System.out.println(<doubleQuotes46>What is the book name: <doubleQuotes46>);<newline46mondego>input.nextLine();<newline46mondego>products[i+4].setNameOfProduct(input.nextLine());<newline46mondego>"
"6905splitHere46","20235036splitHere46","int[] p = {R.drawable.image1, R.drawable.image2....}<newline46mondego>"
"6906splitHere46","20235036splitHere46","yourbutton.setBackgroundResource(p[0])  // or p[1]<newline46mondego>"
"6907splitHere46","20235047splitHere46","pstmt.setDate(1, Date);"
"6908splitHere46","20235047splitHere46","pstmt.setString(1, Date);"
"6909splitHere46","20235047splitHere46","Date d=new Date();<newline46mondego>java.sql.Date  d1=new java.sql.Date(d.getTime());<newline46mondego>String sql = <doubleQuotes46>INSERT INTO info (date) VALUES ( ? )<doubleQuotes46>;<newline46mondego><newline46mondego>try {<newline46mondego>      pstmt = con.prepareStatement(sql);<newline46mondego>       pstmt.setDate(1, d1); <newline46mondego>      pstmt.executeUpdate();<newline46mondego>     } catch (SQLException e) {<newline46mondego>            System.out.println(<doubleQuotes46>Error:<doubleQuotes46> + e);<newline46mondego>     }<newline46mondego>"
"6910splitHere46","20235146splitHere46","if-else"
"6911splitHere46","20235146splitHere46","int year = 2004;<newline46mondego>if (year % 4 == 0) {<newline46mondego>    System.out.println(<doubleQuotes46>2004 is a leap year<doubleQuotes46>);<newline46mondego>} else {<newline46mondego>    System.out.println(<doubleQuotes46>2004 is not a leap year<doubleQuotes46>);<newline46mondego>}<newline46mondego><newline46mondego>int year1 = 2013;<newline46mondego>if (year1 % 4 == 0) {<newline46mondego>    System.out.println(<doubleQuotes46>2013 is a leap year<doubleQuotes46>);<newline46mondego>} else {<newline46mondego>    System.out.println(<doubleQuotes46>2013 is not a leap year<doubleQuotes46>);<newline46mondego>}<newline46mondego>"
"6912splitHere46","20235146splitHere46","public static void main(String[] args) {<newline46mondego><newline46mondego>    int year = 2004;<newline46mondego>    checkLeapYear(year);<newline46mondego><newline46mondego>    int year1 = 2013;<newline46mondego>    checkLeapYear(year1);<newline46mondego>}<newline46mondego><newline46mondego>private static void checkLeapYear(int year) {<newline46mondego>    if (year % 4 == 0) {<newline46mondego>        System.out.println(year + <doubleQuotes46> is a leap year<doubleQuotes46>);<newline46mondego>    } else {<newline46mondego>        System.out.println(year + <doubleQuotes46> is not a leap year<doubleQuotes46>);<newline46mondego>    }<newline46mondego>}<newline46mondego>"
"6913splitHere46","20235178splitHere46","String output= String.format(<doubleQuotes46>%<doubleQuotes46>+numberOfZerosToPut+<doubleQuotes46>s<doubleQuotes46>,<newline46mondego>                  Integer.toBinaryString(3)).replace(' ', '0');<newline46mondego><newline46mondego>System.out.println(output);<newline46mondego>"
"6914splitHere46","20235180splitHere46","if(check(edittext.getText.toString())){<newline46mondego>//do somethingif true<newline46mondego>}else{<newline46mondego>//else<newline46mondego>}<newline46mondego><newline46mondego>public boolean check(String text){<newline46mondego>for(String s: text){<newline46mondego>if(s.equalsIngoreCase(text)){<newline46mondego>return true;<newline46mondego>  }<newline46mondego>}<newline46mondego>return false;<newline46mondego>}<newline46mondego>"
"6915splitHere46","20235230splitHere46","JMeter"
"6916splitHere46","20235230splitHere46","Reference Name: MYWORD<newline46mondego>Regular Expression: Server\.init\(<doubleQuotes46>[^<doubleQuotes46>]+<doubleQuotes46>, <doubleQuotes46>[^<doubleQuotes46>]+<doubleQuotes46>, <doubleQuotes46>([^<doubleQuotes46>]+)<doubleQuotes46>\);<newline46mondego>Template: $1$<newline46mondego>"
"6917splitHere46","20235230splitHere46","${MYWORD}"
"6918splitHere46","20235230splitHere46","Match No:"
"6919splitHere46","20235300splitHere46","grid"
"6920splitHere46","20235300splitHere46","NullPointerException"
"6921splitHere46","20235300splitHere46","public void initiateGrid(){ <newline46mondego>    grid = new ArrayDeque<ArrayDeque<Integer>>();<newline46mondego>    //...<newline46mondego> }<newline46mondego>"
"6922splitHere46","20235303splitHere46","synchronizer"
"6923splitHere46","20235303splitHere46","clonedEx"
"6924splitHere46","20235303splitHere46","Exception ex = getReturnedException();<newline46mondego>try {<newline46mondego>    if (ex == null) {  //Did you mean equals null here?<newline46mondego>        List<Map<String, Object>> tempResult = new ArrayList<>(result);        <newline46mondego>        return tempResult;<newline46mondego>    } else {<newline46mondego>        throw ex;<newline46mondego>    }<newline46mondego>} finally {<newline46mondego>    synchronizer.release();<newline46mondego>}<newline46mondego>"
"6925splitHere46","20235391splitHere46","public List<String> getAllLabels(){<newline46mondego>        List<String> labels = new ArrayList<String>();<newline46mondego><newline46mondego>        // Select All Query<newline46mondego>        String selectQuery = <doubleQuotes46> SELECT <doubleQuotes46> + KEY_PRODUCTS_NAME + <doubleQuotes46> FROM <doubleQuotes46>+ TABLE_DEFINE_PRODUCT_NAME;<newline46mondego><newline46mondego>        SQLiteDatabase db = this.getReadableDatabase();<newline46mondego>        Cursor cursor = db.rawQuery(selectQuery, null);<newline46mondego><newline46mondego>        // looping through all rows and adding to list<newline46mondego>        if (cursor.moveToFirst()) {<newline46mondego>            do {<newline46mondego>                labels.add(cursor.getString(0));<newline46mondego>            } while (cursor.moveToNext());<newline46mondego>        }<newline46mondego><newline46mondego>        // closing connection<newline46mondego>        cursor.close();<newline46mondego>        db.close();<newline46mondego><newline46mondego>        // returning lables<newline46mondego>        return labels;<newline46mondego>    }<newline46mondego>"
"6926splitHere46","20235499splitHere46","return inflater.inflate(R.layout.fragment_messages, null);<newline46mondego>"
"6927splitHere46","20235523splitHere46","URLConnection"
"6928splitHere46","20235523splitHere46","try {<newline46mondego>                URL url = new URL(<doubleQuotes46>http://youserver.com<doubleQuotes46>);<newline46mondego>                URLConnection urlConnection = url.openConnection();<newline46mondego>                urlConnection.setConnectTimeout(2000); //Connection timeout<newline46mondego>                urlConnection.connect();<newline46mondego>                System.out.println(<doubleQuotes46>Server is up and running<doubleQuotes46>);<newline46mondego>            } catch (Exception e) {<newline46mondego>                System.out.println(<doubleQuotes46>Server is not yet up<doubleQuotes46>);<newline46mondego>            }<newline46mondego>"
"6929splitHere46","20235523splitHere46","urlConnection.connect()"
"6930splitHere46","20235709splitHere46","SimpleDateFormat"
"6931splitHere46","20235709splitHere46","Date d = new SimpleDateFormat(<doubleQuotes46>dd/MM/yyyy<doubleQuotes46>).parse(DateStr); // This throws a ParseException<newline46mondego><newline46mondego>// Rest everything stays pretty much the same<newline46mondego>java.sql.Date d1 = new java.sql.Date(d.getTime());<newline46mondego>...<newline46mondego>"
"6932splitHere46","20235801splitHere46","JSONArray"
"6933splitHere46","20235801splitHere46","org.json"
"6934splitHere46","20235801splitHere46","javascript"
"6935splitHere46","20235940splitHere46","JDEV_USER_HOME"
"6936splitHere46","20235940splitHere46","D:\JDEV_USER_HOME"
"6937splitHere46","20235940splitHere46","D:\JDEV_USER_HOME"
"6938splitHere46","20235940splitHere46","AppData"
"6939splitHere46","20235993splitHere46","public List<Item> processFile(<newline46mondego>    String fileName,<newline46mondego>    Function<String, BufferedReader> toReader,<newline46mondego>    Function<BufferedReader, List<String>> toStringList,<newline46mondego>    Function<List<String>, List<Item>> toItemList)<newline46mondego>{<newline46mondego>    List<String> lines = null;<newline46mondego>    try (BufferedReader br = toReader.apply(fileName)) {<newline46mondego>        lines = toStringList.apply(br);<newline46mondego>    } catch (IOException ioe) { /* ... */ }<newline46mondego><newline46mondego>    return toItemList.apply(lines);<newline46mondego>}<newline46mondego>"
"6940splitHere46","20235993splitHere46","IOExceptions"
"6941splitHere46","20235993splitHere46","Function"
"6942splitHere46","20235993splitHere46","void processAnActualFile() {<newline46mondego>    List<Item> items = processFile(<newline46mondego>        <doubleQuotes46>file.csv<doubleQuotes46>,<newline46mondego>        fname -> new BufferedReader(new FileReader(fname)),<newline46mondego>                // ERROR: uncaught IOException<newline46mondego>        br -> {<newline46mondego>            List<String> result = new ArrayList<>();<newline46mondego>            String line;<newline46mondego>            while ((line = br.readLine()) != null) {<newline46mondego>                result.add(line);<newline46mondego>            }<newline46mondego>            return result;<newline46mondego>        },      // ERROR: uncaught IOException<newline46mondego>        stringList -> {<newline46mondego>            List<Item> result = new ArrayList<>();<newline46mondego>            for (String line : stringList) {<newline46mondego>                result.add(new Item(line));<newline46mondego>            }<newline46mondego>            return result;<newline46mondego>        });<newline46mondego>}<newline46mondego>"
"6943splitHere46","20235993splitHere46","InputStream"
"6944splitHere46","20235993splitHere46","Reader"
"6945splitHere46","20235993splitHere46","BufferedReader"
"6946splitHere46","20235993splitHere46","Files.readAllLines"
"6947splitHere46","20235993splitHere46","List<String>"
"6948splitHere46","20235993splitHere46","List<Item>"
"6949splitHere46","20235993splitHere46","String"
"6950splitHere46","20235993splitHere46","Item"
"6951splitHere46","20235993splitHere46","class Item {<newline46mondego>    static Item fromString(String s) {<newline46mondego>        // do a little bit of magic<newline46mondego>    }<newline46mondego>}<newline46mondego>"
"6952splitHere46","20235993splitHere46","public List<Item> processFile(String fileName) {<newline46mondego>    try (Stream<String> lines = Files.lines(Paths.get(fileName))) {<newline46mondego>        return lines.map(Item::fromString)<newline46mondego>                    .collect(Collectors.toList());<newline46mondego>    } catch (IOException ioe) {<newline46mondego>        ioe.printStackTrace();<newline46mondego>        return Collections.emptyList();<newline46mondego>    }<newline46mondego>}<newline46mondego>"
"6953splitHere46","20235993splitHere46","IOException"
"6954splitHere46","20235993splitHere46","void testItemCreation() {<newline46mondego>    List<Item> result =<newline46mondego>        Arrays.asList(<doubleQuotes46>first<doubleQuotes46>, <doubleQuotes46>second<doubleQuotes46>, <doubleQuotes46>third<doubleQuotes46>)<newline46mondego>              .stream()<newline46mondego>              .map(Item::fromString)<newline46mondego>              .collect(Collectors.toList());<newline46mondego>    // make assertions over result<newline46mondego>}<newline46mondego>"
"6955splitHere46","20235993splitHere46","Item"
"6956splitHere46","20235994splitHere46","@QueryParam(<doubleQuotes46>id<doubleQuotes46>)"
"6957splitHere46","20235994splitHere46","String id"
"6958splitHere46","20235994splitHere46","feed"
"6959splitHere46","20235994splitHere46","@GET<newline46mondego>    @Path(<doubleQuotes46>/GetFeeds<doubleQuotes46>)<newline46mondego>    @Produces(<doubleQuotes46>application/json<doubleQuotes46>)<newline46mondego>    public String feed(@QueryParam(<doubleQuotes46>id<doubleQuotes46>) String id) {<newline46mondego>        String feeds = null;<newline46mondego>        try {<newline46mondego>            ArrayList<FeedObjects> feedData = null;<newline46mondego>            ProjectManager projectManager = new ProjectManager();<newline46mondego>            // Modify the GetFeeds method by sending the value of id<newline46mondego>            // and prepare feed data based on id<newline46mondego>            feedData = projectManager.GetFeeds(id);<newline46mondego>            Gson gson = new Gson();<newline46mondego>            // create the json data for the feed data of the corresponding id value<newline46mondego>            feeds = gson.toJson(feedData);<newline46mondego><newline46mondego>        } catch (Exception e) {<newline46mondego>            System.out.println(<doubleQuotes46>error<doubleQuotes46>);<newline46mondego>        }<newline46mondego>        return feeds;<newline46mondego><newline46mondego>   }<newline46mondego>"
"6960splitHere46","20235994splitHere46","SELECT id,title,description,url FROM website where id = 'ID_VALUE_IN_QUERY_PARAM'<newline46mondego>"
"6961splitHere46","20236069splitHere46","class Check<newline46mondego>{<newline46mondego>static String s[] = { <doubleQuotes46>q<doubleQuotes46>,<doubleQuotes46>w<doubleQuotes46>,<doubleQuotes46>e<doubleQuotes46>,<doubleQuotes46>r<doubleQuotes46>,<doubleQuotes46>t<doubleQuotes46>,<doubleQuotes46>y<doubleQuotes46>,<doubleQuotes46>u<doubleQuotes46>,<doubleQuotes46>i<doubleQuotes46>,<doubleQuotes46>o<doubleQuotes46>,<doubleQuotes46>p<doubleQuotes46>,<doubleQuotes46>a<doubleQuotes46>,<newline46mondego>               <doubleQuotes46>mmmmm<doubleQuotes46>,<doubleQuotes46>d<doubleQuotes46>,<doubleQuotes46>f<doubleQuotes46>,<doubleQuotes46>g<doubleQuotes46>,<doubleQuotes46>h<doubleQuotes46>,<doubleQuotes46>j<doubleQuotes46>,<doubleQuotes46>k<doubleQuotes46>,<doubleQuotes46>l<doubleQuotes46>,<doubleQuotes46>z<doubleQuotes46>,<doubleQuotes46>x<doubleQuotes46>,<doubleQuotes46>c<doubleQuotes46>,<doubleQuotes46>v<doubleQuotes46> };<newline46mondego><newline46mondego>static String s1[] = {<doubleQuotes46>b<doubleQuotes46>,<doubleQuotes46>n<doubleQuotes46>,<doubleQuotes46>m<doubleQuotes46>,<doubleQuotes46>er<doubleQuotes46>,<doubleQuotes46>re<doubleQuotes46>,<doubleQuotes46>ew<doubleQuotes46>,<doubleQuotes46>j<doubleQuotes46>,<doubleQuotes46>k<doubleQuotes46>,<doubleQuotes46>x<doubleQuotes46>,<doubleQuotes46>qq<doubleQuotes46>,<doubleQuotes46>ww<doubleQuotes46>,<doubleQuotes46>ee<doubleQuotes46>,<doubleQuotes46>c<doubleQuotes46>,<doubleQuotes46>v<doubleQuotes46>,<doubleQuotes46>t<doubleQuotes46>,<doubleQuotes46>y<doubleQuotes46>,<doubleQuotes46>d<doubleQuotes46>,<doubleQuotes46>f<doubleQuotes46>,<doubleQuotes46>g<doubleQuotes46>,<doubleQuotes46>h<doubleQuotes46>,<newline46mondego>               <doubleQuotes46>u<doubleQuotes46>,<doubleQuotes46>rr<doubleQuotes46>,<doubleQuotes46>yyy<doubleQuotes46>,<doubleQuotes46>uuu<doubleQuotes46>,<doubleQuotes46>ttt<doubleQuotes46>,<doubleQuotes46>trew<doubleQuotes46>,<doubleQuotes46>rerer<doubleQuotes46>,<doubleQuotes46>q<doubleQuotes46>,<doubleQuotes46>w<doubleQuotes46>,<doubleQuotes46>vv<doubleQuotes46>,<doubleQuotes46>gg<doubleQuotes46>,<doubleQuotes46>hh<doubleQuotes46>,<doubleQuotes46>tt<doubleQuotes46>,<doubleQuotes46>tr<doubleQuotes46>,<doubleQuotes46>ww<doubleQuotes46>,<doubleQuotes46>e<doubleQuotes46>,<doubleQuotes46>i<doubleQuotes46><newline46mondego>               ,<doubleQuotes46>eww<doubleQuotes46>,<doubleQuotes46>qwe<doubleQuotes46>,<doubleQuotes46>wer<doubleQuotes46>,<doubleQuotes46>o<doubleQuotes46>,<doubleQuotes46>p<doubleQuotes46>,<doubleQuotes46>a<doubleQuotes46>,<doubleQuotes46>s<doubleQuotes46>,<doubleQuotes46>ds<doubleQuotes46>,<doubleQuotes46>cv<doubleQuotes46>,<doubleQuotes46>r<doubleQuotes46>,<doubleQuotes46>l<doubleQuotes46>,<doubleQuotes46>z<doubleQuotes46>};<newline46mondego><newline46mondego>public static void main(String arags[])<newline46mondego>{<newline46mondego>   Set<String> originalset = new HashSet<String>(Arrays.asList(s1));<newline46mondego>   Set<String> testset = new HashSet<String>(Arrays.asList(s));        <newline46mondego>   originalset.retainAll(testset);<newline46mondego>    if(originalset.size()==23)<newline46mondego>    {<newline46mondego>        System.out.println(<doubleQuotes46>Sucess 23 matches found<doubleQuotes46>);<newline46mondego>    }<newline46mondego>    else<newline46mondego>    {<newline46mondego>          System.out.println(<doubleQuotes46>Fail 23 matches not found<doubleQuotes46>);<newline46mondego>    }<newline46mondego><newline46mondego>}<newline46mondego>}<newline46mondego>"
"6962splitHere46","20236154splitHere46","import java.awt.BorderLayout;<newline46mondego>import java.awt.Dimension;<newline46mondego>import java.awt.EventQueue;<newline46mondego>import java.awt.Graphics;<newline46mondego>import java.awt.Graphics2D;<newline46mondego>import java.awt.Point;<newline46mondego>import java.awt.event.ComponentAdapter;<newline46mondego>import java.awt.event.ComponentEvent;<newline46mondego>import java.io.BufferedReader;<newline46mondego>import java.io.File;<newline46mondego>import java.io.FileReader;<newline46mondego>import javax.swing.JButton;<newline46mondego>import javax.swing.JFrame;<newline46mondego>import javax.swing.JPanel;<newline46mondego>import javax.swing.JScrollPane;<newline46mondego>import javax.swing.JTextArea;<newline46mondego>import javax.swing.SwingUtilities;<newline46mondego>import javax.swing.UIManager;<newline46mondego>import javax.swing.UnsupportedLookAndFeelException;<newline46mondego><newline46mondego>public class OverlayButton {<newline46mondego><newline46mondego>    public static void main(String[] args) {<newline46mondego>        new OverlayButton();<newline46mondego>    }<newline46mondego><newline46mondego>    public OverlayButton() {<newline46mondego>        EventQueue.invokeLater(new Runnable() {<newline46mondego>            @Override<newline46mondego>            public void run() {<newline46mondego>                try {<newline46mondego>                    UIManager.setLookAndFeel(UIManager.getSystemLookAndFeelClassName());<newline46mondego>                } catch (ClassNotFoundException | InstantiationException | IllegalAccessException | UnsupportedLookAndFeelException ex) {<newline46mondego>                    ex.printStackTrace();<newline46mondego>                }<newline46mondego><newline46mondego>                JFrame frame = new JFrame(<doubleQuotes46>Testing<doubleQuotes46>);<newline46mondego>                frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);<newline46mondego>                frame.add(new TestPane());<newline46mondego>                frame.pack();<newline46mondego>                frame.setLocationRelativeTo(null);<newline46mondego>                frame.setVisible(true);<newline46mondego>            }<newline46mondego>        });<newline46mondego>    }<newline46mondego><newline46mondego>    public class TestPane extends JPanel {<newline46mondego><newline46mondego>        private JScrollPane sp;<newline46mondego>        private JButton btn;<newline46mondego>        private JTextArea ta;<newline46mondego><newline46mondego>        private JPanel glassPane;<newline46mondego><newline46mondego>        public TestPane() {<newline46mondego>            setLayout(new BorderLayout());<newline46mondego>            btn = new JButton(<doubleQuotes46>Print<doubleQuotes46>);<newline46mondego>            ta = new JTextArea(10, 20);<newline46mondego><newline46mondego>            BufferedReader br = null;<newline46mondego>            try {<newline46mondego>                br = new BufferedReader(new FileReader(new File(<doubleQuotes46>Script.txt<doubleQuotes46>)));<newline46mondego>                String text = null;<newline46mondego>                while ((text = br.readLine()) != null) {<newline46mondego>                    ta.append(text + <doubleQuotes46>\n<doubleQuotes46>);<newline46mondego>                }<newline46mondego>            } catch (Exception e) {<newline46mondego>                e.printStackTrace();<newline46mondego>            } finally {<newline46mondego>                try {<newline46mondego>                    br.close();<newline46mondego>                } catch (Exception e) {<newline46mondego>                }<newline46mondego>            }<newline46mondego><newline46mondego>            ta.setCaretPosition(0);<newline46mondego>            sp = new JScrollPane(ta);<newline46mondego>            glassPane = new JPanel() {<newline46mondego><newline46mondego>                @Override<newline46mondego>                public void doLayout() {<newline46mondego>                    Point p = sp.getLocation();<newline46mondego>                    Dimension dim = sp.getSize();<newline46mondego>                    p = SwingUtilities.convertPoint(sp, p, this);<newline46mondego><newline46mondego>                    btn.setSize(btn.getPreferredSize());<newline46mondego>                    int barWidth = sp.getVerticalScrollBar().getWidth();<newline46mondego>                    int barHeight = sp.getHorizontalScrollBar().getHeight();<newline46mondego>                    int x = p.x + (dim.width - btn.getWidth()) - barWidth;<newline46mondego>                    int y = p.y + (dim.height - btn.getHeight()) - barHeight;<newline46mondego>                    btn.setLocation(x, y);<newline46mondego>                }<newline46mondego><newline46mondego>            };<newline46mondego>            glassPane.setOpaque(false);<newline46mondego>            glassPane.add(btn);<newline46mondego>            glassPane.addComponentListener(new ComponentAdapter() {<newline46mondego><newline46mondego>                @Override<newline46mondego>                public void componentResized(ComponentEvent e) {<newline46mondego>                    e.getComponent().doLayout();<newline46mondego>                }<newline46mondego><newline46mondego>            });<newline46mondego>            add(sp);<newline46mondego>        }<newline46mondego><newline46mondego>        @Override<newline46mondego>        public void addNotify() {<newline46mondego>            super.addNotify();<newline46mondego>            SwingUtilities.getRootPane(this).setGlassPane(glassPane);<newline46mondego>            glassPane.setVisible(true);<newline46mondego>            glassPane.revalidate();<newline46mondego>        }<newline46mondego><newline46mondego>        @Override<newline46mondego>        public Dimension getPreferredSize() {<newline46mondego>            return new Dimension(200, 200);<newline46mondego>        }<newline46mondego><newline46mondego>        protected void paintComponent(Graphics g) {<newline46mondego>            super.paintComponent(g);<newline46mondego>            Graphics2D g2d = (Graphics2D) g.create();<newline46mondego>            g2d.dispose();<newline46mondego>        }<newline46mondego><newline46mondego>    }<newline46mondego><newline46mondego>}<newline46mondego>"
"6963splitHere46","20236189splitHere46","package com.example.listviewwithselectallcheckbxox;<newline46mondego><newline46mondego>//import it.sephiroth.android.library.widget.AdapterView;<newline46mondego>//import it.sephiroth.android.library.widget.AdapterView.OnItemClickListener;<newline46mondego>//import it.sephiroth.android.library.widget.HListView;<newline46mondego><newline46mondego>import java.util.ArrayList;<newline46mondego>import java.util.Collections;<newline46mondego>import java.util.LinkedList;<newline46mondego>import java.util.List;<newline46mondego><newline46mondego>import android.app.Activity;<newline46mondego>import android.content.Context;<newline46mondego>import android.graphics.Bitmap;<newline46mondego>import android.os.Bundle;<newline46mondego>import android.util.Log;<newline46mondego>import android.view.LayoutInflater;<newline46mondego>import android.view.View;<newline46mondego>import android.view.ViewGroup;<newline46mondego>import android.widget.AdapterView;<newline46mondego>import android.widget.AdapterView.OnItemClickListener;<newline46mondego>import android.widget.ArrayAdapter;<newline46mondego>import android.widget.CheckBox;<newline46mondego>import android.widget.CompoundButton;<newline46mondego>import android.widget.CompoundButton.OnCheckedChangeListener;<newline46mondego>import android.widget.ImageView;<newline46mondego>import android.widget.ListView;<newline46mondego>import android.widget.Toast;<newline46mondego><newline46mondego>import com.nostra13.universalimageloader.core.DisplayImageOptions;<newline46mondego>import com.nostra13.universalimageloader.core.ImageLoader;<newline46mondego>import com.nostra13.universalimageloader.core.ImageLoaderConfiguration;<newline46mondego>import com.nostra13.universalimageloader.core.assist.ImageLoadingListener;<newline46mondego>import com.nostra13.universalimageloader.core.assist.SimpleImageLoadingListener;<newline46mondego>import com.nostra13.universalimageloader.core.display.FadeInBitmapDisplayer;<newline46mondego>import com.nostra13.universalimageloader.core.display.RoundedBitmapDisplayer;<newline46mondego><newline46mondego>public class MainActivity extends Activity{<newline46mondego>    DisplayImageOptions options;<newline46mondego>    ArrayList<Integer> checkedPositions = new ArrayList<Integer>();<newline46mondego>    boolean flag = false;<newline46mondego>    CheckBox selectAll;<newline46mondego>    private static final String LOG_TAG = <doubleQuotes46>MainActivity<doubleQuotes46>;<newline46mondego>    ListView listView;<newline46mondego>    TestAdapter mAdapter;<newline46mondego>    List<RowItem> rowItems;<newline46mondego>    public static final String[] url = {<doubleQuotes46>https://lh6.googleusercontent.com/-55osAWw3x0Q/URquUtcFr5I/AAAAAAAAAbs/rWlj1RUKrYI/s1024/A%252520Photographer.jpg<doubleQuotes46>,<newline46mondego>        <doubleQuotes46>https://lh4.googleusercontent.com/--dq8niRp7W4/URquVgmXvgI/AAAAAAAAAbs/-gnuLQfNnBA/s1024/A%252520Song%252520of%252520Ice%252520and%252520Fire.jpg<doubleQuotes46>,<newline46mondego>        <doubleQuotes46>https://lh5.googleusercontent.com/-7qZeDtRKFKc/URquWZT1gOI/AAAAAAAAAbs/hqWgteyNXsg/s1024/Another%252520Rockaway%252520Sunset.jpg<doubleQuotes46>,<newline46mondego>        <doubleQuotes46>https://lh3.googleusercontent.com/--L0Km39l5J8/URquXHGcdNI/AAAAAAAAAbs/3ZrSJNrSomQ/s1024/Antelope%252520Butte.jpg<doubleQuotes46>,<newline46mondego>        <doubleQuotes46>https://lh6.googleusercontent.com/-8HO-4vIFnlw/URquZnsFgtI/AAAAAAAAAbs/WT8jViTF7vw/s1024/Antelope%252520Hallway.jpg<doubleQuotes46>,<newline46mondego>        <doubleQuotes46>https://lh4.googleusercontent.com/-WIuWgVcU3Qw/URqubRVcj4I/AAAAAAAAAbs/YvbwgGjwdIQ/s1024/Antelope%252520Walls.jpg<doubleQuotes46>,<newline46mondego>        <doubleQuotes46>https://lh6.googleusercontent.com/-UBmLbPELvoQ/URqucCdv0kI/AAAAAAAAAbs/IdNhr2VQoQs/s1024/Apre%2525CC%252580s%252520la%252520Pluie.jpg<doubleQuotes46>,<newline46mondego>        <doubleQuotes46>https://lh3.googleusercontent.com/-s-AFpvgSeew/URquc6dF-JI/AAAAAAAAAbs/Mt3xNGRUd68/s1024/Backlit%252520Cloud.jpg<doubleQuotes46>,<newline46mondego>        <doubleQuotes46>https://lh5.googleusercontent.com/-bvmif9a9YOQ/URquea3heHI/AAAAAAAAAbs/rcr6wyeQtAo/s1024/Bee%252520and%252520Flower.jpg<doubleQuotes46>,<newline46mondego>        <doubleQuotes46>https://lh5.googleusercontent.com/-n7mdm7I7FGs/URqueT_BT-I/AAAAAAAAAbs/9MYmXlmpSAo/s1024/Bonzai%252520Rock%252520Sunset.jpg<doubleQuotes46>,<newline46mondego>        <doubleQuotes46>https://lh6.googleusercontent.com/-4CN4X4t0M1k/URqufPozWzI/AAAAAAAAAbs/8wK41lg1KPs/s1024/Caterpillar.jpg<doubleQuotes46>,<newline46mondego>    <doubleQuotes46>https://lh3.googleusercontent.com/-rrFnVC8xQEg/URqufdrLBaI/AAAAAAAAAbs/s69WYy_fl1E/s1024/Chess.jpg<doubleQuotes46>};<newline46mondego><newline46mondego>    @Override<newline46mondego>    protected void onCreate( Bundle savedInstanceState ) {<newline46mondego>        super.onCreate( savedInstanceState );<newline46mondego>        setContentView( R.layout.activity_main );<newline46mondego><newline46mondego>        ImageLoaderConfiguration config = new ImageLoaderConfiguration.Builder(getApplicationContext())<newline46mondego>        .build();<newline46mondego>        ImageLoader.getInstance().init(config);<newline46mondego><newline46mondego>        listView = (ListView) findViewById( R.id.hListView1 );<newline46mondego>        selectAll = (CheckBox) findViewById(R.id.selectall);<newline46mondego>        rowItems = new ArrayList<RowItem>();<newline46mondego>        options = new DisplayImageOptions.Builder()<newline46mondego>        .showImageOnLoading(R.drawable.ic_stub)<newline46mondego>        .showImageForEmptyUri(R.drawable.ic_empty)<newline46mondego>        .showImageOnFail(R.drawable.ic_error)<newline46mondego>        .cacheInMemory(true)<newline46mondego>        .displayer(new RoundedBitmapDisplayer(0))<newline46mondego>        .cacheOnDisc(true)<newline46mondego>        .build();<newline46mondego><newline46mondego><newline46mondego>        for (int i = 0; i < url.length; i++) {<newline46mondego>            RowItem item = new RowItem(url[i]);<newline46mondego>            rowItems.add(item);<newline46mondego>        }<newline46mondego>        mAdapter = new TestAdapter(this,R.layout.list_item, rowItems);<newline46mondego>        listView.setHeaderDividersEnabled( true );<newline46mondego>        listView.setFooterDividersEnabled( true );<newline46mondego>        listView.setAdapter( mAdapter );<newline46mondego><newline46mondego>        selectAll.setOnCheckedChangeListener(new OnCheckedChangeListener() {<newline46mondego><newline46mondego>            @Override<newline46mondego>            public void onCheckedChanged(CompoundButton buttonView, boolean isChecked) {<newline46mondego>                // TODO Auto-generated method stub<newline46mondego>                flag = !flag;<newline46mondego>                mAdapter.notifyDataSetChanged();<newline46mondego>            }<newline46mondego>        });<newline46mondego>        listView.setOnItemClickListener(new OnItemClickListener() {<newline46mondego>            @Override<newline46mondego>            public void onItemClick(AdapterView<?> arg0, View view, int position,<newline46mondego>                    long arg3) {<newline46mondego>                Toast.makeText(getApplicationContext(), position+<doubleQuotes46><doubleQuotes46>, Toast.LENGTH_SHORT).show();<newline46mondego>                CheckBox check = (CheckBox)view.findViewById(R.id.radio);<newline46mondego>                final Integer index = Integer.valueOf(position);<newline46mondego><newline46mondego>                if(!checkedPositions.contains(index))<newline46mondego>                    checkedPositions.add(index);<newline46mondego>                else<newline46mondego>                    checkedPositions.remove(index);<newline46mondego><newline46mondego>                check.setChecked(checkedPositions.contains(index));             <newline46mondego>            }<newline46mondego>        });<newline46mondego><newline46mondego>        Log.i( LOG_TAG, <doubleQuotes46>choice mode: <doubleQuotes46> + listView.getChoiceMode() );<newline46mondego>    }<newline46mondego><newline46mondego><newline46mondego><newline46mondego>    public class TestAdapter extends ArrayAdapter<RowItem> {<newline46mondego><newline46mondego>        private ImageLoadingListener animateFirstListener = new AnimateFirstDisplayListener();<newline46mondego>        Context context;<newline46mondego>        protected ImageLoader imageLoader = ImageLoader.getInstance();<newline46mondego><newline46mondego>        public TestAdapter(Context context, int resourceId,<newline46mondego>                List<RowItem> items) {<newline46mondego>            super(context, resourceId, items);<newline46mondego>            this.context = context;<newline46mondego>        }<newline46mondego><newline46mondego>        /*private view holder class*/<newline46mondego>        private class ViewHolder {<newline46mondego>            ImageView imageView;<newline46mondego>            CheckBox radio1;<newline46mondego>        }<newline46mondego><newline46mondego>        @Override<newline46mondego>        public int getViewTypeCount() {<newline46mondego>            return 3;<newline46mondego>        }<newline46mondego><newline46mondego>        @Override<newline46mondego>        public int getItemViewType( int position ) {<newline46mondego>            return position%3;<newline46mondego>        }<newline46mondego>        ViewHolder holder=null;<newline46mondego>        @Override<newline46mondego>        public View getView(final int position, View convertView, ViewGroup parent ) {<newline46mondego>            RowItem rowItem = getItem(position);<newline46mondego>            holder = new ViewHolder();<newline46mondego>            final int i = position;<newline46mondego>            if (convertView == null) {<newline46mondego><newline46mondego>                LayoutInflater mInflater = (LayoutInflater) context.getSystemService(Activity.LAYOUT_INFLATER_SERVICE);<newline46mondego>                convertView = mInflater.inflate(R.layout.list_item, null);<newline46mondego>                holder.imageView = (ImageView) convertView.findViewById(R.id.icon);<newline46mondego>                holder.radio1 = (CheckBox) convertView.findViewById(R.id.radio);<newline46mondego>                convertView.setTag(holder);<newline46mondego>            } <newline46mondego>            else{<newline46mondego>                holder = (ViewHolder) convertView.getTag();<newline46mondego>            }<newline46mondego><newline46mondego>            holder.radio1.setChecked(flag);<newline46mondego>            if(flag){<newline46mondego>                if(!checkedPositions.contains(position))<newline46mondego>                    checkedPositions.add(position);<newline46mondego>            }<newline46mondego>            else<newline46mondego>            {<newline46mondego>                checkedPositions.clear();<newline46mondego>            }<newline46mondego>            final Integer index = Integer.valueOf(position);<newline46mondego><newline46mondego>            holder.radio1.setOnCheckedChangeListener(new OnCheckedChangeListener() {<newline46mondego><newline46mondego>                @Override<newline46mondego>                public void onCheckedChanged(CompoundButton arg0, boolean isChecked) {<newline46mondego>                    if(isChecked){<newline46mondego>                        if(!checkedPositions.contains(index))<newline46mondego>                            checkedPositions.add(index);<newline46mondego>                    }<newline46mondego>                    else<newline46mondego>                        checkedPositions.remove(index);<newline46mondego><newline46mondego><newline46mondego>                }<newline46mondego>            });<newline46mondego><newline46mondego>            imageLoader.displayImage(rowItem.getimageUrl(), holder.imageView, options, animateFirstListener);<newline46mondego>            holder.radio1.setChecked(checkedPositions.contains(index));<newline46mondego>            return convertView;<newline46mondego>        }<newline46mondego>    }<newline46mondego>    private static class AnimateFirstDisplayListener extends SimpleImageLoadingListener {<newline46mondego><newline46mondego>        static final List<String> displayedImages = Collections.synchronizedList(new LinkedList<String>());<newline46mondego><newline46mondego>        @Override<newline46mondego>        public void onLoadingComplete(String imageUri, View view, Bitmap loadedImage) {<newline46mondego>            if (loadedImage != null) {<newline46mondego>                ImageView imageView = (ImageView) view;<newline46mondego>                boolean firstDisplay = !displayedImages.contains(imageUri);<newline46mondego>                if (firstDisplay) {<newline46mondego>                    FadeInBitmapDisplayer.animate(imageView, 5000);<newline46mondego>                    displayedImages.add(imageUri);<newline46mondego>                }<newline46mondego>            }<newline46mondego>        }<newline46mondego>    }<newline46mondego>}<newline46mondego>"
"6964splitHere46","20236189splitHere46","package it.sephiroth.listviewwithselectallcheckbxox;<newline46mondego>public class RowItem {<newline46mondego>    private int imageId;<newline46mondego>    private String imageUrl;<newline46mondego><newline46mondego>    public RowItem(int imageId) {<newline46mondego>        this.imageId = imageId;<newline46mondego>    }<newline46mondego><newline46mondego>    public RowItem(String imageUrl) {<newline46mondego>        this.imageUrl = imageUrl;<newline46mondego>    }<newline46mondego><newline46mondego>    public int getImageId() {<newline46mondego>        return imageId;<newline46mondego>    }<newline46mondego>    public void setImageId(int imageId) {<newline46mondego>        this.imageId = imageId;<newline46mondego>    }<newline46mondego>    public String getimageUrl() {<newline46mondego>        return imageUrl;<newline46mondego>    }<newline46mondego>    public void setimageUrl(String imageUrl) {<newline46mondego>        this.imageUrl = imageUrl;<newline46mondego>    }<newline46mondego>}<newline46mondego>"
"6965splitHere46","20236189splitHere46","<RelativeLayout xmlns:android=<doubleQuotes46>http://schemas.android.com/apk/res/android<doubleQuotes46><newline46mondego>    xmlns:tools=<doubleQuotes46>http://schemas.android.com/tools<doubleQuotes46><newline46mondego>    android:layout_width=<doubleQuotes46>match_parent<doubleQuotes46><newline46mondego>    android:layout_height=<doubleQuotes46>match_parent<doubleQuotes46><newline46mondego>    android:orientation=<doubleQuotes46>vertical<doubleQuotes46><newline46mondego>    tools:context=<doubleQuotes46>.MainActivity<doubleQuotes46> ><newline46mondego><newline46mondego><newline46mondego>        <ListView<newline46mondego>            android:id=<doubleQuotes46>@+id/hListView1<doubleQuotes46><newline46mondego>            android:layout_width=<doubleQuotes46>match_parent<doubleQuotes46><newline46mondego>            android:layout_height=<doubleQuotes46>300dp<doubleQuotes46><newline46mondego>            android:paddingTop=<doubleQuotes46>20dip<doubleQuotes46><newline46mondego>            android:paddingBottom=<doubleQuotes46>20dip<doubleQuotes46><newline46mondego>            android:background=<doubleQuotes46>#11000000<doubleQuotes46><newline46mondego>             /><newline46mondego><newline46mondego>        <CheckBox<newline46mondego>            android:id=<doubleQuotes46>@+id/selectall<doubleQuotes46><newline46mondego>            android:layout_width=<doubleQuotes46>wrap_content<doubleQuotes46><newline46mondego>            android:layout_height=<doubleQuotes46>wrap_content<doubleQuotes46><newline46mondego>            android:layout_alignParentLeft=<doubleQuotes46>true<doubleQuotes46><newline46mondego>            android:layout_below=<doubleQuotes46>@+id/hListView1<doubleQuotes46><newline46mondego>            android:layout_marginLeft=<doubleQuotes46>60dp<doubleQuotes46><newline46mondego>            android:layout_marginTop=<doubleQuotes46>64dp<doubleQuotes46><newline46mondego>            android:text=<doubleQuotes46>selectall<doubleQuotes46> /><newline46mondego><newline46mondego></RelativeLayout><newline46mondego>"
"6966splitHere46","20236189splitHere46","<?xml version=<doubleQuotes46>1.0<doubleQuotes46> encoding=<doubleQuotes46>utf-8<doubleQuotes46>?><newline46mondego><RelativeLayout xmlns:android=<doubleQuotes46>http://schemas.android.com/apk/res/android<doubleQuotes46><newline46mondego>    android:layout_width=<doubleQuotes46>fill_parent<doubleQuotes46><newline46mondego>    android:layout_height=<doubleQuotes46>wrap_content<doubleQuotes46> ><newline46mondego><newline46mondego>    <ImageView<newline46mondego>        android:id=<doubleQuotes46>@+id/icon<doubleQuotes46><newline46mondego>        android:layout_width=<doubleQuotes46>100dp<doubleQuotes46><newline46mondego>        android:layout_height=<doubleQuotes46>100dp<doubleQuotes46><newline46mondego>        android:contentDescription=<doubleQuotes46>ImageView<doubleQuotes46><newline46mondego>        android:paddingLeft=<doubleQuotes46>10dp<doubleQuotes46><newline46mondego>        android:paddingRight=<doubleQuotes46>10dp<doubleQuotes46> ><newline46mondego>    </ImageView><newline46mondego><newline46mondego>    <CheckBox<newline46mondego>        android:id=<doubleQuotes46>@+id/radio<doubleQuotes46><newline46mondego>        android:layout_width=<doubleQuotes46>wrap_content<doubleQuotes46><newline46mondego>        android:layout_height=<doubleQuotes46>wrap_content<doubleQuotes46><newline46mondego>        android:layout_alignParentLeft=<doubleQuotes46>true<doubleQuotes46><newline46mondego>        android:layout_below=<doubleQuotes46>@+id/icon<doubleQuotes46><newline46mondego>        android:layout_marginLeft=<doubleQuotes46>33dp<doubleQuotes46><newline46mondego>        android:focusable=<doubleQuotes46>false<doubleQuotes46><newline46mondego>        android:focusableInTouchMode=<doubleQuotes46>false<doubleQuotes46> /><newline46mondego><newline46mondego></RelativeLayout><newline46mondego>"
"6967splitHere46","20236189splitHere46","<manifest xmlns:android=<doubleQuotes46>http://schemas.android.com/apk/res/android<doubleQuotes46><newline46mondego>    package=<doubleQuotes46>it.sephiroth.android.sample.horizontalvariablelistviewdemo<doubleQuotes46><newline46mondego>    android:versionCode=<doubleQuotes46>1<doubleQuotes46><newline46mondego>    android:versionName=<doubleQuotes46>1.0<doubleQuotes46> ><newline46mondego><newline46mondego>    <uses-sdk<newline46mondego>        android:minSdkVersion=<doubleQuotes46>11<doubleQuotes46><newline46mondego>        android:targetSdkVersion=<doubleQuotes46>19<doubleQuotes46> /><newline46mondego><newline46mondego>    <uses-permission android:name=<doubleQuotes46>android.permission.INTERNET<doubleQuotes46> /><newline46mondego>    <uses-permission android:name=<doubleQuotes46>android.permission.ACCESS_NETWORK_STATE<doubleQuotes46> /><newline46mondego><newline46mondego>    <application<newline46mondego>        android:hardwareAccelerated=<doubleQuotes46>true<doubleQuotes46><newline46mondego>        android:icon=<doubleQuotes46>@drawable/ic_launcher<doubleQuotes46><newline46mondego>        android:label=<doubleQuotes46>@string/app_name<doubleQuotes46><newline46mondego>        android:theme=<doubleQuotes46>@style/AppTheme<doubleQuotes46> ><newline46mondego>        <activity<newline46mondego>            android:name=<doubleQuotes46>.MainActivity<doubleQuotes46><newline46mondego>            android:label=<doubleQuotes46>@string/app_name<doubleQuotes46> ><newline46mondego>            <intent-filter><newline46mondego>                <action android:name=<doubleQuotes46>android.intent.action.MAIN<doubleQuotes46> /><newline46mondego><newline46mondego>                <category android:name=<doubleQuotes46>android.intent.category.LAUNCHER<doubleQuotes46> /><newline46mondego>            </intent-filter><newline46mondego>        </activity><newline46mondego>    </application><newline46mondego><newline46mondego></manifest><newline46mondego>"
"6968splitHere46","20236278splitHere46","Subclass instance = new MainClass().new SubClass();<newline46mondego>"
"6969splitHere46","20236278splitHere46","Subclass instance = obj.new SubClass();<newline46mondego>"
"6970splitHere46","20236399splitHere46","Thread.getCurrentThread().getStackTrace()"
"6971splitHere46","20236399splitHere46","if (log.isDebugEnabled()) {<newline46mondego>    // log stacktrace<newline46mondego>}<newline46mondego>"
"6972splitHere46","20236410splitHere46","void downloadFile(){<newline46mondego><newline46mondego>    try {<newline46mondego>        URL url = new URL(dwnload_file_path);<newline46mondego>        HttpURLConnection urlConnection = (HttpURLConnection) url.openConnection();<newline46mondego><newline46mondego>        urlConnection.setRequestMethod(<doubleQuotes46>GET<doubleQuotes46>);<newline46mondego>        urlConnection.setDoOutput(true);<newline46mondego><newline46mondego>        //connect<newline46mondego>        urlConnection.connect();<newline46mondego><newline46mondego>        //set the path where we want to save the file           <newline46mondego>        String SDCardRoot= Environment.getExternalStorageDirectory() ; <newline46mondego>        //create a new file, to save the downloaded file <newline46mondego>        File file = new File(SDCardRoot,<doubleQuotes46>mydownloadmovie.mp4<doubleQuotes46>);<newline46mondego><newline46mondego>        FileOutputStream fileOutput = new FileOutputStream(file);<newline46mondego><newline46mondego>        //Stream used for reading the data from the internet<newline46mondego>        InputStream inputStream = urlConnection.getInputStream();<newline46mondego><newline46mondego>        //this is the total size of the file which we are downloading<newline46mondego>        totalSize = urlConnection.getContentLength();<newline46mondego><newline46mondego><newline46mondego>        //create a buffer...<newline46mondego>        byte[] buffer = new byte[1024];<newline46mondego>        int bufferLength = 0;<newline46mondego><newline46mondego>        while ( (bufferLength = inputStream.read(buffer)) > 0 ) {<newline46mondego>            fileOutput.write(buffer, 0, bufferLength);<newline46mondego>            downloadedSize += bufferLength;<newline46mondego>                 }<newline46mondego>        //close the output stream when complete //<newline46mondego>        fileOutput.close();<newline46mondego><newline46mondego>    } catch (MalformedURLException e) {<newline46mondego>        e.printStackTrace();<newline46mondego>    } catch (IOException e) {<newline46mondego>        e.printStackTrace();<newline46mondego>    }<newline46mondego>    catch (Exception e) {<newline46mondego><newline46mondego>    }       <newline46mondego>}<newline46mondego>"
"6973splitHere46","20236799splitHere46","ArrayList"
"6974splitHere46","20236799splitHere46","int size1 = dimList1.size();<newline46mondego>int size2 = dimList2.size();<newline46mondego>int maxSize = Math.max(size1, size2);<newline46mondego>if (size1 < maxSize) {<newline46mondego>    fillZeros(dimList1, maxSize);<newline46mondego>} else {<newline46mondego>    fillZeros(dimList2, maxSize);<newline46mondego>}<newline46mondego><newline46mondego><newline46mondego>private void fillZeros(ArrayList<Double> list, int maxSize) {<newline46mondego>    for(int i = list.size(); i < maxSize; i++) {<newline46mondego>        list.add(0.0D);<newline46mondego>    }<newline46mondego>}<newline46mondego>"
"6975splitHere46","20236836splitHere46","void reportError(IResource resource, int line, String msg) {<newline46mondego>   IMarker m = resource.createMarker(IMarker.PROBLEM);<newline46mondego>   m.setAttribute(IMarker.LINE_NUMBER, line);<newline46mondego>   m.setAttribute(IMarker.MESSAGE, msg);<newline46mondego>   m.setAttribute(IMarker.PRIORITY, IMarker.PRIORITY_HIGH);<newline46mondego>   m.setAttribute(IMarker.SEVERITY, IMarker.SEVERITY_ERROR);<newline46mondego>}<newline46mondego>"
"6976splitHere46","20237095splitHere46","field.setAccessible(true);"
"6977splitHere46","20237095splitHere46","public static class A {<newline46mondego>    public void test() throws Exception {<newline46mondego>        Field[] fields = this.getClass().getDeclaredFields();<newline46mondego>        for (Field field : fields) {<newline46mondego>            field.setAccessible(true);<newline46mondego>            System.out.println(field.getName() + <doubleQuotes46>-<doubleQuotes46> + field.get(this).toString());<newline46mondego>        }<newline46mondego>    }<newline46mondego>}<newline46mondego><newline46mondego>public static class B extends A {<newline46mondego>    private String foo = <doubleQuotes46>bar<doubleQuotes46>;<newline46mondego>    public B() throws Exception {<newline46mondego>        super();<newline46mondego>        test();<newline46mondego>    }<newline46mondego>}<newline46mondego><newline46mondego>public static void main(String[] args) throws Exception {<newline46mondego>    new B();<newline46mondego>}<newline46mondego>"
"6978splitHere46","20237095splitHere46","foo-bar<newline46mondego>"
"6979splitHere46","20237171splitHere46","hadoop jar"
"6980splitHere46","20237171splitHere46","[root@localhost hellworld]# cat HelloWorld.java <newline46mondego><newline46mondego>public class HelloWorld {<newline46mondego><newline46mondego>  public static void main(String[] args) throws Exception {<newline46mondego>      System.out.println(<doubleQuotes46>Hello World!<doubleQuotes46>);<newline46mondego>}}<newline46mondego><newline46mondego><newline46mondego>[root@localhost hellworld]# javac HelloWorld.java <newline46mondego>[root@localhost hellworld]# jar cvf helloworld.jar HelloWorld.class <newline46mondego><newline46mondego>[root@localhost hellworld]# ~/Downloads/hadoop-2.1.0-beta/bin/hadoop jar helloworld.jar HelloWorld<newline46mondego>Hello World!<newline46mondego>"
"6981splitHere46","20237253splitHere46","/**<newline46mondego>     * Defines the socket timeout (<code>SO_TIMEOUT</code>) in milliseconds,<newline46mondego>     * which is the timeout for waiting for data  or, put differently,<newline46mondego>     * a maximum period inactivity between two consecutive data packets).<newline46mondego>     * <p/><newline46mondego>     * A timeout value of zero is interpreted as an infinite timeout.<newline46mondego>     * A negative value is interpreted as undefined (system default).<newline46mondego>     * <p/><newline46mondego>     * Default: <code>-1</code><newline46mondego>     */<newline46mondego><newline46mondego><newline46mondego><newline46mondego>RequestConfig requestConfig = RequestConfig.custom().setConnectionRequestTimeout(5000).setConnectTimeout(5000).getSocketTimeout(5000).setLocalAddress(inetAddress).build();<newline46mondego>"
"6982splitHere46","20237253splitHere46","stepExecution.getJobExecution().stop();"
"6983splitHere46","20237406splitHere46","public static ArrayList<ContactWrapper> fillContacts(Context c) {<newline46mondego>    ArrayList<ContactWrapper> contacts = new ArrayList<ContactWrapper>();<newline46mondego>    try {<newline46mondego><newline46mondego>        // private Uri uriContact;<newline46mondego><newline46mondego>        String contactName = null;<newline46mondego>        String contactID = null;<newline46mondego>        String contactNumber = null;<newline46mondego><newline46mondego>        ContactWrapper cWrapper;<newline46mondego><newline46mondego>        // getting contacts ID<newline46mondego>        Cursor cursorID = c.getContentResolver().query(ContactsContract.Contacts.CONTENT_URI,<newline46mondego>                new String[] { ContactsContract.Contacts._ID, ContactsContract.Contacts.DISPLAY_NAME }, null, null, null);<newline46mondego><newline46mondego>        if (cursorID.moveToFirst()) {<newline46mondego>            do {<newline46mondego>                contactID = cursorID.getString(cursorID.getColumnIndex(ContactsContract.Contacts._ID));<newline46mondego>                contactName = cursorID.getString(cursorID.getColumnIndex(ContactsContract.Contacts.DISPLAY_NAME));<newline46mondego>                contactNumber = DataUtil.retrieveContactNumber(c, contactID);<newline46mondego><newline46mondego>                if (contactNumber != null && (!contactNumber.equalsIgnoreCase(<doubleQuotes46><doubleQuotes46>)) && (!contactNumber.equalsIgnoreCase(<doubleQuotes46> <doubleQuotes46>))) {<newline46mondego>                    cWrapper = new ContactWrapper(contactID, contactName, contactNumber, 0);<newline46mondego>                    contacts.add(cWrapper);<newline46mondego><newline46mondego>                    Log.d(c.getClass().getSimpleName(), <doubleQuotes46>Contact ID: <doubleQuotes46> + contactID);<newline46mondego>                }<newline46mondego><newline46mondego>            } while (cursorID.moveToNext());<newline46mondego>        }<newline46mondego>        cursorID.close();<newline46mondego><newline46mondego>    } catch (Exception e) {<newline46mondego>        e.printStackTrace();<newline46mondego>        Log.e(c.getClass().getSimpleName(), <doubleQuotes46><doubleQuotes46> + e.getMessage());<newline46mondego>    }<newline46mondego>    return contacts;<newline46mondego>}<newline46mondego>"
"6984splitHere46","20237406splitHere46","private boolean contactExistInPhoneList(String number) {<newline46mondego>    for (int i = 0; i < phoneListcontacts.size(); i++) {<newline46mondego>        if (phoneListcontacts.get(i).getNumber().equalsIgnoreCase(number)) {<newline46mondego>            Log.d(this.getClass().getSimpleName(), <doubleQuotes46>Name= <doubleQuotes46>+phoneListcontacts.get(i).getName());<newline46mondego>            return true;<newline46mondego>        }<newline46mondego>    }<newline46mondego>    return false;<newline46mondego>}<newline46mondego>"
"6985splitHere46","20237435splitHere46","NettyClientHandler"
"6986splitHere46","20237435splitHere46","NettyClientHandler"
"6987splitHere46","20237435splitHere46","//We know this is a redirect...<newline46mondego>            if(response.getStatus().code() == HttpResponseStatus.FOUND.code()){//When its a 302...<newline46mondego><newline46mondego>                if(response.headers().names().contains(<doubleQuotes46>Location<doubleQuotes46>))<newline46mondego>                {<newline46mondego>                    System.out.println(<doubleQuotes46>We have a redirect...<doubleQuotes46>);<newline46mondego>                    //Now we will do the process over to get the actual content...<newline46mondego>                    Main.main(new String[]{response.headers().get(<doubleQuotes46>Location<doubleQuotes46>)});<newline46mondego>                }<newline46mondego>            }<newline46mondego>"
"6988splitHere46","20237435splitHere46","main()"
"6989splitHere46","20237435splitHere46","String urlPlace = <doubleQuotes46>http://initial.com<doubleQuotes46>;<newline46mondego><newline46mondego>        if(args != null && args.length > 0)<newline46mondego>        {<newline46mondego>            urlPlace = args[0];<newline46mondego>        }<newline46mondego><newline46mondego>        URI uri = new URI(urlPlace);<newline46mondego>        String host = uri.getHost();<newline46mondego>        int port = uri.getPort();<newline46mondego>        if(port == -1)<newline46mondego>        {<newline46mondego>            port = 80;<newline46mondego>        }<newline46mondego>"
"6990splitHere46","20237442splitHere46","IWorkbenchPage page = PlatformUI.getWorkbench().getActiveWorkbenchWindow().getActivePage();<newline46mondego><newline46mondego>IViewPart viewPart = page.findView(id);<newline46mondego>"
"6991splitHere46","20237442splitHere46","org.eclipse.jdt.ui.ProjectsView"
"6992splitHere46","20237442splitHere46","viewPart"
"6993splitHere46","20237442splitHere46","null"
"6994splitHere46","20237442splitHere46","ISelectionProvider selProvider = viewPart.getSite().getSelectionProvider();<newline46mondego>"
"6995splitHere46","20237442splitHere46","selProvider.setSelection(new StructuredSelection(project));<newline46mondego>"
"6996splitHere46","20237442splitHere46","project"
"6997splitHere46","20237442splitHere46","IProject"
"6998splitHere46","20237458splitHere46","Runnable"
"6999splitHere46","20237458splitHere46","Runnable"
"7000splitHere46","20237468splitHere46","infile.hasNextLine()"
"7001splitHere46","20237468splitHere46","infile.hasNext()"
"7002splitHere46","20237468splitHere46","while(infile.hasNext())<newline46mondego>"
"7003splitHere46","20237468splitHere46","while(infile.hasNextLine())<newline46mondego>"
"7004splitHere46","20237468splitHere46","names.println(nameslist.get(i).toString());<newline46mondego>"
"7005splitHere46","20237468splitHere46","names.println(nameslist.get(i)); //nameslist holds String objects no need to convert to String again.<newline46mondego>"
"7006splitHere46","20237468splitHere46","int countline;<newline46mondego> while(infile.hasNext()) {<newline46mondego>     nameslist.add(infile.nextLine());<newline46mondego>     countline++;        <newline46mondego> }     <newline46mondego> System.out.println(<doubleQuotes46>Number of line: <doubleQuotes46>+ countline);<newline46mondego>"
"7007splitHere46","20237484splitHere46","// TODO: Closing the statement etc<newline46mondego>String sql = <doubleQuotes46>select sc.* from SubCategory sc where sc.CategoryCode = ?<doubleQuotes46>;<newline46mondego>PreparedStatement statement = conn.prepareStatement(sql);<newline46mondego>statement.setString(tid); // Or statement.setString(String.valueOf(tid))<newline46mondego>ResultSet results = statement.executeQuery();<newline46mondego>"
"7008splitHere46","20237627splitHere46","ListModel lst1mdl = dsplList.getModel();<newline46mondego>"
"7009splitHere46","20237728splitHere46","myButton.setBackground(null)<newline46mondego>"
"7010splitHere46","20237733splitHere46","if(actif && wake){<newline46mondego>           System.out.println(<doubleQuotes46>Actif :<doubleQuotes46>+actif);<newline46mondego>           System.out.println(<doubleQuotes46>Wake :<doubleQuotes46>+wake);<newline46mondego>        if(wake){<newline46mondego>            System.out.println(<doubleQuotes46>Wake est activÃ©<doubleQuotes46>);<newline46mondego>        }   <newline46mondego>        if(actif){<newline46mondego>            actif=false;<newline46mondego>        }<newline46mondego><newline46mondego>        }<newline46mondego>"
"7011splitHere46","20237733splitHere46","ideally it should be : <newline46mondego>if(actif && wake){<newline46mondego>           System.out.println(<doubleQuotes46>Actif :<doubleQuotes46>+actif);<newline46mondego>           System.out.println(<doubleQuotes46>Wake :<doubleQuotes46>+wake);<newline46mondego>}<newline46mondego>        if(wake){<newline46mondego>            System.out.println(<doubleQuotes46>Wake est activÃ©<doubleQuotes46>);<newline46mondego>        }   <newline46mondego>        if(actif){<newline46mondego>            actif=false;<newline46mondego>        }<newline46mondego>"
"7012splitHere46","20237736splitHere46","int b = x&1;<newline46mondego>"
"7013splitHere46","20237867splitHere46","public void setUserswithdistance(ArrayList<UsersWithDistance> _userswithdistance) {<newline46mondego>           this._userswithdistance = _userswithdistance;  <newline46mondego>}<newline46mondego>"
"7014splitHere46","20237867splitHere46","@JsonProperty(<doubleQuotes46>userswithdistance<doubleQuotes46>)<newline46mondego>    private ArrayList<UsersWithDistance> _userswithdistance;<newline46mondego>"
"7015splitHere46","20237886splitHere46","bin"
"7016splitHere46","20237886splitHere46","primaryStage.getIcons().add(new Image(this.getClass().getResourceAsStream(<doubleQuotes46>sicadcam.png<doubleQuotes46>)));<newline46mondego>"
"7017splitHere46","20237986splitHere46","{<newline46mondego>  <doubleQuotes46>name<doubleQuotes46>:<doubleQuotes46>Ersin<doubleQuotes46>,<newline46mondego>  <doubleQuotes46>surname<doubleQuotes46>:<doubleQuotes46>Ã‡etinkaya<doubleQuotes46>,<newline46mondego>  <doubleQuotes46>age<doubleQuotes46>:<doubleQuotes46>25<doubleQuotes46>,<newline46mondego>  <doubleQuotes46>address<doubleQuotes46>:[{<doubleQuotes46>city<doubleQuotes46>: <doubleQuotes46>Bursa<doubleQuotes46>,<doubleQuotes46>country<doubleQuotes46>: <doubleQuotes46>TÃ¼rkiye<doubleQuotes46>,<doubleQuotes46>zipCode<doubleQuotes46>: <doubleQuotes46>33444<doubleQuotes46>}],<newline46mondego>  <doubleQuotes46>phones<doubleQuotes46>: [<doubleQuotes46>234234242<doubleQuotes46>,<doubleQuotes46>345345354<doubleQuotes46>]<newline46mondego>}<newline46mondego>"
"7018splitHere46","20237986splitHere46","public JSONObject getValues()<newline46mondego>{<newline46mondego>    JSONObject jsonobj=new JSONObject();<newline46mondego>    jsonobj.put(<doubleQuotes46>name<doubleQuotes46>,<doubleQuotes46>Ersin<doubleQuotes46>);<newline46mondego>    jsonobj.put(<doubleQuotes46>surname<doubleQuotes46>,<doubleQuotes46>Ã‡etinkaya<doubleQuotes46>);<newline46mondego>    jsonobj.put(<doubleQuotes46>age<doubleQuotes46>,<doubleQuotes46>25<doubleQuotes46>);<newline46mondego><newline46mondego><newline46mondego>    JSONArray obj = new JSONArray();<newline46mondego>    HashMap rows=new HashMap();<newline46mondego>    rows.put(<doubleQuotes46>city<doubleQuotes46>,<doubleQuotes46>Bursa<doubleQuotes46>);<newline46mondego>    rows.put(<doubleQuotes46>country<doubleQuotes46>,<doubleQuotes46>TÃ¼rkiye<doubleQuotes46>);<newline46mondego>    rows.put(<doubleQuotes46>zipCode<doubleQuotes46>,<doubleQuotes46>33444<doubleQuotes46>);<newline46mondego>    obj.put(rows);<newline46mondego>    jsonobj.put(<doubleQuotes46>address<doubleQuotes46>, obj);<newline46mondego><newline46mondego>    JSONArray phobj = new JSONArray();<newline46mondego>    phobj.put(<doubleQuotes46>234234242<doubleQuotes46>);<newline46mondego>    phobj.put(<doubleQuotes46>345345354<doubleQuotes46>);<newline46mondego>    jsonobj.put(<doubleQuotes46>phones<doubleQuotes46>, phobj);<newline46mondego><newline46mondego>    System.out.println(jsonobj.toString());<newline46mondego>    return jsonobj.toString();<newline46mondego>}<newline46mondego>"
"7019splitHere46","20238113splitHere46","run()"
"7020splitHere46","20238113splitHere46","start()"
"7021splitHere46","20238113splitHere46","Thread"
"7022splitHere46","20238113splitHere46","IllegalStateException"
"7023splitHere46","20238152splitHere46","Activity_patient_info.xml"
"7024splitHere46","20238152splitHere46","android:onClick=<doubleQuotes46>setOnClickListener<doubleQuotes46>"
"7025splitHere46","20238152splitHere46","<TextView android:id=<doubleQuotes46>@+id/myview<doubleQuotes46><newline46mondego>        android:layout_width=<doubleQuotes46>wrap_content<doubleQuotes46><newline46mondego>        android:layout_height=<doubleQuotes46>wrap_content<doubleQuotes46><newline46mondego>        android:text=<doubleQuotes46>Click me!<doubleQuotes46><newline46mondego>        android:onClick=<doubleQuotes46>myClickMethod<doubleQuotes46> /><newline46mondego>"
"7026splitHere46","20238152splitHere46","public void myClickMethod(View v) {<newline46mondego>    // does something here<newline46mondego>}<newline46mondego>"
"7027splitHere46","20238188splitHere46","for(int i = 0; j<y ; j++){<newline46mondego>      System.out.println(<doubleQuotes46>*<doubleQuotes46>);<newline46mondego> }<newline46mondego>"
"7028splitHere46","20238188splitHere46","for(int j = 0; j<y ; j++){<newline46mondego>      System.out.println(<doubleQuotes46>*<doubleQuotes46>);<newline46mondego> }<newline46mondego>"
"7029splitHere46","20238188splitHere46","static void drawbox(int x, int y) {<newline46mondego>    for (int i = 0; i < y; i++) {<newline46mondego>        System.out.print(<doubleQuotes46>*<doubleQuotes46>);<newline46mondego>    }<newline46mondego>    System.out.println();<newline46mondego>    for (int i = 0; i < x - 2; i++) {<newline46mondego>        System.out.print(<doubleQuotes46>*<doubleQuotes46>);<newline46mondego>        for (int j = 0; j < y - 2; j++) {<newline46mondego>            System.out.print(<doubleQuotes46> <doubleQuotes46>);<newline46mondego>        }<newline46mondego>        System.out.println(<doubleQuotes46>*<doubleQuotes46>);<newline46mondego>    }<newline46mondego>    for (int i = 0; i < y; i++) {<newline46mondego>        System.out.print(<doubleQuotes46>*<doubleQuotes46>);<newline46mondego>    }<newline46mondego>    System.out.println();<newline46mondego>}<newline46mondego>"
"7030splitHere46","20238232splitHere46","editText2.setText(<doubleQuotes46><doubleQuotes46>);<newline46mondego>"
"7031splitHere46","20238232splitHere46","code_text.setText(<doubleQuotes46><doubleQuotes46>);<newline46mondego>"
"7032splitHere46","20238232splitHere46","for(int i=0; i<userEmail.length(); i++)  <newline46mondego>"
"7033splitHere46","20238232splitHere46","String validCode = <doubleQuotes46><doubleQuotes46>;<newline46mondego><newline46mondego>if (userCode.equals(validCode)) {<newline46mondego>    //rest of the code<newline46mondego>"
"7034splitHere46","20238232splitHere46","return <doubleQuotes46>abdcefghijklmnopqrstuvwxyz<doubleQuotes46>.indexOf(c) + 1;<newline46mondego>"
"7035splitHere46","20238232splitHere46","public void onCreate(Bundle savedInstanceState) {<newline46mondego>        super.onCreate(savedInstanceState);<newline46mondego>        setTitle(R.string.login);<newline46mondego>        setContentView(R.layout.home_login);<newline46mondego>        Button btn = (Button) findViewById(R.id.loginButton2);<newline46mondego><newline46mondego>        final EditText email_text = (EditText) findViewById(R.id.editText1);<newline46mondego>        final EditText code_text = (EditText) findViewById(R.id.editText2);<newline46mondego><newline46mondego>        btn.setOnClickListener(new View.OnClickListener() {<newline46mondego>            @SuppressLint(<doubleQuotes46>ResourceAsColor<doubleQuotes46>)<newline46mondego>            @Override<newline46mondego>            public void onClick(View v) {<newline46mondego>                //check if user entered email and code, continue only if they have<newline46mondego>                if (email_text.getText().length() > 0 && code_text.getText().length() > 0) {<newline46mondego>                    //moved here, to avoid exception when text boxes are empty<newline46mondego>                    final String userEmail = email_text.getText().toString();<newline46mondego>                    final String userCode = code_text.getText().toString();<newline46mondego><newline46mondego>                    //changed from String x = <doubleQuotes46><doubleQuotes46> because userCode is already a String<newline46mondego>                    //and we don't have to change x to int, because we can compare <newline46mondego>                    //strings<newline46mondego>                    String validCode = <doubleQuotes46><doubleQuotes46>;<newline46mondego><newline46mondego>                    //don't hardcode stop condition for i,<newline46mondego>                    //instead, use the length of user entered string<newline46mondego>                    for (int i = 0; i < userEmail.length(); i++) {<newline46mondego>                        validCode += getNumber(userEmail.charAt(i));<newline46mondego>                    }<newline46mondego><newline46mondego>                    //now we can compare userCode with validCode<newline46mondego>                    if (userCode.equals(validCode)) {<newline46mondego>                        Intent intent = new Intent(Login.this, Home.class);<newline46mondego>                        startActivity(intent);<newline46mondego>                    } else {<newline46mondego>                        TextView view = (TextView) findViewById(R.id.loginfailed);<newline46mondego>                        view.setVisibility(View.VISIBLE);<newline46mondego><newline46mondego>                        //reset string in code_text editText<newline46mondego>                        code_text.setText(<doubleQuotes46><doubleQuotes46>);<newline46mondego>                    }<newline46mondego>                }<newline46mondego>                //userEmail or/and userCode text boxes are empty, inform user<newline46mondego>                else {<newline46mondego>                    Toast.makeText(getApplicationContext(), <doubleQuotes46>Please enter email and/or code<doubleQuotes46>, Toast.LENGTH_SHORT).show();<newline46mondego>                }<newline46mondego>            }<newline46mondego>        });<newline46mondego>    }<newline46mondego>"
"7036splitHere46","20239039splitHere46","Student"
"7037splitHere46","20239039splitHere46","Comparable"
"7038splitHere46","20239039splitHere46","public class Student implements Comparable<Student> {<newline46mondego>    @Override<newline46mondego>    public int compareTo(Student o) {<newline46mondego>        return this.getName().compareTo(o.getName());<newline46mondego>    }<newline46mondego>}<newline46mondego>"
"7039splitHere46","20239076splitHere46","StackTraceElement"
"7040splitHere46","20239098splitHere46","<input type=<doubleQuotes46>file<doubleQuotes46> wicket:id=<doubleQuotes46>uploadField<doubleQuotes46> accept=<doubleQuotes46>.csv, .html<doubleQuotes46>/><newline46mondego>"
"7041splitHere46","20239116splitHere46","String color = <doubleQuotes46>#FF7F27<doubleQuotes46>;<newline46mondego>builder.setTitle(  Html.fromHtml(<doubleQuotes46><font color='<doubleQuotes46> + color + <doubleQuotes46>'><doubleQuotes46> + title + <doubleQuotes46></font><doubleQuotes46>));<newline46mondego>"
"7042splitHere46","20239157splitHere46","mvn"
"7043splitHere46","20239157splitHere46","mvn release:update-versions<newline46mondego>"
"7044splitHere46","20239266splitHere46","if ( myvalue == <doubleQuotes46>blah<doubleQuotes46> ) {"
"7045splitHere46","20239266splitHere46","( myvalue.equals(<doubleQuotes46>blah<doubleQuotes46>) ) {"
"7046splitHere46","20239266splitHere46","String myvalue = request.getParameter(<doubleQuotes46>myvalue<doubleQuotes46>);<newline46mondego><newline46mondego>if ( myvalue.equals(<doubleQuotes46>blah<doubleQuotes46> )) {<newline46mondego> out.print(<doubleQuotes46><h3>You submitted the page, my value = <doubleQuotes46> + myvalue + <doubleQuotes46></h3><doubleQuotes46> );<newline46mondego><newline46mondego>} else {<newline46mondego>  out.print(<doubleQuotes46><h3>Page not submitted yet, my value = <doubleQuotes46> + myvalue + <doubleQuotes46></h3><doubleQuotes46> );<newline46mondego>}<newline46mondego>"
"7047splitHere46","20239298splitHere46","int showConfirmDialog = JOptionPane.showConfirmDialog(new JFrame(), <doubleQuotes46>Approve?<doubleQuotes46>,<doubleQuotes46>Title<doubleQuotes46>,JOptionPane.YES_NO_OPTION);<newline46mondego>    if(showConfirmDialog == JOptionPane.YES_OPTION){<newline46mondego>        btnSave.setEnabled(false);<newline46mondego>        btnEdit.setEnabled(true);<newline46mondego>        txtName.setEnabled(false);<newline46mondego>        //other fields<newline46mondego>    } else {<newline46mondego>        //If no or cancel actions<newline46mondego>    }<newline46mondego>"
"7048splitHere46","20239298splitHere46","showConfirmDialog(...)"
"7049splitHere46","20239387splitHere46","int squareResult = p.square( length );<newline46mondego>int cubeResult = p.cube( length );<newline46mondego>int hypercubeResult = p.hypercube( length );<newline46mondego>"
"7050splitHere46","20239387splitHere46","output(squareResult, cubeResult, hypercubeResult);<newline46mondego>"
"7051splitHere46","20239387splitHere46","output"
"7052splitHere46","20239387splitHere46","public static void output(int squareResult, int cubeResult, int hypercubeResult) {<newline46mondego>    // ...<newline46mondego>}<newline46mondego>"
"7053splitHere46","20239620splitHere46","@Inject"
"7054splitHere46","20239620splitHere46","User"
"7055splitHere46","20239620splitHere46","SecurityFilter"
"7056splitHere46","20239620splitHere46","HttpServletRequest"
"7057splitHere46","20239620splitHere46","User"
"7058splitHere46","20239633splitHere46","LOGGED_IN.USER_ID"
"7059splitHere46","20239633splitHere46","INT"
"7060splitHere46","20239633splitHere46","Integer"
"7061splitHere46","20239633splitHere46","Int"
"7062splitHere46","20239633splitHere46","Long"
"7063splitHere46","20239633splitHere46","BIGINT"
"7064splitHere46","20239633splitHere46","Long"
"7065splitHere46","20239633splitHere46","INT"
"7066splitHere46","20239633splitHere46","trait SNumberField[T <: Number] extends SAnyField[T] {<newline46mondego>  // [...]<newline46mondego>  def equal(value : Number)        : Condition;<newline46mondego>  def equal(value : Field[Number]) : Condition;<newline46mondego>}<newline46mondego><newline46mondego>abstract class NumberFieldBase[T <: Number](override val underlying: Field[T])<newline46mondego>    extends AnyFieldBase[T] (underlying)<newline46mondego>    with SNumberField[T] {<newline46mondego><newline46mondego>  // [...]<newline46mondego>  def equal(value : Number)<newline46mondego>    = underlying.equal(underlying.getDataType().convert(value));<newline46mondego>  def equal(value : Field[_ <: Number]) <newline46mondego>    = underlying.equal(value.coerce(underlying.getDataType());<newline46mondego>}<newline46mondego>"
"7067splitHere46","20239643splitHere46","NamedParameterJdbcTemplate"
"7068splitHere46","20239643splitHere46","NamedParameterJdbcTemplate"
"7069splitHere46","20239643splitHere46","IN"
"7070splitHere46","20239663splitHere46","class GetJSONTask extends AsyncTask<String, Void, JSONObject[]> {<newline46mondego><newline46mondego> ...<newline46mondego><newline46mondego> protected JSONObject[] doInBackground(String... urls) {<newline46mondego>    // Creating new JSON Parser<newline46mondego>    JSONParser jParser = new JSONParser();<newline46mondego><newline46mondego>    // Getting JSON from URL<newline46mondego>    JSONObject[] jsons = new JSONObject[2];<newline46mondego>    jsons[0] = jParser.getJSONFromUrl(url1);<newline46mondego>    jsons[1] = jParser.getJSONFromUrl(url2);<newline46mondego><newline46mondego>    return jsons;<newline46mondego>}<newline46mondego>protected void onPostExecute(JSONObject[] jsons) {<newline46mondego>    JSONObject json1 = jsons[0];<newline46mondego>    JSONObject json2 = jsons[1];<newline46mondego>    // do you work after this<newline46mondego>}<newline46mondego>}<newline46mondego>"
"7071splitHere46","20239699splitHere46","JMXConnectorFactory.connect(new JMXServiceURL(GlobalVariables.connectorAddress))<newline46mondego>"
"7072splitHere46","20239699splitHere46","JMXConnector"
"7073splitHere46","20239699splitHere46","GlobalVariables.server.invoke"
"7074splitHere46","20239699splitHere46","new ObjectName(<doubleQuotes46>transformer:service=DemoTransformer<doubleQuotes46>)"
"7075splitHere46","20239699splitHere46","javax.management.InstanceAlreadyExistsException: transformer:service= DemoTransformer"
"7076splitHere46","20239699splitHere46","MBeanServerConnection.close(new ObjectName(<doubleQuotes46>transformer:service=DemoTransformer<doubleQuotes46>))"
"7077splitHere46","20239699splitHere46","JMXConnector.close"
"7078splitHere46","20239699splitHere46","managementAgentJarFile"
"7079splitHere46","20239699splitHere46","static"
"7080splitHere46","20239699splitHere46","LinkageError"
"7081splitHere46","20239699splitHere46","static"
"7082splitHere46","20239806splitHere46","{<doubleQuotes46>success<doubleQuotes46>:0,<doubleQuotes46>message<doubleQuotes46>:<doubleQuotes46>Database Error2. Please Try Again !<doubleQuotes46>}"
"7083splitHere46","20239806splitHere46","Mail Sent. {<doubleQuotes46>success<doubleQuotes46>:0,<doubleQuotes46>message<doubleQuotes46>:<doubleQuotes46>Database Error2. Please Try Again !<doubleQuotes46>}"
"7084splitHere46","20239888splitHere46","jndi:/hostname/contextPath/pathInWebApp<newline46mondego>"
"7085splitHere46","20239933splitHere46","static void findTranslation(Map<String, String> map, String message, String translation) {<newline46mondego>    if (message != null && !message.isEmpty()) {<newline46mondego>        for (String key : map.keySet()) {<newline46mondego>            if (message.startsWith(key)) {<newline46mondego>                String currentTranslation = translation + map.get(key);<newline46mondego>                String restOfTheMessage = message.substring(key.length());<newline46mondego>                if (!restOfTheMessage.isEmpty()) {<newline46mondego>                    findTranslation(map, restOfTheMessage, currentTranslation);<newline46mondego>                }<newline46mondego>                else {<newline46mondego>                    System.out.println(currentTranslation);<newline46mondego>                }<newline46mondego>            }<newline46mondego>        }<newline46mondego>    }<newline46mondego>}<newline46mondego>"
"7086splitHere46","20239933splitHere46","String l=<doubleQuotes46>-..-----.<doubleQuotes46>;<newline46mondego>findTranslation(h, l, <doubleQuotes46><doubleQuotes46>);<newline46mondego>"
"7087splitHere46","20239933splitHere46","dt9<newline46mondego>dttttn<newline46mondego>dttt.z<newline46mondego>dttmn<newline46mondego>dtmtn<newline46mondego>dtm.z<newline46mondego>dton<newline46mondego>dmttn<newline46mondego>dmt.z<newline46mondego>dmmn<newline46mondego>dotn<newline46mondego>do.z<newline46mondego>x9<newline46mondego>xtttn<newline46mondego>xtt.z<newline46mondego>xtmn<newline46mondego>xmtn<newline46mondego>xm.z<newline46mondego>xon<newline46mondego>tit9<newline46mondego>tittttn<newline46mondego>tittt.z<newline46mondego>tittmn<newline46mondego>titmtn<newline46mondego>titm.z<newline46mondego>titon<newline46mondego>timttn<newline46mondego>timt.z<newline46mondego>timmn<newline46mondego>tiotn<newline46mondego>tio.z<newline46mondego>t2tn<newline46mondego>t2.z<newline46mondego>tu9<newline46mondego>tutttn<newline46mondego>tutt.z<newline46mondego>tutmn<newline46mondego>tumtn<newline46mondego>tum.z<newline46mondego>tuon<newline46mondego>nwttn<newline46mondego>nwt.z<newline46mondego>nwmn<newline46mondego>njtn<newline46mondego>nj.z<newline46mondego>n1n<newline46mondego>na9<newline46mondego>natttn<newline46mondego>natt.z<newline46mondego>natmn<newline46mondego>namtn<newline46mondego>nam.z<newline46mondego>naon<newline46mondego>"
"7088splitHere46","20239974splitHere46","Caused by: java.lang.SecurityException: The Maps API requires the additional following permissions to be set in the AndroidManifest.xml to ensure a correct behavior:<newline46mondego>"
"7089splitHere46","20239974splitHere46","<uses-permission android:name=<doubleQuotes46>android.permission.ACCESS_NETWORK_STATE<doubleQuotes46>/><newline46mondego>"
"7090splitHere46","20240206splitHere46","- resources<newline46mondego>    - moduleOne<newline46mondego>        - css<newline46mondego>            - moduleOne.css<newline46mondego>        - js<newline46mondego>            - moduleOne.js<newline46mondego>        - images<newline46mondego>            - moduleOne.png<newline46mondego>    - moduleTwo<newline46mondego>        - css<newline46mondego>            - moduleTwo.css<newline46mondego>        - js<newline46mondego>            - moduleTwo.js<newline46mondego>        - images<newline46mondego>            - moduleTwo.png<newline46mondego>- META-INF<newline46mondego>- WEB-INF<newline46mondego>    - modules<newline46mondego>        - moduleOne<newline46mondego>            - conf<newline46mondego>                - moduleOne.conf<newline46mondego>            - views<newline46mondego>                - moduleOneViewOne.jsp<newline46mondego>        - moduleTwo<newline46mondego>            - conf<newline46mondego>                - moduleTwo.conf<newline46mondego>            - views<newline46mondego>                - moduleTwoViewOne.jsp<newline46mondego>    - lib<newline46mondego>    - web.xml<newline46mondego>"
"7091splitHere46","20240381splitHere46","BigDecimal"
"7092splitHere46","20240381splitHere46","double"
"7093splitHere46","20240381splitHere46","BigDecimal"
"7094splitHere46","20240381splitHere46","aX"
"7095splitHere46","20240381splitHere46","BigDecimal"
"7096splitHere46","20240381splitHere46","BigDecimal"
"7097splitHere46","20240381splitHere46","BigDecimal pi = BigDecimal.ZERO;<newline46mondego>for (int k = 0; k < n; k++) {<newline46mondego>    BigDecimal a0 = new BigDecimal(16).pow(k);<newline46mondego>    BigDecimal a1 = new BigDecimal(4).divide(new BigDecimal(8*k+1), 20, RoundingMode.HALF_UP);<newline46mondego>    BigDecimal a2 = new BigDecimal(2).divide(new BigDecimal(8*k+4), 20, RoundingMode.HALF_UP);<newline46mondego>    BigDecimal a3 = new BigDecimal(1).divide(new BigDecimal(8*k+5), 20, RoundingMode.HALF_UP);<newline46mondego>    BigDecimal a4 = new BigDecimal(1).divide(new BigDecimal(8*k+6), 20, RoundingMode.HALF_UP);<newline46mondego>    BigDecimal a5 = a1.subtract(a2).subtract(a3).subtract(a4);<newline46mondego>    BigDecimal a6 = BigDecimal.ONE.divide(a0, 20, RoundingMode.HALF_UP);<newline46mondego>    pi.add(a5.multiply(a6));<newline46mondego>    System.out.println(pi);<newline46mondego>}<newline46mondego>"
"7098splitHere46","20240418splitHere46","/Library/Java/JavaVirtualMachines/jdk1.7.0_45.jdk/Contents/Home"
"7099splitHere46","20240418splitHere46","codesign --deep -s <doubleQuotes46>my name<doubleQuotes46> MayApp.app<newline46mondego>"
"7100splitHere46","20240422splitHere46","<build><newline46mondego>  <plugins><newline46mondego>    <plugin><newline46mondego>        <groupId>org.apache.maven.plugins</groupId><newline46mondego>        <artifactId>maven-ejb-plugin</artifactId><newline46mondego>        <configuration><newline46mondego>            <ejbVersion>3.0</ejbVersion><newline46mondego>        </configuration><newline46mondego>    </plugin><newline46mondego>  </plugins><newline46mondego></build><newline46mondego>"
"7101splitHere46","20240433splitHere46","request.getParameter()"
"7102splitHere46","20240433splitHere46","String"
"7103splitHere46","20240433splitHere46","String[]"
"7104splitHere46","20240433splitHere46","request.getParameterValues('inbdAdditionalEmailAddr');"
"7105splitHere46","20240562splitHere46","KEYWORD          : 'ABC' | 'DEF';<newline46mondego>THREE_UPPER_CASE : [A-Z] [A-Z] [A-Z];<newline46mondego>"
"7106splitHere46","20240562splitHere46","K_ABC            : 'ABC';<newline46mondego>K_DEF            : 'DEF';<newline46mondego>THREE_UPPER_CASE : [A-Z] [A-Z] [A-Z];<newline46mondego>"
"7107splitHere46","20240620splitHere46","@Test<newline46mondego>public void testFoo()<newline46mondego>    {<newline46mondego>    // setup<newline46mondego>    Authentication mockAuthentication = createMock(Authentication.class);<newline46mondego>    Collection authorities = Collections.emptyList();<newline46mondego>    expect(mockAuthentication.getAuthorities()).andReturn(authorities);<newline46mondego><newline46mondego>    // exercise<newline46mondego>    EasyMock.replay(mockAuthentication);<newline46mondego>    Collection<? extends GrantedAuthority> retAuth = mockAuthentication.getAuthorities();<newline46mondego><newline46mondego>    // verify<newline46mondego>    EasyMock.verify(mockAuthentication);<newline46mondego>    assertEquals(authorities, retAuth);<newline46mondego>    }<newline46mondego>"
"7108splitHere46","20240682splitHere46","StreamSource"
"7109splitHere46","20240686splitHere46","public class A {<newline46mondego>    int variable = 0; <newline46mondego>}<newline46mondego><newline46mondego>public class Demo extends A{<newline46mondego><newline46mondego>}<newline46mondego><newline46mondego>public void testDowncast(){<newline46mondego>    Demo myClass = new Demo();<newline46mondego>    myClass.variable = 2;<newline46mondego>    A morphingTime = myClass;<newline46mondego>    System.out.println(<doubleQuotes46>And now Power Ranger Demo has turned into Mighty A:<doubleQuotes46>);<newline46mondego>    System.out.println(<doubleQuotes46>I am: <doubleQuotes46>+morphingTime.getClass() + <doubleQuotes46> and my variable is: <doubleQuotes46> + morphingTime.variable);<newline46mondego>}<newline46mondego>"
"7110splitHere46","20240704splitHere46","while (cursor.getNext(theKey, theData, LockMode.DEFAULT) == OperationStatus.SUCCESS) {<newline46mondego>            foundKey = new String(theKey.getData(), <doubleQuotes46>UTF-8<doubleQuotes46>);<newline46mondego>            foundData = new String(theData.getData(), <doubleQuotes46>UTF-8<doubleQuotes46>);<newline46mondego>                // this is to see each key - data - inputdata as I was having an issue<newline46mondego>            System.out.println(<doubleQuotes46>KEY: <doubleQuotes46> + foundKey + <newline46mondego>                    <doubleQuotes46>\nDATA: <doubleQuotes46> + foundData +<newline46mondego>                    <doubleQuotes46>\nINPUT_DATA: <doubleQuotes46> + dataInput + <doubleQuotes46>\n\n<doubleQuotes46>);<newline46mondego><newline46mondego>            if (foundData.equals(dataInput)) {<newline46mondego>                System.out.println(<doubleQuotes46>-----------------------------------\n\n<doubleQuotes46>);<newline46mondego>                System.out.println(<doubleQuotes46>Found record: <doubleQuotes46> + foundKey +<newline46mondego>                            <doubleQuotes46>\nwith data: <doubleQuotes46> + foundData);<newline46mondego>                System.out.println(<doubleQuotes46>\n\n-----------------------------------<doubleQuotes46>);<newline46mondego>            }<newline46mondego>            // THIS IS THE FIX <newline46mondego>            theKey = new DatabaseEntry();<newline46mondego>            theData = new DatabaseEntry();<newline46mondego>            // ----------------------------<newline46mondego><newline46mondego>        }<newline46mondego>"
"7111splitHere46","20240787splitHere46","protected void onActivityResult(int requestCode, int resultCode, <newline46mondego>       Intent imageReturnedIntent) {<newline46mondego>    super.onActivityResult(requestCode, resultCode, imageReturnedIntent); <newline46mondego><newline46mondego>    switch(requestCode) { <newline46mondego>    case REQ_CODE_PICK_IMAGE:<newline46mondego>        if(resultCode == RESULT_OK){  <newline46mondego>            Uri selectedImage = imageReturnedIntent.getData();<newline46mondego>            String[] filePathColumn = {MediaStore.Images.Media.DATA};<newline46mondego><newline46mondego>            Cursor cursor = getContentResolver().query(<newline46mondego>                               selectedImage, filePathColumn, null, null, null);<newline46mondego>            cursor.moveToFirst();<newline46mondego><newline46mondego>            int columnIndex = cursor.getColumnIndex(filePathColumn[0]);<newline46mondego>            String filePath = cursor.getString(columnIndex);<newline46mondego>            cursor.close();<newline46mondego><newline46mondego><newline46mondego>            Bitmap yourSelectedImage = BitmapFactory.decodeFile(filePath);<newline46mondego>        }<newline46mondego>    }<newline46mondego>}<newline46mondego>"
"7112splitHere46","20240995splitHere46","PipedOutputStream"
"7113splitHere46","20240995splitHere46","PipedInputStream"
"7114splitHere46","20241237splitHere46","on<PropertyName>Change"
"7115splitHere46","20241237splitHere46","on<PropertyName>Changed"
"7116splitHere46","20241237splitHere46","onSelectedChange=<doubleQuotes46>#handleFooSelectedChanged<doubleQuotes46>"
"7117splitHere46","20241237splitHere46","@FXML<newline46mondego>public void handleFooSelectedChanged(BooleanProperty observable, boolean oldValue, boolean newValue);<newline46mondego>"
"7118splitHere46","20241443splitHere46","String[] titles = {<doubleQuotes46>first name: <doubleQuotes46>, <doubleQuotes46>last name: <doubleQuotes46>, ...}<newline46mondego><newline46mondego>int i = 0;<newline46mondego>while((strLine = br.readLine())!= null)<newline46mondego>{<newline46mondego>    sb.append(titles[i] + strLine +<doubleQuotes46>\n<doubleQuotes46>);<newline46mondego>    i++;<newline46mondego>}<newline46mondego>"
"7119splitHere46","20241459splitHere46","LinkedHashMap"
"7120splitHere46","20241459splitHere46","LinkedHashMap(int initialCapacity, float loadFactor, boolean accessOrder)"
"7121splitHere46","20241459splitHere46","accessed"
"7122splitHere46","20241459splitHere46","class MyLinkedMap<K, V> extends LinkedHashMap<K, V><newline46mondego>{<newline46mondego><newline46mondego>    public V getValue(int i)<newline46mondego>    {<newline46mondego><newline46mondego>       Map.Entry<K, V>entry = this.getEntry(i);<newline46mondego>       if(entry == null) return null;<newline46mondego><newline46mondego>       return entry.getValue();<newline46mondego>    }<newline46mondego><newline46mondego>    public Map.Entry<K, V> getEntry(int i)<newline46mondego>    {<newline46mondego>        // check if negetive index provided<newline46mondego>        Set<Map.Entry<K,V>>entries = entrySet();<newline46mondego>        int j = 0;<newline46mondego><newline46mondego>        for(Map.Entry<K, V>entry : entries)<newline46mondego>            if(j++ == i)return entry;<newline46mondego><newline46mondego>        return null;<newline46mondego><newline46mondego>    }<newline46mondego><newline46mondego>}<newline46mondego>"
"7123splitHere46","20241459splitHere46","MyLinkedMap<String, Integer>map = new MyLinkedMap<>();<newline46mondego>map.put(<doubleQuotes46>a first<doubleQuotes46>, 1);<newline46mondego>map.put(<doubleQuotes46>a second<doubleQuotes46>, 2);<newline46mondego>map.put(<doubleQuotes46>a third<doubleQuotes46>, 3);<newline46mondego><newline46mondego>System.out.println(map.getValue(2));<newline46mondego>System.out.println(map.getEntry(1)); <newline46mondego>"
"7124splitHere46","20241459splitHere46","3<newline46mondego>a second=2<newline46mondego>"
"7125splitHere46","20241513splitHere46","File.separator // e.g. / or \<newline46mondego>File.pathSeparator // e.g. : or ;<newline46mondego>"
"7126splitHere46","20241513splitHere46","path + filename1"
"7127splitHere46","20241513splitHere46","File file = new File(path, filename1);<newline46mondego>System.out.println(file); <newline46mondego>"
"7128splitHere46","20241556splitHere46","res[]"
"7129splitHere46","20241556splitHere46","res[]"
"7130splitHere46","20241556splitHere46","final Connection.Response[] res = new Connection.Response[requiredArraySize];<newline46mondego>"
"7131splitHere46","20241556splitHere46","requiredArraySize"
"7132splitHere46","20241593splitHere46","int"
"7133splitHere46","20241593splitHere46","boolean"
"7134splitHere46","20241593splitHere46","char"
"7135splitHere46","20241593splitHere46","float"
"7136splitHere46","20241593splitHere46","double"
"7137splitHere46","20241593splitHere46","VehInfo vehinfo = new VehInfo(new int[20][150], 0, 0, new int[5]);<newline46mondego>"
"7138splitHere46","20241593splitHere46","private int mintime = 0;<newline46mondego>private int numvehicles = 1;<newline46mondego>"
"7139splitHere46","20241745splitHere46","String strVariable = <doubleQuotes46>String<doubleQuotes46><newline46mondego>sendKeys(strVariable).perform();<newline46mondego>"
"7140splitHere46","20241745splitHere46","sendKeys(<doubleQuotes46>String<doubleQuotes46>).perform();<newline46mondego>"
"7141splitHere46","20241798splitHere46","java.security.acl.NotOwnerException"
"7142splitHere46","20241798splitHere46","com.ourorganization.ourapp.NotOwnerException"
"7143splitHere46","20241848splitHere46","lsof"
"7144splitHere46","20241882splitHere46","dictionary_en.properties"
"7145splitHere46","20241882splitHere46","new Locale(<doubleQuotes46>nl<doubleQuotes46>)"
"7146splitHere46","20241901splitHere46","findElement(By.cssSelector(<doubleQuotes46>xxxxxxx<doubleQuotes46>));"
"7147splitHere46","20241901splitHere46","findElement(By.cssSelector(<doubleQuotes46>.autocomplete_listItem<doubleQuotes46>));"
"7148splitHere46","20241901splitHere46","<li class=<doubleQuotes46>autocomplete_listItem<doubleQuotes46> _value=<doubleQuotes46>2763<doubleQuotes46> __item=<doubleQuotes46><doubleQuotes46>><newline46mondego>Text - Asian </li><newline46mondego>"
"7149splitHere46","20241938splitHere46","public class EmployeeReader {<newline46mondego><newline46mondego>    public static void main(String[] args) throws IOException {<newline46mondego>        File file = new File(<doubleQuotes46>employees.txt<doubleQuotes46>);<newline46mondego>        BufferedReader br = new BufferedReader(new FileReader(file));<newline46mondego><newline46mondego>        String line;<newline46mondego>        List<Map<String, String>> list = new ArrayList<Map<String, String>>();<newline46mondego>        Map<String, String> map = new HashMap<String, String>();<newline46mondego>        while ((line = br.readLine()) != null) {<newline46mondego>            if (!line.trim().equals(<doubleQuotes46><doubleQuotes46>)) {<newline46mondego>                String[] tokens = line.split(<doubleQuotes46>:<doubleQuotes46>);<newline46mondego>                if (tokens[0].trim().equals(<doubleQuotes46>Name<doubleQuotes46>) || tokens[0].trim().equals(<doubleQuotes46>Salary<doubleQuotes46>)) {<newline46mondego>                    map.put(tokens[0].trim(),tokens[1].trim());                 <newline46mondego>                }<newline46mondego>            } else {<newline46mondego>                list.add(map);<newline46mondego>                map = new HashMap<String, String>();<newline46mondego>            }<newline46mondego>        }<newline46mondego>        list.add(map);<newline46mondego><newline46mondego>        printList(list);<newline46mondego>        br.close();<newline46mondego>    }<newline46mondego><newline46mondego>    public static void printList(List<Map<String, String>> list) {<newline46mondego>        for (Map<String, String> employee : list) {<newline46mondego>            System.out.println(<doubleQuotes46>EMPLOYEE<doubleQuotes46>);<newline46mondego>            for (Entry<String, String> entry : employee.entrySet()) {<newline46mondego>                System.out.println(<doubleQuotes46>Key: <doubleQuotes46> + entry.getKey());<newline46mondego>                System.out.println(<doubleQuotes46>Value: <doubleQuotes46> + entry.getValue());<newline46mondego>            }<newline46mondego>        }   <newline46mondego>    }<newline46mondego>}<newline46mondego>"
"7150splitHere46","20241950splitHere46","-- Java:<newline46mondego>  -- ant: (path to ant)<newline46mondego>  -- JNI: (path to JNI)<newline46mondego>  -- Java tests: YES (this one is optional)<newline46mondego>"
"7151splitHere46","20241950splitHere46","$JAVA_HOME"
"7152splitHere46","20241950splitHere46","$JAVA_HOME"
"7153splitHere46","20241950splitHere46","make"
"7154splitHere46","20241950splitHere46","make install"
"7155splitHere46","20242027splitHere46","public Object[][] showDialogWithTable() {<newline46mondego>   //do some needed actions<newline46mondego>   setVisible(true);<newline46mondego><newline46mondego>   //when user closes JDialog with a JTable collect data from the table<newline46mondego>   Object[][] data = collectData();<newline46mondego><newline46mondego>   return data;<newline46mondego>}<newline46mondego>"
"7156splitHere46","20242419splitHere46","String DateStr=<doubleQuotes46>2012-12-12<doubleQuotes46>;<newline46mondego>Date d = new SimpleDateFormat(<doubleQuotes46>yyyy-MM-dd<doubleQuotes46>).parse(DateStr); <newline46mondego><newline46mondego>java.sql.Date d1 = new java.sql.Date(d.getTime());<newline46mondego>"
"7157splitHere46","20242419splitHere46","pt.setDate(1,d1);<newline46mondego>"
"7158splitHere46","20242495splitHere46","...<newline46mondego>MyWindow myWindow = new MyWindow();<newline46mondego>UI.getCurrent().addWindow(myWindow);<newline46mondego>...<newline46mondego>"
"7159splitHere46","20242864splitHere46","android.net.sip.SipManager"
"7160splitHere46","20242864splitHere46","isSipWifiOnly"
"7161splitHere46","20242864splitHere46","pjsip"
"7162splitHere46","20242864splitHere46","pjsip"
"7163splitHere46","20242864splitHere46","pjsip"
"7164splitHere46","20242864splitHere46","pjsip"
"7165splitHere46","20242864splitHere46","pjsip"
"7166splitHere46","20242864splitHere46","psip"
"7167splitHere46","20242959splitHere46","Row"
"7168splitHere46","20242959splitHere46","Row"
"7169splitHere46","20242959splitHere46","Row"
"7170splitHere46","20243085splitHere46","SwingTimer"
"7171splitHere46","20243085splitHere46","SwingTimer"
"7172splitHere46","20243197splitHere46","// ArrayList<String> amountList=new ArrayList<String>();<newline46mondego>  String amount=null;<newline46mondego> try {<newline46mondego>            // Getting JSON Array<newline46mondego>            String your_json_response;<newline46mondego>            JSONArray responseArray = new JSONArray(your_json_response);<newline46mondego>            for(int j=0;j<responseArray.length();j++)<newline46mondego>            {<newline46mondego>                JSONArray spritPrice=responseArray.getJSONObject(i).JSONArray(<doubleQuotes46>spritPrice<doubleQuotes46>);<newline46mondego><newline46mondego>                int spritPrice= spritPrice.length();<newline46mondego><newline46mondego>                for(int i=0; i < spritPrice; i++ ){<newline46mondego><newline46mondego>                  JSONObject c = spritPrice.getJSONObject(i);<newline46mondego><newline46mondego>                     amount = c.getString(<doubleQuotes46>amount<doubleQuotes46>);<newline46mondego>                     // amountList.add(amount); <newline46mondego>                      System.out.println(amount);<newline46mondego>                       if(amount!=null)<newline46mondego>                          break;<newline46mondego>                    }<newline46mondego>                    if(amount!=null)<newline46mondego>                      break;<newline46mondego>                }<newline46mondego>            } catch (JSONException e) {<newline46mondego>            e.printStackTrace();<newline46mondego>            }<newline46mondego>"
"7173splitHere46","20243200splitHere46","FileOutputStream"
"7174splitHere46","20243200splitHere46","ObjectOuputStream"
"7175splitHere46","20243200splitHere46","ObjectOutputStream"
"7176splitHere46","20243200splitHere46","/* writing */<newline46mondego>public void writeSelling(List<String> wordLists) throws IOException {<newline46mondego>    fileOutPutStream = new FileOutputStream (file);<newline46mondego>    write= new ObjectOutputStream (fileOutPutStream);<newline46mondego>    for (String s : wordLists) {<newline46mondego>        write.writeObject(s);<newline46mondego>    }<newline46mondego>    write.close();<newline46mondego>    contador++;<newline46mondego>}<newline46mondego>"
"7177splitHere46","20243200splitHere46","writeSelling()"
"7178splitHere46","20243200splitHere46","/* calling method */<newline46mondego>List<String> wordLists = new ArrayList<String>();<newline46mondego>{ // it's probably loop<newline46mondego>    String wordList = // somehow receive list like word1 word2 word3; word4 word5 word6; code<newline46mondego>    wordLists.add(wordList);<newline46mondego>}<newline46mondego>writeSelling(wordLists);<newline46mondego>"
"7179splitHere46","20243200splitHere46","writeSelling()"
"7180splitHere46","20243286splitHere46","Executors.newSingleThreadScheduledExecutor(this);"
"7181splitHere46","20243286splitHere46","ScheduledThreadPoolExecutor"
"7182splitHere46","20243333splitHere46","toString"
"7183splitHere46","20243333splitHere46","pw.println(keywords);"
"7184splitHere46","20243333splitHere46","for (String keyword : keywords)<newline46mondego> {Â <newline46mondego>   pw.println(keyword.trim());<newline46mondego> } <newline46mondego>"
"7185splitHere46","20243333splitHere46","for (String keyword : keywords)<newline46mondego> {Â <newline46mondego>   pw.print(keyword);<newline46mondego> } <newline46mondego>"
"7186splitHere46","20243364splitHere46","uploadFileName"
"7187splitHere46","20243364splitHere46","upload"
"7188splitHere46","20243364splitHere46","fileUpload"
"7189splitHere46","20243364splitHere46","uploadContentType"
"7190splitHere46","20243364splitHere46","private File upload;<newline46mondego>private String uploadContentType;<newline46mondego>private String uploadFileName;<newline46mondego>//getters ans setters assumed<newline46mondego>"
"7191splitHere46","20243364splitHere46","name"
"7192splitHere46","20243364splitHere46","<s:file name=<doubleQuotes46>upload<doubleQuotes46>/><newline46mondego>"
"7193splitHere46","20243416splitHere46","private static String printDependencies(ConcurrentHashMap<String, LinkedList<String>> theTable, LinkedList<String> dependencies, ConcurrentHashMap<String, Boolean> alreadyPrinted) {<newline46mondego><newline46mondego>    String output = <doubleQuotes46><doubleQuotes46>;<newline46mondego><newline46mondego>    for (String d : dependencies) {<newline46mondego>        boolean isPrinted = alreadyPrinted.containsKey(d);<newline46mondego>        if (!isPrinted) {<newline46mondego>            output += <doubleQuotes46> <doubleQuotes46> + d;<newline46mondego>            alreadyPrinted.put(d, true);<newline46mondego>        }           <newline46mondego>    }<newline46mondego><newline46mondego>    for (String d : dependencies) {<newline46mondego>        LinkedList<String> key = theTable.get(d);<newline46mondego>        if (key != null) {<newline46mondego>            LinkedList<String> unvisited = new LinkedList<String>();<newline46mondego>            for (String filename : key)<newline46mondego>                if (!alreadyPrinted.containsKey(filename))<newline46mondego>                    unvisited.add(filename);<newline46mondego>            if (unvisited != null)            <newline46mondego>                output += printDependencies(theTable, unvisited, alreadyPrinted);               <newline46mondego>        }<newline46mondego>    }<newline46mondego><newline46mondego>    return output;<newline46mondego>}<newline46mondego><newline46mondego>private static void printDependencies(ConcurrentHashMap<String, LinkedList<String>> theTable, ConcurrentLinkedQueue<String> toProcess) {<newline46mondego>    String output = <doubleQuotes46><doubleQuotes46>; <newline46mondego><newline46mondego>    for (String current : toProcess) {<newline46mondego>        ConcurrentHashMap<String, Boolean> alreadyPrinted = new ConcurrentHashMap<String, Boolean>(); // Keeps track of dependencies already printed<newline46mondego>        output += current + <doubleQuotes46>:<doubleQuotes46> + printDependencies(theTable, theTable.get(current), alreadyPrinted) + <doubleQuotes46>\n<doubleQuotes46>;<newline46mondego>    }<newline46mondego><newline46mondego>    System.out.println(output);     <newline46mondego>}<newline46mondego>"
"7194splitHere46","20243582splitHere46","public class Morze {<newline46mondego><newline46mondego>   private Context c;       <newline46mondego><newline46mondego>   public Morze(Context c) {<newline46mondego>      this.c = c;<newline46mondego>      Resources resources = this.c.getResources();<newline46mondego>   }<newline46mondego>}<newline46mondego>"
"7195splitHere46","20243582splitHere46","public void init(Context c) {<newline46mondego>   this.c = c;<newline46mondego>   this.resources = this.c.getResources();<newline46mondego>}<newline46mondego>"
"7196splitHere46","20243788splitHere46","driver.findElement(By.xpath(<doubleQuotes46>//option[@value='44']<doubleQuotes46>)).click();<newline46mondego>driver.findElement(By.xpath(<doubleQuotes46>//*[@title='Add Language']<doubleQuotes46>)).click();<newline46mondego>"
"7197splitHere46","20243827splitHere46","@SuppressWarnings(<doubleQuotes46>unused<doubleQuotes46>)"
"7198splitHere46","20243989splitHere46","^(?:0091|\\+91|0)[7-9][0-9]{9}$<newline46mondego>"
"7199splitHere46","20243989splitHere46","^"
"7200splitHere46","20243989splitHere46","$"
"7201splitHere46","20243989splitHere46","0091"
"7202splitHere46","20243989splitHere46","+91"
"7203splitHere46","20243989splitHere46","0"
"7204splitHere46","20243989splitHere46","^0091|\+91|0$<newline46mondego>"
"7205splitHere46","20244065splitHere46","getPerimiter()"
"7206splitHere46","20244065splitHere46","public abstract double getPerimiter();<newline46mondego>"
"7207splitHere46","20244065splitHere46","public abstract class Polygon {<newline46mondego><newline46mondego>  protected double area; //not private, we want sub-classes to see this field<newline46mondego><newline46mondego>  public Polygon(double area) {<newline46mondego>    this.area = area;<newline46mondego>  }<newline46mondego><newline46mondego>  public abstract double getPerimiter();<newline46mondego>}<newline46mondego>"
"7208splitHere46","20244065splitHere46","public class Square extends Polygon {<newline46mondego><newline46mondego>  public Square(double area) {<newline46mondego>    super(area);<newline46mondego>  }<newline46mondego><newline46mondego>  public double getPerimiter() {<newline46mondego>    return Math.sqrt(area) * 4;<newline46mondego>  }<newline46mondego><newline46mondego>}<newline46mondego>"
"7209splitHere46","20244333splitHere46","public Dictionary<Object,Object> getDocumentProperties()"
"7210splitHere46","20244333splitHere46","AbstractDocument"
"7211splitHere46","20244333splitHere46","Document"
"7212splitHere46","20244344splitHere46","PoorServlet"
"7213splitHere46","20244344splitHere46","ServiceServlet"
"7214splitHere46","20244344splitHere46","@Component"
"7215splitHere46","20244344splitHere46","@Service"
"7216splitHere46","20244344splitHere46","sling.servlet.paths"
"7217splitHere46","20244344splitHere46","@SlingServlet"
"7218splitHere46","20244344splitHere46","@Component"
"7219splitHere46","20244344splitHere46","@Service"
"7220splitHere46","20244344splitHere46","@SlingServlet(paths=<doubleQuotes46>/bin/my/path<doubleQuotes46>)<newline46mondego>public class ServiceServlet extends SlingAllMethodsServlet {<newline46mondego>...<newline46mondego>"
"7221splitHere46","20244398splitHere46","& "
"7222splitHere46","20244398splitHere46","12:30& PM<newline46mondego>"
"7223splitHere46","20244398splitHere46","<td class='time' style='border:1px solid black;font-size:10pt;vertical-align:top;font-style:normal;text-decoration:none;text-decoration:none;text-align:center;padding-right:3px;padding-top:1px;padding-left:3px;'>12:<font>30</font> PM</td><newline46mondego>"
"7224splitHere46","20244407splitHere46","BoxLayout"
"7225splitHere46","20244407splitHere46","FlowLayout"
"7226splitHere46","20244407splitHere46","JPanel"
"7227splitHere46","20244407splitHere46","pnData.add(txtEventList, BorderLayout.CENTER);"
"7228splitHere46","20244407splitHere46","BorderLayout.CENTER"
"7229splitHere46","20244407splitHere46","BorderLayout"
"7230splitHere46","20244407splitHere46","JTextField"
"7231splitHere46","20244407splitHere46","JTextField(int cols)"
"7232splitHere46","20244407splitHere46","JTable"
"7233splitHere46","20244407splitHere46","frEventEdit.setVisible(true);"
"7234splitHere46","20244407splitHere46","SwingUtilities.invokeLater(new Runnable() {<newline46mondego><newline46mondego>    @Override<newline46mondego>    public void run() {<newline46mondego>        frEventEdit.setVisible(true);<newline46mondego>    }<newline46mondego>});<newline46mondego>"
"7235splitHere46","20244462splitHere46","List<String>"
"7236splitHere46","20244462splitHere46","crawl_list1"
"7237splitHere46","20244462splitHere46","subList"
"7238splitHere46","20244462splitHere46","ArrayList"
"7239splitHere46","20244462splitHere46","subList"
"7240splitHere46","20244462splitHere46","ArrayList"
"7241splitHere46","20244462splitHere46","ArrayList"
"7242splitHere46","20244462splitHere46","ArrayList"
"7243splitHere46","20244462splitHere46","ArrayList<String> crawl_list1 = new ArrayList<String>(tmp.subList(0, start));<newline46mondego>ArrayList<String> crawl_list2 = new ArrayList<String>(tmp.subList(start+1, middle));<newline46mondego>ArrayList<String> crawl_list3 = new ArrayList<String>(tmp.subList(middle+1, end));<newline46mondego>"
"7244splitHere46","20244513splitHere46","bar.Y = (foo.X == 15 ? 0 : (foo.X == 30 ? 1 : null))<newline46mondego>"
"7245splitHere46","20244530splitHere46","sum"
"7246splitHere46","20244530splitHere46","maximum"
"7247splitHere46","20244530splitHere46","minimum"
"7248splitHere46","20244530splitHere46","0"
"7249splitHere46","20244530splitHere46","number[0]"
"7250splitHere46","20244530splitHere46","number[0]"
"7251splitHere46","20244530splitHere46","int sum = 0;<newline46mondego>int maximum = number[0];<newline46mondego>int minimum = number[0];<newline46mondego>"
"7252splitHere46","20244530splitHere46","number.length"
"7253splitHere46","20244530splitHere46","number"
"7254splitHere46","20244530splitHere46","int"
"7255splitHere46","20244530splitHere46","number"
"7256splitHere46","20244530splitHere46","sum"
"7257splitHere46","20244530splitHere46","number[i]"
"7258splitHere46","20244530splitHere46","number[i]"
"7259splitHere46","20244530splitHere46","int"
"7260splitHere46","20244530splitHere46","number"
"7261splitHere46","20244530splitHere46","i"
"7262splitHere46","20244530splitHere46","i"
"7263splitHere46","20244530splitHere46","number"
"7264splitHere46","20244530splitHere46","maximum = Math.max(maximum, number[i]);<newline46mondego>minimum = Math.min(minimum, number[i]);<newline46mondego>"
"7265splitHere46","20244530splitHere46","if"
"7266splitHere46","20244562splitHere46","final Pattern pattern = Pattern.compile(<doubleQuotes46>(PDF|XLSX|CVS)<doubleQuotes46>);<newline46mondego>final Matcher matcher = pattern.matcher(<doubleQuotes46>Make the PDF<doubleQuotes46>);<newline46mondego><newline46mondego>if (matcher.find()) {<newline46mondego>  setExportType(matcher.group());<newline46mondego>}<newline46mondego>"
"7267splitHere46","20244593splitHere46","Map<String, Object> rc = ((BindingProvider) port).getRequestContext();<newline46mondego>rc.put(BindingProvider.ENDPOINT_ADDRESS_PROPERTY, ENDPOINT);<newline46mondego>"
"7268splitHere46","20244725splitHere46","public static double add(double i , double j)<newline46mondego>{<newline46mondego>   return i + j;<newline46mondego>}<newline46mondego>"
"7269splitHere46","20244727splitHere46","public class Marks {<newline46mondego><newline46mondego>/**<newline46mondego> * @param args the command line arguments<newline46mondego> */<newline46mondego>public static void main(String[] args) {<newline46mondego><newline46mondego>    Scanner scan = new Scanner(System.in);<newline46mondego><newline46mondego>    int[] array = new int[23];<newline46mondego>    int num = 0;<newline46mondego>    int count = 0;<newline46mondego>    int total = 1;<newline46mondego><newline46mondego>    System.out.println (<doubleQuotes46>Enter students marks in the range 0 to 100\n<doubleQuotes46>);<newline46mondego><newline46mondego>        loop: for (count = 0; count <= 20; count++) {<newline46mondego>            System.out.println(<doubleQuotes46>Enter a number:<doubleQuotes46>);<newline46mondego>            num = scan.nextInt();<newline46mondego>            if (num < 0 || num > 100) {<newline46mondego>                break loop;<newline46mondego><newline46mondego>            }<newline46mondego>            array[count] = num;<newline46mondego>            total = count+1;<newline46mondego>        }<newline46mondego>    System.out.println (<doubleQuotes46>How many times a number between 0-100 occur.<doubleQuotes46>);<newline46mondego><newline46mondego>    String[] asterisk = {<doubleQuotes46>0- 29   | <doubleQuotes46>, <doubleQuotes46>30- 39  | <doubleQuotes46>,<doubleQuotes46>40- 69  | <doubleQuotes46>, <doubleQuotes46>70- 100 | <doubleQuotes46>}; //4 strings<newline46mondego><newline46mondego>    for (count = 1; count <= total; count++)<newline46mondego>    {<newline46mondego>        num=array[count];<newline46mondego>        if (num >=0 && num<=29) asterisk [0] +=<doubleQuotes46>*<doubleQuotes46>;<newline46mondego>        else if (num>29 && num<=39) asterisk[1] +=<doubleQuotes46>*<doubleQuotes46>;<newline46mondego>        else if (num>39 && num <=69) asterisk[2] +=<doubleQuotes46>*<doubleQuotes46>;<newline46mondego>        else if (num >69 && num <=100) asterisk[3] +=<doubleQuotes46>*<doubleQuotes46>;<newline46mondego>    }<newline46mondego>    for (count =0;count < 4;count++)<newline46mondego>        System.out.println(asterisk[count]);<newline46mondego>    System.out.println(<doubleQuotes46>The total amount of students is <doubleQuotes46> + total);<newline46mondego>}<newline46mondego>}<newline46mondego>"
"7270splitHere46","20244727splitHere46","Enter students marks in the range 0 to 100<newline46mondego><newline46mondego>Enter a number:<newline46mondego>1<newline46mondego><newline46mondego>Enter a number:<newline46mondego>10<newline46mondego>Enter a number:<newline46mondego>50<newline46mondego>Enter a number:<newline46mondego>111<newline46mondego>How many times a number between 0-100 occur.<newline46mondego>0- 29   | **<newline46mondego>30- 39  | <newline46mondego>40- 69  | *<newline46mondego>70- 100 | <newline46mondego>The total amount of students is 3<newline46mondego>"
"7271splitHere46","20244837splitHere46","total size of line"
"7272splitHere46","20244837splitHere46","length of the string"
"7273splitHere46","20244865splitHere46","Arraylist<Integer> marks = new ArrayList<Integer>();<newline46mondego>"
"7274splitHere46","20244865splitHere46","public void addQuiz(int m) {<newline46mondego>    marks.add(m)<newline46mondego>}<newline46mondego>"
"7275splitHere46","20245272splitHere46","PropertySourcesPlaceholderConfigurer"
"7276splitHere46","20245272splitHere46","<bean class=<doubleQuotes46>org.springframework.context.support.PropertySourcesPlaceholderConfigurer<doubleQuotes46>><newline46mondego>    <property name=<doubleQuotes46>environment<doubleQuotes46>><newline46mondego>        <bean class=<doubleQuotes46>org.springframework.web.context.support.StandardServletEnvironment<doubleQuotes46>/><newline46mondego>    </property><newline46mondego></bean><newline46mondego>"
"7277splitHere46","20245272splitHere46","<context:property-placeholder location=<doubleQuotes46>classpath:context-core.properties<doubleQuotes46>/><newline46mondego>"
"7278splitHere46","20245272splitHere46","PlaceholderConfigurer"
"7279splitHere46","20245272splitHere46","applicationContext.xml"
"7280splitHere46","20245302splitHere46","getSreaderInstance()"
"7281splitHere46","20245386splitHere46","test02"
"7282splitHere46","20245386splitHere46","test01"
"7283splitHere46","20245386splitHere46","test03"
"7284splitHere46","20245386splitHere46","test02"
"7285splitHere46","20245386splitHere46","Test03"
"7286splitHere46","20245386splitHere46","public class Test03 {<newline46mondego><newline46mondego>    private Test01 test01;<newline46mondego>    private Test02 test02;<newline46mondego><newline46mondego>    public void doSomething() {<newline46mondego>        test01.doSomething();<newline46mondego>    }<newline46mondego><newline46mondego>    public void printSomething() {<newline46mondego>        test02.printSomething();<newline46mondego>    }<newline46mondego><newline46mondego>}<newline46mondego>"
"7287splitHere46","20245386splitHere46","test01"
"7288splitHere46","20245562splitHere46","FileOutputStream"
"7289splitHere46","20245562splitHere46","OutputStreamWriter"
"7290splitHere46","20245562splitHere46","FileOutputStream fos = new FileOutputStream(<doubleQuotes46>test.out<doubleQuotes46>);<newline46mondego>OutputStreamWriter osw = new OutputStreamWriter(fos, <doubleQuotes46>UTF-8<doubleQuotes46>);<newline46mondego>Writer out = new BufferedWriter(osw);<newline46mondego>...<newline46mondego>out.write(ch);<newline46mondego>...<newline46mondego>out.close();<newline46mondego>"
"7291splitHere46","20245586splitHere46","public class MyClass<newline46mondego>{<newline46mondego>   private HashMap<Key, Value> myHashMap = new HashMap<>();<newline46mondego><newline46mondego>   public void myMethod()<newline46mondego>   {<newline46mondego>     myHashMap.put(myKeyVariable, myValueVariable);<newline46mondego>   }<newline46mondego>}<newline46mondego>"
"7292splitHere46","20245606splitHere46","@Id @OneToOne<newline46mondego>@JoinColumn(name=<doubleQuotes46>id_client1<doubleQuotes46>)<newline46mondego>private Client newClient;<newline46mondego>@ManyToOne<newline46mondego>@JoinColumn(name=<doubleQuotes46>id_client2<doubleQuotes46>)<newline46mondego>private Client oldFella;<newline46mondego>"
"7293splitHere46","20245696splitHere46","HttpServletRequest#getParameter()"
"7294splitHere46","20245696splitHere46","ExternalContext#getRequestParameterMap()"
"7295splitHere46","20245696splitHere46","javax.servlet.*"
"7296splitHere46","20245696splitHere46","@ManagedProperty"
"7297splitHere46","20245696splitHere46","<f:viewParam>"
"7298splitHere46","20245696splitHere46","URLDecoder"
"7299splitHere46","20245696splitHere46","HttpServletRequest#getQueryString()"
"7300splitHere46","20245696splitHere46","/conf/server.xml"
"7301splitHere46","20245696splitHere46","URIEncoding"
"7302splitHere46","20245696splitHere46","<Connector>"
"7303splitHere46","20245696splitHere46","UTF-8"
"7304splitHere46","20245696splitHere46","<Connector ... URIEncoding=<doubleQuotes46>UTF-8<doubleQuotes46> /><newline46mondego>"
"7305splitHere46","20245727splitHere46","original pixel + (original pixel << 8 ) + (original pixel <<16)<newline46mondego>"
"7306splitHere46","20245998splitHere46","buttons[i] = new JButton(<doubleQuotes46><doubleQuotes46> + a_btnNames[i]);<newline46mondego>//buttons[i] should now be added to the panel<newline46mondego>"
"7307splitHere46","20245998splitHere46","for(int i = 0; i < buttons.length; i++){<newline46mondego>    buttons[i] = new JButton(<doubleQuotes46><doubleQuotes46> + a_btnNames[i]); //create button & add to array<newline46mondego>    buttons[i].addActionListener(this); //add an action listener to the current button<newline46mondego>    panel.add(buttons[i]); //add that same button to the panel<newline46mondego><newline46mondego>}<newline46mondego>"
"7308splitHere46","20246003splitHere46","JSONArray"
"7309splitHere46","20246003splitHere46","JSONObject"
"7310splitHere46","20246003splitHere46","try {<newline46mondego>        JSONArray jObj = new JSONArray(json);<newline46mondego>    } catch (JSONException e) {<newline46mondego>        Log.e(<doubleQuotes46>JSON Parser<doubleQuotes46>, <doubleQuotes46>Error parsing data <doubleQuotes46> + e.toString());<newline46mondego>    }<newline46mondego>"
"7311splitHere46","20246081splitHere46","RandomAccessFile"
"7312splitHere46","20246091splitHere46","$unwind"
"7313splitHere46","20246091splitHere46","$sort"
"7314splitHere46","20246091splitHere46","$first"
"7315splitHere46","20246091splitHere46","db.collection.aggregate([<newline46mondego>    { $match: { _id: new ObjectId(<doubleQuotes46>526d89571cd72ce9dbb6b443<doubleQuotes46>) } },<newline46mondego>    { $unwind: <doubleQuotes46>$array<doubleQuotes46> },<newline46mondego>    { $sort: { <doubleQuotes46>array.value<doubleQuotes46>: -1 } },<newline46mondego>    { $group: { <newline46mondego>        _id: null, <newline46mondego>        text: { $first: <doubleQuotes46>$array.text<doubleQuotes46> }, <newline46mondego>        value: { $max: <doubleQuotes46>$array.value<doubleQuotes46> } <newline46mondego>    } }<newline46mondego>]);<newline46mondego>"
"7316splitHere46","20246091splitHere46","{<newline46mondego>    <doubleQuotes46>result<doubleQuotes46> : [<newline46mondego>        {<newline46mondego>            <doubleQuotes46>_id<doubleQuotes46> : null,<newline46mondego>            <doubleQuotes46>text<doubleQuotes46> : <doubleQuotes46>this is another nested document<doubleQuotes46>,<newline46mondego>            <doubleQuotes46>value<doubleQuotes46> : 2<newline46mondego>        }<newline46mondego>    ],<newline46mondego>    <doubleQuotes46>ok<doubleQuotes46> : 1<newline46mondego>}<newline46mondego>"
"7317splitHere46","20246091splitHere46","_id"
"7318splitHere46","20246091splitHere46","$group"
"7319splitHere46","20246091splitHere46","{ $group: { <newline46mondego>    _id: null, <newline46mondego>    original_id: { $first: <doubleQuotes46>$_id<doubleQuotes46> },<newline46mondego>    text: { $first: <doubleQuotes46>$array.text<doubleQuotes46> }, <newline46mondego>    value: { $max: <doubleQuotes46>$array.value<doubleQuotes46> } <newline46mondego>} }<newline46mondego>"
"7320splitHere46","20246101splitHere46","JSONObject jObj = new JSONObject(loadJSONFromAsset());<newline46mondego>JSONObject objectName = jObj.getJSONObject(<doubleQuotes46>body<doubleQuotes46>).getJSONObject(<doubleQuotes46>name<doubleQuotes46>);<newline46mondego>String test = objectName.getString(<doubleQuotes46>test<doubleQuotes46>); //return abc<newline46mondego>"
"7321splitHere46","20246151splitHere46","if (department=<doubleQuotes46>London<doubleQuotes46>)<newline46mondego>"
"7322splitHere46","20246151splitHere46","if (<doubleQuotes46>London<doubleQuotes46>.equals(department))<newline46mondego>"
"7323splitHere46","20246151splitHere46","if(department =<doubleQuotes46>Dublin<doubleQuotes46>)"
"7324splitHere46","20246215splitHere46","ServletContextAttributeListener"
"7325splitHere46","20246286splitHere46","static void main()"
"7326splitHere46","20246478splitHere46","SwingWorker.execute()"
"7327splitHere46","20246478splitHere46","println()"
"7328splitHere46","20246478splitHere46","OutputStream"
"7329splitHere46","20246478splitHere46","write()"
"7330splitHere46","20246478splitHere46","SwingUtilities.invokeLater()"
"7331splitHere46","20246478splitHere46","class TextAreaOut extends OutputStream implements Runnable {<newline46mondego>    JTextArea text;<newline46mondego>    String buffer = <doubleQuotes46><doubleQuotes46>;<newline46mondego><newline46mondego>    TextAreaOut(JTextArea text) {<newline46mondego>        this.text = text;<newline46mondego>        System.setOut(new PrintStream(this));<newline46mondego>    }<newline46mondego><newline46mondego>    @Override<newline46mondego>    public synchronized void run() {<newline46mondego>        text.append(buffer);<newline46mondego>        buffer = <doubleQuotes46><doubleQuotes46>;<newline46mondego>    }<newline46mondego><newline46mondego>    @Override<newline46mondego>    public synchronized void write(int b) throws IOException {<newline46mondego>        if(buffer.length() == 0) {<newline46mondego>            SwingUtilities.invokeLater(this);<newline46mondego>        }<newline46mondego>        buffer += (char)b;<newline46mondego>    }<newline46mondego>}<newline46mondego>"
"7332splitHere46","20246487splitHere46","public static void main(String[] args) {<newline46mondego>    IPlayer human = new HumanPlayer(); // <-- you have to create this class (assignment)<newline46mondego>    IPlayer computer = new ComputerPlayer20059226();<newline46mondego>    Board board = new Board(16, 16);<newline46mondego>    Connect4 connect = new Connect4(human, computer, board);<newline46mondego>    // do something with the objects        <newline46mondego>}<newline46mondego>"
"7333splitHere46","20246487splitHere46","IPlayer"
"7334splitHere46","20246487splitHere46","public class HumanPlayer extends IPlayer {<newline46mondego>    ...<newline46mondego>}<newline46mondego>"
"7335splitHere46","20246487splitHere46","IPlayer"
"7336splitHere46","20246487splitHere46","AbstractPlayer"
"7337splitHere46","20246487splitHere46","IPlayer"
"7338splitHere46","20246487splitHere46","public abstract class IPlayer { // <-- bad naming<newline46mondego>"
"7339splitHere46","20246487splitHere46","public boolean isWin(Board board)"
"7340splitHere46","20246487splitHere46","Connect4"
"7341splitHere46","20246487splitHere46","Board"
"7342splitHere46","20246487splitHere46","Connect4"
"7343splitHere46","20246487splitHere46","Board"
"7344splitHere46","20246582splitHere46","attribute1"
"7345splitHere46","20246582splitHere46","//populated<newline46mondego>    List<MyClass> yourList;<newline46mondego><newline46mondego>    List<Integer> listbyAttribute = FluentIterable.from(yourList)<newline46mondego>            .transform(new Function<MyClass, Integer>() {<newline46mondego>        public Integer apply(MyClass f) {<newline46mondego>            return f.getAttribute1();<newline46mondego>        }<newline46mondego>    }).toList();<newline46mondego>"
"7346splitHere46","20246653splitHere46","<project xmlns=<doubleQuotes46>http://maven.apache.org/POM/4.0.0<doubleQuotes46> xmlns:xsi=<doubleQuotes46>http://www.w3.org/2001/XMLSchema-instance<doubleQuotes46><newline46mondego>         xsi:schemaLocation=<doubleQuotes46>http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd<doubleQuotes46>><newline46mondego>    <modelVersion>4.0.0</modelVersion><newline46mondego><newline46mondego>    <groupId>mavenKris</groupId><newline46mondego>    <artifactId>mavenKris</artifactId><newline46mondego>    <version>1.0-SNAPSHOT</version><newline46mondego>    <packaging>jar</packaging><newline46mondego><newline46mondego>    <name>mavenKris</name><newline46mondego>    <url>http://maven.apache.org</url><newline46mondego><newline46mondego>    <build><newline46mondego>        <plugins><newline46mondego>            <plugin><newline46mondego>                <groupId>org.apache.maven.plugins</groupId><newline46mondego>                <artifactId>maven-compiler-plugin</artifactId><newline46mondego>                <version>3.1</version><newline46mondego>                <configuration><newline46mondego>                    <source>1.6</source><newline46mondego>                    <target>1.6</target><newline46mondego>                </configuration><newline46mondego>            </plugin><newline46mondego>        </plugins><newline46mondego>    </build><newline46mondego>    <repositories><newline46mondego>        <repository><newline46mondego>            <id>anorak-releases</id><newline46mondego>            <url>http://ip-10-40-3-96.cloud.trendinglines.co.uk:8081/nexus/content/repositories/releases/</url><newline46mondego>            <releases><newline46mondego>                <enabled>true</enabled><newline46mondego>            </releases><newline46mondego>            <snapshots><newline46mondego>                <enabled>false</enabled><newline46mondego>            </snapshots><newline46mondego>        </repository><newline46mondego><newline46mondego>        <repository><newline46mondego>            <id>atlassian-releases</id><newline46mondego>            <url>http://repository.opencastproject.org/nexus/content/repositories/atlassian/</url><newline46mondego>            <releases><newline46mondego>                <enabled>true</enabled><newline46mondego>            </releases><newline46mondego>            <snapshots><newline46mondego>                <enabled>false</enabled><newline46mondego>            </snapshots><newline46mondego>        </repository><newline46mondego><newline46mondego>        <repository><newline46mondego>            <id>central</id><newline46mondego>            <name>Maven Central</name><newline46mondego>            <url>http://repo1.maven.org/maven2/</url><newline46mondego>        </repository><newline46mondego>    </repositories><newline46mondego><newline46mondego><newline46mondego><newline46mondego>    <properties><newline46mondego>        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding><newline46mondego>    </properties><newline46mondego><newline46mondego>    <dependencies><newline46mondego>        <dependency><newline46mondego>            <groupId>junit</groupId><newline46mondego>            <artifactId>junit</artifactId><newline46mondego>            <version>3.8.1</version><newline46mondego>            <scope>test</scope><newline46mondego>        </dependency><newline46mondego>        <dependency><newline46mondego>            <groupId>org.apache.hadoop</groupId><newline46mondego>            <artifactId>hadoop-core</artifactId><newline46mondego>            <version>1.0.3-gphd-1.2.0.0</version><newline46mondego>            <scope>provided</scope><newline46mondego>        </dependency><newline46mondego>    </dependencies><newline46mondego><newline46mondego></project><newline46mondego>"
"7347splitHere46","20246653splitHere46","<dependency><newline46mondego>        <groupId>org.apache.hadoop</groupId><newline46mondego>        <artifactId>hadoop-core</artifactId><newline46mondego>        <version>0.20.2</version><newline46mondego>    </dependency><newline46mondego>"
"7348splitHere46","20246700splitHere46","long"
"7349splitHere46","20246700splitHere46","double size = totalBlocks * blockSize / 1073741824d;<newline46mondego>"
"7350splitHere46","20246700splitHere46","d"
"7351splitHere46","20246742splitHere46","net.sf.jasperreports.export.xls.sheet.footer.center<newline46mondego>net.sf.jasperreports.export.xls.sheet.footer.left<newline46mondego>net.sf.jasperreports.export.xls.sheet.footer.right<newline46mondego>net.sf.jasperreports.export.xls.sheet.header.center<newline46mondego>net.sf.jasperreports.export.xls.sheet.header.left<newline46mondego>net.sf.jasperreports.export.xls.sheet.header.right<newline46mondego>"
"7352splitHere46","20246748splitHere46","String escaped = StringEscapeUtils.escapeJava(String str)<newline46mondego>"
"7353splitHere46","20246752splitHere46","@Override<newline46mondego>protected Void doInBackground(Void... params) {<newline46mondego><newline46mondego>    try {<newline46mondego>        DefaultHttpClient httpclient = new DefaultHttpClient();<newline46mondego><newline46mondego>        String user = <doubleQuotes46>user@gmail.com<doubleQuotes46>;<newline46mondego>        String pass = <doubleQuotes46>password<doubleQuotes46>;<newline46mondego>        String source = <doubleQuotes46>Cloud%20Printing%20Test<doubleQuotes46>;<newline46mondego><newline46mondego>        HttpGet authGet = new HttpGet(<newline46mondego>                <doubleQuotes46>https://www.google.com/accounts/ClientLogin?accountType=HOSTED_OR_GOOGLE&Email=<doubleQuotes46><newline46mondego>                        + user<newline46mondego>                        + <doubleQuotes46>&Passwd=<doubleQuotes46><newline46mondego>                        + pass<newline46mondego>                        + <doubleQuotes46>&service=cloudprint&source=<doubleQuotes46> + source);<newline46mondego><newline46mondego>        HttpResponse httpResponse;<newline46mondego><newline46mondego>        httpResponse = httpclient.execute(authGet);<newline46mondego><newline46mondego>        String authResponse = EntityUtils<newline46mondego>                .toString(httpResponse.getEntity());<newline46mondego>        String authKey = authResponse.substring(authResponse<newline46mondego>                .indexOf(<doubleQuotes46>Auth=<doubleQuotes46>) + 5);<newline46mondego>        authKey = authKey.replace(<doubleQuotes46>\n<doubleQuotes46>, <doubleQuotes46><doubleQuotes46>);<newline46mondego><newline46mondego>        MyLog.d(TAG, <doubleQuotes46>Auth key: <doubleQuotes46> + authKey);<newline46mondego><newline46mondego>        HttpPost printPost = new HttpPost(<newline46mondego>                <doubleQuotes46>https://www.google.com/cloudprint/submit?output=json<doubleQuotes46>);<newline46mondego>        printPost.setHeader(<doubleQuotes46>Authorization<doubleQuotes46>, <doubleQuotes46>GoogleLogin auth=<doubleQuotes46> + authKey);<newline46mondego>        printPost.setHeader(<doubleQuotes46>X-CloudPrint-Proxy<doubleQuotes46>, source);<newline46mondego><newline46mondego>        List<NameValuePair> nameValuePairs = new ArrayList<NameValuePair>();<newline46mondego>        nameValuePairs.add(new BasicNameValuePair(<doubleQuotes46>printerid<doubleQuotes46>, <doubleQuotes46>ID<doubleQuotes46>));<newline46mondego>        nameValuePairs.add(new BasicNameValuePair(<doubleQuotes46>title<doubleQuotes46>, <doubleQuotes46>TEST<doubleQuotes46>));<newline46mondego>        nameValuePairs.add(new BasicNameValuePair(<doubleQuotes46>capabilities<doubleQuotes46>, <doubleQuotes46>{capabilities=[]}<doubleQuotes46>));<newline46mondego>        nameValuePairs.add(new BasicNameValuePair(<doubleQuotes46>content<doubleQuotes46>, <doubleQuotes46>123<doubleQuotes46>));<newline46mondego>        nameValuePairs.add(new BasicNameValuePair(<doubleQuotes46>contentType<doubleQuotes46>, <doubleQuotes46>text/plain<doubleQuotes46>));<newline46mondego>        printPost.setEntity(new UrlEncodedFormEntity(nameValuePairs));<newline46mondego><newline46mondego>        HttpResponse printResponse = httpclient.execute(printPost);<newline46mondego>        String lol = EntityUtils.toString(printResponse.getEntity());<newline46mondego><newline46mondego>    } catch (ClientProtocolException e) {<newline46mondego>        e.printStackTrace();<newline46mondego>    } catch (IOException e) {<newline46mondego>        e.printStackTrace();<newline46mondego>    }<newline46mondego>    return null;<newline46mondego>}<newline46mondego>"
"7354splitHere46","20246752splitHere46","File file = new File(<doubleQuotes46>file.pdf<doubleQuotes46>);<newline46mondego>FileBody fb = new FileBody(file);<newline46mondego>MultipartEntityBuilder builder = MultipartEntityBuilder.create();<newline46mondego>builder.setMode(HttpMultipartMode.BROWSER_COMPATIBLE);<newline46mondego>builder.addTextBody(<doubleQuotes46>printerid<doubleQuotes46>, <doubleQuotes46>ID<doubleQuotes46>);<newline46mondego>builder.addTextBody(<doubleQuotes46>title<doubleQuotes46>, <doubleQuotes46>TEST2<doubleQuotes46>);<newline46mondego>builder.addTextBody(<doubleQuotes46>capabilities<doubleQuotes46>, <doubleQuotes46>{capabilities=[]}<doubleQuotes46>);<newline46mondego>builder.addTextBody(<doubleQuotes46>contentType<doubleQuotes46>, <doubleQuotes46>application/pdf<doubleQuotes46>);<newline46mondego>builder.addPart(<doubleQuotes46>content<doubleQuotes46>, fb);<newline46mondego>printPost.setEntity(builder.build());<newline46mondego>"
"7355splitHere46","20246855splitHere46","var system = require('system');<newline46mondego>var fs = require('fs');<newline46mondego>var args = system.args;<newline46mondego><newline46mondego>if (args.length === 1) {<newline46mondego>  console.log('download.js <filename>');<newline46mondego>  phantom.exit(1);<newline46mondego>} else {<newline46mondego>    var filename = args[1];<newline46mondego>    var stream = fs.open(filename, 'r') <newline46mondego><newline46mondego>    var line;<newline46mondego>    while(line=stream.readLine()) {<newline46mondego>        //do want you want here<newline46mondego>        console.log(line);<newline46mondego>    }<newline46mondego><newline46mondego>    phantom.exit(0);<newline46mondego>}<newline46mondego>"
"7356splitHere46","20246855splitHere46",">phantomjs download.js mytestfile.txt<newline46mondego>"
"7357splitHere46","20247075splitHere46","frame.setSize(720, 480);<newline46mondego>"
"7358splitHere46","20247075splitHere46","frame.pack();<newline46mondego>"
"7359splitHere46","20247075splitHere46","JTextField username = new JTextField(10);<newline46mondego>"
"7360splitHere46","20247075splitHere46","mainPanel.setBorder( new EmptyBorder(20, 20, 20, 20) );<newline46mondego>"
"7361splitHere46","20247139splitHere46","Gato"
"7362splitHere46","20247139splitHere46","Serializable"
"7363splitHere46","20247146splitHere46","InternalServerErrorException"
"7364splitHere46","20247317splitHere46","label.setIcon(new ImageIcon(image));"
"7365splitHere46","20247317splitHere46","JLabel label = new JLabel(new ImageIcon(image));"
"7366splitHere46","20247320splitHere46","private static void displaySeating(int s,int n) {<newline46mondego><newline46mondego>int  i, k;<newline46mondego><newline46mondego>    i = 0;<newline46mondego>    k = 0;<newline46mondego><newline46mondego>    // print left edge<newline46mondego>    System.out.print(<doubleQuotes46>#<doubleQuotes46>);<newline46mondego><newline46mondego>    while (i < s) {<newline46mondego>        i++;<newline46mondego>        System.out.print(<doubleQuotes46>\t X<doubleQuotes46>);<newline46mondego>        if (i % 8 == 0) {<newline46mondego>            // print right edge<newline46mondego>            System.out.println(<doubleQuotes46>\t#<doubleQuotes46>);<newline46mondego><newline46mondego>            // print left edge of next row<newline46mondego>            System.out.print(<doubleQuotes46>#<doubleQuotes46>);<newline46mondego>        }<newline46mondego>    }        <newline46mondego><newline46mondego>    while ( k < n) {<newline46mondego>        k++;<newline46mondego>        System.out.print(<doubleQuotes46>\t O<doubleQuotes46>);<newline46mondego>        if ((k+s) % 8 == 0)  {<newline46mondego>            // print right edge<newline46mondego>            System.out.println(<doubleQuotes46>\t#<doubleQuotes46>);<newline46mondego><newline46mondego>            // print left edge of next row<newline46mondego>            System.out.print(<doubleQuotes46>#<doubleQuotes46>);<newline46mondego>        }<newline46mondego>    }<newline46mondego><newline46mondego>    if ((s + n) % 8 != 0) {<newline46mondego>        // this means the last row isn't completely full with 0's<newline46mondego><newline46mondego>        // fill up the row with tabs to get to the edge<newline46mondego>        while ((k+s) % 8 != 0) {<newline46mondego>            k++;<newline46mondego>            System.out.print(<doubleQuotes46>\t<doubleQuotes46>);<newline46mondego>        }<newline46mondego>        // print the right edge<newline46mondego>        System.out.println(<doubleQuotes46>\t#<doubleQuotes46>);<newline46mondego><newline46mondego>        // add the lower edge<newline46mondego>        System.out.println(<doubleQuotes46>#########################################################################<doubleQuotes46>); <newline46mondego>    } else {<newline46mondego>        // this means the last row was filled completely but the left edge of <newline46mondego>        // the next row has already been printed, so we make the lower edge 1 smaller.<newline46mondego>        System.out.println(<doubleQuotes46>########################################################################<doubleQuotes46>);<newline46mondego>    }<newline46mondego>}<newline46mondego>"
"7367splitHere46","20247320splitHere46","(s + n) % 8 == 0"
"7368splitHere46","20247403splitHere46","doInBackground()"
"7369splitHere46","20247403splitHere46","JOptionPane.showMessageDialog()"
"7370splitHere46","20247403splitHere46","doInBackground()"
"7371splitHere46","20247403splitHere46","done()"
"7372splitHere46","20247403splitHere46","get()"
"7373splitHere46","20247403splitHere46","SwingUtilities.invokeLater()"
"7374splitHere46","20247403splitHere46","done()"
"7375splitHere46","20247406splitHere46","//body[contains(@class, 'is-mobile'<newline46mondego>"
"7376splitHere46","20247406splitHere46","//body[contains(@class, 'is-mobile')]<newline46mondego>"
"7377splitHere46","20247406splitHere46","login-page not-is-mobile"
"7378splitHere46","20247406splitHere46","[class~=<doubleQuotes46>is-mobile<doubleQuotes46>]"
"7379splitHere46","20247406splitHere46","//body[contains(concat(' ', @class, ' '), ' is-mobile ')]<newline46mondego>"
"7380splitHere46","20247454splitHere46","com.foo.bar.AbstractTeacher<newline46mondego>com.foo.bar.Teacher // A factory<newline46mondego>com.foo.bar.BioTeacher<newline46mondego>com.foo.bar.PhysicsTeacher<newline46mondego>...<newline46mondego>"
"7381splitHere46","20247454splitHere46","Teacher t = Teacher.getTeacher();<newline46mondego>BioTeacher b = BioTeacher.getTeacher();<newline46mondego>"
"7382splitHere46","20247454splitHere46","com.foo.bar"
"7383splitHere46","20247454splitHere46","Teacher.createTeacher(BioTeacher.class)<newline46mondego>"
"7384splitHere46","20247454splitHere46","BioTeacher.createTeacher()<newline46mondego>"
"7385splitHere46","20247454splitHere46","Teacher.getTeacher()"
"7386splitHere46","20247454splitHere46","BioTeacher.getTeacher()"
"7387splitHere46","20247454splitHere46","Class,List<Teacher>"
"7388splitHere46","20247454splitHere46","Teacher"
"7389splitHere46","20247454splitHere46","Teacher.getTeacher(Teacher.class)"
"7390splitHere46","20247454splitHere46","Teacher.getTeacher(BioTeacher.class)"
"7391splitHere46","20247454splitHere46","BioTeacher Teacher.getTeacher(BioTeacher.class)<newline46mondego>"
"7392splitHere46","20247474splitHere46","long position = ...;<newline46mondego>byte[] bytes = new byte[] { (byte)'W', ... };<newline46mondego>raf.seek(position);<newline46mondego>raf.write(bytes);<newline46mondego>"
"7393splitHere46","20247625splitHere46","new File(Test.class.getProtectionDomain().getCodeSource().getLocation().getFile())<newline46mondego>"
"7394splitHere46","20247625splitHere46","Test"
"7395splitHere46","20247645splitHere46","public void filereader (){<newline46mondego>        String[] titles = {<doubleQuotes46>first name: <doubleQuotes46>, <doubleQuotes46>last name: <doubleQuotes46>, <doubleQuotes46>gender<doubleQuotes46> ,<doubleQuotes46>age<doubleQuotes46>,<doubleQuotes46>address<doubleQuotes46>,<doubleQuotes46>id<doubleQuotes46>};<newline46mondego>        int i=0;<newline46mondego>        Object[] options = {<doubleQuotes46>OK<doubleQuotes46>};<newline46mondego>        try<newline46mondego>        {<newline46mondego>        FileInputStream in = new FileInputStream(<doubleQuotes46>records.txt<doubleQuotes46>);<newline46mondego>        BufferedReader br = new BufferedReader(new InputStreamReader(in));<newline46mondego>        String strLine;<newline46mondego>        StringBuffer sb = new StringBuffer();<newline46mondego><newline46mondego>        while((strLine = br.readLine())!= null)<newline46mondego>       {<newline46mondego>        sb.append(titles[i]+ strLine +<doubleQuotes46>\n<doubleQuotes46>);<newline46mondego>              if (i == 5) { <newline46mondego>                   i=0;<newline46mondego>               } else<newline46mondego>               { i++; };<newline46mondego>                 }<newline46mondego>              JOptionPane.showMessageDialog( null, sb.toString());<newline46mondego>               }catch(Exception e){<newline46mondego>              JOptionPane.showOptionDialog(null, <doubleQuotes46>Error<doubleQuotes46>, <doubleQuotes46>Customers<doubleQuotes46>,   JOptionPane.PLAIN_MESSAGE,JOptionPane.QUESTION_MESSAGE, null, options, options[0]);<newline46mondego>               }<newline46mondego><newline46mondego>             }<newline46mondego>"
"7396splitHere46","20247673splitHere46","Object[]"
"7397splitHere46","20247673splitHere46","StringBuilder[]"
"7398splitHere46","20247673splitHere46","StringBuilder[]"
"7399splitHere46","20247673splitHere46","public class ArrayCastTest {<newline46mondego>    public static void main(String[] argv) {<newline46mondego>        Object[] objArray;<newline46mondego>        StringBuilder[] sbArray;<newline46mondego>        objArray = getArray();<newline46mondego>        sbArray = (StringBuilder[]) objArray;<newline46mondego>        System.out.println(sbArray.toString());<newline46mondego>    }<newline46mondego><newline46mondego>    public static Object[] getArray() {<newline46mondego>        return new StringBuilder[5];<newline46mondego>    }<newline46mondego>}<newline46mondego>"
"7400splitHere46","20247673splitHere46","C:\JavaTools>javac ArrayCastTest.java<newline46mondego><newline46mondego>C:\JavaTools>java ArrayCastTest<newline46mondego>[Ljava.lang.StringBuilder;@76f4da6d<newline46mondego><newline46mondego>C:\JavaTools><newline46mondego>"
"7401splitHere46","20247673splitHere46","int"
"7402splitHere46","20247673splitHere46","char"
"7403splitHere46","20247673splitHere46","ArrayList.toArray()"
"7404splitHere46","20247673splitHere46","Object[]"
"7405splitHere46","20247673splitHere46","Object[]"
"7406splitHere46","20247673splitHere46","StringBuilder[]"
"7407splitHere46","20247812splitHere46","int"
"7408splitHere46","20247812splitHere46","int"
"7409splitHere46","20247812splitHere46","MyClass"
"7410splitHere46","20247812splitHere46","getRow()"
"7411splitHere46","20247812splitHere46","MyClass"
"7412splitHere46","20247812splitHere46","int"
"7413splitHere46","20247812splitHere46","String s = String.valueof(integervalue);<newline46mondego>"
"7414splitHere46","20247827splitHere46","DEC"
"7415splitHere46","20247827splitHere46","+"
"7416splitHere46","20247827splitHere46","DEC : ('1'..'9') ('0'..'9')*;<newline46mondego>"
"7417splitHere46","20247836splitHere46",":"
"7418splitHere46","20247836splitHere46",";"
"7419splitHere46","20247836splitHere46","java -cp soot.jar:soot-infoflow.jar:soot-infoflow-android.jar:slf4j-api-1.7.5.jar:slf4j-simple-1.7.5.jar:axml-1.0.jar soot.jimple.infoflow.android.TestApps.Test <doubleQuotes46>D:\Callbacks_Button1.apk<doubleQuotes46> D:\Tools\AndroidSDK\sdk\platforms<newline46mondego>"
"7420splitHere46","20247965splitHere46","ListView listView_ent = (ListView) findViewById(R.id.popular_apps_list_ent);<newline46mondego>ArrayList<DataHolder> data_ent = new ArrayList( data);<newline46mondego>for (int i = data_ent.size()-1; i >= 0; i--) {<newline46mondego>    if(data_ent.get(i).getType().equals(<doubleQuotes46>edu<doubleQuotes46>)){<newline46mondego>        data_ent.remove(i);<newline46mondego>    }<newline46mondego>}<newline46mondego>listView_ent.setAdapter(new AppsAdapter(this, data_ent));<newline46mondego><newline46mondego>ListView listView_edu = (ListView) findViewById(R.id.popular_apps_list_edu);<newline46mondego>ArrayList<DataHolder> data_edu = = new ArrayList( data);<newline46mondego>for (int i = data_edu.size()-1; i >= 0 ; i--) {<newline46mondego>    if(data_edu.get(i).getType().equals(<doubleQuotes46>ent<doubleQuotes46>)){<newline46mondego>        data_edu.remove(i);<newline46mondego>    }<newline46mondego>}<newline46mondego>listView_edu.setAdapter(new AppsAdapter(this, data_edu));<newline46mondego>"
"7421splitHere46","20248179splitHere46","path/to/project/bin"
"7422splitHere46","20248179splitHere46","path/to/project/bin/application/-"
"7423splitHere46","20248179splitHere46","Project Properties > Java Build Path"
"7424splitHere46","20248179splitHere46","Source"
"7425splitHere46","20248179splitHere46","Allow output folders for source folders"
"7426splitHere46","20248179splitHere46","Add Folder"
"7427splitHere46","20248179splitHere46","grant codebase <doubleQuotes46>file:binLogin/-<doubleQuotes46> {<newline46mondego>    permission javax.security.auth.AuthPermission <doubleQuotes46>modifyPrincipals<doubleQuotes46>;<newline46mondego>};<newline46mondego><newline46mondego>grant codebase <doubleQuotes46>file:binApp/-<doubleQuotes46> {<newline46mondego>   permission javax.security.auth.AuthPermission <doubleQuotes46>createLoginContext.Sample<doubleQuotes46>;<newline46mondego>   permission javax.security.auth.AuthPermission <doubleQuotes46>doAsPrivileged<doubleQuotes46>;<newline46mondego>};<newline46mondego>"
"7428splitHere46","20248273splitHere46","public class Foo {<newline46mondego>    public static void main(String[] args) {<newline46mondego>        foo();<newline46mondego>    }<newline46mondego>    private static void foo() {<newline46mondego>        foo();<newline46mondego>    }<newline46mondego>}<newline46mondego>"
"7429splitHere46","20248273splitHere46","-Xss=128k"
"7430splitHere46","20248309splitHere46","List<Integer> z = new ArrayList<>(x.subList(0, 4))"
"7431splitHere46","20248309splitHere46","List<Integer> x = new ArrayList<Integer>();<newline46mondego>    x.add(1);<newline46mondego>    x.add(2);<newline46mondego>    x.add(3);<newline46mondego>    x.add(4);<newline46mondego>    x.add(5);<newline46mondego><newline46mondego>    List<Integer> y = new ArrayList<Integer>();<newline46mondego>    y.add(1);<newline46mondego>    y.add(2);<newline46mondego>    y.add(3);<newline46mondego><newline46mondego>    final List<Integer> z = new ArrayList<>(x.subList(0, 4));<newline46mondego><newline46mondego>    System.out.println(<doubleQuotes46>sublist <doubleQuotes46> + z.toString());<newline46mondego><newline46mondego>    z.removeAll(y);<newline46mondego><newline46mondego>    System.out.println(<doubleQuotes46>Main list after removing sublist <doubleQuotes46> + x.toString());<newline46mondego>"
"7432splitHere46","20248309splitHere46","sublist [1, 2, 3, 4]<newline46mondego>Main list after removing sublist [1, 2, 3, 4, 5]<newline46mondego>"
"7433splitHere46","20248368splitHere46","Vector3f boxsCentre=box1.getWorldTranslation().add(box2.getWorldTranslation()).mult(0.5f);<newline46mondego>cam.lookAt(boxsCentre, Vector3f.UNIT_Y);<newline46mondego>"
"7434splitHere46","20248368splitHere46","Vector3f seperationVector=box2.getWorldTranslation().subtract(box1.getWorldTranslation());<newline46mondego>Vector3f perpendicularFromTheAction= seperationVector.cross(Vector3f.UNIT_Y);<newline46mondego><newline46mondego>perpendicularFromTheAction.normalizeLocal();<newline46mondego>"
"7435splitHere46","20248368splitHere46","float distance=2*seperationVector.length();<newline46mondego>Vector3f newCameraLocation=boxsCentre.add(perpendicularFromTheAction.mult(distance));<newline46mondego>"
"7436splitHere46","20248368splitHere46","cam.setLocation(newCameraLocation);<newline46mondego>"
"7437splitHere46","20248368splitHere46","import com.jme3.app.SimpleApplication;<newline46mondego>import com.jme3.material.Material;<newline46mondego>import com.jme3.math.*;<newline46mondego>import com.jme3.renderer.RenderManager;<newline46mondego>import com.jme3.scene.Geometry;<newline46mondego>import com.jme3.scene.shape.Box;<newline46mondego><newline46mondego>public class FightTest extends SimpleApplication {<newline46mondego><newline46mondego>    Geometry box1;<newline46mondego>    Geometry box2;<newline46mondego>    public static void main(String[] args) {<newline46mondego>        FightTest app = new FightTest();<newline46mondego>        app.start();<newline46mondego>    }<newline46mondego><newline46mondego>    @Override<newline46mondego>    public void simpleInitApp() {<newline46mondego><newline46mondego>        //put in some reference boxes<newline46mondego>        for(int i=-20;i<=20;i+=20){<newline46mondego>            for(int j=-20;j<=20;j+=20){<newline46mondego>                if (j!=0||i!=0){<newline46mondego>                    Geometry referenceBox = createBox(ColorRGBA.Red);<newline46mondego>                    referenceBox.setLocalTranslation(i, 0, j);<newline46mondego>                    rootNode.attachChild(referenceBox);<newline46mondego>                }<newline46mondego><newline46mondego>            }<newline46mondego>        }<newline46mondego><newline46mondego>        //put in our two players<newline46mondego>        box1 = createBox(ColorRGBA.Blue);<newline46mondego>        box1.setLocalTranslation(5, 0, 0);<newline46mondego><newline46mondego>        box2 = createBox(ColorRGBA.Green);<newline46mondego><newline46mondego>        rootNode.attachChild(box1);<newline46mondego>        rootNode.attachChild(box2);<newline46mondego>    }<newline46mondego><newline46mondego>    private Geometry createBox(ColorRGBA color){<newline46mondego><newline46mondego>        Box b = new Box(Vector3f.ZERO, 1, 1, 1);<newline46mondego>        Geometry box = new Geometry(<doubleQuotes46>Box<doubleQuotes46>, b);<newline46mondego><newline46mondego>        Material mat = new Material(assetManager, <doubleQuotes46>Common/MatDefs/Misc/Unshaded.j3md<doubleQuotes46>);<newline46mondego>        mat.setColor(<doubleQuotes46>Color<doubleQuotes46>, color);<newline46mondego>        box.setMaterial(mat);<newline46mondego><newline46mondego>        return box;<newline46mondego>    }<newline46mondego><newline46mondego>    @Override<newline46mondego>    public void simpleUpdate(float tpf) {<newline46mondego>        adjustCam();<newline46mondego>        movePlayers(tpf);<newline46mondego>    }<newline46mondego><newline46mondego>    @Override<newline46mondego>    public void simpleRender(RenderManager rm) {<newline46mondego>        //TODO: add render code<newline46mondego>    }<newline46mondego><newline46mondego>    private void adjustCam(){<newline46mondego>        //we want our camera to look at the centre of the boxes<newline46mondego>        Vector3f boxsCentre=box1.getWorldTranslation().add(box2.getWorldTranslation()).mult(0.5f);<newline46mondego><newline46mondego>        cam.lookAt(boxsCentre, Vector3f.UNIT_Y);<newline46mondego><newline46mondego>        //we also want our camera to move closer/further away as the boxes seperate.<newline46mondego>        //and move around so its always parallel to the action<newline46mondego><newline46mondego>        //parallel to the action means on the line given by the cross product of the<newline46mondego>        //box seperation and the upwards vector<newline46mondego><newline46mondego>        Vector3f seperationVector=box2.getWorldTranslation().subtract(box1.getWorldTranslation());<newline46mondego>        Vector3f perpendicularFromTheAction= seperationVector.cross(Vector3f.UNIT_Y);<newline46mondego><newline46mondego>        perpendicularFromTheAction.normalizeLocal();<newline46mondego><newline46mondego>        //we could (and you should) get complicated on exactly how far the camera should <newline46mondego>        //move backwards, but I'm just going to make the camera twice as far away as the <newline46mondego>        //objects are seperated <newline46mondego>        float distance=2*seperationVector.length();<newline46mondego><newline46mondego>        Vector3f newCameraLocation=boxsCentre.add(perpendicularFromTheAction.mult(distance));<newline46mondego><newline46mondego>        cam.setLocation(newCameraLocation);<newline46mondego>    }<newline46mondego><newline46mondego>    float timeAccumulator=0; <newline46mondego>    private void movePlayers(float tpf){<newline46mondego>        //basic movement, just for demo<newline46mondego>        timeAccumulator+=tpf;<newline46mondego><newline46mondego>        if (timeAccumulator<2){<newline46mondego>            box1.move(new Vector3f(5f*tpf,0,0));<newline46mondego>            box2.move(new Vector3f(0,0,5f*tpf));<newline46mondego>        }else if (timeAccumulator<4){<newline46mondego>            box1.move(new Vector3f(-5f*tpf,0,0));<newline46mondego>            box2.move(new Vector3f(0,0,-5f*tpf));<newline46mondego>        }else{<newline46mondego>             timeAccumulator=0;<newline46mondego>        }<newline46mondego><newline46mondego>    }<newline46mondego>}<newline46mondego>"
"7438splitHere46","20248540splitHere46","System.in"
"7439splitHere46","20248540splitHere46","InputStreamReader"
"7440splitHere46","20248540splitHere46","Scanner"
"7441splitHere46","20248540splitHere46","InputStream.read()"
"7442splitHere46","20248540splitHere46","Reader rdr = new InputStreamReader(System.in);<newline46mondego>int i = rdr.next();<newline46mondego>if (i == -1) {<newline46mondego>    // end of input<newline46mondego>} else {<newline46mondego>    // normal processing; safe to cast i to char if convenient<newline46mondego>}<newline46mondego>"
"7443splitHere46","20248578splitHere46","CharSequence"
"7444splitHere46","20248578splitHere46","<doubleQuotes46>Hello<doubleQuotes46>"
"7445splitHere46","20248746splitHere46","int linesToSkip = 28;<newline46mondego><newline46mondego>try (BufferedReader br = new BufferedReader(new FileReader(file))) {<newline46mondego><newline46mondego>    String line;<newline46mondego>    while ( (line = br.readLine()) != null) {<newline46mondego>        if (linesToSkip-- > 0) {<newline46mondego>            continue;<newline46mondego>        }<newline46mondego><newline46mondego>        String[] values = line.split(<doubleQuotes46> +<doubleQuotes46>);<newline46mondego><newline46mondego>        int index = 0;<newline46mondego>        for (String value : values) {<newline46mondego>            System.out.println(<doubleQuotes46>values[<doubleQuotes46> + index + <doubleQuotes46>] = <doubleQuotes46> + value);<newline46mondego>            index++;<newline46mondego>        }<newline46mondego>    }<newline46mondego>}<newline46mondego>"
"7446splitHere46","20248746splitHere46","try(expr) {}"
"7447splitHere46","20248746splitHere46","word"
"7448splitHere46","20248746splitHere46","line"
"7449splitHere46","20248746splitHere46","line.split(<doubleQuotes46> +<doubleQuotes46>)"
"7450splitHere46","20248746splitHere46","<doubleQuotes46> +<doubleQuotes46>"
"7451splitHere46","20248746splitHere46","linesToSkip"
"7452splitHere46","20248746splitHere46","if (++lineCount <= 28) {<newline46mondego>    continue;<newline46mondego>}<newline46mondego>"
"7453splitHere46","20248813splitHere46","public Map<Integer, List<Integer>> categorise() {<newline46mondego>    final Map<Integer, List<Integer>> categorisedMarks = new HashMap<Integer, List<Integer>>();<newline46mondego><newline46mondego>    categorisedMarks.put(0, getMarksInRange(0, 20) );<newline46mondego>    categorisedMarks.put(1, getMarksInRange(21, 40) );<newline46mondego>    categorisedMarks.put(2, getMarksInRange(41, 60) );<newline46mondego>    categorisedMarks.put(3, getMarksInRange(61, 80) );<newline46mondego>    categorisedMarks.put(4, getMarksInRange(81, 100) );<newline46mondego><newline46mondego>    return categorisedMarks;<newline46mondego>}<newline46mondego><newline46mondego>private List<Integer> getMarksInRange(final int lowerBonud, final int upperBound) {<newline46mondego>    final List<Integer> marksInRange = new ArrayList<Integer>();<newline46mondego><newline46mondego>    for (final Integer mark : this.marks) {<newline46mondego>        if(mark >= lowerBonud && mark <= upperBound) {<newline46mondego>            marksInRange.add(mark);<newline46mondego>        }<newline46mondego>        else if (mark > upperBound) {<newline46mondego>            break;<newline46mondego>        }<newline46mondego>    }<newline46mondego><newline46mondego>    return marksInRange;<newline46mondego>}<newline46mondego>"
"7454splitHere46","20248818splitHere46","String.split(regex)"
"7455splitHere46","20248818splitHere46","String s[] = <doubleQuotes46>300-400i<doubleQuotes46>.split(<doubleQuotes46>[\\Q+-\\Ei]<doubleQuotes46>);<newline46mondego><newline46mondego>System.out.println(s[0]+<doubleQuotes46> <doubleQuotes46>+s[1]); //prints 300 400<newline46mondego>"
"7456splitHere46","20248825splitHere46","int[] nums = new int[2];<newline46mondego><newline46mondego>for (int i = 0; i < 100; i++) {<newline46mondego>    nums[i % nums.length] = i + 1;<newline46mondego><newline46mondego>    if (nums[0] + nums[1] <= 50) {<newline46mondego>        System.out.println(<doubleQuotes46>sum is less than or equal to 50<doubleQuotes46>);<newline46mondego>        break;<newline46mondego>    }<newline46mondego>}<newline46mondego>"
"7457splitHere46","20248825splitHere46","%"
"7458splitHere46","20248825splitHere46","i"
"7459splitHere46","20248825splitHere46","i"
"7460splitHere46","20248825splitHere46","i == 0"
"7461splitHere46","20248825splitHere46","i == 1"
"7462splitHere46","20248825splitHere46","i"
"7463splitHere46","20248825splitHere46","i == 2"
"7464splitHere46","20248825splitHere46","2 % 2 == 0"
"7465splitHere46","20248825splitHere46","i == 3"
"7466splitHere46","20248825splitHere46","3 % 2 == 1"
"7467splitHere46","20248825splitHere46","1"
"7468splitHere46","20248825splitHere46","nums[0]"
"7469splitHere46","20248825splitHere46","0"
"7470splitHere46","20248825splitHere46","nums[1]"
"7471splitHere46","20248825splitHere46","i == 0"
"7472splitHere46","20248825splitHere46","int[] nums = new int[2];<newline46mondego><newline46mondego>for (int i = 0; i < 100; i++) {<newline46mondego>    nums[i % nums.length] = i + 1;<newline46mondego><newline46mondego>    if (nums[0] + nums[1] > 50) {<newline46mondego>        System.out.println(<doubleQuotes46>sum was NOT less than or equal to 50<doubleQuotes46>);<newline46mondego>        break;<newline46mondego>    }<newline46mondego>}<newline46mondego>"
"7473splitHere46","20248825splitHere46","int i = 0;<newline46mondego><newline46mondego>// note sum of two consecutive integers will never be even (never 50)<newline46mondego>while (i + ++i < 50);<newline46mondego><newline46mondego>System.out.println(<doubleQuotes46>min increments with sum > 50 was <doubleQuotes46> + (i - 1) + <doubleQuotes46> and <doubleQuotes46> + i);<newline46mondego>"
"7474splitHere46","20248825splitHere46","min increments with sum > 50 was 25 and 26"
"7475splitHere46","20248940splitHere46","_JAVA_SPLASH_JAR"
"7476splitHere46","20248940splitHere46","_JAVA_SPLASH_FILE"
"7477splitHere46","20248940splitHere46","bash"
"7478splitHere46","20248940splitHere46","sh"
"7479splitHere46","20248940splitHere46","(export _JAVA_SPLASH_JAR=app.jar; \<newline46mondego> export _JAVA_SPLASH_FILE=META-INF/splash.jpg; \<newline46mondego> java -cp app.jar com.y.app.Main )<newline46mondego>"
"7480splitHere46","20248940splitHere46","java"
"7481splitHere46","20248940splitHere46","Main-Class"
"7482splitHere46","20248940splitHere46","Class-Path"
"7483splitHere46","20248940splitHere46","SplashScreen-Image"
"7484splitHere46","20248940splitHere46","-jar"
"7485splitHere46","20249134splitHere46","public class YourClassName implements ServletContextListener{<newline46mondego><newline46mondego><newline46mondego>    @Override<newline46mondego>    public void contextInitialized(ServletContextEvent arg0) {<newline46mondego>    run your background stuff<newline46mondego>    }<newline46mondego><newline46mondego>    @Override<newline46mondego>    public void contextDestroyed(ServletContextEvent arg0) {<newline46mondego>    stop your background stuff<newline46mondego><newline46mondego>    }<newline46mondego>}<newline46mondego>"
"7486splitHere46","20249134splitHere46","<listener><newline46mondego>        <listener-class><newline46mondego>                 your class fully qualified name<newline46mondego>        </listener-class><newline46mondego>    </listener><newline46mondego>"
"7487splitHere46","20249134splitHere46","@WebListener<newline46mondego>"
"7488splitHere46","20249800splitHere46","/http/bhstudios/v2/prog/bhmi/database/get"
"7489splitHere46","20249800splitHere46","/prog/bhmi/database/get"
"7490splitHere46","20249802splitHere46","for (int month = 0; month < energyCons.length; month++) {<newline46mondego>  System.out.print(<doubleQuotes46>Please enter the monthly kWh usage for month <doubleQuotes46>);<newline46mondego>  System.out.print((month + 1) + <doubleQuotes46>: <doubleQuotes46>);<newline46mondego>  int inputValue = scan.nextInt();<newline46mondego>  while (inputValue < 0 || inputValue > 1000) {<newline46mondego>    System.out.println(<doubleQuotes46>Please enter a valid amount: <doubleQuotes46>);<newline46mondego>    inputValue = scan.nextInt();<newline46mondego>  }<newline46mondego>  energyCons[month] = inputValue;<newline46mondego>}<newline46mondego>"
"7491splitHere46","20249819splitHere46","incrementAndGet()"
"7492splitHere46","20249819splitHere46","int index = q.incrementAndGet();<newline46mondego>if (index >= Xdisc.length) {<newline46mondego>    break;<newline46mondego>} // I'm assuming you meant there to be a brace here...<newline46mondego><newline46mondego>Integer[] temp_X;<newline46mondego>temp_X = new Integer[Xdisc[0].length];<newline46mondego>for (int s = 0; s < Xdisc[0].length; s++) {<newline46mondego>    temp_X[s] = Xdisc[index][s];<newline46mondego>}<newline46mondego>"
"7493splitHere46","20249819splitHere46","get()"
"7494splitHere46","20249884splitHere46","ClassLoader"
"7495splitHere46","20249884splitHere46","ClassLoader"
"7496splitHere46","20249955splitHere46","q=p;<newline46mondego>"
"7497splitHere46","20249955splitHere46","q"
"7498splitHere46","20249955splitHere46","p"
"7499splitHere46","20249955splitHere46","q"
"7500splitHere46","20249955splitHere46","new"
"7501splitHere46","20249955splitHere46","q = new MyObject(p);<newline46mondego>"
"7502splitHere46","20249955splitHere46","p"
"7503splitHere46","20249955splitHere46","p"
"7504splitHere46","20250062splitHere46","c = (char) n;<newline46mondego><newline46mondego>n = (int) c;<newline46mondego>"
"7505splitHere46","20250062splitHere46","ord()"
"7506splitHere46","20250062splitHere46","int()"
"7507splitHere46","20250088splitHere46","output()"
"7508splitHere46","20250088splitHere46","output()"
"7509splitHere46","20250088splitHere46","output(out, ans);"
"7510splitHere46","20250298splitHere46","mines = (int) Math.random()*100;<newline46mondego>"
"7511splitHere46","20250298splitHere46","0"
"7512splitHere46","20250298splitHere46","counter"
"7513splitHere46","20250298splitHere46","mines = (int) (Math.random() * 100);<newline46mondego>"
"7514splitHere46","20250355splitHere46","You can scan one more input value and get the code working as below:-<newline46mondego>    ......<newline46mondego>.........<newline46mondego>            System.out.println(<doubleQuotes46>Enter a Input Type Integer->1 :: Char->2 :: Float->3::Double->4 <doubleQuotes46>);<newline46mondego>    int inputType = console.next();<newline46mondego>    System.out.println(<doubleQuotes46>Enter a value: <doubleQuotes46>);<newline46mondego>    a = console.next();<newline46mondego>    System.out.println(<doubleQuotes46>Enter another value: <doubleQuotes46>);<newline46mondego>    b = console.next();<newline46mondego>    int v1,v2,v3;<newline46mondego>    char vc1,vc2,vc3;<newline46mondego>    float vf1,vf2,vf3;<newline46mondego>    double vd1,vd2,vd3;<newline46mondego>    switch(inputType)<newline46mondego>    {<newline46mondego>    case 1:<newline46mondego>    {<newline46mondego>        v1 = Integer.parseInt(a);<newline46mondego>        v2 = Integer.parseInt(b);<newline46mondego>        v3=larger(v1,v2);<newline46mondego>    }<newline46mondego>    case 2:<newline46mondego>    {<newline46mondego>        vc1 = a.charAt(0);<newline46mondego>        vc2 = b.charAt(0);<newline46mondego>        vc3=larger(vc1,vc2);<newline46mondego>    }<newline46mondego>    case 3:<newline46mondego>    {<newline46mondego>        vf1 = Float.parseFloat(a);<newline46mondego>        vf2= Float.parseFloat(b);<newline46mondego>        vf3=larger(vf1,vf2);<newline46mondego>    }<newline46mondego>    case 4:<newline46mondego>    {<newline46mondego>        vd1 = Double.parseDouble(a);<newline46mondego>        vd2 = Double.parseDouble(a);<newline46mondego>        vd3=larger(vd1,vd2);<newline46mondego>    }<newline46mondego>    }<newline46mondego>......<newline46mondego>.......<newline46mondego>"
"7515splitHere46","20250395splitHere46","@Override<newline46mondego>    protected void onPause() {<newline46mondego>        super.onPause();<newline46mondego>        mTimer.cancel();<newline46mondego>        mTimer.purge();<newline46mondego>        mTimer = null;<newline46mondego>    }<newline46mondego>"
"7516splitHere46","20250423splitHere46","String sql = <doubleQuotes46>select * from Table1 where xyz in :list<doubleQuotes46>; <newline46mondego>// or String sql = <doubleQuotes46>select * from Table1 where xyz in (:list)<doubleQuotes46>;<newline46mondego>// I can't remember which one is right<newline46mondego>Map parameters = new HashMap<String, Object>();<newline46mondego>parameters.put(<doubleQuotes46>list<doubleQuotes46>, theListOfXyz);<newline46mondego>List<Foo> result = template.query(sql, parameters, rowMapper);<newline46mondego>"
"7517splitHere46","20250475splitHere46","AutoCompleteTextView search = (AutoCompleteTextView) findViewById(R.id.search);<newline46mondego><newline46mondego>search.setOnClickListener(new OnClickListener() {<newline46mondego>                @Override<newline46mondego>                public void onClick(View v) {<newline46mondego>                    // Do what ever you want<newline46mondego>                              (AutoCompleteTextView) findViewById(R.id.search).setText(<doubleQuotes46><doubleQuotes46>); <newline46mondego>                }<newline46mondego>            });<newline46mondego>"
"7518splitHere46","20250493splitHere46","getResource(<doubleQuotes46>com/mysoft/resources/VAL.csv<doubleQuotes46>)<newline46mondego>"
"7519splitHere46","20250553splitHere46","JList"
"7520splitHere46","20250553splitHere46","MouseListener"
"7521splitHere46","20250553splitHere46","locationToIndex"
"7522splitHere46","20250553splitHere46","list.addMouseListener(new MouseAdapter() {<newline46mondego>     public void mouseClicked(MouseEvent e) {<newline46mondego>         if (e.getClickCount() == 2) {<newline46mondego>             int index = list.locationToIndex(e.getPoint());<newline46mondego>             System.out.println(<doubleQuotes46>Double clicked on Item <doubleQuotes46> + index);<newline46mondego>          }<newline46mondego>     }<newline46mondego> });<newline46mondego>"
"7523splitHere46","20250553splitHere46","SwingUtilities.windowForComponent(list)"
"7524splitHere46","20250553splitHere46","window.dispose()"
"7525splitHere46","20250570splitHere46","i"
"7526splitHere46","20250570splitHere46","class Element1 {<newline46mondego> ...<newline46mondego> int i = 0;<newline46mondego> ...<newline46mondego>public void process(String s) throws SAXException {<newline46mondego><newline46mondego>    try {<newline46mondego><newline46mondego>        String[] elements = s.split(<doubleQuotes46>\\|<doubleQuotes46>);<newline46mondego>        atts.clear();<newline46mondego>        i++;<newline46mondego><newline46mondego>        atts.addAttribute(<doubleQuotes46><doubleQuotes46>, <doubleQuotes46><doubleQuotes46>, <doubleQuotes46>Id<doubleQuotes46>, <doubleQuotes46><doubleQuotes46>, <doubleQuotes46><doubleQuotes46> + i);<newline46mondego><newline46mondego>        th.startElement(<doubleQuotes46><doubleQuotes46>, <doubleQuotes46><doubleQuotes46>, <doubleQuotes46>el<doubleQuotes46>, atts);<newline46mondego>        th.startElement(<doubleQuotes46><doubleQuotes46>, <doubleQuotes46><doubleQuotes46>, <doubleQuotes46>text<doubleQuotes46>, atts);<newline46mondego>        th.characters(elements[0].toCharArray(), 0, elements[0].length());<newline46mondego>        th.endElement(<doubleQuotes46><doubleQuotes46>, <doubleQuotes46><doubleQuotes46>, <doubleQuotes46>text<doubleQuotes46>);<newline46mondego>        th.endElement(<doubleQuotes46><doubleQuotes46>, <doubleQuotes46><doubleQuotes46>, <doubleQuotes46>el<doubleQuotes46>);<newline46mondego><newline46mondego>    }<newline46mondego><newline46mondego>    catch (Exception e) {<newline46mondego>        System.out.print(<doubleQuotes46>Out of bounds! DOH! should have used vectors<doubleQuotes46>);<newline46mondego>    }<newline46mondego>}}<newline46mondego>"
"7527splitHere46","20250619splitHere46","if(treeX < 256)    {<newline46mondego>    treeX = 256;<newline46mondego>} else   {<newline46mondego>"
"7528splitHere46","20250619splitHere46","treeX"
"7529splitHere46","20250619splitHere46","else"
"7530splitHere46","20250619splitHere46","if"
"7531splitHere46","20250619splitHere46","true"
"7532splitHere46","20250619splitHere46","while"
"7533splitHere46","20250619splitHere46","while(tCount < tRan)   {<newline46mondego>    System.out.println(tRan);<newline46mondego>    tCount ++;<newline46mondego>    int treeX = treeSpawn.nextInt(width * 5);<newline46mondego><newline46mondego>    if(treeX < 256)    {<newline46mondego>        treeX = 256;<newline46mondego>    }<newline46mondego><newline46mondego>    tiles[treeX] = Tile.LOG.getId();<newline46mondego>    tiles[treeX + width] = Tile.LOG.getId();<newline46mondego>    tiles[treeX + width + width] = Tile.LOG.getId();<newline46mondego>    tiles[treeX - width] = Tile.LEAVES.getId();<newline46mondego>    ... // Rest of the tree drawing code<newline46mondego>}<newline46mondego>"
"7534splitHere46","20250772splitHere46","<A,B>"
"7535splitHere46","20250772splitHere46","<Object,Object>"
"7536splitHere46","20250772splitHere46","private int foo(Pair<String, ?>... params) {<newline46mondego>  if (params[0].snd instanceof String) {<newline46mondego>    return 0;<newline46mondego>  } else { //if(params[0].snd instanceof List) { //is a List interface, not which List<newline46mondego>    // do something else<newline46mondego>    return 1;<newline46mondego>  }<newline46mondego>// return -1; // If it can't happen, why have it here.<newline46mondego>}<newline46mondego>"
"7537splitHere46","20250776splitHere46","Device Database <newline46mondego>"
"7538splitHere46","20250776splitHere46","DeviceDatabase<newline46mondego>Device_Database<newline46mondego>"
"7539splitHere46","20250783splitHere46","BigDecimal value = new BigDecimal(2);<newline46mondego>System.out.println(value.pow(1000));<newline46mondego>"
"7540splitHere46","20250801splitHere46","ActiveConnections"
"7541splitHere46","20250801splitHere46","public int search(int lookFor){<newline46mondego>        int res = -1;//not found<newline46mondego>        if(lookFor == one){<newline46mondego>            res = one;<newline46mondego>        }<newline46mondego>        else if(lookFor == two){<newline46mondego>            res = two;<newline46mondego>        }<newline46mondego>        else if(lookFor == three){<newline46mondego>            res = three;<newline46mondego>        }<newline46mondego>        return res;        <newline46mondego>    }<newline46mondego>"
"7542splitHere46","20250801splitHere46","-1"
"7543splitHere46","20250808splitHere46","Class.forName(<doubleQuotes46>com.mysql.jdbc.Driver<doubleQuotes46>);<newline46mondego>"
"7544splitHere46","20250808splitHere46","import java.sql.DriverManager;<newline46mondego> import java.sql.Connection;<newline46mondego> import java.sql.SQLException;<newline46mondego><newline46mondego> public class JDBCExample {<newline46mondego><newline46mondego>   public static void main(String[] argv) {<newline46mondego><newline46mondego>    System.out.println(<doubleQuotes46>-------- MySQL JDBC Connection Testing ------------<doubleQuotes46>);<newline46mondego><newline46mondego>try {<newline46mondego>    Class.forName(<doubleQuotes46>com.mysql.jdbc.Driver<doubleQuotes46>);<newline46mondego>} catch (ClassNotFoundException e) {<newline46mondego>    System.out.println(<doubleQuotes46>Where is your MySQL JDBC Driver?<doubleQuotes46>);<newline46mondego>    e.printStackTrace();<newline46mondego>    return;<newline46mondego>}<newline46mondego><newline46mondego>System.out.println(<doubleQuotes46>MySQL JDBC Driver Registered!<doubleQuotes46>);<newline46mondego>Connection connection = null;<newline46mondego><newline46mondego>try {<newline46mondego>    connection = DriverManager<newline46mondego>    .getConnection(<doubleQuotes46>jdbc:mysql://localhost:3306/mkyongcom<doubleQuotes46>,<doubleQuotes46>root<doubleQuotes46>, <doubleQuotes46>password<doubleQuotes46>);<newline46mondego><newline46mondego>} catch (SQLException e) {<newline46mondego>    System.out.println(<doubleQuotes46>Connection Failed! Check output console<doubleQuotes46>);<newline46mondego>    e.printStackTrace();<newline46mondego>    return;<newline46mondego>}<newline46mondego><newline46mondego>  if (connection != null) {<newline46mondego>    System.out.println(<doubleQuotes46>You made it, take control your database now!<doubleQuotes46>);<newline46mondego>  } else {<newline46mondego>    System.out.println(<doubleQuotes46>Failed to make connection!<doubleQuotes46>);<newline46mondego>  }<newline46mondego>}<newline46mondego>} <newline46mondego>"
"7545splitHere46","20250832splitHere46","protected <V, T extends Result> void<newline46mondego>"
"7546splitHere46","20250832splitHere46","<V, T extends Result>"
"7547splitHere46","20250832splitHere46","<"
"7548splitHere46","20250832splitHere46",">"
"7549splitHere46","20250832splitHere46","... postObject(final V input,...<newline46mondego>"
"7550splitHere46","20250832splitHere46","//Now post it<newline46mondego>postObject(<doubleQuotes46>my input object<doubleQuotes46>, null /*Your result class*/, null /*your endpoint*/, true, 0, null /*your loaderProvider*/, null /*your callbacks*/);<newline46mondego>"
"7551splitHere46","20251017splitHere46","secondNumber=(input.substring(input.substring(input.indexOf(<doubleQuotes46> <doubleQuotes46>,input.lastIndexOf(<doubleQuotes46> <doubleQuotes46>)+1)+1)));<newline46mondego>"
"7552splitHere46","20251017splitHere46","substring"
"7553splitHere46","20251017splitHere46","String"
"7554splitHere46","20251017splitHere46","int"
"7555splitHere46","20251017splitHere46","String someString = input.substring(input.indexOf(<doubleQuotes46> <doubleQuotes46>,input.lastIndexOf(<doubleQuotes46> <doubleQuotes46>)+1)+1);<newline46mondego> secondNumber=(input.substring(someString));<newline46mondego>"
"7556splitHere46","20251017splitHere46","run"
"7557splitHere46","20251017splitHere46","String"
"7558splitHere46","20251022splitHere46","setDate(java.sql.Date)"
"7559splitHere46","20251022splitHere46","query.setDate(2, new java.sql.Date(c.getStartDate().getMillis());<newline46mondego>"
"7560splitHere46","20251147splitHere46","Authorization"
"7561splitHere46","20251147splitHere46","GoogleAccountCredential credential = GoogleAccountCredential.usingAudience(<newline46mondego>    MainActivity.this, AppConstants.AUDIENCE);<newline46mondego>credential.setSelectedAccountName(emailAccount);<newline46mondego>"
"7562splitHere46","20251147splitHere46","MainActivity"
"7563splitHere46","20251147splitHere46","AppConstants"
"7564splitHere46","20251147splitHere46","AUDIENCE"
"7565splitHere46","20251147splitHere46","AUDIENCE"
"7566splitHere46","20251147splitHere46","emailAccount"
"7567splitHere46","20251147splitHere46","setOauthToken"
"7568splitHere46","20251147splitHere46","service.greetings().authed().execute()<newline46mondego>"
"7569splitHere46","20251170splitHere46","(size!) / (size - n)!"
"7570splitHere46","20251170splitHere46","int numLoops = 1;<newline46mondego>for (int i = 0; i < n; i++) {<newline46mondego>    numLoops*= (size - i);<newline46mondego>}<newline46mondego><newline46mondego>for (int i = 0; i < numLoops; i++) {<newline46mondego>    //do something<newline46mondego>}<newline46mondego>"
"7571splitHere46","20251201splitHere46","(?iu)[(?=\\s)]\\b(Go)|(^go)|(go$)\\b(?!\\S)"
"7572splitHere46","20251209splitHere46","jSplitPan.setDividerLocation(location);"
"7573splitHere46","20251209splitHere46","location"
"7574splitHere46","20251209splitHere46","jSplitPane1.addMouseMotionListener(new MouseMotionAdapter() {<newline46mondego>            public void mouseMoved(MouseEvent evt) {<newline46mondego>                // use evt.getSource() if needed<newline46mondego>                jSplitPan1.setDividerLocation(location);<newline46mondego>            }<newline46mondego>        });<newline46mondego>"
"7575splitHere46","20251209splitHere46","How to use MouseMotionListeners"
"7576splitHere46","20251366splitHere46","myFile"
"7577splitHere46","20251366splitHere46","myView"
"7578splitHere46","20251366splitHere46","myFile"
"7579splitHere46","20251366splitHere46","myView"
"7580splitHere46","20251366splitHere46","public class myFile {<newline46mondego>    private myView view;<newline46mondego><newline46mondego>    public myFile (myView view) {<newline46mondego>        this.view = view;<newline46mondego>    }<newline46mondego><newline46mondego>    public void somethingHappened () {<newline46mondego>        view.someMethod ();<newline46mondego>    }<newline46mondego>}<newline46mondego>"
"7581splitHere46","20251389splitHere46","public class Execution implements Runnable {<newline46mondego>    public String name;<newline46mondego><newline46mondego>    protected long startedAtMs;<newline46mondego><newline46mondego>    // total timeout in ms<newline46mondego>    protected long timeoutMs;<newline46mondego><newline46mondego><newline46mondego>    // rate: 1 execution per 2 ms<newline46mondego>    private long rateMs = 2;<newline46mondego><newline46mondego>    // when was the previousExecution<newline46mondego>    private long prevExecutionMs;<newline46mondego><newline46mondego>    // action to run each 1 ms<newline46mondego>    protected Runnable action;<newline46mondego><newline46mondego>    public Execution(String name, double et, Runnable action) {<newline46mondego>        this.name = name;<newline46mondego>        this.action = action;<newline46mondego>        this.timeoutMs = (long) (et * 1000);<newline46mondego><newline46mondego>    }<newline46mondego><newline46mondego>    public void run() {<newline46mondego>        startedAtMs = System.currentTimeMillis();<newline46mondego>        prevExecutionMs = startedAtMs;<newline46mondego><newline46mondego>        while (true) {<newline46mondego>            // check if the job was interrupted<newline46mondego>            if (Thread.interrupted()) {<newline46mondego>                return;<newline46mondego>            }<newline46mondego><newline46mondego>            long now = System.currentTimeMillis();<newline46mondego><newline46mondego>            // check if it's time to finish<newline46mondego>            if (now - startedAtMs > timeoutMs) {<newline46mondego>                break;<newline46mondego>            }<newline46mondego><newline46mondego>            // check if it's time to run the action<newline46mondego>            if(now - prevExecutionMs > rateMs){<newline46mondego>                // run the action<newline46mondego>                action.run();<newline46mondego>                // update the executed time<newline46mondego>                prevExecutionMs = now;<newline46mondego>            }<newline46mondego>        }<newline46mondego><newline46mondego>    }<newline46mondego><newline46mondego>    // this getter could be used to get the running time<newline46mondego>    public double getTimeToDisplay() {<newline46mondego>        return (System.currentTimeMillis() - startedAtMs) / 1000D;<newline46mondego>    }<newline46mondego><newline46mondego>    public static void main(String[] args) throws InterruptedException {<newline46mondego>        Thread thread = new Thread(new Execution(<doubleQuotes46>exec<doubleQuotes46>, 0.5, new Runnable() {<newline46mondego>            @Override<newline46mondego>            public void run() {<newline46mondego>                System.out.println(new Date());<newline46mondego>            }<newline46mondego>        }));<newline46mondego><newline46mondego>        //starts the thread<newline46mondego>        thread.start();<newline46mondego><newline46mondego>        //waits to finish<newline46mondego>        thread.join();<newline46mondego><newline46mondego>        System.out.println(<doubleQuotes46>Done!<doubleQuotes46>);<newline46mondego>    }<newline46mondego>}<newline46mondego>"
"7582splitHere46","20251581splitHere46","writer.println(<doubleQuotes46><h3 style=padding-left:20px;><doubleQuotes46> + x + <doubleQuotes46><br/><doubleQuotes46> + y + <doubleQuotes46><br/><doubleQuotes46> + z + <doubleQuotes46><br/></h3><doubleQuotes46>);<newline46mondego>"
"7583splitHere46","20251835splitHere46","Integer[]"
"7584splitHere46","20251835splitHere46","int[]"
"7585splitHere46","20251835splitHere46","Comparator"
"7586splitHere46","20251835splitHere46","Collections.reverseOrder()"
"7587splitHere46","20251835splitHere46","Arrays.sort(arr, Collections.reverseOrder());<newline46mondego>"
"7588splitHere46","20251959splitHere46","break"
"7589splitHere46","20251959splitHere46","switch(chgColor)<newline46mondego>            {<newline46mondego>                case 0:<newline46mondego>                    container.setBackground(Color.red);<newline46mondego>                    break;<newline46mondego>                case 1:<newline46mondego>                    container.setBackground(Color.yellow);<newline46mondego>                     break;<newline46mondego>                case 2:<newline46mondego>                    container.setBackground(Color.blue);<newline46mondego>                    break;<newline46mondego>                case 3:<newline46mondego>                    container.setBackground(Color.green);<newline46mondego>                    break;<newline46mondego>                case 4:<newline46mondego>                    container.setBackground(Color.magenta);<newline46mondego>                    break;<newline46mondego>                default:<newline46mondego>                //What if none of above condition is satisfied.<newline46mondego>             }<newline46mondego>"
"7590splitHere46","20251959splitHere46","class Lab17_4combo extends JFrame implements ActionListener<newline46mondego>    {<newline46mondego>        Container container;<newline46mondego>        JComboBox colors;// you declared colors. <newline46mondego><newline46mondego>        public Lab17_4combo()<newline46mondego>        {<newline46mondego>            super(<doubleQuotes46>ComboBox <doubleQuotes46>);<newline46mondego>            container = this.getContentPane();<newline46mondego>            container.setLayout(new FlowLayout());<newline46mondego>            setSize(300,200);<newline46mondego>            setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);<newline46mondego><newline46mondego>            String[] selectColor = {<doubleQuotes46>Red<doubleQuotes46>, <doubleQuotes46>Yellow<doubleQuotes46>, <doubleQuotes46>Blue<doubleQuotes46>, <doubleQuotes46>Green<doubleQuotes46>, <doubleQuotes46>Magenta<doubleQuotes46>};<newline46mondego><newline46mondego>            //JComboBox colors = new JComboBox(selectColor);// You declared colors again. Change     this line to <newline46mondego><newline46mondego>            colors = new JComboBox(selectColor);<newline46mondego>            colors.setSelectedIndex(-1);<newline46mondego>            colors.addActionListener(this);<newline46mondego><newline46mondego>            container.add(colors);<newline46mondego>            setVisible(true);<newline46mondego>        }<newline46mondego>"
"7591splitHere46","20251989splitHere46","layout.setIcon(new ImageIcon(<doubleQuotes46>Images\\BlackRockAndBlackBoard.jpg<doubleQuotes46>));<newline46mondego>"
"7592splitHere46","20251989splitHere46","ImageIcon"
"7593splitHere46","20251989splitHere46","URL imageUrl = YourClassName.class.getResource(<doubleQuotes46>/Images/ImageName.jpg<doubleQuotes46>);<newline46mondego>layout.setIcon(new ImageIcon( imageUrl ));<newline46mondego>"
"7594splitHere46","20252008splitHere46","import java.awt.BasicStroke;<newline46mondego>import java.awt.BorderLayout;<newline46mondego>import java.awt.Color;<newline46mondego>import java.awt.Dimension;<newline46mondego>import java.awt.Graphics;<newline46mondego>import java.awt.Graphics2D;<newline46mondego>import java.awt.RenderingHints;<newline46mondego>import java.awt.geom.Line2D;<newline46mondego><newline46mondego>import javax.swing.JComponent;<newline46mondego>import javax.swing.JFrame;<newline46mondego><newline46mondego>public class Draw2D extends JFrame {<newline46mondego>    public Draw2D() {<newline46mondego>        setDefaultCloseOperation(EXIT_ON_CLOSE);<newline46mondego>        setLayout(new BorderLayout());<newline46mondego>        add(new DrawPane(), BorderLayout.CENTER);<newline46mondego>        pack();<newline46mondego>    }<newline46mondego><newline46mondego>    public static void main(String[] args) {<newline46mondego>        Draw2D drawing = new Draw2D();<newline46mondego>        drawing.setVisible(true);<newline46mondego>    }<newline46mondego>}<newline46mondego><newline46mondego>class DrawPane extends JComponent {<newline46mondego>    public DrawPane() {<newline46mondego>        setPreferredSize(new Dimension(640, 640));<newline46mondego>    }<newline46mondego><newline46mondego>    @Override<newline46mondego>    protected void paintComponent(Graphics g) {<newline46mondego>        super.paintComponent(g);<newline46mondego>        Graphics2D g2 = (Graphics2D) g;<newline46mondego><newline46mondego>        // use anti-aliasing for smooth lines<newline46mondego>        g2.setRenderingHint(RenderingHints.KEY_ANTIALIASING, RenderingHints.VALUE_ANTIALIAS_ON);<newline46mondego><newline46mondego>        // move origin to center<newline46mondego>        g2.translate(getWidth() / 2, getHeight() / 2);<newline46mondego><newline46mondego>        // scale as you need. Using negative y so that y points upward<newline46mondego>        // note that non-square window sizes will cause a different aspect ratio,<newline46mondego>        // you probably want to use Math.min(width, height) or something<newline46mondego>        g2.scale(getWidth() / 2, -getHeight() / 2);<newline46mondego><newline46mondego>        // set color and thickness<newline46mondego>        g2.setColor(Color.red);<newline46mondego>        g2.setStroke(new BasicStroke(0.001f));<newline46mondego><newline46mondego>        // draw coordinate lines<newline46mondego>        g2.draw(new Line2D.Float(-1f, 0f, 1.0f, 0f));<newline46mondego>        g2.draw(new Line2D.Float(0, -1.0f, 0.0f, 1.0f));<newline46mondego><newline46mondego>        // draw a vector<newline46mondego>        g2.draw(new Line2D.Float(0f, 0f, 0.25f, 0.25f));<newline46mondego>    }<newline46mondego>}<newline46mondego>"
"7595splitHere46","20252051splitHere46","public void prepare() {     <newline46mondego>        /* Prepare Async Task - starts buffering */<newline46mondego>        try {           <newline46mondego>            mediaPlayer.setDataSource(radioStreamURL);<newline46mondego>            mediaPlayer.prepareAsync();<newline46mondego>        } catch (IllegalArgumentException e) {<newline46mondego>            e.printStackTrace();<newline46mondego>        } catch (IllegalStateException e) {<newline46mondego>            e.printStackTrace();<newline46mondego>        } catch (IOException e) {<newline46mondego>            e.printStackTrace();<newline46mondego>        }<newline46mondego>    }<newline46mondego>"
"7596splitHere46","20252051splitHere46","radioStreamURL"
"7597splitHere46","20252051splitHere46","private String radioStreamURL = MainActivity.radioStreamURL;<newline46mondego>"
"7598splitHere46","20252051splitHere46","private static int station = 0;//Not right, just to show<newline46mondego><newline46mondego>public void onNextStationClicked(){<newline46mondego>    radioServiceBinder.changeStation(++station);<newline46mondego>}<newline46mondego>"
"7599splitHere46","20252051splitHere46","public static final String MODE_STATION_CHANGE = <doubleQuotes46>STATION_CHANGE<doubleQuotes46>;<newline46mondego><newline46mondego>public void changeStation(int stationIndex){<newline46mondego>  radioStreamURL = MainActivity.radioStreamURL.get(stationIndex);<newline46mondego>  stop();<newline46mondego>  play();<newline46mondego>}<newline46mondego>"
"7600splitHere46","20252051splitHere46","private List<String> radioStreamURL = new ArrayList<String><newline46mondego>private int radioStreamingIndex = 0;<newline46mondego>"
"7601splitHere46","20252051splitHere46","@Override<newline46mondego>    public void onCreate() {<newline46mondego>    radioStreamURL.add(radioStreamURL);<newline46mondego>    radioStreamURL.add(radioStreamURL2);<newline46mondego>    radioStreamURL.add(radioStreamURL3);<newline46mondego>    // etc<newline46mondego>}<newline46mondego> public void prepare() {     <newline46mondego>        /* Prepare Async Task - starts buffering */<newline46mondego>        try {           <newline46mondego>            mediaPlayer.setDataSource(radioStreamURL.get(radioStreamingIndex));<newline46mondego>            mediaPlayer.prepareAsync();<newline46mondego>        } catch (Exception e) {<newline46mondego>            e.printStackTrace();<newline46mondego>        }<newline46mondego>    }<newline46mondego><newline46mondego>public void nextStation(){<newline46mondego>  changeStation(radioStreamingIndex+1);<newline46mondego>}<newline46mondego><newline46mondego>public void prevStation(){<newline46mondego>  changeStation(radioStreamingIndex-1);<newline46mondego>}<newline46mondego><newline46mondego>private void changeStation(int stationIndex){<newline46mondego>  if(stationIndex > 0 && stationIndex < radioStreamURL.size()){<newline46mondego>  radioStreamingIndex = stationIndex;<newline46mondego>  stop();<newline46mondego>  play();<newline46mondego>  }<newline46mondego>}<newline46mondego>"
"7602splitHere46","20252051splitHere46","nextButton.setOnClickListener(new OnClickListener() {<newline46mondego>    @Override<newline46mondego>    public void onClick(View v) {<newline46mondego>        radioServiceBinder.nextStation();<newline46mondego>    }<newline46mondego>});<newline46mondego><newline46mondego>prevButton.setOnClickListener(new OnClickListener() {<newline46mondego>    @Override<newline46mondego>    public void onClick(View v) {<newline46mondego>        radioServiceBinder.prevStation();<newline46mondego>    }<newline46mondego>});<newline46mondego>"
"7603splitHere46","20252101splitHere46","http://localhost:8080/presentation-layer"
"7604splitHere46","20252142splitHere46","'prefSize()'"
"7605splitHere46","20252142splitHere46","private XYChart.Data CoLDatum(Double x, Double y){<newline46mondego>    final XYChart.Data data = new XYChart.Data(x, y);<newline46mondego>    ImageView myImage = new ImageView(new Image(getClass().getResource(<doubleQuotes46>style/redX.png<doubleQuotes46>).toExternalForm()));<newline46mondego>    data.setNode(myImage);<newline46mondego>    data.getNode().setOnMouseEntered(new EventHandler<MouseEvent>() {<newline46mondego>        @Override public void handle(MouseEvent mouseEvent) {<newline46mondego>          main_label.setText(<doubleQuotes46>Some Text.<doubleQuotes46>);<newline46mondego>        }<newline46mondego>      });<newline46mondego>      data.getNode().setOnMouseExited(new EventHandler<MouseEvent>(){<newline46mondego>        @Override public void handle(MouseEvent mouseEvent) {<newline46mondego>          main_label.setText(<doubleQuotes46><doubleQuotes46>);<newline46mondego>        }<newline46mondego>      });<newline46mondego><newline46mondego>    return data;<newline46mondego>  }<newline46mondego>"
"7606splitHere46","20252142splitHere46","setStyle(java.lang.String)"
"7607splitHere46","20252148splitHere46","<applet>"
"7608splitHere46","20252148splitHere46","<embed>"
"7609splitHere46","20252148splitHere46","<embed id=<doubleQuotes46>test<doubleQuotes46><newline46mondego>       type=<doubleQuotes46>application/x-java-applet;version=1.6<doubleQuotes46><newline46mondego>       width=<doubleQuotes46>256<doubleQuotes46> height=<doubleQuotes46>256<doubleQuotes46> <newline46mondego>       archive=<doubleQuotes46>test.jar<doubleQuotes46><newline46mondego>       code=<doubleQuotes46>Test.class<doubleQuotes46><newline46mondego>       codebase=<doubleQuotes46>test<doubleQuotes46><newline46mondego>       pluginspage=<doubleQuotes46>http://java.com/download/<doubleQuotes46><newline46mondego>       myParam=<doubleQuotes46><doubleQuotes46> /><newline46mondego>"
"7610splitHere46","20252274splitHere46","D,1000,-500"
"7611splitHere46","20252274splitHere46","public class serialRobot {<newline46mondego><newline46mondego>        public static void main(String[] s) {<newline46mondego>                SerialPort serialPort = null;<newline46mondego>                try {<newline46mondego>                        CommPortIdentifier portIdentifier = CommPortIdentifier.getPortIdentifier(<doubleQuotes46>COM71<doubleQuotes46>);<newline46mondego>                        if (portIdentifier.isCurrentlyOwned()) {<newline46mondego>                                System.out.println(<doubleQuotes46>Port in use!<doubleQuotes46>);<newline46mondego>                        } else {<newline46mondego>                                System.out.println(portIdentifier.getName());<newline46mondego><newline46mondego>                                serialPort = (SerialPort) portIdentifier.open(<newline46mondego>                                                <doubleQuotes46>ListPortClass<doubleQuotes46>, 300);<newline46mondego>                                int b = serialPort.getBaudRate();<newline46mondego>                                System.out.println(Integer.toString(b));<newline46mondego>                                serialPort.setSerialPortParams(115200, SerialPort.DATABITS_8,<newline46mondego>                                                SerialPort.STOPBITS_1, SerialPort.PARITY_NONE);<newline46mondego>                                serialPort.setInputBufferSize(65536);<newline46mondego>                                serialPort.setOutputBufferSize(4096);<newline46mondego><newline46mondego>                                System.out.println(<doubleQuotes46>Opened <doubleQuotes46> + portIdentifier.getName());<newline46mondego><newline46mondego>                                OutputStream mOutputToPort = serialPort.getOutputStream();<newline46mondego>                                InputStream mInputFromPort = serialPort.getInputStream();<newline46mondego><newline46mondego><newline46mondego>                                PerpetualThread t = readAndPrint(mInputFromPort);<newline46mondego><newline46mondego>                                inputAndSend(mOutputToPort);<newline46mondego><newline46mondego><newline46mondego>                                t.stopRunning();<newline46mondego><newline46mondego>                                mOutputToPort.close();<newline46mondego>                                mInputFromPort.close();<newline46mondego>                        }<newline46mondego>                } catch (IOException ex) {<newline46mondego>                        System.out.println(<doubleQuotes46>IOException : <doubleQuotes46> + ex.getMessage());<newline46mondego>                } catch (UnsupportedCommOperationException ex) {<newline46mondego>                        System.out.println(<doubleQuotes46>UnsupportedCommOperationException : <doubleQuotes46> + ex.getMessage());<newline46mondego>                } catch (NoSuchPortException ex) {<newline46mondego>                        System.out.println(<doubleQuotes46>NoSuchPortException : <doubleQuotes46> + ex.getMessage());<newline46mondego>                } catch (PortInUseException ex) {<newline46mondego>                        System.out.println(<doubleQuotes46>PortInUseException : <doubleQuotes46> + ex.getMessage());<newline46mondego>                } finally {<newline46mondego>                        if(serialPort != null) {<newline46mondego>                                serialPort.close();<newline46mondego>                        }<newline46mondego>                }<newline46mondego><newline46mondego>        }<newline46mondego><newline46mondego>        private static PerpetualThread readAndPrint(InputStream in) {<newline46mondego>                final BufferedInputStream b = new BufferedInputStream(in);<newline46mondego>                PerpetualThread thread = new PerpetualThread() {<newline46mondego><newline46mondego>                        @Override<newline46mondego>                        public void run() {<newline46mondego>                                byte[] data = new byte[16];<newline46mondego>                                int len = 0;<newline46mondego>                                for(;isRunning();) {<newline46mondego>                                        try {<newline46mondego>                                                len = b.read(data);<newline46mondego>                                        } catch (IOException e) {<newline46mondego>                                                e.printStackTrace();<newline46mondego>                                        }<newline46mondego>                                        if(len > 0) {<newline46mondego>                                                System.out.print(new String(data, 0, len));<newline46mondego>                                        }<newline46mondego>                                }<newline46mondego>                        }<newline46mondego><newline46mondego>                };<newline46mondego><newline46mondego>                thread.start();<newline46mondego><newline46mondego>                return thread;<newline46mondego>        }<newline46mondego><newline46mondego>        private static void inputAndSend(OutputStream out) {<newline46mondego>                BufferedReader in = new BufferedReader(new InputStreamReader(System.in));<newline46mondego>                int k = 0;<newline46mondego>                for(;;) {<newline46mondego><newline46mondego>                        String komanda;<newline46mondego>                        try {<newline46mondego>                                komanda = in.readLine();<newline46mondego>                        } catch (IOException e) {<newline46mondego>                                e.printStackTrace();<newline46mondego>                                return;<newline46mondego>                        }<newline46mondego>                        komanda = komanda.trim();<newline46mondego><newline46mondego>                        if(komanda.equalsIgnoreCase(<doubleQuotes46>end<doubleQuotes46>))       return;<newline46mondego><newline46mondego>                        byte komandaSiust[] = proces(komanda); //Command we send after first <newline46mondego><newline46mondego>//connection, it's byte array where 0 member is the letter that describes type of command, next two members <newline46mondego><newline46mondego>// is about left wheel speed, and the last two - right wheel speed.<newline46mondego><newline46mondego><newline46mondego><newline46mondego>                        try {<newline46mondego>                               if(k == 0){<newline46mondego>                                String siunc = <doubleQuotes46>P,0,0\n<doubleQuotes46>; // This command must be sent first time, when robot is connected, otherwise other commands won't work<newline46mondego>                                ByteBuffer bb = ByteBuffer.wrap(siunc.getBytes(<doubleQuotes46>UTF-8<doubleQuotes46>));<newline46mondego>                                bb.order(ByteOrder.LITTLE_ENDIAN);<newline46mondego>                                out.write(bb.array());<newline46mondego>                                out.flush();      <newline46mondego>                               }else{<newline46mondego>                               ByteBuffer bb = ByteBuffer.wrap(komandaSiust);<newline46mondego>                               bb.order(ByteOrder.LITTLE_ENDIAN);<newline46mondego>                               out.write(bb.array());<newline46mondego>                               out.flush();<newline46mondego>                               }<newline46mondego>                               k++;<newline46mondego><newline46mondego>                        } catch (IOException e) {<newline46mondego>                                e.printStackTrace();<newline46mondego>                                return;<newline46mondego>                        }<newline46mondego>                }<newline46mondego>        }<newline46mondego><newline46mondego>        private static byte[] proces(String tekstas){<newline46mondego>            tekstas = tekstas.trim();<newline46mondego>            char[] charArray = tekstas.toCharArray();<newline46mondego>            byte kodas1[];<newline46mondego><newline46mondego><newline46mondego><newline46mondego>            int fComa = tekstas.indexOf(',', 1);<newline46mondego>            int sComa = tekstas.indexOf(',', 2);<newline46mondego>            int matavimas = charArray.length;<newline46mondego>            int skir1 = sComa - fComa - 1;<newline46mondego>            int skir2 = matavimas - sComa -1;<newline46mondego><newline46mondego>            char leftSpeed[] = new char[skir1];<newline46mondego><newline46mondego>            for(int i = 0; i < skir1; i++){<newline46mondego>                  leftSpeed[i] = charArray[fComa + i + 1];<newline46mondego>            }<newline46mondego><newline46mondego>            char rightSpeed[] = new char[skir2];<newline46mondego><newline46mondego>            for(int i = 0; i < skir2; i++){<newline46mondego>                rightSpeed[i] = charArray[sComa + i + 1];<newline46mondego>            }<newline46mondego>            String right = String.valueOf(rightSpeed);<newline46mondego>            String left = String.valueOf(leftSpeed);<newline46mondego><newline46mondego><newline46mondego>            int val1 = Integer.parseInt(left);<newline46mondego>            int val2 = Integer.parseInt(right);<newline46mondego>            kodas1 = new byte[5];<newline46mondego>            kodas1[0] = (byte)-charArray[0];<newline46mondego>            kodas1[1] = (byte)(val1 & 0xFF);<newline46mondego>            kodas1[2] = (byte)(val1 >> 8);<newline46mondego>            kodas1[3] = (byte)(val2 & 0xFF);<newline46mondego>            kodas1[4] = (byte)(val2 >> 8);<newline46mondego><newline46mondego>            return kodas1;<newline46mondego><newline46mondego><newline46mondego>        }<newline46mondego><newline46mondego>        private static class PerpetualThread extends Thread {<newline46mondego>                private boolean isRunning = true;<newline46mondego><newline46mondego>                public boolean isRunning() {    return isRunning;       }<newline46mondego><newline46mondego>                public void stopRunning()       {<newline46mondego>                        isRunning = false;<newline46mondego>                        this.interrupt();<newline46mondego>                }<newline46mondego>        }<newline46mondego>}<newline46mondego>"
"7612splitHere46","20252287splitHere46","newStr = newStr.charAt(newStr.length() - 1) + newStr.substring(0, newStr.length - 1);<newline46mondego>"
"7613splitHere46","20252433splitHere46","ObjectMapper"
"7614splitHere46","20252433splitHere46","List"
"7615splitHere46","20252433splitHere46","String"
"7616splitHere46","20252433splitHere46","@RequestMapping()<newline46mondego>protected String initPage(Model model) {<newline46mondego><newline46mondego>    List<StateDropDownEntry> states = stateService.getStates();<newline46mondego>    List<TownDropDownEntry> towns = townService.getTowns();<newline46mondego><newline46mondego>    ObjectMapper objMapper = new ObjectMapper();<newline46mondego>    String statesJson = objMapper.writeValueAsString(states); // try|catch removed for clarity<newline46mondego>    String townsJson = objMapper.writeValueAsString(towns);  <newline46mondego><newline46mondego>    model.addAttribute(<doubleQuotes46>statesJson<doubleQuotes46>,statesJson);<newline46mondego>    model.addAttribute(<doubleQuotes46>townsJson<doubleQuotes46>,townsJson);<newline46mondego><newline46mondego>    return <doubleQuotes46>stateTownQueryPage<doubleQuotes46>;<newline46mondego>}<newline46mondego>"
"7617splitHere46","20252433splitHere46","@ResponseBody"
"7618splitHere46","20252481splitHere46","public interface SpriteFactory<T extends AbstractSprite> {<newline46mondego>  T createSprite();<newline46mondego>}<newline46mondego>"
"7619splitHere46","20252481splitHere46","SpritePool bulletPool = new SpritePool<GameBullet>(new GameBulletFactory());<newline46mondego>"
"7620splitHere46","20252501splitHere46","Android Annotations"
"7621splitHere46","20252501splitHere46","<newline46mondego>public class BookmarksToClipboardActivity extends Activity {<newline46mondego><newline46mondego>  BookmarkAdapter adapter;<newline46mondego><newline46mondego>  ListView bookmarkList;<newline46mondego><newline46mondego>  EditText search;<newline46mondego><newline46mondego>  BookmarkApplication application;<newline46mondego><newline46mondego>  Animation fadeIn;<newline46mondego><newline46mondego>  ClipboardManager clipboardManager;<newline46mondego><newline46mondego>  @Override<newline46mondego>  protected void onCreate(Bundle savedInstanceState) {<newline46mondego>    super.onCreate(savedInstanceState);<newline46mondego><newline46mondego>    requestWindowFeature(Window.FEATURE_NO_TITLE);<newline46mondego>    getWindow().setFlags(FLAG_FULLSCREEN, FLAG_FULLSCREEN);<newline46mondego><newline46mondego>    setContentView(R.layout.bookmarks);<newline46mondego><newline46mondego>    bookmarkList = (ListView) findViewById(R.id.bookmarkList);<newline46mondego>    search = (EditText) findViewById(R.id.search);<newline46mondego>    application = (BookmarkApplication) getApplication();<newline46mondego>    fadeIn = AnimationUtils.loadAnimation(this, anim.fade_in);<newline46mondego>    clipboardManager = (ClipboardManager) getSystemService(CLIPBOARD_SERVICE);<newline46mondego><newline46mondego>    View updateBookmarksButton1 = findViewById(R.id.updateBookmarksButton1);<newline46mondego>    updateBookmarksButton1.setOnClickListener(new OnClickListener() {<newline46mondego><newline46mondego>      @Override<newline46mondego>      public void onClick(View v) {<newline46mondego>        updateBookmarksClicked();<newline46mondego>      }<newline46mondego>    });<newline46mondego><newline46mondego>    View updateBookmarksButton2 = findViewById(R.id.updateBookmarksButton2);<newline46mondego>    updateBookmarksButton2.setOnClickListener(new OnClickListener() {<newline46mondego><newline46mondego>      @Override<newline46mondego>      public void onClick(View v) {<newline46mondego>        updateBookmarksClicked();<newline46mondego>      }<newline46mondego>    });<newline46mondego><newline46mondego>    bookmarkList.setOnItemClickListener(new OnItemClickListener() {<newline46mondego><newline46mondego>      @Override<newline46mondego>      public void onItemClick(AdapterView p, View v, int pos, long id) {<newline46mondego>        Bookmark selectedBookmark = (Bookmark) p.getAdapter().getItem(pos);<newline46mondego>        bookmarkListItemClicked(selectedBookmark);<newline46mondego>      }<newline46mondego>    });<newline46mondego><newline46mondego>    initBookmarkList();<newline46mondego>  }<newline46mondego><newline46mondego>  void initBookmarkList() {<newline46mondego>    adapter = new BookmarkAdapter(this);<newline46mondego>    bookmarkList.setAdapter(adapter);<newline46mondego>  }<newline46mondego><newline46mondego>  void updateBookmarksClicked() {<newline46mondego>    UpdateBookmarksTask task = new UpdateBookmarksTask();<newline46mondego><newline46mondego>    task.execute(search.getText().toString(), application.getUserId());<newline46mondego>  }<newline46mondego><newline46mondego>  private static final String BOOKMARK_URL = //<newline46mondego>  <doubleQuotes46>http://www.bookmarks.com/bookmarks/{userId}?search={search}<doubleQuotes46>;<newline46mondego><newline46mondego><newline46mondego>  class UpdateBookmarksTask extends AsyncTask {<newline46mondego><newline46mondego>    @Override<newline46mondego>    protected Bookmarks doInBackground(String... params) {<newline46mondego>      String searchString = params[0];<newline46mondego>      String userId = params[1];<newline46mondego><newline46mondego>      RestTemplate client = new RestTemplate();<newline46mondego>      HashMap args = new HashMap();<newline46mondego>      args.put(<doubleQuotes46>search<doubleQuotes46>, searchString);<newline46mondego>      args.put(<doubleQuotes46>userId<doubleQuotes46>, userId);<newline46mondego>      HttpHeaders httpHeaders = new HttpHeaders();<newline46mondego>      HttpEntity request = new HttpEntity(httpHeaders);<newline46mondego>      ResponseEntity response = client.exchange( //<newline46mondego>          BOOKMARK_URL, HttpMethod.GET, request, Bookmarks.class, args);<newline46mondego>      Bookmarks bookmarks = response.getBody();<newline46mondego><newline46mondego>      return bookmarks;<newline46mondego>    }<newline46mondego><newline46mondego>    @Override<newline46mondego>    protected void onPostExecute(Bookmarks result) {<newline46mondego>      adapter.updateBookmarks(result);<newline46mondego>      bookmarkList.startAnimation(fadeIn);<newline46mondego>    }<newline46mondego><newline46mondego>  }<newline46mondego><newline46mondego>  void bookmarkListItemClicked(Bookmark selectedBookmark) {<newline46mondego>    clipboardManager.setText(selectedBookmark.getUrl());<newline46mondego>  }<newline46mondego><newline46mondego>}<newline46mondego>"
"7622splitHere46","20252501splitHere46","<newline46mondego>@NoTitle<newline46mondego>@Fullscreen<newline46mondego>@EActivity(R.layout.bookmarks)<newline46mondego>public class BookmarksToClipboardActivity extends Activity {<newline46mondego><newline46mondego>  BookmarkAdapter adapter;<newline46mondego><newline46mondego>  @ViewById<newline46mondego>  ListView bookmarkList;<newline46mondego><newline46mondego>  @ViewById<newline46mondego>  EditText search;<newline46mondego><newline46mondego>  @App<newline46mondego>  BookmarkApplication application;<newline46mondego><newline46mondego>  @RestService<newline46mondego>  BookmarkClient restClient;<newline46mondego><newline46mondego>  @AnimationRes<newline46mondego>  Animation fadeIn;<newline46mondego><newline46mondego>  @SystemService<newline46mondego>  ClipboardManager clipboardManager;<newline46mondego><newline46mondego>  @AfterViews<newline46mondego>  void initBookmarkList() {<newline46mondego>    adapter = new BookmarkAdapter(this);<newline46mondego>    bookmarkList.setAdapter(adapter);<newline46mondego>  }<newline46mondego><newline46mondego>  @Click({R.id.updateBookmarksButton1, R.id.updateBookmarksButton2})<newline46mondego>  void updateBookmarksClicked() {<newline46mondego>    searchAsync(search.getText().toString(), application.getUserId());<newline46mondego>  }<newline46mondego><newline46mondego>  @Background<newline46mondego>  void searchAsync(String searchString, String userId) {<newline46mondego>    Bookmarks bookmarks = restClient.getBookmarks(searchString, userId);<newline46mondego>    updateBookmarks(bookmarks);<newline46mondego>  }<newline46mondego><newline46mondego>  @UiThread<newline46mondego>  void updateBookmarks(Bookmarks bookmarks) {<newline46mondego>    adapter.updateBookmarks(bookmarks);<newline46mondego>    bookmarkList.startAnimation(fadeIn);<newline46mondego>  }<newline46mondego><newline46mondego>  @ItemClick<newline46mondego>  void bookmarkListItemClicked(Bookmark selectedBookmark) {<newline46mondego>    clipboardManager.setText(selectedBookmark.getUrl());<newline46mondego>  }<newline46mondego><newline46mondego>}<newline46mondego>"
"7623splitHere46","20252548splitHere46","paint"
"7624splitHere46","20252548splitHere46","paintComponent"
"7625splitHere46","20252548splitHere46","JComponent"
"7626splitHere46","20252548splitHere46","setOpaque(false)"
"7627splitHere46","20252548splitHere46","JLabel"
"7628splitHere46","20252548splitHere46","paintXxx"
"7629splitHere46","20252736splitHere46","http://api.flurry.com/appMetrics/Sessions?apiAccessCode=CODE&apiKey=APIkey<doubleQuotes46>&startDate=DATE&endDate=DATE<newline46mondego>"
"7630splitHere46","20252797splitHere46","ZShape"
"7631splitHere46","20252797splitHere46","static"
"7632splitHere46","20252797splitHere46","final"
"7633splitHere46","20252797splitHere46","static final"
"7634splitHere46","20252801splitHere46","Graphics"
"7635splitHere46","20252801splitHere46","Graphics2D g2d = (Graphics2D) g;<newline46mondego>g2d.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC));<newline46mondego>"
"7636splitHere46","20252801splitHere46","Graphics"
"7637splitHere46","20252801splitHere46","Graphics"
"7638splitHere46","20252801splitHere46","Graphics"
"7639splitHere46","20252801splitHere46","Graphics2D g2d = (Graphics2D) g.create();<newline46mondego>g2d.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC));<newline46mondego>//...<newline46mondego>// If you create it, you must dispose of it...<newline46mondego>g2d.dispose();<newline46mondego>"
"7640splitHere46","20252801splitHere46","semiTransPanel.setBackground(new Color(0.0f, 0.0f, 0.0f, 0.6f));<newline46mondego>"
"7641splitHere46","20252801splitHere46","TransparentDrawTest"
"7642splitHere46","20252801splitHere46","JPanel semiTransPanel = new JPanel() {<newline46mondego>    @Override<newline46mondego>    protected void paintComponent(Graphics g) {<newline46mondego>        super.paintComponent(g); <newline46mondego>        Graphics2D g2d = (Graphics2D) g.create();<newline46mondego>        g2d.setComposite(AlphaComposite.SrcOver.derive(0.6f));<newline46mondego>        g2d.setColor(getBackground());<newline46mondego>        g2d.fillRect(0, 0, getWidth(), getHeight());<newline46mondego>        g2d.dispose();<newline46mondego>    }<newline46mondego>};<newline46mondego>semiTransPanel.setBackground(new Color(0.0f, 0.0f, 0.0f));<newline46mondego>semiTransPanel.setOpaque(false);<newline46mondego>"
"7643splitHere46","20252801splitHere46","g2d.fillRect(0, 0, 400, 50);<newline46mondego>"
"7644splitHere46","20252801splitHere46","TransparentDrawTest"
"7645splitHere46","20252801splitHere46","super.paintComponent(g)"
"7646splitHere46","20252801splitHere46","Graphics"
"7647splitHere46","20252801splitHere46","import java.awt.AlphaComposite;<newline46mondego>import java.awt.BasicStroke;<newline46mondego>import java.awt.Color;<newline46mondego>import java.awt.Composite;<newline46mondego>import java.awt.Dimension;<newline46mondego>import java.awt.Graphics;<newline46mondego>import java.awt.Graphics2D;<newline46mondego>import java.awt.RenderingHints;<newline46mondego>import java.awt.event.MouseEvent;<newline46mondego>import java.awt.event.MouseListener;<newline46mondego>import javax.swing.JFrame;<newline46mondego>import javax.swing.JPanel;<newline46mondego><newline46mondego>public class TransparentDrawTest extends JPanel implements MouseListener {<newline46mondego><newline46mondego>    private final static Dimension SIZE = new Dimension(400, 50);<newline46mondego><newline46mondego>    private boolean isSelected;<newline46mondego>    private boolean isClicked;<newline46mondego><newline46mondego>    public static void main(String[] args) {<newline46mondego><newline46mondego>        JFrame testFrame = new JFrame();<newline46mondego>        testFrame.setSize(500, 100);<newline46mondego>        testFrame.setResizable(false);<newline46mondego>        testFrame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);<newline46mondego>        testFrame.setLocationRelativeTo(null);<newline46mondego>        testFrame.setBackground(Color.WHITE);<newline46mondego><newline46mondego>        JPanel semiTransPanel = new JPanel() {<newline46mondego><newline46mondego>            @Override<newline46mondego>            protected void paintComponent(Graphics g) {<newline46mondego>                super.paintComponent(g); <newline46mondego>                Graphics2D g2d = (Graphics2D) g.create();<newline46mondego>                g2d.setColor(getBackground());<newline46mondego>                g2d.setComposite(AlphaComposite.SrcOver.derive(0.6f));<newline46mondego>                g2d.fillRect(0, 0, getWidth(), getHeight());<newline46mondego>                g2d.dispose();<newline46mondego>            }<newline46mondego><newline46mondego>        };<newline46mondego>        semiTransPanel.setOpaque(false);<newline46mondego>        semiTransPanel.setBackground(Color.RED);<newline46mondego>        semiTransPanel.add(new TransparentDrawTest());<newline46mondego><newline46mondego>        testFrame.add(semiTransPanel);<newline46mondego>        testFrame.setVisible(true);<newline46mondego>    }<newline46mondego><newline46mondego>    public TransparentDrawTest() {<newline46mondego><newline46mondego>        this.addMouseListener(this);<newline46mondego><newline46mondego>        this.setSize(SIZE);<newline46mondego>        this.setMinimumSize(SIZE);<newline46mondego>        this.setMaximumSize(SIZE);<newline46mondego>        this.setPreferredSize(SIZE);<newline46mondego><newline46mondego>        this.setOpaque(false);<newline46mondego>    }<newline46mondego><newline46mondego>    @Override<newline46mondego>    public void paintComponent(Graphics g) {<newline46mondego><newline46mondego>        super.paintComponent(g);<newline46mondego>        Graphics2D g2d = (Graphics2D) g.create();<newline46mondego><newline46mondego>        int[] pointsX;<newline46mondego>        int[] pointsY;<newline46mondego><newline46mondego>        if (this.isSelected) {<newline46mondego>            pointsX = new int[]{2, 348, 398, 48};<newline46mondego>            pointsY = new int[]{2, 2, 48, 48};<newline46mondego>        } else {<newline46mondego>            pointsX = new int[]{2, 298, 348, 48};<newline46mondego>            pointsY = new int[]{2, 2, 48, 48};<newline46mondego>        }<newline46mondego><newline46mondego>        g2d.setRenderingHint(RenderingHints.KEY_ANTIALIASING, RenderingHints.VALUE_ANTIALIAS_ON);<newline46mondego>        g2d.setStroke(new BasicStroke(5));<newline46mondego>        g2d.setColor(Color.WHITE);<newline46mondego>        Composite comp = g2d.getComposite();<newline46mondego><newline46mondego>        if (this.isClicked) {<newline46mondego>            g2d.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER, 0.75f));<newline46mondego>        } else {<newline46mondego>            g2d.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER, 0.5f));<newline46mondego>        }<newline46mondego><newline46mondego>        g2d.fillPolygon(pointsX, pointsY, 4);<newline46mondego>        g2d.setComposite(comp);<newline46mondego>        g2d.drawPolygon(pointsX, pointsY, 4);<newline46mondego>        g2d.dispose();<newline46mondego>    }<newline46mondego><newline46mondego>    @Override<newline46mondego>    public void mouseClicked(MouseEvent e) {<newline46mondego>    }<newline46mondego><newline46mondego>    @Override<newline46mondego>    public void mouseEntered(MouseEvent e) {<newline46mondego>        this.isSelected = true;<newline46mondego>        this.repaint();<newline46mondego>    }<newline46mondego><newline46mondego>    @Override<newline46mondego>    public void mouseExited(MouseEvent e) {<newline46mondego>        this.isSelected = false;<newline46mondego>        this.repaint();<newline46mondego>    }<newline46mondego><newline46mondego>    @Override<newline46mondego>    public void mousePressed(MouseEvent e) {<newline46mondego>        this.isClicked = true;<newline46mondego>        this.repaint();<newline46mondego>    }<newline46mondego><newline46mondego>    @Override<newline46mondego>    public void mouseReleased(MouseEvent e) {<newline46mondego>        this.isClicked = false;<newline46mondego>        this.repaint();<newline46mondego>    }<newline46mondego>}<newline46mondego>"
"7648splitHere46","20252895splitHere46","Matcher#pattern()"
"7649splitHere46","20252895splitHere46","Matcher m;<newline46mondego>Pattern PATTERN_1=Pattern.compile(<doubleQuotes46>\\d+<doubleQuotes46>);<newline46mondego>Pattern PATTERN_2=Pattern.compile(<doubleQuotes46>[a-z]+<doubleQuotes46>);<newline46mondego>String text=<doubleQuotes46>abc<doubleQuotes46>;<newline46mondego>if( ((m = PATTERN_1.matcher(text)).find()) ||<newline46mondego>    ((m = PATTERN_2.matcher(text)).find()) ) {<newline46mondego>    System.out.println(<doubleQuotes46>PATTERN: <doubleQuotes46> + m.pattern());<newline46mondego>}<newline46mondego><newline46mondego>// prints: PATTERN: [a-z]+<newline46mondego>"
"7650splitHere46","20252915splitHere46","Random randomGenerator = new Random();<newline46mondego>int randomIndexA = randomGenerator.nextInt(A.size());<newline46mondego>int elemA = A.get(randomIndexA);<newline46mondego>"
"7651splitHere46","20252979splitHere46","String sqlStatement = <doubleQuotes46>SELECT <doubleQuotes46><newline46mondego>            + DBStrings.C_VH_ID<newline46mondego>            + <doubleQuotes46> FROM <doubleQuotes46> + DBStrings.CUSTOMER + <doubleQuotes46> WHERE <doubleQuotes46> + DBStrings.C_ID + <doubleQuotes46> = <doubleQuotes46> + customerId;<newline46mondego>    rs = statement.executeQuery(sqlStatement);<newline46mondego>    if (rs != null && rs.next()) {<newline46mondego>        int vh_id = rs.getInt(DBStrings.C_VH_ID);<newline46mondego>        vehicle = this.getVehicleFromId(vh_id);<newline46mondego>    }<newline46mondego>"
"7652splitHere46","20253062splitHere46","public void visualizarPartida() {<newline46mondego>    refNumPart = <doubleQuotes46>data<doubleQuotes46>; // Please write code which compiles. Also in questions!<newline46mondego>    estado = <doubleQuotes46>data<doubleQuotes46>;<newline46mondego>    partidaDirectaController.visualizarPartidaDetalle(refNumPart, estado);<newline46mondego>}<newline46mondego>"
"7653splitHere46","20253062splitHere46","public void visualizarPartidaDetalle() {<newline46mondego>    Map<String, String> params = FacesContext.getCurrentInstance().getExternalContext().getRequestParameterMap();<newline46mondego>    visualizarPartidaDetalle(params.get(<doubleQuotes46>refNumPart<doubleQuotes46>), params.get(<doubleQuotes46>estado<doubleQuotes46>));<newline46mondego>}<newline46mondego><newline46mondego>public void visualizarPartidaDetalle(String refNumPart, String estado) {<newline46mondego>    PartidaDirectaResultBean result = new PartidaDirectaResultBean();<newline46mondego>    result.setRefNumPart(refNumPart);<newline46mondego>    result.setEstado(estado);<newline46mondego>    // Etc...<newline46mondego>}<newline46mondego>"
"7654splitHere46","20253093splitHere46","String text = <doubleQuotes46>(info1) something-uninteresting [info2, info22] s.u. [info3] s.u. (info4, info5, info6)<doubleQuotes46>;<newline46mondego>    Pattern p = Pattern.compile(<doubleQuotes46> ?[\\w-.]+<doubleQuotes46>);<newline46mondego><newline46mondego>    Matcher m = p.matcher(text);<newline46mondego>    while (m.find()) {<newline46mondego>        System.out.println(m.group());<newline46mondego>    }<newline46mondego>"
"7655splitHere46","20253093splitHere46","info1<newline46mondego> something-uninteresting<newline46mondego>info2<newline46mondego> info22<newline46mondego> s.u.<newline46mondego>info3<newline46mondego> s.u.<newline46mondego>info4<newline46mondego> info5<newline46mondego> info6<newline46mondego>"
"7656splitHere46","20253251splitHere46","Apache Tomcat > Tomcat v7.0 Server at localhost"
"7657splitHere46","20253251splitHere46","Arguments"
"7658splitHere46","20253251splitHere46","VM arguments"
"7659splitHere46","20253251splitHere46","Preferences > Tomcat > JVM Settings > Append to JVM Paramaters<newline46mondego>"
"7660splitHere46","20253311splitHere46","JTree"
"7661splitHere46","20253311splitHere46","TreeModel"
"7662splitHere46","20253311splitHere46","JTree"
"7663splitHere46","20253311splitHere46","TreeModel"
"7664splitHere46","20253311splitHere46","TreeNodes"
"7665splitHere46","20253311splitHere46","DefaultMutableTreeNode root = new DefaultMutableTreeNode(<doubleQuotes46>Contacts<doubleQuotes46>); // root node<newline46mondego><newline46mondego>DefaultMutableTreeNode contact1 = new DefaultMutableTreeNode(<doubleQuotes46>Contact # 1<doubleQuotes46>); // level 1 node<newline46mondego>DefaultMutableTreeNode nickName1 = new DefaultMutableTreeNode(<doubleQuotes46>drocktapiff<doubleQuotes46>); // level 2 (leaf) node<newline46mondego>contact1.add(nickName1); <newline46mondego><newline46mondego>DefaultMutableTreeNode contact2 = new DefaultMutableTreeNode(<doubleQuotes46>Contact # 2<doubleQuotes46>);<newline46mondego>DefaultMutableTreeNode nickName2 = new DefaultMutableTreeNode(<doubleQuotes46>dic19<doubleQuotes46>);        <newline46mondego>contact2.add(nickName2);<newline46mondego><newline46mondego>root.add(contact1);<newline46mondego>root.add(contact2);<newline46mondego><newline46mondego>DefaultTreeModel model = new DefaultTreeModel(root);<newline46mondego>JTree tree = new JTree(model);<newline46mondego>"
"7666splitHere46","20253421splitHere46","contains"
"7667splitHere46","20253421splitHere46","add"
"7668splitHere46","20253421splitHere46","remove"
"7669splitHere46","20253421splitHere46","size"
"7670splitHere46","20253427splitHere46","foo = range(10)<newline46mondego>bar = foo<newline46mondego>baz = range(10, 0, -1)<newline46mondego>foo[0:4] = baz[0:4]<newline46mondego><newline46mondego>>>> foo<newline46mondego>[10, 9, 8, 7, 4, 5, 6, 7, 8, 9]<newline46mondego>>>> bar<newline46mondego>[10, 9, 8, 7, 4, 5, 6, 7, 8, 9]<newline46mondego>"
"7671splitHere46","20253427splitHere46","foo[0:4] = [copy.deepcopy(x) for x in baz[0:4]]<newline46mondego>"
"7672splitHere46","20253465splitHere46","int"
"7673splitHere46","20253465splitHere46","public int Intersection (Circle circle, Rectangle rectangle) {<newline46mondego><newline46mondego>... // test something<newline46mondego>... return 0;<newline46mondego>... // test another thing<newline46mondego>... return 1;<newline46mondego>... <newline46mondego>... return (xCornerDistSq + yCornerDistSq <= maxCornerDistSq) ? 2 : 3;<newline46mondego>}<newline46mondego>"
"7674splitHere46","20253465splitHere46","int"
"7675splitHere46","20253465splitHere46","public enum ReturnCode {<newline46mondego>  CODE1,<newline46mondego>  CODE2,<newline46mondego>  CODE3,<newline46mondego>  CODE4,<newline46mondego>  CODEN;<newline46mondego>}<newline46mondego>"
"7676splitHere46","20253465splitHere46","public ReturnCode Intersection (Circle circle, Rectangle rectangle) {<newline46mondego><newline46mondego>... // test something<newline46mondego>... return ReturnCode.CODE1;<newline46mondego>... // test another thing<newline46mondego>... return ReturnCode.CODE2;<newline46mondego>... <newline46mondego>... return (xCornerDistSq + yCornerDistSq <= maxCornerDistSq) ? ReturnCode.CODE3 : ReturnCode.CODE4;<newline46mondego>}<newline46mondego>"
"7677splitHere46","20253466splitHere46","<img src='...'>"
"7678splitHere46","20253466splitHere46","src"
"7679splitHere46","20253466splitHere46","file:..."
"7680splitHere46","20253466splitHere46","res:"
"7681splitHere46","20253466splitHere46","resource:"
"7682splitHere46","20253466splitHere46","classpath:"
"7683splitHere46","20253523splitHere46","DataOutputStream"
"7684splitHere46","20253523splitHere46","DataOutputStream dos = new DataOutputStream(s.getOutputStream());<newline46mondego>    long l = 2194;<newline46mondego>    String nume = <doubleQuotes46>The file name<doubleQuotes46>;<newline46mondego><newline46mondego>    dos.writeUTF(<doubleQuotes46>FILE1<doubleQuotes46>);<newline46mondego>    dos.flush();<newline46mondego>    dos.writeLong(l);<newline46mondego>    dos.flush();<newline46mondego>    dos.writeUTF(nume);<newline46mondego>    dos.flush();<newline46mondego>    System.out.println(<doubleQuotes46>SERVER: fisier trimis<doubleQuotes46> + System.lineSeparator());<newline46mondego>"
"7685splitHere46","20253523splitHere46","final DataInputStream dis = new DataInputStream(s.getInputStream());<newline46mondego>                System.out.println(<doubleQuotes46>CLIENT STARTED<doubleQuotes46>);<newline46mondego>                System.out.println(<doubleQuotes46>Operation: <doubleQuotes46> + dis.readUTF());<newline46mondego>                System.out.println(<doubleQuotes46>Length: <doubleQuotes46> + dis.readLong());<newline46mondego>                System.out.println(<doubleQuotes46>Name: <doubleQuotes46> + dis.readUTF());<newline46mondego>"
"7686splitHere46","20253523splitHere46","readLine()"
"7687splitHere46","20253548splitHere46","setSize(new Dimension(1000, 600));<newline46mondego>gameBoard = new JPanel();<newline46mondego>gameBoard.setLayout(null);<newline46mondego>gameBoard.setOpaque(false);<newline46mondego>Dimension expectedDimension = new Dimension(920, 500);<newline46mondego>gameBoard.setPreferredSize(expectedDimension);<newline46mondego>gameBoard.setMaximumSize(expectedDimension);<newline46mondego>gameBoard.setMinimumSize(expectedDimension);<newline46mondego>//add cards to gameBoard here<newline46mondego><newline46mondego>JLabel background = new JLabel( new ImageIcon( getClass().getResource(<doubleQuotes46>images/graphic.png<doubleQuotes46>) ) );<newline46mondego>background.setLocation(79,0); //manually center graphic<newline46mondego>background.setBounds(new Rectangle(0, 0, 920, 500));<newline46mondego>gameBoard.add(background);<newline46mondego><newline46mondego>Box centerBox = new Box(BoxLayout.Y_AXIS);<newline46mondego>centerBox.setOpaque(true); <newline46mondego>centerBox.setBackground(Color.WHATEVER);<newline46mondego>centerBox.add(Box.createVerticalGlue());<newline46mondego>centerBox.add(gameBoard);<newline46mondego>centerBox.add(Box.createVerticalGlue());<newline46mondego>add(centerBox);<newline46mondego>setVisible(true);<newline46mondego>"
"7688splitHere46","20253564splitHere46","for(;;)"
"7689splitHere46","20253564splitHere46","while(true)"
"7690splitHere46","20253564splitHere46","int i = 0;<newline46mondego>while (i < 10) i++;<newline46mondego>"
"7691splitHere46","20253564splitHere46","int i = 0;<newline46mondego>for ( ; i < 10; ) i++;<newline46mondego>"
"7692splitHere46","20253564splitHere46","int days = -1;<newline46mondego><newline46mondego>for ( ; days < 0 || days > 42; ) {<newline46mondego><newline46mondego>}<newline46mondego>"
"7693splitHere46","20253564splitHere46","double dAllowance;<newline46mondego>String strDAllowance;<newline46mondego><newline46mondego>for ( ; ; ) {<newline46mondego>    strDAllowance = JOptionPane.showInputDialog(/* ~~~ */);<newline46mondego><newline46mondego>    try {<newline46mondego>        dAllowance = Double.parseDouble(strDAllowance);<newline46mondego><newline46mondego>        if (dAllowance > 0) {<newline46mondego>            break;<newline46mondego><newline46mondego>        } else if (dAllowance == 0) {<newline46mondego>            System.exit(0);<newline46mondego>        }<newline46mondego>    } catch (NumberFormatException e) {}<newline46mondego><newline46mondego>    /* notify and automatically continues */<newline46mondego>}<newline46mondego>"
"7694splitHere46","20253564splitHere46","while (<newline46mondego>    ( dAllowance = Double.parseDouble(<newline46mondego>        JOptionPane.showInputDialog(<newline46mondego>            null,<newline46mondego>            <doubleQuotes46>Please enter Daily Allowance $:(>0)<doubleQuotes46>,<newline46mondego>            <doubleQuotes46>Allowance<doubleQuotes46>,<newline46mondego>            JOptionPane.INFORMATION_MESSAGE)<newline46mondego>    ) ) < 0) {<newline46mondego>        System.out.println(<doubleQuotes46>Daily Allowance shoould be >0. Please enter again.<doubleQuotes46>);<newline46mondego>}<newline46mondego><newline46mondego>if (dAllowance == 0) {<newline46mondego>    System.out.println(<newline46mondego>        <doubleQuotes46>Thank you for using Allowance Calculating Application.<doubleQuotes46>);<newline46mondego>    System.exit(0);<newline46mondego>}<newline46mondego>"
"7695splitHere46","20253564splitHere46","for (;<newline46mondego>    ( dAllowance = Double.parseDouble(<newline46mondego>        JOptionPane.showInputDialog(<newline46mondego>            null,<newline46mondego>            <doubleQuotes46>Please enter Daily Allowance $:(>0)<doubleQuotes46>,<newline46mondego>            <doubleQuotes46>Allowance<doubleQuotes46>,<newline46mondego>            JOptionPane.INFORMATION_MESSAGE)<newline46mondego>    ) ) < 0;<newline46mondego>        System.out.println(<doubleQuotes46>Daily Allowance shoould be >0. Please enter again.<doubleQuotes46>)<newline46mondego>); // <- no body necessary<newline46mondego>"
"7696splitHere46","20253582splitHere46","private static Shell    shell;<newline46mondego><newline46mondego>public static void main(final String[] args)<newline46mondego>{<newline46mondego>    Display display = new Display();<newline46mondego>    shell = new Shell(display);<newline46mondego>    shell.setText(<doubleQuotes46>StackOverflow<doubleQuotes46>);<newline46mondego>    shell.setLayout(new GridLayout(1, false));<newline46mondego><newline46mondego>    createToolbar();<newline46mondego>    createTablePart();<newline46mondego>    createMessagesPart();<newline46mondego><newline46mondego>    shell.pack();<newline46mondego>    shell.open();<newline46mondego>    shell.setSize(500, 350);<newline46mondego>    while (!shell.isDisposed())<newline46mondego>    {<newline46mondego>        if (!display.readAndDispatch())<newline46mondego>        {<newline46mondego>            display.sleep();<newline46mondego>        }<newline46mondego>    }<newline46mondego>    display.dispose();<newline46mondego>}<newline46mondego><newline46mondego>private static void createToolbar()<newline46mondego>{<newline46mondego>    ToolBar toolbar = new ToolBar(shell, SWT.FLAT | SWT.BORDER | SWT.HORIZONTAL | SWT.RIGHT);<newline46mondego>    toolbar.setLayoutData(new GridData(SWT.FILL, SWT.BEGINNING, true, false));<newline46mondego><newline46mondego>    String[] labels = new String[] { <doubleQuotes46>A<doubleQuotes46>, <doubleQuotes46>B<doubleQuotes46>, <doubleQuotes46>C<doubleQuotes46> };<newline46mondego>    for (int i = 0; i < 3; i++)<newline46mondego>    {<newline46mondego>        ToolItem item = new ToolItem(toolbar, SWT.PUSH);<newline46mondego>        item.setText(labels[i]);<newline46mondego>    }<newline46mondego>    toolbar.pack();<newline46mondego>}<newline46mondego><newline46mondego>private static void createTablePart()<newline46mondego>{<newline46mondego>    Table table = new Table(shell, SWT.BORDER);<newline46mondego>    table.setHeaderVisible(true);<newline46mondego>    table.setLayoutData(new GridData(SWT.FILL, SWT.FILL, true, true));<newline46mondego><newline46mondego>    for(int col = 0; col < 3; col++)<newline46mondego>    {<newline46mondego>        TableColumn column = new TableColumn(table, SWT.NONE);<newline46mondego>        column.setText(<doubleQuotes46>Col <doubleQuotes46> + col);<newline46mondego>    }<newline46mondego><newline46mondego>    for(int row = 0; row < 10; row++)<newline46mondego>    {<newline46mondego>        TableItem item = new TableItem(table, SWT.NONE);<newline46mondego>        item.setText(0, row + <doubleQuotes46> <doubleQuotes46> + 0);<newline46mondego>        item.setText(1, row + <doubleQuotes46> <doubleQuotes46> + 1);<newline46mondego>        item.setText(2, row + <doubleQuotes46> <doubleQuotes46> + 2);<newline46mondego>    }<newline46mondego><newline46mondego>    for(TableColumn col : table.getColumns())<newline46mondego>        col.pack();<newline46mondego>}<newline46mondego><newline46mondego>private static void createMessagesPart()<newline46mondego>{<newline46mondego>    Text text = new Text(shell, SWT.BORDER | SWT.MULTI | SWT.V_SCROLL | SWT.WRAP);<newline46mondego>    GridData data = new GridData(SWT.FILL, SWT.END, true, false);<newline46mondego>    data.heightHint = 50;<newline46mondego>    text.setLayoutData(data);<newline46mondego><newline46mondego>    text.setText(<doubleQuotes46>First Message\nSecond Message\nThirdMessage\nFourth Message<doubleQuotes46>);<newline46mondego>}<newline46mondego>"
"7697splitHere46","20253582splitHere46","SashForm"
"7698splitHere46","20253582splitHere46","public static void main(final String[] args)<newline46mondego>{<newline46mondego>    Display display = new Display();<newline46mondego>    shell = new Shell(display);<newline46mondego>    shell.setText(<doubleQuotes46>StackOverflow<doubleQuotes46>);<newline46mondego>    shell.setLayout(new GridLayout(1, false));<newline46mondego><newline46mondego>    createToolbar();<newline46mondego><newline46mondego>    SashForm form = new SashForm(shell, SWT.VERTICAL);<newline46mondego>    form.setLayoutData(new GridData(SWT.FILL, SWT.FILL, true, true));<newline46mondego>    createTablePart(form);<newline46mondego>    createMessagesPart(form);<newline46mondego>    form.setWeights(new int[] { 3, 1 });<newline46mondego><newline46mondego>    shell.pack();<newline46mondego>    shell.open();<newline46mondego>    shell.setSize(500, 350);<newline46mondego>    while (!shell.isDisposed())<newline46mondego>    {<newline46mondego>        if (!display.readAndDispatch())<newline46mondego>        {<newline46mondego>            display.sleep();<newline46mondego>        }<newline46mondego>    }<newline46mondego>    display.dispose();<newline46mondego>}<newline46mondego><newline46mondego>private static void createToolbar()<newline46mondego>{<newline46mondego>    ToolBar toolbar = new ToolBar(shell, SWT.FLAT | SWT.BORDER | SWT.HORIZONTAL | SWT.RIGHT);<newline46mondego>    toolbar.setLayoutData(new GridData(SWT.FILL, SWT.BEGINNING, true, false));<newline46mondego><newline46mondego>    String[] labels = new String[] { <doubleQuotes46>A<doubleQuotes46>, <doubleQuotes46>B<doubleQuotes46>, <doubleQuotes46>C<doubleQuotes46> };<newline46mondego>    for (int i = 0; i < 3; i++)<newline46mondego>    {<newline46mondego>        ToolItem item = new ToolItem(toolbar, SWT.PUSH);<newline46mondego>        item.setText(labels[i]);<newline46mondego>    }<newline46mondego>    toolbar.pack();<newline46mondego>}<newline46mondego><newline46mondego>private static void createTablePart(SashForm parent)<newline46mondego>{<newline46mondego>    Table table = new Table(parent, SWT.BORDER);<newline46mondego>    table.setHeaderVisible(true);<newline46mondego>    table.setLayoutData(new GridData(SWT.FILL, SWT.FILL, true, true));<newline46mondego><newline46mondego>    for (int col = 0; col < 3; col++)<newline46mondego>    {<newline46mondego>        TableColumn column = new TableColumn(table, SWT.NONE);<newline46mondego>        column.setText(<doubleQuotes46>Col <doubleQuotes46> + col);<newline46mondego>    }<newline46mondego><newline46mondego>    for (int row = 0; row < 10; row++)<newline46mondego>    {<newline46mondego>        TableItem item = new TableItem(table, SWT.NONE);<newline46mondego>        item.setText(0, row + <doubleQuotes46> <doubleQuotes46> + 0);<newline46mondego>        item.setText(1, row + <doubleQuotes46> <doubleQuotes46> + 1);<newline46mondego>        item.setText(2, row + <doubleQuotes46> <doubleQuotes46> + 2);<newline46mondego>    }<newline46mondego><newline46mondego>    for (TableColumn col : table.getColumns())<newline46mondego>        col.pack();<newline46mondego>}<newline46mondego><newline46mondego>private static void createMessagesPart(SashForm parent)<newline46mondego>{<newline46mondego>    Text text = new Text(parent, SWT.BORDER | SWT.MULTI | SWT.V_SCROLL | SWT.WRAP);<newline46mondego>    GridData data = new GridData(SWT.FILL, SWT.END, true, false);<newline46mondego>    data.heightHint = 50;<newline46mondego>    text.setLayoutData(data);<newline46mondego><newline46mondego>    text.setText(<doubleQuotes46>First Message\nSecond Message\nThirdMessage\nFourth Message<doubleQuotes46>);<newline46mondego>}<newline46mondego>"
"7699splitHere46","20253659splitHere46","Scanner"
"7700splitHere46","20253659splitHere46","System.in"
"7701splitHere46","20253659splitHere46","Scanner"
"7702splitHere46","20253659splitHere46","Scanner"
"7703splitHere46","20253659splitHere46","System.in"
"7704splitHere46","20253659splitHere46","Scanner"
"7705splitHere46","20253659splitHere46","Scanner"
"7706splitHere46","20253717splitHere46","public int sumOfArray(int[] a, int n) {<newline46mondego>    if (n == 0)<newline46mondego>        return a[n];<newline46mondego>    else<newline46mondego>        return a[n] + sumOfArray(a, n-1);<newline46mondego>}<newline46mondego>"
"7707splitHere46","20253717splitHere46","int[] a = { 1, 2, 3, 4, 5 };<newline46mondego>int sum = sumOfArray(a, a.length-1);<newline46mondego>"
"7708splitHere46","20253794splitHere46","System.out.printf(<doubleQuotes46>%15s%15s%15s%15s<doubleQuotes46>, <doubleQuotes46>header 1<doubleQuotes46>, <doubleQuotes46>header 2<doubleQuotes46>, ...);<newline46mondego>"
"7709splitHere46","20253988splitHere46","Locale"
"7710splitHere46","20253988splitHere46","Locale"
"7711splitHere46","20253988splitHere46","SimpleDateFormat(String pattern)<newline46mondego>"
"7712splitHere46","20253988splitHere46","SimpleDateFormat"
"7713splitHere46","20253988splitHere46","DateFormat formatter1 = new SimpleDateFormat(<doubleQuotes46>E, MMM d<doubleQuotes46>, Locale.US);<newline46mondego>"
"7714splitHere46","20254042splitHere46","testReadVariable()"
"7715splitHere46","20254042splitHere46","0"
"7716splitHere46","20254042splitHere46","0"
"7717splitHere46","20254069splitHere46","buildHairColorPanel();<newline46mondego>window.add(colorPanel);<newline46mondego>window.add(scrollPane);<newline46mondego>buildLengthPanel();<newline46mondego>window.add(lengthPanel);<newline46mondego>"
"7718splitHere46","20254069splitHere46","buildHairPanel();<newline46mondego>window.add(hairPanel);<newline46mondego>"
"7719splitHere46","20254069splitHere46","ListListener"
"7720splitHere46","20254069splitHere46","JScrollPane"
"7721splitHere46","20254069splitHere46","colorScrollPane = new JScrollPane(colorList);<newline46mondego>lengthScrollPane = new JScrollPane(lengthList);<newline46mondego>colorList.addListSelectionListener(//Look Below...<newline46mondego>lengthList.addListSelectionListener(//Look Below...<newline46mondego>"
"7722splitHere46","20254069splitHere46","hairPanel.add(colorScrollPane);<newline46mondego>"
"7723splitHere46","20254069splitHere46","hairPanel.add(colorList);"
"7724splitHere46","20254069splitHere46","static JList lengthList;<newline46mondego>    static JList colorList;<newline46mondego>    static JScrollPane lengthScrollPane;<newline46mondego>    static JScrollPane colorScrollPane;<newline46mondego>    static JPanel hairPanel = new JPanel();<newline46mondego>    static JLabel selectedColor = new JLabel();<newline46mondego>    static JLabel selectedLength = new JLabel();<newline46mondego><newline46mondego>    public static void main(String[] args) {<newline46mondego>        JFrame window = new JFrame();<newline46mondego>        //Hair Options for both size and color displayed in a window<newline46mondego>        window.setSize(400,400);<newline46mondego>        window.setDefaultCloseOperation(window.EXIT_ON_CLOSE);<newline46mondego>        window.setTitle(<doubleQuotes46>Hair Options<doubleQuotes46>);<newline46mondego>        window.setLayout(new BorderLayout());<newline46mondego>        window.setAlwaysOnTop(true);<newline46mondego><newline46mondego>        buildHairPanel();<newline46mondego>        window.add(hairPanel);<newline46mondego><newline46mondego>        window.setVisible(true);<newline46mondego>    }<newline46mondego><newline46mondego><newline46mondego>    private static void buildHairPanel()<newline46mondego>    {<newline46mondego>        //Build Hair Color Selection<newline46mondego>        String[] hairColors = new String[] { <doubleQuotes46>brown<doubleQuotes46>, <doubleQuotes46>blonde<doubleQuotes46>, <doubleQuotes46>black<doubleQuotes46>, <doubleQuotes46>red<doubleQuotes46>, <doubleQuotes46>green<doubleQuotes46>, <doubleQuotes46>blue<doubleQuotes46> };<newline46mondego>        colorList = new JList(hairColors);<newline46mondego>        colorList.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);<newline46mondego><newline46mondego>        colorList.addListSelectionListener(new ListSelectionListener() {<newline46mondego>            public void valueChanged(ListSelectionEvent e)<newline46mondego>            {<newline46mondego>                String selection = (String) optionsSelect.colorList.getSelectedValue();<newline46mondego>                optionsSelect.selectedColor.setText(selection);<newline46mondego>            }<newline46mondego>        });<newline46mondego><newline46mondego>        colorList.setVisibleRowCount(3);<newline46mondego>        colorScrollPane = new JScrollPane(colorList);<newline46mondego>        hairPanel.add(colorScrollPane);<newline46mondego><newline46mondego>        //Build Hair Length Selection<newline46mondego>        String[] hairLengths = new String[] { <doubleQuotes46>short1<doubleQuotes46>, <doubleQuotes46>short2<doubleQuotes46>, <doubleQuotes46>medium1<doubleQuotes46>, <doubleQuotes46>medium2<doubleQuotes46>, <doubleQuotes46>long1<doubleQuotes46>, <doubleQuotes46>long2<doubleQuotes46> };<newline46mondego>        lengthList = new JList(hairLengths);<newline46mondego>        lengthList.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);<newline46mondego><newline46mondego>        lengthList.addListSelectionListener(new ListSelectionListener(){<newline46mondego>            public void valueChanged(ListSelectionEvent e)<newline46mondego>            {<newline46mondego>                String selection = (String) optionsSelect.lengthList.getSelectedValue();<newline46mondego>                optionsSelect.selectedLength.setText(selection);<newline46mondego>            }<newline46mondego>        });<newline46mondego><newline46mondego>        lengthList.setVisibleRowCount(3);<newline46mondego>        lengthScrollPane = new JScrollPane(lengthList);<newline46mondego>        hairPanel.add(lengthScrollPane);<newline46mondego>    }<newline46mondego>"
"7725splitHere46","20254080splitHere46","Title"
"7726splitHere46","20254080splitHere46","Title = new String[numRows];<newline46mondego>"
"7727splitHere46","20254080splitHere46","SELECT count(*) ..."
"7728splitHere46","20254080splitHere46","ArrayList"
"7729splitHere46","20254080splitHere46","public class YourClass<newline46mondego>{<newline46mondego>  private static final int MAX_ID = 8; // or however you want to set the size<newline46mondego>  private String[] title; // [] after the type is easier to read, lower case variables<newline46mondego>  private Connection conn; // I'm assuming the class will be provided a DB connection<newline46mondego>  // Note the Statement and ResultSet objects are not defined in the class, to<newline46mondego>  // minimize their scope.<newline46mondego><newline46mondego>  public void queryInfo() // name suggests a query (potentially expensive) will be run<newline46mondego>  {<newline46mondego>    title = new String[MAX_ID]; // **initialize title**<newline46mondego>    // We use a try-with-resources block to ensure the statement is safely closed<newline46mondego>    // even better would be to use a PreparedStatement here<newline46mondego>    try(Statement st = conn.statement())<newline46mondego>    {<newline46mondego>      // You're executing 8 separate queries here, where one will do<newline46mondego>      String query = <doubleQuotes46>SELECT * FROM students WHERE ID >= 1 AND ID <= <doubleQuotes46>+MAX_ID;<newline46mondego>      // Again, we need to close the result set when we're done<newline46mondego>      try(ResultSet rs = st.executeQuery(query))<newline46mondego>      {<newline46mondego>        int i = 0;<newline46mondego>        while (rs.next())<newline46mondego>        {   <newline46mondego>          title[i++] = rs.getString(<doubleQuotes46>StudentName<doubleQuotes46>);<newline46mondego>        }<newline46mondego>      } // close our ResultSet<newline46mondego>    } // close our Statement<newline46mondego>  }<newline46mondego><newline46mondego>  // provide a separate getter method, rather than making the array public<newline46mondego>  public String[] getTitles()<newline46mondego>  {<newline46mondego>    return title;<newline46mondego>  }<newline46mondego>}<newline46mondego>"
"7730splitHere46","20254080splitHere46","queryInfo()"
"7731splitHere46","20254095splitHere46","GoogleAccountCredential credential"
"7732splitHere46","20254095splitHere46","HttpRequestInitializer noCredential"
"7733splitHere46","20254095splitHere46","credential = null;"
"7734splitHere46","20254151splitHere46","JScrollPane"
"7735splitHere46","20254151splitHere46","JViewport"
"7736splitHere46","20254151splitHere46","getPreferredSize"
"7737splitHere46","20254151splitHere46","public class Mappa extends JPanel {"
"7738splitHere46","20254151splitHere46","public class Mappa extends JPanel {<newline46mondego>    //...<newline46mondego>    public Dimension getPreferredSize() {<newline46mondego>        return immagine == null ? new Dimension(200, 200) : new Dimension(immagine.getWidth(), immagine.getHeight());<newline46mondego>    }<newline46mondego>    //...<newline46mondego>}<newline46mondego>"
"7739splitHere46","20254151splitHere46","JViewport"
"7740splitHere46","20254151splitHere46","g.clearRect(0, 0, 4000, 4000);<newline46mondego>"
"7741splitHere46","20254151splitHere46","g.clearRect(0, 0, getWidth(), getHeight());<newline46mondego>"
"7742splitHere46","20254151splitHere46","super.paintComponent(g);<newline46mondego>"
"7743splitHere46","20254151splitHere46","clearRect"
"7744splitHere46","20254151splitHere46","Scrollable"
"7745splitHere46","20254219splitHere46","GUI"
"7746splitHere46","20254219splitHere46","initComponents()"
"7747splitHere46","20254219splitHere46","paintComponent(...)"
"7748splitHere46","20254219splitHere46","method panelCanvas = new javax.swing.JPanel() {...}"
"7749splitHere46","20254219splitHere46","JPanel"
"7750splitHere46","20254219splitHere46","panelCanvas = new javax.swing.JPanel();"
"7751splitHere46","20254308splitHere46","MapPolygonImpl"
"7752splitHere46","20254308splitHere46","JMapViewer"
"7753splitHere46","20254308splitHere46","import java.awt.Graphics;<newline46mondego>import java.awt.Graphics2D;<newline46mondego>import java.awt.Point;<newline46mondego>import java.awt.geom.Path2D;<newline46mondego>import java.util.ArrayList;<newline46mondego>import java.util.List;<newline46mondego><newline46mondego>import javax.swing.JFrame;<newline46mondego>import javax.swing.SwingUtilities;<newline46mondego>import org.openstreetmap.gui.jmapviewer.Coordinate;<newline46mondego>import org.openstreetmap.gui.jmapviewer.JMapViewer;<newline46mondego>import org.openstreetmap.gui.jmapviewer.MapPolygonImpl;<newline46mondego>import org.openstreetmap.gui.jmapviewer.interfaces.ICoordinate;<newline46mondego><newline46mondego>public class TestMap {<newline46mondego><newline46mondego>    public static class MapPolyLine extends MapPolygonImpl {<newline46mondego>        public MapPolyLine(List<? extends ICoordinate> points) {<newline46mondego>            super(null, null, points);<newline46mondego>        }<newline46mondego><newline46mondego>        @Override<newline46mondego>        public void paint(Graphics g, List<Point> points) {<newline46mondego>            Graphics2D g2d = (Graphics2D) g.create();<newline46mondego>            g2d.setColor(getColor());<newline46mondego>            g2d.setStroke(getStroke());<newline46mondego>            Path2D path = buildPath(points);<newline46mondego>            g2d.draw(path);<newline46mondego>            g2d.dispose();<newline46mondego>        }<newline46mondego><newline46mondego>        private Path2D buildPath(List<Point> points) {<newline46mondego>            Path2D path = new Path2D.Double();<newline46mondego>            if (points != null && points.size() > 0) {<newline46mondego>                Point firstPoint = points.get(0);<newline46mondego>                path.moveTo(firstPoint.getX(), firstPoint.getY());<newline46mondego>                for (Point p : points) {<newline46mondego>                    path.lineTo(p.getX(), p.getY());    <newline46mondego>                }<newline46mondego>            } <newline46mondego>            return path;<newline46mondego>        }<newline46mondego>    }<newline46mondego><newline46mondego>    private static void createAndShowUI() {<newline46mondego>        JFrame frame = new JFrame(<doubleQuotes46>Demo<doubleQuotes46>);<newline46mondego>        JMapViewer viewer = new JMapViewer();<newline46mondego><newline46mondego>        List<Coordinate> coordinates = new ArrayList<Coordinate>();<newline46mondego>        coordinates.add(new Coordinate(50, 10));<newline46mondego>        coordinates.add(new Coordinate(52, 15));<newline46mondego>        coordinates.add(new Coordinate(55, 15));<newline46mondego><newline46mondego>        MapPolyLine polyLine = new MapPolyLine(coordinates);<newline46mondego>        viewer.addMapPolygon(polyLine);<newline46mondego><newline46mondego>        frame.add(viewer);<newline46mondego>        frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);<newline46mondego>        frame.setLocationByPlatform(true);<newline46mondego>        frame.pack();<newline46mondego>        frame.setVisible(true);<newline46mondego>    }<newline46mondego><newline46mondego>    public static void main(String[] args) {<newline46mondego>        SwingUtilities.invokeLater(new Runnable() {<newline46mondego>            public void run() {<newline46mondego>                createAndShowUI();<newline46mondego>            }<newline46mondego>        });<newline46mondego>    }<newline46mondego>}<newline46mondego>"
"7754splitHere46","20254330splitHere46","Drawable drawable = Drawable.createFromPath(file);<newline46mondego> image.setImageDrawable(drawable);<newline46mondego>"
"7755splitHere46","20254330splitHere46","ImageView image = (ImageView)findViewById(R.id.imageView);<newline46mondego>"
"7756splitHere46","20254439splitHere46","f"
"7757splitHere46","20254439splitHere46","%20.5f"
"7758splitHere46","20254439splitHere46","%xs"
"7759splitHere46","20254439splitHere46","%xd"
"7760splitHere46","20254439splitHere46","x"
"7761splitHere46","20254497splitHere46","Activity"
"7762splitHere46","20254497splitHere46","Activity"
"7763splitHere46","20254497splitHere46","Activity"
"7764splitHere46","20254497splitHere46","Activity"
"7765splitHere46","20254497splitHere46","Activity"
"7766splitHere46","20254616splitHere46","while (true)"
"7767splitHere46","20254646splitHere46","IllegalArgumentException"
"7768splitHere46","20254646splitHere46","getResource()"
"7769splitHere46","20254646splitHere46","ImageIO.read(...)"
"7770splitHere46","20254646splitHere46","try{<newline46mondego>  URL imgUrl = getClass().getResource(IMAGE_PATH); // path should be a constant <newline46mondego>                                          // or variable, not a String literal<newline46mondego>  if (imgUrl == null) {<newline46mondego>    // show error and get the heck out of here<newline46mondego>  } else {<newline46mondego>    image = ImageIO.read(imgUrl);<newline46mondego>  }<newline46mondego>} catch (IOException ex){<newline46mondego>  JOptionPane.showMessageDialog(null, <doubleQuotes46><html>Error<newline46mondego>Missing images</html><doubleQuotes46> ,<newline46mondego>       <doubleQuotes46>Error<doubleQuotes46>,JOptionPane.ERROR_MESSAGE);<newline46mondego>  System.exit(1);<newline46mondego>}<newline46mondego>"
"7771splitHere46","20254886splitHere46","nums[i] = Integer.parseInt(numstrs[i]);"
"7772splitHere46","20254896splitHere46","glBlendFunc(GL_ONE, GL_ONE_MINUS_SRC_ALPHA);"
"7773splitHere46","20254896splitHere46","(1.0 * alpha, 0.0, 0.0, alpha)"
"7774splitHere46","20254896splitHere46","finalColor = srcColor + (1 - srcAlpha) * dstColor;<newline46mondego>"
"7775splitHere46","20254896splitHere46","finalColor = (1.0, 0.0, 0.0) + (1 - 0.5) * (0.0, 0.0, 0.0)<newline46mondego>           = (1.0, 0.0, 0.0)<newline46mondego>"
"7776splitHere46","20254896splitHere46","glBlendFunc(GL_SRC_ALPHA, GL_ONE_MINUS_SRC_ALPHA);"
"7777splitHere46","20254896splitHere46","finalColor = srcAlpha * srcColor + (1 - srcAlpha) * dstColor;<newline46mondego>"
"7778splitHere46","20254896splitHere46","finalColor = 0.5 * (1.0, 0.0, 0.0) + (1.0 - 0.5) * (0.0, 0.0, 0.0)<newline46mondego>           = (0.5, 0.0, 0.0)<newline46mondego>"
"7779splitHere46","20255035splitHere46","for (int i = index; i < array.length -1; i++) {<newline46mondego>    array[i] = array[i+1];<newline46mondego>}<newline46mondego>array[array.length - 1] = null;<newline46mondego>"
"7780splitHere46","20255055splitHere46","javax/swing/JLabel.java<newline46mondego>javax.swing/JButton.java<newline46mondego>"
"7781splitHere46","20255170splitHere46","jTextField3.toString()"
"7782splitHere46","20255170splitHere46","jTextField3.getText()"
"7783splitHere46","20255170splitHere46","toString()"
"7784splitHere46","20255170splitHere46","<doubleQuotes46>javax.swing.JTextField[,62,11,302x28,layout=javax.swing.plaf.basic.BasicTextUI$UpdateHandler,alignmentX=0.0,alignmentY=0.0,border=javax.swing.plaf.synth.SynthBorder@9577f8b,flags=288,maximumSize=,minimumSize=,preferredSize=,caretColor=,disabledTextColor=DerivedColor(color=142,143,145 parent=nimbusDisabledText offsets=0.0,0.0,0.0,0 pColor=142,143,145,editable=true,margin=javax.swing.plaf.InsetsUIResource[top=0,left=0,bottom=0,right=0],selectedTextColor=DerivedColor(color=255,255,255 parent=nimbusSelectedText offsets=0.0,0.0,0.0,0 pColor=255,255,255,selectionColor=DerivedColor(color=57,105,138 parent=nimbusSelectionBackground offsets=0.0,0.0,0.0,0 pColor=57,105,138,columns=0,columnWidth=0,command=,horizontalAlignment=LEADING]<doubleQuotes46><newline46mondego>"
"7785splitHere46","20255190splitHere46","$XDG_DATA_HOME/Trash"
"7786splitHere46","20255190splitHere46","$HOME/.local/share"
"7787splitHere46","20255190splitHere46","files"
"7788splitHere46","20255190splitHere46","info"
"7789splitHere46","20255190splitHere46","files/"
"7790splitHere46","20255190splitHere46",".trashinfo"
"7791splitHere46","20255190splitHere46","files/"
"7792splitHere46","20255190splitHere46","foo"
"7793splitHere46","20255190splitHere46","files/"
"7794splitHere46","20255190splitHere46","foo.trashinfo"
"7795splitHere46","20255190splitHere46","info/"
"7796splitHere46","20255190splitHere46",".trashinfo"
"7797splitHere46","20255190splitHere46","[Trash Info]<newline46mondego>Path=<original path to file e.g. foo/bar/baz.txt><newline46mondego>DeletionDate=<Date file was deleted in RFC3339 format (YYYYMMDDTHH:MM:SS)><newline46mondego>"
"7798splitHere46","20255190splitHere46","kfmclient move <file> trash:/<newline46mondego>"
"7799splitHere46","20255410splitHere46","showMessageDialog"
"7800splitHere46","20255410splitHere46","showMessageDialog"
"7801splitHere46","20255410splitHere46","SwingWorker"
"7802splitHere46","20255410splitHere46","invokeLater"
"7803splitHere46","20255457splitHere46","temp.indexOf(';')"
"7804splitHere46","20255457splitHere46","temp.charAt(';')"
"7805splitHere46","20255457splitHere46","temp.indexOf('=')"
"7806splitHere46","20255457splitHere46","temp.charAt('=')"
"7807splitHere46","20255457splitHere46","indexOf"
"7808splitHere46","20255457splitHere46","charAt"
"7809splitHere46","20255457splitHere46","charAt"
"7810splitHere46","20255457splitHere46","indexOf"
"7811splitHere46","20255495splitHere46","add(obj)"
"7812splitHere46","20255495splitHere46","ArrayList<Double> shoppingCart = new ArrayList<Double>(); <newline46mondego>double shoppingCartItem; <newline46mondego>shoppingCartItem = numberReader.nextDouble(); <newline46mondego>shoppingCart.add(shoppingCartItem); <newline46mondego>for (int counter = 0; counter <shoppingCart.size(); counter++) {<newline46mondego>    System.out.print(<doubleQuotes46>Item<doubleQuotes46>); <newline46mondego>}<newline46mondego>"
"7813splitHere46","20255495splitHere46","get()"
"7814splitHere46","20255532splitHere46","holiday"
"7815splitHere46","20255532splitHere46","holiday.setOpaque(false);<newline46mondego>"
"7816splitHere46","20255532splitHere46","JLabel label = new JLabel(new ImageIcon(<doubleQuotes46>C:\\Users\\Brian\\Desktop\\Eclipse Projects\\BrianBolnickFinal\\bin\\christmas.jpeg<doubleQuotes46>)));<newline46mondego>label.setLayout(new BorderLayout());<newline46mondego>label.add(holiday);<newline46mondego>"
"7817splitHere46","20255628splitHere46","public static void quickSort(int[] arr, int highE, int lowE)<newline46mondego>{<newline46mondego>    while (true)<newline46mondego>    {<newline46mondego>        if (lowE + 29 < highE)<newline46mondego>        {<newline46mondego>            ...<newline46mondego>            quickSort(arr, storeE - 1, lowE);<newline46mondego><newline46mondego>            // not doing this any more<newline46mondego>            //quickSort(arr, highE, storeE + 1);<newline46mondego><newline46mondego>            // instead, simply set the parameters to their new values<newline46mondego>            // highE = highE;<newline46mondego>            lowE = storeE + 1;<newline46mondego>        }<newline46mondego>        else<newline46mondego>        {<newline46mondego>            insertSort(arr, highE, lowE);<newline46mondego>            return;<newline46mondego>        }<newline46mondego>    }<newline46mondego>}<newline46mondego>"
"7818splitHere46","20255628splitHere46","public static void quickSort(int[] arr, int highE, int lowE)<newline46mondego>{<newline46mondego>    while (lowE + 29 < highE)<newline46mondego>    {<newline46mondego>        ...<newline46mondego>        quickSort(arr, storeE - 1, lowE);<newline46mondego>        lowE = storeE + 1;<newline46mondego>    }<newline46mondego>    insertSort(arr, highE, lowE);<newline46mondego>}<newline46mondego>"
"7819splitHere46","20255628splitHere46","quickSort(arr, 100, 0)<newline46mondego>   quickSort(arr, 49, 0)<newline46mondego>      quickSort(arr, 24, 0)<newline46mondego>         insertion sort<newline46mondego>      quickSort(arr, 49, 26)<newline46mondego>         insertion sort<newline46mondego>   quickSort(arr, 100, 51)<newline46mondego>      quickSort(arr, 76, 0)<newline46mondego>         insertion sort<newline46mondego>      quickSort(arr, 100, 74)<newline46mondego>         insertion sort<newline46mondego>"
"7820splitHere46","20255628splitHere46","quickSort(arr, 100, 0)<newline46mondego>   quickSort(arr, 49, 0)<newline46mondego>      quickSort(arr, 24, 0)<newline46mondego>         break out of the while loop<newline46mondego>         insertion sort<newline46mondego>   lowE = 26<newline46mondego>   break out of the while loop<newline46mondego>      insertion sort<newline46mondego>lowE = 51<newline46mondego>run another iteration of the while-loop<newline46mondego>    quickSort(arr, 76, 0)<newline46mondego>      break out of the while loop<newline46mondego>      insertion sort<newline46mondego>lowE = 74<newline46mondego>break out of the while loop<newline46mondego>   insertion sort<newline46mondego>"
"7821splitHere46","20255628splitHere46","-Xss"
"7822splitHere46","20255707splitHere46","public void remove(Student a)<newline46mondego>{<newline46mondego>    students.remove(a);<newline46mondego>}<newline46mondego>"
"7823splitHere46","20255707splitHere46","students"
"7824splitHere46","20255707splitHere46","remove(a)"
"7825splitHere46","20255707splitHere46","public void actionPerformed (ActionEvent event)<newline46mondego> {<newline46mondego>       if(!firstSchoolOfJava.equals(idField.getText()))<newline46mondego>       {<newline46mondego>           // input should first be parsed to an int (id type is an int)<newline46mondego>           int id = Integer.parseInt(idField.getText());<newline46mondego>           Student s;<newline46mondego>           for (int i = 0; i < firstChoolOfJava.getStudents().size(); i++){<newline46mondego>               // check to see if the ids match. If they do, remove that student<newline46mondego>               if ((firstChoolOfJava.getStudents().get(i).getID()) == id) {<newline46mondego>                   s = firstChoolOfJava.getStudents().get(i);<newline46mondego>                   firstSchoolOfJava.remove(s);  // you're removing this student<newline46mondego>                   break;<newline46mondego>               }                   <newline46mondego>           }<newline46mondego>       }<newline46mondego>       System.out.println(firstSchoolOfJava.toString());<newline46mondego> }<newline46mondego>"
"7826splitHere46","20255707splitHere46","getStudents"
"7827splitHere46","20255707splitHere46","School"
"7828splitHere46","20255707splitHere46","public ArrayList<Student> getStudents(){<newline46mondego>    return students;<newline46mondego>}<newline46mondego>"
"7829splitHere46","20255707splitHere46","public void actionPerformed (ActionEvent event)<newline46mondego>{<newline46mondego>    String name = nameField.getText();<newline46mondego>    String major = majorField.getText();<newline46mondego>    double gpa = Double.parseDouble(gpaField.gtText());<newline46mondego>    int id = Integer.parseInt(idField.getText());<newline46mondego><newline46mondego>    Student s = new Student(id, name, major, gpa); // or whatever your constructor looks like.<newline46mondego>    Student s1;<newline46mondego>    for (int i = 0; i < firstSchoolOfJava.getStudents().size(); i++){<newline46mondego>        s1 = firstSchoolOfJava.getStudents().get(i);<newline46mondego>        if (s1.getId() == id){<newline46mondego>            firstSchoolOfJava.getStudents().set(i, s);<newline46mondego>            break;<newline46mondego>        }<newline46mondego>    }   <newline46mondego>} <newline46mondego>"
"7830splitHere46","20255728splitHere46","pos.maxlen"
"7831splitHere46","20255794splitHere46","import java.util.*;<newline46mondego><newline46mondego>Random generator = new Random();<newline46mondego>for(int i = 0; i < 10; i++) {<newline46mondego>    int random = generator.nextInt(24) + 8;<newline46mondego>    System.out.println(Math.pow(2, random));<newline46mondego>}<newline46mondego>"
"7832splitHere46","20255821splitHere46","@Override<newline46mondego>public void actionPerformed(ActionEvent e) {<newline46mondego>    if (clip != null) {<newline46mondego>        if (clip.isActive()) clip.stop();<newline46mondego>        if (clip.isOpen()) clip.close();<newline46mondego>    }<newline46mondego>"
"7833splitHere46","20255858splitHere46","public static void main(String[] args) {<newline46mondego><newline46mondego>    final int numOfTrials = 100000;<newline46mondego><newline46mondego>    long first = 0;<newline46mondego>    for (int index = 0; index < numOfTrials; index++) {<newline46mondego>        long start = System.nanoTime();<newline46mondego>        final String string1 = <doubleQuotes46>somestring1<doubleQuotes46>;<newline46mondego>        for (int i = 0; i < 30; i++) {<newline46mondego>            final String string2 = <doubleQuotes46>somestring2<doubleQuotes46>;<newline46mondego>            if (string2.equals(string1)) { // Using variable<newline46mondego>                // do stuff<newline46mondego>            }<newline46mondego>        }<newline46mondego>        first+= (System.nanoTime()-start);<newline46mondego>    }<newline46mondego><newline46mondego>    long second = 0;<newline46mondego>    for (int index = 0; index < numOfTrials; index++) {<newline46mondego>        long start = System.nanoTime();<newline46mondego>        for (int i = 0; i < 30; i++) {<newline46mondego>            final String string2 = <doubleQuotes46>somestring2<doubleQuotes46>;<newline46mondego>            if (string2.equals(<doubleQuotes46>somestring1<doubleQuotes46>)) { // Not using variable<newline46mondego>                // do stuff<newline46mondego>            }<newline46mondego>        }<newline46mondego>        second+= (System.nanoTime()-start);<newline46mondego>    }<newline46mondego><newline46mondego><newline46mondego>    System.out.println(<doubleQuotes46>First : <doubleQuotes46>+(first/numOfTrials)+<doubleQuotes46>ns<doubleQuotes46>);<newline46mondego>    System.out.println(<doubleQuotes46>Second : <doubleQuotes46>+second/numOfTrials+<doubleQuotes46>ns<doubleQuotes46>);<newline46mondego>}<newline46mondego>"
"7834splitHere46","20255858splitHere46","First : 139ns<newline46mondego>Second : 59ns<newline46mondego>"
"7835splitHere46","20255858splitHere46","First : 42ns<newline46mondego>Second : 34ns<newline46mondego>"
"7836splitHere46","20255858splitHere46","First : 31ns<newline46mondego>Second : 31ns<newline46mondego>"
"7837splitHere46","20255946splitHere46","// With Casting<newline46mondego>List list = new ArrayList();<newline46mondego>list.add(<doubleQuotes46>hello<doubleQuotes46>);<newline46mondego>String s = (String) list.get(0);<newline46mondego><newline46mondego>// With Generics (Casting not required)<newline46mondego>List<String> list = new ArrayList<String>();<newline46mondego>list.add(<doubleQuotes46>hello<doubleQuotes46>);<newline46mondego>String s = list.get(0);   // no cast<newline46mondego>"
"7838splitHere46","20255958splitHere46","this"
"7839splitHere46","20256270splitHere46","Calendar calendar = new GregorianCalendar();<newline46mondego>TimeZone timeZone = TimeZone.getTimeZone(<doubleQuotes46>Australia/Sydney<doubleQuotes46>);<newline46mondego>calendar.setTimeZone(timeZone);<newline46mondego><newline46mondego>Date currentTime = calendar.getTime();<newline46mondego>"
"7840splitHere46","20256309splitHere46","out.print(<doubleQuotes46><a href='/foldername/login.jsp'>Click here to go to login page</a><doubleQuotes46>);<newline46mondego>"
"7841splitHere46","20256339splitHere46","if( placesList != null && placesList.size() >= 2)<newline46mondego>"
"7842splitHere46","20256348splitHere46","BufferedImage"
"7843splitHere46","20256348splitHere46","public BufferedImage rotateImage(BufferedImage image, double degreesAngle) {    <newline46mondego>    int w = image.getWidth();    <newline46mondego>    int h = image.getHeight();    <newline46mondego>    BufferedImage result = new BufferedImage(w, h, image.getType());  <newline46mondego>    Graphics2D g2 = result.createGraphics();  <newline46mondego>    g2.setColor(Color.WHITE);<newline46mondego>    g2.fillRect(0, 0, w, h);<newline46mondego>    g2.rotate(Math.toRadians(degreesAngle), w/2, h/2);<newline46mondego>    g2.drawImage(image,null,0,0);  <newline46mondego>    return result;   <newline46mondego>}  <newline46mondego>"
"7844splitHere46","20256474splitHere46","}"
"7845splitHere46","20256474splitHere46","[{<doubleQuotes46>errorCode<doubleQuotes46>:<doubleQuotes46>JSON_PARSER_ERROR<doubleQuotes46>,<doubleQuotes46>message<doubleQuotes46>:<doubleQuotes46>Expected LIST<String> but found \<doubleQuotes46>   I can talk in English and Farsi fluently, and I know a little Spanish too\<doubleQuotes46><newline46mondego>"
"7846splitHere46","20256474splitHere46","String json = <doubleQuotes46>http://mkpartners.force.com/services/apexrest/careers?firstName=Izak&lastName=Tarashandegan&email=izaktarashandegan@gmail.com<doubleQuotes46>;<newline46mondego>data = <doubleQuotes46>{\<doubleQuotes46>application\<doubleQuotes46>:{\<doubleQuotes46>isTest\<doubleQuotes46>:true,\<doubleQuotes46>firstName\<doubleQuotes46>:\<doubleQuotes46>Izak\<doubleQuotes46>,\<doubleQuotes46>lastName\<doubleQuotes46>:\<doubleQuotes46>Tarashandegan\<doubleQuotes46>,\<doubleQuotes46>email\<doubleQuotes46>:\<doubleQuotes46>izaktarashandegan@gmail.com\<doubleQuotes46>,\<doubleQuotes46>phone\<doubleQuotes46>:\<doubleQuotes46>4244420591\<doubleQuotes46>,\<doubleQuotes46>zipcode\<doubleQuotes46>:\<doubleQuotes46>90035\<doubleQuotes46>,\<doubleQuotes46>describeYourself\<doubleQuotes46>:\<doubleQuotes46>I am passionate about programming.I do my best to learn new materials about programming everyday. My favorite language is Java, and I do all my coding in Java.\<doubleQuotes46>,\<doubleQuotes46>skills\<doubleQuotes46>:[\<doubleQuotes46>I can talk in English and Farsi fluently, and I know a little Spanish too\<doubleQuotes46>],\<doubleQuotes46>education\<doubleQuotes46>:[{\<doubleQuotes46>school\<doubleQuotes46>:\<doubleQuotes46>CSUN\<doubleQuotes46>,\<doubleQuotes46>graduationYear\<doubleQuotes46>:2013,\<doubleQuotes46>degree\<doubleQuotes46>:\<doubleQuotes46>bachelor\<doubleQuotes46>,\<doubleQuotes46>major\<doubleQuotes46>:\<doubleQuotes46>CS\<doubleQuotes46>},{\<doubleQuotes46>school\<doubleQuotes46>:\<doubleQuotes46>SMC\<doubleQuotes46>,\<doubleQuotes46>graduationYear\<doubleQuotes46>:2010,\<doubleQuotes46>degree\<doubleQuotes46>:\<doubleQuotes46>AA\<doubleQuotes46>,\<doubleQuotes46>major\<doubleQuotes46>:\<doubleQuotes46>CS\<doubleQuotes46>}],\<doubleQuotes46>experience\<doubleQuotes46>:[{\<doubleQuotes46>company\<doubleQuotes46>:\<doubleQuotes46>Ambient Digital Media\<doubleQuotes46>,\<doubleQuotes46>fromDate\<doubleQuotes46>:\<doubleQuotes46>2004-02-01\<doubleQuotes46>,\<doubleQuotes46>toDate\<doubleQuotes46>:\<doubleQuotes46>2004-05-01\<doubleQuotes46>,\<doubleQuotes46>title\<doubleQuotes46>:\<doubleQuotes46>web desinger\<doubleQuotes46>,\<doubleQuotes46>workDone\<doubleQuotes46>:\<doubleQuotes46>update their website\<doubleQuotes46>},{\<doubleQuotes46>company\<doubleQuotes46>:\<doubleQuotes46>liberty plumbing and heating Inc.\<doubleQuotes46>,\<doubleQuotes46>fromDate\<doubleQuotes46>:\<doubleQuotes46>2004-06-01\<doubleQuotes46>,\<doubleQuotes46>toDate\<doubleQuotes46>:\<doubleQuotes46>2013-05-15\<doubleQuotes46>,\<doubleQuotes46>title\<doubleQuotes46>:\<doubleQuotes46>web desinger\<doubleQuotes46>,\<doubleQuotes46>workDone\<doubleQuotes46>:\<doubleQuotes46>work as a book keeper\<doubleQuotes46>}]}}<doubleQuotes46>;<newline46mondego>"
"7847splitHere46","20256474splitHere46","<doubleQuotes46>Your TEST POST is correct, please set the isTest (Boolean) attribute on the application to FALSE to actually apply."
"7848splitHere46","20256474splitHere46","import java.io.BufferedReader;<newline46mondego>import java.io.IOException;<newline46mondego>import java.io.InputStreamReader;<newline46mondego>import java.net.MalformedURLException;<newline46mondego>import org.apache.http.HttpResponse;<newline46mondego>import org.apache.http.client.methods.HttpPost;<newline46mondego>import org.apache.http.entity.StringEntity;<newline46mondego>import org.apache.http.impl.client.DefaultHttpClient;<newline46mondego>/**<newline46mondego> *<newline46mondego> * @author Izak<newline46mondego> */<newline46mondego>public class PostHTTP {<newline46mondego><newline46mondego>    /**<newline46mondego>     * @param args the command line arguments<newline46mondego>     */<newline46mondego>    public static void main(String[] args) {<newline46mondego>        try {<newline46mondego><newline46mondego>        DefaultHttpClient httpClient = new DefaultHttpClient();<newline46mondego>        HttpPost postRequest = new HttpPost(<newline46mondego>            <doubleQuotes46>http://mkpartners.force.com/services/apexrest/careers?firstName=Izak&lastName=Tarashandegan&email=izaktarashandegan@gmail.com<doubleQuotes46>);<newline46mondego>                String json = <doubleQuotes46>{\<doubleQuotes46>application\<doubleQuotes46>:{\<doubleQuotes46>isTest\<doubleQuotes46>:true,\<doubleQuotes46>firstName\<doubleQuotes46>:\<doubleQuotes46>Izak\<doubleQuotes46>,\<doubleQuotes46>lastName\<doubleQuotes46>:\<doubleQuotes46>Tarashandegan\<doubleQuotes46>,\<doubleQuotes46>email\<doubleQuotes46>:\<doubleQuotes46>izaktarashandegan@gmail.com\<doubleQuotes46>,\<doubleQuotes46>phone\<doubleQuotes46>:\<doubleQuotes46>4244420591\<doubleQuotes46>,\<doubleQuotes46>zipcode\<doubleQuotes46>:\<doubleQuotes46>90035\<doubleQuotes46>,\<doubleQuotes46>describeYourself\<doubleQuotes46>:\<doubleQuotes46>I am passionate about programming.I do my best to learn new materials about programming everyday. My favorite language is Java, and I do all my coding in Java.\<doubleQuotes46>,\<doubleQuotes46>skills\<doubleQuotes46>:[\<doubleQuotes46>I can talk in English and Farsi fluently, and I know a little Spanish too\<doubleQuotes46>],\<doubleQuotes46>education\<doubleQuotes46>:[{\<doubleQuotes46>school\<doubleQuotes46>:\<doubleQuotes46>CSUN\<doubleQuotes46>,\<doubleQuotes46>graduationYear\<doubleQuotes46>:2013,\<doubleQuotes46>degree\<doubleQuotes46>:\<doubleQuotes46>bachelor\<doubleQuotes46>,\<doubleQuotes46>major\<doubleQuotes46>:\<doubleQuotes46>CS\<doubleQuotes46>},{\<doubleQuotes46>school\<doubleQuotes46>:\<doubleQuotes46>SMC\<doubleQuotes46>,\<doubleQuotes46>graduationYear\<doubleQuotes46>:2010,\<doubleQuotes46>degree\<doubleQuotes46>:\<doubleQuotes46>AA\<doubleQuotes46>,\<doubleQuotes46>major\<doubleQuotes46>:\<doubleQuotes46>CS\<doubleQuotes46>}],\<doubleQuotes46>experience\<doubleQuotes46>:[{\<doubleQuotes46>company\<doubleQuotes46>:\<doubleQuotes46>Ambient Digital Media\<doubleQuotes46>,\<doubleQuotes46>fromDate\<doubleQuotes46>:\<doubleQuotes46>2004-02-01\<doubleQuotes46>,\<doubleQuotes46>toDate\<doubleQuotes46>:\<doubleQuotes46>2004-05-01\<doubleQuotes46>,\<doubleQuotes46>title\<doubleQuotes46>:\<doubleQuotes46>web desinger\<doubleQuotes46>,\<doubleQuotes46>workDone\<doubleQuotes46>:\<doubleQuotes46>update their website\<doubleQuotes46>},{\<doubleQuotes46>company\<doubleQuotes46>:\<doubleQuotes46>liberty plumbing and heating Inc.\<doubleQuotes46>,\<doubleQuotes46>fromDate\<doubleQuotes46>:\<doubleQuotes46>2004-06-01\<doubleQuotes46>,\<doubleQuotes46>toDate\<doubleQuotes46>:\<doubleQuotes46>2013-05-15\<doubleQuotes46>,\<doubleQuotes46>title\<doubleQuotes46>:\<doubleQuotes46>web desinger\<doubleQuotes46>,\<doubleQuotes46>workDone\<doubleQuotes46>:\<doubleQuotes46>work as a book keeper\<doubleQuotes46>}]}}<doubleQuotes46>;<newline46mondego>        StringEntity input = new StringEntity(json);<newline46mondego>        input.setContentType(<doubleQuotes46>application/json<doubleQuotes46>);<newline46mondego>        postRequest.setEntity(input);<newline46mondego><newline46mondego>        HttpResponse response = httpClient.execute(postRequest);<newline46mondego><newline46mondego>        StringBuilder sb = new StringBuilder();<newline46mondego>        try {<newline46mondego>            BufferedReader reader = <newline46mondego>                   new BufferedReader(new InputStreamReader(response.getEntity().getContent()), 65728);<newline46mondego>            String line = null;<newline46mondego><newline46mondego>            while ((line = reader.readLine()) != null) {<newline46mondego>                sb.append(line);<newline46mondego>            }<newline46mondego>        }<newline46mondego>        catch (IOException e) { e.printStackTrace(); }<newline46mondego>        catch (Exception e) { e.printStackTrace(); }<newline46mondego><newline46mondego><newline46mondego>System.out.println(<doubleQuotes46>finalResult <doubleQuotes46> + sb.toString());<newline46mondego>        System.out.println(response.getStatusLine().getReasonPhrase());<newline46mondego><newline46mondego>        if (response.getStatusLine().getStatusCode() != 201) {<newline46mondego>            throw new RuntimeException(<doubleQuotes46>Failed : HTTP error code : <doubleQuotes46><newline46mondego>                + response.getStatusLine().getStatusCode());<newline46mondego>        }<newline46mondego><newline46mondego>        BufferedReader br = new BufferedReader(<newline46mondego>                        new InputStreamReader((response.getEntity().getContent())));<newline46mondego><newline46mondego>        String output;<newline46mondego>        System.out.println(<doubleQuotes46>Output from Server .... \n<doubleQuotes46>);<newline46mondego>        while ((output = br.readLine()) != null) {<newline46mondego>            System.out.println(output);<newline46mondego>        }<newline46mondego><newline46mondego>        httpClient.getConnectionManager().shutdown();<newline46mondego><newline46mondego>      } catch (MalformedURLException e) {<newline46mondego><newline46mondego>        e.printStackTrace();<newline46mondego><newline46mondego>      } catch (IOException e) {<newline46mondego><newline46mondego>        e.printStackTrace();<newline46mondego><newline46mondego>      }<newline46mondego>    }<newline46mondego><newline46mondego>}<newline46mondego>"
"7849splitHere46","20256484splitHere46","public class MainApp <newline46mondego>  {<newline46mondego>     private User userLoggedIn;<newline46mondego><newline46mondego>     public MainApp()<newline46mondego>     {<newline46mondego>         userLoggedIn = new User(<doubleQuotes46>john doe<doubleQuotes46>);<newline46mondego>     }<newline46mondego><newline46mondego>     public User getUserLoggedIn()<newline46mondego>     {<newline46mondego>         return userLoggedIn;<newline46mondego>     }<newline46mondego>  }<newline46mondego><newline46mondego>  public class MyController <newline46mondego>  { <newline46mondego>    MainApp mainApp = new MainApp();<newline46mondego>    mainApp.getUserLoggedIn().addNewFood(new Food(//enter datum here));<newline46mondego>  }   <newline46mondego>"
"7850splitHere46","20256553splitHere46","@Override<newline46mondego>   public Object getValueAt(int row, int col) {<newline46mondego>       if ( col < list.get(row).length )   {<newline46mondego>            return list.get(row)[col];<newline46mondego>       }    else    {<newline46mondego>           return <doubleQuotes46><doubleQuotes46>;<newline46mondego>       }<newline46mondego>   }<newline46mondego>"
"7851splitHere46","20256563splitHere46","public class Main {<newline46mondego>    public static int sharedValue = 100;<newline46mondego>    ....<newline46mondego>}  <newline46mondego>"
"7852splitHere46","20256563splitHere46","Main.sharedValue<newline46mondego>"
"7853splitHere46","20256576splitHere46","Name"
"7854splitHere46","20256576splitHere46","List"
"7855splitHere46","20256576splitHere46","public static void main(String[] args){     <newline46mondego><newline46mondego>    List<Name> list = new ArrayList<Name>();<newline46mondego><newline46mondego>    loadFile();<newline46mondego><newline46mondego>    System.out.println(list.get(0).getPop());<newline46mondego>}<newline46mondego><newline46mondego>private static void loadFile(){<newline46mondego>    Scanner inputStream = null;<newline46mondego>    String fileName = <doubleQuotes46>names.txt<doubleQuotes46>;<newline46mondego><newline46mondego>    try {<newline46mondego>        inputStream = new Scanner (new File(fileName));<newline46mondego>    }<newline46mondego>    catch (FileNotFoundException e){<newline46mondego>        System.out.println(<doubleQuotes46>Error opening file named: <doubleQuotes46> + fileName);<newline46mondego>        System.out.println(<doubleQuotes46>Exiting...<doubleQuotes46>);<newline46mondego>    }<newline46mondego><newline46mondego>    while (inputStream.hasNext()){<newline46mondego>        // givenName = something<newline46mondego>        // ranks = something;<newline46mondego><newline46mondego>        list.add(new Name(givenName, ranks);<newline46mondego>    }<newline46mondego>}<newline46mondego>"
"7856splitHere46","20256576splitHere46","A 1 234 22 43 543 32 344 32 43<newline46mondego>"
"7857splitHere46","20256576splitHere46","while (inputStream.hasNextLIne()){<newline46mondego>     String line = inputStream.nextLine();<newline46mondego>     String tokens = line.split(<doubleQuotes46>\\s+<doubleQuotes46>);<newline46mondego><newline46mondego>     String givenName = tokens[0];<newline46mondego><newline46mondego>     int[] numList = new int[tokens.lenth - 1];<newline46mondego><newline46mondego>     for (int i = 1; i < tokens.length; i++){<newline46mondego>         numList[i - 1] = Integer.parseInt(tokens[i].trim());<newline46mondego>     }<newline46mondego><newline46mondego>     list.add(new Name(givenName, numList);<newline46mondego>}<newline46mondego>"
"7858splitHere46","20256705splitHere46","Calendar"
"7859splitHere46","20256705splitHere46","long now = System.currentTimeMillis();<newline46mondego>    Calendar christmas = Calendar.getInstance();<newline46mondego>    christmas.set(Calendar.MONTH, Calendar.DECEMBER);<newline46mondego>    christmas.set(Calendar.DAY_OF_MONTH, 25);<newline46mondego>    long untilChristmas = christmas.getTimeInMillis() - now;<newline46mondego><newline46mondego>    DateFormat df = new SimpleDateFormat(<doubleQuotes46>dd-kk-mm-ss<doubleQuotes46>);<newline46mondego>    Date date = new Date(untilChristmas);<newline46mondego><newline46mondego>    System.out.println(df.format(date));<newline46mondego>"
"7860splitHere46","20256756splitHere46","ObjectOutputStream"
"7861splitHere46","20256756splitHere46","ObjectInputStream"
"7862splitHere46","20256768splitHere46","double amounto = Double.parseDouble(getInvoiceAmount());<newline46mondego>"
"7863splitHere46","20256817splitHere46","LayredPane"
"7864splitHere46","20256817splitHere46","MouseListener"
"7865splitHere46","20256817splitHere46","MouseMotionListener"
"7866splitHere46","20256817splitHere46","LayeredPane"
"7867splitHere46","20256817splitHere46","List"
"7868splitHere46","20256817splitHere46","paintComponent"
"7869splitHere46","20256817splitHere46","static"
"7870splitHere46","20256817splitHere46","paint"
"7871splitHere46","20256817splitHere46","paintComponent"
"7872splitHere46","20256817splitHere46","paint"
"7873splitHere46","20256817splitHere46","paintComponent"
"7874splitHere46","20256817splitHere46","paintXxx"
"7875splitHere46","20256817splitHere46","repaint"
"7876splitHere46","20256875splitHere46","for(PopUp pop: popups) {<newline46mondego>  popups.remove(pop); // effectively, due to tick<newline46mondego>}<newline46mondego>"
"7877splitHere46","20256875splitHere46","for(var i=0, last=popups.size(); i<last; i++) {<newline46mondego>  PopUp pop = popups.get(i);<newline46mondego>  popups.remove(pop); // next <doubleQuotes46>i++<doubleQuotes46> will skip over an item<newline46mondego>}<newline46mondego>"
"7878splitHere46","20256875splitHere46","for(var i=popups.size()-1; i>=0; i--) {<newline46mondego>  PopUp pop = popups.get(i);<newline46mondego>  popups.remove(pop);<newline46mondego>}<newline46mondego>"
"7879splitHere46","20256928splitHere46","User c = getOwner(username);<newline46mondego>"
"7880splitHere46","20256928splitHere46","public User getOwner() {<newline46mondego>    return owner;<newline46mondego>}<newline46mondego>"
"7881splitHere46","20256928splitHere46","c.add_value(balance);<newline46mondego>"
"7882splitHere46","20256964splitHere46","for(int i = 0; i > numItems; i++)<newline46mondego>"
"7883splitHere46","20256964splitHere46","for(int i = 0; i < numItems; i++) // Note the < instead of the ><newline46mondego>"
"7884splitHere46","20256964splitHere46","numItems"
"7885splitHere46","20256964splitHere46","null"
"7886splitHere46","20256964splitHere46","for (int i = 0; i < items.length && items[i] != null; i++)<newline46mondego>"
"7887splitHere46","20257120splitHere46","/**<newline46mondego> * MySqlCallMultipleResultSet.java<newline46mondego> * Copyright (c) 2007 by Dr. Herong Yang. All rights reserved.<newline46mondego> */<newline46mondego>import java.sql.*;<newline46mondego>public class MySqlCallMultipleResultSet {<newline46mondego>  public static void main(String [] args) {<newline46mondego>    Connection con = null;<newline46mondego>    try {<newline46mondego>      com.mysql.jdbc.jdbc2.optional.MysqlDataSource ds <newline46mondego>        = new com.mysql.jdbc.jdbc2.optional.MysqlDataSource();<newline46mondego>      ds.setServerName(<doubleQuotes46>localhost<doubleQuotes46>);<newline46mondego>      ds.setPortNumber(3306);<newline46mondego>      ds.setDatabaseName(<doubleQuotes46>HerongDB<doubleQuotes46>);<newline46mondego>      ds.setUser(<doubleQuotes46>Herong<doubleQuotes46>);<newline46mondego>      ds.setPassword(<doubleQuotes46>TopSecret<doubleQuotes46>);<newline46mondego>      con = ds.getConnection();<newline46mondego><newline46mondego>// Create CallableStatement<newline46mondego>      CallableStatement cs = con.prepareCall(<doubleQuotes46>CALL HeadTail(?)<doubleQuotes46>);<newline46mondego><newline46mondego>// Register OUT parameters<newline46mondego>      cs.registerOutParameter(1, java.sql.Types.INTEGER);     <newline46mondego><newline46mondego>// Execute the CALL statement and expecting multiple result sets<newline46mondego>      boolean isResultSet = cs.execute();<newline46mondego><newline46mondego>// First ReulstSet object<newline46mondego>      if (!isResultSet) {<newline46mondego>        System.out.println(<doubleQuotes46>The first result is not a ResultSet.<doubleQuotes46>);<newline46mondego>        return;<newline46mondego>      }<newline46mondego><newline46mondego>// First ReulstSet object<newline46mondego>      System.out.println(<doubleQuotes46>Head of the table:<doubleQuotes46>);<newline46mondego>      ResultSet res = cs.getResultSet();<newline46mondego>      while (res.next()) {<newline46mondego>        System.out.println(<doubleQuotes46>  <doubleQuotes46>+res.getInt(<doubleQuotes46>ID<doubleQuotes46>)<newline46mondego>          +<doubleQuotes46>, <doubleQuotes46>+res.getString(<doubleQuotes46>FirstName<doubleQuotes46>)<newline46mondego>          +<doubleQuotes46>, <doubleQuotes46>+res.getString(<doubleQuotes46>LastName<doubleQuotes46>)<newline46mondego>          +<doubleQuotes46>, <doubleQuotes46>+res.getTimestamp(<doubleQuotes46>ModTime<doubleQuotes46>));<newline46mondego><newline46mondego>      }<newline46mondego>      res.close();<newline46mondego><newline46mondego>// Move to the next result<newline46mondego>      isResultSet = cs.getMoreResults();<newline46mondego>      if (!isResultSet) {<newline46mondego>        System.out.println(<doubleQuotes46>The next result is not a ResultSet.<doubleQuotes46>);<newline46mondego>        return;<newline46mondego>      }<newline46mondego><newline46mondego>// Second ReulstSet object<newline46mondego>      System.out.println(<doubleQuotes46>Tail of the table:<doubleQuotes46>);<newline46mondego>      res = cs.getResultSet();<newline46mondego>      while (res.next()) {<newline46mondego>        System.out.println(<doubleQuotes46>  <doubleQuotes46>+res.getInt(<doubleQuotes46>ID<doubleQuotes46>)<newline46mondego>          +<doubleQuotes46>, <doubleQuotes46>+res.getString(<doubleQuotes46>FirstName<doubleQuotes46>)<newline46mondego>          +<doubleQuotes46>, <doubleQuotes46>+res.getString(<doubleQuotes46>LastName<doubleQuotes46>)<newline46mondego>          +<doubleQuotes46>, <doubleQuotes46>+res.getTimestamp(<doubleQuotes46>ModTime<doubleQuotes46>));<newline46mondego><newline46mondego>      }<newline46mondego>      res.close();<newline46mondego><newline46mondego>// Retrieve OUT parameters<newline46mondego>      System.out.println(<doubleQuotes46>Total number of records: <doubleQuotes46>+cs.getInt(1));<newline46mondego><newline46mondego>// Close resource<newline46mondego>      cs.close();<newline46mondego><newline46mondego>      con.close();<newline46mondego>    } catch (Exception e) {<newline46mondego>      System.err.println(<doubleQuotes46>Exception: <doubleQuotes46>+e.getMessage());<newline46mondego>      e.printStackTrace();<newline46mondego>    }<newline46mondego>  }<newline46mondego>}<newline46mondego>"
"7888splitHere46","20257315splitHere46","int"
"7889splitHere46","20257315splitHere46","Math.pow"
"7890splitHere46","20257315splitHere46","double"
"7891splitHere46","20257315splitHere46","for(ii = 0; ii >= 0; ii++) {<newline46mondego>  jj = ii * ii;<newline46mondego>  if(jj < 0) break;<newline46mondego>}<newline46mondego>System.out.printf(<doubleQuotes46>%d; %d\n<doubleQuotes46>, ii, jj);<newline46mondego>"
"7892splitHere46","20257315splitHere46","46341; -2147479015<newline46mondego>"
"7893splitHere46","20257372splitHere46","Iterable<String>"
"7894splitHere46","20257372splitHere46","Object[]"
"7895splitHere46","20257372splitHere46","Iterable<String>[]"
"7896splitHere46","20257372splitHere46","Iterable"
"7897splitHere46","20257372splitHere46","Iterable<String>[] a = new Iterable[n];<newline46mondego>"
"7898splitHere46","20257372splitHere46","Iterable<String>[] a = new Iterable<String>[n]; // ERROR<newline46mondego>"
"7899splitHere46","20257372splitHere46","<?>"
"7900splitHere46","20257372splitHere46","Iterable<String>[] a = (Iterable<String>[])new Iterable<?>[n];<newline46mondego>"
"7901splitHere46","20257372splitHere46","@SuppressWarnings(<doubleQuotes46>unchecked<doubleQuotes46>)<newline46mondego>Iterable<String>[] a = (Iterable<String>[])new Iterable<?>[n];<newline46mondego>"
"7902splitHere46","20257393splitHere46","stdin.read();"
"7903splitHere46","20257393splitHere46","int"
"7904splitHere46","20257393splitHere46","stdin.readLine()"
"7905splitHere46","20257393splitHere46","positiveInt = Integer.parseInt(stdin.readLine());<newline46mondego>"
"7906splitHere46","20257464splitHere46","3.1.0"
"7907splitHere46","20257464splitHere46","org.eclipse.aether:aether-[api|impl|spi]"
"7908splitHere46","20257464splitHere46","3.0.5"
"7909splitHere46","20257464splitHere46","org.sonatype.aether:aether-[api|impl|spi]"
"7910splitHere46","20257464splitHere46","ClassCastException"
"7911splitHere46","20257464splitHere46","<dependency><newline46mondego>   <groupId>org.apache.maven</groupId><newline46mondego>   <artifactId>maven-aether-provider</artifactId><newline46mondego>   <version>3.0.5</version><newline46mondego>   <scope>test</scope><newline46mondego> </dependency><newline46mondego>"
"7912splitHere46","20257614splitHere46","LineNumberReader"
"7913splitHere46","20257614splitHere46","LineNumberReader  lnr = new LineNumberReader(new FileReader(new File(<doubleQuotes46>names.txt<doubleQuotes46>))); // Your file name<newline46mondego>lnr.skip(Long.MAX_VALUE);<newline46mondego>int size = lnr.getLineNumber() + 1; // +1 because line numbering begins at 0<newline46mondego>lnr.close();<newline46mondego><newline46mondego>// Use the size for your array declarationg<newline46mondego>String[] nameArray = new String[size];<newline46mondego>"
"7914splitHere46","20257614splitHere46","ArrayList"
"7915splitHere46","20257614splitHere46","ArrayList"
"7916splitHere46","20257756splitHere46","public void withdraw (double balance)<newline46mondego>{<newline46mondego>  System.out.println(<doubleQuotes46>How much would you like to withdraw?<doubleQuotes46>);<newline46mondego>  double amount = keyboard.nextDouble();  <newline46mondego><newline46mondego>  try<newline46mondego>  {<newline46mondego>   if(amount < balance)<newline46mondego>   {<newline46mondego>    balance = balance-amount;<newline46mondego>    System.out.println(<doubleQuotes46>You have withdrawn <doubleQuotes46>+amount+ <doubleQuotes46> and your new balance is <doubleQuotes46>+balance);<newline46mondego>   }<newline46mondego>  else<newline46mondego>   throw new IncorrectWithdrawException();<newline46mondego>  }<newline46mondego> catch(IncorrectWithdrawException e)<newline46mondego> {<newline46mondego>    System.out.println(e.getMessage());<newline46mondego>    withdraw(balance);// keeps calling the method for a loop if they keep entering incorrect amount<newline46mondego> }<newline46mondego> }<newline46mondego>"
"7917splitHere46","20257758splitHere46","HashMap<String, List<String>> map = new HashMap<String, List<String>>();<newline46mondego><newline46mondego>// ...<newline46mondego><newline46mondego>List<String> list;<newline46mondego>if (map.containsKey(refId))<newline46mondego>    list = map.get(refId);<newline46mondego>else<newline46mondego>    map.put(refid, list = new ArrayList<String>());<newline46mondego><newline46mondego>// work with list here<newline46mondego>"
"7918splitHere46","20257760splitHere46","E.test2"
"7919splitHere46","20257760splitHere46","static"
"7920splitHere46","20257852splitHere46","inputOptionName1.setVisibility(View.VISIBLE);<newline46mondego>inputOptionName2.setVisibility(View.VISIBLE);<newline46mondego>inputOptionName3.setVisibility(View.GONE);<newline46mondego>inputOptionName4.setVisibility(View.GONE);<newline46mondego>inputOptionName5.setVisibility(View.GONE);<newline46mondego>"
"7921splitHere46","20257852splitHere46","JAVA"
"7922splitHere46","20257852splitHere46","int count = 2;<newline46mondego>"
"7923splitHere46","20257852splitHere46","JAVA"
"7924splitHere46","20257852splitHere46","btn.setOnClickListener(new OnClickListener() {<newline46mondego><newline46mondego>            @Override<newline46mondego>            public void onClick(View v) {<newline46mondego>                if(count >= 5)<newline46mondego>                {<newline46mondego>                   Toast.makeText(getBaseContext(), <doubleQuotes46>No more EditText Box to add.<doubleQuotes46>, Toast.LENGTH_SHORT).show();<newline46mondego>                }<newline46mondego>                else<newline46mondego>                {<newline46mondego>                  count++;<newline46mondego><newline46mondego>                  if(count == 3)<newline46mondego>                   inputOptionName3.setVisibility(View.VISIBLE);<newline46mondego>                  else if(count == 4)<newline46mondego>                   inputOptionName4.setVisibility(View.VISIBLE);<newline46mondego>                  else if(count == 5)<newline46mondego>                   inputOptionName5.setVisibility(View.VISIBLE);<newline46mondego>                }<newline46mondego>            }<newline46mondego>        });<newline46mondego><newline46mondego> cancel.setOnClickListener(new OnClickListener() {<newline46mondego><newline46mondego>                @Override<newline46mondego>                public void onClick(View v) {<newline46mondego>                    if(count <= 2)<newline46mondego>                    {<newline46mondego>                        Toast.makeText(getBaseContext(), <doubleQuotes46>No more EditText Box to cancel.<doubleQuotes46>, Toast.LENGTH_SHORT).show();<newline46mondego>                    }<newline46mondego>                    else<newline46mondego>                    {<newline46mondego>                     if(count == 3)<newline46mondego>                     inputOptionName3.setVisibility(View.GONE);<newline46mondego>                     else if(count == 4)<newline46mondego>                     inputOptionName4.setVisibility(View.GONE);<newline46mondego>                     else if(count == 5)<newline46mondego>                      inputOptionName5.setVisibility(View.GONE);<newline46mondego><newline46mondego>                     count--;<newline46mondego>                    }<newline46mondego>                }<newline46mondego>            });<newline46mondego>"
"7925splitHere46","20257888splitHere46","fillOval()"
"7926splitHere46","20257888splitHere46","fillOval(origX + changeInThickness / 2, origY + changeInThickness / 2, origWidth - changeInThickness, origHeight - changeInThickness)"
"7927splitHere46","20258054splitHere46","if(target.trim().equals(names[mid].trim())){<newline46mondego>                System.out.println(<doubleQuotes46>Found in position: <doubleQuotes46> + mid);    //when found<newline46mondego>                break;<newline46mondego>            }<newline46mondego>"
"7928splitHere46","20258074splitHere46","@OneToMany<newline46mondego>   private List<ViewedProductsPerCategory> = <newline46mondego>                                    new ArrayList<ViewedProductsPerCategory>();<newline46mondego>"
"7929splitHere46","20258074splitHere46","@Entity<newline46mondego>public class ViewedProductsPerCategory {<newline46mondego>   @Id<newline46mondego>   @GeneratedValue<newline46mondego>   long id;<newline46mondego><newline46mondego>   @OneToMany <newline46mondego>   Category category;<newline46mondego><newline46mondego>   long CatCounter;<newline46mondego><newline46mondego>   long ProCounter;<newline46mondego><newline46mondego>   getters and setters;<newline46mondego>}<newline46mondego>"
"7930splitHere46","20258094splitHere46","<form  method=<doubleQuotes46>post<doubleQuotes46> action=<doubleQuotes46>/getFormParam<doubleQuotes46>>"
"7931splitHere46","20258094splitHere46","<form  method=<doubleQuotes46>post<doubleQuotes46> action=<doubleQuotes46>getFormParam<doubleQuotes46>>"
"7932splitHere46","20258100splitHere46","Pool"
"7933splitHere46","20258100splitHere46","Pool"
"7934splitHere46","20258100splitHere46","final Pool<Teacher> pool = new Pool<>();<newline46mondego>"
"7935splitHere46","20258100splitHere46","public class Pool<T extends PoolObject> {//...<newline46mondego>"
"7936splitHere46","20258129splitHere46","Y()<newline46mondego> {<newline46mondego>     System.out.print(<doubleQuotes46>from cons 2<doubleQuotes46>);<newline46mondego> }<newline46mondego>"
"7937splitHere46","20258129splitHere46","Y()<newline46mondego> {<newline46mondego>     super();  //Call to X's constructor made here even if you don't call it<newline46mondego>     System.out.print(<doubleQuotes46>from cons 2<doubleQuotes46>);<newline46mondego> }<newline46mondego>"
"7938splitHere46","20258129splitHere46","Y"
"7939splitHere46","20258129splitHere46","X"
"7940splitHere46","20258129splitHere46","class A {<newline46mondego>    A(int intForA) { <newline46mondego>        //Do stuff...<newline46mondego>    }<newline46mondego>}<newline46mondego><newline46mondego>class B extends A {<newline46mondego>    B() {<newline46mondego>        this(3);  //Won't compile! A's constructor isn't inherited by B<newline46mondego>    }<newline46mondego>}<newline46mondego>"
"7941splitHere46","20258129splitHere46","class B extends A {<newline46mondego>    B() {<newline46mondego>        super(3);  //This compiles; we're calling A's constructor from B<newline46mondego>    }<newline46mondego>}<newline46mondego>"
"7942splitHere46","20258169splitHere46","put"
"7943splitHere46","20258189splitHere46","file\:\/\w\:\/[^\s]*\.jar"
"7944splitHere46","20258189splitHere46","g"
"7945splitHere46","20258189splitHere46","i"
"7946splitHere46","20258229splitHere46","public WeeklyFiber(String sampleID, String weekOfTest, int engineerID, String[] strengths) <newline46mondego>   {<newline46mondego>      this.sampleID = sampleID;<newline46mondego>      this.weekOfTest = weekOfTest;<newline46mondego>      this.engineerID = engineerID;<newline46mondego>      this.strengths = strengths;<newline46mondego>      count++;<newline46mondego>   }<newline46mondego>"
"7947splitHere46","20258229splitHere46","WeeklyFiber week2 = new WeeklyFiber(<doubleQuotes46>CS4567<doubleQuotes46>, <doubleQuotes46>11/24/13<doubleQuotes46>, 32, new String[] {<doubleQuotes46>27<doubleQuotes46>,<doubleQuotes46>26<doubleQuotes46>, <doubleQuotes46>28<doubleQuotes46>});<newline46mondego>"
"7948splitHere46","20258383splitHere46","public Node copy() {<newline46mondego>    return copyWithParent( parent );<newline46mondego>}<newline46mondego>public Node copyWithParent( Node parentOverride ) {<newline46mondego>    Node out = new Node( token, value, parentOverride, null, null );<newline46mondego><newline46mondego>    if (this.left != null) {<newline46mondego>        out.left = this.left.copyWithParent( out );<newline46mondego>    }<newline46mondego><newline46mondego>    if (this.right != null) {<newline46mondego>        out.right = this.right.copyWithParent( out );<newline46mondego>    }<newline46mondego><newline46mondego>    return out;<newline46mondego>}<newline46mondego>"
"7949splitHere46","20258422splitHere46","Action"
"7950splitHere46","20258422splitHere46","U extends User<Principal>"
"7951splitHere46","20258422splitHere46","MyUser"
"7952splitHere46","20258422splitHere46","User<Principal>"
"7953splitHere46","20258422splitHere46","User<MyPrincipal>"
"7954splitHere46","20258422splitHere46","User<MyPrincipal>"
"7955splitHere46","20258422splitHere46","User<Principal>"
"7956splitHere46","20258422splitHere46","Action"
"7957splitHere46","20258422splitHere46","U"
"7958splitHere46","20258422splitHere46","public abstract class Action<P extends Principal, U extends User<P>> {<newline46mondego>}<newline46mondego>"
"7959splitHere46","20258422splitHere46","MyAction"
"7960splitHere46","20258422splitHere46","public class MyAction extends Action<MyPrincipal, MyUser>{<newline46mondego>}<newline46mondego>"
"7961splitHere46","20258422splitHere46","public abstract class Action<U extends User<? extends Principal>> {<newline46mondego>}<newline46mondego>"
"7962splitHere46","20258422splitHere46","public class MyAction extends Action<MyUser>{<newline46mondego>}<newline46mondego>"
"7963splitHere46","20258427splitHere46","Polygon"
"7964splitHere46","20258427splitHere46","Graphics2D.fill(Shape)"
"7965splitHere46","20258427splitHere46","translate(...)"
"7966splitHere46","20258427splitHere46","paintComponent()"
"7967splitHere46","20258478splitHere46","channel.writeAndFlush(new TextWebSocketFrame(<doubleQuotes46>Message handled <doubleQuotes46>));<newline46mondego>"
"7968splitHere46","20258504splitHere46","frame.add(game[row][col]);<newline46mondego>"
"7969splitHere46","20258504splitHere46","JFrame"
"7970splitHere46","20258504splitHere46","BorderLayout"
"7971splitHere46","20258504splitHere46","BorderLayout"
"7972splitHere46","20258504splitHere46","GridLayout"
"7973splitHere46","20258587splitHere46","com.google.protobuf.Message"
"7974splitHere46","20258587splitHere46","protoc"
"7975splitHere46","20258620splitHere46","topBottom"
"7976splitHere46","20258620splitHere46","for(int i=0; i<input+2; i++) {<newline46mondego>  for(int j=0; j<input+2; j++) {<newline46mondego>"
"7977splitHere46","20258620splitHere46","X"
"7978splitHere46","20258620splitHere46","if(i == 0 || i == input+1) {<newline46mondego>      System.out.print(<doubleQuotes46>X <doubleQuotes46>);<newline46mondego>    }<newline46mondego>"
"7979splitHere46","20258620splitHere46","X"
"7980splitHere46","20258620splitHere46","*"
"7981splitHere46","20258620splitHere46","else {<newline46mondego>      if(j == 0 || j == input+1) {<newline46mondego>        System.out.print(<doubleQuotes46>X <doubleQuotes46>);<newline46mondego>      } else {<newline46mondego>        System.out.print(<doubleQuotes46>* <doubleQuotes46>);<newline46mondego>      }<newline46mondego>    }<newline46mondego>"
"7982splitHere46","20258620splitHere46","for(int i=0; i<input+2; i++) {<newline46mondego>  for(int j=0; j<input+2; j++) {<newline46mondego>    if(i == 0 || i == input+1) {<newline46mondego>      System.out.print(<doubleQuotes46>X <doubleQuotes46>);<newline46mondego>    } else {<newline46mondego>      if(j == 0 || j == input+1) {<newline46mondego>        System.out.print(<doubleQuotes46>X <doubleQuotes46>);<newline46mondego>      } else {<newline46mondego>        System.out.print(<doubleQuotes46>* <doubleQuotes46>);<newline46mondego>      }<newline46mondego>    }<newline46mondego>  }<newline46mondego>  System.out.println();<newline46mondego>}<newline46mondego>"
"7983splitHere46","20258621splitHere46","Web Services Configuration"
"7984splitHere46","20258621splitHere46","System -> Cache Management"
"7985splitHere46","20258720splitHere46","<glassfish-web-app error-url=<doubleQuotes46><doubleQuotes46>><newline46mondego>  <context-root>/</context-root><newline46mondego>  <class-loader delegate=<doubleQuotes46>true<doubleQuotes46>/><newline46mondego>  <jsp-config><newline46mondego>"
"7986splitHere46","20258749splitHere46","A"
"7987splitHere46","20258749splitHere46","B, C, D"
"7988splitHere46","20258749splitHere46","B â†’ C â†’ D<newline46mondego>"
"7989splitHere46","20258749splitHere46","A â†’ B â†’ C â†’ D<newline46mondego>"
"7990splitHere46","20258749splitHere46","if(first!=null)"
"7991splitHere46","20258749splitHere46","add()"
"7992splitHere46","20258749splitHere46","first"
"7993splitHere46","20258749splitHere46","next"
"7994splitHere46","20258918splitHere46","String DateStr=<doubleQuotes46>2013-10-31T19:00:00Z<doubleQuotes46>;<newline46mondego>    SimpleDateFormat sim=new SimpleDateFormat(<doubleQuotes46>yyyy-MM-dd<doubleQuotes46>);<newline46mondego>    Date d = new SimpleDateFormat(<doubleQuotes46>yyyy-MM-dd<doubleQuotes46>).parse(DateStr); <newline46mondego>System.out.println(sim.format(d));<newline46mondego>"
"7995splitHere46","20258962splitHere46","r1=s1.executeQuery(<doubleQuotes46>select duration from tests where testname='<doubleQuotes46>+ts+<doubleQuotes46>'<doubleQuotes46>);<newline46mondego>"
"7996splitHere46","20259278splitHere46","if"
"7997splitHere46","20259278splitHere46","<c:if>"
"7998splitHere46","20259278splitHere46","<c:if test=<doubleQuotes46>${row.file_name != null}<doubleQuotes46>><newline46mondego>    Not Null   <newline46mondego></c:if><newline46mondego>"
"7999splitHere46","20259278splitHere46","if-else"
"8000splitHere46","20259278splitHere46","<c:choose>"
"8001splitHere46","20259278splitHere46","<c:else>"
"8002splitHere46","20259278splitHere46","<c:choose><newline46mondego>    <c:when test=<doubleQuotes46>${row.file_name != null}<doubleQuotes46>><newline46mondego>        Not Null<newline46mondego>    </c:when><newline46mondego>    <c:otherwise><newline46mondego>        Null<newline46mondego>    </c:otherwise><newline46mondego></c:choose><newline46mondego>"
"8003splitHere46","20259278splitHere46","${row.file_name != null}"
"8004splitHere46","20259278splitHere46","true"
"8005splitHere46","20259278splitHere46","non-null"
"8006splitHere46","20259278splitHere46","null"
"8007splitHere46","20259278splitHere46","empty"
"8008splitHere46","20259278splitHere46","<!-- If row.file_name is neither empty nor null --><newline46mondego><c:when test=<doubleQuotes46>${!empty row.file_name}<doubleQuotes46>><newline46mondego>    Not empty<newline46mondego></c:when><newline46mondego>"
"8009splitHere46","20259283splitHere46","boolean filefound = false;<newline46mondego>File getFileInFolder(File folder, String fileName) {<newline46mondego>    filefound = false;<newline46mondego>    //System.out.println(<doubleQuotes46> PathTo : <doubleQuotes46>+folder.getAbsolutePath());<newline46mondego>    File [] files = folder.listFiles();<newline46mondego>    File file = null;<newline46mondego>    if (files != null) {<newline46mondego><newline46mondego>        for (int i = 0; i < files.length; i++) {<newline46mondego>            if (files[i].isDirectory()) {<newline46mondego>                file = getFileInFolder(files[i],fileName);<newline46mondego>                if(filefound) {<newline46mondego>                    file= files[i];<newline46mondego>                    break;<newline46mondego>                }<newline46mondego>            } else {<newline46mondego>                //System.out.println(<doubleQuotes46> file : <doubleQuotes46>+files[i].getName());<newline46mondego>                if (files[i].getName().equals(fileName)) {<newline46mondego>                    System.out.println(<doubleQuotes46> Found file : <doubleQuotes46>+files[i].getName());<newline46mondego>                    file= files[i];<newline46mondego>                    filefound = true;<newline46mondego>                    break;<newline46mondego>                }<newline46mondego>            }<newline46mondego>        }   <newline46mondego>    }<newline46mondego><newline46mondego>    return file;<newline46mondego>}<newline46mondego>"
"8010splitHere46","20259390splitHere46","if(i == 0) ... //if i =0 this will work and skip following statement<newline46mondego>else if(i == 1) ...//if i not equal to 0 and if i =1 this will work and skip following statement<newline46mondego>else if(i == 2) ...// if i not equal to 0 and 1 and if i==2 the statement will execute<newline46mondego><newline46mondego><newline46mondego>if(i == 0) ...//if i =0 this will work and check the following conditions also<newline46mondego>if(i == 1) ...//regardless of i == 0 check, this if condition is checked<newline46mondego>if(i == 2) ...//regardless of i == 0 and i == 2 check ,this if condition is checked<newline46mondego>"
"8011splitHere46","20259405splitHere46","^(?:00|\+)[1-9][0-9]{11}$<newline46mondego>"
"8012splitHere46","20259491splitHere46","/*modifed by raghu*/<newline46mondego>if (hoursworked >= 40) {<newline46mondego>    regPay = 40 * Level;<newline46mondego>    overPay = (hoursworked -40)  * (Level * 1.5);<newline46mondego>} else {<newline46mondego>     regPay = hoursworked * Level;<newline46mondego>}<newline46mondego>"
"8013splitHere46","20259491splitHere46","TotalPay = regPay + overPay;<newline46mondego>"
"8014splitHere46","20259491splitHere46","import java.util.Scanner;<newline46mondego><newline46mondego>     public class SalaryPay {<newline46mondego>      public static void main(String[] args) {<newline46mondego>        Scanner sc = new Scanner(System.in);<newline46mondego><newline46mondego>        //declaration of fields<newline46mondego>        double Level = 0;<newline46mondego>        int SkillLevel;<newline46mondego>        char Medical = 0;<newline46mondego>        char Dental = 0;<newline46mondego>        char Disability = 0;<newline46mondego>        int hoursworked;<newline46mondego>        double TotalPay = 0;<newline46mondego>        double overPay = 0;<newline46mondego>        double regPay = 0;<newline46mondego>        char retirementplan = 0;<newline46mondego>        double retire = (TotalPay*100) / 3;<newline46mondego><newline46mondego>        //enter Skill level<newline46mondego>        System.out.println(<doubleQuotes46>Please press either 1 , 2, 3 according to your level<doubleQuotes46>);<newline46mondego>        SkillLevel = sc.nextInt();<newline46mondego><newline46mondego>        switch(SkillLevel) { <newline46mondego>        case 1:<newline46mondego>            Level = 19.00;<newline46mondego>            break;<newline46mondego>        case 2:<newline46mondego>            Level = 23.00;<newline46mondego>            break;<newline46mondego>        case 3:<newline46mondego>            Level = 27.00;<newline46mondego>            break;<newline46mondego>        }<newline46mondego>        //Enter Hours worked<newline46mondego>        System.out.println(<doubleQuotes46>Enter hours worked<doubleQuotes46>);<newline46mondego>        hoursworked = sc.nextInt();<newline46mondego>        /*modifed by raghu*/<newline46mondego>        if (hoursworked >= 40) {<newline46mondego>            regPay = 40 * Level;<newline46mondego>            overPay = (hoursworked -40)  * (Level * 1.5);<newline46mondego>        } else {<newline46mondego>             regPay = hoursworked * Level;<newline46mondego>        }<newline46mondego>        TotalPay = regPay + overPay;<newline46mondego>        //condition for Overtime<newline46mondego>        /*if (hoursworked <= 40) {<newline46mondego>            regPay = hoursworked * Level;<newline46mondego>            overPay = 0;<newline46mondego>        }<newline46mondego>        else {<newline46mondego>            regPay = hoursworked * Level;<newline46mondego>            overPay = (hoursworked - 40) * Level * 1.5;  <newline46mondego>            }*/<newline46mondego><newline46mondego><newline46mondego>        //Insurance condition for skill <newline46mondego>        if(SkillLevel > 1) {<newline46mondego>            System.out.println(<doubleQuotes46>Would you like to sign up for medical Insurance? (y/n)<doubleQuotes46>);<newline46mondego>            Medical = sc.next().charAt(0);<newline46mondego>            if (Medical == 'y') {<newline46mondego>                TotalPay = TotalPay -  23.50; <newline46mondego>            }<newline46mondego>            System.out.println(<doubleQuotes46>Would you like to sign up for Dental Insurance? (y/n)<doubleQuotes46>);<newline46mondego>            Dental = sc.next().charAt(0);<newline46mondego>            if (Dental == 'y') {<newline46mondego>                TotalPay = TotalPay -  21.00; <newline46mondego>            }<newline46mondego>            System.out.println(<doubleQuotes46>Would you like to sign up for Long-term Disability Insurance? (y/n)<doubleQuotes46>);<newline46mondego>            Disability = sc.next().charAt(0);<newline46mondego>            if (Disability == 'y') {<newline46mondego>                TotalPay = TotalPay -  17.00; <newline46mondego>            }<newline46mondego><newline46mondego>        //Retirement plan condition<newline46mondego>        if(SkillLevel == 3) {<newline46mondego>            System.out.println(<doubleQuotes46>Do you want to participate in the retirement plan? (y/n):<doubleQuotes46>);<newline46mondego>            retirementplan = sc.next().charAt(0);<newline46mondego>            if (retirementplan == 'y') {<newline46mondego>                TotalPay = TotalPay - retire;<newline46mondego>            }<newline46mondego>        }  // added by raghu<newline46mondego><newline46mondego>        //display results<newline46mondego><newline46mondego>            System.out.println(<doubleQuotes46>Hours worked this week : <doubleQuotes46> + hoursworked<newline46mondego>                            + <doubleQuotes46>\nYour Hourly Pay Rate is : $<doubleQuotes46> + Level<newline46mondego>                            + <doubleQuotes46>\nYour Payment is  : $<doubleQuotes46> + regPay<newline46mondego>                            + <doubleQuotes46>\nYour Overtime Payment : $<doubleQuotes46> + overPay);<newline46mondego><newline46mondego>                            if(Medical == 'y') {<newline46mondego>                                System.out.println(<doubleQuotes46>Medical Insurance cost : -$23.50<doubleQuotes46>); <newline46mondego>                            }<newline46mondego>                            if(Dental == 'y') {<newline46mondego>                                System.out.println(<doubleQuotes46>Dental Insurance cost : -$21.00<doubleQuotes46>);  <newline46mondego>                            }<newline46mondego>                            if(Disability == 'y') {<newline46mondego>                                System.out.println(<doubleQuotes46>Long-term disability insurance cost : -$17.00<doubleQuotes46>);<newline46mondego>                            }<newline46mondego>                            if(retirementplan == 'y') {<newline46mondego>                                System.out.println(<doubleQuotes46>Retirement Plan cost : -3%<doubleQuotes46>);<newline46mondego>                            }<newline46mondego>                            if(regPay < TotalPay) {<newline46mondego>                                System.out.println(<doubleQuotes46>Error<doubleQuotes46>);<newline46mondego>                            }<newline46mondego>                            System.out.println(<doubleQuotes46>\nTotal earning after deduction : $<doubleQuotes46> + TotalPay);<newline46mondego>            //} --commented by raghu<newline46mondego>        }<newline46mondego>    }<newline46mondego>}<newline46mondego>"
"8015splitHere46","20259596splitHere46","<%if(rs2.next()){%><newline46mondego><%<newline46mondego>topic=rs2.getString(1);<newline46mondego>%><newline46mondego><%}%>   <newline46mondego><newline46mondego>      <tr class=<doubleQuotes46>tablePlainWhite<doubleQuotes46> style='vertical-align:top'><newline46mondego><td><input type=<doubleQuotes46>checkbox<doubleQuotes46> value=<doubleQuotes46><%=rs1.getString(1)%><doubleQuotes46> <%if((rs1.getString(1).equals(topic))){%> CHECKED name=<doubleQuotes46>top<doubleQuotes46> <%}else{%> name=<doubleQuotes46>topic<doubleQuotes46> <%rs2.previous();%> <%}%>></td><newline46mondego><td><%=rs1.getString(1)%></td><newline46mondego></tr><newline46mondego> <%}%><newline46mondego>"
"8016splitHere46","20259710splitHere46","//Pseudo Code <newline46mondego>BufferedImage bufferedImage=ImageIO.read(new File(imagePath));<newline46mondego>"
"8017splitHere46","20259710splitHere46","//ImageUtility is class that contain code for converting bufferedimage to string<newline46mondego> String traineeImage=ImageUtility.encodeToString(bufferedImage,format );<newline46mondego><newline46mondego> model.addAttribute(<doubleQuotes46>imagePath<doubleQuotes46>, traineeImage);<newline46mondego>}<newline46mondego><newline46mondego><newline46mondego>//ImageUtilty class -method<newline46mondego><newline46mondego> public static String encodeToString(BufferedImage image, String type) {<newline46mondego><newline46mondego>    String imageString=null;<newline46mondego>    String encodedImage=null;<newline46mondego>    ByteArrayOutputStream bos = new ByteArrayOutputStream();<newline46mondego><newline46mondego>    try {<newline46mondego><newline46mondego>        ImageIO.write(image, type, bos);<newline46mondego>        byte[] imageBytes = bos.toByteArray();<newline46mondego><newline46mondego><newline46mondego>        encodedImage=org.apache.commons.codec.binary.Base64.encodeBase64String(imageBytes);<newline46mondego><newline46mondego>        imageString = <doubleQuotes46>data:image/<doubleQuotes46>+type+<doubleQuotes46>;base64,<doubleQuotes46>+encodedImage;<newline46mondego><newline46mondego>        bos.close();<newline46mondego>    } catch (IOException e) {<newline46mondego>        e.printStackTrace();<newline46mondego>    }<newline46mondego>    return imageString;<newline46mondego>}<newline46mondego>"
"8018splitHere46","20259775splitHere46","Place(x)<newline46mondego><newline46mondego>  // Here x is the column number where you want to put the queen<newline46mondego>  if (x == board_size + 1):<newline46mondego>      print (array A)<newline46mondego>      return;<newline46mondego>  for y from 0 to board_size:<newline46mondego>       if (!underattack(A,x,y)) // A[x] = y => the queen is at row y in col x<newline46mondego>            A[x] = y<newline46mondego>            Place(x+1)<newline46mondego>  return;<newline46mondego>"
"8019splitHere46","20259781splitHere46","for (int i = 0;i < nList.getLength(); i++) {<newline46mondego>    Node node = nList.item(i);<newline46mondego>    if (node.getNodeType() == Node.ELEMENT_NODE) {<newline46mondego>        System.out.println(<doubleQuotes46>node name: <doubleQuotes46> + node.getNodeName());<newline46mondego>    }<newline46mondego>}<newline46mondego>"
"8020splitHere46","20259781splitHere46","Text.isElementContentWhitespace"
"8021splitHere46","20259784splitHere46","new GameClient()"
"8022splitHere46","20259784splitHere46","public GameClient(IGameServer ss) throws RemoteException {<newline46mondego>"
"8023splitHere46","20259790splitHere46","class"
"8024splitHere46","20259790splitHere46","Class object=ClassName.class"
"8025splitHere46","20259790splitHere46","Class object=Class.forName('ClassName');"
"8026splitHere46","20259790splitHere46","synchronized (Singleton.class)"
"8027splitHere46","20259846splitHere46","PendingIntent pi = PendingIntent.getActivity(getApplicationContext(), 0, new Intent(getApplicationContext(), Player.class).setFlags(Intent.FLAG_ACTIVITY_CLEAR_TOP | Intent.FLAG_ACTIVITY_SINGLE_TOP), PendingIntent.FLAG_UPDATE_CURRENT);<newline46mondego>notification = new Notification();<newline46mondego>notification.tickerText = <doubleQuotes46>App Name<doubleQuotes46>;<newline46mondego>notification.icon = R.drawable.icon;<newline46mondego>notification.flags |= Notification.FLAG_ONGOING_EVENT;<newline46mondego>try {<newline46mondego>        notification.setLatestEventInfo(getApplicationContext(), <doubleQuotes46>App Name<doubleQuotes46>, <doubleQuotes46>AppName~ <doubleQuotes46>, pi);<newline46mondego>} catch (Exception e) {<newline46mondego><newline46mondego>        e.printStackTrace();<newline46mondego>}<newline46mondego>startForeground(01, notification);<newline46mondego>"
"8028splitHere46","20260016splitHere46","// I get the files on the directory I'm writing and the amount of files + 1<newline46mondego>File f = new File(myDirectory.toString());        <newline46mondego>File file[] = f.listFiles();<newline46mondego>int fileNumber = file.length+1;<newline46mondego><newline46mondego>// START THE RECORDER<newline46mondego>recorder = new MediaRecorder();<newline46mondego>recorder.setAudioSource(MediaRecorder.AudioSource.MIC);<newline46mondego>recorder.setOutputFormat(MediaRecorder.OutputFormat.THREE_GPP);<newline46mondego>recorder.setAudioEncoder(MediaRecorder.AudioEncoder.AMR_NB);<newline46mondego>recorder.setOutputFile(<newline46mondego>    String.format(Locale.US, <doubleQuotes46>%s%crecord-%08d.3pg<doubleQuotes46>,<newline46mondego>        myDirectory, File.separatorChar, fileNumber));<newline46mondego>try {<newline46mondego>    recorder.prepare();<newline46mondego>} catch(IOException e) {<newline46mondego>    Log.e(TAG, <doubleQuotes46>error while preparing recording<doubleQuotes46>, e);<newline46mondego>    // You might want to inform the user too, with a Toast<newline46mondego>    return;<newline46mondego>}<newline46mondego>recorder.start();<newline46mondego>"
"8029splitHere46","20260016splitHere46","recorder.stop();<newline46mondego>recorder.release();<newline46mondego>// Here comes all your code to inform Media scanner<newline46mondego>"
"8030splitHere46","20260016splitHere46","onCreate()"
"8031splitHere46","20260016splitHere46","insert"
"8032splitHere46","20260093splitHere46","order"
"8033splitHere46","20260208splitHere46","neo4-spatial"
"8034splitHere46","20260208splitHere46","<version>0.12-neo4j-2.0.0-SNAPSHOT</version><newline46mondego>"
"8035splitHere46","20260208splitHere46","<version>0.11-neo4j-1.9</version><newline46mondego>"
"8036splitHere46","20260290splitHere46","age"
"8037splitHere46","20260290splitHere46","List<Character>  age = new ArrayList<Character>();<newline46mondego>"
"8038splitHere46","20260290splitHere46","List<Character>  age;<newline46mondego>"
"8039splitHere46","20260290splitHere46","null.method()  //NullPointerException<newline46mondego>"
"8040splitHere46","20260750splitHere46","content-length"
"8041splitHere46","20260750splitHere46","public void checkURL(URL url) throws IOException {<newline46mondego>    HttpURLConnection conn = (HttpURLConnection) url.openConnection();<newline46mondego>    conn.setRequestMethod(<doubleQuotes46>GET<doubleQuotes46>);<newline46mondego>    System.out.println(String.format(<doubleQuotes46>Fetching %s ...<doubleQuotes46>, url));<newline46mondego>    try {<newline46mondego>        int responseCode = conn.getResponseCode();<newline46mondego>        if (responseCode == 200) {<newline46mondego>            System.out.println(String.format(<doubleQuotes46>Site is up, content length = %s<doubleQuotes46>, conn.getHeaderField(<doubleQuotes46>content-length<doubleQuotes46>)));<newline46mondego>        } else {<newline46mondego>            System.out.println(String.format(<doubleQuotes46>Site is up, but returns non-ok status = %d<doubleQuotes46>, responseCode));<newline46mondego>        }<newline46mondego>    } catch (java.net.UnknownHostException e) {<newline46mondego>        System.out.println(<doubleQuotes46>Site is down<doubleQuotes46>);<newline46mondego>    }<newline46mondego>}<newline46mondego>"
"8042splitHere46","20260773splitHere46","connection = (HttpURLConnection) url.openConnection();<newline46mondego>connection.setDoOutput(true);<newline46mondego>connection.setRequestProperty(<doubleQuotes46>Content-Type<doubleQuotes46>, <doubleQuotes46>text/xml<doubleQuotes46>);<newline46mondego>"
"8043splitHere46","20260907splitHere46","keyword += (string)"
"8044splitHere46","20260907splitHere46","StringBuilder"
"8045splitHere46","20260907splitHere46","public static String makeStringEqual(String str, String keyword) {<newline46mondego>    StringBuilder sb = new StringBuilder(<doubleQuotes46><doubleQuotes46>);<newline46mondego>    if (str.length() > keyword.length()) {<newline46mondego><newline46mondego>        int j = 0; // this tells you what is the current index for the keyword<newline46mondego>        for(int i=0;i<str.length();i++) {<newline46mondego>            if (str.charAt(i) == ' ') {<newline46mondego>                sb.append(' ');<newline46mondego>            } else {<newline46mondego>                sb.append(keyword.charAt(j));<newline46mondego><newline46mondego>                // when you use up a keyword's character, move on to the next char<newline46mondego>                j++;<newline46mondego><newline46mondego>                // make sure to loop back to the start when you're at the end<newline46mondego>                j %= keyword.length();<newline46mondego>            }<newline46mondego>        }<newline46mondego>    }<newline46mondego>    return sb.toString();<newline46mondego>}<newline46mondego>"
"8046splitHere46","20260909splitHere46","context.setInstallationDirectory(...)<newline46mondego>"
"8047splitHere46","20260909splitHere46","WinFileSystem.getProgramFilesDirectory()<newline46mondego>"
"8048splitHere46","20260909splitHere46","System.getProperty(<doubleQuotes46>user.home<doubleQuotes46>)<newline46mondego>"
"8049splitHere46","20261011splitHere46","for (int count=0; count<miles.length;count++)<newline46mondego> {<newline46mondego>    sum = sum + miles[count];<newline46mondego> }<newline46mondego>"
"8050splitHere46","20261011splitHere46","float average = (float)sum / miles.length;<newline46mondego>"
"8051splitHere46","20261025splitHere46","st[i].input();<newline46mondego>"
"8052splitHere46","20261025splitHere46","for(int i = 0; i<2; i++){<newline46mondego>        st[i] = new student();<newline46mondego>        st[i].input();<newline46mondego>    }<newline46mondego>"
"8053splitHere46","20261025splitHere46","for(int i = 0; i<2; i++){<newline46mondego>         st[i] = new student();<newline46mondego>         System.out.println(<doubleQuotes46>Enter your  Id <doubleQuotes46>);<newline46mondego>         st[i].setId(s.next());<newline46mondego>         System.out.println(<doubleQuotes46>Enter your  Name <doubleQuotes46>);<newline46mondego>         st[i].setName(s.next());<newline46mondego>         System.out.println(<doubleQuotes46>Enter your  gpa <doubleQuotes46>);<newline46mondego>         st[i].setGpa(s.next());<newline46mondego>    }<newline46mondego>"
"8054splitHere46","20261025splitHere46","import java.util.Scanner;<newline46mondego><newline46mondego>public class student {<newline46mondego><newline46mondego>    String name,id,gpa;<newline46mondego><newline46mondego>    public student(){<newline46mondego>        id   = new String();<newline46mondego>        name = new String();<newline46mondego>        gpa  = new String();<newline46mondego>    }<newline46mondego><newline46mondego>    public String getId() {<newline46mondego>        return id;<newline46mondego>    }<newline46mondego><newline46mondego>    public void setId(String d) {<newline46mondego>        id = d;<newline46mondego>    }<newline46mondego><newline46mondego>    public String getName() {<newline46mondego>        return name;<newline46mondego>    }<newline46mondego><newline46mondego>    public void setName(String n) {<newline46mondego>        name = n;<newline46mondego>    }<newline46mondego><newline46mondego>    public String getGpa() {<newline46mondego>        return gpa;<newline46mondego>    }<newline46mondego><newline46mondego>    public void setGpa(String g) {<newline46mondego>       gpa = g;<newline46mondego><newline46mondego>    }<newline46mondego><newline46mondego>    public static  void main(String[] args) {<newline46mondego>        Scanner s = new Scanner(System.in);<newline46mondego><newline46mondego>        System.out.println(<doubleQuotes46>Enter the Number of Students you want to store: <doubleQuotes46>);<newline46mondego>        int studentNumb = s.nextInt();<newline46mondego><newline46mondego>        student st []  = new student [studentNumb]; <newline46mondego>        for(int i = 0; i<studentNumb; i++){<newline46mondego>            st[i] = new student();<newline46mondego>            System.out.println(<doubleQuotes46>Enter your  Id <doubleQuotes46>);<newline46mondego>            st[i].setId(s.next());<newline46mondego>            System.out.println(<doubleQuotes46>Enter your  Name <doubleQuotes46>);<newline46mondego>            st[i].setName(s.next());<newline46mondego>            System.out.println(<doubleQuotes46>Enter your  gpa <doubleQuotes46>);<newline46mondego>            st[i].setGpa(s.next());<newline46mondego>        }<newline46mondego><newline46mondego>        System.out.println(<doubleQuotes46>Enter   Id to search<doubleQuotes46>);<newline46mondego>        String search=s.next();<newline46mondego>        boolean found = false ; <newline46mondego>        for( int i = 0; i< studentNumb; i++){<newline46mondego>            if(search.equalsIgnoreCase(st[i].getId())){<newline46mondego><newline46mondego>                System.out.println(<doubleQuotes46>***********************<doubleQuotes46>);  <newline46mondego>                System.out.println(<doubleQuotes46>id :   <doubleQuotes46> + st[i].getId());<newline46mondego>                System.out.println(<doubleQuotes46>***********************<doubleQuotes46>);  <newline46mondego>                System.out.println(<doubleQuotes46>name : <doubleQuotes46> + st[i].getName());<newline46mondego>                System.out.println(<doubleQuotes46>***********************<doubleQuotes46>);  <newline46mondego>                System.out.println(<doubleQuotes46>gpa : <doubleQuotes46> + st[i].getGpa()); <newline46mondego>                System.out.println(<doubleQuotes46>***********************\n\n<doubleQuotes46>);<newline46mondego>                found= true ;<newline46mondego>                break ;<newline46mondego>            }<newline46mondego>        }<newline46mondego>    }<newline46mondego>}<newline46mondego>"
"8055splitHere46","20261215splitHere46","AndroidThemeLoader loader = new AndroidThemeLoader(getBaseContext());<newline46mondego>Theme theme = new Theme(loader);<newline46mondego>Chunk chunk = theme.makeChunk(<doubleQuotes46>test#subtest<doubleQuotes46>);<newline46mondego>chunk.set(<doubleQuotes46>name<doubleQuotes46>, <doubleQuotes46>Dennis<doubleQuotes46>);<newline46mondego>String html = chunk.toString();<newline46mondego>String mime = <doubleQuotes46>text/html<doubleQuotes46>;<newline46mondego>String encoding = <doubleQuotes46>utf-8<doubleQuotes46>;<newline46mondego>WebView myWebView = (WebView)this.findViewById(R.id.myWebView);<newline46mondego>myWebView.getSettings().setJavaScriptEnabled(true);<newline46mondego>String baseURL = null;<newline46mondego>myWebView.loadDataWithBaseURL(baseURL, html, mime, encoding, null);<newline46mondego>"
"8056splitHere46","20261308splitHere46","Button btn = new Button(getApplicationContext());<newline46mondego>"
"8057splitHere46","20261308splitHere46","Button btn = new Button(ActivityName.this);"
"8058splitHere46","20261308splitHere46","Button btn = new Button(this);<newline46mondego>"
"8059splitHere46","20261579splitHere46","Elements img = document.select(<doubleQuotes46>#curIcon img[src]<doubleQuotes46>);<newline46mondego>"
"8060splitHere46","20261579splitHere46","Element image = document.select(<doubleQuotes46>#curIcon img<doubleQuotes46>).first();<newline46mondego>String url = image.absUrl(<doubleQuotes46>src<doubleQuotes46>);<newline46mondego>"
"8061splitHere46","20261593splitHere46","WindowListener"
"8062splitHere46","20261593splitHere46","Workbench"
"8063splitHere46","20261593splitHere46","earlyStartup()"
"8064splitHere46","20261593splitHere46","IStartup"
"8065splitHere46","20261593splitHere46","public class StartupHook implements IStartup {<newline46mondego>    @Override<newline46mondego>    public void earlyStartup() { <newline46mondego>        IWorkbenchWindow window = PlatformUI.getWorkbench().getWorkbenchWindows()[0];<newline46mondego>        ISelectionListener projectListener = new ProjectSelectionListener();<newline46mondego>        window.getSelectionService().addSelectionListener(projectListener);<newline46mondego>    }<newline46mondego><newline46mondego>}<newline46mondego>"
"8066splitHere46","20261593splitHere46","PlatformUI.getWorkbench().getWorkbenchWindows()[0]"
"8067splitHere46","20261593splitHere46","getActiveWindow()"
"8068splitHere46","20261593splitHere46","Workbench"
"8069splitHere46","20261706splitHere46","application"
"8070splitHere46","20261706splitHere46","<meta-data android:name=<doubleQuotes46>com.google.android.gms.version<doubleQuotes46> android:value=<doubleQuotes46>@integer/google_play_services_version<doubleQuotes46> /><newline46mondego>"
"8071splitHere46","20261706splitHere46","com.google.android.maps.v2.API_KEY"
"8072splitHere46","20261706splitHere46","application"
"8073splitHere46","20261721splitHere46","<bean id=<doubleQuotes46>applicationContextProvider<doubleQuotes46> class=<doubleQuotes46>dell.harmony.service.ApplicationContextProvider<doubleQuotes46>></bean> <newline46mondego>"
"8074splitHere46","20261721splitHere46","package dell.harmony.service;<newline46mondego><newline46mondego>import org.apache.log4j.Logger;<newline46mondego>import org.springframework.beans.BeansException;<newline46mondego>import org.springframework.context.ApplicationContext;<newline46mondego>import org.springframework.context.ApplicationContextAware;<newline46mondego>import org.springframework.context.support.ClassPathXmlApplicationContext;<newline46mondego><newline46mondego><newline46mondego>/*<newline46mondego> * <newline46mondego> * Utility Class to return the Spring ApplicationContext<newline46mondego> * <newline46mondego> * <newline46mondego> */<newline46mondego>public class ApplicationContextProvider implements ApplicationContextAware {<newline46mondego><newline46mondego>    private static Logger logger = Logger.getLogger(ApplicationContextProvider.class);<newline46mondego><newline46mondego>    private static ApplicationContext ctx;<newline46mondego><newline46mondego>    @Override<newline46mondego>    public void setApplicationContext(ApplicationContext arg0)<newline46mondego>            throws BeansException {<newline46mondego>        if (arg0 != null) {<newline46mondego>            ctx=arg0;<newline46mondego>        }<newline46mondego>    }<newline46mondego><newline46mondego>    public synchronized static ApplicationContext getApplicationContext(){<newline46mondego>        if (ctx==null) {<newline46mondego>            logger.info(<doubleQuotes46>Getting the context again as it is null<doubleQuotes46>);<newline46mondego>            ctx = new ClassPathXmlApplicationContext(<doubleQuotes46>SpringModule.xml<doubleQuotes46>);<newline46mondego>        }<newline46mondego>        return ctx;<newline46mondego>    }<newline46mondego><newline46mondego>}<newline46mondego>"
"8075splitHere46","20261721splitHere46","logger.info(<doubleQuotes46>Spring Application Context !!<doubleQuotes46>);<newline46mondego>ApplicationContext context = new ClassPathXmlApplicationContext(<doubleQuotes46>/SpringModule.xml<doubleQuotes46>);<newline46mondego>logger.info(<doubleQuotes46>Spring Application Context - End !!<doubleQuotes46>);<newline46mondego>"
"8076splitHere46","20261721splitHere46","ApplicationContext context = ApplicationContextProvider.getApplicationContext(); <newline46mondego>SingleDataLoader dl = (SingleDataLoader) context.getBean(<doubleQuotes46>singledataloaderdao<doubleQuotes46>);<newline46mondego>"
"8077splitHere46","20261826splitHere46","tmp/Jetty_0_0_0_0_50090_secondary__y6aanv (Is a directory) at org.apache.hadoop.mapred.LocalJobRunner$Job.run(LocalJobRunner.java:354) Caused by: java.io.FileNotFoundException: /tmp/Jetty_0_0_0_0_50090_secondary__y6aanv"
"8078splitHere46","20261826splitHere46","Jetty_0_0_0_0_50090_secondary__y6aanv"
"8079splitHere46","20261829splitHere46","public class MainActivity extends Activity {<newline46mondego>    @Override<newline46mondego>    protected void onCreate(Bundle savedInstanceState) {<newline46mondego>        super.onCreate(savedInstanceState);<newline46mondego>        setContentView(new MyContainer(this));<newline46mondego><newline46mondego>    }<newline46mondego>}<newline46mondego><newline46mondego>public class MyContainer extends LinearLayout {<newline46mondego>  public MyContainer(Context context) {<newline46mondego>    addView(new CanvasView(context));<newline46mondego>    ImageView iv = new ImageView(context);<newline46mondego>    iv.setImageResource(R.drawable.wand);<newline46mondego>    addView(iv);<newline46mondego>  }<newline46mondego>}<newline46mondego>"
"8080splitHere46","20261829splitHere46","MyContainer"
"8081splitHere46","20261829splitHere46","CanvasView"
"8082splitHere46","20261829splitHere46","Context"
"8083splitHere46","20261829splitHere46","AttributeSet"
"8084splitHere46","20261865splitHere46","ClassLoader.getResourceAsStream(String)"
"8085splitHere46","20261865splitHere46","Class.getResourceAsStream"
"8086splitHere46","20261865splitHere46","public InputStream getResourceAsStream(String name) {<newline46mondego>    URL url = getResource(name);<newline46mondego>    try {<newline46mondego>        return url != null ? url.openStream() : null;<newline46mondego>    } catch (IOException e) {<newline46mondego>        return null;<newline46mondego>    }<newline46mondego>}<newline46mondego>"
"8087splitHere46","20261865splitHere46","IOException"
"8088splitHere46","20261865splitHere46","null"
"8089splitHere46","20261865splitHere46","ClassLoader"
"8090splitHere46","20261865splitHere46","NullPointerException"
"8091splitHere46","20261904splitHere46","<util:properties id=<doubleQuotes46>props<doubleQuotes46>><newline46mondego>   <prop key=<doubleQuotes46>foo<doubleQuotes46>>map</prop><newline46mondego></util:properties><newline46mondego><newline46mondego><bean id=<doubleQuotes46>b1<doubleQuotes46> class=<doubleQuotes46>test.B1<doubleQuotes46>><newline46mondego>   <property name=<doubleQuotes46>props<doubleQuotes46> ref=<doubleQuotes46>props<doubleQuotes46> /><newline46mondego></bean><newline46mondego><newline46mondego>...<newline46mondego><newline46mondego>public class B1 {<newline46mondego>    Properties props;<newline46mondego><newline46mondego>    public void setProps(Poperties props) {<newline46mondego>        this.props = props;<newline46mondego>    }<newline46mondego>...<newline46mondego>"
"8092splitHere46","20262051splitHere46","new FileOutputStream(file, true)<newline46mondego>"
"8093splitHere46","20262051splitHere46","ObjectOutputStream"
"8094splitHere46","20262051splitHere46","ObjectOutputStream"
"8095splitHere46","20262051splitHere46","DataOutputStream"
"8096splitHere46","20262051splitHere46","public void writeSelling(List<String> wordList) throws IOException {<newline46mondego>    fileOutPutStream = new FileOutputStream (file,true);<newline46mondego>    DataOutputStream write =new DataOutputStream(fileOutPutStream);<newline46mondego>    for (String s : wordList){<newline46mondego>        d.writeUTF(s);<newline46mondego>    }<newline46mondego>    write.close();<newline46mondego>}<newline46mondego>"
"8097splitHere46","20262139splitHere46","String s = <doubleQuotes46>ABCDEF<doubleQuotes46>;"
"8098splitHere46","20262139splitHere46","String s = <doubleQuotes46>ABC<doubleQuotes46>;<newline46mondego>    StringBuilder sb = new StringBuilder(s);<newline46mondego>    sb.append(<doubleQuotes46>DEF<doubleQuotes46>);<newline46mondego>    s = sb.toString();<newline46mondego>"
"8099splitHere46","20262218splitHere46","before:*"
"8100splitHere46","20262218splitHere46","public static void contributeRequestHandler(OrderedConfiguration<RequestFilter> config) {<newline46mondego>   config.addInstance(MyRequestFilter.class, <doubleQuotes46>before:*<doubleQuotes46>);<newline46mondego>}<newline46mondego>"
"8101splitHere46","20262540splitHere46","<doubleQuotes46>01234<doubleQuotes46>"
"8102splitHere46","20262540splitHere46","answer = 0<newline46mondego><newline46mondego>factor = 1<newline46mondego>answer = answer + (4 * 1) = 0 + 4 = 4;<newline46mondego><newline46mondego>factor = 10;<newline46mondego>answer = answer + (3 * 10) = 4 + 30 = 34;<newline46mondego><newline46mondego>factor = 100;<newline46mondego>answer = answer + (2 * 100) = 34 + 200 = 234;<newline46mondego><newline46mondego>factor = 1000;<newline46mondego>answer = answer + (1 * 1000) = 234 + 1000 = 1234;<newline46mondego><newline46mondego>factor = 1000;<newline46mondego>answer = answer + (0 * 10000) = 1234 + 0 = 1234;<newline46mondego>"
"8103splitHere46","20262543splitHere46","conf.setOutputKeyClass(Text.class)"
"8104splitHere46","20262543splitHere46","conf.setOutputKeyClass(DoubleWrtable.class)"
"8105splitHere46","20262634splitHere46","DateTime dt = new DateTime( rs.getTimeStamp( your_column_index ).getTime() );<newline46mondego>"
"8106splitHere46","20262634splitHere46","DateTime dt = new DateTime( rs.getDate( your_column_index ).getTime() );<newline46mondego>"
"8107splitHere46","20262696splitHere46","setTickUnit"
"8108splitHere46","20262696splitHere46","setTickMarkInsideLength"
"8109splitHere46","20262696splitHere46","rangeAxis.setTickUnit(new NumberTickUnit(1500));<newline46mondego>rangeAxis.setTickMarksVisible(true); <newline46mondego>rangeAxis.setTickMarkInsideLength(3f);<newline46mondego>"
"8110splitHere46","20262705splitHere46","java -Djava.net.preferIPv6Addresses=true ... com.example.MainClass <args><newline46mondego>"
"8111splitHere46","20262705splitHere46","System.setProperty(<doubleQuotes46>java.net.preferIPv6Addresses<doubleQuotes46>, <doubleQuotes46>true<doubleQuotes46>);<newline46mondego>"
"8112splitHere46","20262705splitHere46","JAVA_OPTS"
"8113splitHere46","20262705splitHere46","java.exe"
"8114splitHere46","20262705splitHere46","javaw.exe"
"8115splitHere46","20262705splitHere46","$JAVA_OPTS"
"8116splitHere46","20262705splitHere46","_JAVA_OPTIONS"
"8117splitHere46","20262839splitHere46","void eat(Fish f)"
"8118splitHere46","20262839splitHere46","Collections.sort()"
"8119splitHere46","20262842splitHere46","private"
"8120splitHere46","20262842splitHere46","setupGui()"
"8121splitHere46","20262842splitHere46","boolean initialized"
"8122splitHere46","20262842splitHere46","createAddButton()"
"8123splitHere46","20262842splitHere46","static"
"8124splitHere46","20263038splitHere46","return"
"8125splitHere46","20263038splitHere46","return"
"8126splitHere46","20263038splitHere46","case 1:<newline46mondego>    String newName = input.next();<newline46mondego>    studentNamesArray[studentChoice] = newName;<newline46mondego>    return;  //exits this method<newline46mondego>  //break; <-- not needed after a return!<newline46mondego>"
"8127splitHere46","20263129splitHere46","invalid int: <doubleQuotes46>192000 <doubleQuotes46><newline46mondego>"
"8128splitHere46","20263129splitHere46","Integer.parseInt(result);<newline46mondego>"
"8129splitHere46","20263129splitHere46","/* replace XXXX by the name of the<newline46mondego>   class that holds method `ReadCPUMhz()`<newline46mondego>*/<newline46mondego>XXX instance = new XXX(); // supposing class XXX has such a constructor<newline46mondego>String result = instance.ReadCPUMhz().trim(); // removes leading & trailing spaces<newline46mondego>int kHzValue = Integer.parseInt(result); // result in kHz<newline46mondego>int MHzResult = kHzValue / 1000; // result in MHz<newline46mondego>"
"8130splitHere46","20263147splitHere46","JMenuBar"
"8131splitHere46","20263147splitHere46","menuBar.setOpaque(true);<newline46mondego>"
"8132splitHere46","20263147splitHere46","JMenuBar"
"8133splitHere46","20263147splitHere46","JDesktopPane"
"8134splitHere46","20263147splitHere46","JDesktopPane"
"8135splitHere46","20263147splitHere46","JInternalFrame"
"8136splitHere46","20263147splitHere46","JMenuBar"
"8137splitHere46","20263147splitHere46","LayoutManager"
"8138splitHere46","20263147splitHere46","desktop = new JDesktopPane();<newline46mondego>JPanel basePanel = new JPanel(new BorderLayout());<newline46mondego>basePanel.add(desktop, BorderLayout.CENTER);<newline46mondego>basePanel.add(new OptionsBar(...), BorderLayout.PAGE_START);<newline46mondego>getContentPane().add(basePanel);<newline46mondego>"
"8139splitHere46","20263147splitHere46","JPanel"
"8140splitHere46","20263147splitHere46","JMenuBar"
"8141splitHere46","20263147splitHere46","JMenuBar"
"8142splitHere46","20263147splitHere46","LayoutManager"
"8143splitHere46","20263147splitHere46","JPanel"
"8144splitHere46","20263147splitHere46","getSize(...)"
"8145splitHere46","20263147splitHere46","OptionsBar"
"8146splitHere46","20263147splitHere46","IllegalArgumentException"
"8147splitHere46","20263151splitHere46","if(isChecked)<newline46mondego>            {<newline46mondego>                System.out.println(<doubleQuotes46>Toggle Button Is On<doubleQuotes46>);<newline46mondego><newline46mondego>                SharedPreferences.Editor editor = preferences.edit();<newline46mondego>                editor.putBoolean(<doubleQuotes46>YES<doubleQuotes46>,  true); // value to store<newline46mondego>                editor.commit();<newline46mondego>                strBooleanValue=preferences.getBoolean(<doubleQuotes46>YES<doubleQuotes46>,true);<newline46mondego>                strToggleVlaue=String.valueOf(strBooleanValue);<newline46mondego>                System.out.println(<doubleQuotes46>Toggle Button Value Is =<doubleQuotes46> + strToggleVlaue);<newline46mondego><newline46mondego><newline46mondego>            }<newline46mondego> else<newline46mondego>        {<newline46mondego><newline46mondego>                System.out.println(<doubleQuotes46>Toggle Button Is Off<doubleQuotes46>);<newline46mondego>                SharedPreferences.Editor editor = preferences.edit();<newline46mondego>                editor.putBoolean(<doubleQuotes46>NO<doubleQuotes46>,  false); // value to store<newline46mondego>                editor.commit();<newline46mondego>                strBooleanValue=preferences.getBoolean(<doubleQuotes46>NO<doubleQuotes46>, false);<newline46mondego>                strToggleVlaue=String.valueOf(strBooleanValue);<newline46mondego>                System.out.println(<doubleQuotes46>Toggle Button Value Is =<doubleQuotes46> + strToggleVlaue);<newline46mondego><newline46mondego><newline46mondego>        }<newline46mondego>"
"8148splitHere46","20263213splitHere46","class Validator extends AbstractValidator {<newline46mondego><newline46mondego>LegacyObject o;<newline46mondego><newline46mondego>@Override<newline46mondego>void validate(){<newline46mondego> //validate legacy class object<newline46mondego>} <newline46mondego>"
"8149splitHere46","20263270splitHere46","public class Main extends Activity {<newline46mondego><newline46mondego>Context ctx;<newline46mondego>RelativeLayout rlayMainContainer;<newline46mondego><newline46mondego>@Override<newline46mondego>protected void onCreate(Bundle savedInstanceState) {<newline46mondego>    // TODO Auto-generated method stub<newline46mondego>    super.onCreate(savedInstanceState);<newline46mondego>    setContentView(R.layout.activity_main);<newline46mondego>    ctx = this;<newline46mondego><newline46mondego>    rlayMainContainer = (RelativeLayout) findViewById(R.id.mainContainer);<newline46mondego>    Button one = (Button) findViewById(R.id.tvOne);<newline46mondego>    Button three = (Button) findViewById(R.id.tvThree);<newline46mondego><newline46mondego><newline46mondego>    // adding button two dynamically<newline46mondego>    Button two = new Button(ctx);<newline46mondego>    two.setText(<doubleQuotes46>hello<doubleQuotes46>);<newline46mondego>    two.setId(12);<newline46mondego><newline46mondego>    RelativeLayout.LayoutParams lpSecond = new RelativeLayout.LayoutParams(<newline46mondego>            LayoutParams.WRAP_CONTENT, LayoutParams.WRAP_CONTENT);<newline46mondego>    lpSecond.addRule(RelativeLayout.CENTER_HORIZONTAL);<newline46mondego>    lpSecond.addRule(RelativeLayout.BELOW, one.getId());<newline46mondego><newline46mondego>    rlayMainContainer.addView(two, lpSecond);<newline46mondego><newline46mondego>    //align button three below button two<newline46mondego><newline46mondego>    RelativeLayout.LayoutParams params = (RelativeLayout.LayoutParams) three<newline46mondego>            .getLayoutParams();<newline46mondego><newline46mondego>    params.addRule(RelativeLayout.BELOW, two.getId());<newline46mondego><newline46mondego>    three.setLayoutParams(params);<newline46mondego><newline46mondego>}<newline46mondego>"
"8150splitHere46","20263306splitHere46","JDialog.setDefaultCloseOperation(JDialog.DISPOSE_ON_CLOSE);<newline46mondego>"
"8151splitHere46","20263506splitHere46","Version_36"
"8152splitHere46","20263506splitHere46","QueryParser qParser = new QueryParser(Version.LUCENE_36,<doubleQuotes46>file_name<doubleQuotes46>,new StandardAnalyzer(Version.LUCENE_36));<newline46mondego>Query query = qParser.parse(filename);<newline46mondego>"
"8153splitHere46","20263723splitHere46","DefaultUri"
"8154splitHere46","20263723splitHere46","createDefaultUri"
"8155splitHere46","20263723splitHere46","myclass"
"8156splitHere46","20263723splitHere46","MyClass"
"8157splitHere46","20263723splitHere46","class abstract Myclass {<newline46mondego> public String getUri(){<newline46mondego>    // create a new instance of DefaultUri<newline46mondego>    DefaultUri defaultUri = createDefaultUri();<newline46mondego>    return <doubleQuotes46>test<doubleQuotes46><newline46mondego> }<newline46mondego><newline46mondego> protected abstract DefaultUri createDefaultUri();<newline46mondego>}<newline46mondego>"
"8158splitHere46","20263723splitHere46","Myclass"
"8159splitHere46","20263723splitHere46","createDefaultUri"
"8160splitHere46","20263723splitHere46","DefaultUri"
"8161splitHere46","20263723splitHere46","lookup-method"
"8162splitHere46","20263723splitHere46","Myclass"
"8163splitHere46","20263723splitHere46","<bean id=<doubleQuotes46>defaultUri<doubleQuotes46> scope=<doubleQuotes46>prototype<doubleQuotes46> class=<doubleQuotes46>DefaultUri<doubleQuotes46>><newline46mondego></bean><newline46mondego><newline46mondego><bean id=<doubleQuotes46>myBean<doubleQuotes46> class=<doubleQuotes46>com.myclass<doubleQuotes46><newline46mondego>        <lookup-method name=<doubleQuotes46>createDefaultUri<doubleQuotes46> bean=<doubleQuotes46>defaultUri<doubleQuotes46> /><newline46mondego></bean><newline46mondego>"
"8164splitHere46","20263897splitHere46","String accNo = idriver.findElement(By.id(<doubleQuotes46>TxtVAcc<doubleQuotes46>)).getAttribute(<doubleQuotes46>value<doubleQuotes46>);<newline46mondego>idriver.findElement(By.id(<doubleQuotes46>ctl00_CP1_UcAddEditAppointments1_txtAccNumber<doubleQuotes46>)).sendKeys(accNo);<newline46mondego>"
"8165splitHere46","20263911splitHere46","while"
"8166splitHere46","20263911splitHere46","while(!checkPrime(input)) {       <newline46mondego>    System.out.println(<doubleQuotes46>Please enter a prime number: <doubleQuotes46>);<newline46mondego>    input = keyboard.nextInt();<newline46mondego>}<newline46mondego>"
"8167splitHere46","20263911splitHere46","checkPrime"
"8168splitHere46","20263911splitHere46","n"
"8169splitHere46","20263969splitHere46","Content-Length"
"8170splitHere46","20263969splitHere46","Content-Length"
"8171splitHere46","20264017splitHere46","StringBuilder sb = new StringBuilder();<newline46mondego>sb.append(type);<newline46mondego>addStringParameter(sb, <doubleQuotes46>filename<doubleQuotes46>, fileName);<newline46mondego>addDateParameter(sb, <doubleQuotes46>creation-date<doubleQuotes46>, creationDate);<newline46mondego>addDateParameter(sb, <doubleQuotes46>modification-date<doubleQuotes46>, modificationDate);<newline46mondego>addDateParameter(sb, <doubleQuotes46>read-date<doubleQuotes46>, readDate);<newline46mondego>addLongParameter(sb, <doubleQuotes46>size<doubleQuotes46>, size);<newline46mondego>return sb;<newline46mondego>"
"8172splitHere46","20264120splitHere46","<uses-permission android:name=<doubleQuotes46>android.permission.INTERNET<doubleQuotes46> /><newline46mondego>"
"8173splitHere46","20264153splitHere46","Layout"
"8174splitHere46","20264153splitHere46","JFrame"
"8175splitHere46","20264153splitHere46","JPanel"
"8176splitHere46","20264254splitHere46","O(1)"
"8177splitHere46","20264254splitHere46","String"
"8178splitHere46","20264254splitHere46","public int length() {<newline46mondego>    return count;<newline46mondego>}<newline46mondego>"
"8179splitHere46","20264300splitHere46","ArrayList<Contact> _ArrayList = new ArrayList<Contact>(); // Contact should be without double quotes.<newline46mondego>"
"8180splitHere46","20264300splitHere46","List#get(index)"
"8181splitHere46","20264300splitHere46","ArrayList.get(0).setStatus(2); // Change the status of the element at index 0<newline46mondego>"
"8182splitHere46","20264370splitHere46","Calendar"
"8183splitHere46","20264370splitHere46","Date"
"8184splitHere46","20264463splitHere46","<doubleQuotes46>://www.<doubleQuotes46>"
"8185splitHere46","20264463splitHere46","String"
"8186splitHere46","20264463splitHere46","String.replace"
"8187splitHere46","20264463splitHere46","String.replaceAll"
"8188splitHere46","20264463splitHere46","Pattern"
"8189splitHere46","20264463splitHere46","Matcher"
"8190splitHere46","20264463splitHere46","Pattern.compile(<doubleQuotes46>://www.<doubleQuotes46>, Pattern.LITERAL)"
"8191splitHere46","20264463splitHere46","replaceAll"
"8192splitHere46","20264463splitHere46","String"
"8193splitHere46","20264463splitHere46","StringBuilder"
"8194splitHere46","20264463splitHere46","Matcher"
"8195splitHere46","20264463splitHere46","StringBuffer"
"8196splitHere46","20264463splitHere46","static String replace(String source)<newline46mondego>{// the pattern would be better off being re-usable stored in a static field<newline46mondego>  final Pattern pattern = Pattern.compile(<doubleQuotes46>://www.<doubleQuotes46>, Pattern.LITERAL);<newline46mondego>  final Matcher m = pattern.matcher(source);<newline46mondego>  boolean result = m.find();<newline46mondego>  if (result) {<newline46mondego>      StringBuilder sb = new StringBuilder(source.length()+16);<newline46mondego>      int p=0;<newline46mondego>      do {<newline46mondego>        sb.append(source, p, m.start()).append(<doubleQuotes46>://www-x1.<doubleQuotes46>);<newline46mondego>        p=m.end();<newline46mondego>      } while (m.find());<newline46mondego>      sb.append(source, p, source.length());<newline46mondego>      return sb.toString();<newline46mondego>  }<newline46mondego>  return source;<newline46mondego>}<newline46mondego>"
"8197splitHere46","20264535splitHere46","static <X, Y extends X> boolean method(X a, Y b)<newline46mondego>"
"8198splitHere46","20264557splitHere46","table = new JTable( model );<newline46mondego>"
"8199splitHere46","20264557splitHere46","table.setModel(model);<newline46mondego>"
"8200splitHere46","20264582splitHere46","new ArrayList<String>();"
"8201splitHere46","20264582splitHere46","openAndQueryDatabase"
"8202splitHere46","20264582splitHere46","private void openAndQueryDatabase() {<newline46mondego>   results = new ArrayList<String>();<newline46mondego>}<newline46mondego>"
"8203splitHere46","20264807splitHere46","Bindings"
"8204splitHere46","20264807splitHere46","button.disableProperty().bind(<newline46mondego>    Bindings.and(<newline46mondego>        textField.textProperty().isEqualTo(<doubleQuotes46><doubleQuotes46>),<newline46mondego>        textField2.textProperty().isEqualTo(<doubleQuotes46><doubleQuotes46>)));<newline46mondego>"
"8205splitHere46","20264822splitHere46","test"
"8206splitHere46","20264822splitHere46","s:if"
"8207splitHere46","20264822splitHere46","%{}"
"8208splitHere46","20264822splitHere46","version"
"8209splitHere46","20264822splitHere46","valueStack"
"8210splitHere46","20264822splitHere46","top"
"8211splitHere46","20264822splitHere46","valueStack"
"8212splitHere46","20264822splitHere46","version"
"8213splitHere46","20264822splitHere46","getVersion()"
"8214splitHere46","20264822splitHere46","version"
"8215splitHere46","20264822splitHere46","valueStack"
"8216splitHere46","20264822splitHere46","version"
"8217splitHere46","20264892splitHere46","public void setCurrentItem (int item, boolean smoothScroll) {<newline46mondego>    viewPager.setCurrentItem(item, smoothScroll);<newline46mondego>}<newline46mondego>"
"8218splitHere46","20264892splitHere46","((MainActivity)getActivity()).setCurrentItem (1, true);<newline46mondego>"
"8219splitHere46","20264930splitHere46","shift"
"8220splitHere46","20264930splitHere46","public Coordinate shift(int dx, int dy) {<newline46mondego>     pos = pos.shift(this.x + dx, this.y + dy);<newline46mondego> }<newline46mondego>"
"8221splitHere46","20264930splitHere46","shift"
"8222splitHere46","20264930splitHere46","Coordinate"
"8223splitHere46","20264930splitHere46","pos"
"8224splitHere46","20264930splitHere46","Coordinate"
"8225splitHere46","20264930splitHere46","public Coordinate shift(int dx, int dy) {<newline46mondego>     return new Coordinate(this.x + dx, this.y + dy);<newline46mondego> }<newline46mondego>"
"8226splitHere46","20264930splitHere46","Coordinate"
"8227splitHere46","20264930splitHere46","Coordinate"
"8228splitHere46","20264930splitHere46","Method checkBoundaries(int xSize, int ySize)"
"8229splitHere46","20264930splitHere46","||"
"8230splitHere46","20264930splitHere46","public boolean checkBoundaries(int xSize, int ySize) {<newline46mondego>     boolean check;<newline46mondego>     if ((xSize==0 || xSize ==1 || xSize ==2) && (ySize==0 || ySize ==1 || ySize ==2)) {<newline46mondego>         check = true;<newline46mondego>     } else {<newline46mondego>         check = false;<newline46mondego>     }<newline46mondego> return check;<newline46mondego> }<newline46mondego>"
"8231splitHere46","20265048splitHere46","public class Test012 {<newline46mondego><newline46mondego>    public static void main(String[] args) throws Exception {<newline46mondego>        System.out.println( seconds() );<newline46mondego>        System.out.println( seconds2() );<newline46mondego>        System.out.println( days3() );<newline46mondego>    }<newline46mondego><newline46mondego>    public static long seconds() throws Exception {<newline46mondego>        java.text.SimpleDateFormat sdf = new java.text.SimpleDateFormat(<doubleQuotes46>yyyy-MM-dd<doubleQuotes46>);<newline46mondego>        java.util.Date d1 = sdf.parse(<doubleQuotes46>1986-04-08<doubleQuotes46>);<newline46mondego>        java.util.Date d2 = sdf.parse(<doubleQuotes46>2013-11-28<doubleQuotes46>);<newline46mondego>        return ( d2.getTime() - d1.getTime() ) / 1000;<newline46mondego>    }<newline46mondego><newline46mondego>    public static long seconds2() throws Exception {<newline46mondego>        java.text.SimpleDateFormat sdf = new java.text.SimpleDateFormat(<doubleQuotes46>yyyy-MM-dd<doubleQuotes46>);<newline46mondego>        java.util.Date d1 = sdf.parse(<doubleQuotes46>1986-04-08<doubleQuotes46>);<newline46mondego>        java.util.Date d2 = new java.util.Date();<newline46mondego>        return ( d2.getTime() - d1.getTime() ) / 1000;<newline46mondego>    }<newline46mondego><newline46mondego>    public static long days3() throws Exception {<newline46mondego>        java.text.SimpleDateFormat sdf = new java.text.SimpleDateFormat(<doubleQuotes46>yyyy-MM-dd<doubleQuotes46>);<newline46mondego>        java.util.Date d1 = sdf.parse(<doubleQuotes46>2008-01-01<doubleQuotes46>);<newline46mondego>        java.util.Date d2 = sdf.parse(<doubleQuotes46>2009-01-01<doubleQuotes46>);<newline46mondego>        return ( d2.getTime() - d1.getTime() ) / 1000 / 60 / 60 / 24;<newline46mondego>    }<newline46mondego><newline46mondego>}<newline46mondego>"
"8232splitHere46","20265048splitHere46","select datediff(ss, '4/8/1986', '11/28/2013')  --- US date format<newline46mondego>"
"8233splitHere46","20265090splitHere46","container.setMessageListener(this);<newline46mondego>"
"8234splitHere46","20265090splitHere46","container.setMessageListener(new customMessageListener());<newline46mondego>"
"8235splitHere46","20265090splitHere46","receiver.receive()"
"8236splitHere46","20265216splitHere46","javax.swing.plaf.basic.BasicComboBoxRenderer"
"8237splitHere46","20265216splitHere46","DefaultListCellRenderer"
"8238splitHere46","20265216splitHere46","class ComboBoxRenderer extends DefaultListCellRenderer"
"8239splitHere46","20265278splitHere46","Id:\s+?(\d).+?(?:group:|discontinued)\s(\w+?)\s<newline46mondego>"
"8240splitHere46","20265278splitHere46","1. Group 1: 0<newline46mondego>   Group 2: product<newline46mondego><newline46mondego>2. Group 1: 1<newline46mondego>   Group 2: Book<newline46mondego><newline46mondego>3. Group 1: 2<newline46mondego>   Group 2: Book<newline46mondego>"
"8241splitHere46","20265902splitHere46","@XmlRootElement(name = <doubleQuotes46>IGE<doubleQuotes46>)<newline46mondego>@XmlAccessorType(XmlAccessType.FIELD)<newline46mondego>@XmlType(name = <doubleQuotes46>IGE<doubleQuotes46>, propOrder = { <doubleQuotes46>altin<doubleQuotes46> })<newline46mondego>public class IGEType {<newline46mondego><newline46mondego><newline46mondego>    @XmlElement(name = <doubleQuotes46>Altin<doubleQuotes46>, required = true)<newline46mondego>    public List<ALTINType> altin;<newline46mondego><newline46mondego>    public List<ALTINType> getALTIN() {<newline46mondego>        if (altin == null) {<newline46mondego>            altin = new ArrayList<ALTINType>();<newline46mondego>        }<newline46mondego>        return this.altin;<newline46mondego>    }<newline46mondego>}<newline46mondego>"
"8242splitHere46","20265902splitHere46","@XmlAccessorType(XmlAccessType.FIELD)<newline46mondego>@XmlType(name = <doubleQuotes46>altin<doubleQuotes46>, propOrder = { <doubleQuotes46>seanSytl<doubleQuotes46> })<newline46mondego>public class ALTINType {<newline46mondego><newline46mondego>    @XmlElement(name = <doubleQuotes46>SEANSytl<doubleQuotes46>, required = true)<newline46mondego>    protected SEANSytlType seanSytl;<newline46mondego><newline46mondego>}<newline46mondego>"
"8243splitHere46","20265902splitHere46","<!-- language: java -->      <newline46mondego>@XmlAccessorType(XmlAccessType.FIELD)<newline46mondego>@XmlType(name = <doubleQuotes46>SEANSytl<doubleQuotes46>, propOrder = { <doubleQuotes46>birim<doubleQuotes46>})<newline46mondego>public class SEANSytlType {<newline46mondego><newline46mondego>    @XmlElement(required = true)<newline46mondego>    protected String birim;<newline46mondego>}<newline46mondego>"
"8244splitHere46","20265902splitHere46","<!-- language: java --> <newline46mondego> public static void main(String[] args) {<newline46mondego>    // TODO Auto-generated method stub<newline46mondego>    try {<newline46mondego>        JAXBContext jaxbContext = JAXBContext.newInstance(IGEType.class);<newline46mondego><newline46mondego>        Unmarshaller jaxbUnmarshaller = jaxbContext.createUnmarshaller();<newline46mondego>        File XMLfile = new File(<doubleQuotes46>sample1.xml<doubleQuotes46>);<newline46mondego>        IGEType igeRoot = (IGEType) jaxbUnmarshaller.unmarshal(XMLfile);<newline46mondego><newline46mondego>        List<ALTINType> listAltinRoot = igeRoot.getALTIN();<newline46mondego><newline46mondego>        // here you ll be have error ///<newline46mondego>//            List<SEANSytlType> listofAltinYtl =  (List<SEANSytlType>)      listAltinRoot.get(0);<newline46mondego>//<newline46mondego>//            for (SEANSytlType altinYtl : listofAltinYtl) {<newline46mondego>//              System.out.println(altinYtl.birim);<newline46mondego>//            }<newline46mondego><newline46mondego>    } catch (JAXBException e) {<newline46mondego><newline46mondego>        e.printStackTrace();<newline46mondego>    }<newline46mondego>}<newline46mondego>"
"8245splitHere46","20265902splitHere46","<?xml version=<doubleQuotes46>1.0<doubleQuotes46> encoding=<doubleQuotes46>UTF-8<doubleQuotes46>?><newline46mondego><IGE><newline46mondego>    <Altin><newline46mondego>        <SEANSytl><newline46mondego>            <birim>cccc</birim><newline46mondego>        </SEANSytl><newline46mondego>    </Altin><newline46mondego>    <Altin><newline46mondego>            <SEANSytl><newline46mondego>            <birim>dddd</birim><newline46mondego>        </SEANSytl><newline46mondego>    </Altin><newline46mondego><newline46mondego></IGE><newline46mondego>"
"8246splitHere46","20265915splitHere46","setTransferHandler"
"8247splitHere46","20265915splitHere46","DropTarget"
"8248splitHere46","20265915splitHere46","TransferHandler"
"8249splitHere46","20265915splitHere46","DropTarget"
"8250splitHere46","20265915splitHere46","DropTarget"
"8251splitHere46","20265915splitHere46","TransferHandler"
"8252splitHere46","20265915splitHere46","jComponent.setTransferHandler(new MyTransferHandler());<newline46mondego>DropTarget original = jComponent.getDropTarget();// the Swing DropTarget<newline46mondego>MyDropTarget myDropTarget = new MyDropTarget();<newline46mondego>myDropTarget.addDropTargetListener(original);// delegate for original behavior<newline46mondego>jComponent.setDropTarget(myDropTarget);<newline46mondego>"
"8253splitHere46","20265943splitHere46","java -jar -jar selenium-server-standalone-2.20.0.jar -role hub<newline46mondego>"
"8254splitHere46","20265943splitHere46","java -jar lib/selenium-server-standalone-2.20.0.jar -role webdriver -hub http://localhost:4444/grid/register -browser browserName=<doubleQuotes46>chrome<doubleQuotes46>,version=ANY,platform=WINDOWS,maxInstances=5 -Dwebdriver.chrome.driver=lib\chromedriver.exe <newline46mondego>"
"8255splitHere46","20265943splitHere46","browser"
"8256splitHere46","20265943splitHere46","-D"
"8257splitHere46","20265955splitHere46","URL"
"8258splitHere46","20265955splitHere46","System.out.println(<doubleQuotes46>opening connection<doubleQuotes46>);<newline46mondego>URL url = new URL(<doubleQuotes46>http://upload.wikimedia.org/wikipedia/en/8/87/Example.JPG<doubleQuotes46>);<newline46mondego>InputStream in = url.openStream();<newline46mondego>FileOutputStream fos = new FileOutputStream(new File(<doubleQuotes46>yourFile.jpg<doubleQuotes46>));<newline46mondego><newline46mondego>System.out.println(<doubleQuotes46>reading file...<doubleQuotes46>);<newline46mondego>int length = -1;<newline46mondego>byte[] buffer = new byte[1024];// buffer for portion of data from<newline46mondego>                                // connection<newline46mondego>while ((length = in.read(buffer)) > -1) {<newline46mondego>    fos.write(buffer, 0, length);<newline46mondego>}<newline46mondego>fos.close();<newline46mondego>in.close();<newline46mondego>System.out.println(<doubleQuotes46>file was downloaded<doubleQuotes46>);<newline46mondego>"
"8259splitHere46","20266029splitHere46","dark rectangle"
"8260splitHere46","20266029splitHere46","Bitmap's"
"8261splitHere46","20266029splitHere46","Opacity"
"8262splitHere46","20266029splitHere46","xml"
"8263splitHere46","20266165splitHere46","BOM"
"8264splitHere46","20266165splitHere46","XML"
"8265splitHere46","20266165splitHere46","bytes"
"8266splitHere46","20266165splitHere46","String"
"8267splitHere46","20266165splitHere46","charset UTF-8"
"8268splitHere46","20266165splitHere46","String source = FileUtil.takeOffBOM(IOUtils.toInputStream(attachment.getValue()));<newline46mondego>"
"8269splitHere46","20266165splitHere46","public static String takeOffBOM(InputStream inputStream) throws IOException {<newline46mondego>    BOMInputStream bomInputStream = new BOMInputStream(inputStream);<newline46mondego>    return IOUtils.toString(bomInputStream, <doubleQuotes46>UTF-8<doubleQuotes46>);<newline46mondego>}<newline46mondego>"
"8270splitHere46","20266226splitHere46","String s =<newline46mondego>        <doubleQuotes46>IF (A=3 AND B=2)=0 AND IF(c=4 AND D=5)=1 AND (AGE>=15 AND AGE<=45)<doubleQuotes46>;<newline46mondego>    Pattern exprPattern = Pattern.compile(<doubleQuotes46>(IF\\s*\\(.*?\\)=[01]|\\(.*\\))<doubleQuotes46>);<newline46mondego>    Matcher m = exprPattern.matcher(s);<newline46mondego>    while (m.find()) {<newline46mondego>        System.out.println(<doubleQuotes46>* <doubleQuotes46> + m.group());<newline46mondego>    }<newline46mondego>"
"8271splitHere46","20266226splitHere46","(<newline46mondego>        IF\\s*\\(.*?\\)=[01]<newline46mondego>    |<newline46mondego>        \\(.*\\)<newline46mondego>    )<newline46mondego>"
"8272splitHere46","20266226splitHere46",".*?"
"8273splitHere46","20266251splitHere46","static public String getTimeStamp(){<newline46mondego><newline46mondego>        String timeFormat = <doubleQuotes46>HH.mm.ss.SSS <doubleQuotes46>;<newline46mondego>        Date now = new Date();<newline46mondego>        SimpleDateFormat sdf = new SimpleDateFormat(timeFormat);<newline46mondego>        return sdf.format(now).substring(timeFormat.length() - 4);         <newline46mondego>    }<newline46mondego>"
"8274splitHere46","20266251splitHere46","static public String getTimeStamp(){    <newline46mondego>        return <doubleQuotes46><doubleQuotes46> + System.currentTimeMillis()%1000);<newline46mondego>}<newline46mondego>"
"8275splitHere46","20266270splitHere46","JScrollPane"
"8276splitHere46","20266270splitHere46","MenuItem"
"8277splitHere46","20266270splitHere46","JScrollPane"
"8278splitHere46","20266270splitHere46","JPanel"
"8279splitHere46","20266270splitHere46","JScrollPane"
"8280splitHere46","20266270splitHere46","JPanel"
"8281splitHere46","20266270splitHere46","JButtons"
"8282splitHere46","20266270splitHere46","MenuItem"
"8283splitHere46","20266270splitHere46","JPanel"
"8284splitHere46","20266270splitHere46","revalidate()"
"8285splitHere46","20266270splitHere46","validate()/revalidate()"
"8286splitHere46","20266270splitHere46","JFrame"
"8287splitHere46","20266270splitHere46","revalidate()"
"8288splitHere46","20266270splitHere46","JButton"
"8289splitHere46","20266270splitHere46","repaint()"
"8290splitHere46","20266270splitHere46","class Question {<newline46mondego><newline46mondego>int count = 0;<newline46mondego>ArrayList<JTextField>[] jt;<newline46mondego>JPanel buttonPanel;;<newline46mondego>JScrollPane scrollPane;<newline46mondego><newline46mondego>public Question() {<newline46mondego>    final JFrame f = new JFrame();<newline46mondego>    f.setLayout(new BorderLayout());<newline46mondego>    f.setResizable(false);<newline46mondego>    f.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);<newline46mondego>    JMenuBar mnuBar = new JMenuBar();<newline46mondego><newline46mondego>    JMenu mnu1 = new JMenu(<doubleQuotes46>Ø«Ø¨Øª<doubleQuotes46>);<newline46mondego>    mnu1.setMnemonic(KeyEvent.VK_E);<newline46mondego><newline46mondego>    buttonPanel = new JPanel();<newline46mondego>    buttonPanel.setBorder(BorderFactory.createLineBorder(Color.red));<newline46mondego>    buttonPanel.setLayout(new BoxLayout(buttonPanel, 1));<newline46mondego><newline46mondego>    scrollPane  = new JScrollPane(buttonPanel);<newline46mondego>    f.getContentPane().add(scrollPane);<newline46mondego><newline46mondego>    JMenuItem menuItem = new JMenuItem(<doubleQuotes46>Insert Places<doubleQuotes46>, KeyEvent.VK_T);<newline46mondego>    menuItem.addActionListener(new ActionListener() {<newline46mondego><newline46mondego>        @Override<newline46mondego>        public void actionPerformed(ActionEvent arg0) {<newline46mondego><newline46mondego>            count = 0;<newline46mondego>            jt = new ArrayList[4];<newline46mondego>            for (int i = 0; i < 4; i++)<newline46mondego>                jt[i] = new ArrayList<JTextField>();<newline46mondego><newline46mondego><newline46mondego>           for (int i = 0; i < 100; i++) {<newline46mondego>                buttonPanel.add(new JButton(<doubleQuotes46>kjdh<doubleQuotes46>));<newline46mondego>           }<newline46mondego><newline46mondego>           buttonPanel.revalidate(); // calling revalidate <newline46mondego>           buttonPanel.repaint();// calling repaint<newline46mondego><newline46mondego>        }<newline46mondego>    });<newline46mondego><newline46mondego>    mnu1.add(menuItem);<newline46mondego>    mnuBar.add(mnu1);<newline46mondego>    f.setJMenuBar(mnuBar);<newline46mondego>    f.pack();<newline46mondego>    f.setExtendedState(JFrame.MAXIMIZED_BOTH);<newline46mondego>    f.setVisible(true);<newline46mondego>}<newline46mondego><newline46mondego>public static void main(String[] args) {<newline46mondego>    Runnable r = new Runnable() {<newline46mondego>        @Override<newline46mondego>        public void run() {<newline46mondego>            new Question();<newline46mondego>        }<newline46mondego>    };<newline46mondego>    SwingUtilities.invokeLater(r);<newline46mondego>} <newline46mondego>}<newline46mondego>"
"8291splitHere46","20266350splitHere46","index 0: [z=0,y=0,x=0]<newline46mondego>index 1: [z=0,y=0,x=1]<newline46mondego>index 2: [z=0,y=1,x=0]<newline46mondego>index 3: [z=0,y=1,x=1]<newline46mondego>index 4: [z=1,y=0,x=0]<newline46mondego>index 5: [z=1,y=0,x=1]<newline46mondego>index 6: [z=1,y=1,x=0]<newline46mondego>index 7: [z=1,y=1,x=1]<newline46mondego>"
"8292splitHere46","20266350splitHere46","z"
"8293splitHere46","20266350splitHere46","y"
"8294splitHere46","20266350splitHere46","x"
"8295splitHere46","20266350splitHere46","index = HEIGHT*WIDTH*z + WIDTH*y + x"
"8296splitHere46","20266350splitHere46","int z = 1, y=1, x=0;<newline46mondego>int index = HEIGHT*WIDTH*z + WIDTH*y;<newline46mondego>int data;<newline46mondego><newline46mondego>for(x=0;x<WIDTH;x++)<newline46mondego>{<newline46mondego>    Object obj = oneDArray[index+x];<newline46mondego>}<newline46mondego>"
"8297splitHere46","20266350splitHere46","oneDArray"
"8298splitHere46","20266426splitHere46","ClassCastException"
"8299splitHere46","20266426splitHere46","ClassLoader.getSystemClassLoader"
"8300splitHere46","20266426splitHere46","agentmain"
"8301splitHere46","20266426splitHere46","premain"
"8302splitHere46","20266542splitHere46","-Dinstall4j.suppressUnattendedReboot=true<newline46mondego>"
"8303splitHere46","20266619splitHere46","JFreeChart"
"8304splitHere46","20266619splitHere46","JSpinner"
"8305splitHere46","20266619splitHere46","ChartMouseListener"
"8306splitHere46","20266619splitHere46","XYItemLabelGenerator"
"8307splitHere46","20266619splitHere46","AbstractAction"
"8308splitHere46","20266619splitHere46","import java.awt.BorderLayout;<newline46mondego>import java.awt.Dimension;<newline46mondego>import java.awt.EventQueue;<newline46mondego>import java.awt.Rectangle;<newline46mondego>import javax.swing.JLabel;<newline46mondego>import javax.swing.JPanel;<newline46mondego>import javax.swing.JSpinner;<newline46mondego>import javax.swing.event.ChangeEvent;<newline46mondego>import javax.swing.event.ChangeListener;<newline46mondego>import org.jfree.chart.ChartFactory;<newline46mondego>import org.jfree.chart.ChartPanel;<newline46mondego>import org.jfree.chart.JFreeChart;<newline46mondego>import org.jfree.chart.plot.PlotOrientation;<newline46mondego>import org.jfree.chart.plot.XYPlot;<newline46mondego>import org.jfree.chart.renderer.xy.XYLineAndShapeRenderer;<newline46mondego>import org.jfree.data.function.Function2D;<newline46mondego>import org.jfree.data.function.PolynomialFunction2D;<newline46mondego>import org.jfree.data.general.DatasetUtilities;<newline46mondego>import org.jfree.data.xy.XYDataset;<newline46mondego>import org.jfree.ui.ApplicationFrame;<newline46mondego>import org.jfree.ui.RefineryUtilities;<newline46mondego><newline46mondego>/*<newline46mondego> * @see http://stackoverflow.com/a/20249795/230513<newline46mondego> * @see http://stackoverflow.com/a/20107935/230513<newline46mondego> * @see http://stackoverflow.com/q/20081801/230513<newline46mondego> */<newline46mondego>public class ParabolaDemo extends ApplicationFrame {<newline46mondego><newline46mondego>    private Integer value = Integer.valueOf(-1);<newline46mondego><newline46mondego>    public ParabolaDemo(final String title) {<newline46mondego>        super(title);<newline46mondego>        final JFreeChart chart = ChartFactory.createXYLineChart(<newline46mondego>            <doubleQuotes46>Parabola<doubleQuotes46>, <doubleQuotes46>X<doubleQuotes46>, <doubleQuotes46>Y<doubleQuotes46>, createDataset(value),<newline46mondego>            PlotOrientation.VERTICAL, true, true, false);<newline46mondego>        final XYPlot plot = (XYPlot) chart.getPlot();<newline46mondego>        XYLineAndShapeRenderer r = (XYLineAndShapeRenderer) plot.getRenderer();<newline46mondego>        r.setBaseShapesVisible(true);<newline46mondego>        r.setSeriesShape(0, new Rectangle(-6, -6, 12, 12));<newline46mondego>        final ChartPanel chartPanel = new ChartPanel(chart) {<newline46mondego><newline46mondego>            @Override<newline46mondego>            public Dimension getPreferredSize() {<newline46mondego>                return new Dimension(640, 480);<newline46mondego>            }<newline46mondego>        };<newline46mondego>        add(chartPanel, BorderLayout.CENTER);<newline46mondego>        JPanel p = new JPanel();<newline46mondego>        JSpinner s = new JSpinner();<newline46mondego>        s.setValue(value);<newline46mondego>        s.addChangeListener(new ChangeListener() {<newline46mondego><newline46mondego>            @Override<newline46mondego>            public void stateChanged(ChangeEvent e) {<newline46mondego>                JSpinner s = (JSpinner) e.getSource();<newline46mondego>                int v = ((Number) s.getValue()).intValue();<newline46mondego>                plot.setDataset(createDataset(v));<newline46mondego>            }<newline46mondego>        });<newline46mondego>        p.add(new JLabel(<doubleQuotes46>a<doubleQuotes46>));<newline46mondego>        p.add(s);<newline46mondego>        add(p, BorderLayout.SOUTH);<newline46mondego>    }<newline46mondego><newline46mondego>    private XYDataset createDataset(int a) {<newline46mondego>        double[] array = {0.0, 0.0, a};<newline46mondego>        Function2D p = new PolynomialFunction2D(array);<newline46mondego>        return DatasetUtilities.sampleFunction2D(<newline46mondego>            p, -20.0, 20.0, 20, <doubleQuotes46>y = <doubleQuotes46> + a + <doubleQuotes46>xÂ² {-20â€¦20}<doubleQuotes46>);<newline46mondego><newline46mondego>    }<newline46mondego><newline46mondego>    public static void main(final String[] args) {<newline46mondego>        EventQueue.invokeLater(new Runnable() {<newline46mondego><newline46mondego>            @Override<newline46mondego>            public void run() {<newline46mondego>                final ParabolaDemo demo = new ParabolaDemo(<doubleQuotes46>Parabola Demo<doubleQuotes46>);<newline46mondego>                demo.pack();<newline46mondego>                RefineryUtilities.centerFrameOnScreen(demo);<newline46mondego>                demo.setVisible(true);<newline46mondego>            }<newline46mondego>        });<newline46mondego>    }<newline46mondego>}<newline46mondego>"
"8309splitHere46","20266714splitHere46","protected"
"8310splitHere46","20266726splitHere46","equals"
"8311splitHere46","20266726splitHere46","Object"
"8312splitHere46","20266726splitHere46","@Override<newline46mondego>    public boolean equals(Object o){<newline46mondego>        Name n = (Name)o;<newline46mondego>        return n.first.equals(first) && n.last.equals(last);<newline46mondego>    }<newline46mondego>"
"8313splitHere46","20266726splitHere46","HashCodes equal: true<newline46mondego>Objects equal: true<newline46mondego>HashSet contains n1: true<newline46mondego>HashSet contains n2: true<newline46mondego>"
"8314splitHere46","20267074splitHere46","spring-web-x.x.x.jar"
"8315splitHere46","20267074splitHere46","<dependency><newline46mondego>    <groupId>org.springframework</groupId><newline46mondego>    <artifactId>spring-web</artifactId><newline46mondego>    <version>3.0.4.RELEASE</version><newline46mondego></dependency><newline46mondego>"
"8316splitHere46","20267096splitHere46","while (!list.isEmpty()) {<newline46mondego>  myType curr = list.poll();<newline46mondego>"
"8317splitHere46","20267096splitHere46","isEmpty()"
"8318splitHere46","20267096splitHere46","poll()"
"8319splitHere46","20267096splitHere46","myType curr;<newline46mondego>while ((curr = list.poll()) != null) {<newline46mondego>"
"8320splitHere46","20267096splitHere46","remove(0)"
"8321splitHere46","20267096splitHere46","IndexOutOfBoundsException"
"8322splitHere46","20267397splitHere46","params"
"8323splitHere46","20267397splitHere46","ParameterNameAware"
"8324splitHere46","20267397splitHere46","acceptableParameterName"
"8325splitHere46","20267581splitHere46","static {<newline46mondego>    try {<newline46mondego>        Class.forName(<doubleQuotes46>com.mysql.jdbc.Driver<doubleQuotes46>);<newline46mondego>    } catch (final ClassNotFoundException e) {<newline46mondego>        e.printStackTrace();<newline46mondego>    }<newline46mondego>}<newline46mondego>"
"8326splitHere46","20267900splitHere46","O(N * log M)<newline46mondego>"
"8327splitHere46","20267900splitHere46","N"
"8328splitHere46","20267900splitHere46","contains"
"8329splitHere46","20267900splitHere46","logM"
"8330splitHere46","20267949splitHere46","alpha"
"8331splitHere46","20267949splitHere46","Math.sin()"
"8332splitHere46","20267949splitHere46","Math.cos()"
"8333splitHere46","20267949splitHere46","sin"
"8334splitHere46","20267949splitHere46","cos"
"8335splitHere46","20267949splitHere46","y"
"8336splitHere46","20267949splitHere46","y"
"8337splitHere46","20267949splitHere46","double rads = (alpha * Math.PI) / 180F;<newline46mondego>x = (int) ((this.getWidth() / 2 - R / 2 ) + Math.round((R + 20) * Math.cos(rads)));<newline46mondego>y = (int) ((this.getHeight() / 2 - R / 2 ) - Math.round((R + 20) * Math.sin(rads)));<newline46mondego>"
"8338splitHere46","20267956splitHere46","public class Test {<newline46mondego>   public static void main(String[] args) {<newline46mondego>       if (true) {<newline46mondego>           int b = 0;<newline46mondego>       }<newline46mondego>   }<newline46mondego>}<newline46mondego>"
"8339splitHere46","20268047splitHere46","@Override<newline46mondego>public void paint(Graphics g) {<newline46mondego>    super.paint(g);<newline46mondego>    Graphics2D g2d = (Graphics2D) g;<newline46mondego><newline46mondego>    // assuming you want it behind everything else<newline46mondego>    // drawn to g2d after this point<newline46mondego>    g.drawImage(Background, 0, 0, null);<newline46mondego><newline46mondego>    DoAnimation();<newline46mondego>    if (bInGame) {<newline46mondego>        PlayGame(g2d);<newline46mondego>    } else {<newline46mondego>        ShowIntroScreen(g2d);<newline46mondego>    }<newline46mondego>    g.drawImage(ii, 5, 5, this);<newline46mondego>    Toolkit.getDefaultToolkit().sync();<newline46mondego>    g.dispose();<newline46mondego>}<newline46mondego>"
"8340splitHere46","20268115splitHere46","DataOutputStream.writeBytes"
"8341splitHere46","20268115splitHere46","writeUTF"
"8342splitHere46","20268115splitHere46","String"
"8343splitHere46","20268115splitHere46","OutputStream"
"8344splitHere46","20268115splitHere46","Writer w=new OutputStreamWriter(<newline46mondego>                  urlConnection.getOutputStream(), StandardCharsets.UTF_8);<newline46mondego>w.write(prepareData.toString());<newline46mondego>w.flush();<newline46mondego>w.close();<newline46mondego>"
"8345splitHere46","20268281splitHere46","route"
"8346splitHere46","20268281splitHere46","id"
"8347splitHere46","20268281splitHere46","route"
"8348splitHere46","20268322splitHere46","static int nameArrayCount, markArrayCount = 0;"
"8349splitHere46","20268322splitHere46","static void deleteStudent() {<newline46mondego>    System.out.println(<doubleQuotes46>Which student would you like to delete?<doubleQuotes46>);<newline46mondego>    for(int i=0;i<10;i++) {<newline46mondego>      System.out.println(i + <doubleQuotes46>: <doubleQuotes46> + studentNamesArray[i]);<newline46mondego>    }<newline46mondego>    int studentChoice = input.nextInt();<newline46mondego>    for(int i = studentChoice+1; i<studentNamesArray.length; i++) {<newline46mondego>      studentNamesArray[i-1] = studentNamesArray[i];<newline46mondego>    }<newline46mondego>    nameArrayCount = nameArrayCount -1;<newline46mondego>  }<newline46mondego>"
"8350splitHere46","20268340splitHere46","Location"
"8351splitHere46","20268340splitHere46","X"
"8352splitHere46","20268340splitHere46","Y"
"8353splitHere46","20268340splitHere46","Piece"
"8354splitHere46","20268340splitHere46","Chessboard.CanMoveToLocation(int startX, int startY, int endX, int endY) {<newline46mondego>    // Call validators with local field chessboard and given location objects<newline46mondego>}<newline46mondego>"
"8355splitHere46","20268340splitHere46","ValidationResult"
"8356splitHere46","20268380splitHere46","GetFloatArrayElements(..)"
"8357splitHere46","20268380splitHere46","ReleaseFloatArrayElements()"
"8358splitHere46","20268425splitHere46","java"
"8359splitHere46","20268529splitHere46","null"
"8360splitHere46","20268529splitHere46","for(int i = studentChoice+1; i<studentNamesArray.length; i++) {<newline46mondego>      studentNamesArray[i-1] = studentNamesArray[i];<newline46mondego>}<newline46mondego><newline46mondego>studentNamesArray[studentNamesArray.length - 1] = null;<newline46mondego>"
"8361splitHere46","20268529splitHere46","ArrayList"
"8362splitHere46","20268529splitHere46","toArray()"
"8363splitHere46","20268599splitHere46","ArrayList<StackFile> arrayFile = new ArrayList<StackFile>(); <newline46mondego>    arrayFile.add(new StackFile(<doubleQuotes46>2<doubleQuotes46>, <doubleQuotes46>Ramesh Tendulkar<doubleQuotes46>, <doubleQuotes46>2008-12-31<doubleQuotes46>));<newline46mondego>    arrayFile.add(new StackFile(<doubleQuotes46>3<doubleQuotes46>, <doubleQuotes46>John Machleyn<doubleQuotes46>, <doubleQuotes46>2008-12-31<doubleQuotes46>));<newline46mondego><newline46mondego><newline46mondego>    FileReader fr = new FileReader(<doubleQuotes46>in.txt<doubleQuotes46>);<newline46mondego>    BufferedReader br =new BufferedReader(fr); <newline46mondego>    String s;<newline46mondego>    while((s = br.readLine()) != null) { <newline46mondego>        String[] spS = s.split(<doubleQuotes46>|<doubleQuotes46>)[1].split(<doubleQuotes46>+<doubleQuotes46>); <newline46mondego>        arrayFile.add(new StackFile(spS[0],spS[1] ,spS[2]));<newline46mondego>        } <newline46mondego>        fr.close(); <newline46mondego><newline46mondego>    FileWriter fw = new FileWriter(new File(<doubleQuotes46>test.txt<doubleQuotes46>));<newline46mondego><newline46mondego>    fw.write(<doubleQuotes46>+--------+-------------------------------+-------------+\n<doubleQuotes46>);<newline46mondego>    fw.write(<doubleQuotes46>| ID     | Name                          | Date        |\n<doubleQuotes46>);<newline46mondego>    fw.write(<doubleQuotes46>+--------+-------------------------------+-------------+\n<doubleQuotes46>);<newline46mondego><newline46mondego>    Iterator<StackFile> itS = arrayFile.iterator();<newline46mondego><newline46mondego>    while(itS.hasNext())<newline46mondego>    {<newline46mondego>        StackFile sf = itS.next();<newline46mondego>        fw.write(<doubleQuotes46>| <doubleQuotes46>+String.format(<doubleQuotes46>%-6s<doubleQuotes46>, sf.getID())+<doubleQuotes46> | <doubleQuotes46>+String.format(<doubleQuotes46>%-30s<doubleQuotes46>, sf.getName())+<doubleQuotes46>| <doubleQuotes46>+String.format(<doubleQuotes46>%-10s<doubleQuotes46>, sf.getDate())+<doubleQuotes46>  |\n<doubleQuotes46>);<newline46mondego>        fw.write((itS.hasNext())<newline46mondego>                ?<doubleQuotes46>|--------|-------------------------------|-------------|\n<doubleQuotes46><newline46mondego>                :<doubleQuotes46>+--------+-------------------------------+-------------+\n<doubleQuotes46>);<newline46mondego><newline46mondego>    }<newline46mondego>    fw.close();<newline46mondego>"
"8364splitHere46","20268599splitHere46","public class StackFile {<newline46mondego>private String ID;<newline46mondego>private String Name;<newline46mondego>private String Date;<newline46mondego>public String getID() {<newline46mondego>    return ID;<newline46mondego>}<newline46mondego>public void setID(String iD) {<newline46mondego>    ID = iD;<newline46mondego>}<newline46mondego>public String getName() {<newline46mondego>    return Name;<newline46mondego>}<newline46mondego>public void setName(String name) {<newline46mondego>    Name = name;<newline46mondego>}<newline46mondego>public String getDate() {<newline46mondego>    return Date;<newline46mondego>}<newline46mondego>public void setDate(String date) {<newline46mondego>    Date = date;<newline46mondego>}<newline46mondego>public StackFile(String  _ID,String _name,String _date)<newline46mondego>{<newline46mondego>    ID=_ID;<newline46mondego>    Name=_name;<newline46mondego>    Date=_date;<newline46mondego>"
"8365splitHere46","20268660splitHere46","JDBC Resources"
"8366splitHere46","20268660splitHere46","New"
"8367splitHere46","20268660splitHere46","JNDI Name"
"8368splitHere46","20268660splitHere46","Pool Name"
"8369splitHere46","20268660splitHere46","JDBC Connection Pools"
"8370splitHere46","20268660splitHere46","jdbc"
"8371splitHere46","20268698splitHere46","String[][] board = [a,b,c,d]<newline46mondego>                   [e,f,g,h];   <newline46mondego><newline46mondego>// i - for each row<newline46mondego>for(int i=0; i<board.length; i++){<newline46mondego><newline46mondego>    // j - start from this column in a row<newline46mondego>    for(int j=0; j<board[i].length; j++){<newline46mondego>        String temp = <doubleQuotes46><doubleQuotes46>;        <newline46mondego>        // put all columns right to the j and including together<newline46mondego>        for(int k=j;k<board[i].length; k++) {<newline46mondego>            temp = temp+board[i][k];<newline46mondego>            System.out.println(temp);<newline46mondego>        }<newline46mondego>    }<newline46mondego>}<newline46mondego>"
"8372splitHere46","20268744splitHere46","public int getColumns() {<newline46mondego>  return width / tileWidth;<newline46mondego>} <newline46mondego><newline46mondego>public int getRows() {<newline46mondego>  return length / tileLength;<newline46mondego>}<newline46mondego>"
"8373splitHere46","20268776splitHere46","class OsSpecificExecutor implements Executor{<newline46mondego>     private IExecutorService ex;<newline46mondego><newline46mondego><newline46mondego>     public void execute(Runnable task){<newline46mondego>         Set<Member> targetMembers = getYourTargetMembers()<newline46mondego>         Member member = random(targetMembers)<newline46mondego>         ex.executeOnMember(task, member);<newline46mondego>     }<newline46mondego> }<newline46mondego>"
"8374splitHere46","20268845splitHere46","String result = <doubleQuotes46>Hello world.<doubleQuotes46><newline46mondego>  .codePoints()  // for large strings: .parallel()<newline46mondego>  .map(c -> c == ' ' ? ' ': '*')<newline46mondego>  .collect(StringBuilder::new,<newline46mondego>           StringBuilder::appendCodePoint, StringBuilder::append)<newline46mondego>  .toString();<newline46mondego>"
"8375splitHere46","20268845splitHere46","<doubleQuotes46>Hello world.<doubleQuotes46>.replaceAll(<doubleQuotes46>[^ ]<doubleQuotes46>, <doubleQuotes46>*<doubleQuotes46>)"
"8376splitHere46","20268892splitHere46","drop_down.xml"
"8377splitHere46","20268924splitHere46","Platform.runLater(new Runnable() {<newline46mondego>    public void run() {<newline46mondego>        lblTimer.setText(downloadTimer.getTime());<newline46mondego>    }<newline46mondego>});<newline46mondego>"
"8378splitHere46","20268980splitHere46","private static final Color[] colors = new Color[2];<newline46mondego><newline46mondego>public static void main(String[] args)<newline46mondego>{<newline46mondego>    Display display = new Display();<newline46mondego>    Shell shell = new Shell(display);<newline46mondego>    shell.setText(<doubleQuotes46>StackOverflow<doubleQuotes46>);<newline46mondego>    shell.setLayout(new GridLayout(1,  false));<newline46mondego><newline46mondego>    Composite content = new Composite(shell, SWT.NONE);<newline46mondego>    GridLayout layout = new GridLayout(1, false);<newline46mondego>    layout.verticalSpacing = 0;<newline46mondego>    content.setLayout(layout);<newline46mondego>    content.setLayoutData(new GridData(SWT.FILL, SWT.FILL, true, true));<newline46mondego><newline46mondego>    colors[0] = display.getSystemColor(SWT.COLOR_DARK_GRAY);<newline46mondego>    colors[1] = display.getSystemColor(SWT.COLOR_GRAY);<newline46mondego><newline46mondego>    for (int i = 0; i < 5; i++)<newline46mondego>        createPart(content, i);<newline46mondego><newline46mondego>    shell.pack();<newline46mondego>    shell.open();<newline46mondego>    while (!shell.isDisposed())<newline46mondego>    {<newline46mondego>        if (!display.readAndDispatch())<newline46mondego>            display.sleep();<newline46mondego>    }<newline46mondego>    display.dispose();<newline46mondego>}<newline46mondego><newline46mondego>private static void createPart(Composite parent, int i)<newline46mondego>{<newline46mondego>    Composite comp = new Composite(parent, SWT.NONE);<newline46mondego>    GridLayout layout = new GridLayout(2, false);<newline46mondego>    layout.marginHeight = 0;<newline46mondego>    comp.setLayout(layout);<newline46mondego>    comp.setLayoutData(new GridData(SWT.FILL, SWT.FILL, true, true));<newline46mondego><newline46mondego>    comp.setBackground(colors[i % 2]);<newline46mondego><newline46mondego>    Label left = new Label(comp, SWT.NONE);<newline46mondego>    left.setText(<doubleQuotes46>Left<doubleQuotes46>);<newline46mondego>    left.setBackground(colors[i % 2]);<newline46mondego>    Label right = new Label(comp, SWT.NONE);<newline46mondego>    right.setText(<doubleQuotes46>Right<doubleQuotes46>);<newline46mondego>    right.setBackground(colors[i % 2]);<newline46mondego>}<newline46mondego>"
"8379splitHere46","20269085splitHere46","t"
"8380splitHere46","20269085splitHere46","t=driver.findElement(By.xpath(<doubleQuotes46>//div[@id='mainContents']/div[2]/div/table/tbody/tr/td<doubleQuotes46>)).getText();<newline46mondego>    if(t.charAt(t.length()-1).equals(<doubleQuotes46>,<doubleQuotes46>))<newline46mondego>        t=t.substring(0,t.length()-2));<newline46mondego>"
"8381splitHere46","20269107splitHere46","CsvDataFormat csv = new CsvDataFormat();<newline46mondego>CSVConfig config = new CSVConfig();<newline46mondego>config.setDelimiter('|'); // your delimiter here<newline46mondego>csv.setConfig(config);<newline46mondego><newline46mondego>from(<doubleQuotes46>timer://foo?fixedRate=true&delay=0&period=2000<doubleQuotes46>).<newline46mondego>to(<doubleQuotes46>http://graph.facebook.com/nike<doubleQuotes46>).unmarshal().json(JsonLibrary.Gson,Map.class)<newline46mondego>.marshal(csv).convertBodyTo(String.class).to(<doubleQuotes46>file:target/output<doubleQuotes46>);<newline46mondego>"
"8382splitHere46","20269123splitHere46","done()"
"8383splitHere46","20269123splitHere46","import java.awt.BorderLayout;<newline46mondego>import java.awt.Dialog.ModalityType;<newline46mondego>import java.awt.Window;<newline46mondego>import java.awt.event.ActionEvent;<newline46mondego>import java.beans.PropertyChangeEvent;<newline46mondego>import java.beans.PropertyChangeListener;    <newline46mondego>import javax.swing.*;<newline46mondego><newline46mondego>public class PleaseWaitEg {<newline46mondego>   public static void main(String[] args) {<newline46mondego>      JButton showWaitBtn = new JButton(new ShowWaitAction(<doubleQuotes46>Show Wait Dialog<doubleQuotes46>));<newline46mondego>      JPanel panel = new JPanel();<newline46mondego>      panel.add(showWaitBtn);<newline46mondego>      JFrame frame = new JFrame(<doubleQuotes46>Frame<doubleQuotes46>);<newline46mondego>      frame.getContentPane().add(panel);<newline46mondego>      frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);<newline46mondego>      frame.pack();<newline46mondego>      frame.setLocationRelativeTo(null);<newline46mondego>      frame.setVisible(true);<newline46mondego><newline46mondego>   }<newline46mondego>}<newline46mondego><newline46mondego>class ShowWaitAction extends AbstractAction {<newline46mondego>   protected static final long SLEEP_TIME = 3 * 1000;<newline46mondego><newline46mondego>   public ShowWaitAction(String name) {<newline46mondego>      super(name);<newline46mondego>   }<newline46mondego><newline46mondego>   @Override<newline46mondego>   public void actionPerformed(ActionEvent evt) {<newline46mondego>      SwingWorker<Void, Void> mySwingWorker = new SwingWorker<Void, Void>(){<newline46mondego>         @Override<newline46mondego>         protected Void doInBackground() throws Exception {<newline46mondego><newline46mondego>            // mimic some long-running process here...<newline46mondego>            Thread.sleep(SLEEP_TIME);<newline46mondego>            return null;<newline46mondego>         }<newline46mondego>      };<newline46mondego><newline46mondego>      Window win = SwingUtilities.getWindowAncestor((AbstractButton)evt.getSource());<newline46mondego>      final JDialog dialog = new JDialog(win, <doubleQuotes46>Dialog<doubleQuotes46>, ModalityType.APPLICATION_MODAL);<newline46mondego><newline46mondego>      mySwingWorker.addPropertyChangeListener(new PropertyChangeListener() {<newline46mondego><newline46mondego>         @Override<newline46mondego>         public void propertyChange(PropertyChangeEvent evt) {<newline46mondego>            if (evt.getPropertyName().equals(<doubleQuotes46>state<doubleQuotes46>)) {<newline46mondego>               if (evt.getNewValue() == SwingWorker.StateValue.DONE) {<newline46mondego>                  dialog.dispose();<newline46mondego>               }<newline46mondego>            }<newline46mondego>         }<newline46mondego>      });<newline46mondego>      mySwingWorker.execute();<newline46mondego><newline46mondego>      JProgressBar progressBar = new JProgressBar();<newline46mondego>      progressBar.setIndeterminate(true);<newline46mondego>      JPanel panel = new JPanel(new BorderLayout());<newline46mondego>      panel.add(progressBar, BorderLayout.CENTER);<newline46mondego>      panel.add(new JLabel(<doubleQuotes46>Please wait.......<doubleQuotes46>), BorderLayout.PAGE_START);<newline46mondego>      dialog.add(panel);<newline46mondego>      dialog.pack();<newline46mondego>      dialog.setLocationRelativeTo(win);<newline46mondego>      dialog.setVisible(true);<newline46mondego>   }<newline46mondego>}<newline46mondego>"
"8384splitHere46","20269644splitHere46","<bean id=<doubleQuotes46>primaryService<doubleQuotes46> class=<doubleQuotes46>MyService<doubleQuotes46>><newline46mondego>  <property name=<doubleQuotes46>url<doubleQuotes46> value=<doubleQuotes46>http://domain1/<doubleQuotes46>/><newline46mondego></bean><newline46mondego><newline46mondego><bean id=<doubleQuotes46>premiumService<doubleQuotes46> class=<doubleQuotes46>MyService<doubleQuotes46>><newline46mondego>  <property name=<doubleQuotes46>url<doubleQuotes46> value=<doubleQuotes46>http://domain2/<doubleQuotes46>/><newline46mondego></bean><newline46mondego>"
"8385splitHere46","20269644splitHere46","premiumService"
"8386splitHere46","20269644splitHere46","domain2"
"8387splitHere46","20269683splitHere46","public void listFiles(Folder) {<newline46mondego>  Print out all files in the current folder<newline46mondego>  Get all Folders in the current folder<newline46mondego>  for each folder<newline46mondego>    listfiles(folder)<newline46mondego>}<newline46mondego>"
"8388splitHere46","20269693splitHere46","String test = <doubleQuotes46>A,B,,,C,,<doubleQuotes46>;<newline46mondego><newline46mondego>String[] result = test.split(<doubleQuotes46>,<doubleQuotes46>,test.length()); // or the number of elements you expect in the result<newline46mondego><newline46mondego>for(String s : result){<newline46mondego>    System.out.println(<doubleQuotes46>$<doubleQuotes46>+s+<doubleQuotes46>$<doubleQuotes46>);<newline46mondego>}<newline46mondego>"
"8389splitHere46","20269912splitHere46","public static void main(String[] args) throws IOException {<newline46mondego>            // collect the html and create the doc<newline46mondego>    String url = <doubleQuotes46>http://finance.yahoo.com/q?s=goog<doubleQuotes46>;<newline46mondego>    Document doc = Jsoup.connect(url).get();<newline46mondego><newline46mondego>            // locate the header, title and then found the h2 tag<newline46mondego>    Element header = doc.select(<doubleQuotes46>div[id=yfi_rt_quote_summary]<doubleQuotes46>).get(0);<newline46mondego>    Element title = header.select(<doubleQuotes46>div[class=title]<doubleQuotes46>).get(0);<newline46mondego>    String h2 = title.select(<doubleQuotes46>h2<doubleQuotes46>).get(0).text();<newline46mondego><newline46mondego>            // split by open parenthesis (double escape) and strip off the close parenthesis<newline46mondego>            // TODO - regular expression help handle situation where exist multiple <doubleQuotes46>()<doubleQuotes46>s<newline46mondego>    String[] parts = h2.split(<doubleQuotes46>\\(<doubleQuotes46>);<newline46mondego>    String name = parts[0];<newline46mondego>    String shortname = parts[1].replace(<doubleQuotes46>)<doubleQuotes46>, <doubleQuotes46><doubleQuotes46>);<newline46mondego>    System.out.println(name);<newline46mondego>    System.out.println(shortname);<newline46mondego><newline46mondego>}<newline46mondego>"
"8390splitHere46","20269912splitHere46","Google Inc. <newline46mondego>GOOG<newline46mondego>"
"8391splitHere46","20269960splitHere46","org.eclipse.ui.IPartListener"
"8392splitHere46","20269960splitHere46","PlatformUI.getWorkbench().getActiveWorkbenchWindow().addPartListener(listener);<newline46mondego>"
"8393splitHere46","20269960splitHere46","public void partActivated(IWorkbenchPart part)<newline46mondego>"
"8394splitHere46","20269960splitHere46","part"
"8395splitHere46","20270037splitHere46","String utenRepetisjon(String tekst) {<newline46mondego>    String str = <doubleQuotes46><doubleQuotes46>;<newline46mondego>    for(char ch : tekst.toCharArray()) {<newline46mondego>        if (str.indexOf(ch) == -1) {<newline46mondego>            str += ch;<newline46mondego>        }<newline46mondego>    }<newline46mondego>    return str;<newline46mondego>}<newline46mondego>"
"8396splitHere46","20270121splitHere46","//Optional, this is just so that I can retrieve the C++ MyLibrary instance<newline46mondego>//easily from the Java.<newline46mondego>JNIEXPORT void JNICALL Java_MyLibrary_initCpp(JNIEnv* env, jobject javaMyLibrary) {<newline46mondego>    //Save the C++ version of MyLibrary as a field inside the Java MyLibrary.<newline46mondego>    MyLibrary * lib = new MyLibrary();<newline46mondego>    env->SetLongField(javaMyLibrary, CPP_MYLIBRARY_POINTER_FIELD, ptr_to_jlong(lib));<newline46mondego>}<newline46mondego><newline46mondego>JNIEXPORT void JNICALL Java_MyLibrary_setObserver(JNIEnv* env, <newline46mondego>        jobject javaMyLibrary, jobject javaObserver) {<newline46mondego>    //Retrieve the CPP version of MyLibrary. For me, I stored it inside the java<newline46mondego>    //object as a field, but you can implement it any way you want.<newline46mondego>    MyLibrary* cppMyLibrary = (MyLibrary*)jlong_to_ptr(<newline46mondego>        env->GetLongField(javaMyLibrary, CPP_MYLIBRARY_POINTER_FIELD));<newline46mondego>    if (cppMyLibrary == NULL) {<newline46mondego>        //Handle the problem<newline46mondego>        return;<newline46mondego>    }<newline46mondego>    jthrowable exc = NULL;<newline46mondego><newline46mondego>    //Keep the jvm object around; the env is not available in another thread<newline46mondego>    //but can be obtained from the jvm.<newline46mondego>    JavaVM* jvm;<newline46mondego>    env->GetJavaVM(&jvm);<newline46mondego><newline46mondego>    //The observer has to be made global; it's not available in another thread.<newline46mondego>    jobject observer = env->NewGlobalRef(javaObserver);<newline46mondego>    //TODO: retrieve the previous observer and clean it up with DeleteGlobalRef()<newline46mondego>    //TODO: clean up this observer when destroying MyLibrary with DeleteGlobalRef()<newline46mondego><newline46mondego>    try {<newline46mondego>        //At this point, both <doubleQuotes46>jvm<doubleQuotes46> and <doubleQuotes46>observer<doubleQuotes46> are accessible from the other thread.<newline46mondego>        cppMyLibrary->setLogFunction([jvm, observer] (std::string& p0, std::string& p1) {<newline46mondego>            JNIEnv* env;<newline46mondego>            jvm->AttachCurrentThread(&env, NULL); //Obtain the env<newline46mondego>            jclass clazz = env->GetObjectClass(observer);<newline46mondego>            jmethodID meth = env->GetMethodID(clazz, <doubleQuotes46>log<doubleQuotes46>,<newline46mondego>                    <doubleQuotes46>(Ljava/lang/String;Ljava/lang/String;)V<doubleQuotes46>);<newline46mondego>            jstring s0 = env->NewStringUTF(p0.c_str());<newline46mondego>            jstring s1 = env->NewStringUTF(p1.c_str());<newline46mondego>            env->CallVoidMethod(observer, meth, s0, s1);<newline46mondego><newline46mondego>            //TODO: make sure this is called even if there's an exception!<newline46mondego>            jvm->DetachCurrentThread();<newline46mondego>        });<newline46mondego>    } catch (...) {<newline46mondego>        exc = //handle your exceptions here<newline46mondego>    }<newline46mondego><newline46mondego>    if (exc != NULL) {<newline46mondego>        env->Throw(exc);<newline46mondego>    }<newline46mondego>}<newline46mondego>"
"8397splitHere46","20270174splitHere46","<grid sizedByContent=<doubleQuotes46>true<doubleQuotes46> span=<doubleQuotes46>true<doubleQuotes46> model=<doubleQuotes46>@load(vm.getPendingRequests('RETURN'))<doubleQuotes46> <newline46mondego>       emptyMessage=<doubleQuotes46>Nessuna richiesta trovata<doubleQuotes46> height=<doubleQuotes46>100%<doubleQuotes46> width=<doubleQuotes46>100%<doubleQuotes46>><newline46mondego>"
"8398splitHere46","20270174splitHere46","public List<PendingRequest> getPendingRequests(String stype) {<newline46mondego>        RequestType type = RequestType.valueOf(stype);<newline46mondego>        return pendingRequests.get(type);<newline46mondego>    }<newline46mondego>"
"8399splitHere46","20270184splitHere46","repositories {<newline46mondego>    mavenCentral()<newline46mondego>}<newline46mondego>"
"8400splitHere46","20270184splitHere46","lib"
"8401splitHere46","20270195splitHere46","sendRedirect()"
"8402splitHere46","20270263splitHere46","com.test"
"8403splitHere46","20270263splitHere46","new com.test.A().m();<newline46mondego>"
"8404splitHere46","20270263splitHere46","package"
"8405splitHere46","20270263splitHere46","A"
"8406splitHere46","20270289splitHere46","hibernate.cfg.xml"
"8407splitHere46","20270289splitHere46","<property name=<doubleQuotes46>hbm2ddl.auto<doubleQuotes46>>create</property><newline46mondego>"
"8408splitHere46","20270289splitHere46","<property name=<doubleQuotes46>hbm2ddl.auto<doubleQuotes46>>update</property><newline46mondego>"
"8409splitHere46","20270351splitHere46","Map createRecommendationMap( List recommendation ) {<newline46mondego>    println 'inside createRecommendationMap of Maps **************** '<newline46mondego>    //If not already created, create the map.  Stick to KD types, not many<newline46mondego>    //fields required.<newline46mondego>    //Keyed on Tariff type desc, commitment duration, p_band.<newline46mondego>    if( !allMaps.containsKey(RECOMMENDATION_MAP) ) {<newline46mondego>        allMaps[ RECOMMENDATION_MAP ] = recommendation.inject( [:] ) { map, r -><newline46mondego>            def k = <doubleQuotes46>${r.CUST_TYPE}${r.CHANNEL}${r.CONTRACT_LENGTH}${r.P_BAND}<doubleQuotes46>.toString()<newline46mondego>            def m = map[ k ]<newline46mondego>            if( !m ) {<newline46mondego>                m = []<newline46mondego>                map[ k ] = m<newline46mondego>            }<newline46mondego>            m << r<newline46mondego>            map<newline46mondego>        }<newline46mondego>    }<newline46mondego>    allMaps[ RECOMMENDATION_MAP ]<newline46mondego>}<newline46mondego>"
"8410splitHere46","20270351splitHere46","class Test {<newline46mondego><newline46mondego>    Map allMaps = [:]<newline46mondego>    String RECOMMENDATION_MAP = 'SOME_KEY'<newline46mondego><newline46mondego>    Map createRecommendationMap( List recommendation ) {<newline46mondego>        println 'inside createRecommendationMap of Maps **************** '<newline46mondego>        //If not already created, create the map.  Stick to KD types, not many<newline46mondego>        //fields required.<newline46mondego>        //Keyed on Tariff type desc, commitment duration, p_band.<newline46mondego>        if( !allMaps.containsKey(RECOMMENDATION_MAP) ) {<newline46mondego>            allMaps[ RECOMMENDATION_MAP ] = recommendation.inject( [:] ) { map, r -><newline46mondego>                def k = <doubleQuotes46>${r.CUST_TYPE}${r.CHANNEL}${r.CONTRACT_LENGTH}${r.P_BAND}<doubleQuotes46>.toString()<newline46mondego>                def m = map[ k ]<newline46mondego>                if( !m ) {<newline46mondego>                    m = []<newline46mondego>                    map[ k ] = m<newline46mondego>                }<newline46mondego>                m << r<newline46mondego>                map<newline46mondego>            }<newline46mondego>        }<newline46mondego>        allMaps[ RECOMMENDATION_MAP ]<newline46mondego>    }<newline46mondego>}<newline46mondego><newline46mondego>def recommendation = [ [<doubleQuotes46>CHANNEL<doubleQuotes46>:<doubleQuotes46>OUTBOUND<doubleQuotes46>, <doubleQuotes46>STOCK_LEVEL<doubleQuotes46>:0.0, <doubleQuotes46>PRODUCT_ID<doubleQuotes46>:<doubleQuotes46>SAM-STD-I9100W-1<doubleQuotes46>, <doubleQuotes46>OFFER_ID<doubleQuotes46>:<doubleQuotes46>FBUN-MVP-VME-VIRGIN-29-12-05<doubleQuotes46>, <doubleQuotes46>P_BAND<doubleQuotes46>:<doubleQuotes46>P10<doubleQuotes46>, <doubleQuotes46>CONTRACT_LENGTH<doubleQuotes46>:24.0, <doubleQuotes46>INCENTIVE_POINTS<doubleQuotes46>:15.0, <doubleQuotes46>CUST_TYPE<doubleQuotes46>:<doubleQuotes46>NONMEDIA<doubleQuotes46>],<newline46mondego>                       [<doubleQuotes46>CHANNEL<doubleQuotes46>:<doubleQuotes46>OUTBOUND<doubleQuotes46>, <doubleQuotes46>STOCK_LEVEL<doubleQuotes46>:0.0, <doubleQuotes46>PRODUCT_ID<doubleQuotes46>:<doubleQuotes46>LGE-STD-E960-1<doubleQuotes46>, <doubleQuotes46>OFFER_ID<doubleQuotes46>:<doubleQuotes46>FBUN-MVP-VME-VIRGIN-29-12-05<doubleQuotes46>, <doubleQuotes46>P_BAND<doubleQuotes46>:<doubleQuotes46>P10<doubleQuotes46>, <doubleQuotes46>CONTRACT_LENGTH<doubleQuotes46>:24.0, <doubleQuotes46>INCENTIVE_POINTS<doubleQuotes46>:10.0, <doubleQuotes46>CUST_TYPE<doubleQuotes46>:<doubleQuotes46>NONMEDIA<doubleQuotes46>] ]<newline46mondego><newline46mondego>def recommendationMap = new Test().createRecommendationMap( recommendation ) <newline46mondego>recommendationMap.each { key, value -><newline46mondego>    println key<newline46mondego>    value.each { println <doubleQuotes46>    $it<doubleQuotes46> }<newline46mondego>}<newline46mondego>"
"8411splitHere46","20270351splitHere46","NONMEDIAOUTBOUND24.0P10<newline46mondego>    [<doubleQuotes46>CHANNEL<doubleQuotes46>:<doubleQuotes46>OUTBOUND<doubleQuotes46>, <doubleQuotes46>STOCK_LEVEL<doubleQuotes46>:0.0, <doubleQuotes46>PRODUCT_ID<doubleQuotes46>:<doubleQuotes46>SAM-STD-I9100W-1<doubleQuotes46>, <doubleQuotes46>OFFER_ID<doubleQuotes46>:<doubleQuotes46>FBUN-MVP-VME-VIRGIN-29-12-05<doubleQuotes46>, <doubleQuotes46>P_BAND<doubleQuotes46>:<doubleQuotes46>P10<doubleQuotes46>, <doubleQuotes46>CONTRACT_LENGTH<doubleQuotes46>:24.0, <doubleQuotes46>INCENTIVE_POINTS<doubleQuotes46>:15.0, <doubleQuotes46>CUST_TYPE<doubleQuotes46>:<doubleQuotes46>NONMEDIA<doubleQuotes46>]<newline46mondego>    [<doubleQuotes46>CHANNEL<doubleQuotes46>:<doubleQuotes46>OUTBOUND<doubleQuotes46>, <doubleQuotes46>STOCK_LEVEL<doubleQuotes46>:0.0, <doubleQuotes46>PRODUCT_ID<doubleQuotes46>:<doubleQuotes46>LGE-STD-E960-1<doubleQuotes46>, <doubleQuotes46>OFFER_ID<doubleQuotes46>:<doubleQuotes46>FBUN-MVP-VME-VIRGIN-29-12-05<doubleQuotes46>, <doubleQuotes46>P_BAND<doubleQuotes46>:<doubleQuotes46>P10<doubleQuotes46>, <doubleQuotes46>CONTRACT_LENGTH<doubleQuotes46>:24.0, <doubleQuotes46>INCENTIVE_POINTS<doubleQuotes46>:10.0, <doubleQuotes46>CUST_TYPE<doubleQuotes46>:<doubleQuotes46>NONMEDIA<doubleQuotes46>]<newline46mondego>"
"8412splitHere46","20270395splitHere46","-D..."
"8413splitHere46","20270395splitHere46","mvn -Dmaven.compiler.target=1.7 compile<newline46mondego>"
"8414splitHere46","20270441splitHere46","SealedObject"
"8415splitHere46","20270441splitHere46","<doubleQuotes46>AES/CBC/PKCS5Padding<doubleQuotes46>"
"8416splitHere46","20270441splitHere46","<doubleQuotes46>RSA/NONE/OAEPPadding<doubleQuotes46>"
"8417splitHere46","20270441splitHere46","<doubleQuotes46>RSA/NONE/PKCS1Padding<doubleQuotes46>"
"8418splitHere46","20270441splitHere46","Cipher.doFinal()"
"8419splitHere46","20270441splitHere46","key.getEncoded()"
"8420splitHere46","20270481splitHere46","key.label = null;<newline46mondego>key.icon = getResources().getDrawable(R.drawable.tecladir);<newline46mondego>"
"8421splitHere46","20270506splitHere46","static void sortAlphabetical() { <newline46mondego>        String tempName;<newline46mondego>        int [] intSwap; //<-- note I changed this as an int[] array<newline46mondego>        boolean flag = false;<newline46mondego>        while (flag==false) {<newline46mondego>          flag = true;<newline46mondego>          for (int i = 0; i < studentNamesArray.length-1; i++) { //<-- note I changed this to length - 1 to avoid IndexOutOfBoundsException<newline46mondego>            if (studentNamesArray[i].compareTo(studentNamesArray[i + 1])>0) {<newline46mondego>              tempName = studentNamesArray[i];<newline46mondego>              studentNamesArray[i] = studentNamesArray[i + 1];<newline46mondego>              studentNamesArray[i + 1] = tempName;<newline46mondego><newline46mondego>              intSwap = studentMarksArray[i];<newline46mondego>              studentMarksArray[i] = studentMarksArray[i+1];<newline46mondego>              studentMarksArray[i+1]= intSwap;<newline46mondego>              flag = false;<newline46mondego>            }<newline46mondego>          }<newline46mondego>        }<newline46mondego>      }<newline46mondego>"
"8422splitHere46","20270506splitHere46","static String[] studentNamesArray = new String[3];<newline46mondego>    static int[][] studentMarksArray = new int[3][3];<newline46mondego><newline46mondego>    public static void main (String[] args) throws java.lang.Exception {<newline46mondego>        studentNamesArray[0] = <doubleQuotes46>Mark<doubleQuotes46>;<newline46mondego>        studentNamesArray[1] = <doubleQuotes46>Anna<doubleQuotes46>;<newline46mondego>        studentNamesArray[2] = <doubleQuotes46>Arnold<doubleQuotes46>;<newline46mondego><newline46mondego>        studentMarksArray[0] = new int[]{1,2,3};<newline46mondego>        studentMarksArray[1] = new int[]{4,5,6};<newline46mondego>        studentMarksArray[2] = new int[]{0,0,0};<newline46mondego><newline46mondego>        sortAlphabetical();<newline46mondego>        System.out.println(Arrays.toString(studentNamesArray));<newline46mondego>        System.out.println(Arrays.deepToString(studentMarksArray));<newline46mondego><newline46mondego>    }<newline46mondego>"
"8423splitHere46","20270506splitHere46","[Anna, Arnold, Mark]<newline46mondego>[[4, 5, 6], [0, 0, 0], [1, 2, 3]]<newline46mondego>"
"8424splitHere46","20270586splitHere46","java Test 2 3 '*'<newline46mondego>"
"8425splitHere46","20270655splitHere46","$key = $CmdLine[1]<newline46mondego><newline46mondego>HotKeySet($key, <doubleQuotes46>hotKeyFunction<doubleQuotes46>)<newline46mondego><newline46mondego>While 1<newline46mondego>    Sleep(100)<newline46mondego>WEnd<newline46mondego><newline46mondego>Func hotKeyFunction()<newline46mondego>    ConsoleWrite(@CRLF)<newline46mondego>EndFunc<newline46mondego>"
"8426splitHere46","20270655splitHere46","import java.beans.PropertyChangeListener;<newline46mondego>import java.io.IOException;<newline46mondego>import java.io.InputStreamReader;<newline46mondego>import java.util.ArrayList;<newline46mondego>import java.util.List;<newline46mondego>import java.util.Scanner;<newline46mondego>import javax.swing.event.SwingPropertyChangeSupport;<newline46mondego><newline46mondego>public class CaptureHotKey implements Runnable {<newline46mondego>   public static final String HOT_KEY = <doubleQuotes46>hot key<doubleQuotes46>;<newline46mondego>   private String hotKey;<newline46mondego>   private SwingPropertyChangeSupport pcSupport = new SwingPropertyChangeSupport(<newline46mondego>         this);<newline46mondego>   private Scanner scanner;<newline46mondego>   private CaptureHotKeyFromAutoIt capture;<newline46mondego><newline46mondego>   public CaptureHotKey(final String hotKey) throws IOException {<newline46mondego>      this.hotKey = hotKey;     <newline46mondego>      capture = new CaptureHotKeyFromAutoIt(hotKey);<newline46mondego>      scanner = new Scanner(capture.getReadable());<newline46mondego>   }<newline46mondego><newline46mondego>   public void startCapturing() {<newline46mondego>      new Thread(this).start();<newline46mondego>   }<newline46mondego><newline46mondego>   public void exit() {<newline46mondego>      if (capture != null) {<newline46mondego>         capture.exit();  <newline46mondego>      }<newline46mondego>      if (scanner != null) {<newline46mondego>         scanner.close();<newline46mondego>      }<newline46mondego>   }<newline46mondego><newline46mondego>   public void addPropertyChangeListener(PropertyChangeListener listener) {<newline46mondego>      pcSupport.addPropertyChangeListener(listener);<newline46mondego>   }<newline46mondego><newline46mondego>   public void removePropertyChangeListener(PropertyChangeListener listener) {<newline46mondego>      pcSupport.removePropertyChangeListener(listener);<newline46mondego>   }<newline46mondego><newline46mondego>   public String getHotKey() {<newline46mondego>      return hotKey;<newline46mondego>   }<newline46mondego><newline46mondego>   @Override<newline46mondego>   public void run() {<newline46mondego>      while (scanner != null && scanner.hasNextLine()) {<newline46mondego>         scanner.nextLine();<newline46mondego>         pcSupport.firePropertyChange(HOT_KEY, true, false);<newline46mondego>      }<newline46mondego>   }<newline46mondego><newline46mondego>   private static class CaptureHotKeyFromAutoIt {<newline46mondego>      public static final String AUTO_IT_APP_PATH = <doubleQuotes46>CaptureHotKey.exe<doubleQuotes46>;<newline46mondego><newline46mondego>      private Process process = null;<newline46mondego>      private ProcessBuilder pb;<newline46mondego><newline46mondego>      public CaptureHotKeyFromAutoIt(String hotKey) throws IOException {<newline46mondego>         List<String> cmdList = new ArrayList<>();<newline46mondego>         cmdList.add(AUTO_IT_APP_PATH);<newline46mondego>         cmdList.add(hotKey);<newline46mondego>         pb = new ProcessBuilder(cmdList);<newline46mondego>         pb.redirectErrorStream(true);<newline46mondego>         process = pb.start();<newline46mondego>      }<newline46mondego><newline46mondego>      public void exit() {<newline46mondego>         if (process != null) {<newline46mondego>            process.destroy();<newline46mondego>         }<newline46mondego>      }<newline46mondego><newline46mondego>      public Readable getReadable() {<newline46mondego>         if (process != null) {<newline46mondego>            return new InputStreamReader(process.getInputStream());<newline46mondego>         }<newline46mondego>         return null;<newline46mondego>      }<newline46mondego>   }<newline46mondego>}<newline46mondego>"
"8427splitHere46","20270655splitHere46","import java.awt.MouseInfo;<newline46mondego>import java.awt.PointerInfo;<newline46mondego>import java.beans.PropertyChangeEvent;<newline46mondego>import java.beans.PropertyChangeListener;<newline46mondego>import java.io.IOException;<newline46mondego>import java.util.Scanner;<newline46mondego><newline46mondego>public class CaptureHotKeyTest {<newline46mondego>   public static final String CTRL_R = <doubleQuotes46>^r<doubleQuotes46>; // <doubleQuotes46>{SPACE}<doubleQuotes46> works for spacebar<newline46mondego>   private static final String EXIT = <doubleQuotes46>exit<doubleQuotes46>;<newline46mondego>   private CaptureHotKey capture;<newline46mondego><newline46mondego>   public CaptureHotKeyTest() {<newline46mondego>      try {<newline46mondego>         capture = new CaptureHotKey(CTRL_R);<newline46mondego>         capture.addPropertyChangeListener(new HotKeyPropertyChngListener());<newline46mondego>         capture.startCapturing();<newline46mondego><newline46mondego>         Scanner scan = new Scanner(System.in);<newline46mondego>         System.out.println(<doubleQuotes46>Press control-r to get mouse position.<doubleQuotes46>);<newline46mondego>         System.out.println(<doubleQuotes46>Type \<doubleQuotes46>exit\<doubleQuotes46> to exit program<doubleQuotes46>);<newline46mondego>         while (scan.hasNextLine()) {<newline46mondego>            String line = scan.nextLine();<newline46mondego>            if (line.equalsIgnoreCase(EXIT)) {<newline46mondego>               scan.close();<newline46mondego>               capture.exit();<newline46mondego>               break;<newline46mondego>            }<newline46mondego>         }<newline46mondego>      } catch (IOException e) {<newline46mondego>         e.printStackTrace();<newline46mondego>      }      <newline46mondego>   }<newline46mondego><newline46mondego>   private class HotKeyPropertyChngListener implements PropertyChangeListener {<newline46mondego>      @Override<newline46mondego>      public void propertyChange(PropertyChangeEvent evt) {<newline46mondego>         if (evt.getPropertyName().equals(CaptureHotKey.HOT_KEY)) {<newline46mondego>            System.out.println(<doubleQuotes46>hot key pressed<doubleQuotes46>);<newline46mondego><newline46mondego>            PointerInfo pointerInfo = MouseInfo.getPointerInfo();<newline46mondego>            System.out.println(<doubleQuotes46>Mouse: <doubleQuotes46> + pointerInfo.getLocation());<newline46mondego>         }<newline46mondego>      }<newline46mondego>   }<newline46mondego><newline46mondego>   public static void main(String[] args) {<newline46mondego>      new CaptureHotKeyTest();<newline46mondego>   }<newline46mondego><newline46mondego>}<newline46mondego>"
"8428splitHere46","20270751splitHere46","@RunWith(MockitoJUnitRunner.class)<newline46mondego>public class DemoTest {<newline46mondego>    @Spy<newline46mondego>    private SomeService service = new RealServiceImpl();<newline46mondego><newline46mondego>    @InjectMocks<newline46mondego>    private Demo demo;<newline46mondego><newline46mondego>    /* ... */<newline46mondego>}<newline46mondego>"
"8429splitHere46","20270778splitHere46","`private View buttonRezervari;<newline46mondego> private View buttonHome;`<newline46mondego>"
"8430splitHere46","20270778splitHere46","myWebView = (WebView) findViewById(R.id.webview);       <newline46mondego>"
"8431splitHere46","20270778splitHere46","buttonRezervari<newline46mondego>buttonHome<newline46mondego>"
"8432splitHere46","20270839splitHere46","g[ss[i]]++;"
"8433splitHere46","20270839splitHere46","int index = ss[i];<newline46mondego>g[index] = g[index] + 1;<newline46mondego>"
"8434splitHere46","20270898splitHere46","/**/"
"8435splitHere46","20270898splitHere46","@param"
"8436splitHere46","20270898splitHere46","@"
"8437splitHere46","20270898splitHere46","@"
"8438splitHere46","20271212splitHere46","String str = <doubleQuotes46>Hello world !I am Nika.<doubleQuotes46>;<newline46mondego>String neededStr = str.split(<doubleQuotes46>!<doubleQuotes46>)[0];<newline46mondego>System.out.println(neededStr);<newline46mondego>"
"8439splitHere46","20271260splitHere46","@Configuration<newline46mondego>@EnableWebMvc   // this annotation imports the class  WebMvcConfigurationSupport which bootstraps web mvc<newline46mondego>@ComponentScan(basePackages = { <doubleQuotes46>com.orgname<doubleQuotes46>  })<newline46mondego>public class WebConfig extends WebMvcConfigurerAdapter {<newline46mondego><newline46mondego>@Bean<newline46mondego>public ViewResolver viewResolver() {<newline46mondego><newline46mondego>    InternalResourceViewResolver viewResolver = new InternalResourceViewResolver();<newline46mondego>    viewResolver.setViewClass(JstlView.class);<newline46mondego>    viewResolver.setPrefix(<doubleQuotes46>/view/jsp/<doubleQuotes46>);<newline46mondego>    viewResolver.setSuffix(<doubleQuotes46>.jsp<doubleQuotes46>);<newline46mondego>    return viewResolver;<newline46mondego>}<newline46mondego><newline46mondego>@Override<newline46mondego>public void addResourceHandlers(ResourceHandlerRegistry registry) {<newline46mondego>    registry.addResourceHandler(<doubleQuotes46>/resources/**<doubleQuotes46>).addResourceLocations(<doubleQuotes46>/resources/<doubleQuotes46>);<newline46mondego>}<newline46mondego><newline46mondego>/**<newline46mondego> * This method invocation bean stands for the method call:<newline46mondego> * CookieHandler.setDefault(new CookieManager());<newline46mondego> * which should be done at the beginning of an HTTP session to bootstrap<newline46mondego> * the Java 6 Http state management mechanism for the application as a whole. <newline46mondego> * (http://docs.oracle.com/javase/tutorial/networking/cookies/cookiehandler.html)<newline46mondego> * <newline46mondego> */<newline46mondego>@Bean(name=<doubleQuotes46>cookieHandlerSetDefaultBean<doubleQuotes46>) <newline46mondego>public MethodInvokingFactoryBean methodInvokingFactoryBean() { <newline46mondego>    MethodInvokingFactoryBean methodInvokingFactoryBean = new MethodInvokingFactoryBean();<newline46mondego>    methodInvokingFactoryBean.setTargetClass(CookieHandler.class);<newline46mondego>    methodInvokingFactoryBean.setTargetMethod(<doubleQuotes46>setDefault<doubleQuotes46>);<newline46mondego>    CookieManager cookieManager = new CookieManager();<newline46mondego>    methodInvokingFactoryBean.setArguments(new Object[]{cookieManager}); <newline46mondego>    return methodInvokingFactoryBean; <newline46mondego>}<newline46mondego>}<newline46mondego>"
"8440splitHere46","20271260splitHere46","/**<newline46mondego> * This service aggregates the default CookieManager as explained in the API <newline46mondego> * (http://docs.oracle.com/javase/6/docs/api/java/net/CookieManager.html). <newline46mondego> * A system-wide CookieManager that is used by the HTTP protocol handler <newline46mondego> * can be retrieved by calling CookieHandler.getDefault(). <newline46mondego> * A CookieManager is initialized with aØ¢Â CookieStoreØ¢Â which manages storage<newline46mondego> * A CookieStore supports add(cookie) and getCookie() methods<newline46mondego> * A CookieStore is responsible of removing Cookie instances which have expired.<newline46mondego> *<newline46mondego> */<newline46mondego>@Service(value=<doubleQuotes46>serviceConfigBean<doubleQuotes46>)<newline46mondego>@DependsOn(value=<doubleQuotes46>cookieHandlerSetDefault<doubleQuotes46>)    //This is the bean initialized in the Configuration class. It is needed to be initialized before the container initializes the Service <newline46mondego>public class ClientCookiesStore {<newline46mondego><newline46mondego>    private static final Logger logger = LoggerFactory.getLogger(ClientCookiesStore.class);<newline46mondego><newline46mondego>    protected CookieStore inmemoryCookieStore;<newline46mondego><newline46mondego>    protected URI clientURI;<newline46mondego><newline46mondego>/**<newline46mondego> * The @PostConstruct (lifecycle callback method) indicates this method should be invoked after all <newline46mondego> * dependency injection is complete. Thus helps in initializing any resources needed by the <newline46mondego> * service.<newline46mondego> * <newline46mondego> * In this particular initializing method:<newline46mondego> * (as per http://docs.oracle.com/javase/6/docs/api/java/net/CookieManager.html<newline46mondego> *  and http://docs.oracle.com/javase/tutorial/networking/cookies/cookiemanager.html)<newline46mondego> * The CookieHandler default is installed in the application via <newline46mondego> * a method invoking factory bean, namely <doubleQuotes46>cookieHandlerSetDefault<doubleQuotes46> which <newline46mondego> * exists in the java configuration file WebConfig.java<newline46mondego><newline46mondego> * (1) A cookieManager property needs 2 steps setup as indicated in the code<newline46mondego> * (2) The internal in-memory implementation of the CookieStore interface is initialized <newline46mondego> *      through the cookieManager defaults. It is assigned to the inmemoryCookieStore property.  <newline46mondego> * (3) Since a CookieStore aggregates many groups of cookies, each group is identified <newline46mondego> *     by a URI instance. ClientCookiesStore is associated with the Client URI as indicated in <newline46mondego> *     the code.  <newline46mondego> * <newline46mondego> * @throws Exception<newline46mondego> */<newline46mondego>@PostConstruct<newline46mondego>protected void initializeBean() throws Exception {<newline46mondego>    //      (1) Step#1 Initialize a CookieManager with the current Http session default <newline46mondego>    //                  which was already set in the configuration class<newline46mondego>    CookieManager cookieManager = (CookieManager)CookieHandler.getDefault();    <newline46mondego>    //          Step#2 Then set up the CookiePolicy.<newline46mondego>    cookieManager.setCookiePolicy(CookiePolicy.ACCEPT_ALL);<newline46mondego>    //      (2) Assign a CookieStore instance to the in-memory cookie store implemented by the API<newline46mondego>    inmemoryCookieStore =  cookieManager.getCookieStore();<newline46mondego>    //      (3) Initialize URI instance which will identify the Client cookies in the CookieStore <newline46mondego><newline46mondego>    try {<newline46mondego>        clientURI = new URI(<doubleQuotes46>http://vendor.webservices.com/endpoint<doubleQuotes46>);<newline46mondego>    } catch (URISyntaxException e) {<newline46mondego>        throw new Exception(<doubleQuotes46>URISyntaxException created while creating a URI instance for url= <doubleQuotes46>+clientUrl);<newline46mondego>    }<newline46mondego>}<newline46mondego>"
"8441splitHere46","20271260splitHere46","public List<HttpCookie> getCookiesList() throws Exception {<newline46mondego>    List<HttpCookie> httpCookiesList = inmemoryCookieStore.get(clientURI);<newline46mondego>    return httpCookiesList;<newline46mondego>}<newline46mondego><newline46mondego>public void addCookie(HttpCookie newCookie) {<newline46mondego>        inmemoryCookieStore.add(clientURI, newCookie);<newline46mondego>}<newline46mondego>"
"8442splitHere46","20271295splitHere46","protected void onCreate1(Bundle savedInstanceState) {"
"8443splitHere46","20271295splitHere46","}"
"8444splitHere46","20271295splitHere46","onCreate()"
"8445splitHere46","20271365splitHere46","removeBand(band)"
"8446splitHere46","20271365splitHere46","JRDesignSection"
"8447splitHere46","20271365splitHere46","((JRDesignSection)jasperDesign.getDetailSection()).addBand(newBand);<newline46mondego>((JRDesignSection)jasperDesign.getDetailSection()).removeBand(oldBand);<newline46mondego>"
"8448splitHere46","20271366splitHere46","player[3].getName()"
"8449splitHere46","20271366splitHere46","arr[3].getName()"
"8450splitHere46","20271366splitHere46","arr[3].getName()"
"8451splitHere46","20271366splitHere46","arr[numbHuman-1].getName()"
"8452splitHere46","20271366splitHere46","System.out.println(<doubleQuotes46>player <doubleQuotes46> + numbHuman + <doubleQuotes46>'s name is <doubleQuotes46> + arr[numbHuman-1].getName());<newline46mondego>"
"8453splitHere46","20271403splitHere46","type"
"8454splitHere46","20271403splitHere46","name"
"8455splitHere46","20271403splitHere46","public enum FileType <newline46mondego>{<newline46mondego>    FILE('-'), DIRECTORY('d'), SYMLINK('l'), DEVICE('b');<newline46mondego><newline46mondego>    private char name;<newline46mondego><newline46mondego>    FileType(char name) <newline46mondego>    {<newline46mondego>        this.name = name;<newline46mondego>    }<newline46mondego><newline46mondego>    public static FileType getFileTypeForName(final char name)<newline46mondego>    {<newline46mondego>        for (FileType type : FileType.values())<newline46mondego>            if (type.name == name)<newline46mondego>                return type;<newline46mondego><newline46mondego>        return null;<newline46mondego>    }<newline46mondego>}<newline46mondego>"
"8456splitHere46","20271403splitHere46","valueOf"
"8457splitHere46","20271403splitHere46","FileType type = FileType.valueOf(<doubleQuotes46>FILE<doubleQuotes46>); // Yields the FILE enum"
"8458splitHere46","20271424splitHere46","HttpClient"
"8459splitHere46","20271424splitHere46","setConnectionTimeout()"
"8460splitHere46","20271424splitHere46","setTimeout()"
"8461splitHere46","20271424splitHere46","Connection timeout"
"8462splitHere46","20271424splitHere46","Socket timeout"
"8463splitHere46","20271491splitHere46","if ((ComputerIn) % 3 + 1 == userInput)<newline46mondego>    return <doubleQuotes46>Win<doubleQuotes46>;<newline46mondego>else if ((userInput) % 3 + 1 == ComputerIn)<newline46mondego>    return <doubleQuotes46>Lose<doubleQuotes46><newline46mondego>else<newline46mondego>    return <doubleQuotes46>Draw<doubleQuotes46><newline46mondego>"
"8464splitHere46","20271491splitHere46","(ComputerIn+1)%3"
"8465splitHere46","20271491splitHere46","ComputerIn"
"8466splitHere46","20271491splitHere46","ComputerIn-1"
"8467splitHere46","20271491splitHere46","UserInput"
"8468splitHere46","20271491splitHere46","UserInput-1"
"8469splitHere46","20271539splitHere46","display"
"8470splitHere46","20271539splitHere46","panel"
"8471splitHere46","20271539splitHere46","add(display, BorderLayout.NORTH);<newline46mondego>    add(panel, BorderLayout.SOUTH);<newline46mondego>"
"8472splitHere46","20271539splitHere46","frame.add(display, BorderLayout.NORTH);<newline46mondego>    frame.add(panel, BorderLayout.SOUTH);<newline46mondego>"
"8473splitHere46","20271907splitHere46","strrev += Character.toChars(stack.pop());"
"8474splitHere46","20271907splitHere46","public static char pop()<newline46mondego>{<newline46mondego>   return stackArray[top--]; //access item, decrement top<newline46mondego>}<newline46mondego>"
"8475splitHere46","20271907splitHere46","new StringBuilder(<doubleQuotes46>Hello<doubleQuotes46>).reverse().toString()"
"8476splitHere46","20271907splitHere46","StringUtils.reverse()<newline46mondego>ArrayUtils.reverse(char[] array)<newline46mondego>"
"8477splitHere46","20272113splitHere46","if(condition for end the game) {<newline46mondego>        t.interrupt(); //here i need to destroy the thread<newline46mondego>        setVisible(false); //visibility to off<newline46mondego>        break;<newline46mondego>    }<newline46mondego>"
"8478splitHere46","20272235splitHere46","boolean bool = (a = true) || ((b = true) && (c = true));<newline46mondego>"
"8479splitHere46","20272235splitHere46","a = true"
"8480splitHere46","20272235splitHere46","true"
"8481splitHere46","20272235splitHere46","||"
"8482splitHere46","20272235splitHere46","||"
"8483splitHere46","20272235splitHere46","b"
"8484splitHere46","20272235splitHere46","c"
"8485splitHere46","20272238splitHere46","get()"
"8486splitHere46","20272238splitHere46","SwingUtilities.invokeLater(...)"
"8487splitHere46","20272238splitHere46","invokeLater(...)"
"8488splitHere46","20272238splitHere46","SwingUtilities.invokeLater(...)"
"8489splitHere46","20272238splitHere46","invokeLater(...)"
"8490splitHere46","20272238splitHere46","invokeLater(...)"
"8491splitHere46","20272238splitHere46","Thread.sleep(...)"
"8492splitHere46","20272452splitHere46","i = 89;"
"8493splitHere46","20272452splitHere46","Integer"
"8494splitHere46","20272452splitHere46","int"
"8495splitHere46","20272452splitHere46","i"
"8496splitHere46","20272452splitHere46","i"
"8497splitHere46","20272452splitHere46","Integer"
"8498splitHere46","20272452splitHere46","Integer"
"8499splitHere46","20272468splitHere46","public Bugs(String bt, int l, int a, String nt){<newline46mondego>      bugType=bt;<newline46mondego>      legs=l;<newline46mondego>      arms=a;<newline46mondego>      nativeTo= nt;<newline46mondego>   }<newline46mondego>"
"8500splitHere46","20272509splitHere46","sudo a2enmod ssl<newline46mondego>sudo rm -rf /etc/apache2/ssl<newline46mondego>sudo mkdir /etc/apache2/ssl<newline46mondego>sudo openssl req -new -x509 -days 365 -nodes -out /etc/apache2/ssl/apache.pem -keyout /etc/apache2/ssl/apache.key<newline46mondego>"
"8501splitHere46","20272510splitHere46","{\\some code}"
"8502splitHere46","20272510splitHere46","static"
"8503splitHere46","20272510splitHere46","static"
"8504splitHere46","20272510splitHere46","static"
"8505splitHere46","20272510splitHere46","Static Initializers"
"8506splitHere46","20272510splitHere46","Instance Initializers"
"8507splitHere46","20272510splitHere46","non-static"
"8508splitHere46","20272510splitHere46","static"
"8509splitHere46","20272510splitHere46","class A {  <newline46mondego>     static{  // static<newline46mondego>       System.out.println(<doubleQuotes46>Static block of Class A<doubleQuotes46>);  <newline46mondego>     }  <newline46mondego><newline46mondego>     { // non-static  <newline46mondego>       System.out.println(<doubleQuotes46>Non-Static block of a instance of Class A<doubleQuotes46>);  <newline46mondego>     }  <newline46mondego>  public A(){  <newline46mondego>    System.out.println(<doubleQuotes46>Constructing object of type A<doubleQuotes46>);  <newline46mondego>  }  <newline46mondego>}  <newline46mondego><newline46mondego>public class StaticTest {  <newline46mondego>  public static void main(String[] args) {  <newline46mondego>    A a1 = new A();  <newline46mondego>    A a2 = new A();  <newline46mondego><newline46mondego>  }  <newline46mondego>}  <newline46mondego>"
"8510splitHere46","20272510splitHere46","static block of Class A<newline46mondego>Non-Static block of a instance of Class A<newline46mondego>Constructing object of type A<newline46mondego>Non-Static block of a instance of Class A<newline46mondego>Constructing object of type A<newline46mondego>"
"8511splitHere46","20272541splitHere46","int"
"8512splitHere46","20272541splitHere46","0"
"8513splitHere46","20272541splitHere46","Strings"
"8514splitHere46","20272568splitHere46","pos.x - xscale < TimeToKill.player.position.x<newline46mondego>"
"8515splitHere46","20272568splitHere46","pos.x < TimeToKill.player.position.x<newline46mondego>"
"8516splitHere46","20272568splitHere46","hitTest"
"8517splitHere46","20272577splitHere46","getClass().getResource(<doubleQuotes46>....<doubleQuotes46>)"
"8518splitHere46","20272577splitHere46","setVisible(true)"
"8519splitHere46","20272577splitHere46","paintComponent(Graphics g)"
"8520splitHere46","20272577splitHere46","import java.awt.image.BufferedImage;<newline46mondego>import java.io.IOException;<newline46mondego>import java.net.URL;<newline46mondego>import javax.imageio.ImageIO;<newline46mondego>import javax.swing.*;<newline46mondego><newline46mondego>public class ShowImage {<newline46mondego><newline46mondego>   // ******* add the path to the image resource below *****<newline46mondego>   private static final String IMAGE_RESOURCE_PATH = <doubleQuotes46><doubleQuotes46>;<newline46mondego><newline46mondego>   public static void main(String[] args) {<newline46mondego>      URL imgUrl = ShowImage.class.getResource(IMAGE_RESOURCE_PATH);<newline46mondego>      BufferedImage img;<newline46mondego>      try {<newline46mondego>         img = ImageIO.read(imgUrl);<newline46mondego>         if (img == null) {<newline46mondego><newline46mondego>            String message = <doubleQuotes46>Image cannot be found at \<doubleQuotes46><doubleQuotes46><newline46mondego>                  + IMAGE_RESOURCE_PATH + <doubleQuotes46>\<doubleQuotes46><doubleQuotes46>;<newline46mondego>            JOptionPane.showMessageDialog(null, message);<newline46mondego>            System.exit(-1);<newline46mondego><newline46mondego>         }<newline46mondego>         Icon icon = new ImageIcon(img);<newline46mondego>         JOptionPane.showMessageDialog(null, icon);<newline46mondego>      } catch (IOException e) {<newline46mondego>         e.printStackTrace();<newline46mondego>      }<newline46mondego><newline46mondego>   }<newline46mondego>}<newline46mondego>"
"8521splitHere46","20272595splitHere46","InputStream"
"8522splitHere46","20272595splitHere46","Socket"
"8523splitHere46","20272595splitHere46","OutputStream"
"8524splitHere46","20272613splitHere46","// provide physical location of your file, I have assumed it is present<newline46mondego>    // in current directory<newline46mondego>    FileReader fis = new FileReader(<doubleQuotes46>test.txt<doubleQuotes46>);<newline46mondego>    BufferedReader br = new BufferedReader(fis);<newline46mondego>    String line = null;<newline46mondego>    // to keep count of shops in the file<newline46mondego>    int shopCount = 1;<newline46mondego>    // read line by line till you reach end of file<newline46mondego>    while ((line = br.readLine()) != null) {<newline46mondego>        // assuming each string starts with Shop<newline46mondego>        if (line.startsWith(<doubleQuotes46>Shop<doubleQuotes46>)) {<newline46mondego>            System.out.println(<doubleQuotes46>Shop <doubleQuotes46> + shopCount);<newline46mondego>            // assuming first line after string heading is number of<newline46mondego>            // employees<newline46mondego>            int numberOfEmployees = Integer.parseInt(br.readLine());<newline46mondego>            System.out.println(<doubleQuotes46>Number of employees <doubleQuotes46> + numberOfEmployees);<newline46mondego>            // for each employee read their wage and salary<newline46mondego>            for (int i = 0; i < numberOfEmployees; i++) {<newline46mondego>                // assuming wage and number of hours are separated by a<newline46mondego>                // space<newline46mondego>                // wage is of type int and number of hours is of type double<newline46mondego>                StringTokenizer st = new StringTokenizer(br.readLine());<newline46mondego>                while (st.hasMoreTokens()) {<newline46mondego>                    // convert wage to int<newline46mondego>                    int wages = Integer.parseInt(st.nextToken());<newline46mondego>                    // convert number of hours to double<newline46mondego>                    double hours = Double.parseDouble(st.nextToken());<newline46mondego>                    System.out<newline46mondego>                            .println(<doubleQuotes46>Wages <doubleQuotes46> + wages + <doubleQuotes46> Hours <doubleQuotes46> + hours);<newline46mondego><newline46mondego>                }<newline46mondego>            }// end reading details of each employee<newline46mondego>                // increment shop count to read details for next shop<newline46mondego>            shopCount++;<newline46mondego>        }<newline46mondego>    }<newline46mondego>"
"8525splitHere46","20272621splitHere46","NotifyServlet"
"8526splitHere46","20272621splitHere46","JsonFactory jsonFactory = new JacksonFactory();<newline46mondego>// notificationString is parsed form httpRequest's inputstream which is send from Mirror API<newline46mondego>Notification notification = jsonFactory.fromString(notificationString, Notification.class);<newline46mondego>if (notification.getUserActions().contains(new UserAction().setType(<doubleQuotes46>CUSTOM<doubleQuotes46>).setPayload(<doubleQuotes46>dealMenu<doubleQuotes46>)) {<newline46mondego>    // User selected CUSTOM menu item on your glassware        <newline46mondego>} <newline46mondego>"
"8527splitHere46","20272621splitHere46","http://localhost:8080/notify<newline46mondego>"
"8528splitHere46","20272621splitHere46","https://mirrornotifications.appspot.com/forward?url=http://localhost:8080/notify<newline46mondego>"
"8529splitHere46","20272621splitHere46","MirrorClient"
"8530splitHere46","20272621splitHere46","insertSubscription"
"8531splitHere46","20272621splitHere46","// To work with notifications, modify the notify callback's url by adding subscription-proxy<newline46mondego>// callbackUrl = <doubleQuotes46>https://mirrornotifications.appspot.com/forward?url=<doubleQuotes46> + callbackUrl;<newline46mondego>if(<doubleQuotes46>http://localhost:8080/notify<doubleQuotes46>.equals(callbackUrl)) {<newline46mondego>    callbackUrl = <doubleQuotes46>https://mirrornotifications.appspot.com/forward?url=<doubleQuotes46> + callbackUrl;<newline46mondego>}<newline46mondego>"
"8532splitHere46","20272649splitHere46","public static void main(String[] args) {<newline46mondego>  final Scanner scan = new Scanner(System.in);<newline46mondego><newline46mondego>  final int[] testScores = new int[3]; // use an array here<newline46mondego>  Arrays.fill(testScores, -1); // set all to -1 to know if we already got a proper input<newline46mondego><newline46mondego>  for (int i = 0; i < testScores.length; ++i) { // for loop simplifies the whole thing a lot<newline46mondego>    while ((testScores[i] < 0) || (testScores[i] > 100)) {<newline46mondego>      System.out.println(<doubleQuotes46>Please enter Test <doubleQuotes46> + (i + 1) + <doubleQuotes46>:<doubleQuotes46>);<newline46mondego>      testScores[i] = scan.nextInt();<newline46mondego>    }<newline46mondego>  }   <newline46mondego><newline46mondego>  int exam = -1; // Final is a bad name, because final is a reserved word<newline46mondego>  while ((exam < 0) || (exam > 100)) {<newline46mondego>    System.out.println(<doubleQuotes46>Please enter Final Exam:<doubleQuotes46>);<newline46mondego>    exam = scan.nextInt();<newline46mondego>  }<newline46mondego><newline46mondego>  Arrays.sort(testScores); // automatically sorts the entry from lowest to highest<newline46mondego>  final double AVG = (testScores[testScores.length - 1] + testScores[testScores.length - 2]) * 0.3 + exam * 0.4; // therefore the best grades are the last two entries<newline46mondego><newline46mondego>  if (AVG >= 90) {<newline46mondego>    System.out.println(<doubleQuotes46>A <doubleQuotes46> + AVG);<newline46mondego>  } else if (AVG >= 80) {<newline46mondego>    System.out.println(<doubleQuotes46>B <doubleQuotes46> + AVG);<newline46mondego>  } else if (AVG >= 70) {<newline46mondego>    System.out.println(<doubleQuotes46>C <doubleQuotes46> + AVG);<newline46mondego>  } else if (AVG >= 60) {<newline46mondego>    System.out.println(<doubleQuotes46>D <doubleQuotes46> + AVG);<newline46mondego>  } else {<newline46mondego>    System.out.println(<doubleQuotes46>F <doubleQuotes46> + AVG);<newline46mondego>  }<newline46mondego>}<newline46mondego>"
"8533splitHere46","20272690splitHere46","public static void main (String args[]){<newline46mondego>        String test = <doubleQuotes46>))(2.0+4.0)<doubleQuotes46>;<newline46mondego>        int i = 0;<newline46mondego>        labelLoop :<newline46mondego>            for (char now : test.toCharArray()){<newline46mondego>                switch (now) {<newline46mondego>                case '(':<newline46mondego>                    break labelLoop;<newline46mondego>                case ')':<newline46mondego>                case '/':<newline46mondego>                case '*':<newline46mondego>                case '+':<newline46mondego>                case '-':<newline46mondego>                i++;<newline46mondego>                }<newline46mondego>            }<newline46mondego>        System.out.println(i);<newline46mondego>    }<newline46mondego>"
"8534splitHere46","20272710splitHere46","public class Tree {<newline46mondego><newline46mondego>    public static final void main(String[] args)<newline46mondego>    {<newline46mondego>        int n = 10;<newline46mondego>        for(int i = 0; i < n; ++i)<newline46mondego>        {<newline46mondego>            for(int j = 0; j < n-i; ++j)<newline46mondego>                System.out.print(<doubleQuotes46> <doubleQuotes46>);<newline46mondego>            for(int k = 0; k < i*2-1; ++k)<newline46mondego>                System.out.print(<doubleQuotes46>*<doubleQuotes46>);<newline46mondego><newline46mondego>            System.out.println();<newline46mondego><newline46mondego>        }<newline46mondego>    }<newline46mondego>}<newline46mondego>"
"8535splitHere46","20272860splitHere46","[1,<doubleQuotes46>MyService<doubleQuotes46>,2,1,{<doubleQuotes46>1<doubleQuotes46>:{<doubleQuotes46>rec<doubleQuotes46>:{<doubleQuotes46>1<doubleQuotes46>:{<doubleQuotes46>str<doubleQuotes46>:<doubleQuotes46>Error: Process() failed<doubleQuotes46>}}}}]<newline46mondego>"
"8536splitHere46","20273051splitHere46","Type collectionType = new TypeToken<Collection<A>>(){}.getType();<newline46mondego>Collection<A> list = gson.fromJson(json, collectionType);   <newline46mondego>"
"8537splitHere46","20273051splitHere46","A"
"8538splitHere46","20273081splitHere46","y0 = y2 - x2 * (y1 - y2) / (x1 - x2)<newline46mondego>"
"8539splitHere46","20273102splitHere46","MotionEvent.ACTION_DOWN"
"8540splitHere46","20273102splitHere46","MotionEvent.ACTION_UP"
"8541splitHere46","20273102splitHere46","@Override<newline46mondego>    public boolean onTouchEvent(MotionEvent event) {<newline46mondego>        if(event.getAction()==MotionEvent.ACTION_DOWN){<newline46mondego>              //start timer<newline46mondego>        } else if(event.getAction()==MotionEvent.ACTION_UP){<newline46mondego>             //end timer<newline46mondego>        }<newline46mondego>        return true;<newline46mondego>    }<newline46mondego>"
"8542splitHere46","20273177splitHere46","UIManager.setLookAndFeel(String className)"
"8543splitHere46","20273177splitHere46","LookAndFeel"
"8544splitHere46","20273177splitHere46","className"
"8545splitHere46","20273177splitHere46","UIManager.getSystemLookAndFeelClassName()"
"8546splitHere46","20273177splitHere46","LookAndFeel"
"8547splitHere46","20273177splitHere46","LookAndFeel"
"8548splitHere46","20273177splitHere46","UIManager.setLookAndFeel(UIManager.getSystemLookAndFeelClassName());<newline46mondego>"
"8549splitHere46","20273177splitHere46","JFrame"
"8550splitHere46","20273256splitHere46","@POST<newline46mondego>@Consumes(MediaType.APPLICATION_JSON)<newline46mondego>public String registerUser(MyUser myUser)<newline46mondego>{<newline46mondego>    //code to deal with the json<newline46mondego>}<newline46mondego><newline46mondego><newline46mondego>public class MyUser{<newline46mondego>   @JsonProperty<newline46mondego>   private String name;<newline46mondego>   @JsonProperty<newline46mondego>   private String surname;<newline46mondego><newline46mondego> //getters & setters & constructors if you need<newline46mondego>}<newline46mondego>"
"8551splitHere46","20273276splitHere46","format(Date date)"
"8552splitHere46","20273276splitHere46","Date"
"8553splitHere46","20273276splitHere46","String"
"8554splitHere46","20273358splitHere46","Pattern pattern = Pattern.compile(<doubleQuotes46>^(\\d{2,3})[.,]?(\\d{3})[.,]?(\\d{2})$<doubleQuotes46>);<newline46mondego>String replacement = <doubleQuotes46>$1,$2.$3<doubleQuotes46>;<newline46mondego><newline46mondego>String[] samples = {<doubleQuotes46>14.978.00<doubleQuotes46>, <doubleQuotes46>14,97800<doubleQuotes46>, <doubleQuotes46>14.97800<doubleQuotes46>, <doubleQuotes46>14,978.00<doubleQuotes46>};<newline46mondego>for (String sample : samples) {<newline46mondego>    Matcher matcher = pattern.matcher(sample);<newline46mondego>    System.out.println(sample + <doubleQuotes46>\t= <doubleQuotes46> + matcher.replaceAll(replacement));<newline46mondego>}<newline46mondego>"
"8555splitHere46","20273360splitHere46","ArrayList<Address>"
"8556splitHere46","20273463splitHere46","String urlString = <doubleQuotes46>https://www.grubhub.com/browse/<doubleQuotes46>;<newline46mondego>URL url = new URL(urlString);<newline46mondego>SSLSocketFactory factory = (SSLSocketFactory) SSLSocketFactory.getDefault();<newline46mondego>SSLSocket socket = (SSLSocket) factory.createSocket(url.getHost(), 443);<newline46mondego>socket.setEnabledProtocols(new String[]{<doubleQuotes46>SSLv3<doubleQuotes46>}); // <--- THIS IS THE WORK-AROUND<newline46mondego>PrintWriter out = new PrintWriter(<newline46mondego>        new OutputStreamWriter(<newline46mondego>                socket.getOutputStream()));<newline46mondego>out.println(<doubleQuotes46>GET <doubleQuotes46> + urlString + <doubleQuotes46> HTTP/1.1<doubleQuotes46>);<newline46mondego>out.println();<newline46mondego>out.flush();<newline46mondego><newline46mondego>BufferedReader in = new BufferedReader(new InputStreamReader(socket.getInputStream()));<newline46mondego><newline46mondego>String line;<newline46mondego>while ((line = in.readLine()) != null) {<newline46mondego>    System.out.println(line);<newline46mondego>}<newline46mondego><newline46mondego>out.close();<newline46mondego>in.close();<newline46mondego>"
"8557splitHere46","20273463splitHere46","socket.setEnabledProtocols(new String[]{<doubleQuotes46>SSLv3<doubleQuotes46>});<newline46mondego>"
"8558splitHere46","20273488splitHere46","private BigInteger calculateE(BigInteger n, byte[] message)<newline46mondego>{<newline46mondego>    /* n is curve order value */<newline46mondego>    int log2n = n.bitLength();<newline46mondego>    /* and message is a hash */<newline46mondego>    int messageBitLength = message.length * 8;<newline46mondego><newline46mondego>    BigInteger e = new BigInteger(1, message);<newline46mondego>    /* If message is longer than curve order */<newline46mondego>    if (log2n < messageBitLength)<newline46mondego>    {<newline46mondego>        /* only log2n bits are taken from the left */<newline46mondego>        e = e.shiftRight(messageBitLength - log2n);<newline46mondego>    }<newline46mondego>    return e;<newline46mondego>}<newline46mondego>"
"8559splitHere46","20273506splitHere46","ImageButton ib = new ImageButton(this);<newline46mondego>yourContainer.addView(ib);//here yourContainer is ParentLayout<newline46mondego>"
"8560splitHere46","20273764splitHere46","public String intercept(ActionInvocation actionInvocation) throws Exception <newline46mondego>{<newline46mondego>    Map<String, String[]> parameters = ServletActionContext.getRequest().getParameterMap();  <newline46mondego>    String userId  = parameters.get(<doubleQuotes46>bean.userId<doubleQuotes46>)[0];<newline46mondego>    System.out.println(<doubleQuotes46>Got it:<doubleQuotes46>+userId);<newline46mondego>    return actionInvocation.invoke();<newline46mondego>}<newline46mondego>"
"8561splitHere46","20273777splitHere46","Arraylist"
"8562splitHere46","20273777splitHere46","ArrayList"
"8563splitHere46","20273777splitHere46","willBeRemovedList"
"8564splitHere46","20273806splitHere46","synchronized"
"8565splitHere46","20273806splitHere46","synchronized"
"8566splitHere46","20273806splitHere46","doSomeVeryLongRunningTask()"
"8567splitHere46","20273806splitHere46","synchronized"
"8568splitHere46","20273806splitHere46","doSomeVeryLongRunningTask()"
"8569splitHere46","20273806splitHere46","wait"
"8570splitHere46","20273806splitHere46","notify"
"8571splitHere46","20273806splitHere46","notify"
"8572splitHere46","20273806splitHere46","wait"
"8573splitHere46","20273806splitHere46","synchronized"
"8574splitHere46","20273806splitHere46","thr1"
"8575splitHere46","20273806splitHere46","boolean"
"8576splitHere46","20273806splitHere46","boolean condition;<newline46mondego>"
"8577splitHere46","20273806splitHere46","while(!isDone) {<newline46mondego>  try {<newline46mondego>    synchronized(this) {<newline46mondego>      while(!condition) wait();<newline46mondego>      if(isDone) break;// skip doSomeVeryLongRunningTask()<newline46mondego>      condition=false;<newline46mondego>    }<newline46mondego>  } catch(InterruptedException e) {<newline46mondego>    e.printStackTrace();<newline46mondego>  }<newline46mondego>  doSomeVeryLongRunningTask();<newline46mondego>}<newline46mondego>"
"8578splitHere46","20273806splitHere46","synchronized(thr1) {<newline46mondego>  thr1.condition=true;<newline46mondego>  thr1.notify();<newline46mondego>}<newline46mondego>"
"8579splitHere46","20273815splitHere46","public static void main(String[] args){}"
"8580splitHere46","20273815splitHere46","public class TestDay2 {<newline46mondego>public static void main(String[] args) {<newline46mondego>    DayTwo example = new DayTwo();<newline46mondego>    example.displayDay();<newline46mondego>    }<newline46mondego>}<newline46mondego>"
"8581splitHere46","20273942splitHere46","public Image scale(Image original, int newWidth, int newHeight) {<newline46mondego><newline46mondego> int[] rawInput = new int[original.getHeight() * original.getWidth()];<newline46mondego> original.getRGB(rawInput, 0, original.getWidth(), 0, 0, original.getWidth(), original.getHeight());<newline46mondego><newline46mondego> int[] rawOutput = new int[newWidth * newHeight];<newline46mondego><newline46mondego> // YD compensates for the x loop by subtracting the width back out<newline46mondego> int YD = (original.getHeight() / newHeight) * original.getWidth() - original.getWidth();<newline46mondego> int YR = original.getHeight() % newHeight;<newline46mondego> int XD = original.getWidth() / newWidth;<newline46mondego> int XR = original.getWidth() % newWidth;<newline46mondego> int outOffset = 0;<newline46mondego> int inOffset = 0;<newline46mondego><newline46mondego> for (int y = newHeight, YE = 0; y > 0; y--) {<newline46mondego>   for (int x = newWidth, XE = 0; x > 0; x--) {<newline46mondego>     rawOutput[outOffset++] = rawInput[inOffset];<newline46mondego>     inOffset += XD;<newline46mondego>     XE += XR;<newline46mondego>     if (XE >= newWidth) {<newline46mondego>       XE -= newWidth;<newline46mondego>       inOffset++;<newline46mondego>     }<newline46mondego>   }<newline46mondego>   inOffset += YD;<newline46mondego>   YE += YR;<newline46mondego>   if (YE >= newHeight) {<newline46mondego>     YE -= newHeight;<newline46mondego>     inOffset += original.getWidth();<newline46mondego>   }<newline46mondego> }<newline46mondego> rawInput = null;<newline46mondego> return Image.createRGBImage(rawOutput, newWidth, newHeight, true);<newline46mondego>"
"8582splitHere46","20274303splitHere46","Student"
"8583splitHere46","20274303splitHere46","java.util.Collections.unmodfiableList"
"8584splitHere46","20274303splitHere46","public final class MyImmutableDepartment {<newline46mondego>    private final MyImmutableLab lab;<newline46mondego>    private final String departmentId;<newline46mondego><newline46mondego>    public MyImmutableDepartment(Department thirdPartyMutableDepartment) {<newline46mondego>        this.departmentId = thirdPartyMutableDepartment.getId();<newline46mondego>        this.lab = new MyImmutableLab(thirdPartyMutableDepartment.getLab());<newline46mondego>    }<newline46mondego><newline46mondego>    // getters and the MyImmutableLab class left as an exercise<newline46mondego>}<newline46mondego>"
"8585splitHere46","20274326splitHere46","@Value"
"8586splitHere46","20274326splitHere46","AutowiredAnnotationBeanPostProcessor"
"8587splitHere46","20274326splitHere46","Throws exception<newline46mondego>"
"8588splitHere46","20274326splitHere46","public class CustomBean {<newline46mondego>    private String value;<newline46mondego><newline46mondego>    public String getValue() {<newline46mondego>        throw new NullPointerException();<newline46mondego>    }<newline46mondego>    public void setValue(String value) {<newline46mondego>        this.value = value;<newline46mondego>    }<newline46mondego>}<newline46mondego><newline46mondego>@Component<newline46mondego>public class MyComponent {<newline46mondego>    private static final String a = <doubleQuotes46><doubleQuotes46>;<newline46mondego>    @Value(<doubleQuotes46>#{customBean.value}<doubleQuotes46>)<newline46mondego>    public String value;<newline46mondego>}<newline46mondego><newline46mondego><context:component-scan base-package=<doubleQuotes46>com.spring<doubleQuotes46>></context:component-scan><newline46mondego><context:property-placeholder location=<doubleQuotes46>classpath:values.properties<doubleQuotes46>/> <newline46mondego><bean id=<doubleQuotes46>customBean<doubleQuotes46> class=<doubleQuotes46>com.spring.CustomBean<doubleQuotes46> ><newline46mondego>    <property name=<doubleQuotes46>value<doubleQuotes46> value=<doubleQuotes46>bomb<doubleQuotes46>></property><newline46mondego></bean><newline46mondego>"
"8589splitHere46","20274326splitHere46","@Value"
"8590splitHere46","20274326splitHere46","getValue()"
"8591splitHere46","20274326splitHere46","CustomBean"
"8592splitHere46","20274326splitHere46","org.springframework.expression.spel.support.ReflectivePropertyAccessor$OptimalPropertyAccessor#read(..)"
"8593splitHere46","20274326splitHere46","catch (Exception e)"
"8594splitHere46","20274326splitHere46","Exception"
"8595splitHere46","20274326splitHere46","AccessException"
"8596splitHere46","20274326splitHere46","Exception"
"8597splitHere46","20274326splitHere46","what will happen when the expression in a @Value annotation<newline46mondego><newline46mondego>Returns null<newline46mondego>"
"8598splitHere46","20274326splitHere46","public class CustomBean {<newline46mondego>    private String value;<newline46mondego><newline46mondego>    public String getValue() {<newline46mondego>        return null;<newline46mondego>    }<newline46mondego>    public void setValue(String value) {<newline46mondego>        this.value = value;<newline46mondego>    }<newline46mondego>}<newline46mondego>"
"8599splitHere46","20274326splitHere46","null"
"8600splitHere46","20274326splitHere46","NullPointerException"
"8601splitHere46","20274326splitHere46","Is missing<newline46mondego>"
"8602splitHere46","20274326splitHere46","@Value(<doubleQuotes46>#{customBean.nonExistent}<doubleQuotes46>)<newline46mondego>public String value;<newline46mondego>"
"8603splitHere46","20274326splitHere46","nonExistent"
"8604splitHere46","20274326splitHere46","org.springframework.expression.spel.ast.PropertyOrFieldReference#readProperty()"
"8605splitHere46","20274326splitHere46","SpelEvaluationException"
"8606splitHere46","20274326splitHere46","@Value(<doubleQuotes46>${properties.nonExistent}<doubleQuotes46>) // note $ vs #<newline46mondego>public String value;<newline46mondego>"
"8607splitHere46","20274326splitHere46","PropertyPlaceholderConfigurer"
"8608splitHere46","20274326splitHere46","PropertySource"
"8609splitHere46","20274326splitHere46","IllegalArgumentException"
"8610splitHere46","20274326splitHere46","org.springframework.util.PropertyPlaceholderHelper#parseStringValue(..)"
"8611splitHere46","20274559splitHere46","Subject"
"8612splitHere46","20274559splitHere46","Subject"
"8613splitHere46","20274559splitHere46","Observable"
"8614splitHere46","20274559splitHere46","Observer"
"8615splitHere46","20274559splitHere46","import rx.lang.scala._<newline46mondego>import rx.lang.scala.subjects._<newline46mondego><newline46mondego>val subject = ReplaySubject[Int]()             <newline46mondego>val initial = Observable(1,2,3,4)     <newline46mondego>val target = initial ++ subject   // concat the observables<newline46mondego><newline46mondego>val subscription1 = target subscribe(println(_))<newline46mondego>val subscription2 = target subscribe(println(_))<newline46mondego><newline46mondego>subject.onNext(4)    // emit '4'<newline46mondego>subject.onNext(6)    // emit '6'   <newline46mondego>"
"8616splitHere46","20274566splitHere46","Calendar c = Calendar.getInstance();<newline46mondego>int hours = c.get(Calendar.HOUR_OF_DAY);<newline46mondego>int minutes = c.get(Calendar.MINUTE);<newline46mondego>int seconds = c.get(Calendar.SECOND);<newline46mondego><newline46mondego>if(hours*3600 + minutes*60 + seconds < 1800){<newline46mondego>    // Day changed since last task<newline46mondego>}<newline46mondego>"
"8617splitHere46","20274642splitHere46","replace"
"8618splitHere46","20274642splitHere46","replaceAll"
"8619splitHere46","20274642splitHere46","replaceAll"
"8620splitHere46","20274642splitHere46","fileAddress = fileAddress.replace(<doubleQuotes46>\\<doubleQuotes46>, <doubleQuotes46>\\\\<doubleQuotes46>);<newline46mondego>"
"8621splitHere46","20274642splitHere46","replaceAll"
"8622splitHere46","20274642splitHere46","regexReplace"
"8623splitHere46","20274655splitHere46","ProfileModel"
"8624splitHere46","20274655splitHere46","profile"
"8625splitHere46","20274655splitHere46","@(myProfile: profile.ProfileModel)<newline46mondego>"
"8626splitHere46","20274655splitHere46","models"
"8627splitHere46","20274655splitHere46","controllers"
"8628splitHere46","20274695splitHere46","loanDate"
"8629splitHere46","20274695splitHere46","loan.getLoanDate().toString()"
"8630splitHere46","20274695splitHere46","public Loan(double annualInterestRate, int numberOfYears,<newline46mondego>    double loanAmount) {<newline46mondego>    this.annualInterestRate = annualInterestRate;<newline46mondego>    this.numberOfYears = numberOfYears;<newline46mondego>    this.loanAmount = loanAmount;<newline46mondego>    this.loanDate = new Date();<newline46mondego>}<newline46mondego>"
"8631splitHere46","20274695splitHere46","public void setAnnualInterestRate(double annualInterestRate) {<newline46mondego>    this.annualInterestRate = annualInterestRate;<newline46mondego>}<newline46mondego>"
"8632splitHere46","20274773splitHere46","public static <T extends Enum<T>> T valueOf(Class<T> enumType, String name)  <newline46mondego>"
"8633splitHere46","20274773splitHere46","Enum.valueOf(enumClass,fieldValue)"
"8634splitHere46","20274773splitHere46","java.io.ObjectInputStream#readEnum<newline46mondego>"
"8635splitHere46","20274776splitHere46","public static CountDownLatch latch = new CountDownLatch(1);<newline46mondego>private static class Job implements Runnable{<newline46mondego>private int balance;<newline46mondego><newline46mondego>public void run(){<newline46mondego>    try {<newline46mondego>    latch.await();<newline46mondego>    } catch (InterruptedException e) {}<newline46mondego>    for (int i = 0; i < 50000; i++) {<newline46mondego>        //existing code<newline46mondego>    }<newline46mondego>}<newline46mondego>public void increment(){<newline46mondego>    int i = balance;<newline46mondego>    //make it work harder so there's more opportunity for an actual interleave<newline46mondego>    balance = new BigInteger(Integer.toString(i)).add(BigInteger.ONE).intValue();<newline46mondego>}<newline46mondego>}<newline46mondego><newline46mondego>public static void main(String[] args) {<newline46mondego>    //existing code<newline46mondego>    alpha.start();<newline46mondego>    beta.start();<newline46mondego>    try {<newline46mondego>        Thread.sleep(100);<newline46mondego>    } catch (InterruptedException e) {}<newline46mondego>    latch.countDown();<newline46mondego><newline46mondego>}<newline46mondego>"
"8636splitHere46","20274788splitHere46","FocusLisetener"
"8637splitHere46","20274788splitHere46","ActionListener"
"8638splitHere46","20274788splitHere46","FocusGained"
"8639splitHere46","20274788splitHere46","FocusLost"
"8640splitHere46","20274788splitHere46","actionPerformed"
"8641splitHere46","20274788splitHere46","CellEditor"
"8642splitHere46","20274788splitHere46","- xxxx"
"8643splitHere46","20274788splitHere46","-"
"8644splitHere46","20274788splitHere46","CellRenderer"
"8645splitHere46","20274788splitHere46","class CustomRenderer extends DefaultTableCellRenderer {<newline46mondego><newline46mondego>     public void setValue(Object value) <newline46mondego>     {<newline46mondego>         setText(<doubleQuotes46>- <doubleQuotes46>+value);<newline46mondego>      }<newline46mondego>  }<newline46mondego><newline46mondego>class MyCellEditor extends AbstractCellEditor<newline46mondego>                         implements TableCellEditor,<newline46mondego>                                    FocusListener,<newline46mondego>                                    ActionListener<newline46mondego>{<newline46mondego>    JTextField textFeild;<newline46mondego>    String currentValue;<newline46mondego><newline46mondego>    JTable table;<newline46mondego>    int row, col;<newline46mondego>    public MyCellEditor(JTable table) {<newline46mondego>        this.table = table;<newline46mondego>        textFeild = new JTextField();<newline46mondego>        textFeild.addActionListener(this);<newline46mondego>        textFeild.addFocusListener(this);<newline46mondego>    }<newline46mondego><newline46mondego><newline46mondego>    @Override<newline46mondego>    public Object getCellEditorValue() {<newline46mondego>        return currentValue;<newline46mondego>    }<newline46mondego><newline46mondego>    @Override<newline46mondego>    public Component getTableCellEditorComponent(JTable table, Object value, boolean isSelected, int row, int column) {<newline46mondego><newline46mondego>        currentValue = (String)value;<newline46mondego>        return textFeild;<newline46mondego><newline46mondego>    }<newline46mondego><newline46mondego>    @Override<newline46mondego>    public void focusGained(FocusEvent e) {<newline46mondego>        textFeild.setText(<doubleQuotes46><doubleQuotes46>);<newline46mondego>        row = table.getSelectedRow();<newline46mondego>        col = table.getSelectedColumn();<newline46mondego><newline46mondego>    }<newline46mondego><newline46mondego>    @Override<newline46mondego>    public void focusLost(FocusEvent e) {<newline46mondego><newline46mondego>        if(!textFeild.getText().equals(<doubleQuotes46><doubleQuotes46>))<newline46mondego>           //currentValue = textFeild.getText();<newline46mondego>           table.setValueAt(textFeild.getText(), row, col);<newline46mondego><newline46mondego>        fireEditingStopped();<newline46mondego><newline46mondego>    }<newline46mondego><newline46mondego>    @Override<newline46mondego>    public void actionPerformed(ActionEvent e) {<newline46mondego>       if(!textFeild.getText().trim().equals(<doubleQuotes46><doubleQuotes46>))<newline46mondego>           currentValue = textFeild.getText();<newline46mondego>       fireEditingStopped();<newline46mondego>    }<newline46mondego><newline46mondego><newline46mondego>}<newline46mondego>"
"8646splitHere46","20274962splitHere46","Grid"
"8647splitHere46","20274962splitHere46","Square"
"8648splitHere46","20274962splitHere46","Worker"
"8649splitHere46","20274962splitHere46","Owner"
"8650splitHere46","20274962splitHere46","Grid"
"8651splitHere46","20274962splitHere46","Square"
"8652splitHere46","20274962splitHere46","Worker"
"8653splitHere46","20274962splitHere46","public class Owner {<newline46mondego>  //structure that store grid, all related squares and all related workers<newline46mondego>  private Grid grid;<newline46mondego>  private Map<Square, Collection<Worker>> squareWorkerMap;      <newline46mondego><newline46mondego>  public Grid getGrid() {<newline46mondego>    return grid;<newline46mondego>  }<newline46mondego><newline46mondego>  public Collection<Square> getAllSquares() {<newline46mondego>    return squareWorkerMap.values();<newline46mondego>  } <newline46mondego><newline46mondego>  public Collection<Worker> getWorkers(Square sq) {<newline46mondego>    squareWorkerMap.get(sq);<newline46mondego>  } <newline46mondego><newline46mondego>  public ??? getSquare(Worker worker) {<newline46mondego>    //implementation depends on if worker can belong to many squares<newline46mondego>  }<newline46mondego>}<newline46mondego><newline46mondego>public class Grid {<newline46mondego>  private Owner mainTopOwner;<newline46mondego><newline46mondego>  public Collection<Square> getSquares() {<newline46mondego>    return mainTopOwner.getAllSquares();<newline46mondego>  }<newline46mondego>  public Collection<Worker> getWorkers(Square sq) {<newline46mondego>    return mainTopOwner.getWorkers(sq);<newline46mondego>  }<newline46mondego>}<newline46mondego><newline46mondego>public class Square {<newline46mondego>  private Owner mainTopOwner;<newline46mondego><newline46mondego>  public Collection<Workers> getWorkers() {<newline46mondego>    return mainTopOwner.getWorkers(this);  <newline46mondego>  }<newline46mondego>  public Grid getGrid() {<newline46mondego>     return mainTopOwner.getGrid;<newline46mondego>  } <newline46mondego>}<newline46mondego><newline46mondego>public class Worker {<newline46mondego>  private Owner mainTopOwner;<newline46mondego><newline46mondego>  public Square getSquare() {<newline46mondego>    return mainTopOwner.getSquare(this)<newline46mondego>  }<newline46mondego>  public Grid getGrid() {<newline46mondego>    return mainTopOwner.getGrid;<newline46mondego>  }<newline46mondego>}<newline46mondego>"
"8654splitHere46","20274973splitHere46","System.out"
"8655splitHere46","20274973splitHere46","if (total > reccomended_max){<newline46mondego>    String message = <doubleQuotes46>The total staff wages for <doubleQuotes46> + ...;<newline46mondego>    try (PrintStream out = new PrintStream(new FileOutputStream(<doubleQuotes46>output.txt<doubleQuotes46>, true))) {<newline46mondego>        out.println(message);<newline46mondego>    } // here, the stream will be automatically flushed and closed!<newline46mondego><newline46mondego>    System.out.println(message);<newline46mondego>} else {<newline46mondego>    System.out.println(<doubleQuotes46>The total staff wages for <doubleQuotes46> + Unitnum + <doubleQuotes46> is Â£<doubleQuotes46> +total + <doubleQuotes46>, therefore it is lower than the RM<doubleQuotes46>);<newline46mondego>}<newline46mondego>"
"8656splitHere46","20275021splitHere46","JTextArea"
"8657splitHere46","20275021splitHere46","setSize"
"8658splitHere46","20275021splitHere46","setText"
"8659splitHere46","20275021splitHere46","append"
"8660splitHere46","20275021splitHere46","JScrollPane"
"8661splitHere46","20275021splitHere46","JFrame"
"8662splitHere46","20275021splitHere46","JFrame displayframe = new JFrame(<doubleQuotes46>All Details<doubleQuotes46>);<newline46mondego>displayframe.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);<newline46mondego>displayframe.setLayout(new FlowLayout());<newline46mondego><newline46mondego>JTextArea text = new JTextArea(30,30);<newline46mondego>text.setEditable(false);<newline46mondego>text.append(<doubleQuotes46>22323sfasfs22323sfasfs22323sfasfs22323sfasfs22323sfasfs22323sfasfs22323sfasfs22323sfasfs22323sfasfs22323sfasfs22323sfasfs22323sfasfs22323sfasfs22323sfasfs22323sfasfs22323sfasfs22323sfasfs22323sfasfs22323sfasfs22323sfasfs22323sfasfs22323sfasfs22323sfasfs22323sfasfs22323sfasfs22323sfasfs22323sfasfs22323sfasfs22323sfasfs22323sfasfs22323sfasfs22323sfasfs22323sfasfs22323sfasfs22323sfasfs22323sfasfs22323sfasfs22323sfasfs22323sfasfs22323sfasfs22323sfasfs22323sfasfs22323sfasfs22323sfasfs22323sfasfs22323sfasfs22323sfasfs22323sfasfs22323sfasfs22323sfasfs22323sfasfs22323sfasfs22323sfasfs22323sfasfs22323sfasfs22323sfasfs22323sfasfs22323sfasfs22323sfasfs22323sfasfs22323sfasfs22323sfasfs22323sfasfs22323sfasfs22323sfasfs22323sfasfs22323sfasfs22323sfasfs22323sfasfs22323sfasfs22323sfasfs22323sfasfs22323sfasfs22323sfasfs22323sfasfs22323sfasfs22323sfasfs22323sfasfs22323sfasfs22323sfasfs22323sfasfs22323sfasfs22323sfasfs22323sfasfs22323sfasfs22323sfasfs22323sfasfs22323sfasfs22323sfasfs22323sfasfs22323sfasfs22323sfasfs22323sfasfs22323sfasfs22323sfasfs22323sfasfs22323sfasfs22323sfasfs22323sfasfs22323sfasfs22323sfasfs22323sfasfs22323sfasfs22323sfasfs22323sfasfs22323sfasfs22323sfasfs22323sfasfs22323sfasfs22323sfasfs22323sfasfs22323sfasfs22323sfasfs22323sfasfs22323sfasfs22323sfasfs22323sfasfs22323sfasfs22323sfasfs22323sfasfs22323sfasfs22323sfasfs22323sfasfs22323sfasfs22323sfasfs22323sfasfs22323sfasfs22323sfasfs22323sfasfs22323sfasfs22323sfasfs22323sfasfs22323sfasfs22323sfasfs22323sfasfs22323sfasfs22323sfasfs22323sfasfs\n22323sfasfs22323sfasfs22323sfasfs22323sfasfs22323sfasfs22323sfasfs22323sfasfs22323sfasfs22323sfasfs22323sfasfs22323sfasfs22323sfasfs22323sfasfs22323sfasfs22323sfasfs22323sfasfs22323sfasfs22323sfasfs22323sfasfs22323sfasfs22323sfasfs22323sfasfs22323sfasfs22323sfasfs22323sfasfs22323sfasfs22323sfasfs22323sfasfs22323sfasfs22323sfasfs22323sfasfs22323sfasfs22323sfasfs22323sfasfs22323sfasfs22323sfasfs22323sfasfs22323sfasfs22323sfasfs22323sfasfs22323sfasfs22323sfasfs22323sfasfs22323sfasfs22323sfasfs22323sfasfs22323sfasfs22323sfasfs22323sfasfs22323sfasfs22323sfasfs22323sfasfs22323sfasfs22323sfasfs22323sfasfs22323sfasfs22323sfasfs22323sfasfs22323sfasfs22323sfasfs22323sfasfs22323sfasfs22323sfasfs22323sfasfs22323sfasfs22323sfasfs22323sfasfs22323sfasfs22323sfasfs22323sfasfs22323sfasfs22323sfasfs22323sfasfs22323sfasfs22323sfasfs22323sfasfs22323sfasfs22323sfasfs22323sfasfs22323sfasfs22323sfasfs22323sfasfs22323sfasfs22323sfasfs22323sfasfs22323sfasfs22323sfasfs22323sfasfs22323sfasfs22323sfasfs22323sfasfs22323sfasfs22323sfasfs22323sfasfs22323sfasfs22323sfasfs22323sfasfs22323sfasfs22323sfasfs22323sfasfs22323sfasfs22323sfasfs22323sfasfs22323sfasfs22323sfasfs\n22323sfasfs22323sfasfs22323sfasfs22323sfasfs22323sfasfs22323sfasfs22323sfasfs22323sfasfs22323sfasfs22323sfasfs22323sfasfs22323sfasfs22323sfasfs22323sfasfs22323sfasfs22323sfasfs22323sfasfs22323sfasfs22323sfasfs22323sfasfs22323sfasfs22323sfasfs22323sfasfs22323sfasfs22323sfasfs22323sfasfs22323sfasfs22323sfasfs22323sfasfs22323sfasfs22323sfasfs22323sfasfs22323sfasfs22323sfasfs22323sfasfs22323sfasfs22323sfasfs22323sfasfs22323sfasfs22323sfasfs22323sfasfs22323sfasfs22323sfasfs22323sfasfs22323sfasfs22323sfasfs22323sfasfs22323sfasfs22323sfasfs22323sfasfs22323sfasfs22323sfasfs22323sfasfs22323sfasfs22323sfasfs22323sfasfs22323sfasfs22323sfasfs22323sfasfs22323sfasfs22323sfasfs22323sfasfs22323sfasfs22323sfasfs22323sfasfs22323sfasfs22323sfasfs22323sfasfs22323sfasfs22323sfasfs22323sfasfs22323sfasfs22323sfasfs22323sfasfs22323sfasfs22323sfasfs22323sfasfs22323sfasfs22323sfasfs22323sfasfs22323sfasfs22323sfasfs22323sfasfs22323sfasfs22323sfasfs22323sfasfs22323sfasfs22323sfasfs22323sfasfs22323sfasfs22323sfasfs22323sfasfs22323sfasfs22323sfasfs22323sfasfs22323sfasfs22323sfasfs22323sfasfs22323sfasfs22323sfasfs22323sfasfs22323sfasfs22323sfasfs22323sfasfs22323sfasfs22323sfasfs22323sfasfs22323sfasfs22323sfasfs22323sfasfs22323sfasfs22323sfasfs22323sfasfs22323sfasfs22323sfasfs22323sfasfs22323sfasfs22323sfasfs22323sfasfs22323sfasfs22323sfasfs22323sfasfs22323sfasfs22323sfasfs22323sfasfs22323sfasfs22323sfasfs22323sfasfs22323sfasfs22323sfasfs22323sfasfs22323sfasfs22323sfasfs22323sfasfs22323sfasfs22323sfasfs22323sfasfs22323sfasfs\n22323sfasfs22323sfasfs22323sfasfs22323sfasfs22323sfasfs22323sfasfs22323sfasfs22323sfasfs22323sfasfs22323sfasfs22323sfasfs22323sfasfs22323sfasfs22323sfasfs22323sfasfs22323sfasfs22323sfasfs22323sfasfs22323sfasfs22323sfasfs22323sfasfs22323sfasfs22323sfasfs22323sfasfs22323sfasfs22323sfasfs22323sfasfs22323sfasfs22323sfasfs22323sfasfs22323sfasfs22323sfasfs22323sfasfs22323sfasfs22323sfasfs22323sfasfs22323sfasfs22323sfasfs22323sfasfs22323sfasfs22323sfasfs22323sfasfs22323sfasfs22323sfasfs22323sfasfs22323sfasfs22323sfasfs22323sfasfs22323sfasfs22323sfasfs22323sfasfs22323sfasfs22323sfasfs22323sfasfs22323sfasfs22323sfasfs22323sfasfs22323sfasfs22323sfasfs22323sfasfs22323sfasfs22323sfasfs22323sfasfs22323sfasfs22323sfasfs22323sfasfs22323sfasfs22323sfasfs22323sfasfs22323sfasfs22323sfasfs22323sfasfs22323sfasfs22323sfasfs22323sfasfs22323sfasfs22323sfasfs22323sfasfs22323sfasfs22323sfasfs22323sfasfs22323sfasfs22323sfasfs22323sfasfs22323sfasfs22323sfasfs22323sfasfs22323sfasfs22323sfasfs22323sfasfs22323sfasfs22323sfasfs22323sfasfs22323sfasfs22323sfasfs22323sfasfs22323sfasfs22323sfasfs22323sfasfs22323sfasfs22323sfasfs22323sfasfs22323sfasfs22323sfasfs22323sfasfs\nline\nline\nline\nline\nline\nline\nline\nline\nline\nline\nline\nline\nline\nline\nline\nline\nline\nline\nline\nline\nline\nline\nline\nline\nline\nline\nline\nline\nline\nline\nline\nline\nline\nline\nline\nline\nline\nline123<doubleQuotes46>);<newline46mondego><newline46mondego>JScrollPane scroll = new JScrollPane(text);<newline46mondego>scroll.setVerticalScrollBarPolicy(ScrollPaneConstants.VERTICAL_SCROLLBAR_AS_NEEDED);<newline46mondego><newline46mondego>displayframe.getContentPane().add(scroll);<newline46mondego>displayframe.setSize(400, 600);<newline46mondego>displayframe.setVisible(true);<newline46mondego>"
"8663splitHere46","20275133splitHere46","new String(s.substring(...))"
"8664splitHere46","20275133splitHere46","new String()"
"8665splitHere46","20275133splitHere46","value"
"8666splitHere46","20275133splitHere46","char[]"
"8667splitHere46","20275133splitHere46","int getValueLength(String s) throws Exception {<newline46mondego>    Field field = String.class.getDeclaredField(<doubleQuotes46>value<doubleQuotes46>);<newline46mondego>    field.setAccessible(true);<newline46mondego>    return ((char[])field.get(s)).length;<newline46mondego>}<newline46mondego>"
"8668splitHere46","20275133splitHere46","substring()"
"8669splitHere46","20275133splitHere46","length()"
"8670splitHere46","20275133splitHere46","value"
"8671splitHere46","20275133splitHere46","String s = <doubleQuotes46>abcdefghij<doubleQuotes46>.substring(2, 5);<newline46mondego>int logicalLength = s.length();<newline46mondego>int valueLength = getValueLength(s);<newline46mondego><newline46mondego>System.out.printf(<doubleQuotes46>%d %d <doubleQuotes46>, logicalLength, valueLength);<newline46mondego>if (logicalLength != valueLength) {<newline46mondego>    System.out.println(<doubleQuotes46>shared<doubleQuotes46>);<newline46mondego>else<newline46mondego>    System.out.println(<doubleQuotes46>unshared<doubleQuotes46>);<newline46mondego>"
"8672splitHere46","20275234splitHere46","if (val instanceof DocList) {<newline46mondego>"
"8673splitHere46","20275234splitHere46","QueryComponent.process"
"8674splitHere46","20275234splitHere46","ResultContext ctx = new ResultContext();<newline46mondego>ctx.docs = rb.getResults().docList;<newline46mondego>ctx.query = rb.getQuery();<newline46mondego>rsp.add(<doubleQuotes46>response<doubleQuotes46>, ctx);<newline46mondego>"
"8675splitHere46","20275234splitHere46","DocList"
"8676splitHere46","20275234splitHere46","rsp.getValues().get(<doubleQuotes46>response<doubleQuotes46>).docs"
"8677splitHere46","20275295splitHere46","for (int index =0; index < lista_lista_textos.size(); index++){<newline46mondego>    lista_lista_textos.set(index, WordUtils.capitalizeFully(lista_textos[index].toLowerCase().replace(<doubleQuotes46>.txt<doubleQuotes46>, <doubleQuotes46><doubleQuotes46>)));<newline46mondego>}<newline46mondego>"
"8678splitHere46","20275295splitHere46","lista_lista_textos"
"8679splitHere46","20275295splitHere46","lista_textos"
"8680splitHere46","20275295splitHere46","lista_lista_textos.get(index)"
"8681splitHere46","20275482splitHere46","Map<String,String>"
"8682splitHere46","20275482splitHere46","parentMap.put(url, page.getWebURL().getParentUrl());<newline46mondego>"
"8683splitHere46","20275482splitHere46","List<String> path = new ArrayList<String>();<newline46mondego>do {<newline46mondego>  path.add(url);<newline46mondego>  url = parentMap.get(url);<newline46mondego>} while(url != null);<newline46mondego>"
"8684splitHere46","20275563splitHere46","public class myProgram //class that contains your code<newline46mondego>{<newline46mondego>public static void main(String [] args) //main method is always called at runtime<newline46mondego>{<newline46mondego>    opdracht3b1(num1,num2,num3); //fill in numbers with the 3 numbers you want <newline46mondego>}<newline46mondego>public static void opdracht3b1(double x, double y, double z){<newline46mondego>    double[] numbers = new double[] {x, y, z};<newline46mondego>    double smallestNumber = x;<newline46mondego><newline46mondego>    for(double number : numbers){<newline46mondego>        if(number < smallestNumber){<newline46mondego>            smallestNumber = number;<newline46mondego>        }<newline46mondego>    }<newline46mondego><newline46mondego>    System.out.println(<doubleQuotes46>Input numbers: <doubleQuotes46> + x + <doubleQuotes46>, <doubleQuotes46> + y + <doubleQuotes46>, <doubleQuotes46> + z + <doubleQuotes46>.<doubleQuotes46>);<newline46mondego>    System.out.println(<doubleQuotes46>Smallest Number: <doubleQuotes46> + smallestNumber + <doubleQuotes46>.<doubleQuotes46>);<newline46mondego>}<newline46mondego>}<newline46mondego>"
"8685splitHere46","20275579splitHere46","class File {<newline46mondego>    private FileEventListener listener; // <- create getter/setter for this<newline46mondego><newline46mondego>    public finish() {<newline46mondego>        listener.onFileFinished();<newline46mondego>    }<newline46mondego>}<newline46mondego><newline46mondego><newline46mondego>class FileView extends ViewPart implements EventProxyListener {<newline46mondego>    private EventProxy proxy = new EventProxy();<newline46mondego><newline46mondego>    // This is where you register this FileView as a listener to events from the proxy instance<newline46mondego>    public FileView() {<newline46mondego>        proxy.setListener(this); // <- This is ok because FileView implements EventProxyListener<newline46mondego>    }<newline46mondego><newline46mondego>    // Implements onFinished, described in the EventProxyListener interface<newline46mondego>    public void onProxyFinished() {<newline46mondego>        // EventProxy has reported that it is done<newline46mondego>    }<newline46mondego>}<newline46mondego><newline46mondego>// This is the MiM-class that will clobber your code. I urge you to reconsider this design<newline46mondego>class EventProxy implements FileEventListener {<newline46mondego>    private EventProxyListener listener; // <- Create getter/setter for this<newline46mondego>    private File file = new File();<newline46mondego><newline46mondego>    public EventProxy {<newline46mondego>        file.setListener(this);<newline46mondego>    }<newline46mondego><newline46mondego>    public void onFileFinished() {<newline46mondego>        listener.onProxyFinished();<newline46mondego>    }<newline46mondego>}<newline46mondego><newline46mondego>interface EventProxyListener {<newline46mondego>    public void onProxyFinished();<newline46mondego>}<newline46mondego><newline46mondego>interface FileEventListener {<newline46mondego>    public void onFileFinished();<newline46mondego>}<newline46mondego>"
"8686splitHere46","20275634splitHere46","||"
"8687splitHere46","20275634splitHere46","true"
"8688splitHere46","20275634splitHere46","operands"
"8689splitHere46","20275634splitHere46","A"
"8690splitHere46","20275634splitHere46","B"
"8691splitHere46","20275634splitHere46","A   B   OUTPUT<newline46mondego>f   f   f<newline46mondego>f   t   t<newline46mondego>t   f   t<newline46mondego>t   t   t<newline46mondego>"
"8692splitHere46","20275634splitHere46","OR"
"8693splitHere46","20275634splitHere46","false"
"8694splitHere46","20275634splitHere46","Assume A, B and C = False.<newline46mondego>// We'll now test if option C is the correct one.<newline46mondego><newline46mondego>C: !(A || B || C)<newline46mondego>// Let's plug in our values.<newline46mondego>C: !(False || False || False)<newline46mondego>// And let's simplify it. False || False || False = False.<newline46mondego>C: !(False)<newline46mondego>C: True.<newline46mondego>// Success! Now we need to test it when one of the values are true.<newline46mondego><newline46mondego>C: !(True || False || False)<newline46mondego>// Let's simplify again. True || Anything = True.<newline46mondego>C: !(True).<newline46mondego>C: False.<newline46mondego>"
"8695splitHere46","20275634splitHere46","False"
"8696splitHere46","20275634splitHere46","C"
"8697splitHere46","20275634splitHere46","False"
"8698splitHere46","20275634splitHere46","A,B,C = False"
"8699splitHere46","20275634splitHere46","AND"
"8700splitHere46","20275634splitHere46","A   B   OUTPUT<newline46mondego>f   f   f<newline46mondego>f   t   f<newline46mondego>t   f   f<newline46mondego>t   t   t<newline46mondego>"
"8701splitHere46","20275634splitHere46","AND"
"8702splitHere46","20275634splitHere46","true"
"8703splitHere46","20275634splitHere46","true"
"8704splitHere46","20275634splitHere46","A"
"8705splitHere46","20275634splitHere46","B"
"8706splitHere46","20275634splitHere46","C"
"8707splitHere46","20275638splitHere46","E:\College\SEProj\jEdit"
"8708splitHere46","20275638splitHere46","jedit.home"
"8709splitHere46","20275676splitHere46","Double value = Double.parseDouble(value1);<newline46mondego>String value1 = <doubleQuotes46>0<doubleQuotes46>;<newline46mondego>if(value != null){<newline46mondego>    if(value == (double) Math.round(value)){<newline46mondego>        if(value/1000000000 > 1.0){<newline46mondego>            value1 = String.format(<doubleQuotes46>%.1f G<doubleQuotes46>, value/1000000000);<newline46mondego>        }<newline46mondego>        else if(value/1000000 > 1.0){<newline46mondego>            value1 = String.format(<doubleQuotes46>%.1f M<doubleQuotes46>, value/1000000);<newline46mondego>        }<newline46mondego>        else if(value/1000 > 1.0){<newline46mondego>            value1 = String.format(<doubleQuotes46>%.1f K<doubleQuotes46>, value/1000);<newline46mondego>        }<newline46mondego>        else{<newline46mondego>            value1 = String.format(<doubleQuotes46>%.1f<doubleQuotes46>, value);<newline46mondego>        }<newline46mondego>    }<newline46mondego>    else{<newline46mondego>        value1 = String.format(<doubleQuotes46>%.2f<doubleQuotes46>, value);<newline46mondego>    }<newline46mondego>}<newline46mondego>"
"8710splitHere46","20275678splitHere46","ClassNotFoundException"
"8711splitHere46","20275678splitHere46","com.mysql.jdbc.Driver"
"8712splitHere46","20275678splitHere46","WEB-INF/lib"
"8713splitHere46","20275750splitHere46","Charges"
"8714splitHere46","20275750splitHere46","JAXBContext"
"8715splitHere46","20275750splitHere46","Charges"
"8716splitHere46","20275820splitHere46","Double[]"
"8717splitHere46","20275885splitHere46","OvertimeRates"
"8718splitHere46","20275885splitHere46","Map"
"8719splitHere46","20275885splitHere46","EnumMap"
"8720splitHere46","20275885splitHere46","private EnumMap<Period, POJO1> overtimeRates = new EnumMap<Period, POJO1>(Period.class);<newline46mondego>"
"8721splitHere46","20275908splitHere46","byte[] o = new byte[buffSize];<newline46mondego>        incByte = in.read(o, 0, buffSize);<newline46mondego>        fout.write(o);<newline46mondego>"
"8722splitHere46","20275908splitHere46","buffSize"
"8723splitHere46","20275908splitHere46","buffSize"
"8724splitHere46","20275908splitHere46","read"
"8725splitHere46","20275908splitHere46","incByte = in.read(o, 0, buffSize);<newline46mondego>        fout.write(o, 0, incByte);<newline46mondego>"
"8726splitHere46","20275908splitHere46","read"
"8727splitHere46","20275908splitHere46","buffSize"
"8728splitHere46","20275990splitHere46","String[][] data = new String[temp.size()][2];<newline46mondego>"
"8729splitHere46","20276004splitHere46","HSSFWorkbook wb = new HSSFWorkbook();"
"8730splitHere46","20276004splitHere46","Workbook wb = new HSSFWorkbook();"
"8731splitHere46","20276047splitHere46","final SortedMap<Pair<? extends AbstractEnum<?>, String>, AdapterObject> myMap = <newline46mondego>            new TreeMap<Pair<? extends AbstractEnum<?>,String>, AdapterObject>();<newline46mondego>"
"8732splitHere46","20276099splitHere46","^(?:mock_test[1-5]|reviewer_test(?:[145]|3[.][12]))$<newline46mondego>"
"8733splitHere46","20276099splitHere46","^(?:mock_test(?:1|2|3|4|5)|reviewer_test(?:(?:1|4|5)|3\.(?:1|2)))$<newline46mondego>"
"8734splitHere46","20276154splitHere46","ContextRefreshEvent"
"8735splitHere46","20276154splitHere46","ApplicationContext"
"8736splitHere46","20276154splitHere46","classX"
"8737splitHere46","20276154splitHere46","@Component"
"8738splitHere46","20276154splitHere46","@Component<newline46mondego>public classX implements ApplicationListener<ContextRefreshedEvent> {<newline46mondego>    @Override<newline46mondego>    public void onApplicationEvent(ContextRefreshedEvent event) {<newline46mondego>       //do something if all apps have initialised<newline46mondego>    }<newline46mondego>}<newline46mondego>"
"8739splitHere46","20276154splitHere46","<bean>"
"8740splitHere46","20276154splitHere46","<bean class=<doubleQuotes46>some.pack.classX<doubleQuotes46>></bean><newline46mondego>"
"8741splitHere46","20276154splitHere46","ApplicationListener"
"8742splitHere46","20276213splitHere46","try<newline46mondego>{<newline46mondego>    String string = <doubleQuotes46>swimming<doubleQuotes46>;<newline46mondego>    MyActivity.class.getMethod(string, null).invoke(this, null);<newline46mondego>}<newline46mondego>catch(Throwable t)<newline46mondego>{<newline46mondego>    t.printStackTrace(); // might want to do something else here<newline46mondego>}<newline46mondego>"
"8743splitHere46","20276224splitHere46","false"
"8744splitHere46","20276224splitHere46","public boolean HaveBounds(int i)<newline46mondego>{<newline46mondego>    System.out.println(<doubleQuotes46>Because Chuck Norris knows no bounds.<doubleQuotes46>);<newline46mondego>    return false;<newline46mondego>}<newline46mondego>"
"8745splitHere46","20276224splitHere46","char test = chuckNorris.getArrayId(i);<newline46mondego>"
"8746splitHere46","20276224splitHere46","true"
"8747splitHere46","20276224splitHere46","NullPointerException"
"8748splitHere46","20276224splitHere46","public char getArrayId(int i)<newline46mondego>{<newline46mondego>    return array[i];<newline46mondego>}<newline46mondego>"
"8749splitHere46","20276224splitHere46","array"
"8750splitHere46","20276224splitHere46","null"
"8751splitHere46","20276324splitHere46","Elements"
"8752splitHere46","20276324splitHere46","@Override<newline46mondego>protected Void doInBackground(Void... params) {<newline46mondego>    try {<newline46mondego>        Document document = Jsoup.connect(url).get();              <newline46mondego>    } catch (IOException e) {<newline46mondego>        e.printStackTrace();<newline46mondego>    }<newline46mondego>    Elements elem = null; <newline46mondego>    elem = document.select(<doubleQuotes46>*<doubleQuotes46>);<newline46mondego>    Log.i(<doubleQuotes46>Value of elem<doubleQuotes46>, String.valueOf(elem);<newline46mondego>    return null;<newline46mondego>}<newline46mondego>"
"8753splitHere46","20276324splitHere46","onPostExecute"
"8754splitHere46","20276324splitHere46","@Override<newline46mondego>protected void onPostExecute(Void result) {<newline46mondego>    String valueofelement = elem.text();<newline46mondego>    story.add(valueofelement);        //story is an array<newline46mondego>    progressDialog.dismiss();<newline46mondego>   }<newline46mondego>}<newline46mondego>"
"8755splitHere46","20276513splitHere46","gui.window.setContentPane(new JLabel(new ImageIcon(temp))); // <- this line<newline46mondego>gui.window.setBackground(new Color(27,27,27));<newline46mondego><newline46mondego>...<newline46mondego>gui.list2.setText(<doubleQuotes46>text test<doubleQuotes46>);<newline46mondego>...<newline46mondego>gui.list2.setVisible(true);<newline46mondego>"
"8756splitHere46","20276513splitHere46","list2"
"8757splitHere46","20276513splitHere46","gui.firstscreen"
"8758splitHere46","20276513splitHere46","SomeJComponent aComp1 = new SomeJComponent();<newline46mondego><newline46mondego>somewhere.add(aComp1);<newline46mondego>aComp1.setBounds(/* ... */);<newline46mondego>aComp1.setVisible(false);<newline46mondego><newline46mondego>SomeJComponent aComp2 = new SomeJComponent();<newline46mondego><newline46mondego>somewhere.add(aComp2);<newline46mondego>aComp2.setBounds(/* ... */);<newline46mondego>aComp2.setVisible(false);<newline46mondego>"
"8759splitHere46","20276513splitHere46","import javax.swing.SwingUtilities;<newline46mondego>import javax.swing.JFrame;<newline46mondego>import javax.swing.JPanel;<newline46mondego>import javax.swing.JButton;<newline46mondego><newline46mondego>import java.awt.event.ActionEvent;<newline46mondego>import java.awt.event.ActionListener;<newline46mondego><newline46mondego>import java.awt.BorderLayout;<newline46mondego><newline46mondego>public class PanelSwap {<newline46mondego>    public static void main(String[] args) {<newline46mondego>        SwingUtilities.invokeLater(new Runnable() {<newline46mondego>            @Override<newline46mondego>            public void run() {<newline46mondego>                new PanelSwap().frame.setVisible(true);<newline46mondego>            }<newline46mondego>        });<newline46mondego>    }<newline46mondego><newline46mondego>    JFrame frame;<newline46mondego>    JPanel panel1;<newline46mondego>    JPanel panel2;<newline46mondego><newline46mondego>    PanelSwap() {<newline46mondego><newline46mondego>        frame = new JFrame();<newline46mondego>        frame.setLocationRelativeTo(null);<newline46mondego><newline46mondego>        panel1 = new JPanel(new BorderLayout());<newline46mondego><newline46mondego>        JButton toPanel2 = new JButton(<doubleQuotes46>Goto Panel 2<doubleQuotes46>);<newline46mondego>        toPanel2.addActionListener(new ActionListener() {<newline46mondego>            @Override<newline46mondego>            public void actionPerformed(ActionEvent e) {<newline46mondego>                frame.setContentPane(panel2);<newline46mondego>                frame.validate();<newline46mondego>            }<newline46mondego>        });<newline46mondego><newline46mondego>        panel1.add(toPanel2, BorderLayout.CENTER);<newline46mondego><newline46mondego>        panel2 = new JPanel(new BorderLayout());<newline46mondego><newline46mondego>        JButton toPanel1 = new JButton(<doubleQuotes46>Goto Panel 1<doubleQuotes46>);<newline46mondego>        toPanel1.addActionListener(new ActionListener() {<newline46mondego>            @Override<newline46mondego>            public void actionPerformed(ActionEvent e) {<newline46mondego>                frame.setContentPane(panel1);<newline46mondego>                frame.validate();<newline46mondego>            }<newline46mondego>        });<newline46mondego><newline46mondego>        panel2.add(toPanel1, BorderLayout.CENTER);<newline46mondego><newline46mondego>        frame.setContentPane(panel1);<newline46mondego>        frame.pack();<newline46mondego>    }<newline46mondego>}<newline46mondego>"
"8760splitHere46","20276513splitHere46","invokeLater"
"8761splitHere46","20276513splitHere46","actionPerformed"
"8762splitHere46","20276513splitHere46","invokeLater"
"8763splitHere46","20276513splitHere46","start"
"8764splitHere46","20276513splitHere46","gui"
"8765splitHere46","20276513splitHere46","Start"
"8766splitHere46","20276513splitHere46","GUI"
"8767splitHere46","20276513splitHere46","start"
"8768splitHere46","20276522splitHere46","FileReader"
"8769splitHere46","20276522splitHere46","FileInputStream"
"8770splitHere46","20276522splitHere46","InputStreamReader"
"8771splitHere46","20276522splitHere46","UTF-8"
"8772splitHere46","20276522splitHere46","FileInputStream fileInputStream = new FileInputStream(filename);<newline46mondego>InputStreamReader inputStreamReader = new InputStreamReader(fileInputStream, <doubleQuotes46>UTF-8<doubleQuotes46>);      <newline46mondego>BufferedReader bufferedReader = new BufferedReader(inputStreamReader);<newline46mondego>List<String> lines = new ArrayList<String>();<newline46mondego>String line = null;<newline46mondego>while ((line = bufferedReader.readLine()) != null) {<newline46mondego>    lines.add(line);<newline46mondego>}<newline46mondego>bufferedReader.close();<newline46mondego>System.out.println(lines.toArray(new String[lines.size()]));<newline46mondego>"
"8773splitHere46","20276532splitHere46","contact[currentSize] = new EmailContact(customerID, user, domain, type);"
"8774splitHere46","20276532splitHere46","type"
"8775splitHere46","20276532splitHere46","type"
"8776splitHere46","20276549splitHere46","AdjustmentListener"
"8777splitHere46","20276549splitHere46","JScrollBar"
"8778splitHere46","20276587splitHere46","Set"
"8779splitHere46","20276587splitHere46","Set<Integer> values =<newline46mondego>    new HashSet<Integer>(Arrays.asList(1, 5, 9, 13, 17, 21, 25, 29, 33));<newline46mondego><newline46mondego>if (values.contains(cardValue)) {<newline46mondego>    System.out.println(<doubleQuotes46>Clubs<doubleQuotes46>);<newline46mondego>}<newline46mondego>"
"8780splitHere46","20276587splitHere46","if cardValue in (1, 5, 9, 13, 17, 21, 25, 29, 33):<newline46mondego>    print(<doubleQuotes46>Clubs<doubleQuotes46>)<newline46mondego>"
"8781splitHere46","20276698splitHere46","credential = null;"
"8782splitHere46","20276748splitHere46","Lock"
"8783splitHere46","20276840splitHere46","getGraphics()"
"8784splitHere46","20276840splitHere46","paintComponent()"
"8785splitHere46","20276840splitHere46","paintComponent()"
"8786splitHere46","20276840splitHere46","JComponent"
"8787splitHere46","20276840splitHere46","JPanel"
"8788splitHere46","20276840splitHere46","drawPixel"
"8789splitHere46","20276840splitHere46","fillOval"
"8790splitHere46","20276840splitHere46","private void drawPixel(Graphics2D g, int x1, int y1) {<newline46mondego>    g.fillOval(x1, y1, 3, 3);<newline46mondego>}<newline46mondego>"
"8791splitHere46","20276881splitHere46","cursor.close();<newline46mondego>"
"8792splitHere46","20276881splitHere46","return cursor.getCount();<newline46mondego>"
"8793splitHere46","20276881splitHere46","public int getCattleCount(){<newline46mondego>    String countQuery = <doubleQuotes46>SELECT  * FROM <doubleQuotes46> + TABLE_CATTLE;<newline46mondego>    SQLiteDatabase db = this.getReadableDatabase();<newline46mondego>    Cursor cursor = db.rawQuery(countQuery, null);<newline46mondego>    int count = cursor.getCount();<newline46mondego>    cursor.close();<newline46mondego>    db.close();<newline46mondego>    return count;<newline46mondego>}<newline46mondego>"
"8794splitHere46","20276881splitHere46","getCattle"
"8795splitHere46","20276881splitHere46","Cattle getCattle(int id){<newline46mondego>    Cattle cattle = null;<newline46mondego>    SQLiteDatabase db = this.getReadableDatabase();<newline46mondego><newline46mondego>    Cursor cursor = db.query(TABLE_CATTLE,  new String[] <newline46mondego>            {KEY_ID,  KEY_TAG_ID, KEY_ALIAS, KEY_TIME, KEY_DATA}, KEY_ID + <doubleQuotes46>=?<doubleQuotes46>,<newline46mondego>            new String[] {String.valueOf(id) }, null, null, null, null);<newline46mondego>    if(cursor!=null) {<newline46mondego>        if (cursor.moveToFirst()) {<newline46mondego>            cattle = new Cattle(Integer.parseInt(cursor.getString(0)),<newline46mondego>                cursor.getString(1),<newline46mondego>                cursor.getString(2),<newline46mondego>                cursor.getString(3),<newline46mondego>                cursor.getString(4));<newline46mondego>        }<newline46mondego>        cursor.close();<newline46mondego>    }<newline46mondego>    db.close();//test<newline46mondego>    return cattle;<newline46mondego>} <newline46mondego>"
"8796splitHere46","20276932splitHere46","HashSet"
"8797splitHere46","20276932splitHere46","User"
"8798splitHere46","20276932splitHere46","User"
"8799splitHere46","20276932splitHere46","User"
"8800splitHere46","20276932splitHere46","User"
"8801splitHere46","20276932splitHere46","User"
"8802splitHere46","20276932splitHere46","HashSet"
"8803splitHere46","20276932splitHere46","User"
"8804splitHere46","20276932splitHere46","HashSet"
"8805splitHere46","20276932splitHere46","HashMap"
"8806splitHere46","20276932splitHere46","Boolean"
"8807splitHere46","20276932splitHere46","User"
"8808splitHere46","20276932splitHere46","User"
"8809splitHere46","20276932splitHere46","HashSet"
"8810splitHere46","20277047splitHere46","ammoBody"
"8811splitHere46","20277047splitHere46","TimerTask"
"8812splitHere46","20277047splitHere46","myammo"
"8813splitHere46","20277047splitHere46","ammoBody"
"8814splitHere46","20277079splitHere46","class MyWindowAdapter extends WindowAdapter {<newline46mondego>  private CheckingAccountActions checkActions;<newline46mondego><newline46mondego>  public MyWindowAdapter(CheckingAccountActions checkActions) {<newline46mondego>    this.checkActions = checkActions;<newline46mondego>  }<newline46mondego><newline46mondego>  // in your window closing method<newline46mondego>  // check the state of checkActions first before doing anything<newline46mondego>    public void windowClosing(WindowEvent e) {<newline46mondego>        // note -- don't check for saved in a static way<newline46mondego>        // use a method on the instance.<newline46mondego>        if(!checkActions.getSaved()) {<newline46mondego>            // etc...<newline46mondego>        }<newline46mondego><newline46mondego>        JFrame frame = (JFrame)e.getSource();<newline46mondego>        frame.setVisible(false);<newline46mondego><newline46mondego>        // Main.frame.setVisible(false);<newline46mondego>        System.exit(0);<newline46mondego>    }<newline46mondego>}<newline46mondego>"
"8815splitHere46","20277079splitHere46","public static void main(String[] args) {<newline46mondego>    frame  = new JFrame(<doubleQuotes46>Checking Account Actions<doubleQuotes46>);<newline46mondego>    frame.setDefaultCloseOperation(JFrame.DO_NOTHING_ON_CLOSE);<newline46mondego><newline46mondego>    CheckingAccountActions panel = new CheckingAccountActions();<newline46mondego><newline46mondego>    MyWindowAdapter winAdapter = new MyWindowAdapter(panel);<newline46mondego>    frame.addWindowListener(winAdapter);<newline46mondego><newline46mondego>    frame.getContentPane().add(panel);<newline46mondego>    frame.pack();<newline46mondego><newline46mondego>    frame.setVisible(true);<newline46mondego>}<newline46mondego>"
"8816splitHere46","20277079splitHere46","CheckingAccountActions.saved"
"8817splitHere46","20277383splitHere46","String..."
"8818splitHere46","20277383splitHere46","String[]"
"8819splitHere46","20277383splitHere46","Constructor<?> con = klass.getConstructor(String[].class);<newline46mondego>"
"8820splitHere46","20277383splitHere46","Object o = con.newInstance((Object) new String[] {<doubleQuotes46>first<doubleQuotes46>, <doubleQuotes46>second<doubleQuotes46>, <doubleQuotes46>more<doubleQuotes46>});<newline46mondego>"
"8821splitHere46","20277383splitHere46","(Object)"
"8822splitHere46","20277597splitHere46","Session"
"8823splitHere46","20277597splitHere46","Page1.jsp"
"8824splitHere46","20277597splitHere46","Page1.jsp"
"8825splitHere46","20277597splitHere46","<%<newline46mondego>//get UserName to verify <newline46mondego>String userName= (String) session.getAttribute(<doubleQuotes46>userName<doubleQuotes46>);<newline46mondego>if(userName!=null)<newline46mondego>{<newline46mondego><newline46mondego>//user is valid<newline46mondego><newline46mondego>}<newline46mondego>else<newline46mondego>{<newline46mondego><newline46mondego>//return here as user is invalid<newline46mondego>response.sendRedirect(<doubleQuotes46>Login.jsp<doubleQuotes46>);<newline46mondego><newline46mondego>}<newline46mondego><newline46mondego><newline46mondego>%><newline46mondego><HTML><newline46mondego><BODY><newline46mondego>Hello, <%= session.getAttribute(<doubleQuotes46>userName<doubleQuotes46>) %><newline46mondego></BODY><newline46mondego></HTML><newline46mondego>"
"8826splitHere46","20277597splitHere46","userName"
"8827splitHere46","20277613splitHere46","super.paint( g );<newline46mondego>"
"8828splitHere46","20277613splitHere46","paint"
"8829splitHere46","20277695splitHere46","/**<newline46mondego>     * Close the response.<newline46mondego>     * <p><newline46mondego>     * The entity input stream is closed.<newline46mondego>     *<newline46mondego>     * @throws ClientHandlerException if there is an error closing the response.<newline46mondego>     */<newline46mondego>    public void close() throws ClientHandlerException {<newline46mondego>        try {<newline46mondego>            entity.close();<newline46mondego>        } catch (IOException e) {<newline46mondego>            throw new ClientHandlerException(e);<newline46mondego>        }<newline46mondego>    }<newline46mondego>"
"8830splitHere46","20277695splitHere46","set JAVA_OPTIONS=%JAVA_OPTIONS% -DUseSunHttpHandler=true<newline46mondego>"
"8831splitHere46","20277789splitHere46","tcpdump"
"8832splitHere46","20277789splitHere46","gzip"
"8833splitHere46","20277789splitHere46","tcpdump"
"8834splitHere46","20277789splitHere46","Content-Encoding"
"8835splitHere46","20277789splitHere46","0x024A"
"8836splitHere46","20277789splitHere46","13:17:40.644241 IP r1.batoto.net.http > random.example.org.33779: Flags [P.],<newline46mondego>  seq 1:604, ack 183, win 122,<newline46mondego>  options [nop,nop,TS val 344850394 ecr 15945878], length 603<newline46mondego>    // Some lines of headers removed<newline46mondego>    0x0030:  0000 0000 4854 5450 2f31 2e31 2032 3030  ....HTTP/1.1.200<newline46mondego>    0x0040:  204f 4b0d 0a53 6572 7665 723a 206e 6769  .OK..Server:.ngi<newline46mondego>    0x0050:  6e78 2f31 2e32 2e37 0d0a 4461 7465 3a20  nx/1.2.7..Date:.<newline46mondego>    0x0060:  4672 692c 2032 3920 4e6f 7620 3230 3133  Fri,.29.Nov.2013<newline46mondego>    0x0070:  2030 323a 3437 3a33 3820 474d 540d 0a43  .02:47:38.GMT..C<newline46mondego>    0x0080:  6f6e 7465 6e74 2d54 7970 653a 2074 6578  ontent-Type:.tex<newline46mondego>    0x0090:  742f 6874 6d6c 3b63 6861 7273 6574 3d55  t/html;charset=U<newline46mondego>    0x00a0:  5446 2d38 0d0a 5472 616e 7366 6572 2d45  TF-8..Transfer-E<newline46mondego>    0x00b0:  6e63 6f64 696e 673a 2063 6875 6e6b 6564  ncoding:.chunked<newline46mondego>    0x00c0:  0d0a 436f 6e6e 6563 7469 6f6e 3a20 6b65  ..Connection:.ke<newline46mondego>    0x00d0:  6570 2d61 6c69 7665 0d0a 582d 506f 7765  ep-alive..X-Powe<newline46mondego>    0x00e0:  7265 642d 4279 3a20 5048 502f 352e 342e  red-By:.PHP/5.4.<newline46mondego>    0x00f0:  3135 0d0a 5365 742d 436f 6f6b 6965 3a20  15..Set-Cookie:.<newline46mondego>    0x0100:  7365 7373 696f 6e5f 6964 3d32 3230 3433  session_id=22043<newline46mondego>    0x0110:  3838 3431 3235 3739 3735 6566 6361 3333  8841257975efca33<newline46mondego>    0x0120:  6462 3261 3264 6635 6665 643b 2070 6174  db2a2df5fed;.pat<newline46mondego>    0x0130:  683d 2f3b 2064 6f6d 6169 6e3d 2e62 6174  h=/;.domain=.bat<newline46mondego>    0x0140:  6f74 6f2e 6e65 743b 2068 7474 706f 6e6c  oto.net;.httponl<newline46mondego>    0x0150:  790d 0a53 6574 2d43 6f6f 6b69 653a 2075  y..Set-Cookie:.u<newline46mondego>    0x0160:  6167 656e 745f 6279 7061 7373 3d31 3b20  agent_bypass=1;.<newline46mondego>    0x0170:  7061 7468 3d2f 3b20 646f 6d61 696e 3d2e  path=/;.domain=.<newline46mondego>    0x0180:  6261 746f 746f 2e6e 6574 0d0a 5365 742d  batoto.net..Set-<newline46mondego>    0x0190:  436f 6f6b 6965 3a20 636f 6d6d 656e 746d  Cookie:.commentm<newline46mondego>    0x01a0:  6f64 7069 6473 3d64 656c 6574 6564 3b20  odpids=deleted;.<newline46mondego>    0x01b0:  6578 7069 7265 733d 5468 752c 2030 312d  expires=Thu,.01-<newline46mondego>    0x01c0:  4a61 6e2d 3139 3730 2030 303a 3030 3a30  Jan-1970.00:00:0<newline46mondego>    0x01d0:  3120 474d 543b 2070 6174 683d 2f3b 2064  1.GMT;.path=/;.d<newline46mondego>    0x01e0:  6f6d 6169 6e3d 2e62 6174 6f74 6f2e 6e65  omain=.batoto.ne<newline46mondego>    0x01f0:  740d 0a43 6163 6865 2d43 6f6e 7472 6f6c  t..Cache-Control<newline46mondego>    0x0200:  3a20 6d61 782d 6167 653d 3336 3030 0d0a  :.max-age=3600..<newline46mondego>    0x0210:  4578 7069 7265 733a 2046 7269 2c20 3239  Expires:.Fri,.29<newline46mondego>    0x0220:  204e 6f76 2032 3031 3320 3033 3a34 373a  .Nov.2013.03:47:<newline46mondego>    0x0230:  3338 2047 4d54 0d0a 5072 6167 6d61 3a20  38.GMT..Pragma:.<newline46mondego>    0x0240:  6e6f 2d63 6163 6865 0d0a 436f 6e74 656e  no-cache..Conten<newline46mondego>    0x0250:  742d 456e 636f 6469 6e67 3a20 677a 6970  t-Encoding:.gzip<newline46mondego>    0x0260:  0d0a 5661 7279 3a20 4163 6365 7074 2d45  ..Vary:.Accept-E<newline46mondego>    0x0270:  6e63 6f64 696e 670d 0a58 2d43 6163 6865  ncoding..X-Cache<newline46mondego>    0x0280:  3a20 4849 540d 0a0d 0a37 6639 360d 0a    :.HIT....7f96..<newline46mondego>"
"8837splitHere46","20277789splitHere46","gzip"
"8838splitHere46","20277789splitHere46","Content-Encoding"
"8839splitHere46","20277789splitHere46","13:17:40.387277 IP random.example.org.33779 > r1.batoto.net.http:<newline46mondego>  Flags [P.], seq 1:183, ack 1, win 229,<newline46mondego>  options [nop,nop,TS val 15945878 ecr 344850135], length 182<newline46mondego>    // Some lines of headers removed<newline46mondego>    0x0030:  0000 0000 4745 5420 2f63 6f6d 6963 2f5f  ....GET./comic/_<newline46mondego>    0x0040:  2f63 6f6d 6963 732f 6269 6c6c 792d 6261  /comics/billy-ba<newline46mondego>    0x0050:  742d 7237 3734 2048 5454 502f 312e 310d  t-r774.HTTP/1.1.<newline46mondego>    0x0060:  0a55 7365 722d 4167 656e 743a 204a 6176  .User-Agent:.Jav<newline46mondego>    0x0070:  612f 312e 372e 305f 3435 0d0a 486f 7374  a/1.7.0_45..Host<newline46mondego>    0x0080:  3a20 7777 772e 6261 746f 746f 2e6e 6574  :.www.batoto.net<newline46mondego>    0x0090:  0d0a 4163 6365 7074 3a20 7465 7874 2f68  ..Accept:.text/h<newline46mondego>    0x00a0:  746d 6c2c 2069 6d61 6765 2f67 6966 2c20  tml,.image/gif,.<newline46mondego>    0x00b0:  696d 6167 652f 6a70 6567 2c20 2a3b 2071  image/jpeg,.*;.q<newline46mondego>    0x00c0:  3d2e 322c 202a 2f2a 3b20 713d 2e32 0d0a  =.2,.*/*;.q=.2..<newline46mondego>    0x00d0:  436f 6e6e 6563 7469 6f6e 3a20 6b65 6570  Connection:.keep<newline46mondego>    0x00e0:  2d61 6c69 7665 0d0a 0d0a                 -alive....<newline46mondego>"
"8840splitHere46","20277789splitHere46","urlExists(...)"
"8841splitHere46","20277789splitHere46","private static final Object GZIP_CONTENT_TYPE = <doubleQuotes46>gzip<doubleQuotes46>;<newline46mondego><newline46mondego>  public static InputStream urlExists(String url)<newline46mondego>  {<newline46mondego>    try<newline46mondego>    {<newline46mondego>      URL site = new URL(url);<newline46mondego>      try<newline46mondego>      {<newline46mondego>        URLConnection conn = site.openConnection();<newline46mondego>        if (GZIP_CONTENT_TYPE.equals(conn.getContentEncoding()))<newline46mondego>        {<newline46mondego>          System.out.println(<doubleQuotes46>Using gzip stream<doubleQuotes46>);<newline46mondego>          return new GZIPInputStream(conn.getInputStream());<newline46mondego>        }<newline46mondego>        System.out.println(<doubleQuotes46>Using uncompressed stream<doubleQuotes46>);<newline46mondego>        return conn.getInputStream();<newline46mondego>      }<newline46mondego>      catch (IOException ex)<newline46mondego>      {<newline46mondego>        return null;<newline46mondego>      }<newline46mondego>    }<newline46mondego>    catch (MalformedURLException ex)<newline46mondego>    {<newline46mondego>      return null;<newline46mondego>    }<newline46mondego>  }<newline46mondego>"
"8842splitHere46","20277923splitHere46","boolean odd2 = MyInteger.isOdd(new MyInteger(5));  // static call<newline46mondego>"
"8843splitHere46","20277923splitHere46","MyInteger"
"8844splitHere46","20277923splitHere46","MyInteger"
"8845splitHere46","20277923splitHere46","MyInteger num = new MyInteger(5);<newline46mondego>boolean odd2 = MyInteger.isOdd(num);  // static call <newline46mondego>"
"8846splitHere46","20277923splitHere46","class MyInteger{<newline46mondego>    int num;<newline46mondego><newline46mondego>    public MyIntger(int num){<newline46mondego>        this.num = num;<newline46mondego>    }<newline46mondego><newline46mondego>    // Method 1<newline46mondego>    public static boolean isOdd(int num){<newline46mondego>        ...<newline46mondego>    }<newline46mondego><newline46mondego>    // Method 2<newline46mondego>    public boolean isOdd(){<newline46mondego>        ...<newline46mondego>    }<newline46mondego><newline46mondego>    // Method 3<newline46mondego>    public static boolean isOdd(MyInteger num){<newline46mondego>        ...<newline46mondego>    }<newline46mondego>}<newline46mondego><newline46mondego>public class TestMyInteger{<newline46mondego>    public static void main(String[] args){<newline46mondego><newline46mondego>        // Method 1 call<newline46mondego>        boolean odd1 = MyIntger.isOdd(5);    // static call<newline46mondego><newline46mondego>        // Method 3 call<newline46mondego>        boolean odd2 = MyInteger.isOdd(new MyInteger(5));  // static call<newline46mondego><newline46mondego>        // Method 2 call<newline46mondego>        MyIntger num = new MyIntger(5);  // create instance<newline46mondego>        boolean odd3 = num.isOdd();   // instance call<newline46mondego><newline46mondego>        System.out.println(odd1);<newline46mondego>        System.out.println(odd2);<newline46mondego>        System.out.println(odd3);<newline46mondego><newline46mondego>    }<newline46mondego>}<newline46mondego>"
"8847splitHere46","20278152splitHere46","if (str == null) throw new NullPointerException;<newline46mondego>"
"8848splitHere46","20278201splitHere46","byte b = -1;<newline46mondego>int a = (int) (b & 0xF); // this returns 15, which is what I want<newline46mondego>int c = (int) (b | 0); // this returns -1, which is essentially 0xFFFF<newline46mondego>System.out.println(<doubleQuotes46>b:<doubleQuotes46> + Integer.toBinaryString(b));<newline46mondego>System.out.println(<doubleQuotes46>a:<doubleQuotes46> + Integer.toBinaryString(a));<newline46mondego>System.out.println(<doubleQuotes46>c:<doubleQuotes46> + Integer.toBinaryString(c));<newline46mondego>System.out.println(<doubleQuotes46>0xF:<doubleQuotes46> + Integer.toBinaryString(0xF));<newline46mondego>"
"8849splitHere46","20278201splitHere46","b:11111111111111111111111111111111<newline46mondego>a:1111<newline46mondego>c:11111111111111111111111111111111<newline46mondego>0xF:1111<newline46mondego>"
"8850splitHere46","20278201splitHere46","b & OxF"
"8851splitHere46","20278201splitHere46","11111111111111111111111111111111<newline46mondego>00000000000000000000000000001111  (AND)<newline46mondego>--------------------------------<newline46mondego>                            1111   (15)<newline46mondego>"
"8852splitHere46","20278201splitHere46","b | 0"
"8853splitHere46","20278201splitHere46","11111111111111111111111111111111<newline46mondego>00000000000000000000000000000000   (OR)<newline46mondego>--------------------------------<newline46mondego>11111111111111111111111111111111   (-1)<newline46mondego>"
"8854splitHere46","20278201splitHere46","-1"
"8855splitHere46","20278244splitHere46","CountDownLatch playersLatch = new CountDownLatch(numPlayers);<newline46mondego>"
"8856splitHere46","20278244splitHere46","playersLatch.countDown();<newline46mondego>try {<newline46mondego>    playersLatch.await();<newline46mondego>} catch (InterruptedException ex) {<newline46mondego>    //handle interruption<newline46mondego>}<newline46mondego>"
"8857splitHere46","20278349splitHere46","/packages/yourclasses.class<newline46mondego>/package2/anotherclasses.class<newline46mondego>"
"8858splitHere46","20278349splitHere46","/packages/yourclasses.java<newline46mondego>/package2/anotherclasses.java<newline46mondego>"
"8859splitHere46","20278349splitHere46","jar xf ftp4j.zip<newline46mondego>cd ftp4j-1.7.2\src  <newline46mondego>jar cf ftp4j-sources.jar .<newline46mondego>"
"8860splitHere46","20278406splitHere46","class=<doubleQuotes46>com.google.android.gms.maps.MapFragment<doubleQuotes46>"
"8861splitHere46","20278406splitHere46","android:name=<doubleQuotes46>com.google.android.gms.maps.SupportMapFragment<doubleQuotes46>"
"8862splitHere46","20278406splitHere46","map = ((MapFragment) getFragmentManager().findFragmentById(R.id.map))<newline46mondego>        .getMap();"
"8863splitHere46","20278406splitHere46","map= ((SupportMapFragment) getSupportFragmentManager()<newline46mondego>                    .findFragmentById(R.id.map)).getMap();"
"8864splitHere46","20278406splitHere46","if (map== null) <newline46mondego>            {<newline46mondego>          map= ((SupportMapFragment) getSupportFragmentManager()<newline46mondego>                    .findFragmentById(R.id.map)).getMap();}"
"8865splitHere46","20278420splitHere46","for(int i=0; i<board.length; i++) {<newline46mondego>  for(int j=0; j<board[i].length; j++) {<newline46mondego>    String temp = <doubleQuotes46><doubleQuotes46>;<newline46mondego>    for(int k=j;k<board[i].length;k++) {<newline46mondego>    }<newline46mondego>  }<newline46mondego>}<newline46mondego>"
"8866splitHere46","20278420splitHere46","for(int i=board.length-1; i>=0; i--) {<newline46mondego>  for(int j=board[i].length-1; j>=0; j--) {<newline46mondego>    String temp = <doubleQuotes46><doubleQuotes46>;<newline46mondego>    for(int k=j;k>=0;k--) {<newline46mondego>    }<newline46mondego>  }<newline46mondego>}<newline46mondego>"
"8867splitHere46","20278675splitHere46","String key = map.inverse.get(theValue);<newline46mondego>"
"8868splitHere46","20278861splitHere46","List"
"8869splitHere46","20278861splitHere46","List"
"8870splitHere46","20278861splitHere46","List<String>  assetList = new ArrayList(Arrays.asList(asset));<newline46mondego>"
"8871splitHere46","20278911splitHere46","super(model);"
"8872splitHere46","20278911splitHere46","p.add(pb4.layer);"
"8873splitHere46","20278911splitHere46","import java.awt.*;<newline46mondego>import java.awt.event.*;<newline46mondego>import java.awt.image.*;<newline46mondego>import java.beans.*;<newline46mondego>import java.lang.ref.WeakReference;<newline46mondego>import javax.swing.*;<newline46mondego>import javax.swing.plaf.LayerUI;<newline46mondego><newline46mondego>public class Test2 {<newline46mondego>    public JComponent makeUI() {<newline46mondego>        final BoundedRangeModel model = new DefaultBoundedRangeModel();<newline46mondego>        final JPanel p = new JPanel(new GridLayout(4, 1, 12, 12));<newline46mondego>        p.setBorder(BorderFactory.createEmptyBorder(24,24,24,24));<newline46mondego><newline46mondego>        final JProgressBar pb1 = new JProgressBar(model);<newline46mondego>        pb1.setStringPainted(true);<newline46mondego>        p.add(pb1);<newline46mondego>        final JProgressBar pb2 = new JProgressBar(model);<newline46mondego>        pb2.setStringPainted(true);<newline46mondego>        p.add(pb2);<newline46mondego><newline46mondego>        p.add(new JProgressBar(model));<newline46mondego>        final ColorProgressBar pb4 = new ColorProgressBar(model);<newline46mondego>        p.add(pb4.layer);<newline46mondego><newline46mondego>        JPanel box = new JPanel();<newline46mondego>        box.add(new JButton(new AbstractAction(<doubleQuotes46>+10<doubleQuotes46>) {<newline46mondego>            private int i = 0;<newline46mondego>            @Override public void actionPerformed(ActionEvent e) {<newline46mondego>                model.setValue(i = (i>=100) ? 0 : i + 10);<newline46mondego>            }<newline46mondego>        }));<newline46mondego>        //http://msdn.microsoft.com/en-us/library/windows/desktop/aa511486.aspx<newline46mondego>        box.add(new JCheckBox(new AbstractAction(<newline46mondego>                <doubleQuotes46><html>Turn the progress bar red<br /><doubleQuotes46>+<newline46mondego>                        <doubleQuotes46> when there is a user recoverable condition<br /><doubleQuotes46>+<newline46mondego>                <doubleQuotes46> that prevents making further progress.<doubleQuotes46>) {<newline46mondego>            @Override public void actionPerformed(ActionEvent e) {<newline46mondego>                boolean b = ((JCheckBox)e.getSource()).isSelected();<newline46mondego>                pb2.setForeground(b? new Color(255,0,0,100) : new Color(255,255,0,100));<newline46mondego>                if (b)<newline46mondego>                    pb4.setColor(Color.RED);<newline46mondego>                else<newline46mondego>                    pb4.setColor(Color.YELLOW);<newline46mondego>                p.repaint();<newline46mondego>            }<newline46mondego>        }));<newline46mondego><newline46mondego>        JPanel panel = new JPanel(new BorderLayout());<newline46mondego>        panel.add(p, BorderLayout.NORTH);<newline46mondego>        panel.add(box, BorderLayout.SOUTH);<newline46mondego>        return panel;<newline46mondego>    }<newline46mondego>    public static void main(String[] args) {<newline46mondego>        EventQueue.invokeLater(new Runnable() {<newline46mondego>            @Override public void run() {<newline46mondego>                createAndShowGUI();<newline46mondego>            }<newline46mondego>        });<newline46mondego>    }<newline46mondego>    public static void createAndShowGUI() {<newline46mondego>        try {<newline46mondego>            UIManager.setLookAndFeel(UIManager.getSystemLookAndFeelClassName());<newline46mondego>        } catch(Exception e) {<newline46mondego>            e.printStackTrace();<newline46mondego>        }<newline46mondego>        JFrame f = new JFrame();<newline46mondego>        f.setDefaultCloseOperation(WindowConstants.EXIT_ON_CLOSE);<newline46mondego>        f.getContentPane().add(new Test2().makeUI());<newline46mondego>        f.setSize(320, 240);<newline46mondego>        f.setLocationRelativeTo(null);<newline46mondego>        f.setVisible(true);<newline46mondego>    }<newline46mondego>}<newline46mondego><newline46mondego>class ColorProgressBar extends JProgressBar {<newline46mondego>    private static final long serialVersionUID = -1265489165072929352L;<newline46mondego><newline46mondego>    private BlockedColorLayerUI colorUI = new BlockedColorLayerUI();<newline46mondego>    public JLayer<JProgressBar> layer;<newline46mondego>    private PropertyChangeSupport supporter = new PropertyChangeSupport(new WeakReference<ColorProgressBar>(this));<newline46mondego><newline46mondego>    public ColorProgressBar(BoundedRangeModel model) {<newline46mondego>        super(model);<newline46mondego>        layer = new JLayer<JProgressBar>(this, colorUI);<newline46mondego>    }<newline46mondego><newline46mondego>    public Color getColor() {<newline46mondego>        if (colorUI == null)<newline46mondego>            return null;<newline46mondego><newline46mondego>        return colorUI.color;<newline46mondego>    }<newline46mondego><newline46mondego>    public void setColor(Color color) {<newline46mondego>        Color oldColor = colorUI.color;<newline46mondego>        colorUI.color = color;<newline46mondego>        supporter.firePropertyChange(<doubleQuotes46>color<doubleQuotes46>, oldColor, color);<newline46mondego>    }<newline46mondego><newline46mondego>//     @Override<newline46mondego>//     public void paintComponents(Graphics g) {<newline46mondego>//         layer.paintComponents(g);<newline46mondego>//     }<newline46mondego><newline46mondego>    class BlockedColorLayerUI extends LayerUI<JProgressBar> {<newline46mondego>        public Color color = null;<newline46mondego>        private BufferedImage bi;<newline46mondego>        private int prevw = -1;<newline46mondego>        private int prevh = -1;<newline46mondego>        @Override public void paint(Graphics g, JComponent c) {<newline46mondego>            if(color != null) {<newline46mondego>                JLayer<?> jlayer = (JLayer<?>)c;<newline46mondego>                JProgressBar progress = (JProgressBar)jlayer.getView();<newline46mondego>                int w = progress.getSize().width;<newline46mondego>                int h = progress.getSize().height;<newline46mondego><newline46mondego>                if(bi==null || w!=prevw || h!=prevh) {<newline46mondego>                    bi = new BufferedImage(w, h, BufferedImage.TYPE_INT_ARGB);<newline46mondego>                }<newline46mondego>                prevw = w;<newline46mondego>                prevh = h;<newline46mondego><newline46mondego>                Graphics2D g2 = bi.createGraphics();<newline46mondego>                super.paint(g2, c);<newline46mondego>                g2.dispose();<newline46mondego><newline46mondego>                Image image = c.createImage(<newline46mondego>                        new FilteredImageSource(bi.getSource(),<newline46mondego>                                new ColorFilter(color)));<newline46mondego>                g.drawImage(image, 0, 0, c);<newline46mondego>            } else {<newline46mondego>                super.paint(g, c);<newline46mondego>            }<newline46mondego>        }<newline46mondego>    }<newline46mondego>    class ColorFilter extends RGBImageFilter {<newline46mondego>        Color color;<newline46mondego><newline46mondego>        public ColorFilter(Color color) {<newline46mondego>            this.color = color;<newline46mondego>        }<newline46mondego><newline46mondego>        @Override public int filterRGB(int x, int y, int argb) {<newline46mondego>            int r = (int)((argb >> 16) & 0xff);<newline46mondego>            int g = (int)((argb >>  8) & 0xff);<newline46mondego>            int b = (int)((argb      ) & 0xff);<newline46mondego>            return (argb & color.getRGB()) | (g<<16) | (r<<8) | (b);<newline46mondego>        }<newline46mondego>    }<newline46mondego>}<newline46mondego>"
"8874splitHere46","20279149splitHere46","testb"
"8875splitHere46","20279149splitHere46","testa"
"8876splitHere46","20279149splitHere46","testb = testa;"
"8877splitHere46","20279149splitHere46","ArrayList"
"8878splitHere46","20279149splitHere46","constructor"
"8879splitHere46","20279149splitHere46","ArrayList<String> testa = new ArrayList<String>();<newline46mondego>testa.add(<doubleQuotes46>Dog<doubleQuotes46>);<newline46mondego>ArrayList<String> testb = new ArrayList<String>(testa);<newline46mondego>testa.clear();<newline46mondego>"
"8880splitHere46","20279149splitHere46","addAll"
"8881splitHere46","20279149splitHere46","ArrayList<String> testa = new ArrayList<String>();<newline46mondego>  testa.add(<doubleQuotes46>Dog<doubleQuotes46>);<newline46mondego>  ArrayList<String> testb = new ArrayList<String>();<newline46mondego>  testb.addAll(testa);<newline46mondego>  testa.clear();<newline46mondego>"
"8882splitHere46","20279280splitHere46","Typeface tf =Typeface.createFromAsset(getAssets(),<newline46mondego>                <doubleQuotes46>fonts/RECOGNITION.ttf<doubleQuotes46>;<newline46mondego>   Paint paint = new Paint();<newline46mondego>   paint.setTypeface(tf);<newline46mondego>   canvas.drawText(<doubleQuotes46>Sample text in bold RECOGNITION<doubleQuotes46>,0,0,paint);<newline46mondego>"
"8883splitHere46","20279391splitHere46","@ManyToOne"
"8884splitHere46","20279391splitHere46","@NotNull"
"8885splitHere46","20279391splitHere46","nullable"
"8886splitHere46","20279391splitHere46","@Column"
"8887splitHere46","20279391splitHere46","optional"
"8888splitHere46","20279391splitHere46","@ManyToOne"
"8889splitHere46","20279391splitHere46","NOT NULL"
"8890splitHere46","20279391splitHere46","optional"
"8891splitHere46","20279391splitHere46","@ManyToOne"
"8892splitHere46","20279391splitHere46","false"
"8893splitHere46","20279391splitHere46","NOT NULL"
"8894splitHere46","20279391splitHere46","createdBy_id"
"8895splitHere46","20279391splitHere46","NULL"
"8896splitHere46","20279391splitHere46","createdBy_id"
"8897splitHere46","20279391splitHere46","NOT NULL"
"8898splitHere46","20279401splitHere46","LOAD DATA INFILE"
"8899splitHere46","20279401splitHere46","LOAD DATA LOCAL INFILE '/path/to/your/file.csv'<newline46mondego>IGNORE -- use this if you have duplicate numbers in the file and UNIQUE constraint defined on `number` column<newline46mondego>INTO TABLE table1<newline46mondego>FIELDS TERMINATED BY ','<newline46mondego>LINES TERMINATED BY ','<newline46mondego>(number)<newline46mondego>"
"8900splitHere46","20279401splitHere46","SET"
"8901splitHere46","20279401splitHere46","LOAD DATA LOCAL INFILE '/path/to/your/file.csv'<newline46mondego>IGNORE INTO TABLE table1<newline46mondego>FIELDS TERMINATED BY ','<newline46mondego>LINES TERMINATED BY ','<newline46mondego>(@number)<newline46mondego>SET number = CONCAT('prefix', @number)<newline46mondego>"
"8902splitHere46","20279432splitHere46","ArrayList<String, Integer, Date> myArray = new ArrayList<String, Integer, Date>();<newline46mondego>"
"8903splitHere46","20279432splitHere46","ArrayList<Object> myArray = new ArrayList<>(); // Object type<newline46mondego>"
"8904splitHere46","20279432splitHere46","ArrayList"
"8905splitHere46","20279432splitHere46","ArrayList<String> myString = new ArrayList<>(); // For strings<newline46mondego>ArrayList<Date> myDates = new ArrayList<>(); // For Date<newline46mondego>"
"8906splitHere46","20279467splitHere46","lockdoors"
"8907splitHere46","20279467splitHere46","String lockedDoors = <doubleQuotes46><doubleQuotes46>;                     // shadowed here<newline46mondego>Set<String> doorSet = lockedDoors.keySet();  // and String.keySet() is bogus<newline46mondego>"
"8908splitHere46","20279467splitHere46","this"
"8909splitHere46","20279467splitHere46","String lockedDoors = <doubleQuotes46><doubleQuotes46>;<newline46mondego>Set<String> doorSet = this.lockedDoors.keySet();<newline46mondego>"
"8910splitHere46","20279494splitHere46","@Override<newline46mondego>    public View getView(int position, View convertView, ViewGroup parent) {<newline46mondego>        //Make sure we have a view to work with (may have been given null)<newline46mondego>        Log.d(<doubleQuotes46>Position:<doubleQuotes46>, <doubleQuotes46> <doubleQuotes46>+position);<newline46mondego>        View itemView   =   convertView;<newline46mondego><newline46mondego>        if(itemView ==  null){<newline46mondego>            itemView =  getLayoutInflater().inflate(R.layout.item_view, parent,false);<newline46mondego>        }<newline46mondego><newline46mondego>        //find the Car to work with<newline46mondego>        Restaurant restaurantGetSetData=restaurantList.get(position);<newline46mondego><newline46mondego>        ImageView restaurantImage_restList_iv=(ImageView)itemView.findViewById(R.id.restaurantImage_restList_iv); <newline46mondego>        restaurantImage_restList_iv.setImageResource(restaurantGetSetData.getIconID());<newline46mondego><newline46mondego>        TextView restaurantName_restList_tv=(TextView)itemView.findViewById(R.id.restaurantName_restList_tv);<newline46mondego>        restaurantName_restList_tv.setText(restaurantGetSetData.getRestaurantName()+<doubleQuotes46>count:<doubleQuotes46>+count++);<newline46mondego><newline46mondego>        TextView restaurantCusine_restList_tv=(TextView)itemView.findViewById(R.id.restaurantCusine_restList_tv);<newline46mondego>        restaurantCusine_restList_tv.setText(restaurantGetSetData.getRestaurantCusine());<newline46mondego><newline46mondego>        TextView restaurantLocation_restList_tv=(TextView)itemView.findViewById(R.id.restaurantLocation_restList_tv);<newline46mondego>        restaurantLocation_restList_tv.setText(restaurantGetSetData.getRestaurantLocation());   <newline46mondego><newline46mondego><newline46mondego>        TextView restaurantRating_restList_tv=(TextView)itemView.findViewById(R.id.restaurantRating_restList_tv);<newline46mondego>        restaurantRating_restList_tv.setText(restaurantGetSetData.getRating());<newline46mondego>        String rate=restaurantGetSetData.getRating();<newline46mondego>        restaurantRating_restList_tv.setBackgroundColor(Color.parseColor(<doubleQuotes46>#<doubleQuotes46>+ArrayColor[(int) Float.parseFloat(rate)]));<newline46mondego><newline46mondego><newline46mondego><newline46mondego>        //-----------------------slot and offer--------------------------------------------------<newline46mondego><newline46mondego>        Typeface typeface = Typeface.createFromAsset(getBaseContext().getAssets(),<newline46mondego>                <doubleQuotes46>helvetica_reg.ttf<doubleQuotes46>);<newline46mondego>      LayoutParams params = new LayoutParams(<newline46mondego>                LayoutParams.WRAP_CONTENT,      <newline46mondego>                LayoutParams.WRAP_CONTENT<newline46mondego>        );<newline46mondego>      LayoutParams layout=new LayoutParams(LayoutParams.WRAP_CONTENT,      <newline46mondego>                LayoutParams.WRAP_CONTENT);<newline46mondego>            layout.setMargins(5, 0, 5, 0);<newline46mondego>            params.setMargins(0, 10, 0, 10);<newline46mondego>        LinearLayout rl=(LinearLayout)itemView.findViewById(R.id.restaurantSlotOffer_restList_tv);<newline46mondego><newline46mondego><newline46mondego>rl.removeAllViews();//<------------------------------------------<newline46mondego><newline46mondego>        for(int j=0;j<8;j++)<newline46mondego>        {<newline46mondego>            LinearLayout l=new LinearLayout(getApplicationContext());<newline46mondego>            l.clearDisappearingChildren();<newline46mondego>            l.setLayoutParams(layout);<newline46mondego>            l.setOrientation(LinearLayout.VERTICAL);<newline46mondego>            TextView time=new TextView(getApplicationContext());<newline46mondego>            time.setBackgroundColor(getResources().getColor(R.color.out_gray));<newline46mondego>            time.setTextColor(Color.BLACK);<newline46mondego>            time.setTextSize(getApplicationContext().getResources().getDimensionPixelSize(R.dimen.custom_text_size));<newline46mondego>            time.setGravity(Gravity.CENTER);<newline46mondego>            time.setLayoutParams(new LayoutParams(90, LayoutParams.WRAP_CONTENT));<newline46mondego>            time.setPadding(2,2,2,2);<newline46mondego>            View v1=new View(getApplicationContext());<newline46mondego>            v1.setLayoutParams(new LayoutParams(LayoutParams.WRAP_CONTENT, 1));<newline46mondego>            v1.setBackgroundColor(color.white);<newline46mondego>            TextView deal=new TextView(getContext());<newline46mondego>            deal.setLayoutParams(new LayoutParams(90, LayoutParams.WRAP_CONTENT));<newline46mondego>            deal.setGravity(Gravity.CENTER);<newline46mondego>            deal.setTextSize(getApplicationContext().getResources().getDimensionPixelSize(R.dimen.custom_text_size));<newline46mondego>            deal.setPadding(2,2,2,2);<newline46mondego>            deal.setTextColor(getResources().getColor(R.color.our_red));<newline46mondego>            deal.setBackgroundColor(getResources().getColor(R.color.out_gray));<newline46mondego>            time.setTypeface(typeface);  <newline46mondego><newline46mondego>            //Log.d(<doubleQuotes46>slot from info anshul:<doubleQuotes46>, slot.get(j)+<doubleQuotes46>\n<doubleQuotes46>);<newline46mondego>            //time code<newline46mondego>            /*{<newline46mondego>                String hour=slot.get(j).substring(0, 2);<newline46mondego>                String min=slot.get(j).substring(3,5);<newline46mondego>                if(hour.equals(<doubleQuotes46>--<doubleQuotes46>)){<newline46mondego>                    Log.d(<doubleQuotes46>hour is <doubleQuotes46>, <doubleQuotes46>-------<doubleQuotes46>);<newline46mondego>                    time.setText(<doubleQuotes46>--:--<doubleQuotes46>);<newline46mondego>                }else{<newline46mondego>                    int hourInt=Integer.parseInt(hour);<newline46mondego>                    int minInt=Integer.parseInt(min);<newline46mondego>                    hour=String.format(<doubleQuotes46>%d:%02d<doubleQuotes46>, ((hourInt==0||hourInt==12)?12:hourInt%12),minInt);<newline46mondego>                    Log.d(<doubleQuotes46>correct Time<doubleQuotes46>, hour);<newline46mondego>                    time.setText(hour);<newline46mondego>                }<newline46mondego>                Log.d(<doubleQuotes46>hour:<doubleQuotes46>, hour);<newline46mondego>                Log.d(<doubleQuotes46>min:<doubleQuotes46>,min);<newline46mondego>            }<newline46mondego>            deal.setText(offer.get(j));<newline46mondego>            deal.setTypeface(typeface);*/<newline46mondego><newline46mondego>            //--remove this-----------------------<newline46mondego>            time.setText(<doubleQuotes46>0:0<doubleQuotes46>+j);<newline46mondego>            //deal.setText(<doubleQuotes46>--<doubleQuotes46>);<newline46mondego><newline46mondego>            //-----------------------------------<newline46mondego>            l.addView(time);<newline46mondego>            l.addView(v1);<newline46mondego>            //l.addView(deal);<newline46mondego>            rl.addView(l);                  <newline46mondego>        }<newline46mondego><newline46mondego>        //----------------------------------------------------------------------------------------<newline46mondego><newline46mondego><newline46mondego>        return itemView;<newline46mondego><newline46mondego>    }<newline46mondego>"
"8911splitHere46","20279591splitHere46","Object"
"8912splitHere46","20279591splitHere46","Foo<T>"
"8913splitHere46","20279591splitHere46","class Foo {<newline46mondego><newline46mondego>    private Object t;<newline46mondego><newline46mondego>    public Foo(Object  t) throws InstantiationException, IllegalAccessException{<newline46mondego>       System.out.println(<doubleQuotes46>1. T is <doubleQuotes46>+t.getClass());<newline46mondego>       this.t = (Object)<doubleQuotes46>test<doubleQuotes46>;<newline46mondego>       System.out.println(<doubleQuotes46>2. T is <doubleQuotes46>+t.getClass());<newline46mondego>   }<newline46mondego><newline46mondego>   void fun(){<newline46mondego>       System.out.println(<doubleQuotes46>3. T is <doubleQuotes46>+t.getClass()+<doubleQuotes46> t = <doubleQuotes46>+t);<newline46mondego>   }<newline46mondego>}<newline46mondego>"
"8914splitHere46","20279591splitHere46","this.t = (Object)<doubleQuotes46>test<doubleQuotes46>;<newline46mondego>"
"8915splitHere46","20279591splitHere46","Object"
"8916splitHere46","20279591splitHere46","this.t"
"8917splitHere46","20279591splitHere46","String"
"8918splitHere46","20279591splitHere46","2. T is Still class java.lang.Integer"
"8919splitHere46","20279591splitHere46","t"
"8920splitHere46","20279591splitHere46","Integer"
"8921splitHere46","20279591splitHere46","this.t"
"8922splitHere46","20279668splitHere46","akka.routing.Broadcast"
"8923splitHere46","20279706splitHere46","Calendar.getInstance()"
"8924splitHere46","20279706splitHere46","Calendar"
"8925splitHere46","20279706splitHere46","dateTimePicker.setMaximumDate(Calendar.getInstance());<newline46mondego>"
"8926splitHere46","20279706splitHere46","DateTimePicker"
"8927splitHere46","20279706splitHere46","Calendar#set(int, int)"
"8928splitHere46","20279706splitHere46","Calendar"
"8929splitHere46","20279706splitHere46","Calendar"
"8930splitHere46","20279706splitHere46","maximum"
"8931splitHere46","20279706splitHere46","minimum"
"8932splitHere46","20279706splitHere46","Calendar"
"8933splitHere46","20279706splitHere46","Calendar minimum = Calendar.getInstance();<newline46mondego>Calendar maximum = Calendar.getInstance();<newline46mondego><newline46mondego>minimum.set(Calendar.HOUR_OF_DAY, 0);<newline46mondego>minimum.set(Calendar.MINUTE, 0);<newline46mondego>minimum.set(Calendar.SECOND, 0);<newline46mondego>minimum.set(Calendar.MILLISECOND, 0);<newline46mondego>// For Calendar.DAY_OF_MONTH, 1 is the actual minimum.<newline46mondego>// 0 will underflow to the last day of the previous month.<newline46mondego>minimum.set(Calendar.DAY_OF_MONTH, 1);<newline46mondego>// For Calendar.MONTH, months are numbered 0 (Jan) through to 11 (Dec).<newline46mondego>minimum.set(Calendar.MONTH, 0);<newline46mondego>// For Calendar.YEAR, both 0 and 1 represent year 1CE.<newline46mondego>minimum.set(Calendar.YEAR, 1);<newline46mondego>"
"8934splitHere46","20279833splitHere46","MenuDemo"
"8935splitHere46","20279837splitHere46","CREATE_USERNAMEPASSWORD_TABLE = <doubleQuotes46>CREATE TABLE <doubleQuotes46>+ TABLE_UsernamePassword + <doubleQuotes46>(<doubleQuotes46><newline46mondego>+ USERNAMEPASSWORD_ID + <doubleQuotes46> INTEGER PRIMARY KEY AUTOINCREMENT,<doubleQuotes46> <newline46mondego>+ USERNAMEPASSWORD_KEY_WEBTITLE + <doubleQuotes46> TEXT,<doubleQuotes46><newline46mondego>+ USERNAMEPASSWORD_KEY_WEBPASSWORD + <doubleQuotes46> TEXT,<doubleQuotes46><newline46mondego>+ USERNAMEPASSWORD_KEY_WEBNAME+<doubleQuotes46> TEXT,<doubleQuotes46><newline46mondego>+ USERNAMEPASSWORD_KEY_WEBURL +<doubleQuotes46> TEXT,<doubleQuotes46><newline46mondego>+ USERNAMEPASSWORD_KEY_WEBTYPE + <doubleQuotes46> TEXT,<doubleQuotes46><newline46mondego>+ USERNAMEPASSWORD_KEY_WEBIMAGE + <doubleQuotes46> INTEGER<doubleQuotes46>+<doubleQuotes46>);<doubleQuotes46>; <newline46mondego>"
"8936splitHere46","20279912splitHere46","Interface<newline46mondego>            ^<newline46mondego>            |<newline46mondego>         Abstract<newline46mondego>          class<newline46mondego>            ^<newline46mondego>           / \<newline46mondego>   Concrete   Concrete <newline46mondego>   class 1    class 2<newline46mondego>"
"8937splitHere46","20279912splitHere46","Abstract<newline46mondego>          class<newline46mondego>            ^<newline46mondego>           / \<newline46mondego>   Concrete   Concrete <newline46mondego>   class 1    class 2<newline46mondego>"
"8938splitHere46","20279993splitHere46","Ctrl + S"
"8939splitHere46","20280023splitHere46","txtBox.addEventFilter(KeyEvent.KEY_PRESSED, new EventHandler<KeyEvent>() {<newline46mondego>    @Override<newline46mondego>    public void handle(KeyEvent t) {           <newline46mondego>            if(t.getCode()==KeyCode.H && t.isControlDown() )<newline46mondego>            {                                                <newline46mondego><newline46mondego>               t.consume();<newline46mondego>            }                           <newline46mondego>    }});<newline46mondego>"
"8940splitHere46","20280050splitHere46","@Override"
"8941splitHere46","20280050splitHere46","compareTo(Girl, int)"
"8942splitHere46","20280050splitHere46","Comparable<Girl>"
"8943splitHere46","20280050splitHere46","compareTo(Girl)"
"8944splitHere46","20280050splitHere46","Comparator<Girl>"
"8945splitHere46","20280050splitHere46","compareTo"
"8946splitHere46","20280050splitHere46","order"
"8947splitHere46","20280050splitHere46","Girl"
"8948splitHere46","20280050splitHere46","Comparator<Girl>"
"8949splitHere46","20280050splitHere46","T extends Comparable<T>"
"8950splitHere46","20280050splitHere46","T"
"8951splitHere46","20280050splitHere46","Comparator<T>"
"8952splitHere46","20280050splitHere46","Collections.sort"
"8953splitHere46","20280050splitHere46","TreeSet"
"8954splitHere46","20280050splitHere46","T extends Comparable<T>"
"8955splitHere46","20280050splitHere46","item1.compareTo(item2)"
"8956splitHere46","20280050splitHere46","Comparable"
"8957splitHere46","20280050splitHere46","int order"
"8958splitHere46","20280080splitHere46","Field declaredField = myObject.getClass().getDeclaredField(<doubleQuotes46>category<doubleQuotes46>);<newline46mondego>    System.out.println(declaredField.get(myObject));<newline46mondego>"
"8959splitHere46","20280080splitHere46","declaredField.setAccessible(true);<newline46mondego>"
"8960splitHere46","20280094splitHere46","String[][]"
"8961splitHere46","20280094splitHere46","CharSequence"
"8962splitHere46","20280094splitHere46","CharSequence"
"8963splitHere46","20280094splitHere46","java.util.regex.Matcher"
"8964splitHere46","20280094splitHere46","public class Main {<newline46mondego>    public static void main(String[] args) {<newline46mondego>        String[][] array2d = new String[2][10];<newline46mondego>        array2d[0][0] = <doubleQuotes46>N<doubleQuotes46>;<newline46mondego>        array2d[0][1] = <doubleQuotes46>e<doubleQuotes46>;<newline46mondego>        array2d[0][2] = <doubleQuotes46>x<doubleQuotes46>;<newline46mondego>        array2d[0][3] = <doubleQuotes46>t<doubleQuotes46>;<newline46mondego>        array2d[0][4] = <doubleQuotes46> <doubleQuotes46>;<newline46mondego>        array2d[0][5] = <doubleQuotes46>N<doubleQuotes46>;<newline46mondego>        array2d[0][6] = <doubleQuotes46>e<doubleQuotes46>;<newline46mondego>        array2d[0][7] = <doubleQuotes46>x<doubleQuotes46>;<newline46mondego>        array2d[0][8] = <doubleQuotes46>t<doubleQuotes46>;<newline46mondego>        array2d[0][9] = <doubleQuotes46> <doubleQuotes46>;<newline46mondego><newline46mondego>        array2d[1][0] = <doubleQuotes46>H<doubleQuotes46>;<newline46mondego>        array2d[1][1] = <doubleQuotes46>e<doubleQuotes46>;<newline46mondego>        array2d[1][2] = <doubleQuotes46>l<doubleQuotes46>;<newline46mondego>        array2d[1][3] = <doubleQuotes46>l<doubleQuotes46>;<newline46mondego>        array2d[1][4] = <doubleQuotes46>o<doubleQuotes46>;<newline46mondego>        array2d[1][5] = <doubleQuotes46>W<doubleQuotes46>;<newline46mondego>        array2d[1][6] = <doubleQuotes46>o<doubleQuotes46>;<newline46mondego>        array2d[1][7] = <doubleQuotes46>r<doubleQuotes46>;<newline46mondego>        array2d[1][8] = <doubleQuotes46>l<doubleQuotes46>;<newline46mondego>        array2d[1][9] = <doubleQuotes46>d<doubleQuotes46>;<newline46mondego>        CharSequence columnCharSequnce = new Array2DColumnCharSequnce(array2d,<newline46mondego>                0);<newline46mondego>        System.out.println(columnCharSequnce.toString());<newline46mondego>        Pattern patttern = Pattern.compile(<doubleQuotes46>ext<doubleQuotes46>);<newline46mondego>        Matcher matcher = patttern.matcher(columnCharSequnce);<newline46mondego>        while (matcher.find()) {<newline46mondego>            System.out.println(matcher.group() + <doubleQuotes46> matched at: [<doubleQuotes46><newline46mondego>                    + matcher.start() + <doubleQuotes46>] - [<doubleQuotes46> + (matcher.end() - 1) + <doubleQuotes46>]<doubleQuotes46>);<newline46mondego>        }<newline46mondego>    }<newline46mondego>}<newline46mondego>"
"8965splitHere46","20280094splitHere46","Next Next <newline46mondego>ext matched at: [1] - [3]<newline46mondego>ext matched at: [6] - [8]<newline46mondego>"
"8966splitHere46","20280094splitHere46","CharSequence"
"8967splitHere46","20280094splitHere46","class Array2DColumnCharSequnce implements CharSequence {<newline46mondego><newline46mondego>    private int column;<newline46mondego>    private String[][] array2d;<newline46mondego>    private int endIndex;<newline46mondego>    private int startIndex;<newline46mondego><newline46mondego>    public Array2DColumnCharSequnce(String[][] array2d, int column) {<newline46mondego>        this(array2d, column, 0, array2d[column].length);<newline46mondego>        this.array2d = array2d;<newline46mondego>        this.column = column;<newline46mondego>    }<newline46mondego><newline46mondego>    public Array2DColumnCharSequnce(String[][] array2d, int column,<newline46mondego>            int startIndex, int endIndex) {<newline46mondego>        this.array2d = array2d;<newline46mondego>        this.column = column;<newline46mondego>        this.startIndex = startIndex;<newline46mondego>        this.endIndex = endIndex;<newline46mondego>    }<newline46mondego><newline46mondego>    public int length() {<newline46mondego>        return endIndex - startIndex;<newline46mondego>    }<newline46mondego><newline46mondego>    public char charAt(int index) {<newline46mondego>        String charString = array2d[column][startIndex + index];<newline46mondego>        return charString.charAt(0);<newline46mondego>    }<newline46mondego><newline46mondego>    public CharSequence subSequence(int start, int end) {<newline46mondego>        Array2DColumnCharSequnce array2dColumnCharSequnce = new Array2DColumnCharSequnce(<newline46mondego>                array2d, column, start, end);<newline46mondego>        return array2dColumnCharSequnce;<newline46mondego>    }<newline46mondego><newline46mondego>    @Override<newline46mondego>    public String toString() {<newline46mondego>        StringBuilder sb = new StringBuilder(this);<newline46mondego>        return sb.toString();<newline46mondego>    }<newline46mondego>}<newline46mondego>"
"8968splitHere46","20280094splitHere46","Array2DColumnCharSequnce"
"8969splitHere46","20280094splitHere46","CharSequence"
"8970splitHere46","20280094splitHere46","CharSequence"
"8971splitHere46","20280094splitHere46","java.util.regex.Matcher"
"8972splitHere46","20280170splitHere46","e"
"8973splitHere46","20280170splitHere46","select u from User u where u.username in (select a.username from Authority a where a.username = :username)<newline46mondego>"
"8974splitHere46","20280225splitHere46","Graphics"
"8975splitHere46","20280225splitHere46","Graphics"
"8976splitHere46","20280225splitHere46","import java.awt.BorderLayout;<newline46mondego>import java.awt.Color;<newline46mondego>import java.awt.Dimension;<newline46mondego>import java.awt.EventQueue;<newline46mondego>import java.awt.Graphics;<newline46mondego>import java.awt.Graphics2D;<newline46mondego>import java.awt.Point;<newline46mondego>import java.awt.event.MouseAdapter;<newline46mondego>import java.awt.event.MouseEvent;<newline46mondego>import java.awt.geom.AffineTransform;<newline46mondego>import java.awt.image.BufferedImage;<newline46mondego>import java.io.File;<newline46mondego>import java.io.IOException;<newline46mondego>import javax.imageio.ImageIO;<newline46mondego>import javax.swing.JFrame;<newline46mondego>import javax.swing.JPanel;<newline46mondego>import javax.swing.JSlider;<newline46mondego>import javax.swing.UIManager;<newline46mondego>import javax.swing.UnsupportedLookAndFeelException;<newline46mondego>import javax.swing.event.ChangeEvent;<newline46mondego>import javax.swing.event.ChangeListener;<newline46mondego><newline46mondego>public class SampleRotation {<newline46mondego><newline46mondego>    public static void main(String[] args) {<newline46mondego>        new SampleRotation();<newline46mondego>    }<newline46mondego><newline46mondego>    public SampleRotation() {<newline46mondego>        EventQueue.invokeLater(new Runnable() {<newline46mondego>            @Override<newline46mondego>            public void run() {<newline46mondego>                try {<newline46mondego>                    UIManager.setLookAndFeel(UIManager.getSystemLookAndFeelClassName());<newline46mondego>                } catch (ClassNotFoundException | InstantiationException | IllegalAccessException | UnsupportedLookAndFeelException ex) {<newline46mondego>                    ex.printStackTrace();<newline46mondego>                }<newline46mondego><newline46mondego>                final RotationPane rotationPane = new RotationPane();<newline46mondego>                final JSlider slider = new JSlider(0, 100);<newline46mondego>                slider.addChangeListener(new ChangeListener() {<newline46mondego>                    @Override<newline46mondego>                    public void stateChanged(ChangeEvent e) {<newline46mondego>                        double angle = 720d * (slider.getValue() / 100d);<newline46mondego>                        rotationPane.setAngle(angle);<newline46mondego>                    }<newline46mondego>                });<newline46mondego>                slider.setValue(0);<newline46mondego><newline46mondego>                JFrame frame = new JFrame(<doubleQuotes46>Testing<doubleQuotes46>);<newline46mondego>                frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);<newline46mondego>                frame.add(rotationPane);<newline46mondego>                frame.add(slider, BorderLayout.SOUTH);<newline46mondego>                frame.pack();<newline46mondego>                frame.setLocationRelativeTo(null);<newline46mondego>                frame.setVisible(true);<newline46mondego>            }<newline46mondego>        });<newline46mondego>    }<newline46mondego><newline46mondego>    public class RotationPane extends JPanel {<newline46mondego><newline46mondego>        private BufferedImage img;<newline46mondego>        private BufferedImage rotated;<newline46mondego>        private double angle;<newline46mondego>        private Point clickPoint;<newline46mondego><newline46mondego>        public RotationPane() {<newline46mondego>            try {<newline46mondego>                img = ImageIO.read(new File(<doubleQuotes46>/Users/swhitehead/Dropbox/MegaTokyo/issue459.jpg<doubleQuotes46>));<newline46mondego>                BufferedImage scaled = new BufferedImage(img.getWidth() / 2, img.getHeight() / 2, BufferedImage.TYPE_INT_ARGB);<newline46mondego>                Graphics2D g2d = scaled.createGraphics();<newline46mondego>                g2d.setTransform(AffineTransform.getScaleInstance(0.5d, 0.5d));<newline46mondego>                g2d.drawImage(img, 0, 0, this);<newline46mondego>                g2d.dispose();<newline46mondego>                img = scaled;<newline46mondego>                setAngle(0d);<newline46mondego>            } catch (IOException ex) {<newline46mondego>                ex.printStackTrace();<newline46mondego>            }<newline46mondego><newline46mondego>            addMouseListener(new MouseAdapter() {<newline46mondego><newline46mondego>                @Override<newline46mondego>                public void mouseClicked(MouseEvent e) {<newline46mondego>                    clickPoint = e.getPoint();<newline46mondego>                    repaint();<newline46mondego>                }<newline46mondego><newline46mondego>            });<newline46mondego><newline46mondego>        }<newline46mondego><newline46mondego>        public void setAngle(double angle) {<newline46mondego>            this.angle = angle;<newline46mondego><newline46mondego>            double rads = Math.toRadians(getAngle());<newline46mondego>            double sin = Math.abs(Math.sin(rads)), cos = Math.abs(Math.cos(rads));<newline46mondego>            int w = img.getWidth();<newline46mondego>            int h = img.getHeight();<newline46mondego>            int newWidth = (int) Math.floor(w * cos + h * sin);<newline46mondego>            int newHeight = (int) Math.floor(h * cos + w * sin);<newline46mondego><newline46mondego>            rotated = new BufferedImage(newWidth, newHeight, BufferedImage.TYPE_INT_ARGB);<newline46mondego>            Graphics2D g2d = rotated.createGraphics();<newline46mondego>            AffineTransform at = new AffineTransform();<newline46mondego>            at.translate((newWidth - w) / 2, (newHeight - h) / 2);<newline46mondego><newline46mondego>            int x = clickPoint == null ? w / 2 : clickPoint.x;<newline46mondego>            int y = clickPoint == null ? h / 2 : clickPoint.y;<newline46mondego><newline46mondego>            at.rotate(Math.toRadians(getAngle()), x, y);<newline46mondego>            g2d.setTransform(at);<newline46mondego>            g2d.drawImage(img, 0, 0, this);<newline46mondego>            g2d.setColor(Color.RED);<newline46mondego>            g2d.drawRect(0, 0, newWidth - 1, newHeight - 1);<newline46mondego>            g2d.dispose();<newline46mondego><newline46mondego>            repaint();<newline46mondego>        }<newline46mondego><newline46mondego>        public double getAngle() {<newline46mondego>            return angle;<newline46mondego>        }<newline46mondego><newline46mondego>        @Override<newline46mondego>        public Dimension getPreferredSize() {<newline46mondego>            return img == null ? new Dimension(200, 200) : new Dimension(img.getWidth(this), img.getHeight(this));<newline46mondego>        }<newline46mondego><newline46mondego>        @Override<newline46mondego>        protected void paintComponent(Graphics g) {<newline46mondego>            super.paintComponent(g);<newline46mondego>            if (rotated != null) {<newline46mondego>                Graphics2D g2d = (Graphics2D) g.create();<newline46mondego><newline46mondego>                int x = (getWidth() - rotated.getWidth()) / 2;<newline46mondego>                int y = (getHeight() - rotated.getHeight()) / 2;<newline46mondego>                g2d.drawImage(rotated, x, y, this);<newline46mondego><newline46mondego>                g2d.setColor(Color.RED);<newline46mondego><newline46mondego>                x = clickPoint == null ? getWidth() / 2 : clickPoint.x;<newline46mondego>                y = clickPoint == null ? getHeight()/ 2 : clickPoint.y;<newline46mondego><newline46mondego>                x -= 5;<newline46mondego>                y -= 5;<newline46mondego><newline46mondego>                g2d.drawOval(x, y, 10, 10);<newline46mondego>                g2d.dispose();<newline46mondego>            }<newline46mondego>        }        <newline46mondego>    }    <newline46mondego>}<newline46mondego>"
"8977splitHere46","20280332splitHere46","<jsp:useBean id=<doubleQuotes46>user<doubleQuotes46> class=<doubleQuotes46>web.model.User<doubleQuotes46> scope=<doubleQuotes46>request<doubleQuotes46> /><newline46mondego><jsp:getProperty property=<doubleQuotes46>firstName<doubleQuotes46> name=<doubleQuotes46>user<doubleQuotes46> /><newline46mondego>"
"8978splitHere46","20280387splitHere46","\b"
"8979splitHere46","20280387splitHere46","\w"
"8980splitHere46","20280387splitHere46","(?<=^|\s)search:(?=\s|$)<newline46mondego>"
"8981splitHere46","20280387splitHere46","(?=[\s.,:;'<doubleQuotes46>!?)]|$)<newline46mondego>"
"8982splitHere46","20280582splitHere46","in"
"8983splitHere46","20280582splitHere46","0"
"8984splitHere46","20280582splitHere46","in - 1"
"8985splitHere46","20280582splitHere46","-1"
"8986splitHere46","20280582splitHere46","while(in>0 && a[in-1]>=temp)"
"8987splitHere46","20280582splitHere46","in > 0"
"8988splitHere46","20280582splitHere46","false"
"8989splitHere46","20280582splitHere46","a[in - 1] >=temp"
"8990splitHere46","20280582splitHere46","while(a[in-1]>=temp && in>0)"
"8991splitHere46","20280582splitHere46","a[in - 1]"
"8992splitHere46","20280582splitHere46","in"
"8993splitHere46","20280582splitHere46","0"
"8994splitHere46","20280582splitHere46","in - 1"
"8995splitHere46","20280582splitHere46","-1"
"8996splitHere46","20280582splitHere46","-1"
"8997splitHere46","20280582splitHere46","ArrayIndexOutOfBoundsException"
"8998splitHere46","20280827splitHere46","//Make a layout programmatically<newline46mondego>LinearLayout lnLayout = new LinearLayout(this);<newline46mondego>lnLayout.setLayoutParams(new ViewGroup.LayoutParams(<newline46mondego>    ViewGroup.LayoutParams.WRAP_CONTENT,<newline46mondego>    ViewGroup.LayoutParams.WRAP_CONTENT));<newline46mondego>lnLayout.setOrientation(LinearLayout.Horizontal);<newline46mondego><newline46mondego>//Your code was a bit unclear so I assume these<newline46mondego>int[] missingNumber = new int[/*the ammount of missing numbers*/];<newline46mondego>for (int iii < 0; iii < missingNumber.length; iii++)<newline46mondego>    missingNumber[iii] = /* Here you should use something to get missing numbers one by one, a method like <doubleQuotes46>GetNumber(iii)<doubleQuotes46> or whatever suits your need :) */<newline46mondego><newline46mondego>//For each missing number create one text view (inside an array is better)<newline46mondego>TextView[] text = new TextView[missingNumber.length];<newline46mondego>for (int iii = 0; iii < missingNumber.length; iii++)<newline46mondego>{<newline46mondego>    text[iii] = new TextView(this);<newline46mondego>    text[iii].setLayoutParams(new ViewGroup.LayoutParams(<newline46mondego>        ViewGroup.LayoutParams.WRAP_CONTENT,<newline46mondego>        ViewGroup.LayoutParams.WRAP_CONTENT));<newline46mondego>    text[iii].setText( String.valueOf( missingNum(iii) ) );<newline46mondego>    lnLayout.addView(text[iii]);<newline46mondego>}<newline46mondego><newline46mondego>setContentView(lnLayout);<newline46mondego>"
"8999splitHere46","20280827splitHere46","private long value1(char a) {<newline46mondego>    switch(a)<newline46mondego>    {<newline46mondego>       case 'A': return 1;    <newline46mondego>       case 'B': return 2;<newline46mondego>       case 'C': return 3;<newline46mondego>       case 'D': return 4;<newline46mondego>       case 'E': return 5;<newline46mondego>       case 'F': return 6;<newline46mondego>       case 'G': return 7;<newline46mondego>       case 'H': return 8;<newline46mondego>       case 'I': return 9;<newline46mondego>       case 'J': return 1;<newline46mondego>       case 'K': return 2;<newline46mondego>       case 'L': return 3;<newline46mondego>       case 'M': return 4;<newline46mondego>       case 'N': return 5;<newline46mondego>       case 'O': return 6;<newline46mondego>       case 'P': return 7;<newline46mondego>       case 'Q': return 8;<newline46mondego>       case 'R': return 9;<newline46mondego>       case 'S': return 1;          <newline46mondego>       case 'T': return 2;<newline46mondego>       case 'U': return 3;<newline46mondego>       case 'V': return 4;<newline46mondego>       case 'W': return 5;<newline46mondego>       case 'X': return 6;<newline46mondego>       case 'Y': return 7;<newline46mondego>       case 'Z': return 8;<newline46mondego>       default:  return 0;<newline46mondego><newline46mondego>    }<newline46mondego>"
"9000splitHere46","20280834splitHere46","@Resource<newline46mondego>    WebServiceContext webServiceContext;<newline46mondego><newline46mondego>    public String LogIn(String UserName, String Password, String PhoneNumber) {<newline46mondego>     ...<newline46mondego>        MessageContext mc = webServiceContext.getMessageContext();<newline46mondego>        HttpSession session =    ((javax.servlet.http.HttpServletRequest)mc.get(MessageContext.SERVLET_REQUEST)).getSession();<newline46mondego>        if (session == null)<newline46mondego>             throw new WebServiceException(<doubleQuotes46>No Session found<doubleQuotes46>);<newline46mondego>     ...<newline46mondego>"
"9001splitHere46","20280844splitHere46","Integer a = 500;<newline46mondego>    long b = 500;<newline46mondego>    System.out.println(a == b);<newline46mondego>    System.out.println(a.equals(b));<newline46mondego>"
"9002splitHere46","20280844splitHere46","true<newline46mondego>false<newline46mondego>"
"9003splitHere46","20280844splitHere46","b == a.intValue()<newline46mondego>"
"9004splitHere46","20280844splitHere46","a.equals(Long.valueOf(b))<newline46mondego>"
"9005splitHere46","20280844splitHere46","public boolean equals(Object obj) {<newline46mondego>    if (obj instanceof Integer) {<newline46mondego>        return value == ((Integer)obj).intValue();<newline46mondego>    }<newline46mondego>    return false;<newline46mondego>}<newline46mondego>"
"9006splitHere46","20280850splitHere46","WebClient webClient = new WebClient();<newline46mondego>   XHtmlPage page = webClient.getPage(<doubleQuotes46>â€¦<doubleQuotes46>);<newline46mondego>   HtmlElement div = page.getHtmlElementById(<doubleQuotes46>elem_container<doubleQuotes46>);<newline46mondego>   WebWindow window = webClient.getCurrentWindow();<newline46mondego>   Window jscript = (Window) window.getScriptObject();<newline46mondego>   HTMLElement element = (HTMLElement) jscript.makeScriptableFor(div);<newline46mondego>   ComputedCSSStyleDeclaration style = jscript.jsxFunction_getComputedStyle(element, null);<newline46mondego>   System.out.println(style);<newline46mondego>"
"9007splitHere46","20280944splitHere46","this"
"9008splitHere46","20280944splitHere46","public Point(Point other)<newline46mondego>{<newline46mondego>    this._x = other._x;<newline46mondego>    this._y = other._y;<newline46mondego>}<newline46mondego>"
"9009splitHere46","20280991splitHere46","chcp"
"9010splitHere46","20280991splitHere46","850"
"9011splitHere46","20280991splitHere46","new InputStreamReader"
"9012splitHere46","20280992splitHere46","T extends Object & Comparable<T>"
"9013splitHere46","20280992splitHere46","T extends Comparable<T>"
"9014splitHere46","20280992splitHere46","Object & Comparable<T>"
"9015splitHere46","20280992splitHere46","Comparable<T>"
"9016splitHere46","20280992splitHere46","Object"
"9017splitHere46","20280992splitHere46","T"
"9018splitHere46","20280992splitHere46","Comparable<T>"
"9019splitHere46","20280992splitHere46","Object & Comparable<T>"
"9020splitHere46","20280992splitHere46","T extends Object & Comparable<T>"
"9021splitHere46","20280992splitHere46","Object"
"9022splitHere46","20280992splitHere46","T extends Comparable<T>"
"9023splitHere46","20280992splitHere46","Comparable"
"9024splitHere46","20280992splitHere46","max"
"9025splitHere46","20280992splitHere46","<T extends Comparable<T>> T max1(List<T> list) { ... }<newline46mondego><newline46mondego><T extends Object & Comparable<T>> T max2(List<T> list) { ... }<newline46mondego>"
"9026splitHere46","20280992splitHere46","javap -s"
"9027splitHere46","20280992splitHere46","<T extends java/lang/Comparable<T>> T max1(java.util.List<T>);<newline46mondego>  Signature: (Ljava/util/List;)Ljava/lang/Comparable;<newline46mondego><newline46mondego><T extends java/lang/Object & java/lang/Comparable<T>> T max2(java.util.List<T>);<newline46mondego>  Signature: (Ljava/util/List;)Ljava/lang/Object;<newline46mondego>"
"9028splitHere46","20280992splitHere46","Collections.max"
"9029splitHere46","20280992splitHere46","public static Object max(Collection coll)<newline46mondego>  Signature: (Ljava/util/Collection;)Ljava/lang/Object;<newline46mondego>"
"9030splitHere46","20280992splitHere46","public static <T extends Object & Comparable<? super T>> T max(Collection<? extends T> coll)<newline46mondego>  Signature: (Ljava/util/Collection;)Ljava/lang/Object;<newline46mondego>"
"9031splitHere46","20280992splitHere46","public static <T extends Comparable<? super T>> T max(Collection<? extends T> coll)<newline46mondego>  Signature: (Ljava/util/Collection;)Ljava/lang/Comparable;<newline46mondego>"
"9032splitHere46","20280992splitHere46","max"
"9033splitHere46","20280992splitHere46","Object"
"9034splitHere46","20280992splitHere46","max"
"9035splitHere46","20280992splitHere46","Comparable"
"9036splitHere46","20280992splitHere46","NoSuchMethodError"
"9037splitHere46","20280992splitHere46","<T extends Object & Comparable<T>>"
"9038splitHere46","20280992splitHere46","Collections.max"
"9039splitHere46","20280992splitHere46","static <T extends Comparable<T>> T max(List<T> list)<newline46mondego>"
"9040splitHere46","20280992splitHere46","static <T extends Comparable<? super T>> T max(List<? extends T> list)<newline46mondego>"
"9041splitHere46","20280992splitHere46","class A implements Comparable<A> { ... }<newline46mondego><newline46mondego>class B extends A { }<newline46mondego><newline46mondego>List<B> bList = ...;<newline46mondego>B bMax = max(bList);<newline46mondego>"
"9042splitHere46","20280992splitHere46","T"
"9043splitHere46","20280992splitHere46","Comparable<? super T>"
"9044splitHere46","20280992splitHere46","T"
"9045splitHere46","20280992splitHere46","B"
"9046splitHere46","20280992splitHere46","List<? extends T>"
"9047splitHere46","20280992splitHere46","List<T>"
"9048splitHere46","20280992splitHere46","List<? extends T>"
"9049splitHere46","20281064splitHere46","@Transactional"
"9050splitHere46","20281064splitHere46","UserService"
"9051splitHere46","20281064splitHere46","UserService"
"9052splitHere46","20281064splitHere46","DefaultUserService"
"9053splitHere46","20281064splitHere46","@Value(<doubleQuotes46>${someprop}<doubleQuotes46>)"
"9054splitHere46","20281064splitHere46","setTableName()"
"9055splitHere46","20281079splitHere46","ViewPager"
"9056splitHere46","20281079splitHere46","initSectionsPagerAdapter()"
"9057splitHere46","20281079splitHere46","onResume"
"9058splitHere46","20281079splitHere46","onResume"
"9059splitHere46","20281079splitHere46","FragmentManager fm = this.getFragmentManager();<newline46mondego>GluehweinMapFragment f1 = (GluehweinMapFragment)fm.getFragments().get(0); // to get one fragment<newline46mondego><newline46mondego>for (Fragment f : fm.getFragments()) { // to loop through fragments and checking their type<newline46mondego>    if (f instanceof GluehweinMapFragment) {<newline46mondego>    }<newline46mondego>}<newline46mondego>"
"9060splitHere46","20281082splitHere46","public class LocationService implements LocationListener {<newline46mondego><newline46mondego>    boolean isGPSEnabled = false;<newline46mondego><newline46mondego>    boolean isNetworkEnabled = false;<newline46mondego><newline46mondego>    boolean canGetLocation = false;<newline46mondego><newline46mondego>    final static long MIN_TIME_INTERVAL = 60 * 1000L;<newline46mondego><newline46mondego>    Location location;<newline46mondego><newline46mondego><newline46mondego>    // The minimum distance to change Updates in meters<newline46mondego>    private static final long MIN_DISTANCE_CHANGE_FOR_UPDATES = 0; // 10<newline46mondego><newline46mondego>    // The minimum time between updates in milliseconds<newline46mondego>    private static final long MIN_TIME_BW_UPDATES = 1; // 1 minute<newline46mondego><newline46mondego>    protected LocationManager locationManager;<newline46mondego><newline46mondego>    private CountDownTimer timer = new CountDownTimer(5 * 1000, 1000) {<newline46mondego><newline46mondego>        public void onTick(long millisUntilFinished) {<newline46mondego><newline46mondego>        }<newline46mondego><newline46mondego>        public void onFinish() {<newline46mondego>            stopUsingGPS();<newline46mondego>        }<newline46mondego>    };<newline46mondego><newline46mondego>    public LocationService() {<newline46mondego>        super(R.id.gps_service_id);<newline46mondego>    }<newline46mondego><newline46mondego><newline46mondego>    public void start() {<newline46mondego>        if (Utils.isNetworkAvailable(context)) {<newline46mondego><newline46mondego>            try {<newline46mondego><newline46mondego><newline46mondego>                timer.start();<newline46mondego><newline46mondego><newline46mondego>                locationManager = (LocationManager) context<newline46mondego>                        .getSystemService(Context.LOCATION_SERVICE);<newline46mondego><newline46mondego>                isGPSEnabled = locationManager<newline46mondego>                        .isProviderEnabled(LocationManager.GPS_PROVIDER);<newline46mondego><newline46mondego>                isNetworkEnabled = locationManager<newline46mondego>                        .isProviderEnabled(LocationManager.NETWORK_PROVIDER);<newline46mondego>                this.canGetLocation = true;<newline46mondego>                if (isNetworkEnabled) {<newline46mondego>                    locationManager.requestLocationUpdates(<newline46mondego>                            LocationManager.NETWORK_PROVIDER,<newline46mondego>                            MIN_TIME_BW_UPDATES,<newline46mondego>                            MIN_DISTANCE_CHANGE_FOR_UPDATES, this);<newline46mondego>                    Log.d(<doubleQuotes46>Network<doubleQuotes46>, <doubleQuotes46>Network<doubleQuotes46>);<newline46mondego>                    if (locationManager != null) {<newline46mondego>                        Location tempLocation = locationManager<newline46mondego>                                .getLastKnownLocation(LocationManager.NETWORK_PROVIDER);<newline46mondego>                        if (tempLocation != null<newline46mondego>                                && isBetterLocation(tempLocation,<newline46mondego>                                        location))<newline46mondego>                            location = tempLocation;<newline46mondego>                    }<newline46mondego>                }<newline46mondego>                if (isGPSEnabled) {<newline46mondego><newline46mondego>                    locationManager.requestSingleUpdate(<newline46mondego>                            LocationManager.GPS_PROVIDER, this, null);<newline46mondego>                    locationManager.requestLocationUpdates(<newline46mondego>                            LocationManager.GPS_PROVIDER, MIN_TIME_BW_UPDATES,<newline46mondego>                            MIN_DISTANCE_CHANGE_FOR_UPDATES, this);<newline46mondego>                    Log.d(<doubleQuotes46>GPS Enabled<doubleQuotes46>, <doubleQuotes46>GPS Enabled<doubleQuotes46>);<newline46mondego>                    if (locationManager != null) {<newline46mondego>                        Location tempLocation = locationManager<newline46mondego>                                .getLastKnownLocation(LocationManager.GPS_PROVIDER);<newline46mondego>                        if (tempLocation != null<newline46mondego>                                && isBetterLocation(tempLocation,<newline46mondego>                                        location))<newline46mondego>                            location = tempLocation;<newline46mondego>                    }<newline46mondego>                }<newline46mondego><newline46mondego>            } catch (Exception e) {<newline46mondego>                onTaskError(e.getMessage());<newline46mondego>                e.printStackTrace();<newline46mondego>            }<newline46mondego>        } else {<newline46mondego>            onOfflineResponse(requestData);<newline46mondego>        }<newline46mondego>    }<newline46mondego><newline46mondego>    public void stopUsingGPS() {<newline46mondego>        if (locationManager != null) {<newline46mondego>            locationManager.removeUpdates(LocationService.this);<newline46mondego>        }<newline46mondego>    }<newline46mondego><newline46mondego>    public boolean canGetLocation() {<newline46mondego>        locationManager = (LocationManager) context<newline46mondego>                .getSystemService(Context.LOCATION_SERVICE);<newline46mondego>        isGPSEnabled = locationManager<newline46mondego>                .isProviderEnabled(LocationManager.GPS_PROVIDER);<newline46mondego><newline46mondego>        // getting network status<newline46mondego>        isNetworkEnabled = locationManager<newline46mondego>                .isProviderEnabled(LocationManager.NETWORK_PROVIDER);<newline46mondego>        return isGPSEnabled || isNetworkEnabled;<newline46mondego>    }<newline46mondego><newline46mondego>    @Override<newline46mondego>    public void onLocationChanged(Location location) {<newline46mondego><newline46mondego>        if (location != null<newline46mondego>                && isBetterLocation(location, this.location)) {<newline46mondego><newline46mondego>            this.location = location;<newline46mondego><newline46mondego>        }<newline46mondego>    }<newline46mondego><newline46mondego>    @Override<newline46mondego>    public void onProviderDisabled(String provider) {<newline46mondego>    }<newline46mondego><newline46mondego>    @Override<newline46mondego>    public void onProviderEnabled(String provider) {<newline46mondego>    }<newline46mondego><newline46mondego>    @Override<newline46mondego>    public void onStatusChanged(String provider, int status, Bundle extras) {<newline46mondego>    }<newline46mondego><newline46mondego>    @Override<newline46mondego>    public Object getResponseObject(Object location) {<newline46mondego>        return location;<newline46mondego>    }<newline46mondego><newline46mondego>    public static boolean isBetterLocation(Location location,<newline46mondego>            Location currentBestLocation) {<newline46mondego>        if (currentBestLocation == null) {<newline46mondego>            // A new location is always better than no location<newline46mondego>            return true;<newline46mondego>        }<newline46mondego><newline46mondego>        // Check whether the new location fix is newer or older<newline46mondego>        long timeDelta = location.getTime() - currentBestLocation.getTime();<newline46mondego>        boolean isSignificantlyNewer = timeDelta > MIN_TIME_INTERVAL;<newline46mondego>        boolean isSignificantlyOlder = timeDelta < -MIN_TIME_INTERVAL;<newline46mondego>        boolean isNewer = timeDelta > 0;<newline46mondego><newline46mondego>        // If it's been more than two minutes since the current location,<newline46mondego>        // use the new location<newline46mondego>        // because the user has likely moved<newline46mondego>        if (isSignificantlyNewer) {<newline46mondego>            return true;<newline46mondego>            // If the new location is more than two minutes older, it must<newline46mondego>            // be worse<newline46mondego>        } else if (isSignificantlyOlder) {<newline46mondego>            return false;<newline46mondego>        }<newline46mondego><newline46mondego>        // Check whether the new location fix is more or less accurate<newline46mondego>        int accuracyDelta = (int) (location.getAccuracy() - currentBestLocation<newline46mondego>                .getAccuracy());<newline46mondego>        boolean isLessAccurate = accuracyDelta > 0;<newline46mondego>        boolean isMoreAccurate = accuracyDelta < 0;<newline46mondego>        boolean isSignificantlyLessAccurate = accuracyDelta > 200;<newline46mondego><newline46mondego>        // Check if the old and new location are from the same provider<newline46mondego>        boolean isFromSameProvider = isSameProvider(location.getProvider(),<newline46mondego>                currentBestLocation.getProvider());<newline46mondego><newline46mondego>        // Determine location quality using a combination of timeliness and<newline46mondego>        // accuracy<newline46mondego>        if (isMoreAccurate) {<newline46mondego>            return true;<newline46mondego>        } else if (isNewer && !isLessAccurate) {<newline46mondego>            return true;<newline46mondego>        } else if (isNewer && !isSignificantlyLessAccurate<newline46mondego>                && isFromSameProvider) {<newline46mondego>            return true;<newline46mondego>        }<newline46mondego>        return false;<newline46mondego>    }<newline46mondego><newline46mondego>}<newline46mondego>"
"9061splitHere46","20281192splitHere46","@ControllerAdvice"
"9062splitHere46","20281192splitHere46","@ExceptionHandler"
"9063splitHere46","20281305splitHere46","int res;<newline46mondego>if(chaIntVal >= 0x10) {<newline46mondego>    res = chaIntVal;<newline46mondego>} else {<newline46mondego>    res = chaIntVal | 0x60;   // binary or<newline46mondego>}<newline46mondego>"
"9064splitHere46","20281381splitHere46","private int statusBar() {<newline46mondego>    Rect rectgle= new Rect();<newline46mondego>    Window window= getWindow();<newline46mondego>    window.getDecorView().getWindowVisibleDisplayFrame(rectgle);<newline46mondego>    int StatusBarHeight= rectgle.top;<newline46mondego>    int contentViewTop= <newline46mondego>        window.findViewById(Window.ID_ANDROID_CONTENT).getTop();<newline46mondego>    int statusBar = contentViewTop - StatusBarHeight;<newline46mondego>    return statusBar;<newline46mondego>}<newline46mondego>"
"9065splitHere46","20281381splitHere46","Toast.makeText(getApplicationContext(), <doubleQuotes46><doubleQuotes46> + statusBar(), Toast.LENGTH_LONG).show();<newline46mondego>"
"9066splitHere46","20281381splitHere46","private int statusBar() {<newline46mondego>    Rect rectgle= new Rect();<newline46mondego>    Window window= getWindow();<newline46mondego>    window.getDecorView().getWindowVisibleDisplayFrame(rectgle);<newline46mondego>    int statusBar = rectgle.top;<newline46mondego>    return statusBar;<newline46mondego>}<newline46mondego>"
"9067splitHere46","20281381splitHere46","private int statusBar() {<newline46mondego>    Rect rectgle= new Rect();<newline46mondego>    Window window= getWindow();<newline46mondego>    window.getDecorView().getWindowVisibleDisplayFrame(rectgle);<newline46mondego>    int StatusBarHeight= rectgle.top;<newline46mondego>    int contentViewTop= <newline46mondego>        window.findViewById(Window.ID_ANDROID_CONTENT).getTop();<newline46mondego>    int statusBar = contentViewTop + StatusBarHeight;<newline46mondego>    return statusBar;<newline46mondego>}<newline46mondego>"
"9068splitHere46","20281435splitHere46","rsslink"
"9069splitHere46","20281435splitHere46","arr"
"9070splitHere46","20281435splitHere46","rsslink"
"9071splitHere46","20281435splitHere46",";"
"9072splitHere46","20281435splitHere46","String [] arr = rsslink.toString().split(<doubleQuotes46>;<doubleQuotes46>); <newline46mondego>for (int i = 0; i < arr.length; i++)<newline46mondego>    {<newline46mondego>        // HERE IS THE PLACE TO HANDLE a single RSS Link. arr contains the single link<newline46mondego>    }<newline46mondego>"
"9073splitHere46","20281526splitHere46","${catalina.home}/MyLog/PmcDemo.log<newline46mondego>"
"9074splitHere46","20281638splitHere46","<select name=<doubleQuotes46>area<doubleQuotes46>> @for(area <- areas) {<newline46mondego>    <option value=<doubleQuotes46>@area.uniqueid<doubleQuotes46>>@area.name</option>}<newline46mondego></select><newline46mondego>"
"9075splitHere46","20281789splitHere46","private Bitmap downloadBitmap(String url) {<newline46mondego>    // Getting the url from the html<newline46mondego>    url = url.substring(url.indexOf(<doubleQuotes46>src=\<doubleQuotes46><doubleQuotes46>) + 5, url.length() - 1);<newline46mondego>    url = url.substring(0, url.indexOf(<doubleQuotes46>\<doubleQuotes46><doubleQuotes46>));<newline46mondego><newline46mondego>    final DefaultHttpClient client = new DefaultHttpClient();<newline46mondego><newline46mondego>    final HttpGet getRequest = new HttpGet(url);<newline46mondego>    try {<newline46mondego>        HttpResponse response = client.execute(getRequest);<newline46mondego><newline46mondego>        //check 200 OK for success<newline46mondego>        final int statusCode = response.getStatusLine().getStatusCode();<newline46mondego><newline46mondego>        if (statusCode != HttpStatus.SC_OK) {<newline46mondego>            Log.w(<doubleQuotes46>ImageDownloader<doubleQuotes46>, <doubleQuotes46>Error <doubleQuotes46> + statusCode +<newline46mondego>                    <doubleQuotes46> while retrieving bitmap from <doubleQuotes46> + url);<newline46mondego>            return null;<newline46mondego>        }<newline46mondego>        final HttpEntity entity = response.getEntity();<newline46mondego>        if (entity != null) {<newline46mondego>            InputStream inputStream = null;<newline46mondego>            try {<newline46mondego>                // getting contents from the stream<newline46mondego>                inputStream = entity.getContent();<newline46mondego><newline46mondego>                // decoding stream data back into image Bitmap that android understands<newline46mondego>                final Bitmap bitmap = BitmapFactory.decodeStream(inputStream);<newline46mondego>                return bitmap;<newline46mondego>            } finally {<newline46mondego>                if (inputStream != null) {<newline46mondego>                    inputStream.close();<newline46mondego>                }<newline46mondego>                entity.consumeContent();<newline46mondego>            }<newline46mondego>        }<newline46mondego>    } catch (Exception e) {<newline46mondego>        // You Could provide a more explicit error message for IOException<newline46mondego>        getRequest.abort();<newline46mondego>        Log.e(<doubleQuotes46>ImageDownloader<doubleQuotes46>, <doubleQuotes46>Something went wrong while<doubleQuotes46> +<newline46mondego>                <doubleQuotes46> retrieving bitmap from <doubleQuotes46> + url + e.toString());<newline46mondego>    }<newline46mondego>    return null;<newline46mondego>}<newline46mondego>"
"9076splitHere46","20281958splitHere46","String[]entries = index.list();<newline46mondego>for(String s: entries){<newline46mondego>    File currentFile = new File(index.getPath(),s);<newline46mondego>    currentFile.delete();<newline46mondego>}<newline46mondego>"
"9077splitHere46","20281958splitHere46","index.delete()"
"9078splitHere46","20282146splitHere46","Android runtime"
"9079splitHere46","20282146splitHere46","android:minSdkVersion"
"9080splitHere46","20282146splitHere46","android:minSdkVersion"
"9081splitHere46","20282236splitHere46","double"
"9082splitHere46","20282236splitHere46","0"
"9083splitHere46","20282236splitHere46","double pay_per_minute = (10.0/60);<newline46mondego>"
"9084splitHere46","20282236splitHere46","double pay_per_minute = ((double)pay_per_hour) / 60;<newline46mondego>"
"9085splitHere46","20282539splitHere46","bet = input.nextInt();<newline46mondego>"
"9086splitHere46","20282539splitHere46","String hitOrStand = input.nextLine();<newline46mondego>"
"9087splitHere46","20282539splitHere46","int bet = input.nextInt();<newline46mondego><newline46mondego>//add nextLine() to consume newline character<newline46mondego>input.nextLine();<newline46mondego><newline46mondego>while (bet > 25 || bet < 5 || bet % 5 != 0 || bet > bank) {<newline46mondego>    System.out<newline46mondego>            .print(<doubleQuotes46>Please re-enter you bet, this must be either 5, 10, 15, 20 or 25\nand be less than â‚¬<doubleQuotes46><newline46mondego>                    + bank + <doubleQuotes46>: <doubleQuotes46>);<newline46mondego><newline46mondego>    bet = input.nextInt();<newline46mondego><newline46mondego>    //add nextLine() to consume newline character<newline46mondego>    input.nextLine();<newline46mondego>}<newline46mondego>"
"9088splitHere46","20282587splitHere46","TableColumnModelListener"
"9089splitHere46","20282587splitHere46","columnMoved(TableColumnModelEvent arg0)"
"9090splitHere46","20282587splitHere46","import java.awt.BorderLayout;<newline46mondego><newline46mondego>import javax.swing.JFrame;<newline46mondego>import javax.swing.JScrollPane;<newline46mondego>import javax.swing.JTable;<newline46mondego>import javax.swing.event.ChangeEvent;<newline46mondego>import javax.swing.event.ListSelectionEvent;<newline46mondego>import javax.swing.event.TableColumnModelEvent;<newline46mondego>import javax.swing.event.TableColumnModelListener;<newline46mondego>import javax.swing.table.DefaultTableModel;<newline46mondego><newline46mondego>public class Example {<newline46mondego><newline46mondego>    public static void main(String[] args) {<newline46mondego>        new Example();<newline46mondego>    }<newline46mondego><newline46mondego>    public Example() {<newline46mondego>        JFrame frame = new JFrame(<doubleQuotes46>Rotation<doubleQuotes46>);<newline46mondego>        frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);<newline46mondego><newline46mondego>        JTable t = new JTable(new DefaultTableModel(new Object[][]{{1,2}},new Object[]{<doubleQuotes46>1<doubleQuotes46>,<doubleQuotes46>2<doubleQuotes46>}));<newline46mondego>        final JTable t1 = new JTable(new DefaultTableModel(new Object[][]{{1,2}},new Object[]{<doubleQuotes46>1<doubleQuotes46>,<doubleQuotes46>2<doubleQuotes46>}));<newline46mondego><newline46mondego>        frame.getContentPane().add(new JScrollPane(t),BorderLayout.WEST);<newline46mondego>        frame.getContentPane().add(new JScrollPane(t1),BorderLayout.EAST);<newline46mondego><newline46mondego>        t.getColumnModel().addColumnModelListener(new TableColumnModelListener() {<newline46mondego><newline46mondego>            @Override<newline46mondego>            public void columnSelectionChanged(ListSelectionEvent arg0) {<newline46mondego>            }<newline46mondego><newline46mondego>            @Override<newline46mondego>            public void columnRemoved(TableColumnModelEvent arg0) {<newline46mondego>            }<newline46mondego><newline46mondego>            @Override<newline46mondego>            public void columnMoved(TableColumnModelEvent arg0) {<newline46mondego>                int fromIndex = arg0.getFromIndex();<newline46mondego>                int toIndex = arg0.getToIndex();<newline46mondego>                t1.moveColumn(fromIndex, toIndex);<newline46mondego>            }<newline46mondego><newline46mondego>            @Override<newline46mondego>            public void columnMarginChanged(ChangeEvent arg0) {<newline46mondego>            }<newline46mondego><newline46mondego>            @Override<newline46mondego>            public void columnAdded(TableColumnModelEvent arg0) {<newline46mondego>            }<newline46mondego>        });<newline46mondego><newline46mondego>        frame.pack();<newline46mondego>        frame.setVisible(true);<newline46mondego>    }<newline46mondego><newline46mondego>}<newline46mondego>"
"9091splitHere46","20282710splitHere46","Integer.MIN_VALUE= -2147483648"
"9092splitHere46","20282710splitHere46","2 * -2147483648"
"9093splitHere46","20282710splitHere46","Integer.MIN_VALUE*2  = Integer.MIN_VALUE+Integer.MIN_VALUE<newline46mondego><newline46mondego><newline46mondego>         -2147483648=  10000000 00000000 00000000 00000000 ->32 bit<newline46mondego>                      +10000000 00000000 00000000 00000000 <newline46mondego>  _________________________________________________________________<newline46mondego>     2* -2147483648= 1 00000000 00000000 00000000 00000000 Result is 0<newline46mondego>                     |<newline46mondego>                    This bit will be omitted due to limitation of 32 bit<newline46mondego>"
"9094splitHere46","20282710splitHere46","Integer.MAX_VALUE=2147483647"
"9095splitHere46","20282710splitHere46","2 * 2147483647"
"9096splitHere46","20282710splitHere46","Integer.MAX_VALUE*2  = Integer.MAX_VALUE+Integer.MAX_VALUE<newline46mondego><newline46mondego><newline46mondego>          2147483647=  01111111 11111111 11111111 11111111 ->32 bit<newline46mondego>                      +01111111 11111111 11111111 11111111 <newline46mondego>  _________________________________________________________________<newline46mondego>       2* 2147483647=  11111111 11111111 11111111 11111110 Result is -2<newline46mondego>"
"9097splitHere46","20282734splitHere46","public class MyCompletionService implements Executor /* optional implements CompletionService too */ {<newline46mondego>      private final Executor mExecutor;<newline46mondego>      private Queue<Runnable> mRunnableQueue;<newline46mondego><newline46mondego>      public MyNotifyingExecutorWrapper (Queue<Runnable> queueToNotify, Executor wrapped) {<newline46mondego>             mExecutor = wrapped;<newline46mondego>             mRunnableQueue = queueToNotify;<newline46mondego>      }<newline46mondego><newline46mondego><newline46mondego>      public execute(Runnable command) {<newline46mondego>             mExecutor.execute(new NotifyingRunnable(command, mRunnableQueue));<newline46mondego>      }<newline46mondego><newline46mondego>      private static class NotifyingRunnable implements Runnable {<newline46mondego>            private final Queue<Runnable> mRunnables;<newline46mondego>            private Runnable mRunnable;<newline46mondego><newline46mondego>            public NotifyingRunnable(Runnable runnable, Queue<Runnable> done) {<newline46mondego>                 mRunnables = done;<newline46mondego>                 mRunnable = runnable;<newline46mondego>            }<newline46mondego>            public void run() {<newline46mondego>                  mRunnable.run();<newline46mondego>                  mRunnables.add(mRunnable);<newline46mondego>            }<newline46mondego>      }<newline46mondego>  }<newline46mondego>"
"9098splitHere46","20282734splitHere46","public static void main(String[] args) {<newline46mondego>         LinkedBlockingQueue<Runnable> queue = new LinkedBlockingQueue();<newline46mondego>         private MyCompletionService[] executors = ... {} ;<newline46mondego><newline46mondego>         while(true){<newline46mondego>            System.out.println(String.format(<doubleQuotes46>%s: Woohoo %s is done!<doubleQuotes46>, System.currentTimeMillis(), queue.take()));<newline46mondego>         }<newline46mondego>   }<newline46mondego>"
"9099splitHere46","20282737splitHere46","public <T> T convertValue(Object object, Class<T> clazz) <newline46mondego>"
"9100splitHere46","20282737splitHere46","String s = foo.<String>convertValue(someObject, String.class);<newline46mondego>"
"9101splitHere46","20282737splitHere46","String s = foo.convertValue(someObject, String.class);<newline46mondego>"
"9102splitHere46","20282737splitHere46","String.class"
"9103splitHere46","20282737splitHere46","@Override<newline46mondego>public <T> T convertValue(Object object, Class<T> clazz) {<newline46mondego>    if (clazz == String.class) {<newline46mondego>        return (T) <doubleQuotes46>a<doubleQuotes46>;<newline46mondego>    }<newline46mondego>    else {<newline46mondego>        throw new IllegalArgumentException(<doubleQuotes46>I only support String, sorry<doubleQuotes46>);<newline46mondego>    }<newline46mondego>}<newline46mondego>"
"9104splitHere46","20282757splitHere46","public void countDown(){<newline46mondego>    countDown = (TextView) findViewById(R.id.countdown);<newline46mondego><newline46mondego>            timerCount = new CountDownTimer(time, 1000) {<newline46mondego><newline46mondego>                public void onTick(long millisUntilFinished) {<newline46mondego>                    long tmp = millisUntilFinished / 1000;<newline46mondego>                    countDown.setText(tmp + <doubleQuotes46><doubleQuotes46>);<newline46mondego>                }<newline46mondego><newline46mondego>                public void onFinish() {<newline46mondego>                                    // Do your stuff<newline46mondego>                    countDown.setText(<doubleQuotes46>0<doubleQuotes46>);<newline46mondego>                                }<newline46mondego>            }.start();<newline46mondego>}<newline46mondego>"
"9105splitHere46","20282757splitHere46","<LinearLayout xmlns:android=<doubleQuotes46>http://schemas.android.com/apk/res/android<doubleQuotes46><newline46mondego>android:id=<doubleQuotes46>@+id/questionList<doubleQuotes46><newline46mondego>android:layout_width=<doubleQuotes46>match_parent<doubleQuotes46><newline46mondego>android:layout_height=<doubleQuotes46>match_parent<doubleQuotes46><newline46mondego>android:background=<doubleQuotes46>@drawable/menu<doubleQuotes46><newline46mondego>android:orientation=<doubleQuotes46>vertical<doubleQuotes46><newline46mondego>android:weightSum=<doubleQuotes46>4<doubleQuotes46> ><newline46mondego><newline46mondego><TextView<newline46mondego>    android:id=<doubleQuotes46>@+id/title<doubleQuotes46><newline46mondego>    android:layout_gravity=<doubleQuotes46>center<doubleQuotes46><newline46mondego>    android:layout_width=<doubleQuotes46>wrap_content<doubleQuotes46><newline46mondego>    android:textSize=<doubleQuotes46>14sp<doubleQuotes46><newline46mondego>    android:layout_height=<doubleQuotes46>wrap_content<doubleQuotes46><newline46mondego>/><newline46mondego><newline46mondego><TextView<newline46mondego>    android:id=<doubleQuotes46>@+id/countdown<doubleQuotes46><newline46mondego>    android:layout_gravity=<doubleQuotes46>right<doubleQuotes46><newline46mondego>    android:layout_width=<doubleQuotes46>30dp<doubleQuotes46><newline46mondego>    android:layout_height=<doubleQuotes46>wrap_content<doubleQuotes46><newline46mondego>    android:ems=<doubleQuotes46>10<doubleQuotes46><newline46mondego>    android:inputType=<doubleQuotes46>numberDecimal<doubleQuotes46> ><newline46mondego><newline46mondego>    <requestFocus /><newline46mondego></TextView><newline46mondego>"
"9106splitHere46","20282937splitHere46","<a href = <doubleQuotes46>Filedownload<doubleQuotes46>>MS-Excel</a>"
"9107splitHere46","20282937splitHere46","Filedownload"
"9108splitHere46","20282937splitHere46","@WebServlet(<doubleQuotes46>/ExcelServlet<doubleQuotes46>)"
"9109splitHere46","20282937splitHere46","<a href = <doubleQuotes46>ExcelServlet<doubleQuotes46>>MS-Excel</a>"
"9110splitHere46","20282960splitHere46","while(rs.next())<newline46mondego>{<newline46mondego>asset_id = rs.getString(<doubleQuotes46>asset_id<doubleQuotes46>);<newline46mondego>name = rs.getString(<doubleQuotes46>name<doubleQuotes46>);<newline46mondego>project = rs.getString(<doubleQuotes46>project<doubleQuotes46>);<newline46mondego>emp_id = rs.getString(<doubleQuotes46>emp_id<doubleQuotes46>);<newline46mondego>emp_name=rs.getString(<doubleQuotes46>emp_name<doubleQuotes46>);<newline46mondego>model.addRow(new Object[]{asset_id, name, project, emp_id,emp_name});<newline46mondego>//i++; <newline46mondego>}<newline46mondego>"
"9111splitHere46","20283172splitHere46","from(<doubleQuotes46>xyz<doubleQuotes46>)<newline46mondego>    .unmarshal(new ZipDataFormat())<newline46mondego>    .convertBodyTo(String.class)<newline46mondego>"
"9112splitHere46","20283256splitHere46","@RequestParam"
"9113splitHere46","20283256splitHere46","Specification"
"9114splitHere46","20283256splitHere46","JpaSpecificationExecutor"
"9115splitHere46","20283256splitHere46","TravelRepository"
"9116splitHere46","20283256splitHere46","findAll(Specification)"
"9117splitHere46","20283256splitHere46","public interface TravelRepository extends JpaRepository<Travel, Long>, JpaSpecificationExecutor {}<newline46mondego>"
"9118splitHere46","20283256splitHere46","Specification"
"9119splitHere46","20283256splitHere46","public class TravelSpecification implements Specification<Travel> {<newline46mondego><newline46mondego>    private final Travel criteria;<newline46mondego><newline46mondego>    public TravelSpecification(Travel criteria) {<newline46mondego>        this.criteria=criteria;<newline46mondego>    }<newline46mondego><newline46mondego>    public Predicate toPredicate(Root<T> root, CriteriaQuery<?> query, CriteriaBuilder builder) {<newline46mondego>        // create query/predicate here.<newline46mondego>    }<newline46mondego>}<newline46mondego>"
"9120splitHere46","20283256splitHere46","findAll"
"9121splitHere46","20283256splitHere46","@RequestMapping(<doubleQuotes46>/search<doubleQuotes46>)  <newline46mondego>public String search(@ModelAttribute Travel search, Pageable pageable, Model model) {  <newline46mondego>Specification<Travel> spec = new TravelSpecification(search);<newline46mondego>    Page<Travel> travels  = travelRep.findAll(spec, pageable);<newline46mondego>    model.addObject(<doubleQuotes46>page<doubleQuotes46>, new PageWrapper(travels, <doubleQuotes46>/search<doubleQuotes46>));<newline46mondego>    return <doubleQuotes46>travels/list<doubleQuotes46>;<newline46mondego>}<newline46mondego>"
"9122splitHere46","20283492splitHere46","mnt/sdcard/irrlicht"
"9123splitHere46","20283492splitHere46","assets"
"9124splitHere46","20283492splitHere46","assets"
"9125splitHere46","20283492splitHere46","mnt/sdcard/irrlicht"
"9126splitHere46","20283492splitHere46","11-27 02:54:35.358: E/cutils-trace(927): Error opening trace file: No such file or directory (2)<newline46mondego>"
"9127splitHere46","20283576splitHere46","java.util.collection"
"9128splitHere46","20283576splitHere46","add"
"9129splitHere46","20283576splitHere46","IndexOutOfBoundsException"
"9130splitHere46","20283576splitHere46","Music"
"9131splitHere46","20283576splitHere46","musicList = tempArray;"
"9132splitHere46","20283576splitHere46","isEmpty()"
"9133splitHere46","20283654splitHere46","try {<newline46mondego>    Class Addition = Class.forName(<doubleQuotes46>com.thirdparty.Addition<doubleQuotes46>);<newline46mondego>    Object addition = Addition.newInstance();<newline46mondego>    Method addMethod = Addition.getMethod(<doubleQuotes46>add<doubleQuotes46>, int.class, int.class);<newline46mondego>    Integer sum = (Integer)addMethod.invoke(addition, 4, 5);<newline46mondego>    System.out.println(<doubleQuotes46>The result is: <doubleQuotes46> + sum);<newline46mondego>    } catch (Throwable ex) {<newline46mondego>        ex.printStackTrace();<newline46mondego>        System.out.println(<doubleQuotes46>Addition is not available<doubleQuotes46>);<newline46mondego>}<newline46mondego>"
"9134splitHere46","20284294splitHere46","handler"
"9135splitHere46","20284294splitHere46","handler"
"9136splitHere46","20284294splitHere46","handler"
"9137splitHere46","20284294splitHere46","GETSTATIC java/lang/System out<newline46mondego>LDC <doubleQuotes46>exception X occured<doubleQuotes46><newline46mondego>INVOKEVIRTUAL java/io/PrintStream println (java/lang/String)V<newline46mondego>"
"9138splitHere46","20284294splitHere46","premain"
"9139splitHere46","20284294splitHere46","if (className.startsWith(<doubleQuotes46>com/alu/<doubleQuotes46>)) {<newline46mondego>      return insertLog(className, classBeingRedefined, classfileBuffer);<newline46mondego> }<newline46mondego>"
"9140splitHere46","20284294splitHere46","if(className.endsWith(<doubleQuotes46>Exception<doubleQuotes46>)){<newline46mondego>     System.out.println(<doubleQuotes46>============= exception occured <doubleQuotes46>+className);<newline46mondego> }<newline46mondego>"
"9141splitHere46","20284294splitHere46","<doubleQuotes46>Exception<doubleQuotes46>"
"9142splitHere46","20284294splitHere46","if (className.startsWith(<doubleQuotes46>com/alu/<doubleQuotes46>)) {<newline46mondego>    System.out.println(<doubleQuotes46>============= class transformed <doubleQuotes46>+ className);<newline46mondego>    return insertLog(className, classBeingRedefined, classfileBuffer);<newline46mondego>} <newline46mondego>"
"9143splitHere46","20284294splitHere46","try {<newline46mondego>        if(search.equals(<doubleQuotes46>Category<doubleQuotes46>)){<newline46mondego>            //do operation<newline46mondego>        }<newline46mondego>    } catch (Exception e) {<newline46mondego>    }<newline46mondego>"
"9144splitHere46","20284294splitHere46","try {<newline46mondego>    try {<newline46mondego>        if(search.equals(<doubleQuotes46>Category<doubleQuotes46>)){<newline46mondego>            //do operation<newline46mondego>        }<newline46mondego>    } catch (Exception e) {<newline46mondego>    }<newline46mondego>} catch (Exception e) {<newline46mondego>    e.printStackTrace();<newline46mondego>}<newline46mondego>"
"9145splitHere46","20284294splitHere46","catch"
"9146splitHere46","20284294splitHere46","catch"
"9147splitHere46","20284294splitHere46","try {<newline46mondego>    if(search.equals(<doubleQuotes46>Category<doubleQuotes46>)){<newline46mondego>        //do operation<newline46mondego>    }<newline46mondego>} catch (Exception e) {<newline46mondego>    e.printStackTrace();<newline46mondego>}<newline46mondego>"
"9148splitHere46","20284316splitHere46","entityManager.flush()"
"9149splitHere46","20284316splitHere46","flush()"
"9150splitHere46","20284316splitHere46","flush()"
"9151splitHere46","20284464splitHere46","\[\[(?:w:)?.*?\]\]<newline46mondego>"
"9152splitHere46","20284464splitHere46","]]"
"9153splitHere46","20284464splitHere46","[["
"9154splitHere46","20284464splitHere46","]]"
"9155splitHere46","20284464splitHere46","]]"
"9156splitHere46","20284509splitHere46","mail.smtp.host=127.0.0.1"
"9157splitHere46","20284509splitHere46","mail.smtp.localaddress=127.0.0.1"
"9158splitHere46","20284509splitHere46","mail.smtp.socketFactory.class"
"9159splitHere46","20284601splitHere46","fakeDTO"
"9160splitHere46","20284601splitHere46","address"
"9161splitHere46","20284601splitHere46","AddressDTO"
"9162splitHere46","20284601splitHere46","zipcode"
"9163splitHere46","20284601splitHere46","public class FakeDTO implements BaseDTO {<newline46mondego><newline46mondego>  private AddressDTO address;<newline46mondego><newline46mondego>  public AddressDTO getAddress() {<newline46mondego>    return address;<newline46mondego>  }<newline46mondego><newline46mondego>  public void setAddress (AddressDTO address) {<newline46mondego>    this.address = address;<newline46mondego>  }<newline46mondego> ...<newline46mondego>}<newline46mondego><newline46mondego>public class AddressDTO implements BaseDTO {<newline46mondego><newline46mondego>  private String zipcode;<newline46mondego><newline46mondego>  public String getZipcode() {<newline46mondego>    return zipcode;<newline46mondego>  }<newline46mondego><newline46mondego>  public void setZipcode(String zipcode) {<newline46mondego>    this.zipcode = zipcode;<newline46mondego><newline46mondego>  }<newline46mondego> ...<newline46mondego>}<newline46mondego>"
"9164splitHere46","20284601splitHere46","struts.xml"
"9165splitHere46","20284601splitHere46","modelDriven"
"9166splitHere46","20284601splitHere46","defaultStack"
"9167splitHere46","20284601splitHere46","struts-default"
"9168splitHere46","20284601splitHere46","top"
"9169splitHere46","20284601splitHere46","valueStack"
"9170splitHere46","20284601splitHere46","address"
"9171splitHere46","20284601splitHere46","zipcode"
"9172splitHere46","20284601splitHere46","address.zipcode"
"9173splitHere46","20284601splitHere46","zipcode"
"9174splitHere46","20284612splitHere46","mvn tomcat7:run"
"9175splitHere46","20284612splitHere46","tomcat7"
"9176splitHere46","20284647splitHere46","JSONObject obj = new JSONObject(<doubleQuotes46>{ \<doubleQuotes46>result\<doubleQuotes46> : \<doubleQuotes46>xml content in tag format\<doubleQuotes46> }<doubleQuotes46>);<newline46mondego>public static void main(String[] args) throws JSONException<newline46mondego>{<newline46mondego>    JSONObject jsonObj = new JSONObject(obj);<newline46mondego>    JSONObject result= jsonObj.getJSONObject(<doubleQuotes46>result<doubleQuotes46>);<newline46mondego>    System.out.println(<doubleQuotes46>result-----><doubleQuotes46>+result)<newline46mondego>}<newline46mondego>"
"9177splitHere46","20284709splitHere46","ClassLoader#getResource()"
"9178splitHere46","20284709splitHere46","sitemap.xml"
"9179splitHere46","20284709splitHere46","ServletContext#getResource()"
"9180splitHere46","20284709splitHere46","ExternalContext#getResource()"
"9181splitHere46","20284709splitHere46","URL url = externalContext.getResource(<doubleQuotes46>/sitemap.xml<doubleQuotes46>);<newline46mondego>"
"9182splitHere46","20284709splitHere46","InputStream input = externalContext.getResourceAsStream(<doubleQuotes46>/sitemap.xml<doubleQuotes46>);<newline46mondego>"
"9183splitHere46","20284786splitHere46","@Autowired<newline46mondego>private CheckUserServiceImpl checkUserService;<newline46mondego>private HrService hrServiceBad;<newline46mondego>private ClientResponseFailure clientResponseFailure;<newline46mondego>private ClientResponseImpl response = new ClientResponseImpl();<newline46mondego><newline46mondego>@Before<newline46mondego>public void init() {<newline46mondego>    hrServiceBad = Mockito.mock(HrService.class);<newline46mondego>    checkUserService.setHrService(hrServiceBad);<newline46mondego>}<newline46mondego><newline46mondego>@Test(expected = EsbVerificationError.class)<newline46mondego>public void testUserValidInEsbWith412Fault() throws EsbOffLineException, EsbVerificationError {<newline46mondego>    // precondition failed<newline46mondego>    response.setStatus(412);<newline46mondego>    clientResponseFailure = new ClientResponseFailure(response); // add this.<newline46mondego>    Mockito.doThrow(clientResponseFailure).when(hrServiceBad).verifyIdentity(<doubleQuotes46>412<doubleQuotes46>, <doubleQuotes46>aaa<doubleQuotes46>, <doubleQuotes46>aaa<doubleQuotes46>);<newline46mondego>    checkUserService.setHrService(hrServiceBad);<newline46mondego>    checkUserService.verifyUserInEsb(<doubleQuotes46>412<doubleQuotes46>, <doubleQuotes46>aaa<doubleQuotes46>, <doubleQuotes46>aaa<doubleQuotes46>);<newline46mondego>}<newline46mondego>"
"9184splitHere46","20284786splitHere46","clientResponseFailure = new ClientResponseFailure(response);<newline46mondego>response.setStatus(412);<newline46mondego>"
"9185splitHere46","20284800splitHere46","element = driver.findElement(By.xpath(<doubleQuotes46>.//*[@id='hp_category_tab_electronics_0-content']/div[1]/div/div/a[2]<doubleQuotes46>));<newline46mondego>element.click();<newline46mondego>for(int i=0;i<4;i++);{<newline46mondego>        Thread.sleep(500);<newline46mondego>        element.click();<newline46mondego>    }<newline46mondego>"
"9186splitHere46","20284800splitHere46","thread.sleep();"
"9187splitHere46","20284808splitHere46","PowerManager pm = (PowerManager) context.getSystemService(Context.POWER_SERVICE);<newline46mondego>    PowerManager.WakeLock wl = pm.newWakeLock(PowerManager.PARTIAL_WAKE_LOCK|PowerManager.ACQUIRE_CAUSES_WAKEUP, <doubleQuotes46>bbbb<doubleQuotes46>);<newline46mondego>    wl.acquire();<newline46mondego>"
"9188splitHere46","20284808splitHere46","<uses-permission android:name=<doubleQuotes46>android.permission.WAKE_LOCK<doubleQuotes46> /><newline46mondego>"
"9189splitHere46","20284861splitHere46","JuegoBuca.this.setVisible(false);<newline46mondego>JuegoBuca.this.dispose();<newline46mondego>new JuegoBuca();<newline46mondego>"
"9190splitHere46","20284861splitHere46","if(o == nuevo) {<newline46mondego>    //RESET GAME...<newline46mondego>}<newline46mondego>"
"9191splitHere46","20284915splitHere46","current.getItem()<newline46mondego>"
"9192splitHere46","20284927splitHere46","int i = 0;<newline46mondego>for (Map.Entry<Date,String> entry : Sx.entrySet()) {<newline46mondego>    //Some logic<newline46mondego>    i++;<newline46mondego>}<newline46mondego><newline46mondego>Log.d(TAG, <doubleQuotes46>I've been through the loop <doubleQuotes46> + i + <doubleQuotes46> times<doubleQuotes46>);<newline46mondego>"
"9193splitHere46","20284956splitHere46","decl"
"9194splitHere46","20284956splitHere46","decl"
"9195splitHere46","20284956splitHere46","*"
"9196splitHere46","20284956splitHere46","*"
"9197splitHere46","20284956splitHere46","decl"
"9198splitHere46","20284956splitHere46","decl := ( var_decl | const_decl )<newline46mondego><newline46mondego>program := ( decl )*<newline46mondego>           ( function ) *<newline46mondego>           main_prog<newline46mondego>"
"9199splitHere46","20284956splitHere46","decl"
"9200splitHere46","20284956splitHere46","program"
"9201splitHere46","20284956splitHere46","decl"
"9202splitHere46","20284956splitHere46","*"
"9203splitHere46","20284956splitHere46","decl"
"9204splitHere46","20284956splitHere46","decl := ( var_decl | const_decl )*<newline46mondego><newline46mondego>program := decl<newline46mondego>           ( function ) *<newline46mondego>           main_prog<newline46mondego>"
"9205splitHere46","20284956splitHere46","decl"
"9206splitHere46","20284956splitHere46","program"
"9207splitHere46","20285039splitHere46","close"
"9208splitHere46","20285039splitHere46","catch"
"9209splitHere46","20285039splitHere46","try {<newline46mondego>  // write to file<newline46mondego>} finally {<newline46mondego>  aBufferedWriter.close();<newline46mondego>}<newline46mondego>"
"9210splitHere46","20285039splitHere46","try (BufferedWriter writer = new BufferedWriter(...)) {<newline46mondego>    // Use the writer here<newline46mondego>} // The writer is auto-closed here<newline46mondego>"
"9211splitHere46","20285039splitHere46","Throwable.getSuppressed"
"9212splitHere46","20285058splitHere46","Iterator"
"9213splitHere46","20285058splitHere46","HashMap"
"9214splitHere46","20285058splitHere46","Iterator"
"9215splitHere46","20285059splitHere46","actionPerformed"
"9216splitHere46","20285059splitHere46","Timer"
"9217splitHere46","20285059splitHere46","SwingWorker"
"9218splitHere46","20285096splitHere46","private String[] Time_CATEGORY = { <doubleQuotes46>Once<doubleQuotes46>, <doubleQuotes46>Every 5 Minutes<doubleQuotes46>, <doubleQuotes46>Every hour<doubleQuotes46>,<newline46mondego>            <doubleQuotes46>Every day<doubleQuotes46>, <doubleQuotes46>Weekly<doubleQuotes46>, <doubleQuotes46>Weekdays(Mon-Fri)<doubleQuotes46>, <doubleQuotes46>Weekend<doubleQuotes46>,<newline46mondego>            <doubleQuotes46>Every month<doubleQuotes46>, <doubleQuotes46>Every year<doubleQuotes46> };<newline46mondego><newline46mondego>    EditText edittextSmsNumber, edittextSmsText;<newline46mondego>    String smsNumber, smsText;<newline46mondego>    Dialog picker;<newline46mondego>    Button select;<newline46mondego>    Button set;<newline46mondego>    String mytime;<newline46mondego>    ImageButton get;<newline46mondego>    TimePicker timep;<newline46mondego>    DatePicker datep;<newline46mondego>    Integer hour, minute, month, day, year, week;<newline46mondego>    TextView time, date;<newline46mondego>    private PendingIntent pendingIntent;<newline46mondego>    static int ResultCode = 12;<newline46mondego>    ArrayList<String> sendlist = new ArrayList<String>();<newline46mondego>    Spinner spinnerTime;<newline46mondego><newline46mondego>    /** Called when the activity is first created. */<newline46mondego>    @Override<newline46mondego>    public void onCreate(Bundle savedInstanceState) {<newline46mondego>        super.onCreate(savedInstanceState);<newline46mondego>        setContentView(R.layout.main);<newline46mondego>        edittextSmsNumber = (EditText) findViewById(R.id.smsnumber);<newline46mondego>        edittextSmsText = (EditText) findViewById(R.id.smstext);<newline46mondego>        ImageButton get = (ImageButton) findViewById(R.id.getc);<newline46mondego><newline46mondego>        datep = (DatePicker) findViewById(R.id.datePicker);<newline46mondego>        timep = (TimePicker) findViewById(R.id.timePicker1);<newline46mondego>        Button buttonStart = (Button) findViewById(R.id.startalarm);<newline46mondego>        Button buttonCancel = (Button) findViewById(R.id.cancelalarm);<newline46mondego>        spinnerTime = (Spinner) findViewById(R.id.spinnerstate);<newline46mondego><newline46mondego>        ArrayAdapter<String> adapter_state = new ArrayAdapter<String>(this,<newline46mondego>                android.R.layout.simple_spinner_item, Time_CATEGORY);<newline46mondego>        adapter_state<newline46mondego>                .setDropDownViewResource(android.R.layout.simple_spinner_dropdown_item);<newline46mondego>        spinnerTime.setAdapter(adapter_state);<newline46mondego><newline46mondego>        spinnerTime.setOnItemSelectedListener(new OnItemSelectedListener() {<newline46mondego>            public void onItemSelected(AdapterView<?> parent, View view,<newline46mondego>                    int position, long id) {<newline46mondego><newline46mondego>                spinnerTime.setSelection(position);<newline46mondego>                // spinnerCapital.setSelection(position);<newline46mondego><newline46mondego>                mytime = (String) spinnerTime.getSelectedItem();<newline46mondego><newline46mondego>            }<newline46mondego><newline46mondego>            public void onNothingSelected(AdapterView<?> parent) {<newline46mondego><newline46mondego>            }<newline46mondego>        });<newline46mondego><newline46mondego>        get.setOnClickListener(new OnClickListener() {<newline46mondego><newline46mondego>            @Override<newline46mondego>            public void onClick(View v) {<newline46mondego>                Intent i = new Intent(AndroidAlarmSMS.this,<newline46mondego>                        ContactActivity.class);<newline46mondego>                startActivityForResult(i, ResultCode);<newline46mondego>            }<newline46mondego><newline46mondego>        });<newline46mondego><newline46mondego>        buttonStart.setOnClickListener(new Button.OnClickListener() {<newline46mondego><newline46mondego>            @Override<newline46mondego>            public void onClick(View arg0) {<newline46mondego>                smsNumber = edittextSmsNumber.getText().toString();<newline46mondego>                smsText = edittextSmsText.getText().toString();<newline46mondego><newline46mondego>                // picker = new Dialog(AndroidAlarmSMS.this);<newline46mondego>                // picker.setContentView(R.layout.picker_frag);<newline46mondego>                // picker.setTitle(<doubleQuotes46>Select Date and Time<doubleQuotes46>);<newline46mondego><newline46mondego>                // set = (Button)picker.findViewById(R.id.btnSet);<newline46mondego><newline46mondego>                // set.setOnClickListener(new View.OnClickListener() {<newline46mondego><newline46mondego>                // @Override<newline46mondego>                // public void onClick(View view) {<newline46mondego><newline46mondego>                if (TextUtils.isEmpty(smsNumber)) {<newline46mondego><newline46mondego>                    finish();<newline46mondego>                }<newline46mondego><newline46mondego>                else {<newline46mondego>                    String[] s = edittextSmsNumber.getText().toString()<newline46mondego>                            .split(<doubleQuotes46>;<doubleQuotes46>);<newline46mondego><newline46mondego>                    for (int i = 0; i < s.length; i++) {<newline46mondego>                        // picker.dismiss();<newline46mondego><newline46mondego>                        Intent myIntent = new Intent(AndroidAlarmSMS.this,<newline46mondego>                                MyAlarmService.class);<newline46mondego><newline46mondego>                        Bundle bundle = new Bundle();<newline46mondego>                        bundle.putCharSequence(<doubleQuotes46>extraSmsNumber<doubleQuotes46>, smsNumber);<newline46mondego>                        bundle.putCharSequence(<doubleQuotes46>extraSmsText<doubleQuotes46>, smsText);<newline46mondego>                        myIntent.putExtras(bundle);<newline46mondego><newline46mondego>                        pendingIntent = PendingIntent.getService(<newline46mondego>                                AndroidAlarmSMS.this, 0, myIntent, 0);<newline46mondego><newline46mondego>                        AlarmManager alarmManager = (AlarmManager) getSystemService(ALARM_SERVICE);<newline46mondego><newline46mondego>                        // long startTime = calendar.getTimeInMillis();<newline46mondego><newline46mondego>                        // Calendar calendar = Calendar.getInstance();<newline46mondego>                        // calendar.setTimeInMillis(System.currentTimeMillis());<newline46mondego>                        // calendar.add(Calendar.SECOND, 60);<newline46mondego>                        if (mytime.equals(<doubleQuotes46>Once<doubleQuotes46>)) {<newline46mondego>                            Calendar calendar = Calendar.getInstance();<newline46mondego><newline46mondego>                            calendar.set(datep.getYear(), datep.getMonth(),<newline46mondego>                                    datep.getDayOfMonth(),<newline46mondego>                                    timep.getCurrentHour(),<newline46mondego>                                    timep.getCurrentMinute(), 0);<newline46mondego><newline46mondego>                            alarmManager.set(AlarmManager.RTC_WAKEUP,<newline46mondego>                                    calendar.getTimeInMillis(), pendingIntent);<newline46mondego>                        } else if (mytime.equals(<doubleQuotes46>Every 5 Minutes<doubleQuotes46>)) {<newline46mondego>                            Calendar calendar = Calendar.getInstance();<newline46mondego><newline46mondego>                            calendar.set(datep.getYear(), datep.getMonth(),<newline46mondego>                                    datep.getDayOfMonth(),<newline46mondego>                                    timep.getCurrentHour(),<newline46mondego>                                    timep.getCurrentMinute(), 0);<newline46mondego>                            alarmManager.setRepeating(AlarmManager.RTC_WAKEUP,<newline46mondego>                                    calendar.getTimeInMillis(), 1000 * 60 * 5,<newline46mondego>                                    pendingIntent); // Millisec * Second *<newline46mondego>                                                    // Minute<newline46mondego>                        } else if (mytime.equals(<doubleQuotes46>Every hour<doubleQuotes46>)) {<newline46mondego>                            Calendar calendar = Calendar.getInstance();<newline46mondego><newline46mondego>                            calendar.set(datep.getYear(), datep.getMonth(),<newline46mondego>                                    datep.getDayOfMonth(),<newline46mondego>                                    timep.getCurrentHour(),<newline46mondego>                                    timep.getCurrentMinute(), 0);<newline46mondego>                            alarmManager.setRepeating(AlarmManager.RTC_WAKEUP,<newline46mondego>                                    calendar.getTimeInMillis(), 1000 * 60 * 60,<newline46mondego>                                    pendingIntent); // Millisec * Second *<newline46mondego>                                                    // Minute<newline46mondego>                        } else if (mytime.equals(<doubleQuotes46>Every day<doubleQuotes46>)) {<newline46mondego>                            Calendar calendar = Calendar.getInstance();<newline46mondego><newline46mondego>                            calendar.set(datep.getYear(), datep.getMonth(),<newline46mondego>                                    datep.getDayOfMonth(),<newline46mondego>                                    timep.getCurrentHour(),<newline46mondego>                                    timep.getCurrentMinute(), 0);<newline46mondego>                            alarmManager.setRepeating(AlarmManager.RTC_WAKEUP,<newline46mondego>                                    calendar.getTimeInMillis(),<newline46mondego>                                    24 * 60 * 60 * 1000, pendingIntent);<newline46mondego><newline46mondego>                        } else if (mytime.equals(<doubleQuotes46>Weekly<doubleQuotes46>)) {<newline46mondego>                            Calendar calendar = Calendar.getInstance();<newline46mondego><newline46mondego>                            calendar.set(datep.getYear(), datep.getMonth(),<newline46mondego>                                    datep.getDayOfMonth(),<newline46mondego>                                    timep.getCurrentHour(),<newline46mondego>                                    timep.getCurrentMinute(), 0);<newline46mondego>                            alarmManager.setRepeating(AlarmManager.RTC_WAKEUP,<newline46mondego>                                    calendar.getTimeInMillis(), 7 * 24 * 60<newline46mondego>                                            * 60 * 1000, pendingIntent);<newline46mondego><newline46mondego>                        } else if (mytime.equals(<doubleQuotes46>Weekdays(Mon-Fri)<doubleQuotes46>)) {<newline46mondego><newline46mondego>                            forWeekdays();<newline46mondego><newline46mondego>                        } else if (mytime.equals(<doubleQuotes46>Weekend<doubleQuotes46>)) {<newline46mondego>                            forWeekend();<newline46mondego><newline46mondego>                        } else if (mytime.equals(<doubleQuotes46>Every month<doubleQuotes46>)) {<newline46mondego>                            Calendar calendar = Calendar.getInstance();<newline46mondego><newline46mondego>                            calendar.set(datep.getYear(), datep.getMonth(),<newline46mondego>                                    datep.getDayOfMonth(),<newline46mondego>                                    timep.getCurrentHour(),<newline46mondego>                                    timep.getCurrentMinute(), 0);<newline46mondego>                            alarmManager.setRepeating(AlarmManager.RTC_WAKEUP,<newline46mondego>                                    calendar.getTimeInMillis(), 30 * 24 * 60<newline46mondego>                                            * 60 * 1000, pendingIntent);<newline46mondego><newline46mondego>                        } else {<newline46mondego>                            Calendar calendar = Calendar.getInstance();<newline46mondego><newline46mondego>                            calendar.set(datep.getYear(), datep.getMonth(),<newline46mondego>                                    datep.getDayOfMonth(),<newline46mondego>                                    timep.getCurrentHour(),<newline46mondego>                                    timep.getCurrentMinute(), 0);<newline46mondego>                            alarmManager.setRepeating(AlarmManager.RTC_WAKEUP,<newline46mondego>                                    calendar.getTimeInMillis(), 365 * 24 * 60<newline46mondego>                                            * 60 * 1000, pendingIntent);<newline46mondego><newline46mondego>                        }<newline46mondego><newline46mondego>                        Toast.makeText(<newline46mondego>                                AndroidAlarmSMS.this,<newline46mondego>                                <doubleQuotes46>Start Alarm with \n<doubleQuotes46> + <doubleQuotes46>smsNumber = <doubleQuotes46><newline46mondego>                                        + smsNumber + <doubleQuotes46>\n<doubleQuotes46> + <doubleQuotes46>smsText = <doubleQuotes46><newline46mondego>                                        + smsText, Toast.LENGTH_LONG).show();<newline46mondego>                    }<newline46mondego>                }<newline46mondego><newline46mondego>            }<newline46mondego><newline46mondego>        });<newline46mondego><newline46mondego>        // picker.show();<newline46mondego><newline46mondego>        // }});<newline46mondego><newline46mondego>        buttonCancel.setOnClickListener(new Button.OnClickListener() {<newline46mondego><newline46mondego>            @Override<newline46mondego>            public void onClick(View arg0) {<newline46mondego>                AlarmManager alarmManager = (AlarmManager) getSystemService(ALARM_SERVICE);<newline46mondego>                alarmManager.cancel(pendingIntent);<newline46mondego>                Toast.makeText(AndroidAlarmSMS.this, <doubleQuotes46>Cancel!<doubleQuotes46>,<newline46mondego>                        Toast.LENGTH_LONG).show();<newline46mondego><newline46mondego>            }<newline46mondego>        });<newline46mondego>    }<newline46mondego><newline46mondego>    public void forWeekdays() {<newline46mondego>        Calendar calendar2 = Calendar.getInstance();<newline46mondego>        calendar2.set(datep.getYear(), datep.getMonth(), datep.getDayOfMonth(),<newline46mondego>                timep.getCurrentHour(), timep.getCurrentMinute(), 0);       <newline46mondego>        int day = calendar2.get(Calendar.DAY_OF_WEEK);      <newline46mondego>        AlarmManager alarmManager = (AlarmManager) getSystemService(ALARM_SERVICE);<newline46mondego>        if (day == 2 || day == 3 || day == 4 || day == 5 || day == 6) {<newline46mondego>            alarmManager.setRepeating(AlarmManager.RTC_WAKEUP,<newline46mondego>                    calendar2.getTimeInMillis(), 24 * 60 * 60 * 1000,<newline46mondego>                    pendingIntent);<newline46mondego>        }<newline46mondego><newline46mondego>    }<newline46mondego><newline46mondego>    public void forWeekend() {<newline46mondego>        Calendar calendar2 = Calendar.getInstance();<newline46mondego>        calendar2.set(datep.getYear(), datep.getMonth(), datep.getDayOfMonth(),<newline46mondego>                timep.getCurrentHour(), timep.getCurrentMinute(), 0);       <newline46mondego>        int day = calendar2.get(Calendar.DAY_OF_WEEK);<newline46mondego>        AlarmManager alarmManager = (AlarmManager) getSystemService(ALARM_SERVICE);<newline46mondego>        if (day == 1 || day == 7) {<newline46mondego>            alarmManager.setRepeating(AlarmManager.RTC_WAKEUP,<newline46mondego>                    calendar2.getTimeInMillis(), 24 * 60 * 60 * 1000,<newline46mondego>                    pendingIntent);<newline46mondego>        }<newline46mondego><newline46mondego>    }<newline46mondego><newline46mondego>    protected void onActivityResult(int requestCode, int resultCode, Intent data) {<newline46mondego><newline46mondego>        if (requestCode == ResultCode) {<newline46mondego><newline46mondego>            if (resultCode == RESULT_OK) {<newline46mondego>                sendlist = data.getStringArrayListExtra(<doubleQuotes46>name<doubleQuotes46>);<newline46mondego>                if (sendlist != null) {<newline46mondego>                    for (int i = 0; i < sendlist.size(); i++) {<newline46mondego>                        edittextSmsNumber.append(sendlist.get(i).toString());<newline46mondego>                        edittextSmsNumber.append(<doubleQuotes46>;<doubleQuotes46>);<newline46mondego>                    }<newline46mondego><newline46mondego>                }<newline46mondego>                if (resultCode == RESULT_CANCELED) {<newline46mondego><newline46mondego>                }<newline46mondego>            }<newline46mondego>        }<newline46mondego>"
"9219splitHere46","20285139splitHere46","int x = (int)(Math.random()*(f-l-1)) + l;<newline46mondego>"
"9220splitHere46","20285139splitHere46","Math.random"
"9221splitHere46","20285156splitHere46","1.5.7"
"9222splitHere46","20285156splitHere46","1.x"
"9223splitHere46","20285156splitHere46","slf4j-log4j12:1.5.10"
"9224splitHere46","20285156splitHere46","apacheds-all:2.0.0-M15"
"9225splitHere46","20285156splitHere46","slf4j-log4j12:1.7.5"
"9226splitHere46","20285188splitHere46","entity class"
"9227splitHere46","20285188splitHere46","cnpj"
"9228splitHere46","20285188splitHere46","@Override<newline46mondego>public boolean hasNotaFiscal(Pojo pojo) {<newline46mondego><newline46mondego>    String sql = <doubleQuotes46>SELECT nota_fiscal.numero, nota_fiscal.tipo_emissao, d.cnpj as cnpjDestinatario, e.cnpj as cnpjEmitente FROM nota_fiscal<doubleQuotes46>;<newline46mondego>    sql = sql.concat(<doubleQuotes46> INNER JOIN destinatario ON (nota_fiscal.destinatario_id = destinatario.id)<doubleQuotes46>);<newline46mondego>    sql = sql.concat(<doubleQuotes46> INNER JOIN emitente ON (nota_fiscal.emitente_id = emitente.id)<doubleQuotes46>);<newline46mondego>    sql = sql.concat(<doubleQuotes46> INNER JOIN dados_empresa e ON (e.id = emitente.dados_empresa_id)<doubleQuotes46>);<newline46mondego>    sql = sql.concat(<doubleQuotes46> INNER JOIN dados_empresa d ON (d.id = destinatario.dados_empresa_id)<doubleQuotes46>);<newline46mondego>    sql = sql.concat(<doubleQuotes46> WHERE e.cnpj = :cnpjEmitente AND d.cnpj = :cnpjDestinatario AND numero = :numero AND tipo_emissao = :tipoEmissao<doubleQuotes46>);<newline46mondego><newline46mondego>    SQLQuery query = (SQLQuery) this.createSQLQuery(sql);<newline46mondego><newline46mondego>    query.setParameter(<doubleQuotes46>cnpjDestinatario<doubleQuotes46>, pojo.getDestinatario().getDadosEmpresa().getCnpj());<newline46mondego>    query.setParameter(<doubleQuotes46>cnpjEmitente<doubleQuotes46>, pojo.getEmitente().getDadosEmpresa().getCnpj());<newline46mondego>    query.setParameter(<doubleQuotes46>numero<doubleQuotes46>, pojo.getNumero());<newline46mondego>    query.setParameter(<doubleQuotes46>tipoEmissao<doubleQuotes46>, pojo.getTipoEmissao().getIndex());<newline46mondego><newline46mondego>    return query.list().size() > 0;<newline46mondego>}<newline46mondego>"
"9229splitHere46","20285194splitHere46","n"
"9230splitHere46","20285194splitHere46","S = {0, 1, .., n-1}"
"9231splitHere46","20285194splitHere46","S"
"9232splitHere46","20285194splitHere46","i"
"9233splitHere46","20285194splitHere46","j"
"9234splitHere46","20285194splitHere46","A[i, j]"
"9235splitHere46","20285194splitHere46","i"
"9236splitHere46","20285194splitHere46","i"
"9237splitHere46","20285194splitHere46","j"
"9238splitHere46","20285194splitHere46","j"
"9239splitHere46","20285194splitHere46","k"
"9240splitHere46","20285194splitHere46","A[k,k]"
"9241splitHere46","20285194splitHere46","k"
"9242splitHere46","20285194splitHere46","-1"
"9243splitHere46","20285194splitHere46","n"
"9244splitHere46","20285194splitHere46","S"
"9245splitHere46","20285217splitHere46","public List<String> getByIndex(final LinkedHashMap<String, List<String>> myMap, final int index){<newline46mondego>   return (List<String>)myMap.values().toArray()[index];<newline46mondego>}<newline46mondego>"
"9246splitHere46","20285283splitHere46","Document"
"9247splitHere46","20285283splitHere46","Document"
"9248splitHere46","20285283splitHere46","DocumentBuilder"
"9249splitHere46","20285283splitHere46","Document"
"9250splitHere46","20285283splitHere46","Element"
"9251splitHere46","20285283splitHere46","Document"
"9252splitHere46","20285283splitHere46","adoptNode"
"9253splitHere46","20285283splitHere46","Document"
"9254splitHere46","20285473splitHere46","Pattern pattern = Pattern.compile(<doubleQuotes46>\\$@([^\\$@]+|$)<doubleQuotes46>);<newline46mondego>CharSequence tag = <doubleQuotes46>any tag$@ws2-role$@ws1-role<doubleQuotes46>;<newline46mondego>Matcher matcher = pattern.matcher(tag);<newline46mondego>while (matcher.find()) {<newline46mondego>    System.out.println(matcher.group(1));<newline46mondego>}<newline46mondego>"
"9255splitHere46","20285473splitHere46","ws2-role<newline46mondego>ws1-role<newline46mondego>"
"9256splitHere46","20285502splitHere46","public String getFirstName()<newline46mondego>"
"9257splitHere46","20285502splitHere46","firstName"
"9258splitHere46","20285502splitHere46","first_name"
"9259splitHere46","20285518splitHere46","<selector xmlns:android=<doubleQuotes46>http://schemas.android.com/apk/res/android<doubleQuotes46>><newline46mondego><item android:state_focused=<doubleQuotes46>true<doubleQuotes46> android:state_pressed=<doubleQuotes46>true<doubleQuotes46> android:drawable=<doubleQuotes46>@drawable/onfocusonstatepressed<doubleQuotes46> /><newline46mondego><item android:state_focused=<doubleQuotes46>false<doubleQuotes46> android:state_pressed=<doubleQuotes46>true<doubleQuotes46> android:drawable=<doubleQuotes46>@drawable/onstatepressed<doubleQuotes46> /><newline46mondego><item android:state_focused=<doubleQuotes46>true<doubleQuotes46> android:drawable=<doubleQuotes46>@drawable/onfocus<doubleQuotes46>/><newline46mondego><item android:state_focused=<doubleQuotes46>false<doubleQuotes46> android:drawable=<doubleQuotes46>@drawable/normal<doubleQuotes46> /><newline46mondego></selector><newline46mondego>"
"9260splitHere46","20285518splitHere46","android:background=<doubleQuotes46>@drawable/button_state<doubleQuotes46><newline46mondego>"
"9261splitHere46","20285629splitHere46","extend Activity"
"9262splitHere46","20285629splitHere46","@Override<newline46mondego>protected void onCreate(Bundle savedInstanceState) {<newline46mondego>    super.onCreate(savedInstanceState);<newline46mondego>    setContentView(R.layout.activity_main);<newline46mondego>           feedListView= (ListView) findViewById(R.id.custom_list);<newline46mondego>           String url = <doubleQuotes46>...<doubleQuotes46>;<newline46mondego>           new DownloadFilesTask().execute(url);<newline46mondego>           feedListView.setAdapter(new CustomListAdapter(this, feedList));<newline46mondego>}<newline46mondego>"
"9263splitHere46","20285629splitHere46","extend Fragment"
"9264splitHere46","20285629splitHere46","@Override<newline46mondego>public View onCreateView(LayoutInflater inflater, ViewGroup container,<newline46mondego>        Bundle savedInstanceState) {<newline46mondego><newline46mondego>    View rootView = inflater.inflate(R.layout.activity_main, container, false);<newline46mondego>            feedListView= (ListView) rootView.findViewById(R.id.custom_list);<newline46mondego><newline46mondego>            String url = <doubleQuotes46>...<doubleQuotes46>;<newline46mondego>            new DownloadFilesTask().execute(url);<newline46mondego>            feedListView.setAdapter(new CustomListAdapter(this, feedList));<newline46mondego>            return rootView;<newline46mondego>     }<newline46mondego>"
"9265splitHere46","20285657splitHere46","double max = 0;<newline46mondego> for(int i = 0; i < 10; i++){<newline46mondego>   double total = (studentMarksArray[i][0]*studentMarksArray[i][1]*studentMarksArray[i][2])/3;<newline46mondego>   max = Math.max(max, total);<newline46mondego> }<newline46mondego>"
"9266splitHere46","20285657splitHere46","int index = -1;<newline46mondego> double max = 0;<newline46mondego><newline46mondego> for(int i = 0; i < 10; i++){<newline46mondego>   double total = (studentMarksArray[i][0]*studentMarksArray[i][1]*studentMarksArray[i][2])/3;<newline46mondego><newline46mondego>   if(Math.max(max, total) == total) {<newline46mondego>     index = i;<newline46mondego>     max = total;<newline46mondego>   }<newline46mondego> }<newline46mondego>"
"9267splitHere46","20285657splitHere46","int index = -1;<newline46mondego>double max = 0;<newline46mondego>double [] averages = new double[10];<newline46mondego><newline46mondego> for(int i = 0; i < 10; i++){<newline46mondego>   double total = (studentMarksArray[i][0]*studentMarksArray[i][1]*studentMarksArray[i][2])/3;<newline46mondego>   averages[i] = total;<newline46mondego>   if(Math.max(max, total) == total) {<newline46mondego>     index = i;<newline46mondego>     max = total;<newline46mondego>   }<newline46mondego> }<newline46mondego>"
"9268splitHere46","20285829splitHere46","reader.toString()"
"9269splitHere46","20285829splitHere46","reader.readLine()"
"9270splitHere46","20285829splitHere46","readLine()"
"9271splitHere46","20285829splitHere46","if (input != null) {<newline46mondego>            out.println(input);<newline46mondego>            out.flush();<newline46mondego>        }<newline46mondego>"
"9272splitHere46","20285829splitHere46","println()"
"9273splitHere46","20285829splitHere46","print()"
"9274splitHere46","20285829splitHere46","readLine()"
"9275splitHere46","20285829splitHere46","\n"
"9276splitHere46","20285829splitHere46","out.flush()"
"9277splitHere46","20285888splitHere46","package com.onlinebank;<newline46mondego>import java.sql.*;<newline46mondego>import java.util.*;<newline46mondego>public class BankCommons {<newline46mondego>    //All Code Here<newline46mondego>}<newline46mondego>"
"9278splitHere46","20285989splitHere46","JComboBox"
"9279splitHere46","20285989splitHere46","TableComboBoxByRow"
"9280splitHere46","20285989splitHere46","getCellEditor()"
"9281splitHere46","20286010splitHere46","anchorPane.setStyle(<doubleQuotes46>-fx-background-color: cornsilk;<doubleQuotes46>);<newline46mondego>"
"9282splitHere46","20286010splitHere46","scene.getStylesheets().add(getClass().getResource(<doubleQuotes46>pane.css<doubleQuotes46>).toExternalForm());<newline46mondego>myAnchorPane.getStyleClass().add(<doubleQuotes46>colored-pane<doubleQuotes46>);<newline46mondego>"
"9283splitHere46","20286010splitHere46","/** `pane.css` in the same directory as your application class **/<newline46mondego>.colored-pane { -fx-background-color: cornsilk; }<newline46mondego>"
"9284splitHere46","20286010splitHere46","pane.setBackground(<newline46mondego>  new BackgroundFill(<newline46mondego>    Color.CRIMSON, CornerRadii.EMPTY, Insets.EMPTY<newline46mondego>  )<newline46mondego>);<newline46mondego>"
"9285splitHere46","20286010splitHere46","a stroke that is drawn around the outline of a Shape <newline46mondego>using the settings of the specified Paint.<newline46mondego>"
"9286splitHere46","20286010splitHere46","fill the interior of an Shape using the settings of the Paint context.<newline46mondego>"
"9287splitHere46","20286010splitHere46","// draws a green square with a thick blue border.<newline46mondego>Rectangle square = new Rectangle(30, 30, 50, 50);<newline46mondego>square.setFill(Color.GREEN);<newline46mondego>square.setStroke(Color.BLUE);<newline46mondego>square.setStrokeWidth(6);<newline46mondego>"
"9288splitHere46","20286010splitHere46","setColor()"
"9289splitHere46","20286010splitHere46","// paint two blue rectangles on a canvas.<newline46mondego>final Canvas canvas = new Canvas(250,250);<newline46mondego>GraphicsContext gc = canvas.getGraphicsContext2D();<newline46mondego><newline46mondego>gc.setFill(Color.BLUE);<newline46mondego>gc.fillRect(75,75,100,100);<newline46mondego>gc.fillRect(25,25,30,30);<newline46mondego>"
"9290splitHere46","20286183splitHere46","circle.secant.getIterations();<newline46mondego>"
"9291splitHere46","20286183splitHere46","circle.secant.iterations;<newline46mondego>"
"9292splitHere46","20286183splitHere46","circle.getSecant().getIterations();<newline46mondego>"
"9293splitHere46","20286237splitHere46","for (int y = s-1; y >= 0; y--) {<newline46mondego><newline46mondego>        for (int x = 0; x < v; x++) {<newline46mondego><newline46mondego>            grid[x][y] = new JLabel((x)+<doubleQuotes46>,<doubleQuotes46>+(y));<newline46mondego><newline46mondego>            world.add(grid[x][y]);<newline46mondego>"
"9294splitHere46","20286272splitHere46","aliasField"
"9295splitHere46","20286272splitHere46","serializer.aliasField(<doubleQuotes46>status<doubleQuotes46>, B.class, <doubleQuotes46>name<doubleQuotes46>);<newline46mondego>"
"9296splitHere46","20286375splitHere46","if(someObj instanceof Serializable) // recommended because it uses <newline46mondego>                                    // the byte code instruction INSTANCEOF<newline46mondego>"
"9297splitHere46","20286375splitHere46","if(Serializable.class.isInstance(someObj))<newline46mondego>"
"9298splitHere46","20286375splitHere46","Class.isInstance(someObj)"
"9299splitHere46","20286375splitHere46","Class"
"9300splitHere46","20286375splitHere46","Class<?> someClass == ....; // assign a class object reference dynamically<newline46mondego>if(someClass.isInstance(someObj))<newline46mondego>"
"9301splitHere46","20286411splitHere46","public void fetchAllChildren(OnTimeNowRelease root, List<OnTimeNowRelease> childList){<newline46mondego>    // if the parent is not defined, nothing to do<newline46mondego>    if(root == null){<newline46mondego>         return;<newline46mondego>    }<newline46mondego><newline46mondego>    //add the parent to the list. Since java is Reference by Value, the list can be used for recursively adding all the descending elements <newline46mondego>    childList.add(root);<newline46mondego>    if(root.children !=null && !root.children.isEmpty()){   <newline46mondego>         for(OnTimeNowRelease children : root.children){<newline46mondego>                //simple recursive solution add all the children and their children and so on....<newline46mondego>                fetchAllChildren(root.children, childList);<newline46mondego>         }<newline46mondego>    }<newline46mondego>}<newline46mondego>"
"9302splitHere46","20286510splitHere46","public static String crpyt_sha256_apache(String param1, String salt) {<newline46mondego><newline46mondego>        return Crypt.crypt(param1, salt);<newline46mondego>    }<newline46mondego>"
"9303splitHere46","20286530splitHere46",";"
"9304splitHere46","20286536splitHere46","// draw the filled polygons<newline46mondego>   glPolygonMode( GL.GL_FRONT_AND_BACK, GL.GL_FILL );<newline46mondego>   glEnable( GL.GL_POLYGON_OFFSET_FILL );<newline46mondego>   glPolygonOffset( 1, 1 );<newline46mondego>   glColor3f( 0.0f, 0.0f, 0.0f );<newline46mondego>   renderData();<newline46mondego>   gl.glDisable( GL.GL_POLYGON_OFFSET_FILL );<newline46mondego><newline46mondego>   // draw the wireframe<newline46mondego>   glPolygonMode( GL.GL_FRONT_AND_BACK, GL.GL_LINE );<newline46mondego>   glColor4fv( colour );<newline46mondego>   renderData();<newline46mondego>"
"9305splitHere46","20286663splitHere46","Auto[] array = new Auto[] {a, b, c};<newline46mondego>"
"9306splitHere46","20286663splitHere46","public int getHighestSpeed(Auto[] autos)<newline46mondego>"
"9307splitHere46","20286663splitHere46","public int getHighestSpeed(Auto[] autos) {<newline46mondego><newline46mondego>  int highest = 0;  //use a variable to hold the highest speed found so far.<newline46mondego><newline46mondego>  for (Auto auto : autos) {  //loop through all Auto in the array<newline46mondego>    if (auto.getSpeed() > highest) {<newline46mondego>      highest = auto.getSpeed();  //this Auto is fastest so far<newline46mondego>    }<newline46mondego>  }<newline46mondego><newline46mondego>  //how we have the highest speed, return it<newline46mondego>  return highest;<newline46mondego>}<newline46mondego>"
"9308splitHere46","20286719splitHere46","double result = 0;<newline46mondego>    Integer [] nums = coefficients.toArray(new Integer[0]);<newline46mondego>    for(int i = 0; i < nums.length; i++){<newline46mondego>        result = result *x + nums[i];<newline46mondego>    }<newline46mondego>    System.out.println(result);<newline46mondego>"
"9309splitHere46","20286735splitHere46","customAdapter=new CustomAdapter( classes, stg1,res );<newline46mondego>"
"9310splitHere46","20286735splitHere46","stg1 = new String[names2.size()];<newline46mondego>"
"9311splitHere46","20286774splitHere46","ButtonArrowKeyNavigation.install();<newline46mondego>"
"9312splitHere46","20286774splitHere46","import java.awt.*;<newline46mondego>import java.awt.event.*;<newline46mondego>import javax.swing.*;<newline46mondego><newline46mondego>public class ButtonArrowKeyNavigation {<newline46mondego>    private ButtonArrowKeyNavigation() {}<newline46mondego><newline46mondego>    public static void install() {<newline46mondego>        UIManager.addAuxiliaryLookAndFeel(lookAndFeel);<newline46mondego>    }<newline46mondego><newline46mondego>    private static final LookAndFeel lookAndFeel = new LookAndFeel() {<newline46mondego>        private final UIDefaults defaults = new UIDefaults() {<newline46mondego>            @Override<newline46mondego>            public javax.swing.plaf.ComponentUI getUI(JComponent c) {<newline46mondego>                if (c instanceof AbstractButton && !(c instanceof JMenuItem)) {<newline46mondego>                    if (c.getClientProperty(this) == null) {<newline46mondego>                        c.putClientProperty(this, Boolean.TRUE);<newline46mondego>                        configure(c);<newline46mondego>                    }<newline46mondego>                }<newline46mondego>                return null;<newline46mondego>            }<newline46mondego>        };<newline46mondego>        @Override public UIDefaults getDefaults() { return defaults; };<newline46mondego>        @Override public String getID() { return <doubleQuotes46>ButtonArrowKeyNavigation<doubleQuotes46>; }<newline46mondego>        @Override public String getName() { return getID(); }<newline46mondego>        @Override public String getDescription() { return getID(); }<newline46mondego>        @Override public boolean isNativeLookAndFeel() { return false; }<newline46mondego>        @Override public boolean isSupportedLookAndFeel() { return true; }<newline46mondego>    };<newline46mondego><newline46mondego>    private static void configure(JComponent c) {<newline46mondego>        InputMap im = c.getInputMap(JComponent.WHEN_FOCUSED);<newline46mondego>        ActionMap am = c.getActionMap();<newline46mondego>        im.put(KeyStroke.getKeyStroke(KeyEvent.VK_LEFT,  0), <doubleQuotes46>focusPreviousButton<doubleQuotes46>);<newline46mondego>        im.put(KeyStroke.getKeyStroke(KeyEvent.VK_UP,    0), <doubleQuotes46>focusPreviousButton<doubleQuotes46>);<newline46mondego>        im.put(KeyStroke.getKeyStroke(KeyEvent.VK_RIGHT, 0), <doubleQuotes46>focusNextButton<doubleQuotes46>);<newline46mondego>        im.put(KeyStroke.getKeyStroke(KeyEvent.VK_DOWN,  0), <doubleQuotes46>focusNextButton<doubleQuotes46>);<newline46mondego>        am.put(<doubleQuotes46>focusPreviousButton<doubleQuotes46>, focusPreviousButton);<newline46mondego>        am.put(<doubleQuotes46>focusNextButton<doubleQuotes46>,     focusNextButton);<newline46mondego>    }<newline46mondego><newline46mondego>    private static final Action focusPreviousButton = new AbstractAction() {<newline46mondego>        public void actionPerformed(ActionEvent e) {<newline46mondego>            move((AbstractButton)e.getSource(), -1);<newline46mondego>        }<newline46mondego>    };<newline46mondego><newline46mondego>    private static final Action focusNextButton = new AbstractAction() {<newline46mondego>        public void actionPerformed(ActionEvent e) {<newline46mondego>            move((AbstractButton)e.getSource(), +1);<newline46mondego>        }<newline46mondego>    };<newline46mondego><newline46mondego>    private static void move(AbstractButton ab, int direction) {<newline46mondego>        Container focusRoot = ab.getFocusCycleRootAncestor();<newline46mondego>        FocusTraversalPolicy focusPolicy = focusRoot.getFocusTraversalPolicy();<newline46mondego>        Component toFocus = ab, loop = null;<newline46mondego>        for (;;) {<newline46mondego>            toFocus = direction > 0<newline46mondego>                ? focusPolicy.getComponentAfter(focusRoot, toFocus)<newline46mondego>                : focusPolicy.getComponentBefore(focusRoot, toFocus);<newline46mondego>            if (toFocus instanceof AbstractButton) break;<newline46mondego>            if (toFocus == null) return;<newline46mondego>            // infinite loop protection; should not be necessary, but just in<newline46mondego>            // case all buttons are somehow unfocusable at the moment this<newline46mondego>            // method is called:<newline46mondego>            if (loop == null) loop = toFocus; else if (loop == toFocus) return;<newline46mondego>        }<newline46mondego>        if (toFocus.requestFocusInWindow()) {<newline46mondego>            if (toFocus instanceof JRadioButton) {<newline46mondego>                ((JRadioButton)toFocus).setSelected(true);<newline46mondego>            }<newline46mondego>        }<newline46mondego>    }<newline46mondego>}<newline46mondego>"
"9313splitHere46","20286984splitHere46","OAuth2Parameters parameters = new OAuth2Parameters()<newline46mondego>                    {<newline46mondego>                        ClientId = CLIENT_ID,<newline46mondego>                        ClientSecret = CLIENT_SECRET,<newline46mondego>                        AccessCode = token,<newline46mondego>                        RedirectUri = REDIRECT_URI //needed because of a bug<newline46mondego>                    };<newline46mondego>                    OAuthUtil.GetAccessToken(Request.Url.Query, parameters);                      <newline46mondego>                    BaseClientService.Initializer init = new BaseClientService.Initializer { Authenticator = new AuthenticatorImp(parameters)};<newline46mondego>                    PlusService service = new PlusService(init);<newline46mondego>                    Person me = service.People.Get(<doubleQuotes46>me<doubleQuotes46>).Execute();<newline46mondego>"
"9314splitHere46","20286984splitHere46","public class AuthenticatorImp : Google.Apis.Authentication.IAuthenticator<newline46mondego>{<newline46mondego>    OAuth2Parameters parameters;<newline46mondego>    public AuthenticatorImp(OAuth2Parameters parameters)<newline46mondego>    {<newline46mondego>        this.parameters = parameters;<newline46mondego>    }<newline46mondego>    /// <summary><newline46mondego>    /// Takes an existing httpwebrequest and modifies its headers according to <newline46mondego>    /// the authentication system used.<newline46mondego>    /// </summary><newline46mondego>    /// <param name=<doubleQuotes46>request<doubleQuotes46>></param><newline46mondego>    /// <returns></returns><newline46mondego>    public void ApplyAuthenticationToRequest(HttpWebRequest request)<newline46mondego>    {<newline46mondego>        if (parameters.TokenType == <doubleQuotes46>Bearer<doubleQuotes46> && parameters.TokenExpiry < DateTime.Now)<newline46mondego>        {<newline46mondego>            OAuthUtil.RefreshAccessToken(parameters);<newline46mondego>        }<newline46mondego>        request.Headers.Add(<doubleQuotes46>Authorization: Bearer <doubleQuotes46> + parameters.AccessToken);<newline46mondego>    }<newline46mondego>}<newline46mondego>"
"9315splitHere46","20286984splitHere46","public class ConfigurableHttpClientInitializer : IConfigurableHttpClientInitializer <newline46mondego>{<newline46mondego>    OAuth2Parameters parameters;<newline46mondego>    public ConfigurableHttpClientInitializer(OAuth2Parameters parameters) {<newline46mondego>        this.parameters = parameters;<newline46mondego>    }<newline46mondego>    /// <summary> Initializes an Http client after it was created. </summary><newline46mondego>    public void Initialize(ConfigurableHttpClient httpClient)<newline46mondego>    {<newline46mondego>        if (parameters.TokenType == <doubleQuotes46>Bearer<doubleQuotes46> && parameters.TokenExpiry < DateTime.Now)<newline46mondego>        {<newline46mondego>            OAuthUtil.RefreshAccessToken(parameters);<newline46mondego>        }<newline46mondego>        httpClient.DefaultRequestHeaders.Add(<doubleQuotes46>Authorization<doubleQuotes46>, <doubleQuotes46>Bearer <doubleQuotes46> + parameters.AccessToken);<newline46mondego>    }<newline46mondego>}<newline46mondego>"
"9316splitHere46","20287015splitHere46","GeneraIDParaEntidadCliente"
"9317splitHere46","20287101splitHere46","ResourceBundle"
"9318splitHere46","20287101splitHere46","String translation = bundle.getString(time.name());<newline46mondego>"
"9319splitHere46","20287101splitHere46","String translation = bundle.getString(<doubleQuotes46>myprefix.<doubleQuotes46> + time.name());<newline46mondego><newline46mondego>// or use full qualified name:<newline46mondego>String translation = bundle.getString(time.getClass().getCanonicalName() + <doubleQuotes46>.<doubleQuotes46> + time.name());<newline46mondego>"
"9320splitHere46","20287129splitHere46","//get EditText's value, I will assume you want it to be an int <newline46mondego>//just to show you how to save it<newline46mondego>//later, we're doing the same with String<newline46mondego>//NOTE: no checks are done for correct input, the below will fail<newline46mondego>//if myEditText's content is not valid to be converted to int<newline46mondego>EditText myEditText = (EditText)findViewById(R.id.myEditText);<newline46mondego><newline46mondego>int value = Integer.parseInt(myEditText.getText().toString());<newline46mondego><newline46mondego>// We need an Editor object to make preference changes.<newline46mondego>SharedPreferences settings = getSharedPreferences(<doubleQuotes46>mySettings<doubleQuotes46>, Activity.MODE_PRIVATE);<newline46mondego>SharedPreferences.Editor editor = settings.edit();<newline46mondego>editor.putString(<doubleQuotes46>value<doubleQuotes46>, value);<newline46mondego><newline46mondego>// Commit the edits!<newline46mondego>editor.commit();<newline46mondego>"
"9321splitHere46","20287129splitHere46","String method = <doubleQuotes46>multiplication<doubleQuotes46>;<newline46mondego><newline46mondego>// We need an Editor object to make preference changes.<newline46mondego>SharedPreferences settings = getSharedPreferences(<doubleQuotes46>mySettings<doubleQuotes46>, Activity.MODE_PRIVATE);<newline46mondego>SharedPreferences.Editor editor = settings.edit();<newline46mondego>editor.putBoolean(<doubleQuotes46>method<doubleQuotes46>, method);<newline46mondego><newline46mondego>// Commit the edits!<newline46mondego>editor.commit();<newline46mondego>"
"9322splitHere46","20287129splitHere46","// Restore preferences<newline46mondego>SharedPreferences settings = getSharedPreferences(<doubleQuotes46>mySettings<doubleQuotes46>, Activity.MODE_PRIVATE);<newline46mondego>int value = settings.getInt(<doubleQuotes46>value<doubleQuotes46>, 0);<newline46mondego>String method = settings.getString(<doubleQuotes46>method<doubleQuotes46>, <doubleQuotes46>division<doubleQuotes46>);<newline46mondego>"
"9323splitHere46","20287162splitHere46","ISOException.throwIt(short sw)"
"9324splitHere46","20287162splitHere46","9000"
"9325splitHere46","20287162splitHere46","62xx"
"9326splitHere46","20287162splitHere46","63xx"
"9327splitHere46","20287225splitHere46","public class Player1 implements Runnable{<newline46mondego>    private final CountDownLatch countDownLatch;<newline46mondego>    private final String s;<newline46mondego>    public Player1(CountDownLatch c, String s){<newline46mondego>        this.countDownLatch=c;<newline46mondego>        this.s=s;<newline46mondego>    }<newline46mondego>    @Override<newline46mondego>    public void run() {<newline46mondego>        for(int i=0;i<200;i++){<newline46mondego>            System.out.println(s+<doubleQuotes46>:<doubleQuotes46>+i);<newline46mondego>        }<newline46mondego>        countDownLatch.countDown();<newline46mondego>    }<newline46mondego><newline46mondego>}<newline46mondego><newline46mondego><newline46mondego>public class Player2 implements Runnable{<newline46mondego>    private final CountDownLatch countDownLatch;<newline46mondego>    private final String s;<newline46mondego>    public Player2(CountDownLatch c, String s){<newline46mondego>        this.countDownLatch = c;<newline46mondego>        this.s=s;<newline46mondego>    }<newline46mondego>    @Override<newline46mondego>    public void run() {<newline46mondego>        try {<newline46mondego>            countDownLatch.await();<newline46mondego>        } catch (InterruptedException ex) {<newline46mondego>            Logger.getLogger(Player2.class.getName()).log(Level.SEVERE, null, ex);<newline46mondego>        }<newline46mondego>        for(int i=0;i<200;i++){<newline46mondego>            System.out.println(s+<doubleQuotes46>:<doubleQuotes46>+i);<newline46mondego>        }<newline46mondego>    }<newline46mondego>}<newline46mondego>"
"9328splitHere46","20287225splitHere46","public static void main(String[] args){<newline46mondego>    Thread[] grp1 = new Thread[2];<newline46mondego>    Thread[] grp2 = new Thread[2];<newline46mondego>    CountDownLatch c1 = new CountDownLatch(1);<newline46mondego>    CountDownLatch c2 = new CountDownLatch(1);<newline46mondego><newline46mondego>    grp1[0]=new Thread(new Player1(c1, <doubleQuotes46>grp1:player1<doubleQuotes46>));<newline46mondego>    grp1[1]=new Thread(new Player2(c2, <doubleQuotes46>grp1:player2<doubleQuotes46>));<newline46mondego><newline46mondego><newline46mondego>    grp2[0]=new Thread(new Player1(c2, <doubleQuotes46>grp2:player1<doubleQuotes46>));<newline46mondego>    grp2[1]=new Thread(new Player2(c2, <doubleQuotes46>grp2:player2<doubleQuotes46>));<newline46mondego><newline46mondego>    grp1[0].start();<newline46mondego>    grp2[0].start();<newline46mondego>    grp1[1].start();<newline46mondego>    grp2[1].start();<newline46mondego>}<newline46mondego>"
"9329splitHere46","20287310splitHere46","database"
"9330splitHere46","20287310splitHere46","database"
"9331splitHere46","20287310splitHere46","database"
"9332splitHere46","20287310splitHere46","@Configuration<newline46mondego>@ComponentScan<newline46mondego>public CommonConfiguration() {}<newline46mondego>"
"9333splitHere46","20287310splitHere46","@Component"
"9334splitHere46","20287310splitHere46","@Configuration<newline46mondego>@Profile(<doubleQuotes46>test<doubleQuotes46>)<newline46mondego>public class TestConfiguration  {<newline46mondego><newline46mondego>    @Bean<newline46mondego>    public Database database() {<newline46mondego>        return new TestDb();<newline46mondego>    }<newline46mondego>}   <newline46mondego>"
"9335splitHere46","20287310splitHere46","@Configuration<newline46mondego>@Profile(<doubleQuotes46>prod<doubleQuotes46>)<newline46mondego>public class ProdConfiguration  {<newline46mondego><newline46mondego>    @Bean<newline46mondego>    public Database database() {<newline46mondego>        return new ProdDb();<newline46mondego>    }<newline46mondego>}   <newline46mondego>"
"9336splitHere46","20287310splitHere46","SavingsAccount"
"9337splitHere46","20287310splitHere46","@Qualifier"
"9338splitHere46","20287310splitHere46","@Component<newline46mondego>public class SavingsAccount implements Account {<newline46mondego><newline46mondego>  @Autowired<newline46mondego>  private Database db;<newline46mondego><newline46mondego>  @Override<newline46mondego>  public void deposit(int money) {<newline46mondego>    System.out.println(<doubleQuotes46>\n\nSomeModule starts working<doubleQuotes46>);<newline46mondego>    db.save(money);<newline46mondego>  }<newline46mondego><newline46mondego>}<newline46mondego>"
"9339splitHere46","20287310splitHere46","ProfileDemo"
"9340splitHere46","20287310splitHere46","@ComponentScan"
"9341splitHere46","20287310splitHere46","@Component<newline46mondego>public class ProfileDemo {<newline46mondego><newline46mondego>  @Autowired<newline46mondego>  private Database db;<newline46mondego><newline46mondego>  @Autowired<newline46mondego>  private Account  account;<newline46mondego><newline46mondego>  public static void main(String[] args) {<newline46mondego>    AnnotationConfigApplicationContext contxt = new AnnotationConfigApplicationContext();<newline46mondego>    context.getEnvironment().addActiveProfile(<doubleQuotes46>prod<doubleQuotes46>);<newline46mondego>    context.register(CommonConfiguration.class);<newline46mondego>    context.refresh();<newline46mondego><newline46mondego>    ProfileDemo demo = context.getBean(ProfileDemo.class);<newline46mondego><newline46mondego>    // Test autowiring of databases based on profile<newline46mondego>    demo.db.save(10);<newline46mondego>    demo.account.deposit(40);<newline46mondego>    context.close();<newline46mondego>  }<newline46mondego><newline46mondego>}<newline46mondego>"
"9342splitHere46","20287310splitHere46","CommonConfiguration"
"9343splitHere46","20287505splitHere46","ActionListener"
"9344splitHere46","20287505splitHere46","actionPerformed()"
"9345splitHere46","20287505splitHere46","JButton saveButton = new JButton(<doubleQuotes46>Save<doubleQuotes46>);<newline46mondego>    saveButton.addActionListener(new ActionListener() {<newline46mondego><newline46mondego>        @Override<newline46mondego>        public void actionPerformed(ActionEvent arg0) {<newline46mondego>            String areaText = text.getText();<newline46mondego>            //saveText(areaText);<newline46mondego>        }<newline46mondego>    });<newline46mondego>"
"9346splitHere46","20287505splitHere46","text"
"9347splitHere46","20287505splitHere46","final"
"9348splitHere46","20287505splitHere46","ActionListener"
"9349splitHere46","20287505splitHere46","LayoutManager"
"9350splitHere46","20287505splitHere46","setBounds()"
"9351splitHere46","20287529splitHere46","capchadisplay"
"9352splitHere46","20287529splitHere46","<script type=<doubleQuotes46>text/javascript<doubleQuotes46><newline46mondego>   </script><newline46mondego><noscript><newline46mondego>   <iframe src=<doubleQuotes46>http://www.google.com/recaptcha/api/noscript?k=your_public_key<doubleQuotes46><newline46mondego>     height=<doubleQuotes46>300<doubleQuotes46> width=<doubleQuotes46>500<doubleQuotes46> frameborder=<doubleQuotes46>0<doubleQuotes46>></iframe><newline46mondego><newline46mondego>   <textarea name=<doubleQuotes46>recaptcha_challenge_field<doubleQuotes46> rows=<doubleQuotes46>3<doubleQuotes46> cols=<doubleQuotes46>40<doubleQuotes46>><newline46mondego>   </textarea><newline46mondego>   <input type=<doubleQuotes46>hidden<doubleQuotes46> name=<doubleQuotes46>recaptcha_response_field<doubleQuotes46><newline46mondego>     value=<doubleQuotes46>manual_challenge<doubleQuotes46>><newline46mondego></noscript><newline46mondego>"
"9353splitHere46","20287547splitHere46","generateParameter()"
"9354splitHere46","20287547splitHere46","myMethod"
"9355splitHere46","20287657splitHere46","actionPerformed"
"9356splitHere46","20287657splitHere46","public void actionPerformed(ActionEvent e)  <newline46mondego>{<newline46mondego>     repaint();<newline46mondego>}<newline46mondego>"
"9357splitHere46","20287705splitHere46","9x9"
"9358splitHere46","20287705splitHere46","GridLayout layout = new GridLayout(0,9);<newline46mondego>        jPanel1.setLayout(layout);<newline46mondego><newline46mondego>        for(int row =0; row < 9; row++)<newline46mondego>            for(int col=0; col<9;col++)<newline46mondego>            {<newline46mondego>                 JButton button = new JButton(); <newline46mondego>                if(col==0 && row==8)<newline46mondego>                {    button.setEnabled(false);<newline46mondego>                     button.setContentAreaFilled(false);<newline46mondego>                }<newline46mondego>                else if(col==0)<newline46mondego>                    button.setText(<doubleQuotes46><doubleQuotes46>+(char)('A'+row));<newline46mondego>                else if(row == 8)<newline46mondego>                   button.setText(<doubleQuotes46><doubleQuotes46>+(char)('A'+col - 1)); <newline46mondego>                else if(col%2==0)<newline46mondego>                    button.setBackground(Color.white);<newline46mondego>                else     button.setBackground(Color.black);<newline46mondego><newline46mondego>                jPanel1.add(button);<newline46mondego>            }<newline46mondego>"
"9359splitHere46","20287786splitHere46","run"
"9360splitHere46","20287786splitHere46","this.replyOne = false;<newline46mondego>this.replyTwo = false;<newline46mondego><newline46mondego>while (!this.replyOne && this.replyTwo) {<newline46mondego>"
"9361splitHere46","20287786splitHere46","false"
"9362splitHere46","20287786splitHere46","replyTwo"
"9363splitHere46","20287786splitHere46","true"
"9364splitHere46","20287786splitHere46","while (!this.replyOne && !this.replyTwo)"
"9365splitHere46","20287786splitHere46","true"
"9366splitHere46","20287786splitHere46","run"
"9367splitHere46","20287786splitHere46","this.replyOne = false;<newline46mondego>this.replyTwo = false;<newline46mondego><newline46mondego>while(!endCondition) {<newline46mondego><newline46mondego>    while (!this.replyOne && !this.replyTwo) {<newline46mondego>        // wait until the observer has set both the reply flags<newline46mondego>    }<newline46mondego>    if (this.replyOne) {<newline46mondego>        System.out.println(<doubleQuotes46>Reply one True <doubleQuotes46>);<newline46mondego>        setChanged();<newline46mondego>        notifyObservers(new String(<doubleQuotes46>app Calling after update from serverOne <doubleQuotes46>));<newline46mondego>        this.replyOne = false;<newline46mondego>    }<newline46mondego><newline46mondego>    if (this.replyTwo) {<newline46mondego>        System.out.println(<doubleQuotes46>Reply two True <doubleQuotes46>);<newline46mondego>        setChanged();<newline46mondego>        notifyObservers(new String(<doubleQuotes46>app Calling after update from serverTwo <doubleQuotes46>));<newline46mondego>        this.replyTwo = false;<newline46mondego>    }<newline46mondego>}<newline46mondego>"
"9368splitHere46","20288044splitHere46","setLenient(false)"
"9369splitHere46","20288044splitHere46","SimpleDateFormat"
"9370splitHere46","20288124splitHere46","opaque"
"9371splitHere46","20288124splitHere46","opaque"
"9372splitHere46","20288140splitHere46","System.out.println(<newline46mondego>        Arrays.toString(<newline46mondego>                IntStream.rangeClosed(1, 20).skip(9).limit(10)<newline46mondego>                        .map(((IntUnaryOperator) v -> v - 1).andThen(i -> i * 2)).toArray()));<newline46mondego>"
"9373splitHere46","20288198splitHere46","newGrade"
"9374splitHere46","20288198splitHere46","grade"
"9375splitHere46","20288198splitHere46","grade"
"9376splitHere46","20288198splitHere46","public int grade = 0;<newline46mondego>"
"9377splitHere46","20288198splitHere46","private"
"9378splitHere46","20288198splitHere46","grade"
"9379splitHere46","20288198splitHere46","newGrade = grade;<newline46mondego>"
"9380splitHere46","20288223splitHere46","Map"
"9381splitHere46","20288223splitHere46","String"
"9382splitHere46","20288223splitHere46","Map"
"9383splitHere46","20288223splitHere46","Map"
"9384splitHere46","20288223splitHere46","get()"
"9385splitHere46","20288223splitHere46","Map"
"9386splitHere46","20288223splitHere46","Map<String, Object>"
"9387splitHere46","20288223splitHere46","Bundle"
"9388splitHere46","20288223splitHere46","Parcelable"
"9389splitHere46","20288223splitHere46","Map"
"9390splitHere46","20288223splitHere46","Parcelable"
"9391splitHere46","20288223splitHere46","keySet()"
"9392splitHere46","20288223splitHere46","get()"
"9393splitHere46","20288223splitHere46","Bundle"
"9394splitHere46","20288223splitHere46","Map<String, Object>"
"9395splitHere46","20288238splitHere46","while (inputFile.hasNext())"
"9396splitHere46","20288238splitHere46","Scanner input = null;<newline46mondego>try<newline46mondego>{<newline46mondego>    ArrayList<String> list = new ArrayList<String>();<newline46mondego>    input = new Scanner( new File(<doubleQuotes46><doubleQuotes46>) );<newline46mondego>    while ( input.hasNext() )<newline46mondego>        list.add( input.nextLine() );<newline46mondego>}<newline46mondego>finally<newline46mondego>{<newline46mondego>    if ( input != null )<newline46mondego>        input.close();<newline46mondego>}<newline46mondego>"
"9397splitHere46","20288238splitHere46","Scanner"
"9398splitHere46","20288283splitHere46","try {<newline46mondego>   String seven = Integer.toString(Integer.parseInt(five) + Integer.parseInt(two));<newline46mondego>} catch (NumberFormatException nfex) {<newline46mondego>// one of the strings was not a number<newline46mondego>}<newline46mondego>"
"9399splitHere46","20288284splitHere46","private void mouseComboBoxActionPerformed(java.awt.event.ActionEvent evt) { <newline46mondego>    JComboBox jcb = (JComboBox) evt.getSource();<newline46mondego>    String selectedItem = (String)jcb.getSelectedItem();<newline46mondego>    if(selectedItem.equals(<doubleQuotes46>Transform<doubleQuotes46>)){<newline46mondego>        gm.setMode(ModalGraphMouse.Mode.TRANSFORMING);<newline46mondego>    } else {<newline46mondego>        gm.setMode(ModalGraphMouse.Mode.PICKING);<newline46mondego>    }<newline46mondego>    vv.repaint();<newline46mondego>} <newline46mondego>"
"9400splitHere46","20288294splitHere46","<subsystem xmlns=<doubleQuotes46>urn:jboss:domain:naming:1.2<doubleQuotes46>><newline46mondego>  <bindings><newline46mondego>    <simple name=<doubleQuotes46>java:global/user<doubleQuotes46> value=<doubleQuotes46>newUser<doubleQuotes46>/>                <newline46mondego>  </bindings><newline46mondego></subsystem><newline46mondego>"
"9401splitHere46","20288294splitHere46","<bean class=<doubleQuotes46>java.util.Properties<doubleQuotes46>><newline46mondego>  <constructor-arg><newline46mondego>    <map><newline46mondego>      <entry key=<doubleQuotes46>user<doubleQuotes46>><newline46mondego>         <jee:jndi-lookup jndi-name=<doubleQuotes46>java:global/user<doubleQuotes46> /><newline46mondego>      </entry><newline46mondego>    </map><newline46mondego>  </constructor-arg><newline46mondego></bean><newline46mondego>"
"9402splitHere46","20288345splitHere46","public class ExecutorMain {<newline46mondego>   public static void main(String[] args) throws InterruptedException, ExecutionException, TimeoutException {<newline46mondego>      ScheduledThreadPoolExecutor scheduledExecutorService = new ScheduledThreadPoolExecutor(2);<newline46mondego>      scheduledExecutorService.scheduleAtFixedRate(new ShortTask(1, 5000), 0, 3, TimeUnit.SECONDS);<newline46mondego>      scheduledExecutorService.scheduleAtFixedRate(new ShortTask(2, 5000), 0, 3, TimeUnit.SECONDS);<newline46mondego>      scheduledExecutorService.scheduleAtFixedRate(new LongTask(1, 5000), 0, 10, TimeUnit.SECONDS);<newline46mondego>      scheduledExecutorService.scheduleAtFixedRate(new LongTask(2, 5000), 0, 10, TimeUnit.SECONDS);<newline46mondego>   }<newline46mondego>}<newline46mondego><newline46mondego>class Worker extends Thread {<newline46mondego>  private final Process process;<newline46mondego>  private Integer exit;<newline46mondego>  String id;<newline46mondego>  Worker(Process process, String id) {<newline46mondego>    this.process = process;<newline46mondego>    this.id = id;<newline46mondego>  }<newline46mondego>  public void run() {<newline46mondego>    try {<newline46mondego>        exit = process.waitFor();<newline46mondego>    } catch (InterruptedException ignore) {<newline46mondego>        //NOOP<newline46mondego>    }<newline46mondego>}<newline46mondego><newline46mondego>public Integer getExit() {<newline46mondego>    return exit;<newline46mondego>  }<newline46mondego>}<newline46mondego><newline46mondego>class ShortTask implements Runnable {<newline46mondego>  private int id;<newline46mondego>  private long timeOut;<newline46mondego>  ShortTask(int id, long timeOut) {<newline46mondego>    this.id = id;<newline46mondego>    this.timeOut = timeOut;<newline46mondego>  }<newline46mondego>  public void run() {<newline46mondego><newline46mondego>    long start = System.currentTimeMillis();<newline46mondego><newline46mondego>    Runtime runtime = Runtime.getRuntime();<newline46mondego>    Process process = null;<newline46mondego>    try {<newline46mondego>        process = runtime.exec(<doubleQuotes46>sleep 1s<doubleQuotes46>);<newline46mondego>    } catch (IOException e) {<newline46mondego>        System.out.println(<doubleQuotes46>ShortTask IOE<doubleQuotes46>);<newline46mondego>    }<newline46mondego>    Worker worker = new Worker(process, <doubleQuotes46>short task<doubleQuotes46>+id);<newline46mondego>    worker.start();<newline46mondego>    try {<newline46mondego>        worker.join(timeOut);<newline46mondego>        long total = System.currentTimeMillis()-start;<newline46mondego>        //If time out, exit code would be null<newline46mondego>        System.out.println(<doubleQuotes46> Short task id :<doubleQuotes46>+id+<doubleQuotes46> Exit Code : <doubleQuotes46> +worker.getExit()+<doubleQuotes46> thread id <doubleQuotes46>+Thread.currentThread().getId()+<doubleQuotes46> in time <doubleQuotes46>+total);<newline46mondego>    } catch(InterruptedException ex) {<newline46mondego>        worker.interrupt();<newline46mondego>        Thread.currentThread().interrupt();<newline46mondego>    } finally {<newline46mondego>        if(process != null) {<newline46mondego>            process.destroy();<newline46mondego>        }<newline46mondego>    }<newline46mondego>}<newline46mondego>}<newline46mondego><newline46mondego>class LongTask implements Runnable {<newline46mondego>  private int id;<newline46mondego>  private long timeOut;<newline46mondego>  LongTask(int id, long timeOut) {<newline46mondego>    this.id = id;<newline46mondego>    this.timeOut = timeOut;<newline46mondego>  }<newline46mondego>  public void run() {<newline46mondego><newline46mondego>    long start = System.currentTimeMillis();<newline46mondego><newline46mondego>    Runtime runtime = Runtime.getRuntime();<newline46mondego>    Process process = null;<newline46mondego>    try {<newline46mondego>        process = runtime.exec(<doubleQuotes46>sleep 60s<doubleQuotes46>);<newline46mondego>    } catch (IOException e) {<newline46mondego>        System.out.println(<doubleQuotes46>LongTask IOE<doubleQuotes46>);<newline46mondego>    }<newline46mondego>    Worker worker = new Worker(process, <doubleQuotes46>long task<doubleQuotes46>+id);<newline46mondego>    worker.start();<newline46mondego>    try {<newline46mondego>        worker.join(timeOut);<newline46mondego>        long total = System.currentTimeMillis() - start;<newline46mondego>        //If time out, exit code would be null<newline46mondego>        System.out.println(<doubleQuotes46> Long Task id :<doubleQuotes46>+id+<doubleQuotes46> Exit Code : <doubleQuotes46> +worker.getExit()+<doubleQuotes46> thread id <doubleQuotes46>+Thread.currentThread().getId()+<doubleQuotes46> in time <doubleQuotes46>+total);<newline46mondego>    } catch(InterruptedException ex) {<newline46mondego>        worker.interrupt();<newline46mondego>        Thread.currentThread().interrupt();<newline46mondego>    } finally {<newline46mondego>        if(process != null) {<newline46mondego>            process.destroy();<newline46mondego>        }<newline46mondego>    }<newline46mondego>  }<newline46mondego>}<newline46mondego>"
"9403splitHere46","20288432splitHere46","socio"
"9404splitHere46","20288432splitHere46","notifyDataSetChanged()"
"9405splitHere46","20288717splitHere46","System.out.printf(<doubleQuotes46>|%-30s|%5s|%n<doubleQuotes46>, <doubleQuotes46>Aa<doubleQuotes46>, <doubleQuotes46>1<doubleQuotes46>);<newline46mondego>System.out.printf(<doubleQuotes46>|%-30s|%5s|%n<doubleQuotes46>, <doubleQuotes46>Bbbb<doubleQuotes46>, <doubleQuotes46>222<doubleQuotes46>);<newline46mondego><newline46mondego>String s = String.format(<doubleQuotes46>|%-30s|%5s|%n<doubleQuotes46>, <doubleQuotes46>Aa<doubleQuotes46>, <doubleQuotes46>1<doubleQuotes46>).replace(' ', '_');<newline46mondego><newline46mondego>String fortyBlanks = String.format(<doubleQuotes46>%40s<doubleQuotes46>, <doubleQuotes46><doubleQuotes46>);<newline46mondego>"
"9406splitHere46","20288798splitHere46","try {<newline46mondego>    UIManager.setLookAndFeel(<doubleQuotes46>javax.swing.plaf.nimbus.NimbusLookAndFeel<doubleQuotes46>);<newline46mondego>} catch (Throwable t) {<newline46mondego>    throw new RuntimeException(t);<newline46mondego>}<newline46mondego>"
"9407splitHere46","20288798splitHere46","makeTextArea()"
"9408splitHere46","20288798splitHere46","scrollTextArea.setBorder(BorderFactory.createEmptyBorder());<newline46mondego>"
"9409splitHere46","20288808splitHere46","< and >"
"9410splitHere46","20288808splitHere46","^ and $"
"9411splitHere46","20288808splitHere46","Pattern pattern = Pattern.compile(<doubleQuotes46><[ED]-[0-9]{2}-(.*?)-[0-9]{2}><doubleQuotes46>);<newline46mondego>"
"9412splitHere46","20288808splitHere46","find()"
"9413splitHere46","20288808splitHere46","matches()"
"9414splitHere46","20288808splitHere46","group()"
"9415splitHere46","20288808splitHere46","String text = <doubleQuotes46>sdsas<D-10-helloworld-84>kjvkjv<doubleQuotes46>;<newline46mondego><newline46mondego>Pattern pattern = Pattern.compile(<doubleQuotes46><[ED]-[0-9]{2}-(.*?)-[0-9]{2}><doubleQuotes46>);<newline46mondego>Matcher matcher = pattern.matcher(noiseFrame);<newline46mondego>if (matcher.find()) {<newline46mondego>    String newText = matcher.group(1);<newline46mondego>    System.out.println(newText);<newline46mondego>}<newline46mondego>"
"9416splitHere46","20288820splitHere46","ostr"
"9417splitHere46","20288820splitHere46","System.out"
"9418splitHere46","20288820splitHere46","System.out.println(<doubleQuotes46>hmmm<doubleQuotes46>);"
"9419splitHere46","20288820splitHere46","System.out"
"9420splitHere46","20288820splitHere46","PrintStream"
"9421splitHere46","20288820splitHere46","System.out.close();<newline46mondego>System.out.println(<doubleQuotes46>hmmm<doubleQuotes46>);<newline46mondego>System.err.println(<doubleQuotes46>System.out in trouble: <doubleQuotes46> + System.out.checkError());<newline46mondego>"
"9422splitHere46","20288820splitHere46","System.out in trouble: true<newline46mondego>"
"9423splitHere46","20288868splitHere46","static String asStrangeNumber ( int i ) {<newline46mondego>  // Lowest 4 digits are decimal.<newline46mondego>  int low4 = i%10000;<newline46mondego>  i /= 10000;<newline46mondego>  // Next is base 36 - 0-9-A-Z<newline46mondego>  int c = i % 36;<newline46mondego>  i /= 36;<newline46mondego>  // Remaining should be < 10.<newline46mondego>  return String.format(<doubleQuotes46>%1d%c%04d<doubleQuotes46>, i%10, c < 10 ? '0' + c: 'A' + c - 10, low4);<newline46mondego>}<newline46mondego><newline46mondego>public void test() {<newline46mondego>  test (0);<newline46mondego>  test (1);<newline46mondego>  test (10);<newline46mondego>  test (100);<newline46mondego>  test (1000);<newline46mondego>  test (10000);<newline46mondego>  test (100000);<newline46mondego>  test (1000000);<newline46mondego><newline46mondego>}<newline46mondego><newline46mondego>private void test(int i) {<newline46mondego>  System.out.println(<doubleQuotes46>    <doubleQuotes46>+i+<doubleQuotes46> -> <doubleQuotes46>+asStrangeNumber(i));<newline46mondego>}<newline46mondego>"
"9424splitHere46","20288868splitHere46","0 -> 000000<newline46mondego>1 -> 000001<newline46mondego>10 -> 000010<newline46mondego>100 -> 000100<newline46mondego>1000 -> 001000<newline46mondego>10000 -> 010000<newline46mondego>100000 -> 0A0000<newline46mondego>1000000 -> 2S0000<newline46mondego>"
"9425splitHere46","20288944splitHere46","for"
"9426splitHere46","20288944splitHere46","1"
"9427splitHere46","20288944splitHere46","averagesArray"
"9428splitHere46","20288944splitHere46","0"
"9429splitHere46","20288944splitHere46","0"
"9430splitHere46","20288944splitHere46","for(int i = 0; i< averagesArray.length; i++){ //Use averagesArray.length<newline46mondego><newline46mondego>   double total = (studentMarksArray[i][0]+<newline46mondego>             studentMarksArray[i][1]+studentMarksArray[i][2])/3;<newline46mondego>      averagesArray[i] = total;<newline46mondego>}<newline46mondego>"
"9431splitHere46","20288948splitHere46","public Map<String,Map<String,Integer>> Results = new LinkedHashMap<String, Map<String,Integer>>();<newline46mondego>"
"9432splitHere46","20288948splitHere46","public Map<String, List<String[]>> Results = new LinkedHashMap<String, List<String[]>>();<newline46mondego>"
"9433splitHere46","20288948splitHere46","for(String header: (String[]) myEntries.get(0)){<newline46mondego>        Results.put(header, null);<newline46mondego>        // What now?<newline46mondego>    } <newline46mondego>"
"9434splitHere46","20288948splitHere46","String[] headerColumns = (String[]) myEntries.get(0);<newline46mondego>    // First column is TimeStamp, skip it<newline46mondego>    for (int i = 1; i < headerColumns.length; i++) {<newline46mondego><newline46mondego>        List<String[]> list = new ArrayList<String[]>();<newline46mondego>        for (int rowIndex = 1; rowIndex < myEntries.size(); rowIndex++) {<newline46mondego>            String[] row = (String[]) myEntries.get(rowIndex);<newline46mondego>            list.add(new String[] { row[0], row[i] });<newline46mondego>        }<newline46mondego><newline46mondego>        Results.put(headerColumns[i], list);<newline46mondego>    }<newline46mondego>"
"9435splitHere46","20288948splitHere46","for(Map.Entry<String, List<String[]>> entry : Results.entrySet())<newline46mondego>    {<newline46mondego>        System.out.printf(<doubleQuotes46>[%s]\n<doubleQuotes46>,entry.getKey());<newline46mondego>        for(String[] array : entry.getValue())<newline46mondego>        {<newline46mondego>            System.out.println(Arrays.toString(array));<newline46mondego>        }<newline46mondego>    }<newline46mondego>"
"9436splitHere46","20288948splitHere46","[Column 1]<newline46mondego>[1385733406, Value1]<newline46mondego>[1385733409, Value21]<newline46mondego>[1385733411, Value31]<newline46mondego>[Column 2]<newline46mondego>[1385733406, Value12]<newline46mondego>[1385733409, Value22]<newline46mondego>[1385733411, Value32]<newline46mondego>[Column3]<newline46mondego>[1385733406, Value13]<newline46mondego>[1385733409, Value23]<newline46mondego>[1385733411, Value33]<newline46mondego>"
"9437splitHere46","20288948splitHere46","TimeStamp;Column 1;Column 2;Column3<newline46mondego>1385733406;Value1;Value12;Value13<newline46mondego>1385733409;Value21;Value22;Value23<newline46mondego>1385733411;Value31;Value32;Value33<newline46mondego>"
"9438splitHere46","20289025splitHere46","JOIN"
"9439splitHere46","20289025splitHere46","ON"
"9440splitHere46","20289025splitHere46","StudentWithGraduate"
"9441splitHere46","20289025splitHere46","SELECT p.name, o.graduate FROM StudentWithGraduate o<newline46mondego>    LEFT JOIN o.student s<newline46mondego>    LEFT JOIN o.subject p<newline46mondego>    WHERE s.surname=:name<newline46mondego>"
"9442splitHere46","20289025splitHere46","Query query = em.createQuery(aboveQuery);<newline46mondego>query.setParameter(<doubleQuotes46>name<doubleQuotes46>, parameterValue);<newline46mondego>//....the rest of parameters + getResultList();<newline46mondego>"
"9443splitHere46","20289082splitHere46","http://www.journaldev.com/721/java-annotations-tutorial-with-custom-annotation-example-and-parsing-using-reflection<newline46mondego>"
"9444splitHere46","20289301splitHere46","Checker"
"9445splitHere46","20289301splitHere46","List<Pattern>"
"9446splitHere46","20289301splitHere46","public class PatternService {<newline46mondego>    AtomicReference<List<Pattern>> patterns = new AtomicReference<>(Collections.emptyList());<newline46mondego><newline46mondego>    public List<Pattern> getPatterns() {<newline46mondego>        return patterns.get();<newline46mondego>    }<newline46mondego><newline46mondego>    public synchronized void addPattern(Pattern p) {<newline46mondego>        List<Pattern> newPatterns = new LinkedList<>(patterns.get());<newline46mondego>        newPatterns.add(p);<newline46mondego>        patterns.set(Collections.unmodifiableList(newPatterns)); // or ImmutableList<newline46mondego>    }<newline46mondego><newline46mondego>    // other mutators<newline46mondego>}<newline46mondego><newline46mondego><newline46mondego>public class Checker {<newline46mondego>    @Autowired PatternService patternService;<newline46mondego><newline46mondego>    public boolean check(String param) {<newline46mondego>        for(Pattern p: patternService.getPatterns())<newline46mondego>            if(p.matcher(param).matches())<newline46mondego>                return true;<newline46mondego><newline46mondego>        return false;<newline46mondego>    }<newline46mondego>}<newline46mondego>"
"9447splitHere46","20289372splitHere46","SQLiteDatabase db = SQLiteDatabase.openDatabase(<doubleQuotes46>/data/data/com.example.abc2/databases/DB_BusData<doubleQuotes46>, null, 0);<newline46mondego>Cursor c = db.rawQuery(<doubleQuotes46>SELECT * FROM Tbl_Driver<doubleQuotes46>, null);<newline46mondego>if(c.moveToFirst()) {<newline46mondego>    String username = c.getString(0).trim();<newline46mondego>    String password = c.getString(1).trim();<newline46mondego>    //Log.d(username, <doubleQuotes46>try<doubleQuotes46>);<newline46mondego>}<newline46mondego>db.close();<newline46mondego>"
"9448splitHere46","20289372splitHere46","assets"
"9449splitHere46","20289380splitHere46","stop()"
"9450splitHere46","20289380splitHere46","suspend()"
"9451splitHere46","20289380splitHere46","sleep()"
"9452splitHere46","20289380splitHere46","wait()"
"9453splitHere46","20289380splitHere46","notify()"
"9454splitHere46","20289406splitHere46","double"
"9455splitHere46","20289406splitHere46","double []"
"9456splitHere46","20289406splitHere46","averagesArray"
"9457splitHere46","20289406splitHere46","findAverages()"
"9458splitHere46","20289406splitHere46","findAverages()"
"9459splitHere46","20289406splitHere46","static void highestStudentAvgMark() {<newline46mondego>  double[] averagesArray = findAverages();<newline46mondego>  double max = averagesArray[0];<newline46mondego>  for (int i = 1; i < averagesArray.length; i++) {<newline46mondego>    if (averagesArray[i] > max) {<newline46mondego>      max = averagesArray[i];<newline46mondego>    }<newline46mondego>  }<newline46mondego>  findMark(max, averagesArray);<newline46mondego>  System.out.println(max);<newline46mondego>}<newline46mondego>"
"9460splitHere46","20289508splitHere46","import java.util.Scanner;<newline46mondego><newline46mondego>enum GoingState {<newline46mondego>   TO_HOME,<newline46mondego>   TO_WORK,<newline46mondego>   TO_SHOP, <newline46mondego>}<newline46mondego><newline46mondego>public class StateGame{<newline46mondego><newline46mondego>    public static GoingState state = GoingState.TO_WORK;<newline46mondego><newline46mondego>    public static void main(String args[]){<newline46mondego>        Scanner scanIn = new Scanner(System.in);<newline46mondego>        System.out.println(<doubleQuotes46>Where do you want to go?<doubleQuotes46>);<newline46mondego>        if(scanIn.nextLine().toLowerCase().contains(<doubleQuotes46>home<doubleQuotes46>)){<newline46mondego>            state = GoingState.TO_HOME;<newline46mondego>            System.out.println(<doubleQuotes46>Going home.<doubleQuotes46>);<newline46mondego>        }<newline46mondego>        else if(scanIn.nextLine().toLowerCase().contains(<doubleQuotes46>work<doubleQuotes46>)){<newline46mondego>            state = GoingState.TO_WORK;<newline46mondego>            System.out.println(<doubleQuotes46>Going to work.<doubleQuotes46>);<newline46mondego>        }<newline46mondego>        else if(scanIn.nextLine().toLowerCase().contains(<doubleQuotes46>shop<doubleQuotes46>)){<newline46mondego>            state = GoingState.TO_SHOP;<newline46mondego>            System.out.println(<doubleQuotes46>Going to the shop.<doubleQuotes46>);<newline46mondego>        }<newline46mondego>        else{<newline46mondego>            System.out.println(<doubleQuotes46>No valid input<doubleQuotes46>);<newline46mondego>        }<newline46mondego>    }<newline46mondego>}<newline46mondego>"
"9461splitHere46","20289508splitHere46","enum"
"9462splitHere46","20289508splitHere46","int"
"9463splitHere46","20289508splitHere46","String"
"9464splitHere46","20289508splitHere46","Object"
"9465splitHere46","20289649splitHere46","doc.body().ownText()"
"9466splitHere46","20289649splitHere46","elem = document.select(<doubleQuotes46>*<doubleQuotes46>);"
"9467splitHere46","20289649splitHere46","strText = document.body().ownText()"
"9468splitHere46","20289649splitHere46","for (Element element : elem){<newline46mondego>    String valueofelement = element.text();<newline46mondego>    story.add(valueofelement);<newline46mondego>    progressDialog.dismiss();<newline46mondego>}<newline46mondego>"
"9469splitHere46","20289649splitHere46","story.add(strText);<newline46mondego>progressDialog.dismiss();<newline46mondego>"
"9470splitHere46","20289694splitHere46","String str; //declaraing<newline46mondego>str = <doubleQuotes46>My String<doubleQuotes46>; //defining<newline46mondego>"
"9471splitHere46","20289881splitHere46","startActivity()"
"9472splitHere46","20289881splitHere46","startActivity()"
"9473splitHere46","20289904splitHere46","dip"
"9474splitHere46","20289904splitHere46","dp"
"9475splitHere46","20289904splitHere46","dp"
"9476splitHere46","20290038splitHere46","Accept-Encoding:"
"9477splitHere46","20290090splitHere46","double"
"9478splitHere46","20290090splitHere46","-1.5707963267948966"
"9479splitHere46","20290090splitHere46","-PI/2"
"9480splitHere46","20290090splitHere46","-1.570796326794896557998981734272 // the number from the question<newline46mondego>-1.57079632679489661923132169163975â€¦ // the real digits of -PI/2<newline46mondego>                  â†‘<newline46mondego>                the end of the double precision<newline46mondego>"
"9481splitHere46","20290090splitHere46","double"
"9482splitHere46","20290330splitHere46","for(int i = 0; i <= n; ++i)<newline46mondego>{<newline46mondego>    for(int k = 0; k < i*2-1; ++k)<newline46mondego>       res.setText(res.getText()+c);<newline46mondego><newline46mondego>    res.setText(res.getText()+<doubleQuotes46>\n<doubleQuotes46>);<newline46mondego>}<newline46mondego>"
"9483splitHere46","20290380splitHere46","@prefix ns: <http://stackoverflow.com/q/20287293/1281433/> .<newline46mondego>@prefix owl:   <http://www.w3.org/2002/07/owl#> .<newline46mondego>@prefix xsd:   <http://www.w3.org/2001/XMLSchema#> .<newline46mondego>@prefix rdf:   <http://www.w3.org/1999/02/22-rdf-syntax-ns#> .<newline46mondego>@prefix rdfs:  <http://www.w3.org/2000/01/rdf-schema#> <newline46mondego><newline46mondego>ns:Person a owl:Class .<newline46mondego>ns:Man rdfs:subClassOf ns:Person .<newline46mondego>ns:Woman rdfs:subClassOf ns:Person .<newline46mondego>ns:Family a owl:Class .<newline46mondego><newline46mondego>ns:jean  a ns:Man .<newline46mondego>ns:roger a ns:Man .<newline46mondego>ns:chris a ns:Woman .<newline46mondego>ns:sofy  a ns:Woman .<newline46mondego>ns:chloe a ns:Woman .<newline46mondego><newline46mondego>ns:jean  ns:isMarriedWith ns:chris .<newline46mondego>ns:roger ns:isMarriedWith ns:chloe .<newline46mondego>"
"9484splitHere46","20290380splitHere46","f0"
"9485splitHere46","20290380splitHere46","construct"
"9486splitHere46","20290380splitHere46","prefix ns:    <http://stackoverflow.com/q/20287293/1281433/> <newline46mondego>prefix owl:   <http://www.w3.org/2002/07/owl#> <newline46mondego>prefix xsd:   <http://www.w3.org/2001/XMLSchema#> <newline46mondego>prefix rdf:   <http://www.w3.org/1999/02/22-rdf-syntax-ns#> <newline46mondego>prefix rdfs:  <http://www.w3.org/2000/01/rdf-schema#> <newline46mondego>prefix : <urn:ex:><newline46mondego><newline46mondego>construct {<newline46mondego>  :f0 a ns:Family .     # This can be written as <newline46mondego>  :f0 ns:contains ?p .  # :f0 a ns:Family ; ns:contains ?p, ?q .<newline46mondego>  :f0 ns:contains ?q .  #<newline46mondego>}<newline46mondego>where {<newline46mondego>  ?p ns:isMarriedWith ?q .<newline46mondego>}<newline46mondego>"
"9487splitHere46","20290380splitHere46",":f0     a            ns:Family ;<newline46mondego>        ns:contains  ns:chris , ns:jean , ns:chloe , ns:roger .<newline46mondego>"
"9488splitHere46","20290380splitHere46",":f0"
"9489splitHere46","20290380splitHere46",":f0"
"9490splitHere46","20290380splitHere46","_:f0"
"9491splitHere46","20290380splitHere46","_:f0 a ns:Family .   <newline46mondego>  _:f0 ns:contains ?p .<newline46mondego>  _:f0 ns:contains ?q .<newline46mondego>"
"9492splitHere46","20290380splitHere46","[ a ns:Family ; ns:contains ?p, ?q ]<newline46mondego>"
"9493splitHere46","20290380splitHere46","prefix ns:    <http://stackoverflow.com/q/20287293/1281433/> <newline46mondego>prefix owl:   <http://www.w3.org/2002/07/owl#> <newline46mondego>prefix xsd:   <http://www.w3.org/2001/XMLSchema#> <newline46mondego>prefix rdf:   <http://www.w3.org/1999/02/22-rdf-syntax-ns#> <newline46mondego>prefix rdfs:  <http://www.w3.org/2000/01/rdf-schema#> <newline46mondego><newline46mondego>prefix : <urn:ex:><newline46mondego><newline46mondego>construct {<newline46mondego>  _:f0 a ns:Family ; ns:contains ?p, ?q .<newline46mondego>}<newline46mondego>where {<newline46mondego>  ?p ns:isMarriedWith ?q .<newline46mondego>}<newline46mondego>"
"9494splitHere46","20290380splitHere46","@prefix :      <urn:ex:> .<newline46mondego>@prefix rdfs:  <http://www.w3.org/2000/01/rdf-schema#> .<newline46mondego>@prefix ns:    <http://stackoverflow.com/q/20287293/1281433/> .<newline46mondego>@prefix owl:   <http://www.w3.org/2002/07/owl#> .<newline46mondego>@prefix xsd:   <http://www.w3.org/2001/XMLSchema#> .<newline46mondego>@prefix rdf:   <http://www.w3.org/1999/02/22-rdf-syntax-ns#> .<newline46mondego><newline46mondego>[ a            ns:Family ;<newline46mondego>  ns:contains  ns:chris , ns:jean<newline46mondego>] .<newline46mondego><newline46mondego>[ a            ns:Family ;<newline46mondego>  ns:contains  ns:chloe , ns:roger<newline46mondego>] .<newline46mondego>"
"9495splitHere46","20290380splitHere46","<rdf:RDF<newline46mondego>    xmlns:rdf=<doubleQuotes46>http://www.w3.org/1999/02/22-rdf-syntax-ns#<doubleQuotes46><newline46mondego>    xmlns:ns=<doubleQuotes46>http://stackoverflow.com/q/20287293/1281433/<doubleQuotes46><newline46mondego>    xmlns:owl=<doubleQuotes46>http://www.w3.org/2002/07/owl#<doubleQuotes46><newline46mondego>    xmlns=<doubleQuotes46>urn:ex:<doubleQuotes46><newline46mondego>    xmlns:xsd=<doubleQuotes46>http://www.w3.org/2001/XMLSchema#<doubleQuotes46><newline46mondego>    xmlns:rdfs=<doubleQuotes46>http://www.w3.org/2000/01/rdf-schema#<doubleQuotes46>><newline46mondego>  <ns:Family><newline46mondego>    <ns:contains rdf:resource=<doubleQuotes46>http://stackoverflow.com/q/20287293/1281433/chris<doubleQuotes46>/><newline46mondego>    <ns:contains rdf:resource=<doubleQuotes46>http://stackoverflow.com/q/20287293/1281433/jean<doubleQuotes46>/><newline46mondego>  </ns:Family><newline46mondego>  <ns:Family><newline46mondego>    <ns:contains rdf:resource=<doubleQuotes46>http://stackoverflow.com/q/20287293/1281433/chloe<doubleQuotes46>/><newline46mondego>    <ns:contains rdf:resource=<doubleQuotes46>http://stackoverflow.com/q/20287293/1281433/roger<doubleQuotes46>/><newline46mondego>  </ns:Family><newline46mondego></rdf:RDF><newline46mondego>"
"9496splitHere46","20290382splitHere46","9,007,199,254,740,991"
"9497splitHere46","20290382splitHere46","9,007,199,254,740,991 + 1 = 9,007,199,254,740,992"
"9498splitHere46","20290382splitHere46","9,007,199,254,740,992 + 1 = 9,007,199,254,740,992"
"9499splitHere46","20290382splitHere46","double a = 9.007199254E15;<newline46mondego>while (a + 1 > a) {<newline46mondego>    a += 1;<newline46mondego>}<newline46mondego>System.out.println(a);<newline46mondego>"
"9500splitHere46","20290382splitHere46","2^63 - 1 = 9.22E18"
"9501splitHere46","20290384splitHere46","public class ArrayAdapterSocio extends ArrayAdapter<Socios> implements View.OnClickListener{<newline46mondego><newline46mondego>    // Your previous code<newline46mondego><newline46mondego>    @Override<newline46mondego>    public View getView(int position, View convertView, ViewGroup parent) {<newline46mondego>        // Your previous code<newline46mondego>        CapturadorSocio.edit.setTag(socios.obtenerId); <newline46mondego>        // Hopefully you have a method to identify your memebers by Id. <newline46mondego>        // Otherwise, use another unique identifier, like their name.<newline46mondego>    }<newline46mondego><newline46mondego>    @Override<newline46mondego>    public void onClick(View v) {<newline46mondego>        switch(v.getId()) {<newline46mondego>            case R.id.btnEdit:<newline46mondego>            // The edit button was clicked, launch your edition here.<newline46mondego>            // You can get the Id of the member by calling v.getTag(),<newline46mondego>            // use that to launch edition on the correct member.<newline46mondego>            break;<newline46mondego><newline46mondego>            default:<newline46mondego>            break;<newline46mondego>        }<newline46mondego>    }<newline46mondego>}<newline46mondego>"
"9502splitHere46","20290390splitHere46","<dependency><newline46mondego> <groupId>com.oracle</groupId><newline46mondego> <artifactId>ojdbc14</artifactId><newline46mondego> <version>10.2.0.2</version> <newline46mondego></dependency><newline46mondego>"
"9503splitHere46","20290403splitHere46","Map<String, String> properties = new HashMap<>();<newline46mondego>    properties.put(<doubleQuotes46>height<doubleQuotes46>, <doubleQuotes46>160<doubleQuotes46>);<newline46mondego>    properties.put(<doubleQuotes46>weight<doubleQuotes46>, <doubleQuotes46>80<doubleQuotes46>);<newline46mondego>    properties.put(<doubleQuotes46>name<doubleQuotes46>, <doubleQuotes46>bob<doubleQuotes46>);<newline46mondego><newline46mondego>    BeanWrapper person = new BeanWrapperImpl(new Person());<newline46mondego>    for (Map.Entry<String, String> property : properties.entrySet()) {<newline46mondego>        person.setPropertyValue(property.getKey(), property.getValue());<newline46mondego>    }<newline46mondego><newline46mondego>    System.out.println(person.getWrappedInstance().toString());<newline46mondego>"
"9504splitHere46","20290403splitHere46","-> Person [height=160, weight=80, name=bob]<newline46mondego>"
"9505splitHere46","20290550splitHere46","subRangeMap"
"9506splitHere46","20290550splitHere46","RangeMap"
"9507splitHere46","20290550splitHere46","O(log n)"
"9508splitHere46","20290550splitHere46","O(log n)"
"9509splitHere46","20290686splitHere46","DirContext.modifyAttributes()."
"9510splitHere46","20290713splitHere46","Stirng advice = <doubleQuotes46><doubleQuotes46>; <newline46mondego><newline46mondego>class MySyncTask extends AsyncTask<Integer, Integer, String>{<newline46mondego>@Override<newline46mondego>protected String doInBackground(Integer... params) {<newline46mondego>       Socket s = new Socket(<doubleQuotes46>127.0.0.1<doubleQuotes46>, 4242);<newline46mondego>        InputStreamReader streamReader = new InputStreamReader(s.getInputStream()); <newline46mondego>        BufferedReader reader = new BufferedReader(streamReader);<newline46mondego><newline46mondego>        String advice = reader.readLine();<newline46mondego>        reader.close<newline46mondego><newline46mondego>    }<newline46mondego><newline46mondego>protected void onPostExecute(String result) {<newline46mondego>     tv.setText(<doubleQuotes46>Today you should: <doubleQuotes46> + advice);<newline46mondego>}<newline46mondego>protected void onPreExecute() {<newline46mondego>   log.i(<doubleQuotes46>start<doubleQuotes46>);<newline46mondego>}    <newline46mondego>"
"9511splitHere46","20290713splitHere46","MySyncTask asyncTask=new MySyncTask (tv,pbar);<newline46mondego>                    asyncTask.execute(1000);<newline46mondego>"
"9512splitHere46","20290813splitHere46","ArrayAdapter requires the resource ID to be a TextView"
"9513splitHere46","20290813splitHere46","listAdapter = new ArrayAdapter<Task>(this, R.layout.list_item, items);<newline46mondego>"
"9514splitHere46","20290813splitHere46","listAdapter = new ArrayAdapter<Task>(this, R.layout.list_item, R.id.TEXT_VIEW_ID, items);<newline46mondego>"
"9515splitHere46","20290813splitHere46","R.id.TEXT_VIEW_ID"
"9516splitHere46","20290875splitHere46","Scanner scanner = new Scanner(new File(filename));<newline46mondego>"
"9517splitHere46","20290886splitHere46","public @interface Entity {<newline46mondego>    String name();<newline46mondego>}<newline46mondego><newline46mondego><newline46mondego>public class Car implements Entity{<newline46mondego>    public String name(){ return <doubleQuotes46>car<doubleQuotes46>; }<newline46mondego>}<newline46mondego>"
"9518splitHere46","20290886splitHere46","Entity"
"9519splitHere46","20290930splitHere46","interface Predicate<T> {<newline46mondego>    boolean test(T t);<newline46mondego>}<newline46mondego><newline46mondego>class EqualsColumnPredicate implement Predicate<ResultSet> {<newline46mondego>    final String columnName;<newline46mondego>    final Object value;<newline46mondego>    // create a constructor to set these<newline46mondego><newline46mondego>    public boolean test(ResultSet rs) {<newline46mondego>         return rs.getObject(columnName).equals(value); // TODO check for nulls<newline46mondego>    }<newline46mondego>}<newline46mondego><newline46mondego>class OrPredicate<T> implements Predicate<T> {<newline46mondego>    final Prediate<T>[] preciates;<newline46mondego>    // create a constructor for this field<newline46mondego>    public boolean test(T t) {<newline46mondego>         for(Predicate<T> p : predicates)<newline46mondego>             if(p.test(t)) return true;<newline46mondego>        return false;<newline46mondego>    }<newline46mondego>}<newline46mondego><newline46mondego>Predicate<T> where = new OrPredicate<ResultSet>(<newline46mondego>   new EqualsColumnPredicate(<doubleQuotes46>column<doubleQuotes46>, 64),<newline46mondego>   new EqualsColumnPredicate(<doubleQuotes46>column<doubleQuotes46>, 61));<newline46mondego><newline46mondego>while(rs.next())<newline46mondego>   if (where.test(rs))<newline46mondego>       // found !!<newline46mondego>"
"9520splitHere46","20290938splitHere46","boolean b = (y==3-x)||(y==3)||(y=3+x);<newline46mondego>"
"9521splitHere46","20290938splitHere46","(y=3+x)"
"9522splitHere46","20290938splitHere46","boolean b = (y==3-x)||(y==3)||(y==3+x);<newline46mondego>"
"9523splitHere46","20290938splitHere46","boolean b = (y==3-x)||(y==3);<newline46mondego>        b = b || (y == x-3);<newline46mondego>"
"9524splitHere46","20290938splitHere46","boolean b = x < 7 && x >= 0 && y < 7 && y >= 0;<newline46mondego>"
"9525splitHere46","20290945splitHere46","TextView ResultVal = (TextView) findViewById(R.id.textView3);<newline46mondego>ResultVal.setText(Result);<newline46mondego>setContentView(ResultVal);  <newline46mondego>"
"9526splitHere46","20290945splitHere46","ResultVal"
"9527splitHere46","20290945splitHere46","findViewById"
"9528splitHere46","20290945splitHere46","setContentView"
"9529splitHere46","20290975splitHere46","public class BeanClass {<newline46mondego><newline46mondego>    private static BeanClass instance = new BeanClass();<newline46mondego><newline46mondego>    private BeanClass(){<newline46mondego>    }        <newline46mondego><newline46mondego>    public static BeanClass getter(){<newline46mondego>       return instance;<newline46mondego>    }<newline46mondego>}<newline46mondego>"
"9530splitHere46","20290975splitHere46","<bean id=<doubleQuotes46>beanClassInstance<doubleQuotes46> class=<doubleQuotes46>BeanClass<doubleQuotes46> factory-method=<doubleQuotes46>getter<doubleQuotes46>/><newline46mondego>"
"9531splitHere46","20291167splitHere46","XPath xPathMessage = XPath.newInstance(<doubleQuotes46>/root/status/message<doubleQuotes46>);<newline46mondego> Element objectElementMessage = (Element) xPath.selectSingleNode(documentXML);<newline46mondego>"
"9532splitHere46","20291167splitHere46","XPath xPathMessage = XPath.newInstance(<doubleQuotes46>/root/status/message<doubleQuotes46>);<newline46mondego>Element objectElementMessage = (Element) xPathMessage.selectSingleNode(documentXML);<newline46mondego>"
"9533splitHere46","20291185splitHere46","new int[2][4]"
"9534splitHere46","20291185splitHere46","int[]"
"9535splitHere46","20291185splitHere46","int[]"
"9536splitHere46","20291185splitHere46","int[][]"
"9537splitHere46","20291185splitHere46","int[][]"
"9538splitHere46","20291185splitHere46","int[]"
"9539splitHere46","20291185splitHere46","ArrayList"
"9540splitHere46","20291185splitHere46","ArrayList"
"9541splitHere46","20291185splitHere46","int"
"9542splitHere46","20291185splitHere46","Integer"
"9543splitHere46","20291185splitHere46","Matrix"
"9544splitHere46","20291185splitHere46","public class IntMatrix {<newline46mondego>    private int rows;<newline46mondego>    private int cols;<newline46mondego>    private int[] data;<newline46mondego><newline46mondego>    /**<newline46mondego>     * Allocate a matrix with the indicated initial dimensions.<newline46mondego>     * @param cols The column (horizontal or x) dimension for the matrix<newline46mondego>     * @param rows The row (vertical or y) dimension for the matrix<newline46mondego>     */<newline46mondego>    public IntMatrix(int cols, int rows) {<newline46mondego>        this.rows = rows;<newline46mondego>        this.cols = cols;<newline46mondego>        data = new int[cols * rows];<newline46mondego>    }<newline46mondego><newline46mondego>    /**<newline46mondego>     * Calculates the index of the indicated row and column for<newline46mondego>     * a matrix with the indicated width. This uses row-major ordering<newline46mondego>     * of the matrix elements.<newline46mondego>     * <p><newline46mondego>     * Note that this is a static method so that it can be used independent<newline46mondego>     * of any particular data instance.<newline46mondego>     * @param col The column index of the desired element<newline46mondego>     * @param row The row index of the desired element<newline46mondego>     * @param width The width of the matrix<newline46mondego>     */<newline46mondego>    private static int getIndex(int col, int row, int width) {<newline46mondego>        return row * width + col;<newline46mondego>    }<newline46mondego><newline46mondego>    public int get(int col, int row) {<newline46mondego>        return data[getIndex(col, row, cols)];<newline46mondego>    }<newline46mondego><newline46mondego>    public void set(int col, int row, int value) {<newline46mondego>        data[getIndex(col, row, cols)] = value;<newline46mondego>    }<newline46mondego><newline46mondego>    /**<newline46mondego>     * Resizes the matrix. The values in the current matrix are placed<newline46mondego>     * at the top-left corner of the new matrix. In each dimension, if<newline46mondego>     * the new size is smaller than the current size, the data are<newline46mondego>     * truncated; if the new size is larger, the remainder of the values<newline46mondego>     * are set to 0.<newline46mondego>     * @param cols The new column (horizontal) dimension for the matrix<newline46mondego>     * @param rows The new row (vertical) dimension for the matrix<newline46mondego>     */<newline46mondego>    public void resize(int cols, int rows) {<newline46mondego>        int [] newData = new int[cols * rows];<newline46mondego>        int colsToCopy = Math.min(cols, this.cols);<newline46mondego>        int rowsToCopy = Math.min(rows, this.rows);<newline46mondego>        for (int i = 0; i < rowsToCopy; ++i) {<newline46mondego>            int oldRowStart = getIndex(0, i, this.cols);<newline46mondego>            int newRowStart = getIndex(0, i, cols);<newline46mondego>            System.arraycopy(data, oldRowStart, newData, newRowStart,<newline46mondego>                colsToCopy<newline46mondego>            );<newline46mondego>        }<newline46mondego>        data = newData;<newline46mondego>    }<newline46mondego><newline46mondego>    . . .<newline46mondego>}<newline46mondego>"
"9545splitHere46","20291197splitHere46","wc.unload()"
"9546splitHere46","20291197splitHere46","Set"
"9547splitHere46","20291197splitHere46","Set.removeAll()"
"9548splitHere46","20291197splitHere46","java.util.concurrent"
"9549splitHere46","20291249splitHere46","toString()"
"9550splitHere46","20291249splitHere46","Day"
"9551splitHere46","20291249splitHere46","Blood"
"9552splitHere46","20291249splitHere46","public class Blood {<newline46mondego>    ...<newline46mondego><newline46mondego>    public String toString() {<newline46mondego>        return String.format(<doubleQuotes46>%s %s<doubleQuotes46>, systolic,diastolic) + day.toString();<newline46mondego>    }<newline46mondego><newline46mondego>    ...<newline46mondego>}<newline46mondego>"
"9553splitHere46","20291249splitHere46","Blood"
"9554splitHere46","20291249splitHere46","Day"
"9555splitHere46","20291249splitHere46","public Blood(int systolic, int diastolic, Day day) {<newline46mondego>    this.systolic = systolic;<newline46mondego>    this.diastolic = diastolic;<newline46mondego>    this.day = day;<newline46mondego>}<newline46mondego>"
"9556splitHere46","20291419splitHere46","line.split(<doubleQuotes46>[^a-zA-Z0-9']<doubleQuotes46>)"
"9557splitHere46","20291419splitHere46","while((line = lector.readLine())!=null) {<newline46mondego><newline46mondego>    String[] arr = line.split(<doubleQuotes46>[^a-zA-Z0-9']<doubleQuotes46>);<newline46mondego>    String res = <doubleQuotes46><doubleQuotes46>;<newline46mondego><newline46mondego>    for(String s : arr) {<newline46mondego>        res += s;<newline46mondego>    }<newline46mondego><newline46mondego>    matrix.add(res);    <newline46mondego>}<newline46mondego>"
"9558splitHere46","20291476splitHere46","System.setProperty(<doubleQuotes46>sun.java2d.noddraw<doubleQuotes46>, <doubleQuotes46>true<doubleQuotes46>);<newline46mondego>"
"9559splitHere46","20291699splitHere46","<LinearLayout"
"9560splitHere46","20291699splitHere46","...layout_height=<doubleQuotes46>350dp<doubleQuotes46> <newline46mondego>"
"9561splitHere46","20291699splitHere46","...layout_height=<doubleQuotes46>wrap_content<doubleQuotes46><newline46mondego>"
"9562splitHere46","20291699splitHere46","<LinearLayout"
"9563splitHere46","20291699splitHere46","fill_parent"
"9564splitHere46","20291702splitHere46","newBufferedWriter(Path path, Charset cs, OpenOption... options)"
"9565splitHere46","20291702splitHere46","CREATE, TRUNCATE_EXISTING, and WRITE"
"9566splitHere46","20291702splitHere46","BufferedWriter writer = Files.newBufferedWriter(Paths.get(<doubleQuotes46>example.txt<doubleQuotes46>), <newline46mondego>                                                StandardCharsets.UTF_8);<newline46mondego>"
"9567splitHere46","20291757splitHere46","test item2 = new test();"
"9568splitHere46","20291757splitHere46","test"
"9569splitHere46","20291757splitHere46","test"
"9570splitHere46","20291757splitHere46","test"
"9571splitHere46","20291757splitHere46","item2"
"9572splitHere46","20291757splitHere46","test"
"9573splitHere46","20291757splitHere46","test"
"9574splitHere46","20291757splitHere46","item2"
"9575splitHere46","20291760splitHere46","ib1.setOnClickListener(new View.OnClickListener()<newline46mondego>   {<newline46mondego>      @Override<newline46mondego>      public void onClick(View v)<newline46mondego>      {<newline46mondego>         startActivity(new Intent (MapScreen.this , LaganArea.class));<newline46mondego><newline46mondego>      }<newline46mondego>   } );<newline46mondego>"
"9576splitHere46","20291769splitHere46","ConstraintViolationException"
"9577splitHere46","20291805splitHere46","User user = new User(<doubleQuotes46>Zack<doubleQuotes46>, <doubleQuotes46>Yoshyaro<doubleQuotes46>);<newline46mondego><newline46mondego>DefaultTableModel model = new DefaultTableModel(new Object[]{<doubleQuotes46>First<doubleQuotes46>, <doubleQuotes46>Last<doubleQuotes46>}, 0);<newline46mondego>model.addRow(new Object[]{user, user});  // note user must be added for each column, but it's the same object<newline46mondego>JTable table = new JTable(model);<newline46mondego><newline46mondego>TableColumn firstName = table.getColumn(<doubleQuotes46>First<doubleQuotes46>);<newline46mondego>firstName.setCellRenderer(...); // a cell renderer that shows user.getFirstName();<newline46mondego><newline46mondego>TableColumn lastName = table.getColumn(<doubleQuotes46>Last<doubleQuotes46>);<newline46mondego>lastName.setCellRenderer(...); // a cell renderer that shows user.getLastName();<newline46mondego>"
"9578splitHere46","20291820splitHere46","if ((typeOfCarCost.equals(<doubleQuotes46>Electric<doubleQuotes46>) || typeOfCarCost.equals(<doubleQuotes46>electric<doubleQuotes46>)) && ((SolarPanelCost.equals(<doubleQuotes46>No<doubleQuotes46>) || SolarPanelCost.equals(<doubleQuotes46>no<doubleQuotes46>)))<newline46mondego>                                    {<newline46mondego>                                        total = basicPrice + ElectricModel;<newline46mondego>                                        System.out.println(<doubleQuotes46>Basic Price:<doubleQuotes46> + basicPrice);<newline46mondego>                                        System.out.println(<doubleQuotes46>Electric Model:<doubleQuotes46> + ElectricModel);<newline46mondego>                                        System.out.println(<doubleQuotes46>Total:<doubleQuotes46> + total);<newline46mondego><newline46mondego>                                    }<newline46mondego>else if ((typeOfCarCost.equals(<doubleQuotes46>Electric<doubleQuotes46>) || typeOfCarCost.equals(<doubleQuotes46>electric<doubleQuotes46>)) && (SolarPanelCost.equals(<doubleQuotes46>Yes<doubleQuotes46>) || SolarPanelCost.equals(<doubleQuotes46>yes<doubleQuotes46>)))<newline46mondego>                                    {<newline46mondego>                                        total = basicPrice + ElectricModel + SolarPanel;<newline46mondego>                                        System.out.println(<doubleQuotes46>Basic Price:<doubleQuotes46> + basicPrice);<newline46mondego>                                        System.out.println(<doubleQuotes46>Electric Model:<doubleQuotes46> + ElectricModel);<newline46mondego>                                        System.out.println(<doubleQuotes46>Solar Panel:<doubleQuotes46> + SolarPanel);<newline46mondego>                                        System.out.println(<doubleQuotes46>Total:<doubleQuotes46> + total);<newline46mondego>                                    }<newline46mondego>"
"9579splitHere46","20291886splitHere46","BoxLayout"
"9580splitHere46","20291886splitHere46","PopUpPanel"
"9581splitHere46","20291886splitHere46","BoxLayout"
"9582splitHere46","20291886splitHere46","BoxLayout"
"9583splitHere46","20291886splitHere46","BoxLayout"
"9584splitHere46","20291886splitHere46","BoxLayout"
"9585splitHere46","20291930splitHere46","assembly.xml"
"9586splitHere46","20291930splitHere46","assembly.xml"
"9587splitHere46","20291930splitHere46","maven-jar-plugin"
"9588splitHere46","20291930splitHere46","<plugin><newline46mondego>  <artifactId>maven-assembly-plugin</artifactId><newline46mondego>  <configuration><newline46mondego>    <archive><newline46mondego>      <manifest><newline46mondego>        <mainClass>gui.MainFrame</mainClass><newline46mondego>      </manifest><newline46mondego>    </archive><newline46mondego>    <descriptorRefs><newline46mondego>      <descriptorRef>jar-with-dependencies</descriptorRef><newline46mondego>    </descriptorRefs><newline46mondego>  </configuration><newline46mondego>  <executions><newline46mondego>    <execution><newline46mondego>      <id>make-assembly</id> <!-- this is used for inheritance merges --><newline46mondego>      <phase>package</phase> <!-- bind to the packaging phase --><newline46mondego>      <goals><newline46mondego>        <goal>single</goal><newline46mondego>      </goals><newline46mondego>    </execution><newline46mondego>  </executions><newline46mondego></plugin><newline46mondego>"
"9589splitHere46","20291930splitHere46","maven-assembly-plugin"
"9590splitHere46","20291930splitHere46","log4j.xml"
"9591splitHere46","20291930splitHere46","one-jar-plugin"
"9592splitHere46","20291930splitHere46","dependency-plugin"
"9593splitHere46","20291930splitHere46","maven-jar-plugin"
"9594splitHere46","20291930splitHere46","maven-assembly-plugin"
"9595splitHere46","20291930splitHere46","assembly.xml"
"9596splitHere46","20291930splitHere46","<plugin><newline46mondego>            <groupId>org.apache.maven.plugins</groupId><newline46mondego>            <artifactId>maven-dependency-plugin</artifactId><newline46mondego>            <version>2.5.1</version><newline46mondego>            <executions><newline46mondego>                <execution><newline46mondego>                    <id>copy-dependencies</id><newline46mondego>                    <phase>package</phase><newline46mondego>                    <goals><newline46mondego>                        <goal>copy-dependencies</goal><newline46mondego>                    </goals><newline46mondego>                    <configuration><newline46mondego><newline46mondego>                        <outputDirectory>${project.build.directory}/lib/</outputDirectory><newline46mondego>                    </configuration><newline46mondego>                </execution><newline46mondego>            </executions><newline46mondego>        </plugin><newline46mondego>        <plugin><newline46mondego>            <groupId>org.dstovall</groupId><newline46mondego>            <artifactId>onejar-maven-plugin</artifactId><newline46mondego>            <version>1.4.4</version><newline46mondego>            <executions><newline46mondego>                <execution><newline46mondego>                    <configuration><newline46mondego>                        <mainClass>gui.MainFrame</mainClass><newline46mondego>                        <attachToBuild>true</attachToBuild><newline46mondego>                    </configuration><newline46mondego>                    <goals><newline46mondego>                        <goal>one-jar</goal><newline46mondego>                    </goals><newline46mondego>                </execution><newline46mondego>            </executions><newline46mondego>        </plugin><newline46mondego>"
"9597splitHere46","20291930splitHere46","one-jar-plugin"
"9598splitHere46","20291930splitHere46","<pluginRepositories><newline46mondego>    <pluginRepository><newline46mondego>        <id>onejar-maven-plugin.googlecode.com</id><newline46mondego>        <url>http://onejar-maven-plugin.googlecode.com/svn/mavenrepo</url><newline46mondego>    </pluginRepository><newline46mondego></pluginRepositories><newline46mondego>"
"9599splitHere46","20291978splitHere46","void statement() #STM : {}<newline46mondego>{<newline46mondego>   identifier() <ASSIGNMENT> expression()<newline46mondego> | identifier() <ASSIGNMENT> <STRING><newline46mondego> | identifier() <LBR> arg_list() <RBR><newline46mondego>}<newline46mondego>"
"9600splitHere46","20291978splitHere46","void statement() #STM : {}<newline46mondego>{<newline46mondego>   identifier()<newline46mondego>      (   <ASSIGNMENT> expression()<newline46mondego>      |   <ASSIGNMENT> <STRING><newline46mondego>      |   <LBR> arg_list() <RBR><newline46mondego>      )<newline46mondego>}<newline46mondego>"
"9601splitHere46","20291978splitHere46","void statement() #STM : {}<newline46mondego>{<newline46mondego>   identifier()<newline46mondego>      (   <ASSIGNMENT> ( expression() | <STRING> )<newline46mondego>      |   <LBR> arg_list() <RBR><newline46mondego>      )<newline46mondego>}<newline46mondego>"
"9602splitHere46","20291982splitHere46","rJava"
"9603splitHere46","20291982splitHere46","library(rJava)<newline46mondego>.jinit(PATH_TO_YOUR_JAR) # this starts the JVM<newline46mondego>jobject <- .jnew(<doubleQuotes46>yourJavaClass<doubleQuotes46>)  ## call the constructor<newline46mondego>.jcall(jobject ,<doubleQuotes46>I<doubleQuotes46>,method=<doubleQuotes46>YOUR_METHOD<doubleQuotes46>) ## call a method<newline46mondego>"
"9604splitHere46","20292017splitHere46","config.getStringList(<doubleQuotes46>string.list<doubleQuotes46>)"
"9605splitHere46","20292017splitHere46","for effectString in config.getStringList(<doubleQuotes46>string.list<doubleQuotes46>):<newline46mondego>"
"9606splitHere46","20292107splitHere46","JComboBox"
"9607splitHere46","20292107splitHere46","JRadioButton"
"9608splitHere46","20292107splitHere46","JDialog"
"9609splitHere46","20292110splitHere46","UDPATE Buyer SET Name = craigs WHERE idBuer in (Whatever)<newline46mondego>"
"9610splitHere46","20292110splitHere46","String sql = <doubleQuotes46>UPDATE Buyer SET Name=?, latitude=?, longitude=? WHERE idBuyer=?<doubleQuotes46>;<newline46mondego>try (PreparedStatement statement = conn.prepareStatement(sql)) {<newline46mondego>    statement.setString(1, name);<newline46mondego>    statement.setFloat(2, lat);<newline46mondego>    statement.setFloat(3, lon);<newline46mondego>    statement.setString(4, ID);<newline46mondego>    statement.executeUpdate();<newline46mondego>}<newline46mondego>"
"9611splitHere46","20292110splitHere46","IN"
"9612splitHere46","20292110splitHere46","Exception"
"9613splitHere46","20292110splitHere46","SQLException"
"9614splitHere46","20292397splitHere46","val url = getClass getResource <doubleQuotes46>index.html<doubleQuotes46><newline46mondego><newline46mondego>webView.getEngine load url.toString <newline46mondego>"
"9615splitHere46","20292397splitHere46","index.html"
"9616splitHere46","20292397splitHere46","mypackage.myapp.MyApp"
"9617splitHere46","20292397splitHere46","mypackage.myapp"
"9618splitHere46","20292397splitHere46","resources"
"9619splitHere46","20292397splitHere46","mypackage.myapp"
"9620splitHere46","20292408splitHere46","@Transactional"
"9621splitHere46","20292408splitHere46","Why should I use interceptor managed transactions at all?<newline46mondego>"
"9622splitHere46","20292408splitHere46","Better is to put transaction management code to service layer, because service layer usually performs some business level operations, which must be performed within one transaction. So your service method can use 2 or more DAOs to perform all DB operations in one transaction. Sorry, there is no links - I tell it your from my experience. <newline46mondego>"
"9623splitHere46","20292481splitHere46","alpha"
"9624splitHere46","20292481splitHere46","int myarray[][] = new int[2][2];"
"9625splitHere46","20292481splitHere46","myarray"
"9626splitHere46","20292481splitHere46","int myint = myarray[0][1]"
"9627splitHere46","20292481splitHere46","alpha[count]"
"9628splitHere46","20292481splitHere46","alpha[0][count]"
"9629splitHere46","20292552splitHere46","Graphics2D"
"9630splitHere46","20292552splitHere46","java.awt.Image"
"9631splitHere46","20292552splitHere46","BufferedImage"
"9632splitHere46","20292577splitHere46","select new map( max(bodyWeight) as max, min(bodyWeight) as min, count(*) as n ) from Cat cat<newline46mondego>"
"9633splitHere46","20292591splitHere46","id=<doubleQuotes46>systemProperties<doubleQuotes46>"
"9634splitHere46","20292632splitHere46","/"
"9635splitHere46","20292632splitHere46","GET   /   controllers.Assets.at(path=<doubleQuotes46>/public<doubleQuotes46>, file=<doubleQuotes46>comingSoon.html<doubleQuotes46>)<newline46mondego>"
"9636splitHere46","20292666splitHere46","if (nextString.equals(dvdSku)){<newline46mondego>"
"9637splitHere46","20292905splitHere46","ObjectInputStream"
"9638splitHere46","20292905splitHere46","readStreamHeader()"
"9639splitHere46","20292905splitHere46","protected void readStreamHeader()<newline46mondego>        throws IOException, StreamCorruptedException<newline46mondego>    {<newline46mondego>        short s0 = bin.readShort();<newline46mondego>        short s1 = bin.readShort();<newline46mondego>        if (s0 != STREAM_MAGIC || s1 != STREAM_VERSION) {<newline46mondego>            throw new StreamCorruptedException(<newline46mondego>                String.format(<doubleQuotes46>invalid stream header: %04X%04X<doubleQuotes46>, s0, s1));<newline46mondego>        }<newline46mondego>    }<newline46mondego>"
"9640splitHere46","20292905splitHere46","StreamCorruptedException"
"9641splitHere46","20292944splitHere46","for (i=1; i >4; i++)<newline46mondego>"
"9642splitHere46","20292944splitHere46","for (i=1; i < 4; i++)<newline46mondego>"
"9643splitHere46","20292965splitHere46","Launcher launcher = new Launcher();"
"9644splitHere46","20292965splitHere46","arr"
"9645splitHere46","20292965splitHere46","Launcher"
"9646splitHere46","20292965splitHere46","arr"
"9647splitHere46","20292965splitHere46","private static Player arr;"
"9648splitHere46","20292965splitHere46","arr"
"9649splitHere46","20292965splitHere46","launcher.arr"
"9650splitHere46","20292965splitHere46","arr = myArray.getPlayerArray();"
"9651splitHere46","20292965splitHere46","myArray.getPlayerArray()[0]"
"9652splitHere46","20293083splitHere46","myRule(fact, executionContext)"
"9653splitHere46","20293083splitHere46","class Rule {<newline46mondego>    String javaDoc;<newline46mondego>    ...<newline46mondego>    List<Component> componentsUsing;<newline46mondego>}<newline46mondego><newline46mondego>class Component {<newline46mondego>    ...<newline46mondego>}<newline46mondego>"
"9654splitHere46","20293122splitHere46","ApplicationContext"
"9655splitHere46","20293122splitHere46","ClassPathXmlApplicationContext"
"9656splitHere46","20293122splitHere46","XmlWebApplicationContext"
"9657splitHere46","20293122splitHere46","classpath:"
"9658splitHere46","20293122splitHere46","file:"
"9659splitHere46","20293122splitHere46","classpath:"
"9660splitHere46","20293122splitHere46","<import resource=<doubleQuotes46>classpath:serviceApplicationContext.xml<doubleQuotes46> /><newline46mondego>"
"9661splitHere46","20293159splitHere46","<build><newline46mondego> <sourceDirectory>path\to\actual\src</sourceDirectory><newline46mondego></build><newline46mondego>"
"9662splitHere46","20293159splitHere46","<build><newline46mondego>    <directory>target</directory><newline46mondego>    <outputDirectory>target/classes</outputDirectory><newline46mondego>    <finalName>${artifactId}-${version}</finalName><newline46mondego>    <testOutputDirectory>target/test-classes</testOutputDirectory><newline46mondego>    <sourceDirectory>src/main/java</sourceDirectory><newline46mondego>    <scriptSourceDirectory>src/main/scripts</scriptSourceDirectory><newline46mondego>    <testSourceDirectory>src/test/java</testSourceDirectory><newline46mondego>    <resources><newline46mondego>      <resource><newline46mondego>        <directory>src/main/resources</directory><newline46mondego>      </resource><newline46mondego>    </resources><newline46mondego>    <testResources><newline46mondego>      <testResource><newline46mondego>        <directory>src/test/resources</directory><newline46mondego>      </testResource><newline46mondego>    </testResources><newline46mondego></build><newline46mondego>"
"9663splitHere46","20293262splitHere46","@Override<newline46mondego>public void onViewCreated(View view, Bundle savedInstanceState) {<newline46mondego>    super.onViewCreated(view, savedInstanceState);<newline46mondego>    mRecipeListView = this.getListView();<newline46mondego>    mRecipeListView.setOnItemLongClickListener(new ListView.OnItemLongClickListener() {<newline46mondego><newline46mondego>        @Override<newline46mondego>        public boolean onItemLongClick(AdapterView<?> arg0, View view, int position, long row_id) {<newline46mondego>            // Process the long-click<newline46mondego>        }<newline46mondego>    });<newline46mondego>}<newline46mondego>"
"9664splitHere46","20293274splitHere46","pack()"
"9665splitHere46","20293274splitHere46","setVisible(true)"
"9666splitHere46","20293274splitHere46","getPreferredSize()"
"9667splitHere46","20293274splitHere46","getPreferredSize()"
"9668splitHere46","20293274splitHere46","pack()"
"9669splitHere46","20293274splitHere46","getPreferredSize()"
"9670splitHere46","20293274splitHere46","pack()"
"9671splitHere46","20293315splitHere46","@Transient<newline46mondego>private Set<Pet> cats = new HashSet<Pet>();<newline46mondego>"
"9672splitHere46","20293315splitHere46","// Call this from OwnerController before returning data to page.<newline46mondego>public void parsePets() {<newline46mondego>  for (Pet pet : getPetsInternal()) {<newline46mondego>    if (<doubleQuotes46>cat<doubleQuotes46>.equals(pet.getType().getName())) {<newline46mondego>      cats.add(pet);<newline46mondego>    }<newline46mondego>  }<newline46mondego>}<newline46mondego><newline46mondego>public getCats() {<newline46mondego>  return cats;<newline46mondego>}<newline46mondego>"
"9673splitHere46","20293315splitHere46","[...]<newline46mondego><h3>Cats</h3><newline46mondego><c:forEach var=<doubleQuotes46>cat<doubleQuotes46> items=<doubleQuotes46>${owner.cats}<doubleQuotes46>><newline46mondego>    <p>Name: <c:out value=<doubleQuotes46>${cat.name}<doubleQuotes46> /></p><newline46mondego></c:forEach><newline46mondego><newline46mondego><h3>All pets</h3><newline46mondego>[...]<newline46mondego>"
"9674splitHere46","20293315splitHere46","/**<newline46mondego> * Custom handler for displaying an owner.<newline46mondego> *<newline46mondego> * @param ownerId the ID of the owner to display<newline46mondego> * @return a ModelMap with the model attributes for the view<newline46mondego> */<newline46mondego>@RequestMapping(<doubleQuotes46>/owners/{ownerId}<doubleQuotes46>)<newline46mondego>public ModelAndView showOwner(@PathVariable(<doubleQuotes46>ownerId<doubleQuotes46>) int ownerId) {<newline46mondego>    ModelAndView mav = new ModelAndView(<doubleQuotes46>owners/ownerDetails<doubleQuotes46>);<newline46mondego>    Owner owner = this.clinicService.findOwnerById(ownerId);<newline46mondego>    owner.parsePets();<newline46mondego>    mav.addObject(owner);<newline46mondego>    return mav;<newline46mondego>}<newline46mondego>"
"9675splitHere46","20293360splitHere46","SIGSEGV"
"9676splitHere46","20293360splitHere46","hs_err_pidXXXX.log"
"9677splitHere46","20293360splitHere46","-XX:ErrorFile=/path/to/file."
"9678splitHere46","20293360splitHere46","memtest86"
"9679splitHere46","20293458splitHere46","byte"
"9680splitHere46","20293458splitHere46","char"
"9681splitHere46","20293458splitHere46","strrev"
"9682splitHere46","20293458splitHere46","for (int x = 1; x <= bFile.length; x++)<newline46mondego>"
"9683splitHere46","20293538splitHere46","do {<newline46mondego>    write = tast.next();<newline46mondego>    int i = 7;<newline46mondego><newline46mondego>    if (write.length() > i) {<newline46mondego>        System.out.println(<doubleQuotes46>\nYour new password is: <doubleQuotes46> + write);<newline46mondego>    } else {<newline46mondego>        System.out.println(<doubleQuotes46>Wrong! password have to contain 8 or more characters! Try again!<doubleQuotes46>);<newline46mondego>    }<newline46mondego>} while(write.length()<=i)<newline46mondego>"
"9684splitHere46","20293538splitHere46","do...while"
"9685splitHere46","20293538splitHere46","do { ... }"
"9686splitHere46","20293538splitHere46","{ }"
"9687splitHere46","20293538splitHere46","while (CRITERIA)"
"9688splitHere46","20293538splitHere46","( )"
"9689splitHere46","20293538splitHere46","true"
"9690splitHere46","20293538splitHere46","false"
"9691splitHere46","20293538splitHere46","do"
"9692splitHere46","20293584splitHere46","BoxLayout"
"9693splitHere46","20293584splitHere46","GridBagLayout"
"9694splitHere46","20293584splitHere46","BorderLayout"
"9695splitHere46","20293827splitHere46","public WindowTemplate(String title, CustomComponent cc) {<newline46mondego>    super(title);       <newline46mondego>    setWidth(<doubleQuotes46>200px<doubleQuotes46>);<newline46mondego>    setHeight(<doubleQuotes46>200px<doubleQuotes46>);<newline46mondego><newline46mondego>    // ...<newline46mondego><newline46mondego>    HorizontalLayout hLayout = new HorizontalLayout();<newline46mondego>    hLayout.setSizeFull();<newline46mondego><newline46mondego>    // ...<newline46mondego>"
"9696splitHere46","20293929splitHere46","for(int b:a)<newline46mondego>{<newline46mondego>     a1=b;<newline46mondego>}<newline46mondego>"
"9697splitHere46","20293929splitHere46","b"
"9698splitHere46","20293929splitHere46","a1"
"9699splitHere46","20293929splitHere46","a1"
"9700splitHere46","20293929splitHere46","a"
"9701splitHere46","20293929splitHere46","for (int b : a) {<newline46mondego>    System.out.println(b);<newline46mondego>}<newline46mondego>"
"9702splitHere46","20293929splitHere46","a1"
"9703splitHere46","20293929splitHere46","a1"
"9704splitHere46","20293929splitHere46","public class Welcome { // Names changed to be more conventional<newline46mondego>    private final int[] values;<newline46mondego><newline46mondego>    public Welcome(int... values) {<newline46mondego>        this.values = values;<newline46mondego>    }<newline46mondego><newline46mondego>    public void printValues() {<newline46mondego>        for (int value : values) {<newline46mondego>            System.out.println(value);<newline46mondego>        }<newline46mondego>    }<newline46mondego>}<newline46mondego>"
"9705splitHere46","20293929splitHere46","fill"
"9706splitHere46","20293929splitHere46","public void fill(int[] f) {<newline46mondego>    Scanner input=new Scanner(System.in);<newline46mondego>    for (int i = 0; i < f.length; i++) {<newline46mondego>       f[i] = input.nextInt();<newline46mondego>    }<newline46mondego>    a = new Welcome(f);<newline46mondego>    a.printValues();<newline46mondego>}<newline46mondego>"
"9707splitHere46","20293953splitHere46","const b2Vec2& GetPosition() const;  <newline46mondego>float32 GetAngle() const; <newline46mondego>ï¿¼ï¿¼ï¿¼ï¿¼ï¿¼ï¿¼const b2Vec2& GetWorldCenter() const;   <newline46mondego>const b2Vec2& GetLocalCenter()<newline46mondego>"
"9708splitHere46","20293963splitHere46","st.setString"
"9709splitHere46","20293963splitHere46","Connection con = DriverManager.getConnection(sqlUrl, user, pass);<newline46mondego>PreparedStatement st = con.prepareStatement(<newline46mondego>    <doubleQuotes46>insert into clients values (?, ?, ?, ?, ?)<doubleQuotes46>);<newline46mondego>st.setString(1, name);<newline46mondego>st.setString(2, lname);<newline46mondego>st.setString(3, cEmail);<newline46mondego>st.setString(4, rate); // Should this really be a string?<newline46mondego>st.setString(5, cUrl);<newline46mondego>st.executeUpdate();<newline46mondego>JOptionPane.showMessageDialog(null, <doubleQuotes46>Data saved!<doubleQuotes46>);<newline46mondego>"
"9710splitHere46","20293963splitHere46","st.executeUpdate"
"9711splitHere46","20293963splitHere46","st.executeUpdate"
"9712splitHere46","20293994splitHere46","NumberFormat f = new DecimalFormat(<doubleQuotes46>00<doubleQuotes46>);<newline46mondego>long time = 9;<newline46mondego>textView.setText(f.format(time));<newline46mondego>"
"9713splitHere46","20293994splitHere46","09<newline46mondego>"
"9714splitHere46","20293994splitHere46","String format = <doubleQuotes46>%1$02d<doubleQuotes46>; // two digits<newline46mondego>textView.setText(String.format(format, time));<newline46mondego>"
"9715splitHere46","20294019splitHere46","CTRL"
"9716splitHere46","20294019splitHere46","V"
"9717splitHere46","20294019splitHere46","Window.setFocusableWindowState"
"9718splitHere46","20294019splitHere46","false"
"9719splitHere46","20294047splitHere46","marks"
"9720splitHere46","20294047splitHere46","marks"
"9721splitHere46","20294047splitHere46","public TicTacModel()<newline46mondego>{<newline46mondego>  red = {{false, false, false},<newline46mondego>                   {false, false, false},<newline46mondego>                   {false, false, false}};<newline46mondego>  marks = {{<doubleQuotes46> <doubleQuotes46>, <doubleQuotes46> <doubleQuotes46>, <doubleQuotes46> <doubleQuotes46>},<newline46mondego>                    {<doubleQuotes46> <doubleQuotes46>, <doubleQuotes46> <doubleQuotes46>, <doubleQuotes46> <doubleQuotes46>},<newline46mondego>                    {<doubleQuotes46> <doubleQuotes46>, <doubleQuotes46> <doubleQuotes46>, <doubleQuotes46> <doubleQuotes46>}};<newline46mondego>}<newline46mondego>"
"9722splitHere46","20294116splitHere46","Integer"
"9723splitHere46","20294116splitHere46","java.lang.Integer"
"9724splitHere46","20294216splitHere46","print()"
"9725splitHere46","20294216splitHere46","Test1"
"9726splitHere46","20294216splitHere46","Test.print();<newline46mondego>"
"9727splitHere46","20294216splitHere46","test()"
"9728splitHere46","20294216splitHere46","test().print()"
"9729splitHere46","20294216splitHere46","invokespecial"
"9730splitHere46","20294216splitHere46","invokestatic"
"9731splitHere46","20294241splitHere46","glOrtho (...)"
"9732splitHere46","20294241splitHere46","Matrix4f"
"9733splitHere46","20294241splitHere46","Matrix4f.m00 = 2.0f/(right-left);<newline46mondego>Matrix4f.m01 = 0.0f;<newline46mondego>Matrix4f.m02 = 0.0f;<newline46mondego>Matrix4f.m03 = 0.0f;<newline46mondego><newline46mondego>Matrix4f.m10 = 0.0f;<newline46mondego>Matrix4f.m11 = 2.0f/(top-bottom);<newline46mondego>Matrix4f.m12 = 0.0f;<newline46mondego>Matrix4f.m13 = 0.0f;<newline46mondego><newline46mondego>Matrix4f.m20 = 0.0f;<newline46mondego>Matrix4f.m21 = 0.0f;<newline46mondego>Matrix4f.m22 = -2.0f/(far-near);<newline46mondego>Matrix4f.m23 = 0.0f;<newline46mondego><newline46mondego>Matrix4f.m30 = -(right+left)/(right-left);<newline46mondego>Matrix4f.m31 = -(top+bottom)/(top-bottom);<newline46mondego>Matrix4f.m32 =   -(far+near)/(far-near);<newline46mondego>Matrix4f.m33 = 1.0f;<newline46mondego>"
"9734splitHere46","20294317splitHere46","import java.util.List;<newline46mondego><newline46mondego>public class CastExample <T extends Object> {<newline46mondego>    public List<T> typedList;<newline46mondego>    public List<?> untypedList;<newline46mondego><newline46mondego>    public T getFirstElement() {<newline46mondego>        return typedList.get(0);<newline46mondego>    }<newline46mondego><newline46mondego><newline46mondego>    public T getFromUntypedArray() {<newline46mondego>        return (T) untypedList.get(0);<newline46mondego>    }<newline46mondego>}<newline46mondego>"
"9735splitHere46","20294317splitHere46","javap"
"9736splitHere46","20294317splitHere46","javap -c CastExample"
"9737splitHere46","20294317splitHere46","/var/tmp-> javap -c CastExample<newline46mondego><newline46mondego>Compiled from <doubleQuotes46>CastExample.java<doubleQuotes46><newline46mondego>public class CastExample<T> {<newline46mondego>  public java.util.List<T> typedList;<newline46mondego><newline46mondego>  public java.util.List<?> untypedList;<newline46mondego><newline46mondego>  public CastExample();<newline46mondego>    Code:<newline46mondego>       0: aload_0       <newline46mondego>       1: invokespecial #1                  // Method java/lang/Object.<doubleQuotes46><init><doubleQuotes46>:()V<newline46mondego>       4: return        <newline46mondego><newline46mondego>  public T getFirstElement();<newline46mondego>    Code:<newline46mondego>       0: aload_0       <newline46mondego>       1: getfield      #2                  // Field typedList:Ljava/util/List;<newline46mondego>       4: iconst_0      <newline46mondego>       5: invokeinterface #3,  2            // InterfaceMethod java/util/List.get:(I)Ljava/lang/Object;<newline46mondego>      10: areturn       <newline46mondego><newline46mondego>  public T getFromUntypedArray();<newline46mondego>    Code:<newline46mondego>       0: aload_0       <newline46mondego>       1: getfield      #4                  // Field untypedList:Ljava/util/List;<newline46mondego>       4: iconst_0      <newline46mondego>       5: invokeinterface #3,  2            // InterfaceMethod java/util/List.get:(I)Ljava/lang/Object;<newline46mondego>      10: areturn       <newline46mondego>}<newline46mondego>"
"9738splitHere46","20294387splitHere46","int[] count = new int[num[num.length - 1]];<newline46mondego>"
"9739splitHere46","20294387splitHere46","count[num[x] - 1] = count[num[x] - 1] + 1;<newline46mondego>"
"9740splitHere46","20294418splitHere46","cout"
"9741splitHere46","20294418splitHere46","zout.closeEntry"
"9742splitHere46","20294418splitHere46","cout.close()"
"9743splitHere46","20294418splitHere46","zout.close()"
"9744splitHere46","20294418splitHere46","cout = new CipherOutputStream(new CloseShieldOutputStream(zout), cipher);<newline46mondego>"
"9745splitHere46","20294418splitHere46","close()"
"9746splitHere46","20294418splitHere46","zout"
"9747splitHere46","20294427splitHere46","public class StreamGobbler implements Runnable {<newline46mondego>   private static String userdir;<newline46mondego>   private String name;<newline46mondego>   private LineIterator lineIterator;<newline46mondego><newline46mondego>   public StreamGobbler(String name, InputStream inStream) {<newline46mondego>      this.name = name;<newline46mondego>      BufferedReader bufReader = new BufferedReader(new InputStreamReader(<newline46mondego>            inStream));<newline46mondego>      lineIterator = IOUtils.lineIterator(bufReader);<newline46mondego>   }<newline46mondego><newline46mondego>   @Override<newline46mondego>   public void run() {<newline46mondego>      try {<newline46mondego>         while (lineIterator.hasNext()) {<newline46mondego>            String line = lineIterator.nextLine();<newline46mondego>            System.out.println(line);<newline46mondego>            // ...<newline46mondego>         }<newline46mondego><newline46mondego>      } finally {<newline46mondego>         LineIterator.closeQuietly(lineIterator);<newline46mondego>      }<newline46mondego><newline46mondego>   }<newline46mondego><newline46mondego>   public String getName() {<newline46mondego>      return name;<newline46mondego>   }<newline46mondego>}<newline46mondego>"
"9748splitHere46","20294427splitHere46","String completeComm = userdir + <doubleQuotes46>\\timer.bat<doubleQuotes46>;<newline46mondego>Process p = Runtime.getRuntime().exec(<newline46mondego>       <doubleQuotes46>cmd /c <doubleQuotes46> + completeComm + <doubleQuotes46> <doubleQuotes46> + command + <doubleQuotes46> --batch<doubleQuotes46>);<newline46mondego>new Thread(new StreamGobbler(<doubleQuotes46>InputStream<doubleQuotes46>, p.getInputStream())).start();<newline46mondego>new Thread(new StreamGobbler(<doubleQuotes46>ErrorStream<doubleQuotes46>, p.getErrorStream())).start();<newline46mondego>"
"9749splitHere46","20294478splitHere46","StringBuilder"
"9750splitHere46","20294478splitHere46","StringBuilder.append(char)"
"9751splitHere46","20294478splitHere46","append()"
"9752splitHere46","20294478splitHere46","StringBuilder.toString()"
"9753splitHere46","20294579splitHere46","@Transient"
"9754splitHere46","20294613splitHere46","long p = (long)Math.pow(10, 8);<newline46mondego>    long start = 90 * p;<newline46mondego>    long end = 180 * p;<newline46mondego>    for (long i = start; i < end; i++) {<newline46mondego>        for (long j = start; j < end; j++) {<newline46mondego>            System.out.println(<doubleQuotes46>(<doubleQuotes46> + (double)i / p + <doubleQuotes46>,<doubleQuotes46> + (double)j / p + <doubleQuotes46>)<doubleQuotes46>);<newline46mondego>        }<newline46mondego>    }<newline46mondego>"
"9755splitHere46","20294691splitHere46","int min = 100;<newline46mondego><newline46mondego>for (int i = 0; i < total; i++) {<newline46mondego>    if (array[i] < min) {<newline46mondego>        min = array[i];<newline46mondego>    }<newline46mondego>}<newline46mondego>"
"9756splitHere46","20294691splitHere46","int sum = 0;<newline46mondego><newline46mondego>for (int i = 0; i < total; i++) {<newline46mondego>    sum += array[i];<newline46mondego>}<newline46mondego><newline46mondego>double avg = (double) (sum) / total;<newline46mondego>"
"9757splitHere46","20294691splitHere46","Integer.MAX_VALUE"
"9758splitHere46","20294691splitHere46","Integer.MIN_VALUE"
"9759splitHere46","20294716splitHere46","byte b1 = n & 0xFf;<newline46mondego>byte b2 = (n >> 8) & 0xFF;<newline46mondego>byte b3 = (n >> 16) & 0xFF;<newline46mondego>byte b4 = (n >> 24) & 0xFF;<newline46mondego>"
"9760splitHere46","20294777splitHere46","matrix.length"
"9761splitHere46","20294777splitHere46","matrix[0].length"
"9762splitHere46","20294777splitHere46","matrix[1].length"
"9763splitHere46","20294777splitHere46","1 2<newline46mondego>3 4<newline46mondego>"
"9764splitHere46","20294777splitHere46","[[1,2],[3,4]]<newline46mondego>"
"9765splitHere46","20294984splitHere46","repaint"
"9766splitHere46","20294984splitHere46","RepaintManager"
"9767splitHere46","20294984splitHere46","invokeLater"
"9768splitHere46","20295008splitHere46","static List<Double> getElements(String fileContent, String token) {<newline46mondego>  StreamTokenizer tokenizer = new StreamTokenizer(new StringReader(fileContent));<newline46mondego>  List<Double> list = new ArrayList<Double>();<newline46mondego>  while (tokenizer.nextToken() != StreamTokenizer.TT_EOF) {<newline46mondego>    if (tokenizer.sval.equals(token)) {<newline46mondego>      tokenizer.nextToken();  // '[' <newline46mondego>      do {<newline46mondego>        tokenizer.nextToken();  // go to the number<newline46mondego>        list.append(tokenizer.nval);<newline46mondego>      } while (tokenizer.nextToken() == ',');<newline46mondego>      break;<newline46mondego>    }<newline46mondego>  } <newline46mondego>  return list;<newline46mondego>}<newline46mondego>"
"9769splitHere46","20295015splitHere46","class Ideone<newline46mondego>{<newline46mondego>private static <T extends Base> void hassleSafeAdder(Container container, T value) {<newline46mondego>        value.addToContainer(container);<newline46mondego>    }<newline46mondego><newline46mondego>public static void main (String[] args) throws java.lang.Exception {<newline46mondego>    Container container = new Container();<newline46mondego><newline46mondego>    hassleSafeAdder(container, new Child1());<newline46mondego>    hassleSafeAdder(container, new Child2());<newline46mondego>    hassleSafeAdder(container, new Child3());<newline46mondego>    hassleSafeAdder(container, new Child4());<newline46mondego><newline46mondego>}<newline46mondego><newline46mondego>public static class Container {<newline46mondego>    public void add(Child1 obj) { }<newline46mondego>    public void add(Child2 obj) { }<newline46mondego>    public void add(Child3 obj) { }<newline46mondego>    public void add(Child4 obj) { }<newline46mondego>}<newline46mondego><newline46mondego>public static abstract class Base { <newline46mondego><newline46mondego>    public abstract void addToContainer(Container container);<newline46mondego><newline46mondego>}<newline46mondego><newline46mondego>public static class Child1 extends Base {<newline46mondego><newline46mondego>    public void addToContainer(Container container) {<newline46mondego>        container.add(this);    <newline46mondego>    }<newline46mondego>}<newline46mondego><newline46mondego>public static class Child2 extends Base {<newline46mondego><newline46mondego>    public void addToContainer(Container container) {<newline46mondego>        container.add(this);    <newline46mondego>    }<newline46mondego>}<newline46mondego><newline46mondego>public static class Child3 extends Base {<newline46mondego><newline46mondego>    public void addToContainer(Container container) {<newline46mondego>        container.add(this);    <newline46mondego>    }<newline46mondego>}<newline46mondego><newline46mondego>public static class Child4 extends Base {<newline46mondego><newline46mondego>    public void addToContainer(Container container) {<newline46mondego>        container.add(this);    <newline46mondego>    }<newline46mondego>}<newline46mondego>}<newline46mondego>"
"9770splitHere46","20295070splitHere46","public static void main (String[] args) {<newline46mondego>    double[][] alpha = new double[10][5];<newline46mondego><newline46mondego>    for (int i = 0; i < 10; i++) {<newline46mondego>        for (int j = 0; j < 5; j++) {<newline46mondego>            int index = (5 * i + j);<newline46mondego>            if (index < 25) {<newline46mondego>                alpha[i][j] = (index * index);<newline46mondego>                System.out.println(<doubleQuotes46>index(<doubleQuotes46> + index + <doubleQuotes46>)^2 =<doubleQuotes46> + alpha[i][j]);<newline46mondego>            } else {<newline46mondego>                alpha[i][j] = (3 * index);<newline46mondego>                System.out.println(<doubleQuotes46>3*index(<doubleQuotes46> + index + <doubleQuotes46>) = <doubleQuotes46> + alpha[i][j]);<newline46mondego>            }<newline46mondego>        }<newline46mondego>    }<newline46mondego>}<newline46mondego>"
"9771splitHere46","20295078splitHere46","thr1"
"9772splitHere46","20295078splitHere46","synchronized"
"9773splitHere46","20295078splitHere46","thr2"
"9774splitHere46","20295078splitHere46","(int) (Math.random() * 30)"
"9775splitHere46","20295078splitHere46","19"
"9776splitHere46","20295218splitHere46","while(correctAnswer=false)<newline46mondego>"
"9777splitHere46","20295218splitHere46","while(correctAnswer==false)<newline46mondego>"
"9778splitHere46","20295218splitHere46","false"
"9779splitHere46","20295218splitHere46","correctAnswer"
"9780splitHere46","20295218splitHere46","false"
"9781splitHere46","20295218splitHere46","a==false"
"9782splitHere46","20295218splitHere46","!a"
"9783splitHere46","20295218splitHere46","while(!correctAnswer)<newline46mondego>"
"9784splitHere46","20295218splitHere46","correctAnswer = true"
"9785splitHere46","20295348splitHere46","buf[0] = 's';<newline46mondego>buf[1] = 't';<newline46mondego>buf[2] = 'a';<newline46mondego>buf[3] = 'r';<newline46mondego>buf[4] = 't';<newline46mondego>buf[5] = 0;<newline46mondego>"
"9786splitHere46","20295348splitHere46","String line = r.readLine();<newline46mondego>"
"9787splitHere46","20295369splitHere46","[\n\r]+(?:[-]+[\n\r]+)?\s*junkhere:\s*[\n\r][\s\S]*"
"9788splitHere46","20295369splitHere46","= text.replaceAll(<doubleQuotes46>[\\n\\r]+(?:[-]+[\\n\\r]+)?\\s*junkhere:\\s*[\\n\\r][\\s\\S]*<doubleQuotes46>, <doubleQuotes46><doubleQuotes46>);<newline46mondego>"
"9789splitHere46","20295504splitHere46","display.setText(total);<newline46mondego>"
"9790splitHere46","20295504splitHere46","display.setText(Integer.toString(total));<newline46mondego>"
"9791splitHere46","20295613splitHere46","switch(view.getId()) {<newline46mondego>        case R.id.getGreetingButton:<newline46mondego>            new RestTask().execute(Pair.create(context,1));<newline46mondego>            break;<newline46mondego><newline46mondego>    }<newline46mondego>"
"9792splitHere46","20295618splitHere46","@Before"
"9793splitHere46","20295618splitHere46","@BeforeClass"
"9794splitHere46","20295618splitHere46","@Before"
"9795splitHere46","20295618splitHere46","@BeforeClass"
"9796splitHere46","20295618splitHere46","@BeforeClass"
"9797splitHere46","20295618splitHere46","@BeforeClass"
"9798splitHere46","20295618splitHere46","@Before"
"9799splitHere46","20295626splitHere46","String match = m.group(1);"
"9800splitHere46","20295626splitHere46","index"
"9801splitHere46","20295626splitHere46","find"
"9802splitHere46","20295626splitHere46","group"
"9803splitHere46","20295692splitHere46","subclass"
"9804splitHere46","20295692splitHere46","superclass"
"9805splitHere46","20295692splitHere46","Subclass"
"9806splitHere46","20295692splitHere46","Subclass myObject = (Subclass) list.get(0);<newline46mondego>System.out.println(myObject.getQuantity());<newline46mondego>"
"9807splitHere46","20295692splitHere46","SuperClass myObject = list.get(0);<newline46mondego>if ( myObject instanceof Subclass) {<newline46mondego>  Subclass mySubObject = (Subclass) myObject;<newline46mondego>  System.out.println(mySubObject.getQuantity());<newline46mondego>}<newline46mondego>"
"9808splitHere46","20295692splitHere46","Subclass"
"9809splitHere46","20295692splitHere46","SuperClass myObject = list.get(0)"
"9810splitHere46","20295692splitHere46","Subclass myObject = (Subclass) list.get(0)"
"9811splitHere46","20295837splitHere46","<beans:bean<newline46mondego>         class=<doubleQuotes46>org.springframework.web.servlet.view.InternalResourceViewResolver<doubleQuotes46>><newline46mondego>            <beans:property name=<doubleQuotes46>prefix<doubleQuotes46> value=<doubleQuotes46>/WEB-INF/views/<doubleQuotes46> /><newline46mondego>            <beans:property name=<doubleQuotes46>suffix<doubleQuotes46> value=<doubleQuotes46>.jsp<doubleQuotes46> /><newline46mondego>            <property name=<doubleQuotes46>order<doubleQuotes46> value=<doubleQuotes46>1<doubleQuotes46>/><newline46mondego>     </beans:bean><newline46mondego>"
"9812splitHere46","20295865splitHere46","SQLiteDatabase db = myDbHelper.getReadableDatabase();<newline46mondego>//SQLiteDatabase db = SQLiteDatabase.openDatabase(<doubleQuotes46>/data/data/com.example.abc2/databases/DB_BusData<doubleQuotes46>, null, 0);<newline46mondego>Cursor c = db.rawQuery(<doubleQuotes46>SELECT * FROM Tbl_Vehicle<doubleQuotes46>, null);<newline46mondego>//=====Add Additional=====<newline46mondego>MatrixCursor extras = new MatrixCursor(new String[] { <doubleQuotes46>_id<doubleQuotes46>, <doubleQuotes46>Plat_No<doubleQuotes46> });<newline46mondego>extras.addRow(new String[] { <doubleQuotes46>-1<doubleQuotes46>,<doubleQuotes46>< Select Vehicle ><doubleQuotes46> });<newline46mondego>Cursor[] cursors = { extras, c };<newline46mondego>c = new MergeCursor(cursors);<newline46mondego>//===========================<newline46mondego>"
"9813splitHere46","20296004splitHere46","drawLayer()"
"9814splitHere46","20296004splitHere46","createRectangle()"
"9815splitHere46","20296004splitHere46","Rectangle"
"9816splitHere46","20296004splitHere46","List<Rectangle>"
"9817splitHere46","20296004splitHere46","paintComponent()"
"9818splitHere46","20296017splitHere46","Button reload = new Button(<doubleQuotes46>Reload<doubleQuotes46>);<newline46mondego>    reload.setPrefHeight(100d);<newline46mondego>    reload.setMaxWidth(Double.MAX_VALUE);<newline46mondego>    start.setOnMouseReleased(new EventHandler<MouseEvent>(){<newline46mondego>"
"9819splitHere46","20296048splitHere46","However, you do need your own provider to provide custom search suggestions in your own application.<newline46mondego>"
"9820splitHere46","20296078splitHere46","public class DataBaseHelper {<newline46mondego>private static final String DB_NAME = <doubleQuotes46>DB_BusData<doubleQuotes46>;<newline46mondego>public static final String TABLE_NAME = <doubleQuotes46>Tbl_Driver<doubleQuotes46>;<newline46mondego><newline46mondego>private Context context;<newline46mondego>private String path;<newline46mondego><newline46mondego>private SQLiteDatabase database;<newline46mondego>private boolean isInitializing = false;<newline46mondego><newline46mondego>public DataBaseHelper(Context context) {<newline46mondego>    this.context = context;<newline46mondego>    this.path = context.getDatabasePath(DB_NAME).getAbsolutePath();<newline46mondego><newline46mondego>    if (TextUtils.isEmpty(this.path)) {<newline46mondego>        throw new IllegalArgumentException(<doubleQuotes46>database can't be null<doubleQuotes46>);<newline46mondego>    }<newline46mondego>}<newline46mondego><newline46mondego>public SQLiteDatabase getReadableDatabase() {<newline46mondego>    synchronized (this) {<newline46mondego>        checkAndCopyDatabase();<newline46mondego>        return getDatabaseLocked(false);<newline46mondego>    }<newline46mondego>}<newline46mondego><newline46mondego>/**<newline46mondego> * Attentionï¼šjust support readable database until now<newline46mondego> *<newline46mondego> * @return<newline46mondego> */<newline46mondego>public SQLiteDatabase getWriteableDatabase() {<newline46mondego>    synchronized (this) {<newline46mondego>        checkAndCopyDatabase();<newline46mondego>        return getDatabaseLocked(true);<newline46mondego>    }<newline46mondego>}<newline46mondego><newline46mondego>private void checkAndCopyDatabase() {<newline46mondego>    File file = new File(this.path);<newline46mondego>    if (file.exists() && file.length() > 0) {<newline46mondego>        Log.d(<doubleQuotes46>TAG<doubleQuotes46>, <doubleQuotes46>db already exist<doubleQuotes46>);<newline46mondego>    } else {<newline46mondego>        try {<newline46mondego>            InputStream is = context.getAssets().open(DB_NAME);<newline46mondego>            copyStreamToFile(is, new File(this.path));<newline46mondego>        } catch (IOException e) {<newline46mondego>            e.printStackTrace();<newline46mondego>        }<newline46mondego>    }<newline46mondego>}<newline46mondego><newline46mondego>private static final void copyStreamToFile(InputStream inputStream, File file) {<newline46mondego>    ensureDir(file);<newline46mondego><newline46mondego>    FileOutputStream fos = null;<newline46mondego>    try {<newline46mondego>        fos = new FileOutputStream(file);<newline46mondego>        byte[] buffer = new byte[2048];<newline46mondego>        int read = 0;<newline46mondego>        while ((read = inputStream.read(buffer)) > 0) {<newline46mondego>            fos.write(buffer, 0, read);<newline46mondego>        }<newline46mondego>    } catch (FileNotFoundException e) {<newline46mondego>        e.printStackTrace();<newline46mondego>    } catch (IOException e) {<newline46mondego>        e.printStackTrace();<newline46mondego>    } finally {<newline46mondego>        quietClose(inputStream);<newline46mondego>        quietClose(fos);<newline46mondego>    }<newline46mondego>}<newline46mondego><newline46mondego>private static final void ensureDir(File file) {<newline46mondego>    if (file != null && (file = file.getParentFile()) != null && !file.exists()) {<newline46mondego>        file.mkdirs();<newline46mondego>    }<newline46mondego>}<newline46mondego><newline46mondego>private static final void quietClose(final Closeable closeable) {<newline46mondego>    if (closeable != null) {<newline46mondego>        try {<newline46mondego>            closeable.close();<newline46mondego>        } catch (final IOException e) {<newline46mondego>        }<newline46mondego>    }<newline46mondego>}<newline46mondego><newline46mondego>private SQLiteDatabase getDatabaseLocked(boolean writeable) {<newline46mondego>    if (this.database != null) {<newline46mondego>        if (!this.database.isOpen()) {<newline46mondego>            database = null;<newline46mondego>        } else if (!writeable || !database.isReadOnly()) {<newline46mondego>            return database;<newline46mondego>        }<newline46mondego>    }<newline46mondego><newline46mondego>    if (isInitializing) {<newline46mondego>        throw new IllegalArgumentException(<doubleQuotes46>getDatabase called recursively<doubleQuotes46>);<newline46mondego>    }<newline46mondego><newline46mondego>    SQLiteDatabase db = this.database;<newline46mondego><newline46mondego>    try {<newline46mondego>        isInitializing = true;<newline46mondego>        if (db != null && writeable && db.isReadOnly()) {<newline46mondego>            if (db.isOpen()) {<newline46mondego>                db.close();<newline46mondego>            }<newline46mondego>            db = null;<newline46mondego>        }<newline46mondego>        try {<newline46mondego>            db = SQLiteDatabase.openDatabase(this.path, null,<newline46mondego>                    writeable ? SQLiteDatabase.OPEN_READWRITE : SQLiteDatabase.OPEN_READONLY);<newline46mondego>        } catch (SQLiteException e) {<newline46mondego>            e.printStackTrace();<newline46mondego>        }<newline46mondego>        this.database = db;<newline46mondego>        return db;<newline46mondego>    } finally {<newline46mondego>        isInitializing = false;<newline46mondego>        if (db != null && db != database) {<newline46mondego>            db.close();<newline46mondego>        }<newline46mondego>    }<newline46mondego>}<newline46mondego><newline46mondego>public static class Driver implements BaseColumns {<newline46mondego>    long id;<newline46mondego>    String code;<newline46mondego>    String name;<newline46mondego><newline46mondego>    static final String CODE_CLOMN_NAME = <doubleQuotes46>Driver_Code<doubleQuotes46>;<newline46mondego>    static final String NAME_CLOMN_Name = <doubleQuotes46>Driver_Name<doubleQuotes46>;<newline46mondego><newline46mondego>    @Override<newline46mondego>    public String toString() {<newline46mondego>        return name;<newline46mondego>    }<newline46mondego>}<newline46mondego><newline46mondego>public List<Driver> queryAllDriver() {<newline46mondego>    List<Driver> drivers = null;<newline46mondego><newline46mondego>    SQLiteDatabase db = getReadableDatabase();<newline46mondego>    if (db != null) {<newline46mondego>        Cursor cursor = null;<newline46mondego>        try {<newline46mondego>            cursor = db.query(TABLE_NAME, null, null, null, null, null, null);<newline46mondego>            if(cursor != null && cursor.moveToFirst()) {<newline46mondego>                do {<newline46mondego>                    final long id = cursor.getLong(cursor.getColumnIndex(Driver._ID));<newline46mondego>                    final String code = cursor.getString(cursor.getColumnIndex(Driver.CODE_CLOMN_NAME));<newline46mondego>                    final String name = cursor.getString(cursor.getColumnIndex(Driver.NAME_CLOMN_Name));<newline46mondego><newline46mondego>                    Driver driver = new Driver();<newline46mondego>                    driver.id = id;<newline46mondego>                    driver.code = code;<newline46mondego>                    driver.name = name;<newline46mondego><newline46mondego>                    if(drivers == null)<newline46mondego>                        drivers = new ArrayList<DataBaseHelper.Driver>();<newline46mondego><newline46mondego>                    drivers.add(driver);<newline46mondego>                } while(cursor.moveToNext());<newline46mondego>            }<newline46mondego>        } catch (SQLiteException e) {<newline46mondego>            e.printStackTrace();<newline46mondego>        } finally {<newline46mondego>            if(cursor != null)<newline46mondego>                cursor.close();<newline46mondego>        }<newline46mondego><newline46mondego>        db.close();<newline46mondego>    }<newline46mondego><newline46mondego>    return drivers;<newline46mondego>}<newline46mondego>"
"9821splitHere46","20296078splitHere46","public class MainActivity extends Activity implements OnItemSelectedListener {<newline46mondego>private List<Driver> drivers;<newline46mondego>private Spinner spinner;<newline46mondego><newline46mondego>@Override<newline46mondego>protected void onCreate(Bundle savedInstanceState) {<newline46mondego>    super.onCreate(savedInstanceState);<newline46mondego>    setContentView(R.layout.activity_main);<newline46mondego><newline46mondego>    spinner = (Spinner) findViewById(R.id.spinner);<newline46mondego>    spinner.setOnItemSelectedListener(this);<newline46mondego><newline46mondego>    new DBTask().execute();<newline46mondego>}<newline46mondego><newline46mondego>class DBTask extends AsyncTask<Void, Void, List<Driver>> {<newline46mondego><newline46mondego>    @Override<newline46mondego>    protected List<Driver> doInBackground(Void... params) {<newline46mondego>        DataBaseHelper dbHelper = new DataBaseHelper(MainActivity.this);<newline46mondego>        return dbHelper.queryAllDriver();<newline46mondego>    }<newline46mondego><newline46mondego>    @Override<newline46mondego>    protected void onPostExecute(List<Driver> result) {<newline46mondego>        bindSpinner(result);<newline46mondego>    }<newline46mondego>}<newline46mondego><newline46mondego>private void bindSpinner(List<Driver> drivers) {<newline46mondego>    this.drivers = drivers != null ? drivers : new ArrayList<DataBaseHelper.Driver>(0);<newline46mondego><newline46mondego>    ArrayAdapter<Driver> adapter = new ArrayAdapter<DataBaseHelper.Driver>(this,<newline46mondego>            android.R.layout.simple_spinner_item, this.drivers);<newline46mondego>    adapter.setDropDownViewResource(android.R.layout.simple_spinner_dropdown_item);<newline46mondego>    spinner.setAdapter(adapter);<newline46mondego>}<newline46mondego><newline46mondego>@Override<newline46mondego>public void onItemSelected(AdapterView<?> parent, View view, int position, long id) {<newline46mondego>    if (this.spinner != null && position >= 0 && position < this.drivers.size()) {<newline46mondego>        Driver driver = drivers.get(position);<newline46mondego>        Toast.makeText(this, <doubleQuotes46>selected: driver=<doubleQuotes46> + driver.name + <doubleQuotes46>, code=<doubleQuotes46> + driver.code,<newline46mondego>                Toast.LENGTH_SHORT).show();<newline46mondego>    }<newline46mondego>}<newline46mondego><newline46mondego>@Override<newline46mondego>public void onNothingSelected(AdapterView<?> parent) {<newline46mondego>    Toast.makeText(this, <doubleQuotes46>nothing selected<doubleQuotes46>, Toast.LENGTH_SHORT).show();<newline46mondego>}<newline46mondego>"
"9822splitHere46","20296078splitHere46","private List<Driver> queryAllDriver() {<newline46mondego>    List<Driver> drivers = null;<newline46mondego><newline46mondego>    DataBaseHelper helper = new DataBaseHelper(this);<newline46mondego><newline46mondego>    SQLiteDatabase db = helper.getReadableDatabase();<newline46mondego>    if (db != null) {<newline46mondego>        Cursor cursor = null;<newline46mondego>        try {<newline46mondego>            cursor = db.query(DataBaseHelper.TABLE_NAME, null, null, null, null, null, null);<newline46mondego>            if(cursor != null && cursor.moveToFirst()) {<newline46mondego>                do {<newline46mondego>                    final long id = cursor.getLong(cursor.getColumnIndex(Driver._ID));<newline46mondego>                    final String code = cursor.getString(cursor.getColumnIndex(Driver.CODE_CLOMN_NAME));<newline46mondego>                    final String name = cursor.getString(cursor.getColumnIndex(Driver.NAME_CLOMN_Name));<newline46mondego><newline46mondego>                    Driver driver = new Driver();<newline46mondego>                    driver.id = id;<newline46mondego>                    driver.code = code;<newline46mondego>                    driver.name = name;<newline46mondego><newline46mondego>                    if(drivers == null)<newline46mondego>                        drivers = new ArrayList<DataBaseHelper.Driver>();<newline46mondego><newline46mondego>                    drivers.add(driver);<newline46mondego>                } while(cursor.moveToNext());<newline46mondego>            }<newline46mondego>        } catch (SQLiteException e) {<newline46mondego>            e.printStackTrace();<newline46mondego>        } finally {<newline46mondego>            if(cursor != null)<newline46mondego>                cursor.close();<newline46mondego>        }<newline46mondego><newline46mondego>        db.close();<newline46mondego>    }<newline46mondego><newline46mondego>    return drivers;<newline46mondego>}<newline46mondego>"
"9823splitHere46","20296166splitHere46","JLabel"
"9824splitHere46","20296166splitHere46","BorderLayout"
"9825splitHere46","20296166splitHere46","JTextField field = new JTextField();<newline46mondego>field.setOpaque(false);<newline46mondego>JLabel label = new JLabel();<newline46mondego>label.setIcon(...);<newline46mondego>label.setLayout(new BorderLayout());<newline46mondego>label.add(field);<newline46mondego>"
"9826splitHere46","20296166splitHere46","field.setBackground(new Color(0, 0, 0, 0));"
"9827splitHere46","20296166splitHere46","field.setBorder(null);"
"9828splitHere46","20296166splitHere46","paintComponent"
"9829splitHere46","20296166splitHere46","super.paintComponent"
"9830splitHere46","20296166splitHere46","getUI().paint"
"9831splitHere46","20296166splitHere46","import java.awt.Color;<newline46mondego>import java.awt.Dimension;<newline46mondego>import java.awt.EventQueue;<newline46mondego>import java.awt.Graphics;<newline46mondego>import java.awt.Graphics2D;<newline46mondego>import java.awt.image.BufferedImage;<newline46mondego>import java.io.IOException;<newline46mondego>import javax.imageio.ImageIO;<newline46mondego>import javax.swing.JFrame;<newline46mondego>import javax.swing.JTextField;<newline46mondego>import javax.swing.UIManager;<newline46mondego>import javax.swing.UnsupportedLookAndFeelException;<newline46mondego>import javax.swing.border.EmptyBorder;<newline46mondego><newline46mondego>public class BackgroundTextField {<newline46mondego><newline46mondego>    public static void main(String[] args) {<newline46mondego>        new BackgroundTextField();<newline46mondego>    }<newline46mondego><newline46mondego>    public BackgroundTextField() {<newline46mondego>        EventQueue.invokeLater(new Runnable() {<newline46mondego>            @Override<newline46mondego>            public void run() {<newline46mondego>                try {<newline46mondego>                    UIManager.setLookAndFeel(UIManager.getSystemLookAndFeelClassName());<newline46mondego>                } catch (ClassNotFoundException | InstantiationException | IllegalAccessException | UnsupportedLookAndFeelException ex) {<newline46mondego>                    ex.printStackTrace();<newline46mondego>                }<newline46mondego><newline46mondego>                JFrame frame = new JFrame(<doubleQuotes46>Testing<doubleQuotes46>);<newline46mondego>                frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);<newline46mondego>                frame.add(new TextFieldBackground());<newline46mondego>                frame.pack();<newline46mondego>                frame.setLocationRelativeTo(null);<newline46mondego>                frame.setVisible(true);<newline46mondego>            }<newline46mondego>        });<newline46mondego>    }<newline46mondego><newline46mondego>    public class TextFieldBackground extends JTextField {<newline46mondego><newline46mondego>        private BufferedImage img;<newline46mondego><newline46mondego>        public TextFieldBackground() {<newline46mondego>            setColumns(10);<newline46mondego>            setOpaque(false);<newline46mondego>            setBorder(new EmptyBorder(2, 2, 2, 2));<newline46mondego>            setBackground(new Color(0, 0, 0, 0));<newline46mondego>            try {<newline46mondego>                img = ImageIO.read(getClass().getResource(<doubleQuotes46>/y9yBe.jpg<doubleQuotes46>));<newline46mondego>            } catch (IOException ex) {<newline46mondego>                ex.printStackTrace();<newline46mondego>            }<newline46mondego>        }<newline46mondego><newline46mondego>        @Override<newline46mondego>        public Dimension getPreferredSize() {<newline46mondego>            return img == null ? super.getPreferredSize() : new Dimension(img.getWidth(), img.getHeight());<newline46mondego>        }<newline46mondego><newline46mondego>        @Override<newline46mondego>        protected void paintComponent(Graphics g) {<newline46mondego>            Graphics2D g2d = (Graphics2D) g.create();<newline46mondego>            g2d.drawImage(img, 0, 0, this);<newline46mondego>            getUI().paint(g2d, this);<newline46mondego>            g2d.dispose();<newline46mondego>        }<newline46mondego><newline46mondego>    }<newline46mondego><newline46mondego>}<newline46mondego>"
"9832splitHere46","20296166splitHere46","for-loop"
"9833splitHere46","20296180splitHere46","Test test = new Test();<newline46mondego>"
"9834splitHere46","20296180splitHere46","Test"
"9835splitHere46","20296180splitHere46","Test"
"9836splitHere46","20296180splitHere46","MyInterface myInterface = test;<newline46mondego>"
"9837splitHere46","20296180splitHere46","MyInterface"
"9838splitHere46","20296180splitHere46","Test"
"9839splitHere46","20296180splitHere46","Reference               Object                     Reference<newline46mondego>    (Test)                 (Test)                   (MyInterface)<newline46mondego>     test  -----------> actual object  <-----------  myInterface     <newline46mondego>"
"9840splitHere46","20296220splitHere46","Data"
"9841splitHere46","20296220splitHere46","HttpServlet"
"9842splitHere46","20296220splitHere46","doGet()"
"9843splitHere46","20296220splitHere46","Servlet"
"9844splitHere46","20296220splitHere46","Servlet'"
"9845splitHere46","20296220splitHere46","service()"
"9846splitHere46","20296220splitHere46","HttpServlet#service()"
"9847splitHere46","20296220splitHere46","HttpServlet#doGet()"
"9848splitHere46","20296220splitHere46","HttpServlet"
"9849splitHere46","20296220splitHere46","protected void doGet(HttpServletRequest req, HttpServletResponse resp)<newline46mondego>    throws ServletException, IOException<newline46mondego>{<newline46mondego>    String protocol = req.getProtocol();<newline46mondego>    String msg = lStrings.getString(<doubleQuotes46>http.method_get_not_supported<doubleQuotes46>);<newline46mondego>    if (protocol.endsWith(<doubleQuotes46>1.1<doubleQuotes46>)) {<newline46mondego>        resp.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, msg);<newline46mondego>    } else {<newline46mondego>        resp.sendError(HttpServletResponse.SC_BAD_REQUEST, msg);<newline46mondego>    }<newline46mondego>}<newline46mondego>"
"9850splitHere46","20296220splitHere46","doGet()"
"9851splitHere46","20296220splitHere46","processRequest"
"9852splitHere46","20296220splitHere46","protected void doGet(HttpServletRequest req, HttpServletResponse resp)<newline46mondego>    throws ServletException, IOException<newline46mondego>{<newline46mondego>    processRequest(req, resp);<newline46mondego>}<newline46mondego>"
"9853splitHere46","20296307splitHere46","public void trickleUp(int index, Node bottom){       <newline46mondego>        int parent=(index-1)/2;<newline46mondego>        if(index>0 && heapArray[parent].getKey()>bottom.getKey()){<newline46mondego>            heapArray[index]=heapArray[parent];          <newline46mondego>            trickleUp(parent, bottom);<newline46mondego>        }   <newline46mondego>        else{<newline46mondego>          heapArray[index]=bottom;<newline46mondego>        }<newline46mondego>    } <newline46mondego>"
"9854splitHere46","20296389splitHere46","public static void setApplicationLook() {<newline46mondego>    Class aClass = classLoader.loadClass(<doubleQuotes46>com.apple.eawt.Application<doubleQuotes46>);<newline46mondego>    Method getApplication = aClass.getMethod(<doubleQuotes46>getApplication<doubleQuotes46>, null);<newline46mondego>    Object application = getApplication.invoke(null);<newline46mondego>    Method setDockIconImage = aClass.getMethod(<doubleQuotes46>setDockIconImage<doubleQuotes46>, Image.class);<newline46mondego>    setDockIconImage.invoke(application, Globals.iconImage);<newline46mondego>}<newline46mondego>"
"9855splitHere46","20296454splitHere46","Object"
"9856splitHere46","20296454splitHere46","Object"
"9857splitHere46","20296459splitHere46","// try this<newline46mondego>**DetailAct you send your dynamic data back to SherlockActivity like this way**<newline46mondego>private Intent getDefaultShareIntent() {<newline46mondego>        Intent intent = new Intent(this,SherlockActivity.class);<newline46mondego><newline46mondego>        intent.putExtra(Intent.EXTRA_TITLE, <doubleQuotes46>judul_HERE<doubleQuotes46>);<newline46mondego>        intent.putExtra(Intent.EXTRA_SUBJECT, <doubleQuotes46>tanggal_HERE<doubleQuotes46>);<newline46mondego>        intent.putExtra(Intent.EXTRA_TEXT, <doubleQuotes46>link_HERE<doubleQuotes46>);<newline46mondego>        setResult(RESULT_OK,intent);<newline46mondego>        finish();<newline46mondego>}<newline46mondego><newline46mondego>**SherlockActivity you get data from DetailAct like this way**<newline46mondego>@Override<newline46mondego>protected void onActivityResult(int requestCode, int resultCode, Intent data) {<newline46mondego>        super.onActivityResult(requestCode, resultCode, data);<newline46mondego>        if(resultCode==RESULT_OK && requestCode==500){<newline46mondego>            String judul = data.getStringExtra(Constants.TAG_Title);<newline46mondego>            String img = data.getStringExtra(Constants.TAG_Img);<newline46mondego>            String tanggal = data.getStringExtra(Constants.TAG_Created);<newline46mondego>            String desk = data.getStringExtra(Constants.TAG_Post);<newline46mondego>            String link = data.getStringExtra(Constants.TAG_Link);<newline46mondego>        }<newline46mondego>}<newline46mondego>"
"9858splitHere46","20296555splitHere46","ArrayList<Items>"
"9859splitHere46","20296555splitHere46","myList.add(myItem)"
"9860splitHere46","20296572splitHere46","/** A method to determine if area1 is entirely contained within area2. */<newline46mondego>public boolean doAreasEnclose(Area area1, Area area2) {<newline46mondego>    Area temp = new Area(area1);<newline46mondego>    temp.subtract(area2);<newline46mondego>    Rectangle r = temp.getBounds();<newline46mondego>    boolean enclosed = r.getWidth()==0 && r.getHeight()==0;<newline46mondego>    return enclosed;<newline46mondego>}<newline46mondego>"
"9861splitHere46","20296572splitHere46","GREEN"
"9862splitHere46","20296572splitHere46","ORANGE"
"9863splitHere46","20296572splitHere46","RED"
"9864splitHere46","20296572splitHere46","import java.awt.*;<newline46mondego>import java.awt.event.*;<newline46mondego>import java.awt.geom.*;<newline46mondego>import java.awt.image.BufferedImage;<newline46mondego>import javax.swing.*;<newline46mondego><newline46mondego>public class ShapeContainment {<newline46mondego><newline46mondego>    private BufferedImage img;<newline46mondego>    private Area[] obstacles = new Area[2];<newline46mondego>    private Area walls;<newline46mondego><newline46mondego>    int x; <newline46mondego>    int y;<newline46mondego>    int xDelta = 3;<newline46mondego>    int yDelta = 2;<newline46mondego><newline46mondego>    /** A method to determine if area1 is entirely contained within area2. */<newline46mondego>    public boolean doAreasEnclose(Area area1, Area area2) {<newline46mondego>        Area temp = new Area(area1);<newline46mondego>        temp.subtract(area2);<newline46mondego>        Rectangle r = temp.getBounds();<newline46mondego>        boolean enclosed = r.getWidth()==0 && r.getHeight()==0;<newline46mondego>        return enclosed;<newline46mondego>    }<newline46mondego><newline46mondego>    /** A method to determine if two instances of Area intersect */<newline46mondego>    public boolean doAreasCollide(Area area1, Area area2) {<newline46mondego>        boolean collide = false;<newline46mondego><newline46mondego>        Area collide1 = new Area(area1);<newline46mondego>        collide1.subtract(area2);<newline46mondego>        if (!collide1.equals(area1)) {<newline46mondego>            collide = true;<newline46mondego>        }<newline46mondego><newline46mondego>        Area collide2 = new Area(area2);<newline46mondego>        collide2.subtract(area1);<newline46mondego>        if (!collide2.equals(area2)) {<newline46mondego>            collide = true;<newline46mondego>        }<newline46mondego><newline46mondego>        return collide;<newline46mondego>    }<newline46mondego><newline46mondego>    ShapeContainment() {<newline46mondego>        int w = 400;<newline46mondego>        int h = 200;<newline46mondego>        img = new BufferedImage(w, h, BufferedImage.TYPE_INT_RGB);<newline46mondego>        final JLabel imageLabel = new JLabel(new ImageIcon(img));<newline46mondego>        x = w/2;<newline46mondego>        y = h/2;<newline46mondego><newline46mondego>        //circle <newline46mondego>        obstacles[0] = new Area(new Ellipse2D.Double(40, 40, 60, 60));<newline46mondego><newline46mondego>        int[] xTriangle = {330,360,345};<newline46mondego>        int[] yTriangle = {60,60,40};<newline46mondego>        //triangle <newline46mondego>        obstacles[1] = new Area(new Ellipse2D.Double(300, 100, 60, 60));<newline46mondego><newline46mondego>        walls = new Area(new Rectangle(0,0,w,h));<newline46mondego><newline46mondego>        ActionListener animate = new ActionListener() {<newline46mondego><newline46mondego>            @Override<newline46mondego>            public void actionPerformed(ActionEvent e) {<newline46mondego>                animate();<newline46mondego>                imageLabel.repaint();<newline46mondego>            }<newline46mondego>        };<newline46mondego>        Timer timer = new Timer(50, animate);<newline46mondego><newline46mondego>        timer.start();<newline46mondego>        JOptionPane.showMessageDialog(null, imageLabel);<newline46mondego>        timer.stop();<newline46mondego>    }<newline46mondego><newline46mondego>    public void animate() {<newline46mondego>        Graphics2D g = img.createGraphics();<newline46mondego>        g.setRenderingHint(<newline46mondego>                RenderingHints.KEY_ANTIALIASING, <newline46mondego>                RenderingHints.VALUE_ANTIALIAS_ON);<newline46mondego><newline46mondego>        g.setColor(Color.BLUE);<newline46mondego>        g.fillRect(0, 0, img.getWidth(), img.getHeight());<newline46mondego>        x+=xDelta;<newline46mondego>        y+=yDelta;<newline46mondego>        int s = 15;<newline46mondego>        Area player = new Area(new Ellipse2D.Double(x, y, s, s));<newline46mondego><newline46mondego>        // Acid test of edge collision;<newline46mondego>        if (doAreasCollide(player,walls)) {<newline46mondego>            if ( x+s>img.getWidth() || x<0 ) {<newline46mondego>                xDelta *= -1;<newline46mondego>            } <newline46mondego>            if(y+s>img.getHeight() || y<0 ) {<newline46mondego>                yDelta *= -1;<newline46mondego>            }<newline46mondego>        }<newline46mondego>        g.setColor(Color.ORANGE);<newline46mondego>        for (Area obstacle : obstacles) {<newline46mondego>            if (doAreasEnclose(player, obstacle)) {<newline46mondego>                g.setColor(Color.RED);<newline46mondego>            } else if (doAreasCollide(obstacle, player)) {<newline46mondego>                g.setColor(Color.ORANGE);<newline46mondego>            } else {<newline46mondego>                g.setColor(Color.GREEN);<newline46mondego>            }<newline46mondego>            g.fill(obstacle);<newline46mondego>        }<newline46mondego><newline46mondego>        g.setColor(Color.YELLOW);<newline46mondego>        g.fill(player);<newline46mondego><newline46mondego><newline46mondego>        g.dispose();<newline46mondego>    }<newline46mondego><newline46mondego>    public static void main(String[] args) {<newline46mondego>        Runnable r = new Runnable() {<newline46mondego><newline46mondego>            @Override<newline46mondego>            public void run() {<newline46mondego>                new ShapeContainment();<newline46mondego>            }<newline46mondego>        };<newline46mondego>        // Swing GUIs should be created and updated on the EDT<newline46mondego>        // http://docs.oracle.com/javase/tutorial/uiswing/concurrency/initial.html<newline46mondego>        SwingUtilities.invokeLater(r);<newline46mondego>    }<newline46mondego>}<newline46mondego>"
"9865splitHere46","20296707splitHere46","return"
"9866splitHere46","20296707splitHere46","ArrayList"
"9867splitHere46","20296751splitHere46","String id = line.replaceAll(<doubleQuotes46>.*?,.*?,(.*?),.*<doubleQuotes46>, <doubleQuotes46>$1<doubleQuotes46>);<newline46mondego>"
"9868splitHere46","20296784splitHere46","String.valueOf(tokenizer.nval)"
"9869splitHere46","20296784splitHere46","tokenizer.sval"
"9870splitHere46","20296799splitHere46","ServerSocket"
"9871splitHere46","20297122splitHere46","cookieExample"
"9872splitHere46","20297178splitHere46","enum TemplateEnum {<newline46mondego>    F1(new Class1()), F2(new Class2()),F3(new Class3());<newline46mondego>    /*<newline46mondego>    Related code like constructors<newline46mondego>    */<newline46mondego>}<newline46mondego>"
"9873splitHere46","20297178splitHere46","F1"
"9874splitHere46","20297178splitHere46","public static final TemplateEnum F1 = new TemplateEnum(new Class1()); <newline46mondego>"
"9875splitHere46","20297178splitHere46","new Class1()"
"9876splitHere46","20297207splitHere46","if(!sCurrentLine.equals(someInputString))<newline46mondego>   //write `someInputString` to file, because it differs with the one read from file<newline46mondego>"
"9877splitHere46","20297363splitHere46","Button yourButton= (Button) findViewById(R.id.yourbuttonId); // your created button<newline46mondego><newline46mondego>     //what happens when touching the specific Button<newline46mondego><newline46mondego>    yourButton.setOnClickListener(new view.OnClickListener() { <newline46mondego><newline46mondego><newline46mondego>    @Override<newline46mondego><newline46mondego>    public void onClick(View v) {<newline46mondego><newline46mondego>    Dialog obj = new Dialog (this);   // Define New Dialog Named obj<newline46mondego><newline46mondego>    obj.setTitle(<doubleQuotes46>your dialog title)<doubleQuotes46>);  //Naming The Dialog title<newline46mondego><newline46mondego>    TextView tv = new TextView (this); // Creating TextView object to use it inside the Dialog <newline46mondego><newline46mondego>    tv.setText(<doubleQuotes46>your Text to be shown in the Dialog<doubleQuotes46>); // Setting the TextView Text <newline46mondego><newline46mondego>    obj.setContentView(tv); // setting the TextView Content inside your Dialog<newline46mondego><newline46mondego>    obj.show(); // Method to show the dialog <newline46mondego><newline46mondego>        // TODO Auto-generated method stub<newline46mondego><newline46mondego>    }<newline46mondego>});<newline46mondego>"
"9878splitHere46","20297388splitHere46","String regex = <doubleQuotes46>^(?<piece>q|k|b|p|n|r+)(?<color>l|d)(?<x>\\w)(?<y>\\d)$<doubleQuotes46>;<newline46mondego>"
"9879splitHere46","20297388splitHere46","^"
"9880splitHere46","20297388splitHere46","$"
"9881splitHere46","20297388splitHere46",".trim()"
"9882splitHere46","20297388splitHere46","String s = br.readLine().trim().toLowerCase();<newline46mondego>"
"9883splitHere46","20297388splitHere46","String regex = <doubleQuotes46>^\\s*(?<piece>q|k|b|p|n|r+)(?<color>l|d)(?<x>\\w)(?<y>\\d)\\s*$<doubleQuotes46>;<newline46mondego>"
"9884splitHere46","20297400splitHere46","x"
"9885splitHere46","20297400splitHere46","myObj"
"9886splitHere46","20297509splitHere46","OnLongClickListener"
"9887splitHere46","20297509splitHere46","onCreate()"
"9888splitHere46","20297509splitHere46","@Override<newline46mondego>public void onCreate (Bundle savedInstanceState)<newline46mondego>{<newline46mondego>    super.onCreate(savedInstanceState);<newline46mondego>    ...<newline46mondego>    ...<newline46mondego>    listView = (ListView) findViewById(R.id.listView1);<newline46mondego>    registerForContextMenu(listView);<newline46mondego>}<newline46mondego>"
"9889splitHere46","20297509splitHere46","OnLongClickListener"
"9890splitHere46","20297509splitHere46","@Override<newline46mondego>public void onCreateContextMenu(ContextMenu menu, View v, ContextMenu.ContextMenuInfo menuInfo)<newline46mondego>{<newline46mondego>    super.onCreateContextMenu(menu, v, menuInfo);<newline46mondego>    MenuInflater inflater = getMenuInflater();<newline46mondego>    inflater.inflate(R.menu.optmenu, menu);<newline46mondego>}<newline46mondego><newline46mondego>@Override<newline46mondego>public boolean onContextItemSelected(MenuItem item)<newline46mondego>{<newline46mondego>    AdapterView.AdapterContextMenuInfo info = (AdapterView.AdapterContextMenuInfo) item.getMenuInfo();<newline46mondego>    switch(item.getItemId())<newline46mondego>    {<newline46mondego>        case R.id.item3:<newline46mondego>            RemoveTask(info.position);<newline46mondego>            break;<newline46mondego>    }<newline46mondego><newline46mondego>    return true;<newline46mondego>}<newline46mondego>"
"9891splitHere46","20297551splitHere46","ProjectRoot<newline46mondego>         src<newline46mondego>         build<newline46mondego>         text.txt<newline46mondego>"
"9892splitHere46","20297660splitHere46","static"
"9893splitHere46","20297660splitHere46","public class FinalTest {<newline46mondego><newline46mondego>    private static final int INT = test();<newline46mondego><newline46mondego>    private static int test() {<newline46mondego>        return 5;<newline46mondego>    }<newline46mondego>}<newline46mondego>"
"9894splitHere46","20297660splitHere46","public class FinalTest {<newline46mondego><newline46mondego>    private static final int INT;<newline46mondego><newline46mondego>    static {<newline46mondego>        INT = test();<newline46mondego>    }<newline46mondego><newline46mondego>    private static int test() {<newline46mondego>        return 5;<newline46mondego>    }<newline46mondego>}<newline46mondego>"
"9895splitHere46","20297660splitHere46","test()"
"9896splitHere46","20297774splitHere46","new FileInputStream"
"9897splitHere46","20297802splitHere46","."
"9898splitHere46","20297802splitHere46","*"
"9899splitHere46","20297802splitHere46","C:/ Users/matt/Documents/.*/xyz123<newline46mondego>"
"9900splitHere46","20297802splitHere46","*"
"9901splitHere46","20297802splitHere46","."
"9902splitHere46","20297878splitHere46","Cipher"
"9903splitHere46","20297878splitHere46","public static void main(String[] args) throws Exception {<newline46mondego><newline46mondego>  Random random = new Random();<newline46mondego>  byte[] key = new byte[32];<newline46mondego>  random.nextBytes(key);<newline46mondego><newline46mondego>  byte[] plaintext = new byte[100];<newline46mondego>  random.nextBytes(plaintext);<newline46mondego><newline46mondego>  Cipher enc = aes_Gen_with_Key(key);<newline46mondego><newline46mondego>  byte[] ciphertext = enc.doFinal(plaintext);<newline46mondego>  byte[] iv = enc.getIV();<newline46mondego><newline46mondego>  Cipher dec = aes_Dec_with_Key(key, iv);<newline46mondego><newline46mondego>  byte[] recoveredPlaintext = dec.doFinal(ciphertext);<newline46mondego><newline46mondego>  System.out.println(Arrays.equals(plaintext, recoveredPlaintext));    <newline46mondego>}<newline46mondego>"
"9904splitHere46","20297907splitHere46","<meta-data android:name=<doubleQuotes46>com.google.android.gms.version<doubleQuotes46><newline46mondego>android:value=<doubleQuotes46>@integer/google_play_services_version<doubleQuotes46> /><newline46mondego>"
"9905splitHere46","20297918splitHere46","if(currentFile == null) {<newline46mondego>    // Handle if new file<newline46mondego>} else {<newline46mondego>    // Handle an existing file<newline46mondego>}<newline46mondego>"
"9906splitHere46","20297918splitHere46","saveFile(currentFile, field.getText());<newline46mondego>"
"9907splitHere46","20297918splitHere46","if(currentFile == null)"
"9908splitHere46","20297918splitHere46","saveFile(null, field.getText())"
"9909splitHere46","20297918splitHere46","catch(Exception e) {<newline46mondego><newline46mondego>}<newline46mondego>"
"9910splitHere46","20297937splitHere46","java -cp '.' -jar MyProject.jar myPackage.Main --a=<doubleQuotes46>value1<doubleQuotes46>"
"9911splitHere46","20298055splitHere46","<param name=<doubleQuotes46>ignore_stderr<doubleQuotes46> value=<doubleQuotes46>1<doubleQuotes46> /><newline46mondego>"
"9912splitHere46","20298055splitHere46","<param name=<doubleQuotes46>scheduler_order_ignore_stderr<doubleQuotes46> value=<doubleQuotes46>1<doubleQuotes46>/><newline46mondego>"
"9913splitHere46","20298284splitHere46","java -Xmx256m -jar ~/.codenameone/designer_1.jar<newline46mondego>"
"9914splitHere46","20298327splitHere46","javax.xml.bind.DatatypeConverter"
"9915splitHere46","20298653splitHere46","toString()"
"9916splitHere46","20298653splitHere46","[I"
"9917splitHere46","20298653splitHere46","@"
"9918splitHere46","20298653splitHere46","7a67f797"
"9919splitHere46","20298653splitHere46","toString()"
"9920splitHere46","20298653splitHere46","System.out.println()"
"9921splitHere46","20298653splitHere46","java.util.Arrays.toString(array)"
"9922splitHere46","20298665splitHere46","f.setLayout(new GridLayout(2,1,10,10));<newline46mondego>f.add(buttons);<newline46mondego>f.add(textArea);<newline46mondego>"
"9923splitHere46","20298665splitHere46","f.setLayout(new BorderLayout(3,3));<newline46mondego>f.add(buttons, BorderLayout.PAGE_START);<newline46mondego>f.add(textArea);<newline46mondego>"
"9924splitHere46","20298874splitHere46","Dog dog2 = dog1;"
"9925splitHere46","20298874splitHere46","dog2"
"9926splitHere46","20298874splitHere46","dog1"
"9927splitHere46","20298874splitHere46","dog1.shower();"
"9928splitHere46","20298874splitHere46","dog2.shower();"
"9929splitHere46","20298874splitHere46","shower()"
"9930splitHere46","20298874splitHere46","Dog"
"9931splitHere46","20298874splitHere46","Dog dog2 = new Dog();<newline46mondego>"
"9932splitHere46","20298874splitHere46","dog2"
"9933splitHere46","20298874splitHere46","Dog"
"9934splitHere46","20298874splitHere46","dog2"
"9935splitHere46","20298874splitHere46","Dog"
"9936splitHere46","20298874splitHere46","dog1"
"9937splitHere46","20298874splitHere46","// dog2 refers to new copy of `Dog`, identical to original dog1<newline46mondego>Dog dog2 = new Dog(dog1); <newline46mondego>"
"9938splitHere46","20298874splitHere46","Dog"
"9939splitHere46","20298874splitHere46","// dog2 refers to new copy of `Dog`, identical to original dog1<newline46mondego>Dog dog2 = dog1.clone(); <newline46mondego>"
"9940splitHere46","20298927splitHere46","SQLiteOpenHelper"
"9941splitHere46","20298927splitHere46","onUpgrade"
"9942splitHere46","20298927splitHere46","onUpgrade"
"9943splitHere46","20298927splitHere46","SQLiteOpenHelper"
"9944splitHere46","20298984splitHere46","if(e.getSource() == <doubleQuotes46>loginButton<doubleQuotes46>)"
"9945splitHere46","20298984splitHere46","if(e.getSource() == loginButton)"
"9946splitHere46","20298984splitHere46","if(e.getActionCommand().equals(<doubleQuotes46>Login<doubleQuotes46>)){<newline46mondego><newline46mondego>}<newline46mondego>"
"9947splitHere46","20298984splitHere46","loginButton.addActionListener(new ActionListener() {<newline46mondego><newline46mondego>        @Override<newline46mondego>        public void actionPerformed(ActionEvent e) {<newline46mondego>            // your action.<newline46mondego><newline46mondego>        }<newline46mondego>    }); <newline46mondego>"
"9948splitHere46","20299000splitHere46","String[] out2 = out.split(<doubleQuotes46>[\\r\\n]+<doubleQuotes46>);<newline46mondego>"
"9949splitHere46","20299000splitHere46","readFileAsString"
"9950splitHere46","20299000splitHere46","public static String readFileAsString(String file) {<newline46mondego>   return new Scanner(new File(file)).useDelimiter(<doubleQuotes46>\\Z<doubleQuotes46>).next()'<newline46mondego>}<newline46mondego>"
"9951splitHere46","20299000splitHere46","public static String readFileAsString(List<String> Lines, String file) {<newline46mondego>    String line, results = <doubleQuotes46><doubleQuotes46>;<newline46mondego>    try {<newline46mondego>        BufferedReader reader = new BufferedReader(new FileReader(file));<newline46mondego>        // readLine() zwraca nulla na koncu pliku, stad zabezpieczenie<newline46mondego>        while ((line = reader.readLine()) != null) {<newline46mondego>            results += line;<newline46mondego>            lines.add(line);<newline46mondego>        }<newline46mondego>        reader.close();<newline46mondego>        // return results;<newline46mondego>    } catch (IOException e) {<newline46mondego>        System.err.println(<doubleQuotes46>Error<doubleQuotes46>);<newline46mondego>    }<newline46mondego>    return results;<newline46mondego>}<newline46mondego>"
"9952splitHere46","20299000splitHere46","ArrayList<Trojka> wynikArrList = new ArrayList<Trojka>();<newline46mondego>String wynik = readFileAsString(wynikArrList, <doubleQuotes46>a.txt<doubleQuotes46>);<newline46mondego>"
"9953splitHere46","20299049splitHere46","String[] fields = values.split(<doubleQuotes46> <doubleQuotes46>, 14);<newline46mondego>"
"9954splitHere46","20299095splitHere46","Enum"
"9955splitHere46","20299095splitHere46","final"
"9956splitHere46","20299261splitHere46","char[] pswd = pswdTextField.getPassword();<newline46mondego>  String password=new String(pswd);<newline46mondego>"
"9957splitHere46","20299261splitHere46","System.out.print"
"9958splitHere46","20299261splitHere46","System.out.print(pswd); // It override ...print(char[]) method<newline46mondego>                          // without concat with another String.<newline46mondego>"
"9959splitHere46","20299261splitHere46","char[]"
"9960splitHere46","20299261splitHere46","String"
"9961splitHere46","20299261splitHere46","Object.toString()"
"9962splitHere46","20299261splitHere46","System.out.print(<doubleQuotes46>Password: <doubleQuotes46> +pswd);// It will print like Password: [C@d5c0f9<newline46mondego>"
"9963splitHere46","20299274splitHere46","(numberInWords + 1)"
"9964splitHere46","20299274splitHere46","if (num2 == 5) {<newline46mondego>    numberAndDecimal = num1 + <doubleQuotes46>.<doubleQuotes46> + num2 + <doubleQuotes46> was rounded up, it's now <doubleQuotes46> +  (num1 + 1);<newline46mondego>}<newline46mondego>if (num2 == 6) {<newline46mondego>    numberAndDecimal = num1 + <doubleQuotes46>.<doubleQuotes46> + num2 + <doubleQuotes46> was rounded up, it's now <doubleQuotes46> + (num1 + 1);<newline46mondego>}<newline46mondego>"
"9965splitHere46","20299274splitHere46","public static String EnglishName(int num1, int num2) {<newline46mondego><newline46mondego>    String numberAndDecimal = <doubleQuotes46><doubleQuotes46>;<newline46mondego><newline46mondego>    if (num2 == 3) {<newline46mondego>        numberAndDecimal = num1 + <doubleQuotes46>.<doubleQuotes46> + num2 + <doubleQuotes46> not rounded up its still <doubleQuotes46><newline46mondego>                + translate(num1);<newline46mondego>    }<newline46mondego>    if (num2 == 4) {<newline46mondego>        numberAndDecimal = num1 + <doubleQuotes46>.<doubleQuotes46> + num2 + <doubleQuotes46> not rounded up its still <doubleQuotes46><newline46mondego>                + translate(num1);<newline46mondego>    }<newline46mondego>    if (num2 == 5) {<newline46mondego>        numberAndDecimal = num1 + <doubleQuotes46>.<doubleQuotes46> + num2 + <doubleQuotes46> was rounded up, it's now <doubleQuotes46><newline46mondego>                + translate(num1 + 1);<newline46mondego>    }<newline46mondego>    if (num2 == 6) {<newline46mondego>        numberAndDecimal = num1 + <doubleQuotes46>.<doubleQuotes46> + num2 + <doubleQuotes46> was rounded up, it's now <doubleQuotes46><newline46mondego>                + translate(num1 + 1);<newline46mondego>    }<newline46mondego><newline46mondego>    return numberAndDecimal;<newline46mondego>}<newline46mondego><newline46mondego>public static String translate(int num1) {<newline46mondego><newline46mondego>    String numberInWords = <doubleQuotes46><doubleQuotes46>;<newline46mondego><newline46mondego>    if (num1 == 1) {<newline46mondego>        numberInWords = <doubleQuotes46>one<doubleQuotes46>;<newline46mondego>    }<newline46mondego>    if (num1 == 2) {<newline46mondego>        numberInWords = <doubleQuotes46>two<doubleQuotes46>;<newline46mondego>    }<newline46mondego>    if (num1 == 3) {<newline46mondego>        numberInWords = <doubleQuotes46>three<doubleQuotes46>;<newline46mondego>    }<newline46mondego>    if (num1 == 4) {<newline46mondego>        numberInWords = <doubleQuotes46>four<doubleQuotes46>;<newline46mondego>    }<newline46mondego>    if (num1 == 5) {<newline46mondego>        numberInWords = <doubleQuotes46>five<doubleQuotes46>;<newline46mondego>    }<newline46mondego><newline46mondego>    return numberInWords;<newline46mondego>}<newline46mondego>"
"9966splitHere46","20299274splitHere46","englishName"
"9967splitHere46","20299274splitHere46","EnglishName"
"9968splitHere46","20299459splitHere46","pw.println(i);<newline46mondego> pw.flush();<newline46mondego>"
"9969splitHere46","20299681splitHere46","subgrid"
"9970splitHere46","20299681splitHere46","int cellHeight, cellWidth, size,EMPTY = 0;<newline46mondego>int [][] sudGrid = new int[cellHeight * cellWidth][cellHeight * cellWidth];<newline46mondego>"
"9971splitHere46","20299681splitHere46","cellHeight"
"9972splitHere46","20299681splitHere46","cellWidth"
"9973splitHere46","20299681splitHere46","new int[0*0][0*0]"
"9974splitHere46","20299681splitHere46","public Sudoku(int a, int b, int array[][]){<newline46mondego>    cellHeight = a; // Changing these two instance variables will *NOT*<newline46mondego>    cellWidth = b;  // retrofit your subGrid to a new size.<newline46mondego>    size = cellHeight*cellWidth;<newline46mondego>    subGrid = new int[size][size];<newline46mondego>    for(int i = 0; i<size; i++){<newline46mondego>        for(int j = 0; j<size; j++){<newline46mondego>            int temp = array[i][j];<newline46mondego>            sudGrid[i][j] = temp;<newline46mondego>        }<newline46mondego>    }<newline46mondego>}<newline46mondego>"
"9975splitHere46","20299839splitHere46","<doubleQuotes46>3/5/<doubleQuotes46>.split(<doubleQuotes46>/<doubleQuotes46>).length"
"9976splitHere46","20299839splitHere46","while (s.startsWith(<doubleQuotes46>/<doubleQuotes46>))<newline46mondego>  s = s.substring(1);<newline46mondego><newline46mondego>while (s.endsWith(<doubleQuotes46>/<doubleQuotes46>))<newline46mondego>  s = s.substring(0, s.length()-1);<newline46mondego>"
"9977splitHere46","20299839splitHere46","if (s.startsWith(<doubleQuotes46>/<doubleQuotes46>) || s.endsWith(<doubleQuotes46>/<doubleQuotes46>))<newline46mondego>   throw new SomeError();<newline46mondego>"
"9978splitHere46","20299874splitHere46","ArrayList"
"9979splitHere46","20299874splitHere46","public ArrayList(int initialCapacity) <newline46mondego>{<newline46mondego>     super();<newline46mondego><newline46mondego>     if (initialCapacity < 0)<newline46mondego>          throw new IllegalArgumentException(<doubleQuotes46>Illegal Capacity: <doubleQuotes46>+ initialCapacity);<newline46mondego>     this.elementData = new Object[initialCapacity];<newline46mondego>}<newline46mondego>"
"9980splitHere46","20299874splitHere46","add(int, E)"
"9981splitHere46","20299874splitHere46","public void add(int index, E element) {<newline46mondego>     rangeCheckForAdd(index);<newline46mondego>     ensureCapacity(size+1);  // Increments modCount!!<newline46mondego>     System.arraycopy(elementData, index, elementData, index + 1, size - index);<newline46mondego>     elementData[index] = element;<newline46mondego>     size++;<newline46mondego> }<newline46mondego>"
"9982splitHere46","20299874splitHere46","add"
"9983splitHere46","20299874splitHere46","rangeCheckForAdd(int)"
"9984splitHere46","20299874splitHere46","private void rangeCheckForAdd(int index) {<newline46mondego>     if (index > size || index < 0)<newline46mondego>         throw new IndexOutOfBoundsException(outOfBoundsMsg(index));<newline46mondego> }<newline46mondego>"
"9985splitHere46","20299874splitHere46","Object[]"
"9986splitHere46","20299874splitHere46","size"
"9987splitHere46","20299874splitHere46","rangeCheckForAdd"
"9988splitHere46","20299874splitHere46","IndexOutOfBoundsException"
"9989splitHere46","20299874splitHere46","size"
"9990splitHere46","20299874splitHere46","ArrayList"
"9991splitHere46","20299874splitHere46","add(int, E)"
"9992splitHere46","20299874splitHere46","add(E e)"
"9993splitHere46","20299878splitHere46","New > Java Project"
"9994splitHere46","20299878splitHere46","Next >"
"9995splitHere46","20299878splitHere46","Source"
"9996splitHere46","20299878splitHere46","src"
"9997splitHere46","20299878splitHere46","Remove source folder 'src' from build path"
"9998splitHere46","20299878splitHere46","Create new source folder"
"9999splitHere46","20299878splitHere46","src/main/java"
"10000splitHere46","20299878splitHere46","src/test/java"
"10001splitHere46","20299878splitHere46","Properties > Java Build Path > Source tab"
"10002splitHere46","20299910splitHere46","@Delegate"
"10003splitHere46","20299946splitHere46","JFrame"
"10004splitHere46","20299946splitHere46","paintComponent"
"10005splitHere46","20299946splitHere46","JPanel"
"10006splitHere46","20299946splitHere46","JFrame"
"10007splitHere46","20299946splitHere46","public class Main exends JFrame{<newline46mondego>    MyPanel panel;<newline46mondego>    private BufferedImage img;<newline46mondego><newline46mondego>    public Main(){<newline46mondego>        try {<newline46mondego>            img = ImageIO.read(new File(<doubleQuotes46>C:\\Users\\Ryan T\\Desktop\\wNSE6p7.jpg<doubleQuotes46>));<newline46mondego>        } catch(IOException e) {<newline46mondego>            e.printStackTrace();<newline46mondego>        }<newline46mondego>        panel= new MyPanel();<newline46mondego>        add(panel);<newline46mondego>    }    <newline46mondego><newline46mondego>    private class MyPanel extends JPanel{<newline46mondego>        protected void paintComponent(Graphics g) {<newline46mondego>            super.paintComponent(g);<newline46mondego>            g.drawImage(img, 0, 0, getWidth(), getHeight(), this);<newline46mondego>        }<newline46mondego>    }<newline46mondego>} <newline46mondego>"
"10008splitHere46","20299946splitHere46","paintComponent"
"10009splitHere46","20299946splitHere46","JComponent"
"10010splitHere46","20299946splitHere46","JFrame"
"10011splitHere46","20299946splitHere46","JComponent"
"10012splitHere46","20299946splitHere46","Container"
"10013splitHere46","20299947splitHere46","#ifdef"
"10014splitHere46","20299947splitHere46","if(false)"
"10015splitHere46","20300015splitHere46","<br[^>]*>"
"10016splitHere46","20300015splitHere46","<br"
"10017splitHere46","20300015splitHere46",">"
"10018splitHere46","20300015splitHere46",">"
"10019splitHere46","20300015splitHere46","<br*>"
"10020splitHere46","20300015splitHere46","<b"
"10021splitHere46","20300015splitHere46","r"
"10022splitHere46","20300015splitHere46",">"
"10023splitHere46","20300193splitHere46","request.addAttribute(<doubleQuotes46>setting<doubleQuotes46>,set);"
"10024splitHere46","20300193splitHere46","<%=((Setting)request.getAttribute(<doubleQuotes46>setting<doubleQuotes46>)).getUrl()%><newline46mondego>"
"10025splitHere46","20300193splitHere46","${requestScope.setting.url}<newline46mondego>"
"10026splitHere46","20300196splitHere46","void MainScene::CreateBody()<newline46mondego>{<newline46mondego>   Vec2 position(0,0);<newline46mondego><newline46mondego>   // Create the body.<newline46mondego>   b2BodyDef bodyDef;<newline46mondego>   bodyDef.position = position;<newline46mondego>   bodyDef.type = b2_dynamicBody;<newline46mondego>   _body = _world->CreateBody(&bodyDef);<newline46mondego>   assert(_body != NULL);<newline46mondego><newline46mondego>   // Now attach fixtures to the body.<newline46mondego>   FixtureDef fixtureDef;<newline46mondego>   PolygonShape polyShape;<newline46mondego>   vector<Vec2> vertices;<newline46mondego><newline46mondego>   const float32 VERT_SCALE = .5;<newline46mondego>   fixtureDef.shape = &polyShape;<newline46mondego>   fixtureDef.density = 1.0;<newline46mondego>   fixtureDef.friction = 1.0;<newline46mondego>   fixtureDef.isSensor = false;<newline46mondego><newline46mondego>   // Main Box<newline46mondego>   vertices.clear();<newline46mondego>   vertices.push_back(Vec2(1*VERT_SCALE,1*VERT_SCALE));<newline46mondego>   vertices.push_back(Vec2(-1*VERT_SCALE,1*VERT_SCALE));<newline46mondego>   vertices.push_back(Vec2(-1*VERT_SCALE,-1*VERT_SCALE));<newline46mondego>   vertices.push_back(Vec2(1*VERT_SCALE,-1*VERT_SCALE));<newline46mondego>   polyShape.Set(&vertices[0],vertices.size());<newline46mondego>   _body->CreateFixture(&fixtureDef);<newline46mondego>   _fixturePositions.push_back(CalculateAverage(vertices));<newline46mondego><newline46mondego>   // Down one<newline46mondego>   vertices.clear();<newline46mondego>   vertices.push_back(Vec2(1*VERT_SCALE,-1*VERT_SCALE));<newline46mondego>   vertices.push_back(Vec2(-1*VERT_SCALE,-1*VERT_SCALE));<newline46mondego>   vertices.push_back(Vec2(-1*VERT_SCALE,-3*VERT_SCALE));<newline46mondego>   vertices.push_back(Vec2(1*VERT_SCALE,-3*VERT_SCALE));<newline46mondego>   polyShape.Set(&vertices[0],vertices.size());<newline46mondego>   _body->CreateFixture(&fixtureDef);<newline46mondego>   _fixturePositions.push_back(CalculateAverage(vertices));<newline46mondego><newline46mondego>   // Up One<newline46mondego>   vertices.clear();<newline46mondego>   vertices.push_back(Vec2(1*VERT_SCALE,3*VERT_SCALE));<newline46mondego>   vertices.push_back(Vec2(-1*VERT_SCALE,3*VERT_SCALE));<newline46mondego>   vertices.push_back(Vec2(-1*VERT_SCALE,1*VERT_SCALE));<newline46mondego>   vertices.push_back(Vec2(1*VERT_SCALE,1*VERT_SCALE));<newline46mondego>   polyShape.Set(&vertices[0],vertices.size());<newline46mondego>   _body->CreateFixture(&fixtureDef);<newline46mondego>   _fixturePositions.push_back(CalculateAverage(vertices));<newline46mondego><newline46mondego>   // T Left Top<newline46mondego>   vertices.clear();<newline46mondego>   vertices.push_back(Vec2(-1*VERT_SCALE,3*VERT_SCALE));<newline46mondego>   vertices.push_back(Vec2(-3*VERT_SCALE,3*VERT_SCALE));<newline46mondego>   vertices.push_back(Vec2(-3*VERT_SCALE,1*VERT_SCALE));<newline46mondego>   vertices.push_back(Vec2(-1*VERT_SCALE,1*VERT_SCALE));<newline46mondego>   polyShape.Set(&vertices[0],vertices.size());<newline46mondego>   _body->CreateFixture(&fixtureDef);<newline46mondego>   _fixturePositions.push_back(CalculateAverage(vertices));<newline46mondego><newline46mondego>   // T Right Top<newline46mondego>   vertices.clear();<newline46mondego>   vertices.push_back(Vec2(3*VERT_SCALE,3*VERT_SCALE));<newline46mondego>   vertices.push_back(Vec2(1*VERT_SCALE,3*VERT_SCALE));<newline46mondego>   vertices.push_back(Vec2(1*VERT_SCALE,1*VERT_SCALE));<newline46mondego>   vertices.push_back(Vec2(3*VERT_SCALE,1*VERT_SCALE));<newline46mondego>   polyShape.Set(&vertices[0],vertices.size());<newline46mondego>   _body->CreateFixture(&fixtureDef);<newline46mondego>   _fixturePositions.push_back(CalculateAverage(vertices));<newline46mondego><newline46mondego>   _body->SetAngularVelocity(M_PI/8);<newline46mondego>}<newline46mondego>"
"10027splitHere46","20300196splitHere46","void MainScene::CreateSprites()<newline46mondego>{<newline46mondego>   Viewport& vp = Viewport::Instance();<newline46mondego><newline46mondego>   for(int idx = 0; idx < _fixturePositions.size(); idx++)<newline46mondego>   {<newline46mondego>      CCSprite* sprite = CCSprite::create(<doubleQuotes46>arrow.png<doubleQuotes46>);<newline46mondego>       sprite->setScale(1.0*vp.GetPTMRatio()/128);<newline46mondego>      _fixtureSprites.push_back(sprite);<newline46mondego>      addChild(sprite);<newline46mondego>   }<newline46mondego>}<newline46mondego>"
"10028splitHere46","20300196splitHere46","void MainScene::UpdateSprites()<newline46mondego>{<newline46mondego>   for(int idx = 0; idx < _fixturePositions.size(); idx++)<newline46mondego>   {<newline46mondego>      CCPoint spritePosition = Viewport::Instance().Convert(_body->GetWorldPoint(_fixturePositions[idx]));<newline46mondego>      _fixtureSprites[idx]->setPosition(spritePosition);<newline46mondego>      float32 bodyAngle = _body->GetAngle();<newline46mondego>      bodyAngle = MathUtilities::AdjustAngle(bodyAngle);<newline46mondego>      _fixtureSprites[idx]->setRotation(-CC_RADIANS_TO_DEGREES(bodyAngle));<newline46mondego>   }<newline46mondego>}<newline46mondego>"
"10029splitHere46","20300209splitHere46","readObject()"
"10030splitHere46","20300209splitHere46","readObject()"
"10031splitHere46","20300209splitHere46","Object obj = in.readObject();<newline46mondego>if (obj instanceof String[]) {<newline46mondego>    a = (String[]) obj;<newline46mondego>}<newline46mondego>"
"10032splitHere46","20300209splitHere46","readObject()"
"10033splitHere46","20300209splitHere46","obj"
"10034splitHere46","20300387splitHere46","private class WrapperMap<K> extends HashMap<K, Integer>{<newline46mondego>@Override<newline46mondego>public Integer get(Object key){<newline46mondego>    if (super.containsKey(key))<newline46mondego>        return super.get(key);<newline46mondego>    else{<newline46mondego>        return 1;<newline46mondego>    }<newline46mondego>}<newline46mondego>}<newline46mondego>"
"10035splitHere46","20300387splitHere46","WrapperMap"
"10036splitHere46","20300387splitHere46","Integer"
"10037splitHere46","20300387splitHere46","WrapperMap<K, Integer>"
"10038splitHere46","20300387splitHere46","S"
"10039splitHere46","20300387splitHere46","HashMap<K,S>"
"10040splitHere46","20300387splitHere46","Integer"
"10041splitHere46","20300387splitHere46","WrapperMap<K>"
"10042splitHere46","20300510splitHere46","//temp extends INTEGER_MAX so it gets negative.<newline46mondego>int temp = (9 + 13) * (9 + 1594) * (2157 + 13) * (2157 + 1594));<newline46mondego>double test = = (double) temp;<newline46mondego>"
"10043splitHere46","20300512splitHere46","contents.add(new JLabel(Integer.toString(m)));"
"10044splitHere46","20300512splitHere46","contents.add(new JLabel(<doubleQuotes46><doubleQuotes46> + m));"
"10045splitHere46","20300536splitHere46","select new map (device.model as model, vendor.vendor as vendor) from Model model, Vendor vendor where device.vendor = vendor<newline46mondego>"
"10046splitHere46","20300536splitHere46","public class Device implements java.io.Serializable {<newline46mondego>    ...<newline46mondego>    private Vendor vendor;<newline46mondego>    ...<newline46mondego><newline46mondego>    @ManyToOne<newline46mondego>    @JoinColumn(name=<doubleQuotes46>vendor_id<doubleQuotes46>, nullable=false)<newline46mondego>    public int getVendorId() {<newline46mondego>        return this.vendorId;<newline46mondego>    }<newline46mondego>}<newline46mondego>"
"10047splitHere46","20300632splitHere46","@Override<newline46mondego>public void onDismiss(ListView listView, int[] reverseSortedPositions) {<newline46mondego>    if(listView != null && reverseSortedPositions != null) {<newline46mondego>       for (int position : reverseSortedPositions) {<newline46mondego>          View child = listView.getChildAt(position);<newline46mondego>          if(child != null) {<newline46mondego>              TextView text = (TextView) child.findViewById(R.id.Details);<newline46mondego>              String s = text.getText().toString();<newline46mondego>              Toast.makeText(getApplicationContext(), s, Toast.LENGTH_LONG).show();<newline46mondego>          }<newline46mondego>       }<newline46mondego>    }<newline46mondego>   inAdapter.notifyDataSetChanged();<newline46mondego>}<newline46mondego>"
"10048splitHere46","20300686splitHere46","@Column(name = <doubleQuotes46>condition<doubleQuotes46>)<newline46mondego>"
"10049splitHere46","20300686splitHere46","@Column(name = <doubleQuotes46>`condition`<doubleQuotes46>)<newline46mondego>"
"10050splitHere46","20300686splitHere46","@Column(name = <doubleQuotes46>\<doubleQuotes46>condition\<doubleQuotes46><doubleQuotes46>)<newline46mondego>"
"10051splitHere46","20300686splitHere46","CONDITION"
"10052splitHere46","20300714splitHere46","class MyHighlightPainter extends DefaultHighlighter.DefaultHighlightPainter {<newline46mondego>        public MyHighlightPainter(Color color) {<newline46mondego>            super(color);<newline46mondego>        }   <newline46mondego><newline46mondego>    Highlighter.HighlightPainter myHighlightPainter = new MyHighlightPainter(Color.yellow);<newline46mondego><newline46mondego>    public void highlightt(JTextArea textComp, String pattern) {<newline46mondego>        try {<newline46mondego>            Highlighter hilite = textComp.getHighlighter();<newline46mondego>            Document doc = textComp.getDocument();<newline46mondego>            String text = doc.getText(0, doc.getLength());<newline46mondego>            int pos = 0;<newline46mondego><newline46mondego>            while((pos=text.toUpperCase().indexOf(pattern.toUpperCase(),pos))>=0) {<newline46mondego><newline46mondego>                hilite.addHighlight(pos, pos+pattern.length(), myHighlightPainter);<newline46mondego>                pos +=pattern.length();<newline46mondego>            }<newline46mondego>        } catch(Exception e) {<newline46mondego>            e.printStackTrace();<newline46mondego>        }   <newline46mondego>    }<newline46mondego><newline46mondego>} // close class<newline46mondego>"
"10053splitHere46","20300745splitHere46","if(buttonKLick.getSource() == this.btnStart){<newline46mondego>    btnStart.setEnabled(false);<newline46mondego>    new Thread(new Runnable() {<newline46mondego>      public void run() {<newline46mondego>        try {<newline46mondego>          Funktionen.fileFinder(Pfad); //The Function<newline46mondego>        } catch (FileNotFoundException e) {<newline46mondego>          e.printStackTrace();<newline46mondego>        }<newline46mondego>      }<newline46mondego>    }).start();<newline46mondego>}<newline46mondego>"
"10054splitHere46","20300758splitHere46","textArea.write(bw);<newline46mondego>"
"10055splitHere46","20300903splitHere46","List<Integer>"
"10056splitHere46","20300903splitHere46","List<Integer> list = new ArrayList<Integer>();<newline46mondego>List rawList = list;<newline46mondego>rawList.add(new Double(2.5));<newline46mondego>"
"10057splitHere46","20300903splitHere46","List<Integer> checkedList = Collections.checkedList(list, Integer.class);<newline46mondego>"
"10058splitHere46","20301001splitHere46","instanceof"
"10059splitHere46","20301001splitHere46","Object obj = in.readObject();<newline46mondego>if (obj instaneof MyClass) {<newline46mondego>    MyClass c = (MyClass) obj;<newline46mondego>    process(c);<newline46mondego>} else if (obj instanceof MyOtherClass) {<newline46mondego>    // etc<newline46mondego>"
"10060splitHere46","20301216splitHere46","OnKeyListener"
"10061splitHere46","20301216splitHere46","OnClickListener"
"10062splitHere46","20301216splitHere46","b.setOnKeyListener(new View.OnKeyListener() {<newline46mondego>    @Override<newline46mondego>    public boolean onKey(View v, int keyCode, KeyEvent event) {<newline46mondego>        // your custom implementation<newline46mondego>        if (KeyEvent.KEYCODE_ENTER == keyCode) { // match ENTER key            {<newline46mondego>            // show the toast<newline46mondego>            Toast.makeText(MainActivity.this, <doubleQuotes46>Hello World<doubleQuotes46>,<newline46mondego>                Toast.LENGTH_SHORT).show();<newline46mondego>            return true; // indicate that we handled event, won't propagate it<newline46mondego>        }<newline46mondego>        return false; // when we don't handle other keys, propagate event further<newline46mondego>    }<newline46mondego>});<newline46mondego>"
"10063splitHere46","20301250splitHere46","Number"
"10064splitHere46","20301250splitHere46","public class Test {<newline46mondego>    public static void main(String[] args) {<newline46mondego>        int x = 5;<newline46mondego>        double y = 10;<newline46mondego>        System.out.println(getDoubleValue(x, y));<newline46mondego>    }<newline46mondego><newline46mondego>    private static double getDoubleValue(Number x, Number y){<newline46mondego>        return x.doubleValue() + y.doubleValue();<newline46mondego>    }<newline46mondego>}<newline46mondego>"
"10065splitHere46","20301377splitHere46","totalCost += pCost;<newline46mondego>"
"10066splitHere46","20301377splitHere46","totalCost += Double.valueOf(df.format(pCost));<newline46mondego>"
"10067splitHere46","20301377splitHere46","BigDecimal"
"10068splitHere46","20301377splitHere46",".setScale()"
"10069splitHere46","20301467splitHere46","public int sumNumbers(String str) {<newline46mondego>    int sPos = -1;<newline46mondego>    int ePos = -1;<newline46mondego>    int sum = 0;<newline46mondego><newline46mondego>    for (int i = 0; i < str.length(); i++) {<newline46mondego>        char c = str.charAt(i);<newline46mondego>        if (Character.isDigit(c)) {<newline46mondego>            if (sPos < 0) {<newline46mondego>                sPos = i;<newline46mondego>                ePos = i;<newline46mondego>            } else {<newline46mondego>                ePos = i;<newline46mondego>            }<newline46mondego>        } else {<newline46mondego>            sum = add(str, sum, sPos, ePos);<newline46mondego>            sPos = -1;<newline46mondego>        }<newline46mondego>    }<newline46mondego><newline46mondego>    sum = add(str, sum, sPos, ePos);<newline46mondego><newline46mondego>    return sum;<newline46mondego>}<newline46mondego><newline46mondego>private int add(String str, int sum, int sPos, int ePos) {<newline46mondego>    if (sPos >= 0) {<newline46mondego>        sum += Integer.parseInt(str.substring(sPos, ePos + 1));<newline46mondego>    }<newline46mondego>    return sum;<newline46mondego>}<newline46mondego>"
"10070splitHere46","20301483splitHere46","referenceField"
"10071splitHere46","20301483splitHere46","nullableField"
"10072splitHere46","20301483splitHere46","equals"
"10073splitHere46","20301562splitHere46","int count = inputStream.read();<newline46mondego>while (count != -1) {<newline46mondego>"
"10074splitHere46","20301562splitHere46","readInt"
"10075splitHere46","20301562splitHere46","mark(1)"
"10076splitHere46","20301562splitHere46","read()"
"10077splitHere46","20301562splitHere46","reset()"
"10078splitHere46","20301562splitHere46","BufferedInputStream"
"10079splitHere46","20301562splitHere46","DataInputStream.readInt"
"10080splitHere46","20301562splitHere46","readInt"
"10081splitHere46","20301643splitHere46","<c:if test=<doubleQuotes46>${param eq 'greetTheWorld'}<doubleQuotes46>><newline46mondego>  <p>Hello world!</p><newline46mondego></c:if><newline46mondego>"
"10082splitHere46","20301643splitHere46","if"
"10083splitHere46","20301643splitHere46","if (1 < 0) {<newline46mondego>  print(<doubleQuotes46>something is wrong!<doubleQuotes46>);<newline46mondego>}<newline46mondego>"
"10084splitHere46","20301728splitHere46","<filter><newline46mondego>        <filter-name>hibernateFilter</filter-name><newline46mondego>        <filter-class>org.springframework.orm.hibernate4.support.OpenSessionInViewFilter</filter-class><newline46mondego>        <init-param><newline46mondego>            <param-name>singleSession</param-name><newline46mondego>            <param-value>true</param-value><newline46mondego>        </init-param><newline46mondego>    </filter><newline46mondego>    <filter-mapping><newline46mondego>        <filter-name>hibernateFilter</filter-name><newline46mondego>        <url-pattern>/*</url-pattern><newline46mondego>    </filter-mapping><newline46mondego>"
"10085splitHere46","20301768splitHere46","htmlText .replaceAll(<doubleQuotes46><HR size=6 color=black><doubleQuotes46>, <doubleQuotes46><h1>splitLineHere</h1><doubleQuotes46>);<newline46mondego>"
"10086splitHere46","20301822splitHere46","<url-pattern>/com.javacodegeeks.Gwtspringtestnomaven/springGwtServices/*</url-pâ€Œâ€‹attern>"
"10087splitHere46","20301822splitHere46","RequestURI=/gwtspringtestnomaven/springGwtServices/employeeService"
"10088splitHere46","20302043splitHere46","class Person {<newline46mondego>    String firstName;<newline46mondego>    String lastName;<newline46mondego>    Integer age;<newline46mondego><newline46mondego>    Person(String firstName, String lastName, Integer age) {<newline46mondego>        this.firstName = firstName;<newline46mondego>        this.lastName = lastName;<newline46mondego>        this.age = age;<newline46mondego>    }<newline46mondego><newline46mondego>    Person(String firstName, String lastName) {<newline46mondego>        this(firstName, lastName, 0);<newline46mondego>    }<newline46mondego><newline46mondego>    Person(String firstName) {<newline46mondego>        this(firstName, null, null);<newline46mondego>    }<newline46mondego>}<newline46mondego><newline46mondego>Person p1 = new Person(<doubleQuotes46>Joe<doubleQuotes46>, <doubleQuotes46>Doe<doubleQuotes46>, 24);<newline46mondego>Person p2 = new Person(<doubleQuotes46>Joe<doubleQuotes46>, <doubleQuotes46>Doe<doubleQuotes46>);<newline46mondego>Person p3 = new Person(<doubleQuotes46>Joe<doubleQuotes46>);<newline46mondego>"
"10089splitHere46","20302043splitHere46","p2"
"10090splitHere46","20302043splitHere46","p3"
"10091splitHere46","20302043splitHere46","-1"
"10092splitHere46","20302043splitHere46","0"
"10093splitHere46","20302043splitHere46","null"
"10094splitHere46","20302043splitHere46","Person(String, String)"
"10095splitHere46","20302043splitHere46","Person(String"
"10096splitHere46","20302043splitHere46","age"
"10097splitHere46","20302043splitHere46","0"
"10098splitHere46","20302043splitHere46","null"
"10099splitHere46","20302070splitHere46","//receive UDP packet<newline46mondego>                    int port = (int)float.Parse(Variables.port_key);<newline46mondego>                    UdpCient UDP_packet = new UdpClient(port);<newline46mondego>                    UDP_packet.EnableBroadcast = true;<newline46mondego>                    IPEndPoint RemoteIpEndPoint = new IPEndPoint(IPAddress.Any, 0);<newline46mondego>                    IPAddress from_addr = null;<newline46mondego>                    Boolean gogo = false;<newline46mondego>                    while (!gogo)<newline46mondego>                    {<newline46mondego>                        Byte[] receiveBytes = UDP_packet.Receive(ref RemoteIpEndPoint);<newline46mondego>                        string returnData = Encoding.UTF8.GetString(receiveBytes);<newline46mondego>                        if (returnData.ToString() == <doubleQuotes46>83hcX1<doubleQuotes46>)<newline46mondego>                        {<newline46mondego>                            gogo = true;<newline46mondego>                        }<newline46mondego>                        from_addr = RemoteIpEndPoint.Address;<newline46mondego>                    }<newline46mondego>                    //send UDP packet<newline46mondego>                    IPEndPoint ipEndPoint = new IPEndPoint(from_addr, port);<newline46mondego>                    Byte[] sendBytes = Encoding.UTF8.GetBytes(<doubleQuotes46>94dbF5<doubleQuotes46>);<newline46mondego>                    UDP_packet.Send(sendBytes, sendBytes.Length, ipEndPoint);<newline46mondego>                    UDP_packet.Close();<newline46mondego>"
"10100splitHere46","20302070splitHere46","//send UDP packet<newline46mondego>                        DatagramSocket UDP_packet = new DatagramSocket(SERVERPORT);<newline46mondego>                        UDP_packet.setBroadcast(true);<newline46mondego>                        byte[] b = <doubleQuotes46>83hcX1<doubleQuotes46>.getBytes(<doubleQuotes46>UTF-8<doubleQuotes46>);<newline46mondego>                        DatagramPacket outgoing = new DatagramPacket(b, b.length, getBroadcastAddress(Main.this), SERVERPORT);                  <newline46mondego>                        UDP_packet.send(outgoing);<newline46mondego>                        //receive UDP packet<newline46mondego>                        boolean gogo = false;<newline46mondego>                        while (!gogo) {                     <newline46mondego>                            byte[] buffer = new byte[1024];<newline46mondego>                            DatagramPacket incoming = new DatagramPacket(buffer, buffer.length);    <newline46mondego>                            UDP_packet.receive(incoming);<newline46mondego>                            String message = new String(incoming.getData(), 0, incoming.getLength(), <doubleQuotes46>UTF-8<doubleQuotes46>);<newline46mondego>                             if (message.equals(<doubleQuotes46>94dbF5<doubleQuotes46>)) {<newline46mondego>                                 gogo = true;<newline46mondego>                                 SERVER_IP = incoming.getAddress();<newline46mondego>                             }                  <newline46mondego>                        }               <newline46mondego>                        UDP_packet.close();<newline46mondego>"
"10101splitHere46","20302070splitHere46","InetAddress getBroadcastAddress(Context context) throws IOException {<newline46mondego>        WifiManager wifi = (WifiManager) context.getSystemService(Context.WIFI_SERVICE);<newline46mondego>        DhcpInfo dhcp = wifi.getDhcpInfo();<newline46mondego>        if (dhcp == null) {<newline46mondego>              return null;<newline46mondego>            }<newline46mondego>        int broadcast = (dhcp.ipAddress & dhcp.netmask) | ~dhcp.netmask;<newline46mondego>        byte[] quads = new byte[4];<newline46mondego>        for (int k = 0; k < 4; k++)<newline46mondego>          quads[k] = (byte) ((broadcast >> k * 8) & 0xFF);<newline46mondego>        return InetAddress.getByAddress(quads);<newline46mondego>    }<newline46mondego>"
"10102splitHere46","20302159splitHere46","Log"
"10103splitHere46","20302159splitHere46","available()"
"10104splitHere46","20302159splitHere46","assets/"
"10105splitHere46","20302159splitHere46","res/xml/"
"10106splitHere46","20302159splitHere46","getXml()"
"10107splitHere46","20302159splitHere46","Resources"
"10108splitHere46","20302188splitHere46","textField.getDocument().addDocumentListener"
"10109splitHere46","20302188splitHere46","private String hintText = <doubleQuotes46>Hint<doubleQuotes46>;<newline46mondego><newline46mondego>@Override<newline46mondego>protected void paintComponent(Graphics g) {<newline46mondego>    super.paintComponent(g);<newline46mondego><newline46mondego>    if (getDocument().getLength() == 0) {<newline46mondego><newline46mondego>        Rectangle viewBounds = new Rectangle();<newline46mondego>        SwingUtilities.calculateInnerArea(this, viewBounds);<newline46mondego><newline46mondego>        Insets margin = getMargin();<newline46mondego>        viewBounds.x += margin.left;<newline46mondego>        viewBounds.y += margin.top;<newline46mondego>        viewBounds.width -= (margin.left + margin.right);<newline46mondego>        viewBounds.height -= (margin.top + margin.bottom);<newline46mondego><newline46mondego>        Rectangle iconBounds = new Rectangle();<newline46mondego>        Rectangle textBounds = new Rectangle();<newline46mondego><newline46mondego>        SwingUtilities.layoutCompoundLabel(this,<newline46mondego>            g.getFontMetrics(), hintText, null,<newline46mondego>            CENTER, getHorizontalAlignment(), CENTER, LEADING,<newline46mondego>            viewBounds, iconBounds, textBounds, 0);<newline46mondego><newline46mondego>        // paintComponent must leave its Graphics argument unchanged.<newline46mondego>        Color originalColor = g.getColor();<newline46mondego><newline46mondego>        g.setColor(Color.LIGHT_GRAY);<newline46mondego>        g.drawString(hintText,<newline46mondego>            textBounds.x, getBaseline(getWidth(), getHeight()));<newline46mondego><newline46mondego>        g.setColor(originalColor);<newline46mondego>    }<newline46mondego>}<newline46mondego>"
"10110splitHere46","20302271splitHere46","class Main<newline46mondego>{<newline46mondego>    public static void main (String[] args) throws java.lang.Exception<newline46mondego>    {<newline46mondego>        new Child().test(5);<newline46mondego>    }<newline46mondego>}<newline46mondego>class Parent {<newline46mondego>    public void test(int a){<newline46mondego>        System.out.println(a);<newline46mondego>    }<newline46mondego>}<newline46mondego><newline46mondego>class Child extends Parent{<newline46mondego>    @Override<newline46mondego>    public void test(int a){<newline46mondego>        super.test(a);<newline46mondego>        a++;<newline46mondego>    }<newline46mondego>}<newline46mondego>"
"10111splitHere46","20302271splitHere46","class Child extends Parent{<newline46mondego>    @Override<newline46mondego>    public void test(int a){<newline46mondego>        a++;<newline46mondego>        super.test(a);<newline46mondego>    }<newline46mondego>}<newline46mondego>"
"10112splitHere46","20302317splitHere46","JLabel c = (JLabel) renderer.getTableCellRendererComponent(...);<newline46mondego>"
"10113splitHere46","20302402splitHere46","LinkedList"
"10114splitHere46","20302402splitHere46","Iterator"
"10115splitHere46","20302402splitHere46","Iterator<Integer> iter = list.iterator();<newline46mondego>for (int i = 0; iter.hasNext(); i+=2) {<newline46mondego>    result[2*i] = iter.next();<newline46mondego>    result[2*i + 1] = result[2*i]; // don't call next twice...<newline46mondego>}<newline46mondego>"
"10116splitHere46","20302402splitHere46","Iterator"
"10117splitHere46","20302604splitHere46","table.rowMap()"
"10118splitHere46","20302604splitHere46","Map<String, Map<String, Integer>>"
"10119splitHere46","20302604splitHere46","{A={B=1, C=2}, B={D=3}}"
"10120splitHere46","20302604splitHere46","Map<String, Map<String, Integer>> map = table.rowMap();<newline46mondego><newline46mondego>for (String row : map.keySet()) {<newline46mondego>    Map<String, Integer> tmp = map.get(row);<newline46mondego>    for (Map.Entry<String, Integer> pair : tmp.entrySet()) {<newline46mondego>        System.out.println(row+<doubleQuotes46> <doubleQuotes46>+pair.getKey()+<doubleQuotes46> <doubleQuotes46>+pair.getValue());<newline46mondego>    }<newline46mondego>}<newline46mondego>"
"10121splitHere46","20302604splitHere46","for (Map.Entry<String, Map<String,Integer>> outer : map.entrySet()) {<newline46mondego>    for (Map.Entry<String, Integer> inner : outer.getValue().entrySet()) {<newline46mondego>        System.out.println(outer.getKey()+<doubleQuotes46> <doubleQuotes46>+inner.getKey()+<doubleQuotes46> <doubleQuotes46>+inner.getValue());<newline46mondego>    }<newline46mondego>}<newline46mondego>"
"10122splitHere46","20302604splitHere46","com.google.common.collect.Table.Cell"
"10123splitHere46","20302604splitHere46","for (Cell<String, String, Integer> cell: table.cellSet()){<newline46mondego>    System.out.println(cell.getRowKey()+<doubleQuotes46> <doubleQuotes46>+cell.getColumnKey()+<doubleQuotes46> <doubleQuotes46>+cell.getValue());<newline46mondego>}<newline46mondego>"
"10124splitHere46","20302725splitHere46","sync_CPU_caches();<newline46mondego>int processorRegister = variable;<newline46mondego>processorRegister = processorRegister + 1;<newline46mondego>variable = processorRegister;<newline46mondego>sync_CPU_caches();<newline46mondego>"
"10125splitHere46","20302725splitHere46","AtomicInteger"
"10126splitHere46","20302753splitHere46","ArrayList"
"10127splitHere46","20302753splitHere46","private static ArrayList<String> words=new ArrayList<>();<newline46mondego>"
"10128splitHere46","20302753splitHere46","ArrayList"
"10129splitHere46","20302753splitHere46","words"
"10130splitHere46","20302753splitHere46","words.add(line);// Use identifier words<newline46mondego>"
"10131splitHere46","20302759splitHere46","<doubleQuotes46>INSERT INTO skills (playerName, otherColumn) <newline46mondego>    VALUES ('<doubleQuotes46> + player.getUsername() + <doubleQuotes46>', '<doubleQuotes46> + insert(player) +<doubleQuotes46>')<newline46mondego> ON DUPLICATE KEY UPDATE otherColumn = VALUES(otherColumn)<doubleQuotes46>;<newline46mondego>"
"10132splitHere46","20302802splitHere46","\u000a"
"10133splitHere46","20302802splitHere46","// String st4=<doubleQuotes46>MN3444\u000ar4t4<doubleQuotes46>;<newline46mondego>"
"10134splitHere46","20302802splitHere46","\u000a"
"10135splitHere46","20302802splitHere46","// String st4=<doubleQuotes46>MN3444<newline46mondego>r4t4<doubleQuotes46>;<newline46mondego>"
"10136splitHere46","20302802splitHere46","//\u000a;System.out.println(<doubleQuotes46>hello comment<doubleQuotes46>);<newline46mondego>"
"10137splitHere46","20302802splitHere46","//<newline46mondego>System.out.println(<doubleQuotes46>hello comment<doubleQuotes46>);<newline46mondego>"
"10138splitHere46","20302802splitHere46","hello comment"
"10139splitHere46","20302847splitHere46","#[^#]+#"
"10140splitHere46","20302847splitHere46","getRandomElement"
"10141splitHere46","20302934splitHere46","s"
"10142splitHere46","20302934splitHere46","getS"
"10143splitHere46","20302934splitHere46","Test"
"10144splitHere46","20302934splitHere46","getS"
"10145splitHere46","20302991splitHere46","timerClock.setCoalesce(false);<newline46mondego>"
"10146splitHere46","20303148splitHere46","PendingIntent"
"10147splitHere46","20303148splitHere46","AlarmManager"
"10148splitHere46","20303148splitHere46","AlarmManager"
"10149splitHere46","20303148splitHere46","PendingIntent"
"10150splitHere46","20303148splitHere46","AlarmManager"
"10151splitHere46","20303148splitHere46","AlarmManager"
"10152splitHere46","20303247splitHere46","Software being installed: ...<newline46mondego>"
"10153splitHere46","20303247splitHere46","workspace/.metadata/logs"
"10154splitHere46","20303258splitHere46","public static void main(String[] args)"
"10155splitHere46","20303258splitHere46","private"
"10156splitHere46","20303258splitHere46","protected"
"10157splitHere46","20303258splitHere46","static"
"10158splitHere46","20303258splitHere46","main"
"10159splitHere46","20303258splitHere46","main"
"10160splitHere46","20303258splitHere46","String[]"
"10161splitHere46","20303258splitHere46","args"
"10162splitHere46","20303258splitHere46","public class MyClass{<newline46mondego><newline46mondego>    //private members<newline46mondego><newline46mondego>    //protected members<newline46mondego><newline46mondego>    //constructors<newline46mondego><newline46mondego>    //private methods<newline46mondego><newline46mondego>    //protected methods<newline46mondego><newline46mondego>    //public methods<newline46mondego><newline46mondego>    //hashcode and equals<newline46mondego><newline46mondego>    //toString overrides<newline46mondego>}<newline46mondego>"
"10163splitHere46","20303258splitHere46","main"
"10164splitHere46","20303258splitHere46","main"
"10165splitHere46","20303258splitHere46","main"
"10166splitHere46","20303394splitHere46","public void RemovePet(String maXoa) {    <newline46mondego>     Iterator<Pet> iter=listPet.iterator();<newline46mondego>     while(iter.hasNext()){<newline46mondego>        Pet p=iter.next()<newline46mondego>        if(maXoa.equals(p.id)){<newline46mondego>            iter.remove();<newline46mondego>        }<newline46mondego>    }<newline46mondego>} <newline46mondego>"
"10167splitHere46","20303404splitHere46","package com.jibon.tarabradio;<newline46mondego><newline46mondego>import android.annotation.SuppressLint;<newline46mondego>import android.app.Activity;<newline46mondego>import android.graphics.Bitmap;<newline46mondego>import android.view.View;<newline46mondego>import android.webkit.WebView;<newline46mondego>import android.webkit.WebViewClient;<newline46mondego>import android.widget.ProgressBar;<newline46mondego><newline46mondego>public class MainActivity extends Activity {<newline46mondego>    WebView webview;<newline46mondego>    ProgressBar progressBar;<newline46mondego>    @SuppressLint({ <doubleQuotes46>SetJavaScriptEnabled<doubleQuotes46>, <doubleQuotes46>NewApi<doubleQuotes46> }) <newline46mondego><newline46mondego>    @Override<newline46mondego>    protected void onCreate(Bundle savedInstanceState) {<newline46mondego>        super.onCreate(savedInstanceState);<newline46mondego>        setContentView(R.layout.activity_main);<newline46mondego><newline46mondego><newline46mondego>        webview = (WebView) findViewById(R.id.webview);<newline46mondego>        progressBar = (ProgressBar) findViewById(R.id.progress_bar);<newline46mondego><newline46mondego>        webview.setWebViewClient(new myWebClient());<newline46mondego>        webview.getSettings().setJavaScriptEnabled(true);<newline46mondego>        webview.getSettings().setLoadWithOverviewMode(true);<newline46mondego>        webview.getSettings().setUseWideViewPort(true);<newline46mondego>        webview.getSettings().setAllowUniversalAccessFromFileURLs(true);<newline46mondego>        webview.loadUrl(<doubleQuotes46>http://hoicoimasti.com/radio/<doubleQuotes46>);<newline46mondego><newline46mondego><newline46mondego>         }<newline46mondego><newline46mondego>    public class myWebClient extends WebViewClient<newline46mondego>    {<newline46mondego>        @Override<newline46mondego>        public void onPageStarted(WebView view, String url, Bitmap favicon) {<newline46mondego>            // TODO Auto-generated method stub<newline46mondego>            super.onPageStarted(view, url, favicon);<newline46mondego>        }<newline46mondego><newline46mondego>        @Override<newline46mondego>        public boolean shouldOverrideUrlLoading(WebView view, String url) {<newline46mondego>            // TODO Auto-generated method stub<newline46mondego><newline46mondego>            view.loadUrl(url);<newline46mondego>            return true;<newline46mondego><newline46mondego>        }<newline46mondego><newline46mondego>        @Override<newline46mondego>        public void onPageFinished(WebView view, String url) {<newline46mondego>            // TODO Auto-generated method stub<newline46mondego>            super.onPageFinished(view, url);<newline46mondego><newline46mondego>            progressBar.setVisibility(View.GONE);<newline46mondego>        }<newline46mondego>    }<newline46mondego><newline46mondego><newline46mondego>}<newline46mondego>"
"10168splitHere46","20303524splitHere46","TextView textView = new TextView();<newline46mondego>"
"10169splitHere46","20303524splitHere46","TextView textView = new TextView(FrontPage.this); <newline46mondego>"
"10170splitHere46","20303524splitHere46","activity_frot_page"
"10171splitHere46","20303524splitHere46","activity_front_page"
"10172splitHere46","20303556splitHere46","equals()"
"10173splitHere46","20303556splitHere46","@Override<newline46mondego>public boolean equals(Object o)<newline46mondego>    {<newline46mondego>        PacmanVeld p = (PacmanVeld)o;<newline46mondego>        if (p.nodes.length != nodes.length) { return false; }<newline46mondego>        for (int i = 0; i < nodes.length; i++)<newline46mondego>        {<newline46mondego>            if (!Arrays.deepEquals(nodes[i], p.nodes[i])) { return false; }<newline46mondego>        }<newline46mondego>        return true;<newline46mondego>    }<newline46mondego>"
"10174splitHere46","20303578splitHere46","public interface Animal {<newline46mondego>   public void draw(int size);<newline46mondego>}<newline46mondego><newline46mondego>public class Monkey implements Animal {<newline46mondego>   public void draw(int size) {<newline46mondego>      // ...<newline46mondego>   }<newline46mondego>}<newline46mondego>"
"10175splitHere46","20303609splitHere46","StackPane"
"10176splitHere46","20303609splitHere46","Label"
"10177splitHere46","20303609splitHere46","HBox"
"10178splitHere46","20303609splitHere46","TOP_RIGHT"
"10179splitHere46","20303620splitHere46","Statistics"
"10180splitHere46","20303620splitHere46","private void initButtonListeners() {<newline46mondego>    this.averageDegreeButton.addActionListener(new ActionListener() {<newline46mondego>        @Override<newline46mondego>        public void actionPerformed(ActionEvent e) {<newline46mondego>            computeAverageDegree();<newline46mondego>        }<newline46mondego>    }<newline46mondego><newline46mondego>    // other buttons...<newline46mondego>}<newline46mondego>"
"10181splitHere46","20303620splitHere46","computeAverageDegree()"
"10182splitHere46","20303620splitHere46","private void computeAverageDegree() {<newline46mondego>    double result = this.statistics.computeAverageDegree();<newline46mondego>    this.averageDegreeLabel.setText(formatDoubleToString(result));<newline46mondego>}<newline46mondego>"
"10183splitHere46","20303641splitHere46","i"
"10184splitHere46","20303641splitHere46","for (int counter = 0; counter < line.length(); counter++) {<newline46mondego>                switch(line.charAt(counter)) {<newline46mondego>"
"10185splitHere46","20303731splitHere46","package com.example.activitydatasend;<newline46mondego><newline46mondego>import android.app.Activity;<newline46mondego>import android.content.Intent;<newline46mondego>import android.os.Bundle;<newline46mondego>import android.view.Menu;<newline46mondego>import android.view.View;<newline46mondego>import android.widget.Button;<newline46mondego><newline46mondego>public class MainActivity extends Activity {<newline46mondego><newline46mondego>    @Override<newline46mondego>    protected void onCreate(Bundle savedInstanceState) {<newline46mondego>        super.onCreate(savedInstanceState);<newline46mondego>        setContentView(R.layout.activity_main);<newline46mondego>        Button click = (Button) findViewById(R.id.click);<newline46mondego><newline46mondego>        click.setOnClickListener(new View.OnClickListener() {<newline46mondego><newline46mondego>            @Override<newline46mondego>            public void onClick(View arg0) {<newline46mondego>                // TODO Auto-generated method stub<newline46mondego>                Intent intent = new Intent(MainActivity.this,Second.class);<newline46mondego>                intent.putExtra(<doubleQuotes46>first<doubleQuotes46>, <doubleQuotes46>first<doubleQuotes46>);<newline46mondego>                intent.putExtra(<doubleQuotes46>second<doubleQuotes46>, <doubleQuotes46>second<doubleQuotes46>);<newline46mondego>                startActivity(intent);<newline46mondego><newline46mondego>            }<newline46mondego>        });<newline46mondego>    }<newline46mondego><newline46mondego>    @Override<newline46mondego>    public boolean onCreateOptionsMenu(Menu menu) {<newline46mondego>        // Inflate the menu; this adds items to the action bar if it is present.<newline46mondego>        getMenuInflater().inflate(R.menu.main, menu);<newline46mondego>        return true;<newline46mondego>    }<newline46mondego><newline46mondego>}<newline46mondego>"
"10186splitHere46","20303731splitHere46","package com.example.activitydatasend;<newline46mondego><newline46mondego>import android.os.Bundle;<newline46mondego>import android.app.Activity;<newline46mondego>import android.view.Menu;<newline46mondego><newline46mondego>public class Second extends Activity {<newline46mondego><newline46mondego>    @Override<newline46mondego>    protected void onCreate(Bundle savedInstanceState) {<newline46mondego>        super.onCreate(savedInstanceState);<newline46mondego>        setContentView(R.layout.second);<newline46mondego>        Bundle bundle = getIntent().getExtras();<newline46mondego>        String a = bundle.getString(<doubleQuotes46>first<doubleQuotes46>);<newline46mondego>        String b = bundle.getString(<doubleQuotes46>second<doubleQuotes46>);<newline46mondego>        System.out.println(a+b);<newline46mondego>    }<newline46mondego><newline46mondego>    @Override<newline46mondego>    public boolean onCreateOptionsMenu(Menu menu) {<newline46mondego>        // Inflate the menu; this adds items to the action bar if it is present.<newline46mondego>        getMenuInflater().inflate(R.menu.main, menu);<newline46mondego>        return true;<newline46mondego>    }<newline46mondego><newline46mondego>}<newline46mondego>"
"10187splitHere46","20303773splitHere46","private JPanel jplBalls = new JPanel(null);<newline46mondego>jplBalls.setOpaque(false);<newline46mondego>"
"10188splitHere46","20303773splitHere46","if (x > getParent().getWidth() - radius)<newline46mondego>    dx = -Math.abs(dx);<newline46mondego><newline46mondego>if (y > getParent().getHeight() - radius)<newline46mondego>    dy = -Math.abs(dy);<newline46mondego>"
"10189splitHere46","20303790splitHere46","onReceive()"
"10190splitHere46","20303790splitHere46","TaskOpt"
"10191splitHere46","20303790splitHere46","BroadcastReceiver"
"10192splitHere46","20303790splitHere46","Calendar"
"10193splitHere46","20303790splitHere46","adb shell dumpsys alarm"
"10194splitHere46","20303790splitHere46","WakefulBroadcastReceiver"
"10195splitHere46","20303790splitHere46","WakefulIntentService"
"10196splitHere46","20303790splitHere46","WakeLock"
"10197splitHere46","20303790splitHere46","WakeLock"
"10198splitHere46","20303790splitHere46","SetAlarm()"
"10199splitHere46","20303819splitHere46","int[][] matrix = new int[10][10];<newline46mondego>int counter = 0;<newline46mondego>int column = 0; // which column<newline46mondego>int what = 10;<newline46mondego>for(int i = 0; i < matrix.lenght; i++){<newline46mondego>   if(matrix[i][column] == what) counter++<newline46mondego>}<newline46mondego>"
"10200splitHere46","20303819splitHere46","|0 0 0 0|<newline46mondego>|0 0 0 0|<newline46mondego>|0 0 0 0|<newline46mondego>|1 1 1 1| <newline46mondego>"
"10201splitHere46","20303900splitHere46","AsyncTask"
"10202splitHere46","20303900splitHere46","execute()"
"10203splitHere46","20303900splitHere46","execute()"
"10204splitHere46","20303900splitHere46","AsyncTask"
"10205splitHere46","20303900splitHere46","IntentService"
"10206splitHere46","20303900splitHere46","AsyncTask"
"10207splitHere46","20303992splitHere46","public Message(String recipient, String sender){<newline46mondego>        this.recipient = recipient;<newline46mondego>        this.sender = sender;<newline46mondego>        body = <doubleQuotes46><doubleQuotes46>;<newline46mondego>}<newline46mondego>"
"10208splitHere46","20303992splitHere46","Message"
"10209splitHere46","20303992splitHere46","EmailTester"
"10210splitHere46","20303992splitHere46","Message m = new Message(<doubleQuotes46>recipient<doubleQuotes46>, <doubleQuotes46>sender<doubleQuotes46>);<newline46mondego>"
"10211splitHere46","20304014splitHere46","new KeyBinding(jf);<newline46mondego>"
"10212splitHere46","20304014splitHere46","public KeyBinding(JFrame frame)<newline46mondego>{<newline46mondego>    JRootPane rootPane = frame.getRootPane();<newline46mondego>    rootPane.getInputMap(...)<newline46mondego>}<newline46mondego>"
"10213splitHere46","20304018splitHere46","imageView.setOnClickListener(new OnClickListener() {<newline46mondego>            @Override<newline46mondego>            public void onClick(View v) {               <newline46mondego><newline46mondego><newline46mondego>                Intent intent = new Intent(Intent.ACTION_GET_CONTENT);<newline46mondego>                intent.setType(<doubleQuotes46>image/*<doubleQuotes46>);<newline46mondego>                startActivityForResult(Intent.createChooser(intent, <doubleQuotes46>Select Picture<doubleQuotes46>), REQUEST_GALLERY);<newline46mondego><newline46mondego><newline46mondego>            }<newline46mondego>        });<newline46mondego><newline46mondego>public void onActivityResult(int requestCode, int resultCode, Intent data) {<newline46mondego><newline46mondego>        if (requestCode == REQUEST_GALLERY && resultCode == RESULT_OK) {<newline46mondego>            Uri uri = data.getData();  <newline46mondego>            try {<newline46mondego>                bitmap = Media.getBitmap(this.getContentResolver(), uri);<newline46mondego>                 resize = Bitmap.createScaledBitmap(bitmap, newWidth, newHeight, false);<newline46mondego>                 imageView.setImageBitmap(resize);<newline46mondego><newline46mondego>            } catch (Exception e) {<newline46mondego>                e.printStackTrace();<newline46mondego>            }<newline46mondego>        }<newline46mondego><newline46mondego><newline46mondego>    }<newline46mondego>"
"10214splitHere46","20304125splitHere46","ProjectRoot<newline46mondego>         src<newline46mondego>         build<newline46mondego>         store.txt<newline46mondego>"
"10215splitHere46","20304125splitHere46","import java.io.FileWriter;<newline46mondego>import java.io.IOException;<newline46mondego>import java.io.PrintWriter;<newline46mondego>import java.util.ArrayList;<newline46mondego>import java.util.List;<newline46mondego><newline46mondego>public class StoreToFIle {<newline46mondego><newline46mondego>    public static void main(String[] args) {<newline46mondego>        List<String> list = new ArrayList<>();<newline46mondego><newline46mondego>        for (int i = 0; i < 20; i++) {<newline46mondego>            list.add(String.valueOf(i));<newline46mondego>        }<newline46mondego><newline46mondego>        storeTextLinesToFile(list, <doubleQuotes46>store.txt<doubleQuotes46>);<newline46mondego>    }<newline46mondego><newline46mondego>    static void storeTextLinesToFile(List<String> listOfTextLines, String fileName) {<newline46mondego>        try {<newline46mondego>            PrintWriter outputFile = new PrintWriter(new FileWriter(fileName));<newline46mondego><newline46mondego>            for (String line : listOfTextLines) {<newline46mondego>                outputFile.println(line);<newline46mondego>            }<newline46mondego><newline46mondego>            outputFile.close();<newline46mondego><newline46mondego>        } catch (IOException ioException) {<newline46mondego>            System.out.println(<doubleQuotes46>\n\n Cannot write to file \<doubleQuotes46><doubleQuotes46> + fileName + <doubleQuotes46>\<doubleQuotes46><doubleQuotes46>);<newline46mondego>        }<newline46mondego>    }<newline46mondego>}<newline46mondego>"
"10216splitHere46","20304379splitHere46","for(int i = numList.Length - 1; i >= 0;i--)<newline46mondego>{<newline46mondego>    int temp = numList[i];<newline46mondego>    System.out.print(<doubleQuotes46>Reverse order: <doubleQuotes46> + temp + <doubleQuotes46> <doubleQuotes46>);<newline46mondego>}<newline46mondego>"
"10217splitHere46","20304424splitHere46","generateRandomNumber()"
"10218splitHere46","20304424splitHere46","if (userGuess == generateRandomNumber())<newline46mondego>"
"10219splitHere46","20304451splitHere46","TableModel model = table.getModel();<newline46mondego>String colYear = model.getColumnName(2);<newline46mondego>int colYearValue = Integer.valueOf((String) model.getValueAt(row, 2));<newline46mondego><newline46mondego>if (colYearValue == 3) {<newline46mondego>    cell.setBackground(Color.cyan);<newline46mondego>} else {<newline46mondego>    cell.setBackground(Color.lightGray);<newline46mondego>}<newline46mondego>"
"10220splitHere46","20304459splitHere46","23 will be multiplied by 3 and + 1<newline46mondego>Value is 70<newline46mondego>70 will be divided by 2<newline46mondego>Value is even 35<newline46mondego>35 will be multiplied by 3 and + 1<newline46mondego>Value is 106<newline46mondego>106 will be divided by 2<newline46mondego>Value is even 53<newline46mondego>53 will be multiplied by 3 and + 1<newline46mondego>Value is 160<newline46mondego>160 will be divided by 2<newline46mondego>Value is even 80<newline46mondego>80 will be divided by 2<newline46mondego>Value is even 40<newline46mondego>40 will be divided by 2<newline46mondego>Value is even 20<newline46mondego>20 will be divided by 2<newline46mondego>Value is even 10<newline46mondego>10 will be divided by 2<newline46mondego>Value is even 5<newline46mondego>5 will be multiplied by 3 and + 1<newline46mondego>Value is 16<newline46mondego>16 will be divided by 2<newline46mondego>Value is even 8<newline46mondego>8 will be divided by 2<newline46mondego>Value is even 4<newline46mondego>4 will be divided by 2<newline46mondego>Value is even 2<newline46mondego>2 will be divided by 2<newline46mondego>Value is even 1<newline46mondego>Value is equal to 1, closing down<newline46mondego>"
"10221splitHere46","20304459splitHere46","import javax.swing.JOptionPane;<newline46mondego><newline46mondego>public class Sequences {<newline46mondego><newline46mondego>    /**<newline46mondego>     * @param args<newline46mondego>     */<newline46mondego>    public static void main(String[] args) {<newline46mondego>        calculateSequences();<newline46mondego>    }// ends main<newline46mondego><newline46mondego>    public static void calculateSequences() {<newline46mondego>        int value;<newline46mondego>        String valueInput = JOptionPane.showInputDialog(<doubleQuotes46>Value<doubleQuotes46>);<newline46mondego>        value = Integer.parseInt(valueInput);<newline46mondego><newline46mondego>        while (value > 0) {<newline46mondego>            if (value == 1) {<newline46mondego>                System.out.println(<doubleQuotes46>Value is equal to 1, closing down<doubleQuotes46>);<newline46mondego>                System.exit(0);<newline46mondego><newline46mondego>            } else if ((value % 2) == 0) {<newline46mondego>                System.out.println(value + <doubleQuotes46> will be divided by 2<doubleQuotes46>);<newline46mondego>                value = value / 2;<newline46mondego>                System.out.println(<doubleQuotes46>Value is even <doubleQuotes46> + value);<newline46mondego><newline46mondego>            } else {<newline46mondego>                System.out.println(value + <doubleQuotes46> will be multiplied by 3 and + 1<doubleQuotes46>);<newline46mondego>                value = 3 * value + 1;<newline46mondego>                System.out.println(<doubleQuotes46>Value is <doubleQuotes46> + value);<newline46mondego><newline46mondego>            }<newline46mondego>        }<newline46mondego><newline46mondego>    }// ends calculateSequences<newline46mondego><newline46mondego>}<newline46mondego>"
"10222splitHere46","20304476splitHere46","{project.basedir}/src"
"10223splitHere46","20304476splitHere46","src"
"10224splitHere46","20304476splitHere46","java"
"10225splitHere46","20304476splitHere46","{project.basedir}/src/main/java"
"10226splitHere46","20304476splitHere46","{project.basedir}/src/test/java"
"10227splitHere46","20304476splitHere46","resources"
"10228splitHere46","20304476splitHere46","resources"
"10229splitHere46","20304476splitHere46","java"
"10230splitHere46","20304476splitHere46","main\java"
"10231splitHere46","20304476splitHere46","src"
"10232splitHere46","20304476splitHere46","com"
"10233splitHere46","20304476splitHere46","java"
"10234splitHere46","20304476splitHere46","com.jamobox..."
"10235splitHere46","20304476splitHere46","main.java.com.janbobox..."
"10236splitHere46","20304476splitHere46","src"
"10237splitHere46","20304476splitHere46","com.jamobox..."
"10238splitHere46","20304476splitHere46","main.java.com.janbobox..."
"10239splitHere46","20304476splitHere46","java"
"10240splitHere46","20304476splitHere46","src"
"10241splitHere46","20304476splitHere46","com"
"10242splitHere46","20304476splitHere46","src\main\java"
"10243splitHere46","20304476splitHere46","src"
"10244splitHere46","20304476splitHere46","package main.java.com"
"10245splitHere46","20304476splitHere46","package com"
"10246splitHere46","20304476splitHere46","import main.java.com"
"10247splitHere46","20304476splitHere46","import com"
"10248splitHere46","20304543splitHere46","else"
"10249splitHere46","20304543splitHere46","boolean studentFound = false;<newline46mondego><newline46mondego>for (int i = 0;i < 10;i++) {<newline46mondego>    if (studentNamesArray[i] != null) {<newline46mondego>        studentFound = true;<newline46mondego>...<newline46mondego>"
"10250splitHere46","20304543splitHere46","for"
"10251splitHere46","20304543splitHere46","if (!studentFound) {<newline46mondego>    System.out.println(<doubleQuotes46>There are no students stored<doubleQuotes46>);<newline46mondego>}<newline46mondego>"
"10252splitHere46","20304570splitHere46","${liferay.home}/deploy"
"10253splitHere46","20304768splitHere46","queue = new ..."
"10254splitHere46","20304809splitHere46","public static void main(String[] args) throws IOException {<newline46mondego>"
"10255splitHere46","20304809splitHere46","private static void ArrayListCon(String filename) throws IOException{<newline46mondego>"
"10256splitHere46","20304809splitHere46","hello<newline46mondego>hi<newline46mondego>there<newline46mondego>my<newline46mondego>words<newline46mondego>are<newline46mondego>cool<newline46mondego>"
"10257splitHere46","20304809splitHere46","javac WordList.java<newline46mondego>java WordList<newline46mondego>[hello, hi, there, my, words, are, cool]<newline46mondego>"
"10258splitHere46","20304809splitHere46","(edu.rice.cs.drjava.model.compiler.JavacCompiler)"
"10259splitHere46","20304874splitHere46","else if (choice.toLowerCase().charAt(0) == 'y') ;"
"10260splitHere46","20304874splitHere46","if"
"10261splitHere46","20304965splitHere46","String str = textarea.getText();"
"10262splitHere46","20304965splitHere46","char ch = str.charAt(0)"
"10263splitHere46","20304965splitHere46","Character.isLowerCase(ch)"
"10264splitHere46","20305050splitHere46","public static int askState(String[] stateNames) {<newline46mondego>    Scanner keyboard = new Scanner(System.in);<newline46mondego>    String state;<newline46mondego>    int statePosition = -1;<newline46mondego>    System.out.println(<doubleQuotes46>Please enter a state that you would like to search:<doubleQuotes46>);<newline46mondego>    state = keyboard.nextLine();<newline46mondego>    {<newline46mondego>        for (int i = 0; i < NUM_STATES; i++) {<newline46mondego>            if (state.equals(stateNames[i])){ <newline46mondego>                statePosition = i;<newline46mondego>                return stateposition;<newline46mondego>            }<newline46mondego>        }<newline46mondego>        System.out.println(<doubleQuotes46>Please enter a valid state:<doubleQuotes46>);          <newline46mondego>    }<newline46mondego>    return statePosition;<newline46mondego><newline46mondego>}<newline46mondego><newline46mondego>}<newline46mondego>"
"10265splitHere46","20305107splitHere46","equals"
"10266splitHere46","20305107splitHere46","equals"
"10267splitHere46","20305107splitHere46","matches"
"10268splitHere46","20305423splitHere46","planetArray"
"10269splitHere46","20305423splitHere46","private static Planet[] planetArray;<newline46mondego>"
"10270splitHere46","20305423splitHere46","public PlanetInfo[] getPlanetArray()<newline46mondego>"
"10271splitHere46","20305423splitHere46","public void Planets()<newline46mondego>"
"10272splitHere46","20305423splitHere46","getPlanetArray"
"10273splitHere46","20305423splitHere46","Planets"
"10274splitHere46","20305423splitHere46","Planets"
"10275splitHere46","20305444splitHere46","The Tomcat Manager is a web application that can be used interactively (via HTML GUI) or programmatically (via URL-based API) to deploy and manage web applications.<newline46mondego>"
"10276splitHere46","20305447splitHere46","Question"
"10277splitHere46","20305447splitHere46","Question"
"10278splitHere46","20305447splitHere46","public class Question {<newline46mondego>    private String label;<newline46mondego>    private String option1;<newline46mondego>    // ...<newline46mondego><newline46mondego>    public String getLabel() {<newline46mondego>        return label;<newline46mondego>    }<newline46mondego><newline46mondego>    public void setLabel(String label) {<newline46mondego>        this.label = label;<newline46mondego>    }<newline46mondego>    // ...<newline46mondego>}<newline46mondego>"
"10279splitHere46","20305447splitHere46","<logic:iterate name=<doubleQuotes46>questions<doubleQuotes46> id=<doubleQuotes46>question<doubleQuotes46>><newline46mondego>    <tr>  <newline46mondego>        <td><bean:write name=<doubleQuotes46>question<doubleQuotes46> property=<doubleQuotes46>label<doubleQuotes46>/></td><newline46mondego>        <td><bean:write name=<doubleQuotes46>question<doubleQuotes46> property=<doubleQuotes46>option1<doubleQuotes46>/></td><newline46mondego>        ...<newline46mondego>    </tr>  <newline46mondego>    </logic:iterate><newline46mondego>"
"10280splitHere46","20305447splitHere46","<c:forEach var=<doubleQuotes46>question<doubleQuotes46> items=<doubleQuotes46>${questions}<doubleQuotes46>><newline46mondego>    <tr>  <newline46mondego>        <td><c:out value=<doubleQuotes46>${question.label}<doubleQuotes46> /></td><newline46mondego>        <td><c:out value=<doubleQuotes46>${question.option1}<doubleQuotes46>/></td><newline46mondego>        ...<newline46mondego>    </tr>  <newline46mondego>    </c:forEach><newline46mondego>"
"10281splitHere46","20305447splitHere46","Question"
"10282splitHere46","20305447splitHere46","Question"
"10283splitHere46","20305447splitHere46","Questions"
"10284splitHere46","20305447splitHere46","public class Question {<newline46mondego>    private String label;<newline46mondego>    private String option1;<newline46mondego>    // other fields omitted for brevity<newline46mondego><newline46mondego>    public String getLabel() {<newline46mondego>        return label;<newline46mondego>    }<newline46mondego><newline46mondego>    public void setLabel(String label) {<newline46mondego>        this.label = label;<newline46mondego>    }<newline46mondego>    // other getters and setters omitted for brevity<newline46mondego>}<newline46mondego>"
"10285splitHere46","20305447splitHere46","Question"
"10286splitHere46","20305447splitHere46","questions"
"10287splitHere46","20305447splitHere46","question"
"10288splitHere46","20305447splitHere46","// this is an list of questions. It's empty initially<newline46mondego>// this list isn't meant to contain Strings, and it can't. <newline46mondego>// It will contain one Question object for each row in the table.<newline46mondego>List<Question> questions = new ArrayList<Question>();<newline46mondego>try{            <newline46mondego>    Statement st = DBConnection.DBConnection.DBConnect();<newline46mondego>    ResultSet rs = st.executeQuery(sql);<newline46mondego>    while(rs.next()){<newline46mondego>        // this block is executed for each row in the table. <newline46mondego>        // Each row is transformed into a Question object<newline46mondego><newline46mondego>        Question question = new Question();<newline46mondego>        question.setLabel((rs.getString(<doubleQuotes46>ques_name<doubleQuotes46>));<newline46mondego>        question.setOption1(rs.getString(3));<newline46mondego>        question.setOption2(rs.getString(4));<newline46mondego>        question.setOption3(rs.getString(5));<newline46mondego>        question.setOption4(rs.getString(6));<newline46mondego>        question.setAnswer(rs.getString(7));<newline46mondego><newline46mondego>        // now that we have created a Question object and populated it with the<newline46mondego>        // cells of the row, we will add it to the list of questions:<newline46mondego><newline46mondego>        questions.add(question);<newline46mondego>    }<newline46mondego><newline46mondego>    // So now, we have a list of questions. Each element of the list is an object<newline46mondego>    // of type Question, which has a property label, a property option1, etc.<newline46mondego>    request.setAttribute(<doubleQuotes46>questions<doubleQuotes46>, questions);<newline46mondego> }<newline46mondego>"
"10289splitHere46","20305447splitHere46","<logic:iterate name=<doubleQuotes46>questions<doubleQuotes46> id=<doubleQuotes46>question<doubleQuotes46>><newline46mondego>    <tr>  <newline46mondego>        <%-- let's write the property label of the current question<newline46mondego>             This will in fact call question.getLabel() and write it to the response<newline46mondego>        --%><newline46mondego>        <td><bean:write name=<doubleQuotes46>question<doubleQuotes46> property=<doubleQuotes46>label<doubleQuotes46>/></td><newline46mondego><newline46mondego>        <%-- let's write the property option1 of the current question<newline46mondego>             This will in fact call question.getOption1() and write it to the response<newline46mondego>        --%><newline46mondego>        <td><bean:write name=<doubleQuotes46>question<doubleQuotes46> property=<doubleQuotes46>option1<doubleQuotes46>/></td><newline46mondego>    </tr>  <newline46mondego></logic:iterate><newline46mondego>"
"10290splitHere46","20305492splitHere46","bu1"
"10291splitHere46","20305492splitHere46","Integer.parseInt()"
"10292splitHere46","20305492splitHere46","public class Screen1 extends Activity<newline46mondego>{<newline46mondego>    private static final String EXTRA_MESSAGE = <doubleQuotes46>extra_msg<doubleQuotes46>;<newline46mondego><newline46mondego>    @Override<newline46mondego>    protected void onCreate(Bundle savedInstanceState)<newline46mondego>    {<newline46mondego>        super.onCreate(savedInstanceState);<newline46mondego>        setContentView(R.layout.screen1);<newline46mondego><newline46mondego>        final EditText t1 = (EditText)findViewById(R.id.a);<newline46mondego>        final EditText t3 = (EditText)findViewById(R.id.c);<newline46mondego>        final EditText t4 = (EditText)findViewById(R.id.d);<newline46mondego><newline46mondego>        Button bu1 = (Button)findViewById(R.id.bu);<newline46mondego>        bu1.setOnClickListener(new View.OnClickListener()<newline46mondego>            {<newline46mondego>                public void onClick(View message)<newline46mondego>                {<newline46mondego>                    int f1,f3,f4; <newline46mondego>                    String e1 = t1.getText().toString();<newline46mondego>                    String e3 = t3.getText().toString();<newline46mondego>                    String e4 = t4.getText().toString();<newline46mondego><newline46mondego>                    if (e1.equals(<doubleQuotes46><doubleQuotes46>) || e3.equals(<doubleQuotes46><doubleQuotes46>) || e4.equals(<doubleQuotes46><doubleQuotes46>))<newline46mondego>                    {<newline46mondego>                        Toast.makeText(Screen1.this, <doubleQuotes46>Please enter all numbers.<doubleQuotes46>, Toast.LENGTH_SHORT).show();<newline46mondego>                        return;<newline46mondego>                    }<newline46mondego><newline46mondego>                    try<newline46mondego>                    {<newline46mondego>                        f1 = Integer.parseInt(e1);<newline46mondego>                        f4 = Integer.parseInt(e4);<newline46mondego>                        f3 = Integer.parseInt(e3);<newline46mondego><newline46mondego>                        StringBuilder sb = new StringBuilder();<newline46mondego>                        for (float i = 0.1f; i <= 5; i = i + .1f)<newline46mondego>                        { <newline46mondego>                            sb.append(String.format(<doubleQuotes46>%.1f<doubleQuotes46>, i) + <doubleQuotes46> mcg = <doubleQuotes46> + (f1 * 60 * i * f4) / (f3 * 1000) + <doubleQuotes46>\n<doubleQuotes46>);<newline46mondego>                        }<newline46mondego><newline46mondego>                        Intent intent = new Intent(Screen1.this, Screen2.class);<newline46mondego>                        intent.putExtra(EXTRA_MESSAGE, sb.toString());<newline46mondego>                        startActivity(intent);<newline46mondego>                    }<newline46mondego>                    catch (NumberFormatException e)<newline46mondego>                    {<newline46mondego>                        Toast.makeText(Screen1.this, <doubleQuotes46>Invalid numbers.<doubleQuotes46>, Toast.LENGTH_SHORT).show();                            <newline46mondego>                    }<newline46mondego>                }       <newline46mondego>            }<newline46mondego>        );     <newline46mondego>    }<newline46mondego>}<newline46mondego>"
"10293splitHere46","20305524splitHere46","new TextFilteredPropertyColumn<FilterPage.Entity, FilterPage.Entity, FilterPage.Entity>(Model.of(<doubleQuotes46>Finish Date<doubleQuotes46>), dataProvider.getFilterState(), <doubleQuotes46>finish<doubleQuotes46>) {<newline46mondego><newline46mondego>            private static final long serialVersionUID = 1L;<newline46mondego><newline46mondego>            @Override<newline46mondego>            public Component getFilter(String componentId, FilterForm<?> form) {<newline46mondego>                @SuppressWarnings({ <doubleQuotes46>unchecked<doubleQuotes46>, <doubleQuotes46>rawtypes<doubleQuotes46> })<newline46mondego>                TextFilter<Date> filter = new TextFilter(componentId, getFilterModel(form), form);<newline46mondego>                filter.getFilter().add(new DatePicker());<newline46mondego>                return filter;<newline46mondego>            }<newline46mondego><newline46mondego>}<newline46mondego>"
"10294splitHere46","20305524splitHere46","<!DOCTYPE html PUBLIC <doubleQuotes46>-//W3C//DTD XHTML 1.0 Strict//EN<doubleQuotes46> <doubleQuotes46>http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd<doubleQuotes46>><newline46mondego><html xmlns=<doubleQuotes46>http://www.w3.org/1999/xhtml<doubleQuotes46> xml:lang=<doubleQuotes46>cs<doubleQuotes46> dir=<doubleQuotes46>ltr<doubleQuotes46> lang=<doubleQuotes46>cs<doubleQuotes46> xmlns:wicket=<doubleQuotes46>http://wicket.apache.org<doubleQuotes46>><newline46mondego><head><newline46mondego>    <title>Filter Page</title><newline46mondego>    <meta http-equiv=<doubleQuotes46>content-type<doubleQuotes46> content=<doubleQuotes46>text/html; charset=UTF-8<doubleQuotes46> /><newline46mondego>    <link rel=<doubleQuotes46>stylesheet<doubleQuotes46> type=<doubleQuotes46>text/css<doubleQuotes46> href=<doubleQuotes46>screen.css<doubleQuotes46> /><newline46mondego></head><newline46mondego><body><newline46mondego><div><newline46mondego><newline46mondego>    <h1>Filter Page</h1><newline46mondego><newline46mondego>    <div><newline46mondego>        <div wicket:id=<doubleQuotes46>filterResult<doubleQuotes46>><newline46mondego>            Start: <wicket:container wicket:id=<doubleQuotes46>start<doubleQuotes46> /><br/><newline46mondego>            Finish: <wicket:container wicket:id=<doubleQuotes46>finish<doubleQuotes46> /><br/><newline46mondego>            Note: <wicket:container wicket:id=<doubleQuotes46>note<doubleQuotes46> /><br/><newline46mondego>        </div><newline46mondego>        <form wicket:id=<doubleQuotes46>filterForm<doubleQuotes46>><newline46mondego>            <div wicket:id=<doubleQuotes46>goAndClear<doubleQuotes46>></div><newline46mondego>            <table wicket:id=<doubleQuotes46>table<doubleQuotes46>></table><newline46mondego>        </form><newline46mondego>    </div><newline46mondego><newline46mondego></div>  <newline46mondego></body><newline46mondego></html><newline46mondego>"
"10295splitHere46","20305524splitHere46","import java.io.Serializable;<newline46mondego>import java.util.ArrayList;<newline46mondego>import java.util.Date;<newline46mondego>import java.util.GregorianCalendar;<newline46mondego>import java.util.Iterator;<newline46mondego>import java.util.LinkedList;<newline46mondego>import java.util.List;<newline46mondego><newline46mondego>import org.apache.wicket.Component;<newline46mondego>import org.apache.wicket.extensions.markup.html.repeater.data.table.DefaultDataTable;<newline46mondego>import org.apache.wicket.extensions.markup.html.repeater.data.table.IColumn;<newline46mondego>import org.apache.wicket.extensions.markup.html.repeater.data.table.filter.FilterForm;<newline46mondego>import org.apache.wicket.extensions.markup.html.repeater.data.table.filter.FilterToolbar;<newline46mondego>import org.apache.wicket.extensions.markup.html.repeater.data.table.filter.GoAndClearFilter;<newline46mondego>import org.apache.wicket.extensions.markup.html.repeater.data.table.filter.IFilterStateLocator;<newline46mondego>import org.apache.wicket.extensions.markup.html.repeater.data.table.filter.TextFilter;<newline46mondego>import org.apache.wicket.extensions.markup.html.repeater.data.table.filter.TextFilteredPropertyColumn;<newline46mondego>import org.apache.wicket.extensions.markup.html.repeater.util.SortableDataProvider;<newline46mondego>import org.apache.wicket.extensions.yui.calendar.DatePicker;<newline46mondego>import org.apache.wicket.markup.html.WebMarkupContainer;<newline46mondego>import org.apache.wicket.markup.html.WebPage;<newline46mondego>import org.apache.wicket.markup.html.basic.Label;<newline46mondego>import org.apache.wicket.model.CompoundPropertyModel;<newline46mondego>import org.apache.wicket.model.IModel;<newline46mondego>import org.apache.wicket.model.Model;<newline46mondego><newline46mondego>/**<newline46mondego> * @author Martin Strejc<newline46mondego> *<newline46mondego> */<newline46mondego>public class FilterPage extends WebPage {<newline46mondego><newline46mondego>    private static final long serialVersionUID = 1L;<newline46mondego><newline46mondego>    public FilterPage() {<newline46mondego>        super();<newline46mondego>        MySortableDataProvider dataProvider = new MySortableDataProvider();<newline46mondego>        FilterForm<Entity> filterForm = new FilterForm<>(<doubleQuotes46>filterForm<doubleQuotes46>, dataProvider);<newline46mondego>        List<IColumn<Entity, Entity>> columns = new LinkedList<>();<newline46mondego>        // default filter by auto convert detection<newline46mondego>        columns.add(new TextFilteredPropertyColumn<FilterPage.Entity, FilterPage.Entity, FilterPage.Entity>(Model.of(<doubleQuotes46>Start Date<doubleQuotes46>), dataProvider.getFilterState(), <doubleQuotes46>start<doubleQuotes46>));<newline46mondego><newline46mondego>        columns.add(new TextFilteredPropertyColumn<FilterPage.Entity, FilterPage.Entity, FilterPage.Entity>(Model.of(<doubleQuotes46>Finish Date<doubleQuotes46>), dataProvider.getFilterState(), <doubleQuotes46>finish<doubleQuotes46>) {<newline46mondego><newline46mondego>            private static final long serialVersionUID = 1L;<newline46mondego><newline46mondego>            @Override<newline46mondego>            public Component getFilter(String componentId, FilterForm<?> form) {<newline46mondego>                @SuppressWarnings({ <doubleQuotes46>unchecked<doubleQuotes46>, <doubleQuotes46>rawtypes<doubleQuotes46> })<newline46mondego>                TextFilter<Date> filter = new TextFilter(componentId, getFilterModel(form), form);<newline46mondego>                filter.getFilter().add(new DatePicker());<newline46mondego>                return filter;<newline46mondego>            }<newline46mondego><newline46mondego>        });<newline46mondego><newline46mondego>        // default filtering of String<newline46mondego>        columns.add(new TextFilteredPropertyColumn<FilterPage.Entity, FilterPage.Entity, FilterPage.Entity>(Model.of(<doubleQuotes46>Note<doubleQuotes46>), dataProvider.getFilterState(), <doubleQuotes46>note<doubleQuotes46>));<newline46mondego>        DefaultDataTable<Entity, Entity> table = new DefaultDataTable<>(<doubleQuotes46>table<doubleQuotes46>, columns, dataProvider, Integer.MAX_VALUE);<newline46mondego>        FilterToolbar filterToolbar = new FilterToolbar(table, filterForm, dataProvider);<newline46mondego>        table.addTopToolbar(filterToolbar);<newline46mondego>        filterForm.add(table);<newline46mondego>        filterForm.add(new GoAndClearFilter(<doubleQuotes46>goAndClear<doubleQuotes46>, filterForm));<newline46mondego>        add(filterForm);<newline46mondego>        add(new MyFilterResult(<doubleQuotes46>filterResult<doubleQuotes46>, filterForm.getModel()));<newline46mondego><newline46mondego>    }<newline46mondego><newline46mondego>    /**<newline46mondego>     * My own sortable data provider implementation,<newline46mondego>     * this implementation just provide a fixe list of data<newline46mondego>     * without any real sorting. <newline46mondego>     * <newline46mondego>     * @author Martin Strejc<newline46mondego>     *<newline46mondego>     */<newline46mondego>    public static class MySortableDataProvider extends SortableDataProvider<Entity, Entity> implements IFilterStateLocator<Entity> {<newline46mondego><newline46mondego>        private static final long serialVersionUID = 1L;<newline46mondego><newline46mondego>        private final List<Entity> list;<newline46mondego>        private List<Entity> filteredList;<newline46mondego><newline46mondego>        private Entity filterState = new Entity();<newline46mondego><newline46mondego>        /**<newline46mondego>         * The default constructor that creates the list<newline46mondego>         */<newline46mondego>        public MySortableDataProvider() {<newline46mondego>            super();<newline46mondego>            list = new ArrayList<>(5);<newline46mondego>            list.add(new Entity(new GregorianCalendar(2013, 5, 3).getTime(), new GregorianCalendar(2013, 5, 10).getTime(), <doubleQuotes46>the first field<doubleQuotes46>));<newline46mondego>            list.add(new Entity(new GregorianCalendar(2013, 5, 3).getTime(), new GregorianCalendar(2013, 5, 13).getTime(), <doubleQuotes46>the second field<doubleQuotes46>));<newline46mondego>            list.add(new Entity(new GregorianCalendar(2013, 7, 3).getTime(), new GregorianCalendar(2013, 8, 12).getTime(), <doubleQuotes46>the middler field<doubleQuotes46>));<newline46mondego>            list.add(new Entity(new GregorianCalendar(2013, 8, 3).getTime(), new GregorianCalendar(2013, 8, 10).getTime(), <doubleQuotes46>the field no. 4<doubleQuotes46>));<newline46mondego>            list.add(new Entity(new GregorianCalendar(2013, 11, 3).getTime(), new GregorianCalendar(2013, 12, 2).getTime(), <doubleQuotes46>the last field<doubleQuotes46>));<newline46mondego>        }<newline46mondego><newline46mondego>        public List<Entity> createFilteredList() {<newline46mondego>            List<Entity> ret = new LinkedList<>();<newline46mondego>            for(Entity e : list) {<newline46mondego>                if(filterState != null) {<newline46mondego>                    if(filterState.getStart() != null && !filterState.getStart().equals(e.getStart())) {<newline46mondego>                        continue;<newline46mondego>                    }<newline46mondego>                    if(filterState.getFinish() != null && !filterState.getFinish().equals(e.getFinish())) {<newline46mondego>                        continue;<newline46mondego>                    }<newline46mondego>                    if(filterState.getNote() != null && !filterState.getNote().equals(e.getNote())) {<newline46mondego>                        continue;<newline46mondego>                    }<newline46mondego>                }<newline46mondego>                ret.add(e);<newline46mondego>            }<newline46mondego>            return ret;<newline46mondego>        }<newline46mondego><newline46mondego>        public List<Entity> getFilteredList() {<newline46mondego>            if(filteredList == null) {<newline46mondego>                filteredList = createFilteredList();<newline46mondego>            }<newline46mondego>            return filteredList;<newline46mondego>        }<newline46mondego><newline46mondego>        @Override<newline46mondego>        public Iterator<? extends Entity> iterator(long first, long count) {<newline46mondego>            return getFilteredList().iterator();<newline46mondego>        }<newline46mondego><newline46mondego>        @Override<newline46mondego>        public long size() {<newline46mondego>            return getFilteredList().size();<newline46mondego>        }<newline46mondego><newline46mondego>        @Override<newline46mondego>        public IModel<Entity> model(Entity object) {<newline46mondego>            return Model.of(object);<newline46mondego>        }<newline46mondego><newline46mondego>        @Override<newline46mondego>        public Entity getFilterState() {<newline46mondego>            return filterState;<newline46mondego>        }<newline46mondego><newline46mondego>        @Override<newline46mondego>        public void setFilterState(Entity state) {<newline46mondego>            this.filterState = state;<newline46mondego>        }<newline46mondego><newline46mondego>        @Override<newline46mondego>        public void detach() {<newline46mondego>            super.detach();<newline46mondego>            filteredList = null;<newline46mondego>        }<newline46mondego><newline46mondego>    }<newline46mondego><newline46mondego>    public static class MyFilterResult extends WebMarkupContainer {<newline46mondego><newline46mondego>        private static final long serialVersionUID = 1L;<newline46mondego><newline46mondego>        /**<newline46mondego>         * @param id<newline46mondego>         * @param model<newline46mondego>         */<newline46mondego>        public MyFilterResult(String id, IModel<Entity> model) {<newline46mondego>            super(id, CompoundPropertyModel.of(model));<newline46mondego>            add(new Label(<doubleQuotes46>start<doubleQuotes46>));<newline46mondego>            add(new Label(<doubleQuotes46>finish<doubleQuotes46>));<newline46mondego>            add(new Label(<doubleQuotes46>note<doubleQuotes46>));<newline46mondego>        }<newline46mondego><newline46mondego><newline46mondego>    } <newline46mondego><newline46mondego>    /**<newline46mondego>     * The entity class represent any entity <newline46mondego>     * that's usable as a model object<newline46mondego>     *  <newline46mondego>     * @author Martin Strejc<newline46mondego>     *<newline46mondego>     */<newline46mondego>    public static class Entity implements Serializable {<newline46mondego><newline46mondego>        private static final long serialVersionUID = 1L;<newline46mondego><newline46mondego>        private Date start;<newline46mondego>        private Date finish;<newline46mondego>        private String note;<newline46mondego><newline46mondego><newline46mondego>        /**<newline46mondego>         * Default constructor <newline46mondego>         */<newline46mondego>        public Entity() {<newline46mondego>            super();<newline46mondego>        }<newline46mondego><newline46mondego><newline46mondego>        /**<newline46mondego>         * Constructor from all entity fields<newline46mondego>         * <newline46mondego>         * @param start<newline46mondego>         * @param finish<newline46mondego>         * @param note<newline46mondego>         */<newline46mondego>        public Entity(Date start, Date finish, String note) {<newline46mondego>            super();<newline46mondego>            this.start = start;<newline46mondego>            this.finish = finish;<newline46mondego>            this.note = note;<newline46mondego>        }<newline46mondego><newline46mondego><newline46mondego>        /**<newline46mondego>         * @return the start<newline46mondego>         */<newline46mondego>        public Date getStart() {<newline46mondego>            return start;<newline46mondego>        }<newline46mondego>        /**<newline46mondego>         * @param start the start to set<newline46mondego>         */<newline46mondego>        public void setStart(Date start) {<newline46mondego>            this.start = start;<newline46mondego>        }<newline46mondego>        /**<newline46mondego>         * @return the finish<newline46mondego>         */<newline46mondego>        public Date getFinish() {<newline46mondego>            return finish;<newline46mondego>        }<newline46mondego>        /**<newline46mondego>         * @param finish the finish to set<newline46mondego>         */<newline46mondego>        public void setFinish(Date finish) {<newline46mondego>            this.finish = finish;<newline46mondego>        }<newline46mondego>        /**<newline46mondego>         * @return the note<newline46mondego>         */<newline46mondego>        public String getNote() {<newline46mondego>            return note;<newline46mondego>        }<newline46mondego>        /**<newline46mondego>         * @param note the note to set<newline46mondego>         */<newline46mondego>        public void setNote(String note) {<newline46mondego>            this.note = note;<newline46mondego>        }<newline46mondego><newline46mondego>    }<newline46mondego><newline46mondego>}<newline46mondego>"
"10296splitHere46","20305570splitHere46","ResourceBundle bundle = ResourceBundle.getBundle(<doubleQuotes46><name of bundle><doubleQuotes46>);<newline46mondego>    System.out.println(bundle.getString(<doubleQuotes46>footer.madeby<doubleQuotes46>));<newline46mondego>"
"10297splitHere46","20305570splitHere46","Properties.store"
"10298splitHere46","20305570splitHere46","Properties myProperties = new Properties();<newline46mondego>myProperties.put(<doubleQuotes46>footer.madeby<doubleQuotes46>, <doubleQuotes46><b>test</b><doubleQuotes46>);<newline46mondego>try(Writer writer = new FileWriter(<doubleQuotes46><your properties name><doubleQuotes46>) {<newline46mondego>    myProperties.store(writer, null);<newline46mondego>}<newline46mondego>"
"10299splitHere46","20305616splitHere46","public class Bouns {<newline46mondego><newline46mondego>    final static int DEPT1_EMP = 250;<newline46mondego>    final static int DEPT2_EMP = 500;<newline46mondego>    static Scanner read = new Scanner(System.in);<newline46mondego><newline46mondego>    public static void main(String[] args) {<newline46mondego>        double[] salary_Dept1 = new double[DEPT1_EMP];<newline46mondego>        double[] salary_Dept2 = new double[DEPT2_EMP];<newline46mondego>        fillArray(salary_Dept1);<newline46mondego>        boolean done = false;<newline46mondego>        double d;<newline46mondego>        char yORn;<newline46mondego>        do {<newline46mondego>            fillArray(salary_Dept1);<newline46mondego>            System.out.println(<doubleQuotes46>Enter department: <doubleQuotes46>);<newline46mondego>            int dept = read.nextInt();<newline46mondego><newline46mondego>            if (dept == 1) {<newline46mondego>                getBonus((double) dept);    // should be getBounds<newline46mondego>            } else if (dept == 2) {<newline46mondego>                getBonus(dept);             // shoul be getBounds<newline46mondego>            }<newline46mondego>            System.out.println(<doubleQuotes46>do you want to continue ? y/n <doubleQuotes46>);<newline46mondego>            yORn = read.next.charAt(0);     // should be next()<newline46mondego>            if (yORn == 'n') {<newline46mondego>                done = true;<newline46mondego>            }<newline46mondego><newline46mondego>        } while (!done);<newline46mondego><newline46mondego>    }<newline46mondego><newline46mondego>    public static void fillArray(double[] a) {<newline46mondego>        for (int i = 0; i < a.length; i++) {<newline46mondego>            a[i] = read.nextDouble();<newline46mondego>        }<newline46mondego>    }<newline46mondego><newline46mondego>    public static void fillArray2(double[] b) {<newline46mondego>        for (int i = 0; i < a.length; i++) {    // a should be b.length<newline46mondego>            b[i] = read.nextDouble();<newline46mondego>        }<newline46mondego>    }<newline46mondego><newline46mondego>    public static void getBounds(double x) {<newline46mondego>        int num;<newline46mondego>        for (int i = 1; i <= DEPT1_EMP; i++) {<newline46mondego>            System.out.print(<doubleQuotes46>How many years have the employee No. <doubleQuotes46> + k);  // k should be i<newline46mondego>            num = read.next();   // should be nextInt()<newline46mondego>            if (num > 10) {<newline46mondego>                salary_Dept1[k] = salary_Dept1[k] + (20 / 100) * salary_Dept1[k];  // salary_Dept1 is not within scope<newline46mondego>            }                                                                      // should be declared at static class member<newline46mondego>        }<newline46mondego><newline46mondego>    }<newline46mondego><newline46mondego>    public static void getBounds(int x) {<newline46mondego>        char fORp;<newline46mondego>        for (int i = 1; i <= DEPT2_EMP; i++) {<newline46mondego>            System.out.print(<doubleQuotes46>the empolyee number <doubleQuotes46> + i + <doubleQuotes46> if s/he works full-time or part=time (F/P)?<doubleQuotes46>);<newline46mondego>            fORp = read.next.charAt(0);   // should be next()<newline46mondego>            if (fOrp == 'F') {   // fOrp should be fORp, look at your declaration<newline46mondego>                salary_Dept2[i] = salary_Dept2[i] + 700;<newline46mondego>            } else if (fOrp == 'P') {<newline46mondego>                salary_Dept2[i] = salary_Dept2[i] + 250;  // salary_Dept2 out of scopr<newline46mondego>                                                          // should be declared as static class member<newline46mondego>            }<newline46mondego><newline46mondego>        }<newline46mondego>    }<newline46mondego>}<newline46mondego>"
"10300splitHere46","20305676splitHere46","public static void union(int x, int y){<newline46mondego>    parent[x-1] = y;<newline46mondego>}<newline46mondego>"
"10301splitHere46","20305676splitHere46","public static void union(int x, int y){<newline46mondego>    x=find(x);<newline46mondego>    y=find(y);<newline46mondego>    parent[x-1] = y;<newline46mondego>}<newline46mondego>"
"10302splitHere46","20305687splitHere46","@ViewScoped"
"10303splitHere46","20305687splitHere46","service.load()"
"10304splitHere46","20305687splitHere46","@SessionScoped"
"10305splitHere46","20305687splitHere46","@ManagedProperty"
"10306splitHere46","20305687splitHere46","sessionBean.getData(persistedElement);"
"10307splitHere46","20305765splitHere46","panel.add(...);<newline46mondego>panel.revalidate();<newline46mondego>panel.repaint();<newline46mondego>"
"10308splitHere46","20305765splitHere46","changeImage(...)"
"10309splitHere46","20305781splitHere46","Integer.parseInt"
"10310splitHere46","20305781splitHere46","catch"
"10311splitHere46","20305781splitHere46","try"
"10312splitHere46","20305781splitHere46","catch"
"10313splitHere46","20305788splitHere46","private void populateListViewFromDB() {<newline46mondego><newline46mondego>    Cursor cursor = myDb.getAllRows();<newline46mondego><newline46mondego>    startManagingCursor(cursor);<newline46mondego><newline46mondego>    String[] fromFieldNames = new String[]<newline46mondego>            {GPSDatabase.COLUMN_LAT}; //I'm using only one column for tesing<newline46mondego>    int[] toViewIDs = new int[]<newline46mondego>            {R.id.latTextView};<newline46mondego><newline46mondego>    SimpleCursorAdapter myCursorAdapter = new SimpleCursorAdapter(<newline46mondego>            this,                       <newline46mondego>            R.layout.item_layout,       <newline46mondego>            cursor,                     <newline46mondego>            fromFieldNames,             <newline46mondego>            toViewIDs                   <newline46mondego>            );<newline46mondego><newline46mondego><newline46mondego>    ListView myList = (ListView) findViewById(R.id.list);<newline46mondego>    myList.setAdapter(myCursorAdapter);<newline46mondego>}<newline46mondego>"
"10314splitHere46","20305892splitHere46","Pattern pattern = Pattern.compile(<doubleQuotes46>#([^#]+)#<doubleQuotes46>);<newline46mondego>    Matcher matcher = pattern.matcher(<doubleQuotes46>I #have# #a# #string#<doubleQuotes46>);<newline46mondego>    while(matcher.find()){<newline46mondego>        String y = matcher.group(1);<newline46mondego>        // do something with y<newline46mondego>    }<newline46mondego>"
"10315splitHere46","20305892splitHere46","[^#]+"
"10316splitHere46","20305892splitHere46","group(1)"
"10317splitHere46","20305892splitHere46","matcher"
"10318splitHere46","20305892splitHere46","1"
"10319splitHere46","20305892splitHere46","#"
"10320splitHere46","20305892splitHere46","matcher.find()"
"10321splitHere46","20305899splitHere46","private final ReentrantLock mLock = new ReentrantLock();<newline46mondego><newline46mondego>void conditionalLock() {<newline46mondego>    ThreadGroup group = Thread.currentThread().getThreadGroup();<newline46mondego>    if (group.equals(groupA) || group.equals(groupB)) {<newline46mondego>        mLock.lock();<newline46mondego>    }<newline46mondego>}<newline46mondego>"
"10322splitHere46","20305899splitHere46","void conditionalUnlock() {<newline46mondego>    if (mLock.isHeldByCurrentThread()) {<newline46mondego>        mLock.unlock();<newline46mondego>    }<newline46mondego>}<newline46mondego>"
"10323splitHere46","20305899splitHere46","conditionalLock();<newline46mondego>    try {<newline46mondego>        // block you want to synchronize between threads of group A & B<newline46mondego>    } finally {<newline46mondego>        conditionalUnlock();<newline46mondego>    }<newline46mondego>"
"10324splitHere46","20306001splitHere46","Scheduler.get().scheduleDeferred()"
"10325splitHere46","20306001splitHere46","DockLayoutPanel"
"10326splitHere46","20306001splitHere46","RootPanel"
"10327splitHere46","20306001splitHere46","RootLayoutPanel"
"10328splitHere46","20306001splitHere46","DockLayoutPanel"
"10329splitHere46","20306001splitHere46","scheduleDeferred()"
"10330splitHere46","20306068splitHere46","String s = <doubleQuotes46>10.2<doubleQuotes46>;<newline46mondego>    try {<newline46mondego>        int i = Integer.parseInt(s);<newline46mondego>        //int routine<newline46mondego>        System.out.println(i);<newline46mondego>    } catch (NumberFormatException e) {<newline46mondego>        if (s.matches(<doubleQuotes46>-?\\d+(\\.\\d+)?<doubleQuotes46>)) {<newline46mondego>            double d = Double.parseDouble(s);<newline46mondego>            //double routine<newline46mondego>            System.out.println(d);<newline46mondego>        } else {<newline46mondego>            // <doubleQuotes46>Wrong value on the input area.Please use number.<doubleQuotes46> + <doubleQuotes46>\n<doubleQuotes46> + <doubleQuotes46>Check                       //diameter input.<doubleQuotes46>, <doubleQuotes46>Error message!<doubleQuotes46>,<newline46mondego>            System.out.println(<doubleQuotes46>Wrong<doubleQuotes46>);<newline46mondego>            throw new IllegalArgumentException();<newline46mondego>        }<newline46mondego>    }<newline46mondego>"
"10331splitHere46","20306072splitHere46","StudentLoan"
"10332splitHere46","20306072splitHere46","public int loanAmount"
"10333splitHere46","20306072splitHere46","for(StudentLoan loan : loans) {<newline46mondego>        int index=0;<newline46mondego>        if (loans.loanAmount > 0) {<newline46mondego>            System.out.print(index + <doubleQuotes46> : <doubleQuotes46>);<newline46mondego>            loan.printDetails();<newline46mondego>            index++;<newline46mondego>        }<newline46mondego>    }<newline46mondego>"
"10334splitHere46","20306072splitHere46","loanAmount > 0"
"10335splitHere46","20306072splitHere46","loanAmount"
"10336splitHere46","20306072splitHere46","private"
"10337splitHere46","20306072splitHere46","if (loan.getloanAmount() > 0) {<newline46mondego>"
"10338splitHere46","20306072splitHere46","loamAmount"
"10339splitHere46","20306072splitHere46","if"
"10340splitHere46","20306072splitHere46","for(StudentLoan loan : loans) {<newline46mondego>        int index=0;<newline46mondego><newline46mondego>        // print loans with amount > 0<newline46mondego><newline46mondego>        if (loan.loanAmount > 0) {<newline46mondego>            System.out.print(index + <doubleQuotes46> : <doubleQuotes46>);<newline46mondego>            loan.printDetails();<newline46mondego>            index++;<newline46mondego>        }<newline46mondego><newline46mondego>        // delete loans with amount = 0<newline46mondego><newline46mondego>        if (loan.loanAmount == 0) {<newline46mondego>           loans.remove(loan) // UNSAFE! see edit below<newline46mondego>       Â }<newline46mondego>    }<newline46mondego>"
"10341splitHere46","20306072splitHere46",".remove"
"10342splitHere46","20306072splitHere46","iterator"
"10343splitHere46","20306072splitHere46","import java.util.Iterator // add to imports<newline46mondego><newline46mondego>Iterator<StudentLoan> i = loans.iterator();<newline46mondego><newline46mondego>while (i.hasNext()) {<newline46mondego>    StudentLoan loan = i.next();<newline46mondego>    if (loan.getAmount() == 0) {<newline46mondego>        i.remove();<newline46mondego>    }<newline46mondego>}<newline46mondego>"
"10344splitHere46","20306248splitHere46","package com.whatever.utils;<newline46mondego>public class Utils {<newline46mondego>    private Context mContext;<newline46mondego>    // constructor<newline46mondego>    public Utils(Context activityContext) {<newline46mondego>        mContext = activityContext;<newline46mondego>    }<newline46mondego><newline46mondego>    public static String GetLinkss(String url) {<newline46mondego>        // your stuff<newline46mondego>    }<newline46mondego>    // other functions/methods used throughout the application<newline46mondego>}<newline46mondego>"
"10345splitHere46","20306248splitHere46","String myStringText = Utils.GetLinkss(<doubleQuotes46>my_url<doubleQuotes46>);<newline46mondego>"
"10346splitHere46","20306311splitHere46","ObjectOutputStream"
"10347splitHere46","20306333splitHere46","this.getSkin().getFont(<doubleQuotes46>default-font<doubleQuotes46>).setScale(0.33f, 0.33f);<newline46mondego>"
"10348splitHere46","20306391splitHere46","out"
"10349splitHere46","20306391splitHere46","PrintWriter"
"10350splitHere46","20306391splitHere46","outObject"
"10351splitHere46","20306391splitHere46","ObjectOutputStream"
"10352splitHere46","20306391splitHere46","PrintWriter"
"10353splitHere46","20306391splitHere46","ObjectOutputStream"
"10354splitHere46","20306412splitHere46","AbstractSet"
"10355splitHere46","20306412splitHere46","Runnable runnable = new Runnable() {<newline46mondego>    @Override public void run() {<newline46mondego>        // Put some code in here...<newline46mondego>    }<newline46mondego>};<newline46mondego>"
"10356splitHere46","20306412splitHere46","AbstractSet"
"10357splitHere46","20306416splitHere46","static void sortAlphabetical() {<newline46mondego>    String nameSwap;<newline46mondego>    int [] markSwap;<newline46mondego>    boolean flag = false;<newline46mondego>    while (!flag) {<newline46mondego>      flag = true;<newline46mondego>      for (int i = 0;i < nameArrayCount-1;i++) {<newline46mondego>        if (studentNamesArray[i].compareTo(studentNamesArray[i + 1]) > 0) {<newline46mondego>          nameSwap = studentNamesArray[i];<newline46mondego>          studentNamesArray[i] = studentNamesArray[i + 1];<newline46mondego>          studentNamesArray[i + 1] = nameSwap;<newline46mondego>          markSwap = studentMarksArray[i];<newline46mondego>          studentMarksArray[i] = studentMarksArray[i + 1];<newline46mondego>          studentMarksArray[i + 1]= markSwap;<newline46mondego>          flag = false;<newline46mondego>        }<newline46mondego>      }<newline46mondego>    }<newline46mondego>  }<newline46mondego>"
"10358splitHere46","20306500splitHere46","String.valueOf()"
"10359splitHere46","20306500splitHere46","The operator / is undefined for the argument type.<newline46mondego>"
"10360splitHere46","20306500splitHere46","<doubleQuotes46>3<doubleQuotes46> * <doubleQuotes46>3<doubleQuotes46>"
"10361splitHere46","20306500splitHere46","3 * 3"
"10362splitHere46","20306500splitHere46","String s = <doubleQuotes46>1234<doubleQuotes46>;<newline46mondego>int i = Integer.ParseInt(s);<newline46mondego>System.out.println(i * 3);<newline46mondego>"
"10363splitHere46","20306516splitHere46","if (revWord.equals(word)) {<newline46mondego>    return true;<newline46mondego>} else {<newline46mondego>    return false;<newline46mondego>}<newline46mondego>"
"10364splitHere46","20306516splitHere46","return revWord.equals(word);<newline46mondego>"
"10365splitHere46","20306630splitHere46","case SimpleGestureFilter.SWIPE_DOWN : if(navY > 0)<newline46mondego>                                            navY--;<newline46mondego>                                        prefEditor.putInt(<doubleQuotes46>navYPref<doubleQuotes46>, navY);<newline46mondego>                                        prefEditor.apply();<newline46mondego>                                        break;<newline46mondego>   case SimpleGestureFilter.SWIPE_UP : if(navY < 10)<newline46mondego>                                           navY++;<newline46mondego>                                       prefEditor.putInt(<doubleQuotes46>navYPref<doubleQuotes46>, navY);<newline46mondego>                                       prefEditor.apply();<newline46mondego>                                       break;<newline46mondego>"
"10366splitHere46","20306761splitHere46","||"
"10367splitHere46","20306761splitHere46","boolean"
"10368splitHere46","20306761splitHere46","if"
"10369splitHere46","20306761splitHere46","if (month == 2 || month == 4 || month == 6 || month == 9 || month == 11) {<newline46mondego>    // your stuff here<newline46mondego>}<newline46mondego>"
"10370splitHere46","20306761splitHere46","switch"
"10371splitHere46","20306761splitHere46","switch (month) {<newline46mondego>    case 2:<newline46mondego>    case 4:<newline46mondego>    case 8:<newline46mondego>    case 9:<newline46mondego>    case 11:<newline46mondego>       // your stuff here<newline46mondego>       break;<newline46mondego>    default:<newline46mondego>       // do nothing<newline46mondego>       break;<newline46mondego>}<newline46mondego>"
"10372splitHere46","20306761splitHere46","contains()"
"10373splitHere46","20306761splitHere46","if (java.util.Arrays.asList(2, 4, 6, 9, 11).contains(month)){<newline46mondego>    // your stuff here<newline46mondego>}<newline46mondego>"
"10374splitHere46","20306761splitHere46","if (isFullPricedMonth(month)) {<newline46mondego>    // your stuff here<newline46mondego>}<newline46mondego>"
"10375splitHere46","20306761splitHere46","public boolean isFullPricedMonth(int month) {<newline46mondego>    return month == 2 || month == 4 || month == 6 || month == 9 || month == 11;<newline46mondego>}<newline46mondego>"
"10376splitHere46","20306814splitHere46","null"
"10377splitHere46","20306814splitHere46","/"
"10378splitHere46","20306814splitHere46","catch(Exception ex) {}<newline46mondego>"
"10379splitHere46","20306814splitHere46","catch(Exception ex) {<newline46mondego>   ex.printStackTrace();<newline46mondego>}<newline46mondego>"
"10380splitHere46","20306814splitHere46","jstack"
"10381splitHere46","20306830splitHere46","c"
"10382splitHere46","20306830splitHere46","Class.getSimpleName()"
"10383splitHere46","20306830splitHere46","public void setC(Class<? extends RootType> c) {<newline46mondego>    this.c = c;<newline46mondego>}<newline46mondego>"
"10384splitHere46","20306842splitHere46","private Locale locale = Locale.UK;<newline46mondego>// 1. create calendar<newline46mondego>private Calendar cal = new GregorianCalendar(locale);<newline46mondego>private DateFormat df = DateFormat.getDateInstance(DateFormat.FULL, locale);<newline46mondego><newline46mondego>public void getThisWeeksDays() {<newline46mondego>    // 2. set calendar to the current date<newline46mondego>    cal.setTime(new Date());<newline46mondego>    cal.setFirstDayOfWeek(Calendar.SUNDAY);<newline46mondego><newline46mondego>    // 3. set calendars dOW field to the first dOW (last sunday)<newline46mondego>    cal.set(Calendar.DAY_OF_WEEK, cal.getFirstDayOfWeek());<newline46mondego><newline46mondego>    for (int i = 0; i < 7; i++) {<newline46mondego>        // 4. get some infomation<newline46mondego>        String nameOfMonth = cal.getDisplayName(Calendar.MONTH, Calendar.LONG, locale);<newline46mondego>        String nameOfDay = cal.getDisplayName(Calendar.DAY_OF_WEEK, Calendar.LONG, locale);<newline46mondego>        int dayOfMonth = cal.get(Calendar.DAY_OF_MONTH);<newline46mondego><newline46mondego>        System.out.println(dayOfMonth + <doubleQuotes46>: <doubleQuotes46> + df.format(cal.getTime()));<newline46mondego><newline46mondego>        // 5. increase day field; add() will adjust the month if neccessary<newline46mondego>        cal.add(Calendar.DAY_OF_WEEK, 1);<newline46mondego>    }<newline46mondego>}<newline46mondego>"
"10385splitHere46","20306842splitHere46","1: Sunday, 1 December 2013<newline46mondego>2: Monday, 2 December 2013<newline46mondego>3: Tuesday, 3 December 2013<newline46mondego>4: Wednesday, 4 December 2013<newline46mondego>5: Thursday, 5 December 2013<newline46mondego>6: Friday, 6 December 2013<newline46mondego>7: Saturday, 7 December 2013<newline46mondego>"
"10386splitHere46","20306852splitHere46","c:\\Python27\\bin\\python"
"10387splitHere46","20306852splitHere46","python"
"10388splitHere46","20307135splitHere46","CSVStrategy.UK_DEFAULT"
"10389splitHere46","20307135splitHere46","Reader reader = new InputStreamReader(new FileInputStream(<doubleQuotes46>persons.csv<doubleQuotes46>), <doubleQuotes46>UTF-8<doubleQuotes46>);<newline46mondego><newline46mondego>//bring in the first line with the headers if you want them<newline46mondego>List<String> firstRow = CSVHelper.parseLine(reader);<newline46mondego><newline46mondego>List<String> dataRow = CSVHelper.parseLine(reader);<newline46mondego>while (dataRow!=null) {<newline46mondego><newline46mondego>    ...put your code here to construct your objects from the strings<newline46mondego><newline46mondego>    dataRow = CSVHelper.parseLine(reader);<newline46mondego>}<newline46mondego>"
"10390splitHere46","20307228splitHere46","ScheduledExecutorService executor = Executors.newScheduledThreadPool(1, new ThreadFactory() {<newline46mondego>  public Thread newThread(Runnable r) {<newline46mondego>    final Thread result = new Thread(r);<newline46mondego>    result.setPriority(Thread.MAX_PRIORITY);<newline46mondego>    return result;<newline46mondego>  }<newline46mondego>});<newline46mondego><newline46mondego>executor.scheduleAtFixedRate(new TotallyImportantTask(), 0, 10, TimeUnit.SECONDS);<newline46mondego>"
"10391splitHere46","20307228splitHere46","Thread.sleep(x)"
"10392splitHere46","20307293splitHere46","onCreate"
"10393splitHere46","20307293splitHere46","getFragmentManager().beginTransaction().add(new MenuFragment(), <doubleQuotes46>Menu fragment<doubleQuotes46>).commit();"
"10394splitHere46","20307293splitHere46","onOptionsItemSelected"
"10395splitHere46","20307293splitHere46","boolean Return false to allow normal menu processing to proceed, true to consume it here."
"10396splitHere46","20307324splitHere46","ArrayList heapList = new ArrayList(Arrays.asList(heap));<newline46mondego>heapList.set(hole, heapList.get(child));<newline46mondego><newline46mondego>heapList.set(hole, temp);<newline46mondego><newline46mondego>heapList.set(hole, heapList.get(hole/2);<newline46mondego>"
"10397splitHere46","20307333splitHere46","System.out.println(<doubleQuotes46>Rate = E<doubleQuotes46> + df.format(rate) + <doubleQuotes46>\t<doubleQuotes46> + <doubleQuotes46>Hours = <doubleQuotes46> + hours);<newline46mondego>"
"10398splitHere46","20307347splitHere46","public static String stripQuote(String l) {<newline46mondego>    StringBuffer newLine = new StringBuffer();<newline46mondego><newline46mondego>    for (int i=0; i<l.length(); i++) {<newline46mondego>        char ch = l.charAt(i);<newline46mondego>        if (ch==8220 || ch==8221 || ch=='\<doubleQuotes46>' || ch=='\'') {<newline46mondego>            //do nothing<newline46mondego>        }<newline46mondego>        else {<newline46mondego>            newLine.append(ch);<newline46mondego>        }<newline46mondego>    }<newline46mondego>    return newLine.toString();<newline46mondego>}<newline46mondego>"
"10399splitHere46","20307347splitHere46","public static String encodeQuote(String l) {<newline46mondego>    StringBuffer newLine = new StringBuffer();<newline46mondego><newline46mondego>    for (int i=0; i<l.length(); i++) {<newline46mondego>        char ch = l.charAt(i);<newline46mondego>        if (ch==8220 || ch==8221 || ch=='\<doubleQuotes46>') {<newline46mondego>            newLine.appent(<doubleQuotes46>&quot;<doubleQuotes46>);<newline46mondego>        }<newline46mondego>        else if (ch=='<') {<newline46mondego>            newLine.appent(<doubleQuotes46>&lt;<doubleQuotes46>);<newline46mondego>        }<newline46mondego>        else if (ch=='>') {<newline46mondego>            newLine.appent(<doubleQuotes46>&gt;<doubleQuotes46>);<newline46mondego>        }<newline46mondego>        else if (ch=='\'') {<newline46mondego>            newLine.appent(<doubleQuotes46>&#39;<doubleQuotes46>);<newline46mondego>        }<newline46mondego>        else {<newline46mondego>            newLine.append(ch);<newline46mondego>        }<newline46mondego>    }<newline46mondego>    return newLine.toString();<newline46mondego>}<newline46mondego>"
"10400splitHere46","20307413splitHere46","@Override<newline46mondego>public float getPageWidth(int position) {<newline46mondego>if (position == 0) {<newline46mondego>    return(0.5f);<newline46mondego>} else {<newline46mondego>    return (1.0f);       <newline46mondego>}<newline46mondego>"
"10401splitHere46","20307492splitHere46","x"
"10402splitHere46","20307492splitHere46","y"
"10403splitHere46","20307492splitHere46","public boolean equals(Object o) {<newline46mondego>        if (this == o) return true;<newline46mondego>        if (o == null || getClass() != o.getClass()) return false;<newline46mondego><newline46mondego>        Point point = (Point) o;<newline46mondego><newline46mondego>        if (x != point.x) return false;<newline46mondego>        if (y != point.y) return false;<newline46mondego><newline46mondego>        return true;<newline46mondego>    }<newline46mondego><newline46mondego>    public int hashCode() {<newline46mondego>        int result = x;<newline46mondego>        result = 31 * result + y;<newline46mondego>        return result;<newline46mondego>    }<newline46mondego>"
"10404splitHere46","20307492splitHere46","Object"
"10405splitHere46","20307492splitHere46","As much as is reasonably practical, the hashCode method defined by<newline46mondego>     * class {@code Object} does return distinct integers for distinct<newline46mondego>     * objects. (This is typically implemented by converting the internal<newline46mondego>     * address of the object into an integer, but this implementation<newline46mondego>     * technique is not required by the<newline46mondego>     * Java<font size=<doubleQuotes46>-2<doubleQuotes46>><sup>TM</sup></font> programming language.)<newline46mondego>     *<newline46mondego>     * @return  a hash code value for this object.<newline46mondego>     * @see     java.lang.Object#equals(java.lang.Object)<newline46mondego>     * @see     java.lang.System#identityHashCode<newline46mondego>     */<newline46mondego>    public native int hashCode();<newline46mondego>"
"10406splitHere46","20307492splitHere46","new Point(1,2)"
"10407splitHere46","20307492splitHere46","new Point(1,2)"
"10408splitHere46","20307492splitHere46","Map"
"10409splitHere46","20307497splitHere46","getNullableState"
"10410splitHere46","20307497splitHere46","setNullable"
"10411splitHere46","20307497splitHere46","setNullableState"
"10412splitHere46","20307563splitHere46",".equals"
"10413splitHere46","20307563splitHere46","a.equals(b)"
"10414splitHere46","20307563splitHere46","a"
"10415splitHere46","20307563splitHere46","b"
"10416splitHere46","20307563splitHere46","MyString"
"10417splitHere46","20307563splitHere46","string"
"10418splitHere46","20307563splitHere46","equals"
"10419splitHere46","20307563splitHere46","@Override<newline46mondego>public boolean equals(Object other) {<newline46mondego>    if (other == null) { return false; }<newline46mondego>    if (!(other instanceof MyString)) { return false; }<newline46mondego>    MyString m = (MyString)other;<newline46mondego>    return this.string.equals(m.string);<newline46mondego>}<newline46mondego>"
"10420splitHere46","20307563splitHere46","hashCode"
"10421splitHere46","20307563splitHere46","Source"
"10422splitHere46","20307582splitHere46","counts[index]<newline46mondego>"
"10423splitHere46","20307582splitHere46","counts[index + 5]<newline46mondego>"
"10424splitHere46","20307582splitHere46","index"
"10425splitHere46","20307582splitHere46","a"
"10426splitHere46","20307582splitHere46","-5"
"10427splitHere46","20307582splitHere46","14"
"10428splitHere46","20307582splitHere46","0"
"10429splitHere46","20307582splitHere46","29"
"10430splitHere46","20307582splitHere46","counts"
"10431splitHere46","20307582splitHere46","5"
"10432splitHere46","20307589splitHere46","StringTokenizer"
"10433splitHere46","20307589splitHere46","// Static level, because it doesn't depend on outside state.<newline46mondego>public static List<String> getPhrases(<newline46mondego>    StringBuilder fileContent, String token) {<newline46mondego>  // An output List.<newline46mondego>  List<String> al = new ArrayList<String>();<newline46mondego>  final int p1 = fileContent.indexOf(token);<newline46mondego>  if (p1 >= 0) { // we have a <doubleQuotes46>token<doubleQuotes46><newline46mondego>    int pos1 = fileContent.indexOf(<doubleQuotes46>[<doubleQuotes46>, p1 + 1);<newline46mondego>    if (pos1 >= 0) { // we have an open <doubleQuotes46>[<doubleQuotes46><newline46mondego>      int pos2 = fileContent.indexOf(<doubleQuotes46>]<doubleQuotes46>, pos1 + 1);<newline46mondego>      if (pos2 >= 0) { // we have a closing <doubleQuotes46>]<doubleQuotes46><newline46mondego>        String str = fileContent.substring(pos1 + 1,<newline46mondego>            pos2);<newline46mondego>        StringTokenizer st = new StringTokenizer(<newline46mondego>            str, <doubleQuotes46>,<doubleQuotes46>); // Now use a Tokenizer.<newline46mondego>        while (st.hasMoreTokens()) {<newline46mondego>          String s = st.nextToken();<newline46mondego>          if (s != null) { // Don't trim a null!<newline46mondego>            al.add(s.trim());<newline46mondego>          } else { // You may not want this...<newline46mondego>            al.add(<doubleQuotes46><doubleQuotes46>);<newline46mondego>          }<newline46mondego>        }<newline46mondego>      }<newline46mondego>    }<newline46mondego>  }<newline46mondego>  // Return that output List.<newline46mondego>  return al;<newline46mondego>}<newline46mondego>"
"10434splitHere46","20307704splitHere46","result != 2 || result != -2<newline46mondego>"
"10435splitHere46","20307704splitHere46","!(result == 2 && result == -2)<newline46mondego>"
"10436splitHere46","20307704splitHere46","!(result == complete || result == gameOver)<newline46mondego>"
"10437splitHere46","20307704splitHere46","result != complete && result != gameOver<newline46mondego>"
"10438splitHere46","20307716splitHere46","gear"
"10439splitHere46","20307716splitHere46","gear"
"10440splitHere46","20307716splitHere46","cadence"
"10441splitHere46","20307716splitHere46","speed"
"10442splitHere46","20307716splitHere46","Bicycle"
"10443splitHere46","20307716splitHere46","List"
"10444splitHere46","20307716splitHere46","public class Bicyle {<newline46mondego>    // Notice we're declaring the variables outside the constructors, as fields.<newline46mondego>    int gear;<newline46mondego>    int cadence;<newline46mondego>    int speed;<newline46mondego><newline46mondego>    public Bicycle() {<newline46mondego>        // The variables are initialized (but not declared) here<newline46mondego>        gear = 1;<newline46mondego>        cadence = 10;<newline46mondego>        speed = 0;<newline46mondego>    }<newline46mondego><newline46mondego>    public someMethod() {<newline46mondego>        //Accessing gear from outside constructor<newline46mondego>        gear = gear + 1;<newline46mondego>    }<newline46mondego>}<newline46mondego>"
"10445splitHere46","20307793splitHere46","PrintWriter"
"10446splitHere46","20307793splitHere46","PrintWriter writer = new PrintWriter(<doubleQuotes46>the-file-name.txt<doubleQuotes46>, <doubleQuotes46>UTF-8<doubleQuotes46>);<newline46mondego>CustomList list = new CustomList();//not sure what your list is called<newline46mondego><newline46mondego>//iterate over list {<newline46mondego>    writer.println(list.get(currentPosition));<newline46mondego>}<newline46mondego><newline46mondego>writer.close();//saves file<newline46mondego>"
"10447splitHere46","20307793splitHere46","BufferedReader"
"10448splitHere46","20307793splitHere46","BufferedReader reader = new BufferedReader(new FileReader(<doubleQuotes46>/path/to/file.txt<doubleQuotes46>));<newline46mondego>CustomList list = new CustomList();//not sure what your list is called<newline46mondego>String line = null;<newline46mondego>while ((line = reader.readLine()) != null) {<newline46mondego>    list.add(new CustomeNode(line));<newline46mondego>}<newline46mondego>"
"10449splitHere46","20307840splitHere46","@SuppressWarnings(<doubleQuotes46>unchecked<doubleQuotes46>)<newline46mondego>"
"10450splitHere46","20307840splitHere46","public static void main(String[] args) {<newline46mondego>    DynamicMethodInvocation x = new DynamicMethodInvocation();<newline46mondego><newline46mondego>    Class<?> clX = x.getClass(); // added the generic ?<newline46mondego>    ...<newline46mondego>  } <newline46mondego>"
"10451splitHere46","20308029splitHere46","int a;<newline46mondego><newline46mondego>// a is uninitialized<newline46mondego><newline46mondego>if(r.nextInt(10) < 2)<newline46mondego>   a = 5;<newline46mondego><newline46mondego>// a has an 80% chance of still being uninitialized<newline46mondego><newline46mondego>System.out.println(a); // error: a might not be initialized.<newline46mondego>"
"10452splitHere46","20308029splitHere46","int day;<newline46mondego>// day is uninitialized<newline46mondego>if(month == 1||month == 3||...){<newline46mondego>    int z1 = r3.nextInt(30);<newline46mondego>    day = 1 + z1;<newline46mondego>}<newline46mondego>else if(month == 2||month == 4||month == 6||month == 9||month == 11){<newline46mondego>    int z2 = r3.nextInt(29);<newline46mondego>    day = 1 + z2;<newline46mondego>}<newline46mondego>else if(month == 2 & year%4 ==0){<newline46mondego>    int z3 = r3.nextInt(28);<newline46mondego>    day = 1 + z3;<newline46mondego>}<newline46mondego>else if(month == 2 & year%4 != 0){<newline46mondego>    int z4 = r3.nextInt(27);<newline46mondego>    day = 1 + z4;<newline46mondego>}<newline46mondego>// if the month wasn't between 1 and 12, day is still uninitialized<newline46mondego>"
"10453splitHere46","20308029splitHere46","month"
"10454splitHere46","20308029splitHere46","day"
"10455splitHere46","20308029splitHere46","month"
"10456splitHere46","20308029splitHere46","int day;<newline46mondego>// day is uninitialized<newline46mondego>if(month == 1||month == 3||...){<newline46mondego>    int z1 = r3.nextInt(30);<newline46mondego>    day = 1 + z1;<newline46mondego>}<newline46mondego>else if(month == 2||month == 4||month == 6||month == 9||month == 11){<newline46mondego>    int z2 = r3.nextInt(29);<newline46mondego>    day = 1 + z2;<newline46mondego>}<newline46mondego>else if(month == 2 & year%4 ==0){<newline46mondego>    int z3 = r3.nextInt(28);<newline46mondego>    day = 1 + z3;<newline46mondego>}<newline46mondego>else if(month == 2 & year%4 != 0){<newline46mondego>    int z4 = r3.nextInt(27);<newline46mondego>    day = 1 + z4;<newline46mondego>}<newline46mondego>// THIS PART IS NEW<newline46mondego>else<newline46mondego>    day = -1; // this line will never actually run<newline46mondego>"
"10457splitHere46","20308029splitHere46","day"
"10458splitHere46","20308029splitHere46","day = -1;"
"10459splitHere46","20308029splitHere46","day"
"10460splitHere46","20308029splitHere46","int day;"
"10461splitHere46","20308029splitHere46","int day = -1;"
"10462splitHere46","20308089splitHere46","while(true) {<newline46mondego>    // do something<newline46mondego>    Thread.sleep(1000); // 1 second, the parameter is miliseconds<newline46mondego>}<newline46mondego>"
"10463splitHere46","20308089splitHere46","30 * * * *<newline46mondego>"
"10464splitHere46","20308141splitHere46","doInBackground"
"10465splitHere46","20308141splitHere46","publish"
"10466splitHere46","20308141splitHere46","process"
"10467splitHere46","20308175splitHere46","void display(double[] a) // This would print individual rainfall stats in cms. <newline46mondego>{<newline46mondego>for(int i=0;i<a.length;i++)<newline46mondego> {<newline46mondego>  System.out.println(a[i]*2.54);//Modify formatting as per your requirements<newline46mondego> }<newline46mondego>}<newline46mondego>"
"10468splitHere46","20308175splitHere46","for(int i=0;i<rainfallInches.length;i++)<newline46mondego>{<newline46mondego> rainfallCms[i] = rainfallInches[i]*2.54; <newline46mondego>}// This creates new cms array<newline46mondego>"
"10469splitHere46","20308299splitHere46","String regex = <doubleQuotes46>(?<=\\s{%s})%s(?=\\s{%s})<doubleQuotes46>;<newline46mondego>String numSpaces = <doubleQuotes46>1<doubleQuotes46>;<newline46mondego>String number = <doubleQuotes46>0.3<doubleQuotes46>;<newline46mondego>String replacement = <doubleQuotes46>32.2<doubleQuotes46>;<newline46mondego>String yourString = <doubleQuotes46>1111 1.0 2222 53.5 3333 0.3 4444 541.1<doubleQuotes46>;<newline46mondego>yourString = yourString.replaceAll(String.format(regex, numSpaces, number, numSpaces),<newline46mondego>                                   replacement);<newline46mondego>System.out.println(yourString);<newline46mondego>//prints 1111 1.0 2222 53.5 3333 32.2 4444 541.1<newline46mondego>"
"10470splitHere46","20308299splitHere46","<doubleQuotes46>(?<=\\s{%s})%s(?=\\s{%s})<doubleQuotes46>"
"10471splitHere46","20308299splitHere46","(?<=\\s{1})0.3(?=\\s{1})"
"10472splitHere46","20308299splitHere46","<doubleQuotes46>0.3<doubleQuotes46>"
"10473splitHere46","20308299splitHere46","replaceAll()"
"10474splitHere46","20308299splitHere46",".replace()"
"10475splitHere46","20308299splitHere46",".replace()"
"10476splitHere46","20308299splitHere46","String.format()"
"10477splitHere46","20308309splitHere46","toArray()"
"10478splitHere46","20308309splitHere46","Object[]"
"10479splitHere46","20308309splitHere46","toArray(T[])"
"10480splitHere46","20308309splitHere46","T[]"
"10481splitHere46","20308309splitHere46","public static void main(String[] args) {<newline46mondego>    Object[] baseArray = new ArrayList<String>().toArray();<newline46mondego>    System.out.println(baseArray.getClass().getCanonicalName());<newline46mondego><newline46mondego>    String[] improvArray = new ArrayList<String>().toArray(new String[5]);<newline46mondego>    System.out.println(improvArray.getClass().getCanonicalName());<newline46mondego>}<newline46mondego>"
"10482splitHere46","20308309splitHere46","java.lang.Object[]<newline46mondego>java.lang.String[]<newline46mondego>"
"10483splitHere46","20308338splitHere46","split"
"10484splitHere46","20308338splitHere46","\\s+"
"10485splitHere46","20308338splitHere46","double alphaTotal = 0;<newline46mondego>double betaTotal = 0;<newline46mondego>double gammaTotal = 0;<newline46mondego><newline46mondego>input.nextLine();<newline46mondego>while (input.hasNextLine()) {<newline46mondego>     String line = input.nextLine();<newline46mondego>     String[] tokens = line.split(<doubleQuotes46>\\s+<doubleQuotes46>);<newline46mondego>     double raised = Double.parseDouble(tokens[1].trim());<newline46mondego><newline46mondego>     if (<doubleQuotes46>Alpha<doubleQuotes46>.equals(tokens[2])){<newline46mondego>         alphaTotal += raised;<newline46mondego>     } esle if (<doubleQuotes46>Beta<doubleQuotes46>.equals(tokens[2])) {<newline46mondego>         betaTotal += raised;<newline46mondego>     } else if (<doubleQuotes46>Gamma<doubleQuotes46>.equals(tokens[2])) {<newline46mondego>         gammaTotal += raised;<newline46mondego>     }<newline46mondego>}<newline46mondego><newline46mondego>// Print out the winner<newline46mondego>if (alphaTotal > betaTotal && alphaTotal > gammaTotal){<newline46mondego>    System.out.println(<doubleQuotes46>Team Aplha wins with $<doubleQuotes46> + alphaTotal);<newline46mondego>} else if ( .... .... .... ){<newline46mondego>    ....<newline46mondego>} else if ( .... .... .... ){<newline46mondego>    ....<newline46mondego>}<newline46mondego>"
"10486splitHere46","20308338splitHere46","tokens = {<doubleQuotes46>Peter<doubleQuotes46>, <doubleQuotes46>400.27<doubleQuotes46>, <doubleQuotes46>Alpha<doubleQuotes46>};<newline46mondego>"
"10487splitHere46","20308338splitHere46","400.27"
"10488splitHere46","20308338splitHere46","String"
"10489splitHere46","20308338splitHere46","if"
"10490splitHere46","20308383splitHere46","paintComponent"
"10491splitHere46","20308383splitHere46","nThreads"
"10492splitHere46","20308383splitHere46","// let multiple threads write all patches<newline46mondego>public BufferedImage[] writePatches(...)<newline46mondego>{<newline46mondego>    // Given data:<newline46mondego>    const int nThreads = ...;         // the amount of threads that you want<newline46mondego>    Rectangle viewBox = ...;        // The view rectangle<newline46mondego><newline46mondego>    // Immediate data:<newline46mondego>    Dimension viewSize = viewBox.getSize();<newline46mondego>    int defaultPatchHeight = (int)ceil((float)viewSize.height / nThreads);<newline46mondego>    int lastPatchHeight = viewSize.height - (nThreads-1) * defaultPatchHeight;<newline46mondego><newline46mondego>    // The actual <doubleQuotes46>buffer<doubleQuotes46> is a set of images<newline46mondego>    BufferedImage[] images = new BufferedImage[nThreads];<newline46mondego><newline46mondego>    // ...<newline46mondego><newline46mondego>    // pseudocode for parallel processing of a for loop<newline46mondego>    parallel-for (nThreads, threadId)<newline46mondego>    {<newline46mondego>        // the starting point and size of this thread's patch<newline46mondego>        // handle boundary (last) patch<newline46mondego>        int w = viewBox.width;<newline46mondego>        int h = threadId == nThread-1 ? lastPatchHeight : defaultPatchHeight;                <newline46mondego>        int x = viewBox.x;<newline46mondego>        int y = viewBox.y + threadId * defaultPatchHeight;<newline46mondego><newline46mondego>        BufferedImage patch = new BufferedImage(w, h, BufferedImage.TYPE_INT_ARGB);<newline46mondego>        Graphics2D g = off_Image.createGraphics();<newline46mondego><newline46mondego>        // use g to draw to patch image here<newline46mondego>        // better yet: Re-use existing patches and only update the parts that changed.<newline46mondego><newline46mondego>        images[threadId] = patch;<newline46mondego>    }<newline46mondego>    return images;<newline46mondego>}<newline46mondego><newline46mondego>// ...<newline46mondego><newline46mondego>// override paintComponent<newline46mondego>@Override<newline46mondego>void paintComponent(Graphics gg)<newline46mondego>{<newline46mondego>    Graphics2D g = (Graphics2D) gg;<newline46mondego>    // ...<newline46mondego><newline46mondego>    // stitch all images together (you can also just display only some images here)<newline46mondego>    for (int threadId = 0; threadId < nThreads; ++threadId)<newline46mondego>    {<newline46mondego>        int w = viewBox.width;<newline46mondego>        int h = threadId == nThread-1 ? lastPatchHeight : defaultPatchHeight;                <newline46mondego>        int x = viewBox.x;<newline46mondego>        int y = viewBox.y + threadId * defaultPatchHeight;<newline46mondego><newline46mondego>        // use pre-computed images here<newline46mondego>        BufferedImage patch = images[threadId];<newline46mondego>        g.drawImage(patch, x, y, ...);<newline46mondego>    }<newline46mondego>}<newline46mondego>"
"10493splitHere46","20308546splitHere46","windowContent"
"10494splitHere46","20308546splitHere46","JFrame"
"10495splitHere46","20308546splitHere46","frame.add(windowContent);<newline46mondego>"
"10496splitHere46","20308546splitHere46","JFrame"
"10497splitHere46","20308546splitHere46","frame.pack();"
"10498splitHere46","20308546splitHere46","frame.setExtendedState (Frame.MAXIMIZED_BOTH);"
"10499splitHere46","20308620splitHere46","Handler"
"10500splitHere46","20308620splitHere46","Handler"
"10501splitHere46","20308633splitHere46","// main layout in which you want to add textview <newline46mondego>LinearLayout main_layout=(LinearLayout)findViewById(R.id.your_main_layout);<newline46mondego><newline46mondego>// set layout params for textview<newline46mondego> LayoutParams params = new LayoutParams(<newline46mondego>                 LayoutParams.WRAP_CONTENT, LayoutParams.WRAP_CONTENT);<newline46mondego> //....<newline46mondego> textView.setLayoutParams(lparams);<newline46mondego><newline46mondego> main_layout.addView(tv);  // add textview to layout<newline46mondego>"
"10502splitHere46","20308685splitHere46","JMenu rules = new JMenu(<doubleQuotes46>Rules<doubleQuotes46>);<newline46mondego>JMenuItem jmiRules = new JMenuItem(<doubleQuotes46>Rules<doubleQuotes46>);<newline46mondego>rules.add(jmiRules);<newline46mondego>menuBar.add(rules);<newline46mondego>jmiRules.addActionListener( new rulesAction() );<newline46mondego>"
"10503splitHere46","20308685splitHere46","displayRules.setVisible(true);"
"10504splitHere46","20308685splitHere46","actionPerformed"
"10505splitHere46","20308685splitHere46","window.setVisible(true);"
"10506splitHere46","20308685splitHere46","main"
"10507splitHere46","20308722splitHere46","JTextArea textArea = new JTextArea(5, 20);<newline46mondego>"
"10508splitHere46","20308929splitHere46","List<Number>"
"10509splitHere46","20308929splitHere46","List<Integer> list = ...<newline46mondego>process(list)<newline46mondego>"
"10510splitHere46","20308929splitHere46","List<? super Integer>"
"10511splitHere46","20308929splitHere46","? super"
"10512splitHere46","20308929splitHere46","? super"
"10513splitHere46","20308929splitHere46","List<Integer> input = null;<newline46mondego>List<? super Integer> output = process(input);<newline46mondego>"
"10514splitHere46","20308929splitHere46","List<Number>"
"10515splitHere46","20308929splitHere46","List<Object>"
"10516splitHere46","20308929splitHere46","List<Number> list"
"10517splitHere46","20308929splitHere46","list.add(1L);"
"10518splitHere46","20308973splitHere46","<c:forEach var=<doubleQuotes46>item<doubleQuotes46> items=<doubleQuotes46>${copa.mSelecciones}"
"10519splitHere46","20308973splitHere46","CopaBean.getMSelecciones()"
"10520splitHere46","20308973splitHere46","M"
"10521splitHere46","20308973splitHere46","m"
"10522splitHere46","20308973splitHere46","getSomeMethod"
"10523splitHere46","20308973splitHere46","setSomeMethod"
"10524splitHere46","20308973splitHere46","public List<SeleccionBean> getmSelecciones() throws SQLException {<newline46mondego>"
"10525splitHere46","20308973splitHere46","public List<SeleccionBean> getMSelecciones() throws SQLException {<newline46mondego>"
"10526splitHere46","20308973splitHere46","SeleccionBean.getmNombre()"
"10527splitHere46","20308973splitHere46","SeleccionBean.getMNombre()"
"10528splitHere46","20309077splitHere46",".class"
"10529splitHere46","20309198splitHere46","body.getFixtureList().get(0).setSensor(true); //assuming it has only one fixture<newline46mondego>"
"10530splitHere46","20309198splitHere46","body.getFixtureList().get(0).setUserData(<doubleQuotes46>trap<doubleQuotes46>);<newline46mondego>"
"10531splitHere46","20309198splitHere46","//define the Contact listener<newline46mondego>public class MyContactListener implements ContactListener{<newline46mondego><newline46mondego>    @Override<newline46mondego>    public void beginContact(Contact contact){<newline46mondego>        if ((String)contact.getFixtureA().getUserData()==<doubleQuotes46>trap<doubleQuotes46> || (String)contact.getFixtureB().getUserData()==<doubleQuotes46>trap<doubleQuotes46>)<newline46mondego>            //hurt player<newline46mondego>    }<newline46mondego><newline46mondego>    @Override public void endContact(Contact contact){}<newline46mondego>    @Override public void preSolve(Contact contact, Manifold oldManifold){}<newline46mondego>    @Override public void postSolve(Contact contact, ContactImpulse impulse){}<newline46mondego>};<newline46mondego>"
"10532splitHere46","20309198splitHere46","MyContactListener contactListener = new MyContactListener();<newline46mondego>world.setContactListener(contactListener);<newline46mondego>"
"10533splitHere46","20309248splitHere46","mouseMoved"
"10534splitHere46","20309248splitHere46","MouseMotionListener"
"10535splitHere46","20309277splitHere46","if (e.getSource() == withdraw) {<newline46mondego>   try<newline46mondego>   {<newline46mondego>     if(getAmount(tf4) > acc1.getBalance())<newline46mondego>     {<newline46mondego>         throw InsufficientFundsException(<doubleQuotes46>Insufficient Funds<doubleQuotes46>);<newline46mondego>     }<newline46mondego>     acc1.withdraw(getAmount(tf4));<newline46mondego>     refreshFields();<newline46mondego>     status.setText(<doubleQuotes46>Withdrawal Processed<doubleQuotes46>);<newline46mondego>   }<newline46mondego>   catch(InsufficientFundsException ex)<newline46mondego>   {<newline46mondego>      //rethrow some unchecked exception like IllegalArgumentException<newline46mondego>      //or your own checked exception like EmptyFieldException <newline46mondego>      throw new EmptyFieldException(<doubleQuotes46>some message<doubleQuotes46>, ex);<newline46mondego><newline46mondego>      //or add the exception message and trace to status.<newline46mondego>      status.setText(ex.getMessage() + <doubleQuotes46>withdraw<doubleQuotes46>);<newline46mondego>   }<newline46mondego>   catch(EmptyFieldException ex)<newline46mondego>   {<newline46mondego>      status.setText(ex.getMessage() + <doubleQuotes46>withdraw<doubleQuotes46>);<newline46mondego>   }<newline46mondego>   catch(NumberFormatException ex)<newline46mondego>   {<newline46mondego>      status.setText(ex.getMessage() + <doubleQuotes46>withdraw<doubleQuotes46>);<newline46mondego>   }<newline46mondego>   catch(NegativeAmountException ex)<newline46mondego>   {<newline46mondego>     status.setText(ex.getMessage() + <doubleQuotes46>withdraw<doubleQuotes46>);<newline46mondego>   }<newline46mondego>}<newline46mondego>"
"10536splitHere46","20309277splitHere46","if(getAmount(tf4) > acc1.getBalance())<newline46mondego>     {<newline46mondego>         status.setText(<doubleQuotes46>Insufficient Funds - Withdraw cancelled<doubleQuotes46>);<newline46mondego>     }<newline46mondego>"
"10537splitHere46","20309421splitHere46","InputStream is = getClass().getResourceAsStream(<doubleQuotes46>10kaddress.txt<doubleQuotes46>);<newline46mondego>Scanner s = new Scanner(is);<newline46mondego>"
"10538splitHere46","20309614splitHere46","O(1)"
"10539splitHere46","20309614splitHere46","O(1)"
"10540splitHere46","20309648splitHere46","params.add(new BasicNameValuePair(TAG_PNUM, temp));<newline46mondego>"
"10541splitHere46","20309648splitHere46","System.out.println(args[0]);<newline46mondego>"
"10542splitHere46","20309648splitHere46","System.out.println(args[0]);"
"10543splitHere46","20309648splitHere46","params.add(new BasicNameValuePair(TAG_PNUM, temp));"
"10544splitHere46","20309735splitHere46",".get(x).set(y, value);<newline46mondego>"
"10545splitHere46","20309763splitHere46","private static final Pattern DECIMAL = Pattern.compile(<doubleQuotes46>\\d*\\.?\\d+<doubleQuotes46>);<newline46mondego>private static final Pattern FRACTION = Pattern.compile(<doubleQuotes46>\\.\\d+(\\s+\\d+/\\d+)<doubleQuotes46>);<newline46mondego><newline46mondego>public static void main(String args[]) {<newline46mondego>    String[] samples = {<doubleQuotes46>0000.2<doubleQuotes46>, <doubleQuotes46>2<doubleQuotes46>, <doubleQuotes46>2.222 1/2<doubleQuotes46>, <doubleQuotes46>1 2/2<doubleQuotes46>, <doubleQuotes46>0<doubleQuotes46>};<newline46mondego><newline46mondego>    for (String sample : samples) {<newline46mondego>        if (DECIMAL.matcher(sample).matches()) {<newline46mondego>            float decimal = Float.parseFloat(sample);<newline46mondego>            System.out.println(decimal + (decimal == 0 ? <doubleQuotes46>\tERROR/Zero<doubleQuotes46> : <doubleQuotes46>\tDecimal<doubleQuotes46>));<newline46mondego>        }<newline46mondego>        else {<newline46mondego>            String fraction = FRACTION.matcher(sample).replaceFirst(<doubleQuotes46>$1<doubleQuotes46>);<newline46mondego>            System.out.println(fraction + <doubleQuotes46>\tFraction<doubleQuotes46>);<newline46mondego>        }<newline46mondego>    }<newline46mondego>}<newline46mondego>"
"10546splitHere46","20309778splitHere46","ComponentListener"
"10547splitHere46","20309778splitHere46","JFrame"
"10548splitHere46","20309778splitHere46","componentResized"
"10549splitHere46","20309778splitHere46","Image.getScaledInstance"
"10550splitHere46","20309778splitHere46","JFrame"
"10551splitHere46","20310011splitHere46","setDrawSelectorOnTop(boolean)"
"10552splitHere46","20310011splitHere46","selector"
"10553splitHere46","20310011splitHere46","selector"
"10554splitHere46","20310011splitHere46","GridView"
"10555splitHere46","20310011splitHere46","behind"
"10556splitHere46","20310011splitHere46","setDrawSelectorOnTop(true)"
"10557splitHere46","20310011splitHere46","setDrawSelectorOnTop(boolean)"
"10558splitHere46","20310011splitHere46","true"
"10559splitHere46","20310011splitHere46","false"
"10560splitHere46","20310011splitHere46","GridView gridView = (GridView)view.findViewById(R.id.gridview);<newline46mondego>gridView.setDrawSelectorOnTop(true);<newline46mondego><newline46mondego>// Make GridView use your custom selector drawable<newline46mondego>gridView.setSelector(getResources().getDrawable(R.drawable.selector));<newline46mondego>"
"10561splitHere46","20310011splitHere46","picture.setBackgroundResource(R.drawable.selector);<newline46mondego>"
"10562splitHere46","20310011splitHere46","@Override<newline46mondego>public View getView(int i, View view, ViewGroup viewGroup) {<newline46mondego>    View v = view;<newline46mondego>    ImageView picture;<newline46mondego><newline46mondego>    ....<newline46mondego>    ....<newline46mondego><newline46mondego>    LayerDrawable ld = new LayerDrawable(new Drawable[] <newline46mondego><newline46mondego>                           // Drawable from item<newline46mondego>                           { getResources().getDrawable(item.drawableId), <newline46mondego><newline46mondego>                           // Selector<newline46mondego>                           getResources().getDrawable(R.drawable.selector)});<newline46mondego><newline46mondego>    // Set the LayerDrawable<newline46mondego>    picture.setImageDrawable(ld);<newline46mondego><newline46mondego>    // Don't need this<newline46mondego>    // picture.setBackgroundResource(R.drawable.selector);<newline46mondego><newline46mondego>    return v;<newline46mondego>}<newline46mondego>"
"10563splitHere46","20310147splitHere46","public class Low20 {<newline46mondego>    private List<Integer> list = new ArrayList<Integer>();<newline46mondego><newline46mondego>    public static final void main(String[] args) {<newline46mondego>        new Low20();<newline46mondego>    }<newline46mondego><newline46mondego>    public Low20() {<newline46mondego>        Random random = new Random();<newline46mondego>        for (int x=0;x<100000;x++) {<newline46mondego>            add(random.nextInt(100000));<newline46mondego>        }<newline46mondego>        System.out.println(list);<newline46mondego>    }<newline46mondego><newline46mondego>    public void add(int value) {<newline46mondego>        if (list.size() < 20) {<newline46mondego>            list.add(value);<newline46mondego>        } else {<newline46mondego>            for (int x=0;x<list.size();x++) {<newline46mondego>                if (list.get(x) > value) {<newline46mondego>                    list.remove(x);<newline46mondego>                    list.add(value);<newline46mondego>                    return;<newline46mondego>                }<newline46mondego>            }<newline46mondego>        }<newline46mondego>    }<newline46mondego>}<newline46mondego>"
"10564splitHere46","20310204splitHere46","filterByS"
"10565splitHere46","20310204splitHere46","PetManament"
"10566splitHere46","20310204splitHere46","p.Filter(0)==k"
"10567splitHere46","20310204splitHere46","return"
"10568splitHere46","20310223splitHere46","JTextField#requestFocusInWindow"
"10569splitHere46","20310227splitHere46","Jtable"
"10570splitHere46","20310227splitHere46","Jtable"
"10571splitHere46","20310227splitHere46","JComboBox"
"10572splitHere46","20310227splitHere46","ActionListener"
"10573splitHere46","20310227splitHere46","phoneBrandCombo"
"10574splitHere46","20310227splitHere46","ItemListener"
"10575splitHere46","20310227splitHere46","phoneBrandCombo.addItemListener(new ItemListener() {<newline46mondego><newline46mondego>        @Override<newline46mondego>        public void itemStateChanged(ItemEvent arg0) {<newline46mondego>            if(arg0.getStateChange() == ItemEvent.SELECTED){<newline46mondego>                Object object = ((JComboBox)arg0.getSource()).getSelectedItem();<newline46mondego>                //loadDataFromDBToTable(object);<newline46mondego>            }<newline46mondego>        }<newline46mondego>    });<newline46mondego>"
"10576splitHere46","20310227splitHere46","loadDataFromDBToTable(object);"
"10577splitHere46","20310227splitHere46","JTable"
"10578splitHere46","20310227splitHere46","object"
"10579splitHere46","20310227splitHere46","JTable"
"10580splitHere46","20310227splitHere46","JComboBox"
"10581splitHere46","20310250splitHere46","Runnable"
"10582splitHere46","20310250splitHere46","Platform.runLater(new Runnable() {<newline46mondego>    public void run() {<newline46mondego>        data.cons.setText(newText);<newline46mondego>    }<newline46mondego>});<newline46mondego>"
"10583splitHere46","20310396splitHere46","isComplete"
"10584splitHere46","20310396splitHere46","main"
"10585splitHere46","20310619splitHere46","byte[] bytes = new byte[(int)file.length()];<newline46mondego><newline46mondego>FileInputStream in = new FileInputStream(file);<newline46mondego>in.read(bytes);<newline46mondego>in.close();<newline46mondego><newline46mondego>char[] text = new char[bytes.length];<newline46mondego>for (int i = 0; i < bytes.length; i++) {<newline46mondego>    text[i] = (char)(bytes[i] & 0xFF);<newline46mondego>}<newline46mondego><newline46mondego>for (String line : new String(text).split(<doubleQuotes46>\n<doubleQuotes46>)) {<newline46mondego>    //<newline46mondego>}<newline46mondego>"
"10586splitHere46","20310619splitHere46","StringBuilder line = new StringBuilder(1024);<newline46mondego>FileInputStream in = new FileInputStream(file);<newline46mondego><newline46mondego>int next;<newline46mondego><newline46mondego>boolean lb = true;<newline46mondego><newline46mondego>while ((next = in.read()) != -1) {<newline46mondego><newline46mondego>    if (next == 0xD || next == 0xA) {<newline46mondego><newline46mondego>        // skip if there are multiple line breaks<newline46mondego>        if (lb) continue;<newline46mondego><newline46mondego>        lb = true;<newline46mondego>        sendNextLineSomewhere(line.toString());<newline46mondego><newline46mondego>        // avoid new object creations<newline46mondego>        line.delete(0, line.length());<newline46mondego><newline46mondego>    } else {<newline46mondego><newline46mondego>        lb = false;<newline46mondego>        line.append((char)next);<newline46mondego>    }<newline46mondego>}<newline46mondego><newline46mondego>in.close();<newline46mondego>"
"10587splitHere46","20310793splitHere46","TweetRequest"
"10588splitHere46","20310793splitHere46","JsonRequest"
"10589splitHere46","20310793splitHere46","TweetRequest"
"10590splitHere46","20310793splitHere46","JsonArrayRequest"
"10591splitHere46","20310793splitHere46","JsonObject"
"10592splitHere46","20310793splitHere46","JsonArray"
"10593splitHere46","20310793splitHere46","public class TweetsRequest extends JsonArrayRequest {<newline46mondego>    // basically the same implementation you have now<newline46mondego>}<newline46mondego>"
"10594splitHere46","20310793splitHere46","JsonArray"
"10595splitHere46","20310793splitHere46","JSONObject"
"10596splitHere46","20310793splitHere46","TweetJsonListener"
"10597splitHere46","20310793splitHere46","private class TweetJsonListener implements Listener<JSONArray> {<newline46mondego><newline46mondego>    @Override<newline46mondego>    public void onResponse(JSONArray response) {<newline46mondego>        JSONObject jsonObject = null;<newline46mondego>        JSONArray tweets = response.optJSONArray(<doubleQuotes46>statuses<doubleQuotes46>);<newline46mondego>        int count = tweets != null ? tweets.length() : 0;<newline46mondego>        for (int i = 0; i < count; i++) {<newline46mondego>            jsonObject = tweets.optJSONObject(i);<newline46mondego>        if (jsonObject != null) {<newline46mondego>            tweetAdapter.add(jsonObject);<newline46mondego>        }<newline46mondego><newline46mondego>        activity.setProgressBarIndeterminateVisibility(false);<newline46mondego><newline46mondego>    }<newline46mondego>}<newline46mondego>"
"10598splitHere46","20310855splitHere46","package prod;<newline46mondego>public class Product {<newline46mondego>    static String product;<newline46mondego>    public void putProduct(String product) {<newline46mondego>        Product.product = product;<newline46mondego>"
"10599splitHere46","20310855splitHere46","static"
"10600splitHere46","20310855splitHere46","Product"
"10601splitHere46","20310855splitHere46","Product p = new Product();<newline46mondego>        p.putProduct(<doubleQuotes46>Consumer product<doubleQuotes46>);<newline46mondego>"
"10602splitHere46","20310855splitHere46","Product"
"10603splitHere46","20310964splitHere46","askCarType()"
"10604splitHere46","20310964splitHere46","askSolarPanel()"
"10605splitHere46","20310964splitHere46","CalculateCost()"
"10606splitHere46","20310964splitHere46","typeOfCarCost"
"10607splitHere46","20310964splitHere46","SolarPanelCost"
"10608splitHere46","20310964splitHere46","calculateDiscount"
"10609splitHere46","20310964splitHere46","public static int calculateDiscount(String typeOfCarSelected, String SolarPanelSelected) {<newline46mondego>        int Discount = 0;<newline46mondego>        if ((typeOfCarSelected.equals(<doubleQuotes46>Electric<doubleQuotes46>) || typeOfCarSelected.equals(<doubleQuotes46>electric<doubleQuotes46>)) && ((SolarPanelSelected.equals(<doubleQuotes46>Yes<doubleQuotes46>) || SolarPanelSelected.equals(<doubleQuotes46>yes<doubleQuotes46>)))) {<newline46mondego>            Discount = 500;<newline46mondego>        } else {<newline46mondego>            Discount = 0;<newline46mondego>        }<newline46mondego>        return Discount;<newline46mondego>    }//ends calculateDiscount<newline46mondego>"
"10610splitHere46","20310964splitHere46","CalculateCost()"
"10611splitHere46","20310964splitHere46","public static int CalculateCost() {<newline46mondego>        String typeOfCarCost = askCarType();<newline46mondego>        String SolarPanelCost = askSolarPanel();<newline46mondego>        final int basicPrice = 20000;<newline46mondego>        final int ElectricModel = 2000;<newline46mondego>        final int SolarPanel = 5000;<newline46mondego>        final int Discount = calculateDiscount(typeOfCarCost, SolarPanelCost);/////here you send the input fromthe user to this method without needing to call it again<newline46mondego>        int total = 0;<newline46mondego>        ....<newline46mondego>  }<newline46mondego>"
"10612splitHere46","20311020splitHere46","Swing"
"10613splitHere46","20311020splitHere46","actionListener"
"10614splitHere46","20311020splitHere46","JTextField.getText()"
"10615splitHere46","20311020splitHere46","setEmpName"
"10616splitHere46","20311020splitHere46","Methods yourObject = new Methods();"
"10617splitHere46","20311020splitHere46","yourObject.setEmpName(EmployeeName.getText())"
"10618splitHere46","20311020splitHere46","import javax.swing.*;<newline46mondego>import java.awt.*;<newline46mondego>import java.awt.event.*;<newline46mondego><newline46mondego>public class MainFrame extends JFrame implements ActionListener  <newline46mondego> {<newline46mondego><newline46mondego>   //UI Components Declaration<newline46mondego><newline46mondego><newline46mondego>   JLabel EmpInfL = new JLabel(<doubleQuotes46>Employee Info:<doubleQuotes46>);<newline46mondego>   JLabel SalDedL = new JLabel(<doubleQuotes46>Salary Deduction:<doubleQuotes46>);<newline46mondego>   JLabel IDCL = new JLabel(<doubleQuotes46>ID Card<doubleQuotes46>);<newline46mondego>   JLabel sayHelloLabel = new JLabel(<doubleQuotes46><doubleQuotes46>);<newline46mondego>   JTextField EmpInfTF = new JTextField(8);<newline46mondego>   JTextField SalDedTF = new JTextField(9);<newline46mondego>   JTextField IDCTF = new JTextField(8);<newline46mondego><newline46mondego>   JButton OkB = new JButton();<newline46mondego>   JButton ClearB = new JButton();<newline46mondego><newline46mondego>   String EmployeeName<newline46mondego>   int SalaryDeduction;<newline46mondego>   int IDCard;<newline46mondego><newline46mondego>   //Constructor<newline46mondego>   public MainFrame() {<newline46mondego><newline46mondego>   super(<doubleQuotes46>Programming Activity<doubleQuotes46>);<newline46mondego>   setSize(300,100);<newline46mondego>   setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);<newline46mondego>   setVisible(true);<newline46mondego>   setLayout(new FlowLayout());<newline46mondego><newline46mondego>   add(EmpInfL);<newline46mondego>   add(EmpInfTF);<newline46mondego><newline46mondego><newline46mondego>   add(SalDedL);<newline46mondego>   add(SalDedTF);<newline46mondego><newline46mondego><newline46mondego>   add(IDCL);<newline46mondego>   add(IDCTF);<newline46mondego>   add(sayHelloLabel);<newline46mondego><newline46mondego>   OkB.addActionListener(this);<newline46mondego>   }<newline46mondego><newline46mondego>   public void actionPerformed(ActionEvent e)<newline46mondego>   {<newline46mondego>   Methods SetGet = new Methods();<newline46mondego><newline46mondego>   SetGet.setEmpName(EmpInfTF.getText());<newline46mondego>   sayHelloLabel.setText(<doubleQuotes46>Hello, <doubleQuotes46>+SetGet.getEmpName());<newline46mondego><newline46mondego>   }<newline46mondego><newline46mondego><newline46mondego>      public static void main(String [] args)<newline46mondego>         {<newline46mondego><newline46mondego>        new MainFrame();<newline46mondego>         }<newline46mondego>}<newline46mondego>"
"10619splitHere46","20311230splitHere46","ss << <doubleQuotes46>db already exists with different case other: [<doubleQuotes46> << duplicate << <doubleQuotes46>] me [<doubleQuotes46> << _name << <doubleQuotes46>]<doubleQuotes46>;<newline46mondego>"
"10620splitHere46","20311358splitHere46","Multipart multipart = (Multipart)message.getContent();"
"10621splitHere46","20311370splitHere46","InputStream is = new FileInputStream(<doubleQuotes46>file.eml<doubleQuotes46>);<newline46mondego>MimeMessage message = new MimeMessage(session,is);<newline46mondego>"
"10622splitHere46","20311410splitHere46","Date date = new Date();<newline46mondego>SimpleDateFormat sdf = new SimpleDateFormat(<doubleQuotes46>h:mm a<doubleQuotes46>);<newline46mondego>String currentTime = sdf.format(date);<newline46mondego>"
"10623splitHere46","20311513splitHere46","Font"
"10624splitHere46","20311514splitHere46","public static void readFileByLine(String fileName) {<newline46mondego>  try {<newline46mondego>   File file = new File(fileName);<newline46mondego>   Scanner scanner = new Scanner(file);<newline46mondego>   while (scanner.hasNext()) {<newline46mondego>    System.out.println(scanner.next());<newline46mondego>   }<newline46mondego>   scanner.close();<newline46mondego>  } catch (FileNotFoundException e) {<newline46mondego>   e.printStackTrace();<newline46mondego>  } <newline46mondego> }<newline46mondego>"
"10625splitHere46","20311514splitHere46","scanner.useDelimiter(System.getProperty(<doubleQuotes46>line.separator<doubleQuotes46>));<newline46mondego>"
"10626splitHere46","20311514splitHere46","a<newline46mondego>Ã <newline46mondego>abaissa<newline46mondego>abaissable<newline46mondego>abaissables<newline46mondego>abaissai<newline46mondego>abaissaient<newline46mondego>abaissais<newline46mondego>abaissait<newline46mondego>"
"10627splitHere46","20311514splitHere46","File file = new File(<doubleQuotes46>/home/keerthivasan/Desktop/input.txt<doubleQuotes46>);<newline46mondego>     Scanner scr = null;<newline46mondego>         try {<newline46mondego>            scr = new Scanner(file);<newline46mondego>            while(scr.hasNext()){<newline46mondego>                System.out.println(<doubleQuotes46>line : <doubleQuotes46>+scr.next());<newline46mondego>            }<newline46mondego>        } catch (FileNotFoundException ex) {<newline46mondego>            Logger.getLogger(ScannerTest.class.getName()).log(Level.SEVERE, null, ex);<newline46mondego>        }<newline46mondego>"
"10628splitHere46","20311514splitHere46","line : a<newline46mondego>line : Ã <newline46mondego>line : abaissa<newline46mondego>line : abaissable<newline46mondego>line : abaissables<newline46mondego>line : abaissai<newline46mondego>line : abaissaient<newline46mondego>line : abaissais<newline46mondego>line : abaissait<newline46mondego>"
"10629splitHere46","20311514splitHere46","scr = new Scanner(file);<newline46mondego> scr.useDelimiter(<doubleQuotes46>\r\n<doubleQuotes46>);<newline46mondego>"
"10630splitHere46","20311582splitHere46","LayoutInflater inflater = getLayoutInflater();<newline46mondego>    View view = inflater.inflate(R.layout.popup_window, null);<newline46mondego>    TextView tv = (TextView)view.findViewById(R.id.yourTextID);<newline46mondego>    tv.setText()<newline46mondego>"
"10631splitHere46","20311591splitHere46","int iclean = (iinc == 1) ? i : this.nx - 1 - i<newline46mondego>txnext = txmin + ((iclean + 1) * dtx); (for i, j, k)<newline46mondego>"
"10632splitHere46","20311591splitHere46","txnext = txmin + ((i + 1) * dtx);<newline46mondego>"
"10633splitHere46","20311591splitHere46","txnext = txmin + (i+(iinc + 1)/2)*dtx<newline46mondego>"
"10634splitHere46","20311616splitHere46","<servlet-mapping><newline46mondego>    <servlet-name>index</servlet-name><newline46mondego>    <url-pattern>/index/*</url-pattern><newline46mondego></servlet-mapping><newline46mondego>"
"10635splitHere46","20311616splitHere46","http://server.com/index/resource/name"
"10636splitHere46","20311733splitHere46","main"
"10637splitHere46","20311733splitHere46","public class Numbers {<newline46mondego><newline46mondego>private static final String[] s = new String[]{ <doubleQuotes46>0<doubleQuotes46>,<doubleQuotes46>.<doubleQuotes46>,<doubleQuotes46>.0<doubleQuotes46>,<doubleQuotes46>.01<doubleQuotes46>,<doubleQuotes46>1.<doubleQuotes46>,<doubleQuotes46>1.0<doubleQuotes46>,<doubleQuotes46>1.01<doubleQuotes46>, <doubleQuotes46>1 <doubleQuotes46>,<doubleQuotes46>1 1<doubleQuotes46>,<doubleQuotes46>1/2<doubleQuotes46>,<doubleQuotes46>1/<doubleQuotes46>,<doubleQuotes46>1/0<doubleQuotes46>, <doubleQuotes46>1 1/1<doubleQuotes46>, <doubleQuotes46>1 0/0<doubleQuotes46>,<doubleQuotes46>1 /<doubleQuotes46>,<doubleQuotes46>1 /0<doubleQuotes46>, <doubleQuotes46>1 0/<doubleQuotes46>};<newline46mondego><newline46mondego>    private static final Pattern FRACTION_PATTERN = Pattern.compile(<doubleQuotes46>(?:(\\d+)\\s+)?(\\d+)/(\\d+)<doubleQuotes46>);<newline46mondego><newline46mondego>    public static void main(String[] args) {<newline46mondego>        int counter = 0;<newline46mondego>        for (String value : s) {<newline46mondego>            counter++;<newline46mondego>            String trimmedValue = value.trim();<newline46mondego>            if (isNumber(trimmedValue)) {<newline46mondego>                System.out.printf(<doubleQuotes46>%d) %s ---- Natural number%n<doubleQuotes46>, counter, trimmedValue);<newline46mondego>                continue;<newline46mondego>            }<newline46mondego><newline46mondego>            boolean parseDecimal = isProbablyDecimal(trimmedValue);<newline46mondego>            boolean parseFraction = isProbablyFraction(trimmedValue);<newline46mondego><newline46mondego>            if (parseDecimal && parseFraction) {<newline46mondego>                System.out.printf(<doubleQuotes46>%d) %s ---- Error (both decimal & fraction)%n<doubleQuotes46>, counter, trimmedValue);<newline46mondego>                continue;<newline46mondego>            }<newline46mondego><newline46mondego>            if (parseDecimal) {<newline46mondego>                if (!trimmedValue.matches(<doubleQuotes46>\\d*[.]\\d+<doubleQuotes46>)) {<newline46mondego>                    System.out.printf(<doubleQuotes46>%d) %s ---- Error (invalid decimal)%n<doubleQuotes46>, counter, trimmedValue);<newline46mondego>                    continue;<newline46mondego>                }<newline46mondego>                System.out.printf(<doubleQuotes46>%d) %s ---- Decimal value%n<doubleQuotes46>, counter, trimmedValue);<newline46mondego>                continue;<newline46mondego>            }<newline46mondego><newline46mondego>            if (parseFraction) {<newline46mondego>                Matcher m = FRACTION_PATTERN.matcher(trimmedValue);<newline46mondego>                if (!m.matches()) {<newline46mondego>                    System.out.printf(<doubleQuotes46>%d) %s ---- Error (invalid faction)%n<doubleQuotes46>, counter, trimmedValue);<newline46mondego>                    continue;<newline46mondego>                }<newline46mondego>                if (Integer.valueOf(m.group(3)) == 0) {<newline46mondego>                    System.out.printf(<doubleQuotes46>%d) %s ---- Error (division by zero in fraction)%n<doubleQuotes46>, counter, trimmedValue);<newline46mondego>                    continue;<newline46mondego>                }<newline46mondego>                if (m.group(1) != null) {<newline46mondego>                    System.out.printf(<doubleQuotes46>%d) %s ---- Mixed fraction%n<doubleQuotes46>, counter, trimmedValue);<newline46mondego>                    continue;<newline46mondego>                }<newline46mondego><newline46mondego>                System.out.printf(<doubleQuotes46>%d) %s ---- Fraction%n<doubleQuotes46>, counter, trimmedValue);<newline46mondego>                continue;<newline46mondego>            }<newline46mondego><newline46mondego>            System.out.printf(<doubleQuotes46>%d) %s ---- Error (Cannot make bread out of it)%n<doubleQuotes46>, counter, trimmedValue);<newline46mondego>            continue;<newline46mondego><newline46mondego>        }<newline46mondego>    }<newline46mondego><newline46mondego>    public static boolean isNumber(String value) {<newline46mondego>        return value.matches(<doubleQuotes46>\\d+<doubleQuotes46>);<newline46mondego>    }<newline46mondego><newline46mondego>    public static boolean isProbablyDecimal(String value) {<newline46mondego>        // note, some countries use comma instead of dot<newline46mondego>        return value.contains(<doubleQuotes46>.<doubleQuotes46>);<newline46mondego>    }<newline46mondego><newline46mondego>    public static boolean isProbablyFraction(String value) {<newline46mondego>        return value.contains(<doubleQuotes46>/<doubleQuotes46>);<newline46mondego>    }<newline46mondego>}<newline46mondego>"
"10638splitHere46","20311733splitHere46","1) 0 ---- Natural number<newline46mondego>2) . ---- Error (invalid decimal)<newline46mondego>3) .0 ---- Decimal value<newline46mondego>4) .01 ---- Decimal value<newline46mondego>5) 1. ---- Error (invalid decimal)<newline46mondego>6) 1.0 ---- Decimal value<newline46mondego>7) 1.01 ---- Decimal value<newline46mondego>8) 1 ---- Natural number<newline46mondego>9) 1 1 ---- Error (Cannot make bread out of it)<newline46mondego>10) 1/2 ---- Fraction<newline46mondego>11) 1/ ---- Error (invalid faction)<newline46mondego>12) 1/0 ---- Error (division by zero in fraction)<newline46mondego>13) 1 1/1 ---- Mixed fraction<newline46mondego>14) 1 0/0 ---- Error (division by zero in fraction)<newline46mondego>15) 1 / ---- Error (invalid faction)<newline46mondego>16) 1 /0 ---- Error (invalid faction)<newline46mondego>17) 1 0/ ---- Error (invalid faction)<newline46mondego>"
"10639splitHere46","20311745splitHere46","int"
"10640splitHere46","20311745splitHere46","c"
"10641splitHere46","20311745splitHere46","int max = Integer.MIN_VALUE;<newline46mondego>while (strTok.hasMoreTokens()) {<newline46mondego>    int value = Integer.parseInt(strTok.nextToken());<newline46mondego>    if (value > max) {<newline46mondego>        max = value;<newline46mondego>    }<newline46mondego>}<newline46mondego>"
"10642splitHere46","20311745splitHere46","List<Integer>"
"10643splitHere46","20311745splitHere46","// First parse everything...<newline46mondego>List<Integer> values = new ArrayList<>();<newline46mondego>while (strTok.hasMoreTokens()) {<newline46mondego>    values.add(Integer.parse(strTok.nextToken());<newline46mondego>}<newline46mondego><newline46mondego>// Then you can find the maximum value in the list<newline46mondego>"
"10644splitHere46","20311848splitHere46","listData.remove(postion);    // this will remove the item from the ArrayList <newline46mondego><newline46mondego>adapter.notifyDataSetChanged();  //this will refresh your adapter<newline46mondego>"
"10645splitHere46","20311887splitHere46","O(N^2)"
"10646splitHere46","20311887splitHere46","N + (N-1) + (N-2) + 1 = N ( N + 1 ) / 2"
"10647splitHere46","20311906splitHere46","Arrays.sort(rosterAsArray,<newline46mondego>    (a, b) -> Person.compareByAge(a, b)<newline46mondego>);<newline46mondego>"
"10648splitHere46","20311906splitHere46","Arrays.sort(rosterAsArray, Person::compareByAge);<newline46mondego>"
"10649splitHere46","20311995splitHere46","json-rpc-2.0 jar"
"10650splitHere46","20311995splitHere46","WEB-INF/lib"
"10651splitHere46","20312081splitHere46","HashSet"
"10652splitHere46","20312081splitHere46","HashMap"
"10653splitHere46","20312081splitHere46","equals"
"10654splitHere46","20312122splitHere46","\bpid=\d+(&|$)<newline46mondego>"
"10655splitHere46","20312197splitHere46","Unit1<newline46mondego>10.00<newline46mondego>40.00<newline46mondego>15.00<newline46mondego>40.00<newline46mondego>15.00<newline46mondego>40.00<newline46mondego>15.00<newline46mondego>40.00<newline46mondego>15.00<newline46mondego>Unit1<newline46mondego>10.00<newline46mondego>40.00<newline46mondego>15.00<newline46mondego>40.00<newline46mondego>15.00<newline46mondego>40.00<newline46mondego>15.00<newline46mondego>40.00<newline46mondego>15.00<newline46mondego>"
"10656splitHere46","20312197splitHere46","inFile.nextLine()"
"10657splitHere46","20312197splitHere46","double Unit1Assistant4rate = inFile.nextDouble();"
"10658splitHere46","20312197splitHere46","String Unit1 = inFile.nextLine();<newline46mondego>    double NumberofAssistantsUnit1 = inFile.nextDouble();<newline46mondego>    double Unit1Assistant1hours = inFile.nextDouble();<newline46mondego>    double Unit1Assistant1rate = inFile.nextDouble();<newline46mondego>    double Unit1Assistant2hours = inFile.nextDouble();<newline46mondego>    double Unit1Assistant2rate = inFile.nextDouble();<newline46mondego>    double Unit1Assistant3hours = inFile.nextDouble();<newline46mondego>    double Unit1Assistant3rate = inFile.nextDouble();<newline46mondego>    double Unit1Assistant4hours = inFile.nextDouble();<newline46mondego>    double Unit1Assistant4rate = inFile.nextDouble();<newline46mondego><newline46mondego>    inFile.nextLine();<newline46mondego><newline46mondego>    String Unit2 = inFile.nextLine();<newline46mondego>    double NumberofAssistantsUnit2 = inFile.nextDouble();<newline46mondego>    double Unit2Assistant1hours = inFile.nextDouble();<newline46mondego>    double Unit2Assistant1rate = inFile.nextDouble();<newline46mondego>    double Unit2Assistant2hours = inFile.nextDouble();<newline46mondego>    double Unit2Assistant2rate = inFile.nextDouble();<newline46mondego>    double Unit2Assistant3hours = inFile.nextDouble();<newline46mondego>    double Unit2Assistant3rate = inFile.nextDouble();<newline46mondego>    double Unit2Assistant4hours = inFile.nextDouble();<newline46mondego>    double Unit2Assistant4rate = inFile.nextDouble();<newline46mondego><newline46mondego>    System.out.println(<doubleQuotes46>This works fine<doubleQuotes46>);<newline46mondego>"
"10659splitHere46","20312197splitHere46","inFile.nextLine()"
"10660splitHere46","20312197splitHere46","double NumberofAssistantsUnit2 = inFile.nextDouble();"
"10661splitHere46","20312197splitHere46","String Unit2 = inFile.nextLine();"
"10662splitHere46","20312197splitHere46","nextDouble()"
"10663splitHere46","20312197splitHere46","Unit2"
"10664splitHere46","20312197splitHere46","double"
"10665splitHere46","20312197splitHere46","String"
"10666splitHere46","20312197splitHere46","import java.io.FileNotFoundException;<newline46mondego>import java.io.FileReader;<newline46mondego>import java.util.Scanner;<newline46mondego><newline46mondego>public class Assignment3 {<newline46mondego><newline46mondego>    static Scanner console = new Scanner(System.in);<newline46mondego><newline46mondego>    public static void main(String[] args) throws FileNotFoundException {<newline46mondego><newline46mondego>        Scanner input = new Scanner(new FileReader(<doubleQuotes46>aptunits.txt<doubleQuotes46>));<newline46mondego><newline46mondego>        int unit = 1;<newline46mondego>        while (input.hasNextLine()) {<newline46mondego>            String line = input.nextLine();<newline46mondego>            System.out.println(line);<newline46mondego><newline46mondego>            double total = 0;<newline46mondego><newline46mondego>            int assistants = input.nextInt();<newline46mondego>            System.out.println(<doubleQuotes46>Number of Assistants <doubleQuotes46> + assistants);<newline46mondego>            System.out.println(<doubleQuotes46>Hours  Rate<doubleQuotes46>);<newline46mondego>            System.out.println(<doubleQuotes46>------------<doubleQuotes46>);<newline46mondego>            for (int i = 0; i < assistants; i++) {<newline46mondego>                int hours = input.nextInt();<newline46mondego>                System.out.print(hours + <doubleQuotes46>     <doubleQuotes46>);<newline46mondego>                double rate = input.nextDouble();<newline46mondego>                System.out.println(rate);               <newline46mondego>                total += (hours * rate);<newline46mondego>            }<newline46mondego>            System.out.println(<doubleQuotes46>Total cost of Unit <doubleQuotes46> + unit + <doubleQuotes46> is <doubleQuotes46> + total);<newline46mondego>            System.out.println();<newline46mondego>            unit++;<newline46mondego><newline46mondego>            if (input.hasNextLine()) {<newline46mondego>                input.nextLine();<newline46mondego>                input.next();<newline46mondego>            }<newline46mondego><newline46mondego>        } <newline46mondego>    }<newline46mondego>}<newline46mondego>"
"10667splitHere46","20312382splitHere46","algorithm/mode/padding"
"10668splitHere46","20312382splitHere46","Cipher"
"10669splitHere46","20312382splitHere46","<doubleQuotes46>RSA<doubleQuotes46>"
"10670splitHere46","20312382splitHere46","<doubleQuotes46>RSA/ECB/PKCS1Padding<doubleQuotes46>"
"10671splitHere46","20312382splitHere46","<doubleQuotes46>AES<doubleQuotes46>"
"10672splitHere46","20312382splitHere46","<doubleQuotes46>AES/CBC/PKCS5Padding<doubleQuotes46>"
"10673splitHere46","20312522splitHere46","while"
"10674splitHere46","20312522splitHere46","readr"
"10675splitHere46","20312522splitHere46","try"
"10676splitHere46","20312522splitHere46","readr"
"10677splitHere46","20312522splitHere46","try/catch"
"10678splitHere46","20312522splitHere46","while"
"10679splitHere46","20312599splitHere46","Timer"
"10680splitHere46","20312599splitHere46","@Startup<newline46mondego>@Singleton<newline46mondego>class MyEJB {<newline46mondego>    @Resource<newline46mondego>    private TimerService timerService = null;<newline46mondego><newline46mondego>    private Future<String> result;<newline46mondego><newline46mondego>    @EJB<newline46mondego>    private Async asyncTask<newline46mondego>    ...<newline46mondego>    Timer timer = timerService.createTimer(timeout * 1000, timerId);<newline46mondego><newline46mondego>    @Timeout<newline46mondego>    public void callTimeout(Timer timer){<newline46mondego>        result = async.calculate();<newline46mondego>    }<newline46mondego>    public void cancel(){<newline46mondego>        result.cancel();<newline46mondego>    }<newline46mondego>}<newline46mondego><newline46mondego>@Stateless<newline46mondego>class Async {<newline46mondego><newline46mondego>    @Asynchronous<newline46mondego>    public Future<String> calculate(){<newline46mondego>        ...<newline46mondego>        return new AsyncResult<String>(status);<newline46mondego>    }<newline46mondego>}<newline46mondego>"
"10681splitHere46","20312634splitHere46","LineTo"
"10682splitHere46","20312634splitHere46","Path"
"10683splitHere46","20312634splitHere46","path.setOnMouseClicked(new EventHandler<MouseEvent>() {<newline46mondego><newline46mondego>        @Override<newline46mondego>        public void handle(MouseEvent t) {<newline46mondego>            path.setStroke(Color.RED);<newline46mondego>        }<newline46mondego>    });<newline46mondego>"
"10684splitHere46","20312665splitHere46","getRowCount()"
"10685splitHere46","20312665splitHere46","getRowCount()"
"10686splitHere46","20312665splitHere46","getRowCount()"
"10687splitHere46","20312665splitHere46","getColumnCount()"
"10688splitHere46","20312665splitHere46","getValueAt()"
"10689splitHere46","20312665splitHere46","getValueAt()"
"10690splitHere46","20312665splitHere46","return list.get(rowIndex).get(columnIndex);<newline46mondego>"
"10691splitHere46","20312904splitHere46","Class.forName"
"10692splitHere46","20312904splitHere46","String typeName = JOptionPane.showMessageDialog(null, <doubleQuotes46>Enter a type<doubleQuotes46>);<newline46mondego>Class<?> class = Class.forName(typeName);<newline46mondego>if (class != null && class.isInstance(boat1))<newline46mondego>{<newline46mondego>    System.out.println(<doubleQuotes46>boat1 is a motorboat<doubleQuotes46>);<newline46mondego>}<newline46mondego>"
"10693splitHere46","20312990splitHere46","s1==s2+<doubleQuotes46>a<doubleQuotes46><newline46mondego>"
"10694splitHere46","20312990splitHere46","s1==(s2+<doubleQuotes46>a<doubleQuotes46>)<newline46mondego>"
"10695splitHere46","20312990splitHere46","=="
"10696splitHere46","20312990splitHere46","+"
"10697splitHere46","20313107splitHere46","list.setOnItemClickListener(new OnItemClickListener() {<newline46mondego><newline46mondego>        @Override<newline46mondego>        public void onItemClick(AdapterView<?> arg0, View arg1, int arg2,<newline46mondego>                long arg3) {<newline46mondego>            // TODO Auto-generated method stub<newline46mondego>           Log.v(<doubleQuotes46>TAG<doubleQuotes46>, <doubleQuotes46>CLICKED row number: <doubleQuotes46> + arg2);<newline46mondego>        }<newline46mondego><newline46mondego>    });<newline46mondego>"
"10698splitHere46","20313124splitHere46","transitiveClassifiers in Global := Seq(Artifact.SourceClassifier)<newline46mondego>"
"10699splitHere46","20313138splitHere46","class Entity {<newline46mondego><newline46mondego>    private String id;<newline46mondego>    private String version;<newline46mondego>    private JsonNode license;<newline46mondego><newline46mondego>    public String getId() {<newline46mondego>        return id;<newline46mondego>    }<newline46mondego><newline46mondego>    public void setId(String id) {<newline46mondego>        this.id = id;<newline46mondego>    }<newline46mondego><newline46mondego>    public String getVersion() {<newline46mondego>        return version;<newline46mondego>    }<newline46mondego><newline46mondego>    public void setVersion(String version) {<newline46mondego>        this.version = version;<newline46mondego>    }<newline46mondego><newline46mondego>    public JsonNode getLicense() {<newline46mondego>        return license;<newline46mondego>    }<newline46mondego><newline46mondego>    public void setLicense(JsonNode license) {<newline46mondego>        this.license = license;<newline46mondego>    }<newline46mondego><newline46mondego>    public void setLicenses(JsonNode license) {<newline46mondego>        this.license = license;<newline46mondego>    }<newline46mondego><newline46mondego>    public String retrieveLicense() {<newline46mondego>        if (license.isArray()) {<newline46mondego>            return license.elements().next().path(<doubleQuotes46>type<doubleQuotes46>).asText();<newline46mondego>        } else if (license.isObject()) {<newline46mondego>            return license.path(<doubleQuotes46>type<doubleQuotes46>).asText();<newline46mondego>        } else {<newline46mondego>            return license.asText();<newline46mondego>        }<newline46mondego>    }<newline46mondego><newline46mondego>    @Override<newline46mondego>    public String toString() {<newline46mondego>        return <doubleQuotes46>Entity [id=<doubleQuotes46> + id + <doubleQuotes46>, version=<doubleQuotes46> + version + <doubleQuotes46>, license=<doubleQuotes46> + license + <doubleQuotes46>]<doubleQuotes46>;<newline46mondego>    }<newline46mondego>}<newline46mondego>"
"10700splitHere46","20313138splitHere46","retrieveLicense"
"10701splitHere46","20313205splitHere46","HttpSession session = request.getSession();<newline46mondego>session.setAttribute(<doubleQuotes46>username<doubleQuotes46>, val.getUsername());<newline46mondego>"
"10702splitHere46","20313205splitHere46","<c:choose><newline46mondego>        <c:when test=<doubleQuotes46>${not empty sessionScope.username}<doubleQuotes46>><newline46mondego>            // all the codes goes here<newline46mondego>        </c:when><newline46mondego>        <c:otherwise><newline46mondego>            <h1>Please Login First.</h1><newline46mondego>        </c:otherwise><newline46mondego></c:choose><newline46mondego>"
"10703splitHere46","20313205splitHere46","<body onload=<doubleQuotes46>window.history.forward(1);<doubleQuotes46>><newline46mondego>"
"10704splitHere46","20313205splitHere46","HttpSession session = request.getSession();<newline46mondego>session.removeAttribute(<doubleQuotes46>username<doubleQuotes46>);<newline46mondego>"
"10705splitHere46","20313377splitHere46","if(showchosen[0] = true)<newline46mondego>"
"10706splitHere46","20313377splitHere46","if(showchosen[0] == true)<newline46mondego>"
"10707splitHere46","20313377splitHere46","if(showchosen[0])<newline46mondego>"
"10708splitHere46","20313377splitHere46","="
"10709splitHere46","20313638splitHere46","WhenInheriting"
"10710splitHere46","20313638splitHere46","g()"
"10711splitHere46","20313638splitHere46","WhenInheriting.g()"
"10712splitHere46","20313638splitHere46","size()"
"10713splitHere46","20313638splitHere46","size()"
"10714splitHere46","20313638splitHere46","size()"
"10715splitHere46","20313638splitHere46","g2()"
"10716splitHere46","20313665splitHere46","public static class RoomsArrayAdapter<String> extends ArrayAdapter<String>{<newline46mondego>"
"10717splitHere46","20313665splitHere46","public static class RoomsArrayAdapter extends ArrayAdapter<String>{<newline46mondego>"
"10718splitHere46","20313665splitHere46","String"
"10719splitHere46","20313665splitHere46","java.lang.String"
"10720splitHere46","20313699splitHere46","class CheckboxPanel<newline46mondego>extends JPanel<newline46mondego>implements Scrollable {<newline46mondego>    private final int checkBoxHeight;<newline46mondego><newline46mondego>    public CheckboxPanel() {<newline46mondego>        setLayout(new BoxLayout(this, BoxLayout.PAGE_AXIS));<newline46mondego>        checkBoxHeight = new JCheckBox(<doubleQuotes46>Example<doubleQuotes46>).getPreferredSize().height;<newline46mondego>    }<newline46mondego><newline46mondego>    @Override<newline46mondego>    public boolean getScrollableTracksViewportWidth() {<newline46mondego>        // This prevents a horizontal scrollbar from appearing.<newline46mondego>        return true;<newline46mondego>    }<newline46mondego><newline46mondego>    @Override<newline46mondego>    public boolean getScrollableTracksViewportHeight() {<newline46mondego>        return false;<newline46mondego>    }<newline46mondego><newline46mondego>    @Override<newline46mondego>    public Dimension getPreferredScrollableViewportSize() {<newline46mondego>        return getPreferredSize();<newline46mondego>    }<newline46mondego><newline46mondego>    @Override<newline46mondego>    public int getScrollableUnitIncrement(Rectangle visibleRect,<newline46mondego>                                          int orientation,<newline46mondego>                                          int direction) {<newline46mondego>        if (orientation == SwingConstants.HORIZONTAL) {<newline46mondego>            return 1;<newline46mondego>        }<newline46mondego><newline46mondego>        return Math.min(checkBoxHeight, direction < 0 ?<newline46mondego>            visibleRect.y : getHeight() - (visibleRect.y + visibleRect.height));<newline46mondego>    }<newline46mondego><newline46mondego>    @Override<newline46mondego>    public int getScrollableBlockIncrement(Rectangle visibleRect,<newline46mondego>                                           int orientation,<newline46mondego>                                           int direction) {<newline46mondego>        if (orientation == SwingConstants.HORIZONTAL) {<newline46mondego>            return 10;<newline46mondego>        }<newline46mondego><newline46mondego>        return Math.min(visibleRect.height, direction < 0 ?<newline46mondego>            visibleRect.y : getHeight() - (visibleRect.y + visibleRect.height));<newline46mondego>    }<newline46mondego>}<newline46mondego>"
"10721splitHere46","20313728splitHere46","class SuperA<newline46mondego>{<newline46mondego>    public void test(SuperA a)<newline46mondego>    {<newline46mondego>        System.out.println(<doubleQuotes46>super class's test() is called<doubleQuotes46>);<newline46mondego>    }<newline46mondego>}<newline46mondego><newline46mondego>class SubB extends SuperA<newline46mondego>{<newline46mondego><newline46mondego>    public void test(SubB subB)<newline46mondego>    {<newline46mondego>        System.out.println(<doubleQuotes46>subclass's test() is called<doubleQuotes46>);<newline46mondego><newline46mondego><newline46mondego>    }    <newline46mondego>}<newline46mondego>"
"10722splitHere46","20313728splitHere46","SuperA obj = new SubB();<newline46mondego>SubB obj2 = new SubB();<newline46mondego>obj.test(obj2);<newline46mondego>"
"10723splitHere46","20313728splitHere46","test()"
"10724splitHere46","20313728splitHere46","obj"
"10725splitHere46","20313728splitHere46","SuperA"
"10726splitHere46","20313728splitHere46","obj"
"10727splitHere46","20313728splitHere46","SuubB"
"10728splitHere46","20313728splitHere46","test(obj2)"
"10729splitHere46","20313728splitHere46","((SubB)obj).test(obj2); // cast to SubB<newline46mondego>"
"10730splitHere46","20313728splitHere46","<doubleQuotes46>subclass's test() is called<doubleQuotes46>"
"10731splitHere46","20313728splitHere46","test(obj)"
"10732splitHere46","20313728splitHere46","SubB"
"10733splitHere46","20313728splitHere46","obj"
"10734splitHere46","20313728splitHere46","SubB"
"10735splitHere46","20313728splitHere46","test"
"10736splitHere46","20313728splitHere46","SuperA obj = new SubB();<newline46mondego>   SuperA obj2 = new SubB();<newline46mondego>   obj.test(obj2); // invokes super class's test method<newline46mondego>   ((SubB)obj).test(obj2);// invokes super class's test method<newline46mondego>   ((SubB)obj).test((SubB)obj2); // invoke sub class's test method<newline46mondego>"
"10737splitHere46","20313728splitHere46","SuperA"
"10738splitHere46","20313728splitHere46","((SubB)obj).test(obj2);// invokes super class's test method<newline46mondego>"
"10739splitHere46","20313728splitHere46","obj"
"10740splitHere46","20313728splitHere46","SubB"
"10741splitHere46","20313728splitHere46","obj2"
"10742splitHere46","20313728splitHere46","SperA"
"10743splitHere46","20313728splitHere46","test"
"10744splitHere46","20313728splitHere46","obj"
"10745splitHere46","20313728splitHere46","obj2"
"10746splitHere46","20313728splitHere46","SuperA"
"10747splitHere46","20313728splitHere46","SubB"
"10748splitHere46","20313728splitHere46","SubB"
"10749splitHere46","20313728splitHere46","test"
"10750splitHere46","20313728splitHere46","Object"
"10751splitHere46","20313728splitHere46","equal"
"10752splitHere46","20313728splitHere46","equal"
"10753splitHere46","20313728splitHere46","equal"
"10754splitHere46","20313728splitHere46","Object"
"10755splitHere46","20313728splitHere46","instanceof"
"10756splitHere46","20313728splitHere46","Integer"
"10757splitHere46","20313728splitHere46","public boolean equals(Object obj) {<newline46mondego>        if (obj instanceof Integer) { //<<<---- instance of checking<newline46mondego>            return value == ((Integer)obj).intValue();<newline46mondego>        }<newline46mondego>        return false;<newline46mondego>    } <newline46mondego>"
"10758splitHere46","20313767splitHere46","String in = Integer.toString(input.nextInt());<newline46mondego>    String [] tall = {<doubleQuotes46>null<doubleQuotes46>, <doubleQuotes46>en<doubleQuotes46> , <doubleQuotes46>to<doubleQuotes46>, <doubleQuotes46>tre<doubleQuotes46>, <doubleQuotes46>fire<doubleQuotes46> , <doubleQuotes46>fem<doubleQuotes46>, <doubleQuotes46>seks<doubleQuotes46>, <doubleQuotes46>syv<doubleQuotes46>, <doubleQuotes46>Ã¥tte<doubleQuotes46>, <doubleQuotes46>ni<doubleQuotes46>, <doubleQuotes46>ti<doubleQuotes46>};       <newline46mondego><newline46mondego>    for(char c : in.toCharArray()){<newline46mondego>        int i = (int) (c-'0');<newline46mondego>        for (int j = 0; j<tall.length; j++) {<newline46mondego>            if(i == j){<newline46mondego>                System.out.print (tall[j] + <doubleQuotes46> <doubleQuotes46>);<newline46mondego>            }<newline46mondego>        }<newline46mondego>    }<newline46mondego>"
"10759splitHere46","20313857splitHere46","setDaemon(true)"
"10760splitHere46","20313857splitHere46","Thread"
"10761splitHere46","20313857splitHere46","System.exit(...)"
"10762splitHere46","20313875splitHere46","timer"
"10763splitHere46","20313875splitHere46","public void actionPerformed(ActionEvent e) {<newline46mondego>              if(p != null){  //becouse after creating Generator object im doing setPanel(this) a short while after :) <newline46mondego>              addItem();     <newline46mondego>              p.repaint();<newline46mondego>            }<newline46mondego>      }<newline46mondego>"
"10764splitHere46","20313879splitHere46","String url = <doubleQuotes46>www.IP/FOLDER/Binder.php?myLat=<doubleQuotes46>+ MyLat;<newline46mondego>URI url_uri = new URI(url); <newline46mondego>request.setURI(url_uri);<newline46mondego>"
"10765splitHere46","20313879splitHere46","HttpGet request = new HttpGet(url);<newline46mondego>"
"10766splitHere46","20313981splitHere46","url.openStream()"
"10767splitHere46","20313981splitHere46","public String getpage(URL url)<newline46mondego>    {<newline46mondego>        try {<newline46mondego>            // try opening the URL<newline46mondego>            URLConnection urlConnection = url.openConnection();                        <newline46mondego>            urlConnection.setAllowUserInteraction(false);<newline46mondego><newline46mondego>            InputStream urlStream = url.openStream();            <newline46mondego>            byte buffer[] = new byte[1000];<newline46mondego>            int numRead = urlStream.read(buffer);<newline46mondego>            String content = new String(buffer, 0, numRead);<newline46mondego><newline46mondego>            while ((numRead != -1) && (content.length() < MAX_PAGE_SIZE)) {<newline46mondego>                numRead = urlStream.read(buffer);<newline46mondego>                if (numRead != -1) {<newline46mondego>                    String newContent = new String(buffer, 0, numRead);<newline46mondego>                    content += newContent;<newline46mondego>                }<newline46mondego>            }<newline46mondego>            return content;<newline46mondego>        } catch (IOException e) {            <newline46mondego>            e.printTrackStace();<newline46mondego>        }catch(IndexOutOfBoundsException e1){            <newline46mondego>            e1.printTrackStace();<newline46mondego>        }<newline46mondego>    }<newline46mondego>"
"10768splitHere46","20313981splitHere46","getpage(new URL(<doubleQuotes46>http://team-m4gkbeatz.eu/Beatsleigher/UniversalAndroidToolkit/UAT.todo<doubleQuotes46>));"
"10769splitHere46","20314083splitHere46","InputStream input = getServletContext().getResourceAsStream(<doubleQuotes46>/abc.txt<doubleQuotes46>);<newline46mondego>"
"10770splitHere46","20314083splitHere46","File file = new File(getServletContext().getRealPath(<doubleQuotes46>/abc.txt<doubleQuotes46>));<newline46mondego>"
"10771splitHere46","20314149splitHere46","//use a SocketAddress so you can set connect timeouts<newline46mondego>        InetSocketAddress sockAddress = new InetSocketAddress(<doubleQuotes46>127.0.0.1<doubleQuotes46>,40000);<newline46mondego>        s  = new Socket();<newline46mondego>        //set connect timeout to one minute<newline46mondego>        s.connect(sockAddress, 60000);<newline46mondego>        //set read timeout to one minute<newline46mondego>        s.setSoTimeout(60000);            <newline46mondego>        System.out.println(s);<newline46mondego>        pw = new PrintWriter(s.getOutputStream());<newline46mondego>        ...<newline46mondego>"
"10772splitHere46","20314265splitHere46","HttpGet"
"10773splitHere46","20314265splitHere46","String str_url=<doubleQuotes46>99999<doubleQuotes46>;<newline46mondego>encodeUrl = URLEncoder.encode(url, <doubleQuotes46>UTF-8<doubleQuotes46>);<newline46mondego>String final_url=<doubleQuotes46>http://api.elpais.com/ws/LoteriaNavidadPremiados?n=<doubleQuotes46>+encodeUrl;<newline46mondego>"
"10774splitHere46","20314322splitHere46",".version 51 0<newline46mondego>.class super public StackFrameTest4<newline46mondego>.super java/lang/Object<newline46mondego><newline46mondego>.method public <init> : ()V<newline46mondego>    .limit stack 1<newline46mondego>    .limit locals 1<newline46mondego>    aload_0<newline46mondego>    invokespecial java/lang/Object <init> ()V<newline46mondego>    return<newline46mondego>.end method<newline46mondego><newline46mondego>.method static public main : ([Ljava/lang/String;)V<newline46mondego>    .limit stack 2<newline46mondego>    .limit locals 1<newline46mondego>    new StackFrameTest<newline46mondego>    dup<newline46mondego>    invokespecial StackFrameTest <init> ()V<newline46mondego>    bipush 42<newline46mondego>    invokevirtual StackFrameTest stackFrameTest (I)I<newline46mondego>    pop<newline46mondego>    return<newline46mondego>.end method<newline46mondego><newline46mondego>.method public stackFrameTest : (I)I<newline46mondego>    .limit stack 2<newline46mondego>    .limit locals 2<newline46mondego>    iload_1<newline46mondego>    ifle L12<newline46mondego>    getstatic java/lang/System out Ljava/io/PrintStream;<newline46mondego>    ldc 'positive x'<newline46mondego>    invokevirtual java/io/PrintStream println (Ljava/lang/String;)V<newline46mondego>L12:<newline46mondego>.stack full<newline46mondego>    locals Double Float<newline46mondego>    stack Double<newline46mondego>.end stack<newline46mondego><newline46mondego>    iload_1<newline46mondego>    ineg<newline46mondego>    ireturn<newline46mondego>.end method<newline46mondego>"
"10775splitHere46","20314391splitHere46","String"
"10776splitHere46","20314391splitHere46","=="
"10777splitHere46","20314391splitHere46","equals"
"10778splitHere46","20314391splitHere46","String"
"10779splitHere46","20314391splitHere46","Object"
"10780splitHere46","20314391splitHere46","choices"
"10781splitHere46","20314391splitHere46","String"
"10782splitHere46","20314391splitHere46","null"
"10783splitHere46","20314391splitHere46","Scanner"
"10784splitHere46","20314391splitHere46","next"
"10785splitHere46","20314391splitHere46","camelBack"
"10786splitHere46","20314391splitHere46","public static String choices(String value1, String value2) {<newline46mondego>    Scanner x = new Scanner(System.in);<newline46mondego>    System.out.println(<doubleQuotes46>Type your choice and ENTER...<doubleQuotes46>);<newline46mondego>    String input = x.nextLine();<newline46mondego>    if (input.equals(value1)) {<newline46mondego>        return value1;<newline46mondego>    }<newline46mondego>    else if (input.equals(value2)) {<newline46mondego>        return value2;<newline46mondego>    }<newline46mondego>    // handling other user inputs<newline46mondego>    else {<newline46mondego>        return <doubleQuotes46>nothing<doubleQuotes46>;<newline46mondego>    }<newline46mondego>}<newline46mondego><newline46mondego>public static void main(String[] args) {<newline46mondego>    // usage of method. Note that you could also refactor with varargs, as in: <newline46mondego>    // String... values in method signature.<newline46mondego>    // This way you could iterate over values and check an arbitrary number of values, <newline46mondego>    // instead of only 2.<newline46mondego>    System.out.println(choices(<doubleQuotes46>foo<doubleQuotes46>, <doubleQuotes46>bar<doubleQuotes46>));<newline46mondego>}<newline46mondego>"
"10787splitHere46","20314391splitHere46","Type your choice and ENTER...<newline46mondego>"
"10788splitHere46","20314418splitHere46","^"
"10789splitHere46","20314418splitHere46","^[a-z]+$"
"10790splitHere46","20314418splitHere46","[^a-z]+"
"10791splitHere46","20314520splitHere46","inpoot"
"10792splitHere46","20314520splitHere46","int[]"
"10793splitHere46","20314520splitHere46","outpoot"
"10794splitHere46","20314520splitHere46","public class HelloJava {    <newline46mondego>    static int[] inpoot() { // this method has to return int[]<newline46mondego>        Scanner input = new Scanner(System.in);<newline46mondego>        int[] numbers = new int[10];<newline46mondego><newline46mondego>        System.out.println(<doubleQuotes46>Please enter 10 numbers <doubleQuotes46>);<newline46mondego>        for (int i = 0; i < numbers.length; i++) {<newline46mondego>            numbers[i] = input.nextInt();<newline46mondego>        }<newline46mondego>        return numbers; // return array here<newline46mondego>    }<newline46mondego><newline46mondego>    static void outpoot(int[] numbers) {<newline46mondego>        for(int i = 0; i < numbers.length; i++) { <newline46mondego>            System.out.println(numbers[i]); <newline46mondego>        }<newline46mondego>    }<newline46mondego><newline46mondego>     public static void main(String[] args) {<newline46mondego>        int[] numbers = inpoot(); // get the returned array<newline46mondego>        outpoot(numbers); // and pass it to outpoot<newline46mondego>    }<newline46mondego>}<newline46mondego>"
"10795splitHere46","20314695splitHere46","n"
"10796splitHere46","20314695splitHere46","last_gold_amount"
"10797splitHere46","20314695splitHere46","last_gold_updated"
"10798splitHere46","20314695splitHere46","current_gold_amount = last_gold_amount + interest_rate * (current_time - last_gold_updated)"
"10799splitHere46","20314695splitHere46","current_gold_amount"
"10800splitHere46","20314695splitHere46","last_gold_amount"
"10801splitHere46","20314695splitHere46","last_updated"
"10802splitHere46","20314695splitHere46","current_gold_amount"
"10803splitHere46","20314695splitHere46","VIEW"
"10804splitHere46","20314835splitHere46","import javax.swing.*;<newline46mondego>import java.awt.*;<newline46mondego><newline46mondego>public class MyFrame extends JFrame {<newline46mondego>    private static final long   serialVersionUID    = 1L;<newline46mondego><newline46mondego>    public static void main(String[] args) {<newline46mondego>        new MyFrame();<newline46mondego>    }<newline46mondego><newline46mondego>    public MyFrame() {<newline46mondego>        super(<doubleQuotes46>My Frame<doubleQuotes46>);<newline46mondego>        setDefaultCloseOperation(EXIT_ON_CLOSE);<newline46mondego><newline46mondego>        JPanel mainPanel = new JPanel();<newline46mondego>        mainPanel.setLayout(new GridBagLayout());<newline46mondego><newline46mondego>        GridBagConstraints c;<newline46mondego>        final Insets insets = new Insets(4, 4, 4, 4);<newline46mondego>        final Insets buttonInsets = new Insets(4, 4, 4, 8);<newline46mondego><newline46mondego>        JLabel dbLocationLabel = new JLabel(<doubleQuotes46>Database file:<doubleQuotes46>);<newline46mondego>        c = new GridBagConstraints();<newline46mondego>        c.insets = insets;<newline46mondego>        c.gridx = 0;<newline46mondego>        c.gridy = 0;<newline46mondego>        c.anchor = GridBagConstraints.LINE_START;<newline46mondego>        mainPanel.add(dbLocationLabel, c);<newline46mondego><newline46mondego>        JTextField dbLocationText = new JTextField();<newline46mondego>        c = new GridBagConstraints();<newline46mondego>        c.insets = insets;<newline46mondego>        c.fill = GridBagConstraints.BOTH;<newline46mondego>        c.gridx = 1;<newline46mondego>//        c.gridwidth = 5;<newline46mondego>        c.gridy = 0;<newline46mondego>        c.weightx = 0.1;<newline46mondego>        mainPanel.add(dbLocationText, c);<newline46mondego><newline46mondego>        JButton dbLocationButton = new JButton(<doubleQuotes46>...<doubleQuotes46>);<newline46mondego>        c = new GridBagConstraints();<newline46mondego>        c.insets = buttonInsets;<newline46mondego>        c.gridx = 2;<newline46mondego>        c.gridy = 0;<newline46mondego>        mainPanel.add(dbLocationButton, c);<newline46mondego><newline46mondego>        this.add(mainPanel);<newline46mondego>        this.setSize(500, 150);<newline46mondego>        this.setLocation(300, 400);<newline46mondego>        this.setVisible(true);<newline46mondego>    }<newline46mondego>}<newline46mondego>"
"10805splitHere46","20314857splitHere46","for (int i=0; i<100; i++) {<newline46mondego>    if ( (i % 2 !=0) && i!=5 && i!=9 && i!=11) {<newline46mondego>        System.out.println(i)<newline46mondego>    }<newline46mondego>}<newline46mondego>"
"10806splitHere46","20314875splitHere46","libs"
"10807splitHere46","20314880splitHere46","MyGraphHopper extends GraphHopper"
"10808splitHere46","20314924splitHere46","*"
"10809splitHere46","20314924splitHere46","public static void printStars(int n){<newline46mondego>   for(int i = 0 ; i < n ; i++)<newline46mondego>     System.out.print(<doubleQuotes46>*<doubleQuotes46>);<newline46mondego>}<newline46mondego>"
"10810splitHere46","20314924splitHere46","System.out.println(<doubleQuotes46>0-29:<doubleQuotes46> + <doubleQuotes46> <doubleQuotes46> + printStars(Boundary0));<newline46mondego>System.out.println(<doubleQuotes46>30-39:<doubleQuotes46> + <doubleQuotes46> <doubleQuotes46> + printStars(Boundary30));               <newline46mondego>System.out.println(<doubleQuotes46>40-69:<doubleQuotes46> + <doubleQuotes46> <doubleQuotes46>+ printStars(Boundary40));        <newline46mondego>System.out.println(<doubleQuotes46>70-100:<doubleQuotes46> + <doubleQuotes46> <doubleQuotes46> +printStars(Boundary70));<newline46mondego>"
"10811splitHere46","20314974splitHere46","\\[([^\\]]+)\\](.+?)\\[/\\1\\]<newline46mondego>"
"10812splitHere46","20314974splitHere46","[a][b] hi [/b] hello [/a][c] yo [/c]"
"10813splitHere46","20314974splitHere46","[b] hi [\b] hello"
"10814splitHere46","20314974splitHere46","yo"
"10815splitHere46","20314974splitHere46","[b] hi [\b] hello"
"10816splitHere46","20314974splitHere46","[b] hi [/b]"
"10817splitHere46","20314974splitHere46","hi"
"10818splitHere46","20314974splitHere46","[A] outer [B] [C] last one left [/C] middle [/B] [/A]  [A] out [B] in [/B] [/A]<newline46mondego>"
"10819splitHere46","20314974splitHere46","outer [B] [C] last one left [/C] middle [/B]<newline46mondego>out [B] in [/B]<newline46mondego>"
"10820splitHere46","20314974splitHere46","[C] last one left [/C] middle<newline46mondego> in<newline46mondego>"
"10821splitHere46","20314974splitHere46","last one left<newline46mondego> [no matches]<newline46mondego>"
"10822splitHere46","20314974splitHere46","last one left"
"10823splitHere46","20314974splitHere46","public static void getAllMatches(Pattern p, String in, List<String> out) {<newline46mondego>  Matcher m = p.matcher(in);           // get matches in input<newline46mondego>  while (m.find()) {                   // for each match<newline46mondego>    out.add(m.group(2));               // add match to result array<newline46mondego>    getAllMatches(p, m.group(2), out); // call function again with match as input<newline46mondego>  }<newline46mondego>}<newline46mondego>"
"10824splitHere46","20314974splitHere46","[A]outer[B][C]last one left[/C]middle[/B][/A] [A]out[B]in[/B][/A]<newline46mondego>-----------<newline46mondego>- outer[B][C]last one left[/C]middle[/B]<newline46mondego>- [C]last one left[/C]middle<newline46mondego>- last one left<newline46mondego>- out[B]in[/B]<newline46mondego>- in<newline46mondego><newline46mondego>[quote]http://www.yourube.com?watch?v=asasdsadsa [url]aisa[/url] [/quote]<newline46mondego>-----------<newline46mondego>- http://www.yourube.com?watch?v=asasdsadsa [url]aisa[/url] <newline46mondego>- aisa<newline46mondego>"
"10825splitHere46","20314979splitHere46","EDT"
"10826splitHere46","20314979splitHere46","ActionListener"
"10827splitHere46","20314979splitHere46","actionPerformed()"
"10828splitHere46","20314979splitHere46","Thread.sleep(...)"
"10829splitHere46","20314979splitHere46","Swing"
"10830splitHere46","20314979splitHere46","Timer"
"10831splitHere46","20314979splitHere46","SwingWorker"
"10832splitHere46","20315019splitHere46","if ( value == null || value. equals(<doubleQuotes46>null<doubleQuotes46>) || tableField.getType() == FIELD_TYPE_NULL ) <newline46mondego>{<newline46mondego><newline46mondego>}<newline46mondego>"
"10833splitHere46","20315062splitHere46","Database.class.getClassLoader().getResourceAsStream(<newline46mondego>                <doubleQuotes46>com/lk/apiit/eduservice/config.properties<doubleQuotes46>);<newline46mondego>"
"10834splitHere46","20315062splitHere46","Properties property = new Properties();<newline46mondego>"
"10835splitHere46","20315078splitHere46","a"
"10836splitHere46","20315078splitHere46","a[ j ][ i ] = j;<newline46mondego>"
"10837splitHere46","20315078splitHere46","a[ i ][ j ] = j;<newline46mondego>"
"10838splitHere46","20315078splitHere46","System.out.printf( <doubleQuotes46>%d <doubleQuotes46>, a[ j ][ i ] );<newline46mondego>"
"10839splitHere46","20315078splitHere46","System.out.printf( <doubleQuotes46>%d <doubleQuotes46>, a[ i ][ j ] );<newline46mondego>"
"10840splitHere46","20315098splitHere46","File save_path=new File(<doubleQuotes46>right.jpg<doubleQuotes46>);<newline46mondego>ImageIO.write(img, <doubleQuotes46>JPG<doubleQuotes46>, save_path);<newline46mondego>"
"10841splitHere46","20315098splitHere46","public class Result extends JFrame {<newline46mondego><newline46mondego>    public Result(){<newline46mondego>        getContentPane().setBackground(Color.white);<newline46mondego>        initComponents();<newline46mondego>        setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);<newline46mondego>        JPanel panel = new JPanel();<newline46mondego>        add(panel);<newline46mondego>        JLabel im = new JLabel(new ImageIcon(<doubleQuotes46>right.jpg<doubleQuotes46>));<newline46mondego>        panel.add(im);<newline46mondego>    }<newline46mondego><newline46mondego>    public static void main(String[] args) {<newline46mondego>        java.awt.EventQueue.invokeLater(new Runnable() {<newline46mondego>            public void run() {<newline46mondego>                Result tmp = new Result();<newline46mondego>                tmp.setSize(600, 600);<newline46mondego>                tmp.setVisible(true);<newline46mondego>            }<newline46mondego>        });<newline46mondego>    }<newline46mondego>}<newline46mondego>"
"10842splitHere46","20315162splitHere46","B"
"10843splitHere46","20315162splitHere46","A"
"10844splitHere46","20315162splitHere46","B"
"10845splitHere46","20315162splitHere46","B.class"
"10846splitHere46","20315239splitHere46","/dev/urandom"
"10847splitHere46","20315239splitHere46","/dev/random"
"10848splitHere46","20315239splitHere46","/dev/urandom"
"10849splitHere46","20315239splitHere46","/dev/urandom"
"10850splitHere46","20315239splitHere46","/dev/./urandom"
"10851splitHere46","20315239splitHere46","urandom"
"10852splitHere46","20315261splitHere46","Action Listener"
"10853splitHere46","20315261splitHere46","Handler Interface"
"10854splitHere46","20315261splitHere46","// Have the unmodified Enter key cause an event<newline46mondego>Action action_ok = new ShortcutAction(<doubleQuotes46>Default key<doubleQuotes46>, ShortcutAction.KeyCode.ENTER, null);<newline46mondego><newline46mondego>Action[] actions = new Action[] {action_ok};<newline46mondego><newline46mondego>public Action[] getActions(Object target, Object sender) {<newline46mondego>    if (sender == myPanel)<newline46mondego>        return actions;<newline46mondego><newline46mondego>    return null;<newline46mondego>}<newline46mondego><newline46mondego>/**<newline46mondego> * Handle actions received from keyboard. This simply directs<newline46mondego> * the actions to the same listener methods that are called<newline46mondego> * with ButtonClick events.<newline46mondego> */<newline46mondego>public void handleAction(Action action, Object sender, Object target) {<newline46mondego>    if (action == action_ok) {<newline46mondego>        okHandler();<newline46mondego>    }<newline46mondego>}<newline46mondego>"
"10855splitHere46","20315261splitHere46","Panel"
"10856splitHere46","20315261splitHere46","Window"
"10857splitHere46","20315261splitHere46","// Set this object as the action handler<newline46mondego>panel.addActionHandler(this);<newline46mondego>"
"10858splitHere46","20315277splitHere46","<servlet><newline46mondego>    <servlet-name>fooBar</servlet-name><newline46mondego>    <jsp-file>/foo.jsp</jsp-file> <!-- Your JSP. Must begin with '/' --><newline46mondego></servlet><newline46mondego><newline46mondego><servlet-mapping><newline46mondego>    <servlet-name>fooBar</servlet-name><newline46mondego>    <url-pattern>/bar</url-pattern> <!-- Any URL you want here --><newline46mondego></servlet-mapping><newline46mondego>"
"10859splitHere46","20315277splitHere46","RequestDispatcher"
"10860splitHere46","20315277splitHere46","@WebServlet(<doubleQuotes46>/bar<doubleQuotes46>) //your URL pattern<newline46mondego>public class DummyServlet extends HttpServlet {<newline46mondego><newline46mondego>@Override<newline46mondego>protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {<newline46mondego>    request.getRequestDispatcher(<doubleQuotes46>/path/to/foo.jsp<doubleQuotes46>).forward(request, response);<newline46mondego>}<newline46mondego>"
"10861splitHere46","20315294splitHere46","ObjectFactory"
"10862splitHere46","20315294splitHere46","@XmlRegistry"
"10863splitHere46","20315294splitHere46","ObjectFactory"
"10864splitHere46","20315308splitHere46","RelativeLayout Layout = (RelativeLayout)findViewById(R.id.XXXXX);<newline46mondego>"
"10865splitHere46","20315308splitHere46","TextView TV = new TextView(this);<newline46mondego>TV.setText(<doubleQuotes46>Hello world!<doubleQuotes46>);<newline46mondego>TV.setId(5);<newline46mondego>TV.setLayoutParams(new LayoutParams(<newline46mondego>        LayoutParams.FILL_PARENT,<newline46mondego>        LayoutParams.WRAP_CONTENT));<newline46mondego>"
"10866splitHere46","20315308splitHere46","Layout.addView(TV);<newline46mondego>"
"10867splitHere46","20315308splitHere46","RelativeLayout Layout = (RelativeLayout)findViewById(R.id.XXXXX);<newline46mondego>    Button add = (Button) findViewById(R.id.XXXXXX);<newline46mondego>    add.setOnClickListener(new View.OnClickListener() {<newline46mondego>        @Override<newline46mondego>        public void onClick(View arg0) {<newline46mondego>TextView TV = new TextView(this);<newline46mondego>TV.setText(<doubleQuotes46>Hello world!<doubleQuotes46>);<newline46mondego>TV.setId(5);<newline46mondego>TV.setLayoutParams(new LayoutParams(<newline46mondego>        LayoutParams.FILL_PARENT,<newline46mondego>        LayoutParams.WRAP_CONTENT));<newline46mondego>Layout.addView(TV);<newline46mondego>        }<newline46mondego>    });<newline46mondego>"
"10868splitHere46","20315407splitHere46","Date"
"10869splitHere46","20315407splitHere46","String"
"10870splitHere46","20315407splitHere46","Iterator<Date> iterator = datesAndInts.keySet().iterator();  <newline46mondego>while (iterator.hasNext()) {  <newline46mondego>    Date key = iterator.next();<newline46mondego>    System.out.println(<doubleQuotes46>comparing <doubleQuotes46> + testDate + <doubleQuotes46>with <doubleQuotes46> + key + <doubleQuotes46> result is <doubleQuotes46> + testDate.equals(key)); <newline46mondego>    // this call to equals() returns true now.<newline46mondego>}<newline46mondego>"
"10871splitHere46","20315407splitHere46","System.out.println(<doubleQuotes46>comparing <doubleQuotes46> + testDate + <doubleQuotes46>with <doubleQuotes46> + key + <doubleQuotes46> result is <doubleQuotes46> + testDate.toString().equals(key)); <newline46mondego>"
"10872splitHere46","20315447splitHere46","double [] months = new double[12];<newline46mondego>for (Transaction t : cost) {<newline46mondego>    months[t.getDate().getMonth() - 1] += t.getCost();<newline46mondego>}<newline46mondego>"
"10873splitHere46","20315447splitHere46","months"
"10874splitHere46","20315467splitHere46","m.find();<newline46mondego>"
"10875splitHere46","20315467splitHere46","String fromMatcher = m.group(0); //first word surrounded by hash, without the hash<newline46mondego>"
"10876splitHere46","20315467splitHere46","Pattern ptrn = Pattern.compile(<doubleQuotes46>#([^#]+)#<doubleQuotes46>);<newline46mondego>"
"10877splitHere46","20315467splitHere46","String fromMatcher = m.group(1); //first word surrounded by hash, without the hash<newline46mondego>"
"10878splitHere46","20315472splitHere46","Min + (int)(Math.random() * ((Max - Min) + 1))<newline46mondego>"
"10879splitHere46","20315514splitHere46","flush()"
"10880splitHere46","20315524splitHere46","public ServerThread(ServerSocket ss, Configuration newConfig) {<newline46mondego>    super();<newline46mondego>    serverSocket = ss;<newline46mondego>    config = newConfig;<newline46mondego>    start();<newline46mondego>}<newline46mondego>"
"10881splitHere46","20315669splitHere46","Graph"
"10882splitHere46","20315669splitHere46","getM()"
"10883splitHere46","20315669splitHere46","g.getM()"
"10884splitHere46","20315669splitHere46","ArrayList"
"10885splitHere46","20315687splitHere46","getCellEditor"
"10886splitHere46","20315687splitHere46","@Override<newline46mondego>public TableCellEditor getCellEditor(int row, int column) {<newline46mondego>    if (column == 1) {<newline46mondego>        Object value = getValueAt(row, column);<newline46mondego>        if (value != null)<newline46mondego>            return getDefaultEditor(value.getClass());<newline46mondego>    }<newline46mondego>    return super.getCellEditor(row, column);<newline46mondego>}          <newline46mondego>"
"10887splitHere46","20315693splitHere46","a.split(<doubleQuotes46>,(?=\\S)<doubleQuotes46>);<newline46mondego>"
"10888splitHere46","20315980splitHere46","3"
"10889splitHere46","20315980splitHere46","link.next.next"
"10890splitHere46","20315980splitHere46","null"
"10891splitHere46","20315980splitHere46","link.next"
"10892splitHere46","20315980splitHere46","null"
"10893splitHere46","20315980splitHere46","public static void everyOtherDestructive(Link<Integer> link){<newline46mondego>    if(link == null) return; <newline46mondego>    if(link.next == null) return;<newline46mondego>    link.next = link.next.next;<newline46mondego>    everyOtherDestructive(link.next); <newline46mondego>}<newline46mondego>"
"10894splitHere46","20316000splitHere46","textArea.read(new FileReader(dir), null);<newline46mondego>"
"10895splitHere46","20316172splitHere46","print square(num);"
"10896splitHere46","20316172splitHere46","System.out.println(square(num));"
"10897splitHere46","20316172splitHere46","square(num);"
"10898splitHere46","20316172splitHere46","import java.util.Scanner;<newline46mondego><newline46mondego>public class Number {<newline46mondego><newline46mondego>    public static void main(String [] args)<newline46mondego>    {<newline46mondego>        Scanner in = new Scanner(System.in);<newline46mondego>        System.out.print(<doubleQuotes46>Please enter a number to square: <doubleQuotes46>);<newline46mondego>        int num = in.nextInt();<newline46mondego>        System.out.println(<doubleQuotes46>Your number squared is: <doubleQuotes46> + square(num));<newline46mondego>    }<newline46mondego>    public static int square(int num) <newline46mondego>    {<newline46mondego>        return num * num;<newline46mondego>    }<newline46mondego>}<newline46mondego>"
"10899splitHere46","20316200splitHere46","throws"
"10900splitHere46","20316200splitHere46","Exception"
"10901splitHere46","20316200splitHere46","Exception"
"10902splitHere46","20316200splitHere46","Exception"
"10903splitHere46","20316200splitHere46","try <newline46mondego>{<newline46mondego>  //This already throws FileNotFoundException<newline46mondego>  br = new BufferedReader(new FileReader(filename));<newline46mondego>} <newline46mondego>catch(FileNotFoundException e)<newline46mondego>{<newline46mondego>  e.printStackTrace();<newline46mondego>}<newline46mondego>"
"10904splitHere46","20316287splitHere46","java.lwuit.Calendar"
"10905splitHere46","20316287splitHere46","cal.getDate()"
"10906splitHere46","20316287splitHere46","System.out.println(<doubleQuotes46>DAY <doubleQuotes46> + cal.getDate().toString().substring(0,3));<newline46mondego>"
"10907splitHere46","20316287splitHere46","java.util.Calendar c = Calendar.getInstnace();<newline46mondego>c.set(Calendar.DAY_OF_THE_MONTH, day_that_you want);<newline46mondego>c.set(Calendar.MONTH, month_that_you want);<newline46mondego>c.set(Calendar.YEAR, year_that_you want);<newline46mondego><newline46mondego>java.lwuit.Calendar cal = new java.lwuit.Calendar();<newline46mondego>cal.setDate(c.getDate().getTime());<newline46mondego>"
"10908splitHere46","20316287splitHere46","Date"
"10909splitHere46","20316287splitHere46","private static final int DAY = 24 * 60 * 60 * 1000; <newline46mondego>Date d = new Date(); d.setTime(d.getTime() + DAY);<newline46mondego>"
"10910splitHere46","20316314splitHere46","canAttack"
"10911splitHere46","20316314splitHere46","n"
"10912splitHere46","20316314splitHere46","checkDistance()"
"10913splitHere46","20316314splitHere46","Player"
"10914splitHere46","20316314splitHere46","NPC 1 -> canAttack = true<newline46mondego>NPC 2 -> canAttack = false<newline46mondego>NPC 3 -> canAttack = false<newline46mondego>"
"10915splitHere46","20316314splitHere46","canAttack"
"10916splitHere46","20316314splitHere46","canAttack"
"10917splitHere46","20316314splitHere46","NPC"
"10918splitHere46","20316314splitHere46","canAttack"
"10919splitHere46","20316314splitHere46","canBeAttacked"
"10920splitHere46","20316314splitHere46","=="
"10921splitHere46","20316314splitHere46","="
"10922splitHere46","20316333splitHere46","B"
"10923splitHere46","20316333splitHere46","newBuilder()"
"10924splitHere46","20316333splitHere46","abstract protected <B extends AbstractBuilder<J, B>> B newBuilder();<newline46mondego>"
"10925splitHere46","20316333splitHere46","B extends AbstractBuilder<J, B>"
"10926splitHere46","20316333splitHere46","public static class Builder extends JElement.AbstractBuilder<JClass, Builder> {<newline46mondego>"
"10927splitHere46","20316333splitHere46","B"
"10928splitHere46","20316333splitHere46","J"
"10929splitHere46","20316333splitHere46","J"
"10930splitHere46","20316333splitHere46","abstract public class JElement<J extends JElement<J>, B extends JElement.AbstractBuilder<J, B>> {<newline46mondego>"
"10931splitHere46","20316333splitHere46","abstract protected AbstractBuilder<J, ?> newBuilder();<newline46mondego>"
"10932splitHere46","20316442splitHere46","setImageResource(int resId)"
"10933splitHere46","20316462splitHere46","public class MyObject {<newline46mondego>    private int objCount = 0;<newline46mondego>    private int i = 0;<newline46mondego>    public class Property{..}<newline46mondego>    public Property propertyArray[] = new Property[12];<newline46mondego>    // This is the constructor<newline46mondego>    public MyObject() {<newline46mondego>        ... // <<== Do stuff here<newline46mondego>    }<newline46mondego>}<newline46mondego>"
"10934splitHere46","20316462splitHere46","MyObject"
"10935splitHere46","20316462splitHere46","static"
"10936splitHere46","20316528splitHere46","for"
"10937splitHere46","20316528splitHere46","import java.awt.*;<newline46mondego>import java.awt.event.*;<newline46mondego>import javax.swing.*;<newline46mondego>import java.util.Random;<newline46mondego><newline46mondego>public class NewClass extends JFrame {<newline46mondego><newline46mondego>final int grid = 20;<newline46mondego>final int pnlCnt = grid * grid;<newline46mondego>final JFrame frame = new JFrame(<doubleQuotes46>WELCOME TO THE MATRIX<doubleQuotes46>);<newline46mondego>final JPanel[] panels = new JPanel[pnlCnt];<newline46mondego>Timer t;<newline46mondego><newline46mondego>public NewClass() {<newline46mondego>    for (int i = 0; i < panels.length; i++) {<newline46mondego>        final String[] labels = new String[]{<doubleQuotes46>0<doubleQuotes46>, <doubleQuotes46>1<doubleQuotes46>};<newline46mondego>        final Random rand = new Random();<newline46mondego>        int index = rand.nextInt(labels.length);<newline46mondego>        String randomTitle = labels[index];<newline46mondego>        final JLabel label = new JLabel(randomTitle, JLabel.CENTER);<newline46mondego>        Timer lblt = new Timer(00, new ActionListener() {<newline46mondego>            @Override<newline46mondego>            public void actionPerformed(ActionEvent ae) {<newline46mondego>               label.setText(labels[rand.nextInt(labels.length)]);<newline46mondego>            }<newline46mondego>        });<newline46mondego>        lblt.setRepeats(true);<newline46mondego>        lblt.start();<newline46mondego>        label.setForeground(Color.green);<newline46mondego>        label.setVerticalAlignment(JLabel.CENTER);<newline46mondego>        panels[i] = new JPanel();<newline46mondego>        panels[i].setBackground(Color.BLACK);<newline46mondego>        panels[i].add(label);<newline46mondego>        frame.getContentPane().add(panels[i]);<newline46mondego>    }<newline46mondego>    frame.setLayout(new GridLayout(grid, grid));<newline46mondego>    frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);<newline46mondego>    frame.setExtendedState(java.awt.Frame.MAXIMIZED_BOTH);<newline46mondego>    frame.setVisible(true);<newline46mondego><newline46mondego>    //I know this won't do what I want, but I think this is where I need <newline46mondego>    //to add code to randomize the panels or labels<newline46mondego>    ActionListener action = new ActionListener() {<newline46mondego>        @Override<newline46mondego>        public void actionPerformed(ActionEvent e) {<newline46mondego>            for (int i = 0; i < panels.length; i++) {<newline46mondego>                Color mix = new Color(255, 255, 255);<newline46mondego>                Random random = new Random();<newline46mondego>                int r = random.nextInt(255);<newline46mondego>                int g = random.nextInt(255);<newline46mondego>                int b = random.nextInt(255);<newline46mondego><newline46mondego>                if (mix != null) {<newline46mondego>                    r = (r + mix.getRed()) / 2;<newline46mondego>                    g = (g + mix.getGreen()) / 2;<newline46mondego>                    b = (b + mix.getBlue()) / 2;<newline46mondego>                }<newline46mondego>                Color color = new Color(r, g, b);<newline46mondego>                panels[i].setBackground(color);<newline46mondego>            }<newline46mondego>        }<newline46mondego>    };<newline46mondego><newline46mondego>    t = new Timer(00, action);<newline46mondego>    t.setRepeats(true);<newline46mondego>    t.start();<newline46mondego>}<newline46mondego><newline46mondego>public static void main(String args[]) {<newline46mondego>    NewClass q = new NewClass();<newline46mondego>    }<newline46mondego>}<newline46mondego>"
"10938splitHere46","20316550splitHere46","questsbloat"
"10939splitHere46","20316550splitHere46","for(int i = 0; i< questcount; i++){<newline46mondego>  listofquests.add(new ArrayList<String>(questbloat));<newline46mondego>}<newline46mondego>"
"10940splitHere46","20316555splitHere46","int[]c = new int[a+b];<newline46mondego>"
"10941splitHere46","20316555splitHere46","int[]c = merge(a,b);<newline46mondego>"
"10942splitHere46","20316555splitHere46","int[]c = merge(a,b);<newline46mondego>for(int i=0; i<c.length; i++)<newline46mondego>    System.out.print(c[i]+<doubleQuotes46> <doubleQuotes46>);<newline46mondego>"
"10943splitHere46","20316660splitHere46","public static ArrayList<String> readList(Context c){//<newline46mondego>    try{<newline46mondego>        FileInputStream fis = c.openFileInput(<doubleQuotes46>NAME<doubleQuotes46>);<newline46mondego>        ObjectInputStream is = new ObjectInputStream(fis);<newline46mondego>        ArrayList<String> list = (ArrayList<String>)is.readObject();<newline46mondego>        is.close();<newline46mondego>        return list;<newline46mondego>    }catch(Exception ex){<newline46mondego>        ex.printStackTrace();<newline46mondego>        return null;<newline46mondego>    }               <newline46mondego>}<newline46mondego><newline46mondego>public static void writeList(Context c, ArrayList<String> list){<newline46mondego>    try{<newline46mondego>        FileOutputStream fos = c.openFileOutput(<doubleQuotes46>NAME<doubleQuotes46>, Context.MODE_PRIVATE);<newline46mondego>        ObjectOutputStream os = new ObjectOutputStream(fos);<newline46mondego>        os.writeObject(list);<newline46mondego>        os.close();<newline46mondego>    }catch(Exception ex){<newline46mondego>        ex.printStackTrace();<newline46mondego>    }<newline46mondego>}<newline46mondego>"
"10944splitHere46","20316672splitHere46","NegativeNumber"
"10945splitHere46","20316672splitHere46","main"
"10946splitHere46","20316672splitHere46","public static void main(String[] args){<newline46mondego>    NewtonRaphson nr = new NewtonRaphson();<newline46mondego><newline46mondego>    try {<newline46mondego>       System.out.println(nr.squareRoot(2.0));<newline46mondego>    } catch (NegativeNumber e) {<newline46mondego>       System.out.println(<doubleQuotes46>Be more positive!<doubleQuotes46>);<newline46mondego>    }<newline46mondego>}<newline46mondego>"
"10947splitHere46","20316672splitHere46","public static void main(String[] args) throws NegativeNumber {<newline46mondego>    NewtonRaphson nr = new NewtonRaphson();<newline46mondego>    System.out.println(nr.squareRoot(2.0));<newline46mondego>}<newline46mondego>"
"10948splitHere46","20316692splitHere46","JSTL"
"10949splitHere46","20316692splitHere46","InternalResourceViewResolver"
"10950splitHere46","20316692splitHere46","<dependency><newline46mondego>     <groupId>javax.servlet</groupId><newline46mondego>     <artifactId>jstl</artifactId><newline46mondego>     <version>1.2</version><newline46mondego>  </dependency><newline46mondego>"
"10951splitHere46","20316692splitHere46","JSTL"
"10952splitHere46","20316702splitHere46","javax.swing.Timer"
"10953splitHere46","20316702splitHere46","public class CustomMouseListener implements MouseMotionListener, MouseListener{<newline46mondego><newline46mondego>    private javax.swing.Timer moveTimer;<newline46mondego>    private boolean moving = false;<newline46mondego><newline46mondego>    public CustomMouseListener() {<newline46mondego>         moveTimer = new javax.swing.Timer(25, new ActionListener() {<newline46mondego>                         public void actionPerformed(ActionEvent evt) {<newline46mondego>                             moving = false;<newline46mondego>                             // Method to be called when you want to<newline46mondego>                             // to know when the mouse has stopped moving...<newline46mondego>                         }<newline46mondego>                     });<newline46mondego>        moveTimer.setRepeats(false);<newline46mondego>    }<newline46mondego><newline46mondego>    //whatever other methods I have (irrelevant for the question)<newline46mondego><newline46mondego>    public void mouseMoved(MouseEvent e){<newline46mondego>        if (moving || moveTimer.isRunning()) {<newline46mondego>            moveTimer.restart();<newline46mondego>        } else {<newline46mondego>            moving = true;<newline46mondego>            moveTimer.start();<newline46mondego>            // Method to call when you want to know when the mouse<newline46mondego>            // has started moving...<newline46mondego>        }<newline46mondego>    }<newline46mondego><newline46mondego>}<newline46mondego>"
"10954splitHere46","20316702splitHere46","mouseMoved"
"10955splitHere46","20316702splitHere46","javax.swing.Timer"
"10956splitHere46","20316726splitHere46","while"
"10957splitHere46","20316726splitHere46","run"
"10958splitHere46","20316726splitHere46","ServerControler"
"10959splitHere46","20316726splitHere46","String str = in.readLine()"
"10960splitHere46","20316726splitHere46","in"
"10961splitHere46","20316726splitHere46","str"
"10962splitHere46","20316726splitHere46","reactForRequest"
"10963splitHere46","20316726splitHere46","str"
"10964splitHere46","20316726splitHere46","NullPointerException"
"10965splitHere46","20316791splitHere46","BEGIN"
"10966splitHere46","20316832splitHere46","JTextArea tb = new JTextArea(<doubleQuotes46>This is a text area<doubleQuotes46>);<newline46mondego>"
"10967splitHere46","20316832splitHere46","shadowing"
"10968splitHere46","20316832splitHere46","//JTextArea tb = new JTextArea(<doubleQuotes46>This is a text area<doubleQuotes46>);<newline46mondego>tb = new JTextArea(<doubleQuotes46>This is a text area<doubleQuotes46>);<newline46mondego>"
"10969splitHere46","20316889splitHere46","choose()"
"10970splitHere46","20316889splitHere46","String[] numberLine = choose(new File(<doubleQuotes46>Coords.txt<doubleQuotes46>)).split(<doubleQuotes46>,<doubleQuotes46>);<newline46mondego>int[] numbers = new int[5];<newline46mondego>for(int i = 0; i < 5; i++)<newline46mondego>    numbers[i] = Integer.parseInt(numberLine[i]);<newline46mondego>"
"10971splitHere46","20316918splitHere46","@Entity<newline46mondego>    @Table(name=<doubleQuotes46>C<doubleQuotes46>)<newline46mondego><newline46mondego>    public class C implements Serializable {<newline46mondego>    @Id<newline46mondego>    @Column(name=<doubleQuotes46>idC<doubleQuotes46>)<newline46mondego>    private int idC;<newline46mondego><newline46mondego>    @Column(name=<doubleQuotes46>value<doubleQuotes46>)<newline46mondego>    private int value;<newline46mondego><newline46mondego>    @OneToOne   <newline46mondego>    private B b;  <newline46mondego><newline46mondego><newline46mondego>///GETTERS AND SETTERS<newline46mondego>}<newline46mondego>"
"10972splitHere46","20316918splitHere46","@Entity<newline46mondego>    @Table(name=<doubleQuotes46>A<doubleQuotes46>)<newline46mondego><newline46mondego>    public class A  implements Serializable {<newline46mondego>    @Id<newline46mondego>    @GeneratedValue(strategy = GenerationType.AUTO)<newline46mondego>    @Column(name=<doubleQuotes46>idA<doubleQuotes46>)<newline46mondego>    private int idA;<newline46mondego>    @OneToMany(fetch=FetchType.EAGER)<newline46mondego>    private List<C> listofC ;<newline46mondego><newline46mondego>///GETTERS AND SETTERS<newline46mondego>}<newline46mondego>"
"10973splitHere46","20316968splitHere46","FileWriter writer = new FileWriter(<doubleQuotes46>DATA${new Date().time.toString()}.txt<doubleQuotes46>)<newline46mondego>writer.write(<doubleQuotes46>Count, Rate\n<doubleQuotes46>)<newline46mondego>writer.flush()<newline46mondego>"
"10974splitHere46","20317095splitHere46","Graphics"
"10975splitHere46","20317095splitHere46","Graphics"
"10976splitHere46","20317095splitHere46","paintComponent"
"10977splitHere46","20317095splitHere46","List"
"10978splitHere46","20317095splitHere46","paintComponent"
"10979splitHere46","20317095splitHere46","super.paintComponent"
"10980splitHere46","20317095splitHere46","Graphics"
"10981splitHere46","20317095splitHere46","import java.awt.Dimension;<newline46mondego>import java.awt.EventQueue;<newline46mondego>import java.awt.Graphics;<newline46mondego>import java.awt.Graphics2D;<newline46mondego>import java.awt.Point;<newline46mondego>import java.awt.event.ActionEvent;<newline46mondego>import java.awt.event.ActionListener;<newline46mondego>import java.util.ArrayList;<newline46mondego>import java.util.List;<newline46mondego>import javax.swing.JFrame;<newline46mondego>import javax.swing.JPanel;<newline46mondego>import javax.swing.Timer;<newline46mondego>import javax.swing.UIManager;<newline46mondego>import javax.swing.UnsupportedLookAndFeelException;<newline46mondego><newline46mondego>public class AutoPaint {<newline46mondego><newline46mondego>    public static void main(String[] args) {<newline46mondego>        new AutoPaint();<newline46mondego>    }<newline46mondego><newline46mondego>    public AutoPaint() {<newline46mondego>        EventQueue.invokeLater(new Runnable() {<newline46mondego>            @Override<newline46mondego>            public void run() {<newline46mondego>                try {<newline46mondego>                    UIManager.setLookAndFeel(UIManager.getSystemLookAndFeelClassName());<newline46mondego>                } catch (ClassNotFoundException | InstantiationException | IllegalAccessException | UnsupportedLookAndFeelException ex) {<newline46mondego>                    ex.printStackTrace();<newline46mondego>                }<newline46mondego><newline46mondego>                JFrame frame = new JFrame(<doubleQuotes46>Testing<doubleQuotes46>);<newline46mondego>                frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);<newline46mondego>                frame.add(new TestPane());<newline46mondego>                frame.pack();<newline46mondego>                frame.setLocationRelativeTo(null);<newline46mondego>                frame.setVisible(true);<newline46mondego>            }<newline46mondego>        });<newline46mondego>    }<newline46mondego><newline46mondego>    public class TestPane extends JPanel {<newline46mondego><newline46mondego>        private List<Point> points = new ArrayList<>(25);<newline46mondego><newline46mondego>        public TestPane() {<newline46mondego>            Timer timer = new Timer(40, new ActionListener() {<newline46mondego>                @Override<newline46mondego>                public void actionPerformed(ActionEvent e) {<newline46mondego>                    points.add(new Point(random(getWidth()), random(getHeight())));<newline46mondego>                    repaint();<newline46mondego>                }<newline46mondego>            });<newline46mondego>            timer.start();<newline46mondego>        }<newline46mondego><newline46mondego>        @Override<newline46mondego>        public Dimension getPreferredSize() {<newline46mondego>            return new Dimension(200, 200);<newline46mondego>        }<newline46mondego><newline46mondego>        protected void paintComponent(Graphics g) {<newline46mondego>            super.paintComponent(g);<newline46mondego>            Graphics2D g2d = (Graphics2D) g.create();<newline46mondego>            for (Point p : points) {<newline46mondego>                g2d.drawLine(p.x, p.y, p.x, p.y);<newline46mondego>            }<newline46mondego>            g2d.dispose();<newline46mondego>        }<newline46mondego><newline46mondego>        protected int random(int range) {<newline46mondego>            return (int)Math.round(Math.random() * range);<newline46mondego>        }<newline46mondego><newline46mondego>    }<newline46mondego><newline46mondego>}<newline46mondego>"
"10982splitHere46","20317099splitHere46","Loaded /Users/lilyshard/dev/playfx/src/thriller-cat-o.gif (1203120 bytes)<newline46mondego>GifCount    =   10000<newline46mondego>TotalSize   =   11474 MBytes (12031200000 bytes)<newline46mondego>"
"10983splitHere46","20317124splitHere46","@Test<newline46mondego>public void testMakeTextView()<newline46mondego>"
"10984splitHere46","20317190splitHere46","B"
"10985splitHere46","20317190splitHere46","sortByFinal()"
"10986splitHere46","20317190splitHere46","main()"
"10987splitHere46","20317190splitHere46","int[][] B = sortByFinal(num, now);<newline46mondego>"
"10988splitHere46","20317190splitHere46","sortByFinal(num, now)"
"10989splitHere46","20317190splitHere46","int[][]"
"10990splitHere46","20317252splitHere46","chips = new ArrayList<chipButton>()<newline46mondego>"
"10991splitHere46","20317252splitHere46","b"
"10992splitHere46","20317252splitHere46","count"
"10993splitHere46","20317252splitHere46","(count + 1)"
"10994splitHere46","20317252splitHere46","b"
"10995splitHere46","20317282splitHere46","ElementType.PARAMETER"
"10996splitHere46","20317282splitHere46","ElementType"
"10997splitHere46","20317282splitHere46","FIELD"
"10998splitHere46","20317282splitHere46","METHOD"
"10999splitHere46","20317282splitHere46","TYPE"
"11000splitHere46","20317282splitHere46","ANNOTATION_TYPE"
"11001splitHere46","20317282splitHere46","ElementType"
"11002splitHere46","20317282splitHere46","PARAMETER"
"11003splitHere46","20317282splitHere46","CONSTRUCTOR"
"11004splitHere46","20317282splitHere46","ElementType.FIELD"
"11005splitHere46","20317282splitHere46","ElementType.METHOD"
"11006splitHere46","20317307splitHere46","private void addItem() {<newline46mondego>    final String newString = new String(<doubleQuotes46>sampleText<doubleQuotes46>);<newline46mondego>    s.add(newString);<newline46mondego>    Runnable runnable = new Runnable() {<newline46mondego>        @Override<newline46mondego>        public void run() {<newline46mondego>            // inserting new item to database<newline46mondego>            b.insert(newString);<newline46mondego>        }<newline46mondego>    };<newline46mondego>    new Thread(runnable).start();<newline46mondego>    listener.stateChanged(new ChangeEvent(this));<newline46mondego>}<newline46mondego>"
"11007splitHere46","20317321splitHere46","finish()"
"11008splitHere46","20317321splitHere46","onResume()"
"11009splitHere46","20317428splitHere46","public ArrayList<String> initializeMangaNameList(){<newline46mondego>    Document doc;<newline46mondego>    try {<newline46mondego>        doc = Jsoup.connect(<doubleQuotes46>http://www.mangahere.com/mangalist/<doubleQuotes46>).maxBodySize(0).get();<newline46mondego>        Elements items = doc.getElementsByClass(<doubleQuotes46>manga_info<doubleQuotes46>);<newline46mondego>        ArrayList<String> names = new ArrayList<String>();<newline46mondego>        for(Element item: items){<newline46mondego>            names.add(item.text());<newline46mondego>        }<newline46mondego>        return names;<newline46mondego>    } catch (IOException e) {<newline46mondego>        // TODO Auto-generated catch block<newline46mondego>        e.printStackTrace();<newline46mondego>    }<newline46mondego>    return null;<newline46mondego>"
"11010splitHere46","20317444splitHere46","DatagramChannel."
"11011splitHere46","20317444splitHere46","DatagramChannel."
"11012splitHere46","20317473splitHere46","new Color(0, 0, 0, 0)"
"11013splitHere46","20317473splitHere46","JTextField jUsername = new JTextField(10);  <newline46mondego>jUsername.setBounds(520, 284, 190, 25);  <newline46mondego>jUsername.setColor(new Color(0, 0, 0, 0));<newline46mondego>jUsername.setOpaque(false);  <newline46mondego>jUsername.setBorder(null);  <newline46mondego>getContentPane().add(jUsername);  <newline46mondego><newline46mondego>//password  <newline46mondego>JTextField jPassword = new JTextField(15);  <newline46mondego>jPassword.setBounds(520, 374, 190, 25);  <newline46mondego>jPassword.setColor(new Color(0, 0, 0, 0));<newline46mondego>jPassword.setOpaque(false);  <newline46mondego>jPassword.setBorder(null); <newline46mondego>//jPassword.setBackground(new Color(Color.TRANSLUCENT));<newline46mondego>getContentPane().add(jPassword);<newline46mondego>"
"11014splitHere46","20317473splitHere46","new Color(255, 255, 255, 128)"
"11015splitHere46","20317473splitHere46","JTextComponent#setCaretColor"
"11016splitHere46","20317550splitHere46","public void calcArea( )<newline46mondego>{<newline46mondego>    // ensure perimeter is up-to-date!<newline46mondego>    calcPerimeter();<newline46mondego>    double s = (perimeter / 2.0);<newline46mondego>    theArea = Math.sqrt(s * (s - sideA) * (s - sideB) * (s - sideC));<newline46mondego>}<newline46mondego>"
"11017splitHere46","20317554splitHere46","info.add(scrilla);<newline46mondego>"
"11018splitHere46","20317554splitHere46","scrilla.setViewportView(info);<newline46mondego>"
"11019splitHere46","20317554splitHere46","f.add(scrilla);<newline46mondego>"
"11020splitHere46","20317554splitHere46","pack"
"11021splitHere46","20317554splitHere46","f.pack();<newline46mondego>f.setVisible(true);<newline46mondego>"
"11022splitHere46","20317562splitHere46","int d20 = rndNumbers.nextInt(11)+10; <newline46mondego>"
"11023splitHere46","20317597splitHere46","BufferedReader br = null; // here declare the object you want later to use<newline46mondego> try {<newline46mondego>      // now the part that could cause the exception<newline46mondego>      br = new BufferedReader(new FileReader(fileName)); <newline46mondego> } catch (IOException ioe) {<newline46mondego>      // handle exception<newline46mondego> }<newline46mondego><newline46mondego><newline46mondego> if (br != null) {<newline46mondego>    // now use br outside of try/catch block<newline46mondego> }<newline46mondego>"
"11024splitHere46","20317748splitHere46","GET"
"11025splitHere46","20317748splitHere46","POST"
"11026splitHere46","20317751splitHere46","<applet code = <doubleQuotes46>calculator.class<doubleQuotes46> width=<doubleQuotes46>600<doubleQuotes46> height=<doubleQuotes46>300<doubleQuotes46>><newline46mondego>"
"11027splitHere46","20317789splitHere46","private class ButtonListener implements ActionListener<newline46mondego>{<newline46mondego>    public void actionPerformed(ActionEvent event)<newline46mondego>    {<newline46mondego>        timer.start();<newline46mondego>    }<newline46mondego>}<newline46mondego>Timer timer = new Timer(100, new ActionListener() {<newline46mondego>    public void actionPerformed(ActionEvent evt) {<newline46mondego>        icon1.setIcon(icons[ran.nextInt(9)]);<newline46mondego>    }<newline46mondego>});<newline46mondego>"
"11028splitHere46","20317894splitHere46","final"
"11029splitHere46","20317894splitHere46","final"
"11030splitHere46","20317894splitHere46","final"
"11031splitHere46","20317894splitHere46","final"
"11032splitHere46","20317894splitHere46","final"
"11033splitHere46","20317894splitHere46","final"
"11034splitHere46","20317894splitHere46","final"
"11035splitHere46","20317894splitHere46","final"
"11036splitHere46","20317894splitHere46","final"
"11037splitHere46","20317903splitHere46","scanner"
"11038splitHere46","20317903splitHere46","close"
"11039splitHere46","20317903splitHere46","scanner.close();<newline46mondego>"
"11040splitHere46","20317903splitHere46","Scanner"
"11041splitHere46","20317903splitHere46","Scanner"
"11042splitHere46","20317903splitHere46","Scanner scanner = null;<newline46mondego><newline46mondego>    try {<newline46mondego>        scanner = new Scanner(System.in);<newline46mondego><newline46mondego>        while (scanner.hasNext()) {<newline46mondego>            System.out.println(scanner.next());<newline46mondego>            //do whatever you need here<newline46mondego>        }<newline46mondego>    } finally {<newline46mondego>        if (scanner != null) {<newline46mondego>            scanner.close();<newline46mondego>        }<newline46mondego>    }<newline46mondego>"
"11043splitHere46","20317903splitHere46","Scanner"
"11044splitHere46","20317951splitHere46","char"
"11045splitHere46","20317951splitHere46","7"
"11046splitHere46","20317951splitHere46","7"
"11047splitHere46","20317951splitHere46","55"
"11048splitHere46","20317951splitHere46","0x0037 = 3*16^1 + 7 = 55"
"11049splitHere46","20317951splitHere46","Character.getNumericValue(char ch)"
"11050splitHere46","20317951splitHere46","char ch = '7';<newline46mondego> int number = Character.getNumericValue(ch);<newline46mondego> System.out.print(number); //print 7<newline46mondego>"
"11051splitHere46","20317951splitHere46","String num = <doubleQuotes46>73167<doubleQuotes46>;<newline46mondego>        int biggestProduct = 1;<newline46mondego>        int currProduct = 1;<newline46mondego>        char[] array = num.toCharArray();<newline46mondego><newline46mondego>        for (int x = 0; x < array.length; x++) {<newline46mondego>            if (x < 5) {<newline46mondego>                System.out.println(currProduct + <doubleQuotes46> * <doubleQuotes46> + array[x] + <doubleQuotes46> = <doubleQuotes46> + currProduct * Character.getNumericValue(array[x]));<newline46mondego>                currProduct *= Character.getNumericValue(array[x]);<newline46mondego>            }<newline46mondego><newline46mondego>        }<newline46mondego>"
"11052splitHere46","20317951splitHere46","1 * 7 = 7<newline46mondego>7 * 3 = 21<newline46mondego>21 * 1 = 21<newline46mondego>21 * 6 = 126<newline46mondego>126 * 7 = 882<newline46mondego>"
"11053splitHere46","20317951splitHere46","7*3*1*6*7 = 882"
"11054splitHere46","20317990splitHere46","Arrays#asList()"
"11055splitHere46","20317990splitHere46","set"
"11056splitHere46","20317990splitHere46","remove()"
"11057splitHere46","20317990splitHere46","UnsupportedOperationException"
"11058splitHere46","20317990splitHere46","new ArrayList()"
"11059splitHere46","20317990splitHere46","feedlist = new ArrayList<String>(Arrays.asList(feedstr));<newline46mondego>"
"11060splitHere46","20317990splitHere46","prodlist = new ArrayList<String>(Arrays.asList(prodstr));<newline46mondego>"
"11061splitHere46","20317999splitHere46","java.net.SocketException: Permission denied (maybe missing INTERNET permission)"
"11062splitHere46","20317999splitHere46","<uses-permission android:name=<doubleQuotes46>android.permission.INTERNET<doubleQuotes46> /> <newline46mondego>"
"11063splitHere46","20317999splitHere46","AndroidManifest.xml"
"11064splitHere46","20318047splitHere46","Graphics"
"11065splitHere46","20318047splitHere46","0x0"
"11066splitHere46","20318047splitHere46","Graphics"
"11067splitHere46","20318047splitHere46","g2d.fillRect(this.x, this.y, this.w, this.h);<newline46mondego>"
"11068splitHere46","20318047splitHere46","x"
"11069splitHere46","20318047splitHere46","10"
"11070splitHere46","20318047splitHere46","y"
"11071splitHere46","20318047splitHere46","10"
"11072splitHere46","20318047splitHere46","10"
"11073splitHere46","20318047splitHere46","10"
"11074splitHere46","20318047splitHere46","10x10"
"11075splitHere46","20318047splitHere46","g2d.fillRect(0, 0, this.w, this.h);<newline46mondego>"
"11076splitHere46","20318047splitHere46","public void paintComponent(Graphics g){<newline46mondego>    Graphics2D g2d = (Graphics2D) g;<newline46mondego>    if( this.good ){<newline46mondego>        g2d.setColor(Color.green);<newline46mondego>    }<newline46mondego>    else{<newline46mondego>        g2d.setColor(Color.red);<newline46mondego>    }<newline46mondego>    super.paintComponent(g2d);<newline46mondego>}<newline46mondego>"
"11077splitHere46","20318082splitHere46","File f = new File(<doubleQuotes46>C:\\test\\est.txt<doubleQuotes46>);<newline46mondego>try<newline46mondego>{<newline46mondego>    Scanner in = new Scanner(f);<newline46mondego>    while (in.hasNext()){<newline46mondego>        System.out.println(in.next());<newline46mondego>    }<newline46mondego>}catch (IOException i){<newline46mondego>    e.printStackTrace();<newline46mondego>}<newline46mondego>"
"11078splitHere46","20318151splitHere46","instructorLabel.add (instructorLabel);"
"11079splitHere46","20318151splitHere46","instructorPanel.add(instructorLabel);"
"11080splitHere46","20318211splitHere46","disposalMethod"
"11081splitHere46","20318211splitHere46","graphicsControlExtensionNode.setAttribute(<doubleQuotes46>disposalMethod<doubleQuotes46>, <doubleQuotes46>restoreToBackgroundColor<doubleQuotes46>);<newline46mondego>graphicsControlExtensionNode.setAttribute(<doubleQuotes46>userInputFlag<doubleQuotes46>, <doubleQuotes46>FALSE<doubleQuotes46>);<newline46mondego>graphicsControlExtensionNode.setAttribute(<newline46mondego>    <doubleQuotes46>transparentColorFlag<doubleQuotes46>,<newline46mondego>    <doubleQuotes46>TRUE<doubleQuotes46>);<newline46mondego>"
"11082splitHere46","20318249splitHere46","public int i = 0;<newline46mondego>"
"11083splitHere46","20318249splitHere46","private void clickMeButtonActionPerformed(java.awt.event.ActionEvent evt) {                                                 <newline46mondego>    // code your action here:<newline46mondego>    this.i++;<newline46mondego> } <newline46mondego>"
"11084splitHere46","20318336splitHere46","sName"
"11085splitHere46","20318336splitHere46","foreach"
"11086splitHere46","20318419splitHere46","public static void main(String args) {<newline46mondego>  ArrayList<Type> array = new ArrayList<Type>();<newline46mondego><newline46mondego>  switch (verify) {<newline46mondego><newline46mondego>    case 1:<newline46mondego>      case1(array);<newline46mondego>      break;<newline46mondego><newline46mondego>    case 2:<newline46mondego>      case2(array);<newline46mondego>      break;<newline46mondego><newline46mondego>    default:<newline46mondego>      do something else;<newline46mondego>  }<newline46mondego>}<newline46mondego><newline46mondego>private static void case1(ArrayList<Type> array) {<newline46mondego>  //A list of statement including variables, conditionals and loops<newline46mondego>}<newline46mondego><newline46mondego>private static void case2(ArrayList<Type> array) {<newline46mondego>  //Another list of statement here includes variables, loops etc<newline46mondego>}<newline46mondego>"
"11087splitHere46","20318455splitHere46","for (int i = 0; i < imageList.size(); i++) {<newline46mondego>        image.setImgId(i);<newline46mondego>    }<newline46mondego>"
"11088splitHere46","20318455splitHere46","image"
"11089splitHere46","20318455splitHere46","for (int i = 0; i < imageList.size(); i++) {<newline46mondego>        imageList.get(i).setImgId(i);<newline46mondego>    }<newline46mondego>"
"11090splitHere46","20318481splitHere46","myPyjamas"
"11091splitHere46","20318481splitHere46","myAuntsPyjamas"
"11092splitHere46","20318481splitHere46","Fanciness comparativeFanciness= comparePyjamas(myPyjamas,myAuntsPyjamas);<newline46mondego><newline46mondego>public static Fanciness comparePyjamas(Pyjamas compared1,Pyjamas compared2){<newline46mondego>     .....<newline46mondego>}<newline46mondego>"
"11093splitHere46","20318481splitHere46","setThrustDirection(thrustDirection);<newline46mondego><newline46mondego>public void setThrustDirection(Vector3d thrustDirection){<newline46mondego>     .....<newline46mondego>}<newline46mondego>"
"11094splitHere46","20318481splitHere46","this.name"
"11095splitHere46","20318481splitHere46","name"
"11096splitHere46","20318674splitHere46","String line = <doubleQuotes46><doubleQuotes46>;<newline46mondego>br = new BufferedReader(new FileReader(resource));<newline46mondego>String[] coordinates = line.split(cvsSplitBy);<newline46mondego>"
"11097splitHere46","20318674splitHere46","line"
"11098splitHere46","20318674splitHere46","while(line = br.readLine() != null) { }<newline46mondego>"
"11099splitHere46","20318747splitHere46","private SpriteSheet spriteSheet = new SpriteSheet(<doubleQuotes46>/spritesheet.png<doubleQuotes46>);<newline46mondego>"
"11100splitHere46","20318747splitHere46","private SpriteSheet spriteSheet = new SpriteSheet(<doubleQuotes46>spritesheet.png<doubleQuotes46>);<newline46mondego>"
"11101splitHere46","20318759splitHere46","cashRecieved = Double.parseDouble(CashNeeded.getText());<newline46mondego>"
"11102splitHere46","20318759splitHere46","try {<newline46mondego>    cashRecieved = Double.parseDouble(CashNeeded.getText());<newline46mondego>} catch (NumberFormatException e) {<newline46mondego>    e.printStackTrace();<newline46mondego>    // handle the error<newline46mondego>}<newline46mondego>"
"11103splitHere46","20318766splitHere46","private final <newline46mondego>   ConcurrentHashMap<String, ConcurrentHashMap<String, Double>><newline46mondego>      myMulitiConcurrentHashMap =<newline46mondego>         new ConcurrentHashMap<>();<newline46mondego>"
"11104splitHere46","20318766splitHere46","private final <newline46mondego>   ConcurrentMap<String, ConcurrentMap<String, Double>><newline46mondego>      myMulitiConcurrentHashMap =<newline46mondego>         new ConcurrentHashMap<>();<newline46mondego>"
"11105splitHere46","20318842splitHere46","equals"
"11106splitHere46","20318842splitHere46","=="
"11107splitHere46","20318842splitHere46","if(customers.get(i).getSSN() == ssn)<newline46mondego>"
"11108splitHere46","20318842splitHere46","if(customers.get(i).getSSN().equals(ssn))<newline46mondego>"
"11109splitHere46","20318842splitHere46","null"
"11110splitHere46","20318993splitHere46","ImageIcon im = new ImageIcon(new File(<doubleQuotes46>banner.png<doubleQuotes46>));"
"11111splitHere46","20319033splitHere46","priceArray = new double[ordersTotal];<newline46mondego>"
"11112splitHere46","20319033splitHere46","double[] newArray = new double[ordersTotal];<newline46mondego>for(int k = 0; k < ordersTotal - 1; k++)<newline46mondego>    priceArray[k] = newArray[k];<newline46mondego>priceArray = newArray;<newline46mondego>"
"11113splitHere46","20319033splitHere46","double[] priceArray;"
"11114splitHere46","20319033splitHere46","List<Double> priceList = new ArrayList<>();"
"11115splitHere46","20319033splitHere46","priceArray = new double[ordersTotal];"
"11116splitHere46","20319033splitHere46","priceArray[ordersTotal-1] = prices_d;"
"11117splitHere46","20319033splitHere46","priceList.add(prices_d);"
"11118splitHere46","20319033splitHere46","priceArray.length"
"11119splitHere46","20319033splitHere46","priceList.size()"
"11120splitHere46","20319033splitHere46","priceArray[x]"
"11121splitHere46","20319033splitHere46","priceList.get(x)"
"11122splitHere46","20319068splitHere46","public static void downloadFiles(String libFiles) throws IOException {"
"11123splitHere46","20319112splitHere46","static"
"11124splitHere46","20319112splitHere46","final"
"11125splitHere46","20319112splitHere46","foo"
"11126splitHere46","20319112splitHere46","bar"
"11127splitHere46","20319112splitHere46","EpicClass"
"11128splitHere46","20319112splitHere46","EpicClass.arylst<newline46mondego>foo.arylst<newline46mondego>bar.arylst<newline46mondego>"
"11129splitHere46","20319112splitHere46","null"
"11130splitHere46","20319112splitHere46","ArrayList"
"11131splitHere46","20319119splitHere46","public static String modifyGuess(char letter, String word, String result) {<newline46mondego>    int occurrences = 0;<newline46mondego>    StringBuilder builder = new StringBuilder();<newline46mondego>    for(int i = 0; i < word.length(); ++i) {<newline46mondego>        if(word.charAt(i) == letter) {<newline46mondego>            builder.append(letter);<newline46mondego>            occurrences++;<newline46mondego>        } else {<newline46mondego>            builder.append(result.charAt(i));<newline46mondego>        }<newline46mondego>    }<newline46mondego>    System.out.println(<doubleQuotes46>\nThe character <doubleQuotes46> + letter +<doubleQuotes46> occurs in <doubleQuotes46> + occurrences +<doubleQuotes46> positions\n<doubleQuotes46>);<newline46mondego>    return builder.toString();<newline46mondego>}<newline46mondego><newline46mondego>public static void main(String[] args){<newline46mondego>    String word = <doubleQuotes46>GEOLOGY<doubleQuotes46>;<newline46mondego>    String result = <doubleQuotes46>**OLO**<doubleQuotes46>;<newline46mondego><newline46mondego>    result = modifyGuess('G', word, result);<newline46mondego>    System.out.println(result);<newline46mondego>    result = modifyGuess('E', word, result);<newline46mondego>    System.out.println(result);<newline46mondego>    result = modifyGuess('Y', word, result);<newline46mondego>    System.out.println(result);<newline46mondego>}//SSCCE1<newline46mondego>"
"11132splitHere46","20319182splitHere46","Scanner fileScan = new Scanner (new File(<doubleQuotes46>1.txt<doubleQuotes46>));<newline46mondego>  boolean found = false; // added this variable<newline46mondego>  while (fileScan.hasNextLine()) {<newline46mondego>    String input = fileScan.nextLine();<newline46mondego>    String Username = input.substring(0,input.indexOf(' '));<newline46mondego>    String Password = input.substring(input.indexOf(' '),input.length());<newline46mondego><newline46mondego>    if (Username.equals(inputusername) || (Password.equals(inputpassword))) {<newline46mondego>      found = true; // added this to set found<newline46mondego>      getContentPane().removeAll();<newline46mondego>      getContentPane().add(panel3);//Adding to content pane, not to Frame<newline46mondego>      repaint();<newline46mondego>      printAll(getGraphics());<newline46mondego>    } // removed the else statement<newline46mondego>  }<newline46mondego><newline46mondego>  if(!found) { // added the contents of the previously existing else statement here, outside the while<newline46mondego>    JOptionPane.showMessageDialog(null,<newline46mondego>      <doubleQuotes46>Invalid password. Try again.<doubleQuotes46>,<newline46mondego>      <doubleQuotes46>Error Message<doubleQuotes46>,<newline46mondego>      JOptionPane.ERROR_MESSAGE);<newline46mondego>  }<newline46mondego>"
"11133splitHere46","20319273splitHere46","copyFile"
"11134splitHere46","20319273splitHere46","...<newline46mondego>for (File source : sources) {<newline46mondego>   try {<newline46mondego>      copyFile(source, dest);<newline46mondego>   }<newline46mondego>   catch (Exception ignore) {<newline46mondego>      // ignore exception and continue<newline46mondego>   }<newline46mondego>   // do your other stuff here<newline46mondego>}<newline46mondego><newline46mondego>private static void copyFile(File source, File dest)<newline46mondego>        throws IOException {<newline46mondego>    FileChannel inputChannel = null;<newline46mondego>    FileChannel outputChannel = null;<newline46mondego>    try {<newline46mondego>        inputChannel = new FileInputStream(source).getChannel();<newline46mondego>        outputChannel = new FileOutputStream(dest).getChannel();<newline46mondego>        outputChannel.transferFrom(inputChannel, 0, inputChannel.size());<newline46mondego>    } <newline46mondego>    finally{<newline46mondego>       if (inputChannel != null) inputChannel.close();<newline46mondego>       if (outputChannel != null) outputChannel.close();<newline46mondego>    }<newline46mondego>}<newline46mondego>"
"11135splitHere46","20319280splitHere46","for (int i = 0; i < arraylist1.size(); i++) {<newline46mondego>  List<String> list1 = arraylist1.get(i);<newline46mondego>  List<String> list2 = arraylist2.get(i);<newline46mondego><newline46mondego>  // Check if the two lists have any elements in common<newline46mondego>  for (String s1 : list1) {<newline46mondego>    if (list2.contains(s1)) {<newline46mondego>      counter++;<newline46mondego>    }<newline46mondego>  }<newline46mondego>}<newline46mondego>"
"11136splitHere46","20319381splitHere46","<prop key=<doubleQuotes46>hibernate.temp.use_jdbc_metadata_defaults<doubleQuotes46>>false</prop><newline46mondego>"
"11137splitHere46","20319383splitHere46","allInOne.get(account)"
"11138splitHere46","20319383splitHere46","ConcurrentHashMap<String, Object>()"
"11139splitHere46","20319383splitHere46","ConcurrentHashMap<String, Object> accountMap = (ConcurrentHashMap<String, Object>)allInOne.get(account);<newline46mondego>"
"11140splitHere46","20319582splitHere46","try<newline46mondego>        {<newline46mondego>          fis = new FileInputStream(<doubleQuotes46>treeObject.dat<doubleQuotes46>);<newline46mondego>          ois = new ObjectInputStream(fis);<newline46mondego>        }<newline46mondego>        catch (IOException e)<newline46mondego>        {<newline46mondego>          e.printStackTrace();<newline46mondego>        }<newline46mondego>"
"11141splitHere46","20319634splitHere46","Outer"
"11142splitHere46","20319634splitHere46","super"
"11143splitHere46","20319634splitHere46","public class Outer {<newline46mondego>    public class Inner{<newline46mondego>        // notice the lack of static keyword<newline46mondego>    }<newline46mondego>}<newline46mondego><newline46mondego>public class ExtendedOuter extends Outer {<newline46mondego><newline46mondego>    private static Outer outer = new ExtendedOuter(); // or any other instance<newline46mondego><newline46mondego>    public static class ExtendedInner extends Inner {<newline46mondego>        public ExtendedInner() {<newline46mondego>            outer.super(); // this call is explicitly required<newline46mondego>        }<newline46mondego>    }<newline46mondego><newline46mondego>}<newline46mondego>"
"11144splitHere46","20319744splitHere46","--Upgrade the version of commons<newline46mondego>uninstall commons-net 3.2 version<newline46mondego>install mvn:commons-net/commons-net/3.3<newline46mondego><newline46mondego>--Steps in Configuring Fuse Server<newline46mondego><newline46mondego>1. To view dependencies of a project bundle<newline46mondego>    command -> dev:show-tree bundle-id<newline46mondego><newline46mondego>2. To uninstall a bundle :<newline46mondego>    uninstall bundle-id<newline46mondego>    uninstall commons-net 3.2 version<newline46mondego><newline46mondego>3. To install a bundle : ( -s means start bundle immediately after installation is successful)<newline46mondego>    install -s mvn:commons-net/commons-net/3.3<newline46mondego><newline46mondego>4. restart your project bundle.<newline46mondego><newline46mondego>5. Then restart the karaf server.<newline46mondego>"
"11145splitHere46","20319944splitHere46","Shape"
"11146splitHere46","20319944splitHere46","getBounds()"
"11147splitHere46","20319944splitHere46","intersects"
"11148splitHere46","20320027splitHere46","getRegistry()"
"11149splitHere46","20320027splitHere46","RemoteException"
"11150splitHere46","20320027splitHere46","rmic"
"11151splitHere46","20320027splitHere46","exportObject()"
"11152splitHere46","20320027splitHere46","exportObject(fi, 0),"
"11153splitHere46","20320027splitHere46","UnicastRemoteObject."
"11154splitHere46","20320027splitHere46","Server.main()"
"11155splitHere46","20320027splitHere46","public static void main(String[] args) ..."
"11156splitHere46","20320027splitHere46","Registry reg"
"11157splitHere46","20320027splitHere46","factimport"
"11158splitHere46","20320027splitHere46","fact"
"11159splitHere46","20320027splitHere46","fact."
"11160splitHere46","20320027splitHere46","BindException"
"11161splitHere46","20320043splitHere46","Arrays.sort"
"11162splitHere46","20320043splitHere46","Array.sort(data)"
"11163splitHere46","20320043splitHere46","Arrays.sort(data, 0, topIndex + 1)"
"11164splitHere46","20320043splitHere46","compareTo"
"11165splitHere46","20320043splitHere46","Comparable"
"11166splitHere46","20320043splitHere46","NullPointerException"
"11167splitHere46","20320087splitHere46","gravityMatrix = event.values.clone(); <newline46mondego>"
"11168splitHere46","20320144splitHere46","#  <doubleQuotes46>^(One:\\s((?:(?!Two:|Three:).)*)Three:\\s(.*))$<doubleQuotes46><newline46mondego><newline46mondego> ^ <newline46mondego> (                             # (1 start)<newline46mondego>      One: \s <newline46mondego>      (                             # (2 start)<newline46mondego>           (?:<newline46mondego>                (?! Two: | Three: )<newline46mondego>                . <newline46mondego>           )*<newline46mondego>      )                             # (2 end)<newline46mondego>      Three: \s <newline46mondego>      ( .* )                        # (3)<newline46mondego> )                             # (1 end)<newline46mondego> $ <newline46mondego>"
"11169splitHere46","20320208splitHere46","FileNotFoundException"
"11170splitHere46","20320208splitHere46","try"
"11171splitHere46","20320208splitHere46","System.out.println(<doubleQuotes46>Starting readLineWithFinally method.<doubleQuotes46>);<newline46mondego>RandomAccessFile in = null;<newline46mondego>try {<newline46mondego>    in = new RandomAccessFile(<doubleQuotes46>products.ran<doubleQuotes46>, <doubleQuotes46>r<doubleQuotes46>);<newline46mondego>    String s = in.readLine();<newline46mondego>    return s;<newline46mondego>} catch (IOException e) {<newline46mondego>    System.out.println(e.toString());<newline46mondego>    return null;<newline46mondego>} finally {<newline46mondego>    try {<newline46mondego>        if(in != null) {<newline46mondego>            in.close();<newline46mondego>        }<newline46mondego>    } catch (Exception e) {<newline46mondego>        System.out.println(<doubleQuotes46>Generic Error Message<doubleQuotes46>);<newline46mondego>    }<newline46mondego>}<newline46mondego>"
"11172splitHere46","20320245splitHere46","removeAllViews()"
"11173splitHere46","20320245splitHere46","scrollview1"
"11174splitHere46","20320245splitHere46","scrollview1.removeAllViews();<newline46mondego>"
"11175splitHere46","20320305splitHere46","getX()"
"11176splitHere46","20320305splitHere46","getY()"
"11177splitHere46","20320305splitHere46","getXPos()"
"11178splitHere46","20320305splitHere46","getYPos()"
"11179splitHere46","20320305splitHere46","public class ControlPanel2 extends JPanel {<newline46mondego>    private JButton basicTower, advanceTower, nextWave;<newline46mondego>    private JLabel score, money;<newline46mondego><newline46mondego>    // note change <newline46mondego>    private int xPos; <newline46mondego>    private int yPos;<newline46mondego><newline46mondego>    private String action;<newline46mondego><newline46mondego>    public ControlPanel2() {<newline46mondego>        setPreferredSize(new Dimension(150, GamePanel.HEIGHT));<newline46mondego><newline46mondego>        basicTower = new JButton(<doubleQuotes46>Basic Tower<doubleQuotes46>);<newline46mondego>        basicTower.addActionListener(new ButtonListener(<doubleQuotes46>BasicTower<doubleQuotes46>));<newline46mondego>        this.add(basicTower);<newline46mondego><newline46mondego>        advanceTower = new JButton(<doubleQuotes46>Advance Tower<doubleQuotes46>);<newline46mondego>        advanceTower.addActionListener(new ButtonListener(<doubleQuotes46>advanceTower<doubleQuotes46>));<newline46mondego>        add(advanceTower);<newline46mondego><newline46mondego>        nextWave = new JButton(<doubleQuotes46>Next Wave!<doubleQuotes46>);<newline46mondego>        nextWave.addActionListener(new ButtonListener(<doubleQuotes46>nextWave<doubleQuotes46>));<newline46mondego>        add(nextWave);<newline46mondego>        System.out.println(<doubleQuotes46>MADE IT<doubleQuotes46>);<newline46mondego>        action = <doubleQuotes46>none<doubleQuotes46>;<newline46mondego><newline46mondego>        // **** note changes. As an aside -- avoid <doubleQuotes46>magic<doubleQuotes46> numbers<newline46mondego>        xPos = 100;<newline46mondego>        yPos = 1000;<newline46mondego><newline46mondego>        score = new JLabel (<doubleQuotes46>Score: <doubleQuotes46> + x);<newline46mondego>        money = new JLabel (<doubleQuotes46>Money:  <doubleQuotes46> + y);<newline46mondego>        add(score);<newline46mondego>        add(money);<newline46mondego><newline46mondego>    }<newline46mondego><newline46mondego>    public void setYPos(int z) {<newline46mondego>        yPos -= z;<newline46mondego>        money.setText(<doubleQuotes46>Money: <doubleQuotes46> + yPos);<newline46mondego>    }<newline46mondego><newline46mondego>    public void setXPos(int z) {<newline46mondego>        xPos += z;<newline46mondego>        score.setText(<doubleQuotes46>Score: <doubleQuotes46> + xPos);<newline46mondego>    }<newline46mondego><newline46mondego>    public int getYPos() {<newline46mondego>        return yPos;<newline46mondego>    }<newline46mondego><newline46mondego>    public int getXPos() {<newline46mondego>        return xPos;<newline46mondego>    }<newline46mondego>"
"11180splitHere46","20320714splitHere46","paint(Graphics g)"
"11181splitHere46","20320714splitHere46","JFrame"
"11182splitHere46","20320714splitHere46","JFrame"
"11183splitHere46","20320714splitHere46","JPanel"
"11184splitHere46","20320714splitHere46","paintComponent(Graphics g)"
"11185splitHere46","20320714splitHere46","super.paintComponent(g)"
"11186splitHere46","20320714splitHere46","component.repaint()"
"11187splitHere46","20320828splitHere46","String regex = <doubleQuotes46>^\\s+[A-Za-z,;'\<doubleQuotes46>\\s]+[.?!]$<doubleQuotes46><newline46mondego>"
"11188splitHere46","20320828splitHere46","^"
"11189splitHere46","20320828splitHere46","\\s"
"11190splitHere46","20320828splitHere46","+"
"11191splitHere46","20320828splitHere46","[A-Za-z,;'<doubleQuotes46>\\s]"
"11192splitHere46","20320828splitHere46",","
"11193splitHere46","20320828splitHere46",";"
"11194splitHere46","20320828splitHere46","'"
"11195splitHere46","20320828splitHere46","<doubleQuotes46>"
"11196splitHere46","20320828splitHere46","$"
"11197splitHere46","20321252splitHere46","int count = 0;<newline46mondego>int x = 4;<newline46mondego>int y = 4; // arrays are 0 based<newline46mondego>while(true)<newline46mondego>{<newline46mondego>    int random =  (int)Math.random()*4+1;<newline46mondego>    if (random == 1)<newline46mondego>    {<newline46mondego>        x--; // move left<newline46mondego>    }<newline46mondego>    else if (random == 2)<newline46mondego>    {<newline46mondego>        x++; // move right<newline46mondego>    }<newline46mondego>    else if (random == 3)<newline46mondego>    {<newline46mondego>        y--; // move down<newline46mondego>    }<newline46mondego>    else if (random == 4)<newline46mondego>    {<newline46mondego>        y++; // move up<newline46mondego>    }<newline46mondego>    if(x < 0 || y < 0 || x >= grid.length || y >= grid[x].length) break;<newline46mondego>    count++;<newline46mondego>    grid[x][y]++;<newline46mondego>}<newline46mondego>System.out.println(count); // number of moves before it fell<newline46mondego>"
"11198splitHere46","20321320splitHere46","Random.nextInt(6)"
"11199splitHere46","20321320splitHere46","Color"
"11200splitHere46","20321320splitHere46","Color"
"11201splitHere46","20321320splitHere46","Color[]"
"11202splitHere46","20321320splitHere46","Color[] colors = { Color.red, Color.blue, Color.white, Color.cyan, <newline46mondego>                      Color.green, Color.gray, new Color(0xFFAA00) };<newline46mondego>   Random random = new Random();<newline46mondego>   int x = random.nextInt(colors.length);<newline46mondego>   graphics.setColor(colors[x]);<newline46mondego>"
"11203splitHere46","20321395splitHere46","(fx:id)"
"11204splitHere46","20321395splitHere46","public class MyController implements Initializable{<newline46mondego><newline46mondego>      @FXML<newline46mondego>      Button startButton;<newline46mondego><newline46mondego>      void initialize(java.net.URL location, java.util.ResourceBundle resources) {<newline46mondego>           startButton.addActionLisetner(...);<newline46mondego>      }<newline46mondego><newline46mondego> }<newline46mondego>"
"11205splitHere46","20321411splitHere46","TextView"
"11206splitHere46","20321411splitHere46","String array"
"11207splitHere46","20321411splitHere46","TextView"
"11208splitHere46","20321411splitHere46","quote.setText(randomQuote);  <newline46mondego>"
"11209splitHere46","20321641splitHere46","public static float distBetweenTwoPoints(float lat1, float lng1,<newline46mondego>        float lat2, float lng2) {<newline46mondego>    // returns distance (in meters) between two points<newline46mondego>    double earthRadius = 3958.75;<newline46mondego>    double dLat = Math.toRadians(lat2 - lat1);<newline46mondego>    double dLng = Math.toRadians(lng2 - lng1);<newline46mondego>    double a = Math.sin(dLat / 2) * Math.sin(dLat / 2)<newline46mondego>            + Math.cos(Math.toRadians(lat1))<newline46mondego>            * Math.cos(Math.toRadians(lat2)) * Math.sin(dLng / 2)<newline46mondego>            * Math.sin(dLng / 2);<newline46mondego>    double c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));<newline46mondego>    double dist = earthRadius * c;<newline46mondego><newline46mondego>    int meterConversion = 1609;<newline46mondego><newline46mondego>    return new Float(dist * meterConversion).floatValue();<newline46mondego>}<newline46mondego>"
"11210splitHere46","20321641splitHere46","It can then use bluetooth and wifi strength to give the users a general idea of whether they are getting closer or farther<newline46mondego>"
"11211splitHere46","20321667splitHere46","SequenceEntityModifier seq = new SequenceEntityModifier(new RotationModifier(2, 0, 20, EaseLinear.getInstance()), new RotationModifier(2, 20, 0, EaseLinear.getInstance()));<newline46mondego>        ornament.registerEntityModifier(new LoopEntityModifier(seq));<newline46mondego>"
"11212splitHere46","20321675splitHere46","Pattern p = Pattern.compile(<doubleQuotes46>\\$([A-Za-z0-9_]+)\\$<doubleQuotes46>);<newline46mondego>"
"11213splitHere46","20321721splitHere46","public String checkLogin(String username)<newline46mondego>{<newline46mondego>    Cursor cursor = database.query(<doubleQuotes46>users<doubleQuotes46>, null,  <doubleQuotes46>username<doubleQuotes46>+ <doubleQuotes46>='<doubleQuotes46> + username.trim() + <doubleQuotes46>'<doubleQuotes46>,<newline46mondego>                null, null, null, null);<newline46mondego><newline46mondego>    if(cursor == null || cursor.getCount() == 0) return <doubleQuotes46><doubleQuotes46>;<newline46mondego>    cursor.moveToFirst();<newline46mondego>    String password =  cursor.getString(cursor.getColumnIndex(<doubleQuotes46>password<doubleQuotes46>));  <newline46mondego>    return password;<newline46mondego>}<newline46mondego>"
"11214splitHere46","20321721splitHere46","loginButton.setOnClickListener(new View.OnClickListener() {<newline46mondego><newline46mondego>        @Override<newline46mondego>        public void onClick(View v) {<newline46mondego>            DatabaseConnector db = new DatabaseConnector(context);<newline46mondego>            db.open();<newline46mondego>            String storedPassword = db.checkLogin(strUsername);<newline46mondego>            db.close();<newline46mondego><newline46mondego>            if (storedPassword.equalsIgnoreCase(strPassword)) {<newline46mondego>                Toast.makeText(getApplicationContext(), <doubleQuotes46>Success!<doubleQuotes46>,<newline46mondego>                        Toast.LENGTH_LONG).show();<newline46mondego>            } else {<newline46mondego>                Toast.makeText(getApplicationContext(), <doubleQuotes46>Error!<doubleQuotes46>,<newline46mondego>                        Toast.LENGTH_LONG).show();<newline46mondego>            }<newline46mondego><newline46mondego>        }<newline46mondego><newline46mondego>    });<newline46mondego>"
"11215splitHere46","20321766splitHere46","public static void main(String... args) throws IOException {<newline46mondego>    int w = 30, h = 30;<newline46mondego><newline46mondego>    // create the binary mapping<newline46mondego>    byte BLACK = (byte)0, WHITE = (byte)255;<newline46mondego>    byte[] map = {BLACK, WHITE};<newline46mondego>    IndexColorModel icm = new IndexColorModel(1, map.length, map, map, map);<newline46mondego><newline46mondego>    // create checkered data<newline46mondego>    int[] data = new int[w*h];<newline46mondego>    for(int i=0; i<w; i++)<newline46mondego>        for(int j=0; j<h; j++)<newline46mondego>            data[i*h + j] = i%4<2 && j%4<2 || i%4>=2 && j%4>=2 ? BLACK:WHITE;<newline46mondego><newline46mondego>    // create image from color model and data<newline46mondego>    WritableRaster raster = icm.createCompatibleWritableRaster(w, h);<newline46mondego>    raster.setPixels(0, 0, w, h, data);<newline46mondego>    BufferedImage bi = new BufferedImage(icm, raster, false, null);<newline46mondego><newline46mondego>    // output to a file<newline46mondego>    ImageIO.write(bi, <doubleQuotes46>jpg<doubleQuotes46>, new File(<doubleQuotes46>C:\\Users\\user\\Desktop\\test.jpg<doubleQuotes46>));<newline46mondego>}<newline46mondego>"
"11216splitHere46","20321766splitHere46","public static void main(String... args) throws IOException {<newline46mondego>    int w = 40, h = 40, divs = 5;<newline46mondego><newline46mondego>    BufferedImage bi = new BufferedImage(w, h, BufferedImage.TYPE_BYTE_GRAY);<newline46mondego>    WritableRaster raster = bi.getRaster();<newline46mondego><newline46mondego>    for(int i=0; i<w; i++)<newline46mondego>        for(int j=0; j<h; j++)<newline46mondego>            raster.setSample(i,j,0,128+(int)(127*Math.sin(Math.PI*i/w*divs)*Math.sin(Math.PI*j/h*divs)));<newline46mondego><newline46mondego>    ImageIO.write(bi, <doubleQuotes46>jpg<doubleQuotes46>, new File(<doubleQuotes46>C:\\Users\\user\\Desktop\\test.jpg<doubleQuotes46>));<newline46mondego>}<newline46mondego>"
"11217splitHere46","20321954splitHere46","Shape"
"11218splitHere46","20321954splitHere46","import java.awt.Dimension;<newline46mondego>import java.awt.EventQueue;<newline46mondego>import java.awt.Graphics;<newline46mondego>import java.awt.Graphics2D;<newline46mondego>import java.awt.RenderingHints;<newline46mondego>import java.awt.geom.Path2D;<newline46mondego>import javax.swing.JFrame;<newline46mondego>import javax.swing.JPanel;<newline46mondego>import javax.swing.UIManager;<newline46mondego>import javax.swing.UnsupportedLookAndFeelException;<newline46mondego><newline46mondego>public class SimpleShape {<newline46mondego><newline46mondego>    public static void main(String[] args) {<newline46mondego>        new SimpleShape();<newline46mondego>    }<newline46mondego><newline46mondego>    public SimpleShape() {<newline46mondego>        EventQueue.invokeLater(new Runnable() {<newline46mondego>            @Override<newline46mondego>            public void run() {<newline46mondego>                try {<newline46mondego>                    UIManager.setLookAndFeel(UIManager.getSystemLookAndFeelClassName());<newline46mondego>                } catch (ClassNotFoundException | InstantiationException | IllegalAccessException | UnsupportedLookAndFeelException ex) {<newline46mondego>                    ex.printStackTrace();<newline46mondego>                }<newline46mondego><newline46mondego>                JFrame frame = new JFrame(<doubleQuotes46>Testing<doubleQuotes46>);<newline46mondego>                frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);<newline46mondego>                frame.add(new TestPane());<newline46mondego>                frame.pack();<newline46mondego>                frame.setLocationRelativeTo(null);<newline46mondego>                frame.setVisible(true);<newline46mondego>            }<newline46mondego>        });<newline46mondego>    }<newline46mondego><newline46mondego>    public class TestPane extends JPanel {<newline46mondego><newline46mondego>        private RightEnd rightEnd;<newline46mondego><newline46mondego>        public TestPane() {<newline46mondego>            rightEnd = new RightEnd(100, 100, 40);<newline46mondego>        }<newline46mondego><newline46mondego>        @Override<newline46mondego>        public Dimension getPreferredSize() {<newline46mondego>            return new Dimension(100, 100);<newline46mondego>        }<newline46mondego><newline46mondego>        @Override<newline46mondego>        protected void paintComponent(Graphics g) {<newline46mondego>            super.paintComponent(g);<newline46mondego>            int x = (getWidth() - 100) / 2;<newline46mondego>            int y = (getHeight()- 100) / 2;<newline46mondego>            Graphics2D g2d = (Graphics2D) g.create();<newline46mondego>            g2d.setRenderingHint(RenderingHints.KEY_ANTIALIASING, RenderingHints.VALUE_ANTIALIAS_ON);<newline46mondego>            g2d.translate(x, y);<newline46mondego>            g2d.fill(rightEnd);<newline46mondego>            g2d.dispose();<newline46mondego>        }<newline46mondego><newline46mondego>    }<newline46mondego><newline46mondego>    public class RightEnd extends Path2D.Float {<newline46mondego><newline46mondego>        public RightEnd(float width, float height, float radius) {<newline46mondego>            moveTo(0, 0);<newline46mondego>            lineTo(width - radius, 0);<newline46mondego>            curveTo(width, 0, width, 0, width, radius);<newline46mondego>            lineTo(width, height - radius);<newline46mondego>            curveTo(width, height, width, height, width - radius, height);<newline46mondego>            lineTo(0, height);<newline46mondego>            closePath();<newline46mondego>        }<newline46mondego><newline46mondego><newline46mondego><newline46mondego>    }<newline46mondego><newline46mondego>}<newline46mondego>"
"11219splitHere46","20322029splitHere46","LinearLayout layout = new LinearLayout(this);<newline46mondego>        layout.setOrientation(LinearLayout.VERTICAL); <newline46mondego><newline46mondego>        TextView menuText = new TextView(this);<newline46mondego>        menuText.setText(<doubleQuotes46>People<doubleQuotes46>);<newline46mondego>        menuText.setId(100);<newline46mondego>        menuText.setLayoutParams(new LayoutParams(LayoutParams.WRAP_CONTENT, LayoutParams.WRAP_CONTENT));<newline46mondego>        layout.addView(menuText);<newline46mondego><newline46mondego>        for (int i = 0; i < 10; i++) {<newline46mondego><newline46mondego>            LinearLayout row = new LinearLayout(this);<newline46mondego>            row.setLayoutParams(new LayoutParams(LayoutParams.MATCH_PARENT, LayoutParams.MATCH_PARENT));<newline46mondego><newline46mondego><newline46mondego>                Button btnTag = new Button(this);<newline46mondego>                btnTag.setLayoutParams(new LayoutParams(LayoutParams.MATCH_PARENT, LayoutParams.WRAP_CONTENT));<newline46mondego>                btnTag.setText( <doubleQuotes46> <doubleQuotes46> + i);<newline46mondego>                btnTag.setId(1 + (i));<newline46mondego>                row.addView(btnTag);<newline46mondego><newline46mondego>                btnTag.setOnClickListener(new View.OnClickListener() {<newline46mondego>                    public void onClick(View v) {<newline46mondego>                        String buttonText = <doubleQuotes46>Unknown Person<doubleQuotes46>;<newline46mondego>                            Button b = (Button) findViewById(v.getId());<newline46mondego>                            buttonText = (String) b.getText();<newline46mondego><newline46mondego>                        TextView tx = (TextView) findViewById(100);<newline46mondego>                        tx.setText(buttonText + <doubleQuotes46> pressed.<doubleQuotes46>);<newline46mondego>                    }<newline46mondego>                });<newline46mondego><newline46mondego><newline46mondego>            ScrollView sc = new ScrollView(this);<newline46mondego>            sc.setLayoutParams(new LayoutParams(LayoutParams.MATCH_PARENT, LayoutParams.WRAP_CONTENT));<newline46mondego>            sc.setFillViewport(true);<newline46mondego><newline46mondego>            sc.addView(row);<newline46mondego><newline46mondego>            layout.addView(sc);<newline46mondego><newline46mondego>            setContentView(layout);<newline46mondego>"
"11220splitHere46","20322182splitHere46","String"
"11221splitHere46","20322182splitHere46","Integer"
"11222splitHere46","20322182splitHere46","public void add(List strs) {...}<newline46mondego>"
"11223splitHere46","20322182splitHere46","List<String>"
"11224splitHere46","20322182splitHere46","List"
"11225splitHere46","20322182splitHere46","String"
"11226splitHere46","20322211splitHere46","CachedRowSet"
"11227splitHere46","20322211splitHere46","ResultSet"
"11228splitHere46","20322211splitHere46","RowSetProvider.newFactory().createCachedRowSet(rs);"
"11229splitHere46","20322211splitHere46","rs"
"11230splitHere46","20322211splitHere46","pst"
"11231splitHere46","20322287splitHere46","// Inside constructor<newline46mondego>selectionSort(); // call the method<newline46mondego>calculateMean(); // call the method<newline46mondego>System.out.println(toString()); // print the data using toString<newline46mondego>"
"11232splitHere46","20322287splitHere46","toString()"
"11233splitHere46","20322287splitHere46","public String toString() {<newline46mondego>    return Arrays.toString(data);<newline46mondego>}<newline46mondego>"
"11234splitHere46","20322287splitHere46","calculateMean()"
"11235splitHere46","20322287splitHere46","for (int counter = 0; counter < data.length; counter++) {<newline46mondego>    sum = sum + data[counter];<newline46mondego>}<newline46mondego>average = sum / data.length; // Calculate the average after finding the sum and not at every iteration.<newline46mondego>"
"11236splitHere46","20322287splitHere46","mean"
"11237splitHere46","20322287splitHere46","average"
"11238splitHere46","20322287splitHere46","calculateMean()"
"11239splitHere46","20322287splitHere46","toString()"
"11240splitHere46","20322287splitHere46","int data[];"
"11241splitHere46","20322287splitHere46","double data[] = new double[6];"
"11242splitHere46","20322287splitHere46","data[] = new int[5];<newline46mondego>"
"11243splitHere46","20322287splitHere46","for"
"11244splitHere46","20322287splitHere46","0"
"11245splitHere46","20322287splitHere46","1"
"11246splitHere46","20322287splitHere46","for(int i = 0; i < data.length; i++){<newline46mondego>"
"11247splitHere46","20322439splitHere46","wait()"
"11248splitHere46","20322439splitHere46","wait()"
"11249splitHere46","20322439splitHere46","notify"
"11250splitHere46","20322439splitHere46","notifyAll"
"11251splitHere46","20322439splitHere46","freeResource"
"11252splitHere46","20322461splitHere46","y = sin(x/100 * PI/2) * 100"
"11253splitHere46","20322461splitHere46","x=0,   y=0<newline46mondego>x=100, y=100<newline46mondego>x=200, y=0<newline46mondego>x=300, y=-100<newline46mondego>... and so on ...<newline46mondego>"
"11254splitHere46","20322461splitHere46","y = sin(x/Cx * PI/2) * Cy<newline46mondego>"
"11255splitHere46","20322461splitHere46","y = sin(x/Cx * PI/2) * Cy<newline46mondego>"
"11256splitHere46","20322461splitHere46","alpha = dy/dx = cos(x/Cx * PI/2) * Cy * PI/2 * 1/Cx<newline46mondego>"
"11257splitHere46","20322561splitHere46","getClass()"
"11258splitHere46","20322624splitHere46","public class signature extends View {<newline46mondego>        private static final float STROKE_WIDTH = 5f;<newline46mondego>        private static final float HALF_STROKE_WIDTH = STROKE_WIDTH / 2;<newline46mondego>        private Paint paint = new Paint();<newline46mondego>        private Path path = new Path();<newline46mondego><newline46mondego>        private float lastTouchX;<newline46mondego>        private float lastTouchY;<newline46mondego>        private final RectF dirtyRect = new RectF();<newline46mondego><newline46mondego>        public signature(Context context, AttributeSet attrs) {<newline46mondego>            super(context, attrs);<newline46mondego>            paint.setAntiAlias(true);<newline46mondego>            paint.setColor(Color.BLACK);<newline46mondego>            paint.setStyle(Paint.Style.STROKE);<newline46mondego>            paint.setStrokeJoin(Paint.Join.ROUND);<newline46mondego>            paint.setStrokeWidth(STROKE_WIDTH);<newline46mondego>        }<newline46mondego><newline46mondego>        public void save(View v) {<newline46mondego>            Log.v(<doubleQuotes46>log_tag<doubleQuotes46>, <doubleQuotes46>Width: <doubleQuotes46> + v.getWidth());<newline46mondego>            Log.v(<doubleQuotes46>log_tag<doubleQuotes46>, <doubleQuotes46>Height: <doubleQuotes46> + v.getHeight());<newline46mondego>            if (mBitmap == null) {<newline46mondego>                mBitmap = Bitmap.createBitmap(mContent.getWidth(),<newline46mondego>                        mContent.getHeight(), Bitmap.Config.RGB_565);<newline46mondego>                ;<newline46mondego>            }<newline46mondego>            Canvas canvas = new Canvas(mBitmap);<newline46mondego>            try {<newline46mondego>                FileOutputStream mFileOutStream = new FileOutputStream(new File(Environment.getExternalStorageDirectory().toString()<newline46mondego>                        , <doubleQuotes46>sign.png<doubleQuotes46>));<newline46mondego><newline46mondego>                v.draw(canvas);<newline46mondego>                mBitmap.compress(Bitmap.CompressFormat.PNG, 90, mFileOutStream);<newline46mondego>                mFileOutStream.flush();<newline46mondego>                mFileOutStream.close();<newline46mondego>                String url = Images.Media.insertImage(getContentResolver(),<newline46mondego>                        mBitmap, <doubleQuotes46>title<doubleQuotes46>, null);<newline46mondego>                Log.v(<doubleQuotes46>log_tag<doubleQuotes46>, <doubleQuotes46>url: <doubleQuotes46> + url);<newline46mondego>                // In case you want to delete the file<newline46mondego>                // boolean deleted = mypath.delete();<newline46mondego>                // Log.v(<doubleQuotes46>log_tag<doubleQuotes46>,<doubleQuotes46>deleted: <doubleQuotes46> + mypath.toString() + deleted);<newline46mondego>                // If you want to convert the image to string use base64<newline46mondego>                // converter<newline46mondego><newline46mondego>            } catch (Exception e) {<newline46mondego>                Log.v(<doubleQuotes46>log_tag<doubleQuotes46>, e.toString());<newline46mondego>            }<newline46mondego>        }<newline46mondego><newline46mondego>        public void clear() {<newline46mondego>            path.reset();<newline46mondego>            invalidate();<newline46mondego>        }<newline46mondego><newline46mondego>        @Override<newline46mondego>        protected void onDraw(Canvas canvas) {<newline46mondego>            canvas.drawPath(path, paint);<newline46mondego>        }<newline46mondego><newline46mondego>        @Override<newline46mondego>        public boolean onTouchEvent(MotionEvent event) {<newline46mondego>            float eventX = event.getX();<newline46mondego>            float eventY = event.getY();<newline46mondego>            mGetSign.setEnabled(true);<newline46mondego><newline46mondego>            switch (event.getAction()) {<newline46mondego>            case MotionEvent.ACTION_DOWN:<newline46mondego>                path.moveTo(eventX, eventY);<newline46mondego>                lastTouchX = eventX;<newline46mondego>                lastTouchY = eventY;<newline46mondego>                return true;<newline46mondego><newline46mondego>            case MotionEvent.ACTION_MOVE:<newline46mondego><newline46mondego>            case MotionEvent.ACTION_UP:<newline46mondego><newline46mondego>                resetDirtyRect(eventX, eventY);<newline46mondego>                int historySize = event.getHistorySize();<newline46mondego>                for (int i = 0; i < historySize; i++) {<newline46mondego>                    float historicalX = event.getHistoricalX(i);<newline46mondego>                    float historicalY = event.getHistoricalY(i);<newline46mondego>                    expandDirtyRect(historicalX, historicalY);<newline46mondego>                    path.lineTo(historicalX, historicalY);<newline46mondego>                }<newline46mondego>                path.lineTo(eventX, eventY);<newline46mondego>                break;<newline46mondego><newline46mondego>            default:<newline46mondego>                debug(<doubleQuotes46>Ignored touch event: <doubleQuotes46> + event.toString());<newline46mondego>                return false;<newline46mondego>            }<newline46mondego><newline46mondego>            invalidate((int) (dirtyRect.left - HALF_STROKE_WIDTH),<newline46mondego>                    (int) (dirtyRect.top - HALF_STROKE_WIDTH),<newline46mondego>                    (int) (dirtyRect.right + HALF_STROKE_WIDTH),<newline46mondego>                    (int) (dirtyRect.bottom + HALF_STROKE_WIDTH));<newline46mondego><newline46mondego>            lastTouchX = eventX;<newline46mondego>            lastTouchY = eventY;<newline46mondego><newline46mondego>            return true;<newline46mondego>        }<newline46mondego><newline46mondego>        private void debug(String string) {<newline46mondego>        }<newline46mondego><newline46mondego>        private void expandDirtyRect(float historicalX, float historicalY) {<newline46mondego>            if (historicalX < dirtyRect.left) {<newline46mondego>                dirtyRect.left = historicalX;<newline46mondego>            } else if (historicalX > dirtyRect.right) {<newline46mondego>                dirtyRect.right = historicalX;<newline46mondego>            }<newline46mondego><newline46mondego>            if (historicalY < dirtyRect.top) {<newline46mondego>                dirtyRect.top = historicalY;<newline46mondego>            } else if (historicalY > dirtyRect.bottom) {<newline46mondego>                dirtyRect.bottom = historicalY;<newline46mondego>            }<newline46mondego>        }<newline46mondego><newline46mondego>        private void resetDirtyRect(float eventX, float eventY) {<newline46mondego>            dirtyRect.left = Math.min(lastTouchX, eventX);<newline46mondego>            dirtyRect.right = Math.max(lastTouchX, eventX);<newline46mondego>            dirtyRect.top = Math.min(lastTouchY, eventY);<newline46mondego>            dirtyRect.bottom = Math.max(lastTouchY, eventY);<newline46mondego>        }<newline46mondego>    }<newline46mondego>"
"11259splitHere46","20322698splitHere46","String DateStr=<doubleQuotes46>2012-05-31T13:48:04Z<doubleQuotes46>;<newline46mondego>SimpleDateFormat sdf = new SimpleDateFormat(<doubleQuotes46>yyyy-MM-dd'T'HH:mm:ss'Z'<doubleQuotes46>);<newline46mondego>Date d=sdf.parse(DateStr);<newline46mondego>System.out.println(d.getTime());<newline46mondego>"
"11260splitHere46","20322826splitHere46","src/images/foo.png<newline46mondego>"
"11261splitHere46","20322826splitHere46","ImageIcon ii = new ImageIcon(<doubleQuotes46>images/foo.png<doubleQuotes46>);<newline46mondego>Image image = ii.getImage();<newline46mondego>System.out.println(image != null);<newline46mondego>"
"11262splitHere46","20322826splitHere46","true<newline46mondego>"
"11263splitHere46","20322826splitHere46","Image"
"11264splitHere46","20322826splitHere46","null"
"11265splitHere46","20322861splitHere46","context.getSystemService"
"11266splitHere46","20322861splitHere46","this"
"11267splitHere46","20322861splitHere46","LayoutInflater inflater = (LayoutInflater) context.getSystemService( Context.LAYOUT_INFLATER_SERVICE );<newline46mondego>"
"11268splitHere46","20322861splitHere46","LayoutInflater inflater = LayoutInflater.from(context);<newline46mondego>"
"11269splitHere46","20323068splitHere46","byte"
"11270splitHere46","20323068splitHere46","int"
"11271splitHere46","20323068splitHere46","byte"
"11272splitHere46","20323121splitHere46","android.jar"
"11273splitHere46","20323121splitHere46","android.jar"
"11274splitHere46","20323121splitHere46","throw UnsupportedOperationException"
"11275splitHere46","20323121splitHere46","return null"
"11276splitHere46","20323121splitHere46",".apk"
"11277splitHere46","20323121splitHere46",".jar"
"11278splitHere46","20323121splitHere46",".jar"
"11279splitHere46","20323121splitHere46","android.jar"
"11280splitHere46","20323121splitHere46","android.jar"
"11281splitHere46","20323121splitHere46","Application"
"11282splitHere46","20323121splitHere46","Application"
"11283splitHere46","20323121splitHere46","Application"
"11284splitHere46","20323222splitHere46","index1"
"11285splitHere46","20323222splitHere46","Index"
"11286splitHere46","20323222splitHere46","List"
"11287splitHere46","20323222splitHere46","List"
"11288splitHere46","20323222splitHere46","List"
"11289splitHere46","20323222splitHere46","ArrayList"
"11290splitHere46","20323222splitHere46","List"
"11291splitHere46","20323400splitHere46","NonEmptyArrayOfBaseItemIdsType type = new NonEmptyArrayOfBaseItemIdsType();<newline46mondego>"
"11292splitHere46","20323400splitHere46","Unmarshaller u = ...;<newline46mondego>NonEmptyArrayOfBaseItemIdsType type = (NonEmptyArrayOfBaseItemIdsType)u.unmarshal(new File(<doubleQuotes46>foo.xml<doubleQuotes46>));<newline46mondego>"
"11293splitHere46","20323555splitHere46","EPartService"
"11294splitHere46","20323555splitHere46","partService.showPart(id, PartState.CREATE);<newline46mondego>"
"11295splitHere46","20323555splitHere46","@PostContextCreate"
"11296splitHere46","20323558splitHere46","<bean id=<doubleQuotes46>zipSplitter<doubleQuotes46> class=<doubleQuotes46>org.apache.camel.dataformat.zipfile.ZipSplitter<doubleQuotes46> /><newline46mondego><newline46mondego>...<newline46mondego><newline46mondego><split streaming=<doubleQuotes46>true<doubleQuotes46> parallelProcessing=<doubleQuotes46>true<doubleQuotes46>><newline46mondego>    <ref>zipSplitter</ref> <newline46mondego>    <convertBodyTo type=<doubleQuotes46>java.lang.String<doubleQuotes46> /><newline46mondego>    <to uri=<doubleQuotes46>file:foo<doubleQuotes46> /><newline46mondego></split><newline46mondego>"
"11297splitHere46","20323715splitHere46","new Thread(worker1).start();<newline46mondego>new Thread(worker2).start();<newline46mondego>new Thread(worker3).start();<newline46mondego>new Thread(worker4).start();<newline46mondego>"
"11298splitHere46","20323790splitHere46","public static void largestProduct() throws FileNotFoundException {<newline46mondego>Scanner s;<newline46mondego>s = new Scanner(new File(<doubleQuotes46>p11.txt<doubleQuotes46>)); // Read in numbers from grid file<newline46mondego>ArrayList<Integer> a = new ArrayList<Integer>();  <newline46mondego>int product = 0;<newline46mondego><newline46mondego>while (s.hasNext()) {<newline46mondego>a.add(s.nextInt());<newline46mondego>}<newline46mondego><newline46mondego>for (int i = 0; i < a.size(); i++) {<newline46mondego>    int origin = a.get(i);<newline46mondego>    int luHighest = 0;<newline46mondego>    int ldHighest = 0;<newline46mondego>    int ruHighest = 0;<newline46mondego>    int rdHighest = 0;<newline46mondego>    if(i>63){<newline46mondego>        int lu_diag2 = a.get(i-21);<newline46mondego>        int lu_diag3 = a.get(i-21-21);<newline46mondego>        int lu_diag4 = a.get(i-21-21-21);<newline46mondego>        luHighest = origin * lu_diag2 * lu_diag3 * lu_diag4;<newline46mondego>    }<newline46mondego>    if(i<a.size()-57){  <newline46mondego>        int ld_diag2 = a.get(i+19);<newline46mondego>        int ld_diag3 = a.get(i+19+19);<newline46mondego>        int ld_diag4 = a.get(i+19+19+19);<newline46mondego>        ldHighest = origin * ld_diag2 * ld_diag3 * ld_diag4;<newline46mondego>    }<newline46mondego>    if(i>57){ <newline46mondego>        int ru_diag2 = a.get(i-19);<newline46mondego>        int ru_diag3 = a.get(i-19-19);<newline46mondego>        int ru_diag4 = a.get(i-19-19-19);<newline46mondego>        ruHighest = origin * ru_diag2 * ru_diag3 * ru_diag4;<newline46mondego>    }<newline46mondego>    if(i<a.size()-63){<newline46mondego>        int rd_diag2 = a.get(i+21);<newline46mondego>        int rd_diag3 = a.get(i+21+21);<newline46mondego>        int rd_diag4 = a.get(i+21+21+21);<newline46mondego>        rdHighest = origin * rd_diag2 * rd_diag3 * rd_diag4;<newline46mondego>    }<newline46mondego><newline46mondego>    int highest = Math.max(Math.max(Math.max(rdHighest,ruHighest),ldHighest),luHighest);<newline46mondego><newline46mondego>    if (highest > product) {<newline46mondego>    product = highest;<newline46mondego>    }<newline46mondego>}<newline46mondego>System.out.println(product);<newline46mondego>}<newline46mondego>"
"11299splitHere46","20323790splitHere46","for"
"11300splitHere46","20323790splitHere46","i=i"
"11301splitHere46","20323796splitHere46","repaint()"
"11302splitHere46","20323796splitHere46","paintComponent(Graphics g)"
"11303splitHere46","20323796splitHere46","SwingUtilities.invokeLater(Runnable)"
"11304splitHere46","20323796splitHere46","Graphics.drawImage(x, y, width, height, ImageObserver)"
"11305splitHere46","20323796splitHere46","this"
"11306splitHere46","20323796splitHere46","null"
"11307splitHere46","20323796splitHere46","ImageObserver"
"11308splitHere46","20323904splitHere46","String input = <doubleQuotes46>1 2 3 456<doubleQuotes46>;<newline46mondego><newline46mondego>int len=input.split(<doubleQuotes46> <doubleQuotes46>).length;<newline46mondego>"
"11309splitHere46","20324028splitHere46","use non-capturing groups instead"
"11310splitHere46","20324028splitHere46","(?:[apv]|ad)\\d+<newline46mondego>"
"11311splitHere46","20324260splitHere46","ConcurrentMap subAccounts = allInOne.get(account).get(<doubleQuotes46>subaccounts<doubleQuotes46>);<newline46mondego>for (String key : subAccounts.keySet()) {<newline46mondego>    Object subAccountObject = subAccounts.get(key);<newline46mondego>}<newline46mondego>"
"11312splitHere46","20324274splitHere46","public void remove(DocumentFilter.FilterBypass fb, int offset, int length) throws BadLocationException <newline46mondego>        {  <newline46mondego>            fb.insertString(offset, <doubleQuotes46><doubleQuotes46>, null);<newline46mondego>        }  <newline46mondego>"
"11313splitHere46","20324330splitHere46","public static void updateCustomers(List<CustomerInfo> custList) {<newline46mondego>    Iterator<CustomerInfo> ite = custList.iterator(); // line 1<newline46mondego>    // other stuff<newline46mondego>}<newline46mondego>"
"11314splitHere46","20324330splitHere46","custList"
"11315splitHere46","20324330splitHere46","CustomerInfo"
"11316splitHere46","20324330splitHere46","List<?> custList"
"11317splitHere46","20324330splitHere46","Object"
"11318splitHere46","20324330splitHere46","instanceof"
"11319splitHere46","20324330splitHere46","custList"
"11320splitHere46","20324330splitHere46","CustomerInfo"
"11321splitHere46","20324330splitHere46","public static <T extends CustomerInfo> void updateCustomers(List<T> custList) {<newline46mondego>    Iterator<T> ite = custList.iterator(); // line 1<newline46mondego>    // other stuff<newline46mondego>}<newline46mondego>"
"11322splitHere46","20324408splitHere46","int strLength = str.length(); // so you don't have to call this method every time<newline46mondego><newline46mondego>for (int i = 0; i < strLength; i++) {<newline46mondego>    char ch = str.charAt(i); // so you won't have to call this twice<newline46mondego>    if (ch == '(') {<newline46mondego>        counter++;<newline46mondego>    } else if (ch == ')') {<newline46mondego>        counter--;<newline46mondego>        if (counter < 0) {<newline46mondego>            return false;<newline46mondego>        }<newline46mondego>    }<newline46mondego>}<newline46mondego>"
"11323splitHere46","20324408splitHere46","return counter == 0;"
"11324splitHere46","20324568splitHere46","Random"
"11325splitHere46","20324568splitHere46","Random"
"11326splitHere46","20324568splitHere46","nextDouble()"
"11327splitHere46","20324568splitHere46","nextInt"
"11328splitHere46","20324568splitHere46","val = generator.nextInt(nchrom); // Exclusive upper bound<newline46mondego>"
"11329splitHere46","20324581splitHere46","public class Test {<newline46mondego>    private d d;<newline46mondego>    public d getD() {return d;}<newline46mondego>    public void setD(d d) {this.d = d;}    <newline46mondego>    public static class d{<newline46mondego>        private List<Results> results;<newline46mondego>        public List<Results> getResults() {return results;}<newline46mondego>        public void setResults(List<Results> results) {this.results = results;}<newline46mondego>    }<newline46mondego>    public static class Results {<newline46mondego>        public Metadata __metadata;<newline46mondego>        public String Synonym;<newline46mondego>    }<newline46mondego>    public static class Metadata {<newline46mondego>        private String uri;<newline46mondego>        private String type;<newline46mondego>        public String getUri() {return uri;}<newline46mondego>        public void setUri(String uri) {this.uri = uri;}<newline46mondego>        public String getType() {return type;}<newline46mondego>        public void setType(String type) {this.type = type;}<newline46mondego>    }<newline46mondego>}<newline46mondego>"
"11330splitHere46","20324581splitHere46","Test test = mapper.readValue(json, KeyPhrase.class);<newline46mondego>    System.out.println(<doubleQuotes46>cp<doubleQuotes46>);<newline46mondego><newline46mondego>    for(Test.Results res : test.getD().getResults()){<newline46mondego>        System.out.println(res.Synonym);<newline46mondego>}<newline46mondego>"
"11331splitHere46","20324655splitHere46","int [] grades = new int [numStudents ];<newline46mondego>"
"11332splitHere46","20324655splitHere46","numStudents"
"11333splitHere46","20324655splitHere46","i"
"11334splitHere46","20324655splitHere46","public static void main(String[] args) {<newline46mondego>    int i;<newline46mondego>    int numStudents;<newline46mondego>    System.out.print(<doubleQuotes46>Enter number of students: <doubleQuotes46>);<newline46mondego>    Scanner scanint = new Scanner (System.in);      <newline46mondego>    numStudents = scanint.nextInt();<newline46mondego>    int [] grades = new int [numStudents]; //the size we wanted<newline46mondego>    for ( i = 0;  i < grades.length; ++i) //starting from 0, not 1.<newline46mondego>    {<newline46mondego>        System.out.println(<doubleQuotes46>Enter grade: <doubleQuotes46>);<newline46mondego>        grades[i] = scanint.nextInt();<newline46mondego>    }<newline46mondego>    //print the array - for checking out everyting is ok<newline46mondego>    System.out.println(Arrays.toString(grades)); <newline46mondego>}<newline46mondego>"
"11335splitHere46","20324963splitHere46","`'some <doubleQuotes46>String<doubleQuotes46>'`<newline46mondego>"
"11336splitHere46","20324963splitHere46","<doubleQuotes46><doubleQuotes46><doubleQuotes46> Everything here can be <doubleQuotes46>quoted<doubleQuotes46><newline46mondego>/<doubleQuotes46><doubleQuotes46><doubleQuotes46><newline46mondego>"
"11337splitHere46","20325063splitHere46","true || true ? false : true<newline46mondego>"
"11338splitHere46","20325063splitHere46","(true || true) ? false : true<newline46mondego>"
"11339splitHere46","20325063splitHere46","true || (true ? false : true)<newline46mondego>"
"11340splitHere46","20325065splitHere46","setTimeout(function(){showTimeout()},<%= session.getMaxInactiveInterval() - 60*1000 %>);<newline46mondego>"
"11341splitHere46","20325293splitHere46","Book"
"11342splitHere46","20325437splitHere46","spring-dispatcher-servlet.xml"
"11343splitHere46","20325437splitHere46","<context:component-scan base-package=<doubleQuotes46>app.service<doubleQuotes46> /><newline46mondego>"
"11344splitHere46","20325458splitHere46","return;"
"11345splitHere46","20325458splitHere46","package com.aop.example;<newline46mondego><newline46mondego>public class Main {<newline46mondego><newline46mondego>  public static void main(String[] args) {<newline46mondego>    System.out.println(<doubleQuotes46>Main starts!<doubleQuotes46>);<newline46mondego>    LibClass libClass = new LibClass();<newline46mondego>    System.out.println(<doubleQuotes46>Main finished!<doubleQuotes46>);<newline46mondego>  }<newline46mondego>}<newline46mondego>"
"11346splitHere46","20325458splitHere46","package com.aop.example;<newline46mondego><newline46mondego>public class LibClass {<newline46mondego><newline46mondego>  public LibClass() {<newline46mondego>    packagePrivateMethod();<newline46mondego>  }<newline46mondego><newline46mondego>  void packagePrivateMethod() {<newline46mondego>    // <-- here I want to execute additional code<newline46mondego>    System.out.println(<doubleQuotes46>In packagePrivateMethod<doubleQuotes46>);<newline46mondego>  }<newline46mondego>}<newline46mondego>"
"11347splitHere46","20325458splitHere46","package com.aop.agent;<newline46mondego><newline46mondego>import java.io.IOException;<newline46mondego>import java.lang.instrument.ClassFileTransformer;<newline46mondego>import java.lang.instrument.IllegalClassFormatException;<newline46mondego>import java.lang.instrument.Instrumentation;<newline46mondego>import java.security.ProtectionDomain;<newline46mondego><newline46mondego>import javassist.CannotCompileException;<newline46mondego>import javassist.ClassPool;<newline46mondego>import javassist.CtClass;<newline46mondego>import javassist.CtMethod;<newline46mondego>import javassist.LoaderClassPath;<newline46mondego>import javassist.NotFoundException;<newline46mondego><newline46mondego>public class Agent {<newline46mondego><newline46mondego>  public static void premain(String agentArgs, Instrumentation instr) {<newline46mondego>    System.out.println(<doubleQuotes46>Agent starts!<doubleQuotes46>);<newline46mondego>    instr.addTransformer(new ClassFileTransformer() {<newline46mondego><newline46mondego>      @Override<newline46mondego>      public byte[] transform(ClassLoader classLoader, String className, Class<?> arg2, ProtectionDomain arg3,<newline46mondego>          byte[] bytes)<newline46mondego>          throws IllegalClassFormatException {<newline46mondego>        System.out.println(<doubleQuotes46>Before loading class <doubleQuotes46> + className);<newline46mondego><newline46mondego>        final String TARGET_CLASS = <doubleQuotes46>com/aop/example/LibClass<doubleQuotes46>;<newline46mondego><newline46mondego>        if (!className.equals(TARGET_CLASS)) {<newline46mondego>          return null;<newline46mondego>        }<newline46mondego><newline46mondego>        LoaderClassPath path = new LoaderClassPath(classLoader);<newline46mondego>        ClassPool pool = new ClassPool();<newline46mondego>        pool.appendSystemPath();<newline46mondego>        pool.appendClassPath(path);<newline46mondego><newline46mondego>        try {<newline46mondego>          CtClass targetClass = pool.get(TARGET_CLASS.replace('/', '.'));<newline46mondego>          System.out.println(<doubleQuotes46>Enhancing class <doubleQuotes46> + targetClass.getName());<newline46mondego>          CtMethod[] methods = targetClass.getDeclaredMethods();<newline46mondego>          for (CtMethod method : methods) {<newline46mondego>            if (!method.getName().contains(<doubleQuotes46>packagePrivateMethod<doubleQuotes46>)) {<newline46mondego>              continue;<newline46mondego>            }<newline46mondego>            System.out.println(<doubleQuotes46>Enhancing method <doubleQuotes46> + method.getSignature());<newline46mondego>            String myMethodInvocation = <doubleQuotes46>com.aop.agent.Agent.myMethodInvocation();<doubleQuotes46>;<newline46mondego>            method.insertBefore(myMethodInvocation);<newline46mondego>          }<newline46mondego>          System.out.println(<doubleQuotes46>Enhanced bytecode<doubleQuotes46>);<newline46mondego><newline46mondego>          return targetClass.toBytecode();<newline46mondego>        }<newline46mondego>        catch (CannotCompileException e) {<newline46mondego>          e.printStackTrace();<newline46mondego>          throw new RuntimeException(e);<newline46mondego>        }<newline46mondego>        catch (IOException e) {<newline46mondego>          e.printStackTrace();<newline46mondego>          throw new RuntimeException(e);<newline46mondego>        }<newline46mondego>        catch (NotFoundException e) {<newline46mondego>          e.printStackTrace();<newline46mondego>          throw new RuntimeException(e);<newline46mondego>        }<newline46mondego>      }<newline46mondego><newline46mondego>    });<newline46mondego>  }<newline46mondego><newline46mondego>  public static void myMethodInvocation() {<newline46mondego>    System.out.println(<doubleQuotes46><<<My injected code>>>!<doubleQuotes46>);<newline46mondego>  }<newline46mondego>}<newline46mondego>"
"11348splitHere46","20325458splitHere46","Premain-Class: com.aop.agent.Agent"
"11349splitHere46","20325458splitHere46","%JAVA_HOME%\bin\java -cp .;..\javassist-3.12.1.GA.jar -javaagent:..\..\agent.jar com.aop.example.Main<newline46mondego>"
"11350splitHere46","20325458splitHere46","Agent starts!<newline46mondego>Before loading class com/aop/example/Main<newline46mondego>Main starts!<newline46mondego>Before loading class com/aop/example/LibClass<newline46mondego>Enhancing class com.aop.example.LibClass<newline46mondego>Enhancing method ()V<newline46mondego>Enhanced bytecode<newline46mondego><<<My injected code>>>!<newline46mondego>In packagePrivateMethod<newline46mondego>Main finished!<newline46mondego>Before loading class java/lang/Shutdown<newline46mondego>Before loading class java/lang/Shutdown$Lock<newline46mondego>"
"11351splitHere46","20325478splitHere46","JasperReports"
"11352splitHere46","20325478splitHere46","struts2-jasperreports-plugin"
"11353splitHere46","20325623splitHere46","X-Mailer: Microsoft Windows Live Mail 16.4.3508.205<newline46mondego>X-Mailer: Apple Mail (2.1822)<newline46mondego>X-Mailer: iPhone Mail (10B329)<newline46mondego>"
"11354splitHere46","20325651splitHere46","int x=1+2+3+4+5+6+7+8+9+10;<newline46mondego>"
"11355splitHere46","20325651splitHere46","double x=1+2+3+4+5+6+7+8+9+10;<newline46mondego>"
"11356splitHere46","20325651splitHere46","public static void main(String[] args)<newline46mondego>{<newline46mondego>    .....<newline46mondego>}<newline46mondego>"
"11357splitHere46","20325651splitHere46","public static void main(String[] args)<newline46mondego>{<newline46mondego>     int x=1+2+3+4+5+6+7+8+9+10;<newline46mondego>     System.out.println(x);<newline46mondego>}<newline46mondego>"
"11358splitHere46","20325714splitHere46","p % 2"
"11359splitHere46","20325714splitHere46","p & 1"
"11360splitHere46","20325714splitHere46","Math.pow(2,x)"
"11361splitHere46","20325714splitHere46","2 << x"
"11362splitHere46","20325714splitHere46","nanotime"
"11363splitHere46","20325714splitHere46","for ( int i = 0; i < 10; i++ ) {<newline46mondego>  long q = ((1 << (i+2)) - 1) << (i+1);<newline46mondego>  // Printing BigIntegers in binary is easy.<newline46mondego>  BigInteger bq = BigInteger.valueOf(q);<newline46mondego>  System.out.println(q+<doubleQuotes46> = <doubleQuotes46>+bq.toString(2));<newline46mondego>}<newline46mondego><newline46mondego>6 = 110<newline46mondego>28 = 11100<newline46mondego>120 = 1111000<newline46mondego>496 = 111110000<newline46mondego>2016 = 11111100000<newline46mondego>8128 = 1111111000000<newline46mondego>32640 = 111111110000000<newline46mondego>130816 = 11111111100000000<newline46mondego>523776 = 1111111111000000000<newline46mondego>2096128 = 111111111110000000000<newline46mondego>"
"11364splitHere46","20325714splitHere46","BigInteger"
"11365splitHere46","20325714splitHere46","for ( int i = 0; i < 10; i++ ) {<newline46mondego>  BigInteger p = BigInteger.ONE.shiftLeft(i+2).subtract(BigInteger.ONE).shiftLeft(i+1);<newline46mondego>  System.out.println(p.toString(10)+<doubleQuotes46> = <doubleQuotes46>+p.toString(2));<newline46mondego>  //long q = ((1 << (i+2)) - 1) << (i+1);<newline46mondego>  //BigInteger bq = BigInteger.valueOf(q);<newline46mondego>  //System.out.println(<doubleQuotes46>    <doubleQuotes46>+bq.toString(10)+<doubleQuotes46> = <doubleQuotes46>+bq.toString(2));<newline46mondego>}<newline46mondego>"
"11366splitHere46","20325724splitHere46","Thread.start()"
"11367splitHere46","20325835splitHere46","ContentProvider"
"11368splitHere46","20325835splitHere46","ColumnLabelProviders"
"11369splitHere46","20325835splitHere46","LabelProvider"
"11370splitHere46","20325845splitHere46","SimpleDateFormat sdf = new SimpleDateFormat(<doubleQuotes46>yyyy-MM-dd HH:mm:ss<doubleQuotes46>);<newline46mondego>System.out.println(sdf.format(thedate));<newline46mondego>"
"11371splitHere46","20325868splitHere46","start"
"11372splitHere46","20325868splitHere46","start.setTime(row.getCell(0).getDateCellValue());"
"11373splitHere46","20325868splitHere46","start.add(Calendar.MONTH,-1);"
"11374splitHere46","20325868splitHere46","getActualMaximum"
"11375splitHere46","20325937splitHere46","rowSorter.setRowFilter(RowFilter.regexFilter(<doubleQuotes46>(?i)<doubleQuotes46> + text));<newline46mondego>"
"11376splitHere46","20326098splitHere46","String url =<doubleQuotes46>indirizzo<doubleQuotes46>+ MainActivity.codschool.getText().toString()+<doubleQuotes46>&login=<doubleQuotes46>+MainActivity.id.getText().toString()+<doubleQuotes46>&password=<doubleQuotes46>+MainActivity.pw.getText().toString();<newline46mondego>            Connection.Response res = Jsoup<newline46mondego>                    .connect(<doubleQuotes46>url<doubleQuotes46>)<newline46mondego><newline46mondego>                    .data(<doubleQuotes46>login<doubleQuotes46>, MainActivity.id.getText().toString())<newline46mondego>                    .data(<doubleQuotes46>password<doubleQuotes46>,MainActivity.pw.getText().toString())<newline46mondego>                    .method(Connection.Method.POST)<newline46mondego>                    .execute();<newline46mondego><newline46mondego>            //Keep logged in<newline46mondego>            Map<String, String> cookies = res.cookies();<newline46mondego>"
"11377splitHere46","20326232splitHere46","int s  = 40;//preview scale factor<newline46mondego>int w  = 8;//pixels width<newline46mondego>int h  = 8;//pixels height<newline46mondego>int np = w*h;//total number of pixels <newline46mondego>int b = 255;//current pixel brush brightness<newline46mondego>float nb = 0;//normal image brightness<newline46mondego>float mb = 64;//max brightness<newline46mondego>float db = 0;//dimmed image brightness<newline46mondego><newline46mondego>int[][] normal,dimmed;<newline46mondego><newline46mondego>void setup(){<newline46mondego>  noSmooth();fill(127);<newline46mondego>  size(w*s*2,h*s);<newline46mondego>  normal = new int[w][h];<newline46mondego>  dimmed = new int[w][h];<newline46mondego>}<newline46mondego>void draw(){<newline46mondego>  background(0);//clear<newline46mondego>  for(int y = 0; y  < h ; y++){<newline46mondego>    for(int x = 0; x < w ; x++){<newline46mondego>      fill(normal[x][y]);<newline46mondego>      rect(x*s,y*s,s,s);//draw a scaled pixel representation<newline46mondego>      fill(dimmed[x][y]);<newline46mondego>      rect((x*s)+(w*s),y*s,s,s);<newline46mondego>    }<newline46mondego>  }<newline46mondego>  fill(127);text(<doubleQuotes46>original brightness: <doubleQuotes46>+nb+<doubleQuotes46> max: <doubleQuotes46> + mb +<doubleQuotes46>\ndimmed brightness: <doubleQuotes46> + db,10,15);<newline46mondego>}<newline46mondego>void mouseDragged(){<newline46mondego>  if((mouseX > 0 && mouseX < w*s)&&(mouseY > 0 && mouseY < h*s)){<newline46mondego>    normal[mouseX/s][mouseY/s] = b;<newline46mondego>    //average brightness<newline46mondego>    nb = getBrightness(normal);<newline46mondego>    //dimm if needed<newline46mondego>    float bd   = (nb-mb)/255.0;//normalized brightness difference<newline46mondego>    println(nb-mb+<doubleQuotes46>/<doubleQuotes46>+bd);<newline46mondego><newline46mondego>    for(int y = 0; y  < h ; y++)<newline46mondego>      for(int x = 0; x < w ; x++)<newline46mondego>        dimmed[x][y] = normal[x][y] - (int)(bd > 0 ? bd * 255.0 : 0);<newline46mondego>    //done dimming, compare<newline46mondego>    db = getBrightness(dimmed);<newline46mondego>  }<newline46mondego>}<newline46mondego>void keyPressed(){<newline46mondego>  if(key == '-' && b > 0) b--;<newline46mondego>  if(key == '=' && b < 255) b++; <newline46mondego>  if(key == ' ') {<newline46mondego>    for(int y = 0; y  < h ; y++)<newline46mondego>      for(int x = 0; x < w ; x++)<newline46mondego>        normal[x][y] = 0;<newline46mondego>  }<newline46mondego>}<newline46mondego>float getBrightness(int[][] img){<newline46mondego>  float ab = 0;<newline46mondego>  for(int y = 0; y  < h ; y++)<newline46mondego>    for(int x = 0; x < w ; x++)<newline46mondego>      ab += img[x][y];<newline46mondego>  return (ab/np);<newline46mondego>}<newline46mondego>"
"11378splitHere46","20326343splitHere46","SearchResponse"
"11379splitHere46","20326343splitHere46","ObjectFactory"
"11380splitHere46","20326343splitHere46","@XmlElementDecl(name=<doubleQuotes46>SearchResponse<doubleQuotes46>)"
"11381splitHere46","20326343splitHere46","SearchResponse"
"11382splitHere46","20326343splitHere46","JAXBElement<ResponseType>"
"11383splitHere46","20326361splitHere46","line clipping algorithm"
"11384splitHere46","20326361splitHere46","Flood Fill"
"11385splitHere46","20326361splitHere46","convex hull"
"11386splitHere46","20326361splitHere46","floodfill"
"11387splitHere46","20326361splitHere46","Find_polygon(vertex u,int iter,vertex[] path)  {<newline46mondego><newline46mondego>         if(!visited[u]) {<newline46mondego>               visited[u] = true;<newline46mondego>               path[iter] = u;<newline46mondego>               if(iter==1) {<newline46mondego>                  source = u;<newline46mondego>                  for all edge(u,v)<newline46mondego>                    Find_polygon(v,iter+1,path);<newline46mondego><newline46mondego>               }<newline46mondego>               else {<newline46mondego><newline46mondego>                    for all edge(u,v) {<newline46mondego>                      if(slope(u,v)!=slope(path[iter-1],u)) {<newline46mondego>                             Find_polygon(v,iter+1,path);<newline46mondego>                      }<newline46mondego>                    }<newline46mondego>               }      <newline46mondego>            }<newline46mondego><newline46mondego>         else  {       //loop <newline46mondego><newline46mondego>                      index = findIndex(u,path); // can use array for O(1)<newline46mondego>                      polygons.add(path[index to iteration])<newline46mondego><newline46mondego><newline46mondego>         }<newline46mondego><newline46mondego>       }<newline46mondego><newline46mondego>  polygons = [];<newline46mondego>  for all vertices v in graph :<newline46mondego>          Find_polygon(v);  <newline46mondego>"
"11388splitHere46","20326508splitHere46","public int safeAdd(int a, int b) {<newline46mondego>    int sum = a + b;<newline46mondego>    return sum;<newline46mondego>}<newline46mondego>"
"11389splitHere46","20326508splitHere46","a"
"11390splitHere46","20326508splitHere46","b"
"11391splitHere46","20326508splitHere46","sum"
"11392splitHere46","20326508splitHere46","int sum;<newline46mondego><newline46mondego>public int unsafeAdd(int a, int b) {<newline46mondego>    sum = a + b;<newline46mondego>    return sum;<newline46mondego>}<newline46mondego>"
"11393splitHere46","20326508splitHere46","sum"
"11394splitHere46","20326508splitHere46","unsafeAdd"
"11395splitHere46","20326508splitHere46","HttpClientBuilder"
"11396splitHere46","20326547splitHere46","publications.jsp"
"11397splitHere46","20326547splitHere46","<servlet><newline46mondego>  <servlet-name>pub</servlet-name><newline46mondego>  <jsp-file>/publications.jsp</jsp-file><newline46mondego></servlet><newline46mondego><servlet-mapping><newline46mondego>  <servlet-name>pub</servlet-name><newline46mondego>  <url-pattern>/publications</url-pattern> <!-- Use this URL --><newline46mondego></servlet-mapping><newline46mondego>"
"11398splitHere46","20326547splitHere46","http://somehost/SciArchive/publications"
"11399splitHere46","20326612splitHere46","\"
"11400splitHere46","20326612splitHere46","<doubleQuotes46>"
"11401splitHere46","20326612splitHere46","value.replace(<doubleQuotes46>\<doubleQuotes46><doubleQuotes46>, <doubleQuotes46>\\\<doubleQuotes46><doubleQuotes46>);<newline46mondego>"
"11402splitHere46","20326649splitHere46","<FrameLayout<newline46mondego>        android:id=<doubleQuotes46>@android:id/tabcontent<doubleQuotes46><newline46mondego>        android:layout_width=<doubleQuotes46>fill_parent<doubleQuotes46><newline46mondego>        android:layout_height=<doubleQuotes46>fill_parent<doubleQuotes46><newline46mondego>        android:padding=<doubleQuotes46>5dp<doubleQuotes46> ><newline46mondego>        <include layout=<doubleQuotes46>@layout/home<doubleQuotes46>/><newline46mondego>        <include layout=<doubleQuotes46>@layout/settings<doubleQuotes46>/><newline46mondego>        <include layout=<doubleQuotes46>@layout/license<doubleQuotes46>/><newline46mondego>        <include layout=<doubleQuotes46>@layout/about<doubleQuotes46>/><newline46mondego>    </FrameLayout><newline46mondego>"
"11403splitHere46","20326649splitHere46","<FrameLayout<newline46mondego>        android:id=<doubleQuotes46>@android:id/tabcontent<doubleQuotes46><newline46mondego>        android:layout_width=<doubleQuotes46>fill_parent<doubleQuotes46><newline46mondego>        android:layout_height=<doubleQuotes46>fill_parent<doubleQuotes46><newline46mondego>        android:padding=<doubleQuotes46>5dp<doubleQuotes46> ><newline46mondego>    </FrameLayout><newline46mondego>"
"11404splitHere46","20326661splitHere46","Date date = new Date();<newline46mondego>DateFormat format = new SimpleDateFormat(<doubleQuotes46>HHmm<doubleQuotes46>);<newline46mondego>System.out.println(format.format(date));<newline46mondego>"
"11405splitHere46","20326672splitHere46","xsi:schemaLocation"
"11406splitHere46","20326672splitHere46","<beans xmlns=<doubleQuotes46>http://www.springframework.org/schema/beans<doubleQuotes46><newline46mondego>    xmlns:context=<doubleQuotes46>http://www.springframework.org/schema/context<doubleQuotes46><newline46mondego>    xmlns:xsi=<doubleQuotes46>http://www.w3.org/2001/XMLSchema-instance<doubleQuotes46><newline46mondego>    xmlns:neo4j=<doubleQuotes46>http://www.springframework.org/schema/data/neo4j<doubleQuotes46> <newline46mondego>    xmlns:tx=<doubleQuotes46>http://www.springframework.org/schema/tx<doubleQuotes46><newline46mondego>    xsi:schemaLocation=<doubleQuotes46>http://www.springframework.org/schema/beans <newline46mondego>    http://www.springframework.org/schema/beans/spring-beans-3.2.xsd<newline46mondego>    http://www.springframework.org/schema/data/neo4j<newline46mondego>    http://www.springframework.org/schema/data/neo4j/spring-neo4j-2.2.xsdâ€?<newline46mondego>    http://www.springframework.org/schema/context<newline46mondego>    http://www.springframework.org/schema/context/spring-context-3.2.xsd<newline46mondego>    http://www.springframework.org/schema/tx<newline46mondego>    http://www.springframework.org/schema/tx/spring-tx-3.2.xsd<doubleQuotes46>><newline46mondego>"
"11407splitHere46","20326680splitHere46","isOperator"
"11408splitHere46","20326680splitHere46","boolean isOperator(String s) {<newline46mondego>   return s.equals(<doubleQuotes46>*<doubleQuotes46>) || s.equals(<doubleQuotes46>-<doubleQuotes46>) || s.equals( <doubleQuotes46>/<doubleQuotes46>) || s.equals(<doubleQuotes46>+<doubleQuotes46>);<newline46mondego>}<newline46mondego><newline46mondego>public void tokenize(String expr) {<newline46mondego>    StringTokenizer st = new StringTokenizer(expr);<newline46mondego>    while ( st.hasMoreElements() ) {<newline46mondego>        String val = st.nextElement().toString();<newline46mondego>        if ( isOperator( val ) ) {<newline46mondego>            //operator.push(val);<newline46mondego>            System.out.println(<doubleQuotes46>Val<doubleQuotes46>);<newline46mondego>            System.out.println(val);<newline46mondego>        } <newline46mondego>        else {<newline46mondego>            //operand.push(op);<newline46mondego>            System.out.println(<doubleQuotes46>Operand<doubleQuotes46>);<newline46mondego>            BigInteger op = new BigInteger(val);<newline46mondego>            System.out.println(op);<newline46mondego>        }<newline46mondego>    }<newline46mondego>}<newline46mondego>"
"11409splitHere46","20326680splitHere46","=="
"11410splitHere46","20326767splitHere46","matches()"
"11411splitHere46","20326767splitHere46","find()"
"11412splitHere46","20326767splitHere46",".*"
"11413splitHere46","20326767splitHere46",".*(\\w)+.*<newline46mondego>"
"11414splitHere46","20326767splitHere46","*"
"11415splitHere46","20326767splitHere46","+"
"11416splitHere46","20326767splitHere46","find()"
"11417splitHere46","20326821splitHere46","String regex_0 = <doubleQuotes46>^([a-zA-Z]+)\\s+(\\d+)-(\\d+)-(\\d+)$<doubleQuotes46>;<newline46mondego><newline46mondego>String regex_1 = <doubleQuotes46>^([a-zA-Z]+)\\s+(\\d+)-(\\d+)-(\\d+)\\s+([a-zA-Z0-9\\s]+)$<doubleQuotes46><newline46mondego><newline46mondego>String regex_2 = <doubleQuotes46>^([a-zA-Z\\s]+)(\\d+)-(\\d+)\\s+([a-zA-Z0-9\\s]+)$<doubleQuotes46><newline46mondego>"
"11418splitHere46","20326821splitHere46","[a|b]"
"11419splitHere46","20326821splitHere46","<doubleQuotes46>a or b<doubleQuotes46>"
"11420splitHere46","20326821splitHere46","<doubleQuotes46>a or b or |<doubleQuotes46>"
"11421splitHere46","20326821splitHere46","*"
"11422splitHere46","20326821splitHere46","+"
"11423splitHere46","20326859splitHere46","StyledDocument doc = (StyledDocument)textPane.getDocument();<newline46mondego>Element element = doc.getCharacterElement(position);<newline46mondego><newline46mondego>Boolean isItalic = element.getAttributes().getAttribute(StyleConstants.Italic);<newline46mondego>"
"11424splitHere46","20327045splitHere46","<from uri=<doubleQuotes46>servlet:///hello<doubleQuotes46>/><newline46mondego><removeHeaders pattern=<doubleQuotes46>CamelHttp*<doubleQuotes46>/><newline46mondego>...<newline46mondego>"
"11425splitHere46","20327058splitHere46","public class HumanSerializer implements JsonSerializer<Human> {<newline46mondego><newline46mondego> @Override<newline46mondego>public JsonElement serialize(final Human human, final Type type, final JsonSerializationContext context) {<newline46mondego>             final JsonObject json = new JsonObject();<newline46mondego>             if(human instanceof Human)<newline46mondego>                 json.addProperty(<doubleQuotes46>type<doubleQuotes46>, <doubleQuotes46>Human<doubleQuotes46>);<newline46mondego>             if(human instanceof Worker)<newline46mondego>                 json.addProperty(<doubleQuotes46>type<doubleQuotes46>, <doubleQuotes46>Worker<doubleQuotes46>);<newline46mondego>             if(human instanceof Student)<newline46mondego>                 json.addProperty(<doubleQuotes46>type<doubleQuotes46>, <doubleQuotes46>Student<doubleQuotes46>);<newline46mondego><newline46mondego>         json.addProperty(<doubleQuotes46>name<doubleQuotes46>, human.getName());<newline46mondego>        return json;<newline46mondego>    }<newline46mondego>}<newline46mondego>"
"11426splitHere46","20327058splitHere46","final GsonBuilder  gsonBuilder = new GsonBuilder();<newline46mondego>gsonBuilder.registerTypeAdapter(Human.class,new  HumanSerializer());<newline46mondego>gsonBuilder.registerTypeAdapter(Worker.class,new  HumanSerializer());<newline46mondego>gsonBuilder.registerTypeAdapter(Student.class,new  HumanSerializer());<newline46mondego>final Gson gson = gsonBuilder.create();<newline46mondego>"
"11427splitHere46","20327058splitHere46","gson.toJson(new Worker(<doubleQuotes46>adam<doubleQuotes46>, <doubleQuotes46>workplace<doubleQuotes46>));<newline46mondego> gson.toJson(new Human(<doubleQuotes46>Jhon<doubleQuotes46>));<newline46mondego><newline46mondego>{<doubleQuotes46>type<doubleQuotes46>:<doubleQuotes46>Worker<doubleQuotes46>,<doubleQuotes46>name<doubleQuotes46>:<doubleQuotes46>adam<doubleQuotes46>}<newline46mondego>{<doubleQuotes46>type<doubleQuotes46>:<doubleQuotes46>Human<doubleQuotes46>,<doubleQuotes46>name<doubleQuotes46>:<doubleQuotes46>Jhon<doubleQuotes46>}<newline46mondego>"
"11428splitHere46","20327122splitHere46","@Consumes(<doubleQuotes46>application/json<doubleQuotes46>)<newline46mondego>class UserDtoReader extends MessageBodyReaderSupport<UserDto> {<newline46mondego><newline46mondego>    @Override<newline46mondego>    public UserDto readFrom(MultivaluedMap<String, String> httpHeaders,<newline46mondego>            InputStream entityStream) throws IOException,<newline46mondego>            WebApplicationException {<newline46mondego>        return new JsonSlurper().parse(new InputStreamReader(entityStream))<newline46mondego>    }<newline46mondego>}<newline46mondego>"
"11429splitHere46","20327148splitHere46","defaultStack"
"11430splitHere46","20327148splitHere46","params"
"11431splitHere46","20327148splitHere46","params"
"11432splitHere46","20327229splitHere46","WebView"
"11433splitHere46","20327294splitHere46","3 0 0 3 300 300 cm<newline46mondego>10 0 m<newline46mondego>10 5.52 5.52 10 0 10 c<newline46mondego>-5.52 10 -10 5.52 -10 0 c<newline46mondego>-10 -5.52 -5.52 -10 0 -10 c<newline46mondego>5.52 -10 10 -5.52 10 0 c<newline46mondego>S <newline46mondego>"
"11434splitHere46","20327294splitHere46","â”Œ   3   0   0 â”?<newline46mondego>[ 10 0 1 ] x â”‚   0   3   0 â”‚ = [ 330 300 1]<newline46mondego>             â”” 300 300   1 â”˜<newline46mondego>"
"11435splitHere46","20327294splitHere46","PDFStreamEngine"
"11436splitHere46","20327294splitHere46","OperatorProcessor"
"11437splitHere46","20327294splitHere46","PDFStreamParser.getTokens()"
"11438splitHere46","20327317splitHere46","public static <T> List<T> isTriggeredByBlackList(Map<String, ? extends T> params, Class<T> clz)<newline46mondego>"
"11439splitHere46","20327317splitHere46","? extends T"
"11440splitHere46","20327317splitHere46","T"
"11441splitHere46","20327317splitHere46","T"
"11442splitHere46","20327317splitHere46","isTriggeredByBlackList"
"11443splitHere46","20327317splitHere46","isTriggeredByBlackList(map, List.class);<newline46mondego>"
"11444splitHere46","20327317splitHere46","T"
"11445splitHere46","20327317splitHere46","List"
"11446splitHere46","20327317splitHere46","Map<String, any-type-that-extends-raw-List>"
"11447splitHere46","20327317splitHere46","Map<String, List<String>>"
"11448splitHere46","20327317splitHere46","List<String>"
"11449splitHere46","20327317splitHere46","List"
"11450splitHere46","20327317splitHere46","List<String>"
"11451splitHere46","20327317splitHere46","List<Object>"
"11452splitHere46","20327317splitHere46","String"
"11453splitHere46","20327317splitHere46","Object"
"11454splitHere46","20327317splitHere46","List<Object> objList = new ArrayList<String>(); // compile error<newline46mondego>"
"11455splitHere46","20327317splitHere46","List<String>"
"11456splitHere46","20327317splitHere46","List"
"11457splitHere46","20327317splitHere46","List<?>"
"11458splitHere46","20327317splitHere46","List rawList = new ArrayList<String>(); // just compiler warning<newline46mondego>List<?> unknownList = new ArrayList<String>();<newline46mondego>"
"11459splitHere46","20327317splitHere46","ArrayList<String>"
"11460splitHere46","20327317splitHere46","ArrayList"
"11461splitHere46","20327317splitHere46","List"
"11462splitHere46","20327317splitHere46","List<String>.class"
"11463splitHere46","20327317splitHere46","List<List<String>>"
"11464splitHere46","20327317splitHere46","List<List<String>>"
"11465splitHere46","20327317splitHere46","List<List<String>> l = isTriggeredByBlackList(map, List.class);<newline46mondego>"
"11466splitHere46","20327317splitHere46","public static <T> List<T> isTriggeredByBlackList(<newline46mondego>    Map<String, ? extends T> params, Class<? super T> clz)<newline46mondego>"
"11467splitHere46","20327317splitHere46","List.class"
"11468splitHere46","20327317splitHere46","params"
"11469splitHere46","20327317splitHere46","is..."
"11470splitHere46","20327317splitHere46","boolean"
"11471splitHere46","20327317splitHere46","List<T>"
"11472splitHere46","20327317splitHere46","T"
"11473splitHere46","20327317splitHere46","List"
"11474splitHere46","20327317splitHere46","List<List>"
"11475splitHere46","20327544splitHere46","return"
"11476splitHere46","20327544splitHere46","die()"
"11477splitHere46","20327544splitHere46","int"
"11478splitHere46","20327544splitHere46","public static int die()<newline46mondego>{<newline46mondego>    return generator.nextInt(6)+1; // return the value<newline46mondego>}<newline46mondego>"
"11479splitHere46","20327544splitHere46","public static void main(String[] args)<newline46mondego>{<newline46mondego>    int rollValue = die();<newline46mondego>    // Do something with rollValue <newline46mondego>}<newline46mondego>"
"11480splitHere46","20327544splitHere46","generator"
"11481splitHere46","20327544splitHere46","public class dieSimulator<newline46mondego>{<newline46mondego>    Random generator = new Random(); //Just as an example<newline46mondego>    ...<newline46mondego>"
"11482splitHere46","20327669splitHere46","run () {<newline46mondego>  try {<newline46mondego>    while (Thread.interrupted() == false) {<newline46mondego>      doSomeWork();<newline46mondego>    }<newline46mondego>  } catch (Exception e) { <newline46mondego>    myExecutor.shutdown();<newline46mondego>  }<newline46mondego>}<newline46mondego>"
"11483splitHere46","20327669splitHere46","shutdown()"
"11484splitHere46","20327669splitHere46","awaitTermination()"
"11485splitHere46","20327669splitHere46","running"
"11486splitHere46","20327675splitHere46","XWPFParagraph paragraphOne = document.createParagraph();<newline46mondego>        XWPFRun paragraphOneRunOne = paragraphOne.createRun();<newline46mondego>        paragraphOneRunOne.setItalic(true);<newline46mondego>        paragraphOneRunOne.setText(text);<newline46mondego>"
"11487splitHere46","20327722splitHere46","List<WebElement> findElements = driver.findElements((By.xpath(<doubleQuotes46>//div[@id='srch_sggst']/div<doubleQuotes46>)));<newline46mondego>"
"11488splitHere46","20327722splitHere46","List<WebElement> findElements = driver.findElements((By.id(<doubleQuotes46>gwcswTooltip<doubleQuotes46>).name(<doubleQuotes46>books on<doubleQuotes46>)));<newline46mondego>"
"11489splitHere46","20327812splitHere46","UPDATE Customers SET (Contact)null,Emailnull,Address,null,SurveyStatus,null,SubscriptionnullWHERE MembershipID =null<newline46mondego>"
"11490splitHere46","20327812splitHere46","String strSqlUpdate = <doubleQuotes46>UPDATE Customers SET Contact = <doubleQuotes46> + contact_num<newline46mondego>              + <doubleQuotes46>,Email = '<doubleQuotes46> + email_add + <doubleQuotes46>'<doubleQuotes46> <newline46mondego>              + <doubleQuotes46>,Address = '<doubleQuotes46> + mail_add + <doubleQuotes46>'<doubleQuotes46> <newline46mondego>              + <doubleQuotes46>,SurveyStatus = '<doubleQuotes46> + radio_group + <doubleQuotes46>'<doubleQuotes46><newline46mondego>              + <doubleQuotes46>,Subscription = '<doubleQuotes46> + receive_info + <doubleQuotes46>' <doubleQuotes46> <newline46mondego>              + <doubleQuotes46>WHERE membership_ID = '<doubleQuotes46> + member_ID + <doubleQuotes46>'<doubleQuotes46>;<newline46mondego>"
"11491splitHere46","20328011splitHere46","-"
"11492splitHere46","20328011splitHere46","[...]"
"11493splitHere46","20328011splitHere46","^[-a-zA-Z0-9]{1,9}$<newline46mondego>"
"11494splitHere46","20328011splitHere46","-"
"11495splitHere46","20328011splitHere46","-"
"11496splitHere46","20328058splitHere46","getCats"
"11497splitHere46","20328058splitHere46","pets"
"11498splitHere46","20328058splitHere46","@Entity<newline46mondego>@Table(name = <doubleQuotes46>owners<doubleQuotes46>)<newline46mondego>public class Owner extends Person {<newline46mondego><newline46mondego>    @OneToMany(cascade = CascadeType.ALL, mappedBy = <doubleQuotes46>owner<doubleQuotes46>,  fetch=FetchType.EAGER)<newline46mondego>    private Set<Pet> pets;<newline46mondego><newline46mondego>    public Set<Pet> getCats() {<newline46mondego>        Set<Pet> cats = new HashSet<Pet>();<newline46mondego>        for (Pet pet : getPetsInternal()) {<newline46mondego>            if (pet.getType().getName().equals(<doubleQuotes46>cat<doubleQuotes46>)) {<newline46mondego>                cats.add(pet);<newline46mondego>            }<newline46mondego>        }<newline46mondego>        return cats;<newline46mondego>    }<newline46mondego>}<newline46mondego>"
"11499splitHere46","20328058splitHere46","@Entity<newline46mondego>@Table(name = <doubleQuotes46>owners<doubleQuotes46>)<newline46mondego>public class Owner extends Person {<newline46mondego><newline46mondego>    @OneToMany(cascade = CascadeType.ALL, mappedBy = <doubleQuotes46>owner<doubleQuotes46>,  fetch=FetchType.EAGER)<newline46mondego>    private Set<Pet> pets;<newline46mondego><newline46mondego>    public Set<Pet> getCats() {<newline46mondego>        return Sets.filter(getPetsInternal(), new Predicate<Pet>() {<newline46mondego>            public boolean apply(Pet pet) { <newline46mondego>                return pet.getType().getName().equals(<doubleQuotes46>cat<doubleQuotes46>)<newline46mondego>            }<newline46mondego>        });         <newline46mondego>    }<newline46mondego>}<newline46mondego>"
"11500splitHere46","20328058splitHere46","parsePets"
"11501splitHere46","20328058splitHere46","@PostLoad"
"11502splitHere46","20328111splitHere46","JSpinner"
"11503splitHere46","20328111splitHere46","BoundSpinner"
"11504splitHere46","20328174splitHere46","public static final SearchCriteriaAnomalyFilter NULL_INSTANCE = new SearchCriteriaAnomalyFilter(); <newline46mondego>public static SearchCriteriaAnomalyFilter instanceOfNullObject(){<newline46mondego>  return NULL_INSTANCE;<newline46mondego>}<newline46mondego>"
"11505splitHere46","20328208splitHere46","ProcessBuilder"
"11506splitHere46","20328208splitHere46","ProcessBuilder pb = new ProcessBuilder(<doubleQuotes46>java<doubleQuotes46>, <doubleQuotes46>-jar<doubleQuotes46>, _JarPath);<newline46mondego>//If you need to supply arguments then use<newline46mondego>// ProcessBuilder pb = new ProcessBuilder(<doubleQuotes46>java<doubleQuotes46>, <doubleQuotes46>-jar<doubleQuotes46>, _JarPath, args[0], args[1], args[2], args[3]);<newline46mondego>Process p = pb.start();<newline46mondego>"
"11507splitHere46","20328459splitHere46","id<newline46mondego>name gender age<newline46mondego>id<newline46mondego>name2 gender age<newline46mondego>etc.<newline46mondego>"
"11508splitHere46","20328459splitHere46","id = housenumber.next();<newline46mondego>line = housenumber.nextLine();<newline46mondego>if(input.equals(id))<newline46mondego>{    <newline46mondego>    //This should the next line instead of just <doubleQuotes46>It's found<doubleQuotes46><newline46mondego>    JOptionPane.showMessageDialog(null,line);<newline46mondego><newline46mondego>    //Assuming the above file layout, you could then do something like this:<newline46mondego>    String[] parts = line.split(<doubleQuotes46>\\s+<doubleQuotes46>); //Splits on whitespace<newline46mondego><newline46mondego>    System.out.println(<doubleQuotes46>name: <doubleQuotes46> + parts[0]);<newline46mondego>    System.out.println(<doubleQuotes46>gender: <doubleQuotes46> + parts[1]);<newline46mondego>    System.out.println(<doubleQuotes46>age: <doubleQuotes46> + parts[2]);<newline46mondego>    break;<newline46mondego>}<newline46mondego>"
"11509splitHere46","20328491splitHere46","P(1) = 2<newline46mondego>P(2) = 3<newline46mondego>P(3) = 5<newline46mondego>"
"11510splitHere46","20328491splitHere46","int[] numsToGenerate           = new int[]    { 1,   2,    3,   4,    5   };<newline46mondego>double[] discreteProbabilities = new double[] { 0.1, 0.25, 0.3, 0.25, 0.1 };<newline46mondego>"
"11511splitHere46","20328491splitHere46","2, 5, 6, 5, 2<newline46mondego>"
"11512splitHere46","20328491splitHere46","numsToGenerate"
"11513splitHere46","20328491splitHere46","1 1<newline46mondego>2 2 2 2 2<newline46mondego>3 3 3 3 3 3<newline46mondego>4 4 4 4 4<newline46mondego>5 5<newline46mondego>"
"11514splitHere46","20328496splitHere46","NullPointerException"
"11515splitHere46","20328496splitHere46","someArray"
"11516splitHere46","20328496splitHere46","null"
"11517splitHere46","20328496splitHere46","someArray"
"11518splitHere46","20328496splitHere46","null"
"11519splitHere46","20328496splitHere46","someArray"
"11520splitHere46","20328496splitHere46","null"
"11521splitHere46","20328496splitHere46","for (int i = 0; i<someArray.length; i++) <newline46mondego>        if(someArray[i] != null && !someArray[i].isOnLoan())  //notice the check for nullity since your current cell could be null<newline46mondego>                 System.out.println(someArray[i]);  <newline46mondego>"
"11522splitHere46","20328576splitHere46","SwingUtilities.invokeLater()"
"11523splitHere46","20328612splitHere46","displayNewLeadData()"
"11524splitHere46","20328612splitHere46","public void displayNewLeadData() <newline46mondego>    {<newline46mondego>        dbAdapter=new DataBase_Adapter(Serach_Data.this).open();<newline46mondego>        dataBase = dbAdapter.getDatabaseInstance();<newline46mondego><newline46mondego>        Cursor mCursor = dataBase.rawQuery(<doubleQuotes46>SELECT * FROM <doubleQuotes46> + DataBase_Adapter.TABLE_NEW_LEAD, null);<newline46mondego>        mCursor.moveToFirst();<newline46mondego>        arrayList_newLead_Id.clear();<newline46mondego>        arrayList_newLead_Name.clear();<newline46mondego>        arrayList_newLead_Email.clear();<newline46mondego>        arrayList_newLead_Mobile.clear();<newline46mondego>        arrayList_newLead_Products.clear();<newline46mondego>        arrayList_newLead_Budget.clear();<newline46mondego>        arrayList_newLead_Priority.clear();<newline46mondego>        arrayList_newLead_Status.clear();<newline46mondego>        arrayList_newLead_Notes.clear();<newline46mondego>        arrayList_newLead_Reminder_Date.clear();<newline46mondego>        arrayList_newLead_Reminder_Time.clear();<newline46mondego>        arrayList_newLead_AddToContact.clear();<newline46mondego><newline46mondego><newline46mondego><newline46mondego><newline46mondego>            do <newline46mondego>            {<newline46mondego>                arrayList_newLead_Id.add(mCursor.getString(mCursor.getColumnIndex(DataBase_Adapter.KEY_NEW_LEAD_ID)));<newline46mondego>                arrayList_newLead_Name.add(mCursor.getString(mCursor.getColumnIndex(DataBase_Adapter.KEY_NEW_LEAD_NAME)));<newline46mondego>                arrayList_newLead_Email.add(mCursor.getString(mCursor.getColumnIndex(DataBase_Adapter.KEY_NEW_LEAD_EMAIL)));<newline46mondego>                arrayList_newLead_Mobile.add(mCursor.getString(mCursor.getColumnIndex(DataBase_Adapter.KEY_NEW_LEAD_MOBILE)));<newline46mondego>                arrayList_newLead_Products.add(mCursor.getString(mCursor.getColumnIndex(DataBase_Adapter.KEY_NEW_LEAD_Product)));<newline46mondego>                arrayList_newLead_Budget.add(mCursor.getString(mCursor.getColumnIndex(DataBase_Adapter.KEY_NEW_LEAD_BUDGET)));<newline46mondego>                arrayList_newLead_Priority.add(mCursor.getString(mCursor.getColumnIndex(DataBase_Adapter.KEY_NEW_LEAD_PRIORITY)));<newline46mondego>                arrayList_newLead_Status.add(mCursor.getString(mCursor.getColumnIndex(DataBase_Adapter.KEY_NEW_LEAD_STATUS)));<newline46mondego>                arrayList_newLead_Notes.add(mCursor.getString(mCursor.getColumnIndex(DataBase_Adapter.KEY_NEW_LEAD_NOTES)));<newline46mondego>                arrayList_newLead_Reminder_Date.add(mCursor.getString(mCursor.getColumnIndex(DataBase_Adapter.KEY_NEW_LEAD_REMINDER_DATE)));<newline46mondego>                arrayList_newLead_Reminder_Time.add(mCursor.getString(mCursor.getColumnIndex(DataBase_Adapter.KEY_NEW_LEAD_REMINDER_TIME)));<newline46mondego>                arrayList_newLead_AddToContact.add(mCursor.getString(mCursor.getColumnIndex(DataBase_Adapter.KEY_NEW_LEAD_ADDtoCONTACTS)));<newline46mondego><newline46mondego><newline46mondego><newline46mondego>            } while (mCursor.moveToNext());<newline46mondego><newline46mondego><newline46mondego>        new_Lead_List_Adapter = new New_Lead_List_Adapter(Serach_Data.this , arrayList_newLead_Id ,<newline46mondego>                                                        arrayList_newLead_Name , arrayList_newLead_Email,<newline46mondego>                                                        arrayList_newLead_Mobile , arrayList_newLead_Products,<newline46mondego>                                                        arrayList_newLead_Budget , arrayList_newLead_Priority ,<newline46mondego>                                                        arrayList_newLead_Status , arrayList_newLead_Notes ,<newline46mondego>                                                        arrayList_newLead_Reminder_Date , arrayList_newLead_Reminder_Time ,<newline46mondego>                                                        arrayList_newLead_AddToContact );<newline46mondego><newline46mondego>        newLeadDat_List.setAdapter(new_Lead_List_Adapter);<newline46mondego>        new_Lead_List_Adapter.notifyDataSetChanged();<newline46mondego>        mCursor.close();<newline46mondego>        System.out.println(<doubleQuotes46>Data will Be Display.<doubleQuotes46>);<newline46mondego><newline46mondego>    }<newline46mondego>"
"11525splitHere46","20328649splitHere46","readPreference"
"11526splitHere46","20328715splitHere46","# we compile against jdk 1.7, but output jdk 1.6 compatible classfiles.<newline46mondego>jvm.target.version=1.6<newline46mondego>"
"11527splitHere46","20328758splitHere46","JFrame"
"11528splitHere46","20328758splitHere46","BorderLayout"
"11529splitHere46","20328758splitHere46","JPanel"
"11530splitHere46","20328758splitHere46","FlowLayout"
"11531splitHere46","20328758splitHere46","JComponent"
"11532splitHere46","20328758splitHere46","JFrame"
"11533splitHere46","20328758splitHere46","frame.add(new bcquery());"
"11534splitHere46","20328758splitHere46","JFrame.CENTER"
"11535splitHere46","20328758splitHere46","JLabel"
"11536splitHere46","20328758splitHere46","frame.setContentPane(label);"
"11537splitHere46","20328758splitHere46","JPanel"
"11538splitHere46","20328758splitHere46","JFrame.CENTER"
"11539splitHere46","20328758splitHere46","frame.add(myVariable)"
"11540splitHere46","20328758splitHere46","paintComponent"
"11541splitHere46","20328758splitHere46","Image"
"11542splitHere46","20328758splitHere46","JPanel"
"11543splitHere46","20328758splitHere46","JFrame"
"11544splitHere46","20328758splitHere46","JPanel"
"11545splitHere46","20328758splitHere46","Icon"
"11546splitHere46","20328758splitHere46","ImageIcon"
"11547splitHere46","20328758splitHere46","JFrame"
"11548splitHere46","20328758splitHere46","LayoutManager"
"11549splitHere46","20328758splitHere46","JLabel"
"11550splitHere46","20328758splitHere46","BorderLayout"
"11551splitHere46","20328758splitHere46","Swing JComponents"
"11552splitHere46","20328758splitHere46","setOpaque(false)"
"11553splitHere46","20328758splitHere46","JComponent"
"11554splitHere46","20328758splitHere46","JPanel"
"11555splitHere46","20328758splitHere46","paintComponent"
"11556splitHere46","20328758splitHere46","JLabel"
"11557splitHere46","20328758splitHere46","Icon"
"11558splitHere46","20328758splitHere46","ImageIcon"
"11559splitHere46","20328882splitHere46","UploadPortletRequest uploadRequest = PortalUtil.getUploadPortletRequest(request);<newline46mondego>"
"11560splitHere46","20328926splitHere46","File dbFolder=new File(<doubleQuotes46>/data/data/yourpackagename/databases/<doubleQuotes46>);<newline46mondego>            if(!dbFolder.exists())<newline46mondego>            {<newline46mondego>                dbFolder.mkdirs();<newline46mondego>            }<newline46mondego>            File dbFile = new File(<doubleQuotes46>/data/data/yourpackagename/databases/<doubleQuotes46>+<doubleQuotes46>dbfilename<doubleQuotes46>);<newline46mondego>            if(!dbFile.exists() || dbFile.length()<=0)<newline46mondego>            {<newline46mondego>                dbFile.createNewFile();<newline46mondego><newline46mondego>                InputStream fIn=context.getAssets().open(<doubleQuotes46>QuizDB.jpeg<doubleQuotes46>);<newline46mondego>                byte[] buffer =new byte[1024];<newline46mondego>                FileOutputStream fout=new FileOutputStream(dbFile);<newline46mondego>                int c=fIn.read(buffer);<newline46mondego>                while (c!=-1)<newline46mondego>                {<newline46mondego>                    fout.write(buffer);<newline46mondego>                    c=fIn.read(buffer);<newline46mondego>                }<newline46mondego>                fout.close();<newline46mondego>"
"11561splitHere46","20328926splitHere46","SQLiteDatabase sqLiteDatabase;<newline46mondego>sqLiteDatabase=dbHelper.getReadableDatabase();<newline46mondego><newline46mondego>    Cursor c = sqLiteDatabase.query(<doubleQuotes46>QuizTable1<doubleQuotes46>, null, null, null, null, null, null);<newline46mondego>    if( c.moveToNext() )<newline46mondego>    {<newline46mondego>      c.getString(0);<newline46mondego>    }<newline46mondego>"
"11562splitHere46","20328948splitHere46","Spring"
"11563splitHere46","20328948splitHere46","Java EE"
"11564splitHere46","20328948splitHere46","Spring"
"11565splitHere46","20328948splitHere46","Java EE"
"11566splitHere46","20328948splitHere46","Struts"
"11567splitHere46","20328948splitHere46","Java EE"
"11568splitHere46","20328948splitHere46","Servlets"
"11569splitHere46","20328948splitHere46","Struts"
"11570splitHere46","20328948splitHere46","Spring"
"11571splitHere46","20328948splitHere46","Java EE"
"11572splitHere46","20328948splitHere46","Spring framework"
"11573splitHere46","20328948splitHere46","Java EE"
"11574splitHere46","20328948splitHere46","Spring"
"11575splitHere46","20328948splitHere46","Java EE"
"11576splitHere46","20329210splitHere46","gradlew clean"
"11577splitHere46","20329337splitHere46","generateBoard()"
"11578splitHere46","20329337splitHere46","break;"
"11579splitHere46","20329369splitHere46","<build><newline46mondego>    <!-- MORE CONF HERE --><newline46mondego>    <plugins><newline46mondego>        <plugin><newline46mondego>            <groupId>org.eclipse.jetty</groupId><newline46mondego>            <artifactId>jetty-maven-plugin</artifactId><newline46mondego>            <version>9.0.0.v20130308</version><newline46mondego>        </plugin><newline46mondego><newline46mondego>        <!-- Maybe more plugins here --><newline46mondego>    </plugins><newline46mondego>    <!-- EVEN MORE Build CONF HERE --><newline46mondego></build><newline46mondego>"
"11580splitHere46","20329369splitHere46","<plugin><newline46mondego>    <groupId>org.mortbay.jetty</groupId><newline46mondego>    <artifactId>jetty-maven-plugin</artifactId><newline46mondego>    <version>8.1.3.v20120416</version><newline46mondego></plugin><newline46mondego>"
"11581splitHere46","20329502splitHere46","final List<Object1> firstList = new List<>();<newline46mondego>final List<Object2> secondList = new List<>();<newline46mondego><newline46mondego>// ...<newline46mondego><newline46mondego>public Object readFromListOne() {<newline46mondego>  synchronized(firstList) {<newline46mondego>    return firstList.remove(0);<newline46mondego>  }<newline46mondego>}<newline46mondego><newline46mondego>public Object readFromListTwo() {<newline46mondego>  synchronized(secondList) {<newline46mondego>    return secondList.remove(0);<newline46mondego>  }<newline46mondego>}<newline46mondego>"
"11582splitHere46","20329502splitHere46","synchronized(this)"
"11583splitHere46","20329515splitHere46","public class Snippet extends ApplicationAdapter {<newline46mondego><newline46mondego>    ShapeRenderer renderer;<newline46mondego>    OrthographicCamera camera;<newline46mondego><newline46mondego>    Ball ball = new Ball();<newline46mondego><newline46mondego>    @Override<newline46mondego>    public void create () {<newline46mondego>        renderer = new ShapeRenderer();<newline46mondego>        camera = new OrthographicCamera();<newline46mondego>        camera.setToOrtho(false);<newline46mondego>    }<newline46mondego><newline46mondego>    @Override<newline46mondego>    public void render () {<newline46mondego>        Gdx.gl.glClear(GL10.GL_COLOR_BUFFER_BIT);<newline46mondego><newline46mondego>        ball.update(Gdx.graphics.getDeltaTime());<newline46mondego><newline46mondego>        renderer.setProjectionMatrix(camera.combined);<newline46mondego>        renderer.begin(ShapeType.Line);<newline46mondego>        renderer.setColor(1.0f, 1.0f, 1.0f, 1.0f);<newline46mondego>        renderer.circle(ball.position.x, ball.position.y, ball.radius);<newline46mondego><newline46mondego>        // Show the travel path of the ball if we were to click at the current location.<newline46mondego>        if (Gdx.app.getType() == ApplicationType.Desktop || Gdx.app.getType() == ApplicationType.WebGL) {<newline46mondego>            renderer.setColor(0.2f, 0.2f, 0.2f, 1.0f);<newline46mondego>            renderer.line(ball.position.x, ball.position.y, Gdx.input.getX(), Gdx.graphics.getHeight()- Gdx.input.getY());          <newline46mondego>        }<newline46mondego>        renderer.end();<newline46mondego><newline46mondego>        if (Gdx.input.justTouched()) {<newline46mondego>            // Invert the the y to accommodate difference in coordinate systems<newline46mondego>            ball.shootToward(Gdx.input.getX(), Gdx.graphics.getHeight()- Gdx.input.getY());<newline46mondego>        }<newline46mondego>    }<newline46mondego><newline46mondego>    class Ball {<newline46mondego><newline46mondego>        public float speedMax = 350;<newline46mondego><newline46mondego>        public float radius = 10;<newline46mondego>        public Vector2 position = new Vector2();<newline46mondego>        public Vector2 velocity = new Vector2();<newline46mondego><newline46mondego>        /** Shoot the ball toward the designated position */<newline46mondego>        public void shootToward(float targetX, float targetY) {<newline46mondego>            /*<newline46mondego>             * Get the normalized direction vector from our position to the target. Then scale that value to our desired speed. In<newline46mondego>             * this particular example, we are using the distance of the target from the current position to determine how fast we<newline46mondego>             * will shoot the ball, and limiting to a maximum speed. We will apply velocity in the update method.<newline46mondego>             */<newline46mondego>            velocity.set(targetX - position.x, targetY - position.y).nor().scl(Math.min(position.dst(targetX, targetY), speedMax));<newline46mondego>        }<newline46mondego><newline46mondego>        public void update(float deltaTime) {<newline46mondego>            position.add(velocity.x * deltaTime, velocity.y * deltaTime);<newline46mondego>            velocity.scl(1 - (0.98f * deltaTime)); // Linear dampening, otherwise the ball will keep going at the original velocity forever<newline46mondego>        }<newline46mondego><newline46mondego>    }<newline46mondego><newline46mondego>    public static void main(String[] args) {<newline46mondego>        new LwjglApplication(new Snippet2());<newline46mondego>    }<newline46mondego><newline46mondego>}<newline46mondego>"
"11584splitHere46","20329526splitHere46","null"
"11585splitHere46","20329526splitHere46","String"
"11586splitHere46","20329526splitHere46","null"
"11587splitHere46","20329526splitHere46","<doubleQuotes46>null<doubleQuotes46>"
"11588splitHere46","20329526splitHere46","returnString = <doubleQuotes46><doubleQuotes46>"
"11589splitHere46","20329526splitHere46","StringBuilder"
"11590splitHere46","20329526splitHere46","StringBuilder result = new StringBuilder();<newline46mondego><newline46mondego>while ((line = reader.readLine()) != null) {<newline46mondego>    result.append(line);<newline46mondego>}<newline46mondego><newline46mondego>reader.close();<newline46mondego>out.write(result);<newline46mondego>"
"11591splitHere46","20329662splitHere46","List"
"11592splitHere46","20329662splitHere46","Array"
"11593splitHere46","20329662splitHere46","toString()"
"11594splitHere46","20329662splitHere46","[Ljava.lang.String@pointer"
"11595splitHere46","20329662splitHere46","System.out.println(Arrays.deepToString(array));<newline46mondego>"
"11596splitHere46","20329723splitHere46","Student newStudent;<newline46mondego>if (condition) {<newline46mondego>   newStudent = new Student(newStudentName, newMarkOne, newMarkTwo, newMarkThree);<newline46mondego>}<newline46mondego><newline46mondego>newStudent.printArrays(); // here you get the <doubleQuotes46>might not have been initialized<doubleQuotes46><newline46mondego>"
"11597splitHere46","20329723splitHere46","Student newStudent;"
"11598splitHere46","20329723splitHere46","Student newStudent = null;"
"11599splitHere46","20329868splitHere46","@XmlRootElement"
"11600splitHere46","20329868splitHere46","@XmlAnyElement(lax=true)"
"11601splitHere46","20329868splitHere46","import java.util.List;<newline46mondego>import javax.xml.bind.annotation.*;<newline46mondego><newline46mondego>@XmlAccessorType(XmlAccessType.FIELD)<newline46mondego>public class Home {<newline46mondego>    @XmlAnyElement(lax = true)<newline46mondego>    protected List<Object> any;<newline46mondego><newline46mondego>    //setter getter also implemented<newline46mondego>}<newline46mondego>"
"11602splitHere46","20329868splitHere46","import javax.xml.bind.annotation.XmlRootElement;<newline46mondego><newline46mondego>@XmlRootElement(name=<doubleQuotes46>Person<doubleQuotes46>)<newline46mondego>public class Person {<newline46mondego>"
"11603splitHere46","20329868splitHere46","import javax.xml.bind.annotation.XmlRootElement;<newline46mondego><newline46mondego>@XmlRootElement(name=<doubleQuotes46>Animal<doubleQuotes46>)<newline46mondego>public class Animal {<newline46mondego><newline46mondego>}<newline46mondego>"
"11604splitHere46","20329868splitHere46","<?xml version=<doubleQuotes46>1.0<doubleQuotes46> encoding=<doubleQuotes46>UTF-8<doubleQuotes46>?><newline46mondego><root><newline46mondego>    <Person/><newline46mondego>    <Animal/><newline46mondego>    <Person/><newline46mondego></root><newline46mondego>"
"11605splitHere46","20329868splitHere46","import javax.xml.bind.*;<newline46mondego>import javax.xml.transform.stream.StreamSource;<newline46mondego><newline46mondego>public class Demo {<newline46mondego><newline46mondego>    public static void main(String[] args) throws JAXBException {<newline46mondego>        JAXBContext jc = JAXBContext.newInstance(Home.class, Person.class, Animal.class);<newline46mondego><newline46mondego>        Unmarshaller unmarshaller = jc.createUnmarshaller();<newline46mondego>        StreamSource xml = new StreamSource(<doubleQuotes46>src/forum20329510/input.xml<doubleQuotes46>);<newline46mondego>        Home home = unmarshaller.unmarshal(xml, Home.class).getValue();<newline46mondego><newline46mondego>        for(Object object : home.any) {<newline46mondego>            System.out.println(object.getClass());<newline46mondego>        }<newline46mondego>    }<newline46mondego><newline46mondego>}<newline46mondego>"
"11606splitHere46","20329868splitHere46","class forum20329510.Person<newline46mondego>class forum20329510.Animal<newline46mondego>class forum20329510.Person<newline46mondego>"
"11607splitHere46","20329900splitHere46","6.12.0"
"11608splitHere46","20329900splitHere46","6.11.0"
"11609splitHere46","20330038splitHere46","<dependency><newline46mondego>    <groupId>org.codehaus.jackson</groupId><newline46mondego>    <artifactId>jackson-mapper-asl</artifactId><newline46mondego>    <version>1.9.13</version><newline46mondego></dependency><newline46mondego>"
"11610splitHere46","20330049splitHere46","Properties"
"11611splitHere46","20330049splitHere46","store"
"11612splitHere46","20330049splitHere46","bw.write(<doubleQuotes46>#<doubleQuotes46> + new Date().toString());<newline46mondego>bw.newLine();<newline46mondego>for (Enumeration e = keys(); e.hasMoreElements();) { // Here things go wrong!<newline46mondego>  String key = (String)e.nextElement();<newline46mondego>  String val = (String)get(key);<newline46mondego>  key = saveConvert(key, true, escUnicode);<newline46mondego>  val = saveConvert(val, false, escUnicode);<newline46mondego>  bw.write(key + <doubleQuotes46>=<doubleQuotes46> + val);<newline46mondego>  bw.newLine();<newline46mondego>}<newline46mondego>"
"11613splitHere46","20330049splitHere46","Properties"
"11614splitHere46","20330049splitHere46","keys"
"11615splitHere46","20330049splitHere46","Properties"
"11616splitHere46","20330049splitHere46","Hashtable"
"11617splitHere46","20330049splitHere46","Properties"
"11618splitHere46","20330049splitHere46","Hashtable"
"11619splitHere46","20330049splitHere46","keys"
"11620splitHere46","20330090splitHere46","IWorkbenchPage page = PlatformUI.getWorkbench().getActiveWorkbenchWindow().getActivePage();<newline46mondego><newline46mondego>IViewPart viewPart = page.findView(id);<newline46mondego>"
"11621splitHere46","20330090splitHere46","ISelectionProvider selProvider = viewPart.getSite().getSelectionProvider();<newline46mondego>"
"11622splitHere46","20330090splitHere46","addSelectionChangedListener"
"11623splitHere46","20330090splitHere46","getSelection()"
"11624splitHere46","20330090splitHere46","IStructuredSelection"
"11625splitHere46","20330090splitHere46","IStructuredSelection.iterator()"
"11626splitHere46","20330090splitHere46","IProject"
"11627splitHere46","20330090splitHere46","IFile"
"11628splitHere46","20330191splitHere46","Class<String[]> cls = String[].class;<newline46mondego>"
"11629splitHere46","20330239splitHere46","check"
"11630splitHere46","20330239splitHere46","false"
"11631splitHere46","20330239splitHere46","public Counter(int startingValue, boolean check) {<newline46mondego>    this.check = check;<newline46mondego>    if (check == true) {<newline46mondego>        value = startingValue;<newline46mondego>        if (value < 0) {<newline46mondego>            value = 0;<newline46mondego>        }<newline46mondego>    }<newline46mondego>    else {<newline46mondego>        value = startingValue;<newline46mondego>    }    <newline46mondego>}<newline46mondego>"
"11632splitHere46","20330314splitHere46","public static double calc(double n)<newline46mondego>"
"11633splitHere46","20330314splitHere46","calc"
"11634splitHere46","20330314splitHere46","public static void calc(double n)<newline46mondego>"
"11635splitHere46","20330314splitHere46","public static double calc(double n) as you declared.<newline46mondego>"
"11636splitHere46","20330322splitHere46","getMarkupSettings.setStripWicketTags(true);<newline46mondego>"
"11637splitHere46","20330356splitHere46","About aboutFrag = fm.findFragmentById(R.id.content);<newline46mondego>"
"11638splitHere46","20330356splitHere46","Welcome myFragment = new Welcome();<newline46mondego>ft.add(R.id.content, myFragment,<doubleQuotes46>welcome tag<doubleQuotes46>);<newline46mondego>ft.commit();<newline46mondego>"
"11639splitHere46","20330356splitHere46","FragmentTransaction ft1 = fm1.beginTransaction();<newline46mondego>ft1.replace(R.id.content, aboutFrag ,<doubleQuotes46>about tag<doubleQuotes46>).addToBackStack(null).commit();<newline46mondego>"
"11640splitHere46","20330356splitHere46","About aboutFrag = fm.findFragmentByTag(<doubleQuotes46>about tag<doubleQuotes46>);<newline46mondego><newline46mondego>Welcome myFragment = fm.findFragmentByTag(<doubleQuotes46>welcome tag<doubleQuotes46>);<newline46mondego>"
"11641splitHere46","20330377splitHere46","JSONArray array = (JSONArray) ((JSONObject) object.get(<doubleQuotes46>data<doubleQuotes46>))<newline46mondego>                .get(<doubleQuotes46>children<doubleQuotes46>);<newline46mondego>JSONObject data;<newline46mondego>for (int i = 0; i < array.size(); i++) {<newline46mondego>     data = (JSONObject) array.get(i);<newline46mondego>}<newline46mondego>"
"11642splitHere46","20330396splitHere46","M"
"11643splitHere46","20330396splitHere46","public static <K, V, M extends Map<K, V>> M deepCopyMap(M s);<newline46mondego>"
"11644splitHere46","20330396splitHere46","M<K, V>"
"11645splitHere46","20330396splitHere46","M extends Map<K, V>"
"11646splitHere46","20330396splitHere46","M<K, V>"
"11647splitHere46","20330396splitHere46","Map"
"11648splitHere46","20330396splitHere46","Map"
"11649splitHere46","20330396splitHere46","Map"
"11650splitHere46","20330396splitHere46","@SupressWarnings(<doubleQuotes46>unchecked<doubleQuotes46>)<newline46mondego>public static <K, V, M extends Map<K, V>> M deepCopyMap(M s) {<newline46mondego>    Map map;<newline46mondego>    if(s.getClass() == HashMap.class) {<newline46mondego>      map = new HashMap();<newline46mondego>    } else if(s.getClass == LinkedHashMap.class) {<newline46mondego>      map = new LinkedHashMap();<newline46mondego>    } else {<newline46mondego>      throw new RuntimeException(<doubleQuotes46>unknown map type <doubleQuotes46> + s.getClass());<newline46mondego>    }<newline46mondego>    for(Map.Entry<K, V> entry : source.entrySet()) {<newline46mondego>        K k = entry.getKey();<newline46mondego>        V v = entry.getValue();<newline46mondego>        if(k instanceof Map) {<newline46mondego>          map.put(k, deepCopyMap((Map) k));<newline46mondego>        } else {<newline46mondego>          result.put(k, v);<newline46mondego>        }<newline46mondego>    }<newline46mondego>    return (M) map;<newline46mondego>}<newline46mondego>"
"11651splitHere46","20330396splitHere46","Map"
"11652splitHere46","20330396splitHere46","M"
"11653splitHere46","20330396splitHere46","V"
"11654splitHere46","20330396splitHere46","?"
"11655splitHere46","20330750splitHere46","@TableGenerator(name = <doubleQuotes46>entities_id_generator<doubleQuotes46>, table = <doubleQuotes46>SEQUENCE<doubleQuotes46>,                <newline46mondego>pkColumnName = <doubleQuotes46>SEQ_NAME<doubleQuotes46>, valueColumnName = <doubleQuotes46>SEQ_COUNT<doubleQuotes46>, pkColumnValue = <newline46mondego><doubleQuotes46>ENTITY_SEQ<doubleQuotes46>, initialValue = 0, allocationSize = 1)<newline46mondego>public class DBObject1 implements Serializable {<newline46mondego>@Id<newline46mondego>@GeneratedValue(generator = <doubleQuotes46>entities_id_generator<doubleQuotes46>, strategy = GenerationType.TABLE)<newline46mondego>private Long id;<newline46mondego>@ManyToOne<newline46mondego>@JoinColumn(name = <doubleQuotes46>source_id<doubleQuotes46>)<newline46mondego>private DBObject2 source;<newline46mondego>}<newline46mondego><newline46mondego>@TableGenerator(name = <doubleQuotes46>entities_id_generator<doubleQuotes46>, table = <doubleQuotes46>SEQUENCE<doubleQuotes46>,                 <newline46mondego>pkColumnName = <doubleQuotes46>SEQ_NAME<doubleQuotes46>, valueColumnName = <doubleQuotes46>SEQ_COUNT<doubleQuotes46>, pkColumnValue = <newline46mondego><doubleQuotes46>ENTITY_SEQ<doubleQuotes46>, initialValue = 0, allocationSize = 1)<newline46mondego>public class DBObject2 implements Serializable {<newline46mondego>@Id<newline46mondego>@GeneratedValue(generator = <doubleQuotes46>entities_id_generator<doubleQuotes46>, strategy = GenerationType.TABLE)<newline46mondego>private Long id;<newline46mondego>@OneToMany(cascade = CascadeType.ALL, mappedBy = <doubleQuotes46>source<doubleQuotes46>)<newline46mondego>private List<DBObject1> objects;<newline46mondego>}<newline46mondego>"
"11656splitHere46","20330750splitHere46","DBObject1"
"11657splitHere46","20330750splitHere46","source_id"
"11658splitHere46","20330898splitHere46","android:id=<doubleQuotes46>+@id/15dp<doubleQuotes46><newline46mondego>"
"11659splitHere46","20330964splitHere46","public class MapFragment extends Fragment<newline46mondego>"
"11660splitHere46","20330964splitHere46","<?xml version=<doubleQuotes46>1.0<doubleQuotes46> encoding=<doubleQuotes46>utf-8<doubleQuotes46>?><newline46mondego><newline46mondego><fragment xmlns:android=<doubleQuotes46>http://schemas.android.com/apk/res/android<doubleQuotes46><newline46mondego>xmlns:map=<doubleQuotes46>http://schemas.android.com/apk/res-auto<doubleQuotes46><newline46mondego>android:id=<doubleQuotes46>@+id/mapview<doubleQuotes46><newline46mondego>android:name=<doubleQuotes46>com.google.android.gms.maps.SupportMapFragment<doubleQuotes46><newline46mondego>android:layout_width=<doubleQuotes46>match_parent<doubleQuotes46><newline46mondego>android:layout_height=<doubleQuotes46>match_parent<doubleQuotes46><newline46mondego>map:cameraZoom=<doubleQuotes46>12<doubleQuotes46><newline46mondego>map:mapType=<doubleQuotes46>normal<doubleQuotes46><newline46mondego>map:uiZoomControls=<doubleQuotes46>false<doubleQuotes46><newline46mondego>map:uiRotateGestures=<doubleQuotes46>true<doubleQuotes46><newline46mondego>map:uiScrollGestures=<doubleQuotes46>true<doubleQuotes46><newline46mondego>map:uiZoomGestures=<doubleQuotes46>true<doubleQuotes46><newline46mondego>map:uiTiltGestures=<doubleQuotes46>false<doubleQuotes46> /><newline46mondego>"
"11661splitHere46","20330964splitHere46","@Override<newline46mondego>public View onCreateView(LayoutInflater inflater, ViewGroup container,<newline46mondego>        Bundle savedInstanceState) {<newline46mondego><newline46mondego>    return inflater.inflate(R.layout.mapview, container, false);<newline46mondego>}<newline46mondego>"
"11662splitHere46","20330964splitHere46","private GoogleMap getGoogleMap() {<newline46mondego>        if (map == null && getActivity() != null && getActivity().getSupportFragmentManager()!= null) {<newline46mondego>            SupportMapFragment smf = (SupportMapFragment)getActivity().getSupportFragmentManager().findFragmentById(R.id.mapview);<newline46mondego>            if (smf != null) {<newline46mondego>                map = smf.getMap();<newline46mondego>            }<newline46mondego>        }<newline46mondego>        return map;<newline46mondego>    }<newline46mondego>"
"11663splitHere46","20331128splitHere46","setImageBitmap"
"11664splitHere46","20331128splitHere46","ImageView"
"11665splitHere46","20331128splitHere46","setImageBitmap"
"11666splitHere46","20331128splitHere46","@Override<newline46mondego>protected void onCreate(Bundle savedInstanceState) {<newline46mondego>    ...<newline46mondego>    ImageView imgView = (ImageView) findViewById(R.id.the_id);<newline46mondego>    imgView.setImageBitmap(((BitmapDrawable) d).getBitmap());<newline46mondego>}<newline46mondego>"
"11667splitHere46","20331128splitHere46","@Override<newline46mondego>protected void onCreate(Bundle savedInstanceState) {<newline46mondego>    ...<newline46mondego>    ImageView imgView = (ImageView) findViewById(R.id.the_id);<newline46mondego>    imgView.setImageDrawable(d);<newline46mondego>}<newline46mondego>"
"11668splitHere46","20331128splitHere46","Drawable d = getResources().getDrawable(R.drawable.selstation_up_btn);<newline46mondego>ImageView imgView = (ImageView) findViewById(R.id.the_id);<newline46mondego>imgView.setImageBitmap(((BitmapDrawable) d).getBitmap());<newline46mondego>"
"11669splitHere46","20331128splitHere46","Bitmap d = BitmapFactory.decodeResource(context.getResources(),<newline46mondego>                                       R.drawable.selstation_up_btn);<newline46mondego>ImageView imgView = (ImageView) findViewById(R.id.the_id);<newline46mondego>imgView.setImageBitmap(d);<newline46mondego>"
"11670splitHere46","20331211splitHere46","SourceChannelImpl"
"11671splitHere46","20331211splitHere46","-Xbootclasspath/a:mybootspath"
"11672splitHere46","20331243splitHere46","String"
"11673splitHere46","20331243splitHere46","Date"
"11674splitHere46","20331243splitHere46","String dateTime = <doubleQuotes46>11/15/2013 08:00:00<doubleQuotes46>;<newline46mondego>SimpleDateFormat dateParser = new SimpleDateFormat(<doubleQuotes46>MM/dd/yyyy HH:mm:ss<doubleQuotes46>);<newline46mondego>Date date = dateParser.parse(dateTime);<newline46mondego>"
"11675splitHere46","20331243splitHere46","Date"
"11676splitHere46","20331243splitHere46","String"
"11677splitHere46","20331243splitHere46","MM/dd/yyyy"
"11678splitHere46","20331243splitHere46","SimpleDateFormat dateFormatter = new SimpleDateFormat(<doubleQuotes46>MM/dd/yyyy<doubleQuotes46>);<newline46mondego>System.out.println(dateFormatter.format(date));<newline46mondego>"
"11679splitHere46","20331243splitHere46","DateTimeFormatter dtf = DateTimeFormat.forPattern(<doubleQuotes46>MM/dd/yyyy HH:mm:ss<doubleQuotes46>);<newline46mondego>DateTime jodatime = dtf.parseDateTime(dateTime);<newline46mondego>DateTimeFormatter dtfOut = DateTimeFormat.forPattern(<doubleQuotes46>MM/dd/yyyy<doubleQuotes46>);<newline46mondego>System.out.println(dtfOut.print(jodatime));<newline46mondego>"
"11680splitHere46","20331268splitHere46","Component comp = ...;<newline46mondego>BufferedImage image = new BufferedImage(comp.getWidth(), comp.getHeight(),<newline46mondego>    BufferedImage.TYPE_INT_RGB);<newline46mondego>Graphics2D g = image.createGraphics();<newline46mondego>comp.paint(g);<newline46mondego>g.dispose();<newline46mondego>"
"11681splitHere46","20331268splitHere46","java.awt.image.BufferedImage"
"11682splitHere46","20331268splitHere46","StringBuilder sb = new StringBuilder();<newline46mondego>try (OutputStream out = new Base64Encoder(sb)) {<newline46mondego>    javax.imageio.ImageIO.write(image, <doubleQuotes46>png<doubleQuotes46>, out);<newline46mondego>} catch (IOException e) {<newline46mondego>    throw new RuntimeException(e);<newline46mondego>}<newline46mondego>String imageData = sb.toString();<newline46mondego>"
"11683splitHere46","20331268splitHere46","import java.io.*;<newline46mondego><newline46mondego>public class Base64Encoder extends OutputStream {<newline46mondego>    private Appendable out;<newline46mondego>    private int p = 0, tmp = 0;<newline46mondego>    private static final char[] charMap =<newline46mondego>        <doubleQuotes46>ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/<doubleQuotes46><newline46mondego>        .toCharArray();<newline46mondego><newline46mondego>    public Base64Encoder(Appendable out) {<newline46mondego>        this.out = java.util.Objects.requireNonNull(out);<newline46mondego>    }<newline46mondego><newline46mondego>    @Override<newline46mondego>    public void write(int b) throws IOException {<newline46mondego>        b &= 0xFF;<newline46mondego>        if (p == 0) {<newline46mondego>            out.append(charMap[b >> 2]);<newline46mondego>            tmp = (b & 0x3) << 4;<newline46mondego>            p = 1;<newline46mondego>        } else if (p == 1) {<newline46mondego>            out.append(charMap[tmp | (b >> 4)]);<newline46mondego>            tmp = (b & 0xF) << 2;<newline46mondego>            p = 2;<newline46mondego>        } else {<newline46mondego>            out.append(charMap[tmp | (b >> 6)]);<newline46mondego>            out.append(charMap[b & 0x3F]);<newline46mondego>            p = 0;<newline46mondego>        }<newline46mondego>    }<newline46mondego><newline46mondego>    @Override<newline46mondego>    public void close() throws IOException {<newline46mondego>        if (p != 0) {<newline46mondego>            out.append(charMap[tmp]);<newline46mondego>            if (p == 1) out.append('=').append('=');<newline46mondego>            if (p == 2) out.append('=');<newline46mondego>        }<newline46mondego>        out = null;<newline46mondego>    }<newline46mondego>}<newline46mondego>"
"11684splitHere46","20331268splitHere46","data:image/png;base64,"
"11685splitHere46","20331268splitHere46","<img>"
"11686splitHere46","20331268splitHere46","src"
"11687splitHere46","20331304splitHere46","SecretKey"
"11688splitHere46","20331304splitHere46","getEncoded()"
"11689splitHere46","20331304splitHere46","SecretKeySpec"
"11690splitHere46","20331304splitHere46","import org.apache.commons.codec.binary.Base64;<newline46mondego><newline46mondego>// <doubleQuotes46>AES<doubleQuotes46> is the key generation algorith, you might want to use a different one.<newline46mondego>KeyGenerator kg = KeyGenerator.getInstance(<doubleQuotes46>AES<doubleQuotes46>); <newline46mondego><newline46mondego>// 256-bit key, you may want more or fewer bits.<newline46mondego>kg.init(256);<newline46mondego><newline46mondego>SecretKey key = kg.generateKey();<newline46mondego>byte[] keyBytes = key.getEncoded();<newline46mondego><newline46mondego>// Encode to a String, e.g. base 64 encoded<newline46mondego>String encodedKey = new String(Base64.encodeBase64(keyBytes), <doubleQuotes46>UTF-8<doubleQuotes46>);<newline46mondego>"
"11691splitHere46","20331304splitHere46","// Base 64 decode<newline46mondego>byte[] keyBytes = Base64.decodeBase64(encodedKey.getBytes(<doubleQuotes46>UTF-8<doubleQuotes46>));<newline46mondego><newline46mondego>// Need to put the same key generation algorithm in here:<newline46mondego>SecretKeySpec keySpec = new SecretKeySpec(keyBytes, <doubleQuotes46>AES<doubleQuotes46>);<newline46mondego>"
"11692splitHere46","20331407splitHere46","while (!familySurname.matches(<doubleQuotes46>[a-zA-Z]+<doubleQuotes46>)){<newline46mondego>     System.out.print(<doubleQuotes46>Invalid name - What is your family's surname? <doubleQuotes46>);<newline46mondego>     familySurname = keyboard.nextLine();<newline46mondego> }<newline46mondego>"
"11693splitHere46","20331435splitHere46","Token"
"11694splitHere46","20331435splitHere46","PACKAGE edu.isistan.carcha.concern;<newline46mondego>TYPESYSTEM org.cleartk.ClearTKTypeSystem; <newline46mondego>DECLARE persistence;<newline46mondego>org.cleartk.token.type.Token{FEATURE(<doubleQuotes46>lemma<doubleQuotes46>,<doubleQuotes46>storage<doubleQuotes46>) -> MARK(persistence)};<newline46mondego>"
"11695splitHere46","20331435splitHere46","Token"
"11696splitHere46","20331653splitHere46","public boolean member(Node root, Integer val){<newline46mondego>    Node currentNode = root;//keep track of current node<newline46mondego>    while(currentNode != null){<newline46mondego>        //switched currentNode.val and val to avoid null pointer exceptions<newline46mondego>        if(val.equals(currentNode.val)){<newline46mondego>        //if you're looking for nulls...still with the original<newline46mondego>        //if(currentNode.val.equals(val)){<newline46mondego>            System.out.println(<doubleQuotes46>true<doubleQuotes46>);<newline46mondego>            return true;<newline46mondego>        }<newline46mondego>        currentNode = root.next();//update current node<newline46mondego>    }<newline46mondego>    return false;<newline46mondego>}<newline46mondego>"
"11697splitHere46","20331696splitHere46","panelOption.add(panelOption);<newline46mondego>"
"11698splitHere46","20331957splitHere46","$key =  <doubleQuotes46>-----BEGIN PUBLIC KEY-----\n<doubleQuotes46>.<newline46mondego>        chunk_split($pubkey, 64,<doubleQuotes46>\n<doubleQuotes46>).<newline46mondego>       '-----END PUBLIC KEY-----';  <newline46mondego>$key = openssl_get_publickey($key);<newline46mondego>$signature = base64_decode($signature);<newline46mondego>$validated = openssl_verify($data, $signature, $key);        <newline46mondego>return $validated; <newline46mondego>"
"11699splitHere46","20332031splitHere46","JdbcCursorItemReader"
"11700splitHere46","20332031splitHere46","RowMapper"
"11701splitHere46","20332031splitHere46","ItemProcessor"
"11702splitHere46","20332031splitHere46","JdbcTemplate"
"11703splitHere46","20332031splitHere46","RowMapper"
"11704splitHere46","20332031splitHere46","ItemWriter"
"11705splitHere46","20332031splitHere46","JdbcBatchItemWriter"
"11706splitHere46","20332361splitHere46","long"
"11707splitHere46","20332361splitHere46","BigInteger ba = BigInteger.valueOf(a);<newline46mondego>BigInteger bb = BigInteger.valueOf(b);<newline46mondego><newline46mondego>BigInteger result = ba.divide(bb);<newline46mondego>"
"11708splitHere46","20332432splitHere46","n/numThr == 2502/4 == 625 remainder 2<newline46mondego>"
"11709splitHere46","20332516splitHere46","BufferedReader"
"11710splitHere46","20332516splitHere46","BufferedReader"
"11711splitHere46","20332516splitHere46","InputStream"
"11712splitHere46","20332516splitHere46","System.in"
"11713splitHere46","20332516splitHere46","TestProgram"
"11714splitHere46","20332516splitHere46","TestProgram"
"11715splitHere46","20332516splitHere46","BufferedReader"
"11716splitHere46","20332516splitHere46","TestProgram"
"11717splitHere46","20332516splitHere46","BufferedReader"
"11718splitHere46","20332516splitHere46","InputStream"
"11719splitHere46","20332516splitHere46","InputStreams"
"11720splitHere46","20332516splitHere46","ConcatInputStream concat = new ConcatInputStream();<newline46mondego>System.setIn(concat);<newline46mondego><newline46mondego>for(int i = 0; i < numberOfCases; i++) {<newline46mondego><newline46mondego>  Byte[] paramBytes = getCurrentParamBytes();<newline46mondego><newline46mondego>  InputStream inputStream = new BufferedInputStream(new ByteArrayInputStream(paramBytes));<newline46mondego><newline46mondego>  concat.addInputStream(inputStream);<newline46mondego>  String[] params = null;<newline46mondego><newline46mondego>  testProgram.invoke(null, (Object) params);<newline46mondego>}  <newline46mondego>"
"11721splitHere46","20332516splitHere46","concat"
"11722splitHere46","20332516splitHere46","TestProgram"
"11723splitHere46","20332516splitHere46","BufferedReader"
"11724splitHere46","20332690splitHere46","public static void main(String[] args) {<newline46mondego>    final String TEST = <doubleQuotes46>InsertedTextAry NO AGREEMENT EXISTS FOR AGENCY - ABCD< 102354 This is test<<doubleQuotes46>;<newline46mondego>      // Create a Pattern object<newline46mondego>    Pattern r = Pattern.compile(<doubleQuotes46>NO AGREEMENT EXISTS FOR AGENCY[^<]*<doubleQuotes46>);<newline46mondego>    if(TEST.contains(<doubleQuotes46>NO AGREEMENT EXISTS FOR AGENCY<doubleQuotes46>))<newline46mondego>    {<newline46mondego>          // Now create matcher object.<newline46mondego>          Matcher m = r.matcher(TEST);<newline46mondego>          if (m.find( )) {<newline46mondego>             System.out.println(<doubleQuotes46>Found value: <doubleQuotes46> + m.group(0) );<newline46mondego>    }<newline46mondego>}<newline46mondego>"
"11725splitHere46","20332690splitHere46","Found value: NO AGREEMENT EXISTS FOR AGENCY - ABCD<newline46mondego>"
"11726splitHere46","20332724splitHere46","<?xml version=<doubleQuotes46>1.0<doubleQuotes46> ?><newline46mondego><foo><newline46mondego>  <bar><![CDATA[This should contain a nested cdata, which <![CDATA[Contains another CDATA]]>]]></bar><newline46mondego></foo><newline46mondego>"
"11727splitHere46","20332724splitHere46","]]>"
"11728splitHere46","20332724splitHere46","CDATA"
"11729splitHere46","20332724splitHere46","CDATA"
"11730splitHere46","20332740splitHere46","<plugin><newline46mondego>  <artifactId>maven-war-plugin</artifactId><newline46mondego>  <version>${maven.war.plugin.version}</version><newline46mondego>  <configuration><newline46mondego>    <packagingExcludes>**/empty.tmp</packagingExcludes><newline46mondego>  </configuration><newline46mondego></plugin><newline46mondego>"
"11731splitHere46","20332777splitHere46","public void onClick(View v) {<newline46mondego>     int id = v.getId();<newline46mondego><newline46mondego>     if (count[id] > 1) {<newline46mondego>       count[id]--;<newline46mondego>       totalCount--;<newline46mondego>       notifyDataSetChanged(); <newline46mondego>       holder.counter.invalidate();<newline46mondego>     }<newline46mondego>   }<newline46mondego> });<newline46mondego>"
"11732splitHere46","20332833splitHere46","this"
"11733splitHere46","20332833splitHere46","this"
"11734splitHere46","20332833splitHere46","this."
"11735splitHere46","20332833splitHere46","this.add(someComponent)"
"11736splitHere46","20332833splitHere46","public ExpensesPanel(String name, String date, int cost, int expense) {<newline46mondego>  n = name;<newline46mondego>  d = date;<newline46mondego>  c = cost;<newline46mondego>  e = expense;<newline46mondego><newline46mondego>  // Create new Panel and set it on horizontal axis<newline46mondego>  // JPanel exp = new JPanel();<newline46mondego>  setLayout(new BoxLayout(this, BoxLayout.X_AXIS));<newline46mondego>  Box horizontalBox;<newline46mondego><newline46mondego>  // Labels<newline46mondego>  JLabel newName = new JLabel(<doubleQuotes46>Name: <doubleQuotes46>, JLabel.CENTER);<newline46mondego>  JLabel newDate = new JLabel(<doubleQuotes46>Date<doubleQuotes46>, JLabel.CENTER);<newline46mondego>  JLabel newCost = new JLabel(<doubleQuotes46>Cost: <doubleQuotes46>, JLabel.CENTER);<newline46mondego>  JLabel newExp = new JLabel(<doubleQuotes46>Expense: <doubleQuotes46>, JLabel.CENTER);<newline46mondego>  add(newName, Box.createHorizontalGlue());<newline46mondego>  add(newDate, Box.createHorizontalGlue());<newline46mondego>  add(newCost, Box.createHorizontalGlue());<newline46mondego>  add(newExp, Box.createHorizontalGlue());<newline46mondego>}<newline46mondego>"
"11737splitHere46","20332833splitHere46","public void paintComponent(Graphics g){<newline46mondego>    super.paintComponent(g);<newline46mondego>    Graphics2D g2d = (Graphics2D) g;<newline46mondego>    g2d.setBackground(Color.BLUE);<newline46mondego>}<newline46mondego>"
"11738splitHere46","20332833splitHere46","clearRect(...)"
"11739splitHere46","20332833splitHere46","setBackground(Color.blue);<newline46mondego>"
"11740splitHere46","20332833splitHere46","add(newCost, Box.createHorizontalGlue());<newline46mondego>"
"11741splitHere46","20332956splitHere46","String"
"11742splitHere46","20332971splitHere46","ProjectRoot<newline46mondego>         file.txt<newline46mondego>         src<newline46mondego>         build<newline46mondego>"
"11743splitHere46","20332971splitHere46","file.txt"
"11744splitHere46","20333166splitHere46","Context context;<newline46mondego>"
"11745splitHere46","20333166splitHere46","context.startActivity(Intent.createChooser(emailIntent, <doubleQuotes46>Send mail...<doubleQuotes46>));"
"11746splitHere46","20333166splitHere46","at com.example.name.PrevEmail$1.onClick(PrevEmail.java:100)<newline46mondego>"
"11747splitHere46","20333166splitHere46","onClick"
"11748splitHere46","20333305splitHere46","import java.awt.CardLayout;<newline46mondego>import java.awt.GridLayout;<newline46mondego>import java.awt.event.ActionEvent;<newline46mondego>import java.awt.event.ActionListener;<newline46mondego><newline46mondego>import javax.swing.*;<newline46mondego><newline46mondego>@SuppressWarnings(<doubleQuotes46>serial<doubleQuotes46>)<newline46mondego>public class Sscce2 extends JPanel {<newline46mondego>   private static final String COMMUNITY = <doubleQuotes46>Community<doubleQuotes46>;<newline46mondego>   private static final String PASSWORD = <doubleQuotes46>Password<doubleQuotes46>;<newline46mondego>   private static final String BLANK = <doubleQuotes46>Blank<doubleQuotes46>;<newline46mondego>   private static final String[] VERSIONS = {COMMUNITY, PASSWORD, BLANK};<newline46mondego><newline46mondego>   CardLayout cardLayout = new CardLayout();<newline46mondego>   JPanel cardHolderPanel = new JPanel(cardLayout);<newline46mondego>   JComboBox combobox = new JComboBox(VERSIONS);<newline46mondego>   private JPasswordField passwordField = new JPasswordField(15);<newline46mondego>   private JTextField communityTextField = new JTextField(15);<newline46mondego><newline46mondego>   public Sscce2() {<newline46mondego>      cardHolderPanel.add(createCommunityPanel(), COMMUNITY);<newline46mondego>      cardHolderPanel.add(createPasswordPanel(), PASSWORD);<newline46mondego>      cardHolderPanel.add(new JLabel(), BLANK);<newline46mondego><newline46mondego>      JPanel comboPanel = new JPanel();<newline46mondego>      comboPanel.setLayout(new BoxLayout(comboPanel, BoxLayout.PAGE_AXIS));<newline46mondego>      comboPanel.setBorder(BorderFactory.createTitledBorder(<doubleQuotes46>Version:<doubleQuotes46>));<newline46mondego>      comboPanel.add(combobox);<newline46mondego><newline46mondego>      setLayout(new GridLayout(0, 1));<newline46mondego>      add(comboPanel);<newline46mondego>      add(cardHolderPanel);<newline46mondego><newline46mondego>      combobox.addActionListener(new ActionListener() {<newline46mondego><newline46mondego>         @Override<newline46mondego>         public void actionPerformed(ActionEvent e) {<newline46mondego>            String selection = combobox.getSelectedItem().toString();<newline46mondego>            cardLayout.show(cardHolderPanel, selection);<newline46mondego>         }<newline46mondego>      });<newline46mondego>   }<newline46mondego><newline46mondego>   public String getCommunityText() {<newline46mondego>      return communityTextField.getText();<newline46mondego>   }<newline46mondego><newline46mondego>   public char[] getPassword() {<newline46mondego>      return passwordField.getPassword();<newline46mondego>   }<newline46mondego><newline46mondego><newline46mondego>   private JPanel createCommunityPanel() {<newline46mondego>      JPanel panel = new JPanel();<newline46mondego>      panel.setLayout(new BoxLayout(panel, BoxLayout.PAGE_AXIS));<newline46mondego>      panel.setBorder(BorderFactory.createTitledBorder(COMMUNITY));<newline46mondego>      panel.add(communityTextField);<newline46mondego>      return panel;<newline46mondego>   }<newline46mondego><newline46mondego><newline46mondego>   private JPanel createPasswordPanel() {<newline46mondego>      JPanel panel = new JPanel();<newline46mondego>      panel.setLayout(new BoxLayout(panel, BoxLayout.PAGE_AXIS));<newline46mondego>      panel.setBorder(BorderFactory.createTitledBorder(PASSWORD));<newline46mondego>      panel.add(passwordField);<newline46mondego>      return panel;<newline46mondego>   }<newline46mondego><newline46mondego><newline46mondego>   private static void createAndShowGui() {<newline46mondego>      Sscce2 sscce2 = new Sscce2();<newline46mondego>      JOptionPane.showMessageDialog(null, sscce2, <doubleQuotes46>SSCCE 2<doubleQuotes46>, JOptionPane.PLAIN_MESSAGE);<newline46mondego><newline46mondego>      System.out.println(<doubleQuotes46>Community text: <doubleQuotes46> + sscce2.getCommunityText());<newline46mondego>      System.out.println(<doubleQuotes46>Password: <doubleQuotes46> + new String(sscce2.getPassword())); // *** never do this!<newline46mondego>   }<newline46mondego><newline46mondego>   public static void main(String[] args) {<newline46mondego>      SwingUtilities.invokeLater(new Runnable() {<newline46mondego>         public void run() {<newline46mondego>            createAndShowGui();<newline46mondego>         }<newline46mondego>      });<newline46mondego>   }<newline46mondego>}<newline46mondego>"
"11749splitHere46","20333409splitHere46","{  title: 'Title',<newline46mondego>   xlabel: 'Time',<newline46mondego>   ylabel: 'Space',<newline46mondego>   legend: 'always',<newline46mondego>   labelsDivStyles: {'textAlign': 'right'},<newline46mondego>});<newline46mondego>"
"11750splitHere46","20333468splitHere46","int total = 0;<newline46mondego>String inputString = <doubleQuotes46>12 7 8 9 52<doubleQuotes46>;<newline46mondego>int prevIndex = 0;<newline46mondego>int index = 0;<newline46mondego>while (index > -1) {<newline46mondego>  index = inputString.indexOf(' ', prevIndex);<newline46mondego>  if (index > -1) {<newline46mondego>    total += Integer.parseInt(inputString.substring(prevIndex, index));<newline46mondego>    prevIndex = index + 1;<newline46mondego>  } else {<newline46mondego>    total += Integer.parseInt(inputString.substring(inputString.lastIndexOf(' ')+1));<newline46mondego>break;<newline46mondego>  }<newline46mondego>}<newline46mondego>System.out.println(total);<newline46mondego>"
"11751splitHere46","20333643splitHere46","Calendar"
"11752splitHere46","20333643splitHere46","GregorianCalendar"
"11753splitHere46","20333715splitHere46","double"
"11754splitHere46","20333715splitHere46","double[] totals = new double[9];  // all the totals are stored here<newline46mondego>unit = 1;<newline46mondego>...<newline46mondego><newline46mondego>while(input.hasNextLine()){<newline46mondego>    ...<newline46mondego>    ...<newline46mondego><newline46mondego>    totals[unit - 1] = total;<newline46mondego>    unit++;<newline46mondego>}<newline46mondego>"
"11755splitHere46","20333780splitHere46","em1"
"11756splitHere46","20333780splitHere46","em2"
"11757splitHere46","20333780splitHere46","boolean"
"11758splitHere46","20333780splitHere46","em1"
"11759splitHere46","20333780splitHere46","java.util.Collection<Eleve> data = ejc.findEleveByNiveauClasseNomPrenom(niv, classe, nom, prenom);<newline46mondego>"
"11760splitHere46","20333780splitHere46","em1"
"11761splitHere46","20333780splitHere46","java.util.Collection<Eleve> data = ejc.findEleveByNiveauClasseNomPrenom(niv, classe, nom, prenom,em1);<newline46mondego>"
"11762splitHere46","20333841splitHere46","wardit()"
"11763splitHere46","20333841splitHere46","Connection conn = new Connection;<newline46mondego>Connection.start();<newline46mondego>Connection.wardit();<newline46mondego>"
"11764splitHere46","20333841splitHere46","out"
"11765splitHere46","20333841splitHere46","wardit()"
"11766splitHere46","20333841splitHere46","public class Connection implements Runnable<newline46mondego>{<newline46mondego>    private static String temp_ip=<doubleQuotes46>127.0.0.1<doubleQuotes46>;<newline46mondego>    //temp_ip=<doubleQuotes46>74.125.225.179<doubleQuotes46>;<newline46mondego>    private Socket sock;<newline46mondego>    private static final int Port=80;<newline46mondego>    private static final String IP = temp_ip;<newline46mondego>    public double lat;<newline46mondego>    public double longi;<newline46mondego>    public double accuracy;<newline46mondego>    private String message;<newline46mondego>    public Location location;<newline46mondego>    private PrintWriter out;<newline46mondego>    private boolean running=false;<newline46mondego>    Thread thread=null;<newline46mondego><newline46mondego>public void start()<newline46mondego>{<newline46mondego>    if (thread ==null)<newline46mondego>    {<newline46mondego>        set_run(true);<newline46mondego>        try {thread=new Thread(this);}<newline46mondego>        catch (Exception e){e.printStackTrace();}<newline46mondego>        try {thread.start();}<newline46mondego>        catch (Exception e){e.printStackTrace();}<newline46mondego>    }<newline46mondego>}<newline46mondego>public void run()<newline46mondego>{<newline46mondego>    try{<newline46mondego>        init_ports();<newline46mondego>        init_connect();<newline46mondego>    }catch(Exception e){<newline46mondego>        e.printStackTrace();<newline46mondego>    }<newline46mondego>}<newline46mondego>public void set_run(boolean a)<newline46mondego>{<newline46mondego>    running=a;<newline46mondego>}<newline46mondego><newline46mondego>private void synchronized init_connect() throws InterruptedException<newline46mondego>{<newline46mondego>    Log.v(null, <doubleQuotes46>init_connect called<doubleQuotes46>);<newline46mondego>    try<newline46mondego>    {<newline46mondego>        out = new PrintWriter(new BufferedWriter(new OutputStreamWriter(sock.getOutputStream())),true);<newline46mondego>        notifyAll();<newline46mondego>    }<newline46mondego>    catch (UnknownHostException e)<newline46mondego>    {e.printStackTrace();}<newline46mondego>    catch (IOException e)<newline46mondego>    {e.printStackTrace();}<newline46mondego>    catch (Exception e)<newline46mondego>    {e.printStackTrace();}}<newline46mondego>private void init_ports()<newline46mondego>{<newline46mondego>    Log.v(null, <doubleQuotes46>init_ports called<doubleQuotes46>);<newline46mondego>    try<newline46mondego>    {<newline46mondego>        InetAddress addr= InetAddress.getByName(IP);<newline46mondego>        sock= new Socket(addr,Port);<newline46mondego>    }<newline46mondego>    catch (UnknownHostException e)<newline46mondego>    {e.printStackTrace();}<newline46mondego>    catch (IOException e)<newline46mondego>    {e.printStackTrace();}<newline46mondego>}<newline46mondego>public void synchronized wardit() throws InterruptedException<newline46mondego>{<newline46mondego>    lat= location.getLatitude();<newline46mondego>    longi= location.getLongitude();<newline46mondego>    accuracy= location.getAccuracy();<newline46mondego>    message= String.valueOf(lat)+<doubleQuotes46>$<doubleQuotes46>+String.valueOf(longi)+<doubleQuotes46>$<doubleQuotes46>+String.valueOf(accuracy);<newline46mondego>    while(out==null){<newline46mondego>        wait();<newline46mondego>    }<newline46mondego>    out.println(message);<newline46mondego>    Log.v(null, <doubleQuotes46>wardit called<doubleQuotes46>);<newline46mondego>}<newline46mondego>"
"11767splitHere46","20333841splitHere46","wait()"
"11768splitHere46","20333841splitHere46","out"
"11769splitHere46","20333841splitHere46","notify()"
"11770splitHere46","20333841splitHere46","init_connect()"
"11771splitHere46","20333841splitHere46","out"
"11772splitHere46","20333841splitHere46","notifyAll()"
"11773splitHere46","20333841splitHere46","notify()"
"11774splitHere46","20333841splitHere46","wardit()"
"11775splitHere46","20333893splitHere46","ButtonHandler"
"11776splitHere46","20333893splitHere46","ActionListener"
"11777splitHere46","20333893splitHere46","public class ButtonHandler implements ActionListener{}<newline46mondego>"
"11778splitHere46","20333893splitHere46","itemStateChanged(ItemEvent)"
"11779splitHere46","20333893splitHere46","ItemListener"
"11780splitHere46","20333893splitHere46","ItemListener"
"11781splitHere46","20333893splitHere46","JButton"
"11782splitHere46","20333893splitHere46","ItemListener"
"11783splitHere46","20333893splitHere46","JRadioButton"
"11784splitHere46","20333893splitHere46","Item"
"11785splitHere46","20333893splitHere46","ItemSelectable"
"11786splitHere46","20333893splitHere46","e.getSource()"
"11787splitHere46","20333893splitHere46","getName(String)"
"11788splitHere46","20333893splitHere46","setName(String)"
"11789splitHere46","20333893splitHere46","@Override<newline46mondego>        public void itemStateChanged(ItemEvent e) {<newline46mondego><newline46mondego>            if(e.getSource() instanceof JCheckBox)<newline46mondego>            { <newline46mondego>                JCheckBox  checkBox = (JCheckBox)e.getSource();<newline46mondego>                if(checkBox.getName().equals(<doubleQuotes46>expectedName<doubleQuotes46>))<newline46mondego>                          ; // do my thing<newline46mondego>             }<newline46mondego>        }<newline46mondego>"
"11790splitHere46","20333893splitHere46","ButtonGroup"
"11791splitHere46","20333893splitHere46","ButtonGroup"
"11792splitHere46","20333893splitHere46","clearSelection()"
"11793splitHere46","20333893splitHere46","ItemListener"
"11794splitHere46","20333893splitHere46","a1.addItemListener(handler);"
"11795splitHere46","20333893splitHere46","ButtonHandler"
"11796splitHere46","20333893splitHere46","checkMe, refresh"
"11797splitHere46","20333893splitHere46","JButton.setActionCommand(String)"
"11798splitHere46","20333931splitHere46","String.replaceAll()"
"11799splitHere46","20333931splitHere46","double"
"11800splitHere46","20333931splitHere46","double amountt = Double.parseDouble(amount.replaceAll(<doubleQuotes46>,<doubleQuotes46>,<doubleQuotes46>.<doubleQuotes46>));<newline46mondego>"
"11801splitHere46","20333975splitHere46","AbstractManager"
"11802splitHere46","20333975splitHere46","MailManager"
"11803splitHere46","20333975splitHere46","AbstractManager"
"11804splitHere46","20333975splitHere46","@Component(<doubleQuotes46>mailService<doubleQuotes46>)"
"11805splitHere46","20333975splitHere46","@Autowired @Qualifier(<doubleQuotes46>mailService<doubleQuotes46>)"
"11806splitHere46","20333983splitHere46","Pattern CHOMP= Pattern.compile(<doubleQuotes46>[^\n]+\nChompHere:(.*)<doubleQuotes46>, Pattern.MULTILINE | Pattern.DOTALL);<newline46mondego>"
"11807splitHere46","20333983splitHere46","[^\n]+\n"
"11808splitHere46","20333983splitHere46","ChompHere"
"11809splitHere46","20333983splitHere46","ChompHere"
"11810splitHere46","20334088splitHere46","doFinal"
"11811splitHere46","20334088splitHere46","doFinal"
"11812splitHere46","20334088splitHere46","update"
"11813splitHere46","20334088splitHere46","doFinal"
"11814splitHere46","20334088splitHere46","update"
"11815splitHere46","20334088splitHere46","doFinal"
"11816splitHere46","20334088splitHere46","doFinal()"
"11817splitHere46","20334324splitHere46","var last = 0l<newline46mondego>    val listener = new HotKeyListener() {<newline46mondego>      def onHotKey(hotKey: HotKey): Unit = {<newline46mondego>        hotKey.keyStroke match {<newline46mondego>          case `ctrlC` =><newline46mondego>            if (System.currentTimeMillis() - last < 700) // arbitrary delay of 700 ms<newline46mondego>              println(<doubleQuotes46>We have a double click!<doubleQuotes46>)<newline46mondego>            else last = System.currentTimeMillis()<newline46mondego>        }<newline46mondego>      }<newline46mondego>    }<newline46mondego>"
"11818splitHere46","20334324splitHere46","Promise"
"11819splitHere46","20334457splitHere46","public static int[][] getArray(){<newline46mondego>    return my_array;<newline46mondego>}<newline46mondego>"
"11820splitHere46","20334457splitHere46","int[][] my_array_from_first_class = FirstClass.getArray();<newline46mondego>"
"11821splitHere46","20334678splitHere46","Connection"
"11822splitHere46","20334678splitHere46","new Thread()"
"11823splitHere46","20334678splitHere46","new Thread(){<newline46mondego>    public void run() {<newline46mondego>        System.out.println(<doubleQuotes46>blah<doubleQuotes46>);<newline46mondego>    }<newline46mondego>}.start();<newline46mondego>"
"11824splitHere46","20334678splitHere46","run()"
"11825splitHere46","20334678splitHere46","con"
"11826splitHere46","20334770splitHere46","GroupLayout"
"11827splitHere46","20334770splitHere46","jPanel1"
"11828splitHere46","20334770splitHere46","JLabel"
"11829splitHere46","20334770splitHere46","addAnotherPanel()"
"11830splitHere46","20334770splitHere46","jpanel1.add(component)"
"11831splitHere46","20334770splitHere46","GroupLayout"
"11832splitHere46","20334770splitHere46","addComponent"
"11833splitHere46","20334770splitHere46","GroupLayout"
"11834splitHere46","20334770splitHere46","LayoutManager"
"11835splitHere46","20334839splitHere46","AjaxEventBehavior"
"11836splitHere46","20334839splitHere46","click"
"11837splitHere46","20334839splitHere46","FeedbackPanel"
"11838splitHere46","20334839splitHere46","private FeedbackPanel feedbackPanel() {<newline46mondego>    final FeedbackPanel fb = new FeedbackPanel(<doubleQuotes46>feedbackPanel<doubleQuotes46>) {<newline46mondego>        @Override<newline46mondego>        protected void onConfigure() {<newline46mondego>            super.onConfigure();<newline46mondego>            setVisible(anyMessage());<newline46mondego>        }<newline46mondego>    };<newline46mondego>    fb.add(new AjaxEventBehavior(<doubleQuotes46>click<doubleQuotes46>) {<newline46mondego>        @Override<newline46mondego>        protected void onEvent(AjaxRequestTarget target) {<newline46mondego>          fb.setVisible(false);<newline46mondego>          target.add(fb);<newline46mondego>        }<newline46mondego>    });<newline46mondego>    fb.setOutputMarkupPlaceholderTag(true);<newline46mondego>    return fb;<newline46mondego>}<newline46mondego>"
"11839splitHere46","20335000splitHere46","InputStreamResource inputStreamResource = new InputStreamResource(inputStream);<newline46mondego>httpHeaders.setContentLength(contentLengthOfStream);<newline46mondego>return new ResponseEntity(inputStreamResource, httpHeaders, HttpStatus.OK);<newline46mondego>"
"11840splitHere46","20335014splitHere46","input-channel"
"11841splitHere46","20335014splitHere46","<int:chain ...><newline46mondego>    <int:recipient-list-router><newline46mondego>        <int:recipient channel=<doubleQuotes46>foo<doubleQuotes46> /><newline46mondego>        ...<newline46mondego>    </int:recipient-list-router><newline46mondego></int:chain><newline46mondego><newline46mondego><int:chain input-channel=<doubleQuotes46>foo<doubleQuotes46>><newline46mondego>    ...<newline46mondego></int:chain><newline46mondego>"
"11842splitHere46","20335014splitHere46","RLR"
"11843splitHere46","20335053splitHere46","while ( (line = br.readLine()) != null) {<newline46mondego>     if (line.contains(<doubleQuotes46>n.a.<doubleQuotes46>)) {<newline46mondego>       continue;<newline46mondego>     }<newline46mondego><newline46mondego>//Your code<newline46mondego>"
"11844splitHere46","20335053splitHere46","while"
"11845splitHere46","20335053splitHere46","peak name value"
"11846splitHere46","20335053splitHere46","amount value"
"11847splitHere46","20335053splitHere46","Scanner"
"11848splitHere46","20335053splitHere46","BufferedReader"
"11849splitHere46","20335053splitHere46","regex"
"11850splitHere46","20335053splitHere46","while"
"11851splitHere46","20335053splitHere46","sample name"
"11852splitHere46","20335053splitHere46","String#equales()"
"11853splitHere46","20335053splitHere46","Sample Name"
"11854splitHere46","20335053splitHere46","Recording Time"
"11855splitHere46","20335053splitHere46","Peak Name"
"11856splitHere46","20335053splitHere46","amount"
"11857splitHere46","20335053splitHere46","String"
"11858splitHere46","20335053splitHere46","BufferedReader br = new BufferedReader(new FileReader(selectFile.getSelectedFile()));<newline46mondego><newline46mondego>String recTime, peakName, amount, sample ;<newline46mondego>int linesToSkip = 28;<newline46mondego>String line = br.readLine();<newline46mondego><newline46mondego>if(line != null){<newline46mondego>    String[] values = line.split(<doubleQuotes46>\t<doubleQuotes46>);<newline46mondego>    sample = values[1];<newline46mondego>}<newline46mondego><newline46mondego>while ( (line = br.readLine()) != null) {<newline46mondego>    values = line.split(<doubleQuotes46>\t<doubleQuotes46>);<newline46mondego><newline46mondego>    if (line.startsWith(<doubleQuotes46>Sample Name<doubleQuotes46>)) { <newline46mondego>       // Check here value[1] is equal to sample. If this is needed.<newline46mondego>       // You got your sample name here <newline46mondego>    } else if (line.startsWith(<doubleQuotes46>Recording Time<doubleQuotes46>)) { <newline46mondego>       recTime = values[1];<newline46mondego>       // You got your Recording Time here <newline46mondego>    } else if(values.length > 4 ){<newline46mondego>       // get Peak Name and recording time<newline46mondego>       peakName = values[2];<newline46mondego>       amount = values[6];<newline46mondego>    } else if (line.contains(<doubleQuotes46>n.a.<doubleQuotes46>) || line.contains(<doubleQuotes46>Total<doubleQuotes46>) || linesToSkip-- > 0) {<newline46mondego>       /* may not needed linesToSkip-- > 0 in above condition */ <newline46mondego>       continue;<newline46mondego>    } <newline46mondego><newline46mondego>    System.out.println(sample +<doubleQuotes46> ,<doubleQuotes46> + recTime + <doubleQuotes46> ,<doubleQuotes46> + peakName + <doubleQuotes46> ,<doubleQuotes46> + amount);<newline46mondego>}<newline46mondego>"
"11859splitHere46","20335101splitHere46","synchronized"
"11860splitHere46","20335101splitHere46","public class ThreadTest {<newline46mondego><newline46mondego>    private static final long startTime = System.currentTimeMillis();<newline46mondego><newline46mondego>    public static void main(String args[]) {<newline46mondego>        Thread ct = new ChildThread();<newline46mondego>        ThreadTest.print(<doubleQuotes46>starting child threads in MAIN<doubleQuotes46>);<newline46mondego>        ct.start();<newline46mondego>        try {<newline46mondego>            ThreadTest.print(<doubleQuotes46>about to start wait() in MAIN<doubleQuotes46>);<newline46mondego>            synchronized (ct) {<newline46mondego>                ct.wait();<newline46mondego>            }<newline46mondego>            ThreadTest.print(<doubleQuotes46>after wait() in MAIN<doubleQuotes46>);<newline46mondego>        } catch (Exception e) {<newline46mondego>            ThreadTest.print(<doubleQuotes46>Exception in MAIN<doubleQuotes46>);<newline46mondego>        }<newline46mondego>    }<newline46mondego><newline46mondego>    public static void print(String s) {<newline46mondego>        System.out.println(<doubleQuotes46>Millisecond : <doubleQuotes46> + (System.currentTimeMillis() - ThreadTest.startTime) + <doubleQuotes46>\t: <doubleQuotes46> + s);<newline46mondego>    }<newline46mondego><newline46mondego>    private static final class ChildThread extends Thread {<newline46mondego>        public void run() {<newline46mondego>            try {<newline46mondego>                ThreadTest.print(<doubleQuotes46>before thread notifyAll in CHILD<doubleQuotes46>);<newline46mondego>                synchronized (this) {<newline46mondego>                    notifyAll();<newline46mondego>                }<newline46mondego>                ThreadTest.print(<doubleQuotes46>notifyAll over, sleep starts in CHILD<doubleQuotes46>);<newline46mondego>                Thread.sleep(1000);<newline46mondego>                ThreadTest.print(<doubleQuotes46>after thread sleep in CHILD<doubleQuotes46>);<newline46mondego><newline46mondego>            } catch (Exception e) {<newline46mondego>                ThreadTest.print(<doubleQuotes46>Exception in CHILD<doubleQuotes46>);<newline46mondego>            }<newline46mondego>            ThreadTest.print(<doubleQuotes46>End of run method in CHILD<doubleQuotes46>);<newline46mondego>        }<newline46mondego>    }<newline46mondego>}<newline46mondego>"
"11861splitHere46","20335342splitHere46","Multimap"
"11862splitHere46","20335342splitHere46","newListMultimap"
"11863splitHere46","20335342splitHere46","Multimaps"
"11864splitHere46","20335342splitHere46","ListMultimap<Integer, String> mhm = Multimaps.newListMultimap(<newline46mondego>  new TreeMap<Integer, Collection<String>>(),<newline46mondego>  new Supplier<List<String>>() {<newline46mondego>    public List<String> get() {<newline46mondego>      return Lists.newArrayList();<newline46mondego>    }<newline46mondego>  });<newline46mondego>"
"11865splitHere46","20335342splitHere46","TreeMap"
"11866splitHere46","20335342splitHere46","mhm.put(2, <doubleQuotes46>some<doubleQuotes46>);<newline46mondego>mhm.put(1, <doubleQuotes46>value<doubleQuotes46>);<newline46mondego>mhm.put(2, <doubleQuotes46>here<doubleQuotes46>);<newline46mondego>System.out.println(mhm.toString());<newline46mondego>// { 1: [ <doubleQuotes46>value<doubleQuotes46> ], 2: [ <doubleQuotes46>some<doubleQuotes46>, <doubleQuotes46>here<doubleQuotes46> ] }<newline46mondego>"
"11867splitHere46","20335468splitHere46","@XmlSeeAlso(Other.class) to Stuff .<newline46mondego>"
"11868splitHere46","20335619splitHere46","TypeElement.getEnclosedElements()"
"11869splitHere46","20335685splitHere46","public static class Handler implements Runnable {<newline46mondego>    private Socket client;  <newline46mondego>    private UserSession session;<newline46mondego><newline46mondego>    public Handler(Socket client) {<newline46mondego>      this.client = client;<newline46mondego>      this.session = new UserSession();<newline46mondego>    }<newline46mondego> ...<newline46mondego>"
"11870splitHere46","20335685splitHere46","UserSession"
"11871splitHere46","20335685splitHere46","Map<String, Object>"
"11872splitHere46","20335685splitHere46","ThreadLocal"
"11873splitHere46","20335685splitHere46","UserSession"
"11874splitHere46","20335685splitHere46","user=login"
"11875splitHere46","20335685splitHere46","Map<String, UserSession>"
"11876splitHere46","20335693splitHere46","<project><newline46mondego>  ...<newline46mondego>  <build><newline46mondego>    <pluginManagement><newline46mondego>      <plugin><newline46mondego>        <artifactId>maven-javadoc-plugin</artifactId><newline46mondego>        <version>2.9.1</version><newline46mondego>          <executions><newline46mondego>            <execution><newline46mondego>              <id>javadoc-jar</id><newline46mondego>              <phase>none</phase><newline46mondego>              <goals><newline46mondego>                <goal>jar</goal><newline46mondego>              </goals><newline46mondego>              ...<newline46mondego>"
"11877splitHere46","20335693splitHere46","<project><newline46mondego>  ...<newline46mondego>  <build><newline46mondego>    <plugins><newline46mondego>      <plugin><newline46mondego>        <artifactId>maven-javadoc-plugin</artifactId><newline46mondego>        <executions><newline46mondego>          <execution><newline46mondego>            <id>javadoc-jar</id><newline46mondego>            <phase>package</phase><newline46mondego>          </execution><newline46mondego>        </executions><newline46mondego>      </plugin><newline46mondego>      ...<newline46mondego>"
"11878splitHere46","20335742splitHere46","public class DBAccessImpl implements DBAccess {<newline46mondego>    // You will put more stuff here<newline46mondego>}<newline46mondego>"
"11879splitHere46","20335742splitHere46","DBAccess"
"11880splitHere46","20335742splitHere46","public class DBAccessImpl implements DBAccess {<newline46mondego>    public String getReview(String itemID, Date timestamp) {<newline46mondego>         // Your implementation of getReview goes here<newline46mondego>    }<newline46mondego>    // Other methods from DBAccess go here<newline46mondego>}<newline46mondego>"
"11881splitHere46","20336037splitHere46","after () returning (Audible au) : call(public * *.getNew*(..))"
"11882splitHere46","20336069splitHere46","ProcessBuilder"
"11883splitHere46","20336069splitHere46","adb.toString()"
"11884splitHere46","20336069splitHere46","process = new ProcessBuilder(adb.toString(), <doubleQuotes46>reboot<doubleQuotes46>);<newline46mondego>"
"11885splitHere46","20336143splitHere46","int totCharacters=0, vowels=0, digits=0, odds=0, consecutive=0, index=0;<newline46mondego>    String text;<newline46mondego>    char ch;<newline46mondego><newline46mondego>    Scanner input = new Scanner(System.in);<newline46mondego>    System.out.print(<doubleQuotes46>Please enter a sentence terminated with a full stop or exclamation mark: <doubleQuotes46>);<newline46mondego>    text = input.nextLine();<newline46mondego><newline46mondego>    do {<newline46mondego>        ch = text.charAt(index);<newline46mondego><newline46mondego>        if(ch=='.' && ch=='!')<newline46mondego>            break;<newline46mondego><newline46mondego>        if(index<text.length()-1)<newline46mondego>            totCharacters++;<newline46mondego>        if(ch=='a' || ch=='e' || ch=='i' || ch=='o' || ch=='u')<newline46mondego>            vowels++;<newline46mondego>        if(ch>='0' && ch<='9')<newline46mondego>            digits++;<newline46mondego>        if(ch=='1' || ch=='3' || ch=='5' || ch=='7' || ch=='9')<newline46mondego>            odds++;<newline46mondego><newline46mondego><newline46mondego>    for(int i=index; i<text.length(); i++)<newline46mondego>        {<newline46mondego><newline46mondego>             if(ch==text.charAt(i))<newline46mondego>             {<newline46mondego>                consecutive++;<newline46mondego>             }<newline46mondego>             else <newline46mondego>             {<newline46mondego>                 break;<newline46mondego>             }<newline46mondego><newline46mondego>        }<newline46mondego>        index++;<newline46mondego>        }while(ch!= '.' && ch!='!');<newline46mondego>"
"11886splitHere46","20336188splitHere46","List<String> bestFundraisers(String[] names, double[] totals) {<newline46mondego>    final List<String> winners = new ArrayList<>();<newline46mondego>    final int n = names.length;<newline46mondego>    // optional: throw an exception if totals.length != n<newline46mondego>    double max = Double.NEGATIVE_INFINITY;<newline46mondego>    for (int i = 0; i < n; ++i) {<newline46mondego>        double raised = totals[i];<newline46mondego>        if (raised >= max) [<newline46mondego>            if (raised > max) {<newline46mondego>                winners.clear();<newline46mondego>                max = raised;<newline46mondego>            }<newline46mondego>            winners.add(names[i]);<newline46mondego>        }<newline46mondego>    }<newline46mondego>    return winners;<newline46mondego>}<newline46mondego>"
"11887splitHere46","20336221splitHere46","boolean canAdd(Integer value) {<newline46mondego>  Node current = this.node;<newline46mondego>  while (current !=null) {<newline46mondego>    if (current.value.equals(value)) {<newline46mondego>      return false;<newline46mondego>    }<newline46mondego>    current = current.next;<newline46mondego>  }<newline46mondego>  return true;<newline46mondego>}<newline46mondego>"
"11888splitHere46","20336221splitHere46","add()"
"11889splitHere46","20336267splitHere46","classLoader"
"11890splitHere46","20336267splitHere46","Thread.currentThread().getContextClassLoader()"
"11891splitHere46","20336466splitHere46","getResources"
"11892splitHere46","20336466splitHere46","public SetRows(Context currentContext,int image, String name, String id) {<newline46mondego><newline46mondego>        super();<newline46mondego><newline46mondego>        this.image = image;<newline46mondego>        this.name = Html.fromHtml(currentContext.getResources().getString(R.string.colorcol)) + <doubleQuotes46> COLOR: \n\t<doubleQuotes46> + name;<newline46mondego>        this.id = <doubleQuotes46>MEANS: \n\t<doubleQuotes46> +  id;<newline46mondego>    }<newline46mondego>"
"11893splitHere46","20336466splitHere46","contents.add(new SetRows(this,inIconShow, sColor, sExplain)); <newline46mondego>"
"11894splitHere46","20336689splitHere46","2^values.length = 64"
"11895splitHere46","20336689splitHere46","public static void main(String[] args) {<newline46mondego>    int[] values = { 1, 1, 3, 5, 6, 7 };<newline46mondego>    int target = 8;<newline46mondego><newline46mondego>    for (int i = 0; i < (int) Math.pow(2, values.length); i++) {<newline46mondego>        boolean[] bitmap = createBitmap(i, values.length);<newline46mondego>        int result = calculateResult(values, bitmap);<newline46mondego>        if (result == target) {<newline46mondego>            System.out.printf(<doubleQuotes46>%s = %d\n<doubleQuotes46>, <newline46mondego>                getSumString(values, bitmap),<newline46mondego>                result);<newline46mondego>        }<newline46mondego>    }<newline46mondego>}<newline46mondego><newline46mondego>private static boolean[] createBitmap(int value, int arrayLength) {<newline46mondego>    boolean[] bits = new boolean[arrayLength];<newline46mondego><newline46mondego>    int actual;<newline46mondego>    for (int i = bits.length - 1; i >= 0; i--) {<newline46mondego>        actual = getValue(bits);<newline46mondego>        if (actual == value)<newline46mondego>            break;<newline46mondego>        else if (actual + (int) Math.pow(2, i) <= value)<newline46mondego>            bits[i] = true;<newline46mondego>    }<newline46mondego><newline46mondego>    return bits;<newline46mondego>}<newline46mondego><newline46mondego>private static int getValue(boolean[] bits) {<newline46mondego>    int value = 0;<newline46mondego>    for (int i = bits.length - 1; i >= 0; i--)<newline46mondego>        if (bits[i])<newline46mondego>            value += (int) Math.pow(2, i);<newline46mondego><newline46mondego>    return value;<newline46mondego>}<newline46mondego><newline46mondego>private static int calculateResult(final int[] values, boolean[] used) {<newline46mondego>    int sum = 0;<newline46mondego>    for (int i = 0; i < used.length; i++)<newline46mondego>        if (used[i])<newline46mondego>            sum += values[i];<newline46mondego>    return sum;<newline46mondego>}<newline46mondego><newline46mondego>private static String getSumString(int[] values, boolean[] used) {<newline46mondego>    String sumString = <doubleQuotes46><doubleQuotes46>;<newline46mondego>    for (int i = 0; i < used.length; i++)<newline46mondego>        if (used[i])<newline46mondego>            sumString += values[i] + <doubleQuotes46> <doubleQuotes46>;<newline46mondego>    return sumString;<newline46mondego>}<newline46mondego>"
"11896splitHere46","20336689splitHere46","main()"
"11897splitHere46","20336715splitHere46","i"
"11898splitHere46","20336715splitHere46","bookArray[i] = new loanDocumenry("
"11899splitHere46","20336715splitHere46","bookArray[0]"
"11900splitHere46","20336715splitHere46","bookArray[1]"
"11901splitHere46","20336715splitHere46","bookArray[2]"
"11902splitHere46","20336715splitHere46","bookArray[3]"
"11903splitHere46","20336715splitHere46","bookArray[4]"
"11904splitHere46","20336808splitHere46","accept"
"11905splitHere46","20336808splitHere46","connect"
"11906splitHere46","20336808splitHere46","ServerSocket serverSocket = new ServerSocket(portNumber);<newline46mondego>    Socket fromClientSocket = serverSocket.accept();<newline46mondego>"
"11907splitHere46","20336808splitHere46","fromClientSocket"
"11908splitHere46","20336808splitHere46","getRemoteSocketAddress()"
"11909splitHere46","20336808splitHere46","Socket toServerSocket = new Socket(hostName, portNumber)<newline46mondego>"
"11910splitHere46","20336808splitHere46","netstat"
"11911splitHere46","20336808splitHere46","netstat -nap"
"11912splitHere46","20336809splitHere46","JSONArray mArray = new JSONArray(myString);<newline46mondego>int id_count = 0;<newline46mondego>int devices_count = 0;<newline46mondego>int tmp = 0;<newline46mondego><newline46mondego>for (int i = 0; i<mArray.length(); i++) {<newline46mondego>    try {<newline46mondego>        tmp = mArray.getJSONObject(i).getInt(<doubleQuotes46>id<doubleQuotes46>);<newline46mondego>        id_count = id_count + 1;<newline46mondego>    }<newline46mondego>    catch (JSONException e) {<newline46mondego>        // If id doesn't exist, this exception is thrown<newline46mondego>    }  <newline46mondego>    try {<newline46mondego>        tmp = mArray.getJSONObject(i).getInt(<doubleQuotes46>number_of_devices<doubleQuotes46>);<newline46mondego>        devices_count = devices_count + 1;<newline46mondego>    }<newline46mondego>    catch (JSONException e) {<newline46mondego>        // If number_of_devices doesn't exist, this exception is thrown<newline46mondego>    }    <newline46mondego>}<newline46mondego><newline46mondego>myTextView1.text = String.ValueOf(id_count);<newline46mondego>myTextView2.text = String.ValueOf(devices_count);<newline46mondego>"
"11913splitHere46","20336845splitHere46","JFrame f = new JFrame(<doubleQuotes46>The title<doubleQuotes46>);<newline46mondego>GridSupport g = new GridSupport();<newline46mondego>f.add(g)<newline46mondego>f.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);<newline46mondego>f.setSize(500,400);<newline46mondego>f.setResizable(false);<newline46mondego>f.setVisible(true);<newline46mondego>"
"11914splitHere46","20336845splitHere46","GridSupprt"
"11915splitHere46","20336845splitHere46","public class GridSupport extends JPanel{<newline46mondego><newline46mondego>    private JButton b;<newline46mondego><newline46mondego>    public GridSupport(){<newline46mondego><newline46mondego>        setBackground(Color.GREEN);<newline46mondego>        setSize(100, 100);<newline46mondego><newline46mondego>        b = new JButton(<doubleQuotes46>Click me!<doubleQuotes46>);<newline46mondego>        add(b);<newline46mondego><newline46mondego>    }<newline46mondego>}<newline46mondego>"
"11916splitHere46","20337023splitHere46","import java.awt.*;<newline46mondego>import javax.swing.*;<newline46mondego>import java.awt.event.*;<newline46mondego>import java.applet.Applet;<newline46mondego>import javax.swing.SwingUtilities;<newline46mondego>import java.awt.event.MouseListener;<newline46mondego>import java.awt.event.MouseEvent;<newline46mondego><newline46mondego>public class Minesweeper extends Applet implements MouseListener{<newline46mondego>// initializing all data types<newline46mondego>JButton[] a; // The grid boxes<newline46mondego>int counter = 1; // Obsolete<newline46mondego>char[] letter; // Array of mine locations<newline46mondego>int[] numbers; // Array of numbers; values and locations<newline46mondego>boolean explode = false;<newline46mondego>String name1;<newline46mondego>String name2;<newline46mondego>int mines;<newline46mondego><newline46mondego><newline46mondego>public void init() {<newline46mondego>    // The code below initializes and locates the grid<newline46mondego>    a = new JButton[100];<newline46mondego>    setLayout(new GridLayout(10, 10));<newline46mondego>    // The code below fills the grid with buttons that can be clicked<newline46mondego><newline46mondego>    for (int counter = 0; counter < 100; counter++) {<newline46mondego>        a[counter] = new JButton();<newline46mondego>        a[counter].setText(<doubleQuotes46> <doubleQuotes46>);<newline46mondego>        a[counter].setBackground(Color.white);<newline46mondego>        a[counter].addMouseListener(this);<newline46mondego>        add(a[counter]);<newline46mondego>    }<newline46mondego>            numbers = new int[100];<newline46mondego>    letter = new char[100];<newline46mondego>    for (counter = 0; counter < 10; counter++) {<newline46mondego>        mines = (int) (Math.random() * 100); <newline46mondego>        if (letter[mines] == '*') {<newline46mondego>            counter--;<newline46mondego>        } else {<newline46mondego>            letter[mines] = '*';<newline46mondego>        }<newline46mondego>    } <newline46mondego><newline46mondego>    for (counter = 0; counter < 100; counter++) {<newline46mondego>        numbers[counter] = 0;<newline46mondego>    }<newline46mondego><newline46mondego>    for (int search = 0; search < 10; search++) {<newline46mondego>        for (int searchb = 0; searchb < 10; searchb++) {<newline46mondego>            if (letter[search * 10 + searchb] == '*') {<newline46mondego>                if (search != 0) {<newline46mondego>                    numbers[((search - 1) * 10) + searchb]++;<newline46mondego>                }<newline46mondego>                if (search != 9) {<newline46mondego>                    numbers[((search + 1) * 10) + searchb]++;<newline46mondego>                }<newline46mondego>                if (searchb != 0) {<newline46mondego>                    numbers[((search * 10) + searchb) - 1]++;<newline46mondego>                }<newline46mondego>                if (searchb != 9) {<newline46mondego>                    numbers[((search * 10) + searchb) + 1]++;<newline46mondego>                }<newline46mondego>                if ((search != 0) && (searchb != 0)) {<newline46mondego>                    numbers[(((search - 1) * 10) + searchb) - 1]++;<newline46mondego>                }<newline46mondego>                if ((search != 9) && (searchb != 9)) {<newline46mondego>                    numbers[(((search + 1) * 10) + searchb) + 1]++;<newline46mondego>                }<newline46mondego>                if ((search != 0) && (searchb != 9)) {<newline46mondego>                    numbers[(((search - 1) * 10) + searchb) + 1]++;<newline46mondego>                }<newline46mondego>                if ((search != 9) && (searchb != 0)) {<newline46mondego>                    numbers[(((search + 1) * 10) + searchb) - 1]++;<newline46mondego>                }<newline46mondego><newline46mondego>            }<newline46mondego><newline46mondego>        }<newline46mondego><newline46mondego>    }<newline46mondego>    for (int counter = 0; counter < 100; counter++) {<newline46mondego>        if(letter[counter]!= '*')<newline46mondego>        letter[counter] = (char) ('0' + numbers[counter]);<newline46mondego>    }<newline46mondego>}<newline46mondego><newline46mondego><newline46mondego>@Override<newline46mondego>public void mouseClicked(MouseEvent e) {<newline46mondego>    // TODO Auto-generated method stub<newline46mondego><newline46mondego>}<newline46mondego><newline46mondego><newline46mondego>@Override<newline46mondego>public void mousePressed(MouseEvent e) {<newline46mondego>    // TODO Auto-generated method stub<newline46mondego><newline46mondego>}<newline46mondego><newline46mondego><newline46mondego>@Override<newline46mondego>public void mouseReleased(MouseEvent e) {<newline46mondego>    // TODO Auto-generated method stub<newline46mondego><newline46mondego>}<newline46mondego><newline46mondego><newline46mondego>@Override<newline46mondego>public void mouseEntered(MouseEvent e) {<newline46mondego>    // TODO Auto-generated method stub<newline46mondego><newline46mondego>}<newline46mondego><newline46mondego><newline46mondego>@Override<newline46mondego>public void mouseExited(MouseEvent e) {<newline46mondego>    // TODO Auto-generated method stub<newline46mondego><newline46mondego>}<newline46mondego><newline46mondego>}<newline46mondego>"
"11917splitHere46","20337025splitHere46","boolean"
"11918splitHere46","20337025splitHere46","if"
"11919splitHere46","20337025splitHere46","public boolean Winner() {<newline46mondego>    for (int z = 0; z < 3; z++) {<newline46mondego>            if (board[z] != null && board[z] == board[z+3] && board[z] == board[z+6]<newline46mondego>                    ) {<newline46mondego>                return true;<newline46mondego>            } <newline46mondego>    }<newline46mondego>    for(int i=0; i<7;i+=3){<newline46mondego>        if (board[i] != null && board[i] == board[i+1] && board[i] == board[i+2]) {<newline46mondego><newline46mondego>    return true;}<newline46mondego>    }<newline46mondego><newline46mondego>    return false;<newline46mondego>}<newline46mondego>"
"11920splitHere46","20337051splitHere46","ObjectOutputStream"
"11921splitHere46","20337055splitHere46","@Test(expected = MyException.class)<newline46mondego>public void testMethod2() throws MyException {<newline46mondego>    u.method2(9);<newline46mondego>}<newline46mondego>"
"11922splitHere46","20337057splitHere46","visited[i][j]"
"11923splitHere46","20337057splitHere46","visited"
"11924splitHere46","20337057splitHere46","board"
"11925splitHere46","20337057splitHere46","!hasQueen"
"11926splitHere46","20337057splitHere46","board[row][col]"
"11927splitHere46","20337119splitHere46","ObjectOutputStream"
"11928splitHere46","20337119splitHere46","Alunno"
"11929splitHere46","20337119splitHere46","ObjectInputStream"
"11930splitHere46","20337119splitHere46","ObjectInputStream"
"11931splitHere46","20337119splitHere46","Alunno"
"11932splitHere46","20337119splitHere46","File"
"11933splitHere46","20337119splitHere46","public void leggiFile() {<newline46mondego>    Alunno a;<newline46mondego>    try {<newline46mondego>        FileInputStream f = new FileInputStream(<doubleQuotes46>istituto.dat<doubleQuotes46>);<newline46mondego>        try {<newline46mondego>            while (true) {<newline46mondego>                // the header is read in the constructor<newline46mondego>                ObjectInputStream fIN = new ObjectInputStream(f);<newline46mondego>                a = (Alunno) fIN.readObject();<newline46mondego>                dim++;<newline46mondego>                System.out.println(<doubleQuotes46>Dimensione file: <doubleQuotes46> + dim);<newline46mondego>            }<newline46mondego>        } catch (EOFException e) { }<newline46mondego>        f.close();<newline46mondego>    } catch (Exception e) {<newline46mondego>        System.out.println(<doubleQuotes46>Eccezione lettura: <doubleQuotes46> + e.getMessage());<newline46mondego>    }<newline46mondego>}<newline46mondego>"
"11934splitHere46","20337119splitHere46","FileInputStream"
"11935splitHere46","20337119splitHere46","Alunno"
"11936splitHere46","20337119splitHere46","Alunno"
"11937splitHere46","20337488splitHere46","PrintWriter"
"11938splitHere46","20337488splitHere46","Writer"
"11939splitHere46","20337488splitHere46","append"
"11940splitHere46","20337488splitHere46","write"
"11941splitHere46","20337488splitHere46","print"
"11942splitHere46","20337488splitHere46","Reader"
"11943splitHere46","20337488splitHere46","BufferedReader"
"11944splitHere46","20337488splitHere46","seek"
"11945splitHere46","20337520splitHere46","// This method is called immediately after the object is created and before the unmarshalling of this <newline46mondego>   // object begins. The callback provides an opportunity to initialize JavaBean properties prior to unmarshalling.<newline46mondego>   void beforeUnmarshal(Unmarshaller, Object parent);<newline46mondego><newline46mondego>   //This method is called after all the properties (except IDREF) are unmarshalled for this object, <newline46mondego>   //but before this object is set to the parent object.<newline46mondego>   void afterUnmarshal(Unmarshaller, Object parent);<newline46mondego>"
"11946splitHere46","20337534splitHere46","wait()"
"11947splitHere46","20337534splitHere46","synchronized"
"11948splitHere46","20337534splitHere46","synchronized (targetW)"
"11949splitHere46","20337534splitHere46","targetW.wait()"
"11950splitHere46","20337550splitHere46","/etc/key/master"
"11951splitHere46","20337634splitHere46","createWindow"
"11952splitHere46","20337634splitHere46","ControlWindow.createWindow();<newline46mondego>"
"11953splitHere46","20337771splitHere46","close()"
"11954splitHere46","20337771splitHere46","PrintWriter"
"11955splitHere46","20337771splitHere46","...<newline46mondego>while(inputFile.hasNext())<newline46mondego>{<newline46mondego>     outputFile.println();<newline46mondego>}<newline46mondego><newline46mondego>ouputFile.close();<newline46mondego>"
"11956splitHere46","20337771splitHere46","Scanner keyboard = new Scanner(System.in);<newline46mondego><newline46mondego>System.out.println(<doubleQuotes46>Enter the filename for the first file<doubleQuotes46>);<newline46mondego>String filename = keyboard.nextLine();<newline46mondego>File file = new File(filename);                  // file 1<newline46mondego>Scanner inputFile = new Scanner (file);          // infile<newline46mondego><newline46mondego>System.out.print(<doubleQuotes46>Enter the filename <doubleQuotes46><newline46mondego>        + <doubleQuotes46>for the second file<doubleQuotes46>);<newline46mondego>filename = keyboard.nextLine();<newline46mondego>File file1 = new File(filename);                 // file 2<newline46mondego>PrintWriter outputFile = new PrintWriter(file1); // outfile<newline46mondego><newline46mondego>while(inputFile.hasNext())<newline46mondego>{<newline46mondego>    String fileinfo = inputFile.nextLine();<newline46mondego>    String uppercaseinfo1 = fileinfo.toUpperCase();<newline46mondego>    outputFile.println(uppercaeinfo1);<newline46mondego>}<newline46mondego><newline46mondego>outputFile.close();<newline46mondego>"
"11957splitHere46","20337911splitHere46","are not"
"11958splitHere46","20337911splitHere46","overriden"
"11959splitHere46","20337911splitHere46","f.a"
"11960splitHere46","20337911splitHere46","a"
"11961splitHere46","20337911splitHere46","f"
"11962splitHere46","20337911splitHere46","Foo"
"11963splitHere46","20337911splitHere46","f.addFive()"
"11964splitHere46","20337911splitHere46","Bar"
"11965splitHere46","20337911splitHere46","f"
"11966splitHere46","20337911splitHere46","Bar"
"11967splitHere46","20337911splitHere46","Bar b = new Bar();<newline46mondego>Foo f = b;<newline46mondego>f.addFive();<newline46mondego>System.out.println(f.a); // prints 3<newline46mondego>System.out.println(b.a); // prints 13 as you have expected<newline46mondego>"
"11968splitHere46","20337975splitHere46","Object source = e.getSource();<newline46mondego>"
"11969splitHere46","20337975splitHere46","JLabel enteredLabel = (JLabel).getSource();<newline46mondego>enteredLabel.doSomething(...)<newline46mondego>"
"11970splitHere46","20338232splitHere46","saveUser(user)"
"11971splitHere46","20338232splitHere46","findUserById()"
"11972splitHere46","20338232splitHere46","saveUser()"
"11973splitHere46","20338232splitHere46","@Transactional"
"11974splitHere46","20338232splitHere46","Isolation.DEFAULT"
"11975splitHere46","20338232splitHere46","saveUser(user)"
"11976splitHere46","20338232splitHere46","@Transactional(isolation = Isolation.READ_COMMITTED)<newline46mondego>"
"11977splitHere46","20338232splitHere46","StaleObjectStateException"
"11978splitHere46","20338274splitHere46","/A/b/c/@id"
"11979splitHere46","20338274splitHere46","id"
"11980splitHere46","20338274splitHere46","/A/b/c/@id/number()"
"11981splitHere46","20338274splitHere46","/A/b/c/@id/xs:integer(.)"
"11982splitHere46","20338412splitHere46","String foo = <doubleQuotes46>This is \<doubleQuotes46>foo\<doubleQuotes46> String<doubleQuotes46>.<newline46mondego>"
"11983splitHere46","20338412splitHere46","getText()"
"11984splitHere46","20338412splitHere46","public static String getSettings() {<newline46mondego>  String input = JOptionPane.showInputDialog(null, <doubleQuotes46>Class: <doubleQuotes46>,<newline46mondego>        <doubleQuotes46>Insert Settings<doubleQuotes46>, JOptionPane.QUESTION_MESSAGE);<newline46mondego><newline46mondego>  return String.format(<doubleQuotes46>class=\<doubleQuotes46>%s\<doubleQuotes46><doubleQuotes46>, input);<newline46mondego>}<newline46mondego>"
"11985splitHere46","20338456splitHere46","if String[0].equals(<doubleQuotes46>true<doubleQuotes46>)"
"11986splitHere46","20338456splitHere46","public static boolean fieldMatches(String line, int fieldIndex, String other) {<newline46mondego>    int currentField = 0;<newline46mondego>    int startIndex = 0;<newline46mondego>    while (currentField < fieldIndex) {<newline46mondego>        startIndex = line.indexOf('|', startIndex);<newline46mondego><newline46mondego>        // not enough fields<newline46mondego>        if (startIndex < 0)<newline46mondego>            return false;<newline46mondego><newline46mondego>        startIndex++;<newline46mondego>        currentField++;<newline46mondego>    }<newline46mondego><newline46mondego>    int start = startIndex;<newline46mondego>    int end = line.indexOf('|', startIndex);<newline46mondego>    if (end == -1) {<newline46mondego>        end = line.length();<newline46mondego>    }<newline46mondego>    int fieldLength = end - start;<newline46mondego><newline46mondego>    // make sure both strings have the same length<newline46mondego>    if (fieldLength != other.length())<newline46mondego>        return false;<newline46mondego><newline46mondego>    // regionMatches does not allocate objects<newline46mondego>    return line.regionMatches(start, other, 0, fieldLength);<newline46mondego>}<newline46mondego><newline46mondego>public static void main(String[] args) {<newline46mondego>    String line = <doubleQuotes46>Config|true<doubleQuotes46>; // from BufferedReader<newline46mondego>    System.out.println(fieldMatches(line, 0, <doubleQuotes46>Config<doubleQuotes46>));<newline46mondego>    System.out.println(fieldMatches(line, 1, <doubleQuotes46>true<doubleQuotes46>));<newline46mondego>    System.out.println(fieldMatches(line, 1, <doubleQuotes46>foobar<doubleQuotes46>));<newline46mondego>    System.out.println(fieldMatches(line, 2, <doubleQuotes46>thereisnofield<doubleQuotes46>));<newline46mondego>}<newline46mondego>"
"11987splitHere46","20338456splitHere46","true<newline46mondego>true<newline46mondego>false<newline46mondego>false<newline46mondego>"
"11988splitHere46","20338480splitHere46","line.toLowerCase() == b.toLowerCase()<newline46mondego>"
"11989splitHere46","20338480splitHere46","line.equalsIgnoreCase(b)<newline46mondego>"
"11990splitHere46","20338495splitHere46","nextfree"
"11991splitHere46","20338495splitHere46","0"
"11992splitHere46","20338495splitHere46","0"
"11993splitHere46","20338495splitHere46","nextfree - 1"
"11994splitHere46","20338495splitHere46","for (int i = nextfree - 1; i >=0 ; i--) <newline46mondego>"
"11995splitHere46","20338530splitHere46","nextLine()"
"11996splitHere46","20338530splitHere46","123"
"11997splitHere46","20338530splitHere46","[1] [2] [3] [\n]<newline46mondego>"
"11998splitHere46","20338530splitHere46","scan.nextInt()"
"11999splitHere46","20338530splitHere46","[\n]"
"12000splitHere46","20338530splitHere46","scan.nextLine()"
"12001splitHere46","20338530splitHere46","\n"
"12002splitHere46","20338530splitHere46","scan.nextLine()"
"12003splitHere46","20338530splitHere46","equals()"
"12004splitHere46","20338530splitHere46","if (fc1.equals(<doubleQuotes46>A<doubleQuotes46>))<newline46mondego>"
"12005splitHere46","20338530splitHere46","if (fc1 == <doubleQuotes46>A<doubleQuotes46>) // <<== This will not work correctly<newline46mondego>"
