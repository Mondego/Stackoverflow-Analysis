"1splitHere46","384splitHere46","object"
"2splitHere46","384splitHere46","List<String>"
"3splitHere46","384splitHere46","ClassCastException"
"4splitHere46","384splitHere46","List<?> list = (List<?>) object;<newline46mondego>"
"5splitHere46","384splitHere46","SuppressWarning"
"6splitHere46","566splitHere46","System.Int32"
"7splitHere46","2245splitHere46","enableInputMethods(true);   <newline46mondego>addMouseListener(this);<newline46mondego>"
"8splitHere46","2245splitHere46","public Dimension getPreferredSize()  <newline46mondego>public Dimension getMinimumSize()  <newline46mondego>public Dimension getMaximumSize()<newline46mondego>"
"9splitHere46","2245splitHere46","public void paintComponent(Graphics g)<newline46mondego>"
"10splitHere46","3886splitHere46","IllegalArgumentException"
"11splitHere46","3886splitHere46","NullPointerException"
"12splitHere46","4247splitHere46","myInt"
"13splitHere46","4247splitHere46","Integer.toString(myInt);<newline46mondego>"
"14splitHere46","4902splitHere46","<?xml version=<doubleQuotes46>1.0<doubleQuotes46>?><newline46mondego><project name=<doubleQuotes46>project<doubleQuotes46> default=<doubleQuotes46>wasListApps<doubleQuotes46> basedir=<doubleQuotes46>.<doubleQuotes46>><newline46mondego>    <description><newline46mondego>        Script for listing installed apps.<newline46mondego>        Example run from:<newline46mondego>        /opt/IBM/SDP70/runtimes/base_v61/profiles/AppSrv01/bin<newline46mondego>    </description><newline46mondego><newline46mondego>    <property name=<doubleQuotes46>was_home<doubleQuotes46><newline46mondego>        value=<doubleQuotes46>/opt/IBM/SDP70/runtimes/base_v61/<doubleQuotes46>><newline46mondego>    </property><newline46mondego>    <path id=<doubleQuotes46>was.runtime<doubleQuotes46>><newline46mondego>        <fileset dir=<doubleQuotes46>${was_home}/lib<doubleQuotes46>><newline46mondego>            <include name=<doubleQuotes46>**/*.jar<doubleQuotes46> /><newline46mondego>        </fileset><newline46mondego>        <fileset dir=<doubleQuotes46>${was_home}/plugins<doubleQuotes46>><newline46mondego>            <include name=<doubleQuotes46>**/*.jar<doubleQuotes46> /><newline46mondego>        </fileset><newline46mondego>    </path><newline46mondego>    <property name=<doubleQuotes46>was_cp<doubleQuotes46> value=<doubleQuotes46>${toString:was.runtime}<doubleQuotes46>></property><newline46mondego>    <property environment=<doubleQuotes46>env<doubleQuotes46>></property><newline46mondego><newline46mondego>    <target name=<doubleQuotes46>wasListApps<doubleQuotes46>><newline46mondego>        <taskdef name=<doubleQuotes46>wsListApp<doubleQuotes46><newline46mondego>            classname=<doubleQuotes46>com.ibm.websphere.ant.tasks.ListApplications<doubleQuotes46><newline46mondego>            classpath=<doubleQuotes46>${was_cp}<doubleQuotes46>><newline46mondego>        </taskdef><newline46mondego>        <wsListApp wasHome=<doubleQuotes46>${was_home}<doubleQuotes46> /><newline46mondego>    </target><newline46mondego><newline46mondego></project><newline46mondego>"
"15splitHere46","4902splitHere46","./ws_ant.sh -buildfile ~/IBM/rationalsdp7.0/workspace/mywebappDeploy/applist.xml<newline46mondego>"
"16splitHere46","4902splitHere46","<?xml version=<doubleQuotes46>1.0<doubleQuotes46>?><newline46mondego><project name=<doubleQuotes46>project<doubleQuotes46> default=<doubleQuotes46>default<doubleQuotes46> basedir=<doubleQuotes46>.<doubleQuotes46>><newline46mondego><description><newline46mondego>Build/Deploy an EAR to WebSphere Application Server 6.1<newline46mondego></description><newline46mondego><newline46mondego>    <property name=<doubleQuotes46>was_home<doubleQuotes46> value=<doubleQuotes46>/opt/IBM/SDP70/runtimes/base_v61/<doubleQuotes46> /><newline46mondego>    <path id=<doubleQuotes46>was.runtime<doubleQuotes46>><newline46mondego>        <fileset dir=<doubleQuotes46>${was_home}/lib<doubleQuotes46>><newline46mondego>            <include name=<doubleQuotes46>**/*.jar<doubleQuotes46> /><newline46mondego>        </fileset><newline46mondego>        <fileset dir=<doubleQuotes46>${was_home}/plugins<doubleQuotes46>><newline46mondego>            <include name=<doubleQuotes46>**/*.jar<doubleQuotes46> /><newline46mondego>        </fileset><newline46mondego>    </path><newline46mondego>    <property name=<doubleQuotes46>was_cp<doubleQuotes46> value=<doubleQuotes46>${toString:was.runtime}<doubleQuotes46> /><newline46mondego>    <property environment=<doubleQuotes46>env<doubleQuotes46> /><newline46mondego>    <property name=<doubleQuotes46>ear<doubleQuotes46> value=<doubleQuotes46>${env.HOME}/IBM/rationalsdp7.0/workspace/mywebappDeploy/mywebappEAR.ear<doubleQuotes46> /><newline46mondego><newline46mondego>    <target name=<doubleQuotes46>default<doubleQuotes46> depends=<doubleQuotes46>deployEar<doubleQuotes46>><newline46mondego>    </target><newline46mondego><newline46mondego>    <target name=<doubleQuotes46>generateWar<doubleQuotes46> depends=<doubleQuotes46>compileWarClasses<doubleQuotes46>><newline46mondego>        <jar destfile=<doubleQuotes46>mywebapp.war<doubleQuotes46>><newline46mondego>            <fileset dir=<doubleQuotes46>../mywebapp/WebContent<doubleQuotes46>><newline46mondego>            </fileset><newline46mondego>        </jar><newline46mondego>    </target><newline46mondego><newline46mondego>    <target name=<doubleQuotes46>compileWarClasses<doubleQuotes46>><newline46mondego>        <echo message=<doubleQuotes46>was_cp=${was_cp}<doubleQuotes46> /><newline46mondego>        <javac srcdir=<doubleQuotes46>../mywebapp/src<doubleQuotes46> destdir=<doubleQuotes46>../mywebapp/WebContent/WEB-INF/classes<doubleQuotes46> classpath=<doubleQuotes46>${was_cp}<doubleQuotes46>><newline46mondego>        </javac><newline46mondego>    </target><newline46mondego><newline46mondego>    <target name=<doubleQuotes46>generateEar<doubleQuotes46> depends=<doubleQuotes46>generateWar<doubleQuotes46>><newline46mondego>        <mkdir dir=<doubleQuotes46>./earbin/META-INF<doubleQuotes46>/><newline46mondego>        <move file=<doubleQuotes46>mywebapp.war<doubleQuotes46> todir=<doubleQuotes46>./earbin<doubleQuotes46> /><newline46mondego>        <copy file=<doubleQuotes46>../mywebappEAR/META-INF/application.xml<doubleQuotes46> todir=<doubleQuotes46>./earbin/META-INF<doubleQuotes46> /><newline46mondego>        <jar destfile=<doubleQuotes46>${ear}<doubleQuotes46>><newline46mondego>            <fileset dir=<doubleQuotes46>./earbin<doubleQuotes46> /><newline46mondego>        </jar><newline46mondego>    </target><newline46mondego><newline46mondego>    <!-- http://publib.boulder.ibm.com/infocenter/wasinfo/v6r1/index.jsp?topic=/com.ibm.websphere.javadoc.doc/public_html/api/com/ibm/websphere/ant/tasks/package-summary.html --><newline46mondego>    <target name=<doubleQuotes46>deployEar<doubleQuotes46> depends=<doubleQuotes46>generateEar<doubleQuotes46>><newline46mondego>        <taskdef name=<doubleQuotes46>wsInstallApp<doubleQuotes46> classname=<doubleQuotes46>com.ibm.websphere.ant.tasks.InstallApplication<doubleQuotes46> classpath=<doubleQuotes46>${was_cp}<doubleQuotes46>/><newline46mondego>        <wsInstallApp ear=<doubleQuotes46>${ear}<doubleQuotes46> <newline46mondego>            failonerror=<doubleQuotes46>true<doubleQuotes46> <newline46mondego>            debug=<doubleQuotes46>true<doubleQuotes46> <newline46mondego>            taskname=<doubleQuotes46><doubleQuotes46><newline46mondego>            washome=<doubleQuotes46>${was_home}<doubleQuotes46> /><newline46mondego>    </target><newline46mondego><newline46mondego></project><newline46mondego>"
"17splitHere46","5091splitHere46","public static void main(java.lang.String[]);<newline46mondego>  Code:<newline46mondego>   0:   iconst_ 5<newline46mondego>   1:   istore_ 1<newline46mondego>   2:   iload_ 1<newline46mondego>   3:   i2l<newline46mondego>   4:   invokestatic    #6; //Method hello:(J)V<newline46mondego>   7:   return<newline46mondego><newline46mondego>}<newline46mondego>"
"18splitHere46","5091splitHere46","public static void main(java.lang.String[]);<newline46mondego>  Code:<newline46mondego>   0:   iconst_ 5<newline46mondego>   1:   istore_ 1<newline46mondego>   2:   iload_ 1<newline46mondego>   3:   invokestatic    #6; //Method java/lang/Integer.valueOf:(I)Ljava/lang/Integer;<newline46mondego>   6:   invokestatic    #7; //Method hello:(Ljava/lang/Integer;)V<newline46mondego>   9:   return<newline46mondego><newline46mondego>}<newline46mondego>"
"19splitHere46","5224splitHere46","HttpServletRequest"
"20splitHere46","5224splitHere46","getParameter(String paramName)"
"21splitHere46","5351splitHere46","public ClassName(...) : base(...)<newline46mondego>"
"22splitHere46","6496splitHere46","# sudo cp /etc/localtime /etc/localtime.dist<newline46mondego># sudo ln -fs /usr/share/zoneinfo/America/Los_Angeles /etc/localtime<newline46mondego>"
"23splitHere46","7561splitHere46","BigDecimal.round()"
"24splitHere46","7561splitHere46","BigDecimal"
"25splitHere46","7561splitHere46","MathContext"
"26splitHere46","7561splitHere46","MathContext"
"27splitHere46","7561splitHere46","RoundingMode"
"28splitHere46","7561splitHere46","123"
"29splitHere46","7561splitHere46","120"
"30splitHere46","7561splitHere46","123"
"31splitHere46","7561splitHere46","1.23e2"
"32splitHere46","7561splitHere46","1.2e2"
"33splitHere46","7561splitHere46","120"
"34splitHere46","7561splitHere46","RoundingMode"
"35splitHere46","7561splitHere46","123"
"36splitHere46","7561splitHere46","RoundingMode"
"37splitHere46","7561splitHere46","HALF_UP"
"38splitHere46","7561splitHere46","123"
"39splitHere46","7561splitHere46","120"
"40splitHere46","7561splitHere46","RoundingMode"
"41splitHere46","7561splitHere46","CEILING"
"42splitHere46","7561splitHere46","130"
"43splitHere46","7561splitHere46","System.out.println(new BigDecimal(<doubleQuotes46>123.4<doubleQuotes46>,<newline46mondego>                   new MathContext(4,RoundingMode.HALF_UP)));<newline46mondego>System.out.println(new BigDecimal(<doubleQuotes46>123.4<doubleQuotes46>,<newline46mondego>                   new MathContext(2,RoundingMode.HALF_UP)));<newline46mondego>System.out.println(new BigDecimal(<doubleQuotes46>123.4<doubleQuotes46>,<newline46mondego>                   new MathContext(2,RoundingMode.CEILING)));<newline46mondego>System.out.println(new BigDecimal(<doubleQuotes46>123.4<doubleQuotes46>,<newline46mondego>                   new MathContext(1,RoundingMode.CEILING)));<newline46mondego>"
"44splitHere46","7561splitHere46","123.4<newline46mondego>1.2E+2<newline46mondego>1.3E+2<newline46mondego>2E+2<newline46mondego>"
"45splitHere46","8322splitHere46",".../deploy/jboss-web.deployer/server.xml"
"46splitHere46","10549splitHere46","db2stop force<newline46mondego>db2start<newline46mondego>"
"47splitHere46","11101splitHere46","byte[] foobar = ..;<newline46mondego>int value = foobar[10];<newline46mondego>if (value < 0) value += 256 // Patch up the 'falsely' negative value<newline46mondego>"
"48splitHere46","12030splitHere46","import java.io.*;<newline46mondego>import java.util.*;<newline46mondego><newline46mondego>public class ExecTest {<newline46mondego>    public static void main(String[] args) throws IOException {<newline46mondego>        Process result = Runtime.getRuntime().exec(<doubleQuotes46>traceroute -m 1 www.amazon.com<doubleQuotes46>);<newline46mondego><newline46mondego>        BufferedReader output = new BufferedReader(new InputStreamReader(result.getInputStream()));<newline46mondego>        String thisLine = output.readLine();<newline46mondego>        StringTokenizer st = new StringTokenizer(thisLine);<newline46mondego>        st.nextToken();<newline46mondego>        String gateway = st.nextToken();<newline46mondego>        System.out.printf(<doubleQuotes46>The gateway is %s\n<doubleQuotes46>, gateway);<newline46mondego>    }<newline46mondego>}<newline46mondego>"
"49splitHere46","12030splitHere46","st.nextToken();"
"50splitHere46","12878splitHere46","Hashtable<String, Hashtable<String, String>> schedule<newline46mondego>    = new Hashtable<String, Hashtable<String, String>>();<newline46mondego>schedule.put(<doubleQuotes46>A<doubleQuotes46>, new Hashtable<String, String>());<newline46mondego>schedule.put(<doubleQuotes46>B<doubleQuotes46>, new Hashtable<String, String>());<newline46mondego>schedule.put(<doubleQuotes46>C<doubleQuotes46>, new Hashtable<String, String>());<newline46mondego>schedule.put(<doubleQuotes46>D<doubleQuotes46>, new Hashtable<String, String>());<newline46mondego>schedule.put(<doubleQuotes46>E<doubleQuotes46>, new Hashtable<String, String>());<newline46mondego><newline46mondego>schedule.get(<doubleQuotes46>A<doubleQuotes46>).put(<doubleQuotes46>Winter<doubleQuotes46>, <doubleQuotes46>M<doubleQuotes46>);<newline46mondego>schedule.get(<doubleQuotes46>A<doubleQuotes46>).put(<doubleQuotes46>Spring<doubleQuotes46>, <doubleQuotes46>tTS<doubleQuotes46>);<newline46mondego>// Etc...<newline46mondego>"
"51splitHere46","13283splitHere46","MyProject/src/main/java/com/acme/Widget.java<newline46mondego>MyProject/src/test/java/com/acme/WidgetTest.ava<newline46mondego>"
"52splitHere46","13367splitHere46","MyProject / src / main / resources / spring /"
"53splitHere46","13367splitHere46","datasource.xml"
"54splitHere46","13367splitHere46","persistence.xml"
"55splitHere46","13367splitHere46","services.xml"
"56splitHere46","13367splitHere46","services.xml"
"57splitHere46","13367splitHere46","transactionPolicy.xml"
"58splitHere46","13367splitHere46","controllers.xml"
"59splitHere46","13367splitHere46","security.xml"
"60splitHere46","13367splitHere46","datasource.xml"
"61splitHere46","13367splitHere46","persistence.xml"
"62splitHere46","13367splitHere46","@ContextConfiguration(locations = { <doubleQuotes46>/spring/datasource.xml<doubleQuotes46> , <doubleQuotes46>/spring/persistence.xml<doubleQuotes46> })<newline46mondego>"
"63splitHere46","13381splitHere46","<p>Please update your address and contact information.<newline46mondego><br /><newline46mondego><a href=<doubleQuotes46>/address.do<doubleQuotes46>>update address</a><newline46mondego><br /><newline46mondego><a href=<doubleQuotes46>/contact.do<doubleQuotes46>>update contact information</a></p><newline46mondego>"
"64splitHere46","13431splitHere46","WOComponent"
"65splitHere46","14441splitHere46","/bundle/<project>/(trunk|tags|branches)"
"66splitHere46","15279splitHere46","public static void main(String[] args){<newline46mondego>    	FooRepository fooRepository = new FooRepositoryImpl();<newline46mondego>    	fooRepository.delete(new Foo(<doubleQuotes46>Bar<doubleQuotes46>));<newline46mondego>}<newline46mondego><newline46mondego>public class Foo<newline46mondego>{<newline46mondego>    private String value;<newline46mondego><newline46mondego>    public Foo(String inValue){<newline46mondego>    	super();<newline46mondego>    	value = inValue;<newline46mondego>    }<newline46mondego>    public String toString(){<newline46mondego>    	return value;<newline46mondego>    }<newline46mondego>}<newline46mondego><newline46mondego>public interface Repository<E><newline46mondego>{<newline46mondego>    public void delete(E entity);<newline46mondego>}<newline46mondego><newline46mondego>public interface FooRepository extends Repository<Foo><newline46mondego>{<newline46mondego>    //other methods<newline46mondego>}<newline46mondego><newline46mondego>public class AbstractRespository<E> implements Repository<E><newline46mondego>{<newline46mondego>    public void delete(E entity){<newline46mondego>    	System.out.println(<doubleQuotes46>Delete-<doubleQuotes46> + entity.toString());<newline46mondego>    }<newline46mondego>}<newline46mondego><newline46mondego>public class FooRepositoryImpl extends AbstractRespository<Foo> implements FooRepository<newline46mondego>{<newline46mondego>     @Override<newline46mondego>       public void delete(Foo entity){<newline46mondego>          //do something before deleting the entity<newline46mondego>    	 	System.out.println(<doubleQuotes46>something before<doubleQuotes46>);<newline46mondego>          super.delete(entity);<newline46mondego>       }<newline46mondego>}<newline46mondego>"
"67splitHere46","15937splitHere46","JSch jsch = new JSch();<newline46mondego><newline46mondego>String knownHostsFilename = <doubleQuotes46>/home/username/.ssh/known_hosts<doubleQuotes46>;<newline46mondego>jsch.setKnownHosts( knownHostsFilename );<newline46mondego><newline46mondego>Session session = jsch.getSession( <doubleQuotes46>remote-username<doubleQuotes46>, <doubleQuotes46>remote-host<doubleQuotes46> );    <newline46mondego>{<newline46mondego>  // <doubleQuotes46>interactive<doubleQuotes46> version<newline46mondego>  // can selectively update specified known_hosts file <newline46mondego>  // need to implement UserInfo interface<newline46mondego>  // MyUserInfo is a swing implementation provided in <newline46mondego>  //  examples/Sftp.java in the JSch dist<newline46mondego>  UserInfo ui = new MyUserInfo();<newline46mondego>  session.setUserInfo(ui);<newline46mondego><newline46mondego>  // OR non-interactive version. Relies in host key being in known-hosts file<newline46mondego>  session.setPassword( <doubleQuotes46>remote-password<doubleQuotes46> );<newline46mondego>}<newline46mondego><newline46mondego>session.connect();<newline46mondego><newline46mondego>Channel channel = session.openChannel( <doubleQuotes46>sftp<doubleQuotes46> );<newline46mondego>channel.connect();<newline46mondego><newline46mondego>ChannelSftp sftpChannel = (ChannelSftp) channel;<newline46mondego><newline46mondego>sftpChannel.get(<doubleQuotes46>remote-file<doubleQuotes46>, <doubleQuotes46>local-file<doubleQuotes46> );<newline46mondego>// OR<newline46mondego>InputStream in = sftpChannel.get( <doubleQuotes46>remote-file<doubleQuotes46> );<newline46mondego>  // process inputstream as needed<newline46mondego><newline46mondego>sftpChannel.exit();<newline46mondego>session.disconnect();<newline46mondego>"
"68splitHere46","16019splitHere46","// get the list of customdata nodes<newline46mondego>NodeList customDataNodeSet = findNodes(document, <doubleQuotes46>//customdata<doubleQuotes46> );<newline46mondego><newline46mondego>for (int i=0 ; i < customDataNodeSet.getLength() ; i++) {<newline46mondego>  Node customDataNode = customDataNodeSet.item( i );<newline46mondego><newline46mondego>  // get the location nodes (if any) within this one customdata node<newline46mondego>  NodeList locationNodeSet = findNodes(customDataNode, <doubleQuotes46>location<doubleQuotes46> );<newline46mondego><newline46mondego>  if (locationNodeSet.getLength() > 0) {<newline46mondego>    // replace<newline46mondego>    locationNodeSet.item( 0 ).setTextContent( <doubleQuotes46>http://stackoverflow.com/<doubleQuotes46> );<newline46mondego>  }<newline46mondego>  else {<newline46mondego>    // insert<newline46mondego>    Element newLocationNode = document.createElement( <doubleQuotes46>location<doubleQuotes46> );<newline46mondego>    newLocationNode.setTextContent(<doubleQuotes46>http://stackoverflow.com/<doubleQuotes46> );<newline46mondego>    customDataNode.appendChild( newLocationNode );<newline46mondego>  }<newline46mondego>}<newline46mondego>"
"69splitHere46","16019splitHere46","private NodeList findNodes( Object obj, String xPathString )<newline46mondego>  throws XPathExpressionException {<newline46mondego><newline46mondego>  XPath xPath = XPathFactory.newInstance().newXPath();<newline46mondego>  XPathExpression expression = xPath.compile( xPathString );<newline46mondego>  return (NodeList) expression.evaluate( obj, XPathConstants.NODESET );<newline46mondego>}<newline46mondego>"
"70splitHere46","16054splitHere46","import javax.xml.XMLConstants;<newline46mondego>import javax.xml.transform.Source;<newline46mondego>import javax.xml.transform.stream.StreamSource;<newline46mondego>import javax.xml.validation.*;<newline46mondego>...<newline46mondego><newline46mondego>URL schemaFile = new URL(<doubleQuotes46>http://java.sun.com/xml/ns/j2ee/web-app_2_4.xsd<doubleQuotes46>);<newline46mondego>Source xmlFile = new StreamSource(new File(<doubleQuotes46>web.xml<doubleQuotes46>));<newline46mondego>SchemaFactory schemaFactory = SchemaFactory<newline46mondego>    .newInstance(XMLConstants.W3C_XML_SCHEMA_NS_URI);<newline46mondego>Schema schema = schemaFactory.newSchema(schemaFile);<newline46mondego>Validator validator = schema.newValidator();<newline46mondego>try {<newline46mondego>  validator.validate(xmlFile);<newline46mondego>  System.out.println(xmlFile.getSystemId() + <doubleQuotes46> is valid<doubleQuotes46>);<newline46mondego>} catch (SAXException e) {<newline46mondego>  System.out.println(xmlFile.getSystemId() + <doubleQuotes46> is NOT valid<doubleQuotes46>);<newline46mondego>  System.out.println(<doubleQuotes46>Reason: <doubleQuotes46> + e.getLocalizedMessage());<newline46mondego>}<newline46mondego>"
"71splitHere46","16054splitHere46","http://www.w3.org/2001/XMLSchema"
"72splitHere46","16054splitHere46","http://java.sun.com/xml/ns/j2ee/web-app_2_4.xsd"
"73splitHere46","16168splitHere46","* Jakarta-Commons DBCP<newline46mondego>* Jakarta-Commons Collections<newline46mondego>* Jakarta-Commons Pool<newline46mondego>"
"74splitHere46","16168splitHere46","removeAbandonedTimeout=<doubleQuotes46>60<doubleQuotes46><newline46mondego>"
"75splitHere46","16168splitHere46","testWhileIdle=true<newline46mondego>timeBetweenEvictionRunsMillis=300000<newline46mondego>"
"76splitHere46","17974splitHere46","int pageCount = (records + recordsPerPage - 1) / recordsPerPage;<newline46mondego>"
"77splitHere46","18529splitHere46","List<Integer> oldList = ...<newline46mondego>/* Specify the size of the list up front to prevent resizing. */<newline46mondego>List<String> newList = new ArrayList<String>(oldList.size()) <newline46mondego>for (Integer myInt : oldList) { <newline46mondego>  newList.add(String.valueOf(myInt)); <newline46mondego>}<newline46mondego>"
"78splitHere46","19308splitHere46","HttpSession session = .. [get hold of the session] <newline46mondego>ResourceBundle bundle = new PropertyResourceBundle(toInputStream(myOwnProperties)) [toInputStream just stores the properties into an inputstream] <newline46mondego>Locale locale = .. [get hold of the locale]<newline46mondego>javax.servlet.jsp.jstl.core.Config.set(session, Config.FMT_LOCALIZATION_CONTEXT, new LocalizationContext(bundle ,locale));<newline46mondego>"
"79splitHere46","19782splitHere46","$ javac -version<newline46mondego>javac 1.6.0_05<newline46mondego>"
"80splitHere46","19782splitHere46","javac -help<newline46mondego>javac -X<newline46mondego>javac -J-X<newline46mondego>"
"81splitHere46","19782splitHere46","javac -J-Xss10M Foo.java<newline46mondego>"
"82splitHere46","19782splitHere46","<javac srcdir=<doubleQuotes46>gen<doubleQuotes46> destdir=<doubleQuotes46>gen-bin<doubleQuotes46> debug=<doubleQuotes46>on<doubleQuotes46> fork=<doubleQuotes46>true<doubleQuotes46>><newline46mondego>    <compilerarg value=<doubleQuotes46>-J-Xss10M<doubleQuotes46> /><newline46mondego></javac><newline46mondego>"
"83splitHere46","19804splitHere46","ListCellRenderer"
"84splitHere46","19804splitHere46","JList"
"85splitHere46","19804splitHere46","ListCellRenderer"
"86splitHere46","19804splitHere46","JCheckbox"
"87splitHere46","19804splitHere46","getListCellRendererComponent(...)"
"88splitHere46","19804splitHere46","JCheckbox"
"89splitHere46","19804splitHere46","JCheckbox"
"90splitHere46","19804splitHere46","isSelected"
"91splitHere46","19804splitHere46","ListModel"
"92splitHere46","19804splitHere46","JList"
"93splitHere46","20154splitHere46","context"
"94splitHere46","20670splitHere46","import java.security.MessageDigest;<newline46mondego>import java.util.Arrays;<newline46mondego><newline46mondego>import javax.crypto.Cipher;<newline46mondego>import javax.crypto.SecretKey;<newline46mondego>import javax.crypto.spec.IvParameterSpec;<newline46mondego>import javax.crypto.spec.SecretKeySpec;<newline46mondego><newline46mondego>public class TripleDESTest {<newline46mondego><newline46mondego>    public static void main(String[] args) throws Exception {<newline46mondego><newline46mondego>    	String text = <doubleQuotes46>kyle boon<doubleQuotes46>;<newline46mondego><newline46mondego>    	byte[] codedtext = new TripleDESTest().encrypt(text);<newline46mondego>    	String decodedtext = new TripleDESTest().decrypt(codedtext);<newline46mondego><newline46mondego>    	System.out.println(codedtext); // this is a byte array, you'll just see a reference to an array<newline46mondego>    	System.out.println(decodedtext); // This correctly shows <doubleQuotes46>kyle boon<doubleQuotes46><newline46mondego>    }<newline46mondego><newline46mondego>    public byte[] encrypt(String message) throws Exception {<newline46mondego>    	final MessageDigest md = MessageDigest.getInstance(<doubleQuotes46>md5<doubleQuotes46>);<newline46mondego>    	final byte[] digestOfPassword = md.digest(<doubleQuotes46>HG58YZ3CR9<doubleQuotes46><newline46mondego>    			.getBytes(<doubleQuotes46>utf-8<doubleQuotes46>));<newline46mondego>    	final byte[] keyBytes = Arrays.copyOf(digestOfPassword, 24);<newline46mondego>    	for (int j = 0, k = 16; j < 8;) {<newline46mondego>    		keyBytes[k++] = keyBytes[j++];<newline46mondego>    	}<newline46mondego><newline46mondego>    	final SecretKey key = new SecretKeySpec(keyBytes, <doubleQuotes46>DESede<doubleQuotes46>);<newline46mondego>    	final IvParameterSpec iv = new IvParameterSpec(new byte[8]);<newline46mondego>    	final Cipher cipher = Cipher.getInstance(<doubleQuotes46>DESede/CBC/PKCS5Padding<doubleQuotes46>);<newline46mondego>    	cipher.init(Cipher.ENCRYPT_MODE, key, iv);<newline46mondego><newline46mondego>    	final byte[] plainTextBytes = message.getBytes(<doubleQuotes46>utf-8<doubleQuotes46>);<newline46mondego>    	final byte[] cipherText = cipher.doFinal(plainTextBytes);<newline46mondego>    	// final String encodedCipherText = new sun.misc.BASE64Encoder()<newline46mondego>    	// .encode(cipherText);<newline46mondego><newline46mondego>    	return cipherText;<newline46mondego>    }<newline46mondego><newline46mondego>    public String decrypt(byte[] message) throws Exception {<newline46mondego>    	final MessageDigest md = MessageDigest.getInstance(<doubleQuotes46>md5<doubleQuotes46>);<newline46mondego>    	final byte[] digestOfPassword = md.digest(<doubleQuotes46>HG58YZ3CR9<doubleQuotes46><newline46mondego>    			.getBytes(<doubleQuotes46>utf-8<doubleQuotes46>));<newline46mondego>    	final byte[] keyBytes = Arrays.copyOf(digestOfPassword, 24);<newline46mondego>    	for (int j = 0, k = 16; j < 8;) {<newline46mondego>    		keyBytes[k++] = keyBytes[j++];<newline46mondego>    	}<newline46mondego><newline46mondego>    	final SecretKey key = new SecretKeySpec(keyBytes, <doubleQuotes46>DESede<doubleQuotes46>);<newline46mondego>    	final IvParameterSpec iv = new IvParameterSpec(new byte[8]);<newline46mondego>    	final Cipher decipher = Cipher.getInstance(<doubleQuotes46>DESede/CBC/PKCS5Padding<doubleQuotes46>);<newline46mondego>    	decipher.init(Cipher.DECRYPT_MODE, key, iv);<newline46mondego><newline46mondego>    	// final byte[] encData = new<newline46mondego>    	// sun.misc.BASE64Decoder().decodeBuffer(message);<newline46mondego>    	final byte[] plainText = decipher.doFinal(message);<newline46mondego><newline46mondego>    	return new String(plainText, <doubleQuotes46>UTF-8<doubleQuotes46>);<newline46mondego>    }<newline46mondego>}<newline46mondego>"
"95splitHere46","22497splitHere46","public interface Foo {<newline46mondego>  public static int bar();<newline46mondego>}<newline46mondego>"
"96splitHere46","22497splitHere46","public interface Foo {<newline46mondego>  public static int bar() {<newline46mondego>    ...<newline46mondego>  }<newline46mondego>}<newline46mondego>"
"97splitHere46","22497splitHere46","Interface"
"98splitHere46","22497splitHere46","Object"
"99splitHere46","22497splitHere46","Module"
"100splitHere46","22497splitHere46","Interface"
"101splitHere46","22497splitHere46","module Foo<newline46mondego>  def self.bar<newline46mondego>    ...<newline46mondego>  end<newline46mondego>end<newline46mondego>"
"102splitHere46","22803splitHere46","isOutputShutdown()"
"103splitHere46","22803splitHere46","SocketWatcher"
"104splitHere46","22803splitHere46","Thread"
"105splitHere46","22803splitHere46","Socket"
"106splitHere46","22803splitHere46","SocketClosedException"
"107splitHere46","23048splitHere46","import static org.mockito.Mockito.*;<newline46mondego><newline46mondego>List mockedList = mock(List.class);<newline46mondego>mockedList.clear();<newline46mondego>verify(mockedList).clear();<newline46mondego>"
"108splitHere46","23879splitHere46","$!variable<newline46mondego>"
"109splitHere46","24023splitHere46","class Producer implements Runnable {<newline46mondego>   private final BlockingQueue queue;<newline46mondego>   Producer(BlockingQueue q) { queue = q; }<newline46mondego>   public void run() {<newline46mondego>     try {<newline46mondego>       while (true) { queue.put(produce()); }<newline46mondego>     } catch (InterruptedException ex) { ... handle ...}<newline46mondego>   }<newline46mondego>   Object produce() { ... }<newline46mondego> }<newline46mondego><newline46mondego> class Consumer implements Runnable {<newline46mondego>   private final BlockingQueue queue;<newline46mondego>   Consumer(BlockingQueue q) { queue = q; }<newline46mondego>   public void run() {<newline46mondego>     try {<newline46mondego>       while (true) { consume(queue.take()); }<newline46mondego>     } catch (InterruptedException ex) { ... handle ...}<newline46mondego>   }<newline46mondego>   void consume(Object x) { ... }<newline46mondego> }<newline46mondego><newline46mondego> class Setup {<newline46mondego>   void main() {<newline46mondego>     BlockingQueue q = new SomeQueueImplementation();<newline46mondego>     Producer p = new Producer(q);<newline46mondego>     Consumer c1 = new Consumer(q);<newline46mondego>     Consumer c2 = new Consumer(q);<newline46mondego>     new Thread(p).start();<newline46mondego>     new Thread(c1).start();<newline46mondego>     new Thread(c2).start();<newline46mondego>   }<newline46mondego> }<newline46mondego>"
"110splitHere46","24023splitHere46","BlockingQueue"
"111splitHere46","24499splitHere46","// C# syntax for <doubleQuotes46>Find all MyFoos with Bar == 23<doubleQuotes46>.<newline46mondego>// (Note the Java syntax is more verbose using the Predicate class.)<newline46mondego>IList<MyFoo> results = db4o.Query<MyFoo>(input => input.Bar == 23);<newline46mondego>"
"112splitHere46","24510splitHere46","#if($car)<newline46mondego>"
"113splitHere46","25043splitHere46","readLine"
"114splitHere46","25043splitHere46","null"
"115splitHere46","25043splitHere46","\n"
"116splitHere46","25043splitHere46","\r\n"
"117splitHere46","25043splitHere46","while (line != null && !line.equals(<doubleQuotes46><doubleQuotes46>))<newline46mondego>"
"118splitHere46","25043splitHere46","java -cp . Echo < test.txt<newline46mondego>"
"119splitHere46","25311splitHere46","class Link {<newline46mondego>    public int data1;<newline46mondego>    public double data2;<newline46mondego>    public Link nextLink;<newline46mondego><newline46mondego>    //Link constructor<newline46mondego>    public Link(int d1, double d2) {<newline46mondego>	    data1 = d1;<newline46mondego>	    data2 = d2;<newline46mondego>    }<newline46mondego><newline46mondego>    //Print Link data<newline46mondego>    public void printLink() {<newline46mondego>	    System.out.print(<doubleQuotes46>{<doubleQuotes46> + data1 + <doubleQuotes46>, <doubleQuotes46> + data2 + <doubleQuotes46>} <doubleQuotes46>);<newline46mondego>    }<newline46mondego>}<newline46mondego><newline46mondego>class LinkList {<newline46mondego>    private Link first;<newline46mondego><newline46mondego>    //LinkList constructor<newline46mondego>    public LinkList() {<newline46mondego>	    first = null;<newline46mondego>    }<newline46mondego><newline46mondego>    //Returns true if list is empty<newline46mondego>    public boolean isEmpty() {<newline46mondego>	    return first == null;<newline46mondego>    }<newline46mondego><newline46mondego>    //Inserts a new Link at the first of the list<newline46mondego>    public void insert(int d1, double d2) {<newline46mondego>	    Link link = new Link(d1, d2);<newline46mondego>	    link.nextLink = first;<newline46mondego>	    first = link;<newline46mondego>    }<newline46mondego><newline46mondego>    //Deletes the link at the first of the list<newline46mondego>    public Link delete() {<newline46mondego>	    Link temp = first;<newline46mondego>	    first = first.nextLink;<newline46mondego>	    return temp;<newline46mondego>    }<newline46mondego><newline46mondego>    //Prints list data<newline46mondego>    public void printList() {<newline46mondego>	    Link currentLink = first;<newline46mondego>	    System.out.print(<doubleQuotes46>List: <doubleQuotes46>);<newline46mondego>	    while(currentLink != null) {<newline46mondego>		    currentLink.printLink();<newline46mondego>		    currentLink = currentLink.nextLink;<newline46mondego>	    }<newline46mondego>	    System.out.println(<doubleQuotes46><doubleQuotes46>);<newline46mondego>    }<newline46mondego>}  <newline46mondego><newline46mondego>class LinkListTest {<newline46mondego>    public static void main(String[] args) {<newline46mondego>	    LinkList list = new LinkList();<newline46mondego><newline46mondego>	    list.insert(1, 1.01);<newline46mondego>	    list.insert(2, 2.02);<newline46mondego>	    list.insert(3, 3.03);<newline46mondego>	    list.insert(4, 4.04);<newline46mondego>	    list.insert(5, 5.05);<newline46mondego><newline46mondego>	    list.printList();<newline46mondego><newline46mondego>	    while(!list.isEmpty()) {<newline46mondego>		    Link deletedLink = list.delete();<newline46mondego>		    System.out.print(<doubleQuotes46>deleted: <doubleQuotes46>);<newline46mondego>		    deletedLink.printLink();<newline46mondego>		    System.out.println(<doubleQuotes46><doubleQuotes46>);<newline46mondego>	    }<newline46mondego>	    list.printList();<newline46mondego>    }<newline46mondego>}<newline46mondego>"
"120splitHere46","25492splitHere46","File dir = new File(<doubleQuotes46>put path to classes you want to load here<doubleQuotes46>);<newline46mondego>URL loadPath = dir.toURI().toURL();<newline46mondego>URL[] classUrl = new URL[]{loadPath};<newline46mondego><newline46mondego>ClassLoader cl = new URLClassLoader(classUrl);<newline46mondego><newline46mondego>Class loadedClass = cl.loadClass(<doubleQuotes46>classname<doubleQuotes46>); // must be in package.class name format<newline46mondego>"
"121splitHere46","25492splitHere46","MyModule modInstance = (MyModule)loadedClass.newInstance();<newline46mondego>"
"122splitHere46","25596splitHere46","public class Main {<newline46mondego>  public static void main(String[] args) {<newline46mondego>    /* Total number of processors or cores available to the JVM */<newline46mondego>    System.out.println(<doubleQuotes46>Available processors (cores): <doubleQuotes46> + <newline46mondego>        Runtime.getRuntime().availableProcessors());<newline46mondego><newline46mondego>    /* Total amount of free memory available to the JVM */<newline46mondego>    System.out.println(<doubleQuotes46>Free memory (bytes): <doubleQuotes46> + <newline46mondego>        Runtime.getRuntime().freeMemory());<newline46mondego><newline46mondego>    /* This will return Long.MAX_VALUE if there is no preset limit */<newline46mondego>    long maxMemory = Runtime.getRuntime().maxMemory();<newline46mondego>    /* Maximum amount of memory the JVM will attempt to use */<newline46mondego>    System.out.println(<doubleQuotes46>Maximum memory (bytes): <doubleQuotes46> + <newline46mondego>        (maxMemory == Long.MAX_VALUE ? <doubleQuotes46>no limit<doubleQuotes46> : maxMemory));<newline46mondego><newline46mondego>    /* Total memory currently available to the JVM */<newline46mondego>    System.out.println(<doubleQuotes46>Total memory available to JVM (bytes): <doubleQuotes46> + <newline46mondego>        Runtime.getRuntime().totalMemory());<newline46mondego><newline46mondego>    /* Get a list of all filesystem roots on this system */<newline46mondego>    File[] roots = File.listRoots();<newline46mondego><newline46mondego>    /* For each filesystem root, print some info */<newline46mondego>    for (File root : roots) {<newline46mondego>      System.out.println(<doubleQuotes46>File system root: <doubleQuotes46> + root.getAbsolutePath());<newline46mondego>      System.out.println(<doubleQuotes46>Total space (bytes): <doubleQuotes46> + root.getTotalSpace());<newline46mondego>      System.out.println(<doubleQuotes46>Free space (bytes): <doubleQuotes46> + root.getFreeSpace());<newline46mondego>      System.out.println(<doubleQuotes46>Usable space (bytes): <doubleQuotes46> + root.getUsableSpace());<newline46mondego>    }<newline46mondego>  }<newline46mondego>}<newline46mondego>"
"123splitHere46","25644splitHere46","public static void main(String arg[]) throws IOException{<newline46mondego>	Runtime runtime = Runtime.getRuntime();<newline46mondego>	Process proc = runtime.exec(<doubleQuotes46>shutdown -s -t 0<doubleQuotes46>);<newline46mondego>	System.exit(0);<newline46mondego>}<newline46mondego>"
"124splitHere46","25877splitHere46","Object list = Collections.<String> emptyList();<newline46mondego>"
"125splitHere46","26318splitHere46","public static synchronized void playSound(final String url) {<newline46mondego>  new Thread(new Runnable() {<newline46mondego>  // The wrapper thread is unnecessary, unless it blocks on the<newline46mondego>  // Clip finishing; see comments.<newline46mondego>    public void run() {<newline46mondego>      try {<newline46mondego>        Clip clip = AudioSystem.getClip();<newline46mondego>        AudioInputStream inputStream = AudioSystem.getAudioInputStream(<newline46mondego>          Main.class.getResourceAsStream(<doubleQuotes46>/path/to/sounds/<doubleQuotes46> + url));<newline46mondego>        clip.open(inputStream);<newline46mondego>        clip.start(); <newline46mondego>      } catch (Exception e) {<newline46mondego>        System.err.println(e.getMessage());<newline46mondego>      }<newline46mondego>    }<newline46mondego>  }).start();<newline46mondego>}<newline46mondego>"
"126splitHere46","26589splitHere46","<meta name=<doubleQuotes46>generator<doubleQuotes46> content=<doubleQuotes46>Blogger<doubleQuotes46> /><newline46mondego>"
"127splitHere46","26589splitHere46","<meta name=<doubleQuotes46>Generator<doubleQuotes46> content=<doubleQuotes46>Subtext Version 1.9.5.177<doubleQuotes46> /><newline46mondego>"
"128splitHere46","26744splitHere46","<url-pattern>*NEXTEVENT*</url-pattern><newline46mondego>"
"129splitHere46","27185splitHere46","protected LookupOp createColorizeOp(short R1, short G1, short B1) {<newline46mondego>    short[] alpha = new short[256];<newline46mondego>    short[] red = new short[256];<newline46mondego>    short[] green = new short[256];<newline46mondego>    short[] blue = new short[256];<newline46mondego><newline46mondego>    int Y = 0.3*R + 0.59*G + 0.11*B<newline46mondego><newline46mondego>    for (short i = 0; i < 256; i++) {<newline46mondego>        alpha[i] = i;<newline46mondego>        red[i] = (R1 + i*.3)/2;<newline46mondego>        green[i] = (G1 + i*.59)/2;<newline46mondego>        blue[i] = (B1 + i*.11)/2;<newline46mondego>    }<newline46mondego><newline46mondego>    short[][] data = new short[][] {<newline46mondego>            red, green, blue, alpha<newline46mondego>    };<newline46mondego><newline46mondego>    LookupTable lookupTable = new ShortLookupTable(0, data);<newline46mondego>    return new LookupOp(lookupTable, null);<newline46mondego>}<newline46mondego>"
"130splitHere46","27185splitHere46","BufferedImageOp colorizeFilter = createColorizeOp(R1, G1, B1);<newline46mondego>BufferedImage targetImage = colorizeFilter.filter(sourceImage, null);<newline46mondego>"
"131splitHere46","27505splitHere46","-verbose"
"132splitHere46","27505splitHere46","> javap -verbose MyClass<newline46mondego>Compiled from <doubleQuotes46>MyClass.java<doubleQuotes46><newline46mondego>public class MyClass<newline46mondego>  SourceFile: <doubleQuotes46>MyClass.java<doubleQuotes46><newline46mondego>  minor version: 0<newline46mondego>  major version: 46<newline46mondego>...<newline46mondego>"
"133splitHere46","27505splitHere46","WINDOWS> javap -verbose MyClass | find <doubleQuotes46>version<doubleQuotes46><newline46mondego>LINUX  > javap -verbose MyClass | grep version<newline46mondego>"
"134splitHere46","27536splitHere46","R = firstCol.R * p + secondCol.R * (1 - p)<newline46mondego>"
"135splitHere46","27536splitHere46","GradientPaint"
"136splitHere46","27609splitHere46","equals()"
"137splitHere46","27609splitHere46","o.equals(null)"
"138splitHere46","27609splitHere46","hashCode()"
"139splitHere46","27609splitHere46","equals()"
"140splitHere46","27609splitHere46","a.equals(b)"
"141splitHere46","27609splitHere46","a.hashCode()"
"142splitHere46","27609splitHere46","b.hashCode()"
"143splitHere46","27609splitHere46","equals()"
"144splitHere46","27609splitHere46","hashCode()"
"145splitHere46","27609splitHere46","public class Person {<newline46mondego>    private String name;<newline46mondego>    private int age;<newline46mondego>    // ...<newline46mondego><newline46mondego>    public int hashCode() {<newline46mondego>        return new HashCodeBuilder(17, 31). // two randomly chosen prime numbers<newline46mondego>            // if deriving: appendSuper(super.hashCode()).<newline46mondego>            append(name).<newline46mondego>            append(age).<newline46mondego>            toHashCode();<newline46mondego>    }<newline46mondego><newline46mondego>    public boolean equals(Object obj) {<newline46mondego>        if (obj == null)<newline46mondego>            return false;<newline46mondego>        if (obj == this)<newline46mondego>            return true;<newline46mondego>        if (!(obj instanceof Person))<newline46mondego>            return false;<newline46mondego><newline46mondego>        Person rhs = (Person) obj;<newline46mondego>        return new EqualsBuilder().<newline46mondego>            // if deriving: appendSuper(super.equals(obj)).<newline46mondego>            append(name, rhs.name).<newline46mondego>            append(age, rhs.age).<newline46mondego>            isEquals();<newline46mondego>    }<newline46mondego>}<newline46mondego>"
"146splitHere46","28448splitHere46","<project name=<doubleQuotes46>myapp<doubleQuotes46>><newline46mondego>   ...<newline46mondego>   <target name=<doubleQuotes46>jar<doubleQuotes46>><newline46mondego>      ...<newline46mondego>      <jar jarfile=<doubleQuotes46>${ant.project.name}.jar<doubleQuotes46> ...<newline46mondego>"
"147splitHere46","28448splitHere46","<copy todir=<doubleQuotes46>${war}/WEB-INF/lib<doubleQuotes46> flatten=<doubleQuotes46>true<doubleQuotes46>><newline46mondego>   <fileset dir=<doubleQuotes46>lib<doubleQuotes46> includes=<doubleQuotes46>**/*.jar<doubleQuotes46>><newline46mondego></copy><newline46mondego>"
"148splitHere46","28448splitHere46","<!-- Machine-specific property over-rides --><newline46mondego><property file=<doubleQuotes46>/etc/ant/build.properties<doubleQuotes46> /><newline46mondego><newline46mondego><!-- Project-specific property over-rides --><newline46mondego><property file=<doubleQuotes46>build.properties<doubleQuotes46> /><newline46mondego><newline46mondego><!-- Default property values, used if not specified in properties files --><newline46mondego><property name=<doubleQuotes46>jboss.home<doubleQuotes46> value=<doubleQuotes46>/usr/share/jboss<doubleQuotes46> /><newline46mondego>...<newline46mondego>"
"149splitHere46","28454splitHere46","System.getProperty(<doubleQuotes46>user.dir<doubleQuotes46>)<newline46mondego>"
"150splitHere46","28906splitHere46","private static class Blah<newline46mondego>{<newline46mondego>  public void finalize() { System.out.println(<doubleQuotes46>finalizing!<doubleQuotes46>); }<newline46mondego>}<newline46mondego><newline46mondego>private static void f() throws Throwable<newline46mondego>{<newline46mondego>   Blah blah = new Blah();<newline46mondego>   blah.finalize();<newline46mondego>}<newline46mondego><newline46mondego>public static void main(String[] args) throws Throwable<newline46mondego>{<newline46mondego>	System.out.println(<doubleQuotes46>start<doubleQuotes46>);<newline46mondego>	f();<newline46mondego>	System.gc();<newline46mondego>	System.out.println(<doubleQuotes46>done<doubleQuotes46>);<newline46mondego>}<newline46mondego>"
"151splitHere46","29336splitHere46","Map map = new HashMap();<newline46mondego>Hashtable ht = new Hashtable();<newline46mondego>"
"152splitHere46","29826splitHere46","ArrayList<ICloneable>()"
"153splitHere46","30172splitHere46","<xsd:complexType name=<doubleQuotes46>ArrayOf_xsd_long<doubleQuotes46>><newline46mondego>    <xsd:complexContent mixed=<doubleQuotes46>false<doubleQuotes46>><newline46mondego>      <xsd:restriction base=<doubleQuotes46>soapenc:Array<doubleQuotes46>><newline46mondego>        <xsd:attribute wsdl:arrayType=<doubleQuotes46>soapenc:long[]<doubleQuotes46> ref=<doubleQuotes46>soapenc:arrayType<doubleQuotes46> /><newline46mondego>      </xsd:restriction><newline46mondego>    </xsd:complexContent><newline46mondego>  </xsd:complexType><newline46mondego>"
"154splitHere46","30172splitHere46","[AttributeUsage(AttributeTargets.Method)]<newline46mondego>public class LongArrayHelperAttribute : SoapExtensionAttribute<newline46mondego>{<newline46mondego>    private int priority = 0;<newline46mondego><newline46mondego>    public override Type ExtensionType<newline46mondego>    {<newline46mondego>        get { return typeof (LongArrayHelper); }<newline46mondego>    }<newline46mondego><newline46mondego>    public override int Priority<newline46mondego>    {<newline46mondego>        get { return priority; }<newline46mondego>        set { priority = value; }<newline46mondego>    }<newline46mondego>}<newline46mondego><newline46mondego>public class LongArrayHelper : SoapExtension<newline46mondego>{<newline46mondego>    private static ILog log = LogManager.GetLogger(typeof (LongArrayHelper));<newline46mondego><newline46mondego>    public override object GetInitializer(LogicalMethodInfo methodInfo, SoapExtensionAttribute attribute)<newline46mondego>    {<newline46mondego>        return null;<newline46mondego>    }<newline46mondego><newline46mondego>    public override object GetInitializer(Type serviceType)<newline46mondego>    {<newline46mondego>        return null;<newline46mondego>    }<newline46mondego><newline46mondego>    public override void Initialize(object initializer)<newline46mondego>    {<newline46mondego>    }<newline46mondego><newline46mondego>    private Stream originalStream;<newline46mondego><newline46mondego>    private Stream newStream;<newline46mondego><newline46mondego>    public override void ProcessMessage(SoapMessage m)<newline46mondego>    {<newline46mondego>        switch (m.Stage)<newline46mondego>        {<newline46mondego>            case SoapMessageStage.AfterSerialize:<newline46mondego>                newStream.Position = 0; //need to reset stream <newline46mondego>                CopyStream(newStream, originalStream);<newline46mondego>                break;<newline46mondego><newline46mondego>            case SoapMessageStage.BeforeDeserialize:<newline46mondego>                XmlWriterSettings settings = new XmlWriterSettings();<newline46mondego>                settings.Indent = false;<newline46mondego>                settings.NewLineOnAttributes = false;<newline46mondego>                settings.NewLineHandling = NewLineHandling.None;<newline46mondego>                settings.NewLineChars = <doubleQuotes46><doubleQuotes46>;<newline46mondego>                XmlWriter writer = XmlWriter.Create(newStream, settings);<newline46mondego><newline46mondego>                XmlDocument xmlDocument = new XmlDocument();<newline46mondego>                xmlDocument.Load(originalStream);<newline46mondego><newline46mondego>                List<XmlElement> longArrayItems = new List<XmlElement>();<newline46mondego>                Dictionary<string, XmlElement> multiRefs = new Dictionary<string, XmlElement>();<newline46mondego>                FindImportantNodes(xmlDocument.DocumentElement, longArrayItems, multiRefs);<newline46mondego>                FixLongArrays(longArrayItems, multiRefs);<newline46mondego><newline46mondego>                xmlDocument.Save(writer);<newline46mondego>                newStream.Position = 0;<newline46mondego>                break;<newline46mondego>        }<newline46mondego>    }<newline46mondego><newline46mondego>    private static void FindImportantNodes(XmlElement element, List<XmlElement> longArrayItems,<newline46mondego>                                           Dictionary<string, XmlElement> multiRefs)<newline46mondego>    {<newline46mondego>        string val = element.GetAttribute(<doubleQuotes46>soapenc:arrayType<doubleQuotes46>);<newline46mondego>        if (val != null && val.Contains(<doubleQuotes46>:long[<doubleQuotes46>))<newline46mondego>        {<newline46mondego>            longArrayItems.Add(element);<newline46mondego>        }<newline46mondego>        if (element.Name == <doubleQuotes46>multiRef<doubleQuotes46>)<newline46mondego>        {<newline46mondego>            multiRefs[element.GetAttribute(<doubleQuotes46>id<doubleQuotes46>)] = element;<newline46mondego>        }<newline46mondego>        foreach (XmlNode node in element.ChildNodes)<newline46mondego>        {<newline46mondego>            XmlElement child = node as XmlElement;<newline46mondego>            if (child != null)<newline46mondego>            {<newline46mondego>                FindImportantNodes(child, longArrayItems, multiRefs);<newline46mondego>            }<newline46mondego>        }<newline46mondego>    }<newline46mondego><newline46mondego>    private static void FixLongArrays(List<XmlElement> longArrayItems, Dictionary<string, XmlElement> multiRefs)<newline46mondego>    {<newline46mondego>        foreach (XmlElement element in longArrayItems)<newline46mondego>        {<newline46mondego>            foreach (XmlNode node in element.ChildNodes)<newline46mondego>            {<newline46mondego>                XmlElement child = node as XmlElement;<newline46mondego>                if (child != null)<newline46mondego>                {<newline46mondego>                    string href = child.GetAttribute(<doubleQuotes46>href<doubleQuotes46>);<newline46mondego>                    if (href == null || href.Length == 0)<newline46mondego>                    {<newline46mondego>                        continue;<newline46mondego>                    }<newline46mondego>                    if (href.StartsWith(<doubleQuotes46>#<doubleQuotes46>))<newline46mondego>                    {<newline46mondego>                        href = href.Remove(0, 1);<newline46mondego>                    }<newline46mondego>                    XmlElement multiRef = multiRefs[href];<newline46mondego>                    if (multiRef == null)<newline46mondego>                    {<newline46mondego>                        continue;<newline46mondego>                    }<newline46mondego>                    child.RemoveAttribute(<doubleQuotes46>href<doubleQuotes46>);<newline46mondego>                    child.InnerXml = multiRef.InnerXml;<newline46mondego>                    if (log.IsDebugEnabled)<newline46mondego>                    {<newline46mondego>                        log.Debug(<doubleQuotes46>Replaced multiRef id '<doubleQuotes46> + href + <doubleQuotes46>' with value: <doubleQuotes46> + multiRef.InnerXml);<newline46mondego>                    }<newline46mondego>                }<newline46mondego>            }<newline46mondego>        }<newline46mondego>    }<newline46mondego><newline46mondego>    public override Stream ChainStream(Stream s)<newline46mondego>    {<newline46mondego>        originalStream = s;<newline46mondego>        newStream = new MemoryStream();<newline46mondego>        return newStream;<newline46mondego>    }<newline46mondego><newline46mondego>    private static void CopyStream(Stream from, Stream to)<newline46mondego>    {<newline46mondego>        TextReader reader = new StreamReader(from);<newline46mondego>        TextWriter writer = new StreamWriter(to);<newline46mondego>        writer.WriteLine(reader.ReadToEnd());<newline46mondego>        writer.Flush();<newline46mondego>    }<newline46mondego>}<newline46mondego>"
"155splitHere46","30172splitHere46","[SoapRpcMethod(<doubleQuotes46><doubleQuotes46>, RequestNamespace=<doubleQuotes46>http://some.service.provider<doubleQuotes46>,<newline46mondego>        ResponseNamespace=<doubleQuotes46>http://some.service.provider<doubleQuotes46>)]<newline46mondego>    [return : SoapElement(<doubleQuotes46>getFooReturn<doubleQuotes46>)]<newline46mondego>    [LongArrayHelper]<newline46mondego>    public Foo getFoo()<newline46mondego>    {<newline46mondego>        object[] results = Invoke(<doubleQuotes46>getFoo<doubleQuotes46>, new object[0]);<newline46mondego>        return ((Foo) (results[0]));<newline46mondego>    }<newline46mondego>"
"156splitHere46","30628splitHere46","<version>[1.2.3,)</version><newline46mondego>"
"157splitHere46","30697splitHere46","public class DelegatingHandler extends DefaultHandler {<newline46mondego><newline46mondego>    private Map<String, DefaultHandler> saxHandlers;<newline46mondego>    private DefaultHandler delegate = null;<newline46mondego><newline46mondego>    public DelegatingHandler(Map<String, DefaultHandler> delegates) {<newline46mondego>        saxHandlers = delegates;<newline46mondego>    }<newline46mondego><newline46mondego>    @Override<newline46mondego>    public void startElement(String uri, String localName, String name,<newline46mondego>            Attributes attributes) throws SAXException {<newline46mondego>       if(delegate == null) {<newline46mondego>           delegate = saxHandlers.get(name);<newline46mondego>       }<newline46mondego>       delegate.startElement(uri, localName, name, attributes);<newline46mondego>    }<newline46mondego><newline46mondego>    @Override<newline46mondego>    public void endElement(String uri, String localName, String name)<newline46mondego>            throws SAXException {<newline46mondego>        delegate.endElement(uri, localName, name);<newline46mondego>    }<newline46mondego><newline46mondego>//etcetera...<newline46mondego>"
"158splitHere46","31218splitHere46","OuterClassName.this"
"159splitHere46","31218splitHere46","class Outer {<newline46mondego>    void foo() {<newline46mondego>        new Thread() {<newline46mondego>            public void run() {<newline46mondego>                Outer.this.bar();<newline46mondego>            }<newline46mondego>        }.start();<newline46mondego>    }<newline46mondego>    void bar() {<newline46mondego>        System.out.println(<doubleQuotes46>BAR!<doubleQuotes46>);<newline46mondego>    }<newline46mondego>}<newline46mondego>"
"160splitHere46","31218splitHere46","Outer.this"
"161splitHere46","31401splitHere46","System.getProperty(<doubleQuotes46>user.name<doubleQuotes46>)<newline46mondego>"
"162splitHere46","31432splitHere46","StringBuilder html = new StringBuilder();<newline46mondego>java.net.URL url = new URL(<doubleQuotes46>http://www.google.com/<doubleQuotes46>);<newline46mondego>BufferedReader input = null;<newline46mondego>try {<newline46mondego>    input new BufferedReader(<newline46mondego>        new InputStreamReader(url.openStream()));<newline46mondego><newline46mondego>    String htmlLine;<newline46mondego>    while ((htmlLine=input.readLine())!=null) {<newline46mondego>        html.appendLine(htmlLine);<newline46mondego>    }<newline46mondego>}<newline46mondego>finally {<newline46mondego>    input.close();<newline46mondego>}<newline46mondego><newline46mondego>Pattern exp = Pattern.compile(<newline46mondego>    <doubleQuotes46><meta name=\<doubleQuotes46>generator\<doubleQuotes46> value=\<doubleQuotes46>([^\<doubleQuotes46>]*)\<doubleQuotes46> /><doubleQuotes46>);<newline46mondego>Matcher matcher = exp.matcher(html.toString());<newline46mondego>if(matcher.find())<newline46mondego>{<newline46mondego>    System.out.println(<doubleQuotes46>Generator: <doubleQuotes46>+matcher.group(1));<newline46mondego>}<newline46mondego>"
"163splitHere46","31463splitHere46","String content = null;<newline46mondego>URLConnection connection = null;<newline46mondego>try {<newline46mondego>  connection =  new URL(<doubleQuotes46>http://www.google.com<doubleQuotes46>).openConnection();<newline46mondego>  Scanner scanner = new Scanner(connection.getInputStream());<newline46mondego>  scanner.useDelimiter(<doubleQuotes46>\\Z<doubleQuotes46>);<newline46mondego>  content = scanner.next();<newline46mondego>}catch ( Exception ex ) {<newline46mondego>    ex.printStackTrace();<newline46mondego>}<newline46mondego>System.out.println(content);<newline46mondego>"
"164splitHere46","31929splitHere46","List<Person> foo = new List<Person>();<newline46mondego>"
"165splitHere46","31929splitHere46","Person"
"166splitHere46","31929splitHere46","List<Person>"
"167splitHere46","31929splitHere46","ListOfPerson"
"168splitHere46","31929splitHere46","Person"
"169splitHere46","31929splitHere46","Person"
"170splitHere46","31929splitHere46","List<something>"
"171splitHere46","31929splitHere46","List"
"172splitHere46","31929splitHere46","ArrayList<Person> foo = new ArrayList<Person>();<newline46mondego>"
"173splitHere46","31929splitHere46","Person"
"174splitHere46","31929splitHere46","ListOfPerson"
"175splitHere46","31929splitHere46","ArrayList"
"176splitHere46","31929splitHere46","Person p = (Person)foo.get(1);"
"177splitHere46","31929splitHere46","Person"
"178splitHere46","31929splitHere46","Object"
"179splitHere46","31929splitHere46","ArrayList"
"180splitHere46","31929splitHere46","ListOfPerson"
"181splitHere46","31929splitHere46","Object"
"182splitHere46","31929splitHere46","Person"
"183splitHere46","31929splitHere46","std::list<Person>* foo = new std::list<Person>();<newline46mondego>"
"184splitHere46","31929splitHere46","pseudo-classes"
"185splitHere46","31929splitHere46","Person"
"186splitHere46","31929splitHere46","Person"
"187splitHere46","31929splitHere46","Person"
"188splitHere46","31929splitHere46","string addNames<T>( T first, T second ) { return first.Name() + second.Name(); }<newline46mondego>"
"189splitHere46","31929splitHere46","T"
"190splitHere46","31929splitHere46","interface IHasName{ string Name(); };<newline46mondego>string addNames<T>( T first, T second ) where T : IHasName { .... }<newline46mondego>"
"191splitHere46","31929splitHere46","<T extends IHasName>"
"192splitHere46","31929splitHere46","string addNames<T>( T first, T second ) { return first + second; }<newline46mondego>"
"193splitHere46","31929splitHere46","+"
"194splitHere46","32057splitHere46","Timer"
"195splitHere46","32057splitHere46","ScheduledThreadPoolExecutor"
"196splitHere46","32057splitHere46","Executors"
"197splitHere46","32057splitHere46",".newSingleThreadScheduledExecutor()"
"198splitHere46","32057splitHere46","Timer"
"199splitHere46","32057splitHere46","schedule()"
"200splitHere46","32057splitHere46","ScheduledFuture"
"201splitHere46","32057splitHere46","Timer"
"202splitHere46","32057splitHere46","ScheduledThreadPoolExecutor"
"203splitHere46","32057splitHere46","java.util.concurrent"
"204splitHere46","32057splitHere46","ScheduledThreadPoolExecutor"
"205splitHere46","32057splitHere46","Timer"
"206splitHere46","32057splitHere46","TimerTask"
"207splitHere46","32057splitHere46","TimerTask"
"208splitHere46","32057splitHere46","Runnable"
"209splitHere46","32057splitHere46","ScheduledThreadPoolExecutor"
"210splitHere46","32057splitHere46","Timer"
"211splitHere46","32122splitHere46","if (logger.isDebugEnabled()) {<newline46mondego><newline46mondego>  // perform expensive operations<newline46mondego>  // build string to log<newline46mondego><newline46mondego>  logger.debug(<doubleQuotes46>....<doubleQuotes46>);<newline46mondego>}<newline46mondego>"
"212splitHere46","32122splitHere46","assert (sky.state != FALLING) : <doubleQuotes46>The sky is falling!<doubleQuotes46>;<newline46mondego>"
"213splitHere46","32509splitHere46","InputStream stream = new FileInputStream(<doubleQuotes46>in<doubleQuotes46>);<newline46mondego>    try { //no operations between open stream and try block<newline46mondego>        //work<newline46mondego>    } finally { //do nothing but close this one stream in the finally<newline46mondego>        stream.close();<newline46mondego>    }<newline46mondego>"
"214splitHere46","32707splitHere46","setDoubleBuffered(boolean aFlag)"
"215splitHere46","32707splitHere46","ContentChanged"
"216splitHere46","32707splitHere46","if"
"217splitHere46","32707splitHere46","public void contentsChanged(final ListDataEvent evt)<newline46mondego>{<newline46mondego>    if (!EventQueue.isDispatchThread())<newline46mondego>    {<newline46mondego>        log.debug(<doubleQuotes46>Delegating contentsChanged(...) to EDT<doubleQuotes46>);<newline46mondego><newline46mondego>        EventQueue.invokeLater(new Runnable() <newline46mondego>        {<newline46mondego>            public void run() <newline46mondego>            {<newline46mondego>                contentsChanged(evt);<newline46mondego>            }<newline46mondego>        });<newline46mondego>        // don't run ensureIndexIsVisible twice:<newline46mondego>        return;<newline46mondego>     }<newline46mondego><newline46mondego>     if (playbackInProgress)<newline46mondego>     {<newline46mondego>         int index = evt.getIndex0();<newline46mondego>         currentContentList.ensureIndexIsVisible(index);<newline46mondego>     }<newline46mondego>}<newline46mondego>"
"218splitHere46","33283splitHere46","import javax.xml.parsers.DocumentBuilderFactory;<newline46mondego>import javax.xml.parsers.DocumentBuilder;<newline46mondego>import org.w3c.dom.Document;<newline46mondego>import java.io.ByteArrayInputStream;<newline46mondego><newline46mondego>public Document loadXMLFromString(String xml) throws Exception<newline46mondego>{<newline46mondego>    DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();<newline46mondego><newline46mondego>    factory.setNamespaceAware(true);<newline46mondego>    DocumentBuilder builder = factory.newDocumentBuilder();<newline46mondego><newline46mondego>    return builder.parse(new ByteArrayInputStream(xml.getBytes()));<newline46mondego>}<newline46mondego>"
"219splitHere46","33715splitHere46","this.addMouseListener(this);<newline46mondego>this.addMouseMotionListener(this);<newline46mondego>"
"220splitHere46","33767splitHere46","AddType application/x-java-jnlp-file .jnlp<newline46mondego>"
"221splitHere46","34167splitHere46","mvn dependency:tree -Dincludes=velocity:velocity<newline46mondego>"
"222splitHere46","34167splitHere46","[INFO] [dependency:tree]<newline46mondego>[INFO] org.apache.maven.plugins:maven-dependency-plugin:maven-plugin:2.0-alpha-5-SNAPSHOT<newline46mondego>[INFO] \- org.apache.maven.doxia:doxia-site-renderer:jar:1.0-alpha-8:compile<newline46mondego>[INFO]    \- org.codehaus.plexus:plexus-velocity:jar:1.1.3:compile<newline46mondego>[INFO]       \- velocity:velocity:jar:1.4:compile<newline46mondego>"
"223splitHere46","34658splitHere46","private"
"224splitHere46","34658splitHere46","private static"
"225splitHere46","34658splitHere46","private"
"226splitHere46","34658splitHere46","private static"
"227splitHere46","34658splitHere46","private static final"
"228splitHere46","34658splitHere46","Method method = targetClass.getDeclaredMethod(methodName, argClasses);<newline46mondego>method.setAccessible(true);<newline46mondego>return method.invoke(targetObject, argObjects);<newline46mondego>"
"229splitHere46","34658splitHere46","Field field = targetClass.getDeclaredField(fieldName);<newline46mondego>field.setAccessible(true);<newline46mondego>field.set(object, value);<newline46mondego>"
"230splitHere46","34658splitHere46","targetClass.getDeclaredMethod(methodName, argClasses)"
"231splitHere46","34658splitHere46","private"
"232splitHere46","34658splitHere46","getDeclaredField"
"233splitHere46","34658splitHere46","setAccessible(true)"
"234splitHere46","35666splitHere46","public class ReadOnlyDictionary<TKey, TValue> : IDictionary<TKey, TValue><newline46mondego>{<newline46mondego>    IDictionary<TKey, TValue> _dict;<newline46mondego><newline46mondego>    public ReadOnlyDictionary(IDictionary<TKey, TValue> backingDict)<newline46mondego>    {<newline46mondego>        _dict = backingDict;<newline46mondego>    }<newline46mondego><newline46mondego>    public void Add(TKey key, TValue value)<newline46mondego>    {<newline46mondego>        throw new InvalidOperationException();<newline46mondego>    }<newline46mondego><newline46mondego>    public bool ContainsKey(TKey key)<newline46mondego>    {<newline46mondego>        return _dict.ContainsKey(key);<newline46mondego>    }<newline46mondego><newline46mondego>    public ICollection<TKey> Keys<newline46mondego>    {<newline46mondego>        get { return _dict.Keys; }<newline46mondego>    }<newline46mondego><newline46mondego>    public bool Remove(TKey key)<newline46mondego>    {<newline46mondego>        throw new InvalidOperationException();<newline46mondego>    }<newline46mondego><newline46mondego>    public bool TryGetValue(TKey key, out TValue value)<newline46mondego>    {<newline46mondego>        return _dict.TryGetValue(key, out value);<newline46mondego>    }<newline46mondego><newline46mondego>    public ICollection<TValue> Values<newline46mondego>    {<newline46mondego>        get { return _dict.Values; }<newline46mondego>    }<newline46mondego><newline46mondego>    public TValue this[TKey key]<newline46mondego>    {<newline46mondego>        get { return _dict[key]; }<newline46mondego>        set { throw new InvalidOperationException(); }<newline46mondego>    }<newline46mondego><newline46mondego>    public void Add(KeyValuePair<TKey, TValue> item)<newline46mondego>    {<newline46mondego>        throw new InvalidOperationException();<newline46mondego>    }<newline46mondego><newline46mondego>    public void Clear()<newline46mondego>    {<newline46mondego>        throw new InvalidOperationException();<newline46mondego>    }<newline46mondego><newline46mondego>    public bool Contains(KeyValuePair<TKey, TValue> item)<newline46mondego>    {<newline46mondego>        return _dict.Contains(item);<newline46mondego>    }<newline46mondego><newline46mondego>    public void CopyTo(KeyValuePair<TKey, TValue>[] array, int arrayIndex)<newline46mondego>    {<newline46mondego>        _dict.CopyTo(array, arrayIndex);<newline46mondego>    }<newline46mondego><newline46mondego>    public int Count<newline46mondego>    {<newline46mondego>        get { return _dict.Count; }<newline46mondego>    }<newline46mondego><newline46mondego>    public bool IsReadOnly<newline46mondego>    {<newline46mondego>        get { return true; }<newline46mondego>    }<newline46mondego><newline46mondego>    public bool Remove(KeyValuePair<TKey, TValue> item)<newline46mondego>    {<newline46mondego>        throw new InvalidOperationException();<newline46mondego>    }<newline46mondego><newline46mondego>    public IEnumerator<KeyValuePair<TKey, TValue>> GetEnumerator()<newline46mondego>    {<newline46mondego>        return _dict.GetEnumerator();<newline46mondego>    }<newline46mondego><newline46mondego>    System.Collections.IEnumerator <newline46mondego>           System.Collections.IEnumerable.GetEnumerator()<newline46mondego>    {<newline46mondego>        return ((System.Collections.IEnumerable)_dict).GetEnumerator();<newline46mondego>    }<newline46mondego>}<newline46mondego>"
"235splitHere46","35885splitHere46","ManagementFactory.getRuntimeMXBean().getName()"
"236splitHere46","35885splitHere46","12345@localhost"
"237splitHere46","35885splitHere46","12345"
"238splitHere46","36364splitHere46","<typename T> T sum(T a, T b) { return a + b; }<newline46mondego>"
"239splitHere46","36364splitHere46","<T extends Something> T sum(T a, T b) { return a.add ( b ); }<newline46mondego>"
"240splitHere46","36364splitHere46","Something sum(Something a, Something b) { return a.add ( b ); }<newline46mondego>"
"241splitHere46","36734splitHere46","public property String foo;   <newline46mondego>a->Foo = b->Foo;<newline46mondego>"
"242splitHere46","37316splitHere46","IMyInterface fromFactory = factory.create(...);  <newline46mondego>Assert.assertTrue(fromFactory instanceof MyInterfaceImpl1);<newline46mondego>"
"243splitHere46","37632splitHere46","Method method = foo.getClass().getMethod(<doubleQuotes46>doSomething<doubleQuotes46>, null);<newline46mondego>method.invoke(foo, null);<newline46mondego>"
"244splitHere46","38102splitHere46","class StringList extends ArrayList<String> { }<newline46mondego>"
"245splitHere46","38981splitHere46","GraphicsDevice[] devices = GraphicsEnvironment.getLocalGraphicsEnvironment()<newline46mondego>		.getScreenDevices();<newline46mondego>	for (int i = 0; i < devices.length; i++) {<newline46mondego>		GraphicsDevice dev = devices[i];<newline46mondego>		System.out.println(<doubleQuotes46>device <doubleQuotes46> + i);<newline46mondego>		DisplayMode[] modes = dev.getDisplayModes();<newline46mondego>		for (int j = 0; j < modes.length; j++) {<newline46mondego>			DisplayMode m = modes[j];<newline46mondego>			System.out.println(<doubleQuotes46> <doubleQuotes46> + j + <doubleQuotes46>: <doubleQuotes46> + m.getWidth() + <doubleQuotes46> x <doubleQuotes46> + m.getHeight());<newline46mondego>		}<newline46mondego>	}<newline46mondego>"
"246splitHere46","39449splitHere46","URL myURL = new URL(<doubleQuotes46>http://example.com/my/path<doubleQuotes46>);<newline46mondego>URLConnection conn = myURL.openConnection();<newline46mondego>conn.setDoOutput(true);<newline46mondego>conn.setDoInput(true);<newline46mondego><newline46mondego>OutputStream os = conn.getOutputStream();<newline46mondego>os.write(<doubleQuotes46>Hi there!<doubleQuotes46>);<newline46mondego>os.close();<newline46mondego><newline46mondego>InputStream is = conn.getInputStream();<newline46mondego>// read stuff here<newline46mondego>"
"247splitHere46","39449splitHere46","URL myURL = new URL(<doubleQuotes46>http://example.com/my/path<doubleQuotes46>);<newline46mondego>URLConnection conn = myURL.openConnection();<newline46mondego>conn.setDoOutput(false);<newline46mondego>conn.setDoInput(true);<newline46mondego><newline46mondego>InputStream is = conn.getInputStream();<newline46mondego>// read stuff here<newline46mondego>"
"248splitHere46","39587splitHere46","SELECT NewsText FROM News INNER JOIN NewsText ON News.NewsID = NewsText.NewsID<newline46mondego>WHERE NewsText.NewsLanguageID = <<Session[<doubleQuotes46>UserLanguageID<doubleQuotes46>]>><newline46mondego>"
"249splitHere46","40678splitHere46","SAXParserFactory factory = SAXParserFactory.newInstance();<newline46mondego>factory.setValidating(true);<newline46mondego>factory.setNamespaceAware(true);<newline46mondego><newline46mondego>SAXParser parser = factory.newSAXParser();<newline46mondego><newline46mondego>XMLReader reader = parser.getXMLReader();<newline46mondego>reader.setErrorHandler(new SimpleErrorHandler());<newline46mondego>reader.parse(new InputSource(new FileReader (<doubleQuotes46>document.xml<doubleQuotes46>)));<newline46mondego>"
"250splitHere46","40878splitHere46","HashMap"
"251splitHere46","40878splitHere46","Hashtable"
"252splitHere46","40878splitHere46","HashMap"
"253splitHere46","40878splitHere46","null"
"254splitHere46","40878splitHere46","HashMap"
"255splitHere46","40878splitHere46","LinkedHashMap"
"256splitHere46","40878splitHere46","Hashtable"
"257splitHere46","40878splitHere46","HashMap"
"258splitHere46","41156splitHere46","import java.security.SecureRandom;<newline46mondego><newline46mondego>public final class SessionIdentifierGenerator {<newline46mondego>  private SecureRandom random = new SecureRandom();<newline46mondego><newline46mondego>  public String nextSessionId() {<newline46mondego>    return new BigInteger(130, random).toString(32);<newline46mondego>  }<newline46mondego>}<newline46mondego>"
"259splitHere46","41156splitHere46","SecureRandom"
"260splitHere46","41156splitHere46","public class RandomString {<newline46mondego><newline46mondego>  private static char[] symbols;<newline46mondego><newline46mondego>  static {<newline46mondego>    StringBuilder tmp = new StringBuilder();<newline46mondego>    for (char ch = '0'; ch <= '9'; ++ch)<newline46mondego>      tmp.append(ch);<newline46mondego>    for (char ch = 'a'; ch <= 'z'; ++ch)<newline46mondego>      tmp.append(ch);<newline46mondego>    symbols = tmp.toString().toCharArray();<newline46mondego>  }   <newline46mondego><newline46mondego>  private final Random random = new Random();<newline46mondego><newline46mondego>  private final char[] buf;<newline46mondego><newline46mondego>  public RandomString(int length) {<newline46mondego>    if (length < 1)<newline46mondego>      throw new IllegalArgumentException(<doubleQuotes46>length < 1: <doubleQuotes46> + length);<newline46mondego>    buf = new char[length];<newline46mondego>  }<newline46mondego><newline46mondego>  public String nextString() {<newline46mondego>    for (int idx = 0; idx < buf.length; ++idx) <newline46mondego>      buf[idx] = symbols[random.nextInt(symbols.length)];<newline46mondego>    return new String(buf);<newline46mondego>  }<newline46mondego>}<newline46mondego>"
"261splitHere46","41157splitHere46","sun.misc.Signal"
"262splitHere46","41157splitHere46","sun.misc.Signal"
"263splitHere46","41231splitHere46","Vector3f toScreenVector = new Vector3f(0, 0, 1);<newline46mondego><newline46mondego>Transform3D t3d = new Transform3D();<newline46mondego>canvas.getImagePlateToVworld(t3d);<newline46mondego>t3d.transform(toScreenVector);<newline46mondego><newline46mondego>tg.getTransform(t3d); //tg is Transform Group of all objects in a scene<newline46mondego>t3d.transform(toScreenVector);<newline46mondego>"
"264splitHere46","41814splitHere46","public class FactoryInitialisingServletContextListener implements ServletContextListener {<newline46mondego><newline46mondego>    public void contextDestroyed(ServletContextEvent event) {<newline46mondego>    }<newline46mondego><newline46mondego>    public void contextInitialized(ServletContextEvent event) {<newline46mondego>        Properties properties = new Properties();<newline46mondego>        ServletContext servletContext = event.getServletContext();<newline46mondego>        Enumeration<?> keys = servletContext.getInitParameterNames();<newline46mondego>        while (keys.hasMoreElements()) {<newline46mondego>            String key = (String) keys.nextElement();<newline46mondego>            String value = servletContext.getInitParameter(key);<newline46mondego>            properties.setProperty(key, value);<newline46mondego>        }<newline46mondego>        Factory.setServletContextProperties(properties);<newline46mondego>    }<newline46mondego>}<newline46mondego><newline46mondego>public class Factory {<newline46mondego><newline46mondego>    static Properties _servletContextProperties = new Properties();<newline46mondego><newline46mondego>    public static void setServletContextProperties(Properties servletContextProperties) {<newline46mondego>        _servletContextProperties = servletContextProperties;<newline46mondego>    }<newline46mondego>}<newline46mondego>"
"265splitHere46","41814splitHere46","<listener><newline46mondego>    <listener-class>com.acme.FactoryInitialisingServletContextListener<listener-class><newline46mondego></listener><newline46mondego>"
"266splitHere46","41904splitHere46","StackTraceElement[] stack = Thread.currentThread ().getStackTrace ();<newline46mondego>    StackTraceElement main = stack[stack.length - 1];<newline46mondego>    String mainClass = main.getClassName ();<newline46mondego>"
"267splitHere46","42163splitHere46","<applet code=<doubleQuotes46>TumbleItem.class<doubleQuotes46> <newline46mondego>        codebase=<doubleQuotes46>examples/<doubleQuotes46><newline46mondego>        archive=<doubleQuotes46>tumbleClasses.jar, tumbleImages.jar<doubleQuotes46><newline46mondego>        width=<doubleQuotes46>600<doubleQuotes46> height=<doubleQuotes46>95<doubleQuotes46>><newline46mondego>    <param name=<doubleQuotes46>maxwidth<doubleQuotes46> value=<doubleQuotes46>120<doubleQuotes46>><newline46mondego>    <param name=<doubleQuotes46>nimgs<doubleQuotes46> value=<doubleQuotes46>17<doubleQuotes46>><newline46mondego>    <param name=<doubleQuotes46>offset<doubleQuotes46> value=<doubleQuotes46>-57<doubleQuotes46>><newline46mondego>    <param name=<doubleQuotes46>img<doubleQuotes46> value=<doubleQuotes46>images/tumble<doubleQuotes46>><newline46mondego><newline46mondego>Your browser is completely ignoring the &lt;APPLET&gt; tag!<newline46mondego></applet><newline46mondego>"
"268splitHere46","42202splitHere46","1 while (true) {<newline46mondego> 2   int nBytesRead = src.read(buff);<newline46mondego> 3   if (nBytesRead < 0) {<newline46mondego> 4     break;<newline46mondego> 5   }<newline46mondego> 6   byteStream.write(buff);<newline46mondego> 7 }<newline46mondego>"
"269splitHere46","42202splitHere46","1 while (true) {<newline46mondego> 2   int nBytesRead = src.read(buff);<newline46mondego> 3   if (nBytesRead < 0) {<newline46mondego> 4     break;<newline46mondego> 5   } else {<newline46mondego> 6     byteStream.write(buff, 0, nBytesRead);<newline46mondego> 7   }<newline46mondego> 8 }<newline46mondego>"
"270splitHere46","43017splitHere46","foo.*(?<!bar)<newline46mondego>"
"271splitHere46","43112splitHere46","Composite comp = new Composite(parent, SWT.NONE | SWT.EMBEDDED);<newline46mondego>Frame frame = SWT_AWT.new_Frame(comp);<newline46mondego>JFreeChart chart = createChart();<newline46mondego>ChartPanel chartPanel = new ChartPanel(chart);<newline46mondego>frame.add(chartPanel);<newline46mondego>"
"272splitHere46","43807splitHere46","DateFormat formatter = new SimpleDateFormat(<doubleQuotes46>MM/dd/yy<doubleQuotes46>);<newline46mondego>Date date = formatter.parse(<doubleQuotes46>01/29/02<doubleQuotes46>);<newline46mondego>"
"273splitHere46","43807splitHere46","SimpleDateFormat"
"274splitHere46","43807splitHere46","Calendar"
"275splitHere46","43807splitHere46","Calendar calendar = Calendar.getInstance();<newline46mondego>calendar.setTime(date);<newline46mondego>"
"276splitHere46","43830splitHere46","SQL> create sequence so_test start with 100 increment by 100 nocache;<newline46mondego><newline46mondego>Sequence created.<newline46mondego><newline46mondego>SQL> select so_test.nextval - 99 as first_seq, so_test.currval as last_seq from dual;<newline46mondego><newline46mondego> FIRST_SEQ   LAST_SEQ<newline46mondego>---------- ----------<newline46mondego>         1        100<newline46mondego><newline46mondego>SQL> /<newline46mondego><newline46mondego> FIRST_SEQ   LAST_SEQ<newline46mondego>---------- ----------<newline46mondego>       101        200<newline46mondego><newline46mondego>SQL> /<newline46mondego><newline46mondego> FIRST_SEQ   LAST_SEQ<newline46mondego>---------- ----------<newline46mondego>       201        300<newline46mondego><newline46mondego>SQL><newline46mondego>"
"277splitHere46","43830splitHere46","SQL> select * from xx;<newline46mondego><newline46mondego>no rows selected<newline46mondego><newline46mondego>SQL> insert into xx values ('x');<newline46mondego><newline46mondego>1 row created.<newline46mondego><newline46mondego>SQL> alter sequence so_test increment by 100;<newline46mondego><newline46mondego>Sequence altered.<newline46mondego><newline46mondego>SQL> rollback;<newline46mondego><newline46mondego>Rollback complete.<newline46mondego><newline46mondego>SQL> select * from xx;<newline46mondego><newline46mondego>Y<newline46mondego>-----<newline46mondego>x<newline46mondego><newline46mondego>SQL><newline46mondego>"
"278splitHere46","43852splitHere46","new SimpleDateFormat(<doubleQuotes46>EEE MMM dd HH:mm:ss zzz yyyy<doubleQuotes46>)<newline46mondego>"
"279splitHere46","43872splitHere46","<%@ taglib prefix=<doubleQuotes46>c<doubleQuotes46> uri=<doubleQuotes46>http://java.sun.com/jsp/jstl/core<doubleQuotes46> %><newline46mondego>"
"280splitHere46","45248splitHere46","TrayIcon"
"281splitHere46","45248splitHere46","displayMessage()"
"282splitHere46","45248splitHere46","TrayIcon"
"283splitHere46","45580splitHere46","ImageIcon"
"284splitHere46","45580splitHere46","new javax.swing.ImageIcon(getClass().getResource(<doubleQuotes46>myimage.jpeg<doubleQuotes46>))<newline46mondego>"
"285splitHere46","45580splitHere46","Class.getResource"
"286splitHere46","45580splitHere46","null"
"287splitHere46","45580splitHere46","ImageIcon"
"288splitHere46","45580splitHere46","java.net.JarURLConnection"
"289splitHere46","45585splitHere46","<% response.setStatus( 403 ); %><newline46mondego>"
"290splitHere46","45585splitHere46","SimpleMappingExceptionResolver"
"291splitHere46","45585splitHere46","PermissionDeniedException"
"292splitHere46","45585splitHere46","permissionDenied.jsp"
"293splitHere46","45585splitHere46","<bean id=<doubleQuotes46>exceptionResolver<doubleQuotes46><newline46mondego>      class=<doubleQuotes46>org.springframework.web.servlet.handler.SimpleMappingExceptionResolver<doubleQuotes46>><newline46mondego>  <property name=<doubleQuotes46>exceptionMappings<doubleQuotes46>><newline46mondego>    <props><newline46mondego>      <prop key=<doubleQuotes46>PermissionDeniedException<doubleQuotes46>>          <newline46mondego>        rescues/permissionDenied<newline46mondego>      </prop><newline46mondego>      ... set other exception/view mappings as <prop>s here ...<newline46mondego>    </props><newline46mondego>  </property><newline46mondego>  <property name=<doubleQuotes46>defaultErrorView<doubleQuotes46> value=<doubleQuotes46>rescues/general<doubleQuotes46> /><newline46mondego></bean><newline46mondego><newline46mondego><bean id=<doubleQuotes46>viewResolver<doubleQuotes46><newline46mondego>      class=<doubleQuotes46>org.springframework.web.servlet.view.InternalResourceViewResolver<doubleQuotes46>><newline46mondego>  <property name=<doubleQuotes46>viewClass<doubleQuotes46> value=<doubleQuotes46>org.springframework.web.servlet.view.JstlView<doubleQuotes46> /><newline46mondego>  <property name=<doubleQuotes46>prefix<doubleQuotes46> value=<doubleQuotes46>/WEB-INF/views/<doubleQuotes46> /><newline46mondego>  <property name=<doubleQuotes46>suffix<doubleQuotes46> value=<doubleQuotes46>.jsp<doubleQuotes46> /><newline46mondego></bean><newline46mondego>"
"294splitHere46","45630splitHere46","boolean finished = false;<newline46mondego>int port = 10000;<newline46mondego>ServerSocket server = new ServerSocket(port);<newline46mondego><newline46mondego>while(!finished)<newline46mondego>{<newline46mondego>    // This will block until a connection is made<newline46mondego>    Socket s = server.accept();<newline46mondego>    // Spawn off some thread (or use a thread pool) to handle this socket<newline46mondego>    // Server will continue to listen<newline46mondego>}<newline46mondego>"
"295splitHere46","45975splitHere46","Integer a = new Integer(2); // or even just Integer a = 2;<newline46mondego>    a *= 10;<newline46mondego>    System.out.println(a);<newline46mondego>"
"296splitHere46","46908splitHere46","for (Map.Entry<String, String> entry : map.entrySet())<newline46mondego>{<newline46mondego>    System.out.println(entry.getKey() + <doubleQuotes46>/<doubleQuotes46> + entry.getValue());<newline46mondego>}<newline46mondego>"
"297splitHere46","47049splitHere46","String.format(<doubleQuotes46>%4d<doubleQuotes46>, i * j);<newline46mondego>"
"298splitHere46","47149splitHere46","package mycode;<newline46mondego><newline46mondego>import java.io.IOException;<newline46mondego><newline46mondego>import javax.servlet.*;<newline46mondego><newline46mondego>/**<newline46mondego> * Allows you to enforce a particular character encoding on incoming requests.<newline46mondego> * @author Robert J. Walker<newline46mondego> */<newline46mondego>public class CharacterEncodingFilter implements Filter {<newline46mondego>    private static final String ENCODINGPARAM = <doubleQuotes46>encoding<doubleQuotes46>;<newline46mondego><newline46mondego>    private String encoding;<newline46mondego><newline46mondego>    public void init(FilterConfig config) throws ServletException {<newline46mondego>	    encoding = config.getInitParameter(ENCODINGPARAM);<newline46mondego><newline46mondego>    	if (encoding != null) {<newline46mondego>		    encoding = encoding.trim();<newline46mondego>	    }<newline46mondego>    }<newline46mondego><newline46mondego>    public void doFilter(ServletRequest request, ServletResponse response, FilterChain chain)<newline46mondego>		    throws IOException, ServletException {<newline46mondego>	    request.setCharacterEncoding(encoding);<newline46mondego>	    chain.doFilter(request, response);<newline46mondego>    }<newline46mondego><newline46mondego>    public void destroy() {<newline46mondego>	    // do nothing<newline46mondego>    }<newline46mondego>}<newline46mondego>"
"299splitHere46","47149splitHere46","<web-app><newline46mondego>    ...<newline46mondego>    <filter><newline46mondego>        <filter-name>characterEncoding</filter-name><newline46mondego>        <filter-class>mycode.CharacterEncodingFilter</filter-class><newline46mondego>        <init-param><newline46mondego>            <param-name>encoding</param-name><newline46mondego>            <param-value>UTF-8</param-value><newline46mondego>        </init-param><newline46mondego>    </filter><newline46mondego>    <filter-mapping><newline46mondego>        <filter-name>characterEncoding</filter-name><newline46mondego>        <url-pattern>/app/*</url-pattern><newline46mondego>    </filter-mapping><newline46mondego>    ...<newline46mondego></web-app><newline46mondego>"
"300splitHere46","47452splitHere46","import java.util.*;<newline46mondego>import javax.mail.*;<newline46mondego>import javax.mail.internet.*;<newline46mondego><newline46mondego>public class Main {<newline46mondego><newline46mondego>    private static String USER_NAME = <doubleQuotes46>*****<doubleQuotes46>;  // GMail user name (just the part before <doubleQuotes46>@gmail.com<doubleQuotes46>)<newline46mondego>    private static String PASSWORD = <doubleQuotes46>********<doubleQuotes46>; // GMail password<newline46mondego>    private static String RECIPIENT = <doubleQuotes46>lizard.bill@myschool.edu<doubleQuotes46>;<newline46mondego><newline46mondego>    public static void main(String[] args) {<newline46mondego>        String from = USER_NAME;<newline46mondego>        String pass = PASSWORD;<newline46mondego>        String[] to = { RECIPIENT }; // list of recipient email addresses<newline46mondego>        String subject = <doubleQuotes46>Java send mail example<doubleQuotes46>;<newline46mondego>        String body = <doubleQuotes46>Welcome to JavaMail!<doubleQuotes46>;<newline46mondego><newline46mondego>        sendFromGMail(from, pass, to, subject, body);<newline46mondego>    }<newline46mondego><newline46mondego>    private static void sendFromGMail(String from, String pass, String[] to, String subject, String body) {<newline46mondego>        Properties props = System.getProperties();<newline46mondego>        String host = <doubleQuotes46>smtp.gmail.com<doubleQuotes46>;<newline46mondego>        props.put(<doubleQuotes46>mail.smtp.starttls.enable<doubleQuotes46>, <doubleQuotes46>true<doubleQuotes46>);<newline46mondego>        props.put(<doubleQuotes46>mail.smtp.host<doubleQuotes46>, host);<newline46mondego>        props.put(<doubleQuotes46>mail.smtp.user<doubleQuotes46>, from);<newline46mondego>        props.put(<doubleQuotes46>mail.smtp.password<doubleQuotes46>, pass);<newline46mondego>        props.put(<doubleQuotes46>mail.smtp.port<doubleQuotes46>, <doubleQuotes46>587<doubleQuotes46>);<newline46mondego>        props.put(<doubleQuotes46>mail.smtp.auth<doubleQuotes46>, <doubleQuotes46>true<doubleQuotes46>);<newline46mondego><newline46mondego>        Session session = Session.getDefaultInstance(props);<newline46mondego>        MimeMessage message = new MimeMessage(session);<newline46mondego><newline46mondego>        try {<newline46mondego>            message.setFrom(new InternetAddress(from));<newline46mondego>            InternetAddress[] toAddress = new InternetAddress[to.length];<newline46mondego><newline46mondego>            // To get the array of addresses<newline46mondego>            for( int i = 0; i < to.length; i++ ) {<newline46mondego>                toAddress[i] = new InternetAddress(to[i]);<newline46mondego>            }<newline46mondego><newline46mondego>            for( int i = 0; i < toAddress.length; i++) {<newline46mondego>                message.addRecipient(Message.RecipientType.TO, toAddress[i]);<newline46mondego>            }<newline46mondego><newline46mondego>            message.setSubject(subject);<newline46mondego>            message.setText(body);<newline46mondego>            Transport transport = session.getTransport(<doubleQuotes46>smtp<doubleQuotes46>);<newline46mondego>            transport.connect(host, from, pass);<newline46mondego>            transport.sendMessage(message, message.getAllRecipients());<newline46mondego>            transport.close();<newline46mondego>        }<newline46mondego>        catch (AddressException ae) {<newline46mondego>            ae.printStackTrace();<newline46mondego>        }<newline46mondego>        catch (MessagingException me) {<newline46mondego>            me.printStackTrace();<newline46mondego>        }<newline46mondego>    }<newline46mondego>}<newline46mondego>"
"301splitHere46","47452splitHere46","catch"
"302splitHere46","47452splitHere46","catch"
"303splitHere46","47628splitHere46","concat()"
"304splitHere46","47628splitHere46","concat()"
"305splitHere46","47628splitHere46","String"
"306splitHere46","47628splitHere46","+"
"307splitHere46","47628splitHere46","toString()"
"308splitHere46","47628splitHere46","concat()"
"309splitHere46","47628splitHere46","public class Concat {<newline46mondego>    String cat(String a, String b) {<newline46mondego>        a += b;<newline46mondego>        return a;<newline46mondego>    }<newline46mondego>}<newline46mondego>"
"310splitHere46","47628splitHere46","java.lang.String cat(java.lang.String, java.lang.String);<newline46mondego>  Code:<newline46mondego>   0:   new     #2; //class java/lang/StringBuilder<newline46mondego>   3:   dup<newline46mondego>   4:   invokespecial   #3; //Method java/lang/StringBuilder.<doubleQuotes46><init><doubleQuotes46>:()V<newline46mondego>   7:   aload_1<newline46mondego>   8:   invokevirtual   #4; //Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;<newline46mondego>   11:  aload_2<newline46mondego>   12:  invokevirtual   #4; //Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;<newline46mondego>   15:  invokevirtual   #5; //Method java/lang/StringBuilder.toString:()Ljava/lang/    String;<newline46mondego>   18:  astore_1<newline46mondego>   19:  aload_1<newline46mondego>   20:  areturn<newline46mondego>"
"311splitHere46","47628splitHere46","a = new StringBuilder()<newline46mondego>    .append(a)<newline46mondego>    .append(b)<newline46mondego>    .toString();<newline46mondego>"
"312splitHere46","47963splitHere46","public void onException (JMSException jsme)<newline46mondego>    {<newline46mondego>        if (!closeRequested)<newline46mondego>        {<newline46mondego>            this.disconnect();<newline46mondego>            this.establishConnection(connectionProps, queueName, uname, pword, clientID, messageSelector);<newline46mondego>        }        <newline46mondego>        else<newline46mondego>        {<newline46mondego>            //Client requested close so do not try to reconnect<newline46mondego>        }<newline46mondego>    }<newline46mondego>"
"313splitHere46","47963splitHere46","while(!initialized)"
"314splitHere46","48678splitHere46","DatagramSocket(int port, InetAddress laddr)<newline46mondego>Creates a datagram socket, bound to the specified local address.<newline46mondego>"
"315splitHere46","49410splitHere46","<bodycontent>JSP</bodycontent><newline46mondego>"
"316splitHere46","49410splitHere46","JspFragment body = getJspBody(); <newline46mondego>StringWriter stringWriter = new StringWriter(); <newline46mondego>StringBuffer buff = stringWriter.getBuffer(); <newline46mondego>buff.append(<doubleQuotes46><h1><doubleQuotes46>); <newline46mondego>body.invoke(stringWriter); <newline46mondego>buff.append(<doubleQuotes46></h1><doubleQuotes46>); <newline46mondego>out.println(stringWriter);<newline46mondego>"
"317splitHere46","49410splitHere46","<jsp:useBean id=<doubleQuotes46>ImportantNoticeBean<doubleQuotes46> scope=<doubleQuotes46>page class=<doubleQuotes46>com.mysite.beans.ImportantNoticeProcessBean<doubleQuotes46>/><newline46mondego><c:forEach var=<doubleQuotes46>noticeBean<doubleQuotes46> items=<doubleQuotes46>${ImportantNoticeBean.importantNotices}<doubleQuotes46>><newline46mondego>    <mysite:notice importantNotice=<doubleQuotes46>${noticeBean}<doubleQuotes46>><newline46mondego>        <mysite:quote author=<doubleQuotes46>Some Guy<doubleQuotes46>>Quote this</mysite:quote><newline46mondego>        <mysite:messagebody author=<doubleQuotes46>Some Guy<doubleQuotes46> /><newline46mondego>    </mysite:notice><newline46mondego></c:forEach><newline46mondego>"
"318splitHere46","49498splitHere46","E(X) = Enctrypt message X<newline46mondego>D(X) = Dectrypt X. (Note that D(E(X)) = X)<newline46mondego>IV = Initialization vector. A random sequence to bootstrap the CBC algorithm<newline46mondego>CBC = Cipher block chaining.<newline46mondego>"
"319splitHere46","49498splitHere46","1. Generate an IV, just random bits.<newline46mondego>2. Calculate E( P1 xor IV) call this C1<newline46mondego>3. Calculate E( P2 xor C1) call this C2<newline46mondego>4. Calculate E( P3 xor C2) call this C3.<newline46mondego>"
"320splitHere46","49953splitHere46","[line.replace(<doubleQuotes46>spam<doubleQuotes46>,<doubleQuotes46>eggs<doubleQuotes46>) for line in open(<doubleQuotes46>somefile.txt<doubleQuotes46>) if line.startswith(<doubleQuotes46>nee<doubleQuotes46>)]"
"321splitHere46","49953splitHere46","people.sort(key=lambda p: p.age)"
"322splitHere46","49953splitHere46","Array.sort"
"323splitHere46","49953splitHere46","Student(name=<doubleQuotes46>Eli<doubleQuotes46>, age=25)"
"324splitHere46","49953splitHere46","spam, eggs = nee()"
"325splitHere46","49953splitHere46","Document doc = DocumentBuilderFactory.newInstance().newDocumentBuilder().parse(<doubleQuotes46>test.xml<doubleQuotes46>);"
"326splitHere46","49953splitHere46","doc = parse(<doubleQuotes46>test.xml<doubleQuotes46>)"
"327splitHere46","50128splitHere46","Device device = Display.getCurrent ();<newline46mondego>Color red = new Color (device, 255, 0, 0);<newline46mondego>"
"328splitHere46","50543splitHere46","double r = 5.1234;<newline46mondego>System.out.println(r); // r is 5.1234<newline46mondego><newline46mondego>int decimalPlaces = 2;<newline46mondego>BigDecimal bd = new BigDecimal(r);<newline46mondego><newline46mondego>// setScale is immutable<newline46mondego>bd = bd.setScale(decimalPlaces, BigDecimal.ROUND_HALF_UP);<newline46mondego>r = bd.doubleValue();<newline46mondego><newline46mondego>System.out.println(r); // r is 5.12<newline46mondego>"
"329splitHere46","50543splitHere46","f = (float) (Math.round(n*100.0f)/100.0f);<newline46mondego>"
"330splitHere46","50543splitHere46","DecimalFormat df2 = new DecimalFormat( <doubleQuotes46>#,###,###,##0.00<doubleQuotes46> );<newline46mondego>double dd = 100.2397;<newline46mondego>double dd2dec = new Double(df2.format(dd)).doubleValue();<newline46mondego><newline46mondego>// The value of dd2dec will be 100.24<newline46mondego>"
"331splitHere46","50573splitHere46","Thread.holdsLock(Object)"
"332splitHere46","50573splitHere46","ReentrantLock"
"333splitHere46","51623splitHere46","Test"
"334splitHere46","51623splitHere46","E"
"335splitHere46","51623splitHere46","Class<E>"
"336splitHere46","51623splitHere46","public class Test<E> {<newline46mondego>    private final Class<E> clazz;<newline46mondego>    public Test(Class<E> clazz) {<newline46mondego>        if (clazz == null) {<newline46mondego>            throw new NullPointerException();<newline46mondego>        }<newline46mondego>        this.clazz = clazz;<newline46mondego>    }<newline46mondego>    // To make things easier on clients:<newline46mondego>    public static <T> Test<T> create(Class<T> clazz) {<newline46mondego>        return new Test<T>(clazz);<newline46mondego>    }<newline46mondego>    public boolean sameClassAs(Object o) {<newline46mondego>        return o != null && o.getClass() == clazz;<newline46mondego>    }<newline46mondego>}<newline46mondego>"
"337splitHere46","51623splitHere46","Class.isAssignableFrom"
"338splitHere46","51623splitHere46","Class"
"339splitHere46","51623splitHere46","E"
"340splitHere46","51623splitHere46","Test"
"341splitHere46","51623splitHere46","Class"
"342splitHere46","51623splitHere46","java.util.Collections.checkedSet"
"343splitHere46","51753splitHere46","org.apache.commons.io.IOUtils"
"344splitHere46","51753splitHere46","copy(InputStream,OutputStream)"
"345splitHere46","51753splitHere46","InputStream in;<newline46mondego>OutputStream out;<newline46mondego>IOUtils.copy(in,out);<newline46mondego>"
"346splitHere46","51753splitHere46","IOUtils"
"347splitHere46","52682splitHere46","import java.lang.instrument.Instrumentation;<newline46mondego><newline46mondego>public class ObjectSizeFetcher {<newline46mondego>    private static Instrumentation instrumentation;<newline46mondego><newline46mondego>    public static void premain(String args, Instrumentation inst) {<newline46mondego>        instrumentation = inst;<newline46mondego>    }<newline46mondego><newline46mondego>    public static long getObjectSize(Object o) {<newline46mondego>        return instrumentation.getObjectSize(o);<newline46mondego>    }<newline46mondego>}<newline46mondego>"
"348splitHere46","52682splitHere46","MANIFEST.MF"
"349splitHere46","52682splitHere46","Premain-Class: ObjectSizeFetcher<newline46mondego>"
"350splitHere46","52682splitHere46","public class C {<newline46mondego>    private int x;<newline46mondego>    private int y;<newline46mondego><newline46mondego>    public static void main(String [] args) {<newline46mondego>        System.out.println(ObjectSizeFetcher.getObjectSize(new C()));<newline46mondego>    }<newline46mondego>}<newline46mondego>"
"351splitHere46","52682splitHere46","java -javaagent:ObjectSizeFetcherAgent.jar C<newline46mondego>"
"352splitHere46","52966splitHere46","import java.awt.*;<newline46mondego>import java.util.*;<newline46mondego>public class Hal{<newline46mondego><newline46mondego>    public static void main(String[] args) throws Exception{<newline46mondego>    	Robot hal = new Robot();<newline46mondego>    	Random random = new Random();<newline46mondego>    	while(true){<newline46mondego>    		hal.delay(1000 * 60);<newline46mondego>    		int x = random.nextInt() % 640;<newline46mondego>    		int y = random.nextInt() % 480;<newline46mondego>    		hal.mouseMove(x,y);<newline46mondego>    	}<newline46mondego>    }<newline46mondego>}<newline46mondego>"
"353splitHere46","52973splitHere46","ANT_OPTS=<doubleQuotes46>-Dhttp.proxyHost=proxy.y.com<doubleQuotes46> ant doc"
"354splitHere46","53419splitHere46","log4j.logger.net.sf.hibernate=DEBUG<newline46mondego>log4j.logger.org.hibernate=DEBUG<newline46mondego>"
"355splitHere46","53448splitHere46","_____________<newline46mondego>          |__PROBLEMS__|          |__PEOPLE__|<newline46mondego>          |id <PK>     |          |          |<newline46mondego>          |person <FK> | -------->|          |<newline46mondego>          |problemType |          |_________ |<newline46mondego>          --------------<newline46mondego>"
"356splitHere46","53830splitHere46","echo"
"357splitHere46","53830splitHere46","cat"
"358splitHere46","53830splitHere46","int"
"359splitHere46","53830splitHere46","ArrayList"
"360splitHere46","53856splitHere46","gcj -c -g -O MyJavaProg.java<newline46mondego>"
"361splitHere46","53856splitHere46","gcj --main=MyJavaProg -o MyJavaProg MyJavaProg.o<newline46mondego>"
"362splitHere46","53856splitHere46","g++ -o mycxxprog.exe mycxxprog.o<newline46mondego>"
"363splitHere46","54454splitHere46","String propFile = <doubleQuotes46>/path/to/file<doubleQuotes46>;<newline46mondego>Properties props = new Properties();<newline46mondego>/*set some properties here*/<newline46mondego>Properties tmp = new Properties() {<newline46mondego><newline46mondego>  @Override<newline46mondego>  public Set<Object> keySet()<newline46mondego>  {<newline46mondego>    return Collections.unmodifiableSet(new TreeSet<Object>(super.keySet()));<newline46mondego>  }<newline46mondego><newline46mondego>};<newline46mondego>tmp.putAll(props);<newline46mondego>try {<newline46mondego>    FileOutputStream xmlStream = new FileOutputStream(propFile);<newline46mondego>    /*this comes out SORTED! */<newline46mondego>    tmp.storeToXML(xmlStream,<doubleQuotes46><doubleQuotes46>);<newline46mondego>} catch (IOException e) {<newline46mondego>    e.printStackTrace();<newline46mondego>}<newline46mondego>"
"364splitHere46","54454splitHere46","keySet"
"365splitHere46","54454splitHere46","keys()"
"366splitHere46","54454splitHere46","Hashtable"
"367splitHere46","54454splitHere46","keySet"
"368splitHere46","54502splitHere46","DecimalFormat format = new DecimalFormat(<doubleQuotes46>###.##<doubleQuotes46>);<newline46mondego><newline46mondego>    double[] doubles = {123.45, 99.0, 23.2, 45.0};<newline46mondego>    for(int i=0;i<doubles.length;i++){<newline46mondego>        System.out.println(format.format(doubles[i]));<newline46mondego>    }<newline46mondego>"
"369splitHere46","54799splitHere46","JComboBox combo = new JComboBox();<newline46mondego>JTextField tf = (JTextField)(combo.getEditor().getEditorComponent());<newline46mondego>tf.setInputVerifier(verifyer);<newline46mondego>"
"370splitHere46","54912splitHere46","ArrayList newArrayList = (ArrayList) oldArrayList.clone();<newline46mondego>"
"371splitHere46","54927splitHere46","setOpaque(false)"
"372splitHere46","54950splitHere46","try {<newline46mondego>        String line;<newline46mondego>        Process p = Runtime.getRuntime().exec(<doubleQuotes46>ps -e<doubleQuotes46>);<newline46mondego>        BufferedReader input =<newline46mondego>                new BufferedReader(new InputStreamReader(p.getInputStream()));<newline46mondego>        while ((line = input.readLine()) != null) {<newline46mondego>            System.out.println(line); //<-- Parse data here.<newline46mondego>        }<newline46mondego>        input.close();<newline46mondego>    } catch (Exception err) {<newline46mondego>        err.printStackTrace();<newline46mondego>    }<newline46mondego>"
"373splitHere46","54950splitHere46","Process p = Runtime.getRuntime().exec<newline46mondego>        (System.getenv(<doubleQuotes46>windir<doubleQuotes46>) +<doubleQuotes46>\\system32\\<doubleQuotes46>+<doubleQuotes46>tasklist.exe<doubleQuotes46>);<newline46mondego>"
"374splitHere46","55307splitHere46","chcp 65001 && start.bat"
"375splitHere46","55446splitHere46","#include <boost/utility/enable_if.hpp><newline46mondego>#include <boost/type_traits/is_base_of.hpp><newline46mondego><newline46mondego>struct base {};<newline46mondego><newline46mondego>template <typename ImplementationClass, class Enable = void><newline46mondego>class WrapperClass;<newline46mondego><newline46mondego>template <typename ImplementationClass><newline46mondego>class WrapperClass<ImplementationClass,<newline46mondego>      typename boost::enable_if<<newline46mondego>        boost::is_base_of<base,ImplementationClass> >::type><newline46mondego>{};<newline46mondego><newline46mondego>struct derived : base {};<newline46mondego>struct not_derived {};<newline46mondego><newline46mondego>int main() {<newline46mondego>    WrapperClass<derived> x;<newline46mondego><newline46mondego>    // Compile error here:<newline46mondego>    WrapperClass<not_derived> y;<newline46mondego>}<newline46mondego>"
"376splitHere46","55446splitHere46","#include <boost/static_assert.hpp><newline46mondego>#include <boost/type_traits/is_base_of.hpp><newline46mondego><newline46mondego>struct base {};<newline46mondego><newline46mondego>template <typename ImplementationClass><newline46mondego>class WrapperClass<newline46mondego>{<newline46mondego>    BOOST_STATIC_ASSERT((<newline46mondego>        boost::is_base_of<base, ImplementationClass>::value));<newline46mondego>};<newline46mondego>"
"377splitHere46","55582splitHere46","InitialContext.getEnvironment().get(Context.PROVIDER_URL)"
"378splitHere46","55788splitHere46","ServletOutputStream out = response.getOutputStream();<newline46mondego>InputStream in = [ code to get source input stream ];<newline46mondego>String mimeType = [ code to get mimetype of data to be served ];<newline46mondego>byte[] bytes = new byte[FILEBUFFERSIZE];<newline46mondego>int bytesRead;<newline46mondego><newline46mondego>response.setContentType(mimeType);<newline46mondego><newline46mondego>while ((bytesRead = in.read(bytes)) != -1) {<newline46mondego>    out.write(bytes, 0, bytesRead);<newline46mondego>}<newline46mondego><newline46mondego>// do the following in a finally block:<newline46mondego>in.close();<newline46mondego>out.close();<newline46mondego>"
"379splitHere46","56370splitHere46","transform"
"380splitHere46","56626splitHere46","<%@ page contentType=<doubleQuotes46>text/html; charset=UTF-8<doubleQuotes46> %><newline46mondego>"
"381splitHere46","56815splitHere46","private static final ThreadLocal<DocumentBuilder> builderLocal =<newline46mondego>    new ThreadLocal<DocumentBuilder>() {<newline46mondego>        @Override protected DocumentBuilder initialValue() {<newline46mondego>            try {<newline46mondego>                return<newline46mondego>                    DocumentBuilderFactory<newline46mondego>                        .newInstance(<newline46mondego>                            <doubleQuotes46>xx.MyDocumentBuilderFactory<doubleQuotes46>,<newline46mondego>                            getClass().getClassLoader()<newline46mondego>                        ).newDocumentBuilder();<newline46mondego>            } catch (ParserConfigurationException exc) {<newline46mondego>                throw new IllegalArgumentException(exc);<newline46mondego>            }<newline46mondego>        }<newline46mondego>    };<newline46mondego>"
"382splitHere46","56987splitHere46","OuterClassName.this"
"383splitHere46","56987splitHere46","a.this.otherMethod()"
"384splitHere46","57100splitHere46","DetachedCriteria"
"385splitHere46","57100splitHere46","IN"
"386splitHere46","57100splitHere46","someValue"
"387splitHere46","57100splitHere46","DetachedCriteria bonuses = DetachedCriteria.forClass(Bonus.class);<newline46mondego>List stocks = session.createCriteria(Stock.class)<newline46mondego>    .add(Property.forName(<doubleQuotes46>someValue<doubleQuotes46>).in(bonuses)).list();<newline46mondego>"
"388splitHere46","57100splitHere46","select stock<newline46mondego>from com.something.Stock as stock<newline46mondego>where stock.someValue in (select bonus.id from com.something.Bonus as bonus)<newline46mondego>"
"389splitHere46","57100splitHere46","someValue"
"390splitHere46","57185splitHere46","ArrayList"
"391splitHere46","57185splitHere46","Object[]"
"392splitHere46","57185splitHere46","ArrayList"
"393splitHere46","57185splitHere46","ArrayList"
"394splitHere46","57185splitHere46","ArrayList"
"395splitHere46","57526splitHere46","Restrictions.disjuntion()"
"396splitHere46","57526splitHere46","session.createCriteria(Whatever.class)<newline46mondego>    .add(Restrictions.disjunction()<newline46mondego>        .add(Restrictions.eq(<doubleQuotes46>name<doubleQuotes46>, queryString))<newline46mondego>        .add(Restrictions.eq(<doubleQuotes46>address<doubleQuotes46>, queryString))<newline46mondego>        .add(Restrictions.eq(<doubleQuotes46>phoneNumber<doubleQuotes46>, queryString))<newline46mondego>    );<newline46mondego>"
"397splitHere46","57595splitHere46","public class MyServlet extends HttpServlet {<newline46mondego><newline46mondego>    public void init(final ServletConfig config) {<newline46mondego>        final String context = config.getServletContext().getRealPath(<doubleQuotes46>/<doubleQuotes46>);<newline46mondego>        ...<newline46mondego>    }<newline46mondego><newline46mondego>    ...<newline46mondego>}<newline46mondego>"
"398splitHere46","58166splitHere46","Toolkit.getDefaultToolkit().<newline46mondego>        addAWTEventListener(listener, AWTEvent.MOUSE_EVENT_MASK);<newline46mondego>"
"399splitHere46","58326splitHere46","java.awt.Robot"
"400splitHere46","58326splitHere46","Rectangle screenRect = new Rectangle(Toolkit.getDefaultToolkit().getScreenSize());<newline46mondego>BufferedImage capture = new Robot().createScreenCapture(screenRect);<newline46mondego>ImageIO.write(capture, <doubleQuotes46>bmp<doubleQuotes46>, new File(args[0]));<newline46mondego>"
"401splitHere46","58552splitHere46","public int foo() {<newline46mondego>    Resource f = new Resource();<newline46mondego>    try {<newline46mondego>        DoSomething(f);<newline46mondego>    }<newline46mondego>    finally {<newline46mondego>        f.Release();<newline46mondego>    }<newline46mondego>}<newline46mondego>"
"402splitHere46","58591splitHere46","HttpClient client = new HttpClient();<newline46mondego>HttpMethod method = new GetMethod(<doubleQuotes46>http://api.search.yahoo.com/WebSearchService/V1/webSearch?appid=restbook&query=HttpClient<doubleQuotes46>);<newline46mondego>client.executeMethod(method);<newline46mondego>"
"403splitHere46","58963splitHere46","combo.addActionListener (new ActionListener () {<newline46mondego>    public void actionPerformed(ActionEvent e) {<newline46mondego>        doSomething();<newline46mondego>    }<newline46mondego>});<newline46mondego>"
"404splitHere46","58963splitHere46","addItemListener()"
"405splitHere46","58963splitHere46","ItemEvents"
"406splitHere46","59119splitHere46","protected static <T extends Comparable<T>> int nullCompare(T o1, T o2) {<newline46mondego>"
"407splitHere46","59710splitHere46","public static void main(String[] args) throws Exception {<newline46mondego><newline46mondego>        File xsltFile = new File(<doubleQuotes46>mardownXSLT.xslt<doubleQuotes46>);<newline46mondego><newline46mondego>        Source xmlSource = new StreamSource(new StringReader(theHTML));<newline46mondego>        Source xsltSource = new StreamSource(xsltFile);<newline46mondego><newline46mondego>        TransformerFactory transFact =<newline46mondego>                TransformerFactory.newInstance();<newline46mondego>        Transformer trans = transFact.newTransformer(xsltSource);<newline46mondego><newline46mondego>        StringWriter result = new StringWriter();<newline46mondego>        trans.transform(xmlSource, new StreamResult(result));<newline46mondego>    }<newline46mondego>"
"408splitHere46","59875splitHere46","<bean id=<doubleQuotes46>doubleValue<doubleQuotes46> class=<doubleQuotes46>java.lang.Double<doubleQuotes46>><newline46mondego>    <constructor-arg index=<doubleQuotes46>0<doubleQuotes46> value=<doubleQuotes46>3.7<doubleQuotes46>/><newline46mondego></bean><newline46mondego>"
"409splitHere46","59875splitHere46","<bean id=<doubleQuotes46>someOtherBean<doubleQuotes46> ...><newline46mondego>    <property name=<doubleQuotes46>value<doubleQuotes46> ref=<doubleQuotes46>doubleValue<doubleQuotes46>/><newline46mondego></bean><newline46mondego>"
"410splitHere46","59960splitHere46","public static void main(String[] args) {<newline46mondego>	try {<newline46mondego>		java.net.URL connection_url = new java.net.URL(<doubleQuotes46>http://:/path<doubleQuotes46>);<newline46mondego>		System.out.println(<doubleQuotes46>Instantiated new URL: <doubleQuotes46> + connection_url);<newline46mondego>	}<newline46mondego>	catch (MalformedURLException e) {<newline46mondego>		e.printStackTrace();<newline46mondego>	}<newline46mondego>}<newline46mondego>"
"411splitHere46","60161splitHere46","Pattern.quote(<doubleQuotes46>$5<doubleQuotes46>);<newline46mondego>"
"412splitHere46","60578splitHere46","// Assume you already have a processBuilder all configured and ready to go<newline46mondego>final Process process = processBuilder.start();<newline46mondego>new Thread(new Runnable() {public void run() {<newline46mondego>  IOUtils.copy(process.getOutputStream(), System.out);<newline46mondego>} } ).start();<newline46mondego>new Thread(new Runnable() {public void run() {<newline46mondego>  IOUtils.copy(process.getErrorStream(), System.err);<newline46mondego>} } ).start();<newline46mondego>new Thread(new Runnable() {public void run() {<newline46mondego>  IOUtils.copy(System.in, process.getInputStream());<newline46mondego>} } ).start();<newline46mondego>"
"413splitHere46","60615splitHere46","ClassLoader loader = this.getClass().getClassLoader();<newline46mondego>Class clazz = loader.loadClass(<doubleQuotes46>acme.AppletAddon<doubleQuotes46>);<newline46mondego>"
"414splitHere46","60615splitHere46","URL[] urls = new URL[]{new URL(<doubleQuotes46>http://localhost:8080/addon.jar<doubleQuotes46>)};<newline46mondego>URLClassLoader loader = URLClassLoader.newInstance(urls,this.getClass().getClassLoader());<newline46mondego>Class clazz = loader.loadClass(<doubleQuotes46>acme.AppletAddon<doubleQuotes46>);<newline46mondego>"
"415splitHere46","60775splitHere46","URLClassLoader child = new URLClassLoader (myJar.toURL(), this.getClass().getClassLoader());<newline46mondego>Class classToLoad = Class.forName (<doubleQuotes46>com.MyClass<doubleQuotes46>, true, child);<newline46mondego>Method method = classToLoad.getDeclaredMethod (<doubleQuotes46>myMethod<doubleQuotes46>);<newline46mondego>Object instance = classToLoad.newInstance ();<newline46mondego>Object result = method.invoke (instance);<newline46mondego>"
"416splitHere46","60961splitHere46","public static boolean isLineIn(Line.Info lineInfo) {<newline46mondego>    Line.Info[] detected = AudioSystem.getSourceLineInfo(Port.Info.LINE_IN);<newline46mondego>    for (Line.Info lineIn : detected) {<newline46mondego>        if (lineIn.matches(lineInfo)) {<newline46mondego>            return true;<newline46mondego>        }<newline46mondego>    }<newline46mondego>    return false;<newline46mondego>}<newline46mondego>"
"417splitHere46","61813splitHere46","<%@ page contentType=<doubleQuotes46>text/html;charset=UTF-8<doubleQuotes46> pageEncoding=<doubleQuotes46>UTF-8<doubleQuotes46> language=<doubleQuotes46>java<doubleQuotes46> %><newline46mondego>"
"418splitHere46","61982splitHere46","setAcceptor(TabAcceptor a_acceptor)"
"419splitHere46","61982splitHere46","true"
"420splitHere46","61982splitHere46","/** Modified DnDTabbedPane.java<newline46mondego> * http://java-swing-tips.blogspot.com/2008/04/drag-and-drop-tabs-in-jtabbedpane.html<newline46mondego> * originally written by Terai Atsuhiro.<newline46mondego> * so that tabs can be transfered from one pane to another.<newline46mondego> * eed3si9n.<newline46mondego> */<newline46mondego><newline46mondego>import java.awt.*;<newline46mondego>import java.awt.datatransfer.*;<newline46mondego>import java.awt.dnd.*;<newline46mondego>import java.awt.geom.*;<newline46mondego>import java.awt.image.*;<newline46mondego>import javax.swing.*;<newline46mondego><newline46mondego>public class DnDTabbedPane extends JTabbedPane {<newline46mondego>	public static final long serialVersionUID = 1L;<newline46mondego>	private static final int LINEWIDTH = 3;<newline46mondego>	private static final String NAME = <doubleQuotes46>TabTransferData<doubleQuotes46>;<newline46mondego>	private final DataFlavor FLAVOR = new DataFlavor(<newline46mondego>			DataFlavor.javaJVMLocalObjectMimeType, NAME);<newline46mondego>	private static GhostGlassPane s_glassPane = new GhostGlassPane();<newline46mondego><newline46mondego>	private boolean m_isDrawRect = false;<newline46mondego>	private final Rectangle2D m_lineRect = new Rectangle2D.Double();<newline46mondego><newline46mondego>	private final Color m_lineColor = new Color(0, 100, 255);<newline46mondego>	private TabAcceptor m_acceptor = null;<newline46mondego><newline46mondego>	public DnDTabbedPane() {<newline46mondego>		super();<newline46mondego>		final DragSourceListener dsl = new DragSourceListener() {<newline46mondego>			public void dragEnter(DragSourceDragEvent e) {<newline46mondego>				e.getDragSourceContext().setCursor(DragSource.DefaultMoveDrop);<newline46mondego>			}<newline46mondego><newline46mondego>			public void dragExit(DragSourceEvent e) {<newline46mondego>				e.getDragSourceContext()<newline46mondego>						.setCursor(DragSource.DefaultMoveNoDrop);<newline46mondego>				m_lineRect.setRect(0, 0, 0, 0);<newline46mondego>				m_isDrawRect = false;<newline46mondego>				s_glassPane.setPoint(new Point(-1000, -1000));<newline46mondego>				s_glassPane.repaint();<newline46mondego>			}<newline46mondego><newline46mondego>			public void dragOver(DragSourceDragEvent e) {<newline46mondego>				//e.getLocation()<newline46mondego>				//This method returns a Point indicating the cursor location in screen coordinates at the moment<newline46mondego><newline46mondego>				TabTransferData data = getTabTransferData(e);<newline46mondego>				if (data == null) {<newline46mondego>					e.getDragSourceContext().setCursor(<newline46mondego>							DragSource.DefaultMoveNoDrop);<newline46mondego>					return;<newline46mondego>				} // if<newline46mondego><newline46mondego>				/*<newline46mondego>				Point tabPt = e.getLocation();<newline46mondego>				SwingUtilities.convertPointFromScreen(tabPt, DnDTabbedPane.this);<newline46mondego>				if (DnDTabbedPane.this.contains(tabPt)) {<newline46mondego>					int targetIdx = getTargetTabIndex(tabPt);<newline46mondego>					int sourceIndex = data.getTabIndex();<newline46mondego>					if (getTabAreaBound().contains(tabPt)<newline46mondego>							&& (targetIdx >= 0)<newline46mondego>							&& (targetIdx != sourceIndex)<newline46mondego>							&& (targetIdx != sourceIndex + 1)) {<newline46mondego>						e.getDragSourceContext().setCursor(<newline46mondego>								DragSource.DefaultMoveDrop);<newline46mondego><newline46mondego>						return;<newline46mondego>					} // if<newline46mondego><newline46mondego>					e.getDragSourceContext().setCursor(<newline46mondego>							DragSource.DefaultMoveNoDrop);<newline46mondego>					return;<newline46mondego>				} // if<newline46mondego>				*/<newline46mondego><newline46mondego>				e.getDragSourceContext().setCursor(<newline46mondego>						DragSource.DefaultMoveDrop);<newline46mondego>			}<newline46mondego><newline46mondego>			public void dragDropEnd(DragSourceDropEvent e) {<newline46mondego>				m_isDrawRect = false;<newline46mondego>				m_lineRect.setRect(0, 0, 0, 0);<newline46mondego>				// m_dragTabIndex = -1;<newline46mondego><newline46mondego>				if (hasGhost()) {<newline46mondego>					s_glassPane.setVisible(false);<newline46mondego>					s_glassPane.setImage(null);<newline46mondego>				}<newline46mondego>			}<newline46mondego><newline46mondego>			public void dropActionChanged(DragSourceDragEvent e) {<newline46mondego>			}<newline46mondego>		};<newline46mondego><newline46mondego>		final DragGestureListener dgl = new DragGestureListener() {<newline46mondego>			public void dragGestureRecognized(DragGestureEvent e) {<newline46mondego>				// System.out.println(<doubleQuotes46>dragGestureRecognized<doubleQuotes46>);<newline46mondego><newline46mondego>				Point tabPt = e.getDragOrigin();<newline46mondego>				int dragTabIndex = indexAtLocation(tabPt.x, tabPt.y);<newline46mondego>				if (dragTabIndex < 0) {<newline46mondego>					return;<newline46mondego>				} // if<newline46mondego><newline46mondego>				initGlassPane(e.getComponent(), e.getDragOrigin(), dragTabIndex);<newline46mondego>				try {<newline46mondego>					e.startDrag(DragSource.DefaultMoveDrop, <newline46mondego>							new TabTransferable(DnDTabbedPane.this, dragTabIndex), dsl);<newline46mondego>				} catch (InvalidDnDOperationException idoe) {<newline46mondego>					idoe.printStackTrace();<newline46mondego>				}<newline46mondego>			}<newline46mondego>		};<newline46mondego><newline46mondego>		//dropTarget =<newline46mondego>		new DropTarget(this, DnDConstants.ACTION_COPY_OR_MOVE,<newline46mondego>				new CDropTargetListener(), true);<newline46mondego>		new DragSource().createDefaultDragGestureRecognizer(this,<newline46mondego>				DnDConstants.ACTION_COPY_OR_MOVE, dgl);<newline46mondego>		m_acceptor = new TabAcceptor() {<newline46mondego>			public boolean isDropAcceptable(DnDTabbedPane a_component, int a_index) {<newline46mondego>				return true;<newline46mondego>			}<newline46mondego>		};<newline46mondego>	}<newline46mondego><newline46mondego>	public TabAcceptor getAcceptor() {<newline46mondego>		return m_acceptor;<newline46mondego>	}<newline46mondego><newline46mondego>	public void setAcceptor(TabAcceptor a_value) {<newline46mondego>		m_acceptor = a_value;<newline46mondego>	}<newline46mondego><newline46mondego>	private TabTransferData getTabTransferData(DropTargetDropEvent a_event) {		<newline46mondego>		try {<newline46mondego>			TabTransferData data = (TabTransferData) a_event.getTransferable().getTransferData(FLAVOR);				<newline46mondego>			return data;<newline46mondego>		} catch (Exception e) {<newline46mondego>			e.printStackTrace();<newline46mondego>		}<newline46mondego><newline46mondego>		return null;<newline46mondego>	}<newline46mondego><newline46mondego>	private TabTransferData getTabTransferData(DropTargetDragEvent a_event) {<newline46mondego>		try {<newline46mondego>			TabTransferData data = (TabTransferData) a_event.getTransferable().getTransferData(FLAVOR);				<newline46mondego>			return data;<newline46mondego>		} catch (Exception e) {<newline46mondego>			e.printStackTrace();<newline46mondego>		}<newline46mondego><newline46mondego>		return null;<newline46mondego>	}<newline46mondego><newline46mondego>	private TabTransferData getTabTransferData(DragSourceDragEvent a_event) {<newline46mondego>		try {<newline46mondego>			TabTransferData data = (TabTransferData) a_event.getDragSourceContext()<newline46mondego>				.getTransferable().getTransferData(FLAVOR);				<newline46mondego>			return data;<newline46mondego>		} catch (Exception e) {<newline46mondego>			e.printStackTrace();<newline46mondego>		}<newline46mondego><newline46mondego>		return null;		<newline46mondego>	}<newline46mondego><newline46mondego>	class TabTransferable implements Transferable {<newline46mondego>		private TabTransferData m_data = null;<newline46mondego><newline46mondego>		public TabTransferable(DnDTabbedPane a_tabbedPane, int a_tabIndex) {<newline46mondego>			m_data = new TabTransferData(DnDTabbedPane.this, a_tabIndex);<newline46mondego>		}<newline46mondego><newline46mondego>		public Object getTransferData(DataFlavor flavor) {<newline46mondego>			return m_data;<newline46mondego>			// return DnDTabbedPane.this;<newline46mondego>		}<newline46mondego><newline46mondego>		public DataFlavor[] getTransferDataFlavors() {<newline46mondego>			DataFlavor[] f = new DataFlavor[1];<newline46mondego>			f[0] = FLAVOR;<newline46mondego>			return f;<newline46mondego>		}<newline46mondego><newline46mondego>		public boolean isDataFlavorSupported(DataFlavor flavor) {<newline46mondego>			return flavor.getHumanPresentableName().equals(NAME);<newline46mondego>		}		<newline46mondego>	}<newline46mondego><newline46mondego>	class TabTransferData {<newline46mondego>		private DnDTabbedPane m_tabbedPane = null;<newline46mondego>		private int m_tabIndex = -1;<newline46mondego><newline46mondego>		public TabTransferData() {<newline46mondego>		}<newline46mondego><newline46mondego>		public TabTransferData(DnDTabbedPane a_tabbedPane, int a_tabIndex) {<newline46mondego>			m_tabbedPane = a_tabbedPane;<newline46mondego>			m_tabIndex = a_tabIndex;<newline46mondego>		}<newline46mondego><newline46mondego>		public DnDTabbedPane getTabbedPane() {<newline46mondego>			return m_tabbedPane;<newline46mondego>		}<newline46mondego><newline46mondego>		public void setTabbedPane(DnDTabbedPane pane) {<newline46mondego>			m_tabbedPane = pane;<newline46mondego>		}<newline46mondego><newline46mondego>		public int getTabIndex() {<newline46mondego>			return m_tabIndex;<newline46mondego>		}<newline46mondego><newline46mondego>		public void setTabIndex(int index) {<newline46mondego>			m_tabIndex = index;<newline46mondego>		}<newline46mondego>	}<newline46mondego><newline46mondego>	private Point buildGhostLocation(Point a_location) {<newline46mondego>		Point retval = new Point(a_location);<newline46mondego><newline46mondego>		switch (getTabPlacement()) {<newline46mondego>			case JTabbedPane.TOP: {<newline46mondego>				retval.y = 1;<newline46mondego>				retval.x -= s_glassPane.getGhostWidth() / 2;<newline46mondego>			} break;<newline46mondego><newline46mondego>			case JTabbedPane.BOTTOM: {<newline46mondego>				retval.y = getHeight() - 1 - s_glassPane.getGhostHeight();<newline46mondego>				retval.x -= s_glassPane.getGhostWidth() / 2;<newline46mondego>			} break;<newline46mondego><newline46mondego>			case JTabbedPane.LEFT: {<newline46mondego>				retval.x = 1;<newline46mondego>				retval.y -= s_glassPane.getGhostHeight() / 2;<newline46mondego>			} break;<newline46mondego><newline46mondego>			case JTabbedPane.RIGHT: {<newline46mondego>				retval.x = getWidth() - 1 - s_glassPane.getGhostWidth();<newline46mondego>				retval.y -= s_glassPane.getGhostHeight() / 2;<newline46mondego>			} break;<newline46mondego>		} // switch<newline46mondego><newline46mondego>		retval = SwingUtilities.convertPoint(DnDTabbedPane.this,<newline46mondego>				retval, s_glassPane);<newline46mondego>		return retval;<newline46mondego>	}<newline46mondego><newline46mondego>	class CDropTargetListener implements DropTargetListener {<newline46mondego>		public void dragEnter(DropTargetDragEvent e) {<newline46mondego>			// System.out.println(<doubleQuotes46>DropTarget.dragEnter: <doubleQuotes46> + DnDTabbedPane.this);<newline46mondego><newline46mondego>			if (isDragAcceptable(e)) {<newline46mondego>				e.acceptDrag(e.getDropAction());<newline46mondego>			} else {<newline46mondego>				e.rejectDrag();<newline46mondego>			} // if<newline46mondego>		}<newline46mondego><newline46mondego>		public void dragExit(DropTargetEvent e) {<newline46mondego>			// System.out.println(<doubleQuotes46>DropTarget.dragExit: <doubleQuotes46> + DnDTabbedPane.this);<newline46mondego>			m_isDrawRect = false;<newline46mondego>		}<newline46mondego><newline46mondego>		public void dropActionChanged(DropTargetDragEvent e) {<newline46mondego>		}<newline46mondego><newline46mondego>		public void dragOver(final DropTargetDragEvent e) {<newline46mondego>			TabTransferData data = getTabTransferData(e);<newline46mondego><newline46mondego>			if (getTabPlacement() == JTabbedPane.TOP<newline46mondego>					|| getTabPlacement() == JTabbedPane.BOTTOM) {<newline46mondego>				initTargetLeftRightLine(getTargetTabIndex(e.getLocation()), data);<newline46mondego>			} else {<newline46mondego>				initTargetTopBottomLine(getTargetTabIndex(e.getLocation()), data);<newline46mondego>			} // if-else<newline46mondego><newline46mondego>			repaint();<newline46mondego>			if (hasGhost()) {<newline46mondego>				s_glassPane.setPoint(buildGhostLocation(e.getLocation()));<newline46mondego>				s_glassPane.repaint();<newline46mondego>			}<newline46mondego>		}<newline46mondego><newline46mondego>		public void drop(DropTargetDropEvent a_event) {<newline46mondego>			// System.out.println(<doubleQuotes46>DropTarget.drop: <doubleQuotes46> + DnDTabbedPane.this);<newline46mondego><newline46mondego>			if (isDropAcceptable(a_event)) {<newline46mondego>				convertTab(getTabTransferData(a_event),<newline46mondego>					getTargetTabIndex(a_event.getLocation()));<newline46mondego>				a_event.dropComplete(true);<newline46mondego>			} else {<newline46mondego>				a_event.dropComplete(false);<newline46mondego>			} // if-else<newline46mondego><newline46mondego>			m_isDrawRect = false;<newline46mondego>			repaint();<newline46mondego>		}<newline46mondego><newline46mondego>		public boolean isDragAcceptable(DropTargetDragEvent e) {<newline46mondego>			Transferable t = e.getTransferable();<newline46mondego>			if (t == null) {<newline46mondego>				return false;<newline46mondego>			} // if<newline46mondego><newline46mondego>			DataFlavor[] flavor = e.getCurrentDataFlavors();<newline46mondego>			if (!t.isDataFlavorSupported(flavor[0])) {<newline46mondego>				return false;<newline46mondego>			} // if<newline46mondego><newline46mondego>			TabTransferData data = getTabTransferData(e);<newline46mondego><newline46mondego>			if (DnDTabbedPane.this == data.getTabbedPane()<newline46mondego>					&& data.getTabIndex() >= 0) {<newline46mondego>				return true;<newline46mondego>			} // if<newline46mondego><newline46mondego>			if (DnDTabbedPane.this != data.getTabbedPane()) {<newline46mondego>				if (m_acceptor != null) {<newline46mondego>					return m_acceptor.isDropAcceptable(data.getTabbedPane(), data.getTabIndex());<newline46mondego>				} // if<newline46mondego>			} // if<newline46mondego><newline46mondego>			return false;<newline46mondego>		}<newline46mondego><newline46mondego>		public boolean isDropAcceptable(DropTargetDropEvent e) {<newline46mondego>			Transferable t = e.getTransferable();<newline46mondego>			if (t == null) {<newline46mondego>				return false;<newline46mondego>			} // if<newline46mondego><newline46mondego>			DataFlavor[] flavor = e.getCurrentDataFlavors();<newline46mondego>			if (!t.isDataFlavorSupported(flavor[0])) {<newline46mondego>				return false;<newline46mondego>			} // if<newline46mondego><newline46mondego>			TabTransferData data = getTabTransferData(e);<newline46mondego><newline46mondego>			if (DnDTabbedPane.this == data.getTabbedPane()<newline46mondego>					&& data.getTabIndex() >= 0) {<newline46mondego>				return true;<newline46mondego>			} // if<newline46mondego><newline46mondego>			if (DnDTabbedPane.this != data.getTabbedPane()) {<newline46mondego>				if (m_acceptor != null) {<newline46mondego>					return m_acceptor.isDropAcceptable(data.getTabbedPane(), data.getTabIndex());<newline46mondego>				} // if<newline46mondego>			} // if<newline46mondego><newline46mondego>			return false;<newline46mondego>		}<newline46mondego>	}<newline46mondego><newline46mondego>	private boolean m_hasGhost = true;<newline46mondego><newline46mondego>	public void setPaintGhost(boolean flag) {<newline46mondego>		m_hasGhost = flag;<newline46mondego>	}<newline46mondego><newline46mondego>	public boolean hasGhost() {<newline46mondego>		return m_hasGhost;<newline46mondego>	}<newline46mondego><newline46mondego>	/**<newline46mondego>	 * returns potential index for drop.<newline46mondego>	 * @param a_point point given in the drop site component's coordinate<newline46mondego>	 * @return returns potential index for drop.<newline46mondego>	 */<newline46mondego>	private int getTargetTabIndex(Point a_point) {<newline46mondego>		boolean isTopOrBottom = getTabPlacement() == JTabbedPane.TOP<newline46mondego>				|| getTabPlacement() == JTabbedPane.BOTTOM;<newline46mondego><newline46mondego>		// if the pane is empty, the target index is always zero.<newline46mondego>		if (getTabCount() == 0) {<newline46mondego>			return 0;<newline46mondego>		} // if<newline46mondego><newline46mondego>		for (int i = 0; i < getTabCount(); i++) {<newline46mondego>			Rectangle r = getBoundsAt(i);<newline46mondego>			if (isTopOrBottom) {<newline46mondego>				r.setRect(r.x - r.width / 2, r.y, r.width, r.height);<newline46mondego>			} else {<newline46mondego>				r.setRect(r.x, r.y - r.height / 2, r.width, r.height);<newline46mondego>			} // if-else<newline46mondego><newline46mondego>			if (r.contains(a_point)) {<newline46mondego>				return i;<newline46mondego>			} // if<newline46mondego>		} // for<newline46mondego><newline46mondego>		Rectangle r = getBoundsAt(getTabCount() - 1);<newline46mondego>		if (isTopOrBottom) {<newline46mondego>			int x = r.x + r.width / 2;<newline46mondego>			r.setRect(x, r.y, getWidth() - x, r.height);<newline46mondego>		} else {<newline46mondego>			int y = r.y + r.height / 2;<newline46mondego>			r.setRect(r.x, y, r.width, getHeight() - y);<newline46mondego>		} // if-else<newline46mondego><newline46mondego>		return r.contains(a_point) ? getTabCount() : -1;<newline46mondego>	}<newline46mondego><newline46mondego>	private void convertTab(TabTransferData a_data, int a_targetIndex) {<newline46mondego>		DnDTabbedPane source = a_data.getTabbedPane();<newline46mondego>		int sourceIndex = a_data.getTabIndex();<newline46mondego>		if (sourceIndex < 0) {<newline46mondego>			return;<newline46mondego>		} // if<newline46mondego><newline46mondego>		Component cmp = source.getComponentAt(sourceIndex);<newline46mondego>		String str = source.getTitleAt(sourceIndex);<newline46mondego>		if (this != source) {<newline46mondego>			source.remove(sourceIndex);<newline46mondego><newline46mondego>			if (a_targetIndex == getTabCount()) {<newline46mondego>				addTab(str, cmp);<newline46mondego>			} else {<newline46mondego>				if (a_targetIndex < 0) {<newline46mondego>					a_targetIndex = 0;<newline46mondego>				} // if<newline46mondego><newline46mondego>				insertTab(str, null, cmp, null, a_targetIndex);<newline46mondego><newline46mondego>			} // if<newline46mondego><newline46mondego>			setSelectedComponent(cmp);<newline46mondego>			// System.out.println(<doubleQuotes46>press=<doubleQuotes46>+sourceIndex+<doubleQuotes46> next=<doubleQuotes46>+a_targetIndex);<newline46mondego>			return;<newline46mondego>		} // if<newline46mondego><newline46mondego>		if (a_targetIndex < 0 || sourceIndex == a_targetIndex) {<newline46mondego>			//System.out.println(<doubleQuotes46>press=<doubleQuotes46>+prev+<doubleQuotes46> next=<doubleQuotes46>+next);<newline46mondego>			return;<newline46mondego>		} // if<newline46mondego><newline46mondego>		if (a_targetIndex == getTabCount()) {<newline46mondego>			//System.out.println(<doubleQuotes46>last: press=<doubleQuotes46>+prev+<doubleQuotes46> next=<doubleQuotes46>+next);<newline46mondego>			source.remove(sourceIndex);<newline46mondego>			addTab(str, cmp);<newline46mondego>			setSelectedIndex(getTabCount() - 1);<newline46mondego>		} else if (sourceIndex > a_targetIndex) {<newline46mondego>			//System.out.println(<doubleQuotes46>   >: press=<doubleQuotes46>+prev+<doubleQuotes46> next=<doubleQuotes46>+next);<newline46mondego>			source.remove(sourceIndex);<newline46mondego>			insertTab(str, null, cmp, null, a_targetIndex);<newline46mondego>			setSelectedIndex(a_targetIndex);<newline46mondego>		} else {<newline46mondego>			//System.out.println(<doubleQuotes46>   <: press=<doubleQuotes46>+prev+<doubleQuotes46> next=<doubleQuotes46>+next);<newline46mondego>			source.remove(sourceIndex);<newline46mondego>			insertTab(str, null, cmp, null, a_targetIndex - 1);<newline46mondego>			setSelectedIndex(a_targetIndex - 1);<newline46mondego>		}<newline46mondego>	}<newline46mondego><newline46mondego>	private void initTargetLeftRightLine(int next, TabTransferData a_data) {		<newline46mondego>		if (next < 0) {<newline46mondego>			m_lineRect.setRect(0, 0, 0, 0);<newline46mondego>			m_isDrawRect = false;<newline46mondego>			return;<newline46mondego>		} // if<newline46mondego><newline46mondego>		if ((a_data.getTabbedPane() == this)<newline46mondego>				&& (a_data.getTabIndex() == next<newline46mondego>				|| next - a_data.getTabIndex() == 1)) {<newline46mondego>			m_lineRect.setRect(0, 0, 0, 0);<newline46mondego>			m_isDrawRect = false;<newline46mondego>		} else if (getTabCount() == 0) {<newline46mondego>			m_lineRect.setRect(0, 0, 0, 0);<newline46mondego>			m_isDrawRect = false;<newline46mondego>			return;<newline46mondego>		} else if (next == 0) {<newline46mondego>			Rectangle rect = getBoundsAt(0);<newline46mondego>			m_lineRect.setRect(-LINEWIDTH / 2, rect.y, LINEWIDTH, rect.height);<newline46mondego>			m_isDrawRect = true;<newline46mondego>		} else if (next == getTabCount()) {<newline46mondego>			Rectangle rect = getBoundsAt(getTabCount() - 1);<newline46mondego>			m_lineRect.setRect(rect.x + rect.width - LINEWIDTH / 2, rect.y,<newline46mondego>					LINEWIDTH, rect.height);<newline46mondego>			m_isDrawRect = true;<newline46mondego>		} else {<newline46mondego>			Rectangle rect = getBoundsAt(next - 1);<newline46mondego>			m_lineRect.setRect(rect.x + rect.width - LINEWIDTH / 2, rect.y,<newline46mondego>					LINEWIDTH, rect.height);<newline46mondego>			m_isDrawRect = true;<newline46mondego>		}<newline46mondego>	}<newline46mondego><newline46mondego>	private void initTargetTopBottomLine(int next, TabTransferData a_data) {<newline46mondego>		if (next < 0) {<newline46mondego>			m_lineRect.setRect(0, 0, 0, 0);<newline46mondego>			m_isDrawRect = false;<newline46mondego>			return;<newline46mondego>		} // if<newline46mondego><newline46mondego>		if ((a_data.getTabbedPane() == this)<newline46mondego>				&& (a_data.getTabIndex() == next<newline46mondego>				|| next - a_data.getTabIndex() == 1)) {<newline46mondego>			m_lineRect.setRect(0, 0, 0, 0);<newline46mondego>			m_isDrawRect = false;<newline46mondego>		} else if (getTabCount() == 0) {<newline46mondego>			m_lineRect.setRect(0, 0, 0, 0);<newline46mondego>			m_isDrawRect = false;<newline46mondego>			return;<newline46mondego>		} else if (next == getTabCount()) {<newline46mondego>			Rectangle rect = getBoundsAt(getTabCount() - 1);<newline46mondego>			m_lineRect.setRect(rect.x, rect.y + rect.height - LINEWIDTH / 2,<newline46mondego>					rect.width, LINEWIDTH);<newline46mondego>			m_isDrawRect = true;<newline46mondego>		} else if (next == 0) {<newline46mondego>			Rectangle rect = getBoundsAt(0);<newline46mondego>			m_lineRect.setRect(rect.x, -LINEWIDTH / 2, rect.width, LINEWIDTH);<newline46mondego>			m_isDrawRect = true;<newline46mondego>		} else {<newline46mondego>			Rectangle rect = getBoundsAt(next - 1);<newline46mondego>			m_lineRect.setRect(rect.x, rect.y + rect.height - LINEWIDTH / 2,<newline46mondego>					rect.width, LINEWIDTH);<newline46mondego>			m_isDrawRect = true;<newline46mondego>		}<newline46mondego>	}<newline46mondego><newline46mondego>	private void initGlassPane(Component c, Point tabPt, int a_tabIndex) {<newline46mondego>		//Point p = (Point) pt.clone();<newline46mondego>		getRootPane().setGlassPane(s_glassPane);<newline46mondego>		if (hasGhost()) {<newline46mondego>			Rectangle rect = getBoundsAt(a_tabIndex);<newline46mondego>			BufferedImage image = new BufferedImage(c.getWidth(),<newline46mondego>					c.getHeight(), BufferedImage.TYPE_INT_ARGB);<newline46mondego>			Graphics g = image.getGraphics();<newline46mondego>			c.paint(g);<newline46mondego>			image = image.getSubimage(rect.x, rect.y, rect.width, rect.height);<newline46mondego>			s_glassPane.setImage(image);			<newline46mondego>		} // if<newline46mondego><newline46mondego>		s_glassPane.setPoint(buildGhostLocation(tabPt));<newline46mondego>		s_glassPane.setVisible(true);<newline46mondego>	}<newline46mondego><newline46mondego>	private Rectangle getTabAreaBound() {<newline46mondego>		Rectangle lastTab = getUI().getTabBounds(this, getTabCount() - 1);<newline46mondego>		return new Rectangle(0, 0, getWidth(), lastTab.y + lastTab.height);<newline46mondego>	}<newline46mondego><newline46mondego>	public void paintComponent(Graphics g) {<newline46mondego>		super.paintComponent(g);<newline46mondego><newline46mondego>		if (m_isDrawRect) {<newline46mondego>			Graphics2D g2 = (Graphics2D) g;<newline46mondego>			g2.setPaint(m_lineColor);<newline46mondego>			g2.fill(m_lineRect);<newline46mondego>		} // if<newline46mondego>	}<newline46mondego><newline46mondego>	public interface TabAcceptor {<newline46mondego>		boolean isDropAcceptable(DnDTabbedPane a_component, int a_index);<newline46mondego>	}<newline46mondego>}<newline46mondego><newline46mondego>class GhostGlassPane extends JPanel {<newline46mondego>	public static final long serialVersionUID = 1L;<newline46mondego>	private final AlphaComposite m_composite;<newline46mondego><newline46mondego>	private Point m_location = new Point(0, 0);<newline46mondego><newline46mondego>	private BufferedImage m_draggingGhost = null;<newline46mondego><newline46mondego>	public GhostGlassPane() {<newline46mondego>		setOpaque(false);<newline46mondego>		m_composite = AlphaComposite.getInstance(AlphaComposite.SRC_OVER, 0.7f);<newline46mondego>	}<newline46mondego><newline46mondego>	public void setImage(BufferedImage draggingGhost) {<newline46mondego>		m_draggingGhost = draggingGhost;<newline46mondego>	}<newline46mondego><newline46mondego>	public void setPoint(Point a_location) {<newline46mondego>		m_location.x = a_location.x;<newline46mondego>		m_location.y = a_location.y;<newline46mondego>	}<newline46mondego><newline46mondego>	public int getGhostWidth() {<newline46mondego>		if (m_draggingGhost == null) {<newline46mondego>			return 0;<newline46mondego>		} // if<newline46mondego><newline46mondego>		return m_draggingGhost.getWidth(this);<newline46mondego>	}<newline46mondego><newline46mondego>	public int getGhostHeight() {<newline46mondego>		if (m_draggingGhost == null) {<newline46mondego>			return 0;<newline46mondego>		} // if<newline46mondego><newline46mondego>		return m_draggingGhost.getHeight(this);<newline46mondego>	}<newline46mondego><newline46mondego>	public void paintComponent(Graphics g) {<newline46mondego>		if (m_draggingGhost == null) {<newline46mondego>			return;<newline46mondego>		} // if	<newline46mondego><newline46mondego>		Graphics2D g2 = (Graphics2D) g;<newline46mondego>		g2.setComposite(m_composite);<newline46mondego><newline46mondego>		g2.drawImage(m_draggingGhost, (int) m_location.getX(), (int) m_location.getY(), null);<newline46mondego>	}<newline46mondego>}<newline46mondego>"
"421splitHere46","63063splitHere46","public class MyPrompter implements CommandListener {<newline46mondego><newline46mondego>	private Alert yesNoAlert;<newline46mondego><newline46mondego>	private Command softKey1;<newline46mondego>	private Command softKey2;<newline46mondego><newline46mondego>	private boolean status;<newline46mondego><newline46mondego>	public MyPrompter() {<newline46mondego>		yesNoAlert = new Alert(<doubleQuotes46>Attention<doubleQuotes46>);<newline46mondego>		yesNoAlert.setString(<doubleQuotes46>Are you sure?<doubleQuotes46>);<newline46mondego>		softKey1 = new Command(<doubleQuotes46>No<doubleQuotes46>, Command.BACK, 1);<newline46mondego>		softKey2 = new Command(<doubleQuotes46>Yes<doubleQuotes46>, Command.OK, 1);<newline46mondego>		yesNoAlert.addCommand(softKey1);<newline46mondego>		yesNoAlert.addCommand(softKey2);<newline46mondego>		yesNoAlert.setCommandListener(this);<newline46mondego>		status = false;<newline46mondego>	}<newline46mondego><newline46mondego>	public Displayable getDisplayable() {<newline46mondego>		return yesNoAlert;<newline46mondego>	}<newline46mondego><newline46mondego>	public boolean getStatus() {<newline46mondego>		return status;<newline46mondego>	}<newline46mondego><newline46mondego>	public void commandAction(Command c, Displayable d) {<newline46mondego>		status = c.getCommandType() == Command.OK;<newline46mondego>		// maybe do other stuff here. remember this is asynchronous<newline46mondego>	}<newline46mondego><newline46mondego>};<newline46mondego>"
"422splitHere46","63063splitHere46","MyPrompter prompt = new MyPrompter();<newline46mondego>Display.getDisplay(YOUR_MIDLET_INSTANCE).setCurrent(prompt.getDisplayable());<newline46mondego>"
"423splitHere46","63227splitHere46","manoa:~ stu$ ll /System/Library/Frameworks/JavaVM.framework/Versions/<newline46mondego>total 56<newline46mondego>774077 lrwxr-xr-x  1 root  wheel    5 Jul 23 15:31 1.3 -> 1.3.1<newline46mondego>167151 drwxr-xr-x  3 root  wheel  102 Jan 14  2008 1.3.1<newline46mondego>167793 lrwxr-xr-x  1 root  wheel    5 Feb 21  2008 1.4 -> 1.4.2<newline46mondego>774079 lrwxr-xr-x  1 root  wheel    3 Jul 23 15:31 1.4.1 -> 1.4<newline46mondego>166913 drwxr-xr-x  8 root  wheel  272 Feb 21  2008 1.4.2<newline46mondego>168494 lrwxr-xr-x  1 root  wheel    5 Feb 21  2008 1.5 -> 1.5.0<newline46mondego>166930 drwxr-xr-x  8 root  wheel  272 Feb 21  2008 1.5.0<newline46mondego>774585 lrwxr-xr-x  1 root  wheel    5 Jul 23 15:31 1.6 -> 1.6.0<newline46mondego>747415 drwxr-xr-x  8 root  wheel  272 Jul 23 10:24 1.6.0<newline46mondego>167155 drwxr-xr-x  8 root  wheel  272 Jul 23 15:31 A<newline46mondego>776765 lrwxr-xr-x  1 root  wheel    1 Jul 23 15:31 Current -> A<newline46mondego>774125 lrwxr-xr-x  1 root  wheel    3 Jul 23 15:31 CurrentJDK -> 1.5<newline46mondego>manoa:~ stu$<newline46mondego>"
"424splitHere46","63258splitHere46","StringUtils.join(java.lang.Iterable,char)"
"425splitHere46","63701splitHere46","Runtime.getRuntime().addShutdownHook(new Thread(new Runnable() {<newline46mondego>    public void run() {<newline46mondego>    	// what you want to do<newline46mondego>    }<newline46mondego>}));<newline46mondego>"
"426splitHere46","63909splitHere46","destroy()"
"427splitHere46","63909splitHere46","Process"
"428splitHere46","63909splitHere46","Runtime.exec()"
"429splitHere46","64183splitHere46","ProcessBuilder builder = new ProcessBuilder(command);<newline46mondego>builder.redirectErrorStream(true);<newline46mondego>"
"430splitHere46","64183splitHere46","Process p = builder.start();<newline46mondego><newline46mondego>InputHandler outHandler = new InputHandler(p.getInputStream());<newline46mondego>"
"431splitHere46","64183splitHere46","private static class InputHandler extends Thread {<newline46mondego><newline46mondego>    private final InputStream is;<newline46mondego><newline46mondego>    private final ByteArrayOutputStream os;<newline46mondego><newline46mondego>    public InputHandler(InputStream input) {<newline46mondego>        this.is = input;<newline46mondego>        this.os = new ByteArrayOutputStream();<newline46mondego>    }<newline46mondego><newline46mondego>    public void run() {<newline46mondego>        try {<newline46mondego>            int c;<newline46mondego>            while ((c = is.read()) != -1) {<newline46mondego>                os.write(c);<newline46mondego>            }<newline46mondego>        } catch (Throwable t) {<newline46mondego>            throw new IllegalStateException(t);<newline46mondego>        }<newline46mondego>    }<newline46mondego><newline46mondego>    public String getOutput() {<newline46mondego>        try {<newline46mondego>        os.flush();<newline46mondego>        } catch (Throwable t) {<newline46mondego>            throw new IllegalStateException(t);<newline46mondego>        }<newline46mondego>        return os.toString();<newline46mondego>    }<newline46mondego><newline46mondego>}<newline46mondego>"
"432splitHere46","64847splitHere46","public final class Node {<newline46mondego><newline46mondego>    private final String name;<newline46mondego><newline46mondego>    public Node(String name) {<newline46mondego>           this.name = name;<newline46mondego>    }<newline46mondego><newline46mondego>    public String getName() { return name; }<newline46mondego>    // note: no setter for name<newline46mondego>}<newline46mondego>"
"433splitHere46","64847splitHere46","public class Graph {<newline46mondego>    Set<Node> nodes = new HashSet<Node>();<newline46mondego>    public void addNode(Node n) {<newline46mondego>        // note: this assumes you've properly overridden <newline46mondego>        // equals and hashCode in Node to make Nodes with the <newline46mondego>        // same name .equal() and hash to the same value.<newline46mondego>        if(nodes.contains(n)) {<newline46mondego>            throw new IllegalArgumentException(<doubleQuotes46>Already in graph: <doubleQuotes46> + node);<newline46mondego>        }<newline46mondego>        nodes.add(n);<newline46mondego>    }<newline46mondego>}<newline46mondego>"
"434splitHere46","64967splitHere46","update TABLE set COLUMN=REPLACE(convert(varchar(5000), COLUMN), 'searchstring', 'replacestring')<newline46mondego>"
"435splitHere46","65947splitHere46","<target name=<doubleQuotes46>vss.check<doubleQuotes46>><newline46mondego>    <vssadd localpath=<doubleQuotes46>D:\build\build.00012.zip<doubleQuotes46> <newline46mondego>        comment=<doubleQuotes46>Added by automatic build<doubleQuotes46>/><newline46mondego></target><newline46mondego>"
"436splitHere46","65947splitHere46","<macrodef name=<doubleQuotes46>private-vssadd<doubleQuotes46>><newline46mondego>    <attribute name=<doubleQuotes46>file<doubleQuotes46>/><newline46mondego>    <sequential><newline46mondego>        <vssadd localpath=<doubleQuotes46>@{file}<doubleQuotes46> <newline46mondego>            comment=<doubleQuotes46>Added by automatic build<doubleQuotes46>/><newline46mondego>    </sequential><newline46mondego></macrodef><newline46mondego>"
"437splitHere46","65947splitHere46","<target name=<doubleQuotes46>vss.check<doubleQuotes46>><newline46mondego>    <private-vssadd file=<doubleQuotes46>D:\build\File1.zip<doubleQuotes46>/><newline46mondego>    <private-vssadd file=<doubleQuotes46>D:\build\File2.zip<doubleQuotes46>/><newline46mondego></target><newline46mondego>"
"438splitHere46","66076splitHere46","(public/private) static final TYPE NAME = VALUE;<newline46mondego>"
"439splitHere46","66076splitHere46","TYPE"
"440splitHere46","66076splitHere46","NAME"
"441splitHere46","66076splitHere46","VALUE"
"442splitHere46","66076splitHere46","public static final Point ORIGIN = new Point(0,0);<newline46mondego><newline46mondego>public static void main(String[] args){<newline46mondego><newline46mondego>    ORIGIN.x = 3;<newline46mondego><newline46mondego>}<newline46mondego>"
"443splitHere46","66076splitHere46","ORIGIN"
"444splitHere46","66116splitHere46","current = node.firstChild;<newline46mondego>while(null != current) {<newline46mondego>    ...<newline46mondego>    current = current.nextSibling;<newline46mondego>}<newline46mondego>"
"445splitHere46","66373splitHere46","uow=sess.acquireUnitOfWork();<newline46mondego>for (job in batch) {<newline46mondego> thingyCl=uow.registerObject(new Thingy());<newline46mondego> user1Cl=uow.registerObject(user1);<newline46mondego> user2Cl=uow.registerObject(user2);<newline46mondego> thingyCl.setUsers(user1Cl,user2Cl);<newline46mondego>}<newline46mondego>uow.commit();<newline46mondego>"
"446splitHere46","66481splitHere46","Content-type"
"447splitHere46","66481splitHere46","multipart/form-data"
"448splitHere46","66697splitHere46","@SqlResultSetMapping( name=<doubleQuotes46>TripResults<doubleQuotes46>,<newline46mondego>        entities={<newline46mondego>            @EntityResult( entityClass=TripEntity.class ),<newline46mondego>            @EntityResult( entityClass=CommercialTripEntity.class )<newline46mondego>        }<newline46mondego>    )<newline46mondego>public class Foo {<newline46mondego>   public void bogus() {<newline46mondego>      Query q = em.createNativeQuery( <newline46mondego>        <doubleQuotes46>select T.* <doubleQuotes46> +<newline46mondego>        <doubleQuotes46>from Trip T join Itinerary I on (T.itinerary_id=I.id) <doubleQuotes46> +<newline46mondego>        <doubleQuotes46>where I.launchDate between :start and :end <doubleQuotes46> +<newline46mondego>        <doubleQuotes46>or ADDDATE(I.launchDate, I.equipmentPullDayOfTrip) between :start and :end<doubleQuotes46>,<newline46mondego>        <doubleQuotes46>TripResults<doubleQuotes46> );<newline46mondego><newline46mondego>      q.setParameter( <doubleQuotes46>start<doubleQuotes46>, range.getStart(), TemporalType.DATE );<newline46mondego>      q.setParameter( <doubleQuotes46>end<doubleQuotes46>, range.getEnd(), TemporalType.DATE );<newline46mondego>   }<newline46mondego>}<newline46mondego>"
"449splitHere46","66705splitHere46","boolean exceptionThrown = true;<newline46mondego>try {<newline46mondego>   mightThrowAnException();<newline46mondego>   exceptionThrown = false;<newline46mondego>} finally {<newline46mondego>   if (exceptionThrown) {<newline46mondego>      // Whatever you want to do<newline46mondego>   }<newline46mondego>}<newline46mondego>"
"450splitHere46","66721splitHere46","javac -encoding UTF-8<newline46mondego>"
"451splitHere46","66944splitHere46","\b(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\b<newline46mondego>"
"452splitHere46","68075splitHere46","MessageFormat.format(<doubleQuotes46>{0} This {1} a test<doubleQuotes46>, new Object[] {<doubleQuotes46>Yes!!!<doubleQuotes46>, <doubleQuotes46>is<doubleQuotes46>});<newline46mondego>"
"453splitHere46","68075splitHere46","MessageFormat.format(<doubleQuotes46>{0} This {1} a test<doubleQuotes46>, <doubleQuotes46>Yes!!!<doubleQuotes46>, <doubleQuotes46>is<doubleQuotes46>);<newline46mondego>"
"454splitHere46","68075splitHere46","<doubleQuotes46>Yes!!! This is a test<doubleQuotes46><newline46mondego>"
"455splitHere46","68078splitHere46","TabHost"
"456splitHere46","68078splitHere46","TabSpec"
"457splitHere46","68078splitHere46","TabSpec"
"458splitHere46","68078splitHere46","mTabs.getTabWidget()"
"459splitHere46","68078splitHere46","TabWidget"
"460splitHere46","68078splitHere46","ViewGroup"
"461splitHere46","68078splitHere46","getChildCount()"
"462splitHere46","68078splitHere46","getChildAt()"
"463splitHere46","68078splitHere46","TabWidget"
"464splitHere46","68078splitHere46","ViewGroup"
"465splitHere46","68078splitHere46","LinearLayout"
"466splitHere46","68078splitHere46","ImageView"
"467splitHere46","68078splitHere46","TextView"
"468splitHere46","68078splitHere46","Log.i"
"469splitHere46","68078splitHere46","ImageView"
"470splitHere46","68669splitHere46","(?:(?:public)|(?:private)|(?:static)|(?:protected)\s+)*<newline46mondego>"
"471splitHere46","69223splitHere46","public void sendHttpRequest(byte[] requestData, Socket connection) {<newline46mondego>    long startTime = System.currentTimeMillis();<newline46mondego>    writeYourRequestData(connection.getOutputStream(), requestData);<newline46mondego>    byte[] responseData = readYourResponseData(connection.getInputStream());<newline46mondego>    long elapsedTime = System.currentTimeMillis() - startTime;<newline46mondego>    System.out.println(<doubleQuotes46>Total elapsed http request/response time in milliseconds: <doubleQuotes46> + elapsedTime);<newline46mondego>}<newline46mondego>"
"472splitHere46","69489splitHere46","zipStream.read(tempBuffer)<newline46mondego>"
"473splitHere46","70253splitHere46","<jar ...><newline46mondego>    <manifest><newline46mondego>        <attribute name=<doubleQuotes46>Main-Class<doubleQuotes46> value=<doubleQuotes46>MyApplication<doubleQuotes46>/><newline46mondego>    </manifest><newline46mondego></jar><newline46mondego>"
"474splitHere46","70358splitHere46","OuterClass.StaticNestedClass<newline46mondego>"
"475splitHere46","70358splitHere46","OuterClass.StaticNestedClass nestedObject = new OuterClass.StaticNestedClass();<newline46mondego>"
"476splitHere46","70358splitHere46","class OuterClass {<newline46mondego>    ...<newline46mondego>    class InnerClass {<newline46mondego>        ...<newline46mondego>    }<newline46mondego>}<newline46mondego>"
"477splitHere46","70358splitHere46","OuterClass.InnerClass innerObject = outerObject.new InnerClass();<newline46mondego>"
"478splitHere46","70393splitHere46","interface IResult {}<newline46mondego>class AResult implements IResult {}<newline46mondego>class BResult implements IResult {}<newline46mondego>"
"479splitHere46","70393splitHere46","interface ITest<T extends IResult> {<newline46mondego>  List<T> getResult();<newline46mondego>}<newline46mondego><newline46mondego>class ATest implements ITest<AResult> {<newline46mondego>  // look, overridden!<newline46mondego>  List<AResult> getResult();<newline46mondego>}<newline46mondego><newline46mondego>class BTest implements ITest<BResult> {<newline46mondego>  // overridden again!<newline46mondego>  List<BResult> getResult();<newline46mondego>}<newline46mondego>"
"480splitHere46","70535splitHere46","get"
"481splitHere46","70535splitHere46","set"
"482splitHere46","70535splitHere46","// Getter for <doubleQuotes46>awesomeString<doubleQuotes46><newline46mondego>public String getAwesomeString() {<newline46mondego>  return awesomeString;<newline46mondego>}<newline46mondego><newline46mondego>// Setter for <doubleQuotes46>awesomeString<doubleQuotes46><newline46mondego>public void setAwesomeString( String awesomeString ) {<newline46mondego>  this.awesomeString = awesomeString;<newline46mondego>}<newline46mondego>"
"483splitHere46","70535splitHere46","is"
"484splitHere46","70535splitHere46","has"
"485splitHere46","70535splitHere46","get"
"486splitHere46","70535splitHere46","public boolean isAwesome();<newline46mondego><newline46mondego>public boolean hasAwesomeStuff();<newline46mondego>"
"487splitHere46","70962splitHere46","public interface GroupedSet<K, V extends HasKey<K>> extends Set<V>{<newline46mondego>    Set<V> havingKey(K k);<newline46mondego>}<newline46mondego>"
"488splitHere46","70962splitHere46","Map<K,Set<V>> asMap();<newline46mondego>"
"489splitHere46","71072splitHere46","using (ZipFile zipFile = new ZipFile())<newline46mondego>{<newline46mondego>  zipFile.AddDirectory(sourceFolderPath);<newline46mondego>  zipFile.Save(archiveFolderName);<newline46mondego>}<newline46mondego>"
"490splitHere46","71399splitHere46","public enum Foo {<newline46mondego>       INSTANCE;<newline46mondego>   }<newline46mondego>"
"491splitHere46","71399splitHere46","public enum Elvis {<newline46mondego>       INSTANCE;<newline46mondego>       private final String[] favoriteSongs =<newline46mondego>           { <doubleQuotes46>Hound Dog<doubleQuotes46>, <doubleQuotes46>Heartbreak Hotel<doubleQuotes46> };<newline46mondego>       public void printFavorites() {<newline46mondego>           System.out.println(Arrays.toString(favoriteSongs));<newline46mondego>       }<newline46mondego>   }<newline46mondego>"
"492splitHere46","72118splitHere46","@RequestMapping(<doubleQuotes46>VIEW<doubleQuotes46>)<newline46mondego>@Controller<newline46mondego>public class NewsPortlet {<newline46mondego><newline46mondego>    private NewsService newsService;<newline46mondego><newline46mondego>    @Autowired<newline46mondego>    public NewsPortlet(NewsService newsService) {<newline46mondego>        this.newsService = newsService;<newline46mondego>    }<newline46mondego><newline46mondego>    @RequestMapping(method = RequestMethod.GET)<newline46mondego>    public String view(Model model) {<newline46mondego>        model.addAttribute(newsService.getLatests(10));<newline46mondego>        return <doubleQuotes46>news<doubleQuotes46>;        <newline46mondego>    }<newline46mondego>}<newline46mondego>"
"493splitHere46","72118splitHere46","<!-- look for controllers and services here --><newline46mondego><context:component-scan base-package=<doubleQuotes46>com.example.news<doubleQuotes46>/><newline46mondego><newline46mondego><!-- look for views here --><newline46mondego><bean id=<doubleQuotes46>viewResolver<doubleQuotes46> class=<doubleQuotes46>org.springframework.web.servlet.view.InternalResourceViewResolver<doubleQuotes46>><newline46mondego>    <property name=<doubleQuotes46>prefix<doubleQuotes46> value=<doubleQuotes46>/WEB-INF/jsp/news/<doubleQuotes46>/><newline46mondego>    <property name=<doubleQuotes46>suffix<doubleQuotes46> value=<doubleQuotes46>.jsp<doubleQuotes46>/><newline46mondego></bean><newline46mondego>"
"494splitHere46","72438splitHere46","<newline46mondego>Calendar cal = Calendar.getInstance();<newline46mondego>cal.setTime(sampleDay.getTime());<newline46mondego>int noOfLastDay = cal.getActualMaximum(Calendar.DAY_OF_MONTH);<newline46mondego></pre>"
"495splitHere46","72438splitHere46","<newline46mondego>Calendar cal = Calendar.getInstance();<newline46mondego>cal.setTime(sampleDay.getTime());<newline46mondego>cal.set(Calendar.DAY_OF_MONTH, cal.getActualMaximum(Calendar.DAY_OF_MONTH));<newline46mondego></pre>"
"496splitHere46","72957splitHere46","openssl ocsp -whatever<newline46mondego>"
"497splitHere46","73418splitHere46","Content-Type"
"498splitHere46","73418splitHere46","application/ms-vnd.excel"
"499splitHere46","73483splitHere46","char[] ch;<newline46mondego>AttributesImpl atts = new AttributesImpl();<newline46mondego>Writer writer = new StringWriter();<newline46mondego>StreamResult streamResult = new StreamResult(writer);<newline46mondego>SAXTransformerFactory tf = (SAXTransformerFactory) TransformerFactory.newInstance();<newline46mondego><newline46mondego>// SAX2.0 ContentHandler<newline46mondego>TransformerHandler transformerHandler = tf.newTransformerHandler();<newline46mondego><newline46mondego>Transformer serializer = transformerHandler.getTransformer();<newline46mondego><newline46mondego>serializer.setOutputProperty(OutputKeys.ENCODING, <doubleQuotes46>UTF-8<doubleQuotes46>);<newline46mondego>// serializer.setOutputProperty(OutputKeys.DOCTYPE_SYSTEM, <doubleQuotes46>nodes.dtd<doubleQuotes46>);<newline46mondego>serializer.setOutputProperty(OutputKeys.INDENT, <doubleQuotes46>yes<doubleQuotes46>);<newline46mondego><newline46mondego>transformerHandler.setResult(streamResult);<newline46mondego><newline46mondego>transformerHandler.startDocument();<newline46mondego><newline46mondego>atts.clear();<newline46mondego>// atts.addAttribute(<doubleQuotes46><doubleQuotes46>, <doubleQuotes46><doubleQuotes46>, <doubleQuotes46>xmlns<doubleQuotes46>, <doubleQuotes46>CDATA<doubleQuotes46>, <doubleQuotes46>http://www.example.com/nodes<doubleQuotes46>);<newline46mondego>// atts.addAttribute(<doubleQuotes46><doubleQuotes46>, <doubleQuotes46><doubleQuotes46>, <doubleQuotes46>xmlns:xsi<doubleQuotes46>, <doubleQuotes46>CDATA<doubleQuotes46>, <doubleQuotes46>http://www.w3.org/2001/XMLSchema-instance<doubleQuotes46>);<newline46mondego>// atts.addAttribute(<doubleQuotes46><doubleQuotes46>, <doubleQuotes46><doubleQuotes46>, <doubleQuotes46>xsi:schemaLocation<doubleQuotes46>, <doubleQuotes46>CDATA<doubleQuotes46>, <doubleQuotes46>/nodes.xsd<doubleQuotes46>);<newline46mondego>transformerHandler.startElement(<doubleQuotes46><doubleQuotes46>, <doubleQuotes46><doubleQuotes46>, <doubleQuotes46>node_list<doubleQuotes46>, atts);<newline46mondego><newline46mondego>// displayName element<newline46mondego>if (displayName != null) {<newline46mondego>	transformerHandler.startElement(<doubleQuotes46><doubleQuotes46>, <doubleQuotes46><doubleQuotes46>, <doubleQuotes46>display_name<doubleQuotes46>, null);<newline46mondego>	ch = displayName.toCharArray();<newline46mondego>	transformerHandler.characters(ch, 0, ch.length);<newline46mondego>	transformerHandler.endElement(<doubleQuotes46><doubleQuotes46>, <doubleQuotes46><doubleQuotes46>, <doubleQuotes46>display_name<doubleQuotes46>);<newline46mondego>}<newline46mondego><newline46mondego>// nodes element<newline46mondego>transformerHandler.startElement(<doubleQuotes46><doubleQuotes46>, <doubleQuotes46><doubleQuotes46>, <doubleQuotes46>nodes<doubleQuotes46>, null);<newline46mondego><newline46mondego>atts.clear();<newline46mondego>atts.addAttribute(<doubleQuotes46><doubleQuotes46>, <doubleQuotes46><doubleQuotes46>, <doubleQuotes46>node_type<doubleQuotes46>, <doubleQuotes46>CDATA<doubleQuotes46>, <doubleQuotes46>sometype<doubleQuotes46>);<newline46mondego>transformerHandler.startElement(<doubleQuotes46><doubleQuotes46>, <doubleQuotes46><doubleQuotes46>, <doubleQuotes46>node<doubleQuotes46>, atts);<newline46mondego><newline46mondego>ch = node.getValue().toCharArray();<newline46mondego>transformerHandler.startElement(<doubleQuotes46><doubleQuotes46>, <doubleQuotes46><doubleQuotes46>, <doubleQuotes46>value<doubleQuotes46>, null);<newline46mondego>transformerHandler.characters(ch, 0, ch.length);<newline46mondego>transformerHandler.endElement(<doubleQuotes46><doubleQuotes46>, <doubleQuotes46><doubleQuotes46>, <doubleQuotes46>value<doubleQuotes46>);<newline46mondego><newline46mondego>transformerHandler.endElement(<doubleQuotes46><doubleQuotes46>, <doubleQuotes46><doubleQuotes46>, <doubleQuotes46>node<doubleQuotes46>);<newline46mondego><newline46mondego>transformerHandler.endElement(<doubleQuotes46><doubleQuotes46>, <doubleQuotes46><doubleQuotes46>, <doubleQuotes46>nodes<doubleQuotes46>);<newline46mondego><newline46mondego>transformerHandler.endElement(<doubleQuotes46><doubleQuotes46>, <doubleQuotes46><doubleQuotes46>, <doubleQuotes46>node_list<doubleQuotes46>);<newline46mondego><newline46mondego>transformerHandler.endDocument();<newline46mondego><newline46mondego>String xml = writer.toString();<newline46mondego>"
"500splitHere46","73649splitHere46","/*<newline46mondego> *<newline46mondego> */<newline46mondego><newline46mondego>import java.io.*;<newline46mondego>import java.net.InetAddress;<newline46mondego>import java.util.Properties;<newline46mondego>import java.util.Date;<newline46mondego><newline46mondego>import javax.mail.*;<newline46mondego><newline46mondego>import javax.mail.internet.*;<newline46mondego><newline46mondego>import com.sun.mail.smtp.*;<newline46mondego><newline46mondego><newline46mondego>public class Distribution {<newline46mondego><newline46mondego>    public static void main(String args[]) throws Exception {<newline46mondego>        Properties props = System.getProperties();<newline46mondego>        props.put(<doubleQuotes46>mail.smtps.host<doubleQuotes46>,<doubleQuotes46>smtp.gmail.com<doubleQuotes46>);<newline46mondego>        props.put(<doubleQuotes46>mail.smtps.auth<doubleQuotes46>,<doubleQuotes46>true<doubleQuotes46>);<newline46mondego>        Session session = Session.getInstance(props, null);<newline46mondego>        Message msg = new MimeMessage(session);<newline46mondego>        msg.setFrom(new InternetAddress(<doubleQuotes46>mail@tovare.com<doubleQuotes46>));;<newline46mondego>        msg.setRecipients(Message.RecipientType.TO,<newline46mondego>        InternetAddress.parse(<doubleQuotes46>tov.are.jacobsen@iss.no<doubleQuotes46>, false));<newline46mondego>        msg.setSubject(<doubleQuotes46>Heisann <doubleQuotes46>+System.currentTimeMillis());<newline46mondego>        msg.setText(<doubleQuotes46>Med vennlig hilsennTov Are Jacobsen<doubleQuotes46>);<newline46mondego>        msg.setHeader(<doubleQuotes46>X-Mailer<doubleQuotes46>, <doubleQuotes46>Tov Are's program<doubleQuotes46>);<newline46mondego>        msg.setSentDate(new Date());<newline46mondego>        SMTPTransport t =<newline46mondego>            (SMTPTransport)session.getTransport(<doubleQuotes46>smtps<doubleQuotes46>);<newline46mondego>        t.connect(<doubleQuotes46>smtp.gmail.com<doubleQuotes46>, <doubleQuotes46>admin@tovare.com<doubleQuotes46>, <doubleQuotes46><insert password here><doubleQuotes46>);<newline46mondego>        t.sendMessage(msg, msg.getAllRecipients());<newline46mondego>        System.out.println(<doubleQuotes46>Response: <doubleQuotes46> + t.getLastServerResponse());<newline46mondego>        t.close();<newline46mondego>    }<newline46mondego>}<newline46mondego>"
"501splitHere46","74091splitHere46","List<Object> myList = new ArrayList<String>(); \\(hint: no)<newline46mondego>Map<Integer> myMap = new HashMap<int>(); \\ (hint: also no)<newline46mondego>"
"502splitHere46","74400splitHere46","public class Foo {<newline46mondego>    public interface Bar {<newline46mondego>        void callback();<newline46mondego>    }<newline46mondego>    public static void registerCallback(Bar bar) {...}<newline46mondego>}<newline46mondego>// ...elsewhere...<newline46mondego>Foo.registerCallback(new Foo.Bar() {<newline46mondego>    public void callback() {...}<newline46mondego>});<newline46mondego>"
"503splitHere46","74555splitHere46","public static final boolean COMPILED_IN_JAVA_6 = false;<newline46mondego>"
"504splitHere46","74555splitHere46","if (VersionUtil.COMPILED_IN_JAVA_6) {<newline46mondego>  // Java 6 stuff goes here<newline46mondego>} else {<newline46mondego>  // Java 1.5 stuff goes here<newline46mondego>}<newline46mondego>"
"505splitHere46","74646splitHere46","public static Date addDay(Date date){<newline46mondego>   //TODO you may want to check for a null date and handle it.<newline46mondego>   Calendar cal = Calendar.getInstance();<newline46mondego>   cal.setTime (date);<newline46mondego>   cal.add (Calendar.DATE, 1);<newline46mondego>   return cal.getTime();<newline46mondego>}<newline46mondego>"
"506splitHere46","74646splitHere46","<?xml version=<doubleQuotes46>1.0<doubleQuotes46> encoding=<doubleQuotes46>UTF-8<doubleQuotes46> ?><newline46mondego><taglib xmlns=<doubleQuotes46>http://java.sun.com/xml/ns/j2ee<doubleQuotes46><newline46mondego>  xmlns:xsi=<doubleQuotes46>http://www.w3.org/2001/XMLSchema-instance<doubleQuotes46><newline46mondego>  xsi:schemaLocation=<doubleQuotes46>http://java.sun.com/xml/ns/j2ee http://java.sun.com/xml/ns/j2ee/web-jsptaglibrary_2_0.xsd<doubleQuotes46><newline46mondego>  version=<doubleQuotes46>2.0<doubleQuotes46>><newline46mondego>  <description>functions library</description><newline46mondego>  <display-name>functions</display-name><newline46mondego>  <tlib-version>1.1</tlib-version><newline46mondego>  <short-name>xfn</short-name><newline46mondego>  <uri>http://yourdomain/functions.tld</uri><newline46mondego>  <function><newline46mondego>    <description><newline46mondego>      Adds 1 day to a date.<newline46mondego>    </description><newline46mondego>    <name>addDay</name><newline46mondego>    <function-class>Functions</function-class><newline46mondego>    <function-signature>java.util.Date addDay(java.util.Date)</function-signature><newline46mondego>    <example><newline46mondego>      ${xfn:addDay(date)}<newline46mondego>    </example><newline46mondego>  </function><newline46mondego></taglib><newline46mondego>"
"507splitHere46","74652splitHere46","String date = <doubleQuotes46>06-04-2007 07:05:00.999<doubleQuotes46>;<newline46mondego>SimpleDateFormat fmt = new SimpleDateFormat(<doubleQuotes46>MM-dd-yyyy HH:mm:ss.S<doubleQuotes46>);<newline46mondego>Date myDate = fmt.parse(date);<newline46mondego><newline46mondego>System.out.println(myDate); <newline46mondego>long timestamp = myDate.getTime();<newline46mondego>System.out.println(timestamp);<newline46mondego>"
"508splitHere46","75439splitHere46","class ExceptionHandler implements Thread.UncaughtExceptionHandler {<newline46mondego>  public void uncaughtException(Thread t, Throwable e) {<newline46mondego>    handle(e);<newline46mondego>  }<newline46mondego><newline46mondego>  public void handle(Throwable throwable) {<newline46mondego>    try {<newline46mondego>      // insert your e-mail code here<newline46mondego>    } catch (Throwable t) {<newline46mondego>      // don't let the exception get thrown out, will cause infinite looping!<newline46mondego>    }<newline46mondego>  }<newline46mondego><newline46mondego>  public static void registerExceptionHandler() {<newline46mondego>    Thread.setDefaultUncaughtExceptionHandler(new ExceptionHandler());<newline46mondego>    System.setProperty(<doubleQuotes46>sun.awt.exception.handler<doubleQuotes46>, ExceptionHandler.class.getName());<newline46mondego>  }<newline46mondego>}<newline46mondego>"
"509splitHere46","75674splitHere46","long longvalue = ...;//from database.<newline46mondego>java.util.Date dateValue = new java.util.Date(longvalue);<newline46mondego>request.setAttribute(<doubleQuotes46>dateValue<doubleQuotes46>, dateValue);<newline46mondego>"
"510splitHere46","75674splitHere46","<fmt:formatDate value=<doubleQuotes46>${dateValue}<doubleQuotes46> pattern=<doubleQuotes46>MM/dd/yyyy HH:mm<doubleQuotes46>/><newline46mondego>"
"511splitHere46","75760splitHere46","Context context = new Context(server, <doubleQuotes46>/<doubleQuotes46>, Context.NO_SESSIONS);<newline46mondego>ServletHolder mainPageViewHolder = new ServletHolder(MainPageView.class);<newline46mondego>// Do this to force Jetty to instantiate the servlet<newline46mondego>mainPageViewHolder.getServlet();  <newline46mondego>context.addServlet(mainPageViewHolder, <doubleQuotes46>/<doubleQuotes46>);<newline46mondego>"
"512splitHere46","76348splitHere46","PreparedStatement stmt = conn.prepareStatement(sql, <newline46mondego>                                 Statement.RETURN_GENERATED_KEYS);<newline46mondego>// ...<newline46mondego><newline46mondego>ResultSet res = stmt.getGeneratedKeys();<newline46mondego>while (res.next())<newline46mondego>    System.out.println(<doubleQuotes46>Generated key: <doubleQuotes46> + res.getInt(1));<newline46mondego>"
"513splitHere46","76348splitHere46","SELECT NEXTVAL(...)"
"514splitHere46","76348splitHere46","executeUpdate(...)"
"515splitHere46","76431splitHere46","ArrayList"
"516splitHere46","76431splitHere46","List"
"517splitHere46","76431splitHere46","Collections.synchronizedList"
"518splitHere46","76431splitHere46","AtomicInteger"
"519splitHere46","76431splitHere46","AtomicReference"
"520splitHere46","76431splitHere46","final AtomicInteger resultAtomicInteger = new AtomicInteger();<newline46mondego>Display.getCurrent().syncExec(new Runnable() { <newline46mondego>    public void run() {<newline46mondego>        MessageBox mb = /* ... */;<newline46mondego>            /* set up messagebox */<newline46mondego>        resultAtomicInteger.set(mb.open());<newline46mondego>}});<newline46mondego>if (SWT.OK == resultAtomicInteger.get()) { /* ... */ }<newline46mondego>"
"521splitHere46","77077splitHere46","public Date getLastFriday( int month, int year ) {<newline46mondego>   Calendar cal = Calendar.getInstance();<newline46mondego>   cal.set( year, month + 1, 1 );<newline46mondego>   cal.add( Calendar.DAY_OF_MONTH, -( cal.get( Calendar.DAY_OF_WEEK ) % 7 + 1 ) );<newline46mondego>   return cal.getTime();<newline46mondego>}<newline46mondego>"
"522splitHere46","77474splitHere46","java.lang.reflect.Array.newInstance(Class<?> componentType, int length)<newline46mondego>"
"523splitHere46","77963splitHere46","Complex a, b, c;<newline46mondego>    ..<newline46mondego>    a = b.add(c)<newline46mondego>"
"524splitHere46","77963splitHere46","b.set(1, 0); // initialize to real number '1'<newline46mondego>a = b; <newline46mondego>b.set(2, 0);<newline46mondego>assert( !a.Equals(b) );<newline46mondego>"
"525splitHere46","78306splitHere46","public class CodeableEnumHelper {<newline46mondego>    public static CodeableEnum getByCode(String code, CodeableEnum[] values) {<newline46mondego>        for (CodeableEnum e : values) {<newline46mondego>            if (e.getCode().equalsIgnoreCase(code)) {<newline46mondego>                return e;<newline46mondego>            }<newline46mondego>        }<newline46mondego>        return null;<newline46mondego>    }<newline46mondego>}<newline46mondego>"
"526splitHere46","78306splitHere46","public enum IMType implements CodableEnum {<newline46mondego>    ...<newline46mondego>    public IMType getByCode(String code) {<newline46mondego>        return (IMType)CodeableEnumHelper.getByCode(code, this.values());<newline46mondego>    } <newline46mondego>}<newline46mondego>"
"527splitHere46","78479splitHere46","<bean id=<doubleQuotes46>firstRealService<doubleQuotes46> class=<doubleQuotes46>com.acme.FirstServiceImpl<doubleQuotes46>/><newline46mondego><bean id=<doubleQuotes46>firstService<doubleQuotes46>  <newline46mondego>    class=<doubleQuotes46>org.springframework.transaction.interceptor.TransactionProxyFactoryBean<doubleQuotes46>><newline46mondego>    <property name=<doubleQuotes46>transactionManager<doubleQuotes46> ref=<doubleQuotes46>firstJpaTm<doubleQuotes46>/><newline46mondego>    <property name=<doubleQuotes46>target<doubleQuotes46> ref=<doubleQuotes46>firstRealService<doubleQuotes46>/><newline46mondego>    <property name=<doubleQuotes46>transactionAttributes<doubleQuotes46>><newline46mondego>        <props><newline46mondego>           <prop key=<doubleQuotes46>insert*<doubleQuotes46>>PROPAGATION_REQUIRED</prop><newline46mondego>           <prop key=<doubleQuotes46>update*<doubleQuotes46>>PROPAGATION_REQUIRED</prop><newline46mondego>           <prop key=<doubleQuotes46>*<doubleQuotes46>>PROPAGATION_REQUIRED,readOnly</prop><newline46mondego>        </props><newline46mondego>    </property><newline46mondego></bean><newline46mondego><!-- similar for your second service --><newline46mondego>"
"528splitHere46","78479splitHere46","<tx:annotation-driven transaction-manager=<doubleQuotes46>txManager<doubleQuotes46>/><newline46mondego><newline46mondego><bean id=<doubleQuotes46>txManager<doubleQuotes46> <newline46mondego>    class=<doubleQuotes46>org.springframework.transaction.jta.JtaTransactionManager<doubleQuotes46>><newline46mondego>    <property name=<doubleQuotes46>transactionManagerName<doubleQuotes46> value=<doubleQuotes46>appserver/jndi/path<doubleQuotes46> /><newline46mondego></bean><newline46mondego>"
"529splitHere46","79845splitHere46","/absolute-path/filename:line-number:column-number: warning(tool-name): message"
"530splitHere46","79845splitHere46","/project/src/com/example/Foo.java:425:9: warning(Checkstyle):Missing a Javadoc comment."
"531splitHere46","79845splitHere46","SuppressWarning"
"532splitHere46","79845splitHere46","NOPMD"
"533splitHere46","79845splitHere46","@SuppressWarnings"
"534splitHere46","79845splitHere46","SuppressWarning(PMD."
"535splitHere46","79845splitHere46","NOPMD"
"536splitHere46","79845splitHere46","// SuppressWarnings(PMD.PreserveStackTrace) justification: (false positive) exceptions are chained"
"537splitHere46","79845splitHere46","SuppressWarnings(PMD."
"538splitHere46","79845splitHere46","@SuppressWarning"
"539splitHere46","79845splitHere46","@SuppressWarnings(<doubleQuotes46>PMD.CompareObjectsWithEquals<doubleQuotes46>) // justification: identity comparision intended"
"540splitHere46","79845splitHere46","CHECKSTYLE:OFF"
"541splitHere46","79845splitHere46","CHECKSTYLE:ON"
"542splitHere46","79845splitHere46","BEGIN& SuppressWarnings(CheckStyle."
"543splitHere46","79845splitHere46","END& SuppressWarnings(CheckStyle."
"544splitHere46","79845splitHere46","// BEGIN SuppressWarnings(Checkstyle.HiddenField) justification: <doubleQuotes46>Effective Java,<doubleQuotes46> 2nd ed., Bloch, Item 2"
"545splitHere46","79845splitHere46","// END SuppressWarnings(Checkstyle.HiddenField)"
"546splitHere46","79845splitHere46","HiddenField"
"547splitHere46","79845splitHere46","BEGIN/END"
"548splitHere46","79845splitHere46","@SuppressWarnings"
"549splitHere46","79845splitHere46","@SuppressWarnings"
"550splitHere46","79845splitHere46","@SuppressWarnings"
"551splitHere46","79845splitHere46","SOURCE"
"552splitHere46","79845splitHere46","@SuppressWarnings"
"553splitHere46","79845splitHere46","@edu.umd.cs.findbugs.annotations.SuppressWarnings(<doubleQuotes46>UWF&#95;FIELD&#95;NOT&#95;INITIALIZED&#95;IN&#95;CONSTRUCTOR<doubleQuotes46>)"
"554splitHere46","79845splitHere46","SuppressWarnings"
"555splitHere46","79933splitHere46","new ClientRepo().LoadClientBy(id)<newline46mondego>                .WithOrders()<newline46mondego>                .WithBonus()<newline46mondego>                .OrderByName();<newline46mondego>"
"556splitHere46","80615splitHere46","MethodLocalInner"
"557splitHere46","80615splitHere46","aMethod"
"558splitHere46","80615splitHere46","void aMethod() {<newline46mondego><newline46mondego>    class MethodLocalInner {<newline46mondego><newline46mondego>            void bMethod() {<newline46mondego><newline46mondego>                    System.out.println(<doubleQuotes46>Inside method-local bMethod<doubleQuotes46>);<newline46mondego>            }<newline46mondego>    }<newline46mondego><newline46mondego>    MethodLocalInner foo = new MethodLocalInner(); // Default Constructor<newline46mondego>    foo.bMethod();<newline46mondego><newline46mondego>}<newline46mondego>"
"559splitHere46","80809splitHere46","int getActiveCount() <newline46mondego>// Returns the approximate number of threads that are actively executing tasks.<newline46mondego>"
"560splitHere46","81366splitHere46","java -Dfile.encoding=UTF-8 ...<newline46mondego>"
"561splitHere46","81534splitHere46","<div id=<doubleQuotes46>Accordion1<doubleQuotes46> class=<doubleQuotes46>Accordion<doubleQuotes46>><newline46mondego>            <div class=<doubleQuotes46>AccordionPanel<doubleQuotes46>><newline46mondego>                <div class=<doubleQuotes46>AccordionPanelTab<doubleQuotes46>>Panel 1</div><newline46mondego>                <div class=<doubleQuotes46>AccordionPanelContent<doubleQuotes46>><newline46mondego>                    Panel 1 Content<br/><newline46mondego>                    Panel 1 Content<br/><newline46mondego>                    Panel 1 Content<br/><newline46mondego>                </div><newline46mondego>            </div><newline46mondego>    </div><newline46mondego>"
"562splitHere46","81742splitHere46","<T extends AbstractNode> T"
"563splitHere46","81742splitHere46","AbstractNode"
"564splitHere46","82025splitHere46","java.util.concurrent"
"565splitHere46","82035splitHere46","tasklist"
"566splitHere46","82035splitHere46","taskkill"
"567splitHere46","82035splitHere46","Runtime.exec()"
"568splitHere46","82132splitHere46","ObjectStreamField"
"569splitHere46","82132splitHere46","serialPersistentFields"
"570splitHere46","82946splitHere46","org.hibernate.engine.EntityEntry.requiresDirtyCheck()"
"571splitHere46","82946splitHere46","SessionImpl.flush()"
"572splitHere46","82946splitHere46","onFlush()"
"573splitHere46","82946splitHere46","SessionImpl.list()"
"574splitHere46","82946splitHere46","autoFlushIfRequired()"
"575splitHere46","82946splitHere46","onAutoFlush()"
"576splitHere46","82946splitHere46","AbstractFlushingEventListener.flushEverythingToExecutions()"
"577splitHere46","82946splitHere46","flushEntities()"
"578splitHere46","82946splitHere46","source.getPersistenceContext().getEntityEntries()"
"579splitHere46","82946splitHere46","DefaultFlushEntityEventListener.onFlushEntity()"
"580splitHere46","82946splitHere46","dirtyCheck()"
"581splitHere46","83256splitHere46","Node originalNode = cursor.getDomNode();<newline46mondego>Node importNode = document.importNode(originalNode.getFirstChild());<newline46mondego>Node otherNode = document.createElement(<doubleQuotes46>someOtherInsertedElement<doubleQuotes46>);<newline46mondego>otherNode.appendChild(importNode);<newline46mondego>document.appendChild(otherNode);<newline46mondego>"
"582splitHere46","84044splitHere46","java -Dmy_var=somevalue my.job.Classname<newline46mondego>"
"583splitHere46","84044splitHere46","log4j.appender.A.File=${my_var}/A.log<newline46mondego>"
"584splitHere46","85128splitHere46","IPath p = new Path(locationString);<newline46mondego>IWorkspaceRoot.getFileForLocation(p);<newline46mondego>"
"585splitHere46","85128splitHere46","fileUrl = FileLocator.toFileURL(new URL(locationString)); <newline46mondego>IWorkspaceRoot.getFileForLocation(fileUrl.getPath());<newline46mondego>"
"586splitHere46","85206splitHere46","for(Iterator<String> i = someList.iterator(); i.hasNext(); ) {<newline46mondego>    String item = i.next();<newline46mondego>    System.out.println(item);<newline46mondego>}<newline46mondego>"
"587splitHere46","85206splitHere46","i.remove();"
"588splitHere46","85206splitHere46","iterator"
"589splitHere46","85206splitHere46","for( : )"
"590splitHere46","85206splitHere46","Iterator"
"591splitHere46","85206splitHere46","implements"
"592splitHere46","85206splitHere46","Iterable interface"
"593splitHere46","85206splitHere46","for(:)"
"594splitHere46","85206splitHere46","array"
"595splitHere46","85206splitHere46","Iterable"
"596splitHere46","85329splitHere46","java.util.Date"
"597splitHere46","85329splitHere46","@Temporal(TemporalType.TIMESTAMP)<newline46mondego>@Column(name=<doubleQuotes46>activationDate<doubleQuotes46>)<newline46mondego>public Date getActivationDate() {<newline46mondego>    return this.activationDate;<newline46mondego>}<newline46mondego>"
"598splitHere46","85329splitHere46","java.util.Date"
"599splitHere46","85589splitHere46","import javax.swing.JFrame;<newline46mondego>import java.awt.Container;<newline46mondego>import javax.swing.JList;<newline46mondego>import javax.swing.ListSelectionModel;<newline46mondego>import javax.swing.JScrollPane;<newline46mondego>import java.awt.Dimension;<newline46mondego><newline46mondego>public class ScrollList extends JFrame {<newline46mondego>    final int defaultValue = 20;<newline46mondego><newline46mondego>    ScrollList() {<newline46mondego>        setDefaultCloseOperation(DISPOSE_ON_CLOSE);<newline46mondego>        Container cp = getContentPane();<newline46mondego>        JList list = createList();<newline46mondego><newline46mondego>        cp.add(createScrollPane(list));<newline46mondego>        pack();<newline46mondego>        list.ensureIndexIsVisible(list.getSelectedIndex());<newline46mondego><newline46mondego>        setVisible(true);<newline46mondego>    }<newline46mondego><newline46mondego>    JList createList() {<newline46mondego>        Integer[] model = new Integer[73];<newline46mondego>        JList list = new JList(model);<newline46mondego><newline46mondego>        for (int i = 1; i < model.length; i++)<newline46mondego>            model[i] = i;<newline46mondego>        list.setSelectedIndex(defaultValue);<newline46mondego>        return list;<newline46mondego>    }<newline46mondego><newline46mondego>    JScrollPane createScrollPane(JList list) {<newline46mondego>        JScrollPane s = new JScrollPane(list); // MAJOR FIX HERE!<newline46mondego>        s.setVerticalScrollBarPolicy(JScrollPane.VERTICAL_SCROLLBAR_ALWAYS);<newline46mondego>        s.setPreferredSize(new Dimension(100, 200));<newline46mondego>        return s;<newline46mondego>    }<newline46mondego><newline46mondego>    public static void main(String[] args) {<newline46mondego>        new ScrollList();<newline46mondego>    }<newline46mondego>}<newline46mondego>"
"600splitHere46","85766splitHere46","select * from table( sp_returning( ? ) )<newline46mondego>"
"601splitHere46","86170splitHere46","void addTextFocusSelect(JComponent component){<newline46mondego>    if(component instanceof JTextComponent){<newline46mondego>        component.addFocusListener(new FocusAdapter() {<newline46mondego>                @Override<newline46mondego>                public void focusGained(FocusEvent event) {<newline46mondego>                    super.focusGained(event);<newline46mondego>                    JTextComponent component = (JTextComponent)event.getComponent();<newline46mondego>                    // a trick I found on JavaRanch.com<newline46mondego>                    // Without this, some components don't honor selectAll<newline46mondego>                    component.setText(component.getText());<newline46mondego>                    component.selectAll();<newline46mondego>                }<newline46mondego>            });<newline46mondego><newline46mondego>    }<newline46mondego>    else<newline46mondego>    {<newline46mondego>        for(Component child: component.getComponents()){<newline46mondego>            if(child instanceof JComponent){<newline46mondego>                addTextFocusSelect((JComponent) child);<newline46mondego>            }<newline46mondego>        }<newline46mondego>    }<newline46mondego>}<newline46mondego>"
"602splitHere46","86367splitHere46","<beans:bean id=<doubleQuotes46>contextSource<doubleQuotes46><newline46mondego>	class=<doubleQuotes46>org.springframework.security.ldap.DefaultSpringSecurityContextSource<doubleQuotes46>><newline46mondego>	<beans:constructor-arg value=<doubleQuotes46>ldap://hostname.queso.com:389/<doubleQuotes46> /><newline46mondego></beans:bean><newline46mondego><newline46mondego><beans:bean id=<doubleQuotes46>ldapAuthenticationProvider<doubleQuotes46><newline46mondego>	class=<doubleQuotes46>org.queso.ad.service.authentication.LdapAuthenticationProvider<doubleQuotes46>><newline46mondego>	<beans:property name=<doubleQuotes46>authenticator<doubleQuotes46> ref=<doubleQuotes46>ldapAuthenticator<doubleQuotes46> /><newline46mondego>	<custom-authentication-provider /><newline46mondego></beans:bean><newline46mondego><newline46mondego><beans:bean id=<doubleQuotes46>ldapAuthenticator<doubleQuotes46><newline46mondego>	class=<doubleQuotes46>org.queso.ad.service.authentication.LdapAuthenticatorImpl<doubleQuotes46>><newline46mondego>	<beans:property name=<doubleQuotes46>contextFactory<doubleQuotes46> ref=<doubleQuotes46>contextSource<doubleQuotes46> /><newline46mondego>	<beans:property name=<doubleQuotes46>principalPrefix<doubleQuotes46> value=<doubleQuotes46>QUESO\<doubleQuotes46> /><newline46mondego></beans:bean><newline46mondego>"
"603splitHere46","86367splitHere46","/**<newline46mondego> * Custom Spring Security authentication provider which tries to bind to an LDAP server with<newline46mondego> * the passed-in credentials; of note, when used with the custom {@link LdapAuthenticatorImpl},<newline46mondego> * does <strong>not</strong> require an LDAP username and password for initial binding.<newline46mondego> * <newline46mondego> * @author Jason<newline46mondego> */<newline46mondego>public class LdapAuthenticationProvider implements AuthenticationProvider {<newline46mondego><newline46mondego>	private LdapAuthenticator authenticator;<newline46mondego><newline46mondego>	public Authentication authenticate(Authentication auth) throws AuthenticationException {<newline46mondego><newline46mondego>		// Authenticate, using the passed-in credentials.<newline46mondego>		DirContextOperations authAdapter = authenticator.authenticate(auth);<newline46mondego><newline46mondego>		// Creating an LdapAuthenticationToken (rather than using the existing Authentication<newline46mondego>		// object) allows us to add the already-created LDAP context for our app to use later.<newline46mondego>		LdapAuthenticationToken ldapAuth = new LdapAuthenticationToken(auth, <doubleQuotes46>ROLE_USER<doubleQuotes46>);<newline46mondego>		InitialLdapContext ldapContext = (InitialLdapContext) authAdapter<newline46mondego>				.getObjectAttribute(<doubleQuotes46>ldapContext<doubleQuotes46>);<newline46mondego>		if (ldapContext != null) {<newline46mondego>			ldapAuth.setContext(ldapContext);<newline46mondego>		}<newline46mondego><newline46mondego>		return ldapAuth;<newline46mondego>	}<newline46mondego><newline46mondego>	public boolean supports(Class clazz) {<newline46mondego>		return (UsernamePasswordAuthenticationToken.class.isAssignableFrom(clazz));<newline46mondego>	}<newline46mondego><newline46mondego>	public LdapAuthenticator getAuthenticator() {<newline46mondego>		return authenticator;<newline46mondego>	}<newline46mondego><newline46mondego>	public void setAuthenticator(LdapAuthenticator authenticator) {<newline46mondego>		this.authenticator = authenticator;<newline46mondego>	}<newline46mondego><newline46mondego>}<newline46mondego>"
"604splitHere46","86367splitHere46","/**<newline46mondego> * Custom Spring Security LDAP authenticator which tries to bind to an LDAP server using the<newline46mondego> * passed-in credentials; does <strong>not</strong> require <doubleQuotes46>master<doubleQuotes46> credentials for an<newline46mondego> * initial bind prior to searching for the passed-in username.<newline46mondego> * <newline46mondego> * @author Jason<newline46mondego> */<newline46mondego>public class LdapAuthenticatorImpl implements LdapAuthenticator {<newline46mondego><newline46mondego>	private DefaultSpringSecurityContextSource contextFactory;<newline46mondego>	private String principalPrefix = <doubleQuotes46><doubleQuotes46>;<newline46mondego><newline46mondego>	public DirContextOperations authenticate(Authentication authentication) {<newline46mondego><newline46mondego>		// Grab the username and password out of the authentication object.<newline46mondego>		String principal = principalPrefix + authentication.getName();<newline46mondego>		String password = <doubleQuotes46><doubleQuotes46>;<newline46mondego>		if (authentication.getCredentials() != null) {<newline46mondego>			password = authentication.getCredentials().toString();<newline46mondego>		}<newline46mondego><newline46mondego>		// If we have a valid username and password, try to authenticate.<newline46mondego>		if (!(<doubleQuotes46><doubleQuotes46>.equals(principal.trim())) && !(<doubleQuotes46><doubleQuotes46>.equals(password.trim()))) {<newline46mondego>			InitialLdapContext ldapContext = (InitialLdapContext) contextFactory<newline46mondego>					.getReadWriteContext(principal, password);<newline46mondego><newline46mondego>			// We need to pass the context back out, so that the auth provider can add it to the<newline46mondego>			// Authentication object.<newline46mondego>			DirContextOperations authAdapter = new DirContextAdapter();<newline46mondego>			authAdapter.addAttributeValue(<doubleQuotes46>ldapContext<doubleQuotes46>, ldapContext);<newline46mondego><newline46mondego>			return authAdapter;<newline46mondego>		} else {<newline46mondego>			throw new BadCredentialsException(<doubleQuotes46>Blank username and/or password!<doubleQuotes46>);<newline46mondego>		}<newline46mondego>	}<newline46mondego><newline46mondego>	/**<newline46mondego>	 * Since the InitialLdapContext that's stored as a property of an LdapAuthenticationToken is<newline46mondego>	 * transient (because it isn't Serializable), we need some way to recreate the<newline46mondego>	 * InitialLdapContext if it's null (e.g., if the LdapAuthenticationToken has been serialized<newline46mondego>	 * and deserialized). This is that mechanism.<newline46mondego>	 * <newline46mondego>	 * @param authenticator<newline46mondego>	 *          the LdapAuthenticator instance from your application's context<newline46mondego>	 * @param auth<newline46mondego>	 *          the LdapAuthenticationToken in which to recreate the InitialLdapContext<newline46mondego>	 * @return<newline46mondego>	 */<newline46mondego>	static public InitialLdapContext recreateLdapContext(LdapAuthenticator authenticator,<newline46mondego>			LdapAuthenticationToken auth) {<newline46mondego>		DirContextOperations authAdapter = authenticator.authenticate(auth);<newline46mondego>		InitialLdapContext context = (InitialLdapContext) authAdapter<newline46mondego>				.getObjectAttribute(<doubleQuotes46>ldapContext<doubleQuotes46>);<newline46mondego>		auth.setContext(context);<newline46mondego>		return context;<newline46mondego>	}<newline46mondego><newline46mondego>	public DefaultSpringSecurityContextSource getContextFactory() {<newline46mondego>		return contextFactory;<newline46mondego>	}<newline46mondego><newline46mondego>	/**<newline46mondego>	 * Set the context factory to use for generating a new LDAP context.<newline46mondego>	 * <newline46mondego>	 * @param contextFactory<newline46mondego>	 */<newline46mondego>	public void setContextFactory(DefaultSpringSecurityContextSource contextFactory) {<newline46mondego>		this.contextFactory = contextFactory;<newline46mondego>	}<newline46mondego><newline46mondego>	public String getPrincipalPrefix() {<newline46mondego>		return principalPrefix;<newline46mondego>	}<newline46mondego><newline46mondego>	/**<newline46mondego>	 * Set the string to be prepended to all principal names prior to attempting authentication<newline46mondego>	 * against the LDAP server.  (For example, if the Active Directory wants the domain-name-plus<newline46mondego>	 * backslash prepended, use this.)<newline46mondego>	 * <newline46mondego>	 * @param principalPrefix<newline46mondego>	 */<newline46mondego>	public void setPrincipalPrefix(String principalPrefix) {<newline46mondego>		if (principalPrefix != null) {<newline46mondego>			this.principalPrefix = principalPrefix;<newline46mondego>		} else {<newline46mondego>			this.principalPrefix = <doubleQuotes46><doubleQuotes46>;<newline46mondego>		}<newline46mondego>	}<newline46mondego><newline46mondego>}<newline46mondego>"
"605splitHere46","86367splitHere46","/**<newline46mondego> * <p><newline46mondego> * Authentication token to use when an app needs further access to the LDAP context used to<newline46mondego> * authenticate the user.<newline46mondego> * </p><newline46mondego> * <newline46mondego> * <p><newline46mondego> * When this is the Authentication object stored in the Spring Security context, an application<newline46mondego> * can retrieve the current LDAP context thusly:<newline46mondego> * </p><newline46mondego> * <newline46mondego> * <pre><newline46mondego> * LdapAuthenticationToken ldapAuth = (LdapAuthenticationToken) SecurityContextHolder<newline46mondego> * 		.getContext().getAuthentication();<newline46mondego> * InitialLdapContext ldapContext = ldapAuth.getContext();<newline46mondego> * </pre><newline46mondego> * <newline46mondego> * @author Jason<newline46mondego> * <newline46mondego> */<newline46mondego>public class LdapAuthenticationToken extends AbstractAuthenticationToken {<newline46mondego><newline46mondego>	private static final long serialVersionUID = -5040340622950665401L;<newline46mondego><newline46mondego>	private Authentication auth;<newline46mondego>	transient private InitialLdapContext context;<newline46mondego>	private List<GrantedAuthority> authorities = new ArrayList<GrantedAuthority>();<newline46mondego><newline46mondego>	/**<newline46mondego>	 * Construct a new LdapAuthenticationToken, using an existing Authentication object and<newline46mondego>	 * granting all users a default authority.<newline46mondego>	 * <newline46mondego>	 * @param auth<newline46mondego>	 * @param defaultAuthority<newline46mondego>	 */<newline46mondego>	public LdapAuthenticationToken(Authentication auth, GrantedAuthority defaultAuthority) {<newline46mondego>		this.auth = auth;<newline46mondego>		if (auth.getAuthorities() != null) {<newline46mondego>			this.authorities.addAll(Arrays.asList(auth.getAuthorities()));<newline46mondego>		}<newline46mondego>		if (defaultAuthority != null) {<newline46mondego>			this.authorities.add(defaultAuthority);<newline46mondego>		}<newline46mondego>		super.setAuthenticated(true);<newline46mondego>	}<newline46mondego><newline46mondego>	/**<newline46mondego>	 * Construct a new LdapAuthenticationToken, using an existing Authentication object and<newline46mondego>	 * granting all users a default authority.<newline46mondego>	 * <newline46mondego>	 * @param auth<newline46mondego>	 * @param defaultAuthority<newline46mondego>	 */<newline46mondego>	public LdapAuthenticationToken(Authentication auth, String defaultAuthority) {<newline46mondego>		this(auth, new GrantedAuthorityImpl(defaultAuthority));<newline46mondego>	}<newline46mondego><newline46mondego>	public GrantedAuthority[] getAuthorities() {<newline46mondego>		GrantedAuthority[] authoritiesArray = this.authorities.toArray(new GrantedAuthority[0]);<newline46mondego>		return authoritiesArray;<newline46mondego>	}<newline46mondego><newline46mondego>	public void addAuthority(GrantedAuthority authority) {<newline46mondego>		this.authorities.add(authority);<newline46mondego>	}<newline46mondego><newline46mondego>	public Object getCredentials() {<newline46mondego>		return auth.getCredentials();<newline46mondego>	}<newline46mondego><newline46mondego>	public Object getPrincipal() {<newline46mondego>		return auth.getPrincipal();<newline46mondego>	}<newline46mondego><newline46mondego>	/**<newline46mondego>	 * Retrieve the LDAP context attached to this user's authentication object.<newline46mondego>	 * <newline46mondego>	 * @return the LDAP context<newline46mondego>	 */<newline46mondego>	public InitialLdapContext getContext() {<newline46mondego>		return context;<newline46mondego>	}<newline46mondego><newline46mondego>	/**<newline46mondego>	 * Attach an LDAP context to this user's authentication object.<newline46mondego>	 * <newline46mondego>	 * @param context<newline46mondego>	 *          the LDAP context<newline46mondego>	 */<newline46mondego>	public void setContext(InitialLdapContext context) {<newline46mondego>		this.context = context;<newline46mondego>	}<newline46mondego><newline46mondego>}<newline46mondego>"
"606splitHere46","86752splitHere46","getCurrentSession().createCriteria(User.class)<newline46mondego>.setProjection( Projections.distinct( Projections.projectionList()<newline46mondego>.add( Projections.property(<doubleQuotes46>name<doubleQuotes46>), <doubleQuotes46>name<doubleQuotes46>)<newline46mondego>.add( Projections.property(<doubleQuotes46>city<doubleQuotes46>), <doubleQuotes46>city<doubleQuotes46>)))<newline46mondego>.add( Restrictions.eq(<doubleQuotes46>city<doubleQuotes46>, <doubleQuotes46>TEST<doubleQuotes46>)))<newline46mondego>.setResultTransformer(Transformers.aliasToBean(User.class))<newline46mondego>.list();<newline46mondego>"
"607splitHere46","86752splitHere46","List<Object> rows = criteria.list();<newline46mondego>for(Object r: rows){<newline46mondego>  Object[] row = (Object[]) r;<newline46mondego>  Type t = ((<Type>) row[0]);<newline46mondego>}<newline46mondego>"
"608splitHere46","86832splitHere46","Pattern.compile(Pattern.quote(s2), Pattern.CASE_INSENSITIVE).matcher(s1).find();<newline46mondego>"
"609splitHere46","87111splitHere46","@Path(<doubleQuotes46>/<doubleQuotes46>)<newline46mondego>class TestClass {<newline46mondego>    @GET<newline46mondego>    @Path(<doubleQuotes46>text<doubleQuotes46>)<newline46mondego>    @Produces(<doubleQuotes46>text/plain<doubleQuotes46>)<newline46mondego>    String getText() {<newline46mondego>        return <doubleQuotes46>String value<doubleQuotes46>;<newline46mondego>    }<newline46mondego>}<newline46mondego>"
"610splitHere46","87519splitHere46","Arrays.toString"
"611splitHere46","87519splitHere46","Collections.toString"
"612splitHere46","87519splitHere46","java.util"
"613splitHere46","87519splitHere46","java.net.URL"
"614splitHere46","88200splitHere46","public class A {<newline46mondego>    public static class Foo extends package1.Foo {}<newline46mondego>}<newline46mondego>public class B {<newline46mondego>    public static class Foo extends package2.Foo {}<newline46mondego>}<newline46mondego>"
"615splitHere46","88262splitHere46","-XX:+CMSClassUnloadingEnabled -XX:+CMSPermGenSweepingEnabled<newline46mondego>"
"616splitHere46","88262splitHere46","tomcat6w //ES//servicename<newline46mondego>"
"617splitHere46","88456splitHere46","Toolkit.getDefaultToolkit().getLockingKeyState(KeyEvent.VK_CAPS_LOCK)<newline46mondego>"
"618splitHere46","88668splitHere46","public class MarshalBase64File implements Marshal {<newline46mondego><newline46mondego>  public static Class FILE_CLASS = File.class;<newline46mondego><newline46mondego>  public Object readInstance(XmlPullParser parser, String namespace, String name, PropertyInfo expected)<newline46mondego>      throws IOException, XmlPullParserException {<newline46mondego>    return Base64.decode(parser.nextText());<newline46mondego>  }<newline46mondego><newline46mondego>  public void writeInstance(XmlSerializer writer, Object obj) throws IOException {<newline46mondego>    File file = (File)obj;<newline46mondego>    int total = (int)file.length();<newline46mondego>    FileInputStream in = new FileInputStream(file);<newline46mondego>    byte b[] = new byte[4096];<newline46mondego>    int pos = 0;<newline46mondego>    int num = b.length;<newline46mondego>    if ((pos + num) > total) {<newline46mondego>      num = total - pos;<newline46mondego>    }<newline46mondego>    int len = in.read(b, 0, num);<newline46mondego>    while ((len != -1) && ((pos + len) < total)) {<newline46mondego>      writer.text(Base64.encode(b, 0, len, null).toString());<newline46mondego>      pos += len;<newline46mondego>      if ((pos + num) > total) {<newline46mondego>        num = total - pos;<newline46mondego>      }<newline46mondego>      len = in.read(b, 0, num);<newline46mondego>    }<newline46mondego>    if (len != -1) {<newline46mondego>      writer.text(Base64.encode(b, 0, len, null).toString());<newline46mondego>    }<newline46mondego>  }<newline46mondego><newline46mondego>  public void register(SoapSerializationEnvelope cm) {<newline46mondego>    cm.addMapping(cm.xsd, <doubleQuotes46>base64Binary<doubleQuotes46>, MarshalBase64File.FILE_CLASS, this);<newline46mondego>  }<newline46mondego>}<newline46mondego>"
"619splitHere46","88668splitHere46","public class MarshalDemo {<newline46mondego><newline46mondego>  public String storeFile(File file) throws IOException, XmlPullParserException {<newline46mondego>    SoapObject soapObj = new SoapObject(<doubleQuotes46>http://www.example.com/ws/service/file/1.0<doubleQuotes46>, <doubleQuotes46>storeFile<doubleQuotes46>);<newline46mondego>    soapObj.addProperty(<doubleQuotes46>file<doubleQuotes46>, file);<newline46mondego><newline46mondego>    SoapSerializationEnvelope envelope = new SoapSerializationEnvelope(SoapEnvelope.VER11);<newline46mondego>    new MarshalBase64File().register(envelope);<newline46mondego>    envelope.encodingStyle = SoapEnvelope.ENC;<newline46mondego>    envelope.setOutputSoapObject(soapObj);<newline46mondego><newline46mondego>    HttpTransport ht = new HttpTransport(new URL(server, <doubleQuotes46>/soap/file<doubleQuotes46>));<newline46mondego>    ht.call(<doubleQuotes46>http://www.example.com/ws/service/file/1.0/storeFile<doubleQuotes46>, envelope);<newline46mondego><newline46mondego>    String retVal = <doubleQuotes46><doubleQuotes46>;<newline46mondego>    SoapObject writeResponse = (SoapObject)envelope.bodyIn;<newline46mondego>    Object obj = writeResponse.getProperty(<doubleQuotes46>statusString<doubleQuotes46>);<newline46mondego>    if (obj instanceof SoapPrimitive) {<newline46mondego>      SoapPrimitive statusString = (SoapPrimitive)obj;<newline46mondego>      String content = statusString.toString();<newline46mondego>      retVal = content;<newline46mondego>    }<newline46mondego>    return retVal;<newline46mondego>  }<newline46mondego>}<newline46mondego>"
"620splitHere46","88805splitHere46","itemLabel"
"621splitHere46","88805splitHere46","ValueExpression"
"622splitHere46","88805splitHere46","<f:selectItem>"
"623splitHere46","88863splitHere46","String s = <doubleQuotes46>some text here<doubleQuotes46>;<newline46mondego>byte[] b = s.getBytes(<doubleQuotes46>UTF-8<doubleQuotes46>);<newline46mondego>"
"624splitHere46","88863splitHere46","byte[] b = {(byte) 99, (byte)97, (byte)116};<newline46mondego>String s = new String(b, <doubleQuotes46>US-ASCII<doubleQuotes46>);<newline46mondego>"
"625splitHere46","90136splitHere46","protected final <T> T with(Matcher<T> argumentMatcher)<newline46mondego>   {<newline46mondego>      argMatchers.add(argumentMatcher);<newline46mondego><newline46mondego>      TypeVariable<?> typeVariable = argumentMatcher.getClass().getTypeParameters()[0];<newline46mondego><newline46mondego>      return (T) Utilities.defaultValueForType(typeVariable.getClass());<newline46mondego>   }<newline46mondego>"
"626splitHere46","90136splitHere46","invokeReturning(withEqual(false)), <doubleQuotes46>bas<doubleQuotes46>);<newline46mondego>"
"627splitHere46","90180splitHere46","Collection"
"628splitHere46","90180splitHere46","Object"
"629splitHere46","90180splitHere46","Iterator"
"630splitHere46","90180splitHere46","Iterators"
"631splitHere46","90180splitHere46","Iterators"
"632splitHere46","90180splitHere46","Iterator"
"633splitHere46","90180splitHere46","Iterator"
"634splitHere46","90247splitHere46","%"
"635splitHere46","90247splitHere46","if ( (a % 2) == 0)<newline46mondego>{<newline46mondego>    isEven = true<newline46mondego>}<newline46mondego>else<newline46mondego>{<newline46mondego>    isEven = false<newline46mondego>}<newline46mondego>"
"636splitHere46","90512splitHere46","public class PdfMergeHelper {<newline46mondego><newline46mondego>    /**<newline46mondego>     * Merges the passed in PDFs, in the order that they are listed in the java.util.List.<newline46mondego>     * Writes the resulting PDF out to the OutputStream provided.<newline46mondego>     * <newline46mondego>     * Sample Usage:<newline46mondego>     * List<InputStream> pdfs = new ArrayList<InputStream>();<newline46mondego>     * pdfs.add(new FileInputStream(<doubleQuotes46>/location/of/pdf/OQS_FRSv1.5.pdf<doubleQuotes46>));<newline46mondego>     * pdfs.add(new FileInputStream(<doubleQuotes46>/location/of/pdf/PPFP-Contract_Genericv0.5.pdf<doubleQuotes46>));<newline46mondego>     * pdfs.add(new FileInputStream(<doubleQuotes46>/location/of/pdf/PPFP-Quotev0.6.pdf<doubleQuotes46>));<newline46mondego>     * FileOutputStream output = new FileOutputStream(<doubleQuotes46>/location/to/write/to/merge.pdf<doubleQuotes46>);<newline46mondego>     * PdfMergeHelper.concatPDFs(pdfs, output, true);<newline46mondego>     * <newline46mondego>     * @param streamOfPDFFiles the list of files to merge, in the order that they should be merged<newline46mondego>     * @param outputStream the output stream to write the merged PDF to<newline46mondego>     * @param paginate true if you want page numbers to appear at the bottom of each page, false otherwise<newline46mondego>     */<newline46mondego>    public static void concatPDFs(List<InputStream> streamOfPDFFiles, OutputStream outputStream, boolean paginate) {<newline46mondego>        Document document = new Document();<newline46mondego>        try {<newline46mondego>            List<InputStream> pdfs = streamOfPDFFiles;<newline46mondego>            List<PdfReader> readers = new ArrayList<PdfReader>();<newline46mondego>            int totalPages = 0;<newline46mondego>            Iterator<InputStream> iteratorPDFs = pdfs.iterator();<newline46mondego><newline46mondego>            // Create Readers for the pdfs.<newline46mondego>            while (iteratorPDFs.hasNext()) {<newline46mondego>                InputStream pdf = iteratorPDFs.next();<newline46mondego>                PdfReader pdfReader = new PdfReader(pdf);<newline46mondego>                readers.add(pdfReader);<newline46mondego>                totalPages += pdfReader.getNumberOfPages();<newline46mondego>            }<newline46mondego>            // Create a writer for the outputstream<newline46mondego>            PdfWriter writer = PdfWriter.getInstance(document, outputStream);<newline46mondego><newline46mondego>            document.open();<newline46mondego>            BaseFont bf = BaseFont.createFont(BaseFont.HELVETICA, BaseFont.CP1252, BaseFont.NOT_EMBEDDED);<newline46mondego>            PdfContentByte cb = writer.getDirectContent(); // Holds the PDF<newline46mondego>            // data<newline46mondego><newline46mondego>            PdfImportedPage page;<newline46mondego>            int currentPageNumber = 0;<newline46mondego>            int pageOfCurrentReaderPDF = 0;<newline46mondego>            Iterator<PdfReader> iteratorPDFReader = readers.iterator();<newline46mondego><newline46mondego>            // Loop through the PDF files and add to the output.<newline46mondego>            while (iteratorPDFReader.hasNext()) {<newline46mondego>                PdfReader pdfReader = iteratorPDFReader.next();<newline46mondego><newline46mondego>                // Create a new page in the target for each source page.<newline46mondego>                while (pageOfCurrentReaderPDF < pdfReader.getNumberOfPages()) {<newline46mondego>                    document.newPage();<newline46mondego>                    pageOfCurrentReaderPDF++;<newline46mondego>                    currentPageNumber++;<newline46mondego>                    page = writer.getImportedPage(pdfReader, pageOfCurrentReaderPDF);<newline46mondego>                    cb.addTemplate(page, 0, 0);<newline46mondego><newline46mondego>                    // Code for pagination.<newline46mondego>                    if (paginate) {<newline46mondego>                        cb.beginText();<newline46mondego>                        cb.setFontAndSize(bf, 9);<newline46mondego>                        cb.showTextAligned(PdfContentByte.ALIGN_CENTER, <doubleQuotes46><doubleQuotes46> + currentPageNumber + <doubleQuotes46> of <doubleQuotes46> + totalPages,<newline46mondego>                                520, 5, 0);<newline46mondego>                        cb.endText();<newline46mondego>                    }<newline46mondego>                }<newline46mondego>                pageOfCurrentReaderPDF = 0;<newline46mondego>            }<newline46mondego>            outputStream.flush();<newline46mondego>            document.close();<newline46mondego>            outputStream.close();<newline46mondego>        } catch (Exception e) {<newline46mondego>            e.printStackTrace();<newline46mondego>        } finally {<newline46mondego>            if (document.isOpen()) {<newline46mondego>                document.close();<newline46mondego>            }<newline46mondego>            try {<newline46mondego>                if (outputStream != null) {<newline46mondego>                    outputStream.close();<newline46mondego>                }<newline46mondego>            } catch (IOException ioe) {<newline46mondego>                ioe.printStackTrace();<newline46mondego>            }<newline46mondego>        }<newline46mondego>    }<newline46mondego>}<newline46mondego>"
"637splitHere46","90563splitHere46","@MyStaticCheck(false, <doubleQuotes46>Compile Time Error, kind-of<doubleQuotes46>)<newline46mondego>public static void main(String[] args) {<newline46mondego>    return;<newline46mondego>}<newline46mondego>"
"638splitHere46","90655splitHere46","System.out.println(<doubleQuotes46>Hello<doubleQuotes46>);<newline46mondego>"
"639splitHere46","90655splitHere46","super"
"640splitHere46","90655splitHere46","base"
"641splitHere46","90655splitHere46","public class A extends B {<newline46mondego>}<newline46mondego>"
"642splitHere46","90655splitHere46","A"
"643splitHere46","90655splitHere46","B"
"644splitHere46","90655splitHere46","class A : B"
"645splitHere46","90655splitHere46","final"
"646splitHere46","90655splitHere46","const"
"647splitHere46","90655splitHere46","ArrayList"
"648splitHere46","90655splitHere46","Vector"
"649splitHere46","90655splitHere46","Hashtable"
"650splitHere46","90655splitHere46","HashSet"
"651splitHere46","90655splitHere46","ArrayList"
"652splitHere46","90655splitHere46","HashMap"
"653splitHere46","90655splitHere46","Set"
"654splitHere46","90655splitHere46","List"
"655splitHere46","90655splitHere46","Map"
"656splitHere46","90655splitHere46","virtual"
"657splitHere46","90655splitHere46","final"
"658splitHere46","90655splitHere46","int"
"659splitHere46","90655splitHere46","float"
"660splitHere46","90655splitHere46","double"
"661splitHere46","90655splitHere46","char"
"662splitHere46","90655splitHere46","long"
"663splitHere46","90655splitHere46","Object"
"664splitHere46","90655splitHere46","Integer"
"665splitHere46","90655splitHere46","Float"
"666splitHere46","90655splitHere46","Double"
"667splitHere46","90960splitHere46","@UniqueConstraint"
"668splitHere46","90960splitHere46","@Entity<newline46mondego>@Table(name = <doubleQuotes46>dm_action_plan<doubleQuotes46><newline46mondego>       uniqueConstraints={@UniqueConstraint(columnNames={<doubleQuotes46>command<doubleQuotes46>,<doubleQuotes46>model<doubleQuotes46>)})<newline46mondego>public class ActionPlan {<newline46mondego>    @Id<newline46mondego>    private int pk;<newline46mondego><newline46mondego>    @Column(name = <doubleQuotes46>command<doubleQuotes46>, nullable = false)<newline46mondego>    private String command;<newline46mondego><newline46mondego>    @Column(name = <doubleQuotes46>model<doubleQuotes46>, nullable = false)<newline46mondego>    String model;<newline46mondego>}<newline46mondego>"
"669splitHere46","91097splitHere46","t:   dump thread list<newline46mondego>v:   dump thread stack<newline46mondego>"
"670splitHere46","91097splitHere46","kill -3 <java_process_id>"
"671splitHere46","91097splitHere46","Thread"
"672splitHere46","91097splitHere46","Thread.getAllStackTraces()"
"673splitHere46","92124splitHere46","URL url = new URL(yourUrlHere);<newline46mondego>Proxy proxy = new Proxy(Proxy.Type.DIRECT, <newline46mondego>    new InetSocketAddress( <newline46mondego>        InetAddress.getByAddress(<newline46mondego>            new byte[]{your, ip, interface, here}), yourTcpPortHere));<newline46mondego>URLConnection conn = url.openConnection(proxy);<newline46mondego>"
"674splitHere46","92962splitHere46","import javax.swing.plaf.basic.BasicLabelUI;<newline46mondego>import javax.swing.*;<newline46mondego>import java.awt.*;<newline46mondego>import java.awt.geom.AffineTransform;<newline46mondego><newline46mondego>public class VerticalLabelUI extends BasicLabelUI {<newline46mondego>  static {<newline46mondego>    labelUI = new VerticalLabelUI(false);<newline46mondego>  }<newline46mondego><newline46mondego>  protected boolean clockwise;<newline46mondego><newline46mondego>  public VerticalLabelUI( boolean clockwise ){<newline46mondego>    super();<newline46mondego>    this.clockwise = clockwise;<newline46mondego>  }<newline46mondego><newline46mondego><newline46mondego>  public Dimension getPreferredSize(JComponent c){<newline46mondego>    Dimension dim = super.getPreferredSize(c);<newline46mondego>    return new Dimension( dim.height, dim.width );<newline46mondego>  }<newline46mondego><newline46mondego>  private static Rectangle paintIconR = new Rectangle();<newline46mondego>  private static Rectangle paintTextR = new Rectangle();<newline46mondego>  private static Rectangle paintViewR = new Rectangle();<newline46mondego>  private static Insets paintViewInsets = new Insets(0, 0, 0, 0);<newline46mondego><newline46mondego>  public void paint(Graphics g, JComponent c){<newline46mondego>    JLabel label = (JLabel)c;<newline46mondego>    String text = label.getText();<newline46mondego>    Icon icon = (label.isEnabled()) ? label.getIcon() : label.getDisabledIcon();<newline46mondego><newline46mondego>    if ((icon == null) && (text == null)) {<newline46mondego>      return;<newline46mondego>    }<newline46mondego><newline46mondego>    FontMetrics fm = g.getFontMetrics();<newline46mondego>    paintViewInsets = c.getInsets(paintViewInsets);<newline46mondego><newline46mondego>    paintViewR.x = paintViewInsets.left;<newline46mondego>    paintViewR.y = paintViewInsets.top;<newline46mondego><newline46mondego>    // Use inverted height & width<newline46mondego>    paintViewR.height = c.getWidth() - (paintViewInsets.left + paintViewInsets.right);<newline46mondego>    paintViewR.width = c.getHeight() - (paintViewInsets.top + paintViewInsets.bottom);<newline46mondego><newline46mondego>    paintIconR.x = paintIconR.y = paintIconR.width = paintIconR.height = 0;<newline46mondego>    paintTextR.x = paintTextR.y = paintTextR.width = paintTextR.height = 0;<newline46mondego><newline46mondego>    String clippedText =<newline46mondego>            layoutCL(label, fm, text, icon, paintViewR, paintIconR, paintTextR);<newline46mondego><newline46mondego>    Graphics2D g2 = (Graphics2D) g;<newline46mondego>    AffineTransform tr = g2.getTransform();<newline46mondego>    if( clockwise )<newline46mondego>    {<newline46mondego>      g2.rotate( Math.PI / 2 );<newline46mondego>      g2.translate( 0, - c.getWidth() );<newline46mondego>    }<newline46mondego>    else<newline46mondego>    {<newline46mondego>      g2.rotate( - Math.PI / 2 );<newline46mondego>      g2.translate( - c.getHeight(), 0 );<newline46mondego>    }<newline46mondego><newline46mondego>    if (icon != null) {<newline46mondego>      icon.paintIcon(c, g, paintIconR.x, paintIconR.y);<newline46mondego>    }<newline46mondego><newline46mondego>    if (text != null) {<newline46mondego>      int textX = paintTextR.x;<newline46mondego>      int textY = paintTextR.y + fm.getAscent();<newline46mondego><newline46mondego>      if (label.isEnabled()) {<newline46mondego>        paintEnabledText(label, g, clippedText, textX, textY);<newline46mondego>      }<newline46mondego>      else {<newline46mondego>        paintDisabledText(label, g, clippedText, textX, textY);<newline46mondego>      }<newline46mondego>    }<newline46mondego><newline46mondego>    g2.setTransform( tr );<newline46mondego>  }<newline46mondego>}<newline46mondego>"
"675splitHere46","93278splitHere46","config.setLogConfig(<doubleQuotes46>d:/temp<doubleQuotes46>, Level.FINEST);<newline46mondego>"
"676splitHere46","93278splitHere46","config.setLogConfig(<doubleQuotes46>/temp<doubleQuotes46>, Level.FINEST);<newline46mondego>"
"677splitHere46","93278splitHere46","config.setLogConfig(<doubleQuotes46>d:\\temp<doubleQuotes46>, Level.FINEST);<newline46mondego>"
"678splitHere46","93278splitHere46","http://longlake.minnovent.com/repos/birt_example<newline46mondego>"
"679splitHere46","93278splitHere46","birt_api_example<newline46mondego>birt_runtime_lib<newline46mondego>script.lib<newline46mondego>"
"680splitHere46","93685splitHere46","import java.util.*;<newline46mondego>import java.io.*;<newline46mondego>import java.nio.*;<newline46mondego>import java.nio.channels.*;<newline46mondego>import java.nio.charset.*;<newline46mondego><newline46mondego>public class Buffer<newline46mondego>{<newline46mondego>    public static void main(String args[]) throws Exception<newline46mondego>    {<newline46mondego>        String inputFile = <doubleQuotes46>somefile<doubleQuotes46>;<newline46mondego>        FileInputStream in = new FileInputStream(inputFile);<newline46mondego>        FileChannel ch = in.getChannel();<newline46mondego>        ByteBuffer buf = ByteBuffer.allocateDirect(BUFSIZE);  // BUFSIZE = 256<newline46mondego><newline46mondego>        Charset cs = Charset.forName(<doubleQuotes46>ASCII<doubleQuotes46>); // Or whatever encoding you want<newline46mondego><newline46mondego>        /* read the file into a buffer, 256 bytes at a time */<newline46mondego>        int rd;<newline46mondego>        while ( (rd = ch.read( buf )) != -1 ) {<newline46mondego>            buf.rewind();<newline46mondego>            CharBuffer chbuf = cs.decode(buf);<newline46mondego>            for ( int i = 0; i < chbuf.length(); i++ ) {<newline46mondego>                /* print each character */<newline46mondego>                System.out.print(chbuf.get());<newline46mondego>            }<newline46mondego>            buf.clear();<newline46mondego>        }<newline46mondego>    }<newline46mondego>}<newline46mondego>"
"681splitHere46","93717splitHere46","test"
"682splitHere46","93717splitHere46","<c:if test=<doubleQuotes46>true<doubleQuotes46>>Hello world!</c:if><newline46mondego>"
"683splitHere46","93717splitHere46","<%= %>"
"684splitHere46","93717splitHere46","<c:if>"
"685splitHere46","93889splitHere46","<newline46mondego>byte[] buffer = new byte[ ( string.length + 7 ) / 8 ];<newline46mondego>for ( int i = 0; i < buffer.length; ++i ) {<newline46mondego>   byte current = 0;<newline46mondego>   for ( int j = 7; j >= 0; --j )<newline46mondego>       if ( string[ i * 8 + j ] == '1' )<newline46mondego>           current |= 1 << j;<newline46mondego>   output( current );<newline46mondego>}<newline46mondego></pre>"
"686splitHere46","93914splitHere46","javax.swing.SwingUtilities.getWindowAncestor(theApplet)<newline46mondego>"
"687splitHere46","93979splitHere46","string.matches(<doubleQuotes46>\\p{L}<doubleQuotes46>); // Unicode letter<newline46mondego>string.matches(<doubleQuotes46>\\p{Lu}<doubleQuotes46>); // Unicode upper-case letter<newline46mondego>"
"688splitHere46","93979splitHere46","Character.isLetter(character);<newline46mondego>"
"689splitHere46","94411splitHere46","@Implements"
"690splitHere46","94588splitHere46","<import resource=<doubleQuotes46>services.xml<doubleQuotes46>/><newline46mondego><import resource=<doubleQuotes46>resources/messageSource.xml<doubleQuotes46>/><newline46mondego><import resource=<doubleQuotes46>/resources/themeSource.xml<doubleQuotes46>/><newline46mondego><newline46mondego><bean id=<doubleQuotes46>bean1<doubleQuotes46> class=<doubleQuotes46>...<doubleQuotes46>/><newline46mondego><bean id=<doubleQuotes46>bean2<doubleQuotes46> class=<doubleQuotes46>...<doubleQuotes46>/><newline46mondego>"
"691splitHere46","95030splitHere46","<newline46mondego>    try<newline46mondego>    {<newline46mondego>        throw new ArgumentException(<doubleQuotes46>some operation that throws an exception<doubleQuotes46>);<newline46mondego>        string s = <doubleQuotes46>blah<doubleQuotes46>;<newline46mondego>    }<newline46mondego>    catch (e as ArgumentException)<newline46mondego>    {  <newline46mondego>        Console.Out.WriteLine(s);<newline46mondego>    }<newline46mondego>"
"692splitHere46","95636splitHere46","boolean stopFlag = false;<newline46mondego>Object[] latestArgs = null;<newline46mondego><newline46mondego>public void run() {<newline46mondego>  while (!stopFlag) {<newline46mondego>    if (latestArgs != null) {<newline46mondego>      Object[] args = latestArgs;<newline46mondego>      latestArgs = null;<newline46mondego>      perform3dUpdate(args);<newline46mondego>    } else {<newline46mondego>      Thread.sleep(500);<newline46mondego>    }<newline46mondego>  }<newline46mondego>}<newline46mondego><newline46mondego>public void endThread() {<newline46mondego>  stopFlag = true;<newline46mondego>}<newline46mondego><newline46mondego>public void updateSettings(Object[] args) {<newline46mondego>  latestArgs = args;<newline46mondego>}<newline46mondego>"
"693splitHere46","96422splitHere46","PostMethod post = new PostMethod(url);<newline46mondego>RequestEntity entity = new FileRequestEntity(inputFile, <doubleQuotes46>text/xml; charset=ISO-8859-1<doubleQuotes46>);<newline46mondego>post.setRequestEntity(entity);<newline46mondego>HttpClient httpclient = new HttpClient();<newline46mondego>int result = httpclient.executeMethod(post);<newline46mondego>"
"694splitHere46","97176splitHere46","class AWTExceptionHandler {<newline46mondego><newline46mondego>  public void handle(Throwable t) {<newline46mondego>    try {<newline46mondego>      // insert your exception handling code here<newline46mondego>      // or do nothing to make it go away<newline46mondego>    } catch (Throwable t) {<newline46mondego>      // don't let the exception get thrown out, will cause infinite looping!<newline46mondego>    }<newline46mondego>  }<newline46mondego><newline46mondego>  public static void registerExceptionHandler() {<newline46mondego>    System.setProperty('sun.awt.exception.handler', AWTExceptionHandler.class.getName())<newline46mondego>  }<newline46mondego>}<newline46mondego>"
"695splitHere46","97630splitHere46","<newline46mondego>class MyClass extends MyClass2 implements Serializable{<newline46mondego><newline46mondego>  public MyClass(int quantity) {<newline46mondego>    setNonSerializableProperty(new NonSerializableClass(quantity));<newline46mondego>  }<newline46mondego><newline46mondego>  private void writeObject(java.io.ObjectOutputStream out)<newline46mondego>  throws IOException{<newline46mondego>    // note, here we don't need out.defaultWriteObject(); because<newline46mondego>    // MyClass has no other state to serialize<newline46mondego>    out.writeInt(super.getNonSerializableProperty().getQuantity());<newline46mondego>  }<newline46mondego><newline46mondego>  private void readObject(java.io.ObjectInputStream in)<newline46mondego>  throws IOException {<newline46mondego>    // note, here we don't need in.defaultReadObject();<newline46mondego>    // because MyClass has no other state to deserialize<newline46mondego>    super.setNonSerializableProperty(new NonSerializableClass(in.readInt()));<newline46mondego>  }<newline46mondego>}<newline46mondego><newline46mondego>/* this class must have no-arg constructor accessible to MyClass */<newline46mondego>class MyClass2 {<newline46mondego><newline46mondego>  /* this property must be gettable/settable by MyClass.  It cannot be final, therefore. */<newline46mondego>  private NonSerializableClass nonSerializableProperty;<newline46mondego><newline46mondego>  public void setNonSerializableProperty(NonSerializableClass nonSerializableProperty) {<newline46mondego>    this.nonSerializableProperty = nonSerializableProperty;<newline46mondego>  }<newline46mondego><newline46mondego>  public NonSerializableClass getNonSerializableProperty() {<newline46mondego>    return nonSerializableProperty;<newline46mondego>  }<newline46mondego>}<newline46mondego><newline46mondego>class NonSerializableClass{<newline46mondego><newline46mondego>  private final int quantity;<newline46mondego><newline46mondego>  public NonSerializableClass(int quantity){<newline46mondego>    this.quantity = quantity;<newline46mondego>  }<newline46mondego><newline46mondego>  public int getQuantity() {<newline46mondego>    return quantity;<newline46mondego>  }<newline46mondego>}<newline46mondego>"
"696splitHere46","97897splitHere46","java.util.concurrent.locks.Lock lock = Hazelcast.getLock (<doubleQuotes46>mymonitor<doubleQuotes46>);<newline46mondego>lock.lock ();<newline46mondego>try {<newline46mondego>// do your stuff<newline46mondego>}finally {<newline46mondego>   lock.unlock();<newline46mondego>}<newline46mondego>"
"697splitHere46","98544splitHere46","<bean id=<doubleQuotes46>lazy<doubleQuotes46> class=<doubleQuotes46>com.foo.ExpensiveToCreateBean<doubleQuotes46> lazy-init=<doubleQuotes46>true<doubleQuotes46>/><newline46mondego>"
"698splitHere46","99175splitHere46","Date myDate = new Date();<newline46mondego>SimpleDateFormat sdf = new SimpleDateFormat(<doubleQuotes46>yyyy-MM-dd:HH-mm-ss<doubleQuotes46>);<newline46mondego>String myDateString = sdf.format(myDate);<newline46mondego>"
"699splitHere46","99175splitHere46","Date myDate = new Date();<newline46mondego>FastDateFormat fdf = FastDateFormat.getInstance(<doubleQuotes46>yyyy-MM-dd:HH-mm-ss<doubleQuotes46>);<newline46mondego>String myDateString = fdf.format(myDate);<newline46mondego>"
"700splitHere46","99175splitHere46","SimpleDateFormat sdf = new SimpleDateFormat(<doubleQuotes46>yyyy-MM-dd:HH-mm-ss<doubleQuotes46>);<newline46mondego>Date yourDate = sdf.parse(<doubleQuotes46>2008-09-18:22-03-15<doubleQuotes46>);<newline46mondego>"
"701splitHere46","99286splitHere46","rmiregistry"
"702splitHere46","99286splitHere46","LocateRegistry.createRegistry"
"703splitHere46","99286splitHere46","rmiregistry"
"704splitHere46","99286splitHere46","createRegistry"
"705splitHere46","99351splitHere46","import junit.framework.JUnit4TestAdapter;<newline46mondego>import junit.framework.TestCase;<newline46mondego>import junit.framework.TestSuite;<newline46mondego><newline46mondego>import com.clarkware.junitperf.TestFactory;<newline46mondego><newline46mondego>class JUnit4TestFactory extends TestFactory {<newline46mondego><newline46mondego>    static class DummyTestCase extends TestCase {<newline46mondego>    	public void test() {<newline46mondego>    	}<newline46mondego>    }<newline46mondego><newline46mondego>    private Class<?> junit4TestClass;<newline46mondego><newline46mondego>    public JUnit4TestFactory(Class<?> testClass) {<newline46mondego>    	super(DummyTestCase.class);<newline46mondego>    	this.junit4TestClass = testClass;<newline46mondego>    }<newline46mondego><newline46mondego>    @Override<newline46mondego>    protected TestSuite makeTestSuite() {<newline46mondego>    	JUnit4TestAdapter unit4TestAdapter = new JUnit4TestAdapter(this.junit4TestClass);<newline46mondego>    	TestSuite testSuite = new TestSuite(<doubleQuotes46>JUnit4TestFactory<doubleQuotes46>);<newline46mondego>    	testSuite.addTest(unit4TestAdapter);<newline46mondego>    	return testSuite;<newline46mondego>    }<newline46mondego><newline46mondego>}<newline46mondego>"
"706splitHere46","99977splitHere46","<set-property name=<doubleQuotes46>user.agent<doubleQuotes46> value=<doubleQuotes46>gecko1_8<doubleQuotes46> /><newline46mondego>"
"707splitHere46","100396splitHere46","@Path(<doubleQuotes46>/helloWorld<doubleQuotes46>)<newline46mondego>@Consumes({<doubleQuotes46>application/xml<doubleQuotes46>, <doubleQuotes46>application/json<doubleQuotes46>})<newline46mondego>@Produces({<doubleQuotes46>application/xml<doubleQuotes46>, <doubleQuotes46>application/json<doubleQuotes46>})<newline46mondego>@Singleton<newline46mondego>public class MyService {<newline46mondego>	@GET<newline46mondego>	public String getRequest(@QueryParam(<doubleQuotes46>name<doubleQuotes46>) String name) {<newline46mondego>	        return <doubleQuotes46>Name was <doubleQuotes46> + name;<newline46mondego>	}<newline46mondego>}<newline46mondego>"
"708splitHere46","101613splitHere46","int ipow(int base, int exp)<newline46mondego>{<newline46mondego>    int result = 1;<newline46mondego>    while (exp)<newline46mondego>    {<newline46mondego>        if (exp & 1)<newline46mondego>            result *= base;<newline46mondego>        exp >>= 1;<newline46mondego>        base *= base;<newline46mondego>    }<newline46mondego><newline46mondego>    return result;<newline46mondego>}<newline46mondego>"
"709splitHere46","102403splitHere46","if (log.isDebugEnabled())<newline46mondego>  log.debug(bla_bla_bla);<newline46mondego>"
"710splitHere46","102737splitHere46","/**<newline46mondego>   * Return an int containing the wrapped line index at the given position<newline46mondego>   * @param component JTextPane<newline46mondego>   * @param int pos<newline46mondego>   * @return int<newline46mondego>   */<newline46mondego>  public int getLineNumber(JTextPane component, int pos) <newline46mondego>  {<newline46mondego>    int posLine;<newline46mondego>    int y = 0;<newline46mondego><newline46mondego>    try<newline46mondego>    {<newline46mondego>      Rectangle caretCoords = component.modelToView(pos);<newline46mondego>      y = (int) caretCoords.getY();<newline46mondego>    }<newline46mondego>    catch (BadLocationException ex)<newline46mondego>    {<newline46mondego>    }<newline46mondego><newline46mondego>    int lineHeight = component.getFontMetrics(component.getFont()).getHeight();<newline46mondego>    posLine = (y / lineHeight) + 1;<newline46mondego>    return posLine;<newline46mondego>  }<newline46mondego>"
"711splitHere46","102747splitHere46","import java.util.jar.*;<newline46mondego><newline46mondego>...<newline46mondego><newline46mondego>JarFile myJar = new JarFile(<doubleQuotes46>nameOfJar.jar<doubleQuotes46>);    // various constructors available<newline46mondego>Manifest manifest = myJar.getManifest();<newline46mondego>Map<String,Attributes> manifestContents = manifest.getAttributes();<newline46mondego>"
"712splitHere46","103295splitHere46","this.setIconImage(STANDARD_ICON);<newline46mondego>"
"713splitHere46","103768splitHere46","SecureRandom rnd = new SecureRandom();<newline46mondego>  /* Byte array length is multiple of LCM(log2(64), 8) / 8 = 3. */<newline46mondego>  byte[] password = new byte[18];<newline46mondego>  rnd.nextBytes(password);<newline46mondego>  String encoded = Base64.encode(password);<newline46mondego>"
"714splitHere46","103768splitHere46","SecureRandom rnd = new SecureRandom();<newline46mondego>/* Bit length is multiple of log2(32) = 5. */<newline46mondego>String encoded = new BigInteger(130, rnd).toString(32);<newline46mondego>"
"715splitHere46","103973splitHere46","<c:set var=<doubleQuotes46>ageTotal<doubleQuotes46> value=<doubleQuotes46>${0}<doubleQuotes46> /><newline46mondego><c:forEach var=<doubleQuotes46>person<doubleQuotes46> items=<doubleQuotes46>${personList}<doubleQuotes46>><newline46mondego>  <c:set var=<doubleQuotes46>ageTotal<doubleQuotes46> value=<doubleQuotes46>${ageTotal + person.age}<doubleQuotes46> /><newline46mondego>  <tr><td>${person.name}<td><td>${person.age}</td></tr><newline46mondego></c:forEach><newline46mondego>${ageTotal}<newline46mondego>"
"716splitHere46","103973splitHere46","<function><newline46mondego>  <name>sum</name><newline46mondego>  <function-class>com.example.PersonUtils</function-class><newline46mondego>  <function-signature>int sum(java.util.List people)</function-signature><newline46mondego></function><newline46mondego>"
"717splitHere46","103973splitHere46","<%@ taglib prefix=<doubleQuotes46>f<doubleQuotes46> uri=<doubleQuotes46>/your-tld-uri<doubleQuotes46>%><newline46mondego>...<newline46mondego><c:out value=<doubleQuotes46>${f:sum(personList)}<doubleQuotes46>/><newline46mondego>"
"718splitHere46","103973splitHere46","public PersonSumTag extends TagSupport {<newline46mondego><newline46mondego>   private List personList;<newline46mondego><newline46mondego>   public List getPersonList(){<newline46mondego>      return personList;<newline46mondego>   }<newline46mondego><newline46mondego>   public void setPersonList(List personList){<newline46mondego>      this.personList = personList;<newline46mondego>   }<newline46mondego><newline46mondego>   public int doStartTag() throws JspException {<newline46mondego>      try {<newline46mondego>        int sum = 0;<newline46mondego>        for(Iterator it = personList.iterator(); it.hasNext()){<newline46mondego>          Person p = (Person)it.next();<newline46mondego>          sum+=p.getAge();<newline46mondego>        } <newline46mondego>        pageContext.getOut().print(<doubleQuotes46><doubleQuotes46>+sum);<newline46mondego>      } catch (Exception ex) {<newline46mondego>         throw new JspTagException(<doubleQuotes46>SimpleTag: <doubleQuotes46> + <newline46mondego>            ex.getMessage());<newline46mondego>      }<newline46mondego>      return SKIP_BODY;<newline46mondego>   }<newline46mondego>   public int doEndTag() {<newline46mondego>      return EVAL_PAGE;<newline46mondego>   }<newline46mondego>}<newline46mondego>"
"719splitHere46","103973splitHere46","<tag><newline46mondego>   <name>personSum</name><newline46mondego>   <tag-class>example.PersonSumTag</tag-class><newline46mondego>   <body-content>empty</body-content><newline46mondego>   ...<newline46mondego>   <attribute><newline46mondego>      <name>personList</name><newline46mondego>      <required>true</required><newline46mondego>      <rtexprvalue>true</rtexprvalue><newline46mondego>      <type>java.util.List</type><newline46mondego>   </attribute><newline46mondego>   ...<newline46mondego></tag><newline46mondego>"
"720splitHere46","103973splitHere46","<%@ taglib uri=<doubleQuotes46>/you-taglib-uri<doubleQuotes46> prefix=<doubleQuotes46>p<doubleQuotes46> %><newline46mondego>"
"721splitHere46","103973splitHere46","<c:forEach var=<doubleQuotes46>person<doubleQuotes46> items=<doubleQuotes46>${personList}<doubleQuotes46>><newline46mondego>  <tr><td>${person.name}<td><td>${person.age}</td></tr><newline46mondego></c:forEach><newline46mondego><p:personSum personList=<doubleQuotes46>${personList}<doubleQuotes46>/><newline46mondego>"
"722splitHere46","104123splitHere46","connection.close()"
"723splitHere46","104392splitHere46","<plugin><newline46mondego>  <groupId>org.codehaus.mojo</groupId><newline46mondego>  <artifactId>axistools-maven-plugin</artifactId><newline46mondego>  <executions><newline46mondego>    <execution><newline46mondego>      <goals><newline46mondego>        <goal>wsdl2java</goal><newline46mondego>      </goals><newline46mondego>    </execution><newline46mondego>  </executions><newline46mondego></plugin><newline46mondego>"
"724splitHere46","105259splitHere46","src/test/resources folder. </p><newline46mondego><newline46mondego><pre><newline46mondego>    <project><newline46mondego>        <build><newline46mondego>            <plugins><newline46mondego>                <plugin><newline46mondego>                    <groupId>com.mydomain,mytools</groupId><newline46mondego>                    <artifactId>mytool-maven-plugin</artifactId><newline46mondego>                    <configuration><newline46mondego>                        <!-- Insert configuration settings here --><newline46mondego>                    </configuration><newline46mondego>                    <executions><newline46mondego>                        <execution><newline46mondego>                            <goals><newline46mondego>                                <goal>mygoal</goal><newline46mondego>                            </goals><newline46mondego>                        </execution><newline46mondego>                    </executions><newline46mondego>                </plugin><newline46mondego>            </plugins><newline46mondego>        </build><newline46mondego>    </project><newline46mondego></pre><newline46mondego><newline46mondego><p>Use the AbstractMojoTest.lookupMojo(String,File) (or one of the other variations) to load the Mojo for a specific goal and execute it.</p><newline46mondego><newline46mondego><pre><newline46mondego>    final File testPom = new File(PlexusTestCase.getBasedir(), <doubleQuotes46>/target/test-classes/mytools-plugin-config.xml<doubleQuotes46>);<newline46mondego>    Mojo mojo = this.lookupMojo(<doubleQuotes46>mygoal<doubleQuotes46>, testPom);<newline46mondego>    // Insert assertions to validate that your plugin was initialised correctly<newline46mondego>    mojo.execute();<newline46mondego>    // Insert assertions to validate that your plugin behaved as expected<newline46mondego>"
"725splitHere46","105403splitHere46","java -cp workspace\p1\bin;workspace\p2\bin foo.Main<newline46mondego>"
"726splitHere46","105403splitHere46","workspace\project\<newline46mondego>                 \.classpath<newline46mondego>                 \.project<newline46mondego>                 \debug.bat<newline46mondego>                 \bin\Main.class<newline46mondego>                 \src\Main.java<newline46mondego>"
"727splitHere46","105403splitHere46","@ECHO OFF<newline46mondego>SET A_PORT=8787<newline46mondego>SET A_DBG=-Xdebug -Xnoagent -Xrunjdwp:transport=dt_socket,address=%A_PORT%,server=y,suspend=y<newline46mondego>java.exe %A_DBG% -cp .\bin Main<newline46mondego>"
"728splitHere46","105649splitHere46","import au.com.bytecode.opencsv.CSVReader;"
"729splitHere46","106096splitHere46","s/(.)\1+/$1/g;<newline46mondego>"
"730splitHere46","106096splitHere46","s {<newline46mondego>    (.)  # match any charater ( and capture it )<newline46mondego>    \1   # if it is followed by itself <newline46mondego>    +    # One or more times<newline46mondego>}{$1}gx;  # And replace the whole things by the first captured character (with g modifier to replace all occurences)<newline46mondego>"
"731splitHere46","106096splitHere46","original.replaceAll(<doubleQuotes46>(.)\\1+<doubleQuotes46>, <doubleQuotes46>$1<doubleQuotes46>);<newline46mondego>"
"732splitHere46","106165splitHere46","System.out.println(sessionFactory.getConfiguration().getProperty(<doubleQuotes46>hibernate.jdbc.batch_size<doubleQuotes46>))<newline46mondego>"
"733splitHere46","106351splitHere46","ArrayList list = ...;<newline46mondego>// List<object> list = ...;<newline46mondego>foreach (object o in list) {<newline46mondego>    if (o is int) {<newline46mondego>        HandleInt((int)o);<newline46mondego>    }<newline46mondego>    else if (o is string) {<newline46mondego>        HandleString((string)o);<newline46mondego>    }<newline46mondego>    ...<newline46mondego>}<newline46mondego>"
"734splitHere46","106351splitHere46","ArrayList<Object> list = ...;<newline46mondego>for (Object o : list) {<newline46mondego>    if (o.getClass().equals(Integer.TYPE)) {<newline46mondego>        handleInt((int)o);<newline46mondego>    }<newline46mondego>    else if (o.getClass().equals(String.class)) {<newline46mondego>        handleString((String)o);<newline46mondego>    }<newline46mondego>    ...<newline46mondego>}<newline46mondego>"
"735splitHere46","106743splitHere46","<util:properties id=<doubleQuotes46>myProperties<doubleQuotes46> location=<doubleQuotes46>classpath:com/foo/my.properties<doubleQuotes46>/><newline46mondego>"
"736splitHere46","106743splitHere46","@Resource(name = <doubleQuotes46>myProperties<doubleQuotes46>)<newline46mondego>private Properties myProperties;<newline46mondego>"
"737splitHere46","106787splitHere46","volatile"
"738splitHere46","106787splitHere46","volatile"
"739splitHere46","106787splitHere46","volatile"
"740splitHere46","106787splitHere46","volatile"
"741splitHere46","106787splitHere46","volatile"
"742splitHere46","106787splitHere46","true"
"743splitHere46","106787splitHere46","false"
"744splitHere46","106787splitHere46","false"
"745splitHere46","106787splitHere46","volatile"
"746splitHere46","106787splitHere46","volatile"
"747splitHere46","106787splitHere46","volatile"
"748splitHere46","107125splitHere46","soap_copy()"
"749splitHere46","107125splitHere46","soap_destroy(x);<newline46mondego>soap_end(x);<newline46mondego>soap_free(x);<newline46mondego>"
"750splitHere46","107125splitHere46","soap_done()"
"751splitHere46","107125splitHere46","soap_free()"
"752splitHere46","107125splitHere46","soap_closesock()"
"753splitHere46","107832splitHere46","myRunnable.run().<newline46mondego>"
"754splitHere46","107832splitHere46","myThread = new Thread(myRunnable);<newline46mondego>myThread.start();<newline46mondego>"
"755splitHere46","107987splitHere46","final"
"756splitHere46","107987splitHere46","import java.util.HashMap;<newline46mondego>import java.util.Map;<newline46mondego>...<newline46mondego>Map<String, Integer> freq = new HashMap<String, Integer>();<newline46mondego>...<newline46mondego>int count = freq.containsKey(word) ? freq.get(word) : 0;<newline46mondego>freq.put(word, count + 1);<newline46mondego>"
"757splitHere46","107987splitHere46","import java.util.HashMap;<newline46mondego>import java.util.Map;<newline46mondego>...<newline46mondego>Map<String, Integer> freq = new HashMap<String, Integer>();<newline46mondego>...<newline46mondego>Integer count = freq.get(word);<newline46mondego>if (count == null) {<newline46mondego>    freq.put(word, 1);<newline46mondego>}<newline46mondego>else {<newline46mondego>    freq.put(word, count + 1);<newline46mondego>}<newline46mondego>"
"758splitHere46","107987splitHere46","import java.util.concurrent.ConcurrentHashMap;<newline46mondego>import java.util.concurrent.ConcurrentMap;<newline46mondego>import java.util.concurrent.atomic.AtomicLong;<newline46mondego>...<newline46mondego>final ConcurrentMap<String, AtomicLong> map = <newline46mondego>    new ConcurrentHashMap<String, AtomicLong>();<newline46mondego>...<newline46mondego>map.putIfAbsent(word, new AtomicLong(0));<newline46mondego>map.get(word).incrementAndGet();<newline46mondego>"
"759splitHere46","107987splitHere46","import gnu.trove.TObjectIntHashMap;<newline46mondego>...<newline46mondego>TObjectIntHashMap<String> freq = new TObjectIntHashMap<String>();<newline46mondego>...<newline46mondego>freq.adjustOrPutValue(word, 1, 1);<newline46mondego>"
"760splitHere46","107987splitHere46","import java.util.HashMap;<newline46mondego>import java.util.Map;<newline46mondego>...<newline46mondego>class MutableInt {<newline46mondego>  int value = 1; // note that we start at 1 since we're counting<newline46mondego>  public void increment () { ++value;      }<newline46mondego>  public int  get ()       { return value; }<newline46mondego>}<newline46mondego>...<newline46mondego>Map<String, MutableInt> freq = new HashMap<String, MutableInt>();<newline46mondego>...<newline46mondego>MutableInt count = freq.get(word);<newline46mondego>if (count == null) {<newline46mondego>    freq.put(word, new MutableInt());<newline46mondego>}<newline46mondego>else {<newline46mondego>    count.increment();<newline46mondego>}<newline46mondego>"
"761splitHere46","108084splitHere46","SingleThreadedModel"
"762splitHere46","109871splitHere46","assertRefEquals"
"763splitHere46","109966splitHere46","<target name=<doubleQuotes46>compile<doubleQuotes46> depends=<doubleQuotes46>init<doubleQuotes46> description=<doubleQuotes46>Compile code<doubleQuotes46>><newline46mondego>	<mkdir dir=<doubleQuotes46>${bin}<doubleQuotes46>/><newline46mondego>	<javac deprecation=<doubleQuotes46>on<doubleQuotes46> srcdir=<doubleQuotes46>${src}<doubleQuotes46> destdir=<doubleQuotes46>${bin}<doubleQuotes46><newline46mondego>		   source=<doubleQuotes46>1.3<doubleQuotes46> target=<doubleQuotes46>1.2<doubleQuotes46><newline46mondego>"
"764splitHere46","110042splitHere46","setSortKeys"
"765splitHere46","110042splitHere46","RowSorter"
"766splitHere46","110389splitHere46","for ( ... ) {<newline46mondego>  String s = ...;<newline46mondego>}<newline46mondego>"
"767splitHere46","110389splitHere46","javap"
"768splitHere46","110389splitHere46","s"
"769splitHere46","110389splitHere46","s"
"770splitHere46","110389splitHere46","String s;"
"771splitHere46","110389splitHere46","null"
"772splitHere46","110389splitHere46","void x(String[] strings, Integer[] integers) {<newline46mondego>  String s;<newline46mondego>  for (int i = 0; i < strings.length; ++i) {<newline46mondego>    s = strings[0];<newline46mondego>    ...<newline46mondego>  }<newline46mondego>  Integer n;<newline46mondego>  for (int i = 0; i < integers.length; ++i) {<newline46mondego>    n = integers[i];<newline46mondego>    ...<newline46mondego>  }<newline46mondego>}<newline46mondego>"
"773splitHere46","110389splitHere46","s"
"774splitHere46","110389splitHere46","n"
"775splitHere46","112328splitHere46","Object"
"776splitHere46","112363splitHere46","BufferedInputStream"
"777splitHere46","112542splitHere46","List<String> list = new ArrayList<String>(Arrays.asList(array));<newline46mondego>list.removeAll(Arrays.asList(<doubleQuotes46>a<doubleQuotes46>));<newline46mondego>array = list.toArray(array);<newline46mondego>"
"778splitHere46","112542splitHere46","Arrays.asList"
"779splitHere46","112542splitHere46","Collections.singleton"
"780splitHere46","112542splitHere46","asList"
"781splitHere46","112542splitHere46","Arrays.asList(<doubleQuotes46>a<doubleQuotes46>, <doubleQuotes46>b<doubleQuotes46>, <doubleQuotes46>c<doubleQuotes46>)"
"782splitHere46","112542splitHere46","array = list.toArray(new String[0]);<newline46mondego>"
"783splitHere46","112542splitHere46","private static final String[] EMPTY_STRING_ARRAY = new String[0];<newline46mondego>"
"784splitHere46","112542splitHere46","List<String> list = new ArrayList<String>(Arrays.asList(array));<newline46mondego>list.removeAll(Arrays.asList(<doubleQuotes46>a<doubleQuotes46>));<newline46mondego>array = list.toArray(EMPTY_STRING_ARRAY);<newline46mondego>"
"785splitHere46","112542splitHere46","new"
"786splitHere46","112542splitHere46","array = list.toArray(new String[list.size()]);<newline46mondego>"
"787splitHere46","112542splitHere46","size()"
"788splitHere46","113291splitHere46","DBMS_CRYPTO.ENCRYPT(<newline46mondego>   dst IN OUT NOCOPY BLOB,<newline46mondego>   src IN            CLOB         CHARACTER SET ANY_CS,<newline46mondego>   typ IN            PLS_INTEGER,<newline46mondego>   key IN            RAW,<newline46mondego>       iv  IN            RAW          DEFAULT NULL);<newline46mondego><newline46mondego>DBMS_CRYPT.DECRYPT(<newline46mondego>   dst IN OUT NOCOPY CLOB         CHARACTER SET ANY_CS,<newline46mondego>   src IN            BLOB,<newline46mondego>   typ IN            PLS_INTEGER,<newline46mondego>   key IN            RAW,<newline46mondego>   iv  IN            RAW          DEFAULT NULL);<newline46mondego>"
"789splitHere46","113600splitHere46","(f ? 0 : 1)"
"790splitHere46","113600splitHere46","(int)f"
"791splitHere46","113600splitHere46","(int)(f ^ (f >>> 32))"
"792splitHere46","113600splitHere46","Float.floatToIntBits(f)"
"793splitHere46","113600splitHere46","Double.doubleToLongBits(f)"
"794splitHere46","113600splitHere46","hashCode()"
"795splitHere46","113600splitHere46","f == null"
"796splitHere46","113600splitHere46","result = 37 * result + c"
"797splitHere46","114926splitHere46","public void updateElement(UIElement element, Map parameters) <newline46mondego>{<newline46mondego>	element.setChecked(isSelected);		<newline46mondego>}<newline46mondego>"
"798splitHere46","114926splitHere46","ICommandService service = (ICommandService) HandlerUtil<newline46mondego>       .getActiveWorkbenchWindowChecked(event).getService(<newline46mondego>           ICommandService.class);<newline46mondego>   service.refreshElements(event.getCommand().getId(), null);<newline46mondego>"
"799splitHere46","115313splitHere46","Class c = commandMap.get(cmdName);<newline46mondego>if (c != null)<newline46mondego>    return c.newInstance();<newline46mondego>else<newline46mondego>    throw new IllegalArgumentException(cmdName + <doubleQuotes46> is not as valid command<doubleQuotes46>);<newline46mondego>"
"800splitHere46","115313splitHere46","enum"
"801splitHere46","115313splitHere46","CommandInterface"
"802splitHere46","115313splitHere46","public enum Command<newline46mondego>{<newline46mondego>    START(StartCommand.class),<newline46mondego>    END(EndCommand.class);<newline46mondego><newline46mondego>    private Class<? extends CommandInterface> mappedClass;<newline46mondego>    private Command(Class<? extends CommandInterface> c) { mappedClass = c; }<newline46mondego>    public CommandInterface getInstance()<newline46mondego>    {<newline46mondego>        return mappedClass.newInstance();<newline46mondego>    }<newline46mondego>}<newline46mondego>"
"803splitHere46","115313splitHere46","EnumSet"
"804splitHere46","115540splitHere46","KeySpec ks = new DESKeySpec(new byte[] {'s','e','c','r','e','t','!','!'});<newline46mondego>SecretKeyFactory skf = SecretKeyFactory.getInstance(<doubleQuotes46>DES<doubleQuotes46>);<newline46mondego>SecretKey sk = skf.generateSecret(ks);<newline46mondego>Cipher c = Cipher.getInstance(<doubleQuotes46>DES/CBC/NoPadding<doubleQuotes46>);<newline46mondego>IvParameterSpec ips = new IvParameterSpec(new byte[] {0,0,0,0,0,0,0,0});<newline46mondego>c.init(Cipher.ENCRYPT, sk, ips);<newline46mondego>// or<newline46mondego>c.init(Cipher.DECRYPT, sk, ips);<newline46mondego>"
"805splitHere46","116184splitHere46","class MyClass<newline46mondego>{<newline46mondego>  private String[] s = { <doubleQuotes46>a<doubleQuotes46>, <doubleQuotes46>b<doubleQuotes46>, <doubleQuotes46>c<doubleQuotes46>}<newline46mondego><newline46mondego>  public MyClass()<newline46mondego>  {<newline46mondego>  }<newline46mondego>"
"806splitHere46","116184splitHere46","class MyClass<newline46mondego>{<newline46mondego>  private String[] s;<newline46mondego><newline46mondego>  private void FunnyName$Method()<newline46mondego>  {<newline46mondego>    s[0] = <doubleQuotes46>a<doubleQuotes46>;<newline46mondego>    s[1] = <doubleQuotes46>b<doubleQuotes46>;<newline46mondego>    s[2] = <doubleQuotes46>c<doubleQuotes46>;<newline46mondego>  }<newline46mondego>  public MyClass()<newline46mondego>  {<newline46mondego>    FunnyName$Method();<newline46mondego>  }<newline46mondego>"
"807splitHere46","116184splitHere46","public class Icons<newline46mondego>{<newline46mondego>  public static final byte[] compileIcon;<newline46mondego>  static<newline46mondego>  {<newline46mondego>    compileIcon = readFileToBytes(<doubleQuotes46>compileIcon.gif<doubleQuotes46>);<newline46mondego>  }<newline46mondego>  //... (I assume there are several other icons)<newline46mondego>  private static byte[] readFileToBytes(String filename)<newline46mondego>  {<newline46mondego>    try {<newline46mondego>      File file = new File(filename);<newline46mondego>      byte[] bytes = new byte[(int)file.length()];<newline46mondego>      FileInputStream fin = new FileInputStream(file);<newline46mondego>      fin.read(bytes);<newline46mondego>      fin.close();<newline46mondego>    }<newline46mondego>    catch (Exception e) {<newline46mondego>      e.printStackTrace();<newline46mondego>      System.exit(1);<newline46mondego>    }<newline46mondego>  }<newline46mondego>}<newline46mondego>"
"808splitHere46","116532splitHere46","import java.util.Scanner;<newline46mondego>import java.util.List;<newline46mondego>import java.util.ArrayList;<newline46mondego><newline46mondego>public class InputTest{<newline46mondego><newline46mondego>    private int INPUT_LIMIT = 10000;<newline46mondego><newline46mondego>    public static void main( String [] args ) {<newline46mondego>        InputTest test = new InputTest();<newline46mondego>        System.out.println(<doubleQuotes46>Start typing numbers...<doubleQuotes46>);<newline46mondego>        List list = test.readRange( 2.0 );<newline46mondego>        System.out.println(<doubleQuotes46>The input was <doubleQuotes46> +  list );<newline46mondego>    }<newline46mondego><newline46mondego>    /**<newline46mondego>     * Read from the standar input until endSignal number is typed.<newline46mondego>     * Also limits the amount of entered numbers to 10000;<newline46mondego>     * @return a list with the numbers.<newline46mondego>     */<newline46mondego>    public List readRange( double endSignal ) {<newline46mondego>        List<Double> input = new ArrayList<Double>();<newline46mondego>        Scanner kdb = new Scanner( System.in );<newline46mondego>        int count = 0;<newline46mondego>        double number = 0;<newline46mondego>        while( ( number = kdb.nextDouble() ) != endSignal && count < INPUT_LIMIT ){<newline46mondego>            System.out.println( number );<newline46mondego>            input.add( number );<newline46mondego>        }<newline46mondego>        return input;<newline46mondego>    }<newline46mondego>}<newline46mondego>"
"809splitHere46","116615splitHere46","Class<?> c; // Your class<newline46mondego>for(Class<?> i : c.getInterfaces()) {<newline46mondego>     // test if i is your interface<newline46mondego>}<newline46mondego>"
"810splitHere46","116615splitHere46","public static Set<Class<?>> getInheritance(Class<?> in)<newline46mondego>{<newline46mondego>	LinkedHashSet<Class<?>> result = new LinkedHashSet<Class<?>>();<newline46mondego><newline46mondego>	result.add(in);<newline46mondego>	getInheritance(in, result);<newline46mondego><newline46mondego>	return result;<newline46mondego>}<newline46mondego><newline46mondego>/**<newline46mondego> * Get inheritance of type.<newline46mondego> * <newline46mondego> * @param in<newline46mondego> * @param result<newline46mondego> */<newline46mondego>private static void getInheritance(Class<?> in, Set<Class<?>> result)<newline46mondego>{<newline46mondego>	Class<?> superclass = getSuperclass(in);<newline46mondego><newline46mondego>	if(superclass != null)<newline46mondego>	{<newline46mondego>		result.add(superclass);<newline46mondego>		getInheritance(superclass, result);<newline46mondego>	}<newline46mondego><newline46mondego>	getInterfaceInheritance(in, result);<newline46mondego>}<newline46mondego><newline46mondego>/**<newline46mondego> * Get interfaces that the type inherits from.<newline46mondego> * <newline46mondego> * @param in<newline46mondego> * @param result<newline46mondego> */<newline46mondego>private static void getInterfaceInheritance(Class<?> in, Set<Class<?>> result)<newline46mondego>{<newline46mondego>	for(Class<?> c : in.getInterfaces())<newline46mondego>	{<newline46mondego>		result.add(c);<newline46mondego><newline46mondego>		getInterfaceInheritance(c, result);<newline46mondego>	}<newline46mondego>}<newline46mondego><newline46mondego>/**<newline46mondego> * Get superclass of class.<newline46mondego> * <newline46mondego> * @param in<newline46mondego> * @return<newline46mondego> */<newline46mondego>private static Class<?> getSuperclass(Class<?> in)<newline46mondego>{<newline46mondego>	if(in == null)<newline46mondego>	{<newline46mondego>		return null;<newline46mondego>	}<newline46mondego><newline46mondego>	if(in.isArray() && in != Object[].class)<newline46mondego>	{<newline46mondego>		Class<?> type = in.getComponentType();<newline46mondego><newline46mondego>		while(type.isArray())<newline46mondego>		{<newline46mondego>			type = type.getComponentType();<newline46mondego>		}<newline46mondego><newline46mondego>		return type;<newline46mondego>	}<newline46mondego><newline46mondego>	return in.getSuperclass();<newline46mondego>}<newline46mondego>"
"811splitHere46","116725splitHere46","HttpURLConnection con = (HttpURLConnection) new URL(<doubleQuotes46>https://www.example.com<doubleQuotes46>).openConnection();<newline46mondego>con.setRequestMethod(<doubleQuotes46>POST<doubleQuotes46>);<newline46mondego>con.getOutputStream().write(<doubleQuotes46>LOGIN<doubleQuotes46>.getBytes(<doubleQuotes46>UTF-8<doubleQuotes46>));<newline46mondego>con.getInputStream();<newline46mondego>"
"812splitHere46","116916splitHere46","LENGTH sum: 10626, per Iteration: 10626.0<newline46mondego><newline46mondego>CHANNEL sum: 5535, per Iteration: 5535.0<newline46mondego><newline46mondego>URL sum: 660, per Iteration: 660.0<newline46mondego>"
"813splitHere46","116916splitHere46","LENGTH sum: 39496, per Iteration: 157.984<newline46mondego><newline46mondego>CHANNEL sum: 74261, per Iteration: 297.044<newline46mondego><newline46mondego>URL sum: 95534, per Iteration: 382.136<newline46mondego>"
"814splitHere46","116916splitHere46","import java.io.*;<newline46mondego>import java.net.*;<newline46mondego>import java.util.*;<newline46mondego><newline46mondego>public enum FileSizeBench {<newline46mondego><newline46mondego>    LENGTH {<newline46mondego>        @Override<newline46mondego>        public long getResult() throws Exception {<newline46mondego>            File me = new File(FileSizeBench.class.getResource(<newline46mondego>                    <doubleQuotes46>FileSizeBench.class<doubleQuotes46>).getFile());<newline46mondego>            return me.length();<newline46mondego>        }<newline46mondego>    },<newline46mondego>    CHANNEL {<newline46mondego>        @Override<newline46mondego>        public long getResult() throws Exception {<newline46mondego>            FileInputStream fis = null;<newline46mondego>            try {<newline46mondego>                File me = new File(FileSizeBench.class.getResource(<newline46mondego>                        <doubleQuotes46>FileSizeBench.class<doubleQuotes46>).getFile());<newline46mondego>                fis = new FileInputStream(me);<newline46mondego>                return fis.getChannel().size();<newline46mondego>            } finally {<newline46mondego>                fis.close();<newline46mondego>            }<newline46mondego>        }<newline46mondego>    },<newline46mondego>    URL {<newline46mondego>        @Override<newline46mondego>        public long getResult() throws Exception {<newline46mondego>            InputStream stream = null;<newline46mondego>            try {<newline46mondego>                URL url = FileSizeBench.class<newline46mondego>                        .getResource(<doubleQuotes46>FileSizeBench.class<doubleQuotes46>);<newline46mondego>                stream = url.openStream();<newline46mondego>                return stream.available();<newline46mondego>            } finally {<newline46mondego>                stream.close();<newline46mondego>            }<newline46mondego>        }<newline46mondego>    };<newline46mondego><newline46mondego>    public abstract long getResult() throws Exception;<newline46mondego><newline46mondego>    public static void main(String[] args) throws Exception {<newline46mondego>        int runs = 5;<newline46mondego>        int iterations = 50;<newline46mondego><newline46mondego>        EnumMap<FileSizeBench, Long> durations = new EnumMap<FileSizeBench, Long>(FileSizeBench.class);<newline46mondego><newline46mondego>        for (int i = 0; i < runs; i++) {<newline46mondego>            for (FileSizeBench test : values()) {<newline46mondego>                if (!durations.containsKey(test)) {<newline46mondego>                    durations.put(test, 0l);<newline46mondego>                }<newline46mondego>                long duration = testNow(test, iterations);<newline46mondego>                durations.put(test, durations.get(test) + duration);<newline46mondego>                // System.out.println(test + <doubleQuotes46> took: <doubleQuotes46> + duration + <doubleQuotes46>, per iteration: <doubleQuotes46> + ((double)duration / (double)iterations));<newline46mondego>            }<newline46mondego>        }<newline46mondego><newline46mondego>        for (Map.Entry<FileSizeBench, Long> entry : durations.entrySet()) {<newline46mondego>            System.out.println();<newline46mondego>            System.out.println(entry.getKey() + <doubleQuotes46> sum: <doubleQuotes46> + entry.getValue() + <doubleQuotes46>, per Iteration: <doubleQuotes46> + ((double)entry.getValue() / (double)(runs * iterations)));<newline46mondego>        }<newline46mondego><newline46mondego>    }<newline46mondego><newline46mondego>    private static long testNow(FileSizeBench test, int iterations)<newline46mondego>            throws Exception {<newline46mondego>        long result = -1;<newline46mondego>        long before = System.nanoTime();<newline46mondego>        for (int i = 0; i < iterations; i++) {<newline46mondego>            if (result == -1) {<newline46mondego>                result = test.getResult();<newline46mondego>                //System.out.println(result);<newline46mondego>            } else if ((result = test.getResult()) != result) {<newline46mondego>                 throw new Exception(<doubleQuotes46>variance detected!<doubleQuotes46>);<newline46mondego>             }<newline46mondego>        }<newline46mondego>        return (System.nanoTime() - before) / 1000;<newline46mondego>    }<newline46mondego><newline46mondego>}<newline46mondego>"
"815splitHere46","117711splitHere46","WaitHandle.WaitAny"
"816splitHere46","117711splitHere46","public WaitableFuture<T><newline46mondego>    extends Future<T><newline46mondego>{<newline46mondego>    private CountDownLatch countDownLatch;<newline46mondego><newline46mondego>    WaitableFuture(CountDownLatch countDownLatch)<newline46mondego>    {<newline46mondego>        super();<newline46mondego><newline46mondego>        this.countDownLatch = countDownLatch;<newline46mondego>    }<newline46mondego><newline46mondego>    void doTask()<newline46mondego>    {<newline46mondego>        super.doTask();<newline46mondego><newline46mondego>        this.countDownLatch.countDown();<newline46mondego>    }<newline46mondego>}<newline46mondego>"
"817splitHere46","117711splitHere46","doTask()"
"818splitHere46","117711splitHere46","/**<newline46mondego> * Extremely ugly way of implementing WaitHandle.WaitAny for Thread.Join().<newline46mondego> */<newline46mondego>public static joinAny(Collection<Thread> threads, int numberToWaitFor)<newline46mondego>{<newline46mondego>    CountDownLatch countDownLatch = new CountDownLatch(numberToWaitFor);<newline46mondego><newline46mondego>    foreach(Thread thread in threads)<newline46mondego>    {<newline46mondego>        (new Thread(new JoinThreadHelper(thread, countDownLatch))).start();<newline46mondego>    }<newline46mondego><newline46mondego>    countDownLatch.await();<newline46mondego>}<newline46mondego><newline46mondego>class JoinThreadHelper<newline46mondego>    implements Runnable<newline46mondego>{<newline46mondego>    Thread thread;<newline46mondego>    CountDownLatch countDownLatch;<newline46mondego><newline46mondego>    JoinThreadHelper(Thread thread, CountDownLatch countDownLatch)<newline46mondego>    {<newline46mondego>        this.thread = thread;<newline46mondego>        this.countDownLatch = countDownLatch;<newline46mondego>    }<newline46mondego><newline46mondego>    void run()<newline46mondego>    {<newline46mondego>        this.thread.join();<newline46mondego>        this.countDownLatch.countDown();<newline46mondego>    }<newline46mondego>}<newline46mondego>"
"819splitHere46","118388splitHere46","int old = someThing.getVal();<newline46mondego> if (old == 1) {<newline46mondego>    someThing.setVal(2);<newline46mondego> }<newline46mondego>"
"820splitHere46","118976splitHere46","@SuppressWarnings"
"821splitHere46","118976splitHere46","q.list()"
"822splitHere46","118976splitHere46","Collections.checkedList()"
"823splitHere46","118976splitHere46","List<Cat> cats = Collections.checkedList(q.list(), Cat.class);<newline46mondego>"
"824splitHere46","118976splitHere46","equals"
"825splitHere46","118976splitHere46","hashCode"
"826splitHere46","118976splitHere46","@SuppressWarnings"
"827splitHere46","118976splitHere46","List<Cat> cats = MyHibernateUtils.listAndCast(q);<newline46mondego><newline46mondego>...<newline46mondego><newline46mondego>public static <T> List<T> listAndCast(Query q) {<newline46mondego>    @SuppressWarnings(<doubleQuotes46>unchecked<doubleQuotes46>)<newline46mondego>    List list = q.list();<newline46mondego>    return list;<newline46mondego>}<newline46mondego>"
"828splitHere46","118976splitHere46","Query"
"829splitHere46","118976splitHere46","q.list()"
"830splitHere46","118976splitHere46","List"
"831splitHere46","118976splitHere46",".iterate()"
"832splitHere46","119586splitHere46","public static String truncateWhenUTF8(String s, int maxBytes) {<newline46mondego>    int b = 0;<newline46mondego>    for (int i = 0; i < s.length(); i++) {<newline46mondego>        char c = s.charAt(i);<newline46mondego><newline46mondego>        // ranges from http://en.wikipedia.org/wiki/UTF-8<newline46mondego>        int skip = 0;<newline46mondego>        int more;<newline46mondego>        if (c <= 0x007f) {<newline46mondego>            more = 1;<newline46mondego>        }<newline46mondego>        else if (c <= 0x07FF) {<newline46mondego>            more = 2;<newline46mondego>        } else if (c <= 0xd7ff) {<newline46mondego>            more = 3;<newline46mondego>        } else if (c <= 0xDFFF) {<newline46mondego>            // surrogate area, consume next char as well<newline46mondego>            more = 4;<newline46mondego>            skip = 1;<newline46mondego>        } else {<newline46mondego>            more = 3;<newline46mondego>        }<newline46mondego><newline46mondego>        if (b + more > maxBytes) {<newline46mondego>            return s.substring(0, i);<newline46mondego>        }<newline46mondego>        b += more;<newline46mondego>        i += skip;<newline46mondego>    }<newline46mondego>    return s;<newline46mondego>}<newline46mondego>"
"833splitHere46","119586splitHere46","truncateWhenUTF8()"
"834splitHere46","119586splitHere46","private static void test(String s, int maxBytes, int expectedBytes) {<newline46mondego>    String result = truncateWhenUTF8(s, maxBytes);<newline46mondego>    byte[] utf8 = result.getBytes(Charset.forName(<doubleQuotes46>UTF-8<doubleQuotes46>));<newline46mondego>    if (utf8.length > maxBytes) {<newline46mondego>        System.out.println(<doubleQuotes46>BAD: our truncation of <doubleQuotes46> + s + <doubleQuotes46> was too big<doubleQuotes46>);<newline46mondego>    }<newline46mondego>    if (utf8.length != expectedBytes) {<newline46mondego>        System.out.println(<doubleQuotes46>BAD: expected <doubleQuotes46> + expectedBytes + <doubleQuotes46> got <doubleQuotes46> + utf8.length);<newline46mondego>    }<newline46mondego>    System.out.println(s + <doubleQuotes46> truncated to <doubleQuotes46> + result);<newline46mondego>}<newline46mondego><newline46mondego>public static void main(String[] args) {<newline46mondego>    test(<doubleQuotes46>abcd<doubleQuotes46>, 0, 0);<newline46mondego>    test(<doubleQuotes46>abcd<doubleQuotes46>, 1, 1);<newline46mondego>    test(<doubleQuotes46>abcd<doubleQuotes46>, 2, 2);<newline46mondego>    test(<doubleQuotes46>abcd<doubleQuotes46>, 3, 3);<newline46mondego>    test(<doubleQuotes46>abcd<doubleQuotes46>, 4, 4);<newline46mondego>    test(<doubleQuotes46>abcd<doubleQuotes46>, 5, 4);<newline46mondego><newline46mondego>    test(<doubleQuotes46>a\u0080b<doubleQuotes46>, 0, 0);<newline46mondego>    test(<doubleQuotes46>a\u0080b<doubleQuotes46>, 1, 1);<newline46mondego>    test(<doubleQuotes46>a\u0080b<doubleQuotes46>, 2, 1);<newline46mondego>    test(<doubleQuotes46>a\u0080b<doubleQuotes46>, 3, 3);<newline46mondego>    test(<doubleQuotes46>a\u0080b<doubleQuotes46>, 4, 4);<newline46mondego>    test(<doubleQuotes46>a\u0080b<doubleQuotes46>, 5, 4);<newline46mondego><newline46mondego>    test(<doubleQuotes46>a\u0800b<doubleQuotes46>, 0, 0);<newline46mondego>    test(<doubleQuotes46>a\u0800b<doubleQuotes46>, 1, 1);<newline46mondego>    test(<doubleQuotes46>a\u0800b<doubleQuotes46>, 2, 1);<newline46mondego>    test(<doubleQuotes46>a\u0800b<doubleQuotes46>, 3, 1);<newline46mondego>    test(<doubleQuotes46>a\u0800b<doubleQuotes46>, 4, 4);<newline46mondego>    test(<doubleQuotes46>a\u0800b<doubleQuotes46>, 5, 5);<newline46mondego>    test(<doubleQuotes46>a\u0800b<doubleQuotes46>, 6, 5);<newline46mondego><newline46mondego>    // surrogate pairs<newline46mondego>    test(<doubleQuotes46>\uD834\uDD1E<doubleQuotes46>, 0, 0);<newline46mondego>    test(<doubleQuotes46>\uD834\uDD1E<doubleQuotes46>, 1, 0);<newline46mondego>    test(<doubleQuotes46>\uD834\uDD1E<doubleQuotes46>, 2, 0);<newline46mondego>    test(<doubleQuotes46>\uD834\uDD1E<doubleQuotes46>, 3, 0);<newline46mondego>    test(<doubleQuotes46>\uD834\uDD1E<doubleQuotes46>, 4, 4);<newline46mondego>    test(<doubleQuotes46>\uD834\uDD1E<doubleQuotes46>, 5, 4);<newline46mondego><newline46mondego>}<newline46mondego>"
"835splitHere46","119864splitHere46","Image i = ImageIO.read(InputStream in);<newline46mondego>"
"836splitHere46","120356splitHere46","Identity.instance().getUsername();"
"837splitHere46","120356splitHere46","@Restrict"
"838splitHere46","120729splitHere46","squirrel-sql.jar"
"839splitHere46","120729splitHere46","java -jar squirrel-sql.jar<newline46mondego>"
"840splitHere46","120802splitHere46","JAVA_FLAGS=-Dhttp.proxyHost=10.0.0.100 -Dhttp.proxyPort=8800<newline46mondego>java ${JAVA_FLAGS} ...<newline46mondego>"
"841splitHere46","121077splitHere46","public class Log {<newline46mondego>  public static void debug(final String message) {<newline46mondego>    //#if !release.build<newline46mondego>    System.out.println(message);<newline46mondego>    //#endif<newline46mondego>  }<newline46mondego>}<newline46mondego>"
"842splitHere46","121077splitHere46","public class Log {<newline46mondego>  private static boolean showDebug;<newline46mondego><newline46mondego>  public static void debug(final String message) {<newline46mondego>    if (showDebug) {<newline46mondego>      System.out.println(message);<newline46mondego>    }<newline46mondego>  }<newline46mondego><newline46mondego>  public static void setShowDebug(final boolean show) {<newline46mondego>    showDebug = show;<newline46mondego>  }<newline46mondego>}<newline46mondego>"
"843splitHere46","121456splitHere46","import java.io.IOException;<newline46mondego>import java.io.Reader;<newline46mondego>import java.util.ArrayList;<newline46mondego>import java.util.HashMap;<newline46mondego>import java.util.Iterator;<newline46mondego>import java.util.List;<newline46mondego>import java.util.Map;<newline46mondego><newline46mondego>import org.apache.lucene.analysis.Analyzer;<newline46mondego>import org.apache.lucene.analysis.ISOLatin1AccentFilter;<newline46mondego>import org.apache.lucene.analysis.LowerCaseFilter;<newline46mondego>import org.apache.lucene.analysis.StopFilter;<newline46mondego>import org.apache.lucene.analysis.TokenStream;<newline46mondego>import org.apache.lucene.analysis.ngram.EdgeNGramTokenFilter;<newline46mondego>import org.apache.lucene.analysis.ngram.EdgeNGramTokenFilter.Side;<newline46mondego>import org.apache.lucene.analysis.standard.StandardFilter;<newline46mondego>import org.apache.lucene.analysis.standard.StandardTokenizer;<newline46mondego>import org.apache.lucene.document.Document;<newline46mondego>import org.apache.lucene.document.Field;<newline46mondego>import org.apache.lucene.index.CorruptIndexException;<newline46mondego>import org.apache.lucene.index.IndexReader;<newline46mondego>import org.apache.lucene.index.IndexWriter;<newline46mondego>import org.apache.lucene.index.Term;<newline46mondego>import org.apache.lucene.search.IndexSearcher;<newline46mondego>import org.apache.lucene.search.Query;<newline46mondego>import org.apache.lucene.search.ScoreDoc;<newline46mondego>import org.apache.lucene.search.Sort;<newline46mondego>import org.apache.lucene.search.TermQuery;<newline46mondego>import org.apache.lucene.search.TopDocs;<newline46mondego>import org.apache.lucene.search.spell.LuceneDictionary;<newline46mondego>import org.apache.lucene.store.Directory;<newline46mondego>import org.apache.lucene.store.FSDirectory;<newline46mondego><newline46mondego>/**<newline46mondego> * Search term auto-completer, works for single terms (so use on the last term<newline46mondego> * of the query).<newline46mondego> * <p><newline46mondego> * Returns more popular terms first.<newline46mondego> * <newline46mondego> * @author Mat Mannion, M.Mannion@warwick.ac.uk<newline46mondego> */<newline46mondego>public final class Autocompleter {<newline46mondego><newline46mondego>    private static final String GRAMMED_WORDS_FIELD = <doubleQuotes46>words<doubleQuotes46>;<newline46mondego><newline46mondego>    private static final String SOURCE_WORD_FIELD = <doubleQuotes46>sourceWord<doubleQuotes46>;<newline46mondego><newline46mondego>    private static final String COUNT_FIELD = <doubleQuotes46>count<doubleQuotes46>;<newline46mondego><newline46mondego>    private static final String[] ENGLISH_STOP_WORDS = {<newline46mondego>    <doubleQuotes46>a<doubleQuotes46>, <doubleQuotes46>an<doubleQuotes46>, <doubleQuotes46>and<doubleQuotes46>, <doubleQuotes46>are<doubleQuotes46>, <doubleQuotes46>as<doubleQuotes46>, <doubleQuotes46>at<doubleQuotes46>, <doubleQuotes46>be<doubleQuotes46>, <doubleQuotes46>but<doubleQuotes46>, <doubleQuotes46>by<doubleQuotes46>,<newline46mondego>    <doubleQuotes46>for<doubleQuotes46>, <doubleQuotes46>i<doubleQuotes46>, <doubleQuotes46>if<doubleQuotes46>, <doubleQuotes46>in<doubleQuotes46>, <doubleQuotes46>into<doubleQuotes46>, <doubleQuotes46>is<doubleQuotes46>,<newline46mondego>    <doubleQuotes46>no<doubleQuotes46>, <doubleQuotes46>not<doubleQuotes46>, <doubleQuotes46>of<doubleQuotes46>, <doubleQuotes46>on<doubleQuotes46>, <doubleQuotes46>or<doubleQuotes46>, <doubleQuotes46>s<doubleQuotes46>, <doubleQuotes46>such<doubleQuotes46>,<newline46mondego>    <doubleQuotes46>t<doubleQuotes46>, <doubleQuotes46>that<doubleQuotes46>, <doubleQuotes46>the<doubleQuotes46>, <doubleQuotes46>their<doubleQuotes46>, <doubleQuotes46>then<doubleQuotes46>, <doubleQuotes46>there<doubleQuotes46>, <doubleQuotes46>these<doubleQuotes46>,<newline46mondego>    <doubleQuotes46>they<doubleQuotes46>, <doubleQuotes46>this<doubleQuotes46>, <doubleQuotes46>to<doubleQuotes46>, <doubleQuotes46>was<doubleQuotes46>, <doubleQuotes46>will<doubleQuotes46>, <doubleQuotes46>with<doubleQuotes46><newline46mondego>    };<newline46mondego><newline46mondego>    private final Directory autoCompleteDirectory;<newline46mondego><newline46mondego>    private IndexReader autoCompleteReader;<newline46mondego><newline46mondego>    private IndexSearcher autoCompleteSearcher;<newline46mondego><newline46mondego>    public Autocompleter(String autoCompleteDir) throws IOException {<newline46mondego>    	this.autoCompleteDirectory = FSDirectory.getDirectory(autoCompleteDir,<newline46mondego>    			null);<newline46mondego><newline46mondego>    	reOpenReader();<newline46mondego>    }<newline46mondego><newline46mondego>    public List<String> suggestTermsFor(String term) throws IOException {<newline46mondego>    	// get the top 5 terms for query<newline46mondego>    	Query query = new TermQuery(new Term(GRAMMED_WORDS_FIELD, term));<newline46mondego>    	Sort sort = new Sort(COUNT_FIELD, true);<newline46mondego><newline46mondego>    	TopDocs docs = autoCompleteSearcher.search(query, null, 5, sort);<newline46mondego>    	List<String> suggestions = new ArrayList<String>();<newline46mondego>    	for (ScoreDoc doc : docs.scoreDocs) {<newline46mondego>    		suggestions.add(autoCompleteReader.document(doc.doc).get(<newline46mondego>    				SOURCE_WORD_FIELD));<newline46mondego>    	}<newline46mondego><newline46mondego>    	return suggestions;<newline46mondego>    }<newline46mondego><newline46mondego>    @SuppressWarnings(<doubleQuotes46>unchecked<doubleQuotes46>)<newline46mondego>    public void reIndex(Directory sourceDirectory, String fieldToAutocomplete)<newline46mondego>    		throws CorruptIndexException, IOException {<newline46mondego>    	// build a dictionary (from the spell package)<newline46mondego>    	IndexReader sourceReader = IndexReader.open(sourceDirectory);<newline46mondego><newline46mondego>    	LuceneDictionary dict = new LuceneDictionary(sourceReader,<newline46mondego>    			fieldToAutocomplete);<newline46mondego><newline46mondego>    	// code from<newline46mondego>    	// org.apache.lucene.search.spell.SpellChecker.indexDictionary(<newline46mondego>    	// Dictionary)<newline46mondego>    	IndexReader.unlock(autoCompleteDirectory);<newline46mondego><newline46mondego>    	// use a custom analyzer so we can do EdgeNGramFiltering<newline46mondego>    	IndexWriter writer = new IndexWriter(autoCompleteDirectory,<newline46mondego>    	new Analyzer() {<newline46mondego>    		public TokenStream tokenStream(String fieldName,<newline46mondego>    				Reader reader) {<newline46mondego>    			TokenStream result = new StandardTokenizer(reader);<newline46mondego><newline46mondego>    			result = new StandardFilter(result);<newline46mondego>    			result = new LowerCaseFilter(result);<newline46mondego>    			result = new ISOLatin1AccentFilter(result);<newline46mondego>    			result = new StopFilter(result,<newline46mondego>    				ENGLISH_STOP_WORDS);<newline46mondego>    			result = new EdgeNGramTokenFilter(<newline46mondego>    				result, Side.FRONT,1, 20);<newline46mondego><newline46mondego>    			return result;<newline46mondego>    		}<newline46mondego>    	}, true);<newline46mondego><newline46mondego>    	writer.setMergeFactor(300);<newline46mondego>    	writer.setMaxBufferedDocs(150);<newline46mondego><newline46mondego>    	// go through every word, storing the original word (incl. n-grams) <newline46mondego>    	// and the number of times it occurs<newline46mondego>    	Map<String, Integer> wordsMap = new HashMap<String, Integer>();<newline46mondego><newline46mondego>    	Iterator<String> iter = (Iterator<String>) dict.getWordsIterator();<newline46mondego>    	while (iter.hasNext()) {<newline46mondego>    		String word = iter.next();<newline46mondego><newline46mondego>    		int len = word.length();<newline46mondego>    		if (len < 3) {<newline46mondego>    			continue; // too short we bail but <doubleQuotes46>too long<doubleQuotes46> is fine...<newline46mondego>    		}<newline46mondego><newline46mondego>    		if (wordsMap.containsKey(word)) {<newline46mondego>    			throw new IllegalStateException(<newline46mondego>    					<doubleQuotes46>This should never happen in Lucene 2.3.2<doubleQuotes46>);<newline46mondego>    			// wordsMap.put(word, wordsMap.get(word) + 1);<newline46mondego>    		} else {<newline46mondego>    			// use the number of documents this word appears in<newline46mondego>    			wordsMap.put(word, sourceReader.docFreq(new Term(<newline46mondego>    					fieldToAutocomplete, word)));<newline46mondego>    		}<newline46mondego>    	}<newline46mondego><newline46mondego>    	for (String word : wordsMap.keySet()) {<newline46mondego>    		// ok index the word<newline46mondego>    		Document doc = new Document();<newline46mondego>    		doc.add(new Field(SOURCE_WORD_FIELD, word, Field.Store.YES,<newline46mondego>    				Field.Index.UN_TOKENIZED)); // orig term<newline46mondego>    		doc.add(new Field(GRAMMED_WORDS_FIELD, word, Field.Store.YES,<newline46mondego>    				Field.Index.TOKENIZED)); // grammed<newline46mondego>    		doc.add(new Field(COUNT_FIELD,<newline46mondego>    				Integer.toString(wordsMap.get(word)), Field.Store.NO,<newline46mondego>    				Field.Index.UN_TOKENIZED)); // count<newline46mondego><newline46mondego>    		writer.addDocument(doc);<newline46mondego>    	}<newline46mondego><newline46mondego>    	sourceReader.close();<newline46mondego><newline46mondego>    	// close writer<newline46mondego>    	writer.optimize();<newline46mondego>    	writer.close();<newline46mondego><newline46mondego>    	// re-open our reader<newline46mondego>    	reOpenReader();<newline46mondego>    }<newline46mondego><newline46mondego>    private void reOpenReader() throws CorruptIndexException, IOException {<newline46mondego>    	if (autoCompleteReader == null) {<newline46mondego>    		autoCompleteReader = IndexReader.open(autoCompleteDirectory);<newline46mondego>    	} else {<newline46mondego>    		autoCompleteReader.reopen();<newline46mondego>    	}<newline46mondego><newline46mondego>    	autoCompleteSearcher = new IndexSearcher(autoCompleteReader);<newline46mondego>    }<newline46mondego><newline46mondego>    public static void main(String[] args) throws Exception {<newline46mondego>    	Autocompleter autocomplete = new Autocompleter(<doubleQuotes46>/index/autocomplete<doubleQuotes46>);<newline46mondego><newline46mondego>    	// run this to re-index from the current index, shouldn't need to do<newline46mondego>    	// this very often<newline46mondego>    	// autocomplete.reIndex(FSDirectory.getDirectory(<doubleQuotes46>/index/live<doubleQuotes46>, null),<newline46mondego>    	// <doubleQuotes46>content<doubleQuotes46>);<newline46mondego><newline46mondego>    	String term = <doubleQuotes46>steve<doubleQuotes46>;<newline46mondego><newline46mondego>    	System.out.println(autocomplete.suggestTermsFor(term));<newline46mondego>    	// prints [steve, steven, stevens, stevenson, stevenage]<newline46mondego>    }<newline46mondego><newline46mondego>}<newline46mondego>"
"844splitHere46","121853splitHere46","stick.wait();<newline46mondego>"
"845splitHere46","121853splitHere46","stick.notify();<newline46mondego>"
"846splitHere46","121853splitHere46","void onDraw() {<newline46mondego>  ...<newline46mondego>  synchronized (stick) {<newline46mondego>    stick.notify();<newline46mondego>  }<newline46mondego>} // end onDraw()<newline46mondego>"
"847splitHere46","122414splitHere46","String"
"848splitHere46","122414splitHere46","int"
"849splitHere46","122414splitHere46","interface StringFunction {<newline46mondego>    int function(String param);<newline46mondego>}<newline46mondego>"
"850splitHere46","122414splitHere46","StringFunction"
"851splitHere46","122414splitHere46","public void takingMethod(StringFunction sf) {<newline46mondego>   //stuff<newline46mondego>   int output = sf.function(input);<newline46mondego>   // more stuff<newline46mondego>}<newline46mondego>"
"852splitHere46","122414splitHere46","ref.takingMethod(new StringFunction() {<newline46mondego>    public int function(String param) {<newline46mondego>        //body<newline46mondego>    }<newline46mondego>});<newline46mondego>"
"853splitHere46","122888splitHere46","+findById( id ): Employee<newline46mondego>+insert( Employee ) <newline46mondego>+update( Employee )<newline46mondego>+delete( Employee ) <newline46mondego>+findAll():List<Employee><newline46mondego>"
"854splitHere46","122888splitHere46","select * from employee where id = ?<newline46mondego>insert into employee ( bla, bla, bla ) values ( ? , ? , ? )<newline46mondego>update etc. etc<newline46mondego>"
"855splitHere46","122888splitHere46","public Employee selectById( int id ) {<newline46mondego>      // Commenting out the previous implementation...<newline46mondego>      // String query = select * from employee where id = ? <newline46mondego>      // execute( query )  <newline46mondego><newline46mondego>      // Using the ORM solution<newline46mondego><newline46mondego>       Session session = getSession();<newline46mondego>       Employee e = ( Employee ) session.get( Employee.clas, id );<newline46mondego>       return e;<newline46mondego>}<newline46mondego>"
"856splitHere46","123775splitHere46","for (Document document : List<Document> documents) {<newline46mondego>    if(checkDocument(document)) {<newline46mondego>        doSomethingWithTheSucces();<newline46mondego>    } else {<newline46mondego>        doSomethingWithTheError();<newline46mondego>    }<newline46mondego>}<newline46mondego><newline46mondego>// Later:<newline46mondego>public boolean checkDocument(Document doc) { ... }<newline46mondego>"
"857splitHere46","123775splitHere46","for (Document document : List<Document> documents) {<newline46mondego>    try {<newline46mondego>        checkDocument(document);<newline46mondego>        doSomethingWithTheSucces();<newline46mondego>    } catch(CheckDocumentException ex) {<newline46mondego>        doSomethingWithTheError(ex);<newline46mondego>    }<newline46mondego>}<newline46mondego><newline46mondego>// Later:<newline46mondego>public void checkDocument(Document doc) throws CheckDocumentException { ... }<newline46mondego>"
"858splitHere46","123785splitHere46","protected void doGet(HttpServletRequest request, HttpServletResponse response) {<newline46mondego>    String shared = <doubleQuotes46>shared<doubleQuotes46>;<newline46mondego>    request.setAttribute(<doubleQuotes46>sharedId<doubleQuotes46>, shared); // add to request<newline46mondego>    request.getSession().setAttribute(<doubleQuotes46>sharedId<doubleQuotes46>, shared); // add to session<newline46mondego>    this.getServletConfig().getServletContext().setAttribute(<doubleQuotes46>sharedId<doubleQuotes46>, shared); // add to application context<newline46mondego>    request.getRequestDispatcher(<doubleQuotes46>/URLofOtherServlet<doubleQuotes46>).forward(request, response);<newline46mondego>}<newline46mondego>"
"859splitHere46","123785splitHere46","request.getAttribute(<doubleQuotes46>sharedId<doubleQuotes46>);<newline46mondego>"
"860splitHere46","123785splitHere46","request.getSession().getAttribute(<doubleQuotes46>sharedId<doubleQuotes46>);<newline46mondego>"
"861splitHere46","123785splitHere46","request.getSession().invalidate();<newline46mondego>"
"862splitHere46","123785splitHere46","request.getSession().removeAttribute(<doubleQuotes46>sharedId<doubleQuotes46>);<newline46mondego>"
"863splitHere46","123785splitHere46","this.getServletConfig().getServletContext().getAttribute(<doubleQuotes46>sharedId<doubleQuotes46>);<newline46mondego>"
"864splitHere46","123785splitHere46","this.getServletConfig().getServletContext().removeAttribute(<doubleQuotes46>sharedId<doubleQuotes46>);<newline46mondego>"
"865splitHere46","124175splitHere46","try {<newline46mondego>  // exception throwing code<newline46mondego>} catch(Exception e) {<newline46mondego>   // either<newline46mondego>   log.error(<doubleQuotes46>Error fooing bar<doubleQuotes46>,e);<newline46mondego>   // OR<newline46mondego>   throw new RuntimeException(e);<newline46mondego>}<newline46mondego>"
"866splitHere46","124196splitHere46","(i == 10)"
"867splitHere46","124196splitHere46","i.equals(TEN)"
"868splitHere46","124196splitHere46","i.equals(j)"
"869splitHere46","124196splitHere46","null"
"870splitHere46","124196splitHere46","null"
"871splitHere46","124196splitHere46","null"
"872splitHere46","124598splitHere46","equals()"
"873splitHere46","124598splitHere46","equals()"
"874splitHere46","124598splitHere46","hashCode()"
"875splitHere46","124693splitHere46","int size = myHashSet.size();<newline46mondego>int item = new Random().nextInt(size); // In real life, the Random object should be rather more shared than this<newline46mondego>int i = 0;<newline46mondego>for(Object obj : myhashSet)<newline46mondego>{<newline46mondego>    if (i == item)<newline46mondego>        return obj;<newline46mondego>    i = i + 1;<newline46mondego>}<newline46mondego>"
"876splitHere46","125013splitHere46","public static Image getImageFromArray(int[] pixels, int width, int height) {<newline46mondego>            BufferedImage image = new BufferedImage(width, height, BufferedImage.TYPE_INT_ARGB);<newline46mondego>            WritableRaster raster = (WritableRaster) image.getData();<newline46mondego>            raster.setPixels(0,0,width,height,pixels);<newline46mondego>            return image;<newline46mondego>        }<newline46mondego>"
"877splitHere46","125013splitHere46","getImageFromArray"
"878splitHere46","125013splitHere46","BufferedImage.TYPE_INT_ARGB"
"879splitHere46","125161splitHere46","ATTR_CURRENT_USER"
"880splitHere46","125161splitHere46","package com.example;<newline46mondego><newline46mondego>public class Constants<newline46mondego>{<newline46mondego>    // attribute, visible to the scriptlet<newline46mondego>    public static final String ATTR_CURRENT_USER = <doubleQuotes46>current.user<doubleQuotes46>;<newline46mondego><newline46mondego>    // getter function;<newline46mondego>    // name modified to make it clear, later on, <newline46mondego>    // that I am calling this function<newline46mondego>    // and not accessing the constant<newline46mondego>    public String getATTR_CURRENT_USER_FUNC()<newline46mondego>    {<newline46mondego>        return ATTR_CURRENT_USER;<newline46mondego>    }<newline46mondego><newline46mondego><newline46mondego>}<newline46mondego>"
"881splitHere46","125161splitHere46","<%-- Set up the current user --%><newline46mondego><%<newline46mondego>    session.setAttribute(<doubleQuotes46>current.user<doubleQuotes46>, <doubleQuotes46>Me<doubleQuotes46>);<newline46mondego>%><newline46mondego><newline46mondego><%-- scriptlets --%><newline46mondego><%@ page import=<doubleQuotes46>com.example.Constants<doubleQuotes46> %><newline46mondego><h1>Using scriptlets</h1><newline46mondego><h3>Constants.ATTR_CURRENT_USER</h3><newline46mondego><%=Constants.ATTR_CURRENT_USER%> <br /><newline46mondego><h3>Session[Constants.ATTR_CURRENT_USER]</h3><newline46mondego><%=session.getAttribute(Constants.ATTR_CURRENT_USER)%><newline46mondego><newline46mondego><%-- JSTL --%><newline46mondego><%@ taglib prefix=<doubleQuotes46>c<doubleQuotes46> uri=<doubleQuotes46>http://java.sun.com/jsp/jstl/core<doubleQuotes46> %><newline46mondego><jsp:useBean id=<doubleQuotes46>cons<doubleQuotes46> class=<doubleQuotes46>com.example.Constants<doubleQuotes46> scope=<doubleQuotes46>session<doubleQuotes46>/><newline46mondego><newline46mondego><h1>Using JSTL</h1><newline46mondego><h3>Constants.getATTR_CURRENT_USER_FUNC()</h3><newline46mondego><c:out value=<doubleQuotes46>${cons.ATTR_CURRENT_USER_FUNC}<doubleQuotes46>/><newline46mondego><h3>Session[Constants.getATTR_CURRENT_USER_FUNC()]</h3><newline46mondego><c:out value=<doubleQuotes46>${sessionScope[cons.ATTR_CURRENT_USER_FUNC]}<doubleQuotes46>/><newline46mondego><h3>Constants.ATTR_CURRENT_USER</h3><newline46mondego><c:out value=<doubleQuotes46>${sessionScope[Constants.ATTR_CURRENT_USER]}<doubleQuotes46>/><newline46mondego><%--<newline46mondego>Commented out, because otherwise will error:<newline46mondego>The class 'com.example.Constants' does not have the property 'ATTR_CURRENT_USER'.<newline46mondego><newline46mondego><h3>cons.ATTR_CURRENT_USER</h3><newline46mondego><c:out value=<doubleQuotes46>${sessionScope[cons.ATTR_CURRENT_USER]}<doubleQuotes46>/><newline46mondego>--%><newline46mondego><hr /><newline46mondego>"
"882splitHere46","125354splitHere46","Collection<YourTask> tasks = new ArrayList<YourTask>();<newline46mondego>  YourTask yt1 = new YourTask();<newline46mondego>  ...<newline46mondego>  tasks.add(yt1);<newline46mondego>  ...<newline46mondego>  ExecutorService exec = Executors.newFixedThreadPool(5);<newline46mondego>  List<Future<YourResultType>> results = exec.invokeAll(tasks);<newline46mondego>"
"883splitHere46","125354splitHere46","execute(Runnable)"
"884splitHere46","126017splitHere46","<c:url value=<doubleQuotes46>/images/header.jpg<doubleQuotes46> />"
"885splitHere46","126017splitHere46","<script type=<doubleQuotes46>text/javascript<doubleQuotes46>><newline46mondego>var CONTEXT_ROOT = '<%= request.getContextPath() %>';<newline46mondego></script><newline46mondego>"
"886splitHere46","126981splitHere46","C:\Documents and Settings\CDay\Application Data\Sun\Java\Deployment\security"
"887splitHere46","127011splitHere46",".addRequestHeader(<doubleQuotes46>Accept-Encoding<doubleQuotes46>,<doubleQuotes46>gzip,deflate<doubleQuotes46>);<newline46mondego>"
"888splitHere46","127132splitHere46","public int selectPerson(float[] probabilies, Random r) {<newline46mondego>	float t = r.nextFloat();<newline46mondego>	float p = 0.0f;<newline46mondego><newline46mondego>	for (int i = 0; i < probabilies.length; i++) {<newline46mondego>		p += probabilies[i];<newline46mondego>		if (t < p) {<newline46mondego>			return i;<newline46mondego>		}<newline46mondego>	}<newline46mondego><newline46mondego>	// We should not end up here if probabilities are normalized properly (sum up to one)<newline46mondego>	return probabilies.length - 1;		<newline46mondego>}<newline46mondego>"
"889splitHere46","127671splitHere46","public Date getCurrentServerTime() {<newline46mondego>	Folder rootFolder = project.getDefaultView().getRootFolder();<newline46mondego><newline46mondego>	Topic newItem = (Topic) Item.createItem(project.getTypeNames().TOPIC, rootFolder);<newline46mondego>	newItem.update();<newline46mondego>	newItem.remove();<newline46mondego>	newItem.update();<newline46mondego>	return newItem.getCreatedTime().createDate();<newline46mondego>}<newline46mondego>"
"890splitHere46","127729splitHere46","buf.clear()"
"891splitHere46","127729splitHere46","read"
"892splitHere46","127729splitHere46","read"
"893splitHere46","128040splitHere46","filedNameTextField = new JTextField(80); // 80 == columns<newline46mondego>"
"894splitHere46","128040splitHere46","JScrollPane"
"895splitHere46","128040splitHere46","setMaximumSize"
"896splitHere46","128040splitHere46","setPreferredWidth"
"897splitHere46","128220splitHere46","static <T extends Comparable<T>> int cp(T a, T b) {<newline46mondego>     return<newline46mondego>         a==null ?<newline46mondego>         (b==null ? 0 : Integer.MIN_VALUE) :<newline46mondego>         (b==null ? Integer.MAX_VALUE : a.compareTo(b))<newline46mondego>}<newline46mondego>"
"898splitHere46","128220splitHere46","public int compare( final Foo o1, final Foo o2 ) {<newline46mondego>        return cp(o1.field, o2.field);<newline46mondego>    }<newline46mondego>"
"899splitHere46","128355splitHere46","private int getItemIndex(Item item, Form form) {<newline46mondego>    for(int i = 0, size = form.size(); i < size; i++) {<newline46mondego>    	if(form.get(i).equals(item)) {<newline46mondego>    		return i;<newline46mondego>    	}<newline46mondego>    }<newline46mondego>    return -1;<newline46mondego>}<newline46mondego>"
"900splitHere46","129188splitHere46","int array[]"
"901splitHere46","129188splitHere46","int[] array"
"902splitHere46","129995splitHere46","com.vividsolutions.jump.workbench.ui.renderer.java2D.Java2DConverter<newline46mondego>"
"903splitHere46","131959splitHere46","\bimport\b"
"904splitHere46","131959splitHere46","\b\Q$toFind\E\b"
"905splitHere46","131959splitHere46","if( m[<newline46mondego>        \G<newline46mondego>        (?:<newline46mondego>            [^'<doubleQuotes46>/]+<newline46mondego>          | /(?![/*])<newline46mondego>        )+<newline46mondego>    ]xgc<newline46mondego>) {<newline46mondego>    my $code = substr( $_, $-[0], $+[0] - $-[0] );<newline46mondego>    my $imported = 0;<newline46mondego>    while( $code =~ /\b(import\s+)?\Q$package\E\b/g ) {<newline46mondego>        if( $1 ) {<newline46mondego>            ... # Found importing of package<newline46mondego>            while( $code =~ /\b\Q$class\E\b/g ) {<newline46mondego>                ... # Found mention of imported class<newline46mondego>            }<newline46mondego>            last;<newline46mondego>        }<newline46mondego>        ... # Found a package reference<newline46mondego>    }<newline46mondego>} elsif( m[ \G ' (?: [^'\\]+ | \\. )* ' ]xgc<newline46mondego>    ||   m[ \G <doubleQuotes46> (?: [^<doubleQuotes46>\\]+ | \\. )* <doubleQuotes46> ]xgc<newline46mondego>) {<newline46mondego>    # skip quoted strings<newline46mondego>} elsif(  m[\G//.*]g­c  ) {<newline46mondego>    # skip C++ comments<newline46mondego>"
"906splitHere46","132603splitHere46","boolean uploadFile(String username, String password, String fileName, int currentChunk, int totalChunks, byte[] chunk);<newline46mondego>"
"907splitHere46","132640splitHere46","<scope>test</scope><newline46mondego>"
"908splitHere46","132932splitHere46","StaticServlet"
"909splitHere46","132932splitHere46","If-Modified-Since"
"910splitHere46","132932splitHere46","ServletUtils"
"911splitHere46","132932splitHere46","StaticServlet"
"912splitHere46","132932splitHere46","coalesce"
"913splitHere46","132932splitHere46","COALESCE"
"914splitHere46","132932splitHere46","public static <T> T coalesce(T...ts) {<newline46mondego>    for(T t: ts)<newline46mondego>        if(t != null)<newline46mondego>            return t;<newline46mondego>    return null;<newline46mondego>}<newline46mondego>"
"915splitHere46","133290splitHere46","#include <stdio.h><newline46mondego><newline46mondego>int main()<newline46mondego>{<newline46mondego>	int list[]={4,7,2,4,1,10,3};<newline46mondego>	int n;  // the one int variable<newline46mondego><newline46mondego>	startsort:<newline46mondego>	for (n=0; n< sizeof(list)/sizeof(int)-1; ++n)<newline46mondego>		if (list[n] > list[n+1]) {<newline46mondego>			list[n] ^= list[n+1];<newline46mondego>			list[n+1] ^= list[n];<newline46mondego>			list[n] ^= list[n+1];<newline46mondego>			goto startsort;<newline46mondego>		}<newline46mondego><newline46mondego>	for (n=0; n< sizeof(list)/sizeof(int); ++n)<newline46mondego>		printf(<doubleQuotes46>%d\n<doubleQuotes46>,list[n]);<newline46mondego>	return 0;<newline46mondego>}<newline46mondego>"
"916splitHere46","133565splitHere46","@Resource(name=<doubleQuotes46>wsContext<doubleQuotes46>) WebServiceContext wsCtxt;"
"917splitHere46","133627splitHere46","http://"
"918splitHere46","133627splitHere46","svn://"
"919splitHere46","133770splitHere46","<condition property=<doubleQuotes46>fooDoesNotExist<doubleQuotes46>><newline46mondego>    <not><newline46mondego>      <available filepath=<doubleQuotes46>path/to/foo<doubleQuotes46>/><newline46mondego>    </not><newline46mondego>  </condition><newline46mondego>"
"920splitHere46","133845splitHere46","File targetFile = new File(targetPath, filename);<newline46mondego>"
"921splitHere46","134014splitHere46","final String firstkey = <doubleQuotes46>Data-<doubleQuotes46> + email;<newline46mondego>final String key = firstkey.intern();<newline46mondego>"
"922splitHere46","134014splitHere46","// do not attempt double-check locking here. I mean it.<newline46mondego>synchronized(StaticObject) {<newline46mondego>    data = StaticCache.get(key);<newline46mondego>    while (data == IN_PROGRESS) {<newline46mondego>        // another thread is getting the data<newline46mondego>        StaticObject.wait();<newline46mondego>        data = StaticCache.get(key);<newline46mondego>    }<newline46mondego>    if (data == null) {<newline46mondego>        // we must get the data<newline46mondego>        StaticCache.put(key, IN_PROGRESS, TIME_MAX_VALUE);<newline46mondego>    }<newline46mondego>}<newline46mondego>if (data == null) {<newline46mondego>    // we must get the data<newline46mondego>    try {<newline46mondego>        data = server.DoSlowThing(key);<newline46mondego>    } finally {<newline46mondego>        synchronized(StaticObject) {<newline46mondego>            // WARNING: failure here is fatal, and must be allowed to terminate<newline46mondego>            // the app or else waiters will be left forever. Choose a suitable<newline46mondego>            // collection type in which replacing the value for a key is guaranteed.<newline46mondego>            StaticCache.put(key, data, CURRENT_TIME);<newline46mondego>            StaticObject.notifyAll();<newline46mondego>        }<newline46mondego>    }<newline46mondego>}<newline46mondego>"
"923splitHere46","134563splitHere46","failureProperty"
"924splitHere46","134563splitHere46","haltOnFailure"
"925splitHere46","134563splitHere46","<target name=<doubleQuotes46>mytarget<doubleQuotes46>><newline46mondego>  <testng outputDir=<doubleQuotes46>${results}<doubleQuotes46> failureProperty=<doubleQuotes46>tests.failed<doubleQuotes46> haltOnFailure=<doubleQuotes46>false<doubleQuotes46> ...><newline46mondego>    ...<newline46mondego>  </testng><newline46mondego>  <echo>Tests complete.  Results available in ${results}</echo><newline46mondego></target><newline46mondego>"
"926splitHere46","134563splitHere46","<target name=<doubleQuotes46>doSomethingIfTestsWereSuccessful<doubleQuotes46> unless=<doubleQuotes46>tests.failed<doubleQuotes46>><newline46mondego>   ...<newline46mondego></target><newline46mondego><newline46mondego><target name=<doubleQuotes46>doSomethingIfTestsFailed<doubleQuotes46> if=<doubleQuotes46>tests.failed<doubleQuotes46>><newline46mondego>   ...<newline46mondego>   <fail message=<doubleQuotes46>Tests Failed<doubleQuotes46> /><newline46mondego></target><newline46mondego>"
"927splitHere46","134918splitHere46","import java.util.*;<newline46mondego>import java.io.*;<newline46mondego><newline46mondego>/** <newline46mondego> * Usage sample serializing SomeClass instance <newline46mondego> */<newline46mondego>public class ToStringSample {<newline46mondego><newline46mondego>    public static void main( String [] args )  throws IOException,<newline46mondego>                                                      ClassNotFoundException {<newline46mondego>        String string = toString( new SomeClass() );<newline46mondego>        System.out.println(<doubleQuotes46> Encoded serialized version <doubleQuotes46> );<newline46mondego>        System.out.println( string );<newline46mondego>        SomeClass some = ( SomeClass ) fromString( string );<newline46mondego>        System.out.println( <doubleQuotes46>\n\nReconstituted object<doubleQuotes46>);<newline46mondego>        System.out.println( some );<newline46mondego><newline46mondego><newline46mondego>    }<newline46mondego><newline46mondego>    /** Read the object from Base64 string. */<newline46mondego>   private static Object fromString( String s ) throws IOException ,<newline46mondego>                                                       ClassNotFoundException {<newline46mondego>        byte [] data = Base64Coder.decode( s );<newline46mondego>        ObjectInputStream ois = new ObjectInputStream( <newline46mondego>                                        new ByteArrayInputStream(  data ) );<newline46mondego>        Object o  = ois.readObject();<newline46mondego>        ois.close();<newline46mondego>        return o;<newline46mondego>   }<newline46mondego><newline46mondego>    /** Write the object to a Base64 string. */<newline46mondego>    private static String toString( Serializable o ) throws IOException {<newline46mondego>        ByteArrayOutputStream baos = new ByteArrayOutputStream();<newline46mondego>        ObjectOutputStream oos = new ObjectOutputStream( baos );<newline46mondego>        oos.writeObject( o );<newline46mondego>        oos.close();<newline46mondego>        return new String( Base64Coder.encode( baos.toByteArray() ) );<newline46mondego>    }<newline46mondego>}<newline46mondego><newline46mondego>/** Test subject. A very simple class. */ <newline46mondego>class SomeClass implements Serializable {<newline46mondego><newline46mondego>    private final static long serialVersionUID = 1; // See Nick's comment below<newline46mondego><newline46mondego>    int i    = Integer.MAX_VALUE;<newline46mondego>    String s = <doubleQuotes46>ABCDEFGHIJKLMNOP<doubleQuotes46>;<newline46mondego>    Double d = new Double( -1.0 );<newline46mondego>    public String toString(){<newline46mondego>        return  <doubleQuotes46>SomeClass instance says: Don't worry, <doubleQuotes46> <newline46mondego>              + <doubleQuotes46>I'm healthy. Look, my data is i = <doubleQuotes46> + i  <newline46mondego>              + <doubleQuotes46>, s = <doubleQuotes46> + s + <doubleQuotes46>, d = <doubleQuotes46> + d;<newline46mondego>    }<newline46mondego>}<newline46mondego>"
"928splitHere46","134918splitHere46","C:\oreyes\samples\java\encode>javac *.java<newline46mondego><newline46mondego>C:\oreyes\samples\java\encode>java ToStringSample<newline46mondego>Encoded serialized version<newline46mondego>rO0ABXNyAAlTb21lQ2xhc3MAAAAAAAAAAQIAA0kAAWlMAAFkdAASTGphdmEvbGFuZy9Eb3VibGU7T<newline46mondego>AABc3QAEkxqYXZhL2xhbmcvU3RyaW5nO3hwf////3NyABBqYXZhLmxhbmcuRG91YmxlgLPCSilr+w<newline46mondego>QCAAFEAAV2YWx1ZXhyABBqYXZhLmxhbmcuTnVtYmVyhqyVHQuU4IsCAAB4cL/wAAAAAAAAdAAQQUJ<newline46mondego>DREVGR0hJSktMTU5PUA==<newline46mondego><newline46mondego><newline46mondego>Reconstituted object<newline46mondego>SomeClass instance says: Don't worry, I'm healthy. Look, my data is i = 2147483647, s = ABCDEFGHIJKLMNOP, d = -1.0<newline46mondego>"
"929splitHere46","134974splitHere46","public class MyApp {<newline46mondego>      public static String[] ARGS; <newline46mondego>        public static void main2(String[] args) {<newline46mondego>          ARGS = args;<newline46mondego>          // create context<newline46mondego>      }<newline46mondego>    }<newline46mondego>"
"930splitHere46","134974splitHere46","<util:constant static-field=<doubleQuotes46>MyApp.ARGS<doubleQuotes46>/><newline46mondego>"
"931splitHere46","134974splitHere46","public class MyApp2 {<newline46mondego>public static void main(String[] args) {<newline46mondego>	DefaultListableBeanFactory beanFactory = new DefaultListableBeanFactory();<newline46mondego><newline46mondego>     // Define a bean and register it<newline46mondego>	BeanDefinition beanDefinition = BeanDefinitionBuilder.<newline46mondego>		rootBeanDefinition(Arrays.class, <doubleQuotes46>asList<doubleQuotes46>)<newline46mondego>		.addConstructorArgValue(args).getBeanDefinition();<newline46mondego>	beanFactory.registerBeanDefinition(<doubleQuotes46>args<doubleQuotes46>, beanDefinition);<newline46mondego>	GenericApplicationContext cmdArgCxt = new GenericApplicationContext(beanFactory);<newline46mondego>	// Must call refresh to initialize context <newline46mondego>	cmdArgCxt.refresh();<newline46mondego><newline46mondego>	// Create application context, passing command line context as parent<newline46mondego>	ApplicationContext mainContext = new ClassPathXmlApplicationContext(CONFIG_LOCATIONS, cmdArgCxt);<newline46mondego><newline46mondego>	// See if it's in the context<newline46mondego>	System.out.println(<doubleQuotes46>Args: <doubleQuotes46> + mainContext.getBean(<doubleQuotes46>args<doubleQuotes46>));<newline46mondego>}<newline46mondego><newline46mondego>private static String[] CONFIG_LOCATIONS = new String[] {<newline46mondego>	<doubleQuotes46>applicationContext.xml<doubleQuotes46><newline46mondego>};<newline46mondego><newline46mondego>}<newline46mondego>"
"932splitHere46","135380splitHere46","ArrayList"
"933splitHere46","135380splitHere46","ArrayList"
"934splitHere46","135380splitHere46","ArrayList"
"935splitHere46","135380splitHere46","LinkedList"
"936splitHere46","135380splitHere46","ArrayList"
"937splitHere46","135380splitHere46","LinkedList"
"938splitHere46","135380splitHere46","ArrayList"
"939splitHere46","135380splitHere46","ArrayList"
"940splitHere46","135958splitHere46","<h:outputText value=<doubleQuotes46>#{column}<doubleQuotes46>><newline46mondego>  <a4j:support event=<doubleQuotes46>onclick<doubleQuotes46> action=<doubleQuotes46>#{pageDataModel.sort(idx)}<doubleQuotes46><newline46mondego>               eventsQueue=<doubleQuotes46>instancesQueue<doubleQuotes46><newline46mondego>               reRender=<doubleQuotes46>instanceList,instanceListScroller<doubleQuotes46>/><newline46mondego></h:outputText><newline46mondego>"
"941splitHere46","135958splitHere46","<h:outputText value=<doubleQuotes46>#{column}<doubleQuotes46> styleClass=<doubleQuotes46>#{pageDataModel.getOrderClass(idx)}<doubleQuotes46> ><newline46mondego>  <a4j:support event=<doubleQuotes46>onclick<doubleQuotes46> action=<doubleQuotes46>#{pageDataModel.sort(idx)}<doubleQuotes46><newline46mondego>               eventsQueue=<doubleQuotes46>instancesQueue<doubleQuotes46><newline46mondego>               reRender=<doubleQuotes46>instanceList,instanceListScroller<doubleQuotes46>/><newline46mondego></h:outputText><newline46mondego>"
"942splitHere46","136095splitHere46","\r\n"
"943splitHere46","136434splitHere46","int year = Calendar.getInstance().get(Calendar.YEAR);<newline46mondego>"
"944splitHere46","137288splitHere46","SecureRandom.getInstance(<doubleQuotes46>SHA1PRNG<doubleQuotes46>);<newline46mondego>"
"945splitHere46","137684splitHere46","ZipOutputStream targetStream = new ZipOutputStream(fileToSaveTo);<newline46mondego>ZipEntry entry = new ZipEntry(nameOfFileInZipFile);<newline46mondego>targetStream.putNextEntry(entry);<newline46mondego><newline46mondego>byte[] dataBlock = new byte[1024];<newline46mondego>int count = inputStream.read(dataBlock, 0, 1024);<newline46mondego>while (count != -1) {<newline46mondego>    targetStream.write(dataBlock, 0, count);<newline46mondego>    count = inputStream.read(dataBlock, 0, 1024);<newline46mondego>}<newline46mondego>"
"946splitHere46","137946splitHere46","final"
"947splitHere46","137946splitHere46","final"
"948splitHere46","137946splitHere46","final"
"949splitHere46","137946splitHere46","final"
"950splitHere46","138098splitHere46","String pid = new File(<doubleQuotes46>/proc/self<doubleQuotes46>).getCanonicalFile().getName();<newline46mondego>"
"951splitHere46","138098splitHere46","pid = java.io.File.new(<doubleQuotes46>/proc/self<doubleQuotes46>).canonical_file.name<newline46mondego>"
"952splitHere46","138329splitHere46","find . -name '*.java' -exec javac {} \;"
"953splitHere46","138329splitHere46","find . -name 'person.java' -maxdepth 2 -exec javac {} \;"
"954splitHere46","138518splitHere46","-Xdebug -Xrunjdwp:transport=dt_socket,server=y,suspend=n,address=1044<newline46mondego>"
"955splitHere46","138532splitHere46","throws SpecificException1, SpecificException2, SpecificException3 ...<newline46mondego>"
"956splitHere46","138532splitHere46","throws GeneralException<newline46mondego>"
"957splitHere46","138693splitHere46","import org.eclipse.swt.SWT;<newline46mondego>import org.eclipse.swt.graphics.*;<newline46mondego>import org.eclipse.swt.layout.*;<newline46mondego>import org.eclipse.swt.widgets.*;<newline46mondego><newline46mondego>/**<newline46mondego> * SWT composite with transparent label<newline46mondego> * <newline46mondego> * @author McDowell<newline46mondego> */<newline46mondego>public class Sweet {<newline46mondego><newline46mondego>    private Image imageGradient;<newline46mondego>    private Label label;<newline46mondego>    private Composite composite;<newline46mondego><newline46mondego>    private void createComponents(Shell parent) {<newline46mondego>        composite = new Composite(parent, SWT.NONE);<newline46mondego>        composite.addListener(SWT.Resize, new Listener() {<newline46mondego>            public void handleEvent(Event e) {<newline46mondego>                changeImage();<newline46mondego>            }<newline46mondego>        });<newline46mondego>        composite.setLayout(new FormLayout());<newline46mondego>        composite.setBackgroundMode(SWT.INHERIT_DEFAULT);<newline46mondego><newline46mondego>        label = new Label(composite, SWT.None);<newline46mondego>        label.setText(<doubleQuotes46>Hello, World!<doubleQuotes46>);<newline46mondego>    }<newline46mondego><newline46mondego>    private void changeImage() {<newline46mondego>        Image oldImage = imageGradient;<newline46mondego><newline46mondego>        Display display = composite.getDisplay();<newline46mondego>        Rectangle rect = composite.getClientArea();<newline46mondego>        imageGradient = new Image(display, rect.width, rect.height);<newline46mondego>        GC gc = new GC(imageGradient);<newline46mondego>        try {<newline46mondego>            Color color1 = new Color(display, 200, 200, 255);<newline46mondego>            try {<newline46mondego>                Color color2 = new Color(display, 255, 255, 255);<newline46mondego>                try {<newline46mondego>                    gc.setForeground(color1);<newline46mondego>                    gc.setBackground(color2);<newline46mondego>                    gc.fillGradientRectangle(rect.x, rect.y, rect.width,<newline46mondego>                            rect.height, true);<newline46mondego>                } finally {<newline46mondego>                    color2.dispose();<newline46mondego>                }<newline46mondego>            } finally {<newline46mondego>                color1.dispose();<newline46mondego>            }<newline46mondego>        } finally {<newline46mondego>            gc.dispose();<newline46mondego>        }<newline46mondego>        composite.setBackgroundImage(imageGradient);<newline46mondego><newline46mondego>        if (oldImage != null) {<newline46mondego>            oldImage.dispose();<newline46mondego>        }<newline46mondego>    }<newline46mondego><newline46mondego>    private void openShell(Display display) {<newline46mondego>        Shell shell = new Shell(display);<newline46mondego>        try {<newline46mondego>            shell.setSize(200, 100);<newline46mondego>            shell.setLayout(new FillLayout());<newline46mondego>            createComponents(shell);<newline46mondego>            shell.open();<newline46mondego>            while (!shell.isDisposed()) {<newline46mondego>                if (!display.readAndDispatch()) {<newline46mondego>                    display.sleep();<newline46mondego>                }<newline46mondego>            }<newline46mondego>        } finally {<newline46mondego>            if (!shell.isDisposed()) {<newline46mondego>                shell.dispose();<newline46mondego>            }<newline46mondego>        }<newline46mondego>    }<newline46mondego><newline46mondego>    public void run() {<newline46mondego>        Display display = Display.getDefault();<newline46mondego>        try {<newline46mondego>            openShell(display);<newline46mondego>        } finally {<newline46mondego>            display.dispose();<newline46mondego>        }<newline46mondego>    }<newline46mondego><newline46mondego>    public void dispose() {<newline46mondego>        if (imageGradient != null) {<newline46mondego>            imageGradient.dispose();<newline46mondego>        }<newline46mondego>    }<newline46mondego><newline46mondego>    public static void main(String[] args) {<newline46mondego>        Sweet sweet = new Sweet();<newline46mondego>        try {<newline46mondego>            sweet.run();<newline46mondego>        } finally {<newline46mondego>            sweet.dispose();<newline46mondego>        }<newline46mondego>    }<newline46mondego><newline46mondego>}<newline46mondego>"
"958splitHere46","138950splitHere46","<Connector port=<doubleQuotes46>8080<doubleQuotes46> maxHttpHeaderSize=<doubleQuotes46>8192<doubleQuotes46><newline46mondego> maxThreads=<doubleQuotes46>150<doubleQuotes46> minSpareThreads=<doubleQuotes46>25<doubleQuotes46> maxSpareThreads=<doubleQuotes46>75<doubleQuotes46><newline46mondego> enableLookups=<doubleQuotes46>false<doubleQuotes46> redirectPort=<doubleQuotes46>8443<doubleQuotes46> acceptCount=<doubleQuotes46>100<doubleQuotes46><newline46mondego> connectionTimeout=<doubleQuotes46>20000<doubleQuotes46> disableUploadTimeout=<doubleQuotes46>true<doubleQuotes46> <newline46mondego> compression=<doubleQuotes46>on<doubleQuotes46> <newline46mondego> compressionMinSize=<doubleQuotes46>128<doubleQuotes46> <newline46mondego> noCompressionUserAgents=<doubleQuotes46>gozilla, traviata<doubleQuotes46> <newline46mondego> compressableMimeType=<doubleQuotes46>text/html,text/xml,text/plain,text/css,text/ javascript,application/x-javascript,application/javascript<doubleQuotes46><newline46mondego> URIEncoding=<doubleQuotes46>UTF-8<doubleQuotes46><newline46mondego>/><newline46mondego>"
"959splitHere46","138950splitHere46","https://localhost:8443/ID/Users?action=search&name=*ж*<newline46mondego>"
"960splitHere46","138950splitHere46","package fi.foo.filters;<newline46mondego><newline46mondego>  import java.io.IOException;<newline46mondego>  import javax.servlet.Filter;<newline46mondego>  import javax.servlet.FilterChain;<newline46mondego>  import javax.servlet.FilterConfig;<newline46mondego>  import javax.servlet.ServletException;<newline46mondego>  import javax.servlet.ServletRequest;<newline46mondego>  import javax.servlet.ServletResponse;<newline46mondego><newline46mondego>  public class CharsetFilter implements Filter<newline46mondego>   {<newline46mondego>   private String encoding;<newline46mondego><newline46mondego>   public void init(FilterConfig config) throws ServletException<newline46mondego>   {<newline46mondego>    encoding = config.getInitParameter(<doubleQuotes46>requestEncoding<doubleQuotes46>);<newline46mondego><newline46mondego>    if( encoding==null ) encoding=<doubleQuotes46>UTF-8<doubleQuotes46>;<newline46mondego>   }<newline46mondego><newline46mondego>   public void doFilter(ServletRequest request, ServletResponse response, FilterChain       next)<newline46mondego>   throws IOException, ServletException<newline46mondego>   {<newline46mondego>    // Respect the client-specified character encoding<newline46mondego>    // (see HTTP specification section 3.4.1)<newline46mondego>    if(null == request.getCharacterEncoding())<newline46mondego>      request.setCharacterEncoding(encoding);<newline46mondego><newline46mondego><newline46mondego>    /**<newline46mondego> * Set the default response content type and encoding<newline46mondego> */<newline46mondego> response.setContentType(<doubleQuotes46>text/html; charset=UTF-8<doubleQuotes46>);<newline46mondego> response.setCharacterEncoding(<doubleQuotes46>UTF-8<doubleQuotes46>);<newline46mondego><newline46mondego><newline46mondego>    next.doFilter(request, response);<newline46mondego>   }<newline46mondego><newline46mondego>    public void destroy(){}<newline46mondego>   }<newline46mondego>"
"961splitHere46","138950splitHere46","<!--CharsetFilter start--> <newline46mondego><newline46mondego>  <filter><newline46mondego>    <filter-name>CharsetFilter</filter-name><newline46mondego>    <filter-class>fi.foo.filters.CharsetFilter</filter-class><newline46mondego>      <init-param><newline46mondego>        <param-name>requestEncoding</param-name><newline46mondego>        <param-value>UTF-8</param-value><newline46mondego>      </init-param><newline46mondego>  </filter><newline46mondego><newline46mondego>  <filter-mapping><newline46mondego>    <filter-name>CharsetFilter</filter-name><newline46mondego>    <url-pattern>/*</url-pattern><newline46mondego>  </filter-mapping><newline46mondego>"
"962splitHere46","138950splitHere46","<jsp-config><newline46mondego>    <jsp-property-group><newline46mondego>        <url-pattern>*.jsp</url-pattern><newline46mondego>        <page-encoding>UTF-8</page-encoding><newline46mondego>    </jsp-property-group><newline46mondego></jsp-config><newline46mondego>"
"963splitHere46","138950splitHere46","<%@page pageEncoding=<doubleQuotes46>UTF-8<doubleQuotes46> contentType=<doubleQuotes46>text/html; charset=UTF-8<doubleQuotes46>%><newline46mondego>"
"964splitHere46","138950splitHere46","<?xml version=<doubleQuotes46>1.0<doubleQuotes46> encoding=<doubleQuotes46>UTF-8<doubleQuotes46>?><newline46mondego>   <!DOCTYPE html PUBLIC <doubleQuotes46>-//W3C//DTD XHTML 1.1//EN<doubleQuotes46> <doubleQuotes46>http://www.w3.org/TR/xhtml11/DTD/xhtml11.dtd<doubleQuotes46>><newline46mondego>   <html xmlns=<doubleQuotes46>http://www.w3.org/1999/xhtml<doubleQuotes46> xml:lang=<doubleQuotes46>fi<doubleQuotes46>><newline46mondego>   <head><newline46mondego>   <meta http-equiv='Content-Type' content='text/html; charset=UTF-8' /><newline46mondego>   ...<newline46mondego>"
"965splitHere46","138950splitHere46","<Resource name=<doubleQuotes46>jdbc/AppDB<doubleQuotes46> <newline46mondego>        auth=<doubleQuotes46>Container<doubleQuotes46><newline46mondego>        type=<doubleQuotes46>javax.sql.DataSource<doubleQuotes46><newline46mondego>        maxActive=<doubleQuotes46>20<doubleQuotes46> maxIdle=<doubleQuotes46>10<doubleQuotes46> maxWait=<doubleQuotes46>10000<doubleQuotes46><newline46mondego>        username=<doubleQuotes46>foo<doubleQuotes46><newline46mondego>        password=<doubleQuotes46>bar<doubleQuotes46><newline46mondego>        driverClassName=<doubleQuotes46>com.mysql.jdbc.Driver<doubleQuotes46> url=<doubleQuotes46>jdbc:mysql://localhost:3306/      ID_development?useEncoding=true&amp;characterEncoding=UTF-8<doubleQuotes46><newline46mondego>    /><newline46mondego>"
"966splitHere46","138950splitHere46","CREATE DATABASE `ID_development` <newline46mondego>   /*!40100 DEFAULT CHARACTER SET utf8 COLLATE utf8_swedish_ci */;<newline46mondego>"
"967splitHere46","138950splitHere46","CREATE TABLE  `Users` (<newline46mondego>    `id` int(10) unsigned NOT NULL auto_increment,<newline46mondego>    `name` varchar(30) collate utf8_swedish_ci default NULL<newline46mondego>    PRIMARY KEY  (`id`)<newline46mondego>   ) ENGINE=InnoDB DEFAULT CHARSET=utf8 COLLATE=utf8_swedish_ci ROW_FORMAT=DYNAMIC;<newline46mondego>"
"968splitHere46","138950splitHere46","[client]<newline46mondego>   port=3306<newline46mondego>   default-character-set=utf8<newline46mondego><newline46mondego>   [mysql]<newline46mondego>   default-character-set=utf8<newline46mondego>"
"969splitHere46","138950splitHere46","DELIMITER $$<newline46mondego><newline46mondego>   DROP FUNCTION IF EXISTS `pathToNode` $$<newline46mondego>   CREATE FUNCTION `pathToNode` (ryhma_id INT) RETURNS TEXT CHARACTER SET utf8<newline46mondego>   READS SQL DATA<newline46mondego>   BEGIN<newline46mondego><newline46mondego>    DECLARE path VARCHAR(255) CHARACTER SET utf8;<newline46mondego><newline46mondego>   SET path = NULL;<newline46mondego><newline46mondego>   ...<newline46mondego><newline46mondego>   RETURN path;<newline46mondego><newline46mondego>   END $$<newline46mondego><newline46mondego>   DELIMITER ;<newline46mondego>"
"970splitHere46","138950splitHere46","https://localhost:8443/ID/Users?action=search&name=Petteri<newline46mondego>   https://localhost:8443/ID/Users?action=search&name=ж<newline46mondego>"
"971splitHere46","138950splitHere46","https://localhost:8443/ID/Users?action=search&name=*Päivi*<newline46mondego>"
"972splitHere46","138950splitHere46","https://localhost:8443/ID/Users?action=search&name=*P%E4ivi*<newline46mondego>"
"973splitHere46","138950splitHere46","VARBINARY"
"974splitHere46","138950splitHere46","utf8mb4"
"975splitHere46","138950splitHere46","utf8"
"976splitHere46","139022splitHere46","<filter-def name=<doubleQuotes46>IsDeletedFilter<doubleQuotes46>><newline46mondego>  <filter-param name=<doubleQuotes46>IsDeleted<doubleQuotes46> type=<doubleQuotes46>bool<doubleQuotes46>/><newline46mondego></filter-def><newline46mondego>"
"977splitHere46","139022splitHere46","<class/set  ...><newline46mondego>...<newline46mondego><filter name=<doubleQuotes46>IsDeletedFilter<doubleQuotes46> condition=<doubleQuotes46>:IsDeleted = Is_Deleted<doubleQuotes46>/><newline46mondego>"
"978splitHere46","139022splitHere46","SoftDeleteEntity"
"979splitHere46","139349splitHere46","// make it now<newline46mondego>Calendar dateCal = Calendar.getInstance();<newline46mondego>// make it tomorrow<newline46mondego>dateCal.add(Calendar.DAY_OF_YEAR, 1);<newline46mondego>// Now set it to the time you want<newline46mondego>dateCal.set(Calendar.HOUR_OF_DAY, hours);<newline46mondego>dateCal.set(Calendar.MINUTE, minutes);<newline46mondego>dateCal.set(Calendar.SECOND, seconds);<newline46mondego>dateCal.set(Calendar.MILLISECOND, 0);<newline46mondego>return dateCal.getTime();<newline46mondego>"
"980splitHere46","139392splitHere46","URLStreamHandler"
"981splitHere46","139392splitHere46","URL.handlers"
"982splitHere46","139392splitHere46","URLStreamHandlerFactory"
"983splitHere46","139392splitHere46","URL.factory"
"984splitHere46","139917splitHere46","-Djava.net.preferIPv4Stack=true<newline46mondego>"
"985splitHere46","140050splitHere46","<managed-bean><newline46mondego>	<managed-bean-name>navBean</managed-bean-name><newline46mondego>	<managed-bean-class>foo.NavBean</managed-bean-class><newline46mondego>	<managed-bean-scope>application</managed-bean-scope><newline46mondego></managed-bean><newline46mondego>"
"986splitHere46","140050splitHere46","package foo;<newline46mondego><newline46mondego>import java.io.IOException;<newline46mondego>import java.io.Serializable;<newline46mondego>import java.net.URLEncoder;<newline46mondego><newline46mondego>import javax.faces.context.ExternalContext;<newline46mondego>import javax.faces.context.FacesContext;<newline46mondego><newline46mondego>public class NavBean implements Serializable {<newline46mondego><newline46mondego>    private String getView() {<newline46mondego>    	String viewId = <doubleQuotes46>/showMessage.faces<doubleQuotes46>; // or look this up somewhere<newline46mondego>    	return viewId;<newline46mondego>    }<newline46mondego><newline46mondego>    /**<newline46mondego>     * Regular link to page<newline46mondego>     */<newline46mondego>    public String getUrlLink() {<newline46mondego>    	FacesContext context = FacesContext.getCurrentInstance();<newline46mondego>    	ExternalContext extContext = context.getExternalContext();<newline46mondego>    	String viewId = getView();<newline46mondego>    	String navUrl = context.getExternalContext().encodeActionURL(<newline46mondego>    			extContext.getRequestContextPath() + viewId);<newline46mondego>    	return navUrl;<newline46mondego>    }<newline46mondego><newline46mondego>    /**<newline46mondego>     * Just some value<newline46mondego>     */<newline46mondego>    public String getValue() {<newline46mondego>    	return <doubleQuotes46><doubleQuotes46> + System.currentTimeMillis();<newline46mondego>    }<newline46mondego><newline46mondego>    /**<newline46mondego>     * Invoked by action<newline46mondego>     */<newline46mondego>    public String invokeRedirect() {<newline46mondego>    	FacesContext context = FacesContext.getCurrentInstance();<newline46mondego>    	ExternalContext extContext = context.getExternalContext();<newline46mondego>    	String viewId = getView();<newline46mondego>    	try {<newline46mondego>    		String charEncoding = extContext.getRequestCharacterEncoding();<newline46mondego>    		String name = URLEncoder.encode(<doubleQuotes46>foo<doubleQuotes46>, charEncoding);<newline46mondego>    		String value = URLEncoder.encode(getValue(), charEncoding);<newline46mondego>    		viewId = extContext.getRequestContextPath() + viewId + '?' + name<newline46mondego>    				+ <doubleQuotes46>=<doubleQuotes46> + value;<newline46mondego>    		String urlLink = context.getExternalContext().encodeActionURL(<newline46mondego>    				viewId);<newline46mondego>    		extContext.redirect(urlLink);<newline46mondego>    	} catch (IOException e) {<newline46mondego>    		extContext.log(getClass().getName() + <doubleQuotes46>.invokeRedirect<doubleQuotes46>, e);<newline46mondego>    	}<newline46mondego>    	return null;<newline46mondego>    }<newline46mondego><newline46mondego>}<newline46mondego>"
"987splitHere46","140050splitHere46","<h:outputLink value=<doubleQuotes46>#{navBean.urlLink}<doubleQuotes46>><newline46mondego>    <f:param name=<doubleQuotes46>foo<doubleQuotes46> value=<doubleQuotes46>#{navBean.value}<doubleQuotes46> /><newline46mondego>    <h:outputText value=<doubleQuotes46>get<doubleQuotes46> /><newline46mondego></h:outputLink><newline46mondego>"
"988splitHere46","140050splitHere46","<h:commandLink id=<doubleQuotes46>myCommandLink<doubleQuotes46> action=<doubleQuotes46>#{navBean.invokeRedirect}<doubleQuotes46>><newline46mondego>    <h:outputText value=<doubleQuotes46>post<doubleQuotes46> /><newline46mondego></h:commandLink><newline46mondego>"
"989splitHere46","140555splitHere46","import java.lang.reflect.Method;<newline46mondego><newline46mondego>class EnumReflection<newline46mondego>{<newline46mondego><newline46mondego>  public static void main(String[] args)<newline46mondego>    throws Exception<newline46mondego>  {<newline46mondego>    Class<?> clz = Class.forName(<doubleQuotes46>test.PropertyEnum<doubleQuotes46>);<newline46mondego>    /* Use method added in Java 1.5. */<newline46mondego>    Object[] consts = clz.getEnumConstants();<newline46mondego>    /* Enum constants are in order of declaration. */<newline46mondego>    Class<?> sub = consts[0].getClass();<newline46mondego>    Method mth = sub.getDeclaredMethod(<doubleQuotes46>getDefaultValue<doubleQuotes46>);<newline46mondego>    String val = (String) mth.invoke(consts[0]);<newline46mondego>    /* Prove it worked. */<newline46mondego>    System.out.println(<doubleQuotes46>getDefaultValue <doubleQuotes46> + <newline46mondego>      val.equals(PropertyEnum.SYSTEM_PROPERTY_ONE.getDefaultValue()));<newline46mondego>  }<newline46mondego><newline46mondego>}<newline46mondego>"
"990splitHere46","140818splitHere46","<pre><newline46mondego>files = glob.glob('/usr/joe/*.gif')<newline46mondego></pre>"
"991splitHere46","140818splitHere46","<pre><newline46mondego>import os<newline46mondego>from os.path import join<newline46mondego>for root, dirs, files in os.walk('/usr'):<newline46mondego>   print <doubleQuotes46>Current directory<doubleQuotes46>, root<newline46mondego>   print <doubleQuotes46>Sub directories<doubleQuotes46>, dirs<newline46mondego>   print <doubleQuotes46>Files<doubleQuotes46>, files<newline46mondego></pre>"
"992splitHere46","140861splitHere46","public static byte[] hexStringToByteArray(String s) {<newline46mondego>    int len = s.length();<newline46mondego>    byte[] data = new byte[len / 2];<newline46mondego>    for (int i = 0; i < len; i += 2) {<newline46mondego>        data[i / 2] = (byte) ((Character.digit(s.charAt(i), 16) << 4)<newline46mondego>                             + Character.digit(s.charAt(i+1), 16));<newline46mondego>    }<newline46mondego>    return data;<newline46mondego>}<newline46mondego>"
"993splitHere46","140861splitHere46","char[]"
"994splitHere46","140861splitHere46","assert"
"995splitHere46","141267splitHere46","InputStream is1 = new FileInputStream(<doubleQuotes46>/tmp/foo<doubleQuotes46>);<newline46mondego>try{<newline46mondego><newline46mondego>    InputStream is2 =  new FileInputStream(<doubleQuotes46>/tmp/bar<doubleQuotes46>);<newline46mondego>    try{<newline46mondego>         /* do stuff with is1 and is 2 */<newline46mondego><newline46mondego>    } finally {<newline46mondego>        is2.close();<newline46mondego>    }<newline46mondego>} finally {<newline46mondego>    is1.close();<newline46mondego>}<newline46mondego>"
"996splitHere46","141267splitHere46","using(InputStream is1 as new FileInputStream(<doubleQuotes46>/tmp/foo<doubleQuotes46>)){<newline46mondego>    using(InputStream is2 as new FileInputStream(<doubleQuotes46>/tmp/bar<doubleQuotes46>)){<newline46mondego>        /* do stuff with s1 and s2 */<newline46mondego>    }<newline46mondego>}<newline46mondego>"
"997splitHere46","142428splitHere46","private enum Alignment { LEFT, RIGHT };    <newline46mondego>String drawCellValue (int maxCellLength, String cellValue, Alignment align){<newline46mondego>  if (align == Alignment.LEFT)<newline46mondego>  {<newline46mondego>    //Process it...<newline46mondego>  }<newline46mondego>}<newline46mondego>"
"998splitHere46","142881splitHere46","./com/*"
"999splitHere46","142881splitHere46","/src"
"1000splitHere46","142881splitHere46","jar"
"1001splitHere46","142881splitHere46","/lib"
"1002splitHere46","142881splitHere46","TGGL jar"
"1003splitHere46","142881splitHere46","/src"
"1004splitHere46","142881splitHere46","jar files"
"1005splitHere46","142881splitHere46","/lib"
"1006splitHere46","142881splitHere46","right click"
"1007splitHere46","142881splitHere46","jar file"
"1008splitHere46","142881splitHere46","Build Path->Add"
"1009splitHere46","143091splitHere46","Foo"
"1010splitHere46","143091splitHere46","Bar"
"1011splitHere46","143091splitHere46","AbstractFoo"
"1012splitHere46","143091splitHere46","Foo"
"1013splitHere46","143091splitHere46","Bar"
"1014splitHere46","143091splitHere46","AbstractFoo"
"1015splitHere46","143091splitHere46","if"
"1016splitHere46","143091splitHere46","if (foo instanceof Bar) {<newline46mondego>    // Do Bar-specific things<newline46mondego>}<newline46mondego>"
"1017splitHere46","143091splitHere46","class Bar extends AbstractFoo {<newline46mondego>    public void specialOp() {<newline46mondego>        // Do Bar-specific things<newline46mondego>    }<newline46mondego>}<newline46mondego><newline46mondego>// ...<newline46mondego>foo.specialOp();<newline46mondego>"
"1018splitHere46","143091splitHere46","Foo"
"1019splitHere46","143091splitHere46","if"
"1020splitHere46","143136splitHere46","sed -e 's/<a/<t:a/g' -e 's/<\/a>/<\/t:a>/g' old/x.jsp > new/x.jsp<newline46mondego>"
"1021splitHere46","143298splitHere46","enum"
"1022splitHere46","143298splitHere46","enum"
"1023splitHere46","143298splitHere46","enum"
"1024splitHere46","143298splitHere46","class"
"1025splitHere46","143298splitHere46","Constants"
"1026splitHere46","143298splitHere46","public enum Constants {<newline46mondego>  ONE,<newline46mondego>  TWO,<newline46mondego>  THREE;<newline46mondego>}<newline46mondego>"
"1027splitHere46","143298splitHere46","enum"
"1028splitHere46","143298splitHere46","class"
"1029splitHere46","143298splitHere46","javap"
"1030splitHere46","143298splitHere46","Compiled from <doubleQuotes46>Constants.java<doubleQuotes46><newline46mondego>public final class Constants extends java.lang.Enum{<newline46mondego>    public static final Constants ONE;<newline46mondego>    public static final Constants TWO;<newline46mondego>    public static final Constants THREE;<newline46mondego>    public static Constants[] values();<newline46mondego>    public static Constants valueOf(java.lang.String);<newline46mondego>    static {};<newline46mondego>}<newline46mondego>"
"1031splitHere46","143298splitHere46","enum"
"1032splitHere46","143298splitHere46","Constants"
"1033splitHere46","143298splitHere46","enum"
"1034splitHere46","143298splitHere46","javap"
"1035splitHere46","143298splitHere46","new Constants(String)"
"1036splitHere46","143298splitHere46","enum"
"1037splitHere46","143628splitHere46","throw"
"1038splitHere46","143628splitHere46","try"
"1039splitHere46","144121splitHere46","using System;<newline46mondego>using System.Collections.Generic;<newline46mondego>using System.Text;<newline46mondego>using System.Management;<newline46mondego><newline46mondego>namespace GetSMART<newline46mondego>{<newline46mondego>    class Program<newline46mondego>    {<newline46mondego>    	static void Main(string[] args)<newline46mondego>    	{<newline46mondego>    		ManagementObjectSearcher searcher = <newline46mondego>    		new ManagementObjectSearcher(<newline46mondego>    			<doubleQuotes46>root\\WMI<doubleQuotes46>,<newline46mondego>    			<doubleQuotes46>SELECT * FROM MSStorageDriver_ATAPISmartData<doubleQuotes46><newline46mondego>    		);<newline46mondego><newline46mondego>    		foreach (ManagementObject item in searcher.Get())<newline46mondego>    		{<newline46mondego>    			foreach( PropertyData prop in item.Properties )<newline46mondego>    			{<newline46mondego>    			Console.WriteLine(<doubleQuotes46>{0} = {1}<doubleQuotes46>,<newline46mondego>    				prop.Name, prop.Value);<newline46mondego>    			}<newline46mondego>    		}<newline46mondego><newline46mondego>    		Console.ReadLine();<newline46mondego>    	}<newline46mondego>    }<newline46mondego>}<newline46mondego>"
"1040splitHere46","144142splitHere46","setDefaultLookAndFeelDecorated"
"1041splitHere46","144142splitHere46","UIManager.setLookAndFeel((LookAndFeel) Class.forName(UIManager.getCrossPlatformLookAndFeelClassName()).newInstance());<newline46mondego>"
"1042splitHere46","144184splitHere46","Job"
"1043splitHere46","144184splitHere46","...<newline46mondego>public static final String MDC_COUNTRY = <doubleQuotes46>com.y.foo.Country<doubleQuotes46>;<newline46mondego>public void execute(JobExecutionContext context)<newline46mondego>  /* Just guessing that you have the country in your JobContext. */<newline46mondego>  MDC.put(MDC_COUNTRY, context.get(MDC_COUNTRY));<newline46mondego>  try {<newline46mondego>    /* Perform your job here. */<newline46mondego>    ...<newline46mondego>  } finally {<newline46mondego>    MDC.remove(MDC_COUNTRY);<newline46mondego>  }<newline46mondego>}<newline46mondego>...<newline46mondego>"
"1044splitHere46","144184splitHere46","package com.y.log4j;<newline46mondego><newline46mondego>import org.apache.log4j.spi.LoggingEvent;<newline46mondego><newline46mondego>/**<newline46mondego> * This is a general purpose filter. If its <doubleQuotes46>value<doubleQuotes46> property is null, <newline46mondego> * it requires only that the specified key be set in the MDC. If its <newline46mondego> * value is not null, it further requires that the value in the MDC <newline46mondego> * is equal.<newline46mondego> */<newline46mondego>public final class ContextFilter extends org.apache.log4j.spi.Filter {<newline46mondego><newline46mondego>  public int decide(LoggingEvent event) {<newline46mondego>    Object ctx = event.getMDC(key);<newline46mondego>    if (value == null)<newline46mondego>      return (ctx != null) ? NEUTRAL : DENY;<newline46mondego>    else<newline46mondego>      return value.equals(ctx) ? NEUTRAL : DENY;<newline46mondego>  }<newline46mondego><newline46mondego>  private String key;<newline46mondego>  private String value;<newline46mondego><newline46mondego>  public void setContextKey(String key) { this.key = key; }<newline46mondego>  public String getContextKey() { return key; }<newline46mondego>  public void setValue(String value) { this.value = value; }<newline46mondego>  public String getValue() { return value; }<newline46mondego><newline46mondego>}<newline46mondego>"
"1045splitHere46","144184splitHere46","<appender name=<doubleQuotes46>fr<doubleQuotes46> class=<doubleQuotes46>org.apache.log4j.FileAppender<doubleQuotes46>><newline46mondego>  <param name=<doubleQuotes46>file<doubleQuotes46> value=<doubleQuotes46>france.log<doubleQuotes46>/><newline46mondego>  ...<newline46mondego>  <filter class=<doubleQuotes46>com.y.log4j.ContextFilter<doubleQuotes46>><newline46mondego>    <param name=<doubleQuotes46>key<doubleQuotes46> value=<doubleQuotes46>com.y.foo.Country<doubleQuotes46> /><newline46mondego>    <param name=<doubleQuotes46>value<doubleQuotes46> value=<doubleQuotes46>fr<doubleQuotes46> /><newline46mondego>  </filter><newline46mondego></appender><newline46mondego>"
"1046splitHere46","144499splitHere46","import java.util.*;<newline46mondego><newline46mondego>public class Foo {<newline46mondego>    public static void main(String[] args) {<newline46mondego>        Map<String, List<String>> m = new HashMap<String, List<String>>();<newline46mondego>        List<String> l = new LinkedList<String>();<newline46mondego>        l.add(<doubleQuotes46>col_value_1<doubleQuotes46>);<newline46mondego>        l.add(<doubleQuotes46>col_value_2<doubleQuotes46>);<newline46mondego>        //and so on<newline46mondego>        m.put(<doubleQuotes46>col_name_1<doubleQuotes46>,l); //repeat for the rest of the colnames<newline46mondego><newline46mondego>       //then, to get it you do<newline46mondego><newline46mondego>       List<String> rl = m.get(<doubleQuotes46>col_name_1<doubleQuotes46>);<newline46mondego><newline46mondego>    }<newline46mondego>}<newline46mondego>"
"1047splitHere46","144652splitHere46","public class TreeNode<T><newline46mondego>{<newline46mondego>    private LinkedList<TreeNode<T>> children = new LinkedList<TreeNode<T>>();<newline46mondego>    public T value { get; set; }<newline46mondego><newline46mondego>    public TreeNode(T value)<newline46mondego>    {<newline46mondego>        this.value = value;<newline46mondego>    }<newline46mondego>    public LinkedList<TreeNode<T>> GetChildren()<newline46mondego>    {<newline46mondego>        return children;<newline46mondego>    }<newline46mondego>}<newline46mondego>"
"1048splitHere46","144894splitHere46","public String getStringForDates(ArrayList<java.util.Date> dates);<newline46mondego>"
"1049splitHere46","144894splitHere46","public Object getObjectForString(String str);<newline46mondego>"
"1050splitHere46","145173splitHere46","import java.lang.reflect.InvocationTargetException;<newline46mondego>import java.util.Map;<newline46mondego>import java.util.regex.Matcher;<newline46mondego>import java.util.regex.Pattern;<newline46mondego><newline46mondego>import org.apache.commons.beanutils.BeanUtils;<newline46mondego><newline46mondego>public class BeanUtilsReplacer<newline46mondego>{<newline46mondego>    private static Pattern lookupPattern = Pattern.compile(<doubleQuotes46>\\$\\{([^\\}]+)\\}<doubleQuotes46>);<newline46mondego><newline46mondego>    public static String replaceString(String input, Map<String, Object> context)<newline46mondego>        throws IllegalAccessException, InvocationTargetException, NoSuchMethodException<newline46mondego>    {<newline46mondego>        int position = 0;<newline46mondego>        StringBuffer result = new StringBuffer();<newline46mondego><newline46mondego>        Matcher m = lookupPattern.matcher(input);<newline46mondego>        while (m.find())<newline46mondego>        {<newline46mondego>            result.append(input.substring(position, m.start()));<newline46mondego>            result.append(BeanUtils.getNestedProperty(context, m.group(1)));<newline46mondego>            position = m.end();<newline46mondego>        }<newline46mondego><newline46mondego>        if (position == 0)<newline46mondego>        {<newline46mondego>            return input;<newline46mondego>        }<newline46mondego>        else<newline46mondego>        {<newline46mondego>            result.append(input.substring(position));<newline46mondego>            return result.toString();<newline46mondego>        }<newline46mondego>    }<newline46mondego>}<newline46mondego>"
"1051splitHere46","145173splitHere46","Map<String, Object> context = new HashMap<String, Object>();<newline46mondego>context.put(<doubleQuotes46>user<doubleQuotes46>, user);<newline46mondego>System.out.println(BeanUtilsReplacer.replaceString(s, context));<newline46mondego>"
"1052splitHere46","145516splitHere46","y.Length"
"1053splitHere46","145516splitHere46","x.Substring(0, y.Length).Equals(y)"
"1054splitHere46","145716splitHere46","if (Enhancer.isEnhanced(getClass())) {<newline46mondego>    currClass = UnEnhancer.unenhance(getClass());<newline46mondego> } else {<newline46mondego>    // else, let's get the original class directly<newline46mondego>    currClass = getClass();<newline46mondego> }<newline46mondego>"
"1055splitHere46","145945splitHere46","jmap -dump:format=b,file=heap.bin <pid><newline46mondego>"
"1056splitHere46","145945splitHere46","jmap -histo <pid><newline46mondego>"
"1057splitHere46","146208splitHere46","net.sourceforge.napkinlaf.NapkinLookAndFeel"
"1058splitHere46","146208splitHere46","napkinlaf.jar"
"1059splitHere46","146208splitHere46","lib/ext"
"1060splitHere46","146208splitHere46","lib/swing.properties"
"1061splitHere46","146408splitHere46","public PrintString printf(String format, Object... args);<newline46mondego>"
"1062splitHere46","146408splitHere46","[]"
"1063splitHere46","146408splitHere46","..."
"1064splitHere46","146408splitHere46","out.printf(<doubleQuotes46>%s:%s<doubleQuotes46>, a, b);<newline46mondego>"
"1065splitHere46","146408splitHere46","out.printf(<doubleQuotes46>%s:%s<doubleQuotes46>, new Object[] { a, b });<newline46mondego>"
"1066splitHere46","146408splitHere46","out.printf(<doubleQuotes46>%s:%s<doubleQuotes46>, things);<newline46mondego>"
"1067splitHere46","146408splitHere46","out.printf(<doubleQuotes46>%s:%s<doubleQuotes46>, things.toArray());<newline46mondego>"
"1068splitHere46","146662splitHere46","public class JavaClass{<newline46mondego>  protected JavaClass(int x){}<newline46mondego>  public void main(String[] args){<newline46mondego>  }<newline46mondego>}<newline46mondego>"
"1069splitHere46","147461splitHere46","java.awt.Event"
"1070splitHere46","147461splitHere46","com.mycompany.calendar.Event"
"1071splitHere46","147461splitHere46","java.awt.Event"
"1072splitHere46","147461splitHere46","com.mycompany.calendar.Event"
"1073splitHere46","147461splitHere46",".*"
"1074splitHere46","147461splitHere46","com.mycompany.calendar.Event"
"1075splitHere46","147890splitHere46","<?xml version=<doubleQuotes46>1.0<doubleQuotes46> encoding=<doubleQuotes46>UTF-8<doubleQuotes46>?><newline46mondego><newline46mondego><project name=<doubleQuotes46>project<doubleQuotes46> default=<doubleQuotes46>default<doubleQuotes46>><newline46mondego><newline46mondego>    <target name=<doubleQuotes46>default<doubleQuotes46> depends=<doubleQuotes46>javaCheck<doubleQuotes46> if=<doubleQuotes46>isJava6<doubleQuotes46>><newline46mondego>        <echo message=<doubleQuotes46>Hello, World!<doubleQuotes46> /><newline46mondego>    </target><newline46mondego><newline46mondego>    <target name=<doubleQuotes46>javaCheck<doubleQuotes46>><newline46mondego>        <echo message=<doubleQuotes46>ant.java.version=${ant.java.version}<doubleQuotes46> /><newline46mondego>        <condition property=<doubleQuotes46>isJava6<doubleQuotes46>><newline46mondego>        	<equals arg1=<doubleQuotes46>${ant.java.version}<doubleQuotes46> arg2=<doubleQuotes46>1.6<doubleQuotes46> /><newline46mondego>        </condition><newline46mondego>    </target><newline46mondego><newline46mondego></project><newline46mondego>"
"1076splitHere46","147898splitHere46","repaint()"
"1077splitHere46","148122splitHere46","Foo"
"1078splitHere46","148122splitHere46","abstract class AbstractFoo {<newline46mondego>    public String value() { return <doubleQuotes46>Foo<doubleQuotes46>; }<newline46mondego><newline46mondego>    public AbstractFoo doStuff() {<newline46mondego>        // Logic logic logic<newline46mondego>        return hook();<newline46mondego>    }<newline46mondego><newline46mondego>    protected abstract AbstractFoo hook();<newline46mondego>}<newline46mondego><newline46mondego>class Foo extends AbstractFoo {<newline46mondego>    protected AbstractFoo hook() { return new Foo(); }<newline46mondego>}<newline46mondego><newline46mondego>class Bar extends AbstractFoo {<newline46mondego>    public String value() { return <doubleQuotes46>Bar<doubleQuotes46>; }<newline46mondego><newline46mondego>    protected AbstractFoo hook() { return new Bar(); }<newline46mondego>}<newline46mondego><newline46mondego>new Bar().doStuff().value(); // Returns 'Bar'!<newline46mondego>"
"1079splitHere46","148135splitHere46","BufferedInputStream bis = new BufferedInputStream(inputStream);<newline46mondego>bis.mark(2);<newline46mondego>int byte1 = bis.read();<newline46mondego>int byte2 = bis.read();<newline46mondego>bis.reset();<newline46mondego>// note: you must continue using the BufferedInputStream instead of the inputStream<newline46mondego>"
"1080splitHere46","148390splitHere46","URL.setURLStreamHandlerFactory(...)<newline46mondego>"
"1081splitHere46","148949splitHere46","public static <T> T as(Class<T> clazz, Object o){<newline46mondego>	if(clazz.isInstance(o)){<newline46mondego>		return clazz.cast(o);<newline46mondego>	}<newline46mondego>	return null;<newline46mondego>}<newline46mondego><newline46mondego>as(A.class, new Object()) --> null<newline46mondego>as(B.class, new B())  --> B<newline46mondego>"
"1082splitHere46","149167splitHere46","QueueReceiver receiver = session.createReceiver(myQueue, <doubleQuotes46>JMSCorrelationID='theid'<doubleQuotes46>);<newline46mondego>"
"1083splitHere46","149167splitHere46","receiver.receive()<newline46mondego>"
"1084splitHere46","149167splitHere46","receiver.setListener(myListener);<newline46mondego>"
"1085splitHere46","149610splitHere46","public class Main {<newline46mondego><newline46mondego>    private static final int NUM_TESTS = 100;<newline46mondego>    private static int ITERATIONS = 1000000;<newline46mondego>    // time counters<newline46mondego>    private static long inTime = 0L;<newline46mondego>    private static long aroundTime = 0L;<newline46mondego><newline46mondego>    public static void main(String[] args) {<newline46mondego>        for (int i = 0; i < NUM_TESTS; i++) {<newline46mondego>            test();<newline46mondego>            ITERATIONS += 1; // so the tests don't always return the same number<newline46mondego>        }<newline46mondego>        System.out.println(<doubleQuotes46>Inside loop: <doubleQuotes46> + (inTime/1000000.0) + <doubleQuotes46> ms.<doubleQuotes46>);<newline46mondego>        System.out.println(<doubleQuotes46>Around loop: <doubleQuotes46> + (aroundTime/1000000.0) + <doubleQuotes46> ms.<doubleQuotes46>);<newline46mondego>    }<newline46mondego>    public static void test() {<newline46mondego>        aroundTime += testAround();<newline46mondego>        inTime += testIn();<newline46mondego>    }<newline46mondego>    public static long testIn() {<newline46mondego>        long start = System.nanoTime();<newline46mondego>        Integer i = tryInLoop();<newline46mondego>        long ret = System.nanoTime() - start;<newline46mondego>        System.out.println(i); // don't optimize it away<newline46mondego>        return ret;<newline46mondego>    }<newline46mondego>    public static long testAround() {<newline46mondego>        long start = System.nanoTime();<newline46mondego>        Integer i = tryAroundLoop();<newline46mondego>        long ret = System.nanoTime() - start;<newline46mondego>        System.out.println(i); // don't optimize it away<newline46mondego>        return ret;<newline46mondego>    }<newline46mondego>    public static Integer tryInLoop() {<newline46mondego>        int count = 0;<newline46mondego>        for (int i = 0; i < ITERATIONS; i++) {<newline46mondego>            try {<newline46mondego>                count = Integer.parseInt(Integer.toString(count)) + 1;<newline46mondego>            } catch (NumberFormatException ex) {<newline46mondego>                return null;<newline46mondego>            }<newline46mondego>        }<newline46mondego>        return count;<newline46mondego>    }<newline46mondego>    public static Integer tryAroundLoop() {<newline46mondego>        int count = 0;<newline46mondego>        try {<newline46mondego>            for (int i = 0; i < ITERATIONS; i++) {<newline46mondego>                count = Integer.parseInt(Integer.toString(count)) + 1;<newline46mondego>            }<newline46mondego>            return count;<newline46mondego>        } catch (NumberFormatException ex) {<newline46mondego>            return null;<newline46mondego>        }<newline46mondego>    }<newline46mondego>}<newline46mondego>"
"1086splitHere46","149971splitHere46","<launch4jConfig><newline46mondego>  <dontWrapJar>true</dontWrapJar><newline46mondego>  <headerType>gui</headerType><newline46mondego>  <jar>rpgam.jar</jar><newline46mondego>  <outfile>rpgam.exe</outfile><newline46mondego>  <errTitle></errTitle><newline46mondego>  <cmdLine></cmdLine><newline46mondego>  <chdir>.</chdir><newline46mondego>  <priority>normal</priority><newline46mondego>  <downloadUrl>http://www.rpgaudiomixer.com/</downloadUrl><newline46mondego>  <supportUrl></supportUrl><newline46mondego>  <customProcName>false</customProcName><newline46mondego>  <stayAlive>false</stayAlive><newline46mondego>  <manifest></manifest><newline46mondego>  <icon></icon><newline46mondego>  <jre><newline46mondego>    <path></path><newline46mondego>    <minVersion>1.5.0</minVersion><newline46mondego>    <maxVersion></maxVersion><newline46mondego>    <jdkPreference>preferJre</jdkPreference><newline46mondego>  </jre><newline46mondego>  <splash><newline46mondego>    <file>..\images\splash.bmp</file><newline46mondego>    <waitForWindow>true</waitForWindow><newline46mondego>    <timeout>60</timeout><newline46mondego>    <timeoutErr>true</timeoutErr><newline46mondego>  </splash><newline46mondego></launch4jConfig><newline46mondego>"
"1087splitHere46","149971splitHere46","; The name of the installer<newline46mondego>Name <doubleQuotes46>RPG Audio Mixer<doubleQuotes46><newline46mondego><newline46mondego>!ifndef VERSION<newline46mondego>    !define VERSION A.B.C<newline46mondego>!endif<newline46mondego><newline46mondego>; The file to write<newline46mondego>outfile <doubleQuotes46>..\dist\installers\windows\rpgam-${VERSION}.exe<doubleQuotes46><newline46mondego><newline46mondego>; The default installation directory<newline46mondego>InstallDir <doubleQuotes46>$PROGRAMFILES\RPG Audio Mixer<doubleQuotes46><newline46mondego><newline46mondego>; Registry key to check for directory (so if you install again, it will <newline46mondego>; overwrite the old one automatically)<newline46mondego>InstallDirRegKey HKLM <doubleQuotes46>Software\RPG_Audio_Mixer<doubleQuotes46> <doubleQuotes46>Install_Dir<doubleQuotes46><newline46mondego><newline46mondego># create a default section.<newline46mondego>section <doubleQuotes46>RPG Audio Mixer<doubleQuotes46><newline46mondego><newline46mondego>    SectionIn RO<newline46mondego><newline46mondego>    ; Set output path to the installation directory.<newline46mondego>    SetOutPath $INSTDIR<newline46mondego>    File /r <doubleQuotes46>..\dist\layout\windows\<doubleQuotes46><newline46mondego><newline46mondego>    ; Write the installation path into the registry<newline46mondego>    WriteRegStr HKLM SOFTWARE\RPG_Audio_Mixer <doubleQuotes46>Install_Dir<doubleQuotes46> <doubleQuotes46>$INSTDIR<doubleQuotes46><newline46mondego><newline46mondego>    ; Write the uninstall keys for Windows<newline46mondego>    WriteRegStr HKLM <doubleQuotes46>Software\Microsoft\Windows\CurrentVersion\Uninstall\RPGAudioMixer<doubleQuotes46> <doubleQuotes46>DisplayName<doubleQuotes46> <doubleQuotes46>RPG Audio Mixer<doubleQuotes46><newline46mondego>    WriteRegStr HKLM <doubleQuotes46>Software\Microsoft\Windows\CurrentVersion\Uninstall\RPGAudioMixer<doubleQuotes46> <doubleQuotes46>UninstallString<doubleQuotes46> '<doubleQuotes46>$INSTDIR\uninstall.exe<doubleQuotes46>'<newline46mondego>    WriteRegDWORD HKLM <doubleQuotes46>Software\Microsoft\Windows\CurrentVersion\Uninstall\RPGAudioMixer<doubleQuotes46> <doubleQuotes46>NoModify<doubleQuotes46> 1<newline46mondego>    WriteRegDWORD HKLM <doubleQuotes46>Software\Microsoft\Windows\CurrentVersion\Uninstall\RPGAudioMixer<doubleQuotes46> <doubleQuotes46>NoRepair<doubleQuotes46> 1<newline46mondego>    WriteUninstaller <doubleQuotes46>uninstall.exe<doubleQuotes46><newline46mondego><newline46mondego>    ; read the value from the registry into the $0 register<newline46mondego>    ;readRegStr $0 HKLM <doubleQuotes46>SOFTWARE\JavaSoft\Java Runtime Environment<doubleQuotes46> CurrentVersion<newline46mondego><newline46mondego>    ; print the results in a popup message box<newline46mondego>    ;messageBox MB_OK <doubleQuotes46>version: $0<doubleQuotes46><newline46mondego><newline46mondego>sectionEnd<newline46mondego><newline46mondego>Section <doubleQuotes46>Start Menu Shortcuts<doubleQuotes46><newline46mondego>  CreateDirectory <doubleQuotes46>$SMPROGRAMS\RPG Audio Mixer<doubleQuotes46><newline46mondego>  CreateShortCut <doubleQuotes46>$SMPROGRAMS\RPG Audio Mixer\Uninstall.lnk<doubleQuotes46> <doubleQuotes46>$INSTDIR\uninstall.exe<doubleQuotes46> <doubleQuotes46><doubleQuotes46> <doubleQuotes46>$INSTDIR\uninstall.exe<doubleQuotes46> 0<newline46mondego>  CreateShortCut <doubleQuotes46>$SMPROGRAMS\RPG AUdio Mixer\RPG Audio Mixer.lnk<doubleQuotes46> <doubleQuotes46>$INSTDIR\rpgam.exe<doubleQuotes46> <doubleQuotes46><doubleQuotes46> <doubleQuotes46>$INSTDIR\rpgam.exe<doubleQuotes46> 0<newline46mondego>SectionEnd<newline46mondego><newline46mondego>Section <doubleQuotes46>Uninstall<doubleQuotes46><newline46mondego><newline46mondego>    ; Remove registry keys<newline46mondego>    DeleteRegKey HKLM <doubleQuotes46>Software\Microsoft\Windows\CurrentVersion\Uninstall\RPGAudioMixer<doubleQuotes46><newline46mondego>    DeleteRegKey HKLM SOFTWARE\RPG_Audio_Mixer<newline46mondego><newline46mondego>    ; Remove files and uninstaller<newline46mondego>    Delete $INSTDIR\rpgam.exe<newline46mondego>    Delete $INSTDIR\uninstall.exe<newline46mondego><newline46mondego>    ; Remove shortcuts, if any<newline46mondego>    Delete <doubleQuotes46>$SMPROGRAMS\RPG Audio Mixer\*.*<doubleQuotes46><newline46mondego><newline46mondego>    ; Remove directories used<newline46mondego>    RMDir <doubleQuotes46>$SMPROGRAMS\RPG Audio Mixer<doubleQuotes46><newline46mondego>    RMDir <doubleQuotes46>$INSTDIR<doubleQuotes46><newline46mondego><newline46mondego>SectionEnd<newline46mondego>"
"1088splitHere46","149971splitHere46","<property name=<doubleQuotes46>launch4j.dir<doubleQuotes46> location=<doubleQuotes46>vendor/launch4j<doubleQuotes46> /><newline46mondego><taskdef name=<doubleQuotes46>launch4j<doubleQuotes46> <newline46mondego>    classname=<doubleQuotes46>net.sf.launch4j.ant.Launch4jTask<doubleQuotes46><newline46mondego>    classpath=<doubleQuotes46>${launch4j.dir}/launch4j.jar:${launch4j.dir}/lib/xstream.jar<doubleQuotes46> /><newline46mondego>"
"1089splitHere46","149971splitHere46","<target name=<doubleQuotes46>executable-windows<doubleQuotes46> depends=<doubleQuotes46>jar<doubleQuotes46> description=<doubleQuotes46>Create Windows executable (EXE)<doubleQuotes46>><newline46mondego>    <launch4j configFile=<doubleQuotes46>scripts/launch4j.xml<doubleQuotes46> outfile=<doubleQuotes46>${exeFile}<doubleQuotes46> /><newline46mondego></target><newline46mondego>"
"1090splitHere46","149971splitHere46","<target name=<doubleQuotes46>installer-windows<doubleQuotes46> depends=<doubleQuotes46>executable-windows<doubleQuotes46> description=<doubleQuotes46>Create the installer for Windows (EXE)<doubleQuotes46>><newline46mondego>    <!-- Lay out files needed for building the installer --><newline46mondego>    <mkdir dir=<doubleQuotes46>${windowsLayoutDirectory}<doubleQuotes46> /><newline46mondego>    <copy file=<doubleQuotes46>${jarFile}<doubleQuotes46> todir=<doubleQuotes46>${windowsLayoutDirectory}<doubleQuotes46> /><newline46mondego>    <copy todir=<doubleQuotes46>${windowsLayoutDirectory}/lib<doubleQuotes46>><newline46mondego>        <fileset dir=<doubleQuotes46>${libraryDirectory}<doubleQuotes46> /><newline46mondego>        <fileset dir=<doubleQuotes46>${windowsLibraryDirectory}<doubleQuotes46> /><newline46mondego>    </copy><newline46mondego>    <copy todir=<doubleQuotes46>${windowsLayoutDirectory}/icons<doubleQuotes46>><newline46mondego>         <fileset dir=<doubleQuotes46>${iconsDirectory}<doubleQuotes46> /><newline46mondego>    </copy><newline46mondego>    <copy todir=<doubleQuotes46>${windowsLayoutDirectory}<doubleQuotes46> file=<doubleQuotes46>${exeFile}<doubleQuotes46> /><newline46mondego><newline46mondego>    <mkdir dir=<doubleQuotes46>${windowsInstallerDirectory}<doubleQuotes46> /><newline46mondego><newline46mondego>    <!-- Build the installer using NSIS --><newline46mondego>    <exec executable=<doubleQuotes46>vendor/nsis/makensis.exe<doubleQuotes46>><newline46mondego>        <arg value=<doubleQuotes46>/DVERSION=${version}<doubleQuotes46> /><newline46mondego>        <arg value=<doubleQuotes46>scripts/rpgam-setup.nsi<doubleQuotes46> /><newline46mondego>    </exec><newline46mondego></target><newline46mondego>"
"1091splitHere46","150181splitHere46","// Load input stream into keystore<newline46mondego>    keystore.load(is, password.toCharArray());<newline46mondego><newline46mondego>    // List the aliases<newline46mondego>    Enumeration enum = keystore.aliases();<newline46mondego>    for (; enum.hasMoreElements(); ) {<newline46mondego>        String alias = (String)enum.nextElement();<newline46mondego><newline46mondego>        // Does alias refer to a private key?<newline46mondego>        boolean b = keystore.isKeyEntry(alias);<newline46mondego><newline46mondego>        // Does alias refer to a trusted certificate?<newline46mondego>        b = keystore.isCertificateEntry(alias);<newline46mondego>    }<newline46mondego>"
"1092splitHere46","150181splitHere46","import java.io.FileInputStream;<newline46mondego>import java.security.Key;<newline46mondego>import java.security.KeyStore;<newline46mondego>import sun.misc.BASE64Encoder;<newline46mondego><newline46mondego>public class DumpPrivateKey {<newline46mondego>     /**<newline46mondego>     * Provides the missing functionality of keytool<newline46mondego>     * that Apache needs for SSLCertificateKeyFile.<newline46mondego>     *<newline46mondego>     * @param args  <ul><newline46mondego>     *              <li> [0] Keystore filename.<newline46mondego>     *              <li> [1] Keystore password.<newline46mondego>     *              <li> [2] alias<newline46mondego>     *              </ul><newline46mondego>     */<newline46mondego>    static public void main(String[] args)<newline46mondego>    throws Exception {<newline46mondego>        if(args.length < 3) {<newline46mondego>          throw new IllegalArgumentException(<doubleQuotes46>expected args: Keystore filename, Keystore password, alias, <key password: default same tha<newline46mondego>n keystore<doubleQuotes46>);<newline46mondego>        }<newline46mondego>        final String keystoreName = args[0];<newline46mondego>        final String keystorePassword = args[1];<newline46mondego>        final String alias = args[2];<newline46mondego>        final String keyPassword = getKeyPassword(args,keystorePassword);<newline46mondego>        KeyStore ks = KeyStore.getInstance(<doubleQuotes46>jks<doubleQuotes46>);<newline46mondego>        ks.load(new FileInputStream(keystoreName), keystorePassword.toCharArray());<newline46mondego>        Key key = ks.getKey(alias, keyPassword.toCharArray());<newline46mondego>        String b64 = new BASE64Encoder().encode(key.getEncoded());<newline46mondego>        System.out.println(<doubleQuotes46>-----BEGIN PRIVATE KEY-----<doubleQuotes46>);<newline46mondego>        System.out.println(b64);<newline46mondego>        System.out.println(<doubleQuotes46>-----END PRIVATE KEY-----<doubleQuotes46>);<newline46mondego>    }<newline46mondego>    private static String getKeyPassword(final String[] args, final String keystorePassword)<newline46mondego>    {<newline46mondego>       String keyPassword = keystorePassword; // default case<newline46mondego>       if(args.length == 4) {<newline46mondego>         keyPassword = args[3];<newline46mondego>       }<newline46mondego>       return keyPassword;<newline46mondego>    }<newline46mondego>}<newline46mondego>"
"1093splitHere46","150181splitHere46","javac -classpath .:commons-codec-1.4/commons-codec-1.4.jar DumpPrivateKey.java<newline46mondego>"
"1094splitHere46","150181splitHere46","import java.io.FileInputStream;<newline46mondego>import java.security.Key;<newline46mondego>import java.security.KeyStore;<newline46mondego>//import sun.misc.BASE64Encoder;<newline46mondego>import org.apache.commons.codec.binary.Base64;<newline46mondego><newline46mondego>public class DumpPrivateKey {<newline46mondego>     /**<newline46mondego>     * Provides the missing functionality of keytool<newline46mondego>     * that Apache needs for SSLCertificateKeyFile.<newline46mondego>     *<newline46mondego>     * @param args  <ul><newline46mondego>     *              <li> [0] Keystore filename.<newline46mondego>     *              <li> [1] Keystore password.<newline46mondego>     *              <li> [2] alias<newline46mondego>     *              </ul><newline46mondego>     */<newline46mondego>    static public void main(String[] args)<newline46mondego>    throws Exception {<newline46mondego>        if(args.length < 3) {<newline46mondego>          throw new IllegalArgumentException(<doubleQuotes46>expected args: Keystore filename, Keystore password, alias, <key password: default same tha<newline46mondego>n keystore<doubleQuotes46>);<newline46mondego>        }<newline46mondego>        final String keystoreName = args[0];<newline46mondego>        final String keystorePassword = args[1];<newline46mondego>        final String alias = args[2];<newline46mondego>        final String keyPassword = getKeyPassword(args,keystorePassword);<newline46mondego>        KeyStore ks = KeyStore.getInstance(<doubleQuotes46>jks<doubleQuotes46>);<newline46mondego>        ks.load(new FileInputStream(keystoreName), keystorePassword.toCharArray());<newline46mondego>        Key key = ks.getKey(alias, keyPassword.toCharArray());<newline46mondego>        //String b64 = new BASE64Encoder().encode(key.getEncoded());<newline46mondego>        String b64 = new String(Base64.encodeBase64(key.getEncoded(),true));<newline46mondego>        System.out.println(<doubleQuotes46>-----BEGIN PRIVATE KEY-----<doubleQuotes46>);<newline46mondego>        System.out.println(b64);<newline46mondego>        System.out.println(<doubleQuotes46>-----END PRIVATE KEY-----<doubleQuotes46>);<newline46mondego>    }<newline46mondego>    private static String getKeyPassword(final String[] args, final String keystorePassword)<newline46mondego>    {<newline46mondego>       String keyPassword = keystorePassword; // default case<newline46mondego>       if(args.length == 4) {<newline46mondego>         keyPassword = args[3];<newline46mondego>       }<newline46mondego>       return keyPassword;<newline46mondego>    }<newline46mondego>}<newline46mondego>"
"1095splitHere46","150181splitHere46","java -classpath .:commons-codec-1.4/commons-codec-1.4.jar DumpPrivateKey $HOME/.keystore changeit tomcat<newline46mondego>"
"1096splitHere46","150713splitHere46","try {<newline46mondego>    String fileName = <doubleQuotes46>file.xls<doubleQuotes46>;<newline46mondego>    WritableWorkbook workbook = Workbook.createWorkbook(new File(fileName));<newline46mondego>    workbook.createSheet(<doubleQuotes46>Sheet1<doubleQuotes46>, 0);<newline46mondego>    workbook.createSheet(<doubleQuotes46>Sheet2<doubleQuotes46>, 1);<newline46mondego>    workbook.createSheet(<doubleQuotes46>Sheet3<doubleQuotes46>, 2);<newline46mondego>    workbook.write();<newline46mondego>    workbook.close();<newline46mondego>} catch (WriteException e) {<newline46mondego><newline46mondego>}<newline46mondego>"
"1097splitHere46","151463splitHere46","A"
"1098splitHere46","151463splitHere46","Current"
"1099splitHere46","151463splitHere46","A"
"1100splitHere46","151463splitHere46","JavaVM.framework"
"1101splitHere46","151463splitHere46","CurrentJDK"
"1102splitHere46","151932splitHere46","Lock l = new Lock();<newline46mondego>l.lock();  // Call the lock before calling try.<newline46mondego>try {<newline46mondego>    // Do some processing.<newline46mondego>    // All code must go in here including break, return etc.<newline46mondego>    return something;<newline46mondego>} finally {<newline46mondego>    l.unlock();<newline46mondego>}<newline46mondego>"
"1103splitHere46","152116splitHere46","isConnected"
"1104splitHere46","152116splitHere46","true"
"1105splitHere46","152116splitHere46","public class MyServer {<newline46mondego>    public static final int PORT = 12345;<newline46mondego>    public static void main(String[] args) throws IOException, InterruptedException {<newline46mondego>        ServerSocket ss = ServerSocketFactory.getDefault().createServerSocket(PORT);<newline46mondego>        Socket s = ss.accept();<newline46mondego>        Thread.sleep(5000);<newline46mondego>        ss.close();<newline46mondego>        s.close();<newline46mondego>    }<newline46mondego>}<newline46mondego><newline46mondego>public class MyClient {<newline46mondego>    public static void main(String[] args) throws IOException, InterruptedException {<newline46mondego>        Socket s = SocketFactory.getDefault().createSocket(<doubleQuotes46>localhost<doubleQuotes46>, MyServer.PORT);<newline46mondego>        System.out.println(<doubleQuotes46> connected: <doubleQuotes46> + s.isConnected());<newline46mondego>        Thread.sleep(10000);<newline46mondego>        System.out.println(<doubleQuotes46> connected: <doubleQuotes46> + s.isConnected());<newline46mondego>    }<newline46mondego>}<newline46mondego>"
"1106splitHere46","152116splitHere46","IOException"
"1107splitHere46","152235splitHere46","/**<newline46mondego> * @deprecated<newline46mondego> * This method will be removed after Halloween!<newline46mondego> * @see #newLocationForFunctionality<newline46mondego> */<newline46mondego>"
"1108splitHere46","152348splitHere46","class Test {<newline46mondego>    public Test(final int a, final int b) {<newline46mondego>        this.a = a;<newline46mondego>        this.b = b;<newline46mondego>    }<newline46mondego><newline46mondego>    public int a;<newline46mondego>    public int b;<newline46mondego>}<newline46mondego><newline46mondego>public class Main {<newline46mondego><newline46mondego>    public static void main(String[] args) throws Exception {<newline46mondego>        List<Test> values = new ArrayList<Test>(2);<newline46mondego>        values.add(new Test(1, 2));<newline46mondego>        values.add(new Test(3, 4));<newline46mondego><newline46mondego>        List<Test> readOnly = Collections.unmodifiableList(values);<newline46mondego>        for (Test t : readOnly) {<newline46mondego>            t.a = 5;<newline46mondego>        }<newline46mondego><newline46mondego>        for (Test t : values) {<newline46mondego>            System.out.println(t.a);<newline46mondego>        }<newline46mondego>    }<newline46mondego><newline46mondego>}<newline46mondego>"
"1109splitHere46","152348splitHere46","5<newline46mondego>5<newline46mondego>"
"1110splitHere46","152593splitHere46","/**<newline46mondego> * @author McDowell<newline46mondego> */<newline46mondego>public abstract class NonconcurrentTask implements Runnable {<newline46mondego><newline46mondego>    private boolean token = true;<newline46mondego><newline46mondego>    private synchronized boolean acquire() {<newline46mondego>    	boolean ret = token;<newline46mondego>    	token = false;<newline46mondego>    	return ret;<newline46mondego>    }<newline46mondego><newline46mondego>    private synchronized void release() {<newline46mondego>    	token = true;<newline46mondego>    }<newline46mondego><newline46mondego>    public final void run() {<newline46mondego>    	if (acquire()) {<newline46mondego>    		try {<newline46mondego>    			doTask();<newline46mondego>    		} finally {<newline46mondego>    			release();<newline46mondego>    		}<newline46mondego>    	}<newline46mondego>    }<newline46mondego><newline46mondego>    protected abstract void doTask();<newline46mondego><newline46mondego>}<newline46mondego>"
"1111splitHere46","152593splitHere46","public class Test {<newline46mondego><newline46mondego>    public static void main(String[] args) {<newline46mondego>    	final NonconcurrentTask shared = new NonconcurrentTask() {<newline46mondego>    		private boolean working = false;<newline46mondego><newline46mondego>    		protected void doTask() {<newline46mondego>    			System.out.println(<doubleQuotes46>Working: <doubleQuotes46><newline46mondego>    					+ Thread.currentThread().getName());<newline46mondego>    			if (working) {<newline46mondego>    				throw new IllegalStateException();<newline46mondego>    			}<newline46mondego>    			working = true;<newline46mondego>    			try {<newline46mondego>    				Thread.sleep(1000);<newline46mondego>    			} catch (InterruptedException e) {<newline46mondego>    				throw new RuntimeException(e);<newline46mondego>    			}<newline46mondego>    			if (!working) {<newline46mondego>    				throw new IllegalStateException();<newline46mondego>    			}<newline46mondego>    			working = false;<newline46mondego>    		}<newline46mondego>    	};<newline46mondego><newline46mondego>    	Runnable taskWrapper = new Runnable() {<newline46mondego>    		public void run() {<newline46mondego>    			while (true) {<newline46mondego>    				try {<newline46mondego>    					Thread.sleep(100);<newline46mondego>    				} catch (InterruptedException e) {<newline46mondego>    					throw new RuntimeException(e);<newline46mondego>    				}<newline46mondego>    				shared.run();<newline46mondego>    			}<newline46mondego>    		}<newline46mondego>    	};<newline46mondego>    	for (int i = 0; i < 100; i++) {<newline46mondego>    		new Thread(taskWrapper).start();<newline46mondego>    	}<newline46mondego>    }<newline46mondego><newline46mondego>}<newline46mondego>"
"1112splitHere46","152677splitHere46","public String myMethod() {<newline46mondego>    StringBuilder sb = new StringBuilder();<newline46mondego>    addToBuffer(sb, <doubleQuotes46>Hello<doubleQuotes46>).addToBuffer(<doubleQuotes46>there,<doubleQuotes46>);<newline46mondego>    addToBuffer(sb, <doubleQuotes46>it<doubleQuotes46>).addToBuffer(sb, <doubleQuotes46>works<doubleQuotes46>);<newline46mondego>}<newline46mondego><newline46mondego>private StringBuilder addToBuffer(StringBuilder sb, String what) {<newline46mondego>    return sb.append(what).append(' ');  // char is even faster here! ;)<newline46mondego>}<newline46mondego>"
"1113splitHere46","152677splitHere46","public String myMethod() {<newline46mondego>    SBBuilder builder = new SBBuilder()<newline46mondego>        .add(<doubleQuotes46>Hello<doubleQuotes46>).add(<doubleQuotes46>there<doubleQuotes46>)<newline46mondego>        .add(<doubleQuotes46>it<doubleQuotes46>, <doubleQuotes46>works<doubleQuotes46>, <doubleQuotes46>just<doubleQuotes46>, <doubleQuotes46>fine!<doubleQuotes46>);<newline46mondego><newline46mondego>    for (int i = 0; i < 10; i++) {<newline46mondego>        builder.add(<doubleQuotes46>adding<doubleQuotes46>).add(String.valueOf(i));<newline46mondego>    }<newline46mondego><newline46mondego>    System.out.println(builder.build());<newline46mondego>}<newline46mondego><newline46mondego>public static class SBBuilder {<newline46mondego>    private StringBuilder sb = new StringBuilder();<newline46mondego><newline46mondego>    public SBBuilder add(String... parts) {<newline46mondego>        for (String p : parts) {<newline46mondego>            sb.append(p).append(' '); // char is even faster here! ;)<newline46mondego>        }<newline46mondego>        return this;<newline46mondego>    }<newline46mondego><newline46mondego>    public String build() {<newline46mondego>        return sb.toString();<newline46mondego>    }<newline46mondego>}<newline46mondego>"
"1114splitHere46","153198splitHere46","assertThat (result, anyOf(equalTo(1), equalTo(2), equalTo(3)))<newline46mondego>"
"1115splitHere46","153203splitHere46","system.io.packaging"
"1116splitHere46","153538splitHere46","@IfProfileValue(name=<doubleQuotes46>test-groups<doubleQuotes46>, values={<doubleQuotes46>unit-tests<doubleQuotes46>, <doubleQuotes46>integration-tests<doubleQuotes46>})<newline46mondego>  public void testWhichRunsForUnitOrIntegrationTestGroups() {<newline46mondego>      // ...<newline46mondego> }<newline46mondego>"
"1117splitHere46","153538splitHere46","@Category"
"1118splitHere46","153538splitHere46","@Prerequisite"
"1119splitHere46","153785splitHere46","setRoundingMode"
"1120splitHere46","153785splitHere46","RoundingMode"
"1121splitHere46","154040splitHere46","<doubleQuotes46>[a-z-]<doubleQuotes46><newline46mondego>"
"1122splitHere46","154057splitHere46","class ModelBase {<newline46mondego>    // Initialize the queries<newline46mondego>    private static Map<String,String> selectMap = new HashMap<String,String>(); static {<newline46mondego>        selectMap.put( <doubleQuotes46>Album<doubleQuotes46>, <doubleQuotes46>select field_1, field_2 from album<doubleQuotes46>);<newline46mondego>        selectMap.put( <doubleQuotes46>Artist<doubleQuotes46>, <doubleQuotes46>select field_1, field_2 from artist<doubleQuotes46>);<newline46mondego>        selectMap.put( <doubleQuotes46>Track<doubleQuotes46>, <doubleQuotes46>select field_1, field_2 from track<doubleQuotes46>);<newline46mondego>    }<newline46mondego><newline46mondego>    // Finds all the objects for the specified class...<newline46mondego>    // Note: it is better to use <doubleQuotes46>List<doubleQuotes46> rather than <doubleQuotes46>ArrayList<doubleQuotes46> I'll explain this later.<newline46mondego>    public static List findAll(Class classToFind ) {<newline46mondego>        String sql = getSelectSQL( classToFind );<newline46mondego>        results = execute( sql );<newline46mondego>        //etc...<newline46mondego>        return ....<newline46mondego>    }<newline46mondego><newline46mondego>    // Return the correct select sql..<newline46mondego>    private static String getSelectSQL( Class classToFind ){<newline46mondego>        String statement = tableMap.get( classToFind.getSimpleName() );<newline46mondego>        if( statement == null ) {<newline46mondego>            throw new IllegalArgumentException(<doubleQuotes46>Class <doubleQuotes46> + <newline46mondego>                 classToFind.getSimpleName + <doubleQuotes46> is not mapped<doubleQuotes46>);<newline46mondego>        }<newline46mondego>        return statement;<newline46mondego><newline46mondego>    }<newline46mondego>}<newline46mondego>"
"1123splitHere46","154057splitHere46","// Client usage:<newline46mondego><newline46mondego>...<newline46mondego>List albums = ModelBase.findAll( Album.class );<newline46mondego>"
"1124splitHere46","154057splitHere46","// Second option, instance used under the hood.<newline46mondego>class ModelBase {<newline46mondego>    // Initialize the queries<newline46mondego>    private static Map<String,ModelBase> daoMap = new HashMap<String,ModelBase>(); static {<newline46mondego>        selectMap.put( <doubleQuotes46>Album<doubleQuotes46>, new AlbumModel() );<newline46mondego>        selectMap.put( <doubleQuotes46>Artist<doubleQuotes46>, new ArtistModel());<newline46mondego>        selectMap.put( <doubleQuotes46>Track<doubleQuotes46>, new TrackModel());<newline46mondego>    }<newline46mondego><newline46mondego>    // Finds all the objects for the specified class...<newline46mondego>    // Note: it is better to use <doubleQuotes46>List<doubleQuotes46> rather than <doubleQuotes46>ArrayList<doubleQuotes46> I'll explain this later.<newline46mondego>    public static List findAll(Class classToFind ) {<newline46mondego>        String sql = getSelectSQL( classToFind );<newline46mondego>        results = execute( sql );<newline46mondego>        //etc...<newline46mondego>        return ....<newline46mondego>    }<newline46mondego><newline46mondego>    // Return the correct select sql..<newline46mondego>    private static String getSelectSQL( Class classToFind ){<newline46mondego>        ModelBase dao = tableMap.get( classToFind.getSimpleName() );<newline46mondego>        if( statement == null ) {<newline46mondego>            throw new IllegalArgumentException(<doubleQuotes46>Class <doubleQuotes46> + <newline46mondego>                 classToFind.getSimpleName + <doubleQuotes46> is not mapped<doubleQuotes46>);<newline46mondego>        }<newline46mondego>        return dao.selectSql();<newline46mondego>    }<newline46mondego>    // Instance class to be overrided... <newline46mondego>    // this is <doubleQuotes46>protected<doubleQuotes46> ... <newline46mondego>    protected abstract String selectSql();<newline46mondego>}<newline46mondego>class AlbumModel  extends ModelBase {<newline46mondego>    public String selectSql(){<newline46mondego>        return <doubleQuotes46>select ... from album<doubleQuotes46>;<newline46mondego>    }<newline46mondego>}<newline46mondego>class ArtistModel  extends ModelBase {<newline46mondego>    public String selectSql(){<newline46mondego>        return <doubleQuotes46>select ... from artist<doubleQuotes46>;<newline46mondego>    }<newline46mondego>}<newline46mondego>class TrackModel  extends ModelBase {<newline46mondego>    public String selectSql(){<newline46mondego>        return <doubleQuotes46>select ... from track<doubleQuotes46>;<newline46mondego>    }<newline46mondego>}<newline46mondego>"
"1125splitHere46","154057splitHere46","// Client usage:<newline46mondego><newline46mondego>...<newline46mondego>List albums = ModelBase.findAll( Album.class ); // Does not know , behind the scenes you use instances.<newline46mondego>"
"1126splitHere46","154192splitHere46","<cfset PointClass = createObject(<doubleQuotes46>java<doubleQuotes46>, <doubleQuotes46>java.awt.geom.Point2D$Double<doubleQuotes46>)><newline46mondego>"
"1127splitHere46","154192splitHere46","$"
"1128splitHere46","154340splitHere46","Task"
"1129splitHere46","154340splitHere46","Task<T>"
"1130splitHere46","154340splitHere46","class Task<T extends Task<T>> { ... }<newline46mondego>"
"1131splitHere46","154340splitHere46","class MyTask extends Task<MyTask> { ... }<newline46mondego>class YourTask extends Task<MyTask> { ... }<newline46mondego>"
"1132splitHere46","154340splitHere46","class MyTask extends Task<String> { ... }<newline46mondego>"
"1133splitHere46","154340splitHere46","Task"
"1134splitHere46","154570splitHere46","C:\dump>jmap -dump:format=b,file=heap.bin 3552<newline46mondego><newline46mondego>C:\dump>jhat heap.bin<newline46mondego>Reading from heap.bin...<newline46mondego>Dump file created Tue Sep 30 19:46:23 BST 2008<newline46mondego>Snapshot read, resolving...<newline46mondego>Resolving 35484 objects...<newline46mondego>Chasing references, expect 7 dots.......<newline46mondego>Eliminating duplicate references.......<newline46mondego>Snapshot resolved.<newline46mondego>Started HTTP server on port 7000<newline46mondego>Server is ready.<newline46mondego>"
"1135splitHere46","154588splitHere46","boolean running = true;<newline46mondego>BufferedInputStream reader = new BufferedInputStream( <newline46mondego>    new FileInputStream( <doubleQuotes46>out.txt<doubleQuotes46> ) );<newline46mondego><newline46mondego>public void run() {<newline46mondego>    while( running ) {<newline46mondego>        if( reader.available() > 0 ) {<newline46mondego>            System.out.print( (char)reader.read() );<newline46mondego>        }<newline46mondego>        else {<newline46mondego>            try {<newline46mondego>                sleep( 500 );<newline46mondego>            }<newline46mondego>            catch( InterruptedException ex )<newline46mondego>            {<newline46mondego>                running = false;<newline46mondego>            }<newline46mondego>        }<newline46mondego>    }<newline46mondego>}<newline46mondego>"
"1136splitHere46","154939splitHere46","public abstract class Human<newline46mondego>{<newline46mondego>   ...<newline46mondego>   public abstract void goPee();<newline46mondego>}<newline46mondego>"
"1137splitHere46","154939splitHere46","goPee()"
"1138splitHere46","154939splitHere46","public class Male extends Human<newline46mondego>{<newline46mondego>...<newline46mondego>    @Override<newline46mondego>    public void goPee()<newline46mondego>    {<newline46mondego>        System.out.println(<doubleQuotes46>Stand Up<doubleQuotes46>);<newline46mondego>    }<newline46mondego>}<newline46mondego>"
"1139splitHere46","154939splitHere46","public class Female extends Human<newline46mondego>{<newline46mondego>...<newline46mondego>    @Override<newline46mondego>    public void goPee()<newline46mondego>    {<newline46mondego>        System.out.println(<doubleQuotes46>Sit Down<doubleQuotes46>);<newline46mondego>    }<newline46mondego>}<newline46mondego>"
"1140splitHere46","154939splitHere46","public static void main(String args)<newline46mondego>{<newline46mondego>    ArrayList<Human> group = new ArrayList<Human>();<newline46mondego>    group.add(new Male());<newline46mondego>    group.add(new Female());<newline46mondego>    // ... add more...<newline46mondego><newline46mondego>    // tell the class to take a pee break<newline46mondego>    for (Human person : group) person.goPee();<newline46mondego>}<newline46mondego>"
"1141splitHere46","154939splitHere46","Stand Up<newline46mondego>Sit Down<newline46mondego>...<newline46mondego>"
"1142splitHere46","155237splitHere46","import org.h2.tools.Server;<newline46mondego>...<newline46mondego>// start the TCP Server<newline46mondego>Server server = Server.createTcpServer(args).start();<newline46mondego>...<newline46mondego>// stop the TCP Server<newline46mondego>server.stop();<newline46mondego>"
"1143splitHere46","155353splitHere46","builder.setEntityResolver(new EntityResolver() {<newline46mondego>        @Override<newline46mondego>        public InputSource resolveEntity(String publicId, String systemId)<newline46mondego>                throws SAXException, IOException {<newline46mondego>            if (systemId.contains(<doubleQuotes46>foo.dtd<doubleQuotes46>)) {<newline46mondego>                return new InputSource(new StringReader(<doubleQuotes46><doubleQuotes46>));<newline46mondego>            } else {<newline46mondego>                return null;<newline46mondego>            }<newline46mondego>        }<newline46mondego>    });<newline46mondego>"
"1144splitHere46","156525splitHere46","InputStream fis = null;<newline46mondego>try {<newline46mondego>    fis = new FileInputStream(file);<newline46mondego><newline46mondego>    ... process ...<newline46mondego><newline46mondego><newline46mondego>} catch (IOException e) {<newline46mondego>    ... blah blah blah ...<newline46mondego>} finally {<newline46mondego>    IOUtils.closeQuietly(fis);<newline46mondego>}<newline46mondego>"
"1145splitHere46","156528splitHere46","@Test(expected=IndexOutOfBoundsException.class)<newline46mondego>public void testIndexOutOfBoundsException() {<newline46mondego>    ArrayList emptyList = new ArrayList();<newline46mondego>    Object o = emptyList.get(0);<newline46mondego>}<newline46mondego>"
"1146splitHere46","156639splitHere46","start <= now < end"
"1147splitHere46","156639splitHere46","9/30 to 10/1"
"1148splitHere46","156639splitHere46","interval[n-1].end == interval[n].start"
"1149splitHere46","156639splitHere46","start"
"1150splitHere46","156639splitHere46","end"
"1151splitHere46","156685splitHere46","comp.lang.java.help"
"1152splitHere46","156685splitHere46","Pair"
"1153splitHere46","156685splitHere46","Pair"
"1154splitHere46","156685splitHere46","Pair"
"1155splitHere46","156685splitHere46","Map.Entry"
"1156splitHere46","156685splitHere46","Position(x,y)"
"1157splitHere46","156685splitHere46","Range(begin,end)"
"1158splitHere46","156685splitHere46","Entry(key,value)"
"1159splitHere46","156685splitHere46","Pair(first,second)"
"1160splitHere46","156744splitHere46","public String stripNonValidXMLCharacters(String in) {<newline46mondego>    StringBuffer out = new StringBuffer(); // Used to hold the output.<newline46mondego>    char current; // Used to reference the current character.<newline46mondego><newline46mondego>    if (in == null || (<doubleQuotes46><doubleQuotes46>.equals(in))) return <doubleQuotes46><doubleQuotes46>; // vacancy test.<newline46mondego>    for (int i = 0; i < in.length(); i++) {<newline46mondego>        current = in.charAt(i);<newline46mondego>        if ((current == 0x9) ||<newline46mondego>            (current == 0xA) ||<newline46mondego>            (current == 0xD) ||<newline46mondego>            ((current >= 0x20) && (current <= 0xD7FF)) ||<newline46mondego>            ((current >= 0xE000) && (current <= 0xFFFD)) ||<newline46mondego>            ((current >= 0x10000) && (current <= 0x10FFFF)))<newline46mondego>            out.append(current);<newline46mondego>    }<newline46mondego>    return out.toString();<newline46mondego>}<newline46mondego>"
"1161splitHere46","156744splitHere46","org.xml.sax.SAXParseException: Invalid byte 1 of 1-byte UTF-8 sequence<newline46mondego>"
"1162splitHere46","156744splitHere46","response.setContentType(<doubleQuotes46>text/xml;charset=utf-8<doubleQuotes46>);<newline46mondego>"
"1163splitHere46","157046splitHere46","setBorder(new EmptyBorder(0,10,0,0));<newline46mondego>"
"1164splitHere46","157322splitHere46","public class UploadFileServiceImpl extends HttpServlet<newline46mondego>    {<newline46mondego>        protected void doPost(HttpServletRequest request, HttpServletResponse response) throws IOException<newline46mondego>        {<newline46mondego>        	response.setContentType(<doubleQuotes46>text/plain<doubleQuotes46>);<newline46mondego><newline46mondego>        	try<newline46mondego>        	{<newline46mondego>        		FileItem uploadItem = getFileItem(request);<newline46mondego>        		if (uploadItem == null)<newline46mondego>        		{<newline46mondego>        	            // ERROR<newline46mondego>        		}	<newline46mondego><newline46mondego>        		// Add logic here<newline46mondego>        	}<newline46mondego>        	catch (Exception ex)<newline46mondego>        	{<newline46mondego>        		response.getWriter().write(<doubleQuotes46>Error: file upload failure: <doubleQuotes46> + ex.getMessage());			<newline46mondego>        	}<newline46mondego>        }<newline46mondego><newline46mondego>        private FileItem getFileItem(HttpServletRequest request) throws FileUploadException<newline46mondego>        {<newline46mondego>        	DiskFileItemFactory factory = new DiskFileItemFactory();		<newline46mondego><newline46mondego>             // Add here your own limit     	<newline46mondego>             factory.setSizeThreshold(DiskFileItemFactory.DEFAULT_SIZE_THRESHOLD);<newline46mondego><newline46mondego>    	 ServletFileUpload upload = new ServletFileUpload(factory);<newline46mondego><newline46mondego>             // Add here your own limit<newline46mondego>             upload.setSizeMax(DiskFileItemFactory.DEFAULT_SIZE_THRESHOLD);<newline46mondego><newline46mondego><newline46mondego>        	List<?> items = upload.parseRequest(request);<newline46mondego>        	Iterator<?> it = items.iterator();<newline46mondego>        	while (it.hasNext())<newline46mondego>        	{<newline46mondego>        		FileItem item = (FileItem) it.next();<newline46mondego>                        // Search here for file item<newline46mondego>        		if (!item.isFormField() && <newline46mondego>        		  // Check field name to get to file item  ... <newline46mondego>        		{<newline46mondego>        			return item;<newline46mondego>        		}<newline46mondego>        	}<newline46mondego><newline46mondego>        	return null;<newline46mondego>        }<newline46mondego>    }<newline46mondego>"
"1165splitHere46","157485splitHere46","javax.mail.Message"
"1166splitHere46","157485splitHere46","writeTo()"
"1167splitHere46","157499splitHere46","Object::const_get('String').new()<newline46mondego>"
"1168splitHere46","157635splitHere46","StreamResult streamResult = new StreamResult(out);<newline46mondego>SAXTransformerFactory tf = (SAXTransformerFactory) SAXTransformerFactory.newInstance();<newline46mondego>TransformerHandler hd = tf.newTransformerHandler();<newline46mondego>Transformer serializer = hd.getTransformer();<newline46mondego>serializer.setOutputProperty(OutputKeys.CDATA_SECTION_ELEMENTS, <doubleQuotes46>column<doubleQuotes46>);<newline46mondego>hd.setResult(streamResult);<newline46mondego>hd.startDocument();<newline46mondego>hd.startElement(<doubleQuotes46><doubleQuotes46>,<doubleQuotes46><doubleQuotes46>,<doubleQuotes46>column<doubleQuotes46>,atts);<newline46mondego>hd.characters(asdf,0, asdf.length());<newline46mondego>hd.endElement(<doubleQuotes46><doubleQuotes46>,<doubleQuotes46><doubleQuotes46>,<doubleQuotes46>column<doubleQuotes46>);<newline46mondego>hd.endDocument();<newline46mondego>"
"1169splitHere46","157950splitHere46","new ArrayList<Element>(Arrays.asList(array))<newline46mondego>"
"1170splitHere46","158358splitHere46","<listener><newline46mondego>   <listener-class>my.Listener</listener-class><newline46mondego></listener><newline46mondego>"
"1171splitHere46","158358splitHere46","package my;<newline46mondego><newline46mondego>public class Listener implements javax.servlet.ServletContextListener {<newline46mondego><newline46mondego>   public void contextInitialized(ServletContext context) {<newline46mondego>      MyOtherClass.callMe();<newline46mondego>   }<newline46mondego>}<newline46mondego>"
"1172splitHere46","158409splitHere46","import java.io.InputStream;<newline46mondego>import java.net.ServerSocket;<newline46mondego>import java.net.Socket;<newline46mondego><newline46mondego>public class MyServer {<newline46mondego>  public static void main(String[] args) throws Exception {<newline46mondego>    final ServerSocket ss = new ServerSocket(12345);<newline46mondego>    final Socket cs = ss.accept();<newline46mondego>    System.out.println(<doubleQuotes46>Accepted connection<doubleQuotes46>);<newline46mondego><newline46mondego>    final InputStream in = cs.getInputStream();<newline46mondego>    final byte[] tmp = new byte[64 * 1024];<newline46mondego>    while (in.read(tmp) != -1);<newline46mondego><newline46mondego>    Thread.sleep(100000);<newline46mondego>  }<newline46mondego>}<newline46mondego><newline46mondego><newline46mondego><newline46mondego>import java.net.InetSocketAddress;<newline46mondego>import java.nio.ByteBuffer;<newline46mondego>import java.nio.channels.SocketChannel;<newline46mondego><newline46mondego>public class MyNioClient {<newline46mondego>  public static void main(String[] args) throws Exception {<newline46mondego>    final SocketChannel s = SocketChannel.open();<newline46mondego>    s.configureBlocking(false);<newline46mondego>    s.connect(new InetSocketAddress(<doubleQuotes46>localhost<doubleQuotes46>, 12345));<newline46mondego>    s.finishConnect();<newline46mondego><newline46mondego>    final ByteBuffer buf = ByteBuffer.allocate(128 * 1024);<newline46mondego>    for (int i = 0; i < 10; i++) {<newline46mondego>      System.out.println(<doubleQuotes46>to write: <doubleQuotes46> + buf.remaining() + <doubleQuotes46>, written: <doubleQuotes46> + s.write(buf));<newline46mondego>      buf.position(0);<newline46mondego>    }<newline46mondego>    Thread.sleep(100000);<newline46mondego>  }<newline46mondego>}<newline46mondego>"
"1173splitHere46","158409splitHere46","0"
"1174splitHere46","158409splitHere46","to write: 131072, written:  131072<newline46mondego>to write: 131072, written:  131072<newline46mondego>to write: 131072, written:  131072<newline46mondego>...<newline46mondego>"
"1175splitHere46","158409splitHere46","to write: 131072, written:  131072<newline46mondego>to write: 131072, written:  0<newline46mondego>to write: 131072, written:  0<newline46mondego>...<newline46mondego>"
"1176splitHere46","158511splitHere46","/**<newline46mondego>  * Copyright (c) 2008 Steven M. Cherry<newline46mondego>  * All rights reserved.<newline46mondego>  */<newline46mondego>package utils.scheduled;<newline46mondego><newline46mondego>import java.io.BufferedOutputStream;<newline46mondego>import java.io.File;<newline46mondego>import java.io.FileOutputStream;<newline46mondego>import java.io.InputStream;<newline46mondego>import java.sql.Timestamp;<newline46mondego>import java.util.Properties;<newline46mondego>import java.util.Vector;<newline46mondego><newline46mondego>import javax.mail.Address;<newline46mondego>import javax.mail.Flags;<newline46mondego>import javax.mail.Folder;<newline46mondego>import javax.mail.Message;<newline46mondego>import javax.mail.Multipart;<newline46mondego>import javax.mail.Part;<newline46mondego>import javax.mail.Session;<newline46mondego>import javax.mail.Store;<newline46mondego>import javax.mail.internet.MimeBodyPart;<newline46mondego><newline46mondego>import glob.ActionLogicImplementation;<newline46mondego>import glob.IOConn;<newline46mondego>import glob.log.Log;<newline46mondego>import logic.utils.sql.Settings;<newline46mondego>import logic.utils.sqldo.EMail;<newline46mondego>import logic.utils.sqldo.EMailAttach;<newline46mondego><newline46mondego>/**<newline46mondego>  * This will connect to our incoming e-mail server and download any e-mails<newline46mondego>  * that are found on the server.  The e-mails will be stored for further processing<newline46mondego>  * in our internal database.  Attachments will be written out to separate files<newline46mondego>  * and then referred to by the database entries.  This is intended to be  run by <newline46mondego>  * the scheduler every minute or so.<newline46mondego>  *<newline46mondego>  * @author Steven M. Cherry<newline46mondego>  */<newline46mondego>public class DownloadEMail implements ActionLogicImplementation {<newline46mondego><newline46mondego>    protected String receiving_host;<newline46mondego>    protected String receiving_user;<newline46mondego>    protected String receiving_pass;<newline46mondego>    protected String receiving_protocol;<newline46mondego>    protected boolean receiving_secure;<newline46mondego>    protected String receiving_attachments;<newline46mondego><newline46mondego>    /** This will run our logic */<newline46mondego>    public void ExecuteRequest(IOConn ioc) throws Exception {<newline46mondego>    	Log.Trace(<doubleQuotes46>Enter<doubleQuotes46>);<newline46mondego><newline46mondego>    	Log.Debug(<doubleQuotes46>Executing DownloadEMail<doubleQuotes46>);<newline46mondego>    	ioc.initializeResponseDocument(<doubleQuotes46>DownloadEMail<doubleQuotes46>);<newline46mondego><newline46mondego>    	// pick up our configuration from the server:<newline46mondego>    	receiving_host = Settings.getValue(ioc, <doubleQuotes46>server.email.receiving.host<doubleQuotes46>);<newline46mondego>    	receiving_user = Settings.getValue(ioc, <doubleQuotes46>server.email.receiving.username<doubleQuotes46>);<newline46mondego>    	receiving_pass = Settings.getValue(ioc, <doubleQuotes46>server.email.receiving.password<doubleQuotes46>);<newline46mondego>    	receiving_protocol = Settings.getValue(ioc, <doubleQuotes46>server.email.receiving.protocol<doubleQuotes46>);<newline46mondego>    	String tmp_secure = Settings.getValue(ioc, <doubleQuotes46>server.email.receiving.secure<doubleQuotes46>);<newline46mondego>    	receiving_attachments = Settings.getValue(ioc, <doubleQuotes46>server.email.receiving.attachments<doubleQuotes46>);<newline46mondego><newline46mondego>    	// sanity check on the parameters:<newline46mondego>    	if(receiving_host == null || receiving_host.length() == 0){<newline46mondego>    		ioc.SendReturn();<newline46mondego>    		ioc.Close();<newline46mondego>    		Log.Trace(<doubleQuotes46>Exit<doubleQuotes46>);<newline46mondego>    		return; // no host defined.<newline46mondego>    	}<newline46mondego>    	if(receiving_user == null || receiving_user.length() == 0){<newline46mondego>    		ioc.SendReturn();<newline46mondego>    		ioc.Close();<newline46mondego>    		Log.Trace(<doubleQuotes46>Exit<doubleQuotes46>);<newline46mondego>    		return; // no user defined.<newline46mondego>    	}<newline46mondego>    	if(receiving_pass == null || receiving_pass.length() == 0){<newline46mondego>    		ioc.SendReturn();<newline46mondego>    		ioc.Close();<newline46mondego>    		Log.Trace(<doubleQuotes46>Exit<doubleQuotes46>);<newline46mondego>    		return; // no pass defined.<newline46mondego>    	}<newline46mondego>    	if(receiving_protocol == null || receiving_protocol.length() == 0){<newline46mondego>    		Log.Debug(<doubleQuotes46>EMail receiving protocol not defined, defaulting to POP<doubleQuotes46>);<newline46mondego>    		receiving_protocol = <doubleQuotes46>POP<doubleQuotes46>;<newline46mondego>    	}<newline46mondego>    	if(tmp_secure == null || <newline46mondego>    		tmp_secure.length() == 0 ||<newline46mondego>    		tmp_secure.compareToIgnoreCase(<doubleQuotes46>false<doubleQuotes46>) == 0 ||<newline46mondego>    		tmp_secure.compareToIgnoreCase(<doubleQuotes46>no<doubleQuotes46>) == 0<newline46mondego>    	){<newline46mondego>    		receiving_secure = false;<newline46mondego>    	} else {<newline46mondego>    		receiving_secure = true;<newline46mondego>    	}<newline46mondego>    	if(receiving_attachments == null || receiving_attachments.length() == 0){<newline46mondego>    		Log.Debug(<doubleQuotes46>EMail receiving attachments not defined, defaulting to ./email/attachments/<doubleQuotes46>);<newline46mondego>    		receiving_attachments = <doubleQuotes46>./email/attachments/<doubleQuotes46>;<newline46mondego>    	}<newline46mondego><newline46mondego>    	// now do the real work.<newline46mondego>    	doEMailDownload(ioc);<newline46mondego><newline46mondego>    	ioc.SendReturn();<newline46mondego>    	ioc.Close();<newline46mondego>    	Log.Trace(<doubleQuotes46>Exit<doubleQuotes46>);<newline46mondego>    }<newline46mondego><newline46mondego>    protected void doEMailDownload(IOConn ioc) throws Exception {<newline46mondego>    	// Create empty properties<newline46mondego>    	Properties props = new Properties();<newline46mondego>    	// Get the session<newline46mondego>    	Session session = Session.getInstance(props, null);<newline46mondego><newline46mondego>    	// Get the store<newline46mondego>    	Store store = session.getStore(receiving_protocol);<newline46mondego>    	store.connect(receiving_host, receiving_user, receiving_pass);<newline46mondego><newline46mondego>    	// Get folder<newline46mondego>    	Folder folder = store.getFolder(<doubleQuotes46>INBOX<doubleQuotes46>);<newline46mondego>    	folder.open(Folder.READ_WRITE);<newline46mondego><newline46mondego>    	try {<newline46mondego><newline46mondego>    		// Get directory listing<newline46mondego>    		Message messages[] = folder.getMessages();<newline46mondego><newline46mondego>    		for (int i=0; i < messages.length; i++) {<newline46mondego>    			// get the details of the message:<newline46mondego>    			EMail email = new EMail();<newline46mondego>    			email.fromaddr = messages[i].getFrom()[0].toString();<newline46mondego>    			Address[] to = messages[i].getRecipients(Message.RecipientType.TO);<newline46mondego>    			email.toaddr = <doubleQuotes46><doubleQuotes46>;<newline46mondego>    			for(int j = 0; j < to.length; j++){<newline46mondego>    				email.toaddr += to[j].toString() + <doubleQuotes46>; <doubleQuotes46>;<newline46mondego>    			}<newline46mondego>    			Address[] cc;<newline46mondego>    			try {<newline46mondego>    				cc = messages[i].getRecipients(Message.RecipientType.CC);<newline46mondego>    			} catch (Exception e){<newline46mondego>    				Log.Warn(<doubleQuotes46>Exception retrieving CC addrs: %s<doubleQuotes46>, e.getLocalizedMessage());<newline46mondego>    				cc = null;<newline46mondego>    			}<newline46mondego>    			email.cc = <doubleQuotes46><doubleQuotes46>;<newline46mondego>    			if(cc != null){<newline46mondego>    				for(int j = 0; j < cc.length; j++){<newline46mondego>    					email.cc += cc[j].toString() + <doubleQuotes46>; <doubleQuotes46>;<newline46mondego>    				}<newline46mondego>    			}<newline46mondego>    			email.subject = messages[i].getSubject();<newline46mondego>    			if(messages[i].getReceivedDate() != null){<newline46mondego>    				email.received_when = new Timestamp(messages[i].getReceivedDate().getTime());<newline46mondego>    			} else {<newline46mondego>    				email.received_when = new Timestamp( (new java.util.Date()).getTime());<newline46mondego>    			}<newline46mondego><newline46mondego><newline46mondego>    			email.body = <doubleQuotes46><doubleQuotes46>;<newline46mondego>    			Vector<EMailAttach> vema = new Vector<EMailAttach>();<newline46mondego>    			Object content = messages[i].getContent();<newline46mondego>    			if(content instanceof java.lang.String){<newline46mondego>    				email.body = (String)content;<newline46mondego>    			} else if(content instanceof Multipart){<newline46mondego>    				Multipart mp = (Multipart)content;<newline46mondego><newline46mondego>    				for (int j=0; j < mp.getCount(); j++) {<newline46mondego>    					Part part = mp.getBodyPart(j);<newline46mondego><newline46mondego>    					String disposition = part.getDisposition();<newline46mondego><newline46mondego>    					if (disposition == null) {<newline46mondego>    						// Check if plain<newline46mondego>    						MimeBodyPart mbp = (MimeBodyPart)part;<newline46mondego>    						if (mbp.isMimeType(<doubleQuotes46>text/plain<doubleQuotes46>)) {<newline46mondego>    							Log.Debug(<doubleQuotes46>Mime type is plain<doubleQuotes46>);<newline46mondego>    							email.body += (String)mbp.getContent();<newline46mondego>    						} else {<newline46mondego>    							Log.Debug(<doubleQuotes46>Mime type is not plain<doubleQuotes46>);<newline46mondego>    							// Special non-attachment cases here of <newline46mondego>    							// image/gif, text/html, ...<newline46mondego>    							EMailAttach ema = new EMailAttach();<newline46mondego>    							ema.name = decodeName(part.getFileName());<newline46mondego>    							File savedir = new File(receiving_attachments);<newline46mondego>    							savedir.mkdirs();<newline46mondego>    							File savefile = File.createTempFile(<doubleQuotes46>emailattach<doubleQuotes46>, <doubleQuotes46>.atch<doubleQuotes46>, savedir );<newline46mondego>    							ema.path = savefile.getAbsolutePath();<newline46mondego>    							ema.size = part.getSize();<newline46mondego>    							vema.add(ema);<newline46mondego>    							ema.size = saveFile(savefile, part);<newline46mondego>    						}<newline46mondego>    					} else if ((disposition != null) && <newline46mondego>    						(disposition.equals(Part.ATTACHMENT) || disposition.equals(Part.INLINE) ) <newline46mondego>    					){<newline46mondego>    						// Check if plain<newline46mondego>    						MimeBodyPart mbp = (MimeBodyPart)part;<newline46mondego>    						if (mbp.isMimeType(<doubleQuotes46>text/plain<doubleQuotes46>)) {<newline46mondego>    							Log.Debug(<doubleQuotes46>Mime type is plain<doubleQuotes46>);<newline46mondego>    							email.body += (String)mbp.getContent();<newline46mondego>    						} else {<newline46mondego>    							Log.Debug(<doubleQuotes46>Save file (%s)<doubleQuotes46>, part.getFileName() );<newline46mondego>    							EMailAttach ema = new EMailAttach();<newline46mondego>    							ema.name = decodeName(part.getFileName());<newline46mondego>    							File savedir = new File(receiving_attachments);<newline46mondego>    							savedir.mkdirs();<newline46mondego>    							File savefile = File.createTempFile(<doubleQuotes46>emailattach<doubleQuotes46>, <doubleQuotes46>.atch<doubleQuotes46>, savedir );<newline46mondego>    							ema.path = savefile.getAbsolutePath();<newline46mondego>    							ema.size = part.getSize();<newline46mondego>    							vema.add(ema);<newline46mondego>    							ema.size = saveFile( savefile, part);<newline46mondego>    						}<newline46mondego>    					}<newline46mondego>    				}<newline46mondego>    			}<newline46mondego><newline46mondego>    			// Insert everything into the database:<newline46mondego>    			logic.utils.sql.EMail.insertEMail(ioc, email);<newline46mondego>    			for(int j = 0; j < vema.size(); j++){<newline46mondego>    				vema.get(j).emailid = email.id;<newline46mondego>    				logic.utils.sql.EMail.insertEMailAttach(ioc, vema.get(j) );<newline46mondego>    			}<newline46mondego><newline46mondego>    			// commit this message and all of it's attachments<newline46mondego>    			ioc.getDBConnection().commit();<newline46mondego><newline46mondego>    			// Finally delete the message from the server.<newline46mondego>    			messages[i].setFlag(Flags.Flag.DELETED, true);<newline46mondego>    		}<newline46mondego><newline46mondego>    		// Close connection <newline46mondego>    		folder.close(true); // true tells the mail server to expunge deleted messages.<newline46mondego>    		store.close();<newline46mondego>    	} catch (Exception e){<newline46mondego>    		folder.close(true); // true tells the mail server to expunge deleted messages.<newline46mondego>    		store.close();<newline46mondego>    		throw e;<newline46mondego>    	}<newline46mondego><newline46mondego>    }<newline46mondego><newline46mondego>    protected int saveFile(File saveFile, Part part) throws Exception {<newline46mondego><newline46mondego>    	BufferedOutputStream bos = new BufferedOutputStream( new FileOutputStream(saveFile) );<newline46mondego><newline46mondego>    	byte[] buff = new byte[2048];<newline46mondego>    	InputStream is = part.getInputStream();<newline46mondego>    	int ret = 0, count = 0;<newline46mondego>    	while( (ret = is.read(buff)) > 0 ){<newline46mondego>    		bos.write(buff, 0, ret);<newline46mondego>    		count += ret;<newline46mondego>    	}<newline46mondego>    	bos.close();<newline46mondego>    	is.close();<newline46mondego>    	return count;<newline46mondego>    }<newline46mondego><newline46mondego>    protected String decodeName( String name ) throws Exception {<newline46mondego>    	if(name == null || name.length() == 0){<newline46mondego>    		return <doubleQuotes46>unknown<doubleQuotes46>;<newline46mondego>    	}<newline46mondego>    	String ret = java.net.URLDecoder.decode( name, <doubleQuotes46>UTF-8<doubleQuotes46> );<newline46mondego><newline46mondego>    	// also check for a few other things in the string:<newline46mondego>    	ret = ret.replaceAll(<doubleQuotes46>=\\?utf-8\\?q\\?<doubleQuotes46>, <doubleQuotes46><doubleQuotes46>);<newline46mondego>    	ret = ret.replaceAll(<doubleQuotes46>\\?=<doubleQuotes46>, <doubleQuotes46><doubleQuotes46>);<newline46mondego>    	ret = ret.replaceAll(<doubleQuotes46>=20<doubleQuotes46>, <doubleQuotes46> <doubleQuotes46>);<newline46mondego><newline46mondego>    	return ret;<newline46mondego>    }<newline46mondego><newline46mondego>}<newline46mondego>"
"1177splitHere46","158611splitHere46","<param name=<doubleQuotes46>customerId<doubleQuotes46> <newline46mondego>      value=<doubleQuotes46>#{presenceHome.customerId}<doubleQuotes46> <newline46mondego>converterId=<doubleQuotes46>javax.faces.Long<doubleQuotes46> /><newline46mondego>"
"1178splitHere46","158947splitHere46","SimpleDateFormat df = new SimpleDateFormat(<doubleQuotes46>MMMMM dd, yyyy<doubleQuotes46>);<newline46mondego>Date parsed = df.parse(<doubleQuotes46>February 12, 1981<doubleQuotes46>);<newline46mondego>System.out.println(parsed);<newline46mondego>"
"1179splitHere46","159454splitHere46","public void createPartControl(Composite parent) {<newline46mondego>  parent.setLayout(new FillLayout());<newline46mondego>  ScrolledComposite scrollBox = new ScrolledComposite(parent, SWT.V_SCROLL);<newline46mondego>  scrollBox.setExpandHorizontal(true);<newline46mondego>  scrollBox.setExpandVertical(true);<newline46mondego><newline46mondego>  // Using 0 here ensures the horizontal scroll bar will never appear.  If<newline46mondego>  // you want the horizontal bar to appear at some threshold (say 100<newline46mondego>  // pixels) then send that value instead.<newline46mondego>  scrollBox.setMinWidth(0);<newline46mondego><newline46mondego>  mParent = new Composite(scrollBox, SWT.NONE);<newline46mondego><newline46mondego>  FormLayout layout = new FormLayout();<newline46mondego>  mParent.setLayout(layout);<newline46mondego><newline46mondego>  // Adds a bunch of controls here<newline46mondego><newline46mondego>  mParent.addListener(SWT.Resize, new Listener() {<newline46mondego>    int width = -1;<newline46mondego>    public void handleEvent(Event e) {<newline46mondego>      int newWidth = mParent.getSize().x;<newline46mondego>      if (newWidth != width) {<newline46mondego>        scrollBox.setMinHeight(mParent.computeSize(newWidth, SWT.DEFAULT).y);<newline46mondego>        width = newWidth;<newline46mondego>      }<newline46mondego>    }<newline46mondego>  }<newline46mondego><newline46mondego>  // Wait until here to set content pane.  This way the resize listener will<newline46mondego>  // fire when the scrolled composite first resizes mParent, which in turn<newline46mondego>  // computes the minimum height and calls setMinHeight()<newline46mondego>  scrollBox.setContent(mParent);<newline46mondego>}<newline46mondego>"
"1180splitHere46","159711splitHere46","<delete includeemptydirs=<doubleQuotes46>true<doubleQuotes46>><newline46mondego>    <fileset dir=<doubleQuotes46>${root}<doubleQuotes46> defaultexcludes=<doubleQuotes46>false<doubleQuotes46>><newline46mondego>       <include name=<doubleQuotes46>**/*tmp*/**<doubleQuotes46> /><newline46mondego>    </fileset><newline46mondego></delete><newline46mondego>"
"1181splitHere46","159711splitHere46",".svn"
"1182splitHere46","159711splitHere46","defaultexcludes"
"1183splitHere46","159711splitHere46",".*"
"1184splitHere46","159711splitHere46","includeemptydirs"
"1185splitHere46","159711splitHere46","**"
"1186splitHere46","160700splitHere46","!="
"1187splitHere46","160706splitHere46","public class EncodingFilter implements Filter {<newline46mondego>private String encoding;<newline46mondego>private FilterConfig filterConfig;<newline46mondego><newline46mondego>/**<newline46mondego>* @see javax.servlet.Filter#init(javax.servlet.FilterConfig)<newline46mondego>*/<newline46mondego>public void init(FilterConfig fc) throws ServletException {<newline46mondego>this.filterConfig = fc;<newline46mondego>this.encoding = filterConfig.getInitParameter(<doubleQuotes46>encoding<doubleQuotes46>);<newline46mondego>}<newline46mondego><newline46mondego>/**<newline46mondego>* @see javax.servlet.Filter#doFilter(javax.servlet.ServletRequest, javax.servlet.ServletResponse, javax.servlet.FilterChain)<newline46mondego>*/<newline46mondego>public void doFilter(ServletRequest req, ServletResponse resp,<newline46mondego>FilterChain chain) throws IOException, ServletException {<newline46mondego>req.setCharacterEncoding(encoding);<newline46mondego>chain.doFilter(req, resp);<newline46mondego>}<newline46mondego><newline46mondego>/**<newline46mondego>* @see javax.servlet.Filter#destroy()<newline46mondego>*/<newline46mondego>public void destroy() {<newline46mondego>}<newline46mondego><newline46mondego>}<newline46mondego>"
"1188splitHere46","160861splitHere46","public class LockingKeyDemo {<newline46mondego>    static Toolkit kit = Toolkit.getDefaultToolkit();<newline46mondego><newline46mondego>    public static void main(String[] args) {<newline46mondego>    	System.out.println(<doubleQuotes46>caps lock2 = <doubleQuotes46><newline46mondego>    			+ kit.getLockingKeyState(KeyEvent.VK_CAPS_LOCK));<newline46mondego>}<newline46mondego>}<newline46mondego>"
"1189splitHere46","161005splitHere46","java.lang.reflect.Method method;<newline46mondego>try {<newline46mondego>  method = obj.getClass().getMethod(methodName, param1.class, param2.class, ..);<newline46mondego>} catch (SecurityException e) {<newline46mondego>  // ...<newline46mondego>} catch (NoSuchMethodException e) {<newline46mondego>  // ...<newline46mondego>}<newline46mondego>"
"1190splitHere46","161005splitHere46","try {<newline46mondego>  method.invoke(obj, arg1, arg2,...);<newline46mondego>} catch (IllegalArgumentException e) {<newline46mondego>} catch (IllegalAccessException e) {<newline46mondego>} catch (InvocationTargetException e) {<newline46mondego>"
"1191splitHere46","161478splitHere46","Transformer"
"1192splitHere46","161478splitHere46","StreamResult"
"1193splitHere46","161478splitHere46","transform"
"1194splitHere46","161478splitHere46","transformer.setOutputProperty(OutputKeys.INDENT, <doubleQuotes46>yes<doubleQuotes46>);<newline46mondego>"
"1195splitHere46","161625splitHere46","MyAbstract.class<newline46mondego>"
"1196splitHere46","161787splitHere46","public"
"1197splitHere46","161787splitHere46","abstract"
"1198splitHere46","161888splitHere46","Runtime.getRuntime().exec(new String[] {<doubleQuotes46>sh<doubleQuotes46>, <doubleQuotes46>-l<doubleQuotes46>, <doubleQuotes46>-c<doubleQuotes46>, <doubleQuotes46>./foo<doubleQuotes46>});<newline46mondego>"
"1199splitHere46","161888splitHere46","echo <doubleQuotes46>Hello, world!<doubleQuotes46>"
"1200splitHere46","161888splitHere46","Runtime.getRuntime().exec(new String[] {<doubleQuotes46>echo<doubleQuotes46>, <doubleQuotes46>Hello, world!<doubleQuotes46>});<newline46mondego>"
"1201splitHere46","161888splitHere46","echo"
"1202splitHere46","161888splitHere46","/bin/echo"
"1203splitHere46","162145splitHere46","import java.sql.ResultSet;<newline46mondego>import java.sql.SQLException;<newline46mondego><newline46mondego>import org.hibernate.type.CharacterType;<newline46mondego><newline46mondego>public class NullCharacterType extends CharacterType {<newline46mondego><newline46mondego>    /**<newline46mondego>     * Serializable ID generated by Eclipse<newline46mondego>     */<newline46mondego>    private static final long serialVersionUID = 1L;<newline46mondego><newline46mondego>    public NullCharacterType() {<newline46mondego>        super();<newline46mondego>    }<newline46mondego><newline46mondego>    public Object get(final ResultSet rs, final String name)<newline46mondego>    		throws SQLException {<newline46mondego>    	final String str = rs.getString(name);<newline46mondego>    	if (str == null || str.length() == 0) {<newline46mondego>    		return new Character((char) 0);<newline46mondego>    	} else {<newline46mondego>    		return new Character(str.charAt(0));<newline46mondego>    	}<newline46mondego>    }<newline46mondego>}<newline46mondego>"
"1204splitHere46","162145splitHere46","<property name=<doubleQuotes46>theChar<doubleQuotes46> type=<doubleQuotes46>character<doubleQuotes46>><newline46mondego>"
"1205splitHere46","162145splitHere46","<property name=<doubleQuotes46>theChar<doubleQuotes46> type=<doubleQuotes46>yourpackage.NullCharacterType<doubleQuotes46>><newline46mondego>"
"1206splitHere46","162629splitHere46","SELECT COUNT(1) FROM table_name<newline46mondego>"
"1207splitHere46","163228splitHere46","<pre><newline46mondego>// Flex doesn't know how to generate an HTTP DELETE.<newline46mondego>// Fortunately, sMash/Zero will interpret an HTTP POST with<newline46mondego>// an X-Method-Override: DELETE header as a DELETE.<newline46mondego>deleteTodoHS.headers['X-Method-Override'] = 'DELETE';</pre>"
"1208splitHere46","163398splitHere46","String regex = <doubleQuotes46>^(https?|ftp|file)://[-a-zA-Z0-9+&@#/%?=~_|!:,.;]*[-a-zA-Z0-9+&@#/%=~_|]<doubleQuotes46>;<newline46mondego>"
"1209splitHere46","163398splitHere46","String regex = <doubleQuotes46>\\b(https?|ftp|file)://[-a-zA-Z0-9+&@#/%?=~_|!:,.;]*[-a-zA-Z0-9+&@#/%=~_|]<doubleQuotes46>;<newline46mondego>"
"1210splitHere46","163398splitHere46","String regex = <doubleQuotes46><\\b(https?|ftp|file)://[-a-zA-Z0-9+&@#/%?=~_|!:,.;]*[-a-zA-Z0-9+&@#/%=~_|]><doubleQuotes46>; // matches <http://google.com><newline46mondego><newline46mondego>String regex = <doubleQuotes46><^(https?|ftp|file)://[-a-zA-Z0-9+&@#/%?=~_|!:,.;]*[-a-zA-Z0-9+&@#/%=~_|]><doubleQuotes46>; // does not match <http://google.com><newline46mondego>"
"1211splitHere46","163413splitHere46","Class<? extends Test> testType = type == null ? Test.class : type;<newline46mondego>"
"1212splitHere46","163413splitHere46","Number"
"1213splitHere46","163413splitHere46","public <T extends Number> void testNumber(final Class<T> type)<newline46mondego>"
"1214splitHere46","163413splitHere46","testNumber(Integer.class);<newline46mondego>testNumber(Number.class);<newline46mondego>"
"1215splitHere46","163413splitHere46","testNumber(String.class);<newline46mondego>"
"1216splitHere46","163413splitHere46","Class<Number> numberClass = Number.class;<newline46mondego>Class<Integer> integerClass = numberClass;<newline46mondego>"
"1217splitHere46","163413splitHere46","Type mismatch: cannot convert from Class<Number> to Class<Integer>"
"1218splitHere46","163413splitHere46","Integer"
"1219splitHere46","163413splitHere46","Number"
"1220splitHere46","163413splitHere46","Number anumber = new Long(0);<newline46mondego>Integer another = anumber;<newline46mondego>"
"1221splitHere46","163413splitHere46","Number"
"1222splitHere46","163413splitHere46","Integer"
"1223splitHere46","163413splitHere46","Number"
"1224splitHere46","163413splitHere46","Number"
"1225splitHere46","163413splitHere46","Long"
"1226splitHere46","163413splitHere46","Integer"
"1227splitHere46","163413splitHere46","Type mismatch: cannot convert from Number to Integer"
"1228splitHere46","163413splitHere46","T"
"1229splitHere46","163413splitHere46","testNumber(Integer.class)"
"1230splitHere46","163413splitHere46","T"
"1231splitHere46","163413splitHere46","Integer"
"1232splitHere46","163413splitHere46","Class<? extends Number> wildcard = numberClass;<newline46mondego>"
"1233splitHere46","163413splitHere46","Class<? extends Number>"
"1234splitHere46","163413splitHere46","Number"
"1235splitHere46","163413splitHere46","Number"
"1236splitHere46","163431splitHere46","<newline46mondego><%@ page import=<doubleQuotes46>com.example.Direction<doubleQuotes46> %><newline46mondego>...<newline46mondego><p>Direction is <%=foo.direction.getFriendlyName()%></p><newline46mondego><% if (foo.direction == Direction.ASC) { %><newline46mondego><p>That means you're going to heaven!</p><newline46mondego><% } %><newline46mondego>"
"1237splitHere46","164030splitHere46","AC_CHECK_HEADER"
"1238splitHere46","164030splitHere46","CPPFLAGS"
"1239splitHere46","164030splitHere46","libjvm"
"1240splitHere46","164030splitHere46","dlopen"
"1241splitHere46","164030splitHere46","JAVA_HOME"
"1242splitHere46","164030splitHere46","JAVA_HOME"
"1243splitHere46","164030splitHere46","AC_CHECK_HEADER([jni.h], [have_jni=yes])<newline46mondego>AC_ARG_VAR([JAVA_HOME], [Java Runtime Environment (JRE) location])<newline46mondego>AC_ARG_ENABLE([java-feature],<newline46mondego>              [AC_HELP_STRING([--disable-java-feature],<newline46mondego>                              [disable Java feature])])<newline46mondego>case $target_cpu in<newline46mondego>     x86_64) JVM_ARCH=amd64 ;;<newline46mondego>     i?86)   JVM_ARCH=i386 ;;<newline46mondego>     *)      JVM_ARCH=$target_cpu ;;<newline46mondego>esac<newline46mondego>AC_SUBST([JVM_ARCH])<newline46mondego>AS_IF([test X$enable_java_feature != Xno],<newline46mondego>[AS_IF([test X$have_jni != Xyes],<newline46mondego>       [AC_MSG_FAILURE([The Java Native Interface is required for Java feature.])])<newline46mondego>AS_IF([test -z <doubleQuotes46>$JAVA_HOME<doubleQuotes46>],<newline46mondego>[AC_MSG_WARN([JAVA_HOME has not been set.  JAVA_HOME must be set at run time to locate libjvm.])],<newline46mondego>[save_LDFLAGS=$LDFLAGS<newline46mondego>LDFLAGS=<doubleQuotes46>-L$JAVA_HOME/lib/$JVM_ARCH/client -L$JAVA_HOME/lib/$JVM_ARCH/server $LDFLAGS<doubleQuotes46><newline46mondego>AC_CHECK_LIB([jvm], [JNI_CreateJavaVM], [LIBS=$LIBS],<newline46mondego>             [AC_MSG_WARN([no libjvm found at JAVA_HOME])])<newline46mondego>LDFLAGS=$save_LDFLAGS<newline46mondego>])])<newline46mondego>"
"1244splitHere46","165057splitHere46","final double EPSILON = 0.00000000000001;<newline46mondego>"
"1245splitHere46","166024splitHere46","paddleXTracker"
"1246splitHere46","166024splitHere46","paddleXTrackerTwo"
"1247splitHere46","166024splitHere46","paddleXTrackerThree"
"1248splitHere46","166024splitHere46","paddle*Tracker*"
"1249splitHere46","166024splitHere46","paddleXTrackerTwo"
"1250splitHere46","166024splitHere46","paddleXTracker"
"1251splitHere46","166039splitHere46","void foo(Bar * b) ...<newline46mondego>... b->bar() ...<newline46mondego>"
"1252splitHere46","166039splitHere46","void foo(Bar b) ...<newline46mondego>... b.bar() ...<newline46mondego>"
"1253splitHere46","166069splitHere46","import java.util.*;<newline46mondego>import bernard.myProject.*;<newline46mondego>import org.apache.commons.lang.*;<newline46mondego>"
"1254splitHere46","167092splitHere46","info"
"1255splitHere46","167092splitHere46","rev"
"1256splitHere46","167140splitHere46","protected List<String> getSecurityRoles() {<newline46mondego>	List<String> roles = new ArrayList<String>();<newline46mondego>	ServletContext sc = this.getServletContext();<newline46mondego>	InputStream is = sc.getResourceAsStream(<doubleQuotes46>/WEB-INF/web.xml<doubleQuotes46>);<newline46mondego><newline46mondego>	try {<newline46mondego>		SAXReader reader = new SAXReader();<newline46mondego>		Document doc = reader.read(is);<newline46mondego><newline46mondego>		Element webApp = doc.getRootElement();<newline46mondego><newline46mondego>		// Type safety warning:  dom4j doesn't use generics<newline46mondego>		List<Element> roleElements = webApp.elements(<doubleQuotes46>security-role<doubleQuotes46>);<newline46mondego>		for (Element roleEl : roleElements) {<newline46mondego>			roles.add(roleEl.element(<doubleQuotes46>role-name<doubleQuotes46>).getText());<newline46mondego>		}<newline46mondego>	} catch (DocumentException e) {<newline46mondego>		e.printStackTrace();<newline46mondego>	}<newline46mondego><newline46mondego>	return roles;<newline46mondego>}<newline46mondego>"
"1257splitHere46","167163splitHere46","abstract class B {<newline46mondego>    public abstract B foo();<newline46mondego>}<newline46mondego>"
"1258splitHere46","167163splitHere46","abstract class B {<newline46mondego>    private final BFactory factory;<newline46mondego>    protected B(BFactory factory) {<newline46mondego>        this.factory = factory;<newline46mondego>    }<newline46mondego>    public B foo() {<newline46mondego>        return factory.create();<newline46mondego>    }<newline46mondego>}<newline46mondego>interface BFactory {<newline46mondego>    B create();<newline46mondego>}<newline46mondego>"
"1259splitHere46","167284splitHere46","release"
"1260splitHere46","167284splitHere46","debug"
"1261splitHere46","167971splitHere46","JAXBContext context = JAXBContext.newInstance(this.getClass());<newline46mondego>"
"1262splitHere46","169286splitHere46","List<User> users = Collections.emptyList();<newline46mondego>"
"1263splitHere46","169286splitHere46","Collections.emptyList();"
"1264splitHere46","169286splitHere46","String"
"1265splitHere46","169286splitHere46","List<User> users = Collections.<User>emptyList();<newline46mondego>"
"1266splitHere46","169286splitHere46","void doStuff(List<String> users)"
"1267splitHere46","169286splitHere46","doStuff()"
"1268splitHere46","169286splitHere46","doStuff(Collections.<String>emptyList());<newline46mondego>"
"1269splitHere46","169671splitHere46","A"
"1270splitHere46","169857splitHere46","mainPanel.setLayout(new java.awt.BorderLayout());<newline46mondego>"
"1271splitHere46","170069splitHere46","public class Main extends PApplet<newline46mondego>{<newline46mondego>  ...<newline46mondego><newline46mondego>  int currentColor = gray;<newline46mondego><newline46mondego>  public Main(){}<newline46mondego><newline46mondego>  ...<newline46mondego><newline46mondego>  public void draw()<newline46mondego>    {<newline46mondego>        if( i % 11 == 0 )<newline46mondego>           currentColor = green;<newline46mondego>        else if( i % 13 == 0 )<newline46mondego>           currentColor = blue;<newline46mondego>        else if( i % 17 == 0 )<newline46mondego>           currentColor = pink;<newline46mondego>        else {<newline46mondego>           // Use current color<newline46mondego>        } <newline46mondego><newline46mondego>        fill(currentColor);<newline46mondego><newline46mondego>        ...<newline46mondego>}<newline46mondego>"
"1272splitHere46","170069splitHere46","else if ( i % 19 ) {<newline46mondego>    currentColor = gray;<newline46mondego>  }<newline46mondego>"
"1273splitHere46","170392splitHere46","import java.awt.Component;<newline46mondego>import java.awt.Graphics2D;<newline46mondego>import java.awt.image.BufferedImage;<newline46mondego>import java.io.File;<newline46mondego>import java.io.IOException;<newline46mondego><newline46mondego>import javax.imageio.ImageIO;<newline46mondego>import javax.swing.JLabel;<newline46mondego><newline46mondego>public class Capture {<newline46mondego><newline46mondego>    private static final int WIDTH = 128;<newline46mondego>    private static final int HEIGHT = 128;<newline46mondego><newline46mondego>    private BufferedImage image = new BufferedImage(WIDTH, HEIGHT,<newline46mondego>    		BufferedImage.TYPE_INT_RGB);<newline46mondego><newline46mondego>    public void capture(Component component) {<newline46mondego>    	component.setSize(image.getWidth(), image.getHeight());<newline46mondego><newline46mondego>    	Graphics2D g = image.createGraphics();<newline46mondego>    	try {<newline46mondego>    		component.paint(g);<newline46mondego>    	} finally {<newline46mondego>    		g.dispose();<newline46mondego>    	}<newline46mondego>    }<newline46mondego><newline46mondego>    private BufferedImage getScaledImage(int width, int height) {<newline46mondego>    	BufferedImage buffer = new BufferedImage(width, height,<newline46mondego>    			BufferedImage.TYPE_INT_RGB);<newline46mondego>    	Graphics2D g = buffer.createGraphics();<newline46mondego>    	try {<newline46mondego>    		g.drawImage(image, 0, 0, width, height, null);<newline46mondego>    	} finally {<newline46mondego>    		g.dispose();<newline46mondego>    	}<newline46mondego>    	return buffer;<newline46mondego>    }<newline46mondego><newline46mondego>    public void save(File png, int width, int height) throws IOException {<newline46mondego>    	ImageIO.write(getScaledImage(width, height), <doubleQuotes46>png<doubleQuotes46>, png);<newline46mondego>    }<newline46mondego><newline46mondego>    public static void main(String[] args) throws IOException {<newline46mondego>    	JLabel label = new JLabel();<newline46mondego>    	label.setText(<doubleQuotes46>Hello, World!<doubleQuotes46>);<newline46mondego>    	label.setOpaque(true);<newline46mondego><newline46mondego>    	Capture cap = new Capture();<newline46mondego>    	cap.capture(label);<newline46mondego>    	cap.save(new File(<doubleQuotes46>foo.png<doubleQuotes46>), 64, 64);<newline46mondego>    }<newline46mondego><newline46mondego>}<newline46mondego>"
"1274splitHere46","170667splitHere46","PersistentMap"
"1275splitHere46","170667splitHere46","Serializable"
"1276splitHere46","170667splitHere46","Map"
"1277splitHere46","170877splitHere46","<context-param><newline46mondego>  <param-name>javax.faces.STATE_SAVING_METHOD</param-name><newline46mondego>  <param-value>server</param-value><newline46mondego> </context-param><newline46mondego>"
"1278splitHere46","171187splitHere46","public class GameInput {<newline46mondego><newline46mondego>    private Scanner scanner;<newline46mondego><newline46mondego>    /**CLI constructor*/<newline46mondego>    public GameInput() {<newline46mondego>    	scanner = new Scanner(System.in);<newline46mondego>    }<newline46mondego><newline46mondego>    /**GUI constructor*/<newline46mondego>    public GameInput(PipedOutputStream out) throws IOException {<newline46mondego>    	InputStream in = new PipedInputStream(out);<newline46mondego>    	scanner = new Scanner(in);<newline46mondego>    }<newline46mondego><newline46mondego>    public String getInput() {<newline46mondego>    	return scanner.nextLine();<newline46mondego>    }<newline46mondego><newline46mondego>    public static void main(String[] args) throws IOException {<newline46mondego>    	GameInput gameInput;<newline46mondego><newline46mondego>    	PipedOutputStream output = new PipedOutputStream();<newline46mondego>    	final PrintWriter writer = new PrintWriter(output);<newline46mondego>    	gameInput = new GameInput(output);<newline46mondego><newline46mondego>    	final JTextField textField = new JTextField(30);<newline46mondego>    	final JButton button = new JButton(<doubleQuotes46>OK<doubleQuotes46>);<newline46mondego>    	button.addActionListener(new ActionListener() {<newline46mondego>    		@Override<newline46mondego>    		public void actionPerformed(ActionEvent e) {<newline46mondego>    			String data = textField.getText();<newline46mondego>    			writer.println(data);<newline46mondego>    			writer.flush();<newline46mondego>    		}<newline46mondego>    	});<newline46mondego><newline46mondego>    	JFrame frame = new JFrame();<newline46mondego>    	frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);<newline46mondego>    	frame.getContentPane().setLayout(new FlowLayout());<newline46mondego>    	frame.getContentPane().add(textField);<newline46mondego>    	frame.getContentPane().add(button);<newline46mondego>    	frame.pack();<newline46mondego>    	frame.setVisible(true);<newline46mondego><newline46mondego>    	String data = gameInput.getInput();<newline46mondego>    	System.out.println(<doubleQuotes46>Input=<doubleQuotes46> + data);<newline46mondego>    	System.exit(0);<newline46mondego>    }<newline46mondego><newline46mondego>}<newline46mondego>"
"1279splitHere46","171192splitHere46","<?xml version=<doubleQuotes46>1.0<doubleQuotes46>?><newline46mondego><project name=<doubleQuotes46>jspc<doubleQuotes46> basedir=<doubleQuotes46>.<doubleQuotes46> default=<doubleQuotes46>all<doubleQuotes46>><newline46mondego> <import file=<doubleQuotes46>${build.appserver.home}/bin/catalina-tasks.xml<doubleQuotes46>/><newline46mondego><newline46mondego> <target name=<doubleQuotes46>all<doubleQuotes46> depends=<doubleQuotes46>jspc,compile<doubleQuotes46>></target><newline46mondego><newline46mondego> <target name=<doubleQuotes46>jspc<doubleQuotes46>><newline46mondego>  <jasper<newline46mondego>   validateXml=<doubleQuotes46>false<doubleQuotes46><newline46mondego>   uriroot=<doubleQuotes46>${build.war.dir}<doubleQuotes46><newline46mondego>   webXmlFragment=<doubleQuotes46>${build.war.dir}/WEB-INF/generated_web.xml<doubleQuotes46><newline46mondego>   addWebXmlMappings=<doubleQuotes46>true<doubleQuotes46><newline46mondego>   outputDir=<doubleQuotes46>${build.src.dir}<doubleQuotes46> /><newline46mondego> </target><newline46mondego><newline46mondego> <target name=<doubleQuotes46>compile<doubleQuotes46>><newline46mondego>  <javac destdir=<doubleQuotes46>${build.dir}/classes<doubleQuotes46><newline46mondego>   srcdir=<doubleQuotes46>${build.src.dir}<doubleQuotes46><newline46mondego>   optimize=<doubleQuotes46>on<doubleQuotes46><newline46mondego>   debug=<doubleQuotes46>off<doubleQuotes46><newline46mondego>   failonerror=<doubleQuotes46>true<doubleQuotes46><newline46mondego>   source=<doubleQuotes46>1.5<doubleQuotes46><newline46mondego>   target=<doubleQuotes46>1.5<doubleQuotes46><newline46mondego>   excludes=<doubleQuotes46>**/*.smap<doubleQuotes46>><newline46mondego>   <classpath><newline46mondego>    <fileset dir=<doubleQuotes46>${build.war.dir}/WEB-INF/classes<doubleQuotes46>><newline46mondego>     <include name=<doubleQuotes46>*.class<doubleQuotes46> /><newline46mondego>    </fileset><newline46mondego>    <fileset dir=<doubleQuotes46>${build.war.lib.dir}<doubleQuotes46>><newline46mondego>     <include name=<doubleQuotes46>*.jar<doubleQuotes46> /><newline46mondego>    </fileset><newline46mondego>    <fileset dir=<doubleQuotes46>${build.appserver.home}/lib<doubleQuotes46>><newline46mondego>     <include name=<doubleQuotes46>*.jar<doubleQuotes46> /><newline46mondego>    </fileset>    <newline46mondego>    <fileset dir=<doubleQuotes46>${build.appserver.home}/bin<doubleQuotes46>><newline46mondego>     <include name=<doubleQuotes46>*.jar<doubleQuotes46>/><newline46mondego>    </fileset><newline46mondego>   </classpath><newline46mondego>    <include name=<doubleQuotes46>**<doubleQuotes46> /><newline46mondego>    <exclude name=<doubleQuotes46>tags/**<doubleQuotes46>/><newline46mondego>  </javac><newline46mondego> </target><newline46mondego><newline46mondego> <target name=<doubleQuotes46>clean<doubleQuotes46>><newline46mondego>  <delete><newline46mondego>   <fileset dir=<doubleQuotes46>${build.src.dir}<doubleQuotes46>/><newline46mondego>   <fileset dir=<doubleQuotes46>${build.dir}/classes/org/apache/jsp<doubleQuotes46>/><newline46mondego>  </delete><newline46mondego> </target><newline46mondego></project><newline46mondego>"
"1280splitHere46","171260splitHere46","<form:select path=<doubleQuotes46>country<doubleQuotes46> title=<doubleQuotes46>country<doubleQuotes46> ><newline46mondego>     <form:option value=<doubleQuotes46><doubleQuotes46>>& </form:option><newline46mondego>     <form:options items=<doubleQuotes46>${countryList}<doubleQuotes46> /><newline46mondego></form:select><newline46mondego>"
"1281splitHere46","171927splitHere46","<exec executable=<doubleQuotes46>svnversion<doubleQuotes46> outputproperty=<doubleQuotes46>svnversion<doubleQuotes46> failonerror=<doubleQuotes46>true<doubleQuotes46>><newline46mondego>  <env key=<doubleQuotes46>path<doubleQuotes46> value=<doubleQuotes46>/usr/bin<doubleQuotes46>/><newline46mondego>  <arg value=<doubleQuotes46>--no-newline<doubleQuotes46> /><newline46mondego></exec><newline46mondego>"
"1282splitHere46","171927splitHere46","<!-- myapp-r1234.ear --><newline46mondego><property name=<doubleQuotes46>ear<doubleQuotes46> value=<doubleQuotes46>myapp-r${svnrevision}.ear<doubleQuotes46> /><newline46mondego>"
"1283splitHere46","173783splitHere46","dateField = new SimpleFormat(<doubleQuotes46>YYYY-mm-dd<doubleQuotes46>).parse(this.year + <doubleQuotes46>-<doubleQuotes46> + this.month + <doubleQuotes46>-<doubleQuotes46> this.day);<newline46mondego>"
"1284splitHere46","173783splitHere46","Calendar c = Calendar.getInstance();<newline46mondego>c.set(year, month, day);<newline46mondego>dateField = calendar.getTime();<newline46mondego>"
"1285splitHere46","174146splitHere46","MyClass[] arr = myList.toArray(new MyClass[myList.size()]);<newline46mondego>"
"1286splitHere46","174146splitHere46","MyClass[] arr = myList.toArray(new MyClass[0]);<newline46mondego>"
"1287splitHere46","174146splitHere46","public <T> T[] toArray(T[] a) {<newline46mondego>    if (a.length < size)<newline46mondego>        // Make a new array of a's runtime type, but my contents:<newline46mondego>        return (T[]) Arrays.copyOf(elementData, size, a.getClass());<newline46mondego>    System.arraycopy(elementData, 0, a, 0, size);<newline46mondego>    if (a.length > size)<newline46mondego>        a[size] = null;<newline46mondego>    return a;<newline46mondego>}<newline46mondego>"
"1288splitHere46","174445splitHere46","<depend>"
"1289splitHere46","175552splitHere46","foo.this"
"1290splitHere46","175552splitHere46","foo.that"
"1291splitHere46","175552splitHere46","org.apache.project.component.lower.level.names"
"1292splitHere46","175552splitHere46","com.projectX.foo.this"
"1293splitHere46","175552splitHere46","com.projectZ.foo.that"
"1294splitHere46","175664splitHere46","<plugin><newline46mondego>    <groupId>org.apache.maven.plugins</groupId><newline46mondego>    <artifactId>maven-antrun-plugin</artifactId><newline46mondego>    <version>1.2</version><newline46mondego>    <executions><newline46mondego>      <execution><newline46mondego>        <phase> <!-- a lifecycle phase --> </phase><newline46mondego>        <configuration><newline46mondego><newline46mondego>          <tasks><newline46mondego>            <apply os=<doubleQuotes46>unix<doubleQuotes46> executable=<doubleQuotes46>cmd<doubleQuotes46>><newline46mondego>              <arg value=<doubleQuotes46>/c<doubleQuotes46>/><newline46mondego>              <arg value=<doubleQuotes46>ant.bat<doubleQuotes46>/><newline46mondego>              <arg value=<doubleQuotes46>-p<doubleQuotes46>/><newline46mondego>            </apply><newline46mondego>            <apply os=<doubleQuotes46>windows<doubleQuotes46> executable=<doubleQuotes46>cmd.exe<doubleQuotes46>><newline46mondego>              <arg value=<doubleQuotes46>/c<doubleQuotes46>/><newline46mondego>              <arg value=<doubleQuotes46>ant.bat<doubleQuotes46>/><newline46mondego>              <arg value=<doubleQuotes46>-p<doubleQuotes46>/><newline46mondego>            </apply><newline46mondego>          </tasks><newline46mondego><newline46mondego>        </configuration><newline46mondego>        <goals><newline46mondego>          <goal>run</goal><newline46mondego>        </goals><newline46mondego>      </execution><newline46mondego>    </executions><newline46mondego>  </plugin><newline46mondego>"
"1295splitHere46","176039splitHere46","....<newline46mondego><bean id=<doubleQuotes46>validator<doubleQuotes46> class=<doubleQuotes46>org.springmodules.validation.bean.BeanValidator<doubleQuotes46><newline46mondego>    p:configurationLoader-ref=<doubleQuotes46>configurationLoader<doubleQuotes46><newline46mondego>    p:errorCodeConverter-ref=<doubleQuotes46>errorCodeConverter<doubleQuotes46> /><newline46mondego><newline46mondego><bean id=<doubleQuotes46>errorCodeConverter<doubleQuotes46> class=<doubleQuotes46>contact.MyErrorCodeConverter<doubleQuotes46> /><newline46mondego>....<newline46mondego>"
"1296splitHere46","176039splitHere46","package contact;<newline46mondego><newline46mondego>import org.apache.commons.logging.Log;<newline46mondego>import org.apache.commons.logging.LogFactory;<newline46mondego>import org.springmodules.validation.bean.converter.ErrorCodeConverter;<newline46mondego><newline46mondego>public class MyErrorCodeConverter implements ErrorCodeConverter {<newline46mondego><newline46mondego>    private Log log = LogFactory.getLog(MyErrorCodeConverter.class);<newline46mondego><newline46mondego>    @Override<newline46mondego>    public String convertPropertyErrorCode(String errorCode, Class clazz, String property) {<newline46mondego>        log.error(String.format(<doubleQuotes46>Property %s %s %s<doubleQuotes46>, errorCode, clazz.getClass().getName(), property));<newline46mondego>        return errorCode;  // <------ use the errorCode only<newline46mondego>    }<newline46mondego><newline46mondego>    @Override<newline46mondego>    public String convertGlobalErrorCode(String errorCode, Class clazz) {<newline46mondego>        log.error(String.format(<doubleQuotes46>Global %s %s<doubleQuotes46>, errorCode, clazz.getClass().getName()));<newline46mondego>        return errorCode;<newline46mondego>    }<newline46mondego>}<newline46mondego>"
"1297splitHere46","176039splitHere46","MyEmailErrorCode=Bad email<newline46mondego><newline46mondego>class Foo {<newline46mondego>    @Email(errorCode=<doubleQuotes46>MyEmailErrorCode<doubleQuotes46>)<newline46mondego>    String email<newline46mondego>}<newline46mondego>"
"1298splitHere46","176154splitHere46","new String(<doubleQuotes46>¿<doubleQuotes46>.getBytes(<doubleQuotes46>utf-8<doubleQuotes46>), <doubleQuotes46>utf-8<doubleQuotes46>);<newline46mondego>"
"1299splitHere46","176478splitHere46","1  public List<? extends Foo> getFoos()<newline46mondego>2  {<newline46mondego>3    List<Foo> foos = new ArrayList<Foo>(); /* Or List<SubFoo> */<newline46mondego>4    foos.add(new SubFoo());<newline46mondego>5    return foos;<newline46mondego>6  }<newline46mondego>"
"1300splitHere46","176478splitHere46","List<? extends Foo>"
"1301splitHere46","176478splitHere46","ArrayList<AltFoo>"
"1302splitHere46","176478splitHere46","foos"
"1303splitHere46","176724splitHere46","javac"
"1304splitHere46","176724splitHere46","new String(<doubleQuotes46>¿<doubleQuotes46>.getBytes(<doubleQuotes46>UTF-8<doubleQuotes46>), <doubleQuotes46>UTF-8<doubleQuotes46>)<newline46mondego>"
"1305splitHere46","176724splitHere46","FileOutputStream fos = new FileOutputStream(<doubleQuotes46>out.txt<doubleQuotes46>);<newline46mondego>OutputStreamWriter osw = new OutputStreamWriter(fos, <doubleQuotes46>UTF-8<doubleQuotes46>);<newline46mondego>"
"1306splitHere46","176925splitHere46","double utmZoneCenterLongitude = ...  // Center lon of zone, example: zone 10 = -123<newline46mondego>int zoneNumber = ...                 // zone number, example: 10<newline46mondego>double latitude, longitude = ...     // lat, lon in degrees<newline46mondego><newline46mondego>MathTransformFactory mtFactory = ReferencingFactoryFinder.getMathTransformFactory(null);<newline46mondego>ReferencingFactoryContainer factories = new ReferencingFactoryContainer(null);<newline46mondego><newline46mondego>GeographicCRS geoCRS = org.geotools.referencing.crs.DefaultGeographicCRS.WGS84;<newline46mondego>CartesianCS cartCS = org.geotools.referencing.cs.DefaultCartesianCS.GENERIC_2D;<newline46mondego><newline46mondego>ParameterValueGroup parameters = mtFactory.getDefaultParameters(<doubleQuotes46>Transverse_Mercator<doubleQuotes46>);<newline46mondego>parameters.parameter(<doubleQuotes46>central_meridian<doubleQuotes46>).setValue(utmZoneCenterLongitude);<newline46mondego>parameters.parameter(<doubleQuotes46>latitude_of_origin<doubleQuotes46>).setValue(0.0);<newline46mondego>parameters.parameter(<doubleQuotes46>scale_factor<doubleQuotes46>).setValue(0.9996);<newline46mondego>parameters.parameter(<doubleQuotes46>false_easting<doubleQuotes46>).setValue(500000.0);<newline46mondego>parameters.parameter(<doubleQuotes46>false_northing<doubleQuotes46>).setValue(0.0);<newline46mondego><newline46mondego>Map properties = Collections.singletonMap(<doubleQuotes46>name<doubleQuotes46>, <doubleQuotes46>WGS 84 / UTM Zone <doubleQuotes46> + zoneNumber);<newline46mondego>ProjectedCRS projCRS = factories.createProjectedCRS(properties, geoCRS, null, parameters, cartCS);<newline46mondego><newline46mondego>MathTransform transform = CRS.findMathTransform(geoCRS, projCRS);<newline46mondego><newline46mondego>double[] dest = new double[2];<newline46mondego>transform.transform(new double[] {longitude, latitude}, 0, dest, 0, 1);<newline46mondego><newline46mondego>int easting = (int)Math.round(dest[0]);<newline46mondego>int northing = (int)Math.round(dest[1]);<newline46mondego>"
"1307splitHere46","177201splitHere46","InetAddress.getLocalHost()"
"1308splitHere46","177201splitHere46","InetAddress.getByAddress(new byte[] {127, 0, 0, 1})"
"1309splitHere46","177201splitHere46","getLocalHost"
"1310splitHere46","177201splitHere46","127.0.0.1"
"1311splitHere46","177201splitHere46","getLocalHost"
"1312splitHere46","177201splitHere46","127.0.0.1"
"1313splitHere46","177636splitHere46","class ApplicationDataModel {<newline46mondego><newline46mondego>    private Flag current = Flag.RW;<newline46mondego><newline46mondego>    public void setData(ApplicationData data) {<newline46mondego>        current = Flag.RO;<newline46mondego>        setDataImpl(data);<newline46mondego>        notifyObservers();<newline46mondego>        current = Flag.RW;<newline46mondego>    }<newline46mondego><newline46mondego>    public void reaction(Event e) {<newline46mondego>        if (flag = Flag.RO) return;<newline46mondego>        ...<newline46mondego>    }<newline46mondego><newline46mondego>}<newline46mondego>"
"1314splitHere46","177636splitHere46","ApplicationData"
"1315splitHere46","177833splitHere46","${jboss.server.dir}/lib"
"1316splitHere46","177880splitHere46","response.setHeader(<doubleQuotes46>Content-Disposition<doubleQuotes46>,<doubleQuotes46>attachment; filename=\<doubleQuotes46><doubleQuotes46> + filename + <doubleQuotes46>\<doubleQuotes46><doubleQuotes46>);<newline46mondego>"
"1317splitHere46","178030splitHere46","public class ClassEnumerator {<newline46mondego>    public static void main(String[] args) throws ClassNotFoundException {<newline46mondego>    	List<Class<?>> list = listClassesInSamePackage(Locator.class, true);<newline46mondego><newline46mondego>    	System.out.println(list);<newline46mondego>    }<newline46mondego><newline46mondego>    private static List<Class<?>> listClassesInSamePackage(Class<?> locator, boolean includeLocator) <newline46mondego>                                                                      throws ClassNotFoundException {<newline46mondego><newline46mondego>    	File packageFile = getPackageFile(locator);<newline46mondego><newline46mondego>    	String ignore = includeLocator ? null : locator.getSimpleName() + <doubleQuotes46>.class<doubleQuotes46>;<newline46mondego><newline46mondego>    	return toClassList(locator.getPackage().getName(), listClassNames(packageFile, ignore));<newline46mondego>    }<newline46mondego><newline46mondego>    private static File getPackageFile(Class<?> locator) {<newline46mondego>    	URL url = locator.getClassLoader().getResource(locator.getName().replace(<doubleQuotes46>.<doubleQuotes46>, <doubleQuotes46>/<doubleQuotes46>) + <doubleQuotes46>.class<doubleQuotes46>);<newline46mondego>    	if (url == null) {<newline46mondego>    		throw new RuntimeException(<doubleQuotes46>Cannot locate <doubleQuotes46> + Locator.class.getName());<newline46mondego>    	}<newline46mondego><newline46mondego>    	try {<newline46mondego>		return new File(url.toURI()).getParentFile();<newline46mondego>    	}<newline46mondego>    	catch (URISyntaxException e) {<newline46mondego>    		throw new RuntimeException(e);<newline46mondego>    	}<newline46mondego>    }<newline46mondego><newline46mondego>    private static String[] listClassNames(File packageFile, final String ignore) {<newline46mondego>    	return packageFile.list(new FilenameFilter(){<newline46mondego>    		@Override<newline46mondego>    		public boolean accept(File dir, String name) {<newline46mondego>    			if (name.equals(ignore)) {<newline46mondego>    				return false;<newline46mondego>    			}<newline46mondego>    			return name.endsWith(<doubleQuotes46>.class<doubleQuotes46>);<newline46mondego>    		}<newline46mondego>    	});<newline46mondego>    }<newline46mondego><newline46mondego>    private static List<Class<?>> toClassList(String packageName, String[] classNames)<newline46mondego>                                                             throws ClassNotFoundException {<newline46mondego><newline46mondego>    	List<Class<?>> result = new ArrayList<Class<?>>(classNames.length);<newline46mondego>    	for (String className : classNames) {<newline46mondego>    		// Strip the .class<newline46mondego>    		String simpleName = className.substring(0, className.length() - 6);<newline46mondego><newline46mondego>    		result.add(Class.forName(packageName + <doubleQuotes46>.<doubleQuotes46> + simpleName));<newline46mondego>    	}<newline46mondego>    	return result;<newline46mondego>    }<newline46mondego>}<newline46mondego>"
"1318splitHere46","178090splitHere46","static string AcceptNotNullObject(object! s)<newline46mondego>{<newline46mondego>    return s.ToString();<newline46mondego>}<newline46mondego>"
"1319splitHere46","178237splitHere46","#include <doubleQuotes46>settings.txt<doubleQuotes46><newline46mondego>"
"1320splitHere46","178237splitHere46","#define myver=xxx.xxx<newline46mondego>#define tags<newline46mondego>"
"1321splitHere46","178237splitHere46","<exec dir=<doubleQuotes46>.<doubleQuotes46> executable=<doubleQuotes46>cmd<doubleQuotes46> os=<doubleQuotes46>Windows NT<doubleQuotes46>><newline46mondego>  <arg line=<doubleQuotes46>/c build.bat<doubleQuotes46>/><newline46mondego></exec><newline46mondego>"
"1322splitHere46","178237splitHere46","set isxpath=<doubleQuotes46>c:\program files\inno setup 5<doubleQuotes46><newline46mondego>set isx=%isxpath%\iscc.exe<newline46mondego>set iwz=myproj.iss<newline46mondego>if not exist %isx% set errormsg=%isx% not found && goto errorhandler<newline46mondego>%isx% <doubleQuotes46>%iwz%<doubleQuotes46> /O<doubleQuotes46>%buildpath%<doubleQuotes46> /F<doubleQuotes46>MySetupper.exe<doubleQuotes46> >>%logfile%<newline46mondego>goto :eof<newline46mondego>"
"1323splitHere46","179251splitHere46","<result name=<doubleQuotes46>redirect<doubleQuotes46> type=<doubleQuotes46>redirect<doubleQuotes46>>${url}</result><newline46mondego>"
"1324splitHere46","179251splitHere46","private String url;<newline46mondego><newline46mondego>public String getUrl()<newline46mondego>{<newline46mondego> return url;<newline46mondego>}<newline46mondego><newline46mondego>public String execute()<newline46mondego>{<newline46mondego> [other stuff to setup your date]<newline46mondego> url = <doubleQuotes46>/section/document<doubleQuotes46> + date;<newline46mondego> return <doubleQuotes46>redirect<doubleQuotes46>;<newline46mondego>}<newline46mondego>"
"1325splitHere46","179414splitHere46","throw new ConfigurationException(<doubleQuotes46>No service named<doubleQuotes46> + serviceName + <doubleQuotes46> is available<doubleQuotes46>);<newline46mondego>"
"1326splitHere46","179431splitHere46","Graphics"
"1327splitHere46","179431splitHere46","Graphics2D"
"1328splitHere46","179450splitHere46","<projectDescription><newline46mondego>    <buildSpec><newline46mondego>    	<buildCommand><newline46mondego>    		<name>org.eclipse.jdt.core.javabuilder</name><newline46mondego>    		<arguments><newline46mondego>    		</arguments><newline46mondego>    	</buildCommand><newline46mondego>    </buildSpec><newline46mondego>    <natures><newline46mondego>    	<nature>org.eclipse.jdt.core.javanature</nature><newline46mondego>    </natures><newline46mondego></projectDescription><newline46mondego>"
"1329splitHere46","179450splitHere46","<classpath><newline46mondego>    <classpathentry kind=<doubleQuotes46>con<doubleQuotes46> path=<doubleQuotes46>org.eclipse.jdt.launching.JRE_CONTAINER<doubleQuotes46>/><newline46mondego></classpath><newline46mondego>"
"1330splitHere46","179453splitHere46","import java.math.BigDecimal;<newline46mondego><newline46mondego>BigDecimal premium = BigDecimal.valueOf(1586.6d);<newline46mondego>BigDecimal netToCompany = BigDecimal.valueOf(708.75d);<newline46mondego>BigDecimal commission = premium.subtract(netToCompany);<newline46mondego>System.out.println(commission + <doubleQuotes46> = <doubleQuotes46> + premium + <doubleQuotes46> - <doubleQuotes46> + netToCompany);<newline46mondego>"
"1331splitHere46","179453splitHere46","877.85 = 1586.6 - 708.75<newline46mondego>"
"1332splitHere46","179870splitHere46","create database link other_db connect to remote_user identified by remote_passwd using remote_tnsname;<newline46mondego><newline46mondego>create table a as select * from a@other_db;<newline46mondego>"
"1333splitHere46","179971splitHere46","// enable anti-aliased text:<newline46mondego>  System.setProperty(<doubleQuotes46>awt.useSystemAAFontSettings<doubleQuotes46>,<doubleQuotes46>on<doubleQuotes46>);<newline46mondego>  System.setProperty(<doubleQuotes46>swing.aatext<doubleQuotes46>, <doubleQuotes46>true<doubleQuotes46>);<newline46mondego>"
"1334splitHere46","179971splitHere46","-Dawt.useSystemAAFontSettings=on -Dswing.aatext=true<newline46mondego>"
"1335splitHere46","180191splitHere46","long startTime = System.nanoTime();<newline46mondego>methodToTime();<newline46mondego>long endTime = System.nanoTime();<newline46mondego><newline46mondego>long duration = endTime - startTime;<newline46mondego>"
"1336splitHere46","180990splitHere46","Arrays.asList"
"1337splitHere46","180990splitHere46","Integer[] randomizer = new Integer[] {200,300,212,111,6,2332}; <newline46mondego>Collections.shuffle(Arrays.asList(randomizer));<newline46mondego>"
"1338splitHere46","180990splitHere46","int[]"
"1339splitHere46","180990splitHere46","asList"
"1340splitHere46","180990splitHere46","int"
"1341splitHere46","181401splitHere46","-Djava.security.manager -Djava.security.policy=<doubleQuotes46>XXXX\conf\catalina.policy<doubleQuotes46><newline46mondego>"
"1342splitHere46","181401splitHere46","C:\Program Files\Apache Software Foundation\Tomcat 5.5"
"1343splitHere46","181884splitHere46","response.setCharacterEncoding(<doubleQuotes46>UTF-8<doubleQuotes46>);"
"1344splitHere46","182601splitHere46","replaceregexp"
"1345splitHere46","182601splitHere46","<replaceregexp file=<doubleQuotes46>whatever<doubleQuotes46><newline46mondego>               match=<doubleQuotes46>(<feature\b[^<>]+?version=\<doubleQuotes46>)[^\<doubleQuotes46>]+<doubleQuotes46><newline46mondego>               replace=<doubleQuotes46>\1${feature.version}<doubleQuotes46> /><newline46mondego>"
"1346splitHere46","182601splitHere46","<feature>"
"1347splitHere46","182672splitHere46","public class MyGenericClass<T> {<newline46mondego><newline46mondego>    private final Class<T> clazz;<newline46mondego><newline46mondego>    public static <U> MyGenericClass<U> createMyGeneric(Class<U> clazz) {<newline46mondego>        return new MyGenericClass<U>(clazz);<newline46mondego>    }<newline46mondego><newline46mondego>    protected MyGenericClass(Class<T> clazz) {<newline46mondego>        this.clazz = clazz;<newline46mondego>    }<newline46mondego><newline46mondego>    public void doSomething() {<newline46mondego>        T instance = clazz.newInstance();<newline46mondego>    }<newline46mondego>}<newline46mondego>"
"1348splitHere46","182767splitHere46","foreach (X x in y)"
"1349splitHere46","182767splitHere46","for (X x : y)"
"1350splitHere46","183464splitHere46","$size = 0<newline46mondego>$count = 0<newline46mondego>$path = '\\unc\path\to\directory\to\monitor'<newline46mondego>get-childitem -path $path -recurse | Where-Object {$_ -is [System.IO.FileInfo]} | ForEach-Object {$size += $_.length; $count += 1}<newline46mondego>"
"1351splitHere46","183464splitHere46","$ESCkey  = 27<newline46mondego>Write-Host <doubleQuotes46>Press the ESC key to stop sniffing<doubleQuotes46> -foregroundcolor <doubleQuotes46>CYAN<doubleQuotes46><newline46mondego>$Running=$true<newline46mondego><newline46mondego>While ($Running)<newline46mondego>    { <newline46mondego>         if ($host.ui.RawUi.KeyAvailable) {<newline46mondego>         $key = $host.ui.RawUI.ReadKey(<doubleQuotes46>NoEcho,IncludeKeyUp,IncludeKeyDown<doubleQuotes46>)<newline46mondego>            if ($key.VirtualKeyCode -eq $ESCkey) { <newline46mondego>             $Running=$False<newline46mondego>            }<newline46mondego>         #rest of function here <newline46mondego>        }<newline46mondego>"
"1352splitHere46","184372splitHere46","resetButton.addActionListener(this);<newline46mondego>"
"1353splitHere46","184372splitHere46","resetButton.addActionListener(new ActionListener() {<newline46mondego>    public void actionPerformed(ActionEvent evt) {<newline46mondego>        resetButtonActionPerformed(evt);<newline46mondego>    }<newline46mondego>});<newline46mondego>"
"1354splitHere46","184372splitHere46","public void resetButtonActionPerformed(ActionEvent evt) {<newline46mondego>    messageX = 75; messageY = 175;<newline46mondego>    setForeground(Color.black);<newline46mondego>    blackButton.setSelected(true);<newline46mondego>    repaint();<newline46mondego>}<newline46mondego>"
"1355splitHere46","184566splitHere46","final CountDownLatch countdown = new CountDownLatch(1);<newline46mondego>for (int i = 0; i < 10; ++ i){<newline46mondego>   Thread racecar = new Thread() {    <newline46mondego>      public void run()    {<newline46mondego>         countdown.await(); //all threads waiting<newline46mondego>         System.out.println(<doubleQuotes46>Vroom!<doubleQuotes46>);<newline46mondego>      }<newline46mondego>   };<newline46mondego>   racecar.start();<newline46mondego>}<newline46mondego>System.out.println(<doubleQuotes46>Go<doubleQuotes46>);<newline46mondego>countdown.countDown();   //all threads start now!<newline46mondego>"
"1356splitHere46","184566splitHere46","final CountDownLatch countdown = new CountDownLatch(num_thread);<newline46mondego>for (int i = 0; i < num_thread; ++ i){<newline46mondego>   Thread t= new Thread() {    <newline46mondego>      public void run()    {<newline46mondego>         doSomething();<newline46mondego>         countdown.countDown();<newline46mondego>         System.out.printf(<doubleQuotes46>Waiting on %d other threads.<doubleQuotes46>,countdown.getCount());<newline46mondego>         countdown.await();     //waits until everyone reaches this point<newline46mondego>         finish();<newline46mondego>      }<newline46mondego>   };<newline46mondego>   t.start();<newline46mondego>}<newline46mondego>"
"1357splitHere46","184827splitHere46","sdf = new java.text.SimpleDateFormat(<doubleQuotes46>EEE MM/dd hh:mma<doubleQuotes46>);<newline46mondego>System.out.println(sdf.format(sdf.parse(<doubleQuotes46>Thu 10/9 08:15PM<doubleQuotes46>)));<newline46mondego>"
"1358splitHere46","185076splitHere46","RandomAccessFile"
"1359splitHere46","185076splitHere46","RandomAccessFile"
"1360splitHere46","185076splitHere46","InputStream"
"1361splitHere46","185076splitHere46","OutputStream"
"1362splitHere46","185076splitHere46","File"
"1363splitHere46","185076splitHere46","bytes"
"1364splitHere46","185076splitHere46","public static void aMethod(){<newline46mondego>    RandomAccessFile f = new RandomAccessFile(new File(<doubleQuotes46>whereDidIPutTHatFile<doubleQuotes46>), <doubleQuotes46>rw<doubleQuotes46>);<newline46mondego>    long aPositionWhereIWantToGo = 99;<newline46mondego>    f.seek(aPositionWhereIWantToGo); // this basically reads n bytes in the file<newline46mondego>    f.write(<doubleQuotes46>Im in teh fil, writn bites<doubleQuotes46>.getBytes());<newline46mondego>    f.close();<newline46mondego>}<newline46mondego>"
"1365splitHere46","185281splitHere46","while((amountRead = isr_reader.read(streamBuf)) > 0) {<newline46mondego>  receivedData.append(streamBuf, 0, amountRead);<newline46mondego>}<newline46mondego>"
"1366splitHere46","185281splitHere46","read"
"1367splitHere46","185281splitHere46","PrintWriter"
"1368splitHere46","185281splitHere46","US-ASCII"
"1369splitHere46","185774splitHere46","b3 = myInt & 0xFF;<newline46mondego>"
"1370splitHere46","185774splitHere46","b2 = (myInt >> 8) & 0xFF;<newline46mondego>"
"1371splitHere46","185774splitHere46","b1 = (myInt >> 16) & 0xFF;<newline46mondego>"
"1372splitHere46","185942splitHere46","equals()"
"1373splitHere46","185942splitHere46","Object"
"1374splitHere46","185942splitHere46","public boolean equals(Object other);<newline46mondego>"
"1375splitHere46","185942splitHere46","Object"
"1376splitHere46","185942splitHere46","ArrayList"
"1377splitHere46","185942splitHere46","Object"
"1378splitHere46","185942splitHere46","@Override<newline46mondego>public boolean equals(Object other){<newline46mondego>    if (other == null) return false;<newline46mondego>    if (other == this) return true;<newline46mondego>    if (!(other instanceof MyClass))return false;<newline46mondego>    MyClass otherMyClass = (MyClass)other;<newline46mondego>    ...test other properties here...<newline46mondego>}<newline46mondego>"
"1379splitHere46","185942splitHere46","@Override"
"1380splitHere46","186480splitHere46","private Date getDateNearest(List<Date> dates, Date targetDate){<newline46mondego>  Date returnDate = targetDate<newline46mondego>  for (Date date : dates) {<newline46mondego>    // if the current iteration'sdate is <doubleQuotes46>before<doubleQuotes46> the target date<newline46mondego>    if (date.compareTo(targetDate) <= 0) {<newline46mondego>      // if the current iteration's date is <doubleQuotes46>after<doubleQuotes46> the current return date<newline46mondego>      if (date.compareTo(returnDate) > 0){<newline46mondego>        returnDate=date;<newline46mondego>      }<newline46mondego>    }<newline46mondego>  }  <newline46mondego>  return returnDate;<newline46mondego>}<newline46mondego>"
"1381splitHere46","187048splitHere46","using"
"1382splitHere46","187061splitHere46","class MyReader<T> {<newline46mondego>    private final Class<T> clazz;<newline46mondego>    MyReader(Class<T> clazz) {<newline46mondego>        if (clazz == null) {<newline46mondego>            throw new NullPointerException();<newline46mondego>        }<newline46mondego>        this.clazz = clazz;<newline46mondego>    }<newline46mondego>    public T restore(String from) {<newline46mondego>        ...<newline46mondego>        try {<newline46mondego>            restoredItem = clazz.cast(decoder.readObject());<newline46mondego>            ...<newline46mondego>            return restoredItem;<newline46mondego>        } catch (ClassCastException exc) {<newline46mondego>            ...<newline46mondego>        }<newline46mondego>    }<newline46mondego>}<newline46mondego>"
"1383splitHere46","187061splitHere46","public <T> T restore(Class<T> clazz, String from) {<newline46mondego>        ...<newline46mondego>        try {<newline46mondego>            restoredItem = clazz.cast(decoder.readObject());<newline46mondego>            ...<newline46mondego>"
"1384splitHere46","187230splitHere46","public static String fetchSourceHtml( String urlString ) {<newline46mondego><newline46mondego>  try {<newline46mondego>    HttpClient httpClient = new HttpClient();<newline46mondego>    GetMethod getMethod = new GetMethod( urlString );<newline46mondego>    getMethod.setFollowRedirects( true );<newline46mondego><newline46mondego>    int httpStatus = httpClient.executeMethod( getMethod );<newline46mondego><newline46mondego>    if (httpStatus >= 400) {<newline46mondego>      return <doubleQuotes46><doubleQuotes46>;<newline46mondego>    }<newline46mondego><newline46mondego>    String sourceHtml = getMethod.getResponseBodyAsString();<newline46mondego>    return sourceHtml;<newline46mondego>  }<newline46mondego>  catch (IOException e) {<newline46mondego>    return <doubleQuotes46><doubleQuotes46>;<newline46mondego>  }<newline46mondego>}<newline46mondego>"
"1385splitHere46","187738splitHere46","format"
"1386splitHere46","187738splitHere46","join"
"1387splitHere46","189299splitHere46","<build><newline46mondego>  <plugins><newline46mondego>    <plugin><newline46mondego>      <groupId>org.apache.maven.plugins</groupId><newline46mondego>      <artifactId>maven-antrun-plugin</artifactId><newline46mondego>      <executions><newline46mondego>        <execution><newline46mondego>          <id>process-sources</id><newline46mondego>          <phase>process-sources</phase><newline46mondego>          <configuration><newline46mondego>            <tasks><newline46mondego>               <!-- Put the code to run the program here --><newline46mondego>            </tasks><newline46mondego>          </configuration><newline46mondego>          <goals><newline46mondego>            <goal>run</goal><newline46mondego>          </goals><newline46mondego>        </execution><newline46mondego>      </executions><newline46mondego>    </plugin><newline46mondego>  </plugins><newline46mondego></build><newline46mondego>"
"1388splitHere46","189463splitHere46","queryInterface()"
"1389splitHere46","189577splitHere46","java2wsdl"
"1390splitHere46","189739splitHere46","public static void main(String[] args) {<newline46mondego>    Collection<File> all = new ArrayList<File>();<newline46mondego>    addTree(new File(<doubleQuotes46>.<doubleQuotes46>), all);<newline46mondego>    System.out.println(all);<newline46mondego>}<newline46mondego><newline46mondego>static void addTree(File file, Collection<File> all) {<newline46mondego>    File[] children = file.listFiles();<newline46mondego>    if (children != null) {<newline46mondego>        for (File child : children) {<newline46mondego>            all.add(child);<newline46mondego>            addTree(child, all);<newline46mondego>        }<newline46mondego>    }<newline46mondego>}<newline46mondego>"
"1391splitHere46","189739splitHere46","static void addTree(Path directory, Collection<Path> all)<newline46mondego>        throws IOException {<newline46mondego>    try (DirectoryStream<Path> ds = Files.newDirectoryStream(directory)) {<newline46mondego>        for (Path child : ds) {<newline46mondego>            all.add(child);<newline46mondego>            if (Files.isDirectory(child)) {<newline46mondego>                addTree(child, all);<newline46mondego>            }<newline46mondego>        }<newline46mondego>    }<newline46mondego>}<newline46mondego>"
"1392splitHere46","189739splitHere46","static void addTree(Path directory, final Collection<Path> all)<newline46mondego>        throws IOException {<newline46mondego>    Files.walkFileTree(directory, new SimpleFileVisitor<Path>() {<newline46mondego>        @Override<newline46mondego>        public FileVisitResult visitFile(Path file, BasicFileAttributes attrs)<newline46mondego>                throws IOException {<newline46mondego>            all.add(file);<newline46mondego>            return FileVisitResult.CONTINUE;<newline46mondego>        }<newline46mondego>    });<newline46mondego>}<newline46mondego>"
"1393splitHere46","189834splitHere46","create..."
"1394splitHere46","189834splitHere46","class BuildVehicleBooking {<newline46mondego>    Long officeId;<newline46mondego>    Long start;<newline46mondego>    Long end;<newline46mondego>    String origin;<newline46mondego>    String destination;<newline46mondego>    String purpose;             <newline46mondego>    String requirements;<newline46mondego>    Integer numberOfPassengers;<newline46mondego><newline46mondego>    Booking createVehicleBooking () throws ServiceException { ... }<newline46mondego>}<newline46mondego>"
"1395splitHere46","189834splitHere46","create"
"1396splitHere46","189834splitHere46","verifyParameters"
"1397splitHere46","189834splitHere46","creating"
"1398splitHere46","189955splitHere46","MessageFormat messageFormat = new MessageFormat(<doubleQuotes46>insert into {0} values ( ''{1}'', ''{2}'', ''{3}'', {4} )<doubleQuotes46>);<newline46mondego>Object[] args = {<doubleQuotes46>000<doubleQuotes46>, <doubleQuotes46>111<doubleQuotes46>, <doubleQuotes46>222<doubleQuotes46>,<doubleQuotes46>333<doubleQuotes46>,<doubleQuotes46>444<doubleQuotes46>,<doubleQuotes46>555<doubleQuotes46>};<newline46mondego>String result = messageFormat.format(args);<newline46mondego>"
"1399splitHere46","189955splitHere46","insert into 000 values ( '111', '222', '333', 444 )<newline46mondego>"
"1400splitHere46","190302splitHere46","EventQueue.invokeLater(new Runnable(){<newline46mondego>  public void run() { yourTextField.selectAll();}<newline46mondego>});<newline46mondego>"
"1401splitHere46","190347splitHere46","import org.junit.runner.RunWith;<newline46mondego>import org.junit.runners.Suite;<newline46mondego>import org.junit.runners.Suite.SuiteClasses;<newline46mondego><newline46mondego><newline46mondego>@RunWith(value=Suite.class)<newline46mondego>@SuiteClasses(value={TestCase.class})<newline46mondego>public class AllTests {<newline46mondego><newline46mondego>}<newline46mondego>"
"1402splitHere46","190347splitHere46","import static org.junit.Assert.assertTrue;<newline46mondego>import org.junit.Test;<newline46mondego><newline46mondego>public class TestCase  {<newline46mondego>@Test<newline46mondego>    public void test1 {<newline46mondego>        assertTrue (tmp.getTermin().equals(soll));<newline46mondego>    }<newline46mondego>}<newline46mondego>"
"1403splitHere46","190393splitHere46","LinkedList <Integer>linky = new LinkedList<Integer>();<newline46mondego>int num1 = 2, num2 = 22, num3 = 25, num4 = 1337;<newline46mondego>linky.add(num1);<newline46mondego>linky.add(num2);<newline46mondego>linky.add(num3);<newline46mondego>linky.add(num4);<newline46mondego>"
"1404splitHere46","190393splitHere46","class"
"1405splitHere46","190393splitHere46","class GroupOfFourInts<newline46mondego>{<newline46mondego>   int myInt1;<newline46mondego>   int myInt2;<newline46mondego>   int myInt3;<newline46mondego>   int myInt4;<newline46mondego><newline46mondego>   public GroupOfFourInts(int a, int b, int c, int d)<newline46mondego>   {<newline46mondego>     myInt1 = a; myInt2 = b; myInt3 = c; myInt4 = d;<newline46mondego>   }<newline46mondego>}<newline46mondego><newline46mondego>class someOtherClass<newline46mondego>{<newline46mondego><newline46mondego>  public static void main(String[] args)<newline46mondego>  {<newline46mondego>    LinkedList<GroupOfFourInts> linky = new LinkedList<GroupOfFourInts>();<newline46mondego>    GroupOfFourInts group1 = new GroupOfFourInts(1,2,3,4);<newline46mondego>    GroupOfFourInts group2 = new GroupOfFourInts(1337,7331,2345,6789);<newline46mondego>    linky.add(group1);<newline46mondego>    linky.add(group2);<newline46mondego>  }<newline46mondego>}<newline46mondego>"
"1406splitHere46","190393splitHere46","linky"
"1407splitHere46","190393splitHere46","int"
"1408splitHere46","190633splitHere46","Preferences prefs = new IniFile(new File(filename));<newline46mondego>System.out.println(<doubleQuotes46>grumpy/homePage: <doubleQuotes46> + prefs.node(<doubleQuotes46>grumpy<doubleQuotes46>).get(<doubleQuotes46>homePage<doubleQuotes46>, null));<newline46mondego>"
"1409splitHere46","190651splitHere46","java.util.concurrent"
"1410splitHere46","190848splitHere46","String large = ...                  // read 10k string<newline46mondego>  String small = large.substring(...) // extrakt a few chars<newline46mondego>  large = null;  // large String object no longer reachable,<newline46mondego>                 // but 10k char[] still alive, as long as small lives<newline46mondego>"
"1411splitHere46","190865splitHere46","HttpServletRequestWrapper"
"1412splitHere46","190865splitHere46","getParameter"
"1413splitHere46","191961splitHere46","SIGTERM"
"1414splitHere46","191961splitHere46","System.exit(int)"
"1415splitHere46","191961splitHere46","kill -9"
"1416splitHere46","191961splitHere46","kill -SIGKILL"
"1417splitHere46","192038splitHere46","properties.put(<doubleQuotes46>modelFile<doubleQuotes46>, file.getLocation().makeAbsolute().toOSString());<newline46mondego>"
"1418splitHere46","192038splitHere46","<component class=<doubleQuotes46>org.eclipse.mwe.emf.Reader<doubleQuotes46>><newline46mondego>    <uri value='${modelFile}'/><newline46mondego>    <modelSlot value='theModel'/><newline46mondego></component><newline46mondego>"
"1419splitHere46","192104splitHere46","ResultSet.last()"
"1420splitHere46","192104splitHere46","ResultSet.getRow()"
"1421splitHere46","192104splitHere46","SELECT COUNT(*) FROM ..."
"1422splitHere46","192548splitHere46","<appender name=<doubleQuotes46>roll<doubleQuotes46> class=<doubleQuotes46>org.apache.log4j.DailyRollingFileAppender<doubleQuotes46>><newline46mondego>    <param name=<doubleQuotes46>File<doubleQuotes46> value=<doubleQuotes46>application.log<doubleQuotes46> /><newline46mondego>    <param name=<doubleQuotes46>DatePattern<doubleQuotes46> value=<doubleQuotes46>.yyyy-MM-dd<doubleQuotes46> /><newline46mondego>    <layout class=<doubleQuotes46>org.apache.log4j.PatternLayout<doubleQuotes46>> <newline46mondego>      <param name=<doubleQuotes46>ConversionPattern<doubleQuotes46> <newline46mondego>          value=<doubleQuotes46>%d{yyyy-MMM-dd HH:mm:ss,SSS} [%t] %c %x%n  %-5p %m%n<doubleQuotes46>/><newline46mondego>    </layout><newline46mondego>  </appender><newline46mondego>"
"1423splitHere46","192716splitHere46","<property name=<doubleQuotes46>before<doubleQuotes46> value=<doubleQuotes46>${after}<doubleQuotes46>/><newline46mondego><property name=<doubleQuotes46>after<doubleQuotes46> value=<doubleQuotes46>MyBuildDirectory<doubleQuotes46>/><newline46mondego><newline46mondego><target name=<doubleQuotes46>test<doubleQuotes46> ><newline46mondego><mkdir dir=<doubleQuotes46>${before}<doubleQuotes46>/><newline46mondego></target><newline46mondego>"
"1424splitHere46","193385splitHere46","<classpathentry kind=<doubleQuotes46>lib<doubleQuotes46> path=<doubleQuotes46>/blib/java/commons-httpclient-3.1/commons-httpclient-3.1.jar<doubleQuotes46> sourcepath=<doubleQuotes46>/blib/java/commons-httpclient-3.1/commons-httpclient-3.1-src.zip<doubleQuotes46>/><newline46mondego>"
"1425splitHere46","193623splitHere46","<service name=<doubleQuotes46>name of the service<doubleQuotes46> scope=<doubleQuotes46><one of request, session or application><doubleQuotes46>><newline46mondego>    <description><newline46mondego>    optional description of your service<newline46mondego>    </description><newline46mondego><newline46mondego>    <messageReceivers><newline46mondego>        <messageReceiver mep=<doubleQuotes46>http://www.w3.org/2004/08/wsdl/in-only<doubleQuotes46> class=<doubleQuotes46>org.apache.axis2.rpc.receivers.RPCInOnlyMessageReceiver<doubleQuotes46> /><newline46mondego>        <messageReceiver mep=<doubleQuotes46>http://www.w3.org/2004/08/wsdl/in-out<doubleQuotes46>  class=<doubleQuotes46>org.apache.axis2.rpc.receivers.RPCMessageReceiver<doubleQuotes46>/><newline46mondego>    </messageReceivers><newline46mondego><newline46mondego>    <parameter name=<doubleQuotes46>ServiceClass<doubleQuotes46> locked=<doubleQuotes46>false<doubleQuotes46>>put here the fully qualified name of your service class (e.g. x.y.z.FooService)</parameter><newline46mondego><newline46mondego></service><newline46mondego>"
"1426splitHere46","193987splitHere46","/home/user/.eclipse<newline46mondego>C:\Documents and Settings\User\.eclipse<newline46mondego>"
"1427splitHere46","193987splitHere46","public static File getSettingsDirectory() {<newline46mondego>    String userHome = System.getProperty(<doubleQuotes46>user.home<doubleQuotes46>);<newline46mondego>    if(userHome == null) {<newline46mondego>        throw new IllegalStateException(<doubleQuotes46>user.home==null<doubleQuotes46>);<newline46mondego>    }<newline46mondego>    File home = new File(userHome);<newline46mondego>    File settingsDirectory = new File(home, <doubleQuotes46>.myappdir<doubleQuotes46>);<newline46mondego>    if(!settingsDirectory.exists()) {<newline46mondego>        if(!settingsDirectory.mkdir()) {<newline46mondego>            throw new IllegalStateException(settingsDirectory.toString());<newline46mondego>        }<newline46mondego>    }<newline46mondego>    return settingsDirectory;<newline46mondego>}<newline46mondego>"
"1428splitHere46","194099splitHere46","ArrayIndexOutOfBoundsException"
"1429splitHere46","194099splitHere46","req.getInputStream()"
"1430splitHere46","194288splitHere46","/** transcodes text file from one encoding to another */<newline46mondego>public static void transcode(File source, Charset srcEncoding,<newline46mondego>                             File target, Charset tgtEncoding)<newline46mondego>                                                             throws IOException {<newline46mondego>    try (InputStream in = new FileInputStream(source);<newline46mondego>         Reader reader = new InputStreamReader(in, srcEncoding);<newline46mondego>         OutputStream out = new FileOutputStream(target);<newline46mondego>         Writer writer = new OutputStreamWriter(out, tgtEncoding)) {<newline46mondego>        char[] buffer = new char[1024];<newline46mondego>        int r;<newline46mondego>        while ((r = reader.read(buffer)) != -1) {<newline46mondego>            writer.write(buffer, 0, r);<newline46mondego>        }<newline46mondego>    }<newline46mondego>}<newline46mondego>"
"1431splitHere46","194288splitHere46","AutoCloseable"
"1432splitHere46","194288splitHere46","public class Foo {<newline46mondego>  public static void main(String[] args) {<newline46mondego>    class CloseTest implements AutoCloseable {<newline46mondego>      public void close() {<newline46mondego>        System.out.println(<doubleQuotes46>Close<doubleQuotes46>);<newline46mondego>      }<newline46mondego>    }<newline46mondego>    try (CloseTest closeable = new CloseTest()) {}<newline46mondego>  }<newline46mondego>}<newline46mondego>"
"1433splitHere46","194452splitHere46","perfom"
"1434splitHere46","194452splitHere46","setInterface"
"1435splitHere46","194452splitHere46","perfom"
"1436splitHere46","194452splitHere46","accept"
"1437splitHere46","194452splitHere46","setInterface"
"1438splitHere46","194679splitHere46","interface IFilter {<newline46mondego>   public IEnumerable<string> Filter(IEnumerable<string> file) {<newline46mondego>   }<newline46mondego>}<newline46mondego><newline46mondego>class PredicateFilter : IFilter {<newline46mondego>   public PredicateFilter(Predicate<string> predicate) { }<newline46mondego><newline46mondego>   public IEnumerable<string> Filter(IEnumerable<string> file) {<newline46mondego>      foreach (string s in file) {<newline46mondego>         if (this.Predicate(s)) {<newline46mondego>            yield return s;<newline46mondego>         }<newline46mondego>      }<newline46mondego>   }<newline46mondego>}<newline46mondego><newline46mondego>class ActionFilter : IFilter {<newline46mondego>  public ActionFilter(Action<string> action) { }<newline46mondego><newline46mondego>  public IEnumerable<string> Filter(IEnumerable<string> file) {<newline46mondego>      foreach (string s in file) {<newline46mondego>         this.Action(s);<newline46mondego>         yield return s;<newline46mondego>      }<newline46mondego>  }<newline46mondego>}<newline46mondego><newline46mondego>class ReplaceFilter : IFilter {<newline46mondego>  public ReplaceFilter(Func<string, string> replace) { }<newline46mondego><newline46mondego>  public IEnumerable<string> Filter(IEnumerable<string> file) {<newline46mondego>     foreach (string s in file) {<newline46mondego>        yield return this.Replace(s);<newline46mondego>     }<newline46mondego>  }<newline46mondego>}<newline46mondego>"
"1439splitHere46","194712splitHere46","ClassLoader loader = URLClassLoader.newInstance(<newline46mondego>    new URL[] { yourURL },<newline46mondego>    getClass().getClassLoader()<newline46mondego>);<newline46mondego>Class<?> clazz = Class.forName(<doubleQuotes46>mypackage.MyClass<doubleQuotes46>, true, loader);<newline46mondego>Class<? extends Runnable> runClass = clazz.asSubclass(Runnable.class);<newline46mondego>// Avoid Class.newInstance, for it is evil.<newline46mondego>Constructor<? extends Runnable> ctor = runClass.getConstructor();<newline46mondego>Runnable doRun = ctor.newInstance();<newline46mondego>doRun.run();<newline46mondego>"
"1440splitHere46","194712splitHere46","java.beans"
"1441splitHere46","194712splitHere46","URLClassLoader.addURL"
"1442splitHere46","195328splitHere46","Constructor.newInstance"
"1443splitHere46","195328splitHere46","InvocationTargetException"
"1444splitHere46","195693splitHere46","public class MyBean implements Serializable {<newline46mondego><newline46mondego>    private static final long serialVersionUID = 1L;<newline46mondego><newline46mondego>    private Locale locale;<newline46mondego>    private String foo;<newline46mondego><newline46mondego>    public MyBean() {<newline46mondego>    }<newline46mondego><newline46mondego>    public Locale getLocale() {<newline46mondego>    	return locale;<newline46mondego>    }<newline46mondego><newline46mondego>    public void setLocale(Locale locale) {<newline46mondego>    	this.locale = locale;<newline46mondego>    }<newline46mondego><newline46mondego>    public String getFoo() {<newline46mondego>    	return foo;<newline46mondego>    }<newline46mondego><newline46mondego>    public void setFoo(String foo) {<newline46mondego>    	this.foo = foo;<newline46mondego>    }<newline46mondego><newline46mondego>}<newline46mondego>"
"1445splitHere46","195693splitHere46","public class MyBeanTest {<newline46mondego><newline46mondego>    public static void main(String[] args) throws Exception {<newline46mondego>    	// quick and dirty test<newline46mondego><newline46mondego>    	MyBean c = new MyBean();<newline46mondego>    	c.setLocale(Locale.CHINA);<newline46mondego>    	c.setFoo(<doubleQuotes46>foo<doubleQuotes46>);<newline46mondego><newline46mondego>    	ByteArrayOutputStream outputStream = new ByteArrayOutputStream();<newline46mondego>    	XMLEncoder encoder = new XMLEncoder(outputStream);<newline46mondego>    	encoder.setPersistenceDelegate(Locale.class, new PersistenceDelegate() {<newline46mondego>    		protected Expression instantiate(Object oldInstance, Encoder out) {<newline46mondego>    			Locale l = (Locale) oldInstance;<newline46mondego>    			return new Expression(oldInstance, oldInstance.getClass(),<newline46mondego>    					<doubleQuotes46>new<doubleQuotes46>, new Object[] { l.getLanguage(), l.getCountry(),<newline46mondego>    							l.getVariant() });<newline46mondego>    		}<newline46mondego>    	});<newline46mondego>    	encoder.writeObject(c);<newline46mondego>    	encoder.flush();<newline46mondego>    	encoder.close();<newline46mondego><newline46mondego>    	System.out.println(outputStream.toString(<doubleQuotes46>UTF-8<doubleQuotes46>));<newline46mondego><newline46mondego>    	ByteArrayInputStream bain = new ByteArrayInputStream(outputStream<newline46mondego>    			.toByteArray());<newline46mondego>    	XMLDecoder decoder = new XMLDecoder(bain);<newline46mondego><newline46mondego>    	c = (MyBean) decoder.readObject();<newline46mondego><newline46mondego>    	System.out.println(<doubleQuotes46>===================<doubleQuotes46>);<newline46mondego>    	System.out.println(c.getLocale());<newline46mondego>    	System.out.println(c.getFoo());<newline46mondego>    }<newline46mondego><newline46mondego>}<newline46mondego>"
"1446splitHere46","195693splitHere46","new PersistenceDelegate() {<newline46mondego>		protected Expression instantiate(Object oldInstance, Encoder out) {<newline46mondego>			Locale l = (Locale) oldInstance;<newline46mondego>			return new Expression(oldInstance, oldInstance.getClass(),<newline46mondego>					<doubleQuotes46>new<doubleQuotes46>, new Object[] { l.getLanguage(), l.getCountry(),<newline46mondego>							l.getVariant() });<newline46mondego>		}<newline46mondego>	}<newline46mondego>"
"1447splitHere46","195796splitHere46","StringBuffer sb = new StringBuffer(); sb.append(<doubleQuotes46>a<doubleQuotes46>).append(<doubleQuotes46>b<doubleQuotes46>);<newline46mondego>String a = new String(sb.toString());<newline46mondego>String b = new String(sb.toString());<newline46mondego>a == b; //false<newline46mondego>a.equals(b); //true<newline46mondego>a.intern() == b.intern(); //true<newline46mondego>"
"1448splitHere46","196107splitHere46","<cfset systemObject = createObject(<doubleQuotes46>java<doubleQuotes46>, <doubleQuotes46>java.lang.System<doubleQuotes46>) /><newline46mondego><cfoutput>#systemObject.currentTimeMillis()#</cfoutput><newline46mondego>"
"1449splitHere46","196117splitHere46","<a href=<doubleQuotes46>http://java.sun.com/javase/6/docs/api/java/lang/Class.html#getDeclaredClasses()<doubleQuotes46> rel=<doubleQuotes46>nofollow<doubleQuotes46>>Class.getDeclaredClasses()</a>"
"1450splitHere46","196117splitHere46","<a href=<doubleQuotes46>http://java.sun.com/javase/6/docs/api/java/lang/Class.html#isEnum()<doubleQuotes46> rel=<doubleQuotes46>nofollow<doubleQuotes46>>Class.isEnum()</a>"
"1451splitHere46","196117splitHere46","<a href=<doubleQuotes46>http://java.sun.com/javase/6/docs/api/java/lang/Class.html#getEnumConstants()<doubleQuotes46> rel=<doubleQuotes46>nofollow<doubleQuotes46>>Class.getEnumConstants()</a>"
"1452splitHere46","196642splitHere46","List temp = new ArrayList(src);<newline46mondego>Collections.reverse(temp);<newline46mondego>System.out.println(temp);<newline46mondego>"
"1453splitHere46","196834splitHere46","charAt()"
"1454splitHere46","196834splitHere46","charAt()"
"1455splitHere46","196834splitHere46","String s = <doubleQuotes46>...stuff...<doubleQuotes46>;<newline46mondego><newline46mondego>for (int i = 0; i < s.length(); i++){<newline46mondego>    char c = s.charAt(i);        <newline46mondego>    //Process char<newline46mondego>}<newline46mondego>"
"1456splitHere46","197060splitHere46","private BufferedImage toCompatibleImage(BufferedImage image)<newline46mondego>{<newline46mondego>	// obtain the current system graphical settings<newline46mondego>	GraphicsConfiguration gfx_config = GraphicsEnvironment.<newline46mondego>		getLocalGraphicsEnvironment().getDefaultScreenDevice().<newline46mondego>		getDefaultConfiguration();<newline46mondego><newline46mondego>	/*<newline46mondego>	 * if image is already compatible and optimized for current system <newline46mondego>	 * settings, simply return it<newline46mondego>	 */<newline46mondego>	if (image.getColorModel().equals(gfx_config.getColorModel()))<newline46mondego>		return image;<newline46mondego><newline46mondego>	// image is not optimized, so create a new image that is<newline46mondego>	BufferedImage new_image = gfx_config.createCompatibleImage(<newline46mondego>			image.getWidth(), image.getHeight(), image.getTransparency());<newline46mondego><newline46mondego>	// get the graphics context of the new image to draw the old image on<newline46mondego>	Graphics2D g2d = (Graphics2D) new_image.getGraphics();<newline46mondego><newline46mondego>	// actually draw the image and dispose of context no longer needed<newline46mondego>	g2d.drawImage(image, 0, 0, null);<newline46mondego>	g2d.dispose();<newline46mondego><newline46mondego>	// return the new optimized image<newline46mondego>	return new_image; <newline46mondego>}<newline46mondego>"
"1457splitHere46","197073splitHere46","java.naming.factory.initial = org.apache.activemq.jndi.ActiveMQInitialContextFactory<newline46mondego><newline46mondego># use the following property to configure the default connector<newline46mondego>java.naming.provider.url = failover:tcp://localhost:61616<newline46mondego><newline46mondego># use the following property to specify the JNDI name the connection factory<newline46mondego># should appear as. <newline46mondego>#connectionFactoryNames = connectionFactory, queueConnectionFactory, topicConnectionFactry<newline46mondego><newline46mondego># register some queues in JNDI using the form<newline46mondego># queue.[jndiName] = [physicalName]<newline46mondego>queue.MyQueue = example.MyQueue<newline46mondego><newline46mondego><newline46mondego># register some topics in JNDI using the form<newline46mondego># topic.[jndiName] = [physicalName]<newline46mondego>topic.MyTopic = example.MyTopic<newline46mondego>"
"1458splitHere46","197391splitHere46","max"
"1459splitHere46","197391splitHere46","public static <T extends Comparable<? super T>> T max(Collection<? extends T> coll)<newline46mondego>"
"1460splitHere46","197391splitHere46","public static Comparable max(Collection coll)<newline46mondego>"
"1461splitHere46","197391splitHere46","max"
"1462splitHere46","197391splitHere46","max"
"1463splitHere46","197391splitHere46","public static <T extends Object & Comparable<? super T>> T max(Collection<? extends T> coll)<newline46mondego>"
"1464splitHere46","197391splitHere46","public static Object max(Collection coll)<newline46mondego>"
"1465splitHere46","197391splitHere46","max"
"1466splitHere46","197993splitHere46","Arraylist()"
"1467splitHere46","197993splitHere46","ArrayList<String>()"
"1468splitHere46","197993splitHere46","List myList = new ArrayList();<newline46mondego>"
"1469splitHere46","197993splitHere46","List<String> myList = new ArrayList<String>();<newline46mondego>"
"1470splitHere46","197993splitHere46","List<String> myList = new ArrayList<>();<newline46mondego>"
"1471splitHere46","198033splitHere46","@JoinTable(name = <doubleQuotes46>LSFCFTB<doubleQuotes46>, joinColumns = {<newline46mondego>                    @JoinColumn(name = <doubleQuotes46>LSFOC_LSFCF_CODLSC<doubleQuotes46>, referencedColumnName = <doubleQuotes46>LSFOC_CODLSC<doubleQuotes46>),<newline46mondego>                    @JoinColumn(name = <doubleQuotes46>LSFOC_LSFCF_CODFOC<doubleQuotes46>, referencedColumnName = <doubleQuotes46>LSFOC_CODFOC<doubleQuotes46>),<newline46mondego>                    @JoinColumn(name = <doubleQuotes46>LSFOC_LSFCF_CODSOC<doubleQuotes46>, referencedColumnName = <doubleQuotes46>LSFOC_CODSOC<doubleQuotes46>) }, <newline46mondego>        inverseJoinColumns = { @JoinColumn(name = <doubleQuotes46>LSFOR_LSFCF_CODLSC<doubleQuotes46>, referencedColumnName = <doubleQuotes46>LSFOR_CODLSC<doubleQuotes46>),<newline46mondego>                    @JoinColumn(name = <doubleQuotes46>LSFOR_LSFCF_CODFOR<doubleQuotes46>, referencedColumnName = <doubleQuotes46>LSFOR_CODFOR<doubleQuotes46>),<newline46mondego>                    @JoinColumn(name = <doubleQuotes46>LSFOR_LSFCF_CODSOC<doubleQuotes46>, referencedColumnName = <doubleQuotes46>LSFOR_CODSOC<doubleQuotes46>) })<newline46mondego>"
"1472splitHere46","198218splitHere46","public void myMethod() {<newline46mondego>"
"1473splitHere46","199222splitHere46","java.awt.EventQueue.invokeLater"
"1474splitHere46","199291splitHere46","SuppressionFilter"
"1475splitHere46","199291splitHere46","checkstyle-suppressions-file"
"1476splitHere46","199291splitHere46","<module name=<doubleQuotes46>SuppressionFilter<doubleQuotes46>><newline46mondego>    <property name=<doubleQuotes46>file<doubleQuotes46> value=<doubleQuotes46>${checkstyle-suppressions-file}<doubleQuotes46>/><newline46mondego></module><newline46mondego>"
"1477splitHere46","199291splitHere46","template-checkstyle.properties"
"1478splitHere46","199291splitHere46","checkstyle-suppressions-file=@SCM_DIR@/checkstyle_suppressions.xml<newline46mondego>"
"1479splitHere46","199291splitHere46","checkstyle.properties"
"1480splitHere46","199291splitHere46","<copy file=<doubleQuotes46>${scm.dir}/template-checkstyle.properties<doubleQuotes46> tofile=<doubleQuotes46>${scm.dir}/checkstyle.properties<doubleQuotes46>><newline46mondego>    <filterset><newline46mondego>        <filter token=<doubleQuotes46>SCM_DIR<doubleQuotes46> value=<doubleQuotes46>${scm.dir.unix}<doubleQuotes46>/><newline46mondego>    </filterset><newline46mondego></copy><newline46mondego>"
"1481splitHere46","199291splitHere46","scm.dir.unix"
"1482splitHere46","199291splitHere46","scm.dir.unix"
"1483splitHere46","199291splitHere46","file"
"1484splitHere46","199291splitHere46","SuppressionFilter"
"1485splitHere46","199291splitHere46","C:\foo\bar\baz"
"1486splitHere46","199291splitHere46","C:foobarbaz"
"1487splitHere46","199291splitHere46","scm.dir"
"1488splitHere46","199291splitHere46","pathconvert"
"1489splitHere46","199291splitHere46","<pathconvert targetos=<doubleQuotes46>unix<doubleQuotes46> property=<doubleQuotes46>scm.dir.unix<doubleQuotes46>><newline46mondego>    <path location=<doubleQuotes46>${scm.dir}<doubleQuotes46>/><newline46mondego></pathconvert><newline46mondego>"
"1490splitHere46","199291splitHere46","checkstyle"
"1491splitHere46","199291splitHere46","<checkstyle config=<doubleQuotes46>${scm.dir}/checkstyle_checks.xml<doubleQuotes46><newline46mondego>            properties=<doubleQuotes46>${scm.dir}/checkstyle.properties<doubleQuotes46>><newline46mondego>    <!-- details elided --><newline46mondego></checkstyle><newline46mondego>"
"1492splitHere46","199291splitHere46","checkstyle"
"1493splitHere46","199291splitHere46","checkstyle.properties"
"1494splitHere46","199572splitHere46","requirementConstraint"
"1495splitHere46","199572splitHere46","<my:customSelect requirementConstraint=<doubleQuotes46>Mandatory<doubleQuotes46>><newline46mondego>   <option value=<doubleQuotes46>1<doubleQuotes46>>A</option><newline46mondego>   <option value=<doubleQuotes46>2<doubleQuotes46>>B</option><newline46mondego>   <option value=<doubleQuotes46>3<doubleQuotes46>>C</option><newline46mondego></my:customSelect><newline46mondego>"
"1496splitHere46","199572splitHere46","required"
"1497splitHere46","199572splitHere46","<doubleQuotes46>yes<doubleQuotes46> | <doubleQuotes46>no<doubleQuotes46>"
"1498splitHere46","199572splitHere46","selectAll"
"1499splitHere46","199572splitHere46","<doubleQuotes46>yes<doubleQuotes46> | <doubleQuotes46>no<doubleQuotes46>"
"1500splitHere46","199572splitHere46","mustSelect"
"1501splitHere46","199572splitHere46","one"
"1502splitHere46","199572splitHere46","any"
"1503splitHere46","199572splitHere46","all"
"1504splitHere46","199572splitHere46","customSelect"
"1505splitHere46","199572splitHere46","mustSelect"
"1506splitHere46","199572splitHere46","<my:customSelect mustSelect=<doubleQuotes46>one<doubleQuotes46>><newline46mondego>   <option value=<doubleQuotes46>1<doubleQuotes46>>A</option><newline46mondego>   <option value=<doubleQuotes46>2<doubleQuotes46>>B</option><newline46mondego>   <option value=<doubleQuotes46>3<doubleQuotes46>>C</option><newline46mondego></my:customSelect><newline46mondego>"
"1507splitHere46","199572splitHere46","<my:customSelect mustSelect=<doubleQuotes46>any<doubleQuotes46>><newline46mondego>   <option value=<doubleQuotes46>1<doubleQuotes46>>A</option><newline46mondego>   <option value=<doubleQuotes46>2<doubleQuotes46>>B</option><newline46mondego>   <option value=<doubleQuotes46>3<doubleQuotes46>>C</option><newline46mondego></my:customSelect><newline46mondego>"
"1508splitHere46","199572splitHere46","<my:customSelect mustSelect=<doubleQuotes46>all<doubleQuotes46>><newline46mondego>   <option value=<doubleQuotes46>1<doubleQuotes46>>A</option><newline46mondego>   <option value=<doubleQuotes46>2<doubleQuotes46>>B</option><newline46mondego>   <option value=<doubleQuotes46>3<doubleQuotes46>>C</option><newline46mondego></my:customSelect><newline46mondego>"
"1509splitHere46","199750splitHere46","System.Drawing."
"1510splitHere46","199750splitHere46","Bitmap"
"1511splitHere46","199750splitHere46","System.Drawing.dll"
"1512splitHere46","199750splitHere46","MemoryImageSource"
"1513splitHere46","199750splitHere46","ImageTraverser"
"1514splitHere46","199954splitHere46","package test;<newline46mondego><newline46mondego>import java.io.IOException;<newline46mondego>import java.io.RandomAccessFile;<newline46mondego><newline46mondego>public class Raf {<newline46mondego>    private static class Record{<newline46mondego>    	private final double price;<newline46mondego>    	private final int id;<newline46mondego>    	private final int stock;<newline46mondego><newline46mondego>    	public Record(int id, int stock, double price){<newline46mondego>    		this.id = id;<newline46mondego>    		this.stock = stock;<newline46mondego>    		this.price = price;<newline46mondego>    	}<newline46mondego><newline46mondego>    	public void pack(int n, int offset, byte[] array){<newline46mondego>    		array[offset + 0] = (byte)(n & 0xff);<newline46mondego>    		array[offset + 1] = (byte)((n >> 8) & 0xff);<newline46mondego>    		array[offset + 2] = (byte)((n >> 16) & 0xff);<newline46mondego>    		array[offset + 3] = (byte)((n >> 24) & 0xff);<newline46mondego>    	}<newline46mondego><newline46mondego>    	public void pack(double n, int offset, byte[] array){<newline46mondego>    		long bytes = Double.doubleToRawLongBits(n);<newline46mondego>    		pack((int) (bytes & 0xffffffff), offset, array);<newline46mondego>    		pack((int) ((bytes >> 32) & 0xffffffff), offset + 4, array);<newline46mondego>    	}<newline46mondego><newline46mondego>    	public byte[] getBytes() {<newline46mondego>    		byte[] record = new byte[16];<newline46mondego>    		pack(id, 0, record);<newline46mondego>    		pack(stock, 4, record);<newline46mondego>    		pack(price, 8, record);<newline46mondego>    		return record;<newline46mondego>    	}<newline46mondego>    }<newline46mondego><newline46mondego>    private static final int RECORD_SIZE = 16;<newline46mondego>    private static final int N_RECORDS = 1024;<newline46mondego><newline46mondego>    /**<newline46mondego>     * @param args<newline46mondego>     * @throws IOException <newline46mondego>     */<newline46mondego>    public static void main(String[] args) throws IOException {<newline46mondego>    	RandomAccessFile raf = new RandomAccessFile(args[0], <doubleQuotes46>rw<doubleQuotes46>);<newline46mondego>    	try{<newline46mondego>    		raf.seek(RECORD_SIZE * N_RECORDS);<newline46mondego><newline46mondego>    		raf.seek(0);<newline46mondego><newline46mondego>    		raf.write(new Record(1001, 476, 28.35).getBytes());<newline46mondego>    		raf.write(new Record(1002, 240, 32.56).getBytes());<newline46mondego>    	} finally {<newline46mondego>    		raf.close();<newline46mondego>    	}<newline46mondego>    }<newline46mondego>}<newline46mondego>"
"1515splitHere46","200275splitHere46","Window > Preferences > Java > Editor > Templates or under Window > Preferences > Java > Code Style > Code Templates"
"1516splitHere46","200275splitHere46","Preferencens > Java > Editors > Save"
"1517splitHere46","200534splitHere46","$JAVA_HOME/jre/lib/fontconfig.properties"
"1518splitHere46","200644splitHere46","DataInputStream.readUTF()"
"1519splitHere46","200644splitHere46","DataOutputStream.writeUTF(String)"
"1520splitHere46","200708splitHere46","♥ \u2665<newline46mondego>♦ \u2666<newline46mondego>♣ \u2663<newline46mondego>♠ \u2660<newline46mondego>"
"1521splitHere46","200854splitHere46","String firstToken;<newline46mondego>StringTokenizer tok;<newline46mondego><newline46mondego>tok = new StringTokenizer(<doubleQuotes46>some|random|data<doubleQuotes46>,<doubleQuotes46>|<doubleQuotes46>);<newline46mondego>firstToken= tok.nextToken();<newline46mondego>"
"1522splitHere46","201126splitHere46","String[] disjunctedPredicateGroups = query.split(<doubleQuotes46>\|<doubleQuotes46>);<newline46mondego>List<String[]> normalizedPredicates = ArrayList<String[]>;<newline46mondego>for (String conjunction : disjunctedPredicateGroups ) {<newline46mondego>   normalizedPredicates.add(conjunction.split(<doubleQuotes46>\[|\]<doubleQuotes46>));<newline46mondego>}<newline46mondego>// process each predicate<newline46mondego>"
"1523splitHere46","201508splitHere46","new QName(<doubleQuotes46>http://testPackage.fc.com/, doBasicStuff<doubleQuotes46>)<newline46mondego>"
"1524splitHere46","201902splitHere46","HashSet<String>  sqlKeywords	=<newline46mondego>     new HashSet<String>(Arrays.asList(<newline46mondego>       new String[] { ... cut and paste a list of sql keywords here ..  }));<newline46mondego>"
"1525splitHere46","201969splitHere46","Manifest.mf"
"1526splitHere46","201969splitHere46","Class-Path"
"1527splitHere46","201969splitHere46","Manifest.mf"
"1528splitHere46","201969splitHere46","Class-Path: this.jar that.jar ../lib/other.jar<newline46mondego>"
"1529splitHere46","201969splitHere46","<jar destfile=<doubleQuotes46>pathing.jar<doubleQuotes46>><newline46mondego>  <manifest><newline46mondego>    <attribute name=<doubleQuotes46>Class-Path<doubleQuotes46> value=<doubleQuotes46>this.jar that.jar ../lib/other.jar<doubleQuotes46>/><newline46mondego>  </manifest><newline46mondego></jar><newline46mondego>"
"1530splitHere46","202044splitHere46","doGet()"
"1531splitHere46","202044splitHere46","doPost()"
"1532splitHere46","202044splitHere46","doGet"
"1533splitHere46","202044splitHere46","doPost"
"1534splitHere46","202044splitHere46","doGet"
"1535splitHere46","202044splitHere46","doPost"
"1536splitHere46","202044splitHere46","public void doGet(HttpServletRequest request, HttpServletResponse response) {<newline46mondego>    //build the objects you need for the RSS response<newline46mondego>    Room room = getRoom(request.getParameter(<doubleQuotes46>roomid<doubleQuotes46>));<newline46mondego>    //loadData();<newline46mondego>    //moreMethodCalls();<newline46mondego>    out.println( createRssContent(...) );<newline46mondego>}<newline46mondego>"
"1537splitHere46","202044splitHere46","Map rssCache;<newline46mondego><newline46mondego>public void doGet(HttpServletRequest request, HttpServletResponse response) {<newline46mondego><newline46mondego>    //Map is initialized in the init() method or somewhere else    <newline46mondego>    String roomId = request.getParameter(<doubleQuotes46>roomid<doubleQuotes46>);<newline46mondego><newline46mondego>    String rssDocument = rssCache.get(roomId);<newline46mondego>    if (rssDocument == null) {<newline46mondego><newline46mondego>        //build the objects you need for the RSS response<newline46mondego>        Room room = getRoom(roomId);<newline46mondego>        //loadData();<newline46mondego>        //moreMethodCalls();<newline46mondego>        rssDocument = createRssContent(...);<newline46mondego>        rssCache.put(roomId, rssDocument);<newline46mondego>    }<newline46mondego>    out.println( rssDocument );<newline46mondego>}<newline46mondego>"
"1538splitHere46","202111splitHere46","mod_proxy_balancer"
"1539splitHere46","202111splitHere46","<Proxy balancer://myclustername><newline46mondego>  # cluster member 1<newline46mondego>  BalancerMember http://192.168.0.1:3000 <newline46mondego>  BalancerMember http://192.168.0.1:3001<newline46mondego><newline46mondego>  # cluster member 2, the fastest machine so double the load<newline46mondego>  BalancerMember http://192.168.0.11:3000 loadfactor=2<newline46mondego>  BalancerMember http://192.168.0.11:3001 loadfactor=2<newline46mondego><newline46mondego>  # cluster member 3<newline46mondego>  BalancerMember http://192.168.0.12:3000<newline46mondego>  BalancerMember http://192.168.0.12:3001<newline46mondego><newline46mondego>  # cluster member 4<newline46mondego>  BalancerMember http://192.168.0.13:3000<newline46mondego>  BalancerMember http://192.168.0.13:3001<newline46mondego></Proxy><newline46mondego><newline46mondego><VirtualHost *:80><newline46mondego>  ServerAdmin info@meinprof.de<newline46mondego>  ServerName www.meinprof.de<newline46mondego>  ServerAlias meinprof.de<newline46mondego>  ProxyPass / balancer://meinprofcluster/<newline46mondego>  ProxyPassReverse / balancer://meinprofcluster/<newline46mondego>  ErrorLog /var/log/www/www.meinprof.de/apache_error_log<newline46mondego>  CustomLog /var/log/www/www.meinprof.de/apache_access_log combined<newline46mondego></VirtualHost><newline46mondego>"
"1540splitHere46","202192splitHere46","<a href=<doubleQuotes46>http://java.sun.com/javase/6/docs/api/java/io/RandomAccessFile.html<doubleQuotes46>>RandomAccessFile</a>"
"1541splitHere46","202192splitHere46","<a href=<doubleQuotes46>http://java.sun.com/javase/6/docs/api/java/io/BufferedReader.html<doubleQuotes46>>BufferedReader</a>"
"1542splitHere46","202192splitHere46","<a href=<doubleQuotes46>http://java.sun.com/javase/6/docs/api/java/io/BufferedWriter.html<doubleQuotes46>>BufferedWriter</a>"
"1543splitHere46","202192splitHere46","BufferedReader"
"1544splitHere46","202192splitHere46","readLine()"
"1545splitHere46","202192splitHere46","BufferedWriter"
"1546splitHere46","202192splitHere46","char[]"
"1547splitHere46","202391splitHere46",".settings"
"1548splitHere46","202391splitHere46","org.eclipse.wst.common.component"
"1549splitHere46","202391splitHere46","<wb-module deploy-name=<doubleQuotes46>WebProjectName<doubleQuotes46>><newline46mondego>    <wb-resource deploy-path=<doubleQuotes46>/<doubleQuotes46> source-path=<doubleQuotes46>/WebContent<doubleQuotes46>/><newline46mondego>    <wb-resource deploy-path=<doubleQuotes46>/WEB-INF/classes<doubleQuotes46> source-path=<doubleQuotes46>/src<doubleQuotes46>/><newline46mondego>"
"1550splitHere46","202391splitHere46","wb-resource"
"1551splitHere46","202391splitHere46","/share/"
"1552splitHere46","202533splitHere46","pInsertOid = connection.prepareStatement(INSERT_OID_SQL, Statement.RETURN_GENERATED_KEYS);<newline46mondego>"
"1553splitHere46","202533splitHere46","// fill in the prepared statement and<newline46mondego>pInsertOid.executeUpdate();<newline46mondego>ResultSet rs = pInsertOid.getGeneratedKeys();<newline46mondego>if (rs.next()) {<newline46mondego>  int newId = rs.getInt(1);<newline46mondego>  oid.setId(newId);<newline46mondego>}<newline46mondego>"
"1554splitHere46","202693splitHere46","<action<newline46mondego>   name=<doubleQuotes46>Visual<doubleQuotes46><newline46mondego>   class=<doubleQuotes46>it.___.web.actions.VisualizationAction<doubleQuotes46>><newline46mondego>   <result name=<doubleQuotes46>next<doubleQuotes46>>${next}</result><newline46mondego></action><newline46mondego>"
"1555splitHere46","202795splitHere46","catalina.bat"
"1556splitHere46","202795splitHere46","catalina.sh"
"1557splitHere46","202795splitHere46","jvm OPTIONS : -Dsun.net.client.defaultConnectTimeout=60000 -Dsun.net.client.defaultReadTimeout=60000 <newline46mondego>"
"1558splitHere46","203552splitHere46","<javac srcdir=<doubleQuotes46>${src.dir}<doubleQuotes46> destdir=<doubleQuotes46>${build.dir}<doubleQuotes46> classpathref=<doubleQuotes46>classpath<doubleQuotes46><newline46mondego>        includes=<doubleQuotes46>src/path/to/MyClass.java<doubleQuotes46> /><newline46mondego>"
"1559splitHere46","203552splitHere46","<javac srcdir=<doubleQuotes46>${src.dir}<doubleQuotes46> destdir=<doubleQuotes46>${build.dir}<doubleQuotes46> classpathref=<doubleQuotes46>classpath<doubleQuotes46>><newline46mondego>    <include name=<doubleQuotes46>src/path/to/MyClass.java<doubleQuotes46>/><newline46mondego>    <include name=<doubleQuotes46>src/path/to/AnotherClass.java<doubleQuotes46>/><newline46mondego></javac><newline46mondego>"
"1560splitHere46","203552splitHere46","<jar jarfile=<doubleQuotes46>${outlib}/something.jar<doubleQuotes46>><newline46mondego>    <fileset dir=<doubleQuotes46>${build.dir}<doubleQuotes46>><newline46mondego>        <include name='src/path/to/classes' /><newline46mondego>    </fileset><newline46mondego></jar><newline46mondego>"
"1561splitHere46","203571splitHere46","static boolean isImmutable(Object obj) {<newline46mondego>	Class<?> objClass = obj.getClass();<newline46mondego><newline46mondego>	// Class of the object must be a direct child class of the required class<newline46mondego>	Class<?> superClass = objClass.getSuperclass();<newline46mondego>	if (!Immutable.class.equals(superClass)) {<newline46mondego>		return false;<newline46mondego>	}<newline46mondego><newline46mondego>	// Class must be final<newline46mondego>	if (!Modifier.isFinal(objClass.getModifiers())) {<newline46mondego>		return false;<newline46mondego>	}<newline46mondego><newline46mondego>	// Check all fields defined in the class for type and if they are final<newline46mondego>	Field[] objFields = objClass.getDeclaredFields();<newline46mondego>	for (int i = 0; i < objFields.length; i++) {<newline46mondego>		if (!Modifier.isFinal(objFields[i].getModifiers())<newline46mondego>				|| !isValidFieldType(objFields[i].getType())) {<newline46mondego>			return false;<newline46mondego>		}<newline46mondego>	}<newline46mondego><newline46mondego>	// Lets hope we didn't forget something<newline46mondego>	return true;<newline46mondego>}<newline46mondego><newline46mondego>static boolean isValidFieldType(Class<?> type) {<newline46mondego>	// Check for all allowed property types...<newline46mondego>	return type.isPrimitive() || String.class.equals(type);<newline46mondego>}<newline46mondego>"
"1562splitHere46","203571splitHere46","hash"
"1563splitHere46","203992splitHere46","ArrayList"
"1564splitHere46","203992splitHere46","ArrayList al = new ArrayList();<newline46mondego>// add elements to al, including duplicates<newline46mondego>HashSet hs = new HashSet();<newline46mondego>hs.addAll(al);<newline46mondego>al.clear();<newline46mondego>al.addAll(hs);<newline46mondego>"
"1565splitHere46","204418splitHere46","interface SomeInterface {}<newline46mondego>abstract class AbstractParentClass {}<newline46mondego>class ParentClass extends AbstractParentClass implements SomeInterface {}<newline46mondego>class ChildClass extends AbstractParentClass {}<newline46mondego>"
"1566splitHere46","204456splitHere46","<:"
"1567splitHere46","204456splitHere46","_ModelDto <: BaseObject<newline46mondego>"
"1568splitHere46","204456splitHere46","List<_ModelDto> <: List<BaseObject><newline46mondego>"
"1569splitHere46","204456splitHere46","List<_ModelDto> <: List<? extends _ModelDto> <: List<? extends BaseObject><newline46mondego>"
"1570splitHere46","204456splitHere46","List<_ModelDto> <: List<? extends BaseObject><newline46mondego>"
"1571splitHere46","204456splitHere46","MyAsync<List<_ModelDto>> <: MyAsync<List<? extends BaseObject>><newline46mondego>"
"1572splitHere46","204456splitHere46","service.getList(callBack)"
"1573splitHere46","204456splitHere46","MyAsync<List<_ModelDto>><newline46mondego>  <: MyAsync<? extends List<_ModelDto>><newline46mondego>  <: MyAsync<? extends List<? extends BaseObject>><newline46mondego>"
"1574splitHere46","204456splitHere46","getList"
"1575splitHere46","204456splitHere46","public void getList(MyAsync<? extends List<? extends BaseObject>> callback);<newline46mondego>"
"1576splitHere46","204456splitHere46","getList"
"1577splitHere46","204456splitHere46","callback"
"1578splitHere46","204456splitHere46","MyAsync"
"1579splitHere46","204456splitHere46","public interface MyAsync<T> {<newline46mondego>    T get();<newline46mondego>    void set(T t);<newline46mondego>}<newline46mondego>"
"1580splitHere46","204456splitHere46","getList"
"1581splitHere46","204456splitHere46","get"
"1582splitHere46","204456splitHere46","set"
"1583splitHere46","204456splitHere46","null"
"1584splitHere46","204456splitHere46","?"
"1585splitHere46","204456splitHere46","set"
"1586splitHere46","205023splitHere46","public class Splitter {<newline46mondego><newline46mondego>    public static void main(final String[] args) {<newline46mondego>        final String asd = <doubleQuotes46>this is test ass this is test<doubleQuotes46>;<newline46mondego>        final String[] parts = asd.split(<doubleQuotes46>ass<doubleQuotes46>);<newline46mondego>        for (final String part : parts) {<newline46mondego>            System.out.println(part);<newline46mondego>        }<newline46mondego>    }<newline46mondego>}<newline46mondego>"
"1587splitHere46","205023splitHere46","this is test <newline46mondego> this is test<newline46mondego>"
"1588splitHere46","205257splitHere46","<result property=<doubleQuotes46>Foo1<doubleQuotes46> column=<doubleQuotes46>bar1Id<doubleQuotes46> select=<doubleQuotes46>selectFoo<doubleQuotes46>/>"
"1589splitHere46","205257splitHere46","selectFoo"
"1590splitHere46","205257splitHere46","fooMap"
"1591splitHere46","205257splitHere46","Foo"
"1592splitHere46","205257splitHere46","<result property=<doubleQuotes46>Foo1<doubleQuotes46> resultMap=<doubleQuotes46>fooMap<doubleQuotes46>/>"
"1593splitHere46","205257splitHere46","Foos"
"1594splitHere46","205257splitHere46","<result property=<doubleQuotes46>foo1.bar<doubleQuotes46> column=<doubleQuotes46>foo1bar<doubleQuotes46>/>"
"1595splitHere46","205257splitHere46","<result property=<doubleQuotes46>foo2.bar<doubleQuotes46> column=<doubleQuotes46>foo2bar<doubleQuotes46>/>"
"1596splitHere46","205354splitHere46","OP_CONNECT"
"1597splitHere46","205354splitHere46","import java.net.*;<newline46mondego>import java.nio.channels.*;<newline46mondego><newline46mondego><newline46mondego>public class MyNioServer {<newline46mondego>  public static void main(String[] params) throws Exception {<newline46mondego>    final ServerSocketChannel serverChannel = ServerSocketChannel.open();<newline46mondego>    serverChannel.configureBlocking(true);<newline46mondego>    serverChannel.socket().bind(new InetSocketAddress(<doubleQuotes46>localhost<doubleQuotes46>, 12345));<newline46mondego>    System.out.println(<doubleQuotes46>Listening for incoming connections<doubleQuotes46>);<newline46mondego>    final SocketChannel clientChannel = serverChannel.accept();<newline46mondego>    System.out.println(<doubleQuotes46>Accepted connection: <doubleQuotes46> + clientChannel);<newline46mondego><newline46mondego><newline46mondego>    final Selector selector = Selector.open();<newline46mondego>    clientChannel.configureBlocking(false);<newline46mondego>    final SelectionKey clientKey = clientChannel.register(selector, SelectionKey.OP_READ | SelectionKey.OP_CONNECT);<newline46mondego>    System.out.println(<doubleQuotes46>Selecting...<doubleQuotes46>);<newline46mondego>    System.out.println(selector.select());<newline46mondego>    System.out.println(selector.selectedKeys().size());<newline46mondego>    System.out.println(clientKey.readyOps());<newline46mondego>  }<newline46mondego>}<newline46mondego>"
"1598splitHere46","205354splitHere46","select()"
"1599splitHere46","205655splitHere46","String path = <doubleQuotes46>/var/data/stuff/xyz.dat<doubleQuotes46>;<newline46mondego>String base = <doubleQuotes46>/var/data<doubleQuotes46>;<newline46mondego>String relative = new File(base).toURI().relativize(new File(path).toURI()).getPath();<newline46mondego>// relative == <doubleQuotes46>stuff/xyz.dat<doubleQuotes46><newline46mondego>"
"1600splitHere46","205690splitHere46","System.setProperty(<doubleQuotes46>apple.awt.fullscreenhidecursor<doubleQuotes46>,<doubleQuotes46>true<doubleQuotes46>);<newline46mondego>"
"1601splitHere46","205712splitHere46","StringBuilder result = new StringBuilder();<newline46mondego>    for(String string : collectionOfStrings) {<newline46mondego>        result.append(string);<newline46mondego>        result.append(<doubleQuotes46>,<doubleQuotes46>);<newline46mondego>    }<newline46mondego>    return result.length() > 0 ? result.substring(0, result.length() - 1): <doubleQuotes46><doubleQuotes46>;<newline46mondego>"
"1602splitHere46","206188splitHere46","serviceClient = new RPCServiceClient();<newline46mondego>Options options = serviceClient.getOptions();<newline46mondego><newline46mondego>EndpointReference targetEPR = new EndpointReference(<doubleQuotes46>http://myservice<doubleQuotes46>);<newline46mondego><newline46mondego>options.setTo(targetEPR);<newline46mondego><newline46mondego>QName methodName = new QName(<doubleQuotes46>ns<doubleQuotes46>,<doubleQuotes46>methodName<doubleQuotes46>);<newline46mondego><newline46mondego>Class<?>[] returnTypes = new Class[] { String.class };<newline46mondego><newline46mondego>Object[] args = new Object[] { <doubleQuotes46>parameter<doubleQuotes46> };<newline46mondego><newline46mondego>Object[] response = serviceClient.invokeBlocking(methodName, args,<newline46mondego>                returnTypes);<newline46mondego>"
"1603splitHere46","206252splitHere46","size()"
"1604splitHere46","206252splitHere46","length"
"1605splitHere46","206252splitHere46","getSize()"
"1606splitHere46","206252splitHere46","getLength()"
"1607splitHere46","207015splitHere46","List<Rectangle> originalRects = ...;<newline46mondego><newline46mondego>/* record index of each rectangle object.<newline46mondego> * Using a hash map makes lookups efficient,<newline46mondego> * and using an IdentityHashMap means we lookup by object identity<newline46mondego> * not value.<newline46mondego> */<newline46mondego>IdentityHashMap<Rectangle, Integer> originalIndices = new IdentityHashMap<Rectangle, Integer>();<newline46mondego>for(int i=0; i<originalRects.size(); i++) {<newline46mondego>    originalIndices.put(originalRects.get(i), i);<newline46mondego>}<newline46mondego><newline46mondego>/* copy rectangle list */<newline46mondego>List<Rectangle> sortedRects = new ArrayList<Rectangle>();<newline46mondego>sortedRects.addAll(originalRects);<newline46mondego><newline46mondego>/* and sort */<newline46mondego>Collections.sort(sortedRects, new LeftToRightComparator());<newline46mondego><newline46mondego>/* Loop through original list */<newline46mondego>for(int i=0; i<sortedRects.size(); i++) {<newline46mondego>    Rectangle rect = sortedRects.get(i);<newline46mondego>    /* Lookup original index efficiently */<newline46mondego>    int origIndex = originalIndices.get(rect);<newline46mondego><newline46mondego>    /* I know the original, and sorted indices plus the rectangle itself */<newline46mondego>...<newline46mondego>"
"1608splitHere46","207052splitHere46","import java.util.*;<newline46mondego>import java.awt.Rectangle;<newline46mondego><newline46mondego>public class test {<newline46mondego>    public static void main(String args[]) {<newline46mondego>        List<Rectangle> list = new ArrayList<Rectangle>();<newline46mondego>        /* Evil hack */<newline46mondego>        List lst = (List)list;<newline46mondego><newline46mondego>        /* Works */<newline46mondego>        lst.add(<doubleQuotes46>Test<doubleQuotes46>);<newline46mondego><newline46mondego>        /* Works, and prints <doubleQuotes46>Test<doubleQuotes46> */<newline46mondego>        for(Object o: lst) {<newline46mondego>            System.err.println(o);<newline46mondego>        }<newline46mondego><newline46mondego>        /* Dies horribly due to implicitly casting <doubleQuotes46>Test<doubleQuotes46> to a Rectangle */<newline46mondego>        for(Rectangle r: list) {<newline46mondego>            System.err.println(r);<newline46mondego>        }<newline46mondego>    }<newline46mondego>}<newline46mondego>"
"1609splitHere46","207573splitHere46","MAVEN_OPTS=<doubleQuotes46>-Dmaven.repo.local=c:\documents and settings\user\.m2\repository<doubleQuotes46><newline46mondego>export MAVEN_OPTS<newline46mondego>"
"1610splitHere46","207937splitHere46","ConcurrentHashMap"
"1611splitHere46","207937splitHere46","ReadWriteLock"
"1612splitHere46","207937splitHere46","ConcurrentSkipListMap"
"1613splitHere46","207956splitHere46","acquiredQueued"
"1614splitHere46","207956splitHere46","selfInterrupt"
"1615splitHere46","207982splitHere46","Graphics2D"
"1616splitHere46","208289splitHere46","java.util.Preferences"
"1617splitHere46","208289splitHere46","Preference"
"1618splitHere46","208289splitHere46","Preferences"
"1619splitHere46","208289splitHere46","java.util.prefs.AbstractPreferences"
"1620splitHere46","208289splitHere46","de.unika.ipd.grgen.util.MyPreferences"
"1621splitHere46","208289splitHere46","import java.util.HashMap;<newline46mondego>import java.util.Iterator;<newline46mondego>import java.util.Map;<newline46mondego>import java.util.prefs.AbstractPreferences;<newline46mondego>import java.util.prefs.BackingStoreException;<newline46mondego><newline46mondego>/**<newline46mondego> * Own implementation of the Java preferences API, that does not use<newline46mondego> * a <doubleQuotes46>OS backing store<doubleQuotes46> but relies on importing and exporting the<newline46mondego> * preferences via xml files.<newline46mondego> * Also, If a preference is got, but was not in the tree, it is entered.<newline46mondego> */<newline46mondego>public class MyPreferences extends AbstractPreferences {<newline46mondego><newline46mondego>    private Map<String, String> prefs = new HashMap<String, String>();<newline46mondego>    private Map<String, AbstractPreferences> children = new HashMap<String, AbstractPreferences>();<newline46mondego><newline46mondego>  public MyPreferences(MyPreferences parent, String name) {<newline46mondego>    super(parent, name);<newline46mondego>  }<newline46mondego><newline46mondego>  /**<newline46mondego>   * @see java.util.prefs.AbstractPreferences#putSpi(java.lang.String, java.lang.String)<newline46mondego>   */<newline46mondego>  protected void putSpi(String key, String value) {<newline46mondego>    prefs.put(key, value);<newline46mondego>  }<newline46mondego>"
"1622splitHere46","208289splitHere46","de.tarent.ldap.prefs.LDAPSystemPreferences"
"1623splitHere46","208289splitHere46","import java.util.prefs.AbstractPreferences;<newline46mondego>import java.util.prefs.BackingStoreException;<newline46mondego><newline46mondego>import javax.naming.NamingException;<newline46mondego>import javax.naming.directory.Attributes;<newline46mondego><newline46mondego>import de.tarent.ldap.LDAPException;<newline46mondego>import de.tarent.ldap.LDAPManager;<newline46mondego><newline46mondego>/**<newline46mondego> * @author kirchner<newline46mondego> * <newline46mondego> * Preferences im LDAP<newline46mondego> */<newline46mondego>public class LDAPSystemPreferences extends AbstractPreferences {<newline46mondego>    LDAPManager     ldm         = null;<newline46mondego>    Properties      properties  = new Properties();<newline46mondego>    //Map für key/value der Preferences<newline46mondego>    Map             cache       = new HashMap();<newline46mondego>    //Map für timestamp der Preferences<newline46mondego>    Map             timestamp   = new HashMap();<newline46mondego>    private Boolean deleted     = Boolean.FALSE;<newline46mondego>"
"1624splitHere46","208289splitHere46","com.adito.boot.PropertyPreferences"
"1625splitHere46","208289splitHere46","import java.util.prefs.AbstractPreferences;<newline46mondego>import java.util.prefs.BackingStoreException;<newline46mondego>import java.util.prefs.Preferences;<newline46mondego><newline46mondego>import org.apache.commons.logging.Log;<newline46mondego>import org.apache.commons.logging.LogFactory;<newline46mondego><newline46mondego><newline46mondego>/**<newline46mondego> * A simple implementation for the preferences API. That stores preferences<newline46mondego> * in propery files. We do not have to worry about sharing the preferencese <newline46mondego> * with other JVM instance so there is no need for any kind of synchronising<newline46mondego> * or locking.<newline46mondego> */<newline46mondego>public class PropertyPreferences extends AbstractPreferences {<newline46mondego>"
"1626splitHere46","208549splitHere46","<newline46mondego>JkOptions     +ForwardURICompat<newline46mondego>"
"1627splitHere46","208549splitHere46","mod_jk"
"1628splitHere46","208877splitHere46","String command = <doubleQuotes46>c:\\windows\\system32\\net.exe use f: \\\\machine\\share /user:user password<doubleQuotes46>;<newline46mondego>Process p = Runtime.getRuntime().exec(command);<newline46mondego>...<newline46mondego>"
"1629splitHere46","209319splitHere46","foo.notify() => Monitor.Pulse(foo)<newline46mondego>foo.notifyAll() => Monitor.PulseAll(foo)<newline46mondego>foo.wait() =>  Monitor.Wait(foo)<newline46mondego>"
"1630splitHere46","209319splitHere46","lock"
"1631splitHere46","209319splitHere46","Monitor.Enter"
"1632splitHere46","209319splitHere46","Monitor.Exit"
"1633splitHere46","209771splitHere46","%n"
"1634splitHere46","209771splitHere46","Calendar c = ...;<newline46mondego>String s = String.format(<doubleQuotes46>Duke's Birthday: %1$tm %1$te,%1$tY%n<doubleQuotes46>, c); <newline46mondego>//Note %n at end of line                                    ^^<newline46mondego><newline46mondego>String s2 = String.format(<doubleQuotes46>Use %%n as a platform independent newline.%n<doubleQuotes46>); <newline46mondego>//         %% becomes %        ^^<newline46mondego>//                                        and %n becomes newline     ^^<newline46mondego>"
"1635splitHere46","209824splitHere46","java.net.URL url = ClassLoader.getSystemResource(<doubleQuotes46>com/xyz/resources/camera.png<doubleQuotes46>);<newline46mondego>"
"1636splitHere46","209829splitHere46","JButton button = new JButton(<doubleQuotes46>Push me!<doubleQuotes46>);<newline46mondego>button.addActionListener(new ActionListener() {<newline46mondego>    public void actionPerformed(ActionEvent e) {<newline46mondego>        System.out.println(<doubleQuotes46>Pressed!<doubleQuotes46>);<newline46mondego>    }<newline46mondego>});<newline46mondego>"
"1637splitHere46","209829splitHere46","val button = new JButton(<doubleQuotes46>Push me!<doubleQuotes46>)<newline46mondego>button.addActionListener { e =><newline46mondego>  println(<doubleQuotes46>Pressed!<doubleQuotes46>)<newline46mondego>}<newline46mondego>"
"1638splitHere46","211060splitHere46","["
"1639splitHere46","211060splitHere46","]"
"1640splitHere46","211060splitHere46","/** <newline46mondego> * Get the current value of the foo property.<newline46mondego> * The foo property controls the initial guess used by the bla algorithm in<newline46mondego> * {@link #bla}<newline46mondego> * @return The initial guess used by {@link #bla}<newline46mondego> */<newline46mondego>int getFoo() {<newline46mondego>  return foo;<newline46mondego>}<newline46mondego>"
"1641splitHere46","211095splitHere46","public class WindowResizeTest extends JFrame {<newline46mondego><newline46mondego>    public static void main(String[] args) {<newline46mondego>    	new WindowResizeTest();<newline46mondego>    }<newline46mondego><newline46mondego>    public WindowResizeTest() {<newline46mondego>    	this.setSize(640, 480);<newline46mondego><newline46mondego>    	JPanel panel = new JPanel();<newline46mondego>    	panel.setBackground(Color.RED);<newline46mondego>    	this.add(panel);<newline46mondego><newline46mondego>    	this.addComponentListener(new ComponentListener() {<newline46mondego><newline46mondego>    		public void componentResized(ComponentEvent e) {<newline46mondego>    			System.out.println(e.getComponent().getSize());<newline46mondego>    		}<newline46mondego><newline46mondego>    		public void componentHidden(ComponentEvent e) {}<newline46mondego><newline46mondego>    		public void componentMoved(ComponentEvent e) {}<newline46mondego><newline46mondego>    		public void componentShown(ComponentEvent e) {}<newline46mondego>    	});<newline46mondego><newline46mondego>    	this.setVisible(true);<newline46mondego>    }<newline46mondego><newline46mondego>}<newline46mondego>"
"1642splitHere46","211105splitHere46","{ width:100, height:50, position:(10,25), content:<doubleQuotes46>Am I certain?<doubleQuotes46>, edge-connections:null}<newline46mondego>"
"1643splitHere46","211105splitHere46","DiagramController<newline46mondego>{<newline46mondego>  public DiagramController(diagramBuilder:DiagramBuilder)<newline46mondego>  {<newline46mondego>    this._diagramBuilder = diagramBuilder;<newline46mondego>    this._commandStack = new Stack();<newline46mondego>  }<newline46mondego><newline46mondego>  public void Add(node:ConditionalNode)<newline46mondego>  {<newline46mondego>    this._commandStack.push(node);<newline46mondego>    this._diagramBuilder.Draw(node);<newline46mondego>  }<newline46mondego><newline46mondego>  public void Undo()<newline46mondego>  {<newline46mondego>    var node = this._commandStack.pop();<newline46mondego>    this._diagramBuilderUndraw(node);<newline46mondego>  }<newline46mondego>}<newline46mondego>"
"1644splitHere46","211105splitHere46","DiagramController<newline46mondego>{<newline46mondego>  public DiagramController(diagramBuilder:DiagramBuilder)<newline46mondego>  {<newline46mondego>    this._diagramBuilder = diagramBuilder;<newline46mondego>    this._commandStack = new Stack();<newline46mondego>  }<newline46mondego><newline46mondego>  public void Add(node:ConditionalNode)<newline46mondego>  {<newline46mondego>    string graphicalRefId = this._diagramBuilder.Draw(node);<newline46mondego>    var nodePair = new KeyValuePair<string, ConditionalNode> (graphicalRefId, node);<newline46mondego>    this._commandStack.push(nodePair);<newline46mondego>  }<newline46mondego><newline46mondego>  public void Undo()<newline46mondego>  {<newline46mondego>    var nodePair = this._commandStack.pop();<newline46mondego>    this._diagramBuilderUndraw(nodePair.Key);<newline46mondego>  }<newline46mondego>}<newline46mondego>"
"1645splitHere46","211131splitHere46","canvasPanel.setLayout(new BorderLayout());<newline46mondego>"
"1646splitHere46","211141splitHere46","public class Person {<newline46mondego>  public Person(String name) { ... }<newline46mondego>  public Person(String name, String phone) { ... }<newline46mondego>  public Person(String name, String phone, String email) { ... }<newline46mondego>}<newline46mondego>"
"1647splitHere46","211161splitHere46","public class StatusCode extends Enum<StatusCode><newline46mondego>"
"1648splitHere46","211161splitHere46","Enum<StatusCode>"
"1649splitHere46","211161splitHere46","E=StatusCode"
"1650splitHere46","211161splitHere46","E"
"1651splitHere46","211161splitHere46","Enum<StatusCode>"
"1652splitHere46","211161splitHere46","Enum<E>"
"1653splitHere46","211161splitHere46","Comparable<E>"
"1654splitHere46","211161splitHere46","public interface IBuilder<TMessage, TBuilder><newline46mondego>    where TMessage : IMessage<TMessage, TBuilder> <newline46mondego>    where TBuilder : IBuilder<TMessage, TBuilder><newline46mondego><newline46mondego>  public interface IMessage<TMessage, TBuilder><newline46mondego>    where TMessage : IMessage<TMessage, TBuilder> <newline46mondego>    where TBuilder : IBuilder<TMessage, TBuilder><newline46mondego>"
"1655splitHere46","211161splitHere46","Enum"
"1656splitHere46","211161splitHere46","public class First extends Enum<First> {}<newline46mondego>public class Second extends Enum<First> {}<newline46mondego>"
"1657splitHere46","211161splitHere46","Second"
"1658splitHere46","211161splitHere46","Comparable<First>"
"1659splitHere46","211161splitHere46","Comparable<Second>"
"1660splitHere46","211161splitHere46","First"
"1661splitHere46","211502splitHere46","...<newline46mondego>con.setAutoCommit(false);<newline46mondego>try {<newline46mondego>  while (rs.next()) {<newline46mondego>    if (conditions_to_update) {<newline46mondego>      rs.updateString(...);<newline46mondego>      rs.updateRow();<newline46mondego>    }<newline46mondego>  }<newline46mondego>  con.setAutoCommit(true);<newline46mondego>} catch (Exception ex) {<newline46mondego>  //log the exception and rollback<newline46mondego>  con.rollback;<newline46mondego>} finally {<newline46mondego>  con.close();<newline46mondego>}<newline46mondego>"
"1662splitHere46","211820splitHere46","filetype plugin indent on"
"1663splitHere46","211820splitHere46","/usr/share/vim/vim71/indent/java.vim"
"1664splitHere46","211820splitHere46","~/.vim/indent/java.vim"
"1665splitHere46","211820splitHere46","let lnum = prevnonblank(v:lnum - 1)<newline46mondego>let line = getline(lnum)<newline46mondego>if line =~ '^\s*@.*$'<newline46mondego>    let theIndent = indent(lnum)<newline46mondego>endif<newline46mondego>"
"1666splitHere46","212334splitHere46","add(Calendar.DAY_OF_MONTH, -5).<newline46mondego>"
"1667splitHere46","212371splitHere46","@EmbeddedId"
"1668splitHere46","212371splitHere46","@IdClass"
"1669splitHere46","212371splitHere46","@EmbeddedId"
"1670splitHere46","212371splitHere46","@Embeddable class EmployeeId { name, dataOfBirth }<newline46mondego>@Entity class Employee {<newline46mondego>  @EmbeddedId EmployeeId employeeId;<newline46mondego>  ...<newline46mondego>}<newline46mondego>"
"1671splitHere46","212371splitHere46","@IdClass"
"1672splitHere46","212371splitHere46","@EmbeddedId"
"1673splitHere46","212371splitHere46","@IdClass"
"1674splitHere46","212371splitHere46","@EmbeddedId"
"1675splitHere46","212371splitHere46","IdClass"
"1676splitHere46","212605splitHere46","userNodeForPackage(ClassName.class)"
"1677splitHere46","212605splitHere46","systemNodeForPackage(ClassName.class)"
"1678splitHere46","212624splitHere46","@Override<newline46mondego>public boolean equals(MyObject mObj){<newline46mondego>    // code ...<newline46mondego>}<newline46mondego>"
"1679splitHere46","212629splitHere46","public class CaseInsensitiveMap extends HashMap<String, String> {<newline46mondego>    ...<newline46mondego>    put(String key, String value) {<newline46mondego>       super.put(key.toLowerCase(), value);<newline46mondego>    }<newline46mondego><newline46mondego>    get(String key) {<newline46mondego>       super.get(key.toLowercase());<newline46mondego>    }<newline46mondego>}<newline46mondego>"
"1680splitHere46","212632splitHere46","Connection c = ...<newline46mondego>    c.prepareCall(<doubleQuotes46>select ...<doubleQuotes46>).getResultSet();<newline46mondego>"
"1681splitHere46","212817splitHere46","Class ofArray = o.getClass().getComponentType();<newline46mondego>"
"1682splitHere46","212904splitHere46","${:import(org.apache.log4j.Logger)}<newline46mondego>private final static Logger log = Logger.getLogger(${enclosing_type}.class);<newline46mondego>${cursor}<newline46mondego>"
"1683splitHere46","212904splitHere46","logger"
"1684splitHere46","212904splitHere46","Ctrl+Space"
"1685splitHere46","212904splitHere46","Enter"
"1686splitHere46","212976splitHere46","<APPLET ARCHIVE=<doubleQuotes46>mysql.jar<doubleQuotes46> CODEBASE=<doubleQuotes46>./src/<doubleQuotes46> ...<newline46mondego>"
"1687splitHere46","213291splitHere46","final JDialog d = new JDialog();<newline46mondego>d.setSize(200,200);<newline46mondego>d.setLocationRelativeTo(null);<newline46mondego>d.setVisible(true);<newline46mondego>"
"1688splitHere46","213291splitHere46","final JDialog d = new JDialog();<newline46mondego>d.setSize(200, 200);<newline46mondego>final Toolkit toolkit = Toolkit.getDefaultToolkit();<newline46mondego>final Dimension screenSize = toolkit.getScreenSize();<newline46mondego>final int x = (screenSize.width - d.getWidth()) / 2;<newline46mondego>final int y = (screenSize.height - d.getHeight()) / 2;<newline46mondego>d.setLocation(x, y);<newline46mondego>d.setVisible(true);<newline46mondego>"
"1689splitHere46","213519splitHere46","URLEncoder.encode(String, String)<newline46mondego>"
"1690splitHere46","213519splitHere46","UTF-8"
"1691splitHere46","214633splitHere46","DOM.addEventPreview(EventPreview preview)<newline46mondego>"
"1692splitHere46","214633splitHere46","onEventPreview(Event event)<newline46mondego>"
"1693splitHere46","214633splitHere46","public final void cancelBubble(boolean cancel)<newline46mondego>"
"1694splitHere46","214798splitHere46","org.apache.tapestry.renderTags"
"1695splitHere46","214798splitHere46","renderTag"
"1696splitHere46","214835splitHere46","public class FooRepo {<newline46mondego>    public static Foo getFoo(Long id) {<newline46mondego>      // Read resultSet into foo<newline46mondego>    }<newline46mondego>  }<newline46mondego>"
"1697splitHere46","214835splitHere46","Foo = FooRepo.getFoo( id as stored in JSP );<newline46mondego>// display foo<newline46mondego>"
"1698splitHere46","215662splitHere46","GetObjectClass"
"1699splitHere46","215662splitHere46","java_class = (*jEnv)->FindClass (jEnv, <doubleQuotes46>java/lang/Throwable<doubleQuotes46>);<newline46mondego>method = (*jEnv)->GetMethodID (jEnv, java_class, <doubleQuotes46>getMessage<doubleQuotes46>, <doubleQuotes46>()Ljava/lang/String;<doubleQuotes46>);<newline46mondego>"
"1700splitHere46","215806splitHere46","FetchMode.JOIN"
"1701splitHere46","215806splitHere46","Hibernate.initialize(property)"
"1702splitHere46","216319splitHere46","z_vec"
"1703splitHere46","216913splitHere46","ByteArrayOutputStream"
"1704splitHere46","216913splitHere46","new String( baos.toByteArray(), codepage );<newline46mondego>"
"1705splitHere46","216913splitHere46","baos.toString( codepage );<newline46mondego>"
"1706splitHere46","217102splitHere46","String url = <doubleQuotes46>http://www.example.com/page?key=value<doubleQuotes46>;<newline46mondego>GetMethod method = new GetMethod(url);<newline46mondego>"
"1707splitHere46","217102splitHere46","GetMethod method = new GetMethod(<doubleQuotes46>example.com/page<doubleQuotes46>;); <newline46mondego>method.setQueryString(new NameValuePair[] { <newline46mondego>    new NameValuePair(<doubleQuotes46>key<doubleQuotes46>, <doubleQuotes46>value<doubleQuotes46>) <newline46mondego>}); <newline46mondego>"
"1708splitHere46","217110splitHere46","List< List<IntegerNode>> nodeLists = new LinkedList< List< IntegerNode >>();<newline46mondego>"
"1709splitHere46","217110splitHere46","class IntegerNodeList {<newline46mondego>    private final List< IntegerNode > nodes;<newline46mondego>}<newline46mondego>"
"1710splitHere46","217165splitHere46","DocumentBuilder.parse(new InpputSource(new InputStreamReader(inputStream, <doubleQuotes46><real encoding><doubleQuotes46>)));<newline46mondego>"
"1711splitHere46","217275splitHere46","=="
"1712splitHere46","217275splitHere46","equals()"
"1713splitHere46","217275splitHere46","equals()"
"1714splitHere46","217716splitHere46","lock"
"1715splitHere46","217716splitHere46","synchronized"
"1716splitHere46","217716splitHere46","synchronized"
"1717splitHere46","217716splitHere46","[MethodImpl(MethodImplOptions.Synchronized)]"
"1718splitHere46","218018splitHere46","<value>!value</value><newline46mondego>"
"1719splitHere46","218037splitHere46","public void contextInitialized(ServletContextEvent event) {<newline46mondego>	ServletContext context = event.getServletContext();<newline46mondego>	System.setProperty(<doubleQuotes46>rootPath<doubleQuotes46>, context.getRealPath(<doubleQuotes46>/<doubleQuotes46>));<newline46mondego>}<newline46mondego>"
"1720splitHere46","218037splitHere46","log4j.appender.file.File=${rootPath}WEB-INF/logs/MyLog.log<newline46mondego>"
"1721splitHere46","218510splitHere46","int x;<newline46mondego>x = 10;<newline46mondego>"
"1722splitHere46","218510splitHere46","int"
"1723splitHere46","218510splitHere46","Integer num;<newline46mondego>num = new Integer(10);<newline46mondego>"
"1724splitHere46","218510splitHere46","num"
"1725splitHere46","218510splitHere46","Integer"
"1726splitHere46","218510splitHere46","new"
"1727splitHere46","218510splitHere46","."
"1728splitHere46","218510splitHere46","Exception"
"1729splitHere46","218510splitHere46","public void doSomething(Integer num){<newline46mondego>   //do something to num<newline46mondego>}<newline46mondego>"
"1730splitHere46","218510splitHere46","doSomething(null);<newline46mondego>"
"1731splitHere46","218510splitHere46","public void doSomething(Integer num){<newline46mondego>    if(num != null){<newline46mondego>       //do something to num<newline46mondego>    }<newline46mondego>}<newline46mondego>"
"1732splitHere46","218548splitHere46","@ManyToOne<newline46mondego>@JoinColumn(name=<doubleQuotes46>actionplanId<doubleQuotes46>)<newline46mondego>public ActionPlan getActionPlan(){<newline46mondego><newline46mondego>}<newline46mondego>"
"1733splitHere46","219657splitHere46","${dynamic}"
"1734splitHere46","219657splitHere46","c:out"
"1735splitHere46","219657splitHere46","HTML"
"1736splitHere46","219657splitHere46","<>"
"1737splitHere46","219657splitHere46","c:out"
"1738splitHere46","219780splitHere46","<newline46mondego>"
"1739splitHere46","219998splitHere46","instanceof"
"1740splitHere46","219998splitHere46","instanceof"
"1741splitHere46","219998splitHere46","getClass().isArray()"
"1742splitHere46","219998splitHere46","instanceof"
"1743splitHere46","219998splitHere46","false"
"1744splitHere46","219998splitHere46","isArray"
"1745splitHere46","219998splitHere46","NullPointerException"
"1746splitHere46","219998splitHere46","instanceof"
"1747splitHere46","219998splitHere46","false"
"1748splitHere46","219998splitHere46","isArray"
"1749splitHere46","219998splitHere46","true"
"1750splitHere46","220726splitHere46","public MyBigObjectOfStorage getDB() {<newline46mondego>  return m_oDB;<newline46mondego>}<newline46mondego>"
"1751splitHere46","220921splitHere46","package com.boo;<newline46mondego><newline46mondego>import com.foo.Bar;<newline46mondego><newline46mondego>public class StackOverflow {<newline46mondego><newline46mondego>private Bar myBar;<newline46mondego><newline46mondego>}<newline46mondego>"
"1752splitHere46","221024splitHere46","int CharValues['f'-'0'+1] = {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, -1, -1, ... -1, 10, 11, 12, ...};<newline46mondego><newline46mondego>if (c < '0' || c > 'f') {<newline46mondego>    throw new IllegalArgumentException();<newline46mondego>}<newline46mondego>int n = CharValues[c-'0'];<newline46mondego>if (n < 0) {<newline46mondego>    throw new IllegalArgumentException();<newline46mondego>}<newline46mondego>// n contains the digit value<newline46mondego>"
"1753splitHere46","221712splitHere46","{\K132}Unmei {\K34}no {\K54}tobira<newline46mondego>{\K60}{\K132}yukkuri {\K36}to {\K142}hirakareta<newline46mondego>"
"1754splitHere46","221763splitHere46","clientConfig = new DefaultClientConfig();<newline46mondego>    client = Client.create(clientConfig);<newline46mondego><newline46mondego>    resource = client.resource(<doubleQuotes46>http://localhost:8080<doubleQuotes46>);<newline46mondego>    // lets get the XML as a String<newline46mondego>    String text = resource(<doubleQuotes46>foo<doubleQuotes46>).accept(<doubleQuotes46>application/xml<doubleQuotes46>).get(String.class);        <newline46mondego>"
"1755splitHere46","221916splitHere46","public abstract class DatabaseField {<newline46mondego><newline46mondego>  private String FieldName;<newline46mondego><newline46mondego>  private DatabaseField(String fname) {<newline46mondego>    this.FieldName = fname;<newline46mondego>  }<newline46mondego><newline46mondego>  public String getFieldName() {<newline46mondego>    return FieldName;<newline46mondego>  }<newline46mondego>}<newline46mondego>"
"1756splitHere46","221990splitHere46","final int width = image.getWidth();<newline46mondego>int[] imgData = new int[width];<newline46mondego>int[] maskData = new int[width];<newline46mondego><newline46mondego>for (int y = 0; y < image.getHeight(); y++) {<newline46mondego>    // fetch a line of data from each image<newline46mondego>    image.getRGB(0, y, width, 1, imgData, 0, 1);<newline46mondego>    mask.getRGB(0, y, width, 1, maskData, 0, 1);<newline46mondego>    // apply the mask<newline46mondego>    for (int x = 0; x < width; x++) {<newline46mondego>        int color = imgData[x] & 0x00FFFFFF; // mask away any alpha present<newline46mondego>        int maskColor = (maskData[x] & 0x00FF0000) << 8; // shift red into alpha bits<newline46mondego>        color |= maskColor;<newline46mondego>        imgData[x] = color;<newline46mondego>    }<newline46mondego>    // replace the data<newline46mondego>    image.setRGB(0, y, width, 1, imgData, 0, 1);<newline46mondego>}<newline46mondego>"
"1757splitHere46","222010splitHere46","OutputStream"
"1758splitHere46","222010splitHere46","ByteArrayOutputStream"
"1759splitHere46","222295splitHere46","public class StudentBuilder<newline46mondego>{<newline46mondego>    private String _name;<newline46mondego>    private int _age = 14;      // this has a default<newline46mondego>    private String _motto = <doubleQuotes46><doubleQuotes46>; // most students don't have one<newline46mondego><newline46mondego>    public StudentBuilder() { }<newline46mondego><newline46mondego>    public Student buildStudent()<newline46mondego>    {<newline46mondego>        return new Student(_name, _age, _motto);<newline46mondego>    }<newline46mondego><newline46mondego>    public StudentBuilder name(String _name)<newline46mondego>    {<newline46mondego>        this._name = _name;<newline46mondego>        return this;<newline46mondego>    }<newline46mondego><newline46mondego>    public StudentBuilder age(int _age)<newline46mondego>    {<newline46mondego>        this._age = _age;<newline46mondego>        return this;<newline46mondego>    }<newline46mondego><newline46mondego>    public StudentBuilder motto(String _motto)<newline46mondego>    {<newline46mondego>        this._motto = _motto;<newline46mondego>        return this;<newline46mondego>    }<newline46mondego>}<newline46mondego>"
"1760splitHere46","222295splitHere46","Student s1 = new StudentBuilder().name(<doubleQuotes46>Eli<doubleQuotes46>).buildStudent();<newline46mondego>Student s2 = new StudentBuilder()<newline46mondego>                 .name(<doubleQuotes46>Spicoli<doubleQuotes46>)<newline46mondego>                 .age(16)<newline46mondego>                 .motto(<doubleQuotes46>Aloha, Mr Hand<doubleQuotes46>)<newline46mondego>                 .buildStudent();<newline46mondego>"
"1761splitHere46","222554splitHere46","SHFileOperation"
"1762splitHere46","222554splitHere46","FO_DELETE"
"1763splitHere46","222554splitHere46","SHFILEOPSTRUCT"
"1764splitHere46","222885splitHere46","Font mono = new Font(parent.getDisplay(), <doubleQuotes46>Monospaced<doubleQuotes46>, 10, SWT.NONE);"
"1765splitHere46","222992splitHere46","add"
"1766splitHere46","222992splitHere46","setLayout"
"1767splitHere46","223152splitHere46","public interface Reducer<A, T><newline46mondego>{<newline46mondego>    public A foldIn(A accum, T next);<newline46mondego>}<newline46mondego>"
"1768splitHere46","223152splitHere46","public class Reductor<A, T><newline46mondego>{<newline46mondego>    private Reducer<A, T> worker;<newline46mondego>    public Reductor<A, T>(Reducer<A, T> worker)<newline46mondego>    {<newline46mondego>        this.worker = worker;<newline46mondego>    }<newline46mondego><newline46mondego>    public A fold(A rval, Iterator<T> itr)<newline46mondego>    {<newline46mondego>        while(itr.hasNext())<newline46mondego>        {<newline46mondego>            A rval = worker.foldIn(rval, itr.next());<newline46mondego>        }<newline46mondego>        return rval;<newline46mondego>    }<newline46mondego>}<newline46mondego>"
"1769splitHere46","223152splitHere46","Reductor r = new Reductor<A, T>(new Reducer<A, T>()<newline46mondego>{<newline46mondego>    public A foldIn(A prev, T next)<newline46mondego>    {<newline46mondego>        A rval;<newline46mondego>       //do stuff...<newline46mondego>       return rval;<newline46mondego>     }<newline46mondego> }<newline46mondego><newline46mondego> A fold = r.fold(new A(), collection.getIterator());<newline46mondego>"
"1770splitHere46","223691splitHere46","// Code starts here put this into midlet run() method<newline46mondego><newline46mondego>public void run()<newline46mondego>{<newline46mondego>  try<newline46mondego>  {<newline46mondego>    InputStream is = getClass().getResourceAsStream(<doubleQuotes46>your_audio_file.mp3<doubleQuotes46>);<newline46mondego>    player = Manager.createPlayer(is,<doubleQuotes46>audio/mpeg<doubleQuotes46>);<newline46mondego><newline46mondego>//  if <doubleQuotes46>audio/mpeg<doubleQuotes46> doesn't work try <doubleQuotes46>audio/mp3<doubleQuotes46><newline46mondego><newline46mondego>    player.realize();  <newline46mondego>    player.prefetch();<newline46mondego>    player.start();<newline46mondego>  }<newline46mondego>  catch(Exception e)<newline46mondego>  {}<newline46mondego>}<newline46mondego>"
"1771splitHere46","223923splitHere46","public class GenericsTest<T extends Animal><newline46mondego>{<newline46mondego>  private List<T> myList;<newline46mondego><newline46mondego>  public static void main(String args[])<newline46mondego>  {<newline46mondego>    new GenericsTest<Dog>(new ArrayList<Dog>());<newline46mondego>  }<newline46mondego><newline46mondego>  public GenericsTest(List<T> list)<newline46mondego>  {<newline46mondego>    myList = list;<newline46mondego>  }<newline46mondego><newline46mondego>  public void add(T a)<newline46mondego>  {<newline46mondego>    myList.add(a);<newline46mondego>  }<newline46mondego>}<newline46mondego>"
"1772splitHere46","223929splitHere46","Iterator.remove()"
"1773splitHere46","223929splitHere46","Iterator.remove"
"1774splitHere46","224314splitHere46","theBoolean = !theBoolean;<newline46mondego>"
"1775splitHere46","224418splitHere46","build"
"1776splitHere46","224418splitHere46","<sourceDirectory>${basedir}/src</sourceDirectory><newline46mondego>"
"1777splitHere46","224773splitHere46","public class MockParent {<newline46mondego>    public static String method() {<newline46mondego>        return <doubleQuotes46>MOCK<doubleQuotes46>;<newline46mondego>    }<newline46mondego>}<newline46mondego>"
"1778splitHere46","224886splitHere46","// Create cache<newline46mondego>final int MAX_ENTRIES = 100;<newline46mondego>Map cache = new LinkedHashMap(MAX_ENTRIES+1, .75F, true) {<newline46mondego>    // This method is called just after a new entry has been added<newline46mondego>    public boolean removeEldestEntry(Map.Entry eldest) {<newline46mondego>        return size() > MAX_ENTRIES;<newline46mondego>    }<newline46mondego>};<newline46mondego><newline46mondego>// Add to cache<newline46mondego>Object key = <doubleQuotes46>key<doubleQuotes46>;<newline46mondego>cache.put(key, object);<newline46mondego><newline46mondego>// Get object<newline46mondego>Object o = cache.get(key);<newline46mondego>if (o == null && !cache.containsKey(key)) {<newline46mondego>    // Object not in cache. If null is not a possible value in the cache,<newline46mondego>    // the call to cache.contains(key) is not needed<newline46mondego>}<newline46mondego><newline46mondego>// If the cache is to be used by multiple threads,<newline46mondego>// the cache must be wrapped with code to synchronize the methods<newline46mondego>cache = (Map)Collections.synchronizedMap(cache);<newline46mondego>"
"1779splitHere46","225360splitHere46","myString.split(<doubleQuotes46>\\s+<doubleQuotes46>);<newline46mondego>"
"1780splitHere46","225360splitHere46","\\s"
"1781splitHere46","225360splitHere46","[ \\t\\n\\x0B\\f\\r]"
"1782splitHere46","225417splitHere46","**/.svn/"
"1783splitHere46","225851splitHere46","catch(Exception)"
"1784splitHere46","225851splitHere46","catch(Throwable)"
"1785splitHere46","225851splitHere46","java.lang.Error"
"1786splitHere46","225851splitHere46","OutOfMemoryError"
"1787splitHere46","225851splitHere46","System.gc()"
"1788splitHere46","225914splitHere46","MySingleton"
"1789splitHere46","225914splitHere46","firstTime()"
"1790splitHere46","226160splitHere46","Properties"
"1791splitHere46","226160splitHere46","Object"
"1792splitHere46","226160splitHere46","String"
"1793splitHere46","226160splitHere46","String"
"1794splitHere46","226160splitHere46","bundle.getStringArray(key)"
"1795splitHere46","226160splitHere46","(String[]) bundle.getObject(key)"
"1796splitHere46","226160splitHere46","String[]"
"1797splitHere46","226160splitHere46","String"
"1798splitHere46","226160splitHere46","split()"
"1799splitHere46","226326splitHere46","commons-collections"
"1800splitHere46","226479splitHere46","public void doStuffOnThisObject()<newline46mondego>"
"1801splitHere46","226479splitHere46","public void wait()<newline46mondego>"
"1802splitHere46","226638splitHere46","Date lm = new Date(lastmodified);<newline46mondego>String lasmod = new SimpleDateFormat(<doubleQuotes46>yyyy-MM-dd<doubleQuotes46>).format(lm);<newline46mondego>"
"1803splitHere46","226646splitHere46","File repositoryPath = new File(<doubleQuotes46>\\temp<doubleQuotes46>);<newline46mondego>File uploadedFile = new File(<doubleQuotes46>\\applets<doubleQuotes46>);<newline46mondego>"
"1804splitHere46","226646splitHere46","temp"
"1805splitHere46","226646splitHere46","applets"
"1806splitHere46","226646splitHere46","bin"
"1807splitHere46","226646splitHere46","Logger.getLogger(UploadGameServlet.class.getName())"
"1808splitHere46","226646splitHere46","repositoryPath.getAbsolutePath()"
"1809splitHere46","226827splitHere46","Map"
"1810splitHere46","226827splitHere46","getPathInfo()"
"1811splitHere46","226827splitHere46","null"
"1812splitHere46","226827splitHere46","/departments/"
"1813splitHere46","226920splitHere46","Calendar cal = Calendar.getInstance();<newline46mondego>try {<newline46mondego>    cal.setTime(yourDate);<newline46mondego>}<newline46mondego>catch (Exception e) {<newline46mondego>  System.out.println(<doubleQuotes46>Invalid date<doubleQuotes46>);<newline46mondego>}<newline46mondego>"
"1814splitHere46","227049splitHere46","Date date = new Date();                      // timestamp now<newline46mondego>Calendar cal = Calendar.getInstance();       // get calendar instance<newline46mondego>cal.setTime(date);                           // set cal to date<newline46mondego>cal.set(Calendar.HOUR_OF_DAY, 0);            // set hour to midnight<newline46mondego>cal.set(Calendar.MINUTE, 0);                 // set minute in hour<newline46mondego>cal.set(Calendar.SECOND, 0);                 // set second in minute<newline46mondego>cal.set(Calendar.MILLISECOND, 0);            // set millis in second<newline46mondego>Date zeroedDate = cal.getTime();             // actually computes the new Date<newline46mondego>"
"1815splitHere46","227300splitHere46","try<newline46mondego>{<newline46mondego>  final Pattern aMethodNamePattern = Pattern.compile(<doubleQuotes46>foo[Bb]ar<doubleQuotes46>);<newline46mondego>  final List<Method> someMethods = aClass.getDeclaredMethods();<newline46mondego>  final List<Method> someCompliantMethods = new ArrayList<Method>();<newline46mondego>  for(final Method aMethod: someMethods)<newline46mondego>  {<newline46mondego>    final String aMethodName = aMethod.getName();<newline46mondego>    final Matcher aMethodNameMatcher = aMethodNamePattern.getMatcher(aMethodName);<newline46mondego>    if(aMethodNameMatcher.matches() == true)<newline46mondego>    {<newline46mondego>       someCompliantMethods.add(aMethod);<newline46mondego>    }<newline46mondego>}<newline46mondego>catch(...) // catch all exceptions like SecurityException, IllegalAccessException, ...<newline46mondego>"
"1816splitHere46","227551splitHere46","${pageDividers.size}"
"1817splitHere46","227551splitHere46","getSize()"
"1818splitHere46","227551splitHere46","size()"
"1819splitHere46","227551splitHere46","getSize()"
"1820splitHere46","227551splitHere46","${fn:length(pageDividers)}<newline46mondego>"
"1821splitHere46","227551splitHere46","<%@ taglib uri=<doubleQuotes46>http://java.sun.com/jsp/jstl/functions<doubleQuotes46> prefix=<doubleQuotes46>fn<doubleQuotes46> %><newline46mondego>"
"1822splitHere46","227569splitHere46","package foo;<newline46mondego><newline46mondego>public class Test<newline46mondego>{<newline46mondego>    public static void main(String[] args)<newline46mondego>    {<newline46mondego>        ClassLoader loader = Test.class.getClassLoader();<newline46mondego>        System.out.println(loader.getResource(<doubleQuotes46>foo/Test.class<doubleQuotes46>));<newline46mondego>    }<newline46mondego>}<newline46mondego>"
"1823splitHere46","227569splitHere46","file:/C:/Users/Jon/Test/foo/Test.class<newline46mondego>"
"1824splitHere46","227948splitHere46","public class MySocketFactorySettingKeepAlive ... {<newline46mondego>  // overwrite createSocket methods, call super.createSocket, add keepAlive<newline46mondego>}<newline46mondego><newline46mondego>Socket.setSocketImplFactory(youFactoryDemandingKeepAlive);<newline46mondego>"
"1825splitHere46","227964splitHere46","private Service service;<newline46mondego><newline46mondego>public synchronized void initialise() {<newline46mondego>    if (service == null) {<newline46mondego>        // load external service<newline46mondego>        // set field to the loaded service if contacted<newline46mondego>    }<newline46mondego>}<newline46mondego><newline46mondego>public String get() {<newline46mondego>    if (service == null) {            <newline46mondego>        initialise(); // try and load the service again<newline46mondego>    }<newline46mondego>    // perform operation on the service is service is not null<newline46mondego>}<newline46mondego>"
"1826splitHere46","228356splitHere46","new SimpleDateFormat(<doubleQuotes46>MM/dd/yyyy<doubleQuotes46>).parse(dateString);<newline46mondego>"
"1827splitHere46","228430splitHere46","taglib"
"1828splitHere46","228430splitHere46","taglib"
"1829splitHere46","228430splitHere46","taglib"
"1830splitHere46","228430splitHere46","<%@ taglib prefix=<doubleQuotes46>c<doubleQuotes46> uri=<doubleQuotes46>http://java.sun.com/jsp/jstl/core<doubleQuotes46> %><newline46mondego>"
"1831splitHere46","228430splitHere46","<%@ taglib prefix=<doubleQuotes46>ex<doubleQuotes46> uri=<doubleQuotes46>/taglib.tld<doubleQuotes46> %><newline46mondego>"
"1832splitHere46","228430splitHere46","taglib"
"1833splitHere46","228430splitHere46","<taglib><newline46mondego>  <taglib-uri><newline46mondego>    http://www.example.com/taglib<newline46mondego>  </taglib-uri><newline46mondego>  <taglib-location><newline46mondego>    /taglib.tld<newline46mondego>  </taglib-location><newline46mondego></taglib><newline46mondego>"
"1834splitHere46","228430splitHere46","<%@ taglib prefix=<doubleQuotes46>ex<doubleQuotes46> uri=<doubleQuotes46>http://www.example.com/taglib<doubleQuotes46> %><newline46mondego>"
"1835splitHere46","228481splitHere46","System.getProperty(<doubleQuotes46>os.name<doubleQuotes46>)<newline46mondego>"
"1836splitHere46","228481splitHere46","class ShowProperties {<newline46mondego>    public static void main(String[] args) {<newline46mondego>        System.getProperties().list(System.out);<newline46mondego>    }<newline46mondego>}<newline46mondego>"
"1837splitHere46","229006splitHere46","String source = <doubleQuotes46>0123456789<doubleQuotes46>;<newline46mondego>byte[] byteArray = source.getBytes(<doubleQuotes46>UTF-16LE<doubleQuotes46>); // Or UTF-16BE<newline46mondego>"
"1838splitHere46","229724splitHere46","<dependencies><newline46mondego>    <dependency><newline46mondego>        <groupId>junit</groupId><newline46mondego>        <artifactId>junit</artifactId><newline46mondego>        <version>4.5</version><newline46mondego>		<!-- <scope>provided</scope> --><newline46mondego>    </dependency><newline46mondego><newline46mondego>    <dependency><newline46mondego>        <groupId>org.infinitest</groupId><newline46mondego>        <artifactId>infinitest</artifactId><newline46mondego>        <scope>test</scope><newline46mondego>        <version>4.0</version><newline46mondego>    </dependency><newline46mondego><newline46mondego></dependencies><newline46mondego>"
"1839splitHere46","229764splitHere46","URE/java/juh.jar<newline46mondego>URE/java/jurt.jar<newline46mondego>URE/java/ridl.jar<newline46mondego>Basis/program/classes/unoil.jar  <newline46mondego>"
"1840splitHere46","229764splitHere46","c:/program/OpenOffice.org 3/program/<newline46mondego>"
"1841splitHere46","229919splitHere46","public enum Suit { Spade, Heart, Diamond, Club }<newline46mondego><newline46mondego>Suit theSuit = Suit.Heart;<newline46mondego><newline46mondego>szQuery = <doubleQuotes46>INSERT INTO Customers (Name, Suit) <doubleQuotes46> +<newline46mondego>          <doubleQuotes46>VALUES ('Ian Boyd', %s)<doubleQuotes46>.format(theSuit.name());<newline46mondego>"
"1842splitHere46","229919splitHere46","Suit theSuit = Suit.valueOf(reader[<doubleQuotes46>Suit<doubleQuotes46>]);<newline46mondego>"
"1843splitHere46","229919splitHere46","Name                Suit<newline46mondego>==================  ==========<newline46mondego>Shelby Jackson      2<newline46mondego>Ian Boyd            1<newline46mondego>"
"1844splitHere46","229919splitHere46","Name                Suit<newline46mondego>==================  ==========<newline46mondego>Shelby Jackson      Diamond<newline46mondego>Ian Boyd            Heart<newline46mondego>"
"1845splitHere46","229919splitHere46","public enum Suit { Unknown, Heart, Club, Diamond, Spade }<newline46mondego>"
"1846splitHere46","229919splitHere46","public enum Suit { <newline46mondego>      Unknown = 4,<newline46mondego>      Heart = 1,<newline46mondego>      Club = 3,<newline46mondego>      Diamond = 2,<newline46mondego>      Spade = 0 }<newline46mondego>"
"1847splitHere46","229957splitHere46","<input type=<doubleQuotes46>hidden<doubleQuotes46> name=<doubleQuotes46>myhiddenvalue<doubleQuotes46> value=<doubleQuotes46><%= request.getParameter(<doubleQuotes46>value<doubleQuotes46>) %><doubleQuotes46> />"
"1848splitHere46","229957splitHere46","request.getSession()"
"1849splitHere46","229957splitHere46","session"
"1850splitHere46","230063splitHere46","class LotsOfBytes<newline46mondego>{<newline46mondego>    byte a0, a1, a2, a3, a4, a5, a6, a7, a8, a9, aa, ab, ac, ad, ae, af;<newline46mondego>    byte b0, b1, b2, b3, b4, b5, b6, b7, b8, b9, ba, bb, bc, bd, be, bf;<newline46mondego>    byte c0, c1, c2, c3, c4, c5, c6, c7, c8, c9, ca, cb, cc, cd, ce, cf;<newline46mondego>    byte d0, d1, d2, d3, d4, d5, d6, d7, d8, d9, da, db, dc, dd, de, df;<newline46mondego>    byte e0, e1, e2, e3, e4, e5, e6, e7, e8, e9, ea, eb, ec, ed, ee, ef;<newline46mondego>}<newline46mondego><newline46mondego>class LotsOfInts<newline46mondego>{<newline46mondego>    int a0, a1, a2, a3, a4, a5, a6, a7, a8, a9, aa, ab, ac, ad, ae, af;<newline46mondego>    int b0, b1, b2, b3, b4, b5, b6, b7, b8, b9, ba, bb, bc, bd, be, bf;<newline46mondego>    int c0, c1, c2, c3, c4, c5, c6, c7, c8, c9, ca, cb, cc, cd, ce, cf;<newline46mondego>    int d0, d1, d2, d3, d4, d5, d6, d7, d8, d9, da, db, dc, dd, de, df;<newline46mondego>    int e0, e1, e2, e3, e4, e5, e6, e7, e8, e9, ea, eb, ec, ed, ee, ef;<newline46mondego>}<newline46mondego><newline46mondego><newline46mondego>public class Test<newline46mondego>{<newline46mondego>    private static final int SIZE = 1000000;<newline46mondego><newline46mondego>    public static void main(String[] args) throws Exception<newline46mondego>    {        <newline46mondego>        LotsOfBytes[] first = new LotsOfBytes[SIZE];<newline46mondego>        LotsOfInts[] second = new LotsOfInts[SIZE];<newline46mondego><newline46mondego>        System.gc();<newline46mondego>        long startMem = getMemory();<newline46mondego><newline46mondego>        for (int i=0; i < SIZE; i++)<newline46mondego>        {<newline46mondego>            first[i] = new LotsOfBytes();<newline46mondego>        }<newline46mondego><newline46mondego>        System.gc();<newline46mondego>        long endMem = getMemory();<newline46mondego><newline46mondego>        System.out.println (<doubleQuotes46>Size for LotsOfBytes: <doubleQuotes46> + (endMem-startMem));<newline46mondego>        System.out.println (<doubleQuotes46>Average size: <doubleQuotes46> + ((endMem-startMem) / ((double)SIZE)));<newline46mondego><newline46mondego>        System.gc();<newline46mondego>        startMem = getMemory();<newline46mondego>        for (int i=0; i < SIZE; i++)<newline46mondego>        {<newline46mondego>            second[i] = new LotsOfInts();<newline46mondego>        }<newline46mondego>        System.gc();<newline46mondego>        endMem = getMemory();<newline46mondego><newline46mondego>        System.out.println (<doubleQuotes46>Size for LotsOfInts: <doubleQuotes46> + (endMem-startMem));<newline46mondego>        System.out.println (<doubleQuotes46>Average size: <doubleQuotes46> + ((endMem-startMem) / ((double)SIZE)));<newline46mondego><newline46mondego>        // Make sure nothing gets collected<newline46mondego>        long total = 0;<newline46mondego>        for (int i=0; i < SIZE; i++)<newline46mondego>        {<newline46mondego>            total += first[i].a0 + second[i].a0;<newline46mondego>        }<newline46mondego>        System.out.println(total);<newline46mondego>    }<newline46mondego><newline46mondego>    private static long getMemory()<newline46mondego>    {<newline46mondego>        Runtime runtime = Runtime.getRuntime();<newline46mondego>        return runtime.totalMemory() - runtime.freeMemory();<newline46mondego>    }<newline46mondego>}<newline46mondego>"
"1851splitHere46","230063splitHere46","Size for LotsOfBytes: 88811688<newline46mondego>Average size: 88.811688<newline46mondego>Size for LotsOfInts: 327076360<newline46mondego>Average size: 327.07636<newline46mondego>0<newline46mondego>"
"1852splitHere46","230659splitHere46","CacheManager cacheManager = CacheManager.getInstance();<newline46mondego>int oneDay = 24 * 60 * 60;<newline46mondego>Cache memoryOnlyCache = new Cache(<doubleQuotes46>name<doubleQuotes46>, 200, false, false, oneDay, oneDay);<newline46mondego>cacheManager.addCache(memoryOnlyCache);<newline46mondego>"
"1853splitHere46","230765splitHere46","// Get TimeZone of user<newline46mondego>TimeZone currentTimeZone = sc_.getTimeZone();<newline46mondego>Calendar currentDt = new GregorianCalendar(currentTimeZone, EN_US_LOCALE);<newline46mondego>// Get the Offset from GMT taking DST into account<newline46mondego>int gmtOffset = currentTimeZone.getOffset(<newline46mondego>    currentDt.get(Calendar.ERA), <newline46mondego>    currentDt.get(Calendar.YEAR), <newline46mondego>    currentDt.get(Calendar.MONTH), <newline46mondego>    currentDt.get(Calendar.DAY_OF_MONTH), <newline46mondego>    currentDt.get(Calendar.DAY_OF_WEEK), <newline46mondego>    currentDt.get(Calendar.MILLISECOND));<newline46mondego>// convert to hours<newline46mondego>gmtOffset = gmtOffset / (60*60*1000);<newline46mondego>System.out.println(<doubleQuotes46>Current User's TimeZone: <doubleQuotes46> + currentTimeZone.getID());<newline46mondego>System.out.println(<doubleQuotes46>Current Offset from GMT (in hrs):<doubleQuotes46> + gmtOffset);<newline46mondego>// Get TS from User Input<newline46mondego>Timestamp issuedDate = (Timestamp) getACPValue(inputs_, <doubleQuotes46>issuedDate<doubleQuotes46>);<newline46mondego>System.out.println(<doubleQuotes46>TS from ACP: <doubleQuotes46> + issuedDate);<newline46mondego>// Set TS into Calendar<newline46mondego>Calendar issueDate = convertTimestampToJavaCalendar(issuedDate);<newline46mondego>// Adjust for GMT (note the offset negation)<newline46mondego>issueDate.add(Calendar.HOUR_OF_DAY, -gmtOffset);<newline46mondego>System.out.println(<doubleQuotes46>Calendar Date converted from TS using GMT and US_EN Locale: <doubleQuotes46><newline46mondego>    + DateFormat.getDateTimeInstance(DateFormat.SHORT, DateFormat.SHORT)<newline46mondego>    .format(issueDate.getTime()));<newline46mondego>"
"1854splitHere46","230812splitHere46","__eq__"
"1855splitHere46","230812splitHere46","__hash__"
"1856splitHere46","230812splitHere46","def __hash__(self):<newline46mondego>    return self.hashCode()<newline46mondego>def __eq__(self, o):<newline46mondego>    return self.equals(o)<newline46mondego>"
"1857splitHere46","230849splitHere46","MailSender mailSender = new JavaMailSenderImpl();<newline46mondego>SimpleMailMessage message = new SimpleMailMessage();<newline46mondego>"
"1858splitHere46","230849splitHere46","StringBuffer content = new StringBuffer();<newline46mondego>try {<newline46mondego>    content.append(FreeMarkerTemplateUtils.processTemplateIntoString(<newline46mondego>        configuration.getTemplate(templateName), templateVars));<newline46mondego>} catch (IOException e) {<newline46mondego>    // handle<newline46mondego>} catch (TemplateException e) {<newline46mondego>    // handle<newline46mondego>}<newline46mondego><newline46mondego>message.setFrom(getMailFromName() + <doubleQuotes46> <<doubleQuotes46> + getMailFromAddr() + <doubleQuotes46>><doubleQuotes46>);<newline46mondego>message.setTo(getMailTo());<newline46mondego>if (getCcTo() != null)<newline46mondego>    message.setCc(getCcTo());<newline46mondego>message.setSubject(getSubject());<newline46mondego>message.setText(content.toString());<newline46mondego><newline46mondego>mailSender.send(message);<newline46mondego>"
"1859splitHere46","230849splitHere46","<bean id=<doubleQuotes46>freemarkerMailConfiguration<doubleQuotes46><newline46mondego>  class=<doubleQuotes46>org.springframework.ui.freemarker.FreeMarkerConfigurationFactoryBean<doubleQuotes46>><newline46mondego>    <property name=<doubleQuotes46>templateLoaderPath<doubleQuotes46> value=<doubleQuotes46>/WEB-INF<doubleQuotes46> /><newline46mondego></bean><newline46mondego><bean id=<doubleQuotes46>yourEmailServiceClass<doubleQuotes46> class=<doubleQuotes46>YourEmailServiceClass<doubleQuotes46>><newline46mondego>    <property name=<doubleQuotes46>mailSender<doubleQuotes46> ref=<doubleQuotes46>mailSender<doubleQuotes46> /><newline46mondego>    <property name=<doubleQuotes46>freemarkerMailConfiguration<doubleQuotes46> ref=<doubleQuotes46>freemarkerMailConfiguration<doubleQuotes46> /><newline46mondego>    <property name=<doubleQuotes46>freemarkerTemplate<doubleQuotes46> value=<doubleQuotes46>email.ftl<doubleQuotes46> /><newline46mondego>    <property name=<doubleQuotes46>mailFromName<doubleQuotes46> value=<doubleQuotes46>John Q. Programmer<doubleQuotes46> /><newline46mondego>    <property name=<doubleQuotes46>mailFromAddr<doubleQuotes46> value=<doubleQuotes46>john.q.programmer@mail.com<doubleQuotes46> /><newline46mondego>    <property name=<doubleQuotes46>subject<doubleQuotes46> value=<doubleQuotes46>Email Subject<doubleQuotes46> /><newline46mondego></bean><newline46mondego>"
"1860splitHere46","231134splitHere46","dwnLoadCel.doAuthorization()"
"1861splitHere46","231134splitHere46","HttpSession"
"1862splitHere46","231134splitHere46","public void testDoAuthorization(){<newline46mondego>    final HttpSession session = context.mock(HttpSession.class);<newline46mondego><newline46mondego>    context.checking(new Expectations(){{<newline46mondego>        // ???<newline46mondego>    }});<newline46mondego><newline46mondego>    assertTrue(dwnLoadCel.doAuthorization(session));<newline46mondego>"
"1863splitHere46","231134splitHere46","session"
"1864splitHere46","231134splitHere46","doAuthorization"
"1865splitHere46","231134splitHere46","true"
"1866splitHere46","231463splitHere46","java.lang.reflect.Proxy"
"1867splitHere46","231463splitHere46","<context:component-scan>"
"1868splitHere46","232559splitHere46","long mask ( long n ) { <newline46mondego>    long m   = n % 10;<newline46mondego>    long n_d = n;<newline46mondego>    long div = 10;<newline46mondego>    int  shl = 0;<newline46mondego>    while ( n_d >= 10 ) { <newline46mondego>        n_d /= 10;<newline46mondego>        long t = n_d % 10;<newline46mondego>        m |= ( t << ( shl += 4 ));<newline46mondego>    }<newline46mondego>    return m;<newline46mondego>}<newline46mondego><newline46mondego>boolean findMatch( int a, int b ) { <newline46mondego>    if ( b < a  ) return false;<newline46mondego>    if ( a == b ) return true;<newline46mondego><newline46mondego>    long m_a = mask( a );    // set up mask O(n)<newline46mondego>    long m_b = mask( b );    // set up mask O(m)<newline46mondego><newline46mondego>    while ( m_a < m_b ) {<newline46mondego>        if (( m_a & m_b ) == m_a ) return true;<newline46mondego>        m_a <<= 4;  // shift - fast!<newline46mondego>        if ( m_a == m_b ) return true;<newline46mondego>    }  // O(p)<newline46mondego>    return false;<newline46mondego>}       <newline46mondego><newline46mondego>void testContains( int a, int b ) { <newline46mondego>    print( <doubleQuotes46>findMatch( <doubleQuotes46> + a + <doubleQuotes46>, <doubleQuotes46> + b + <doubleQuotes46> )=<doubleQuotes46> + findMatch( a, b ));<newline46mondego>}<newline46mondego><newline46mondego>testContains( 12, 120 );<newline46mondego>testContains( 12, 125 );<newline46mondego>testContains( 123, 551241238 );<newline46mondego>testContains( 131, 1214124 );<newline46mondego>testContains( 131, 1314124 );<newline46mondego>"
"1869splitHere46","232559splitHere46","indexOf"
"1870splitHere46","232559splitHere46","boolean findMatch( int a, int b ) { <newline46mondego>    String s_a = <doubleQuotes46><doubleQuotes46> + a;<newline46mondego>    String s_b = <doubleQuotes46><doubleQuotes46> + b;<newline46mondego>    return s_a.indexOf( s_b ) > -1;<newline46mondego>}<newline46mondego>"
"1871splitHere46","232813splitHere46","setlocal<newline46mondego>FOR /F <doubleQuotes46>tokens=*<doubleQuotes46> %%i in ('type Settings.txt') do SET %%i<newline46mondego>java -Dsetting1=%setting1% ...<newline46mondego>endlocal<newline46mondego>"
"1872splitHere46","233492splitHere46","DataSource"
"1873splitHere46","233492splitHere46","Connection"
"1874splitHere46","233492splitHere46","DataSource"
"1875splitHere46","233492splitHere46","Connection"
"1876splitHere46","233595splitHere46","boolean even = { int x => x % 2 == 0 }.invoke(15);<newline46mondego>"
"1877splitHere46","233595splitHere46","{ int x => x % 2 == 0 }"
"1878splitHere46","233855splitHere46","netbeans_default_options"
"1879splitHere46","234283splitHere46",".*"
"1880splitHere46","234283splitHere46","\\Z"
"1881splitHere46","234746splitHere46","<servlet><newline46mondego>    <servlet-name>action</servlet-name><newline46mondego>    <servlet-class>org.apache.struts.action.ActionServlet</servlet-class><newline46mondego>    <init-param><newline46mondego>    	<param-name>config</param-name><newline46mondego>    	<param-value><newline46mondego>    		WEB-INF/config/struts-config.xml,<newline46mondego>    		WEB-INF/config/struts-config-stuff.xml,<newline46mondego>    		WEB-INF/config/struts-config-good.xml,<newline46mondego>    		WEB-INF/config/struts-config-bad.xml,<newline46mondego>    		WEB-INF/config/struts-config-ugly.xml<newline46mondego>    	</param-value><newline46mondego>    </init-param><newline46mondego>    ...<newline46mondego></servlet><newline46mondego>"
"1882splitHere46","235053splitHere46","// Get current size of heap in bytes<newline46mondego>long heapSize = Runtime.getRuntime().totalMemory();<newline46mondego><newline46mondego>// Get maximum size of heap in bytes. The heap cannot grow beyond this size.<newline46mondego>// Any attempt will result in an OutOfMemoryException.<newline46mondego>long heapMaxSize = Runtime.getRuntime().maxMemory();<newline46mondego><newline46mondego>// Get amount of free memory within the heap in bytes. This size will increase<newline46mondego>// after garbage collection and decrease as new objects are created.<newline46mondego>long heapFreeSize = Runtime.getRuntime().freeMemory();<newline46mondego>"
"1883splitHere46","235321splitHere46","JFileChooser"
"1884splitHere46","236229splitHere46","public abstract class ExternalScript extends Script {<newline46mondego><newline46mondego>private String source;<newline46mondego><newline46mondego>public void setSource(String file) {<newline46mondego>    source = file;<newline46mondego>}<newline46mondego><newline46mondego>public String getSource() {<newline46mondego>    return source;<newline46mondego>}<newline46mondego>"
"1885splitHere46","236425splitHere46","String[] tokens = line.split(<doubleQuotes46>#<doubleQuotes46>);<newline46mondego>"
"1886splitHere46","236425splitHere46","tokens"
"1887splitHere46","236425splitHere46","tokens.length()"
"1888splitHere46","236642splitHere46","JLabel label = new JLabel( <doubleQuotes46><html>&#8984; is the Apple command symbol.<doubleQuotes46> );<newline46mondego>"
"1889splitHere46","237068splitHere46","Pattern p = Pattern.compile(<doubleQuotes46>^[a-zA-Z]+([0-9]+).*<doubleQuotes46>);<newline46mondego>Matcher m = p.matcher(<doubleQuotes46>Testing123Testing<doubleQuotes46>);<newline46mondego><newline46mondego>if (m.find()) {<newline46mondego>    System.out.println(m.group(1));<newline46mondego>}<newline46mondego>"
"1890splitHere46","237181splitHere46","import java.util.*;<newline46mondego>import java.util.regex.Pattern;<newline46mondego>import java.util.regex.Matcher;<newline46mondego><newline46mondego>public class ReplaceTokens {<newline46mondego>public static void main(String[] args) {<newline46mondego>    List<String> elements = Arrays.asList(<doubleQuotes46>ax<doubleQuotes46>, <doubleQuotes46>bx<doubleQuotes46>, <doubleQuotes46>dx<doubleQuotes46>, <doubleQuotes46>c<doubleQuotes46>, <doubleQuotes46>acc<doubleQuotes46>);<newline46mondego>    final String patternStr = join(elements, <doubleQuotes46>|<doubleQuotes46>); //build string <doubleQuotes46>ax|bx|dx|c|acc<doubleQuotes46> <newline46mondego>    Pattern p = Pattern.compile(patternStr);<newline46mondego>    Matcher m = p.matcher(<doubleQuotes46>ax 5 5 dx 3 acc c ax bx<doubleQuotes46>);<newline46mondego>    StringBuffer sb = new StringBuffer();<newline46mondego>    Random rand = new Random();<newline46mondego>    while (m.find()){<newline46mondego>        String randomSymbol = elements.get(rand.nextInt(elements.size()));<newline46mondego>        m.appendReplacement(sb,randomSymbol);<newline46mondego>    }<newline46mondego>    m.appendTail(sb);<newline46mondego>    System.out.println(sb);<newline46mondego>}<newline46mondego><newline46mondego>/**<newline46mondego> * this method is only needed to generate the string ax|bx|dx|c|acc in a clean way....<newline46mondego> * @see org.apache.commons.lang.StringUtils.join    for a more common alternative...<newline46mondego> */<newline46mondego>public static String join(List<String> s, String delimiter) {<newline46mondego>    if (s.isEmpty()) return <doubleQuotes46><doubleQuotes46>;<newline46mondego>    Iterator<String> iter = s.iterator();<newline46mondego>    StringBuffer buffer = new StringBuffer(iter.next());<newline46mondego>    while (iter.hasNext()) buffer.append(delimiter).append(iter.next());<newline46mondego>    return buffer.toString();<newline46mondego>}<newline46mondego>"
"1891splitHere46","237204splitHere46","public static boolean isInteger(String str) {<newline46mondego>	if (str == null) {<newline46mondego>		return false;<newline46mondego>	}<newline46mondego>	int length = str.length();<newline46mondego>	if (length == 0) {<newline46mondego>		return false;<newline46mondego>	}<newline46mondego>	int i = 0;<newline46mondego>	if (str.charAt(0) == '-') {<newline46mondego>		if (length == 1) {<newline46mondego>			return false;<newline46mondego>		}<newline46mondego>		i = 1;<newline46mondego>	}<newline46mondego>	for (; i < length; i++) {<newline46mondego>		char c = str.charAt(i);<newline46mondego>		if (c <= '/' || c >= ':') {<newline46mondego>			return false;<newline46mondego>		}<newline46mondego>	}<newline46mondego>	return true;<newline46mondego>}<newline46mondego>"
"1892splitHere46","237467splitHere46","if (objectReference instanceof type)<newline46mondego>"
"1893splitHere46","238333splitHere46","catch( Exception e ) {}<newline46mondego>"
"1894splitHere46","238634splitHere46","public static void main(String[] args) {<newline46mondego>    URL url;<newline46mondego>    InputStream is = null;<newline46mondego>    BufferedReader br;<newline46mondego>    String line;<newline46mondego><newline46mondego>    try {<newline46mondego>        url = new URL(<doubleQuotes46>http://stackoverflow.com/<doubleQuotes46>);<newline46mondego>        is = url.openStream();  // throws an IOException<newline46mondego>        br = new BufferedReader(new InputStreamReader(is));<newline46mondego><newline46mondego>        while ((line = br.readLine()) != null) {<newline46mondego>            System.out.println(line);<newline46mondego>        }<newline46mondego>    } catch (MalformedURLException mue) {<newline46mondego>         mue.printStackTrace();<newline46mondego>    } catch (IOException ioe) {<newline46mondego>         ioe.printStackTrace();<newline46mondego>    } finally {<newline46mondego>        try {<newline46mondego>            if (is != null) is.close();<newline46mondego>        } catch (IOException ioe) {<newline46mondego>            // nothing to see here<newline46mondego>        }<newline46mondego>    }<newline46mondego>}<newline46mondego>"
"1895splitHere46","238850splitHere46","public byte[] download(URL url) throws IOException {<newline46mondego>    URLConnection uc = url.openConnection();<newline46mondego>    int len = uc.getContentLength();<newline46mondego>    InputStream is = new BufferedInputStream(uc.getInputStream());<newline46mondego>    try {<newline46mondego>        byte[] data = new byte[len];<newline46mondego>        int offset = 0;<newline46mondego>        while (offset < len) {<newline46mondego>            int read = is.read(data, offset, data.length - offset);<newline46mondego>            if (read < 0) {<newline46mondego>                break;<newline46mondego>            }<newline46mondego>          offset += read;<newline46mondego>        }<newline46mondego>        if (offset < len) {<newline46mondego>            throw new IOException(<newline46mondego>                String.format(<doubleQuotes46>Read %d bytes; expected %d<doubleQuotes46>, offset, len));<newline46mondego>        }<newline46mondego>        return data;<newline46mondego>    } finally {<newline46mondego>        is.close();<newline46mondego>    }<newline46mondego>}<newline46mondego>"
"1896splitHere46","239293splitHere46","java.util.List"
"1897splitHere46","239293splitHere46","<%@ page import=<doubleQuotes46>java.util.List<doubleQuotes46> %><newline46mondego>"
"1898splitHere46","239293splitHere46","<%@ page import=<doubleQuotes46>package1.myClass1,package2.myClass2,....,packageN.myClassN<doubleQuotes46> %><newline46mondego>"
"1899splitHere46","239663splitHere46","Monitor x = new EmailMonitor();<newline46mondego>List<NonEmailAccount> nonEmailAccounts = ...;<newline46mondego>x.performMonitor(nonEmailAccounts);<newline46mondego>"
"1900splitHere46","239663splitHere46","Monitor"
"1901splitHere46","239663splitHere46","EmailMonitor"
"1902splitHere46","239663splitHere46","Monitor<EmailAccount>"
"1903splitHere46","239663splitHere46","public abtract class Monitor<T extends MonitorAccount><newline46mondego>{<newline46mondego>    ...<newline46mondego>    public abstract List<? extends T> performMonitor(<newline46mondego>        List<? extends T> accounts);<newline46mondego>}<newline46mondego><newline46mondego>public class EmailMonitor extends Monitor<EmailAccount><newline46mondego>{<newline46mondego>    @Override<newline46mondego>    public abstract List<? extends EmailAccount> performMonitor(<newline46mondego>        List<? extends EmailAccount> accounts)<newline46mondego>    {<newline46mondego>        // Code goes here<newline46mondego>    }<newline46mondego>}<newline46mondego>"
"1904splitHere46","239663splitHere46","performMonitor"
"1905splitHere46","239750splitHere46","class TextContainer extends JPanel<newline46mondego>{<newline46mondego>    private int m_width;<newline46mondego>    private int m_height;<newline46mondego>    private String m_text;<newline46mondego>    private AttributedCharacterIterator m_iterator;<newline46mondego>    private int m_start;<newline46mondego>    private int m_end;<newline46mondego><newline46mondego>    public TextContainer(String text, int width, int height)<newline46mondego>    {<newline46mondego>        m_text = text;<newline46mondego>        m_width = width;<newline46mondego>        m_height = height;<newline46mondego><newline46mondego>        AttributedString styledText = new AttributedString(text);<newline46mondego>        m_iterator = styledText.getIterator();<newline46mondego>        m_start = m_iterator.getBeginIndex();<newline46mondego>        m_end = m_iterator.getEndIndex();<newline46mondego>    }<newline46mondego><newline46mondego>    public String getText()<newline46mondego>    {<newline46mondego>        return m_text;<newline46mondego>    }<newline46mondego><newline46mondego>    public Dimension getPreferredSize()<newline46mondego>    {<newline46mondego>        return new Dimension(m_width, m_height);<newline46mondego>    }<newline46mondego><newline46mondego>    public void paint(Graphics g)<newline46mondego>    {<newline46mondego>        super.paintComponent(g);<newline46mondego><newline46mondego>        Graphics2D g2 = (Graphics2D) g;<newline46mondego>        FontRenderContext frc = g2.getFontRenderContext();<newline46mondego><newline46mondego>        LineBreakMeasurer measurer = new LineBreakMeasurer(m_iterator, frc);<newline46mondego>        measurer.setPosition(m_start);<newline46mondego><newline46mondego>        float x = 0, y = 0;<newline46mondego>        while (measurer.getPosition() < m_end)<newline46mondego>        {<newline46mondego>            TextLayout layout = measurer.nextLayout(m_width);<newline46mondego><newline46mondego>            y += layout.getAscent();<newline46mondego>            float dx = layout.isLeftToRight() ?<newline46mondego>                    0 : m_width - layout.getAdvance();<newline46mondego><newline46mondego>            layout.draw(g2, x + dx, y);<newline46mondego>            y += layout.getDescent() + layout.getLeading();<newline46mondego>        }<newline46mondego>    }<newline46mondego>}<newline46mondego>"
"1906splitHere46","239750splitHere46","public void paint(Graphics g)<newline46mondego>{<newline46mondego>    super.paintComponent(g);<newline46mondego><newline46mondego>    Graphics2D g2 = (Graphics2D) g;<newline46mondego>    FontRenderContext frc = g2.getFontRenderContext();<newline46mondego><newline46mondego>    LineBreakMeasurer measurer = new LineBreakMeasurer(m_iterator, frc);<newline46mondego>    measurer.setPosition(m_start);<newline46mondego><newline46mondego>    float y = 0;<newline46mondego>    while (measurer.getPosition() < m_end)<newline46mondego>    {<newline46mondego>        double ix = Math.sqrt((m_width / 2 - y) * y);<newline46mondego>        float x = m_width / 2.0F - (float) ix;<newline46mondego>        int width = (int) ix * 2;<newline46mondego><newline46mondego>        TextLayout layout = measurer.nextLayout(width);<newline46mondego><newline46mondego>        y += layout.getAscent();<newline46mondego>        float dx = layout.isLeftToRight() ?<newline46mondego>                0 : width - layout.getAdvance();<newline46mondego><newline46mondego>        layout.draw(g2, x + dx, y);<newline46mondego>        y += layout.getDescent() + layout.getLeading();<newline46mondego>    }<newline46mondego>}<newline46mondego>"
"1907splitHere46","240175splitHere46","public enum AgeRange {<newline46mondego>    A18TO23 (<doubleQuotes46>18-23<doubleQuotes46>),<newline46mondego>    A24TO29 (<doubleQuotes46>24-29<doubleQuotes46>),<newline46mondego>    A30TO35(<doubleQuotes46>30-35<doubleQuotes46>);<newline46mondego><newline46mondego>    private String value;<newline46mondego><newline46mondego>    AgeRange(String value){<newline46mondego>        this.value = value;<newline46mondego>    }<newline46mondego><newline46mondego>    public String toString(){<newline46mondego>        return value;<newline46mondego>    }<newline46mondego><newline46mondego>    public static AgeRange getByValue(String value){<newline46mondego>        for (final AgeRange element : EnumSet.allOf(AgeRange.class)) {<newline46mondego>            if (element.toString().equals(value)) {<newline46mondego>                return element;<newline46mondego>            }<newline46mondego>        }<newline46mondego>        return null;<newline46mondego>    }<newline46mondego>}<newline46mondego>"
"1908splitHere46","240175splitHere46","getByValue()"
"1909splitHere46","240175splitHere46","String"
"1910splitHere46","240462splitHere46","// Setup mail server<newline46mondego>props.put(<doubleQuotes46>mail.smtp.host<doubleQuotes46>, m_sending_host);<newline46mondego>props.put(<doubleQuotes46>mail.smtp.auth<doubleQuotes46>, <doubleQuotes46>true<doubleQuotes46>);<newline46mondego>"
"1911splitHere46","240462splitHere46","Transport t = session.getTransport(m_sending_protocol);<newline46mondego>t.connect(m_sending_user, m_sending_pass);<newline46mondego>"
"1912splitHere46","240462splitHere46","// Send message<newline46mondego>    try {<newline46mondego>        t.sendMessage(message, message.getAllRecipients());<newline46mondego>    } catch (Exception e){<newline46mondego>"
"1913splitHere46","240506splitHere46","jint throwNoClassDefError( JNIEnv *env, char *message )<newline46mondego>{<newline46mondego>    jclass exClass;<newline46mondego>    char *className = <doubleQuotes46>java/lang/NoClassDefFoundError<doubleQuotes46>;<newline46mondego><newline46mondego>    exClass = (*env)->FindClass( env, className);<newline46mondego>    if (exClass == NULL) {<newline46mondego>        return throwNoClassDefError( env, className );<newline46mondego>    }<newline46mondego><newline46mondego>    return (*env)->ThrowNew( env, exClass, message );<newline46mondego>}<newline46mondego><newline46mondego>jint throwNoSuchMethodError(<newline46mondego>        JNIEnv *env, char *className, char *methodName, char *signature )<newline46mondego>{<newline46mondego><newline46mondego>    jclass exClass;<newline46mondego>    char *exClassName = <doubleQuotes46>java/lang/NoSuchMethodError<doubleQuotes46> ;<newline46mondego>    LPTSTR msgBuf;<newline46mondego>    jint retCode;<newline46mondego>    size_t nMallocSize;<newline46mondego><newline46mondego>    exClass = (*env)->FindClass( env, exClassName );<newline46mondego>    if ( exClass == NULL ) {<newline46mondego>        return throwNoClassDefError( env, exClassName );<newline46mondego>    }<newline46mondego><newline46mondego>    nMallocSize = strlen(className) <newline46mondego>            + strlen(methodName)<newline46mondego>            + strlen(signature) + 8;<newline46mondego><newline46mondego>    msgBuf = malloc( nMallocSize );<newline46mondego>    if ( msgBuf == NULL ) {<newline46mondego>        return throwOutOfMemoryError<newline46mondego>                ( env, <doubleQuotes46>throwNoSuchMethodError: allocating msgBuf<doubleQuotes46> );<newline46mondego>    }<newline46mondego>    memset( msgBuf, 0, nMallocSize );<newline46mondego><newline46mondego>    strcpy( msgBuf, className );<newline46mondego>    strcat( msgBuf, <doubleQuotes46>.<doubleQuotes46> );<newline46mondego>    strcat( msgBuf, methodName );<newline46mondego>    strcat( msgBuf, <doubleQuotes46>.<doubleQuotes46> );<newline46mondego>    strcat( msgBuf, signature );<newline46mondego><newline46mondego>    retCode = (*env)->ThrowNew( env, exClass, msgBuf );<newline46mondego>    free ( msgBuf );<newline46mondego>    return retCode;<newline46mondego>}<newline46mondego><newline46mondego>jint throwNoSuchFieldError( JNIEnv *env, char *message )<newline46mondego>{<newline46mondego>    jclass exClass;<newline46mondego>    char *className = <doubleQuotes46>java/lang/NoSuchFieldError<doubleQuotes46> ;<newline46mondego><newline46mondego>    exClass = (*env)->FindClass( env, className );<newline46mondego>    if ( exClass == NULL ) {<newline46mondego>        return throwNoClassDefError( env, className );<newline46mondego>    }<newline46mondego><newline46mondego>    return (*env)->ThrowNew( env, exClass, message );<newline46mondego>}<newline46mondego><newline46mondego>jint throwOutOfMemoryError( JNIEnv *env, char *message )<newline46mondego>{<newline46mondego>    jclass exClass;<newline46mondego>    char *className = <doubleQuotes46>java/lang/OutOfMemoryError<doubleQuotes46> ;<newline46mondego><newline46mondego>    exClass = (*env)->FindClass( env, className );<newline46mondego>    if ( exClass == NULL ) {<newline46mondego>        return throwNoClassDefError( env, className );<newline46mondego>    }<newline46mondego><newline46mondego>    return (*env)->ThrowNew( env, exClass, message );<newline46mondego>}<newline46mondego>"
"1914splitHere46","240565splitHere46","DateTimeFormatter formatter =<newline46mondego>    DateTimeFormat.forPattern(<doubleQuotes46>your pattern<doubleQuotes46>).withOffsetParsed();<newline46mondego>DateTime dateTime = formatter.parseDateTime(<doubleQuotes46>your input<doubleQuotes46>);<newline46mondego>GregorianCalendar cal = dateTime.toGregorianCalendar();<newline46mondego>"
"1915splitHere46","240848splitHere46","[^(final)] static [^(final)][^(\})]*$<newline46mondego>"
"1916splitHere46","240848splitHere46","$ cat test.txt<newline46mondego>private int x = <doubleQuotes46>3<doubleQuotes46>;<newline46mondego>private static x = <doubleQuotes46>3<doubleQuotes46>;<newline46mondego>private final static String x = <doubleQuotes46>3<doubleQuotes46>;<newline46mondego>private static final String x = <doubleQuotes46>3<doubleQuotes46>;<newline46mondego>private static String x = <doubleQuotes46>3<doubleQuotes46>;<newline46mondego>public static void main(String args[]) {<newline46mondego>        blah;<newline46mondego>}<newline46mondego><newline46mondego>$ grep <doubleQuotes46>[^(final)] static [^(final)][^(\})]*$<doubleQuotes46> test.txt<newline46mondego>private static x = <doubleQuotes46>3<doubleQuotes46>;<newline46mondego>private static String x = <doubleQuotes46>3<doubleQuotes46>;<newline46mondego>"
"1917splitHere46","240848splitHere46","private static x = <doubleQuotes46>3<doubleQuotes46>;"
"1918splitHere46","240848splitHere46","final"
"1919splitHere46","240848splitHere46","static"
"1920splitHere46","240848splitHere46","[^(final)] static [^(final)]"
"1921splitHere46","240848splitHere46","[^(\})]*$"
"1922splitHere46","240848splitHere46","{"
"1923splitHere46","240848splitHere46","private static void blah()<newline46mondego>{<newline46mondego>     //hi!<newline46mondego>}<newline46mondego>"
"1924splitHere46","240859splitHere46","public static long factorial(long n) {<newline46mondego>        if      (n <  0) throw new RuntimeException(<doubleQuotes46>Underflow error in factorial<doubleQuotes46>);<newline46mondego>        else if (n > 20) throw new RuntimeException(<doubleQuotes46>Overflow error in factorial<doubleQuotes46>);<newline46mondego>        else if (n == 0) return 1;<newline46mondego>        else             return n * factorial(n-1);<newline46mondego>}<newline46mondego>"
"1925splitHere46","240895splitHere46","public interface Modifiable<T extends Modifiable<T>> extends Cloneable {<newline46mondego>    T clone();<newline46mondego>}<newline46mondego><newline46mondego>public class Foo implements Modifiable<Foo> {<newline46mondego>    public Foo clone() { //this is required<newline46mondego>        return null; //todo: real work<newline46mondego>    }<newline46mondego>}<newline46mondego>"
"1926splitHere46","241097splitHere46","List<PExp> copy"
"1927splitHere46","241097splitHere46","List<PExp> copy"
"1928splitHere46","241209splitHere46","<property name=<doubleQuotes46>propName<doubleQuotes46> ref=<doubleQuotes46><hit CTRL-SPACE><doubleQuotes46><newline46mondego>"
"1929splitHere46","241209splitHere46","interface Person {<newline46mondego>    String getName();<newline46mondego>    String getAddress();<newline46mondego>    int getAge();<newline46mondego>}<newline46mondego>//---<newline46mondego>Person p;<newline46mondego>String name = p.<CTRL-SHIFT-SPACE><newline46mondego>"
"1930splitHere46","241209splitHere46","interface Country{<newline46mondego>}<newline46mondego>interface Address {<newline46mondego>    String getStreetAddress();<newline46mondego>    String getZipCode();<newline46mondego>    Country getCountry();<newline46mondego>}<newline46mondego>interface Person {<newline46mondego>    String getName();<newline46mondego>    Address getAddress();<newline46mondego>    int getAge();<newline46mondego>}<newline46mondego>//--- <newline46mondego>Person p;<newline46mondego>Country c = p.<CTRL-SHIFT-SPACE><newline46mondego>"
"1931splitHere46","241209splitHere46","Country c = p.getAddress().getCountry();<newline46mondego>"
"1932splitHere46","241209splitHere46","function Person(name,address) {<newline46mondego>    this.getName = function() { return name };<newline46mondego>    this.getAddress = function() { return address };<newline46mondego>}<newline46mondego><newline46mondego>Person.prototype.hello = function() {<newline46mondego>    return <doubleQuotes46>I'm <doubleQuotes46> + this.getName() + <doubleQuotes46> from <doubleQuotes46> + this.get<CTRL-SPACE>;<newline46mondego>}<newline46mondego>"
"1933splitHere46","241209splitHere46","<ui:obfuscateJavaScript>function something(){...}</ui:obfuscateJavaScript><newline46mondego>"
"1934splitHere46","241209splitHere46","Pattern.compile(<doubleQuotes46><doubleQuotes46>);"
"1935splitHere46","241209splitHere46","WEB-INF\lib"
"1936splitHere46","241214splitHere46","public void exit() throws RemoteException<newline46mondego>{<newline46mondego>    try{<newline46mondego>        // Unregister ourself<newline46mondego>        Naming.unbind(mServerName);<newline46mondego><newline46mondego>        // Unexport; this will also remove us from the RMI runtime<newline46mondego>        UnicastRemoteObject.unexportObject(this, true);<newline46mondego><newline46mondego>        System.out.println(<doubleQuotes46>CalculatorServer exiting.<doubleQuotes46>);<newline46mondego>    }<newline46mondego>    catch(Exception e){}<newline46mondego>}<newline46mondego>"
"1937splitHere46","241242splitHere46","INSERT INTO mytable( field_1, field_2,... )<newline46mondego>VALUES ( value_1, value_2 ) RETURNING anyfield<newline46mondego>"
"1938splitHere46","241555splitHere46","baseName + <doubleQuotes46>_<doubleQuotes46> + language1 + <doubleQuotes46>_<doubleQuotes46> + country1 + <doubleQuotes46>_<doubleQuotes46> + variant1<newline46mondego>"
"1939splitHere46","241695splitHere46","private static class FakeTextMessage implements TextMessage {<newline46mondego>            public FakeTextMessage(Message m) { this.childMessage = m; }<newline46mondego>            private String text;<newline46mondego>            private Message childMessage;<newline46mondego>            public void setText(String t) { this.text = t; }<newline46mondego>            public String getText() { return this.text; }<newline46mondego><newline46mondego>            // All the rest of the methods are simply pass-through<newline46mondego>            // implementations of the rest of the interface, handing off to the child message.<newline46mondego>            public void acknowledge() throws JMSException { this.childMessage.acknowledge(); }<newline46mondego>            public void clearBody() throws JMSException { this.childMessage.clearBody(); }<newline46mondego>            public void clearProperties() throws JMSException { this.childMessage.clearProperties(); }<newline46mondego>            public Enumeration getPropertyNames() throws JMSException { return this.childMessage.getPropertyNames(); }<newline46mondego>            public boolean propertyExists(String pn) throws JMSException { return this.childMessage.propertyExists(pn); }<newline46mondego><newline46mondego>            // and so on and so on<newline46mondego>    }<newline46mondego>"
"1940splitHere46","241933splitHere46","@SuppressWarnings(<doubleQuotes46>unchecked<doubleQuotes46>)"
"1941splitHere46","242075splitHere46","ResourcesPlugin.getWorkspace().getRoot().getProjects()<newline46mondego>"
"1942splitHere46","242093splitHere46","String myStrings[10];<newline46mondego>"
"1943splitHere46","242093splitHere46","String[] myStrings = new String[10];<newline46mondego>println(myStringsp[5].length);<newline46mondego>"
"1944splitHere46","242476splitHere46","* servlet-api-2.5-6.x.jar<newline46mondego>* jetty-util-6.x.jar<newline46mondego>* jetty-6.x.jar<newline46mondego><newline46mondego><newline46mondego>/usr/local/jetty-6.1.4/lib> ls -la servlet-api-2.5-6.1.4.jar jetty-*<newline46mondego>-rw-rw-r--  1 wwwrun admin 476213 2007-06-15 08:42 jetty-6.1.4.jar<newline46mondego>-rw-rw-r--  1 wwwrun admin 128026 2007-06-15 08:40 jetty-util-6.1.4.jar<newline46mondego>-rw-rw-r--  1 wwwrun admin 131977 2007-06-15 08:40 servlet-api-2.5-6.1.4.jar<newline46mondego>"
"1945splitHere46","242551splitHere46","@Override<newline46mondego>public void paint(Graphics g) {<newline46mondego>    super.paint(g);<newline46mondego>    Graphics2D g2 = (Graphics2D) g;<newline46mondego>    ...<newline46mondego>    //draw elements      <newline46mondego>    ...<newline46mondego>}<newline46mondego>"
"1946splitHere46","242551splitHere46","public int getResolutionX() {<newline46mondego>    return resolutionX;<newline46mondego>}<newline46mondego><newline46mondego>public void setResolutionX(int resolutionX) {<newline46mondego>    this.resolutionX = resolutionX;<newline46mondego>}<newline46mondego><newline46mondego>public int getResolutionY() {<newline46mondego>    return resolutionY;<newline46mondego>}<newline46mondego><newline46mondego>public void setResolutionY(int resolutionY) {<newline46mondego>    this.resolutionY = resolutionY;<newline46mondego>}<newline46mondego>"
"1947splitHere46","242803splitHere46","Pattern.quote(File.separator)"
"1948splitHere46","242803splitHere46","<doubleQuotes46>\\<doubleQuotes46> + File.separator<newline46mondego>"
"1949splitHere46","243054splitHere46","import java.util.*;<newline46mondego><newline46mondego>public class Test<newline46mondego>{<newline46mondego>    public static void main(String[] args)<newline46mondego>    {<newline46mondego>        Vector speeds = new Vector();<newline46mondego>        speeds.add(<doubleQuotes46>x<doubleQuotes46>);<newline46mondego>        speeds.add(<doubleQuotes46>y<doubleQuotes46>);<newline46mondego><newline46mondego>        long estimated = 1l;<newline46mondego>        long time = speeds.size() + estimated;<newline46mondego>        System.out.println(time); // Prints out 3<newline46mondego>    }<newline46mondego>}<newline46mondego>"
"1950splitHere46","243488splitHere46","Criteria crit = session.createCriteria(MyClass.class);<newline46mondego>crit.add(Restrictions.eq(<doubleQuotes46>id<doubleQuotes46>, myClassId));<newline46mondego>crit.setFetchMode(<doubleQuotes46>myProperty<doubleQuotes46>, FetchMode.EAGER);<newline46mondego>MyClass myThingy = (MyClass)crit.uniqueResult();<newline46mondego>"
"1951splitHere46","243560splitHere46","aJTable.rowAtPoint(evt.getPoint());"
"1952splitHere46","243698splitHere46","jstack 7088"
"1953splitHere46","243747splitHere46","<?xml version=<doubleQuotes46>1.0<doubleQuotes46>?><newline46mondego><!DOCTYPE foo PUBLIC <doubleQuotes46>//FOO//<doubleQuotes46> <doubleQuotes46>foo.dtd<doubleQuotes46>><newline46mondego><foo><newline46mondego>    <bar>Value</bar><newline46mondego></foo><newline46mondego>"
"1954splitHere46","243747splitHere46","import java.io.File;<newline46mondego>import java.io.IOException;<newline46mondego>import java.io.StringReader;<newline46mondego><newline46mondego>import javax.xml.parsers.DocumentBuilder;<newline46mondego>import javax.xml.parsers.DocumentBuilderFactory;<newline46mondego>import javax.xml.xpath.XPath;<newline46mondego>import javax.xml.xpath.XPathFactory;<newline46mondego><newline46mondego>import org.w3c.dom.Document;<newline46mondego>import org.xml.sax.EntityResolver;<newline46mondego>import org.xml.sax.InputSource;<newline46mondego>import org.xml.sax.SAXException;<newline46mondego><newline46mondego>public class Main {<newline46mondego><newline46mondego>    public static void main(String[] args) throws Exception {<newline46mondego>        DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();<newline46mondego>        DocumentBuilder builder = factory.newDocumentBuilder();<newline46mondego><newline46mondego>        builder.setEntityResolver(new EntityResolver() {<newline46mondego><newline46mondego>            @Override<newline46mondego>            public InputSource resolveEntity(String publicId, String systemId)<newline46mondego>                    throws SAXException, IOException {<newline46mondego>                System.out.println(<doubleQuotes46>Ignoring <doubleQuotes46> + publicId + <doubleQuotes46>, <doubleQuotes46> + systemId);<newline46mondego>                return new InputSource(new StringReader(<doubleQuotes46><doubleQuotes46>));<newline46mondego>            }<newline46mondego>        });<newline46mondego>        Document document = builder.parse(new File(<doubleQuotes46>src/foo.xml<doubleQuotes46>));<newline46mondego>        XPathFactory xpathFactory = XPathFactory.newInstance();<newline46mondego>        XPath xpath = xpathFactory.newXPath();<newline46mondego>        String content = xpath.evaluate(<doubleQuotes46>/foo/bar/text()<doubleQuotes46>, document<newline46mondego>                .getDocumentElement());<newline46mondego>        System.out.println(content);<newline46mondego>    }<newline46mondego>}<newline46mondego>"
"1955splitHere46","243862splitHere46","invokevirtual"
"1956splitHere46","243862splitHere46","checkcast"
"1957splitHere46","243862splitHere46","(TrTuDocPackTypeDto) packDto"
"1958splitHere46","243862splitHere46","cast"
"1959splitHere46","243862splitHere46","public <T> Set<T> find(Class<T> clz, Filter criteria) {<newline46mondego>  List<?> raw = session.find(clz, criteria); /* A legacy, un-generic API. */<newline46mondego>  Set<T> safe = new HashSet<T>();<newline46mondego>  for (Object o : raw) <newline46mondego>    safe.add(clz.cast(o));<newline46mondego>  return safe;<newline46mondego>}<newline46mondego>"
"1960splitHere46","243862splitHere46","/* DO NOT DO THIS! */<newline46mondego>List raw = new ArrayList();<newline46mondego>...<newline46mondego>return (List<Widget>) raw;<newline46mondego>"
"1961splitHere46","243862splitHere46","Unchecked cast from List to List<Widget>"
"1962splitHere46","243862splitHere46","Gadget"
"1963splitHere46","243862splitHere46","ClassCastException"
"1964splitHere46","243862splitHere46","Widget"
"1965splitHere46","244025splitHere46","import java.util.zip.ZipOutputStream;<newline46mondego>import java.util.zip.ZipEntry;<newline46mondego>import java.io.FileOutputStream;<newline46mondego>import java.io.File;<newline46mondego>import java.io.FileNotFoundException;<newline46mondego>import java.io.IOException;<newline46mondego><newline46mondego>public class ChunkedZippedOutputStream {<newline46mondego><newline46mondego>    private ZipOutputStream zipOutputStream;<newline46mondego><newline46mondego>    private String path;<newline46mondego>    private String name;<newline46mondego><newline46mondego>    private long currentSize;<newline46mondego>    private int currentChunkIndex;<newline46mondego>    private final long MAX_FILE_SIZE = 16000000; // Whatever size you want<newline46mondego>    private final String PART_POSTFIX = <doubleQuotes46>.part.<doubleQuotes46>;<newline46mondego>    private final String FILE_EXTENSION = <doubleQuotes46>.zip<doubleQuotes46>;<newline46mondego><newline46mondego>    public ChunkedZippedOutputStream(String path, String name) throws FileNotFoundException {<newline46mondego>        this.path = path;<newline46mondego>        this.name = name;<newline46mondego>        constructNewStream();<newline46mondego>    }<newline46mondego><newline46mondego>    public void addEntry(ZipEntry entry) throws IOException {<newline46mondego>        long entrySize = entry.getCompressedSize();<newline46mondego>        if((currentSize + entrySize) > MAX_FILE_SIZE) {<newline46mondego>            closeStream();<newline46mondego>            constructNewStream();<newline46mondego>        } else {<newline46mondego>            currentSize += entrySize;<newline46mondego>            zipOutputStream.putNextEntry(entry);<newline46mondego>        }<newline46mondego>    }<newline46mondego><newline46mondego>    private void closeStream() throws IOException {<newline46mondego>        zipOutputStream.close();<newline46mondego>    }<newline46mondego><newline46mondego>    private void constructNewStream() throws FileNotFoundException {<newline46mondego>        zipOutputStream = new ZipOutputStream(new FileOutputStream(new File(path, constructCurrentPartName())));<newline46mondego>        currentChunkIndex++;<newline46mondego>        currentSize = 0;<newline46mondego>    }<newline46mondego><newline46mondego>    private String constructCurrentPartName() {<newline46mondego>        // This will give names is the form of <file_name>.part.0.zip, <file_name>.part.1.zip, etc.<newline46mondego>        StringBuilder partNameBuilder = new StringBuilder(name);<newline46mondego>        partNameBuilder.append(PART_POSTFIX);<newline46mondego>        partNameBuilder.append(currentChunkIndex);<newline46mondego>        partNameBuilder.append(FILE_EXTENSION);<newline46mondego>        return partNameBuilder.toString();<newline46mondego>    }<newline46mondego>}<newline46mondego>"
"1966splitHere46","244156splitHere46","public class Foo {<newline46mondego><newline46mondego>    /**<newline46mondego>     * Gets the name Field.<newline46mondego>     * <newline46mondego>     * @return the name<newline46mondego>     */<newline46mondego>    public final String getName() {<newline46mondego>        return name;<newline46mondego>    }<newline46mondego><newline46mondego>    /**<newline46mondego>     * Sets the name Field with the name input value.<newline46mondego>     * <newline46mondego>     * @param name the name to set<newline46mondego>     */<newline46mondego>    public final void setName(String name) {<newline46mondego>        this.name = name;<newline46mondego>    }<newline46mondego><newline46mondego>    private String name;<newline46mondego><newline46mondego>}<newline46mondego>"
"1967splitHere46","244156splitHere46","import java.lang.reflect.Field;<newline46mondego>....<newline46mondego><newline46mondego>Foo foo = new Foo();<newline46mondego>foo.setName(<doubleQuotes46>old Name<doubleQuotes46>);<newline46mondego>String fieldName = <doubleQuotes46>name<doubleQuotes46>;<newline46mondego>Class class1 = Foo.class;<newline46mondego><newline46mondego>try {<newline46mondego><newline46mondego>    System.out.println(foo.getName());<newline46mondego><newline46mondego>    Field field = class1.getDeclaredField(fieldName);<newline46mondego><newline46mondego>    field.setAccessible(true);<newline46mondego><newline46mondego>    field.set(foo, <doubleQuotes46>My New Name<doubleQuotes46>);<newline46mondego><newline46mondego>    System.out.println(foo.getName());<newline46mondego><newline46mondego>} catch (NoSuchFieldException e) {<newline46mondego>    System.out.println(<doubleQuotes46>FieldNotFound: <doubleQuotes46> + e);<newline46mondego>} catch (IllegalAccessException e) {<newline46mondego>    System.out.println(<doubleQuotes46>Ilegal Access: <doubleQuotes46> + e);<newline46mondego>}<newline46mondego>"
"1968splitHere46","244177splitHere46","BufferedImage createResizedCopy(Image originalImage, <newline46mondego>    		int scaledWidth, int scaledHeight, <newline46mondego>    		boolean preserveAlpha)<newline46mondego>    {<newline46mondego>    	System.out.println(<doubleQuotes46>resizing...<doubleQuotes46>);<newline46mondego>    	int imageType = preserveAlpha ? BufferedImage.TYPE_INT_RGB : BufferedImage.TYPE_INT_ARGB;<newline46mondego>    	BufferedImage scaledBI = new BufferedImage(scaledWidth, scaledHeight, imageType);<newline46mondego>    	Graphics2D g = scaledBI.createGraphics();<newline46mondego>    	if (preserveAlpha) {<newline46mondego>    		g.setComposite(AlphaComposite.Src);<newline46mondego>    	}<newline46mondego>    	g.drawImage(originalImage, 0, 0, scaledWidth, scaledHeight, null); <newline46mondego>    	g.dispose();<newline46mondego>    	return scaledBI;<newline46mondego>    }<newline46mondego>"
"1969splitHere46","245038splitHere46","Exception in thread <doubleQuotes46>AWT-EventQueue-0<doubleQuotes46> java.lang.LinkageError: <newline46mondego>loader constraint violation in interface itable initialization: <newline46mondego>when resolving method <doubleQuotes46>org.apache.batik.dom.svg.SVGOMDocument.createAttribute(Ljava/lang/String;)Lorg/w3c/dom/Attr;<doubleQuotes46> <newline46mondego>the class loader (instance of org/java/plugin/standard/StandardPluginClassLoader) <newline46mondego>of the current class, org/apache/batik/dom/svg/SVGOMDocument, <newline46mondego>and the class loader (instance of ) for interface org/w3c/dom/Document <newline46mondego>have different Class objects for the type org/w3c/dom/Attr used in the signature<newline46mondego>"
"1970splitHere46","245143splitHere46","/some-static-content-folder/"
"1971splitHere46","245143splitHere46","test.png"
"1972splitHere46","245143splitHere46","/some-static-content-folder/test.png<newline46mondego>"
"1973splitHere46","245143splitHere46","/some-static-content-folder/some-static-content-folder/test.png<newline46mondego>"
"1974splitHere46","245257splitHere46","someObject"
"1975splitHere46","245257splitHere46","pageContext.forward(<doubleQuotes46><some relative jsp><doubleQuotes46>);<newline46mondego>"
"1976splitHere46","245273splitHere46","while (rs.next())<newline46mondego>        {<newline46mondego>			row = new ArrayList();<newline46mondego><newline46mondego>            for (int column = 1; column <= rm.getColumnCount(); column++) {<newline46mondego>                row.add(rs.getObject(column));<newline46mondego>            }<newline46mondego><newline46mondego>			result.add(row);<newline46mondego>        }<newline46mondego>"
"1977splitHere46","245278splitHere46","import java.io.*;<newline46mondego><newline46mondego>class Test {<newline46mondego>     public static void main(String args[]) {<newline46mondego>          try {<newline46mondego>               RandomAccessFile f = new RandomAccessFile(<doubleQuotes46>t<doubleQuotes46>, <doubleQuotes46>rw<doubleQuotes46>);<newline46mondego>               f.setLength(1024 * 1024 * 1024);<newline46mondego>          } catch (Exception e) {<newline46mondego>               System.err.println(e);<newline46mondego>          }<newline46mondego>     }<newline46mondego>}<newline46mondego>"
"1978splitHere46","245278splitHere46","6070  open(<doubleQuotes46>t<doubleQuotes46>, O_RDWR|O_CREAT, 0666)   = 4<newline46mondego>6070  fstat(4, {st_mode=S_IFREG|0644, st_size=0, ...}) = 0<newline46mondego>6070  lseek(4, 0, SEEK_CUR)             = 0<newline46mondego>6070  ftruncate(4, 1073741824)          = 0<newline46mondego>"
"1979splitHere46","245278splitHere46","/2:     open64(<doubleQuotes46>t<doubleQuotes46>, O_RDWR|O_CREAT, 0666)               = 14<newline46mondego>/2:     fstat64(14, 0xFE4FF810)                         = 0<newline46mondego>/2:     llseek(14, 0, SEEK_CUR)                         = 0<newline46mondego>/2:     fcntl(14, F_FREESP64, 0xFE4FF998)               = 0<newline46mondego>"
"1980splitHere46","245468splitHere46","function Max(data, size) {<newline46mondego>    assert(size > 0)<newline46mondego>    if (size == 1) {<newline46mondego>        return data[0]<newline46mondego>    }<newline46mondego>    maxtail = Max(data[1..size], size-1)<newline46mondego>    if (data[0] > maxtail) {<newline46mondego>        return data[0]<newline46mondego>    } else {<newline46mondego>        return maxtail<newline46mondego>    }<newline46mondego>}<newline46mondego>"
"1981splitHere46","245468splitHere46","size == 1"
"1982splitHere46","246034splitHere46","wget -S <url-to-server><newline46mondego>curl -I <url-to-server><newline46mondego>"
"1983splitHere46","246034splitHere46","Server: Oracle-Application-Server-10g/10.1.3.1.0 Oracle-HTTP-Server<newline46mondego>"
"1984splitHere46","246234splitHere46","public static void main(String[] args) {<newline46mondego>    	Runnable guiCreator = new Runnable() {<newline46mondego>    		public void run() {<newline46mondego>    			JFrame fenster = new JFrame(<doubleQuotes46>Hallo Welt mit Swing<doubleQuotes46>);<newline46mondego>    			fenster.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);<newline46mondego>    			fenster.setVisible(true);<newline46mondego>    		}<newline46mondego><newline46mondego>    	};<newline46mondego>    	SwingUtilities.invokeLater(guiCreator);<newline46mondego>    }<newline46mondego>"
"1985splitHere46","246883splitHere46","eclipse -vm <path to java><newline46mondego>"
"1986splitHere46","246883splitHere46","<!-- to use a specific Java version (instead of the platform's default) uncomment one of the following options:<newline46mondego>    <string>-vm</string><string>/System/Library/Frameworks/JavaVM.framework/Versions/1.4.2/Commands/java</string><newline46mondego>    <string>-vm</string><string>/System/Library/Frameworks/JavaVM.framework/Versions/1.5.0/Commands/java</string><newline46mondego>--><newline46mondego>"
"1987splitHere46","247034splitHere46","<jsp:include <doubleQuotes46>page_naviagtor.jsp<doubleQuotes46>/><newline46mondego><table id=<doubleQuotes46>results<doubleQuotes46>>...</table><newline46mondego><jsp:include <doubleQuotes46>page_navigator.jsp<doubleQuotes46>/><newline46mondego>"
"1988splitHere46","247034splitHere46","<tag:wrap_in_page_nav><newline46mondego>    <table id=<doubleQuotes46>results<doubleQuotes46>> ... </table><newline46mondego></tag:wrap_in_page_nav><newline46mondego>"
"1989splitHere46","247034splitHere46","<%@tag description=<doubleQuotes46>put the tag description here<doubleQuotes46> pageEncoding=<doubleQuotes46>UTF-8<doubleQuotes46>%><newline46mondego><%@ taglib prefix=<doubleQuotes46>t<doubleQuotes46> tagdir=<doubleQuotes46>/WEB-INF/yourtags<doubleQuotes46> %>    <newline46mondego><%@attribute name=<doubleQuotes46>startPage<doubleQuotes46> required=<doubleQuotes46>true<doubleQuotes46>%><newline46mondego><%@attribute name=<doubleQuotes46>endPage<doubleQuotes46> required=<doubleQuotes46>true<doubleQuotes46>%>    <newline46mondego><html><newline46mondego>    <head><newline46mondego>        <title>Page Title</title><newline46mondego>    </head><newline46mondego>    <body><newline46mondego>        <tag:page_nav startPage=<doubleQuotes46>${startPage}<doubleQuotes46> endPage=<doubleQuotes46>${endPage}<doubleQuotes46>/><newline46mondego>        <jsp:doBody/><newline46mondego>        <tag:page_nav startPage=<doubleQuotes46>${startPage}<doubleQuotes46> endPage=<doubleQuotes46>${endPage}<doubleQuotes46>/><newline46mondego>    </body><newline46mondego></html><newline46mondego>"
"1990splitHere46","247034splitHere46","<%@tag description=<doubleQuotes46>put the tag description here<doubleQuotes46> pageEncoding=<doubleQuotes46>UTF-8<doubleQuotes46>%><newline46mondego><%@ taglib prefix=<doubleQuotes46>t<doubleQuotes46> tagdir=<doubleQuotes46>/WEB-INF/yourtags<doubleQuotes46> %>    <newline46mondego><%@attribute name=<doubleQuotes46>startPage<doubleQuotes46> required=<doubleQuotes46>true<doubleQuotes46>%><newline46mondego><%@attribute name=<doubleQuotes46>endPage<doubleQuotes46> required=<doubleQuotes46>true<doubleQuotes46>%>    <newline46mondego><div>${startPage} .. ${endPage}</div><newline46mondego>"
"1991splitHere46","247034splitHere46","<%@page contentType=<doubleQuotes46>text/html<doubleQuotes46>%><newline46mondego><%@page pageEncoding=<doubleQuotes46>UTF-8<doubleQuotes46>%><newline46mondego><%@ taglib prefix=<doubleQuotes46>t<doubleQuotes46> tagdir=<doubleQuotes46>/WEB-INF/yourtags<doubleQuotes46> %><newline46mondego><tag:page startPage=<doubleQuotes46>1<doubleQuotes46> endPage=<doubleQuotes46>4<doubleQuotes46>><newline46mondego>    <table> ... </table><newline46mondego></tag:page><newline46mondego>"
"1992splitHere46","247069splitHere46","System.getProperty(<doubleQuotes46>line.separator<doubleQuotes46>);<newline46mondego>"
"1993splitHere46","247344splitHere46","IOUtils"
"1994splitHere46","247344splitHere46","InputStreamReader isr = new InputStreamReader(IOUtils.toInputStream(myString));<newline46mondego>"
"1995splitHere46","247495splitHere46","scanf()"
"1996splitHere46","247495splitHere46","split()"
"1997splitHere46","247495splitHere46","split()"
"1998splitHere46","247495splitHere46","usePattern()"
"1999splitHere46","247495splitHere46","import java.util.*;<newline46mondego>import java.util.regex.*;<newline46mondego><newline46mondego>public class RETokenizer<newline46mondego>{<newline46mondego>  static List<Token> tokenize(String source, List<Rule> rules)<newline46mondego>  {<newline46mondego>    List<Token> tokens = new ArrayList<Token>();<newline46mondego>    int pos = 0;<newline46mondego>    final int end = source.length();<newline46mondego>    Matcher m = Pattern.compile(<doubleQuotes46>dummy<doubleQuotes46>).matcher(source);<newline46mondego>    m.useTransparentBounds(true).useAnchoringBounds(false);<newline46mondego>    while (pos < end)<newline46mondego>    {<newline46mondego>      m.region(pos, end);<newline46mondego>      for (Rule r : rules)<newline46mondego>      {<newline46mondego>        if (m.usePattern(r.pattern).lookingAt())<newline46mondego>        {<newline46mondego>          tokens.add(new Token(r.name, m.start(), m.end()));<newline46mondego>          pos = m.end();<newline46mondego>          break;<newline46mondego>        }<newline46mondego>      }<newline46mondego>      pos++;  // bump-along, in case no rule matched<newline46mondego>    }<newline46mondego>    return tokens;<newline46mondego>  }<newline46mondego><newline46mondego>  static class Rule<newline46mondego>  {<newline46mondego>    final String name;<newline46mondego>    final Pattern pattern;<newline46mondego><newline46mondego>    Rule(String name, String regex)<newline46mondego>    {<newline46mondego>      this.name = name;<newline46mondego>      pattern = Pattern.compile(regex);<newline46mondego>    }<newline46mondego>  }<newline46mondego><newline46mondego>  static class Token<newline46mondego>  {<newline46mondego>    final String name;<newline46mondego>    final int startPos;<newline46mondego>    final int endPos;<newline46mondego><newline46mondego>    Token(String name, int startPos, int endPos)<newline46mondego>    {<newline46mondego>      this.name = name;<newline46mondego>      this.startPos = startPos;<newline46mondego>      this.endPos = endPos;<newline46mondego>    }<newline46mondego><newline46mondego>    @Override<newline46mondego>    public String toString()<newline46mondego>    {<newline46mondego>      return String.format(<doubleQuotes46>Token [%2d, %2d, %s]<doubleQuotes46>, startPos, endPos, name);<newline46mondego>    }<newline46mondego>  }<newline46mondego><newline46mondego>  public static void main(String[] args) throws Exception<newline46mondego>  {<newline46mondego>    List<Rule> rules = new ArrayList<Rule>();<newline46mondego>    rules.add(new Rule(<doubleQuotes46>WORD<doubleQuotes46>, <doubleQuotes46>[A-Za-z]+<doubleQuotes46>));<newline46mondego>    rules.add(new Rule(<doubleQuotes46>QUOTED<doubleQuotes46>, <doubleQuotes46>\<doubleQuotes46>[^\<doubleQuotes46>]*+\<doubleQuotes46><doubleQuotes46>));<newline46mondego>    rules.add(new Rule(<doubleQuotes46>COMMENT<doubleQuotes46>, <doubleQuotes46>//.*<doubleQuotes46>));<newline46mondego>    rules.add(new Rule(<doubleQuotes46>WHITESPACE<doubleQuotes46>, <doubleQuotes46>\\s+<doubleQuotes46>));<newline46mondego><newline46mondego>    String str = <doubleQuotes46>foo //in \<doubleQuotes46>comment\<doubleQuotes46>\nbar \<doubleQuotes46>no //comment\<doubleQuotes46> end<doubleQuotes46>;<newline46mondego>    List<Token> result = RETokenizer.tokenize(str, rules);<newline46mondego>    for (Token t : result)<newline46mondego>    {<newline46mondego>      System.out.println(t);<newline46mondego>    }<newline46mondego>  }<newline46mondego>}<newline46mondego>"
"2000splitHere46","247495splitHere46","lookingAt()"
"2001splitHere46","247624splitHere46","java.util.Map map = Hazelcast.getMap (<doubleQuotes46>mymap<doubleQuotes46>);<newline46mondego>map.put (<doubleQuotes46>key1<doubleQuotes46>, <doubleQuotes46>value1<doubleQuotes46>);<newline46mondego>"
"2002splitHere46","247810splitHere46","import org.junit.runner.RunWith;<newline46mondego>import org.junit.runners.Suite;<newline46mondego><newline46mondego>@RunWith(Suite.class)<newline46mondego>@Suite.SuiteClasses({<newline46mondego>  // Add a JUnit 3 suite<newline46mondego>  CalculatorSuite.class,<newline46mondego>  // JUnit 4 style tests<newline46mondego>  TestCalculatorAddition.class,<newline46mondego>  TestCalculatorDivision.class<newline46mondego>})<newline46mondego>public class CalculatorSuite {<newline46mondego>    // A traditional JUnit 3 suite<newline46mondego>    public static Test suite() {<newline46mondego>        TestSuite suite = new TestSuite();<newline46mondego>        suite.addTestSuite(TestCalculatorSubtraction.class);<newline46mondego>        return suite;<newline46mondego>    }<newline46mondego>}<newline46mondego>"
"2003splitHere46","248435splitHere46","Container(BorderLayout)<newline46mondego>{<newline46mondego>  @NORTH<newline46mondego>    Container(BorderLayout)<newline46mondego>    {<newline46mondego>       @NORTH<newline46mondego>         Label(Instruction);<newline46mondego>       @CENTER<newline46mondego>         Container(GridLayout(2,1))<newline46mondego>         {<newline46mondego>            Container(GirdLayout(2,2))<newline46mondego>            {<newline46mondego>              Label() TextField()<newline46mondego>              Label() TextField() <newline46mondego>            }<newline46mondego>            Container(GirdLayout(2,2))<newline46mondego>            {<newline46mondego>              Label() TextField()<newline46mondego>              Label() TextField()<newline46mondego>            }<newline46mondego>         }<newline46mondego>       @SOUTH<newline46mondego>         Container(FlowLayout())<newline46mondego>         {<newline46mondego>           JButton() //shaded thing?<newline46mondego>         }<newline46mondego>    }<newline46mondego>  @CENTER<newline46mondego>    {<newline46mondego>      JTable<newline46mondego>    }<newline46mondego>}<newline46mondego>"
"2004splitHere46","249014splitHere46","void myfunction()<newline46mondego>{<newline46mondego>  {<newline46mondego>  // Open serial port<newline46mondego>     SerialPort port(<doubleQuotes46>COM1<doubleQuotes46>, 9600);<newline46mondego>     port.doTransfer(data);<newline46mondego>  } // Serial port gets closed here.<newline46mondego><newline46mondego>  for(int i = 0; i < data.size(); i++)<newline46mondego>     doProcessData(data[i]);<newline46mondego>  etc...<newline46mondego>}<newline46mondego>"
"2005splitHere46","249019splitHere46","public static void main(String[] args) {<newline46mondego>   int primeStart = 5;<newline46mondego><newline46mondego>   // Make thread-safe list for adding results to<newline46mondego>   List list = Collections.synchronizedList(new ArrayList());<newline46mondego><newline46mondego>   // Pull thread pool count out into a value so you can easily change it<newline46mondego>   int threadCount = 10000;<newline46mondego>   Thread[] threads = new Thread[threadCount];<newline46mondego><newline46mondego>   // Start all threads<newline46mondego>   for(int i = 0;i < threadCount;i++) {<newline46mondego>     // Pass list to each Runnable here<newline46mondego>     // Also, I added +i here as I think the intention is <newline46mondego>     //    to test 10000 possible numbers>5 for primeness - <newline46mondego>     //    was testing 5 in all loops<newline46mondego>     PrimeRunnable pr = new PrimeRunnable(primeStart+i, list);<newline46mondego>     Thread[i] threads = new Thread(pr);<newline46mondego>     threads[i].start();  // thread is now running in parallel<newline46mondego>   }<newline46mondego><newline46mondego>   // All threads now running in parallel<newline46mondego><newline46mondego>   // Then wait for all threads to complete<newline46mondego>   for(int i=0; i<threadCount; i++) {<newline46mondego>     threads[i].join();<newline46mondego>   }<newline46mondego>}<newline46mondego>"
"2006splitHere46","249019splitHere46","public class PrimeRunnable implements Runnable {    <newline46mondego>    private int from;<newline46mondego>    private List results;   // shared but thread-safe<newline46mondego><newline46mondego>    public PrimeRunnable(int from, List results) {<newline46mondego>        this.from = from;<newline46mondego>        this.results = results;<newline46mondego>    }<newline46mondego><newline46mondego>    public void isPrime(int number) {<newline46mondego>        for(int i = 2;i < from;i++) {<newline46mondego>                if((number % i) == 0) {<newline46mondego>                        return;<newline46mondego>                }<newline46mondego>        }<newline46mondego>        // found prime, add to shared results<newline46mondego>        this.results.add(number);<newline46mondego>    }<newline46mondego><newline46mondego>    public void run() {<newline46mondego>        isPrime(from);      // don't increment, just check one number<newline46mondego>    }    <newline46mondego>}<newline46mondego>"
"2007splitHere46","249019splitHere46","public static void main(String[] args) {<newline46mondego>   int primeStart = 5;<newline46mondego><newline46mondego>   // Make thread-safe list for adding results to<newline46mondego>   List list = Collections.synchronizedList(new ArrayList());<newline46mondego><newline46mondego>   int threadCount = 16;  // Experiment with this to find best on your machine<newline46mondego>   ExecutorService exec = Executors.newFixedThreadPool(threadCount);<newline46mondego><newline46mondego>   int workCount = 10000;  // See how # of work is now separate from # of threads?<newline46mondego>   for(int i = 0;i < workCount;i++) {<newline46mondego>     // submit work to the svc for execution across the thread pool <newline46mondego>     exec.execute(new PrimeRunnable(primeStart+i, list));<newline46mondego>   }<newline46mondego><newline46mondego>   // Wait for all tasks to be done or timeout to go off<newline46mondego>   exec.awaitTermination(1, TimeUnit.DAYS);<newline46mondego>}<newline46mondego>"
"2008splitHere46","249036splitHere46","localhost"
"2009splitHere46","249149splitHere46","/**<newline46mondego> * Close the given  ResultSet and ignore any thrown exception.<newline46mondego> * This is useful for typical finally blocks in manual  code.<newline46mondego> * @param resultSet the  ResultSet to close<newline46mondego> * @see javax.resource.cci.ResultSet#close()<newline46mondego> */<newline46mondego>private void closeResultSet(ResultSet resultSet) {<newline46mondego>  if (resultSet != null) {<newline46mondego>    try {<newline46mondego>      resultSet.close();<newline46mondego>    }<newline46mondego>    catch (SQLException ex) {<newline46mondego>      logger.debug(<doubleQuotes46>Could not close  ResultSet<doubleQuotes46>, ex);<newline46mondego>    }<newline46mondego>    catch (Throwable ex) {<newline46mondego>      // We don't trust the  driver: It might throw RuntimeException or Error.<newline46mondego>      logger.debug(<doubleQuotes46>Unexpected exception on closing  ResultSet<doubleQuotes46>, ex);<newline46mondego>    }<newline46mondego>  }<newline46mondego>}<newline46mondego>"
"2010splitHere46","249168splitHere46","ProcessBuilder pb = new ProcessBuilder(<doubleQuotes46>myCommand<doubleQuotes46>, <doubleQuotes46>myArg1<doubleQuotes46>, <doubleQuotes46>myArg2<doubleQuotes46>);<newline46mondego>Map<String, String> env = pb.environment();<newline46mondego>env.put(<doubleQuotes46>VAR1<doubleQuotes46>, <doubleQuotes46>myValue<doubleQuotes46>);<newline46mondego>env.remove(<doubleQuotes46>OTHERVAR<doubleQuotes46>);<newline46mondego>env.put(<doubleQuotes46>VAR2<doubleQuotes46>, env.get(<doubleQuotes46>VAR1<doubleQuotes46>) + <doubleQuotes46>suffix<doubleQuotes46>);<newline46mondego>pb.directory(<doubleQuotes46>myDir<doubleQuotes46>);<newline46mondego>Process p = pb.start();<newline46mondego>"
"2011splitHere46","249279splitHere46","os.rename()"
"2012splitHere46","249279splitHere46","os.unlink()"
"2013splitHere46","249279splitHere46","shutil"
"2014splitHere46","249512splitHere46","String str = <doubleQuotes46>Hello, there, everyone?<doubleQuotes46>;<newline46mondego><newline46mondego>StringBuffer result = new StringBuffer(str.length());<newline46mondego>String strl = str.toLowerCase();<newline46mondego>boolean bMustCapitalize = false;<newline46mondego>for (int i = 0; i < strl.length(); i++)<newline46mondego>{<newline46mondego>  char c = strl.charAt(i);<newline46mondego>  if (c >= 'a' && c <= 'z')<newline46mondego>  {<newline46mondego>    if (bMustCapitalize)<newline46mondego>    {<newline46mondego>      result.append(strl.substring(i, i+1).toUpperCase());<newline46mondego>      bMustCapitalize = false;<newline46mondego>    }<newline46mondego>    else<newline46mondego>    {<newline46mondego>      result.append(c);<newline46mondego>    }<newline46mondego>  }<newline46mondego>  else<newline46mondego>  {<newline46mondego>    bMustCapitalize = true;<newline46mondego>  }<newline46mondego>}<newline46mondego>System.out.println(result);<newline46mondego>"
"2015splitHere46","249512splitHere46","result.append((char) (c - 0x20));<newline46mondego>"
"2016splitHere46","249556splitHere46","@edu.umd.cs.findbugs.annotations.SuppressWarnings(<newline46mondego>    value=<doubleQuotes46>EQ_COMPARETO_USE_OBJECT_EQUALS<doubleQuotes46>, <newline46mondego>    justification=<doubleQuotes46>because I know better<doubleQuotes46>)<newline46mondego>"
"2017splitHere46","249624splitHere46","void DeleteFile(string filePath);<newline46mondego>void DeleteFile(FileInfo file);<newline46mondego>void DeleteFile(DirectoryInfo directory, string fileName);<newline46mondego>"
"2018splitHere46","249624splitHere46","public IList<Product> GetProductById(int productId) {...}<newline46mondego>public IList<Product> GetProductByCategory(Category category) {...}<newline46mondego>public IList<Product> GetProductByName(string Name ) {...}<newline46mondego>"
"2019splitHere46","249624splitHere46","// No collisions, even though both methods take int parameters<newline46mondego>public IList<Employee> GetEmployeesBySupervisor(int supervisorId);<newline46mondego>public IList<Employee> GetEmployeesByDepartment(int departmentId);<newline46mondego>"
"2020splitHere46","249624splitHere46","// Examples for GetEmployees<newline46mondego><newline46mondego>public IList<Employee> GetEmployeesBySupervisor(int supervisorId);<newline46mondego>public IList<Employee> GetEmployeesBySupervisor(Supervisor supervisor);<newline46mondego>public IList<Employee> GetEmployeesBySupervisor(Person supervisor);<newline46mondego><newline46mondego>public IList<Employee> GetEmployeesByDepartment(int departmentId);<newline46mondego>public IList<Employee> GetEmployeesByDepartment(Department department);<newline46mondego><newline46mondego>// Examples for GetProduct<newline46mondego><newline46mondego>public IList<Product> GetProductById(int productId) {...}<newline46mondego>public IList<Product> GetProductById(params int[] productId) {...}<newline46mondego><newline46mondego>public IList<Product> GetProductByCategory(Category category) {...}<newline46mondego>public IList<Product> GetProductByCategory(IEnumerable<Category> category) {...}<newline46mondego>public IList<Product> GetProductByCategory(params Category[] category) {...}<newline46mondego>"
"2021splitHere46","249684splitHere46","class Child <newline46mondego>{<newline46mondego>    private Section section;<newline46mondego>    private Question question;<newline46mondego><newline46mondego>   // Constructor, etc...<newline46mondego>}<newline46mondego><newline46mondego>class Question <newline46mondego>{<newline46mondego>    private String name;<newline46mondego>    // other fields, getters, and setters<newline46mondego>}<newline46mondego><newline46mondego>class Section <newline46mondego>{<newline46mondego>    private String label;<newline46mondego>    private Child[] children;<newline46mondego>    // getters and setters<newline46mondego>}<newline46mondego><newline46mondego>class Quiz <newline46mondego>{<newline46mondego>    private Child[] elements;<newline46mondego>    // getter and setter<newline46mondego>}<newline46mondego>"
"2022splitHere46","249781splitHere46","http://www.example.com?param1=value1&param2=value2&param1=value3<newline46mondego>"
"2023splitHere46","250559splitHere46","1.6.0_07"
"2024splitHere46","250559splitHere46","1.6.0_07-b06"
"2025splitHere46","250559splitHere46","build 10.0-b23, mixed mode<doubleQuotes46>"
"2026splitHere46","250635splitHere46","public class MyLegacyClass {<newline46mondego><newline46mondego>  private static Strategy strategy = new JNDIStrategy();<newline46mondego><newline46mondego>  public static SomeLegacyClass doSomeLegacyStuff(SomeOtherLegacyClass legacyObj) {<newline46mondego>    // legacy logic<newline46mondego>    SomeLegacyClass result = strategy.doSomeStuff(legacyObj);<newline46mondego>    // more legacy logic<newline46mondego>    return result;<newline46mondego>  }<newline46mondego><newline46mondego>  static void setStrategy(Strategy strategy){<newline46mondego>    MyLegacyClass.strategy = strategy;<newline46mondego>  }<newline46mondego><newline46mondego>}<newline46mondego><newline46mondego>interface Strategy{<newline46mondego>  public SomeLegacyClass doSomeStuff(SomeOtherLegacyClass legacyObj);<newline46mondego>}<newline46mondego><newline46mondego>class JNDIStrategy implements Strategy {<newline46mondego>  private static final String jndiName = <doubleQuotes46>java:comp/env/jdbc/LegacyDataSource<doubleQuotes46>;<newline46mondego><newline46mondego>  public SomeLegacyClass doSomeStuff(SomeOtherLegacyClass legacyObj) {<newline46mondego>    // do stuff using jndiName<newline46mondego>  }<newline46mondego>}<newline46mondego>"
"2027splitHere46","250635splitHere46","public class MyLegacyClassTest extends TestCase {<newline46mondego><newline46mondego>  private MockStrategy mockStrategy = new MockStrategy();<newline46mondego><newline46mondego>  protected void setUp() throws Exception {<newline46mondego>    MyLegacyClass.setStrategy(mockStrategy);<newline46mondego>  }<newline46mondego><newline46mondego>  protected void tearDown() throws Exception {<newline46mondego>    // TODO, reset original strategy on MyLegacyClass...<newline46mondego>  }<newline46mondego><newline46mondego>  public void testDoSomeLegacyStuff() {<newline46mondego>    MyLegacyClass.doSomeLegacyStuff(..);<newline46mondego>    assertTrue(..);<newline46mondego>  }<newline46mondego><newline46mondego>  static class MockStrategy implements Strategy{<newline46mondego><newline46mondego>    public SomeLegacyClass doSomeStuff(SomeOtherLegacyClass legacyObj) {<newline46mondego>      // mock behavior however you want, record state however<newline46mondego>      // you'd like for test asserts.  Good frameworks like Mockito exist<newline46mondego>      // to help create mocks<newline46mondego>    }<newline46mondego>  }<newline46mondego>}<newline46mondego>"
"2028splitHere46","250955splitHere46","null"
"2029splitHere46","251328splitHere46","extends"
"2030splitHere46","251328splitHere46","super"
"2031splitHere46","251328splitHere46","? extends T"
"2032splitHere46","251328splitHere46","? super T"
"2033splitHere46","251447splitHere46","D:\>fsutil fsinfo ntfsinfo c:<newline46mondego>NTFS Volume Serial Number :       0xd49cf9cf9cf9ac5c<newline46mondego>Version :                         3.1<newline46mondego>Number Sectors :                  0x0000000004a813ff<newline46mondego>Total Clusters :                  0x000000000095027f<newline46mondego>Free Clusters  :                  0x00000000002392f5<newline46mondego>Total Reserved :                  0x0000000000000490<newline46mondego>Bytes Per Sector  :               512<newline46mondego>Bytes Per Cluster :               4096<newline46mondego>Bytes Per FileRecord Segment    : 1024<newline46mondego>Clusters Per FileRecord Segment : 0<newline46mondego>Mft Valid Data Length :           0x000000000e70c000<newline46mondego>Mft Start Lcn  :                  0x00000000000c0000<newline46mondego>Mft2 Start Lcn :                  0x0000000000000010<newline46mondego>Mft Zone Start :                  0x0000000000624ea0<newline46mondego>Mft Zone End   :                  0x0000000000643da0<newline46mondego>"
"2034splitHere46","251691splitHere46","ServiceLoader"
"2035splitHere46","251691splitHere46","public <S> Iterable<S> load(Class<S> ifc) throws Exception {<newline46mondego>  ClassLoader ldr = Thread.currentThread().getContextClassLoader();<newline46mondego>  Enumeration<URL> e = ldr.getResources(<doubleQuotes46>META-INF/services/<doubleQuotes46> + ifc.getName());<newline46mondego>  Collection<S> services = new ArrayList<S>();<newline46mondego>  while (e.hasMoreElements()) {<newline46mondego>    URL url = e.nextElement();<newline46mondego>    InputStream is = url.openStream();<newline46mondego>    try {<newline46mondego>      BufferedReader r = new BufferedReader(new InputStreamReader(is, <doubleQuotes46>UTF-8<doubleQuotes46>));<newline46mondego>      while (true) {<newline46mondego>        String line = r.readLine();<newline46mondego>        if (line == null)<newline46mondego>          break;<newline46mondego>        int comment = line.indexOf('#');<newline46mondego>        if (comment >= 0)<newline46mondego>          line = line.substring(0, comment);<newline46mondego>        String name = line.trim();<newline46mondego>        if (name.length() == 0)<newline46mondego>          continue;<newline46mondego>        Class<?> clz = Class.forName(name, true, ldr);<newline46mondego>        Class<? extends S> impl = clz.asSubclass(ifc);<newline46mondego>        Constructor<? extends S> ctor = impl.getConstructor();<newline46mondego>        S svc = ctor.newInstance();<newline46mondego>        services.add(svc);<newline46mondego>      }<newline46mondego>    }<newline46mondego>    finally {<newline46mondego>      is.close();<newline46mondego>    }<newline46mondego>  }<newline46mondego>  return services;<newline46mondego>}<newline46mondego>"
"2036splitHere46","251760splitHere46","<profile><newline46mondego>        <id>integrationtest</id><newline46mondego>        <build><newline46mondego>            <plugins><newline46mondego>                <plugin><newline46mondego>                    <groupId>org.apache.maven.plugins</groupId><newline46mondego>                    <artifactId>maven-surefire-plugin</artifactId><newline46mondego>                    <configuration><newline46mondego>                        <argLine>-client -Xmx896m -XX:MaxPermSize=192m</argLine><newline46mondego>                        <forkMode>once</forkMode><newline46mondego>                        <includes><newline46mondego>                            <include>**/**/*Test.java</include><newline46mondego>                            <include>**/**/*IntTest.java</include><newline46mondego>                        </includes><newline46mondego>                        <excludes><newline46mondego>                            <exclude>**/**/*SeleniumTest.java</exclude><newline46mondego>                        </excludes><newline46mondego>                    </configuration><newline46mondego>                </plugin><newline46mondego>            </plugins><newline46mondego>        </build><newline46mondego>        <activation><newline46mondego>            <property><newline46mondego>                <name>integrationtest</name><newline46mondego>            </property><newline46mondego>        </activation><newline46mondego>    </profile><newline46mondego>"
"2037splitHere46","251822splitHere46","SessionFactory sf = (new Configuration()).configure().buildSessionFactory();<newline46mondego>"
"2038splitHere46","251822splitHere46","EntityManagerFactory emf = Persistence.createEntityManagerFactory(<doubleQuotes46>myPersistenceUnit<doubleQuotes46>);<newline46mondego>return ((EntityManagerFactoryImpl)emf).getSessionFactory();<newline46mondego>"
"2039splitHere46","251822splitHere46","import javax.ejb.Stateless;<newline46mondego>import javax.persistence.PersistenceUnit;<newline46mondego>import net.sf.ehcache.CacheManager;<newline46mondego>import org.hibernate.SessionFactory;<newline46mondego><newline46mondego>@Stateless<newline46mondego>public class UtilMgrBean implements UtilMgr {<newline46mondego>    // NOTE: rename as necessary<newline46mondego>    @PersistenceUnit(unitName = <doubleQuotes46>myPersistenceCtx<doubleQuotes46>)<newline46mondego>    private SessionFactory sessionFactory;<newline46mondego><newline46mondego>    public SessionFactory getSessionFactory() {<newline46mondego>        return this.sessionFactory;<newline46mondego>    }<newline46mondego><newline46mondego>    public CacheManager getCacheManager() {<newline46mondego>        return CacheManager.getInstance(); // NOTE: assumes SingletonEhCacheProvider<newline46mondego>    }<newline46mondego>}<newline46mondego>"
"2040splitHere46","251822splitHere46","try {<newline46mondego>    // NOTE: lookupBean is a utility method in our app we use for jndi lookups.<newline46mondego>    //   replace as necessary for your application.<newline46mondego>    UtilMgr utilMgr = (UtilMgr)Manager.lookupBean(<doubleQuotes46>UtilMgrBean<doubleQuotes46>, UtilMgr.class);<newline46mondego>    SessionFactory sf = utilMgr.getSessionFactory();<newline46mondego>    MBeanServer mbs = ManagementFactory.getPlatformMBeanServer();<newline46mondego><newline46mondego>    // NOTE: replace myAppName as necessary<newline46mondego>    ObjectName on = new ObjectName(<doubleQuotes46>Hibernate:type=statistics,application=myAppName<doubleQuotes46>);<newline46mondego><newline46mondego>    // Enable Hibernate JMX Statistics<newline46mondego>    StatisticsService statsMBean = new StatisticsService();<newline46mondego>    statsMBean.setSessionFactory(sf);<newline46mondego>    statsMBean.setStatisticsEnabled(true);<newline46mondego>    mbs.registerMBean(statsMBean, on);<newline46mondego><newline46mondego>    CacheManager cacheMgr = utilMgr.getCacheManager();<newline46mondego>    ManagementService.registerMBeans(cacheMgr, mbs, true, true, true, true);<newline46mondego>} catch(Throwable t) {<newline46mondego>    throw new RuntimeException(t);<newline46mondego>}<newline46mondego>"
"2041splitHere46","251836splitHere46","java.text.SimpleDateFormat sdf = new java.text.SimpleDateFormat('MM/dd/yy')<newline46mondego>java.text.SimpleDateFormat fmt = new java.text.SimpleDateFormat('yyyy-MM-dd')<newline46mondego>Calendar cal = Calendar.getInstance()<newline46mondego>cal.add(Calendar.YEAR, -100)<newline46mondego>sdf.set2DigitYearStart(cal.getTime())<newline46mondego>dates = ['01/01/01', '10/30/08','01/01/09']<newline46mondego>dates.each {String d -><newline46mondego>  println fmt.format(sdf.parse(d))<newline46mondego>}<newline46mondego>"
"2042splitHere46","251836splitHere46","2001-01-01<newline46mondego>2008-10-30<newline46mondego>1909-01-01<newline46mondego>"
"2043splitHere46","252099splitHere46","<? extends T>"
"2044splitHere46","252099splitHere46","<? super T>"
"2045splitHere46","252099splitHere46","<?>"
"2046splitHere46","252099splitHere46","<? extends Object>"
"2047splitHere46","252099splitHere46","<? extends T>"
"2048splitHere46","252099splitHere46","<? super T>"
"2049splitHere46","252099splitHere46","<? extends T>"
"2050splitHere46","252099splitHere46","<? super T>"
"2051splitHere46","252168splitHere46","IProgressMonitor progressMonitor = new NullProgressMonitor();<newline46mondego>IWorkspaceRoot root = ResourcesPlugin.getWorkspace().getRoot();<newline46mondego>IProject project = root.getProject(<doubleQuotes46>DesiredProjectName<doubleQuotes46>);<newline46mondego>project.create(progressMonitor);<newline46mondego>project.open(progressMonitor);<newline46mondego>"
"2052splitHere46","252254splitHere46","ikvmc -target:library <path-to-lucene.jar><newline46mondego>"
"2053splitHere46","252254splitHere46","QueryParser parser = new QueryParser(<doubleQuotes46>field1<doubleQuotes46>, analyzer);<newline46mondego>java.util.Map boosts = new java.util.HashMap();<newline46mondego>boosts.put(<doubleQuotes46>field1<doubleQuotes46>, new java.lang.Float(1.0));<newline46mondego>boosts.put(<doubleQuotes46>field2<doubleQuotes46>, new java.lang.Float(10.0));<newline46mondego><newline46mondego>MultiFieldQueryParser multiParser = new MultiFieldQueryParser<newline46mondego>                      (new string[] { <doubleQuotes46>field1<doubleQuotes46>, <doubleQuotes46>field2<doubleQuotes46> }, analyzer, boosts);<newline46mondego>multiParser.setDefaultOperator(QueryParser.Operator.OR);<newline46mondego><newline46mondego>Query query = multiParser.parse(<doubleQuotes46>ABC<doubleQuotes46>);<newline46mondego>Hits hits = isearcher.search(query);<newline46mondego>"
"2054splitHere46","252254splitHere46","System.Out"
"2055splitHere46","252254splitHere46","Console.Writeln"
"2056splitHere46","252254splitHere46","ikvmc -target:library lucene-highlighter-2.4.0.jar -r:lucene-core-2.4.0.dll<newline46mondego>"
"2057splitHere46","252401splitHere46","this"
"2058splitHere46","252401splitHere46","run(int)"
"2059splitHere46","252401splitHere46","this"
"2060splitHere46","252401splitHere46","NotApplicable.this.run(42)"
"2061splitHere46","252401splitHere46","this"
"2062splitHere46","252401splitHere46","Runnable"
"2063splitHere46","252401splitHere46","run()"
"2064splitHere46","252401splitHere46","NotApplicable.this"
"2065splitHere46","252401splitHere46","NotApplicable"
"2066splitHere46","252401splitHere46","run(int)"
"2067splitHere46","252401splitHere46","public class Outer{<newline46mondego><newline46mondego>    public Outer() {<newline46mondego>        new Runnable() {<newline46mondego>            public void printit() {<newline46mondego>                System.out.println( <doubleQuotes46>Anonymous Inner<doubleQuotes46> );<newline46mondego>            }<newline46mondego>            public void run() {<newline46mondego>                printit(); // prints <doubleQuotes46>Anonymous Inner<doubleQuotes46><newline46mondego>                this.printit(); //prints <doubleQuotes46>Anonymous Inner<doubleQuotes46><newline46mondego><newline46mondego>                // would not be possible to execute next line without this behavior<newline46mondego>                Outer.this.printit(); //prints <doubleQuotes46>Outer<doubleQuotes46> <newline46mondego>            }<newline46mondego>        };<newline46mondego>    }<newline46mondego><newline46mondego>    public void printit() {<newline46mondego>        System.out.println( <doubleQuotes46>Outer<doubleQuotes46> );<newline46mondego>    }<newline46mondego>}<newline46mondego>"
"2068splitHere46","252790splitHere46","public interface WatchableDao<T extends Watchable<?>><newline46mondego>"
"2069splitHere46","252790splitHere46","Watchable<Something>"
"2070splitHere46","252790splitHere46","Something"
"2071splitHere46","252967splitHere46","URLClassLoader"
"2072splitHere46","252967splitHere46","URL[] url={new URL(<doubleQuotes46>file://foo<doubleQuotes46>)};<newline46mondego>URLClassLoader loader = new URLClassLoader(url);<newline46mondego>"
"2073splitHere46","252967splitHere46","ClassLoader currentThreadClassLoader<newline46mondego> = Thread.currentThread().getContextClassLoader();<newline46mondego><newline46mondego>// Add the conf dir to the classpath<newline46mondego>// Chain the current thread classloader<newline46mondego>URLClassLoader urlClassLoader<newline46mondego> = new URLClassLoader(new URL[]{new File(<doubleQuotes46>mtFile<doubleQuotes46>).toURL()},<newline46mondego>                      currentThreadClassLoader);<newline46mondego><newline46mondego>// Replace the thread classloader - assumes<newline46mondego>// you have permissions to do so<newline46mondego>Thread.currentThread().setContextClassLoader(urlClassLoader);<newline46mondego>"
"2074splitHere46","252967splitHere46","public void addURL(URL url) throws Exception {<newline46mondego>  URLClassLoader classLoader<newline46mondego>         = (URLClassLoader) ClassLoader.getSystemClassLoader();<newline46mondego>  Class clazz= URLClassLoader.class;<newline46mondego><newline46mondego>  // Use reflection<newline46mondego>  Method method= clazz.getDeclaredMethod(<doubleQuotes46>addURL<doubleQuotes46>, new Class[] { URL.class });<newline46mondego>  method.setAccessible(true);<newline46mondego>  method.invoke(classLoader, new Object[] { url });<newline46mondego>}<newline46mondego><newline46mondego>addURL(new File(<doubleQuotes46>conf<doubleQuotes46>).toURL());<newline46mondego><newline46mondego>// This should work now!<newline46mondego>Thread.currentThread().getContextClassLoader().getResourceAsStream(<doubleQuotes46>context.xml<doubleQuotes46>);<newline46mondego>"
"2075splitHere46","253216splitHere46","import mypackage.MyClass<newline46mondego>import mypackage.MyClass.MyNestedClass<newline46mondego><newline46mondego>outer = mypackage.MyClass()<newline46mondego>inner = mypackage.MyClass.MyNestedClass(outer)<newline46mondego>"
"2076splitHere46","253282splitHere46","public class A {<newline46mondego>  enum E {A,B};<newline46mondego>}<newline46mondego><newline46mondego>public class A {<newline46mondego>  static enum E {A,B};<newline46mondego>}<newline46mondego>"
"2077splitHere46","253282splitHere46","public class A {<newline46mondego>  private static enum E {A,B}<newline46mondego>}<newline46mondego>"
"2078splitHere46","253521splitHere46","LinkedList.Entry"
"2079splitHere46","253521splitHere46","LinkedList"
"2080splitHere46","253521splitHere46","Entry"
"2081splitHere46","253521splitHere46","Map.Entry"
"2082splitHere46","253601splitHere46","package com.cg.mock;<newline46mondego><newline46mondego>public class Alert {<newline46mondego>  String alert1;<newline46mondego>  public Alert(String alert1) {<newline46mondego>    super();<newline46mondego>    this.alert1 = alert1;       <newline46mondego>  }<newline46mondego>  public String getAlert1() {<newline46mondego>    return alert1;<newline46mondego>  }<newline46mondego>  public void setAlert1(String alert1) {<newline46mondego>    this.alert1 = alert1;<newline46mondego>  }<newline46mondego>}<newline46mondego>"
"2083splitHere46","253601splitHere46","ArrayList<Alert> alt = new ArrayList<Alert>();<newline46mondego><newline46mondego>alt.add(new Alert(<doubleQuotes46>alert1<doubleQuotes46>);<newline46mondego>alt.add(new Alert(<doubleQuotes46>alert2<doubleQuotes46>);<newline46mondego>alt.add(new Alert(<doubleQuotes46>alert3<doubleQuotes46>);<newline46mondego><newline46mondego>return alt;<newline46mondego>"
"2084splitHere46","253601splitHere46","<p>You have <%=alt.size()%> Active Alert(s)</p><newline46mondego><ul><newline46mondego><c:forEach var=<doubleQuotes46>alert<doubleQuotes46> items=<doubleQuotes46>${alt}<doubleQuotes46> varStatus=<doubleQuotes46>status<doubleQuotes46> >    <newline46mondego><newline46mondego>     <li><a href=<doubleQuotes46>#<doubleQuotes46> class=<doubleQuotes46>linkthree<doubleQuotes46>>${alert.alert1}</a></li><newline46mondego><newline46mondego>  </c:forEach><newline46mondego> </ul><newline46mondego>"
"2085splitHere46","254372splitHere46","Map<K, Collection<V>> map = new HashMap<K, Collection<V>>();<newline46mondego>"
"2086splitHere46","254372splitHere46","add"
"2087splitHere46","254372splitHere46","public abstract class CollectionHashMap<K, V><newline46mondego>  extends HashMap<K, Collection<V>><newline46mondego>{<newline46mondego><newline46mondego>  protected abstract Collection<V> createCollection();<newline46mondego><newline46mondego>  public void add(K key, V val)<newline46mondego>  {<newline46mondego>    Collection<V> c = get(key);<newline46mondego>    if (c == null)<newline46mondego>      put(key, c = createCollection());<newline46mondego>    c.add(val);<newline46mondego>  }<newline46mondego><newline46mondego>}<newline46mondego>"
"2088splitHere46","254372splitHere46","Set"
"2089splitHere46","254372splitHere46","public class HashSetMap<K, V><newline46mondego>  extends CollectionHashMap<K, V><newline46mondego>{<newline46mondego><newline46mondego>  protected HashSet<V> createCollection()<newline46mondego>  {<newline46mondego>    return new HashSet<V>();<newline46mondego>  }<newline46mondego><newline46mondego>}<newline46mondego>"
"2090splitHere46","254372splitHere46","AbstractMap"
"2091splitHere46","254425splitHere46","public class Foo {<newline46mondego><newline46mondego>  @Delegate(IBar.class)<newline46mondego>  private Bar bar;<newline46mondego><newline46mondego>  // initialize bar via constructor or setter<newline46mondego>}<newline46mondego>"
"2092splitHere46","254425splitHere46","public Baz method1(Qux val) {<newline46mondego>  return bar.method1(val);<newline46mondego>}<newline46mondego>"
"2093splitHere46","254448splitHere46",".groovy/lib"
"2094splitHere46","254448splitHere46","load !{user.home}/.groovy/lib/*.jar"
"2095splitHere46","254448splitHere46",".groovy/lib"
"2096splitHere46","254795splitHere46","<c:catch var=<doubleQuotes46>err<doubleQuotes46>><newline46mondego>    <c:out value=<doubleQuotes46>${employee.salary}<doubleQuotes46>/><newline46mondego></c:catch><newline46mondego>"
"2097splitHere46","256247splitHere46","import java.util.HashSet;<newline46mondego>import java.util.Iterator;<newline46mondego>import java.util.Random;<newline46mondego>import java.util.Set;<newline46mondego><newline46mondego>public class HashCodeTest {<newline46mondego>    private int hashCode = 0;<newline46mondego><newline46mondego>    @Override public int hashCode() {<newline46mondego>    	return hashCode ++;<newline46mondego>    }<newline46mondego><newline46mondego>    public static void main(String[] args) {<newline46mondego>    	Set<HashCodeTest> set = new HashSet<HashCodeTest>();<newline46mondego><newline46mondego>    	set.add(new HashCodeTest());<newline46mondego>    	System.out.println(set.size());<newline46mondego>    	for (Iterator<HashCodeTest> iter = set.iterator();<newline46mondego>    			iter.hasNext();) {<newline46mondego>    		iter.next();<newline46mondego>    		iter.remove();<newline46mondego>    	}<newline46mondego>    	System.out.println(set.size());<newline46mondego>    }<newline46mondego>}<newline46mondego>"
"2098splitHere46","256247splitHere46","1<newline46mondego>1<newline46mondego>"
"2099splitHere46","256498splitHere46","ConcurrentSkipListSet"
"2100splitHere46","256498splitHere46","ConcurrentSkipListMap"
"2101splitHere46","256498splitHere46","Map"
"2102splitHere46","256540splitHere46","Analyzer"
"2103splitHere46","256540splitHere46","DefaultAnalyzer"
"2104splitHere46","256540splitHere46","DummyAnalyzer"
"2105splitHere46","256540splitHere46","PageByPageAnalyzer"
"2106splitHere46","256670splitHere46","linux32"
"2107splitHere46","256693splitHere46","public class Chainer<newline46mondego>{<newline46mondego>    public Chainer doStuff()<newline46mondego>    {<newline46mondego>       /* Do stuff ... */<newline46mondego>       return this;<newline46mondego>    }<newline46mondego>}<newline46mondego><newline46mondego>public class ChainerExtender extends Chainer<newline46mondego>{<newline46mondego>    @Override<newline46mondego>    public ChainerExtender doStuff()<newline46mondego>    {<newline46mondego>       /* Do stuff ... */<newline46mondego>       super.doStuff();<newline46mondego>       return this;<newline46mondego>    }<newline46mondego>}<newline46mondego>"
"2108splitHere46","256861splitHere46","// The preferred idiom for iterating over collections and arrays<newline46mondego>for (Element e : elements) {<newline46mondego>    doSomething(e);<newline46mondego>}<newline46mondego>"
"2109splitHere46","256914splitHere46","<h:inputText id=<doubleQuotes46>name<doubleQuotes46> value=<doubleQuotes46>#{student.name}<doubleQuotes46>/><newline46mondego>"
"2110splitHere46","256914splitHere46","<jsp:useBean class=<doubleQuotes46>packagename.SessionBean<doubleQuotes46> id=<doubleQuotes46>sb<doubleQuotes46>/><newline46mondego><c:forEach var=<doubleQuotes46>myObject<doubleQuotes46> items=<doubleQuotes46>${sb.objects}<doubleQuotes46>><newline46mondego>            <h:outputText value=<doubleQuotes46>${myObject}<doubleQuotes46> /> <br /><newline46mondego></c:forEach><newline46mondego>"
"2111splitHere46","257646splitHere46","InputStream"
"2112splitHere46","257646splitHere46","InputStream"
"2113splitHere46","258041splitHere46","setOpaque(false)<newline46mondego>"
"2114splitHere46","258177splitHere46","ps2ps"
"2115splitHere46","258177splitHere46","-sDEVICE=pswrite"
"2116splitHere46","258177splitHere46","ps2ps2"
"2117splitHere46","258177splitHere46","-sDEVICE=ps2write"
"2118splitHere46","258499splitHere46","Graphics.getFontMetrics"
"2119splitHere46","258499splitHere46","FontMetrics"
"2120splitHere46","258499splitHere46","FontMetrics.stringWidth"
"2121splitHere46","258623splitHere46","Vector<A> vector = new Vector<B>();<newline46mondego>"
"2122splitHere46","258623splitHere46","Vector<Vector<?>> vector = new Vector<Vector<String>>();<newline46mondego>vector.add(new Vector<Integer>());<newline46mondego>"
"2123splitHere46","258623splitHere46","Vector<?>"
"2124splitHere46","258623splitHere46","Vector<Integer>"
"2125splitHere46","258623splitHere46","Vector<String>"
"2126splitHere46","258623splitHere46","Vector"
"2127splitHere46","258623splitHere46","LinkedList"
"2128splitHere46","258623splitHere46","ArrayList"
"2129splitHere46","258951splitHere46","class MyURIResolver implements URIResolver {<newline46mondego>@Override<newline46mondego>public Source resolve(String href, String base) throws TransformerException {<newline46mondego>  try {<newline46mondego>    ClassLoader cl = this.getClass().getClassLoader();<newline46mondego>    java.io.InputStream in = cl.getResourceAsStream(<doubleQuotes46>xsl/<doubleQuotes46> + href);<newline46mondego>    InputSource xslInputSource = new InputSource(in);<newline46mondego>    Document xslDoc = dBuilder.parse(xslInputSource);<newline46mondego>    DOMSource xslDomSource = new DOMSource(xslDoc);<newline46mondego>    xslDomSource.setSystemId(<doubleQuotes46>xsl/<doubleQuotes46> + href);<newline46mondego>    return xslDomSource;<newline46mondego> } catch (...<newline46mondego>"
"2130splitHere46","258951splitHere46","tFactory.setURIResolver(new MyURIResolver());<newline46mondego>"
"2131splitHere46","259053splitHere46","public static final int CLUBS = 0;<newline46mondego>public static final int DIAMONDS = 1;<newline46mondego>public static final int HEARTS = 2;<newline46mondego>public static final int SPADES = 3;<newline46mondego>"
"2132splitHere46","259053splitHere46","public enum Suit { <newline46mondego>  CLUBS, <newline46mondego>  DIAMONDS, <newline46mondego>  HEARTS, <newline46mondego>  SPADES <newline46mondego>}<newline46mondego>"
"2133splitHere46","259283splitHere46","DISPOSE_ON_CLOSE"
"2134splitHere46","259283splitHere46","EXIT_ON_CLOSE"
"2135splitHere46","259283splitHere46","Frame.getFrames()"
"2136splitHere46","259306splitHere46","MONO_IOMAP"
"2137splitHere46","259464splitHere46","#!/bin/sh<newline46mondego>while true<newline46mondego>do<newline46mondego>    java MainClass<newline46mondego>done<newline46mondego>"
"2138splitHere46","259464splitHere46","#!/bin/sh<newline46mondego>STATUS=0<newline46mondego>while [ $STATUS -eq 0 ]<newline46mondego>do<newline46mondego>    java MainClass<newline46mondego>    STATUS=$?<newline46mondego>done<newline46mondego>"
"2139splitHere46","259514splitHere46","public class TestDoubleFloat  {<newline46mondego>    public static void main(String[] args) {<newline46mondego>        for (long i = Integer.MIN_VALUE; i <= Integer.MAX_VALUE; i++) {<newline46mondego>            float f1 = Float.intBitsToFloat((int) i);<newline46mondego>            double d = (double) f1;<newline46mondego>            float f2 = (float) d;<newline46mondego>            if (f1 != f2) {<newline46mondego>                if (Float.isNaN(f1) && Float.isNaN(f2)) {<newline46mondego>                    continue; // ok, NaN<newline46mondego>                }<newline46mondego>                fail(<doubleQuotes46>oops: <doubleQuotes46> + f1 + <doubleQuotes46> != <doubleQuotes46> + f2);<newline46mondego>            }<newline46mondego>        }<newline46mondego>    }<newline46mondego>}<newline46mondego>"
"2140splitHere46","259583splitHere46","JFileChooser fc = ...<newline46mondego>JPanel panel ...<newline46mondego>panel.add(fc);<newline46mondego>"
"2141splitHere46","259598splitHere46","%typemap(javabase) UserStream <doubleQuotes46>com.jphysx.SWIGTYPE_p_NxStream<doubleQuotes46>;<newline46mondego>"
"2142splitHere46","259598splitHere46","swigCPtr"
"2143splitHere46","259598splitHere46","0"
"2144splitHere46","259598splitHere46","UserStream"
"2145splitHere46","259598splitHere46","SWIGTYPE_p_NxStream"
"2146splitHere46","259598splitHere46","%typemap(javacode) UserStream %{<newline46mondego>	public native com.JPhysX.SWIGTYPE_p_NxStream toNxStreamPtr();<newline46mondego>%}<newline46mondego>"
"2147splitHere46","259598splitHere46","JNIEXPORT jobject JNICALL Java_physics_UserStream_toNxStreamPtr(JNIEnv *env, jobject userStreamObject) {<newline46mondego>	jclass userStreamClass = env->GetObjectClass(userStreamObject);<newline46mondego>	jmethodID getCPtrMethodID = env->GetStaticMethodID(userStreamClass, <doubleQuotes46>getCPtr<doubleQuotes46>, <doubleQuotes46>(Lphysics/UserStream;)J<doubleQuotes46>);<newline46mondego><newline46mondego>	jlong cPtr = env->CallStaticLongMethod(userStreamClass, getCPtrMethodID, userStreamObject);<newline46mondego>	jboolean futureUse = false;<newline46mondego><newline46mondego>	jclass nxStreamPtrClass = env->FindClass(<doubleQuotes46>com/JPhysX/SWIGTYPE_p_NxStream<doubleQuotes46>);<newline46mondego>	jmethodID nxStreamPtrConstructor = env->GetMethodID(nxStreamPtrClass, <doubleQuotes46><init><doubleQuotes46>, <doubleQuotes46>(JZ)V<doubleQuotes46>);<newline46mondego>	jobject nxStreamPtrObject = env->NewObject(nxStreamPtrClass, nxStreamPtrConstructor, cPtr, futureUse);<newline46mondego>	return nxStreamPtrObject;<newline46mondego>}<newline46mondego>"
"2148splitHere46","259928splitHere46","button = new JButton(<doubleQuotes46><html>J<newline46mondego>b<newline46mondego>u<newline46mondego>t<newline46mondego>t<newline46mondego>o<newline46mondego>n<newline46mondego>1</html><doubleQuotes46>);<newline46mondego>"
"2149splitHere46","260343splitHere46","notifyAll"
"2150splitHere46","260343splitHere46","notifyAll"
"2151splitHere46","260343splitHere46","foo"
"2152splitHere46","260343splitHere46","wait"
"2153splitHere46","260371splitHere46","getContextPath()"
"2154splitHere46","260371splitHere46","ServletContext.getContextPath()"
"2155splitHere46","260371splitHere46","getRequestURI()"
"2156splitHere46","260755splitHere46","abstract class Product { <newline46mondego>    int multiplyBy;<newline46mondego>    public Product( int multiplyBy ) {<newline46mondego>        this.multiplyBy = multiplyBy;<newline46mondego>    }<newline46mondego><newline46mondego>    public int mutiply(int val) {<newline46mondego>       return muliplyBy * val;<newline46mondego>    }<newline46mondego>}<newline46mondego><newline46mondego>class TimesTwo extends Product {<newline46mondego>    public TimesTwo() {<newline46mondego>        super(2);<newline46mondego>    }<newline46mondego>}<newline46mondego><newline46mondego>class TimesWhat extends Product {<newline46mondego>    public TimesWhat(int what) {<newline46mondego>        super(what);<newline46mondego>    }<newline46mondego>}<newline46mondego>"
"2157splitHere46","260771splitHere46","select dbms_metadata.get_ddl('TABLE', 'TABLE_NAME', 'SCHEMA_NAME') from dual<newline46mondego>"
"2158splitHere46","260779splitHere46","public class Scratch<newline46mondego>{<newline46mondego>    public static abstract class A<newline46mondego>    {<newline46mondego>        public A( int i ) {}<newline46mondego>    }<newline46mondego><newline46mondego>    public static class B extends A<newline46mondego>    {<newline46mondego>        private B() { super(0); };<newline46mondego>    }<newline46mondego>}<newline46mondego>"
"2159splitHere46","261259splitHere46","ActiveSheet.Range(<doubleQuotes46>A1<doubleQuotes46>).Value = ChrW(&h221E)<newline46mondego>"
"2160splitHere46","261349splitHere46","@Resource<newline46mondego>private WebServiceContext context;<newline46mondego>"
"2161splitHere46","261349splitHere46","ServletContext servletContext =<newline46mondego>    (ServletContext) context.getMessageContext().get(MessageContext.SERVLET_CONTEXT);<newline46mondego>"
"2162splitHere46","261550splitHere46","nextNode.appendChild(doc.createTextNode(<doubleQuotes46>title<doubleQuotes46>));<newline46mondego>"
"2163splitHere46","261550splitHere46","map"
"2164splitHere46","261550splitHere46","Element title = doc.createElement(<doubleQuotes46>title<doubleQuotes46>);<newline46mondego>title.appendChild(doc.createTextNode(<doubleQuotes46>title content<doubleQuotes46>))<newline46mondego>nextNode.appendChild(title);<newline46mondego>"
"2165splitHere46","261814splitHere46","-source"
"2166splitHere46","261814splitHere46","javac -source 1.3"
"2167splitHere46","262016splitHere46","conf/server.xml"
"2168splitHere46","262016splitHere46","<Host name=<doubleQuotes46>localhost<doubleQuotes46> debug=<doubleQuotes46>0<doubleQuotes46> appBase=<doubleQuotes46>webapps<doubleQuotes46><newline46mondego>   unpackWARs=<doubleQuotes46>true<doubleQuotes46> autoDeploy=<doubleQuotes46>true<doubleQuotes46><newline46mondego>   xmlValidation=<doubleQuotes46>false<doubleQuotes46> xmlNamespaceAware=<doubleQuotes46>false<doubleQuotes46>><newline46mondego>"
"2169splitHere46","262016splitHere46","<Host>"
"2170splitHere46","262016splitHere46","<Engine>"
"2171splitHere46","262016splitHere46","appBase"
"2172splitHere46","262016splitHere46","<Host"
"2173splitHere46","262416splitHere46","HashMap"
"2174splitHere46","262416splitHere46","private Map<String, String> someMap = (HashMap<String, String>)getApplicationContext().getBean(<doubleQuotes46>someMap<doubleQuotes46>);<newline46mondego>"
"2175splitHere46","262416splitHere46","HashMap"
"2176splitHere46","262416splitHere46","HashMap"
"2177splitHere46","262416splitHere46","if(getApplicationContext().getBean(<doubleQuotes46>someMap<doubleQuotes46>) instanceof HashMap) {<newline46mondego>    private Map<String, String> someMap = (HashMap<String, String>)getApplicationContext().getBean(<doubleQuotes46>someMap<doubleQuotes46>);<newline46mondego>}<newline46mondego>"
"2178splitHere46","262416splitHere46","getBean"
"2179splitHere46","262416splitHere46","Object"
"2180splitHere46","262416splitHere46","HashMap"
"2181splitHere46","262416splitHere46","HashMap<String, String>"
"2182splitHere46","262416splitHere46","HashMap<Object, Object>"
"2183splitHere46","262416splitHere46","HashMap<String, String>"
"2184splitHere46","262416splitHere46","HashMap<Date, Calendar>"
"2185splitHere46","262416splitHere46","String value = map.get(<doubleQuotes46>thisString<doubleQuotes46>);"
"2186splitHere46","262416splitHere46","ClassCastException"
"2187splitHere46","262449splitHere46","$(document).ajaxError(function(event, XMLHttpRequest, ajaxOptions, thrownError) {<newline46mondego>    // redirect here.<newline46mondego>}<newline46mondego>"
"2188splitHere46","262631splitHere46","BufferedReader"
"2189splitHere46","262654splitHere46","<hibernate-mapping><newline46mondego>  <class name=<doubleQuotes46>A<doubleQuotes46> table=<doubleQuotes46>A<doubleQuotes46>><newline46mondego>    <id name=<doubleQuotes46>id<doubleQuotes46> type=<doubleQuotes46>long<doubleQuotes46> column=<doubleQuotes46>a_id<doubleQuotes46>><newline46mondego>      <generator class=<doubleQuotes46>native<doubleQuotes46>/><newline46mondego>    </id><newline46mondego>    <discriminator column=<doubleQuotes46>discriminator_col<doubleQuotes46> type=<doubleQuotes46>string<doubleQuotes46>/><newline46mondego>    <property name=<doubleQuotes46><doubleQuotes46> type=<doubleQuotes46><doubleQuotes46>/><newline46mondego>    <!-- ... --><newline46mondego>  </class><newline46mondego>  <subclass name=<doubleQuotes46>B<doubleQuotes46> extends=<doubleQuotes46>A<doubleQuotes46> discriminator-value=<doubleQuotes46>B<doubleQuotes46>><newline46mondego>    <!-- ... --><newline46mondego>  </subclass><newline46mondego>  <subclass name=<doubleQuotes46>D<doubleQuotes46> extends=<doubleQuotes46>B<doubleQuotes46> discriminator-value=<doubleQuotes46>D<doubleQuotes46>><newline46mondego>    <!-- ... --><newline46mondego>  </subclass><newline46mondego>  <subclass name=<doubleQuotes46>C<doubleQuotes46> extends=<doubleQuotes46>A<doubleQuotes46> discriminator-value=<doubleQuotes46>C<doubleQuotes46>><newline46mondego>    <!-- ... --><newline46mondego>  </subclass><newline46mondego></hibernate-mapping><newline46mondego>"
"2190splitHere46","263037splitHere46","//once the connection has been opened<newline46mondego>List values = urlConnection.getHeaderFields().get(<doubleQuotes46>content-Length<doubleQuotes46>)<newline46mondego>if (values != null && !values.isEmpty()) {<newline46mondego><newline46mondego>    // getHeaderFields() returns a Map with key=(String) header <newline46mondego>    // name, value = List of String values for that header field. <newline46mondego>    // just use the first value here.<newline46mondego>    String sLength = (String) values.get(0);<newline46mondego><newline46mondego>    if (sLength != null) {<newline46mondego>       //parse the length into an integer...<newline46mondego>       ...<newline46mondego>    }<newline46mondego>"
"2191splitHere46","263184splitHere46","BusinessLogic"
"2192splitHere46","263184splitHere46","BusinessLogic"
"2193splitHere46","263184splitHere46","BusinessLogic"
"2194splitHere46","263184splitHere46","BusinessLogicInterface"
"2195splitHere46","263184splitHere46","interface BusinessLogicInterace<newline46mondego>{<newline46mondego>    void method1();<newline46mondego>    void method2();<newline46mondego>}<newline46mondego><newline46mondego>class BusinessLogic implements BusinessLogicInterface<newline46mondego>{<newline46mondego>    void method1() { ... }<newline46mondego>    void method2() { ... }<newline46mondego>}<newline46mondego><newline46mondego>class User <newline46mondego>    extends OtherClass <newline46mondego>    implements BusinessLogicInterface<newline46mondego>{<newline46mondego>    BusinessLogic logic = new BusinessLogic();<newline46mondego><newline46mondego>    @Override<newline46mondego>    void method1() { logic.method1(); }<newline46mondego><newline46mondego>    @Override<newline46mondego>    void method2() { logic.method2(); }<newline46mondego>}<newline46mondego>"
"2196splitHere46","263319splitHere46","public class LoginBean implements Serializable {<newline46mondego><newline46mondego>    private String user;<newline46mondego>    private String password;<newline46mondego><newline46mondego>    public String getPassword() {<newline46mondego>    	return password;<newline46mondego>    }<newline46mondego><newline46mondego>    public String getUser() {<newline46mondego>    	return user;<newline46mondego>    }<newline46mondego><newline46mondego>    public void setPassword(String password) {<newline46mondego>    	System.out.println(<doubleQuotes46>Update Password: <doubleQuotes46> + password);<newline46mondego>    	this.password = password;<newline46mondego>    }<newline46mondego><newline46mondego>    public void setUser(String user) {<newline46mondego>    	System.out.println(<doubleQuotes46>Update User: <doubleQuotes46> + user);<newline46mondego>    	this.user = user;<newline46mondego>    }<newline46mondego><newline46mondego>    public String login() {<newline46mondego>    	if (<doubleQuotes46>user<doubleQuotes46>.equals(user) && <doubleQuotes46>password<doubleQuotes46>.equals(password)) {<newline46mondego>    		// ok<newline46mondego>    		System.out.println(<doubleQuotes46>Login OK<doubleQuotes46>);<newline46mondego>    		return <doubleQuotes46>loggedIn<doubleQuotes46>;<newline46mondego>    	} else {<newline46mondego>    		System.out.println(<doubleQuotes46>Login Failed<doubleQuotes46>);<newline46mondego>    		FacesContext context = FacesContext.getCurrentInstance();<newline46mondego>    		FacesMessage message = new FacesMessage(<newline46mondego>    				<doubleQuotes46>Invalid user name or password<doubleQuotes46>);<newline46mondego>    		context.addMessage(null, message);<newline46mondego>    		return null;<newline46mondego>    	}<newline46mondego>    }<newline46mondego><newline46mondego>}<newline46mondego>"
"2197splitHere46","263319splitHere46","<f:view><newline46mondego>	<h:form><newline46mondego>		login:<newline46mondego>		<h:inputText value=<doubleQuotes46>#{loginBean.user}<doubleQuotes46> /><newline46mondego>		<h:inputSecret value=<doubleQuotes46>#{loginBean.password}<doubleQuotes46> /><newline46mondego>		<h:commandButton value=<doubleQuotes46>login<doubleQuotes46> action=<doubleQuotes46>#{loginBean.login}<doubleQuotes46> /><newline46mondego>		<h:messages /><newline46mondego>	</h:form><newline46mondego></f:view><newline46mondego>"
"2198splitHere46","263319splitHere46","<?xml version=<doubleQuotes46>1.0<doubleQuotes46> encoding=<doubleQuotes46>UTF-8<doubleQuotes46>?><newline46mondego><newline46mondego><faces-config xmlns=<doubleQuotes46>http://java.sun.com/xml/ns/javaee<doubleQuotes46><newline46mondego>    xmlns:xsi=<doubleQuotes46>http://www.w3.org/2001/XMLSchema-instance<doubleQuotes46><newline46mondego>    xsi:schemaLocation=<doubleQuotes46>http://java.sun.com/xml/ns/javaee http://java.sun.com/xml/ns/javaee/web-facesconfig_1_2.xsd<doubleQuotes46><newline46mondego>    version=<doubleQuotes46>1.2<doubleQuotes46>><newline46mondego>    <managed-bean><newline46mondego>    	<managed-bean-name>loginBean</managed-bean-name><newline46mondego>    	<managed-bean-class>login.LoginBean</managed-bean-class><newline46mondego>    	<managed-bean-scope>session</managed-bean-scope><newline46mondego>    </managed-bean><newline46mondego>    <navigation-rule><newline46mondego>    	<display-name>login</display-name><newline46mondego>    	<from-view-id>/login.jsp</from-view-id><newline46mondego>    	<navigation-case><newline46mondego>    		<from-outcome>loggedIn</from-outcome><newline46mondego>    		<to-view-id>/label.jsp</to-view-id><newline46mondego>    	</navigation-case><newline46mondego>    </navigation-rule><newline46mondego>    <lifecycle><newline46mondego>    	<phase-listener>login.PhaseListenerImpl</phase-listener><newline46mondego>    </lifecycle><newline46mondego></faces-config><newline46mondego>"
"2199splitHere46","263319splitHere46","public class PhaseListenerImpl implements PhaseListener {<newline46mondego><newline46mondego>    public void afterPhase(PhaseEvent event) {<newline46mondego>    	System.out.println(<doubleQuotes46>AFTER: <doubleQuotes46> + event.getPhaseId());<newline46mondego>    }<newline46mondego><newline46mondego>    public void beforePhase(PhaseEvent event) {<newline46mondego>    	System.out.println(<doubleQuotes46>BEFORE: <doubleQuotes46> + event.getPhaseId());<newline46mondego>    }<newline46mondego><newline46mondego>    public PhaseId getPhaseId() {<newline46mondego>    	return PhaseId.ANY_PHASE;<newline46mondego>    }<newline46mondego><newline46mondego>}<newline46mondego>"
"2200splitHere46","263319splitHere46","BEFORE: RESTORE_VIEW(1)<newline46mondego>AFTER: RESTORE_VIEW(1)<newline46mondego>BEFORE: APPLY_REQUEST_VALUES(2)<newline46mondego>AFTER: APPLY_REQUEST_VALUES(2)<newline46mondego>BEFORE: PROCESS_VALIDATIONS(3)<newline46mondego>AFTER: PROCESS_VALIDATIONS(3)<newline46mondego>BEFORE: UPDATE_MODEL_VALUES(4)<newline46mondego>Update User: user<newline46mondego>Update Password: password<newline46mondego>AFTER: UPDATE_MODEL_VALUES(4)<newline46mondego>BEFORE: INVOKE_APPLICATION(5)<newline46mondego>Login OK<newline46mondego>AFTER: INVOKE_APPLICATION(5)<newline46mondego>BEFORE: RENDER_RESPONSE(6)<newline46mondego>AFTER: RENDER_RESPONSE(6)<newline46mondego>"
"2201splitHere46","263439splitHere46","Calendar"
"2202splitHere46","263903splitHere46","Map map = new HashMap();<newline46mondego>map.put(<doubleQuotes46>one<doubleQuotes46>, <doubleQuotes46>1st<doubleQuotes46>);<newline46mondego>map.put(<doubleQuotes46>two<doubleQuotes46>, new Integer(2));<newline46mondego>map.put(<doubleQuotes46>three<doubleQuotes46>, <doubleQuotes46>3rd<doubleQuotes46>);<newline46mondego>for (Object o : map.entrySet()) {<newline46mondego>	Map.Entry entry = (Map.Entry) o;<newline46mondego>	System.out.println(entry.getKey() + <doubleQuotes46> -> <doubleQuotes46> + entry.getValue());<newline46mondego>}<newline46mondego>"
"2203splitHere46","264491splitHere46","text = text.replaceAll(<doubleQuotes46>  ++(?=(?:[^\<doubleQuotes46>]*+\<doubleQuotes46>[^\<doubleQuotes46>]*+\<doubleQuotes46>)*+[^\<doubleQuotes46>]*+$)<doubleQuotes46>, <doubleQuotes46> <doubleQuotes46>);<newline46mondego>"
"2204splitHere46","264550splitHere46","replaceAll(<doubleQuotes46>(\\d)\\1+<doubleQuotes46>, <doubleQuotes46>$1<doubleQuotes46>)"
"2205splitHere46","264550splitHere46","$"
"2206splitHere46","264550splitHere46","+"
"2207splitHere46","264550splitHere46","(\\d)\\1"
"2208splitHere46","264550splitHere46","777xx"
"2209splitHere46","264550splitHere46","77xx"
"2210splitHere46","264550splitHere46","System.out.println(<doubleQuotes46>77433211<doubleQuotes46>.replaceAll(<doubleQuotes46>(\\d)\\1+<doubleQuotes46>, <doubleQuotes46>$1<doubleQuotes46>));<newline46mondego>"
"2211splitHere46","264550splitHere46","74321<newline46mondego>"
"2212splitHere46","264550splitHere46","String java.lang.String.replaceAll(String regex, String replacement)<newline46mondego>"
"2213splitHere46","264550splitHere46","str.replaceAll(regex, repl)"
"2214splitHere46","264550splitHere46","java.util.regex.Pattern.compile(regex).matcher(str).replaceAll(repl)<newline46mondego>"
"2215splitHere46","264550splitHere46","String.replaceAll()"
"2216splitHere46","264550splitHere46","replaceAll()"
"2217splitHere46","264550splitHere46","String aString = <doubleQuotes46>77433211<doubleQuotes46><newline46mondego>aString = aString.replaceAll(<doubleQuotes46>(\\d)\\1+<doubleQuotes46>, <doubleQuotes46>$1<doubleQuotes46>));<newline46mondego>"
"2218splitHere46","264591splitHere46","Cache"
"2219splitHere46","264591splitHere46","SoftHashMap"
"2220splitHere46","264591splitHere46","CacheBuilder.newBuilder().softKeys()"
"2221splitHere46","264591splitHere46","SoftHashMap"
"2222splitHere46","264591splitHere46","SoftHashMap"
"2223splitHere46","264591splitHere46","ConcurrentMap"
"2224splitHere46","264591splitHere46","java.util.Timer"
"2225splitHere46","264758splitHere46","public HashMap<String,String[]> getParameters() { ... }<newline46mondego>public setParameters(HashMap<String,String[]> parameters) { ... }<newline46mondego>"
"2226splitHere46","264833splitHere46","class ShutdownHook extends Thread<newline46mondego>{<newline46mondego>    public void run()<newline46mondego>    {<newline46mondego>        // perform shutdown actions<newline46mondego>    }<newline46mondego>}<newline46mondego><newline46mondego>// Then, somewhere in your code<newline46mondego><newline46mondego>Runtime.getRuntime().addShutdownHook(new ShutdownHook())<newline46mondego>"
"2227splitHere46","265013splitHere46","@WebService<newline46mondego>@SOAPBinding(style = Style.RPC)<newline46mondego>public interface ILegacyService extends IOtherLegacyService {<newline46mondego>    // the interface methods<newline46mondego>    ...<newline46mondego>}<newline46mondego><newline46mondego>@Stateless<newline46mondego>@Local(ILegacyService.class)<newline46mondego>@WebService(endpointInterface = <doubleQuotes46>...ILegacyService<doubleQuotes46>, ...)<newline46mondego>public class LegacyServiceImpl implements ILegacyService {<newline46mondego>    // implementation of ILegacyService<newline46mondego>}<newline46mondego>"
"2228splitHere46","265013splitHere46","ILegacyService"
"2229splitHere46","265013splitHere46","LegacyServiceImpl"
"2230splitHere46","265080splitHere46","protected void doGet(HttpServletRequest request,<newline46mondego>		HttpServletResponse response) throws ServletException, IOException {<newline46mondego>	PrintWriter writer = response.getWriter();<newline46mondego>	writer.write(<doubleQuotes46><doubleQuotes46> + request.getLocalPort());<newline46mondego>	writer.close();<newline46mondego>}<newline46mondego>"
"2231splitHere46","265080splitHere46","<specialEndpoints xmi:id=<doubleQuotes46>NamedEndPoint_1214751102556<doubleQuotes46> endPointName=<doubleQuotes46>WC_defaulthost<doubleQuotes46>><newline46mondego>  <endPoint xmi:id=<doubleQuotes46>EndPoint_1214751102556<doubleQuotes46> host=<doubleQuotes46>*<doubleQuotes46> port=<doubleQuotes46>9080<doubleQuotes46>/><newline46mondego>"
"2232splitHere46","265082splitHere46","n+1"
"2233splitHere46","265082splitHere46","d - round(d)"
"2234splitHere46","265082splitHere46","epsilon"
"2235splitHere46","265082splitHere46","d"
"2236splitHere46","265082splitHere46","(d - round(d)) * 10^n"
"2237splitHere46","265082splitHere46","epsilon"
"2238splitHere46","265082splitHere46","n"
"2239splitHere46","265082splitHere46","DoubleConverter"
"2240splitHere46","265082splitHere46","d"
"2241splitHere46","265270splitHere46","ln -s /usr/local/share/apache-ant-1.7.1/bin/ant /usr/bin/ant"
"2242splitHere46","265270splitHere46","ln -s /usr/share/ant/bin/ant /usr/bin/ant"
"2243splitHere46","266727splitHere46","1: double[] tmp = doubleArray;<newline46mondego>2: for (int i = 0, y = tmp.length; i < y; i++) {<newline46mondego>3:   double var = tmp[i];<newline46mondego>4:   someComplexCalculation(var);<newline46mondego>5: }<newline46mondego>"
"2244splitHere46","266727splitHere46","doubleArray"
"2245splitHere46","266727splitHere46","tmp"
"2246splitHere46","266727splitHere46","var"
"2247splitHere46","266786splitHere46","public static <T extends Comparable> int compareObject(T o1, T o2) {<newline46mondego>    if ((o1 instanceof String) && (o2 instanceof String))<newline46mondego>        return ((String) o1).toUpperCase().compareTo(((String) o2).toUpperCase());<newline46mondego>    else<newline46mondego>        return o1.compareTo(o2);<newline46mondego>}<newline46mondego>"
"2248splitHere46","266786splitHere46","public static <T extends Comparable<T>> int compareObject(T o1, T o2) {<newline46mondego>"
"2249splitHere46","266786splitHere46","public static <T extends Comparable<T>> int compareObject(T o1, T o2) {<newline46mondego>    if (((Object) o1 instanceof String) && ((Object) o2 instanceof String))<newline46mondego>        return ((String) (Object)o1).toUpperCase().compareTo(((String) (Object)o2).toUpperCase());<newline46mondego>    else<newline46mondego>        return o1.compareTo(o2);<newline46mondego>}<newline46mondego>"
"2250splitHere46","266786splitHere46","Object"
"2251splitHere46","267622splitHere46","atan(height/length)"
"2252splitHere46","267622splitHere46","atan2"
"2253splitHere46","267622splitHere46","y"
"2254splitHere46","267622splitHere46","x"
"2255splitHere46","267793splitHere46","class Joe"
"2256splitHere46","268713splitHere46","LinkedHashSet"
"2257splitHere46","268713splitHere46","List"
"2258splitHere46","268713splitHere46","List"
"2259splitHere46","268713splitHere46","List"
"2260splitHere46","268713splitHere46","collections15"
"2261splitHere46","268713splitHere46","List"
"2262splitHere46","268713splitHere46","SetUniqueList"
"2263splitHere46","268784splitHere46","MyHibernateUtils.begin();<newline46mondego>Settings settings = DaoSettings.load();<newline46mondego>// update setttings here<newline46mondego>DaoSettings.save(settings);<newline46mondego>MyHibernateUtils.commit();<newline46mondego>"
"2264splitHere46","268815splitHere46","// Call this sometime before you use your menus <newline46mondego>JPopupMenu.setDefaultLightWeightPopupEnabled(false)<newline46mondego>"
"2265splitHere46","268939splitHere46","super"
"2266splitHere46","269288splitHere46","<?xml version=<doubleQuotes46>1.0<doubleQuotes46> encoding=<doubleQuotes46>UTF-8<doubleQuotes46>?><newline46mondego>"
"2267splitHere46","269538splitHere46","public static void main(String[] args) {<newline46mondego>    Calendar c = new GregorianCalendar();<newline46mondego>    System.out.println(Locale.getDefault() + <doubleQuotes46>: <doubleQuotes46> + c.getFirstDayOfWeek());<newline46mondego>}<newline46mondego>"
"2268splitHere46","269538splitHere46","-Duser.language=en -Duser.country=US"
"2269splitHere46","269538splitHere46","en_US: 1"
"2270splitHere46","269538splitHere46","-Duser.language=en -Duser.country=GB"
"2271splitHere46","269538splitHere46","en_GB: 2"
"2272splitHere46","269647splitHere46","java.io.File"
"2273splitHere46","269647splitHere46","oldFile"
"2274splitHere46","269647splitHere46","newFile"
"2275splitHere46","269647splitHere46","oldFile.delete()<newline46mondego>newFile.renameTo(oldFile);<newline46mondego>"
"2276splitHere46","269684splitHere46","BigDecimal.ZERO"
"2277splitHere46","269684splitHere46","BigDecimal(<doubleQuotes46>0<doubleQuotes46>)"
"2278splitHere46","269684splitHere46","BigDecimal.ZERO"
"2279splitHere46","269684splitHere46","BigDecimal(<doubleQuotes46>0<doubleQuotes46>)"
"2280splitHere46","269684splitHere46","BigDecimal.ZERO"
"2281splitHere46","269714splitHere46","// Create the SpriteGraphics2D object<newline46mondego>     SpriteGraphics2D g = new SpriteGraphics2D(100, 100);<newline46mondego><newline46mondego>     // Draw on to the graphics object<newline46mondego>     Font font = new Font(<doubleQuotes46>Serif<doubleQuotes46>, Font.PLAIN, 16);<newline46mondego>     g.setFont(font);         <newline46mondego>     g.drawString(<doubleQuotes46>Test swf<doubleQuotes46>, 30, 30);         <newline46mondego>     g.draw(new Line2D.Double(5, 5, 50, 60));<newline46mondego>     g.draw(new Line2D.Double(50, 60, 150, 40));<newline46mondego>     g.draw(new Line2D.Double(150, 40, 160, 10));<newline46mondego><newline46mondego>     // Create a new empty movie<newline46mondego>     Movie m = new Movie();<newline46mondego>     m.version = 7;<newline46mondego>     m.bgcolor = new SetBackgroundColor(SwfUtils.colorToInt(255, 255, 255));<newline46mondego>     m.framerate = 12;<newline46mondego>     m.frames = new ArrayList(1);<newline46mondego>     m.frames.add(new Frame());<newline46mondego>     m.size = new Rect(11000, 8000);<newline46mondego><newline46mondego>     // Get the DefineSprite from the graphics object<newline46mondego>     DefineSprite tag = g.defineSprite(<doubleQuotes46>swf-test<doubleQuotes46>);<newline46mondego><newline46mondego>     // Place the DefineSprite on the first frame<newline46mondego>     Frame frame1 = (Frame) m.frames.get(0);<newline46mondego>     Matrix mt = new Matrix(0, 0);<newline46mondego>     frame1.controlTags.add(new PlaceObject(mt, tag, 1, null));<newline46mondego><newline46mondego>     TagEncoder tagEncoder = new TagEncoder();<newline46mondego>     MovieEncoder movieEncoder = new MovieEncoder(tagEncoder);<newline46mondego>     movieEncoder.export(m);<newline46mondego><newline46mondego>     //Write to file<newline46mondego>     FileOutputStream fos = new FileOutputStream(new File(<doubleQuotes46>/test.swf<doubleQuotes46>));<newline46mondego>     tagEncoder.writeTo(fos);<newline46mondego>"
"2282splitHere46","269735splitHere46","(long)Math.floor(a + 0.5d)"
"2283splitHere46","269891splitHere46","ÃX"
"2284splitHere46","269891splitHere46","X"
"2285splitHere46","270026splitHere46","append"
"2286splitHere46","270026splitHere46","false"
"2287splitHere46","270089splitHere46","sudo apt-get install -y ant openjdk-6-jdk libjogl-java<newline46mondego>"
"2288splitHere46","270137splitHere46","<persistence ...><newline46mondego>   <persistence-unit ...><newline46mondego>      <provider>org.hibernate.ejb.HibernatePersistence</provider> <---- explicit setting<newline46mondego>      ....<newline46mondego>   </persistence-unit><newline46mondego></persistence><newline46mondego>"
"2289splitHere46","270373splitHere46","if (ev.modifiers & Event.ALT_MASK != 0) {<newline46mondego>    // middle button was pressed<newline46mondego>}<newline46mondego>"
"2290splitHere46","270398splitHere46","/src"
"2291splitHere46","270398splitHere46","/src/resources"
"2292splitHere46","270398splitHere46","getResource(<doubleQuotes46>/resources/image.png<doubleQuotes46>)"
"2293splitHere46","270398splitHere46","com.mycompany"
"2294splitHere46","270398splitHere46","com.mycompany.Foo"
"2295splitHere46","270398splitHere46","getResource(<doubleQuotes46>image.png<doubleQuotes46>)"
"2296splitHere46","270467splitHere46","Object.clone()"
"2297splitHere46","270467splitHere46","Object.clone()"
"2298splitHere46","270467splitHere46","Object.clone()"
"2299splitHere46","270490splitHere46","<plugin><newline46mondego>    <groupId>org.codehaus.mojo</groupId><newline46mondego>    <artifactId>build-helper-maven-plugin</artifactId><newline46mondego>    <executions><newline46mondego>        <execution><newline46mondego>            <phase>generate-sources</phase><newline46mondego>            <goals><goal>add-source</goal></goals><newline46mondego>            <configuration><newline46mondego>                <sources><newline46mondego>                    <source>src/main/generated</source><newline46mondego>                </sources><newline46mondego>            </configuration><newline46mondego>        </execution><newline46mondego>    </executions><newline46mondego></plugin><newline46mondego>"
"2300splitHere46","270922splitHere46","// Write data<newline46mondego>String str=<doubleQuotes46>foo<doubleQuotes46>;<newline46mondego>byte[] data=str.getBytes(<doubleQuotes46>UTF-8<doubleQuotes46>);<newline46mondego>out.writeInt(data.length);<newline46mondego>out.write(data);<newline46mondego><newline46mondego>// Read data<newline46mondego>int length=in.readInt();<newline46mondego>byte[] data=new byte[length];<newline46mondego>in.readFully(data);<newline46mondego>String str=new String(data,<doubleQuotes46>UTF-8<doubleQuotes46>);<newline46mondego>"
"2301splitHere46","271156splitHere46","import java.util.*;<newline46mondego>import java.lang.reflect.*;<newline46mondego><newline46mondego>class Any {<newline46mondego>    static int one = 1;<newline46mondego>    static int two = 2;<newline46mondego>    static int three = 3;<newline46mondego><newline46mondego>    public static void main( String [] args ) {<newline46mondego>          for( int i : magicMethod( Any.class ) ){<newline46mondego>              System.out.println( i );<newline46mondego>          }<newline46mondego>    }<newline46mondego><newline46mondego>    public static Integer[] magicMethod(Class<Any> c) {<newline46mondego>        List<Integer> list  = new ArrayList<Integer>();<newline46mondego>        Field[] fields = c.getDeclaredFields();<newline46mondego>        for (Field field : fields) {<newline46mondego>        	try {<newline46mondego>        		if (field.getType().equals(int.class) && Modifier.isStatic(field.getModifiers())) {<newline46mondego>        			list.add(field.getInt(null));<newline46mondego>        		}<newline46mondego>        	}<newline46mondego>        	catch (IllegalAccessException e) {<newline46mondego>        		// Handle exception here<newline46mondego>        	}<newline46mondego>        }<newline46mondego>        return list.toArray(new Integer[list.size()]);<newline46mondego>    }<newline46mondego> }<newline46mondego>"
"2302splitHere46","271400splitHere46","Set< String > keys = cData.getCompositeType().keySet();<newline46mondego>"
"2303splitHere46","271556splitHere46","public void buidDog() {<newline46mondego>   Dog newDog = new Dog();<newline46mondego>   Tail newTail = new Tail();<newline46mondego>   newDog.tail = newTail;<newline46mondego>   newTail.dog = newDog;<newline46mondego>}<newline46mondego>"
"2304splitHere46","271623splitHere46","java ...<newline46mondego>"
"2305splitHere46","271623splitHere46","JAVA6HOME"
"2306splitHere46","271623splitHere46","C:\java\java6"
"2307splitHere46","271623splitHere46","%JAVA6HOME%\bin\java ...<newline46mondego>"
"2308splitHere46","271642splitHere46","char const* greet()<newline46mondego>{<newline46mondego>  return <doubleQuotes46>hello, world<doubleQuotes46>;<newline46mondego>}<newline46mondego>"
"2309splitHere46","271642splitHere46","#include <boost/python.hpp><newline46mondego><newline46mondego>BOOST_PYTHON_MODULE(hello_ext)<newline46mondego>{<newline46mondego>  using namespace boost::python;<newline46mondego>  def(<doubleQuotes46>greet<doubleQuotes46>, greet);<newline46mondego>}<newline46mondego>"
"2310splitHere46","271642splitHere46",">>> import hello_ext<newline46mondego>>>> print hello.greet()<newline46mondego>hello, world<newline46mondego>"
"2311splitHere46","271824splitHere46","public class TestInvisibleObject{<newline46mondego>  public static class PrintWhenFinalized{<newline46mondego>    private String s;<newline46mondego>    public PrintWhenFinalized(String s){<newline46mondego>      System.out.println(<doubleQuotes46>Constructing from <doubleQuotes46>+s);<newline46mondego>      this.s = s;<newline46mondego>    }<newline46mondego>    protected void finalize() throws Throwable {<newline46mondego>      System.out.println(<doubleQuotes46>Finalizing from <doubleQuotes46>+s);<newline46mondego>    }   <newline46mondego>  }<newline46mondego>  public static void main(String[] args) {<newline46mondego>    try {<newline46mondego>        PrintWhenFinalized foo = new PrintWhenFinalized(<doubleQuotes46>main<doubleQuotes46>);<newline46mondego>    } catch (Exception e) {<newline46mondego>        // whatever<newline46mondego>    }<newline46mondego>    while (true) {<newline46mondego>      // Provoke garbage-collection by allocating lots of memory<newline46mondego>      byte[] o = new byte[1024];<newline46mondego>    } <newline46mondego>  }<newline46mondego>}<newline46mondego>"
"2312splitHere46","271874splitHere46","assert"
"2313splitHere46","271874splitHere46","assert *<condition>*<newline46mondego>"
"2314splitHere46","271874splitHere46","assert *<condition>* : *<object>*<newline46mondego>"
"2315splitHere46","271874splitHere46","<object>"
"2316splitHere46","271874splitHere46","toString()"
"2317splitHere46","271874splitHere46","assert"
"2318splitHere46","271874splitHere46","Error"
"2319splitHere46","271874splitHere46","AssertionError"
"2320splitHere46","271874splitHere46","-ea"
"2321splitHere46","271874splitHere46","public interface Action {<newline46mondego>  void doSomething();<newline46mondego>}<newline46mondego><newline46mondego>public interface Parser {<newline46mondego>  Action findAction(String userInput);<newline46mondego>}<newline46mondego>"
"2322splitHere46","271874splitHere46","public class MyParser implements Parser {<newline46mondego>  private static Action DO_NOTHING = new Action() {<newline46mondego>    public void doSomething() { /* do nothing */ }<newline46mondego>  };<newline46mondego><newline46mondego>  public Action findAction(String userInput) {<newline46mondego>    // ...<newline46mondego>    if ( /* we can't find any actions */ ) {<newline46mondego>      return DO_NOTHING;<newline46mondego>    }<newline46mondego>  }<newline46mondego>}<newline46mondego>"
"2323splitHere46","271874splitHere46","Parser parser = ParserFactory.getParser();<newline46mondego>if (parser == null) {<newline46mondego>  // now what?<newline46mondego>  // this would be an example of where null isn't (or shouldn't be) a valid response<newline46mondego>}<newline46mondego>Action action = parser.findAction(someInput);<newline46mondego>if (action == null) {<newline46mondego>  // do nothing<newline46mondego>} else {<newline46mondego>  action.doSomething();<newline46mondego>}<newline46mondego>"
"2324splitHere46","271874splitHere46","ParserFactory.getParser().findAction(someInput).doSomething();<newline46mondego>"
"2325splitHere46","272048splitHere46","<newline46mondego> String DB_RESOURCE=<doubleQuotes46>DATABASE<doubleQuotes46>;<newline46mondego> this.dbResource = getResource(this.DB_RESOURCE);<newline46mondego> Oracle oracle = new Oracle(this.dbResource);<newline46mondego> Connection conn = oracle.getConnection();<newline46mondego>"
"2326splitHere46","272072splitHere46","Context context = new InitialContext();<newline46mondego>DataSource ds = (DataSource)context.lookup(<doubleQuotes46>mydatasource<doubleQuotes46>);<newline46mondego>"
"2327splitHere46","272747splitHere46","RuntimeException"
"2328splitHere46","272747splitHere46","ServletContextListener.contextInitialized"
"2329splitHere46","273001splitHere46","abstract class Parser {<newline46mondego>    public abstract void parse( ... );<newline46mondego>    protected String readLine() { ... }<newline46mondego>}<newline46mondego><newline46mondego>class SpecialPurposeParser extends Parser {<newline46mondego>    public void parse( ... ) { <newline46mondego>        // ... special stuff<newline46mondego>        readLine();<newline46mondego>        // ... more stuff<newline46mondego>    }<newline46mondego>}<newline46mondego>"
"2330splitHere46","273001splitHere46","class SingleProcessReadingDecorator extends Parser {<newline46mondego>    private Parser parser;<newline46mondego>    private String processId;<newline46mondego>    public SingleProcessReadingDecorator( Parser parser, String processId ) {<newline46mondego>        this.parser = parser;<newline46mondego>        this.processId = processId;<newline46mondego>    }<newline46mondego><newline46mondego>    public void parse( ... ) { parser.parse( ... ); }<newline46mondego><newline46mondego>    public String readLine() {<newline46mondego>        String text = super.readLine();<newline46mondego>        if( /*text is for processId */ ) { <newline46mondego>            return text; <newline46mondego>        }<newline46mondego>        else {<newline46mondego>            //keep readLine'ing until you find the next line and then return it<newline46mondego>            return this.readLine();<newline46mondego>        }<newline46mondego>    }<newline46mondego>"
"2331splitHere46","273001splitHere46","//old way<newline46mondego>Parser parser = new SpecialPurposeParser();<newline46mondego>//changes to<newline46mondego>Parser parser = new SingleProcessReadingDecorator( new SpecialPurposeParser(), <doubleQuotes46>process1234<doubleQuotes46> );<newline46mondego>"
"2332splitHere46","273488splitHere46","assert x > 0 : <doubleQuotes46>x is greater than zero, x=<doubleQuotes46> + x;<newline46mondego>"
"2333splitHere46","273634splitHere46","<hibernate-configuration><newline46mondego>    <session-factory><newline46mondego>        .<newline46mondego>        .<newline46mondego>        <property name=<doubleQuotes46>connection.driver_class<doubleQuotes46>>org.postgresql.Driver</property><newline46mondego>        .<newline46mondego>    </session-factory><newline46mondego></hibernate-configuration><newline46mondego>"
"2334splitHere46","274174splitHere46","static final String myproperty=<doubleQuotes46>myvalue<doubleQuotes46>;"
"2335splitHere46","274234splitHere46","public double cost(){<newline46mondego>     return 3.45;<newline46mondego>}<newline46mondego>"
"2336splitHere46","274234splitHere46","public double cost(){<newline46mondego>    return 3.80;<newline46mondego>}<newline46mondego>"
"2337splitHere46","274234splitHere46","public abstract class Item{<newline46mondego>    public abstract double cost();<newline46mondego>}<newline46mondego>"
"2338splitHere46","274234splitHere46","public class Coffee extends Item{<newline46mondego>    public double cost(){<newline46mondego>       return 3.45;<newline46mondego>    }<newline46mondego>}<newline46mondego>"
"2339splitHere46","274234splitHere46","public abstract class CoffeeDecorator extends Item{<newline46mondego>     private Item item;<newline46mondego>     ...<newline46mondego>}<newline46mondego>"
"2340splitHere46","274234splitHere46","public class Mocha extends CoffeeDecorator{<newline46mondego><newline46mondego>   public double cost(){<newline46mondego>     return item.cost() + 0.5;<newline46mondego>   }<newline46mondego><newline46mondego>}<newline46mondego>"
"2341splitHere46","274234splitHere46","public class Cream extends CoffeeDecorator{<newline46mondego><newline46mondego>   public double cost(){<newline46mondego>     return item.cost() + 0.35;<newline46mondego>   }<newline46mondego><newline46mondego>}<newline46mondego>"
"2342splitHere46","274234splitHere46","Item drink = new Cream(new Mocha(new Coffee))); //Mocha with cream<newline46mondego>"
"2343splitHere46","274234splitHere46","Item drink = new Cream(new Mocha(new Cream(new Coffee))));//Mocha with double cream<newline46mondego>"
"2344splitHere46","274849splitHere46","<strong>org.perl.inline.java.InlinePerlCaller</strong>"
"2345splitHere46","274849splitHere46","use Inline Java => <<END ;<newline46mondego>import java.util.* ;<newline46mondego>import org.perl.inline.java.* ;<newline46mondego><newline46mondego>class Pod_regexp extends InlineJavaPerlCaller {<newline46mondego>    public Pod_regexp() throws InlineJavaException {<newline46mondego>    }<newline46mondego><newline46mondego>    public boolean match(String target, String pattern)<newline46mondego>        throws InlineJavaException {<newline46mondego>        try {<newline46mondego>            String m = (String)CallPerlSub(<doubleQuotes46>main::regexp<doubleQuotes46>,<newline46mondego>            new Object [] {target, pattern}) ;<newline46mondego><newline46mondego>            if (m.equals(<doubleQuotes46>1<doubleQuotes46>)){<newline46mondego>            return true ;<newline46mondego>        }<newline46mondego>    }<newline46mondego>    catch (InlineJavaPerlException pe){<newline46mondego>        // $@ is in pe.GetObject()<newline46mondego>    }<newline46mondego><newline46mondego>    return false ;<newline46mondego>    }<newline46mondego>}<newline46mondego>END<newline46mondego><newline46mondego>my $re = new Pod_regexp() ;<newline46mondego>my $match = $re->match(<doubleQuotes46>Inline::Java<doubleQuotes46>, <doubleQuotes46>^Inline<doubleQuotes46>) ;<newline46mondego>print($match . <doubleQuotes46>n<doubleQuotes46>) ; # prints 1<newline46mondego><newline46mondego>sub regexp {<newline46mondego>    my $target = shift ;<newline46mondego>    my $pattern = shift ;<newline46mondego><newline46mondego>    return ($target =~ /$pattern/) ;<newline46mondego>}<newline46mondego>"
"2346splitHere46","275353splitHere46","@Groups({ <doubleQuotes46>myGroup1<doubleQuotes46>, <doubleQuotes46>myGroup2<doubleQuotes46>})<newline46mondego>public class MyTestCase {<newline46mondego>    @Test<newline46mondego>    @Groups(<doubleQuotes46>aMethodLevelGroup<doubleQuotes46>)<newline46mondego>    public void myTest() {<newline46mondego>    }<newline46mondego>}<newline46mondego>"
"2347splitHere46","275785splitHere46","public class RoadPanel extends JPanel {<newline46mondego><newline46mondego>    @Override<newline46mondego>    public void paintComponent(Graphics g) {<newline46mondego>        super.paintComponent(g);<newline46mondego>        // your drawing code here<newline46mondego>    }<newline46mondego>}<newline46mondego>"
"2348splitHere46","275799splitHere46","static String intToString(int num, int digits) {<newline46mondego>    assert digits > 0 : <doubleQuotes46>Invalid number of digits<doubleQuotes46>;<newline46mondego><newline46mondego>    // create variable length array of zeros<newline46mondego>    char[] zeros = new char[digits];<newline46mondego>    Arrays.fill(zeros, '0');<newline46mondego>    // format number as String<newline46mondego>    DecimalFormat df = new DecimalFormat(String.valueOf(zeros));<newline46mondego><newline46mondego>    return df.format(num);<newline46mondego>}<newline46mondego>"
"2349splitHere46","276196splitHere46","import java.util.regex.*;<newline46mondego>import java.util.LinkedList;<newline46mondego><newline46mondego>public class Splitter {<newline46mondego>    private static final Pattern DEFAULT_PATTERN = Pattern.compile(<doubleQuotes46>\\s+<doubleQuotes46>);<newline46mondego><newline46mondego>    private Pattern pattern;<newline46mondego>    private boolean keep_delimiters;<newline46mondego><newline46mondego>    public Splitter(Pattern pattern, boolean keep_delimiters) {<newline46mondego>        this.pattern = pattern;<newline46mondego>        this.keep_delimiters = keep_delimiters;<newline46mondego>    }<newline46mondego>    public Splitter(String pattern, boolean keep_delimiters) {<newline46mondego>        this(Pattern.compile(pattern==null?<doubleQuotes46><doubleQuotes46>:pattern), keep_delimiters);<newline46mondego>    }<newline46mondego>    public Splitter(Pattern pattern) { this(pattern, true); }<newline46mondego>    public Splitter(String pattern) { this(pattern, true); }<newline46mondego>    public Splitter(boolean keep_delimiters) { this(DEFAULT_PATTERN, keep_delimiters); }<newline46mondego>    public Splitter() { this(DEFAULT_PATTERN); }<newline46mondego><newline46mondego>    public String[] split(String text) {<newline46mondego>        if (text == null) {<newline46mondego>            text = <doubleQuotes46><doubleQuotes46>;<newline46mondego>        }<newline46mondego><newline46mondego>        int last_match = 0;<newline46mondego>        LinkedList<String> splitted = new LinkedList<String>();<newline46mondego><newline46mondego>        Matcher m = this.pattern.matcher(text);<newline46mondego><newline46mondego>        while (m.find()) {<newline46mondego><newline46mondego>            splitted.add(text.substring(last_match,m.start()));<newline46mondego><newline46mondego>            if (this.keep_delimiters) {<newline46mondego>                splitted.add(m.group());<newline46mondego>            }<newline46mondego><newline46mondego>            last_match = m.end();<newline46mondego>        }<newline46mondego><newline46mondego>        splitted.add(text.substring(last_match));<newline46mondego><newline46mondego>        return splitted.toArray(new String[splitted.size()]);<newline46mondego>    }<newline46mondego><newline46mondego>    public static void main(String[] argv) {<newline46mondego>        if (argv.length != 2) {<newline46mondego>            System.err.println(<doubleQuotes46>Syntax: java Splitter <pattern> <text><doubleQuotes46>);<newline46mondego>            return;<newline46mondego>        }<newline46mondego><newline46mondego>        Pattern pattern = null;<newline46mondego>        try {<newline46mondego>            pattern = Pattern.compile(argv[0]);<newline46mondego>        }<newline46mondego>        catch (PatternSyntaxException e) {<newline46mondego>            System.err.println(e);<newline46mondego>            return;<newline46mondego>        }<newline46mondego><newline46mondego>        Splitter splitter = new Splitter(pattern);<newline46mondego><newline46mondego>        String text = argv[1];<newline46mondego>        int counter = 1;<newline46mondego>        for (String part : splitter.split(text)) {<newline46mondego>            System.out.printf(<doubleQuotes46>Part %d: \<doubleQuotes46>%s\<doubleQuotes46>\n<doubleQuotes46>, counter++, part);<newline46mondego>        }<newline46mondego>    }<newline46mondego>}<newline46mondego><newline46mondego>/*<newline46mondego>    Example:<newline46mondego>    > java Splitter <doubleQuotes46>\W+<doubleQuotes46> <doubleQuotes46>Hello World!<doubleQuotes46><newline46mondego>    Part 1: <doubleQuotes46>Hello<doubleQuotes46><newline46mondego>    Part 2: <doubleQuotes46> <doubleQuotes46><newline46mondego>    Part 3: <doubleQuotes46>World<doubleQuotes46><newline46mondego>    Part 4: <doubleQuotes46>!<doubleQuotes46><newline46mondego>    Part 5: <doubleQuotes46><doubleQuotes46><newline46mondego>*/<newline46mondego>"
"2350splitHere46","276361splitHere46","* Adding<newline46mondego>"
"2351splitHere46","276361splitHere46","* Removing<newline46mondego>* Retrieving<newline46mondego>* Sorting<newline46mondego>* Overall speed<newline46mondego>* Overall memory usage<newline46mondego>"
"2352splitHere46","276569splitHere46","String input = <doubleQuotes46>Input text, with words, punctuation, etc. Well, it's rather short.<doubleQuotes46>;<newline46mondego>Pattern p = Pattern.compile(<doubleQuotes46>[\\w']+<doubleQuotes46>);<newline46mondego>Matcher m = p.matcher(input);<newline46mondego><newline46mondego>while ( m.find() ) {<newline46mondego>    System.out.println(input.substring(m.start(), m.end()));<newline46mondego>}<newline46mondego>"
"2353splitHere46","276569splitHere46","[\w']+"
"2354splitHere46","277266splitHere46","available"
"2355splitHere46","277266splitHere46","public void copyStream(InputStream input, OutputStream output) throws IOException<newline46mondego>{<newline46mondego>    byte[] buffer = new byte[32*1024];<newline46mondego>    int bytesRead;<newline46mondego>    while ((bytesRead = input.read(buffer, 0, buffer.length)) > 0)<newline46mondego>    {<newline46mondego>        output.write(buffer, 0, bytesRead);<newline46mondego>    }<newline46mondego>}<newline46mondego>"
"2356splitHere46","277287splitHere46","grant {<newline46mondego>    permission java.security.AllPermission;<newline46mondego>};<newline46mondego>"
"2357splitHere46","277411splitHere46","MyPlugin.getDefault().getModel()<newline46mondego>"
"2358splitHere46","277424splitHere46","\p{javaWhitespace}+"
"2359splitHere46","277512splitHere46","public static Object unmarshallWithFilter(Unmarshaller unmarshaller,<newline46mondego>java.io.File source) throws FileNotFoundException, JAXBException <newline46mondego>{<newline46mondego>    FileReader fr = null;<newline46mondego>    try {<newline46mondego>        fr = new FileReader(source);<newline46mondego>        XMLReader reader = new NamespaceFilterXMLReader();<newline46mondego>        InputSource is = new InputSource(fr);<newline46mondego>        SAXSource ss = new SAXSource(reader, is);<newline46mondego>        return unmarshaller.unmarshal(ss);<newline46mondego>    } catch (SAXException e) {<newline46mondego>        //not technically a jaxb exception, but close enough<newline46mondego>        throw new JAXBException(e);<newline46mondego>    } catch (ParserConfigurationException e) {<newline46mondego>        //not technically a jaxb exception, but close enough<newline46mondego>        throw new JAXBException(e);<newline46mondego>    } finally {<newline46mondego>        FileUtil.close(fr); //replace with this some safe close method you have<newline46mondego>    }<newline46mondego>}<newline46mondego>"
"2360splitHere46","277838splitHere46","public List<String> methodWithValidation(Object input) {<newline46mondego>    List<String> errors = new java.util.ArrayList<String>();<newline46mondego>    //various validation tests, each adding a message on fail<newline46mondego><newline46mondego>    return errors;<newline46mondego>}<newline46mondego>"
"2361splitHere46","277838splitHere46","List<String> errors = bean.methodWithValidation(object);<newline46mondego>if(!errors.isEmpty()) {<newline46mondego>    //error logic<newline46mondego>} else {<newline46mondego>   //continue<newline46mondego>}<newline46mondego>"
"2362splitHere46","278021splitHere46","RandomAccessFile in = new RandomAccessFile(<doubleQuotes46>filename<doubleQuotes46>, <doubleQuotes46>r<doubleQuotes46>);<newline46mondego>int version = in.readInt();<newline46mondego>byte type = in.readByte();<newline46mondego>int beginOfData = in.readInt();<newline46mondego>byte[] tempId;<newline46mondego>in.read(tempId, 0, 16);<newline46mondego>String id = new String(tempId);<newline46mondego>"
"2363splitHere46","278875splitHere46","Locale l = Locale.ITALY;<newline46mondego>System.out.println(l.getDisplayCountry() + <doubleQuotes46>: <doubleQuotes46> + l.getDisplayLanguage());<newline46mondego>System.out.println(l.getDisplayCountry(l) + <doubleQuotes46>: <doubleQuotes46> + l.getDisplayLanguage(l));<newline46mondego>"
"2364splitHere46","278875splitHere46","Italy: Italian <newline46mondego>Italia: italiano<newline46mondego>"
"2365splitHere46","279233splitHere46","public interface CountObserver {<newline46mondego><newline46mondego> public void updateCount(String className);<newline46mondego> public int getCount(String className);<newline46mondego>}<newline46mondego><newline46mondego>public class CentralObserver implements CountObserver {<newline46mondego><newline46mondego> private int aCount;<newline46mondego> private int bCount;<newline46mondego><newline46mondego> public void updateCount(String className) {<newline46mondego><newline46mondego> //There's probably a better way to do this than using<newline46mondego> //all these if-elses, but you'll get the idea.<newline46mondego><newline46mondego>  if (className.equals(<doubleQuotes46>AclassName<doubleQuotes46>)) {<newline46mondego>   aCount++;<newline46mondego>  }<newline46mondego>  else if (className.equals(<doubleQuotes46>BclassName<doubleQuotes46>)) {<newline46mondego>   bCount++;<newline46mondego>  }<newline46mondego> }<newline46mondego><newline46mondego> public int getCount(String className) {<newline46mondego><newline46mondego>  if (className.equals(<doubleQuotes46>AclassName<doubleQuotes46>)) {<newline46mondego>   return aCount;<newline46mondego>  }<newline46mondego>  else if (className.equals(<doubleQuotes46>BclassName<doubleQuotes46>)) {<newline46mondego>   return bCount;<newline46mondego>  }<newline46mondego>}<newline46mondego><newline46mondego>class A implements Listener {<newline46mondego><newline46mondego> CountObserver countObserver;<newline46mondego><newline46mondego> public void registerObserver (CountObserver countObserver) {<newline46mondego><newline46mondego>  this.countObserver = countObserver;<newline46mondego> }<newline46mondego><newline46mondego> public void onEvent(char e) {<newline46mondego><newline46mondego>  if(e == 'a') {<newline46mondego><newline46mondego>   countObserver.updateCount (this.getClass.getName);<newline46mondego>  }<newline46mondego> }<newline46mondego><newline46mondego>}<newline46mondego><newline46mondego>//Same thing for B or any other class implementing Listener. Your Listener interface should, of <newline46mondego><newline46mondego>//course, have a method signature for the registerObserver method which all the listener classes <newline46mondego><newline46mondego>//will implement.<newline46mondego><newline46mondego>class Run {<newline46mondego><newline46mondego> private A a;<newline46mondego> private B b; <newline46mondego> private CountObserver centralObserver;<newline46mondego><newline46mondego> public runProgram () {<newline46mondego><newline46mondego>  centralObserver = new CentralObserver();<newline46mondego>  a.registerObserver(centralObserver);<newline46mondego>  b.registerObserver(centralObserver);<newline46mondego><newline46mondego> //run OnEvent method for A a couple of times, then for B<newline46mondego><newline46mondego> }<newline46mondego><newline46mondego> public int getAcount () {<newline46mondego><newline46mondego> return centralObserver.getCount(a.getClass.getName());<newline46mondego> }<newline46mondego><newline46mondego> public int getBcount () {<newline46mondego><newline46mondego> return centralObserver.getCount(b.getClass.getName());<newline46mondego> }<newline46mondego>} <newline46mondego> //To get the sum of all the counts just call getAcount + getBcount. Of course, you can always  add more listeners and more getXCount methods<newline46mondego>"
"2366splitHere46","279321splitHere46","response"
"2367splitHere46","279321splitHere46","RemoteResponse"
"2368splitHere46","279321splitHere46","task"
"2369splitHere46","279321splitHere46","response"
"2370splitHere46","279321splitHere46","task"
"2371splitHere46","279321splitHere46","task"
"2372splitHere46","279321splitHere46","close"
"2373splitHere46","279321splitHere46","release"
"2374splitHere46","279321splitHere46","task"
"2375splitHere46","279321splitHere46","task"
"2376splitHere46","279321splitHere46","get"
"2377splitHere46","279499splitHere46","[^,]+\([^\)]+\)|[^,]+,<newline46mondego>"
"2378splitHere46","279499splitHere46","a,b,c,DATETOSTRING(date_attr_name,'mm/dd/yyyy'),f,gg,dr(tt,t,),fff<newline46mondego>"
"2379splitHere46","279499splitHere46","a,b,c,DATETOSTRING(date_attr_name,'mm/dd/yyyy'),f,gg,dr(tt,t,),fff,<newline46mondego>"
"2380splitHere46","279499splitHere46","EXP(arg1, EXP2(ARG11,ARG22), ARG2)<newline46mondego>"
"2381splitHere46","279499splitHere46","[^,]+\([^\)]+\)|[^,]),"
"2382splitHere46","279499splitHere46","attrs"
"2383splitHere46","279522splitHere46","class Foo<newline46mondego>{<newline46mondego>     private final String myvar;<newline46mondego><newline46mondego>     public Foo(final String initialValue)<newline46mondego>     {<newline46mondego>         this.myvar = initialValue;<newline46mondego>     }<newline46mondego><newline46mondego>     public String getValue()<newline46mondego>     {<newline46mondego>         return this.myvar;<newline46mondego>     }<newline46mondego>}<newline46mondego>"
"2384splitHere46","279522splitHere46","Foo"
"2385splitHere46","279522splitHere46","getValue()"
"2386splitHere46","279522splitHere46","Foo"
"2387splitHere46","279522splitHere46","StringBuilder"
"2388splitHere46","279522splitHere46","String"
"2389splitHere46","279522splitHere46","getValue()"
"2390splitHere46","279522splitHere46","StringBuilder"
"2391splitHere46","279522splitHere46","Foo"
"2392splitHere46","279798splitHere46","g"
"2393splitHere46","279798splitHere46","null"
"2394splitHere46","279798splitHere46","paintComponent(Graphics g)"
"2395splitHere46","279798splitHere46","public class Gallow extends JPanel {<newline46mondego>    public paintComponent(Graphics g){<newline46mondego>        g.fillOval(10, 20, 40, 25);       <newline46mondego>    }<newline46mondego>}<newline46mondego>"
"2396splitHere46","280745splitHere46","<% Integer offset = request.getParameter(<doubleQuotes46>offset<doubleQuotes46>) != null && request.getParameter(<doubleQuotes46>offset<doubleQuotes46>).length() > 0 ? new Integer(request.getParameter(<doubleQuotes46>offset<doubleQuotes46>)) : new Integer(0); %><newline46mondego>"
"2397splitHere46","281163splitHere46","get"
"2398splitHere46","281163splitHere46","volatile"
"2399splitHere46","281163splitHere46","set"
"2400splitHere46","281163splitHere46","volatile"
"2401splitHere46","281163splitHere46","lazySet"
"2402splitHere46","281163splitHere46","volatile"
"2403splitHere46","281374splitHere46","* A Java Virtual Machine implemented in .NET<newline46mondego>* A .NET implementation of the Java class libraries<newline46mondego>* Tools that enable Java and .NET interoperability<newline46mondego>"
"2404splitHere46","281505splitHere46","public abstract class AbstractObject {<newline46mondego>    protected string id;<newline46mondego>    public string Id<newline46mondego>    {<newline46mondego>        get { return id; }<newline46mondego>    }<newline46mondego>}<newline46mondego><newline46mondego>public class ConcreteObject : AbstractObject<newline46mondego>{<newline46mondego>    public new string Id<newline46mondego>    {<newline46mondego>        get { return base.Id; }<newline46mondego>        set { id = value; }<newline46mondego>    }<newline46mondego>}<newline46mondego>"
"2405splitHere46","281532splitHere46","JLabel"
"2406splitHere46","281532splitHere46","JLabel"
"2407splitHere46","281532splitHere46","JEditorPane"
"2408splitHere46","281532splitHere46","addHyperlinkListener"
"2409splitHere46","281532splitHere46","HyperlinkListener"
"2410splitHere46","281619splitHere46","Writer.getDefaultWriteParam()"
"2411splitHere46","281619splitHere46","ImageWriteParam"
"2412splitHere46","281619splitHere46","param"
"2413splitHere46","281619splitHere46","ImageWriter"
"2414splitHere46","281619splitHere46","writer.write(bi);<newline46mondego>"
"2415splitHere46","281619splitHere46","writer.write(null, new IIOImage(bi, null, null), param);<newline46mondego>"
"2416splitHere46","281841splitHere46","test"
"2417splitHere46","281841splitHere46","Test"
"2418splitHere46","281841splitHere46","TestCase"
"2419splitHere46","281841splitHere46","AbstractIntegrationTestCase"
"2420splitHere46","281841splitHere46","Spring"
"2421splitHere46","281841splitHere46","WebApplicationContext"
"2422splitHere46","281841splitHere46","test"
"2423splitHere46","281841splitHere46","IntTest"
"2424splitHere46","281841splitHere46","IntegrationTest"
"2425splitHere46","281841splitHere46","test"
"2426splitHere46","281841splitHere46","test"
"2427splitHere46","281841splitHere46","test"
"2428splitHere46","281977splitHere46","public static void translate(StringBuilder str, char[] table)<newline46mondego>  {<newline46mondego>    for (int idx = 0; idx < str.length(); ++idx) {<newline46mondego>      char ch = str.charAt(idx);<newline46mondego>      if (ch < table.length) {<newline46mondego>        ch = table[ch];<newline46mondego>        str.setCharAt(idx, ch);<newline46mondego>      }<newline46mondego>    }<newline46mondego>  }<newline46mondego>"
"2429splitHere46","281977splitHere46","str"
"2430splitHere46","281977splitHere46","public static void translate(StringBuilder str, Map<Character, Character> table)<newline46mondego>  {<newline46mondego>    for (int idx = 0; idx < str.length(); ++idx) {<newline46mondego>      char ch = str.charAt(idx);<newline46mondego>      Character conversion = table.get(ch);<newline46mondego>      if (conversion != null) <newline46mondego>        str.setCharAt(idx, conversion);<newline46mondego>    }<newline46mondego>  }<newline46mondego>"
"2431splitHere46","281977splitHere46","StringBuilder"
"2432splitHere46","282135splitHere46","* public PreparedStatement prepareStatement(String sql)<newline46mondego>* public PreparedStatement prepareStatement(String sql, int resultSetType, int resultSetConcurrency)<newline46mondego>"
"2433splitHere46","282469splitHere46","bool result = obj.GetType().IsAssignableFrom(otherObj.GetType());<newline46mondego>"
"2434splitHere46","282558splitHere46","ActionListener listener = something;<newline46mondego><newline46mondego>for (int i = 65; i < 91; i++){<newline46mondego>     JButton button = new JButton(<doubleQuotes46><html><center><doubleQuotes46> + (char)i);<newline46mondego>     button.addActionListener( listener );<newline46mondego>     alphabetPanel.add(button);<newline46mondego>}<newline46mondego>"
"2435splitHere46","282680splitHere46","SELECT s FROM Animal s WHERE s.atype = :atype<newline46mondego>"
"2436splitHere46","282867splitHere46","N"
"2437splitHere46","282867splitHere46","N"
"2438splitHere46","282867splitHere46","make"
"2439splitHere46","282867splitHere46","color"
"2440splitHere46","282867splitHere46","license plate"
"2441splitHere46","282867splitHere46","parking location"
"2442splitHere46","282867splitHere46","SELECT license, location FROM cars WHERE make=<doubleQuotes46>$(make)<doubleQuotes46> AND color=<doubleQuotes46>$(color)<doubleQuotes46><newline46mondego>"
"2443splitHere46","282869splitHere46","public enum Day {<newline46mondego>    SUNDAY, MONDAY, TUESDAY, WEDNESDAY, <newline46mondego>    THURSDAY, FRIDAY, SATURDAY <newline46mondego>}<newline46mondego><newline46mondego>public class EnumTest {<newline46mondego><newline46mondego>    Day day;<newline46mondego><newline46mondego>    public EnumTest(Day day) {<newline46mondego>        this.day = day;<newline46mondego>    }<newline46mondego><newline46mondego>    public void tellItLikeItIs() {<newline46mondego>         switch (day) {<newline46mondego>            case MONDAY:<newline46mondego>                 System.out.println(<doubleQuotes46>Mondays are bad.<doubleQuotes46>);<newline46mondego>                 break;<newline46mondego><newline46mondego>            case FRIDAY:<newline46mondego>                 System.out.println(<doubleQuotes46>Fridays are better.<doubleQuotes46>);<newline46mondego>                 break;<newline46mondego><newline46mondego>            case SATURDAY:<newline46mondego>            case SUNDAY:<newline46mondego>                 System.out.println(<doubleQuotes46>Weekends are best.<doubleQuotes46>);<newline46mondego>                 break;<newline46mondego><newline46mondego>            default:<newline46mondego>                 System.out.println(<doubleQuotes46>Midweek days are so-so.<doubleQuotes46>);<newline46mondego>                 break;<newline46mondego>        }<newline46mondego>    }<newline46mondego><newline46mondego>    ....<newline46mondego>}<newline46mondego>"
"2444splitHere46","283008splitHere46","A.foo()"
"2445splitHere46","283008splitHere46","B.foo()"
"2446splitHere46","283008splitHere46","foo()"
"2447splitHere46","283008splitHere46","A.foo()"
"2448splitHere46","283047splitHere46","6.*"
"2449splitHere46","283564splitHere46","...<newline46mondego><build><newline46mondego><plugins><newline46mondego>  <plugin><newline46mondego>    <groupId>org.codehaus.mojo</groupId><newline46mondego>    <artifactId>appassembler-maven-plugin</artifactId><newline46mondego>    <configuration><newline46mondego>      <programs><newline46mondego>        <program><newline46mondego>          <mainClass>com.acme.MainClass</mainClass><newline46mondego>          <name>app</name><newline46mondego>        </program><newline46mondego>      </programs><newline46mondego>    </configuration><newline46mondego>  </plugin><newline46mondego></plugins><newline46mondego>"
"2450splitHere46","283828splitHere46","import Unfinished;<newline46mondego>"
"2451splitHere46","283839splitHere46","com.ibm.mq.jar<newline46mondego>com.ibm.mqbind.jar<newline46mondego>com.ibm.mqjms.jar<newline46mondego>"
