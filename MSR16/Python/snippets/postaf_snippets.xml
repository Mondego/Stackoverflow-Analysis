<?xml version="1.0" encoding="UTF-8" standalone="no"?><DATA><ROW><id>1418310</id><snippet>if in</snippet></ROW><ROW><id>1418356</id><snippet>Data.py</snippet></ROW><ROW><id>1418356</id><snippet>Data.ServerData</snippet></ROW><ROW><id>1418356</id><snippet>dir(Data)</snippet></ROW><ROW><id>1418356</id><snippet>&gt;&gt;&gt;</snippet></ROW><ROW><id>1418356</id><snippet>Data</snippet></ROW><ROW><id>1418356</id><snippet>Data.ServerData</snippet></ROW><ROW><id>1418356</id><snippet>&gt;&gt;&gt; [n for n in dir(Data) if isinstance(getattr(Data,n), Data.ServerData)]
</snippet></ROW><ROW><id>1418356</id><snippet>Data.py</snippet></ROW><ROW><id>1418915</id><snippet>&gt;&gt;&gt; # Python 2
&gt;&gt;&gt; [x**2 for x in range(10)] == map(lambda x: x**2, range(10))
True
&gt;&gt;&gt; [2**i for i in range(13)] == map(lambda x: 2**x, range(13))
True
&gt;&gt;&gt; S = [x**2 for x in range(10)]
&gt;&gt;&gt; [x for x in S if x % 2 == 0] == filter(lambda x: x % 2 == 0, S)
True
</snippet></ROW><ROW><id>1418915</id><snippet>list</snippet></ROW><ROW><id>1418915</id><snippet>&gt;&gt;&gt; # Python 3
&gt;&gt;&gt; [x**2 for x in range(10)] == list(map(lambda x: x**2, range(10)))
True
&gt;&gt;&gt; [2**i for i in range(13)] == list(map(lambda x: 2**x, range(13)))
True
&gt;&gt;&gt; S = [x**2 for x in range(10)]
&gt;&gt;&gt; [x for x in S if x % 2 == 0] == list(filter(lambda x: x % 2 == 0, S))
True
</snippet></ROW><ROW><id>1419048</id><snippet> data_file
 settings_file
 results_file
 .... etc
</snippet></ROW><ROW><id>1419082</id><snippet>count, _  = get_count_and_price()
</snippet></ROW><ROW><id>1419160</id><snippet>def my_function(arg1, arg2, **kwargs)
</snippet></ROW><ROW><id>1419160</id><snippet>def my_function(**kwargs):
    print str(kwargs)

my_function(a=12, b="abc")

{'a': 12, 'b': 'abc'}
</snippet></ROW><ROW><id>1419264</id><snippet>Python uses its own small-object allocation scheme on top of malloc,
called PyMalloc.

Valgrind may show some unexpected results when PyMalloc is used.
Starting with Python 2.3, PyMalloc is used by default.  You can disable
PyMalloc when configuring python by adding the --without-pymalloc option.
If you disable PyMalloc, most of the information in this document and
the supplied suppressions file will not be useful.  As discussed above,
disabling PyMalloc can catch more problems.

If you use valgrind on a default build of Python,  you will see
many errors like:

        ==6399== Use of uninitialised value of size 4
        ==6399== at 0x4A9BDE7E: PyObject_Free (obmalloc.c:711)
        ==6399== by 0x4A9B8198: dictresize (dictobject.c:477)

These are expected and not a problem.
</snippet></ROW><ROW><id>1419281</id><snippet>from X import *</snippet></ROW><ROW><id>1419281</id><snippet>from X import Wowie</snippet></ROW><ROW><id>1419281</id><snippet>import *</snippet></ROW><ROW><id>1419281</id><snippet>try:
  from blah import bluh
except ImportError, e:
  import sys
  print 'Import error:', e
  print 'sys.path:', sys.path
  blah = __import__('blah')
  print 'blah is %r' % blah
  try:
    print 'blah is at %s (%s)' % (blah.__file__, blah.__path__)
  except Exception, e:
    print 'Cannot give details on blah (%s)' % e
</snippet></ROW><ROW><id>1419324</id><snippet>dicts</snippet></ROW><ROW><id>1419324</id><snippet>set</snippet></ROW><ROW><id>1419324</id><snippet>dict</snippet></ROW><ROW><id>1419324</id><snippet>O(N)</snippet></ROW><ROW><id>1419324</id><snippet>O(1)</snippet></ROW><ROW><id>1419324</id><snippet>O(1)</snippet></ROW><ROW><id>1419324</id><snippet>timeit</snippet></ROW><ROW><id>1419324</id><snippet>$ python -mtimeit -s'empty=()' '23 in empty'
10000000 loops, best of 3: 0.0709 usec per loop
$ python -mtimeit -s'empty=set()' '23 in empty'
10000000 loops, best of 3: 0.101 usec per loop
$ python -mtimeit -s'empty=[]' '23 in empty'
10000000 loops, best of 3: 0.0716 usec per loop
$ python -mtimeit -s'empty=dict()' '23 in empty'
10000000 loops, best of 3: 0.0926 usec per loop
</snippet></ROW><ROW><id>1419324</id><snippet>$ python -mtimeit -s'empty=range(7)' '23 in empty'
1000000 loops, best of 3: 0.318 usec per loop
$ python -mtimeit -s'empty=tuple(range(7))' '23 in empty'
1000000 loops, best of 3: 0.311 usec per loop
$ python -mtimeit -s'empty=set(range(7))' '23 in empty'
10000000 loops, best of 3: 0.109 usec per loop
$ python -mtimeit -s'empty=dict.fromkeys(range(7))' '23 in empty'
10000000 loops, best of 3: 0.0933 usec per loop
</snippet></ROW><ROW><id>1419324</id><snippet>$ python -mtimeit -s'empty=range(7)' '5 in empty'
1000000 loops, best of 3: 0.246 usec per loop
$ python -mtimeit -s'empty=tuple(range(7))' '5 in empty'
1000000 loops, best of 3: 0.25 usec per loop
$ python -mtimeit -s'empty=dict.fromkeys(range(7))' '5 in empty'
10000000 loops, best of 3: 0.0921 usec per loop
$ python -mtimeit -s'empty=set(range(7))' '5 in empty'
10000000 loops, best of 3: 0.112 usec per loop
</snippet></ROW><ROW><id>1419324</id><snippet>timeit</snippet></ROW><ROW><id>1419366</id><snippet>DateTimeProperty</snippet></ROW><ROW><id>1419366</id><snippet>import datetime</snippet></ROW><ROW><id>1419366</id><snippet>datetime.datetime</snippet></ROW><ROW><id>1419366</id><snippet>strptime</snippet></ROW><ROW><id>1419497</id><snippet>def __init__(self):
    self.__dict__.update(locals())
</snippet></ROW><ROW><id>1419497</id><snippet>class test(object):
    def __init__(self, a, b, foo, bar=5)...

a = test(1,2,3)
dir(a)

['__class__', '__delattr__', '__dict__', '__doc__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', 'a', 'b', 'foo', 'bar', 'self']
</snippet></ROW><ROW><id>1419579</id><snippet>k = db.Key('aght52oobW1hZHIOCxIHTWVzc2FnZRiyAQw')
</snippet></ROW><ROW><id>1419579</id><snippet>db.get(k)</snippet></ROW><ROW><id>1419579</id><snippet>k</snippet></ROW><ROW><id>1419579</id><snippet>db.Key</snippet></ROW><ROW><id>1419579</id><snippet>:1</snippet></ROW><ROW><id>1419649</id><snippet>hosts = [eval('modulename.' + x) for x in dir(local_variables) if '_ip' in x]
</snippet></ROW><ROW><id>1419673</id><snippet>apt-get install python-qt4-gl
</snippet></ROW><ROW><id>1419704</id><snippet>class Link(models.Model):
    blog_post = models.ForeignKey(BlogPost)
</snippet></ROW><ROW><id>1419704</id><snippet>from django.conf import setings
class Link(models.Model):
    link_model = models.ForeignKey(settings.LINK_MODEL)
</snippet></ROW><ROW><id>1419704</id><snippet>LINK_MODEL = 'someproject.somemodel'
</snippet></ROW><ROW><id>1419723</id><snippet>./manage.py test
</snippet></ROW><ROW><id>1419723</id><snippet>mvn clean install
</snippet></ROW><ROW><id>1419723</id><snippet>ant compile
</snippet></ROW><ROW><id>1419730</id><snippet>data = """\
. 55 MORILLO ZONE VIII,
BARANGAY ZONE VIII
(POB.), LUISIANA, LAGROS
F
01/16/1952
ALOMO, TERESITA CABALLES
3412-00000-A1652TCA2
12
. 22 FABRICANTE ST. ZONE
VIII LUISIANA LAGROS,
BARANGAY ZONE VIII
(POB.), LUISIANA, LAGROS
M
10/14/1967
AMURAO, CALIXTO MANALO13
"""

from pyparsing import LineEnd, oneOf, Word, nums, Combine, restOfLine, \
    alphanums, Suppress, empty, originalTextFor, OneOrMore, alphas, \
    Group, ZeroOrMore

NL = LineEnd().suppress()
gender = oneOf("M F")
integer = Word(nums)
date = Combine(integer + '/' + integer + '/' + integer)

# define the simple line definitions
gender_line = gender("sex") + NL
dob_line = date("DOB") + NL
name_line = restOfLine("name") + NL
id_line = Word(alphanums+"-")("ID") + NL
recnum_line = integer("recnum") + NL

# define forms of address lines
first_addr_line = Suppress('.') + empty + restOfLine + NL
# a subsequent address line is any line that is not a gender definition
subsq_addr_line = ~(gender_line) + restOfLine + NL

# a line with a name and a recnum combined, if there is no ID
name_recnum_line = originalTextFor(OneOrMore(Word(alphas+',')))("name") + \
    integer("recnum") + NL

# defining the form of an overall record, either with or without an ID
record = Group((first_addr_line + ZeroOrMore(subsq_addr_line))("address") + 
    gender_line + 
    dob_line +
    ((name_line +
        id_line + 
        recnum_line) |
      name_recnum_line))

# parse data
records = OneOrMore(record).parseString(data)

# output the desired results (note that address is actually a list of lines)
for rec in records:
    if rec.ID:
        print "%(name)s, %(ID)s, %(address)s, %(sex)s, %(DOB)s" % rec
    else:
        print "%(name)s, , %(address)s, %(sex)s, %(DOB)s" % rec
print

# how to access the individual fields of the parsed record
for rec in records:
    print rec.dump()
    print rec.name, 'is', rec.sex
    print
</snippet></ROW><ROW><id>1419730</id><snippet>ALOMO, TERESITA CABALLES, 3412-00000-A1652TCA2, ['55 MORILLO ZONE VIII,', 'BARANGAY ZONE VIII', '(POB.), LUISIANA, LAGROS'], F, 01/16/1952
AMURAO, CALIXTO MANALO, , ['22 FABRICANTE ST. ZONE', 'VIII LUISIANA LAGROS,', 'BARANGAY ZONE VIII', '(POB.), LUISIANA, LAGROS'], M, 10/14/1967

['55 MORILLO ZONE VIII,', 'BARANGAY ZONE VIII', '(POB.), LUISIANA, LAGROS', 'F', '01/16/1952', 'ALOMO, TERESITA CABALLES', '3412-00000-A1652TCA2', '12']
- DOB: 01/16/1952
- ID: 3412-00000-A1652TCA2
- address: ['55 MORILLO ZONE VIII,', 'BARANGAY ZONE VIII', '(POB.), LUISIANA, LAGROS']
- name: ALOMO, TERESITA CABALLES
- recnum: 12
- sex: F
ALOMO, TERESITA CABALLES is F

['22 FABRICANTE ST. ZONE', 'VIII LUISIANA LAGROS,', 'BARANGAY ZONE VIII', '(POB.), LUISIANA, LAGROS', 'M', '10/14/1967', 'AMURAO, CALIXTO MANALO', '13']
- DOB: 10/14/1967
- address: ['22 FABRICANTE ST. ZONE', 'VIII LUISIANA LAGROS,', 'BARANGAY ZONE VIII', '(POB.), LUISIANA, LAGROS']
- name: AMURAO, CALIXTO MANALO
- recnum: 13
- sex: M
AMURAO, CALIXTO MANALO is M
</snippet></ROW><ROW><id>1420316</id><snippet>hist = dict((key,val) for key, val in enumerate(numpy.bincount(data)) if val)
</snippet></ROW><ROW><id>1420316</id><snippet>bins = numpy.unique(data)
bincounts = numpy.bincount(numpy.digitize(data, bins) - 1)
hist = dict(zip(bins, bincounts))
</snippet></ROW><ROW><id>1420634</id><snippet>class X(object):
    def m(self,x):
        print x

print X.m           #&gt;&gt;&gt; &lt;unbound method X.m&gt;
print vars(X)['m']  #&gt;&gt;&gt; &lt;function m at 0x9e17e64&gt;

def increase_decorator(function):
    return lambda self,x: function(self,x+1)
</snippet></ROW><ROW><id>1420634</id><snippet>x = X()
x.m(1)         #&gt;&gt;&gt; 1
X.m = increase_decorator( vars(X)['m'] )
x.m(1)         #&gt;&gt;&gt; 2
</snippet></ROW><ROW><id>1420748</id><snippet>&gt;&gt;&gt; for i, u in enumerate(users[1:]):
    print(users[i], u)           # or do something else


1 2
2 3
3 4
4 5
</snippet></ROW><ROW><id>1420748</id><snippet>itertools.combinations</snippet></ROW><ROW><id>1420748</id><snippet>&gt;&gt;&gt; import itertools
&gt;&gt;&gt; for i in itertools.combinations(users, 2):
    print(*i)

1 2
1 3
1 4
1 5
2 3
2 4
2 5
3 4
3 5
4 5
</snippet></ROW><ROW><id>1421350</id><snippet>Popen.communicate(input=my_input)
</snippet></ROW><ROW><id>1421350</id><snippet>p = subprocess.Popen(["head", "-n", "1"], stdin=subprocess.PIPE)
p.communicate('first\nsecond')
</snippet></ROW><ROW><id>1421350</id><snippet>first
</snippet></ROW><ROW><id>1421900</id><snippet>import os, stat
info = os.stat(dirpath)
uid, gid = info[stat.ST_UID], info[stat.ST_GID]
</snippet></ROW><ROW><id>1422367</id><snippet>try:
    try:
        retval = func(*args, **kwargs)
        session.commit()
        return retval
    except:
        session.rollback()
        raise
finally:
    session.remove()
</snippet></ROW><ROW><id>1422367</id><snippet>with</snippet></ROW><ROW><id>1422367</id><snippet>try:
    with session.registry().transaction:
        return func(*args, **kwargs)
finally:
    session.remove()
</snippet></ROW><ROW><id>1422367</id><snippet>.with_lockmode('update')</snippet></ROW><ROW><id>1422436</id><snippet>fcntl</snippet></ROW><ROW><id>1422436</id><snippet>win32api</snippet></ROW><ROW><id>1422436</id><snippet>fcntl</snippet></ROW><ROW><id>1422436</id><snippet>fcntl</snippet></ROW><ROW><id>1422436</id><snippet>win32api</snippet></ROW><ROW><id>1422436</id><snippet>fcntl</snippet></ROW><ROW><id>1422436</id><snippet>fcntl</snippet></ROW><ROW><id>1422712</id><snippet>class JSONLoader(bulkloader.Loader):
    def generate_records(self, filename):
        for item in json.load(open(filename)):
            yield item['fields']
</snippet></ROW><ROW><id>1422712</id><snippet>[
    {
        "fields": [
            "a", 
            "b", 
            "c", 
            "d"
        ]
    }, 
    {
        "fields": [
            "e", 
            "f", 
            "g", 
            "h"
        ]
    }
]
</snippet></ROW><ROW><id>1422712</id><snippet>generate_records</snippet></ROW><ROW><id>1422712</id><snippet>generate_records</snippet></ROW><ROW><id>1422712</id><snippet>AlbumLoader.__init__</snippet></ROW><ROW><id>1422712</id><snippet>__init__</snippet></ROW><ROW><id>1422712</id><snippet>JSONLoader</snippet></ROW><ROW><id>1422712</id><snippet>kind</snippet></ROW><ROW><id>1422712</id><snippet>bulkloader.Loader</snippet></ROW><ROW><id>1422867</id><snippet>localhost:8080</snippet></ROW><ROW><id>1422867</id><snippet>from wsgiref import simple_server
from pyamf.remoting.gateway.wsgi import WSGIGateway

## amf services ##################################################

def echo(data):
    return data

def reverse(data):
    return data[::-1]

def rot13(data):
    return data.encode('rot13')

services = {
    'myservice.echo': echo,
    'myservice.reverse': reverse,
    'myservice.rot13': rot13,
}

## server ########################################################

def main():
    app = WSGIGateway(services)

    simple_server.make_server('localhost', 8080, app).serve_forever()

if __name__ == '__main__':
    main()
</snippet></ROW><ROW><id>1423016</id><snippet>heapq</snippet></ROW><ROW><id>1423016</id><snippet>__le__</snippet></ROW><ROW><id>1423016</id><snippet>key=</snippet></ROW><ROW><id>1423016</id><snippet>heapq</snippet></ROW><ROW><id>1423016</id><snippet>(foo.x, time.time(), foo)</snippet></ROW><ROW><id>1423016</id><snippet>x</snippet></ROW><ROW><id>1423016</id><snippet>[-1]</snippet></ROW><ROW><id>1423288</id><snippet>\n(?&lt;!-\n)(?!-)
</snippet></ROW><ROW><id>1423288</id><snippet>\n</snippet></ROW><ROW><id>1423288</id><snippet>-</snippet></ROW><ROW><id>1423498</id><snippet>import os, sys

def become_daemon(our_home_dir='.', out_log='/dev/null', err_log='/dev/null', pidfile='/var/tmp/daemon.pid'):
    """ Make the current process a daemon.  """

    try:
        # First fork
        try:
            if os.fork() &gt; 0:
                sys.exit(0)
        except OSError, e:
            sys.stderr.write('fork #1 failed" (%d) %s\n' % (e.errno, e.strerror))
            sys.exit(1)

        os.setsid()
        os.chdir(our_home_dir)
        os.umask(0)

        # Second fork
        try:
            pid = os.fork()
            if pid &gt; 0:
                # You must write the pid file here.  After the exit()
                # the pid variable is gone.
                fpid = open(pidfile, 'wb')
                fpid.write(str(pid))
                fpid.close()
                sys.exit(0)
        except OSError, e:
            sys.stderr.write('fork #2 failed" (%d) %s\n' % (e.errno, e.strerror))
            sys.exit(1)

        si = open('/dev/null', 'r')
        so = open(out_log, 'a+', 0)
        se = open(err_log, 'a+', 0)
        os.dup2(si.fileno(), sys.stdin.fileno())
        os.dup2(so.fileno(), sys.stdout.fileno())
        os.dup2(se.fileno(), sys.stderr.fileno())
    except Exception, e:
        sys.stderr.write(str(e))
</snippet></ROW><ROW><id>1423580</id><snippet>1.0</snippet></ROW><ROW><id>1423580</id><snippet>num=pSum-(1.0*sum1*sum2/n)
den=sqrt((sum1Sq-1.0*pow(sum1,2)/n)*(sum2Sq-1.0*pow(sum2,2)/n))
</snippet></ROW><ROW><id>1423580</id><snippet>from __future__ import division
</snippet></ROW><ROW><id>1423736</id><snippet>if not value.time():
    # do stuff
</snippet></ROW><ROW><id>1423871</id><snippet>try:
    import module
except ImportError: 
    # Do something else.
</snippet></ROW><ROW><id>1423871</id><snippet>try: 
   from hashlib import md5
except ImportError:
   from md5 import md5
</snippet></ROW><ROW><id>1423961</id><snippet>local::lib</snippet></ROW><ROW><id>1423961</id><snippet>virtualenv</snippet></ROW><ROW><id>1423961</id><snippet>@INC</snippet></ROW><ROW><id>1423961</id><snippet>PERL5LIB</snippet></ROW><ROW><id>1423961</id><snippet>MakeMaker</snippet></ROW><ROW><id>1423961</id><snippet>Module::Build</snippet></ROW><ROW><id>1423961</id><snippet>PATH</snippet></ROW><ROW><id>1423961</id><snippet>eval $(perl -Mlocal::lib)</snippet></ROW><ROW><id>1423961</id><snippet>.profile</snippet></ROW><ROW><id>1424009</id><snippet>from urllib import quote_plus as urlquote
from sqlalchemy.engine import create_engine
engine = create_engine('postgres://user:%s@host/database' % urlquote('badpass'))
</snippet></ROW><ROW><id>1424009</id><snippet>sqlalchemy/engine/url.py</snippet></ROW><ROW><id>1424009</id><snippet>urllib.unquote_plus</snippet></ROW><ROW><id>1424016</id><snippet>string_val = "x" * 10  # gives you "xxxxxxxxxx"
</snippet></ROW><ROW><id>1424016</id><snippet>n</snippet></ROW><ROW><id>1424016</id><snippet>n</snippet></ROW><ROW><id>1424016</id><snippet>from random import choice
from string import lowercase
n = 10

string_val = "".join(choice(lowercase) for i in range(n))
</snippet></ROW><ROW><id>1424517</id><snippet>newProccess = Popen("python MyScript", shell=True)
</snippet></ROW><ROW><id>1424656</id><snippet>&gt;&gt;&gt; "%06.2f"%3.3
'003.30'

&gt;&gt;&gt; "%04.f"%3.2
'0003'
</snippet></ROW><ROW><id>1424893</id><snippet># server.py
import socket
from time import sleep

def f(s):
        r,a = s.accept()
        print r.recv(100)

s = socket.socket()
s.bind(('localhost',1234))
s.listen(1)

f(s)
# wait around a bit for the client to send it's second packet
sleep(10)
</snippet></ROW><ROW><id>1424893</id><snippet># client.py
import socket
from time import sleep

s = socket.socket()
s.connect(('localhost',1234))

s.send('hello 1')
# wait around for a while so that the socket in server.py goes out of scope
sleep(5)
s.send('hello 2')
</snippet></ROW><ROW><id>1424893</id><snippet>tcpdump -A -i lo</snippet></ROW><ROW><id>1424893</id><snippet>tcpdump: verbose output suppressed, use -v or -vv for full protocol decode
listening on lo, link-type EN10MB (Ethernet), capture size 96 bytes
12:42:37.683710 IP localhost:33491 &gt; localhost.1234: S 1129726741:1129726741(0) win 32792 &lt;mss 16396,sackOK,timestamp 640881101 0,nop,wscale 7&gt;
E..&lt;R.@.@...............CVC.........I|....@....
&amp;3..........
12:42:37.684049 IP localhost.1234 &gt; localhost:33491: S 1128039653:1128039653(0) ack 1129726742 win 32768 &lt;mss 16396,sackOK,timestamp 640881101 640881101,nop,wscale 7&gt;
E..&lt;..@.@.&lt;.............C&lt;..CVC.....Ia....@....
&amp;3..&amp;3......
12:42:37.684087 IP localhost:33491 &gt; localhost.1234: . ack 1 win 257 &lt;nop,nop,timestamp 640881102 640881101&gt;
E..4R.@.@...............CVC.C&lt;......1......
&amp;3..&amp;3..
12:42:37.684220 IP localhost:33491 &gt; localhost.1234: P 1:8(7) ack 1 win 257 &lt;nop,nop,timestamp 640881102 640881101&gt;
E..;R.@.@...............CVC.C&lt;......./.....
&amp;3..&amp;3..hello 1
12:42:37.684271 IP localhost.1234 &gt; localhost:33491: . ack 8 win 256 &lt;nop,nop,timestamp 640881102 640881102&gt;
E..4.(@.@...............C&lt;..CVC.....1}.....
&amp;3..&amp;3..
12:42:37.684755 IP localhost.1234 &gt; localhost:33491: F 1:1(0) ack 8 win 256 &lt;nop,nop,timestamp 640881103 640881102&gt;
E..4.)@.@...............C&lt;..CVC.....1{.....
&amp;3..&amp;3..
12:42:37.685639 IP localhost:33491 &gt; localhost.1234: . ack 2 win 257 &lt;nop,nop,timestamp 640881104 640881103&gt;
E..4R.@.@...............CVC.C&lt;......1x.....
&amp;3..&amp;3..
12:42:42.683367 IP localhost:33491 &gt; localhost.1234: P 8:15(7) ack 2 win 257 &lt;nop,nop,timestamp 640886103 640881103&gt;
E..;R.@.@...............CVC.C&lt;......./.....
&amp;3%W&amp;3..hello 2
12:42:42.683401 IP localhost.1234 &gt; localhost:33491: R 1128039655:1128039655(0) win 0
E..(..@.@.&lt;.............C&lt;......P...b...

9 packets captured
27 packets received by filter
0 packets dropped by kernel
</snippet></ROW><ROW><id>1425072</id><snippet>stompservice</snippet></ROW><ROW><id>1425072</id><snippet>TCPSocket</snippet></ROW><ROW><id>1425092</id><snippet>IDLE.app</snippet></ROW><ROW><id>1425092</id><snippet>open(1)</snippet></ROW><ROW><id>1425092</id><snippet>~/Documents</snippet></ROW><ROW><id>1425092</id><snippet>idlemain.py</snippet></ROW><ROW><id>1425092</id><snippet>/Applications/MacPython 2.x/IDLE.app/Contents/Resources
/Applications/MacPython 2.x/IDLE.app/Contents/Resources
/Applications/MacPorts/Python 2.x/IDLE.app/Contents/Resources
/Applications/Python 2.x/IDLE.app/Contents/Resources
/Applications/Python 3.x/IDLE.app/Contents/Resources
</snippet></ROW><ROW><id>1425092</id><snippet>os.chdir(os.path.expanduser('~/Documents'))
</snippet></ROW><ROW><id>1425092</id><snippet>$ cd /some/directory    
$ /usr/local/bin/idle
</snippet></ROW><ROW><id>1425475</id><snippet>import types

class container():
    def __init__(self):
        self.info = "undefiend info attribute"

    def use(self):
        print self.info


class tree():
    def __init__(self):

        # create container instance
        b = container()

        # change b's info attribute
        b.info = "b's info attribute"

        # bound method test is set as use of b and in this case unbound, i think
        b.use = types.MethodType(self.test.im_func, b, b.__class__)

        # should read b's info attribute and print it
        # should output: test: b's info attribute but test is bound in some way to the tree object
        print b.use()

    # bound method test
    def test(self):
        return "test: "+self.info


if __name__ == "__main__":
    b = tree()
</snippet></ROW><ROW><id>1426255</id><snippet>a, b = [], []
with open('myfile', 'r') as f:
    for num, line in enumerate(f.readlines()):
        if num &gt;= 10: 
            b.push(line)
        else:
            a.push(line)
</snippet></ROW><ROW><id>1426555</id><snippet>from configobj import ConfigObj
config = ConfigObj(filename)

value = config['entry']
config['entry'] = newvalue
config.write()
</snippet></ROW><ROW><id>1427498</id><snippet>Py_AddPendingCall()</snippet></ROW><ROW><id>1427498</id><snippet>sys.setcheckinterval()</snippet></ROW><ROW><id>1427498</id><snippet>Py_Exit()</snippet></ROW><ROW><id>1427498</id><snippet>Py_Finalize()</snippet></ROW><ROW><id>1427498</id><snippet>PyErr_Set*()</snippet></ROW><ROW><id>1427498</id><snippet>int quit(void *) {
    Py_Exit(0);
}


PyGILState_STATE state = PyGILState_Ensure();
Py_AddPendingCall(&amp;quit, NULL);
PyGILState_Release(state);
</snippet></ROW><ROW><id>1428220</id><snippet>import xml.etree.cElementTree as etree
elem = etree.Element('tag')
elem.text = u"Würth Elektronik Midcom"
xml = etree.tostring(elem,encoding='UTF-8')
</snippet></ROW><ROW><id>1428588</id><snippet>s="abcdefgh"
print "".join(b+a for a,b in zip(s[::2],s[1::2]))
</snippet></ROW><ROW><id>1428802</id><snippet>*?</snippet></ROW><ROW><id>1428802</id><snippet>+?</snippet></ROW><ROW><id>1428802</id><snippet>??</snippet></ROW><ROW><id>1428802</id><snippet>&lt;bla&gt;&lt;blabla&gt;87765.*?&lt;/blabla&gt;&lt;bla&gt;
</snippet></ROW><ROW><id>1428802</id><snippet>&lt;</snippet></ROW><ROW><id>1428802</id><snippet>&lt;bla&gt;&lt;blabla&gt;87765[^&lt;]*&lt;/blabla&gt;&lt;bla&gt;
</snippet></ROW><ROW><id>1428802</id><snippet>&lt;blabla&gt;</snippet></ROW><ROW><id>1428802</id><snippet>&lt;/blabla&gt;</snippet></ROW><ROW><id>1429145</id><snippet>#!/usr/local/bin/python
# by Daniel Rosengren modified by e-satis

import sys, time
stdout = sys.stdout

BAILOUT = 16
MAX_ITERATIONS = 1000

class Iterator(object) :

    def __init__(self):

        print 'Rendering...'
        for y in xrange(-39, 39): 
            stdout.write('\n')
            for x in xrange(-39, 39):
                if self.mandelbrot(x/40.0, y/40.0) :
                    stdout.write(' ')
                else:
                    stdout.write('*')


    def mandelbrot(self, x, y):
        cr = y - 0.5
        ci = x
        zi = 0.0
        zr = 0.0

        for i in xrange(MAX_ITERATIONS) :
            temp = zr * zi
            zr2 = zr * zr
            zi2 = zi * zi
            zr = zr2 - zi2 + cr
            zi = temp + temp + ci

            if zi2 + zr2 &gt; BAILOUT:
                return i

        return 0

t = time.time()
Iterator() 
print '\nPython Elapsed %.02f' % (time.time() - t)
</snippet></ROW><ROW><id>1429145</id><snippet>#!/usr/local/bin/python
# by Daniel Rosengren, modified by e-satis
"""
Module doctring
"""


import time
from sys import stdout

BAILOUT = 16
MAX_ITERATIONS = 1000

def mandelbrot(dim_1, dim_2):
    """
    function doc string
    """
    cr1 = dim_1 - 0.5
    ci1 = dim_2
    zi1 = 0.0
    zr1 = 0.0

    for i in xrange(MAX_ITERATIONS) :
        temp = zr1 * zi1
        zr2 = zr1 * zr1
        zi2 = zi1 * zi1
        zr1 = zr2 - zi2 + cr1
        zi1 = temp + temp + ci1

        if zi2 + zr2 &gt; BAILOUT:
            return i

    return 0

def execute() :
    """
    func doc string
    """
    print 'Rendering...'
    for dim_1 in xrange(-39, 39): 
        stdout.write('\n')
        for dim_2 in xrange(-39, 39):
            if mandelbrot(dim_1/40.0, dim_2/40.0) :
                stdout.write(' ')
            else:
                stdout.write('*')


START_TIME = time.time()
execute()
print '\nPython Elapsed %.02f' % (time.time() - START_TIME)
</snippet></ROW><ROW><id>1429145</id><snippet>./python_mandelbrot.py:4:11: E401 multiple imports on one line
./python_mandelbrot.py:10:1: E302 expected 2 blank lines, found 1
./python_mandelbrot.py:10:23: E203 whitespace before ':'
./python_mandelbrot.py:15:80: E501 line too long (108 characters)
./python_mandelbrot.py:23:1: W291 trailing whitespace
./python_mandelbrot.py:41:5: E301 expected 1 blank line, found 3
</snippet></ROW><ROW><id>1429145</id><snippet>************* Module python_mandelbrot
C: 15: Line too long (108/80)
C: 61: Line too long (85/80)
C:  1: Missing docstring
C:  5: Invalid name "stdout" (should match (([A-Z_][A-Z0-9_]*)|(__.*__))$)
C: 10:Iterator: Missing docstring
C: 15:Iterator.__init__: Invalid name "y" (should match [a-z_][a-z0-9_]{2,30}$)
C: 17:Iterator.__init__: Invalid name "x" (should match [a-z_][a-z0-9_]{2,30}$)

[...] and a very long report with useful stats like :

Duplication
-----------

+-------------------------+------+---------+-----------+
|                         |now   |previous |difference |
+=========================+======+=========+===========+
|nb duplicated lines      |0     |0        |=          |
+-------------------------+------+---------+-----------+
|percent duplicated lines |0.000 |0.000    |=          |
+-------------------------+------+---------+-----------+
</snippet></ROW><ROW><id>1429537</id><snippet>if x == 1:
    pass
elif x == 5:
    pass
elif x == 10:
    pass
</snippet></ROW><ROW><id>1429835</id><snippet>definitions = {'a': 1, 'b': 2, 'c': 123.4}
for name, value in definitions.items():
    globals()[name] = value
</snippet></ROW><ROW><id>1430312</id><snippet>__getitem__</snippet></ROW><ROW><id>1430312</id><snippet>__setitem__</snippet></ROW><ROW><id>1430312</id><snippet>class Matrix(dict):
    def __getitem__(self, index):
        return super(Matrix, self).__getitem__(tuple(sorted(index)))
    def __setitem__(self, index, value):
        return super(Matrix, self).__setitem__(tuple(sorted(index)), value)
</snippet></ROW><ROW><id>1430312</id><snippet>&gt;&gt;&gt; matrix = Matrix()
&gt;&gt;&gt; matrix[2,3] = 1066
&gt;&gt;&gt; print matrix
{(2, 3): 1066}
&gt;&gt;&gt; matrix[2,3]
1066
&gt;&gt;&gt; matrix[3,2]
1066
&gt;&gt;&gt; matrix[1,1]
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in ?
  File "z.py", line 3, in __getitem__
    return super(Matrix, self).__getitem__(tuple(sorted(index)))
KeyError: (1, 1)
</snippet></ROW><ROW><id>1430542</id><snippet>class email.mime.text.MIMEText(_text, _subtype='plain', _charset='us-ascii')
</snippet></ROW><ROW><id>1430542</id><snippet>msg = MIMEText('€10')</snippet></ROW><ROW><id>1430542</id><snippet>msg = MIMEText('€10'.encode('utf-8'), _charset='utf-8')
</snippet></ROW><ROW><id>1430542</id><snippet>msg.as_string()</snippet></ROW><ROW><id>1430566</id><snippet>os.mkfifo()</snippet></ROW><ROW><id>1430566</id><snippet>OSError: [Errno 17] File exists</snippet></ROW><ROW><id>1430566</id><snippet>tempfile.mktemp()</snippet></ROW><ROW><id>1430566</id><snippet>os.mkfifo()</snippet></ROW><ROW><id>1430566</id><snippet>mktemp()</snippet></ROW><ROW><id>1430566</id><snippet>tempfile.mkdtemp()</snippet></ROW><ROW><id>1430566</id><snippet>import os, tempfile

tmpdir = tempfile.mkdtemp()
filename = os.path.join(tmpdir, 'myfifo')
print filename
try:
    os.mkfifo(filename)
except OSError, e:
    print "Failed to create FIFO: %s" % e
else:
    fifo = open(filename, 'w')
    # write stuff to fifo
    print &gt;&gt; fifo, "hello"
    fifo.close()
    os.remove(filename)
    os.rmdir(tmpdir)
</snippet></ROW><ROW><id>1430566</id><snippet>mktmp()</snippet></ROW><ROW><id>1430786</id><snippet>daemon</snippet></ROW><ROW><id>1430786</id><snippet>True</snippet></ROW><ROW><id>1430786</id><snippet>setDaemon</snippet></ROW><ROW><id>1430984</id><snippet>def rule(x):
    rule = bin(x)[2:].zfill(8)
    ruleDict = {} # create an empty dictionary
    for i,c in enumerate(rule): # i = index, c = character at index, for each character in rule
        # Leftmost bit of rule is key 0, increasing as you move right
        ruleDict[i] = 'OFF' if c == '0' else 'ON' 
        # could have been written as:
        # if c == '0':
        #    ruleDict[i] = 'OFF'
        # else:
        #    ruleDict[i] = 'ON'

        # To make it so ruleDict[0] is the LSB of the number:
        #ruleDict[len(rule)-1-i] = 'OFF' if c == '0' else 'ON' 
    return ruleDict

print rule(30)
</snippet></ROW><ROW><id>1430984</id><snippet>$ python rule.py
{0: 'OFF', 1: 'ON', 2: 'ON', 3: 'ON', 4: 'ON', 5: 'OFF', 6: 'OFF', 7: 'OFF'}
</snippet></ROW><ROW><id>1430984</id><snippet>ruleDict</snippet></ROW><ROW><id>1430984</id><snippet>len(rule)-1-i</snippet></ROW><ROW><id>1431828</id><snippet>class xmldict(dict):
    def __getattr__(self, attr):
        try:
            return object.__getattribute__(self, attr)
        except AttributeError:
            if attr in self:
                return self[attr]
            else:
                raise
</snippet></ROW><ROW><id>1431828</id><snippet>dict_ = {'a':'some text'}
</snippet></ROW><ROW><id>1431828</id><snippet>&gt;&gt; print xmldict(dict_).a
some text
&gt;&gt; print xmldict(dict_).NonExistent
Traceback (most recent call last):
  ...
AttributeError: 'xmldict' object has no attribute 'NonExistent'
</snippet></ROW><ROW><id>1432076</id><snippet>&gt;&gt;&gt; import glob
&gt;&gt;&gt; glob.glob('./[0-9].*')
['./1.gif', './2.txt']
&gt;&gt;&gt; glob.glob('*.gif')
['1.gif', 'card.gif']
&gt;&gt;&gt; glob.glob('?.gif')
['1.gif']
</snippet></ROW><ROW><id>1432100</id><snippet>field = forms.ChoiceField(choices=[[0, '----------']] + [[r.id, r.name] for r in Model.objects.all()])
</snippet></ROW><ROW><id>1432100</id><snippet>__init__</snippet></ROW><ROW><id>1432100</id><snippet>ModelChoiceField</snippet></ROW><ROW><id>1432164</id><snippet>backslash</snippet></ROW><ROW><id>1432164</id><snippet>&gt;&gt;&gt; os.remove('D:\\new.docx')
</snippet></ROW><ROW><id>1432164</id><snippet>forward slash</snippet></ROW><ROW><id>1432164</id><snippet>&gt;&gt;&gt; os.remove('D:/new.docx')
</snippet></ROW><ROW><id>1432164</id><snippet>&gt;&gt;&gt; os.remove(r'D:\new.docx')
</snippet></ROW><ROW><id>1432238</id><snippet>open</snippet></ROW><ROW><id>1432238</id><snippet>file</snippet></ROW><ROW><id>1432238</id><snippet>def file_get_contents(filename):
    with open(filename) as f:
        return f.read()
</snippet></ROW><ROW><id>1432238</id><snippet>__exit__</snippet></ROW><ROW><id>1432361</id><snippet>return args
</snippet></ROW><ROW><id>1432695</id><snippet>from proj.models import *
</snippet></ROW><ROW><id>1432695</id><snippet>from django import forms
</snippet></ROW><ROW><id>1432695</id><snippet>from proj.models import Font
</snippet></ROW><ROW><id>1432695</id><snippet>print forms.__package__
</snippet></ROW><ROW><id>1432910</id><snippet>list = [1, 2, 3]
# List is [1, 2, 3]

list += [4]
# Added an element at the end

list[0] = 42
# We changed the first element to 42
# List is [42, 2, 3, 4]
</snippet></ROW><ROW><id>1432910</id><snippet>list = [1, 2, 3]
# List is [1, 2, 3]

list2 = 0 : list
# List2 combines [0] and [1, 2, 3] to [0, 1, 2, 3]
# List is still [1, 2, 3]

list3 = updateAt 0 42 list
# List3 contains the elements of list2 with the first one set to 42
# List and List2 still hold their original values
</snippet></ROW><ROW><id>1432949</id><snippet>import os
os.chdir("/home/udi/foo")
</snippet></ROW><ROW><id>1432949</id><snippet>os.path</snippet></ROW><ROW><id>1432949</id><snippet>import os

abspath = os.path.abspath(__file__)
dname = os.path.dirname(abspath)
os.chdir(dname)
</snippet></ROW><ROW><id>1433074</id><snippet>CREATE TABLE</snippet></ROW><ROW><id>1433074</id><snippet>autoload=True</snippet></ROW><ROW><id>1433330</id><snippet>PythonWalker</snippet></ROW><ROW><id>1433946</id><snippet>dom = parseString('&lt;something&gt;&lt;data&gt;I WANT THIS&lt;/data&gt;&lt;/something&gt;')
data = dom.getElementsByTagName('data')[0].childNodes[0].data
</snippet></ROW><ROW><id>1434155</id><snippet>python yourfile.py</snippet></ROW><ROW><id>1434508</id><snippet>PyThreadState *mainstate;

void initPython(){
    PyEval_InitThreads();
    Py_Initialize();
    mainstate = PyThreadState_Swap(NULL);
    PyEval_ReleaseLock();
}

void exitPython(){
    PyEval_AcquireLock();
    PyThreadState_Swap(mainstate);
    Py_Finalize();
}
</snippet></ROW><ROW><id>1434881</id><snippet>print (time.ctime())
</snippet></ROW><ROW><id>1434974</id><snippet>car_classes = {
'car'     : Car,
'truck'   : Truck,
'compact' : Compact
}

if __name__ == '__main__':
    option = sys.argv[1]
    mCar = car_classes[option]()
    print 'I am a', mCar.__class__.__name__
</snippet></ROW><ROW><id>1435977</id><snippet>scatter</snippet></ROW><ROW><id>1435977</id><snippet>print type(ax.scatter(...))
</snippet></ROW><ROW><id>1435977</id><snippet>scatter</snippet></ROW><ROW><id>1435977</id><snippet>markerscale</snippet></ROW><ROW><id>1435977</id><snippet>fc</snippet></ROW><ROW><id>1435977</id><snippet>p1 = Rectangle((0, 0), 1, 1, fc="b")
p2 = Rectangle((0, 0), 1, 1, fc="g")
p3 = Rectangle((0, 0), 1, 1, fc="r")
legend((p1, p2, p3), ('proj1','proj2','proj3'))
</snippet></ROW><ROW><id>1435977</id><snippet>pl1, = plot(x1, y1, '.', alpha=0.1, label='plot1')
pl2, = plot(x2, y2, '.', alpha=0.1, label='plot2')
p1 = Rectangle((0, 0), 1, 1, fc=pl1.get_color())
p2 = Rectangle((0, 0), 1, 1, fc=pl2.get_color())
legend((p1, p2), (pl1.get_label(), pl2.get_label()), loc='best')
</snippet></ROW><ROW><id>1436012</id><snippet>def flush(self, include_footers=False):
    """Flushes the current output buffer to the nextwork."""
    if self.application._wsgi:
        raise Exception("WSGI applications do not support flush()") #line 404
    if not self._headers_written:
        self._headers_written = True
        headers = self._generate_headers()
    else:
        headers = ""
</snippet></ROW><ROW><id>1436366</id><snippet>Queue.Queue</snippet></ROW><ROW><id>1436451</id><snippet>gc.getobjects()</snippet></ROW><ROW><id>1436451</id><snippet>gc</snippet></ROW><ROW><id>1436451</id><snippet>gc</snippet></ROW><ROW><id>1436451</id><snippet>getobjects</snippet></ROW><ROW><id>1436451</id><snippet>def makeaclass():
  class sic(object): pass
  return sic
</snippet></ROW><ROW><id>1436451</id><snippet>db.Model</snippet></ROW><ROW><id>1436451</id><snippet>gc</snippet></ROW><ROW><id>1436451</id><snippet>for amodel in db.Model.__subclasses__():
   ...
</snippet></ROW><ROW><id>1436451</id><snippet>Expando</snippet></ROW><ROW><id>1436461</id><snippet>class TestSpeedRetrieval(webapp.RequestHandler):
  """
  Test retrieval times of various important records in the BigTable database 
  """
  def __init__(self, cls):
      self.cls = cls

  def get(self):
      commandValidated = True 
      beginTime = time()
      itemList = self.cls.all().fetch(1000) 

      for item in itemList: 
          pass 
      endTime = time()
      self.response.out.write("&lt;br/&gt;%s count=%d Duration=%s" % (self.cls.__name__, len(itemList), duration(beginTime,endTime))

TestRetrievalOfClass(Subscriber)
</snippet></ROW><ROW><id>1436491</id><snippet>container = array.array('I', [0]) * ((10000000000 + 31) // 32)
</snippet></ROW><ROW><id>1436574</id><snippet>random.sample</snippet></ROW><ROW><id>1436574</id><snippet>import random
import string

def generate_pins(length, count):
  return [''.join(random.choice(string.digits) for x in xrange(length))
          for x in xrange(count)]
</snippet></ROW><ROW><id>1436574</id><snippet>def generate_pins(length, count, alphabet=string.digits):
  alphabet = ''.join(set(alphabet))
  if count &gt; len(alphabet)**length:
    raise ValueError("Can't generate more than %s &gt; %s pins of length %d out of %r" %
                      count, len(alphabet)**length, length, alphabet)
  def onepin(length):
    return ''.join(random.choice(alphabet) for x in xrange(length))
  result = set(onepin(length) for x in xrange(count))
  while len(result) &lt; count:
    result.add(onepin(length))
  return list(result)
</snippet></ROW><ROW><id>1436574</id><snippet>string.ascii_lowercase + string.digits</snippet></ROW><ROW><id>1436574</id><snippet>onepin</snippet></ROW><ROW><id>1436574</id><snippet>generate_pins</snippet></ROW><ROW><id>1436574</id><snippet>None</snippet></ROW><ROW><id>1436574</id><snippet>generate_pins</snippet></ROW><ROW><id>1436574</id><snippet>string.digits</snippet></ROW><ROW><id>1437009</id><snippet>test_list1.sort()</snippet></ROW><ROW><id>1437009</id><snippet>timeit</snippet></ROW><ROW><id>1437009</id><snippet>timeit</snippet></ROW><ROW><id>1437009</id><snippet>$ python -mtimeit -s'import random; x=range(1000); random.shuffle(x)' '
&gt; y=list(x); y.sort()'
1000 loops, best of 3: 452 usec per loop
$ python -mtimeit -s'import random; x=range(1000); random.shuffle(x)' '
x.sort()'
10000 loops, best of 3: 37.4 usec per loop
$ python -mtimeit -s'import random; x=range(1000); random.shuffle(x)' '
sorted(x)'
1000 loops, best of 3: 462 usec per loop
$
</snippet></ROW><ROW><id>1437009</id><snippet>y.sort()</snippet></ROW><ROW><id>1437009</id><snippet>sorted(x)</snippet></ROW><ROW><id>1437009</id><snippet>x.sort()</snippet></ROW><ROW><id>1437009</id><snippet>sort</snippet></ROW><ROW><id>1437009</id><snippet>sorted</snippet></ROW><ROW><id>1437514</id><snippet>$ sudo /usr/bin/easy_install-2.6 ipython
</snippet></ROW><ROW><id>1437514</id><snippet>$ ipython
</snippet></ROW><ROW><id>1437872</id><snippet>decode</snippet></ROW><ROW><id>1438650</id><snippet>result = []
pizzas = Pizza.objects.select_related().filter(name='deluxe')
for pizza in pizzas:
    for toppings in pizza.toppings.all():
        result.append((pizza.pk, topping.name))
</snippet></ROW><ROW><id>1438650</id><snippet>[
    (1, topping_1),
    (1, topping_2),
    (2, topping_3),
    (2, topping_4),
]
</snippet></ROW><ROW><id>1439585</id><snippet>exit()</snippet></ROW><ROW><id>1439712</id><snippet>bisect</snippet></ROW><ROW><id>1439712</id><snippet>bisect</snippet></ROW><ROW><id>1439712</id><snippet>key=</snippet></ROW><ROW><id>1439712</id><snippet>sort</snippet></ROW><ROW><id>1439712</id><snippet>bisect</snippet></ROW><ROW><id>1439712</id><snippet>import bisect

listofdicts = [
  {'dt': '2009-%2.2d-%2.2dT12:00:00' % (m,d) }
  for m in range(4,9) for d in range(1,30)
  ]

class Indexer(object):
  def __init__(self, lod, key):
    self.lod = lod
    self.key = key
  def __len__(self):
    return len(self.lod)
  def __getitem__(self, idx):
    return self.lod[idx][self.key]


lookfor = listofdicts[len(listofdicts)//2]['dt']

def mid(res=listofdicts, target=lookfor):
    keys = [r['dt'] for r in res]
    return res[bisect.bisect_left(keys, target)]

def midi(res=listofdicts, target=lookfor):
    wrap = Indexer(res, 'dt')
    return res[bisect.bisect_left(wrap, target)]

if __name__ == '__main__':
  print '%d dicts on the list' % len(listofdicts)
  print 'Looking for', lookfor
  print mid(), midi()
assert mid() == midi()
</snippet></ROW><ROW><id>1439712</id><snippet>indexer.py</snippet></ROW><ROW><id>1439712</id><snippet>timeit</snippet></ROW><ROW><id>1439712</id><snippet>$ python indexer.py 
145 dicts on the list
Looking for 2009-06-15T12:00:00
{'dt': '2009-06-15T12:00:00'} {'dt': '2009-06-15T12:00:00'}
$ python -mtimeit -s'import indexer' 'indexer.mid()'
10000 loops, best of 3: 27.2 usec per loop
$ python -mtimeit -s'import indexer' 'indexer.midi()'
100000 loops, best of 3: 9.43 usec per loop
</snippet></ROW><ROW><id>1439712</id><snippet>import time

adt = '2009-09-10T12:00:00'

def dttosecs(dt=adt):
    # string to seconds since the beginning
    date,tim = dt.split('T')
    y,m,d = date.split('-')
    h,mn,s = tim.split(':')
    y = int(y)
    m = int(m)
    d = int(d)
    h = int(h)
    mn = int(mn)
    s = min(59,int(float(s)+0.5)) # round to neatest second
    s = int(s)
    secs = time.mktime((y,m,d,h,mn,s,0,0,-1))
    return secs

def simpler(dt=adt):
  return time.mktime(time.strptime(dt, '%Y-%m-%dT%H:%M:%S'))

if __name__ == '__main__':
  print adt, dttosecs(), simpler()
assert dttosecs() == simpler()
</snippet></ROW><ROW><id>1439712</id><snippet>dttosecs</snippet></ROW><ROW><id>1439712</id><snippet>simpler</snippet></ROW><ROW><id>1439712</id><snippet>dttosecs</snippet></ROW><ROW><id>1439712</id><snippet>simpler</snippet></ROW><ROW><id>1439772</id><snippet>export CC=/usr/bin/gcc-4.0
</snippet></ROW><ROW><id>1439782</id><snippet>JOBOBJECT_EXTENDED_LIMIT_INFORMATION</snippet></ROW><ROW><id>1439782</id><snippet>ProcessMemoryLimit</snippet></ROW><ROW><id>1439782</id><snippet>JOBOBJECT_BASIC_LIMIT_INFORMATION</snippet></ROW><ROW><id>1439852</id><snippet>types.FunctionType</snippet></ROW><ROW><id>1439852</id><snippet>def</snippet></ROW><ROW><id>1439852</id><snippet>function</snippet></ROW><ROW><id>1439879</id><snippet>", ".join('"{0}"'.format(i) for i in tup)
</snippet></ROW><ROW><id>1439879</id><snippet>", ".join('"%s"' % i for i in tup)
</snippet></ROW><ROW><id>1440041</id><snippet>sql = "insert into job_runners (hostname) values ('localhost') returning id"
rv = dbconn.query(sql)
id = rv.dictresult()[0]['id']
</snippet></ROW><ROW><id>1440125</id><snippet>py-postgresql</snippet></ROW><ROW><id>1440125</id><snippet>psycopg2</snippet></ROW><ROW><id>1440125</id><snippet>SQLAlchemy</snippet></ROW><ROW><id>1440125</id><snippet>psycopg2</snippet></ROW><ROW><id>1440125</id><snippet>py-postgresql</snippet></ROW><ROW><id>1440429</id><snippet>from recaptcha.client import captcha

if req.method == 'POST':
    response = captcha.submit(
        req.args['recaptcha_challenge_field'],
        req.args['recaptcha_response_field'],
        self.private_key,
        req.remote_addr,
        )
    if not response.is_valid:
        say_captcha_is_invalid()
    else:
        do_something_useful()
else:
    data['recaptcha_javascript'] = captcha.displayhtml(self.public_key)
    data['recaptcha_theme'] = self.theme
    return 'recaptchaticket.html', data, n
</snippet></ROW><ROW><id>1440467</id><snippet>trim_string(string)</snippet></ROW><ROW><id>1440467</id><snippet>string</snippet></ROW><ROW><id>1440467</id><snippet>string.trim()</snippet></ROW><ROW><id>1440467</id><snippet>#Pseudocode!!!

function talk(dog):
    if dog is aDog:
        print "bark!"
    raise "IS NOT A SUPPORTED ANIMAL!!!"

&gt;&gt;var dog as aDog
&gt;&gt;talk(dog)
"bark!"
&gt;&gt;var cat as aCat
&gt;&gt;talk(cat)
EXCEPTION: IS NOT A SUPPORTED ANIMAL!!!

# Lets add the cat
function talk(animal):
    if animal is aDog:
        print "bark!"
    if animal is aCat:
        print "miau!"
    raise "IS NOT A SUPPORTED ANIMAL!!!"
</snippet></ROW><ROW><id>1440467</id><snippet>class Animal:
     def __init__(self, name="skippy"):
         self.name = name
     def talk(self):
         raise "MUTE ANIMAL"

class Dog(Animal):
     def talk(self):
         print "bark!"

class Cat(Animal):
     def talk(self):
         print "miau!"

&gt;&gt;dog = new Dog()
&gt;&gt;dog.talk()
"bark!"
&gt;&gt;cat = new Cat()
&gt;&gt;cat.talk()
"miau!"
</snippet></ROW><ROW><id>1440467</id><snippet>if</snippet></ROW><ROW><id>1440467</id><snippet>talk</snippet></ROW><ROW><id>1440467</id><snippet>Animal</snippet></ROW><ROW><id>1440831</id><snippet>keybd_event</snippet></ROW><ROW><id>1440831</id><snippet>mouse_event</snippet></ROW><ROW><id>1441057</id><snippet>/proc</snippet></ROW><ROW><id>1441057</id><snippet>ps -p &lt;YOUR PID&gt; -o cmd h
</snippet></ROW><ROW><id>1441057</id><snippet>/proc</snippet></ROW><ROW><id>1441080</id><snippet>os.environ</snippet></ROW><ROW><id>1441080</id><snippet>'wsgi.input'</snippet></ROW><ROW><id>1441080</id><snippet>def application(environ, start_response):

    try:
        f = cgi.FieldStorage(fp=os.environ['wsgi.input'], environ=os.environ)
</snippet></ROW><ROW><id>1441080</id><snippet>os.environ</snippet></ROW><ROW><id>1441080</id><snippet>environ</snippet></ROW><ROW><id>1441929</id><snippet>.*(Togo.*?)(ACTIVE.*)
</snippet></ROW><ROW><id>1441929</id><snippet>.*</snippet></ROW><ROW><id>1441929</id><snippet>Togo</snippet></ROW><ROW><id>1441929</id><snippet>Togo</snippet></ROW><ROW><id>1441929</id><snippet>^[Togo]*?</snippet></ROW><ROW><id>1441929</id><snippet>^</snippet></ROW><ROW><id>1441929</id><snippet>[Togo]</snippet></ROW><ROW><id>1441929</id><snippet>T</snippet></ROW><ROW><id>1441929</id><snippet>o</snippet></ROW><ROW><id>1441929</id><snippet>g</snippet></ROW><ROW><id>1441929</id><snippet>[^Togo]</snippet></ROW><ROW><id>1441929</id><snippet>T</snippet></ROW><ROW><id>1441929</id><snippet>o</snippet></ROW><ROW><id>1441929</id><snippet>g</snippet></ROW><ROW><id>1442029</id><snippet>SESSION_COOKIE_DOMAIN = ".domain_name.com"</snippet></ROW><ROW><id>1442062</id><snippet>quality=</snippet></ROW><ROW><id>1442077</id><snippet>os.chdir</snippet></ROW><ROW><id>1442077</id><snippet>os.environ</snippet></ROW><ROW><id>1442151</id><snippet>#Python v2.6.2

import csv 
import urllib2
import re

urls = csv.reader(open('list.csv'))
for url in urls:
    response = urllib2.urlopen(url[0])
    html = response.read()
    print re.findall('td7.*?td',html)
</snippet></ROW><ROW><id>1442151</id><snippet>http://www.cnn.com
http://www.fark.com
http://www.cbc.ca
</snippet></ROW><ROW><id>1442312</id><snippet>wx.TE_NO_VSCROLL</snippet></ROW><ROW><id>1442794</id><snippet>seq</snippet></ROW><ROW><id>1442794</id><snippet>def zigzag(seq):
  return seq[::2], seq[1::2]
</snippet></ROW><ROW><id>1442794</id><snippet>seq</snippet></ROW><ROW><id>1442794</id><snippet>def zigzag(seq):
  results = [], []
  for i, e in enumerate(seq):
    results[i%2].append(e)
  return results
</snippet></ROW><ROW><id>1443128</id><snippet>os.system('c:/tmp/sample.txt')</snippet></ROW><ROW><id>1443128</id><snippet>EDITOR</snippet></ROW><ROW><id>1443128</id><snippet>os.system('%s %s' % (os.getenv('EDITOR'), filename))</snippet></ROW><ROW><id>1443181</id><snippet>&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;class MultiWindows(QtGui.QMainWindow):

    def __init__(self, param):
        self.__windows = []

    def addwindow(self, window):
        self.__windows.append(window)

    def show():
        for current_child_window in self.__windows:
             current_child_window.exec_() # probably show will do the same trick

class PlanetApp(QtGui.QDialog):
    def __init__(self, parent, planet):
       QtGui.QDialog.__init__(self, parent)
       # do cool stuff here

class AnimalApp(QtGui.QDialog):
    def __init__(self, parent, animal):
       QtGui.QDialog.__init__(self, parent)
       # do cool stuff here

if __name__=="__main__":
    import sys # really need this here??

    app = QtGui.QApplication(sys.argv)

    jupiter = PlanetApp(None, "jupiter")
    venus = PlanetApp(None, "venus")
    windows = MultiWindows()
    windows.addWindow(jupiter)
    windows.addWindow(venus)

    windows.show()
    app.exec_()
</snippet></ROW><ROW><id>1443266</id><snippet>__init__</snippet></ROW><ROW><id>1443266</id><snippet>foo</snippet></ROW><ROW><id>1443266</id><snippet>__path__</snippet></ROW><ROW><id>1443266</id><snippet>secret</snippet></ROW><ROW><id>1443266</id><snippet>secret</snippet></ROW><ROW><id>1443266</id><snippet>bar.py</snippet></ROW><ROW><id>1443266</id><snippet>__init__.py</snippet></ROW><ROW><id>1443266</id><snippet>foo</snippet></ROW><ROW><id>1443266</id><snippet>__path__.insert(0,'secret')
</snippet></ROW><ROW><id>1443266</id><snippet>secret</snippet></ROW><ROW><id>1443266</id><snippet>bar.py</snippet></ROW><ROW><id>1443266</id><snippet>foo.bar</snippet></ROW><ROW><id>1443266</id><snippet>secret</snippet></ROW><ROW><id>1443266</id><snippet>secret</snippet></ROW><ROW><id>1443266</id><snippet>__path__</snippet></ROW><ROW><id>1443266</id><snippet>bar.py</snippet></ROW><ROW><id>1443266</id><snippet>foo</snippet></ROW><ROW><id>1443266</id><snippet>   private
    └── trunk/
        └── secret/
            └── bar.py
    public
    └── trunk/
        ├── __init__.py
        └── foo/
            ├── __init__.py
            ├── bar.py
            ├── baz.py
            └── quux.py
</snippet></ROW><ROW><id>1443288</id><snippet>import ResourceX</snippet></ROW><ROW><id>1443288</id><snippet>MyApp</snippet></ROW><ROW><id>1443288</id><snippet>import ResourceXSimulated as ResourceX</snippet></ROW><ROW><id>1443288</id><snippet>from ResourceX import Y</snippet></ROW><ROW><id>1443288</id><snippet>from ResourceXSimulated import Y</snippet></ROW><ROW><id>1443288</id><snippet>MyApp</snippet></ROW><ROW><id>1443288</id><snippet>sys.modules</snippet></ROW><ROW><id>1443288</id><snippet>MyApp</snippet></ROW><ROW><id>1443288</id><snippet>import ResourceXSimulated
sys.modules['ResourceX'] = ResourceXSimulated
</snippet></ROW><ROW><id>1443288</id><snippet>ResourceX</snippet></ROW><ROW><id>1443304</id><snippet>iterator()</snippet></ROW><ROW><id>1443304</id><snippet>for alias in models.Alias.objects.iterator() :
    alias.update_points()
</snippet></ROW><ROW><id>1443517</id><snippet>re1 = '''^interface ([^#]*?$)[^#]*?BTO.*?^#$'''
</snippet></ROW><ROW><id>1444390</id><snippet>category = models.CharField("Category",max_length=1,primary_key=True)
</snippet></ROW><ROW><id>1444390</id><snippet>car = models.ForeignKey(Car)
</snippet></ROW><ROW><id>1444390</id><snippet>rents = Rent.objects.filter(car=self.category)
</snippet></ROW><ROW><id>1444860</id><snippet>from mercurial import error, lock

try:
    l = lock.lock("/path/to/lock", timeout=600) # wait at most 10 minutes
    # do something
except error.LockHeld:
     # couldn't take the lock
else:
    l.release()
</snippet></ROW><ROW><id>1445119</id><snippet>len()</snippet></ROW><ROW><id>1445119</id><snippet>len(s) == s.__len__()
</snippet></ROW><ROW><id>1445119</id><snippet>s</snippet></ROW><ROW><id>1445119</id><snippet>def call_special(receiver, *args, **keys):
    return receiver.__call_special__(*args, **keys)
</snippet></ROW><ROW><id>1445119</id><snippet>from peak.rules import abstract, when

@abstract
def serialize_object(object, target):
    pass

@when(serialize_object, (MyStuff, BinaryStream))
def serialize_object(object, target):
    target.writeUInt32(object.identifier)
    target.writeString(object.payload)

@when(serialize_object, (MyStuff, XMLStream))
def serialize_object(object, target):
    target.openElement("my-stuff")
    target.writeAttribute("id", str(object.identifier))
    target.writeText(object.payload)
    target.closeElement()
</snippet></ROW><ROW><id>1445119</id><snippet>serialize_object(MyStuff(10, "hello world"), XMLStream())
</snippet></ROW><ROW><id>1445119</id><snippet>peak.security</snippet></ROW><ROW><id>1445119</id><snippet>RuleDispatch</snippet></ROW><ROW><id>1445414</id><snippet>&gt;&gt;&gt; years = SecondsSinceEpoch / 31540000
</snippet></ROW><ROW><id>1445414</id><snippet>&gt;&gt;&gt; if calendar.isleap(yeariterator) == True:
</snippet></ROW><ROW><id>1445414</id><snippet>&gt;&gt;&gt; if calendar.isleap(yeariterator):
</snippet></ROW><ROW><id>1445414</id><snippet>&gt;&gt;&gt; yeariterator = 1969
&gt;&gt;&gt; iterator = 0
&gt;&gt;&gt; while yeariterator &lt; yearsfordayfunction:
&gt;&gt;&gt;     yeariterator = yeariterator + 1
</snippet></ROW><ROW><id>1445414</id><snippet>    for yeariterator in range(1970, yearsfordayfunction):
            if calendar.isleap(yeariterator) == True:
                    days = days - 366
            else:
                    days = days - 365
</snippet></ROW><ROW><id>1445414</id><snippet>def YearDay():
    SecondsSinceEpoch = int(time.time())
    days = SecondsSinceEpoch // 86400 # Double slash means floored int.
    year = 1970
    while True:
            if calendar.isleap(year):
                    days -= 366
            else:
                    days -= 365
            year += 1
            if calendar.isleap(year):
                    if days &lt;= 366:
                            return year, days
            else:
                    if days &lt;= 365:
                            return year, days


def MonthDay(year, day):
    if calendar.isleap(year):
            monthstarts = [0, 31, 60, 91, 121, 152, 182, 213, 244, 274, 305, 335, 366]
    else:
            monthstarts = [0, 31, 59, 90, 120, 151, 181, 212, 243, 273, 304, 334, 365]

    month = 0
    for start in monthstarts:
            if start &gt; day:
                    return month, day - monthstarts[month-1] + 1
            month += 1
</snippet></ROW><ROW><id>1445536</id><snippet>raw_id_fields = ['books']
</snippet></ROW><ROW><id>1445647</id><snippet>wait</snippet></ROW><ROW><id>1445647</id><snippet>communicate</snippet></ROW><ROW><id>1445647</id><snippet>wait</snippet></ROW><ROW><id>1446132</id><snippet>complex</snippet></ROW><ROW><id>1446132</id><snippet>type</snippet></ROW><ROW><id>1446132</id><snippet>self.type</snippet></ROW><ROW><id>1446132</id><snippet>Python 2.6.2 (release26-maint, Apr 19 2009, 01:58:18) 
[GCC 4.3.3] on linux2
Type "help", "copyright", "credits" or "license" for more information.
&gt;&gt;&gt; class Foo(object):
...     type = 'abc'
... 
&gt;&gt;&gt; f = Foo()
&gt;&gt;&gt; f.type
'abc'
&gt;&gt;&gt; class Bar(object):
...     complex = 123+4j
... 
&gt;&gt;&gt; bar = Bar()
&gt;&gt;&gt; bar.complex
(123+4j)
&gt;&gt;&gt;
</snippet></ROW><ROW><id>1446144</id><snippet>library(maptools)
##substitute your shapefiles here
state.map &lt;- readShapeSpatial("maps/st24_d00.shp")
zip.map &lt;- readShapeSpatial("maps/zt24_d00.shp")
## this is the variable we will be plotting
zip.map@data$noise &lt;- rnorm(nrow(zip.map@data))
## put the lab point x y locations of the zip codes in the data frame for easy retrieval
labelpos &lt;- data.frame(do.call(rbind, lapply(zip.map@polygons, function(x) x@labpt)))
names(labelpos) &lt;- c("x","y")                        
zip.map@data &lt;- data.frame(zip.map@data, labelpos)
## plot it
png(file="map.png")
## plot colors
plot.heat(zip.map,state.map,z="noise",breaks=c(-Inf,-2,-1,0,1,2,Inf))
## plot text
with(zip.map@data[sample(1:nrow(zip.map@data), 10),] , text(x,y,NAME))
dev.off()
</snippet></ROW><ROW><id>1446170</id><snippet>from django.utils import simplejson


def view(request, …):
    js_data = simplejson.dumps(my_dict)
    …
    render_template_to_response("my_template.html", {"my_data": js_data, …})
</snippet></ROW><ROW><id>1446170</id><snippet>&lt;script type="text/javascript"&gt;
    data_from_django = {{ my_data }};
    widget.init(data_from_django);
&lt;/script&gt;
</snippet></ROW><ROW><id>1446170</id><snippet>time_t = time.mktime(my_date.timetuple())
</snippet></ROW><ROW><id>1446170</id><snippet>time_t = {{ time_t }}</snippet></ROW><ROW><id>1446170</id><snippet>my_date = new Date();
my_date.setTime(time_t*1000);
</snippet></ROW><ROW><id>1446411</id><snippet>Py_UNICODE
PyUnicode_GetMax(void)
{
#ifdef Py_UNICODE_WIDE
    return 0x10FFFF;
#else
    /* This is actually an illegal character, so it should
       not be passed to unichr. */
    return 0xFFFF;
#endif
}
</snippet></ROW><ROW><id>1446657</id><snippet>class Base(object):
    def __init__(name=None,surname=None,age=None):
        #some code

class Child(Base):
    def __init__(test=None,**kwargs):
        Base.__init__(self,**kwargs)
</snippet></ROW><ROW><id>1446657</id><snippet>kwargs</snippet></ROW><ROW><id>1446657</id><snippet>Child</snippet></ROW><ROW><id>1446657</id><snippet>test</snippet></ROW><ROW><id>1446657</id><snippet>c = Child('red herring')</snippet></ROW><ROW><id>1446657</id><snippet>f</snippet></ROW><ROW><id>1446657</id><snippet>kwargs</snippet></ROW><ROW><id>1446870</id><snippet>from __future__ import division
import string 

def istext(filename):
    s=open(filename).read(512)
    text_characters = "".join(map(chr, range(32, 127)) + list("\n\r\t\b"))
    _null_trans = string.maketrans("", "")
    if not s:
        # Empty files are considered text
        return True
    if "\0" in s:
        # Files with null bytes are likely binary
        return False
    # Get the non-text characters (maps a character to itself then
    # use the 'remove' option to get rid of the text characters.)
    t = s.translate(_null_trans, text_characters)
    # If more than 30% non-text characters, then
    # this is considered a binary file
    if len(t)/len(s) &gt; 0.30:
        return False
    return True
</snippet></ROW><ROW><id>1447400</id><snippet>    req.send_response(200)
    req.send_header('Content-Type', 'application/zip')
    req.send_header('Content-Disposition', 'attachment;'
                    'filename=%s' % filename)
</snippet></ROW><ROW><id>1447512</id><snippet>r = FH(file('classfhtry.csv', 'r'))
for line in r:
    print line
</snippet></ROW><ROW><id>1447581</id><snippet>json</snippet></ROW><ROW><id>1447581</id><snippet>import json
from json import encoder
encoder.FLOAT_REPR = lambda o: format(o, '.2f')

print json.dumps(23.67)
print json.dumps([23.67, 23.97, 23.87])
</snippet></ROW><ROW><id>1447581</id><snippet>23.67
[23.67, 23.97, 23.87]
</snippet></ROW><ROW><id>1447581</id><snippet>FLOAT_REPR</snippet></ROW><ROW><id>1447581</id><snippet>json</snippet></ROW><ROW><id>1447616</id><snippet>/hello?name=joe</snippet></ROW><ROW><id>1447616</id><snippet>/hello</snippet></ROW><ROW><id>1447616</id><snippet>name</snippet></ROW><ROW><id>1447700</id><snippet>socket.SOCK_STREAM</snippet></ROW><ROW><id>1447700</id><snippet>socket.SOCK_DGRAM</snippet></ROW><ROW><id>1448006</id><snippet>def foo(*args):
    pass
foo = deco(foo)

@deco
def foo(*args):
    pass
</snippet></ROW><ROW><id>1448006</id><snippet>bar</snippet></ROW><ROW><id>1448006</id><snippet>foo</snippet></ROW><ROW><id>1448006</id><snippet>foo = deco(bar)</snippet></ROW><ROW><id>1448006</id><snippet>bar</snippet></ROW><ROW><id>1448006</id><snippet>foo</snippet></ROW><ROW><id>1448006</id><snippet>bar</snippet></ROW><ROW><id>1448006</id><snippet>deco</snippet></ROW><ROW><id>1448006</id><snippet>__call__</snippet></ROW><ROW><id>1448173</id><snippet>IDLE.app</snippet></ROW><ROW><id>1448173</id><snippet>bash_profile</snippet></ROW><ROW><id>1448173</id><snippet>~/.MacOSX/environment.plist</snippet></ROW><ROW><id>1448173</id><snippet>IDLE</snippet></ROW><ROW><id>1448173</id><snippet>$ export PYTHONPATH= ...
$ /usr/local/bin/idle2.6
</snippet></ROW><ROW><id>1448173</id><snippet>open(1)</snippet></ROW><ROW><id>1448173</id><snippet>open</snippet></ROW><ROW><id>1448173</id><snippet>Run Shell Script</snippet></ROW><ROW><id>1448173</id><snippet>export PYTHONPATH= ...
open -a "/Applications/Python 2.6/IDLE.app"
</snippet></ROW><ROW><id>1448173</id><snippet>Application</snippet></ROW><ROW><id>1448227</id><snippet>telnet</snippet></ROW><ROW><id>1448227</id><snippet>telnet 127.0.0.1 3000
</snippet></ROW><ROW><id>1448227</id><snippet>telnet</snippet></ROW><ROW><id>1448543</id><snippet>pylab</snippet></ROW><ROW><id>1448543</id><snippet>$ ipython -pylab
</snippet></ROW><ROW><id>1448543</id><snippet>In [1]: from pylab import*

In [2]: subplot(111,projection="hammer")
Out[2]: &lt;matplotlib.axes.HammerAxesSubplot object at 0x2241050&gt;

In [3]:
</snippet></ROW><ROW><id>1448567</id><snippet>p = Popen(['gcc', '-o', 'hello', 'hello.c'], stdout=subprocess.PIPE, stderr=stderr=subprocess.STDOUT)
</snippet></ROW><ROW><id>1448834</id><snippet>print "%*s, blah" % (max_title_width,column)
</snippet></ROW><ROW><id>1448834</id><snippet>max_title_width</snippet></ROW><ROW><id>1448834</id><snippet>&gt;&gt;&gt; text = "abcdef"
&gt;&gt;&gt; print "&lt;%*s&gt;" % (len(text)+2,text)
&lt;  abcdef&gt;
&gt;&gt;&gt; print "&lt;%-*s&gt;" % (len(text)+2,text)
&lt;abcdef  &gt;
&gt;&gt;&gt;
</snippet></ROW><ROW><id>1448834</id><snippet>&gt;&gt;&gt; print "&lt;%*s&gt;" % (len(text)-2,text)
&lt;abcdef&gt;
</snippet></ROW><ROW><id>1448834</id><snippet>&gt;&gt;&gt; print "&lt;%.*s&gt;" % (len(text)-2,text)
&lt;abcd&gt;
</snippet></ROW><ROW><id>1448834</id><snippet>%
- if left justified
* or integer - min width (if '*', insert variable length in data tuple)
.* or .integer - max width (if '*', insert variable length in data tuple)
</snippet></ROW><ROW><id>1448865</id><snippet>$ cat /etc/*-release
DISTRIB_CODENAME=hardy
DISTRIB_DESCRIPTION="Ubuntu 8.04.2"
DISTRIB_ID=Ubuntu
DISTRIB_RELEASE=8.04
...etc, etc...
</snippet></ROW><ROW><id>1448865</id><snippet>/etc/lsb-release</snippet></ROW><ROW><id>1448865</id><snippet>*-release</snippet></ROW><ROW><id>1448865</id><snippet>cat</snippet></ROW><ROW><id>1449170</id><snippet>setuptools</snippet></ROW><ROW><id>1449170</id><snippet>setuptools</snippet></ROW><ROW><id>1449170</id><snippet>setup</snippet></ROW><ROW><id>1449170</id><snippet>Extension</snippet></ROW><ROW><id>1449170</id><snippet>distutils</snippet></ROW><ROW><id>1449170</id><snippet>setup_*.py</snippet></ROW><ROW><id>1449170</id><snippet>PYTHONPATH</snippet></ROW><ROW><id>1449704</id><snippet>easy_install</snippet></ROW><ROW><id>1449704</id><snippet>C:\Python26\Scripts</snippet></ROW><ROW><id>1449843</id><snippet>#define</snippet></ROW><ROW><id>1449843</id><snippet>config/ftoption.h</snippet></ROW><ROW><id>1449866</id><snippet>random.randint(a, b)</snippet></ROW><ROW><id>1449866</id><snippet>Return a random integer N such that a &lt;= N &lt;= b.
</snippet></ROW><ROW><id>1449866</id><snippet>random.randint(-1,1)</snippet></ROW><ROW><id>1449866</id><snippet>5 * random.randint(1,3)</snippet></ROW><ROW><id>1449866</id><snippet>random.choice([6, 25, 33])</snippet></ROW><ROW><id>1449948</id><snippet>// Returns a new reference
PyObject *ObjcToPyObject(id object)
{
    if (object == nil) {
    	// This technically doesn't need to be an extra case, 
    	// but you may want to differentiate it for error checking
    	return NULL;
    } else if ([object isKindOfClass:[NSString class]]) {
    	return PyString_FromString([object UTF8String]);
    } else if ([object isKindOfClass:[NSNumber class]]) {
    	// You could probably do some extra checking here if you need to
    	// with the -objCType method.
    	return PyLong_FromLong([object longValue]);
    } else if ([object isKindOfClass:[NSArray class]]) {
    	// You may want to differentiate between NSArray (analagous to tuples) 
    	// and NSMutableArray (analagous to lists) here.
    	Py_ssize_t i, len = [object count];
    	PyObject *list = PyList_New(len);
    	for (i = 0; i &lt; len; ++i) {
    		PyObject *item = ObjcToPyObject([object objectAtIndex:i]);
    		NSCAssert(item != NULL, @"Can't add NULL item to Python List");
    		// Note that PyList_SetItem() "steals" the reference to the passed item.
    		// (i.e., you do not need to release it)
    		PyList_SetItem(list, i, item);
    	}
    	return list;
    } else if ([object isKindOfClass:[NSDictionary class]]) {
    	PyObject *dict = PyDict_New();
    	for (id key in object) {
    		PyObject *pyKey = ObjcToPyObject(key);
    		NSCAssert(pyKey != NULL, @"Can't add NULL key to Python Dictionary");
    		PyObject *pyItem = ObjcToPyObject([object objectForKey:key]);
    		NSCAssert(pyItem != NULL, @"Can't add NULL item to Python Dictionary");
    		PyDict_SetItem(dict, pyKey, pyItem);
    		Py_DECREF(pyKey);
    		Py_DECREF(pyItem);
    	}
    	return dict;
    } else {
    	NSLog(@"ObjcToPyObject() could not convert Obj-C object to PyObject.");
    	return NULL;
    }
}
</snippet></ROW><ROW><id>1450154</id><snippet>proxy = urllib2.ProxyHandler({'http': '127.0.0.1'})
opener = urllib2.build_opener(proxy)
urllib2.install_opener(opener)
urllib2.urlopen('http://www.google.com')
</snippet></ROW><ROW><id>1450175</id><snippet>L[:] = [ item for i,item in enumerate(L) if i not in I ]
</snippet></ROW><ROW><id>1450175</id><snippet>I</snippet></ROW><ROW><id>1450175</id><snippet>isValid</snippet></ROW><ROW><id>1450175</id><snippet>L[:] = [ item for item in L if item.isValid() ]
</snippet></ROW><ROW><id>1450175</id><snippet>I = set()
for i in range(len(L)):
    if not L[i].isValid():
        I.add(i)

for i in sorted(I, reverse=True):
    del L[i]
</snippet></ROW><ROW><id>1450247</id><snippet>class ABC(models.Model):
    field1 = models.CharField(max_length=200)
    field2 = models.CharField(max_length=100)
    ....

    class Meta:
        abstract = True

class Parent(ABC):
    ....

class Child(ABC):
    parent = models.ForeignKey(Parent)
</snippet></ROW><ROW><id>1450341</id><snippet>&gt;&gt;&gt; def test():
...     exec "a = 5"
...     print a
...
&gt;&gt;&gt; test()
5
</snippet></ROW><ROW><id>1450539</id><snippet>import re
if re.search(r"^[\w\d'-]+$", name):
    # success
</snippet></ROW><ROW><id>1450539</id><snippet>if set("#$").intersection(name):
    print "bad chars in the name"
</snippet></ROW><ROW><id>1450966</id><snippet>&gt;&gt;&gt; colors = ['red', 'orange', 'yellow', 'green', 'blue', 'indigo', 'violet']
</snippet></ROW><ROW><id>1450966</id><snippet>delta</snippet></ROW><ROW><id>1450966</id><snippet>0</snippet></ROW><ROW><id>1450966</id><snippet>delta.max</snippet></ROW><ROW><id>1450966</id><snippet>step</snippet></ROW><ROW><id>1450966</id><snippet>&gt;&gt;&gt; step = delta.max / len(colors)
</snippet></ROW><ROW><id>1450966</id><snippet>data</snippet></ROW><ROW><id>1450966</id><snippet>&gt;&gt;&gt; color = colors[math.trunc(data / step)]
</snippet></ROW><ROW><id>1450966</id><snippet>Rainbow (red to violet, 790-380 nm)</snippet></ROW><ROW><id>1450966</id><snippet>wavelen2rgb.py</snippet></ROW><ROW><id>1451343</id><snippet>def focus_next_window(event):
    event.widget.tk_focusNext().focus()
    return("break")

text_widget=Text(...)
text_widget.bind("&lt;Tab&gt;", focus_next_window)
</snippet></ROW><ROW><id>1451343</id><snippet>tk_focusNext()</snippet></ROW><ROW><id>1451343</id><snippet>focus()</snippet></ROW><ROW><id>1451343</id><snippet>"break"</snippet></ROW><ROW><id>1451343</id><snippet>bind_class()</snippet></ROW><ROW><id>1451343</id><snippet>bind()</snippet></ROW><ROW><id>1451379</id><snippet>.so</snippet></ROW><ROW><id>1451379</id><snippet>pam_python</snippet></ROW><ROW><id>1451407</id><snippet>.translate</snippet></ROW><ROW><id>1451407</id><snippet>&gt;&gt;&gt; x='aaa12333bb445bb54b5b52'
&gt;&gt;&gt; import string
&gt;&gt;&gt; all=string.maketrans('','')
&gt;&gt;&gt; nodigs=all.translate(all, string.digits)
&gt;&gt;&gt; x.translate(all, nodigs)
'1233344554552'
&gt;&gt;&gt; 
</snippet></ROW><ROW><id>1451407</id><snippet>string.maketrans</snippet></ROW><ROW><id>1451407</id><snippet>''.join(chr(x) for x in range(256))</snippet></ROW><ROW><id>1451407</id><snippet>.translate</snippet></ROW><ROW><id>1451407</id><snippet>all</snippet></ROW><ROW><id>1451407</id><snippet>.translate</snippet></ROW><ROW><id>1451407</id><snippet>$ python -mtimeit -s'import string; all=string.maketrans("", ""); nodig=all.translate(all, string.digits); x="aaa12333bb445bb54b5b52"' 'x.translate(all, nodig)'
1000000 loops, best of 3: 1.04 usec per loop
$ python -mtimeit -s'import re;  x="aaa12333bb445bb54b5b52"' 're.sub(r"\D", "", x)'100000 loops, best of 3: 7.9 usec per loop
</snippet></ROW><ROW><id>1451407</id><snippet>translate</snippet></ROW><ROW><id>1451407</id><snippet>$ python -mtimeit -s'x="aaa12333bb445bb54b5b52"' '"".join(i for i in x if i.isdigit())'
100000 loops, best of 3: 11.5 usec per loop
</snippet></ROW><ROW><id>1451407</id><snippet>.translate</snippet></ROW><ROW><id>1451407</id><snippet>.translate</snippet></ROW><ROW><id>1451407</id><snippet>None</snippet></ROW><ROW><id>1451407</id><snippet>import string

class Del:
  def __init__(self, keep=string.digits):
    self.comp = dict((ord(c),c) for c in keep)
  def __getitem__(self, k):
    return self.comp.get(k)

DD = Del()

x='aaa12333bb445bb54b5b52'
x.translate(DD)
</snippet></ROW><ROW><id>1451407</id><snippet>'1233344554552'</snippet></ROW><ROW><id>1451407</id><snippet>$ python3.1 -mtimeit -s'import re;  x="aaa12333bb445bb54b5b52"' 're.sub(r"\D", "", x)'
100000 loops, best of 3: 8.43 usec per loop
$ python3.1 -mtimeit -s'import xx; x="aaa12333bb445bb54b5b52"' 'x.translate(xx.DD)'
10000 loops, best of 3: 24.3 usec per loop
</snippet></ROW><ROW><id>1451857</id><snippet>__hash__</snippet></ROW><ROW><id>1451857</id><snippet>$foo{1}, $foo{1.0}, and $foo{"1"}</snippet></ROW><ROW><id>1451857</id><snippet>%foo</snippet></ROW><ROW><id>1451857</id><snippet>try: ... except: ...</snippet></ROW><ROW><id>1451910</id><snippet>set.issubset</snippet></ROW><ROW><id>1451910</id><snippet>&gt;&gt;&gt; set(['spam', 'eggs']).issubset('/home/user/spam/eggs'.split('/'))
True
</snippet></ROW><ROW><id>1451914</id><snippet>db.commit()</snippet></ROW><ROW><id>1452219</id><snippet>from xml.etree import cElementTree as ET
import urllib

def get_bass_fishing_URLs():
  results = []
  data = urllib.urlopen(
      'http://gdata.youtube.com/feeds/api/videos/-/bass/fishing/')
  tree = ET.parse(data)
  ns = '{http://www.w3.org/2005/Atom}'
  for entry in tree.findall(ns + 'entry'):
    for link in entry.findall(ns + 'link'):
      if link.get('rel') == 'alternate':
        results.append(link.get('href'))
</snippet></ROW><ROW><id>1452321</id><snippet>ctypes</snippet></ROW><ROW><id>1452321</id><snippet>os</snippet></ROW><ROW><id>1452321</id><snippet>ctypes</snippet></ROW><ROW><id>1452321</id><snippet>junction.exe</snippet></ROW><ROW><id>1452321</id><snippet>dir</snippet></ROW><ROW><id>1452500</id><snippet>0</snippet></ROW><ROW><id>1452500</id><snippet>0L</snippet></ROW><ROW><id>1452500</id><snippet>0.0</snippet></ROW><ROW><id>1452500</id><snippet>0j</snippet></ROW><ROW><id>1452500</id><snippet>''</snippet></ROW><ROW><id>1452500</id><snippet>()</snippet></ROW><ROW><id>1452500</id><snippet>[]</snippet></ROW><ROW><id>1452500</id><snippet>{}</snippet></ROW><ROW><id>1452500</id><snippet>__nonzero__()</snippet></ROW><ROW><id>1452500</id><snippet>__len__()</snippet></ROW><ROW><id>1452500</id><snippet>False</snippet></ROW><ROW><id>1452500</id><snippet>False</snippet></ROW><ROW><id>1452500</id><snippet>True</snippet></ROW><ROW><id>1452532</id><snippet>numpy</snippet></ROW><ROW><id>1452711</id><snippet>zip</snippet></ROW><ROW><id>1452711</id><snippet>&gt;&gt;&gt; for a,b in zip(xrange(10), xrange(10)):
...     print a+b
... 
0
2
4
6
8
10
12
14
16
18
</snippet></ROW><ROW><id>1452711</id><snippet>zip</snippet></ROW><ROW><id>1452711</id><snippet>izip</snippet></ROW><ROW><id>1452711</id><snippet>zip</snippet></ROW><ROW><id>1452711</id><snippet>import itertools</snippet></ROW><ROW><id>1452711</id><snippet>zip</snippet></ROW><ROW><id>1452905</id><snippet>namespace bhn = big_honkin_name;
</snippet></ROW><ROW><id>1452905</id><snippet>using big_honkin_name::fn;
int a = fn(27);
</snippet></ROW><ROW><id>1452945</id><snippet>XXX</snippet></ROW><ROW><id>1452945</id><snippet>FIXME</snippet></ROW><ROW><id>1452945</id><snippet>TODO</snippet></ROW><ROW><id>1452945</id><snippet>HACK</snippet></ROW><ROW><id>1452945</id><snippet>XXX</snippet></ROW><ROW><id>1453013</id><snippet>None</snippet></ROW><ROW><id>1453013</id><snippet>pop</snippet></ROW><ROW><id>1453013</id><snippet>dict(a, **award_dict)</snippet></ROW><ROW><id>1453013</id><snippet>.update</snippet></ROW><ROW><id>1453013</id><snippet>a</snippet></ROW><ROW><id>1453013</id><snippet>dict(name=name, description=desc % count, points=points, parent_award=parent,
     **award_dict)
</snippet></ROW><ROW><id>1453013</id><snippet>a.update(award_dict)</snippet></ROW><ROW><id>1453013</id><snippet>award_dict</snippet></ROW><ROW><id>1453013</id><snippet>award_dict</snippet></ROW><ROW><id>1453013</id><snippet>**</snippet></ROW><ROW><id>1453013</id><snippet>dict(award_dict, name=name</snippet></ROW><ROW><id>1453254</id><snippet>a = 'something'
def boo():
    a = a
boo()
</snippet></ROW><ROW><id>1453254</id><snippet>global</snippet></ROW><ROW><id>1453254</id><snippet>nonlocal</snippet></ROW><ROW><id>1453254</id><snippet>def make_class(_a):
    class A(object):
        a = _a
    return A
</snippet></ROW><ROW><id>1453736</id><snippet>Basket.objects.annotate(num_fruits=Count('fruits')).filter(num_fruits=len(Fruit.objects.all()))
</snippet></ROW><ROW><id>1453822</id><snippet>MyPoint</snippet></ROW><ROW><id>1453822</id><snippet>MyPoint</snippet></ROW><ROW><id>1453822</id><snippet>allocate_point()</snippet></ROW><ROW><id>1453822</id><snippet>mylib.so</snippet></ROW><ROW><id>1453822</id><snippet>free_point(p)</snippet></ROW><ROW><id>1453822</id><snippet>mylib.so</snippet></ROW><ROW><id>1454120</id><snippet>$revString = '$Revision: 144$';
if(preg_match('/: ([0-9]+)\$/', $revString, $matches) {
    echo 'Revision is ' . $matches[1];
}
</snippet></ROW><ROW><id>1454779</id><snippet>math</snippet></ROW><ROW><id>1454779</id><snippet>decimal</snippet></ROW><ROW><id>1454779</id><snippet>datetime</snippet></ROW><ROW><id>1454779</id><snippet>time</snippet></ROW><ROW><id>1454779</id><snippet>re</snippet></ROW><ROW><id>1454779</id><snippet>glob</snippet></ROW><ROW><id>1454779</id><snippet>fnmatch</snippet></ROW><ROW><id>1454779</id><snippet>os</snippet></ROW><ROW><id>1454779</id><snippet>os.path</snippet></ROW><ROW><id>1454779</id><snippet>tempfile</snippet></ROW><ROW><id>1454779</id><snippet>shutil</snippet></ROW><ROW><id>1454779</id><snippet>sqlite</snippet></ROW><ROW><id>1454779</id><snippet>json</snippet></ROW><ROW><id>1454779</id><snippet>random</snippet></ROW><ROW><id>1454779</id><snippet>urllib2</snippet></ROW><ROW><id>1454779</id><snippet>logging</snippet></ROW><ROW><id>1454779</id><snippet>wsgiref</snippet></ROW><ROW><id>1455009</id><snippet>self.__class__</snippet></ROW><ROW><id>1455009</id><snippet>self</snippet></ROW><ROW><id>1455009</id><snippet>class Basket(object):

  def __init__(self):
    # add all the properties
    setattr(self.__class__, 'Apple', property(lambda s : 'Apple') )
    setattr(self.__class__, 'Pear', property(lambda s : 'Pear') )

  # normal property
  Air = property(lambda s : "Air")

if __name__ == "__main__":
  b = Basket()
  print b.Air # outputs: "Air"
  print b.Apple # outputs: "Apple"
  print b.Pear # outputs: "Pear"
</snippet></ROW><ROW><id>1455009</id><snippet>p</snippet></ROW><ROW><id>1455009</id><snippet>p</snippet></ROW><ROW><id>1455009</id><snippet>p</snippet></ROW><ROW><id>1455015</id><snippet>Thread.start()</snippet></ROW><ROW><id>1455015</id><snippet>Thread</snippet></ROW><ROW><id>1455015</id><snippet>run</snippet></ROW><ROW><id>1455015</id><snippet>target</snippet></ROW><ROW><id>1455015</id><snippet>start</snippet></ROW><ROW><id>1455015</id><snippet>run</snippet></ROW><ROW><id>1455015</id><snippet>t.run()</snippet></ROW><ROW><id>1455303</id><snippet>#! /usr/bin/env python

import re

token_re = re.compile(r'use\s+([a-z0-9]+)\s+code', re.IGNORECASE)
def find_token(s):
    m = token_re.search(s)
    if m is not None:
        token = m.group(1)
        if token.isupper():
            return token

if __name__ == '__main__':
    for s in ['Use HELLO1 code',
              'USE hello1 CODE',
              'this does not match',
             ]:
        print s, '-&gt;',
        print find_token(s)
</snippet></ROW><ROW><id>1455303</id><snippet>Use HELLO1 code -&gt; HELLO1
USE hello1 CODE -&gt; None
this does not match -&gt; None
</snippet></ROW><ROW><id>1455589</id><snippet>archive_index</snippet></ROW><ROW><id>1455589</id><snippet>GenericRelation</snippet></ROW><ROW><id>1455589</id><snippet>dates</snippet></ROW><ROW><id>1455623</id><snippet>&gt;&gt;&gt; thetuple = (1, 2, 3)
&gt;&gt;&gt; print "this is a tuple: %s" % (thetuple,)
this is a tuple: (1, 2, 3)
</snippet></ROW><ROW><id>1455623</id><snippet>(thetuple,)</snippet></ROW><ROW><id>1455666</id><snippet>$ cd
$ mkdir opt
$ mkdir downloads
$ cd downloads
$ wget http://www.python.org/ftp/python/2.6.2/Python-2.6.2.tgz
$ tar xvzf Python-2.6.2.tgz
$ cd Python-2.6.2
$ ./configure --prefix=$HOME/opt/ --enable-unicode=ucs4
$ make
$ make install
</snippet></ROW><ROW><id>1455666</id><snippet>export PATH=$HOME/opt/bin/:$PATH
export PYTHONPATH=$HOME/opt/lib:$HOME/opt/lib/site-packages:$PYTHONPATH
</snippet></ROW><ROW><id>1455666</id><snippet>$ cd
$ source .bash_profile
$ python -V
</snippet></ROW><ROW><id>1455726</id><snippet>subprocess</snippet></ROW><ROW><id>1455726</id><snippet>pexpect</snippet></ROW><ROW><id>1455726</id><snippet>wexpect</snippet></ROW><ROW><id>1455851</id><snippet>def create_object(type_name):
    return type_name()
</snippet></ROW><ROW><id>1456645</id><snippet>import random

words = [line.strip() for line in open('/etc/dictionaries-common/words')]
print random.choice(words)
</snippet></ROW><ROW><id>1456860</id><snippet>#!/usr/bin/env python
import fileinput, sys

pred = eval('lambda line: ' + sys.argv[1])
print sum(1 for line in fileinput.input(sys.argv[2:]) if pred(line))
</snippet></ROW><ROW><id>1456860</id><snippet>pywc.py predicate [FILE]...</snippet></ROW><ROW><id>1456860</id><snippet>predicate</snippet></ROW><ROW><id>1456860</id><snippet>FILE</snippet></ROW><ROW><id>1456860</id><snippet>FILE</snippet></ROW><ROW><id>1457179</id><snippet>Find: ^([a-z]+) \d
Replace with: \1
</snippet></ROW><ROW><id>1457179</id><snippet>^([a-z]+)</snippet></ROW><ROW><id>1457179</id><snippet> \d</snippet></ROW><ROW><id>1457179</id><snippet>\1</snippet></ROW><ROW><id>1457187</id><snippet>from ftplib import FTP
import os

ftp = FTP()
ftp.connect(server, port)
ftp.login(user, pwd)

files = ftp.nlst() # get a list of files on the server
# decide which file we want

fn = 'test.py' # filename on server and for local storage
d = 'c:/temp/' # local directory to store file
path = os.path.join(d,fn)
r = ftp.retrbinary('RETR %s' % fn, open(path, 'wb').write)
print(r) # should be: 226 Transfer OK

f = open(path, 'rb') # send file at path
r = ftp.storbinary('STOR %s' % fn, f) # call it fn on server
print(r) # should be: 226 Transfer OK
f.close()

ftp.quit()
</snippet></ROW><ROW><id>1457354</id><snippet>import traceback
</snippet></ROW><ROW><id>1457789</id><snippet>os.system</snippet></ROW><ROW><id>1457789</id><snippet>os.system</snippet></ROW><ROW><id>1457789</id><snippet>os.system</snippet></ROW><ROW><id>1457789</id><snippet>subprocess</snippet></ROW><ROW><id>1457789</id><snippet>mkdir</snippet></ROW><ROW><id>1457789</id><snippet>echo</snippet></ROW><ROW><id>1457789</id><snippet>subprocess.Popen()</snippet></ROW><ROW><id>1457789</id><snippet>os.system('''ssh -q %(REMOTEHOST)s "mkdir ~/.ssh 2&gt;/dev/null; chmod 700 ~/.ssh; echo '%(KEYCODE)s' &gt;&gt; ~/.ssh/authorized_keys; chmod 644 ~/.ssh/authorized_keys"''' % {
  'REMOTEHOST':'user@remote',
  'KEYCODE':open(os.path.join(os.environ['HOME'], '.ssh/id_rsa.pub'),'r').read()
})
</snippet></ROW><ROW><id>1457875</id><snippet>S = set(['a', 'ab', 'ba'])

collect = set()
step = set([''])
while step:
   step = set(a+b for a in step for b in S if len(a+b) &lt;= 6)
   collect |= step

print sorted(collect)
</snippet></ROW><ROW><id>1458217</id><snippet>print '%.3f' % float(1.0000)
</snippet></ROW><ROW><id>1458217</id><snippet>decimal</snippet></ROW><ROW><id>1458217</id><snippet>from decimal import Decimal
d = Decimal('1.0000')
</snippet></ROW><ROW><id>1458217</id><snippet>decimal</snippet></ROW><ROW><id>1458217</id><snippet>float</snippet></ROW><ROW><id>1458217</id><snippet>Decimal</snippet></ROW><ROW><id>1459050</id><snippet>static string Hex2Binary(string hexvalue)
{
    StringBuilder binaryval = new StringBuilder();
    for(int i=0; i &lt; hexvalue.Length; i++)
    {
        string byteString = hexvalue.Substring(i, 1);
        byte b = Convert.ToByte(byteString, 16);
        binaryval.Append(Convert.ToString(b, 2).PadLeft(4, '0'));
    }
    return binaryval.ToString();
}
</snippet></ROW><ROW><id>1459050</id><snippet>static string Hex2Base64(string hexvalue)
{
	if (hexvalue.Length % 2 != 0)
		hexvalue = "0" + hexvalue;
	int len = hexvalue.Length / 2;
	byte[] bytes = new byte[len];
	for(int i = 0; i &lt; len; i++)
	{
		string byteString = hexvalue.Substring(2 * i, 2);
		bytes[i] = Convert.ToByte(byteString, 16);
	}
	return Convert.ToBase64String(bytes);
}
</snippet></ROW><ROW><id>1459154</id><snippet>import zipfile
z = zipfile.ZipFile('c:/a_zip_file')
print 'total files size=', sum(e.file_size for e in z.infolist())
z.close()
</snippet></ROW><ROW><id>1459587</id><snippet>def add(x):
    from mypackage import mymodule
    print "mypackage.mymodule path", mymodule
    mymodule.l.append(x)
    print "updated list",mymodule.l

def get():
    import mymodule
    print "mymodule path", mymodule
    return mymodule.l

add(1)
print "lets check",get()

add(1)
print "lets check again",get()


$ export PYTHONPATH=.
$ python  mypackage/main.py 

mypackage.mymodule path &lt;module 'mypackage.mymodule' from '/tmp/mypackage/mymodule.pyc'&gt;
mymodule path &lt;module 'mymodule' from '/tmp/mypackage/mymodule.pyc'&gt;
</snippet></ROW><ROW><id>1459587</id><snippet>realmain.py:
from mypackage import main
</snippet></ROW><ROW><id>1459587</id><snippet>mypackage.mymodule path &lt;module 'mypackage.mymodule' from '/tmp/mypackage/mymodule.pyc'&gt;
mymodule path &lt;module 'mypackage.mymodule' from '/tmp/mypackage/mymodule.pyc'&gt;
</snippet></ROW><ROW><id>1460108</id><snippet>from frontend.stars.models import Star
</snippet></ROW><ROW><id>1460108</id><snippet>Star</snippet></ROW><ROW><id>1460108</id><snippet>isinstance</snippet></ROW><ROW><id>1460108</id><snippet>&gt;&gt;&gt; user.__class__
&lt;class 'frontend.stars.models.User'&gt;
&gt;&gt;&gt; Picture.user.reference_class
&lt;class 'stars.models.User'&gt;
</snippet></ROW><ROW><id>1460497</id><snippet>&gt;&gt;&gt; filter(lambda i: i &lt; limit, a)
[0, 1, 2, 3, 4, 5, 6, 7, 8]
</snippet></ROW><ROW><id>1460531</id><snippet>min(points_list, key=lambda x: distance(x, point_a))
</snippet></ROW><ROW><id>1460531</id><snippet>lambda</snippet></ROW><ROW><id>1460531</id><snippet>key</snippet></ROW><ROW><id>1460531</id><snippet>point_a</snippet></ROW><ROW><id>1460531</id><snippet>distance</snippet></ROW><ROW><id>1460531</id><snippet>&gt;&gt;&gt; point_a = point([1, 2, 3], 5)
&gt;&gt;&gt; def distance(x):
    return numpy.linalg.norm(x.coord - point_a.coord)
</snippet></ROW><ROW><id>1460531</id><snippet>distance</snippet></ROW><ROW><id>1460531</id><snippet>lambda</snippet></ROW><ROW><id>1460531</id><snippet>&gt;&gt;&gt; min(points_list, key=distance)
</snippet></ROW><ROW><id>1460615</id><snippet>p = subprocess.Popen(['myjavaapp', 'afilename.txt'])
</snippet></ROW><ROW><id>1460615</id><snippet>p = subprocess.Popen(['myjavaapp', os.path.abspath('afilename.txt')])
</snippet></ROW><ROW><id>1460633</id><snippet>#!/usr/bin/env python
# -*- encoding: utf-8 -*-
</snippet></ROW><ROW><id>1460699</id><snippet>&gt;&gt;&gt; import re
&gt;&gt;&gt; regex = re.compile('foo (?:bar)*')
&gt;&gt;&gt; regex.pattern
'foo (?:bar)*'
</snippet></ROW><ROW><id>1461415</id><snippet>if len(var):</snippet></ROW><ROW><id>1461505</id><snippet>endif</snippet></ROW><ROW><id>1461505</id><snippet>endfilter</snippet></ROW><ROW><id>1461505</id><snippet>if</snippet></ROW><ROW><id>1461505</id><snippet>filter</snippet></ROW><ROW><id>1462285</id><snippet>django.contrib.admin.widgets.AdminSplitDateTime</snippet></ROW><ROW><id>1462395</id><snippet>optparse</snippet></ROW><ROW><id>1462395</id><snippet>argparse</snippet></ROW><ROW><id>1462395</id><snippet>easy_install argparse</snippet></ROW><ROW><id>1462395</id><snippet>sys.path</snippet></ROW><ROW><id>1462395</id><snippet>#!/usr/bin/env python
from argparse import ArgumentParser

if __name__ == "__main__":
    parser = ArgumentParser(prog='script.py')
    parser.add_argument('--foo', nargs='?', metavar='bar', default='baz')

    parser.print_usage()    
    for args in ([], ['--foo'], ['--foo', 'bar']):
        print "$ %s %s -&gt; foo=%s" % (
            parser.prog, ' '.join(args).ljust(9), parser.parse_args(args).foo)
</snippet></ROW><ROW><id>1462475</id><snippet>s = "1.2"
a = float(s)
</snippet></ROW><ROW><id>1462607</id><snippet>python setup.py install --user</snippet></ROW><ROW><id>1462991</id><snippet>range</snippet></ROW><ROW><id>1462991</id><snippet>Fact.objects.filter(fecha_fact__range=(yesterday, today))
</snippet></ROW><ROW><id>1463144</id><snippet>email.message.Message.get_payload()</snippet></ROW><ROW><id>1463144</id><snippet>import email
msg = email.message_from_string(raw_message)
for part in msg.walk():
    # each part is a either non-multipart, or another multipart message
    # that contains further parts... Message is organized like a tree
    if part.get_content_type() == 'text/plain':
        print part.get_payload() # prints the raw text
</snippet></ROW><ROW><id>1463144</id><snippet>msg = email.message_from_string(raw_message)
msg.get_payload()
</snippet></ROW><ROW><id>1463144</id><snippet>None</snippet></ROW><ROW><id>1463144</id><snippet>get_payload()</snippet></ROW><ROW><id>1463144</id><snippet>msg = email.message_from_string(raw_message)
for part in msg.walk():
    if part.get_content_type() == 'application/msword':
        name = part.get_param('name') or 'MyDoc.doc'
        f = open(name, 'wb')
        f.write(part.get_payload(None, True)) # You need None as the first param
                                              # because part.is_multipart() 
                                              # is False
        f.close()
</snippet></ROW><ROW><id>1463235</id><snippet>def application(environ, start_response):
    status = '200 OK'
    output = 'Hello World!'

    response_headers = [('Content-type', 'text/plain')]
    start_response(status, response_headers)

    file = open('/usr/share/dict/words', 'rb')
    return environ['wsgi.file_wrapper'](file)
</snippet></ROW><ROW><id>1463370</id><snippet>def foo():
    ldict = locals()
    exec("a=3",globals(),ldict)
    a = ldict['a']
    print(a)
</snippet></ROW><ROW><id>1463370</id><snippet>exec</snippet></ROW><ROW><id>1463370</id><snippet>locals()</snippet></ROW><ROW><id>1463370</id><snippet>Python 2.6.2 (release26-maint, Apr 19 2009, 01:56:41) 
[GCC 4.3.3] on linux2
Type "help", "copyright", "credits" or "license" for more information.
&gt;&gt;&gt; def f():
...     a = 1
...     exec "a=3"
...     print a
... 
&gt;&gt;&gt; f()
3
</snippet></ROW><ROW><id>1463562</id><snippet>&gt; cherryd -h
Usage: cherryd [options]

Options:
  -h, --help            show this help message and exit
  -c CONFIG, --config=CONFIG
                        specify config file(s)
  -d                    run the server as a daemon
  -e ENVIRONMENT, --environment=ENVIRONMENT
                        apply the given config environment
  -f                    start a fastcgi server instead of the default HTTP
                        server
  -s                    start a scgi server instead of the default HTTP server
  -i IMPORTS, --import=IMPORTS
                        specify modules to import
  -p PIDFILE, --pidfile=PIDFILE
                        store the process id in the given file
</snippet></ROW><ROW><id>1463562</id><snippet>cherryd</snippet></ROW><ROW><id>1463706</id><snippet>with_default_value</snippet></ROW><ROW><id>1463706</id><snippet>newfunc</snippet></ROW><ROW><id>1463706</id><snippet>with_default_value</snippet></ROW><ROW><id>1463706</id><snippet>func</snippet></ROW><ROW><id>1463706</id><snippet>newfunc</snippet></ROW><ROW><id>1463706</id><snippet>func</snippet></ROW><ROW><id>1463706</id><snippet>int</snippet></ROW><ROW><id>1463706</id><snippet>newfunc</snippet></ROW><ROW><id>1463706</id><snippet>newfunc</snippet></ROW><ROW><id>1463706</id><snippet>func</snippet></ROW><ROW><id>1463706</id><snippet>default</snippet></ROW><ROW><id>1463706</id><snippet>for i in range(len(buttons)):
  buttons[i].onclick(lambda: mainwin.settitle("button %d click!" % i))
</snippet></ROW><ROW><id>1463706</id><snippet>i</snippet></ROW><ROW><id>1463706</id><snippet>lambda</snippet></ROW><ROW><id>1463706</id><snippet>i</snippet></ROW><ROW><id>1463706</id><snippet>def makeOnclick(message):
  return lambda: mainwin.settitle(message)

for i in range(len(buttons)):
  buttons[i].onclick(makeOnClick("button %d click!" % i))
</snippet></ROW><ROW><id>1463740</id><snippet>GoodReplyCtr = 0
for i in range(0, 10):  # or 100 or 1000 if you feel ambitious...
   cc = OneProblem()
   if cc &lt; 0:
        break
   GoodReplyCtr += cc

print(GoodReplyCtr)
</snippet></ROW><ROW><id>1463740</id><snippet>import random
X = random.choice((2, 3, 4, 6, 7, 8, 9, 7, 9))  # see, no 0, 1,or 5 but more chance to get 7 or 9
</snippet></ROW><ROW><id>1463773</id><snippet>itun.py</snippet></ROW><ROW><id>1463773</id><snippet>import sys

class _Sneaky(object):
  def __init__(self):
    self.download = None

  @property
  def DOWNLOAD_PATH(self):
    if not self.download:
      self.download = heavyComputations()
    return self.download

  def __getattr__(self, name):
    return globals()[name]

# other parts of itun that you WANT to code in
# module-ish ways

sys.modules[__name__] = _Sneaky()
</snippet></ROW><ROW><id>1463773</id><snippet>import itun</snippet></ROW><ROW><id>1463773</id><snippet>itun._Sneaky()</snippet></ROW><ROW><id>1463773</id><snippet>__getattr__</snippet></ROW><ROW><id>1463773</id><snippet>itun.py</snippet></ROW><ROW><id>1463773</id><snippet>_Sneaky</snippet></ROW><ROW><id>1463922</id><snippet>DECLARE foo CURSOR</snippet></ROW><ROW><id>1463922</id><snippet>FETCH FROM CURSOR</snippet></ROW><ROW><id>1463922</id><snippet>WHERE CURRENT OF CURSOR</snippet></ROW><ROW><id>1463950</id><snippet>operator&gt;&gt;</snippet></ROW><ROW><id>1464089</id><snippet>str</snippet></ROW><ROW><id>1464089</id><snippet>unicode</snippet></ROW><ROW><id>1464089</id><snippet>def isNonStringIterable(x):
  if isinstance(x, basestring):
    return False
  try: iter(x)
  except: return False
  else: return True
</snippet></ROW><ROW><id>1464089</id><snippet>def makeNonStringIterable(x):
  if isinstance(x, basestring):
    return (x,)
  try: return iter(x)
  except: return (x,)
</snippet></ROW><ROW><id>1464089</id><snippet>for i in makeNonStringIterable(x): ...</snippet></ROW><ROW><id>1464342</id><snippet>import wx
class TextDropTarget(wx.TextDropTarget):
    def __init__(self, obj, callback):
        wx.TextDropTarget.__init__(self)
        self.obj = obj
        self._callback = callback

    def OnDropText(self, x, y, data):
        self.obj.WriteText(data + '\n\n')
        wx.MessageBox("Error", "Error", style = wx.ICON_ERROR)

    def OnDragOver(self, *args):
        wx.CallAfter(self._callback)
        return wx.TextDropTarget.OnDragOver(self, *args)

class DropFrame(wx.Frame):
    def __init__(self):
        wx.Frame.__init__(self, None)
        text = wx.TextCtrl(self, wx.ID_ANY)
        text.SetDropTarget(TextDropTarget(text, self._callback))

    def _callback(self):
        self.Raise()
        self.SetFocus()

app = wx.PySimpleApp()
frame = DropFrame()
app.SetTopWindow(frame)
frame.Show()
app.MainLoop()
</snippet></ROW><ROW><id>1464363</id><snippet>  fs.serial_number.validators.remove(formalchemy.validators.required)
  fs.mac.validators.remove(formalchemy.validators.required)
</snippet></ROW><ROW><id>1464363</id><snippet>None</snippet></ROW><ROW><id>1464363</id><snippet>None</snippet></ROW><ROW><id>1464363</id><snippet>validators.required</snippet></ROW><ROW><id>1464589</id><snippet>onFilmSet</snippet></ROW><ROW><id>1464589</id><snippet>receiver = lambda film=film: self.onFilmSet(self, film)
self.connect(menuItem_Film, SIGNAL('triggered()'), receiver)
</snippet></ROW><ROW><id>1464762</id><snippet>#!/usr/bin/python</snippet></ROW><ROW><id>1464951</id><snippet>print list[::3] # print it
newlist = list[::3] # copy it
</snippet></ROW><ROW><id>1464951</id><snippet>for ($i = 0; $i &lt; @list; $i += 3) {
    print $list[$i]; # print it
    push @y, $list[$i]; # copy it
}
</snippet></ROW><ROW><id>1464974</id><snippet>gsprint -printer \\server\printer "test.pdf"
</snippet></ROW><ROW><id>1464974</id><snippet>win32api.ShellExecute(0, 'open', 'gsprint.exe', '-printer "\\\\' + self.server + '\\' + self.printer_name + '" ' + file, '.', 0)
</snippet></ROW><ROW><id>1465167</id><snippet>&gt;&gt;&gt; import time
&gt;&gt;&gt; tic = time.clock()
&gt;&gt;&gt; toc = time.clock()
&gt;&gt;&gt; toc - tic
</snippet></ROW><ROW><id>1465167</id><snippet>timeit</snippet></ROW><ROW><id>1465295</id><snippet>foo</snippet></ROW><ROW><id>1465295</id><snippet>&gt;&gt;&gt; re.search('(foo)(=(bar))?', 'foo=bar').groups()
('foo', '=bar', 'bar')
</snippet></ROW><ROW><id>1465750</id><snippet>User.objects.filter(is_active=True).order_by("-date_joined")[:10]
</snippet></ROW><ROW><id>1466036</id><snippet>fopen()</snippet></ROW><ROW><id>1466036</id><snippet>fopen</snippet></ROW><ROW><id>1466036</id><snippet> The argument mode points to a string beginning with one of the following
 sequences (Additional characters may follow these sequences.):

 ``r''   Open text file for reading.  The stream is positioned at the
         beginning of the file.

 ``r+''  Open for reading and writing.  The stream is positioned at the
         beginning of the file.

 ``w''   Truncate file to zero length or create text file for writing.
         The stream is positioned at the beginning of the file.

 ``w+''  Open for reading and writing.  The file is created if it does not
         exist, otherwise it is truncated.  The stream is positioned at
         the beginning of the file.

 ``a''   Open for writing.  The file is created if it does not exist.  The
         stream is positioned at the end of the file.  Subsequent writes
         to the file will always end up at the then current end of file,
         irrespective of any intervening fseek(3) or similar.

 ``a+''  Open for reading and writing.  The file is created if it does not
         exist.  The stream is positioned at the end of the file.  Subse-
         quent writes to the file will always end up at the then current
         end of file, irrespective of any intervening fseek(3) or similar.
</snippet></ROW><ROW><id>1466344</id><snippet>def make_b( a, seed ):
    yield seed
    for a,b in zip( a[:-1], a[1:] ):
        seed= someFunction( seed, a, b )
        yield seed
</snippet></ROW><ROW><id>1466344</id><snippet>a = xrange(10)
b= list(make_b(a,something))
</snippet></ROW><ROW><id>1466344</id><snippet>b = make_b(a)
</snippet></ROW><ROW><id>1466344</id><snippet>b</snippet></ROW><ROW><id>1466344</id><snippet>b</snippet></ROW><ROW><id>1466344</id><snippet>list</snippet></ROW><ROW><id>1466344</id><snippet>a</snippet></ROW><ROW><id>1466344</id><snippet>list</snippet></ROW><ROW><id>1466344</id><snippet>yield</snippet></ROW><ROW><id>1466443</id><snippet>GzipFile</snippet></ROW><ROW><id>1466443</id><snippet>import gzip
content = "Lots of content here"
real_f = open('/home/joe/file.txt.gz', 'wb')
f = gzip.GZipFile('file.txt.gz', fileobj = realf)
f.write(content)
f.close()
real_f.close()
</snippet></ROW><ROW><id>1466443</id><snippet>open</snippet></ROW><ROW><id>1466444</id><snippet>_siftdown</snippet></ROW><ROW><id>1466444</id><snippet>_siftup</snippet></ROW><ROW><id>1466444</id><snippet>_</snippet></ROW><ROW><id>1466444</id><snippet>heapify</snippet></ROW><ROW><id>1466550</id><snippet> &lt;span&gt;You have {{product|length}} products&lt;/span&gt;
</snippet></ROW><ROW><id>1466550</id><snippet>count</snippet></ROW><ROW><id>1466550</id><snippet>{{products|count}}</snippet></ROW><ROW><id>1466550</id><snippet>{{products|length}}</snippet></ROW><ROW><id>1467053</id><snippet>request.COOKIES</snippet></ROW><ROW><id>1467053</id><snippet>request.COOKIES.get('key', 'default')
</snippet></ROW><ROW><id>1467136</id><snippet>Web Service</snippet></ROW><ROW><id>1467136</id><snippet>SAP Web Service</snippet></ROW><ROW><id>1467136</id><snippet>Python</snippet></ROW><ROW><id>1467136</id><snippet>sapnwrfc</snippet></ROW><ROW><id>1467136</id><snippet>SAP NetWeaver</snippet></ROW><ROW><id>1467296</id><snippet>__getattr__</snippet></ROW><ROW><id>1467296</id><snippet>class Wrapper(object):
    def __init__(self,wrapped_class):
        self.wrapped_class = wrapped_class()

    def __getattr__(self,attr):
        orig_attr = self.wrapped_class.__getattribute__(attr)
        if callable(orig_attr):
            def hooked(*args, **kwargs):
                self.pre()
                result = orig_attr(*args, **kwargs)
                # prevent wrapped_class from becoming unwrapped
                if result == self.wrapped_class:
                    return self
                self.post()
                return result
            return hooked
        else:
            return orig_attr

    def pre(self):
        print "&gt;&gt; pre"

    def post(self):
        print "&lt;&lt; post"
</snippet></ROW><ROW><id>1467296</id><snippet>number = Wrapper(Simple)

print "\nCalling wrapped 'one':"
number.one()

print "\nCalling wrapped 'two':"
number.two("2")
</snippet></ROW><ROW><id>1467296</id><snippet>Calling wrapped 'one':
&gt;&gt; pre
one
&lt;&lt; post

Calling wrapped 'two':
&gt;&gt; pre
two2
&lt;&lt; post
</snippet></ROW><ROW><id>1467440</id><snippet>mysql_config = /opt/local/lib/mysql5/bin/mysql_config
</snippet></ROW><ROW><id>1467440</id><snippet>// #define uint unsigned int
</snippet></ROW><ROW><id>1467440</id><snippet>sudo python setup.py install
</snippet></ROW><ROW><id>1467635</id><snippet>&gt;&gt;&gt; import types
&gt;&gt;&gt; m = types.ModuleType("mymod")
&gt;&gt;&gt; m
&lt;module 'mymod' (built-in)&gt;
</snippet></ROW><ROW><id>1467924</id><snippet>if i==0:
  converters = [mybool]*len(row)
</snippet></ROW><ROW><id>1467945</id><snippet>projfiles['buildasm'] = ['#build/'+os.path.splitext(x)[0]+'.asm' for x in projfiles['a'] if x != 'baz.a']
</snippet></ROW><ROW><id>1467945</id><snippet>ignored_files = ['baz.a',
                 'foo.a',
                 'xyzzy.a',
                 ]
projfiles['buildasm'] = ['#build/'+os.path.splitext(x)[0]+'.asm' for x in projfiles['a'] if x not in ignored_files]
</snippet></ROW><ROW><id>1468603</id><snippet>find-links =</snippet></ROW><ROW><id>1468603</id><snippet>http://</snippet></ROW><ROW><id>1469445</id><snippet>random</snippet></ROW><ROW><id>1469445</id><snippet>from math import log,...</snippet></ROW><ROW><id>1469445</id><snippet>math</snippet></ROW><ROW><id>1469466</id><snippet>ssh localhost
</snippet></ROW><ROW><id>1469466</id><snippet>ssh: connect to host localhost: Connection refused
</snippet></ROW><ROW><id>1469670</id><snippet>Y = Y[random.choice(Y.keys())]
</snippet></ROW><ROW><id>1469712</id><snippet>import django
print django.VERSION
</snippet></ROW><ROW><id>1469712</id><snippet>(1, 1, 0, 'final', 0)</snippet></ROW><ROW><id>1469935</id><snippet>$HOME/.pystartup</snippet></ROW><ROW><id>1469935</id><snippet>PYTHONPATH</snippet></ROW><ROW><id>1469935</id><snippet>PYTHONPATH</snippet></ROW><ROW><id>1469935</id><snippet>pyqt 4.5.4</snippet></ROW><ROW><id>1469935</id><snippet>pydev 1.4.8</snippet></ROW><ROW><id>1469935</id><snippet>"eclipse preferences -&gt; pydev -&gt; editor -&gt; code analysis -&gt; do code analysis?"</snippet></ROW><ROW><id>1470433</id><snippet>class Greeting(db.Model):
    content = db.StringProperty(multiline=True)
</snippet></ROW><ROW><id>1470433</id><snippet>Greeting</snippet></ROW><ROW><id>1470433</id><snippet>StringProperty</snippet></ROW><ROW><id>1470433</id><snippet>content</snippet></ROW><ROW><id>1470433</id><snippet>Greeting</snippet></ROW><ROW><id>1470433</id><snippet>content</snippet></ROW><ROW><id>1470433</id><snippet>greeting = Greeting()
greeting.content = self.request.get('content')
</snippet></ROW><ROW><id>1470554</id><snippet>p.contents</snippet></ROW><ROW><id>1470554</id><snippet>def copy(dst, src):
    """Copies the contents of src to dst"""
    pointer(dst)[0] = src

# alternately
def new_copy(src):
    """Returns a new ctypes object which is a bitwise copy of an existing one"""
    dst = type(src)()
    pointer(dst)[0] = src
    return dst

# or if using pointers
def ptr_copy(dst_ptr, src_ptr):
    dst_ptr[0] = src_ptr[0]
</snippet></ROW><ROW><id>1470554</id><snippet>ctypes</snippet></ROW><ROW><id>1470554</id><snippet>&gt;&gt;&gt; o1 = Point(1, 1)
&gt;&gt;&gt; o2 = Point(2, 2)
&gt;&gt;&gt; print (o1.x, o1.y, addressof(o1)), (o2.x, o2.y, addressof(o2))
(1, 1, 6474004) (2, 2, 6473524)
&gt;&gt;&gt; copy(o2, o1)
&gt;&gt;&gt; pprint (o1.x, o1.y, addressof(o1)), (o2.x, o2.y, addressof(o2))
(1, 1, 6474004) (1, 1, 6473524)

&gt;&gt;&gt; o1 = Point(1, 1), o2 = Point(2, 2)
&gt;&gt;&gt; print (o1.x, o1.y, addressof(o1)), (o2.x, o2.y, addressof(o2))
(1, 1, 6473844) (2, 2, 6473684)
&gt;&gt;&gt; p1, p2 = pointer(o1), pointer(o2)
&gt;&gt;&gt; addressof(p1.contents), addressof(p2.contents)
(6473844, 6473684)
&gt;&gt;&gt; ptr_copy(p1, p2)
&gt;&gt;&gt; print (o1.x, o1.y, addressof(o1)), (o2.x, o2.y, addressof(o2))
(2, 2, 6473844) (2, 2, 6473684)
&gt;&gt;&gt; addressof(p1.contents), addressof(p2.contents)
(6473844, 6473684)
</snippet></ROW><ROW><id>1470680</id><snippet>.order_by('-date')
</snippet></ROW><ROW><id>1470876</id><snippet>Trace</snippet></ROW><ROW><id>1470876</id><snippet>import sys
import trace

class MyTrace(trace.Trace):
    def __init__(self, *args, **kwargs):
        trace.Trace.__init__(self, *args, **kwargs)
        self.enabled = False

    def localtrace_trace_and_count(self, *args, **kwargs):
        if not self.enabled:
            return None 
        return trace.Trace.localtrace_trace_and_count(self, *args, **kwargs)

tracer = MyTrace(ignoredirs=[sys.prefix, sys.exec_prefix],)

def main():
    a = 1
    tracer.enabled = True
    a = 2
    tracer.enabled = False
    a = 3

# run the new command using the given tracer
tracer.run('main()')
</snippet></ROW><ROW><id>1470876</id><snippet> --- modulename: untitled-2, funcname: main
untitled-2.py(19):     a = 2
untitled-2.py(20):     tracer.enabled = False
</snippet></ROW><ROW><id>1471178</id><snippet>psycopg2</snippet></ROW><ROW><id>1471178</id><snippet>execute</snippet></ROW><ROW><id>1471178</id><snippet>cursor</snippet></ROW><ROW><id>1471178</id><snippet>pyformat</snippet></ROW><ROW><id>1471178</id><snippet>cursor.execute("SELECT * FROM student WHERE last_name = %(lname)s", 
               {"lname": "Robert'); DROP TABLE students;--"})
</snippet></ROW><ROW><id>1471359</id><snippet>type(connection)</snippet></ROW><ROW><id>1471359</id><snippet>inspect.getmodule()</snippet></ROW><ROW><id>1471359</id><snippet>inspect</snippet></ROW><ROW><id>1472014</id><snippet>python setup.py install
</snippet></ROW><ROW><id>1472025</id><snippet>users = {
   1: dict(Name="Mr. Foo", Location="Boston", Type="Secondary"),
   2: dict(Name="Mr. Bar", Location="New York", Type="Primary"),
   3: dict(Name="Mr. Quux", Location="Chicago", Type="Secondary"),
   #...
}
</snippet></ROW><ROW><id>1472025</id><snippet>WHERE ... OR ...</snippet></ROW><ROW><id>1472025</id><snippet>set1 = set(u for u in users if users[u]['Location'] == 'Boston')
set2 = set(u for u in users if users[u]['Type'] == 'Primary')
result = set1.union(set2)
</snippet></ROW><ROW><id>1472025</id><snippet>result = set(u for u in users if users[u]['Location'] == 'Boston'
                              or users[u]['Type'] == 'Primary')
</snippet></ROW><ROW><id>1472025</id><snippet>GROUP BY city</snippet></ROW><ROW><id>1472025</id><snippet>cities = ('Boston', 'New York', 'Chicago')
cities_users = dict(map(lambda city: (city, ifilter(lambda u: users[u]['Location'] == city, users)), cities))
</snippet></ROW><ROW><id>1472025</id><snippet>dict</snippet></ROW><ROW><id>1472271</id><snippet>from twisted.application.service import Service

class MultiprocessingService(Service):
    def startService(self):
        self.pool = multiprocessing.Pool(processes=processes)

MultiprocessingService().setServiceParent(application)
</snippet></ROW><ROW><id>1472336</id><snippet>&gt;&gt;&gt; import email.utils as eut
&gt;&gt;&gt; eut.parsedate('Wed, 23 Sep 2009 22:15:29 GMT')
(2009, 9, 23, 22, 15, 29, 0, 1, -1)
</snippet></ROW><ROW><id>1472336</id><snippet>datetime.datetime</snippet></ROW><ROW><id>1472336</id><snippet>def my_parsedate(text):
    return datetime.datetime(*eut.parsedate(text)[:6])
</snippet></ROW><ROW><id>1472390</id><snippet>get_docstring</snippet></ROW><ROW><id>1472853</id><snippet>--export-dynamic</snippet></ROW><ROW><id>1472853</id><snippet>g++</snippet></ROW><ROW><id>1472853</id><snippet>g++ -Wl,--export-dynamic ...
</snippet></ROW><ROW><id>1472979</id><snippet>mkstemp</snippet></ROW><ROW><id>1472979</id><snippet>&gt;&gt;&gt; __, filename = tempfile.mkstemp()
&gt;&gt;&gt; fptr= os.fdopen(__)
</snippet></ROW><ROW><id>1473910</id><snippet>mkdir tmp
cd tmp
wget http://svn.zope.org/*checkout*/zc.buildout/trunk/bootstrap/bootstrap.py
python bootstrap.py init
vim buildout.cfg
</snippet></ROW><ROW><id>1473910</id><snippet>[buildout]
parts = sqlite 

[sqlite]
recipe = zc.recipe.egg
eggs = pysqlite
interpreter = mypython
</snippet></ROW><ROW><id>1473910</id><snippet>./bin/buildout
./bin/mypython
&gt;&gt;&gt; import sqlite3
</snippet></ROW><ROW><id>1473979</id><snippet>ModelForm</snippet></ROW><ROW><id>1473979</id><snippet>clean()</snippet></ROW><ROW><id>1474066</id><snippet>class MyInlineFormset(generic.generic_inlineformset_factory(MyModel)):
    def __init__(self, *args, **kwargs):
        super(MyInlineFormset, self).__init__(*args, **kwargs)
        self.can_delete = False
</snippet></ROW><ROW><id>1474066</id><snippet>class MyModelStackedInline(generic.GenericStackedInline):
    model = MyModel
    formset = MyInlineFormset
    extra = 0
</snippet></ROW><ROW><id>1474175</id><snippet>manager</snippet></ROW><ROW><id>1474175</id><snippet>from django import forms

class TeamForm(forms.ModelForm):
    manager = forms.ModelChoiceField(queryset=User.objects.order_by('username'))

    class Meta:
        model = Team

class TeamAdmin(admin.ModelAdmin):
    list_display = ('name', 'manager')
    form = TeamForm
</snippet></ROW><ROW><id>1474216</id><snippet>from decimal import Decimal
object.fieldName = Decimal("0.85")
</snippet></ROW><ROW><id>1474216</id><snippet>f = 0.85
object.fieldName = Decimal(str(f))
</snippet></ROW><ROW><id>1474440</id><snippet>&gt;&gt;&gt; mock('foo',returns=5)
&gt;&gt;&gt; bar.func_globals['foo'] = foo
</snippet></ROW><ROW><id>1474440</id><snippet>&gt;&gt;&gt; mock('foo', nsdicts=(bar.func_globals,), returns=5)
</snippet></ROW><ROW><id>1474848</id><snippet>itertools</snippet></ROW><ROW><id>1474848</id><snippet>__iter__()</snippet></ROW><ROW><id>1474848</id><snippet>for-in</snippet></ROW><ROW><id>1474848</id><snippet>&gt;&gt;&gt; sequence = [1, 2, 3, 4, 5]
&gt;&gt;&gt; iterator = sequence.__iter__()
&gt;&gt;&gt; iterator.next()
1
&gt;&gt;&gt; iterator.next()
2
&gt;&gt;&gt; for number in iterator:
    print number 
3
4
5
</snippet></ROW><ROW><id>1474848</id><snippet>itertools</snippet></ROW><ROW><id>1474848</id><snippet>def consume(iterator, n):
    '''Advance the iterator n-steps ahead. If n is none, consume entirely.'''
    collections.deque(itertools.islice(iterator, n), maxlen=0)
</snippet></ROW><ROW><id>1474848</id><snippet>&gt;&gt;&gt; import itertools, collections
&gt;&gt;&gt; def consume(iterator, n):
    collections.deque(itertools.islice(iterator, n))
&gt;&gt;&gt; iterator = range(1, 16).__iter__()
&gt;&gt;&gt; for number in iterator:
    if (number == 5):
        # Disregard 6, 7, 8, 9 (5 doesn't get printed just as well)
        consume(iterator, 4)
    else:
        print number

1
2
3
4
10
11
12
13
14
15
</snippet></ROW><ROW><id>1475198</id><snippet>connect</snippet></ROW><ROW><id>1475198</id><snippet>def connect():
    try:
        c = MyClient(9989)
        # On the second iteration, do_stuff() tries to send data and
        # hangs indefinitely.
        print c.do_stuff()
    finally:
        c.sock.close()
        c.sockfile.close()
</snippet></ROW><ROW><id>1475198</id><snippet>__enter__</snippet></ROW><ROW><id>1475198</id><snippet>__exit__</snippet></ROW><ROW><id>1475198</id><snippet>MyClient</snippet></ROW><ROW><id>1475198</id><snippet>def connect():
    with MyClient(9989) as c:
        print c.do_stuff()
</snippet></ROW><ROW><id>1475314</id><snippet>from django import settings
settings.counter += 1
</snippet></ROW><ROW><id>1475314</id><snippet>models.py</snippet></ROW><ROW><id>1475453</id><snippet>def row_major(alist, sublen):      
  return [alist[i:i+sublen] for i in range(0, len(alist), sublen)]
</snippet></ROW><ROW><id>1475453</id><snippet>def col_major(alist, sublen):
  numrows = (len(alist)+sublen-1) // sublen 
  return [alist[i::sublen] for i in range(numrows)]
</snippet></ROW><ROW><id>1475453</id><snippet>L = ['one','two','three','four','five','six','seven','eight','nine']
for r in row_major(L, 3): print r
print
for r in col_major(L, 3): print r
for r in row_major(L, 4): print r
</snippet></ROW><ROW><id>1475453</id><snippet>def html_table(lol):
  print '&lt;table&gt;'
  for sublist in lol:
    print '  &lt;tr&gt;&lt;td&gt;'
    print '    &lt;/td&gt;&lt;td&gt;'.join(sublist)
    print '  &lt;/td&gt;&lt;/tr&gt;'
  print '&lt;/table&gt;'
</snippet></ROW><ROW><id>1475453</id><snippet>print</snippet></ROW><ROW><id>1475453</id><snippet>yield</snippet></ROW><ROW><id>1475453</id><snippet>'\n'.join(html_table(lol))</snippet></ROW><ROW><id>1475453</id><snippet>yield</snippet></ROW><ROW><id>1475453</id><snippet>html_table</snippet></ROW><ROW><id>1475453</id><snippet>def list_to_html_table(alist, sublength, column_major=False):
  if column_major:
    lol = col_major(alist, sublength)
  else:
    lol = row_major(alist, sublength)
  return ''.join(html_table(lol))
</snippet></ROW><ROW><id>1475548</id><snippet>PolyModel</snippet></ROW><ROW><id>1475548</id><snippet>db</snippet></ROW><ROW><id>1475548</id><snippet>import wsgiref.handlers
from google.appengine.ext import webapp
from google.appengine.ext.db import polymodel

class Father(polymodel.PolyModel):
    def hello(self):
        return "Father says hi"

class Son(Father):
    def hello(self):
        return "Spawn says hi"

class MainHandler(webapp.RequestHandler):

  def get(self):
    s = Son()
    s.put()
    son_from_father = Father.get_by_id(s.key().id())
    x = son_from_father.hello()
    self.response.out.write(x)

def main():
  application = webapp.WSGIApplication([('/', MainHandler)],
                                       debug=True)
  wsgiref.handlers.CGIHandler().run(application)


if __name__ == '__main__':
  main()
</snippet></ROW><ROW><id>1475855</id><snippet>server.bind(('', 2727))
</snippet></ROW><ROW><id>1476779</id><snippet>row:     Else
row.FRML_FUNC_OPTN is : Elsedecrementing indent
row.FRML_FUNC_OPTN is : Elseincrementing indent
</snippet></ROW><ROW><id>1476779</id><snippet>rowtext = rowtext.strip()
</snippet></ROW><ROW><id>1477325</id><snippet>$ /usr/bin/python -V
Python 2.3.4
$ /usr/bin/python2.4 -V
Python 2.4.4
$ /opt/local/bin/python2.7 -V
Python 2.7a0
$ python -V
Python 2.5.2
$ which python
/usr/bin/python
</snippet></ROW><ROW><id>1477325</id><snippet>$ alias python2.4=/usr/bin/python2.4
$ alias python2.5=/usr/bin/python2.5
$ python2.4 -V
Python 2.4.4
$ python2.5 -V
Python 2.5.2
</snippet></ROW><ROW><id>1477598</id><snippet>@staticmethod
def mystaticmethod(params)
    ...
    return
</snippet></ROW><ROW><id>1477598</id><snippet>@staticmethod</snippet></ROW><ROW><id>1477598</id><snippet>mystaticmethod = staticmethod(mystaticmethod)</snippet></ROW><ROW><id>1477796</id><snippet>multiprocessing</snippet></ROW><ROW><id>1478328</id><snippet>re.match(u'Élisa™\\s+', unicodestring)
</snippet></ROW><ROW><id>1478328</id><snippet>[group]</snippet></ROW><ROW><id>1478328</id><snippet>(?u)</snippet></ROW><ROW><id>1478328</id><snippet>\s</snippet></ROW><ROW><id>1478563</id><snippet>_sqlite3.pyd</snippet></ROW><ROW><id>1478563</id><snippet>C:\Python26\DLLs</snippet></ROW><ROW><id>1478563</id><snippet>/usr/lib/python2.6/lib-dynload/_sqlite3.so</snippet></ROW><ROW><id>1478563</id><snippet>PYTHONPATH</snippet></ROW><ROW><id>1478563</id><snippet>_sqlite3.so</snippet></ROW><ROW><id>1478563</id><snippet>import sys
sys.path.append("/path/to/my/libs")
</snippet></ROW><ROW><id>1478563</id><snippet>PYTHONPATH</snippet></ROW><ROW><id>1478563</id><snippet>.bashrc</snippet></ROW><ROW><id>1478643</id><snippet>import threading
import gc

mydata = threading.local()

class x:
    def __del__(self):
        print "x got deleted!"

def run():
    mydata.foo = x()

t = threading.Thread(target=run)
print "t created"
gc.collect()
t.start()
print "t started"
gc.collect()
del mydata
print "mydata deleted"
gc.collect()
t.join()
print "t joined"
gc.collect()
print "Done!"
</snippet></ROW><ROW><id>1478643</id><snippet>t created
t started
x got deleted!
mydata deleted
t joined
Done!
</snippet></ROW><ROW><id>1478643</id><snippet>import threading

mydata = threading.local()

class x:
    def __init__(self):
        print "x got created!"
    def __del__(self):
        print "x got deleted!"

def run():
    mydata.foo = x()

t = threading.Thread(target=run)
print "t created"
t.start()
print "t started"
del mydata
print "mydata deleted"
t.join()
print "t joined"
print "Done!"
</snippet></ROW><ROW><id>1478643</id><snippet>t created
x got created!
t started
x got deleted!
mydata deleted
t joined
Done!
</snippet></ROW><ROW><id>1478712</id><snippet>filename</snippet></ROW><ROW><id>1478712</id><snippet>with</snippet></ROW><ROW><id>1478712</id><snippet>close</snippet></ROW><ROW><id>1478712</id><snippet>input.close()
</snippet></ROW><ROW><id>1478712</id><snippet>try</snippet></ROW><ROW><id>1478712</id><snippet>finally</snippet></ROW><ROW><id>1478917</id><snippet>if</snippet></ROW><ROW><id>1478917</id><snippet>the_string = '1-2-3-4'

[int(x) for x in the_string.split('-') if x != '']
</snippet></ROW><ROW><id>1479307</id><snippet>port installed &gt; myports.txt
</snippet></ROW><ROW><id>1479307</id><snippet>sudo port clean installed
sudo port -f uninstall installed
</snippet></ROW><ROW><id>1479307</id><snippet>sudo port install portname +variant1 +variant2 ...
</snippet></ROW><ROW><id>1479307</id><snippet>sudo port install py25-gtk
</snippet></ROW><ROW><id>1479335</id><snippet>./configure
make
make install (sudo make install if you have permission issues)
</snippet></ROW><ROW><id>1479669</id><snippet>def gitAdd(fileName, repoDir):
    cmd = ['git', 'add', fileName]
    p = subprocess.Popen(cmd, cwd=repoDir)
    p.wait()

gitAdd('exampleFile.txt', '/usr/local/example_git_repo_dir')
</snippet></ROW><ROW><id>1479748</id><snippet>&gt;&gt;&gt; from pprint import pprint
&gt;&gt;&gt; mydict = {'a':1, 'b':2, 'c':3}
&gt;&gt;&gt; pprint(mydict)
{'a': 1, 'b': 2, 'c': 3}
&gt;&gt;&gt; mydict = {'a':1, 'b':2, 'c':3, 'd':4, 'e':5}
&gt;&gt;&gt; pprint(mydict)
{'a': 1, 'b': 2, 'c': 3, 'd': 4, 'e': 5}
&gt;&gt;&gt; d = dict(zip("kjihgfedcba",range(11)))
&gt;&gt;&gt; pprint(d)
{'a': 10,
 'b': 9,
 'c': 8,
 'd': 7,
 'e': 6,
 'f': 5,
 'g': 4,
 'h': 3,
 'i': 2,
 'j': 1,
 'k': 0}
</snippet></ROW><ROW><id>1479748</id><snippet>&gt;&gt;&gt; from pprint import pprint
&gt;&gt;&gt; mydict = {'a':1, 'b':2, 'c':3, 'd':4, 'e':5}
&gt;&gt;&gt; pprint(mydict)
{'a': 1, 'c': 3, 'b': 2, 'e': 5, 'd': 4}
&gt;&gt;&gt; d = dict(zip("kjihgfedcba",range(11)))
&gt;&gt;&gt; pprint(d)
{'a': 10,
 'b': 9,
 'c': 8,
 'd': 7,
 'e': 6,
 'f': 5,
 'g': 4,
 'h': 3,
 'i': 2,
 'j': 1,
 'k': 0}
&gt;&gt;&gt;
</snippet></ROW><ROW><id>1479748</id><snippet>items = object.items()
items.sort()
</snippet></ROW><ROW><id>1479748</id><snippet>for k, v in sorted(object.items()):
</snippet></ROW><ROW><id>1479796</id><snippet>def returnATupleWithThreeValues():
    return (1,2,3)
a,b,c = returnATupleWithThreeValues()
print a
print b
print c
</snippet></ROW><ROW><id>1479796</id><snippet>def returnATupleWithThreeValues():
    return (1,2,3)
a,b = returnATupleWithThreeValues()
print a
print b
</snippet></ROW><ROW><id>1479796</id><snippet>Traceback (most recent call last):
  File "c.py", line 3, in ?
    a,b = returnATupleWithThreeValues()
ValueError: too many values to unpack
</snippet></ROW><ROW><id>1479843</id><snippet>setStringValue_</snippet></ROW><ROW><id>1480150</id><snippet>import unittest
from common_methods import *
class TestPayments(unittest.TestCase):
 def test_0(self):
  common_method1(self, "foo")
</snippet></ROW><ROW><id>1480150</id><snippet>def common_method1( self, stuff ):
    blah=stuff
    self.failUnless(len(blah) &gt; 5)
</snippet></ROW><ROW><id>1480191</id><snippet>py&gt; import urlparse,socket
py&gt; p = urlparse.urlparse("http://stackoverflow.com/questions/1480183")
py&gt; p
('http', 'stackoverflow.com', '/questions/1480183', '', '', '')
py&gt; host=p[1]
py&gt; ai=socket.gethostbyname(host)
py&gt; socket.gethostbyname(host)
'69.59.196.211'
</snippet></ROW><ROW><id>1480291</id><snippet>def intersection(iterableA, iterableB, key=lambda x: x):
    """Return the intersection of two iterables with respect to `key` function.

    """
    def unify(iterable):
        d = {}
        for item in iterable:
            d.setdefault(key(item), []).append(item)
        return d

    A, B = unify(iterableA), unify(iterableB)

    return [(A[k], B[k]) for k in A if k in B]
</snippet></ROW><ROW><id>1480291</id><snippet>print intersection('Today I am fine'.split(),
                   'Hello How a re you TODAY'.split(),
                   key=str.lower)
# -&gt; [(['Today'], ['TODAY'])]
</snippet></ROW><ROW><id>1480331</id><snippet>class</snippet></ROW><ROW><id>1480331</id><snippet>__init__.py</snippet></ROW><ROW><id>1480331</id><snippet>def</snippet></ROW><ROW><id>1480331</id><snippet>__init__.py</snippet></ROW><ROW><id>1480331</id><snippet>import</snippet></ROW><ROW><id>1480331</id><snippet>from</snippet></ROW><ROW><id>1480473</id><snippet>def location(x,y,dim_x,dim_y):
    index = 1*(y==0) + 2*(y==dim_y-1) + 3*(x==0) + 6*(x==dim_x-1)
    return ["interior","top","bottom","left","top-left",
            "bottom-left","right","top-right","bottom-right"][index]
</snippet></ROW><ROW><id>1480696</id><snippet>import urllib
import urllib2

uri = 'http://legistar.council.nyc.gov/Legislation.aspx'

#the http headers are useful to simulate a particular browser (some sites deny
#access to non-browsers (bots, etc.)
#also needed to pass the content type. 
headers = {
    'HTTP_USER_AGENT': 'Mozilla/5.0 (Windows; U; Windows NT 5.1; en-US; rv:1.9.0.13) Gecko/2009073022 Firefox/3.0.13',
    'HTTP_ACCEPT': 'text/html,application/xhtml+xml,application/xml; q=0.9,*/*; q=0.8',
    'Content-Type': 'application/x-www-form-urlencoded'
}

# we group the form fields and their values in a list (any
# iterable, actually) of name-value tuples.  This helps
# with clarity and also makes it easy to later encoding of them.

formFields = (
   # the viewstate is actualy 800+ characters in length! I truncated it
   # for this sample code.  It can be lifted from the first page
   # obtained from the site.  It may be ok to hardcode this value, or
   # it may have to be refreshed each time / each day, by essentially
   # running an extra page request and parse, for this specific value.
   (r'__VSTATE', r'7TzretNIlrZiKb7EOB3AQE ... ...2qd6g5xD8CGXm5EftXtNPt+H8B'),

   # following are more of these ASP form fields
   (r'__VIEWSTATE', r''),
   (r'__EVENTVALIDATION', r'/wEWDwL+raDpAgKnpt8nAs3q+pQOAs3q/pQOAs3qgpUOAs3qhpUOAoPE36ANAve684YCAoOs79EIAoOs89EIAoOs99EIAoOs39EIAoOs49EIAoOs09EIAoSs99EI6IQ74SEV9n4XbtWm1rEbB6Ic3/M='),
   (r'ctl00_RadScriptManager1_HiddenField', ''), 
   (r'ctl00_tabTop_ClientState', ''), 
   (r'ctl00_ContentPlaceHolder1_menuMain_ClientState', ''),
   (r'ctl00_ContentPlaceHolder1_gridMain_ClientState', ''),

   #but then we come to fields of interest: the search
   #criteria the collections to search from etc.
                                                       # Check boxes  
   (r'ctl00$ContentPlaceHolder1$chkOptions$0', 'on'),  # file number
   (r'ctl00$ContentPlaceHolder1$chkOptions$1', 'on'),  # Legislative text
   (r'ctl00$ContentPlaceHolder1$chkOptions$2', 'on'),  # attachement
                                                       # etc. (not all listed)
   (r'ctl00$ContentPlaceHolder1$txtSearch', 'york'),   # Search text
   (r'ctl00$ContentPlaceHolder1$lstYears', 'All Years'),  # Years to include
   (r'ctl00$ContentPlaceHolder1$lstTypeBasic', 'All Types'),  #types to include
   (r'ctl00$ContentPlaceHolder1$btnSearch', 'Search Legislation')  # Search button itself
)

# these have to be encoded    
encodedFields = urllib.urlencode(formFields)

req = urllib2.Request(uri, encodedFields, headers)
f= urllib2.urlopen(req)     #that's the actual call to the http site.

# *** here would normally be the in-memory parsing of f 
#     contents, but instead I store this to file
#     this is useful during design, allowing to have a
#     sample of what is to be parsed in a text editor, for analysis.

try:
  fout = open('tmp.htm', 'w')
except:
  print('Could not open output file\n')

fout.writelines(f.readlines())
fout.close()
</snippet></ROW><ROW><id>1480829</id><snippet>xmacroplay:
Reads lines from the standard input. It can understand the following lines:

Delay [sec] 	- delays the program with [sec] secundums
ButtonPress [n] - sends a ButtonPress event with button [n]
		  this emulates the pressing of the mouse button [n]
ButtonRelease [n]   - sends a ButtonRelease event with button [n]
		  this emulates the releaseing of the mouse button [n]
... snip lots more ...
</snippet></ROW><ROW><id>1480829</id><snippet>String [max. 1024 long string]
		- Sends the string as single characters converted to
		  KeyPress and KeyRelease events based on a
		  character table in chartbl.h (currently only
		  Latin1 is used...)
</snippet></ROW><ROW><id>1480900</id><snippet>Py_Initialize()</snippet></ROW><ROW><id>1480900</id><snippet>Py_NewInterpreter</snippet></ROW><ROW><id>1481262</id><snippet>1:3,6,8:10,16</snippet></ROW><ROW><id>1481262</id><snippet>x:y</snippet></ROW><ROW><id>1481262</id><snippet>z[1:3,6,8:10,16]
</snippet></ROW><ROW><id>1481262</id><snippet>z.__getitem__((slice(1, 3, None), 6, slice(8, 10, None), 16))
</snippet></ROW><ROW><id>1481262</id><snippet>TypeError</snippet></ROW><ROW><id>1481262</id><snippet>z</snippet></ROW><ROW><id>1481262</id><snippet>5:</snippet></ROW><ROW><id>1481262</id><snippet>:5</snippet></ROW><ROW><id>1481262</id><snippet>slice(16, None, None)</snippet></ROW><ROW><id>1481262</id><snippet>def parse(s):
    return [slice(*map(int, x.split(':'))) for x in s.split(',')]
</snippet></ROW><ROW><id>1481262</id><snippet>8:10</snippet></ROW><ROW><id>1481262</id><snippet>1-3,6,8-10,16</snippet></ROW><ROW><id>1481262</id><snippet>def myslice(start, stop=None, step=None):
    return slice(start, (stop if stop is not None else start) + 1, step)

def parse(s):
    return [myslice(*map(int, x.split('-'))) for x in s.split(',')]
</snippet></ROW><ROW><id>1481262</id><snippet>from sys import maxsize as INF

def indices(s: 'string with indices list') -&gt; 'indices generator':
    for x in s.split(','):
        splitter = ':' if (':' in x) or (x[0] == '-') else '-'
        ix = x.split(splitter)
        start = int(ix[0]) if ix[0] is not '' else -INF
        if len(ix) == 1:
            stop = start + 1
        else:
            stop = int(ix[1]) if ix[1] is not '' else INF
        step = int(ix[2]) if len(ix) &gt; 2 else 1
        for y in range(start, stop + (splitter == '-'), step):
            yield y
</snippet></ROW><ROW><id>1481262</id><snippet> print(list(indices('-5, 1:3, 6, 8:15:2, 20-25, 18')))
</snippet></ROW><ROW><id>1481262</id><snippet>[-5, 1, 2, 6, 7, 8, 10, 12, 14, 20, 21, 22, 23, 24, 25, 18, 19]
</snippet></ROW><ROW><id>1481262</id><snippet>...</snippet></ROW><ROW><id>1481262</id><snippet>z[...]</snippet></ROW><ROW><id>1481262</id><snippet>1,...,3,6, 8,...,10,16</snippet></ROW><ROW><id>1481273</id><snippet>import xml.dom.minidom
xml.dom.minidom.parseString("&lt;xml&gt;&lt;item/&gt;&lt;/xml&gt;")
</snippet></ROW><ROW><id>1481508</id><snippet>__del__</snippet></ROW><ROW><id>1481508</id><snippet>del instance_of_class</snippet></ROW><ROW><id>1481508</id><snippet>del obj1</snippet></ROW><ROW><id>1481508</id><snippet>__del__</snippet></ROW><ROW><id>1481508</id><snippet>obj1</snippet></ROW><ROW><id>1481508</id><snippet>0</snippet></ROW><ROW><id>1481508</id><snippet>__del__</snippet></ROW><ROW><id>1481725</id><snippet>&gt;&gt;&gt; import sqlite
&gt;&gt;&gt; sqlite.version
'1.0.1'
&gt;&gt;&gt; sqlite._sqlite.sqlite_version()
'2.8.16'
</snippet></ROW><ROW><id>1481797</id><snippet>sendto</snippet></ROW><ROW><id>1481797</id><snippet>sendto</snippet></ROW><ROW><id>1482046</id><snippet>urllib</snippet></ROW><ROW><id>1482046</id><snippet>print c.getcode()</snippet></ROW><ROW><id>1482046</id><snippet>urllib</snippet></ROW><ROW><id>1482046</id><snippet>print c.read()</snippet></ROW><ROW><id>1482046</id><snippet>urllib2</snippet></ROW><ROW><id>1482046</id><snippet>urllib</snippet></ROW><ROW><id>1482290</id><snippet>cursor</snippet></ROW><ROW><id>1482290</id><snippet>self.con</snippet></ROW><ROW><id>1482290</id><snippet>close</snippet></ROW><ROW><id>1482290</id><snippet>close</snippet></ROW><ROW><id>1482316</id><snippet>itertools</snippet></ROW><ROW><id>1482316</id><snippet>powerset</snippet></ROW><ROW><id>1482316</id><snippet>def powerset(iterable):
    "powerset([1,2,3]) --&gt; () (1,) (2,) (3,) (1,2) (1,3) (2,3) (1,2,3)"
    s = list(iterable)
    return chain.from_iterable(combinations(s, r) for r in range(len(s)+1))
</snippet></ROW><ROW><id>1482316</id><snippet>&gt;&gt;&gt; list(powerset("abcd"))
[(), ('a',), ('b',), ('c',), ('d',), ('a', 'b'), ('a', 'c'), ('a', 'd'), ('b', 'c'), ('b', 'd'), ('c', 'd'), ('a', 'b', 'c'), ('a', 'b', 'd'), ('a', 'c', 'd'), ('b', 'c', 'd'), ('a', 'b', 'c', 'd')]
</snippet></ROW><ROW><id>1482316</id><snippet>range</snippet></ROW><ROW><id>1482316</id><snippet>range(1, len(s)+1)</snippet></ROW><ROW><id>1482424</id><snippet>&gt;&gt;&gt; precision=4
&gt;&gt;&gt; '%%1.%df'%precision
'%1.4f'
</snippet></ROW><ROW><id>1482477</id><snippet>  def __init__(self,dbname):
    tmp = sqlite.connect(dbname)
    self.con = tmp.cursor()

  def __del__(self):
    self.con.close()
</snippet></ROW><ROW><id>1482477</id><snippet>tmp</snippet></ROW><ROW><id>1482477</id><snippet>__init__</snippet></ROW><ROW><id>1482477</id><snippet>self.con</snippet></ROW><ROW><id>1482477</id><snippet>tmp</snippet></ROW><ROW><id>1482477</id><snippet>__del__</snippet></ROW><ROW><id>1482477</id><snippet>.close</snippet></ROW><ROW><id>1482477</id><snippet>  def __init__(self,dbname):
    self.con = sqlite.connect(dbname)
    self.cur = self.con.cursor()

  def __del__(self):
    self.cur.close()
    self.con.close()
</snippet></ROW><ROW><id>1482491</id><snippet>ast</snippet></ROW><ROW><id>1482616</id><snippet>x=urllib.urlopen(theurl)</snippet></ROW><ROW><id>1482616</id><snippet>x.read()</snippet></ROW><ROW><id>1482616</id><snippet>urllib2</snippet></ROW><ROW><id>1482616</id><snippet>urllib</snippet></ROW><ROW><id>1482660</id><snippet>&gt;&gt;&gt; 1 # just a number, so no quotes
1
&gt;&gt;&gt; "hi" # just a string, displayed with quotes
'hi'
&gt;&gt;&gt; print("hi") # being *printed* to the screen, so do not show quotes
hi
&gt;&gt;&gt; "'hello'" # string with embedded single quotes
"'hello'"
&gt;&gt;&gt; print("'hello'") # *printing* a string with embedded single quotes
'hello'
</snippet></ROW><ROW><id>1482660</id><snippet>.strip</snippet></ROW><ROW><id>1482660</id><snippet>&gt;&gt;&gt; print("""'"hello"'""")
'"hello"'
&gt;&gt;&gt; print("""'"hello"'""".strip('"\''))
hello
</snippet></ROW><ROW><id>1482695</id><snippet>class MyXRange(object):
    def __init__(self, a1, a2=None, step=1):
        if step == 0:
            raise ValueError("arg 3 must not be 0")
        if a2 is None:
            a1, a2 = 0, a1
        if (a2 - a1) % step != 0:
            a2 += step - (a2 - a1) % step
        if cmp(a1, a2) != cmp(0, step):
            a2 = a1
        self.start, self.stop, self.step = a1, a2, step

    def __iter__(self):
        n = self.start
        while cmp(n, self.stop) == cmp(0, self.step):
            yield n
            n += self.step

    def __repr__(self):
        return "MyXRange(%d,%d,%d)" % (self.start, self.stop, self.step)

    # NB: len(self) will convert this to an int, and may fail
    def __len__(self):
        return (self.stop - self.start)//(self.step)

    def __getitem__(self, key):
        if key &lt; 0:
            key = self.__len__() + key
            if key &lt; 0:
                raise IndexError("list index out of range")
            return self[key]
        n = self.start + self.step*key
        if cmp(n, self.stop) != cmp(0, self.step):
            raise IndexError("list index out of range")
        return n

    def __reversed__(self):
        return MyXRange(self.stop-self.step, self.start-self.step, -self.step)

    def __contains__(self, val):
        if val == self.start: return cmp(0, self.step) == cmp(self.start, self.stop)
        if cmp(self.start, val) != cmp(0, self.step): return False
        if cmp(val, self.stop) != cmp(0, self.step): return False
        return (val - self.start) % self.step == 0
</snippet></ROW><ROW><id>1482695</id><snippet>def testMyXRange(testsize=10):
    def normexcept(f,args):
        try:
            r = [f(args)]
        except Exception, e:
            r = type(e)
        return r

    for i in range(-testsize,testsize+1):
        for j in range(-testsize,testsize+1):
            print i, j
            for k in range(-9, 10, 2):
                r, mr = range(i,j,k), MyXRange(i,j,k)

                if r != list(mr):
                    print "iter fail: %d, %d, %d" % (i,j,k)

                if list(reversed(r)) != list(reversed(mr)):
                    print "reversed fail: %d, %d, %d" % (i,j,k)

                if len(r) != len(mr):
                    print "len fail: %d, %d, %d" % (i,j,k)

                z = [m for m in range(-testsize*2,testsize*2+1)
                      if (m in r) != (m in mr)]
                if z != []:
                    print "contains fail: %d, %d, %d, %s" % (i,j,k,(z+["..."])[:10])

                z = [m for m in range(-testsize*2, testsize*2+1) 
                      if normexcept(r.__getitem__, m) != normexcept(mr.__getitem__, m)]
                if z != []:
                    print "getitem fail: %d, %d, %d, %s" % (i,j,k,(z+["..."])[:10])
</snippet></ROW><ROW><id>1482733</id><snippet>
gtk.Window.set_keep_above
</snippet></ROW><ROW><id>1482982</id><snippet>def foo(n):
  lol = [ [] ]
  i = 1
  for x in range(n):
    if len(lol[-1]) &gt;= i:
      i += 1
      lol.append([])
    lol[-1].append(x)
  return lol
</snippet></ROW><ROW><id>1483082</id><snippet>result = [{'Letter': chr(i+97)} for i in range(26)]
</snippet></ROW><ROW><id>1483082</id><snippet>result[1]['Letter']</snippet></ROW><ROW><id>1483082</id><snippet>'b'</snippet></ROW><ROW><id>1483117</id><snippet>[^.]*\.?[^.]*$
</snippet></ROW><ROW><id>1483117</id><snippet>match</snippet></ROW><ROW><id>1483117</id><snippet>search</snippet></ROW><ROW><id>1483117</id><snippet>&gt;&gt;&gt; dot = re.compile("[^.]*\.[^.]*$")
&gt;&gt;&gt; dot.match("fooooooooooooo.bar")
&lt;_sre.SRE_Match object at 0xb7651838&gt;
&gt;&gt;&gt; dot.match("fooooooooooooo.bar.sad") is None
True
&gt;&gt;&gt;
</snippet></ROW><ROW><id>1483117</id><snippet>def valid(s):
    return re.match('[0-9]+(\.[0-9]*)?$', s) is not None

assert valid("42")
assert valid("13.37")
assert valid("1.")
assert not valid("1.2.3.4")
assert not valid("abcd")
</snippet></ROW><ROW><id>1483137</id><snippet>__init__</snippet></ROW><ROW><id>1483258</id><snippet>import struct
header = struct.pack('!II', packetNo, totalPackets)
</snippet></ROW><ROW><id>1483258</id><snippet>struct</snippet></ROW><ROW><id>1483450</id><snippet>datetime(2009, '12a', 31)
</snippet></ROW><ROW><id>1483450</id><snippet>SyntaxError</snippet></ROW><ROW><id>1483450</id><snippet>TypeError</snippet></ROW><ROW><id>1483450</id><snippet>month = '12'
try:
    month = int(month)
except ValueError:
    print('bad argument for month')
    raise
else:
    if not 1&lt;= month &lt;= 12:
        raise ValueError('month should be between 1 to 12')
</snippet></ROW><ROW><id>1483488</id><snippet>except Exception,e: print str(e)
</snippet></ROW><ROW><id>1483540</id><snippet>Trinity:~ kelvin$ python
Python 2.5.2 (r252:60911, Feb 22 2008, 07:57:53) 
[GCC 4.0.1 (Apple Computer, Inc. build 5363)] on darwin
Type "help", "copyright", "credits" or "license" for more information.
&gt;&gt;&gt; from PIL import Image
&gt;&gt;&gt; f = open("happy.jpg")
&gt;&gt;&gt; im = Image.open(f)
&gt;&gt;&gt; box = (0,0,100,100)
&gt;&gt;&gt; kay = im.crop(box)
&gt;&gt;&gt; kay
&lt;PIL.Image._ImageCrop instance at 0xb1ea80&gt;
&gt;&gt;&gt; bad_box = ("0","0","100","100")
&gt;&gt;&gt; nkay = im.crop(bad_box)
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
  File "/Library/Frameworks/Python.framework/Versions/2.5/lib/python2.5/site-packages/PIL/Image.py", line 742, in crop
    return _ImageCrop(self, box)
  File "/Library/Frameworks/Python.framework/Versions/2.5/lib/python2.5/site-packages/PIL/Image.py", line 1657, in __init__
    self.size = x1-x0, y1-y0
TypeError: unsupported operand type(s) for -: 'str' and 'str'
&gt;&gt;&gt;
</snippet></ROW><ROW><id>1483637</id><snippet>&lt;&lt;metaclass&gt;&gt;</snippet></ROW><ROW><id>1483637</id><snippet>&lt;&lt;instantiate&gt;&gt;</snippet></ROW><ROW><id>1483655</id><snippet>submenus = mainwindow.menuBar().findChildren(QAction)
</snippet></ROW><ROW><id>1483832</id><snippet>os.path.abspath(__file__)</snippet></ROW><ROW><id>1483848</id><snippet>import collections
files_by_str = collections.defaultdict(list)

thestrings = []
with open('Strings.txt') as f:
  for line in f:
    text = line.split('=', 1)[1]
    text = text.strip().replace('"', '')
    thestrings.append(text)

import os

for root, dirs, files in os.walk('/top/dir/of/interest'):
  for name in files:
    path = os.path.join(root, name)
    with open(path) as f:
      data = f.read()
      for text in thestrings:
        if text in data:
          files_by_str[text].append(path)
          break
</snippet></ROW><ROW><id>1483948</id><snippet>+byte_offset</snippet></ROW><ROW><id>1483948</id><snippet>import vim</snippet></ROW><ROW><id>1483948</id><snippet>vim.eval('line2byte(line("."))+col(".")')
</snippet></ROW><ROW><id>1483948</id><snippet>+byte_offset</snippet></ROW><ROW><id>1483948</id><snippet>byte2line</snippet></ROW><ROW><id>1483948</id><snippet>vim.eval</snippet></ROW><ROW><id>1483948</id><snippet>vim.command</snippet></ROW><ROW><id>1484388</id><snippet>self.fmt</snippet></ROW><ROW><id>1484388</id><snippet>format.fmt</snippet></ROW><ROW><id>1484428</id><snippet>DJANGO_SETTINGS_MODULE</snippet></ROW><ROW><id>1484428</id><snippet>core.py</snippet></ROW><ROW><id>1484428</id><snippet>export DJANGO_SETTINGS_MODULE=whatever</snippet></ROW><ROW><id>1484439</id><snippet>charset</snippet></ROW><ROW><id>1484439</id><snippet>content-type</snippet></ROW><ROW><id>1484536</id><snippet>states = [gtk.STATE_NORMAL, gtk.STATE_ACTIVE, gtk.STATE_PRELIGHT,
          gtk.STATE_SELECTED, gtk.STATE_INSENSITIVE]

for state in states:
    button.modify_bg(state, gtk.gdk.color_parse("Green"))
</snippet></ROW><ROW><id>1484792</id><snippet>result = cbook.to_filehandle(fname, 'w', return_opened=True)
</snippet></ROW><ROW><id>1484792</id><snippet>result</snippet></ROW><ROW><id>1484792</id><snippet>type(result)</snippet></ROW><ROW><id>1484792</id><snippet>result[0]</snippet></ROW><ROW><id>1484792</id><snippet>result[1]</snippet></ROW><ROW><id>1484792</id><snippet>to_filehandle</snippet></ROW><ROW><id>1484792</id><snippet>return thefile, thebool</snippet></ROW><ROW><id>1484792</id><snippet>fh, opened = result
</snippet></ROW><ROW><id>1484792</id><snippet>result</snippet></ROW><ROW><id>1485009</id><snippet>class MarketIndexer( djapian.Indexer ):

    fields = [ 'name', 'description', 'tags_string', 'state']
    tags = [('state', 'state'),]
</snippet></ROW><ROW><id>1485009</id><snippet>objects = model.indexer.search(q_wc).flags(djapian.resultset.xapian.QueryParser.FLAG_WILDCARD).prefetch()
objects = objects.filter(state=1)
</snippet></ROW><ROW><id>1485009</id><snippet>Market</snippet></ROW><ROW><id>1485722</id><snippet>data = [
    {'name':'John', 'color':'red'},
    {'name':'Bob', 'color':'green'},
    {'name':'Tom', 'color':'blue'}
]
colors = ['blue', 'red', 'green']
result = []

for c in colors:
    result.extend([d for d in data if d['color'] == c])

print result
</snippet></ROW><ROW><id>1485854</id><snippet>++</snippet></ROW><ROW><id>1485854</id><snippet>+</snippet></ROW><ROW><id>1485854</id><snippet>+</snippet></ROW><ROW><id>1485854</id><snippet>+</snippet></ROW><ROW><id>1485854</id><snippet>-</snippet></ROW><ROW><id>1485854</id><snippet>++</snippet></ROW><ROW><id>1485854</id><snippet>++count
</snippet></ROW><ROW><id>1485854</id><snippet>+(+count)
</snippet></ROW><ROW><id>1485854</id><snippet>count
</snippet></ROW><ROW><id>1485854</id><snippet>+=</snippet></ROW><ROW><id>1485854</id><snippet>count += 1
</snippet></ROW><ROW><id>1485854</id><snippet>++</snippet></ROW><ROW><id>1485854</id><snippet>--</snippet></ROW><ROW><id>1485854</id><snippet>++count</snippet></ROW><ROW><id>1485854</id><snippet>+</snippet></ROW><ROW><id>1485854</id><snippet>+</snippet></ROW><ROW><id>1485854</id><snippet>count</snippet></ROW><ROW><id>1485854</id><snippet>+</snippet></ROW><ROW><id>1485854</id><snippet>++</snippet></ROW><ROW><id>1485854</id><snippet>count</snippet></ROW><ROW><id>1485854</id><snippet>++</snippet></ROW><ROW><id>1485854</id><snippet>++</snippet></ROW><ROW><id>1485854</id><snippet>+= 1</snippet></ROW><ROW><id>1485854</id><snippet>a += 1</snippet></ROW><ROW><id>1485854</id><snippet>inc</snippet></ROW><ROW><id>1485854</id><snippet>++</snippet></ROW><ROW><id>1485913</id><snippet>resize</snippet></ROW><ROW><id>1485913</id><snippet>original = parser.close()
...

thumb1 = original.copy()
size = (75,75)
thumb1.thumbnail(size, Image.ANTIALIAS)
...

thumb2 = original.copy()
thumbnail2 = original.resize(size2, Image.ANTIALIAS)
...
</snippet></ROW><ROW><id>1486574</id><snippet>for arg in arguments:
    lst = equal if '=' in arg else plain
    lst.append(arg)
</snippet></ROW><ROW><id>1486574</id><snippet>for arg in arguments:
    (equal if '=' in arg else plain).append(arg)
</snippet></ROW><ROW><id>1486574</id><snippet>append()</snippet></ROW><ROW><id>1486732</id><snippet>substr</snippet></ROW><ROW><id>1486732</id><snippet>int</snippet></ROW><ROW><id>1486732</id><snippet>zope.interface</snippet></ROW><ROW><id>1486732</id><snippet>duck typing</snippet></ROW><ROW><id>1486845</id><snippet>daemon.run()
</snippet></ROW><ROW><id>1486845</id><snippet>daemon.start()
</snippet></ROW><ROW><id>1487702</id><snippet>time.strptime(name, "%d-%m-%y")</snippet></ROW><ROW><id>1487702</id><snippet>/usr/lib/sendmail</snippet></ROW><ROW><id>1487702</id><snippet>/usr/lib/sendmail</snippet></ROW><ROW><id>1488017</id><snippet>return args;
</snippet></ROW><ROW><id>1488017</id><snippet>return PyCObject_FromVoidPtr((void *) ruleHandler, NULL);
</snippet></ROW><ROW><id>1488419</id><snippet>char *strstrip(char *s)
{
        size_t size;
        char *end;

        size = strlen(s);

        if (!size)
                return s;

        end = s + size - 1;
        while (end &gt;= s &amp;&amp; isspace(*end))
                end--;
        *(end + 1) = '\0';

        while (*s &amp;&amp; isspace(*s))
                s++;

        return s;
}
</snippet></ROW><ROW><id>1488889</id><snippet>leastsq</snippet></ROW><ROW><id>1488889</id><snippet>func</snippet></ROW><ROW><id>1488889</id><snippet>return eqn</snippet></ROW><ROW><id>1488889</id><snippet>return [eqn, 0.]</snippet></ROW><ROW><id>1488889</id><snippet>optimized parameters:  (array([10., 10.]), 2)
</snippet></ROW><ROW><id>1488889</id><snippet>fmin</snippet></ROW><ROW><id>1488889</id><snippet>optimize.fmin(func, Init)</snippet></ROW><ROW><id>1488889</id><snippet>leastsq</snippet></ROW><ROW><id>1488889</id><snippet>fmin</snippet></ROW><ROW><id>1489390</id><snippet>python setup.py build --force
python setup.py install
</snippet></ROW><ROW><id>1489625</id><snippet>&gt;&gt;&gt; import os
&gt;&gt;&gt; os.environ['PYTHONPATH'].split(os.pathsep)
</snippet></ROW><ROW><id>1489972</id><snippet>KeyboardInterrupt</snippet></ROW><ROW><id>1489972</id><snippet>os._exit</snippet></ROW><ROW><id>1489972</id><snippet>kill -9</snippet></ROW><ROW><id>1489972</id><snippet>try/finally</snippet></ROW><ROW><id>1489972</id><snippet>with</snippet></ROW><ROW><id>1489972</id><snippet>atexit</snippet></ROW><ROW><id>1490154</id><snippet>auto_ptr</snippet></ROW><ROW><id>1490154</id><snippet>int function blah(arg1, arg2)
    allocate resource

    if early failure detection
        return failure_status

    ... much later...

    release resource // oh rats! resource didn't release
    return success_status
</snippet></ROW><ROW><id>1490154</id><snippet>auto_ptr</snippet></ROW><ROW><id>1490154</id><snippet>auto_ptr</snippet></ROW><ROW><id>1490154</id><snippet>int function blah(arg1, arg2)
    allocate resource
    try:

        if early failure detection
            return failure_status

        ... much later...
        return success_status

    finally:
        release resource // always releases no matter what
</snippet></ROW><ROW><id>1490154</id><snippet>int function blah(arg1, arg2)
    allocate resource
    with context_manager(resource): // releases on exit from 'with'

        if early failure detection
            return failure_status

        ... much later...
        return success_status
</snippet></ROW><ROW><id>1490461</id><snippet>[NSSpeechSynthesizer availableVoices]</snippet></ROW><ROW><id>1490461</id><snippet>from AppKit import NSSpeechSynthesizer

NSSpeechSynthesizer.availableVoices()
</snippet></ROW><ROW><id>1490461</id><snippet>(
    "com.apple.speech.synthesis.voice.Agnes",
    "com.apple.speech.synthesis.voice.Albert",
    "com.apple.speech.synthesis.voice.Alex",
    "com.apple.speech.synthesis.voice.BadNews",
    "com.apple.speech.synthesis.voice.Bahh",
    "com.apple.speech.synthesis.voice.Bells",
    "com.apple.speech.synthesis.voice.Boing",
    "com.apple.speech.synthesis.voice.Bruce",
    "com.apple.speech.synthesis.voice.Bubbles",
    "com.apple.speech.synthesis.voice.Cellos",
    "com.apple.speech.synthesis.voice.Deranged",
    "com.apple.speech.synthesis.voice.Fred",
    "com.apple.speech.synthesis.voice.GoodNews",
    "com.apple.speech.synthesis.voice.Hysterical",
    "com.apple.speech.synthesis.voice.Junior",
    "com.apple.speech.synthesis.voice.Kathy",
    "com.apple.speech.synthesis.voice.Organ",
    "com.apple.speech.synthesis.voice.Princess",
    "com.apple.speech.synthesis.voice.Ralph",
    "com.apple.speech.synthesis.voice.Trinoids",
    "com.apple.speech.synthesis.voice.Vicki",
    "com.apple.speech.synthesis.voice.Victoria",
    "com.apple.speech.synthesis.voice.Whisper",
    "com.apple.speech.synthesis.voice.Zarvox"
)
</snippet></ROW><ROW><id>1490987</id><snippet>from guppy import hpy
h = hpy()
print h.heap()
</snippet></ROW><ROW><id>1491109</id><snippet>class OrderedDict:
  def __init__(self, keyvalues_iter):
    self.__srtlst__ = sorted(keyvalues_iter)
  def __len__(self):
    return len(self.__srtlst__)
  def __contains__(self, key):
    index = bisect(self.__srtlst__, key)
    if index&lt;len(self.__srtlst__) and self.__srtlst__[index][0] == key:
      return True
    else:
      return False    
  def __getitem__(self, key):
    index = bisect(self.__srtlst__, key)
    if index&lt;len(self.__srtlst__) and self.__srtlst__[index][0] == key:
      return self.__srtlst__[index][1]
    else:
      raise KeyError(key)
  def __setitem__(sekf, key, value):
    index = bisect(self.__srtlst__, key)
    if index&lt;len(self.__srtlst__) and self.__srtlst__[index][0] == key:
      self.__srtlst__[index][1] = value
    else:
      self.__srtlst__[index]=(key, value)
  def __delitem__(sekf, key, value):
    index = bisect(self.__srtlst__, key)
    if index&lt;len(self.__srtlst__) and self.__srtlst__[index][0] == key:
      del __srtlst__[index]
    else:
      raise KeyError(key)
   def __iter__(self):
     return (v for k,v in self.__srtlst__)
   def clear(self):
     self.__srtlst__ = []
   def get(self, key, default=None):
    index = bisect(self.__srtlst__, key)
    if index&lt;len(self.__srtlst__) and self.__srtlst__[index][0] == key:
      return self.__srtlst__[index][1]
    else:
      return default
   def items(self):
     return self.__srtlst__[:]
  def iteritems(self):
    return iter(self.__srtlst__)
  def iterkeys(self):
    return (k for k,v in self.__srtlst__)
  def itervalues(self):
    return (v for k,v in self.__srtlst__)
  def keys(self):
    return [k for k,v in self.__srtlst__]
  def values(self):
    return [v for k,v in self.__srtlst__]
  def setdefault(self, key, default):
    index = bisect(self.__srtlst__, key)
    if index&lt;len(self.__srtlst__) and self.__srtlst__[index][0] == key:
      return self.__srtlst__[index][1]
    else:
      self.__srtlst__[index]=(key, default)
      return default
  def update(self, other):
    #a more efficient implementation could be done merging the sorted lists
    for k, v in other.iteritems():
      self[k] = v
</snippet></ROW><ROW><id>1491439</id><snippet>urla = re.search(pattern2, match)
if urla is not None:
    print filename, urla.group(1)
</snippet></ROW><ROW><id>1491516</id><snippet>import getpass
import sys
import telnetlib

HOST = "localhost"
user = raw_input("Enter your remote account: ")
password = getpass.getpass()

tn = telnetlib.Telnet(HOST)

tn.read_until("login: ")
tn.write(user + "\n")
if password:
    tn.read_until("Password: ")
    tn.write(password + "\n")

tn.write("ls\n")
tn.write("exit\n")

print tn.read_all()
</snippet></ROW><ROW><id>1491516</id><snippet>ls</snippet></ROW><ROW><id>1491834</id><snippet>echo %ERRORLEVEL%
</snippet></ROW><ROW><id>1491834</id><snippet>C:\work&gt;python helloworld.py
Hello World!

C:\work&gt;echo %ERRORLEVEL%
0
</snippet></ROW><ROW><id>1492026</id><snippet>WM_INPUT</snippet></ROW><ROW><id>1492026</id><snippet>WM_GESTURE</snippet></ROW><ROW><id>1492026</id><snippet>WM_TOUCH</snippet></ROW><ROW><id>1492146</id><snippet>else</snippet></ROW><ROW><id>1492146</id><snippet>def my_func(choice_pattern, input):
    # Search in input for some things to choose from.
    choice_iterator = choice_pattern.finditer(input, re.M)
    if not choice_iterator:
        print "No choices. Exiting..."
        sys.exit()

    # Show choices to the user. For each one, ask user for a yes/no response. If
    # choice accepted, return a result. Otherwise show user next choice. If no
    # choices accepted by user, quit.
    for choice in choice_iterator:
        print choice
        # get_yes_no_answer() returns True or False depending on user response.
        if get_yes_no_answer():
            return choice
    # Loop exited without matches.
    print "No matches. Exiting..."
    sys.exit()
</snippet></ROW><ROW><id>1492146</id><snippet>def my_func(choice_pattern, input):
    choice_iterator = choice_pattern.finditer(input, re.M)
    if choice_iterator:
        for choice in choice_iterator:
            print choice
            if get_yes_no_answer():
                return choice
    # If there is no choices or no matches, you end up here:
    print "No matches. Exiting..."
    sys.exit()
</snippet></ROW><ROW><id>1492172</id><snippet>psycopg2</snippet></ROW><ROW><id>1492172</id><snippet>psycopg.pool</snippet></ROW><ROW><id>1492667</id><snippet>&gt;&gt;&gt; os.readlink('/proc/%d/exe' % os.getppid())
'/bin/bash'
</snippet></ROW><ROW><id>1492667</id><snippet>os.getppid()</snippet></ROW><ROW><id>1492667</id><snippet>ps</snippet></ROW><ROW><id>1492746</id><snippet>import sys
class MyCherryPyApplication(object):

  def default(self):
    sys.exit()
  default.exposed = True

cherrypy.quickstart(MyCherryPyApplication())
</snippet></ROW><ROW><id>1493039</id><snippet>repr()</snippet></ROW><ROW><id>1493039</id><snippet>data</snippet></ROW><ROW><id>1493039</id><snippet>action</snippet></ROW><ROW><id>1493039</id><snippet>data</snippet></ROW><ROW><id>1493039</id><snippet>action</snippet></ROW><ROW><id>1493356</id><snippet>create-web-view</snippet></ROW><ROW><id>1493356</id><snippet>new-window-policy-decision-requested</snippet></ROW><ROW><id>1493356</id><snippet>download-requested</snippet></ROW><ROW><id>1493522</id><snippet>./rhrating.py [NEWRATING 0..5]</snippet></ROW><ROW><id>1493522</id><snippet>uri</snippet></ROW><ROW><id>1493522</id><snippet>import dbus
bus = dbus.Bus()

service_name = "org.gnome.Rhythmbox"
sobj_name = "/org/gnome/Rhythmbox/Shell"
siface_name = "org.gnome.Rhythmbox.Shell"

def set_rating(uri, rating):
    searchobj = bus.get_object(service_name, sobj_name)
    shell = dbus.Interface(searchobj, siface_name)
    shell.setSongProperty(uri, "rating", float(rating))
</snippet></ROW><ROW><id>1493598</id><snippet>./manage.py runserver 193.140.209.49:8000
</snippet></ROW><ROW><id>1493607</id><snippet>post</snippet></ROW><ROW><id>1493607</id><snippet>def post(self):
    task = Task()                # not ToDo()
    task.description = self.request.get('description')
    task.put()
    self.redirect('/')
</snippet></ROW><ROW><id>1493607</id><snippet>put</snippet></ROW><ROW><id>1493607</id><snippet>webapp.RequestHandler</snippet></ROW><ROW><id>1493900</id><snippet>r'\D(\d{9}[\dXx])($|\D)'
</snippet></ROW><ROW><id>1493900</id><snippet>|</snippet></ROW><ROW><id>1493900</id><snippet>[]</snippet></ROW><ROW><id>1493900</id><snippet>[]</snippet></ROW><ROW><id>1493900</id><snippet>|</snippet></ROW><ROW><id>1493900</id><snippet>[]</snippet></ROW><ROW><id>1493900</id><snippet>|</snippet></ROW><ROW><id>1493900</id><snippet>|</snippet></ROW><ROW><id>1493900</id><snippet>(?: )</snippet></ROW><ROW><id>1493900</id><snippet>r'\D(\d{9}[\dXx])(?:$|\D)'
</snippet></ROW><ROW><id>1494095</id><snippet>new Ajax.Request('/some_url',
{
 method:"post",
 postBody:"{'some':'json'}",
 onSuccess: function(transport){
   var response = transport.responseText || "no response text";
   alert("Success! \n\n" + response);
   },
 onFailure: function(){ alert('Something went wrong...') }
});
</snippet></ROW><ROW><id>1494160</id><snippet>__getitem__</snippet></ROW><ROW><id>1494267</id><snippet>from datetime import date
print date(1850, 1, 1).weekday()  # 1, which is Tuesday 
# (Mon is 0)
</snippet></ROW><ROW><id>1494267</id><snippet>from datetime import datetime
td = datetime.now() - datetime(1850, 1, 1)
print (86400*td.days)+td.seconds  # seconds since then till now
</snippet></ROW><ROW><id>1494402</id><snippet>socket</snippet></ROW><ROW><id>1494402</id><snippet>from foo import *</snippet></ROW><ROW><id>1494532</id><snippet>def greet(who):
    print "Hello %s" % who

greet_command = lambda: greet("World")
# pass the callable around, and invoke it later
greet_command()
</snippet></ROW><ROW><id>1494532</id><snippet>class MoveFileCommand(object):
    def __init__(self, src, dest):
        self.src = src
        self.dest = dest
        os.rename(self.src, self.dest)
    def undo(self):
        os.rename(self.dest, self.src)

undo_stack = []
undo_stack.append(MoveFileCommand('foo.txt', 'bar.txt'))
undo_stack.append(MoveFileCommand('bar.txt', 'baz.txt'))
# foo.txt is now renamed to baz.txt
undo_stack.pop().undo() # Now it's bar.txt
undo_stack.pop().undo() # and back to foo.txt
</snippet></ROW><ROW><id>1494728</id><snippet>bool</snippet></ROW><ROW><id>1494728</id><snippet>int</snippet></ROW><ROW><id>1494728</id><snippet>str</snippet></ROW><ROW><id>1494728</id><snippet>tuple</snippet></ROW><ROW><id>1494728</id><snippet>foo = X</snippet></ROW><ROW><id>1494728</id><snippet>foo</snippet></ROW><ROW><id>1494728</id><snippet>X</snippet></ROW><ROW><id>1494728</id><snippet>foo</snippet></ROW><ROW><id>1494728</id><snippet>X</snippet></ROW><ROW><id>1494728</id><snippet>obj.foo = X</snippet></ROW><ROW><id>1494728</id><snippet>obj.setFoo(X)</snippet></ROW><ROW><id>1494848</id><snippet>User</snippet></ROW><ROW><id>1494848</id><snippet>django.contrib.auth.views</snippet></ROW><ROW><id>1494848</id><snippet>django.contrib.auth.views.login</snippet></ROW><ROW><id>1494848</id><snippet>(r'^/login/$', 'django.contrib.auth.views.login', {'template_name': 'myapp/login.html'})
</snippet></ROW><ROW><id>1494848</id><snippet>login</snippet></ROW><ROW><id>1494848</id><snippet>template_name</snippet></ROW><ROW><id>1494848</id><snippet>django.contrib.auth</snippet></ROW><ROW><id>1494848</id><snippet>login</snippet></ROW><ROW><id>1494848</id><snippet>logout</snippet></ROW><ROW><id>1494848</id><snippet>password_change</snippet></ROW><ROW><id>1494850</id><snippet>import math
def format_percentage(x, precision=3):
    return ("%%.%df%%%%" % (precision - min(0,math.log10(100-x)))) % x
</snippet></ROW><ROW><id>1494992</id><snippet>lxml</snippet></ROW><ROW><id>1494992</id><snippet>remove_comments</snippet></ROW><ROW><id>1494992</id><snippet>remove_pis</snippet></ROW><ROW><id>1494992</id><snippet>etree.ETCompatXMLParser</snippet></ROW><ROW><id>1494992</id><snippet>etree.XMLParser</snippet></ROW><ROW><id>1495680</id><snippet>class Team:
  def __init__(self):
    self.name = None
    self.logo = None
    self.members = 0
</snippet></ROW><ROW><id>1495821</id><snippet>itertools.groupby</snippet></ROW><ROW><id>1495821</id><snippet>defaultdict</snippet></ROW><ROW><id>1495821</id><snippet>import itertools
import operator

def lot_to_dict(lot):
  key = operator.itemgetter(0)
  # if lot's not sorted, you also need...:
  # lot = sorted(lot, key=key)
  # NOT in-place lot.sort to avoid changing it!
  grob = itertools.groupby(lot, key)
  return dict((k, [v[1] for v in itr]) for k, itr in grob)
</snippet></ROW><ROW><id>1495821</id><snippet>def merge_dols(dol1, dol2):
  keys = set(dol1).union(dol2)
  no = []
  return dict((k, dol1.get(k, no) + dol2.get(k, no)) for k in keys)
</snippet></ROW><ROW><id>1495821</id><snippet>[]</snippet></ROW><ROW><id>1495821</id><snippet>no</snippet></ROW><ROW><id>1495821</id><snippet>def merge_dols(dol1, dol2):
  result = dict(dol1, **dol2)
  result.update((k, dol1[k] + dol2[k])
                for k in set(dol1).intersection(dol2))
  return result
</snippet></ROW><ROW><id>1496127</id><snippet>put</snippet></ROW><ROW><id>1496145</id><snippet>__import__</snippet></ROW><ROW><id>1496145</id><snippet>__subclasses__</snippet></ROW><ROW><id>1496145</id><snippet>__bases__</snippet></ROW><ROW><id>1496145</id><snippet>__mro__</snippet></ROW><ROW><id>1496355</id><snippet>def method(**kwargs):
  print kwargs

keywords = {'keyword1': 'foo', 'keyword2': 'bar'}
method(keyword1='foo', keyword2='bar')
method(**keywords)
</snippet></ROW><ROW><id>1496355</id><snippet>{'keyword2': 'bar', 'keyword1': 'foo'}
{'keyword2': 'bar', 'keyword1': 'foo'}
</snippet></ROW><ROW><id>1496477</id><snippet>processHeader(f.readline())
for line in f:
    processBody(line)
</snippet></ROW><ROW><id>1497008</id><snippet>multiprocessing</snippet></ROW><ROW><id>1497008</id><snippet>os.fork</snippet></ROW><ROW><id>1497331</id><snippet>def reverse(viewname, urlconf=None, args=None, kwargs=None, 
                      prefix=None, current_app=None):
</snippet></ROW><ROW><id>1497331</id><snippet>**kwargs</snippet></ROW><ROW><id>1497331</id><snippet>kwargs={"year":2009,"month":9}
reverse("name",**kwargs)
</snippet></ROW><ROW><id>1497331</id><snippet>reverse("name", year=2009, month=9)
</snippet></ROW><ROW><id>1497331</id><snippet>reverse("name",kwargs={"year":2009,"month":9})
</snippet></ROW><ROW><id>1497331</id><snippet>**kwargs</snippet></ROW><ROW><id>1497331</id><snippet>**kwargs</snippet></ROW><ROW><id>1497331</id><snippet>def reverse(viewname, urlconf=None, prefix=None, 
                      current_app=None, *args, **kwargs):
</snippet></ROW><ROW><id>1497768</id><snippet>self</snippet></ROW><ROW><id>1497768</id><snippet>class Reciever:
    def themethod(self):
        frame = sys._getframe(1)
        arguments = frame.f_code.co_argcount
        if arguments == 0:
            print "Not called from a method"
            return
        caller_calls_self = frame.f_code.co_varnames[0]
        thecaller = frame.f_locals[caller_calls_self]
        print "Called from a", thecaller.__class__.__name__, "instance"
</snippet></ROW><ROW><id>1498918</id><snippet>def __init__(self, *args, **kwargs):
    super(self.__class__, self).__init__(*args, **kwargs)
    CHOICES = []
    for notice in NoticeType.objects.all():
        CHOICES.append( (notice.label, notice.display) )
    self.fields['notifications'].choices = CHOICES
</snippet></ROW><ROW><id>1499033</id><snippet>os.pathsep</snippet></ROW><ROW><id>1499770</id><snippet>SCRIPT_NAME</snippet></ROW><ROW><id>1499770</id><snippet>language= environ['SCRIPT_NAME'][1:].split('/', 1)[0]
if language not in ('english', 'italiano'):
    language= 'english'
</snippet></ROW><ROW><id>1500063</id><snippet>MacPorts</snippet></ROW><ROW><id>1500063</id><snippet>py-</snippet></ROW><ROW><id>1500063</id><snippet>py25-</snippet></ROW><ROW><id>1500063</id><snippet>sudo port install py26-mysql
</snippet></ROW><ROW><id>1500515</id><snippet>class MYREALM_securepage(webapp.RequestHandler):
  def get(self):
      if not 'Authorization' in self.request.headers:
          self.response.headers['WWW-Authenticate'] = 'Basic realm="MYREALM"'
          self.response.set_status(401)
          self.response.out.write("Authorization required")
      else:
          auth = self.request.headers['Authorization']
          (username, password) = base64.b64decode(auth.split(' ')[1]).split(':')
          # Check the username and password, and proceed ...
</snippet></ROW><ROW><id>1500652</id><snippet>&lt;/p&gt;

&lt;pre&gt;
    os.sysconf(os.sysconf_names['SC_ARG_MAX'])
&lt;/pre&gt;

&lt;p&gt;</snippet></ROW><ROW><id>1500887</id><snippet>__copy__()</snippet></ROW><ROW><id>1500887</id><snippet>__deepcopy__()</snippet></ROW><ROW><id>1500887</id><snippet>__deepcopy__()</snippet></ROW><ROW><id>1500887</id><snippet>deepcopy()</snippet></ROW><ROW><id>1500887</id><snippet>__copy__</snippet></ROW><ROW><id>1500887</id><snippet>__deepcopy__</snippet></ROW><ROW><id>1500887</id><snippet>__copy__</snippet></ROW><ROW><id>1500887</id><snippet>def __copy__(self):
  newone = type(self)()
  newone.__dict__.update(self.__dict__)
  return newone
</snippet></ROW><ROW><id>1500887</id><snippet>__deepcopy__</snippet></ROW><ROW><id>1500887</id><snippet>memo</snippet></ROW><ROW><id>1500887</id><snippet>self.foo = deepcopy(self.foo, memo)</snippet></ROW><ROW><id>1500887</id><snippet>self.foo</snippet></ROW><ROW><id>1500887</id><snippet>__dict__</snippet></ROW><ROW><id>1501133</id><snippet>if len(x) == len(set(x)):
    print "all elements are unique"
else:
    print "elements are not unique"
</snippet></ROW><ROW><id>1501219</id><snippet>svnversion</snippet></ROW><ROW><id>1501219</id><snippet>svnversion</snippet></ROW><ROW><id>1501219</id><snippet>import subprocess

def svnversion():
    p = subprocess.Popen("svnversion", shell=True, \
       stdout=subprocess.PIPE, stderr=subprocess.PIPE)
    (stdout, stderr) = p.communicate()
    return stdout
</snippet></ROW><ROW><id>1501246</id><snippet>class xyz:
    def __init__ (self, a='1', b='2'):
        print a,b

xyz(b=3,a=4)
xyz(a=5,b=6)

&gt;&gt;4 3
&gt;&gt;5 6
</snippet></ROW><ROW><id>1501757</id><snippet>sys.stdout</snippet></ROW><ROW><id>1501757</id><snippet>from multiprocessing import Process
import os
import sys

def info(title):
    print title
    print 'module name:', __name__
    print 'parent process:', os.getppid()
    print 'process id:', os.getpid()

def f(name):
    sys.stdout = open(str(os.getpid()) + ".out", "w")
    info('function f')
    print 'hello', name

if __name__ == '__main__':
    p = Process(target=f, args=('bob',))
    p.start()
    q = Process(target=f, args=('fred',))
    q.start()
    p.join()
    q.join()
</snippet></ROW><ROW><id>1501815</id><snippet>import re

s = "aa67bc54c9"
print ''.join(t * int(n) for t, n in re.findall(r"([a-z]+)([0-9]+)", s))
</snippet></ROW><ROW><id>1501815</id><snippet>t</snippet></ROW><ROW><id>1501815</id><snippet>n</snippet></ROW><ROW><id>1501815</id><snippet>*</snippet></ROW><ROW><id>1501815</id><snippet>int()</snippet></ROW><ROW><id>1501815</id><snippet>''.join()</snippet></ROW><ROW><id>1501815</id><snippet>[a-z]</snippet></ROW><ROW><id>1501815</id><snippet>[a-z]+</snippet></ROW><ROW><id>1501815</id><snippet>[0-9]+</snippet></ROW><ROW><id>1501815</id><snippet>findall()</snippet></ROW><ROW><id>1501815</id><snippet>t</snippet></ROW><ROW><id>1501815</id><snippet>n</snippet></ROW><ROW><id>1501943</id><snippet>tracefile</snippet></ROW><ROW><id>1501943</id><snippet>write</snippet></ROW><ROW><id>1501943</id><snippet>from ZSI import ServiceProxy
import BabelTypes
import sys

dbgfile = open('dbgfile', 'w')   # to log trace to a file, or
dbgfile = sys.stdout             # to log trace to stdout
service = ServiceProxy('http://www.xmethods.net/sd/BabelFishService.wsdl',
                       tracefile=dbgfile,
                       typesmodule=BabelTypes)
value = service.BabelFish('en_de', 'This is a test!')

dbgfile.close()
</snippet></ROW><ROW><id>1502488</id><snippet>part0, _, part2 = str.partition(' ')
</snippet></ROW><ROW><id>1502488</id><snippet>part0, part2 = str.partition(' ')[::2]
</snippet></ROW><ROW><id>1502488</id><snippet>from operator import itemgetter
part0, part2 = itemgetter(0, 2)(str.partition(' '))
</snippet></ROW><ROW><id>1502622</id><snippet>&lt;C-P&gt;</snippet></ROW><ROW><id>1502622</id><snippet>&lt;C-N&gt;</snippet></ROW><ROW><id>1503144</id><snippet>def arePermsEqualParity(perm0, perm1):
    """Check if 2 permutations are of equal parity.

    Assume that both permutation lists are of equal length
    and have the same elements. No need to check for these
    conditions.
    """
    perm1 = perm1[:] ## copy this list so we don't mutate the original

    transCount = 0
    for loc in range(len(perm0) - 1):                         # Do (len - 1) transpositions
        p0 = perm0[loc]
        p1 = perm1[loc]
        if p0 != p1:
            sloc = perm1[loc:].index(p0)+loc          # Find position in perm1
            perm1[loc], perm1[sloc] = p0, p1          # Swap in perm1
            transCount += 1

    # Even number of transpositions means equal parity
    if (transCount % 2) == 0:
        return True
    else:
        return False
</snippet></ROW><ROW><id>1504004</id><snippet>date_format</snippet></ROW><ROW><id>1504004</id><snippet>users</snippet></ROW><ROW><id>1504004</id><snippet>SELECT to_char((SELECT date_format FROM users WHERE users.id=123), column) FROM table;
</snippet></ROW><ROW><id>1504742</id><snippet>is</snippet></ROW><ROW><id>1504742</id><snippet>==</snippet></ROW><ROW><id>1504742</id><snippet>&gt;&gt;&gt; a = 'pub'
&gt;&gt;&gt; b = ''.join(['p', 'u', 'b'])
&gt;&gt;&gt; a == b
True
&gt;&gt;&gt; a is b
False
</snippet></ROW><ROW><id>1504742</id><snippet>is</snippet></ROW><ROW><id>1504742</id><snippet>id(a) == id(b)</snippet></ROW><ROW><id>1504760</id><snippet>post-checkout</snippet></ROW><ROW><id>1504760</id><snippet>man githooks</snippet></ROW><ROW><id>1504903</id><snippet>class MyForm(forms.Form):
    myfield = forms.CharField(widget=forms.TextInput(attrs={'class' : 'myfieldclass'}))
</snippet></ROW><ROW><id>1504903</id><snippet>class MyForm(forms.ModelForm):
    class Meta:
        model = MyModel
        widgets = {
            'myfield': forms.TextInput(attrs={'class': 'myfieldclass'}),
        }
</snippet></ROW><ROW><id>1504903</id><snippet>class MyForm(forms.ModelForm):
    class Meta:
        model = MyModel

    def __init__(self, *args, **kwargs):
        super(MyForm, self).__init__(*args, **kwargs)
        self.fields['myfield'].widget.attrs.update({'class' : 'myfieldclass'})
</snippet></ROW><ROW><id>1505477</id><snippet>r'{"FileExists": true, "Version": "4.3.2.1", "Path": "\\\\host\\dir\\file.exe"}'
</snippet></ROW><ROW><id>1505477</id><snippet>r</snippet></ROW><ROW><id>1505477</id><snippet>\</snippet></ROW><ROW><id>1505477</id><snippet>&gt;&gt;&gt; import json
&gt;&gt;&gt; d = json.loads(s)
&gt;&gt;&gt; d.keys()
[u'FileExists', u'Path', u'Version']
&gt;&gt;&gt; d.values()
[True, u'\\\\host\\dir\\file.exe', u'4.3.2.1']
</snippet></ROW><ROW><id>1505477</id><snippet>&gt;&gt;&gt; repr(d[u'Path'])
"u'\\\\\\\\host\\\\dir\\\\file.exe'"
&gt;&gt;&gt; str(d[u'Path'])
'\\\\host\\dir\\file.exe'
&gt;&gt;&gt; print d[u'Path']
\\host\dir\file.exe
</snippet></ROW><ROW><id>1505477</id><snippet>repr(obj)</snippet></ROW><ROW><id>1505477</id><snippet>obj</snippet></ROW><ROW><id>1505477</id><snippet>&gt;&gt;&gt; class A:
...   __str__ = lambda self: "str"
...   __repr__  = lambda self: "repr"
... 
&gt;&gt;&gt; A()
repr
&gt;&gt;&gt; print A()
str
</snippet></ROW><ROW><id>1505477</id><snippet>s</snippet></ROW><ROW><id>1505477</id><snippet>'\d'</snippet></ROW><ROW><id>1505477</id><snippet>'\f'</snippet></ROW><ROW><id>1505477</id><snippet>print s</snippet></ROW><ROW><id>1505477</id><snippet>'\\d'</snippet></ROW><ROW><id>1505727</id><snippet>class myClass extends anotherClass {
}
</snippet></ROW><ROW><id>1506185</id><snippet>export</snippet></ROW><ROW><id>1506185</id><snippet>bash</snippet></ROW><ROW><id>1506185</id><snippet>os.system('export MY_DATA="my_export"')</snippet></ROW><ROW><id>1506185</id><snippet>/bin/bash process, command `python yourscript.py` forks python subprocess
 |_
   /usr/bin/python process, command `os.system()` forks /bin/sh subprocess
    |_
      /bin/sh process, command `export ...` changes local environment
</snippet></ROW><ROW><id>1506185</id><snippet>/bin/sh</snippet></ROW><ROW><id>1506185</id><snippet>export ...</snippet></ROW><ROW><id>1506561</id><snippet>&lt;/sc'+'ript&gt;'</snippet></ROW><ROW><id>1506561</id><snippet>&lt;'+'/sc'+'ript&gt;'</snippet></ROW><ROW><id>1506561</id><snippet>+</snippet></ROW><ROW><id>1506561</id><snippet>&lt;</snippet></ROW><ROW><id>1506561</id><snippet>&lt;</snippet></ROW><ROW><id>1506561</id><snippet>&gt;</snippet></ROW><ROW><id>1506561</id><snippet>&gt;</snippet></ROW><ROW><id>1506594</id><snippet>export</snippet></ROW><ROW><id>1506594</id><snippet>set</snippet></ROW><ROW><id>1506594</id><snippet>os.system</snippet></ROW><ROW><id>1506916</id><snippet>datetime.date.today() + datetime.timedelta(days=1)</snippet></ROW><ROW><id>1507110</id><snippet>os.path.walk</snippet></ROW><ROW><id>1507110</id><snippet>filename -&gt; dimensions</snippet></ROW><ROW><id>1507110</id><snippet>itertools</snippet></ROW><ROW><id>1507127</id><snippet>__init__()</snippet></ROW><ROW><id>1507127</id><snippet>ValueError</snippet></ROW><ROW><id>1507578</id><snippet>self.children = {}
</snippet></ROW><ROW><id>1507578</id><snippet>self.children = weakref.WeakValueDictionary()
</snippet></ROW><ROW><id>1507578</id><snippet>children</snippet></ROW><ROW><id>1507578</id><snippet>weakref</snippet></ROW><ROW><id>1507578</id><snippet>__del__</snippet></ROW><ROW><id>1507578</id><snippet>gc</snippet></ROW><ROW><id>1508747</id><snippet>mod_python</snippet></ROW><ROW><id>1508747</id><snippet>mod_python</snippet></ROW><ROW><id>1508747</id><snippet>mod_php</snippet></ROW><ROW><id>1508747</id><snippet>mod_python</snippet></ROW><ROW><id>1508747</id><snippet>mod_wsgi</snippet></ROW><ROW><id>1508747</id><snippet>mod_wsgi</snippet></ROW><ROW><id>1508747</id><snippet>mywebapp.py</snippet></ROW><ROW><id>1508747</id><snippet>def application(environ, start_response):
    start_response('200 OK', [('content-type', 'text/plain')])
    return ['Hello World']
</snippet></ROW><ROW><id>1508747</id><snippet>WSGIScriptAlias /myapp /usr/local/www/wsgi-scripts/mywebapp.py
&lt;Directory /usr/local/www/wsgi-scripts&gt;
  Order allow,deny
  Allow from all
&lt;/Directory&gt;
</snippet></ROW><ROW><id>1508747</id><snippet>http://localhost/myapp</snippet></ROW><ROW><id>1508747</id><snippet>http://localhost/myapp/stuff/here</snippet></ROW><ROW><id>1508761</id><snippet>import logging
LOG_FILENAME = '/tmp/logging_example.out'
logging.basicConfig(filename=LOG_FILENAME,level=logging.DEBUG,)

logging.debug('This message should go to the log file')

try:
   run_my_stuff()
except:
   logging.exception('Got exception on main handler')
   raise
</snippet></ROW><ROW><id>1508761</id><snippet>/tmp/logging_example.out</snippet></ROW><ROW><id>1508761</id><snippet>DEBUG:root:This message should go to the log file
ERROR:root:Got exception on main handler
Traceback (most recent call last):
  File "/tmp/teste.py", line 9, in &lt;module&gt;
    run_my_stuff()
NameError: name 'run_my_stuff' is not defined
</snippet></ROW><ROW><id>1508826</id><snippet>Image.open()</snippet></ROW><ROW><id>1508976</id><snippet>xml.sax.parse</snippet></ROW><ROW><id>1508976</id><snippet>read</snippet></ROW><ROW><id>1508976</id><snippet>parse</snippet></ROW><ROW><id>1508976</id><snippet>read</snippet></ROW><ROW><id>1508976</id><snippet>import xml.sax
import xml.sax.handler

class PseudoStream(object):
    def read_iterator(self):
        yield '&lt;foo&gt;'
        yield '&lt;bar&gt;'
        for line in open('test.xml'):
            yield line
        yield '&lt;/bar&gt;'
        yield '&lt;/foo&gt;'

    def __init__(self):
        self.ri = self.read_iterator()

    def read(self, *foo):
        try:
            return self.ri.next()
        except StopIteration:
            return ''

class SAXHandler(xml.sax.handler.ContentHandler):
    def startElement(self, name, attrs):
        print name, attrs

d = xml.sax.parse(PseudoStream(), SAXHandler())
</snippet></ROW><ROW><id>1509208</id><snippet>fromkeys</snippet></ROW><ROW><id>1509208</id><snippet>__iter__</snippet></ROW><ROW><id>1509208</id><snippet>dict</snippet></ROW><ROW><id>1509208</id><snippet>def __iter__(self):
    return iter(self.d)
</snippet></ROW><ROW><id>1509421</id><snippet>result = query.get()
if result is None:
  #do the following
</snippet></ROW><ROW><id>1509421</id><snippet>if result is not None:
  #do the following
</snippet></ROW><ROW><id>1509700</id><snippet>if 'nose' in sys.modules:
    print "Nose is running, or at least has been imported!"
    #or whatever you need to do if nose is running
</snippet></ROW><ROW><id>1510167</id><snippet>import multiprocessing

def query_with_timeout(dbc, timeout, query, *a, **k):
  conn1, conn2 = multiprocessing.Pipe(False)
  subproc = multiprocessing.Process(target=do_query,
                                    args=(dbc, query, conn2)+a, 
                                    kwargs=k)
  subproc.start()
  subproc.join(timeout)
  if conn1.poll():
    return conn1.recv()
  subproc.terminate()
  raise TimeoutError("Query %r ran for &gt;%r" % (query, timeout))

def do_query(dbc, query, conn, *a, **k):
  cu = dbc.cursor()
  cu.execute(query, *a, **k)
  return cu.fetchall()
</snippet></ROW><ROW><id>1510276</id><snippet>open()</snippet></ROW><ROW><id>1510276</id><snippet>seek()</snippet></ROW><ROW><id>1510276</id><snippet>tell()</snippet></ROW><ROW><id>1510276</id><snippet>f.readline().decode('utf-8')</snippet></ROW><ROW><id>1510276</id><snippet>f.read()</snippet></ROW><ROW><id>1510276</id><snippet>readline()</snippet></ROW><ROW><id>1510402</id><snippet>type</snippet></ROW><ROW><id>1510402</id><snippet>import this</snippet></ROW><ROW><id>1510402</id><snippet>class sic:
  __metaclass__ = mymeta
  ...
</snippet></ROW><ROW><id>1510402</id><snippet>class sify(metaclass=mymeta):
  ...
</snippet></ROW><ROW><id>1510402</id><snippet>iterator := aCollection iterator.
[iterator hasNext] whileTrue: [iterator next doSomething].
</snippet></ROW><ROW><id>1510402</id><snippet>select:</snippet></ROW><ROW><id>1510402</id><snippet>aCollection select: [:item | item doSomething].
</snippet></ROW><ROW><id>1510402</id><snippet>if</snippet></ROW><ROW><id>1510402</id><snippet>while</snippet></ROW><ROW><id>1510402</id><snippet>ifTrue:</snippet></ROW><ROW><id>1510402</id><snippet>for i in range(10):
  myobject.bah()
</snippet></ROW><ROW><id>1510402</id><snippet>bah</snippet></ROW><ROW><id>1510402</id><snippet>myobject</snippet></ROW><ROW><id>1510402</id><snippet>myobject</snippet></ROW><ROW><id>1510402</id><snippet>bah</snippet></ROW><ROW><id>1510402</id><snippet>themethod = myobject.bah
for i in range(10):
  themethod()
</snippet></ROW><ROW><id>1510406</id><snippet>%inline %{
    double * GetReference(char* name, Publisher* publisher)
    {
         double* ptr = new double;
         publisher-&gt;GetFieldReference(name, ptr);
         return ptr;
    }
%}
</snippet></ROW><ROW><id>1510406</id><snippet>value = ptrDouble.frompointer(GetFieldReference("value", publisher)
</snippet></ROW><ROW><id>1510499</id><snippet>ScriptScope.SetVariable("injected_method", myMethod);
</snippet></ROW><ROW><id>1510499</id><snippet>ScriptRuntime.Globals.SetVariable("injected_method", myMethod);
</snippet></ROW><ROW><id>1510499</id><snippet>import injected_method
</snippet></ROW><ROW><id>1510511</id><snippet>timeit</snippet></ROW><ROW><id>1510511</id><snippet>+=</snippet></ROW><ROW><id>1510511</id><snippet>reduce</snippet></ROW><ROW><id>1510511</id><snippet>O(N**2)</snippet></ROW><ROW><id>1510511</id><snippet>write</snippet></ROW><ROW><id>1510511</id><snippet>cStringIO.StringIO</snippet></ROW><ROW><id>1510511</id><snippet>O(N)</snippet></ROW><ROW><id>1510511</id><snippet>str</snippet></ROW><ROW><id>1510511</id><snippet>str</snippet></ROW><ROW><id>1510511</id><snippet>.decode('utf-8')</snippet></ROW><ROW><id>1510511</id><snippet>.encode</snippet></ROW><ROW><id>1510511</id><snippet>str</snippet></ROW><ROW><id>1510511</id><snippet>array.array</snippet></ROW><ROW><id>1510511</id><snippet>append</snippet></ROW><ROW><id>1510511</id><snippet>insert</snippet></ROW><ROW><id>1510511</id><snippet>O(N**2)</snippet></ROW><ROW><id>1510511</id><snippet>array.array('u')</snippet></ROW><ROW><id>1510511</id><snippet>append</snippet></ROW><ROW><id>1510511</id><snippet>insert</snippet></ROW><ROW><id>1510511</id><snippet>join</snippet></ROW><ROW><id>1510511</id><snippet>re</snippet></ROW><ROW><id>1510511</id><snippet>cStringIO</snippet></ROW><ROW><id>1510616</id><snippet>:</snippet></ROW><ROW><id>1510616</id><snippet>pass</snippet></ROW><ROW><id>1510710</id><snippet>for thing in things:
    for otherthing in things:
        add_edge(thing, otherthing)
</snippet></ROW><ROW><id>1510710</id><snippet>permutations</snippet></ROW><ROW><id>1510710</id><snippet>def pairs(l):
    for i in range(len(l)-1):
        for j in range(i+1, len(l)):
            yield l[i], l[j]
</snippet></ROW><ROW><id>1510710</id><snippet>for conference in dom.getElementsByTagName('conference'):
    var conf_name= node.getAttribute('name')
    for paper in conference.getElementsByTagName('paper'):
        authors= paper.getElementsByTagName('author')
        auth_names= [author.firstChild.data.split('(')[0] for author in authors]

        # Note author's conference attendance
        #
        for auth_name in auth_names:
            G.add_edge(auth_name, conf_name)

        # Note combinations of authors working on same paper
        #
        for auth_name, other_name in pairs(auth_names):
            G.add_edge(auth_name, otherauth_name)
</snippet></ROW><ROW><id>1511097</id><snippet>GET</snippet></ROW><ROW><id>1511097</id><snippet>POST</snippet></ROW><ROW><id>1511280</id><snippet> BarManager(models.Manager):
      use_for_related_fields = True
</snippet></ROW><ROW><id>1511280</id><snippet>class BarManager(models.Manager):
    use_for_related_fields = True

    def bar(self, foo=None):
        if foo == None:
            qs = Foo.objects.all()
            for field_name, field_val in self.core_filters.items():
                field_name = field_name.split('__')[1]
                qs = qs.filter(**{ field_name: field_val })
            foo = qs.get()
        # do k00l stuff with foo
</snippet></ROW><ROW><id>1511555</id><snippet>sys.path.append(".." + os.path.sep + "images")</snippet></ROW><ROW><id>1511555</id><snippet>open("ok.png", "rb")</snippet></ROW><ROW><id>1511564</id><snippet>b1 = lambda x: x[4]-x[0] if x[4]&lt;1.2*x[0] else 1.4*x[0]-x[4]
b2 = lambda x: x[5]-x[1] if x[5]&lt;1.2*x[1] else 1.4*x[1]-x[5]
b3 = lambda x: x[2]-x[3]
</snippet></ROW><ROW><id>1511564</id><snippet>a&lt;=e&lt;=1.4*a</snippet></ROW><ROW><id>1511564</id><snippet>1.2*a</snippet></ROW><ROW><id>1511564</id><snippet>a</snippet></ROW><ROW><id>1511564</id><snippet>1.4*a</snippet></ROW><ROW><id>1511564</id><snippet>e&lt;1.2*a</snippet></ROW><ROW><id>1511564</id><snippet>e-a</snippet></ROW><ROW><id>1511564</id><snippet>e&lt;a</snippet></ROW><ROW><id>1511564</id><snippet>e==a</snippet></ROW><ROW><id>1511564</id><snippet>e&gt;a</snippet></ROW><ROW><id>1511564</id><snippet>e&gt;1.2*a</snippet></ROW><ROW><id>1511564</id><snippet>1.4*a-e</snippet></ROW><ROW><id>1511564</id><snippet>e&gt;1.4*a</snippet></ROW><ROW><id>1511564</id><snippet>e==1.4*a</snippet></ROW><ROW><id>1511564</id><snippet>e&lt;1.4*a</snippet></ROW><ROW><id>1511564</id><snippet>e==1.2*a</snippet></ROW><ROW><id>1511564</id><snippet>ieqcons</snippet></ROW><ROW><id>1511564</id><snippet>b1 = lambda x: (1.4*x[0]-x[4], x[4]-x[0])[x[4]&lt;1.2*x[0]]</snippet></ROW><ROW><id>1511607</id><snippet>import urllib
import urllib2
import cookielib

login = 'user@host.com'
password = 'secret'

cookiejar = cookielib.CookieJar()
urlOpener = urllib2.build_opener(urllib2.HTTPCookieProcessor(cookiejar))

# adjust this to match the form's field names
values = {'username': login, 'password': password}
data = urllib.urlencode(values)
request = urllib2.Request('http://target.of.POST-method', data)
url = urlOpener.open(request)
# from now on, we're authenticated and we can access the rest of the site
url = urlOpener.open('http://rest.of.user.area')
</snippet></ROW><ROW><id>1511907</id><snippet>shutil.copytree</snippet></ROW><ROW><id>1511907</id><snippet>ignore</snippet></ROW><ROW><id>1511977</id><snippet>s="""dcenter: code=d1, loc=San Jose, x=100, y=100, ctype=ct1
dcenter: code=d2, loc=San Ramon, x=300, y=200, ctype=ct2
storage: code=s1, locFrom=d1, x=50, y=50, rtype=rt1
storage: code=s2, locFrom=d1, x=-50,y=100, rtype=rt1"""
</snippet></ROW><ROW><id>1511977</id><snippet>print '&lt;?xml version="1.0"?&gt;'
print "&lt;dcenters&gt;"
for line in s.splitlines():
    type, fields = line.split(":")
    params = fields.split(",")
    code = params[0].split("=")[1].strip()
    print '&lt;%s code="%s"&gt;' % (type, code)
    for p in params[1:]:
        ptype, pvalue = p.strip().split("=")
        print '&lt;%s&gt; %s &lt;/%s&gt;' % (ptype, pvalue, ptype)
    print '&lt;/%s&gt;' % type
print "&lt;/dcenters&gt;"
</snippet></ROW><ROW><id>1512228</id><snippet>create</snippet></ROW><ROW><id>1512228</id><snippet>get_or_create</snippet></ROW><ROW><id>1512228</id><snippet>get_or_create</snippet></ROW><ROW><id>1512228</id><snippet>source</snippet></ROW><ROW><id>1512228</id><snippet>src_object_id</snippet></ROW><ROW><id>1512228</id><snippet>src_content_type</snippet></ROW><ROW><id>1512228</id><snippet>scr_object_id</snippet></ROW><ROW><id>1512228</id><snippet>u.id</snippet></ROW><ROW><id>1512228</id><snippet>src_content_type</snippet></ROW><ROW><id>1512228</id><snippet>u.content_type</snippet></ROW><ROW><id>1512228</id><snippet>try/except</snippet></ROW><ROW><id>1512228</id><snippet>create</snippet></ROW><ROW><id>1512414</id><snippet>WSGIApplication</snippet></ROW><ROW><id>1512414</id><snippet>(?i)</snippet></ROW><ROW><id>1512414</id><snippet>urlpatterns</snippet></ROW><ROW><id>1512417</id><snippet>__repr__()</snippet></ROW><ROW><id>1512417</id><snippet>&gt;&gt;&gt; OPTIONS=('ON', 'OFF', )
&gt;&gt;&gt; "OPTIONS="+repr(OPTIONS)
"OPTIONS=('ON', 'OFF')"
</snippet></ROW><ROW><id>1512526</id><snippet>stdin</snippet></ROW><ROW><id>1512526</id><snippet>stdout</snippet></ROW><ROW><id>1512526</id><snippet>$ cat test.py
import os
print os.fstat(0) == os.fstat(1)
$ python test.py
True
$ python test.py &gt; f
$ cat f
False
$
</snippet></ROW><ROW><id>1512526</id><snippet>st_ino</snippet></ROW><ROW><id>1512526</id><snippet>st_dev</snippet></ROW><ROW><id>1512579</id><snippet>import inspect
from optparse import OptionParser
import sys

def do_stuff(opt0, opt1="a", opt2="b", opt3="c"):
    print opt0, opt1, opt2, opt3

if __name__ == "__main__":
    parser = OptionParser()
    args, varargs, varkw, defaults = inspect.getargspec(do_stuff)
    if varargs or varkw:
      sys.exit("Sorry, can't make opts from a function with *a and/or **k!")
    lend = len(defaults)
    nodef = args[:-lend]
    for a in nodef:
      parser.add_option("--%s" % a)
    for a, d in zip(args[-lend:], defaults):
      parser.add_option("--%s" % a, default=d)

    options, args = parser.parse_args()
    d = vars(options)
    for n, v in zip(nodef, args):
      d[n] = v

    do_stuff(**d)
</snippet></ROW><ROW><id>1512681</id><snippet>easy_install</snippet></ROW><ROW><id>1512681</id><snippet>easy_install</snippet></ROW><ROW><id>1512681</id><snippet>$ curl -O http://nightly.ziade.org/distribute_setup.py
$ python distribute_setup.py
</snippet></ROW><ROW><id>1512681</id><snippet>python</snippet></ROW><ROW><id>1512681</id><snippet>$PATH</snippet></ROW><ROW><id>1512681</id><snippet>0.6c10</snippet></ROW><ROW><id>1513159</id><snippet>os.path.isabs</snippet></ROW><ROW><id>1513735</id><snippet>'101101' &lt; '10201'</snippet></ROW><ROW><id>1513735</id><snippet>'1' &lt; '2'</snippet></ROW><ROW><id>1513735</id><snippet>list.append(reversed)</snippet></ROW><ROW><id>1513735</id><snippet>list.append(int(reversed))</snippet></ROW><ROW><id>1513884</id><snippet>python setup.py sdist register upload</snippet></ROW><ROW><id>1514109</id><snippet>class DataHolder(object):
    def set(self, value): self.value = value; return value
</snippet></ROW><ROW><id>1514109</id><snippet>if</snippet></ROW><ROW><id>1514109</id><snippet>elif</snippet></ROW><ROW><id>1514109</id><snippet>dh = DataHolder()
if dh.set(something()):
  # do something with dh.value
elif dh.set(somethingelse()):
  # ...
</snippet></ROW><ROW><id>1514109</id><snippet>DataHolder</snippet></ROW><ROW><id>1514269</id><snippet>Queue.Queue</snippet></ROW><ROW><id>1514269</id><snippet>pool</snippet></ROW><ROW><id>1514269</id><snippet>pool.get()</snippet></ROW><ROW><id>1514269</id><snippet>pool.put</snippet></ROW><ROW><id>1514269</id><snippet>Queue.Queue</snippet></ROW><ROW><id>1514466</id><snippet>Seat</snippet></ROW><ROW><id>1514466</id><snippet>roomId</snippet></ROW><ROW><id>1514466</id><snippet>room</snippet></ROW><ROW><id>1514466</id><snippet>roomIdId</snippet></ROW><ROW><id>1514470</id><snippet>setdefault(key[, default])</snippet></ROW><ROW><id>1514470</id><snippet>public static V SetDefault&lt;K,V&gt;(this IDictionary&lt;K,V&gt; dict, K key, V @default)
{
    V value;
    if (!dict.TryGetValue(key, out value))
    {
        dict.Add(key, @default);
        return @default;
    }
    else
    {
        return value;
    }
}
</snippet></ROW><ROW><id>1514470</id><snippet>string key;
Dictionary&lt;string, int&gt; dict;

dict[key] = dict.SetDefault(key, 0) + 1;
</snippet></ROW><ROW><id>1514850</id><snippet>opener = urllib2.build_opener(urllib2.HTTPCookieProcessor(self.br._ua_handlers["_cookies"].cookiejar))
opener.open(imgurl)
</snippet></ROW><ROW><id>1514879</id><snippet>from pygments import highlight
from pygments.lexers import PythonLexer
from pygments.formatters import HtmlFormatter

highlighted = highlight('# Some Python code', PythonLexer(), HtmlFormatter())
</snippet></ROW><ROW><id>1515063</id><snippet>def swap(ary, idx1, idx2):
    ary[idx1], ary[idx2] = [ary[i] for i in (idx2, idx1)]

def permutations(ordered, movements):
    size = len(ordered)
    for i in range(1, len(ordered)):
        for j in range(movements[i]):
            swap(ordered, i-j, i-j-1)
    return ordered

numberofcases = input()
for i in range(numberofcases):
    sizeofcase = input()
    movements = [int(s) for s in raw_input().split()]
    ordered = [str(i) for i in range(1, sizeofcase+1)]
    ordered = permutations(ordered, movements)
    output = " ".join(ordered)
    print output
</snippet></ROW><ROW><id>1515403</id><snippet>ast.visit</snippet></ROW><ROW><id>1515403</id><snippet>ast.Node</snippet></ROW><ROW><id>1515403</id><snippet>foo</snippet></ROW><ROW><id>1515403</id><snippet>self.visit_foo</snippet></ROW><ROW><id>1515403</id><snippet>self.generic_visit</snippet></ROW><ROW><id>1515403</id><snippet>ast</snippet></ROW><ROW><id>1515403</id><snippet>self.visit</snippet></ROW><ROW><id>1515403</id><snippet>&gt;&gt;&gt; class v(ast.NodeVisitor):
...   def generic_visit(self, node):
...     print type(node).__name__
...     ast.NodeVisitor.generic_visit(self, node)
...
</snippet></ROW><ROW><id>1515403</id><snippet>generic_visit</snippet></ROW><ROW><id>1515403</id><snippet>&gt;&gt;&gt; x = v()
&gt;&gt;&gt; t = ast.parse('d[x] += v[y, x]')
&gt;&gt;&gt; x.visit(t)
</snippet></ROW><ROW><id>1515403</id><snippet>Module
AugAssign
Subscript
Name
Load
Index
Name
Load
Store
Add
Subscript
Name
Load
Index
Tuple
Name
Load
Name
Load
Load
Load
</snippet></ROW><ROW><id>1515403</id><snippet>&gt;&gt;&gt; class w(v):
...   def visit_Load(self, node): pass
...
</snippet></ROW><ROW><id>1515403</id><snippet>visit</snippet></ROW><ROW><id>1515403</id><snippet>generic_visit</snippet></ROW><ROW><id>1515403</id><snippet>visit_Load</snippet></ROW><ROW><id>1515403</id><snippet>&gt;&gt;&gt; y = w()
&gt;&gt;&gt; y.visit(t)
Module
AugAssign
Subscript
Name
Index
Name
Store
Add
Subscript
Name
Index
Tuple
Name
Name
</snippet></ROW><ROW><id>1515403</id><snippet>&gt;&gt;&gt; class z(v):
...   def visit_Name(self, node): print 'Name:', node.id
... 
&gt;&gt;&gt; z().visit(t)
Module
AugAssign
Subscript
Name: d
Index
Name: x
Store
Add
Subscript
Name: v
Index
Tuple
Name: y
Name: x
Load
Load
</snippet></ROW><ROW><id>1515403</id><snippet>generic_visit</snippet></ROW><ROW><id>1515403</id><snippet>&gt;&gt;&gt; class allnames(ast.NodeVisitor):
...   def visit_Module(self, node):
...     self.names = set()
...     self.generic_visit(node)
...     print sorted(self.names)
...   def visit_Name(self, node):
...     self.names.add(node.id)
... 
&gt;&gt;&gt; allnames().visit(t)
['d', 'v', 'x', 'y']
</snippet></ROW><ROW><id>1515403</id><snippet>generic_visit</snippet></ROW><ROW><id>1515403</id><snippet>visit_Module</snippet></ROW><ROW><id>1515403</id><snippet>visit_Name</snippet></ROW><ROW><id>1515403</id><snippet>visit</snippet></ROW><ROW><id>1515603</id><snippet>eval</snippet></ROW><ROW><id>1515603</id><snippet>&gt;&gt;&gt; s = '3+4'
&gt;&gt;&gt; eval(s)
7
</snippet></ROW><ROW><id>1515603</id><snippet>&gt;&gt;&gt; s = '3+4'
&gt;&gt;&gt; f = eval('lambda: ' + s)
&gt;&gt;&gt; f()
7
</snippet></ROW><ROW><id>1515603</id><snippet>eval</snippet></ROW><ROW><id>1515657</id><snippet>(?i)</snippet></ROW><ROW><id>1515657</id><snippet>r'...'</snippet></ROW><ROW><id>1515657</id><snippet>urlpatterns = patterns('',
(r'^(?i)admin/(.*)', admin.site.root),
(r'^(?i)static/(?P&lt;path&gt;.*)$', 'django.views.static.serve',
    {'document_root': settings.STATIC_DOC_ROOT, 'show_indexes': True}),
(r'^(?i)login/$', 'django.contrib.auth.views.login'),
(r'^(?i)logout/$', do_logout),
)
</snippet></ROW><ROW><id>1515808</id><snippet>def multiplyItemsByFour(argsList):
    output = type(argsList[0])()
    for arg in argsList:
        output += arg * 4
    return output
</snippet></ROW><ROW><id>1515808</id><snippet>[1, 2, 3, 4]</snippet></ROW><ROW><id>1515808</id><snippet>[1.0, 2.0, 3.0, 4.0]</snippet></ROW><ROW><id>1515808</id><snippet>"abcdef"</snippet></ROW><ROW><id>1515903</id><snippet>operator[]</snippet></ROW><ROW><id>1516182</id><snippet>import os
os.environ['LINES'] = "25"
os.environ['COLUMNS'] = "80"
# run pexpect stuff as before
</snippet></ROW><ROW><id>1516449</id><snippet>def mixed_order( a ):
    return ( a.attribute1, -a.attribute2 )

someList.sort( key=mixed_order )
</snippet></ROW><ROW><id>1516449</id><snippet>.sort()</snippet></ROW><ROW><id>1516449</id><snippet>def key1( a ): return a.attribute1
def key2( a ): return a.attribute2

someList.sort( key=key2, reverse=True )
someList.sort( key=key1 )
</snippet></ROW><ROW><id>1516449</id><snippet>__eq__</snippet></ROW><ROW><id>1516449</id><snippet>__lt__</snippet></ROW><ROW><id>1516527</id><snippet>sqlite3.connect</snippet></ROW><ROW><id>1516527</id><snippet>&gt;&gt;&gt; c.execute("SELECT * FROM tbl")
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
sqlite3.DatabaseError: file is encrypted or is not a database
</snippet></ROW><ROW><id>1516527</id><snippet>sqlite3.connect</snippet></ROW><ROW><id>1516527</id><snippet>os.path.exists</snippet></ROW><ROW><id>1516527</id><snippet>&gt;&gt;&gt; def foo(name):
...     for row in c.execute("SELECT name FROM sqlite_master WHERE type='table'"):
...             if row == (name,):
...                     return True
...     return False
... 
&gt;&gt;&gt; foo("tz_data")
True
&gt;&gt;&gt; foo("asdf")
False
</snippet></ROW><ROW><id>1516874</id><snippet>SetItemData()</snippet></ROW><ROW><id>1516874</id><snippet>def sortColumn(item1, item2):
    try: 
        i1 = int(item1)
        i2 = int(item2)
    except ValueError:
        return cmp(item1, item2)
    else:
        return cmp(i1, i2)
</snippet></ROW><ROW><id>1516883</id><snippet>w.tag_raise("sel")
</snippet></ROW><ROW><id>1516896</id><snippet>None</snippet></ROW><ROW><id>1516896</id><snippet>print numbers</snippet></ROW><ROW><id>1516896</id><snippet>print clean</snippet></ROW><ROW><id>1516896</id><snippet>numbers</snippet></ROW><ROW><id>1516896</id><snippet>clean = list(numbers)
clean.insert(3, 'four')
</snippet></ROW><ROW><id>1516896</id><snippet>numbers</snippet></ROW><ROW><id>1516896</id><snippet>clean</snippet></ROW><ROW><id>1517087</id><snippet>import themodule
from themodule import AClass

reload(themodule)
from themodule import AClass
</snippet></ROW><ROW><id>1517148</id><snippet>#!/usr/bin/python
from subprocess import Popen, PIPE
import sys

data = Popen(["monitor-services"], stdout=PIPE).communicate()[0]

sys.exit("failure" in data)
</snippet></ROW><ROW><id>1517153</id><snippet>DDL(
    "CREATE UNIQUE INDEX doc_year_num_uniq ON %(fullname)s "
    "(EXTRACT(YEAR FROM date), number)"
).execute_at('after-create', Document.__table__)
</snippet></ROW><ROW><id>1517153</id><snippet>from sqlalchemy import event

event.listen(ModelObject.__table__,
         'after_create',
          DDL("CREATE UNIQUE INDEX term_year ON %(fullname)s "
              "(EXTRACT(YEAR FROM start_date), term)",
              on = 'postgresql'
              )
         )
</snippet></ROW><ROW><id>1517363</id><snippet>islt</snippet></ROW><ROW><id>1517457</id><snippet>try-finally</snippet></ROW><ROW><id>1517457</id><snippet>try:
    open socket
    do stuff with socket
finally:
    close socket
</snippet></ROW><ROW><id>1517457</id><snippet>with</snippet></ROW><ROW><id>1517457</id><snippet>from __future__ import with_statement</snippet></ROW><ROW><id>1517457</id><snippet>with open_the_socket() as s:
    use s
</snippet></ROW><ROW><id>1517457</id><snippet>__exit__()</snippet></ROW><ROW><id>1517457</id><snippet>__exit__()</snippet></ROW><ROW><id>1517516</id><snippet>&gt;&gt;&gt; Task.objects.exclude(prerequisites__status__in=['A','P','F'])
</snippet></ROW><ROW><id>1517516</id><snippet>&gt;&gt;&gt; a = Task.objects.create(status='C')
&gt;&gt;&gt; b = Task.objects.create(status='A')
&gt;&gt;&gt; b.prerequisites.add(a)
&gt;&gt;&gt; c = Task.objects.create(status='P')
&gt;&gt;&gt; c.prerequisites.add(b)
&gt;&gt;&gt; prerequisites_complete = Task.objects.exclude(prerequisites__status__in=['A','P','F'])
&gt;&gt;&gt; set([t.id for t in prerequisites_complete]) == set([a.id, b.id])
True
</snippet></ROW><ROW><id>1517691</id><snippet>HelloWorld.py</snippet></ROW><ROW><id>1517691</id><snippet># generic Python imports
import datetime
import os
import sched
import sys
import tempfile
import threading
import time

# need PyObjC on sys.path...:
for d in sys.path:
  if 'Extras' in d:
    sys.path.append(d + '/PyObjC')
    break

# objc-related imports
import objc
from Foundation import *
from AppKit import *
from PyObjCTools import AppHelper

# all stuff related to the repeating-action
thesched = sched.scheduler(time.time, time.sleep)

def tick(n, writer):
  writer(n)
  thesched.enter(20.0, 10, tick, (n+1, writer))
  fd, name = tempfile.mkstemp('.txt', 'hello', '/tmp');
  print 'writing %r' % name
  f = os.fdopen(fd, 'w')
  f.write(datetime.datetime.now().isoformat())
  f.write('\n')
  f.close()

def schedule(writer):
  pool = NSAutoreleasePool.alloc().init()
  thesched.enter(0.0, 10, tick, (1, writer))
  thesched.run()
  # normally you'd want pool.drain() here, but since this function never
  # ends until end of program (thesched.run never returns since each tick
  # schedules a new one) that pool.drain would never execute here;-).

# objc-related stuff
class TheDelegate(NSObject):

  statusbar = None
  state = 'idle'

  def applicationDidFinishLaunching_(self, notification):
    statusbar = NSStatusBar.systemStatusBar()
    self.statusitem = statusbar.statusItemWithLength_(
        NSVariableStatusItemLength)
    self.statusitem.setHighlightMode_(1)
    self.statusitem.setToolTip_('Example')
    self.statusitem.setTitle_('Example')

    self.menu = NSMenu.alloc().init()
    menuitem = NSMenuItem.alloc().initWithTitle_action_keyEquivalent_(
        'Quit', 'terminate:', '')
    self.menu.addItem_(menuitem)
    self.statusitem.setMenu_(self.menu)

  def writer(self, s):
    self.badge.setBadgeLabel_(str(s))


if __name__ == "__main__":
  # prepare and set our delegate
  app = NSApplication.sharedApplication()
  delegate = TheDelegate.alloc().init()
  app.setDelegate_(delegate)
  delegate.badge = app.dockTile()
  delegate.writer(0)

  # on a separate thread, run the scheduler
  t = threading.Thread(target=schedule, args=(delegate.writer,))
  t.setDaemon(1)
  t.start()

  # let her rip!-)
  AppHelper.runEventLoop()
</snippet></ROW><ROW><id>1517691</id><snippet>py2applet --make-setup HelloWorld.py</snippet></ROW><ROW><id>1517691</id><snippet>python setup.py py2app -A -p PyObjC</snippet></ROW><ROW><id>1517691</id><snippet>dist</snippet></ROW><ROW><id>1517691</id><snippet>HelloWorld.app</snippet></ROW><ROW><id>1517691</id><snippet>open dist</snippet></ROW><ROW><id>1517691</id><snippet>-A</snippet></ROW><ROW><id>1517728</id><snippet>req = urllib2.urlopen(url)
CHUNK = 16 * 1024
with open(file, 'wb') as fp:
  while True:
    chunk = req.read(CHUNK)
    if not chunk: break
    fp.write(chunk)
</snippet></ROW><ROW><id>1517792</id><snippet>class Member(models.Model):
  name = models.CharField(max_length=256)
  unit = models.ManyToManyField(Unit, through='Membership')
  unit_denorm = models.ForeignKey(Unit)

class Membership(models.Model):
  member = models.ForeignKey(Member)
  unit = models.ForeignKey(Unit)
  start = models.DateField(default=date.today)
  stop = models.DateField(blank=True, null=True)

  def save(self, *args, **kwargs):
    if not self.stop:
      self.member.unit_denorm = self.unit
      self.member.save()
    super(Membership, self).save(*args, **kwargs)

class Unit(models.Model):
  name = models.CharField(max_length=256)
</snippet></ROW><ROW><id>1517792</id><snippet>list_filter = ('unit_denorm',)</snippet></ROW><ROW><id>1517792</id><snippet>stop__isnull=True</snippet></ROW><ROW><id>1517890</id><snippet>pydoc</snippet></ROW><ROW><id>1517890</id><snippet>pydoc -p 8080
</snippet></ROW><ROW><id>1517890</id><snippet>site-packages</snippet></ROW><ROW><id>1517965</id><snippet>class Lookahead:
    def __init__(self, iter):
        self.iter = iter
        self.buffer = []

    def __iter__(self):
        return self

    def next(self):
        if self.buffer:
            return self.buffer.pop(0)
        else:
            return self.iter.next()

    def lookahead(self, n):
        """Return an item n entries ahead in the iteration."""
        while n &gt;= len(self.buffer):
            try:
                self.buffer.append(self.iter.next())
            except StopIteration:
                return None
        return self.buffer[n]
</snippet></ROW><ROW><id>1518067</id><snippet>marshal</snippet></ROW><ROW><id>1518067</id><snippet>cPickle</snippet></ROW><ROW><id>1518067</id><snippet>WHERE</snippet></ROW><ROW><id>1518067</id><snippet>ORDER BY</snippet></ROW><ROW><id>1518075</id><snippet>pen</snippet></ROW><ROW><id>1518170</id><snippet>request.FILES['file']
</snippet></ROW><ROW><id>1518170</id><snippet>request.POST['file']
</snippet></ROW><ROW><id>1518293</id><snippet>currentPage = paginate.Page(products, page, items_per_page=50)

currentPage.kwargs['q'] = q

return dict(currentPage=currentPage, 
    title=u'Products List', item=u'product', items=u'products',
    data=currentPage.items, 
    grid=product_grid,
    page=u'Search %s results' % q,
    q=q,
    hits=len(products))
</snippet></ROW><ROW><id>1518735</id><snippet>def main():
    blah blah

if __name__ == "__main__":
    main()
</snippet></ROW><ROW><id>1518735</id><snippet>__name__</snippet></ROW><ROW><id>1518735</id><snippet>__name__</snippet></ROW><ROW><id>1518735</id><snippet>__main__</snippet></ROW><ROW><id>1518788</id><snippet>numpy</snippet></ROW><ROW><id>1518788</id><snippet>nympy</snippet></ROW><ROW><id>1518879</id><snippet>"ACTION"</snippet></ROW><ROW><id>1518879</id><snippet>"add"</snippet></ROW><ROW><id>1518879</id><snippet>udev</snippet></ROW><ROW><id>1518887</id><snippet>counter = dict(
    (a[0], (a[1], a[2]))
    for a in listX
)

for key, v1, v2 in listY:
    if key not in counter:
        counter[key] = (0, 0)
    counter[key][0] += v1
    counter[key][1] += v2

result = [(key, value[0], value[1]) for key, value in counter.items()]
</snippet></ROW><ROW><id>1518958</id><snippet>int[]</snippet></ROW><ROW><id>1518958</id><snippet>A B C D E
</snippet></ROW><ROW><id>1518958</id><snippet>A D E B
</snippet></ROW><ROW><id>1519088</id><snippet>def add_docs_for(other_func):  
    def dec(func):  
        func.__doc__ = other_func.__doc__ + "\n\n" + func.__doc__
        return func
    return dec

def foo():
    """documentation for foo"""
    pass

@add_docs_for(foo)
def bar():
    """additional notes for bar"""
    pass

help(bar) # --&gt; "documentation for foo // additional notes for bar"
</snippet></ROW><ROW><id>1519428</id><snippet>Intent</snippet></ROW><ROW><id>1519428</id><snippet>com.twofortyfouram.locale.intent.action.FIRE_SETTING</snippet></ROW><ROW><id>1519428</id><snippet>Extra</snippet></ROW><ROW><id>1519428</id><snippet>com.google.ase.extra.SCRIPT_NAME</snippet></ROW><ROW><id>1519675</id><snippet>LOGIN_URL</snippet></ROW><ROW><id>1519675</id><snippet>LOGIN_REDIRECT_URL</snippet></ROW><ROW><id>1519675</id><snippet>LOGIN_URL = 'django.contrib.auth.views.login' # view function name
</snippet></ROW><ROW><id>1519675</id><snippet>LOGIN_URL = 'login' # name of url pattern
</snippet></ROW><ROW><id>1519675</id><snippet>reverse_lazy</snippet></ROW><ROW><id>1519675</id><snippet>LOGIN_URL = reverse_lazy('login')
</snippet></ROW><ROW><id>1519675</id><snippet>reverse_lazy</snippet></ROW><ROW><id>1519675</id><snippet>from django.conf import settings
</snippet></ROW><ROW><id>1519675</id><snippet>urlpatterns=('',
    ...
    url('^%s$' %settings.LOGIN_URL[1:], 'django.contrib.auth.views.login', 
        name="login")
    ...
)
</snippet></ROW><ROW><id>1519675</id><snippet>LOGIN_URL</snippet></ROW><ROW><id>1519675</id><snippet>&gt;&gt;&gt;from django.core.urlresolvers import reverse
&gt;&gt;&gt;reverse('login')
'/accounts/login/'
</snippet></ROW><ROW><id>1519692</id><snippet>$ easy_install -H None -f http://server/vdir TheEggToInstall
</snippet></ROW><ROW><id>1519692</id><snippet>$ easy_install -H None -f /path/to/directory TheEggToInstall
</snippet></ROW><ROW><id>1519692</id><snippet>-H None</snippet></ROW><ROW><id>1519692</id><snippet>-f</snippet></ROW><ROW><id>1519892</id><snippet>import os
from mercurial import commands,ui
os.mkdir("/repos/foo")
commands.init(ui.ui(),"/repos/foo")
</snippet></ROW><ROW><id>1520156</id><snippet>temp_fd</snippet></ROW><ROW><id>1520156</id><snippet>os.close(temp_fd)</snippet></ROW><ROW><id>1520156</id><snippet>temp_fd</snippet></ROW><ROW><id>1520156</id><snippet>fobj = os.fdopen(temp_fd, "w+")
numpy.memmap(fobj, ...
</snippet></ROW><ROW><id>1520275</id><snippet>numpy.version.version
</snippet></ROW><ROW><id>1520627</id><snippet>class POC(Entity):
  # ...
  #declare the one-to-many relationships
  csas = OneToMany('SSP')
  actions = OneToMany('SSP')
  # ...

class SSP(Entity):
  # ...
  #Tell Elixir how to disambiguate POC/SSP relationships by specifying
  #the inverse explicitly.
  csa = ManyToOne('POC', colname = 'idPOCCSA', inverse='csas')
  action = ManyToOne('POC', colname = 'idPOCAction', inverse='actions')
  # ...
</snippet></ROW><ROW><id>1520655</id><snippet>import subprocess
bufsize =1024
initial_data = get_initial_data_from_db()
p = subprocess.Popen("application -parameter1", shell=True, bufsize=bufsize,
          stdin=subprocess.PIPE,   close_fds=True)

p.stdin.write(initial_data)
print p.communicate()
</snippet></ROW><ROW><id>1520655</id><snippet>import subprocess

initial_data = """
import sys
print sys.path
"""

for test in [1,2,3] :
    p = subprocess.Popen("C:/python26/python", shell=True, bufsize=512,
          stdin=subprocess.PIPE,  stdout=subprocess.PIPE, stderr=subprocess.PIPE, close_fds=True)

    p.stdin.write(initial_data)
    print p.communicate()
</snippet></ROW><ROW><id>1520655</id><snippet>("['', 'C:\\\\dev\\\\ide\\\\eclipse\\\\plugins\\\\org.python.pydev_1.5.0.1251989166\\\\PySrc\\\\pydev_sitecustomize', 'C:\\\\dev\\\\ws\\\\central\\\\head\\\\script_jy\\\\src', 'C:\\\\dev\\\\ws\\\\central\\\\head\\\\script_jy\\\\libs', 'C:\\\\dev\\\\ws\\\\central\\\\head\\\\script_jy\\\\jars\\\\jacob.jar', 'C:\\\\dev\\\\ws\\\\central\\\\head\\\\script_jy\\\\jars\\\\jiffie.jar', 'C:\\\\dev\\\\ws\\\\central\\\\head\\\\script_jy\\\\jars\\\\jaxen-1.1.1.jar', 'C:\\\\dev\\\\ws\\\\central\\\\head\\\\script_jy\\\\jars\\\\swt.jar', 'C:\\\\dev\\\\ws\\\\central\\\\head\\\\script_jy\\\\jars\\\\mysql-connector-java-3.0.17-ga-bin.jar', 'C:\\\\dev\\\\ws\\\\central\\\\head\\\\nlibs\\\\qpslib.jar', 'C:\\\\dev\\\\ws\\\\central\\\\head\\\\nlibs\\\\ifxjdbc.jar', 'C:\\\\server\\\\jboss\\\\client\\\\jbossall-client.jar', 'C:\\\\usr\\\\local\\\\machine', 'C:\\\\dev\\\\ws\\\\central\\\\head\\\\event\\\\src\\\\build\\\\components\\\\jobcontrol\\\\config', 'C:\\\\dev\\\\ws\\\\central\\\\head\\\\event\\\\src\\\\build\\\\components\\\\jobcontrol', 'C:\\\\dev\\\\ws\\\\central\\\\head\\\\event\\\\src', 'C:\\\\dev\\\\ws\\\\central\\\\head\\\\oknos\\\\tickcardimp\\\\bin', 'C:\\\\dev\\\\ws\\\\central\\\\head\\\\common\\\\jar\\\\shared.jar', 'C:\\\\dev\\\\ws\\\\central\\\\head\\\\script_jy\\\\src', 'C:\\\\dev\\\\ws\\\\central\\\\head\\\\script_jy\\\\libs', 'C:\\\\dev\\\\ws\\\\central\\\\head\\\\script_jy\\\\jars\\\\jacob.jar', 'C:\\\\dev\\\\ws\\\\central\\\\head\\\\script_jy\\\\jars\\\\jiffie.jar', 'C:\\\\dev\\\\ws\\\\central\\\\head\\\\script_jy\\\\jars\\\\jaxen-1.1.1.jar', 'C:\\\\dev\\\\ws\\\\central\\\\head\\\\script_jy\\\\jars\\\\swt.jar', 'C:\\\\dev\\\\ws\\\\central\\\\head\\\\script_jy\\\\jars\\\\mysql-connector-java-3.0.17-ga-bin.jar', 'C:\\\\dev\\\\ws\\\\central\\\\head\\\\nlibs\\\\qpslib.jar', 'C:\\\\dev\\\\ws\\\\central\\\\head\\\\nlibs\\\\ifxjdbc.jar', 'C:\\\\server\\\\jboss\\\\client\\\\jbossall-client.jar', 'C:\\\\usr\\\\local\\\\machine', 'C:\\\\dev\\\\ws\\\\central\\\\head\\\\event\\\\src\\\\build\\\\components\\\\jobcontrol\\\\config', 'C:\\\\dev\\\\ws\\\\central\\\\head\\\\event\\\\src\\\\build\\\\components\\\\jobcontrol', 'C:\\\\dev\\\\ws\\\\central\\\\head\\\\event\\\\src', 'C:\\\\dev\\\\ws\\\\central\\\\head\\\\oknos\\\\tickcardimp\\\\bin', 'C:\\\\dev\\\\ws\\\\central\\\\head\\\\common\\\\jar\\\\shared.jar', 'C:\\\\jython\\\\jython2.5.0\\\\Lib', 'C:\\\\jython\\\\jython2.5.0\\\\Lib\\\\site-packages', 'C:\\\\dev\\\\java\\\\jdk1.5.0_17\\\\jre\\\\lib\\\\rt.jar', 'C:\\\\dev\\\\java\\\\jdk1.5.0_17\\\\jre\\\\lib\\\\jsse.jar', 'C:\\\\dev\\\\java\\\\jdk1.5.0_17\\\\jre\\\\lib\\\\jce.jar', 'C:\\\\dev\\\\java\\\\jdk1.5.0_17\\\\jre\\\\lib\\\\charsets.jar', 'C:\\\\dev\\\\java\\\\jdk1.5.0_17\\\\jre\\\\lib\\\\ext\\\\dnsns.jar', 'C:\\\\dev\\\\java\\\\jdk1.5.0_17\\\\jre\\\\lib\\\\ext\\\\localedata.jar', 'C:\\\\dev\\\\java\\\\jdk1.5.0_17\\\\jre\\\\lib\\\\ext\\\\sunjce_provider.jar', 'C:\\\\dev\\\\java\\\\jdk1.5.0_17\\\\jre\\\\lib\\\\ext\\\\sunpkcs11.jar', 'C:\\\\WINDOWS\\\\system32\\\\python26.zip', 'C:\\\\python26\\\\DLLs', 'C:\\\\python26\\\\lib', 'C:\\\\python26\\\\lib\\\\plat-win', 'C:\\\\python26\\\\lib\\\\lib-tk', 'C:\\\\python26']\r\n", "'import site' failed; use -v for traceback\r\n")
("['', 'C:\\\\dev\\\\ide\\\\eclipse\\\\plugins\\\\org.python.pydev_1.5.0.1251989166\\\\PySrc\\\\pydev_sitecustomize', 'C:\\\\dev\\\\ws\\\\central\\\\head\\\\script_jy\\\\src', 'C:\\\\dev\\\\ws\\\\central\\\\head\\\\script_jy\\\\libs', 'C:\\\\dev\\\\ws\\\\central\\\\head\\\\script_jy\\\\jars\\\\jacob.jar', 'C:\\\\dev\\\\ws\\\\central\\\\head\\\\script_jy\\\\jars\\\\jiffie.jar', 'C:\\\\dev\\\\ws\\\\central\\\\head\\\\script_jy\\\\jars\\\\jaxen-1.1.1.jar', 'C:\\\\dev\\\\ws\\\\central\\\\head\\\\script_jy\\\\jars\\\\swt.jar', 'C:\\\\dev\\\\ws\\\\central\\\\head\\\\script_jy\\\\jars\\\\mysql-connector-java-3.0.17-ga-bin.jar', 'C:\\\\dev\\\\ws\\\\central\\\\head\\\\nlibs\\\\qpslib.jar', 'C:\\\\dev\\\\ws\\\\central\\\\head\\\\nlibs\\\\ifxjdbc.jar', 'C:\\\\server\\\\jboss\\\\client\\\\jbossall-client.jar', 'C:\\\\usr\\\\local\\\\machine', 'C:\\\\dev\\\\ws\\\\central\\\\head\\\\event\\\\src\\\\build\\\\components\\\\jobcontrol\\\\config', 'C:\\\\dev\\\\ws\\\\central\\\\head\\\\event\\\\src\\\\build\\\\components\\\\jobcontrol', 'C:\\\\dev\\\\ws\\\\central\\\\head\\\\event\\\\src', 'C:\\\\dev\\\\ws\\\\central\\\\head\\\\oknos\\\\tickcardimp\\\\bin', 'C:\\\\dev\\\\ws\\\\central\\\\head\\\\common\\\\jar\\\\shared.jar', 'C:\\\\dev\\\\ws\\\\central\\\\head\\\\script_jy\\\\src', 'C:\\\\dev\\\\ws\\\\central\\\\head\\\\script_jy\\\\libs', 'C:\\\\dev\\\\ws\\\\central\\\\head\\\\script_jy\\\\jars\\\\jacob.jar', 'C:\\\\dev\\\\ws\\\\central\\\\head\\\\script_jy\\\\jars\\\\jiffie.jar', 'C:\\\\dev\\\\ws\\\\central\\\\head\\\\script_jy\\\\jars\\\\jaxen-1.1.1.jar', 'C:\\\\dev\\\\ws\\\\central\\\\head\\\\script_jy\\\\jars\\\\swt.jar', 'C:\\\\dev\\\\ws\\\\central\\\\head\\\\script_jy\\\\jars\\\\mysql-connector-java-3.0.17-ga-bin.jar', 'C:\\\\dev\\\\ws\\\\central\\\\head\\\\nlibs\\\\qpslib.jar', 'C:\\\\dev\\\\ws\\\\central\\\\head\\\\nlibs\\\\ifxjdbc.jar', 'C:\\\\server\\\\jboss\\\\client\\\\jbossall-client.jar', 'C:\\\\usr\\\\local\\\\machine', 'C:\\\\dev\\\\ws\\\\central\\\\head\\\\event\\\\src\\\\build\\\\components\\\\jobcontrol\\\\config', 'C:\\\\dev\\\\ws\\\\central\\\\head\\\\event\\\\src\\\\build\\\\components\\\\jobcontrol', 'C:\\\\dev\\\\ws\\\\central\\\\head\\\\event\\\\src', 'C:\\\\dev\\\\ws\\\\central\\\\head\\\\oknos\\\\tickcardimp\\\\bin', 'C:\\\\dev\\\\ws\\\\central\\\\head\\\\common\\\\jar\\\\shared.jar', 'C:\\\\jython\\\\jython2.5.0\\\\Lib', 'C:\\\\jython\\\\jython2.5.0\\\\Lib\\\\site-packages', 'C:\\\\dev\\\\java\\\\jdk1.5.0_17\\\\jre\\\\lib\\\\rt.jar', 'C:\\\\dev\\\\java\\\\jdk1.5.0_17\\\\jre\\\\lib\\\\jsse.jar', 'C:\\\\dev\\\\java\\\\jdk1.5.0_17\\\\jre\\\\lib\\\\jce.jar', 'C:\\\\dev\\\\java\\\\jdk1.5.0_17\\\\jre\\\\lib\\\\charsets.jar', 'C:\\\\dev\\\\java\\\\jdk1.5.0_17\\\\jre\\\\lib\\\\ext\\\\dnsns.jar', 'C:\\\\dev\\\\java\\\\jdk1.5.0_17\\\\jre\\\\lib\\\\ext\\\\localedata.jar', 'C:\\\\dev\\\\java\\\\jdk1.5.0_17\\\\jre\\\\lib\\\\ext\\\\sunjce_provider.jar', 'C:\\\\dev\\\\java\\\\jdk1.5.0_17\\\\jre\\\\lib\\\\ext\\\\sunpkcs11.jar', 'C:\\\\WINDOWS\\\\system32\\\\python26.zip', 'C:\\\\python26\\\\DLLs', 'C:\\\\python26\\\\lib', 'C:\\\\python26\\\\lib\\\\plat-win', 'C:\\\\python26\\\\lib\\\\lib-tk', 'C:\\\\python26']\r\n", "'import site' failed; use -v for traceback\r\n")
("['', 'C:\\\\dev\\\\ide\\\\eclipse\\\\plugins\\\\org.python.pydev_1.5.0.1251989166\\\\PySrc\\\\pydev_sitecustomize', 'C:\\\\dev\\\\ws\\\\central\\\\head\\\\script_jy\\\\src', 'C:\\\\dev\\\\ws\\\\central\\\\head\\\\script_jy\\\\libs', 'C:\\\\dev\\\\ws\\\\central\\\\head\\\\script_jy\\\\jars\\\\jacob.jar', 'C:\\\\dev\\\\ws\\\\central\\\\head\\\\script_jy\\\\jars\\\\jiffie.jar', 'C:\\\\dev\\\\ws\\\\central\\\\head\\\\script_jy\\\\jars\\\\jaxen-1.1.1.jar', 'C:\\\\dev\\\\ws\\\\central\\\\head\\\\script_jy\\\\jars\\\\swt.jar', 'C:\\\\dev\\\\ws\\\\central\\\\head\\\\script_jy\\\\jars\\\\mysql-connector-java-3.0.17-ga-bin.jar', 'C:\\\\dev\\\\ws\\\\central\\\\head\\\\nlibs\\\\qpslib.jar', 'C:\\\\dev\\\\ws\\\\central\\\\head\\\\nlibs\\\\ifxjdbc.jar', 'C:\\\\server\\\\jboss\\\\client\\\\jbossall-client.jar', 'C:\\\\usr\\\\local\\\\machine', 'C:\\\\dev\\\\ws\\\\central\\\\head\\\\event\\\\src\\\\build\\\\components\\\\jobcontrol\\\\config', 'C:\\\\dev\\\\ws\\\\central\\\\head\\\\event\\\\src\\\\build\\\\components\\\\jobcontrol', 'C:\\\\dev\\\\ws\\\\central\\\\head\\\\event\\\\src', 'C:\\\\dev\\\\ws\\\\central\\\\head\\\\oknos\\\\tickcardimp\\\\bin', 'C:\\\\dev\\\\ws\\\\central\\\\head\\\\common\\\\jar\\\\shared.jar', 'C:\\\\dev\\\\ws\\\\central\\\\head\\\\script_jy\\\\src', 'C:\\\\dev\\\\ws\\\\central\\\\head\\\\script_jy\\\\libs', 'C:\\\\dev\\\\ws\\\\central\\\\head\\\\script_jy\\\\jars\\\\jacob.jar', 'C:\\\\dev\\\\ws\\\\central\\\\head\\\\script_jy\\\\jars\\\\jiffie.jar', 'C:\\\\dev\\\\ws\\\\central\\\\head\\\\script_jy\\\\jars\\\\jaxen-1.1.1.jar', 'C:\\\\dev\\\\ws\\\\central\\\\head\\\\script_jy\\\\jars\\\\swt.jar', 'C:\\\\dev\\\\ws\\\\central\\\\head\\\\script_jy\\\\jars\\\\mysql-connector-java-3.0.17-ga-bin.jar', 'C:\\\\dev\\\\ws\\\\central\\\\head\\\\nlibs\\\\qpslib.jar', 'C:\\\\dev\\\\ws\\\\central\\\\head\\\\nlibs\\\\ifxjdbc.jar', 'C:\\\\server\\\\jboss\\\\client\\\\jbossall-client.jar', 'C:\\\\usr\\\\local\\\\machine', 'C:\\\\dev\\\\ws\\\\central\\\\head\\\\event\\\\src\\\\build\\\\components\\\\jobcontrol\\\\config', 'C:\\\\dev\\\\ws\\\\central\\\\head\\\\event\\\\src\\\\build\\\\components\\\\jobcontrol', 'C:\\\\dev\\\\ws\\\\central\\\\head\\\\event\\\\src', 'C:\\\\dev\\\\ws\\\\central\\\\head\\\\oknos\\\\tickcardimp\\\\bin', 'C:\\\\dev\\\\ws\\\\central\\\\head\\\\common\\\\jar\\\\shared.jar', 'C:\\\\jython\\\\jython2.5.0\\\\Lib', 'C:\\\\jython\\\\jython2.5.0\\\\Lib\\\\site-packages', 'C:\\\\dev\\\\java\\\\jdk1.5.0_17\\\\jre\\\\lib\\\\rt.jar', 'C:\\\\dev\\\\java\\\\jdk1.5.0_17\\\\jre\\\\lib\\\\jsse.jar', 'C:\\\\dev\\\\java\\\\jdk1.5.0_17\\\\jre\\\\lib\\\\jce.jar', 'C:\\\\dev\\\\java\\\\jdk1.5.0_17\\\\jre\\\\lib\\\\charsets.jar', 'C:\\\\dev\\\\java\\\\jdk1.5.0_17\\\\jre\\\\lib\\\\ext\\\\dnsns.jar', 'C:\\\\dev\\\\java\\\\jdk1.5.0_17\\\\jre\\\\lib\\\\ext\\\\localedata.jar', 'C:\\\\dev\\\\java\\\\jdk1.5.0_17\\\\jre\\\\lib\\\\ext\\\\sunjce_provider.jar', 'C:\\\\dev\\\\java\\\\jdk1.5.0_17\\\\jre\\\\lib\\\\ext\\\\sunpkcs11.jar', 'C:\\\\WINDOWS\\\\system32\\\\python26.zip', 'C:\\\\python26\\\\DLLs', 'C:\\\\python26\\\\lib', 'C:\\\\python26\\\\lib\\\\plat-win', 'C:\\\\python26\\\\lib\\\\lib-tk', 'C:\\\\python26']\r\n", "'import site' failed; use -v for traceback\r\n")
</snippet></ROW><ROW><id>1520680</id><snippet>sudo easy_install -U numpy</snippet></ROW><ROW><id>1520716</id><snippet>itertools.groupby</snippet></ROW><ROW><id>1520716</id><snippet>itertools</snippet></ROW><ROW><id>1520716</id><snippet>import itertools
import operator

def most_common(L):
  # get an iterable of (item, iterable) pairs
  SL = sorted((x, i) for i, x in enumerate(L))
  # print 'SL:', SL
  groups = itertools.groupby(SL, key=operator.itemgetter(0))
  # auxiliary function to get "quality" for an item
  def _auxfun(g):
    item, iterable = g
    count = 0
    min_index = len(L)
    for _, where in iterable:
      count += 1
      min_index = min(min_index, where)
    # print 'item %r, count %r, minind %r' % (item, count, min_index)
    return count, -min_index
  # pick the highest-count/earliest item
  return max(groups, key=_auxfun)[0]
</snippet></ROW><ROW><id>1520716</id><snippet>print</snippet></ROW><ROW><id>1520716</id><snippet>print most_common(['goose', 'duck', 'duck', 'goose'])
</snippet></ROW><ROW><id>1520716</id><snippet>SL: [('duck', 1), ('duck', 2), ('goose', 0), ('goose', 3)]
item 'duck', count 2, minind 1
item 'goose', count 2, minind 0
goose
</snippet></ROW><ROW><id>1520716</id><snippet>SL</snippet></ROW><ROW><id>1520716</id><snippet>groupby</snippet></ROW><ROW><id>1520716</id><snippet>operator.itemgetter</snippet></ROW><ROW><id>1520716</id><snippet>max</snippet></ROW><ROW><id>1520716</id><snippet>(item, iterable)</snippet></ROW><ROW><id>1520716</id><snippet>(item, original index)</snippet></ROW><ROW><id>1520716</id><snippet>SL</snippet></ROW><ROW><id>1520716</id><snippet>max</snippet></ROW><ROW><id>1520716</id><snippet>def most_common(L):
  groups = itertools.groupby(sorted(L))
  def _auxfun((item, iterable)):
    return len(list(iterable)), -L.index(item)
  return max(groups, key=_auxfun)[0]
</snippet></ROW><ROW><id>1520716</id><snippet>L.index</snippet></ROW><ROW><id>1520716</id><snippet>from itertools import groupby as g
def most_common_oneliner(L):
  return max(g(sorted(L)), key=lambda(x, v):(len(list(v)),-L.index(x)))[0]
</snippet></ROW><ROW><id>1520795</id><snippet>struct</snippet></ROW><ROW><id>1520795</id><snippet>input_binary_string = "110010111111111111101010" ## must be a multiple of 8
out = []
while len(input_binary_string) &gt;= 8:
    byte = input_binary_string[:8]
    input_binary_string = input_binary_string[8:]
    b = int(byte,2)
    c = chr(b)
    out.append(c)
## Better not have a bits left over
assert len(input_binary_string) == 0
outString = "".join(out)

print [ ord(c) for c in out ]
</snippet></ROW><ROW><id>1521048</id><snippet>import time

def application(environ, start_response):
    start_response('200 OK', [('content-type', 'text/plain')])
    while True:
        time.sleep(1.0)
        yield time.ctime() + '\n'

if __name__ == '__main__':
    from wsgiref.simple_server import make_server
    print "Serving on http://localhost:4000..."
    make_server('localhost', 4000, application).serve_forever()
</snippet></ROW><ROW><id>1521048</id><snippet>Mon Oct 05 12:21:26 2009
Mon Oct 05 12:21:27 2009
Mon Oct 05 12:21:28 2009
Mon Oct 05 12:21:29 2009
Mon Oct 05 12:21:30 2009
(...a new line appears every second...)
</snippet></ROW><ROW><id>1521048</id><snippet>wsgiref</snippet></ROW><ROW><id>1521175</id><snippet>im.convert(newmode)</snippet></ROW><ROW><id>1521175</id><snippet>im</snippet></ROW><ROW><id>1521398</id><snippet>GuiMaker</snippet></ROW><ROW><id>1521398</id><snippet>TextEditor</snippet></ROW><ROW><id>1521398</id><snippet>TextEditor</snippet></ROW><ROW><id>1521398</id><snippet>TextEditor</snippet></ROW><ROW><id>1521398</id><snippet>GuiMaker.start</snippet></ROW><ROW><id>1521398</id><snippet>TextEditor.start</snippet></ROW><ROW><id>1521440</id><snippet>def f():
    s = ('123'
         '456')
    return s
</snippet></ROW><ROW><id>1521531</id><snippet>RotatingFileHandler(filename, maxBytes=10*1024*1024, backupCount=5)
</snippet></ROW><ROW><id>1521678</id><snippet>class CakeFactory:
    @staticmethod
    def create(name):
        if name == 'banana':
            return BananaCake()         # call the constructor
        elif name == 'chocolate':
            return ChocolateCake()      # call the constructor
        else:
            return None
</snippet></ROW><ROW><id>1521678</id><snippet>isinstance()</snippet></ROW><ROW><id>1521678</id><snippet>class ChocolateCake(object):
    pass
</snippet></ROW><ROW><id>1521739</id><snippet>logging</snippet></ROW><ROW><id>1521739</id><snippet>filemode</snippet></ROW><ROW><id>1521739</id><snippet>'a'</snippet></ROW><ROW><id>1521843</id><snippet>O(1)</snippet></ROW><ROW><id>1521843</id><snippet>O(n)</snippet></ROW><ROW><id>1521843</id><snippet>Operation...Complexity
Copy........O(n) 
Append......O(1)
Insert......O(n) 
Get Item....O(1)
Set Item....O(1)
Del Item....O(n) 
Iteration...O(n)
Get Slice...O(k)
Del Slice...O(n)
Set Slice...O(n+k)
Extend......O(k) 
Sort........O(n log n)
Multiply....O(nk)
</snippet></ROW><ROW><id>1522043</id><snippet>&gt;&gt;&gt; import datetime
# 05/10/09 18:00
&gt;&gt;&gt; d = datetime.datetime(2009, 10, 5, 18, 00)
&gt;&gt;&gt; print d.year, d.month, d.day, d.hour, d.second
2009 10 5 18 0
&gt;&gt;&gt; print d.isoformat(' ')
2009-10-05 18:00:00
&gt;&gt;&gt;
</snippet></ROW><ROW><id>1522323</id><snippet>from M2Crypto import X509, SSL

# manual validation of a signature on a certificate using a given CA cert:
ca = X509.load_cert('/path/to/ca_cert.pem')
cert = X509.load_cert('certificate_to_validate.pem')
print "Verification results:", cert.verify(ca.get_pubkey())

# adding a given CA cert to the SSL Context for verification
ctx = SSL.Context()
# load a certificate from file
ctx.load_verify_locations(cafile='/path/to/ca_cert.pem') 
# or use all certificate in a CA directory
ctx.load_verify_locations(capath='/path/to/ca/dir') 
# or you can specify both options at the same time.
</snippet></ROW><ROW><id>1522323</id><snippet>&lt;hash&gt;.0</snippet></ROW><ROW><id>1522323</id><snippet>&lt;hash&gt;</snippet></ROW><ROW><id>1522323</id><snippet>openssl x509 -noout -hash -in cert.pem</snippet></ROW><ROW><id>1522392</id><snippet>http://wow.zet/forum/index.php?showtopic=1197&amp;pid=30419&amp;st=0&amp;#entry30419
</snippet></ROW><ROW><id>1522530</id><snippet>verbs = {"dislikes":"blue", "knows":"black", "likes":"red"}
for s in open("/tmp/infile"):
  s = s.strip()
  for verb in verbs.keys():
    if (s.count(verb) &gt; 0):
      print s.replace(verb,"-&gt;")+" "+verbs[verb]+";"
      break
</snippet></ROW><ROW><id>1522531</id><snippet>lineno = s.count("\n",0,m.start())+1
</snippet></ROW><ROW><id>1522687</id><snippet>sys.modules</snippet></ROW><ROW><id>1522687</id><snippet>mod = sys.modules[__module__]
</snippet></ROW><ROW><id>1522709</id><snippet>close</snippet></ROW><ROW><id>1522709</id><snippet>urllib.urlopen</snippet></ROW><ROW><id>1522709</id><snippet>urllib</snippet></ROW><ROW><id>1522709</id><snippet>urllib.close</snippet></ROW><ROW><id>1522709</id><snippet>x = urllib.urlopen(u)</snippet></ROW><ROW><id>1522709</id><snippet>import contextlib

with contextlib.closing(urllib.urlopen(u)) as x:
   ...use x at will here...
</snippet></ROW><ROW><id>1522709</id><snippet>with</snippet></ROW><ROW><id>1522709</id><snippet>closing</snippet></ROW><ROW><id>1522726</id><snippet>str</snippet></ROW><ROW><id>1522726</id><snippet>string</snippet></ROW><ROW><id>1522726</id><snippet>Tries += 1
</snippet></ROW><ROW><id>1522726</id><snippet>the_number = random.randrange(1,200,1)
tries = 1

guessed_number = int(input("Take a guess at the magic number!: ")) 
while True:
    if guessed_number &lt; the_number:
        print("Your guess is a bit too low.")

    if guessed_number &gt; the_number:
        print("Your guess is a bit too high!")

    if guessed_number == the_number:
        break
    else:
        guessed_number = int(input("Take another guess at the magic number!: "))
        tries += 1

print("You've guessed the number, and it only took you %d tries!" % tries)
</snippet></ROW><ROW><id>1522890</id><snippet>for</snippet></ROW><ROW><id>1522890</id><snippet>for url in urls:
  try:
    ...the body you have now...
  except Exception, e:
    print&gt;&gt;sys.stderr, "Url %r not processed: error (%s) % (url, e)
</snippet></ROW><ROW><id>1522890</id><snippet>logging.error</snippet></ROW><ROW><id>1522890</id><snippet>print&gt;&gt;</snippet></ROW><ROW><id>1522890</id><snippet>logging</snippet></ROW><ROW><id>1522973</id><snippet>[[1 if j &lt;= 1 else 2 for i in range(3)] for j in range(3)]
</snippet></ROW><ROW><id>1522973</id><snippet>x if C else y</snippet></ROW><ROW><id>1522973</id><snippet>[[1 if j &lt;= 1 else 2]*3 for j in range(3)]
</snippet></ROW><ROW><id>1523307</id><snippet>$ virtualenv --no-site-packages myProject
$ cd myProject
$ source bin/activate
(myproject)$
</snippet></ROW><ROW><id>1523307</id><snippet>(myproject)$easy_install sqlalchemy paste pylons ipython sphinx
#...download to win...
</snippet></ROW><ROW><id>1523307</id><snippet>(myproject)$ paster create mynewlib
#...do stuff to win...
(myproject)$ cd mynewlib
(myproject)$ python setup.py develop
#...puts links in your virtualenv site-packages but does not move the source
(myproject)$ &lt;start hacking&gt;
</snippet></ROW><ROW><id>1523364</id><snippet>thefunctions = [ getStuff, getData ]
for f in thefunctions:
    print f('shazam')
</snippet></ROW><ROW><id>1523364</id><snippet>def</snippet></ROW><ROW><id>1523396</id><snippet>fileinput</snippet></ROW><ROW><id>1523396</id><snippet>for line in fileinput.input(["file.dat"]):
  if not fileinput.isfirstline():
    data = proces_line(line);
    output(data)
</snippet></ROW><ROW><id>1523512</id><snippet> au BufEnter,BufRead *.py setlocal smartindent cinwords=if,elif,else,for,while,try,except,finally,def,class
</snippet></ROW><ROW><id>1523512</id><snippet>set</snippet></ROW><ROW><id>1523512</id><snippet>setlocal</snippet></ROW><ROW><id>1523512</id><snippet>filetype indent on</snippet></ROW><ROW><id>1523512</id><snippet>:help filetype-indent-on</snippet></ROW><ROW><id>1523581</id><snippet>&gt;&gt;&gt; bin(88)
'0b1011000'
&gt;&gt;&gt; int('0b1011000',2)
88
&gt;&gt;&gt; 

&gt;&gt;&gt; a=int('01100000',2)
&gt;&gt;&gt; b=int('00100110',2)
&gt;&gt;&gt; bin(a&amp;b)
'0b100000'
&gt;&gt;&gt; bin(a|b)
'0b1100110'
&gt;&gt;&gt; bin(a^b)
'0b1000110'
</snippet></ROW><ROW><id>1523624</id><snippet>foo</snippet></ROW><ROW><id>1523624</id><snippet>foo/__init__.py</snippet></ROW><ROW><id>1523624</id><snippet>foo</snippet></ROW><ROW><id>1523624</id><snippet>foo/bar/__init__.py</snippet></ROW><ROW><id>1523624</id><snippet>foo/__init__.py</snippet></ROW><ROW><id>1523624</id><snippet>foo.bar</snippet></ROW><ROW><id>1523624</id><snippet>.pth</snippet></ROW><ROW><id>1523624</id><snippet>__path__</snippet></ROW><ROW><id>1523624</id><snippet>__init__.py</snippet></ROW><ROW><id>1523624</id><snippet>import foo</snippet></ROW><ROW><id>1523624</id><snippet>foo</snippet></ROW><ROW><id>1523624</id><snippet>foo/__init__.py</snippet></ROW><ROW><id>1523624</id><snippet>-v</snippet></ROW><ROW><id>1523624</id><snippet>import pdb; pdb.set_trace()
</snippet></ROW><ROW><id>1523624</id><snippet>imp</snippet></ROW><ROW><id>1523664</id><snippet>from pprint import pprint
pprint(the_list)
</snippet></ROW><ROW><id>1523693</id><snippet>def flatten(l):
  if isinstance(l, list):
     return sum(map(flatten,l),[])
  else:
     return [l]
</snippet></ROW><ROW><id>1524039</id><snippet>scipy.sign</snippet></ROW><ROW><id>1524039</id><snippet>x</snippet></ROW><ROW><id>1524039</id><snippet>scipy.sign(x)</snippet></ROW><ROW><id>1524132</id><snippet>l = ['exiv2-devel', 'mingw-libs', 'tcltk-demos', 'fcgi', 'netcdf', 
    'pdcurses-devel',     'msvcrt', 'gdal-grass', 'iconv', 'qgis-devel', 
    'qgis1.1', 'php_mapscript']

if len(l) % 2 != 0:
    l.append(" ")

split = len(l)/2
l1 = l[0:split]
l2 = l[split:]
for key, value in zip(l1,l2):
    print '%-20s %s' % (key, value)         #python &lt;2.6
    print "{0:&lt;20s} {1}".format(key, value) #python 2.6+
</snippet></ROW><ROW><id>1524182</id><snippet>&gt;&gt;&gt; import random
&gt;&gt;&gt; thelist = ['a', 'b', 'c', 'd']
&gt;&gt;&gt; random.shuffle(thelist)
&gt;&gt;&gt; thelist
['d', 'a', 'c', 'b']
</snippet></ROW><ROW><id>1524232</id><snippet>.get()</snippet></ROW><ROW><id>1524232</id><snippet>l = dict.get('link')
t = dict.get('title')
d = dict.get('description')
k = dict.get('keyword')
</snippet></ROW><ROW><id>1524232</id><snippet>t</snippet></ROW><ROW><id>1524232</id><snippet>None</snippet></ROW><ROW><id>1524232</id><snippet>dict.get('title', '')</snippet></ROW><ROW><id>1524232</id><snippet>KeyError</snippet></ROW><ROW><id>1524374</id><snippet>s = u"\u00fc"
print str(s)
UnicodeEncodeError: 'ascii' codec can't encode character u'\xfc' in position 0: ordinal not in range(128)
</snippet></ROW><ROW><id>1524374</id><snippet>str()</snippet></ROW><ROW><id>1524374</id><snippet>s = u"%s..."</snippet></ROW><ROW><id>1524374</id><snippet>repr()</snippet></ROW><ROW><id>1524385</id><snippet>QAction.setData</snippet></ROW><ROW><id>1524385</id><snippet>self.sender()</snippet></ROW><ROW><id>1524385</id><snippet>action.data()</snippet></ROW><ROW><id>1525773</id><snippet>msbuild.exe</snippet></ROW><ROW><id>1525773</id><snippet>msbuild.exe</snippet></ROW><ROW><id>1525773</id><snippet>C:\WINDOWS\Microsoft.NET\Framework\v2.0.50727\msbuild.exe</snippet></ROW><ROW><id>1525773</id><snippet>C:\WINDOWS\Microsoft.NET\Framework\v3.5\msbuild.exe</snippet></ROW><ROW><id>1525773</id><snippet>msbuild.exe</snippet></ROW><ROW><id>1525773</id><snippet>/build</snippet></ROW><ROW><id>1525773</id><snippet>devenv.exe</snippet></ROW><ROW><id>1525786</id><snippet>br._factory.encoding = enc
br._factory._forms_factory.encoding = enc
br._factory._links_factory._encoding = enc
</snippet></ROW><ROW><id>1525889</id><snippet>Principal = start - end
</snippet></ROW><ROW><id>1525889</id><snippet>pay_a = (interest / 12) / (1 - (1+interest/12) ^ (-months))) * Principal
</snippet></ROW><ROW><id>1525889</id><snippet>pay_b = interest / 12 * end
</snippet></ROW><ROW><id>1525889</id><snippet>payment = (interest / 12) * (1 / (1 - (1+interest/12) ^ (-months))) * Principal + end)
</snippet></ROW><ROW><id>1525889</id><snippet>Start: 100000
End:  50000
Months: 70
Interest: 8% 
pay_a = 896.20
pay_b = 333.33
Payment = 1229.54
</snippet></ROW><ROW><id>1526245</id><snippet>def get_expensive_operation(self):
    if not hasattr(self, '_expensive_operation'):
        self._expensive_operation = self.expensive_operation()
    return self._expensive_operation
</snippet></ROW><ROW><id>1526245</id><snippet>get_expensive_operation</snippet></ROW><ROW><id>1526245</id><snippet>to_python</snippet></ROW><ROW><id>1526245</id><snippet>get_db_prep_save</snippet></ROW><ROW><id>1526917</id><snippet>/view</snippet></ROW><ROW><id>1526917</id><snippet>development.ini</snippet></ROW><ROW><id>1526917</id><snippet>level = DEBUG</snippet></ROW><ROW><id>1526917</id><snippet>[logger_routes]</snippet></ROW><ROW><id>1526917</id><snippet>/view</snippet></ROW><ROW><id>1527475</id><snippet>__</snippet></ROW><ROW><id>1527475</id><snippet>class foo(object):
    def __init__(self, bar):
        self.__bar = bar

    @property
    def bar(self):
        return self.__bar

f = foo('bar')
f.bar         # =&gt; bar
f.bar = 'baz' # AttributeError; would have to use f._foo__bar
</snippet></ROW><ROW><id>1527561</id><snippet>import urllib
data = urllib.urlencode({"mode_login":"Agree","redirect":"http://stackoverflow.com"})
result = urllib.urlopen("http://192.168.100.1:5280/",data).read()
print result
</snippet></ROW><ROW><id>1527660</id><snippet>struct.pack('&gt;I', some_integer) + struct.pack('b'*len(long_array), *long_array)
</snippet></ROW><ROW><id>1527666</id><snippet>$.getJSON("/abc/?x="+3,
    function(data){
      if (data["HTTPRESPONSE"] == 1)
      {
          alert("success")
      }
    });
</snippet></ROW><ROW><id>1527666</id><snippet>#you might need to easy_install this
import json 

def your_view(request):
    # You can dump a lot of structured data into a json object, such as 
    # lists and touples
    json_data = json.dumps({"HTTPRESPONSE":1})
    # json data is just a JSON string now. 
    return HttpResponse(json_data, mimetype="application/json")
</snippet></ROW><ROW><id>1527666</id><snippet>def updates_after_t(request, id): 
    response = HttpResponse() 
    response['Content-Type'] = "text/javascript" 
    response.write(serializers.serialize("json", 
                   TSearch.objects.filter(pk__gt=id))) 
    return response
</snippet></ROW><ROW><id>1528023</id><snippet>&gt;&gt;&gt; import sys
&gt;&gt;&gt; class Quitter(object):
...     def __repr__(self):
...         sys.exit()
... 
&gt;&gt;&gt; exit = Quitter()
</snippet></ROW><ROW><id>1528023</id><snippet>&gt;&gt;&gt; exit
</snippet></ROW><ROW><id>1528023</id><snippet>ipython</snippet></ROW><ROW><id>1528023</id><snippet>sys.exit</snippet></ROW><ROW><id>1528023</id><snippet>In [1]: type(exit).__repr__ = lambda s: setattr(s.shell, 'exit_now', True) or ''
</snippet></ROW><ROW><id>1528023</id><snippet>In [2]: exit
</snippet></ROW><ROW><id>1528061</id><snippet>&gt;&gt;&gt; re.findall(' {{(\w+)\|(\w+)(?:\|(\w+))?}} ', s)
[('bla', '123', '456'), ('bli', '789', '123'), ('blu', '789', '')]
</snippet></ROW><ROW><id>1528061</id><snippet>int</snippet></ROW><ROW><id>1528351</id><snippet>python -m py_compile script_to_check.py
</snippet></ROW><ROW><id>1528351</id><snippet>script_to_check.pyc</snippet></ROW><ROW><id>1528769</id><snippet>import itertools

with open(fn) as f:
  for line, line2 in itertools.izip_longest(f, f, fillvalue=''):
    print line, line2
</snippet></ROW><ROW><id>1528769</id><snippet>izip_longest</snippet></ROW><ROW><id>1528769</id><snippet>izip</snippet></ROW><ROW><id>1528769</id><snippet>f</snippet></ROW><ROW><id>1528769</id><snippet>def natatime(itr, fillvalue=None, n=2):
  return itertools.izip_longest(*(iter(itr),)*n, fillvalue=fillvalue)
</snippet></ROW><ROW><id>1528769</id><snippet>itertools</snippet></ROW><ROW><id>1528769</id><snippet>def natatime_no_itertools(itr, fillvalue=None, n=2):
  x = iter(itr)
  for item in x:
    yield (item,) + tuple(next(x, fillvalue) for _ in xrange(n-1))
</snippet></ROW><ROW><id>1528769</id><snippet>def natatime_25(itr, fillvalue=None, n=2):
  x = itertools.chain(iter(itr), (fillvalue,) * (n-1))
  return itertools.izip(*(x,)*n)
</snippet></ROW><ROW><id>1528769</id><snippet>next</snippet></ROW><ROW><id>1528769</id><snippet>izip_longest</snippet></ROW><ROW><id>1528801</id><snippet>thechan = Score.objects.filter(content=44)[0:1]
thechan[0].custom_score = 2

thechan = Score.objects.filter(content=44)[0:1]
thechan[0].save() # saves an unmodified object back to the DB, no effective change
</snippet></ROW><ROW><id>1528801</id><snippet>thechan = Score.objects.filter(content=44)[0]
thechan.custom_score = 2
thechan.save()
</snippet></ROW><ROW><id>1528905</id><snippet>pass
</snippet></ROW><ROW><id>1528905</id><snippet>try:
    # Do something illegal.
    ...
except:
    # Pretend nothing happened.
    pass
</snippet></ROW><ROW><id>1528905</id><snippet>except TypeError, DivideByZeroError:
</snippet></ROW><ROW><id>1528993</id><snippet>obj = type('obj', (object,), {'propertyName' : 'propertyValue'})
</snippet></ROW><ROW><id>1528993</id><snippet>type</snippet></ROW><ROW><id>1529099</id><snippet>object</snippet></ROW><ROW><id>1529099</id><snippet>__dict__</snippet></ROW><ROW><id>1529099</id><snippet>dict</snippet></ROW><ROW><id>1529099</id><snippet>object</snippet></ROW><ROW><id>1529099</id><snippet>pympler</snippet></ROW><ROW><id>1529099</id><snippet>&gt;&gt;&gt; from pympler import asizeof
&gt;&gt;&gt; asizeof.asizeof({})
144
&gt;&gt;&gt; asizeof.asizeof(23)
16
</snippet></ROW><ROW><id>1529099</id><snippet>int</snippet></ROW><ROW><id>1529099</id><snippet>&gt;&gt;&gt; class dint(int): pass
... 
&gt;&gt;&gt; asizeof.asizeof(dint(23))
184
</snippet></ROW><ROW><id>1529099</id><snippet>__dict__</snippet></ROW><ROW><id>1529099</id><snippet>dint</snippet></ROW><ROW><id>1529099</id><snippet>int</snippet></ROW><ROW><id>1529099</id><snippet>foobar</snippet></ROW><ROW><id>1529099</id><snippet>&gt;&gt;&gt; class fint(int):
...   __slots__ = 'foobar',
...   def __init__(self, x): self.foobar=x+100
... 
&gt;&gt;&gt; asizeof.asizeof(fint(23))
80
</snippet></ROW><ROW><id>1529099</id><snippet>int</snippet></ROW><ROW><id>1529099</id><snippet>int</snippet></ROW><ROW><id>1529099</id><snippet>self</snippet></ROW><ROW><id>1529099</id><snippet>self.foobar</snippet></ROW><ROW><id>1529099</id><snippet>dint</snippet></ROW><ROW><id>1529099</id><snippet>__slots__</snippet></ROW><ROW><id>1529099</id><snippet>class</snippet></ROW><ROW><id>1529099</id><snippet>type</snippet></ROW><ROW><id>1529099</id><snippet>__dict__</snippet></ROW><ROW><id>1529187</id><snippet>itertools</snippet></ROW><ROW><id>1529187</id><snippet>itertools</snippet></ROW><ROW><id>1529348</id><snippet>author_A = [['book_x',1,10],['book_y',2,20],['book_z',3,30]]
author_B = [['book_s',5,10],['book_t',2,20],['book_z',3,30]]

def present(A, B):
  Aset = set(tuple(x) for x in A)
  Bset = set(tuple(x) for x in B)
  both = Aset &amp; Bset
  justA = Aset - both
  justB = Bset - both
  totals = [0, 0]
  print "%-12s %-12s %12s" % ('author', 'quantity', 'Amount($)')
  for subset, name in zip((both, justA, justB), ('A*B', 'A', 'B')):
    tq = sum(x[1] for x in subset)
    ta = sum(x[2] for x in subset)
    totals[0] += tq
    totals[1] += ta
    print ' %-11s  %-11d    %-11d' % (name, tq, ta)
  print ' %-11s  %-11d    %-11d' % ('total', totals[0], totals[1])

present(author_A, author_B)
</snippet></ROW><ROW><id>1529607</id><snippet>&gt;&gt;&gt; import gmpy
&gt;&gt;&gt; x = gmpy.mpf(10**1000)
&gt;&gt;&gt; x.digits(10, 0, -1, 1)
'1.e1000'
</snippet></ROW><ROW><id>1529607</id><snippet>gmpy</snippet></ROW><ROW><id>1529607</id><snippet>gmpy</snippet></ROW><ROW><id>1529991</id><snippet>&lt;a href="http://www.ruby-doc.org/docs/ProgrammingRuby/html/ref%5Fc%5Farray.html#Array.include%5Fqm"&gt;include?()&lt;/a&gt;</snippet></ROW><ROW><id>1529991</id><snippet>(1..10).include?(5) #=&gt;true
(1..10).include?(16) #=&gt;false
</snippet></ROW><ROW><id>1529991</id><snippet>(1..10)</snippet></ROW><ROW><id>1529991</id><snippet>(1..10).to_a #=&gt; [1,2,3,4,5,6,7,8,9,10]
</snippet></ROW><ROW><id>1530164</id><snippet>random.shuffle</snippet></ROW><ROW><id>1530164</id><snippet>biglist</snippet></ROW><ROW><id>1530164</id><snippet>random.shuffle</snippet></ROW><ROW><id>1530164</id><snippet>random</snippet></ROW><ROW><id>1530196</id><snippet>mark_safe</snippet></ROW><ROW><id>1530196</id><snippet>from django.utils.safestring import mark_safe

def your_view(request):
    ...
    foo = '&gt;'
    mark_safe(foo)
    ...
</snippet></ROW><ROW><id>1530196</id><snippet>safe</snippet></ROW><ROW><id>1530196</id><snippet>{{ myvar|safe }}
</snippet></ROW><ROW><id>1530203</id><snippet>import win32gui
win32gui.IsWindow(handle)
win32gui.IsWindowVisible(handle)
</snippet></ROW><ROW><id>1530262</id><snippet>char *ch = new char[100];
ch[0]='a';
ch[1]='b';
//....
// somewhere else in your program you need to release the alocated memory.
delete [] ch; 
// use *delete ch;* if you've initialized *ch with new char;
</snippet></ROW><ROW><id>1530262</id><snippet>def fun():
    a=[1, 2] #dynamic allocation
    a.append(3)
    return a[0]
</snippet></ROW><ROW><id>1530440</id><snippet>'%.2f' % 1.2333333
</snippet></ROW><ROW><id>1530440</id><snippet>replace()</snippet></ROW><ROW><id>1530440</id><snippet>('%.2f' % 1.2333333).replace('.', ',')
</snippet></ROW><ROW><id>1530440</id><snippet>locale.format()</snippet></ROW><ROW><id>1530440</id><snippet>locale.setlocale(locale.LC_ALL, 'FR')
locale.format('%.2f', 1.2333333)
</snippet></ROW><ROW><id>1530808</id><snippet>/path/to/install/python setup.py build -e "/the/path/you/want/python" install
</snippet></ROW><ROW><id>1531138</id><snippet>top</snippet></ROW><ROW><id>1531138</id><snippet>ps aux</snippet></ROW><ROW><id>1531138</id><snippet>ps</snippet></ROW><ROW><id>1531189</id><snippet>import pyme.core
import pyme.pygpgme

plaintext = pyme.core.Data('this is a test message')
ciphertext = pyme.core.Data()
ctx = pyme.core.Context()
ctx.set_armor(1)
name = 'me@office.com'
ctx.op_keylist_start(name, 0)
key = ctx.op_keylist_next()
# first argument is message to sign, second argument is buffer where to write
# the signature, third argument is signing mode, see
# http://www.gnupg.org/documentation/manuals/gpgme/Creating-a-Signature.html#Creating-a-Signature for more details.
ctx.op_sign(plaintext, ciphertext, pyme.pygpgme.GPGME_SIG_MODE_CLEAR)
ciphertext.seek(0, 0)
print ciphertext.read()
</snippet></ROW><ROW><id>1531525</id><snippet>def do_something(x):
  return x**2

list = []
result = [do_something(x) for x in list if list]
print result        # []

list = [1, 2, 3]
result = [do_something(x) for x in list if list]
print result       # [1, 4, 9]
</snippet></ROW><ROW><id>1531576</id><snippet>y}</snippet></ROW><ROW><id>1531900</id><snippet>class TaskForm(forms.ModelForm):
   class Meta:
      model = Task

   def __init__(self, *args, **kwargs):
      super(TaskForm, self).__init__(*args, **kwargs)
      self.fields['prerequisites'].queryset = Task.objects.filter(job=self.instance.job)
</snippet></ROW><ROW><id>1532035</id><snippet>simplejson</snippet></ROW><ROW><id>1532035</id><snippet>import datetime
import time

SIMPLE_TYPES = (int, long, float, bool, dict, basestring, list)

def to_dict(model):
    output = {}

    for key, prop in model.properties().iteritems():
        value = getattr(model, key)

        if value is None or isinstance(value, SIMPLE_TYPES):
            output[key] = value
        elif isinstance(value, datetime.date):
            # Convert date/datetime to MILLISECONDS-since-epoch (JS "new Date()").
            ms = time.mktime(value.utctimetuple()) * 1000
            ms += getattr(value, 'microseconds', 0) / 1000
            output[key] = int(ms)
        elif isinstance(value, db.GeoPt):
            output[key] = {'lat': value.lat, 'lon': value.lon}
        elif isinstance(value, db.Model):
            output[key] = to_dict(value)
        else:
            raise ValueError('cannot encode ' + repr(prop))

    return output
</snippet></ROW><ROW><id>1532097</id><snippet>{% block list-products %}
    {% if products|length &gt; 12 %}
        &lt;!-- Code for pagination --&gt;
    {% endif %}

    &lt;!-- Code for displaying 12 products on the page --&gt;

{% endblock %}
</snippet></ROW><ROW><id>1532531</id><snippet>json</snippet></ROW><ROW><id>1532531</id><snippet>try:
    import json
except ImportError:
    import myutils.myjson as json
</snippet></ROW><ROW><id>1532531</id><snippet>try:
    reversed
except NameError:
    from django.utils.itercompat import reversed     # Python 2.3 fallback
</snippet></ROW><ROW><id>1532531</id><snippet>reversed</snippet></ROW><ROW><id>1532531</id><snippet>utils</snippet></ROW><ROW><id>1532531</id><snippet>import sys
if sys.version_info &lt; (2, 6, 0):
    # Do stuff for old version...
else:
    # Do 2.6+ stuff
</snippet></ROW><ROW><id>1532531</id><snippet>sys.version_info</snippet></ROW><ROW><id>1532761</id><snippet>getopt</snippet></ROW><ROW><id>1532761</id><snippet>$ ./testopt.py --verbose=
</snippet></ROW><ROW><id>1532761</id><snippet>argparse</snippet></ROW><ROW><id>1532816</id><snippet>arr = [line.split(',') for line in open('./urls-eu.csv')]
</snippet></ROW><ROW><id>1532816</id><snippet>'r'</snippet></ROW><ROW><id>1532874</id><snippet>HKEY_CURRENT_USER</snippet></ROW><ROW><id>1532874</id><snippet>HKEY_USERS/SID of the current user</snippet></ROW><ROW><id>1532874</id><snippet>import win32security
import _winreg as winreg

sid = win32security.LookupAccountName(None, user_name)[0]
sidstr = win32security.ConvertSidToStringSid(sid)
key = winreg.OpenKey(winreg.HKEY_USERS, sidstr)
# do something with the key
</snippet></ROW><ROW><id>1532990</id><snippet>&gt;&gt;&gt; ie = webbrowser.get('c:\\program files\\internet explorer\\iexplore.exe')
&gt;&gt;&gt; ie.open('http://google.com')
True
</snippet></ROW><ROW><id>1534343</id><snippet>virtualenv -p /usr/bin/python2.6 &lt;path/to/new/virtualenv/&gt;
</snippet></ROW><ROW><id>1534443</id><snippet>def __init__(self, resources=[]):
    self._resources = resources
</snippet></ROW><ROW><id>1534443</id><snippet>def __init__(self, resources=None):
    if resources is None:
        resources = []
    self._resources = resources
</snippet></ROW><ROW><id>1534568</id><snippet>sorted(mydict.keys(), key=lambda a:map(int,a.split('.')))
</snippet></ROW><ROW><id>1534568</id><snippet>['0',
 '1',
 '2.0',
 '2.1',
 '3',
 '4.0.0',
 '4.0.1',
 '5',
 '10',
 '11.0',
 '11.1',
 '12.0',
 '12.1.0',
 '12.1.1']
</snippet></ROW><ROW><id>1534568</id><snippet>sorted(mydict.items(), key=lambda a:map(int,a[0].split('.')))
</snippet></ROW><ROW><id>1534568</id><snippet>[('0', 10),
 ('1', 23),
 ('2.0', 321),
 ('2.1', 3231),
 ('3', 3),
 # ...
 ('12.1.1', 2)]
</snippet></ROW><ROW><id>1534751</id><snippet>link</snippet></ROW><ROW><id>1534751</id><snippet># sort the list using the 'link' item as the sort key
biglist.sort(key=lambda elt: elt['link'])

newbiglist = []
for item in biglist:
    if newbiglist == [] or item['link'] != newbiglist[-1]['link']:
        newbiglist.append(item)
</snippet></ROW><ROW><id>1534751</id><snippet>biglist</snippet></ROW><ROW><id>1534751</id><snippet>.sort()</snippet></ROW><ROW><id>1534751</id><snippet>link</snippet></ROW><ROW><id>1534844</id><snippet>select.select()</snippet></ROW><ROW><id>1534957</id><snippet>[:5]</snippet></ROW><ROW><id>1534957</id><snippet>&gt;&gt;&gt; [1,2,3,4,5,6,7,8][:5]
[1, 2, 3, 4, 5]
&gt;&gt;&gt; [1,2,3][:5]
[1, 2, 3]
&gt;&gt;&gt; x = [6,7,8,9,10,11,12]
&gt;&gt;&gt; x[:5]
[6, 7, 8, 9, 10]
</snippet></ROW><ROW><id>1534957</id><snippet>&gt;&gt;&gt; x[5:]
[11, 12]
</snippet></ROW><ROW><id>1534989</id><snippet>locals</snippet></ROW><ROW><id>1535269</id><snippet>cx_freeze</snippet></ROW><ROW><id>1535554</id><snippet># Set up your proposed meeting
proposed.start = &lt;thursday, 1pm&gt;
proposed.end   = &lt;thursday, 2pm&gt;

# Look for meetings that intersect with or straddle proposed meeting
conflicts = &lt;SELECT * FROM meeting WHERE
             meeting.start BETWEEN proposed.start AND proposed.end OR
             meeting.end   BETWEEN proposed.start AND proposed.end OR
             meeting.start &lt;= proposed.start AND meeting.end &gt;= proposed.end&gt;


if conflicts.length &gt; 0:
   # We have a conflict!
</snippet></ROW><ROW><id>1535583</id><snippet>man 2 wait</snippet></ROW><ROW><id>1535684</id><snippet>M-.</snippet></ROW><ROW><id>1535684</id><snippet>C-u M-.</snippet></ROW><ROW><id>1535684</id><snippet>C-u M-.</snippet></ROW><ROW><id>1535684</id><snippet>rinari-jump-schema</snippet></ROW><ROW><id>1535684</id><snippet>'ruby-add-log-current-method</snippet></ROW><ROW><id>1535703</id><snippet>os</snippet></ROW><ROW><id>1535703</id><snippet>os.WIFCONTINUED</snippet></ROW><ROW><id>1535703</id><snippet>os.WIFSTOPPED</snippet></ROW><ROW><id>1535703</id><snippet>os.WTERMSIG</snippet></ROW><ROW><id>1535703</id><snippet>os.WCOREDUMP</snippet></ROW><ROW><id>1535703</id><snippet>os.WIFEXITED</snippet></ROW><ROW><id>1535703</id><snippet>os.WEXITSTATUS</snippet></ROW><ROW><id>1535703</id><snippet>os.WIFSIGNALED</snippet></ROW><ROW><id>1535703</id><snippet>os.WSTOPSIG</snippet></ROW><ROW><id>1535703</id><snippet>os.WEXITSTATUS(status)</snippet></ROW><ROW><id>1535703</id><snippet>subprocess</snippet></ROW><ROW><id>1536920</id><snippet>List</snippet></ROW><ROW><id>1536920</id><snippet>del List[len(List)-1]
</snippet></ROW><ROW><id>1536920</id><snippet>del</snippet></ROW><ROW><id>1536920</id><snippet>del List[-1]
</snippet></ROW><ROW><id>1537199</id><snippet>import urllib2
import time

def report(start, size, text):
    total = time.time() - start
    print "%s reading took %d seconds, transfer rate %.2f KBPS" % (
            text, total, (size / 1024.0) / total)

start = time.time()
url = ('http://itc.conversationsnetwork.org/audio/download/'
       'ITC.SO-Episode69-2009.09.29.mp3')
f = urllib2.urlopen(url)
start = time.time()
data = f.read() # read all data in a single, blocking operation
report(start, len(data), 'All data')
f.close()

f = urllib2.urlopen(url)
start = time.time()
while True:
    chunk = f.read(4096) # read a chunk
    if not chunk:
        break
report(start, len(data), 'Chunked')
f.close()
</snippet></ROW><ROW><id>1537199</id><snippet>All data reading took 137 seconds, transfer rate 230.46 KBPS
Chunked reading took 137 seconds, transfer rate 230.49 KBPS
</snippet></ROW><ROW><id>1537226</id><snippet>__init__</snippet></ROW><ROW><id>1537226</id><snippet>__init__</snippet></ROW><ROW><id>1537226</id><snippet>self.</snippet></ROW><ROW><id>1537300</id><snippet>-arch</snippet></ROW><ROW><id>1537300</id><snippet>driverdriver.c</snippet></ROW><ROW><id>1537300</id><snippet>lipo</snippet></ROW><ROW><id>1537522</id><snippet>"example.com/${obj.id}-${sluggify( obj.title )}"</snippet></ROW><ROW><id>1537522</id><snippet>id</snippet></ROW><ROW><id>1537736</id><snippet>request = urllib2.Request(file_remote_path)
opener = urllib2.build_opener()

retry = 3 # 3 tries
while retry :
    try :
        datastream = opener.open(request)
    except urllib2.URLError, ue:
        if ue.reason.find('10048') &gt; -1 :
            if retry :
                retry -= 1
            else :
                raise urllib2.URLError("Address already in use / retries exhausted")
        else :
            retry = 0
    if datastream :
        retry = 0

outfileobj = open(temp_file_path, 'wb')
try:
    while True:
        chunk = datastream.read(CHUNK_SIZE)
        if chunk == '':
            break
        else:
            outfileobj.write(chunk)
finally:
    outfileobj = outfileobj.close()
    datastream.close()
</snippet></ROW><ROW><id>1538008</id><snippet>&gt;&gt;&gt; cPickle.dumps(aCursor)
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
  File "/usr/lib64/python2.5/copy_reg.py", line 69, in _reduce_ex
    raise TypeError, "can't pickle %s objects" % base.__name__
TypeError: can't pickle Cursor objects
&gt;&gt;&gt; cPickle.dumps(dbHandle)
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
  File "/usr/lib64/python2.5/copy_reg.py", line 69, in _reduce_ex
    raise TypeError, "can't pickle %s objects" % base.__name__
TypeError: can't pickle Connection objects
</snippet></ROW><ROW><id>1538312</id><snippet>struct</snippet></ROW><ROW><id>1538312</id><snippet>import array
thefloats = array.array('f', thestring)
</snippet></ROW><ROW><id>1538312</id><snippet>thestring</snippet></ROW><ROW><id>1538312</id><snippet>array</snippet></ROW><ROW><id>1538312</id><snippet>list</snippet></ROW><ROW><id>1538380</id><snippet>__name__</snippet></ROW><ROW><id>1538380</id><snippet>__name__</snippet></ROW><ROW><id>1538380</id><snippet>dict([(t.__name__, t) for t in fun_list])
</snippet></ROW><ROW><id>1538763</id><snippet>import sys
sys.path
</snippet></ROW><ROW><id>1538868</id><snippet>_</snippet></ROW><ROW><id>1538868</id><snippet>len(_)</snippet></ROW><ROW><id>1538868</id><snippet>_</snippet></ROW><ROW><id>1538868</id><snippet>'abc'</snippet></ROW><ROW><id>1538868</id><snippet>&gt;&gt;&gt; 10
10
&gt;&gt;&gt; _
10
&gt;&gt;&gt; _ + 5
15
&gt;&gt;&gt; _ + 5
20
</snippet></ROW><ROW><id>1538868</id><snippet>_</snippet></ROW><ROW><id>1538868</id><snippet>_</snippet></ROW><ROW><id>1538868</id><snippet>&gt;&gt;&gt; _ = "underscore"
&gt;&gt;&gt; 10
10
&gt;&gt;&gt; _ + 5

Traceback (most recent call last):
  File "&lt;pyshell#6&gt;", line 1, in &lt;module&gt;
    _ + 5
TypeError: cannot concatenate 'str' and 'int' objects
</snippet></ROW><ROW><id>1538868</id><snippet>_</snippet></ROW><ROW><id>1538868</id><snippet>&gt;&gt;&gt; del _
</snippet></ROW><ROW><id>1538868</id><snippet>__builtin__._</snippet></ROW><ROW><id>1539085</id><snippet>xdocument.createElement('name')</snippet></ROW><ROW><id>1539182</id><snippet>def delete(self):
    files = WidgetFile.objects.filter(widget=self)
    if files:
        for file in files:
            file.delete()
    super(Widget, self).delete()
</snippet></ROW><ROW><id>1539569</id><snippet>.toprettyxml()</snippet></ROW><ROW><id>1539569</id><snippet>Document.toprettyxml(self, indent='\t', newl='\n', encoding=None)
</snippet></ROW><ROW><id>1540069</id><snippet>items = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
for index, item in enumerate(items):
    if not (item % 2):
        items[index] = None
</snippet></ROW><ROW><id>1540069</id><snippet>new_items = [x if x % 2 else None for x in items]
</snippet></ROW><ROW><id>1540257</id><snippet>import sys

def applejuice(q):
    func_name = sys._getframe().f_code.co_name
    print func_name
</snippet></ROW><ROW><id>1540399</id><snippet>sys.argv</snippet></ROW><ROW><id>1540399</id><snippet>sys.argv[0]</snippet></ROW><ROW><id>1540399</id><snippet>-</snippet></ROW><ROW><id>1540399</id><snippet>--</snippet></ROW><ROW><id>1540399</id><snippet>getopt</snippet></ROW><ROW><id>1540399</id><snippet>getopt</snippet></ROW><ROW><id>1540399</id><snippet>-</snippet></ROW><ROW><id>1540399</id><snippet>--</snippet></ROW><ROW><id>1540399</id><snippet>args</snippet></ROW><ROW><id>1540699</id><snippet>dict</snippet></ROW><ROW><id>1540699</id><snippet>dict</snippet></ROW><ROW><id>1540699</id><snippet>HashMap</snippet></ROW><ROW><id>1540699</id><snippet>Map</snippet></ROW><ROW><id>1540699</id><snippet>HashMap</snippet></ROW><ROW><id>1540998</id><snippet>object</snippet></ROW><ROW><id>1540998</id><snippet>class A(object):
    pass

class A:
    pass
</snippet></ROW><ROW><id>1541322</id><snippet>MyTable.objects.get(id=x).whatever</snippet></ROW><ROW><id>1541322</id><snippet>whatever</snippet></ROW><ROW><id>1541322</id><snippet>MyTable.objects.filter(somecolumn=x)</snippet></ROW><ROW><id>1541322</id><snippet>MyTable.objects.filter(somecolumn=x).order_by('date')</snippet></ROW><ROW><id>1541322</id><snippet>for obj in MyTable.objects.filter(somecolumn=x)</snippet></ROW><ROW><id>1541355</id><snippet>subprocess.Popen</snippet></ROW><ROW><id>1541355</id><snippet>cmd &amp;</snippet></ROW><ROW><id>1541355</id><snippet>run()</snippet></ROW><ROW><id>1541355</id><snippet>Popen</snippet></ROW><ROW><id>1541355</id><snippet>Popen.wait()
  Wait for child process to terminate. Set and return returncode attribute.
</snippet></ROW><ROW><id>1541355</id><snippet>subprocess</snippet></ROW><ROW><id>1541355</id><snippet>subprocess.call</snippet></ROW><ROW><id>1541355</id><snippet>communicate</snippet></ROW><ROW><id>1541355</id><snippet>Popen</snippet></ROW><ROW><id>1541355</id><snippet>### START MAIN
# copy some rows from a source table to a destination table
# note that the destination table is empty when this script is run
cmd = 'mysql -u ve --skip-column-names --batch --execute="insert into destination (select * from source limit 100000)" test'
subprocess.call(cmd)

# check to see how many rows exist in the destination table
cmd = 'mysql -u ve --skip-column-names --batch --execute="select count(*) from destination" test'
process = subprocess.Popen(cmd, shell=True, stdout=subprocess.PIPE)
try: count = (int(process.communicate()[0][:-1]))
except: count = 0
</snippet></ROW><ROW><id>1541355</id><snippet>prog = ["mysql", "-u", "ve", "--execute", 'insert into foo values ("snargle", 2)']
subprocess.call(prog)
</snippet></ROW><ROW><id>1541355</id><snippet>prog = ["printf", "%s", "&lt;", "/etc/passwd"]
subprocess.call(prog)
</snippet></ROW><ROW><id>1541390</id><snippet>Content.objects.filter(...).order_by('score__counter')
</snippet></ROW><ROW><id>1541390</id><snippet>relationshipName__fieldName</snippet></ROW><ROW><id>1541755</id><snippet>def a(n):
  if n == 0: return 1
  return 1 - 1 / float(a(n-1) + 3)

# limit is sqrt(3) - 1
limit = 3.0 ** 0.5 - 1.0

# get 9 digits' precision
i = 0
while abs(a(i) - limit) &gt; 1.0e-9:
  i += 1

print i
</snippet></ROW><ROW><id>1541755</id><snippet>8</snippet></ROW><ROW><id>1541755</id><snippet># get a function's limit numerically
def limit(f, eps=1.0e-11):
  previous_value = f(0)
  next_value = f(1)
  i = 2
  while abs(next_value - previous_value) &gt; eps:
    previous_value = next_value
    next_value = f(i)
    i += 1
  return next_value
</snippet></ROW><ROW><id>1541755</id><snippet>def next_prev(f):
  previous_value = f(0)
  i = 1
  while True:
    next_value = f(i)
    yield next_value, previous_value
    i += 1
    previous_value = next_value
</snippet></ROW><ROW><id>1541755</id><snippet>limit</snippet></ROW><ROW><id>1541755</id><snippet>def limit(f, eps=1.0e-11):
  for next_value, previous_value in next_prev(f):
    if abs(next_value - previous_value) &lt; eps:
      return next_value
</snippet></ROW><ROW><id>1541755</id><snippet>next_prev</snippet></ROW><ROW><id>1541755</id><snippet>limit</snippet></ROW><ROW><id>1541755</id><snippet>import itertools

def next_prev(f):
  values = itertools.imap(f, itertools.count())
  prv, nxt = itertools.tee(values)
  nxt.next()
  return itertools.izip(prv, nxt)
</snippet></ROW><ROW><id>1541827</id><snippet>set()</snippet></ROW><ROW><id>1541827</id><snippet>&gt;&gt;&gt; your_list = ['one', 'two', 'one']
&gt;&gt;&gt; len(your_list)!=len(set(your_list))
True
</snippet></ROW><ROW><id>1542144</id><snippet>python2.6</snippet></ROW><ROW><id>1542399</id><snippet>numpy.sin</snippet></ROW><ROW><id>1542399</id><snippet>math</snippet></ROW><ROW><id>1542399</id><snippet>from uncertainties import sin
</snippet></ROW><ROW><id>1542399</id><snippet>from uncertainties import *  # sin, cos, etc.
</snippet></ROW><ROW><id>1542399</id><snippet>from uncertainties.math_ops import *  # Work on scalars and scalars with uncertainty
</snippet></ROW><ROW><id>1542399</id><snippet>from uncertainties.numpy_ops import *  # Work on everything (scalars, arrays, numbers with uncertainties, arrays with uncertainties)
</snippet></ROW><ROW><id>1542697</id><snippet>class Friendship(models.Model):
  from_friend = models.ForeignKey(
    User, related_name='friend_set'
  )
  to_friend = models.ForeignKey(
    User, related_name='to_friend_set'
  )
  def __unicode__(self):
    return u'%s, %s' % (
      self.from_friend.username,
      self.to_friend.username
    )
  class Meta:
    unique_together = (('to_friend', 'from_friend'), )
</snippet></ROW><ROW><id>1542769</id><snippet>data = [1,2,3]
output = ((lambda x: x + x)
          (data[2]))
</snippet></ROW><ROW><id>1542769</id><snippet>data = [1, 2, 3]
output = (lambda x=data[2] : x +x)()
</snippet></ROW><ROW><id>1542769</id><snippet>output = data[2] + data[2]
</snippet></ROW><ROW><id>1542769</id><snippet>import whatever

def some_func(args):
    code_here

def some_other_func(args)
    code_here

def main(args):
    parse_args
    some_func(something)
    some_other_func(something_else)
    return some_exit_code

if __name__ == '__main__'
    import sys
    sys.exit(main(sys.argv))
</snippet></ROW><ROW><id>1542769</id><snippet>def main():
    data = [1, 2, 3]
    def foo():
       x = data[2]
       return x + x
    print foo()
    data = [4, 5, 6]
    print foo()
    # if you want the nested function to close over its arguments:
    def bar(data=data):
       x = data[2]
       return x + x
    print bar()
    data = [7, 8, 9]
    print bar()
</snippet></ROW><ROW><id>1542818</id><snippet>os.getenv('PWD')</snippet></ROW><ROW><id>1542823</id><snippet>print</snippet></ROW><ROW><id>1542823</id><snippet>sys.getdefaultencoding()</snippet></ROW><ROW><id>1542823</id><snippet>sys.stdout.encoding</snippet></ROW><ROW><id>1542823</id><snippet>LANG=C</snippet></ROW><ROW><id>1542823</id><snippet>ANSI_X3.4-1968</snippet></ROW><ROW><id>1542823</id><snippet>sys.stdout</snippet></ROW><ROW><id>1542823</id><snippet>sys.getdefaultencoding()</snippet></ROW><ROW><id>1542823</id><snippet>str(u'La Pe\xf1a')</snippet></ROW><ROW><id>1542823</id><snippet>unicode</snippet></ROW><ROW><id>1542823</id><snippet>str</snippet></ROW><ROW><id>1542934</id><snippet>&gt;&gt;&gt; from django.contrib.auth.models import User
&gt;&gt;&gt; User.objects.filter(username='does-not-exist')
[]
</snippet></ROW><ROW><id>1542934</id><snippet>&gt;&gt;&gt; User.objects.get(username='does-exist')
&lt;User: does-exist&gt;
&gt;&gt;&gt; User.objects.get(username='does-not-exist')
Traceback (most recent call last):
  File "&lt;console&gt;", line 1, in &lt;module&gt;
  File "/usr/lib/python2.5/django/db/models/manager.py", line 120, in get
  File "/usr/lib/python2.5/django/db/models/query.py", line 305, in get
DoesNotExist: User matching query does not exist.
</snippet></ROW><ROW><id>1542934</id><snippet>try:
   to_friend = User.objects.get(username=friend_q)
except User.DoesNotExist:
   # do something, raise error, ...
</snippet></ROW><ROW><id>1543336</id><snippet>def populateMethod(self, method):
    print "method:", method

for method in ["one","two","three"]:
    button = Button(self.methodFrame, text=method, 
        command=lambda m=method: self.populateMethod(m))
    button.pack({'fill': 'x', 'expand': 1, 'padx': 5, 'pady': 3})
</snippet></ROW><ROW><id>1543370</id><snippet>SimpleXMLRPCDispatcher</snippet></ROW><ROW><id>1543463</id><snippet>zip</snippet></ROW><ROW><id>1543463</id><snippet>[(11, 'one'), ...]</snippet></ROW><ROW><id>1543463</id><snippet>[y for (x, y) in zip(a, msg) if x &lt; 0]
</snippet></ROW><ROW><id>1543463</id><snippet>msg</snippet></ROW><ROW><id>1543463</id><snippet>"one"</snippet></ROW><ROW><id>1543463</id><snippet>[m for m in msg if "one" not in m]
</snippet></ROW><ROW><id>1543639</id><snippet>&gt;&gt;&gt;import registration
</snippet></ROW><ROW><id>1543665</id><snippet>gzip.open</snippet></ROW><ROW><id>1543665</id><snippet>gzip.GzipFile</snippet></ROW><ROW><id>1543665</id><snippet>open(filename, mode='rb', compresslevel=9)
    #Shorthand for GzipFile(filename, mode, compresslevel).
</snippet></ROW><ROW><id>1543665</id><snippet>class GzipFile
   __init__(self, filename=None, mode=None, compresslevel=9, fileobj=None)
   #    At least one of fileobj and filename must be given a non-trivial value.
</snippet></ROW><ROW><id>1543665</id><snippet>gzip_file_handle = gzip.GzipFile(fileobj=url_file_handle)
</snippet></ROW><ROW><id>1543870</id><snippet>&gt;&gt;&gt; [(x,y,x*y) for x in range(1,5) for y in range(1,5)]
[(1, 1, 1), (1, 2, 2), (1, 3, 3), (1, 4, 4), 
 (2, 1, 2), (2, 2, 4), (2, 3, 6), (2, 4, 8), 
 (3, 1, 3), (3, 2, 6), (3, 3, 9), (3, 4, 12),
 (4, 1, 4), (4, 2, 8), (4, 3, 12), (4, 4, 16)]
</snippet></ROW><ROW><id>1543870</id><snippet>&gt;&gt;&gt; [(x,y,x*y) for x in range(1,5) for y in range(1,5) if x*y &gt; 8]
[(3, 3, 9), (3, 4, 12), (4, 3, 12), (4, 4, 16)]
</snippet></ROW><ROW><id>1543870</id><snippet>var nums = [1, 2, 3, 21, 22, 30];
var s = eval('[[i,j] for each (i in nums) for each (j in [3,4]) if (i%2 == 0)]');
s.toSource();
[[2, 3], [2, 4], [22, 3], [22, 4], [30, 3], [30, 4]]
</snippet></ROW><ROW><id>1543870</id><snippet>&lt;script&gt;</snippet></ROW><ROW><id>1543979</id><snippet>wmctrl</snippet></ROW><ROW><id>1543979</id><snippet>subprocess</snippet></ROW><ROW><id>1543979</id><snippet>wmctrl -l</snippet></ROW><ROW><id>1544682</id><snippet>if result = some_function(arg1, arg2):
    return result
</snippet></ROW><ROW><id>1544682</id><snippet>if a = b</snippet></ROW><ROW><id>1544682</id><snippet>if a == b</snippet></ROW><ROW><id>1544682</id><snippet>x = some_function()
if x:
    print "Function returned True"
</snippet></ROW><ROW><id>1544682</id><snippet>result = re.match("a", "b")
if result:
   print result.groups()
</snippet></ROW><ROW><id>1544682</id><snippet>if result is not None:</snippet></ROW><ROW><id>1544682</id><snippet>#!/usr/bin/env python2.6
def some_function(arg1, arg2):
    if arg1 + arg2 &gt; 5:
        return "some data for you"
    else:
        raise ValueError("Could not complete, arg1+arg2 was too small")
</snippet></ROW><ROW><id>1544682</id><snippet>return some_function(3, 2)
</snippet></ROW><ROW><id>1544682</id><snippet>def main():
    try:
        result = some_function(3, 5)
    except ValueError, errormsg:
        print errormsg
        sys.exit(1)
    else:
        print "Everything is perfect, the result was {0}".format(result)
</snippet></ROW><ROW><id>1544682</id><snippet>if foo == 'blah':
    do_blah_thing()
do_one()
do_two()
do_three()
</snippet></ROW><ROW><id>1544682</id><snippet>if foo == 'blah': do_blah_thing()
do_one(); do_two(); do_three()
</snippet></ROW><ROW><id>1544694</id><snippet>class Params(object):
    atoms =['1.0','2.0','3.0','4.0','5.0','6.0','7.0','8.0','9.0','x','x','x','x']
    operators = {'+': 2, '-': 2, '*': 2, '/': 2,'+': 2, '-': 2, '*': 2, '/': 2, '**': 2, '%': 2}
    depth = 1
    ratio = .4
    method = ''
    riddle = '1 + np.sin(x)'

# This works fine:
Params.riddle
</snippet></ROW><ROW><id>1544694</id><snippet>Params.riddle</snippet></ROW><ROW><id>1544694</id><snippet>Params['riddle']</snippet></ROW><ROW><id>1544694</id><snippet>Params</snippet></ROW><ROW><id>1544890</id><snippet>unittest.main()</snippet></ROW><ROW><id>1545060</id><snippet>&gt;&gt;&gt; x = [1, 2, 3, 4, 5]
&gt;&gt;&gt; y = [2*a for a in x if a % 2 == 1]
&gt;&gt;&gt; print(y)
[2, 6, 10]
</snippet></ROW><ROW><id>1545114</id><snippet>z = np.array(zip([1,2,3,4,5], ['a','b','c','d','e']), dtype=[('int', int), ('str', '|S1')])
np.savetxt('test.txt', z, fmt='%i %s')
</snippet></ROW><ROW><id>1545114</id><snippet>savetext</snippet></ROW><ROW><id>1545114</id><snippet>asarray(sequence)</snippet></ROW><ROW><id>1545114</id><snippet>|S4</snippet></ROW><ROW><id>1545282</id><snippet>def decorator(f):
    @functools.wraps(f)
    def wrapper():
        ....
</snippet></ROW><ROW><id>1545338</id><snippet>queryset</snippet></ROW><ROW><id>1545338</id><snippet>def queryset(self, request):
    # use our manager, rather than the default one
    qs = self.model.objects.get_query_set()

    # we need this from the superclass method
    ordering = self.ordering or () # otherwise we might try to *None, which is bad ;)
    if ordering:
        qs = qs.order_by(*ordering)
    return qs
</snippet></ROW><ROW><id>1545640</id><snippet>#Python 2.6
from selenium import selenium
import unittest, time, re, csv, logging

class Untitled(unittest.TestCase):
    def setUp(self):
        self.verificationErrors = []
        self.selenium = selenium("localhost", 4444, "*firefox", "http://www.SourceDomain.com")
        self.selenium.start()

    def test_untitled(self):
        sel = self.selenium
        spamReader = csv.reader(open('your_file.csv'))
        for row in spamReader:
            sel.open(row[0])
            sel.wait_for_page_to_load("30000")
            print sel.get_html_source()

    def tearDown(self):
        self.selenium.stop()
        self.assertEqual([], self.verificationErrors)

if __name__ == "__main__":
    unittest.main()
</snippet></ROW><ROW><id>1545640</id><snippet>import urllib2, csv

def fetchsource(url):
    page = urllib2.urlopen(url)
    source = page.read()
    return source

fooReader = csv.reader(open('your_file.csv'))
for url in fooReader:
    print fetchsource(url)
</snippet></ROW><ROW><id>1545678</id><snippet>import re

&gt;&gt;&gt; s = "Business  -- way's"
&gt;&gt;&gt; s = re.sub(r'[^\w\s]', '', s)
&gt;&gt;&gt; s
"Business  ways"
</snippet></ROW><ROW><id>1545819</id><snippet>disabled=disabled</snippet></ROW><ROW><id>1545819</id><snippet>disabled</snippet></ROW><ROW><id>1545819</id><snippet>disabled=disabled</snippet></ROW><ROW><id>1545896</id><snippet>replace</snippet></ROW><ROW><id>1545896</id><snippet>str.replace(old, new[, count])</snippet></ROW><ROW><id>1545896</id><snippet>replace("-", "")</snippet></ROW><ROW><id>1545896</id><snippet>replace("\"", "")</snippet></ROW><ROW><id>1546162</id><snippet>sqlite3</snippet></ROW><ROW><id>1546162</id><snippet>pysqlite2</snippet></ROW><ROW><id>1546162</id><snippet>&gt;&gt;&gt; import sqlite3
&gt;&gt;&gt; sqlite3.version_info
(2, 4, 1)
&gt;&gt;&gt; sqlite3.sqlite_version_info
(3, 6, 11)

&gt;&gt;&gt; from pysqlite2 import dbapi2 as sqlite3
&gt;&gt;&gt; sqlite3.version_info
(2, 5, 5)
&gt;&gt;&gt; sqlite3.sqlite_version_info
(3, 6, 18)
</snippet></ROW><ROW><id>1546162</id><snippet>version_info</snippet></ROW><ROW><id>1546162</id><snippet>sqlite3</snippet></ROW><ROW><id>1546162</id><snippet>pysqlite2</snippet></ROW><ROW><id>1546162</id><snippet>sqlite3</snippet></ROW><ROW><id>1546162</id><snippet>sqlite_version_info</snippet></ROW><ROW><id>1546162</id><snippet>sqlite3</snippet></ROW><ROW><id>1546162</id><snippet>from ... import ... as sqlite3</snippet></ROW><ROW><id>1546162</id><snippet>enable_load_extension</snippet></ROW><ROW><id>1546162</id><snippet>pysqlite2</snippet></ROW><ROW><id>1546162</id><snippet>enable_load_extension</snippet></ROW><ROW><id>1546162</id><snippet>pysqlite2</snippet></ROW><ROW><id>1546162</id><snippet>unix</snippet></ROW><ROW><id>1546162</id><snippet>pysqlite2</snippet></ROW><ROW><id>1546162</id><snippet>easy_install</snippet></ROW><ROW><id>1546162</id><snippet>$ sudo /path/to/easy_install -m pysqlite # or whatever package name you first used
</snippet></ROW><ROW><id>1546162</id><snippet>Removing pysqlite 2.5.5 from easy-install.pth file

Using /path/to/site-packages/pysqlite-2.5.5-py2.x-something.egg
</snippet></ROW><ROW><id>1546162</id><snippet>$ sudo rm -r /path/to/site-packages/pysqlite-2.5.5-py2.x-something.egg
</snippet></ROW><ROW><id>1546162</id><snippet>pysqlite-2.5.5</snippet></ROW><ROW><id>1546162</id><snippet>$ mkdir /tmp/build
$ cd /tmp/build
$ curl http://oss.itsystementwicklung.de/download/pysqlite/2.5/2.5.5/pysqlite-2.5.5.tar.gz | tar xz
$ cd pysqlite-2.5.5
</snippet></ROW><ROW><id>1546162</id><snippet>setup.cfg</snippet></ROW><ROW><id>1546162</id><snippet>SQLITE_OMIT_LOAD_EXTENSION</snippet></ROW><ROW><id>1546162</id><snippet>$ ed setup.cfg &lt;&lt;EOF
&gt; /SQLITE_OMIT_LOAD_EXTENSION/s/define=/#define=/
&gt; w
&gt; q
&gt; EOF
</snippet></ROW><ROW><id>1546162</id><snippet>sqlite3</snippet></ROW><ROW><id>1546162</id><snippet>sqlite3</snippet></ROW><ROW><id>1546162</id><snippet>pysqlite2</snippet></ROW><ROW><id>1546162</id><snippet>$ /path/to/python2.x setup.py build_static
</snippet></ROW><ROW><id>1546162</id><snippet>sqlite3</snippet></ROW><ROW><id>1546162</id><snippet>$ sudo /path/to/python2.x setup.py install
</snippet></ROW><ROW><id>1546162</id><snippet>$ cd     # somewhere out of the build directory
$ /path/to/python2.x
&gt;&gt;&gt; from pysqlite2 import test
&gt;&gt;&gt; test.test()
</snippet></ROW><ROW><id>1546162</id><snippet>sqlite3</snippet></ROW><ROW><id>1546162</id><snippet>FTS3</snippet></ROW><ROW><id>1546162</id><snippet>&gt;&gt;&gt; from pysqlite2 import dbapi2 as sqlite3
&gt;&gt;&gt; con = sqlite3.connect(":memory:")
&gt;&gt;&gt; con.execute("create virtual table recipe using fts3(name, ingredients)")
&lt;pysqlite2.dbapi2.Cursor object at 0xca5e0&gt;
</snippet></ROW><ROW><id>1546244</id><snippet>&gt;&gt;&gt; import re
&gt;&gt;&gt; re.sub(' +',' ','The     quick brown    fox')
'The quick brown fox'
</snippet></ROW><ROW><id>1546280</id><snippet>&lt;script&gt;populator = new Populator({parentId:
"profileForm:vanguardFundTabBox:tab0",execOnLoad:true,
 populatorUrl:"/us/JSP/Funds/VGITab/VGIFundOverviewTabContent.jsf?FundIntExt=INT&amp;FundId=0542",
inline:fals   e,type:"once"});
&lt;/script&gt;
</snippet></ROW><ROW><id>1546412</id><snippet>/* Supported address families. */
#define AF_UNSPEC       0
#define AF_INET         2       /* Internet IP Protocol         */
#define AF_INET6        10      /* IP version 6                 */
</snippet></ROW><ROW><id>1546435</id><snippet>toaddr = 'buffy@sunnydale.k12.ca.us'
cc = ['alexander@sunydale.k12.ca.us','willow@sunnydale.k12.ca.us']
bcc = ['chairman@slayerscouncil.uk']
fromaddr = 'giles@sunnydale.k12.ca.us'
message_subject = "disturbance in sector 7"
message_text = "Three are dead in an attack in the sewers below sector 7."
message = "From: %s\r\n" % fromaddr
        + "To: %s\r\n" % toaddr
        + "CC: %s\r\n" % ",".join(cc)
        + "Subject: %s\r\n" % message_subject
        + "\r\n" 
        + message_text
toaddrs = [toaddr] + cc + bcc
server = smtplib.SMTP('smtp.sunnydale.k12.ca.us')
server.set_debuglevel(1)
server.sendmail(fromaddr, toaddrs, message)
server.quit()
</snippet></ROW><ROW><id>1546467</id><snippet>enum</snippet></ROW><ROW><id>1546467</id><snippet>signed</snippet></ROW><ROW><id>1546467</id><snippet>unsigned</snippet></ROW><ROW><id>1546467</id><snippet>long long int</snippet></ROW><ROW><id>1546467</id><snippet>enum</snippet></ROW><ROW><id>1546467</id><snippet>c_uint</snippet></ROW><ROW><id>1546467</id><snippet>enum batch_op {
    OP1 = 2,
    OP2 = 3,
    OP3 = -1,
};

struct attrl {
    char *name;
    struct attrl *next;
    enum batch_op op;
};

void f(struct attrl *x) {
    x-&gt;op = OP3;
}
</snippet></ROW><ROW><id>1546467</id><snippet>from ctypes import (Structure, c_char_p, c_uint, c_int,
    POINTER, CDLL)

class AttrList(Structure): pass
AttrList._fields_ = [
    ('name', c_char_p),
    ('next', POINTER(AttrList)),
    ('op', c_int),
]

(OP1, OP2, OP3) = (2, 3, -1)

enum = CDLL('./libenum.so')
enum.f.argtypes = [POINTER(AttrList)]
enum.f.restype = None

a = AttrList(name=None, next=None, op=OP2)
assert a.op == OP2
enum.f(a)
assert a.op == OP3
</snippet></ROW><ROW><id>1546620</id><snippet>sites</snippet></ROW><ROW><id>1546747</id><snippet>from xml.dom.minidom import Text, Element

t = Text()
e = Element('p')

t.data = '&lt;bar&gt;&lt;a/&gt;&lt;baz spam="eggs"&gt; &amp; blabla &amp;entity;&lt;/&gt;'
e.appendChild(t)
</snippet></ROW><ROW><id>1546747</id><snippet>&gt;&gt;&gt; e.toxml()
'&lt;p&gt;&lt;bar&gt;&lt;a/&gt;&lt;baz spam="eggs"&gt; &amp; blabla &amp;entity;&lt;/&gt;&lt;/p&gt;'
</snippet></ROW><ROW><id>1546862</id><snippet>79</snippet></ROW><ROW><id>1546862</id><snippet>[7, 9]</snippet></ROW><ROW><id>1546862</id><snippet>10</snippet></ROW><ROW><id>1546862</id><snippet>79</snippet></ROW><ROW><id>1546862</id><snippet>7 * 10**1 + 9 * 10**0</snippet></ROW><ROW><id>1546862</id><snippet>&gt;&gt;&gt; str(79)
'79'

# Another way to say this is [int(c) for c in str(79)]
&gt;&gt;&gt; map(int, str(79))
[7, 9]

&gt;&gt;&gt; sum(map(int, str(79)))
16
</snippet></ROW><ROW><id>1547163</id><snippet>#define private public</snippet></ROW><ROW><id>1547163</id><snippet>#include</snippet></ROW><ROW><id>1547163</id><snippet>.h</snippet></ROW><ROW><id>1547210</id><snippet>while</snippet></ROW><ROW><id>1547210</id><snippet>ans*ans &lt; x</snippet></ROW><ROW><id>1547210</id><snippet>def sqrt(x):
    ans = 0
    if x &gt;= 0:
        while ans*ans &lt; x:
            ans = ans + 1

        if ans*ans != x:  # this if statement was nested inside the while
            print x, 'is not a perfect square.'
            return None
        else:
            print x, ' is a perfect square.'
            return ans
    else:
        print x, ' is not a positive number.'
        return None

y = 16          
print sqrt(y)
</snippet></ROW><ROW><id>1547261</id><snippet>def d(f):
    if getattr(f, '_decorated_with_d', False):
        raise SomeException('Already decorated')
    @wraps(f)
    def wrapper(*args,**kwargs):
        print 'Calling func'
        return f(*args,**kwargs)
    wrapper._decorated_with_d = True
    return wrapper
</snippet></ROW><ROW><id>1547261</id><snippet>def d(f):
    decorated_with = getattr(f, '_decorated_with', set())
    if d in decorated_with:
        raise SomeException('Already decorated')
    @wraps(f)
    def wrapper(*args,**kwargs):
        print 'Calling func'
        return f(*args,**kwargs)
    decorated_with.add(d)
    wrapper._decorated_with = decorated_with
    return wrapper
</snippet></ROW><ROW><id>1547261</id><snippet>_decorated_with</snippet></ROW><ROW><id>1547306</id><snippet>@register.filter
def is_favourite_of(object, user):
    return Favourite.objects.is_favourite(user, object)
</snippet></ROW><ROW><id>1547306</id><snippet>{% if restaurant|is_favourite_of:user %}
</snippet></ROW><ROW><id>1547352</id><snippet>/usr/local/lib</snippet></ROW><ROW><id>1547352</id><snippet>/usr/local</snippet></ROW><ROW><id>1547457</id><snippet>required=False</snippet></ROW><ROW><id>1547457</id><snippet>    file = forms.FileField(required=False)
</snippet></ROW><ROW><id>1547475</id><snippet>from types import ModuleType

isinstance(obj, ModuleType)
</snippet></ROW><ROW><id>1547572</id><snippet>$ python
Python 2.5.2 (r252:60911, Jul 31 2008, 17:28:52)
[GCC 4.2.3 (Ubuntu 4.2.3-2ubuntu7)] on linux2
Type "help", "copyright", "credits" or "license" for more information.
&gt;&gt;&gt; import sqlite
&gt;&gt;&gt; sqlite.threadsafety
1
</snippet></ROW><ROW><id>1547572</id><snippet>import threading

class YourClass:
    def __init__(self):
        #...
        self.local = threading.local()  # Thread local storage for db handles
        self.db_file = "/path/to/db"
        #...
    def db_open(self):
        if not getattr(self.local, "db", None):
            self.local.db = sqlite3.connect(self.db_file)
        return self.local.db
</snippet></ROW><ROW><id>1547579</id><snippet>job = jobServer.submit( doRun, (param,))
</snippet></ROW><ROW><id>1547579</id><snippet>import os, pp

def doRun(param):
    print "your name is %s!" % os.getlogin()

jobServer = pp.Server()
jobServer.submit( doRun, (param,))
</snippet></ROW><ROW><id>1547579</id><snippet>os</snippet></ROW><ROW><id>1547579</id><snippet>module</snippet></ROW><ROW><id>1547579</id><snippet>submit</snippet></ROW><ROW><id>1547579</id><snippet>import os</snippet></ROW><ROW><id>1547579</id><snippet>pickle</snippet></ROW><ROW><id>1547579</id><snippet>submit</snippet></ROW><ROW><id>1547579</id><snippet>main</snippet></ROW><ROW><id>1547579</id><snippet>submit</snippet></ROW><ROW><id>1547579</id><snippet>submit</snippet></ROW><ROW><id>1547656</id><snippet>QPaintDevice</snippet></ROW><ROW><id>1547739</id><snippet>from operator import itemgetter
l = sorted(l, key=itemgetter('time'), reverse=True)
</snippet></ROW><ROW><id>1547739</id><snippet>l = sorted(l, key=lambda a: a['time'], reverse=True)
</snippet></ROW><ROW><id>1547739</id><snippet>[{'time': 66}, {'time': 33}, {'time': 11}]
</snippet></ROW><ROW><id>1547739</id><snippet>your_list.sort</snippet></ROW><ROW><id>1547739</id><snippet>sorted(your_list)</snippet></ROW><ROW><id>1547739</id><snippet>l.sort(key=lambda a: a['time'], reverse=True)
</snippet></ROW><ROW><id>1547868</id><snippet>'3'</snippet></ROW><ROW><id>1547868</id><snippet>'1'</snippet></ROW><ROW><id>1547868</id><snippet>max(data, key=int)</snippet></ROW><ROW><id>1548211</id><snippet>tc class add dev eth2 parent 1: classid 1:1 htb rate 100Mbit ceil 100Mbit quantum 1600
</snippet></ROW><ROW><id>1548219</id><snippet>indentedBlock</snippet></ROW><ROW><id>1548219</id><snippet>suite</snippet></ROW><ROW><id>1548219</id><snippet>indentstack = [1]
suite = indentedBlock(stmt, indentstack, True)
</snippet></ROW><ROW><id>1548219</id><snippet>indentedGrammarExample.py</snippet></ROW><ROW><id>1548219</id><snippet>indentedBlock</snippet></ROW><ROW><id>1548437</id><snippet>&gt;&gt;&gt; a = 0123
&gt;&gt;&gt; a
83
&gt;&gt;&gt; a = 010
&gt;&gt;&gt; a
8
</snippet></ROW><ROW><id>1548437</id><snippet>&gt;&gt;&gt; map(int, '08978789787')
[0, 8, 9, 7, 8, 7, 8, 9, 7, 8, 7]
</snippet></ROW><ROW><id>1548514</id><snippet>class</snippet></ROW><ROW><id>1548514</id><snippet>print DIV('bar', Class="title")  ==&gt;  &lt;DIV class="title"&gt;bar&lt;/DIV&gt;
</snippet></ROW><ROW><id>1548537</id><snippet>item</snippet></ROW><ROW><id>1548537</id><snippet>items_by_pid = dict([(item.product.pid, item) for item in cart.items])
item = items_by_pid.get(pid, None)
if item is None:
    item = model.CartItem(cart, product, 0, product.normalPrice)
    cart.items.append(item)
item.quantity += 1
</snippet></ROW><ROW><id>1548644</id><snippet>__name__</snippet></ROW><ROW><id>1548644</id><snippet>"__main__"</snippet></ROW><ROW><id>1548644</id><snippet>def foo():
    print "Hello!"

if __name__ == "__main__":
   foo()
</snippet></ROW><ROW><id>1548644</id><snippet>bar.py</snippet></ROW><ROW><id>1548644</id><snippet>python bar.py</snippet></ROW><ROW><id>1548644</id><snippet>"Hello!"</snippet></ROW><ROW><id>1548644</id><snippet>import bar</snippet></ROW><ROW><id>1548644</id><snippet>bar.foo()</snippet></ROW><ROW><id>1548644</id><snippet>__name__</snippet></ROW><ROW><id>1548644</id><snippet>"__main__"</snippet></ROW><ROW><id>1548644</id><snippet>foo</snippet></ROW><ROW><id>1548720</id><snippet>import os, re

def purge(dir, pattern):
    for f in os.listdir(dir):
    	if re.search(pattern, f):
    		os.remove(os.path.join(dir, f))
</snippet></ROW><ROW><id>1549021</id><snippet>from string import ascii_uppercase

one_hot = {}
for i, l in enumerate(ascii_uppercase):
    bits = ['0']*26; bits[i] = '1'
    one_hot[l] = ' '.join(bits)
</snippet></ROW><ROW><id>1549021</id><snippet>['0']*26</snippet></ROW><ROW><id>1549021</id><snippet>['0']*len(alphabet)</snippet></ROW><ROW><id>1549036</id><snippet>fixup</snippet></ROW><ROW><id>1549036</id><snippet>br.form.new_control('text','unexistent',{'value':''})
br.form.fixup()
br['unexistent'] = 'hello'
</snippet></ROW><ROW><id>1549036</id><snippet>fixup()</snippet></ROW><ROW><id>1549036</id><snippet>This method should only be called once, after all controls have been
added to the form.
</snippet></ROW><ROW><id>1549040</id><snippet>inlineformset_factory</snippet></ROW><ROW><id>1549040</id><snippet>NotesFormSet = inlineformset_factory(NoteBook, Note, extra=10, form=NoteForm)
</snippet></ROW><ROW><id>1549049</id><snippet>import types

class obj(object):
    def __init__(self, arg):
        self.name = arg

def extract_name(obj):
    if type(obj) is types.DictType:
        return obj['name']
    else:
        return obj.__dict__['name']

d = { 'name': 'Jill'}    
print sorted([obj('Jack'), d], key=extract_name)
</snippet></ROW><ROW><id>1549049</id><snippet>def extract_elem_v2(elem_name):
    def key_extractor(obj):
        dct = obj if isinstance(obj, dict) else obj.__dict__
        return dct[elem_name]
    return key_extractor
</snippet></ROW><ROW><id>1549049</id><snippet>print sorted(list_of_stuff, key=extract_elem_v2('name'))
</snippet></ROW><ROW><id>1549221</id><snippet>2.*</snippet></ROW><ROW><id>1549221</id><snippet>exec ''</snippet></ROW><ROW><id>1549221</id><snippet>def A():
  exec ''
  B(locals())
  print x

def B(d):
  d['x'] = 1

A()
</snippet></ROW><ROW><id>1549221</id><snippet>1</snippet></ROW><ROW><id>1549221</id><snippet>3.*</snippet></ROW><ROW><id>1549221</id><snippet>exec</snippet></ROW><ROW><id>1549466</id><snippet>itertools.groupby</snippet></ROW><ROW><id>1549466</id><snippet>import itertools
import operator

def split_series(points, interval):
    start = points[0][0]

    return [[v for k, v in grouper] for group, grouper in
            itertools.groupby((((n - start) // interval, val)
                               for n, val in points), operator.itemgetter(0))]
</snippet></ROW><ROW><id>1549466</id><snippet>&gt;&gt;&gt; split_series([(1, 'a'), (2, 'b'), (6, 'a'), (6, 'd'), (11, 'c')], 3)
[['a', 'b'], ['a', 'd'], ['c']]
</snippet></ROW><ROW><id>1549466</id><snippet>[['a', 'b'], ['a', 'd'], [], ['c']]
</snippet></ROW><ROW><id>1549466</id><snippet>from collections import defaultdict

def split_series(points, interval):
    offset = points[0][0]
    maxval = (points[-1][0] - offset) // interval
    vals = defaultdict(list)
    for key, value in points:
        vals[(key - offset) // interval].append(value)
    return [vals[i] for i in xrange(maxval + 1)]
</snippet></ROW><ROW><id>1549468</id><snippet>lst = [[5, 44, 73] , [7, 21, 99], [1, 32, 100]]
list(reduce(lambda l, r: l + r, zip(*lst)))
</snippet></ROW><ROW><id>1549468</id><snippet>lst = [[5, 44, 73, 23] , [7, 21, 99], [1, 32, 100]]
list(filter(lambda p: p is not None, reduce(lambda x, y: x + y, map(None, *lst))))
</snippet></ROW><ROW><id>1549549</id><snippet>biglist = [ 
    {'title':'U2 Band','link':'u2.com'}, 
    {'title':'ABC Station','link':'abc.com'}, 
    {'title':'Live Concert by U2','link':'u2.com'} 
]

known_links = set()
newlist = []

for d in biglist:
  link = d['link']
  if link in known_links: continue
  newlist.append(d)
  known_links.add(link)

biglist[:] = newlist
</snippet></ROW><ROW><id>1549618</id><snippet>{{ rec.artist_name | safe }}
</snippet></ROW><ROW><id>1549644</id><snippet>.title()</snippet></ROW><ROW><id>1549644</id><snippet>&gt;&gt;&gt; "hello world".title()
'Hello World'
&gt;&gt;&gt; u"hello world".title()
u'Hello World'
</snippet></ROW><ROW><id>1549644</id><snippet>&gt;&gt;&gt; "they're bill's friends from the UK".title()
"They'Re Bill'S Friends From The Uk"
</snippet></ROW><ROW><id>1549654</id><snippet>friendships = Friendship.objects.filter(from_friend=some_user)
</snippet></ROW><ROW><id>1549654</id><snippet>second_select = Whatever.objects.filter(friend__in=friendships)
</snippet></ROW><ROW><id>1549737</id><snippet>(?&lt;name&gt;...)</snippet></ROW><ROW><id>1549737</id><snippet>(?P&lt;name&gt;...)</snippet></ROW><ROW><id>1549737</id><snippet>(?...)</snippet></ROW><ROW><id>1549737</id><snippet>r"I am a raw string"</snippet></ROW><ROW><id>1549737</id><snippet>\n</snippet></ROW><ROW><id>1549737</id><snippet>\s</snippet></ROW><ROW><id>1549749</id><snippet>class a:
   def __init__(self):
       self.val=1
</snippet></ROW><ROW><id>1549749</id><snippet>class a(object):</snippet></ROW><ROW><id>1549749</id><snippet>1</snippet></ROW><ROW><id>1549749</id><snippet>class a:
   val=1
   def __init__(self):
       pass
</snippet></ROW><ROW><id>1549749</id><snippet>1</snippet></ROW><ROW><id>1549749</id><snippet>int</snippet></ROW><ROW><id>1549749</id><snippet>self.val = 2</snippet></ROW><ROW><id>1549749</id><snippet>a</snippet></ROW><ROW><id>1549749</id><snippet>self.val</snippet></ROW><ROW><id>1549749</id><snippet>a.val = 3</snippet></ROW><ROW><id>1549749</id><snippet>self.val</snippet></ROW><ROW><id>1549749</id><snippet>self.val</snippet></ROW><ROW><id>1549749</id><snippet>self.val</snippet></ROW><ROW><id>1549749</id><snippet>del self.val</snippet></ROW><ROW><id>1549805</id><snippet>solve()</snippet></ROW><ROW><id>1549805</id><snippet>def solve(numLegs, numHeads):
    for numChicks in range(0, numHeads + 1):
        numPigs = numHeads - numChicks
        totLegs = 4*numPigs + 2*numChicks
        if totLegs == numLegs:
                return [numPigs, numChicks]
    return [None, None]
</snippet></ROW><ROW><id>1549844</id><snippet>solve</snippet></ROW><ROW><id>1549844</id><snippet>for
numChicks in range(0, numHeads +
1):</snippet></ROW><ROW><id>1549844</id><snippet>range</snippet></ROW><ROW><id>1549844</id><snippet>numChicks</snippet></ROW><ROW><id>1549844</id><snippet>numPigs = numHeads - numChicks</snippet></ROW><ROW><id>1549844</id><snippet>totLegs = 4*numPigs + 2*numChicks</snippet></ROW><ROW><id>1549844</id><snippet>totLegs</snippet></ROW><ROW><id>1549844</id><snippet>for</snippet></ROW><ROW><id>1549844</id><snippet>None</snippet></ROW><ROW><id>1549844</id><snippet>barnYard</snippet></ROW><ROW><id>1549844</id><snippet>solve</snippet></ROW><ROW><id>1549844</id><snippet>solve</snippet></ROW><ROW><id>1549844</id><snippet>solve</snippet></ROW><ROW><id>1549844</id><snippet>[None, None]</snippet></ROW><ROW><id>1549854</id><snippet>isinstance</snippet></ROW><ROW><id>1549854</id><snippet>type</snippet></ROW><ROW><id>1549854</id><snippet>isinstance</snippet></ROW><ROW><id>1549854</id><snippet>type</snippet></ROW><ROW><id>1549854</id><snippet>isinstance</snippet></ROW><ROW><id>1549854</id><snippet>try</snippet></ROW><ROW><id>1549854</id><snippet>except</snippet></ROW><ROW><id>1549854</id><snippet>except</snippet></ROW><ROW><id>1549854</id><snippet>basestring</snippet></ROW><ROW><id>1549854</id><snippet>isinstance</snippet></ROW><ROW><id>1549854</id><snippet>str</snippet></ROW><ROW><id>1549854</id><snippet>Unicode</snippet></ROW><ROW><id>1549854</id><snippet>basestring</snippet></ROW><ROW><id>1549854</id><snippet>basestring</snippet></ROW><ROW><id>1549854</id><snippet>isinstance</snippet></ROW><ROW><id>1549854</id><snippet>if isinstance(x, basestring)
  return treatasscalar(x)
try:
  return treatasiter(iter(x))
except TypeError:
  return treatasscalar(x)
</snippet></ROW><ROW><id>1549854</id><snippet>basestring</snippet></ROW><ROW><id>1549854</id><snippet>isinstance</snippet></ROW><ROW><id>1549854</id><snippet>isinstance</snippet></ROW><ROW><id>1549854</id><snippet>issubclass</snippet></ROW><ROW><id>1549854</id><snippet>isinstance</snippet></ROW><ROW><id>1549854</id><snippet>issubclass</snippet></ROW><ROW><id>1550137</id><snippet>&gt;&gt;&gt; array([[1,2,3],]*3)
array([[1, 2, 3],
       [1, 2, 3],
       [1, 2, 3]])

&gt;&gt;&gt; array([[1,2,3],]*3).transpose()
array([[1, 1, 1],
       [2, 2, 2],
       [3, 3, 3]])
</snippet></ROW><ROW><id>1550137</id><snippet>[16]</snippet></ROW><ROW><id>1550137</id><snippet>&gt;&gt;&gt; x = array([1,2,3])
&gt;&gt;&gt; x
array([1, 2, 3])
&gt;&gt;&gt; x.transpose()
array([1, 2, 3])
&gt;&gt;&gt; matrix([1,2,3])
matrix([[1, 2, 3]])
&gt;&gt;&gt; matrix([1,2,3]).transpose()
matrix([[1],
        [2],
        [3]])
</snippet></ROW><ROW><id>1550166</id><snippet>break</snippet></ROW><ROW><id>1550166</id><snippet>if</snippet></ROW><ROW><id>1550166</id><snippet>judge</snippet></ROW><ROW><id>1550235</id><snippet>--record</snippet></ROW><ROW><id>1550235</id><snippet>python setup.py install --record files.txt
</snippet></ROW><ROW><id>1550235</id><snippet>cat files.txt | xargs rm -rf
</snippet></ROW><ROW><id>1550413</id><snippet>html_code = A('&lt;click&gt;', rows.xml(), _href='http://mylink')
html_code = B('Results:', rows.xml(), _class='results', _id=1)
html_page = HTML(BODY(B('Results:', rows.xml(), _class='results', _id=1)))
</snippet></ROW><ROW><id>1550413</id><snippet>table = SQLTABLE(rows, orderby=True, _width="100%")
</snippet></ROW><ROW><id>1550413</id><snippet>response.view = 'template.html'</snippet></ROW><ROW><id>1550413</id><snippet>index</snippet></ROW><ROW><id>1550413</id><snippet>def index():
    # ... code to extract the rows
    return HTML(BODY(B('Results:', rows.xml(), _class='results', _id=1))).xml()
</snippet></ROW><ROW><id>1550413</id><snippet>response.view=...</snippet></ROW><ROW><id>1550413</id><snippet>&lt;html&gt;&lt;head&gt;&lt;/head&gt;
  &lt;body&gt;
    {{=message}}
  &lt;/body&gt;
&lt;/html&gt;
</snippet></ROW><ROW><id>1550413</id><snippet>def index():
    # ... code to extract the rows
    html = B('Results:', rows.xml(), _class='results', _id=1)
    return dict(message=html)
</snippet></ROW><ROW><id>1550414</id><snippet>;</snippet></ROW><ROW><id>1550414</id><snippet>&gt;&gt;&gt; import this

The Zen of Python, by Tim Peters

...
Readability counts.
...
</snippet></ROW><ROW><id>1550685</id><snippet>/usr/project/models/__init__.py</snippet></ROW><ROW><id>1550685</id><snippet>from myModel import *</snippet></ROW><ROW><id>1550685</id><snippet>__init__.py</snippet></ROW><ROW><id>1551073</id><snippet>sys.path</snippet></ROW><ROW><id>1551073</id><snippet>import sys
sys.path.insert(0, directory_of_modules)
# do imports here.
</snippet></ROW><ROW><id>1551187</id><snippet>vars</snippet></ROW><ROW><id>1551187</id><snippet>.format</snippet></ROW><ROW><id>1551187</id><snippet>_('Hello {name}.')</snippet></ROW><ROW><id>1551187</id><snippet>_</snippet></ROW><ROW><id>1551187</id><snippet>formatstring.format(**locals())
</snippet></ROW><ROW><id>1551187</id><snippet>locals()</snippet></ROW><ROW><id>1551187</id><snippet>locals()</snippet></ROW><ROW><id>1551187</id><snippet>lint</snippet></ROW><ROW><id>1551187</id><snippet>if ...: nmae = ...</snippet></ROW><ROW><id>1551187</id><snippet>nmae</snippet></ROW><ROW><id>1551187</id><snippet>blah.format(**locals())</snippet></ROW><ROW><id>1551187</id><snippet>blah % locals()</snippet></ROW><ROW><id>1551187</id><snippet>nmae</snippet></ROW><ROW><id>1551187</id><snippet>locals()</snippet></ROW><ROW><id>1551187</id><snippet>blah.format(name=name)
</snippet></ROW><ROW><id>1551187</id><snippet>locals()</snippet></ROW><ROW><id>1551187</id><snippet>locals()</snippet></ROW><ROW><id>1551187</id><snippet>import *</snippet></ROW><ROW><id>1551187</id><snippet>eval</snippet></ROW><ROW><id>1551187</id><snippet>exec</snippet></ROW><ROW><id>1551223</id><snippet>class Holder(object):
   def set(self, value):
     self.value = value
     return value
   def get(self):
     return self.value

h = Holder()

...

if h.set(isBig(y)): return h.get()
</snippet></ROW><ROW><id>1551223</id><snippet>if</snippet></ROW><ROW><id>1551223</id><snippet>while</snippet></ROW><ROW><id>1551223</id><snippet>hundreds = isBig, isSmall, isJuicy, isBlah, ...

for predicate in hundreds:
  result = predicate(y)
  if result: return result
</snippet></ROW><ROW><id>1551223</id><snippet>return next(x for x in (f(y) for f in hundreds) if x)
</snippet></ROW><ROW><id>1551223</id><snippet>return next((x for x in (f(y) for f in hundreds) if x)), None)
</snippet></ROW><ROW><id>1551223</id><snippet>None</snippet></ROW><ROW><id>1551223</id><snippet>Holder</snippet></ROW><ROW><id>1551223</id><snippet>Holder</snippet></ROW><ROW><id>1551394</id><snippet>def pretty_date(time=False):
    """
    Get a datetime object or a int() Epoch timestamp and return a
    pretty string like 'an hour ago', 'Yesterday', '3 months ago',
    'just now', etc
    """
    from datetime import datetime
    now = datetime.now()
    if type(time) is int:
        diff = now - datetime.fromtimestamp(time)
    elif isinstance(time,datetime):
        diff = now - time 
    elif not time:
        diff = now - now
    second_diff = diff.seconds
    day_diff = diff.days

    if day_diff &lt; 0:
        return ''

    if day_diff == 0:
        if second_diff &lt; 10:
            return "just now"
        if second_diff &lt; 60:
            return str(second_diff) + " seconds ago"
        if second_diff &lt; 120:
            return  "a minute ago"
        if second_diff &lt; 3600:
            return str( second_diff / 60 ) + " minutes ago"
        if second_diff &lt; 7200:
            return "an hour ago"
        if second_diff &lt; 86400:
            return str( second_diff / 3600 ) + " hours ago"
    if day_diff == 1:
        return "Yesterday"
    if day_diff &lt; 7:
        return str(day_diff) + " days ago"
    if day_diff &lt; 31:
        return str(day_diff/7) + " weeks ago"
    if day_diff &lt; 365:
        return str(day_diff/30) + " months ago"
    return str(day_diff/365) + " years ago"
</snippet></ROW><ROW><id>1551547</id><snippet>    for n in neurons:
        n.update_state()
    for n in neurons:
        n.update_output()
</snippet></ROW><ROW><id>1551614</id><snippet>make_file</snippet></ROW><ROW><id>1551614</id><snippet>FieldStorage</snippet></ROW><ROW><id>1551614</id><snippet>write</snippet></ROW><ROW><id>1551878</id><snippet>basket = dict(basket_one, **basket_two)
</snippet></ROW><ROW><id>1551878</id><snippet>basket_two</snippet></ROW><ROW><id>1551878</id><snippet>basket_one</snippet></ROW><ROW><id>1551878</id><snippet>dict</snippet></ROW><ROW><id>1551878</id><snippet>**</snippet></ROW><ROW><id>1551878</id><snippet>x = mungesomedict(dict(adict, **anotherdict))
</snippet></ROW><ROW><id>1552067</id><snippet>class AuthenticationForm(forms.Form):
    """
    Base class for authenticating users. Extend this to get a form that accepts
    username/password logins.
    """
    username = forms.CharField(label=_("Username"), max_length=30)
    password = forms.CharField(label=_("Password"), widget=forms.PasswordInput)

    def __init__(self, request=None, *args, **kwargs):
        """
        If request is passed in, the form will validate that cookies are
        enabled. Note that the request (a HttpRequest object) must have set a
        cookie with the key TEST_COOKIE_NAME and value TEST_COOKIE_VALUE before
        running this validation.
        """
        self.request = request
        self.user_cache = None
        super(AuthenticationForm, self).__init__(*args, **kwargs)

    def clean(self):
        username = self.cleaned_data.get('username')
        password = self.cleaned_data.get('password')

        if username and password:
            self.user_cache = authenticate(username=username, password=password)
            if self.user_cache is None:
                raise forms.ValidationError(_("Please enter a correct username and password. Note that both fields are case-sensitive."))
            elif not self.user_cache.is_active:
                raise forms.ValidationError(_("This account is inactive."))

        # TODO: determine whether this should move to its own method.
        if self.request:
            if not self.request.session.test_cookie_worked():
                raise forms.ValidationError(_("Your Web browser doesn't appear to have cookies enabled. Cookies are required for logging in."))

        return self.cleaned_data

    def get_user_id(self):
        if self.user_cache:
            return self.user_cache.id
        return None

    def get_user(self):
        return self.user_cache
</snippet></ROW><ROW><id>1552067</id><snippet>def clean_username(self):
    username = self.cleaned_data['username']
    try:
        User.objects.get(username=username)
    except User.DoesNotExist:
        raise forms.ValidationError("The username you have entered does not exist.")
    return username
</snippet></ROW><ROW><id>1552161</id><snippet>import re

def doitall(number):
  # get 9 or 10 digits, or None:
  mo = re.search(r'\d{9,10}', number)
  if mo is None: return None
  # add a leading 0 if they were just 9
  digits = ('0' + mo.group())[-10:]
  # now put a dot after each 2 digits
  # and discard the resulting trailing dot
  return re.sub(r'(\d\d)', r'\1.', digits)[:-1]

number = "+33.300000000"
print doitall(number)
</snippet></ROW><ROW><id>1552161</id><snippet>03.00.00.00.00</snippet></ROW><ROW><id>1552299</id><snippet>Container</snippet></ROW><ROW><id>1552299</id><snippet>__contains__</snippet></ROW><ROW><id>1552299</id><snippet>item in container</snippet></ROW><ROW><id>1552299</id><snippet>if item in container:</snippet></ROW><ROW><id>1552299</id><snippet>for</snippet></ROW><ROW><id>1552299</id><snippet>for item in container:</snippet></ROW><ROW><id>1552299</id><snippet>__iter__</snippet></ROW><ROW><id>1552299</id><snippet>Hashable</snippet></ROW><ROW><id>1552299</id><snippet>__hash__</snippet></ROW><ROW><id>1552299</id><snippet>Sized</snippet></ROW><ROW><id>1552299</id><snippet>__len__</snippet></ROW><ROW><id>1552299</id><snippet>Sequence</snippet></ROW><ROW><id>1552299</id><snippet>Mapping</snippet></ROW><ROW><id>1552299</id><snippet>__getitem__</snippet></ROW><ROW><id>1552299</id><snippet>Sequence</snippet></ROW><ROW><id>1552299</id><snippet>Mapping</snippet></ROW><ROW><id>1552299</id><snippet>__contains__</snippet></ROW><ROW><id>1552299</id><snippet>__getitem__</snippet></ROW><ROW><id>1552299</id><snippet>Container</snippet></ROW><ROW><id>1552299</id><snippet>collections</snippet></ROW><ROW><id>1552299</id><snippet>&lt;&lt;</snippet></ROW><ROW><id>1552299</id><snippet>&gt;&gt;</snippet></ROW><ROW><id>1552299</id><snippet>2.*</snippet></ROW><ROW><id>1552299</id><snippet>3.*</snippet></ROW><ROW><id>1552299</id><snippet>%</snippet></ROW><ROW><id>1552313</id><snippet>try:
  bs = a["key"][0][0]
# Note: the syntax for catching exceptions is different in old versions
# of Python. Use whichever one of these lines is appropriate to your version.
except KeyError, IndexError, TypeError:   # Python 3
except (KeyError, IndexError, TypeError): # Python 2
  bs = []
for b in bs:
</snippet></ROW><ROW><id>1552313</id><snippet>def maybe_list(f):
  try:
    return f()
  except KeyError, IndexError, TypeError:
    return []

for b in maybe_list(lambda: a["key"][0][0]):
</snippet></ROW><ROW><id>1553158</id><snippet>list</snippet></ROW><ROW><id>1553158</id><snippet># use range() in Python 3
l = [{'open': False, 'serve': False} for i in xrange(150)]
</snippet></ROW><ROW><id>1553177</id><snippet>from ZSI.ServiceProxy import ServiceProxy
service = ServiceProxy('test.wsdl')
service.NewOperation(NewOperationRequest='test')
</snippet></ROW><ROW><id>1553190</id><snippet>Python 2.5.1
&gt;&gt;&gt; import sqlite3
&gt;&gt;&gt; sqlite3.version
'2.3.2'
&gt;&gt;&gt; sqlite3.sqlite_version
'3.3.4'
</snippet></ROW><ROW><id>1553324</id><snippet>def cluster(dicts, key):
    current_value = None
    current_span = 0
    result = []

    for d in dicts:
        value = d[key]
        if current_value is None:
            current_value = value
        elif current_value != value:
            result.append({'colspan': current_span, key: current_value})
            current_value = value
            current_span = 0
        current_span += 1

    result.append({'colspan': current_span, key: current_value})
    return result

by_open = cluster(data, 'open')
by_serve = cluster(data, 'serve')
</snippet></ROW><ROW><id>1553324</id><snippet>itertools.groupby</snippet></ROW><ROW><id>1553324</id><snippet>import itertools
import operator

def make_spans(data, key):
    groups = itertools.groupby(data, operator.itemgetter(key))
    return [{'colspan': len(list(items)), key: value} for value, items in groups]
</snippet></ROW><ROW><id>1553447</id><snippet>str_len</snippet></ROW><ROW><id>1553447</id><snippet>send_data</snippet></ROW><ROW><id>1553447</id><snippet>%</snippet></ROW><ROW><id>1553478</id><snippet>collections.defaultdict</snippet></ROW><ROW><id>1553478</id><snippet>list</snippet></ROW><ROW><id>1553478</id><snippet>&gt;&gt;&gt; import collections
&gt;&gt;&gt; mydict = collections.defaultdict(list)
</snippet></ROW><ROW><id>1553478</id><snippet>.append(...)</snippet></ROW><ROW><id>1553478</id><snippet>append</snippet></ROW><ROW><id>1553478</id><snippet>defaultdict</snippet></ROW><ROW><id>1553478</id><snippet>likes</snippet></ROW><ROW><id>1553478</id><snippet>&gt;&gt;&gt; mydict = collections.defaultdict(list, likes)
</snippet></ROW><ROW><id>1553478</id><snippet>list</snippet></ROW><ROW><id>1553478</id><snippet>default_factory</snippet></ROW><ROW><id>1553478</id><snippet>defaultdict</snippet></ROW><ROW><id>1553697</id><snippet>escape()</snippet></ROW><ROW><id>1554303</id><snippet>cgi</snippet></ROW><ROW><id>1554303</id><snippet>cgi</snippet></ROW><ROW><id>1554303</id><snippet>cgi</snippet></ROW><ROW><id>1554303</id><snippet>wsgi</snippet></ROW><ROW><id>1554303</id><snippet>cherrypy.tools.sessions</snippet></ROW><ROW><id>1554303</id><snippet>import cherrypy

class HelloSessionWorld(object):
    @cherrypy.tools.sessions()
    def index(self):
        if 'data' in cherrypy.session:
            return "You have a cookie! It says: %r" % cherrypy.session['data']
        else:
            return "You don't have a cookie. &lt;a href='getcookie'&gt;Get one&lt;/a&gt;."
    index.exposed = True

    @cherrypy.tools.sessions()
    def getcookie(self):
        cherrypy.session['data'] = 'Hello World'
        return "Done. Please &lt;a href='..'&gt;return&lt;/a&gt; to see it"
    getcookie.exposed = True

application = cherrypy.tree.mount(HelloSessionWorld(), '/')

if __name__ == '__main__':
    cherrypy.quickstart(application)
</snippet></ROW><ROW><id>1554303</id><snippet>wsgi</snippet></ROW><ROW><id>1554303</id><snippet>wsgi</snippet></ROW><ROW><id>1554303</id><snippet>mod_wsgi</snippet></ROW><ROW><id>1554303</id><snippet>wsgi</snippet></ROW><ROW><id>1554303</id><snippet>http://localhost:8080/</snippet></ROW><ROW><id>1554837</id><snippet>MyModel.all().filter('prop &gt;=', prefix).filter('prop &lt;', prefix + u'\ufffd')
</snippet></ROW><ROW><id>1555001</id><snippet>  Input is used to get midi input from midi devices.
  Input(device_id)
  Input(device_id, buffer_size)
        Input.close - closes a midi stream, flushing any pending buffers.   closes a midi stream, flushing any pending buffers.
        Input.poll - returns true if there's data, or false if not. returns true if there's data, or false if not.
        Input.read - reads num_events midi events from the buffer.  reads num_events midi events from the buffer.
</snippet></ROW><ROW><id>1555138</id><snippet>WWW-Authenticate: Basic realm="the realm"
</snippet></ROW><ROW><id>1555169</id><snippet>x.getB()</snippet></ROW><ROW><id>1555169</id><snippet>b</snippet></ROW><ROW><id>1555169</id><snippet>x.setB(2)</snippet></ROW><ROW><id>1555169</id><snippet>x.getB()</snippet></ROW><ROW><id>1555169</id><snippet>2</snippet></ROW><ROW><id>1555169</id><snippet>get</snippet></ROW><ROW><id>1555169</id><snippet>set</snippet></ROW><ROW><id>1555169</id><snippet>x.b</snippet></ROW><ROW><id>1555169</id><snippet>x.b = 2</snippet></ROW><ROW><id>1555169</id><snippet>x.setB(x.getB() + 1)
</snippet></ROW><ROW><id>1555169</id><snippet>x.b += 1
</snippet></ROW><ROW><id>1555169</id><snippet>b</snippet></ROW><ROW><id>1555169</id><snippet>x</snippet></ROW><ROW><id>1555169</id><snippet>getThis</snippet></ROW><ROW><id>1555169</id><snippet>setThat</snippet></ROW><ROW><id>1555295</id><snippet>def handler(req):
   return app.run(apacheapp.Request(req))
</snippet></ROW><ROW><id>1555295</id><snippet> &lt;Directory "/var/www/auction-in-europe.com/aie"&gt;
   Order allow,deny
   Allow from all
   SetHandler python-program .py
   PythonHandler index ## or what ever the above file is called without the .py
   PythonDebug On   
  &lt;/Directory&gt;
</snippet></ROW><ROW><id>1555869</id><snippet>&amp;</snippet></ROW><ROW><id>1555869</id><snippet>&amp;</snippet></ROW><ROW><id>1555869</id><snippet>©</snippet></ROW><ROW><id>1555869</id><snippet>template.generate().render('html', doctype= 'html', encoding= 'us-ascii')
</snippet></ROW><ROW><id>1555869</id><snippet>©</snippet></ROW><ROW><id>1555869</id><snippet>©</snippet></ROW><ROW><id>1555941</id><snippet>LaunchServices</snippet></ROW><ROW><id>1555941</id><snippet>open</snippet></ROW><ROW><id>1555941</id><snippet>launch</snippet></ROW><ROW><id>1555941</id><snippet>open</snippet></ROW><ROW><id>1555941</id><snippet>% open -b org.mozilla.firefox http://www.stackoverflow.com/
</snippet></ROW><ROW><id>1555941</id><snippet>subprocess</snippet></ROW><ROW><id>1555991</id><snippet>&gt;&gt;&gt; x = {0: 5, 1: 7, 2: 0}
&gt;&gt;&gt; max(k for k, v in x.iteritems() if v != 0)
1
</snippet></ROW><ROW><id>1555991</id><snippet>!= 0</snippet></ROW><ROW><id>1556235</id><snippet>user_id = 142187
User.objects.filter(id=user_id).update(name='tom')
</snippet></ROW><ROW><id>1556403</id><snippet>from random import random

class WeightedChoice(object):
    def __init__(self, weights):
        """Pick items with weighted probabilities.

            weights
                a sequence of tuples of item and it's weight.
        """
        self._total_weight = 0.
        self._item_levels = []
        for item, weight in weights:
            self._total_weight += weight
            self._item_levels.append((self._total_weight, item))

    def pick(self):
        pick = self._total_weight * random()
        for level, item in self._item_levels:
            if level &gt;= pick:
                return item
</snippet></ROW><ROW><id>1556403</id><snippet>csv</snippet></ROW><ROW><id>1556403</id><snippet>WeightedChoice</snippet></ROW><ROW><id>1556403</id><snippet>import csv

weighed_items = [(item,float(weight)) for item,weight in csv.reader(open('file.csv'))]
picker = WeightedChoice(weighed_items)
print(picker.pick())
</snippet></ROW><ROW><id>1556482</id><snippet>ctypes.cast</snippet></ROW><ROW><id>1556482</id><snippet>&gt;&gt;&gt; import ctypes
&gt;&gt;&gt; c_long_p = ctypes.POINTER(ctypes.c_long)
&gt;&gt;&gt; some_long = ctypes.c_long(42)
&gt;&gt;&gt; ctypes.addressof(some_long)
4300833936
&gt;&gt;&gt; ctypes.cast(4300833936, c_long_p)
&lt;__main__.LP_c_long object at 0x1005983b0&gt;
&gt;&gt;&gt; ctypes.cast(4300833936, c_long_p).contents
c_long(42)
</snippet></ROW><ROW><id>1556509</id><snippet>import subprocess
import time
import sys

class Timeout(Exception):
    pass

def run(command, timeout=10):
    proc = subprocess.Popen(command, bufsize=0, stdout=subprocess.PIPE, stderr=subprocess.PIPE)
    poll_seconds = .250
    deadline = time.time()+timeout
    while time.time() &lt; deadline and proc.poll() == None:
        time.sleep(poll_seconds)

    if proc.poll() == None:
        if float(sys.version[:3]) &gt;= 2.6:
            proc.terminate()
        raise Timeout()

    stdout, stderr = proc.communicate()
    return stdout, stderr, proc.returncode

if __name__=="__main__":
    print run(["ls", "-l"])
    print run(["find", "/"], timeout=3) #should timeout
</snippet></ROW><ROW><id>1556570</id><snippet>{{ user.username|e }}
</snippet></ROW><ROW><id>1556570</id><snippet>|e</snippet></ROW><ROW><id>1556785</id><snippet>some_class_instance</snippet></ROW><ROW><id>1556785</id><snippet>SomeClass</snippet></ROW><ROW><id>1556785</id><snippet>SomeClass</snippet></ROW><ROW><id>1557364</id><snippet>shutil.rmtree</snippet></ROW><ROW><id>1557364</id><snippet>shutil.rmtree(path)
</snippet></ROW><ROW><id>1557584</id><snippet>import time
start_time = time.time()
main()
print time.time() - start_time, "seconds"
</snippet></ROW><ROW><id>1558045</id><snippet>asobj.properties()</snippet></ROW><ROW><id>1558074</id><snippet>.read(amount)</snippet></ROW><ROW><id>1558074</id><snippet>amount</snippet></ROW><ROW><id>1558074</id><snippet>urlopen</snippet></ROW><ROW><id>1559100</id><snippet>In [2]: unhexlify('dead').decode('latin1')
Out[2]: u'\xde\xad'
</snippet></ROW><ROW><id>1559149</id><snippet>p = multiprocessing.Process(target=write, args=('hello',))
</snippet></ROW><ROW><id>1559639</id><snippet>coverage run my_program.py
coverage report --omit=path/to/3rdparty
</snippet></ROW><ROW><id>1559652</id><snippet>func(**some_dict)</snippet></ROW><ROW><id>1559652</id><snippet>dict</snippet></ROW><ROW><id>1559652</id><snippet>some_dict is not kwargs</snippet></ROW><ROW><id>1559740</id><snippet>IUnknown</snippet></ROW><ROW><id>1559740</id><snippet>IOleObject</snippet></ROW><ROW><id>1559740</id><snippet>IOleLink</snippet></ROW><ROW><id>1559740</id><snippet>IViewObject2</snippet></ROW><ROW><id>1560735</id><snippet>cs.collections[0].get_paths()
</snippet></ROW><ROW><id>1561303</id><snippet>def reversed_iterator(iter):
    return reversed(list(iter))
</snippet></ROW><ROW><id>1562137</id><snippet>import tempfile
import win32api
import win32con
import win32security

f = tempfile.NamedTemporaryFile ()
FILENAME = f.name
try:
  sd = win32security.GetFileSecurity (FILENAME,win32security.OWNER_SECURITY_INFORMATION)
  owner_sid = sd.GetSecurityDescriptorOwner ()
  name, domain, type = win32security.LookupAccountSid (None, owner_sid)

  print "I am", win32api.GetUserNameEx (win32con.NameSamCompatible)
  print "File owned by %s\\%s" % (domain, name)
finally:
  f.close ()
</snippet></ROW><ROW><id>1562614</id><snippet>UserFavorite.get_by_name(user_id, parent=a_story)
</snippet></ROW><ROW><id>1562795</id><snippet>inspect.getsource</snippet></ROW><ROW><id>1562795</id><snippet>&gt;&gt;&gt; import re
&gt;&gt;&gt; import inspect
&gt;&gt;&gt; print inspect.getsource(re.compile)
def compile(pattern, flags=0):
    "Compile a regular expression pattern, returning a pattern object."
    return _compile(pattern, flags)
</snippet></ROW><ROW><id>1563100</id><snippet>None</snippet></ROW><ROW><id>1563100</id><snippet>return None</snippet></ROW><ROW><id>1563100</id><snippet>def t():
    if True:
        return 'ham'
</snippet></ROW><ROW><id>1563100</id><snippet>return</snippet></ROW><ROW><id>1563100</id><snippet>None</snippet></ROW><ROW><id>1563100</id><snippet>42</snippet></ROW><ROW><id>1563100</id><snippet>'spam'</snippet></ROW><ROW><id>1563100</id><snippet>list.sort</snippet></ROW><ROW><id>1563100</id><snippet>__init__</snippet></ROW><ROW><id>1563100</id><snippet>return None</snippet></ROW><ROW><id>1563100</id><snippet>__init__</snippet></ROW><ROW><id>1563592</id><snippet>  url(r'(?P&lt;slug&gt;[a-z1-3_]{1,})/$','cms.views.category_view', name="category-view")
</snippet></ROW><ROW><id>1563592</id><snippet>(?P&lt;slug&gt;[a-z1-3_]{1,})</snippet></ROW><ROW><id>1563592</id><snippet>cms.views.category_view</snippet></ROW><ROW><id>1563592</id><snippet>@render_to('category.html')
def category_view(request, slug):
    return {'cat':Category.objects.get(slug=slug)}
</snippet></ROW><ROW><id>1563592</id><snippet>render_to</snippet></ROW><ROW><id>1563592</id><snippet>render_to_response</snippet></ROW><ROW><id>1563685</id><snippet>mainfunc</snippet></ROW><ROW><id>1563685</id><snippet>KeySeq</snippet></ROW><ROW><id>1563685</id><snippet>def mainfunc(ks=KeySeq()):
   key = ks.next()
</snippet></ROW><ROW><id>1563685</id><snippet>ks</snippet></ROW><ROW><id>1563685</id><snippet>mainfunc</snippet></ROW><ROW><id>1563685</id><snippet>KeySeq</snippet></ROW><ROW><id>1563685</id><snippet>func_defaults</snippet></ROW><ROW><id>1563685</id><snippet>func_defaults</snippet></ROW><ROW><id>1563685</id><snippet>mainfunc</snippet></ROW><ROW><id>1563685</id><snippet>ks</snippet></ROW><ROW><id>1563685</id><snippet>KeySeq()</snippet></ROW><ROW><id>1563685</id><snippet>func_defaults</snippet></ROW><ROW><id>1563685</id><snippet>mainfunc</snippet></ROW><ROW><id>1563685</id><snippet>KeySeq</snippet></ROW><ROW><id>1563685</id><snippet>mainfunc</snippet></ROW><ROW><id>1563685</id><snippet>submit</snippet></ROW><ROW><id>1563685</id><snippet>g</snippet></ROW><ROW><id>1563685</id><snippet>&gt;&gt;&gt; def f():
        def g(x=[]):
            return x
        return g
&gt;&gt;&gt; g1 = f()
&gt;&gt;&gt; g2 = f()
&gt;&gt;&gt; g1().append('a')
&gt;&gt;&gt; g2().append('b')
&gt;&gt;&gt; g1()
['a']
&gt;&gt;&gt; g2()
['b']
</snippet></ROW><ROW><id>1563685</id><snippet>g()</snippet></ROW><ROW><id>1563685</id><snippet>func_defaults</snippet></ROW><ROW><id>1563685</id><snippet>g1</snippet></ROW><ROW><id>1563685</id><snippet>g2</snippet></ROW><ROW><id>1563685</id><snippet>g</snippet></ROW><ROW><id>1563685</id><snippet>x</snippet></ROW><ROW><id>1563685</id><snippet>callback.py</snippet></ROW><ROW><id>1563685</id><snippet>Sum</snippet></ROW><ROW><id>1563901</id><snippet>len(table)</snippet></ROW><ROW><id>1563901</id><snippet>sum(column)</snippet></ROW><ROW><id>1563901</id><snippet>column.sum()</snippet></ROW><ROW><id>1563901</id><snippet>c</snippet></ROW><ROW><id>1563901</id><snippet>column</snippet></ROW><ROW><id>1563916</id><snippet>unicode_csv_reader(open(familynamelist))</snippet></ROW><ROW><id>1563916</id><snippet>def encoded_csv_reader_to_unicode(encoded_csv_data,
                                  coding='utf-8',
                                  dialect=csv.excel,
                                  **kwargs):
  csv_reader = csv.reader(encoded_csv_data,
                          dialect=dialect,
                          **kwargs)
  for row in csv_reader:
      yield [unicode(cell, coding) for cell in row]
</snippet></ROW><ROW><id>1563916</id><snippet>encoded_csv_reader_to_unicode(open(familynamelist))</snippet></ROW><ROW><id>1564041</id><snippet>np.rec.fromrecords(tab)

rec.array([('a', 1), ('b', 2)], 
          dtype=[('f0', '|S1'), ('f1', '&lt;i4')])
</snippet></ROW><ROW><id>1564786</id><snippet>Queue</snippet></ROW><ROW><id>1564786</id><snippet>def join_with_timeout(self, timeout):
    self.all_tasks_done.acquire()
    try:
        endtime = time() + timeout
        while self.unfinished_tasks:
            remaining = endtime - time()
            if remaining &lt;= 0.0:
                raise NotFinished
            self.all_tasks_done.wait(remaining)
    finally:
        self.all_tasks_done.release()
</snippet></ROW><ROW><id>1565090</id><snippet>category</snippet></ROW><ROW><id>1565090</id><snippet>set</snippet></ROW><ROW><id>1565090</id><snippet>category</snippet></ROW><ROW><id>1565090</id><snippet>loop()</snippet></ROW><ROW><id>1565090</id><snippet>__iter__()</snippet></ROW><ROW><id>1565090</id><snippet>self.items.iteritems()</snippet></ROW><ROW><id>1565090</id><snippet>&lt;saved_data&gt;
{% for key, item in category recursive %}
        {% if item.children %}
                &lt;category name="{{key}}"&gt;
                        {{ loop(item) }}
                &lt;/category&gt;
        {% else %}
                &lt;item name="{{ key }}" value="{{ item }}" /&gt;
        {% endif %}
{% endfor %}
&lt;/saved_data&gt;
</snippet></ROW><ROW><id>1565105</id><snippet>max_value = max(set(firstArray) - set(secondArray))
</snippet></ROW><ROW><id>1565448</id><snippet>__new__</snippet></ROW><ROW><id>1565448</id><snippet>object.__new__(cls[, ...])</snippet></ROW><ROW><id>1565448</id><snippet>cls.__new__()</snippet></ROW><ROW><id>1565448</id><snippet>__new__()</snippet></ROW><ROW><id>1565448</id><snippet>cls</snippet></ROW><ROW><id>1565448</id><snippet>__new__()</snippet></ROW><ROW><id>1565448</id><snippet>super(currentclass, cls).__new__(cls[,
  ...])</snippet></ROW><ROW><id>1565448</id><snippet>__new__()</snippet></ROW><ROW><id>1565448</id><snippet>cls</snippet></ROW><ROW><id>1565448</id><snippet>__init__()</snippet></ROW><ROW><id>1565448</id><snippet>__init__(self[, ...])</snippet></ROW><ROW><id>1565448</id><snippet>__new__()</snippet></ROW><ROW><id>1565448</id><snippet>__new__()</snippet></ROW><ROW><id>1565448</id><snippet>cls</snippet></ROW><ROW><id>1565448</id><snippet>__init__()</snippet></ROW><ROW><id>1565448</id><snippet>__new__()</snippet></ROW><ROW><id>1565448</id><snippet>int</snippet></ROW><ROW><id>1565448</id><snippet>str</snippet></ROW><ROW><id>1565448</id><snippet>tuple</snippet></ROW><ROW><id>1565603</id><snippet>In [1]: import sys,csv

In [2]: csv.writer(sys.stdout).writerow(['one", f"', 'two', 'three'])  
"one"", f""",two,three

In [3]: csv.reader(['"one"", f""",two,three']).next()  
Out[3]: ['one", f"', 'two', 'three']
</snippet></ROW><ROW><id>1566114</id><snippet>set_target_properties(foo PROPERTIES PREFIX "")
</snippet></ROW><ROW><id>1566168</id><snippet>In [1]: import numpy as np

In [2]: np.float(7.0/8)
Out[2]: 0.875

In [3]: np.float96(7.0/8)
Out[3]: 0.875
</snippet></ROW><ROW><id>1566168</id><snippet>In [2]: np.float96(7.0/8)
Out[2]: -2.6815615859885194e+154
</snippet></ROW><ROW><id>1566168</id><snippet>In [2]: np.float96(7.0/8)
Out[2]: 0.875
</snippet></ROW><ROW><id>1566911</id><snippet>def myfunc(param1, param2, param3):
    dict_param = locals()
</snippet></ROW><ROW><id>1567300</id><snippet>{% for i in a %}
    {% set outer_loop = loop %}
    {% for j in a %}
        {{ outer_loop.index }}
    {% endfor %}
{% endfor %}
</snippet></ROW><ROW><id>1567417</id><snippet>BeautifulStoneSoup</snippet></ROW><ROW><id>1567417</id><snippet>BeautifulStoneSoup</snippet></ROW><ROW><id>1567417</id><snippet>selfClosingTags</snippet></ROW><ROW><id>1567630</id><snippet>float</snippet></ROW><ROW><id>1567630</id><snippet>&gt;&gt;&gt; class prettyfloat(float):
    def __repr__(self):
        return "%0.2f" % self

&gt;&gt;&gt; x
[1.290192, 3.0002, 22.119199999999999, 3.4110999999999998]
&gt;&gt;&gt; x = map(prettyfloat, x)
&gt;&gt;&gt; x
[1.29, 3.00, 22.12, 3.41]
&gt;&gt;&gt; y = x[2]
&gt;&gt;&gt; y
22.12
</snippet></ROW><ROW><id>1567630</id><snippet>float</snippet></ROW><ROW><id>1567630</id><snippet>x = map(float, x)</snippet></ROW><ROW><id>1567630</id><snippet>prettyfloat</snippet></ROW><ROW><id>1567630</id><snippet>float.__repr__</snippet></ROW><ROW><id>1567630</id><snippet>float</snippet></ROW><ROW><id>1567630</id><snippet>float</snippet></ROW><ROW><id>1567630</id><snippet>map(f, x)</snippet></ROW><ROW><id>1567630</id><snippet>[f(n) for n in x]</snippet></ROW><ROW><id>1567664</id><snippet>&gt;&gt;&gt; a = 'asdfghjklmn'
&gt;&gt;&gt; a[:len(a)//3*3]
'asdfghjkl'   
&gt;&gt;&gt; len(a)
11
&gt;&gt;&gt; len(a[:len(a)//3*3])
9
</snippet></ROW><ROW><id>1567664</id><snippet>n//k*k</snippet></ROW><ROW><id>1567820</id><snippet>def __init__(self, *args, **kwargs):
    super(Fruit, self).__init__(*args, **kwargs)

    # The attribute name was changed in Python 3; pick whichever line matches
    # your Python version.
    callback = self.print_callback.im_func  # Python 2
    callback = self.print_callback.__func__ # Python 3

    callback("Message from Fruit: ")
</snippet></ROW><ROW><id>1567932</id><snippet>&gt;&gt;&gt; root = etree.XML('&lt;root&gt;&lt;a&gt;&lt;b/&gt;&lt;/a&gt;&lt;/root&gt;')

&gt;&gt;&gt; etree.tostring(root)
b'&lt;root&gt;&lt;a&gt;&lt;b/&gt;&lt;/a&gt;&lt;/root&gt;'

&gt;&gt;&gt; print(etree.tostring(root, xml_declaration=True))
&lt;?xml version='1.0' encoding='ASCII'?&gt;
&lt;root&gt;&lt;a&gt;&lt;b/&gt;&lt;/a&gt;&lt;/root&gt;

&gt;&gt;&gt; print(etree.tostring(root, encoding='iso-8859-1'))
&lt;?xml version='1.0' encoding='iso-8859-1'?&gt;
&lt;root&gt;&lt;a&gt;&lt;b/&gt;&lt;/a&gt;&lt;/root&gt;

&gt;&gt;&gt; print(etree.tostring(root, pretty_print=True))
&lt;root&gt;
  &lt;a&gt;
    &lt;b/&gt;
  &lt;/a&gt;
&lt;/root&gt;
</snippet></ROW><ROW><id>1568650</id><snippet>sys.modules[MyCls.__module__].__file__
</snippet></ROW><ROW><id>1568650</id><snippet>inspect.getsourcefile(MyCls)
</snippet></ROW><ROW><id>1568650</id><snippet>__xxx__</snippet></ROW><ROW><id>1568882</id><snippet>
In [1]: import rfc822     # This only works for python 2 series

In [2]: rfc822.parsedate_tz('Sun, 09 Mar 1997 13:45:00 -0500')
Out[2]: (1997, 3, 9, 13, 45, 0, 0, 1, 0, -18000)
</snippet></ROW><ROW><id>1568882</id><snippet>
&gt;&gt;&gt; import email.utils   # this works on Python2.5 and up
&gt;&gt;&gt; email.utils.parsedate_tz('Sun, 09 Mar 1997 13:45:00 -0500')
(1997, 3, 9, 13, 45, 0, 0, 1, -1, -18000)
</snippet></ROW><ROW><id>1569137</id><snippet>str</snippet></ROW><ROW><id>1569137</id><snippet>unicode</snippet></ROW><ROW><id>1569137</id><snippet>xml_doc = libxml2.parseDoc(DOC.encode("UTF-8"))
</snippet></ROW><ROW><id>1569137</id><snippet>site.setencoding</snippet></ROW><ROW><id>1569137</id><snippet>unicode</snippet></ROW><ROW><id>1569137</id><snippet>locale</snippet></ROW><ROW><id>1569257</id><snippet>urllib2</snippet></ROW><ROW><id>1569257</id><snippet>import urllib2, cookielib
jar = cookielib.CookieJar()
opener = urllib2.build_opener(urllib2.HTTPCookieProcessor(jar))
</snippet></ROW><ROW><id>1569257</id><snippet>content = opener.open(urllib2.Request(
    "http://social.netwo.rk/login",
    "user=foo&amp;pass=bar")
).read()
</snippet></ROW><ROW><id>1569257</id><snippet>.add_header</snippet></ROW><ROW><id>1569263</id><snippet>not(user)</snippet></ROW><ROW><id>1569263</id><snippet>user = s.query(User).filter("...some filter here...").first()
</snippet></ROW><ROW><id>1569331</id><snippet>[pypi]
username:dcramer
password:*******
</snippet></ROW><ROW><id>1569331</id><snippet>[server-login]
username:dcramer
password:********
</snippet></ROW><ROW><id>1569827</id><snippet>__init__.py</snippet></ROW><ROW><id>1569827</id><snippet>from project.utils.tools import get_related

def get_preview():
     # ...
</snippet></ROW><ROW><id>1569827</id><snippet>tools.py</snippet></ROW><ROW><id>1569827</id><snippet>def get_related():
    from project.utils import get_preview
    # ...
    get_preview()
</snippet></ROW><ROW><id>1569882</id><snippet>(?P&lt;name_slug&gt;\w+)
</snippet></ROW><ROW><id>1569882</id><snippet>[\w-]+</snippet></ROW><ROW><id>1570244</id><snippet>StringIO</snippet></ROW><ROW><id>1570244</id><snippet>&gt;&gt;&gt; import StringIO
&gt;&gt;&gt; f = StringIO.StringIO("foo")
&gt;&gt;&gt; f.read()
'foo'
</snippet></ROW><ROW><id>1570244</id><snippet>cStringIO</snippet></ROW><ROW><id>1570501</id><snippet>apt-get install libpng-dev</snippet></ROW><ROW><id>1571104</id><snippet>#!/System/Library/Frameworks/Python.framework/Versions/2.6/Resources/Python.app/Contents/MacOS/Python
import sys
sys.argv[0] = sys.argv[0].replace('-2.6', '')
# EASY-INSTALL-ENTRY-SCRIPT: 'setuptools==0.6c9','console_scripts','easy_install'
__requires__ = 'setuptools==0.6c9'
import sys
from pkg_resources import load_entry_point

sys.exit(
   load_entry_point('setuptools==0.6c9', 'console_scripts', 'easy_install')()
)
</snippet></ROW><ROW><id>1571104</id><snippet>#!/sw/bin/python23
</snippet></ROW><ROW><id>1571104</id><snippet>sys.argv[0] = sys.argv[0].replace('-2.3', '')
</snippet></ROW><ROW><id>1571104</id><snippet>$ python23 /some/path/easy_install networkx-0.36-py2.5.egg
</snippet></ROW><ROW><id>1571593</id><snippet>title</snippet></ROW><ROW><id>1571593</id><snippet>body</snippet></ROW><ROW><id>1571593</id><snippet>MyModel</snippet></ROW><ROW><id>1571593</id><snippet># create instance of model
m = MyModel(**data_dict)
# don't forget to save to database!
m.save()
</snippet></ROW><ROW><id>1571593</id><snippet>extra</snippet></ROW><ROW><id>1571593</id><snippet>extra2</snippet></ROW><ROW><id>1571593</id><snippet>m2 =MyModel(extra='hello', extra2='world', **data_dict)
m2.save()
</snippet></ROW><ROW><id>1571664</id><snippet>';'.join(encode(i) for i in message.split('.'))
</snippet></ROW><ROW><id>1571664</id><snippet>';'.join(encode(i) for i in result)
</snippet></ROW><ROW><id>1571664</id><snippet>split16</snippet></ROW><ROW><id>1571813</id><snippet>find</snippet></ROW><ROW><id>1571813</id><snippet>node = p.find('div', text="Content I Want")
</snippet></ROW><ROW><id>1571813</id><snippet>xml = """&lt;div id="top"&gt;&lt;div&gt;Content&lt;/div&gt;&lt;div&gt;&lt;div&gt;Content I Want&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;"""
from BeautifulSoup import BeautifulSoup
p = BeautifulSoup(xml)

# returns a list of texts
print p.div.div.findNextSibling().div.contents
# returns a list of texts
print p.div.div.findNextSibling().div(text=True)
# join (and strip) the values
print ''.join(s.strip() for s in p.div.div.findNextSibling().div(text=True))
</snippet></ROW><ROW><id>1572352</id><snippet>import os, subprocess
myenv = {}
myenv.update(os.environ)
myenv['TEST1'] = ""
myenv['TEST2'] = "karthik"
subprocess.Popen(('cmd', '/c', 'test.bat'), stdout=file("test.bat.output.python", 'w'),
                 env=myenv).wait()
</snippet></ROW><ROW><id>1572737</id><snippet>for</snippet></ROW><ROW><id>1572737</id><snippet>numChicks</snippet></ROW><ROW><id>1572737</id><snippet>0</snippet></ROW><ROW><id>1572737</id><snippet>solve</snippet></ROW><ROW><id>1572737</id><snippet>return</snippet></ROW><ROW><id>1572737</id><snippet>yield</snippet></ROW><ROW><id>1572737</id><snippet>solve</snippet></ROW><ROW><id>1572737</id><snippet>def solve(numLegs, numHeads):
     for numBees in range(0, numHeads + 1):
             for numChicks in range(0, numHeads - numBees + 1):
                     numPigs = numHeads - numChicks - numBees
                     totLegs = 4*numPigs + 2*numChicks + 6*numBees 
                     if totLegs == numLegs:
                             yield [numPigs, numChicks, numBees]

def barnYard(heads, legs):
    for pigs, chickens, bees in solve(legs, heads):
             print 'Number of pigs: ', pigs
             print 'Number of chickens: ', chickens
             print 'Number of bees: ', bees

barnYard(20,56)
</snippet></ROW><ROW><id>1572737</id><snippet>Number of pigs:  8
Number of chickens:  12
Number of bees:  0

Number of pigs:  6
Number of chickens:  13
Number of bees:  1

Number of pigs:  4
Number of chickens:  14
Number of bees:  2

Number of pigs:  2
Number of chickens:  15
Number of bees:  3

Number of pigs:  0
Number of chickens:  16
Number of bees:  4
</snippet></ROW><ROW><id>1572966</id><snippet>newImage = Image.new(mode, (newWidth,newHeight))
newImage.paste(srcImage, (x1,y1,x1+oldWidth,y1+oldHeight))
</snippet></ROW><ROW><id>1573088</id><snippet>site-packages</snippet></ROW><ROW><id>1573088</id><snippet>jebootstrap.py</snippet></ROW><ROW><id>1573088</id><snippet>import os, sys

def relative_dir(apath):
  return os.path.realpath(
      os.path.join(os.path.dirname(apath),
      '../../../Path/To/Shared/Code'))

def addpack(apath):
  relative = relative_dir(apath)
  if relative not in sys.path:
    sys.path.append(relative)
</snippet></ROW><ROW><id>1573088</id><snippet>import jebootstrap
jebootsrap.addpack(__file__)
</snippet></ROW><ROW><id>1573115</id><snippet>&gt;&gt;&gt; L = [2.32313e+07, 2.1155e+07, 1.923e+07, 11856, 112.32]
&gt;&gt;&gt; for x in L: print '%f' % x
... 
23231300.000000
21155000.000000
19230000.000000
11856.000000
112.320000
</snippet></ROW><ROW><id>1573115</id><snippet>.format</snippet></ROW><ROW><id>1573115</id><snippet>%f</snippet></ROW><ROW><id>1573555</id><snippet>def f():
    pass # first line
    pass # second line
pass # &lt;-- less indentation, not part of function f.
</snippet></ROW><ROW><id>1573555</id><snippet>def f(): pass
</snippet></ROW><ROW><id>1573555</id><snippet>def f(): pass; pass
</snippet></ROW><ROW><id>1573555</id><snippet>return</snippet></ROW><ROW><id>1573555</id><snippet>yield</snippet></ROW><ROW><id>1573555</id><snippet>return</snippet></ROW><ROW><id>1573555</id><snippet>return None</snippet></ROW><ROW><id>1573555</id><snippet>return</snippet></ROW><ROW><id>1573555</id><snippet>None</snippet></ROW><ROW><id>1573555</id><snippet>None</snippet></ROW><ROW><id>1573555</id><snippet>def f():
    pass
</snippet></ROW><ROW><id>1573555</id><snippet>def f():
    42
</snippet></ROW><ROW><id>1574082</id><snippet>SELECT theTable.*
FROM theTable
INNER JOIN (
  SELECT link, size
  FROM theTable 
  GROUP BY link, size
  HAVING count(ID) &gt; 1
) dups ON theTable.link = dups.link AND theTable.size = dups.size
</snippet></ROW><ROW><id>1574082</id><snippet>SELECT theTable.*
FROM theTable
INNER JOIN (
  SELECT link, size, max(ID) as maxID
  FROM theTable 
  GROUP BY link, size
  HAVING count(ID) &gt; 1
) dups ON theTable.link = dups.link 
          AND theTable.size = dups.size 
          AND theTable.ID &lt;&gt; dups.maxID
</snippet></ROW><ROW><id>1574146</id><snippet>datetime</snippet></ROW><ROW><id>1574146</id><snippet>datetime.strptime</snippet></ROW><ROW><id>1574146</id><snippet>date2num</snippet></ROW><ROW><id>1574146</id><snippet>plot_date</snippet></ROW><ROW><id>1574146</id><snippet>dates = matplotlib.dates.date2num(list_of_datetimes)
plot_date(dates, values)
</snippet></ROW><ROW><id>1574542</id><snippet>if</snippet></ROW><ROW><id>1574542</id><snippet>if</snippet></ROW><ROW><id>1574542</id><snippet>print</snippet></ROW><ROW><id>1574542</id><snippet>from __future__ import print_function
</snippet></ROW><ROW><id>1574542</id><snippet>&gt;&gt;&gt; print 'test'
test
&gt;&gt;&gt; from __future__ import print_function
&gt;&gt;&gt; print 'test'
  File "&lt;stdin&gt;", line 1
    print 'test'
               ^
SyntaxError: invalid syntax
&gt;&gt;&gt; print('test')
test
</snippet></ROW><ROW><id>1574542</id><snippet>__future__</snippet></ROW><ROW><id>1574718</id><snippet>test = '8743-12083-15'
lst_int = [int(x) for x in test.split("-")]
</snippet></ROW><ROW><id>1574718</id><snippet>def v1():
 return [int(x) for x in '8743-12083-15'.split('-')]

def v2():
 return map(int, '8743-12083-15'.split('-'))

import timeit
print "v1", timeit.Timer('v1()', 'from __main__ import v1').timeit(500000)
print "v2", timeit.Timer('v2()', 'from __main__ import v2').timeit(500000)

&gt; output v1 3.73336911201 
&gt; output v2 3.44717001915
</snippet></ROW><ROW><id>1574755</id><snippet>WeakKeyDictionary</snippet></ROW><ROW><id>1574755</id><snippet>Monitor</snippet></ROW><ROW><id>1574755</id><snippet>from weakref import WeakKeyDictionary
from cPickle import dumps

class Monitor():
    def __init__(self):
        self.objects = WeakKeyDictionary()
    def is_changed(self, obj):
        current_pickle = dumps(obj, -1)
        changed = False
        if obj in self.objects:
            changed = current_pickle != self.objects[obj]
        self.objects[obj] = current_pickle
        return changed

class MyObject():
    def __init__(self):
        self.i = 1
    def change_somehow(self):
        self.i += 1
</snippet></ROW><ROW><id>1574755</id><snippet>object1 = MyObject()
monitor = Monitor()
print monitor.is_changed(object1)
object1.change_somehow()
print monitor.is_changed(object1)
print monitor.is_changed(object1)
</snippet></ROW><ROW><id>1574755</id><snippet>False
True
False
</snippet></ROW><ROW><id>1575581</id><snippet>__del__</snippet></ROW><ROW><id>1575581</id><snippet>__del__</snippet></ROW><ROW><id>1575786</id><snippet>from PIL import Image

def get_num_pixels(filepath):
    width, height = Image.open(open(filepath)).size
    return width*height

print get_num_pixels("/path/to/my/file.jpg")
</snippet></ROW><ROW><id>1575790</id><snippet>timedelta.seconds</snippet></ROW><ROW><id>1575790</id><snippet>seconds</snippet></ROW><ROW><id>1575790</id><snippet>days</snippet></ROW><ROW><id>1575790</id><snippet>milliseconds</snippet></ROW><ROW><id>1575790</id><snippet>delta = datetime.datetime(2008,11,7,10,5,14)-datetime.datetime(2008,11,6,9,30,16)
delta.seconds + delta.days*86400
</snippet></ROW><ROW><id>1575953</id><snippet>def isfileok(filename):
  f = open(filename)
  for line in f:
    pieces = line.split('\t')
    if len(pieces) != 8:
      return False
    if not pieces[3].isdigit():
      return False
  return True
</snippet></ROW><ROW><id>1575953</id><snippet>[3]</snippet></ROW><ROW><id>1576115</id><snippet>multiprocessing</snippet></ROW><ROW><id>1576115</id><snippet>threading</snippet></ROW><ROW><id>1576115</id><snippet>numpy</snippet></ROW><ROW><id>1576622</id><snippet>if condition:
   do_something()
IF THE PREVIOUS CONDITION WAS FALSE:
   do_something_else()
</snippet></ROW><ROW><id>1576622</id><snippet>try:
   do_something()
IF THERE WAS AN EXCEPTION:
   pass:
IF THE PREVIOUS CONDITION WAS FALSE:
   do_something_else()
finally:
   cleanup()
</snippet></ROW><ROW><id>1576622</id><snippet>IF some_iterator IS NOT EMPTY:
   i = next(some_iterator)
   print(i)
IF THE PREVIOUS CONDITION WAS FALSE:
   print("Iterator is empty!")
</snippet></ROW><ROW><id>1576622</id><snippet>try:
   do_something()
except someException:
   pass:
IF NO EXCEPTION:
   do_something_else()
finally:
   cleanup()
</snippet></ROW><ROW><id>1576622</id><snippet>for i in some_iterator:
   print(i)
IF NO MORE ITERATING:
   print("Iterator is empty!")
</snippet></ROW><ROW><id>1576622</id><snippet>if condition:
   do_something()
elif otherconditaion:
   do_anotherthing()
IF NO CONDITION WAS TRUE:
   do_something_else()
</snippet></ROW><ROW><id>1576759</id><snippet>diff_prettyHtml()</snippet></ROW><ROW><id>1576812</id><snippet>_</snippet></ROW><ROW><id>1576812</id><snippet>*</snippet></ROW><ROW><id>1576812</id><snippet>\w</snippet></ROW><ROW><id>1576812</id><snippet>^</snippet></ROW><ROW><id>1576812</id><snippet>$</snippet></ROW><ROW><id>1576812</id><snippet>[]</snippet></ROW><ROW><id>1576812</id><snippet>r</snippet></ROW><ROW><id>1576812</id><snippet>*</snippet></ROW><ROW><id>1577001</id><snippet>?</snippet></ROW><ROW><id>1577001</id><snippet>{0,1}</snippet></ROW><ROW><id>1577001</id><snippet>?:</snippet></ROW><ROW><id>1577001</id><snippet>(?:X)</snippet></ROW><ROW><id>1577001</id><snippet>.(.).(.)</snippet></ROW><ROW><id>1577001</id><snippet>.(?:.).(.)</snippet></ROW><ROW><id>1577001</id><snippet>(?:.)</snippet></ROW><ROW><id>1577001</id><snippet>import re
m = re.search('.(.).(.)', '1234')
print m.group(1)
print m.group(2)
# output:
# 2
# 4

m = re.search('.(?:.).(.)', '1234')
print m.group(1)
# output:
# 4
</snippet></ROW><ROW><id>1577001</id><snippet>www\.google\.com|www\.yahoo\.com</snippet></ROW><ROW><id>1577001</id><snippet>www\.(google|yahoo)\.com</snippet></ROW><ROW><id>1577001</id><snippet>www\.(?:google|yahoo)\.com</snippet></ROW><ROW><id>1577038</id><snippet>def fun1(a):
    for i in range(len(a)):
        a[i] = a[i] * a[i]
    return a

test1 = [1,2,3,4,5]
print 'Original list', test1
test2 = fun1(test1)
print 'Result', test2
print 'Original list', test1
</snippet></ROW><ROW><id>1577038</id><snippet>Original list [1, 2, 3, 4, 5]
Result [1, 4, 9, 16, 25]
Original list [1, 4, 9, 16, 25]
</snippet></ROW><ROW><id>1577370</id><snippet>pdf90</snippet></ROW><ROW><id>1577498</id><snippet>import cStringIO
from lxml import etree

f = cStringIO.StringIO('&lt;foo&gt;&lt;bar&gt;&lt;x1&gt;hello&lt;/x1&gt;&lt;x1&gt;world&lt;/x1&gt;&lt;/bar&gt;&lt;/foo&gt;')
tree = lxml.etree.parse(f)
find_text = etree.XPath("//text()")

# and print out the required data
print [tree.getpath( text.getparent()) for text in find_text(tree)]

# answer I get is 
&gt;&gt;&gt; ['/foo/bar/x1[1]', '/foo/bar/x1[2]']
</snippet></ROW><ROW><id>1577626</id><snippet>&gt;&gt;&gt; def weekdays_between(s, e):
...     return [n % 7 for n in range(s, e + (1 if e &gt; s else 8))]
... 
&gt;&gt;&gt; weekdays_between(2, 4)
[2, 3, 4]
&gt;&gt;&gt; weekdays_between(5, 1)
[5, 6, 0, 1]
</snippet></ROW><ROW><id>1577626</id><snippet>&gt;&gt;&gt; days = 'Mon Tue Wed Thu Fri Sat Sun'.split()
&gt;&gt;&gt; days_1 = {d: n for n, d in enumerate(days)}
&gt;&gt;&gt; def weekdays_between(s, e): 
...     s, e = days_1[s], days_1[e]
...     return [days[n % 7] for n in range(s, e + (1 if e &gt; s else 8))]
... 
&gt;&gt;&gt; weekdays_between('Wed', 'Fri')
['Wed', 'Thu', 'Fri']
&gt;&gt;&gt; weekdays_between('Sat', 'Tue')
['Sat', 'Sun', 'Mon', 'Tue']
</snippet></ROW><ROW><id>1577897</id><snippet>import lxml.etree

html = '&lt;div&gt;&lt;br /&gt;Hello text&lt;/div&gt;'
doc = lxml.etree.fromstring(html)
text = doc.xpath('//text()')[0]
print lxml.etree.tostring(text.getparent())
</snippet></ROW><ROW><id>1577897</id><snippet>&lt;br/&gt;Hello text
</snippet></ROW><ROW><id>1577897</id><snippet>lxml</snippet></ROW><ROW><id>1577897</id><snippet>tail</snippet></ROW><ROW><id>1577897</id><snippet>&gt;&gt;&gt; print text.text
None
&gt;&gt;&gt; print text.tail
Hello text
</snippet></ROW><ROW><id>1578117</id><snippet>settings.py</snippet></ROW><ROW><id>1578283</id><snippet>from PyObjCTools import AppHelper
AppHelper.runEventLoop()
</snippet></ROW><ROW><id>1578283</id><snippet>AppHelper</snippet></ROW><ROW><id>1578283</id><snippet>NSApplicationMain</snippet></ROW><ROW><id>1578283</id><snippet>setup.py</snippet></ROW><ROW><id>1578283</id><snippet>py2app</snippet></ROW><ROW><id>1578283</id><snippet>from distutils.core import setup
import py2app
plist = dict(
    NSPrincipalClass='SillyBalls',
)
setup(
    plugin=['SillyBalls.py'],
    data_files=['English.lproj'],
    options=dict(py2app=dict(
        extension='.saver',
        plist=plist,
    )),
)
</snippet></ROW><ROW><id>1578800</id><snippet>tearDown</snippet></ROW><ROW><id>1578800</id><snippet>class Singleton:
   ...
   def _drop(self):
   "Drop the instance (for testing purposes)."
   Singleton.__instance = None
   del self._Singleton__instance
</snippet></ROW><ROW><id>1578800</id><snippet>_drop</snippet></ROW><ROW><id>1578875</id><snippet>_validate_b(self, b)</snippet></ROW><ROW><id>1579401</id><snippet>class ThreadedTCPServer(SocketServer.ThreadingMixIn, SocketServer.TCPServer):
    pass
</snippet></ROW><ROW><id>1579401</id><snippet>ss.py SERVER localhost 8001
</snippet></ROW><ROW><id>1579401</id><snippet>ss.py localhost 8001
</snippet></ROW><ROW><id>1579401</id><snippet>    while 1:
        if recver.getStatus():
            sender.setStatus(True)
            self.server.shutdown()
            break
</snippet></ROW><ROW><id>1579513</id><snippet>#!/usr/bin/env python
import unittest
import sys
import os

unit_dir = sys.argv[1] if len(sys.argv) &gt; 1 else '.'
os.chdir(unit_dir)
suite = unittest.TestSuite()
for filename in os.listdir('.'):
    if filename.endswith('.py') and filename.startswith('test_'):
        modname = filename[:-2]
        module = __import__(modname)
        suite.addTest(unittest.TestLoader().loadTestsFromModule(module))

unittest.TextTestRunner(verbosity=2).run(suite)
</snippet></ROW><ROW><id>1579513</id><snippet>testsuite.py UnitTests
</snippet></ROW><ROW><id>1579608</id><snippet>#!/usr/bin/env python
import numpy as np
import datetime
r=np.array([(datetime.date(2000,1,1),0,1),
            (datetime.date(2000,1,1),1,1),
            (datetime.date(2000,1,1),1,0),
            (datetime.date(2000,1,1),0,0),                        
            ])
r=r[r[:,1:].any(axis=1)]
print(r)
# [[2000-01-01 0 1]
#  [2000-01-01 1 1]
#  [2000-01-01 1 0]
</snippet></ROW><ROW><id>1579733</id><snippet>from BeautifulSoup import BeautifulSoup
from os.path import basename, splitext
soup = BeautifulSoup(my_html_string)
for img in soup.findAll('img')
    img['src'] = 'cid:' + splitext(basename(img['src']))[0]
my_html_string = str(soup)
</snippet></ROW><ROW><id>1579799</id><snippet>def time_offsets(files, offset):

   files = sorted(files, key=lambda x:x.timestamp)

   group = []   
   timestamp = 0

   for f in files:
      if f.timestamp &lt; timestamp + offset:
         group.append(f)
      else:
         yield group
         timestamp = f.timestamp
         group = [timestamp]
   else:
      yield group

# Now you can do this...
for group in time_offsets(files, 86400):
   print group
</snippet></ROW><ROW><id>1579799</id><snippet>class File:
   def __init__(self, timestamp):
      self.timestamp = timestamp

   def __repr__(self):
      return "File: &lt;%d&gt;" % self.timestamp

def gen_files(num=100):
   import random
   files = []
   for i in range(num):
      timestamp = random.randint(0,1000000)
      files.append(File(timestamp))

   return files


def time_offsets(files, offset):

   files = sorted(files, key=lambda x:x.timestamp)

   group = []   
   timestamp = 0

   for f in files:
      if f.timestamp &lt; timestamp + offset:
         group.append(f)
      else:
         yield group
         timestamp = f.timestamp
         group = [timestamp]
   else:
      yield group

# Now you can do this to group files by day (assuming timestamp in seconds)
files = gen_files()
for group in time_offsets(files, 86400):
   print group
</snippet></ROW><ROW><id>1579941</id><snippet>bitarray</snippet></ROW><ROW><id>1579941</id><snippet>array</snippet></ROW><ROW><id>1580211</id><snippet>raw_input()</snippet></ROW><ROW><id>1580211</id><snippet>input()</snippet></ROW><ROW><id>1580211</id><snippet>import random
a=0
final=0
working=0

rolls = int(raw_input("How many dice do you want to roll? "))
sides = int(raw_input("How many sides? "))

while a&lt;rolls:
    a=a+1
    working=random.randint(1, sides)
    final=final+working

print "Your total is:", final
</snippet></ROW><ROW><id>1580303</id><snippet>any(d['site'] == 'Superuser' for d in data)
</snippet></ROW><ROW><id>1580322</id><snippet>item = ["Ford pickup", 1993, 9995]</snippet></ROW><ROW><id>1580322</id><snippet>ikey = tuple(item[0], item[1])
idata = item[2]
db[ikey] = idata
</snippet></ROW><ROW><id>1580322</id><snippet>a = [1,"fred",7.3]
b = []
b.append(1)
b[0] = "fred"
b.append(a) # now the second element of b is the whole list a
</snippet></ROW><ROW><id>1580322</id><snippet>c = {}
d = ("ford pickup",1993)
c[d] = 9995
</snippet></ROW><ROW><id>1580631</id><snippet>file = open('system.keys','r')
lines = []
for i in file:
    lines.append(i.partition('='))

dic = {}
for k,_,v in lines:
    dic[k] = v
</snippet></ROW><ROW><id>1580631</id><snippet>myfile = open('system.keys','r')
dic = dict(i.split("=",1) for i in myfile)
</snippet></ROW><ROW><id>1580631</id><snippet>dict()</snippet></ROW><ROW><id>1580631</id><snippet>(key,value)</snippet></ROW><ROW><id>1580650</id><snippet>xd_receiver.htm</snippet></ROW><ROW><id>1580650</id><snippet>iframe</snippet></ROW><ROW><id>1580650</id><snippet>src</snippet></ROW><ROW><id>1580650</id><snippet>iframe</snippet></ROW><ROW><id>1580650</id><snippet>iframe</snippet></ROW><ROW><id>1580650</id><snippet>iframe</snippet></ROW><ROW><id>1580650</id><snippet>iframe</snippet></ROW><ROW><id>1580650</id><snippet>iframe</snippet></ROW><ROW><id>1580791</id><snippet>return ('NULL')</snippet></ROW><ROW><id>1580791</id><snippet>return ('NULL\n')</snippet></ROW><ROW><id>1580791</id><snippet>RewriteEngine on
RewriteCond %{REQUEST_FILENAME} !-f
RewriteCond (${remap:$1}) !NULL
RewriteRule (.*_.*) /%1 [R=301]
</snippet></ROW><ROW><id>1580851</id><snippet>class Aclass(object):
    p = None
    @classmethod
    def init_p(cls, value):
        p = value
    @classmethod
    def meth1(cls):
        # some code
        res = cls.meth2()
        # some more code w/ res
    @classmethod
    def meth2(cls):
        # do something with p
        pass

from a import Aclass as ac

ac.init_p(some_command_line_argument_value)

ac.meth1()
ac.meth2()
</snippet></ROW><ROW><id>1580929</id><snippet>ROOT
BOTTOM HANDLER
TOP HANDLER
ROOT
</snippet></ROW><ROW><id>1580929</id><snippet>top.propagation = False
</snippet></ROW><ROW><id>1581726</id><snippet>__all__</snippet></ROW><ROW><id>1581726</id><snippet>from project.foo import *</snippet></ROW><ROW><id>1581726</id><snippet>__all__</snippet></ROW><ROW><id>1581726</id><snippet>from project.foo.first import WonderfulThing</snippet></ROW><ROW><id>1581726</id><snippet>from .first import WonderfulThing</snippet></ROW><ROW><id>1581726</id><snippet>from project import foo</snippet></ROW><ROW><id>1581726</id><snippet>foo.WonderfulThing</snippet></ROW><ROW><id>1581726</id><snippet>import *</snippet></ROW><ROW><id>1581726</id><snippet>WonderfulThing</snippet></ROW><ROW><id>1581726</id><snippet>__init__</snippet></ROW><ROW><id>1581726</id><snippet>from . import WonderfulThing
</snippet></ROW><ROW><id>1581726</id><snippet>from . import *
</snippet></ROW><ROW><id>1581937</id><snippet>Queue</snippet></ROW><ROW><id>1581937</id><snippet>set</snippet></ROW><ROW><id>1581937</id><snippet>class SetQueue(Queue):

    def _init(self, maxsize):
        self.maxsize = maxsize
        self.queue = set()

    def _put(self, item):
        self.queue.add(item)

    def _get(self):
        return self.queue.pop()
</snippet></ROW><ROW><id>1581937</id><snippet>Queue</snippet></ROW><ROW><id>1581937</id><snippet>queue</snippet></ROW><ROW><id>1581937</id><snippet>class SetQueue(Queue):

    def _init(self, maxsize):
        Queue._init(self, maxsize) 
        self.all_items = set()

    def _put(self, item):
        if item not in self.all_items:
            Queue._put(self, item) 
            self.all_items.add(item)
</snippet></ROW><ROW><id>1581937</id><snippet>Queue</snippet></ROW><ROW><id>1582242</id><snippet>cdef</snippet></ROW><ROW><id>1582444</id><snippet>_cp_dispatch</snippet></ROW><ROW><id>1582444</id><snippet>_q_lookup</snippet></ROW><ROW><id>1582444</id><snippet>_q_resolve</snippet></ROW><ROW><id>1582565</id><snippet>asyncore.loop</snippet></ROW><ROW><id>1582565</id><snippet>a.send</snippet></ROW><ROW><id>1582565</id><snippet>python -m trace -t ast.py
</snippet></ROW><ROW><id>1582565</id><snippet>print</snippet></ROW><ROW><id>1582670</id><snippet>max(a, key=len)</snippet></ROW><ROW><id>1582670</id><snippet>len(max(a, key=len))</snippet></ROW><ROW><id>1582670</id><snippet>max</snippet></ROW><ROW><id>1582800</id><snippet>import org.python.core.PyObject;
import org.python.core.PyString;
import org.python.util.PythonInterpreter;
public class Main {

    public static B create() 
    {
        PythonInterpreter interpreter = new PythonInterpreter();
        interpreter.exec("from D import D");
        PyObject DClass = interpreter.get("D");

        PyObject DObject = DClass.__call__();
        return (B)DObject.__tojava__(B.class);
    }

    public static void main(String[] args) 
    {
        B b = create();
        System.out.println(b.FooBar("Wall-"));
    }
}
</snippet></ROW><ROW><id>1582896</id><snippet>import Tkinter, random
class App:
    def __init__(self, t):
        self.i = Tkinter.PhotoImage(width=100,height=100)
        colors = [[random.randint(0,255) for i in range(0,3)] for j in range(0,10000)]
        row = 0; col = 0
        for color in colors:
           self.i.put('#%02x%02x%02x' % tuple(color),(row,col))
           col += 1
           if col == 100:
               row +=1; col = 0        
        c = Tkinter.Canvas(t, width=100, height=100); c.pack()
        c.create_image(0, 0, image = self.i, anchor=Tkinter.NW)

t = Tkinter.Tk()
a = App(t)    
t.mainloop()
</snippet></ROW><ROW><id>1582896</id><snippet>from Tkinter import *
import random

def RGBs(num):
 # random list of list RGBs
 return [[random.randint(0,255) for i in range(0,3)] for j in range(0,num)]

def rgb2Hex(rgb_tuple):
    return '#%02x%02x%02x' % tuple(rgb_tuple)

def drawGrid(w,colors):
 col = 0; row = 0
 colors = [rgb2Hex(color) for color in colors]
 for color in colors:
  w.create_rectangle(col, row, col+1, row+1, fill=color, outline=color)
  col+=1
  if col == 100:
   row += 1; col = 0

root = Tk()
w = Canvas(root)
w.grid()
colors = RGBs(5000)
drawGrid(w,colors)
root.mainloop()
</snippet></ROW><ROW><id>1582896</id><snippet>def rgb2Hex(rgb_tuple):
    return '#%02x%02x%02x' % tuple(rgb_tuple)

num = 10000 #10,000 pixels in 100,100 image
colors = [[random.randint(0,255) for i in range(0,3)] for j in range(0,num)]
colors = [rgb2Hex(color) for color in colors]
im = Image.fromstring('RGB',(100,100),"".join(colors))
tkpi = ImageTk.PhotoImage(im)
## add to a label or whatever...
label_image = Tkinter.Label(root, image=tkpi)
</snippet></ROW><ROW><id>1582906</id><snippet>/foo/bar</snippet></ROW><ROW><id>1582906</id><snippet>/</snippet></ROW><ROW><id>1582906</id><snippet>r = re.compile(r'/foo/bar(?!/)')
</snippet></ROW><ROW><id>1582906</id><snippet>r.search</snippet></ROW><ROW><id>1582971</id><snippet>json</snippet></ROW><ROW><id>1582971</id><snippet>django.utils.simplejson</snippet></ROW><ROW><id>1582971</id><snippet>HTTPResponse</snippet></ROW><ROW><id>1583047</id><snippet>[XmlRpcUrl("http://188.40.xxx.xxx:8000/RPC2")]
</snippet></ROW><ROW><id>1583047</id><snippet>SimpleXMLRPCRequestHandler.rpc_paths</snippet></ROW><ROW><id>1583091</id><snippet>sudo port install python_select
sudo python_select python26
</snippet></ROW><ROW><id>1583189</id><snippet>for numbers in x:
</snippet></ROW><ROW><id>1583189</id><snippet>sum(numbers)
</snippet></ROW><ROW><id>1583189</id><snippet>def numcheck(x):
    s=0
    for number in x:
        if number%3==0 and number%5==0:
            s+=number
    print(s)
numcheck(range(1000))
</snippet></ROW><ROW><id>1583235</id><snippet>/* get the sys.modules dictionary */
PyObject* sysmodules PyImport_GetModuleDict();
PyObject* pygame_module;
if(PyMapping_HasKeyString(sysmodules, "pygame")) {
    pygame_module = PyMapping_GetItemString(sysmodules, "pygame");
} else {
    PyObject* initresult;
    pygame_module = PyImport_ImportModule("pygame");
    if(!pygame_module) {
      /* insert error handling here! and exit this function */
    }
    initresult = PyObject_CallMethod(pygame_module, "init", NULL);
    if(!initresult) {
      /* more error handling &amp;c */
    }
    Py_DECREF(initresult);
}
/* use PyObject_CallMethod(pygame_module, ...) to your heart's contents */
/* and lastly, when done, don't forget, before you exit, to: */
Py_DECREF(pygame_module);
</snippet></ROW><ROW><id>1583445</id><snippet>sum(map(predicate, seq)) == 1
</snippet></ROW><ROW><id>1583630</id><snippet>&gt;&gt;&gt; addTwo = lambda x: x+2
&gt;&gt;&gt; addTwo(2)
4
</snippet></ROW><ROW><id>1583630</id><snippet>addTwo</snippet></ROW><ROW><id>1583630</id><snippet>return</snippet></ROW><ROW><id>1583630</id><snippet>&gt;&gt;&gt; def addTwo(x):
...     return x+2
... 
&gt;&gt;&gt; addTwo(2)
4
</snippet></ROW><ROW><id>1583630</id><snippet>&gt;&gt;&gt; mapTree = {
...     'number': lambda x: x**x,
...     'string': lambda x: x[1:]
... }
&gt;&gt;&gt; otype = 'number'
&gt;&gt;&gt; mapTree[otype](2)
4
&gt;&gt;&gt; otype = 'string'
&gt;&gt;&gt; mapTree[otype]('foo')
'oo'
</snippet></ROW><ROW><id>1583687</id><snippet>OpBasedDocument.InsertInlineBlip()</snippet></ROW><ROW><id>1583687</id><snippet> 412 -  def InsertInlineBlip(self, position): 
 413      """Inserts an inline blip into this blip at a specific position. 
 414   
 415      Args: 
 416        position: Position to insert the blip at. 
 417   
 418      Returns: 
 419        The JSON data of the blip that was created. 
 420      """ 
 421      blip_data = self.__context.builder.DocumentInlineBlipInsert( 
 422          self._blip.waveId, 
 423          self._blip.waveletId, 
 424          self._blip.blipId, 
 425          position) 
 426      # TODO(davidbyttow): Add local blip element. 
 427      return self.__context.AddBlip(blip_data)
</snippet></ROW><ROW><id>1583687</id><snippet>InsertInlineBlip()</snippet></ROW><ROW><id>1583687</id><snippet>AddBlip()</snippet></ROW><ROW><id>1583687</id><snippet> 543 -  def AddBlip(self, blip_data): 
 544      """Adds a transient blip based on the data supplied. 
 545   
 546      Args: 
 547        blip_data: JSON data describing this blip. 
 548   
 549      Returns: 
 550        An OpBasedBlip that may have operations applied to it. 
 551      """ 
 552      blip = OpBasedBlip(blip_data, self) 
 553      self.blips[blip.GetId()] = blip 
 554      return blip
</snippet></ROW><ROW><id>1583687</id><snippet>InsertInlineBlip(self, position)</snippet></ROW><ROW><id>1583687</id><snippet>InsertElement(self, position, element)</snippet></ROW><ROW><id>1583687</id><snippet>InsertInlineBlip()</snippet></ROW><ROW><id>1583687</id><snippet>InsertInlineBlip()</snippet></ROW><ROW><id>1583687</id><snippet>Blip.CreateChild()</snippet></ROW><ROW><id>1584194</id><snippet>def view(req, url):
    req.content_type = 'text/plain'
    ns = {u'f' : u'http://www.w3.org/2005/Atom',
        u't' : u'http://purl.org/syndication/thread/1.0'}
    doc = amara.parse(urlopen(url), prefixes=ns)
    req.write(str(doc.xml_xpath(u'f:title')))
</snippet></ROW><ROW><id>1584246</id><snippet>def _validate_item(item):
    if item &lt;= 0:
        raise ValueError("item should be positive.")
</snippet></ROW><ROW><id>1584246</id><snippet>class Positive(object):
    def __init__(self, item):
        self._validate_item(item)
        self.item = item

    @staticmethod
    def _validate_item(item):
        if item &lt;= 0:
            raise ValueError("item should be positive.")
</snippet></ROW><ROW><id>1584468</id><snippet>prof = cProfile.Profile()
retval = prof.runcall(self.method_actual, *args, **kwargs)
prof.dump_stats(datafn)
</snippet></ROW><ROW><id>1584697</id><snippet>class MyParser(object):
    def __init__(self, value):
        self.lst = value.split('|')
    def id(self):
        return self.lst[0]
    def level(self):
        return self.lst[2].strip()
    def message(self):
        return self.lst[1].strip(' "')
</snippet></ROW><ROW><id>1584743</id><snippet>a</snippet></ROW><ROW><id>1584743</id><snippet>True</snippet></ROW><ROW><id>1584743</id><snippet>is</snippet></ROW><ROW><id>1584743</id><snippet>False</snippet></ROW><ROW><id>1584743</id><snippet>==</snippet></ROW><ROW><id>1584743</id><snippet>False</snippet></ROW><ROW><id>1584743</id><snippet>if</snippet></ROW><ROW><id>1584743</id><snippet>__bool__</snippet></ROW><ROW><id>1584743</id><snippet>__nonzero__</snippet></ROW><ROW><id>1584743</id><snippet>True</snippet></ROW><ROW><id>1584743</id><snippet>True</snippet></ROW><ROW><id>1584743</id><snippet>True</snippet></ROW><ROW><id>1584743</id><snippet>False</snippet></ROW><ROW><id>1584743</id><snippet>1</snippet></ROW><ROW><id>1584743</id><snippet>0</snippet></ROW><ROW><id>1584743</id><snippet>bool</snippet></ROW><ROW><id>1584743</id><snippet>int</snippet></ROW><ROW><id>1584870</id><snippet>/~/bin/python</snippet></ROW><ROW><id>1584870</id><snippet>~/bin/python</snippet></ROW><ROW><id>1584870</id><snippet>--prefix=path</snippet></ROW><ROW><id>1584870</id><snippet>configure</snippet></ROW><ROW><id>1584870</id><snippet>~</snippet></ROW><ROW><id>1584870</id><snippet>/</snippet></ROW><ROW><id>1584870</id><snippet>~</snippet></ROW><ROW><id>1584870</id><snippet>./configure --prefix=/~/bin/python
</snippet></ROW><ROW><id>1584870</id><snippet>./configure --prefix=~/bin/python
</snippet></ROW><ROW><id>1584870</id><snippet>./configure --prefix=$HOME/bin/python
</snippet></ROW><ROW><id>1584870</id><snippet>echo $HOME</snippet></ROW><ROW><id>1584870</id><snippet>$HOME</snippet></ROW><ROW><id>1584870</id><snippet>--prefix=/home/mscharley/bin/python</snippet></ROW><ROW><id>1584943</id><snippet>IS_IN_DB(dbset, field, label)</snippet></ROW><ROW><id>1584943</id><snippet>db.member.year.requires = IS_IN_DB(db, 'All_years.id', '%(fromY)d')
</snippet></ROW><ROW><id>1584943</id><snippet>db.member.year.requires = IS_IN_DB(db, 'All_years.id', '%(fromY)d to %(toY)d')
</snippet></ROW><ROW><id>1584979</id><snippet>def enumerate_recursive(iter, base=()):
    for index, item in enumerate(iter):
        if isinstance(item, basestring):
            yield (base + (index,)), item
        else:
            for pair in enumerate_recursive(item, (base + (index,))):
                yield pair

def grep_index(filt, iter):
    return (index for index, text in iter if filt in text)
</snippet></ROW><ROW><id>1584979</id><snippet>l = list(grep_index('opt1', enumerate(sys.argv)))   # non-recursive
r = list(grep_index('diff', enumerate_recursive(your_data)))  # recursive
</snippet></ROW><ROW><id>1585203</id><snippet>easy_install -i &lt;a href="http://eggs.sadphaeton.com" rel="nofollow"&gt;http://eggs.sadphaeton.com&lt;/a&gt; identity.model</snippet></ROW><ROW><id>1585203</id><snippet>python -c "from SimpleHTTPServer import test; test()"</snippet></ROW><ROW><id>1585203</id><snippet>easy_install -f &lt;a href="http://localhost:8080/" rel="nofollow"&gt;http://localhost:8080/&lt;/a&gt; &lt;modulename&gt;</snippet></ROW><ROW><id>1585276</id><snippet>ast.literal_eval</snippet></ROW><ROW><id>1585276</id><snippet>In [110]: import ast

In [111]: astr="{'key1':'value1','key2':'value2'}"

In [113]: ast.literal_eval(astr)
Out[113]: {'key1': 'value1', 'key2': 'value2'}
</snippet></ROW><ROW><id>1585396</id><snippet>lambda x: True if x % 2 == 0 else False
</snippet></ROW><ROW><id>1585396</id><snippet>print</snippet></ROW><ROW><id>1585396</id><snippet>raise</snippet></ROW><ROW><id>1585467</id><snippet>DEFAULT_CHARSET</snippet></ROW><ROW><id>1585467</id><snippet>HttpRequest.encoding</snippet></ROW><ROW><id>1585978</id><snippet>class Revision (db.Model):
  name = db.StringProperty(required=True)
  created = db.DateTimeProperty(required=True)
  modified = db.DateTimeProperty(auto_now_add=True)
  content = db.TextProperty(required=True)
  user = db.UserProperty()
</snippet></ROW><ROW><id>1585978</id><snippet>r = Revision(name = self.name,
             content = self.content,
             created = self.created,
             modified = self.modified,
             user = self.user)
r.put()
</snippet></ROW><ROW><id>1585978</id><snippet>page = models.Page.load(title)

if request.GET.get('rev'):
  query = db.Query(models.Revision)
  query.filter('name =', title).order('created')
  rev = request.GET.get('rev')
  rev_page = query.fetch(1, int(rev))
  page.content = rev_page.content
</snippet></ROW><ROW><id>1586115</id><snippet>./manage.py</snippet></ROW><ROW><id>1586115</id><snippet>None</snippet></ROW><ROW><id>1586115</id><snippet>if not MyModel.objects.filter(content=mytext).count():
</snippet></ROW><ROW><id>1586242</id><snippet>import sys

d = {}
for line in sys.stdin:
    parts = line.split("=",2)
    if len(parts) &lt; 2:
        continue
    k = parts[0].strip()
    v = parts[1].strip()
    d[k] = v

print d['CENTRAL_BODY']
</snippet></ROW><ROW><id>1586452</id><snippet>%module test
%{

typedef struct {
  int (*my_func)(int);
} test_struct;

int add1(int n) { return n+1; }

test_struct *init_test()
{
    test_struct *t = (test_struct*) malloc(sizeof(test_struct));
    t-&gt;my_func = add1;
    return t;
}

%}

typedef struct {
    int my_func(int);
} test_struct;

extern test_struct *init_test();
</snippet></ROW><ROW><id>1586452</id><snippet>$ python
Python 2.6.2 (release26-maint, Apr 19 2009, 01:56:41) 
[GCC 4.3.3] on linux2
Type "help", "copyright", "credits" or "license" for more information.
&gt;&gt;&gt; import test
&gt;&gt;&gt; t = test.init_test()
&gt;&gt;&gt; t.my_func(1)
2
</snippet></ROW><ROW><id>1587323</id><snippet>from django.core.management.base import BaseCommand
from mailing.msystem.models import Alarm

class Command(BaseCommand):
    help = "Displays data"
    def handle(self, *args, **options):
        x = Alarm.objects.all()
        for i in x:
            print i.name
</snippet></ROW><ROW><id>1587337</id><snippet>probsoln</snippet></ROW><ROW><id>1587337</id><snippet>probsoln</snippet></ROW><ROW><id>1587337</id><snippet>\loadrandomproblems[dataset]{n}{filename}</snippet></ROW><ROW><id>1587337</id><snippet>n</snippet></ROW><ROW><id>1587337</id><snippet>filename</snippet></ROW><ROW><id>1587337</id><snippet>dataset</snippet></ROW><ROW><id>1587337</id><snippet>loops.tex</snippet></ROW><ROW><id>1587337</id><snippet>functions.tex</snippet></ROW><ROW><id>1587337</id><snippet>exam.tex</snippet></ROW><ROW><id>1587337</id><snippet>\newproblem{IPOpattern}{Which of the following is not a part of the IPO pattern?
    \\ a) Input \quad b) Program \quad c) Process \quad d) Output}{The correct
    answer goes here.}

\newproblem{input}{In Python, getting user input is done with a special expression
    called: \\ a) for \quad b) read \quad c) simultaneous assignment \quad
    d) input}{The correct answer goes here.}
</snippet></ROW><ROW><id>1587337</id><snippet>\documentclass{report}
\usepackage{probsoln}
\begin{document}
\hideanswers
\chapter{Loops}
% randomly select 2 problems from loops.tex and add to
% the data set called 'loops'
\loadrandomproblems[loops]{2}{loops}

% Display the problems
\renewcommand{\theenumi}{\thechapter.\arabic{enumi}}
\begin{enumerate}
\foreachproblem[loops]{\item\label{prob:\thisproblemlabel}\thisproblem}
\end{enumerate}
% You may need to change \theenumi back here

\chapter{Functions}
% randomly select 2 problems from functions.tex and add to
% the data set called 'functions'
\loadrandomproblems[functions]{2}{functions}

% Display the problems
\renewcommand{\theenumi}{\thechapter.\arabic{enumi}}
\begin{enumerate}
\foreachproblem[functions]{\item\label{prob:\thisproblemlabel}\thisproblem}
\end{enumerate}
% You may need to change \theenumi back here

\appendix

\chapter{Solutions}
\showanswers
\begin{itemize}
\foreachdataset{\thisdataset}{%
\foreachproblem[\thisdataset]{\item[\ref{prob:\thisproblemlabel}]\thisproblem}
}
\end{itemize}

\end{document}
</snippet></ROW><ROW><id>1587501</id><snippet>0b1111000</snippet></ROW><ROW><id>1587501</id><snippet>v = ord(data[17])
major = (v &amp; 0xF0) &gt;&gt; 4
minor = (v &amp; 0x0F)
</snippet></ROW><ROW><id>1587919</id><snippet>difflib.SequenceMatcher</snippet></ROW><ROW><id>1587924</id><snippet>from ctypes import *

buf = create_unicode_buffer(260)
GetLongPathName = windll.kernel32.GetLongPathNameW
rv = GetLongPathName(path, buf, 260)
print buf.value
</snippet></ROW><ROW><id>1588071</id><snippet>raw_input().split()</snippet></ROW><ROW><id>1588071</id><snippet>map(int, raw_input().split())</snippet></ROW><ROW><id>1588071</id><snippet>input()</snippet></ROW><ROW><id>1588071</id><snippet>import os;os.system('do something bad')</snippet></ROW><ROW><id>1588720</id><snippet>weblog/yyyy/mm/dd/</snippet></ROW><ROW><id>1588720</id><snippet>index.txt</snippet></ROW><ROW><id>1588720</id><snippet>index.txt</snippet></ROW><ROW><id>1588720</id><snippet>weblog/tags/TAGNAME.txt</snippet></ROW><ROW><id>1588720</id><snippet>weblog/index.txt</snippet></ROW><ROW><id>1588720</id><snippet>weblog/atom.xml</snippet></ROW><ROW><id>1589604</id><snippet>SELECT * FROM INFORMATION_SCHEMA.PROCESSLIST
</snippet></ROW><ROW><id>1589606</id><snippet>def make_adder(x):
    def add(y):
        return x + y
    return add

plus5 = make_adder(5)
print(plus5(12))  # prints 17
</snippet></ROW><ROW><id>1589606</id><snippet>x</snippet></ROW><ROW><id>1589936</id><snippet>class RPCThreading(SocketServer.ThreadingMixIn, SimpleXMLRPCServer.SimpleXMLRPCServer):
    pass
</snippet></ROW><ROW><id>1590016</id><snippet>global var
</snippet></ROW><ROW><id>1590016</id><snippet>var=0
def f():
    global var
    var=1
f()
print(var)
# 1  &lt;---- the var outside the "def f" block is affected by calling f()
</snippet></ROW><ROW><id>1590016</id><snippet>var=0
def f():
    var=1
f()
print(var)
# 0  &lt;---- the var outside the "def f" block is unaffected
</snippet></ROW><ROW><id>1590016</id><snippet>globals().update(var)
</snippet></ROW><ROW><id>1590016</id><snippet>#!/usr/bin/env python

# Here is the original globals() dict
print(globals())
# {'__builtins__': &lt;module '__builtin__' (built-in)&gt;, '__name__': '__main__', '__file__': '/home/unutbu/pybin/test.py', '__doc__': None}

var={'x':'Howdy'}
globals().update(var)

# Now the globals() dict contains both var and 'x'
print(globals())
# {'var': {'x': 'Howdy'}, 'x': 'Howdy', '__builtins__': &lt;module '__builtin__' (built-in)&gt;, '__name__': '__main__', '__file__': '/home/unutbu/pybin/test.py', '__doc__': None}

# Lo and behold, you've defined x without saying x='Howdy' !
print(x)
Howdy
</snippet></ROW><ROW><id>1590058</id><snippet>import time
import sys
while True:
    for char in 'abcdefx':
        sys.stdout.write(char)
        sys.stdout.flush()
        time.sleep(0.1)
</snippet></ROW><ROW><id>1590058</id><snippet>import sys
while True:
    char = sys.stdin.read(1)
    if not char:
        break
    if char != 'x':
        sys.stdout.write(char)
        sys.stdout.flush()
</snippet></ROW><ROW><id>1590058</id><snippet>python so_gen.py | python so_filter.py</snippet></ROW><ROW><id>1590064</id><snippet>#!/usr/bin/env python
import numpy as np
from datetime import date
x=np.array([(date(2000,1,1),0,1),
              (date(2000,1,1),1,1),
              (date(2000,1,1),1,0),
              (date(2000,1,1),0,0),
              ])

y=np.rec.fromrecords( x )

z=np.empty((len(y),len(y.dtype)),dtype='object')
for idx,field in enumerate(y.dtype.names):
   z[:,idx]=y[field]
assert (x==z).all()
</snippet></ROW><ROW><id>1590546</id><snippet>#!/usr/bin/env python

import subprocess

interval = 300  # secs

while True:
    p = subprocess.Popen(['pythonw.exe', 'foo.py'])
    time.sleep(interval)
</snippet></ROW><ROW><id>1590657</id><snippet>def foo():
    bar()

def bar():
    foo()
</snippet></ROW><ROW><id>1590657</id><snippet>foo()</snippet></ROW><ROW><id>1590657</id><snippet>foo</snippet></ROW><ROW><id>1590657</id><snippet>foo</snippet></ROW><ROW><id>1590657</id><snippet>bar</snippet></ROW><ROW><id>1590700</id><snippet>class UrlBuilder:
    def __init__(self,domain,path="blah",params="foo=bar"):
        self.domain = domain
        self.path = path
        self.params = params

    def withPath(self,path):
        self.path = path
        return self

    def withParams(self,params):
        self.params = params
        return self

    def __str__(self):
        return 'http://' + self.domain + '/' + self.path + '?' + self.params
        # or return urlparse.urlunparse( ( "http", self.domain, self.path, self.params, "", "" )

    def build(self):
        return self.__str__()

if __name__ == '__main__':
    u = UrlBuilder('www.example.com')
    print u.withPath('bobloblaw')
    print u.withParams('lawyer=yes')
    print u.withPath('elvis').withParams('theking=true')
</snippet></ROW><ROW><id>1590735</id><snippet>from django.core.cache import cache

def get_user(request):
    user_id = request.GET.get("user_id")
    user = cache.get("user_id_%s"%user_id)
    if user is None:
        user = User.objects.get(pk=user_id)
        cache.set("user_id_%s"%user_id, user, 10*60) # 10 minutes
    ...
    ..
    .
</snippet></ROW><ROW><id>1591051</id><snippet>(def prime-gen
     (let [primes (atom [])]
       (for [n (iterate inc 2)
             :when (not-any? #(zero? (rem n %))
                             (filter #(&lt;= % (Math/sqrt n)) 
                                     @primes))]
         (do (swap! primes conj n)
             n))))

(take 10 prime-gen)  ; =&gt; (2 3 5 7 11 13 17 19 23 29)
</snippet></ROW><ROW><id>1591051</id><snippet>clojure.contrib.lazy-seqs</snippet></ROW><ROW><id>1591083</id><snippet>lexer = lexers.get_lexer_by_name("python", stripnl=False)
</snippet></ROW><ROW><id>1591083</id><snippet>pygment.highlight</snippet></ROW><ROW><id>1591432</id><snippet>Raise</snippet></ROW><ROW><id>1591432</id><snippet>x</snippet></ROW><ROW><id>1591432</id><snippet>x = '''\
if f(x):
    raise IOError(errno.ENOENT, 'not found')
else:
    e = g(x)
    raise e
'''
</snippet></ROW><ROW><id>1591432</id><snippet>compiler</snippet></ROW><ROW><id>1591432</id><snippet>tree = compiler.parse(x)
</snippet></ROW><ROW><id>1591432</id><snippet>Raise</snippet></ROW><ROW><id>1591432</id><snippet>class RaiseVisitor(object):
    def __init__(self):
        self.nodes = []
    def visitRaise(self, n):
        self.nodes.append(n)
</snippet></ROW><ROW><id>1591432</id><snippet>Raise</snippet></ROW><ROW><id>1591432</id><snippet>v = RaiseVisitor()
compiler.walk(tree, v)

&gt;&gt;&gt; print v.nodes
[
    Raise(
        CallFunc(
            Name('IOError'),
            [Getattr(Name('errno'), 'ENOENT'), Const('not found')],
            None, None),
        None, None),
    Raise(Name('e'), None, None),
]
</snippet></ROW><ROW><id>1591432</id><snippet>CallFunc(Name('IOError'), ...)</snippet></ROW><ROW><id>1591432</id><snippet>IOError</snippet></ROW><ROW><id>1591533</id><snippet>#! /usr/bin/python

import pymssql
con = pymssql.connect (host='xxxxx',user='xxxx',
                       password='xxxxx',database='xxxxx')
cur = con.cursor()
query = "DECLARE @id INT; EXECUTE sp_GetUserID; SELECT @id;"
cur.execute(query)
outputparameter = cur.fetchall()
con.commit()
con.close()
</snippet></ROW><ROW><id>1591629</id><snippet>my_file = open(filename, "r")
lines_of_file = my_file.readlines()
lines_of_file.insert(-1, "This line is added one before the last line")
my_file.writelines(lines_of_file)
</snippet></ROW><ROW><id>1591774</id><snippet>itertools.product</snippet></ROW><ROW><id>1591774</id><snippet>import itertools

def recombinate(families):
    "families is the list of 8 elements, each one with 12 individuals"
    for fi, fj in itertools.combinations(families, 2):
        for pair in itertools.product(fi, fj):
            yield pair
</snippet></ROW><ROW><id>1592108</id><snippet>--tests=unit</snippet></ROW><ROW><id>1592108</id><snippet>--tests=functional</snippet></ROW><ROW><id>1592108</id><snippet>FunctionalTest</snippet></ROW><ROW><id>1592108</id><snippet>assert_response</snippet></ROW><ROW><id>1592108</id><snippet>assert_xpath</snippet></ROW><ROW><id>1592108</id><snippet>class FunctionalTest(Test):
  def get(self, *args, **kw):
    self.response = app.get(*args, **kw)

  def post(self, *args, **kw):
    self.response = app.post(*args, **kw)

  def assert_response(self, expected):
    pattern = str(expected) if re.search(r'^\d+$', expected) \
                            else (r'^\d+ %s' % expected)
    assert re.search(pattern, self.response.status, re.IGNORECASE), \
           'Response status was not "%s": %s' % (expected, self.response.status)

  def assert_xpath(self, path, expected):
    element = ElementTree.fromstring(self.response.body)
    found_nodes = element.findall('.' + path)
    if type(expected) is int:
      assert_equal(expected, len(found_nodes))
    elif type(expected) is str or type(expected) is unicode:
      assert (True in [(node.text == expected) for node in found_nodes])
    else:
      raise Exception, "Unknown expected value: %r" % type(expected)
</snippet></ROW><ROW><id>1592108</id><snippet>--tests=foo</snippet></ROW><ROW><id>1592108</id><snippet>script/console test</snippet></ROW><ROW><id>1592108</id><snippet>--datastore_path="$TMPDIR/nosegae.datastore"</snippet></ROW><ROW><id>1592108</id><snippet>/tmp</snippet></ROW><ROW><id>1592108</id><snippet>$TMPDIR</snippet></ROW><ROW><id>1592240</id><snippet>__subclasses__</snippet></ROW><ROW><id>1592240</id><snippet>__subclasses__</snippet></ROW><ROW><id>1592240</id><snippet>__subclasses__</snippet></ROW><ROW><id>1592340</id><snippet>&gt;&gt;&gt; data
'\x00\x00\x00\x01\x00\x04AMTD\x00\x00\x00\x00\x02A\x9733A\x99\\)A\x90=qA\x91\xd7\nG\x0f\xc6\x14\x00\x00\x01\x16j\xe0h\x80A\x93\xb4\x05A\x97\x1e\xb8A\x90z\xe1A\x96\x8fWF\xe6.\x80\x00\x00\x01\x16zS|\x80\xff\xff'
&gt;&gt;&gt; from struct import unpack, calcsize
&gt;&gt;&gt; scount, slength = unpack("!IH", data[:6])
&gt;&gt;&gt; assert scount == 1
&gt;&gt;&gt; symbol, error_code = unpack("!%dsb" % slength, data[6:6+slength+1])
&gt;&gt;&gt; assert error_code == 0
&gt;&gt;&gt; symbol
'AMTD'
&gt;&gt;&gt; bar_count = unpack("!I", data[6+slength+1:6+slength+1+4])
&gt;&gt;&gt; bar_count
(2,)
&gt;&gt;&gt; bar_format = "!5fQ"                                                         
&gt;&gt;&gt; from collections import namedtuple
&gt;&gt;&gt; Bar = namedtuple("Bar", "Close High Low Open Volume Timestamp")             
&gt;&gt;&gt; b = Bar(*unpack(bar_format, data[6+slength+1+4:6+slength+1+4+calcsize(bar_format)]))
&gt;&gt;&gt; b
Bar(Close=18.899999618530273, High=19.170000076293945, Low=18.030000686645508, Open=18.229999542236328, Volume=36806.078125, Timestamp=1195794000000L)
&gt;&gt;&gt; import time
&gt;&gt;&gt; time.ctime(b.Timestamp//1000)
'Fri Nov 23 08:00:00 2007'
&gt;&gt;&gt; int(b.Volume*100 + 0.5)
3680608
</snippet></ROW><ROW><id>1592362</id><snippet>&gt;&gt;&gt; import struct
&gt;&gt;&gt; struct.unpack('!f', '41973333'.decode('hex'))[0]
18.899999618530273
&gt;&gt;&gt; struct.unpack('!f', '41995C29'.decode('hex'))[0]
19.170000076293945
&gt;&gt;&gt; struct.unpack('!f', '470FC614'.decode('hex'))[0]
36806.078125
</snippet></ROW><ROW><id>1592434</id><snippet>thedata = '''
Questa mattina
mi son svegliato
o bella ciao, bella ciao,
bella ciao, ciao, ciao
questa mattina
mi son svegliato
ho trovato l'invasor!
'''.splitlines(True)

class Push(protocol.Protocol):
    """This is just about the simplest possible protocol"""
    def connectionMade(self):
        for line in thedata:
          if not line or line.isspace():
            continue
          self.transport.write(line)
          time.sleep(1.0)
        self.transport.loseConnection()
</snippet></ROW><ROW><id>1592578</id><snippet>try:
  thevariable
except NameError:
  print "well, it WASN'T defined after all!"
else:
  print "sure, it was defined."
</snippet></ROW><ROW><id>1592936</id><snippet>&gt;&gt;&gt; 'foo'.decode('mac-turkish')
u'foo'
</snippet></ROW><ROW><id>1592936</id><snippet>$pylib/encodings/mac_*.py</snippet></ROW><ROW><id>1593034</id><snippet>def test():
    """Stupid test function"""
    L = []
    for i in range(100):
        L.append(i)

if __name__ == '__main__':
    import timeit
    print(timeit.timeit("test()", setup="from __main__ import test"))
</snippet></ROW><ROW><id>1593034</id><snippet>timeit.timeit(stmt='pass', setup='pass', timer=&lt;default timer&gt;,
  number=1000000)</snippet></ROW><ROW><id>1593034</id><snippet>Timer</snippet></ROW><ROW><id>1593034</id><snippet>timeit</snippet></ROW><ROW><id>1593034</id><snippet>Timer.timeit(number=1000000)</snippet></ROW><ROW><id>1593034</id><snippet>timeit</snippet></ROW><ROW><id>1593034</id><snippet>garbage
      collection</snippet></ROW><ROW><id>1593034</id><snippet>timeit.Timer('for i in xrange(10): oct(i)', 'gc.enable()').timeit()</snippet></ROW><ROW><id>1593034</id><snippet>import cProfile
import re
cProfile.run('re.compile("foo|bar")')
</snippet></ROW><ROW><id>1593034</id><snippet>      197 function calls (192 primitive calls) in 0.002 seconds

Ordered by: standard name

ncalls  tottime  percall  cumtime  percall filename:lineno(function)
     1    0.000    0.000    0.001    0.001 &lt;string&gt;:1(&lt;module&gt;)
     1    0.000    0.000    0.001    0.001 re.py:212(compile)
     1    0.000    0.000    0.001    0.001 re.py:268(_compile)
     1    0.000    0.000    0.000    0.000 sre_compile.py:172(_compile_charset)
     1    0.000    0.000    0.000    0.000 sre_compile.py:201(_optimize_charset)
     4    0.000    0.000    0.000    0.000 sre_compile.py:25(_identityfunction)
   3/1    0.000    0.000    0.000    0.000 sre_compile.py:33(_compile)
</snippet></ROW><ROW><id>1593034</id><snippet>profile</snippet></ROW><ROW><id>1593040</id><snippet># bootstrap your django instance

from django.core.handlers.wsgi import WSGIHandler
application = WSGIHandler()

import sys
sys.argv += '-no web --wsgi=&lt;module_name&gt;.application --port=8081'.split() 

from twisted.scripts.twistd import run
run()
</snippet></ROW><ROW><id>1593130</id><snippet>for i in range(c.shape[-1]):
    print c[:,:,i]
</snippet></ROW><ROW><id>1593130</id><snippet>for i in range(c.shape[-1]):
    print c[...,i]
</snippet></ROW><ROW><id>1593130</id><snippet>python -m timeit -s 'import numpy; c = numpy.arange(24).reshape(2,3,4)' 'for r in c.swapaxes(2,0).swapaxes(1,2): u = r'
100000 loops, best of 3: 3.69 usec per loop

python -m timeit -s 'import numpy; c = numpy.arange(24).reshape(2,3,4)' 'for i in range(c.shape[2]): u = c[:,:,i]'
100000 loops, best of 3: 6.08 usec per loop

python -m timeit -s 'import numpy; c = numpy.arange(24).reshape(2,3,4)' 'for r in numpy.rollaxis(c, 2): u = r'
100000 loops, best of 3: 6.46 usec per loop
</snippet></ROW><ROW><id>1593130</id><snippet>swapaxes()</snippet></ROW><ROW><id>1593130</id><snippet>c[:,:,i]</snippet></ROW><ROW><id>1593130</id><snippet>:</snippet></ROW><ROW><id>1593130</id><snippet>c[...,i]</snippet></ROW><ROW><id>1593130</id><snippet>python -m timeit -s 'import numpy; c = numpy.arange(24).reshape(2,3,4)' 'for i in range(c.shape[2]): u = c[...,i]'
100000 loops, best of 3: 4.74 usec per loop
</snippet></ROW><ROW><id>1593330</id><snippet>queue.get()</snippet></ROW><ROW><id>1593330</id><snippet>queue.task_done()</snippet></ROW><ROW><id>1593330</id><snippet>queue.join()</snippet></ROW><ROW><id>1593401</id><snippet>-d</snippet></ROW><ROW><id>1593401</id><snippet>sys.flags.debug</snippet></ROW><ROW><id>1593658</id><snippet>import os,mmap
f=os.open("afile",os.O_RDWR)
m=mmap.mmap(f,0)
m[4:9]="01234"
os.close(f)
</snippet></ROW><ROW><id>1593673</id><snippet>class Class1(object):
    def __init__(self, *args, **kw):
        self.x = Class2("Woo!", self)

class Class2(object):
    def __init__(self, word, creator, *args, **kw):
        self._creator = creator
        print word
</snippet></ROW><ROW><id>1593698</id><snippet>exec</snippet></ROW><ROW><id>1593698</id><snippet>func = "def f():\n"
if config_f1:
    func += " f1()\n"
if config_f2:
    func += " f2()\n"
exec func in globals()
</snippet></ROW><ROW><id>1593698</id><snippet>f()</snippet></ROW><ROW><id>1593883</id><snippet>def group_required(func):
    def _decorator(request, *args, **kwargs):
        hostname = request.META.get('HTTP_HOST')
        lang = hostname.split(".")[0]
        if not lang in request.user.groups:
            return HttpResponse("Access denied")
        return func(*args, **kwargs)
    return _decorator
</snippet></ROW><ROW><id>1594142</id><snippet>&gt;&gt;&gt; ptext = doc.createTextNode("This is a test!")
&gt;&gt;&gt; x509cert.appendChild(ptext)
</snippet></ROW><ROW><id>1594142</id><snippet>"&lt;ds:X509Certificate&gt;"</snippet></ROW><ROW><id>1594902</id><snippet>distutils.dir_util.remove_tree</snippet></ROW><ROW><id>1595278</id><snippet>POSTAL_CODE_ID,PostalCode,City,Province,ProvinceCode,CityType,Point
1,A0E 2Z0,Monkstown,Newfoundland,NL,D,"47.150300000000001,-55.299500000000002"
</snippet></ROW><ROW><id>1595278</id><snippet>import datetime
from google.appengine.ext import db
from google.appengine.tools import bulkloader


class PostalCode(db.Model):
  id = db.IntegerProperty()
  postal_code = db.PostalAddressProperty()
  city = db.StringProperty()
  province = db.StringProperty()
  province_code = db.StringProperty()
  city_type = db.StringProperty()
  geo_pt = db.GeoPtProperty()

class PostalCodeLoader(bulkloader.Loader):
  def __init__(self):
    bulkloader.Loader.__init__(self, 'PostalCode',
                               [('id', int),
                                ('postal_code', str),
                                ('city', str),
                                ('province', str),
                                ('province_code', str),
                                ('city_type', str),
                                ('geo_pt', str)
                               ])

loaders = [PostalCodeLoader]
</snippet></ROW><ROW><id>1595490</id><snippet>set_pos</snippet></ROW><ROW><id>1595490</id><snippet>up_key</snippet></ROW><ROW><id>1595490</id><snippet>down_key</snippet></ROW><ROW><id>1595490</id><snippet>_key</snippet></ROW><ROW><id>1595490</id><snippet>self.sel_row += increment</snippet></ROW><ROW><id>1595490</id><snippet>sel_row</snippet></ROW><ROW><id>1595490</id><snippet>if self.top_item &lt;= self.sel_row &lt; self.top_item + self.screen_rows</snippet></ROW><ROW><id>1595490</id><snippet>sel_row</snippet></ROW><ROW><id>1595490</id><snippet>self.top_item</snippet></ROW><ROW><id>1595626</id><snippet>open()</snippet></ROW><ROW><id>1596308</id><snippet>def getDateAndTime(seconds=None):
 """
  Converts seconds since the Epoch to a time tuple expressing UTC.
  When 'seconds' is not passed in, convert the current time instead.
  :Parameters:
      - `seconds`: time in seconds from the epoch.
  :Return:
      Time in UTC format.
"""
return time.strftime("%Y-%m-%dT%H:%M:%SZ", time.gmtime(seconds))`
</snippet></ROW><ROW><id>1596308</id><snippet>time.mktime(time.localtime(calendar.timegm(utc_time)))
</snippet></ROW><ROW><id>1596450</id><snippet>DTSRun /S "Server[\Instance]" /N "DTS_Package_Name" /E
</snippet></ROW><ROW><id>1596600</id><snippet>APPEND_SLASH</snippet></ROW><ROW><id>1597146</id><snippet>from PIL import Image
&gt;&gt;&gt; im1 = Image.open('img1.jpg')
&gt;&gt;&gt; im2 = Image.open('img2.jpg').resize(im1.size)
</snippet></ROW><ROW><id>1597146</id><snippet>&gt;&gt;&gt; im1 = Image.open('img1.jpg')
&gt;&gt;&gt; im2 = Image.new(im1.mode, im1.size)
</snippet></ROW><ROW><id>1597148</id><snippet>for line in f:
    tokens = line.split(" ")
    current_state, input_val, next_state = int(tokens[0]), tokens[1], int(tokens[2])
</snippet></ROW><ROW><id>1597148</id><snippet>for line in f:
    current_state, input_val, next_state = parseline(line)

def parseline(line):
    tokens = line.split(" ")
    return (int(tokens[0]), tokens[1], int(tokens[2]))
</snippet></ROW><ROW><id>1597750</id><snippet>SFTPClient</snippet></ROW><ROW><id>1597750</id><snippet>SSHClient</snippet></ROW><ROW><id>1597750</id><snippet>sftp_client = ssh_client.open_sftp()
remote_file = sftp_client.open('remote_filename')
try:
    for line in remote_file:
        # process line
finally:
    remote_file.close()
</snippet></ROW><ROW><id>1597755</id><snippet>mass_replace</snippet></ROW><ROW><id>1597755</id><snippet>chmod +x mass_replace</snippet></ROW><ROW><id>1597755</id><snippet>python mass_replace</snippet></ROW><ROW><id>1597755</id><snippet>#!/usr/bin/python

import os
import re
import sys

# list of extensions to replace
DEFAULT_REPLACE_EXTENSIONS = None
# example: uncomment next line to only replace *.c, *.h, and/or *.txt
# DEFAULT_REPLACE_EXTENSIONS = (".c", ".h", ".txt")

def try_to_replace(fname, replace_extensions=DEFAULT_REPLACE_EXTENSIONS):
    if replace_extensions:
        return fname.lower().endswith(replace_extensions)
    return True


def file_replace(fname, pat, s_after):
    # first, see if the pattern is even in the file.
    with open(fname) as f:
        if not any(re.search(pat, line) for line in f):
            return # pattern does not occur in file so we are done.

    # pattern is in the file, so perform replace operation.
    with open(fname) as f:
        out_fname = fname + ".tmp"
        out = open(out_fname, "w")
        for line in f:
            out.write(re.sub(pat, s_after, line))
        out.close()
        os.rename(out_fname, fname)


def mass_replace(dir_name, s_before, s_after, replace_extensions=DEFAULT_REPLACE_EXTENSIONS):
    pat = re.compile(s_before)
    for dirpath, dirnames, filenames in os.walk(dir_name):
        for fname in filenames:
            if try_to_replace(fname, replace_extensions):
                fullname = os.path.join(dirpath, fname)
                file_replace(fullname, pat, s_after)

if len(sys.argv) != 4:
    u = "Usage: mass_replace &lt;dir_name&gt; &lt;string_before&gt; &lt;string_after&gt;\n"
    sys.stderr.write(u)
    sys.exit(1)

mass_replace(sys.argv[1], sys.argv[2], sys.argv[3])
</snippet></ROW><ROW><id>1597755</id><snippet>mass_replace()</snippet></ROW><ROW><id>1597755</id><snippet>re.compile()</snippet></ROW><ROW><id>1597755</id><snippet>.endswith()</snippet></ROW><ROW><id>1597755</id><snippet>.endswith()</snippet></ROW><ROW><id>1597755</id><snippet>with</snippet></ROW><ROW><id>1597755</id><snippet>file_replace()</snippet></ROW><ROW><id>1597755</id><snippet>str.endswith()</snippet></ROW><ROW><id>1597811</id><snippet>T</snippet></ROW><ROW><id>1597811</id><snippet>doCallback</snippet></ROW><ROW><id>1597811</id><snippet>shared_ptr&lt;T&gt;</snippet></ROW><ROW><id>1597811</id><snippet>T</snippet></ROW><ROW><id>1597811</id><snippet>shared_ptr&lt;T&gt;</snippet></ROW><ROW><id>1597811</id><snippet>doCallback</snippet></ROW><ROW><id>1597811</id><snippet>data</snippet></ROW><ROW><id>1597811</id><snippet>swigData = SWIG_NewPointerObj((void*)(data.get()), SWIGType_Whatever, 0);
</snippet></ROW><ROW><id>1597811</id><snippet>shared_ptr</snippet></ROW><ROW><id>1597811</id><snippet>data</snippet></ROW><ROW><id>1597811</id><snippet>shared_ptr</snippet></ROW><ROW><id>1597811</id><snippet>pythonData = new shared_ptr&lt;Whatever&gt;(data);
swigData = SWIG_NewPointerObj(pythonData, SWIGType_shared_ptr_to_Whatever, 1);
</snippet></ROW><ROW><id>1597811</id><snippet>Py_BuildValue()</snippet></ROW><ROW><id>1598065</id><snippet>len(sys.argv) != 1</snippet></ROW><ROW><id>1598065</id><snippet>len(sys.argv)</snippet></ROW><ROW><id>1598065</id><snippet>&gt;&gt;&gt; len(sys.argv)
2
&gt;&gt;&gt; sys.argv
['/tmp/basename.py', '/path/to/home/Desktop/pgCodes/']
</snippet></ROW><ROW><id>1598065</id><snippet>import sys, os

def iflatten(xss):
    'Iterable(Iterable(a)) -&gt; Iterable(a)'
    return (x for xs in xss for x in xs)

def allfiles(dir):
    'str -&gt; Iterable(str)'
    return iflatten(files for path, dirs, files in os.walk(dir))

def ext(path):
    'str -&gt; str'
    (root, ext) = os.path.splitext(path)
    return ext[1:]

def main():
    assert len(sys.argv) == 2, 'usage: progname DIR'
    dir = sys.argv[1]

    exts = (ext(f) for f in allfiles(dir))
    for e in exts:
        print e

if __name__ == '__main__':
    main()
</snippet></ROW><ROW><id>1598066</id><snippet>nonlocal</snippet></ROW><ROW><id>1598204</id><snippet>class myclass(object):
    def __init__(self):
        self.__age=None
    @property
    def age(self):
        if self.__age is None:
            self.__age=21  #This can be a long computation
        return self.__age
</snippet></ROW><ROW><id>1598204</id><snippet>__getattr__</snippet></ROW><ROW><id>1598204</id><snippet>class myclass(object):
    def __getattr__(self, attr):
        if attr=="age":
            self.age=21   #This can be a long computation
        return super(myclass, self).__getattribute__(attr)
</snippet></ROW><ROW><id>1598204</id><snippet>__getattr__()</snippet></ROW><ROW><id>1598204</id><snippet>age</snippet></ROW><ROW><id>1598204</id><snippet>age</snippet></ROW><ROW><id>1598204</id><snippet>__getattr__</snippet></ROW><ROW><id>1598247</id><snippet>adDict[adId] = set(userId)
</snippet></ROW><ROW><id>1598247</id><snippet>userId</snippet></ROW><ROW><id>1598247</id><snippet>userId</snippet></ROW><ROW><id>1598247</id><snippet>aleax</snippet></ROW><ROW><id>1598247</id><snippet>set(['a', 'l', 'e', 'x'])</snippet></ROW><ROW><id>1598247</id><snippet>.add(userId)</snippet></ROW><ROW><id>1598247</id><snippet>userId</snippet></ROW><ROW><id>1598247</id><snippet>aleax</snippet></ROW><ROW><id>1598247</id><snippet>'aleax'</snippet></ROW><ROW><id>1598247</id><snippet>.add</snippet></ROW><ROW><id>1598247</id><snippet>set([userId])</snippet></ROW><ROW><id>1598247</id><snippet>defaultdict</snippet></ROW><ROW><id>1598247</id><snippet>setdefault</snippet></ROW><ROW><id>1598247</id><snippet>csv</snippet></ROW><ROW><id>1598295</id><snippet>yourrecarray.resize</snippet></ROW><ROW><id>1598295</id><snippet>numpy</snippet></ROW><ROW><id>1598295</id><snippet>&gt;&gt;&gt; import numpy
&gt;&gt;&gt; mydescriptor = {'names': ('gender','age','weight'), 'formats': ('S1', 'f4', 'f4')} 
&gt;&gt;&gt; a = numpy.array([('M',64.0,75.0),('F',25.0,60.0)], dtype=mydescriptor)
&gt;&gt;&gt; print a
[('M', 64.0, 75.0) ('F', 25.0, 60.0)]
&gt;&gt;&gt; a.shape
(2,)
&gt;&gt;&gt; a.resize(3)
&gt;&gt;&gt; a.shape
(3,)
&gt;&gt;&gt; print a
[('M', 64.0, 75.0) ('F', 25.0, 60.0) ('', 0.0, 0.0)]
&gt;&gt;&gt; a[2] = ('X', 17.0, 61.5)
&gt;&gt;&gt; print a
[('M', 64.0, 75.0) ('F', 25.0, 60.0) ('X', 17.0, 61.5)]
</snippet></ROW><ROW><id>1598371</id><snippet>import socket
socket._fileobject.default_bufsize = 0
</snippet></ROW><ROW><id>1598371</id><snippet>socket._fileobject</snippet></ROW><ROW><id>1598650</id><snippet>&gt;&gt;&gt; n = 4
&gt;&gt;&gt; p = math.pi
&gt;&gt;&gt; '{0:.{1}f}'.format(p, n)
'3.1416'
</snippet></ROW><ROW><id>1598650</id><snippet>{1}</snippet></ROW><ROW><id>1598650</id><snippet>{0:.4f}</snippet></ROW><ROW><id>1598650</id><snippet>4</snippet></ROW><ROW><id>1598650</id><snippet>&gt;&gt;&gt; '{number:.{digits}f}'.format(number=p, digits=n)
'3.1416'
</snippet></ROW><ROW><id>1598650</id><snippet>format</snippet></ROW><ROW><id>1598979</id><snippet>logger = logging.getLogger(__name__)
</snippet></ROW><ROW><id>1598979</id><snippet>#someutils.py

class NullHandler(logging.Handler):
    def emit(self, record):
        pass

null_handler = NullHandler()
</snippet></ROW><ROW><id>1598979</id><snippet>logger = logging.getLogger(__name__)
logger.addHandler(someutils.null_handler)
</snippet></ROW><ROW><id>1598979</id><snippet>getLogger(__name__)</snippet></ROW><ROW><id>1598979</id><snippet>settings.py</snippet></ROW><ROW><id>1599090</id><snippet>Counter.objects.get_or_create(name = name)
Counter.objects.filter(name = name).update(count = F('count')+1)
</snippet></ROW><ROW><id>1599090</id><snippet>counter = Counter.objects.get_or_create(name = name)
counter.count = F('count') +1
counter.save()
</snippet></ROW><ROW><id>1599094</id><snippet>&gt;&gt;&gt; import ntplib,datetime
&gt;&gt;&gt; x = ntplib.NTPClient()
&gt;&gt;&gt; datetime.datetime.utcfromtimestamp(x.request('europe.pool.ntp.org').tx_time
datetime.datetime(2009, 10, 21, 7, 1, 54, 716657)
</snippet></ROW><ROW><id>1600806</id><snippet>[('content-type': 'text/plain'), ('host', 'example.com')]</snippet></ROW><ROW><id>1600806</id><snippet>dict</snippet></ROW><ROW><id>1600806</id><snippet>tuple</snippet></ROW><ROW><id>1600806</id><snippet>list</snippet></ROW><ROW><id>1600806</id><snippet>&gt;&gt;&gt; tuple(sorted(a.items()))
</snippet></ROW><ROW><id>1600806</id><snippet>dict</snippet></ROW><ROW><id>1600806</id><snippet>&gt;&gt;&gt;&gt; frozenset(a.items())
</snippet></ROW><ROW><id>1601276</id><snippet>atexit</snippet></ROW><ROW><id>1601774</id><snippet>deepcopy</snippet></ROW><ROW><id>1601774</id><snippet>def unshared_copy(inList):
    if isinstance(inList, list):
        return list( map(unshared_copy, inList) )
    return inList

alist = unshared_copy(your_function_returning_lists())
</snippet></ROW><ROW><id>1601799</id><snippet>fac(5)</snippet></ROW><ROW><id>1601799</id><snippet>return 5 * fac(4)
           return 4 * fac(3)
                      return 3 * fac(2)
                                 return 2 * fac(1)
                                            return 1 * fac(0)
                                                       1
</snippet></ROW><ROW><id>1601799</id><snippet>1</snippet></ROW><ROW><id>1601799</id><snippet>fac(1)</snippet></ROW><ROW><id>1601799</id><snippet>fac(1)</snippet></ROW><ROW><id>1601799</id><snippet>fac(2)</snippet></ROW><ROW><id>1602151</id><snippet>int(o)</snippet></ROW><ROW><id>1602151</id><snippet>x+y</snippet></ROW><ROW><id>1602151</id><snippet>__coerce__</snippet></ROW><ROW><id>1602251</id><snippet>multiprocessing</snippet></ROW><ROW><id>1602312</id><snippet>from Tkinter import *

master = Tk()

w = Text(master, height=1, borderwidth=0)
w.insert(1.0, "Hello, world!")
w.pack()

w.configure(state="disabled")

# if tkinter is 8.5 or above you'll want the selection background
# to appear like it does when the widget is activated
# comment this out for older versions of Tkinter
w.configure(inactiveselectbackground=w.cget("selectbackground"))

mainloop()
</snippet></ROW><ROW><id>1602490</id><snippet>pre_save</snippet></ROW><ROW><id>1602490</id><snippet>pre_save</snippet></ROW><ROW><id>1602490</id><snippet>post_save</snippet></ROW><ROW><id>1602490</id><snippet>through</snippet></ROW><ROW><id>1602583</id><snippet>stderr</snippet></ROW><ROW><id>1602848</id><snippet>PATH</snippet></ROW><ROW><id>1602848</id><snippet>/usr/bin:/bin</snippet></ROW><ROW><id>1602855</id><snippet>#!/usr/bin/env python

class Make:
    def __getattr__(self, name):
        self.__dict__[name] = Make()
        return self.__dict__[name]

make = Make()

make.a.dot.separated.name = 666
make.anything.i.want = 777

print make.a.dot.separated.name
print make.anything.i.want
</snippet></ROW><ROW><id>1602855</id><snippet>__getattr__</snippet></ROW><ROW><id>1602855</id><snippet>make.anything.i.want</snippet></ROW><ROW><id>1602855</id><snippet>m1 = make.anything    # calls make.__getattr__("anything")
m2 = m1.i             # calls m1.__getattr__("i")
m2.want = 777
</snippet></ROW><ROW><id>1602855</id><snippet>__getattr__</snippet></ROW><ROW><id>1602855</id><snippet>Make</snippet></ROW><ROW><id>1602855</id><snippet>object.__getattr__(self, name)</snippet></ROW><ROW><id>1602855</id><snippet>self</snippet></ROW><ROW><id>1602855</id><snippet>name</snippet></ROW><ROW><id>1602855</id><snippet>AttributeError</snippet></ROW><ROW><id>1602855</id><snippet>__getattr__()</snippet></ROW><ROW><id>1602855</id><snippet>__getattr__()</snippet></ROW><ROW><id>1602855</id><snippet>__setattr__()</snippet></ROW><ROW><id>1602855</id><snippet>__getattr__()</snippet></ROW><ROW><id>1602855</id><snippet>__getattribute__()</snippet></ROW><ROW><id>1602855</id><snippet>object.__setattr__(self, name, value)</snippet></ROW><ROW><id>1602855</id><snippet>name</snippet></ROW><ROW><id>1602855</id><snippet>value</snippet></ROW><ROW><id>1602855</id><snippet>__setattr__()</snippet></ROW><ROW><id>1602855</id><snippet>self.name = value</snippet></ROW><ROW><id>1602855</id><snippet>self.__dict__[name] = value</snippet></ROW><ROW><id>1602855</id><snippet>object.__setattr__(self, name, value)</snippet></ROW><ROW><id>1602855</id><snippet>self.dict</snippet></ROW><ROW><id>1602855</id><snippet>#!/usr/bin/env python

class Make:
    def __init__(self):
        self.__dict__["dict"] = { }

    def __setattr__(self, name, value):
        self.dict[name] = value

    def __getattr__(self, name):
        if name not in self.dict:
            self.dict[name] = Make()

        return self.dict[name]

make = Make()

make.a.dot.separated.name = 666
make.anything.i.want = 777

print make.a.dot.separated.name
print make.anything.i.want
</snippet></ROW><ROW><id>1602964</id><snippet>in</snippet></ROW><ROW><id>1602964</id><snippet>dict</snippet></ROW><ROW><id>1602964</id><snippet>d = dict()

for i in xrange(100):
    key = i % 10
    if key in d:
        d[key] += 1
    else:
        d[key] = 1
</snippet></ROW><ROW><id>1602964</id><snippet>dict.get()</snippet></ROW><ROW><id>1602964</id><snippet>d = dict()

for i in xrange(100):
    key = i % 10
    d[key] = d.get(key, 0) + 1
</snippet></ROW><ROW><id>1602964</id><snippet>defaultdict</snippet></ROW><ROW><id>1602964</id><snippet>collections</snippet></ROW><ROW><id>1602964</id><snippet>from collections import defaultdict

d = defaultdict(lambda: 0)

for i in xrange(100):
    d[i % 10] += 1
</snippet></ROW><ROW><id>1602964</id><snippet>in</snippet></ROW><ROW><id>1603080</id><snippet>import xml.dom.minidom
filename='abc.xml'
doc = xml.dom.minidom.parse(filename)
print doc.toxml()

c = doc.getElementsByTagName("c")
print c[0].toxml()
c[0].childNodes[0].nodeValue = 'zip'
print doc.toxml()

def replace(tagname, newvalue):
  '''doc is global, first occurrence of tagname gets it!'''
  doc.getElementsByTagName(tagname)[0].childNodes[0].nodeValue = newvalue
replace('c', 'zit')

print doc.toxml()
</snippet></ROW><ROW><id>1603080</id><snippet># cat abc.xml
&lt;root&gt;
  &lt;a&gt;
    &lt;c&gt;zap&lt;/c&gt;
  &lt;/a&gt;
  &lt;b&gt;
  &lt;/b&gt;
&lt;/root&gt;
</snippet></ROW><ROW><id>1603283</id><snippet>NotImplementedError</snippet></ROW><ROW><id>1603615</id><snippet>attempts = [
    { 'database'='postgres', 'user'='pgsql', ...},
    { 'database'='postgres', 'user'='postgres', 'host'='localhost', 'password'=getpass()},
    ...
]
conn = None
for attempt in attempts:
    try:
        conn = psycopg2.connect(**attempt)
        break
    except psycopg2.OperationalError:
        pass
if conn is None:
    raise a ruckus
CURSOR = conn.cursor()
</snippet></ROW><ROW><id>1603615</id><snippet>getpass()</snippet></ROW><ROW><id>1603615</id><snippet>if 'password' in attempt: attempt['password'] = getpass()</snippet></ROW><ROW><id>1603615</id><snippet>class MyCursor:
    def __init__(self):
        self.CURSOR = None
    def __call__(self):
        if self.CURSOR is None:
            &lt;insert logic here&gt;
        return self.CURSOR

get_cursor = MyCursor()
</snippet></ROW><ROW><id>1603615</id><snippet>class MyCursor:
    def __init__(self):
        self.CURSOR = None
    def __call__(self):
        if self.CURSOR is None:
            attempts = [
                {'database'='postgres', 'user'='postgres'},
                {'database'='postgres', 'user'='pgsql'},
                {'database'='postgres', 'user'='postgres', 'host'='localhost', 'password'=True},
                {'database'='postgres', 'user'='pgsql', 'host'='localhost', 'password'=True},
            ]
            conn = None
            for attempt in attempts:
                if 'password' in attempt:
                    attempt['password'] = getpass()
                try:
                    conn = psycopg2.connect(**attempt)
                    break # that didn't throw an exception, we're done
                except psycopg2.OperationalError:
                    pass
            if conn is None:
                raise a ruckus # nothin' worked
            self.CURSOR = conn.cursor()
        return self.CURSOR
get_cursor = MyCursor()
</snippet></ROW><ROW><id>1603780</id><snippet>import subprocess

try:
    child = subprocess.Popen(blah)
    child.wait() 

except KeyboardInterrupt:
    child.terminate()
</snippet></ROW><ROW><id>1603987</id><snippet>b = B()
b.__class__
b.__class__.__base__
b.__class__.__bases__
b.__class__.__base__.__subclasses__()
</snippet></ROW><ROW><id>1604037</id><snippet>fig.savefig('img/test.png') # note:  *no* forward slash before "img"
</snippet></ROW><ROW><id>1604037</id><snippet>return '&lt;img src="/img/test.png" /&gt;' # note:  forward slash before "img"
</snippet></ROW><ROW><id>1604037</id><snippet>if __name__ == '__main__':
    import os.path
    currdir = os.path.dirname(os.path.abspath(__file__))
    conf = {'/css/style.css':{'tools.staticfile.on':True,
        'tools.staticfile.filename':os.path.join(currdir,'css','style.css')},
        '/img':{'tools.staticdir.on':True,
        'tools.staticdir.dir':os.path.join(currdir,'img')}}
    cherrypy.quickstart(root, "/", config=conf)
</snippet></ROW><ROW><id>1604100</id><snippet>def gauss_kern(size, sizey=None):
    """ Returns a normalized 2D gauss kernel array for convolutions """
        size = int(size)
        if not sizey:
            sizey = size
        else:
            sizey = int(sizey)
        x, y = mgrid[-size:size+1, -sizey:sizey+1]
        g = exp(-(x**2/float(size)+y**2/float(sizey)))
        return g / g.sum()
</snippet></ROW><ROW><id>1604310</id><snippet>&gt;&gt;&gt; (1).__hash__()
1
&gt;&gt;&gt; (1 &lt;&lt; 32).__hash__()
1
&gt;&gt;&gt; repr({1: 'one', 1 &lt;&lt; 32: 'not one'})
"{1: 'one', 4294967296L: 'not one'}"
&gt;&gt;&gt; repr({1 &lt;&lt; 32: 'not one', 1: 'one'})
"{4294967296L: 'not one', 1: 'one'}"
</snippet></ROW><ROW><id>1605012</id><snippet>options = {
    'py2exe': {
        'dll_excludes': [
            'MSVCP90.dll'
         ]
     }
}

setup(windows=["main.py"], options=options)
</snippet></ROW><ROW><id>1605071</id><snippet>import copy

class Crazy(object):
  def __init__(self, body, weird=copy.copy):
    self.gomez = body
    self.cousinitt = weird
  def __mul__(self, n):
    return [self.cousinitt(x) for x in (self.gomez * n)]

a = Crazy([[]]) * 3
</snippet></ROW><ROW><id>1605071</id><snippet>*</snippet></ROW><ROW><id>1605071</id><snippet>__mul__</snippet></ROW><ROW><id>1605340</id><snippet>os.stat()</snippet></ROW><ROW><id>1605340</id><snippet>import fileinput
import os

# save original file ownership details
stat = os.stat('permission.txt')
uid, gid = stat[4], stat[5]

for line in fileinput.FileInput("permission.txt",inplace=1):
    line = line.strip()
    if not 'def' in line:
        print line
    else:
        line=line.replace(line,'zzz')
        print line


fileinput.close()

# restore original file ownership
os.chown("permission.txt", uid, gid)
</snippet></ROW><ROW><id>1605380</id><snippet>import gtk.gdk
import sys

def PixelAt(x, y):
    w = gtk.gdk.get_default_root_window()
    sz = w.get_size()
    pb = gtk.gdk.Pixbuf(gtk.gdk.COLORSPACE_RGB,False,8,sz[0],sz[1])
    pb = pb.get_from_drawable(w,w.get_colormap(),0,0,0,0,sz[0],sz[1])
    pixel_array = pb.get_pixels_array()
    return pixel_array[y][x]

print PixelAt(int(sys.argv[1]), int(sys.argv[2]))
</snippet></ROW><ROW><id>1605380</id><snippet>get_pixels_array</snippet></ROW><ROW><id>1605539</id><snippet>subprocess.Popen(["python", "test.py"])</snippet></ROW><ROW><id>1605539</id><snippet>subprocess.Popen(["nohup", "python", "test.py"])</snippet></ROW><ROW><id>1605679</id><snippet>isinstance()</snippet></ROW><ROW><id>1605679</id><snippet>all(map())</snippet></ROW><ROW><id>1605679</id><snippet>all([])</snippet></ROW><ROW><id>1605679</id><snippet>True</snippet></ROW><ROW><id>1605679</id><snippet>TypeError</snippet></ROW><ROW><id>1605679</id><snippet>def isListEmpty(inList):
    if isinstance(inList, list): # Is a list
        return all( map(isListEmpty, inList) )
    return False # Not a list
</snippet></ROW><ROW><id>1605909</id><snippet>#!/usr/bin/env python
# -*- coding= UTF-8 -*-

import UserDict

class DefaultDict(UserDict.UserDict) :

    default_value = 'RESERVED'

    def __getitem__(self, key) :
        return self.data.get(key, DefaultDict.default_value)


d = DefaultDict()
d["yes"] = True;
print d["yes"]
print d["no"]
</snippet></ROW><ROW><id>1605950</id><snippet>p</snippet></ROW><ROW><id>1605950</id><snippet>print '%2d' % tot + ': %(nick)-15s \t (%(x)d|%(y)d) \t was: %(oldnick)15s' % p
</snippet></ROW><ROW><id>1606391</id><snippet>from optparse import OptionParser

parser = OptionParser()
parser.add_option("-u", "--user", dest="user",
                  help="Database username")
parser.add_option("-p", "--password", dest="password",
                  help="Database password")
parser.add_option("-D", "--database", dest="database", default="myDatabase",
                  help="Database name")
parser.add_option("-e", "--engine", dest="engine", default="mysql",
                  help="Database engine")
parser.add_option("-H", "--host", dest="host", default="localhost",
                  help="Database host")

(options, args) = parser.parse_args()

def opt_hash(name):
    global options
    return getattr(options, name)

options.__getitem__ = opt_hash

metadata.bind = '%(engine)s://%(user)s:%(password)s@%(host)s/%(database)s' % options
</snippet></ROW><ROW><id>1606478</id><snippet>namedtuple</snippet></ROW><ROW><id>1606478</id><snippet>nt.py</snippet></ROW><ROW><id>1606478</id><snippet>from collections import namedtuple

Point_ = namedtuple("Point", ["x", "y"])

class Point(Point_):
    """ A point in 2d space """
    pass
</snippet></ROW><ROW><id>1606478</id><snippet>&gt;&gt;&gt; print nt.Point.__doc__
 A point in 2d space
</snippet></ROW><ROW><id>1606478</id><snippet>&gt;&gt;&gt; help(nt.Point)  # which outputs...
</snippet></ROW><ROW><id>1606478</id><snippet>def NamedTupleWithDocstring(docstring, *ntargs):
    nt = namedtuple(*ntargs)
    class NT(nt):
        __doc__ = docstring
    return NT

Point3D = NamedTupleWithDocstring("A point in 3d space", "Point3d", ["x", "y", "z"])

p3 = Point3D(1,2,3)

print p3.__doc__
</snippet></ROW><ROW><id>1606478</id><snippet>A point in 3d space
</snippet></ROW><ROW><id>1606561</id><snippet>doodahs = (
    (0, "FOO"),
    (257, "BAR"),
    (258, "FISH"),
    (279, "MOOSE"),
    (280, "Darth Vader"),
    (65535, "Death to all newbies")
)
</snippet></ROW><ROW><id>1606935</id><snippet>set(i['id'] for i in items)
</snippet></ROW><ROW><id>1607014</id><snippet>if platform == 'facebook':
    from pyfacebook import FaceBook as Platform
elif platform == 'myspace':
    from pymyspace import Myspace as Platform
else:
    raise RuntimeError, "not a valid platform"
</snippet></ROW><ROW><id>1607014</id><snippet>Platform</snippet></ROW><ROW><id>1607014</id><snippet>os</snippet></ROW><ROW><id>1607014</id><snippet>name  = </snippet></ROW><ROW><id>1607014</id><snippet>__import__</snippet></ROW><ROW><id>1607014</id><snippet>('module')</snippet></ROW><ROW><id>1607462</id><snippet>foo = AnEntity(...)
foo.put()
presence = PresenceEntity(key_name='x', parent=foo)
presence.put()
...
def exists(keys):
  test_keys = [db.Key.from_path('PresenceEntity', 'x', parent=x) for x in keys)
  return [x is not None for x in db.get(test_keys)]
</snippet></ROW><ROW><id>1607536</id><snippet>sip</snippet></ROW><ROW><id>1607764</id><snippet>os.pardir</snippet></ROW><ROW><id>1607764</id><snippet>".."</snippet></ROW><ROW><id>1607764</id><snippet>import os
fobj = open(os.path.join(os.pardir, "filename"), "w")
</snippet></ROW><ROW><id>1608053</id><snippet>num_true = sum(1 for condition in d.values() if condition)
</snippet></ROW><ROW><id>1608053</id><snippet>num_true = sum(d.values())
</snippet></ROW><ROW><id>1608148</id><snippet>$</snippet></ROW><ROW><id>1608148</id><snippet>r'(^|\D)\d{4}$'</snippet></ROW><ROW><id>1608148</id><snippet>\D</snippet></ROW><ROW><id>1608148</id><snippet>\d</snippet></ROW><ROW><id>1608148</id><snippet>[0-9]</snippet></ROW><ROW><id>1608148</id><snippet>[^0-9]</snippet></ROW><ROW><id>1608148</id><snippet>os.walk</snippet></ROW><ROW><id>1608148</id><snippet>def ListadorPastas(pasta):
    resultado = []
    for root, dirs, files in os.walk(pasta):
        for d in dirs:
          if (len(d)==4 or len(d)&gt;4 and not d[-5].isdigit()
             ) and d[-4:].isdigit():
              resultado.append(d)
    return resultado
</snippet></ROW><ROW><id>1608496</id><snippet>class ApplicationError(Fault):

    def __init__(self, exc_info):
        Fault.__init__(self, xmlrpclib.APPLICATION_ERROR,
                       u'Application internal error')


class NotWellformedError(Fault):

    def __init__(self, exc):
        Fault.__init__(self, xmlrpclib.NOT_WELLFORMED_ERROR, str(exc))


class UnsupportedEncoding(Fault):

    def __init__(self, exc):
        Fault.__init__(self, xmlrpclib.UNSUPPORTED_ENCODING, str(exc))


# XXX INVALID_ENCODING_CHAR is masked by xmlrpclib, so the error code will be
# INVALID_XMLRPC.
class InvalidRequest(Fault):

    def __init__(self, message):
        ault.__init__(self, xmlrpclib.INVALID_XMLRPC, message)


class MethodNotFound(Fault):

    def __init__(self, name):
        Fault.__init__(self, xmlrpclib.METHOD_NOT_FOUND,
                       u'Method %r is not supported' % name)


class WrongMethodUsage(Fault):

    def __init__(self, message):
        Fault.__init__(self, xmlrpclib.INVALID_METHOD_PARAMS, message)


class WrongType(Fault):

    def __init__(self, arg_name, type_name):
        Fault.__init__(self, xmlrpclib.INVALID_METHOD_PARAMS,
                       u'Parameter %s must be %s' % (arg_name, type_name))


class XMLRPCDispatcher(SimpleXMLRPCDispatcher, XMLRPCDocGenerator):

    server_name = server_title = 'Personalization center RPC interface'
    server_documentation = 'Available methods'

    def __init__(self, methods):
        SimpleXMLRPCDispatcher.__init__(self, allow_none=True, encoding=None)
        self.register_instance(methods)
        self.register_multicall_functions()
        #self.register_introspection_functions()

    def _dispatch(self, method_name, args):
        if self.funcs.has_key(method_name):
            method = self.funcs[method_name]
        else:
            method = self.instance._getMethod(method_name)
        arg_names, args_name, kwargs_name, defaults = \
                                                inspect.getargspec(method)
        assert arg_names[0]=='self'
        arg_names = arg_names[1:]
        n_args = len(args)
        if not (args_name or defaults):
            if n_args!=len(arg_names):
                raise WrongMethodUsage(
                    u'Method %s takes exactly %d parameters (%d given)' % \
                                (method_name, len(arg_names), n_args))
        else:
            min_args = len(arg_names)-len(defaults)
            if len(args)&lt;min_args:
                raise WrongMethodUsage(
                    u'Method %s requires at least %d parameters (%d given)' % \
                                (method_name, min_args, n_args))
            if not args_name and n_args&gt;len(arg_names):
                raise WrongMethodUsage(
                    u'Method %s requires at most %d parameters (%d given)' % \
                                (method_name, len(arg_names), n_args))
        try:
            return method(*args)
        except Fault:
            raise
        except:
            logger.exception('Application internal error for %s%r',
                             method_name, args)
            raise ApplicationError(sys.exc_info())

    def dispatch(self, data):
        try:
            try:
                args, method_name = xmlrpclib.loads(data)
            except ExpatError, exc:
                raise NotWellformedError(exc)
            except LookupError, exc:
                raise UnsupportedEncoding(exc)
            except xmlrpclib.ResponseError:
                raise InvalidRequest('Request structure is invalid')
            method_name = method_name.encode('ascii', 'replace')
            result = self._dispatch(method_name, args)
        except Fault, exc:
            logger.warning('Fault %s: %s', exc.faultCode, exc.faultString)
            return xmlrpclib.dumps(exc)
        else:
            try:
                return xmlrpclib.dumps((result,), methodresponse=1)
            except:
                logger.exception('Application internal error when marshalling'\
                                 ' result for %s%r', method_name, args)
                return xmlrpclib.dumps(ApplicationError(sys.exc_info()))


class InterfaceMethods:

    def _getMethod(self, name):
        if name.startswith('_'):
            raise MethodNotFound(name)
        try:
            method = getattr(self, name)
        except AttributeError:
            raise MethodNotFound(name)
        if not inspect.ismethod(method):
            raise MethodNotFound(name)
        return method
</snippet></ROW><ROW><id>1608846</id><snippet>#!/usr/bin/python
# -*- coding: utf-8 -*-
# Copyright (C) 2008-2009 Rémy HUBSCHER &lt;natim@users.sf.net&gt; - http://www.trunat.fr/portfolio/python.html

# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
# GNU General Public License for more details.

# You should have received a copy of the GNU General Public License along
# with this program; if not, write to the Free Software Foundation, Inc.,
# 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.

# Using :
#   - Python Imaging Library PIL    http://www.pythonware.com/products/pil/index.htm
#   - pyexiv2                       http://tilloy.net/dev/pyexiv2/

###
# What is doing this script ?
#
#  1. Take a directory of picture from a Reflex Camera (Nikon D90 for example)
#  2. Use the EXIF Orientation information to turn the image
#  3. Remove the thumbnail from the EXIF Information
#  4. Create 2 image one maxi map in 600x600, one mini map in 200x200
#  5. Add a comment with the name of the Author and his Website
#  6. Copy the EXIF information to the maxi and mini image
#  7. Name the image files with a meanful name (Date of picture)

import os, sys
try:
    import Image
except:
    print "To use this program, you need to install Python Imaging Library - http://www.pythonware.com/products/pil/"
    sys.exit(1)

try:
    import pyexiv2
except:
    print "To use this program, you need to install pyexiv2 - http://tilloy.net/dev/pyexiv2/"
    sys.exit(1)

############# Configuration ##############
size_mini = 200, 200
size_maxi = 1024, 1024

# Information about the Photograph should be in ASCII
COPYRIGHT="Remy Hubscher - http://www.trunat.fr/"
ARTIST="Remy Hubscher"
##########################################

def listJPEG(directory):
    "Retourn a list of the JPEG files in the directory"
    fileList = [os.path.normcase(f) for f in os.listdir(directory)]
    fileList = [f for f in fileList if os.path.splitext(f)[1]  in ('.jpg', '.JPG')]
    fileList.sort()
    return fileList

def _mkdir(newdir):
    """
    works the way a good mkdir should :)
      - already exists, silently complete
      - regular file in the way, raise an exception
      - parent directory(ies) does not exist, make them as well
    """
    if os.path.isdir(newdir):
        pass
    elif os.path.isfile(newdir):
        raise OSError("a file with the same name as the desired " \
                      "dir, '%s', already exists." % newdir)
    else:
        head, tail = os.path.split(newdir)
        if head and not os.path.isdir(head):
            _mkdir(head)
        if tail:
            os.mkdir(newdir)

if len(sys.argv) &lt; 3:
    print "USAGE : python %s indir outdir [comment]" % sys.argv[0]
    exit

indir  = sys.argv[1]
outdir = sys.argv[2]

if len(sys.argv) == 4:
    comment = sys.argv[1]
else:
    comment = COPYRIGHT

agrandie = os.path.join(outdir, 'agrandie')
miniature = os.path.join(outdir, 'miniature')

print agrandie, miniature

_mkdir(agrandie)
_mkdir(miniature)

for infile in listJPEG(indir):
    mini  = os.path.join(miniature, infile)
    grand = os.path.join(agrandie, infile)
    file_path = os.path.join(indir, infile)

    image = pyexiv2.Image(file_path)
    image.readMetadata()

    # We clean the file and add some information
    image.deleteThumbnail()

    image['Exif.Image.Artist'] = ARTIST
    image['Exif.Image.Copyright'] = COPYRIGHT

    image.setComment(comment)

    # I prefer not to modify the input file
    # image.writeMetadata()

    # We look for a meanful name
    if 'Exif.Image.DateTime' in image.exifKeys():
        filename = image['Exif.Image.DateTime'].strftime('%Y-%m-%d_%H-%M-%S.jpg')
        mini  = os.path.join(miniature, filename)
        grand = os.path.join(agrandie, filename)
    else:
        # If no exif information, leave the old name
        mini  = os.path.join(miniature, infile)
        grand = os.path.join(agrandie, infile)

    # We create the thumbnail
    #try:
    im = Image.open(file_path)
    im.thumbnail(size_maxi, Image.ANTIALIAS)

    # We rotate regarding to the EXIF orientation information
    if 'Exif.Image.Orientation' in image.exifKeys():
        orientation = image['Exif.Image.Orientation']
        if orientation == 1:
            # Nothing
            mirror = im.copy()
        elif orientation == 2:
            # Vertical Mirror
            mirror = im.transpose(Image.FLIP_LEFT_RIGHT)
        elif orientation == 3:
            # Rotation 180°
            mirror = im.transpose(Image.ROTATE_180)
        elif orientation == 4:
            # Horizontal Mirror
            mirror = im.transpose(Image.FLIP_TOP_BOTTOM)
        elif orientation == 5:
            # Horizontal Mirror + Rotation 90° CCW
            mirror = im.transpose(Image.FLIP_TOP_BOTTOM).transpose(Image.ROTATE_90)
        elif orientation == 6:
            # Rotation 270°
            mirror = im.transpose(Image.ROTATE_270)
        elif orientation == 7:
            # Horizontal Mirror + Rotation 270°
            mirror = im.transpose(Image.FLIP_TOP_BOTTOM).transpose(Image.ROTATE_270)
        elif orientation == 8:
            # Rotation 90°
            mirror = im.transpose(Image.ROTATE_90)

        # No more Orientation information
        image['Exif.Image.Orientation'] = 1
    else:
        # No EXIF information, the user has to do it
        mirror = im.copy()

    mirror.save(grand, "JPEG", quality=85)
    img_grand = pyexiv2.Image(grand)
    img_grand.readMetadata()
    image.copyMetadataTo(img_grand)
    img_grand.writeMetadata()
    print grand

    mirror.thumbnail(size_mini, Image.ANTIALIAS)
    mirror.save(mini, "JPEG", quality=85)
    img_mini = pyexiv2.Image(mini)
    img_mini.readMetadata()
    image.copyMetadataTo(img_mini)
    img_mini.writeMetadata()
    print mini

    print
</snippet></ROW><ROW><id>1608882</id><snippet>__eq__</snippet></ROW><ROW><id>1608882</id><snippet>__hash__</snippet></ROW><ROW><id>1608882</id><snippet>__hash__</snippet></ROW><ROW><id>1608882</id><snippet>__eq__</snippet></ROW><ROW><id>1609360</id><snippet>#settings.py
CACHE_MIDDLEWARE_ANONYMOUS_ONLY=True
</snippet></ROW><ROW><id>1609360</id><snippet>@cache_control(must_revalidate=True)</snippet></ROW><ROW><id>1609799</id><snippet>@login_required
def serve_file(request, context):
    if &lt;check if they have access to the file&gt;:
        filename = "/var/www/myfile.xyz" 
        response = HttpResponse(mimetype='application/force-download') 
        response['Content-Disposition']='attachment;filename="%s"'%filename
        response["X-Sendfile"] = filename
        response['Content-length'] = os.stat("debug.py").st_size
        return response
    return &lt;error state&gt;
</snippet></ROW><ROW><id>1609993</id><snippet>admin_objects</snippet></ROW><ROW><id>1609993</id><snippet>class UserAdminManager(models.AdminManager):
"""
Custom manager for the User model.
"""
def get_query_set(self):
    """
    Overwrites the get_query_set to only return Users in the queue.
    """
    return super(UserAdminManager, self).get_query_set().filter(userprofile__queue=True)
</snippet></ROW><ROW><id>1609993</id><snippet>get_query_set</snippet></ROW><ROW><id>1609993</id><snippet>admin_objects</snippet></ROW><ROW><id>1609993</id><snippet>User</snippet></ROW><ROW><id>1609993</id><snippet>admin_objects = UserAdminManager()
</snippet></ROW><ROW><id>1610342</id><snippet>pass</snippet></ROW><ROW><id>1610342</id><snippet>&gt;&gt;&gt; if x == 0:
        x = 0
        print('Negative changed to zero')
        pass
elif x == 0:
    print('other stuff')
</snippet></ROW><ROW><id>1610349</id><snippet>s = xmlrpc.client.ServerProxy('&lt;a href="http://localhost:8000" rel="nofollow"&gt;http://localhost:8000&lt;/a&gt;')</snippet></ROW><ROW><id>1610375</id><snippet>public class MakeTrans
{
    private readonly Dictionary&lt;char, char&gt; d;
    public MakeTrans(string intab, string outab)
    {
        d = Enumerable.Range(0, intab.Length).ToDictionary(i =&gt; intab[i], i =&gt; outab[i]);
        //d = new Dictionary&lt;char, char&gt;();
        //for (int i = 0; i &lt; intab.Length; i++)
        //    d[intab[i]] = outab[i];
    }
    public string Translate(string src)
    {
        System.Text.StringBuilder sb = new StringBuilder(src.Length);
        foreach (char src_c in src)
            sb.Append(d.ContainsKey(src_c) ? d[src_c] : src_c);
        return sb.ToString();
    }
}
</snippet></ROW><ROW><id>1610375</id><snippet>&gt;&gt;&gt; from string import maketrans   # Required to call maketrans function.
&gt;&gt;&gt;
&gt;&gt;&gt; intab = "aeiou"
&gt;&gt;&gt; outtab = "12345"
&gt;&gt;&gt; trantab = maketrans(intab, outtab)
&gt;&gt;&gt;
&gt;&gt;&gt; str = "this is string example....wow!!!";
&gt;&gt;&gt; print str.translate(trantab);
th3s 3s str3ng 2x1mpl2....w4w!!!
</snippet></ROW><ROW><id>1610375</id><snippet>    static void Main(string[] args)
    {
        MakeTrans.MakeTrans mt = new MakeTrans.MakeTrans("aeiou", "12345");
        Console.WriteLine("{0}", mt.Translate("this is string example....wow!!!"));
    }
</snippet></ROW><ROW><id>1610375</id><snippet>th3s 3s str3ng 2x1mpl2....w4w!!!
</snippet></ROW><ROW><id>1610583</id><snippet>next()</snippet></ROW><ROW><id>1610583</id><snippet>__iter__()</snippet></ROW><ROW><id>1610583</id><snippet>next()</snippet></ROW><ROW><id>1610583</id><snippet>__iter__</snippet></ROW><ROW><id>1610594</id><snippet>thread.interrupt_main</snippet></ROW><ROW><id>1610594</id><snippet>thread</snippet></ROW><ROW><id>1610594</id><snippet>threading</snippet></ROW><ROW><id>1610660</id><snippet>pkill</snippet></ROW><ROW><id>1611028</id><snippet>return '''
    &lt;html&gt;
    &lt;body&gt;
    &lt;table width="400" border="1"&gt;
    &lt;tr&gt;
    &lt;td&gt;%(numberofapplicants)s&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
    &lt;td width="400" height="400"&gt;&lt;img src="img/atest.png" width="400" height="400" /&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;/table&gt;
    &lt;/body&gt;
    &lt;/html&gt;
    ''' % {"numberofapplicants": numberofapplicants}
</snippet></ROW><ROW><id>1611195</id><snippet>thedoc.createTextNode(u'pié'.encode('utf-8'))</snippet></ROW><ROW><id>1611195</id><snippet>str</snippet></ROW><ROW><id>1611250</id><snippet>entities = Model.get_by_key_name(key_names)
content_keys = [db.Key.from_path('Model', name, 'ContentModel', name) 
                for name in key_names]
content_entities = ContentModel.get(content_keys)
</snippet></ROW><ROW><id>1611406</id><snippet>urlopen</snippet></ROW><ROW><id>1611406</id><snippet>len</snippet></ROW><ROW><id>1611406</id><snippet>read()</snippet></ROW><ROW><id>1611406</id><snippet>urlopen</snippet></ROW><ROW><id>1611406</id><snippet>request('HEAD', url)</snippet></ROW><ROW><id>1611406</id><snippet>getresponse</snippet></ROW><ROW><id>1611406</id><snippet>getheader</snippet></ROW><ROW><id>1611558</id><snippet>sys.executable</snippet></ROW><ROW><id>1611572</id><snippet>finally</snippet></ROW><ROW><id>1611572</id><snippet>sys.exc_info</snippet></ROW><ROW><id>1611572</id><snippet>try:
  whatever
except:
  here sys.exc_info is valid
  to re-raise the exception, use a bare `raise`
else:
  here you know there was no exception
finally:
  and here you can do exception-independent finalization
</snippet></ROW><ROW><id>1611646</id><snippet>sets</snippet></ROW><ROW><id>1611646</id><snippet>sets</snippet></ROW><ROW><id>1611646</id><snippet>import sets
</snippet></ROW><ROW><id>1611646</id><snippet>DeprecationWarning</snippet></ROW><ROW><id>1611646</id><snippet>a = { 1, 2, 3 }
</snippet></ROW><ROW><id>1611729</id><snippet>HEADER CODE
attempts = 5
for attempt in xrange(attempts):
    urllib2.initialization()
    try:
        while True:
            urllib2.read(somebytes)
            urllib2.read(somebytes)
            urllib2.read(somebytes)
            ...
    except Exception, e:
        print e
    else:
        break
FOOTER CODE
</snippet></ROW><ROW><id>1611877</id><snippet>import ConfigParser, os
def get_config():
    config = ConfigParser.ConfigParser()
    config.optionxform=str
    try:
        config.read(os.path.expanduser('~/.myrc'))
        return config
    except Exception, e:
        log.error(e)

c = get_config()  
print c.options('rules')
</snippet></ROW><ROW><id>1611958</id><snippet>BufferingSMTPHandler</snippet></ROW><ROW><id>1612513</id><snippet>import collections

def make_hashable(obj):
    """WARNING: This function only works on a limited subset of objects
    Make a range of objects hashable. 
    Accepts embedded dictionaries, lists or tuples (including namedtuples)"""
    if isinstance(obj, collections.Hashable):
        #Fine to be hashed without any changes
        return obj
    elif isinstance(obj, collections.Mapping):
        #Convert into a frozenset instead
        items=list(obj.items())
        for i, item in enumerate(items):
                items[i]=make_hashable(item)
        return frozenset(items)
    elif isinstance(obj, collections.Iterable):
        #Convert into a tuple instead
        ret=[type(obj)]
        for i, item in enumerate(obj):
                ret.append(make_hashable(item))
        return tuple(ret)
    #Use the id of the object
    return id(obj)
</snippet></ROW><ROW><id>1612646</id><snippet>gunzip</snippet></ROW><ROW><id>1612646</id><snippet>fwrite()</snippet></ROW><ROW><id>1612646</id><snippet>stdio.h</snippet></ROW><ROW><id>1612646</id><snippet>libc6</snippet></ROW><ROW><id>1612646</id><snippet>fwrite()</snippet></ROW><ROW><id>1613075</id><snippet>#!/usr/bin/env python
class O(object):
    def __repr__(self):
        return '&lt;%s.%s object at 0x%x&gt;'%(self.__module__,self.__class__.__name__,id(self))
o=O()
print(repr(o))

# &lt;__main__.O object at 0xb7e7d0cc&gt;
</snippet></ROW><ROW><id>1614122</id><snippet>if 'session_key' in request.session and 'uid' in request.session:
    fb.session_key = request.session['session_key']
    fb.uid = request.session['uid']
else:

    try:
        fb.auth_token = request.GET['auth_token']
    except KeyError:
        # Send user to the Facebook to login
        return HttpResponseRedirect(fb.get_login_url())

    # getSession sets the session_key and uid
    # Store these in the cookie so we don't have to get them again
    fb.auth.getSession()
    request.session['session_key'] = fb.session_key
    request.session['uid'] = fb.uid
</snippet></ROW><ROW><id>1614122</id><snippet>import facebook

API_KEY     =   'your_api_key'
SECRET_KEY  =   'your_secret_key'

fb = odb.facebook.Facebook(API_KEY, SECRET_KEY)

fb_uid = self.request[API_KEY+'_user']
fb_session_key = self.request[API_KEY+'_session_key']
fb_ss = self.request[API_KEY+'_ss']
fb_signature = self.request[API_KEY] #no suffix for signature

fb.session_key = fb_session_key
fb.uid = fb_uid

fb.friends.get() # Results in list of friends
</snippet></ROW><ROW><id>1614148</id><snippet>""" extrapolate y,m,d data with scipy UnivariateSpline """
import numpy as np
from scipy.interpolate import UnivariateSpline
    # pydoc scipy.interpolate.UnivariateSpline -- fitpack, unclear
from datetime import date
from pylab import *  # ipython -pylab

__version__ = "denis 23oct"


def daynumber( y,m,d ):
    """ 2005,1,1 -&gt; 0  2006,1,1 -&gt; 365 ... """
    return date( y,m,d ).toordinal() - date( 2005,1,1 ).toordinal()

days, values = np.array([
    (daynumber(2005,1,1), 1.2 ),
    (daynumber(2005,4,1), 1.8 ),
    (daynumber(2005,9,1), 5.3 ),
    (daynumber(2005,10,1), 5.3 )
    ]).T
dayswanted = np.array([ daynumber( year, month, 1 )
        for year in range( 2005, 2006+1 )
        for month in range( 1, 12+1 )])

np.set_printoptions( 1 )  # .1f
print "days:", days
print "values:", values
print "dayswanted:", dayswanted

title( "extrapolation with scipy.interpolate.UnivariateSpline" )
plot( days, values, "o" )
for k in (1,2,3):  # line parabola cubicspline
    extrapolator = UnivariateSpline( days, values, k=k )
    y = extrapolator( dayswanted )
    label = "k=%d" % k
    print label, y
    plot( dayswanted, y, label=label  )  # pylab

legend( loc="lower left" )
grid(True)
savefig( "extrapolate-UnivariateSpline.png", dpi=50 )
show()
</snippet></ROW><ROW><id>1614200</id><snippet>#</snippet></ROW><ROW><id>1614200</id><snippet>return sys.stdin.readline()       # This is a comment
</snippet></ROW><ROW><id>1614200</id><snippet>def getline():
    """This is a docstring"""
    return sys.stdin.readline()
</snippet></ROW><ROW><id>1614247</id><snippet>[float(i) for i in lst]
</snippet></ROW><ROW><id>1614247</id><snippet>map</snippet></ROW><ROW><id>1614643</id><snippet>row</snippet></ROW><ROW><id>1614643</id><snippet>b</snippet></ROW><ROW><id>1614643</id><snippet>row</snippet></ROW><ROW><id>1614643</id><snippet>for f, s, t in W:
    print b[f], b[s], b[t]
</snippet></ROW><ROW><id>1614818</id><snippet>for key, value in post.iteritems():
    setattr(my_model, key, value)
</snippet></ROW><ROW><id>1615076</id><snippet># set values in current namespace
for name in vars(messages):
    v = getattr(messages, name)
    globals()[name] = v
</snippet></ROW><ROW><id>1615153</id><snippet>class TextFormatter:
    def __init__(self,lynx='/usr/bin/lynx'):
        self.lynx = lynx

    def html2text(self, unicode_html_source):
        "Expects unicode; returns unicode"
        return Popen([self.lynx, 
                      '-assume-charset=UTF-8', 
                      '-display-charset=UTF-8', 
                      '-dump', 
                      '-stdin'], 
                      stdin=PIPE, 
                      stdout=PIPE).communicate(input=unicode_html_source.encode('utf-8'))[0].decode('utf-8')
</snippet></ROW><ROW><id>1615169</id><snippet>Thread.__init__()
</snippet></ROW><ROW><id>1615169</id><snippet>Thread.__init__(self)
</snippet></ROW><ROW><id>1615169</id><snippet>super()</snippet></ROW><ROW><id>1615300</id><snippet>zip</snippet></ROW><ROW><id>1615300</id><snippet>&gt;&gt;&gt; x = ['this', 'is', 'the', 'first', 'list']
&gt;&gt;&gt; y = [1, 2, 3, 4, 5]
&gt;&gt;&gt; z = [0.01, 0.2, 0.3, 0.04, 0.05]
&gt;&gt;&gt; zip(x,y,z)
[('this', 1, 0.01), ('is', 2, 0.20000000000000001), ('the', 3, 0.29999999999999999), ('first', 4, 0.040000000000000001), ('list', 5, 0.050000000000000003)]
&gt;&gt;&gt; for (a,b,c) in zip(x,y,z):
...     print a, b, c
... 
this 1 0.01
is 2 0.2
the 3 0.3
first 4 0.04
list 5 0.05
</snippet></ROW><ROW><id>1615535</id><snippet>cmds = '''
</snippet></ROW><ROW><id>1615535</id><snippet>'''</snippet></ROW><ROW><id>1615535</id><snippet>a = 1
b = 2
c = 3
'''
</snippet></ROW><ROW><id>1615535</id><snippet>exec(cmds)</snippet></ROW><ROW><id>1615535</id><snippet>exec('''
</snippet></ROW><ROW><id>1615535</id><snippet>''')</snippet></ROW><ROW><id>1615535</id><snippet>a = 1
b = 2
c = 3
''')
</snippet></ROW><ROW><id>1615546</id><snippet>dict()</snippet></ROW><ROW><id>1615546</id><snippet>myList = []
myList.append(["mykey1", "myvalue1"])
myList.append(["mykey2", "myvalue2"])
myDict = dict(myList)
</snippet></ROW><ROW><id>1615546</id><snippet>&gt;&gt;&gt; myDict
{'mykey2': 'myvalue2', 'mykey1': 'myvalue1'}
</snippet></ROW><ROW><id>1615546</id><snippet>myDict = dict([['prop1', 'prop2']])
{'prop1': 'prop2'}
</snippet></ROW><ROW><id>1615546</id><snippet>dict</snippet></ROW><ROW><id>1615546</id><snippet>for key, value in myList:
    print key, "=", value
</snippet></ROW><ROW><id>1615743</id><snippet>ElementTree</snippet></ROW><ROW><id>1615743</id><snippet>pickle</snippet></ROW><ROW><id>1615743</id><snippet>etree</snippet></ROW><ROW><id>1615743</id><snippet>user_list</snippet></ROW><ROW><id>1615937</id><snippet>pdb.Pdb</snippet></ROW><ROW><id>1615937</id><snippet>__init__</snippet></ROW><ROW><id>1615937</id><snippet>.pdbrc</snippet></ROW><ROW><id>1615937</id><snippet>    # Read $HOME/.pdbrc and ./.pdbrc
    self.rcLines = []
    if 'HOME' in os.environ:
        envHome = os.environ['HOME']
        try:
            rcFile = open(os.path.join(envHome, ".pdbrc"))
        except IOError:
            pass
        else:
            for line in rcFile.readlines():
                self.rcLines.append(line)
            rcFile.close()
    try:
        rcFile = open(".pdbrc")
    except IOError:
        pass
    else:
        for line in rcFile.readlines():
            self.rcLines.append(line)
        rcFile.close()
</snippet></ROW><ROW><id>1616143</id><snippet>ctypes</snippet></ROW><ROW><id>1616361</id><snippet>export PYTHONPATH="/Library/Frameworks/Python.framework/Versions/2.5/lib/python2.5/site-packages/PyObjC/"
</snippet></ROW><ROW><id>1616361</id><snippet>./project-tool.py</snippet></ROW><ROW><id>1616361</id><snippet>&gt;&gt;&gt; import objc
</snippet></ROW><ROW><id>1616457</id><snippet>grep</snippet></ROW><ROW><id>1616457</id><snippet>a</snippet></ROW><ROW><id>1616457</id><snippet>b</snippet></ROW><ROW><id>1616457</id><snippet>b</snippet></ROW><ROW><id>1616457</id><snippet>cut</snippet></ROW><ROW><id>1616457</id><snippet>sdtin</snippet></ROW><ROW><id>1616457</id><snippet>Popen</snippet></ROW><ROW><id>1616457</id><snippet>close_fds=False</snippet></ROW><ROW><id>1616457</id><snippet>cut</snippet></ROW><ROW><id>1616457</id><snippet>a</snippet></ROW><ROW><id>1616457</id><snippet>grep</snippet></ROW><ROW><id>1616457</id><snippet>a</snippet></ROW><ROW><id>1616457</id><snippet>cut</snippet></ROW><ROW><id>1616457</id><snippet>cut</snippet></ROW><ROW><id>1616457</id><snippet>from subprocess import Popen, PIPE

p1 = Popen(["grep", "-v", "not"], stdin=PIPE, stdout=PIPE)
p2 = Popen(["cut", "-c", "1-10"], stdin=p1.stdout, stdout=PIPE, close_fds=True)
p1.stdin.write('Hello World\n')
p1.stdin.close()
result = p2.stdout.read() 
assert result == "Hello Worl\n"
</snippet></ROW><ROW><id>1616457</id><snippet>close_fds=True</snippet></ROW><ROW><id>1616457</id><snippet>p1.stdin</snippet></ROW><ROW><id>1616457</id><snippet>select.select()</snippet></ROW><ROW><id>1616457</id><snippet>close_fds=True</snippet></ROW><ROW><id>1616457</id><snippet>fd</snippet></ROW><ROW><id>1616457</id><snippet>preexec_fn</snippet></ROW><ROW><id>1616457</id><snippet>p2 = Popen(cmd2, stdin=p1.stdout, stdout=PIPE, stderr=devnull, preexec_fn=p1.stdin.close)
</snippet></ROW><ROW><id>1616475</id><snippet>subplot(211)
...
subplot(212)
</snippet></ROW><ROW><id>1616751</id><snippet>class Static(object):
def __init__(self, **kwargs):
    self.kwargs = kwargs

def __call__(self, f):
    def wrapped_f():
        try:
            new_kwargs = {}
            for key in self.kwargs:
                i = getattr(f, key)
                new_kwargs[key] = i
            self.kwargs = new_kwargs
        except:
            pass
        for key, value in f(**self.kwargs).items():
            setattr(f, key, value)
    return wrapped_f

@Static(x=0, y=5, z='...')
def f(x, y, z):
    x += 1
    y += 5
    print x, y, z
    return locals()
</snippet></ROW><ROW><id>1616751</id><snippet>&gt;&gt;&gt; f()
1 10 ...
&gt;&gt;&gt; f()
2 15 ...
&gt;&gt;&gt; f()
3 20 ...
</snippet></ROW><ROW><id>1616751</id><snippet>def static(**kwargs):
    def wrap_f(function):
        def probeFunc(frame, event, arg):
            if event == 'call':
                frame.f_locals.update(kwargs)
                frame.f_globals.update(kwargs)
            elif event == 'return':
                for key in kwargs:
                    kwargs[key] = frame.f_locals[key]
                sys.settrace(None)
            return probeFunc
        def traced():
            sys.settrace(probeFunc)
            function()
        return traced
    return wrap_f
</snippet></ROW><ROW><id>1616751</id><snippet>@static(x=1)
def f():
    x += 1

global_x = 1
def test_non_static():
    global global_x
    global_x += 1


print 'Timeit static function: %s' % timeit.timeit(f)
print 'Timeit global variable: %s' % timeit.timeit(test_non_static)
</snippet></ROW><ROW><id>1616751</id><snippet>Timeit static function: 5.10412869535
Timeit global variable: 0.242917510783
</snippet></ROW><ROW><id>1616893</id><snippet>def targets(x,y):
    yield (x,y) # Center
    yield (x+1,y) # Left
    yield (x-1,y) # Right
    yield (x,y+1) # Above
    yield (x,y-1) # Below
    yield (x+1,y+1) # Above and to the right
    yield (x+1,y-1) # Below and to the right
    yield (x-1,y+1) # Above and to the left
    yield (x-1,y-1) # Below and to the left
</snippet></ROW><ROW><id>1616893</id><snippet>for x in range(width):
    for y in range(height):
        px = pixels[x][y]
        if px[0] == 255 and px[1] == 255 and px[2] == 255:
            for i,j in targets(x,y):
                newpixels[i][j] = replacementColor
</snippet></ROW><ROW><id>1617382</id><snippet>QPixmap</snippet></ROW><ROW><id>1617382</id><snippet>HBITMAP</snippet></ROW><ROW><id>1617382</id><snippet>HICON</snippet></ROW><ROW><id>1617382</id><snippet>HBITMAP</snippet></ROW><ROW><id>1617382</id><snippet>GetIconInfo</snippet></ROW><ROW><id>1617382</id><snippet>icons = win32gui.ExtractIconEx('C:/Program Files/Internet Explorer/iexplore.exe', 0, 10)
info = win32gui.GetIconInfo(icons[0][0])
pixmap = QtGui.QPixmap.fromWinHBITMAP(info[4])
info[3].close()
info[4].close()
# call win32gui.DestroyIcon on all the icons returned by ExtractIconEx
</snippet></ROW><ROW><id>1617382</id><snippet>self.pixmap = QtGui.QPixmap.fromWinHBITMAP(self.bitmapFromHIcon(large[0]))
</snippet></ROW><ROW><id>1617382</id><snippet>self.pixmap = QtGui.QPixmap.fromWinHBITMAP(self.bitmapFromHIcon(large[0]), 2)
</snippet></ROW><ROW><id>1617382</id><snippet>2</snippet></ROW><ROW><id>1617382</id><snippet>QtGui.QPixmap.Alpha</snippet></ROW><ROW><id>1617438</id><snippet>system(command)</snippet></ROW><ROW><id>1617438</id><snippet>ffmpeg -i flv_file 2&gt;&amp;1 | grep "Duration" | cut -d ' ' -f 4 | sed s/,//</snippet></ROW><ROW><id>1617662</id><snippet>conn.autocommit(True)
</snippet></ROW><ROW><id>1617710</id><snippet>import os, time

allfiles = []
now = time.time()

# walk will return triples (current dir, list of subdirs, list of regular files)
# file names are relative to dir at first
for dir, subdirs, files in os.walk("/storage/disk-1/Media/Video/TV"):
    for f in files:
        if not f.endswith(".avi"):
            continue
        # compute full path name
        f = os.path.join(dir, f)
        st = os.stat(f)
        if st.st_mtime &lt; now - 3600*24*7:
            # too old
            continue
        allfiles.append((f, st))
</snippet></ROW><ROW><id>1618691</id><snippet>my_package\
    my_subpackage\
        __init__.py
        deep_module.py
    __init__.py
    module.py
    setup.py
</snippet></ROW><ROW><id>1618691</id><snippet>my_package_source\
    setup.py
    README.txt
    my_package\
        my_subpackage\
            __init__.py
            deep_module.py
        __init__.py
        module.py
</snippet></ROW><ROW><id>1618691</id><snippet>my_package_source\
    setup.py
    README.txt
    MANIFEST
    PKG-INFO
    dist\
        my_package_0.X.tar.gz (or .zip on windows I believe)
    my_package\
        my_subpackage\
            __init__.py
            deep_module.py
        __init__.py
        module.py
</snippet></ROW><ROW><id>1619346</id><snippet>0000000 # ! / u s r / b i n / p y t h o n \r \n
                                          ^^
</snippet></ROW><ROW><id>1619346</id><snippet>svn:eol-style</snippet></ROW><ROW><id>1619346</id><snippet>native</snippet></ROW><ROW><id>1619350</id><snippet>import operator

[a for a, b in groupby(thelist, operator.attrgetter('equation')]
</snippet></ROW><ROW><id>1619350</id><snippet>list</snippet></ROW><ROW><id>1619350</id><snippet>file</snippet></ROW><ROW><id>1619350</id><snippet>list(sometuple)</snippet></ROW><ROW><id>1619350</id><snippet>list</snippet></ROW><ROW><id>1619350</id><snippet>list</snippet></ROW><ROW><id>1619520</id><snippet>import urllib
f = urllib.urlopen('http://www.cnn.com')
page = f.read()
f.close()
</snippet></ROW><ROW><id>1619539</id><snippet>(element,) = myset
</snippet></ROW><ROW><id>1619539</id><snippet>element = next(iter(myset)) ¹
</snippet></ROW><ROW><id>1619539</id><snippet>iter(myset).next()</snippet></ROW><ROW><id>1619583</id><snippet>(?P&lt;name&gt;regex)</snippet></ROW><ROW><id>1619583</id><snippet>?P&lt;name&gt;regex</snippet></ROW><ROW><id>1619583</id><snippet>&gt;&gt;&gt; import re
&gt;&gt;&gt; re.match(r'^org/?P&lt;company_name&gt;\w+/$', 'org/companyA')
&gt;&gt;&gt; re.match(r'^org/(?P&lt;company_name&gt;\w+)/?$', 'org/companyA')
&lt;_sre.SRE_Match object at 0x10049c378&gt;
&gt;&gt;&gt; re.match(r'^org/(?P&lt;company_name&gt;\w+)/?$', 'org/companyA').groupdict()
{'company_name': 'companyA'}
</snippet></ROW><ROW><id>1619944</id><snippet>__del__()</snippet></ROW><ROW><id>1619944</id><snippet>__del__</snippet></ROW><ROW><id>1619944</id><snippet>&lt;somemodule&gt;.GetName()</snippet></ROW><ROW><id>1619944</id><snippet>__del__</snippet></ROW><ROW><id>1620084</id><snippet>from django.core.cache import cache
cache._cache.flush_all()
</snippet></ROW><ROW><id>1620294</id><snippet>element_index     ::=  integer
</snippet></ROW><ROW><id>1620294</id><snippet>-1</snippet></ROW><ROW><id>1620294</id><snippet>print(-2**2)</snippet></ROW><ROW><id>1620294</id><snippet>-4</snippet></ROW><ROW><id>1620294</id><snippet>**</snippet></ROW><ROW><id>1620294</id><snippet>-</snippet></ROW><ROW><id>1620294</id><snippet>$ python3 -c "print('The last:{0[2+2]}'.format({'2+2': 23}))"
The last:23
</snippet></ROW><ROW><id>1620609</id><snippet>_mysql</snippet></ROW><ROW><id>1620686</id><snippet>&gt;&gt;&gt; import sys
&gt;&gt;&gt; def go():
...   sys.stdout = None
...   print "Hello!"
... 
&gt;&gt;&gt; go()
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
  File "&lt;stdin&gt;", line 3, in go
AttributeError: 'NoneType' object has no attribute 'write'
&gt;&gt;&gt; print "Here"
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
AttributeError: 'NoneType' object has no attribute 'write'
&gt;&gt;&gt;
</snippet></ROW><ROW><id>1620686</id><snippet>import sys
import traceback

class TracePrints(object):
  def __init__(self):    
    self.stdout = sys.stdout
  def write(self, s):
    self.stdout.write("Writing %r\n" % s)
    traceback.print_stack(file=self.stdout)

sys.stdout = TracePrints()

def a():
  print "I am here"

def b():
  a()

b()
</snippet></ROW><ROW><id>1620686</id><snippet>Writing 'I am here'
  File "stdout.py", line 19, in &lt;module&gt;
    b()
  File "stdout.py", line 17, in b
    a()
  File "stdout.py", line 14, in a
    print "I am here"
  File "stdout.py", line 9, in write
    traceback.print_stack(file=self.stdout)
Writing '\n'
  File "stdout.py", line 19, in &lt;module&gt;
    b()
  File "stdout.py", line 17, in b
    a()
  File "stdout.py", line 14, in a
    print "I am here"
  File "stdout.py", line 9, in write
    traceback.print_stack(file=self.stdout)
</snippet></ROW><ROW><id>1620906</id><snippet>&lt;body&gt;...&lt;/body&gt;</snippet></ROW><ROW><id>1620906</id><snippet>#!/usr/bin/env python
import re

# Here we have a string with a multiline &lt;body&gt;...&lt;/body&gt;
fileString='''baz&lt;body&gt;foo
baby foo
baby foo
baby foo
&lt;/body&gt;&lt;body&gt;bar&lt;/body&gt;'''

# re.DOTALL tells re that '.' should match any character, including newlines.
x = re.search('(&lt;body&gt;.*?&lt;/body&gt;)', fileString, re.DOTALL)
for match in x.groups():
    print(match)
# &lt;body&gt;foo
# baby foo
# baby foo
# baby foo
# &lt;/body&gt;
</snippet></ROW><ROW><id>1620906</id><snippet>print(re.findall('(&lt;body&gt;.*?&lt;/body&gt;)', fileString, re.DOTALL))
# ['&lt;body&gt;foo\nbaby foo\nbaby foo\nbaby foo\n&lt;/body&gt;', '&lt;body&gt;bar&lt;/body&gt;']
</snippet></ROW><ROW><id>1620906</id><snippet>pat=re.compile('(&lt;body&gt;.*?&lt;/body&gt;)', re.DOTALL)
print(pat.findall(fileString))
# ['&lt;body&gt;foo\nbaby foo\nbaby foo\nbaby foo\n&lt;/body&gt;', '&lt;body&gt;bar&lt;/body&gt;']
</snippet></ROW><ROW><id>1620906</id><snippet>#!/usr/bin/env python
from BeautifulSoup import BeautifulSoup

fileString='''baz&lt;body&gt;foo
baby foo
baby foo
baby foo
&lt;/body&gt;&lt;body&gt;bar&lt;/body&gt;'''
soup = BeautifulSoup(fileString)
print(soup.body)
# &lt;body&gt;foo
# baby foo
# baby foo
# baby foo
# &lt;/body&gt;

print(soup.findAll('body'))
# [&lt;body&gt;foo
# baby foo
# baby foo
# baby foo
# &lt;/body&gt;, &lt;body&gt;bar&lt;/body&gt;]
</snippet></ROW><ROW><id>1621035</id><snippet>enter code here
x = 'j f m a m j j a s o n d j f m a m j j a s o n d'.split()
y = abs(randn(24))
x[6] = 'j\n2008'
x[18] = 'j\n2009'
bar(xrange(len(x)), y, width=0.1)
bar(xrange(len(x)), y, width=0.1)
xticks(xrange(len(x)), x, ha='center')
</snippet></ROW><ROW><id>1621090</id><snippet>for e in l</snippet></ROW><ROW><id>1621090</id><snippet>&gt;&gt;&gt; list(itertools.chain((e, n) for n, l in (('a', [1,2]),('b',[3,4])) for e in l ))
[(1, 'a'), (2, 'a'), (3, 'b'), (4, 'b')]
</snippet></ROW><ROW><id>1621090</id><snippet>&gt;&gt;&gt; X=itertools.chain(*(itertools.product(*i[::-1]) for i in (('a', [1,2]),('b',[3,4]))))
&gt;&gt;&gt; print list(X)
[(1, 'a'), (2, 'a'), (3, 'b'), (4, 'b')]
</snippet></ROW><ROW><id>1621090</id><snippet>&gt;&gt;&gt; X=itertools.chain(*(itertools.product(*i) for i in (([1,2],'a'),([3,4],'b'))))
&gt;&gt;&gt; print list(X)
[(1, 'a'), (2, 'a'), (3, 'b'), (4, 'b')]
</snippet></ROW><ROW><id>1621118</id><snippet># Size of "board"
X = 10
Y = 10

neighbors = lambda x, y : [(x2, y2) for x2 in range(x-1, x+2) for y2 in range(y-1, y+2) if -1 &lt; x &lt;= X and -1 &lt; y &lt;= Y and (x != x2 or y != y2)]

&gt;&gt;&gt; print(neighbors(5, 5))
[(4, 4), (4, 5), (4, 6), (5, 4), (5, 6), (6, 4), (6, 5), (6, 6)]
</snippet></ROW><ROW><id>1621382</id><snippet>current_module.new_name = func
</snippet></ROW><ROW><id>1621382</id><snippet>setattr(current_module, new_name, func)
</snippet></ROW><ROW><id>1621730</id><snippet>urllib.urlopen</snippet></ROW><ROW><id>1621730</id><snippet>head</snippet></ROW><ROW><id>1621730</id><snippet>&lt;body onload=nx_init();&gt;
 &lt;dl&gt;
 &lt;dt&gt;
&lt;a href="http://news.naver.com/main/read.nhn?mode=LSD&amp;mid=sec&amp;sid1=&amp;oid=091&amp;aid=0002497340"
 [[snipping other attributes of this tag]]&gt;
JAPAN TOKYO INTERNATIONAL FILM FESTIVAL&lt;/a&gt;
&lt;/dt&gt;
 &lt;dd class="txt_inline"&gt;
EPA¿¬ÇÕ´º½º ¼¼°è &lt;span class="bar"&gt;
|&lt;/span&gt;
 2009.10.25 (ÀÏ) ¿ÀÈÄ 7:21&lt;/dd&gt;
 &lt;dd class="sh_news_passage"&gt;
 Japan, 25 October 2009. Gayet won the Best Actress Award for her role in the film 'Eight &lt;b&gt;
Times&lt;/b&gt;
 Up' directed by French filmmaker Xabi Molia. EPA/DAI KUROKAWA&lt;/dd&gt;
</snippet></ROW><ROW><id>1621730</id><snippet>&lt;a&gt;</snippet></ROW><ROW><id>1621730</id><snippet>&lt;dt&gt;</snippet></ROW><ROW><id>1621730</id><snippet>&lt;dd&gt;</snippet></ROW><ROW><id>1621730</id><snippet>&lt;dl&gt;</snippet></ROW><ROW><id>1621730</id><snippet>Content-Type: text/html; charset=ks_c_5601-1987
</snippet></ROW><ROW><id>1621730</id><snippet>'euc_kr'</snippet></ROW><ROW><id>1621730</id><snippet>lxml.etree.parse</snippet></ROW><ROW><id>1621730</id><snippet>print</snippet></ROW><ROW><id>1621730</id><snippet>''.join</snippet></ROW><ROW><id>1621730</id><snippet>from BeautifulSoup import BeautifulSoup
import urllib

def getit(pagetext, howmany=0):
  soup = BeautifulSoup(pagetext)
  results = []
  dls = soup.findAll('dl')
  for adl in dls:
    thedt = adl.dt
    while thedt:
      thea = thedt.a
      if thea:
        print 'SUBJECT:', thea.string
      thedd = thedt.findNextSibling('dd')
      if thedd:
        print 'CONTENT:',
        while thedd:
          for x in thedd.findAll(text=True):
            print x,
          thedd = thedd.findNextSibling('dd')
        print
      howmany -= 1
      if not howmany: return
      print
      thedt = thedt.findNextSibling('dt')

theurl = ('http://news.search.naver.com/search.naver?'
          'sm=tab%5Fhty&amp;where=news&amp;query=times&amp;x=0&amp;y=0')
thepage = urllib.urlopen(theurl).read()
getit(thepage, 3)
</snippet></ROW><ROW><id>1621898</id><snippet>require "rest_client"
require "json"

r = RestClient.post "http://username:password@twitter.com/friendships/create.json",
        :screen_name =&gt; "user_to_follow"
j = JSON.parse(r)
</snippet></ROW><ROW><id>1621952</id><snippet>span = 2
words = "this-is-a-string".split("-")
print ["-".join(words[i:i+span]) for i in range(0, len(words), span)]
</snippet></ROW><ROW><id>1622052</id><snippet>&gt;&gt;&gt; import datetime
&gt;&gt;&gt; today = datetime.date.today()
&gt;&gt;&gt; today + datetime.timedelta(days=-today.weekday(), weeks=1)
datetime.date(2009, 10, 26)
</snippet></ROW><ROW><id>1622052</id><snippet>today - datetime.timedelta(days=today.weekday())
</snippet></ROW><ROW><id>1622194</id><snippet>from selenium import selenium
import unittest, time, re, csv, logging

class Untitled(unittest.TestCase):
    def setUp(self):
        self.verificationErrors = []
        self.selenium = selenium("localhost", 4444, "*firefox", "http://example.com")
        self.selenium.start()
        self.selenium.set_timeout("60000")

    def test_untitled(self):
        sel = self.selenium
        spamReader = csv.reader(open('SubDomainList.csv', 'rb'))
        for row in spamReader:
            try:
                sel.open(row[0])
            except Exception, e:
                ofile = open('outputTest.csv', 'ab')
                ofile.write("error on %s: %s" % (row[0],e))
            else:
                time.sleep(5)
                html = sel.get_html_source()
                ofile = open('output4001-5000.csv', 'ab')
                ofile.write(html.encode('utf-8') + '\n')
            ofile.close()

    def tearDown(self):
        self.selenium.stop()
        self.assertEqual([], self.verificationErrors)

if __name__ == "__main__":
     unittest.main()
</snippet></ROW><ROW><id>1622429</id><snippet>def f(s, n):
    return ' '.join(s.split()[:n])
</snippet></ROW><ROW><id>1622472</id><snippet>.nojekyll</snippet></ROW><ROW><id>1622542</id><snippet>Push 2 // Push 2 onto the stack
Push 3 // Push 3 onto the stack
Add // Add the top two things on the stack.
</snippet></ROW><ROW><id>1622542</id><snippet>Load x, r0 // Load x onto register 0
Load y, r1 // Load y onto register 1
Add r0, r1, r2 // Add 1 and 2 and store the result in register 2
</snippet></ROW><ROW><id>1623085</id><snippet>pdb.set_trace()</snippet></ROW><ROW><id>1623085</id><snippet>&gt;&gt;&gt; import pdb
&gt;&gt;&gt; a="a string"
&gt;&gt;&gt; pdb.set_trace()
--Return--
&gt; &lt;stdin&gt;(1)&lt;module&gt;()-&gt;None
(Pdb) p a
'a string'
(Pdb)
</snippet></ROW><ROW><id>1623085</id><snippet>c</snippet></ROW><ROW><id>1623085</id><snippet>cont</snippet></ROW><ROW><id>1623085</id><snippet>continue</snippet></ROW><ROW><id>1623156</id><snippet>collections</snippet></ROW><ROW><id>1623156</id><snippet>update</snippet></ROW><ROW><id>1623156</id><snippet>__le__, __lt__, __eq__, __ne__, __gt__, __ge__, __and__, __or__ __sub__, __xor__, and isdisjoint</snippet></ROW><ROW><id>1623156</id><snippet>collections.Set</snippet></ROW><ROW><id>1623156</id><snippet>clear, pop, remove, __ior__, __iand__, __ixor__, and __isub__</snippet></ROW><ROW><id>1623156</id><snippet>collections.MutableSet</snippet></ROW><ROW><id>1623156</id><snippet>set</snippet></ROW><ROW><id>1623156</id><snippet>collections.Set</snippet></ROW><ROW><id>1623156</id><snippet>set</snippet></ROW><ROW><id>1623156</id><snippet>sets.Set</snippet></ROW><ROW><id>1623156</id><snippet>isinstance</snippet></ROW><ROW><id>1623156</id><snippet>import collections

class LowercasingSet(collections.MutableSet):
  def __init__(self, initvalue=()):
    self._theset = set()
    for x in initvalue: self.add(x)
  def add(self, item):
    self._theset.add(item.lower())
  def discard(self, item):
    self._theset.discard(item.lower())
  def __iter__(self):
    return iter(self._theset)
  def __len__(self):
    return len(self._theset)
  def __contains__(self, item):
    try:
      return item.lower() in self._theset
    except AttributeError:
      return False
</snippet></ROW><ROW><id>1623224</id><snippet>.pid</snippet></ROW><ROW><id>1623224</id><snippet>childid = []
for cmdline in cmdlines:
  p = subprocess.Popen(cmdline.split())
  childid[p.pid] = cmdline
</snippet></ROW><ROW><id>1623224</id><snippet>childid</snippet></ROW><ROW><id>1623224</id><snippet>while mustcontinue:
  pid, exitstat = os.wait()
  cmdline = childid.pop(pid)
  p = subprocess.Popen(cmdline.split())
  childid[p.pid] = cmdline
</snippet></ROW><ROW><id>1623224</id><snippet>mustcontinue</snippet></ROW><ROW><id>1623344</id><snippet>deny from all</snippet></ROW><ROW><id>1623581</id><snippet>views.py</snippet></ROW><ROW><id>1623629</id><snippet>from xml.dom.minidom import Document
doc = Document()
e = doc.createElement("abc")
eh = doc.createElement("hello")
s1 = 'bhaskar'
text = doc.createTextNode(s1)

eh.appendChild(text)
e.appendChild(eh)

e.toxml()
</snippet></ROW><ROW><id>1623629</id><snippet>e.innerXml = s1</snippet></ROW><ROW><id>1623629</id><snippet>appendChild</snippet></ROW><ROW><id>1623629</id><snippet>Python 2.6.2 (release26-maint, Apr 19 2009, 01:56:41) 
[GCC 4.3.3] on linux2
Type "help", "copyright", "credits" or "license" for more information.
&gt;&gt;&gt; from xml.dom.minidom import Document
&gt;&gt;&gt; cert = "---- START CERTIFICATE ----\n   Hello world\n---- END CERTIFICATE ---"
&gt;&gt;&gt; doc = Document()
&gt;&gt;&gt; e = doc.createElement("cert")
&gt;&gt;&gt; certEl = doc.createTextNode(cert)
&gt;&gt;&gt; e.appendChild(certEl)
&lt;DOM Text node "'---- START'..."&gt;
&gt;&gt;&gt; print e.toxml()
&lt;cert&gt;---- START CERTIFICATE ----
   Hello world
---- END CERTIFICATE ---&lt;/cert&gt;
&gt;&gt;&gt;
</snippet></ROW><ROW><id>1623629</id><snippet>writexml</snippet></ROW><ROW><id>1623629</id><snippet>doc.writexml(fobj)
# or
doc.writexml(fobj, "", "  ", "")
</snippet></ROW><ROW><id>1623629</id><snippet>newline</snippet></ROW><ROW><id>1623629</id><snippet>minidom</snippet></ROW><ROW><id>1623939</id><snippet>array_np = numpy.asarray(array)
low_values_indices = array_np &lt; lowValY  # Where values are low
array_np[low_values_indices] = 0  # All low values set to 0
</snippet></ROW><ROW><id>1623939</id><snippet>array_np = numpy.asarray(array)
print numpy.sort(array_np[array_np &gt;= lowValY])[-highCountX:]
</snippet></ROW><ROW><id>1624578</id><snippet>In [1]: import numpy as np

In [2]: a = np.array([1,2,0,3,0,4])

In [3]: b = np.array([1,2,3,4,5,6])

In [4]: b[np.where(a)]  
Out[4]: array([1, 2, 4, 6])

In [5]: np.where(a)  
Out[5]: (array([0, 1, 3, 5]),)

In [6]: a[np.where(a)]  
Out[6]: array([1, 2, 3, 4])
</snippet></ROW><ROW><id>1624589</id><snippet>def catch_io_errors(fn):
    def decorator(*args, **kwargs):
        try:
            return fn(*args, **kwargs)
        except IOError:
            quit('whatever error text')
    return decorator
</snippet></ROW><ROW><id>1624589</id><snippet>@catch_io_errors
def read_file():
    with open(myfile, 'r') as f:
        for i in f:
            print i
</snippet></ROW><ROW><id>1624589</id><snippet>def read_file():
    f = open(myfile, 'r')
    for i in f:
        print i
    f.close()

read_file = catch_io_errors(read_file)
</snippet></ROW><ROW><id>1624688</id><snippet>func_list=[locals()[key] for key in locals().keys() 
           if callable(locals()[key]) and key.startswith('time')]

alist=range(1000000)
times=[]
for f in func_list:
    n = 10
    times.append( min(  t for t,_,_ in (f(alist,31) for i in range(n)))) 

for (time,func_name) in zip(times, func_list):
    print '%s took %0.3fms.' % (func_name, time*1000.)
</snippet></ROW><ROW><id>1624688</id><snippet>&lt;function wrapper at 0x01FCB5F0&gt; took 39.000ms.
&lt;function wrapper at 0x01FCB670&gt; took 41.000ms.
</snippet></ROW><ROW><id>1625013</id><snippet>itertools.izip_longest</snippet></ROW><ROW><id>1625013</id><snippet>def grouper(n, iterable, fillvalue=None):
    "grouper(3, 'ABCDEFG', 'x') --&gt; ABC DEF Gxx"
    args = [iter(iterable)] * n
    return itertools.zip_longest(*args, fillvalue=fillvalue)
</snippet></ROW><ROW><id>1625013</id><snippet>&gt;&gt;&gt; list(grouper(3, range(9)))
[(0, 1, 2), (3, 4, 5), (6, 7, 8)]
&gt;&gt;&gt; list(grouper(3, range(10)))
[(0, 1, 2), (3, 4, 5), (6, 7, 8), (9, None, None)]
</snippet></ROW><ROW><id>1625013</id><snippet>fillvalue</snippet></ROW><ROW><id>1625013</id><snippet>&gt;&gt;&gt; def mygrouper(n, iterable):
...     args = [iter(iterable)] * n
...     return ([e for e in t if e != None] for t in itertools.zip_longest(*args))
... 
&gt;&gt;&gt; list(mygrouper(3, range(9)))
[[0, 1, 2], [3, 4, 5], [6, 7, 8]]
&gt;&gt;&gt; list(mygrouper(3, range(10)))
[[0, 1, 2], [3, 4, 5], [6, 7, 8], [9]]
</snippet></ROW><ROW><id>1625254</id><snippet>else</snippet></ROW><ROW><id>1625254</id><snippet>if</snippet></ROW><ROW><id>1625254</id><snippet>&gt;&gt;&gt; for n in range(2, 10):
...     for x in range(2, n):
...         if n % x == 0:
...             print n, 'equals', x, '*', n/x 
...             break
...         else:
...             # loop fell through without finding a factor
...             print n, 'is a prime number'
... 
3 is a prime number
4 equals 2 * 2
5 is a prime number
5 is a prime number
5 is a prime number
6 equals 2 * 3
7 is a prime number
7 is a prime number
7 is a prime number
7 is a prime number
7 is a prime number
8 equals 2 * 4
9 is a prime number
9 equals 3 * 3
</snippet></ROW><ROW><id>1625760</id><snippet>full_clean</snippet></ROW><ROW><id>1625760</id><snippet>save</snippet></ROW><ROW><id>1625760</id><snippet>ValidationError</snippet></ROW><ROW><id>1625760</id><snippet>queryset.update()</snippet></ROW><ROW><id>1625760</id><snippet>queryset.update()</snippet></ROW><ROW><id>1625760</id><snippet>ModelForm</snippet></ROW><ROW><id>1625760</id><snippet>ValidationError</snippet></ROW><ROW><id>1625785</id><snippet>itertools.chain()</snippet></ROW><ROW><id>1625785</id><snippet>def flatten(*seq):
    for item in seq:
        if isinstance(item, basestring):
            yield item
        else:
            try:
                it = iter(item)
            except TypeError:
                yield item
                it = None
            if it is not None:
                for obj in flatten(it):
                    yield obj
</snippet></ROW><ROW><id>1625785</id><snippet>list(flatten(seq))</snippet></ROW><ROW><id>1625785</id><snippet>str.join()</snippet></ROW><ROW><id>1625785</id><snippet>yield foo</snippet></ROW><ROW><id>1625785</id><snippet>yield str(foo)</snippet></ROW><ROW><id>1625785</id><snippet>"\t".join(str(o) for o in flatten(seq))
</snippet></ROW><ROW><id>1626216</id><snippet>class MyModel(models.Model):
    CONSTANT = 1234
    id = models.AutoField(primary_key=True) # not really needed, but hey

    @property
    def big_id(self):
        return self.pk * MyModel.CONSTANT
</snippet></ROW><ROW><id>1626289</id><snippet>return</snippet></ROW><ROW><id>1626289</id><snippet>def testGeodatabase(self):
    return self.outputGeodatabase in self.gp.ListWorkspaces("*","ALL")
</snippet></ROW><ROW><id>1626554</id><snippet>__getattr__</snippet></ROW><ROW><id>1626554</id><snippet>def __getattr__(self, attr):
  def default_method(*args):
    self.apply(attr, *args)
  return default_method
</snippet></ROW><ROW><id>1626677</id><snippet>set_payload()</snippet></ROW><ROW><id>1626677</id><snippet>set_payload(payload[, charset])</snippet></ROW><ROW><id>1626677</id><snippet>&gt;&gt;&gt; from email import mime,message
&gt;&gt;&gt; m1 = message.Message()
&gt;&gt;&gt; t1=email.MIMEText.MIMEText('t1\r\n')
&gt;&gt;&gt; print t1.as_string()
Content-Type: text/plain; charset="us-ascii"
MIME-Version: 1.0
Content-Transfer-Encoding: 7bit

t1

&gt;&gt;&gt; m1.attach(t1)
&gt;&gt;&gt; m1.is_multipart()
True
&gt;&gt;&gt; m1.get_payload()
[&lt;email.mime.text.MIMEText instance at 0x00F585A8&gt;]
&gt;&gt;&gt; t2=email.MIMEText.MIMEText('t2\r\n')
&gt;&gt;&gt; m1.set_payload([t2])
&gt;&gt;&gt; print m1.get_payload()[0].as_string()
Content-Type: text/plain; charset="us-ascii"
MIME-Version: 1.0
Content-Transfer-Encoding: 7bit

t2

&gt;&gt;&gt;
</snippet></ROW><ROW><id>1626887</id><snippet>class Log:
    BAT_STATS = ['AB', 'R', 'H', 'HR']

    def __init__(self, type):
        for cat in Log.BAT_STATS:
            setattr(self, cat, 0)
</snippet></ROW><ROW><id>1626887</id><snippet>locals()</snippet></ROW><ROW><id>1626956</id><snippet>easy_install install http://pypi.python.org/packages/source/C/Cheetah/Cheetah-2.4.0.tar.gz#md5=873f5440676355512f176fc4ac01011e
</snippet></ROW><ROW><id>1627222</id><snippet>os.chmod</snippet></ROW><ROW><id>1627222</id><snippet>000 111 111 000
    rwx rwx rwx
</snippet></ROW><ROW><id>1627222</id><snippet>rwx</snippet></ROW><ROW><id>1627222</id><snippet>os.chmod</snippet></ROW><ROW><id>1627222</id><snippet>os.chmod('myfile',0o666)  # read/write by everyone
os.chmod('myfile',0o644)  # read/write by me, readable for everone else
</snippet></ROW><ROW><id>1627222</id><snippet>os.chmod('mydir',0o777)  # read/write by everyone
os.chmod('mydir',0o755)  # read/write by me, readable for everone else
</snippet></ROW><ROW><id>1627222</id><snippet>0o777</snippet></ROW><ROW><id>1627222</id><snippet>0777</snippet></ROW><ROW><id>1627569</id><snippet>struct.pack</snippet></ROW><ROW><id>1628105</id><snippet>inf</snippet></ROW><ROW><id>1628105</id><snippet>&gt;&gt;&gt; 0 * float("inf")
nan
</snippet></ROW><ROW><id>1628105</id><snippet>inf</snippet></ROW><ROW><id>1628105</id><snippet>&gt;&gt;&gt; 2.0**2
4.0
&gt;&gt;&gt; _**2
16.0
&gt;&gt;&gt; _**2
256.0
&gt;&gt;&gt; _**2
65536.0
&gt;&gt;&gt; _**2
4294967296.0
&gt;&gt;&gt; _**2
1.8446744073709552e+19
&gt;&gt;&gt; _**2
3.4028236692093846e+38
&gt;&gt;&gt; _**2
1.157920892373162e+77
&gt;&gt;&gt; _**2
1.3407807929942597e+154
&gt;&gt;&gt; _**2
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in ?
OverflowError: (34, 'Numerical result out of range')
</snippet></ROW><ROW><id>1628105</id><snippet>inf</snippet></ROW><ROW><id>1628105</id><snippet>OverflowError</snippet></ROW><ROW><id>1628105</id><snippet>inf</snippet></ROW><ROW><id>1628124</id><snippet>from foo.bar.baz import bruf
</snippet></ROW><ROW><id>1628300</id><snippet>min</snippet></ROW><ROW><id>1628300</id><snippet>abs</snippet></ROW><ROW><id>1628300</id><snippet>__abs__</snippet></ROW><ROW><id>1628300</id><snippet>next</snippet></ROW><ROW><id>1628300</id><snippet>__next__</snippet></ROW><ROW><id>1628300</id><snippet>next</snippet></ROW><ROW><id>1628300</id><snippet>3.*</snippet></ROW><ROW><id>1628300</id><snippet>x + y</snippet></ROW><ROW><id>1628300</id><snippet>x</snippet></ROW><ROW><id>1628300</id><snippet>y</snippet></ROW><ROW><id>1628300</id><snippet>type(x)</snippet></ROW><ROW><id>1628300</id><snippet>+</snippet></ROW><ROW><id>1628300</id><snippet>operator.add</snippet></ROW><ROW><id>1628300</id><snippet>__add__</snippet></ROW><ROW><id>1628300</id><snippet>y</snippet></ROW><ROW><id>1628300</id><snippet>__radd__</snippet></ROW><ROW><id>1628300</id><snippet>x + y</snippet></ROW><ROW><id>1628300</id><snippet>y + x</snippet></ROW><ROW><id>1628300</id><snippet>y</snippet></ROW><ROW><id>1628300</id><snippet>x</snippet></ROW><ROW><id>1628394</id><snippet>event.GetId()</snippet></ROW><ROW><id>1628394</id><snippet>event.GetEventObject()</snippet></ROW><ROW><id>1628394</id><snippet>        self.entry.Bind(wx.EVT_KEY_UP, functools.partial(self.Handle, ob=self.entry))
        self.entry2.Bind(wx.EVT_KEY_UP, functools.partial(self.Handle, ob=self.entry2))

    def Handle(self, event, ob=None):
            print ob
</snippet></ROW><ROW><id>1628394</id><snippet>entry</snippet></ROW><ROW><id>1628394</id><snippet>entry2</snippet></ROW><ROW><id>1628472</id><snippet>django.contrib.auth.models.User</snippet></ROW><ROW><id>1628472</id><snippet>from django.utils.itercompat import groupby
avatars = Avatar.objects.select_related("user").filter(valid=True).order_by("-user__date_joined")[:32]
grouped_users = groupby(avatars, lambda x: x.user)
user_list = []
for user, avatar_list in grouped_users:
    user.avatar = list(avatar_list)[0]
    user_list.append(user)
# user_list is now what you asked for in the first_place: 
# a list of users with their avatars
</snippet></ROW><ROW><id>1628472</id><snippet>list</snippet></ROW><ROW><id>1628472</id><snippet>avatar_list</snippet></ROW><ROW><id>1628472</id><snippet>user.avatar</snippet></ROW><ROW><id>1628472</id><snippet>for avatar in avatars:
    user = avatar.user
</snippet></ROW><ROW><id>1628517</id><snippet>sys.path.append('/etc/django/domains/mydomain.com/myproject/')
</snippet></ROW><ROW><id>1628672</id><snippet>&lt;div id="placeholder"&gt;Please wait, loading...&lt;/div&gt;

&lt;script type="text/javascript" src="/path/to/jquery.js"&gt;
&lt;/script&gt;
&lt;script type="text/javascript&gt;
$(document).ready(function() {
    $('#placeholder').load('/path/to/my/locally-served/page.html');
});
&lt;/script&gt;
</snippet></ROW><ROW><id>1628672</id><snippet>load</snippet></ROW><ROW><id>1628672</id><snippet>load</snippet></ROW><ROW><id>1628672</id><snippet>$('#placeholder').load('/path/to/my/locally-served/page.html #someTargetDiv');
</snippet></ROW><ROW><id>1629770</id><snippet>try:
   from local_settings import *
except ImportError, e:
   pass
</snippet></ROW><ROW><id>1629777</id><snippet>l = ("xxxxxxxxx", "yyyy","zz")
print(max(l, key=len))
</snippet></ROW><ROW><id>1629777</id><snippet>max</snippet></ROW><ROW><id>1629777</id><snippet>key</snippet></ROW><ROW><id>1629777</id><snippet>l</snippet></ROW><ROW><id>1629783</id><snippet>def addF(y):
    def f(self, x):
        return "Hello", x, "and", y

    def decorate(cls):
        cls.f = f
        return cls

    return decorate


@addF(1)
class X(object):
    pass

@addF(2)
class Y(object):
    pass

print X().f("X")
print Y().f("Y")

&gt;&gt;&gt; 
Hello X and 1
Hello Y and 2
</snippet></ROW><ROW><id>1629861</id><snippet>&gt;&gt;&gt; example = "%{test}%".format(test="name")
&gt;&gt;&gt; print example
%name%
</snippet></ROW><ROW><id>1629912</id><snippet>class FixedValueProperty(object):
    def __init__(self, value):
        self.value = value
    def __get__(self, inst, cls):
        if inst is None:
            return self
        return self.value
</snippet></ROW><ROW><id>1629912</id><snippet>&gt;&gt;&gt; class C(object):
...     prop = FixedValueProperty('abc')
... 
&gt;&gt;&gt; o = C()
&gt;&gt;&gt; o.prop
'abc'
&gt;&gt;&gt; C.prop
&lt;__main__.FixedValueProperty object at 0xb7eb290c&gt;
&gt;&gt;&gt; C.prop.value
'abc'
&gt;&gt;&gt; type(o).prop.value
'abc'
</snippet></ROW><ROW><id>1629912</id><snippet>&gt;&gt;&gt; class C(object):
...     @property
...     def prop(self):
...         return 'abc'
... 
&gt;&gt;&gt; C.prop
&lt;property object at 0xb7eb0b6c&gt;
&gt;&gt;&gt; C.prop.fget
&lt;function prop at 0xb7ea36f4&gt;
</snippet></ROW><ROW><id>1629919</id><snippet>$ python
Python 2.6.1 (r261:67515, Jul  7 2009, 23:51:51) 
[GCC 4.2.1 (Apple Inc. build 5646)] on darwin
Type "help", "copyright", "credits" or "license" for more information.  
&gt;&gt;&gt; import locale
&gt;&gt;&gt; locale.getlocale()
(None, None)
&gt;&gt;&gt; locale.setlocale(locale.LC_ALL, '')
'en_GB.UTF-8'
&gt;&gt;&gt; locale.getlocale()
('en_GB', 'UTF8')
</snippet></ROW><ROW><id>1630350</id><snippet>first = True
for data in data_list:
    if first:
        first = False
    else:
        between_items()

    item()
</snippet></ROW><ROW><id>1630350</id><snippet>len()</snippet></ROW><ROW><id>1630350</id><snippet>file = open('/path/to/file')
for line in file:
    process_line(line)

    # No way of telling if this is the last line!
</snippet></ROW><ROW><id>1630350</id><snippet>str.join()</snippet></ROW><ROW><id>1630350</id><snippet>for</snippet></ROW><ROW><id>1630350</id><snippet>for i, line in enumerate(data_list):
    if i &gt; 0:
        between_items()
    item()
</snippet></ROW><ROW><id>1630350</id><snippet>len()</snippet></ROW><ROW><id>1630350</id><snippet>def lookahead(iterable):
    it = iter(iterable)
    last = it.next() # next(it) in Python 3
    for val in it:
        yield last, False
        last = val
    yield last, True
</snippet></ROW><ROW><id>1630350</id><snippet>&gt;&gt;&gt; for i, last in lookahead(range(3)):
...     print i, last
0 False
1 False
2 True
</snippet></ROW><ROW><id>1630523</id><snippet># -*- coding: utf-8 -*-

import sys
from urllib import urlopen
from BeautifulSoup import BeautifulSoup
from Queue import Queue, Empty
from threading import Thread

visited = set()
queue = Queue()

def get_parser(host, root, charset):

    def parse():
        try:
            while True:
                url = queue.get_nowait()
                try:
                    content = urlopen(url).read().decode(charset)
                except UnicodeDecodeError:
                    continue
                for link in BeautifulSoup(content).findAll('a'):
                    try:
                        href = link['href']
                    except KeyError:
                        continue
                    if not href.startswith('http://'):
                        href = 'http://%s%s' % (host, href)
                    if not href.startswith('http://%s%s' % (host, root)):
                        continue
                    if href not in visited:
                        visited.add(href)
                        queue.put(href)
                        print href
        except Empty:
            pass

    return parse

if __name__ == '__main__':
    host, root, charset = sys.argv[1:]
    parser = get_parser(host, root, charset)
    queue.put('http://%s%s' % (host, root))
    workers = []
    for i in range(5):
        worker = Thread(target=parser)
        worker.start()
        workers.append(worker)
    for worker in workers:
        worker.join()
</snippet></ROW><ROW><id>1630614</id><snippet>&gt;&gt;&gt; from xml.dom.minidom import parseString
&gt;&gt;&gt; dom = parseString('''\
... &lt;message&gt;
...   &lt;text&gt;
...     Hello!
...   &lt;/text&gt;
... &lt;/message&gt;''')
&gt;&gt;&gt; dom.childNodes[0].childNodes
[&lt;DOM Text node "u'\n  '"&gt;, &lt;DOM Element: text at 0xb765782c&gt;, &lt;DOM Text node "u'\n'"&gt;]
&gt;&gt;&gt; text = dom.getElementsByTagName('text')[0].childNodes[0]
&gt;&gt;&gt; text.data = text.data.replace(u'Hello', u'Hello world')
&gt;&gt;&gt; print dom.toxml()
&lt;?xml version="1.0" ?&gt;&lt;message&gt;
  &lt;text&gt;
    Hello world!
  &lt;/text&gt;
&lt;/message&gt;
</snippet></ROW><ROW><id>1630760</id><snippet>&gt;&gt;&gt; b = []
&gt;&gt;&gt; a = set()
&gt;&gt;&gt; a.intersection(b)
set([])

&gt;&gt;&gt; b = [1, 2]
&gt;&gt;&gt; a = set([1, 3])
&gt;&gt;&gt; a.intersection(b)
set([1])
</snippet></ROW><ROW><id>1630760</id><snippet>&gt;&gt;&gt; b = 1
&gt;&gt;&gt; a.intersection(b)
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
TypeError: 'int' object is not iterable
</snippet></ROW><ROW><id>1631022</id><snippet>filename cmap "yldmap.map"; /* an xml map I created to parse the data */
filename curyld
      url "http://www.ustreas.gov/offices/domestic-finance/debt-management/interest-rate/yield.xml";

libname curyld xml xmlmap=cmap;
</snippet></ROW><ROW><id>1631786</id><snippet>FeaturedItem</snippet></ROW><ROW><id>1631874</id><snippet>sortedDigits</snippet></ROW><ROW><id>1631913</id><snippet># Now call the 'brother' method that does the real work.
return self._do_something(arg1, arg2, arg3, arg3)
</snippet></ROW><ROW><id>1631916</id><snippet>f = open('x.txt').read()
</snippet></ROW><ROW><id>1631916</id><snippet>f = open('x.txt').readlines()
</snippet></ROW><ROW><id>1631916</id><snippet>from __future__ import with_statement</snippet></ROW><ROW><id>1631916</id><snippet>with open('x.txt') as x: f = x.read()
</snippet></ROW><ROW><id>1631916</id><snippet>with open('x.txt') as x: f = x.readlines()
</snippet></ROW><ROW><id>1632274</id><snippet>import wmi
c = wmi.WMI ()

for process in c.Win32_Process ():
  print process.ProcessId, process.Name
</snippet></ROW><ROW><id>1632345</id><snippet>if 'file' in form.changed_data:
     """
     File is changed
     """
     raise forms.ValidationError("No, don't change the file because blah blah")
else:
     """
     File is not changed
     """
</snippet></ROW><ROW><id>1632726</id><snippet>QLayoutItem</snippet></ROW><ROW><id>1632726</id><snippet>bool hasHeightForWidth()</snippet></ROW><ROW><id>1632726</id><snippet>int heightForWidth( int width)</snippet></ROW><ROW><id>1632726</id><snippet>widget()</snippet></ROW><ROW><id>1632994</id><snippet>lambda</snippet></ROW><ROW><id>1633094</id><snippet>basestring</snippet></ROW><ROW><id>1633094</id><snippet>str</snippet></ROW><ROW><id>1633094</id><snippet>unicode</snippet></ROW><ROW><id>1633094</id><snippet>types.StringType</snippet></ROW><ROW><id>1633094</id><snippet>str</snippet></ROW><ROW><id>1633094</id><snippet>basestring</snippet></ROW><ROW><id>1633094</id><snippet>str</snippet></ROW><ROW><id>1633094</id><snippet>types</snippet></ROW><ROW><id>1633194</id><snippet>[</snippet></ROW><ROW><id>1633194</id><snippet>]</snippet></ROW><ROW><id>1633194</id><snippet>[</snippet></ROW><ROW><id>1633194</id><snippet>]</snippet></ROW><ROW><id>1633363</id><snippet>class Individualistic(object_or_whatever_bases):
  def __init__(self, whatever_args):
    self.__class__ = type('GottaBeMe', (self.__class__, object), {})
    # keep rocking...!-)
</snippet></ROW><ROW><id>1633363</id><snippet>object</snippet></ROW><ROW><id>1633363</id><snippet>2.*</snippet></ROW><ROW><id>1633363</id><snippet>self.__class__.__dict__</snippet></ROW><ROW><id>1633363</id><snippet>GottaBeMe</snippet></ROW><ROW><id>1633363</id><snippet>__dict__</snippet></ROW><ROW><id>1633363</id><snippet>class WidthVariable:
    def __init__(self, object)
        object.width = property(self.get_width)
</snippet></ROW><ROW><id>1633363</id><snippet>object</snippet></ROW><ROW><id>1633363</id><snippet>class WidthVariable(object):
    def __init__(self, obj)
        obj.__class__.width = property(self.get_width)
</snippet></ROW><ROW><id>1633412</id><snippet>with open(fileName, "rb") as f:
  arrayName = numpy.fromfile(f, numpy.float32)
arrayName.byteswap(True)
</snippet></ROW><ROW><id>1633412</id><snippet>True</snippet></ROW><ROW><id>1633412</id><snippet>if struct.pack('=f', 2.3) == struct.pack('&lt;f', 2.3):
  arrayName.byteswap(True)
</snippet></ROW><ROW><id>1633493</id><snippet>from email.mime.image import MIMEImage
from email.mime.multipart import MIMEMultipart
from email.mime.text import MIMEText

# Load the image you want to send at bytes
img_data = open('logo.jpg', 'rb').read()

# Create a "related" message container that will hold the HTML 
# message and the image
msg = MIMEMultipart(_subtype='related')

# Create the body with HTML. Note that the image, since it is inline, is 
# referenced with the URL cid:myimage... you should take care to make
# "myimage" unique
body = MIMEText('&lt;p&gt;Hello &lt;img src="cid:myimage" /&gt;&lt;/p&gt;', _subtype='html')
msg.attach(body)

# Now create the MIME container for the image
img = MIMEImage(img_data, 'jpeg')
img.add_header('Content-Id', '&lt;myimage&gt;')  # angle brackets are important
msg.attach(img)

send_mail(subject, msg.as_string(), from, [to], priority="high")
</snippet></ROW><ROW><id>1633589</id><snippet>Definition: cursor.execute(self, query, args=None)

    query -- string, query to execute on server
    args -- optional sequence or mapping, parameters to use with query.
</snippet></ROW><ROW><id>1633589</id><snippet>sql_and_params = "INSERT INTO table VALUES (%s, %s, %s)", var1, var2, var3
cursor.execute(*sql_and_params)
</snippet></ROW><ROW><id>1633589</id><snippet>cursor.execute(*sql_and_params)
</snippet></ROW><ROW><id>1633589</id><snippet>sql_and_params = "INSERT INTO table VALUES (%s, %s, %s)", var1, var2, var3
</snippet></ROW><ROW><id>1633589</id><snippet>cursor.execute(sql_and_params[0],sql_and_params[1:])
</snippet></ROW><ROW><id>1633589</id><snippet>sql = "INSERT INTO table VALUES (%s, %s, %s)"
args= var1, var2, var3
cursor.execute(sql,args)
</snippet></ROW><ROW><id>1633870</id><snippet>os</snippet></ROW><ROW><id>1633870</id><snippet>os</snippet></ROW><ROW><id>1633870</id><snippet>os.pardir</snippet></ROW><ROW><id>1633870</id><snippet>".."</snippet></ROW><ROW><id>1634000</id><snippet>string.split(pattern, 1)[0]
</snippet></ROW><ROW><id>1634000</id><snippet>string</snippet></ROW><ROW><id>1634000</id><snippet>pattern</snippet></ROW><ROW><id>1634000</id><snippet>1</snippet></ROW><ROW><id>1634000</id><snippet>[0]</snippet></ROW><ROW><id>1634000</id><snippet>&gt;&gt;&gt; s = "a descriptor 23 fd"
&gt;&gt;&gt; s.split("23", 1)[0]
'a descriptor '
&gt;&gt;&gt; s.split("fdasfdsafdsa", 1)[0]
'a descriptor 23 fd'
</snippet></ROW><ROW><id>1634000</id><snippet>reduce</snippet></ROW><ROW><id>1634000</id><snippet>&gt;&gt;&gt; string = "a descriptor dps foo 23 bar fd quux"
&gt;&gt;&gt; patterns = ["dps", "23", "fd"]
&gt;&gt;&gt; reduce(lambda s, pat: s.split(pat, 1)[0], patterns, string)
'a descriptor '
&gt;&gt;&gt; reduce(lambda s, pat: s.split(pat, 1)[0], patterns, "uiopuiopuiopuipouiop")
'uiopuiopuiopuipouiop'
</snippet></ROW><ROW><id>1634000</id><snippet>pat</snippet></ROW><ROW><id>1634000</id><snippet>patterns</snippet></ROW><ROW><id>1634000</id><snippet>string</snippet></ROW><ROW><id>1634000</id><snippet>string.split(pat, 1)[0]</snippet></ROW><ROW><id>1634000</id><snippet>string.find</snippet></ROW><ROW><id>1634000</id><snippet>&gt;&gt;&gt; s = "a descriptor 23 fd"
&gt;&gt;&gt; s[:s.find("fd")]
'a descriptor 23 '
&gt;&gt;&gt; s[:s.find("23")]  
'a descriptor '
&gt;&gt;&gt; s[:s.find("gggfdf")] # &lt;-- look out! last character got cut off
'a descriptor 23 f'
</snippet></ROW><ROW><id>1634000</id><snippet>s.find</snippet></ROW><ROW><id>1634000</id><snippet>&gt;&gt;&gt; def cutoff(string, pattern):
...     idx = string.find(pattern)
...     return string[:idx if idx != -1 else len(string)]
... 
&gt;&gt;&gt; cutoff(s, "23")
'a descriptor '
&gt;&gt;&gt; cutoff(s, "asdfdsafdsa")
'a descriptor 23 fd'
</snippet></ROW><ROW><id>1634000</id><snippet>[:s.find(x)]</snippet></ROW><ROW><id>1634000</id><snippet>s.find</snippet></ROW><ROW><id>1634367</id><snippet>is</snippet></ROW><ROW><id>1634367</id><snippet>a</snippet></ROW><ROW><id>1634367</id><snippet>b</snippet></ROW><ROW><id>1634367</id><snippet>a = 100.5
a is 100.5  # =&gt; False
a == 100.5  # =&gt; True

a = [1,2,3]
b = [1,2,3]
a == b  # =&gt; True
a is b  # =&gt; False
a = b
a == b  # =&gt; True
a is b  # =&gt; True, because if we change a, b changes too.
</snippet></ROW><ROW><id>1634367</id><snippet>==</snippet></ROW><ROW><id>1634367</id><snippet>is</snippet></ROW><ROW><id>1634367</id><snippet>==</snippet></ROW><ROW><id>1634367</id><snippet>__eq__</snippet></ROW><ROW><id>1634367</id><snippet>is</snippet></ROW><ROW><id>1634377</id><snippet>json.loads</snippet></ROW><ROW><id>1634377</id><snippet>dict</snippet></ROW><ROW><id>1634377</id><snippet>obj = json.loads('{"name": "joe"}')
person = obj['name']
</snippet></ROW><ROW><id>1634535</id><snippet>class MyClass:
    def __int__(self, a, b, c=None):
        self.a = a
        self.b = b
        self.c = c

one = MyClass(1,2)
one.c # None
two = MyClass(1,2,3)
two.c # 3
</snippet></ROW><ROW><id>1634679</id><snippet>from collections import namedtuple

# use namedtuple to define some simple classes (requires Py2.6 or later)
FooA = namedtuple('FooA', 'id name type foo')
FooB = namedtuple('FooB', 'idfoo namefoo spam')

# create a wrapper class for FooB's to look like a FooA
class FooAMimic(object):
    attrMap = dict(zip(FooA._fields, FooB._fields))
    # or if the fields aren't nicely ordered, declare this mapping explicitly
    #~ attrMap = { 'id' : 'idfoo', 'name' : 'namefoo', 'foo' : 'spam' }
    def __init__(self, obj):
        self.obj = obj
    def __getattr__(self, aname):
        ob = self.obj
        if aname in self.attrMap:
            return getattr(ob, self.attrMap[aname])
        elif  hasattr(ob, aname):
            return getattr(ob, aname)
        else:
            raise AttributeError("no such attribute " + aname)
    def __dir__(self):
        return sorted(set(dir(super(FooAMimic,self)) 
                          + dir(self.obj) 
                          + list(FooA._fields)))
</snippet></ROW><ROW><id>1634679</id><snippet># make some objects, some FooA, some FooB
fa = FooA('a', 'b', 'c','d')
fb = FooB('xx', 'yy', 'zz')
fc = FooA('e', 'f', 'g','h')

# create list of items that are FooA's, or FooA lookalikes
coll = [fa, FooAMimic(fb), fc]

# access objects like FooA's, but notice that the wrapped FooB
# attributes are still available too
for f in sorted(coll, key=lambda k : k.id):
    print f.id, '=', 
    try:
        print f.namefoo, "(really a namefoo)"
    except AttributeError:
        print f.name
</snippet></ROW><ROW><id>1634679</id><snippet>a = b
e = f
xx = yy (really a namefoo)
</snippet></ROW><ROW><id>1634947</id><snippet>from datetime import datetime

start = twf.CalendarDatePicker('StartDate', date_format = "%d/%m/%Y")
start.default = datetime.now() # or any valid datetime object

end = twf.CalendarDatePicker('EndDate', date_format = "%d/%m/%Y" )
start.default = datetime.now() # or any valid datetime object

form = twf.TableForm('dateSel', action='changeDate', children=[start, end])
</snippet></ROW><ROW><id>1635084</id><snippet>t.daemon = True</snippet></ROW><ROW><id>1635084</id><snippet>t.setDaemon(True)</snippet></ROW><ROW><id>1635084</id><snippet>t</snippet></ROW><ROW><id>1635084</id><snippet>join</snippet></ROW><ROW><id>1635084</id><snippet>join</snippet></ROW><ROW><id>1635084</id><snippet>for i in range(0, thread_count):
    threads[i].join()
</snippet></ROW><ROW><id>1635084</id><snippet>while threading.active_count() &gt; 0:
    time.sleep(0.1)
</snippet></ROW><ROW><id>1635302</id><snippet>foreach</snippet></ROW><ROW><id>1635302</id><snippet>min</snippet></ROW><ROW><id>1635302</id><snippet>def foreach(self, f):
    for d in self._data:
        f(d)
</snippet></ROW><ROW><id>1635302</id><snippet>def __iter__(self):
    for d in self._data:
        yield d
</snippet></ROW><ROW><id>1635302</id><snippet>min</snippet></ROW><ROW><id>1635302</id><snippet>min(myobj)</snippet></ROW><ROW><id>1635519</id><snippet>def formfield(self, **kwargs):
    # This is a fairly standard way to set up some defaults
    # while letting the caller override them.
    defaults = {'form_class': MyFormField}
    defaults.update(kwargs)
    return super(HandField, self).formfield(**defaults)
</snippet></ROW><ROW><id>1635519</id><snippet>forms.CharField</snippet></ROW><ROW><id>1635519</id><snippet>models.CharField</snippet></ROW><ROW><id>1635566</id><snippet>"powerpoint.exe /s &lt;filename&gt;.ppt"
</snippet></ROW><ROW><id>1635901</id><snippet>self.fields['whatever'].initial</snippet></ROW><ROW><id>1635901</id><snippet>None</snippet></ROW><ROW><id>1635901</id><snippet>from django import forms

_choices = ['to be', 'not to be']
class SomeForm(forms.Form):
    field = forms.ChoiceField(choices=[(item, item) for item in _choices],
                   widget=forms.HiddenInput()) # the real field

    mock_field = forms.ChoiceField(required=False, # doesn't get submitted
                        choices=[(item, item) for item in _choices],
                        label="The question",
                        widget=forms.Select(attrs={'disabled':'disabled'}))

    def __init__(self, *args, **kwargs):
        super(SomeForm, self).__init__(*args, **kwargs)
        mock_initial = kwargs['initial']['field']
        self.fields['mock_field'].choices = [(mock_initial, mock_initial),]
</snippet></ROW><ROW><id>1635901</id><snippet>field</snippet></ROW><ROW><id>1636156</id><snippet>struct</snippet></ROW><ROW><id>1636156</id><snippet>typedef struct s_generator {
    int current;
    int (*func)(int);
} generator;

int next(generator* gen) {
    int result = gen-&gt;current;
    gen-&gt;current = (gen-&gt;func)(gen-&gt;current);
    return result;
}
</snippet></ROW><ROW><id>1636156</id><snippet>int next_multiple(int current) { return 2 + current; }
generator multiples_of_2 = {0, next_multiple};
</snippet></ROW><ROW><id>1636156</id><snippet>next(&amp;multiples_of_2);
</snippet></ROW><ROW><id>1636168</id><snippet>FooPayment.amount</snippet></ROW><ROW><id>1636168</id><snippet>has()</snippet></ROW><ROW><id>1636615</id><snippet>label()</snippet></ROW><ROW><id>1636615</id><snippet>from sqlalchemy import select

def alias_dups(join):
    dups = set(col.key for col in join.left.columns) &amp; \
                set(col.key for col in join.right.columns)
    columns = []
    for col in join.columns:
        if col.key in dups:
            col = col.label('%s_%s' % (col.table.name, col.key))
        columns.append(col)
    return select(columns, from_obj=[join]).alias()

class ST2(Base):
    __table__ = alias_dups(t1.join(t2))
</snippet></ROW><ROW><id>1637318</id><snippet>unescape</snippet></ROW><ROW><id>1637318</id><snippet>import HTMLParser
s= HTMLParser.HTMLParser().unescape(s)
</snippet></ROW><ROW><id>1637318</id><snippet>s.decode(encoding)</snippet></ROW><ROW><id>1637605</id><snippet># -*- coding: utf-8 -*-
c = u'€'
print type(c)
for b in c.encode('utf-8'):
    print ord(b)

c = '€'
print type(c)
for b in c:
    print ord(b)
</snippet></ROW><ROW><id>1637605</id><snippet>IDLE 1.2.2      
&gt;&gt;&gt; c = u'€'
&gt;&gt;&gt; ord(c)
128
&gt;&gt;&gt; c.encode('utf-8')
'\xc2\x80'
&gt;&gt;&gt; c
u'\x80'
&gt;&gt;&gt; print c
&#128;[the box thingy]


&gt;&gt;&gt; c = u'\u20ac'
&gt;&gt;&gt; ord(c)
8364
&gt;&gt;&gt; c.encode('utf-8')
'\xe2\x82\xac'
&gt;&gt;&gt; c
u'\u20ac'
&gt;&gt;&gt; print c
€
</snippet></ROW><ROW><id>1637859</id><snippet>mylist[::3]</snippet></ROW><ROW><id>1637859</id><snippet>mylist = [i for i in range(100)]
for i in mylist[::3]:
  print(i),
</snippet></ROW><ROW><id>1638013</id><snippet>Load the word list (dictionary)
Input the words to unscramble
For each word:
  Find every permutation of letters in that word (permutation)
  For each permutation:
    Add this permutation to the solution list if it exists in the dictionary
Print the solutions that were found.
</snippet></ROW><ROW><id>1638013</id><snippet>for an in permutation(s[1:]):
</snippet></ROW><ROW><id>1638013</id><snippet>for pos in range(len(an)+1):
</snippet></ROW><ROW><id>1638013</id><snippet>ans.append(an[:pos]+s[0]+an[pos:])
</snippet></ROW><ROW><id>1638695</id><snippet>&gt;&gt;&gt; class A: pass

&gt;&gt;&gt; isinstance(A, type)
True
&gt;&gt;&gt; isinstance(A(), type)
False
</snippet></ROW><ROW><id>1638879</id><snippet>and_(photo_content_table.c.photoId == photo_table.c.id, photo_content_table.c.locale == get_lang)
</snippet></ROW><ROW><id>1639197</id><snippet>setattr</snippet></ROW><ROW><id>1639197</id><snippet>&gt;&gt;&gt; class AllMyFields:
...     def __init__(self, dictionary):
...         for k, v in dictionary.items():
...             setattr(self, k, v)
... 
&gt;&gt;&gt; o = AllMyFields({'a': 1, 'b': 2})
&gt;&gt;&gt; o.a
1
</snippet></ROW><ROW><id>1639317</id><snippet>django.contrib.admin</snippet></ROW><ROW><id>1639317</id><snippet>django.contrib.databrowse</snippet></ROW><ROW><id>1639317</id><snippet>from django.http import HttpResponse
import datetime

def current_datetime(request):
    now = datetime.datetime.now()
    html = "&lt;html&gt;&lt;body&gt;It is now %s.&lt;/body&gt;&lt;/html&gt;" % now
    return HttpResponse(html)
</snippet></ROW><ROW><id>1639317</id><snippet>pprint</snippet></ROW><ROW><id>1639317</id><snippet>from django.http import HttpResponse
import datetime
from pprint import pformat

def current_datetime(request):
    now = datetime.datetime.now()
    return HttpResponse(pformat(now), mimetype="text/plain")
</snippet></ROW><ROW><id>1639317</id><snippet>from django.http import HttpResponse
import datetime
import pprint

def prettyprint(fun):
    return lambda request:HttpResponse(
            pprint.pformat(fun(request)), mimetype="text/plain")

@prettyprint
def current_datetime(request):
    return datetime.datetime.now()
</snippet></ROW><ROW><id>1639436</id><snippet>jython.jar</snippet></ROW><ROW><id>1639436</id><snippet>jython.jar</snippet></ROW><ROW><id>1639436</id><snippet>LIB</snippet></ROW><ROW><id>1639436</id><snippet>jython.jar</snippet></ROW><ROW><id>1639436</id><snippet>jython.jar</snippet></ROW><ROW><id>1639436</id><snippet>LIB</snippet></ROW><ROW><id>1639436</id><snippet>jython.jar</snippet></ROW><ROW><id>1639436</id><snippet>python.cachedir
python.path
python.home
</snippet></ROW><ROW><id>1639436</id><snippet>jython-complete.jar</snippet></ROW><ROW><id>1639436</id><snippet>jython.jar</snippet></ROW><ROW><id>1639540</id><snippet>yourloggingmodule.handler.newLogMessage(...)
</snippet></ROW><ROW><id>1639540</id><snippet>handler</snippet></ROW><ROW><id>1639710</id><snippet>import IPython.Shell
ipshell = IPython.Shell.IPShell(argv=[], user_ns={'root':root})
ipshell.mainloop()
</snippet></ROW><ROW><id>1639713</id><snippet>hashed_emails = facebook.hash_email('foo@bar.com')

# Wrong: accounts = [hashed_emails]
accounts = [{"email_hash": hashed_emails}] 

facebook.connect.registerUsers(accounts)
</snippet></ROW><ROW><id>1639765</id><snippet>&gt;&gt;&gt; import urllib2
&gt;&gt;&gt; f = urllib2.urlopen("http://dalkescientific.com")
&gt;&gt;&gt; f.headers.items()
[('content-length', '7535'), ('accept-ranges', 'bytes'), ('server', 'Apache/2.2.14'),
 ('last-modified', 'Sun, 09 Mar 2008 00:27:43 GMT'), ('connection', 'close'),
 ('etag', '"19fa87-1d6f-447f627da7dc0"'), ('date', 'Wed, 28 Oct 2009 19:59:10 GMT'),
 ('content-type', 'text/html')]
&gt;&gt;&gt; f.headers["Content-Length"]
'7535'
&gt;&gt;&gt;
</snippet></ROW><ROW><id>1640002</id><snippet>iProduct = 1
for iFactor in xrange(1, i+1):
    iProduct *= iFactor
</snippet></ROW><ROW><id>1640057</id><snippet>import couchdb
import simplejson as json

resource = couchdb.client.Resource(None, 'http://localhost:5984/dbname/_all_docs')
params = {"include_docs":True}
content = json.dumps({"keys":[idstring1, idstring2, ...]})
headers = {"Content-Type":"application/json"}
resource.post(headers=headers, content=content, **params)
resource.post(headers=headers, content=content, **params)[1]['rows']
</snippet></ROW><ROW><id>1640500</id><snippet>%%%s%%</snippet></ROW><ROW><id>1640500</id><snippet>%%s%</snippet></ROW><ROW><id>1640500</id><snippet>%</snippet></ROW><ROW><id>1640500</id><snippet>%</snippet></ROW><ROW><id>1640500</id><snippet>%</snippet></ROW><ROW><id>1640500</id><snippet>s</snippet></ROW><ROW><id>1640500</id><snippet>%</snippet></ROW><ROW><id>1640500</id><snippet>%</snippet></ROW><ROW><id>1640500</id><snippet>%%%s%%</snippet></ROW><ROW><id>1640500</id><snippet>%</snippet></ROW><ROW><id>1640500</id><snippet>%s</snippet></ROW><ROW><id>1640500</id><snippet>%</snippet></ROW><ROW><id>1640615</id><snippet>s = ")"  # EOF in multi-line statement
s = "("  # EOF in multi-line statement
s = "]"  # EOF in multi-line statement
s = "["  # EOF in multi-line statement
s = "}"  # EOF in multi-line statement
s = "{"  # EOF in multi-line statement
</snippet></ROW><ROW><id>1640615</id><snippet>s = "$"
s = "'"
</snippet></ROW><ROW><id>1640736</id><snippet>f = opener.open(req)
simplejson.load(f)
</snippet></ROW><ROW><id>1640736</id><snippet>simplejson.load(f)</snippet></ROW><ROW><id>1641021</id><snippet>class Test(models.Model):
    title = models.CharField('title', max_length=200)
    blah = models.CharField('blah', max_length=200)

    def save(self, force_insert=False, force_update=False):
        if not self.blah:
            self.blah = 'hello'
        super(Test, self).save(force_insert, force_update)
</snippet></ROW><ROW><id>1641161</id><snippet>HandleCommandLine</snippet></ROW><ROW><id>1641189</id><snippet>Queue</snippet></ROW><ROW><id>1641189</id><snippet>Queue</snippet></ROW><ROW><id>1641189</id><snippet>append</snippet></ROW><ROW><id>1641189</id><snippet>pop</snippet></ROW><ROW><id>1641189</id><snippet>with</snippet></ROW><ROW><id>1641189</id><snippet>Queue</snippet></ROW><ROW><id>1641242</id><snippet>itertools</snippet></ROW><ROW><id>1641242</id><snippet>def twobytwo(t):
  it = iter(t)
  for x in it:
    yield x, next(it)

d = dict(twobytwo(t))
</snippet></ROW><ROW><id>1641242</id><snippet>def twobytwo(t):
  a, b = itertools.tee(iter(t))
  next(b)
  return itertools.izip(a, b)

d = dict(twobytwo(t))
</snippet></ROW><ROW><id>1641242</id><snippet>d = dict((x, next(it)) for it in (iter(t),) for x in it)
</snippet></ROW><ROW><id>1641242</id><snippet>dict</snippet></ROW><ROW><id>1641242</id><snippet>O(1)</snippet></ROW><ROW><id>1641242</id><snippet>O(N)</snippet></ROW><ROW><id>1641242</id><snippet>pairwise</snippet></ROW><ROW><id>1641242</id><snippet>iterutils.py</snippet></ROW><ROW><id>1641280</id><snippet>&gt;&gt;&gt; from collections import defaultdict
&gt;&gt;&gt; from gc import get_objects
&gt;&gt;&gt; before=defaultdict(int)
&gt;&gt;&gt; after=defaultdict(int)
&gt;&gt;&gt; for i in get_objects():before[type(i)]+=1
...
</snippet></ROW><ROW><id>1641280</id><snippet>&gt;&gt;&gt; leaked_things=[[x] for x in range(10)]
&gt;&gt;&gt; for i in get_objects():after[type(i)]+=1
... 
&gt;&gt;&gt; print [(k,after[k]-before[k]) for k in after if after[k]-before[k]]
[(&lt;type 'list'&gt;, 11)]
</snippet></ROW><ROW><id>1641406</id><snippet>sys.path.append('/home/myuser/svn-repos')</snippet></ROW><ROW><id>1641406</id><snippet>import myproject</snippet></ROW><ROW><id>1641406</id><snippet>svn-repos</snippet></ROW><ROW><id>1641406</id><snippet>myproject</snippet></ROW><ROW><id>1641406</id><snippet>settings</snippet></ROW><ROW><id>1641406</id><snippet>import settings</snippet></ROW><ROW><id>1641406</id><snippet>sys.path.insert(0, 'yourpath')</snippet></ROW><ROW><id>1641406</id><snippet>settings</snippet></ROW><ROW><id>1641426</id><snippet>myproj.pth</snippet></ROW><ROW><id>1641426</id><snippet>*.pth</snippet></ROW><ROW><id>1641426</id><snippet>/usr/local/lib/python2.6/dist-packages/</snippet></ROW><ROW><id>1641762</id><snippet>gc.get_referrers(thatobject)</snippet></ROW><ROW><id>1641762</id><snippet>gc.collect()</snippet></ROW><ROW><id>1641762</id><snippet>thatobject</snippet></ROW><ROW><id>1641762</id><snippet>.remove</snippet></ROW><ROW><id>1641762</id><snippet>dict</snippet></ROW><ROW><id>1641762</id><snippet>__dict__</snippet></ROW><ROW><id>1642026</id><snippet>if re.search('[A-Za-z0-9]+', i):
    print i
</snippet></ROW><ROW><id>1642943</id><snippet>PYTHONPATH=...
export PYTHONPATH
</snippet></ROW><ROW><id>1643049</id><snippet>print text</snippet></ROW><ROW><id>1643049</id><snippet>print text.encode('utf-8')</snippet></ROW><ROW><id>1643215</id><snippet>commit=False</snippet></ROW><ROW><id>1643215</id><snippet>result = form.save(commit=False)
result.host = calculate_the_host_from(result)
result.save()
</snippet></ROW><ROW><id>1643330</id><snippet>link /dump /exports</snippet></ROW><ROW><id>1643525</id><snippet>import datetime
from itertools import groupby
from pprint import pprint

required_data={}
for k,g in groupby(mydata,key=lambda x: x.get('year')):
    partial={}
    for datum in g:
        partial[datum.get('date').month]=datum    
    required_data[k]=[partial.get(m,{}) for m in range(1,13)]
pprint(required_data)
</snippet></ROW><ROW><id>1643525</id><snippet>partial</snippet></ROW><ROW><id>1643525</id><snippet>partial.get(m,{})</snippet></ROW><ROW><id>1643661</id><snippet>sys.argv[1:]</snippet></ROW><ROW><id>1643661</id><snippet>for grp in sys.argv[1:]:
  for i in range(len(sh.col_values(8))):
   if sh.cell(i, 1).value == grp:
      hlo.append(sh.cell(i, 8).value)
</snippet></ROW><ROW><id>1643682</id><snippet>import django.dispatch
your_signal = django.dispatch.Signal(providing_args=["send_email",])

def your_callback(sender, **kwargs):
    print send_email

your_signal.connect(your_callback)

class YourModel(models.Model):
    ...
    def delete(self, send_email=True):
        super(YourModel, self).delete()
        your_signal.send(sender=self, send_email=send_email)
    ...
</snippet></ROW><ROW><id>1643709</id><snippet>import os
os._exit(3)
</snippet></ROW><ROW><id>1643823</id><snippet>[+-/]</snippet></ROW><ROW><id>1644392</id><snippet>datetime</snippet></ROW><ROW><id>1644392</id><snippet>&gt;&gt;&gt; import datetime
&gt;&gt;&gt; x=datetime.datetime(1865, 7, 2, 9, 30, 21)
&gt;&gt;&gt; x.isoformat()
'1865-07-02T09:30:21'
</snippet></ROW><ROW><id>1644392</id><snippet>isoformat</snippet></ROW><ROW><id>1644392</id><snippet>YYYY-MM-DDTHH:MM:SS.mmmmmm</snippet></ROW><ROW><id>1644488</id><snippet>import re, decimal
r= re.compile('([^ =]+) *= *("[^"]*"|[^ ]*)')

d= {}
for k, v in r.findall(line):
    if v[:1]=='"':
        d[k]= v[1:-1]
    else:
        d[k]= decimal.Decimal(v)

&gt;&gt;&gt; d
{'account': 'TEST1', 'subject': 'some value', 'values': '3=this, 4=that', 'price': Decimal('20.11'), 'Qty': Decimal('100.0')}
</snippet></ROW><ROW><id>1644608</id><snippet>if int(test[0]) is not len(test[1:]):
</snippet></ROW><ROW><id>1644608</id><snippet>is</snippet></ROW><ROW><id>1644608</id><snippet>is not</snippet></ROW><ROW><id>1644608</id><snippet>=</snippet></ROW><ROW><id>1644608</id><snippet>!=</snippet></ROW><ROW><id>1644608</id><snippet>len(cars) is 0</snippet></ROW><ROW><id>1644608</id><snippet>error</snippet></ROW><ROW><id>1644608</id><snippet>error</snippet></ROW><ROW><id>1644608</id><snippet>False</snippet></ROW><ROW><id>1645099</id><snippet>from xml.etree.ElementTree import XMLTreeBuilder
class MyHandler(object):
    def start(self, tag, attrib):
        # Called for each opening tag.
        print tag + " started"
    def end(self, tag):
        # Called for each closing tag.
        print tag  + " ended"
    def data(self, data):
        # Called when data is read from a tag
        print data  + " data read"
    def close(self):    
        # Called when all data has been parsed.
        print "All data read"

handler = MyHandler()

parser = XMLTreeBuilder(target=handler)

parser.feed(&lt;sometag&gt;)
parser.feed(&lt;sometag-child-tag&gt;text)
parser.feed(&lt;/sometag-child-tag&gt;)
parser.feed(&lt;/sometag&gt;)
parser.close()
</snippet></ROW><ROW><id>1645140</id><snippet>yourstring = receivedbytes.decode("utf-8") 
</snippet></ROW><ROW><id>1645140</id><snippet>utf-8</snippet></ROW><ROW><id>1645140</id><snippet>outbytes = yourstring.encode("utf-8")
</snippet></ROW><ROW><id>1645141</id><snippet>print '''Status:501
Content-type: text/html

'''
</snippet></ROW><ROW><id>1645141</id><snippet>print '''HTTP/1.1 501 Not Implemented
Content-type: text/html

'''
</snippet></ROW><ROW><id>1645159</id><snippet>import sys

def trace(frame, event, arg_unused):
    print event, frame.f_lineno, frame.f_locals
    return trace

sys.settrace(trace)

def foo():
    a = 1
    b = 2

    a = a + b

foo()
</snippet></ROW><ROW><id>1645159</id><snippet>call 9 {}
line 10 {}
line 11 {'a': 1}
line 13 {'a': 1, 'b': 2}
return 13 {'a': 3, 'b': 2}
</snippet></ROW><ROW><id>1645519</id><snippet>manage.py syndcb</snippet></ROW><ROW><id>1645519</id><snippet>manage.py reset yourapp</snippet></ROW><ROW><id>1645621</id><snippet>this.</snippet></ROW><ROW><id>1645621</id><snippet>TestClass(string value) // Constructor
{
    this.testOne = value;
}
</snippet></ROW><ROW><id>1645621</id><snippet>L_0000: ldarg.0
// ... other initialization stuff 
L_0004: ldarg.1
L_0005: stfld string TestProject.TestClass::testOne
</snippet></ROW><ROW><id>1645621</id><snippet>class Test
{
    void TestMethod(Test instance) { 
       // Do something
    }
    void CallTestMethod() {
        TestMethod(this);
    }
</snippet></ROW><ROW><id>1645621</id><snippet>.method public hidebysig instance void CallTestMethod() cil managed
{
    .maxstack 8
    L_0000: nop 
    L_0001: ldarg.0 
    L_0002: ldarg.0 
    L_0003: call instance void CSharpConsoleApplication.Test::TestMethod(class CSharpConsoleApplication.Test)
    L_0008: nop 
    L_0009: ret 
}
</snippet></ROW><ROW><id>1645621</id><snippet>ldarg.0</snippet></ROW><ROW><id>1645621</id><snippet>ldarg.1</snippet></ROW><ROW><id>1645766</id><snippet>fileobj = file.open(path, mode)
fileobj = fcn(fileobj)
fileobj.writelines(fileobj.readlines())
</snippet></ROW><ROW><id>1645766</id><snippet>fcn</snippet></ROW><ROW><id>1645766</id><snippet>with open(filename, "r") as f:
    s = f.read()
for transform_function in transforms:
    s = transform_function(s)
with open(filename, "w") as f:
    f.write(s)
</snippet></ROW><ROW><id>1645837</id><snippet>&gt;&gt;&gt; from itertools import izip
&gt;&gt;&gt; t = [1,2,3,4,5,6,7,8,9,10,11,12]
&gt;&gt;&gt; for a, b in izip(*[iter(t)]*2):
...     print a, b
...
1 2
3 4
5 6
7 8
9 10
11 12
&gt;&gt;&gt; for a, b, c in izip(*[iter(t)]*3):
...     print a, b, c
...
1 2 3
4 5 6
7 8 9
10 11 12
&gt;&gt;&gt; for a, b, c, d in izip(*[iter(t)]*4):
...     print a, b, c, d
...
1 2 3 4
5 6 7 8
9 10 11 12
&gt;&gt;&gt; for a, b, c, d, e, f in izip(*[iter(t)]*6):
...     print a, b, c, d, e, f
...
1 2 3 4 5 6
7 8 9 10 11 12
&gt;&gt;&gt;
</snippet></ROW><ROW><id>1645947</id><snippet>Model.objects.filter(Q(question__startswith='Who') | Q(question__startswith='What'))
</snippet></ROW><ROW><id>1645947</id><snippet>Model.objects.filter(Q(language='de') | Q(language='en'))
</snippet></ROW><ROW><id>1645947</id><snippet>shared_qs = Model.objects.filter(active=True)
german_entries = shared_qs.filter(language='de')
german_and_english = shared_qs.filter(Q(language='de') | Q(language='en'))
</snippet></ROW><ROW><id>1646379</id><snippet>&gt;&gt;&gt; import dis
&gt;&gt;&gt; dis.opname[54]
'STORE_MAP'
</snippet></ROW><ROW><id>1646414</id><snippet>archives</snippet></ROW><ROW><id>1646414</id><snippet>[datetime, bool]</snippet></ROW><ROW><id>1646414</id><snippet>datetime</snippet></ROW><ROW><id>1646414</id><snippet>bool</snippet></ROW><ROW><id>1646414</id><snippet>True</snippet></ROW><ROW><id>1646414</id><snippet>archives</snippet></ROW><ROW><id>1646414</id><snippet>from datetime import date

def archive(request):
    arch = Post.objects.dates('date', 'month', order='DESC')

    archives = {}

    for i in arch:
        year = i.year
        month = i.month
        try:
            archives[year][month-1][1]=True
        except KeyError:
            # catch the KeyError, and set up list for that year
            archives[year]=[[date(y,m,1),False] for m in xrange(1,13)]
            archives[year][month-1][1]=True

    return render_to_response('blog/arhiva.html', 
              {'archives':sorted(archives.items(),reverse=True)})
</snippet></ROW><ROW><id>1646414</id><snippet>{% for year, month_list in archives %}
  {{ year }} archives: 
  {% for month, has_link in month_list %}
    {% if has_link %}&lt;a href="/{{ month.year }}/{{ month.month }}/"&gt;{% endif %}
      {{ month|date:"M" }}
    {% if has_link %}&lt;/a&gt;{% endif %}
  {% endfor %}
{% endfor %}
</snippet></ROW><ROW><id>1646414</id><snippet>rom_months = ['Ian', 'Feb', 'Mar', 'Apr', 'Mai', 'Iun', 
              'Iul', 'Aug', 'Sept', 'Oct', 'Noi', 'Dec']
</snippet></ROW><ROW><id>1646414</id><snippet>archives[year]=[[date(y,k+1,1),False,rom] for k, rom in enumerate(rom_months)]
</snippet></ROW><ROW><id>1646414</id><snippet>...
{% for month, has_link, rom_month in month_list %}
  {% if has_link %}&lt;a href="/{{ month.year }}/{{ month.month }}/"&gt;{% endif %}
  {{ rom_month }}
...
</snippet></ROW><ROW><id>1646530</id><snippet>test</snippet></ROW><ROW><id>1646530</id><snippet>DJANGO_SETTINGS_MODULE</snippet></ROW><ROW><id>1646530</id><snippet>settings.configure()</snippet></ROW><ROW><id>1646692</id><snippet>def in_list(small, big):
    l_sml = len(small)
    l_big = len(big)
    return any((big[i:i+l_sml]==small for i in xrange(l_big-l_sml+1)))

print in_list([4,2,1], [1,2,3,4,2,1,0,5]) # True
print in_list([1,2,3], [1,2,4])           # False
</snippet></ROW><ROW><id>1646820</id><snippet>{{ stuff.0.a }}
</snippet></ROW><ROW><id>1646827</id><snippet>import re
pat = re.compile("^(.*class\s+\w+)(:.*)$")
out_file = open("edited_file.py", "w")
for line in open("generated_file.py"):
    m = pat.match(line)
    if m:
        line = m.group(1) + "(object)" + m.group(2) + "\n"
    out_file.write(line)

out_file.close()
</snippet></ROW><ROW><id>1646827</id><snippet>object</snippet></ROW><ROW><id>1647067</id><snippet>employees = Employee.objects.filter(id=your_id).select_related()
if employees.count() == 1:
    phone_numbers = employees[0].phonenumber_set.all()
</snippet></ROW><ROW><id>1647106</id><snippet>for i in range(0,1):
    buffer_shp = newpath + "buff" + str(i) + ".shp"
    gp.Buffer_analysis(center_services, buffer_shp, etc etc)
</snippet></ROW><ROW><id>1647106</id><snippet>blahblah\buff0.shp</snippet></ROW><ROW><id>1647106</id><snippet>blahblah\buff1.shp</snippet></ROW><ROW><id>1647106</id><snippet>gp.Buffer_analysis()</snippet></ROW><ROW><id>1647106</id><snippet>#Loop through a range of buffers (1 -&gt;100)</snippet></ROW><ROW><id>1647106</id><snippet>    os.mkdir( path + results )      
    newpath = path + results
</snippet></ROW><ROW><id>1647106</id><snippet>    newpath = path + results # using os.path.join() is even better
    os.mkdir(newpath)      
</snippet></ROW><ROW><id>1647106</id><snippet>os.mkdir()</snippet></ROW><ROW><id>1647106</id><snippet>    buffered_analysis_count_shp = newpath + "buffered_analysis_count.shp"
    count_txt = newpath + "count.txt"
</snippet></ROW><ROW><id>1647616</id><snippet>import new
class Z(object):
  pass
z = Z() 
def method(self):
  return self
z.q = new.instancemethod(method, z, None)
z is z.q()  # true
</snippet></ROW><ROW><id>1647718</id><snippet>import win32com.client, os

wdDoNotSaveChanges = 0
path = os.path.abspath('snippet.txt')

snippet = 'Jon Skeet lieks ponies.  I can haz reputashunz?  '
snippet += 'This is a correct sentence.'
file = open(path, 'w')
file.write(snippet)
file.close()

app = win32com.client.gencache.EnsureDispatch('Word.Application')
doc = app.Documents.Open(path)
print "Grammar: %d" % (doc.GrammaticalErrors.Count,)
print "Spelling: %d" % (doc.SpellingErrors.Count,)

app.Quit(wdDoNotSaveChanges)
</snippet></ROW><ROW><id>1648142</id><snippet>QtGui.QCheckBox('%s' % item, self.chk_People)
</snippet></ROW><ROW><id>1648142</id><snippet>QListWidget</snippet></ROW><ROW><id>1648142</id><snippet>QListWidgetItem</snippet></ROW><ROW><id>1648142</id><snippet>addItem</snippet></ROW><ROW><id>1648183</id><snippet>RotatingFileHandler</snippet></ROW><ROW><id>1648626</id><snippet>findall</snippet></ROW><ROW><id>1648626</id><snippet>&gt;&gt;&gt; s = "Wilbur Smith (Billy, son of John), Eddie Murphy (John), Elvis Presley, Jane Doe (Jane Doe)"
&gt;&gt;&gt; r = re.compile(r'(?:[^,(]|\([^)]*\))+')
&gt;&gt;&gt; r.findall(s)
['Wilbur Smith (Billy, son of John)', ' Eddie Murphy (John)', ' Elvis Presley', ' Jane Doe (Jane Doe)']
</snippet></ROW><ROW><id>1648626</id><snippet>"Wilbur Smith (son of John (Johnny, son of James), aka Billy), Eddie Murphy (John)"
</snippet></ROW><ROW><id>1648865</id><snippet>ConfigParser.readfp()</snippet></ROW><ROW><id>1648865</id><snippet>cfg.readfp(codecs.open("myconfig", "r", "utf8"))
</snippet></ROW><ROW><id>1648982</id><snippet> initialisers = [foo, bar, baz]
 if initialisers.count(None) &lt; len(initialisers) - 1:
     raise Ex()
</snippet></ROW><ROW><id>1648982</id><snippet>None</snippet></ROW><ROW><id>1648982</id><snippet>None</snippet></ROW><ROW><id>1649050</id><snippet>except:</snippet></ROW><ROW><id>1649050</id><snippet>logging</snippet></ROW><ROW><id>1649050</id><snippet>basicConfig()</snippet></ROW><ROW><id>1649050</id><snippet>**kwargs</snippet></ROW><ROW><id>1649050</id><snippet>basicConfig()</snippet></ROW><ROW><id>1649050</id><snippet>logging</snippet></ROW><ROW><id>1649050</id><snippet>except:</snippet></ROW><ROW><id>1649218</id><snippet>sys.path.append(os.path.join(os.path.dirname(__file__), 'lib')
</snippet></ROW><ROW><id>1649487</id><snippet>...
(regexp, decorator(view)),
...
</snippet></ROW><ROW><id>1649487</id><snippet>&lt;app&gt;/views.py</snippet></ROW><ROW><id>1649487</id><snippet>import view


view = decorator(view)
</snippet></ROW><ROW><id>1649487</id><snippet>import view


@decorator
def wrapperview(request, *args, **kwargs):
    ... other stuff ...
    return view(request, *args, **kwargs)
</snippet></ROW><ROW><id>1649579</id><snippet>HTTPResponse.getheaders()</snippet></ROW><ROW><id>1649579</id><snippet>dict.items()</snippet></ROW><ROW><id>1649579</id><snippet>HTTPResponse.msg.headers</snippet></ROW><ROW><id>1649804</id><snippet>func(**kwargs)</snippet></ROW><ROW><id>1649804</id><snippet>kwargs</snippet></ROW><ROW><id>1649804</id><snippet>frequency</snippet></ROW><ROW><id>1649804</id><snippet>frequencies</snippet></ROW><ROW><id>1649804</id><snippet>if frequency in frequency</snippet></ROW><ROW><id>1649804</id><snippet>class geoProcessClass():
    def __init__(self, geoTaskHandler, startDate, frequency, frequencyMultiple=1, *args):
        self.interval = self.determineTimeDelta(frequency, frequencyMultiple)

    def determineTimeDelta(self, frequency, frequencyMultiple):
        frequencies = ["hours", "days", "weeks"]

        if frequency in frequencies:
            kwargs = {frequency: frequencyMultiple}
        else:
            kwargs = {"days": 1}

        return datetime.timedelta(**kwargs)
</snippet></ROW><ROW><id>1649804</id><snippet>if</snippet></ROW><ROW><id>1650176</id><snippet>cgi.escape</snippet></ROW><ROW><id>1650176</id><snippet>cgi.escape(s[, quote])</snippet></ROW><ROW><id>1650176</id><snippet>&gt;&gt;&gt; import cgi
&gt;&gt;&gt; cgi.escape('&lt;&amp;&gt;')
'&lt;&amp;&gt;'
&gt;&gt;&gt;
</snippet></ROW><ROW><id>1650283</id><snippet>configure</snippet></ROW><ROW><id>1650283</id><snippet>--with-ncurses=/utv/sad/ncurses/lib/libncurses.a
</snippet></ROW><ROW><id>1650283</id><snippet>--with-ncurses=/utv/sad/ncurses/lib
</snippet></ROW><ROW><id>1650283</id><snippet>-lncurses</snippet></ROW><ROW><id>1650359</id><snippet> &gt;&gt;&gt; pi = robjects.r['pi']
 &gt;&gt;&gt; pi[0]
 3.14159265358979
</snippet></ROW><ROW><id>1650364</id><snippet>&gt;&gt;&gt; x = re.search('\((.*),\s*(.*)\)', " {'result':(Boolean, MessageString)} ")
&gt;&gt;&gt; x.group(1)
'Boolean'
&gt;&gt;&gt; x.group(2)
'MessageString'
</snippet></ROW><ROW><id>1650390</id><snippet>import __builtin__
getattr(__builtin__,'int')
</snippet></ROW><ROW><id>1650553</id><snippet>&gt;&gt;&gt; validate_latitude(-91)
-90
</snippet></ROW><ROW><id>1650553</id><snippet>-</snippet></ROW><ROW><id>1650553</id><snippet>-90</snippet></ROW><ROW><id>1650553</id><snippet>0</snippet></ROW><ROW><id>1650647</id><snippet>pickle</snippet></ROW><ROW><id>1650680</id><snippet>&lt;root&gt;/</snippet></ROW><ROW><id>1650680</id><snippet>&lt;root&gt;/base</snippet></ROW><ROW><id>1650680</id><snippet>sys.path</snippet></ROW><ROW><id>1650680</id><snippet>import other_stuff.BarCode as bc</snippet></ROW><ROW><id>1650680</id><snippet>other_stuff</snippet></ROW><ROW><id>1650680</id><snippet>base</snippet></ROW><ROW><id>1650680</id><snippet>import base.other_stuff.BarCode as bc</snippet></ROW><ROW><id>1650680</id><snippet>BarCode</snippet></ROW><ROW><id>1650680</id><snippet>other_stuff.BarCode</snippet></ROW><ROW><id>1650680</id><snippet>base.other_stuff.BarCode</snippet></ROW><ROW><id>1650680</id><snippet>&lt;root&gt;/base</snippet></ROW><ROW><id>1650680</id><snippet>sys.path</snippet></ROW><ROW><id>1650680</id><snippet>from ..other_stuff import BarCode as bc</snippet></ROW><ROW><id>1650834</id><snippet>mysql_set_charset()</snippet></ROW><ROW><id>1650834</id><snippet>ext/mysql</snippet></ROW><ROW><id>1650834</id><snippet>ext/mysqli</snippet></ROW><ROW><id>1650834</id><snippet>mysqli_set_charset</snippet></ROW><ROW><id>1650834</id><snippet>PDO</snippet></ROW><ROW><id>1650834</id><snippet>::mysql</snippet></ROW><ROW><id>1650834</id><snippet>SET NAMES x</snippet></ROW><ROW><id>1650834</id><snippet>SET character_set_client = x;
SET character_set_results = x;
SET character_set_connection = x;
</snippet></ROW><ROW><id>1650834</id><snippet>SET character_set_connection = x</snippet></ROW><ROW><id>1650834</id><snippet>SET collation_connection = &lt;&lt;default_collation_of_character_set_x&gt;&gt;</snippet></ROW><ROW><id>1650834</id><snippet>my.ini/cnf</snippet></ROW><ROW><id>1650940</id><snippet>do_your_job()</snippet></ROW><ROW><id>1650940</id><snippet>os.listdir()</snippet></ROW><ROW><id>1650940</id><snippet>os.makedirs()</snippet></ROW><ROW><id>1650940</id><snippet>os.chown()</snippet></ROW><ROW><id>1650940</id><snippet>do_your_job()</snippet></ROW><ROW><id>1650977</id><snippet>return HttpResponseRedirect(
    'https://www.google.com/a/thedomain.com/o8/ud?be=o8'
    + '?'
    + urllib.urlencode(parameters)
)
</snippet></ROW><ROW><id>1651284</id><snippet>def ack(m, n, _memo={}):
  key = m, n
  if key not in _memo:
    if m==0: v = n + 1
    elif n==0: v = ack(m-1, 1)
    else: v = ack(m-1, ack(m, n-1))
    _memo[key] = v
  return _memo[key]
</snippet></ROW><ROW><id>1651284</id><snippet>for i in range(len(buttons)):
  buttons[i].onclick(lambda i=i: say('button %s', i))
</snippet></ROW><ROW><id>1651284</id><snippet>i=i</snippet></ROW><ROW><id>1651407</id><snippet>&gt;&gt;&gt; words
['The', 'Quick', 'Brown', 'Fox', 'Jumps', 'Over', 'The', 'Lazy', 'Dog']
&gt;&gt;&gt; [words[i:i+3] for i in range(len(words) - 2)]
[['The', 'Quick', 'Brown'], ['Quick', 'Brown', 'Fox'], ['Brown', 'Fox', 'Jumps'], ['Fox', 'Jumps', 'Over'], ['Jumps', 'Over', 'The'], ['Over', 'The', 'Lazy'], ['The', 'Lazy', 'Dog']]
</snippet></ROW><ROW><id>1651417</id><snippet>data = open('x.txt').read()
</snippet></ROW><ROW><id>1651417</id><snippet># needed in 2.5, unneeded but innocuous in 2.6
from __future__ import with_statement

with open('x.txt') as f: data = f.read()
</snippet></ROW><ROW><id>1651417</id><snippet>with</snippet></ROW><ROW><id>1651562</id><snippet>For each string in the array:
    Find the first '{'. If there is none, leave that string alone.
    Init a counter to 0. 
    For each character in the string:  
        If you see a '{', increment the counter.
        If you see a '}', decrement the counter.
        If the counter reaches 0, break.
    Here, if your counter is not 0, you have invalid input (unbalanced brackets)
    If it is, then take the string from the first '{' up to the '}' that put the
     counter at 0, and that is a new element in your array.
</snippet></ROW><ROW><id>1651707</id><snippet>def fabricateAnotherObject(self, **kwargs):
    return testClass(**kwargs)
</snippet></ROW><ROW><id>1651707</id><snippet>class Factory(object):
   def __init__(self, theClass):
       self.theClass = theClass
   def create(self, **kwargs):
       self.theClass(**kwargs)

myFactory = Factory(testClass)
</snippet></ROW><ROW><id>1652105</id><snippet>def parse(expr):
    if re.match(r'\A(("[\w\s]+"|\w+)\s+)*\Z', expr):
        return re.findall(r'("[\w\s]+"|\w+)', expr)
</snippet></ROW><ROW><id>1652105</id><snippet>&gt;&gt;&gt; parse('foo "bar baz" "bob" ')
['foo', '"bar baz"', '"bob"']
&gt;&gt;&gt; parse('foo "bar b-&amp;&amp;az" "bob" ')
&gt;&gt;&gt; parse('foo "bar" ')
['foo', '"bar"']
&gt;&gt;&gt; parse('"foo" bar ')
['"foo"', 'bar']
&gt;&gt;&gt; parse('foo"bar baz" "bob" ')
&gt;&gt;&gt; parse('&amp;&amp;')
</snippet></ROW><ROW><id>1652156</id><snippet>#!/usr/bin/env python
import dbus

bus = dbus.SessionBus()

if "im.pidgin.purple.PurpleService" in bus.list_names():
    purple = bus.get_object("im.pidgin.purple.PurpleService",
            "/im/pidgin/purple/PurpleObject",
            "im.pidgin.purple.PurpleInterface")

    print "Connected to the pidgin DBus."
    for conv in purple.PurpleGetIms():
        purple.PurpleConvImSend(purple.PurpleConvIm(conv), "Ignore this message.")

else:
    print "Could not find piding DBus service, make sure Pidgin is running."
</snippet></ROW><ROW><id>1653121</id><snippet>updated_min = raw_input('Enter updated min (example: 2007-03-16T00:00:00): ')
query = gdata.contacts.service.ContactsQuery()
query.updated_min = updated_min
</snippet></ROW><ROW><id>1653121</id><snippet>updated_min</snippet></ROW><ROW><id>1653121</id><snippet>datetime</snippet></ROW><ROW><id>1653122</id><snippet>from twisted.internet import reactor
from twisted.web import client

def processResult(page):
    print "I got some data", repr(page)
    reactor.callLater(0.1, reactor.stop)
def dealWithError(err):
    print err.getErrorMessage()
    reactor.callLater(0.1, reactor.stop)

class ProxyClientFactory(client.HTTPClientFactory):
    def setURL(self, url):
        client.HTTPClientFactory.setURL(self, url)
        self.path = url

factory = ProxyClientFactory('http://url_you_want')
factory.deferred.addCallbacks(processResult, dealWithError)

reactor.connectTCP('proxy_address', 3142, factory)
reactor.run()
</snippet></ROW><ROW><id>1653364</id><snippet>PyObjC</snippet></ROW><ROW><id>1653364</id><snippet>OS X 10.5</snippet></ROW><ROW><id>1653364</id><snippet>10.6</snippet></ROW><ROW><id>1653364</id><snippet>setuptools</snippet></ROW><ROW><id>1653364</id><snippet>easy_install-2.6</snippet></ROW><ROW><id>1653364</id><snippet>/Library/Frameworks/Python.framework/Versions/2.6/bin</snippet></ROW><ROW><id>1653364</id><snippet>PATH</snippet></ROW><ROW><id>1653364</id><snippet>easy_install-2.6 pyobjc==2.2b2
</snippet></ROW><ROW><id>1653364</id><snippet>sudo port install py26-pyobjc2
</snippet></ROW><ROW><id>1653495</id><snippet>pickle</snippet></ROW><ROW><id>1653495</id><snippet>cPickle</snippet></ROW><ROW><id>1653537</id><snippet>import re

x = re.compile(r'^([^\|]*?)\s*\|[^\n]*\n\s*(.*?)\s*$')

s = """NETHERLANDS MUSIC EPA | 36 before
Michael Buble performs in Amsterdam Canadian singer Michael Buble performs during a concert in Amsterdam, The Netherlands, 30 October 2009. Buble released his new album entitled 'Crazy Love'. EPA/OLAF KRAAK"""

mo = x.match(s)

subject, content = mo.groups()

print 'SUBJECT =', repr(subject)
print 'CONTENT =', repr(content)
</snippet></ROW><ROW><id>1653537</id><snippet>SUBJECT = 'NETHERLANDS MUSIC EPA'
CONTENT = "Michael Buble performs in Amsterdam Canadian singer Michael Buble performs during a concert in Amsterdam, The Netherlands, 30 October 2009. Buble released his new album entitled 'Crazy Love'. EPA/OLAF KRAAK"
</snippet></ROW><ROW><id>1653537</id><snippet>y = re.compile(r'^.*SUBJECT\s*=\s*\'([^\']*)\'.*CONTENT\s*=\s*"([^"]*)"',
               re.DOTANY)
</snippet></ROW><ROW><id>1653974</id><snippet>OrderedSet([1, 2, 3])
</snippet></ROW><ROW><id>1653974</id><snippet>.union</snippet></ROW><ROW><id>1653974</id><snippet>__or__</snippet></ROW><ROW><id>1653974</id><snippet>@staticmethod
def union(*sets):
    union = OrderedSet()
    union.union(*sets)
    return union

def union(self, *sets):
    for set in sets:
        self |= set
</snippet></ROW><ROW><id>1654311</id><snippet>md5</snippet></ROW><ROW><id>1654311</id><snippet>md5</snippet></ROW><ROW><id>1654624</id><snippet>shell=True</snippet></ROW><ROW><id>1654624</id><snippet>import subprocess
subprocess.Popen("sleep 4s &amp;&amp; echo right thar, right thar",shell=True);
print 'i like it when you put it'
</snippet></ROW><ROW><id>1654624</id><snippet> I like it when you put it
 [4 seconds later]
 right thar, right thar
</snippet></ROW><ROW><id>1654764</id><snippet>def findpath(target, start=os.path.curdir):
    sdrive, start = os.path.splitdrive(start)
    tdrive, target = os.path.splitdrive(target)
    rdrive = tdrive or sdrive
    return os.path.normpath(os.path.join(rdrive, os.path.join(start, target)))
</snippet></ROW><ROW><id>1654855</id><snippet>arch -i386 python
</snippet></ROW><ROW><id>1654855</id><snippet>robin-mbp:~ $ arch -i386 /usr/bin/python2.6 -c "import sys; print sys.maxint"
2147483647
</snippet></ROW><ROW><id>1654863</id><snippet>import hashlib
import cPickle as pickle

_HASHLEN = 20

def safepickle(obj):
    s = pickle.dumps(obj)
    s += hashlib.sha1(s).digest()
    return s

def safeunpickle(pstr):
    data, checksum = pstr[:-_HASHLEN], pstr[-_HASHLEN:]
    if hashlib.sha1(data).digest() != checksum:
        raise ValueError("Pickle hash does not match!")
    return pickle.loads(data)


l = range(20)
p = safepickle(l)
new_l = safeunpickle(p)
print new_l == l
</snippet></ROW><ROW><id>1654863</id><snippet>safe_write_file</snippet></ROW><ROW><id>1654863</id><snippet>safe_read_file</snippet></ROW><ROW><id>1654936</id><snippet>tm</snippet></ROW><ROW><id>1654936</id><snippet>RCurl</snippet></ROW><ROW><id>1654936</id><snippet>XML</snippet></ROW><ROW><id>1654989</id><snippet>def __init__(self, arr=None):
    if arr is None:
        self.array = []
    else:
        self.array = arr
</snippet></ROW><ROW><id>1655213</id><snippet>sys.stderr = sys.stdout = logFile = open( tmpLogFileName, 'a' )
</snippet></ROW><ROW><id>1655213</id><snippet>sys.stderr = sys.stdout = logFile = open( tmpLogFileName, 'a', 0 )
</snippet></ROW><ROW><id>1655314</id><snippet>extern __declspec(dllexport) RTYPE</snippet></ROW><ROW><id>1655314</id><snippet>extern __declspec(dllimport) RTYPE</snippet></ROW><ROW><id>1655314</id><snippet>Include/pyport.h</snippet></ROW><ROW><id>1655571</id><snippet>locals()</snippet></ROW><ROW><id>1655571</id><snippet>globals()</snippet></ROW><ROW><id>1655571</id><snippet>def get_dynamic_settings(context_dict):
    context_dict['DEFAULT_FROM_EMAIL'] = '%s &lt;noreply@otakupride.com&gt;' % context_dict['SITE_NAME']
    context_dict['ROOT_URLCONF'] = 'mysite.urls.%s' % context_dict['SITE_SLUG']
    context_dict['TEMPLATE_DIRS'] += (os.path.join(PROJECT_ROOT, "templates", context_dict['SITE_SLUG']),)
</snippet></ROW><ROW><id>1655580</id><snippet>str(li)</snippet></ROW><ROW><id>1655580</id><snippet>&lt;?php

$li = implode('', range(1, 776));

function countFigure($li, $n)
{
    return substr_count($li, $n);
}

// counting figures

foreach (range(1, 9) as $substr)
    echo $substr, " ", countFigure($li, $substr), "\n";
</snippet></ROW><ROW><id>1655619</id><snippet>#!/usr/bin/env python
from scipy.stats import bernoulli,poisson,norm,expon
</snippet></ROW><ROW><id>1655619</id><snippet>print(norm.rvs(size=30))
print(bernoulli.rvs(.3,size=30))
print(poisson.rvs(1,2,size=30))
print(expon.rvs(5,size=30))
</snippet></ROW><ROW><id>1655764</id><snippet>^/api/0.6/([^/]+)/([^/]+)/?([^/]*)$
</snippet></ROW><ROW><id>1655764</id><snippet>&gt;&gt;&gt; regex = re.compile(r"^/api/0.6/([^/]+)/([^/]+)/?([^/]*)$")
&gt;&gt;&gt; regex.match("/api/0.6/changeset") is None
True
&gt;&gt;&gt; regex.match("/api/0.6/changeset/723").groups()
('changeset', '723', '')
&gt;&gt;&gt; regex.match("/api/0.6/changeset/723/close").groups()
('changeset', '723', 'close')
&gt;&gt;&gt; regex.match("/api/0.6/changeset/723/close/extragroup") is None
True
</snippet></ROW><ROW><id>1655961</id><snippet>sys.path</snippet></ROW><ROW><id>1655961</id><snippet>__init__.py</snippet></ROW><ROW><id>1655961</id><snippet>$PYTHONPATH</snippet></ROW><ROW><id>1655961</id><snippet>sys.path</snippet></ROW><ROW><id>1655961</id><snippet>__init__.py</snippet></ROW><ROW><id>1655961</id><snippet>find</snippet></ROW><ROW><id>1655961</id><snippet>find . -type d</snippet></ROW><ROW><id>1655961</id><snippet>tr '\n' :</snippet></ROW><ROW><id>1656101</id><snippet>results = []
res = { "next_page": "magic_token_to_get_first_page" }
while "next_page" in res:
    fp = urllib2.urlopen("http://search.twitter.com/search.json" + res["next_page"])
    res = simplejson.load(fp)
    fp.close()
    results.extend(res["results"])
</snippet></ROW><ROW><id>1656572</id><snippet>def save(self, *args, **kwargs):
    if self.version != self.read_current_version():
        raise ConcurrentModificationError('Ooops!!!!')
    super(MyModel, self).save(*args, **kwargs)
</snippet></ROW><ROW><id>1656972</id><snippet>Parent* p(new Parent);
p-&gt;initialize();
</snippet></ROW><ROW><id>1656972</id><snippet>boost::shared_ptr&lt;Parent&gt; p(new Parent);
p-&gt;initialize();
</snippet></ROW><ROW><id>1656972</id><snippet>Parent* parent = boost::python::extract&lt;Parent*&gt;(instance);
</snippet></ROW><ROW><id>1657092</id><snippet>from twisted.internet import reactor, protocol
from twisted.protocols.basic import LineReceiver

__author__="smota"
__date__ ="$30/10/2009 17:17:50$"

class SquitterClient(LineReceiver):
    def connectionMade(self):
        self.messageCount = 0
        # The factory provides a reference to itself, we'll use it to enumerate the clients
        self.factory.n += 1
        self.name = "Client %d" %self.factory.n

        # Send initial message, and more messages a bit later
        self.sendLine("Client %s starting!" % self.name);
        reactor.callLater(0.5, self.sendMessage, "Message %d" %self.messageCount)

    def connectionLost(self, reason):
        print "connection lost"

    def sendMessage(self, msg):
        for m in [ "a", "b", "c", "d", "e"]:
            self.sendLine("Copy %s of message %s from client %s!" % (m, msg, self.name))
        if self.factory.stop:
            self.sendLine("Client %s disconnecting!" % self.name)
            self.transport.loseConnection()
        else:
            self.messageCount += 1
            reactor.callLater(0.5, self.sendMessage, "Message %d" %self.messageCount)

class SquitterClientFactory(protocol.ClientFactory):
    protocol = SquitterClient

    def __init__(self):
        self.n = 0
        self.stop = False

    def stopTest():
        self.stop = True

    def clientConnectionFailed(self, connector, reason):
        print "Connection failed - goodbye!"

    def clientConnectionLost(self, connector, reason):
        print "Connection lost - goodbye!"

# this connects the protocol to a server running on port 8000
def main():
    # Create 10 clients

    f = SquitterClientFactory()
    for i in range(10):
        reactor.connectTCP("localhost", 8000, f)

    # Schedule end of test in 10 seconds
    reactor.callLater(10, f.stopTest)

    # And let loose the dogs of war
    reactor.run()

# this only runs if the module was *not* imported
if __name__ == '__main__':
    main()
</snippet></ROW><ROW><id>1657318</id><snippet>while True:
    line1 = f.readline()
    line2 = f.readline()
    if not line2: break  # EOF
    ...
</snippet></ROW><ROW><id>1657500</id><snippet>foo= u'\u65E5\u672C\u8A9E' # 日本語
url= 'http://www.example.jp/something?foo='+urllib.quote(foo.encode('cp932'))
</snippet></ROW><ROW><id>1657500</id><snippet>foo= '\u65E5\u672C\u8A9E'
url= 'http://www.example.jp/something?foo='+urllib.parse.quote(foo, encoding= 'cp932')
</snippet></ROW><ROW><id>1657512</id><snippet>2.*</snippet></ROW><ROW><id>1657512</id><snippet>sort</snippet></ROW><ROW><id>1657512</id><snippet>sorted</snippet></ROW><ROW><id>1657512</id><snippet>cmp=</snippet></ROW><ROW><id>1657512</id><snippet>key=</snippet></ROW><ROW><id>1657512</id><snippet>3.*</snippet></ROW><ROW><id>1657512</id><snippet>key=</snippet></ROW><ROW><id>1657512</id><snippet>min</snippet></ROW><ROW><id>1657512</id><snippet>max</snippet></ROW><ROW><id>1657512</id><snippet>itertools.groupby</snippet></ROW><ROW><id>1657512</id><snippet>cmp=</snippet></ROW><ROW><id>1657512</id><snippet>class Reverser(object):
  def __init__(self, s): self.s = s
  def __lt__(self, other): return other.s &lt; self.s
  def __eq__(self, other): return other.s == self.s
</snippet></ROW><ROW><id>1657512</id><snippet>__lt__</snippet></ROW><ROW><id>1657512</id><snippet>__eq__</snippet></ROW><ROW><id>1657512</id><snippet>&lt;</snippet></ROW><ROW><id>1657512</id><snippet>==</snippet></ROW><ROW><id>1657512</id><snippet>sort</snippet></ROW><ROW><id>1657512</id><snippet>def getkey(tup):
    a, b = tup[0].split('_')
    return Reverser(a), b

my_list.sort(key=getkey)
</snippet></ROW><ROW><id>1657512</id><snippet>sort</snippet></ROW><ROW><id>1657512</id><snippet>sorted</snippet></ROW><ROW><id>1657512</id><snippet># my_list as in the Q, my_cmp as per top A, getkey as here

def bycmp():
  return sorted(my_list*10, cmp=my_cmp)

def bykey():
  return sorted(my_list*10, key=getkey)

...

$ python -mtimeit -s'import so' 'so.bykey()'
1000 loops, best of 3: 548 usec per loop
$ python -mtimeit -s'import so' 'so.bycmp()'
1000 loops, best of 3: 995 usec per loop
</snippet></ROW><ROW><id>1657512</id><snippet>key=</snippet></ROW><ROW><id>1657847</id><snippet>new_content = pygments.highlight(code.contents[0], lexer, formatter)
</snippet></ROW><ROW><id>1657847</id><snippet>new_content = pygments.highlight(code.decodeContents(), lexer, formatter)
</snippet></ROW><ROW><id>1658336</id><snippet>exc_info()</snippet></ROW><ROW><id>1658336</id><snippet>exctype, value = sys.exc_info()[:2]
</snippet></ROW><ROW><id>1658336</id><snippet>exc_info()</snippet></ROW><ROW><id>1658336</id><snippet>try:
    ...
except Exception as e:  # or "Exception, e" in old Pythons
    ... do with with e ...
</snippet></ROW><ROW><id>1658336</id><snippet>sys</snippet></ROW><ROW><id>1658336</id><snippet>a = [1,2,3]
a.append(a)
</snippet></ROW><ROW><id>1658336</id><snippet>a = [1,2,3]
b = [4,5,a]
a.append(b)
</snippet></ROW><ROW><id>1658336</id><snippet>exc_info()</snippet></ROW><ROW><id>1658336</id><snippet>t = sys.exc_info()[2]</snippet></ROW><ROW><id>1658336</id><snippet>t</snippet></ROW><ROW><id>1658699</id><snippet>class mystr(str):
    def __init__(self, value):
        self.value = value
        self._decoded = None
    @property
    def decoded(self):
        if self._decoded == None:
            self._decoded = self.value.decode("hex")
            return self._decoded
    def __repr__(self):
        return self.decoded
    def __len__(self):
        return len(self.decoded)
    def __getitem__(self, i):
        return self.decoded.__getitem__(i)
    def __getslice__(self, i, j):
        return self.decoded.__getslice__(i, j)
</snippet></ROW><ROW><id>1658699</id><snippet>str</snippet></ROW><ROW><id>1658699</id><snippet>&gt;&gt;&gt; s = mystr('a0a1a2')
&gt;&gt;&gt; s
 ¡¢
&gt;&gt;&gt; len(s)
3
&gt;&gt;&gt; s.capitalize()
'A0a1a2'
</snippet></ROW><ROW><id>1658752</id><snippet>That kind of information is available via numpy.finfo() and numpy.iinfo():

In [12]: finfo('d').max
Out[12]: 1.7976931348623157e+308

In [13]: iinfo('i').max
Out[13]: 2147483647

In [14]: iinfo(uint8).max
Out[14]: 255
</snippet></ROW><ROW><id>1658762</id><snippet>def</snippet></ROW><ROW><id>1658762</id><snippet>import fit</snippet></ROW><ROW><id>1658762</id><snippet>fit.fitnesscompare</snippet></ROW><ROW><id>1658762</id><snippet>somelist.sort(cmp=fit.fitnesscompare)
</snippet></ROW><ROW><id>1658762</id><snippet>somelist.sort(key=fit.fitnessextract)
</snippet></ROW><ROW><id>1658762</id><snippet>def fitnessextract(x):
   return x.fitness
</snippet></ROW><ROW><id>1658762</id><snippet>import operator
somelist.sort(key=operator.attrgetter('fitness'))
</snippet></ROW><ROW><id>1658785</id><snippet>next(subl for subl in l if 'sq' in subl)
</snippet></ROW><ROW><id>1658785</id><snippet>StopIteration</snippet></ROW><ROW><id>1658785</id><snippet>next</snippet></ROW><ROW><id>1658785</id><snippet>[]</snippet></ROW><ROW><id>1658785</id><snippet>None</snippet></ROW><ROW><id>1658785</id><snippet>def gimmethesublist(thelist, anitem, adef=None):
    return next((subl for subl in thelist if anitem in subl), adef)
</snippet></ROW><ROW><id>1658785</id><snippet>its = set(['blah', 'bluh'])
next(subl for subl in l if its.intersection(subl))
</snippet></ROW><ROW><id>1658785</id><snippet>next(subl for subl in l if its.issubset(subl))
</snippet></ROW><ROW><id>1658955</id><snippet>{{=family_members}}
</snippet></ROW><ROW><id>1659035</id><snippet>class Meta:
     unique_together = ( ('name', 'active'),)
</snippet></ROW><ROW><id>1659049</id><snippet>W3_fill_func</snippet></ROW><ROW><id>1659049</id><snippet>return set(self.set_dim_1_based)</snippet></ROW><ROW><id>1659179</id><snippet>haiku_table</snippet></ROW><ROW><id>1659179</id><snippet>haiku_table = Table('haiku', metadata,
           schema.Column('title', types.Text(), primary_key=True),
           .... etc
           )
</snippet></ROW><ROW><id>1659179</id><snippet>Table</snippet></ROW><ROW><id>1659451</id><snippet>all</snippet></ROW><ROW><id>1659451</id><snippet>def search(self, **args):
  ret = []
  for playerID, player in self.iteritems():
    for key, value in args.iteritems():
      if getattr(player, key) != value: break
    else:
       ret.append(player.playerID)

  return ret
</snippet></ROW><ROW><id>1659451</id><snippet>iteritems</snippet></ROW><ROW><id>1659451</id><snippet>player.playerID</snippet></ROW><ROW><id>1659451</id><snippet>playerID</snippet></ROW><ROW><id>1659451</id><snippet>def search(self, **args):
  def vals(p):
    return dict((k, getattr(p, k, None)) for k in args)
  return [p.playerID for p in self.itervalues() if vals(p) == args]
</snippet></ROW><ROW><id>1659451</id><snippet>def search(self, **args):
  return [p.playerID for p in self.itervalues()
          if all(getattr(p, k, None)==args[k] for k in args)]
</snippet></ROW><ROW><id>1659926</id><snippet>&gt;&gt;&gt; s="(static string) name (different static string ) message (last static string)"
&gt;&gt;&gt; _,_,s=s.partition("(static string)")
&gt;&gt;&gt; name,_,s=s.partition("(different static string )")
&gt;&gt;&gt; message,_,s=s.partition("(last static string)")
&gt;&gt;&gt; name
' name '
&gt;&gt;&gt; message
' message '
</snippet></ROW><ROW><id>1660073</id><snippet>BaseHTTPServer</snippet></ROW><ROW><id>1660073</id><snippet>SimpleHTTPServer</snippet></ROW><ROW><id>1660073</id><snippet>BaseHTTPServer</snippet></ROW><ROW><id>1660073</id><snippet>BaseHTTPServer</snippet></ROW><ROW><id>1660081</id><snippet>#!/usr/bin/python
import os.path
path = '/dir1/dir2/dir3/file.exe'
name = os.path.basename(path)
print name
</snippet></ROW><ROW><id>1660263</id><snippet>range</snippet></ROW><ROW><id>1660263</id><snippet># use xrange
for i in xrange(0, count):
    # UNPACK FIXED LENGTH OF BINARY DATA HERE
    yield (field1, field2, field3)
</snippet></ROW><ROW><id>1660263</id><snippet># use writelines
f = open(filename, 'w')
f.writelines((datum + os.linesep) for datum in data)
f.close()
</snippet></ROW><ROW><id>1660263</id><snippet>    items = GetData(url)
    f = open(filename, 'w')
    for item in items:
        f.write(';'.join(item) + os.linesep)
    f.close()
</snippet></ROW><ROW><id>1660336</id><snippet>soup = BeautifulSoup(html)
myTitle = soup.html.head.title
</snippet></ROW><ROW><id>1660336</id><snippet>myTitle = soup('title')
</snippet></ROW><ROW><id>1660355</id><snippet>def outer(f):          # any name: function, class, any callable
    return f()         # class will be instantiated within the scope of the function
</snippet></ROW><ROW><id>1660738</id><snippet>p = models.UserDetails.gql('WHERE user_name = :uname', uname = user_name).fetch(1)
</snippet></ROW><ROW><id>1660978</id><snippet>CPs = CPs + urllib.urlopen(url).read()
</snippet></ROW><ROW><id>1661171</id><snippet>import sys

class test_something(object):
    def setUp(self):
        sys.argv[1] = 'arg'
        del sys.argv[2] # remember that -s is in sys.argv[2], see below
    def test_method(self):
        print sys.argv
</snippet></ROW><ROW><id>1661171</id><snippet>[~] nosetests test_something.py -s
['/usr/local/bin/nosetests', 'arg']
.
----------------------------------------------------------------------
Ran 1 test in 0.001s

OK
</snippet></ROW><ROW><id>1661171</id><snippet>argv</snippet></ROW><ROW><id>1661171</id><snippet>sys.argv</snippet></ROW><ROW><id>1661354</id><snippet>if not hasattr(fp, 'read')</snippet></ROW><ROW><id>1661354</id><snippet>fp.read()</snippet></ROW><ROW><id>1661891</id><snippet>imshow</snippet></ROW><ROW><id>1661891</id><snippet># Just some data to test:
from random import gauss
a = [[gauss(0, 10) for i in xrange(0, 5)] for j in xrange(0,5)]

from pylab import * # or just launch "IPython -pylab" from the command line

# We create a custom colormap:
myblue = cm.colors.LinearSegmentedColormap("myblue", {
    'red':   [(0, 1, 1), (1, 0, 0)], 
    'green': [(0, 1, 1), (1, 0, 0)],
    'blue':  [(0, 1, 1), (1, 1, 1)]})

# Plotting the graph:
imshow(a, cmap=myblue)
</snippet></ROW><ROW><id>1661891</id><snippet>help(colors.LinearSegmentedColormap)</snippet></ROW><ROW><id>1661891</id><snippet>help(imshow)</snippet></ROW><ROW><id>1661891</id><snippet>for i in xrange(0,5):
    for j in xrange(0,5):
        text(i, j,
             "{0:5.2f}".format(a[i][j]),
             horizontalalignment="center",
             verticalalignment="center")
</snippet></ROW><ROW><id>1662176</id><snippet> while True:
     do_something()
     if condition():
        break
</snippet></ROW><ROW><id>1662314</id><snippet>try:
    shutil.copy(src, dest)
except IOError, e:
    print "Unable to copy file. %s" % e
</snippet></ROW><ROW><id>1662411</id><snippet>mmap()</snippet></ROW><ROW><id>1662411</id><snippet>mmap()</snippet></ROW><ROW><id>1662411</id><snippet>mmap()</snippet></ROW><ROW><id>1662586</id><snippet>C:\Python26\lib\idlelib\idle.py</snippet></ROW><ROW><id>1662586</id><snippet>C:\Python26\</snippet></ROW><ROW><id>1662586</id><snippet>idle.pyw</snippet></ROW><ROW><id>1662586</id><snippet>idle.bat</snippet></ROW><ROW><id>1662631</id><snippet>def subclassfilter(x, baseclass):
    return x is not baseclass and isinstance(x, type) and issubclass(x, baseclass)

subclasses = [c for c in locals().values() if subclassfilter(c, ImageSpec)]
</snippet></ROW><ROW><id>1662631</id><snippet>__name__</snippet></ROW><ROW><id>1662631</id><snippet>subclasses</snippet></ROW><ROW><id>1662989</id><snippet>Printf.sprintf</snippet></ROW><ROW><id>1662989</id><snippet>let (%) = Printf.sprintf
let str3 = ("this: %s; that: %s; other: %s" % this_var) that_var other_var
</snippet></ROW><ROW><id>1663324</id><snippet>def mainpage(request):
    f=open('gui/pages/index.html','r').readlines()
    return HttpResponse(f)
</snippet></ROW><ROW><id>1663778</id><snippet>power.write("volt k")</snippet></ROW><ROW><id>1663778</id><snippet>power.write("volt " + str(k))
                 ^
          observe space here!
</snippet></ROW><ROW><id>1663778</id><snippet>power.write("volt %0.2f" % k)
</snippet></ROW><ROW><id>1663778</id><snippet>k</snippet></ROW><ROW><id>1663778</id><snippet>4.85866</snippet></ROW><ROW><id>1663778</id><snippet>%0.2f</snippet></ROW><ROW><id>1663778</id><snippet>volt 4.86</snippet></ROW><ROW><id>1663778</id><snippet>%0.4f</snippet></ROW><ROW><id>1663778</id><snippet>volt 4.8587</snippet></ROW><ROW><id>1663826</id><snippet>for f, b in zip(foo, bar):
    print(f, b)
</snippet></ROW><ROW><id>1663826</id><snippet>zip</snippet></ROW><ROW><id>1663826</id><snippet>zip</snippet></ROW><ROW><id>1663826</id><snippet>foo</snippet></ROW><ROW><id>1663826</id><snippet>bar</snippet></ROW><ROW><id>1663826</id><snippet>foo</snippet></ROW><ROW><id>1663826</id><snippet>bar</snippet></ROW><ROW><id>1663826</id><snippet>zip(foo,bar)</snippet></ROW><ROW><id>1663826</id><snippet>itertools.izip</snippet></ROW><ROW><id>1663826</id><snippet>itertools.izip_longest</snippet></ROW><ROW><id>1663826</id><snippet>import itertools
for f,b in itertools.izip(foo,bar):
    print(f,b)
for f,b in itertools.izip_longest(foo,bar):
    print(f,b)
</snippet></ROW><ROW><id>1663826</id><snippet>izip</snippet></ROW><ROW><id>1663826</id><snippet>foo</snippet></ROW><ROW><id>1663826</id><snippet>bar</snippet></ROW><ROW><id>1663826</id><snippet>izip_longest</snippet></ROW><ROW><id>1663826</id><snippet>foo</snippet></ROW><ROW><id>1663826</id><snippet>bar</snippet></ROW><ROW><id>1663826</id><snippet>izip_longest</snippet></ROW><ROW><id>1663826</id><snippet>None</snippet></ROW><ROW><id>1663826</id><snippet>fillvalue</snippet></ROW><ROW><id>1663826</id><snippet>None</snippet></ROW><ROW><id>1663955</id><snippet>help</snippet></ROW><ROW><id>1663955</id><snippet>inspect.getargspec</snippet></ROW><ROW><id>1663955</id><snippet>import functools
import inspect

realgas = inspect.getargspec

lookaside = dict()

def fakegas(f):
    if f in lookaside:
        return lookaside[f]
    return realgas(f)

inspect.getargspec = fakegas

def deco(fn):
    @functools.wraps(fn)
    def x(*args, **kwargs):
        return fn(*args, **kwargs)
    lookaside[x] = realgas(fn)
    return x

@deco
def x(a, b=23):
  """Some doc for x."""
  return a + b

help(x)
</snippet></ROW><ROW><id>1663955</id><snippet>Help on function x in module __main__:

x(a, b=23)
    Some doc for x.
(END)
</snippet></ROW><ROW><id>1664010</id><snippet>q = request.GET.get('q')
if q:
    print q
</snippet></ROW><ROW><id>1664156</id><snippet>String(byte[] bytes, Charset charset)</snippet></ROW><ROW><id>1664260</id><snippet>s = "Grüß Gott"
</snippet></ROW><ROW><id>1664260</id><snippet># coding: UTF-8
s = u"Grüß Gott"
</snippet></ROW><ROW><id>1664260</id><snippet># coding: UTF-8</snippet></ROW><ROW><id>1664307</id><snippet>y</snippet></ROW><ROW><id>1664307</id><snippet>&gt;&gt;&gt; def five():
...    print 'returning 5'
...    return 5
... 
&gt;&gt;&gt; 1 &lt; five() &lt;= 5
returning 5
True
</snippet></ROW><ROW><id>1664307</id><snippet>&gt;&gt;&gt; 1 &lt; five() and five() &lt;= 5
returning 5
returning 5
True
</snippet></ROW><ROW><id>1664681</id><snippet>from django.db.models import Q

datafilter = Q()
for i in xrange(1, now.day+1):
    datafilter = datafilter | Q(publish_date__day=i)
datafilter = datafilter &amp; Q(publish_date__month=now.month)
posts = TodaysObject.objects.filter(datafilter)
</snippet></ROW><ROW><id>1664681</id><snippet>def query_dicts(query_string, *query_args):
    from django.db import connection
    cursor = connection.cursor()
    cursor.execute(query_string, query_args)
    col_names = [desc[0] for desc in cursor.description]
    while True:
        row = cursor.fetchone()
        if row is None:
            break
        row_dict = dict(izip(col_names, row))
        yield row_dict
    return
posts = query_dicts('SELECT * FROM tablename WHERE DAY(publish_date)&lt;=%s AND MONTH(publish_date)=%s', now.day, now.month)
</snippet></ROW><ROW><id>1664681</id><snippet>posts = TodaysObject.objects.extra([where='DAY(publish_date)&lt;=%d AND MONTH(publish_date)=%d' % (now.day, now.month)])
</snippet></ROW><ROW><id>1664821</id><snippet>unix</snippet></ROW><ROW><id>1664821</id><snippet>C</snippet></ROW><ROW><id>1664821</id><snippet>signal</snippet></ROW><ROW><id>1664821</id><snippet>signal</snippet></ROW><ROW><id>1664821</id><snippet>siginterrupt</snippet></ROW><ROW><id>1664821</id><snippet>siginterrupt(1)</snippet></ROW><ROW><id>1664821</id><snippet>def sigquitHandler(signum, frame):
    print("SIGQUIT Handler")
    siginterrupt(SIGQUIT, False)
</snippet></ROW><ROW><id>1664821</id><snippet>siginterrupt(SIGQUIT, False)</snippet></ROW><ROW><id>1664857</id><snippet>.a</snippet></ROW><ROW><id>1664919</id><snippet>PyString_FromStringAndSize</snippet></ROW><ROW><id>1664958</id><snippet>seek</snippet></ROW><ROW><id>1664958</id><snippet>&gt;&gt;&gt; buff = StringIO.StringIO()
&gt;&gt;&gt; buff.write(open('map.png', 'rb').read())
&gt;&gt;&gt; 
&gt;&gt;&gt; #seek back to the beginning so the whole thing will be read by PIL
&gt;&gt;&gt; buff.seek(0)
&gt;&gt;&gt;
&gt;&gt;&gt; Image.open(buff)
&lt;PngImagePlugin.PngImageFile instance at 0x00BD7DC8&gt;
&gt;&gt;&gt; 
&gt;&gt;&gt; #that worked.. but if we try again:
&gt;&gt;&gt; Image.open(buff)
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
  File "c:\python25\lib\site-packages\pil-1.1.6-py2.5-win32.egg\Image.py", line 1916, in open
    raise IOError("cannot identify image file")
IOError: cannot identify image file
</snippet></ROW><ROW><id>1664958</id><snippet>buff.seek(0)</snippet></ROW><ROW><id>1665233</id><snippet>if len(thelist) != len(set(id(x) for x in thelist)): ...
</snippet></ROW><ROW><id>1665233</id><snippet>None</snippet></ROW><ROW><id>1665233</id><snippet>int</snippet></ROW><ROW><id>1665233</id><snippet>17</snippet></ROW><ROW><id>1665233</id><snippet>immutyps = int, long, float, tuple, frozenset, str, unicode
mutables = [x for x in thelist if not isinstance(x, immutyps)]
if len(mutables) != len(set(id(x) for x in mutables)):
  cryhavocandletloosethedogsofwar()
</snippet></ROW><ROW><id>1665694</id><snippet>In [5]: versions = [m.group(1) for m in [regex.match(lib) for lib in libs] if m] 
In [6]: versions
Out[6]: ['3.3.1', '3.2.0']
</snippet></ROW><ROW><id>1665916</id><snippet>foo = 1
bar = foo
baz = foo
</snippet></ROW><ROW><id>1665916</id><snippet>print(bar is foo) # prints True
print(baz is foo) # prints True
</snippet></ROW><ROW><id>1665916</id><snippet>locals()</snippet></ROW><ROW><id>1665916</id><snippet>foo</snippet></ROW><ROW><id>1665916</id><snippet>bar</snippet></ROW><ROW><id>1665916</id><snippet>baz</snippet></ROW><ROW><id>1666096</id><snippet>class Foo():
    pass

class Bar(Foo):
    pass

class Bar2():
    pass

print issubclass(Bar, Foo)  # True
print issubclass(Bar2, Foo) # False
</snippet></ROW><ROW><id>1666096</id><snippet>bar_instance = Bar()
print issubclass(bar_instance.__class__, Foo)
</snippet></ROW><ROW><id>1666709</id><snippet>&gt;&gt;&gt; "The big brown fox is brown".count("brown")
2
</snippet></ROW><ROW><id>1667019</id><snippet>import logging
logging.getLogger('boto').setLevel(logging.CRITICAL)
</snippet></ROW><ROW><id>1667019</id><snippet>/etc/boto.cfg</snippet></ROW><ROW><id>1667019</id><snippet>~/.boto</snippet></ROW><ROW><id>1667019</id><snippet>set_file_logger</snippet></ROW><ROW><id>1667151</id><snippet>winregistry</snippet></ROW><ROW><id>1667184</id><snippet>protocol=2</snippet></ROW><ROW><id>1667334</id><snippet>MSIECookieJar</snippet></ROW><ROW><id>1667334</id><snippet>MozillaCookieJar</snippet></ROW><ROW><id>1667393</id><snippet>request.get_all()</snippet></ROW><ROW><id>1667740</id><snippet>from Bio import SeqIO
handle = open("ls_orchid.fasta")
for seq_record in SeqIO.parse(handle, "fasta") :
    print seq_record.id
    print repr(seq_record.seq)
    print len(seq_record)
handle.close()
</snippet></ROW><ROW><id>1667740</id><snippet>f = open('sequence.fsa')

first_line = False
for line in f.xreadlines():
    if line[0] == "&gt;":
        first_line=True
        print line,
    else:
        if first_line:
             print line[17:],
        else:
             print line,
        first_line = False
</snippet></ROW><ROW><id>1668289</id><snippet>&gt;&gt;&gt; import math, psyco
&gt;&gt;&gt; a = 4**23
</snippet></ROW><ROW><id>1668289</id><snippet>def delete_module(modname, paranoid=None):
    from sys import modules
    try:
        thismod = modules[modname]
    except KeyError:
        raise ValueError(modname)
    these_symbols = dir(thismod)
    if paranoid:
        try:
            paranoid[:]  # sequence support
        except:
            raise ValueError('must supply a finite list for paranoid')
        else:
            these_symbols = paranoid[:]
    del modules[modname]
    for mod in modules.values():
        try:
            delattr(mod, modname)
        except AttributeError:
            pass
        if paranoid:
            for symbol in these_symbols:
                if symbol[:2] == '__':  # ignore special symbols
                    continue
                try:
                    delattr(mod, symbol)
                except AttributeError:
                    pass
</snippet></ROW><ROW><id>1668289</id><snippet>delete_module('psyco')
</snippet></ROW><ROW><id>1668289</id><snippet>delete_module('psyco', ['Psycho', 'KillerError'])
# only delete these symbols from every other module
# (for "from psyco import Psycho, KillerError" statements)
</snippet></ROW><ROW><id>1668612</id><snippet>python</snippet></ROW><ROW><id>1668612</id><snippet>/home/bartek/</snippet></ROW><ROW><id>1668612</id><snippet>f = open("file1.txt", "r")</snippet></ROW><ROW><id>1668612</id><snippet>f = open("some_other_file.txt", "r")</snippet></ROW><ROW><id>1668612</id><snippet>f = open("/home/media/a_real_file.txt", "r")</snippet></ROW><ROW><id>1668796</id><snippet>&gt;&gt;&gt; sum(len(set(x - i for i, x in enumerate(t))) for t in nums)
7
</snippet></ROW><ROW><id>1668796</id><snippet>set</snippet></ROW><ROW><id>1668796</id><snippet>itertools.groupby</snippet></ROW><ROW><id>1668796</id><snippet>set</snippet></ROW><ROW><id>1668796</id><snippet>len()</snippet></ROW><ROW><id>1668945</id><snippet>def import_something():
    # decide what to import
    # ...
    mod = __import__( something )
    return mod
my_module = import_something()
my_module.do_stuff()
</snippet></ROW><ROW><id>1668945</id><snippet>__init__.py</snippet></ROW><ROW><id>1668945</id><snippet>import os

# make a list of all .py files in the same dir that dont start with _
__all__ = installed = [ name for (name,ext) in ( os.path.splitext(fn) for fn in os.listdir(os.path.dirname(__file__))) if ext=='.py' and not name.startswith('_') ]
for name in installed:
    # import them all
    __import__( name, globals(), locals())
</snippet></ROW><ROW><id>1668945</id><snippet>import crunchers
crunchers.installed # all names
crunchers.cruncherA # actual module object, but you can't use it since you don't know the name when you write the code
# turns out the be pretty much the same as the first solution :p
mycruncher = getattr(crunchers, crunchers.installed[0])
</snippet></ROW><ROW><id>1669524</id><snippet>foo</snippet></ROW><ROW><id>1669524</id><snippet>class_foo</snippet></ROW><ROW><id>1669524</id><snippet>static_foo</snippet></ROW><ROW><id>1669524</id><snippet>class A(object):
    def foo(self,x):
        print "executing foo(%s,%s)"%(self,x)

    @classmethod
    def class_foo(cls,x):
        print "executing class_foo(%s,%s)"%(cls,x)

    @staticmethod
    def static_foo(x):
        print "executing static_foo(%s)"%x    

a=A()
</snippet></ROW><ROW><id>1669524</id><snippet>a</snippet></ROW><ROW><id>1669524</id><snippet>a.foo(1)
# executing foo(&lt;__main__.A object at 0xb7dbef0c&gt;,1)
</snippet></ROW><ROW><id>1669524</id><snippet>self</snippet></ROW><ROW><id>1669524</id><snippet>a.class_foo(1)
# executing class_foo(&lt;class '__main__.A'&gt;,1)
</snippet></ROW><ROW><id>1669524</id><snippet>class_foo</snippet></ROW><ROW><id>1669524</id><snippet>A.foo(1)</snippet></ROW><ROW><id>1669524</id><snippet>A.class_foo(1)</snippet></ROW><ROW><id>1669524</id><snippet>A.class_foo(1)
# executing class_foo(&lt;class '__main__.A'&gt;,1)
</snippet></ROW><ROW><id>1669524</id><snippet>self</snippet></ROW><ROW><id>1669524</id><snippet>cls</snippet></ROW><ROW><id>1669524</id><snippet>a.static_foo(1)
# executing static_foo(1)

A.static_foo('hi')
# executing static_foo(hi)
</snippet></ROW><ROW><id>1669524</id><snippet>foo</snippet></ROW><ROW><id>1669524</id><snippet>a.foo</snippet></ROW><ROW><id>1669524</id><snippet>a</snippet></ROW><ROW><id>1669524</id><snippet>foo</snippet></ROW><ROW><id>1669524</id><snippet>a.foo</snippet></ROW><ROW><id>1669524</id><snippet>a</snippet></ROW><ROW><id>1669524</id><snippet>foo</snippet></ROW><ROW><id>1669524</id><snippet>print(a.foo)
# &lt;bound method A.foo of &lt;__main__.A object at 0xb7d52f0c&gt;&gt;
</snippet></ROW><ROW><id>1669524</id><snippet>a.class_foo</snippet></ROW><ROW><id>1669524</id><snippet>a</snippet></ROW><ROW><id>1669524</id><snippet>foo</snippet></ROW><ROW><id>1669524</id><snippet>A</snippet></ROW><ROW><id>1669524</id><snippet>foo</snippet></ROW><ROW><id>1669524</id><snippet>print(a.class_foo)
# &lt;bound method type.class_foo of &lt;class '__main__.A'&gt;&gt;
</snippet></ROW><ROW><id>1669524</id><snippet>a.static_foo</snippet></ROW><ROW><id>1669524</id><snippet>static_foo</snippet></ROW><ROW><id>1669524</id><snippet>a.static_foo</snippet></ROW><ROW><id>1669524</id><snippet>print(a.static_foo)
# &lt;function static_foo at 0xb7d479cc&gt;
</snippet></ROW><ROW><id>1670286</id><snippet>rprim=infile.readlines()
</snippet></ROW><ROW><id>1670286</id><snippet>rprim[0], rprim[1], rprim[2], rprim[3], rprim[4], rprim[5], rprim[6]
</snippet></ROW><ROW><id>1670286</id><snippet>len(rprim)
</snippet></ROW><ROW><id>1670595</id><snippet>show</snippet></ROW><ROW><id>1670595</id><snippet>matplotlib.pyplot.show()
</snippet></ROW><ROW><id>1670595</id><snippet>import matplotlib.pyplot as plt
</snippet></ROW><ROW><id>1671425</id><snippet>from .. import misc
from ..misc import tools as _

print misc.tools.__file__
</snippet></ROW><ROW><id>1671425</id><snippet>misc.tools</snippet></ROW><ROW><id>1671425</id><snippet>print</snippet></ROW><ROW><id>1671425</id><snippet>_</snippet></ROW><ROW><id>1671425</id><snippet>del _</snippet></ROW><ROW><id>1671425</id><snippet>misc.tools</snippet></ROW><ROW><id>1671425</id><snippet>misc</snippet></ROW><ROW><id>1671425</id><snippet>__init__.py</snippet></ROW><ROW><id>1671425</id><snippet>tools.py</snippet></ROW><ROW><id>1671425</id><snippet>misc</snippet></ROW><ROW><id>1671425</id><snippet>misc.tools</snippet></ROW><ROW><id>1671447</id><snippet>import feedparser
d = feedparser.parse('http://news.google.com/news?pz=1&amp;cf=all&amp;ned=ca&amp;hl=en&amp;topic=w&amp;output=rss')

print [field for field in d]
</snippet></ROW><ROW><id>1671447</id><snippet>entries</snippet></ROW><ROW><id>1671447</id><snippet>import pprint
pprint.pprint(entry for entry in d['entries'])
</snippet></ROW><ROW><id>1671447</id><snippet>titles = [entry.title for entry in d['entries']
</snippet></ROW><ROW><id>1672094</id><snippet>def decorate_method(f):
  def wrapper(self, name, value, attrs):
    self.attrs = attrs
    return f(self, name, value, attrs)
  return wrapper

def decorate_class(c):
  for n in dir(c):
    f = getattr(c, n)
    if hasattr(f, 'im_func'):
      setattr(c, n, decorate_method(f.im_func))
</snippet></ROW><ROW><id>1672094</id><snippet>decorate_class(whatever)</snippet></ROW><ROW><id>1672094</id><snippet>whatever</snippet></ROW><ROW><id>1672411</id><snippet>#!/usr/bin/env python
import csv
csvobj=csv.reader(open('file.txt','r'))
for datum in csvobj:
    datum=[float(val) for val in datum[1:]] 
    print(datum)
    maximum=max(datum)
    minimum=min(datum)
    print(maximum/minimum)

# [151.0, 263.0, 88.0, 484.0, 118.0, 270.0, 458.0, 872.0, 62.0, 194.0]
# 14.064516129
# [72.0, 21.0, 20.0, 61.0, 20.0, 85.0, 20.0, 25.0, 20.0, 65.0]
# 4.25
# [281.0, 250.0, 358.0, 118.0, 197.0, 71.0, 168.0, 296.0, 198.0, 113.0]
# 5.04225352113
</snippet></ROW><ROW><id>1672521</id><snippet>post_multipart()</snippet></ROW><ROW><id>1672898</id><snippet>self.__sub__</snippet></ROW><ROW><id>1672898</id><snippet>&gt;&gt;&gt; foo = MyInt(8)
&gt;&gt;&gt; print foo.difference(7)
1
</snippet></ROW><ROW><id>1672898</id><snippet>class MyInt(int):
    def difference(self, i):
        return self - i
</snippet></ROW><ROW><id>1672898</id><snippet>class MyInt(int):
    difference = int.__sub__
</snippet></ROW><ROW><id>1672898</id><snippet>class MyInt(int):
    difference=lambda self, i: self - i
</snippet></ROW><ROW><id>1672898</id><snippet>class MyInt(int):
    difference=lambda self: self.__sub__
</snippet></ROW><ROW><id>1672898</id><snippet>&gt;&gt;&gt; foo = MyInt(8)
&gt;&gt;&gt; print foo.difference()(7)
1
</snippet></ROW><ROW><id>1672898</id><snippet>class MyInt(int):
    difference=property(lambda self: self.__sub__)
</snippet></ROW><ROW><id>1672898</id><snippet>&gt;&gt;&gt; foo = 8
&gt;&gt;&gt; print foo - 7
1
</snippet></ROW><ROW><id>1672942</id><snippet>import MySQLdb

db = MySQLdb.connect(host=your_host, db=your_db,
                     user=your_user, passwd=your_password)

cur = db.cursor()
cur.execute("""SELECT * FROM account WHERE email = %s AND pass = %s """,
            (self.mail, self.pw))
result = cur.fetchall()
print "exists:", result
</snippet></ROW><ROW><id>1672981</id><snippet>import gzip, os, urllib.parse

archive_relpath = os.sep.join(map(str, Newest_Date[:4])) + ' village.gz'  
archive_path = os.path.join(Root, 'data', archive_relpath)

with gzip.open(archive_path) as Village:
    Village_Parsed = ''.join(urllib.parse.unquote_plus(line.decode('ascii'))
                             for line in Village)
    print(Village_Parsed)
</snippet></ROW><ROW><id>1672981</id><snippet>'ascii'</snippet></ROW><ROW><id>1672981</id><snippet>line.decode('ascii')</snippet></ROW><ROW><id>1673012</id><snippet># combine the lists
zipped = zip(alist, blist)

# write to a file (in append mode)
file = open("filename", 'a') 
for item in zipped:
    file.write("%d, %d\n" % item) 
file.close()
</snippet></ROW><ROW><id>1673012</id><snippet> 1,2
 2,3
 3,4
 5,5
</snippet></ROW><ROW><id>1673087</id><snippet>repr()</snippet></ROW><ROW><id>1673087</id><snippet>repr(num)</snippet></ROW><ROW><id>1673087</id><snippet>num.__repr__()</snippet></ROW><ROW><id>1673087</id><snippet>repr</snippet></ROW><ROW><id>1673087</id><snippet>__repr__</snippet></ROW><ROW><id>1673087</id><snippet>dis</snippet></ROW><ROW><id>1673087</id><snippet>def f1(a):
    return repr(a)

def f2(a):
    return a.__repr__()

def f3(a):
    return `a`
</snippet></ROW><ROW><id>1673087</id><snippet>&gt;&gt;&gt; import dis
&gt;&gt;&gt; dis.dis(f1)
  3           0 LOAD_GLOBAL              0 (repr)
              3 LOAD_FAST                0 (a)
              6 CALL_FUNCTION            1
              9 RETURN_VALUE
&gt;&gt;&gt; dis.dis(f2)
  6           0 LOAD_FAST                0 (a)
              3 LOAD_ATTR                0 (__repr__)
              6 CALL_FUNCTION            0
              9 RETURN_VALUE        
&gt;&gt;&gt; dis.dis(f3)
  9           0 LOAD_FAST                0 (a)
              3 UNARY_CONVERT       
              4 RETURN_VALUE
</snippet></ROW><ROW><id>1673087</id><snippet>f1</snippet></ROW><ROW><id>1673087</id><snippet>repr</snippet></ROW><ROW><id>1673087</id><snippet>f2</snippet></ROW><ROW><id>1673087</id><snippet>__repr__</snippet></ROW><ROW><id>1673087</id><snippet>repr()</snippet></ROW><ROW><id>1673087</id><snippet>repr()</snippet></ROW><ROW><id>1673093</id><snippet>&lt;span style="position:absolute; writing-mode:lr-tb; left:[0-9]+px; top:([0-9]+)px; font-size:[0-9]+px;"&gt;([^&lt;]*)&lt;/span&gt;
</snippet></ROW><ROW><id>1673464</id><snippet>str(gs.GetSessionIdleTime())</snippet></ROW><ROW><id>1673765</id><snippet>with open("example.txt") as f:
    for line in f:
        key, value = line.strip().split("=")
        do_something(key,value)
</snippet></ROW><ROW><id>1673765</id><snippet>csv</snippet></ROW><ROW><id>1673765</id><snippet>=</snippet></ROW><ROW><id>1673765</id><snippet>with open("example.txt") as f:
    d = dict([line.strip().split("=") for line in f])
</snippet></ROW><ROW><id>1673804</id><snippet>[^\W\d]</snippet></ROW><ROW><id>1673882</id><snippet>class WeakCallback (object):
    """A Weak Callback object that will keep a reference to
    the connecting object with weakref semantics.

    This allows object A to pass a callback method to object S,
    without object S keeping A alive.
    """
    def __init__(self, mcallback):
        """Create a new Weak Callback calling the method @mcallback"""
        obj = mcallback.im_self
        attr = mcallback.im_func.__name__
        self.wref = weakref.ref(obj, self.object_deleted)
        self.callback_attr = attr
        self.token = None

    def __call__(self, *args, **kwargs):
        obj = self.wref()
        if obj:
            attr = getattr(obj, self.callback_attr)
            attr(*args, **kwargs)
        else:
            self.default_callback(*args, **kwargs)

    def default_callback(self, *args, **kwargs):
        """Called instead of callback when expired"""
        pass

    def object_deleted(self, wref):
        """Called when callback expires"""
        pass
</snippet></ROW><ROW><id>1673882</id><snippet># illustration how I typically use it
weak_call = WeakCallback(self._something_changed)
long_lived_object.connect("on_change", weak_call)
</snippet></ROW><ROW><id>1673882</id><snippet>WeakCallback.token</snippet></ROW><ROW><id>1673985</id><snippet>os.popen('ps aux')</snippet></ROW><ROW><id>1674376</id><snippet>class Main(object):
    def do_stuff(self):
        ...
    def save_work(self):
        ...
    def __init__(self):
        try:
            self.do_stuff()
        except KeyboardInterrupt:
            pass # Or print helpful info
        self.save_work()
</snippet></ROW><ROW><id>1674644</id><snippet>&gt;&gt;&gt; long_list = [ [2, 3, 6], [3, 7, 9] ]
&gt;&gt;&gt; import itertools
&gt;&gt;&gt; for i in itertools.izip_longest(*long_list):      # called zip_longest in py3k
    print(i)


(2, 3)
(3, 7)
(6, 9)
</snippet></ROW><ROW><id>1674644</id><snippet>zip</snippet></ROW><ROW><id>1674749</id><snippet>i</snippet></ROW><ROW><id>1675012</id><snippet>FeedParser</snippet></ROW><ROW><id>1675012</id><snippet>email.feedparser</snippet></ROW><ROW><id>1675012</id><snippet>email.Message</snippet></ROW><ROW><id>1675012</id><snippet>poplib</snippet></ROW><ROW><id>1675012</id><snippet>import poplib
import email

pop = poplib.POP3( "server..." )
[establish connection, authenticate, ...]
raw = pop.retr( 1 )
pop.close()

parser = email.parser.FeedParser()
for line in raw[1]:
    parser.feed( str( line+b'\n', 'us-ascii' ) )
message = parser.close()
</snippet></ROW><ROW><id>1675051</id><snippet>python -h</snippet></ROW><ROW><id>1675051</id><snippet>python -h |less</snippet></ROW><ROW><id>1675228</id><snippet>self</snippet></ROW><ROW><id>1675337</id><snippet>import itertools
output_list = list(set(itertools.chain(first_list, second_list)))
</snippet></ROW><ROW><id>1675337</id><snippet>output_set = set(itertools.chain(first_list, second_list))
for item in output_set:
    # do something
</snippet></ROW><ROW><id>1675337</id><snippet>set()</snippet></ROW><ROW><id>1675742</id><snippet>import smtplib
server = smtplib.SMTP('localhost:2525')
server.sendmail(fromaddr, toaddrs, msg)
server.quit()
</snippet></ROW><ROW><id>1676000</id><snippet>from textwrap import wrap

def getAbstract(text, lines=5, screenwidth=100):
    width = len(' '.join([
               line for block in text.splitlines()
               for line in wrap(block, width=screenwidth)
            ][:lines]))
    return text[:width] + '...'
</snippet></ROW><ROW><id>1676000</id><snippet>print getAbstract(text, lines=7)
</snippet></ROW><ROW><id>1676000</id><snippet>import textwrap

abstract = textwrap.wrap(text, 100)[0]
</snippet></ROW><ROW><id>1676069</id><snippet>Package-1/namespace/__init__.py
Package-1/namespace/module1/__init__.py
Package-2/namespace/__init__.py
Package-2/namespace/module2/__init__.py
</snippet></ROW><ROW><id>1676069</id><snippet>Package-2/namespace/__init__.py</snippet></ROW><ROW><id>1676069</id><snippet>from pkgutil import extend_path
__path__ = extend_path(__path__, __name__)
</snippet></ROW></DATA>