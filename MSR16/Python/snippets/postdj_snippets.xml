<?xml version="1.0" encoding="UTF-8" standalone="no"?><DATA><ROW><id>18830180</id><snippet>num</snippet></ROW><ROW><id>18830180</id><snippet>list()</snippet></ROW><ROW><id>18830180</id><snippet>num</snippet></ROW><ROW><id>18830180</id><snippet>map()</snippet></ROW><ROW><id>18830180</id><snippet>l = map(int, string)
</snippet></ROW><ROW><id>18830357</id><snippet>models.py</snippet></ROW><ROW><id>18830357</id><snippet>getattr</snippet></ROW><ROW><id>18830357</id><snippet>kwargs</snippet></ROW><ROW><id>18830357</id><snippet>from myapp import models

def reference_context(model, value):
    menu = main_menu()
    info = company_info()
    pages = get_list_or_404(getattr(models, model), **{category: value})
</snippet></ROW><ROW><id>18830507</id><snippet>&gt;&gt;&gt; strs = " 'AMS_Investigation|txtt.co_BigtittedBlondOtherNight_1371078139195_+14155186442', {'cf:rv': '0'}"
&gt;&gt;&gt; first, sep, rest = strs.partition(',')
&gt;&gt;&gt; lis = first.rsplit('_', 2)
&gt;&gt;&gt; lis[1] = "1111111"
&gt;&gt;&gt; "_".join(lis) + sep + rest
" 'AMS_Investigation|txtt.co_BigtittedBlondOtherNight_1111111_+14155186442', {'cf:rv': '0'}"
</snippet></ROW><ROW><id>18830507</id><snippet>def solve(strs, rep):                                                                                                   first, sep, rest = strs.partition(',')
    lis = first.rsplit('_', 2)
    lis[1] = rep
    return "_".join(lis) + sep + rest
... 
&gt;&gt;&gt; solve(" 'AMS_Investigation|txtt.co_BigtittedBlondOtherNight_1371078139195_+14155186442', {'cf:rv': '0'}", "1111")
" 'AMS_Investigation|txtt.co_BigtittedBlondOtherNight_1111_+14155186442', {'cf:rv': '0'}"
&gt;&gt;&gt; solve("'AMS_Investigation|txtt.co_23456_BigtittedBlondOtherNight_1371078139195_14155186442', {'cf:rv': '0'}", "2222")
"'AMS_Investigation|txtt.co_23456_BigtittedBlondOtherNight_2222_14155186442', {'cf:rv': '0'}"
&gt;&gt;&gt; solve("'AMS_Investigation|txtt.co_1371078139195_BigtittedBlondOtherNight_1371078139195_1371078139195', {'cf:rv': '0'}", "2222")
"'AMS_Investigation|txtt.co_1371078139195_BigtittedBlondOtherNight_2222_1371078139195', {'cf:rv': '0'}"
</snippet></ROW><ROW><id>18830554</id><snippet>import os
xmlFiles = []
for directoryPath in os.walk(filePath):
    fileName = directoryPath[2]
    if fileName[:3] = 'xml':# or fileName.endswith('xml'):
        xmlFiles.append(fileName)
</snippet></ROW><ROW><id>18830576</id><snippet>course_codes.get(s.course)</snippet></ROW><ROW><id>18830576</id><snippet>&gt;&gt;&gt; import jinja2
&gt;&gt;&gt; env = jinja2.Environment()
&gt;&gt;&gt; t = env.from_string('{{ codes.get(mycode) }}')
&gt;&gt;&gt; t.generate(codes={'a': '123'}, mycode='a').next()
u'123'
</snippet></ROW><ROW><id>18830760</id><snippet>&gt;&gt;&gt; res, c = [], 1
&gt;&gt;&gt; for x in num_words:
...     c += x
...     res.append(c)
&gt;&gt;&gt; res
[3, 5, 8, 12, 13, 17, 18]
</snippet></ROW><ROW><id>18830760</id><snippet>&gt;&gt;&gt; reduce(lambda x, y: x + [x[-1] + y], num_words, [1])[1:]
[3, 5, 8, 12, 13, 17, 18]
</snippet></ROW><ROW><id>18831140</id><snippet>import re
def multisplit(s, delims):
    delims = '|'.join(re.escape(x) for x in delims)
    return re.split(delims, s)

print multisplit('a.b-c!d', '.-!') # ['a', 'b', 'c', 'd']
</snippet></ROW><ROW><id>18831140</id><snippet>str.split</snippet></ROW><ROW><id>18831140</id><snippet>endswith</snippet></ROW><ROW><id>18831195</id><snippet>__int__</snippet></ROW><ROW><id>18831195</id><snippet>int()</snippet></ROW><ROW><id>18831195</id><snippet>Time()</snippet></ROW><ROW><id>18831195</id><snippet>class Time(object):
    @classmethod
    def from_seconds(cls, seconds):
         _hours, _minutes, _seconds = ...
         return cls(_hours, _minutes, _seconds)
</snippet></ROW><ROW><id>18831272</id><snippet>a.get('key')</snippet></ROW><ROW><id>18831272</id><snippet>def dget(d, keys, default=None):
    for key in keys:
        try: return d[key]
        except KeyError: pass
    return default

...

a = {'key':'value'}
if dget(a, ['key', '@key']) == 'value':
    #do something
</snippet></ROW><ROW><id>18831272</id><snippet>def dget(d, key, default=None):
    return d.get(key,d.get('@' + key, default))

...

a = {'key':'value'}
if dget(a, 'key') == 'value':
    #do something
</snippet></ROW><ROW><id>18831272</id><snippet>get</snippet></ROW><ROW><id>18831272</id><snippet>a = mydict()
a['key'] = 'value'
if a.get(['key', '@key']) == 'value':
   #do something
</snippet></ROW><ROW><id>18831312</id><snippet>def locateByName(e,name):
    if e.get('name',None) == name:
        return e

    for child in e.get('children',[]):
        result = locateByName(child,name)
        if result is not None:
            return result

    return None
</snippet></ROW><ROW><id>18831312</id><snippet>node = locateByName(output_json, 'BoxDet')
print node['name'],node['Ids']
</snippet></ROW><ROW><id>18831754</id><snippet>pip</snippet></ROW><ROW><id>18831754</id><snippet>pip install beautifulsoup4
</snippet></ROW><ROW><id>18832008</id><snippet>def setter(self, id):
  self.id = int(id)
</snippet></ROW><ROW><id>18832008</id><snippet>1</snippet></ROW><ROW><id>18832008</id><snippet>"1"</snippet></ROW><ROW><id>18832008</id><snippet>"boy"</snippet></ROW><ROW><id>18832066</id><snippet>result = "('%s')" % "','".join(mylist)
</snippet></ROW><ROW><id>18832105</id><snippet>while</snippet></ROW><ROW><id>18832105</id><snippet>i</snippet></ROW><ROW><id>18832105</id><snippet>j</snippet></ROW><ROW><id>18832105</id><snippet>j += 1</snippet></ROW><ROW><id>18832105</id><snippet>i += 1</snippet></ROW><ROW><id>18832105</id><snippet>while j &lt; len(word):</snippet></ROW><ROW><id>18832105</id><snippet>Timelimit Exceeded Error</snippet></ROW><ROW><id>18832199</id><snippet>screen.blit( font.render(text, True, (0,0,0)), (0, y))
</snippet></ROW><ROW><id>18832277</id><snippet>input_file = 'in_file.csv'
output_file = 'out_file.csv'

with open(input_file, 'rb') as in_csv, open(output_file , 'wb') as out_csv:
    # do your code
</snippet></ROW><ROW><id>18832618</id><snippet>&lt;span id="midArticle_1"&gt;&lt;/span&gt;&lt;p&gt;Here is the First Paragraph.&lt;/p&gt;&lt;span id="midArticle_2"&gt;&lt;/span&gt;&lt;p&gt;Here is the second Paragraph.&lt;/p&gt;&lt;span id="midArticle_3"&gt;&lt;/span&gt;&lt;p&gt;Paragraph Three."&lt;/p&gt;

print html.parse(url).xpath('//p/text()')
</snippet></ROW><ROW><id>18832627</id><snippet>p = subprocess.Popen(command, shell=True, bufsize=0, stdout=subprocess.PIPE, stderr=subprocess.STDOUT, universal_newlines=True)
</snippet></ROW><ROW><id>18832883</id><snippet>/bin/cat'</snippet></ROW><ROW><id>18832883</id><snippet>-u</snippet></ROW><ROW><id>18832883</id><snippet>cmd.stdout.read()
for i in cmd.stdout:
list(cmd.stdout.readline())
</snippet></ROW><ROW><id>18832883</id><snippet>while not_dead_yet:
    line = cmd.stdout.readline()

for line in iter(cmd.stdout.readline, b''):
    pass
</snippet></ROW><ROW><id>18832883</id><snippet>poll()</snippet></ROW><ROW><id>18832883</id><snippet>commands</snippet></ROW><ROW><id>18832883</id><snippet>poll()</snippet></ROW><ROW><id>18832883</id><snippet>commands</snippet></ROW><ROW><id>18832883</id><snippet>#! /usr/bin/python

import subprocess
import select

# Critical: all of this must fit inside ONE pipe() buffer
commands = ['echo Start\n', 'date\n', 'sleep 10\n', 'date\n', 'exit\n']

cmd = subprocess.Popen(['/bin/tcsh'], stdin=subprocess.PIPE, stdout=subprocess.PIPE)

# The list "commands" holds a list of shell commands
for command in commands:
  cmd.stdin.write(command)

  # Must include this to ensure data is passed to child process
  cmd.stdin.flush()

for line in iter(cmd.stdout.readline, b''):
    print line                
</snippet></ROW><ROW><id>18833385</id><snippet>import matplotlib.pyplot as plt
from scipy import *
from scipy import integrate
from scipy.integrate import ode
import numpy as np

fig = plt.figure(num=1)
ax=fig.add_subplot(111)

## Vector field function
def vf(t,x):
  dx=np.zeros(2)
  dx[0]=1
  dx[1]=x[0]**2-x[0]-2
  return dx

#Solution curves
t0=0; tEnd=10; dt=0.01;
r = ode(vf).set_integrator('vode', method='bdf',max_step=dt)
ic=[[-3.5,-10], [-3,-10], [-2.5,-10]]
color=['r','b','g']
for k in range(len(ic)):
    Y=[];T=[];S=[];
    r.set_initial_value(ic[k], t0).set_f_params()
    while r.successful() and r.t +dt &lt; tEnd:
        r.integrate(r.t+dt)
        Y.append(r.y)

    S=np.array(np.real(Y))
    ax.plot(S[:,0],S[:,1], color = color[k], lw = 1.25)

#Vector field
X,Y = np.meshgrid( np.linspace(-5,5,20),np.linspace(-10,10,20) )
U = 1
V = X**2-X-2
#Normalize arrows
N = np.sqrt(U**2+V**2)  
U2, V2 = U/N, V/N
ax.quiver( X,Y,U2, V2)


plt.xlim([-5,5])
plt.ylim([-10,10])
plt.xlabel(r"$x$")
plt.ylabel(r"$y$")
plt.show()
</snippet></ROW><ROW><id>18833804</id><snippet>&gt;&gt;&gt; type(18446744000000000000)
long
</snippet></ROW><ROW><id>18833804</id><snippet>&gt;&gt;&gt; long(1.8446744*10**19)
18446744000000000000L
</snippet></ROW><ROW><id>18833870</id><snippet>break</snippet></ROW><ROW><id>18833870</id><snippet>a=2
num=13
while num &gt; a :
  if num%a==0 &amp; a!=num:
    print('not prime')
    break
  i += 1
else: # loop not exited via break
  print('prime')
</snippet></ROW><ROW><id>18833870</id><snippet>for a in range(a, num):
    if a % num == 0:
        print('not prime')
        break
else: # loop not exited via break
    print('prime')
</snippet></ROW><ROW><id>18833870</id><snippet>break</snippet></ROW><ROW><id>18833870</id><snippet>def is_prime(n):
    for i in range(3, n):
        if n % i == 0:
            return False
    return True
</snippet></ROW><ROW><id>18833870</id><snippet>n</snippet></ROW><ROW><id>18833870</id><snippet>import math
def is_prime(n):
    if n % 2 == 0 and n &gt; 2: 
        return False
    for i in range(3, int(math.sqrt(n)) + 1, 2):
        if n % i == 0:
            return False
    return True
</snippet></ROW><ROW><id>18833870</id><snippet>0</snippet></ROW><ROW><id>18833870</id><snippet>1</snippet></ROW><ROW><id>18833870</id><snippet>all</snippet></ROW><ROW><id>18833870</id><snippet>import math
def is_prime(n):
    if n % 2 == 0 and n &gt; 2: 
        return False
    return all(n % i for i in range(3, int(math.sqrt(n)) + 1), 2)
</snippet></ROW><ROW><id>18833893</id><snippet>2*25**14</snippet></ROW><ROW><id>18833893</id><snippet>&gt;&gt;&gt; type(np.max(-numpy.absolute(numpy.power(init_x-0,13)))/(2*25**13))
&lt;type 'numpy.float64'&gt;
&gt;&gt;&gt; type(np.max(-numpy.absolute(numpy.power(init_x-0,14)))/(2*25**14))
&lt;type 'float'&gt;
</snippet></ROW><ROW><id>18833893</id><snippet>exp</snippet></ROW><ROW><id>18833893</id><snippet>numpy</snippet></ROW><ROW><id>18833893</id><snippet>2*25**N</snippet></ROW><ROW><id>18833893</id><snippet>def supergaussian(x, A, mu, sigma, offset, N=8):
    """Supergaussian function, amplitude A, centroid mu, st dev sigma, exponent N, with constant offset"""
    denom = np.float64(2*sigma**N)
    return A * (1/(2**(1+1/N)*sigma*2*scipy.special.gamma(1+1/N))) * numpy.exp(-numpy.absolute(numpy.power(x-mu,N))/denom) + offset
</snippet></ROW><ROW><id>18833893</id><snippet>2*25**14</snippet></ROW><ROW><id>18834064</id><snippet>&gt;&gt;&gt; st = '"Title" "Title  of  an  article,  chapter,  etc." ("The Divine Comedy" "Rules of Construction") true null null false'
&gt;&gt;&gt; def nest_split(st):
    return [nest_split(e[1:-1]) if e.startswith('(') else e.strip('"') for e in re.findall("\(.*?\)|\".*?\"|\w+", st)]

&gt;&gt;&gt; nest_split(st)
['Title', 'Title  of  an  article,  chapter,  etc.', ['The Divine Comedy', 'Rules of Construction'], 'true', 'null', 'null', 'false']
</snippet></ROW><ROW><id>18834064</id><snippet>true</snippet></ROW><ROW><id>18834064</id><snippet>false</snippet></ROW><ROW><id>18834064</id><snippet>null</snippet></ROW><ROW><id>18834100</id><snippet>execute()</snippet></ROW><ROW><id>18834100</id><snippet>params = ('002', 'CS', 'BG', 'HD1', 'T1', 'C1', 0, 'U')
cursor.execute("""INSERT INTO 
                      scale_equipment 
                      (truck_id, product_id, driver_id, field_id, pit_id, harvest_equipment_id, weight, status) 
                  VALUES 
                       (%s, %s, %s, %s, %s, %s, %s, %s)""", params)
</snippet></ROW><ROW><id>18834257</id><snippet>todo=cur.fetchall()</snippet></ROW><ROW><id>18834257</id><snippet>todo</snippet></ROW><ROW><id>18834257</id><snippet>todo</snippet></ROW><ROW><id>18834257</id><snippet>s</snippet></ROW><ROW><id>18834257</id><snippet>cur</snippet></ROW><ROW><id>18834373</id><snippet>from functools import wraps

def require_auth(roles=(Roles.USER,), *args, **kwargs):

    def call(f, *args, **kwargs):
        return f(*args, **kwargs)

    def deco(f):
        @wraps(f)
        def wrapped_f(request, *a, **kw):
            # do your authentication here
            return call(f, request, *a, **kw)

        return wrapped_f

    return deco
</snippet></ROW><ROW><id>18834410</id><snippet>append</snippet></ROW><ROW><id>18834410</id><snippet>None</snippet></ROW><ROW><id>18834410</id><snippet>pool.apply_async(test_function, constants.append(i))
</snippet></ROW><ROW><id>18834410</id><snippet>pool.apply_asynch</snippet></ROW><ROW><id>18834410</id><snippet>None</snippet></ROW><ROW><id>18834410</id><snippet>args</snippet></ROW><ROW><id>18834410</id><snippet>apply_asynch</snippet></ROW><ROW><id>18834410</id><snippet>apply_asynch</snippet></ROW><ROW><id>18834410</id><snippet>tuple</snippet></ROW><ROW><id>18834410</id><snippet>i</snippet></ROW><ROW><id>18834410</id><snippet>pool.apply_asynch(test_function, (constants + [i],))
</snippet></ROW><ROW><id>18834410</id><snippet>test_function</snippet></ROW><ROW><id>18834410</id><snippet>def test_function(k, d, x):
    # etc
</snippet></ROW><ROW><id>18834410</id><snippet>pool.apply_asynch(test_function, constants + [i])
</snippet></ROW><ROW><id>18834410</id><snippet>apply_asynch</snippet></ROW><ROW><id>18834410</id><snippet>args</snippet></ROW><ROW><id>18834410</id><snippet>tuple</snippet></ROW><ROW><id>18834410</id><snippet>Pool.apply</snippet></ROW><ROW><id>18834410</id><snippet>Pool.apply_asynch</snippet></ROW><ROW><id>18834410</id><snippet>Pool.map</snippet></ROW><ROW><id>18834410</id><snippet>Pool.map_asynch</snippet></ROW><ROW><id>18834410</id><snippet>results = pool.map(test_function, [(constants + [i],) for i in xvalues])
</snippet></ROW><ROW><id>18834410</id><snippet>test_function</snippet></ROW><ROW><id>18834410</id><snippet>x</snippet></ROW><ROW><id>18834410</id><snippet>test_function</snippet></ROW><ROW><id>18834410</id><snippet>del args</snippet></ROW><ROW><id>18834410</id><snippet>del</snippet></ROW><ROW><id>18834410</id><snippet>k, d, x = args
</snippet></ROW><ROW><id>18834410</id><snippet>k = args[0]
d = args[1]
x = args[2]
</snippet></ROW><ROW><id>18834410</id><snippet>multiprocessing</snippet></ROW><ROW><id>18834479</id><snippet>sudo apt-get install --reinstall python3
</snippet></ROW><ROW><id>18834533</id><snippet>re.findall('((?:[A-Z][\w]+\s*){1,2}),[\s]([A-Z]{2})', input)
</snippet></ROW><ROW><id>18834592</id><snippet>signal</snippet></ROW><ROW><id>18834863</id><snippet>z</snippet></ROW><ROW><id>18834863</id><snippet>for x in sorted(set(my_list)):
    z=my_list.count(x)

    if z&gt;1:
        print x, "is repeated", z, "times."
    else:
        print x, "is repeated", z, "time."
</snippet></ROW><ROW><id>18834863</id><snippet>for word in sorted(set(my_list)):
    count = my_list.count(word)
    print "{} is repeated {} time{}.".format(word, count, 's' if count &gt; 1 else '')
</snippet></ROW><ROW><id>18834863</id><snippet>&gt;&gt;&gt; my_list = ['dog', 'cat', 'bird', 'dog', 'dog']
&gt;&gt;&gt; for word in sorted(set(my_list)):
...     count = my_list.count(word)
...     print "{} is repeated {} time{}.".format(word, count, 's' if count &gt; 1 else '')
... 
bird is repeated 1 time.
cat is repeated 1 time.
dog is repeated 3 times.
</snippet></ROW><ROW><id>18834863</id><snippet>collections.Counter()</snippet></ROW><ROW><id>18834863</id><snippet>.most_common()</snippet></ROW><ROW><id>18834863</id><snippet>&gt;&gt;&gt; from collections import Counter
&gt;&gt;&gt; for word, count in Counter(my_list).most_common():
...     print "{} is repeated {} time{}.".format(word, count, 's' if count &gt; 1 else '')
... 
dog is repeated 3 times.
bird is repeated 1 time.
cat is repeated 1 time.
</snippet></ROW><ROW><id>18834919</id><snippet>&gt;&gt;&gt; from decimal import Decimal
&gt;&gt;&gt; num = Decimal('1.0')
&gt;&gt;&gt; format(num, '.2f')
'1.00'
</snippet></ROW><ROW><id>18834919</id><snippet>format()</snippet></ROW><ROW><id>18834919</id><snippet>Decimal()</snippet></ROW><ROW><id>18834919</id><snippet>&gt;&gt;&gt; 'Value of num: {:.2f}'.format(num)
'Value of num: 1.00'
</snippet></ROW><ROW><id>18834967</id><snippet>zip()</snippet></ROW><ROW><id>18834967</id><snippet>csv</snippet></ROW><ROW><id>18834967</id><snippet>#!/usr/bin/env python
import csv
import sys

usage = 'Usage: %s infile' % sys.argv[0]

data = []
for filename in sys.argv[1:]:
    with open(filename) as f:
        data.append([line.strip() for line in f])

data = zip(*data)
with open('outfil.txt', 'w') as f:
    writer = csv.writer(f, delimiter=" ")
    writer.writerows(data)
</snippet></ROW><ROW><id>18834967</id><snippet>1.txt</snippet></ROW><ROW><id>18834967</id><snippet>1
2
3
4
5
</snippet></ROW><ROW><id>18834967</id><snippet>2.txt</snippet></ROW><ROW><id>18834967</id><snippet>6
7
8
9
10
</snippet></ROW><ROW><id>18834967</id><snippet>test.py</snippet></ROW><ROW><id>18834967</id><snippet>python test.py 1.txt 2.txt</snippet></ROW><ROW><id>18834967</id><snippet>outfil.txt</snippet></ROW><ROW><id>18834967</id><snippet>1 6
2 7
3 8
4 9
5 10
</snippet></ROW><ROW><id>18835074</id><snippet>p</snippet></ROW><ROW><id>18835074</id><snippet>' '.join(el.string for el in soup.find_all('p', text=True))
</snippet></ROW><ROW><id>18835120</id><snippet>self</snippet></ROW><ROW><id>18835120</id><snippet>self</snippet></ROW><ROW><id>18835120</id><snippet>Base2.__init__</snippet></ROW><ROW><id>18835120</id><snippet>super</snippet></ROW><ROW><id>18835120</id><snippet>Base1.__init__</snippet></ROW><ROW><id>18835121</id><snippet>get_level_values</snippet></ROW><ROW><id>18835121</id><snippet>In [11]: df
Out[11]:
     0
A B
1 4  1
2 5  2
3 6  3

In [12]: df.iloc[df.index.get_level_values('A') == 1]
Out[12]:
     0
A B
1 4  1
</snippet></ROW><ROW><id>18835121</id><snippet>xs</snippet></ROW><ROW><id>18835121</id><snippet>drop_level</snippet></ROW><ROW><id>18835121</id><snippet>df.xs(1, level='A', drop_level=False) # axis=1 if columns
</snippet></ROW><ROW><id>18835121</id><snippet>In [21]: df1 = df.T

In [22]: df1.iloc[:, df1.columns.get_level_values('A') == 1]
Out[22]:
A  1
B  4
0  1
</snippet></ROW><ROW><id>18835426</id><snippet>/usr/share/dict/words</snippet></ROW><ROW><id>18835426</id><snippet>word_file = "/usr/share/dict/words"
WORDS = open(word_file).read().splitlines()
</snippet></ROW><ROW><id>18835426</id><snippet>pip install requests</snippet></ROW><ROW><id>18835426</id><snippet>import requests

word_site = "http://www.freebsd.org/cgi/cvsweb.cgi/src/share/dict/web2?rev=1.12;content-type=text%2Fplain"

response = requests.get(word_site)
WORDS = response.content.splitlines()
</snippet></ROW><ROW><id>18835426</id><snippet>import urllib2

word_site = "http://www.freebsd.org/cgi/cvsweb.cgi/src/share/dict/web2?rev=1.12;content-type=text%2Fplain"

response = urllib2.urlopen(word_site)
txt = response.read()
WORDS = txt.splitlines()
</snippet></ROW><ROW><id>18835437</id><snippet>&gt;&gt;&gt; from itertools import combinations
&gt;&gt;&gt; def filterSimilar (d):
        while True:
            filteredOne = False
            for s, t in combinations(d, 2):
                if isSimilar(s, t):
                    d.remove(t)
                    filteredOne = True
                    break
            if not filteredOne:
                break
&gt;&gt;&gt; d = ['asdf', 'asxf', 'foo', 'bar', 'baz']   
&gt;&gt;&gt; filterSimilar(d)
&gt;&gt;&gt; d
['asdf', 'foo', 'bar']
</snippet></ROW><ROW><id>18835437</id><snippet>isSimilar</snippet></ROW><ROW><id>18835437</id><snippet>def levenshteinDistance (s, t):
    if len(s) == 0:
        return len(t)
    if len(t) == 0:
        return len(s)
    return min(levenshteinDistance(s[:-1], t) + 1, levenshteinDistance(s, t[:-1]) + 1, levenshteinDistance(s[:-1], t[:-1]) + (0 if s[-1] == t[-1] else 1))

def isSimilar (s, t):
    return levenshteinDistance(s, t) &lt; 2
</snippet></ROW><ROW><id>18835437</id><snippet>compute_jaccard_index</snippet></ROW><ROW><id>18835437</id><snippet>isSimilar</snippet></ROW><ROW><id>18835437</id><snippet>def isSimilar (s, t):
    return compute_jaccard_index(s, t) &gt; .4
</snippet></ROW><ROW><id>18835437</id><snippet>&gt;&gt;&gt; lst = [{'very','beauty','place'},{'very','good','place'},{'another','trigram','item'}]
&gt;&gt;&gt; filterSimilar(lst)
&gt;&gt;&gt; lst
[{'very', 'beauty', 'place'}, {'item', 'trigram', 'another'}]
</snippet></ROW><ROW><id>18835441</id><snippet>UpdateValues</snippet></ROW><ROW><id>18835441</id><snippet>key</snippet></ROW><ROW><id>18835441</id><snippet>key</snippet></ROW><ROW><id>18835441</id><snippet>s=Scale(root, from_=1, to=16, orient="horizontal",\
        command= lambda x, key=key:self.UpdateValues(key))
</snippet></ROW><ROW><id>18835441</id><snippet>UpdateValues</snippet></ROW><ROW><id>18835441</id><snippet>def UpdateValues(self, key):
    print(key)
</snippet></ROW><ROW><id>18835676</id><snippet>numpy</snippet></ROW><ROW><id>18835676</id><snippet>collections</snippet></ROW><ROW><id>18835676</id><snippet>ds = [
    {'a':10, 'b': 0, 'c': 2},
    {'a':7, 'b': 4, 'c': 4},
    {'a':4, 'b': 5, 'c': 3} ]

merged = {}
for d in ds:
    for k, v in d.items ():
        if k not in merged: merged [k] = []
        merged [k].append (v)

print (merged)
</snippet></ROW><ROW><id>18835676</id><snippet>print ( [ (v, k) for k, v in merged.items () ] )
</snippet></ROW><ROW><id>18835676</id><snippet>[([10, 7, 4], 'a'), ([2, 4, 3], 'c'), ([0, 4, 5], 'b')]
</snippet></ROW><ROW><id>18835793</id><snippet>list[5]</snippet></ROW><ROW><id>18835793</id><snippet>IndexError</snippet></ROW><ROW><id>18835793</id><snippet>while</snippet></ROW><ROW><id>18835793</id><snippet>while position &lt; len(list):
</snippet></ROW><ROW><id>18835793</id><snippet>enumerate</snippet></ROW><ROW><id>18835793</id><snippet>def linear( target, list ):
    """ returns the position of target,
    if not found returns -1"""
    for idx, element in enumerate(list):
        if element == target:
            return idx
    return -1
</snippet></ROW><ROW><id>18835942</id><snippet>FuncThread</snippet></ROW><ROW><id>18835942</id><snippet>FuncThread(func, *args)</snippet></ROW><ROW><id>18835942</id><snippet>Thread(target=lambda: func(*args))</snippet></ROW><ROW><id>18835942</id><snippet>Thread(target=func, args=args)</snippet></ROW><ROW><id>18835942</id><snippet>def datapath_thread(ipaddress, test_func, testlogfile, count):
    # ...
    for i in range(count):
        # ...
        try:
            (code, val) = test_func(mylib)
        #...
</snippet></ROW><ROW><id>18835942</id><snippet>thread = Thread(target=datapath_thread, args=(
    controller,
    datapaths.listDatapaths,
    "datapaths.log",
    counter
))
</snippet></ROW><ROW><id>18836025</id><snippet>globals()</snippet></ROW><ROW><id>18836025</id><snippet>sys.modules[__name__]</snippet></ROW><ROW><id>18836025</id><snippet>eval</snippet></ROW><ROW><id>18836032</id><snippet>jPosts = [{'id':123},{'id':54233},etc] #example 
</snippet></ROW><ROW><id>18836032</id><snippet>jPosts['id']</snippet></ROW><ROW><id>18836032</id><snippet>jPosts[0]['id']</snippet></ROW><ROW><id>18836032</id><snippet>max(jPosts,key=lambda item:item['id']) #compare based on EACH items 'id' field
</snippet></ROW><ROW><id>18836235</id><snippet>class Helper(threading.Thread):
  def __init__(self, directory):
    super(Helper, self).__init__()
    self.directory = directory
    self.start()

  def run(self):
    for path, folders, files in os.walk(self.directory.path):
      for f in files:
          self.directory.files.append(os.path.join(path, f))

      for d in folders:
          self.directory.dirs.append(Directory(os.path.join(path, d), self.directory.interval, self.directory.do))

    self = None

class Directory(threading.Thread):
  def __init__(self, path, interval=5, do=None):
    super(Directory, self).__init__()
    self.path = path
    self.files, self.dirs = ([], [])
    self.interval = interval
    self.last_update = 0
    self.helper = None

    self.do = do # One flag to stop refreshing all instances
    if do == None:
      self.do = True

  def run(self):
    while self.do:
      self.refresh()
      time.sleep(self.interval)

  def refresh(self):
    # Only start a refresh if there self.helper is done and directory was changed
    if not self.helper and self.has_changed():
      self.last_update = int(time.time())
      self.helper = Helper(self)

  def has_changed(self):
    return int(os.path.getmtime(self.path)) &gt; self.last_update
</snippet></ROW><ROW><id>18836235</id><snippet>if __name__ == '__main__':
  root = Directory('/home/plg')
  root.refresh()
  root.helper.join()

  for d in [root] + root.dirs:
    for f in d.files:
      print f
</snippet></ROW><ROW><id>18836235</id><snippet>$ time python bin/dirmon.py | wc -l # wc -l == len(sys.stdout.readlines())
7805

real  0m0.078s
user  0m0.048s
sys 0m0.028s
</snippet></ROW><ROW><id>18836235</id><snippet>$ time python bin/dirmon.py | wc -l
147159

real  0m1.213s
user  0m0.940s
sys 0m0.272s
$ time python bin/dirmon.py | wc -l
147159

real  0m1.209s
user  0m0.928s
sys 0m0.284s
</snippet></ROW><ROW><id>18836349</id><snippet>HtmlXPathSelector</snippet></ROW><ROW><id>18836349</id><snippet>source_code</snippet></ROW><ROW><id>18836349</id><snippet>...
for month in months:
    link = self.br.find_element_by_link_text(month)
    link.click()
    time.sleep(5)

    hxs = HtmlXPathSelector(self.br.page_source)

    # Get all the divs containing info to be scraped.
    listitems = hxs.select("//div[@class='listItem']")
...
</snippet></ROW><ROW><id>18836602</id><snippet>&gt;&gt;&gt; "5" + 5
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
TypeError: cannot concatenate 'str' and 'int' objects
</snippet></ROW><ROW><id>18836602</id><snippet>101</snippet></ROW><ROW><id>18836602</id><snippet>get_xml</snippet></ROW><ROW><id>18836602</id><snippet>print get_xml("101")
</snippet></ROW><ROW><id>18836602</id><snippet>x</snippet></ROW><ROW><id>18836602</id><snippet>int</snippet></ROW><ROW><id>18836602</id><snippet>str</snippet></ROW><ROW><id>18836602</id><snippet>get_xml</snippet></ROW><ROW><id>18836602</id><snippet>url = "http://charts.com/charts/" + str(x) + ".xml"
</snippet></ROW><ROW><id>18836602</id><snippet>url = "http://charts.com/charts/%s.xml" % x
</snippet></ROW><ROW><id>18836965</id><snippet>python -V</snippet></ROW><ROW><id>18836966</id><snippet>sys.stdin.readline()</snippet></ROW><ROW><id>18836966</id><snippet>X = sys.stdin.readline().rstrip()
</snippet></ROW><ROW><id>18836996</id><snippet>def isPrime(n):
    def isSpsp(n, a):
        d, s = n - 1, 0
        while d % 2 == 0: d, s = d / 2, s + 1
        t = pow(a, d, n)
        if t == 1: return True
        while s &gt; 0:
            if t == n - 1: return True
            t, s = (t * t) % n, s - 1
        return False
    ps = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41,
         43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]
    if n in ps: return True
    for p in ps:
        if not isSpsp(n, p): return False
    return True
</snippet></ROW><ROW><id>18837146</id><snippet>{% verbatim %} {{clientSideContent}} {% endverbatim %}
</snippet></ROW><ROW><id>18837194</id><snippet>finally</snippet></ROW><ROW><id>18837194</id><snippet>return</snippet></ROW><ROW><id>18837194</id><snippet>break</snippet></ROW><ROW><id>18837194</id><snippet>return</snippet></ROW><ROW><id>18837194</id><snippet>finally</snippet></ROW><ROW><id>18837194</id><snippet>except</snippet></ROW><ROW><id>18837194</id><snippet>finally</snippet></ROW><ROW><id>18837194</id><snippet>def connect(self):
    try:
        conn = ftplib.FTP(self.hostname, self.user, self.password)
        return conn
    except Exception as e:
        logging.error('Failed to connect to %s for %s' % (self.hostname, self.user))
        raise
</snippet></ROW><ROW><id>18837194</id><snippet>_exit</snippet></ROW><ROW><id>18837194</id><snippet>finally</snippet></ROW><ROW><id>18837194</id><snippet>return</snippet></ROW><ROW><id>18837194</id><snippet>return</snippet></ROW><ROW><id>18837360</id><snippet>r'The file (.+?) in successfully uploaded'
</snippet></ROW><ROW><id>18837360</id><snippet>.</snippet></ROW><ROW><id>18837360</id><snippet>+</snippet></ROW><ROW><id>18837360</id><snippet>?</snippet></ROW><ROW><id>18837360</id><snippet>"The file foo.bar is successfully uploaded. The file spam.eggs is successfully uploaded."</snippet></ROW><ROW><id>18837360</id><snippet>"foo.bar"</snippet></ROW><ROW><id>18837360</id><snippet>"spam.eggs"</snippet></ROW><ROW><id>18837360</id><snippet>"foo.bar is successfully uploaded. The file spam.eggs"</snippet></ROW><ROW><id>18837389</id><snippet>pd.DataFrame(d)
ValueError: If using all scalar values, you must must pass an index
</snippet></ROW><ROW><id>18837389</id><snippet>In [11]: pd.DataFrame(d.items())  # or list(d.iteritems()) in python 3
Out[11]:
             0    1
0   2012-07-02  392
1   2012-07-06  392
2   2012-06-29  391
3   2012-06-28  391
...

In [12]: pd.DataFrame(d.items()), columns=['Date', 'DateValue'])
Out[12]:
          Date  DateValue
0   2012-07-02        392
1   2012-07-06        392
2   2012-06-29        391
</snippet></ROW><ROW><id>18837389</id><snippet>In [21]: s = pd.Series(d, name='DateValue')
Out[21]:
2012-06-08    388
2012-06-09    388
2012-06-10    388

In [22]: s.index.name = 'Date'

In [23]: s.reset_index
Out[23]:
          Date  DateValue
0   2012-06-08        388
1   2012-06-09        388
2   2012-06-10        388
</snippet></ROW><ROW><id>18837450</id><snippet>&gt;&gt;</snippet></ROW><ROW><id>18837450</id><snippet>print</snippet></ROW><ROW><id>18837450</id><snippet>print_stmt ::=  "print" ([expression ("," expression)* [","]]
                | "&gt;&gt;" expression [("," expression)+ [","]])
</snippet></ROW><ROW><id>18837450</id><snippet>&gt;&gt;</snippet></ROW><ROW><id>18837450</id><snippet>write()</snippet></ROW><ROW><id>18837450</id><snippet>print</snippet></ROW><ROW><id>18837450</id><snippet>print</snippet></ROW><ROW><id>18837450</id><snippet>from __future__ import print_function</snippet></ROW><ROW><id>18837450</id><snippet>print &gt;&gt;foo, spam</snippet></ROW><ROW><id>18837450</id><snippet>print(spam, file=foo)</snippet></ROW><ROW><id>18837615</id><snippet>enumerate()</snippet></ROW><ROW><id>18837615</id><snippet>newlist = [v for i, v in enumerate(oldlist) if i not in removelist]
</snippet></ROW><ROW><id>18837615</id><snippet>removelist</snippet></ROW><ROW><id>18837615</id><snippet>set</snippet></ROW><ROW><id>18837615</id><snippet>removeset = set(removelist)
newlist = [v for i, v in enumerate(oldlist) if i not in removeset]
</snippet></ROW><ROW><id>18837615</id><snippet>&gt;&gt;&gt; oldlist = ["asdf", "ghjk", "qwer", "tyui"]
&gt;&gt;&gt; removeset = set([1, 3])
&gt;&gt;&gt; [v for i, v in enumerate(oldlist) if i not in removeset]
['asdf', 'qwer']
</snippet></ROW><ROW><id>18837741</id><snippet>textvariable</snippet></ROW><ROW><id>18837741</id><snippet>StringVar</snippet></ROW><ROW><id>18837841</id><snippet>urllib2</snippet></ROW><ROW><id>18837841</id><snippet>bs4</snippet></ROW><ROW><id>18837841</id><snippet>urllib2</snippet></ROW><ROW><id>18837841</id><snippet>bs4</snippet></ROW><ROW><id>18837841</id><snippet>Scrapy</snippet></ROW><ROW><id>18837898</id><snippet>functionRelevantToTheseFolders()</snippet></ROW><ROW><id>18837898</id><snippet>OSError</snippet></ROW><ROW><id>18837898</id><snippet>functionRelevantToTheseFolders()</snippet></ROW><ROW><id>18837978</id><snippet>lambda x: None if x[1] is None else x[1][0]
</snippet></ROW><ROW><id>18837978</id><snippet>None</snippet></ROW><ROW><id>18837978</id><snippet>None</snippet></ROW><ROW><id>18837978</id><snippet>x[1][0]</snippet></ROW><ROW><id>18837978</id><snippet>lambda x: float("+inf") if x[1] is None else x[1][0]
</snippet></ROW><ROW><id>18837978</id><snippet>None</snippet></ROW><ROW><id>18837978</id><snippet>float("+inf")</snippet></ROW><ROW><id>18837978</id><snippet>None</snippet></ROW><ROW><id>18837978</id><snippet>posinf = float("+inf")
lambda x: posinf if x[1] is None else x[1][0]
</snippet></ROW><ROW><id>18837978</id><snippet>float("+inf")</snippet></ROW><ROW><id>18837978</id><snippet>class Maximus(object):
    "Object that is greater than any other object (but equal to itself)."
    __le__ = __eq__ = lambda self, other: isinstance(other, type(self))
    __ne__ = __gt__ = lambda self, other: not isinstance(other, type(self))
    __lt__ = lambda self, other: False      
    __ge__ = lambda self, other: True
    __str__  = lambda self: "I am the greatest!"
    __repr__ = lambda self: "Maximus()"

maximus = Maximus()

lambda x: maximus if x[1] is None else x[1][0]
</snippet></ROW><ROW><id>18837978</id><snippet>__lt__</snippet></ROW><ROW><id>18837978</id><snippet>__eq__</snippet></ROW><ROW><id>18837978</id><snippet>Maximus</snippet></ROW><ROW><id>18838168</id><snippet>token_list = [input_tokens.split('\n')]
</snippet></ROW><ROW><id>18838168</id><snippet>token_list = input_tokens.split('\n')
</snippet></ROW><ROW><id>18838275</id><snippet>from xml.dom import minidom
Test_file = open('C:/test_file.xml','r')
xmldoc = minidom.parse(Test_file)

Test_file.close()

def printNode(node):
  print node
  for child in node.childNodes:
       printNode(child)

printNode(xmldoc.documentElement)
</snippet></ROW><ROW><id>18838275</id><snippet>&lt;a&gt;
  &lt;b&gt;testing 1&lt;/b&gt;
  &lt;c&gt;testing 2&lt;/c&gt;
&lt;/a&gt;
</snippet></ROW><ROW><id>18838275</id><snippet>&lt;DOM Element: a at 0xbc56e8&gt;
&lt;DOM Text node "u'\n  '"&gt;
&lt;DOM Element: b at 0xbc5788&gt;
&lt;DOM Text node "u'testing 1'"&gt;
&lt;DOM Text node "u'\n  '"&gt;
&lt;DOM Element: c at 0xbc5828&gt;
&lt;DOM Text node "u'testing 2'"&gt;
&lt;DOM Text node "u'\n'"&gt;
</snippet></ROW><ROW><id>18838275</id><snippet>minidom.parse()</snippet></ROW><ROW><id>18838275</id><snippet>IOError: [Errno 22] invalid mode ('r') or filename: 'C::/test_file.xml'</snippet></ROW><ROW><id>18838275</id><snippet>xml.dom.minidom.Document</snippet></ROW><ROW><id>18838275</id><snippet>TypeError: iteration over non-sequence</snippet></ROW><ROW><id>18838349</id><snippet>In [2]: df
Out[2]:       Rank   Name
        2400     1  name1
        2401     2  name2
        2402     3  name3
        2403     4  name4
        2404     5  name5
In [3]: df.merge(
            df, on='Rank', suffixes=['_month1', '_month2']
        ).merge(df, on='Rank').rename(
            columns={'Name': 'Name_month3'}
        ).merge(df, on='Rank').rename(
            columns={'Name': 'Name_month4'}
        )
Out[3]:    Rank Name_month1 Name_month2 Name_month3 Name_month4
        0     1       name1       name1       name1       name1
        1     2       name2       name2       name2       name2
        2     3       name3       name3       name3       name3
        3     4       name4       name4       name4       name4
        4     5       name5       name5       name5       name5
</snippet></ROW><ROW><id>18838349</id><snippet>In [4]: data = [df, df, df, df]
        current = data[0].rename(columns={'Name': 'Name_month1'})
        for i, frame in enumerate(data[1:], 2):
            current = current.merge(frame, on='Rank').rename(
                         columns={'Name': 'Name_month%d' % i})
        current
Out[4]:    Rank Name_month1 Name_month2 Name_month3 Name_month4
        0     1       name1       name1       name1       name1
        1     2       name2       name2       name2       name2
        2     3       name3       name3       name3       name3
        3     4       name4       name4       name4       name4
        4     5       name5       name5       name5       name5
</snippet></ROW><ROW><id>18838354</id><snippet>class MyClass:
    def do_something(self):
        print 'MyClass did something'

getattr(MyClass(),'do_something')()
</snippet></ROW><ROW><id>18838476</id><snippet>def start_end(arr):
    idx = np.nonzero(np.diff(arr))[0] + 1
    if arr[0]:
        idx = np.concatenate((np.array([0], dtype=np.intp), idx))
    if arr[-1]:
        idx = np.concatenate((idx, np.array([len(arr)],
                                            dtype=np.intp),))
    return idx.reshape(-1, 2)

&gt;&gt;&gt; start_end([1,1,1,0,0,1,0])
array([[0, 3],
       [5, 6]], dtype=int64)
&gt;&gt;&gt; start_end([0,1,1,1,0,0,1])
array([[1, 4],
       [6, 7]], dtype=int64)
&gt;&gt;&gt; start_end([0,1,1,1,0,0,1,0])
array([[1, 4],
       [6, 7]], dtype=int64)
&gt;&gt;&gt; start_end([1,1,1,0,0,1])
array([[0, 3],
       [5, 6]], dtype=int64)
</snippet></ROW><ROW><id>18838540</id><snippet>AF_INET</snippet></ROW><ROW><id>18838540</id><snippet>PF_PACKET</snippet></ROW><ROW><id>18838540</id><snippet>PF_PACKET</snippet></ROW><ROW><id>18838540</id><snippet>AF_INET</snippet></ROW><ROW><id>18838540</id><snippet>PF_PACKET</snippet></ROW><ROW><id>18838577</id><snippet>vmin</snippet></ROW><ROW><id>18838577</id><snippet>vmax</snippet></ROW><ROW><id>18838577</id><snippet>plt.imshow(arr, vmin=0, vmax=255)
</snippet></ROW><ROW><id>18838577</id><snippet>vmin</snippet></ROW><ROW><id>18838577</id><snippet>vmax</snippet></ROW><ROW><id>18838597</id><snippet>scrapy startproject tutorial</snippet></ROW><ROW><id>18838597</id><snippet>tutorial/
    scrapy.cfg
    tutorial/
        __init__.py
        items.py
        pipelines.py
        settings.py
        spiders/
            __init__.py
            ...
</snippet></ROW><ROW><id>18838597</id><snippet>TorrentItem</snippet></ROW><ROW><id>18838597</id><snippet>items.py</snippet></ROW><ROW><id>18838597</id><snippet>MininovaSpider</snippet></ROW><ROW><id>18838597</id><snippet>spiders</snippet></ROW><ROW><id>18838597</id><snippet>scrapy crawl &lt;website-name&gt; -o &lt;output-file&gt; -t &lt;output-type&gt;
</snippet></ROW><ROW><id>18838597</id><snippet>scrapy runspider my_spider.py
</snippet></ROW><ROW><id>18838598</id><snippet>userDef = userDef()
</snippet></ROW><ROW><id>18838740</id><snippet>for in_file</snippet></ROW><ROW><id>18838740</id><snippet>import csv
import os
import glob

directory = raw_input ("INPUT Folder")
output = raw_input("OUTPUT Folder:")
in_files = os.path.join(directory, '*.csv')

for in_file in glob.glob(in_files):
    with open(in_file) as input_file:
        reader = csv.reader(input_file)
        cols = []
        for row in reader:
            cols.append(row)

    # "outdent" this code so it only needs to run once for each in_file
    filename = os.path.splitext(os.path.basename(in_file))[0] + '.csv'

    # Indent this to the same level as the rest of the "for in_file" loop!
    with open (os.path.join(output, filename), 'wb') as output_file:
        writer = csv.writer(output_file)
        for i in range(len(max(cols, key=len))):
            writer.writerow ([(c[i] if i&lt;len(c) else '') for c in cols])
</snippet></ROW><ROW><id>18838740</id><snippet>for in_file</snippet></ROW><ROW><id>18838740</id><snippet>cols</snippet></ROW><ROW><id>18838740</id><snippet>filename = ...</snippet></ROW><ROW><id>18838740</id><snippet>for in_file</snippet></ROW><ROW><id>18838740</id><snippet>in_file</snippet></ROW><ROW><id>18838740</id><snippet>row</snippet></ROW><ROW><id>18838740</id><snippet>in_file</snippet></ROW><ROW><id>18838873</id><snippet>/data/app/com.example.deliveryupdater-1.apk(newline)</snippet></ROW><ROW><id>18838873</id><snippet>[8:-1]</snippet></ROW><ROW><id>18838873</id><snippet>[8:]</snippet></ROW><ROW><id>18838873</id><snippet>.rstrip()</snippet></ROW><ROW><id>18838873</id><snippet>if line.startswith("package:"):
   apkPath = line[8:].rstrip()
   print apkPath
pullCmd = './adb pull ' + apkPath
pullData = os.popen(pullCmd,"r")
</snippet></ROW><ROW><id>18839053</id><snippet>insert</snippet></ROW><ROW><id>18839053</id><snippet>nth_byte = 5
with open('old_file_path', 'r') as old_buffer, open('new_file_path', 'w') as new_buffer:
    # copy until nth byte
    new_buffer.write(old_buffer.read(nth_byte))
    # insert new content
    new_buffer.write('this')
    # copy the rest of the file
    new_buffer.write(old_buffer.read())
</snippet></ROW><ROW><id>18839053</id><snippet>Hello this world</snippet></ROW><ROW><id>18839053</id><snippet>new_buffer</snippet></ROW><ROW><id>18839182</id><snippet>d = {1:9, 6:7, 5:45, 3:90}
print max(k for k in d if k &lt; 4)
</snippet></ROW><ROW><id>18839182</id><snippet>k for k in d if k &lt; 4</snippet></ROW><ROW><id>18839182</id><snippet>max()</snippet></ROW><ROW><id>18839368</id><snippet>ipython notebook --pylab=inline
</snippet></ROW><ROW><id>18839368</id><snippet>show()</snippet></ROW><ROW><id>18839368</id><snippet>show()</snippet></ROW><ROW><id>18839368</id><snippet>qt</snippet></ROW><ROW><id>18839368</id><snippet>wx</snippet></ROW><ROW><id>18839368</id><snippet>gtk</snippet></ROW><ROW><id>18839368</id><snippet>ginput()</snippet></ROW><ROW><id>18839368</id><snippet>inline</snippet></ROW><ROW><id>18839368</id><snippet>qt</snippet></ROW><ROW><id>18839368</id><snippet>tk</snippet></ROW><ROW><id>18839368</id><snippet>ipython notebook --pylab=qt
ipython notebook --pylab=tk
</snippet></ROW><ROW><id>18839572</id><snippet>&lt;object&gt;</snippet></ROW><ROW><id>18839572</id><snippet>FireBreath</snippet></ROW><ROW><id>18839572</id><snippet>&lt;script type="text/python" language="python"&gt;</snippet></ROW><ROW><id>18839606</id><snippet>np.nan</snippet></ROW><ROW><id>18839606</id><snippet>np.nan</snippet></ROW><ROW><id>18839606</id><snippet>In [13]: df = DataFrame(dict(cols = range(6), values = range(6)), dtype='float64')

In [14]: df['cols'] = (df['cols']+10).apply(str)

In [15]: df.iloc[0] = np.nan

In [18]: df
Out[18]: 
   cols  values
0   NaN     NaN
1  11.0       1
2  12.0       2
3  13.0       3
4  14.0       4
5  15.0       5

# write w/o the index on that particular column
In [16]: df.to_hdf('test.h5','df',mode='w',table=True,data_columns=True,index=['cols'])

In [17]: pd.read_hdf('test.h5','df',where=[('values','&gt;',2.0)])
Out[17]: 
   cols  values
3  13.0       3
4  14.0       4
5  15.0       5
</snippet></ROW><ROW><id>18839836</id><snippet>m = int(input("enter an integer")
</snippet></ROW><ROW><id>18839836</id><snippet>)</snippet></ROW><ROW><id>18839924</id><snippet>result = Counter()
for c in counters:
    result |= c
</snippet></ROW><ROW><id>18839924</id><snippet>result</snippet></ROW><ROW><id>18839924</id><snippet>result</snippet></ROW><ROW><id>18839924</id><snippet>counters[0] | counters[1] | counters[2] | ...
</snippet></ROW><ROW><id>18839935</id><snippet>input</snippet></ROW><ROW><id>18839935</id><snippet>input</snippet></ROW><ROW><id>18839935</id><snippet>decode</snippet></ROW><ROW><id>18839935</id><snippet>str</snippet></ROW><ROW><id>18839935</id><snippet>input</snippet></ROW><ROW><id>18839935</id><snippet>readline</snippet></ROW><ROW><id>18839935</id><snippet>payload = sys.stdin.buffer.read()
</snippet></ROW><ROW><id>18839935</id><snippet>payload = sys.stdin.buffer.read(512)
</snippet></ROW><ROW><id>18840050</id><snippet>argparse</snippet></ROW><ROW><id>18840050</id><snippet>--help</snippet></ROW><ROW><id>18840050</id><snippet>-h</snippet></ROW><ROW><id>18840050</id><snippet>parser = argparse.ArgumentParser(add_help=False)
</snippet></ROW><ROW><id>18840062</id><snippet>try</snippet></ROW><ROW><id>18840062</id><snippet>except</snippet></ROW><ROW><id>18840062</id><snippet>TimeoutError</snippet></ROW><ROW><id>18840062</id><snippet>try:
    do something
except TimeoutError:
    do something
</snippet></ROW><ROW><id>18840062</id><snippet>for _ in range(max_retries):
    try:
        do something
        break
    except TimeoutError:
        pass
</snippet></ROW><ROW><id>18840062</id><snippet>else</snippet></ROW><ROW><id>18840062</id><snippet>for</snippet></ROW><ROW><id>18840062</id><snippet>break</snippet></ROW><ROW><id>18840318</id><snippet>screen.refresh()</snippet></ROW><ROW><id>18840318</id><snippet>box1.refresh()</snippet></ROW><ROW><id>18840318</id><snippet>#!/usr/bin/env python

import curses 

screen = curses.initscr()

try:
    screen.border(0)

    box1 = curses.newwin(20, 20, 5, 5)
    box1.box()    

    screen.refresh()
    box1.refresh()

    screen.getch()

finally:
    curses.endwin()
</snippet></ROW><ROW><id>18840318</id><snippet>#!/usr/bin/env python

import curses 

screen = curses.initscr()

try:
    screen.border(0)
    screen.refresh()

    box1 = curses.newwin(20, 20, 5, 5)
    box1.box()    
    box1.refresh()

    screen.getch()

finally:
    curses.endwin()
</snippet></ROW><ROW><id>18840318</id><snippet>immedok(True)</snippet></ROW><ROW><id>18840318</id><snippet>#!/usr/bin/env python

import curses 

screen = curses.initscr()
screen.immedok(True)

try:
    screen.border(0)

    box1 = curses.newwin(20, 20, 5, 5)
    box1.immedok(True)

    box1.box()    
    box1.addstr("Hello World of Curses!")

    screen.getch()

finally:
    curses.endwin()
</snippet></ROW><ROW><id>18840373</id><snippet>dlineinfo</snippet></ROW><ROW><id>18840373</id><snippet>None</snippet></ROW><ROW><id>18840373</id><snippet>yview</snippet></ROW><ROW><id>18840761</id><snippet>hash</snippet></ROW><ROW><id>18840761</id><snippet>hash = {}
hash['one']  = {"index": 1, "value": "uno"}
hash['two']  = {"index": 2, "value": "dos"}
hash['three']= {"index": 3, "value": "tres"}
for ctg in sorted(hash.keys(),key=lambda x: hash[x]['index']):
   print hash[ctg]['index'],hash[ctg]['value']
</snippet></ROW><ROW><id>18840761</id><snippet>1 uno
2 dos
3 tres
</snippet></ROW><ROW><id>18840761</id><snippet>sorted()</snippet></ROW><ROW><id>18840761</id><snippet>key</snippet></ROW><ROW><id>18840788</id><snippet>#include &lt;iostream&gt;
using std::cout;

class parent {

protected:
    int n;
    char *b;
public:
    parent(int k): n(k), b(new char[k]) {
        cout &lt;&lt; "From parent class\n";
    }
};

class child : public parent {

public:
    child(const int k) : parent(k){
        cout &lt;&lt; "From child class\n";
        delete b;
    }
};


int main() {
    child init(5);
    return 0;
}
</snippet></ROW><ROW><id>18840797</id><snippet>print</snippet></ROW><ROW><id>18840797</id><snippet>print</snippet></ROW><ROW><id>18840797</id><snippet>outfile.write(new_line)</snippet></ROW><ROW><id>18840797</id><snippet>with</snippet></ROW><ROW><id>18840797</id><snippet>'analyze'</snippet></ROW><ROW><id>18840797</id><snippet>'utilize'</snippet></ROW><ROW><id>18840797</id><snippet>file.read()</snippet></ROW><ROW><id>18840797</id><snippet>with open('test_file.txt', 'r') as in_file:
    text = in_file.read()

with open('output_test_file.txt', 'w') as out_file:
    out_file.write(replace_all(text, spelling_dict))
</snippet></ROW><ROW><id>18840797</id><snippet>str.replace</snippet></ROW><ROW><id>18840797</id><snippet>re.sub</snippet></ROW><ROW><id>18840797</id><snippet>import re

#from english_american_dictionary import ame_to_bre_spellings
ame_to_bre_spellings = {'tire':'tyre', 'color':'colour', 'utilize':'utilise'}

def replacer_factory(spelling_dict):
    def replacer(match):
        word = match.group()
        return spelling_dict.get(word, word)
    return replacer

def ame_to_bre(text):
    pattern = r'\b\w+\b'  # this pattern matches whole words only
    replacer = replacer_factory(ame_to_bre_spellings)
    return re.sub(pattern, replacer, text)

def main():
    #with open('test_file.txt') as in_file:
    #    text = in_file.read()
    text = 'foo color, entire, utilize'

    #with open('output_test_file.txt', 'w') as out_file:
    #    out_file.write(ame_to_bre(text))
    print(ame_to_bre(text))

if __name__ == '__main__':
    main()
</snippet></ROW><ROW><id>18840797</id><snippet>replacer_factory</snippet></ROW><ROW><id>18840859</id><snippet>enumerate()</snippet></ROW><ROW><id>18840859</id><snippet>for j, vertex in enumerate(entries): entries[j] = float(vertex)
</snippet></ROW><ROW><id>18840894</id><snippet>str.translate</snippet></ROW><ROW><id>18840894</id><snippet>def subs(st):
    return st.translate(BYTE_REPLACE)
</snippet></ROW><ROW><id>18840894</id><snippet>&gt;&gt;&gt; subs('4567')
'\x07\x0c67'
</snippet></ROW><ROW><id>18840894</id><snippet>str.translate</snippet></ROW><ROW><id>18840894</id><snippet>import string
k, v = zip(*BYTE_REPLACE.iteritems())
k, v = ''.join(map(chr, k)), ''.join(map(chr, v))
tbl = string.maketrans(k, v)
def subs(st):
    return st.translate(tbl)
</snippet></ROW><ROW><id>18841218</id><snippet>store_true</snippet></ROW><ROW><id>18841218</id><snippet>True</snippet></ROW><ROW><id>18841218</id><snippet>--username</snippet></ROW><ROW><id>18841218</id><snippet>action='store'</snippet></ROW><ROW><id>18841281</id><snippet>import re
n = re.split('\W+', m)
</snippet></ROW><ROW><id>18841343</id><snippet>parser.add_subparsers</snippet></ROW><ROW><id>18841343</id><snippet>dest</snippet></ROW><ROW><id>18841343</id><snippet>subparser.add_argument('files',...)</snippet></ROW><ROW><id>18841343</id><snippet>getattr(a,options.command) ...</snippet></ROW><ROW><id>18841343</id><snippet>import argparse
import sys

class ExecuteShell(object):
    # This function demonstrates that you can put 
    # methods in ExecuteShell(), if you need to, 
    # without having them appear as command-line commands
    # simply by prepending an underscore.
    def _useful(self):
        """Useful method that ISNT a command."""
        return 3.14159

    def create(self, args):
        """create a file"""
        print 'xxxxxxxxxxx', args 

    def list(self, args):
        """ccccccc"""
        print args

    def delete(self, args):
        """ddddddd"""
        print 'ddddddd'

class TestShell(object):

   def find_actions(self, subparsers, actions_module, args):
        for attr in (action for action in dir(actions_module) if not action.startswith('_')):
            callback = getattr(actions_module, attr)
            desc = callback.__doc__ or ''
            subparser = subparsers.add_parser(attr, description=desc, help=desc)

            # This add_argument describes the positional argument, like so:
            #   'files' -- the result of matching this argument will be
            #              stored in `options.files`
            #   metavar='FILE' -- The help messages will use the word "FILE"
            #                     when describing this argument
            #   nargs='+' -- `narg` describes how many arguments this should
            #                match. The value `+` means "all of them, but at
            #                least one." 
            subparser.add_argument('files', metavar='FILE', nargs='+')

   def main(self, args):
        # setup parser
        parser = argparse.ArgumentParser()
        subparsers = parser.add_subparsers(dest='command')
        a = ExecuteShell()
        subcommand_parser = self.find_actions(subparsers, a, args)

        # Run parser
        args = parser.parse_args(args)

        # Run selected command
        # If we reach this statement, then:
        #    args.command is the command the user chose, 
        #       for example, 'create' or 'list'
        #    args.files is the list of arguments that followed 'create' or 'list'
        #    a is an instance of ExecuteShell
        #    getattr(a, args.command) is the attribute or method of `a`
        #       the name in `args.command`, for example, a.create or a.list
        #    getattr(a, args.command)(args.files) invokes that method,
        #       passing in the list of user arguments
        #    So, this line in effect might call `a.create(['file1', 'file2'])`
        getattr(a, args.command)(args.files)

if __name__ == "__main__":

    a = TestShell()
    a.main(sys.argv[1:])
</snippet></ROW><ROW><id>18841435</id><snippet>re.X</snippet></ROW><ROW><id>18841435</id><snippet>re.VERBOSE</snippet></ROW><ROW><id>18841435</id><snippet>#</snippet></ROW><ROW><id>18841435</id><snippet>n-c</snippet></ROW><ROW><id>18841435</id><snippet>valid = re.compile(r'[^\uFFFE\uFFFF]   # non-characters', re.VERBOSE)
</snippet></ROW><ROW><id>18841435</id><snippet>r'''
# LOTS is for foo
# _ is a special fiz
# OF-LITERAL is for bar
[^LOTS_OF-LITERAL]
'''
</snippet></ROW><ROW><id>18842058</id><snippet>state_union</snippet></ROW><ROW><id>18842058</id><snippet>len()</snippet></ROW><ROW><id>18842058</id><snippet>state_union.raw()</snippet></ROW><ROW><id>18842058</id><snippet>state_union.words()</snippet></ROW><ROW><id>18842058</id><snippet>state_union.sents</snippet></ROW><ROW><id>18842058</id><snippet>len(state_union.words())</snippet></ROW><ROW><id>18842131</id><snippet>sqlite3 example.db
</snippet></ROW><ROW><id>18842131</id><snippet>.databases
</snippet></ROW><ROW><id>18842131</id><snippet>create table customers (ID integer, Title text, Forename text, Surname text, Postcode text, Addr_Line1 text, Addr_Line2 text, Town text, County text, Home_Phone text, Mobile text, Comments text);
</snippet></ROW><ROW><id>18842131</id><snippet>.separator ","
</snippet></ROW><ROW><id>18842131</id><snippet>.import filename.ext table_name</snippet></ROW><ROW><id>18842131</id><snippet>.import cust.csv customers
</snippet></ROW><ROW><id>18842131</id><snippet>select count(*) from customers;
</snippet></ROW><ROW><id>18842131</id><snippet>create index cust_surname on customers(surname);
</snippet></ROW><ROW><id>18842131</id><snippet>.exit</snippet></ROW><ROW><id>18842131</id><snippet>.help</snippet></ROW><ROW><id>18842522</id><snippet>from xml.etree.ElementTree import iterparse, XMLParser
import htmlentitydefs

class CustomEntity:
    def __getitem__(self, key):
        if key == 'umml':
            key = 'uuml' # Fix invalid entity
        return unichr(htmlentitydefs.name2codepoint[key])

parser = XMLParser()
parser.parser.UseForeignDTD(True)
parser.entity = CustomEntity()

for (event, node) in iterparse('dblp.xml', events=['start'], parser=parser):
    print node.tag
    node.clear()
</snippet></ROW><ROW><id>18842522</id><snippet>from xml.etree.ElementTree import iterparse, XMLParser
import htmlentitydefs

parser = XMLParser()
parser.parser.UseForeignDTD(True)
parser.entity = {'umml': unichr(htmlentitydefs.name2codepoint['uuml'])}

for (event, node) in iterparse('dblp.xml', events=['start'], parser=parser):
    print node.tag
    node.clear()
</snippet></ROW><ROW><id>18842552</id><snippet>ascii</snippet></ROW><ROW><id>18842552</id><snippet>&gt;&gt;&gt; base64.b64encode(u'America\u2019s')
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
  File "C:\Python27\lib\base64.py", line 53, in b64encode
    encoded = binascii.b2a_base64(s)[:-1]
UnicodeEncodeError: 'ascii' codec can't encode character u'\u2019' in position 7: ordinal not in range(128)
</snippet></ROW><ROW><id>18842552</id><snippet>&gt;&gt;&gt; base64.b64encode(u'America\u2019s'.encode('utf8'))
'QW1lcmljYeKAmXM='
</snippet></ROW><ROW><id>18842890</id><snippet>&gt;&gt;&gt; def foo(bar, baz=None):
...     return bar
... 
&gt;&gt;&gt; foo("bob"
... "bill")
'bobbill'
</snippet></ROW><ROW><id>18842890</id><snippet>"bill"</snippet></ROW><ROW><id>18842890</id><snippet>baz</snippet></ROW><ROW><id>18842913</id><snippet>from subprocess import Popen,PIPE

# Example with output only
p = Popen(["echo", "This is a test"], stdout=PIPE)
out, err = p.communicate()
print out.rstrip()

# Example with input and output
p = Popen("./TestProgram", stdin=PIPE, stdout=PIPE)
out, err = p.communicate("This is the input\n")
print out.rstrip()
</snippet></ROW><ROW><id>18842913</id><snippet>TestProgram</snippet></ROW><ROW><id>18842913</id><snippet>stdin</snippet></ROW><ROW><id>18842913</id><snippet>stdout</snippet></ROW><ROW><id>18842913</id><snippet>.rstrip()</snippet></ROW><ROW><id>18843214</id><snippet>class myObject(QObject):
  somethingChanged= pyqtSignal(str)

  def __init__(self):
    super(myObject).__init__(self)
    # Here we indicate we will try and catch the signal.  
    self.somethingChanged.connect(self.updateText)

  def processData(self):
    for i in data:
      ...
      # Inside the loop you can fire off a signal.
      object.emit("somethingChanged")
      ...

  def updateText(self,text):
      textedit.setText(text) 
</snippet></ROW><ROW><id>18843225</id><snippet>modlines = []
with open(fname) as f:
    for line in f:
        if 'AC_CONFIG_FILES' in line:
            modlines.append(rstring + '\n')
        else:
            modlines.append(line)

with open(fname, 'w') as out:
    for line in modlines:
        out.write(line)
</snippet></ROW><ROW><id>18843553</id><snippet>ConcurrentLogHandler</snippet></ROW><ROW><id>18843553</id><snippet>SysLogHandler</snippet></ROW><ROW><id>18843553</id><snippet>NTEventLogHandler</snippet></ROW><ROW><id>18843553</id><snippet>SocketHandler</snippet></ROW><ROW><id>18843553</id><snippet>QueueHandler</snippet></ROW><ROW><id>18843553</id><snippet>multiprocessing.Queue</snippet></ROW><ROW><id>18843631</id><snippet>with open("C:\Python27\Scripts\wordlist.txt", "r") as textfile:
    result = textfile.read.split()
</snippet></ROW><ROW><id>18843714</id><snippet>y=mx+b</snippet></ROW><ROW><id>18843714</id><snippet>m</snippet></ROW><ROW><id>18843714</id><snippet>dx</snippet></ROW><ROW><id>18843714</id><snippet>dy</snippet></ROW><ROW><id>18843714</id><snippet>// Given
point_b = (point_a[0]+dx,point_a[1]+dy)
other_possible_point_b = (point_a[0]-dx,point_a[1]-dy)
dy = m*dx
x**2 + y**2 = distance

// Calculations
dx**2 + (m*dx)**2 = distance
(m**2+1)(dx**2) = distance
dx = sqrt(distance/(m**2+1))
dy = m*sqrt(distance/(m**2+1))
</snippet></ROW><ROW><id>18843714</id><snippet>from math import sqrt

point_b = (point_a[0]+dx(distance,m), point_a[1]+dy(distance,m))
other_possible_point_b = (point_a[0]-dx(distance,m), point_a[1]-dy(distance,m)) # going the other way

def dy(distance, m):
    return m*dx(distance, m)

def dx(distance, m):
    return sqrt(distance/(m**2+1))
</snippet></ROW><ROW><id>18843787</id><snippet>import base64

def sender_decode(sender):
    parsed_string = sender.split("?")

    decoded = base64.b64decode(parsed_string[3]).decode(parsed_string[1], "ignore")
    return decoded

sender_decode("=?utf-8?b?55+l5LmO?=")
</snippet></ROW><ROW><id>18844094</id><snippet>f['message'].errors</snippet></ROW><ROW><id>18844094</id><snippet>BoundField.errors</snippet></ROW><ROW><id>18844094</id><snippet>BoundField.errors</snippet></ROW><ROW><id>18844094</id><snippet>@property
def errors(self):
    """
    Returns an ErrorList for this field. Returns an empty ErrorList
    if there are none.
    """
    return self.form.errors.get(self.name, self.form.error_class())
</snippet></ROW><ROW><id>18844094</id><snippet>BoundField.error</snippet></ROW><ROW><id>18844094</id><snippet>&gt;&gt;&gt; f = ContactForm({'subject': 'Hello', 'message': 'world!'})
&gt;&gt;&gt; f.errors
{}
&gt;&gt;&gt; f.errors['message']
KeyError
&gt;&gt;&gt; f['message'].errors
&gt;&gt;&gt; []
</snippet></ROW><ROW><id>18844094</id><snippet>{% for field in form %}
    {{ field }}
    {{ field.errors }}
{% endfor %}
</snippet></ROW><ROW><id>18844198</id><snippet>InteractiveInterpreter</snippet></ROW><ROW><id>18844198</id><snippet>runsource()</snippet></ROW><ROW><id>18844399</id><snippet>+------------------------------+
|   s        stretch        s  |
|   t   +-------+-------+   t  |
|   r   | label | input |   r  |
|   e   +-------+-------+   e  |
|   t   | label | input |   t  |
|   c   +-------+-------+   c  |
|   h        stretch        h  |
+------------------------------+
</snippet></ROW><ROW><id>18844399</id><snippet>password_layout = QtGui.QGridLayout()
# Set the stretch
password_layout.setColumnStretch(0, 1)
password_layout.setColumnStretch(3, 1)
password_layout.setRowStretch(0, 1)
password_layout.setRowStretch(3, 1)
# Add widgets
password_layout.addWidget(username_label, 1, 1)
password_layout.addWidget(password_label, 2, 1)
password_layout.addWidget(_username, 1, 2)
password_layout.addWidget(_password, 2, 2)
</snippet></ROW><ROW><id>18844719</id><snippet>get_rect</snippet></ROW><ROW><id>18844719</id><snippet>Surface</snippet></ROW><ROW><id>18844719</id><snippet>get_rect(**kwargs) -&gt; Rect</snippet></ROW><ROW><id>18844719</id><snippet>Surface</snippet></ROW><ROW><id>18844719</id><snippet>Surface</snippet></ROW><ROW><id>18844719</id><snippet>Rect</snippet></ROW><ROW><id>18844719</id><snippet>0</snippet></ROW><ROW><id>18844719</id><snippet>0</snippet></ROW><ROW><id>18844719</id><snippet>x</snippet></ROW><ROW><id>18844719</id><snippet>y</snippet></ROW><ROW><id>18844719</id><snippet>Rect</snippet></ROW><ROW><id>18844719</id><snippet>x</snippet></ROW><ROW><id>18844719</id><snippet>y</snippet></ROW><ROW><id>18844719</id><snippet>x += mx</snippet></ROW><ROW><id>18844719</id><snippet>y += my</snippet></ROW><ROW><id>18844719</id><snippet>Rect</snippet></ROW><ROW><id>18844719</id><snippet>pos.move_ip(mx, my)</snippet></ROW><ROW><id>18844719</id><snippet>pos</snippet></ROW><ROW><id>18844719</id><snippet>Rect</snippet></ROW><ROW><id>18844719</id><snippet>Rect</snippet></ROW><ROW><id>18844719</id><snippet>Rect</snippet></ROW><ROW><id>18844719</id><snippet>your_surface.get_rect(x=x, y=y)</snippet></ROW><ROW><id>18844719</id><snippet>Sprite</snippet></ROW><ROW><id>18844719</id><snippet>Surface</snippet></ROW><ROW><id>18844719</id><snippet>Rect</snippet></ROW><ROW><id>18844922</id><snippet>def show_entries():
    entries = g.user.entries
    return render_template('show_entries.html', 
                           entries=entries)

def new_entry():
    form = EntryForm()
    if form.validate_on_submit():
        newEntry = Entry(g.user, form.time.data)
        db_session.add(newEntry)
        db_session.commit()
        flash('New entry was successfully posted')
        return redirect(url_for('show_entries'))
    return render_template('show_new_entry_form.html', 
                           entryForm=form)
</snippet></ROW><ROW><id>18844979</id><snippet>and</snippet></ROW><ROW><id>18844979</id><snippet>True</snippet></ROW><ROW><id>18845325</id><snippet>import somemodule
somemodule.aFunction = aFunction
</snippet></ROW><ROW><id>18845325</id><snippet>foo</snippet></ROW><ROW><id>18845325</id><snippet>somemodule.aFunction</snippet></ROW><ROW><id>18845325</id><snippet>mock</snippet></ROW><ROW><id>18845325</id><snippet>patch</snippet></ROW><ROW><id>18845483</id><snippet>&gt;&gt;&gt; mean = mx.mean(axis=0)
&gt;&gt;&gt; mean[mean.mask] = mx.fill_value
&gt;&gt;&gt; mean
masked_array(data = [0.0 1.5 -9999.0 3.5 4.5],
             mask = [False False False False False],
       fill_value = 1e+20)
</snippet></ROW><ROW><id>18846023</id><snippet>six</snippet></ROW><ROW><id>18846156</id><snippet>c = round(((a + b) - abs(a - b)) / 2)</snippet></ROW><ROW><id>18846212</id><snippet>my_objects = None

def update(foo):
    globals()['my_objects'] = [foo, foo+1]
</snippet></ROW><ROW><id>18846212</id><snippet>_config = __import__("test")
_config.update(2) 
print _config.my_objects
</snippet></ROW><ROW><id>18846212</id><snippet>__builtin__</snippet></ROW><ROW><id>18846310</id><snippet>logging._levelNames</snippet></ROW><ROW><id>18846310</id><snippet>logging.addLevelName</snippet></ROW><ROW><id>18846315</id><snippet>request.POST</snippet></ROW><ROW><id>18846315</id><snippet>request.GET</snippet></ROW><ROW><id>18846315</id><snippet>HttpRequest</snippet></ROW><ROW><id>18846915</id><snippet>.. currentmodule::</snippet></ROW><ROW><id>18846915</id><snippet>~</snippet></ROW><ROW><id>18846915</id><snippet>:func:`~mymodule.mysubmodule.MyClass.myfunc`</snippet></ROW><ROW><id>18846971</id><snippet>import subprocess
result = subprocess.check_output(['ping', '127.0.0.1'])
with open("new.txt", "a") as myfile:
    myfile.write(result)
</snippet></ROW><ROW><id>18847287</id><snippet>{{ forloop.counter }}</snippet></ROW><ROW><id>18847340</id><snippet># TODO
# article.publish_date = config.publishDateExtractor.extract(doc)
</snippet></ROW><ROW><id>18847340</id><snippet>set_publishdate_extractor</snippet></ROW><ROW><id>18847427</id><snippet>ws.Cells(row,col).value = datetime.datetime.now().strftime("%d/%m/%Y")
</snippet></ROW><ROW><id>18847427</id><snippet>strftime</snippet></ROW><ROW><id>18847558</id><snippet>(\d{4})</snippet></ROW><ROW><id>18847558</id><snippet>(\d{4})</snippet></ROW><ROW><id>18847558</id><snippet>(\d{3})</snippet></ROW><ROW><id>18847723</id><snippet>Bar2</snippet></ROW><ROW><id>18847723</id><snippet>Bar2().bar</snippet></ROW><ROW><id>18847723</id><snippet>Foo</snippet></ROW><ROW><id>18847723</id><snippet>Bar2().bar.im_self</snippet></ROW><ROW><id>18847723</id><snippet>Bar2</snippet></ROW><ROW><id>18847723</id><snippet>Bar</snippet></ROW><ROW><id>18847723</id><snippet>Bar1</snippet></ROW><ROW><id>18847723</id><snippet>Bar2</snippet></ROW><ROW><id>18847723</id><snippet>foo</snippet></ROW><ROW><id>18847847</id><snippet>print myDict[ u'Command']
</snippet></ROW><ROW><id>18848662</id><snippet>__bool__</snippet></ROW><ROW><id>18848662</id><snippet>class V:
    """Defines a 2D vector"""
    def __init__(self,x,y):
        self.x = x
        self.y = y

    def __bool__(self):
        return self.x != 0 or self.y != 0

    # Python 2 compatibility
    __nonzero__ = __bool__
</snippet></ROW><ROW><id>18848945</id><snippet>launch.c</snippet></ROW><ROW><id>18848945</id><snippet>/path/to/pyinstaller/sources/common</snippet></ROW><ROW><id>18848945</id><snippet>int getTempPath(char *buff)</snippet></ROW><ROW><id>18848945</id><snippet>static const char *envname[]</snippet></ROW><ROW><id>18848945</id><snippet>for</snippet></ROW><ROW><id>18848945</id><snippet>static const char *dirname[]</snippet></ROW><ROW><id>18848945</id><snippet>int getTempPath(char *buff)
{
        static const char *dirname[] = {
                "/usr/local/src/temp", "/usr/local/src", "/usr/src", 0
        };
        int i;
        char *p;
        for ( i=0; dirname[i]; i++ ) {
                strcpy(buff, dirname[i]);
                if (testTempPath(buff))
                        return 1;
        }
    return 0;
}
</snippet></ROW><ROW><id>18848945</id><snippet>sources</snippet></ROW><ROW><id>18848945</id><snippet>python ./waf configure --no-lsb build install</snippet></ROW><ROW><id>18848945</id><snippet>python-devel</snippet></ROW><ROW><id>18848945</id><snippet>yum install python-devel -y</snippet></ROW><ROW><id>18848945</id><snippet>Python.h isn't found</snippet></ROW><ROW><id>18849284</id><snippet>shift</snippet></ROW><ROW><id>18849284</id><snippet>shift</snippet></ROW><ROW><id>18849284</id><snippet>shift=shift+1</snippet></ROW><ROW><id>18849284</id><snippet>if ; elif</snippet></ROW><ROW><id>18849284</id><snippet>decryptedword = ""</snippet></ROW><ROW><id>18849284</id><snippet>   num1=0
   shift=0


  print("Brute force")

  question=input(print("Please enter something to decrypt: "))
  while num1&lt;10 and shift &lt;10 :
      decryptedword = ""

      for character in question:
          newchar = ord(character)
          newchar = newchar - shift
          if newchar &lt; 32:
             newchar = newchar + 95
          elif newchar &gt; 126:
             newchar = newchar - 95
          decryptedword = decryptedword + chr(newchar)

      print(num1,"decrypted word: ",decryptedword)
      num1=num1+1
      shift=shift+1
</snippet></ROW><ROW><id>18849295</id><snippet>Projects.objects.filter(pk=kwargs['pk']).update(student_c=F('student_c') + 1)
</snippet></ROW><ROW><id>18849295</id><snippet>project.student_c = project.student_c + 1
</snippet></ROW><ROW><id>18849329</id><snippet>#!/usr/bin/env python

import sys, time

while True:
  print "foo"
  sys.stdout.flush()
  time.sleep(2)
</snippet></ROW><ROW><id>18849403</id><snippet>f = open(myPath + fName, 'r')
f.read()
</snippet></ROW><ROW><id>18849403</id><snippet>f = open(myPath + fName, 'r')
while f.read(1024 * 1024):
    pass
</snippet></ROW><ROW><id>18849734</id><snippet>levels = [0.0, 1.0, 2.0]
a = np.random.choice(levels, size=10)
a_array = np.vstack((a, a)).T

b = np.random.choice(levels, size=10)
b_array = np.vstack((b, b)).T

ax = plt.subplot(121)
CS = ax.contourf(a_array, 2, level=levels, colors=('r', 'g', 'b'))

ax = plt.subplot(122)
CS = ax.contourf(b_array, 2, level=levels, colors=('r', 'g', 'b'))

Cbar = plt.colorbar(CS)

Cbar.set_ticks(levels)
Cbar.set_ticklabels(["series 1", "series 2", "series 3"])
</snippet></ROW><ROW><id>18849734</id><snippet>pcolor</snippet></ROW><ROW><id>18850194</id><snippet>from b import foo</snippet></ROW><ROW><id>18850194</id><snippet>import b
foo = b.foo
del b
</snippet></ROW><ROW><id>18850194</id><snippet>foo</snippet></ROW><ROW><id>18850194</id><snippet>b.py</snippet></ROW><ROW><id>18850194</id><snippet>foo</snippet></ROW><ROW><id>18850194</id><snippet>parse.parse_args()</snippet></ROW><ROW><id>18850194</id><snippet>argparse</snippet></ROW><ROW><id>18850194</id><snippet>a.py</snippet></ROW><ROW><id>18850194</id><snippet>ArgumentParser</snippet></ROW><ROW><id>18850194</id><snippet>parse_args</snippet></ROW><ROW><id>18850194</id><snippet>args</snippet></ROW><ROW><id>18850194</id><snippet># file args.py
import argparse
parser = argparse.ArgumentParser()
parser.add_argument('--common')
...
</snippet></ROW><ROW><id>18850194</id><snippet>a.py</snippet></ROW><ROW><id>18850194</id><snippet>b.py</snippet></ROW><ROW><id>18850194</id><snippet># file a.py
from b import foo
import args
args.parser.add_argument('-a')

# only actually parse args if we are invoked as main script; mere `import a`
# shouldn't run the parser
if __name__ == '__main__':
    args = parser.parse_args()
    ...

# file b.py
import args
args.parser.add_argument('-b')

foo = 1
</snippet></ROW><ROW><id>18850228</id><snippet>#captcha/views.py

def captcha_image(request, key, scale=1):
    #function goes here
</snippet></ROW><ROW><id>18850228</id><snippet>scale</snippet></ROW><ROW><id>18850228</id><snippet>urlpatterns = patterns('captcha.views',
    url(r'image/(?P&lt;key&gt;\w+)/$', 'captcha_image', name='captcha-image', kwargs={'scale': 1}),
</snippet></ROW><ROW><id>18850228</id><snippet>scale</snippet></ROW><ROW><id>18850228</id><snippet>#captcha/views.captcha_image
...
size = font.getsize(text)
size = (size[0] * 2, int(size[1] * 1.2))
...
</snippet></ROW><ROW><id>18850228</id><snippet>captcha_image</snippet></ROW><ROW><id>18850512</id><snippet>ls -l | more</snippet></ROW><ROW><id>18850512</id><snippet>more</snippet></ROW><ROW><id>18850512</id><snippet>stdbuf</snippet></ROW><ROW><id>18850512</id><snippet>stdbuf -i0 -e0 -o0 tail -f /var/tmp/event.log | python /var/tmp/event.py</snippet></ROW><ROW><id>18850677</id><snippet>return barcode(code, writer)
</snippet></ROW><ROW><id>18850677</id><snippet>code</snippet></ROW><ROW><id>18850677</id><snippet>writer</snippet></ROW><ROW><id>18850677</id><snippet>def __init__(self, code, writer=None, add_checksum=True):
</snippet></ROW><ROW><id>18851112</id><snippet>import fileinput
import sys
import re

screen = sys.stdout
def regFind(regx, sub_text, filename):
    for line in fileinput.input([filename],
            inplace=True,
            backup='.bak'   # creates a backup of the original file
            ):
        match = regx.search(line)
        if match:
            line = regx.sub(sub_text, line)
        sys.stdout.write(line)
        yield line

# regex = re.compile(r'foo')    
for line in regFind(regex, sub_text, 'file.txt'):
    screen.write(line+'\n')
</snippet></ROW><ROW><id>18851112</id><snippet>fileinput</snippet></ROW><ROW><id>18851112</id><snippet>sys.stdout</snippet></ROW><ROW><id>18851112</id><snippet>sys.stdout</snippet></ROW><ROW><id>18851112</id><snippet>screen</snippet></ROW><ROW><id>18851112</id><snippet>screen.write</snippet></ROW><ROW><id>18851112</id><snippet>print</snippet></ROW><ROW><id>18851384</id><snippet>&gt;&gt;&gt; d = {}
&gt;&gt;&gt; d['a'] = {'ra':7, 'dec':8}
&gt;&gt;&gt; d['b'] = {'ra':3, 'dec':5}
&gt;&gt;&gt; d['a']['dist'] = 12
&gt;&gt;&gt; d
{'a': {'dec': 8, 'dist': 12, 'ra': 7}, 'b': {'dec': 5, 'ra': 3}}
</snippet></ROW><ROW><id>18851384</id><snippet>&gt;&gt;&gt; d = {}
&gt;&gt;&gt; d['a'] = {'ra':7, 'dec':8}
&gt;&gt;&gt; d['b'] = {'ra':3, 'dec':5}
&gt;&gt;&gt; d['a'].update({'dist': 12})
&gt;&gt;&gt; d
{'a': {'dec': 8, 'dist': 12, 'ra': 7}, 'b': {'dec': 5, 'ra': 3}}
</snippet></ROW><ROW><id>18851384</id><snippet>dict</snippet></ROW><ROW><id>18851384</id><snippet>dict</snippet></ROW><ROW><id>18851384</id><snippet>&gt;&gt;&gt; dict(one=1)
{'one': 1}
&gt;&gt;&gt; dict = {}
&gt;&gt;&gt; dict(one=1)
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
TypeError: 'dict' object is not callable
</snippet></ROW><ROW><id>18851575</id><snippet>&gt;&gt;&gt; x = {"foo":"bar"}
&gt;&gt;&gt; a = x
&gt;&gt;&gt; x = {}
&gt;&gt;&gt; print a
{'foo': 'bar'}
</snippet></ROW><ROW><id>18851575</id><snippet>&gt;&gt;&gt; x = {"foo": "bar"}
&gt;&gt;&gt; a = x
&gt;&gt;&gt; x.clear()
&gt;&gt;&gt; print a
{}
</snippet></ROW><ROW><id>18851785</id><snippet>&gt;&gt;&gt; from numpy import array
&gt;&gt;&gt; a64 = array([1e-10],dtype="float64")[0]
&gt;&gt;&gt; a32 = array([1e-10],dtype="float32")[0]
&gt;&gt;&gt; type(a32)
&lt;type 'numpy.float32'&gt;
&gt;&gt;&gt; type(a64)
&lt;type 'numpy.float64'&gt;
</snippet></ROW><ROW><id>18851785</id><snippet>&gt;&gt;&gt; print a32
1e-10
&gt;&gt;&gt; print a64
1e-10
</snippet></ROW><ROW><id>18851785</id><snippet>&gt;&gt;&gt; print('{0:e}'.format(a64))
1.000000e-10
&gt;&gt;&gt; print('{0:e}'.format(a32))
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
ValueError: Unknown format code 'e' for object of type 'str'
</snippet></ROW><ROW><id>18851785</id><snippet>&gt;&gt;&gt; from numpy import array
&gt;&gt;&gt; print "{:e}".format(array([1e-10],dtype="float64")[0])
1.000000e-10
&gt;&gt;&gt; print "{:e}".format(array([1e-10],dtype="float32")[0])
1.000000e-10
</snippet></ROW><ROW><id>18851965</id><snippet>&gt;&gt;&gt; from django.forms.formsets import formset_factory
&gt;&gt;&gt; ImageFormSet = formset_factory(ImageForm)
</snippet></ROW><ROW><id>18852207</id><snippet>#!/usr/bin/env python
# -*- coding: utf-8 -*-

import re

pcigar = "80H236M7I106M2885H"

insstart = 0
insend = 0
temp = 0

for num1, i_or_d in re.findall('(\d+)([HISDM])', pcigar):
    if i_or_d in 'S':
        insstart = insstart + temp
        insend += int(num1)
        temp += insend
    elif i_or_d in 'H':
        insstart = insstart + temp
        insend += int(num1)
        temp += insend
    elif i_or_d in 'M':
        insstart += int(num1)
        insend += int(num1)
    elif i_or_d in 'I':
        insstart += int(num1)
        insend += int(num1)

    if i_or_d in 'H' or i_or_d in 'S':

        print insstart, insend, pcigar
</snippet></ROW><ROW><id>18852296</id><snippet>p</snippet></ROW><ROW><id>18852296</id><snippet>#pseudocode
p_tags = []
for row in csv.read_lines:
   result = html_parse(row)
   p_tags.append(result)
</snippet></ROW><ROW><id>18852583</id><snippet>food</snippet></ROW><ROW><id>18852583</id><snippet>(10,'Burger')</snippet></ROW><ROW><id>18852583</id><snippet>(10,'Chess')</snippet></ROW><ROW><id>18852583</id><snippet>import random
credit=20
food=[(10, 'Lays'), (10,'Pepsi'), (10,'Burger')]
toys=[(10, 'Car'), (10,'Train'), (10,'Chess')]
ranf=random.choice(food)
rant=random.choice(toys)
while int(ranf[0])+int(rant[0])!=credit:
    ranf=random.choice(food)
    rant=random.choice(toys)

print(ranf)
print(rant)
</snippet></ROW><ROW><id>18853314</id><snippet>shInfo.write('G3','=COUNTA(Analyse!C:C)-1',information)
shInfo.write('G5','=COUNTIF(Analyse!D:D,"To change")',information)
</snippet></ROW><ROW><id>18853314</id><snippet>COUNTIF()</snippet></ROW><ROW><id>18853314</id><snippet>;</snippet></ROW><ROW><id>18853493</id><snippet>#!/usr/bin/env python

import sys

def main(args):
    if (len(args) == 2):
        print "Thanks for passing ", args[1]
    else:
        print "Oops."

if __name__ == '__main__':
    main(sys.argv)
</snippet></ROW><ROW><id>18853493</id><snippet>import useArg
useArg.main(['foo', 'bar'])
</snippet></ROW><ROW><id>18853493</id><snippet>import sys

def main(arg):
    print(arg)

if __name__ == '__main__':
    if len(sys.argv) == 2:
        main(sys.argv[1])
    else:
        main('Oops') 
</snippet></ROW><ROW><id>18853493</id><snippet>if __name__ == '__main__':</snippet></ROW><ROW><id>18853632</id><snippet>map = 6</snippet></ROW><ROW><id>18853632</id><snippet>max = 6</snippet></ROW><ROW><id>18853632</id><snippet>map</snippet></ROW><ROW><id>18853632</id><snippet>max</snippet></ROW><ROW><id>18853967</id><snippet>import re

q1 = r'^Organism.*('
q2 = raw_input("Enter organism (e.g., moth)")
q3 = r').*&lt;/td&gt;'


s="Organism: moth &lt;/td&gt;"

regex = re.compile(q1+q2+q3)
test = re.search(regex,s).group(1)

print "test", test
</snippet></ROW><ROW><id>18854202</id><snippet>def startcave():
    print "You awake in an dark cave. You can't remember your past, but you need to find a way out. You feel hungry, although tired."
    print "Would you like to delve deeper via a cave passage, or look for a way out in this room?"
    answer = raw_input("Do you go -Deeper-, -Search-, or -Rest-?").lower()
    if answer == "Deeper" or answer == "deeper":
        lowcave1()
    elif answer == "Search" or answer == "search":
        searchcave()
    elif answer == "Rest" or answer == "rest":
        caverest()
    else:
        print "You must either say -Deeper- or -Search-"
        startcave()

def lowcave1():
    print "You go deeper into the cave, walking down a steadily reclining corridor for some time, you have lost track of time."
    print "There is a large ledge before you. You can jump down, but there is no way back up."
    print "The cave may be dangerous, and you could end up being trapped. Do you turn back?"
    answer = raw_input("Do you -Jump- or -Turn back-?").lower()
    if answer == "Jump" or answer == "jump":
        lowcave2()
    elif answer == "Turn back":
        caverest2()

startcave()

lowcave1()
</snippet></ROW><ROW><id>18854223</id><snippet>....    
not_com_word = ''

def guess():
    global not_com_word
....
</snippet></ROW><ROW><id>18854452</id><snippet>x</snippet></ROW><ROW><id>18854452</id><snippet>&gt;&gt;&gt; p = [1, 2, 3, 4]
&gt;&gt;&gt; v = [[x] for x in p]
&gt;&gt;&gt; v
[[1], [2], [3], [4]]
</snippet></ROW><ROW><id>18854471</id><snippet>math</snippet></ROW><ROW><id>18854471</id><snippet>cmath</snippet></ROW><ROW><id>18854471</id><snippet>&gt;&gt;&gt; import math
&gt;&gt;&gt; math.sqrt(4)
2
&gt;&gt;&gt; import cmath
&gt;&gt;&gt; cmath.sqrt(4 + 3j)
(2.1213203435596424+0.7071067811865476j)
</snippet></ROW><ROW><id>18854471</id><snippet>math</snippet></ROW><ROW><id>18854471</id><snippet>cmath</snippet></ROW><ROW><id>18854471</id><snippet>cmath</snippet></ROW><ROW><id>18854766</id><snippet>while</snippet></ROW><ROW><id>18854766</id><snippet>for</snippet></ROW><ROW><id>18854766</id><snippet>while</snippet></ROW><ROW><id>18854766</id><snippet>True</snippet></ROW><ROW><id>18854766</id><snippet>for</snippet></ROW><ROW><id>18854766</id><snippet>def main():
    done = False
    while not done:
        limit = ask_limit()
        speed = ask_speed()
        findfine(speed, limit)

        done = raw_input("Done? ") == "yes"
</snippet></ROW><ROW><id>18854766</id><snippet>raw_input</snippet></ROW><ROW><id>18854817</id><snippet>def chunkstring(string, length):
    return (string[0+i:length+i] for i in range(0, len(string), length))
</snippet></ROW><ROW><id>18854817</id><snippet>for i in chunkstring(s,n):</snippet></ROW><ROW><id>18854817</id><snippet>list(generator)</snippet></ROW><ROW><id>18854817</id><snippet>&gt;&gt;&gt; list(chunkstring("abcdefghijklmnopqrstuvwxyz", 5))
['abcde', 'fghij', 'klmno', 'pqrst', 'uvwxy', 'z']
</snippet></ROW><ROW><id>18854817</id><snippet>text = """This is the first line.
           This is the second line.
           The line below is true.
           The line above is false.
           A short line.
           A very very very very very very very very very long line.
           A self-referential line.
           The last line.
        """

lines = (i.strip() for i in text.splitlines())

for line in lines:
    for chunk in chunkstring(line, 16):
        print(chunk)
</snippet></ROW><ROW><id>18854819</id><snippet>(.*)</snippet></ROW><ROW><id>18854819</id><snippet>(?P&lt;name&gt;.*)</snippet></ROW><ROW><id>18854819</id><snippet>groupdict()</snippet></ROW><ROW><id>18854819</id><snippet>Match</snippet></ROW><ROW><id>18854819</id><snippet>key_mask</snippet></ROW><ROW><id>18854819</id><snippet>re.sub</snippet></ROW><ROW><id>18854819</id><snippet>repl</snippet></ROW><ROW><id>18854819</id><snippet>import re

def to_named_group(match):
    return '(?P&lt;{}&gt;.*)'.format(re.escape(match.group(0)[1:-1]))

def make_regex(key_mask):
    return re.compile(re.sub(r'\{[^}]+\}', to_named_group, key_mask))

def find_matches(key_mask, text):
    return make_regex(key_mask).match(text).groupdict()
</snippet></ROW><ROW><id>18854819</id><snippet>In [10]: find_matches('foo/{one}/bar/{two}/hello/{world}', 'foo/test/bar/something/hello/xxx')
Out[10]: {'one': 'test', 'two': 'something', 'world': 'xxx'}
</snippet></ROW><ROW><id>18854819</id><snippet>to_named_group</snippet></ROW><ROW><id>18854819</id><snippet>import re
from functools import partial

def to_named_groups(match, regexes):
    group_name = re.escape(match.group(0)[1:-1])
    group_regex = regexes.get(group_name, '.*')
    return '(?P&lt;{}&gt;{})'.format(group_name, group_regex)

def make_regex(key_mask, regexes):
    regex = re.sub(r'\{[^}]+\}', partial(to_named_groups, regexes=regexes),
                   key_mask)
    return re.compile(regex)

def find_matches(key_mask, text, regexes=None):
    if regexes is None:
        regexes = {}
    try:
        return make_regex(key_mask, regexes).search(text).groupdict()
    except AttributeError:
        return None
</snippet></ROW><ROW><id>18855277</id><snippet>from numpy.core.umath_tests import inner1d

m, n = 1000, 500

a = np.random.rand(m, n)
b = np.random.rand(n, m)

# They all should give the same result
print np.trace(a.dot(b))
print np.sum(a*b.T)
print np.sum(inner1d(a, b.T))

%timeit np.trace(a.dot(b))
10 loops, best of 3: 34.7 ms per loop

%timeit np.sum(a*b.T)
100 loops, best of 3: 4.85 ms per loop

%timeit np.sum(inner1d(a, b.T))
1000 loops, best of 3: 1.83 ms per loop
</snippet></ROW><ROW><id>18855277</id><snippet>np.einsum</snippet></ROW><ROW><id>18855277</id><snippet># Will print the same as the others:
print np.einsum('ij,ji-&gt;', a, b)
</snippet></ROW><ROW><id>18855277</id><snippet>inner1d</snippet></ROW><ROW><id>18855277</id><snippet>%timeit np.einsum('ij,ji-&gt;', a, b)
100 loops, best of 3: 1.91 ms per loop
</snippet></ROW><ROW><id>18855710</id><snippet>str</snippet></ROW><ROW><id>18855710</id><snippet>toLowerCase</snippet></ROW><ROW><id>18855710</id><snippet>lower</snippet></ROW><ROW><id>18855710</id><snippet>&gt;&gt;&gt; s = 'some string'
&gt;&gt;&gt; dir(s)
['__add__', '__class__', '__contains__', '__delattr__', '__dir__', '__doc__', '__eq__', '__format__', '__ge__', '__getattribute__'
, '__getitem__', '__getnewargs__', '__gt__', '__hash__', '__init__', '__iter__', '__le__', '__len__', '__lt__', '__mod__', '__mul_
_', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__rmod__', '__rmul__', '__setattr__', '__sizeof__', '__str__'
, '__subclasshook__', 'capitalize', 'casefold', 'center', 'count', 'encode', 'endswith', 'expandtabs', 'find', 'format', 'format_m
ap', 'index', 'isalnum', 'isalpha', 'isdecimal', 'isdigit', 'isidentifier', 'islower', 'isnumeric', 'isprintable', 'isspace', 'ist
itle', 'isupper', 'join', 'ljust', 'lower', 'lstrip', 'maketrans', 'partition', 'replace', 'rfind', 'rindex', 'rjust', 'rpartition
', 'rsplit', 'rstrip', 'split', 'splitlines', 'startswith', 'strip', 'swapcase', 'title', 'translate', 'upper', 'zfill']
</snippet></ROW><ROW><id>18855710</id><snippet>toLowerCase</snippet></ROW><ROW><id>18855710</id><snippet>lower</snippet></ROW><ROW><id>18855712</id><snippet>from pymongo import MongoClient

client = MongoClient()
db = client.test

# print collection statistics
print db.command("collstats", "events")

# print database statistics
print db.command("dbstats")
</snippet></ROW><ROW><id>18855806</id><snippet>SELECT MIN(t1.ID + 1) AS nextID
FROM tablename t1 LEFT JOIN tablename t2
ON t1.ID + 1 = t2.ID
WHERE t2.ID IS NULL
</snippet></ROW><ROW><id>18855806</id><snippet>with_statement</snippet></ROW><ROW><id>18855806</id><snippet>execute</snippet></ROW><ROW><id>18856092</id><snippet>Popen</snippet></ROW><ROW><id>18856092</id><snippet>p = sub.Popen(['/home/me/exec', '--arg', 'arg1'], stdout=sub.PIPE)
</snippet></ROW><ROW><id>18856152</id><snippet>print [[add_up(a, b) for b in d] for a in e]  # prints [[2, 3, 4], [3, 4, 5]]
</snippet></ROW><ROW><id>18856167</id><snippet>setpassword</snippet></ROW><ROW><id>18856167</id><snippet>rar = rarfile.RarFile(source_filename)
if rar.needs_password():
    rar.setpassword('') # whatever the password is

# Rest of code here
</snippet></ROW><ROW><id>18856285</id><snippet>&lt;a href="/{{each}}" target="_blank"&gt;{{each}}&lt;/a&gt;
</snippet></ROW><ROW><id>18856285</id><snippet>files = [os.path.join(dir, f) for f in files]
</snippet></ROW><ROW><id>18856389</id><snippet>class Unit():
    def __init__(self):
        self.last = pygame.time.get_ticks()
        self.cooldown = 300    

    def fire(self):
        # fire gun, only if cooldown has been 0.3 seconds since last
        now = pygame.time.get_ticks()
        if now - self.last &gt;= self.cooldown:
            self.last = now
            spawn_bullet()
</snippet></ROW><ROW><id>18856421</id><snippet>len(data) - numpy.count_nonzero(data)
</snippet></ROW><ROW><id>18856947</id><snippet>login</snippet></ROW><ROW><id>18856947</id><snippet>https://www.linkedin.com/uas/oauth2/authorization</snippet></ROW><ROW><id>18856947</id><snippet>loginsuccess</snippet></ROW><ROW><id>18856947</id><snippet>https://api.linkedin.com/uas/oauth/accessToken</snippet></ROW><ROW><id>18856947</id><snippet>access_token_url</snippet></ROW><ROW><id>18856947</id><snippet>https://www.linkedin.com/uas/oauth2/accessToken</snippet></ROW><ROW><id>18856989</id><snippet>file_len</snippet></ROW><ROW><id>18856989</id><snippet>file_len</snippet></ROW><ROW><id>18857065</id><snippet>mysqldump ... &gt; dumpfile
</snippet></ROW><ROW><id>18857065</id><snippet>mysql .... &lt; dumpfile
</snippet></ROW><ROW><id>18857070</id><snippet>automodule</snippet></ROW><ROW><id>18857070</id><snippet>function</snippet></ROW><ROW><id>18857070</id><snippet>autofunction</snippet></ROW><ROW><id>18857149</id><snippet>#include &lt;boost/python.hpp&gt;
#include &lt;boost/python/stl_iterator.hpp&gt;

/// @brief dir() support for Boost.Python objects.
boost::python::object dir(boost::python::object object)
{
  namespace python = boost::python;
  python::handle&lt;&gt; handle(PyObject_Dir(object.ptr()));
  return python::object(handle);
}

/// @brief callable() support for Boost.Python objects.
bool callable(boost::python::object object)
{
  return 1 == PyCallable_Check(object.ptr());
}

class base {};

/// @brief Returns list of an object's non-special and non-callable
///        attributes.
boost::python::list enumerate(boost::python::object object)
{
  namespace python = boost::python;
  python::list attributes; // d = []

  typedef python::stl_input_iterator&lt;python::str&gt; iterator_type;
  for (iterator_type name(dir(object)), end; // for attr in dir(self):
       name != end; ++name)
  {
    if (!name-&gt;startswith("__")           // not attr.startswith('__')
        &amp;&amp; !callable(object.attr(*name))) // not callable(getattr(self, attr))
      attributes.append(*name);           // d.append(attr)
  }

  return attributes; // return d
}

BOOST_PYTHON_MODULE(example)
{
  namespace python = boost::python;
  python::class_&lt;base&gt;("Base")
    .def("Enumerate", &amp;enumerate)
    ;
}
</snippet></ROW><ROW><id>18857149</id><snippet>&gt;&gt;&gt; from example import Base
&gt;&gt;&gt; 
&gt;&gt;&gt; class One(Base):
...     hello = "world"
... 
&gt;&gt;&gt; class Two(Base):
...     foo = "bar"
... 
&gt;&gt;&gt; arr = [One(), Two()]
&gt;&gt;&gt; 
&gt;&gt;&gt; arr[0].Enumerate()
['hello']
&gt;&gt;&gt; arr[1].Enumerate()
['foo']
</snippet></ROW><ROW><id>18857171</id><snippet>x</snippet></ROW><ROW><id>18857171</id><snippet>Object x = ...;
someMethod( x );
</snippet></ROW><ROW><id>18857171</id><snippet>someMethod( new Object() );
</snippet></ROW><ROW><id>18857171</id><snippet>void appendX( StringBuilder sb ) {
  sb.append('x');
}

void foo() {
  StringBuilder builder = ...
  appendX( builder );
  builder.toString(); // will contain 'x' because you worked with the object that 
                      // is the value of the variable `builder`.  When appendX was
                      // was invoked, the value of its variable `sb` was the same 
                      // object that is the value of foo's `builder`.  Without 
                      // changing what value the variable `builder` refers to, we
                      // did "change" the object (i.e., we appended 'x').
}
</snippet></ROW><ROW><id>18857171</id><snippet>void setNull( StringBuilder sb ) {
  sb = null;
}

void foo() {
  StringBuilder builder = ...
  appendX( builder );
  builder == null;  // false, because the value of the variable `builder` is still the 
                    // same object that it was before.  Setting variable `sb` in setNull
                    // to null doesn't affect the variable `builder`. The variables are
                    // just a name so that you can refer to an value.  The only way to
                    // what value a variable refers to is with an assignment.
}
</snippet></ROW><ROW><id>18857210</id><snippet>WasRun</snippet></ROW><ROW><id>18857210</id><snippet>TestCase</snippet></ROW><ROW><id>18857210</id><snippet>class WasRun(TestCase):
</snippet></ROW><ROW><id>18857210</id><snippet>self</snippet></ROW><ROW><id>18857210</id><snippet>TestCase</snippet></ROW><ROW><id>18857210</id><snippet>super()</snippet></ROW><ROW><id>18857210</id><snippet>exec</snippet></ROW><ROW><id>18857210</id><snippet>class TestCase(object):
    def __init__(self, name):
        self.name = name

    def run(self):
        getattr(self, self.name)()

class WasRun(TestCase):
    def __init__(self, name):
        self.wasRun = False
        super(WasRun, self).__init__(name)

    def testMethod(self):
        self.wasRun = True
</snippet></ROW><ROW><id>18857360</id><snippet>datetime.datetime</snippet></ROW><ROW><id>18857360</id><snippet>strptime()</snippet></ROW><ROW><id>18857360</id><snippet>read_date = datetime.datetime.strptime(last_run, '%Y-%m-%d')
previous_day = read_date - datetime.timedelta(days=1)
formatted_previous_day = previous_day.strftime('%Y-%m-%d')
</snippet></ROW><ROW><id>18857381</id><snippet>file.seek()</snippet></ROW><ROW><id>18857381</id><snippet>file.truncate()</snippet></ROW><ROW><id>18857381</id><snippet>with open(filename, 'rb+') as filehandle:
    filehandle.seek(-1, os.SEEK_END)
    filehandle.truncate()
</snippet></ROW><ROW><id>18857413</id><snippet>math</snippet></ROW><ROW><id>18857413</id><snippet>sys</snippet></ROW><ROW><id>18857413</id><snippet>&gt;&gt;&gt; import sys
&gt;&gt;&gt; sys.builtin_module_names
</snippet></ROW><ROW><id>18857413</id><snippet>__builtin__
__main__
_ast
_bisect
_codecs
_codecs_cn
_codecs_hk
_codecs_iso2022
_codecs_jp
_codecs_kr
_codecs_tw
_collections
_csv
_functools
_heapq
_hotshot
_io
_json
_locale
_lsprof
_md5
_multibytecodec
_random
_sha
_sha256
_sha512
_sre
_struct
_subprocess
_symtable
_warnings
_weakref
_winreg
array
audioop
binascii
cPickle
cStringIO
cmath
datetime
errno
exceptions
future_builtins
gc
imageop
imp
itertools
marshal
math
mmap
msvcrt
nt
operator
parser
signal
strop
sys
thread
time
xxsubtype
zipimport
zlib
</snippet></ROW><ROW><id>18857513</id><snippet>re.search</snippet></ROW><ROW><id>18857513</id><snippet>&gt;&gt;&gt; names = ['TAATGH', 'GHHKLL', 'TGTHA', 'ATGTTKKKK', 'KLPPNF']
&gt;&gt;&gt; reslist = []
&gt;&gt;&gt; for i in names:
...     res = re.search(r'T[A-Z]{2}T', i)
...     if res:
...             reslist.append(i)
...
&gt;&gt;&gt;
&gt;&gt;&gt; print(reslist)
['TAATGH', 'ATGTTKKKK']
</snippet></ROW><ROW><id>18857608</id><snippet>def make_chessboard(upper_x=0, upper_y=0, size=30):
    chessboard = []

    for y in range(8):
        row = []
        for x in range(8):
            coords = (upper_x + x * size, upper_y + y * size)
            row.append(pygame.Rect(coords, (size, size)))
        chessboard.append(row)
    return chessboard
</snippet></ROW><ROW><id>18857608</id><snippet>chessboard[0][0]</snippet></ROW><ROW><id>18857608</id><snippet>chessboard[0][7]</snippet></ROW><ROW><id>18857681</id><snippet>[i]</snippet></ROW><ROW><id>18857681</id><snippet>d[key][i] = 1
</snippet></ROW><ROW><id>18857681</id><snippet>d[key] = [0,0,0]
d[key][i] = 1
</snippet></ROW><ROW><id>18857681</id><snippet>[0]</snippet></ROW><ROW><id>18857681</id><snippet>[1]</snippet></ROW><ROW><id>18857681</id><snippet>[2]</snippet></ROW><ROW><id>18857720</id><snippet>import re
def make_rule(rule):  # where rule for example "H*X-9387" 
   return re.compile("^" + ".*".join(re.escape(i) for i in rule.split("*")) + "$")
</snippet></ROW><ROW><id>18857720</id><snippet>...
rule_re = make_rule(row)
for d in DesignatorList:
    if rule_re.match(d):
        print row  # or maybe print d
</snippet></ROW><ROW><id>18857746</id><snippet>import timeit

def test(operation, setup, threshold):
    # Add any kind of timing setup here.
    t = timeit.Timer(operation, setup=setup)

    # Note: t.timeit(number=1) returns the time in seconds, not milliseconds
    if t.timeit() &gt; threshold:
        raise Exception("ERROR: expected time constant exceeded")
</snippet></ROW><ROW><id>18857753</id><snippet>str</snippet></ROW><ROW><id>18857753</id><snippet>unicode</snippet></ROW><ROW><id>18857753</id><snippet>WCHAR *</snippet></ROW><ROW><id>18857753</id><snippet>def decrypt(block):
    return struct.pack('&gt;H', (4142 - int(block, 10)) % 65536)
</snippet></ROW><ROW><id>18857753</id><snippet>def decrypt_block(block):
    return struct.pack('&gt;H', (4142 - int(block, 10)) % 65536)

def decrypt(pwd):
    blocks = [pwd[i:i+5] for i in range(0, len(pwd), 5)] 
    return ''.join(map(decrypt_block, blocks)).decode('utf-16-be')
</snippet></ROW><ROW><id>18857753</id><snippet>int(block, 10)</snippet></ROW><ROW><id>18857753</id><snippet>int(block.lstrip('0'))</snippet></ROW><ROW><id>18857753</id><snippet>'0'</snippet></ROW><ROW><id>18857753</id><snippet>unsigned short x = 4142U - y;</snippet></ROW><ROW><id>18857753</id><snippet>unsigned short</snippet></ROW><ROW><id>18857753</id><snippet>int</snippet></ROW><ROW><id>18857753</id><snippet>struct.pack</snippet></ROW><ROW><id>18857753</id><snippet>join</snippet></ROW><ROW><id>18857753</id><snippet>decode</snippet></ROW><ROW><id>18857753</id><snippet>'41006'</snippet></ROW><ROW><id>18857753</id><snippet>'1438212590'</snippet></ROW><ROW><id>18857773</id><snippet>def student_data(name, age, number, enrolled):
    return str([name, age, number, enrolled])
</snippet></ROW><ROW><id>18857773</id><snippet>&gt;&gt;&gt; student_data("Vivian",32,"1234567",False)
"['Vivian', 32, '1234567', False]"
</snippet></ROW><ROW><id>18857773</id><snippet>'</snippet></ROW><ROW><id>18857773</id><snippet>def student_data(name, age, number, enrolled):
    return '[' + ','.join([name, str(age), number, str(enrolled)]) + ']'
</snippet></ROW><ROW><id>18857773</id><snippet>&gt;&gt;&gt; student_data("Vivian",32,"1234567",False)    
'[Vivian,32,1234567,False]'
</snippet></ROW><ROW><id>18857898</id><snippet>ast.literal_eval()</snippet></ROW><ROW><id>18857898</id><snippet>&gt;&gt;&gt; import ast
&gt;&gt;&gt; value = u'{"city": u"\\xc1vila", "name": u"\\xc1vila, Castilla y Le\\xf3n, Spain", "zip": "", "country": "Spain", "longitude": -4.7, "state": "Castilla y Leon", "latitude": 40.65, "id": 113972385284243}'
&gt;&gt;&gt; ast.literal_eval(value)
{'city': u'\xc1vila', 'name': u'\xc1vila, Castilla y Le\xf3n, Spain', 'zip': '', 'country': 'Spain', 'longitude': -4.7, 'state': 'Castilla y Leon', 'latitude': 40.65, 'id': 113972385284243}
</snippet></ROW><ROW><id>18857898</id><snippet>repr()</snippet></ROW><ROW><id>18857898</id><snippet>json.loads()</snippet></ROW><ROW><id>18857913</id><snippet>time</snippet></ROW><ROW><id>18857913</id><snippet>time</snippet></ROW><ROW><id>18857913</id><snippet>from time import time

time_before = time()
perform_get() # whatever way you do this
time_after = time()
time_taken = time_after-time_before

print time_taken
</snippet></ROW><ROW><id>18857967</id><snippet># -*- coding: utf-8 -*-
"""Tests for homogeneity of Poissson Process

Created on Tue Sep 17 13:50:25 2013

Author: Josef Perktold
"""

import numpy as np
from scipy import stats

# create an example dataset
nobs = 100
times_ia = stats.expon.rvs(size=nobs) # inter-arrival times
times_a = np.cumsum(times_ia) # arrival times
t_total = times_a.max()

# not used
#times_as = np.sorted(times_a)
#times_ia = np.diff(times_as)

bin_limits = np.array([ 0. ,  0.5,  1. ,  1.5,  2. ,  np.inf])
nfreq_ia, bins_ia = np.histogram(times_ia, bin_limits)


# implication: arrival times are uniform for fixed interval
# using times.max() means we don't really have a fixed interval
print stats.kstest(times_a, stats.uniform(0, t_total).cdf)

# implication: inter-arrival times are exponential
lambd = nobs * 1. / t_total
scale = 1. / lambd

expected_ia = np.diff(stats.expon.cdf(bin_limits, scale=scale)) * nobs
print stats.chisquare(nfreq_ia, expected_ia, ddof=1)

# implication: given total number of events, distribution of times is uniform
# binned version
n_mean_bin = 10
n_bins_a = nobs // 10
bin_limits_a = np.linspace(0, t_total+1e-7, n_bins_a + 1)
nfreq_a, bin_limits_a = np.histogram(times_a, bin_limits_a)
# expect uniform distributed over every subinterval
expected_a = np.ones(n_bins_a) / n_bins_a * nobs
print stats.chisquare(nfreq_a, expected_a, ddof=1)
</snippet></ROW><ROW><id>18858044</id><snippet>TypeError</snippet></ROW><ROW><id>18858044</id><snippet>ids = MyApi.GetFollowerIDs(
                    screen_name=options['username'],
                    cursor=cursor,
                    count=options['batch-size'],
                    total_count=options['total'],
                )
</snippet></ROW><ROW><id>18858044</id><snippet>GetFollowerIDs</snippet></ROW><ROW><id>18858044</id><snippet>self</snippet></ROW><ROW><id>18858044</id><snippet>twitter.API</snippet></ROW><ROW><id>18858044</id><snippet>MyApi</snippet></ROW><ROW><id>18858044</id><snippet>super</snippet></ROW><ROW><id>18858212</id><snippet>i = eval(i)</snippet></ROW><ROW><id>18858212</id><snippet>i</snippet></ROW><ROW><id>18858212</id><snippet>    for row in x:
        for index, i in enumerate(row):
            if i.isdigit() == True:
                row[index] = eval(i)
</snippet></ROW><ROW><id>18858212</id><snippet>row[index]</snippet></ROW><ROW><id>18858212</id><snippet>eval</snippet></ROW><ROW><id>18858212</id><snippet>int</snippet></ROW><ROW><id>18858212</id><snippet>ast.literal_eval</snippet></ROW><ROW><id>18858212</id><snippet>eval</snippet></ROW><ROW><id>18858212</id><snippet>== True</snippet></ROW><ROW><id>18858212</id><snippet>[row for row in x]</snippet></ROW><ROW><id>18858212</id><snippet>list(x)</snippet></ROW><ROW><id>18858212</id><snippet>x</snippet></ROW><ROW><id>18858212</id><snippet>x</snippet></ROW><ROW><id>18858212</id><snippet>x = list(x)</snippet></ROW><ROW><id>18858212</id><snippet>def type_setter(x):
    new_x = []
    for row in x:
        new_row = []
        for i in row:
            if i.isdigit():
                new_row.append(int(i))
            else:
                new_row.append(i)
        new_x.append(new_row)
    return new_x
</snippet></ROW><ROW><id>18858212</id><snippet>def type_setter(x):
    return [[int(i) if i.isdigit() else i] for i in row] for row in x]
</snippet></ROW><ROW><id>18858212</id><snippet>def type_setter(x):
    def intify(i):
        return int(i) if i.isdigit() else i
    return [[intify(i) for i in row] for row in x]
</snippet></ROW><ROW><id>18858212</id><snippet>-123</snippet></ROW><ROW><id>18858212</id><snippet>i.isdigit()</snippet></ROW><ROW><id>18858212</id><snippet>int</snippet></ROW><ROW><id>18858212</id><snippet>def type_setter(x):
    def intify(i):
        try:
            return int(i)
        except ValueError:
            return i
    return [[intify(i) for i in row] for row in x]
</snippet></ROW><ROW><id>18858477</id><snippet>csv</snippet></ROW><ROW><id>18858477</id><snippet>with open(filename) as f:
    for i, row in enumerate(f):
        if i == 7: # 8th row
            columns = row.split()
            value = columns[0] # 1st column
            break
</snippet></ROW><ROW><id>18858477</id><snippet>with open(filename) as f:
    value = more_itertools.nth(f, 7).split()[0]
</snippet></ROW><ROW><id>18858477</id><snippet>more-itertools</snippet></ROW><ROW><id>18858477</id><snippet>nth</snippet></ROW><ROW><id>18858477</id><snippet>itertools</snippet></ROW><ROW><id>18858477</id><snippet>def nth(iterable, n, default=None):
    "Returns the nth item or a default value"
    return next(itertools.islice(iterable, n, None), default)
</snippet></ROW><ROW><id>18858477</id><snippet>with open(filename) as f:
    value = next(itertools.islice(f, 7, None)).split()[0]
</snippet></ROW><ROW><id>18858477</id><snippet>return …</snippet></ROW><ROW><id>18858477</id><snippet>value = …</snippet></ROW><ROW><id>18858477</id><snippet>break</snippet></ROW><ROW><id>18858477</id><snippet>def get_row_col(filename, row, col):
    with open(filename) as f:
        return more_itertools.nth(f, row).split()[col]

value = get_row_col(filename, 7, 0)
</snippet></ROW><ROW><id>18858477</id><snippet>linecache</snippet></ROW><ROW><id>18858477</id><snippet>def get_row_col(filename, row, col):
    row = linecache.getline(filename, 7)
    return row.split()[col]
</snippet></ROW><ROW><id>18858506</id><snippet>url(r'^$', some_view, name='some_view_name'),
</snippet></ROW><ROW><id>18858517</id><snippet>&gt;&gt;&gt; x[x[:,3] != 1]
array([[ 1,  2,  3,  0],
       [11,  2,  3, 24],
       [ 5,  6,  7,  8]])
</snippet></ROW><ROW><id>18858894</id><snippet>"string"[%
</snippet></ROW><ROW><id>18858894</id><snippet>%</snippet></ROW><ROW><id>18858894</id><snippet>os.open('string"[%]"')
</snippet></ROW><ROW><id>18858894</id><snippet>os.open</snippet></ROW><ROW><id>18858894</id><snippet>subprocess</snippet></ROW><ROW><id>18858996</id><snippet>requests</snippet></ROW><ROW><id>18858996</id><snippet>chardet</snippet></ROW><ROW><id>18858996</id><snippet>&gt;&gt;&gt; soup = BeautifulSoup(response.content)
&gt;&gt;&gt; paragraphs = soup.find_all('p')
&gt;&gt;&gt; print paragraphs[1]
&lt;p&gt;&lt;b&gt;א&lt;/b&gt; &lt;big&gt;בְּ&lt;/big&gt;רֵאשִׁית, בָּרָא אֱלֹהִים, אֵת הַשָּׁמַיִם, וְאֵת הָאָרֶץ. 
&lt;a name="2"&gt; &lt;/a&gt;
&lt;b&gt;ב&lt;/b&gt; וְהָאָרֶץ, הָיְתָה תֹהוּ וָבֹהוּ, וְחֹשֶׁךְ, עַל-פְּנֵי תְהוֹם; וְרוּחַ אֱלֹהִים, מְרַחֶפֶת עַל-פְּנֵי הַמָּיִם. 
&lt;a name="3"&gt; &lt;/a&gt;
&lt;b&gt;ג&lt;/b&gt; וַיֹּאמֶר אֱלֹהִים, יְהִי אוֹר; וַיְהִי-אוֹר. 
&lt;a name="4"&gt; &lt;/a&gt;
&lt;b&gt;ד&lt;/b&gt; וַיַּרְא אֱלֹהִים אֶת-הָאוֹר, כִּי-טוֹב; וַיַּבְדֵּל אֱלֹהִים, בֵּין הָאוֹר וּבֵין הַחֹשֶׁךְ. 
&lt;a name="5"&gt; &lt;/a&gt;
&lt;b&gt;ה&lt;/b&gt; וַיִּקְרָא אֱלֹהִים לָאוֹר יוֹם, וְלַחֹשֶׁךְ קָרָא לָיְלָה; וַיְהִי-עֶרֶב וַיְהִי-בֹקֶר, יוֹם אֶחָד.  {פ}&lt;br/&gt;
&lt;a name="6"&gt; &lt;/a&gt;
&lt;b&gt;ו&lt;/b&gt; וַיֹּאמֶר אֱלֹהִים, יְהִי רָקִיעַ בְּתוֹךְ הַמָּיִם, וִיהִי מַבְדִּיל, בֵּין מַיִם לָמָיִם. 
&lt;a name="7"&gt; &lt;/a&gt;
&lt;b&gt;ז&lt;/b&gt; וַיַּעַשׂ אֱלֹהִים, אֶת-הָרָקִיעַ, וַיַּבְדֵּל בֵּין הַמַּיִם אֲשֶׁר מִתַּחַת לָרָקִיעַ, וּבֵין הַמַּיִם אֲשֶׁר מֵעַל לָרָקִיעַ; וַיְהִי-כֵן. 
&lt;a name="8"&gt; &lt;/a&gt;
&lt;b&gt;ח&lt;/b&gt; וַיִּקְרָא אֱלֹהִים לָרָקִיעַ, שָׁמָיִם; וַיְהִי-עֶרֶב וַיְהִי-בֹקֶר, יוֹם שֵׁנִי.  {פ}&lt;br/&gt;
&lt;a name="9"&gt; &lt;/a&gt;
&lt;b&gt;ט&lt;/b&gt; וַיֹּאמֶר אֱלֹהִים, יִקָּווּ הַמַּיִם מִתַּחַת הַשָּׁמַיִם אֶל-מָקוֹם אֶחָד, וְתֵרָאֶה, הַיַּבָּשָׁה; וַיְהִי-כֵן. 
&lt;a name="10"&gt; &lt;/a&gt;
&lt;b&gt;י&lt;/b&gt; וַיִּקְרָא אֱלֹהִים לַיַּבָּשָׁה אֶרֶץ, וּלְמִקְוֵה הַמַּיִם קָרָא יַמִּים; וַיַּרְא אֱלֹהִים, כִּי-טוֹב. 
&lt;a name="11"&gt; &lt;/a&gt;
&lt;b&gt;יא&lt;/b&gt; וַיֹּאמֶר אֱלֹהִים, תַּדְשֵׁא הָאָרֶץ דֶּשֶׁא עֵשֶׂב מַזְרִיעַ זֶרַע, עֵץ פְּרִי עֹשֶׂה פְּרִי לְמִינוֹ, אֲשֶׁר זַרְעוֹ-בוֹ עַל-הָאָרֶץ; וַיְהִי-כֵן. 
&lt;a name="12"&gt; &lt;/a&gt;
&lt;b&gt;יב&lt;/b&gt; וַתּוֹצֵא הָאָרֶץ דֶּשֶׁא עֵשֶׂב מַזְרִיעַ זֶרַע, לְמִינֵהוּ, וְעֵץ עֹשֶׂה-פְּרִי אֲשֶׁר זַרְעוֹ-בוֹ, לְמִינֵהוּ; וַיַּרְא אֱלֹהִים, כִּי-טוֹב. 
&lt;a name="13"&gt; &lt;/a&gt;
&lt;b&gt;יג&lt;/b&gt; וַיְהִי-עֶרֶב וַיְהִי-בֹקֶר, יוֹם שְׁלִישִׁי.  {פ}&lt;br/&gt;
&lt;a name="14"&gt; &lt;/a&gt;
&lt;b&gt;יד&lt;/b&gt; וַיֹּאמֶר אֱלֹהִים, יְהִי מְאֹרֹת בִּרְקִיעַ הַשָּׁמַיִם, לְהַבְדִּיל, בֵּין הַיּוֹם וּבֵין הַלָּיְלָה; וְהָיוּ לְאֹתֹת וּלְמוֹעֲדִים, וּלְיָמִים וְשָׁנִים. 
&lt;a name="15"&gt; &lt;/a&gt;
&lt;b&gt;טו&lt;/b&gt; וְהָיוּ לִמְאוֹרֹת בִּרְקִיעַ הַשָּׁמַיִם, לְהָאִיר עַל-הָאָרֶץ; וַיְהִי-כֵן. 
&lt;a name="16"&gt; &lt;/a&gt;
&lt;b&gt;טז&lt;/b&gt; וַיַּעַשׂ אֱלֹהִים, אֶת-שְׁנֵי הַמְּאֹרֹת הַגְּדֹלִים:  אֶת-הַמָּאוֹר הַגָּדֹל, לְמֶמְשֶׁלֶת הַיּוֹם, וְאֶת-הַמָּאוֹר הַקָּטֹן לְמֶמְשֶׁלֶת הַלַּיְלָה, וְאֵת הַכּוֹכָבִים. 
&lt;a name="17"&gt; &lt;/a&gt;
&lt;b&gt;יז&lt;/b&gt; וַיִּתֵּן אֹתָם אֱלֹהִים, בִּרְקִיעַ הַשָּׁמָיִם, לְהָאִיר, עַל-הָאָרֶץ. 
&lt;a name="18"&gt; &lt;/a&gt;
&lt;b&gt;יח&lt;/b&gt; וְלִמְשֹׁל, בַּיּוֹם וּבַלַּיְלָה, וּלְהַבְדִּיל, בֵּין הָאוֹר וּבֵין הַחֹשֶׁךְ; וַיַּרְא אֱלֹהִים, כִּי-טוֹב. 
&lt;a name="19"&gt; &lt;/a&gt;
&lt;b&gt;יט&lt;/b&gt; וַיְהִי-עֶרֶב וַיְהִי-בֹקֶר, יוֹם רְבִיעִי.  {פ}&lt;br/&gt;
&lt;a name="20"&gt; &lt;/a&gt;
&lt;b&gt;כ&lt;/b&gt; וַיֹּאמֶר אֱלֹהִים--יִשְׁרְצוּ הַמַּיִם, שֶׁרֶץ נֶפֶשׁ חַיָּה; וְעוֹף יְעוֹפֵף עַל-הָאָרֶץ, עַל-פְּנֵי רְקִיעַ הַשָּׁמָיִם. 
&lt;a name="21"&gt; &lt;/a&gt;
&lt;b&gt;כא&lt;/b&gt; וַיִּבְרָא אֱלֹהִים, אֶת-הַתַּנִּינִם הַגְּדֹלִים; וְאֵת כָּל-נֶפֶשׁ הַחַיָּה הָרֹמֶשֶׂת אֲשֶׁר שָׁרְצוּ הַמַּיִם לְמִינֵהֶם, וְאֵת כָּל-עוֹף כָּנָף לְמִינֵהוּ, וַיַּרְא אֱלֹהִים, כִּי-טוֹב. 
&lt;a name="22"&gt; &lt;/a&gt;
&lt;b&gt;כב&lt;/b&gt; וַיְבָרֶךְ אֹתָם אֱלֹהִים, לֵאמֹר:  פְּרוּ וּרְבוּ, וּמִלְאוּ אֶת-הַמַּיִם בַּיַּמִּים, וְהָעוֹף, יִרֶב בָּאָרֶץ. 
&lt;a name="23"&gt; &lt;/a&gt;
&lt;b&gt;כג&lt;/b&gt; וַיְהִי-עֶרֶב וַיְהִי-בֹקֶר, יוֹם חֲמִישִׁי.  {פ}&lt;br/&gt;
&lt;a name="24"&gt; &lt;/a&gt;
&lt;b&gt;כד&lt;/b&gt; וַיֹּאמֶר אֱלֹהִים, תּוֹצֵא הָאָרֶץ נֶפֶשׁ חַיָּה לְמִינָהּ, בְּהֵמָה וָרֶמֶשׂ וְחַיְתוֹ-אֶרֶץ, לְמִינָהּ; וַיְהִי-כֵן. 
&lt;a name="25"&gt; &lt;/a&gt;
&lt;b&gt;כה&lt;/b&gt; וַיַּעַשׂ אֱלֹהִים אֶת-חַיַּת הָאָרֶץ לְמִינָהּ, וְאֶת-הַבְּהֵמָה לְמִינָהּ, וְאֵת כָּל-רֶמֶשׂ הָאֲדָמָה, לְמִינֵהוּ; וַיַּרְא אֱלֹהִים, כִּי-טוֹב. 
&lt;a name="26"&gt; &lt;/a&gt;
&lt;b&gt;כו&lt;/b&gt; וַיֹּאמֶר אֱלֹהִים, נַעֲשֶׂה אָדָם בְּצַלְמֵנוּ כִּדְמוּתֵנוּ; וְיִרְדּוּ בִדְגַת הַיָּם וּבְעוֹף הַשָּׁמַיִם, וּבַבְּהֵמָה וּבְכָל-הָאָרֶץ, וּבְכָל-הָרֶמֶשׂ, הָרֹמֵשׂ עַל-הָאָרֶץ. 
&lt;a name="27"&gt; &lt;/a&gt;
&lt;b&gt;כז&lt;/b&gt; וַיִּבְרָא אֱלֹהִים אֶת-הָאָדָם בְּצַלְמוֹ, בְּצֶלֶם אֱלֹהִים בָּרָא אֹתוֹ:  זָכָר וּנְקֵבָה, בָּרָא אֹתָם. 
&lt;a name="28"&gt; &lt;/a&gt;
&lt;b&gt;כח&lt;/b&gt; וַיְבָרֶךְ אֹתָם, אֱלֹהִים, וַיֹּאמֶר לָהֶם אֱלֹהִים פְּרוּ וּרְבוּ וּמִלְאוּ אֶת-הָאָרֶץ, וְכִבְשֻׁהָ; וּרְדוּ בִּדְגַת הַיָּם, וּבְעוֹף הַשָּׁמַיִם, וּבְכָל-חַיָּה, הָרֹמֶשֶׂת עַל-הָאָרֶץ. 
&lt;a name="29"&gt; &lt;/a&gt;
&lt;b&gt;כט&lt;/b&gt; וַיֹּאמֶר אֱלֹהִים, הִנֵּה נָתַתִּי לָכֶם אֶת-כָּל-עֵשֶׂב זֹרֵעַ זֶרַע אֲשֶׁר עַל-פְּנֵי כָל-הָאָרֶץ, וְאֶת-כָּל-הָעֵץ אֲשֶׁר-בּוֹ פְרִי-עֵץ, זֹרֵעַ זָרַע:  לָכֶם יִהְיֶה, לְאָכְלָה. 
&lt;a name="30"&gt; &lt;/a&gt;
&lt;b&gt;ל&lt;/b&gt; וּלְכָל-חַיַּת הָאָרֶץ וּלְכָל-עוֹף הַשָּׁמַיִם וּלְכֹל רוֹמֵשׂ עַל-הָאָרֶץ, אֲשֶׁר-בּוֹ נֶפֶשׁ חַיָּה, אֶת-כָּל-יֶרֶק עֵשֶׂב, לְאָכְלָה; וַיְהִי-כֵן. 
&lt;a name="31"&gt; &lt;/a&gt;
&lt;b&gt;לא&lt;/b&gt; וַיַּרְא אֱלֹהִים אֶת-כָּל-אֲשֶׁר עָשָׂה, וְהִנֵּה-טוֹב מְאֹד; וַיְהִי-עֶרֶב וַיְהִי-בֹקֶר, יוֹם הַשִּׁשִּׁי.  {פ}&lt;/p&gt;
</snippet></ROW><ROW><id>18859019</id><snippet>run</snippet></ROW><ROW><id>18859019</id><snippet>class Task(object):
    def run(self):
        # before 
        self.do_run()
        # after

class MyTask(Task):
    def do_run(self):
        ...

task = MyTask()
task.run()
</snippet></ROW><ROW><id>18859019</id><snippet>def decorate_run(cls):
    run = getattr(cls, 'run')
    def new_run(self):
        print('before')
        run(self)
        print('after')
    setattr(cls, 'run', new_run)
    return cls


class Task(object): pass

@decorate_run
class MyTask(Task):
    def run(self):
        pass

task = MyTask()
task.run()

# prints:
# before
# after
</snippet></ROW><ROW><id>18859019</id><snippet>Task</snippet></ROW><ROW><id>18859019</id><snippet>Task</snippet></ROW><ROW><id>18859019</id><snippet>class MetaTask(type):
    def __init__(cls, name, bases, clsdict):
        if 'run' in clsdict:
            def new_run(self):
                print('before')
                clsdict['run'](self)
                print('after')
            setattr(cls, 'run', new_run)

class Task(object):
    __metaclass__ = MetaTask

class MyTask(Task):
    def run(self):
        #successful override!
        pass

task = MyTask()
task.run()
</snippet></ROW><ROW><id>18859162</id><snippet>counter = 0
while True: #your main loop
    smoke = digital_read() #assume 0 = no alarm, 1 = alarm
    if smoke:
        counter += 1
    else:
        counter = 0
    if counter &gt;= 4: #there was smoke for the last 4 seconds
        call_the_fire_brigade()
    time.sleep(1) #wait one second
</snippet></ROW><ROW><id>18859193</id><snippet>settings.py</snippet></ROW><ROW><id>18859193</id><snippet>SELECT * FROM [app_name]_state WHERE name = 'California';
</snippet></ROW><ROW><id>18859193</id><snippet>python manage.py shell</snippet></ROW><ROW><id>18859193</id><snippet>&gt;&gt;&gt; from [app_name].models import State
&gt;&gt;&gt; s = State.objects.get(name='California')
&gt;&gt;&gt; s
&lt;State: California&gt;
</snippet></ROW><ROW><id>18859193</id><snippet># Single quotes added so you can see any extra spaces in the console
print "'%s'" % state 
</snippet></ROW><ROW><id>18859337</id><snippet>import requests
from requests_ntlm import HttpNtlmAuth

username = 'myUser'
password = 'myPswd'
url = 'https://NTLMwebsite/base.com'
nextPage = 'https://NTLMwebsite/base/next.com'

s = requests.Session()

s.auth = HttpNtlmAuth(username, password)

r1 = s.get(url)
r2 = s.get(nextPage)
print 'r1', r1
print 'r2', r2
print 'Session using same connection:', r1.connection == r2.connection

r1 = requests.get(url, auth=HTTPBasicAuth(username, password))
r2 = requests.get(nextPage, auth=HTTPBasicAuth(username, password))
print 'r1', r1
print 'r2', r2
print 'Non Session using same connection:', r1.connection == r2.connection
</snippet></ROW><ROW><id>18859463</id><snippet>__init__():</snippet></ROW><ROW><id>18859463</id><snippet>__str__()</snippet></ROW><ROW><id>18859463</id><snippet>__unicode__()</snippet></ROW><ROW><id>18859463</id><snippet>print my_object</snippet></ROW><ROW><id>18859472</id><snippet>*args</snippet></ROW><ROW><id>18859472</id><snippet>**args</snippet></ROW><ROW><id>18859472</id><snippet>&gt;&gt;&gt; def replace_all_slash(*words):
   return [word.replace("/", "-") for word in words]

&gt;&gt;&gt; word1 = "foo/"
&gt;&gt;&gt; word2 = "bar"
&gt;&gt;&gt; word3 = "ba/zz"
&gt;&gt;&gt; replace_all_slash(word1, word2, word3)
['foo-', 'bar', 'ba-zz']
</snippet></ROW><ROW><id>18859472</id><snippet>&gt;&gt;&gt; word1
'foo/'
&gt;&gt;&gt; word2
'bar'
&gt;&gt;&gt; word3
'ba/zz'
&gt;&gt;&gt; word1, word2, word3 = replace_all_slash(word1, word2, word3)
&gt;&gt;&gt; word1
'foo-'
&gt;&gt;&gt; word2
'bar'
&gt;&gt;&gt; word3
'ba-zz'
</snippet></ROW><ROW><id>18859576</id><snippet>{k: v for k, v in zip (keys, values) }
</snippet></ROW><ROW><id>18859576</id><snippet>dict (zip (keys, values) )
</snippet></ROW><ROW><id>18859576</id><snippet>def the_function_you_are_looking_for (keys, values):
    return dict (zip (keys, values) )
</snippet></ROW><ROW><id>18859715</id><snippet>import StringIO
import networkx as nx
data = StringIO.StringIO("""1,2

2,3

1,3
""")

G = nx.read_edgelist(data, delimiter=',', nodetype=str)
for e in G.edges():
    print e
# ('1', '3')
# ('1', '2')
# ('3', '2')
</snippet></ROW><ROW><id>18859785</id><snippet>my_dict2 = {'group_a':my_array[0:1], 'group_b':my_array[1:]}
</snippet></ROW><ROW><id>18859785</id><snippet>In [2]: my_array = np.array([0, 1, 2, 3, 4, 5, 6])

In [3]: my_dict2 = {'group_a': my_array[0:1], 'group_b': my_array[1:]}

In [4]: my_dict2
Out[4]: {'group_a': array([0]), 'group_b': array([1, 2, 3, 4, 5, 6])}

In [5]: my_array[0] = 200

In [6]: my_dict2
Out[6]: {'group_a': array([200]), 'group_b': array([1, 2, 3, 4, 5, 6])}
</snippet></ROW><ROW><id>18859805</id><snippet>my_string = "&lt;p&gt;hello, how are you &lt;code&gt;other code&lt;/code&gt; my name is joe&lt;/p&gt;"
soup = BeautifulSoup(my_string, 'html')

soup.code.extract()
text = soup.p.get_text()
print text
</snippet></ROW><ROW><id>18859811</id><snippet>import Tkinter as tk</snippet></ROW><ROW><id>18859811</id><snippet>tk.Button</snippet></ROW><ROW><id>18859811</id><snippet>tkinter.Button</snippet></ROW><ROW><id>18859811</id><snippet>Button</snippet></ROW><ROW><id>18860006</id><snippet>ast.literal_eval()</snippet></ROW><ROW><id>18860006</id><snippet>import ast

with open(filename, 'r') as fh:
    for line in fh:
        listobj = ast.literal_eval(line)
</snippet></ROW><ROW><id>18860006</id><snippet>ast.literal_eval()</snippet></ROW><ROW><id>18860006</id><snippet>&gt;&gt;&gt; ast.literal_eval('[0.1,0.1,0.2,0.3]\n')
[0.1, 0.1, 0.2, 0.3]
</snippet></ROW><ROW><id>18860022</id><snippet>import re

soupObj = [u'$(function(){SEAT.PG.initDialog(".generate-popup-3030",[{msez:"3030",c:"#333",o:0.5,f:false,html:SEAT.PG.getImgPopHtml}]);SEAT.PG.mappaInterattiva({longitude:13.37489,latitude:42.36009,sito:"pgol",zoomLevel:"1",lng:1,mirino:"http://img.pgol.it/pgol/img/mk_pallino.png",allowFoto:true,mapType:null,streetView:false,dr:false,addMobile:false,ums:"sorellenurzia"});var a=SEAT.commenti({__2011_commento_click_stella:"Clicca su una stella per dare il tuo voto",__2011_commento_da_evitare:"Da evitare",__2011_commento_di_meglio:"C\'\xe8 di meglio",__2011_commento_non_male:"Non male",__2011_commento_mi_piace:"Mi piace",__2011_commento_consigliato:"Consigliato",__2011_commento_scrivi:"Scrivi una recensione per condividere la tua esperienza con gli altri utenti",__2011_commento_breve:"Scrivi almeno 120 caratteri per dare informazioni utili e complete a chi legger\xe0 la recensione.",__2011_commento_manca_voto:"Ti sei dimenticato di dare un voto",__2011_commento_servizio_non_disponibile:"Il servizio al momento non \xe8 disponibile",__2011_commento_segnala:"Segnala la recensione",__2011_commento_segnala_msg1:"Ritieni che questa recensione sia offensiva o inappropriata a PagineGialle.it?",__2011_commento_segnala_msg2:"La nostra redazione si occuper\xe0 di controllarne il contenuto e, se necessario, di rimuoverlo dal sito",__2011_conferma:"conferma",__2011_annulla:"annulla",__2011_ha_scritto_il:"ha scritto il",__2011_pubblica:"pubblica",__2011_commento_modifica_recensione:"Modifica recensione",__2011_conferma_notifica:"Aggiornamento via email attivo",__2012_commenti_relatedopec:"Conosci anche queste attivit\xe0?",__2011_elimina_notifica:"Aggiornamento via email non attivo"});a.enableAbuse();a.enableRating()});']

m = re.search('longitude:([-+]?\d+.\d+),latitude:([-+]?\d+.\d)', soupObj[0])
if m:
  longitude = m.group(1)
  latitude = m.group(2)
  print "longitude=%s, latitude=%s" % (longitude, latitude)
else:
  print "Failed to match longitude, latitude."
</snippet></ROW><ROW><id>18860022</id><snippet>longitude=13.37489, latitude=42.3
</snippet></ROW><ROW><id>18860216</id><snippet>&gt;&gt;&gt; df
       fet1   fet2   fet3   fet4   fet5
stim1  True   True  False  False  False
stim2  True   False False  False   True
&gt;&gt;&gt; def func(row):
        return [
            row.index[row == True], 
            row.index[row == False]
        ]
&gt;&gt;&gt; df.apply(func, axis=1)
stim1    [[fet1, fet2], [fet3, fet4, fet5]]
stim2    [[fet1, fet5], [fet2, fet3, fet4]]
dtype: object
</snippet></ROW><ROW><id>18860364</id><snippet>import re
fin = open("./file.txt")

for line in fin:
    if re.match("Line 1:", line):
      # note we need to match "Line 1:" (including colon) so we don't match "Line 10"
      m = re.match(".*Type(.)", line)
      type = m.group(1)
      # we now know what type this group is
    if re.match("Line 3:", line):
      m = re.match(".*3:(.*)$", line)
      outputString = m.group(1)
      # have first half of output string
    if re.match("Line 8:", line):
      m = re.match(".*8:(.*)$", line)
      outputString += m.group(1)
      # have second half of output string, and we know where it needs to go:
      print "concatenated string of type ", type," is ", outputString
      # now send it where you want it to go... one of two open files, perhaps?

fin.close()    
</snippet></ROW><ROW><id>18860436</id><snippet>time -p</snippet></ROW><ROW><id>18860436</id><snippet>ping</snippet></ROW><ROW><id>18860436</id><snippet>0.01</snippet></ROW><ROW><id>18860436</id><snippet>import datetime
import subprocess
import time

while True:
    start = datetime.datetime.now()
    with open('log.txt', 'a+b') as logfile:
        subprocess.call(['ping', '-c1', '-w4', 'www.example.com'], stdout=logfile)
    delta = datetime.datetime.now() - start
    time.sleep(delta.total_seconds())
</snippet></ROW><ROW><id>18860436</id><snippet>ping</snippet></ROW><ROW><id>18860436</id><snippet>Popen</snippet></ROW><ROW><id>18860436</id><snippet>wait(5)</snippet></ROW><ROW><id>18860436</id><snippet>while True:
    with open('log.txt', 'a+b') as logfile:
        ping = subprocess.Popen(['ping', '-c1', '-w4', 'www.example.com'],
                                stdout=logfile)
        time.sleep(5)
        # Not strictly necessary, but it avoids signaling for no reason
        if ping.poll() is None:
            ping.kill()
        ping.wait()
</snippet></ROW><ROW><id>18860490</id><snippet>def OnRun(self,event):
    path = "/path/to/youtube-dl.py"
    url = "http://www.youtube.com/"
    subprocess.Popen(path, url, "--extract-audio", "--audio-format", "mp3")
</snippet></ROW><ROW><id>18860613</id><snippet>else: #Si está, suma datos
  data = []
  with open('listas\Estadisticas.txt', 'r+') as f:
      lines = f.readlines()

  for line in lines:
    data_line = json.loads(line)
    if data_line[0] == user.name: #if name is found...
      if data_line[9] == room.name: #And room also, then update info.
        data_line[1] = int(data_line[1])+int(palabrasdelafrase)
        [etc]
</snippet></ROW><ROW><id>18860613</id><snippet>user.name</snippet></ROW><ROW><id>18860613</id><snippet>data</snippet></ROW><ROW><id>18860613</id><snippet>data_line</snippet></ROW><ROW><id>18860613</id><snippet>json</snippet></ROW><ROW><id>18860613</id><snippet>dict</snippet></ROW><ROW><id>18860613</id><snippet>dict</snippet></ROW><ROW><id>18860613</id><snippet>user.name</snippet></ROW><ROW><id>18860613</id><snippet>user.name</snippet></ROW><ROW><id>18860613</id><snippet>with open('listas\Estadisticas.json', 'rb') as f:
    data = json.load(f)

key = (user.name, room.name)

if key in data:
    data[key]['nameColor'] = user.nameColor
    [...etc...]
else:
    # I am not sure what details are different
    data[key] = {} # New sub-dict
    data[key]['nameColor'] = user.nameColor
    [...etc...]

with open('listas\Estadisticas.json', 'wb') as f:
    json.dump(f, data)
</snippet></ROW><ROW><id>18860663</id><snippet>f = open("diaryfile", "r")
body = []
for line in f:
    if your_regexp.match(line):
        if body:
            write_one(body)
        body = []
    body.append(line)
if body:
    write_one(body)
f.close()
</snippet></ROW><ROW><id>18860663</id><snippet>body</snippet></ROW><ROW><id>18860663</id><snippet>write_one()</snippet></ROW><ROW><id>18860663</id><snippet>write_one()</snippet></ROW><ROW><id>18860663</id><snippet>body[0] = body[0][2:]
</snippet></ROW><ROW><id>18860663</id><snippet>write_one</snippet></ROW><ROW><id>18860663</id><snippet>with open(file_name_extracted_from_body_goes_here, "w") as f:
    f.writelines(body)
</snippet></ROW><ROW><id>18860716</id><snippet>easy_install</snippet></ROW><ROW><id>18860716</id><snippet>python2.6 setup.py install</snippet></ROW><ROW><id>18860728</id><snippet>for root, dirs, files in os.walk(apkLocation + apkFolder):
    for name in files:
        if name.endswith(("lib", ".so")):
            os.path.join(root, name)
</snippet></ROW><ROW><id>18860874</id><snippet>hello/(?P&lt;city&gt;.*)/(?P&lt;phone&gt;\d+)/world
</snippet></ROW><ROW><id>18860874</id><snippet>.*</snippet></ROW><ROW><id>18860874</id><snippet>re.sub</snippet></ROW><ROW><id>18860874</id><snippet>def to_named_groups(match, regexes):
    group_name = re.escape(match.group(0)[1:-1])
    group_regex = regexes.get(group_name, '[^/]*')
    return '(?P&lt;{}&gt;{})'.format(group_name, group_regex)
</snippet></ROW><ROW><id>18860874</id><snippet>.split('/')</snippet></ROW><ROW><id>18860874</id><snippet>regexes</snippet></ROW><ROW><id>18860874</id><snippet>def find_matches(key_mask, text):
    mapping = {}
    for key, value in zip(key_mask.split('/'), text.split('/')):
        if key[0] == '{' and key[-1] == '}':
            mapping[key[1:-1]] = value
        elif key != value:
            return
    return mapping
</snippet></ROW><ROW><id>18860874</id><snippet>regexes</snippet></ROW><ROW><id>18860874</id><snippet>def find_matches(key_mask, text, regexes={}):
    mapping = {}
    for key, value in zip(key_mask.split('/'), text.split('/')):
        if key[0] == '{' and key[-1] == '}':
            key=key[1:-1]
            if key in regexes and not re.match(regexes[key], value):
                return
            mapping[key] = value
        elif key != value:
            return
    return mapping
</snippet></ROW><ROW><id>18860874</id><snippet>/</snippet></ROW><ROW><id>18860874</id><snippet>regexes = {key: regex.replace('.*', '[^/]*') for key, regex in regexes.items()}
</snippet></ROW><ROW><id>18860898</id><snippet>std::shared_ptr&lt;std::ostream&gt; make_ostream(std::string const&amp; filename) {
    return std::make_shared&lt;std::ofstream&gt;(filename);
}
</snippet></ROW><ROW><id>18860898</id><snippet>void writeTo(std::shared_ptr&lt;std::ostream&gt; stream) {
    if (stream) {
        writeTo(*stream);
    }
}
</snippet></ROW><ROW><id>18860907</id><snippet>seconds</snippet></ROW><ROW><id>18860907</id><snippet>sum</snippet></ROW><ROW><id>18860907</id><snippet>&gt;&gt;&gt; a = [datetime.timedelta(0, 1800)] * 4
&gt;&gt;&gt; print sum([d.seconds for d in a])
7200
&gt;&gt;&gt; print sum([d.seconds for d in a]) / 60.0 / 60.0
2.0
</snippet></ROW><ROW><id>18860907</id><snippet>import operator
reduce(operator.add, a)
</snippet></ROW><ROW><id>18860907</id><snippet>timedelta</snippet></ROW><ROW><id>18860915</id><snippet>set_xticklabels</snippet></ROW><ROW><id>18860926</id><snippet>'DRIVER={SQL Server};SERVER=server;DATABASE=db1;UID=uname;PWD=pword;Trusted_Connection=yes'</snippet></ROW><ROW><id>18860926</id><snippet>server</snippet></ROW><ROW><id>18860926</id><snippet>db1</snippet></ROW><ROW><id>18860926</id><snippet>connect</snippet></ROW><ROW><id>18860926</id><snippet>cnxn = pyodbc.connect(driver='{SQL Server}', host=server, database=db1,
                      trusted_connection=tcon, user=uname, password=pword)
</snippet></ROW><ROW><id>18861047</id><snippet>None</snippet></ROW><ROW><id>18861047</id><snippet>&gt;&gt;&gt; string_list = [ "foo",1,None, "null","[]","bar"]
&gt;&gt;&gt; none_items = {"null", "[]"}  # or set(("null", "[]"))
&gt;&gt;&gt; [None if item in none_items else item for item in string_list]
['foo', 1, None, None, None, 'bar']
</snippet></ROW><ROW><id>18861047</id><snippet>map()</snippet></ROW><ROW><id>18861047</id><snippet>&gt;&gt;&gt; map(lambda x: None if x in none_items else x, string_list)
['foo', 1, None, None, None, 'bar']
</snippet></ROW><ROW><id>18861047</id><snippet>set</snippet></ROW><ROW><id>18861093</id><snippet>while True:
    message = raw_input('Sladu inn skipun :')
    try :
        s.sendall(message)
        print s.recv(1024)
    except socket.error:
        print 'Send failed'
        sys.exit()
</snippet></ROW><ROW><id>18861198</id><snippet>filename</snippet></ROW><ROW><id>18861198</id><snippet>class Spam:
    ...
    def __init__(self):
        self.filename = None

    def saveFile(self):
        if not self.filename:
            self.filename = QtGui.QFileDialog.getSaveFileName(...)
            # here you should check if the dialog wasn't cancelled
        with open(filename, 'w') as f:
            f.write(self.text.toPlainText())
    ...
</snippet></ROW><ROW><id>18861383</id><snippet>def isprime(n):
    if n == 1:
        print ("1 is not prime.")
        return
    if n == 2:
        print ("2 is a prime number.")
        return
    for x in range (2, n):
        if n%x == 0:
            print (n, "is not prime.")
            break
    else:
        print (n, "is a prime number.")
</snippet></ROW><ROW><id>18861456</id><snippet>player.side</snippet></ROW><ROW><id>18861456</id><snippet>side</snippet></ROW><ROW><id>18861456</id><snippet>if self.player.side == side:
    self.enemy.score += 1
else:
    self.player.score += 1
</snippet></ROW><ROW><id>18861456</id><snippet>self.enemy.score  += int(self.player.side == side)
self.player.score += int(self.player.side != side)
</snippet></ROW><ROW><id>18861456</id><snippet>winner = [self.player,self.enemy][self.player.side == side]
winner.score += 1
</snippet></ROW><ROW><id>18861456</id><snippet> challenge = { ('left','left')   : self.enemy,
               ('left','right')  : self.player,
               ('right','right') : self.enemy,
               ('right','left')  : self.player }

 winner = challenge[(self.player.side,side)]
 # OR safely assuming the enemy is the defualt winner
 winner = challenge.get((self.player.side,side), self.enemy) 
</snippet></ROW><ROW><id>18861547</id><snippet>0</snippet></ROW><ROW><id>18861547</id><snippet>11</snippet></ROW><ROW><id>18861547</id><snippet>10</snippet></ROW><ROW><id>18861547</id><snippet>with open('test.txt', 'rb') as f:
    f.seek(-4, os.SEEK_END)
    ch=f.read(4)
    for i in range(3, -1, -1):
        pattern = ord(ch[i]) &amp; 0xc0
        if pattern in (0x00, 0x40, 0xc0):
            ch = ch[i:]
            break
</snippet></ROW><ROW><id>18861556</id><snippet>for node in G.Nodes():  # G.Nodes() is a generator
    print node.GetId()
    print id(node)  #  NEW LINE HERE
</snippet></ROW><ROW><id>18861556</id><snippet>id(node)</snippet></ROW><ROW><id>18861556</id><snippet>Nodes()</snippet></ROW><ROW><id>18861720</id><snippet>User user = ...

using (BinaryWriter writer = ...)
{
    writer.Write((byte)user.id);
    writer.Write(user.age);
}
</snippet></ROW><ROW><id>18861720</id><snippet>pack</snippet></ROW><ROW><id>18861720</id><snippet>unpack</snippet></ROW><ROW><id>18861721</id><snippet>http.server</snippet></ROW><ROW><id>18861727</id><snippet>file_name = "/data/app/com.rovio.angrybirdsstarwars.ads.iap-1.apk"
cmd = "adb shell ls -l %s"%file_name #stat doesnt work i dont think
file_size = subprocess.Popen(cmd,stdout=subprocess.PIPE).communicate()[0].split()[3]
usb2_xfer = 4603904.0 #4496 KB/s  (http://forum.xda-developers.com/showthread.php?t=882608)
print "EST TIME:%0.2f secs"%(file_size/usb2_xfer)
</snippet></ROW><ROW><id>18861727</id><snippet>print "Start Command!"
os.system("adb pull ...")
print "Command Finished!!"
</snippet></ROW><ROW><id>18861727</id><snippet>print "start command"
p = subprocess.Popen("adb pull ...",stdout = subprocess.PIPE,stderr=subprocess.PIPE)
stdout,stderr = p.communicate() # you could do p.wait() if you dont care about output
print "Command Finished!"
print stdout
print stderr
</snippet></ROW><ROW><id>18861734</id><snippet>&gt;&gt;&gt; bp_dict = boxplot(data, vert=False) # draw horizontal boxplot
&gt;&gt;&gt; bp_dict.keys()
&gt;&gt;&gt; bp_dict.keys()
['medians', 'fliers', 'whiskers', 'boxes', 'caps']
</snippet></ROW><ROW><id>18861734</id><snippet>from pylab import *

# from http://matplotlib.org/examples/pylab_examples/boxplot_demo.html

# fake up some data
spread= rand(50) * 100
center = ones(25) * 50
flier_high = rand(10) * 100 + 100
flier_low = rand(10) * -100
data =concatenate((spread, center, flier_high, flier_low), 0)

# fake up some more data
spread= rand(50) * 100
center = ones(25) * 40
flier_high = rand(10) * 100 + 100
flier_low = rand(10) * -100
d2 = concatenate( (spread, center, flier_high, flier_low), 0 )
data.shape = (-1, 1)
d2.shape = (-1, 1)
#data = concatenate( (data, d2), 1 )
# Making a 2-D array only works if all the columns are the
# same length.  If they are not, then use a list instead.
# This is actually more efficient because boxplot converts
# a 2-D array into a list of vectors internally anyway.
data = [data, d2, d2[::2,0]]

# multiple box plots on one figure
figure()

# get dictionary returned from boxplot
bp_dict = boxplot(data, vert=False)

for line in bp_dict['medians']:
    # get position data for median line
    x, y = line.get_xydata()[1] # top of median line
    # overlay median value
    text(x, y, '%.1f' % x,
         horizontalalignment='center') # draw above, centered

for line in bp_dict['boxes']:
    x, y = line.get_xydata()[0] # bottom of left line
    text(x,y, '%.1f' % x,
         horizontalalignment='center', # centered
         verticalalignment='top')      # below
    x, y = line.get_xydata()[3] # bottom of right line
    text(x,y, '%.1f' % x,
         horizontalalignment='center', # centered
             verticalalignment='top')      # below

show()
</snippet></ROW><ROW><id>18861785</id><snippet>(.*?)</snippet></ROW><ROW><id>18861785</id><snippet>group(1)</snippet></ROW><ROW><id>18861785</id><snippet>group(0)</snippet></ROW><ROW><id>18861785</id><snippet>0</snippet></ROW><ROW><id>18861785</id><snippet>1</snippet></ROW><ROW><id>18861785</id><snippet>import re

packageDetails = "package: name='com.example.tracker' versionCode='1' versionName='1.0'"
name = re.search("name='(.*?)'", packageDetails).group(1)
versionCode = re.search("versionCode='(.*?)'", packageDetails).group(1)
versionName = re.search("versionName='(.*?)'", packageDetails).group(1)

print "package name is :", name
print "version code is :", versionCode
print "version name is :", versionName 
</snippet></ROW><ROW><id>18861785</id><snippet>package name is : com.example.tracker
version code is : 1
version name is : 1.0
</snippet></ROW><ROW><id>18861947</id><snippet>class UploadForm(flask.ext.wtf.Form):
    fichier = wtforms.fields.FileField(u'Fichier')
    subject = wtforms.fields.SelectField(u'Matière')
    submit = wtforms.fields.SubmitField(u'Envoyer')

    def __init__(self, year):
        flask.ext.wtf.Form.__init__(self)
        self.year=year
        self.subject.choices = app.config["SUBJECTS"][year]
</snippet></ROW><ROW><id>18862177</id><snippet>A</snippet></ROW><ROW><id>18862177</id><snippet>B</snippet></ROW><ROW><id>18862177</id><snippet>pickle.dumps()</snippet></ROW><ROW><id>18862177</id><snippet>pickle</snippet></ROW><ROW><id>18862177</id><snippet>_reconstructor()</snippet></ROW><ROW><id>18862177</id><snippet>Lib/copyreg.py</snippet></ROW><ROW><id>18862374</id><snippet>sys.path.append()</snippet></ROW><ROW><id>18862374</id><snippet>os.environ[]</snippet></ROW><ROW><id>18862374</id><snippet>/usr/bin/python</snippet></ROW><ROW><id>18862374</id><snippet>#!/usr/bin/python
</snippet></ROW><ROW><id>18862374</id><snippet>chmod +x script</snippet></ROW><ROW><id>18862488</id><snippet>' foo '</snippet></ROW><ROW><id>18862488</id><snippet>\b</snippet></ROW><ROW><id>18862488</id><snippet>\bfoo\b</snippet></ROW><ROW><id>18862488</id><snippet>foo b4r b@z</snippet></ROW><ROW><id>18862488</id><snippet>misc    :  start_of_string
misc    :  word_boundary
letter  :  'f'
letter  :  'o'
letter  :  'o'
misc    :  word_boundary
wspace  :  ' '
misc    :  word_boundary
letter  :  'b'
number  :  '4'
letter  :  'r'
misc    :  word_boundary
wspace  :  ' '
misc    :  word_boundary
letter  :  'b'
misc    :  word_boundary
char    :  '@'
misc    :  word_boundary
letter  :  'z'
misc    :  word_boundary
misc    :  end_of_string
</snippet></ROW><ROW><id>18862488</id><snippet>re.search(r'\bfoo\b',str)</snippet></ROW><ROW><id>18862488</id><snippet>misc:word_boundary</snippet></ROW><ROW><id>18862488</id><snippet>misc:word_boundary</snippet></ROW><ROW><id>18862488</id><snippet>letter:'f'</snippet></ROW><ROW><id>18862488</id><snippet>letter:'o'</snippet></ROW><ROW><id>18862488</id><snippet>letter:'o'</snippet></ROW><ROW><id>18862488</id><snippet>misc:'word_boundary'</snippet></ROW><ROW><id>18862488</id><snippet>+*?</snippet></ROW><ROW><id>18862488</id><snippet>\w</snippet></ROW><ROW><id>18862488</id><snippet>a</snippet></ROW><ROW><id>18862488</id><snippet>b</snippet></ROW><ROW><id>18862488</id><snippet>c</snippet></ROW><ROW><id>18862514</id><snippet>wr = csv.writer(f, quoting=csv.QUOTE_NONE)
for i in output:
    wr.writerow(['{:3.4e}'.format(x) for x in i])
</snippet></ROW><ROW><id>18862671</id><snippet>keys = ["msg", "save_act_errors", "add_act_errors", "modif_act_errors", ...]

if any(key in response_dic for key in keys):
    #do stuff
</snippet></ROW><ROW><id>18862673</id><snippet>d = {}
for api_name, runtime in whatever:
    if api_name in d:  # we've seen it before
        d[api_name].append(runtime)
    else:  # first time
        d[api_name] = [runtime]  # list with one entry
</snippet></ROW><ROW><id>18862673</id><snippet>for runtimes in d.itervalues():
    runtimes.sort()
</snippet></ROW><ROW><id>18862806</id><snippet>import os
def ps(self, command):
  os.system(command + " &amp; disown")

ps("/var/tmp/KernelbootRun.sh")
ps("ps aux | grep processCreator.py | awk '{print $2}' | xargs kill -9")
</snippet></ROW><ROW><id>18862806</id><snippet>ps("&lt;/dev/null /var/tmp/KernelbootRun.sh &gt;/dev/null 2&gt;&amp;1")
ps("&lt;/dev/null ps aux | grep processCreator.py | awk '{print $2}' | xargs kill -9 &gt;/dev/null 2&gt;&amp;1")
</snippet></ROW><ROW><id>18862806</id><snippet>def psn(self, command):
  os.system("&lt;/dev/null " + command + " &gt;/dev/null 2&gt;&amp;1 &amp; disown")

psn("/var/tmp/KernelbootRun.sh")
psn("ps aux | grep processCreator.py | awk '{print $2}' | xargs kill -9")
</snippet></ROW><ROW><id>18862867</id><snippet>&gt;&gt;&gt; (4195835 / 3145727) * 3145727 - 4195835
-1050108
&gt;&gt;&gt; (4195835. / 3145727.) * 3145727. - 4195835.
0.0
</snippet></ROW><ROW><id>18862867</id><snippet>&gt;&gt;&gt; from __future__ import division
&gt;&gt;&gt; (4195835 / 3145727) * 3145727 - 4195835
0.0
</snippet></ROW><ROW><id>18863004</id><snippet>parser = argparse.ArgumentParser()
parser.add_argument('filename')
args = parser.parse_args()
with open(args.filename) as file:
  # do stuff here
</snippet></ROW><ROW><id>18863083</id><snippet>tanminghuan@bogon ~/Code $ export CFLAGS=-I/opt/local/include
tanminghuan@bogon ~/Code $ sudo pip install cython "git+git://github.com/surfly/gevent.git@1.0rc3#egg=gevent"
ystem/Library/Frameworks/Python.framework/Versions/2.7/include/python2.7 -c c-ares/inet_ntop.c -o build/temp.maco
</snippet></ROW><ROW><id>18863129</id><snippet>lion = monster()
</snippet></ROW><ROW><id>18863129</id><snippet>class Monster:
    def __init__(self):
        self.hp = 50
        self.xp = random.randint(20,50)

    def monsterattack(self):
        return random.randint()
</snippet></ROW><ROW><id>18863129</id><snippet>damage = lion.monsterattack
</snippet></ROW><ROW><id>18863338</id><snippet>IndentationError</snippet></ROW><ROW><id>18863338</id><snippet>a = 1
 b = 2
</snippet></ROW><ROW><id>18863338</id><snippet>b = 2</snippet></ROW><ROW><id>18863338</id><snippet>greeting = greetings_query.fetch(10)</snippet></ROW><ROW><id>18863338</id><snippet>greeting = greetings_query.fetch(10)</snippet></ROW><ROW><id>18863338</id><snippet> a = 1
b = 2
</snippet></ROW><ROW><id>18863338</id><snippet>IndentationError: unindent does not match any outer indentation level
</snippet></ROW><ROW><id>18863414</id><snippet>Goto</snippet></ROW><ROW><id>18863414</id><snippet>goto</snippet></ROW><ROW><id>18863414</id><snippet>label</snippet></ROW><ROW><id>18863414</id><snippet>number = input()
if number &lt; 0: goto negative
if number % 2 == 0:
   print "even"
else:
   print "odd"
goto end
label: negative
print "negative"
label: end
print "all done"
</snippet></ROW><ROW><id>18863414</id><snippet>number = input()
goto check

label: negative
print "negative"
goto end

label: check
if number &lt; 0: goto negative
if number % 2 == 0:
   print "even"
else:
   print "odd"
goto end

label: end
print "all done"
</snippet></ROW><ROW><id>18863414</id><snippet>number = input()
if number &gt;= 0:
   if number % 2 == 0:
       print "even"
   else:
       print "odd"
else:
   print "negative"
print "all done"
</snippet></ROW><ROW><id>18863414</id><snippet>if/then/else</snippet></ROW><ROW><id>18863414</id><snippet>print "odd"</snippet></ROW><ROW><id>18863414</id><snippet>((number &gt;= 0) == True) and ((number % 2 == 0) == False)</snippet></ROW><ROW><id>18863442</id><snippet>loadmat</snippet></ROW><ROW><id>18863442</id><snippet>scipy</snippet></ROW><ROW><id>18863442</id><snippet>numpy</snippet></ROW><ROW><id>18863470</id><snippet>import csv


f1 = open("test1.txt", 'rb')
reader1 = csv.reader(f1)
f2 = open("test2.txt", 'rb')
reader2 = csv.reader(f2)
result = []

for entry in reader1:
    print entry
    for row in reader2:
        print row
        if entry[0].strip() == row[1].strip():
            del row[1]
            load = entry + row
            result.append(load)

for line in result:
    print line
</snippet></ROW><ROW><id>18863503</id><snippet>conda install -c https://conda.binstar.org/dhirschfeld pyodbc</snippet></ROW><ROW><id>18863528</id><snippet>import</snippet></ROW><ROW><id>18863528</id><snippet>sys.modules</snippet></ROW><ROW><id>18863528</id><snippet>import</snippet></ROW><ROW><id>18863528</id><snippet>&gt;&gt;&gt; import imp
&gt;&gt;&gt; imp.reload(math)
&lt;module 'math' (built-in)&gt;
&gt;&gt;&gt; math.pi
3.141592653589793
</snippet></ROW><ROW><id>18863578</id><snippet>random</snippet></ROW><ROW><id>18863578</id><snippet>random.py</snippet></ROW><ROW><id>18863578</id><snippet>random</snippet></ROW><ROW><id>18863578</id><snippet>random.py</snippet></ROW><ROW><id>18863578</id><snippet>.pyc</snippet></ROW><ROW><id>18863621</id><snippet>.jade2mako2html</snippet></ROW><ROW><id>18863801</id><snippet>&lt;i&gt;&lt;/i&gt;</snippet></ROW><ROW><id>18864212</id><snippet>x = x + 1</snippet></ROW><ROW><id>18864212</id><snippet>global</snippet></ROW><ROW><id>18864212</id><snippet>&gt;&gt;&gt; x = 'outer'
&gt;&gt;&gt; def func():
...     x = 'inner'  #x is a local variable now
...     print x
...     
&gt;&gt;&gt; func()
inner
</snippet></ROW><ROW><id>18864212</id><snippet>&gt;&gt;&gt; x = 'outer'
&gt;&gt;&gt; def func():
...     print x       #this won't access the global `x`
...     x = 'inner'   #`x` is a local variable
...     print x
...     
&gt;&gt;&gt; func()
...
UnboundLocalError: local variable 'x' referenced before assignment
</snippet></ROW><ROW><id>18864212</id><snippet>global</snippet></ROW><ROW><id>18864212</id><snippet>global</snippet></ROW><ROW><id>18864212</id><snippet>nonlocal</snippet></ROW><ROW><id>18864212</id><snippet>nonlocal</snippet></ROW><ROW><id>18864212</id><snippet>x</snippet></ROW><ROW><id>18864212</id><snippet>A</snippet></ROW><ROW><id>18864212</id><snippet>A.x</snippet></ROW><ROW><id>18864212</id><snippet>&gt;&gt;&gt; x = 'outer'
&gt;&gt;&gt; class A:
...    x += 'inside'  #use the value of global `x` to create a new attribute `A.x`
...    print x        #prints `A.x`
...     
outerinside
&gt;&gt;&gt; print x
outer
</snippet></ROW><ROW><id>18864212</id><snippet>&gt;&gt;&gt; A.x
'outerinside'
</snippet></ROW><ROW><id>18864212</id><snippet>global</snippet></ROW><ROW><id>18864212</id><snippet>&gt;&gt;&gt; x = 'outer'
&gt;&gt;&gt; class A:
...     global x
...     x += 'inner' #now x is not a class attribute, you just modified the global x
...     print x
...     
outerinner
&gt;&gt;&gt; x
'outerinner'
&gt;&gt;&gt; A.x
AttributeError: class A has no attribute 'x'
</snippet></ROW><ROW><id>18864212</id><snippet>&gt;&gt;&gt; x = 'outer'
&gt;&gt;&gt; class A:
...     print x                      #fetch from globals or builitns
...     x = 'I am a class attribute' #declare a class attribute
...     print x                      #print class attribute, i.e `A.x`
...     
outer
I am a class attribute
&gt;&gt;&gt; x
'outer'
&gt;&gt;&gt; A.x
'I am a class attribute'
</snippet></ROW><ROW><id>18864212</id><snippet>global</snippet></ROW><ROW><id>18864212</id><snippet>nonlocal</snippet></ROW><ROW><id>18864212</id><snippet>&gt;&gt;&gt; outer = 'global'
&gt;&gt;&gt; def func():
        enclosing = 'enclosing'
        def inner():
                inner = 'inner'
                print inner           #fetch from (L)ocal scope
                print enclosing       #fetch from (E)nclosing scope
                print outer           #fetch from (G)lobal scope
                print any             #fetch from (B)uilt-ins
        inner()
...         
&gt;&gt;&gt; func()
inner
enclosing
global
&lt;built-in function any&gt;
</snippet></ROW><ROW><id>18864611</id><snippet>for ele in arr:
    ele = stripEscape(ele)
    if ele == '':
        arr.remove(ele)
</snippet></ROW><ROW><id>18864611</id><snippet>ele</snippet></ROW><ROW><id>18864611</id><snippet>arr</snippet></ROW><ROW><id>18864611</id><snippet>arr</snippet></ROW><ROW><id>18864611</id><snippet>arr</snippet></ROW><ROW><id>18864611</id><snippet>for ele in arr:
    if ele != "":
        newArray.append(stripEscape(ele))


for ele in newArray:
    logFile.write("ele: "+ele+'\n') 
    if re.match('/table', ele):
        logFile.write("END OF TABLE FOUND")
        logFile.write("\nele: "+ele+'\n')
        break
</snippet></ROW><ROW><id>18864880</id><snippet>isinstance</snippet></ROW><ROW><id>18864880</id><snippet>collections.Iterable</snippet></ROW><ROW><id>18864880</id><snippet>from collections import Iterable
def my_print(inp):
    #As suggested by @user2357112
    if not isinstance(inp, Iterable) or isinstance(inp, basestring):
        inp = [inp]                           #use just `str` in py3.x
    for item in inp:  #use `yield from inp` in py3.x                     
        yield item
...         
&gt;&gt;&gt; for x in my_print('foo'):
...     print x
...     
foo
&gt;&gt;&gt; for x in my_print(range(3)):
    print x
...     
0
1
2
&gt;&gt;&gt; for x in my_print(dict.fromkeys('abcd')):
    print x
...     
a
c
b
d
</snippet></ROW><ROW><id>18864880</id><snippet>pprint</snippet></ROW><ROW><id>18864983</id><snippet>L</snippet></ROW><ROW><id>18864983</id><snippet>M</snippet></ROW><ROW><id>18864983</id><snippet>context</snippet></ROW><ROW><id>18864983</id><snippet>get_month_names</snippet></ROW><ROW><id>18864983</id><snippet>'M'</snippet></ROW><ROW><id>18864983</id><snippet>'L'</snippet></ROW><ROW><id>18864983</id><snippet>'M'</snippet></ROW><ROW><id>18864983</id><snippet>'L'</snippet></ROW><ROW><id>18864983</id><snippet>Field  Format  Stand Alone
Month  M       L
</snippet></ROW><ROW><id>18865028</id><snippet>from multiprocessing import Process
import sys

rocket = 0

def func1():
    global rocket
    print 'start func1'
    while rocket &lt; sys.maxint:
        rocket += 1
    print 'end func1'

def func2():
    global rocket
    print 'start func2'
    while rocket &lt; sys.maxint:
        rocket += 1
    print 'end func2'

if __name__=='__main__':
     p1 = Process(target = func1)
     p1.start()
     p2 = Process(target = func2)
     p2.start()
</snippet></ROW><ROW><id>18865047</id><snippet>sudo nano /Users/&lt;username&gt;/.profile
</snippet></ROW><ROW><id>18865047</id><snippet>sudo nano /Users/&lt;username&gt;/.bash_profile
</snippet></ROW><ROW><id>18865047</id><snippet>python</snippet></ROW><ROW><id>18865047</id><snippet>exit()</snippet></ROW><ROW><id>18865133</id><snippet>with open('path/to/input') as infile, open('path/to/output', 'w') as outfile:
    copy = False
    for line in infile:
        if line.strip() == "Start":
            copy = True
        elif line.strip() == "End":
            copy = False
        elif copy:
            outfile.write(line)
</snippet></ROW><ROW><id>18865237</id><snippet>with open('words.txt') as f:
    words = [word.strip() for word in f]
</snippet></ROW><ROW><id>18865398</id><snippet>                                binPayload.insert(binPayload[j],0)
                                binPayload.insert(binPayload[j],1)
</snippet></ROW><ROW><id>18865398</id><snippet>j</snippet></ROW><ROW><id>18865398</id><snippet>binPayload[j]</snippet></ROW><ROW><id>18865398</id><snippet>j</snippet></ROW><ROW><id>18865398</id><snippet>binPayload[j]</snippet></ROW><ROW><id>18865398</id><snippet>binPayload[j] = whatever</snippet></ROW><ROW><id>18865398</id><snippet>^</snippet></ROW><ROW><id>18865398</id><snippet>^=</snippet></ROW><ROW><id>18865398</id><snippet>binCrcGen  = [1,1]
binPayload = [1,0,0,1,0]

while len(binCrcGen) &lt;= len(binPayload) and binPayload:
    if binPayload[0] == binCrcGen[0]:
        del binPayload[0]
        for j in range(len(binCrcGen)-1):
            binPayload[j] ^= binCrcGen[j+1]
        print(binPayload, "binPayload")
    while binPayload and binPayload[0] == 0:
        del binPayload[0]
        print(binPayload, "binPayload")
</snippet></ROW><ROW><id>18865491</id><snippet>res= table.objects.values('lat','lng') res1 = table 1.objects.values('lat','lng')

poi = list(res) + list(res1)
</snippet></ROW><ROW><id>18865524</id><snippet>parse_known_args</snippet></ROW><ROW><id>18865524</id><snippet>init.py</snippet></ROW><ROW><id>18865524</id><snippet>caller1.py</snippet></ROW><ROW><id>18865524</id><snippet>caller2.py</snippet></ROW><ROW><id>18865524</id><snippet>init.py</snippet></ROW><ROW><id>18865524</id><snippet>-a</snippet></ROW><ROW><id>18865524</id><snippet>init.py</snippet></ROW><ROW><id>18865524</id><snippet>do_things</snippet></ROW><ROW><id>18865524</id><snippet>parser = argparse.ArgumentParser()
parser.add_argument('-a')
parsed = parser.parse_known_args(sys.argv)
print 'From init.py: %s' % parsed['a']
</snippet></ROW><ROW><id>18865524</id><snippet>caller1.py</snippet></ROW><ROW><id>18865524</id><snippet>init.do_things(sys.argv)
parser = argparse.ArgumentParser()
parser.add_argument('-b')
parsed = parser.parse_known_args(sys.argv)
print 'From caller1.py: %s' % parsed['b']
</snippet></ROW><ROW><id>18865524</id><snippet>caller1.py</snippet></ROW><ROW><id>18865524</id><snippet>python caller1.py -a foo -b bar</snippet></ROW><ROW><id>18865524</id><snippet>From init.py: foo
From caller1.py: bar
</snippet></ROW><ROW><id>18865524</id><snippet>ArgumentParser</snippet></ROW><ROW><id>18865524</id><snippet>caller1.py</snippet></ROW><ROW><id>18865524</id><snippet>init.py</snippet></ROW><ROW><id>18865785</id><snippet>import requests

s = requests.Session()
s.verify = False
s.auth = (token01, token02)
resp = s.get(url, params={'name': token01}, stream=True)
content = resp.content
</snippet></ROW><ROW><id>18865785</id><snippet>stream=True</snippet></ROW><ROW><id>18865785</id><snippet>resp.raw</snippet></ROW><ROW><id>18865785</id><snippet>for line in resp.iter_lines():
    # process a line
</snippet></ROW><ROW><id>18865785</id><snippet>for chunk in resp.iter_content():
    # process a chunk
</snippet></ROW><ROW><id>18865785</id><snippet>resp.raw</snippet></ROW><ROW><id>18865785</id><snippet>stream=True</snippet></ROW><ROW><id>18865785</id><snippet>.read()</snippet></ROW><ROW><id>18865785</id><snippet>stream=True</snippet></ROW><ROW><id>18865785</id><snippet>resp.content</snippet></ROW><ROW><id>18865785</id><snippet>resp.text</snippet></ROW><ROW><id>18866071</id><snippet>sea</snippet></ROW><ROW><id>18866071</id><snippet>sear</snippet></ROW><ROW><id>18866071</id><snippet>search</snippet></ROW><ROW><id>18866071</id><snippet>(sea)+(r?((ch)?))
     ^  ^     ^
     2  1     1
</snippet></ROW><ROW><id>18866071</id><snippet>1</snippet></ROW><ROW><id>18866071</id><snippet>seach</snippet></ROW><ROW><id>18866071</id><snippet>r</snippet></ROW><ROW><id>18866071</id><snippet>ch</snippet></ROW><ROW><id>18866071</id><snippet>seach</snippet></ROW><ROW><id>18866071</id><snippet>sea</snippet></ROW><ROW><id>18866071</id><snippet>seaseasear</snippet></ROW><ROW><id>18866071</id><snippet>sea(r(ch)?)?
</snippet></ROW><ROW><id>18866071</id><snippet>?</snippet></ROW><ROW><id>18866071</id><snippet>search</snippet></ROW><ROW><id>18866071</id><snippet>sear</snippet></ROW><ROW><id>18866071</id><snippet>sea</snippet></ROW><ROW><id>18866071</id><snippet>re.search</snippet></ROW><ROW><id>18866201</id><snippet>return getNum(numList)
</snippet></ROW><ROW><id>18866201</id><snippet>getNum(numList)
</snippet></ROW><ROW><id>18866201</id><snippet>getNum</snippet></ROW><ROW><id>18866201</id><snippet>getNum</snippet></ROW><ROW><id>18866503</id><snippet>&gt;&gt;&gt; '100' &gt; '5'
False
</snippet></ROW><ROW><id>18866503</id><snippet>if</snippet></ROW><ROW><id>18866503</id><snippet>while</snippet></ROW><ROW><id>18866503</id><snippet>break</snippet></ROW><ROW><id>18866503</id><snippet>count = 0
num = int(input("What would you like to do [1,2,3,4]? "))
while 0 &lt; num &lt; 5:
    if num == 1:
       Do something
       ...
    if num == 4 and count != 1:
       print("The End")
       count += 1
       break          #breaks out of the `while` loop
</snippet></ROW><ROW><id>18866503</id><snippet>if-elif-else</snippet></ROW><ROW><id>18866503</id><snippet>if</snippet></ROW><ROW><id>18866503</id><snippet>if</snippet></ROW><ROW><id>18866503</id><snippet>if-elif-else</snippet></ROW><ROW><id>18866503</id><snippet>True</snippet></ROW><ROW><id>18866843</id><snippet>defaultdict(list)</snippet></ROW><ROW><id>18866843</id><snippet>from collections import defaultdict

def tree(): 
    return defaultdict(tree)

test = tree()

test['Store']['bucket']['fruits'] = []
test['Store']['bucket']['fruits'].append(1)
test['Store']['bucket-13']['fruits'] = ['mango', 'apple', 'banana']

print test
</snippet></ROW><ROW><id>18866843</id><snippet>defaultdict(list)</snippet></ROW><ROW><id>18866843</id><snippet>test = tree()

test['Store']['bucket'] = defaultdict(list)

test['Store']['bucket']['fruit'].append('mango')  
test['Store']['bucket']['meat'].append('chicken') 

# 'fruit' and 'meat' now default to an empty list
</snippet></ROW><ROW><id>18866923</id><snippet>Base64.decode("</snippet></ROW><ROW><id>18866923</id><snippet>&gt;&gt;&gt; print base64.b64decode('Base64.decode("MzEuMTMuMTcuMjE0')
��^r�^31.13.17.214
</snippet></ROW><ROW><id>18866923</id><snippet>&gt;&gt;&gt; pattern = re.compile('Base64.decode\("(...)"\)')
</snippet></ROW><ROW><id>18866923</id><snippet>group()</snippet></ROW><ROW><id>18866923</id><snippet>&gt;&gt;&gt; pattern.search(s).group()
'Base64.decode("MzEuMTMuMTcuMjE0")'
</snippet></ROW><ROW><id>18866923</id><snippet>&gt;&gt;&gt; pattern.search(s).groups()[0]
'MzEuMTMuMTcuMjE0'
</snippet></ROW><ROW><id>18866962</id><snippet>print u'{}'.format(a)
</snippet></ROW><ROW><id>18866962</id><snippet>&gt;&gt;&gt; a=u'\u0440\u0435\u044c\u0434\u0437\u0444\u043a\u044b\u0443\u043a \u043c\u0443\u043a\u044b\u0448\u0449\u0442 \u0430\u0448\u0447'
&gt;&gt;&gt; print u'{}'.format(a)
реьдзфкыук мукышщт ашч
</snippet></ROW><ROW><id>18866962</id><snippet>u"..."</snippet></ROW><ROW><id>18866962</id><snippet>"..."</snippet></ROW><ROW><id>18866962</id><snippet>str.format()</snippet></ROW><ROW><id>18866973</id><snippet>@task
def show_roles():
    for key, value in sorted(env.roledefs.items()):
        print key, value
</snippet></ROW><ROW><id>18866973</id><snippet>fab show_roles

dev-server ['devel1', 'devel2', ...]
dev-server-root ['root@...', ..]
dev-systems &lt;function get_roledefs_dev at 0x22bc230&gt;
....
</snippet></ROW><ROW><id>18867122</id><snippet>:\</snippet></ROW><ROW><id>18867122</id><snippet>:/</snippet></ROW><ROW><id>18867132</id><snippet>plt.bar</snippet></ROW><ROW><id>18867132</id><snippet>left</snippet></ROW><ROW><id>18867132</id><snippet>height</snippet></ROW><ROW><id>18867132</id><snippet>height</snippet></ROW><ROW><id>18867132</id><snippet>mainlist[cnt]</snippet></ROW><ROW><id>18867132</id><snippet>index + (bar_width * cnt)</snippet></ROW><ROW><id>18867132</id><snippet>x</snippet></ROW><ROW><id>18867132</id><snippet>bar_with*cnt</snippet></ROW><ROW><id>18867132</id><snippet>left</snippet></ROW><ROW><id>18867132</id><snippet>index</snippet></ROW><ROW><id>18867132</id><snippet>index = np.arange(groups)</snippet></ROW><ROW><id>18867132</id><snippet>group</snippet></ROW><ROW><id>18867132</id><snippet>subgroup</snippet></ROW><ROW><id>18867132</id><snippet>templist</snippet></ROW><ROW><id>18867132</id><snippet>subgroup</snippet></ROW><ROW><id>18867132</id><snippet>mainlist</snippet></ROW><ROW><id>18867132</id><snippet>numpy.random</snippet></ROW><ROW><id>18867347</id><snippet>steam_string = "&lt;a href='{0}' alt='{1}\'s profile'&gt;&lt;img src='{2}' alt='{1}\'s avatar' &gt;{1}&lt;/a&gt;".format(url, handle, avatar)
</snippet></ROW><ROW><id>18867347</id><snippet>.format()</snippet></ROW><ROW><id>18867347</id><snippet>str.format</snippet></ROW><ROW><id>18867347</id><snippet>str</snippet></ROW><ROW><id>18867347</id><snippet>unicode.format</snippet></ROW><ROW><id>18867347</id><snippet>unicode</snippet></ROW><ROW><id>18867347</id><snippet>%</snippet></ROW><ROW><id>18867347</id><snippet>str % unicode -&gt; unicode</snippet></ROW><ROW><id>18867347</id><snippet>u""</snippet></ROW><ROW><id>18867347</id><snippet>return mark_safe(steam_string)
</snippet></ROW><ROW><id>18867347</id><snippet>"alt='{1}\'s profile'"
</snippet></ROW><ROW><id>18867347</id><snippet>\'</snippet></ROW><ROW><id>18867347</id><snippet>alt='someone's profile'
</snippet></ROW><ROW><id>18867347</id><snippet>'s profile</snippet></ROW><ROW><id>18867347</id><snippet>from django.utils.html import escape
...
return mark_safe(
    u'&lt;a href="{0}" alt="{1}\'s profile"&gt;'
        u'&lt;img src="{2}" alt="{1}\'s avatar"&gt;{1}'
    u'&lt;/a&gt;'
).format(escape(url), escape(handle), escape(avatar))
</snippet></ROW><ROW><id>18867646</id><snippet>addBookmark</snippet></ROW><ROW><id>18867646</id><snippet>#!/usr/bin/env python
from PyPDF2 import PdfFileWriter, PdfFileReader
output = PdfFileWriter()
input1 = PdfFileReader(open('introduction.pdf', 'rb'))
output.addPage(input1.getPage(0))
input2 = PdfFileReader(open('hello.pdf', 'rb'))
output.addPage(input2.getPage(0))

parent = output.addBookmark('Introduction', 0) # add parent bookmark
output.addBookmark('Hello, World', 0, parent) # add child bookmark
</snippet></ROW><ROW><id>18867948</id><snippet>headers</snippet></ROW><ROW><id>18867948</id><snippet>print</snippet></ROW><ROW><id>18867948</id><snippet>requests</snippet></ROW><ROW><id>18867948</id><snippet>headers</snippet></ROW><ROW><id>18867948</id><snippet>headers</snippet></ROW><ROW><id>18867948</id><snippet>Request</snippet></ROW><ROW><id>18868460</id><snippet>def</snippet></ROW><ROW><id>18868460</id><snippet>hashlib.md5</snippet></ROW><ROW><id>18868460</id><snippet>def save(self, *args, **kwargs):
    if self.avatar is not None:
        # Do your stuff
        cur_file = AccountUser.objects.get(pk=self.pk).avatar.file
        cur_file_hash = md5(cure_file.read()).hexdigest()
        new_file_hash = md5(temp_handle_img.read()).hexdigest()
        if cur_file_hash != new_file_hash:
            # Do some stuff
</snippet></ROW><ROW><id>18868693</id><snippet>sys.exc_info()</snippet></ROW><ROW><id>18868693</id><snippet>exceptions</snippet></ROW><ROW><id>18868693</id><snippet>e = sys.exc_info()
exceptions.append(e)
</snippet></ROW><ROW><id>18868693</id><snippet>sys.exc_info()</snippet></ROW><ROW><id>18868693</id><snippet>(type, value, traceback)</snippet></ROW><ROW><id>18868693</id><snippet>a, b, c = exceptions[0]
raise b
</snippet></ROW><ROW><id>18868693</id><snippet>a, b, c = exceptions[0]
raise a(b).with_traceback(c)
</snippet></ROW><ROW><id>18868821</id><snippet>strftime()</snippet></ROW><ROW><id>18868821</id><snippet>import time
current_time = time.strftime("%m.%d.%y %H:%M", time.localtime())
output_name = 'SORT/epg_slo_xml%s.txt' % current_time
output_file = open(output_name, "w")
</snippet></ROW><ROW><id>18868878</id><snippet>'name' in [excel_file.Sheets(i).Name for i in range(1,excel_file.Sheets.Count+1)]
</snippet></ROW><ROW><id>18868893</id><snippet>next_available_rd()</snippet></ROW><ROW><id>18868893</id><snippet>class RD_handler(models.Model)</snippet></ROW><ROW><id>18868893</id><snippet>current_id</snippet></ROW><ROW><id>18868893</id><snippet>RD_handler</snippet></ROW><ROW><id>18868893</id><snippet>next_available_rd()</snippet></ROW><ROW><id>18868953</id><snippet>python cwm.py --rdf source-file.rdf --n3 &gt; target-file.n3
</snippet></ROW><ROW><id>18868990</id><snippet>class Task(object):       
    def __init__(self, id, title):
        self.id = id
        self.title = title

    def as_dict(self):
        return {
            "id": self.id,
            "title": self.title
        }
</snippet></ROW><ROW><id>18868990</id><snippet>tasklist = [
   Task(1, u"Task 1"), 
   Task(2, u"Task 2"),
   Task(3, u"Task 3"),
   Task(4, u"Task 4")
]
tasklist = [task.as_dict() for task in tasklist]
return render_template( "tasklist.html", tasklist=tasklist)
</snippet></ROW><ROW><id>18869168</id><snippet>with open("new.txt", "wt") as out:
    for line in open("source.txt"):
        out.write('/' + line.rsplit('/', 1)[1])
</snippet></ROW><ROW><id>18869377</id><snippet>del MyClass</snippet></ROW><ROW><id>18869377</id><snippet>MyClass</snippet></ROW><ROW><id>18869377</id><snippet>In [1]: class C(object):
   ...:     def hello(self):
   ...:         print 'I am an instance of the old class'
In [2]: c = C()
In [3]: c.hello()
I am an instance of the old class
In [4]: class C(object):
   ...:     def hello(self):
   ...:         print 'I am an instance of the new class'
In [5]: c.hello()
I am an instance of the old class
In [6]: c = C()
In [7]: c.hello()
I am an instance of the new class
</snippet></ROW><ROW><id>18869431</id><snippet>item_list[0].childNodes[1].childNodes</snippet></ROW><ROW><id>18869431</id><snippet>item_list[0].childNodes[11].childNodes[0].nodeValue
</snippet></ROW><ROW><id>18869431</id><snippet>u'2012-08-01'
</snippet></ROW><ROW><id>18869431</id><snippet>1</snippet></ROW><ROW><id>18869431</id><snippet>nodeValue</snippet></ROW><ROW><id>18869431</id><snippet>childNodes</snippet></ROW><ROW><id>18869431</id><snippet>3</snippet></ROW><ROW><id>18869431</id><snippet>nodeValue</snippet></ROW><ROW><id>18869581</id><snippet>{
    "a": 1,
    "b": {
        "c": 2,
        "d": { "e": 3 }
    },
    "f": 4,
    "g": 5   
}
</snippet></ROW><ROW><id>18869581</id><snippet>=</snippet></ROW><ROW><id>18869581</id><snippet>{...}</snippet></ROW><ROW><id>18869581</id><snippet>[...]</snippet></ROW><ROW><id>18869581</id><snippet>;</snippet></ROW><ROW><id>18869779</id><snippet>import Image
import ImageFont
import ImageDraw

img = Image.open("in.jpg")

draw = ImageDraw.Draw(img)
font = ImageFont.truetype(
    "/usr/share/fonts/truetype/ubuntu-font-family/Ubuntu-C.ttf", 66)
x, y = (width - 510, height-100)
# x, y = 10, 10
text = "copyright"
w, h = font.getsize(text)
draw.rectangle((x, y, x + w, y + h), fill='black')
draw.text((x, y), text, fill=(209, 239, 8), font=font)
img.save('out.jpg')
</snippet></ROW><ROW><id>18869779</id><snippet>import Image
import ImageFont
import ImageDraw

font = ImageFont.truetype(
    "/usr/share/fonts/truetype/ubuntu-font-family/Ubuntu-C.ttf", 66)
text = "copyright"
size = font.getsize(text)
img = Image.new('RGBA', size=size, color=(0, 0, 0, 0))
draw = ImageDraw.Draw(img)
draw.text((0, 0), text, fill=(209, 239, 8), font=font)
img.save('label.jpg')
</snippet></ROW><ROW><id>18869779</id><snippet>subprocess</snippet></ROW><ROW><id>18869779</id><snippet>composite -dissolve 25% -gravity south label.jpg in.jpg out.jpg
</snippet></ROW><ROW><id>18869779</id><snippet>composite -compose bumpmap -gravity southeast label.jpg in.jpg out.jpg
</snippet></ROW><ROW><id>18869779</id><snippet>subprocess</snippet></ROW><ROW><id>18869779</id><snippet>import Image
import ImageFont
import ImageDraw
import subprocess
import shlex

font = ImageFont.truetype(
    "/usr/share/fonts/truetype/ubuntu-font-family/Ubuntu-C.ttf", 66)
text = "copyright"
size = font.getsize(text)
img = Image.new('RGBA', size=size, color='white')
draw = ImageDraw.Draw(img)
draw.text((0, 0), text, fill=(209, 239, 8), font=font)
img.save('label.jpg')

cmd = 'composite -compose bumpmap -gravity southeast label.jpg in.jpg out.jpg'
proc = subprocess.Popen(shlex.split(cmd))
proc.communicate()
</snippet></ROW><ROW><id>18869911</id><snippet>allowed_domains = [ 'trend-in-brand.ru' ]
</snippet></ROW><ROW><id>18869911</id><snippet>start_urls = [ 'http://brand-in-trend.ru/brands/' ]
</snippet></ROW><ROW><id>18869911</id><snippet>trend-in-brand</snippet></ROW><ROW><id>18869911</id><snippet>brand-in-trend</snippet></ROW><ROW><id>18870010</id><snippet>&gt;&gt;&gt; import datetime
&gt;&gt;&gt; dt = datetime.date(2013,12,30)
&gt;&gt;&gt; dt.isocalendar()
(2014, 1, 1)
&gt;&gt;&gt; dt.strftime("%U")
'52'
</snippet></ROW><ROW><id>18870010</id><snippet>&gt;&gt;&gt; import datetime
&gt;&gt;&gt; dt = datetime.date(2013,12,30)
&gt;&gt;&gt; w = datetime.timedelta(weeks=1)
&gt;&gt;&gt; dt - w
datetime.date(2013, 12, 23)
&gt;&gt;&gt; dt + w
datetime.date(2014, 1, 6)
&gt;&gt;&gt; dt + 10 * w
datetime.date(2014, 3, 10)
</snippet></ROW><ROW><id>18870079</id><snippet>get_datastream()</snippet></ROW><ROW><id>18870284</id><snippet>xmlrpclib</snippet></ROW><ROW><id>18870284</id><snippet>xmlrpclib.Unmarshaller</snippet></ROW><ROW><id>18870284</id><snippet>Unmarshaller</snippet></ROW><ROW><id>18870284</id><snippet>dispatch</snippet></ROW><ROW><id>18870284</id><snippet>xmlrpclib</snippet></ROW><ROW><id>18870284</id><snippet>i8</snippet></ROW><ROW><id>18870284</id><snippet>ex:i8</snippet></ROW><ROW><id>18870284</id><snippet>xmlrpclib.Unmarshaller.dispatch['ex:i8'] = xmlrpclib.Unmarshaller.dispatch['i8']
</snippet></ROW><ROW><id>18870284</id><snippet>Unmarshaller</snippet></ROW><ROW><id>18870284</id><snippet>def end_int(self, data):
    self.append(int(data))
    self._value = 0
dispatch['i8'] = end_int
</snippet></ROW><ROW><id>18870284</id><snippet>_value = 0</snippet></ROW><ROW><id>18870284</id><snippet>&lt;methodResponse&gt;
    &lt;params&gt;
        &lt;param&gt;
            &lt;value&gt;
                &lt;mycustom&gt;some value&lt;/mycustom&gt;
            &lt;/value&gt;
        &lt;/param&gt;
     &lt;/params&gt;
&lt;/methodResponse&gt;
</snippet></ROW><ROW><id>18870284</id><snippet>def mycustom_parser(unmarshaller, data):
    unmarshaller.append(data.split())
    unmarshaller._value = 0
xmlrpclib.Unmarshaller.dispatch['mycustom'] = mycustom_parser
</snippet></ROW><ROW><id>18870707</id><snippet>replacedWord = wordDict.get(currentWord, 'rare_word')
</snippet></ROW><ROW><id>18870973</id><snippet>sudo make install
</snippet></ROW><ROW><id>18870973</id><snippet>sudo python setup.py install
</snippet></ROW><ROW><id>18871140</id><snippet>copy</snippet></ROW><ROW><id>18871140</id><snippet>__class__</snippet></ROW><ROW><id>18871140</id><snippet>__new__</snippet></ROW><ROW><id>18871140</id><snippet>__init__</snippet></ROW><ROW><id>18871140</id><snippet>__copy__</snippet></ROW><ROW><id>18871140</id><snippet>class Singleton(type):
    """Metaclass which implements the singleton pattern"""

    _instances = {}

    def __call__(self, *args, **kwargs):
        if self not in self._instances:
            self._instances[self] = super(Singleton, self).__call__(*args, **kwargs)
        return self._instances[self]

    def __copy__(cls, instance):
        return instance
</snippet></ROW><ROW><id>18871140</id><snippet>copy</snippet></ROW><ROW><id>18871140</id><snippet>__copy__</snippet></ROW><ROW><id>18871140</id><snippet>__copy__</snippet></ROW><ROW><id>18871140</id><snippet>copy</snippet></ROW><ROW><id>18871140</id><snippet>__copy__</snippet></ROW><ROW><id>18871140</id><snippet>self</snippet></ROW><ROW><id>18871140</id><snippet>__deepcopy__</snippet></ROW><ROW><id>18871282</id><snippet>from requests import Session, Request

s = Session()
p = Request('GET', 'http://someurl.com', params=request_parameters).prepare()
log.append(p.url)
</snippet></ROW><ROW><id>18871282</id><snippet>r = s.send(p)
</snippet></ROW><ROW><id>18871394</id><snippet>cv2.imread</snippet></ROW><ROW><id>18871394</id><snippet>CV_LOAD_IMAGE_GRAYSCALE</snippet></ROW><ROW><id>18871394</id><snippet>&gt;&gt;&gt; import cv2
&gt;&gt;&gt; image = cv2.imread('foo.jpg')
&gt;&gt;&gt; print image.shape
 (184, 300, 3)
&gt;&gt;&gt; gray_image = cv2.cvtColor(image, cv2.COLOR_BGR2GRAY)
&gt;&gt;&gt; print gray_image.shape 
 (184, 300)
&gt;&gt;&gt; cv2.imwrite('gray.jpg', gray_image)
</snippet></ROW><ROW><id>18871394</id><snippet>&gt;&gt;&gt; image = cv2.imread('gray.jpg')
&gt;&gt;&gt; print image.shape
 (184, 300, 3)
</snippet></ROW><ROW><id>18871394</id><snippet>&gt;&gt;&gt; from scipy.ndimage import imread
&gt;&gt;&gt; image2 = imread('gray.jpg')
&gt;&gt;&gt; print image2.shape
 (184, 300)
</snippet></ROW><ROW><id>18871394</id><snippet>CV_LOAD_IMAGE_GRAYSCALE</snippet></ROW><ROW><id>18871434</id><snippet>from collections import OrderedDict
import json

allsites = [
    {
        'A5': 'G',
        'A10': 'G',
        'site': 'example1.com',
        'A1': 'G'
    },
    {
        'A5': 'R',
        'A10': 'Y',
        'site': 'example2.com',
        'A1': 'G'
    }
]

sort_order = ['site', 'A1', 'A5', 'A10']
allsites_ordered = [OrderedDict(sorted(item.iteritems(), key=lambda (k, v): sort_order.index(k)))
                    for item in allsites]

data = {'Author': "joe", 'data': allsites_ordered}
print json.dumps(data, indent=4, separators=(',', ': '))
</snippet></ROW><ROW><id>18871434</id><snippet>{
    "data": [
        {
            "site": "example1.com",
            "A1": "G",
            "A5": "G",
            "A10": "G"
        },
        {
            "site": "example2.com",
            "A1": "G",
            "A5": "R",
            "A10": "Y"
        }
    ],
    "Author": "joe"
}
</snippet></ROW><ROW><id>18871667</id><snippet>hist, bin_edges = apply_along_axis(lambda x: histogram(x, bins=bins), 0, B)
</snippet></ROW><ROW><id>18871669</id><snippet>target</snippet></ROW><ROW><id>18871893</id><snippet>import wx


class Mainframe(wx.Frame):
    def __init__(self, parent):
        wx.Frame.__init__(self, parent)
        self.panel = wx.Panel(self)

        ctrls = []
        for n in range(6):
            ctrls.append(wx.StaticText(self.panel, label='bad',
                pos=(20, 30 * n)))

        ctrls[1].SetLabel('good')
        ctrls[5].SetLabel('excellent')


if __name__ == '__main__':
    app = wx.App(False)
    frame = Mainframe(None)
    frame.Show()
    app.MainLoop()
</snippet></ROW><ROW><id>18872144</id><snippet> self.smtpaccess = ""
</snippet></ROW><ROW><id>18872144</id><snippet>""</snippet></ROW><ROW><id>18872144</id><snippet>authenticate</snippet></ROW><ROW><id>18872144</id><snippet>self.smtpaccess = smtplib.SMTP(self.MAILSERVER , self.MAILPORT)
</snippet></ROW><ROW><id>18872144</id><snippet>authenticate</snippet></ROW><ROW><id>18872144</id><snippet>outlookLogin</snippet></ROW><ROW><id>18872144</id><snippet>__init__</snippet></ROW><ROW><id>18872394</id><snippet>QTableWidget</snippet></ROW><ROW><id>18872394</id><snippet>QWidget</snippet></ROW><ROW><id>18872394</id><snippet>hide()</snippet></ROW><ROW><id>18872437</id><snippet>sqlite3</snippet></ROW><ROW><id>18872437</id><snippet>Sqlite</snippet></ROW><ROW><id>18872437</id><snippet>Qsqlite</snippet></ROW><ROW><id>18872599</id><snippet>bytes</snippet></ROW><ROW><id>18872599</id><snippet>str</snippet></ROW><ROW><id>18872599</id><snippet>utf-8</snippet></ROW><ROW><id>18872599</id><snippet>info.size = len(data)
tar.addfile(info, StringIO(data))
</snippet></ROW><ROW><id>18872599</id><snippet>encoded = data.encode('utf-8')
info.size = len(encoded)
tar.addfile(info, BytesIO(encoded))
</snippet></ROW><ROW><id>18872677</id><snippet>zip()</snippet></ROW><ROW><id>18872677</id><snippet>*</snippet></ROW><ROW><id>18872677</id><snippet>&gt;&gt;&gt; strs="""15-09-2013,9381,15913,88,26972,8466
... 16-09-2013,9413,15949,88,27015,8466
... 17-09-2013,9426,15968,88,27041,8871
... 18-09-2013,9439,15995,88,27082,8934"""
&gt;&gt;&gt; lis = [line.rstrip().split(',') for line in strs.splitlines()]
&gt;&gt;&gt; dates, ques, ans, perc, users, visits = zip(*lis)
&gt;&gt;&gt; dates
('15-09-2013', '16-09-2013', '17-09-2013', '18-09-2013')
&gt;&gt;&gt; ques
('9381', '9413', '9426', '9439')
...
</snippet></ROW><ROW><id>18872770</id><snippet>a = [['John', 'Sergeant '], ['Jack', 'Commander '], ['Jill', 'Captain ']]
b = ['800','854','453']
c = [x+[y] for x,y in zip(a,b)]
print c
</snippet></ROW><ROW><id>18872770</id><snippet>[['John', 'Sergeant ', '800'], ['Jack', 'Commander ', '854'], ['Jill', 'Captain ', '453']]
</snippet></ROW><ROW><id>18872777</id><snippet>from nltk.corpus import wordnet as wn
from itertools import product

wordx, wordy = "cat","dog"
sem1, sem2 = wn.synsets(wordx), wn.synsets(wordy)

maxscore = 0
for i,j in list(product(*[sem1,sem2])):
  score = i.wup_similarity(j) # Wu-Palmer Similarity
  maxscore = score if maxscore &lt; score else maxscore
</snippet></ROW><ROW><id>18872777</id><snippet>difflib</snippet></ROW><ROW><id>18872804</id><snippet>@app.route('/&lt;path:path&gt;')
@app.route('/')
def admin(path=None):
    return render_template('angular_interface.html')
</snippet></ROW><ROW><id>18872804</id><snippet>__init__.py
api
api/__init__.py
api/resources.py
api/views.py
static/interface/css/style.css
static/interface/js/app.js
static/interface/js/other_modules_etc.js
static/shared/js/angular.js
static/shared/js/restangular.js
templates/interface.html
</snippet></ROW><ROW><id>18872804</id><snippet>__init__.py</snippet></ROW><ROW><id>18872804</id><snippet>&lt;html&gt;
&lt;head&gt;
  &lt;title&gt;Blah&lt;/title&gt;
  &lt;link rel="stylesheet" href="{{ url_for('static', filename='interface/css/style.css') }}"/&gt;
  &lt;script src="{{ url_for('static', filename='shared/js/angular.js') }}"&gt;&lt;/script&gt;
  &lt;script src="{{ url_for('static', filename='shared/js/restangular.js') }}"&gt;&lt;/script&gt;
  &lt;script src="{{ url_for('static', filename='interface/js/app.js') }}"&gt;&lt;/script&gt;
&lt;/head&gt;
&lt;body&gt;
  {% raw %}
  &lt;div ng-app="blah" ng-cloak&gt;
    &lt;div ng-controller="BlahCtrl" class="sidebar"&gt;
    &lt;/div&gt;
  &lt;/div&gt;
  {% endraw %}
&lt;/body&gt;
&lt;/html&gt;
</snippet></ROW><ROW><id>18873131</id><snippet>json.dumps</snippet></ROW><ROW><id>18873131</id><snippet>indent</snippet></ROW><ROW><id>18873131</id><snippet>print(json.dumps(obj, indent=2))
</snippet></ROW><ROW><id>18873252</id><snippet># Limit the week
limited = frame[frame['week'] &lt;= n]
# Calculate the home and away points
home_points= limited.groupby('home').sum()['homePTS']
away_points = limited.groupby('away').sum()['awayPTS']
# Sum them
home_points.add(away_points, fill_value=0)
</snippet></ROW><ROW><id>18873252</id><snippet>ATL     88
CHI    265
DAL    110
DET    185
HOU    179
MIA     95
SEA     95
STL    185
TOR     99
</snippet></ROW><ROW><id>18873252</id><snippet>uniqueTeams = set(frame['home']) | set(frame['away'])

def _earlyGamesPTS(n):
    all_teams = []
    for team in uniqueTeams:
        homePTS = frame['homePTS'][(frame.week &lt;= n) &amp;
                                   (frame.home == team)].sum()
        awayPTS = frame['awayPTS'][(frame.week &lt;= n) &amp;
                                   (frame.away == team)].sum()
        totalPTS = homePTS+ awayPTS
        all_teams.append([team, totalPTS])
    return all_teams
</snippet></ROW><ROW><id>18873252</id><snippet>[['TOR', 99],
 ['DAL', 110],
 ['STL', 185],
 ['CHI', 265],
 ['ATL', 88],
 ['DET', 185],
 ['MIA', 95],
 ['HOU', 179],
 ['SEA', 95]]
</snippet></ROW><ROW><id>18873460</id><snippet>self.psi[ni,:,0,0]</snippet></ROW><ROW><id>18873460</id><snippet>idx = [ni, 0, 0, 0]
idx[axes] = slice(None)
self.psi[tuple(idx)]
</snippet></ROW><ROW><id>18873460</id><snippet>idx = (ni,) + (0,)*(axes-1) + (slice(None),) + (0,)*(3-axes)
sel.psi[idx]
</snippet></ROW><ROW><id>18873460</id><snippet>'xyz'[axes-1]</snippet></ROW><ROW><id>18873460</id><snippet>par.x</snippet></ROW><ROW><id>18873460</id><snippet>geattr(par, 'xyz'[axes-1])</snippet></ROW><ROW><id>18873798</id><snippet>test_sensor_class.instance</snippet></ROW><ROW><id>18873798</id><snippet>test_sensor_class</snippet></ROW><ROW><id>18873798</id><snippet>instance</snippet></ROW><ROW><id>18873798</id><snippet>sample_pressure</snippet></ROW><ROW><id>18873798</id><snippet>def test_check_with_too_high_pressure(self):
    instance = MagicMock()
    instance.sample_pressure.return_value=22
    alarm = Alarm(sensor=instance)
    alarm.check()
    self.assertTrue(alarm.is_alarm_on)
</snippet></ROW><ROW><id>18873798</id><snippet>Sensor()</snippet></ROW><ROW><id>18873798</id><snippet>test_sensor_class</snippet></ROW><ROW><id>18873798</id><snippet>Sensor</snippet></ROW><ROW><id>18873798</id><snippet>def test_check_with_too_high_pressure(self):
    with patch('tire_pressure_monitoring.Sensor') as test_sensor_class:
        mockSensor = MagicMock()
        mockSensor.sample_pressure.return_value = 22
        test_sensor_class.return_value = mockSensor
        alarm = Alarm()
        alarm.check()
        self.assertTrue(alarm.is_alarm_on)
</snippet></ROW><ROW><id>18873833</id><snippet>#!/usr/bin/env python
</snippet></ROW><ROW><id>18873833</id><snippet>chmod +x foobar
</snippet></ROW><ROW><id>18873833</id><snippet>mv foobar /usr/local/bin
</snippet></ROW><ROW><id>18874035</id><snippet>ConnectTo</snippet></ROW><ROW><id>18874035</id><snippet>run</snippet></ROW><ROW><id>18874357</id><snippet>colorbar()</snippet></ROW><ROW><id>18874357</id><snippet>cax</snippet></ROW><ROW><id>18874357</id><snippet>axes</snippet></ROW><ROW><id>18874357</id><snippet># colorbar
axes = plt.subplot2grid((4, 2), (0, 1), rowspan=3)
plt.colorbar(pc, cax=axes)
</snippet></ROW><ROW><id>18874357</id><snippet>subplot2grid</snippet></ROW><ROW><id>18874357</id><snippet>gridspec</snippet></ROW><ROW><id>18874357</id><snippet>from matplotlib import gridspec
gs = gridspec.GridSpec(2, 2, height_ratios=(3, 1), width_ratios=(9, 1))

# first graph
axes = plt.subplot(gs[0,0])
pc = plt.pcolor(df1, cmap='jet')

# second graph
axes = plt.subplot(gs[1,0])
plt.pcolor(df2, cmap='Greys')

# colorbar
axes = plt.subplot(gs[0,1])
plt.colorbar(pc, cax=axes)
</snippet></ROW><ROW><id>18874357</id><snippet>height_ratios</snippet></ROW><ROW><id>18874357</id><snippet>width_ratios</snippet></ROW><ROW><id>18874578</id><snippet>QTableWidget</snippet></ROW><ROW><id>18874578</id><snippet>QTableWidget::setVerticalHeaderLabels</snippet></ROW><ROW><id>18874578</id><snippet>QAbstractItemModel::headerData</snippet></ROW><ROW><id>18874578</id><snippet>QVariant MyModel::headerData (int section, Qt::Orientation orientation, int role) const
{
    if (orientation == Qt::Vertical &amp;&amp; role == Qt::DisplayRole)
    {
        QString persianDigit = ...;// get number in Persian from section value
        return persianDigit;
    }
    else
    {
         return QAbstractItemModel::headerData(section, orientation, role);
    }
}
</snippet></ROW><ROW><id>18875035</id><snippet># pip freeze | grep -E '(Pillow|PIL)'
PIL==1.1.7
Pillow==2.1.0
</snippet></ROW><ROW><id>18875347</id><snippet>sudo zypper ar http://download.opensuse.org/repositories/devel:/languages:/python:/Factory/openSUSE_12.2/devel:languages:python:Factory.repo
</snippet></ROW><ROW><id>18875347</id><snippet>zypper lr</snippet></ROW><ROW><id>18875347</id><snippet> sudo zypper mr -p priority repo_number
</snippet></ROW><ROW><id>18875347</id><snippet>zypper update python3</snippet></ROW><ROW><id>18875375</id><snippet>collections.Counter</snippet></ROW><ROW><id>18875375</id><snippet>&gt;&gt;&gt; from collections import Counter
&gt;&gt;&gt; pay = [ [1,50], [1,100], [1,60], [2,50], [2,80], [2,50]]
&gt;&gt;&gt; c = Counter()
&gt;&gt;&gt; for idx, amt in pay:
    c[idx] += amt
...     
&gt;&gt;&gt; c
Counter({1: 210, 2: 180})
</snippet></ROW><ROW><id>18875525</id><snippet>url(r'^logout', views.logout),  # Adding a '$' at the end of the url means that you cannot add any get parameters.
</snippet></ROW><ROW><id>18875525</id><snippet>from django.contrib.auth import logout as auth_logout
def logout(request):
    auth_logout(request)
    return HttpResponseRedirect("/index/")
</snippet></ROW><ROW><id>18875525</id><snippet>CSRF</snippet></ROW><ROW><id>18876030</id><snippet>from selenium.webdriver.support.ui import Select, WebDriverWait

select = self.br.find_element_by_name( field )  #get the select element            
options = select.find_elements_by_tag_name("option") #get all the options into a list

optionsList = []

for option in options: #iterate over the options, place attribute value in list
    optionsList.append(option.get_attribute("value"))

for optionValue in optionsList:
    print "starting loop on option %s" % optionValue

    select = Select(self.br.find_element_by_name( field ))
    select.select_by_value(optionValue)

    source = self.br.page_source #get the new page source

    #now check to see if some required data is on the navigated page, and print some stuff if so
    if "There is no summary data available." not in source:
         print "the new page is good! Here are the original args: ", optionValue
    #time to go back to the main page and click the next option element
    self.br.back()
    print "went backwards" #for debugging
</snippet></ROW><ROW><id>18876203</id><snippet>from collections import Counter
from operator import add
data = {
    'level1a': {'level2a':[1,2,3]},
    'level1b': {'level2b':[4,5,6]},
    'level1c': {'level2a':[7,8,9]}
}
c = Counter()
dic = {}
for k,v in data.iteritems():
    for k1, v1 in v.iteritems():
        c[k1] += 1
        val = dic.setdefault(k1, [0]*len(v1))
        dic[k1] = map(add, v1, val)

for k,v  in c.iteritems():
    if v &gt; 1:
        print dic[k]
</snippet></ROW><ROW><id>18876203</id><snippet>[8, 10, 12]
</snippet></ROW><ROW><id>18876279</id><snippet>&gt;&gt;&gt; import numpy
&gt;&gt;&gt; a = numpy.array([10,7,2,0])
&gt;&gt;&gt; b = numpy.array([10,9,8,7,6,5,4,3,2,1])

&gt;&gt;&gt; indices = [numpy.where(a&lt;=x)[0][0] for x in b]
[0, 1, 1, 1, 2, 2, 2, 2, 2, 3]

&gt;&gt;&gt; numpy.digitize(b,a)
array([0, 1, 1, 1, 2, 2, 2, 2, 2, 3])
</snippet></ROW><ROW><id>18876279</id><snippet>a = np.arange(50)[::-1]

b = np.random.randint(0,50,1E3)

np.allclose([np.where(a&lt;=x)[0][0] for x in b],np.digitize(b,a))
Out[55]: True
</snippet></ROW><ROW><id>18876279</id><snippet>%timeit [np.where(a&lt;=x)[0][0] for x in b]
100 loops, best of 3: 4.97 ms per loop

%timeit np.digitize(b,a)
10000 loops, best of 3: 48.1 µs per loop
</snippet></ROW><ROW><id>18876279</id><snippet>searchsorted</snippet></ROW><ROW><id>18876279</id><snippet>digitize</snippet></ROW><ROW><id>18876279</id><snippet>a = np.arange(size_a)[::-1]
b = np.random.randint(0, size_a, size_b)

ja = np.take(a, np.searchsorted(a, b, side='right', sorter=a)-1)

#Compare to digitize
if ~np.allclose(ja,np.digitize(b,a)):
    print 'Comparison failed'

timing_digitize[num_a,num_b] = timeit.timeit('np.digitize(b,a)',
                      'import numpy as np; from __main__ import a, b',
                      number=3)
timing_searchsorted[num_a,num_b] = timeit.timeit('np.take(a, np.searchsorted(a, b, side="right", sorter=a)-1)',
                      'import numpy as np; from __main__ import a, b',
                      number=3)
</snippet></ROW><ROW><id>18876279</id><snippet>timing_digitize/timing_searchsorted</snippet></ROW><ROW><id>18876279</id><snippet>searchsorted</snippet></ROW><ROW><id>18876279</id><snippet>digitize</snippet></ROW><ROW><id>18876279</id><snippet>digitize</snippet></ROW><ROW><id>18876279</id><snippet>searchsorted</snippet></ROW><ROW><id>18876279</id><snippet>digitize</snippet></ROW><ROW><id>18876279</id><snippet>searchsorted</snippet></ROW><ROW><id>18876279</id><snippet>digitize</snippet></ROW><ROW><id>18876331</id><snippet>Python 2.7.2 (default, Oct 11 2012, 20:14:37)
[GCC 4.2.1 Compatible Apple Clang 4.0 (tags/Apple/clang-418.0.60)] on darwin
Type "help", "copyright", "credits" or "license" for more information.
&gt;&gt;&gt; if '194'&lt;'99':
...   print 'gotcha'
...
gotcha
</snippet></ROW><ROW><id>18876331</id><snippet>if int('194')&lt;int('99'):
</snippet></ROW><ROW><id>18876415</id><snippet>is_active = models.BooleanField(default=True)
</snippet></ROW><ROW><id>18876455</id><snippet>pk</snippet></ROW><ROW><id>18876455</id><snippet>object_id</snippet></ROW><ROW><id>18876455</id><snippet>object-detail</snippet></ROW><ROW><id>18876455</id><snippet>DetailView</snippet></ROW><ROW><id>18876455</id><snippet>ListView</snippet></ROW><ROW><id>18876455</id><snippet>SingleObjectMixin</snippet></ROW><ROW><id>18876455</id><snippet>pk_url_kwarg</snippet></ROW><ROW><id>18876455</id><snippet>'stockcode'</snippet></ROW><ROW><id>18876638</id><snippet>abc_base</snippet></ROW><ROW><id>18876638</id><snippet>PluginBase</snippet></ROW><ROW><id>18876638</id><snippet>abc_base</snippet></ROW><ROW><id>18876638</id><snippet>import abc

# Note: You forgot to capitalize the 'A' in the original
class AbstractBaseClass(object):
    __metaclass__ = abc.ABCMeta

    @abc.abstractmethod
    def load(self, input):
    """Retrieve data from the input source and return an object."""
        return
</snippet></ROW><ROW><id>18876638</id><snippet>from base import AbstractBaseClass

class ConcreteChildClass(AbstractBaseClass):
    def load(self, input):
        return input.read()
</snippet></ROW><ROW><id>18876650</id><snippet>scan</snippet></ROW><ROW><id>18876650</id><snippet>scan.request.id</snippet></ROW><ROW><id>18876981</id><snippet>var</snippet></ROW><ROW><id>18876981</id><snippet>class Functions(object):
    def __init__(self):
        self.funcs = {}

    def add(self, func):
        self.funcs[func.__name__] = func
        return func

    def dispatch(self, name, *args, **kwargs):
        return self.funcs[name](*args, **kwargs)

a = Functions()

@a.add
def test(foo):
    return foo + 3

@a.add
def hello(bar):
    return bar * 3

print a.dispatch('test', 6)    # returns 9
print a.dispatch('hello', 6)   # returns 18
</snippet></ROW><ROW><id>18877074</id><snippet>"equal" for the 5</snippet></ROW><ROW><id>18877074</id><snippet>calls (check by calling</snippet></ROW><ROW><id>18877074</id><snippet>) while for</snippet></ROW><ROW><id>18877074</id><snippet>it is set to</snippet></ROW><ROW><id>18877074</id><snippet>which gives you the non-square shape you observe. I'm guessing</snippet></ROW><ROW><id>18877074</id><snippet>ax5 = plt.subplot(236, aspect="equal")</snippet></ROW><ROW><id>18877074</id><snippet>fig, ax = plt.subplots(ncols=3, nrows=2, subplot_kw={'aspect':'equal'})
</snippet></ROW><ROW><id>18877074</id><snippet>ax</snippet></ROW><ROW><id>18877074</id><snippet>ax = ((ax1, ax2, ax3), (ax4, ax5, ax6))</snippet></ROW><ROW><id>18877074</id><snippet>i</snippet></ROW><ROW><id>18877074</id><snippet>j</snippet></ROW><ROW><id>18877074</id><snippet>ax[i,j].plot(..)
</snippet></ROW><ROW><id>18877173</id><snippet>import re

def _search_line_for_key_value (key, line):
    key_finder = re.finditer(key + r'\s*=', line)
    try:
        first_match = next(key_finder)
    except StopIteration:
        return None
    value = re.match(r'\s*([^,\s]+)', line[first_match.end():])
    if not value:
        raise ValueError('A line was encountered with an invalid %s value' % key)
    try:
        next(key_finder)
    except StopIteration:
        return value.group(1)
    else:
        raise ValueError('A line was encountered with more than one %s value' % key)

def get_elset_material_dict (filename):
    results = {}
    for line in open(filename):
        elset = _search_line_for_key_value('ELSET', line)
        if elset is not None:
            results[elset] = _search_line_for_key_value('MATERIAL', line)
    return results
</snippet></ROW><ROW><id>18877244</id><snippet>itertools.cycle</snippet></ROW><ROW><id>18877244</id><snippet>import itertools

r = [135,147,196,211]
g = [193,208,229,117]
b = [196,35,135,3] 
listone = ["Apple","Toyota","Civic","Merc","Toshiba","Samsung","Dell","Turbo"]
colours = zip(r,g,b)

colours_and_names = zip(listone,itertools.cycle(colours))
#=&gt;  [('Apple', (135, 193, 196)), ('Toyota', (147, 208, 35)), ('Civic', (196, 229, 135)), ('Merc', (211, 117, 3)), ('Toshiba', (135, 193, 196)), ('Samsung', (147, 208, 35)), ('Dell', (196, 229, 135)), ('Turbo', (211, 117, 3))]
</snippet></ROW><ROW><id>18877244</id><snippet>for (i, (word,colour)) in enumerate(colours_and_names):
    Shape.TextFrame.TextRange.Characters(res[i], charlen[i]).Font.Color = RGB(*colour)
</snippet></ROW><ROW><id>18877244</id><snippet>*</snippet></ROW><ROW><id>18877244</id><snippet>list(itertools.product(listone,colours))
#=&gt; [('Apple', (135, 193, 196)), ('Apple', (147, 208, 35)), ('Apple', (196, 229, 135)), ('Apple', (211, 117, 3)), ('Toyota', (135, 193, 196)), ('Toyota', (147, 208, 35)), ('Toyota', (196, 229, 135)), ('Toyota', (211, 117, 3)), ('Civic', (135, 193, 196)), ('Civic', (147, 208, 35)), ('Civic', (196, 229, 135)), ('Civic', (211, 117, 3)), ('Merc', (135, 193, 196)), ('Merc', (147, 208, 35)), ('Merc', (196, 229, 135)), ('Merc', (211, 117, 3)), ('Toshiba', (135, 193, 196)), ('Toshiba', (147, 208, 35)), ('Toshiba', (196, 229, 135)), ('Toshiba', (211, 117, 3)), ('Samsung', (135, 193, 196)), ('Samsung', (147, 208, 35)), ('Samsung', (196, 229, 135)), ('Samsung', (211, 117, 3)), ('Dell', (135, 193, 196)), ('Dell', (147, 208, 35)), ('Dell', (196, 229, 135)), ('Dell', (211, 117, 3)), ('Turbo', (135, 193, 196)), ('Turbo', (147, 208, 35)), ('Turbo', (196, 229, 135)), ('Turbo', (211, 117, 3))]
</snippet></ROW><ROW><id>18877288</id><snippet>def_m = "(logs125 &gt;= 0)&amp;(logs125 &lt;=3)&amp;(loudestonedge==0)&amp;(geocontained==1)"
mask1 = eval(def_m)
print def_m
</snippet></ROW><ROW><id>18877468</id><snippet>re.findall</snippet></ROW><ROW><id>18877468</id><snippet>&gt;&gt;&gt; pattern = r'((?:January|February|March|April|May|June|July|August|September|October|November|December) \d\d?)'
&gt;&gt;&gt; re.findall(pattern, text)[-1]
'September 29'
</snippet></ROW><ROW><id>18877565</id><snippet>describe
  dbpedia:Federal_Emergency_Management_Agency
</snippet></ROW><ROW><id>18877565</id><snippet>describe
  dbpedia:Federal_Emergency_Management_Agency
  dbpedia:Mount_Monadnock
  # more resources...
</snippet></ROW><ROW><id>18877565</id><snippet>values</snippet></ROW><ROW><id>18877565</id><snippet>select ?label where { 
  values ?resource {
    dbpedia:Federal_Emergency_Management_Agency # put your values in here and
    dbpedia:Mount_Monadnock                     # ?resource will be bound to each
  }
  ?resource rdfs:label ?label .
  filter( langMatches( lang(?label), "EN" ))
}
</snippet></ROW><ROW><id>18877565</id><snippet>construct {
  ?resource rdfs:label ?label 
}
where { 
  values ?resource {
    dbpedia:Federal_Emergency_Management_Agency
    dbpedia:Mount_Monadnock
  }
  ?resource rdfs:label ?label .
  filter( langMatches( lang(?label), "EN" ))
}
</snippet></ROW><ROW><id>18877685</id><snippet>str</snippet></ROW><ROW><id>18877685</id><snippet>if isinstance(rendered, unicode):
    rendered = rendered.encode('UTF-8')

# rendered is now guaranteed to be of type str
</snippet></ROW><ROW><id>18877762</id><snippet>testNumber=2
confirmedPrime = 0
</snippet></ROW><ROW><id>18877762</id><snippet>confirmedPrime</snippet></ROW><ROW><id>18877762</id><snippet>while</snippet></ROW><ROW><id>18877762</id><snippet>confirmedPrime</snippet></ROW><ROW><id>18877762</id><snippet>while(confirmedPrime &lt; 1000):
</snippet></ROW><ROW><id>18877762</id><snippet>    for divisor in range(1, testNumber+1)
        if (testNumber/2)*2 == testNumber:
            ...
</snippet></ROW><ROW><id>18877762</id><snippet>for</snippet></ROW><ROW><id>18877762</id><snippet>testNumber</snippet></ROW><ROW><id>18877762</id><snippet>    if (testNumber/2)*2 = testNumber: # Why not use modulo here too for consistency?
        testNumber += 1
    elif ...
        ...
    else:
        for divisor in range(...):
</snippet></ROW><ROW><id>18877762</id><snippet>testNumber+1</snippet></ROW><ROW><id>18877762</id><snippet>testNumber%testNumber</snippet></ROW><ROW><id>18877762</id><snippet>testNumber-1</snippet></ROW><ROW><id>18877762</id><snippet>testNumber</snippet></ROW><ROW><id>18877762</id><snippet>for</snippet></ROW><ROW><id>18877762</id><snippet>confirmedPrimes</snippet></ROW><ROW><id>18877762</id><snippet>confirmedPrimes</snippet></ROW><ROW><id>18877762</id><snippet>import math

test_number = 7       # Already know up to 7
confirmed_primes = 4  # Already know about 2, 3, 5 and 7

while confirmed_primes &lt; 1000:
    test_number += 1

    if test_number % 2 and test_number % 3 and test_number % 5 and test_number % 7:
        is_prime = True

        for divisor in range(11, int(math.sqrt(test_number))+1):
            if test_number % divisor == 0:
                is_prime = False

        if is_prime:
            confirmed_primes += 1

print test_number
</snippet></ROW><ROW><id>18877844</id><snippet>django-crispy-forms</snippet></ROW><ROW><id>18877888</id><snippet>f=open(input('Sisesta faili nimi: ')
f=open(input('Sisesta faili nimi: '))
</snippet></ROW><ROW><id>18878180</id><snippet>.join(A.abs)</snippet></ROW><ROW><id>18878180</id><snippet>lazy="joined"</snippet></ROW><ROW><id>18878180</id><snippet>A.abs</snippet></ROW><ROW><id>18878180</id><snippet>b_id</snippet></ROW><ROW><id>18878180</id><snippet>db.session.query(A, AB).join(A.abs).filter(AB.b_id = 1, A.id = 1)
</snippet></ROW><ROW><id>18878180</id><snippet>AB</snippet></ROW><ROW><id>18878180</id><snippet>AB</snippet></ROW><ROW><id>18878180</id><snippet>A.abs</snippet></ROW><ROW><id>18878180</id><snippet>db.session.query(A).join(A.abs).options(contains_eager(A.abs)).filter(AB.b_id = 1, A.id = 1)
</snippet></ROW><ROW><id>18878180</id><snippet>A.abs</snippet></ROW><ROW><id>18878180</id><snippet>b_id = 1</snippet></ROW><ROW><id>18878180</id><snippet>echo=True</snippet></ROW><ROW><id>18878180</id><snippet>echo="debug"</snippet></ROW><ROW><id>18878413</id><snippet>dfm.index = range(1,len(dfm) + 1)
</snippet></ROW><ROW><id>18878469</id><snippet>property</snippet></ROW><ROW><id>18878469</id><snippet>@property
def has_access_token(self):
    return True
</snippet></ROW><ROW><id>18878469</id><snippet>&gt;&gt;&gt; class MyModel:
...     def has_access_token_1(self):
...         return True
...     @property
...     def has_access_token_2(self):
...         return True
... 
&gt;&gt;&gt; 
&gt;&gt;&gt; obj = MyModel()
&gt;&gt;&gt; obj.has_access_token_1
&lt;bound method MyModel.has_access_token_1 of &lt;__main__.MyModel instance at 0x7f07ed881ea8&gt;&gt;
&gt;&gt;&gt; obj.has_access_token_2
True
</snippet></ROW><ROW><id>18878646</id><snippet>settings</snippet></ROW><ROW><id>18878646</id><snippet>discovery_uri</snippet></ROW><ROW><id>18878970</id><snippet>re.sub(r'\s([?.!"](?:\s|$))', r'\1', text)
</snippet></ROW><ROW><id>18878970</id><snippet>r''</snippet></ROW><ROW><id>18878970</id><snippet>&gt;&gt;&gt; import re
&gt;&gt;&gt; text = "This text . Is to test . How it works ! Will it! Or won't it ? Hmm ?"
&gt;&gt;&gt; re.sub(r'\s([?.!"](?:\s|$))', r'\1', text)
"This text. Is to test. How it works! Will it! Or won't it? Hmm?"
</snippet></ROW><ROW><id>18879188</id><snippet>import os
os.chdir("dir/you/want")
</snippet></ROW><ROW><id>18879389</id><snippet>[]</snippet></ROW><ROW><id>18879389</id><snippet>.^$*+?()[{\|
</snippet></ROW><ROW><id>18879389</id><snippet>^-]\</snippet></ROW><ROW><id>18879389</id><snippet>-</snippet></ROW><ROW><id>18879389</id><snippet>re.sub()</snippet></ROW><ROW><id>18879389</id><snippet>(</snippet></ROW><ROW><id>18879389</id><snippet>)</snippet></ROW><ROW><id>18879389</id><snippet>oldStr = '(foo) bar (baz)'
print re.sub(r'[()]+', '', oldStr)
</snippet></ROW><ROW><id>18879389</id><snippet>foo bar baz
</snippet></ROW><ROW><id>18879389</id><snippet>re.search()</snippet></ROW><ROW><id>18879389</id><snippet>re.search</snippet></ROW><ROW><id>18879389</id><snippet>(</snippet></ROW><ROW><id>18879389</id><snippet>)</snippet></ROW><ROW><id>18879389</id><snippet>(</snippet></ROW><ROW><id>18879389</id><snippet>([a-zA-Z]+)</snippet></ROW><ROW><id>18879389</id><snippet>)</snippet></ROW><ROW><id>18879389</id><snippet>m = re.search('\(([a-zA-Z]+)\)', oldStr)
print m.group(1)  #prints 'foo'
</snippet></ROW><ROW><id>18879389</id><snippet>re.findall()</snippet></ROW><ROW><id>18879389</id><snippet>m = re.findall(r'\(([a-zA-Z]+)\)', oldStr)
print ", " . join(m)

# prints `foo, baz`
</snippet></ROW><ROW><id>18879531</id><snippet>local_settings.py</snippet></ROW><ROW><id>18879531</id><snippet>try:
    from local_settings import *
except ImportError:
    pass
</snippet></ROW><ROW><id>18879531</id><snippet>local_settings.py</snippet></ROW><ROW><id>18879531</id><snippet>.gitignore</snippet></ROW><ROW><id>18879691</id><snippet>zip()</snippet></ROW><ROW><id>18879691</id><snippet>for c in zip(cities):
    sheet.write(row, high0_col, c[0].high0)
    sheet.write(row, low1_col, c[0].low1)
    sheet.write(row, high1_col, c[0].high1)
    sheet.write(row, low2_col, c[0].low2)
    sheet.write(row, high2_col, c[0].high2)
    sheet.write(row, low3_col, c[0].low3)
    sheet.write(row, high3_col, c[0].high3)
    sheet.write(row, low4_col, c[0].low4)
    sheet.write(row, high4_col, c[0].high4)
    sheet.write(row, low5_col, c[0].low5)
    sheet.write(row, high5_col, c[0].high5)
    sheet.write(row, low6_col, c[0].low6)
    sheet.write(row, high6_col, c[0].high6)
    sheet.write(row, low7_col, c[0].low7)
    sheet.write(row, high7_col, c[0].high7)
</snippet></ROW><ROW><id>18879691</id><snippet>zip(cities)</snippet></ROW><ROW><id>18879691</id><snippet>for c in cities:</snippet></ROW><ROW><id>18879822</id><snippet>arr.sum</snippet></ROW><ROW><id>18879822</id><snippet>arr</snippet></ROW><ROW><id>18879822</id><snippet>np.ma</snippet></ROW><ROW><id>18879822</id><snippet>In [18]: farr.filled(arr.fill_value)
Out[18]: array([  5.,   5.,   5.,  nan,   5.])
</snippet></ROW><ROW><id>18879926</id><snippet>while talk:
    if __name__ == '__main__':
        Thread(target = fluse).start()
</snippet></ROW><ROW><id>18879926</id><snippet>fluse</snippet></ROW><ROW><id>18879926</id><snippet>conv_file.fluse()</snippet></ROW><ROW><id>18879926</id><snippet>fluse</snippet></ROW><ROW><id>18879926</id><snippet>if __name__ == '__main__':
    Thread(target = fluse).start()
while talk:
    # etc.
</snippet></ROW><ROW><id>18879926</id><snippet>write</snippet></ROW><ROW><id>18879926</id><snippet>def fluse():
    time.sleep(1)
    conv_file.fluse()
</snippet></ROW><ROW><id>18879926</id><snippet>threading.Timer</snippet></ROW><ROW><id>18879926</id><snippet>flush</snippet></ROW><ROW><id>18879926</id><snippet>fluse</snippet></ROW><ROW><id>18879926</id><snippet>return</snippet></ROW><ROW><id>18879926</id><snippet>chatlogic</snippet></ROW><ROW><id>18879926</id><snippet>fluse</snippet></ROW><ROW><id>18879926</id><snippet>from threading import Thread
import time

def chatlogic(conv_file):
    user = 'Nobody'
    t = Thread(target=flusher, args=[conv_file])
    t.daemon=True
    t.start()
    while True:
        message = raw_input('enter a message: ')
        if not message: #Ending Conversation if empty message was sent
            break
        msgtime = time.asctime()
        conv_file.write('[%s]%s: %s\n' %(msgtime,user,message))
    return 'Conversation Ended'

def flusher(conv_file):
    while True:
        time.sleep(1)
        print 'Flushing the file now'
        conv_file.flush()

if __name__ == '__main__':
    conv_file = open('convfile.txt', 'w')
    chatlogic(conv_file)
</snippet></ROW><ROW><id>18880269</id><snippet>mechanize.Browser</snippet></ROW><ROW><id>18880389</id><snippet>/$</snippet></ROW><ROW><id>18880389</id><snippet>/</snippet></ROW><ROW><id>18880389</id><snippet>/</snippet></ROW><ROW><id>18880389</id><snippet>url(r'^fotogalerie/(?P&lt;nazev_slozky&gt;([^/]+/)+)$', fotogalerie_slozka),
</snippet></ROW><ROW><id>18880389</id><snippet>so/on/</snippet></ROW><ROW><id>18880389</id><snippet>url(r'^fotogalerie/(?P&lt;nazev_slozky&gt;([^/]+/?)+)/$', fotogalerie_slozka),
</snippet></ROW><ROW><id>18880389</id><snippet>so/on</snippet></ROW><ROW><id>18880512</id><snippet>&gt;&gt;&gt; with open(...) as f:
...     rows = csv.reader(f)
...     for row in rows:
...         t = row[1].split('_')
...         if len(t) &gt;= 4 and t[3] == '001':
...             print (row[1], row[13])
... 
('ttp_ws_sm_001_01', '117')
('ttp_ws_sm_001_blank', '31')
</snippet></ROW><ROW><id>18880582</id><snippet>class city(object):
    def __init__(self, city_name, link) :
        self.name = city_name
        self.url = link
        self.high0 = 0
        self.high1 = 0
        self.high2 = 0
        self.high3 = 0
        self.high4 = 0
        self.high5 = 0
        self.high6 = 0
        self.high7 = 0
        self.low1 = 0
        self.low2 = 0
        self.low3 = 0
        self.low4 = 0
        self.low5 = 0
        self.low6 = 0
        self.low7 = 0

    def retrieveTemps(self) :
        filehandle = urllib.urlopen(self.url)

        # get lines from result into array
        lines = filehandle.readlines()
        filehandle.close()

        # (for each) loop through each line in lines
        for line_number, line in enumerate(lines, start=1):
            # find string, position otherwise position is -1
            position0 = line.rfind('title="{}"'.format(date.strftime("%A")))
            position1 = line.rfind('title="{}"'.format(date1.strftime("%A")))
            position2 = line.rfind('title="{}"'.format(date2.strftime("%A")))
            position3 = line.rfind('title="{}"'.format(date3.strftime("%A")))
            position4 = line.rfind('title="{}"'.format(date4.strftime("%A")))
            position5 = line.rfind('title="{}"'.format(date5.strftime("%A")))
            position6 = line.rfind('title="{}"'.format(date6.strftime("%A")))

            if position0 &gt; 0 :
                self.high0 = lines[line_number + 4].split('&amp;')[0].split('&gt;')[-1]
                self.low1 = lines[line_number + 18].split('&amp;')[0].split('&gt;')[-1]

            if position1 &gt; 0 :
                self.high1 = lines[line_number + 4].split('&amp;')[0].split('&gt;')[-1]
                self.low2 = lines[line_number + 19].split('&amp;')[0].split('&gt;')[-1]

            if position2 &gt; 0 :
                self.high2 = lines[line_number + 4].split('&amp;')[0].split('&gt;')[-1]
                self.low3 = lines[line_number + 19].split('&amp;')[0].split('&gt;')[-1]

            if position3 &gt; 0 :
                self.high3 = lines[line_number + 4].split('&amp;')[0].split('&gt;')[-1]
                self.low4 = lines[line_number + 19].split('&amp;')[0].split('&gt;')[-1]

            if position4 &gt; 0 :
                self.high4 = lines[line_number + 4].split('&amp;')[0].split('&gt;')[-1]
                self.low5 = lines[line_number + 19].split('&amp;')[0].split('&gt;')[-1]

            if position5 &gt; 0 :
                self.high5 = lines[line_number + 4].split('&amp;')[0].split('&gt;')[-1]
                self.low6 = lines[line_number + 19].split('&amp;')[0].split('&gt;')[-1]
                self.low7 = lines[line_number + 19].split('&amp;')[0].split('&gt;')[-1]

            if position6 &gt; 0 :
                self.high6 = lines[line_number + 4].split('&amp;')[0].split('&gt;')[-1]
                self.high7 = lines[line_number + 4].split('&amp;')[0].split('&gt;')[-1]
                break # done with loop, break out of it

    def getCities():
        return [
            #BRITISH COLUMBIA CITIES
            city('Prince George', 'http://www.weatheroffice.gc.ca/city/pages/bc-79_metric_e.html'),
            city('Kamloops', 'http://www.weatheroffice.gc.ca/city/pages/bc-45_metric_e.html'),
            city('Blue River', 'http://www.weatheroffice.gc.ca/city/pages/bc-22_metric_e.html'),

            # Alberta
            city('High Level', 'http://www.weatheroffice.gc.ca/city/pages/ab-24_metric_e.html'),
            city('Peace River', 'http://www.weatheroffice.gc.ca/city/pages/ab-25_metric_e.html'),
            city('Jasper', 'http://www.weatheroffice.gc.ca/city/pages/ab-70_metric_e.html'),
            city('Edmonton', 'http://www.weatheroffice.gc.ca/city/pages/ab-50_metric_e.html'),
            city('Calgary', 'http://www.weatheroffice.gc.ca/city/pages/ab-52_metric_e.html'),

            #SASKATCHEWAN CITIES

            city('Biggar', 'http://www.weatheroffice.gc.ca/city/pages/sk-2_metric_e.html'),
            city('Saskatoon', 'http://www.weatheroffice.gc.ca/city/pages/sk-40_metric_e.html'),
            city('Melville', 'http://www.weatheroffice.gc.ca/city/pages/sk-8_metric_e.html'),
            city('Canora', 'http://www.weatheroffice.gc.ca/city/pages/sk-3_metric_e.html'),
            city('Yorkton', 'http://www.weatheroffice.gc.ca/city/pages/sk-33_metric_e.html'),

            #MANITOBA CITIES

            city('Winnipeg', 'http://www.weatheroffice.gc.ca/city/pages/mb-38_metric_e.html'),
            city('Sprague', 'http://www.weatheroffice.gc.ca/city/pages/mb-23_metric_e.html'),

            #ONTARIO CITIES

            city('Thunder Bay', 'http://www.weatheroffice.gc.ca/city/pages/on-100_metric_e.html'),
            city('Sioux Lookout', 'http://www.weatheroffice.gc.ca/city/pages/on-135_metric_e.html'),
            city('Armstrong', 'http://www.weatheroffice.gc.ca/city/pages/on-111_metric_e.html'),
            city('Hornepayne', 'http://www.weatheroffice.gc.ca/city/pages/on-78_metric_e.html'),
            city('Sudbury', 'http://www.weatheroffice.gc.ca/city/pages/on-40_metric_e.html'),
            city('South Parry', 'http://www.weatheroffice.gc.ca/city/pages/on-103_metric_e.html'),
            city('Toronto', 'http://www.weatheroffice.gc.ca/city/pages/on-143_metric_e.html'),
            city('Kingston', 'http://www.weatheroffice.gc.ca/city/pages/on-69_metric_e.html'),
            city('Cornwall', 'http://www.weatheroffice.gc.ca/city/pages/on-152_metric_e.html'),
            city('Sarnia', 'http://www.weatheroffice.gc.ca/city/pages/on-147_metric_e.html'),

            #QUEBEC CITIES

            city('Montreal', 'http://www.weatheroffice.gc.ca/city/pages/qc-147_metric_e.html'),
            city('Quebec', 'http://www.weatheroffice.gc.ca/city/pages/qc-133_metric_e.html'),
            city('La Tuque', 'http://www.weatheroffice.gc.ca/city/pages/qc-154_metric_e.html'),
            city('Saguenay', 'http://www.weatheroffice.gc.ca/city/pages/qc-166_metric_e.html'),
            city('Riviere-du-loup', 'http://www.weatheroffice.gc.ca/city/pages/qc-108_metric_e.html'),

            #NOVA SCOTIA CITIES

            city('Truro', 'http://www.weatheroffice.gc.ca/city/pages/ns-25_metric_e.html'),
            city('Halifax', 'http://www.weatheroffice.gc.ca/city/pages/ns-19_metric_e.html'),

            #NEW BRUNSWICK CITIES

            city('Edmundston', 'http://www.weatheroffice.gc.ca/city/pages/nb-32_metric_e.html'),
            city('Moncton', 'http://www.weatheroffice.gc.ca/city/pages/nb-36_metric_e.html'),
        ]
</snippet></ROW><ROW><id>18880582</id><snippet>for row, c in enumerate(cities, start=1):
</snippet></ROW><ROW><id>18880595</id><snippet>def minmax(seq):

    def byTwos(seq):
        # yield values from sequence two at a time
        # if an odd number of values, just return
        # the last value twice (won't hurt minmax
        # evaluation)
        seq = iter(seq)
        while 1:
            last = next(seq)
            yield last,next(seq,last)

    seqByTwos = byTwos(seq)
    # initialize minval and maxval
    a,b = next(seqByTwos,(None,None))
    if a &lt; b:
        minval,maxval = a,b
    else:
        minval,maxval = b,a

    # now walk the rest of the sequence
    for a,b in seqByTwos:
        if a &lt; b:
            if a &lt; minval:
                minval = a
            if b &gt; maxval:
                maxval = b
        else:
            if b &lt; minval:
                minval = b
            if a &gt; maxval:
                maxval = a
    return minval, maxval
</snippet></ROW><ROW><id>18880595</id><snippet>__lt__</snippet></ROW><ROW><id>18880595</id><snippet>__gt__</snippet></ROW><ROW><id>18880782</id><snippet>y</snippet></ROW><ROW><id>18880782</id><snippet>x</snippet></ROW><ROW><id>18880782</id><snippet>chunkplot</snippet></ROW><ROW><id>18880782</id><snippet>import numpy as np
import matplotlib.pyplot as plt
import matplotlib.dates as mdates
import datetime as dt
np.random.seed(1977)

def main():
    x, y = generate_data()
    fig, axes = plt.subplots(nrows=3, sharex=True)
    for ax in axes.flat:
        ax.xaxis_date()
    fig.autofmt_xdate()

    axes[0].set_title('Scatterplot of all data')
    axes[0].scatter(x, y, marker='.')

    axes[1].set_title('"Chunk" plot of data')
    chunkplot(x, y, chunksize=1000, ax=axes[1],
              edgecolor='none', alpha=0.5, color='gray')

    axes[2].set_title('Hexbin plot of data')
    axes[2].hexbin(x, y)

    plt.show()

def generate_data():
    # Generate a very noisy but interesting timeseries
    x = mdates.drange(dt.datetime(2010, 1, 1), dt.datetime(2013, 9, 1),
                      dt.timedelta(minutes=10))
    num = x.size
    y = np.random.random(num) - 0.5
    y.cumsum(out=y)
    y += 0.5 * y.max() * np.random.random(num)
    return x, y

def chunkplot(x, y, chunksize, ax=None, line_kwargs=None, **kwargs):
    if ax is None:
        ax = plt.gca()
    if line_kwargs is None:
        line_kwargs = {}
    # Wrap the array into a 2D array of chunks, truncating the last chunk if
    # chunksize isn't an even divisor of the total size.
    # (This part won't use _any_ additional memory)
    numchunks = y.size // chunksize
    ychunks = y[:chunksize*numchunks].reshape((-1, chunksize))
    xchunks = x[:chunksize*numchunks].reshape((-1, chunksize))

    # Calculate the max, min, and means of chunksize-element chunks...
    max_env = ychunks.max(axis=1)
    min_env = ychunks.min(axis=1)
    ycenters = ychunks.mean(axis=1)
    xcenters = xchunks.mean(axis=1)

    # Now plot the bounds and the mean...
    fill = ax.fill_between(xcenters, min_env, max_env, **kwargs)
    line = ax.plot(xcenters, ycenters, **line_kwargs)[0]
    return fill, line

main()
</snippet></ROW><ROW><id>18880882</id><snippet>def merge_lists(list1, list2):
    dict1 = dict(list1)
    dict2 = dict(list2)
    dates = list(set(dict1.keys())|set(dict2.keys()))
    dates.sort()
    merged_list = []
    for date in dates:
        item = [date]
        item.append(dict1.get(date,0))
        item.append(dict2.get(date,0))
        merged_list.append(item)

    return merged_list

merged_list = merge_lists([('2013-01-06', 2),
            ('2013-02-03', 1),
            ('2013-02-10', 1),
            ('2013-02-24', 1),
            ('2013-03-03', 2),
            ('2013-03-24', 1)],
            [('2013-03-03', 1),
            ('2013-03-31', 1),
            ('2013-05-12', 1),
            ('2013-05-19', 2),
            ('2013-06-30', 2)])


import pprint
pprint.pprint(merged_list)
</snippet></ROW><ROW><id>18880882</id><snippet>[['2013-01-06', 2, 0],
 ['2013-02-03', 1, 0],
 ['2013-02-10', 1, 0],
 ['2013-02-24', 1, 0],
 ['2013-03-03', 2, 1],
 ['2013-03-24', 1, 0],
 ['2013-03-31', 0, 1],
 ['2013-05-12', 0, 1],
 ['2013-05-19', 0, 2],
 ['2013-06-30', 0, 2]]
</snippet></ROW><ROW><id>18880882</id><snippet>def merge_lists(*lists):
    dicts = [dict(l) for l in lists]
    dates = set()
    for d in dicts:
        dates |= set(d.keys())
    dates = list(dates)
    dates.sort()
    merged_list = []
    for date in dates:
        item = [date]
        for d in dicts:
            item.append(d.get(date,0))
        merged_list.append(item)

    return merged_list
</snippet></ROW><ROW><id>18880929</id><snippet>enctype="multipart/form-data"</snippet></ROW><ROW><id>18880929</id><snippet>request.FILES</snippet></ROW><ROW><id>18880929</id><snippet>form = MyAwesomeForm(request.POST, request.FILES)</snippet></ROW><ROW><id>18880944</id><snippet>i</snippet></ROW><ROW><id>18880944</id><snippet>k</snippet></ROW><ROW><id>18880944</id><snippet>for i in range (1, yearsRunning + 1):
    print
    print "Savings Schedule for Year", i,":"
    print "Month    Interest    Amount  Balance"
    for k in range (1, 13):
        totalInterest = monthlyInterest * totalInvestBal
        totalInvestBal = totalSavings + totalInterest + totalInvestBal
        totalSavings = totalSavings
        print k, round(totalInterest,2), round(totalSavings,2), round(totalInvestBal,2)         
    print 
    #IF WE KEEP ONLY i IT becomes 12 here so we need another -&gt; VARIABLE!!!!! for example K!!.
    print "Savings summary for year %s:" %(i) #use this " words words %s words" %(variable name)
    print "Total amount saved:", totalSavings
    print "Total interest earned:", totalInterest
    print "End of year balance:", totalInvestBal
</snippet></ROW><ROW><id>18880975</id><snippet>In [11]: p = pd.Panel({'df1': df1, 'df2': df2})

In [12]: p['df1']
Out[12]:
   col1  col2
1     1     2
2     3     4
</snippet></ROW><ROW><id>18880975</id><snippet>In [13]: p.apply(np.sum, axis='major')  # use linalg function here instead of np.sum
Out[13]:
      df1  df2
col1    4   12
col2    6   14
</snippet></ROW><ROW><id>18880975</id><snippet>In [21]: def f(x):
              print(repr(x))
              return 1

In [22]: p.apply(f, 'major')
array([1, 3])
array([2, 4])
array([5, 7])
array([6, 8])
Out[22]:
      df1  df2
col1    1    1
col2    1    1
</snippet></ROW><ROW><id>18880975</id><snippet>In [31]: p.apply(f, 'items')
array([1, 5])
array([2, 6])
array([3, 7])
array([4, 8])
Out[31]:
   col1  col2
1     1     1
2     1     1
</snippet></ROW><ROW><id>18880992</id><snippet>io</snippet></ROW><ROW><id>18880992</id><snippet>from io import IOBase

if isinstance(someobj, IOBase):
</snippet></ROW><ROW><id>18880992</id><snippet>type(obj) == file</snippet></ROW><ROW><id>18880992</id><snippet>isinstance(obj, file)</snippet></ROW><ROW><id>18880992</id><snippet>io</snippet></ROW><ROW><id>18880992</id><snippet>isinstance()</snippet></ROW><ROW><id>18880992</id><snippet>True</snippet></ROW><ROW><id>18880992</id><snippet>&gt;&gt;&gt; from io import IOBase
&gt;&gt;&gt; fh = open('/tmp/demo', 'w')
&gt;&gt;&gt; isinstance(fh, IOBase)
True
&gt;&gt;&gt; isinstance(object(), IOBase)
False
</snippet></ROW><ROW><id>18881064</id><snippet>converted_day</snippet></ROW><ROW><id>18881064</id><snippet>post</snippet></ROW><ROW><id>18881064</id><snippet>self.OneDayBackwards</snippet></ROW><ROW><id>18881064</id><snippet>post</snippet></ROW><ROW><id>18881064</id><snippet>def post(self, **kwargs):
    if (AM_PM == "PM") and (converted_AM_PM == "AM"):  
        converted_day = self.OneDayBackwards(mentor_day_display)
    else:
        converted_day = "SOME DEFAULT HERE"

    logging.info('***********converted_day = %s**********' % converted_day)
</snippet></ROW><ROW><id>18881126</id><snippet>defaultdict()</snippet></ROW><ROW><id>18881126</id><snippet>from collections import defaultdict
from urllib import quote
from urlparse import parse_qsl, urlparse


urls = defaultdict(list)
with open('links.txt') as f:
    for url in f:
        parsed_url = urlparse(url.strip())
        params = parse_qsl(parsed_url.query, keep_blank_values=True)
        for key, value in params:
            urls[parsed_url.path].append("%s=%s" % (key, quote(value)))

# printing results
for url, params in urls.iteritems():
    print url
    for param in params:
        print param
</snippet></ROW><ROW><id>18881126</id><snippet>ww2.domain.com/cal
date=2007-04-14
date=2007-08-19
www.domain.edu/some/folder/image.php
l=adm
y=5
id=2
page=http%3A//support.domain.com/downloads/index.asp
unique=12345
l=adm
y=5
id=2
page=http%3A//.domain.com/downloads/index.asp
unique=12345
domain.com/cal
view=month
view=day
www.domain.com/page
id_eve=479989
adm=no
id_eve=47
adm=yes
id_eve=479
blog.news.org/news/calendar.php
view=day
date=2011-12-10
view=month
date=2011-12-10
</snippet></ROW><ROW><id>18881225</id><snippet>__getitem__</snippet></ROW><ROW><id>18881225</id><snippet>__setitem__</snippet></ROW><ROW><id>18881225</id><snippet>property</snippet></ROW><ROW><id>18881225</id><snippet>class AWSTagsProxy(object):

    def __init__(self, aws_inst):

        self.aws_inst = aws_inst

    def __getitem__(self, key):

        return self.aws_inst.get_tag(key)

    def __setitem__(self, key, value):

        self.aws_inst.set_tag(key, value)

    def __delitem__(self, key):

        self.aws_inst.remove_tag(key)

    def _set(self, tag_dict):

        for tag in self.aws_inst.tag_list():
            if tag not in tag_dict:
                self.aws_inst.remove_tag(tag)
        for tag, value in tag_dict.iteritems():
            self.aws_inst.set_tag(tag, value)

class ProxyDescriptor(object):

    def __init__(self, name, klass):

        self.name = name
        self.proxied_class = klass

    def __get__(self, obj, klass):

        if not hasattr(obj, self.name):
            setattr(obj, self.name, self.proxied_class(obj))
        return getattr(obj, self.name)

    def __set__(self, obj, value):

        self.__get__(obj, obj.__class__)._set(value)

class AWS(object):

    tags = ProxyDescriptor('_tags', AWSTagsProxy)

    def get_tag(self, tag):

        # Call to AWS to get tag

    def set_tag(self, tag, value):

        # Call to AWS to set tag

    def remove_tag(self, tag):

        # Call to AWS to remove tag

    def tag_list(self):

        # Call to AWS to retrieve all tags
</snippet></ROW><ROW><id>18881225</id><snippet>property</snippet></ROW><ROW><id>18881225</id><snippet>__setitem__</snippet></ROW><ROW><id>18881225</id><snippet>__getitem__</snippet></ROW><ROW><id>18881225</id><snippet>obj</snippet></ROW><ROW><id>18881225</id><snippet>ProxyDescriptor</snippet></ROW><ROW><id>18881225</id><snippet>aws_inst</snippet></ROW><ROW><id>18881225</id><snippet>AWSTagsProxy</snippet></ROW><ROW><id>18881225</id><snippet>property</snippet></ROW><ROW><id>18881225</id><snippet>self</snippet></ROW><ROW><id>18881545</id><snippet>&gt;&gt;&gt; def simple_clean(word):
...     return word.lower().replace(" ","").replace("hotel","")
... 
&gt;&gt;&gt; a = "Ramada Hotel &amp; Suites Vilnius"
&gt;&gt;&gt; b = "Hotel Ramada Suites Vilnous"
&gt;&gt;&gt; a = simple_clean(a)
&gt;&gt;&gt; b = simple_clean(b)
&gt;&gt;&gt; a
'ramada&amp;suitesvilnius'
&gt;&gt;&gt; b
'ramadasuitesvilnous'
&gt;&gt;&gt; import difflib
&gt;&gt;&gt; difflib.SequenceMatcher(None,a,b).ratio()
0.9230769230769231
</snippet></ROW><ROW><id>18881545</id><snippet>difflib</snippet></ROW><ROW><id>18881630</id><snippet>text</snippet></ROW><ROW><id>18881630</id><snippet>button</snippet></ROW><ROW><id>18881796</id><snippet>apoints = 0
bpoints = 0

def play_game():
    global apoints
    global bpoints
    ...
</snippet></ROW><ROW><id>18881976</id><snippet>.properties</snippet></ROW><ROW><id>18881976</id><snippet>def run(project_dir, main_class, specific_args):
    classpath = []

    for root, dirs, files in os.walk(project_dir):
        classpath.extend(os.path.join(root, f) for f in files if f.endswith('.jar'))
        if any(f.endswith('.properties') for f in files):
            classpath.append(root)

    classpath_augment = ':'.join(classpath)

    print java_command, classpath_augment, main_class, specific_args
</snippet></ROW><ROW><id>18881976</id><snippet>str.join()</snippet></ROW><ROW><id>18881976</id><snippet>any()</snippet></ROW><ROW><id>18881976</id><snippet>for</snippet></ROW><ROW><id>18881976</id><snippet>def run(project_dir, main_class, specific_args):
    classpath = []

    for root, dirs, files in os.walk(project_dir):
        has_properties = False
        for f in files:
            if f.endswith('.jar'):
                classpath.append(os.path.join(root, f))
            if f.endswith('.properties'):
                has_properties = True
        if has_properties:
            classpath.append(root)

    classpath_augment = ':'.join(classpath)

    print java_command, classpath_augment, main_class, specific_args
</snippet></ROW><ROW><id>18882049</id><snippet>X</snippet></ROW><ROW><id>18882049</id><snippet>Y</snippet></ROW><ROW><id>18882049</id><snippet>np.dot(X,Y)</snippet></ROW><ROW><id>18882049</id><snippet>X</snippet></ROW><ROW><id>18882049</id><snippet>Y</snippet></ROW><ROW><id>18882049</id><snippet>a</snippet></ROW><ROW><id>18882049</id><snippet>b</snippet></ROW><ROW><id>18882049</id><snippet>(20,)</snippet></ROW><ROW><id>18882049</id><snippet>np.vstack([a,b])</snippet></ROW><ROW><id>18882049</id><snippet>(2, 20)</snippet></ROW><ROW><id>18882049</id><snippet>In [66]: np.vstack([a,b]).shape
Out[66]: (2, 20)
</snippet></ROW><ROW><id>18882049</id><snippet>np.vstack([a, b])</snippet></ROW><ROW><id>18882049</id><snippet>a</snippet></ROW><ROW><id>18882049</id><snippet>b</snippet></ROW><ROW><id>18882049</id><snippet>A</snippet></ROW><ROW><id>18882049</id><snippet>m = np.dot(A, np.vstack([a,b]))
</snippet></ROW><ROW><id>18882049</id><snippet>m</snippet></ROW><ROW><id>18882049</id><snippet>x'</snippet></ROW><ROW><id>18882049</id><snippet>y'</snippet></ROW><ROW><id>18882049</id><snippet>matrix</snippet></ROW><ROW><id>18882049</id><snippet>ndarray</snippet></ROW><ROW><id>18882049</id><snippet>A</snippet></ROW><ROW><id>18882049</id><snippet>matrix</snippet></ROW><ROW><id>18882049</id><snippet>ndarray</snippet></ROW><ROW><id>18882049</id><snippet>np.array(...)</snippet></ROW><ROW><id>18882049</id><snippet>*</snippet></ROW><ROW><id>18882049</id><snippet>A</snippet></ROW><ROW><id>18882049</id><snippet>ndarray</snippet></ROW><ROW><id>18882049</id><snippet>A2</snippet></ROW><ROW><id>18882049</id><snippet>matrix</snippet></ROW><ROW><id>18882049</id><snippet>import numpy as np

A = np.array([[1.,1.],[1.,1.]])
A2 = np.matrix([[1.,1.],[1.,1.]])
a = np.random.random(20)
b = np.random.random(20)
c = np.vstack([a,b])

m = np.dot(A, c)
m2 = A2 * c

assert np.allclose(m, m2)
</snippet></ROW><ROW><id>18882156</id><snippet>eval()</snippet></ROW><ROW><id>18882156</id><snippet>EOFError</snippet></ROW><ROW><id>18882156</id><snippet>Exception</snippet></ROW><ROW><id>18882156</id><snippet>try:
    print "het resultaat is:", eval(input)
except Exception:
    print "Oeps, je calculatie klopt niet."
</snippet></ROW><ROW><id>18882156</id><snippet>try:
    print "het resultaat is:", eval(input)
except Exception as err:
    print "Oeps, je calculatie klopt niet:", err
</snippet></ROW><ROW><id>18882156</id><snippet>operator</snippet></ROW><ROW><id>18882156</id><snippet>EOFError</snippet></ROW><ROW><id>18882156</id><snippet>raw_input()</snippet></ROW><ROW><id>18882156</id><snippet>&gt;&gt;&gt; raw_input('Close this prompt with CTRL-D ')
Close this prompt with CTRL-D Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
EOFError
</snippet></ROW><ROW><id>18882156</id><snippet>raw_input()</snippet></ROW><ROW><id>18882156</id><snippet>input()</snippet></ROW><ROW><id>18882156</id><snippet>eval()</snippet></ROW><ROW><id>18882317</id><snippet>a_key = ndb.Key(A, 'mykey')
aext_key = ndb.Key(AEXT, 'mykey')
</snippet></ROW><ROW><id>18882317</id><snippet>'mykey'</snippet></ROW><ROW><id>18882334</id><snippet>buildbot sendchange --master {MASTERHOST}:{PORT} --auth {USER}:{PASS}
    --who {USER} {FILENAMES..}
</snippet></ROW><ROW><id>18882336</id><snippet>matplotlib</snippet></ROW><ROW><id>18882336</id><snippet>networkx</snippet></ROW><ROW><id>18882336</id><snippet>matplotlib</snippet></ROW><ROW><id>18882402</id><snippet>app = Flask(__name__)

app.config.update(dict(
    DEBUG = True,
    MAIL_SERVER = 'smtp.gmail.com',
    MAIL_PORT = 587,
    MAIL_USE_TLS = True,
    MAIL_USE_SSL = False,
    MAIL_USERNAME = 'my_username@gmail.com',
    MAIL_PASSWORD = 'my_password',
))

mail = Mail(app)
</snippet></ROW><ROW><id>18882477</id><snippet>unsigned int</snippet></ROW><ROW><id>18882477</id><snippet>UINT_MAX</snippet></ROW><ROW><id>18882477</id><snippet>int</snippet></ROW><ROW><id>18882477</id><snippet>return hash % (1 &lt;&lt; 32)
</snippet></ROW><ROW><id>18882477</id><snippet>int</snippet></ROW><ROW><id>18882477</id><snippet>%</snippet></ROW><ROW><id>18882477</id><snippet>unsigned int</snippet></ROW><ROW><id>18882477</id><snippet>%</snippet></ROW><ROW><id>18882477</id><snippet>&amp;</snippet></ROW><ROW><id>18882477</id><snippet>unsigned int</snippet></ROW><ROW><id>18882477</id><snippet>4294967293</snippet></ROW><ROW><id>18882477</id><snippet>-3</snippet></ROW><ROW><id>18882477</id><snippet>GMP</snippet></ROW><ROW><id>18882477</id><snippet>BCMath</snippet></ROW><ROW><id>18882477</id><snippet>-3</snippet></ROW><ROW><id>18882477</id><snippet>4294967293</snippet></ROW><ROW><id>18882477</id><snippet>int</snippet></ROW><ROW><id>18882477</id><snippet>long</snippet></ROW><ROW><id>18882477</id><snippet>int</snippet></ROW><ROW><id>18882477</id><snippet>long</snippet></ROW><ROW><id>18882477</id><snippet>int</snippet></ROW><ROW><id>18882477</id><snippet>int</snippet></ROW><ROW><id>18882571</id><snippet>loc</snippet></ROW><ROW><id>18882571</id><snippet>In [11]: df.loc[3] = ['V1', 4.3, 2.2, 2.2, 20.2]
</snippet></ROW><ROW><id>18882571</id><snippet> In [12]: df.loc[3, list('ABCDE')] = ['V1', 4.3, 2.2, 2.2, 20.2]
</snippet></ROW><ROW><id>18882607</id><snippet>$('mybutton').on('click' yada yada yada...</snippet></ROW><ROW><id>18882658</id><snippet>active = User.select().where(User.active == True)
try:
    user = active.where(User.username == request.form['username']).get()
except User.DoesNotExist:
    return make_response(jsonify({'error': 'Bad request'}), 400)
else:
    if not user.check_password(...)
</snippet></ROW><ROW><id>18882913</id><snippet>Person</snippet></ROW><ROW><id>18882913</id><snippet>date</snippet></ROW><ROW><id>18882913</id><snippet>def filter(request):
    if 'date_from' in request.GET and 'date_to' in request.GET:
        # form data has been submitted
        form = PersonForm(request.GET)
        if form.is_valid():
            date_from = form.cleaned_data['date_from']
            date_to = form.cleaned_data['date_to']
            people = Person.objects.filter(date__range=(date_from, date_to))
            table = PersonTable(people)
        else:
            table = PersonTable(Person.objects.all())
    else:
        form = PersonForm()
        table = PersonTable(Person.objects.all())
    RequestConfig(request, paginate={"per_page": 100}).configure(table)
    args = {}
    args.update(csrf(request))
    args['form'] = form
    args['table'] = table
    return render(request, 'people.html', args)
</snippet></ROW><ROW><id>18882913</id><snippet>method</snippet></ROW><ROW><id>18882913</id><snippet>GET</snippet></ROW><ROW><id>18882913</id><snippet>POST</snippet></ROW><ROW><id>18882913</id><snippet>GET</snippet></ROW><ROW><id>18882979</id><snippet>_CFRelease</snippet></ROW><ROW><id>18882979</id><snippet>_CGEventCreate</snippet></ROW><ROW><id>18882979</id><snippet>gcc mouse.c</snippet></ROW><ROW><id>18882979</id><snippet>gcc mouse.c -framework CoreFoundation</snippet></ROW><ROW><id>18882979</id><snippet>mouse.c</snippet></ROW><ROW><id>18882979</id><snippet>#include &lt;CoreFoundation/CoreFoundation.h&gt;</snippet></ROW><ROW><id>18882979</id><snippet>-framework CoreFoundation</snippet></ROW><ROW><id>18882979</id><snippet>-l</snippet></ROW><ROW><id>18882979</id><snippet>autopy</snippet></ROW><ROW><id>18882979</id><snippet>main</snippet></ROW><ROW><id>18882979</id><snippet>main</snippet></ROW><ROW><id>18882982</id><snippet>global</snippet></ROW><ROW><id>18882982</id><snippet>a = 4
def foo(x):
    global a
    a = 10
foo(2)
print(a)  # prints 10
</snippet></ROW><ROW><id>18883272</id><snippet># Returns a string minus all levels of empty formatting tags
def remove_empty_html_tags(input_string):
    matcher = r'&lt;(?P&lt;tag&gt;strong|span|em)\b[^&gt;]*&gt;(\s*)&lt;/(?P=tag)&gt;'
    old_string = input_string
    new_string = re.sub(matcher, r'\1', old_string)
    while new_string != old_string:
        old_string = new_string
        new_string = re.sub(matcher, r'\1', new_string)
    return new_string
</snippet></ROW><ROW><id>18883398</id><snippet>background_a = [fig.canvas.copy_from_bbox(ax.bbox)]
background_b = [fig.canvas.copy_from_bbox(bx.bbox)]
</snippet></ROW><ROW><id>18883398</id><snippet>restore_region</snippet></ROW><ROW><id>18883398</id><snippet>background_a = fig.canvas.copy_from_bbox(ax.bbox)
background_b = fig.canvas.copy_from_bbox(bx.bbox)
</snippet></ROW><ROW><id>18883398</id><snippet>draw_artist</snippet></ROW><ROW><id>18883398</id><snippet>fig.canvas.restore_region(background_a)
fig.canvas.restore_region(background_b)

ax.draw_artist(line1)
bx.draw_artist(line2)

fig.canvas.blit(ax.bbox)
fig.canvas.blit(bx.bbox)
</snippet></ROW><ROW><id>18883398</id><snippet>ax = fig.add_subplot(211)
bx = fig.add_subplot(212)
ax.xaxis.set_animated(True)
bx.xaxis.set_animated(True)
</snippet></ROW><ROW><id>18883398</id><snippet>ax.bbox</snippet></ROW><ROW><id>18883398</id><snippet>figbackground = fig.canvas.copy_from_bbox(fig.bbox)
</snippet></ROW><ROW><id>18883398</id><snippet>fig.canvas.restore_region(figbackground)
</snippet></ROW><ROW><id>18883398</id><snippet>ax.draw_artist(line1)
bx.draw_artist(line2)
ax.xaxis.draw(fig.canvas.renderer)
bx.xaxis.draw(fig.canvas.renderer)
</snippet></ROW><ROW><id>18883398</id><snippet>fig.canvas.blit(ax.clipbox)
fig.canvas.blit(bx.clipbox)
</snippet></ROW><ROW><id>18883398</id><snippet>Animation</snippet></ROW><ROW><id>18883460</id><snippet>[d for d in mydicts if d['foo']]
</snippet></ROW><ROW><id>18883460</id><snippet>mylist = [d for d in mydicts if d['foo']]
</snippet></ROW><ROW><id>18883460</id><snippet>mylist</snippet></ROW><ROW><id>18883460</id><snippet>assert type(mylist) == list
</snippet></ROW><ROW><id>18883460</id><snippet>mylist</snippet></ROW><ROW><id>18883460</id><snippet>class</snippet></ROW><ROW><id>18883460</id><snippet>@property</snippet></ROW><ROW><id>18883460</id><snippet>myobj.myprop</snippet></ROW><ROW><id>18883460</id><snippet>myprop</snippet></ROW><ROW><id>18883460</id><snippet>mylist = [d for d in mydicts if d['foo']]</snippet></ROW><ROW><id>18883460</id><snippet>mylist = [1, 2, 3]</snippet></ROW><ROW><id>18883460</id><snippet>mylist</snippet></ROW><ROW><id>18883460</id><snippet>[1, 2, 3]</snippet></ROW><ROW><id>18883460</id><snippet>mylist[0] = 0</snippet></ROW><ROW><id>18883460</id><snippet>mylist</snippet></ROW><ROW><id>18883490</id><snippet>and</snippet></ROW><ROW><id>18883490</id><snippet>or</snippet></ROW><ROW><id>18883490</id><snippet>if 18.5 &lt;= bmi &lt; 25</snippet></ROW><ROW><id>18883526</id><snippet>for (prev_sum, subset) in old_subsets.iteritems():
</snippet></ROW><ROW><id>18883526</id><snippet>Map.Entry&lt;K, V&gt;</snippet></ROW><ROW><id>18883526</id><snippet>Set&lt;Map.Entry&lt;K, V&gt;&gt; entrySet()</snippet></ROW><ROW><id>18883526</id><snippet>Map&lt;K, V&gt;</snippet></ROW><ROW><id>18883526</id><snippet>for (Map.Entry&lt;Integer, Set&lt;Integer&gt;&gt; e : oldSubsets.entrySet()) {
   Integer prevSum = e.getKey();
   Set&lt;Integer&gt; subset = e.getValue();
   ...
}
</snippet></ROW><ROW><id>18883543</id><snippet>puts</snippet></ROW><ROW><id>18883543</id><snippet>print</snippet></ROW><ROW><id>18883543</id><snippet>return</snippet></ROW><ROW><id>18883543</id><snippet>return</snippet></ROW><ROW><id>18883543</id><snippet>id</snippet></ROW><ROW><id>18883543</id><snippet>id</snippet></ROW><ROW><id>18883543</id><snippet>Id</snippet></ROW><ROW><id>18883543</id><snippet>def id()
    return rand(10**15)+rand(10**16)
end
class test
      def initialize(name=nil,password=nil)
          @id = id()
      end
end
</snippet></ROW><ROW><id>18883922</id><snippet>leaves</snippet></ROW><ROW><id>18883922</id><snippet>leaves</snippet></ROW><ROW><id>18883922</id><snippet>leaves = []</snippet></ROW><ROW><id>18883922</id><snippet>__init__</snippet></ROW><ROW><id>18883922</id><snippet>self.leaves = []</snippet></ROW><ROW><id>18883922</id><snippet>def __init__(self, data=""):
    self.data = data
    self.leaves = [] # Create a new list to hold this instance's children!
</snippet></ROW><ROW><id>18883922</id><snippet>addLeaf</snippet></ROW><ROW><id>18883922</id><snippet>print([leaf.data for leaf in self.leaves])</snippet></ROW><ROW><id>18883922</id><snippet>['LEVEL1 0']
['LEVEL1 0', 'LEVEL1 1']
['LEVEL1 0', 'LEVEL1 1', 'LEVEL1 0 ... LEVEL2 0']
</snippet></ROW><ROW><id>18883922</id><snippet>node</snippet></ROW><ROW><id>18883922</id><snippet>leaves</snippet></ROW><ROW><id>18883922</id><snippet>__init__</snippet></ROW><ROW><id>18883922</id><snippet>addLeaf</snippet></ROW><ROW><id>18883922</id><snippet>['LEVEL1 0']
['LEVEL1 0', 'LEVEL1 1']
['LEVEL1 0 ... LEVEL2 0']
</snippet></ROW><ROW><id>18883984</id><snippet>import sys
import os
import urllib
import threading
from Queue import Queue

class DownloadThread(threading.Thread):
    def __init__(self, queue, destfolder):
        super(DownloadThread, self).__init__()
        self.queue = queue
        self.destfolder = destfolder
        self.daemon = True

    def run(self):
        while True:
            url = self.queue.get()
            try:
                self.download_url(url)
            except Exception,e:
                print "   Error: %s"%e
            self.queue.task_done()

    def download_url(self, url):
        # change it to a different way if you require
        name = url.split('/')[-1]
        dest = os.path.join(self.destfolder, name)
        print "[%s] Downloading %s -&gt; %s"%(self.ident, url, dest)
        urllib.urlretrieve(url, dest)

def download(urls, destfolder, numthreads=4):
    queue = Queue()
    for url in urls:
        queue.put(url)

    for i in range(numthreads):
        t = DownloadThread(queue, destfolder)
        t.start()

    queue.join()

if __name__ == "__main__":
    download(sys.argv[1:], "/tmp")
</snippet></ROW><ROW><id>18883984</id><snippet>$ python download.py http://en.wikipedia.org/wiki/1 http://en.wikipedia.org/wiki/2 http://en.wikipedia.org/wiki/3 http://en.wikipedia.org/wiki/4
[4456497152] Downloading http://en.wikipedia.org/wiki/1 -&gt; /tmp/1
[4457033728] Downloading http://en.wikipedia.org/wiki/2 -&gt; /tmp/2
[4457701376] Downloading http://en.wikipedia.org/wiki/3 -&gt; /tmp/3
[4458258432] Downloading http://en.wikipedia.org/wiki/4 -&gt; /tmp/4
</snippet></ROW><ROW><id>18884062</id><snippet>datetime</snippet></ROW><ROW><id>18884062</id><snippet>time()</snippet></ROW><ROW><id>18884062</id><snippet>time</snippet></ROW><ROW><id>18884062</id><snippet>time</snippet></ROW><ROW><id>18884062</id><snippet>&lt;</snippet></ROW><ROW><id>18884062</id><snippet>&gt;</snippet></ROW><ROW><id>18884062</id><snippet>import datetime
import time
timestamp = datetime.datetime.now().time() # Throw away the date information
time.sleep(1)
print (datetime.datetime.now().time() &gt; timestamp) # &gt;&gt;&gt; True

start = datetime.time(8, 30)
end = datetime.time(15)
print (start &lt;= timestamp &lt;= end) # &gt;&gt;&gt; depends on what time it is
</snippet></ROW><ROW><id>18884062</id><snippet>datetime</snippet></ROW><ROW><id>18884062</id><snippet>now = datetime.datetime.now()
if 0 &lt;= now.weekday() &lt;= 4:
    print ("It's a weekday!")
print (start &lt;= now.time() &lt;= end) # with start &amp; end defined as above
</snippet></ROW><ROW><id>18884099</id><snippet>a |= b</snippet></ROW><ROW><id>18884099</id><snippet>a = a | b</snippet></ROW><ROW><id>18884099</id><snippet>switches = [0,1,1,0,1,0,0,0]</snippet></ROW><ROW><id>18884099</id><snippet>val = 0
for i,s in enumerate(switches):
    val |= (s &lt;&lt; i)

print(val)
</snippet></ROW><ROW><id>18884099</id><snippet>22</snippet></ROW><ROW><id>18884099</id><snippet>(s &lt;&lt; i)</snippet></ROW><ROW><id>18884099</id><snippet>val</snippet></ROW><ROW><id>18884099</id><snippet>E_ERROR</snippet></ROW><ROW><id>18884099</id><snippet>E_PARSE</snippet></ROW><ROW><id>18884099</id><snippet>E_CORE_ERROR</snippet></ROW><ROW><id>18884099</id><snippet>print(1|4|16)
# 21
</snippet></ROW><ROW><id>18884099</id><snippet>E_ERROR</snippet></ROW><ROW><id>18884099</id><snippet>E_PARSE</snippet></ROW><ROW><id>18884099</id><snippet>E_CORE_ERROR</snippet></ROW><ROW><id>18884099</id><snippet>set_mask(get_mask() + E_PARSE)
</snippet></ROW><ROW><id>18884099</id><snippet>E_PARSE</snippet></ROW><ROW><id>18884099</id><snippet>E_PARSE</snippet></ROW><ROW><id>18884099</id><snippet>set_mask(get_mask() | E_PARSE)
</snippet></ROW><ROW><id>18884099</id><snippet>E_PARSE</snippet></ROW><ROW><id>18884099</id><snippet>E_PARSE</snippet></ROW><ROW><id>18884211</id><snippet>def</snippet></ROW><ROW><id>18884211</id><snippet>class</snippet></ROW><ROW><id>18884211</id><snippet>module</snippet></ROW><ROW><id>18884211</id><snippet>dictionary</snippet></ROW><ROW><id>18884211</id><snippet>isDictionary</snippet></ROW><ROW><id>18884211</id><snippet>$</snippet></ROW><ROW><id>18884211</id><snippet>@</snippet></ROW><ROW><id>18884344</id><snippet>page.id</snippet></ROW><ROW><id>18884344</id><snippet>long</snippet></ROW><ROW><id>18884344</id><snippet>In [1]: id = 5586L
In [2]: type(id)
Out[2]: long
In [3]: id()
TypeError: 'long' object is not callable
</snippet></ROW><ROW><id>18884344</id><snippet>str(page.id)</snippet></ROW><ROW><id>18884344</id><snippet>for page in domain.page_set.all():
    filename = "{}_page_{}.html".format(domain.url, page.id)
</snippet></ROW><ROW><id>18884355</id><snippet>registeredusers = ['john.doe', 'peter.parker', 'bruce.banner']

def getUsername():
    global registeredusers
    loginname = str(raw_input("Enter username: "))
    if loginname in registeredusers:
        return True
    else:
        return False

def loggingIn():
    regLog = str(raw_input("Login or Register? "))
    if regLog == 'Login':
        if getUsername():
            print "Yay! Logged in"
        else:
            print "Login failed"
    elif regLog == 'Register':
        # do stuff
        pass
    else:
        # do stuff
        pass

loggingIn()
</snippet></ROW><ROW><id>18884387</id><snippet>&gt;&gt;&gt; matlab_eigvec = np.array([[0.0896+0.6789j, 0.0953+0.7225j],
...                           [-0.7288+0.j, 0.6848+0.j]])
&gt;&gt;&gt; 
&gt;&gt;&gt; f1, f2 = matlab_eigvec.T # matlab eigenvectors
&gt;&gt;&gt; e1, e2 = eig_vec.T # numpy eigenvectors
&gt;&gt;&gt; f1/e1
array([-0.13084653-0.99142531j, -0.13079065-0.99146862j])
&gt;&gt;&gt; f2/e2
array([-0.13077050-0.99141326j, -0.13078845-0.99145198j])
</snippet></ROW><ROW><id>18884387</id><snippet>-0.13-0.99j</snippet></ROW><ROW><id>18884469</id><snippet>@supers.map(&amp;:last).inject(:+)
</snippet></ROW><ROW><id>18884469</id><snippet>map(&amp;:last)</snippet></ROW><ROW><id>18884469</id><snippet>inject(:+)</snippet></ROW><ROW><id>18884622</id><snippet>request.get_host() + reverse('authorize')
</snippet></ROW><ROW><id>18884651</id><snippet>from itertools import izip

fig, axeses = plt.subplots(3,1,sharex=False)
#3X3 Top to bottom

for yl, cl, ax in izip([yearList1, yearList2, yearList3],
                       [chartList1, chartList2, chartist3],
                       axeses):
    ax.bar(range(len(cl)), cl, align='center')
    ax.set_ylim(0,30)
    ax.set_yticks(np.arange(0, 31, 5))
    ax.yaxis.set_minor_locator(minorLocator)

    xlabels = [dateFmt(xl) for xl in yl]  # make a list of formatted labels
    ax.set_xticks(range(len(cl)))  # put the tick markers under your bars
    ax.set_xticklabels(xlabels)    # set the labels to be your formatted years
    #Rotate tick labels 90 degrees
    for label in ax.get_xticklabels():
        label.set_rotation(90)

# you only need to do this once
fig.tight_layout()

fig.subplots_adjust(right=0.925)
fig.savefig('%s\\run.pdf' % outDir)
</snippet></ROW><ROW><id>18884651</id><snippet>set_xticks</snippet></ROW><ROW><id>18884651</id><snippet>set_xticklabels</snippet></ROW><ROW><id>18884772</id><snippet>1</snippet></ROW><ROW><id>18884772</id><snippet>count(1)</snippet></ROW><ROW><id>18884772</id><snippet>n</snippet></ROW><ROW><id>18884772</id><snippet>1</snippet></ROW><ROW><id>18884772</id><snippet>n &gt; 0</snippet></ROW><ROW><id>18884772</id><snippet>Count 1 , 1</snippet></ROW><ROW><id>18884772</id><snippet>n</snippet></ROW><ROW><id>18884772</id><snippet>1</snippet></ROW><ROW><id>18884772</id><snippet>count(0)</snippet></ROW><ROW><id>18884772</id><snippet>n</snippet></ROW><ROW><id>18884772</id><snippet>0</snippet></ROW><ROW><id>18884772</id><snippet>n &gt; 0</snippet></ROW><ROW><id>18884772</id><snippet>Done</snippet></ROW><ROW><id>18884772</id><snippet>Count 2 , 1</snippet></ROW><ROW><id>18884772</id><snippet>n</snippet></ROW><ROW><id>18884772</id><snippet>1</snippet></ROW><ROW><id>18884772</id><snippet>done</snippet></ROW><ROW><id>18884772</id><snippet>"Done"</snippet></ROW><ROW><id>18884772</id><snippet>def count(n):
    if n &gt; 0:
        count(n - 1)
    else:
        print "Done"
</snippet></ROW><ROW><id>18884772</id><snippet>"Done"</snippet></ROW><ROW><id>18884772</id><snippet>count(1)</snippet></ROW><ROW><id>18884772</id><snippet>n</snippet></ROW><ROW><id>18884772</id><snippet>1</snippet></ROW><ROW><id>18884772</id><snippet>n &gt; 0</snippet></ROW><ROW><id>18884772</id><snippet>count(0)</snippet></ROW><ROW><id>18884772</id><snippet>n</snippet></ROW><ROW><id>18884772</id><snippet>0</snippet></ROW><ROW><id>18884772</id><snippet>n &gt; 0</snippet></ROW><ROW><id>18884772</id><snippet>Done</snippet></ROW><ROW><id>18884865</id><snippet>True</snippet></ROW><ROW><id>18884865</id><snippet>False</snippet></ROW><ROW><id>18884865</id><snippet>0</snippet></ROW><ROW><id>18884865</id><snippet>None</snippet></ROW><ROW><id>18884865</id><snippet>or</snippet></ROW><ROW><id>18884865</id><snippet>(1 or 2 or 3)</snippet></ROW><ROW><id>18884865</id><snippet>1</snippet></ROW><ROW><id>18884865</id><snippet>in</snippet></ROW><ROW><id>18884865</id><snippet>if number in (1, 2, 3):
    # Do logic
</snippet></ROW><ROW><id>18884880</id><snippet>action</snippet></ROW><ROW><id>18884880</id><snippet>&lt;form action="http://yourdomain/your/gae/endpoint" method="post"&gt;</snippet></ROW><ROW><id>18884908</id><snippet>href</snippet></ROW><ROW><id>18884908</id><snippet>$ curl -q -s  "http://www.ratemyprofessors.com/SelectTeacher.jsp?sid=2311&amp;pageNo=2"  |grep \"next\"
    &lt;a href="/SelectTeacher.jsp?sid=2311&amp;pageNo=3" id="next"&gt;c&lt;/a&gt;
$ curl -q -s  "http://www.ratemyprofessors.com/SelectTeacher.jsp?pageNo=2&amp;sid=2311"  |grep \"next\"
    &lt;a href="/SelectTeacher.jsp?pageNo=2&amp;sid=2311&amp;pageNo=3" id="next"&gt;c&lt;/a&gt;
</snippet></ROW><ROW><id>18884908</id><snippet>canonicalize=False</snippet></ROW><ROW><id>18884908</id><snippet>SgmlLinkExtractor</snippet></ROW><ROW><id>18884908</id><snippet>rules = [
    Rule(SgmlLinkExtractor(restrict_xpaths='//div[@id="pagination"]', 
                           canonicalize=False),
         callback='parser', follow=True),
]
</snippet></ROW><ROW><id>18885237</id><snippet>balance - transaction_amount</snippet></ROW><ROW><id>18885237</id><snippet>balance</snippet></ROW><ROW><id>18885237</id><snippet>&gt;&gt;&gt; cupcakes = 5
&gt;&gt;&gt; print("I ate one cupcake, now I have", cupcakes - 1, "cupcakes")
I ate one cupcake, now I have 4 cupcakes
&gt;&gt;&gt; print(cupcakes)
5 # We never modified the variable cupcakes
</snippet></ROW><ROW><id>18885237</id><snippet>balance = balance - transaction_amount</snippet></ROW><ROW><id>18885237</id><snippet>balance -= transaction_amount</snippet></ROW><ROW><id>18885237</id><snippet>balance</snippet></ROW><ROW><id>18885315</id><snippet>n</snippet></ROW><ROW><id>18885315</id><snippet>n-1</snippet></ROW><ROW><id>18885315</id><snippet>0</snippet></ROW><ROW><id>18885315</id><snippet>1</snippet></ROW><ROW><id>18885315</id><snippet>def f(n):
    if n == 0:
        return [""]
    return [a + b for a in "RL" for b in f(n-1)]

print(f(3))
</snippet></ROW><ROW><id>18885315</id><snippet>['RRR', 'RRL', 'RLR', 'RLL', 'LRR', 'LRL', 'LLR', 'LLL']
</snippet></ROW><ROW><id>18885315</id><snippet>R</snippet></ROW><ROW><id>18885315</id><snippet>0</snippet></ROW><ROW><id>18885315</id><snippet>L</snippet></ROW><ROW><id>18885315</id><snippet>1</snippet></ROW><ROW><id>18885355</id><snippet>a = [0xff]*1024
b = [0x01,0x02,0x03,0x04]
a[10:14] = b
</snippet></ROW><ROW><id>18885355</id><snippet>a</snippet></ROW><ROW><id>18885355</id><snippet>b</snippet></ROW><ROW><id>18885355</id><snippet>a[10] = b[0];a[11] = b[1]</snippet></ROW><ROW><id>18885410</id><snippet>multiprocessing.freeze_support</snippet></ROW><ROW><id>18885410</id><snippet>if __name__ ==
  '__main__'</snippet></ROW><ROW><id>18885410</id><snippet>from multiprocessing import Process, freeze_support

def f():
    print 'hello world!'

if __name__ == '__main__':
    freeze_support()
    Process(target=f).start()
</snippet></ROW><ROW><id>18885410</id><snippet>freeze_support()</snippet></ROW><ROW><id>18885410</id><snippet>RuntimeError</snippet></ROW><ROW><id>18885410</id><snippet>freeze_support()</snippet></ROW><ROW><id>18885410</id><snippet>if __name__ == '__main__'</snippet></ROW><ROW><id>18885410</id><snippet>multiprocessing</snippet></ROW><ROW><id>18885410</id><snippet>fork()</snippet></ROW><ROW><id>18885508</id><snippet>boat1 = ['&lt;','&gt;'],
</snippet></ROW><ROW><id>18885508</id><snippet>t = (1, 3)
</snippet></ROW><ROW><id>18885508</id><snippet>1</snippet></ROW><ROW><id>18885508</id><snippet>3</snippet></ROW><ROW><id>18885508</id><snippet>t = (1,)
</snippet></ROW><ROW><id>18885508</id><snippet>t = 1,
</snippet></ROW><ROW><id>18885508</id><snippet>boat</snippet></ROW><ROW><id>18885508</id><snippet>i = 0
while i &lt; len(boat):
    ocean[spot - 1 + i] = boat[i]
    i += 1
</snippet></ROW><ROW><id>18885508</id><snippet>start = spot - 1
end = start + len(boat)
ocean[start:end] = boat
</snippet></ROW><ROW><id>18885508</id><snippet>ocean[spot-1:spot-1+len(boat)] = boat
</snippet></ROW><ROW><id>18885508</id><snippet>taken_spots</snippet></ROW><ROW><id>18885508</id><snippet>ocean</snippet></ROW><ROW><id>18885508</id><snippet>taken_spots</snippet></ROW><ROW><id>18885508</id><snippet>def spot_taken(i, ship):
    start = i
    end = i + len(ship)
    for ch in ocean[start:end]:
        if ch != 'O':
            return True
    return False
</snippet></ROW><ROW><id>18885508</id><snippet>any()</snippet></ROW><ROW><id>18885508</id><snippet>all()</snippet></ROW><ROW><id>18885508</id><snippet>spot_taken()</snippet></ROW><ROW><id>18885508</id><snippet>def spot_taken(i, ship):
    start = i
    end = i + len(ship)
    return any(ch != 'O' for ch in ocean[start:end])
</snippet></ROW><ROW><id>18885508</id><snippet>def spot_taken(i, ship):
    return any(ch != 'O' for ch in ocean[i:i+len(ship)])
</snippet></ROW><ROW><id>18885508</id><snippet>any()</snippet></ROW><ROW><id>18885508</id><snippet>all()</snippet></ROW><ROW><id>18885508</id><snippet>print()</snippet></ROW><ROW><id>18885508</id><snippet>boat</snippet></ROW><ROW><id>18885508</id><snippet>(['&lt;', '&gt;'],)</snippet></ROW><ROW><id>18885508</id><snippet>print()</snippet></ROW><ROW><id>18885573</id><snippet>$ python-exec -l python -f html -o /tmp/test.file
#this is the input#
print 'hello world'
....
</snippet></ROW><ROW><id>18885573</id><snippet>/usr/bin/python-exec</snippet></ROW><ROW><id>18885573</id><snippet>#!/usr/bin/python-exec-c                                                                                                                             
# vim:fileencoding=utf-8:ft=python                                               
# (c) 2012 Michał Górny                                                          
# Released under the terms of the 2-clause BSD license.                          
#                                                                                
# This is not the script you are looking for. This is just a wrapper.            
# The actual scripts of this application were installed with -python*,           
# -pypy* or -jython* suffixes. You are most likely looking for one               
# of those.                                                                      

from __future__ import with_statement                                            
import os, os.path, sys                                                          

try:                                                                             
    from epython import EPYTHON                                                  
except ImportError:                                                              
    EPYTHON = os.path.basename(sys.executable)                                   
    if '' and EPYTHON.endswith(''):                                              
        EPYTHON = EPYTHON[:-len('')]                                             

# In the loop:                                                                   
# sys.argv[0] keeps the 'bare' name                                              
# __file__ keeps the 'full' name

while True:                                                                      
    __file__ = sys.argv[0] + '-' + EPYTHON                                       

    try:                                                                         
        kwargs = {}                                                              
        if sys.version_info[0] &gt;= 3:                                             
            import tokenize                                                      

            # need to provide encoding                                           
            with open(__file__, 'rb') as f:                                      
                kwargs['encoding'] = tokenize.detect_encoding(f.readline)[0]     

        with open(__file__, 'r', **kwargs) as f:                                 
            data = f.read()                                                      
    except IOError:                                                              
        # follow symlinks (if supported)                                         
        try:                                                                     
            sys.argv[0] = os.path.join(os.path.dirname(sys.argv[0]),             
                    os.readlink(sys.argv[0]))                                    
        except (OSError, AttributeError):                                        
            # no more symlinks? then it's time to fail.                          
            sys.stderr.write('This Python implementation (%s) is not supported by the script.\n'
                    % EPYTHON)                                                   
            sys.exit(127)
    else:                                                                        
        break                                                                    

sys.argv[0] = __file__                                                           
exec(data)
</snippet></ROW><ROW><id>18885784</id><snippet>In [3]: hyperplanes = np.mat([[0.7071,    0.7071, 1], 
   ...:                       [-0.7071,   0.7071, 1],
   ...:                       [0.7071,   -0.7071, 1],
   ...:                       [-0.7071,  -0.7071, 1]])
</snippet></ROW><ROW><id>18885784</id><snippet>In [4]: hyperplanes
Out[4]: 
matrix([[ 0.7071,  0.7071,  1.    ],
        [-0.7071,  0.7071,  1.    ],
        [ 0.7071, -0.7071,  1.    ],
        [-0.7071, -0.7071,  1.    ]])
</snippet></ROW><ROW><id>18885784</id><snippet>matrix</snippet></ROW><ROW><id>18885784</id><snippet>ndarray</snippet></ROW><ROW><id>18885784</id><snippet>np.array</snippet></ROW><ROW><id>18885784</id><snippet>np.mat</snippet></ROW><ROW><id>18885784</id><snippet>ndarray</snippet></ROW><ROW><id>18885784</id><snippet>a</snippet></ROW><ROW><id>18885784</id><snippet>In [7]: hyperplanes[:][:,0:2].T
Out[7]: 
matrix([[ 0.7071, -0.7071,  0.7071, -0.7071],
        [ 0.7071,  0.7071, -0.7071, -0.7071]])
</snippet></ROW><ROW><id>18885784</id><snippet>In [9]: hyperplanes[:]
Out[9]: 
matrix([[ 0.7071,  0.7071,  1.    ],
        [-0.7071,  0.7071,  1.    ],
        [ 0.7071, -0.7071,  1.    ],
        [-0.7071, -0.7071,  1.    ]])

In [20]: np.all(hyperplanes == hyperplanes[:])
Out[20]: True
</snippet></ROW><ROW><id>18885784</id><snippet>[:]</snippet></ROW><ROW><id>18885784</id><snippet>hyperplanes[:,0:2].T</snippet></ROW><ROW><id>18885784</id><snippet>[:,0:2]</snippet></ROW><ROW><id>18885784</id><snippet>[:,:2]</snippet></ROW><ROW><id>18885784</id><snippet>hyperplanes</snippet></ROW><ROW><id>18885784</id><snippet>In [14]: hyperplanes[:,:2]
Out[14]: 
matrix([[ 0.7071,  0.7071],
        [-0.7071,  0.7071],
        [ 0.7071, -0.7071],
        [-0.7071, -0.7071]])
</snippet></ROW><ROW><id>18885784</id><snippet>.T</snippet></ROW><ROW><id>18885784</id><snippet>In [15]: hyperplanes[:,:2].T
Out[15]: 
matrix([[ 0.7071, -0.7071,  0.7071, -0.7071],
        [ 0.7071,  0.7071, -0.7071, -0.7071]])
</snippet></ROW><ROW><id>18885784</id><snippet>b = hyperplanes[:,2]</snippet></ROW><ROW><id>18885784</id><snippet>In [21]: hyperplanes[:,2]
Out[21]: 
matrix([[ 1.],
        [ 1.],
        [ 1.],
        [ 1.]])
</snippet></ROW><ROW><id>18885784</id><snippet>.T</snippet></ROW><ROW><id>18885786</id><snippet>import csv
import urllib2

req = urllib2.Request('http://financials.morningstar.com/ajax/ReportProcess4CSV.html?&amp;t=XNAS:BRCM&amp;region=usa&amp;culture=en-US&amp;cur=USD&amp;reportType=is&amp;period=12&amp;dataType=A&amp;order=desc&amp;columnYear=5&amp;rounding=3&amp;view=raw&amp;r=886300&amp;denominatorView=raw&amp;number=3')
response = urllib2.urlopen(req)

response.readline() # This reads (and discards) the first row of data which is not needed.
response.readline() # skip the 

myFieldnames = ["firstColName", "TTM", "2012", "2011", "2010", "2009", "2008"]
csvio = csv.DictReader(response, fieldnames=myFieldnames)

print csvio.fieldnames 
for row in csvio:
    print row
</snippet></ROW><ROW><id>18886088</id><snippet>cp .git/hooks/pre-commit /tmp/pre-commit
tr -d '\r' &lt; /tmp/pre-commit &gt; .git/hooks/pre-commit
</snippet></ROW><ROW><id>18886088</id><snippet>git</snippet></ROW><ROW><id>18886117</id><snippet>//</snippet></ROW><ROW><id>18886117</id><snippet>&gt;&gt;&gt; 3e8 // 4.8e15  # returns the floor
0.0
&gt;&gt;&gt; 3e8 / 4.8e15
6.25e-08
</snippet></ROW><ROW><id>18886117</id><snippet>//</snippet></ROW><ROW><id>18886117</id><snippet>/</snippet></ROW><ROW><id>18886346</id><snippet>loads</snippet></ROW><ROW><id>18886346</id><snippet>json.load</snippet></ROW><ROW><id>18886346</id><snippet>import json

with open('meters_parameters.json') as f:
    data = json.load(f)
print data
</snippet></ROW><ROW><id>18886397</id><snippet>collections.defaultdict(list)</snippet></ROW><ROW><id>18886397</id><snippet>import collections

input_dicts = [{1: 0}, {1: 1}, {1: 2}]

output_dict = collections.defaultdict(list)
for d in input_dicts:
    for key in d:
        output_dict[key].append(d[key])
</snippet></ROW><ROW><id>18886397</id><snippet>collections.defaultdict</snippet></ROW><ROW><id>18886397</id><snippet>collections.defaultdict(list)</snippet></ROW><ROW><id>18886438</id><snippet>import time
current_time = time.strftime('%H:%M:%S %p %Z', time.localtime())
print 'Now is %s' % current_time
</snippet></ROW><ROW><id>18886438</id><snippet>Now is 07:52:53 AM EEST
</snippet></ROW><ROW><id>18886438</id><snippet>strftime()</snippet></ROW><ROW><id>18886438</id><snippet>localtime()</snippet></ROW><ROW><id>18886564</id><snippet>Chrome DevTools</snippet></ROW><ROW><id>18886564</id><snippet>FireBug</snippet></ROW><ROW><id>18886564</id><snippet>DragonFly</snippet></ROW><ROW><id>18886564</id><snippet>DevTools</snippet></ROW><ROW><id>18886564</id><snippet>Network</snippet></ROW><ROW><id>18886564</id><snippet>__EVENTTARGET:
__EVENTARGUMENT:
__LASTFOCUS:
__VIEWSTATE:5UILUho/L3O0HOt9WrIfldHD4Ym6KBWkQYI1GgarbgHeAdzM9zyNbcH0PdP6xtKurlJKneju0/aAJxqKYjiIzo/7h7UhLrfsGul1Wq4T0+BroiT+Y4QVML66jsyaUNaM6KNOAK2CSzaphvSojEe1BV9JVGPYWIhvx0ddgfi7FXKIwdh682cgo4GHmilS7TWcbKxMoQvm9FgKY0NFp7HsggGvG/acqfGUJuw0KaYeWZy0pWKEy+Dntb4Y0TGwLqoJxFNQyOqvKVxnV1MJ0OZ4Nuxo5JHmkeknh4dpjJEwui01zK1WDuBHHsyOmE98t2YMQXXTcE7pnbbZaer2LSFNzCtrjzBmZT8xzCkKHYXI31BxPBEhALcSrbJ/QXeqA7Xrqn9UyCuTcN0Czy0ZRPd2wabNR3DgE+cCYF4KMGUjMUIP+No2nqCvsIAKmg8w6Il8OAEGJMAKA01MTMONKK4BH/OAzLMgH75AdGat2pvp1zHVG6wyA4SqumIH//TqJWFh5+MwNyZxN2zZQ5dBfs3b0hVhq0cL3tvumTfb4lr/xpL3rOvaRiatU+sQqgLUn0/RzeKNefjS3pCwUo8CTbTKaSW1IpWPgP/qmCsuIovXz82EkczLiwhEZsBp3SVdQMqtAVcYJzrcHs0x4jcTAWYZUejvtMXxolAnGLdl/0NJeMgz4WB9tTMeETMJAjKHp2YNhHtFS9/C1o+Hxyex32QxIRKHSBlJ37aisZLxYmxs69squmUlcsHheyI5YMfm0SnS0FwES5JqWGm2f5Bh+1G9fFWmGf2QeA6cX/hdiRTZ7VnuFGrdrJVdbteWwaYQuPdekms2YVapwuoNzkS/A+un14rix4bBULMdzij25BkXpDhm3atovNHzETdvz5FsXjKnPlno0gH7la/tkM8iOdQwqbeh7sG+/wKPqPmUk0Cl0kCHNvMCZhrcgQgpIOOgvI2Fp+PoB7mPdb80T2sTJLlV7Oe2ZqMWsYxphsHMXVlXXeju3kWfpY+Ed/D8VGWniE/eoBhhqyOC2+gaWA2tcOyiDPDCoovazwKGWz5B+FN1OTep5VgoHDqoAm2wk1C3o0zJ9a9IuYoATWI1yd2ffQvx6uvZQXcMvTIbhbVJL+ki4yNRLfVjVnPrpUMjafsnjIw2KLYnR0rio8DWIJhpSm13iDj/KSfAjfk4TMSA6HjhhEBXIDN/ShQAHyrKeFVsXhtH5TXSecY6dxU+Xwk7iNn2dhTILa6S/Gmm06bB4nx5Zw8XhYIEI/eucPOAN3HagCp7KaSdzZvrnjbshmP8hJPhnFhlXdJ+OSYDWuThFUypthTxb5NXH3yQk1+50SN872TtQsKwzhJvSIJExMbpucnVmd+V2c680TD4gIcqWVHLIP3+arrePtg0YQiVTa1TNzNXemDyZzTUBecPynkRnIs0dFLSrz8c6HbIGCrLleWyoB7xicUg39pW7KTsIqWh7P0yOiHgGeHqrN95cRAYcQTOhA==
__SCROLLPOSITIONX:0
__SCROLLPOSITIONY:106
__VIEWSTATEENCRYPTED:
__EVENTVALIDATION:g2V3UVCVCwSFKN2X8P+O2SsBNGyKX00cyeXvPVmP5dZSjIwZephKx8278dZoeJsa1CkMIloC0D51U0i4Ai0xD6TrYCpKluZSRSphPZQtAq17ivJrqP1QDoxPfOhFvrMiMQZZKOea7Gi/pLDHx42wy20UdyzLHJOAmV02MZ2fzami616O0NpOY8GQz1S5IhEKizo+NZPb87FgC5XSZdXCiqqoChoflvt1nfhtXFGmbOQgIP8ud9lQ94w3w2qwKJ3bqN5nRXVf5S53G7Lt+Du78nefwJfKK92BSgtJSCMJ/m39ykr7EuMDjauo2KHIp2N5IVzGPdSsiOZH86EBzmYbEw==
ctl00$MainContent$hdnApplyMasterPageWitoutSidebar:0
ctl00$MainContent$hdn1:0
ctl00$MainContent$CorpSearch:rdoByEntityName
ctl00$MainContent$txtEntityName:GO
ctl00$MainContent$ddBeginsWithEntityName:M
ctl00$MainContent$ddBeginsWithIndividual:B
ctl00$MainContent$txtFirstName:
ctl00$MainContent$txtMiddleName:
ctl00$MainContent$txtLastName:
ctl00$MainContent$txtIdentificationNumber:
ctl00$MainContent$txtFilingNumber:
ctl00$MainContent$ddRecordsPerPage:25
ctl00$MainContent$btnSearch:Search Corporations
ctl00$MainContent$hdnW:1920
ctl00$MainContent$hdnH:1053
ctl00$MainContent$SearchControl$hdnRecordsPerPage:
</snippet></ROW><ROW><id>18886564</id><snippet>Begin with 'GO'</snippet></ROW><ROW><id>18886564</id><snippet>WebForms</snippet></ROW><ROW><id>18886564</id><snippet>__VIEWSTATE</snippet></ROW><ROW><id>18886564</id><snippet>__EVENTVALIDATION</snippet></ROW><ROW><id>18886564</id><snippet>import requests
from lxml import etree

URL = 'http://corp.sec.state.ma.us/CorpWeb/CorpSearch/CorpSearch.aspx'

def get_fields():
    res = requests.get(URL)
    if res.ok:
        page = etree.HTML(res.text)
        fields = page.xpath('//form[@id="Form1"]//input')
        return { e.attrib['name']: e.attrib.get('value', '') for e in fields }
</snippet></ROW><ROW><id>18886564</id><snippet>get_fields()</snippet></ROW><ROW><id>18886564</id><snippet>&lt;input&gt;</snippet></ROW><ROW><id>18886564</id><snippet>&lt;select&gt;</snippet></ROW><ROW><id>18886564</id><snippet>def query(data):
    formdata = get_fields()
    formdata.update({
        'ctl00$MainContent$ddRecordsPerPage':'25',
    }) # Hardcode some &lt;select&gt; value
    formdata.update(data)
    res = requests.post(URL, formdata)
    if res.ok:
        page = etree.HTML(res.text)
        return page.xpath('//table[@id="MainContent_SearchControl_grdSearchResultsEntity"]//tr')
</snippet></ROW><ROW><id>18886564</id><snippet>query</snippet></ROW><ROW><id>18886564</id><snippet>def search_by_entity_name(entity_name, entity_search_type='B'):
    return query({
        'ctl00$MainContent$CorpSearch':'rdoByEntityName',
        'ctl00$MainContent$txtEntityName': entity_name,
        'ctl00$MainContent$ddBeginsWithEntityName': entity_search_type,
    })
</snippet></ROW><ROW><id>18886564</id><snippet>&lt;radio&gt;</snippet></ROW><ROW><id>18886564</id><snippet>'ctl00$MainContent$CorpSearch':'rdoByEntityName'</snippet></ROW><ROW><id>18886564</id><snippet>search_by_individual_name</snippet></ROW><ROW><id>18886564</id><snippet>Origin</snippet></ROW><ROW><id>18886564</id><snippet>Referer</snippet></ROW><ROW><id>18886564</id><snippet>User-Agent</snippet></ROW><ROW><id>18886564</id><snippet>requests</snippet></ROW><ROW><id>18886564</id><snippet>PhantomJS</snippet></ROW><ROW><id>18886564</id><snippet>PyQt</snippet></ROW><ROW><id>18886564</id><snippet>qtwebkit</snippet></ROW><ROW><id>18886564</id><snippet>User-Agent</snippet></ROW><ROW><id>18886564</id><snippet>res = requests.get(URL, headers={
    'User-Agent':'Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/29.0.1547.76 Safari/537.36',
})
</snippet></ROW><ROW><id>18886564</id><snippet>res.ok</snippet></ROW><ROW><id>18886564</id><snippet>True</snippet></ROW><ROW><id>18886564</id><snippet>res = requests.get(URL)</snippet></ROW><ROW><id>18886564</id><snippet>get_fields()</snippet></ROW><ROW><id>18886564</id><snippet>res = requests.post(URL, formdata)</snippet></ROW><ROW><id>18886564</id><snippet>query()</snippet></ROW><ROW><id>18886564</id><snippet>'Referer':URL</snippet></ROW><ROW><id>18886564</id><snippet>res = requests.post(URL, formdata, headers={
    'User-Agent':'Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/29.0.1547.76 Safari/537.36',
    'Referer':URL,
})
</snippet></ROW><ROW><id>18886651</id><snippet>class MyMRJob(MRJob):

    HADOOP_INPUT_FORMAT = 'org.apache.hadoop.mapred.SequenceFileAsTextInputFormat'

    def mapper(self, _, line):
        # mapper code...

    def reducer(self, key, value):
        # reducer code...
</snippet></ROW><ROW><id>18886842</id><snippet>import json
string = 'This sentence has some "quotes" in it\n'
json.dumps(string) #gives you '"This sentence has some \\"quotes\\" in it\\n"'
</snippet></ROW><ROW><id>18886922</id><snippet>datetime.datetime.now().strftime('%a, %d %b %Y %H:%M:%S %z')
</snippet></ROW><ROW><id>18887458</id><snippet>grep</snippet></ROW><ROW><id>18887458</id><snippet>grep -Eo "(?def .*|'[a-z]+')" test.txt
</snippet></ROW><ROW><id>18887931</id><snippet>d = {e:i for i, e in enumerate(l)}
</snippet></ROW><ROW><id>18887931</id><snippet>d = dict((e, i) for i, e in enumerate(l))
</snippet></ROW><ROW><id>18888511</id><snippet>&gt;&gt;&gt; some_function(str('with additional arg, but missing closing parens')
... print('Oops?')
  File "&lt;stdin&gt;", line 2
    print('Oops?')
        ^
SyntaxError: invalid syntax
</snippet></ROW><ROW><id>18888854</id><snippet>"-m"</snippet></ROW><ROW><id>18888854</id><snippet>__name__</snippet></ROW><ROW><id>18888854</id><snippet>__name__</snippet></ROW><ROW><id>18888854</id><snippet>__main__</snippet></ROW><ROW><id>18888854</id><snippet>import re
import os


from .bottle import run, default_app, debug, get
from .common_util import date_str_to_datetime, UTCOffset, date_filter

#app = Bottle()


def main():
    default_app().router.add_filter('date', date_filter)

    from . import api, dev

    @get('/index')
    def index():
        return "CCLogger API main live and kicking."

    if dev:
        debug(True)
        run(reloader=True, port=9000)
    else:
        os.chdir(os.path.dirname(__file__))
        application = default_app()
</snippet></ROW><ROW><id>18888854</id><snippet>from cclogger import api_main


if __name__ == '__main__':
    api_main.main()
</snippet></ROW><ROW><id>18888854</id><snippet>python main.py</snippet></ROW><ROW><id>18888854</id><snippet>python -m main</snippet></ROW><ROW><id>18888854</id><snippet>python -c "import cclogger.api_main; api_main.main()"</snippet></ROW><ROW><id>18888896</id><snippet>str.join()</snippet></ROW><ROW><id>18888896</id><snippet>','.join([s.strip() for s in list_of_strings])
</snippet></ROW><ROW><id>18888896</id><snippet>&gt;&gt;&gt; list_of_strings = ["1", "2", "3", "4", " ", "text1", "text2", "text3", "6", "first &amp;&amp; second &amp;&amp; third..", " ", " 7 ", " "]
&gt;&gt;&gt; ','.join([s.strip() for s in list_of_strings])
'1,2,3,4,,text1,text2,text3,6,first &amp;&amp; second &amp;&amp; third..,,7,'
</snippet></ROW><ROW><id>18889160</id><snippet>def triangularize(origBoundary):
    inBoundary = origBoundary[:]
</snippet></ROW><ROW><id>18889173</id><snippet>for link in links[:3]:
    print link
</snippet></ROW><ROW><id>18889285</id><snippet>fit = np.polyfit(x, y, n)
</snippet></ROW><ROW><id>18889285</id><snippet>func</snippet></ROW><ROW><id>18889285</id><snippet>polyfit</snippet></ROW><ROW><id>18889285</id><snippet>scipy.optimize.curve_fit</snippet></ROW><ROW><id>18889285</id><snippet># set up least squares equation for powers of x
lhs = vander(x, order)
rhs = y
c, resids, rank, s = lstsq(lhs, rhs, rcond)
</snippet></ROW><ROW><id>18889285</id><snippet>np.vander</snippet></ROW><ROW><id>18889446</id><snippet>ndb.put_multi</snippet></ROW><ROW><id>18889483</id><snippet>addon.py</snippet></ROW><ROW><id>18889483</id><snippet>video.py</snippet></ROW><ROW><id>18889483</id><snippet>__init__.py</snippet></ROW><ROW><id>18889483</id><snippet>+- your_package/
        |- __init__.py  
        |- addon.py
        |- video.py
</snippet></ROW><ROW><id>18889523</id><snippet>rows = cursor.fetchall()
print rows[3].something
</snippet></ROW><ROW><id>18889523</id><snippet>SELECT [something] FROM [someone] WHERE [user_name]='John' LIMIT 1 OFFSET 3
</snippet></ROW><ROW><id>18889711</id><snippet> import try_modules
 try_modules.cats = 2
 try_modules.printCats()
</snippet></ROW><ROW><id>18889711</id><snippet>module_a.py</snippet></ROW><ROW><id>18889711</id><snippet>import global_vars

global_vars.a = 23
</snippet></ROW><ROW><id>18889711</id><snippet>module_b.py</snippet></ROW><ROW><id>18889711</id><snippet>import global_vars

print global_vars.a
</snippet></ROW><ROW><id>18889711</id><snippet>global_vars.py</snippet></ROW><ROW><id>18889711</id><snippet>a = 37
</snippet></ROW><ROW><id>18889711</id><snippet>main.py</snippet></ROW><ROW><id>18889711</id><snippet>import module_a
import module_b
</snippet></ROW><ROW><id>18889711</id><snippet>23</snippet></ROW><ROW><id>18889711</id><snippet>a</snippet></ROW><ROW><id>18890140</id><snippet>import numpy
dataset2D = [ [6, 4], [0, 0, 0, 1], [1, 0, 2, 0], [2, 2, 0, 1], [1, 1, 1, 0], [0, 0, 1, 1], [1, 0, 2, 1] ]
dataset2D_size = dataset2D[0]
dataset2D = numpy.array(dataset2D)
partition2D = [ ['A', '1', '2', '4'], ['B', '3', '5'], ['C', '6'] ]

for partition in partition2D:
    label = partition[0]

    row_indices = [int(i) for i in partition[1:]]

    # Take the specified rows
    rows = dataset2D[row_indices]

    # Iterate the columns (this is the power of Python!)
    for column in zip(*rows):
        # Now, column will contain one column of data from specified row indices
        print column, # Apply your formula here
    print
</snippet></ROW><ROW><id>18890140</id><snippet>dataset2D = [ [6, 4], [0, 0, 0, 1], [1, 0, 2, 0], [2, 2, 0, 1], [1, 1, 1, 0], [0, 0, 1, 1], [1, 0, 2, 1] ]
partition2D = [ ['A', '1', '2', '4'], ['B', '3', '5'], ['C', '6'] ]

dataset2D_size = dataset2D[0]

for partition in partition2D:
    label = partition[0]

    row_indices = [int(i) for i in partition[1:]]

    rows = [dataset2D[row_idx] for row_idx in row_indices]

    for column in zip(*rows):
        print column,
    print
</snippet></ROW><ROW><id>18890140</id><snippet>[dataset2D[row_idx] for row_idx in row_indices]
</snippet></ROW><ROW><id>18890140</id><snippet>dataset2D[row_idx]</snippet></ROW><ROW><id>18890140</id><snippet>for column in zip(*rows):
</snippet></ROW><ROW><id>18890140</id><snippet>zip(*rows)</snippet></ROW><ROW><id>18890140</id><snippet>column</snippet></ROW><ROW><id>18890140</id><snippet>for column in zip(*rows):</snippet></ROW><ROW><id>18890140</id><snippet>print column,</snippet></ROW><ROW><id>18890140</id><snippet>print 'Processing partition %s' % label
for (col_num, column) in enumerate(zip(*rows)):
    print 'Column number: %d' % col_num
    for (row_num, element) in enumerate(column):
        print '[%d,%d]: %d' % (row_indices[row_num], col_num, element)
</snippet></ROW><ROW><id>18890448</id><snippet>£</snippet></ROW><ROW><id>18890448</id><snippet>163</snippet></ROW><ROW><id>18890448</id><snippet>A3</snippet></ROW><ROW><id>18890448</id><snippet>Label(app, text= u"\xA3" + "20.50", bg="gold", fg="blue").place(x=20,y=50)</snippet></ROW><ROW><id>18890448</id><snippet>get()</snippet></ROW><ROW><id>18890448</id><snippet>def submit_data():
    username = username_entry.get()
    print username

username_entry = Tk.Entry(root)
submit = Tk.Button(root,text='Enter',command=submit_data)
</snippet></ROW><ROW><id>18890448</id><snippet>x,y,z</snippet></ROW><ROW><id>18890448</id><snippet>x_data, y_data, z_data</snippet></ROW><ROW><id>18890448</id><snippet>marks</snippet></ROW><ROW><id>18890448</id><snippet>x_data = K DawG , y_data = Answers , z_data = SO</snippet></ROW><ROW><id>18890448</id><snippet>from Tkinter import *
import tkMessageBox

app = Tk()
# Message Window

def messagePop():
    get_data()
    tkMessageBox.showinfo('Results', '100% Very Good')

# Background colour

app.configure(bg='cornflower blue')

COLORS  =['snow', 'ghost white', 'white smoke', 'gainsboro', 'floral white', 'old lace',
    'linen', 'antique white', 'papaya whip', 'blanched almond', 'bisque', 'peach puff',
    'navajo white', 'lemon chiffon', 'mint cream', 'azure', 'alice blue', 'lavender',
    'lavender blush', 'misty rose', 'dark slate gray', 'dim gray', 'slate gray',
    'light slate gray', 'gray', 'light grey', 'midnight blue', 'navy', 'cornflower blue', 'dark slate blue',
    'slate blue', 'medium slate blue', 'light slate blue', 'medium blue', 'royal blue',  'blue',
    'dodger blue', 'deep sky blue', 'sky blue', 'light sky blue', 'steel blue', 'light steel blue',
    'light blue', 'powder blue', 'pale turquoise', 'dark turquoise', 'medium turquoise', 'turquoise',
    'cyan', 'light cyan', 'cadet blue', 'medium aquamarine', 'aquamarine', 'dark green', 'dark olive green',
    'dark sea green', 'sea green', 'medium sea green', 'light sea green', 'pale green', 'spring green',
    'lawn green', 'medium spring green', 'green yellow', 'lime green', 'yellow green',
    'forest green', 'olive drab', 'dark khaki', 'khaki', 'pale goldenrod', 'light goldenrod yellow',
    'light yellow', 'yellow', 'gold', 'light goldenrod', 'goldenrod', 'dark goldenrod', 'rosy brown',
    'indian red', 'saddle brown', 'sandy brown',
    'dark salmon', 'salmon', 'light salmon', 'orange', 'dark orange',
    'coral', 'light coral', 'tomato', 'orange red', 'red', 'hot pink', 'deep pink', 'pink', 'light pink',
    'pale violet red', 'maroon', 'medium violet red', 'violet red',
    'medium orchid', 'dark orchid', 'dark violet', 'blue violet', 'purple', 'medium purple',
    'thistle', 'snow2', 'snow3',
    'snow4', 'seashell2', 'seashell3', 'seashell4', 'AntiqueWhite1', 'AntiqueWhite2',
    'AntiqueWhite3', 'AntiqueWhite4', 'bisque2', 'bisque3', 'bisque4', 'PeachPuff2',
    'PeachPuff3', 'PeachPuff4', 'NavajoWhite2', 'NavajoWhite3', 'NavajoWhite4',
    'LemonChiffon2', 'LemonChiffon3', 'LemonChiffon4', 'cornsilk2', 'cornsilk3',
    'cornsilk4', 'ivory2', 'ivory3', 'ivory4', 'honeydew2', 'honeydew3', 'honeydew4',
    'LavenderBlush2', 'LavenderBlush3', 'LavenderBlush4', 'MistyRose2', 'MistyRose3',
    'MistyRose4', 'azure2', 'azure3', 'azure4', 'SlateBlue1', 'SlateBlue2', 'SlateBlue3',
    'SlateBlue4', 'RoyalBlue1', 'RoyalBlue2', 'RoyalBlue3', 'RoyalBlue4', 'blue2', 'blue4',
    'DodgerBlue2', 'DodgerBlue3', 'DodgerBlue4', 'SteelBlue1', 'SteelBlue2',
    'SteelBlue3', 'SteelBlue4', 'DeepSkyBlue2', 'DeepSkyBlue3', 'DeepSkyBlue4',
    'SkyBlue1', 'SkyBlue2', 'SkyBlue3', 'SkyBlue4', 'LightSkyBlue1', 'LightSkyBlue2',
    'LightSkyBlue3', 'LightSkyBlue4', 'SlateGray1', 'SlateGray2', 'SlateGray3',
    'SlateGray4', 'LightSteelBlue1', 'LightSteelBlue2', 'LightSteelBlue3',
    'LightSteelBlue4', 'LightBlue1', 'LightBlue2', 'LightBlue3', 'LightBlue4',
    'LightCyan2', 'LightCyan3', 'LightCyan4', 'PaleTurquoise1', 'PaleTurquoise2',
    'PaleTurquoise3', 'PaleTurquoise4', 'CadetBlue1', 'CadetBlue2', 'CadetBlue3',
    'CadetBlue4', 'turquoise1', 'turquoise2', 'turquoise3', 'turquoise4', 'cyan2', 'cyan3',
    'cyan4', 'DarkSlateGray1', 'DarkSlateGray2', 'DarkSlateGray3', 'DarkSlateGray4',
    'aquamarine2', 'aquamarine4', 'DarkSeaGreen1', 'DarkSeaGreen2', 'DarkSeaGreen3',
    'DarkSeaGreen4', 'SeaGreen1', 'SeaGreen2', 'SeaGreen3', 'PaleGreen1', 'PaleGreen2',
    'PaleGreen3', 'PaleGreen4', 'SpringGreen2', 'SpringGreen3', 'SpringGreen4',
    'green2', 'green3', 'green4', 'chartreuse2', 'chartreuse3', 'chartreuse4',
    'OliveDrab1', 'OliveDrab2', 'OliveDrab4', 'DarkOliveGreen1', 'DarkOliveGreen2',
    'DarkOliveGreen3', 'DarkOliveGreen4', 'khaki1', 'khaki2', 'khaki3', 'khaki4',
    'LightGoldenrod1', 'LightGoldenrod2', 'LightGoldenrod3', 'LightGoldenrod4',
    'LightYellow2', 'LightYellow3', 'LightYellow4', 'yellow2', 'yellow3', 'yellow4',
    'gold2', 'gold3', 'gold4', 'goldenrod1', 'goldenrod2', 'goldenrod3', 'goldenrod4',
    'DarkGoldenrod1', 'DarkGoldenrod2', 'DarkGoldenrod3', 'DarkGoldenrod4',
    'RosyBrown1', 'RosyBrown2', 'RosyBrown3', 'RosyBrown4', 'IndianRed1', 'IndianRed2',
    'IndianRed3', 'IndianRed4', 'sienna1', 'sienna2', 'sienna3', 'sienna4', 'burlywood1',
    'burlywood2', 'burlywood3', 'burlywood4', 'wheat1', 'wheat2', 'wheat3', 'wheat4', 'tan1',
    'tan2', 'tan4', 'chocolate1', 'chocolate2', 'chocolate3', 'firebrick1', 'firebrick2',
    'firebrick3', 'firebrick4', 'brown1', 'brown2', 'brown3', 'brown4', 'salmon1', 'salmon2',
    'salmon3', 'salmon4', 'LightSalmon2', 'LightSalmon3', 'LightSalmon4', 'orange2',
    'orange3', 'orange4', 'DarkOrange1', 'DarkOrange2', 'DarkOrange3', 'DarkOrange4',
    'coral1', 'coral2', 'coral3', 'coral4', 'tomato2', 'tomato3', 'tomato4', 'OrangeRed2',
    'OrangeRed3', 'OrangeRed4', 'red2', 'red3', 'red4', 'DeepPink2', 'DeepPink3', 'DeepPink4',
    'HotPink1', 'HotPink2', 'HotPink3', 'HotPink4', 'pink1', 'pink2', 'pink3', 'pink4',
    'LightPink1', 'LightPink2', 'LightPink3', 'LightPink4', 'PaleVioletRed1',
    'PaleVioletRed2', 'PaleVioletRed3', 'PaleVioletRed4', 'maroon1', 'maroon2',
    'maroon3', 'maroon4', 'VioletRed1', 'VioletRed2', 'VioletRed3', 'VioletRed4',
    'magenta2', 'magenta3', 'magenta4', 'orchid1', 'orchid2', 'orchid3', 'orchid4', 'plum1',
    'plum2', 'plum3', 'plum4', 'MediumOrchid1', 'MediumOrchid2', 'MediumOrchid3',
    'MediumOrchid4', 'DarkOrchid1', 'DarkOrchid2', 'DarkOrchid3', 'DarkOrchid4',
    'purple1', 'purple2', 'purple3', 'purple4', 'MediumPurple1', 'MediumPurple2',
    'MediumPurple3', 'MediumPurple4', 'thistle1', 'thistle2', 'thistle3', 'thistle4',
    'gray1', 'gray2', 'gray3', 'gray4', 'gray5', 'gray6', 'gray7', 'gray8', 'gray9', 'gray10',
    'gray11', 'gray12', 'gray13', 'gray14', 'gray15', 'gray16', 'gray17', 'gray18', 'gray19',
    'gray20', 'gray21', 'gray22', 'gray23', 'gray24', 'gray25', 'gray26', 'gray27', 'gray28',
    'gray29', 'gray30', 'gray31', 'gray32', 'gray33', 'gray34', 'gray35', 'gray36', 'gray37',
    'gray38', 'gray39', 'gray40', 'gray42', 'gray43', 'gray44', 'gray45', 'gray46', 'gray47',
    'gray48', 'gray49', 'gray50', 'gray51', 'gray52', 'gray53', 'gray54', 'gray55', 'gray56',
    'gray57', 'gray58', 'gray59', 'gray60', 'gray61', 'gray62', 'gray63', 'gray64', 'gray65',
    'gray66', 'gray67', 'gray68', 'gray69', 'gray70', 'gray71', 'gray72', 'gray73', 'gray74',
    'gray75', 'gray76', 'gray77', 'gray78', 'gray79', 'gray80', 'gray81', 'gray82', 'gray83',
    'gray84', 'gray85', 'gray86', 'gray87', 'gray88', 'gray89', 'gray90', 'gray91', 'gray92',
    'gray93', 'gray94', 'gray95', 'gray97', 'gray98', 'gray99']

# The position and size relative to the screen
app.geometry('500x500+450+140')

# The title of the program
app.title('Maths4Primary')

# The icon
app.wm_iconbitmap('MathIcon.ico')

# Object positioning in the program
# def GridPos:

# I might use the place() method for the screen layout.
Label(app, text="Put these prices in order", bg="gold", fg="blue").place(x=100,y=20)
Label(app, text= u"\xA3" + "20.50", bg="gold", fg="blue").place(x=20,y=50)
Label(app, text="Question 3", bg="gold", fg="blue").place(x=20,y=120)

# Entry
def get_data():
    x_data = x.get()
    y_data = y.get()
    z_data = z.get()
    print "x_data = {0} , y_data = {1} , z_data = {2}".format(x_data,y_data,z_data)

x = Entry(app)
y = Entry(app)
z = Entry(app)

x.place(x=150,y=60)
y.place(x=150,y=80)
z.place(x=150,y=100)

# Buttons
B1 = Button(app,text='Marks',bg='gold',fg='blue', command = messagePop ).place(x=425,y=450)

app.mainloop()
</snippet></ROW><ROW><id>18890448</id><snippet>int()</snippet></ROW><ROW><id>18890448</id><snippet>try except</snippet></ROW><ROW><id>18890448</id><snippet>x_data = int(x.get())
y_data = int(y.get())
z_data = int(z.get())
</snippet></ROW><ROW><id>18890675</id><snippet>Help</snippet></ROW><ROW><id>18890675</id><snippet>menuBar()</snippet></ROW><ROW><id>18890675</id><snippet>import sys
from PySide import QtGui, QtCore

class Window(QtGui.QMainWindow):
    def __init__(self):
        super(Window, self).__init__()
        help_menu = QtGui.QMenu('&amp;Help')
        about = help_menu.addAction('&amp;About')
        about.triggered.connect(self.show_about)
        self.menuBar().addMenu(help_menu)

    def show_about(self):
        print 'shown'

app = QtGui.QApplication(sys.argv)
win = Window()
win.show()
app.exec_()
</snippet></ROW><ROW><id>18890675</id><snippet>python</snippet></ROW><ROW><id>18890675</id><snippet>About</snippet></ROW><ROW><id>18890675</id><snippet>About python</snippet></ROW><ROW><id>18890675</id><snippet>menuBar =  QtGui.QMenuBar(None)</snippet></ROW><ROW><id>18891114</id><snippet>import csv
ifile=csv.reader(open('C:\Users\BKA4ABT\Desktop\Test_Specification\RDBI.csv', 'rb'),delimiter=';')
for line in ifile:
    if set(line).pop()=='':
        pass
    else:
        for cell_value in line:
            print cell_value
</snippet></ROW><ROW><id>18891334</id><snippet>df
Out[28]: 
  label
0     A
1     B
2     C
3     D
4   A*C
5   C*D

dummies = pd.get_dummies(df['label'])

atom_col = [c for c in dummies.columns if '*' not in c]

for col in atom_col:
    ...:     df[col] = dummies[[c for c in dummies.columns if col in c]].sum(axis=1)
    ...:     

df
Out[32]: 
  label  A  B  C  D
0     A  1  0  0  0
1     B  0  1  0  0
2     C  0  0  1  0
3     D  0  0  0  1
4   A*C  1  0  1  0
5   C*D  0  0  1  1
</snippet></ROW><ROW><id>18891442</id><snippet>&lt;path to apache&gt;/bin/apachectl restart
</snippet></ROW><ROW><id>18891797</id><snippet>text.usetex</snippet></ROW><ROW><id>18891797</id><snippet>font.family</snippet></ROW><ROW><id>18891861</id><snippet>&gt;&gt;&gt; import mlpy
&gt;&gt;&gt; mlpy.dtw_std([1,2,3], [4,5,6], squared=False) # Euclidean distance
9.0
&gt;&gt;&gt; mlpy.dtw_std([1,2,3], [4,5,6], squared=True) # Squared Euclidean distance
26.0
</snippet></ROW><ROW><id>18892117</id><snippet>mylist += random.sample(range(100),2)</snippet></ROW><ROW><id>18892117</id><snippet>mylist = mylist + ...
mylist = mylist[:-2]
</snippet></ROW><ROW><id>18892117</id><snippet>mylist</snippet></ROW><ROW><id>18892117</id><snippet>mylist</snippet></ROW><ROW><id>18892117</id><snippet>mylist[:] = mylist[:-2]
</snippet></ROW><ROW><id>18892760</id><snippet>INPLACE_ADD</snippet></ROW><ROW><id>18892760</id><snippet>+=</snippet></ROW><ROW><id>18892760</id><snippet>&gt;&gt;&gt; from dis import dis
&gt;&gt;&gt; def f():
...     x += y
...     
&gt;&gt;&gt; dis(f)
  2           0 LOAD_FAST                0 (x)
              3 LOAD_GLOBAL              0 (y)
              6 INPLACE_ADD         
              7 STORE_FAST               0 (x)
             10 LOAD_CONST               0 (None)
             13 RETURN_VALUE        
</snippet></ROW><ROW><id>18892804</id><snippet>bad-functions=map,filter,apply,input
</snippet></ROW><ROW><id>18892931</id><snippet>/uploads</snippet></ROW><ROW><id>18892931</id><snippet>/uploads</snippet></ROW><ROW><id>18892931</id><snippet>uploads</snippet></ROW><ROW><id>18892931</id><snippet>app.root_path</snippet></ROW><ROW><id>18892931</id><snippet>file.save(os.path.join(app.root_path, '/uploads', filename))
</snippet></ROW><ROW><id>18893522</id><snippet>points</snippet></ROW><ROW><id>18893522</id><snippet>points = 0
def test():
    nonlocal points
    points += 1
</snippet></ROW><ROW><id>18893522</id><snippet>points</snippet></ROW><ROW><id>18893522</id><snippet>test()</snippet></ROW><ROW><id>18893522</id><snippet>points = 0
def test():
    global points
    points += 1
</snippet></ROW><ROW><id>18893586</id><snippet>def keyErrorOnRed(colour):
    def decorate(f):
        def wrapped(*args, **kwargs):
            if colour == "red":
                raise KeyError("Better dead than red")
            return f(*args, **kwargs)
        return wrapped
    return decorate

class Bar(object):
    @keyErrorOnRed("black")  #keyErrorOnRed("black")(Bar.__init__)(self, a, b)
    def __init__(self, a, b):
        self.vars = a, b
</snippet></ROW><ROW><id>18893982</id><snippet>path/to/appname</snippet></ROW><ROW><id>18893982</id><snippet>PYTHONPATH</snippet></ROW><ROW><id>18894071</id><snippet>None</snippet></ROW><ROW><id>18894071</id><snippet>all</snippet></ROW><ROW><id>18894071</id><snippet>zip</snippet></ROW><ROW><id>18894071</id><snippet>&gt;&gt;&gt; from itertools import permutations
&gt;&gt;&gt; import random
#create a sample dict
&gt;&gt;&gt; dic = {k:random.randint(1, 1000) for k in permutations('abcde', 3)}
def partial_match(key, d):
    for k, v in d.iteritems():
        if all(k1 == k2 or k2 is None  for k1, k2 in zip(k, key)):
            yield v
...         
&gt;&gt;&gt; list(partial_match(('a', 'b', None), dic))
[541, 470, 734]
&gt;&gt;&gt; list(partial_match(('a', None, 'b'), dic))
[460, 966, 45]
#Answer check
&gt;&gt;&gt; [dic[('a', 'b', x)] for x in 'cde']
[541, 734, 470]
&gt;&gt;&gt; [dic[('a', x, 'b')] for x in 'cde']
[966, 460, 45]
</snippet></ROW><ROW><id>18894102</id><snippet>glEnable(GL_BLEND);</snippet></ROW><ROW><id>18894392</id><snippet>S</snippet></ROW><ROW><id>18894392</id><snippet>U</snippet></ROW><ROW><id>18894392</id><snippet>len(R) != 0</snippet></ROW><ROW><id>18894392</id><snippet>except</snippet></ROW><ROW><id>18894392</id><snippet>try/except</snippet></ROW><ROW><id>18894686</id><snippet>fromtimestamp</snippet></ROW><ROW><id>18894686</id><snippet>utcfromtimestamp</snippet></ROW><ROW><id>18894686</id><snippet>In [22]: df.index[0]
Out[22]: Timestamp('2011-01-06 10:59:05', tz=None)

In [24]: datetime.datetime.utcfromtimestamp(int("1294311545")).strftime('%Y-%m-%d %H:%M:%S')
Out[24]: '2011-01-06 10:59:05'

In [25]: datetime.datetime.fromtimestamp(int("1294311545")).strftime('%Y-%m-%d %H:%M:%S')
Out[25]: '2011-01-06 05:59:05'
</snippet></ROW><ROW><id>18894686</id><snippet>In [59]: df.index = df.index.tz_localize('Asia/Shanghai').tz_convert('UTC')

In [60]: df
Out[60]: 
                           PRICE      VOLUME
TIMESTAMP                                   
2011-01-06 02:59:05+00:00  24990  1500000000
2011-01-06 04:43:33+00:00  25499  5000000000
2011-01-06 04:54:09+00:00  25499   100000000
</snippet></ROW><ROW><id>18894994</id><snippet>e</snippet></ROW><ROW><id>18894994</id><snippet>a</snippet></ROW><ROW><id>18894994</id><snippet>import numpy as np
a = np.array([(1,2,3), (4,5,6), (7,8,9)])
e = [4,2,9]
print np.array([ [ i for i in a.transpose()[j] if i != e[j] ]
    for j in range(len(e)) ]).transpose()
</snippet></ROW><ROW><id>18895102</id><snippet>./manage.py shell</snippet></ROW><ROW><id>18895102</id><snippet>python</snippet></ROW><ROW><id>18895370</id><snippet>str.split</snippet></ROW><ROW><id>18895370</id><snippet>maxsplit</snippet></ROW><ROW><id>18895370</id><snippet>In [1]: output = "\"\\u001b[H\\u001b[2J\\r\\nPROCESS1       : process not running\\r\\n \\r\\nPROCESS2       : process running\\r\\nT\""

In [2]: output.split('\\r\\n', maxsplit=1)[-1]
Out[2]: 'PROCESS1       : process not running\\r\\n \\r\\nPROCESS2       : process running\\r\\nT"'
</snippet></ROW><ROW><id>18895370</id><snippet>maxsplit</snippet></ROW><ROW><id>18895370</id><snippet>In [3]: output.split('\\r\\n', 1)[-1]
Out[3]: 'PROCESS1       : process not running\\r\\n \\r\\nPROCESS2       : process running\\r\\nT"'
</snippet></ROW><ROW><id>18895370</id><snippet>print "\u001b[H\u001b[2J\r\nPRINT ME".decode('unicode-escape')
</snippet></ROW><ROW><id>18895370</id><snippet>"UTUT\r\n</snippet></ROW><ROW><id>18895370</id><snippet>U</snippet></ROW><ROW><id>18895370</id><snippet>\uxxxx</snippet></ROW><ROW><id>18895370</id><snippet>x</snippet></ROW><ROW><id>18895370</id><snippet>T</snippet></ROW><ROW><id>18895370</id><snippet>[</snippet></ROW><ROW><id>18895370</id><snippet>In [9]: regex = re.compile(r'"\\u(\d|[a-f])+\[(\w|\d)+\\u(\d|[a-f])+\[(\d|\w)+\\r\\n')

In [10]: regex.sub('', output)
Out[10]: 'PROCESS1       : process not running\\r\\n \\r\\nPROCESS2       : process running\\r\\nT"'
</snippet></ROW><ROW><id>18895370</id><snippet>"</snippet></ROW><ROW><id>18895370</id><snippet>regex.sub('', output)[:-1]
</snippet></ROW><ROW><id>18895370</id><snippet>"</snippet></ROW><ROW><id>18895370</id><snippet>In [2]: regex = re.compile(r'"\\u(\d|[a-f])+\[(\w|\d)+\\u(\d|[a-f])+\[(\d|\w)+\\r\\n(?P&lt;content&gt;[^"]+)')

In [3]: output = "\"\\u001b[H\\u001b[2J\\r\\nPROCESS1       : process not running\\r\\n \\r\\nPROCESS2       : process running\\r\\nT\""

In [4]: regex.match(output).group('content')
Out[4]: 'PROCESS1       : process not running\\r\\n \\r\\nPROCESS2       : process running\\r\\nT'
</snippet></ROW><ROW><id>18895370</id><snippet>"</snippet></ROW><ROW><id>18895445</id><snippet>fmt='%i %7.0f %7.4f %7.4f %7.3f %7.3f %7.3f %7.3f %7.3f %7.3f'</snippet></ROW><ROW><id>18895445</id><snippet>savetxt</snippet></ROW><ROW><id>18895445</id><snippet>'Iteration %d – %10.5f'</snippet></ROW><ROW><id>18895527</id><snippet>key = (1, 2, 3)
d = {key: 1}
</snippet></ROW><ROW><id>18895527</id><snippet>key = [1, 2, 3]
d = {key: 1}
</snippet></ROW><ROW><id>18895527</id><snippet>key[0] = 2
print d[key]        # id(key) hasn't changed, so surely the lookup should still work
print d[[1, 2, 3]]  # but also, we stored a piece of data at [1, 2, 3], didn't we?
print d[[2, 2, 3]]  # but if d[key] works, surely we can expand key to its value
</snippet></ROW><ROW><id>18896168</id><snippet>def icaocode(code):
    ...
    return code  # new value
</snippet></ROW><ROW><id>18896168</id><snippet>x = icaocode(x)
</snippet></ROW><ROW><id>18896168</id><snippet>def f(some_list):
    some_list.append("something")
</snippet></ROW><ROW><id>18896168</id><snippet>my_list = []
f(my_list)
</snippet></ROW><ROW><id>18896168</id><snippet>my_list</snippet></ROW><ROW><id>18896168</id><snippet>["something"]</snippet></ROW><ROW><id>18896744</id><snippet>from_buffer</snippet></ROW><ROW><id>18896744</id><snippet>from_buffer_copy</snippet></ROW><ROW><id>18896744</id><snippet>char</snippet></ROW><ROW><id>18896744</id><snippet>from ctypes import *
import struct

binary_data = bytearray(24)
size1 = size2 = 4
size3 = len(binary_data) - size1 - size2

part1 = (c_char * size1).from_buffer(binary_data)
part2 = (c_char * size2).from_buffer(binary_data, size1)
part3 = (c_char * size3).from_buffer(binary_data, size1 + size2)
struct.pack_into('4I', part3, 0, 1, 2, 3, 4)

&gt;&gt;&gt; binary_data[8:]
bytearray(b'\x01\x00\x00\x00\x02\x00\x00\x00\x03\x00\x00\x00\x04\x00\x00\x00')

&gt;&gt;&gt; struct.unpack_from('4I', part3)
(1, 2, 3, 4)
</snippet></ROW><ROW><id>18896794</id><snippet>f = lambda i: i.strftime('%Y-%m-%d %H:00:00')
full_set['hours'] = full_set.index.map(f)
</snippet></ROW><ROW><id>18896794</id><snippet>groupby('dip')</snippet></ROW><ROW><id>18896794</id><snippet>for d, g in dipgroup:
    g.groupby('hours').sip.nunique().plot()
</snippet></ROW><ROW><id>18897177</id><snippet>SGDClassifier</snippet></ROW><ROW><id>18897177</id><snippet>SVC(kernel='rbf')</snippet></ROW><ROW><id>18897177</id><snippet>ExtraTreesClassifier(n_estimator=100)</snippet></ROW><ROW><id>18897177</id><snippet>SVC(kernel='rbf')</snippet></ROW><ROW><id>18897177</id><snippet>Nystroem(n_components=1000, gamma=0.05)</snippet></ROW><ROW><id>18897177</id><snippet>SGDClassifier</snippet></ROW><ROW><id>18897177</id><snippet>ExtraTreesClassifier</snippet></ROW><ROW><id>18897177</id><snippet>SGDClassifier</snippet></ROW><ROW><id>18897358</id><snippet>df['group'].plot(kind='bar', color=['r', 'g', 'b', 'r', 'g', 'b', 'r'])
</snippet></ROW><ROW><id>18897358</id><snippet>value</snippet></ROW><ROW><id>18897358</id><snippet>group</snippet></ROW><ROW><id>18897358</id><snippet>colors = {1: 'r', 2: 'b', 3: 'g'}
df['value'].plot(kind='bar', color=[colors[i] for i in df['group']])
</snippet></ROW><ROW><id>18897358</id><snippet>list(df['group'].map(colors))
</snippet></ROW><ROW><id>18897408</id><snippet>urllib</snippet></ROW><ROW><id>18897408</id><snippet>import csv
import urllib.request

url = "ftp://ftp.ncbi.nlm.nih.gov/pub/pmc/file_list.csv"
ftpstream = urllib.request.urlopen(url)
csvfile = csv.reader(ftpstream.read().decode('utf-8')) #with the appropriate encoding 
data = [row for row in csvfile]
</snippet></ROW><ROW><id>18897408</id><snippet>data = list(csvfile)</snippet></ROW><ROW><id>18897408</id><snippet>import csv
import urllib.request
import codecs

url = "ftp://ftp.ncbi.nlm.nih.gov/pub/pmc/file_list.csv"
ftpstream = urllib.request.urlopen(url)
csvfile = csv.reader(codecs.iterdecode(ftpstream, 'utf-8'))
for line in csvfile:
    print(line) #do something with line
</snippet></ROW><ROW><id>18897909</id><snippet>imshow</snippet></ROW><ROW><id>18897909</id><snippet>1</snippet></ROW><ROW><id>18897909</id><snippet>imshow</snippet></ROW><ROW><id>18897909</id><snippet>aspect='auto'</snippet></ROW><ROW><id>18897909</id><snippet>plt.imshow(zi, vmin=z.min(), vmax=z.max(), origin='lower',
       extent=[x.min(), x.max(), y.min(), y.max()], aspect='auto') 
</snippet></ROW><ROW><id>18897934</id><snippet>Meta</snippet></ROW><ROW><id>18897934</id><snippet>ModelBase</snippet></ROW><ROW><id>18897934</id><snippet>Meta</snippet></ROW><ROW><id>18897965</id><snippet>Code</snippet></ROW><ROW><id>18897965</id><snippet>$in</snippet></ROW><ROW><id>18897965</id><snippet>name</snippet></ROW><ROW><id>18897965</id><snippet>name</snippet></ROW><ROW><id>18898045</id><snippet>process = subprocess.Popen(['xdg-open', 'Dunno.png'])
</snippet></ROW><ROW><id>18898045</id><snippet>sys.stdout</snippet></ROW><ROW><id>18898045</id><snippet>process = subprocess.Popen(['xdg-open', 'Dunno.png'], stdout=subprocess.PIPE, stderr=subprocess.PIPE)
</snippet></ROW><ROW><id>18898045</id><snippet>process.stdout</snippet></ROW><ROW><id>18898045</id><snippet>process.stderr</snippet></ROW><ROW><id>18898045</id><snippet>process.communicate</snippet></ROW><ROW><id>18898045</id><snippet>process.returncode</snippet></ROW><ROW><id>18898414</id><snippet>B</snippet></ROW><ROW><id>18898414</id><snippet>def A():
    ...
    B(list(mylist))  # shallow copy of mylist
    ...
</snippet></ROW><ROW><id>18898414</id><snippet>copy.deepcopy()</snippet></ROW><ROW><id>18898414</id><snippet>B(list(mylist))</snippet></ROW><ROW><id>18898414</id><snippet>list</snippet></ROW><ROW><id>18898414</id><snippet>mylist</snippet></ROW><ROW><id>18898419</id><snippet>function</snippet></ROW><ROW><id>18898419</id><snippet>int</snippet></ROW><ROW><id>18898419</id><snippet>&gt;&gt;&gt; def foo(bar):
...     return int(bar)
...
&gt;&gt;&gt; type(foo)
&lt;type 'function'&gt;
&gt;&gt;&gt; type(foo("1"))
&lt;type 'int'&gt;
&gt;&gt;&gt;
</snippet></ROW><ROW><id>18898565</id><snippet>QuerySet.select_for_update</snippet></ROW><ROW><id>18898565</id><snippet>my_record</snippet></ROW><ROW><id>18898565</id><snippet>problematic_handler</snippet></ROW><ROW><id>18898565</id><snippet>django.db.DatabaseError</snippet></ROW><ROW><id>18898578</id><snippet>s[1:-1]</snippet></ROW><ROW><id>18898578</id><snippet>s</snippet></ROW><ROW><id>18898578</id><snippet>s[0:-1]</snippet></ROW><ROW><id>18898578</id><snippet>s</snippet></ROW><ROW><id>18898578</id><snippet>False</snippet></ROW><ROW><id>18898578</id><snippet>True</snippet></ROW><ROW><id>18898587</id><snippet>import csv
import sys
import os

if __name__ == '__main__':
    total = 0
    source = '.'
    with open(os.path.join(source, 'data.csv'), 'r') as f:
        rows = csv.reader(f)
        for row in rows:
            try:
                t = row[1].split('_')
            except IndexError:
                continue
            if len(t) &gt;= 4 and t[3] == '001': 
                total += int(row[13])
    print ('Club 001' + '\t' + str(total))
</snippet></ROW><ROW><id>18898612</id><snippet>ax.set_rmin()</snippet></ROW><ROW><id>18898612</id><snippet>fig = plt.figure()
ax = fig.add_subplot(111, projection='polar')

c = np.ones((50,50)) + np.arange(50).reshape(50,1)

aP = ax.pcolormesh(c)
plt.colorbar(aP)
ax.set_rmin(-10.0)
plt.show()
</snippet></ROW><ROW><id>18898612</id><snippet>ax.</snippet></ROW><ROW><id>18898612</id><snippet>set_rmin</snippet></ROW><ROW><id>18898636</id><snippet>QMainWindow</snippet></ROW><ROW><id>18898636</id><snippet>QWidget</snippet></ROW><ROW><id>18898636</id><snippet>QMainWindow</snippet></ROW><ROW><id>18898636</id><snippet>QWidget</snippet></ROW><ROW><id>18898636</id><snippet>QDialog</snippet></ROW><ROW><id>18898728</id><snippet>MyApp</snippet></ROW><ROW><id>18898728</id><snippet>wx.App</snippet></ROW><ROW><id>18898728</id><snippet>#! /usr/bin/env python
""" A bare-minimum wxPython program """

import wx

class MyApp(wx.App):
    def OnInit(self):
        self.frame = MyFrame(None, "Sample")    ## add two lines here
        self.frame.Show(True)
        return True

class MyFrame(wx.Frame):
    def __init__(self, parent, title):
        wx.Frame.__init__(self, parent, title=title)

if __name__ == '__main__':
    app = MyApp() # &lt;---
    app.MainLoop()
</snippet></ROW><ROW><id>18898827</id><snippet>csv</snippet></ROW><ROW><id>18898827</id><snippet>import csv
with open("myfile", "rb") as infile:
    reader = csv.reader(infile, delimiter=",", skipinitialspaces=True)
    for line in reader:
       print line
</snippet></ROW><ROW><id>18899269</id><snippet>for (double redGain=0.0; redGain &lt;= 3.0; redGain += 0.1)
   for (double greenGain=0.0; greenGain &lt;= 3.0; greenGain += 0.1)
      for (double blueGain=0.0; blueGain&lt;= 3.0; blueGain+= 0.1)
         setCameraGain(redGain, greenGain, bluegain);
         // do the rest of the stuff
      end
   end
end
</snippet></ROW><ROW><id>18899509</id><snippet>Look for All Possible Outputs from the System Under Test
    Look for Specific Output    A
    Look for Specific Output    B
    Look for Specific Output    C
    ...
</snippet></ROW><ROW><id>18899685</id><snippet>zip()</snippet></ROW><ROW><id>18899685</id><snippet>zip</snippet></ROW><ROW><id>18899685</id><snippet>None</snippet></ROW><ROW><id>18899685</id><snippet>def transpose(lists):
   if not lists: return []
   return map(lambda *row: list(row), *lists)
</snippet></ROW><ROW><id>18899685</id><snippet>tuple1 = (('doug', 6), ('fred', 9), ('garth', 3))
tuple2 = (('steve', 3), ('dan', 1))
tuple3 = (('alan', 5), ('tom', 8), ('bob', 3), ('joe', 8))
tuples = [tuple1, tuple2, tuple3]
</snippet></ROW><ROW><id>18899685</id><snippet>table = [[y for x in t for y in x or ['']] for t in transpose(tuples)]
</snippet></ROW><ROW><id>18899685</id><snippet>table
=&gt; [['doug', 6, 'steve', 3, 'alan', 5],
    ['fred', 9, 'dan', 1, 'tom', 8],
    ['garth', 3, '', 'bob', 3],
    ['', '', 'joe', 8]]
</snippet></ROW><ROW><id>18899685</id><snippet>def addcolumn(table, column):
    tr = transpose([table, column])
    return [(x if x else []) + (list(y) if y else []) for x, y in tr]
</snippet></ROW><ROW><id>18899685</id><snippet>tuple4 = (('hewey', 1), ('dewey', 2), ('louie', 3))
addcolumn(table, tuple4)

=&gt; [['doug', 6, 'steve', 3, 'alan', 5, 'hewey', 1],
    ['fred', 9, 'dan', 1, 'tom', 8, 'dewey', 2],
    ['garth', 3, '', 'bob', 3, 'louie', 3],
    ['', '', 'joe', 8]]
</snippet></ROW><ROW><id>18899802</id><snippet>fp = webdriver.FirefoxProfile()
fp.set_preference("browser.download.folderList", 2)
fp.set_preference("browser.download.manager.showWhenStarting", False)
fp.set_preference("browser.download.dir", download_folder)
fp.set_preference("browser.helperApps.neverAsk.saveToDisk", "text/plain")
</snippet></ROW><ROW><id>18899802</id><snippet>def your_function1(fp):
    # a bunch of code
    browser = webdriver.Firefox(firefox_profile = fp)

def your_function2(fp):
    # a bunch of code
    browser = webdriver.Firefox(firefox_profile = fp)

# etc
</snippet></ROW><ROW><id>18900005</id><snippet>&gt;&gt;&gt; class Toy(object):
...     def __init__(self, x):
...         self.x = abs(x)
...     def __repr__(self):
...         return 'Toy({})'.format(self.x)
...     @classmethod
...     def from_string(cls, s):
...         return cls(int(s))
... 
&gt;&gt;&gt; Toy.from_string('5')
Toy(5)
</snippet></ROW><ROW><id>18900005</id><snippet>from_iter</snippet></ROW><ROW><id>18900005</id><snippet>__init__</snippet></ROW><ROW><id>18900005</id><snippet>Component</snippet></ROW><ROW><id>18900005</id><snippet>Calendar</snippet></ROW><ROW><id>18900005</id><snippet>Calendar</snippet></ROW><ROW><id>18900005</id><snippet>__class__</snippet></ROW><ROW><id>18900040</id><snippet>$</snippet></ROW><ROW><id>18900040</id><snippet>'[0-9]{1,2}$'
</snippet></ROW><ROW><id>18900040</id><snippet>\d</snippet></ROW><ROW><id>18900040</id><snippet>[0-9]</snippet></ROW><ROW><id>18900040</id><snippet>'\\d{1,2}$'
</snippet></ROW><ROW><id>18900040</id><snippet>r'raw string'</snippet></ROW><ROW><id>18900040</id><snippet>r'\d{1,2}$'

&gt;&gt;&gt; re.findall(r'\d{1,2}$', 'AN3_OUT,14')
['14']

&gt;&gt;&gt; re.findall(r'\d+$', 'AN3_OUT,14')
['14']
</snippet></ROW><ROW><id>18900176</id><snippet>from sqlalchemy import *
from sqlalchemy.ext.compiler import compiles
from sqlalchemy.sql.expression import FromClause
from sqlalchemy.sql import table, column

class values(FromClause):
    def __init__(self, *args):
        self.list = args

    def _populate_column_collection(self):
        self._columns.update(
            [("column%d" % i, column("column%d" % i))
                    for i in xrange(1, len(self.list[0]) + 1)]
        )

@compiles(values)
def compile_values(element, compiler, asfrom=False, **kw):
    v = "VALUES %s" % ", ".join(
        "(%s)" % ", ".join(compiler.render_literal_value(elem, None) for elem in tup)
        for tup in element.list
    )
    if asfrom:
        v = "(%s)" % v
    return v

if __name__ == '__main__':
    t1 = table('t1', column('a'), column('b'))
    t2 = values((1, 0.5), (2, -0.5)).alias('weights')
    print select([t1, t2]).select_from(t1.join(t2, t1.c.a==t2.c.column2))
</snippet></ROW><ROW><id>18900191</id><snippet>self.frame.pack
</snippet></ROW><ROW><id>18900191</id><snippet>()</snippet></ROW><ROW><id>18900191</id><snippet>self.frame.pack()
</snippet></ROW><ROW><id>18900191</id><snippet>import Tkinter as tk

class Example(tk.Frame):
    def __init__(self, parent):
        tk.Frame.__init__(self, parent)

        self.entry = tk.Entry(self)
        self.submit = tk.Button(self, text="Submit", command=self.on_submit)
        self.entry.pack(side="top", fill="x")
        self.submit.pack(side="top")

    def on_submit(self):
        symbol = self.entry.get()
        stock = Stock(self, symbol)
        stock.pack(side="top", fill="x")


class Stock(tk.Frame):
    def __init__(self, parent, symbol):
        tk.Frame.__init__(self, parent)
        self.symbol = tk.Label(self, text=symbol + ":")
        self.value = tk.Label(self, text="123.45")
        self.symbol.pack(side="left", fill="both")
        self.value.pack(side="left", fill="both")

root = tk.Tk()
Example(root).pack(side="top", fill="both", expand=True)
root.mainloop()
</snippet></ROW><ROW><id>18900352</id><snippet>#Select the form you want to use.
br.select_form(nr=2)
list = []
    for f in br.form.controls: 
        #Add the names of each item in br.formcontrols          
        list.append(f.name)
    #Select the correct one from the list.
    fieldTwo = list[2]
</snippet></ROW><ROW><id>18900662</id><snippet>def printTTriangle(height):
    row = 1
    while row &lt; height+1:
        col = 1
        while col &lt; row+1:
            print 'T', 
            col += 1
        print
        row += 1
</snippet></ROW><ROW><id>18900662</id><snippet>for row in range(1, height+1):
</snippet></ROW><ROW><id>18900662</id><snippet>row = 1
</snippet></ROW><ROW><id>18900662</id><snippet>while row &lt; height+1:
</snippet></ROW><ROW><id>18900662</id><snippet>row += 1
</snippet></ROW><ROW><id>18900662</id><snippet>row = 1
while row &lt; height+1:
    row += 1
</snippet></ROW><ROW><id>18901101</id><snippet>scikit-image</snippet></ROW><ROW><id>18901101</id><snippet>segmentation.slic</snippet></ROW><ROW><id>18901101</id><snippet>PyStruct</snippet></ROW><ROW><id>18901101</id><snippet>scikit-learn.org</snippet></ROW><ROW><id>18901210</id><snippet>import numpy as np
import matplotlib.pyplot as plt

data = np.random.random((20, 3))

plt.imshow(data, interpolation='none', aspect=3./20)

plt.xticks(range(3), ['a', 'b', 'c'])

plt.jet()
plt.colorbar()

plt.show()
</snippet></ROW><ROW><id>18901221</id><snippet>__init__.py</snippet></ROW><ROW><id>18901221</id><snippet># f/__init__.py:
import o

# f/o/__init__.py:
import o

# f/o/o/__init__.py:
import bar

# f/o/o/bar.py:
object = 3
</snippet></ROW><ROW><id>18901221</id><snippet>&gt;&gt;&gt; import f
&gt;&gt;&gt; f.o.o.bar.object
3
</snippet></ROW><ROW><id>18901221</id><snippet>import</snippet></ROW><ROW><id>18901221</id><snippet># f/__init__.py:
from . import o
</snippet></ROW><ROW><id>18901335</id><snippet>sub = subprocess.Popen(cmd, shell = True, stdout=subprocess.PIPE, stderr=subprocess.PIPE)
return sub.communicate()
</snippet></ROW><ROW><id>18901410</id><snippet>videoFile.open('video.avi', codec, 25, (640, 480),1)</snippet></ROW><ROW><id>18901410</id><snippet>size = (int(cap0.get(cv2.cv.CV_CAP_PROP_FRAME_WIDTH)),
        int(cap0.get(cv2.cv.CV_CAP_PROP_FRAME_HEIGHT)))
</snippet></ROW><ROW><id>18901410</id><snippet>videoFile.open</snippet></ROW><ROW><id>18901410</id><snippet>videoFile.open('video.avi', codec, 25, size,1)
</snippet></ROW><ROW><id>18901410</id><snippet>[flv @ 0x7f8414006000] Tag FLV1/0x31564c46 incompatible with output codec id '22' ([2][0][0][0])</snippet></ROW><ROW><id>18901410</id><snippet>fps = videoCapture.get(cv2.cv.CV_CAP_PROP_FPS)</snippet></ROW><ROW><id>18901440</id><snippet>log</snippet></ROW><ROW><id>18901440</id><snippet>mymod</snippet></ROW><ROW><id>18901440</id><snippet>getLogger</snippet></ROW><ROW><id>18901440</id><snippet>debug</snippet></ROW><ROW><id>18901440</id><snippet>log.debug</snippet></ROW><ROW><id>18901440</id><snippet>with mock.patch('mymod.log') as log_mock:
    # test code
    log_mock.debug.assert_called_with('Init')
</snippet></ROW><ROW><id>18901638</id><snippet>my_script.sh</snippet></ROW><ROW><id>18901638</id><snippet>/home/</snippet></ROW><ROW><id>18901638</id><snippet>   path = "/home/"
   os.chdir(path)
   print os.getcwd()
   cmd=("sh my_script.sh")
</snippet></ROW><ROW><id>18901638</id><snippet>print os.getcwd()</snippet></ROW><ROW><id>18901802</id><snippet>allow_domains</snippet></ROW><ROW><id>18901802</id><snippet>Rule</snippet></ROW><ROW><id>18901802</id><snippet>abc.com</snippet></ROW><ROW><id>18901802</id><snippet>BaseSpider</snippet></ROW><ROW><id>18901825</id><snippet>echo=True</snippet></ROW><ROW><id>18901825</id><snippet>create_engine()</snippet></ROW><ROW><id>18901825</id><snippet>echo=True</snippet></ROW><ROW><id>18901825</id><snippet>sqlalchemy</snippet></ROW><ROW><id>18901898</id><snippet>$ ipython locate
</snippet></ROW><ROW><id>18901898</id><snippet>ipython_notebook_config.py</snippet></ROW><ROW><id>18901898</id><snippet>ipython profile create</snippet></ROW><ROW><id>18901898</id><snippet># The directory to use for notebooks.
c.NotebookManager.notebook_dir = u'/path/to/your/notebooks'
</snippet></ROW><ROW><id>18901898</id><snippet># The directory to use for notebooks.
c.FileNotebookManager.notebook_dir = u'/path/to/your/notebooks'
</snippet></ROW><ROW><id>18902055</id><snippet>defaultdict(int)</snippet></ROW><ROW><id>18902055</id><snippet>from collections import defaultdict
import csv
import re
import os

def main():
    result = defaultdict(int)
    regexp = re.compile('ttp_ws_sm_(\d+)_')

    source = '\\\\Isfs\\data$\\GIS Carto\TTP_Draw_Count' 
    with open(os.path.join(source, 'TTP_13_08.csv'), 'r') as f:
        rows = csv.reader(f)

        for row in rows:
            match = regexp.search(row[1])
            if match:
                result[match.group(1)] += int(row[13])

    for key, value in result.iteritems():
        print "club %s %s" % (key, value)

if __name__ == '__main__':
    main()
</snippet></ROW><ROW><id>18902055</id><snippet>club 001 148
club 057 98
club 045 200
</snippet></ROW><ROW><id>18902095</id><snippet>class Canvas_On:    
    def __init__(self, master):
        # ... your original code here ...
        self.c.bind('&lt;Button-1&gt;', self.click)
        self.c.bind('&lt;B1-Motion&gt;', self.drag)

    def click(self, event):
        self.c.scan_mark(event.x, event.y)

    def drag(self, event):
        self.c.scan_dragto(event.x, event.y)
</snippet></ROW><ROW><id>18902095</id><snippet>xview</snippet></ROW><ROW><id>18902095</id><snippet>yview</snippet></ROW><ROW><id>18902095</id><snippet>command</snippet></ROW><ROW><id>18902095</id><snippet>xview_moveto</snippet></ROW><ROW><id>18902095</id><snippet>yview_moveto</snippet></ROW><ROW><id>18902095</id><snippet>foo_scroll</snippet></ROW><ROW><id>18902095</id><snippet>&lt;B1-Motion&gt;</snippet></ROW><ROW><id>18902095</id><snippet>xview_moveto</snippet></ROW><ROW><id>18902095</id><snippet>yview_moveto</snippet></ROW><ROW><id>18902095</id><snippet>&lt;Button-1&gt;</snippet></ROW><ROW><id>18902095</id><snippet>moveto</snippet></ROW><ROW><id>18902095</id><snippet>scale</snippet></ROW><ROW><id>18902095</id><snippet>scan</snippet></ROW><ROW><id>18902095</id><snippet>tag_bind</snippet></ROW><ROW><id>18902095</id><snippet>bind</snippet></ROW><ROW><id>18902095</id><snippet>tag_bind</snippet></ROW><ROW><id>18902095</id><snippet>class Canvas_On:    
    def __init__(self, master):
        # ... your original code here ...
        self.c.tag_bind('bg', '&lt;Button-1&gt;', self.click)
        self.c.tag_bind('bg', '&lt;B1-Motion&gt;', self.drag)
        self.c.tag_bind('draggable', '&lt;Button-1&gt;', self.click_item)
        self.c.tag_bind('draggable', '&lt;B1-Motion&gt;', self.drag_item)
    # ... etc. ...
    def click_item(self, event):
        x, y = self.c.canvasx(event.x), self.c.canvasy(event.y)
        self.drag_item = self.c.find_closest(x, y)
        self.drag_x, self.drag_y = x, y
        self.tag_raise(item)
    def drag_item(self, event):
        x, y = self.c.canvasx(event.x), self.c.canvasy(event.y)
        self.c.move(self.drag_item, x-self.drag_x, y-self.drag_y)
        self.drag_x, self.drag_y = x, y

class Drawing_Utility:
    # ...
    def drawer(self, canvas):
        self.c.create_rectangle(0, 0, 5000, 5000, 
                                fill='black', tags='bg')
        self.c.create_oval(50,50,150,150, fill='orange', tags='draggable')
        self.c.create_oval(1000,1000,1100,1100, fill='orange', tags='draggable')
</snippet></ROW><ROW><id>18902095</id><snippet>canvasx</snippet></ROW><ROW><id>18902095</id><snippet>canvasy</snippet></ROW><ROW><id>18902363</id><snippet> f = Foo()
 f.vals[0] = 10
</snippet></ROW><ROW><id>18902363</id><snippet>f.vals</snippet></ROW><ROW><id>18902363</id><snippet>__getitem__</snippet></ROW><ROW><id>18902363</id><snippet>__setitem__</snippet></ROW><ROW><id>18902363</id><snippet> f = Foo()
 v = f.vals
 f = None
 v[0] = 10
</snippet></ROW><ROW><id>18902363</id><snippet>f</snippet></ROW><ROW><id>18902363</id><snippet>vals</snippet></ROW><ROW><id>18902363</id><snippet>f</snippet></ROW><ROW><id>18902363</id><snippet>f</snippet></ROW><ROW><id>18902363</id><snippet>None</snippet></ROW><ROW><id>18902363</id><snippet>v</snippet></ROW><ROW><id>18902363</id><snippet>Foo</snippet></ROW><ROW><id>18902363</id><snippet>Foo</snippet></ROW><ROW><id>18902363</id><snippet>vals</snippet></ROW><ROW><id>18902363</id><snippet>f.vals</snippet></ROW><ROW><id>18902363</id><snippet>f</snippet></ROW><ROW><id>18902363</id><snippet>struct Foo
{
  int vals[3];
  boost::array&lt;std::string, 5&gt; strs;

  Foo()  { std::cout &lt;&lt; "Foo()"  &lt;&lt; std::endl; }
  ~Foo() { std::cout &lt;&lt; "~Foo()" &lt;&lt; std::endl; }
};

int more_vals[2];
</snippet></ROW><ROW><id>18902363</id><snippet>Foo::vals</snippet></ROW><ROW><id>18902363</id><snippet>Foo::strs</snippet></ROW><ROW><id>18902363</id><snippet>array_proxy</snippet></ROW><ROW><id>18902363</id><snippet>/// @brief Type that proxies to an array.
template &lt;typename T&gt;
class array_proxy
{
public:
  // Types
  typedef T           value_type;
  typedef T*          iterator;
  typedef T&amp;          reference;
  typedef std::size_t size_type;

  /// @brief Empty constructor.
  array_proxy()
    : ptr_(0),
      length_(0)
  {}

  /// @brief Construct with iterators.
  template &lt;typename Iterator&gt;
  array_proxy(Iterator begin, Iterator end)
    : ptr_(&amp;*begin),
      length_(std::distance(begin, end))
  {}

  /// @brief Construct with with start and size.
  array_proxy(reference begin, std::size_t length)
    : ptr_(&amp;begin),
      length_(length)
  {}

  // Iterator support.
  iterator begin()               { return ptr_; }
  iterator end()                 { return ptr_ + length_; }

  // Element access.
  reference operator[](size_t i) { return ptr_[i]; }

  // Capacity.
  size_type size()               { return length_; }

private:
  T* ptr_;
  std::size_t length_;
};
</snippet></ROW><ROW><id>18902363</id><snippet>indexing_suite</snippet></ROW><ROW><id>18902363</id><snippet>ref_index_suite</snippet></ROW><ROW><id>18902363</id><snippet>DerivedPolicies</snippet></ROW><ROW><id>18902363</id><snippet>/// @brief Policy type for referenced indexing, meeting the DerivedPolicies
///        requirement of boost::python::index_suite.
/// 
/// @note Requires Container to support:
///          - value_type and size_type types,
///          - value_type is default constructable and copyable,
///          - element access via operator[],
///          - Default constructable, iterator constructable,
///          - begin(), end(), and size() member functions
template &lt;typename Container&gt;
class ref_index_suite
  : public boost::python::indexing_suite&lt;Container,
      ref_index_suite&lt;Container&gt; &gt;

{
public:

  typedef typename Container::value_type data_type;
  typedef typename Container::size_type  index_type;
  typedef typename Container::size_type  size_type;

  // Element access and manipulation.

  /// @brief Get element from container.
  static data_type&amp;
  get_item(Container&amp; container, index_type index)
  {
    return container[index];
  }

  /// @brief Set element from container.
  static void
  set_item(Container&amp; container, index_type index, const data_type&amp; value)
  {
    container[index] = value;
  }

  /// @brief Reset index to default value.
  static void
  delete_item(Container&amp; container, index_type index)
  {
    set_item(container, index, data_type());
  };

  // Slice support.

  /// @brief Get slice from container.
  ///
  /// @return Python object containing
  static boost::python::object
  get_slice(Container&amp; container, index_type from, index_type to)
  {
    using boost::python::list;
    if (from &gt; to) return list();

    // Return copy, as container only references its elements.
    list list;
    while (from != to) list.append(container[from++]);
    return list;
  };

  /// @brief Set a slice in container with a given value.
  static void
  set_slice(
    Container&amp; container, index_type from,
    index_type to, const data_type&amp; value
  )
  {
    // If range is invalid, return early.
    if (from &gt; to) return;

    // Populate range with value.
    while (from &lt; to) container[from++] = value;
  }

  /// @brief Set a slice in container with another range.
  template &lt;class Iterator&gt;
  static void
  set_slice(
    Container&amp; container, index_type from,
    index_type to, Iterator first, Iterator last
  )
  {
    // If range is invalid, return early.
    if (from &gt; to) return;

    // Populate range with other range.
    while (from &lt; to) container[from++] = *first++;   
  }

  /// @brief Reset slice to default values.
  static void
  delete_slice(Container&amp; container, index_type from, index_type to)
  {
    set_slice(container, from, to, data_type());
  }

  // Capacity.

  /// @brief Get size of container.
  static std::size_t
  size(Container&amp; container) { return container.size(); }

  /// @brief Check if a value is within the container.
  template &lt;class T&gt;
  static bool
  contains(Container&amp; container, const T&amp; value)
  {
    return std::find(container.begin(), container.end(), value)
        != container.end();
  }

  /// @brief Minimum index supported for container.
  static index_type
  get_min_index(Container&amp; /*container*/)
  {
      return 0;
  }

  /// @brief Maximum index supported for container.
  static index_type
  get_max_index(Container&amp; container)
  {
    return size(container);
  }

  // Misc.

  /// @brief Convert python index (could be negative) to a valid container
  ///        index with proper boundary checks.
  static index_type
  convert_index(Container&amp; container, PyObject* object)
  {
    namespace python = boost::python;
    python::extract&lt;long&gt; py_index(object);

    // If py_index cannot extract a long, then type the type is wrong so
    // set error and return early.
    if (!py_index.check()) 
    {
      PyErr_SetString(PyExc_TypeError, "Invalid index type");
      python::throw_error_already_set(); 
      return index_type();
    }

    // Extract index.
    long index = py_index();

    // Adjust negative index.
    if (index &lt; 0)
        index += container.size();

    // Boundary check.
    if (index &gt;= long(container.size()) || index &lt; 0)
    {
      PyErr_SetString(PyExc_IndexError, "Index out of range");
      python::throw_error_already_set();
    }

    return index;
  }
};
</snippet></ROW><ROW><id>18902363</id><snippet>boost::python::class_&lt;...&gt;</snippet></ROW><ROW><id>18902363</id><snippet>/// @brief Conditionally register a type with Boost.Python.
template &lt;typename T&gt;
void register_array_proxy()
{
  typedef array_proxy&lt;T&gt; proxy_type;

  // If type is already registered, then return early.
  namespace python = boost::python;
  bool is_registered = (0 != python::converter::registry::query(
    python::type_id&lt;proxy_type&gt;())-&gt;to_python_target_type());
  if (is_registered) return;

  // Otherwise, register the type as an internal type.
  std::string type_name = std::string("_") + typeid(T).name();
  python::class_&lt;proxy_type&gt;(type_name.c_str(), python::no_init)
    .def(ref_index_suite&lt;proxy_type&gt;());
}
</snippet></ROW><ROW><id>18902363</id><snippet>/// @brief Create a callable Boost.Python object from an array.
template &lt;typename Array&gt;
boost::python::object make_array(Array array)
{
  // Deduce the array_proxy type by removing all the extents from the
  // array.
  ...

  // Register an array proxy.
  register_array_proxy&lt;...&gt;();
}
</snippet></ROW><ROW><id>18902363</id><snippet>Foo::vals</snippet></ROW><ROW><id>18902363</id><snippet>int[3]</snippet></ROW><ROW><id>18902363</id><snippet>array_proxy&lt;int&gt;</snippet></ROW><ROW><id>18902363</id><snippet>array_proxy</snippet></ROW><ROW><id>18902363</id><snippet>array_proxy_getter</snippet></ROW><ROW><id>18902363</id><snippet>/// @brief Functor used used convert an array to an array_proxy for
///        non-member objects.
template &lt;typename NativeType,
          typename ProxyType&gt;
struct array_proxy_getter
{
public:
  typedef NativeType native_type;
  typedef ProxyType  proxy_type;

  /// @brief Constructor.
  array_proxy_getter(native_type array): array_(array) {}

  /// @brief Return an array_proxy for a member array object.
  template &lt;typename C&gt;
  proxy_type operator()(C&amp; c) { return make_array_proxy(c.*array_); }

  /// @brief Return an array_proxy for non-member array object.
  proxy_type operator()() { return make_array_proxy(*array_); }
private:
  native_type array_;
};
</snippet></ROW><ROW><id>18902363</id><snippet>boost::python::object</snippet></ROW><ROW><id>18902363</id><snippet>make_array</snippet></ROW><ROW><id>18902363</id><snippet>/// @brief Create a callable Boost.Python object from an array.
template &lt;typename Array&gt;
boost::python::object make_array(Array array)
{ 
  // Deduce the array_proxy type by removing all the extents from the
  // array.
  ...

  // Register an array proxy.
  register_array_proxy&lt;...&gt;();

  // Create function.
  return boost::python::make_function(
      array_proxy_getter&lt;Array&gt;(array),
      ...);
}
</snippet></ROW><ROW><id>18902363</id><snippet>CallPolices</snippet></ROW><ROW><id>18902363</id><snippet>with_custodian_and_ward_postcall</snippet></ROW><ROW><id>18902363</id><snippet>array_proxy&lt;int&gt;</snippet></ROW><ROW><id>18902363</id><snippet>foo_vals()</snippet></ROW><ROW><id>18902363</id><snippet>foo</snippet></ROW><ROW><id>18902363</id><snippet>// CallPolicy type used to keep the owner alive when returning an object
// that references the parents member variable.
typedef boost::python::with_custodian_and_ward_postcall&lt;
    0, // return object (custodian)
    1  // self or this (ward)
  &gt; return_keeps_owner_alive;
</snippet></ROW><ROW><id>18902363</id><snippet>#include &lt;string&gt;
#include &lt;typeinfo&gt;
#include &lt;boost/python.hpp&gt;
#include &lt;boost/python/suite/indexing/indexing_suite.hpp&gt;

namespace detail {

template &lt;typename&gt; struct array_trait;

/// @brief Type that proxies to an array.
template &lt;typename T&gt;
class array_proxy
{
public:
  // Types
  typedef T           value_type;
  typedef T*          iterator;
  typedef T&amp;          reference;
  typedef std::size_t size_type;

  /// @brief Empty constructor.
  array_proxy()
    : ptr_(0),
      length_(0)
  {}

  /// @brief Construct with iterators.
  template &lt;typename Iterator&gt;
  array_proxy(Iterator begin, Iterator end)
    : ptr_(&amp;*begin),
      length_(std::distance(begin, end))
  {}

  /// @brief Construct with with start and size.
  array_proxy(reference begin, std::size_t length)
    : ptr_(&amp;begin),
      length_(length)
  {}

  // Iterator support.
  iterator begin()               { return ptr_; }
  iterator end()                 { return ptr_ + length_; }

  // Element access.
  reference operator[](size_t i) { return ptr_[i]; }

  // Capacity.
  size_type size()               { return length_; }

private:
  T* ptr_;
  std::size_t length_;
};

/// @brief Make an array_proxy.
template &lt;typename T&gt;
array_proxy&lt;typename array_trait&lt;T&gt;::element_type&gt;
make_array_proxy(T&amp; array)
{
  return array_proxy&lt;typename array_trait&lt;T&gt;::element_type&gt;(
    array[0],
    array_trait&lt;T&gt;::static_size);
}

/// @brief Policy type for referenced indexing, meeting the DerivedPolicies
///        requirement of boost::python::index_suite.
/// 
/// @note Requires Container to support:
///          - value_type and size_type types,
///          - value_type is default constructable and copyable,
///          - element access via operator[],
///          - Default constructable, iterator constructable,
///          - begin(), end(), and size() member functions
template &lt;typename Container&gt;
class ref_index_suite
  : public boost::python::indexing_suite&lt;Container,
      ref_index_suite&lt;Container&gt; &gt;
{
public:

  typedef typename Container::value_type data_type;
  typedef typename Container::size_type  index_type;
  typedef typename Container::size_type  size_type;

  // Element access and manipulation.

  /// @brief Get element from container.
  static data_type&amp;
  get_item(Container&amp; container, index_type index)
  {
    return container[index];
  }

  /// @brief Set element from container.
  static void
  set_item(Container&amp; container, index_type index, const data_type&amp; value)
  {
    container[index] = value;
  }

  /// @brief Reset index to default value.
  static void
  delete_item(Container&amp; container, index_type index)
  {
    set_item(container, index, data_type());
  };

  // Slice support.

  /// @brief Get slice from container.
  ///
  /// @return Python object containing
  static boost::python::object
  get_slice(Container&amp; container, index_type from, index_type to)
  {
    using boost::python::list;
    if (from &gt; to) return list();

    // Return copy, as container only references its elements.
    list list;
    while (from != to) list.append(container[from++]);
    return list;
  };

  /// @brief Set a slice in container with a given value.
  static void
  set_slice(
    Container&amp; container, index_type from,
    index_type to, const data_type&amp; value
  )
  {
    // If range is invalid, return early.
    if (from &gt; to) return;

    // Populate range with value.
    while (from &lt; to) container[from++] = value;
  }

  /// @brief Set a slice in container with another range.
  template &lt;class Iterator&gt;
  static void
  set_slice(
    Container&amp; container, index_type from,
    index_type to, Iterator first, Iterator last
  )
  {
    // If range is invalid, return early.
    if (from &gt; to) return;

    // Populate range with other range.
    while (from &lt; to) container[from++] = *first++;   
  }

  /// @brief Reset slice to default values.
  static void
  delete_slice(Container&amp; container, index_type from, index_type to)
  {
    set_slice(container, from, to, data_type());
  }

  // Capacity.

  /// @brief Get size of container.
  static std::size_t
  size(Container&amp; container) { return container.size(); }

  /// @brief Check if a value is within the container.
  template &lt;class T&gt;
  static bool
  contains(Container&amp; container, const T&amp; value)
  {
    return std::find(container.begin(), container.end(), value)
        != container.end();
  }

  /// @brief Minimum index supported for container.
  static index_type
  get_min_index(Container&amp; /*container*/)
  {
      return 0;
  }

  /// @brief Maximum index supported for container.
  static index_type
  get_max_index(Container&amp; container)
  {
    return size(container);
  }

  // Misc.

  /// @brief Convert python index (could be negative) to a valid container
  ///        index with proper boundary checks.
  static index_type
  convert_index(Container&amp; container, PyObject* object)
  {
    namespace python = boost::python;
    python::extract&lt;long&gt; py_index(object);

    // If py_index cannot extract a long, then type the type is wrong so
    // set error and return early.
    if (!py_index.check()) 
    {
      PyErr_SetString(PyExc_TypeError, "Invalid index type");
      python::throw_error_already_set(); 
      return index_type();
    }

    // Extract index.
    long index = py_index();

    // Adjust negative index.
    if (index &lt; 0)
        index += container.size();

    // Boundary check.
    if (index &gt;= long(container.size()) || index &lt; 0)
    {
      PyErr_SetString(PyExc_IndexError, "Index out of range");
      python::throw_error_already_set();
    }

    return index;
  }
};

/// @brief Trait for arrays.
template &lt;typename T&gt;
struct array_trait_impl;

// Specialize for native array.
template &lt;typename T, std::size_t N&gt;
struct array_trait_impl&lt;T[N]&gt;
{
  typedef T element_type;
  enum { static_size = N };
  typedef array_proxy&lt;element_type&gt; proxy_type;
  typedef boost::python::default_call_policies policy;
  typedef boost::mpl::vector&lt;array_proxy&lt;element_type&gt; &gt; signature;
};

// Specialize boost::array to use the native array trait.
template &lt;typename T, std::size_t N&gt;
struct array_trait_impl&lt;boost::array&lt;T, N&gt; &gt;
  : public array_trait_impl&lt;T[N]&gt;
{};

// @brief Specialize for member objects to use and modify non member traits.
template &lt;typename T, typename C&gt;
struct array_trait_impl&lt;T (C::*)&gt;
  : public array_trait_impl&lt;T&gt;
{
  typedef boost::python::with_custodian_and_ward_postcall&lt;
      0, // return object (custodian)
      1  // self or this (ward)
    &gt; policy;

  // Append the class to the signature.
  typedef typename boost::mpl::push_back&lt;
    typename array_trait_impl&lt;T&gt;::signature, C&amp;&gt;::type signature;
};

/// @brief Trait class used to deduce array information, policies, and 
///        signatures
template &lt;typename T&gt;
struct array_trait:
  public array_trait_impl&lt;typename boost::remove_pointer&lt;T&gt;::type&gt;
{
  typedef T native_type;
};

/// @brief Functor used used convert an array to an array_proxy for
///        non-member objects.
template &lt;typename Trait&gt;
struct array_proxy_getter
{
public:
  typedef typename Trait::native_type native_type;
  typedef typename Trait::proxy_type proxy_type;

  /// @brief Constructor.
  array_proxy_getter(native_type array): array_(array) {}

  /// @brief Return an array_proxy for a member array object.
  template &lt;typename C&gt;
  proxy_type operator()(C&amp; c) { return make_array_proxy(c.*array_); }

  /// @brief Return an array_proxy for a non-member array object.
  proxy_type operator()() { return make_array_proxy(*array_); }
private:
  native_type array_;
};

/// @brief Conditionally register a type with Boost.Python.
template &lt;typename Trait&gt;
void register_array_proxy()
{
  typedef typename Trait::element_type element_type;
  typedef typename Trait::proxy_type proxy_type;

  // If type is already registered, then return early.
  namespace python = boost::python;
  bool is_registered = (0 != python::converter::registry::query(
    python::type_id&lt;proxy_type&gt;())-&gt;to_python_target_type());
  if (is_registered) return;

  // Otherwise, register the type as an internal type.
  std::string type_name = std::string("_") + typeid(element_type).name();
  python::class_&lt;proxy_type&gt;(type_name.c_str(), python::no_init)
    .def(ref_index_suite&lt;proxy_type&gt;());
}

/// @brief Create a callable Boost.Python object that will return an
///        array_proxy type when called.
///
/// @note This function will conditionally register array_proxy types
///       for conversion within Boost.Python.  The array_proxy will
///       extend the life of the object from which it was called.
///       For example, if `foo` is an object, and `vars` is an array,
///       then the object returned from `foo.vars` will extend the life
///       of `foo`.
template &lt;typename Array&gt;
boost::python::object make_array_aux(Array array)
{
  typedef array_trait&lt;Array&gt; trait_type;
  // Register an array proxy.
  register_array_proxy&lt;trait_type&gt;();

  // Create function.
  return boost::python::make_function(
      array_proxy_getter&lt;trait_type&gt;(array),
      typename trait_type::policy(),
      typename trait_type::signature());
}

} // namespace detail

/// @brief Create a callable Boost.Python object from an array.
template &lt;typename T&gt;
boost::python::object make_array(T array)
{ 
  return detail::make_array_aux(array);
}

struct Foo
{
  int vals[3];
  boost::array&lt;std::string, 5&gt; strs;

  Foo()  { std::cout &lt;&lt; "Foo()"  &lt;&lt; std::endl; }
  ~Foo() { std::cout &lt;&lt; "~Foo()" &lt;&lt; std::endl; }
};

int more_vals[2];

BOOST_PYTHON_MODULE(example)
{
  namespace python = boost::python;

  python::class_&lt;Foo&gt;("Foo")
    .add_property("vals", make_array(&amp;Foo::vals))
    .add_property("strs", make_array(&amp;Foo::strs))
    ;
  python::def("more_vals", make_array(&amp;more_vals));
}
</snippet></ROW><ROW><id>18902363</id><snippet>&gt;&gt;&gt; from example import Foo, more_vals
&gt;&gt;&gt; def print_list(l): print ', '.join(str(v) for v in l)
... 
&gt;&gt;&gt; f = Foo()
Foo()
&gt;&gt;&gt; f.vals[0] = 10
&gt;&gt;&gt; print f.vals[0]
10
&gt;&gt;&gt; f.vals[0] = '10'
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
TypeError: Invalid assignment
&gt;&gt;&gt; f.vals[100] = 10
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
IndexError: Index out of range
&gt;&gt;&gt; f.vals[:] = xrange(100,103)
&gt;&gt;&gt; print_list(f.vals)
100, 101, 102
&gt;&gt;&gt; f.strs[:] = ("a", "b", "c", "d", "e")
&gt;&gt;&gt; print_list(f.strs)
a, b, c, d, e
&gt;&gt;&gt; f.vals[-1] = 30
&gt;&gt;&gt; print_list(f.vals)
100, 101, 30
&gt;&gt;&gt; v = f.vals
&gt;&gt;&gt; del v[:-1]
&gt;&gt;&gt; print_list(f.vals)
0, 0, 30
&gt;&gt;&gt; print_list(v)
0, 0, 30
&gt;&gt;&gt; x = v[-1:]
&gt;&gt;&gt; f = None
&gt;&gt;&gt; v = None
~Foo()
&gt;&gt;&gt; print_list(x)
30
&gt;&gt;&gt; more_vals()[:] = xrange(50, 100)
&gt;&gt;&gt; print_list(more_vals())
50, 51
</snippet></ROW><ROW><id>18902557</id><snippet>-1</snippet></ROW><ROW><id>18902557</id><snippet>&gt;&gt;&gt; x = "Hello World !"
&gt;&gt;&gt; x[6]
'W'
&gt;&gt;&gt; x[2]
'l'
&gt;&gt;&gt; x[6:2:-1]
'W ol'
</snippet></ROW><ROW><id>18902557</id><snippet>[6:2:-1]</snippet></ROW><ROW><id>18902630</id><snippet>A=0x00 // all pins are set low
A=0xFF // all pins are high
A=0xF0 // Pins 0:3 are low, Pins 4:7 are high
</snippet></ROW><ROW><id>18902630</id><snippet>import parallel
p = parallel.Parallel() # open LPT1
p.setData(0x55) #&lt;--- this is your bread and butter here  
</snippet></ROW><ROW><id>18902630</id><snippet>data=[0x00, 0x01, 0x02]
while data:
    onebyte=data.pop()
    p.setDataStrobe('low') #signal that we're sending data
    p.setData(onebyte)
    while p.getInAcknowledge() == 'high': #wait for this line to go 'low'
                                          # to indicate an ACK
        pass                              #we're waiting for it to acknowledge...
    p.setDataStrobe('high')#Ok, we're done sending that byte.
</snippet></ROW><ROW><id>18902630</id><snippet>portState = 0b01100000 #Somehow the parallel port has this currently set
newportState = portState | 0b00010000#&lt;-- this is called a bitmask
print newportState 
&gt;&gt;&gt; 0b011*1*0000
</snippet></ROW><ROW><id>18902630</id><snippet>newportState = 0b01110000
clearedPin5 = newportState &amp; 11101111
print clearedPin5
&gt;&gt;&gt; 0b011*0*0000
</snippet></ROW><ROW><id>18902648</id><snippet>\"</snippet></ROW><ROW><id>18902648</id><snippet>plt.ylabel(r'H\"{a}ufigkeit')
</snippet></ROW><ROW><id>18902648</id><snippet>\ddot</snippet></ROW><ROW><id>18902648</id><snippet>$</snippet></ROW><ROW><id>18902648</id><snippet>plt.ylabel(r'H$\ddot{a}$ufigkeit')
</snippet></ROW><ROW><id>18902648</id><snippet>\textrm</snippet></ROW><ROW><id>18902648</id><snippet>\mathrm</snippet></ROW><ROW><id>18902648</id><snippet>plt.ylabel(r'$\mathrm{H\ddot{a}ufigkeit}$')
</snippet></ROW><ROW><id>18902648</id><snippet>import matplotlib.pyplot as plt
plt.rc('text', usetex=True)
</snippet></ROW><ROW><id>18902654</id><snippet>tcpdecode()</snippet></ROW><ROW><id>18902654</id><snippet>tcpdecode()
</snippet></ROW><ROW><id>18903204</id><snippet>XXX-MacBook-Air:~ XXX$ python /Users/[path]/currenttime.py
</snippet></ROW><ROW><id>18903204</id><snippet>python</snippet></ROW><ROW><id>18903204</id><snippet>#!/usr/bin/env python</snippet></ROW><ROW><id>18903204</id><snippet>XXX-MacBook-Air:~ XXX$ chmod a+x /Users/[path]/currenttime.py
</snippet></ROW><ROW><id>18903204</id><snippet>XXX-MacBook-Air:~ XXX$ /Users/[path]/currenttime.py
</snippet></ROW><ROW><id>18903217</id><snippet>BaseSpider</snippet></ROW><ROW><id>18903217</id><snippet>from scrapy.contrib.linkextractors.sgml import SgmlLinkExtractor
from scrapy.contrib.spiders import Rule, CrawlSpider
from scrapy.item import Item, Field
from scrapy.selector import HtmlXPathSelector


class JogadorItem(Item):
    nome = Field()
    time = Field()


class MoneyballSpider(CrawlSpider):
    name = "moneyball"
    allowed_domains = ["esporte.uol.com.br", "click.uol.com.br", "uol.com.br"]
    start_urls = ["http://esporte.uol.com.br/futebol"]

    rules = (Rule(SgmlLinkExtractor(allow=(r'.*futebol/clubes/.*?/jogadores/', )), callback='parse_players', follow=True),
             Rule(SgmlLinkExtractor(allow=(r'.*futebol/clubes/.*', )), follow=True),)

    def parse_players(self, response):
        hxs = HtmlXPathSelector(response)
        jogadores = hxs.select('//div[@id="jogadores"]/div/ul/li')
        items = []
        for jogador in jogadores:
            item = JogadorItem()
            item['nome'] = jogador.select('h5/a/text()').extract()
            item['time'] = hxs.select('//div[@class="header clube"]/h1/a/text()').extract()
            items.append(item)
            print item['nome'], item['time']
        return items
</snippet></ROW><ROW><id>18903217</id><snippet>...
[u'Silva'] [u'Vila Nova-GO']
[u'Luizinho'] [u'Vila Nova-GO']
...
[u'Michel'] [u'Guarani']
[u'Wellyson'] [u'Guarani']
...
</snippet></ROW><ROW><id>18903422</id><snippet>x = [1.0, 0.0, 3.5, 1.2, 5.4]
newx = [int(j) for i in x for j in str(i).split('.')]
&gt;&gt;&gt;[1, 0, 0, 0, 3, 5, 1, 2, 5, 4]
</snippet></ROW><ROW><id>18903422</id><snippet>var result = []
for i in x:
    for j in str(i).split('.'):
        result.append(int(j))
</snippet></ROW><ROW><id>18903427</id><snippet>twitter.com</snippet></ROW><ROW><id>18903427</id><snippet>follow=False</snippet></ROW><ROW><id>18903427</id><snippet>from scrapy.contrib.linkextractors.sgml import SgmlLinkExtractor
from scrapy.contrib.spiders import CrawlSpider, Rule
from scrapy.item import Item, Field


class MyItem(Item):
    url= Field()


class MySpider(CrawlSpider):
    name = 'twitter.com'
    allowed_domains = ['twitter.com']
    start_urls = ['http://www.twitter.com']

    rules = (Rule(SgmlLinkExtractor(), callback='parse_url', follow=False), )

    def parse_url(self, response):
        item = MyItem()
        item['url'] = response.url
        return item
</snippet></ROW><ROW><id>18903427</id><snippet>http://status.twitter.com/
https://twitter.com/
http://support.twitter.com/forums/26810/entries/78525
http://support.twitter.com/articles/14226-how-to-find-your-twitter-short-code-or-long-code
...
</snippet></ROW><ROW><id>18903618</id><snippet>input()</snippet></ROW><ROW><id>18903618</id><snippet>Capital = float(input())
</snippet></ROW><ROW><id>18903618</id><snippet>InterestRate = float(input())
</snippet></ROW><ROW><id>18903684</id><snippet>user_add_wrapper(name, new_user)</snippet></ROW><ROW><id>18903684</id><snippet>new_user</snippet></ROW><ROW><id>18903684</id><snippet>user_add_wrapper()</snippet></ROW><ROW><id>18903684</id><snippet>new_user</snippet></ROW><ROW><id>18903684</id><snippet>new_user</snippet></ROW><ROW><id>18903684</id><snippet>python::object</snippet></ROW><ROW><id>18903684</id><snippet>boost::python::tuple</snippet></ROW><ROW><id>18903684</id><snippet>user_add_wrapper()</snippet></ROW><ROW><id>18903684</id><snippet>user_add_wrapper(*bp::make_tuple(name), **new_user);
</snippet></ROW><ROW><id>18903684</id><snippet>example.py</snippet></ROW><ROW><id>18903684</id><snippet>def user_add(name, givenname, sn):
    print locals()
</snippet></ROW><ROW><id>18903684</id><snippet>user_add()</snippet></ROW><ROW><id>18903684</id><snippet>#include &lt;boost/python.hpp&gt;

int main()
{
  Py_Initialize(); // Start interpreter.

  // Create the __main__ module.
  namespace python = boost::python;
  python::object main = python::import("__main__");
  python::object main_namespace = main.attr("__dict__");

  try
  {
    python::object example = python::import("example");
    python::object example_namespace = example.attr("__dict__");

    // Construct args.
    std::string name = "Pythonist";
    python::dict new_user;
    new_user["givenname"] = "Test";
    new_user["sn"] = "User";

    // Invoke user_add by unpacking the new_user dictionary.
    example_namespace["user_add"](*python::make_tuple(name), **new_user);
  }
  catch (const python::error_already_set&amp;)
  {
    PyErr_Print();
  }
}
</snippet></ROW><ROW><id>18903684</id><snippet>{'givenname': 'Test', 'sn': 'User', 'name': 'Pythonist'}
</snippet></ROW><ROW><id>18903832</id><snippet>def isSomething(s):
   return any(f(s) for f in listFunctions))
</snippet></ROW><ROW><id>18903832</id><snippet>any</snippet></ROW><ROW><id>18903832</id><snippet>any</snippet></ROW><ROW><id>18903832</id><snippet>f(s)</snippet></ROW><ROW><id>18903832</id><snippet>listFunctions</snippet></ROW><ROW><id>18903893</id><snippet>db</snippet></ROW><ROW><id>18903893</id><snippet>ndb.query</snippet></ROW><ROW><id>18903893</id><snippet>q = q.order(-cls.raisedDate) 
</snippet></ROW><ROW><id>18903963</id><snippet>bar</snippet></ROW><ROW><id>18903963</id><snippet>import matplotlib.pyplot as plt
import matplotlib.cm as cm
from matplotlib.colors import Normalize
from numpy.random import rand

fig, ax = plt.subplots(1, 1)
# get a color map
my_cmap = cm.get_cmap('jet')
# get normalize function (takes data in range [vmin, vmax] -&gt; [0, 1])
my_norm = Normalize(vmin=0, vmax=5)
# some boring fake data
my_data = 5*rand(5)
ax.bar(range(5), rand(5), color=my_cmap(my_norm(my_data)))

plt.show()
</snippet></ROW><ROW><id>18904026</id><snippet>re.split()</snippet></ROW><ROW><id>18904026</id><snippet>?:</snippet></ROW><ROW><id>18904026</id><snippet>replaceArray = 'Replace the string|(?:in|inside|within) the string|with the string'
</snippet></ROW><ROW><id>18904245</id><snippet>_</snippet></ROW><ROW><id>18904245</id><snippet>class MyClass:

  def _method(self):
    "I have a docstring, but I won't be published"
    return 'done'
</snippet></ROW><ROW><id>18904245</id><snippet>ACCESS_PRIVATE</snippet></ROW><ROW><id>18904245</id><snippet>from AccessControl.SecurityInfo import ACCESS_PRIVATE

class MyClass:

    myMethod__roles__ = ACCESS_PRIVATE
    def myMethod(self):
    "I look like I'm published, but I'm not"
        return 'done'
</snippet></ROW><ROW><id>18904245</id><snippet>NotFound</snippet></ROW><ROW><id>18904245</id><snippet>ACCESS_PRIVATE</snippet></ROW><ROW><id>18904245</id><snippet>IBrowserPublisher</snippet></ROW><ROW><id>18904245</id><snippet>DefaultPublishTraverse</snippet></ROW><ROW><id>18904245</id><snippet>ZPublisher/BaseRequest.py</snippet></ROW><ROW><id>18904266</id><snippet>John = ['smith', 'brown', 'wilson']
Details = [{'age': 23, 'hometown': 'chicago'},{'age': 26, 'hometown': 'New York'}, {'age': 44, 'hometown': 'Boston'}]

combined = [dict(detail, John=surname) for detail, surname in zip(Details, John)]
# [{'hometown': 'chicago', 'age': 23, 'John': 'smith'}, {'hometown': 'New York', 'age': 26, 'John': 'brown'}, {'hometown': 'Boston', 'age': 44, 'John': 'wilson'}]
</snippet></ROW><ROW><id>18904285</id><snippet>std::ofstream</snippet></ROW><ROW><id>18904285</id><snippet>std::ofstream</snippet></ROW><ROW><id>18904285</id><snippet>%{ %}</snippet></ROW><ROW><id>18904285</id><snippet>%module ptrtest

%include "boost_shared_ptr.i"
%include "std_string.i"

%shared_ptr( std::ofstream )

namespace std {
  class ofstream {
  };
}

%{
#include &lt;fstream&gt;
#include &lt;boost/shared_ptr.hpp&gt;

typedef boost::shared_ptr&lt; std::ofstream &gt; ofstream_ptr;

ofstream_ptr mk_out(const std::string&amp; fname ){
    return ofstream_ptr( new std::ofstream( fname.c_str() ) );
}
%}

typedef boost::shared_ptr&lt; std::ofstream &gt; ofstream_ptr;
ofstream_ptr mk_out(const std::string&amp; fname );

%pythoncode %{
def leak_memory():
    ostr=mk_out('/tmp/dont_do_this.txt')
%}
</snippet></ROW><ROW><id>18904285</id><snippet>%inline</snippet></ROW><ROW><id>18904285</id><snippet>%inline %{
typedef boost::shared_ptr&lt; std::ofstream &gt; ofstream_ptr;

ofstream_ptr mk_out(const std::string&amp; fname ){
    return ofstream_ptr( new std::ofstream( fname.c_str() ) );
}
%}
</snippet></ROW><ROW><id>18904318</id><snippet>curses</snippet></ROW><ROW><id>18904318</id><snippet>urwid</snippet></ROW><ROW><id>18904318</id><snippet>screen</snippet></ROW><ROW><id>18904318</id><snippet>termios</snippet></ROW><ROW><id>18904318</id><snippet>termcap</snippet></ROW><ROW><id>18904394</id><snippet>// controller.js
angular.module('app')
       .controller('EntryCtrl', [
          '$scope',
          '$http',
          '$routeParams',
          '$location',
          'master', // this has to be angular injectable
          function($scope, $http, $routeParams, $location, master) {
              $scope.form = master.form;
          }
       ]);
</snippet></ROW><ROW><id>18904394</id><snippet>app.js</snippet></ROW><ROW><id>18904394</id><snippet>// angular.js
angular.module('app', ['ngResource'])
       .config([
         '$routeProvider',
         function($routeProvider){
             $routeProvider
                .when('/', {
                    templateUrl: '/templates/workflow/request_form.html',
                    controller: 'EntryCtrl'
                })
                .otherwise({
                    redirectTo: '/'
                });
         }
       ]);
</snippet></ROW><ROW><id>18904394</id><snippet>&lt;script src=".../angular.min.js"&gt;&lt;/script&gt;
&lt;script src=".../app.js"&gt;&lt;/script&gt; &lt;!-- where app is defined --&gt;
&lt;script src=".../controller.js"&gt;&lt;/script&gt; &lt;!-- where EntryCtrl is defined --&gt;
</snippet></ROW><ROW><id>18904413</id><snippet> import sys
 if 'lab' in sys.modules:
     del sys.modules['lab']
 import lab as _config
</snippet></ROW><ROW><id>18904465</id><snippet>while True</snippet></ROW><ROW><id>18904465</id><snippet>break</snippet></ROW><ROW><id>18904465</id><snippet>return</snippet></ROW><ROW><id>18904465</id><snippet>count &gt; 10</snippet></ROW><ROW><id>18904465</id><snippet>input ...</snippet></ROW><ROW><id>18904465</id><snippet>count == 5</snippet></ROW><ROW><id>18904465</id><snippet>continue</snippet></ROW><ROW><id>18904485</id><snippet>twisted.internet.reactor</snippet></ROW><ROW><id>18904485</id><snippet>class Foo(object):
    def __init__(self, reactor, ....):
        self.reactor = reactor
</snippet></ROW><ROW><id>18904485</id><snippet>twisted.internet.reactor</snippet></ROW><ROW><id>18904485</id><snippet>def main():
    do_some_stuff()
    from twisted.internet import reactor
    stuff_done = start_some_stuff(reactor)
    stuff_done.addCallback(reactor.stop)

if __name__ == '__main__':
    main()
</snippet></ROW><ROW><id>18904485</id><snippet>twisted.internet.reactor</snippet></ROW><ROW><id>18904485</id><snippet>LineReceiver</snippet></ROW><ROW><id>18904690</id><snippet>list.append()</snippet></ROW><ROW><id>18904690</id><snippet>None</snippet></ROW><ROW><id>18904690</id><snippet>&gt;&gt;&gt; list1 = [1,2,3]
&gt;&gt;&gt; list2 = [4,5,6]
&gt;&gt;&gt; list1.append(list2)
&gt;&gt;&gt; list1
[1, 2, 3, [4, 5, 6]]
</snippet></ROW><ROW><id>18904690</id><snippet>list3</snippet></ROW><ROW><id>18904690</id><snippet>list3</snippet></ROW><ROW><id>18904690</id><snippet>None</snippet></ROW><ROW><id>18904690</id><snippet>list.extend()</snippet></ROW><ROW><id>18904690</id><snippet>+</snippet></ROW><ROW><id>18904747</id><snippet>python3</snippet></ROW><ROW><id>18904747</id><snippet>python</snippet></ROW><ROW><id>18904747</id><snippet>python2</snippet></ROW><ROW><id>18904747</id><snippet>pip</snippet></ROW><ROW><id>18904747</id><snippet>ipython</snippet></ROW><ROW><id>18904747</id><snippet>pip</snippet></ROW><ROW><id>18904747</id><snippet>pip-X.Y</snippet></ROW><ROW><id>18904747</id><snippet>pip</snippet></ROW><ROW><id>18904747</id><snippet>pip3</snippet></ROW><ROW><id>18904747</id><snippet>$ curl -O https://bitbucket.org/pypa/setuptools/raw/bootstrap/ez_setup.py
$ sudo python3.3 ez_setup.py
$ curl -O https://raw.github.com/pypa/pip/master/contrib/get-pip.py
$ sudo python3.3 get-pip.py
</snippet></ROW><ROW><id>18904747</id><snippet>pip</snippet></ROW><ROW><id>18904747</id><snippet>sudo yum install python-pip</snippet></ROW><ROW><id>18904747</id><snippet>sudo yum install python33-pip</snippet></ROW><ROW><id>18904747</id><snippet>python3-pip</snippet></ROW><ROW><id>18904747</id><snippet>pip</snippet></ROW><ROW><id>18904747</id><snippet>pip-3.3</snippet></ROW><ROW><id>18904747</id><snippet>pip-2.6</snippet></ROW><ROW><id>18904747</id><snippet>pip-3.3</snippet></ROW><ROW><id>18904747</id><snippet>pip</snippet></ROW><ROW><id>18904747</id><snippet>pip3</snippet></ROW><ROW><id>18904747</id><snippet>python3-pip</snippet></ROW><ROW><id>18904747</id><snippet>pip-python3</snippet></ROW><ROW><id>18904747</id><snippet>pip</snippet></ROW><ROW><id>18904747</id><snippet>pip</snippet></ROW><ROW><id>18904747</id><snippet>cp pip pip-2.6</snippet></ROW><ROW><id>18904747</id><snippet>mv pip pip-3.3; ln -s pip-2.6 pip; ln -s pip-3.3 pip3</snippet></ROW><ROW><id>18904747</id><snippet>#!/usr/local/bin/python3.3
# EASY-INSTALL-ENTRY-SCRIPT: 'pip==1.2.1','console_scripts','pip-3.3'
__requires__ = 'pip==1.2.1'
import sys
from pkg_resources import load_entry_point

if __name__ == '__main__':
    sys.exit(
        load_entry_point('pip==1.2.1', 'console_scripts', 'pip-3.3')()
    )
</snippet></ROW><ROW><id>18904747</id><snippet>pip</snippet></ROW><ROW><id>18904914</id><snippet>numpy.ndarray</snippet></ROW><ROW><id>18904914</id><snippet>import numpy as np
data = np.array([[1,2,3],[1,2,3],[1,2,3]])
</snippet></ROW><ROW><id>18904914</id><snippet>np.asarray</snippet></ROW><ROW><id>18904914</id><snippet>np.array</snippet></ROW><ROW><id>18905310</id><snippet>header</snippet></ROW><ROW><id>18905310</id><snippet>index_col</snippet></ROW><ROW><id>18905310</id><snippet>tupleize_cols</snippet></ROW><ROW><id>18905310</id><snippet>read_csv</snippet></ROW><ROW><id>18905310</id><snippet>In [1]: df = pd.read_csv('foo.csv', header=[0, 1, 2], index_col=[0, 1], tupleize_cols=False, sep='\s*,\s+')
</snippet></ROW><ROW><id>18905310</id><snippet>tupelize=False</snippet></ROW><ROW><id>18905310</id><snippet>In [2]: df.columns.names = df.columns[0]

In [3]: del df[df.columns[0]]

In [4]: df
Out[4]:
colLabel:name           dog         bat    Ostrich
colLabel:genus        Canis  Chiroptera  Struthio,
colLabel:activity   diurnal   nocturnal    diurnal
day    time of day
Monday morning           17           5          2
       day               63           0         34
       night             21          68          1
Friday day               72           0         34
</snippet></ROW><ROW><id>18905381</id><snippet>wheel</snippet></ROW><ROW><id>18905381</id><snippet>pip</snippet></ROW><ROW><id>18905394</id><snippet>import math
import matplotlib.pylab as plt

nrows = int(math.ceil(len(subsl) / 2.))

fig, axs = plt.subplots(nrows, 2)

ylim = 100000, 600000
for ax, subsm in zip(axs.flat, subsl):
    H7, subsm = sumsubdesc2(table, subsm)
    H7.plot(ax=ax, title='Rolling 4q mean %s' % subsm)
    ax.set_ylim(ylim)
</snippet></ROW><ROW><id>18905394</id><snippet>axs.size &gt; len(subsl)</snippet></ROW><ROW><id>18905394</id><snippet>StopIteration</snippet></ROW><ROW><id>18905394</id><snippet>axs.flat</snippet></ROW><ROW><id>18905394</id><snippet>axs</snippet></ROW><ROW><id>18905394</id><snippet>axs.flat[-1].set_visible(False)
</snippet></ROW><ROW><id>18905394</id><snippet>axs.size - len(subsl)</snippet></ROW><ROW><id>18905394</id><snippet>for ax in axs.flat[axs.size - 1:len(subsl) - 1:-1]:
    ax.set_visible(False)
</snippet></ROW><ROW><id>18905394</id><snippet>axs</snippet></ROW><ROW><id>18905394</id><snippet>axs.size</snippet></ROW><ROW><id>18905394</id><snippet>axs</snippet></ROW><ROW><id>18905394</id><snippet>axs.size - 1</snippet></ROW><ROW><id>18905394</id><snippet>subsl</snippet></ROW><ROW><id>18905394</id><snippet>len(subsl)</snippet></ROW><ROW><id>18905394</id><snippet>axs</snippet></ROW><ROW><id>18905539</id><snippet>parent</snippet></ROW><ROW><id>18905539</id><snippet>tkChooseColor.askcolor(parent=self)
</snippet></ROW><ROW><id>18905949</id><snippet>Ploy3DCollection</snippet></ROW><ROW><id>18905949</id><snippet>Line3DCollection</snippet></ROW><ROW><id>18905949</id><snippet>from matplotlib import pyplot as plt
from mpl_toolkits.mplot3d.art3d import Poly3DCollection, Line3DCollection

fig = plt.figure()
ax = fig.add_subplot(111, projection='3d')

x = [0, 2, 1, 1]
y = [0, 0, 1, 0]
z = [0, 0, 0, 1]

vertices = [[0, 1, 2], [0, 1, 3], [0, 2, 3], [1, 2, 3]]

tupleList = zip(x, y, z)

poly3d = [[tupleList[vertices[ix][iy]] for iy in range(len(vertices[0]))] for ix in range(len(vertices))]
ax.scatter(x,y,z)
ax.add_collection3d(Poly3DCollection(poly3d, facecolors='w', linewidths=1, alpha=0.5))
ax.add_collection3d(Line3DCollection(poly3d, colors='k', linewidths=0.2, linestyles=':'))

plt.show()
</snippet></ROW><ROW><id>18906030</id><snippet>screen = pygame.display.set_mode((800, 600)) # change to the real resolution
</snippet></ROW><ROW><id>18906030</id><snippet>set_mode(resolution=(0,0), flags=0, depth=0) -&gt; Surface
</snippet></ROW><ROW><id>18906030</id><snippet>pygame.FULLSCREEN    create a fullscreen display
pygame.DOUBLEBUF     recommended for HWSURFACE or OPENGL
pygame.HWSURFACE     hardware accelerated, only in FULLSCREEN
pygame.OPENGL        create an OpenGL renderable display
pygame.RESIZABLE     display window should be sizeable
pygame.NOFRAME       display window will have no border or controls
</snippet></ROW><ROW><id>18906030</id><snippet># Open a window on the screen
screen_width=700
screen_height=400
screen=pygame.display.set_mode([screen_width,screen_height])
</snippet></ROW><ROW><id>18906125</id><snippet>itemIds</snippet></ROW><ROW><id>18906125</id><snippet>,</snippet></ROW><ROW><id>18906125</id><snippet>itemIds = lambda: (('q42',), ('Q42',), ('Q1', ), ('Q1000',), ('Q31337',),)
</snippet></ROW><ROW><id>18906142</id><snippet>multiprocessing</snippet></ROW><ROW><id>18906407</id><snippet>def my_view(request):
   form = UserForm() 
   if request.method == 'POST':
       form = UserForm(request.POST)

        if form.is_valid(): # here to_python() is run for each field
            form.save()
            # redirect

   return render_to_response('home.html', { 'form': form })
</snippet></ROW><ROW><id>18906528</id><snippet>itertools.combinations</snippet></ROW><ROW><id>18906528</id><snippet>from itertools import combinations
for a, b in combinations(intList, 2):
   print abs(a - b)
</snippet></ROW><ROW><id>18906528</id><snippet>[abs(a -b) for a, b in combinations(intList, 2)]
</snippet></ROW><ROW><id>18906582</id><snippet>In [11]: g = df.groupby('Browser')

In [12]: g['Metric1'].max()
Out[12]:
Browser
Chrome/29    3000
FF           2000
IE           1000
Opera        3000
Name: Metric1, dtype: int64

In [13]: over2000 = g['Metric1'].max() &gt; 2000

In [14]: over2000
Out[14]:
Browser
Chrome/29     True
FF           False
IE           False
Opera         True
Name: Metric1, dtype: bool
</snippet></ROW><ROW><id>18906582</id><snippet>In [15]: over2000[over2000].index.values
Out[15]: array(['Chrome/29', 'Opera'], dtype=object)
</snippet></ROW><ROW><id>18906616</id><snippet>cls</snippet></ROW><ROW><id>18906616</id><snippet>class_</snippet></ROW><ROW><id>18906616</id><snippet>clss</snippet></ROW><ROW><id>18906616</id><snippet>eggs = type(spam)</snippet></ROW><ROW><id>18906616</id><snippet>InnerClass</snippet></ROW><ROW><id>18906616</id><snippet>ClassTwo</snippet></ROW><ROW><id>18906616</id><snippet>ClassTwo</snippet></ROW><ROW><id>18906616</id><snippet>InnerClass</snippet></ROW><ROW><id>18906616</id><snippet>foo_bar = types.ClassType('foo_bar', (object,), {})</snippet></ROW><ROW><id>18906616</id><snippet>FooBar = types.ClassType('FooBar', (object,), {})</snippet></ROW><ROW><id>18906616</id><snippet>foo_bar = types.ClassType('FooBar', (object,), {})</snippet></ROW><ROW><id>18906804</id><snippet>Queue</snippet></ROW><ROW><id>18906804</id><snippet>Queue</snippet></ROW><ROW><id>18906804</id><snippet>Queue</snippet></ROW><ROW><id>18906804</id><snippet>RuntimeError: MyQueue objects should only be shared between processes through inheritance</snippet></ROW><ROW><id>18906804</id><snippet>Queue</snippet></ROW><ROW><id>18906804</id><snippet>multiprocess</snippet></ROW><ROW><id>18906804</id><snippet>multiprocessing</snippet></ROW><ROW><id>18906804</id><snippet>register_after_fork</snippet></ROW><ROW><id>18906804</id><snippet>Queue</snippet></ROW><ROW><id>18906804</id><snippet>def __getstate__(self):
    return self.name, super(MyQueue, self).__getstate__()

def __setstate__(self, state):
    self.name, state = state
    super(MyQueue, self).__setstate__(state)
</snippet></ROW><ROW><id>18906804</id><snippet>pickle</snippet></ROW><ROW><id>18906804</id><snippet>_after_fork()</snippet></ROW><ROW><id>18906804</id><snippet>multiprocessing</snippet></ROW><ROW><id>18906804</id><snippet>CoreFoundation</snippet></ROW><ROW><id>18906804</id><snippet>Queue</snippet></ROW><ROW><id>18906804</id><snippet>register_after_fork</snippet></ROW><ROW><id>18906804</id><snippet>Pipe</snippet></ROW><ROW><id>18906804</id><snippet>_after_fork</snippet></ROW><ROW><id>18906804</id><snippet>Lock</snippet></ROW><ROW><id>18906804</id><snippet>BoundedSemaphore</snippet></ROW><ROW><id>18906804</id><snippet>Queue</snippet></ROW><ROW><id>18906804</id><snippet>__reduce__</snippet></ROW><ROW><id>18906804</id><snippet>__reduce_ex</snippet></ROW><ROW><id>18906804</id><snippet>__getstate__</snippet></ROW><ROW><id>18906949</id><snippet>int(DisableNumber)
</snippet></ROW><ROW><id>18906949</id><snippet>DisableNumber = int(input("To disable a mod, type it's number in the list.\n"))
</snippet></ROW><ROW><id>18906949</id><snippet>input()</snippet></ROW><ROW><id>18906949</id><snippet>int</snippet></ROW><ROW><id>18906949</id><snippet>DisableNumber</snippet></ROW><ROW><id>18906949</id><snippet>FileToDisable = ModList[DisableNumber]
</snippet></ROW><ROW><id>18907037</id><snippet>argtypes</snippet></ROW><ROW><id>18907037</id><snippet>FormatMessageW</snippet></ROW><ROW><id>18907037</id><snippet>import ctypes
from ctypes import wintypes

fm = ctypes.windll.kernel32.FormatMessageW
fm.argtypes = [
    wintypes.DWORD,    # dwFlags
    wintypes.LPCVOID,  # lpSource
    wintypes.DWORD,    # dwMessageId
    wintypes.DWORD,    # dwLanguageId
    wintypes.LPWSTR,   # lpBuffer
    wintypes.DWORD,    # nSize
    wintypes.LPVOID,   # Arguments (va_list *)
]

FORMAT_MESSAGE_ALLOCATE_BUFFER = 0x100  
FORMAT_MESSAGE_FROM_SYSTEM = 0x1000
</snippet></ROW><ROW><id>18907037</id><snippet>FormatMessage</snippet></ROW><ROW><id>18907037</id><snippet>lpBuffer</snippet></ROW><ROW><id>18907037</id><snippet>cast</snippet></ROW><ROW><id>18907037</id><snippet>TypeError</snippet></ROW><ROW><id>18907037</id><snippet>kernel32.LocalFree</snippet></ROW><ROW><id>18907037</id><snippet>def main():
    dwFlags = FORMAT_MESSAGE_FROM_SYSTEM | FORMAT_MESSAGE_ALLOCATE_BUFFER
    lpSource = None
    dwMessageId = 5
    dwLanguageId = 0    
    lpBuffer = wintypes.LPWSTR()
    nSize = 0  # minimum size
    Arguments = None

    if not fm(dwFlags, lpSource, dwMessageId, dwLanguageId, 
              ctypes.cast(ctypes.byref(lpBuffer), wintypes.LPWSTR), 
              nSize, Arguments):
        raise ctypes.WinError()

    msg = lpBuffer.value.rstrip()
    ctypes.windll.kernel32.LocalFree(lpBuffer)

    return msg
</snippet></ROW><ROW><id>18907062</id><snippet>result = 0
for a, b in combinations(intList, 2):
    if abs(a - b) == 2:
        result += 1
print result
</snippet></ROW><ROW><id>18907510</id><snippet>self.response.headers['Access-Control-Allow-Origin'] = '*'
</snippet></ROW><ROW><id>18907538</id><snippet>import twitter

# Remember to put these values
api = twitter.Api(consumer_key="",
                  consumer_secret="",
                  access_token_key="",
                  access_token_secret="")

# Get your timeline
print api.GetHomeTimeline()
</snippet></ROW><ROW><id>18907830</id><snippet>def dump_svmlight_file_sparse(X, y, f, zero_based=True):
    X = X.sorted_indices().tocoo()

    if not zero_based:
        X.col += 1

    y = y.astype(int).astype(str)
    col = X.col.astype(str)
    dat = X.data.astype(str)

    last_row = 0
    f.write(y[0])

    for i in xrange(len(X.data)):
        while last_row &lt; X.row[i]:
            last_row += 1
            f.write('\n'+y[last_row])

        f.write(' '+col[i]+':'+dat[i])

    f.write('\n')
</snippet></ROW><ROW><id>18908027</id><snippet>.py</snippet></ROW><ROW><id>18908027</id><snippet>py -2        # launch latest 2.x version installed.
py -3        # latest 3.x
py -3.2      # run exact version
py -3.2-32   # run 32-bit version on 64-bit system.
</snippet></ROW><ROW><id>18908027</id><snippet>PY_PYTHON</snippet></ROW><ROW><id>18908027</id><snippet>py script.py</snippet></ROW><ROW><id>18908027</id><snippet>#!python2
#!python3
#!python3.2
#!python3.2-32
</snippet></ROW><ROW><id>18908058</id><snippet>@route('/api/') # use: "toi:APIInstruction_2"
@route('/api/&lt;int:urlgid&gt;/') # use: "toi:APIInstruction_1"
@route('/api/&lt;int:urlgid&gt;/&lt;int:urlper&gt;/') # use: "toi:APIInstruction_0"
def APIInstruction(self, urlgid=None, urlper=None):
    return render_template('toi-instructions.html')
</snippet></ROW><ROW><id>18908058</id><snippet>@route</snippet></ROW><ROW><id>18908058</id><snippet>@route('/api/', endpoint='apibase')
</snippet></ROW><ROW><id>18908058</id><snippet>url_for('apibase')
</snippet></ROW><ROW><id>18908067</id><snippet>#!/bin/sh

pbpaste -pboard general | python -m markdown | pbcopy
</snippet></ROW><ROW><id>18908241</id><snippet>get_appsettings()</snippet></ROW><ROW><id>18908241</id><snippet>main</snippet></ROW><ROW><id>18908241</id><snippet>#</snippet></ROW><ROW><id>18908241</id><snippet>myprog development.ini#shop_eshop
</snippet></ROW><ROW><id>18908265</id><snippet>request.POST</snippet></ROW><ROW><id>18908265</id><snippet>request.json_body</snippet></ROW><ROW><id>18908265</id><snippet>a=b&amp;c=d&amp;e=f</snippet></ROW><ROW><id>18908265</id><snippet>request.POST</snippet></ROW><ROW><id>18908265</id><snippet>a</snippet></ROW><ROW><id>18908265</id><snippet>c</snippet></ROW><ROW><id>18908265</id><snippet>e</snippet></ROW><ROW><id>18908282</id><snippet>import cookielib
import os
import urllib
import urllib2
import re
import string
from BeautifulSoup import BeautifulSoup

username = "user@email.com"
password = "password"

cookie_filename = "parser.cookies.txt"

class LinkedInParser(object):

    def __init__(self, login, password):
        """ Start up... """
        self.login = login
        self.password = password

        # Simulate browser with cookies enabled
        self.cj = cookielib.MozillaCookieJar(cookie_filename)
        if os.access(cookie_filename, os.F_OK):
            self.cj.load()
        self.opener = urllib2.build_opener(
            urllib2.HTTPRedirectHandler(),
            urllib2.HTTPHandler(debuglevel=0),
            urllib2.HTTPSHandler(debuglevel=0),
            urllib2.HTTPCookieProcessor(self.cj)
        )
        self.opener.addheaders = [
            ('User-agent', ('Mozilla/4.0 (compatible; MSIE 6.0; '
                           'Windows NT 5.2; .NET CLR 1.1.4322)'))
        ]

        # Login
        self.loginPage()

        title = self.loadTitle()
        print title

        self.cj.save()


    def loadPage(self, url, data=None):
        """
        Utility function to load HTML from URLs for us with hack to continue despite 404
        """
        # We'll print the url in case of infinite loop
        # print "Loading URL: %s" % url
        try:
            if data is not None:
                response = self.opener.open(url, data)
            else:
                response = self.opener.open(url)
            return ''.join(response.readlines())
        except:
            # If URL doesn't load for ANY reason, try again...
            # Quick and dirty solution for 404 returns because of network problems
            # However, this could infinite loop if there's an actual problem
            return self.loadPage(url, data)

    def loginPage(self):
        """
        Handle login. This should populate our cookie jar.
        """
        login_data = urllib.urlencode({
            'session_key': self.login,
            'session_password': self.password,
        })

        html = self.loadPage("https://www.linkedin.com/uas/login-submit", login_data)
        return

    def loadTitle(self):
        html = self.loadPage("http://www.linkedin.com/nhome")
        soup = BeautifulSoup(html)
        return soup.find("title")

parser = LinkedInParser(username, password)
</snippet></ROW><ROW><id>18908664</id><snippet>def wait_for_plugged_in_drive(self):
    print("Plugin an external HDD or USB stick.")

    sh.udevadm.monitor(_out=self._scan_and_terminate).wait()

def _scan_and_terminate(self, line, stdin, process):

    match = re.search('add\\s+/.*/block/sd./(sd..)', line)

    if match is not None:

        self.device = '/dev/' + match.group(1)
        print("USB stick recognized {0}".format(self.device))

        process.terminate()
        return True
</snippet></ROW><ROW><id>18908732</id><snippet>.</snippet></ROW><ROW><id>18908732</id><snippet>pattern = re.compile(regex, re.DOTALL)
</snippet></ROW><ROW><id>18908732</id><snippet>.</snippet></ROW><ROW><id>18908732</id><snippet>re.DOTALL</snippet></ROW><ROW><id>18908732</id><snippet>.</snippet></ROW><ROW><id>18908777</id><snippet>getattr(Customer, 'products')._modelclass</snippet></ROW><ROW><id>18908777</id><snippet>_</snippet></ROW><ROW><id>18908914</id><snippet>for i in xrange(10):
     print i,
</snippet></ROW><ROW><id>18908914</id><snippet>1 2 3 4 5 6 7 8 9 
</snippet></ROW><ROW><id>18908914</id><snippet> for i in xrange(10):
      print(i,end=" ")
</snippet></ROW><ROW><id>18908914</id><snippet>A '\n' character is written at the end,
unless the print statement ends with a comma.
</snippet></ROW><ROW><id>18909221</id><snippet>list</snippet></ROW><ROW><id>18909221</id><snippet>buttonCovert</snippet></ROW><ROW><id>18909221</id><snippet>self.fileList = []</snippet></ROW><ROW><id>18909221</id><snippet>__init__</snippet></ROW><ROW><id>18909221</id><snippet>Window</snippet></ROW><ROW><id>18909221</id><snippet>self.fileList = file_list</snippet></ROW><ROW><id>18909221</id><snippet>handleButton</snippet></ROW><ROW><id>18909221</id><snippet>self.buttonConvert.clicked.connect(lambda: convBB.convert(self.fileList))</snippet></ROW><ROW><id>18909221</id><snippet>self.buttonConvert.clicked.connect(self.convBB.convert(self.handleButton()))</snippet></ROW><ROW><id>18909348</id><snippet>defaultdict</snippet></ROW><ROW><id>18909348</id><snippet>&gt;&gt;&gt; from collections import defaultdict
&gt;&gt;&gt; d = defaultdict(tuple)
&gt;&gt;&gt; a = [('x', 1), ('x', 2), ('y', 1), ('y', 3), ('y', 4)]
&gt;&gt;&gt; for tup in a:
...     d[tup[0]] += (tup[1],)
...
&gt;&gt;&gt; [tuple(x for y in i for x in y) for i in d.items()]
[('y', 1, 3, 4), ('x', 1, 2)]
</snippet></ROW><ROW><id>18909669</id><snippet>django.db.backend</snippet></ROW><ROW><id>18909669</id><snippet>django_session</snippet></ROW><ROW><id>18909728</id><snippet>__init__</snippet></ROW><ROW><id>18909728</id><snippet>__init__</snippet></ROW><ROW><id>18909728</id><snippet>class Bag:
    pass
</snippet></ROW><ROW><id>18909728</id><snippet>class Bag:
    def __init__(self):
        super(Bag, self).__init__()
</snippet></ROW><ROW><id>18909728</id><snippet>__init__</snippet></ROW><ROW><id>18909728</id><snippet>__new__</snippet></ROW><ROW><id>18909728</id><snippet>__init__</snippet></ROW><ROW><id>18909728</id><snippet>class Bag:
    def __init__(self):
        pass
</snippet></ROW><ROW><id>18909852</id><snippet>match = re.search(r'connect data::[^:]+::[^:]+::[^:]+::[^:]+::[^:]+::[^:]+::end$', line)
</snippet></ROW><ROW><id>18909852</id><snippet>^</snippet></ROW><ROW><id>18909852</id><snippet>*</snippet></ROW><ROW><id>18909852</id><snippet>[^:]+</snippet></ROW><ROW><id>18910153</id><snippet>and</snippet></ROW><ROW><id>18910153</id><snippet>&amp;</snippet></ROW><ROW><id>18910153</id><snippet>r.table('backups').filter(
  (r.row['verified'] == True) &amp; r.row['id'].match("^aad")
).run(conn)
</snippet></ROW><ROW><id>18910271</id><snippet>PySlice_New()</snippet></ROW><ROW><id>18910271</id><snippet>PyObject_GetItem()</snippet></ROW><ROW><id>18910271</id><snippet>PyObject* PySlice_New(PyObject *start, PyObject *stop, PyObject *step)
PyObject* PyObject_GetItem(PyObject *o, PyObject *key)
</snippet></ROW><ROW><id>18910548</id><snippet>max</snippet></ROW><ROW><id>18910548</id><snippet>all_line_max</snippet></ROW><ROW><id>18910548</id><snippet>print(max(all_line_max))
</snippet></ROW><ROW><id>18910548</id><snippet>def blanks():
    all_line_max = []
    while True:
        try:
            strline = input()
            if strline:
                z = maxspaces(strline)
                all_line_max.append(z)
                y = ' '.join(strline.split())
                print(y)
            if strline == 'END':
                break
        except Exception:
            break
    print(max(all_line_max))
</snippet></ROW><ROW><id>18910548</id><snippet>print(z)</snippet></ROW><ROW><id>18910548</id><snippet>maxspaces()</snippet></ROW><ROW><id>18910548</id><snippet>count_max</snippet></ROW><ROW><id>18910548</id><snippet>counts</snippet></ROW><ROW><id>18910548</id><snippet>count_max</snippet></ROW><ROW><id>18910548</id><snippet>def maxspaces(x):
    max_count = count = 0

    for character in x:
        if character == ' ':
            count += 1
            if count &gt; max_count:
                max_count = count
        else:
            count = 0

    return max_count
</snippet></ROW><ROW><id>18910877</id><snippet>cursor.execute(
    "INSERT INTO userinfo (group_ID, rank_ID, login, password, first_name, last_name, email) "
    "VALUES (%s, %s, %s, %s, %s, %s, %s)",
    (groupid, rankID, userid, password, fname, lname, email))
</snippet></ROW><ROW><id>18910877</id><snippet>%s</snippet></ROW><ROW><id>18910877</id><snippet>?</snippet></ROW><ROW><id>18910934</id><snippet>input()</snippet></ROW><ROW><id>18910934</id><snippet>while</snippet></ROW><ROW><id>18910934</id><snippet>for</snippet></ROW><ROW><id>18910934</id><snippet>iter</snippet></ROW><ROW><id>18910934</id><snippet>def multiline_input(sentinel=''):
    for inp in iter(input, sentinel):
        yield inp.split()
...         
&gt;&gt;&gt; lis = list(multiline_input())
1 2 3
400 500 600
a b c

&gt;&gt;&gt; lis
[['1', '2', '3'], ['400', '500', '600'], ['a', 'b', 'c']]
</snippet></ROW><ROW><id>18910934</id><snippet>while</snippet></ROW><ROW><id>18910934</id><snippet>def multiline_input(sentinel=''):
    while True:
        inp = input()
        if inp != sentinel:
            yield inp.split()
        else:
            break
...             
&gt;&gt;&gt; lis = list(multiline_input())
1 2
3 4 5
6 7 8 9
10

&gt;&gt;&gt; lis
[['1', '2'], ['3', '4', '5'], ['6', '7', '8', '9'], ['10']]
</snippet></ROW><ROW><id>18910946</id><snippet>Binding</snippet></ROW><ROW><id>18911315</id><snippet>//table[@attr='value']/tbody/tr[2]//p</snippet></ROW><ROW><id>18911315</id><snippet>find_elements_by_xpath()</snippet></ROW><ROW><id>18911315</id><snippet>elems.get_attribute()</snippet></ROW><ROW><id>18911315</id><snippet>elems = wd.find_elements_by_xpath("/your/xpath")
for el in elems:
    print '\n' + el.get_attribute('innerHTML').encode("utf-8", 'ignore')
</snippet></ROW><ROW><id>18911542</id><snippet>class myClass
    _things = []
    params = []

    def __init__(self, params):
      self.params = params

    @property
    def things(self):
      if not self._things:
          self._things = do_a_ton_stuff()
      return self._things

    def get_things():
      return self.things

    def get_some_things():
      return apply_a_filter(self.things)

    def get_first_thing():
      return self.things[0]

    def get_last_thing():
      return self.things[-1]
</snippet></ROW><ROW><id>18911709</id><snippet>tokenize()</snippet></ROW><ROW><id>18911709</id><snippet>symbol()</snippet></ROW><ROW><id>18911709</id><snippet>symbol</snippet></ROW><ROW><id>18911709</id><snippet>else:
    symbol = symbol_table.get(operator)
    if not symbol:
        raise SyntaxError("Unknown operator")
    yield symbol()
</snippet></ROW><ROW><id>18911709</id><snippet>(+ (literal 1) (literal 2))
</snippet></ROW><ROW><id>18911774</id><snippet>from django import forms
from django.contrib import admin


class UserChoiceField(forms.ModelChoiceField):
    def label_from_instance(self, obj):
        return obj.last_name

# Now you have to hook this field up to lab admin.

class LabAdmin(admin.ModelAdmin):
    def formfield_for_foreignkey(self, db_field, request=None, **kwargs):
        if db_field.name == 'responsible':
            kwargs['form_class'] = UserChoiceField
        return super(LabAdmin, self).formfield_for_foreignkey(db_field, request, **kwargs)
</snippet></ROW><ROW><id>18912527</id><snippet>def calc(x):
    newname = name.replace("x", str(x))
    calc.__name__ = newname
    return eval(name)

calc.__name__ = name
return calc
</snippet></ROW><ROW><id>18912527</id><snippet>str.replace()</snippet></ROW><ROW><id>18912527</id><snippet>x</snippet></ROW><ROW><id>18912527</id><snippet>x</snippet></ROW><ROW><id>18912527</id><snippet>poly()</snippet></ROW><ROW><id>18912527</id><snippet>x</snippet></ROW><ROW><id>18912527</id><snippet>x</snippet></ROW><ROW><id>18912527</id><snippet>x</snippet></ROW><ROW><id>18912527</id><snippet>calc()</snippet></ROW><ROW><id>18912527</id><snippet>def calc(x):
    return eval(name)
</snippet></ROW><ROW><id>18912527</id><snippet>name = ''</snippet></ROW><ROW><id>18912527</id><snippet>poly()</snippet></ROW><ROW><id>18912527</id><snippet>&gt;&gt;&gt; p = poly((1,2,3))
&gt;&gt;&gt; p
&lt;function 3 * x**2 + 2 * x + 1 at 0x10ecf5488&gt;
&gt;&gt;&gt; p(3)
34
&gt;&gt;&gt; p
&lt;function 3 * 3**2 + 2 * 3 + 1 at 0x10ecf5488&gt;
</snippet></ROW><ROW><id>18912592</id><snippet>root = etree.parse("XML/epg.xml")
for i in root.findall("item"):
    p = [i.find(n).text for n in ("program", "start", "duration")]
    # now you get list with values of parameters

    postgres = ('INSERT INTO epg_live (program, start, duration) VALUES (%s, %s, %s)', p)
    cursor.execute(parser,postgres)
    cursor.commit()
</snippet></ROW><ROW><id>18912592</id><snippet>channel_id</snippet></ROW><ROW><id>18912879</id><snippet>step'' or</snippet></ROW><ROW><id>18913195</id><snippet>QAbstractItemModel</snippet></ROW><ROW><id>18913195</id><snippet>enum Columns
{
    COL_ID,
    COL_NAME
}

QComboBox *combo = new QComboBox;
combo-&gt;setModel(model);
combo-&gt;setModelColumn(COL_NAME)
</snippet></ROW><ROW><id>18913195</id><snippet>QComboBox *combo = new QComboBox;
combo-&gt;addItem(name, id);
</snippet></ROW><ROW><id>18913195</id><snippet>QString id = combo-&gt;itemData(index, Qt::UserRole).toString();
</snippet></ROW><ROW><id>18913212</id><snippet>pass</snippet></ROW><ROW><id>18913212</id><snippet>pass</snippet></ROW><ROW><id>18913469</id><snippet>&gt;&gt;&gt; (df[1] * 1) + (df[2] * 2) + (df[3] * 3) + (df[4] * 4) + (df[5] * 5)
MovieTitle
1-900 (1994)              13
101 Dalmatians (1996)    317
12 Angry Men (1957)      543
187 (1997)               124
dtype: int64
</snippet></ROW><ROW><id>18913469</id><snippet>&gt;&gt;&gt; weights = np.array([1,2,3,4,5])
&gt;&gt;&gt; (df * weights).sum(axis=1)
MovieTitle
1-900 (1994)              13
101 Dalmatians (1996)    317
12 Angry Men (1957)      543
187 (1997)               124
dtype: int64
</snippet></ROW><ROW><id>18913469</id><snippet>&gt;&gt;&gt; df['score'] = (df * weights).sum(axis=1)
</snippet></ROW><ROW><id>18913679</id><snippet>session.query(SEC_RSS_Model).join(SEC_RSSL_Model.CIK_Table).filter(CIK_Model.ticker == 'YHOO')
</snippet></ROW><ROW><id>18913811</id><snippet>import logging

def get_logger(    
        LOG_FORMAT     = '%(asctime)s %(name)-12s %(levelname)-8s %(message)s',
        LOG_NAME       = '',
        LOG_FILE_INFO  = 'file.log',
        LOG_FILE_ERROR = 'file.err'):

    log           = logging.getLogger(LOG_NAME)
    log_formatter = logging.Formatter(LOG_FORMAT)

    # comment this to suppress console output
    stream_handler = logging.StreamHandler()
    stream_handler.setFormatter(log_formatter)
    log.addHandler(stream_handler)

    file_handler_info = logging.FileHandler(LOG_FILE_INFO, mode='w')
    file_handler_info.setFormatter(log_formatter)
    file_handler_info.setLevel(logging.INFO)
    log.addHandler(file_handler_info)

    file_handler_error = logging.FileHandler(LOG_FILE_ERROR, mode='w')
    file_handler_error.setFormatter(log_formatter)
    file_handler_error.setLevel(logging.ERROR)
    log.addHandler(file_handler_error)

    log.setLevel(logging.INFO)

    return log

def main():

    my_logger = get_logger()

    my_logger.info('This is an INFO message')
    my_logger.warning('This is a WARNING message')
    my_logger.error('This is an ERROR message')


if __name__ == '__main__':
    main()
</snippet></ROW><ROW><id>18913811</id><snippet>$ python test_log.py
2013-09-20 11:52:07,096 root         INFO     This is an INFO message
2013-09-20 11:52:07,096 root         WARNING  This is a WARNING message
2013-09-20 11:52:07,096 root         ERROR    This is an ERROR message

$ cat file.log
2013-09-20 11:52:07,096 root         INFO     This is an INFO message
2013-09-20 11:52:07,096 root         WARNING  This is a WARNING message
2013-09-20 11:52:07,096 root         ERROR    This is an ERROR message

$ cat file.err
2013-09-20 11:52:07,096 root         ERROR    This is an ERROR message
</snippet></ROW><ROW><id>18913994</id><snippet>stusr = int(su.total)
if stusr:             # (all non-zero integer values are true)
    print("Yay, stusr is nonzero!")
else:
    print("Wha? But su.total is {}!".format(repr(su.total)))
</snippet></ROW><ROW><id>18914234</id><snippet>prettytable</snippet></ROW><ROW><id>18914234</id><snippet>from prettytable import PrettyTable

# Initialize the object passing the table headers
t = PrettyTable(['A', 'B', 'C'])

t.align='l'
t.border=False

t.add_row([111,222,333])
t.add_row([444,555,666])
t.add_row(['longer text',777,'even longer text here'])

print str(t)
</snippet></ROW><ROW><id>18914234</id><snippet> A            B    C
 111          222  333
 444          555  666
 longer text  777  even longer text here
</snippet></ROW><ROW><id>18914365</id><snippet>def hello_function():
    """Returns 'hello' string."""
    return 'hello'
</snippet></ROW><ROW><id>18914844</id><snippet>info</snippet></ROW><ROW><id>18914844</id><snippet>def main()</snippet></ROW><ROW><id>18914844</id><snippet>info</snippet></ROW><ROW><id>18914844</id><snippet>main()</snippet></ROW><ROW><id>18915033</id><snippet>deque</snippet></ROW><ROW><id>18915033</id><snippet>collections</snippet></ROW><ROW><id>18915033</id><snippet>deque</snippet></ROW><ROW><id>18915033</id><snippet>from collections import deque
from itertools import islice

def get_tuples(gen, n):
    q = deque(islice(gen, n))   # pre-load the queue with `n` values
    while q:                    # run until the queue is empty
        yield tuple(q)          # yield a tuple copied from the current queue
        q.popleft()             # remove the oldest value from the queue
        try:
            q.append(next(gen)) # try to add a new value from the generator
        except StopIteration:
            pass                # but we don't care if there are none left
</snippet></ROW><ROW><id>18915312</id><snippet>global total</snippet></ROW><ROW><id>18915312</id><snippet>def grades_sum(scores):
    global total
    for x in scores:
        total += x
</snippet></ROW><ROW><id>18915312</id><snippet>sum()</snippet></ROW><ROW><id>18915312</id><snippet>grades = [100, 100, 90, 40, 80, 100, 85, 70, 90, 65, 90, 85, 50.5]

print sum(grades)  # prints 1045.5
</snippet></ROW><ROW><id>18915312</id><snippet>total</snippet></ROW><ROW><id>18915312</id><snippet>grades = [100, 100, 90, 40, 80, 100, 85, 70, 90, 65, 90, 85, 50.5]


def grades_sum(scores):
    total = 0
    for x in scores:
        total += x
    return total


print grades_sum(grades)  # prints 1045.5
</snippet></ROW><ROW><id>18915404</id><snippet>print("{0:,g}".format(number))
</snippet></ROW><ROW><id>18915420</id><snippet>'Jalape\xc3\xb1o'</snippet></ROW><ROW><id>18915420</id><snippet>'Jalapeño'</snippet></ROW><ROW><id>18915420</id><snippet>'\xc3\xb1o'</snippet></ROW><ROW><id>18915420</id><snippet>'ñ'</snippet></ROW><ROW><id>18915420</id><snippet>100</snippet></ROW><ROW><id>18915420</id><snippet>100</snippet></ROW><ROW><id>18915420</id><snippet>4</snippet></ROW><ROW><id>18915672</id><snippet>def F_analytic(k, m, c, f=f):  # notice the f=f here!
    F_t = k*m*c*f 
    return F_t
</snippet></ROW><ROW><id>18915842</id><snippet>&gt;&gt;&gt; df = pd.DataFrame({'a': a, 'b': b})
&gt;&gt;&gt; df.groupby(['a', 'b']).groups
{(1, 1): [0, 1, 2],
 (1, 2): [3],
 (1, 3): [4, 5],
 (2, 24): [6],
 (3, 1): [7, 8, 9, 10],
 (4, 5): [11, 12],
 (4, 7): [13],
 (4, 9): [14]}
</snippet></ROW><ROW><id>18915842</id><snippet>&gt;&gt;&gt; df.groupby(['a', 'b']).groups[(1, 1)]
[0, 1, 2]
&gt;&gt;&gt; df.groupby(['a', 'b']).groups[(2, 24)]
[6]
</snippet></ROW><ROW><id>18915842</id><snippet>&gt;&gt;&gt; res = df.groupby(['a', 'b']).apply(lambda group: group.index.values)
&gt;&gt;&gt; res[1, 1]
array([0, 1, 2])
&gt;&gt;&gt; res[2, 24]
array([6])
</snippet></ROW><ROW><id>18916047</id><snippet>from twisted.internet.protocol import Factory

factory = Factory.forProtocol(YourProtocol, reactor)
</snippet></ROW><ROW><id>18916047</id><snippet>from twisted.internet.protocol import ClientCreator

ClientCreator(reactor, YourProtocol, reactor).connectTCP(...)
</snippet></ROW><ROW><id>18916047</id><snippet>reactor</snippet></ROW><ROW><id>18916108</id><snippet>import re

print(re.sub(r"([\n ])\1*", r"\1", a))
#&gt;&gt;&gt; ababa
#&gt;&gt;&gt;  ab ba 
#&gt;&gt;&gt;  xxxxxxxxxxxxxxxxxxx
#&gt;&gt;&gt; that is it followed by a lot of spaces .
#&gt;&gt;&gt;  no dot at the end
</snippet></ROW><ROW><id>18916108</id><snippet>re.sub(matcher, replacement, target_string)</snippet></ROW><ROW><id>18916108</id><snippet>r"([\n ])\1*</snippet></ROW><ROW><id>18916108</id><snippet>([\n ]) → match either "\n" or " " and put it in a group (#1)
\1*     → match whatever group #1 matched, 0 or more times
</snippet></ROW><ROW><id>18916108</id><snippet>\1 → group #1
</snippet></ROW><ROW><id>18916108</id><snippet>max(len(match.group()) for match in re.finditer(r"([\n ])\1*", a))
</snippet></ROW><ROW><id>18916108</id><snippet>max</snippet></ROW><ROW><id>18916200</id><snippet>from bs4 import BeautifulSoup as bs

xml = """&lt;Test_input_data&gt;
    &lt;web_pins type="list" orientation="column"&gt;
        &lt;web_pin_id type="column_definition" data_type="int" index="1"/&gt;
        &lt;pin_center_node type="column_definition" data_type="int" index="2"/&gt;
        &lt;journal_center_node type="column_definition" data_type="int" index="3"/&gt;
         1  1012  5011
         2  2012  5012
         3  3012  5013
    &lt;/web_pins&gt;
&lt;/Test_input_data&gt;"""
soup = bs(xml)
tag = soup.find("web_pins")
text = tag.text #Here you get your text!
##P.S. you can also use:
soup.web_pins.text
</snippet></ROW><ROW><id>18916200</id><snippet>from HTMLParser import HTMLParser

class MyHTMLParser(HTMLParser):

    data = ""
    search_tag = None
    grab_data = False

    def feed(self, data, tag_to_search_for):

        self.search_tag = tag_to_search_for
        HTMLParser.feed(self, data)

    def handle_starttag(self, tag, attrs):

        if tag == self.search_tag:
            self.grab_data = 1

    def handle_data(self, data):

        if self.grab_data:
            self.data = data

    def handle_endtag(self, tag):

        if tag == self.search_tag:
            self.grab_data = 0

xml = """&lt;Test_input_data&gt;
    &lt;web_pins type="list" orientation="column"&gt;
        &lt;web_pin_id type="column_definition" data_type="int" index="1"/&gt;
        &lt;pin_center_node type="column_definition" data_type="int" index="2"/&gt;
        &lt;journal_center_node type="column_definition" data_type="int" index="3"/&gt;
         1  1012  5011
         2  2012  5012
         3  3012  5013
    &lt;/web_pins&gt;
&lt;/Test_input_data&gt;"""

parser = MyHTMLParser()
parser.feed(xml, "web_pins")
print parser.data #Ta-daa!
</snippet></ROW><ROW><id>18916457</id><snippet>read_csv</snippet></ROW><ROW><id>18916457</id><snippet>def gen():
    lines = [
        'col1,col2\n',
        'foo,bar\n',
        'foo,baz\n',
        'bar,baz\n'
    ]
    for line in lines:
        yield line

class Reader(object):
    def __init__(self, g):
        self.g = g
    def read(self, n=0):
        try:
            return next(self.g)
        except StopIteration:
            return ''
</snippet></ROW><ROW><id>18916457</id><snippet>read_csv</snippet></ROW><ROW><id>18916457</id><snippet>&gt;&gt;&gt; pd.read_csv(Reader(gen()))
  col1 col2
0  foo  bar
1  foo  baz
2  bar  baz
</snippet></ROW><ROW><id>18917405</id><snippet>for</snippet></ROW><ROW><id>18917405</id><snippet>data = {'John': {'Maths': 40, 'Eng':50, 'Phy': 67, 'Chem': 78},
        'Kate': {'Maths': 98, 'Chem': 83},
        'Julia': {'Phy': 76, 'Eng': 67, 'Maths': 56, 'Bio': 78},
        'Sam': {'Phy': 23, 'Eng': 67, 'Chem': 98, 'Maths': 56}}

print "name\tmark\n------------"            
for name, marks in data.iteritems():
    if not 'Bio' in marks:
        print "{name}\t{mark}".format(name=name, mark=marks.get('Eng', '---'))
</snippet></ROW><ROW><id>18917405</id><snippet>name    mark
------------
Sam     67
John    50
Kate    ---
</snippet></ROW><ROW><id>18917405</id><snippet>zip</snippet></ROW><ROW><id>18917405</id><snippet>zip(*[(k,v['Eng']) for k,v in data.iteritems() if not 'Bio' in v and 'Eng' in v])
</snippet></ROW><ROW><id>18917405</id><snippet>[('Sam', 'John'), (67, 50)]
</snippet></ROW><ROW><id>18917471</id><snippet>/etc/apache2/sites-available</snippet></ROW><ROW><id>18917471</id><snippet>/etc/apache2/sites-enabled</snippet></ROW><ROW><id>18917471</id><snippet>a2ensite</snippet></ROW><ROW><id>18917471</id><snippet>a2dissite</snippet></ROW><ROW><id>18917535</id><snippet>python myfile.py</snippet></ROW><ROW><id>18917612</id><snippet>tick</snippet></ROW><ROW><id>18917612</id><snippet>rest</snippet></ROW><ROW><id>18917612</id><snippet>after</snippet></ROW><ROW><id>18917612</id><snippet>bind</snippet></ROW><ROW><id>18917612</id><snippet>()</snippet></ROW><ROW><id>18917612</id><snippet>self.after(1000, self.tick())
</snippet></ROW><ROW><id>18917612</id><snippet>self.after(1000, self.tick)
</snippet></ROW><ROW><id>18917612</id><snippet>initialize</snippet></ROW><ROW><id>18917612</id><snippet>tick</snippet></ROW><ROW><id>18917612</id><snippet>self.bind('&lt;KEY&gt;',self.reset())
self.bind('&lt;Button-1&gt;',self.reset())
</snippet></ROW><ROW><id>18917612</id><snippet>self.bind('&lt;Key&gt;',self.reset) # note also your type here: it's Key not KEY
self.bind('&lt;Button-1&gt;',self.reset)
</snippet></ROW><ROW><id>18918049</id><snippet>if response.status_int == 404:
    start_response('301 Redirect', [('Location', 'http://www.example.com/'),])
    return []
else:
    return response(environ, start_response)
</snippet></ROW><ROW><id>18918058</id><snippet>println()</snippet></ROW><ROW><id>18918058</id><snippet>flush()</snippet></ROW><ROW><id>18918178</id><snippet>myId1 = wx.NewId()
myId2 = wx.NewId()
wx.StaticText(self.panel, id=myId1, label='test', pos=(10, 30))
wx.StaticText(self.panel, id=myId2, label='test', pos=(10, 60))
</snippet></ROW><ROW><id>18918178</id><snippet>import wx    

class Mainframe(wx.Frame):
    myId1 = wx.NewId()
    myId2 = wx.NewId()

    def __init__(self, parent):
        wx.Frame.__init__(self, parent)
        self.panel = wx.Panel(self)

        sizer = wx.BoxSizer(wx.VERTICAL)

        txt1 = wx.StaticText(self.panel, id=self.myId1, 
                             label='test', name="test1")
        txt2 = wx.StaticText(self.panel, id=self.myId2, 
                             label='test', name="test2")

        btn = wx.Button(self.panel, label="Find by id")
        btn.Bind(wx.EVT_BUTTON, self.onFindById)
        btn2 = wx.Button(self.panel, label="Find by name")
        btn2.Bind(wx.EVT_BUTTON, self.onFindByName)

        sizer.Add(txt1, 0, wx.ALL, 5)
        sizer.Add(txt2, 0, wx.ALL, 5)
        sizer.Add(btn, 0, wx.ALL, 5)
        sizer.Add(btn2, 0, wx.ALL, 5)

        self.panel.SetSizer(sizer)

    #----------------------------------------------------------------------
    def onFindById(self, event):
        """"""
        print "myId1 = " + str(self.myId1)
        print "myId2 = " + str(self.myId2)

        txt1 = wx.FindWindowById(self.myId1)
        print type(txt1)

        txt2 = wx.FindWindowById(self.myId2)
        print type(txt2)

    #----------------------------------------------------------------------
    def onFindByName(self, event):
        """"""
        txt1 = wx.FindWindowByName("test1")
        txt2 = wx.FindWindowByName("test2")

if __name__ == '__main__':
        app = wx.App(False)
        frame = Mainframe(None)
        frame.Show()
        app.MainLoop()
</snippet></ROW><ROW><id>18918365</id><snippet>import re
re.sub(r'&lt;[^&gt;]+&gt;', '', row)
</snippet></ROW><ROW><id>18918810</id><snippet>&gt;&gt;&gt; l = [1,2,3,4,5,6]
&gt;&gt;&gt; 
&gt;&gt;&gt; ''.join(map(str, l))
'123456'
</snippet></ROW><ROW><id>18918810</id><snippet>for</snippet></ROW><ROW><id>18918810</id><snippet>for i in a</snippet></ROW><ROW><id>18918810</id><snippet>i</snippet></ROW><ROW><id>18918810</id><snippet>a</snippet></ROW><ROW><id>18918810</id><snippet>a</snippet></ROW><ROW><id>18918810</id><snippet>1</snippet></ROW><ROW><id>18918810</id><snippet>i</snippet></ROW><ROW><id>18918810</id><snippet>i</snippet></ROW><ROW><id>18918810</id><snippet>a[i]</snippet></ROW><ROW><id>18918810</id><snippet>a = [1,2,3]</snippet></ROW><ROW><id>18918810</id><snippet>a</snippet></ROW><ROW><id>18918810</id><snippet>str.join()</snippet></ROW><ROW><id>18918810</id><snippet>map()</snippet></ROW><ROW><id>18918953</id><snippet>def nested_linked(l):
    d = {a: b for a,b in l}
    rv = []
    while d:
        k = [k for k in d.keys() if k not in d.values()][0]
        rrv = [ k ]
        while k in d:
            nk = d[k]
            del d[k]
            k = nk
            rrv.append( nk )
       rv.append( rrv )
   return rv
</snippet></ROW><ROW><id>18918960</id><snippet>MyDjangoItem</snippet></ROW><ROW><id>18918960</id><snippet># my_spider.py
class MySpider(CrawlSpider):
    name = 'my_spider'
    ...

    def parse(self, response):
        x = HtmlXPathSelector(response)

        headings = x.select('//h2/text()').extract()
        for h in headings:
            item = MyDjangoItem()
            item['name'] = h
            yield item

        url = 'http://example.com/next'  # I have custom rules for constructing (not extracting) next url
        yield Request(url, callback=self.parse)
</snippet></ROW><ROW><id>18919011</id><snippet>frame.Close()
</snippet></ROW><ROW><id>18919011</id><snippet>import wx

class MyFrame(wx.Frame):
    """Frame class."""

    def  __init__(self, parent=None, id=-1,
                  pos=wx.DefaultPosition,
                  title='Hello, Tsukuyo!', size=(200,100)):
        """Create a Frame instanc."""
        wx.Frame.__init__(self, parent, id, title, pos, size)

        try:
            with open('Tsukuyo.jpg') as fh:
                data = fh.read()
        except IOError:
            dlg = wx.MessageDialog(self, "Can not open image 'Tsukuyo.jpg'.",
                                   "Error", wx.OK)
            dlg.ShowModal()
            dlg.Destroy()

            self.Close()

class MyApp(wx.App):
    """Application class."""

    def OnInit(self):
        frame = MyFrame()
        frame.Show()
        return True

def main():
    app = MyApp()

if __name__ == "__main__":
    main()
</snippet></ROW><ROW><id>18919024</id><snippet>re.sub</snippet></ROW><ROW><id>18919024</id><snippet>def replaceToken(match):
    token = match.group()
    if len(token) == 3:
        return token
    else:
        return '[' + token + ']'

re.sub(r'(\[\[\])|(\[\]\])|\[|\]', replaceToken, 'foo[[bar]bloh')
</snippet></ROW><ROW><id>18919024</id><snippet>re.sub(r'(\[\[\])|(\[\]\])|\[|\]',
       lambda x: x.group() if len(x.group()) == 3
                           else '[' + x.group() + ']', 'foo[[]bar]bloh')
</snippet></ROW><ROW><id>18919024</id><snippet>'foo[[bar]bloh' → 'foo[[][[]bar[]]bloh'
'foo[[]bar]bloh' → 'foo[[]bar[]]bloh'
</snippet></ROW><ROW><id>18919063</id><snippet>&gt;&gt;&gt; l = [754, 753.554, '', '', '', '', '', 653.455, '',
         '', 258, 235.6464, '' , '', '']
&gt;&gt;&gt; filter(None, [i for i, j in zip(l, l[1:] + ['']) if j == ''])
[753.554, 653.455, 235.6464]
</snippet></ROW><ROW><id>18919074</id><snippet>str</snippet></ROW><ROW><id>18919074</id><snippet>repr</snippet></ROW><ROW><id>18919074</id><snippet>str</snippet></ROW><ROW><id>18919074</id><snippet>{"foo", "22"}</snippet></ROW><ROW><id>18919074</id><snippet>{foo: 22}</snippet></ROW><ROW><id>18919074</id><snippet>import datetime

my_dict = {'date': datetime.date(2018, 9, 30),'Number': u'4929000000006'}

def substring(item):
    if isinstance(item, unicode):
        return repr(item)[1:]

    if isinstance(item, datetime.date):
        return repr(str(item))

    return repr(item)

def dict_substrings(dict):
    yield u"{"

    if my_dict:
        nameitems = my_dict.iteritems()
        name, item = next(nameitems)

        yield substring(name)
        yield u": "
        yield substring(item)

        for name, item in nameitems:
            yield u", "

            yield substring(name)
            yield u": "
            yield substring(item)

    yield u"}"

def dict_representation(dict):
    return "".join(dict_substrings(dict))

print(dict_representation(my_dict))
</snippet></ROW><ROW><id>18919074</id><snippet>substring</snippet></ROW><ROW><id>18919074</id><snippet>O(n)</snippet></ROW><ROW><id>18919653</id><snippet>import djcelery djcelery.setup_loader()</snippet></ROW><ROW><id>18919791</id><snippet>from threading import Timer
import thread

def run_with_timeout( timeout, func, *args, **kwargs ):
    """ Function to execute a func for the maximal time of timeout.
    [IN]timeout        Max execution time for the func
    [IN]func           Reference of the function/method to be executed
    [IN]args &amp; kwargs  Will be passed to the func call
    """
    try:
        # Raises a KeyboardInterrupt if timer triggers
        timeout_timer = Timer( timeout, thread.interrupt_main )
        timeout_timer.start()
        return func( *args, **kwargs )
    except KeyboardInterrupt:
        print "run_with_timeout timed out, when running '%s'" %  func.__name__
        #Normally I raise here my own exception
    finally:
        timeout_timer.cancel()
</snippet></ROW><ROW><id>18919791</id><snippet>timeout = 5.2 #Time in sec
for i in range(len(arr1)):
    res1 = run_with_timeout(timeout, foo1,arr1[i]))
</snippet></ROW><ROW><id>18919865</id><snippet>def add_page_to_index(index, url, content):
    [add_to_index(index, word, url) for word in content.split()]
</snippet></ROW><ROW><id>18919865</id><snippet>def add_page_to_index(index, url, content):
    words = content.split()
    map(lambda word: add_to_index(index, word, url), words)
</snippet></ROW><ROW><id>18919888</id><snippet>import threading, time

# Job
def Job(i, stop_event):
  print
  print 'Start CountJob nr:', i
  print
  while(not stop_event.is_set()):
    pass
  print 'Job', i, 'exiting'


def SuperJob(stop_event):
  for i in range(0,400):
    p = threading.Thread(target=Job, args=(i, stop_event))
    p.daemon = True
    p.start()

    if stop_event.is_set():
      return

# run the Jobs
stop_event = threading.Event()
p = threading.Thread(target=SuperJob, args=(stop_event,))
p.start()
time.sleep(10)
stop_event.set()
</snippet></ROW><ROW><id>18919965</id><snippet>In [37]: df['X.8'] = df['X.8'].str.replace('i','j').apply(lambda x: np.complex(x))

In [38]: df
Out[38]: 
          X.1         X.2  X.3   X.4    X.5  X.6  X.7                X.8
0   564991.15  7371277.89    0     1   1530  0.1    2   (92.289+151.96j)
1   564991.15  7371277.89    0     1   8250  0.1    2   (104.22-43.299j)
2   564991.15  7371277.89    0     1  20370  0.1    2    (78.76-113.52j)
3   564991.15  7371277.89    0     1  33030  0.1    2    (27.141-154.1j)
4   564991.15  7371277.89    0     1  47970  0.1    2     (-30.012-175j)
5   564991.15  7371277.89    0     1  63090  0.1    2  (-118.52-342.43j)
6   564991.15  7371277.89    0     1  93090  0.1    2  (-321.02-1541.5j)
7   564991.15  7371277.89    0     2   1530  0.1    2   (118.73+154.05j)
8   564991.15  7371277.89    0     2   8250  0.1    2   (122.13-45.571j)
9   564991.15  7371277.89    0     2  20370  0.1    2   (93.014-116.03j)
10  564991.15  7371277.89    0     2  33030  0.1    2    (38.56-155.08j)
11  564991.15  7371277.89    0     2  47970  0.1    2  (-20.653-173.83j)
12  564991.15  7371277.89    0     2  63090  0.1    2  (-118.41-340.58j)
13  564991.15  7371277.89    0     2  93090  0.1    2    (-378.71-1554j)
14  564990.35  7371279.17    0  1785   1530  0.1    2   (-15.441+118.3j)
15  564990.35  7371279.17    0  1785   8250  0.1    2  (-7.1735-76.487j)
16  564990.35  7371279.17    0  1785  20370  0.1    2  (-33.847-145.99j)
17  564990.35  7371279.17    0  1785  33030  0.1    2  (-86.035-185.46j)
18  564990.35  7371279.17    0  1785  47970  0.1    2  (-143.37-205.23j)
19  564990.35  7371279.17    0  1785  63090  0.1    2  (-234.67-370.43j)
20  564990.35  7371279.17    0  1785  93090  0.1    2  (-458.69-1561.4j)
21  564990.36  7371279.17    0  1786   1530  0.1    2    (36.129+128.4j)
22  564990.36  7371279.17    0  1786   8250  0.1    2   (39.406-69.607j)
23  564990.36  7371279.17    0  1786  20370  0.1    2   (10.495-139.48j)
24  564990.36  7371279.17    0  1786  33030  0.1    2  (-43.535-178.19j)
25  564990.36  7371279.17    0  1786  47970  0.1    2  (-102.28-196.76j)
26  564990.36  7371279.17    0  1786  63090  0.1    2   (-199.32-362.1j)
27  564990.36  7371279.17    0  1786  93090  0.1    2  (-458.09-1565.6j)

In [39]: df.dtypes
Out[39]: 
X.1       float64
X.2       float64
X.3       float64
X.4         int64
X.5         int64
X.6       float64
X.7         int64
X.8    complex128
dtype: object

In [40]: df1 = df.groupby(["X.1","X.2","X.5"])["X.8"].mean().reset_index()

In [41]:  df.groupby(["X.1","X.2","X.5"])["X.8"].mean().reset_index()
Out[41]: 
          X.1         X.2    X.5                  X.8
0   564990.35  7371279.17   1530     (-15.441+118.3j)
1   564990.35  7371279.17   8250    (-7.1735-76.487j)
2   564990.35  7371279.17  20370    (-33.847-145.99j)
3   564990.35  7371279.17  33030    (-86.035-185.46j)
4   564990.35  7371279.17  47970    (-143.37-205.23j)
5   564990.35  7371279.17  63090    (-234.67-370.43j)
6   564990.35  7371279.17  93090    (-458.69-1561.4j)
7   564990.36  7371279.17   1530      (36.129+128.4j)
8   564990.36  7371279.17   8250     (39.406-69.607j)
9   564990.36  7371279.17  20370     (10.495-139.48j)
10  564990.36  7371279.17  33030    (-43.535-178.19j)
11  564990.36  7371279.17  47970    (-102.28-196.76j)
12  564990.36  7371279.17  63090     (-199.32-362.1j)
13  564990.36  7371279.17  93090    (-458.09-1565.6j)
14  564991.15  7371277.89   1530  (105.5095+153.005j)
15  564991.15  7371277.89   8250    (113.175-44.435j)
16  564991.15  7371277.89  20370    (85.887-114.775j)
17  564991.15  7371277.89  33030    (32.8505-154.59j)
18  564991.15  7371277.89  47970  (-25.3325-174.415j)
19  564991.15  7371277.89  63090  (-118.465-341.505j)
20  564991.15  7371277.89  93090  (-349.865-1547.75j)
</snippet></ROW><ROW><id>18919969</id><snippet>print "This program will compute the comission earned for the month based on your sales for the month."
comission_rate = float(raw_input("what is your comission rate percent? "))
sales = float(raw_input("How many sales did you have this month? "))
total_com = sales * (comission_rate / 100)
print " your total comission for the month is "
print total_com
</snippet></ROW><ROW><id>18920011</id><snippet>np.lexsort.</snippet></ROW><ROW><id>18920011</id><snippet>data=np.array(((3,0,0,.24),(4,1,1,.41),(2,1,1,.63),(1,1,3,.38))) #imagine rows of a spreadsheet
#now do sortrows(data,[3,-4])
ix=np.lexsort((data[:,3][::-1],data[:,2])) 
#this yields [0,2,1,3]

#note that lexsort sorts first from the last row, so sort keys are in reverse order

data[ix]
</snippet></ROW><ROW><id>18920047</id><snippet>sorted</snippet></ROW><ROW><id>18920047</id><snippet>&gt;&gt;&gt; def threshold(a, x):
...     return sorted(item for item in a if item &gt;= x)
... 
&gt;&gt;&gt; threshold([1,3,2,5,4], 3)
[3, 4, 5]
</snippet></ROW><ROW><id>18920245</id><snippet>a = 10

def some_function(a,b):
  do_something
</snippet></ROW><ROW><id>18920245</id><snippet>a = 10</snippet></ROW><ROW><id>18920419</id><snippet>__getattribute__</snippet></ROW><ROW><id>18920419</id><snippet>class MyUsefulClass(object):

    a = ValidatedAttribute(int)
</snippet></ROW><ROW><id>18920419</id><snippet>ValidatedAttribute</snippet></ROW><ROW><id>18920419</id><snippet>def __init__(self, key, default):

    self.key = key
    self.kind = type(default)
    self.default = default

def __get__(self, instance, owner):
    if self.key not in instance.__dict__:
        return self.default
    return instance.__dict__[self.key]
</snippet></ROW><ROW><id>18920432</id><snippet>decorator</snippet></ROW><ROW><id>18920432</id><snippet>def workaround_func():
    def decorator(fn):
        def case_decorator(*args, **kwargs):
            if args[1] == 2:
                print('The second argument is a 2!')
            return fn(*args, **kwargs)
        return case_decorator
    return decorator

@workaround_func()
def my_func(arg1, arg2, kwarg1=None):
    print('arg1: {} arg2: {}, kwargs: {}'.format(arg1, arg2, kwarg1))
</snippet></ROW><ROW><id>18920432</id><snippet>from decorator import decorator

@decorator
def workaround_decorator(f, *args, **kwargs):
    if args[1] == 2:
        print('The second argument is 2!')
    return f(*args, **kwargs)

@workaround_decorator
def my_func(arg1, arg2, kwarg1=None):
    print('arg1: {} arg2: {}, kwargs: {}'.format(arg1, arg2, kwarg1))
</snippet></ROW><ROW><id>18920502</id><snippet>JsonDocument</snippet></ROW><ROW><id>18920502</id><snippet># Tested with spyne.__version__=='2.10.9'
class warwarukDocument(JsonDocument):
    """An implementation of the json protocol
       with the method name stored in the URL,
       not the document."""

    def create_in_document(self, ctx, in_string_encoding=None):
        """ Sets ``ctx.in_document`` using ``ctx.in_string``."""
        assert ctx.transport.type.endswith('http'), \
               "This protocol requires an http transport, not %r (in %r)" \
                   % (ctx.transport.type, ctx.transport)

        super(warwarukDocument, self).create_in_document(ctx, in_string_encoding)
        # Not 100% sure where to find the URL path
        try:
            # Works for twisted
            uri = ctx.transport.req.uri
        except AttributeError:
            # Works for WSGI
            uri = ctx.transport.req['PATH_INFO']
        uri = re.sub(r'.*/', '', uri)
        ctx.in_document = { uri : ctx.in_document }


application = Application([HelloWorldService],
    tns='spyne.examples.hello',
    in_protocol=warwarukDocument(validator='soft'),
    out_protocol=JsonDocument()
)
</snippet></ROW><ROW><id>18920502</id><snippet>$ curl -s http://localhost:8000/say_hello \
      -d '{"name": "World", "times": 1}' | python -m json.tool
[
    "Hello, World"
]
$ curl -s http://localhost:8000/say_goodbye \
      -d '{"name": "World", "times": 1}' | python -m json.tool
{
    "detail": null, 
    "faultcode": "Client.ResourceNotFound", 
    "faultstring": "Requested resource \"Method u'{spyne.examples.hello}say_goodbye' not found.\" not found"
}
</snippet></ROW><ROW><id>18920545</id><snippet>TypeError</snippet></ROW><ROW><id>18920545</id><snippet>len(42)</snippet></ROW><ROW><id>18920545</id><snippet>TypeError</snippet></ROW><ROW><id>18920545</id><snippet>len()</snippet></ROW><ROW><id>18920752</id><snippet>handlers.py</snippet></ROW><ROW><id>18920752</id><snippet>handlers.pyc</snippet></ROW><ROW><id>18920752</id><snippet>handlers.py</snippet></ROW><ROW><id>18920752</id><snippet>__init__.py</snippet></ROW><ROW><id>18920812</id><snippet>&gt;&gt; greeting = 'Hello, world!'
&gt;&gt; new_greeting = ''
&gt;&gt; for ch in greeting:
..   if ch == 'o':
..     new_greeting += ch.upper()
..   else:
..     new_greeting += ch
..
&gt;&gt; print new_greeting
HellO, wOrld!
</snippet></ROW><ROW><id>18920903</id><snippet>ArgumentParser</snippet></ROW><ROW><id>18920903</id><snippet>_actions</snippet></ROW><ROW><id>18920903</id><snippet>In [21]: parser._actions
Out[21]: 
[_HelpAction(option_strings=['-h', '--help'], dest='help', nargs=0, const=None, default='==SUPPRESS==', type=None, choices=None, help='show this help message and exit', metavar=None),
 _StoreAction(option_strings=['-f', '--foo'], dest='foo', nargs=None, const=None, default=None, type=None, choices=None, help='Foo help string', metavar=None),
 _StoreAction(option_strings=['-b', '--bar'], dest='bar', nargs=None, const=None, default=None, type=None, choices=None, help='Bar help string', metavar=None),
 _StoreAction(option_strings=['-z', '--zar'], dest='zar', nargs=None, const=None, default=None, type=None, choices=None, help='Zar help string', metavar=None)]
</snippet></ROW><ROW><id>18920903</id><snippet>_option_string_actions</snippet></ROW><ROW><id>18920903</id><snippet>In [14]: parser._option_string_actions
Out[14]: 
{'--bar': _StoreAction(option_strings=['-b', '--bar'], dest='bar', nargs=None, const=None, default=None, type=None, choices=None, help='Bar help string', metavar=None),
 '--foo': _StoreAction(option_strings=['-f', '--foo'], dest='foo', nargs=None, const=None, default=None, type=None, choices=None, help='Foo help string', metavar=None),
 '--help': _HelpAction(option_strings=['-h', '--help'], dest='help', nargs=0, const=None, default='==SUPPRESS==', type=None, choices=None, help='show this help message and exit', metavar=None),
 '--zar': _StoreAction(option_strings=['-z', '--zar'], dest='zar', nargs=None, const=None, default=None, type=None, choices=None, help='Zar help string', metavar=None),
 '-b': _StoreAction(option_strings=['-b', '--bar'], dest='bar', nargs=None, const=None, default=None, type=None, choices=None, help='Bar help string', metavar=None),
 '-f': _StoreAction(option_strings=['-f', '--foo'], dest='foo', nargs=None, const=None, default=None, type=None, choices=None, help='Foo help string', metavar=None),
 '-h': _HelpAction(option_strings=['-h', '--help'], dest='help', nargs=0, const=None, default='==SUPPRESS==', type=None, choices=None, help='show this help message and exit', metavar=None),
 '-z': _StoreAction(option_strings=['-z', '--zar'], dest='zar', nargs=None, const=None, default=None, type=None, choices=None, help='Zar help string', metavar=None)}
</snippet></ROW><ROW><id>18921158</id><snippet>/</snippet></ROW><ROW><id>18921158</id><snippet>Python 2.7.1 (r271:86882M, Nov 30 2010, 10:35:34) 
[GCC 4.2.1 (Apple Inc. build 5664)] on darwin
Type "help", "copyright", "credits" or "license" for more information.
&gt;&gt;&gt; 2/3
0
&gt;&gt;&gt; 2.0/3.0
0.6666666666666666
&gt;&gt;&gt; 
&gt;&gt;&gt; 1/2 == 1.0 / 2.0
False
</snippet></ROW><ROW><id>18921158</id><snippet>/</snippet></ROW><ROW><id>18921158</id><snippet>//</snippet></ROW><ROW><id>18921158</id><snippet>Python 3.3.2 (default, May 21 2013, 11:50:47) 
[GCC 4.2.1 Compatible Apple Clang 4.1 ((tags/Apple/clang-421.11.66))] on darwin
Type "help", "copyright", "credits" or "license" for more information.
&gt;&gt;&gt; 2/3
0.6666666666666666
&gt;&gt;&gt; 2//3
0
&gt;&gt;&gt; 1/2 == 1.0/2.0
True
&gt;&gt;&gt; 1//2 == 1.0/2.0
False
</snippet></ROW><ROW><id>18921158</id><snippet>int main()
{
    int n=2;
    int d=3;
    cout&lt;&lt;n/d;    // 0
}
</snippet></ROW><ROW><id>18921158</id><snippet>from __future__ import print_function

import math
n = 1000000000
if n==0:
    print('0')
else:
    m = int(math.sqrt(n))
    su = int(m*(m+1)/2)
    s = n-1
    i=2
    while i*i&lt;=n:
        k = int(n/i)
        s = s + ((k-1)*i) + int(k*(k+1)/2) - su
        i = i+1
    print(s)
</snippet></ROW><ROW><id>18921158</id><snippet>322467033612360629
</snippet></ROW><ROW><id>18921158</id><snippet>322467033612360628
</snippet></ROW><ROW><id>18921158</id><snippet>s = s + ((k-1)*i) + int(k*(k+1)/2) - su</snippet></ROW><ROW><id>18921158</id><snippet>s = s + ((k-1)*i) + int(k*(k+1)//2) - su    # Note the '//'</snippet></ROW><ROW><id>18921250</id><snippet>url(r'^league/', include('core.views.league')),
</snippet></ROW><ROW><id>18921250</id><snippet>include</snippet></ROW><ROW><id>18921250</id><snippet>include</snippet></ROW><ROW><id>18921250</id><snippet>league</snippet></ROW><ROW><id>18921250</id><snippet>url(r'^league/$', 'core.views.league'),
</snippet></ROW><ROW><id>18921250</id><snippet>$</snippet></ROW><ROW><id>18921250</id><snippet>^league/</snippet></ROW><ROW><id>18921265</id><snippet>SELECT ("colA", "colB") FROM my_table;
</snippet></ROW><ROW><id>18921265</id><snippet>SELECT "colA", "colB" FROM my_table;
</snippet></ROW><ROW><id>18921333</id><snippet>RoadNetwork</snippet></ROW><ROW><id>18921333</id><snippet>RoadNetwork</snippet></ROW><ROW><id>18921333</id><snippet>HighWay</snippet></ROW><ROW><id>18921333</id><snippet>roadType</snippet></ROW><ROW><id>18921333</id><snippet>roads</snippet></ROW><ROW><id>18921333</id><snippet>RoadNetwork</snippet></ROW><ROW><id>18921333</id><snippet>def highway_factory(roads):
    class HighWay(object):
        max_speed = 55
        min_speed = 35
        road_type = roads.types[2]
    return HighWay

class RoadNetwork(object):
    def __init__(self):
        self.types = ['Dirt', 'Gravel', 'Pavement']
        self.HighWay = highway_factory(self)
</snippet></ROW><ROW><id>18921333</id><snippet>&gt;&gt;&gt; roads = RoadNetwork()
&gt;&gt;&gt; roads.types
['Dirt', 'Gravel', 'Pavement']
&gt;&gt;&gt; roads.HighWay.max_speed
55
&gt;&gt;&gt; roads.HighWay.min_speed
35
&gt;&gt;&gt; roads.HighWay.road_type
'Pavement'
</snippet></ROW><ROW><id>18921428</id><snippet>val int: (String =&gt; Number) = _.toInt
val float: (String =&gt; Number) = _.toFloat
</snippet></ROW><ROW><id>18921428</id><snippet>val NUM_TYPE: (String =&gt; Number) = int // or whichever you choose

...

val list = List("1", "2", "3") map (NUM_TYPE)
</snippet></ROW><ROW><id>18921485</id><snippet>data.join(?@).split(?;).map { |x| x.split(?@) }
</snippet></ROW><ROW><id>18921485</id><snippet>@</snippet></ROW><ROW><id>18921528</id><snippet>&gt; i = 0
&gt; i += 1 while i &lt; 10
&gt; i
=&gt; 10
</snippet></ROW><ROW><id>18921528</id><snippet>def func1(foo):
    return [ [] for _ in range(foo) ]
</snippet></ROW><ROW><id>18921528</id><snippet>[[]] * foo</snippet></ROW><ROW><id>18921528</id><snippet>&gt;&gt;&gt; l = [[]] * 10
&gt;&gt;&gt; l[0].append(2) # now every sublist has a 2 in it.
&gt;&gt;&gt; l
[[2], [2], [2], [2], [2], [2], [2], [2], [2], [2]]
</snippet></ROW><ROW><id>18921528</id><snippet>extend</snippet></ROW><ROW><id>18921528</id><snippet>&gt;&gt;&gt; foo =6
&gt;&gt;&gt; bar = ['abc']
&gt;&gt;&gt; bar.extend([[]] * foo)
&gt;&gt;&gt; bar
['abc', [], [], [], [], [], []]
&gt;&gt;&gt; bar[1].append(2)  # same problem
&gt;&gt;&gt; bar
['abc', [2], [2], [2], [2], [2], [2]]
</snippet></ROW><ROW><id>18921528</id><snippet>def func1(foo)
    bar = []
    while len(bar) &lt; foo: bar.append([])
    return bar
</snippet></ROW><ROW><id>18921541</id><snippet>var_array</snippet></ROW><ROW><id>18921541</id><snippet>Test</snippet></ROW><ROW><id>18921541</id><snippet>class Test:
    var_array = []
</snippet></ROW><ROW><id>18921541</id><snippet>__init__</snippet></ROW><ROW><id>18921541</id><snippet>class Test:
    def __init__(self):
        self.var_array = []
</snippet></ROW><ROW><id>18921641</id><snippet>pylab.legend(prop={fontsize: 'small'}) 
</snippet></ROW><ROW><id>18921641</id><snippet>legend</snippet></ROW><ROW><id>18921641</id><snippet>matplotlib</snippet></ROW><ROW><id>18921641</id><snippet>TypeError: __init__() got an unexpected keyword argument 'fontsize'</snippet></ROW><ROW><id>18921641</id><snippet>fontsize</snippet></ROW><ROW><id>18921641</id><snippet>__init__</snippet></ROW><ROW><id>18921641</id><snippet>fontsize</snippet></ROW><ROW><id>18921717</id><snippet>In [1]: import re

In [7]: re.sub("Date\((.+?)\)",r"\1",'{"date":Date(12455),"out_date":45677}')
Out[7]: '{"date":12455,"out_date":45677}'
</snippet></ROW><ROW><id>18921739</id><snippet>board</snippet></ROW><ROW><id>18921739</id><snippet>main()</snippet></ROW><ROW><id>18921739</id><snippet>Screen</snippet></ROW><ROW><id>18921739</id><snippet>Screen</snippet></ROW><ROW><id>18921739</id><snippet>board</snippet></ROW><ROW><id>18921739</id><snippet>class Screen(QtGui.QMainWindow):

    def __init__(self, board):

        super(Screen, self).__init__()
        self.board = board
        self.initUI()


    def toggleLED(self, pressed):

        source = self.sender()

        if self.LedOn:
            source.setText('LED Off')
            self.LedOn = 0
            self.board.setHigh(13)
        else:
            source.setText('LED On')
            self.LedOn = 1
            self.board.setLow(13)



def main():

    app = QtGui.QApplication(sys.argv)
    board = Arduino('COM3')
    screen = Screen(board)

    sys.exit(app.exec_())


if __name__ == '__main__':
    main()
</snippet></ROW><ROW><id>18921825</id><snippet>gtk.mainloop()
</snippet></ROW><ROW><id>18921838</id><snippet>class dictionary:
    def _init_(self, pword=[]):
        self.word = pword
</snippet></ROW><ROW><id>18921838</id><snippet>__init__</snippet></ROW><ROW><id>18921838</id><snippet>class Dictionary:
    def __init__(self):
        self.dict = {}

    def addWord (self, nword):
        if nword not in self.dict:
            self.dict[nword] = []

    def addKey (self, nword, key):
        if nword in self.dict:
            self.dict[nword].append(key)
            return
        print('{0} was not found in the present dictionary'.format(nword))

    def display (self):
        if self.dict == {}:
            print("Dictionary is currently Empty\n")
        else:
            for k, v in self.dict.items():
                print('\t'.join(map(str,v)))
                print()
</snippet></ROW><ROW><id>18921838</id><snippet>addWord</snippet></ROW><ROW><id>18921838</id><snippet>addKey</snippet></ROW><ROW><id>18921838</id><snippet>nword</snippet></ROW><ROW><id>18921838</id><snippet>defaultdict</snippet></ROW><ROW><id>18921838</id><snippet>import collections
class Dictionary (collections.defaultdict):
     def __init__ (self):
         super().__init__(list)

     def display (self):
        for k, v in self.items():
            print('\t'.join(map(str,v)))
            print()

td = Dictionary()
td['A'].append(1)
td['A'].append(2)
td['B'].append(3)
td['C'].append(1)
td['C'].append(3)
td.display()
</snippet></ROW><ROW><id>18921959</id><snippet>gaussian_kde</snippet></ROW><ROW><id>18921959</id><snippet>scipy.signal</snippet></ROW><ROW><id>18921959</id><snippet># Calculate the covariance matrix (in pixel coords)
cov = np.cov(xyi)

# Scaling factor for bandwidth
scotts_factor = np.power(n, -1.0 / 6) # For 2D

#---- Make the gaussian kernel -------------------------------------------

# First, determine how big the gridded kernel needs to be (2 stdev radius) 
# (do we need to convolve with a 5x5 array or a 100x100 array?)
std_devs = np.diag(np.sqrt(cov))
kern_nx, kern_ny = np.round(scotts_factor * 2 * np.pi * std_devs)

# Determine the bandwidth to use for the gaussian kernel
inv_cov = np.linalg.inv(cov * scotts_factor**2) 
</snippet></ROW><ROW><id>18921959</id><snippet># Normalization factor to divide result by so that units are in the same
# units as scipy.stats.kde.gaussian_kde's output.  (Sums to 1 over infinity)
norm_factor = 2 * np.pi * cov * scotts_factor**2
norm_factor = np.linalg.det(norm_factor)
norm_factor = n * dx * dy * np.sqrt(norm_factor)

# Normalize the result
grid /= norm_factor
</snippet></ROW><ROW><id>18921959</id><snippet>&lt;x, y&gt;</snippet></ROW><ROW><id>18921959</id><snippet>&lt;y, x&gt;</snippet></ROW><ROW><id>18921959</id><snippet>gaussian_kde</snippet></ROW><ROW><id>18921959</id><snippet>scotts_factor</snippet></ROW><ROW><id>18921991</id><snippet>t = Twython(app_key=consumer_key,
        app_secret=consumer_secret,
        oauth_token=access_token,
        oauth_token_secret=access_token_secret)
t.get_followers_ids()
</snippet></ROW><ROW><id>18921991</id><snippet>twitter = Twython(APP_KEY, APP_SECRET)
auth = twitter.get_authentication_tokens(callback_url='http://mysite.com/callback')
</snippet></ROW><ROW><id>18922010</id><snippet>$PATH</snippet></ROW><ROW><id>18922010</id><snippet>./configure.py --sip=[...] --sip-incdir=[...] --sipdir=[...]</snippet></ROW><ROW><id>18922010</id><snippet>python</snippet></ROW><ROW><id>18922010</id><snippet>sip</snippet></ROW><ROW><id>18922010</id><snippet>$PATH</snippet></ROW><ROW><id>18922054</id><snippet>def traverse(tree):
    if not isinstance(tree, dict):
        return tree.isalpha() # if leafs can't be alphabetic, simply return 0
    c = 0
    for k, v in tree.items():
        c += k.isalpha() + traverse(v)
    return c
</snippet></ROW><ROW><id>18922054</id><snippet>def traverse(tree):
    if not isinstance(tree, dict):
        return tree.isalpha() # if leafs can't be alphabetic, simply return 0
    return sum(k.isalpha() + traverse(v) for k, v in tree.items())
</snippet></ROW><ROW><id>18922054</id><snippet>tree = {'B': {'0': '1',
              '1': {'E': {'0': {'A': {'0': '1', '1': '0'}},
                          '1': {'D': {'0': '0', '1': '1'}}}}}}
traverse(tree)
=&gt; 4
</snippet></ROW><ROW><id>18922364</id><snippet>horaactual = datetime.datetime.now() - datetime.timedelta(hours=7)
</snippet></ROW><ROW><id>18922464</id><snippet>pip install git+ssh://git@github.com/matherbk/django-messages.git
</snippet></ROW><ROW><id>18922736</id><snippet>[ "city", null, {} ]</snippet></ROW><ROW><id>18922800</id><snippet>def testall(arg):
    return any(f(arg) for f in testfunctions)

def test1(arg):
    #code here
    # may call testall but wont call anyother test*    
</snippet></ROW><ROW><id>18922800</id><snippet>def testall(arg):
    testfunctions = [obj for name,obj in inspect.getmembers(sys.modules[__name__]) 
                     if (inspect.isfunction(obj) and 
                         name.startwith('test') and name != 'testall')]
    return any(f(arg) for f in testfunctions)

def test1(arg):
    #code here
    # may call testall but wont call anyother test*
</snippet></ROW><ROW><id>18922800</id><snippet>testfunctions</snippet></ROW><ROW><id>18922800</id><snippet>testall</snippet></ROW><ROW><id>18922800</id><snippet>test1</snippet></ROW><ROW><id>18922800</id><snippet>testfunctions</snippet></ROW><ROW><id>18922800</id><snippet>testall</snippet></ROW><ROW><id>18922800</id><snippet>test1</snippet></ROW><ROW><id>18922800</id><snippet>if __name__ == '__main__'</snippet></ROW><ROW><id>18922800</id><snippet>import tests; tests.test1(10)</snippet></ROW><ROW><id>18922800</id><snippet>test1</snippet></ROW><ROW><id>18922800</id><snippet>test2</snippet></ROW><ROW><id>18922800</id><snippet>def testall(arg):
    testfunctions = ('test1',)
    return any(f(arg) for f in testfunctions)

def test1(arg):
    #code here
    # may call testall but wont call anyother test*
</snippet></ROW><ROW><id>18922800</id><snippet>test1</snippet></ROW><ROW><id>18922800</id><snippet>testall</snippet></ROW><ROW><id>18922800</id><snippet>sys</snippet></ROW><ROW><id>18922800</id><snippet>inspect</snippet></ROW><ROW><id>18922800</id><snippet>test1</snippet></ROW><ROW><id>18922800</id><snippet>testall</snippet></ROW><ROW><id>18922800</id><snippet>testall</snippet></ROW><ROW><id>18922800</id><snippet>test1</snippet></ROW><ROW><id>18922800</id><snippet>test2</snippet></ROW><ROW><id>18922800</id><snippet>testall</snippet></ROW><ROW><id>18922800</id><snippet>test1</snippet></ROW><ROW><id>18922800</id><snippet>test2</snippet></ROW><ROW><id>18922800</id><snippet>test1</snippet></ROW><ROW><id>18922800</id><snippet>testall</snippet></ROW><ROW><id>18922800</id><snippet>test1</snippet></ROW><ROW><id>18922800</id><snippet>testall</snippet></ROW><ROW><id>18922800</id><snippet>testall</snippet></ROW><ROW><id>18922800</id><snippet>test1</snippet></ROW><ROW><id>18922800</id><snippet>test1</snippet></ROW><ROW><id>18922800</id><snippet>test2</snippet></ROW><ROW><id>18922800</id><snippet>test2</snippet></ROW><ROW><id>18922800</id><snippet>NameError</snippet></ROW><ROW><id>18922800</id><snippet>testfunctions</snippet></ROW><ROW><id>18922800</id><snippet>testall</snippet></ROW><ROW><id>18922800</id><snippet>getmembers</snippet></ROW><ROW><id>18922800</id><snippet>def testall(arg, _functions_cache=[]):
    if not _functions_cache:
        _functions_cache.extend([…])
</snippet></ROW><ROW><id>18922843</id><snippet>if</snippet></ROW><ROW><id>18922843</id><snippet>else</snippet></ROW><ROW><id>18922843</id><snippet>re.sub(r'(&lt;Q\d+&gt;)', (lambda m: quotes[m.group(1)][1] if quotes[m.group(1)][1] in d else m.group(1)), text)
</snippet></ROW><ROW><id>18922913</id><snippet>import numpy as np
import matplotlib.pyplot as plt

rows, cols = 480, 640
rgb_img = np.zeros((rows, cols, 3), dtype=np.uint8)

rgb_img[:rows//2, :cols//2] = 255

center_slice = rgb_img[1:-1, 1:-1]
left_slice = rgb_img[1:-1, :-2]
right_slice = rgb_img[1:-1, 2:]
up_slice = rgb_img[:-2, 1:-1]
down_slice = rgb_img[2:, 1:-1]

all_equal = (np.all(center_slice == left_slice, axis=-1) &amp;
             np.all(center_slice == right_slice, axis=-1) &amp;
             np.all(center_slice == up_slice, axis=-1) &amp;
             np.all(center_slice == down_slice, axis=-1))

plt.subplot(211)
plt.imshow(rgb_img, interpolation='nearest')
plt.subplot(212)
plt.imshow(all_equal, interpolation='nearest')
plt.show()
</snippet></ROW><ROW><id>18922991</id><snippet>sessions.ini</snippet></ROW><ROW><id>18922991</id><snippet>session.ini</snippet></ROW><ROW><id>18922991</id><snippet>'s'</snippet></ROW><ROW><id>18922991</id><snippet>from configobj import ConfigObj

session = ConfigObj("sessions.ini", raise_errors=True)

def Session():
    for item in session:
        print(item)

Session()
</snippet></ROW><ROW><id>18922991</id><snippet>Session 1
Session 2
</snippet></ROW><ROW><id>18923076</id><snippet>groupby</snippet></ROW><ROW><id>18923076</id><snippet>102P...</snippet></ROW><ROW><id>18923076</id><snippet>&gt;&gt;&gt; ndf = df.groupby(level=0).count()
&gt;&gt;&gt; ndf[ndf == 1] = 'Y'
&gt;&gt;&gt; ndf[ndf == 0] = np.nan
&gt;&gt;&gt; ndf
         E    H  N  S
label                
102P     Y  NaN  Y  Y
103R     Y    Y  Y  Y
109F   NaN    Y  Y  Y
</snippet></ROW><ROW><id>18923076</id><snippet>ndf[ndf == 1]</snippet></ROW><ROW><id>18923076</id><snippet>ndf[ndf &gt; 0]</snippet></ROW><ROW><id>18923076</id><snippet>&gt;&gt;&gt; df1
      E   H   N   S
0                  
102P  Y NaN NaN NaN
103R  Y NaN NaN NaN
&gt;&gt;&gt; df2
       E   H  N   S
0                  
102P NaN NaN  Y NaN
103R NaN NaN  Y NaN
109F NaN NaN  Y NaN

...

&gt;&gt;&gt; reduce(lambda first, second: first.combine_first(second),
           [df1, df2, df3, df4], pd.DataFrame())
        E    H  N  S
0                   
102P    Y  NaN  Y  Y
103R    Y    Y  Y  Y
109F  NaN    Y  Y  Y
</snippet></ROW><ROW><id>18923229</id><snippet>Location</snippet></ROW><ROW><id>18923229</id><snippet>print response.getheader('location')
</snippet></ROW><ROW><id>18923229</id><snippet>contents = response.read()
</snippet></ROW><ROW><id>18923501</id><snippet>return force_text(cursor._last_executed, errors='replace')
</snippet></ROW><ROW><id>18923501</id><snippet>from django.utils.encoding import force_text
from django.db.backends.mysql.base import DatabaseOperations

def fixed_last_executed_query(self, cursor, sql, params):
    return force_text(cursor._last_executed, errors='replace')

DatabaseOperations.last_executed_query = fixed_last_executed_query
</snippet></ROW><ROW><id>18923501</id><snippet>settings</snippet></ROW><ROW><id>18923645</id><snippet>zip</snippet></ROW><ROW><id>18923645</id><snippet>an_array.zip(other_array)</snippet></ROW><ROW><id>18923645</id><snippet>map</snippet></ROW><ROW><id>18923645</id><snippet>number.chars.zip(id[4..-1].chars).map do |x,y|</snippet></ROW><ROW><id>18923645</id><snippet>x.to_i</snippet></ROW><ROW><id>18924034</id><snippet>import itertools as it

def create_possibilities(highest, per_list):
    tuples = it.product(range(1, highest+1), repeat=highest)
    all_possibilities = it.product(tuples, repeat=per_list)
    return all_possibilities
</snippet></ROW><ROW><id>18924034</id><snippet>max</snippet></ROW><ROW><id>18924034</id><snippet>len</snippet></ROW><ROW><id>18924086</id><snippet>import pyparsing as pp

allSections = []
def rememberSection(m):
    allSections.append(''.join(m))
other = pp.Word(pp.printables.replace('{','').replace('}','') + ' \t\r\n')
section = pp.Forward()
section &lt;&lt; ('{' + pp.OneOrMore(other | section) + '}').setParseAction(rememberSection)

s = r'''{ This is a \textbf{\texttt{example}} of \textit{some $\mb{y}$ text} to parse.}'''
print section.parseString(s)
print allSections
</snippet></ROW><ROW><id>18924086</id><snippet>pyparsing.ParseException</snippet></ROW><ROW><id>18924086</id><snippet>allSections</snippet></ROW><ROW><id>18924202</id><snippet>repr()</snippet></ROW><ROW><id>18924202</id><snippet>repr()</snippet></ROW><ROW><id>18924202</id><snippet>print</snippet></ROW><ROW><id>18924202</id><snippet>json</snippet></ROW><ROW><id>18924202</id><snippet>import json
print json.dumps('I said, "Hello, world!"')
</snippet></ROW><ROW><id>18924224</id><snippet>driver.switch_to_frame(driver.find_element_by_tag_name("iframe"))</snippet></ROW><ROW><id>18924224</id><snippet>driver.switch_to_default_content()</snippet></ROW><ROW><id>18924224</id><snippet>el = driver.find_element_by_xpath('html/body')</snippet></ROW><ROW><id>18924224</id><snippet>el.send_keys('keys_to_send')</snippet></ROW><ROW><id>18924224</id><snippet>driver.execute_script('document.body.innerHTML = "%s"' % text_var)</snippet></ROW><ROW><id>18924253</id><snippet>'ttp_ws_sm_(\d+)_'</snippet></ROW><ROW><id>18924253</id><snippet>'ttpv1_(\d+)_'</snippet></ROW><ROW><id>18924253</id><snippet>|</snippet></ROW><ROW><id>18924253</id><snippet>re.compile(r'(?:ttp_ws_sm|ttpv1)_(\d+)_')
</snippet></ROW><ROW><id>18924253</id><snippet>?:</snippet></ROW><ROW><id>18924253</id><snippet>&gt;&gt;&gt; pattern = re.compile(r'(?:ttp_ws_sm|ttpv1)_(\d+)_')
&gt;&gt;&gt; pattern.match('ttpv1_001_').group(1)
'001'
&gt;&gt;&gt; pattern.match('ttp_ws_sm_045_blank').group(1)
'045'
</snippet></ROW><ROW><id>18924253</id><snippet>'ttp_ws_sm_(\d+)_' or 'ttpv1_(\d+)_'</snippet></ROW><ROW><id>18924253</id><snippet>'ttp_ws_sm_(\d+)_'</snippet></ROW><ROW><id>18924262</id><snippet>parser.add_argument('--range', default=[4,3,2], 
                    nargs=3, metavar=('start', 'end', 'step'),
                    type=int, help='specify a range')
</snippet></ROW><ROW><id>18924262</id><snippet>import argparse
parser = argparse.ArgumentParser()
parser.add_argument('--range', default=[4,3,2], nargs=3, metavar=('start', 'end', 'step'),
             type=int, help='specify a range')
print parser.parse_args([])

# prints Namespace(range=[4, 3, 2])
</snippet></ROW><ROW><id>18924333</id><snippet>supervisorctl</snippet></ROW><ROW><id>18924451</id><snippet>twisted.internet.task.deferLater()</snippet></ROW><ROW><id>18924451</id><snippet>from twisted.trial import unittest
from twisted.internet import reactor, task


class TrialTest1(unittest.TestCase):

    def setUp(self):
        print("setUp()")

    def test_main(self):
        print("test_main")
        return task.deferLater(reactor, 1, self._called_by_deffered1)

    def _called_by_deffered1(self):
        print("_called_by_deffered1")
        return task.deferLater(reactor, 1, self._called_by_deffered2)

    def _called_by_deffered2(self):
        print("_called_by_deffered2")

    def tearDown(self):
        print("tearDown()")
</snippet></ROW><ROW><id>18924569</id><snippet>AppUI</snippet></ROW><ROW><id>18924569</id><snippet>Frame</snippet></ROW><ROW><id>18924569</id><snippet>Tkinter</snippet></ROW><ROW><id>18924569</id><snippet>AppUI</snippet></ROW><ROW><id>18924569</id><snippet>Frame</snippet></ROW><ROW><id>18924569</id><snippet>AppUI</snippet></ROW><ROW><id>18924569</id><snippet>Frame</snippet></ROW><ROW><id>18924569</id><snippet>AppUI</snippet></ROW><ROW><id>18924569</id><snippet>Frame</snippet></ROW><ROW><id>18924569</id><snippet>AppUI</snippet></ROW><ROW><id>18924569</id><snippet>Frame</snippet></ROW><ROW><id>18924569</id><snippet>AppUI</snippet></ROW><ROW><id>18924569</id><snippet>AppUI</snippet></ROW><ROW><id>18924569</id><snippet>__init__()</snippet></ROW><ROW><id>18924569</id><snippet>super()</snippet></ROW><ROW><id>18924817</id><snippet>dupy.py</snippet></ROW><ROW><id>18924817</id><snippet>dupy.txt</snippet></ROW><ROW><id>18924817</id><snippet>python dupy.py dupy.txt</snippet></ROW><ROW><id>18924817</id><snippet>from sys import argv

run, filename = argv

f = open(filename, 'a+')
f.seek(0)
lines = f.readlines()
for line in lines:
    f.write(line[1:])
f.close()
rom sys import argv
un, filename = argv
 = open(filename, 'a+')
.seek(0)
ines = f.readlines()
or line in lines:
   f.write(line[1:])
.close()
</snippet></ROW><ROW><id>18924817</id><snippet>append</snippet></ROW><ROW><id>18924817</id><snippet>from sys import argv

run, filename = argv

f = open(filename)
lines = f.readlines()
f.close()
f = open(filename, 'w')
for line in lines:
    f.write(line[1:])
f.close()
</snippet></ROW><ROW><id>18924817</id><snippet>import os
from sys import argv

run, filename = argv

fin = open(filename)
fout = open(filename + '.tmp', 'w')
lines = f.readlines()
for line in lines:
    fout.write(line[1:])
fout.close()
fin.close()
os.rename(filename + '.tmp', filename)
</snippet></ROW><ROW><id>18924817</id><snippet>with</snippet></ROW><ROW><id>18924817</id><snippet>readlines</snippet></ROW><ROW><id>18924817</id><snippet>tempfile</snippet></ROW><ROW><id>18924817</id><snippet>import tempfile
from sys import argv

run, filename = argv

with open(filename) as fin, tempfile.NamedTemporaryFile(delete=False) as fout:
    for line in fin:
        fout.write(line[1:])
    os.rename(fout.name, filename)
</snippet></ROW><ROW><id>18924817</id><snippet>with open(filename) as fin, tempfile.NamedTemporaryFile(delete=False) as fout:
    for line in fin:
        fout.write(line[1:])
    outname = fout.name
os.remove(filename)
os.rename(outname, filename)
</snippet></ROW><ROW><id>18924817</id><snippet>NamedTemporaryFile</snippet></ROW><ROW><id>18925010</id><snippet>chmod +x MiscTest.py
</snippet></ROW><ROW><id>18925010</id><snippet>#!/usr/bin/env python
</snippet></ROW><ROW><id>18925010</id><snippet>main()</snippet></ROW><ROW><id>18925010</id><snippet>if __name__ == "__main__":
    # call main function
</snippet></ROW><ROW><id>18925010</id><snippet>$PATH</snippet></ROW><ROW><id>18925010</id><snippet>python MiscTest.py</snippet></ROW><ROW><id>18925010</id><snippet>MiscTest.py</snippet></ROW><ROW><id>18925010</id><snippet>.py</snippet></ROW><ROW><id>18925044</id><snippet>s.get(url)
</snippet></ROW><ROW><id>18925277</id><snippet>for i in primeInput</snippet></ROW><ROW><id>18925277</id><snippet>for</snippet></ROW><ROW><id>18925277</id><snippet>for item in primeInput:
    print "primeInput value are %i" % item
</snippet></ROW><ROW><id>18925277</id><snippet>for i in range(len(primeInput)):
    print "primeInput value are %i" % primeInput[i]
</snippet></ROW><ROW><id>18925277</id><snippet>puesdoPrime()</snippet></ROW><ROW><id>18925277</id><snippet>*args</snippet></ROW><ROW><id>18925277</id><snippet>puesdoPrime(2, 3, 4, 5)
</snippet></ROW><ROW><id>18925277</id><snippet>the_args = (2, 3, 4, 5)
puesdoPrime(*the_args)
</snippet></ROW><ROW><id>18925277</id><snippet>*</snippet></ROW><ROW><id>18925327</id><snippet>H_bis = np.sum(M[1:2*n**2:2, :2*n**2] * M[:2*n**2:2, :2*n**2].conjugate(), axis=1)
H_bis = H_bis * H_bis.conjugate()
H_bis = -np.sum(H_bis)
</snippet></ROW><ROW><id>18925521</id><snippet>None</snippet></ROW><ROW><id>18925521</id><snippet>"Word"</snippet></ROW><ROW><id>18925521</id><snippet>repr(ns)</snippet></ROW><ROW><id>18925521</id><snippet>NounSynset.__repr__(ns)</snippet></ROW><ROW><id>18925521</id><snippet>Synset.__repr__(ns)</snippet></ROW><ROW><id>18925521</id><snippet>repr((self.word))</snippet></ROW><ROW><id>18925521</id><snippet>repr(self.word)</snippet></ROW><ROW><id>18925521</id><snippet>self.word</snippet></ROW><ROW><id>18925521</id><snippet>None</snippet></ROW><ROW><id>18925521</id><snippet>pass</snippet></ROW><ROW><id>18925521</id><snippet>class NounSynset(Synset):

    def __init__(self, synset_id=None, w_num=None, word=None, ss_type=None, sense_number=None, tag_count=None):
        super(NounSynset, self).__init__(synset_id=None, w_num=None, word=None, ss_type=None, sense_number=None, tag_count=None)
</snippet></ROW><ROW><id>18925521</id><snippet>word=None</snippet></ROW><ROW><id>18925521</id><snippet>    def __init__(self, synset_id=None, w_num=None, word=None, ss_type=None, sense_number=None, tag_count=None):
        super(NounSynset, self).__init__(synset_id=synset_id, w_num=w_num, word=word, ss_type=ss_type, sense_number=sense_number, tag_count=tag_count)
</snippet></ROW><ROW><id>18925521</id><snippet>    def __init__(self, synset_id=None, w_num=None, word=None, ss_type=None, sense_number=None, tag_count=None):
        super(NounSynset, self).__init__(synset_id=synset_id, w_num=w_num, word=word, ss_type=ss_type if ss_type else NOUN_TYPE, sense_number=sense_number, tag_count=tag_count)
</snippet></ROW><ROW><id>18925604</id><snippet>In [25]: df = DataFrame([[1+2j],[2-1j]],columns=list('A'))

In [26]: df
Out[26]: 
        A
0  (1+2j)
1  (2-1j)

In [27]: df['A'] = df['A'].apply(str).str.replace('\(|\)','')

In [28]: df
Out[28]: 
      A
0  1+2j
1  2-1j

In [29]: df.to_csv('test.csv')

In [30]: !cat test.csv
,A
0,1+2j
1,2-1j
</snippet></ROW><ROW><id>18925757</id><snippet>guess</snippet></ROW><ROW><id>18925757</id><snippet>guess = int(raw_input('What is the code? &gt;&gt;'))
</snippet></ROW><ROW><id>18925757</id><snippet>guess = None
</snippet></ROW><ROW><id>18925932</id><snippet>import urllib2
with open('/path/to/storage/' + make_a_unique_name(), 'w') as f:
    f.write(urllib2.urlopen(your_url).read())
</snippet></ROW><ROW><id>18925932</id><snippet>urllib2.urlopen(your_url, timeout=5)
</snippet></ROW><ROW><id>18925932</id><snippet>timeout</snippet></ROW><ROW><id>18925932</id><snippet>http://localhost:8000/path/to/secret/stats.png</snippet></ROW><ROW><id>18926071</id><snippet>~</snippet></ROW><ROW><id>18926071</id><snippet>not</snippet></ROW><ROW><id>18926071</id><snippet>M = np.random.random_integers(0,1,(5,5))
print M

[[1 0 0 1 1]
 [0 0 1 1 0]
 [0 1 1 0 1]
 [1 1 1 0 1]
 [0 1 1 0 0]]

print (~(M.astype(np.bool))).astype(M.dtype)

[[0 1 1 0 0]
 [1 1 0 0 1]
 [1 0 0 1 0]
 [0 0 0 1 0]
 [1 0 0 1 1]]
</snippet></ROW><ROW><id>18926071</id><snippet>print 1 - M

[[0 1 1 0 0]
 [1 1 0 0 1]
 [1 0 0 1 0]
 [0 0 0 1 0]
 [1 0 0 1 1]]
</snippet></ROW><ROW><id>18926284</id><snippet>.loc</snippet></ROW><ROW><id>18926284</id><snippet>condition = df.one &gt;= df.two
df.loc[condition, 'three'] = df['four']
df.loc[condition, 'five'] = df['two'] / df['four']
</snippet></ROW><ROW><id>18926386</id><snippet>multiprocessing</snippet></ROW><ROW><id>18926386</id><snippet>import multiprocessing
import subprocess

def process_pdf(path):
    subprocess.call(['jruby', 'C:\\jruby-1.7.4\\bin\\tabula', path, ...])

pool = multiprocessing.Pool(3)      # 3 processes
results = []
for path in search_for_files():
    results.append(pool.apply_async(process_pdf, [path]))
for result in results:
    result.wait()
</snippet></ROW><ROW><id>18926425</id><snippet>import re
df = df.set_index('county')
df = df.rename(columns=lambda x: re.search(r'([a-zA-Z_]+)(\d{4})', x).groups())
df.columns = MultiIndex.from_tuples(df.columns, names=['label', 'year'])
s = df.unstack()
s.name = 'count'
print(s)
</snippet></ROW><ROW><id>18926425</id><snippet>label          year  county
housingunits   2010  8001      120
                     8002      100
               2012  8001      200
                     8002      200
occupiedunits  2010  8001       50
                     8002       75
               2012  8001      100
                     8002      125
Name: count, dtype: int64
</snippet></ROW><ROW><id>18926425</id><snippet>DataFrame</snippet></ROW><ROW><id>18926425</id><snippet>reset_index()</snippet></ROW><ROW><id>18926425</id><snippet>print(s.reset_index())
</snippet></ROW><ROW><id>18926425</id><snippet>           label  year  county  numunits
0   housingunits  2010    8001       120
1   housingunits  2010    8002       100
2   housingunits  2012    8001       200
3   housingunits  2012    8002       200
4  occupiedunits  2010    8001        50
5  occupiedunits  2010    8002        75
6  occupiedunits  2012    8001       100
7  occupiedunits  2012    8002       125
</snippet></ROW><ROW><id>18926455</id><snippet>formset</snippet></ROW><ROW><id>18926455</id><snippet>from django.forms.models import BaseInlineFormSet

class TeamPlayerFormset(BaseInlineFormSet):
    def clean(self):
        """Check that exactly 11 players are entered."""
        super(TeamPlayerFormset, self).clean()

        if any(self.errors):
            return

        count = 0
        for cleaned_data in self.cleaned_data:
            if cleaned_data and not cleaned_data.get('DELETE', False):
                count += 1
        if count != 11:
            raise forms.ValidationError('You must enter 11 team players.')


class TeamPlayerInline(admin.TabularInline):
    model = TeamPlayer
    max_num = 11
    extra = 11
    formset = TeamPlayerFormset


class TeamAdmin(admin.ModelAdmin):
    inlines = [TeamPlayerInline]
</snippet></ROW><ROW><id>18926461</id><snippet> print("mix up script (c) Ioan Loosley")
</snippet></ROW><ROW><id>18926500</id><snippet>time.clock()</snippet></ROW><ROW><id>18926500</id><snippet>sleep</snippet></ROW><ROW><id>18926500</id><snippet>time.clock</snippet></ROW><ROW><id>18926500</id><snippet>time.time()</snippet></ROW><ROW><id>18926541</id><snippet>cmap(np.linspace(0.2, 0.8, 100))
</snippet></ROW><ROW><id>18926541</id><snippet>import matplotlib.pyplot as plt
import matplotlib.colors as colors
import numpy as np

def truncate_colormap(cmap, minval=0.0, maxval=1.0, n=100):
    new_cmap = colors.LinearSegmentedColormap.from_list(
        'trunc({n},{a:.2f},{b:.2f})'.format(n=cmap.name, a=minval, b=maxval),
        cmap(np.linspace(minval, maxval, n)))
    return new_cmap

arr = np.linspace(0, 50, 100).reshape((10, 10))
fig, ax = plt.subplots(ncols=2)

cmap = plt.get_cmap('jet')
new_cmap = truncate_colormap(cmap, 0.2, 0.8)
ax[0].imshow(arr, interpolation='nearest', cmap=cmap)
ax[1].imshow(arr, interpolation='nearest', cmap=new_cmap)
plt.show()
</snippet></ROW><ROW><id>18926541</id><snippet>jet</snippet></ROW><ROW><id>18926541</id><snippet>new_cmap</snippet></ROW><ROW><id>18926578</id><snippet>bucket 1    - 1379713706
bucket 2    - 1379713716
bucket 3    - 1379713726
...
bucket 100  - 1379714706
bucket 101  - 1379714716
bucket 102  - 1379714726
</snippet></ROW><ROW><id>18926693</id><snippet>def chunks(seq, n):
    # http://stackoverflow.com/a/312464/190597 (Ned Batchelder)
    """ Yield successive n-sized chunks from seq."""
    for i in xrange(0, len(seq), n):
        yield seq[i:i + n]

data = [1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0]
for row in chunks(data, 3):
    print(',  '.join(map(str, row)))
</snippet></ROW><ROW><id>18926693</id><snippet>1.0,  2.0,  3.0
4.0,  5.0,  6.0
7.0,  8.0,  9.0
10.0
</snippet></ROW><ROW><id>18926693</id><snippet>strformat = '\n'.join(
    ',  '.join('{:&gt;5.1f}' for item in row) 
    for row in chunks(data, 3))
print(strformat.format(*data))
</snippet></ROW><ROW><id>18926767</id><snippet>(os.stat(f).st_size, os.path.realpath(f))
</snippet></ROW><ROW><id>18926767</id><snippet>result = []
for f in glob.glob('*.sh'):
    item = (os.stat(f).st_size, os.path.realpath(f))
    result.append(item)
</snippet></ROW><ROW><id>18926767</id><snippet>[[os.stat(f).st_size, os.path.realpath(f)] for f in glob.glob('*.sh')]
</snippet></ROW><ROW><id>18926844</id><snippet>grouper</snippet></ROW><ROW><id>18926844</id><snippet>csv</snippet></ROW><ROW><id>18926844</id><snippet>skipinitialspace</snippet></ROW><ROW><id>18926844</id><snippet>import csv
from itertools import *

# see recipies section in itertools docs
# http://docs.python.org/2/library/itertools.html
def grouper(iterable, n, fillvalue=None):
    "Collect data into fixed-length chunks or blocks"
    # grouper('ABCDEFG', 3, 'x') --&gt; ABC DEF Gxx
    args = [iter(iterable)] * n
    return izip_longest(fillvalue=fillvalue, *args)

with open('input.csv') as f:
    data = csv.reader(f, skipinitialspace=True)
    with open('output.csv', 'w') as output_f:
        output = csv.writer(output_f)
        for city, names, blank in grouper(data, 3, []):
            if not (city[0] == 'Paris' and 'Trevor Wilson' in names):
                output.writerow(city)
                output.writerow(names)
                output.writerow('')
</snippet></ROW><ROW><id>18926860</id><snippet>[</snippet></ROW><ROW><id>18926860</id><snippet>m = re.search(r'\[AS(.*?)]', words)
if m:
    f_word = m.group(1)
</snippet></ROW><ROW><id>18926868</id><snippet>sqlite3</snippet></ROW><ROW><id>18926868</id><snippet>?</snippet></ROW><ROW><id>18926868</id><snippet>cursor.execute("INSERT INTO song (title, artist) VALUES (?, ?)", (tit, art))
</snippet></ROW><ROW><id>18927048</id><snippet>None</snippet></ROW><ROW><id>18927048</id><snippet>list.append</snippet></ROW><ROW><id>18927048</id><snippet>list.sort</snippet></ROW><ROW><id>18927048</id><snippet>sorted</snippet></ROW><ROW><id>18927048</id><snippet>l = n * [1]
l.append(10)   # returns None ..
print l        # .. but list was mutated
</snippet></ROW><ROW><id>18927060</id><snippet>sys.path</snippet></ROW><ROW><id>18927060</id><snippet>sys.modules</snippet></ROW><ROW><id>18927060</id><snippet>execfile()</snippet></ROW><ROW><id>18927060</id><snippet>import os.path

def load_and_call(package_path, module_class, method_name):
    module_name, class_name = module_class.split(".")
    module_globals = {}
    execfile(os.path.join(package_path, module_name + ".py"), module_globals)
    return getattr(module_globals[class_name](), method_name, lambda: None)()
</snippet></ROW><ROW><id>18927060</id><snippet>def load_and_call(package_path, module_class, method_name, _module_cache={}):
    module_name, class_name = module_class.split(".")
    py_path = os.path.join(package_path, module_name + ".py")
    module_globals = _module_cache.setdefault(py_path, {})
    if not module_globals:
        execfile(py_path, module_globals)
    return getattr(module_globals[class_name](), method_name, lambda: None)()
</snippet></ROW><ROW><id>18927473</id><snippet>sudo apt-get install build-essential python-dev libmysqlclient-dev
</snippet></ROW><ROW><id>18927571</id><snippet>&gt;&gt;&gt; df.groupby('time').apply(
        lambda g: pd.Series(g['data'].values)
    ).rename(columns=lambda x: 'data%s' % x)

      data0  data1
time              
1         2    2.1
2         3    3.1
3         4    4.1
</snippet></ROW><ROW><id>18927612</id><snippet>def time_eval_thingy ( a, b ):
b = int( b ) # probably not needed, just to be sure
if b &lt; 5:
  outputstring = "SPECIAL"
elif b &lt; 10:
  outputstring = "5 after "

...
elif b &lt; 50
  outputstring = "Quarter until "
  a += 1 # a is the hour, and increasing it here will make the hour appear higher in the dictionary call that occurs after the time when we decide the signifcance of b
</snippet></ROW><ROW><id>18927641</id><snippet>edit procrustes.m</snippet></ROW><ROW><id>18927641</id><snippet>def procrustes(X, Y, scaling=True, reflection='best'):
    """
    A port of MATLAB's `procrustes` function to Numpy.

    Procrustes analysis determines a linear transformation (translation,
    reflection, orthogonal rotation and scaling) of the points in Y to best
    conform them to the points in matrix X, using the sum of squared errors
    as the goodness of fit criterion.

        d, Z, [tform] = procrustes(X, Y)

    Inputs:
    ------------
    X, Y    
        matrices of target and input coordinates. they must have equal
        numbers of  points (rows), but Y may have fewer dimensions
        (columns) than X.

    scaling 
        if False, the scaling component of the transformation is forced
        to 1

    reflection
        if 'best' (default), the transformation solution may or may not
        include a reflection component, depending on which fits the data
        best. setting reflection to True or False forces a solution with
        reflection or no reflection respectively.

    Outputs
    ------------
    d       
        the residual sum of squared errors, normalized according to a
        measure of the scale of X, ((X - X.mean(0))**2).sum()

    Z
        the matrix of transformed Y-values

    tform   
        a dict specifying the rotation, translation and scaling that
        maps X --&gt; Y

    """

    n,m = X.shape
    ny,my = Y.shape

    muX = X.mean(0)
    muY = Y.mean(0)

    X0 = X - muX
    Y0 = Y - muY

    ssX = (X0**2.).sum()
    ssY = (Y0**2.).sum()

    # centred Frobenius norm
    normX = np.sqrt(ssX)
    normY = np.sqrt(ssY)

    # scale to equal (unit) norm
    X0 /= normX
    Y0 /= normY

    if my &lt; m:
        Y0 = np.concatenate((Y0, np.zeros(n, m-my)),0)

    # optimum rotation matrix of Y
    A = np.dot(X0.T, Y0)
    U,s,Vt = np.linalg.svd(A,full_matrices=False)
    V = Vt.T
    T = np.dot(V, U.T)

    if reflection is not 'best':

        # does the current solution use a reflection?
        have_reflection = np.linalg.det(T) &lt; 0

        # if that's not what was specified, force another reflection
        if reflection != have_reflection:
            V[:,-1] *= -1
            s[-1] *= -1
            T = np.dot(V, U.T)

    traceTA = s.sum()

    if scaling:

        # optimum scaling of Y
        b = traceTA * normX / normY

        # standarised distance between X and b*Y*T + c
        d = 1 - traceTA**2

        # transformed coords
        Z = normX*traceTA*np.dot(Y0, T) + muX

    else:
        b = 1
        d = 1 + ssY/ssX - 2 * traceTA * normY / normX
        Z = normY*np.dot(Y0, T) + muX

    # transformation matrix
    if my &lt; m:
        T = T[:my,:]
    c = muX - b*np.dot(muY, T)

    tform = {'rotation':T, 'scale':b, 'translation':c}

    return d, Z, tfo
</snippet></ROW><ROW><id>18927682</id><snippet>r'^note/(?:(\d+)/)?$'
</snippet></ROW><ROW><id>18927682</id><snippet>?</snippet></ROW><ROW><id>18927832</id><snippet>li</snippet></ROW><ROW><id>18927832</id><snippet>def sqrs(seq):
    indices = [(x % 3, x / 3) for x in range(0, 9)]  # Set up a list of coordinates
    boxes = [[seq[x*3+xx][y*3+yy] for xx, yy in indices] for x, y in indices]  # Use the list of coordinates both to reference the boxes and to reference the cells within the box, to reorganize the list.
    return boxes
</snippet></ROW><ROW><id>18927855</id><snippet>setuptools</snippet></ROW><ROW><id>18927855</id><snippet>distribute</snippet></ROW><ROW><id>18927855</id><snippet>setuptools</snippet></ROW><ROW><id>18927855</id><snippet>pkg_resources</snippet></ROW><ROW><id>18927855</id><snippet>shutil.copy(datapath, './default.ini')</snippet></ROW><ROW><id>18927855</id><snippet>with open('./default.ini', 'w') as f: f.write(datacontents)</snippet></ROW><ROW><id>18927931</id><snippet>https://stream.twitter.com/1.1/statuses/filter.json?track=emmy awards, ios 7
</snippet></ROW><ROW><id>18927931</id><snippet>https://stream.twitter.com/1.1/statuses/filter.json?track=emmy%20awards%2C%20ios%207
</snippet></ROW><ROW><id>18927931</id><snippet>urllib.quote</snippet></ROW><ROW><id>18927931</id><snippet>In [1]: import urllib

In [2]: search_query = u"emmy awards, ios 7"

In [3]: urllib.quote(search_query)
Out[3]: 'emmy%20awards%2C%20ios%207'

In [4]: streaming_url = u"https://stream.twitter.com/1.1/statuses/filter.json?rack={}".format(urllib.quote(search_query))

In [5]: streaming_url
Out[5]: u'https://stream.twitter.com/1.1/statuses/filter.json?rack=emmy%20awards%2C%20ios%207'

In [6]:
</snippet></ROW><ROW><id>18927936</id><snippet>funeval(90.,0.001, 0.0002)</snippet></ROW><ROW><id>18927936</id><snippet>Temp</snippet></ROW><ROW><id>18927936</id><snippet>scipy.optimize</snippet></ROW><ROW><id>18927936</id><snippet>T</snippet></ROW><ROW><id>18927936</id><snippet>funeval</snippet></ROW><ROW><id>18927936</id><snippet>scipy.integrate</snippet></ROW><ROW><id>18927936</id><snippet>def funeval(Temp,eps,sig):
    out=[]
    for T in Temp:
        val = scipy.integrate.quad( lambda x: np.expm1( ((4.*eps)/T)* ((sig/x)**12.-(sig/x)**6.)* (x**2.) ), 0.0, np.inf )[0]
        out.append(val)
    return np.array(out)

def residuals(p,y,Temp):
    eps,sig = p
    err = y-(funeval(Temp,eps,sig) )
    return err

print funeval([90],0.001, 0.0002)

plsq = scipy.optimize.leastsq(residuals, [0.00001, 0.0002], args=(B, T))
(array([  3.52991175e-06,   9.04143361e-02]), 1)
</snippet></ROW><ROW><id>18928021</id><snippet>float</snippet></ROW><ROW><id>18928021</id><snippet>int</snippet></ROW><ROW><id>18928021</id><snippet>int</snippet></ROW><ROW><id>18928021</id><snippet>float</snippet></ROW><ROW><id>18928021</id><snippet>complex</snippet></ROW><ROW><id>18928021</id><snippet>double</snippet></ROW><ROW><id>18928021</id><snippet>double</snippet></ROW><ROW><id>18928021</id><snippet>sys.float_info</snippet></ROW><ROW><id>18928132</id><snippet>Enumerable#select</snippet></ROW><ROW><id>18928132</id><snippet>lists = ['dave','austin','bob','jimmy','john','jimmy']
lists.select{|x| x == 'jimmy'} # =&gt; ["jimmy", "jimmy"]
</snippet></ROW><ROW><id>18928481</id><snippet>itertools.groupby</snippet></ROW><ROW><id>18928481</id><snippet>from itertools import groupby
from operator import itemgetter

def filter_data(data):
    for classname, group in itertools.groupby(data, itemgetter(2)):
        filtered_group = [line for line in group if some_condition(line)]
        new_count = len(filtered_group)
        for line in filtered_group:
            line[5] = new_count
            yield line
</snippet></ROW><ROW><id>18928481</id><snippet>some_condition</snippet></ROW><ROW><id>18928481</id><snippet>import csv
import random

def some_condition(line):
    return random.random() &lt; 0.5 # delete lines randomly with 50% probability

data = """Jan-20,Data,Class xpv,4,11yo+,4,more data....
Jan-20,Data,Class xpv,4,11yo+,4,more data....
Jan-20,Data,Class xpv,4,11yo+,4,more data....
Jan-20,Data,Class xpv,4,11yo+,4,more data....
Jan-30,Data,Class tn2,4,10yo+,12,more data....
Jan-30,Data,Class tn2,4,10yo+,12,more data....
Jan-30,Data,Class tn2,4,10yo+,12,more data....
Jan-30,Data,Class tn2,4,10yo+,12,more data....
Jan-30,Data,Class tn2,4,10yo+,12,more data....
Jan-30,Data,Class tn2,4,10yo+,12,more data....
Jan-30,Data,Class tn2,4,10yo+,12,more data....
Jan-30,Data,Class tn2,4,10yo+,12,more data....
Jan-30,Data,Class tn2,4,10yo+,12,more data....
Jan-30,Data,Class tn2,4,10yo+,12,more data....
Jan-30,Data,Class tn2,4,10yo+,12,more data....
Jan-30,Data,Class tn2,4,10yo+,12,more data....
Jan-50,Data,Class 22zn,2,10yo+,6,more data....
Jan-50,Data,Class 22zn,2,10yo+,6,more data....
Jan-50,Data,Class 22zn,2,10yo+,6,more data....
Jan-50,Data,Class 22zn,2,10yo+,6,more data....
Jan-50,Data,Class 22zn,2,10yo+,6,more data....
Jan-50,Data,Class 22zn,2,10yo+,6,more data....""".splitlines()

for line in filter_data(csv.reader(data)):
    print(line)
</snippet></ROW><ROW><id>18928481</id><snippet>with open('myfile.csv', 'rb') as f_in, open('myfile_filtered.csv', 'wb') as f_out:
    reader = csv.reader(f_in)
    writer = csv.writer(f_out)
    writer.writerows(filter_data(reader))
</snippet></ROW><ROW><id>18928481</id><snippet>newline=""</snippet></ROW><ROW><id>18928481</id><snippet>csv</snippet></ROW><ROW><id>18928539</id><snippet>def isIt(arg):
    lightweightResult = lightweightFunction(arg)
    expensiveResult = superExpensiveFunction(arg)

    // obviously you can use both results here, so both have been computed.


    // return the values directly, no further computation done here:
    return (lightweightResult and expensiveResult)
</snippet></ROW><ROW><id>18928539</id><snippet>expensiveResult</snippet></ROW><ROW><id>18928539</id><snippet>superExpensiveFunction</snippet></ROW><ROW><id>18928539</id><snippet>funcB(arg)</snippet></ROW><ROW><id>18928539</id><snippet>funcA(arg)</snippet></ROW><ROW><id>18928539</id><snippet>def isIt(arg):
    return (lightweightFunction(arg) and superExpensiveFunction(arg))
</snippet></ROW><ROW><id>18928539</id><snippet>any()</snippet></ROW><ROW><id>18928539</id><snippet>all()</snippet></ROW><ROW><id>18928634</id><snippet>following-sibling</snippet></ROW><ROW><id>18928634</id><snippet>hxs.select("//th[text()='ID']/following-sibling::td[1]/a/@href")
</snippet></ROW><ROW><id>18929025</id><snippet>In [11]: def f(x, threshold=0.3):
             first = (x &gt; threshold).values.argmax()
             if x.iloc[first] &gt; threshold:
                 return pd.concat([pd.Series('No', x.index[:first]),
                                   pd.Series('Yes', [x.index[first]]),
                                   pd.Series('Already', x.index[first+1:])])
             else:
                 return pd.Series('No', x.index)

In [12]: df.groupby('ID')['Value'].apply(f)
Out[12]:
0         No
1        Yes
2    Already
3        Yes
4         No
5        Yes
dtype: object

In [13]: df['Result'] = df.groupby('ID')['Value'].apply(f)

In [14]: df
Out[14]:
  ID  Value        Date   Result
0  A   0.21  2010-01-01       No
1  A   0.31  2010-02-01      Yes
2  A   0.29  2010-02-15  Already
3  B   0.23  2010-01-01      Yes
4  C   0.21  2010-02-01       No
5  C   0.91  2010-02-15      Yes
</snippet></ROW><ROW><id>18929254</id><snippet>def natural_key(self):
    return (self.team.natural_key(),self.year)
</snippet></ROW><ROW><id>18929308</id><snippet>gurl = 'http://toolbarqueries.google.com/tbr?client=navclient-auto&amp;ch=%s&amp;features=Rank&amp;q=info:%s' % (hsh,urllib.quote(URL))
</snippet></ROW><ROW><id>18929655</id><snippet>request.POST</snippet></ROW><ROW><id>18929655</id><snippet>form.cleaned_data</snippet></ROW><ROW><id>18929655</id><snippet>if request.method =='POST':
    workform=WorkdayForm(request.POST)
    if workform.is_valid():
        instance = workform.save(commit=False)
        instance.unit = unit
        instance.hospital = hospital

        instance.start = form.cleaned_data['start']
        instance.end = form.cleaned_data['end']
        timediff = instance.end - instance.start
        instance.hours = timediff.seconds/3600

        instance.system = system
        instance.save()
</snippet></ROW><ROW><id>18929655</id><snippet>hours</snippet></ROW><ROW><id>18929655</id><snippet>DateTimeField</snippet></ROW><ROW><id>18929685</id><snippet>celery.Task</snippet></ROW><ROW><id>18929685</id><snippet>task_id</snippet></ROW><ROW><id>18929685</id><snippet>retval</snippet></ROW><ROW><id>18929780</id><snippet>list1 = list2 = list3 = list()
</snippet></ROW><ROW><id>18929780</id><snippet>list3</snippet></ROW><ROW><id>18929780</id><snippet>list3</snippet></ROW><ROW><id>18929780</id><snippet>list2</snippet></ROW><ROW><id>18929780</id><snippet>list1</snippet></ROW><ROW><id>18929780</id><snippet>data = [10, 20, 30]
lists = [[], [], []]

for i in range(len(data)):
    lists[i].append(data[i])

for lst in lists:
    print lst
</snippet></ROW><ROW><id>18929780</id><snippet>data = [10, 20, 30]
lists = [ [x] for x in data ]
</snippet></ROW><ROW><id>18929825</id><snippet>Cloth</snippet></ROW><ROW><id>18929825</id><snippet>Utensil</snippet></ROW><ROW><id>18929825</id><snippet>object_id</snippet></ROW><ROW><id>18929825</id><snippet>{% load i18n %}
&lt;div class="comment"&gt;
&lt;form action="{% url "comment.views.create" %}" method="post"&gt;
    {% csrf_token %}
        {% for field in form %}
            {{ field.label_tag }}
            {{ field }}&lt;p&gt;

        {% endfor %}
        &lt;input type="hidden" value="{{object_id}}" name="object_id"/&gt;
    &lt;input type="submit" value="{% trans "Submit" %}"&gt;
&lt;/form&gt;
&lt;/div&gt;
</snippet></ROW><ROW><id>18929825</id><snippet>object_id = request.POST['object_id']
</snippet></ROW><ROW><id>18929843</id><snippet>{{ reverse_url('login') }}</snippet></ROW><ROW><id>18930070</id><snippet>None</snippet></ROW><ROW><id>18930070</id><snippet>word = re.search(pattern2, line)

if word:
    print word.group()
else:
    print "No match"
</snippet></ROW><ROW><id>18930102</id><snippet>f.seek(0)</snippet></ROW><ROW><id>18930102</id><snippet>f.seek(0)
for row in cr:
    # loop code 
</snippet></ROW><ROW><id>18930287</id><snippet>from io import StringIO
from lxml import etree

dtd.elements()[0].content.right.left
#&gt;&gt;&gt; &lt;lxml.etree._DTDElementContentDecl object name='c' type='element' occur='once' at 0x7f6999a28250&gt;
</snippet></ROW><ROW><id>18930333</id><snippet>Response.iter_lines()</snippet></ROW><ROW><id>18930333</id><snippet>r = requests.get(somePage, stream=True)

for line in r.iter_lines(1024):
    # Do stuff on this line.
</snippet></ROW><ROW><id>18930334</id><snippet>x</snippet></ROW><ROW><id>18930334</id><snippet>1</snippet></ROW><ROW><id>18930334</id><snippet>y</snippet></ROW><ROW><id>18930334</id><snippet>(set-option :auto-config false)
(declare-const x Int)
(declare-const y Int)
(assert (or (= x 1) (= y 1)))
(check-sat)
(get-model)
</snippet></ROW><ROW><id>18930401</id><snippet>+=</snippet></ROW><ROW><id>18930401</id><snippet>+</snippet></ROW><ROW><id>18930401</id><snippet>%</snippet></ROW><ROW><id>18930401</id><snippet>song = ''  # Accumulators need to start empty
for _ in range(3):  # Don't really need the stanza variable
    animal = raw_input("What animal? ")
    animalSound = raw_input("What sound does a %s make? " %(animal))

    song += "Old MacDonald had an errno. EIEIO\n"
    song += "His farm had a " + animal + " EIEIO\n"
    song += "His " + animal + "made a noise: " + animalSound + "\n"
print song
</snippet></ROW><ROW><id>18930401</id><snippet>str.join()</snippet></ROW><ROW><id>18930484</id><snippet>vim</snippet></ROW><ROW><id>18930484</id><snippet>cat -e</snippet></ROW><ROW><id>18930484</id><snippet>less</snippet></ROW><ROW><id>18930484</id><snippet>set tabstop=4</snippet></ROW><ROW><id>18930484</id><snippet>vim</snippet></ROW><ROW><id>18930484</id><snippet>:retab</snippet></ROW><ROW><id>18930484</id><snippet>tabstop</snippet></ROW><ROW><id>18930484</id><snippet>retab</snippet></ROW><ROW><id>18930484</id><snippet>less</snippet></ROW><ROW><id>18930484</id><snippet>vim</snippet></ROW><ROW><id>18930484</id><snippet>:retab</snippet></ROW><ROW><id>18930484</id><snippet>.vimrc</snippet></ROW><ROW><id>18930484</id><snippet>set softtabstop=4
set smarttab
</snippet></ROW><ROW><id>18930572</id><snippet>O(1)</snippet></ROW><ROW><id>18930572</id><snippet>O(log n)</snippet></ROW><ROW><id>18930572</id><snippet>log n</snippet></ROW><ROW><id>18930572</id><snippet>n</snippet></ROW><ROW><id>18930572</id><snippet>unordered_set</snippet></ROW><ROW><id>18930572</id><snippet>unordered_map</snippet></ROW><ROW><id>18930572</id><snippet>hash_*</snippet></ROW><ROW><id>18930572</id><snippet>unordered_*</snippet></ROW><ROW><id>18930714</id><snippet>$ convert IMG_0707.png IMG_0707-new.png 
convert: IHDR: CRC error `IMG_0707.png' @ error/png.c/MagickPNGErrorHandler/1309.
convert: corrupt image `IMG_0707.png' @ error/png.c/ReadPNGImage/3294.
convert: missing an image filename `IMG_0707-new.png' @ error/convert.c/ConvertImageCommand/3011.
</snippet></ROW><ROW><id>18930977</id><snippet>if gpio.input(i):

    if gpio.input(i) and p == 0:

        p = 1

        time.sleep(0.5)

        while not(gpio.input(i)) and p == 1:

            gpio.output(o, False)

            time.sleep(t)

            gpio.output(o, True)

            time.sleep(t) 

        else:

            while gpio.input(i):

                p = 0

                time.sleep(0.5)
</snippet></ROW><ROW><id>18930980</id><snippet>"yes"</snippet></ROW><ROW><id>18930980</id><snippet>elif</snippet></ROW><ROW><id>18930980</id><snippet>and len(a)</snippet></ROW><ROW><id>18930980</id><snippet>!=0</snippet></ROW><ROW><id>18931115</id><snippet>import sys
import re
import csv

colonseperated = re.compile(' *(.+) *: *(.+) *')
fixedfields = re.compile('(\d{3} \w{7}) +(.*)')

matchers = [colonseperated, fixedfields]

outfile = csv.writer(open('out.csv', 'w'))

outfile.writerow(['Filename', 'Key', 'Value'])
for filename in sys.argv[1:]:   
    for line in open(filename):
        line = line.strip()
        for matcher in matchers:
            match = matcher.match(line)
            if match:
                outfile.writerow([filename] + list(match.groups()))
</snippet></ROW><ROW><id>18931115</id><snippet>parser.py</snippet></ROW><ROW><id>18931115</id><snippet>python parser.py *.infile</snippet></ROW><ROW><id>18931115</id><snippet>import csv

headers = []
rows = {}
filenames = []

outfile = csv.writer(open('flat.csv', 'w'))
infile = csv.reader(open('out.csv'))
infile.next()

for filename, key, value in infile:
    if not filename in rows:
        rows[filename] = {}
        filenames.append(filename)
    if key not in headers:
        headers.append(key)
    rows[filename][key] = value

outfile.writerow(headers)
for filename in filenames:
    outfile.writerow([rows[filename].get(header, '') for header in headers])
</snippet></ROW><ROW><id>18931284</id><snippet>str</snippet></ROW><ROW><id>18931284</id><snippet>answer = random.randint(1,8)
</snippet></ROW><ROW><id>18931284</id><snippet>answer = str(random.randint(1,8))
</snippet></ROW><ROW><id>18931339</id><snippet>time1</snippet></ROW><ROW><id>18931339</id><snippet>feb2012</snippet></ROW><ROW><id>18931339</id><snippet>for info in courses[time1][course]:
</snippet></ROW><ROW><id>18931479</id><snippet>get_properties</snippet></ROW><ROW><id>18931479</id><snippet>import logging
logging.basicConfig(level=logging.DEBUG)
</snippet></ROW><ROW><id>18931479</id><snippet>__metadata__</snippet></ROW><ROW><id>18931479</id><snippet>props = my_rel.__metadata__["data"]
</snippet></ROW><ROW><id>18931479</id><snippet>match</snippet></ROW><ROW><id>18931479</id><snippet>for rel in graph_db.match("KNOWS"):
    print rel.start_node["name"] + " knows " + rel.end_node["name"]
</snippet></ROW><ROW><id>18931589</id><snippet>gene</snippet></ROW><ROW><id>18931589</id><snippet>file_list</snippet></ROW><ROW><id>18931589</id><snippet>file_list.index()</snippet></ROW><ROW><id>18931589</id><snippet>enumerate()</snippet></ROW><ROW><id>18931589</id><snippet>for gene in genes_of_interest:
    print '\n{}:'.format(gene)
    for i, file in enumerate(file_list):
        print '{}: {}'.format(file, exp_pull(i, gene))
</snippet></ROW><ROW><id>18931589</id><snippet>int()</snippet></ROW><ROW><id>18931589</id><snippet>exp_pull()</snippet></ROW><ROW><id>18931589</id><snippet>set_list()</snippet></ROW><ROW><id>18931589</id><snippet>file_list</snippet></ROW><ROW><id>18931589</id><snippet>exp_pull()</snippet></ROW><ROW><id>18931589</id><snippet>def exp_pull(sample, gene):
    if sample &gt;= len(set_list):
        # no such entry in set_list
        return 0.0
    i, (j, k) = set_list[sample]
    sample_name = dict(zip(j, mean_values))
    return round(sample_name.get(gene, 0), 3)
</snippet></ROW><ROW><id>18931589</id><snippet>sample_name.get()</snippet></ROW><ROW><id>18931589</id><snippet>round()</snippet></ROW><ROW><id>18931589</id><snippet>None</snippet></ROW><ROW><id>18931646</id><snippet>sorted(dic.items(), key=lambda pair: type(pair[1]), reverse=True)
</snippet></ROW><ROW><id>18931646</id><snippet>[('a', '11'), ('g', 'a'), ('c', [1, 3, 4]), ('b', [1, 2, 3])]
</snippet></ROW><ROW><id>18931924</id><snippet>DWORD</snippet></ROW><ROW><id>18931924</id><snippet>HANDLE</snippet></ROW><ROW><id>18931924</id><snippet>_pack_ = 1</snippet></ROW><ROW><id>18931924</id><snippet>LPSTR</snippet></ROW><ROW><id>18931924</id><snippet>LPWSTR</snippet></ROW><ROW><id>18931924</id><snippet>STARTUPINFOW</snippet></ROW><ROW><id>18931924</id><snippet>from ctypes import *
from ctypes.wintypes import *

INVALID_HANDLE_VALUE = -1
CREATE_UNICODE_ENVIRONMENT = 0x00000400

CData = Array.__base__
LPBYTE = POINTER(BYTE)

class PROCESS_INFORMATION(Structure):
    '''http://msdn.microsoft.com/en-us/library/ms684873'''
    _fields_ = [
        ('hProcess',    HANDLE),
        ('hThread',     HANDLE),
        ('dwProcessId', DWORD),
        ('dwThreadId',  DWORD),
    ]
LPPROCESS_INFORMATION = POINTER(PROCESS_INFORMATION)


class STARTUPINFOW(Structure):
    'http://msdn.microsoft.com/en-us/library/ms686331'
    _fields_ = [
        ('cb',              DWORD),
        ('lpReserved',      LPWSTR),
        ('lpDesktop',       LPWSTR),
        ('lpTitle',         LPWSTR),
        ('dwX',             DWORD),
        ('dwY',             DWORD),
        ('dwXSize',         DWORD),
        ('dwYSize',         DWORD),
        ('dwXCountChars',   DWORD),
        ('dwYCountChars',   DWORD),
        ('dwFillAttribute', DWORD),
        ('dwFlags',         DWORD),
        ('wShowWindow',     WORD),
        ('cbReserved2',     WORD),
        ('lpReserved2',     LPBYTE),
        ('hStdInput',       HANDLE),
        ('hStdOutput',      HANDLE),
        ('hStdError',       HANDLE),
    ]
LPSTARTUPINFOW = POINTER(STARTUPINFOW)


# http://msdn.microsoft.com/en-us/library/ms682431
windll.advapi32.CreateProcessWithLogonW.restype = BOOL
windll.advapi32.CreateProcessWithLogonW.argtypes = [
    LPCWSTR, # lpUsername
    LPCWSTR, # lpDomain
    LPCWSTR, # lpPassword
    DWORD,   # dwLogonFlags
    LPCWSTR, # lpApplicationName
    LPWSTR,  # lpCommandLine (inout)
    DWORD,   # dwCreationFlags
    LPCWSTR, # lpEnvironment  (force Unicode)
    LPCWSTR, # lpCurrentDirectory
    LPSTARTUPINFOW, # lpStartupInfo
    LPPROCESS_INFORMATION, # lpProcessInfo (out)
]
</snippet></ROW><ROW><id>18931924</id><snippet>def CreateProcessWithLogonW(
    lpUsername=None, 
    lpDomain=None, 
    lpPassword=None, 
    dwLogonFlags=0, 
    lpApplicationName=None, 
    lpCommandLine=None,
    dwCreationFlags=0, 
    lpEnvironment=None, 
    lpCurrentDirectory=None,
    startupInfo=None
):
    if (lpCommandLine is not None and 
        not isinstance(lpCommandLine, CData)
    ):
        lpCommandLine = create_unicode_buffer(lpCommandLine)
    dwCreationFlags |= CREATE_UNICODE_ENVIRONMENT               
    if startupInfo is None:
        startupInfo = STARTUPINFOW(sizeof(STARTUPINFOW))
    processInformation = PROCESS_INFORMATION(
        INVALID_HANDLE_VALUE, INVALID_HANDLE_VALUE)
    success = windll.advapi32.CreateProcessWithLogonW(
        lpUsername, lpDomain, lpPassword, dwLogonFlags, lpApplicationName,
        lpCommandLine, dwCreationFlags, lpEnvironment, lpCurrentDirectory, 
        byref(startupInfo), byref(processInformation))
    if not success:
        raise WinError()
    return processInformation


if __name__ == '__main__':
    pi = CreateProcessWithLogonW(
        "User", "Domain", "Password", 0, None, 
        "C:\\Windows\\notepad.exe")
    print(pi.dwProcessId)
</snippet></ROW><ROW><id>18931924</id><snippet>kernel32.CloseHandle</snippet></ROW><ROW><id>18931924</id><snippet>hProcess</snippet></ROW><ROW><id>18931924</id><snippet>hThread</snippet></ROW><ROW><id>18932062</id><snippet>results</snippet></ROW><ROW><id>18932062</id><snippet>for dictionary in results:
    for key, value in dictionary.items():
        print(key, "-&gt;", value)
</snippet></ROW><ROW><id>18932062</id><snippet>dict.items()</snippet></ROW><ROW><id>18932135</id><snippet>python path_to_scripts\f2py.py -c -m module_name prog.f90 --fcompiler=gfortran
</snippet></ROW><ROW><id>18932135</id><snippet>python path_to_scripts/f2py.py -c -m module_name prog.f90 --fcompiler=gfortran
</snippet></ROW><ROW><id>18932135</id><snippet>path_to_scripts</snippet></ROW><ROW><id>18932135</id><snippet>Scripts</snippet></ROW><ROW><id>18932135</id><snippet>C:\Python27\Scripts</snippet></ROW><ROW><id>18932327</id><snippet>io.TextIOBase</snippet></ROW><ROW><id>18932327</id><snippet>io.BufferedIOBase</snippet></ROW><ROW><id>18932327</id><snippet>io.RawIOBase</snippet></ROW><ROW><id>18932327</id><snippet>io.TextIOBase</snippet></ROW><ROW><id>18932327</id><snippet>io.BufferedIOBase</snippet></ROW><ROW><id>18932327</id><snippet>f.buffer.raw</snippet></ROW><ROW><id>18932327</id><snippet>.seek</snippet></ROW><ROW><id>18932327</id><snippet>help(f.buffer.raw.seek)
</snippet></ROW><ROW><id>18932327</id><snippet>f.buffer</snippet></ROW><ROW><id>18932349</id><snippet>dict</snippet></ROW><ROW><id>18932349</id><snippet>&gt;&gt;&gt; from operator import add
&gt;&gt;&gt; lis = [[ ['x', '1', '2', '3', '4'],
   ['y', '5', '6', '7', '8']],
 [ ['x', 'a', 'b', 'c', 'd'],
   ['y', 'e', 'f', 'g', 'h']  ] ]
&gt;&gt;&gt; dic = {}
for item in lis:
    for x in item:
        k, v = x[0], x[1:]
        if k in dic:
            dic[k] = map(add, dic[k], v)
        else:
            dic[k] = v
...             
&gt;&gt;&gt; dic
{'y': ['5e', '6f', '7g', '8h'], 'x': ['1a', '2b', '3c', '4d']}
#list of lists
&gt;&gt;&gt; [[k] + v for k, v in dic.iteritems()]
[['y', '5e', '6f', '7g', '8h'], ['x', '1a', '2b', '3c', '4d']]
</snippet></ROW><ROW><id>18932349</id><snippet>zip</snippet></ROW><ROW><id>18932349</id><snippet>reduce</snippet></ROW><ROW><id>18932349</id><snippet>&gt;&gt;&gt; from operator import add
&gt;&gt;&gt; def func(x, y):
...     return map(add, x, y[1:])

&gt;&gt;&gt; [[item[0][0]] + reduce(func, item[1:], item[0][1:])  for item in zip(*lis)]
[['x', '1a', '2b', '3c', '4d'], ['y', '5e', '6f', '7g', '8h']]
</snippet></ROW><ROW><id>18932350</id><snippet>if direction == 'Right':
</snippet></ROW><ROW><id>18932622</id><snippet>__del__</snippet></ROW><ROW><id>18932622</id><snippet>__del__</snippet></ROW><ROW><id>18932816</id><snippet>print</snippet></ROW><ROW><id>18932816</id><snippet>sys.stdout</snippet></ROW><ROW><id>18932816</id><snippet>Content-Type</snippet></ROW><ROW><id>18932816</id><snippet>\r\n</snippet></ROW><ROW><id>18932816</id><snippet>import sys

# ...
sys.stdout.write("Content-Type: application/zip\r\n")
sys.stdout.write("Prama: no-cache\r\n")
sys.stdout.write("Expires: 0\r\n")
sys.stdout.write("Cache-Control: must-revalidate, post-check=0, pre-check=0\r\n")
sys.stdout.write("Content-Type: application/octet-stream\r\n")
sys.stdout.write("Content-Disposition: attachment; filename=ternos.205.zip\r\n")
sys.stdout.write("Content-Transfer-Encoding: binary\r\n")
sys.stdout.write("Content-Length: 144303765\r\n")
sys.stdout.write("\r\n")
</snippet></ROW><ROW><id>18932816</id><snippet>\n</snippet></ROW><ROW><id>18932816</id><snippet>\r\n</snippet></ROW><ROW><id>18932816</id><snippet>print "Content-Type: application/zip"
print "Prama: no-cache"
print "Expires: 0"
print "Cache-Control: must-revalidate, post-check=0, pre-check=0"
print "Content-Type: application/octet-stream"
print "Content-Disposition: attachment; filename=ternos.205.zip"
print "Content-Transfer-Encoding: binary"
print "Content-Length: 144303765"
print
</snippet></ROW><ROW><id>18932816</id><snippet>.raw</snippet></ROW><ROW><id>18932816</id><snippet>sys.stdout</snippet></ROW><ROW><id>18932816</id><snippet>shutil.copyfileobj</snippet></ROW><ROW><id>18932816</id><snippet>import shutil

shutil.copyfileobj(myfile.raw, sys.stdout)
</snippet></ROW><ROW><id>18932816</id><snippet>stdout</snippet></ROW><ROW><id>18932839</id><snippet>class MyClass(object):
    def getData(self):
        print "I am not able to call after every interval"

def main():
    while "foo" != "bar":
        m = MyClass()
        Timer(2.0, m.getData()).start()

main()
</snippet></ROW><ROW><id>18932916</id><snippet>url=... AND state=1</snippet></ROW><ROW><id>18932916</id><snippet>AND</snippet></ROW><ROW><id>18932916</id><snippet>def isCrawledURL(self, url):
    self.cursor.execute("SELECT COUNT(*) FROM urls WHERE url=? AND state=1", (url,))
    ret = self.cursor.fetchone()
    return ret[0]
</snippet></ROW><ROW><id>18932916</id><snippet>self.cursor.execute("INSERT INTO urls VALUES (?, ?)", (url,state))
</snippet></ROW><ROW><id>18932916</id><snippet>self.cursor.execute("UPDATE urls SET state=? WHERE url=?", (state,url))
</snippet></ROW><ROW><id>18932916</id><snippet>cursor.execute()</snippet></ROW><ROW><id>18933002</id><snippet>_mapping</snippet></ROW><ROW><id>18933002</id><snippet>strftime</snippet></ROW><ROW><id>18933002</id><snippet>import datetime as DT

def short_date(date):
    date = DT.datetime.strptime(date, '%B %d, %Y')
    return date.strftime('%b %d, %Y')

print(short_date('October 28, 2010'))
</snippet></ROW><ROW><id>18933002</id><snippet>Oct 28, 2010
</snippet></ROW><ROW><id>18933002</id><snippet>strptime(date, '%B %d, %Y')</snippet></ROW><ROW><id>18933002</id><snippet>datetime.datetime</snippet></ROW><ROW><id>18933002</id><snippet>strftime</snippet></ROW><ROW><id>18933048</id><snippet>--</snippet></ROW><ROW><id>18933048</id><snippet>--</snippet></ROW><ROW><id>18933048</id><snippet>nargs=2</snippet></ROW><ROW><id>18933048</id><snippet>narg='*'</snippet></ROW><ROW><id>18933048</id><snippet>+</snippet></ROW><ROW><id>18933048</id><snippet>REMAINDER</snippet></ROW><ROW><id>18933048</id><snippet>...</snippet></ROW><ROW><id>18933048</id><snippet>*</snippet></ROW><ROW><id>18933048</id><snippet>*</snippet></ROW><ROW><id>18933048</id><snippet>'(a*)(a*)'</snippet></ROW><ROW><id>18933048</id><snippet>nargs</snippet></ROW><ROW><id>18933048</id><snippet>--</snippet></ROW><ROW><id>18933048</id><snippet>-c</snippet></ROW><ROW><id>18933048</id><snippet>nargs='*'</snippet></ROW><ROW><id>18933101</id><snippet>map</snippet></ROW><ROW><id>18933101</id><snippet>import numpy as np, pandas as pd
import random, string

def make_test(num, width):
    s = [''.join(random.sample(string.ascii_lowercase, width)) for i in range(num)]
    df = pd.DataFrame({"a": s})
    return df
</snippet></ROW><ROW><id>18933101</id><snippet>Series</snippet></ROW><ROW><id>18933101</id><snippet>list</snippet></ROW><ROW><id>18933101</id><snippet>DataFrame</snippet></ROW><ROW><id>18933101</id><snippet>Series</snippet></ROW><ROW><id>18933101</id><snippet>ndarray</snippet></ROW><ROW><id>18933101</id><snippet>&gt;&gt;&gt; df = make_test(10, 10)
&gt;&gt;&gt; %timeit df['a'].map(lambda x: x.startswith('t'))
10000 loops, best of 3: 85.8 µs per loop
&gt;&gt;&gt; %timeit [x.startswith('t') for x in df['a']]
100000 loops, best of 3: 15.6 µs per loop
&gt;&gt;&gt; %timeit df['a'].str.startswith("t")
10000 loops, best of 3: 118 µs per loop
&gt;&gt;&gt; %timeit df[df['a'].map(lambda x: x.startswith('t'))]
1000 loops, best of 3: 304 µs per loop
&gt;&gt;&gt; %timeit df[[x.startswith('t') for x in df['a']]]
10000 loops, best of 3: 194 µs per loop
&gt;&gt;&gt; %timeit df[df['a'].str.startswith("t")]
1000 loops, best of 3: 348 µs per loop
</snippet></ROW><ROW><id>18933101</id><snippet>lambda</snippet></ROW><ROW><id>18933101</id><snippet>str.startswith</snippet></ROW><ROW><id>18933101</id><snippet>Series</snippet></ROW><ROW><id>18933101</id><snippet>&gt;&gt;&gt; df = make_test(10**5, 10)
&gt;&gt;&gt; %timeit df['a'].map(lambda x: x.startswith('t'))
10 loops, best of 3: 46.6 ms per loop
&gt;&gt;&gt; %timeit [x.startswith('t') for x in df['a']]
10 loops, best of 3: 27.8 ms per loop
&gt;&gt;&gt; %timeit df['a'].str.startswith("t")
10 loops, best of 3: 48.5 ms per loop
&gt;&gt;&gt; %timeit df[df['a'].map(lambda x: x.startswith('t'))]
10 loops, best of 3: 47.1 ms per loop
&gt;&gt;&gt; %timeit df[[x.startswith('t') for x in df['a']]]
10 loops, best of 3: 52.8 ms per loop
&gt;&gt;&gt; %timeit df[df['a'].str.startswith("t")]
10 loops, best of 3: 49.6 ms per loop
</snippet></ROW><ROW><id>18933101</id><snippet>map</snippet></ROW><ROW><id>18933101</id><snippet>array</snippet></ROW><ROW><id>18933101</id><snippet>Series</snippet></ROW><ROW><id>18933101</id><snippet>&gt;&gt;&gt; %timeit df[np.array([x.startswith('t') for x in df['a']])]
10 loops, best of 3: 40.7 ms per loop
&gt;&gt;&gt; %timeit df[pd.Series([x.startswith('t') for x in df['a']])]
10 loops, best of 3: 37.5 ms per loop
</snippet></ROW><ROW><id>18933101</id><snippet>timeit</snippet></ROW><ROW><id>18933173</id><snippet>HttpResponse</snippet></ROW><ROW><id>18933173</id><snippet>HttpResponse()</snippet></ROW><ROW><id>18933173</id><snippet>HttpResponse(str(QueryList))
</snippet></ROW><ROW><id>18933216</id><snippet>pivot_table</snippet></ROW><ROW><id>18933216</id><snippet>&gt;&gt;&gt; df.pivot_table(values='q_visits', cols='q_date', rows='q_string')
q_date     2012-10-02 00:00:00
q_string                      
current                    280
molecular                  259
neuron                     364
nucleus                   1790
stem                       201
</snippet></ROW><ROW><id>18933291</id><snippet>a</snippet></ROW><ROW><id>18933376</id><snippet>url</snippet></ROW><ROW><id>18933376</id><snippet>{% url 'imports_tournament' tournament_id=tournament.id %}
</snippet></ROW><ROW><id>18933507</id><snippet>re.match('[A-Za-z0-9]+$', '!@#@$@$@')
</snippet></ROW><ROW><id>18933507</id><snippet>valid = re.match('[A-Za-z0-9]+$', '!@#@$@$@')
    if valid:
        logUtb(f, 'Alphanumeric')
    else:
        logUtb(f, 'Unknown characters')
</snippet></ROW><ROW><id>18933784</id><snippet>re.finditer</snippet></ROW><ROW><id>18933784</id><snippet>'(?={0})'.format(p3)</snippet></ROW><ROW><id>18933784</id><snippet>re</snippet></ROW><ROW><id>18933784</id><snippet>re.escape</snippet></ROW><ROW><id>18933784</id><snippet>[m.start() for m in re.finditer('(?={0})'.format(re.escape(p3)), p1)]
</snippet></ROW><ROW><id>18933805</id><snippet>args</snippet></ROW><ROW><id>18933805</id><snippet>sum((1,2,3,4))
</snippet></ROW><ROW><id>18933805</id><snippet>sum()</snippet></ROW><ROW><id>18933805</id><snippet>sum()</snippet></ROW><ROW><id>18933805</id><snippet>sum()</snippet></ROW><ROW><id>18933839</id><snippet>FormRequest.from_response()</snippet></ROW><ROW><id>18933839</id><snippet>http://www.atlanticfirearms.com/browse-our-products.html</snippet></ROW><ROW><id>18933839</id><snippet>dont_filter=True</snippet></ROW><ROW><id>18933839</id><snippet>    if add_to_cart:
        # attempt to add to cart to verify availability
        request = FormRequest.from_response(response, formname="addtocartForm",
                      callback=self.parse_add_to_cart, dont_filter=True)
</snippet></ROW><ROW><id>18933839</id><snippet>CONCURRENT_REQUESTS = 1</snippet></ROW><ROW><id>18933852</id><snippet>class Dataset(object):

    def __init__(self):
        self.grade=[]

    def add(self, x):
        self.grade.append(x)
</snippet></ROW><ROW><id>18933852</id><snippet>list.append</snippet></ROW><ROW><id>18933852</id><snippet>xStr</snippet></ROW><ROW><id>18933852</id><snippet>if xStr == ''</snippet></ROW><ROW><id>18933852</id><snippet>False</snippet></ROW><ROW><id>18933852</id><snippet>float('')</snippet></ROW><ROW><id>18933852</id><snippet>ValueError</snippet></ROW><ROW><id>18933852</id><snippet>try:
   xStr = float(input('Enter a number (&lt;Enter&gt; to quit): '))
   data.add(xStr)
except ValueError:
   break
</snippet></ROW><ROW><id>18933852</id><snippet>while-True</snippet></ROW><ROW><id>18933852</id><snippet>from functools import partial
par = partial(input, 'Enter a number (&lt;Enter&gt; to quit): ')
for inp in iter(par, ''):
    try:
       inp = float(inp)
       data.add(inp) 
    except ValueError:
       break
</snippet></ROW><ROW><id>18933852</id><snippet>object</snippet></ROW><ROW><id>18933852</id><snippet>&gt;&gt;&gt; data = Dataset()
&gt;&gt;&gt; data.add(1)
&gt;&gt;&gt; data.grade
[1]
</snippet></ROW><ROW><id>18933894</id><snippet>lookups = [2, 4, 6, 8, 10, 12, 14, 16]
index = 0
def increment_next_value():
    global lookups, index
    lookups[index] += 1
    index += 1
</snippet></ROW><ROW><id>18933894</id><snippet>lookups</snippet></ROW><ROW><id>18933897</id><snippet>&lt;a&gt;</snippet></ROW><ROW><id>18933897</id><snippet>nm</snippet></ROW><ROW><id>18933897</id><snippet>from bs4 import BeautifulSoup
import re

soup = BeautifulSoup(open('xmlfile', 'r'), 'xml')

data = []
for a in soup.find_all('a', attrs={"href": re.compile("nm\d+")}):
    s = re.search(r'nm\d+', a['href']).group(0)
    data.append({a.text: s})

print(data)
</snippet></ROW><ROW><id>18933897</id><snippet>[{'Piero Mura': 'nm0613398'}, 
 {'Christopher T. Welch': 'nm0919527'}, 
 {'Julie Feiner': 'nm0270704'}, 
 {'Beth Sterner': 'nm0827953'}, 
 {'Judah Getz': 'nm2628443'}, 
 {'Jen Monnar': 'nm1084134'}]
</snippet></ROW><ROW><id>18934018</id><snippet>user</snippet></ROW><ROW><id>18934018</id><snippet>from flast.ext.login import current_user as user
</snippet></ROW><ROW><id>18934018</id><snippet>user</snippet></ROW><ROW><id>18934018</id><snippet>user</snippet></ROW><ROW><id>18934018</id><snippet>current_user</snippet></ROW><ROW><id>18934018</id><snippet>def user_is(role, user=None):
    """
    Takes an role (a string name of either a role or an ability) and returns the function if the user has that role
    """
    def wrapper(func):
        @wraps(func)
        def inner(*args, **kwargs):
            from .models import Role
            desired_role = Role.query.filter_by(
                name=role).first()
            if not user:
                try:
                    from flast.ext.login import current_user
                except ImportError:
                    raise ImportError(
                        'User argument not passed and Flask-Login current_user could not be imported.')
            else:
                current_user = user
            if desired_role in current_user.roles:
                return func(*args, **kwargs)
            else:
                # Make this do someting way better.
                return "You do not have access"
        return inner
    return wrapper
</snippet></ROW><ROW><id>18934018</id><snippet>user</snippet></ROW><ROW><id>18934018</id><snippet>default_user</snippet></ROW><ROW><id>18934018</id><snippet>user</snippet></ROW><ROW><id>18934019</id><snippet>from Tkinter import *
root = Tk()

search_label = Label(root, text="Enter search here:")
search_entry = Entry(root)
search_label.pack()
search_entry.pack()

def answer_box(query):
    return query

def go():
    query=search_entry.get()
    bibliography.delete('1.0', END)
    bibliography.insert(INSERT, answer_box(query))

go_button = Button(root, text="Go!", width=10, command=go)
go_button.pack()
bibliography = Text(root)
bibliography.pack()

root.mainloop()
</snippet></ROW><ROW><id>18934029</id><snippet>def percentage(self):
    total = 0.0
    for ch in self.poll.choice_set.all():
        total = total + ch
    return (self.votes/total)*100
</snippet></ROW><ROW><id>18934029</id><snippet>self.poll.choice_set.all():</snippet></ROW><ROW><id>18934029</id><snippet>Choice</snippet></ROW><ROW><id>18934029</id><snippet>choice.percentage()</snippet></ROW><ROW><id>18934029</id><snippet>def percentage(self):
    total = 0.0
    for ch in self.poll.choice_set.all():
        total = total + ch.votes
    return (self.votes/total)*100
</snippet></ROW><ROW><id>18934037</id><snippet>for i, b in enumerate(array):
    x = i*80 + 20  # &lt;-- add 20 to shift by half the linewidth
    pygame.draw.line(screen, colour, (x, 400), (x, (400-b)), 40)
</snippet></ROW><ROW><id>18934037</id><snippet>import sys
import random
import pygame

pygame.init()
screen = pygame.display.set_mode((1000,400))
colour = (0, 255, 0)
array = [random.randint(100, 400) for c in range(5)]

while True:
    for event in pygame.event.get():
        if event.type == pygame.QUIT:
            pygame.quit()
            sys.exit()

    linewidth = 40
    for i, b in enumerate(array):
        x = i*linewidth*2 + linewidth//2
        pygame.draw.line(screen, colour, (x, 400), (x, (400-b)), linewidth)

    pygame.display.update()
</snippet></ROW><ROW><id>18934053</id><snippet>+</snippet></ROW><ROW><id>18934053</id><snippet>print (str(a) + " mutiplied by " + str(b) + "multiplied by" + str(c) " equals " + str(d)))
                                                                   ^^^                  ^^^
</snippet></ROW><ROW><id>18934194</id><snippet>import lxml
</snippet></ROW><ROW><id>18934194</id><snippet>pip install lxml
</snippet></ROW><ROW><id>18934393</id><snippet>ast.literal_eval</snippet></ROW><ROW><id>18934393</id><snippet>&gt;&gt;&gt; from ast import literal_eval
with open('Appexstock.txt') as f:
    lis = [literal_eval(line) for line in f]
...     
&gt;&gt;&gt; lis
[['Ms Office', 'CD', 7, 'Microsoft'], ['Acrobat Reader', 'DVD', 12, 'Adobe'], ['Norton Antivirus', 'DVD', 24, 'Symantec']]
</snippet></ROW><ROW><id>18934393</id><snippet>&gt;&gt;&gt; import pickle
&gt;&gt;&gt; data = [["Ms Office", "CD", 7, "Microsoft"], ["Acrobat Reader", "DVD", 12, "Adobe"], ["Norton Antivirus", "DVD", 24, "Symantec"]]
with open('my_data', 'w') as f:
    pickle.dump(data, f)
...     
with open('my_data') as f:
    print pickle.load(f)
...     
[['Ms Office', 'CD', 7, 'Microsoft'], ['Acrobat Reader', 'DVD', 12, 'Adobe'], ['Norton Antivirus', 'DVD', 24, 'Symantec']]
</snippet></ROW><ROW><id>18934424</id><snippet>return</snippet></ROW><ROW><id>18934424</id><snippet>  for ext, sz in filedict.items():
    return print(ext_str+ext,cnt_str,len(sz),max_str,max(sz),min_str,min(sz), avg_str,calc_avg(sz))
</snippet></ROW><ROW><id>18934424</id><snippet>return</snippet></ROW><ROW><id>18934424</id><snippet>  for ext, sz in filedict.items():
    print(ext_str+ext,cnt_str,len(sz),max_str,max(sz),min_str,min(sz), avg_str,calc_avg(sz))
</snippet></ROW><ROW><id>18934550</id><snippet>DateField</snippet></ROW><ROW><id>18934550</id><snippet>DateField</snippet></ROW><ROW><id>18934550</id><snippet>today = datetime.date.today()</snippet></ROW><ROW><id>18934550</id><snippet>today + datetime.timedelta(8)</snippet></ROW><ROW><id>18934705</id><snippet>%Y</snippet></ROW><ROW><id>18934705</id><snippet>%y</snippet></ROW><ROW><id>18934705</id><snippet>%y  Year without century as a zero-padded decimal number.   00, 01, ..., 99  
%Y  Year with century as a decimal number.  1970, 1988, 2001, 2013   
</snippet></ROW><ROW><id>18934705</id><snippet>&gt;&gt;&gt; import datetime
&gt;&gt;&gt; datetime.datetime.strptime("September 17, 2013", '%B %d, %y')
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
  File "C:\Python27\lib\_strptime.py", line 328, in _strptime
    data_string[found.end():])
ValueError: unconverted data remains: 13
&gt;&gt;&gt; x = datetime.datetime.strptime("September 17, 2013", '%B %d, %Y')
&gt;&gt;&gt; x
datetime.datetime(2013, 9, 17, 0, 0)
&gt;&gt;&gt;
</snippet></ROW><ROW><id>18934705</id><snippet>x.strftime('%Y-%m-%d')
</snippet></ROW><ROW><id>18934727</id><snippet>pow(10, 25, 195)
</snippet></ROW><ROW><id>18934727</id><snippet>decimal.Decimal</snippet></ROW><ROW><id>18934727</id><snippet>&gt;&gt;&gt; from decimal import Decimal
&gt;&gt;&gt; pow(10, Decimal('25.0')) % 195
Decimal('10')
</snippet></ROW><ROW><id>18934966</id><snippet>import re

fp = open('class_data.txt')
lines = fp.read(-1)
fp.close()

records = re.split('\n\s*\n', lines) #Split all the records
#print len(records)
for record in records:
    data =  record.split('\n')
    classid, classtime, top_students = data[0], data[1], re.split('^[A-Za-z ]*:', data[2])[1].split(',')
    attendance, score, completed = re.split('^[A-Za-z ]*:', data[4])[1], re.split('^[A-Za-z ]*:', data[5])[1], data[6]
    print classid, classtime, top_students, len(top_students), attendance, score, completed 
</snippet></ROW><ROW><id>18934966</id><snippet>13A 11:00 [' Joe Smith', ' Tom Clarke', ' Jenna Sole'] 3  98.5%  54 Yes
13B 11:10 [' Anni Moy', ' Jessica Longate', ' Phillip Tome'] 3  98.5%  54 Yes
14A 11:10 [' John Doe', ' John Smith', ' Sam Ben'] 3  98.5%  54 Yes
</snippet></ROW><ROW><id>18934966</id><snippet>import re

fp = open('class_data.txt')
lines = fp.read(-1)
fp.close()

completed = Yes
class = 13A
time = 11:00  
isClassRecordFound = False

records = re.split('\n\s*\n', lines) #Split all the records
#print len(records)
for record in records:
    data =  record.split('\n')
    classid, classtime, top_students = data[0], data[1], re.split('^[A-Za-z ]*:', data[2])[1].split(',')
    attendance, score, completed = re.split('^[A-Za-z ]*:', data[4])[1], re.split('^[A-Za-z ]*:', data[5])[1], data[6]
    print classid, classtime, top_students, len(top_students), attendance, score, completed 
    if (completed):
        if (classid == class) and (time == classtime):
             isClassRecordFound = True
             break;
if not isClassRecordFound:
    with open("class_data.txt", "a") as myfile:
        myfile.write(class + '\n' + time)
</snippet></ROW><ROW><id>18935074</id><snippet>for stanza in stanza1:
        oldMac = oldMac + stanza + "\n" 
</snippet></ROW><ROW><id>18935074</id><snippet>oldMac += "\n".join(stanza1)
</snippet></ROW><ROW><id>18935074</id><snippet>stanza = """Old MacDonald had a farm, E-I-E-I-O,
          And on his farm he had a {0}, E-I-E-I-O
          With a {1}-{1} here - 
          And a {1}-{1} there - 
          Here a {1} there a {1}
          Everywhere a {1}-{1}
          Old MacDonald had a farm, E-I-E-I-O""".format(animal, animalSound)
</snippet></ROW><ROW><id>18935128</id><snippet>import sys
import zipfile

from bs4 import BeautifulSoup

with zipfile.ZipFile(sys.argv[1], 'r') as zfp:
    with zfp.open('word/document.xml') as fp:
        soup = BeautifulSoup(fp.read(), 'xml')

print soup
</snippet></ROW><ROW><id>18935157</id><snippet>from collections import defaultdict
from urllib import quote
from urlparse import parse_qsl, urlparse
</snippet></ROW><ROW><id>18935157</id><snippet>def variance(values):
    mean = sum(values) / float(len(values))
    return sum((elem - mean)**2 for elem in values) / float(len(values))
</snippet></ROW><ROW><id>18935157</id><snippet>"%s=%s"</snippet></ROW><ROW><id>18935157</id><snippet>defaultdict</snippet></ROW><ROW><id>18935157</id><snippet>urls = defaultdict(lambda: defaultdict(list))
with open('links.txt') as f:
    for url in f:
        parsed_url = urlparse(url.strip())
        params = parse_qsl(parsed_url.query, keep_blank_values=True)
        for key, value in params:
            urls[parsed_url.path][key].append(quote(value))
</snippet></ROW><ROW><id>18935157</id><snippet>for domain, keys in urls.items():
    print domain
    for key, values in keys.items():
        for value in values:
            print "%s=%s" % (key, value)

        if len(values) &gt; 1:
            print variance(map(len, values))
</snippet></ROW><ROW><id>18935205</id><snippet>mode='wrap'</snippet></ROW><ROW><id>18935205</id><snippet>import numpy
from scipy import misc, ndimage

lena = misc.lena()
image = numpy.vstack((lena, numpy.zeros(lena.shape[1])))
weights = numpy.array([[1, 1, 1],
                    [1, 8, 1],
                    [1, 1, 1]])/16.
convimage = ndimage.convolve(image, weights, mode='wrap')[0:lena.shape[1],]
</snippet></ROW><ROW><id>18935261</id><snippet>pycrypto-2.6.win-amd64-py3.3.exe</snippet></ROW><ROW><id>18935346</id><snippet>and</snippet></ROW><ROW><id>18935346</id><snippet>AND</snippet></ROW><ROW><id>18935346</id><snippet>&amp;</snippet></ROW><ROW><id>18935346</id><snippet>index &amp;= 7  #index = index &amp; 7
</snippet></ROW><ROW><id>18935346</id><snippet>index</snippet></ROW><ROW><id>18935355</id><snippet>partition2d =  [['A', '1', '5'],
                ['B', '2', '3', '4'],
                ['C', '6', '7', '8', '9']]

guest_list = [0.5, 0.0, 1.0]
</snippet></ROW><ROW><id>18935355</id><snippet>partition2d</snippet></ROW><ROW><id>18935355</id><snippet>numbers = [len(part)-1 for part in partition2d]

numbers
#&gt;&gt;&gt; [2, 3, 4]
</snippet></ROW><ROW><id>18935355</id><snippet>numbers = [sum(v.isnumeric() for v in part) for part in partition2d]

numbers
#&gt;&gt;&gt; [2, 3, 4]
</snippet></ROW><ROW><id>18935355</id><snippet>total_numbers = sum(numbers)

total_numbers
#&gt;&gt;&gt; 9
</snippet></ROW><ROW><id>18935355</id><snippet>[n/total_numbers * factor for n, factor in zip(numbers, guest_list)]
#&gt;&gt;&gt; [0.1111111111111111, 0.0, 0.4444444444444444]
</snippet></ROW><ROW><id>18935355</id><snippet>v.isdigit()</snippet></ROW><ROW><id>18935355</id><snippet>total_numbers</snippet></ROW><ROW><id>18935421</id><snippet>/media</snippet></ROW><ROW><id>18935421</id><snippet>return HttpResponseRedirect(api.media(path_source)['url'])
</snippet></ROW><ROW><id>18935519</id><snippet>class Institution(models.Model):
    name = models.CharField(_('Name'), max_length=150, db_index=True)
    slug = models.SlugField(_('Domain name'), unique=True)

    class Meta:
        abstract = True
</snippet></ROW><ROW><id>18935519</id><snippet>following_company = models.ManyToManyField(Company, blank=True, null=True)
following_hc = models.ManyToManyField(Institution, blank=True, null=True)
</snippet></ROW><ROW><id>18935525</id><snippet>foo/bar/__init__.py</snippet></ROW><ROW><id>18935525</id><snippet>config</snippet></ROW><ROW><id>18935525</id><snippet>config.py</snippet></ROW><ROW><id>18935525</id><snippet>In [4]: !ls foo
__init__.py   bar/
In [5]: !ls foo/bar
__init__.py   config.py
In [6]: !cat foo/bar/__init__.py
class config(object):
    pass
In [7]: from foo.bar import config    
In [8]: type(config)
Out[8]: type

$ echo "" &gt; foo/bar/__init__.py
$ ipython

In [1]: from foo.bar import config    
In [2]: type(config)
Out[2]: module
</snippet></ROW><ROW><id>18935533</id><snippet>timeit</snippet></ROW><ROW><id>18935533</id><snippet>timeit</snippet></ROW><ROW><id>18935533</id><snippet>%~&gt; python -m timeit "1 + 2"
10000000 loops, best of 3: 0.0468 usec per loop
</snippet></ROW><ROW><id>18935533</id><snippet>%~&gt; python -m timeit -s "x = range(10000)" "sum(x)"
1000 loops, best of 3: 543 usec per loop
</snippet></ROW><ROW><id>18935533</id><snippet>%~&gt; python -m timeit -s "x = range(10000)" -s "y = range(100)" "sum(x)" "min(y)"
1000 loops, best of 3: 554 usec per loop
</snippet></ROW><ROW><id>18935533</id><snippet>x = range(1000)
y = range(100)
</snippet></ROW><ROW><id>18935533</id><snippet>sum(x)
min(y)
</snippet></ROW><ROW><id>18935533</id><snippet>timeit</snippet></ROW><ROW><id>18935533</id><snippet> SETUP="

 ... # lots of stuff

 "

 echo Minmod arr1
 \python -m timeit -s "$SETUP" "Minmod(arr1)"
 echo pure_minmod arr1
 \python -m timeit -s "$SETUP" "pure_minmod(arr1)"
 echo better_minmod arr1
 \python -m timeit -s "$SETUP" "better_minmod(arr1)"
 ... etc
</snippet></ROW><ROW><id>18935533</id><snippet>timeit</snippet></ROW><ROW><id>18935533</id><snippet>def function(...):
    ...

timeit.Timer(function).timeit(number=NUMBER)
</snippet></ROW><ROW><id>18935533</id><snippet>timeit.timeit("...", setup="from __main__ import ...", number=NUMBER)
</snippet></ROW><ROW><id>18935533</id><snippet>"from __main__ import ..."</snippet></ROW><ROW><id>18935533</id><snippet>timeit</snippet></ROW><ROW><id>18935646</id><snippet>"0000-22N-06W-01"
"0000-22N-06W-02"
"0000-22N-06W-03"
"0000-22N-06W-04"

import re
output = open("output.txt","w")
input = open("input.txt")

for line in input:
    output.write(re.sub(r'^(.{4})-(.{3})-(.{3})-(.{2})$', r'\1-\4-\2-\3', line))

input.close()
output.close()
</snippet></ROW><ROW><id>18935646</id><snippet>"</snippet></ROW><ROW><id>18935646</id><snippet>^"(.{4})-(.{4})-(.{3})-(.{3})"$
</snippet></ROW><ROW><id>18935669</id><snippet>Site.objects.get_current().name</snippet></ROW><ROW><id>18935669</id><snippet>BLOG_NAME</snippet></ROW><ROW><id>18935669</id><snippet>settings.py</snippet></ROW><ROW><id>18935669</id><snippet>try/catch</snippet></ROW><ROW><id>18935669</id><snippet>gettattr</snippet></ROW><ROW><id>18935690</id><snippet>articles = list(Article.objects.order_by('release_date'))

for index, art in enumerate(articles):
    if art.slug == slug:
        article = art
        newer_article = articles[index+1]
        older_article = articles[index-1]
        break
</snippet></ROW><ROW><id>18935710</id><snippet>from itertools import takewhile
array = takewhile(lambda x: x != "b", array)
# then if array must be a list (we can already iterate through it)
array = list(array)
</snippet></ROW><ROW><id>18935710</id><snippet>if "b" in array:
    del array[array.index("b"):]
</snippet></ROW><ROW><id>18935710</id><snippet>try:
    del array[array.index("b"):]
except ValueError:
    # "b" was not in array
    pass
</snippet></ROW><ROW><id>18935765</id><snippet>escaped = a_string.translate(str.maketrans({"-":  r"\-",
                                          "]":  r"\]",
                                          "\\": r"\\",
                                          "^":  r"\^",
                                          "$":  r"\$",
                                          "*":  r"\*",
                                          ".":  r"\."}))
</snippet></ROW><ROW><id>18935765</id><snippet>import re
escaped = re.escape(a_string)
</snippet></ROW><ROW><id>18935819</id><snippet>In [16]: df = pd.read_fwf(StringIO(data),widths=[5,12,8,8,6],header=0,names=['idx','date','time','datetime','year'])

# simulate what the OP actually has (though this doesn't happen upon read in)

In [30]: df['date'] = df['date'].fillna('')

In [31]: df
Out[31]: 
   idx   date  time datetime  year
0    0         None     None  2007
1    1  May 1  0:58     None  2007
2    2         1:00     None  2007
3    3         1:30     None  2007
4    4         1:45     None  2007
5    5         3:45     None  2007
6    6         4:45     None  2007
7    7         6:30     None  2007
8    8         7:15     None  2007
9    9         7:45     None  2007

In [32]: df.loc[df.date=='','date'] = np.nan

In [33]: df
Out[33]: 
   idx   date  time datetime  year
0    0    NaN  None     None  2007
1    1  May 1  0:58     None  2007
2    2    NaN  1:00     None  2007
3    3    NaN  1:30     None  2007
4    4    NaN  1:45     None  2007
5    5    NaN  3:45     None  2007
6    6    NaN  4:45     None  2007
7    7    NaN  6:30     None  2007
8    8    NaN  7:15     None  2007
9    9    NaN  7:45     None  2007

In [34]: df['date']  = df['date'].ffill()

In [35]: df
Out[35]: 
   idx   date  time datetime  year
0    0    NaN  None     None  2007
1    1  May 1  0:58     None  2007
2    2  May 1  1:00     None  2007
3    3  May 1  1:30     None  2007
4    4  May 1  1:45     None  2007
5    5  May 1  3:45     None  2007
6    6  May 1  4:45     None  2007
7    7  May 1  6:30     None  2007
8    8  May 1  7:15     None  2007
9    9  May 1  7:45     None  2007
</snippet></ROW><ROW><id>18935846</id><snippet>__getitem__</snippet></ROW><ROW><id>18935846</id><snippet>KeyError</snippet></ROW><ROW><id>18935869</id><snippet>str.replace</snippet></ROW><ROW><id>18935869</id><snippet>&gt;&gt;&gt; "I went \n to the store\n".replace('\n', '')
'I went  to the store'
</snippet></ROW><ROW><id>18935869</id><snippet>str.split</snippet></ROW><ROW><id>18935869</id><snippet>str.join</snippet></ROW><ROW><id>18935869</id><snippet>&gt;&gt;&gt; ' '.join("I went \n to the store\n".split())
'I went to the store'
</snippet></ROW><ROW><id>18936130</id><snippet>In [21]: ends
Out[21]:
2000-05    1
2000-09    1
2001-06    1
Freq: M, dtype: int64

In [22]: ends.index = ends.index + 1

In [23]: ends
Out[23]:
2000-06    1
2000-10    1
2001-07    1
Freq: M, dtype: int64
</snippet></ROW><ROW><id>18936130</id><snippet>In [11]: ends
Out[11]:
2000-05    1
2000-09    1
2001-06    1
Freq: M, dtype: int64

In [12]: p = pd.PeriodIndex(freq='m', start='2000-1', periods=19)  # Note: needs to be one more than before

In [13]: sparse_ends = ends.reindex(p)

In [14]: sparse_ends.shift(1)
Out[14]:
2000-01   NaN
2000-02   NaN
2000-03   NaN
2000-04   NaN
2000-05   NaN
2000-06     1
2000-07   NaN
2000-08   NaN
2000-09   NaN
2000-10     1
2000-11   NaN
2000-12   NaN
2001-01   NaN
2001-02   NaN
2001-03   NaN
2001-04   NaN
2001-05   NaN
2001-06   NaN
2001-07     1
Freq: M, dtype: float64
</snippet></ROW><ROW><id>18936218</id><snippet>  var blob = JSON.stringify(stuff);
  $.ajax('/api/', {
    'type': 'POST',
    'async': false,
    'data': {
      'json': blob,
     },
     'dataType': 'json',
  }).done(function(data) {
    // ...


def post(self):
    blob = self.request.get('json')
    try:
        stuff = json.loads(blob)
    except:
        # ...
</snippet></ROW><ROW><id>18936218</id><snippet>request.body</snippet></ROW><ROW><id>18936302</id><snippet>sorted</snippet></ROW><ROW><id>18936302</id><snippet>True</snippet></ROW><ROW><id>18936302</id><snippet>&gt;&gt;&gt; scores = {'player1':200,'player2':300,'player3':150}
&gt;&gt;&gt; max_score = sorted(scores, key=scores.__getitem__, reverse=True)[0]
&gt;&gt;&gt; max_score
'player2'
</snippet></ROW><ROW><id>18936302</id><snippet>scores.__getitem__(i)</snippet></ROW><ROW><id>18936302</id><snippet>scores[i]</snippet></ROW><ROW><id>18936302</id><snippet>&gt;&gt;&gt; scores.__getitem__('player1')
200
&gt;&gt;&gt; scores['player1']
200
</snippet></ROW><ROW><id>18936324</id><snippet>import java.lang.Math.*;</snippet></ROW><ROW><id>18936324</id><snippet>Math.sqrt(Math.PI)</snippet></ROW><ROW><id>18936324</id><snippet>sqrt(PI)</snippet></ROW><ROW><id>18936346</id><snippet>with open("C:\\Users\\Tharix\\Desktop\\test.txt", mode="r") as users:
    for line in users:
       print(line)
</snippet></ROW><ROW><id>18936346</id><snippet>iter.next()</snippet></ROW><ROW><id>18936346</id><snippet>iter.__next__()</snippet></ROW><ROW><id>18936346</id><snippet>next(iter)</snippet></ROW><ROW><id>18936405</id><snippet>word[cut:-cut]
</snippet></ROW><ROW><id>18936405</id><snippet>cut</snippet></ROW><ROW><id>18936405</id><snippet>-cut</snippet></ROW><ROW><id>18936405</id><snippet>word[cut:0]
</snippet></ROW><ROW><id>18936405</id><snippet>word[cut:-cut:-1]</snippet></ROW><ROW><id>18936405</id><snippet>word[cut-1:-cut-1:-1]</snippet></ROW><ROW><id>18936405</id><snippet>word[cut-1:-6:-1]</snippet></ROW><ROW><id>18936405</id><snippet>word[::-1]</snippet></ROW><ROW><id>18936405</id><snippet>-1</snippet></ROW><ROW><id>18936411</id><snippet>getattr</snippet></ROW><ROW><id>18936411</id><snippet>module = __import__('module')
func = getattr(module, 'func')
func()
</snippet></ROW><ROW><id>18936411</id><snippet>get_object('module.submodule.function')</snippet></ROW><ROW><id>18936411</id><snippet>get_object('submodule.function', module)</snippet></ROW><ROW><id>18936559</id><snippet>new_location_interfaces</snippet></ROW><ROW><id>18936559</id><snippet>raw_input()</snippet></ROW><ROW><id>18936559</id><snippet>new_location_interfaces = raw_input()
</snippet></ROW><ROW><id>18936559</id><snippet>open()</snippet></ROW><ROW><id>18936559</id><snippet>open(new_location_interfaces, 'w')
</snippet></ROW><ROW><id>18936559</id><snippet>new_location_interfaces = raw_input()
fh = open(new_location_interfaces, 'w')
print "Truncating/erasing contents . ."
fh.truncate()
print "Writing contents . ."
fh.write(text_to_copy)
fh.close()
</snippet></ROW><ROW><id>18936559</id><snippet>w</snippet></ROW><ROW><id>18936559</id><snippet>.truncate()</snippet></ROW><ROW><id>18936780</id><snippet>"What is your name?".replace("?","") #this is the most clear
#or
filter(lambda x:x!= "?","What is your name?")
#or
"".join(x for x in "What is your name?" if x != "?")
#or
"What is your name?".translate(None,"?") #this is my favorite
</snippet></ROW><ROW><id>18936829</id><snippet>t_iterating</snippet></ROW><ROW><id>18936829</id><snippet>def t_iterating(R, r, p):
    t = 2*pi          # It seems odd to me to start from 2*pi rather than 0.
    down()

    while t &lt; 20*pi:  # This loops while t goes from 2*pi to 20*pi.
        t = t+0.01
        goto(formulaX(R, r, p, t), formulaY(R, r, p, t))
    up()
</snippet></ROW><ROW><id>18936924</id><snippet>form_elements</snippet></ROW><ROW><id>18936937</id><snippet>def query_db(query, args=(), one=False):
    print args   
    cur = get_db().execute(query, args)
    rv = cur.fetchall()
    conn.commit()
    cur.close()
    return (rv[0] if rv else None) if one else rv
</snippet></ROW><ROW><id>18936949</id><snippet>grid</snippet></ROW><ROW><id>18936949</id><snippet>n</snippet></ROW><ROW><id>18936949</id><snippet>Notebook</snippet></ROW><ROW><id>18936949</id><snippet>grid</snippet></ROW><ROW><id>18936949</id><snippet>None</snippet></ROW><ROW><id>18936949</id><snippet>n</snippet></ROW><ROW><id>18936949</id><snippet>None</snippet></ROW><ROW><id>18936949</id><snippet>n = ttk.Notebook(gui).grid()
</snippet></ROW><ROW><id>18936949</id><snippet>n = ttk.Notebook(gui)
n.grid()
</snippet></ROW><ROW><id>18936966</id><snippet>evil = {"x": 0.00000000001}
</snippet></ROW><ROW><id>18936966</id><snippet>Decimal</snippet></ROW><ROW><id>18936966</id><snippet>class FancyFloat(float):
    def __repr__(self):
        return format(Decimal(self), "f")
</snippet></ROW><ROW><id>18936966</id><snippet>class JsonRpcEncoder(json.JSONEncoder):
    def decimalize(self, val):
        if isinstance(val, dict):
            return {k:self.decimalize(v) for k,v in val.items()}

        if isinstance(val, (list, tuple)):
            return type(val)(self.decimalize(v) for v in val)

        if isinstance(val, float):
            return FancyFloat(val)

        return val

    def encode(self, val):
        return super().encode(self.decimalize(val))

JsonRpcEncoder().encode(evil)
#&gt;&gt;&gt; '{"x": 0.00000000000999999999999999939496969281939810930172340963650867706746794283390045166015625}'
</snippet></ROW><ROW><id>18936966</id><snippet>json.dumps</snippet></ROW><ROW><id>18937042</id><snippet>class Test
  def say(word)
    word
  end
end

test = Test.new
test.send(:say, "something")  #=&gt; "something"
</snippet></ROW><ROW><id>18937061</id><snippet># example, could be a simple tuple, a full class or instance or dictionary, etc.
attributes = namedtuple("attributes", "vncmode")("1980")
</snippet></ROW><ROW><id>18937061</id><snippet>class ...:
    def __init__(self, attributes, ...):
        self.attributes = attributes
</snippet></ROW><ROW><id>18937061</id><snippet>self.attributes.vncmode</snippet></ROW><ROW><id>18937093</id><snippet>Counter</snippet></ROW><ROW><id>18937093</id><snippet>collections</snippet></ROW><ROW><id>18937093</id><snippet>from collections import Counter
...
[item for item, count in Counter(l).items() if count == 1]
</snippet></ROW><ROW><id>18937093</id><snippet>$ python -m timeit -s 'from collections import Counter; l = [1, 2, 3, 4, 5, 6, 7, 8, 9] * 99' '[item for item, count in Counter(l).items() if count == 1]'
1000 loops, best of 3: 366 usec per loop
$ python -mtimeit -s'l=[1,2,3,4,5,6,7,8,9]*99' '[x for x in l if l.count(x) == 1]'
10 loops, best of 3: 23.4 msec per loop
</snippet></ROW><ROW><id>18937098</id><snippet>class NewForm(OldForm):
    name = Name()


    class Meta(OldForm.Meta):
        fields = ('name', 'address')
</snippet></ROW><ROW><id>18937140</id><snippet>int</snippet></ROW><ROW><id>18937140</id><snippet>float</snippet></ROW><ROW><id>18937140</id><snippet>def float_or_int(x):
    try:
        return int(x)
    except ValueError:
        return float(x)

x = float_or_int(input("What's x?"))
y = float_or_int(input("What's y?"))
</snippet></ROW><ROW><id>18937140</id><snippet>//</snippet></ROW><ROW><id>18937140</id><snippet>print("The integer quotient is:", x//y)
</snippet></ROW><ROW><id>18937309</id><snippet>set</snippet></ROW><ROW><id>18937309</id><snippet>df</snippet></ROW><ROW><id>18937309</id><snippet>df['text'].str.lower().str.split()
Out[43]: 
0             [my, nickname, is, ft.jgt]
1    [someone, is, going, to, my, place]
</snippet></ROW><ROW><id>18937309</id><snippet>set.update</snippet></ROW><ROW><id>18937309</id><snippet>apply</snippet></ROW><ROW><id>18937309</id><snippet>results = set()
df['text'].str.lower().str.split().apply(results.update)
print results

set(['someone', 'ft.jgt', 'my', 'is', 'to', 'going', 'place', 'nickname'])
</snippet></ROW><ROW><id>18937421</id><snippet>find</snippet></ROW><ROW><id>18937421</id><snippet>pos</snippet></ROW><ROW><id>18937421</id><snippet>end</snippet></ROW><ROW><id>18937421</id><snippet>pos = f.find('torrents.humblebundle.com')
end = f.find('.torrent')
</snippet></ROW><ROW><id>18937421</id><snippet>find</snippet></ROW><ROW><id>18937421</id><snippet>pos = f.find('torrents.humblebundle.com', pos+1)
end = f.find('.torrent', end+1)
</snippet></ROW><ROW><id>18937538</id><snippet>mainscreen = MainScreen()
mainlayout = MainLayout()
mainscreen.add_widget(mainlayout)
</snippet></ROW><ROW><id>18937538</id><snippet>&lt;MyScreen&gt;:
     GridLayout:
         ...
</snippet></ROW><ROW><id>18937641</id><snippet>i==0 &amp; j==0 &amp; k==0
</snippet></ROW><ROW><id>18937641</id><snippet>==</snippet></ROW><ROW><id>18937641</id><snippet>&amp;</snippet></ROW><ROW><id>18937641</id><snippet>i == 0&amp;j == 0&amp;k == 0
</snippet></ROW><ROW><id>18937641</id><snippet>0&amp;anything</snippet></ROW><ROW><id>18937641</id><snippet>i == 0 == 0 == 0
</snippet></ROW><ROW><id>18937641</id><snippet>i == 0
</snippet></ROW><ROW><id>18937641</id><snippet>4 &lt; x &lt; 10</snippet></ROW><ROW><id>18937641</id><snippet>[(i,j,k) for i in {-4,-2,1,2,5,0} for j in {-4,-2,1,2,5,0} for k in {-4,-2,1,2,5,0} if i+j+k==0 if i==0 &amp; j==0 &amp; k==0]
</snippet></ROW><ROW><id>18937641</id><snippet>(i,j,k)</snippet></ROW><ROW><id>18937641</id><snippet>i+j+k = 0</snippet></ROW><ROW><id>18937641</id><snippet>i = 0</snippet></ROW><ROW><id>18937641</id><snippet>i = 0</snippet></ROW><ROW><id>18937641</id><snippet>j = -k</snippet></ROW><ROW><id>18937748</id><snippet>WSGIApplicationGroup %{GLOBAL}
</snippet></ROW><ROW><id>18937749</id><snippet>s = 'ABCDEFGHIJKLMNOP'
targets = 'CDE','XYZ','JKL'
</snippet></ROW><ROW><id>18937749</id><snippet>for t in targets:
    for i in range(len(s) - len(t) + 1):
        for j in range(len(t)):
            if s[i + j] != t[j]:
                break
        else:
            print(s[i:])
            break
    else:
        print(t,'does not exist')
</snippet></ROW><ROW><id>18937749</id><snippet>for t in targets:
    i = s.find(t)
    if i != -1:
        print(s[i:])
    else:
        print(t,'does not exist')
</snippet></ROW><ROW><id>18937749</id><snippet>CDEFGHIJKLMNOP
XYZ does not exist
JKLMNOP
</snippet></ROW><ROW><id>18937752</id><snippet>itertools</snippet></ROW><ROW><id>18937752</id><snippet>groupby</snippet></ROW><ROW><id>18937752</id><snippet>import itertools

[item for item, repeats in itertools.groupby([1, 1, 2, 3, 2, 2, 4, 4, 5])]
#&gt;&gt;&gt; [1, 2, 3, 2, 4, 5]
</snippet></ROW><ROW><id>18937752</id><snippet>repeats</snippet></ROW><ROW><id>18937752</id><snippet>repeats</snippet></ROW><ROW><id>18937859</id><snippet>MASTER = [10,11,12,13,14]

LISTA = [0,1,2]
LISTB = [0,3,4]

for i in LISTA: MASTER[i] += 10
for i in LISTB: MASTER[i] += 10

print MASTER[LISTA[0]]

print MASTER[LISTB[0]]
</snippet></ROW><ROW><id>18937859</id><snippet>class SharedInt:
    val = None
    def __init__(self, v): self.val = v

    def __add__(self, a): 
        self.val += a
        return self.val

    def __int__(self): return self.val

v1 = SharedInt(10)

listA = [v1, 11, 12]
listB = [v1, 13, 14]

for i in listA: i += 10
for i in listB: i += 10

print int(listA[0])
print int(listB[0])
</snippet></ROW><ROW><id>18937859</id><snippet>v1 = [10]

listA = [v1, 11, 12]
listB = [v1, 13, 14]

for i in listA: 
    if isinstance(i, list): i[0] += 10 
    else: i += 10
for i in listB: 
    if isinstance(i, list): i[0] += 10 
    else: i += 10

print listA[0]
print listB[0]
</snippet></ROW><ROW><id>18937859</id><snippet>SharedInt()</snippet></ROW><ROW><id>18937887</id><snippet>rnd1</snippet></ROW><ROW><id>18937887</id><snippet>rnd1 = 0
</snippet></ROW><ROW><id>18937887</id><snippet>rnd1 = rn_table[0]
</snippet></ROW><ROW><id>18937887</id><snippet>rnd1</snippet></ROW><ROW><id>18938018</id><snippet>roomChanger()</snippet></ROW><ROW><id>18938018</id><snippet>roomChange</snippet></ROW><ROW><id>18938018</id><snippet>roomChange = Entry(textFrame)
</snippet></ROW><ROW><id>18938018</id><snippet>global roomChange</snippet></ROW><ROW><id>18938018</id><snippet>displayText()</snippet></ROW><ROW><id>18938018</id><snippet>roomChange</snippet></ROW><ROW><id>18938018</id><snippet>global</snippet></ROW><ROW><id>18938125</id><snippet>get_list_display</snippet></ROW><ROW><id>18938125</id><snippet>self.model</snippet></ROW><ROW><id>18938162</id><snippet>Jan     0    Tuesday
Feb     3    Friday (Tuesday + 3)
Mar     3    Friday (Tuesday + 3)
Apr     6    Monday (Tuesday + 6)
etc...
</snippet></ROW><ROW><id>18938261</id><snippet>data: JSON.stringify({'contact_id' : '3'})</snippet></ROW><ROW><id>18938261</id><snippet>{contact_id: '3'}</snippet></ROW><ROW><id>18938286</id><snippet>nested_lst_of_tuples = [tuple(l) for l in nested_lst]
</snippet></ROW><ROW><id>18938286</id><snippet>&gt;&gt;&gt; nested_lst = [['tom', 'cat'], ['jerry', 'mouse'], ['spark', 'dog']]
&gt;&gt;&gt; [tuple(l) for l in nested_lst]
[('tom', 'cat'), ('jerry', 'mouse'), ('spark', 'dog')]
</snippet></ROW><ROW><id>18938438</id><snippet>np.sum</snippet></ROW><ROW><id>18938438</id><snippet>#cython.wraparound=False
#cython.boundscheck=False
cimport numpy as np

def sum_np(np.ndarray[np.int64_t, ndim=1] A):
    cdef unsigned long s = 0
    for a in A:
        s += a
    return s

def sum_np2(np.int64_t[::1] A):
    cdef:
        unsigned long s = 0
        size_t k

    for k in range(A.shape[0]):
        s += A[k]

    return s
</snippet></ROW><ROW><id>18938438</id><snippet>N = 1000000
v_np = np.array(range(N))
v_list = range(N)
</snippet></ROW><ROW><id>18938438</id><snippet>%timeit sum(v_list)
%timeit sum_naive(v_list)
%timeit np.sum(v_np)
%timeit sum_np(v_np)
%timeit sum_np2(v_np)
10 loops, best of 3: 19.5 ms per loop
10 loops, best of 3: 64.9 ms per loop
1000 loops, best of 3: 1.62 ms per loop
1 loops, best of 3: 1.7 s per loop
1000 loops, best of 3: 1.42 ms per loop
</snippet></ROW><ROW><id>18938491</id><snippet>Document</snippet></ROW><ROW><id>18938491</id><snippet>open</snippet></ROW><ROW><id>18938491</id><snippet>csv.reader</snippet></ROW><ROW><id>18938491</id><snippet>gfile = csv.reader(request.FILES['docfile'])
</snippet></ROW><ROW><id>18938744</id><snippet>for line in fin.readlines():
    words = line.split()    # list of words
    new_words = []
    unique_words = set()
    for word in words:
        if (word not in unique_words and
                  (not word.isdigit() or int(word) &lt;= 65000)):
            new_words.append(word)
            unique_words.add(word)
    new_line = ' '.join(new_words)
    print new_line
</snippet></ROW><ROW><id>18938744</id><snippet>A   786 65534 65534 786 786 786 786 10026/AS4637 19151 19151 19151 19151 19151     19151 10796/AS13706
</snippet></ROW><ROW><id>18938744</id><snippet>A 786 10026/AS4637 19151 10796/AS13706
</snippet></ROW><ROW><id>18938744</id><snippet>str.replace()</snippet></ROW><ROW><id>18938744</id><snippet>/AS</snippet></ROW><ROW><id>18938848</id><snippet>and</snippet></ROW><ROW><id>18938848</id><snippet>contact_object = Contact.query \
    .filter(Contact.user_id == user_id) \
    .filter(Contact.contact_id == contact_id) \
    .first()
</snippet></ROW><ROW><id>18938920</id><snippet>output = subprocess.check_output(['/usr/bin/python', 'test.py'] + argument_list, stderr=subprocess.STDOUT)
</snippet></ROW><ROW><id>18938920</id><snippet>test.py</snippet></ROW><ROW><id>18938920</id><snippet>argument_list</snippet></ROW><ROW><id>18938921</id><snippet>__getattr__</snippet></ROW><ROW><id>18938921</id><snippet>__xyz__</snippet></ROW><ROW><id>18938921</id><snippet>object</snippet></ROW><ROW><id>18938921</id><snippet>__getattr__</snippet></ROW><ROW><id>18939211</id><snippet>python C:\Python33\scripts\django-admin.py startproject examplesite
</snippet></ROW><ROW><id>18939211</id><snippet>django-admin.py</snippet></ROW><ROW><id>18939211</id><snippet>python</snippet></ROW><ROW><id>18939272</id><snippet>if _is_url(io): # io is the url
    try:
        with urlopen(io) as url:
            raw_text = url.read()
    except urllib2.URLError:
        raise ValueError('Invalid URL: "{0}"'.format(io))
</snippet></ROW><ROW><id>18939272</id><snippet>url</snippet></ROW><ROW><id>18939272</id><snippet>urlopen</snippet></ROW><ROW><id>18939272</id><snippet>bs</snippet></ROW><ROW><id>18939272</id><snippet>import urllib2

url = 'http://www.transfermarkt.co.uk/en/premier-league/gegentorminuten/wettbewerb_GB1.html'
opener = urllib2.build_opener()
opener.addheaders = [('User-agent', 'Mozilla/5.0')]
response = opener.open(url)
tables = pd.read_html(response.read(), attrs={"class":"tabelle_grafik"})[0]
</snippet></ROW><ROW><id>18939272</id><snippet>requests</snippet></ROW><ROW><id>18939272</id><snippet>tables = pd.read_html(requests.get(url,
                                   headers={'User-agent': 'Mozilla/5.0'}).text,
                      attrs={"class":"tabelle_grafik"})[0]
</snippet></ROW><ROW><id>18939439</id><snippet>object</snippet></ROW><ROW><id>18939439</id><snippet>mro</snippet></ROW><ROW><id>18939439</id><snippet>object</snippet></ROW><ROW><id>18939439</id><snippet>object</snippet></ROW><ROW><id>18939439</id><snippet>sentinel = object()
</snippet></ROW><ROW><id>18939439</id><snippet>None</snippet></ROW><ROW><id>18939439</id><snippet>object()</snippet></ROW><ROW><id>18939489</id><snippet>lambda</snippet></ROW><ROW><id>18939489</id><snippet>self.numButton.append(
    Button(root,text=num[i],command=lambda i=i: self.do(num[i])))
</snippet></ROW><ROW><id>18939489</id><snippet>lambda</snippet></ROW><ROW><id>18939489</id><snippet>i</snippet></ROW><ROW><id>18939489</id><snippet>lambda</snippet></ROW><ROW><id>18939489</id><snippet>i</snippet></ROW><ROW><id>18939489</id><snippet>event</snippet></ROW><ROW><id>18939489</id><snippet>root.bind('Key-{n}'.format(n=num[i]), lambda e, i=i: self.do(num[i]))
</snippet></ROW><ROW><id>18939523</id><snippet>import numpy as np
import matplotlib.pyplot as plt

box = dict(facecolor='yellow', pad=5, alpha=0.2)

fig = plt.figure()
fig.subplots_adjust(left=0.2, wspace=0.6)


# ax1 = fig.add_subplot(221)
ax1 = plt.subplot2grid((3,2), (0,0))
ax1.plot(2000*np.random.rand(10))
ax1.set_title('ylabels not aligned')
ax1.set_ylabel('misaligned 1', bbox=box)
ax1.set_ylim(0, 2000)

# ax3 = fig.add_subplot(223)
ax3 = plt.subplot2grid((3,2), (1,0))
ax3.set_ylabel('misaligned 2',bbox=box)
ax3.plot(np.random.rand(10))


labelx = -0.3  # axes coords

# ax2 = fig.add_subplot(222)
ax2 = plt.subplot2grid((3,2), (0,1))
ax2.set_title('ylabels aligned')
ax2.plot(2000*np.random.rand(10))
ax2.set_ylabel('aligned 1', bbox=box)
ax2.yaxis.set_label_coords(labelx, 0.5)
ax2.set_ylim(0, 2000)

# ax4 = fig.add_subplot(224)
ax4 = plt.subplot2grid((3,2), (1,1))
ax4.plot(np.random.rand(10))
ax4.set_ylabel('aligned 2', bbox=box)
ax4.yaxis.set_label_coords(labelx, 0.5)

ax5 = plt.subplot2grid((3,2), (2,0), colspan=2)
ax5.plot(np.random.rand(10))
ax5.set_ylabel('misaligned 3', bbox=box)

plt.show()
</snippet></ROW><ROW><id>18939610</id><snippet>map(cube, range(1, 11))
</snippet></ROW><ROW><id>18939610</id><snippet>[cube(1), cube(2), ..., cube(10)]
</snippet></ROW><ROW><id>18939610</id><snippet>filter(f, range(2, 25))
</snippet></ROW><ROW><id>18939610</id><snippet>result</snippet></ROW><ROW><id>18939610</id><snippet>result = []
for i in range(2, 25):
    if f(i):
        result.append(i)
</snippet></ROW><ROW><id>18939610</id><snippet>map</snippet></ROW><ROW><id>18939610</id><snippet>cube</snippet></ROW><ROW><id>18939610</id><snippet>f</snippet></ROW><ROW><id>18939610</id><snippet>filter(f, ...)</snippet></ROW><ROW><id>18939610</id><snippet>result</snippet></ROW><ROW><id>18939610</id><snippet>f(i)</snippet></ROW><ROW><id>18939610</id><snippet>i</snippet></ROW><ROW><id>18939610</id><snippet>result</snippet></ROW><ROW><id>18939625</id><snippet># make sure to change the app name
ALLOWED_RELATIONSHIPS = models.Q(app_label = 'app_name', model = 'team') | models.Q(app_label = 'app_name', model = 'teammember')
class TeamFormNote(models.Model):
    content_type = models.ForeignKey(ContentType, limit_choices_to=ALLOWED_RELATIONSHIPS)
    relation_id = models.PositiveIntegerField()
    relation = generic.GenericForeignKey('content_type', 'relation_id')
</snippet></ROW><ROW><id>18939625</id><snippet>limit_choices_to</snippet></ROW><ROW><id>18939625</id><snippet>ForeignKey</snippet></ROW><ROW><id>18939625</id><snippet>Team.objects.filter(teamformnote_set__notes__contains='foo')
</snippet></ROW><ROW><id>18939625</id><snippet>ALTER TABLE foo ADD CONSTRAINT bar CHECK ...;
</snippet></ROW><ROW><id>18939665</id><snippet>&lt;table&gt;
  &lt;tr tal:repeat="item items"&gt;
    &lt;td&gt;${item.name}&lt;/td&gt;
    &lt;td&gt;${item.description}&lt;/td&gt;
  &lt;/tr&gt;
&lt;/table&gt;
</snippet></ROW><ROW><id>18939694</id><snippet>tab_space.grid( row = 0, column = 0)</snippet></ROW><ROW><id>18939694</id><snippet>master.columnconfigure(0, weight=1)
</snippet></ROW><ROW><id>18939694</id><snippet>tab_space.grid( row = 0, column = 0)
</snippet></ROW><ROW><id>18939694</id><snippet>tab_space.grid( row = 0, column = 0, sticky="nsew")
top.columnconfigure(0, weight=1)
master.columnconfigure(0, weight=1)
</snippet></ROW><ROW><id>18939694</id><snippet>grid</snippet></ROW><ROW><id>18939694</id><snippet>frame</snippet></ROW><ROW><id>18939694</id><snippet>frame.columnconfigure(3, weight=7)</snippet></ROW><ROW><id>18939694</id><snippet>frame</snippet></ROW><ROW><id>18939694</id><snippet>rowconfigure</snippet></ROW><ROW><id>18939694</id><snippet>columnconfigure</snippet></ROW><ROW><id>18939694</id><snippet>rowconfigure</snippet></ROW><ROW><id>18939694</id><snippet>columnconfigure</snippet></ROW><ROW><id>18939694</id><snippet>rowconfigure</snippet></ROW><ROW><id>18939694</id><snippet>grid_columnconfigure</snippet></ROW><ROW><id>18939694</id><snippet>grid_rowconfigure</snippet></ROW><ROW><id>18939694</id><snippet>&lt;Configure&gt;</snippet></ROW><ROW><id>18939748</id><snippet>/NewFiles/</snippet></ROW><ROW><id>18939748</id><snippet>NewFiles</snippet></ROW><ROW><id>18939748</id><snippet>/</snippet></ROW><ROW><id>18939769</id><snippet>timeit.timeit</snippet></ROW><ROW><id>18939769</id><snippet>number</snippet></ROW><ROW><id>18939769</id><snippet>fac_mem</snippet></ROW><ROW><id>18939769</id><snippet>timeit</snippet></ROW><ROW><id>18940126</id><snippet>return</snippet></ROW><ROW><id>18940126</id><snippet>return</snippet></ROW><ROW><id>18940151</id><snippet>db.commit</snippet></ROW><ROW><id>18940151</id><snippet>db.commit()</snippet></ROW><ROW><id>18940189</id><snippet>In [11]: l = left.groupby('key')['lval'].apply(list)

In [12]: l.name = 'lval'

In [13]: l
Out[13]:
key
foo    [1, 2]
Name: lval, dtype: object

In [14]: r = right.groupby('key')['rval'].apply(list)

In [15]: r.name = 'rval'
</snippet></ROW><ROW><id>18940189</id><snippet>In [16]: pd.concat([l, r], axis=1)
Out[16]:
       lval    rval
key
foo  [1, 2]  [4, 5]
</snippet></ROW><ROW><id>18940202</id><snippet>.wav</snippet></ROW><ROW><id>18940202</id><snippet>open()</snippet></ROW><ROW><id>18940202</id><snippet>rb</snippet></ROW><ROW><id>18940202</id><snippet>struct.unpack('10b', data)
</snippet></ROW><ROW><id>18940207</id><snippet>|</snippet></ROW><ROW><id>18940207</id><snippet>red|green|blue</snippet></ROW><ROW><id>18940207</id><snippet>"red"</snippet></ROW><ROW><id>18940207</id><snippet>"green"</snippet></ROW><ROW><id>18940207</id><snippet>"blue"</snippet></ROW><ROW><id>18940207</id><snippet>"purple"</snippet></ROW><ROW><id>18940207</id><snippet>noun_patt = r'\b(' + '|'.join(nouns) + r')\b'
</snippet></ROW><ROW><id>18940207</id><snippet>conj_patt = r'\b(' + '|'.join(conjunctions) + r')\b'
</snippet></ROW><ROW><id>18940207</id><snippet>noun_patt</snippet></ROW><ROW><id>18940207</id><snippet>conj_patt</snippet></ROW><ROW><id>18940207</id><snippet>noun_patt</snippet></ROW><ROW><id>18940207</id><snippet>patt = r'({0},? )+{1} {0}'.format(noun_patt, conj_patt)
</snippet></ROW><ROW><id>18940207</id><snippet>re.findall()</snippet></ROW><ROW><id>18940207</id><snippet>re.search()</snippet></ROW><ROW><id>18940207</id><snippet>for line in lines:
...     print re.search(patt, line).group(0)
... 
bacon, cheese and eggs
milk, cheese, and bacon
milk, cheese or eggs
milk, bacon, or eggs
</snippet></ROW><ROW><id>18940260</id><snippet>any()</snippet></ROW><ROW><id>18940260</id><snippet>Collection#contains()</snippet></ROW><ROW><id>18940260</id><snippet>Collection</snippet></ROW><ROW><id>18940260</id><snippet>all()</snippet></ROW><ROW><id>18940260</id><snippet>Iterables#all()</snippet></ROW><ROW><id>18940352</id><snippet>  File "C:\Users\matt\Downloads\spirograph.py", line 27, in spirograph
    spirograph(p-1, x,y) # &lt;--- this is the problem line
TypeError: spirograph() missing 2 required positional arguments: 'x' and 'y'
</snippet></ROW><ROW><id>18940352</id><snippet>spirograph()</snippet></ROW><ROW><id>18940352</id><snippet>def spirograph(R,r,p,x,y)</snippet></ROW><ROW><id>18940352</id><snippet>R</snippet></ROW><ROW><id>18940352</id><snippet>r</snippet></ROW><ROW><id>18940352</id><snippet>p</snippet></ROW><ROW><id>18940352</id><snippet>x</snippet></ROW><ROW><id>18940352</id><snippet>y</snippet></ROW><ROW><id>18940352</id><snippet>p-1, x, y</snippet></ROW><ROW><id>18940352</id><snippet>def spirograph(R,r,p,x,y):
    R=100 # this will cancel out whatever the user passes in as `R`
    r=4 # same here for the value of `r`
    t=2*pi
</snippet></ROW><ROW><id>18940352</id><snippet>&gt;&gt;&gt; def example(a, b, c=100):
...    a = 1  # notice here I am assigning 'a'
...    b = 2  # and here the value of 'b' is being overwritten
...    # The value of c is set to 100 by default
...    print(a,b,c)
...
&gt;&gt;&gt; example(4,5)  # Here I am passing in 4 for a, and 5 for b
(1, 2, 100)  # but notice its not taking any effect
&gt;&gt;&gt; example(9,10,11)  # Here I am passing in a value for c
(1, 2, 11)
</snippet></ROW><ROW><id>18940352</id><snippet>def spirograph(p,x,y):
    # ... the rest of your code
</snippet></ROW><ROW><id>18940352</id><snippet>def spirograph(p,x,y,R=100,r=4):
    # ... the rest of your code
</snippet></ROW><ROW><id>18940473</id><snippet>&gt;&gt;&gt; print("you're a %s man" % input("put an adjective: "))
put an adjective: foo
you're a foo man
</snippet></ROW><ROW><id>18940473</id><snippet>print()</snippet></ROW><ROW><id>18940473</id><snippet>None</snippet></ROW><ROW><id>18940473</id><snippet>None</snippet></ROW><ROW><id>18940473</id><snippet>&gt;&gt;&gt; None % "foo"
Traceback (most recent call last):
  File "&lt;ipython-input-2-1aa4f0c0cbbd&gt;", line 1, in &lt;module&gt;
    None % "foo"
TypeError: unsupported operand type(s) for %: 'NoneType' and 'str'
</snippet></ROW><ROW><id>18940552</id><snippet>sum(1 for d in my_list if d.get('id') == the_value_you_are_interested_in)

&gt;&gt;&gt; my_list = [{ 'id':1, 'val':123 }, {'id':2, 'val':456 }, {'id':2, 'val':789 }]
&gt;&gt;&gt; sum(1 for d in my_list if d.get('id') == 1)
1
&gt;&gt;&gt; sum(1 for d in my_list if d.get('id') == 2)
2
&gt;&gt;&gt; sum(1 for d in my_list if d.get('id') == 20)
0
</snippet></ROW><ROW><id>18940552</id><snippet>list.count(x)</snippet></ROW><ROW><id>18940552</id><snippet>x</snippet></ROW><ROW><id>18940552</id><snippet>filter</snippet></ROW><ROW><id>18940619</id><snippet>q</snippet></ROW><ROW><id>18940619</id><snippet>q</snippet></ROW><ROW><id>18940619</id><snippet>q</snippet></ROW><ROW><id>18940619</id><snippet>do_database()</snippet></ROW><ROW><id>18940619</id><snippet>return</snippet></ROW><ROW><id>18940619</id><snippet>q.put(do_database(url))</snippet></ROW><ROW><id>18940619</id><snippet>None</snippet></ROW><ROW><id>18940619</id><snippet>q</snippet></ROW><ROW><id>18940619</id><snippet>import threading
import Queue

NUM_THREADS = 5  # whatever

q = Queue.Queue()
END_OF_DATA = object()  # a unique object

class Worker(threading.Thread):
    def run(self):
        while True:
            url = q.get()
            if url is END_OF_DATA:
                break
            webdata = grab_url(url)
            try:
                # Does your database support concurrent updates
                # from multiple threads?  If not, need to put
                # this in a "with some_global_mutex:" block.
                insert_data_into_database(webdata)
            except:
                #....

threads = [Worker() for _ in range(NUM_THREADS)]
for t in threads:
    t.start()

for myfiles in currentdir:
    url = myfiles + some_other_string
    q.put(url)

# Give each thread an END_OF_DATA marker.
for _ in range(NUM_THREADS):
    q.put(END_OF_DATA)

# Shut down cleanly.  `daemon` is way overused.
for t in threads:
    t.join()
</snippet></ROW><ROW><id>18941032</id><snippet># thread queue
threadQueue = Queue()

# thread numbering
threadNumber = 0

# thread start
threadCanStart = True
</snippet></ROW><ROW><id>18941032</id><snippet>if threadCanStart:
    myThread(threadNumber, threadQueue).start()
    threadNumber += 1
    threadCanStart = False

try:
    #we have a return in the quqe
    returnValue = threadQueue.get(False)
    print "Queue return: ", returnValue
    threadCanStart = True
except Empty:
    print "Waiting for thread....."
</snippet></ROW><ROW><id>18941191</id><snippet>def find_diffs(inval):
    inval = map(int, inval)
    plain = [i - inval[0] for i in inval[1:]]
    return plain, [-i for i in plain]


def check(inval, against):
    inval_diff, _ = find_diffs(inval)
    print against, inval
    for i in range(0, len(against) - len(inval) + 1):
        test, inverted_test = find_diffs(against[i: i + len(inval)])
        if test == inval_diff:
            print i
        elif test == inval_inverted_diff:
            print i, "inverted"

inval = '67654'

check(inval, '14676545')
check(inval, '43234545679')
check(inval, '1467654543234545679905')
</snippet></ROW><ROW><id>18941191</id><snippet>14676545 67654
2
43234545679 67654
1 inverted
5 inverted
1467654543234545679905 67654
2
6
9 inverted
13 inverted
</snippet></ROW><ROW><id>18941191</id><snippet>1234 =&gt; 0, 1, 2, 3
5463 =&gt; 0, -1, 1, -2
6667 =&gt; 0, 0, 0, 1
</snippet></ROW><ROW><id>18941191</id><snippet>against</snippet></ROW><ROW><id>18941191</id><snippet>67654 =&gt; 0, 1, 0, -1, -2
14676 =&gt; 0, 3, 5, 6, 5
</snippet></ROW><ROW><id>18941191</id><snippet>against</snippet></ROW><ROW><id>18941456</id><snippet>root = LXML.parse(xml_file_location)
elements_list = root.xpath(".//*[@*[contains(., $text)]]", text = string_to_search )</snippet></ROW><ROW><id>18941456</id><snippet>getpaerent()</snippet></ROW><ROW><id>18941456</id><snippet>root = LXML.parse(xml_file_location)
elements_list = root.xpath(".//*[@*[contains(., $text)]]", text = string_to_search )
print "Found: %s strings in the xml file" %len(elements_list)
for node in elements_list:
    print "\nFound:\n%s" %LXML.tostring(node).split("\n")[0]
    parent = node.getparent()
    if node.tag == "record":
        path = node.get("path") # nodes of type: "record" hold the attribute: "path"
    elif node.tag == "field":
        path = node.get("name") # nodes of type: "field" hold the attribute: "name"
    else:
        print "unclear node type adding empty string"
        path = ""
    full_path = path
    while parent.get("path") != "":
        parent_path = parent.get("path")
        full_path = parent_path + "." + full_path
        parent = parent.getparent()
    print "Full path: %s" %full_path
</snippet></ROW><ROW><id>18941619</id><snippet>+</snippet></ROW><ROW><id>18941619</id><snippet>os.path.join()</snippet></ROW><ROW><id>18941619</id><snippet>import os.path

basepath = os.path.join(wilixdirectory, 'Users', loggedusr)
cp2 = cp2.lstrip('~/`)
cp2 = os.path.abspath(os.path.join(basepath, cp2))
if not cp2.startswith(basepath + os.path.pathsep):
    # something is wrong still, the absolute final path is not inside of
    # user directory, bail now.
    raise ValueError('Not a valid command')

# Perhaps test if os.path.isfile(cp2) is True?

args = [cp2]
if cp3 is not None:
    args.append[cp3]

subprocess.call(args)
</snippet></ROW><ROW><id>18941619</id><snippet>~</snippet></ROW><ROW><id>18941619</id><snippet>/</snippet></ROW><ROW><id>18941619</id><snippet>cp2</snippet></ROW><ROW><id>18941619</id><snippet>os.path.abspath()</snippet></ROW><ROW><id>18941619</id><snippet>./</snippet></ROW><ROW><id>18941619</id><snippet>../</snippet></ROW><ROW><id>18941619</id><snippet>os.path.isfile()</snippet></ROW><ROW><id>18941619</id><snippet>cp2</snippet></ROW><ROW><id>18941619</id><snippet>subprocess.call()</snippet></ROW><ROW><id>18941769</id><snippet>bin/cloud9.sh -w ~/git/myproject -l 0.0.0.0</snippet></ROW><ROW><id>18941769</id><snippet>http://yourserveraddress:3131</snippet></ROW><ROW><id>18941907</id><snippet>import time

def foo():
    while True:
        time.sleep(1)

def bar():
    for i in range(10):
        foo()

bar() 
</snippet></ROW><ROW><id>18941907</id><snippet>$ bin/python endless_demo.py 
^CTraceback (most recent call last):
  File "test.py", line 11, in &lt;module&gt;
    bar() 
  File "test.py", line 9, in bar
    foo()
  File "test.py", line 5, in foo
    time.sleep(1)
KeyboardInterrupt
</snippet></ROW><ROW><id>18941907</id><snippet>foo</snippet></ROW><ROW><id>18941907</id><snippet>bar()</snippet></ROW><ROW><id>18941907</id><snippet>foo()</snippet></ROW><ROW><id>18941907</id><snippet>except</snippet></ROW><ROW><id>18941907</id><snippet>try:</snippet></ROW><ROW><id>18941907</id><snippet>except:</snippet></ROW><ROW><id>18941907</id><snippet>KeyboardInterrupt</snippet></ROW><ROW><id>18941907</id><snippet>except Exception:</snippet></ROW><ROW><id>18942116</id><snippet>pip install --upgrade setuptools
</snippet></ROW><ROW><id>18942177</id><snippet>def quickSort(queue):
    lengthOfQueue = len(queue)
    if lengthOfQueue &lt;= 1: return queue
    pivotLocation = lengthOfQueue // 2
    pivot, lesser, greater = queue[pivotLocation], [], []
    for i in range(lengthOfQueue):
        if (i == pivotLocation): continue
        if (queue[i] &lt;= pivot): lesser.append(queue[i])
        else: greater.append(queue[i])
    return quickSort(lesser) + [queue[pivotLocation]] + quickSort(greater)

print quickSort([3, 7, 8, 5, 2, 1, 9, 5, 4])
</snippet></ROW><ROW><id>18942177</id><snippet>[1, 2, 3, 4, 5, 5, 7, 8, 9]
</snippet></ROW><ROW><id>18942177</id><snippet>  function quicksort('array')
      if length('array') ≤ 1
          return 'array'  // an array of zero or one elements is already sorted
      select and remove a pivot element 'pivot' from 'array'  // see 'Choice of pivot' below
      create empty lists 'less' and 'greater'
      for each 'x' in 'array'
          if 'x' ≤ 'pivot' then append 'x' to 'less'
          else append 'x' to 'greater'
      return concatenate(quicksort('less'), list('pivot'), quicksort('greater')) // two recursive calls
</snippet></ROW><ROW><id>18942177</id><snippet>len(queue)
</snippet></ROW><ROW><id>18942177</id><snippet>pivotLocation = lengthOfQueue // 2
</snippet></ROW><ROW><id>18942177</id><snippet>pivot, lesser, greater = queue[pivotLocation], [], []
</snippet></ROW><ROW><id>18942177</id><snippet>for i in range(lengthOfQueue):
    if (i == pivotLocation): continue
    if (queue[i] &lt;= pivot): lesser.append(queue[i])
    else: greater.append(queue[i])
</snippet></ROW><ROW><id>18942177</id><snippet>if (i == pivotLocation): continue
</snippet></ROW><ROW><id>18942177</id><snippet>return quickSort(lesser) + [queue[pivotLocation]] + quickSort(greater)
</snippet></ROW><ROW><id>18942231</id><snippet>:abbreviate</snippet></ROW><ROW><id>18942241</id><snippet>return random.choice(filter(myCondition, myList) or myList)
</snippet></ROW><ROW><id>18942261</id><snippet>server</snippet></ROW><ROW><id>18942261</id><snippet>run</snippet></ROW><ROW><id>18942261</id><snippet>chat</snippet></ROW><ROW><id>18942261</id><snippet>gtk.main()</snippet></ROW><ROW><id>18942261</id><snippet>start</snippet></ROW><ROW><id>18942261</id><snippet>gtk.main()</snippet></ROW><ROW><id>18942261</id><snippet>chat</snippet></ROW><ROW><id>18942261</id><snippet>threading.Thread</snippet></ROW><ROW><id>18942297</id><snippet>def find(x, L):
    return x in L or any(find(x, sublist)
                         for sublist in L
                         if isinstance(sublist, list))
</snippet></ROW><ROW><id>18942297</id><snippet>def find(x, L, seen=None):
    if seen is None:
        seen = set()
    if id(L) in seen:
        # Avoid infinite recursion
        return False
    seen.add(id(L))
    return x in L or any(find(x, sublist, seen)
                         for sublist in L
                         if isinstance(sublist, list))
</snippet></ROW><ROW><id>18942392</id><snippet>replace()</snippet></ROW><ROW><id>18942392</id><snippet>cur.execute("SELECT Color, Smell FROM Table1, Table2 "
            "WHERE replace(Table1.Name, '\n', '') = Table2.Name") 
</snippet></ROW><ROW><id>18942392</id><snippet>Table</snippet></ROW><ROW><id>18942392</id><snippet>Name</snippet></ROW><ROW><id>18942392</id><snippet>cur.execute("UPDATE Table1 SET Name = replace(Name, '\n', '') "
            "WHERE Name like '%\n%'")
</snippet></ROW><ROW><id>18942441</id><snippet>box</snippet></ROW><ROW><id>18942441</id><snippet>box</snippet></ROW><ROW><id>18942441</id><snippet>from PyQt4 import QtGui, QtCore

class messageBox(QtGui.QWidget):
    def __init__(self, text):
        super(messageBox, self).__init__() 
        self.message = text
        self.initUI()

    def initUI(self):
        self.resize(250, 100)
        self.move(300, 300)
        self.label = QtGui.QLabel(self)
        self.label.setText(self.message) 

class MainWidget(QtGui.QWidget):
    def __init__(self, text):
        super(MainWidget, self).__init__() 
        button = QtGui.QPushButton('Push')
        button.pressed.connect(self.on_button_pressed)
        layout = QtGui.QVBoxLayout()
        layout.addWidget(button)
        self.setLayout(layout)

    def on_button_pressed(self):
        self.box = messageBox('foo')
        self.box.show()

app = QtGui.QApplication([])
mw = MainWidget('test')
mw.show()
app.exec_()
</snippet></ROW><ROW><id>18942441</id><snippet>if button.pressed()</snippet></ROW><ROW><id>18942441</id><snippet>pressed</snippet></ROW><ROW><id>18942456</id><snippet>shutil.rmtree()</snippet></ROW><ROW><id>18942456</id><snippet>import shutil

shutil.rmtree('_Temp_Dir_')
</snippet></ROW><ROW><id>18942456</id><snippet>os.remove()</snippet></ROW><ROW><id>18942456</id><snippet>sleep()</snippet></ROW><ROW><id>18942558</id><snippet>if Col2 &lt;= 1</snippet></ROW><ROW><id>18942558</id><snippet>False</snippet></ROW><ROW><id>18942558</id><snippet>True</snippet></ROW><ROW><id>18942558</id><snippet>int64</snippet></ROW><ROW><id>18942558</id><snippet>True</snippet></ROW><ROW><id>18942558</id><snippet>False</snippet></ROW><ROW><id>18942558</id><snippet>0</snippet></ROW><ROW><id>18942558</id><snippet>df['Col3'] = (df['Col2'] &lt;= 1).astype(int)
</snippet></ROW><ROW><id>18942558</id><snippet>Col3</snippet></ROW><ROW><id>18942558</id><snippet>Col2</snippet></ROW><ROW><id>18942558</id><snippet>df['Col3'] = df['Col2'].map(lambda x: 42 if x &gt; 1 else 55)
</snippet></ROW><ROW><id>18942558</id><snippet>df['Col3'] = 0
condition = df['Col2'] &gt; 1
df.loc[condition, 'Col3'] = 42
df.loc[~condition, 'Col3'] = 55
</snippet></ROW><ROW><id>18942772</id><snippet>if var1 in line !=True:</snippet></ROW><ROW><id>18942772</id><snippet>if 'Program' in line:</snippet></ROW><ROW><id>18942772</id><snippet>`if 'Duration' in line:
     ...code...`

`if 'Title' in line:
     ...code...`
</snippet></ROW><ROW><id>18942772</id><snippet>def wrap_tag(line, tag):
    return '&lt;%s&gt;%s&lt;/%s&gt;' % (tag, line, tag)
</snippet></ROW><ROW><id>18942772</id><snippet>if 'Start' in line:
     wrap_tag(line, 'start')
</snippet></ROW><ROW><id>18942883</id><snippet>user_obj.student_set.all()</snippet></ROW><ROW><id>18943439</id><snippet>NaN</snippet></ROW><ROW><id>18943439</id><snippet>cut()</snippet></ROW><ROW><id>18943439</id><snippet>qcut()</snippet></ROW><ROW><id>18943439</id><snippet>Categorical.labels</snippet></ROW><ROW><id>18943439</id><snippet>-1</snippet></ROW><ROW><id>18943439</id><snippet>df['density'].replace(to_replace=0, value=np.nan, inplace=True)
</snippet></ROW><ROW><id>18943459</id><snippet>data = '{ns:"images",k:"5049",mid:"551FC833EDC139718135AA91A46D6B09FE89E85C",surl:"http://www.thewritingnut.com/blog-challenge/az-day-25-yellow-symbolisms/",imgurl:"http://www.thewritingnut.com/wp-content/uploads/2011/04/yellow-rose-800.jpg",oh:"199",tft:"0",oi:"http://www.thewritingnut.com/wp-content/uploads/2011/04/yellow-rose-800.jpg"}'

re.search('imgurl:"([^"]+)', data).group(1)
</snippet></ROW><ROW><id>18943653</id><snippet>from views import *

urlpatterns = patterns('',
   #(r'^$', time_now),
   (r'^number/(.+)/$', judge),
   (r'^number/$', judge),
)
</snippet></ROW><ROW><id>18943653</id><snippet>def judge(reqest, number=None):
    ...
</snippet></ROW><ROW><id>18943688</id><snippet>import PIL

# The conversion should work equally with a bitmap
img = PIL.Image.open("blackline.jpg")
rgb_im = img.convert('RGB')

rgb_im.size
</snippet></ROW><ROW><id>18943688</id><snippet>(680,646)</snippet></ROW><ROW><id>18943688</id><snippet>rgb_im.getpixel((x,y))</snippet></ROW><ROW><id>18943688</id><snippet>x</snippet></ROW><ROW><id>18943688</id><snippet>y</snippet></ROW><ROW><id>18943688</id><snippet># Get the first row rgb values
first_row = [rgb_im.getpixel((i,0)) for i in range(rgb_im.size[0])]
# Count how many pixels are black. Note that jpg is not the cleanest of all file formats. 
# Hence converting to and from jpg usually comes with some losses, i.e. changes in pixel values. 
first_row.count((0,0,0)) # --&gt; 628
len(first_row) #--&gt; 680
</snippet></ROW><ROW><id>18943688</id><snippet>set(first_row)</snippet></ROW><ROW><id>18943688</id><snippet>{(0, 0, 0),
 (0, 0, 2),
 (0, 1, 0),
 (1, 0, 0),
 (1, 1, 1),
 (2, 2, 0),
 (2, 2, 2),
 (4, 4, 2),
 (4, 4, 4),
 (5, 5, 3),
 (5, 7, 6),
 (6, 6, 4),
 (7, 7, 5),
 (14, 14, 12),
 (14, 14, 14),
 (35, 36, 31),
 (52, 53, 48),
 (53, 54, 46),
 (63, 64, 59),
 (64, 65, 60),
 (66, 67, 61),
 (68, 69, 61),
 (76, 77, 71),
 (79, 82, 65),
 (94, 96, 83),
 (96, 98, 87),
 (99, 101, 90),
 (101, 103, 92)}
</snippet></ROW><ROW><id>18943790</id><snippet>import struct
from functools import partial
from itertools import imap

def to_bytes(number):
    # This can only pack an unsigned long long
    # so we need to split the number into those
    packer = partial(struct.pack, "&gt;Q")

    # How many unsigned long longs needed to hold the number
    iterations = (number.bit_length() // 64) + 1

    # Get the parts
    sections = ((number &gt;&gt; i*64) &amp; 0xFFFFFFFFFFFFFFFF for i in reversed(xrange(iterations)))

    # And map "packer" over them
    return b"".join(imap(packer, sections)).lstrip("\x00")
</snippet></ROW><ROW><id>18943790</id><snippet>&gt;&gt;&gt; to_bytes(0x12300FFABACAADABAF0)
'\x01#\x00\xff\xab\xac\xaa\xda\xba\xf0'

&gt;&gt;&gt; hex(0x12300FFABACAADABAF0)[2:].decode('hex')
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
  File "/usr/lib/python2.7/encodings/hex_codec.py", line 42, in hex_decode
    output = binascii.a2b_hex(input)
TypeError: Non-hexadecimal digit found
</snippet></ROW><ROW><id>18943790</id><snippet>hex</snippet></ROW><ROW><id>18943790</id><snippet>&gt;&gt;&gt; number.to_bytes(number.bit_length()//8+1, "big")
b'\x01#\x00\xff\xab\xac\xaa\xda\xba\xf0'
</snippet></ROW><ROW><id>18943790</id><snippet>%~&gt; python2
Python 2.7.5 (default, May 12 2013, 12:00:47) 
[GCC 4.8.0 20130502 (prerelease)] on linux2
Type "help", "copyright", "credits" or "license" for more information.
&gt;&gt;&gt; (324).bit_length()
9
</snippet></ROW><ROW><id>18943822</id><snippet>ax = df.plot(kind='bar')
ax.set_xlabel('fred')
ax.set_ylabel('barney')
ax.set_title('wilma')
</snippet></ROW><ROW><id>18943853</id><snippet>def packer(s):
    groups = []
    last_char = None
    for c in s:
        if c == last_char:
            groups[-1].append(c)
        else:
            groups.append([c])
        last_char = c
    return ''.join('%s%s'%(g[0], len(g)) for g in groups)
</snippet></ROW><ROW><id>18943853</id><snippet>re</snippet></ROW><ROW><id>18943853</id><snippet>r'(.)\1+'</snippet></ROW><ROW><id>18943853</id><snippet>re.sub</snippet></ROW><ROW><id>18943853</id><snippet>regex = re.compile(r'(.)\1+')

def replacer(match):
    return match.group(1) + str(len(match.group(0)))

regex.sub(replacer, 'aaabbkka')
#=&gt; 'a3b2k2a'
</snippet></ROW><ROW><id>18944069</id><snippet>17</snippet></ROW><ROW><id>18944069</id><snippet>17</snippet></ROW><ROW><id>18944069</id><snippet>age</snippet></ROW><ROW><id>18944069</id><snippet>age</snippet></ROW><ROW><id>18944069</id><snippet>&gt;&gt;&gt; 'a' + 2
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
TypeError: cannot concatenate 'str' and 'int' objects
</snippet></ROW><ROW><id>18944069</id><snippet>str()</snippet></ROW><ROW><id>18944069</id><snippet>str()</snippet></ROW><ROW><id>18944069</id><snippet>str()</snippet></ROW><ROW><id>18944069</id><snippet>str()</snippet></ROW><ROW><id>18944069</id><snippet>str()</snippet></ROW><ROW><id>18944078</id><snippet>kind</snippet></ROW><ROW><id>18944078</id><snippet>kind='User'</snippet></ROW><ROW><id>18944104</id><snippet># there is no need to import the `string` module; `.strip()` is a built-in
# method of strings (i.e. objects of type `str`).

# read in the data as a list of pairs of raw (i.e. unparsed) coordinates in
# string form:
with open(r'C:\coordinates.txt') as in_file:
    coords_raw = [line.strip().split() for line in in_file.readlines()]

# convert the raw list into a list of pairs (2-tuples) containing the parsed
# (i.e. float not string) data:
coord_pairs = [(float(x_raw), float(y_raw)) for x_raw, y_raw in coords_raw]

coord_pairs.sort()  # you want to sort the entire data set, not just values on
                    # individual lines as in your original snippet

# build a list of all x and y values we have (this could be done in one line
# using some `zip()` hackery, but I'd like to keep it readable (for you at
# least)):
all_xs = [x for x, y in coord_pairs]
all_ys = [y for x, y in coord_pairs]
# compute min and max:
x_min, x_max = min(all_xs), max(all_xs)
y_min, y_max = min(all_ys), max(all_ys)

# NOTE: the above section performs well for small data sets; for large ones, you
# should combine the 4 lines in a single for loop so as to NOT have to read
# everything to memory and iterate over the data 6 times.

# write everything out
with open(r'C:\coordinates_sorted.txt', 'wb') as out_file:
    # here, we're doing 3 things in one line:
    #   * iterate over all coordinate pairs and convert the pairs to the string
    #     form
    #   * join the string forms with a newline character
    #   * write the result of the join+iterate expression to the file
    out_file.write('\n'.join('%f,%f' % (x, y) for x, y in coord_pairs))

    out_file.write('\n\n')
    out_file.write('%f %f %f %f' % (x_min, x_max, y_min, y_max))
</snippet></ROW><ROW><id>18944104</id><snippet>with open(...) as &lt;var_name&gt;</snippet></ROW><ROW><id>18944104</id><snippet>try-finally</snippet></ROW><ROW><id>18944104</id><snippet>open(...)</snippet></ROW><ROW><id>18944104</id><snippet>.close()</snippet></ROW><ROW><id>18944104</id><snippet>with</snippet></ROW><ROW><id>18944104</id><snippet>try-finally</snippet></ROW><ROW><id>18944104</id><snippet>with</snippet></ROW><ROW><id>18944169</id><snippet>for e in list2:
    if e[0] in list1:
        list3.append(e)
</snippet></ROW><ROW><id>18944169</id><snippet>e[0]</snippet></ROW><ROW><id>18944169</id><snippet>list2</snippet></ROW><ROW><id>18944169</id><snippet>list3 = filter(lambda e: e[0] in list1, list2)
</snippet></ROW><ROW><id>18944169</id><snippet>list3 = [e for e in list2 if e[0] in list1]
</snippet></ROW><ROW><id>18944273</id><snippet>def put_tasks(q):
    ...

    print('put_tasks: no more tasks')
    q.put(end_of_queue)

def work(id, q):
    while True:
        task = q.get()

        if task == end_of_queue:
            q.put(task)
            print("DONE")
            return

        print('process %d: %s' % (id, task))
        time.sleep(.1)
    print('process %d: done' % id)

class Sentinel:
    def __init__(self, id):
        self.id = id

    def __eq__(self, other):
        if isinstance(other, Sentinel):
            return self.id == other.id

        return NotImplemented

if __name__ == '__main__':
    q = Queue(2)
    end_of_queue = Sentinel("end of queue")
    task_gen = Process(target=put_tasks, args=(q,))
    processes = [Process(target=work, args=(id, q)) for id in range(0, 3)]
    ...
</snippet></ROW><ROW><id>18944273</id><snippet>object()</snippet></ROW><ROW><id>18944273</id><snippet>uuid</snippet></ROW><ROW><id>18944273</id><snippet>import uuid

class Sentinel:
    def __init__(self):
        self.id = uuid.uuid4()

    def __eq__(self, other):
        if isinstance(other, Sentinel):
            return self.id == other.id

        return NotImplemented
</snippet></ROW><ROW><id>18944273</id><snippet>None</snippet></ROW><ROW><id>18944273</id><snippet>None</snippet></ROW><ROW><id>18944289</id><snippet>pip</snippet></ROW><ROW><id>18944289</id><snippet>easy_install</snippet></ROW><ROW><id>18944289</id><snippet>googlemaps</snippet></ROW><ROW><id>18944289</id><snippet>from</snippet></ROW><ROW><id>18944389</id><snippet>request.FILES['docfile'].name</snippet></ROW><ROW><id>18944389</id><snippet>os.path.splitext()</snippet></ROW><ROW><id>18944389</id><snippet>docfile = request.FILES['docfile']
filename = os.path.splitext(docfile.name)[0]
newfilename = 'ok_%s.txt' % filename
</snippet></ROW><ROW><id>18944446</id><snippet>text_file.write(data.encode("utf-8"))
</snippet></ROW><ROW><id>18944482</id><snippet>def solve(k, s, p):
  seat1 = s[0]
  best = -1
  unlucky = (0, -1) # min(accum), position
  accum = 1

  # process all persons between start of the array and the seat #1 position
  for i, pos in enumerate(p):
    if pos &lt;= seat1:
      best = i+1
      accum -= 1
    else:
      break

  if accum &lt; 0:
    unlucky = (accum, 1)

  # process all seats/persons in reverse direction
  i = k
  j = k-1
  while i &gt;= 0 and p[i] &gt; seat1:
    if s[j] &gt;= p[i]: # a seat
      accum += 1
      j -= 1
    else: # a person
      accum -= 1
      i -= 1

    if best == -1 and accum == 0:
      best = i+2 # +1 because indexing starts with 0 &amp; +1 because of pre-decrement

    if accum &lt; unlucky[0]:
      unlucky = (accum, i+2)

  return (best, unlucky[1])


print(solve(3, [2,5,8], [3,4,6,8]))
</snippet></ROW><ROW><id>18944647</id><snippet>stdin</snippet></ROW><ROW><id>18944846</id><snippet>return self.left.exists(data, self)
return self.right.exists(data, self)
</snippet></ROW><ROW><id>18944846</id><snippet>return self.left.exists(data)
return self.right.exists(data)
</snippet></ROW><ROW><id>18944846</id><snippet>Traceback (most recent call last):
  File "t.py", line 44, in &lt;module&gt;
    checklist = root.exists(word)
  File "t.py", line 30, in exists
    return self.left.exists(data, self)
TypeError: exists() takes exactly 2 arguments (3 given)
</snippet></ROW><ROW><id>18944925</id><snippet>re.search(r"(?=.*[a-z])(?=.*[A-Z])(?=.*\d)", "1Az")
</snippet></ROW><ROW><id>18944925</id><snippet>re.search(r"(?=.*[a-z])(?=.*[A-Z])(?=.*\d).{3}", "1Az")
</snippet></ROW><ROW><id>18944925</id><snippet>re.search(r"^(?=.*[a-z])(?=.*[A-Z])(?=.*\d).{3}$", "1Az")
</snippet></ROW><ROW><id>18944925</id><snippet>(?= ... )</snippet></ROW><ROW><id>18944925</id><snippet>(?=.*[a-z])</snippet></ROW><ROW><id>18944925</id><snippet>(?=.*[A-Z])</snippet></ROW><ROW><id>18944925</id><snippet>(?=.*\d)</snippet></ROW><ROW><id>18944937</id><snippet>mock.patch</snippet></ROW><ROW><id>18944937</id><snippet>return_value</snippet></ROW><ROW><id>18944937</id><snippet>func_b()</snippet></ROW><ROW><id>18944937</id><snippet>Fake value</snippet></ROW><ROW><id>18944937</id><snippet>from mock import patch
import unittest


def func_b():
    return "Real value"


def func_a():
    return "The result of func_b is '%s'" % func_b()


class MyTestCase(unittest.TestCase):
    def test_fake_value(self):
        with patch('test.func_b', return_value="Fake value") as mock_function:
            self.assertEqual(func_a(), "The result of func_b is 'Fake value'")
</snippet></ROW><ROW><id>18944937</id><snippet>with patch.object(module_name, 'func_b') as mock_function:
    mock_function.return_value = "Fake value"
    self.assertEqual(func_a(), "The result of func_b is 'Fake value'")
</snippet></ROW><ROW><id>18944991</id><snippet>datetime</snippet></ROW><ROW><id>18944991</id><snippet>import datetime
datetime.datetime.strptime(row[0], "%Y%m%d%H%M")
</snippet></ROW><ROW><id>18944991</id><snippet>.set_scientific(False)</snippet></ROW><ROW><id>18944991</id><snippet>plt.xticks(locs, map(lambda x: "%12.0f" % x, locs))
</snippet></ROW><ROW><id>18944991</id><snippet>import matplotlib.dates as mdates
...
plt.gca().xaxis.major.formatter = mdates.DateFormatter('%Y/%m/%d %H:%M')
</snippet></ROW><ROW><id>18945087</id><snippet>&gt;&gt;&gt; from datetime import datetime
&gt;&gt;&gt; df['Date'] = df.apply(lambda row: datetime(
                              row['Year'], row['Month'], row['Day']), axis=1)
&gt;&gt;&gt; df
   Year  Month  Day                Date
0  2003      1    8 2003-01-08 00:00:00
1  2003      2    7 2003-02-07 00:00:00
</snippet></ROW><ROW><id>18945168</id><snippet>data["Season 1"] = {}
data["Season 1"][steamid] = {'points':20, 'kill':1}
</snippet></ROW><ROW><id>18945168</id><snippet>Season 1</snippet></ROW><ROW><id>18945168</id><snippet>data</snippet></ROW><ROW><id>18945168</id><snippet>dict.setdefault</snippet></ROW><ROW><id>18945168</id><snippet>data.setdefault("Season 1", {})
data["Season 1"][steamid] = {'points':20, 'kill':1}
</snippet></ROW><ROW><id>18945168</id><snippet>data</snippet></ROW><ROW><id>18945168</id><snippet>Season 1</snippet></ROW><ROW><id>18945168</id><snippet>data['Season 1]</snippet></ROW><ROW><id>18945168</id><snippet>{}</snippet></ROW><ROW><id>18945168</id><snippet>Season 1</snippet></ROW><ROW><id>18945197</id><snippet>matplotlib</snippet></ROW><ROW><id>18945197</id><snippet>Qt4</snippet></ROW><ROW><id>18945197</id><snippet>qImage</snippet></ROW><ROW><id>18945197</id><snippet>matplotlib.backends.backed_qt4Agg.FigureCanvasQTAgg.paintEvent</snippet></ROW><ROW><id>18945197</id><snippet>def paintEvent(self, e):
    """
    Copy the image from the Agg canvas to the qt.drawable.
    In Qt, all drawing should be done inside of here when a widget is
    shown onscreen.
    """

    #FigureCanvasQT.paintEvent(self, e)
    if DEBUG:
        print('FigureCanvasQtAgg.paintEvent: ', self,
            self.get_width_height())

    if self.blitbox is None:
        # matplotlib is in rgba byte order.  QImage wants to put the bytes
        # into argb format and is in a 4 byte unsigned int.  Little endian
        # system is LSB first and expects the bytes in reverse order
        # (bgra).
        if QtCore.QSysInfo.ByteOrder == QtCore.QSysInfo.LittleEndian:
            stringBuffer = self.renderer._renderer.tostring_bgra()
        else:
            stringBuffer = self.renderer._renderer.tostring_argb()

        refcnt = sys.getrefcount(stringBuffer)

        qImage = QtGui.QImage(stringBuffer, self.renderer.width,
                              self.renderer.height,
                              QtGui.QImage.Format_ARGB32)
        rect = qImage.rect()    ### &lt;-- added this line
        p = QtGui.QPainter(self)
        p.eraseRect(rect)       ### &lt;-- added this line
        p.drawPixmap(QtCore.QPoint(0, 0), QtGui.QPixmap.fromImage(qImage))

        # draw the zoom rectangle to the QPainter
        if self.drawRect:
            p.setPen(QtGui.QPen(QtCore.Qt.black, 1, QtCore.Qt.DotLine))
            p.drawRect(self.rect[0], self.rect[1],
                       self.rect[2], self.rect[3])
        p.end()

        # This works around a bug in PySide 1.1.2 on Python 3.x,
        # where the reference count of stringBuffer is incremented
        # but never decremented by QImage.
        # TODO: revert PR #1323 once the issue is fixed in PySide.
        del qImage
        if refcnt != sys.getrefcount(stringBuffer):
            _decref(stringBuffer)
    else:
        bbox = self.blitbox
        l, b, r, t = bbox.extents
        w = int(r) - int(l)
        h = int(t) - int(b)
        t = int(b) + h
        reg = self.copy_from_bbox(bbox)
        stringBuffer = reg.to_string_argb()
        qImage = QtGui.QImage(stringBuffer, w, h,
                              QtGui.QImage.Format_ARGB32)
        pixmap = QtGui.QPixmap.fromImage(qImage)
        p = QtGui.QPainter(self)
        p.drawPixmap(QtCore.QPoint(l, self.renderer.height-t), pixmap)
        p.end()
        self.blitbox = None
    self.drawRect = False
</snippet></ROW><ROW><id>18945197</id><snippet>diff --git a/lib/matplotlib/backends/backend_qt4agg.py b/lib/matplotlib/backends/backend_qt4agg.py
index 8433731..718d352 100644
--- a/lib/matplotlib/backends/backend_qt4agg.py
+++ b/lib/matplotlib/backends/backend_qt4agg.py
@@ -118,7 +118,9 @@ class FigureCanvasQTAgg(FigureCanvasQT, FigureCanvasAgg):
             qImage = QtGui.QImage(stringBuffer, self.renderer.width,
                                   self.renderer.height,
                                   QtGui.QImage.Format_ARGB32)
+            rect = qImage.rect()
             p = QtGui.QPainter(self)
+            p.eraseRect(rect)
             p.drawPixmap(QtCore.QPoint(0, 0), QtGui.QPixmap.fromImage(qImage))

             # draw the zoom rectangle to the QPainter
</snippet></ROW><ROW><id>18945266</id><snippet>from google.appengine.ext import ndb

ndb.delete_multi(
    Game.query().fetch(keys_only=True)
)
</snippet></ROW><ROW><id>18945502</id><snippet>In [6]: df
Out[6]: 
     A  B  C
Idx         
0    1  2  3
1    3  4  5
2    2  3  8

In [7]: df.max()
Out[7]: 
A    3
B    4
C    8
dtype: int64

In [10]: df['B'].max()
Out[10]: 4

In [8]: df.idxmax()
Out[8]: 
A    1
B    1
C    2
dtype: int64
</snippet></ROW><ROW><id>18945548</id><snippet>from avc import *</snippet></ROW><ROW><id>18945548</id><snippet>from avc import *
import avc.avcgtk  
</snippet></ROW><ROW><id>18945556</id><snippet>hand.count(card.value)</snippet></ROW><ROW><id>18945556</id><snippet>Card</snippet></ROW><ROW><id>18945556</id><snippet>count()</snippet></ROW><ROW><id>18945556</id><snippet>def find_matches(hand):
    class Match:
        def __init__(self, value, amount):
            self.value = value
            self.amount = amount
    values = [card.value for card in hand]  # list of extracted card values
    matches = [Match(card.value, values.count(card.value)) for card in hand]
    for x in matches:
        print x.value, x.amount
</snippet></ROW><ROW><id>18945556</id><snippet>10 1
4 1
9 1
3 1
12 2
12 2
6 1
</snippet></ROW><ROW><id>18945556</id><snippet>collections.Counter</snippet></ROW><ROW><id>18945556</id><snippet>from collections import Counter

counter = Counter(card.value for card in your_hand)
print '{} unique values: {}'.format(len(counter), counter)
</snippet></ROW><ROW><id>18945556</id><snippet>6 unique values: Counter({12: 2, 3: 1, 4: 1, 6: 1, 9: 1, 10: 1})
</snippet></ROW><ROW><id>18945567</id><snippet>add_with_viewport</snippet></ROW><ROW><id>18945567</id><snippet>self.outgoing.add(self.textview)</snippet></ROW><ROW><id>18945601</id><snippet>DictReader()</snippet></ROW><ROW><id>18945601</id><snippet>def convert_fields(iterable, **conversions):
    for item in iterable:
        for key in item.viewkeys() &amp; conversions:
            item[key] = conversions[key](item[key])
        yield item
</snippet></ROW><ROW><id>18945601</id><snippet>dict.viewkeys()</snippet></ROW><ROW><id>18945601</id><snippet>dict.keys()</snippet></ROW><ROW><id>18945601</id><snippet>csv.DictReader()</snippet></ROW><ROW><id>18945601</id><snippet>with open("data.csv","r") as data_file:
    items = csv.DictReader(data_file, fieldnames=('id', 'length', 'note'))
    items = convert_fields(items, length=float)
    for item in items:
        # item['length'] is now always a float
</snippet></ROW><ROW><id>18945601</id><snippet>**{..}</snippet></ROW><ROW><id>18945601</id><snippet>with open("data.csv","r") as data_file:
    items = csv.DictReader(data_file, fieldnames=('id', 'length', 'note'))
    fieldconv = {'id': int, 'length': float, 'spaced column': float}
    items = convert_fields(items, **fieldconv)
    for item in items:
        # item['length'] and item['spaced column'] are now floats
        # item['id'] is always an int
</snippet></ROW><ROW><id>18945663</id><snippet>python-requests</snippet></ROW><ROW><id>18945663</id><snippet>request.json()</snippet></ROW><ROW><id>18945663</id><snippet>json</snippet></ROW><ROW><id>18945663</id><snippet>request.json()</snippet></ROW><ROW><id>18945663</id><snippet>dict</snippet></ROW><ROW><id>18945663</id><snippet>&gt;&gt;&gt; import requests
&gt;&gt;&gt; repos = requests.get("https://api.github.com/users/gamesbrainiac/repos").json()
&gt;&gt;&gt; repos[0]['git_url']
'git://github.com/gamesbrainiac/DefinitelyTyped.git'
&gt;&gt;&gt; repos[1]['git_url']
'git://github.com/gamesbrainiac/django-crispy-forms.git'
&gt;&gt;&gt; repos[2]['git_url']
'git://github.com/gamesbrainiac/dots.git'
</snippet></ROW><ROW><id>18945663</id><snippet>json</snippet></ROW><ROW><id>18945663</id><snippet>json</snippet></ROW><ROW><id>18945741</id><snippet>items</snippet></ROW><ROW><id>18945741</id><snippet>items</snippet></ROW><ROW><id>18945741</id><snippet>a = d.items()
for k, v in a: ...
# And later, again:
for k, v in a: ...
</snippet></ROW><ROW><id>18945741</id><snippet>help(obj.prop)</snippet></ROW><ROW><id>18945741</id><snippet>obj.prop.items()</snippet></ROW><ROW><id>18945883</id><snippet>try...except</snippet></ROW><ROW><id>18945883</id><snippet>try...except</snippet></ROW><ROW><id>18945883</id><snippet>sys.excepthook</snippet></ROW><ROW><id>18945883</id><snippet>sys.settrace</snippet></ROW><ROW><id>18945883</id><snippet>goto</snippet></ROW><ROW><id>18945883</id><snippet>from goto import goto, label

try:
    1 / 0
    label .foo
    print("recovered")

except:
    goto .foo
</snippet></ROW><ROW><id>18945883</id><snippet>Traceback (most recent call last):
  File "rcv.py", line 9, in &lt;module&gt;
    goto .foo
  File "rcv.py", line 9, in &lt;module&gt;
    goto .foo
  File "/home/joshua/src/goto-1.0/goto.py", line 272, in _trace
    frame.f_lineno = targetLine
ValueError: can't jump into the middle of a block
</snippet></ROW><ROW><id>18945883</id><snippet>line_profiler</snippet></ROW><ROW><id>18945883</id><snippet>import random

from line_profiler import LineProfiler
profiler = LineProfiler()

def profile(function):
    profiler.add_function(function)
    return function


@profile
def foo(a, b, c):
    if not isinstance(a, int):
        raise TypeError("Is this what you mean by a 'run-time semantic check'?")

    d = b * c
    d /= a

    return d**a

profiler.enable()
for _ in range(10000):
    try:
        foo(random.choice([2, 4, 2, 5, 2, 3, "dsd"]), 4, 2)
    except TypeError:
        pass

profiler.print_stats()
</snippet></ROW><ROW><id>18945883</id><snippet>Timer unit: 1e-06 s

File: rcv.py
Function: foo at line 11
Total time: 0.095197 s

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
    11                                           @profile
    12                                           def foo(a, b, c):
    13     10000        29767      3.0     31.3      if not isinstance(a, int):
    14      1361         4891      3.6      5.1          raise TypeError("Is this what you mean by a 'run-time semantic check'?")
    15                                           
    16      8639        20192      2.3     21.2      d = b * c
    17      8639        20351      2.4     21.4      d /= a
    18                                           
    19      8639        19996      2.3     21.0      return d**a
</snippet></ROW><ROW><id>18945883</id><snippet>foo</snippet></ROW><ROW><id>18945883</id><snippet>timeit</snippet></ROW><ROW><id>18945883</id><snippet>time.time()</snippet></ROW><ROW><id>18945997</id><snippet>def sh(dir):   
    a = xlwt.Workbook()
    sheet = a.add_sheet('sheet1')
    n = 0
    for r,d,f in os.walk(dir):
        for files in f:
            if files.endswith(".xml"):
                print files
                dom=parse(os.path.join(r, files))
                name = dom.getElementsByTagName('rev')
                title = dom.getElementsByTagName('title')
                sheet.write(n, 0, files)
                sheet.write(n, 1, title[0].firstChild.nodeValue)
                sheet.write(n, 2, name[0].firstChild.nodeValue)
                n += 1
                print title[0].firstChild.nodeValue
                print name[0].firstChild.nodeValue
    a.save('sha.xls')
</snippet></ROW><ROW><id>18945997</id><snippet>os.walk()</snippet></ROW><ROW><id>18945997</id><snippet>def sh(dir):   
    a = xlwt.Workbook()
    sheet = a.add_sheet('sheet1')
    n = 0
    for f in glob.glob(os.path.join(dir, '*.xml')):
        dom = parse(os.path.join(dir, f))
        name = dom.getElementsByTagName('rev')
        title = dom.getElementsByTagName('title')
        sheet.write(n, 0, f)
        sheet.write(n, 1, title[0].firstChild.nodeValue)
        sheet.write(n, 2, name[0].firstChild.nodeValue)
        n += 1
    a.save('sha.xls')
</snippet></ROW><ROW><id>18946301</id><snippet>class Foo:
    def bar(self):
        print "hello bar"

    def haz(self):
        print "hello haz"

    def nothing(self):
        print "None"

    def __init__(self, choose_me):
        {'foo': self.bar,
         'can': self.haz
         }.get(choose_me, self.nothing)()

if __name__ == '__main__':
    Foo('foo')
</snippet></ROW><ROW><id>18946304</id><snippet>sent_tokenize</snippet></ROW><ROW><id>18946304</id><snippet>punkt</snippet></ROW><ROW><id>18946304</id><snippet>&gt;&gt;&gt; import nltk
&gt;&gt;&gt; st2 = nltk.data.load('tokenizers/punkt/english.pickle')
&gt;&gt;&gt; sent = 'A problem. She said: "I don\'t know about it."'
&gt;&gt;&gt; st2.tokenize(sent, realign_boundaries=True)
['A problem.', 'She said: "I don\'t know about it."']
</snippet></ROW><ROW><id>18946304</id><snippet>6   Punkt Tokenizer</snippet></ROW><ROW><id>18946368</id><snippet>&gt;&gt;&gt; import twisted
&gt;&gt;&gt; twisted.web
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
AttributeError: 'module' object has no attribute 'web'
&gt;&gt;&gt; import twisted.web
&gt;&gt;&gt; twisted.web
&lt;module 'twisted.web' from '/home/alex/lib/python2.7/site-packages/twisted/web/__init__.pyc'&gt;
&gt;&gt;&gt;
</snippet></ROW><ROW><id>18946387</id><snippet>Series</snippet></ROW><ROW><id>18946387</id><snippet>ndarray</snippet></ROW><ROW><id>18946387</id><snippet>subarr = subarr.view(Series) which makes a ``Series`` a sub-class
</snippet></ROW><ROW><id>18946387</id><snippet>Series</snippet></ROW><ROW><id>18946387</id><snippet>NDFrame</snippet></ROW><ROW><id>18946387</id><snippet>ndarray</snippet></ROW><ROW><id>18946468</id><snippet>newdate = datetime.datetime.strptime(str(mydate), '%Y-%m-%d').strftime('%m/%Y')
</snippet></ROW><ROW><id>18946520</id><snippet>&lt;cache&gt;</snippet></ROW><ROW><id>18946520</id><snippet>CACHE_MIDDLEWARE_KEY_PREFIX  = 'staging'
CACHES = {
    'default': {
        'BACKEND': 'django.core.cache.backends.memcached.MemcachedCache',
        'LOCATION': 'production_cache_server:11211',
        'KEY_PREFIX': CACHE_MIDDLEWARE_KEY_PREFIX,
    }
}
</snippet></ROW><ROW><id>18946520</id><snippet>KEY_FUNCTION</snippet></ROW><ROW><id>18946520</id><snippet>CACHES = {
    'default': {
        'BACKEND': 'django.core.cache.backends.memcached.MemcachedCache',
        'LOCATION': 'production.jxycyn.cfg.usw1.cache.amazonaws.com:11211',
        'KEY_FUNCTION': 'apps.core.cache_utils.make_key',
    }
}
</snippet></ROW><ROW><id>18946694</id><snippet>models</snippet></ROW><ROW><id>18946694</id><snippet>CharField()</snippet></ROW><ROW><id>18946694</id><snippet>__init__()</snippet></ROW><ROW><id>18946694</id><snippet>from django.db import models
</snippet></ROW><ROW><id>18946694</id><snippet>models</snippet></ROW><ROW><id>18946694</id><snippet>__init__.py</snippet></ROW><ROW><id>18946694</id><snippet>db</snippet></ROW><ROW><id>18946694</id><snippet>django</snippet></ROW><ROW><id>18946694</id><snippet>models</snippet></ROW><ROW><id>18946694</id><snippet>models.py</snippet></ROW><ROW><id>18946694</id><snippet>db</snippet></ROW><ROW><id>18946694</id><snippet>models</snippet></ROW><ROW><id>18946694</id><snippet>Model</snippet></ROW><ROW><id>18946694</id><snippet>models</snippet></ROW><ROW><id>18946694</id><snippet>__init__.py</snippet></ROW><ROW><id>18946694</id><snippet>models</snippet></ROW><ROW><id>18946694</id><snippet>Model</snippet></ROW><ROW><id>18946694</id><snippet>Model</snippet></ROW><ROW><id>18946694</id><snippet>base</snippet></ROW><ROW><id>18946694</id><snippet>base.py</snippet></ROW><ROW><id>18946694</id><snippet>models</snippet></ROW><ROW><id>18946694</id><snippet>CharField()</snippet></ROW><ROW><id>18946694</id><snippet>Model</snippet></ROW><ROW><id>18946694</id><snippet>Book</snippet></ROW><ROW><id>18946694</id><snippet>title</snippet></ROW><ROW><id>18946694</id><snippet>CharField</snippet></ROW><ROW><id>18946694</id><snippet>CharField</snippet></ROW><ROW><id>18946694</id><snippet>__init__()</snippet></ROW><ROW><id>18946694</id><snippet>CharField</snippet></ROW><ROW><id>18946694</id><snippet>fields</snippet></ROW><ROW><id>18946694</id><snippet>models</snippet></ROW><ROW><id>18946694</id><snippet>__init__.py</snippet></ROW><ROW><id>18946694</id><snippet>models</snippet></ROW><ROW><id>18946694</id><snippet>Model</snippet></ROW><ROW><id>18946694</id><snippet>base</snippet></ROW><ROW><id>18946694</id><snippet>fields</snippet></ROW><ROW><id>18946694</id><snippet>models</snippet></ROW><ROW><id>18946694</id><snippet>from</snippet></ROW><ROW><id>18946694</id><snippet>models.Something</snippet></ROW><ROW><id>18946765</id><snippet>mysolution</snippet></ROW><ROW><id>18946765</id><snippet>mysolution = [[0] * 4 for i in range(4)]
</snippet></ROW><ROW><id>18947257</id><snippet>os.stat</snippet></ROW><ROW><id>18947257</id><snippet>st_mtime</snippet></ROW><ROW><id>18947257</id><snippet>dll</snippet></ROW><ROW><id>18947257</id><snippet>st_mtime</snippet></ROW><ROW><id>18947257</id><snippet>src</snippet></ROW><ROW><id>18947257</id><snippet>dest</snippet></ROW><ROW><id>18947257</id><snippet>Root
|
├───dest
├───src
└───updater.py
</snippet></ROW><ROW><id>18947257</id><snippet>import os
import shutil

# Imported for convenience
from collections import namedtuple

# Main function, so this can act like a script
if __name__ == '__main__':
    ROOT_DIR = os.path.abspath(os.path.join(os.path.dirname(__file__)))  # Root directory

    file_change_times_dest = []  # List of files from destination folder
    file_change_times_src = []  # List of files from source folder

    # Nameed tuple to ease writing code
    FileInformation = namedtuple('FileInformation', ['file_path', 'file_name', 'last_modified'])

    # Loop through files in destination folder to collect information
    for dirpath, dirs, files in os.walk(os.path.join(ROOT_DIR, 'dest')):
        for file in files:
            # getting file path
            file_path = os.path.join(dirpath, file)
            # getting file change info and casting it to FileInformation type
            file_change_times_dest.append(FileInformation(file_path, file, os.stat(file_path).st_mtime))

    # Loop through source folder, same logic
    for dirpath, dirs, files in os.walk(os.path.join(ROOT_DIR, 'src')):
        for file in files:
            file_path = os.path.join(dirpath, file)
            file_change_times_src.append(FileInformation(file_path, file,os.stat(file_path).st_mtime))

    # Comparing the two, using Zip to combine the two lists into a tuple
    for file_comp in zip(file_change_times_dest, file_change_times_src):

        # Settings variables for 0 and 1 to make writing code easier
        _DEST = 0
        _SRC = 1

        # File comparison, to see if file name is the same, since we want to update
        if file_comp[_SRC].file_name == file_comp[_DEST].file_name:
            # If the last modified is greater for source, then we copy
            if file_comp[_SRC].last_modified &gt; file_comp[_DEST].last_modified:
                shutil.copy(file_comp[_SRC].file_path, file_comp[_DEST].file_path)
                print("File moved")  # Just for checking
</snippet></ROW><ROW><id>18947272</id><snippet>b2.exe link=shared --with-python
</snippet></ROW><ROW><id>18947343</id><snippet>exists()</snippet></ROW><ROW><id>18947343</id><snippet>.put()</snippet></ROW><ROW><id>18947343</id><snippet>if</snippet></ROW><ROW><id>18947343</id><snippet>if root1.exists(word1):
    pass
</snippet></ROW><ROW><id>18947343</id><snippet>.exists()</snippet></ROW><ROW><id>18947343</id><snippet>(None, None)</snippet></ROW><ROW><id>18947343</id><snippet>&gt;&gt;&gt; if (None, None):
...     print 'A tuple is considered True if not empty'
... 
A tuple is considered True if not empty
</snippet></ROW><ROW><id>18947343</id><snippet>None</snippet></ROW><ROW><id>18947343</id><snippet>def exists(self, data1):
    if data1 &lt; self.data1:
        if self.left1 is None:
            return None
        return self.left1.exists(data1)
    elif data1 &gt; self.data1:
        if self.right1 is None:
            return None
        return self.right1.exists(data1)
    else:
        return self.data1
</snippet></ROW><ROW><id>18947343</id><snippet>and</snippet></ROW><ROW><id>18947343</id><snippet>return</snippet></ROW><ROW><id>18947343</id><snippet>def exists(self, data1):
    if data1 &lt; self.data1:
        return self.left1 and self.left1.exists(data1)
    if data1 &gt; self.data1:
        return self.right1 and self.right1.exists(data1)
    return self.data1
</snippet></ROW><ROW><id>18947343</id><snippet>&gt;&gt;&gt; tree = BintreeEN('foo')
&gt;&gt;&gt; tree.exists('foo')
'foo'
&gt;&gt;&gt; tree.exists('bar')
&gt;&gt;&gt; tree.put('bar')
&gt;&gt;&gt; tree.exists('bar')
'bar'
</snippet></ROW><ROW><id>18947709</id><snippet>self.members</snippet></ROW><ROW><id>18947709</id><snippet>if self.members:
    self.members.pop()
</snippet></ROW><ROW><id>18947709</id><snippet>KeyError</snippet></ROW><ROW><id>18947709</id><snippet>try/except</snippet></ROW><ROW><id>18947709</id><snippet>try:
    self.members.pop()
except KeyError:
    # do smth
</snippet></ROW><ROW><id>18947769</id><snippet>a + b</snippet></ROW><ROW><id>18947803</id><snippet>str.split</snippet></ROW><ROW><id>18947803</id><snippet>&gt;&gt;&gt; l
(("I'm a man.", 2, 5, 10),
 ("I'm 20 years old", 6, 8, 10),
 ('This is just another sentence', 5, 6, 10))
&gt;&gt;&gt; [(i, j, k, m) for p, j, k, m in l for i in p.split()]
[("I'm", 2, 5, 10),
 ('a', 2, 5, 10),
 ('man.', 2, 5, 10),
 ("I'm", 6, 8, 10),
 ('20', 6, 8, 10),
 ('years', 6, 8, 10),
 ('old', 6, 8, 10),
 ('This', 5, 6, 10),
 ('is', 5, 6, 10),
 ('just', 5, 6, 10),
 ('another', 5, 6, 10),
 ('sentence', 5, 6, 10)]
</snippet></ROW><ROW><id>18947807</id><snippet>choice = None
while choice != 0:
    print("Hello")

choice = 0
</snippet></ROW><ROW><id>18947831</id><snippet>test.py</snippet></ROW><ROW><id>18947831</id><snippet>a='Don\xb4t dream it\xb4s over'
a = a.replace("\xb4","'")
print a
</snippet></ROW><ROW><id>18947831</id><snippet>python ./test.py</snippet></ROW><ROW><id>18947831</id><snippet>Don't dream it's over
</snippet></ROW><ROW><id>18947849</id><snippet>import xlsxwriter

# Create a new workbook and add a worksheet.
workbook = xlsxwriter.Workbook('percent.xlsx')
worksheet = workbook.add_worksheet()

# Create a percentage number format.
percent_format = workbook.add_format({'num_format': '0%'})

# Write a number as a percentage.
worksheet.write('A1', .12, percent_format)

workbook.close()
</snippet></ROW><ROW><id>18948075</id><snippet>open -a Firefox</snippet></ROW><ROW><id>18948075</id><snippet>$ "open -a Firefox"
</snippet></ROW><ROW><id>18948075</id><snippet>subprocess.call(['open', '-a', 'Firefox'])
</snippet></ROW><ROW><id>18948084</id><snippet>Min dist to ( 1.2 2.5 ):  13.0
Min dist to ( 2.3 1.0 ):  12.29
Min dist to ( 1.5 4.6 ):  2.26
Min dist to ( 2.3 2.4 ):  13.69
Min dist to ( 5.8 7.4 ):  18.1
Min dist to ( 4.6 1.1 ):  1.45
Min dist to ( 9.1 3.2 ):  1.69
</snippet></ROW><ROW><id>18948084</id><snippet>a
[[ 1.2  2.5]
 [ 2.3  1. ]
 [ 1.5  4.6]
 [ 2.3  2.4]
 [ 5.8  7.4]
 [ 4.6  1.1]
 [ 9.1  3.2]]

b
[[ 1.4  6.1]
 [ 5.8  1.2]
 [ 7.9  3.7]]
</snippet></ROW><ROW><id>18948084</id><snippet>import scipy.spatial.distance as spdist

dist_arr = spdist.cdist(a,b)

print dist_arr**2
[[ 13.    22.85  46.33]
 [ 26.82  12.29  38.65]
 [  2.26  30.05  41.77]
 [ 14.5   13.69  33.05]
 [ 21.05  38.44  18.1 ]
 [ 35.24   1.45  17.65]
 [ 67.7   14.89   1.69]]

ind = np.argmin(dist_arr,axis=1)

print ind
[0 1 0 1 2 1 2]

print dist_arr[np.arange(ind.shape[0]),ind]**2
[ 13.    12.29   2.26  13.69  18.1    1.45   1.69]
</snippet></ROW><ROW><id>18948084</id><snippet>a</snippet></ROW><ROW><id>18948084</id><snippet>b</snippet></ROW><ROW><id>18948141</id><snippet>ast.parse</snippet></ROW><ROW><id>18948141</id><snippet>ast.literal_eval</snippet></ROW><ROW><id>18948141</id><snippet>eval</snippet></ROW><ROW><id>18948160</id><snippet>x</snippet></ROW><ROW><id>18948160</id><snippet>undefined</snippet></ROW><ROW><id>18948160</id><snippet>//global variable holding the response
//substitutes your x
var ajaxResponse;

function drawgraph() {
    function handleResponse(response) {
        ajaxResponse = response; 
        //here you may want to do something with the response
        //like calling a function that uses the global variable ajaxResponse

        //alert(response);
    }
    draw(handleResponse);
};

function draw(handleReponse) {
    $.ajax({
       url: "/currentcost.py",
       success: function(response){
           handleResponse(response);
       }
    });
}
</snippet></ROW><ROW><id>18948160</id><snippet>$(document).ready(function() {
  drawgraph();
}
</snippet></ROW><ROW><id>18948160</id><snippet>id</snippet></ROW><ROW><id>18948160</id><snippet>&lt;button id="button"&gt;click&lt;/button&gt;</snippet></ROW><ROW><id>18948160</id><snippet>$('#button').click(function() {
  drawgraph();
}
</snippet></ROW><ROW><id>18948282</id><snippet>getMatrixHead</snippet></ROW><ROW><id>18948282</id><snippet>glutCreateWindow</snippet></ROW><ROW><id>18948282</id><snippet>    glEnable(GL_DEPTH_TEST)
    glEnable(GL_TEXTURE_2D)

    glGenTextures(len(self.textures), self.textures)
    self.genTexture('wood1', 'textures/wood1.png')
    #-----------------------------------------------------------------------

    # GLUT initialization --------------------------------------------------
    glutInit(argv)
    glutInitDisplayMode(GLUT_RGB | GLUT_DOUBLE | GLUT_DEPTH)
    glutInitWindowPosition(*self.position)
    glutInitWindowSize(*self.size)
    glutCreateWindow(title)
</snippet></ROW><ROW><id>18948282</id><snippet>import Image

from math import cos
from math import pi
from math import sin
from numpy import array
from numpy import uint8
from OpenGL.GL import *
from OpenGL.GLU import *
from OpenGL.GLUT import *
from sys import argv

# Classes ----------------------------------------------------------------------
class AppGL(object):
    def __init__(self, title, position=(100, 100), size=(400, 400)):
        # Properties -----------------------------------------------------------
        self.angle_delta = 4.0
        self.position = position
        self.rotateX = [0, 1.0, 0.0, 0.0]
        self.rotateY = [0, 0.0, 1.0, 0.0]
        self.size = size
        self.translate = [0.0, 0.0, 0.0]
        self.textures = dict()

        #-----------------------------------------------------------------------

        # GLUT initialization --------------------------------------------------
        glutInit(argv)
        glutInitDisplayMode(GLUT_RGB | GLUT_DOUBLE | GLUT_DEPTH)
        glutInitWindowPosition(*self.position)
        glutInitWindowSize(*self.size)
        glutCreateWindow(title)
        #-----------------------------------------------------------------------

        # Callbacks ------------------------------------------------------------
        glutDisplayFunc(self.onDisplayEvent)
        glutKeyboardFunc(self.onKeyEvent)
        glutMotionFunc(self.onMouseMotionEvent)
        glutMouseFunc(self.onMouseButtonEvent)
        glutReshapeFunc(self.onReshapeEvent)
        glutSpecialFunc(self.onSpecialKeyEvent)
        #-----------------------------------------------------------------------

        # Arrays ---------------------------------------------------------------
        self.tablelegmodel = array( list(table_leg_model()), "f")

        #-----------------------------------------------------------------------

    def loadTexture(self, path):
        if path in self.textures.keys():
            glBindTexture(GL_TEXTURE_2D, self.textures[path])
            return

        glDrawBuffer(GL_FRONT)
        glClearColor(0.25, 0.25, 0.75, 1.)
        glClear(GL_COLOR_BUFFER_BIT)

        glMatrixMode(GL_PROJECTION)
        glPushMatrix()
        glLoadIdentity()

        glMatrixMode(GL_MODELVIEW)
        glPushMatrix()
        glLoadIdentity()

        glRasterPos3f(-0.9, 0.9, 0)
        glDisable(GL_TEXTURE_2D)
        glDisable(GL_LIGHTING)
        glutBitmapString(GLUT_BITMAP_HELVETICA_18, "Loading Texture " + path)
        glFinish()
        glDrawBuffer(GL_BACK)

        glMatrixMode(GL_PROJECTION)
        glPopMatrix()
        glMatrixMode(GL_MODELVIEW)
        glPopMatrix()

        img = Image.open(path)
        texture_data = array(list(img.getdata()), uint8)

        texID = array([0], uint8)
        glGenTextures(1, texID)
        texID = texID[0]

        self.textures[path] = texID
        glBindTexture(GL_TEXTURE_2D, texID)
        glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MAG_FILTER, GL_NEAREST)
        glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MIN_FILTER, GL_LINEAR)
        glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_WRAP_S, GL_REPEAT)
        glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_WRAP_T, GL_REPEAT)
        glTexImage2D(GL_TEXTURE_2D, 0, GL_RGB, img.size[0], img.size[1], 0, GL_RGB, GL_UNSIGNED_BYTE, texture_data)

    def onDisplayEvent(self):
        width, height = self.size
        aspect = float(width) / float(height)

        glClearColor(0.0, 0.0, 0.0, 1.0)
        glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT)

        glViewport(0, 0, width, height)

        glMatrixMode(GL_PROJECTION)
        glLoadIdentity()
        gluPerspective(60.0, aspect, 1.0, 100.0)

        glMatrixMode(GL_MODELVIEW)
        glLoadIdentity()
        gluLookAt(0, 0, 4, 0, 0, -1, 0, 1, 0)

        glTranslatef(*self.translate)
        glRotatef(*self.rotateX)
        glRotatef(*self.rotateY)

        # Visual scene ---------------------------------------------------------
        glEnable(GL_DEPTH_TEST)

        glPushMatrix()
        glTranslatef(-0.1, -0.1, 0)

        self.loadTexture('textures/wood1.png')

        glEnable(GL_TEXTURE_2D)

        glInterleavedArrays(GL_T2F_V3F, 0, self.tablelegmodel)
        glDrawElements(GL_QUAD_STRIP, 10, GL_UNSIGNED_INT, array(xrange(0, 10), "d"))

        glPopMatrix()
        #-----------------------------------------------------------------------

        glutSwapBuffers()

    def onKeyEvent(self, key, x, y):
        if key == 'a':
            self.translate[0] += 1

        elif key == 'd':
            self.translate[0] -= 1

        elif key == 's':
            self.translate[1] += 1

        elif key == 'w':
            self.translate[1] -= 1

        elif key == 'q':
            self.translate[2] += 1

        elif key == 'e':
            self.translate[2] -= 1

        else:
            return

        glutPostRedisplay()

    def onMouseMotionEvent(self, x, y):
        pass

    def onMouseButtonEvent(self, button, state, x, y):
        pass

    def onReshapeEvent(self, width, height):
        self.size = width, height
        glutPostRedisplay()

    def onSpecialKeyEvent(self, key, x, y):
        if key == GLUT_KEY_UP:
            self.rotateX[0] += self.angle_delta

        elif key == GLUT_KEY_DOWN:
            self.rotateX[0] -= self.angle_delta

        elif key == GLUT_KEY_LEFT:
            self.rotateY[0] += self.angle_delta

        elif key == GLUT_KEY_RIGHT:
            self.rotateY[0] -= self.angle_delta

        else:
            return

        glutPostRedisplay()

    def run(self):
        glutMainLoop()
#-------------------------------------------------------------------------------

def table_model(radius, number_of_points):
    delta = 2 * pi / (number_of_points - 1)
    points = []

    for i in xrange(number_of_points):
        points.append((radius * cos(i * delta), radius * sin(i * delta), 0.05))
        points.append((radius * cos(i * delta), radius * sin(i * delta), 0))

    return points

def table_leg_model():
    return (
        0, 0,   0, 0.2, 0,
        0, 1,   0, 0.2, 1.0,
        1, 0,   0, 0, 0,
        1, 1,   0, 0, 1.0,
        #0, 0,   0.2, 0, 0,
        #0, 1,   0.2, 0, 1.0,
        #1, 0,   0.2, 0.2, 0,
        #1, 1,   0.2, 0.2, 1.0,
        #0, 0,   0, 0.2, 0,
        #0, 1,   0, 0.2, 1.0,
    )
#-------------------------------------------------------------------------------

# Main -------------------------------------------------------------------------
if __name__ == '__main__':
    AppGL("Moe's Tavern", (300, 100), (800, 600)).run()
#-------------------------------------------------------------------------------
</snippet></ROW><ROW><id>18948313</id><snippet>list comprehension</snippet></ROW><ROW><id>18948313</id><snippet>&gt;&gt;&gt; list_1=['taska1', 'taska2', 'taska3', 'taskb2', 'taska7']
&gt;&gt;&gt; print [l for l in list_1 if not l.startswith('taska')]
['taskb2']
</snippet></ROW><ROW><id>18948313</id><snippet>filter</snippet></ROW><ROW><id>18948313</id><snippet>lambda</snippet></ROW><ROW><id>18948313</id><snippet>&gt;&gt;&gt; filter(lambda l: not l.startswith('taska'), list_1)
['taskb2']
</snippet></ROW><ROW><id>18948334</id><snippet>action</snippet></ROW><ROW><id>18948334</id><snippet>RangeField</snippet></ROW><ROW><id>18948334</id><snippet>name</snippet></ROW><ROW><id>18948334</id><snippet>price</snippet></ROW><ROW><id>18948334</id><snippet>[AND|OR]</snippet></ROW><ROW><id>18948334</id><snippet>class ProductFilter(django_filters.FilterSet):
    nameprice = NamePriceFilter()

    class Meta:
        model = Product
        fields = ['nameprice']
</snippet></ROW><ROW><id>18948431</id><snippet>List</snippet></ROW><ROW><id>18948431</id><snippet>Vehicle</snippet></ROW><ROW><id>18948431</id><snippet>List</snippet></ROW><ROW><id>18948431</id><snippet>Vehicle</snippet></ROW><ROW><id>18948431</id><snippet>class Vehicle():
    def __init__(self):
        self.List = []
        for i in range(10):
            self.List.append(randint(0,10))
</snippet></ROW><ROW><id>18948530</id><snippet>autocmd</snippet></ROW><ROW><id>18948530</id><snippet>FileType python</snippet></ROW><ROW><id>18948530</id><snippet>nnoremap &lt;buffer&gt; &lt;F9&gt; :exec '!python' shellescape(@%, 1)&lt;cr&gt;
</snippet></ROW><ROW><id>18948530</id><snippet>&lt;F9&gt;</snippet></ROW><ROW><id>18948530</id><snippet>python</snippet></ROW><ROW><id>18948574</id><snippet>In [32]: oct(1114)
Out[32]: '02132'

In [33]: int('2132', 8)
Out[33]: 1114

In [34]: 02132 == 1114
Out[34]: True
</snippet></ROW><ROW><id>18948574</id><snippet>0o</snippet></ROW><ROW><id>18948574</id><snippet>0O</snippet></ROW><ROW><id>18948574</id><snippet>0</snippet></ROW><ROW><id>18948692</id><snippet>for</snippet></ROW><ROW><id>18948692</id><snippet>.split()</snippet></ROW><ROW><id>18948692</id><snippet>from itertools import islice

def treatFiles(old_file, new_file, index, start, end):
    with open(old_file, 'r') as old, open(new_file, 'w') as new:
        sliced_file = islice(old, start - index, end - index)

        for line_number, line in enumerate(sliced_file, start=1):
            number, rest = line.split(',', 1)

            if number == '\n':
                new.write(line)
            else:
                new.write(str(line_number) + ',' + rest)
</snippet></ROW><ROW><id>18948692</id><snippet>treatFiles(argv[1], argv[2], newFile, int(argv[3]), int(argv[4]), int(argv[5]))
</snippet></ROW><ROW><id>18949096</id><snippet> def view_inventory(request, slug):

  if request.method == 'POST':
        quantity_add = addQuantity(request.POST)
        if quantity_add.is_valid():
            cd = quantity_add.cleaned_data
            old_inventory = Inventory.objects.get(id=something here) #id or pk or whatever you want
            old_inventory.quantity = cd.get('quantity')
            old_inventory.save()

    quantity_add=addQuantity()

    return render(request, 'inv/view_inventory.html', {
        'item': get_object_or_404(Inventory.objects.all(), slug=slug),
        'form' : quantity_add,
        })
</snippet></ROW><ROW><id>18949132</id><snippet>pip</snippet></ROW><ROW><id>18949159</id><snippet>websocket</snippet></ROW><ROW><id>18949159</id><snippet>ws.send('message')
# to:
ws.send('message', opcode=websocket.ABNF.OPCODE_BINARY)
# or better yet:
ws.send_binary('message')
</snippet></ROW><ROW><id>18949172</id><snippet>AUTH_USER_MODEL</snippet></ROW><ROW><id>18949172</id><snippet>auth.User</snippet></ROW><ROW><id>18949172</id><snippet>django.contrib.auth.models.User</snippet></ROW><ROW><id>18949172</id><snippet>mongoengine.django.auth.User</snippet></ROW><ROW><id>18949172</id><snippet>app_name.ModelName</snippet></ROW><ROW><id>18949172</id><snippet>SOCIAL_AUTH_USER_MODEL = 'mongoengine.django.auth.User'</snippet></ROW><ROW><id>18949369</id><snippet>if (x &gt; y) z++;</snippet></ROW><ROW><id>18949464</id><snippet>asctime</snippet></ROW><ROW><id>18949464</id><snippet>import logging
FORMAT = "%(asctime)s %(name)s %(message)s"
logging.basicConfig(format=FORMAT, level=logging.INFO)
</snippet></ROW><ROW><id>18949464</id><snippet>[host] Executing task 'restart'
[host] sudo: ls
2013-09-23 02:36:54,800 paramiko.transport Connected (version 2.0, client OpenSSH_5.3)
2013-09-23 02:36:55,728 paramiko.transport Authentication (password) successful!
2013-09-23 02:36:55,889 paramiko.transport Secsh channel 1 opened.
...
</snippet></ROW><ROW><id>18949654</id><snippet>import pygame
from pygame.locals import *
pygame.init()
screen=pygame.display.set_mode((640,480),0) 
blocklistDIRT=[]
class Block(object):

    sprite = pygame.image.load("dirt.png").convert_alpha()

    def __init__(self, x, y):
        self.rect = block.sprite.get_rect(top=y, left=x)

blocklist = []    
while True:
    for event in pygame.event.get():
        if event.type == pygame.MOUSEBUTTONUP:
            mse=pygame.mouse.get_pos()
            blocklist.append(Block(mse[0],mse[1])) 
        if event.type == QUIT:
            exit()
    for block in blocklist:
        screen.blit(block.sprite, block.rect)
    pygame.display.update()
</snippet></ROW><ROW><id>18949670</id><snippet>CONFERENCES = (
   ( 'AE', 'AFC East' ),
   ( 'AN', 'AFC North' ),
   ( 'AS', 'AFC South' ),
   ( 'AW', 'AFC West' ),
   ( 'NE', 'NFC East' ),
   ( 'NN', 'NFC North' ),
   ( 'NS', 'NFC South' ),
   ( 'NW', 'NFC West' ),
)
</snippet></ROW><ROW><id>18950083</id><snippet>logging</snippet></ROW><ROW><id>18950083</id><snippet>QueueHandler</snippet></ROW><ROW><id>18950177</id><snippet>parameter = u"foo \u2661"
sys.stdout.write(parameter + " bar\n")
</snippet></ROW><ROW><id>18950177</id><snippet>parameter = u"foo \u2661"
sys.stdout.write(parameter.encode("utf8") + " bar\n")
</snippet></ROW><ROW><id>18950177</id><snippet>for i in range(1,len(title)):
    titlist.append(title[i].firstChild.nodeValue.encode("utf8"))
</snippet></ROW><ROW><id>18950177</id><snippet>title = dom.getElementsByTagName('title')
for i in range(1,len(title)):
    titlist.append(title[i].firstChild.nodeValue.encode("utf8"))
</snippet></ROW><ROW><id>18950177</id><snippet>for title in dom.getElementsByTagName('title')
    titlist.append(title.firstChild.nodeValue.encode("utf8"))
</snippet></ROW><ROW><id>18950180</id><snippet>import anydbm
anydbm._defaultmod = __import__('dumbdbm')
</snippet></ROW><ROW><id>18950243</id><snippet>foo.text_content()</snippet></ROW><ROW><id>18950357</id><snippet>pygame.transform.scale(main_surface, (width, height)</snippet></ROW><ROW><id>18950357</id><snippet>VIDEORESIZE</snippet></ROW><ROW><id>18950429</id><snippet>dict</snippet></ROW><ROW><id>18950429</id><snippet>for thing in doubleDict.itervalues():
        print thing
        print thing['type']
        print thing['name']
        print thing['species']
</snippet></ROW><ROW><id>18950429</id><snippet>.itervalues()</snippet></ROW><ROW><id>18950767</id><snippet>import tokenize
import StringIO

def ns_attr_split(s):
  arr = []
  last_delim = -1
  cnt = 0

  # Tokenize the expression, tracking the last namespace
  # delimiter index in last_delim
  str_io = StringIO.StringIO(s)
  for i in tokenize.generate_tokens(str_io.readline):
    arr.append(i[1])
    if i[1] == '.':
      last_delim = cnt
    cnt = cnt + 1

  # Join the namespace parts into a string
  ns = ""
  for i in range(0,last_delim):
    ns = ns + arr[i]

  # Join the attr parts into a string
  attr = ""
  for i in range(last_delim + 1, len(arr)):
    attr = attr + arr[i]

  return (ns, attr)
</snippet></ROW><ROW><id>18950874</id><snippet>defaultdict</snippet></ROW><ROW><id>18950874</id><snippet>from collections import defaultdict

class_col = 3
data_col = 11

# Read in the data
with open('path/to/your/file.csv', 'r') as f:
    # if you have a header on the file
    # header = f.readline().strip().split(',')
    data = [line.strip().split(',') for line in f]

# Sum the data for each unique class.
# assuming integers, replace int with float if needed
count = defaultdict(int)
for row in data:
    count[row[class_col]] += int(row[data_col])

# Append the relevant sum to the end of each row
for row in xrange(len(data)):
    data[row].append(str(count[data[row][class_col]]))

# Write the results to a new csv file
with open('path/to/your/new_file.csv', 'w') as nf:
    nf.write('\n'.join(','.join(row) for row in data))
</snippet></ROW><ROW><id>18950894</id><snippet>width</snippet></ROW><ROW><id>18950894</id><snippet>pprint</snippet></ROW><ROW><id>18950894</id><snippet>matrix = [ [1,2,3], [4,5,6], [7,8,9] ]
import pprint
pp = pprint.PrettyPrinter(indent=4,width=20)
pp.pprint(matrix)
</snippet></ROW><ROW><id>18950894</id><snippet>[   [1, 2, 3],
    [4, 5, 6],
    [7, 8, 9]]
</snippet></ROW><ROW><id>18951110</id><snippet>endbody, endarm_x, endarm_y = bodyfunc(bodytype,bodycolor, bodypensize, endbody, endarm_x, endarm_y)
</snippet></ROW><ROW><id>18951110</id><snippet>bodyfunc</snippet></ROW><ROW><id>18951160</id><snippet>In [1]: df = pd.DataFrame(np.random.randint(0, 3, (5, 5)), columns=list('abcde'))

In [2]: df
Out[2]:
   a  b  c  d  e
0  2  1  1  2  0
1  0  1  2  0  2
2  1  1  1  0  2
3  0  0  1  1  0
4  2  0  2  0  1

In [3]: df.pivot_table(values=['a', 'b'], rows='c', cols='d')
Out[3]:
   a            b
d  0   1   2    0   1   2
c
1  1   0   2  1.0   0   1
2  1 NaN NaN  0.5 NaN NaN
</snippet></ROW><ROW><id>18951207</id><snippet>def</snippet></ROW><ROW><id>18951209</id><snippet>OrderedDict</snippet></ROW><ROW><id>18951209</id><snippet>dict</snippet></ROW><ROW><id>18951209</id><snippet>dict</snippet></ROW><ROW><id>18951209</id><snippet>dict</snippet></ROW><ROW><id>18951209</id><snippet>&lt;key, value&gt;</snippet></ROW><ROW><id>18951209</id><snippet>key</snippet></ROW><ROW><id>18951209</id><snippet>O(n)</snippet></ROW><ROW><id>18951209</id><snippet>O(n)</snippet></ROW><ROW><id>18951209</id><snippet>O(n)</snippet></ROW><ROW><id>18951209</id><snippet>O(1)</snippet></ROW><ROW><id>18951209</id><snippet>O(1)</snippet></ROW><ROW><id>18951209</id><snippet>&lt;key, value&gt;</snippet></ROW><ROW><id>18951209</id><snippet>O(1)</snippet></ROW><ROW><id>18951209</id><snippet>O(1)</snippet></ROW><ROW><id>18951236</id><snippet>partial</snippet></ROW><ROW><id>18951236</id><snippet>self.Valve_ON.clicked.connect(functools.partial(self.ValveControl.IO_on,6008))
</snippet></ROW><ROW><id>18951236</id><snippet>QSignalMapper</snippet></ROW><ROW><id>18951310</id><snippet>itertools</snippet></ROW><ROW><id>18951310</id><snippet>&gt;&gt;&gt; def drop_alpha(s):
...     return ''.join(itertools.compress(
...             s, itertools.cycle([True, True, True, False])))
...
&gt;&gt;&gt; drop_alpha('12345678')
'123567'
</snippet></ROW><ROW><id>18951532</id><snippet>#include "opencv2/core/core.hpp"
#include "opencv2/imgproc/imgproc.hpp"
#include "opencv2/highgui/highgui.hpp"
#include &lt;cstdio&gt;
#include &lt;iostream&gt;
#include &lt;string&gt;
#include &lt;cstring&gt;
#include &lt;functional&gt;
#include &lt;openssl/md5.h&gt;

using namespace std;
using namespace cv;

static void help()
{
}

char *str2md5(const char *str, int length) {
    int n;
    MD5_CTX c;
    unsigned char digest[16];
    char *out = (char*)malloc(33);

    MD5_Init(&amp;c);

    while (length &gt; 0) {
        if (length &gt; 512) {
            MD5_Update(&amp;c, str, 512);
        } else {
            MD5_Update(&amp;c, str, length);
        }
        length -= 512;
        str += 512;
    }

    MD5_Final(digest, &amp;c);

    for (n = 0; n &lt; 16; ++n) {
        snprintf(&amp;(out[n*2]), 16*2, "%02x", (unsigned int)digest[n]);
    }

    return out;
}


int main(int argc, const char** argv)
{
    help();

    if (argc != 2)
    {
        return EXIT_FAILURE ;
    }

    string inputfile = argv[1] ;

    Mat src = imread (inputfile, -1) ;

    if (src.empty())
    {
        return EXIT_FAILURE ;
    }



    cout &lt;&lt; str2md5((char*)src.data, (int)src.step[0] * src.rows) &lt;&lt; " " &lt;&lt; inputfile &lt;&lt; endl ;




    return 0;
}
</snippet></ROW><ROW><id>18951579</id><snippet>SystemExit</snippet></ROW><ROW><id>18951579</id><snippet>.join()</snippet></ROW><ROW><id>18951579</id><snippet>t.daemon = True
</snippet></ROW><ROW><id>18951579</id><snippet>import os
os._exit(13)  # whatever exit code you want goes there
</snippet></ROW><ROW><id>18951699</id><snippet>Enter starting year: 2008
Enter ending year: 2032
Leap years between 2008 and 2032
2008
2012
2016
2020
2024
2028
2032
</snippet></ROW><ROW><id>18951699</id><snippet>&gt;&gt;&gt; from leapyear import leap
&gt;&gt;&gt; leap()
Enter starting year: &gt;? 2008
Enter ending year: &gt;? 2032
Leap years between 2008 and 2032
2008
2012
2016
2020
2024
2028
2032
</snippet></ROW><ROW><id>18951699</id><snippet>def leap():
    starting = int(raw_input('Enter starting year: '))
    ending = int(raw_input('Enter ending year: '))

    print 'Leap years between', starting, 'and', ending
    while starting &lt;= ending:
        if starting % 4 == 0 and starting % 100 != 0:
            print(starting)
        if starting % 100 == 0 and starting % 400 == 0:
            print(starting)
        starting += 1
</snippet></ROW><ROW><id>18951699</id><snippet>def new_leap(start, end):
    return [x for x in xrange(start, end + 1)
            if (x % 400 == 0) or (x % 4 == 0 and not x % 100 == 0)]
</snippet></ROW><ROW><id>18951699</id><snippet>&gt;&gt;&gt; from leapyear import new_leap
&gt;&gt;&gt; new_leap(2008, 2032)
[2008, 2012, 2016, 2020, 2024, 2028, 2032]
</snippet></ROW><ROW><id>18951749</id><snippet>#We'll fake these in so the code makes sence...
#self.data must be an array as you can't reassign as you are doing later
self.data = list("010011100100")
index = 5

if self.data[index] == 1:      # Triggered, as self.data[:5] is  "010011"
    self.data[index] = 0       # AHA self.data is now changed to "010010..."!!!
        if self.data.index(self.data[index]) - 1 &gt;= 0:
           #Trimmed
</snippet></ROW><ROW><id>18951749</id><snippet>self.data[index]</snippet></ROW><ROW><id>18951749</id><snippet>0</snippet></ROW><ROW><id>18951749</id><snippet>Array.index()</snippet></ROW><ROW><id>18951749</id><snippet>self.data.index(0)</snippet></ROW><ROW><id>18951749</id><snippet>0</snippet></ROW><ROW><id>18951749</id><snippet>self.data.index(0)</snippet></ROW><ROW><id>18951749</id><snippet>0</snippet></ROW><ROW><id>18951749</id><snippet>0-1</snippet></ROW><ROW><id>18951749</id><snippet>-1</snippet></ROW><ROW><id>18951749</id><snippet>width  = 4 # For a 4x4 grid, defined much earlier.
height = 4 # For a 4x4 grid, defined much earlier.

...

if index%width == 0:
    print "we are on the left edge"
if index%width == width - 1:
    print "we are on the right edge"
if index%height == 0:
    print "we are on the top edge"
if index%height == height - 1:
    print "we are on the bottom edge"
</snippet></ROW><ROW><id>18951970</id><snippet>For non-homebrew python (2.x), you need to amend your PYTHONPATH like so:
export PYTHONPATH=/usr/local/lib/python2.7/site-packages:$PYTHONPATH 
</snippet></ROW><ROW><id>18951989</id><snippet>thing.f</snippet></ROW><ROW><id>18951989</id><snippet>thing['f']</snippet></ROW><ROW><id>18951989</id><snippet>self.openlist.sort(key=operator.attrgetter('f'))
</snippet></ROW><ROW><id>18952050</id><snippet>pip install ThePackageFile-0.0.0.tgz
</snippet></ROW><ROW><id>18952050</id><snippet>setup.py</snippet></ROW><ROW><id>18952050</id><snippet>tar xvzf ThePackageFile-0.0.0.tgz
# .. some output
python ThePackageFile/setup.py install
</snippet></ROW><ROW><id>18952411</id><snippet>...

for url in url_list:
    html = urllib2.urlopen(url).read()

    soup = Soup(html)
    for li in soup.findAll('li', attrs={'class':'g'}):
        sLink = li.find('a')
        print sLink['href']
        sSpan = li.find('span', attrs={'class':'st'})
        print sSpan
</snippet></ROW><ROW><id>18952411</id><snippet>import csv
import urllib2

import BeautifulSoup


def getPageText(url, filename):
    data = urllib2.urlopen(url).read()
    bs = BeautifulSoup.BeautifulSoup(data, convertEntities=BeautifulSoup.BeautifulSoup.HTML_ENTITIES)
    with open(filename, 'w') as f:
        writer = csv.writer(f)
        for li in bs.findAll('li', attrs={'class':'g'}):
            sLink = li.find('a')
            sSpan = li.find('span', attrs={'class':'st'})
            writer.writerow([sLink['href'], sSpan])

def main():
    urls = [
        'http://192.168.1.200/coimbatore/3BHK_flats_inCoimbatore.html_%94201308110608%94.html',
        'http://192.168.1.200/coimbatore/3BHK_flats_inCoimbatore.html_%94201308110608%94.html.html',
    ]
    for i, url in enumerate(urls, 1):
        getPageText(url, '{}.csv'.format(i))

if __name__=="__main__":
    main()    
</snippet></ROW><ROW><id>18952732</id><snippet>for</snippet></ROW><ROW><id>18952732</id><snippet>with</snippet></ROW><ROW><id>18952732</id><snippet>import csv    

with open('v.csv', 'w') as csvfile:
    cwriter = csv.writer(csvfile, delimiter=' ', quotechar='|', quoting=csv.QUOTE_MINIMAL)

    for w, c in p.iteritems():
        cwriter.writerow(w + c)
</snippet></ROW><ROW><id>18952732</id><snippet>with</snippet></ROW><ROW><id>18952732</id><snippet>&gt;&gt;&gt; with open('/tmp/1', 'w') as f:
...     print f.closed
... 
False
&gt;&gt;&gt; print f.closed
True
</snippet></ROW><ROW><id>18953100</id><snippet>verify_exists</snippet></ROW><ROW><id>18953215</id><snippet>f = open("test.json" , "w+")
 .....
 .....
your code for reading 
f.read()
 .....
 .....
last_position = f.tell() # return current position of file pointer(where you stoped reading)
</snippet></ROW><ROW><id>18953215</id><snippet>f = open("test.json" , "w+")
f.seek(last_position)
f.read() # now this will start reading from last position
</snippet></ROW><ROW><id>18953291</id><snippet>File</snippet></ROW><ROW><id>18953306</id><snippet>stdout</snippet></ROW><ROW><id>18953306</id><snippet>print</snippet></ROW><ROW><id>18953306</id><snippet>print()</snippet></ROW><ROW><id>18953306</id><snippet>A.B.C</snippet></ROW><ROW><id>18953306</id><snippet>A.B</snippet></ROW><ROW><id>18953306</id><snippet>A</snippet></ROW><ROW><id>18953306</id><snippet>B</snippet></ROW><ROW><id>18953306</id><snippet>C</snippet></ROW><ROW><id>18953571</id><snippet>&gt;&gt;&gt; import re
&gt;&gt;&gt; input = open('path/file').read()
&gt;&gt;&gt; result = re.search(r'.*(string match\s*.*)$', input, re.DOTALL)
&gt;&gt;&gt; print(result.group(1))
string match
string log 5
string log 6
</snippet></ROW><ROW><id>18953571</id><snippet>&gt;&gt;&gt; import re
&gt;&gt;&gt; input = open('path/file').read()
&gt;&gt;&gt; result = re.search(r'.*string match\s*(.*)$', input, re.DOTALL)
&gt;&gt;&gt; print(result.group(1))
string log 5
string log 6
</snippet></ROW><ROW><id>18953725</id><snippet>collections</snippet></ROW><ROW><id>18953725</id><snippet>Counter</snippet></ROW><ROW><id>18953725</id><snippet>OrderedDict</snippet></ROW><ROW><id>18953725</id><snippet>&gt;&gt;&gt; collections.Counter
&lt;class 'collections.Counter'&gt;
&gt;&gt;&gt; collections.OrderedDict
&lt;class 'collections.OrderedDict'&gt;
</snippet></ROW><ROW><id>18953725</id><snippet>namedtuple</snippet></ROW><ROW><id>18953725</id><snippet>deque</snippet></ROW><ROW><id>18953725</id><snippet>defaultdict</snippet></ROW><ROW><id>18953725</id><snippet>&gt;&gt;&gt; collections.deque
&lt;type 'collections.deque'&gt;
&gt;&gt;&gt; collections.namedtuple
&lt;function namedtuple at 0x10070f140&gt;
&gt;&gt;&gt; collections.defaultdict
&lt;type 'collections.defaultdict'&gt;
</snippet></ROW><ROW><id>18953833</id><snippet>picsoup=BeautifulSoup(pichtml, 'html.parser')
</snippet></ROW><ROW><id>18953931</id><snippet>CreateTab(title='Suppliers's list', Content=Suppliers)
</snippet></ROW><ROW><id>18953931</id><snippet>container = VBox()
</snippet></ROW><ROW><id>18953931</id><snippet>Content(container)
</snippet></ROW><ROW><id>18953931</id><snippet>class Suppliers(Gtk.Window):
def __init__(self, container):
    liststore = Gtk.ListStore(int, str, str, str, str, int)
    self.data = session.load_contacts({'type_contact': 'collab'})
    for c in self.data:
        row = ([c.id, c.nom, c.prenom, c.telephone, c.mail, c.actif])
        liststore.append(row)

    # creation of a treeview
    treeview = Gtk.TreeView(model=liststore)
    ...

    # creation of a ScrolledWindow to attach the treeview
    scroll = Gtk.ScrolledWindow()
    scroll.add(treeview)

    # creation of a check button to filter the treeview
    actif_btn = Gtk.CheckButton(label="Active suppliers")
    actif_btn.connect('clicked', self.active_selected, liststore)
    actif_btn.set_active(True)

    # I create a grid to attach every thing        
    grid = Gtk.Grid()
    grid.add(actif_btn)

    # I attach every thing to the initial container
    container.pack_start(grid, False, False,  10)
    container.pack_start(scroll, True, True,  0)
    container.show_all()
</snippet></ROW><ROW><id>18954050</id><snippet>appslist</snippet></ROW><ROW><id>18954050</id><snippet>for</snippet></ROW><ROW><id>18954050</id><snippet>appslist.seek(0)</snippet></ROW><ROW><id>18954218</id><snippet>Popen</snippet></ROW><ROW><id>18954218</id><snippet>TempHello.py</snippet></ROW><ROW><id>18954218</id><snippet>Subprocess.py</snippet></ROW><ROW><id>18954218</id><snippet>import subprocess

if __name__ == '__main__':
    print 'Calling other program'
    child = subprocess.Popen( "python TempHello.py" , shell=True)
    print subprocess.check_output()
    print 'Calling other program completed'
</snippet></ROW><ROW><id>18954218</id><snippet>#! /usr/bin/env python
def sayHello():
    print 'Hello World !'
sayHello()
</snippet></ROW><ROW><id>18954218</id><snippet>#! /usr/bin/python
def sayHello():
    print 'Hello World !'
sayHello()
</snippet></ROW><ROW><id>18954218</id><snippet>chmod u+x TempHello.py</snippet></ROW><ROW><id>18954218</id><snippet>multiprocess</snippet></ROW><ROW><id>18954649</id><snippet>test[0x08:0x04]</snippet></ROW><ROW><id>18954649</id><snippet>test[0x08:0x0A]</snippet></ROW><ROW><id>18954649</id><snippet>h</snippet></ROW><ROW><id>18954649</id><snippet>s[start:end]</snippet></ROW><ROW><id>18954649</id><snippet>s[start:end:step]</snippet></ROW><ROW><id>18954748</id><snippet>import os
script_dir = os.path.dirname(__file__)
file_path = os.path.join(script_dir, 'relative/path/to/file.json')
with open(file_path, 'r') as fi:
    pass
</snippet></ROW><ROW><id>18954748</id><snippet>python script/inner/script.py
</snippet></ROW><ROW><id>18954748</id><snippet>python script.py
</snippet></ROW><ROW><id>18955003</id><snippet>member</snippet></ROW><ROW><id>18955003</id><snippet>time</snippet></ROW><ROW><id>18955003</id><snippet>&gt;&gt;&gt; df1.merge(df2, on=['member', 'time'], how='inner')
   member                time
0       0 2009-09-30 12:00:00
1       0 2009-09-30 18:00:00
2       1 2009-09-30 12:00:00
3       2 2009-09-30 12:00:00
</snippet></ROW><ROW><id>18955003</id><snippet>member</snippet></ROW><ROW><id>18955003</id><snippet>time</snippet></ROW><ROW><id>18955003</id><snippet>&gt;&gt;&gt; df1.merge(df2[['member', 'time']])
   member                time value
0       0 2009-09-30 12:00:00     a
1       0 2009-09-30 18:00:00     b
2       1 2009-09-30 12:00:00     d
3       2 2009-09-30 12:00:00     f
</snippet></ROW><ROW><id>18955080</id><snippet>enumerate()</snippet></ROW><ROW><id>18955080</id><snippet>indices = [i for i, c in enumerate(besedilo) if c == 'o']
</snippet></ROW><ROW><id>18955080</id><snippet>&gt;&gt;&gt; besedilo = "Dober dan Slovenija"
&gt;&gt;&gt; [i for i, c in enumerate(besedilo) if c == 'o']
[1, 12]
</snippet></ROW><ROW><id>18955080</id><snippet>str.index()</snippet></ROW><ROW><id>18955080</id><snippet>start</snippet></ROW><ROW><id>18955080</id><snippet>indices = []
next = -1
while True:
    try:
        next = besedilo.index(next + 1)
        indices.append(next)
    except ValueError:
        break
</snippet></ROW><ROW><id>18955080</id><snippet>$ bin/python -m timeit -s "test = 'Dober dan Slovenija'" "indices = [i for i, c in enumerate(test) if c=='o']" 
100000 loops, best of 3: 2.51 usec per loop
$ bin/python -m timeit -s "test = 'Dober dan Slovenija'" -s "indices,next=[],-1" "while True:" "    try:" "        next= test.index('o', next+1)" "        indices.append(next)" "    except ValueError: break"
1000000 loops, best of 3: 1.06 usec per loop
</snippet></ROW><ROW><id>18955234</id><snippet>&lt;/title&gt;</snippet></ROW><ROW><id>18955234</id><snippet>&lt;!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd"&gt;
&lt;html dir="ltr" lang="en"&gt;
&lt;head&gt;
    &lt;title&gt;Microsoft to acquire Nokia’s devices &amp; services business, license Nokia’s patents and mapping services&lt;/title&gt;
    &lt;meta http-equiv="X-UA-Compatible" content="IE=EmulateIE9; IE=10" /&gt;
    &lt;meta http-equiv="Content-Type" content="text/html; charset=utf-8" /&gt;
    &lt;meta id="ctl00_WtCampaignId" name="DCSext.wt_linkid" /&gt;
    &lt;/title&gt; #You already have endtag of &lt;title&gt;
</snippet></ROW><ROW><id>18955234</id><snippet>&lt;!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd"&gt;
&lt;html dir="ltr" lang="en"&gt;
&lt;head&gt;
    &lt;title&gt;Microsoft to acquire Nokia’s devices &amp; services business, license Nokia’s patents and mapping services&lt;/title&gt;
    &lt;meta http-equiv="X-UA-Compatible" content="IE=EmulateIE9; IE=10" /&gt;
    &lt;meta http-equiv="Content-Type" content="text/html; charset=utf-8" /&gt;
    &lt;meta id="ctl00_WtCampaignId" name="DCSext.wt_linkid" /&gt;
</snippet></ROW><ROW><id>18955679</id><snippet>K</snippet></ROW><ROW><id>18955679</id><snippet>D</snippet></ROW><ROW><id>18955679</id><snippet>import random
random.sample( D.items(), K )
</snippet></ROW><ROW><id>18955679</id><snippet>import csv
import random

genes_csv = csv.reader(open('genes.csv', 'rb'))

genes_dict = {}
for row in genes_csv:
    genes_dict[row[0]] = row[1:]

length = raw_input('How many genes do you want? ')
random_list = random.sample( genes_dict.items(), int(length) )
print random_list
</snippet></ROW><ROW><id>18955679</id><snippet>for key in genes_dict:
    random_list = random.sample(genes_dict.items(), int(length))
    print random_list
</snippet></ROW><ROW><id>18955679</id><snippet>key</snippet></ROW><ROW><id>18955679</id><snippet>N</snippet></ROW><ROW><id>18955679</id><snippet>k</snippet></ROW><ROW><id>18955679</id><snippet>N</snippet></ROW><ROW><id>18955679</id><snippet>N!/(N-k)!k!</snippet></ROW><ROW><id>18955729</id><snippet>with open('mytxtfile.txt', 'r') as txt_file:
    for line in txt_file:
        file_name = line.strip() # or was it trim()? I keep mixing them up
        ifile = open(file_name, 'rb')
        # ... the rest of your code goes here
</snippet></ROW><ROW><id>18955729</id><snippet>import csv
with open('mytxtfile.txt', 'r') as txt_file:
    for line in txt_file:
        file_name = line.strip()
        csv_file = csv.reader(open(file_name, 'rb', delimiter=';'))
        for record in csv_file[1:]: # skip header row
            req = record[1]
            res = record[2]
            if len(req + res):
                print req, '   ', res
</snippet></ROW><ROW><id>18955845</id><snippet>gobject-introspection</snippet></ROW><ROW><id>18955845</id><snippet>glib</snippet></ROW><ROW><id>18955845</id><snippet>g_log_set_handler</snippet></ROW><ROW><id>18956124</id><snippet>from ZODB.PersistentMapping import PersistentMapping (for example)

class Bidict(Persistent):
    def __init__(self):
        self._forward = PersistentMapping()
        self._reverse = PersistentMapping()

    def add(self, from, to):
        self._forward[from] = to
        self._reverse[to] = from

    def getFrom(...)
    def getTo(...)
</snippet></ROW><ROW><id>18956276</id><snippet>NaN</snippet></ROW><ROW><id>18956276</id><snippet>interpolate</snippet></ROW><ROW><id>18956276</id><snippet> pd.concat([data, ts]).sort_index().interpolate().reindex(ts.index)
</snippet></ROW><ROW><id>18956276</id><snippet> pd.concat([data, ts]).sort_index().interpolate()[ts.index]
</snippet></ROW><ROW><id>18956589</id><snippet>findNodeBy</snippet></ROW><ROW><id>18956589</id><snippet>True</snippet></ROW><ROW><id>18956589</id><snippet>findNodeByLineNo</snippet></ROW><ROW><id>18956589</id><snippet>findNodeBy</snippet></ROW><ROW><id>18956589</id><snippet>findNode</snippet></ROW><ROW><id>18956589</id><snippet>def findNode(start, name):
    return findNodeBy(start, lambda n: n.name == name)
</snippet></ROW><ROW><id>18956589</id><snippet>findNodeBy</snippet></ROW><ROW><id>18956589</id><snippet>itertools.dropwhile</snippet></ROW><ROW><id>18956602</id><snippet>sys.settrace</snippet></ROW><ROW><id>18956602</id><snippet>goto</snippet></ROW><ROW><id>18956602</id><snippet>import sys
import inspect

_line_number = None
_frame = None
def jump_to(line_number, frame):
    global _line_number, _frame
    print("Set jump to line", line_number, "in", inspect.getfile(frame))

    _frame = frame
    _line_number = line_number


def _trace(frame, event, arg):
    global _line_number, _frame

    try:
        if _line_number is not None:
            if inspect.getfile(_frame) == inspect.getfile(frame):
                print("Jumping to line", _line_number, "in", inspect.getfile(frame))
                frame.f_lineno = _line_number
                _line_number = None

    except ValueError as e:
        print(e)

    return _trace

def install():
    sys.settrace(_trace)
    frame = sys._getframe().f_back
    while frame:
        frame.f_trace = _trace
        frame = frame.f_back
</snippet></ROW><ROW><id>18956602</id><snippet>import traceh
traceh.install()

import inspect

traceh.jump_to(10, inspect.currentframe())
print(1)
print(2)
print(3)
print(4)
print(5)
print(6)
</snippet></ROW><ROW><id>18956602</id><snippet>Set jump to line 10 in tr.py
Jumping to line 10 in tr.py
4
5
6
</snippet></ROW><ROW><id>18956602</id><snippet>sys.excepthook</snippet></ROW><ROW><id>18956602</id><snippet>...
def new_sys_excepthook(type, value, traceback):
    if type == NameError:
        jump_to(traceback.tb_lineno, traceback.tb_frame)
        traceback.tb_frame
        return

    sys.__excepthook__(type, value, traceback)


def install():
    sys.excepthook = new_sys_excepthook

    sys.settrace(_trace)
    ...
</snippet></ROW><ROW><id>18956602</id><snippet>import traceh
traceh.install()

raise NameError
print(5)
print(6)
</snippet></ROW><ROW><id>18956602</id><snippet>Set jump to line 4 in tr.py
</snippet></ROW><ROW><id>18956602</id><snippet>_trace</snippet></ROW><ROW><id>18956602</id><snippet>jump_to</snippet></ROW><ROW><id>18956602</id><snippet>import traceh
traceh.install()

import inspect

try:
    raise NameError
    print(1)
    print(2)
    print(3)
    print(4)
    print(5)
    print(6)

except:
    traceh.jump_to(10, inspect.currentframe())
</snippet></ROW><ROW><id>18956602</id><snippet>jump_to</snippet></ROW><ROW><id>18956602</id><snippet>Set jump to line 10 in tr.py
Jumping to line 10 in tr.py
can't jump into the middle of a block
</snippet></ROW><ROW><id>18956602</id><snippet>goto</snippet></ROW><ROW><id>18957222</id><snippet>getattr(cls, 'fields')['key'] = 'value'
</snippet></ROW><ROW><id>18957369</id><snippet>from a_module import *
</snippet></ROW><ROW><id>18957369</id><snippet>a_module</snippet></ROW><ROW><id>18957369</id><snippet>dir()</snippet></ROW><ROW><id>18957369</id><snippet>__all__.extend(dir(a_module))
</snippet></ROW><ROW><id>18957369</id><snippet>__</snippet></ROW><ROW><id>18957369</id><snippet>_</snippet></ROW><ROW><id>18957369</id><snippet>__all__.extend(x for x in dir(a_module) if not x.startswith('_'))
</snippet></ROW><ROW><id>18957369</id><snippet>__all__</snippet></ROW><ROW><id>18957369</id><snippet>__all__</snippet></ROW><ROW><id>18957369</id><snippet>__all__.extend((x for x in dir(a_module) if not x.startswith('_'))
               if not hasattr(a_module, '__all__')
               else a_module.__all__)
</snippet></ROW><ROW><id>18957543</id><snippet>len</snippet></ROW><ROW><id>18957543</id><snippet>len</snippet></ROW><ROW><id>18957543</id><snippet>def len(obj):
    return obj.__len__()
</snippet></ROW><ROW><id>18957543</id><snippet>str</snippet></ROW><ROW><id>18957543</id><snippet>list</snippet></ROW><ROW><id>18957543</id><snippet>tuple</snippet></ROW><ROW><id>18957543</id><snippet>len</snippet></ROW><ROW><id>18957543</id><snippet>class MyTypeOfLength3(object):
    def __len__(self):
        return 3

o = MyTypeOfLength3()
print len(o) 
# 3
</snippet></ROW><ROW><id>18957543</id><snippet>len</snippet></ROW><ROW><id>18957543</id><snippet>len</snippet></ROW><ROW><id>18957543</id><snippet>&gt;&gt;&gt; from functools import singledispatch
&gt;&gt;&gt; @singledispatch
... def fun(arg, verbose=False):
...     if verbose:
...         print("Let me just say,", end=" ")
...     print(arg)
...
&gt;&gt;&gt; @fun.register(int)
... def _(arg, verbose=False):
...     if verbose:
...         print("Strength in numbers, eh?", end=" ")
...     print(arg)
...
&gt;&gt;&gt; @fun.register(list)
... def _(arg, verbose=False):
...     if verbose:
...         print("Enumerate this:")
...     for i, elem in enumerate(arg):
...         print(i, elem)
</snippet></ROW><ROW><id>18957543</id><snippet>fun(something)</snippet></ROW><ROW><id>18957543</id><snippet>int</snippet></ROW><ROW><id>18957543</id><snippet>list</snippet></ROW><ROW><id>18957543</id><snippet>def fun(...): ...</snippet></ROW><ROW><id>18957543</id><snippet>singledispatch</snippet></ROW><ROW><id>18957543</id><snippet>pkgutil.simplegeneric</snippet></ROW><ROW><id>18958502</id><snippet>1980    No time changes  
1981    No time changes  
1982    No time changes  
1983    No time changes  
1984    Time zone change on Friday, March 16, 1984 at 1:00:00 AM     
1985    Time zone change on Tuesday, December 31, 1985 at 11:00:00 PM    
1986    No time changes  
1987    No time changes  
1988    No time changes  
1989    No time changes  
</snippet></ROW><ROW><id>18958502</id><snippet>time.mktime((1984,3,16,1,0,0,0,0,0))</snippet></ROW><ROW><id>18958502</id><snippet>time.mktime((1984,3,16,0,59,0,0,0,0))</snippet></ROW><ROW><id>18958794</id><snippet>from tkinter import *

class test:
    def __init__(self, root):
        self.variables = []
        for i in range(26):
            self.variables.append(StringVar())

        self.labels = []
        self.entrys = []
        for ii in range(26):
            char = str(chr(ord('A') + ii))
            self.labels.append(Label(root , text = char))
            self.labels[-1].grid(padx=0, pady=0, row=ii, column=0)
            self.entrys.append(Entry(root, textvariable =self.variables[ii]))
            self.entrys[-1].grid(padx=0, pady=0, row=ii, column=1)

root = Tk()
root.geometry("200x600+50+50")
T = test(root)
root.mainloop()
</snippet></ROW><ROW><id>18959231</id><snippet>add_series()</snippet></ROW><ROW><id>18959231</id><snippet>'=name!$B$32:$B$532'</snippet></ROW><ROW><id>18959231</id><snippet>['name', 31, 1, 531, 1]</snippet></ROW><ROW><id>18959231</id><snippet>add_series()</snippet></ROW><ROW><id>18959231</id><snippet>chart.add_series({
    'categories': '=Sheet1!$A$1:$A$5',
    'values':     '=Sheet1!$B$1:$B$5',
    'line':       {'color': 'red'},
})

# Or using a list of values instead of category/value formulas:
#     [sheetname, first_row, first_col, last_row, last_col]
chart.add_series({
    'categories': ['Sheet1', 0, 0, 4, 0],
    'values':     ['Sheet1', 0, 1, 4, 1],
    'line':       {'color': 'red'},
})
</snippet></ROW><ROW><id>18959231</id><snippet>sheet_name = 'Data'

chart.add_series({
    'categories': [sheet_name, 0, 0, 4, 0],
    'values':     [sheet_name, 0, 1, 4, 1],
    'line':       {'color': 'red'},
})
</snippet></ROW><ROW><id>18959440</id><snippet>numpy.loadtxt</snippet></ROW><ROW><id>18959440</id><snippet>encoding</snippet></ROW><ROW><id>18959440</id><snippet>stockFile = '....'


import numpy as np
import matplotlib.dates as mdates
import codecs

with codecs.open(stockFile, encoding='utf-8-sig') as f:
    date, closep, highp, lowp, openp, volume = np.loadtxt(f, delimiter=',', unpack=True, converters={0: mdates.strpdate2num('%d-%b-%y')})
</snippet></ROW><ROW><id>18959752</id><snippet>import logging
from cherrypy import _cplogging
from logging import handlers
import cherrypy

class HelloWorld:
    @cherrypy.expose 
    def index(self):
        return "Hello world!" 

    @cherrypy.expose
    def link(self):
        #print HelloWorld.c

        #print self.j
        return "link"

    @cherrypy.expose
    def link2(self):
        return "link2"

if name == 'main' :
    applicationLogFileHandler = handlers.TimedRotatingFileHandler('rot_access_file', "midnight", 1)
    applicationLogFileHandler.setLevel(logging.DEBUG)
    applicationLogFileHandler.setFormatter(_cplogging.logfmt)
    cherrypy.log.access_log.addHandler(applicationLogFileHandler)

    applicationLogFileHandler = handlers.TimedRotatingFileHandler('rot_error_file', "midnight", 1)
    applicationLogFileHandler.setLevel(logging.DEBUG)
    applicationLogFileHandler.setFormatter(_cplogging.logfmt)
    cherrypy.log.error_log.addHandler(applicationLogFileHandler)

    cherrypy.quickstart(HelloWorld())
</snippet></ROW><ROW><id>18960025</id><snippet>pip install coverage</snippet></ROW><ROW><id>18960025</id><snippet>[alex@gesa ~]$ virtualenv --no-site-packages venv
[alex@gesa ~]$ source venv/bin/activate
(venv)[alex@gesa ~]$ pip install coverage
(venv)[alex@gesa ~]$ echo 'import sys; print(sys.executable)' &gt; test.py
(venv)[alex@gesa ~]$ python test.py
/home/alex/venv/bin/python
(venv)[alex@gesa ~]$ coverage run test.py
/home/alex/venv/bin/python
(venv)[alex@gesa ~]$
</snippet></ROW><ROW><id>18960451</id><snippet>tmp = np.concatenate((GRZVV, np.ones((16309,1),dtype=np.double)), axis=1)
EVV1 = np.dot(GinvVV, tmp.T)
#Changed line below based on *askewchan's* recommendation
VVg1 = np.sum(np.multiply(EVV1[:n,:],VV[:,np.newaxis]), axis=0)
</snippet></ROW><ROW><id>18960494</id><snippet>df2 = df[df.index!=pd.NaT]
</snippet></ROW><ROW><id>18960494</id><snippet>df2['n'] = 1
</snippet></ROW><ROW><id>18960494</id><snippet>df2.n.resample('D', how="sum")
</snippet></ROW><ROW><id>18960494</id><snippet>plot(df2.n.resample('D', how="sum"))
</snippet></ROW><ROW><id>18961197</id><snippet>flags = int(hexstr, 16)
</snippet></ROW><ROW><id>18961197</id><snippet>flag_indices = []
for flag in errors:
    if flags &amp; (2**flag):
        flag_indices.append(flag)
</snippet></ROW><ROW><id>18961197</id><snippet>(flags &gt;&gt; flag) &amp; 1
</snippet></ROW><ROW><id>18961299</id><snippet>if any(block.rect.colliderect(x.rect) for x in blocklist if x is not block):
            x=(int(mse[0]) / 32)*32
            y=(int(mse[1]) / 32)*32
            blockpairs = itertools.combinations(blocklist,2) #2 for pairs
            remlist = frozenset(b2 for b1,b2 in blockpairs if b1.rect.colliderect(b2.rect))
            blocklist = [block for block in blocklist if block not in remlist]
            for block in remlist:
                print 'killed it'
                blocklist.remove(block)
</snippet></ROW><ROW><id>18961299</id><snippet>import pygame
from pygame.locals import *

pygame.init()
screen=pygame.display.set_mode((640,480))

class Block(object):
    sprite = pygame.image.load("dirt.png").convert_alpha()
    def __init__(self, x, y):
        # since x and y will be the mouse position,
        # let x and y be the center of the block
        self.rect = self.sprite.get_rect(centery=y, centerx=x)

blocklist = []

while True:
    # don't forget to clear the screen
    screen.fill((0, 0, 0))
    mouse_pos = pygame.mouse.get_pos()

    for event in pygame.event.get():
        if event.type == QUIT: exit()
        if event.type == pygame.MOUSEBUTTONUP: 
            # get all blocks that "collide" with the current mouse position
            to_remove = [b for b in blocklist if b.rect.collidepoint(mouse_pos)]
            for b in to_remove:
                blocklist.remove(b)

            # if we didn't remove a block, we create a new one
            if not to_remove:
                blocklist.append(Block(*mouse_pos))

    for b in blocklist:
        screen.blit(b.sprite, b.rect)

    pygame.display.update()
</snippet></ROW><ROW><id>18961613</id><snippet>Title = pw.Charfield(NULL = True) 
</snippet></ROW><ROW><id>18961613</id><snippet>Title = pw.Charfield(null = True)
</snippet></ROW><ROW><id>18961778</id><snippet>pascal</snippet></ROW><ROW><id>18961778</id><snippet>cdecl</snippet></ROW><ROW><id>18961778</id><snippet>stdcall</snippet></ROW><ROW><id>18962183</id><snippet>def main():
    print("Enter 16-digit credit card number:")

main()
</snippet></ROW><ROW><id>18962257</id><snippet>os.path.getsize()</snippet></ROW><ROW><id>18962257</id><snippet>def getsize(filename):
    """Return the size of a file, reported by os.stat()."""
    return os.stat(filename).st_size
</snippet></ROW><ROW><id>18962262</id><snippet>s = json.dumps(d)</snippet></ROW><ROW><id>18962262</id><snippet>json.loads(s)</snippet></ROW><ROW><id>18962262</id><snippet>pickle</snippet></ROW><ROW><id>18962262</id><snippet>pickle.loads()</snippet></ROW><ROW><id>18962262</id><snippet>pickle.dumps()</snippet></ROW><ROW><id>18962262</id><snippet>json</snippet></ROW><ROW><id>18962262</id><snippet>pickle</snippet></ROW><ROW><id>18962262</id><snippet>eval(s)</snippet></ROW><ROW><id>18962282</id><snippet>import sys

while True:
    print sys.stdin.readline()
</snippet></ROW><ROW><id>18962282</id><snippet>python -u ...</snippet></ROW><ROW><id>18962282</id><snippet>.readline()</snippet></ROW><ROW><id>18962282</id><snippet>-u</snippet></ROW><ROW><id>18962282</id><snippet>-u</snippet></ROW><ROW><id>18962282</id><snippet>sys.stdin</snippet></ROW><ROW><id>18962282</id><snippet>.readline()</snippet></ROW><ROW><id>18962282</id><snippet>for line in sys.stdin</snippet></ROW><ROW><id>18962282</id><snippet>sys.stdin</snippet></ROW><ROW><id>18962282</id><snippet>if t &gt; e:</snippet></ROW><ROW><id>18962282</id><snippet>import sys, time
l = 0
e = int(time.time())
for line in sys.stdin:
    t = int(time.time())
    l += 1
    if t &gt; e:
        e = t
        print l
        l = 0
</snippet></ROW><ROW><id>18962282</id><snippet>time.time()</snippet></ROW><ROW><id>18962282</id><snippet>float</snippet></ROW><ROW><id>18962282</id><snippet>int</snippet></ROW><ROW><id>18962282</id><snippet>int(time.time())</snippet></ROW><ROW><id>18962282</id><snippet>e</snippet></ROW><ROW><id>18962282</id><snippet>int(time.time())</snippet></ROW><ROW><id>18962282</id><snippet>-u</snippet></ROW><ROW><id>18962282</id><snippet>sys.stdin</snippet></ROW><ROW><id>18962431</id><snippet>loader=jinja2.FileSystemLoader(os.path.dirname(__file__))
</snippet></ROW><ROW><id>18962431</id><snippet>    If the template does not exist a :exc:`TemplateNotFound` exception is
    raised.
</snippet></ROW><ROW><id>18962431</id><snippet>template = JINJA_ENVIRONMENT.get_template('index.html')
</snippet></ROW><ROW><id>18962696</id><snippet>timeStamp="2013-09-19T21:37:04Z"
timeStamp_dt = datetime.datetime.strptime(timeStamp, '%Y-%m-%dT%H:%M:%SZ')
now = datetime.datetime.now()
age = now - timeStamp_dt
if age &lt; datetime.timedelta(minutes=30):
    doStuff()
</snippet></ROW><ROW><id>18962748</id><snippet>Task</snippet></ROW><ROW><id>18962748</id><snippet>google.appengine.api.taskqueue</snippet></ROW><ROW><id>18962748</id><snippet>from google.appengine.api import taskqueue
</snippet></ROW><ROW><id>18962748</id><snippet>task = Task(url='/queue', params={'key':key})
</snippet></ROW><ROW><id>18962748</id><snippet>task = taskqueue.Task(url='/queue', params={'key':key})
</snippet></ROW><ROW><id>18962804</id><snippet>from multiprocessing import Pool
def f(x): return x  # FIRST
p = Pool(3) # SECOND
threads = [p.apply_async(f, [i]) for i in range(20)]
for t in threads:
    try: print(t.get(timeout=1))
    except Exception: pass
</snippet></ROW><ROW><id>18962804</id><snippet>from multiprocessing import Pool
def f(x): print(x)  # FIRST
p = Pool(3) # SECOND
p.map(f, range(20))
</snippet></ROW><ROW><id>18962804</id><snippet>from multiprocessing import Pool
from other_module import f
p = Pool(3)
p.map(f, range(20))
</snippet></ROW><ROW><id>18962804</id><snippet>### module.py ###
from multiprocessing import Pool
POOL = Pool(5)

### module2.py ###
def f(x):
    # Some function
from module import POOL
POOL.map(f, range(10))
</snippet></ROW><ROW><id>18962804</id><snippet>### module.py ###
from multiprocessing import Pool
def f(x): return x
p = Pool(1)
print(p.map(f, range(5)))

### module2.py ###
import module
</snippet></ROW><ROW><id>18962804</id><snippet>### module.py ###
from multiprocessing import Pool

def f(x): return x
p = Pool(1)
def run_pool(): print(p.map(f, range(5)))

### module2.py ###
import module
module.run_pool()
</snippet></ROW><ROW><id>18962804</id><snippet>if __name__ == "__main__":</snippet></ROW><ROW><id>18962804</id><snippet>from multiprocessing.pool import ThreadPool
</snippet></ROW><ROW><id>18962815</id><snippet>shell=True</snippet></ROW><ROW><id>18962815</id><snippet>subprocess.call</snippet></ROW><ROW><id>18962815</id><snippet>shell</snippet></ROW><ROW><id>18962815</id><snippet>True</snippet></ROW><ROW><id>18962815</id><snippet>subprocess.call(crop, shell=True)
</snippet></ROW><ROW><id>18962815</id><snippet>import shlex
subprocess.call(shlex.split(crop))
</snippet></ROW><ROW><id>18962818</id><snippet>warnings</snippet></ROW><ROW><id>18962818</id><snippet>import warnings

def fxn():
    warnings.warn("deprecated", DeprecationWarning)

with warnings.catch_warnings():
    warnings.simplefilter("ignore")
    fxn()
</snippet></ROW><ROW><id>18962818</id><snippet>simplefilter</snippet></ROW><ROW><id>18963045</id><snippet>log2</snippet></ROW><ROW><id>18963045</id><snippet>math.h</snippet></ROW><ROW><id>18963410</id><snippet>from bisect import bisect_right

def count_ascending_permutations(sequence_indexes, i, max=float("inf")):
    last = sequence_indexes[i]
    end = bisect_right(last, max)

    return sum(
        count_ascending_permutations(sequence_indexes, i-1, item)
        for item in last[:end]
    ) if i else end

def count_allpaths(target, sequence):
    sequence_chars = {k: [] for k in sequence}
    for i, character in enumerate(target):
        if character in sequence_chars:
            sequence_chars[character].append(i)

    sequence_indexes = [sequence_chars[character] for character in sequence]

    return count_ascending_permutations(sequence_indexes, len(sequence_indexes)-1)
</snippet></ROW><ROW><id>18963410</id><snippet>from itertools import takewhile

def ascending_permutations(sequence_indexes, i, max=float("inf")):
    last = takewhile(lambda item: item &lt; max, sequence_indexes[i])

    if i == 0:
        for item in last:
            yield [item]

    for item in last:
        for subitems in ascending_permutations(sequence_indexes, i-1, item):
            subitems.append(item)
            yield subitems

def allpaths(target, sequence):
    sequence_indexes = []
    for character in sequence:
        sequence_indexes.append([i for i, c in enumerate(target) if c == character])

    return ascending_permutations(sequence_indexes, len(sequence_indexes)-1)

list(allpaths("abcoeubcbc", "abc"))
#&gt;&gt;&gt; [[0, 1, 2], [0, 1, 7], [0, 6, 7], [0, 1, 9], [0, 6, 9], [0, 8, 9]]
</snippet></ROW><ROW><id>18963410</id><snippet>abcoeubcbc</snippet></ROW><ROW><id>18963410</id><snippet>abc</snippet></ROW><ROW><id>18963410</id><snippet>0123456780
abcoeubcbc
----------
abc       
ab     c  
a     bc  
ab       c
a       bc
</snippet></ROW><ROW><id>18963410</id><snippet>c</snippet></ROW><ROW><id>18963410</id><snippet>012
abc
---
abc
</snippet></ROW><ROW><id>18963410</id><snippet>b</snippet></ROW><ROW><id>18963410</id><snippet>a</snippet></ROW><ROW><id>18963410</id><snippet>01234567
abcoeubc
--------
ab     c
a     bc
</snippet></ROW><ROW><id>18963410</id><snippet>b</snippet></ROW><ROW><id>18963410</id><snippet>a</snippet></ROW><ROW><id>18963410</id><snippet>0123456780
abcoeubcbc
----------
ab       c
a       bc
</snippet></ROW><ROW><id>18963410</id><snippet>b</snippet></ROW><ROW><id>18963410</id><snippet>a</snippet></ROW><ROW><id>18963410</id><snippet>allpaths</snippet></ROW><ROW><id>18963410</id><snippet>def allpaths(target, sequence):
    sequence_indexes = []
    for character in sequence:
        sequence_indexes.append([i for i, c in enumerate(target) if c == character])

    return ascending_permutations(sequence_indexes, len(sequence_indexes)-1)
</snippet></ROW><ROW><id>18963410</id><snippet>allpaths</snippet></ROW><ROW><id>18963410</id><snippet>ascending_permutations</snippet></ROW><ROW><id>18963410</id><snippet>ascending_permutations</snippet></ROW><ROW><id>18963410</id><snippet>for character in sequence:
    sequence_indexes.append([i for i, c in enumerate(target) if c == character])
</snippet></ROW><ROW><id>18963410</id><snippet>  abcoeubcbc
  ----------
a|0         |  →  [[0,     ],
b| 1    6 8 |  →   [1, 6, 8],
c|  2    7 9|  →   [2, 7, 9]]
  ----------
</snippet></ROW><ROW><id>18963410</id><snippet>O(len(target) × len(sequence))</snippet></ROW><ROW><id>18963410</id><snippet>O(len(target) + len(sequence))</snippet></ROW><ROW><id>18963410</id><snippet>sequence_chars = {k: [] for k in sequence}
for i, character in enumerate(target):
    if character in sequence_chars:
        sequence_chars[character].append(i)

sequence_indexes = [sequence_chars[character] for character in sequence]
</snippet></ROW><ROW><id>18963410</id><snippet>ascending_permutations</snippet></ROW><ROW><id>18963410</id><snippet>ascending_permutations</snippet></ROW><ROW><id>18963410</id><snippet>def fact(n):
    if n == 1:
        return n

    return n * fact(n-1)
</snippet></ROW><ROW><id>18963410</id><snippet>fact(3)</snippet></ROW><ROW><id>18963410</id><snippet>fib(3) == 3 * fib(2) == 3 * (2 * fib(1)) == 3 * (2 * (1))</snippet></ROW><ROW><id>18963410</id><snippet>1 → 2 → 3</snippet></ROW><ROW><id>18963410</id><snippet>append</snippet></ROW><ROW><id>18963410</id><snippet>append</snippet></ROW><ROW><id>18963410</id><snippet>insert(0, item)</snippet></ROW><ROW><id>18963410</id><snippet>(((our_list).append(a's position)).append(b's position)).append(c's position)
</snippet></ROW><ROW><id>18963410</id><snippet>c</snippet></ROW><ROW><id>18963410</id><snippet>a</snippet></ROW><ROW><id>18963410</id><snippet>a</snippet></ROW><ROW><id>18963410</id><snippet>len(sequence_indexes)-1</snippet></ROW><ROW><id>18963410</id><snippet>ascending_permutations</snippet></ROW><ROW><id>18963410</id><snippet>pop</snippet></ROW><ROW><id>18963410</id><snippet>len(sequence_indexes)-1</snippet></ROW><ROW><id>18963410</id><snippet>sequence_indexes</snippet></ROW><ROW><id>18963410</id><snippet>c</snippet></ROW><ROW><id>18963410</id><snippet>def ascending_permutations(sequence_indexes, i, max=float("inf")):
</snippet></ROW><ROW><id>18963410</id><snippet>max</snippet></ROW><ROW><id>18963410</id><snippet>i</snippet></ROW><ROW><id>18963410</id><snippet>max</snippet></ROW><ROW><id>18963410</id><snippet>     max→

     abcoeubcbc
     ----------
i  a|0         |  →  [[0,     ],
↓  b| 1    6 8 |  →   [1, 6, 8],
   c|  2    7 9|  →   [2, 7, 9]]
     ----------
</snippet></ROW><ROW><id>18963410</id><snippet>    last = takewhile(lambda item: item &lt; max, sequence_indexes[i])
</snippet></ROW><ROW><id>18963410</id><snippet>takewhile</snippet></ROW><ROW><id>18963410</id><snippet>max</snippet></ROW><ROW><id>18963410</id><snippet>max</snippet></ROW><ROW><id>18963410</id><snippet>    if i == 0:
        for item in last:
            yield [item]
</snippet></ROW><ROW><id>18963410</id><snippet>c</snippet></ROW><ROW><id>18963410</id><snippet>2</snippet></ROW><ROW><id>18963410</id><snippet>7</snippet></ROW><ROW><id>18963410</id><snippet>9</snippet></ROW><ROW><id>18963410</id><snippet>    for item in last:
</snippet></ROW><ROW><id>18963410</id><snippet>        for subitems in ascending_permutations(sequence_indexes, i-1, item):
</snippet></ROW><ROW><id>18963410</id><snippet>01234567
abcoeubc
--------
ab     c
a     bc
</snippet></ROW><ROW><id>18963410</id><snippet>c</snippet></ROW><ROW><id>18963410</id><snippet>7</snippet></ROW><ROW><id>18963410</id><snippet>7</snippet></ROW><ROW><id>18963410</id><snippet>            subitems.append(item)
            yield subitems
</snippet></ROW><ROW><id>18963588</id><snippet>new_text=""
for line in lines:
    new_text= new_text + fix_line(line)

def fix_line(line):
     for i, j in dic.iteritems():
          new_line = re.sub("\\b"+i+"\\b", j, line)
          if new_line != line: #line changed stop loop
               return new_line
     return line #line didn't match

print(new_text)
</snippet></ROW><ROW><id>18963588</id><snippet> str_list = line.split(" ")
 if len(str_list) &gt; 4: #case the line has interface
     process(str_list[4])

 def process(str_to_match):
     if str_to_match in dic:
           return dic[str_to_match] #will get the exact match saved in the dict
     return str_to_match #not in dict dont replace
</snippet></ROW><ROW><id>18963773</id><snippet>for section in soup.findAll('span', {"class":"bqQuoteLink"}):
</snippet></ROW><ROW><id>18963773</id><snippet>:</snippet></ROW><ROW><id>18963777</id><snippet>sys.path.append('/full/path/to/apps')</snippet></ROW><ROW><id>18963777</id><snippet>manage.py</snippet></ROW><ROW><id>18963863</id><snippet># binary decomposition to reduce the number of Matrix
# multiplications for n &gt; 3.
beta = binary_repr(n)
Z, q, t = M, 0, len(beta)
while beta[t-q-1] == '0':
    Z = N.dot(Z, Z)
    q += 1
result = Z
for k in range(q+1, t):
    Z = N.dot(Z, Z)
    if beta[t-k-1] == '1':
        result = N.dot(result, Z)
return result
</snippet></ROW><ROW><id>18963863</id><snippet>n</snippet></ROW><ROW><id>18963863</id><snippet>LA.expm(n*LA.logm(m))
</snippet></ROW><ROW><id>18963943</id><snippet>&gt;&gt;&gt; nt = [('left', int), ('right', int)]
&gt;&gt;&gt; n
array([[9, 1],
       [0, 2],
       [1, 3],
       [2, 4],
       [3, 5],
       [4, 6],
       [5, 7],
       [6, 8],
       [7, 9],
       [8, 0]])

&gt;&gt;&gt; out = np.array(np.zeros(n.shape[0]),nt)
&gt;&gt;&gt; out
array([(0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0),
       (0, 0), (0, 0)],
      dtype=[('left', '&lt;i8'), ('right', '&lt;i8')])

&gt;&gt;&gt; out['left']=n[:,0]
&gt;&gt;&gt; out['right']=n[:,1]

&gt;&gt;&gt; out
array([(9, 1), (0, 2), (1, 3), (2, 4), (3, 5), (4, 6), (5, 7), (6, 8),
       (7, 9), (8, 0)],
      dtype=[('left', '&lt;i8'), ('right', '&lt;i8')])

&gt;&gt;&gt; out['left']
array([9, 0, 1, 2, 3, 4, 5, 6, 7, 8])
</snippet></ROW><ROW><id>18963943</id><snippet>&gt;&gt;&gt; import pandas as pd
&gt;&gt;&gt; df = pd.DataFrame(n,columns=['left','right'])
&gt;&gt;&gt; df
   left  right
0     9      1
1     0      2
2     1      3
3     2      4
4     3      5
5     4      6
6     5      7
7     6      8
8     7      9
9     8      0
</snippet></ROW><ROW><id>18963943</id><snippet>&gt;&gt;&gt; df.values
array([[9, 1],
       [0, 2],
       [1, 3],
       [2, 4],
       [3, 5],
       [4, 6],
       [5, 7],
       [6, 8],
       [7, 9],
       [8, 0]])
</snippet></ROW><ROW><id>18964012</id><snippet># Read from file 
f_myfile = open('myfile.pickle', 'wb')
</snippet></ROW><ROW><id>18964012</id><snippet>f_myfile = open('myfile.pickle', 'rb')
</snippet></ROW><ROW><id>18964251</id><snippet>BoxLayout</snippet></ROW><ROW><id>18964251</id><snippet>GridLayout</snippet></ROW><ROW><id>18964251</id><snippet>StackLayout</snippet></ROW><ROW><id>18964251</id><snippet>StackLayout</snippet></ROW><ROW><id>18964251</id><snippet>BoxLayout</snippet></ROW><ROW><id>18964251</id><snippet>GridLayout</snippet></ROW><ROW><id>18964251</id><snippet>BoxLayout</snippet></ROW><ROW><id>18964251</id><snippet>GridLayout</snippet></ROW><ROW><id>18964251</id><snippet>from kivy.app import App
from kivy.lang import Builder
from kivy.uix.floatlayout import FloatLayout

Builder.load_string("""
&lt;Boxes&gt;:
    AnchorLayout:
        anchor_x: 'center'
        anchor_y: 'top'
        ScreenManager:
            size_hint: 1, .9
            id: _screen_manager
            Screen:
                name: 'screen1'
                BoxLayout: 
                    orientation: 'vertical'
                    padding: 50
                    BoxLayout:
                        orientation: 'horizontal'
                        Button:
                            text: "1"
                    BoxLayout:
                        orientation: 'horizontal'
                        Button:
                            text: "2"
                        Button:
                            text: "3"
                        Button:
                            text: "4"
                    BoxLayout:
                        orientation: 'horizontal'
                        Button:
                            text: "5"
                        Button:
                            text: "6"
                    BoxLayout:
                        orientation: 'horizontal'
                        Button:
                            text: "7"
                        Button:
                            text: "8"
                        Button:
                            text: "9"
                        Button:
                            text: "10"
            Screen:
                name: 'screen2'
                Label: 
                    text: 'Another Screen'
    AnchorLayout:
        anchor_x: 'center'
        anchor_y: 'bottom'
        BoxLayout:
            orientation: 'horizontal'
            size_hint: 1, .1
            Button:
                text: 'Go to Screen 1'
                on_press: _screen_manager.current = 'screen1'
            Button:
                text: 'Go to Screen 2'
                on_press: _screen_manager.current = 'screen2'""")

class Boxes(FloatLayout):
    pass

class TestApp(App):
    def build(self):
        return Boxes()

if __name__ == '__main__':
    TestApp().run()
</snippet></ROW><ROW><id>18964251</id><snippet>GridLayouts</snippet></ROW><ROW><id>18964251</id><snippet>BoxLayout: 
    orientation: 'vertical'
</snippet></ROW><ROW><id>18964251</id><snippet>GridLayout: 
    cols: 1
</snippet></ROW><ROW><id>18964251</id><snippet>BoxLayout: 
    orientation: 'vertical'
</snippet></ROW><ROW><id>18964251</id><snippet>GridLayout: 
    cols: 1
</snippet></ROW><ROW><id>18964251</id><snippet>from kivy.app import App
from kivy.lang import Builder
from kivy.uix.floatlayout import FloatLayout
from kivy.uix.boxlayout import BoxLayout
from kivy.uix.button import Button

Builder.load_string("""
&lt;Boxes&gt;:
    boxes: _boxes 
    AnchorLayout:
        anchor_x: 'center'
        anchor_y: 'top'
        ScreenManager:
            size_hint: 1, .9
            id: _screen_manager
            Screen:
                name: 'screen1'
                BoxLayout: 
                    orientation: 'vertical'
                    padding: 50
                    id: _boxes
            Screen:
                name: 'screen2'
                Label: 
                    text: 'Another Screen'
    AnchorLayout:
        anchor_x: 'center'
        anchor_y: 'bottom'
        BoxLayout:
            orientation: 'horizontal'
            size_hint: 1, .1
            Button:
                text: 'Go to Screen 1'
                on_press: _screen_manager.current = 'screen1'
            Button:
                text: 'Go to Screen 2'
                on_press: _screen_manager.current = 'screen2'""")

class Boxes(FloatLayout):
    def __init__(self, **kwargs):
        super(Boxes, self).__init__(**kwargs)
        bx1 = BoxLayout(orientation='horizontal')
        bx2 = BoxLayout(orientation='horizontal')
        bx3 = BoxLayout(orientation='horizontal')
        bx4 = BoxLayout(orientation='horizontal')

        for i in range(1,2):
            bx1.add_widget(Button(text=str(i)))
        for i in range(2,5):
            bx2.add_widget(Button(text=str(i)))
        for i in range(5,7):
            bx3.add_widget(Button(text=str(i)))
        for i in range(7,11):
            bx4.add_widget(Button(text=str(i)))

        self.boxes.add_widget(bx1)
        self.boxes.add_widget(bx2)
        self.boxes.add_widget(bx3)
        self.boxes.add_widget(bx4)


class TestApp(App):
    def build(self):
        return Boxes()

if __name__ == '__main__':
    TestApp().run()
</snippet></ROW><ROW><id>18964359</id><snippet>coo_matrix</snippet></ROW><ROW><id>18964359</id><snippet>rows = list(np.random.randint(100, size=(10000,)))
cols = list(np.random.randint(100, size=(10000,)))
values = list(np.random.rand(10000))

%timeit sps.coo_matrix((values, (rows, cols)))
100 loops, best of 3: 4.03 ms per loop

%timeit (sps.coo_matrix((values[:5000], (rows[:5000], cols[:5000]))) +
         sps.coo_matrix((values[5000:], (rows[5000:], cols[5000:]))))
100 loops, best of 3: 5.24 ms per loop

%timeit sps.coo_matrix((values[:5000], (rows[:5000], cols[:5000])))
100 loops, best of 3: 2.16 ms per loop
</snippet></ROW><ROW><id>18964359</id><snippet>coo_matrix</snippet></ROW><ROW><id>18964359</id><snippet>%timeit (sps.coo_matrix((values[:2500], (rows[:2500], cols[:2500]))) +   
         sps.coo_matrix((values[2500:5000], (rows[2500:5000], cols[2500:5000]))) +  
         sps.coo_matrix((values[5000:7500], (rows[5000:7500], cols[5000:7500]))) + 
         sps.coo_matrix((values[7500:], (rows[7500:], cols[7500:]))))
100 loops, best of 3: 5.76 ms per loop
</snippet></ROW><ROW><id>18964474</id><snippet>time.sleep(3)</snippet></ROW><ROW><id>18964474</id><snippet>gevent.sleep(3)</snippet></ROW><ROW><id>18964555</id><snippet>blocklist</snippet></ROW><ROW><id>18964555</id><snippet>colliderect</snippet></ROW><ROW><id>18964555</id><snippet>for p in player:
    if any(p.rect.colliderect(block) for block in blocklist):
        print 'scoof'
    else:
        p.rect.top += 1
    screen.blit(p.sprite, p.rect)
</snippet></ROW><ROW><id>18964555</id><snippet>blocklist</snippet></ROW><ROW><id>18964593</id><snippet>findAll()</snippet></ROW><ROW><id>18964593</id><snippet>.find()</snippet></ROW><ROW><id>18964593</id><snippet>aslink = soup.find('span',attrs={'class':'ac'})
</snippet></ROW><ROW><id>18964593</id><snippet>str()</snippet></ROW><ROW><id>18964593</id><snippet>print p.sub('', aslink[0]).replace('.','\n')
</snippet></ROW><ROW><id>18964593</id><snippet>aslink</snippet></ROW><ROW><id>18964593</id><snippet>span</snippet></ROW><ROW><id>18964593</id><snippet>for l in aslink:
    print ' '.join(l.stripped_strings)
</snippet></ROW><ROW><id>18964867</id><snippet>if not dic</snippet></ROW><ROW><id>18964867</id><snippet>&gt;&gt;&gt; testDict = {}
&gt;&gt;&gt; if not testDict:
        print "Empty"


Empty
</snippet></ROW><ROW><id>18964867</id><snippet>&gt;&gt;&gt; User = {0: {'uid': ' rpatil\n'}, 1: {}}
&gt;&gt;&gt; if not User[1]:
        print "NULL"


NULL
</snippet></ROW><ROW><id>18964952</id><snippet>#!</snippet></ROW><ROW><id>18964952</id><snippet>execv</snippet></ROW><ROW><id>18964952</id><snippet>execv</snippet></ROW><ROW><id>18964952</id><snippet>/bin/sh</snippet></ROW><ROW><id>18965006</id><snippet>DjangoModelFactory</snippet></ROW><ROW><id>18965355</id><snippet>User</snippet></ROW><ROW><id>18965355</id><snippet># This is so called association table, which links two tables in many-to-many
# relationship.  In this case it links same table's ('users') different rows.
user_contacts = Table(
    'user_contacts', Base.metadata,
    Column('user_id', Integer, ForeignKey('users.id'), primary_key=True),
    Column('contact_id', Integer, ForeignKey('users.id'), primary_key=True),
)

class User(Base):
    __tablename__ = 'users'
    id = Column(Integer, primary_key=True)
    first_name = Column(String)
    last_name = Column(String)
    contacts = relationship(
        'User',
        secondary=user_contacts,
        primaryjoin=id==user_contacts.c.user_id,
        secondaryjoin=id==user_contacts.c.contact_id
    )
</snippet></ROW><ROW><id>18965355</id><snippet>u1 = User(first_name='Foo', last_name='Foo')
u2 = User(first_name='Bar', last_name='Bar')
u3 = User(first_name='Baz', last_name='Baz')
u1.contacts = [u2, u3]
session.add(u1)
session.commit()

# ... and in some other place in your code ...

u = User.query.get(1)
print u.contacts[0].first_name
</snippet></ROW><ROW><id>18965423</id><snippet>login</snippet></ROW><ROW><id>18965423</id><snippet>PBServerFactory</snippet></ROW><ROW><id>18965423</id><snippet>getRootObject</snippet></ROW><ROW><id>18965423</id><snippet>callRemote</snippet></ROW><ROW><id>18965443</id><snippet>@BarackObama</snippet></ROW><ROW><id>18965443</id><snippet>BarackObama</snippet></ROW><ROW><id>18965443</id><snippet>barackobama</snippet></ROW><ROW><id>18965443</id><snippet>print [s.text for s in api.GetUserTimeline(screen_name='@BarackObama')]
</snippet></ROW><ROW><id>18965443</id><snippet>GetUserTimeline</snippet></ROW><ROW><id>18965447</id><snippet>from django.db.models import Avg


class ProductFilter(django_filters.FilterSet):
    ...

    @property
    def avg(self):
        qs = super(ProductFilter, self).qs

        return qs.aggregate(Avg('price'))['id__avg']
</snippet></ROW><ROW><id>18965447</id><snippet>{{ filter.avg }}
</snippet></ROW><ROW><id>18965451</id><snippet>Code</snippet></ROW><ROW><id>18965451</id><snippet>scramble</snippet></ROW><ROW><id>18965451</id><snippet>Country</snippet></ROW><ROW><id>18965451</id><snippet>class Code(db.Model):
    __searchable__ = ['scramble']

    id = db.Column(db.Integer, primary_key = True)
    scramble = db.Column(db.String(64))
    country_id = db.Column(db.Integer, db.ForeignKey('country.id'))

    def __repr__(self):
        return '&lt;%r&gt;' % (self.scramble)
</snippet></ROW><ROW><id>18965451</id><snippet>scramble</snippet></ROW><ROW><id>18965491</id><snippet>socket.io</snippet></ROW><ROW><id>18965564</id><snippet>def f(x):
    return 2*x+1

a = [ 1 ]
while len(a) &lt; 8:
   x = a[-1]
   y = f(x)
   a.append(y)

a
=&gt; [1, 3, 7, 15, 31, 63, 127, 255]
</snippet></ROW><ROW><id>18965777</id><snippet>application: app
version: production
runtime: python27
api_version: 1
threadsafe: yes

libraries:
- name: django
  version: latest


handlers:
- url: /_ah/queue/deferred
  script: djangoappengine.deferred.handler.application
  login: admin

- url: /_ah/stats/.*
  script: djangoappengine.appstats.application

- url: /.*
  script: djangoappengine.main.application
</snippet></ROW><ROW><id>18965777</id><snippet># Initialize App Engine and import the default settings (DB backend, etc.).
# If you want to use a different backend you have to remove all occurences
# of "djangoappengine" from this file.
from djangoappengine.settings_base import *
import os

DEBUG = False

TEMPLATE_DEBUG = DEBUG

# Activate django-dbindexer for the default database
DATABASES['native'] = DATABASES['default']
DATABASES['default'] = {'ENGINE': 'dbindexer', 'TARGET': 'native'}
AUTOLOAD_SITECONF = 'indexes'

INSTALLED_APPS = (

    'django.contrib.contenttypes',
    'django.contrib.auth',
    'django.contrib.sessions',
    'djangotoolbox',
    'autoload',
    'dbindexer',

    # djangoappengine should come last, so it can override a few manage.py commands
    'djangoappengine',
    )

MIDDLEWARE_CLASSES = (
    # This loads the index definitions, so it has to come first
    'autoload.middleware.AutoloadMiddleware',

    'django.middleware.common.CommonMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    )

TEMPLATE_CONTEXT_PROCESSORS = (
    'django.contrib.auth.context_processors.auth',
    'django.core.context_processors.request',
    'django.core.context_processors.media',
    'context_processors.general'
    )


ADMIN_MEDIA_PREFIX = '/media/'
TEMPLATE_DIRS = (
    os.path.join(os.path.dirname(__file__), 'templates'),
    os.path.join(os.path.dirname(__file__), 'media'),

    )
</snippet></ROW><ROW><id>18965777</id><snippet>import os,sys

os.environ['DJANGO_SETTINGS_MODULE'] = 'settings'

from google.appengine.dist import use_library
use_library('django', '1.2')

# Google App Engine imports.
from google.appengine.ext.webapp import util

# Force Django to reload its settings.
from django.conf import settings
settings._target = None

import django.core.handlers.wsgi
import django.core.signals
import django.db
import django.dispatch

# Log errors.
#import logging
#def log_exception(*args, **kwds):
#    logging.exception('Exception in request:')
#
#django.dispatch.Signal.connect(
#    django.core.signals.got_request_exception, log_exception)

# Unregister the rollback event handler.
django.dispatch.Signal.disconnect(
    django.core.signals.got_request_exception,
    django.db._rollback_on_exception)

def main():
    # Create a Django application for WSGI.
    application = django.core.handlers.wsgi.WSGIHandler()

    # Run the WSGI CGI handler with that application.
    util.run_wsgi_app(application)

if __name__ == '__main__':
    main()
</snippet></ROW><ROW><id>18965845</id><snippet>math.sqrt</snippet></ROW><ROW><id>18965845</id><snippet>**</snippet></ROW><ROW><id>18965845</id><snippet>pow</snippet></ROW><ROW><id>18965845</id><snippet>math</snippet></ROW><ROW><id>18965845</id><snippet>math.sqrt</snippet></ROW><ROW><id>18965845</id><snippet>**</snippet></ROW><ROW><id>18965845</id><snippet>numpy</snippet></ROW><ROW><id>18965845</id><snippet>math</snippet></ROW><ROW><id>18965845</id><snippet>**</snippet></ROW><ROW><id>18965845</id><snippet>pow</snippet></ROW><ROW><id>18965845</id><snippet>**</snippet></ROW><ROW><id>18965845</id><snippet>math.sqrt</snippet></ROW><ROW><id>18965845</id><snippet>**</snippet></ROW><ROW><id>18965845</id><snippet>**</snippet></ROW><ROW><id>18965848</id><snippet>def get_bin(n, step=0.05):
    return step * round(n / step)
</snippet></ROW><ROW><id>18965848</id><snippet>&gt;&gt;&gt; get_bin(0.0884)
0.1
&gt;&gt;&gt; get_bin(-0.027)                                                                                                   
-0.05
&gt;&gt;&gt; get_bin(-0.023)                                                                                                   
-0.0
</snippet></ROW><ROW><id>18965975</id><snippet>None</snippet></ROW><ROW><id>18965975</id><snippet>from __future__ import print_function
try:
    from itertools import izip
except ImportError:
    izip = zip

ra = [0, 1, 2, float('nan'), 8 , 3, 8, 5]
ma = [3, float('nan'), 5, 8, 9, 6, 4, 10]
op = [7, None, 7, 9, 3, 6, None, 7]

ra, ma, op = izip(*(col for col in izip(ra, ma, op) if None not in col))

print('ra =', ra)
print('ma =', ma)
print('op =', op)
</snippet></ROW><ROW><id>18965975</id><snippet>ra = (0, 2, nan, 8, 3, 5)
ma = (3, 5, 8, 9, 6, 10)
op = (7, 7, 9, 3, 6, 7)
</snippet></ROW><ROW><id>18965975</id><snippet>compress()</snippet></ROW><ROW><id>18965975</id><snippet>itertools</snippet></ROW><ROW><id>18965975</id><snippet>from itertools import compress
ra, ma, op =  izip(*compress(izip(ra, ma, op), (x is not None for x in op)))
</snippet></ROW><ROW><id>18966241</id><snippet>scipy</snippet></ROW><ROW><id>18966241</id><snippet>fmin</snippet></ROW><ROW><id>18966241</id><snippet>import numpy as np
from scipy.optimize import fmin
import math

def f(x):
    exp = (math.pow(x[0], 2) + math.pow(x[1], 2)) * -1
    return math.exp(exp) * math.cos(x[0] * x[1]) * math.sin(x[0] * x[1])

fmin(f,np.array([0,0]))
</snippet></ROW><ROW><id>18966241</id><snippet>Optimization terminated successfully.
     Current function value: -0.161198
     Iterations: 60
     Function evaluations: 113 
array([ 0.62665701, -0.62663095])
</snippet></ROW><ROW><id>18966241</id><snippet>scipy</snippet></ROW><ROW><id>18966241</id><snippet>fmin</snippet></ROW><ROW><id>18966241</id><snippet>(0,0)</snippet></ROW><ROW><id>18966311</id><snippet>class_variable</snippet></ROW><ROW><id>18966311</id><snippet>import</snippet></ROW><ROW><id>18966311</id><snippet>__init__</snippet></ROW><ROW><id>18966311</id><snippet>Method1</snippet></ROW><ROW><id>18966311</id><snippet>Method1</snippet></ROW><ROW><id>18966311</id><snippet>__init__</snippet></ROW><ROW><id>18966311</id><snippet>tail</snippet></ROW><ROW><id>18966311</id><snippet>Dog</snippet></ROW><ROW><id>18966311</id><snippet>class1</snippet></ROW><ROW><id>18966311</id><snippet>import</snippet></ROW><ROW><id>18966311</id><snippet>Method1</snippet></ROW><ROW><id>18966311</id><snippet>def Method1(self, argument list):
    # this method instantiates a  
     ...
    self.a = class1() 
</snippet></ROW><ROW><id>18966311</id><snippet>def Method2 (self):
     ...
    self.a.class1method1()
     ...
</snippet></ROW><ROW><id>18966311</id><snippet>a = whatever</snippet></ROW><ROW><id>18966311</id><snippet>self.a</snippet></ROW><ROW><id>18966311</id><snippet>myClass.a</snippet></ROW><ROW><id>18966311</id><snippet>my_instance = mymodule.MyClass()</snippet></ROW><ROW><id>18966311</id><snippet>import csv</snippet></ROW><ROW><id>18966311</id><snippet>DictWriter</snippet></ROW><ROW><id>18966311</id><snippet>my_writer = csv.DictWriter(my_file)</snippet></ROW><ROW><id>18966311</id><snippet>my_writer.writerow(my_row)</snippet></ROW><ROW><id>18966311</id><snippet>myClass:
</snippet></ROW><ROW><id>18966311</id><snippet>class</snippet></ROW><ROW><id>18966311</id><snippet>object</snippet></ROW><ROW><id>18966311</id><snippet>class myClass(object):
</snippet></ROW><ROW><id>18966444</id><snippet>tr</snippet></ROW><ROW><id>18966444</id><snippet>td</snippet></ROW><ROW><id>18966444</id><snippet>for tr in soup.find_all('tr')[2:]:
    tds = tr.find_all('td')
    print "Nome: %s, Cognome: %s, Email: %s" % \
          (tds[0].text, tds[1].text, tds[2].text)
</snippet></ROW><ROW><id>18966444</id><snippet>Nome:  Massimo, Cognome:  Allegri, Email:  Allegri.Massimo@alitalia.it
Nome:  Alessandra, Cognome:  Anastasia, Email:  Anastasia.Alessandra@alitalia.it
...
</snippet></ROW><ROW><id>18966444</id><snippet>[2:]</snippet></ROW><ROW><id>18966444</id><snippet>with open('output.txt', 'w') as f:
    for tr in soup.find_all('tr')[2:]:
        tds = tr.find_all('td')
        f.write("Nome: %s, Cognome: %s, Email: %s\n" % \
              (tds[0].text, tds[1].text, tds[2].text))
</snippet></ROW><ROW><id>18966472</id><snippet>result</snippet></ROW><ROW><id>18966472</id><snippet>file</snippet></ROW><ROW><id>18966472</id><snippet>exportLinks</snippet></ROW><ROW><id>18966472</id><snippet>text/html</snippet></ROW><ROW><id>18966492</id><snippet>&gt;&gt;&gt; a = np.arange(1, 17).reshape(4,4)
&gt;&gt;&gt; a
array([[ 1,  2,  3,  4],
       [ 5,  6,  7,  8],
       [ 9, 10, 11, 12],
       [13, 14, 15, 16]])
</snippet></ROW><ROW><id>18966607</id><snippet>re</snippet></ROW><ROW><id>18966607</id><snippet>r"(a+)b\1"</snippet></ROW><ROW><id>18966607</id><snippet>a</snippet></ROW><ROW><id>18966607</id><snippet>b</snippet></ROW><ROW><id>18966607</id><snippet>a</snippet></ROW><ROW><id>18966742</id><snippet>In [5]: concat(dict(A = A, B = B),axis=1)
Out[5]: 
   A        B      
   a  b  c  a  b  c
0  0  1  2  0  1  2
1  3  4  5  3  4  5
2  6  7  8  6  7  8

In [6]: concat([ A, B ], keys=['A','B'],axis=1)
Out[6]: 
   A        B      
   a  b  c  a  b  c
0  0  1  2  0  1  2
1  3  4  5  3  4  5
2  6  7  8  6  7  8
</snippet></ROW><ROW><id>18966807</id><snippet>&gt;&gt;&gt; from ast import literal_eval
&gt;&gt;&gt; temp = "['a','b','c']"
&gt;&gt;&gt; l = literal_eval(temp)
&gt;&gt;&gt; l
['a', 'b', 'c']
&gt;&gt;&gt; type(l)
&lt;type 'list'&gt;
</snippet></ROW><ROW><id>18966850</id><snippet>class uint(int):
    def __new__(cls, value):
        unknown = value == 'unknown'
        obj = super(uint, cls).__new__(cls, 1 if unknown else value)
        obj.unknown = unknown
        return obj

    def __str__(self):
        return 'unknown' if self.unknown else super(uint, self).__str__()
</snippet></ROW><ROW><id>18966850</id><snippet>self.value</snippet></ROW><ROW><id>18967031</id><snippet>itertools.permutations()</snippet></ROW><ROW><id>18967031</id><snippet>&gt;&gt;&gt; phrase = re.search(patt, text).group()
&gt;&gt;&gt; phrase
'bacon, eggs, and milk'
&gt;&gt;&gt; next(itertools.permutations(phrase))
('b', 'a', 'c', 'o', 'n', ',', ' ', 'e', 'g', 'g', 's', ',', ' ', 'a', 'n', 'd', ' ', 'm', 'i', 'l', 'k')
</snippet></ROW><ROW><id>18967031</id><snippet>noun_patt = r'\b(?:' + '|'.join(nouns) + r')\b'
CC_patt = r'\b(' + '|'.join(CC) + r')\b'
patt = r'((?:{0},? )+){1} ({0})'.format(noun_patt, CC_patt)
</snippet></ROW><ROW><id>18967031</id><snippet>(?:..)</snippet></ROW><ROW><id>18967031</id><snippet>searched = re.search(patt, text) 
nouns = filter(None, re.split(r',\s*', searched.group(1))) + [searched.group(3)]
</snippet></ROW><ROW><id>18967031</id><snippet>for comb in itertools.permutations(nouns):
    # do something with this specific permutation
</snippet></ROW><ROW><id>18967031</id><snippet>&gt;&gt;&gt; nouns
['bacon', 'eggs', 'milk']
&gt;&gt;&gt; list(itertools.permutations(nouns))
[('bacon', 'eggs', 'milk'), ('bacon', 'milk', 'eggs'), ('eggs', 'bacon', 'milk'), ('eggs', 'milk', 'bacon'), ('milk', 'bacon', 'eggs'), ('milk', 'eggs', 'bacon')]
</snippet></ROW><ROW><id>18967031</id><snippet>&gt;&gt;&gt; cc = searched.group(2)
&gt;&gt;&gt; for comb in itertools.permutations(nouns):
...     print ', '.join(comb[:-1]), cc, comb[-1]
... 
bacon, eggs and milk
bacon, milk and eggs
eggs, bacon and milk
eggs, milk and bacon
milk, bacon and eggs
milk, eggs and bacon
</snippet></ROW><ROW><id>18967208</id><snippet>tar xvf mypython.tar /myapp/python/
export PATH=/myapp/python/:$PATH
export PYTHONHOME=/myapp/python
</snippet></ROW><ROW><id>18967547</id><snippet>import sys
new_list = sorted(sys.argv[1:])
print '\n'.join(new_list)
</snippet></ROW><ROW><id>18967547</id><snippet>import sys
import tempfile
new_list = sorted(sys.argv[1:])
with tempfile.NamedTemporaryFile('w', delete=False) as f:
    f.write('\n'.join(new_list))
    print f.name
</snippet></ROW><ROW><id>18967547</id><snippet>import sys
new_list = sys.argv[1:-1]
step3 = sys.argv[-1]
</snippet></ROW><ROW><id>18967547</id><snippet>import sys
with open(sys.argv[1]) as f:
    new_list = list(f)
os.remove(sys.argv[1])
step3 = sys.argv[2]
</snippet></ROW><ROW><id>18967547</id><snippet>pickle.dump</snippet></ROW><ROW><id>18967547</id><snippet>'\n'.join</snippet></ROW><ROW><id>18967682</id><snippet>A = [0,0,1,1,0,0]
B = [0,1,0,1,0,1]

def match(A,B,n):
    r = len(A)
    if r != len(B):
        return False
    DP = [ [0]*(r+1) for i in range(r+1) ]
    # DP[a][b] is min insertions to A to turn A[:a] and B[:b] into the same string
    for b in range(r+1):
        for a in range(r+1):
            if a&gt;0 and b&gt;0:
                best = DP[a-1][b-1]
                if A[a-1]!=B[b-1]:
                    best += 2 # inserting into both
            elif a==0 and b==0:
                best = 0
            else:
                best = 2*n+1

            if a&gt;0:
                best = min(best,1+DP[a-1][b]) # inserting into A
            if b&gt;0:
                best = min(best,1+DP[a][b-1]) # inserting into B
            DP[a][b] = best
    x = DP[r][r] # we have needed to make x insertions to get A and B to match
    # A and B are now the same length, so we must have made x/2 insertions to each
    return x&lt;=2*n

print match(A,B,2)
</snippet></ROW><ROW><id>18967683</id><snippet>StringIO.StringIO</snippet></ROW><ROW><id>18967683</id><snippet>cStringIO.StringIO</snippet></ROW><ROW><id>18967683</id><snippet>io.BytesIO</snippet></ROW><ROW><id>18967683</id><snippet>StringIO</snippet></ROW><ROW><id>18967683</id><snippet>getvalue</snippet></ROW><ROW><id>18967683</id><snippet>from zipfile import ZipFile
try:
    import cStringIO as StringIO
except ImportError:
    import StringIO

in_memory = StringIO.StringIO(original_zip_data)
zf = ZipFile(in_memory, "a")  

zf.writestr("file.txt", "some text contents")

zf.close()

new_zip_data = in_memory.getvalue()
</snippet></ROW><ROW><id>18967683</id><snippet>ZipFile</snippet></ROW><ROW><id>18967683</id><snippet>ZipFile</snippet></ROW><ROW><id>18967683</id><snippet>StringIO</snippet></ROW><ROW><id>18967711</id><snippet>datetime.strptime()</snippet></ROW><ROW><id>18967711</id><snippet>intDates = [20130710.0, 20130802.0, 20130806.0]
[datetime.strptime(format(d, '.0f'), '%Y%m%d') for d in intDates]
</snippet></ROW><ROW><id>18967711</id><snippet>&gt;&gt;&gt; from datetime import datetime
&gt;&gt;&gt; intDates = [20130710.0, 20130802.0, 20130806.0]
&gt;&gt;&gt; [datetime.strptime(format(d, '.0f'), '%Y%m%d') for d in intDates]
[datetime.datetime(2013, 7, 10, 0, 0), datetime.datetime(2013, 8, 2, 0, 0), datetime.datetime(2013, 8, 6, 0, 0)]
</snippet></ROW><ROW><id>18967711</id><snippet>format()</snippet></ROW><ROW><id>18967744</id><snippet>APPLICATION_ROOT</snippet></ROW><ROW><id>18967744</id><snippet>app.config["APPLICATION_ROOT"] = "/abc/123"

@app.route("/")
def index():
    return "The URL for this page is {}".format(url_for("index"))

# Will return "The URL for this page is /abc/123/"
</snippet></ROW><ROW><id>18967830</id><snippet>print</snippet></ROW><ROW><id>18967830</id><snippet>str()</snippet></ROW><ROW><id>18967830</id><snippet>str()</snippet></ROW><ROW><id>18967830</id><snippet>print</snippet></ROW><ROW><id>18967830</id><snippet>str()</snippet></ROW><ROW><id>18967830</id><snippet>__str__()</snippet></ROW><ROW><id>18967830</id><snippet>repr()</snippet></ROW><ROW><id>18967830</id><snippet>repr()</snippet></ROW><ROW><id>18967830</id><snippet>str()</snippet></ROW><ROW><id>18967830</id><snippet>repr()</snippet></ROW><ROW><id>18967830</id><snippet>str()</snippet></ROW><ROW><id>18967830</id><snippet>print {'1': 1}</snippet></ROW><ROW><id>18967830</id><snippet>print {1: 1}</snippet></ROW><ROW><id>18967841</id><snippet>del i</snippet></ROW><ROW><id>18967841</id><snippet>i</snippet></ROW><ROW><id>18967841</id><snippet>f</snippet></ROW><ROW><id>18967841</id><snippet>None</snippet></ROW><ROW><id>18967841</id><snippet>False</snippet></ROW><ROW><id>18967841</id><snippet>filter</snippet></ROW><ROW><id>18967841</id><snippet>r = [i for i in r if i &gt;= 3]
</snippet></ROW><ROW><id>18967841</id><snippet>del</snippet></ROW><ROW><id>18967841</id><snippet>del r[:3]
</snippet></ROW><ROW><id>18967841</id><snippet>remove</snippet></ROW><ROW><id>18967841</id><snippet>remove(r)</snippet></ROW><ROW><id>18967841</id><snippet>r</snippet></ROW><ROW><id>18967841</id><snippet>remove</snippet></ROW><ROW><id>18967908</id><snippet>raw_input</snippet></ROW><ROW><id>18967908</id><snippet>input("Enter a number")</snippet></ROW><ROW><id>18967908</id><snippet>eval(raw_input("Enter a number"))</snippet></ROW><ROW><id>18967908</id><snippet>15:10:21 ~$ python so18967752.py
 This program will calculate the unit price (price per oz) of store items,
 you will input the weight in lbs and oz, the name and cost.
Please enter the name of the item. Apple
Traceback (most recent call last):
  File "so18967752.py", line 6, in &lt;module&gt;
    item_name = (input("Please enter the name of the item. "))
  File "&lt;string&gt;", line 1, in &lt;module&gt;
NameError: name 'Apple' is not defined
</snippet></ROW><ROW><id>18967908</id><snippet>banner = '''
This program will calculate the unit price (price per oz) of store items.
You will input the weight in lbs and oz, the name and cost.
'''

print banner

item_name = raw_input("Please enter the name of the item. ")

item_lb_price = float(raw_input("Please enter the price per pound of your item."))
item_lbs = float(raw_input("Please enter the pounds of your item."))
item_oz = float(raw_input("plese enter the ounces of your item."))

unit_price = item_lb_price / 16.0
total_price = item_lb_price * (item_lbs + (item_oz / 16.0))

print "The total price per oz is", unit_price
print "The total price for", item_name, "is a total of", total_price
</snippet></ROW><ROW><id>18967988</id><snippet>itertools.repeat</snippet></ROW><ROW><id>18967988</id><snippet>map</snippet></ROW><ROW><id>18967988</id><snippet>1</snippet></ROW><ROW><id>18967988</id><snippet>1</snippet></ROW><ROW><id>18967988</id><snippet>(itr.repeat(1,5) for _ in range(3))
</snippet></ROW><ROW><id>18967988</id><snippet>1</snippet></ROW><ROW><id>18967988</id><snippet>itr.repeat(tuple(itr.repeat(1,5)),3)
</snippet></ROW><ROW><id>18967988</id><snippet>itr.repeat</snippet></ROW><ROW><id>18967988</id><snippet>((1,)*5,)*3
</snippet></ROW><ROW><id>18967988</id><snippet># there is only one inner list
foo = [[]] * 3
foo[0].append(0)
foo
# [[0], [0], [0]]

# there are three separate inner lists
bar = [[] for _ in range(3)]
bar[0].append(0)
bar
# [[0], [], []]
</snippet></ROW><ROW><id>18968270</id><snippet>import matplotlib.pyplot as plt
ind = (1,2,3)
width = 0.8
fig,a = plt.subplots()
p1 = a.bar(ind,ind)
a.xaxis.set_visible(False)
a.yaxis.set_visible(False)
plt.show()
</snippet></ROW><ROW><id>18968287</id><snippet>import wx
a = wx.App(redirect=False)
my_str = wx.GetTextFromUser("Enter A Number!")
base = {'x':16,'b':2,'o':8}.get(my_str[1].lower(),10)
int_val = int(my_str,base)
hex_str = hex(int_val)   
bin_str = bin(int_val)

msg = """
User Entered:%s
Int:%s
Hex:%s
Bin:%s"""%(my_str,int_val,hex_str,bin_str)
wx.MessageBox(msg)
</snippet></ROW><ROW><id>18968396</id><snippet>io</snippet></ROW><ROW><id>18968396</id><snippet>import io

with io.open('log.txt', 'a', encoding='utf8') as logfile:
    for tr in soup.find_all('tr')[2:]:
        tds = tr.find_all('td')
        logfile.write(u"%s, %s, %s\n" % (tds[0].text, tds[1].text, tds[2].text))
</snippet></ROW><ROW><id>18968396</id><snippet>with</snippet></ROW><ROW><id>18968399</id><snippet>mls_search = driver.find_element_by_id('txtMlsNumber')
mls_search.send_keys('number that you scraped')

search = driver.find_element_by_id('lnkMlsSearch')
search.click()
</snippet></ROW><ROW><id>18968564</id><snippet>stats_print = []</snippet></ROW><ROW><id>18968564</id><snippet>stats</snippet></ROW><ROW><id>18968564</id><snippet>for ext, sz in filedict.items():
  stats = (
    ext_str+ext, cnt_str+str(len(sz)), max_str+str(max(sz)),
    min_str+str(min(sz)), avg_str+str(calc_avg(sz))
    )
  stats_lst.append(stats)
for item in stats_lst:
  stats_str = '\n'.join(map(str, item))
  stats_print.append('\n')
  stats_print.append(stats_str)

msg = easygui.codebox(msg="",title=smmry_title, text=stats_print)
</snippet></ROW><ROW><id>18968612</id><snippet>python setup.py develop</snippet></ROW><ROW><id>18968643</id><snippet>tmp</snippet></ROW><ROW><id>18968643</id><snippet>Random text

More random text

Even more random text

Ignore until after this:

Meaningful text, keep this

...and everything else...

...until the end of the file here
</snippet></ROW><ROW><id>18968643</id><snippet>with open('tmp') as f:
  first = re.match(r'.*Ignore until after this:(?P&lt;data1&gt;.*)', f.read(), re.DOTALL)
  print(first.group('data1'))
</snippet></ROW><ROW><id>18968643</id><snippet>Meaningful text, keep this

...and everything else...

...until the end of the file here
</snippet></ROW><ROW><id>18968810</id><snippet>&gt;&gt;&gt; Y = np.array([2, 0, 1, 1])
&gt;&gt;&gt; X = np.zeros((len(Y), 3))
&gt;&gt;&gt; X[np.arange(len(Y)), Y] = 1
&gt;&gt;&gt; X
array([[ 0.,  0.,  1.],
       [ 1.,  0.,  0.],
       [ 0.,  1.,  0.],
       [ 0.,  1.,  0.]])
</snippet></ROW><ROW><id>18968917</id><snippet>&gt;&gt;&gt; d = {}
&gt;&gt;&gt; d['asd'] = 209
&gt;&gt;&gt; d['asd'] = 441
&gt;&gt;&gt; d
{'asd': 441}
</snippet></ROW><ROW><id>18968917</id><snippet>def read():
    res = {}
    with open("text.txt","r") as text:
        for line in text:
            key, value = line.split()
            if int(value) &gt; res.get(key, -1):
                res[key] = int(value)
    return res
</snippet></ROW><ROW><id>18969010</id><snippet>SET a, 7</snippet></ROW><ROW><id>18969010</id><snippet>lvalue</snippet></ROW><ROW><id>18969010</id><snippet>SET</snippet></ROW><ROW><id>18969010</id><snippet>a</snippet></ROW><ROW><id>18969010</id><snippet>lvalue</snippet></ROW><ROW><id>18969010</id><snippet>'lvalue = ~"[A-Za-z]+" _'</snippet></ROW><ROW><id>18969010</id><snippet>GET</snippet></ROW><ROW><id>18969010</id><snippet>'setvar = "SETVAR" _ lvalue _ "," _ expr'
</snippet></ROW><ROW><id>18969043</id><snippet>writerow()</snippet></ROW><ROW><id>18969043</id><snippet>f.writerow(['foo', 'bar'])</snippet></ROW><ROW><id>18969043</id><snippet>foo</snippet></ROW><ROW><id>18969043</id><snippet>bar</snippet></ROW><ROW><id>18969043</id><snippet>f.writerow('4521')</snippet></ROW><ROW><id>18969043</id><snippet>4</snippet></ROW><ROW><id>18969043</id><snippet>5</snippet></ROW><ROW><id>18969043</id><snippet>f.writerow([str(csum)])
</snippet></ROW><ROW><id>18969136</id><snippet>grep</snippet></ROW><ROW><id>18969136</id><snippet>grep</snippet></ROW><ROW><id>18969136</id><snippet>grep</snippet></ROW><ROW><id>18969136</id><snippet>${grepstring}</snippet></ROW><ROW><id>18969136</id><snippet>str.format</snippet></ROW><ROW><id>18969136</id><snippet>grepstring</snippet></ROW><ROW><id>18969136</id><snippet>grepstring</snippet></ROW><ROW><id>18969136</id><snippet>$(rm -rf /)</snippet></ROW><ROW><id>18969136</id><snippet>subprocess</snippet></ROW><ROW><id>18969136</id><snippet>grepstring="mystring"
p0 = Popen(['ls', '-l'], stdout=PIPE)
p = Popen(['grep', grepstring], stdin=p0.stdout, stdout=PIPE, stderr=PIPE)
p0.stdout.close()
</snippet></ROW><ROW><id>18969136</id><snippet>p</snippet></ROW><ROW><id>18969136</id><snippet>grepstring</snippet></ROW><ROW><id>18969136</id><snippet>Popen</snippet></ROW><ROW><id>18969265</id><snippet>in</snippet></ROW><ROW><id>18969265</id><snippet>if entered in employees:
    # the key is in the dict
else:
    # the key could not be found
</snippet></ROW><ROW><id>18969315</id><snippet>a</snippet></ROW><ROW><id>18969315</id><snippet>w</snippet></ROW><ROW><id>18969315</id><snippet>a</snippet></ROW><ROW><id>18969315</id><snippet>a[w] = np.roll(a[w], 1, axis=1)
</snippet></ROW><ROW><id>18969315</id><snippet>roll</snippet></ROW><ROW><id>18969315</id><snippet>a[w] = a[w, ::-1]
</snippet></ROW><ROW><id>18969315</id><snippet>roll</snippet></ROW><ROW><id>18969315</id><snippet>N = 10
a = np.arange(N*2).reshape(-1,2)
w = np.random.choice(np.arange(N), size=N/2, replace=False)

timeit a[w] = np.roll(a[w],1,1)
10000 loops, best of 3: 23.2 µs per loop

timeit a[w] = a[w, ::-1]
100000 loops, best of 3: 8.07 µs per loop

N = 1000
a = np.arange(N*2).reshape(-1,2)
w = np.random.choice(np.arange(N), size=N/2, replace=False)

timeit a[w] = np.roll(a[w],1,1)
10000 loops, best of 3: 113 µs per loop

timeit a[w] = a[w, ::-1]
10000 loops, best of 3: 93.6 µs per loop

N = 100000
a = np.arange(N*2).reshape(-1,2)
w = np.random.choice(np.arange(N), size=N/2, replace=False)

timeit a[w] = np.roll(a[w],1,1)
100 loops, best of 3: 10.8 ms per loop

timeit a[w] = a[w, ::-1]
100 loops, best of 3: 9.63 ms per loop
</snippet></ROW><ROW><id>18969320</id><snippet>def find_size(n, i):
    """Return a tuple, (k, i), where s is the size of the i-1'th set in the
       cardinally-ordered powerset of {0..n-1}, and i is the remaining index
       within the combinations of that size."""
    if not 0 &lt;= i &lt; 2**n:
        raise ValueError('index is too large or small')
    for k in range(n+1):
        c = comb(n, k)
        if c &gt; i:
            return k, i
        else:
            i -= c
</snippet></ROW><ROW><id>18969320</id><snippet>def pick_set(n, i):
    """Return the i-1'th set in the cardinally-ordered powerset of {0..n-1}"""
    s, i = find_size(n, i)
    result = []
    for k in range(s, 0, -1):
        prev_c = 0
        for v in range(k, n+1):
            c = comb(v, k)
            if i &lt; c:
                result.append(v-1)
                i -= prev_c
                break
            prev_c = c
    return tuple(result)
</snippet></ROW><ROW><id>18969320</id><snippet>comb</snippet></ROW><ROW><id>18969320</id><snippet>scipy.misc.comb</snippet></ROW><ROW><id>18969320</id><snippet>gmpy.comb</snippet></ROW><ROW><id>18969320</id><snippet>comb(n, 0)</snippet></ROW><ROW><id>18969320</id><snippet>comb(n, 1)</snippet></ROW><ROW><id>18969320</id><snippet>comb(k, k)</snippet></ROW><ROW><id>18969320</id><snippet>comb(k+1, k)</snippet></ROW><ROW><id>18969320</id><snippet>comb</snippet></ROW><ROW><id>18969320</id><snippet>&gt;&gt;&gt; for i in range(2**4):
        print(i, pick_set(4, i))

0 ()
1 (0,)
2 (1,)
3 (2,)
4 (3,)
5 (1, 0)
6 (2, 0)
7 (2, 1)
8 (3, 0)
9 (3, 1)
10 (3, 2)
11 (2, 1, 0)
12 (3, 1, 0)
13 (3, 2, 0)
14 (3, 2, 1)
15 (3, 2, 1, 0)
</snippet></ROW><ROW><id>18969320</id><snippet>n</snippet></ROW><ROW><id>18969320</id><snippet>k</snippet></ROW><ROW><id>18969320</id><snippet>def comb_n_range(start_n, stop_n, k):
    c = comb(start_n, k)
    yield start_n, c
    for n in range(start_n+1, stop_n):
        c = c * n // (n - k)
        yield n, c

def comb_k_range(n, start_k, end_k):
    c = comb(n, start_k)
    yield start_k, c
    for k in range(start_k+1, end_k):
        c = c * (n - k + 1) // k
        yield k, c
</snippet></ROW><ROW><id>18969320</id><snippet>for ... in range(...): c = comb(...); ...</snippet></ROW><ROW><id>18969320</id><snippet>def next_combination(n, c):
    if c[-1] == n-len(c)+1:
        raise ValueError("no more combinations")
    for i in range(len(c)-1, -1, -1):
        if i == 0 or c[i] &lt; c[i-1] - 1:
            return c[:i] + (c[i] + 1,) + tuple(range(len(c)-2-i,-1,-1))
</snippet></ROW><ROW><id>18969320</id><snippet>next_combination</snippet></ROW><ROW><id>18969320</id><snippet>slice</snippet></ROW><ROW><id>18969320</id><snippet>def powerset_slice(n, s):
    start, stop, step = s.indices(2**n)
    if step &lt; 1:
        raise ValueError("invalid step size (must be positive)")

    if start == 0:
        c = ()
    else:
        c = pick_set(n, start)

    for _ in range(start, stop, step):
        yield c
        for _ in range(step):
            try:
                c = next_combination(n, c)
            except ValueError:
                if len(c) == n:
                    return
                c = tuple(range(len(c), -1, -1))
</snippet></ROW><ROW><id>18969320</id><snippet>__getitem__</snippet></ROW><ROW><id>18969320</id><snippet>slice</snippet></ROW><ROW><id>18969320</id><snippet>int</snippet></ROW><ROW><id>18969320</id><snippet>__iter__</snippet></ROW><ROW><id>18969320</id><snippet>return self[:]</snippet></ROW><ROW><id>18969322</id><snippet>import pyparsing as pp

integer = pp.Word(pp.nums).setParseAction(lambda m:int(m[0]))
expr = pp.Forward()
expr &lt;&lt; pp.nestedExpr(content=pp.OneOrMore(integer | expr))
manyExpr = pp.OneOrMore(expr)

print manyExpr.parseString('(2 (10 (5 11))) (5 6) (4)')
    #returns [[2, [10, [5, 11]]], [5, 6], [4]]
</snippet></ROW><ROW><id>18969724</id><snippet>dict</snippet></ROW><ROW><id>18969724</id><snippet>collections.Counter</snippet></ROW><ROW><id>18969724</id><snippet>positions, scores = Counter(), Counter()
for sequence, position, strand, score in reader:
    positions[sequence] += position
    scores[sequence] += scores

for sequence in positions:
    writer.writerow(sequence, positions[sequence], scores[sequence])
</snippet></ROW><ROW><id>18969724</id><snippet>dict</snippet></ROW><ROW><id>18969724</id><snippet>dbm</snippet></ROW><ROW><id>18969724</id><snippet>import csv
import shelve

with dbm.open('p.db', 'w') as positions, dbm.open('s.db', 'w') as scores:
    with open('input.tsv') as infile:
        for row in csv.DictReader(infile, delimiter='\t'):
            sequence = row['Sequence']
            position = row['Position']
            score = row['Score']
            old_position = positions.get(sequence, '0')
            positions[sequence] = str(int(old_position) + int(position))
            old_score = scores.get(sequence, '0')
            scores[sequence] = str(int(old_score) + int(score))
   with open('output.tsv', 'w') as outfile:
       writer = csv.writer(outfile, delimiter='\t')
       for sequence in positions:
           writer.writerow((sequence, positions[sequence], scores[sequence]))
</snippet></ROW><ROW><id>18969724</id><snippet>sqlite3</snippet></ROW><ROW><id>18969753</id><snippet>regex = re.compile(r"[^'](*\.dbf)'?[^,]*")
</snippet></ROW><ROW><id>18969753</id><snippet>regex = re.compile(r"([^']*\.dbf)'?[^,]*")
</snippet></ROW><ROW><id>18969893</id><snippet>  def __init__(self, *args, **kwargs):
     super(FitFunctionsList, self).__init__(['some','default','values'])
  def my_custom_filter(self, criteria):
     pass`
</snippet></ROW><ROW><id>18969893</id><snippet>list.__init__(self, ['some','default','values']) 
</snippet></ROW><ROW><id>18969900</id><snippet>left = float(2 * i)/(2 * i - 1)
right = float(2 * i)/(2 * i + 1)
</snippet></ROW><ROW><id>18969900</id><snippet>float</snippet></ROW><ROW><id>18969900</id><snippet>left = (2.0 * i)/(2 * i - 1) # just 2. works, too
right = (2.0 * i)/(2 * i + 1)
</snippet></ROW><ROW><id>18969900</id><snippet>//</snippet></ROW><ROW><id>18969900</id><snippet>from __future__ import division</snippet></ROW><ROW><id>18969900</id><snippet>float</snippet></ROW><ROW><id>18970054</id><snippet>import netaddr
import bisect

def subnets_overlap(subnets):
    # ranges will be a sorted list of alternating start and end addresses
    ranges = []
    for subnet in subnets:
        # find indices to insert start and end addresses
        first = bisect.bisect_left(ranges, subnet.first)
        last = bisect.bisect_right(ranges, subnet.last)
        # check the overlap conditions and return if one is met
        if first != last or first % 2 == 1:
            return True
        ranges[first:first] = [subnet.first, subnet.last]
    return False
</snippet></ROW><ROW><id>18970054</id><snippet>&gt;&gt;&gt; subnets_overlap([netaddr.IPNetwork('1.0.0.0/24'), netaddr.IPNetwork('1.0.0.252/30')])
True
&gt;&gt;&gt; subnets_overlap([netaddr.IPNetwork('1.0.0.0/24'), netaddr.IPNetwork('1.0.1.0/24')])
False
</snippet></ROW><ROW><id>18970179</id><snippet># Create Image
"""img = gimp.Image(cwidth * 10, cheight * 10, RGB)
img.disable_undo()

# Save the current foreground color:
pdb.gimp_context_push()

# Set the text color &amp; background color
gimp.set_foreground(color)
gimp.set_background(0, 0, 0)

# Create All Layers &amp; Position Accordingly
for i in range(char_begin, char_end):
    string = '%c' % i
    offset = i - char_begin

    x_pos = offset * cwidth
    y_pos = offset * cheight

    text_layer = pdb.gimp_text_fontname(img, None, x_pos, y_pos, string, -1, False, size, PIXELS, font)

    gimp.progress_update(float(offset) / float(num_chars))

pdb.gimp_image_flatten(img)

img.enable_undo()

# Create a new image window
gimp.Display(img)
# Show the new image window
gimp.displays_flush()

# Restore the old foreground color:
pdb.gimp_context_pop()"""
</snippet></ROW><ROW><id>18970233</id><snippet>new_values = map(print, [1, 2, 3])
</snippet></ROW><ROW><id>18970233</id><snippet>print</snippet></ROW><ROW><id>18970233</id><snippet>map</snippet></ROW><ROW><id>18970233</id><snippet>def</snippet></ROW><ROW><id>18970233</id><snippet>lambda</snippet></ROW><ROW><id>18970233</id><snippet>new_values = map(lambda x: print(x), [1, 2, 3])
</snippet></ROW><ROW><id>18970233</id><snippet>new_values = [print(x) for x in values]
</snippet></ROW><ROW><id>18970233</id><snippet>None</snippet></ROW><ROW><id>18970233</id><snippet>for x in values:
    print x
</snippet></ROW><ROW><id>18970268</id><snippet>import pickle

class my_list(list):
  def__init___(self, *args)
    list.__init__(self, *args)

  def dumps(self, path):
    with open(path, 'wb') as f:
      pick = pickle.Pickler(f)
      pick.dump(self)

  def load(self, path):
    with open(path, 'rb') as f:
      pick = pickle.Unpickler(f)
      for i in pick.load():
        self.append(i)
</snippet></ROW><ROW><id>18970305</id><snippet>In [1]: stamps = [ Timestamp('20130101 09:01:01'),Timestamp('20130102 09:10:00') ]

In [2]: stamps
Out[2]: 
[Timestamp('2013-01-01 09:01:01', tz=None),
 Timestamp('2013-01-02 09:10:00', tz=None)]

In [6]: ms_epoch = [ int(s.value/1e6) for s in stamps ]

In [7]: ms_epoch
Out[7]: [1357030861000, 1357117800000]
</snippet></ROW><ROW><id>18970305</id><snippet>unit='ms'</snippet></ROW><ROW><id>18970305</id><snippet>In [8]: pd.to_datetime(ms_epoch,unit='ms')
Out[8]: 
&lt;class 'pandas.tseries.index.DatetimeIndex'&gt;
[2013-01-01 09:01:01, 2013-01-02 09:10:00]
Length: 2, Freq: None, Timezone: None
</snippet></ROW><ROW><id>18970305</id><snippet>In [21]: ms_epoch = np.repeat(base,int(1e7)) + np.arange(int(1e7))

In [22]: len(ms_epoch)
Out[22]: 10000000

In [26]: %timeit pd.to_datetime(ms_epoch,unit='ms')
1 loops, best of 3: 1.04 s per loop

In [27]: pd.to_datetime(ms_epoch,unit='ms')[0:5]
Out[27]: 
&lt;class 'pandas.tseries.index.DatetimeIndex'&gt;
[2013-01-01 09:00:01, ..., 2013-01-01 09:00:01.004000]
Length: 5, Freq: None, Timezone: None

In [28]: pd.to_datetime(ms_epoch,unit='ms')[-5:]
Out[28]: 
&lt;class 'pandas.tseries.index.DatetimeIndex'&gt;
[2013-01-01 11:46:40.995000, ..., 2013-01-01 11:46:40.999000]
Length: 5, Freq: None, Timezone: None
</snippet></ROW><ROW><id>18970712</id><snippet>pairs = re.split("\+-*\+-*\+\n?",likes_and_dislikes)[2:-1] #Drop the header and the tail
</snippet></ROW><ROW><id>18970712</id><snippet>for p in pairs:
  like,dislike = [],[]
</snippet></ROW><ROW><id>18970712</id><snippet>|</snippet></ROW><ROW><id>18970712</id><snippet>  for l in p.split('\n'):
    pair = l.split('|')
</snippet></ROW><ROW><id>18970712</id><snippet>like</snippet></ROW><ROW><id>18970712</id><snippet>dislike</snippet></ROW><ROW><id>18970712</id><snippet>strip</snippet></ROW><ROW><id>18970712</id><snippet>    if len(pair) &gt; 1:
      # Not a blank line
      like.append(pair[1].strip())
      dislike.append(pair[2].strip())
</snippet></ROW><ROW><id>18970712</id><snippet>join the strings</snippet></ROW><ROW><id>18970712</id><snippet>likes</snippet></ROW><ROW><id>18970712</id><snippet>dislikes</snippet></ROW><ROW><id>18970712</id><snippet>  if len(like) &gt; 0:
    likes.append(" ".join(like))
  if len(dislike) &gt; 0:
    dislikes.append(" ".join(dislike))
</snippet></ROW><ROW><id>18970712</id><snippet>from pprint import pprint
print "Likes:"
pprint(likes,indent=4)
print "Dislikes:"
pprint(dislikes,indent=4)
</snippet></ROW><ROW><id>18970712</id><snippet>zip()</snippet></ROW><ROW><id>18970712</id><snippet>print "A set of paired likes and dislikes"
pprint(zip(likes,dislikes),indent=4)
</snippet></ROW><ROW><id>18970712</id><snippet>likes_and_dislikes="""

+------------------------------------+-----------------------------------+
| likes                              | dislikes                          |
+------------------------------------+-----------------------------------+
| Meritocracy                        | Favoritism, ass-kissing, politics |
+------------------------------------+-----------------------------------+
| Healthy debates and collaboration  | Ego-driven rhetoric, drama and FUD|
|                                    | to get one's way                  |
+------------------------------------+-----------------------------------+
| Autonomy given by confident leaders| Micro-management by insecure      |
| capable of attracting top-tier     | managers compensating for a weak, |
| talent                             | immature team                     |
+------------------------------------+-----------------------------------+ """

import re
likes,dislikes = [],[]
pairs = re.split("\+-*\+-*\+\n?",likes_and_dislikes)[2:-1] #Drop the header and the tail
for p in pairs:
  like,dislike = [],[]
  for l in p.split('\n'):
    pair = l.split('|')
    if len(pair) &gt; 1:
      # Not a blank line
      like.append(pair[1].strip())
      dislike.append(pair[2].strip())
  if len(like) &gt; 0:
    likes.append(" ".join(like))
  if len(dislike) &gt; 0:
    dislikes.append(" ".join(dislike))
from pprint import pprint
print "Likes:"
pprint(likes,indent=4)
print "Dislikes:"
pprint(dislikes,indent=4)
print "A set of paired likes and dislikes"
pprint(zip(likes,dislikes),indent=4)
</snippet></ROW><ROW><id>18970712</id><snippet>Likes:
[   'Meritocracy',
    'Healthy debates and collaboration ',
    'Autonomy given by confident leaders capable of attracting top-tier talent']
Dislikes:
[   'Favoritism, ass-kissing, politics',
    "Ego-driven rhetoric, drama and FUD to get one's way",
    'Micro-management by insecure managers compensating for a weak, immature team']
A set of paired likes and dislikes
[   ('Meritocracy', 'Favoritism, ass-kissing, politics'),
    (   'Healthy debates and collaboration ',
        "Ego-driven rhetoric, drama and FUD to get one's way"),
    (   'Autonomy given by confident leaders capable of attracting top-tier talent',
        'Micro-management by insecure managers compensating for a weak, immature team')]
</snippet></ROW><ROW><id>18970794</id><snippet>:</snippet></ROW><ROW><id>18970794</id><snippet>data = []
current = {}
with open('../Arts.txt') as f:
    for line in f:
        pair = line.split(': ', 1)
        if len(pair) == 2:
            if pair[0] == 'product/productId' and current:
                # start of a new block
                data.append(current)
                current = {}
            current[pair[0]] = pair[1]
    if current:
        data.append(current)
</snippet></ROW><ROW><id>18970794</id><snippet>product/productId,review/userId,review/profileName,...
B000GKXY4S,A1QA985ULVCQOB,Carleen M. Amadio "Lady Dragonfly",...
B000GKXY4S,ALCX2ELNHLQA7,Barbara,...
</snippet></ROW><ROW><id>18970930</id><snippet>split('\x00')</snippet></ROW><ROW><id>18970930</id><snippet>def readlines(f, bufsize):
    buf = ""
    data = True
    while data:
        data = f.read(bufsize)
        buf += data
        lines = buf.split('\x00')
        buf = lines.pop()
        for line in lines:
            yield line + '\x00'
    yield buf + '\x00'
</snippet></ROW><ROW><id>18970930</id><snippet>with open('myfile', 'rb') as f:
    mylist = [ item for item in readlines(f, 524288)
</snippet></ROW><ROW><id>18970949</id><snippet>Content-Transfer-Encoding</snippet></ROW><ROW><id>18970949</id><snippet>if message['Content-Transfer-Encoding'] == 'base64':
    # ...
</snippet></ROW><ROW><id>18970949</id><snippet>message.get_payload(decode=True)
</snippet></ROW><ROW><id>18971058</id><snippet>setattr(foo, mystring, False)   # this is just here to let me submit
</snippet></ROW><ROW><id>18971099</id><snippet>mask = (df['Actor']=='s')
df['Activity'] = df[mask]['Behavior']
df.ix[mask, 'Behavior'] = np.nan 
</snippet></ROW><ROW><id>18971099</id><snippet>  Activity  Actor             Behavior  Recipient1  follow
0      NaN   date  2013-04-01 00:00:00          NaN       1
1    ss.hx    NaN                ss.hx          NaN       1
2      NaN  50505                   vo        51608       1
3      NaN  51608                   vr        50505       1
4    ss.he    NaN                ss.hx          NaN       1
</snippet></ROW><ROW><id>18971186</id><snippet>choice</snippet></ROW><ROW><id>18971186</id><snippet>if choice == '+':
</snippet></ROW><ROW><id>18971186</id><snippet>while 1: #or while True:
    #do stuff

    elif choice == 'Q': #qoutes around Q
           break #use the `break` keyword to end the while loop
</snippet></ROW><ROW><id>18971186</id><snippet>loop</snippet></ROW><ROW><id>18971345</id><snippet>list(set([d['key'] for d in my_list]))
</snippet></ROW><ROW><id>18971345</id><snippet>list(set(d['key'] for d in my_list))
</snippet></ROW><ROW><id>18971345</id><snippet>list({d['key'] for d in my_list})
</snippet></ROW><ROW><id>18971345</id><snippet>None</snippet></ROW><ROW><id>18971345</id><snippet>dict.get</snippet></ROW><ROW><id>18971345</id><snippet>list.append</snippet></ROW><ROW><id>18971345</id><snippet>set</snippet></ROW><ROW><id>18971345</id><snippet>set.add</snippet></ROW><ROW><id>18971345</id><snippet>list</snippet></ROW><ROW><id>18971345</id><snippet>list.append</snippet></ROW><ROW><id>18971345</id><snippet>list.append</snippet></ROW><ROW><id>18971484</id><snippet>Q.enqueue(['Sigma'])
</snippet></ROW><ROW><id>18971484</id><snippet>sf = Q.dequeue()
</snippet></ROW><ROW><id>18971484</id><snippet>sf[i:i+1] = ...
</snippet></ROW><ROW><id>18971484</id><snippet>Q.enqueue(sf)
</snippet></ROW><ROW><id>18971484</id><snippet>copy = [x for x in original]
</snippet></ROW><ROW><id>18971484</id><snippet>copy = original[:]
</snippet></ROW><ROW><id>18971617</id><snippet>.groupby("ID").last()</snippet></ROW><ROW><id>18971617</id><snippet>transform</snippet></ROW><ROW><id>18971617</id><snippet>date</snippet></ROW><ROW><id>18971617</id><snippet>ID</snippet></ROW><ROW><id>18971617</id><snippet>ID</snippet></ROW><ROW><id>18971617</id><snippet>&gt;&gt;&gt; df = df.sort(["ID", "Date"])
&gt;&gt;&gt; df
  ID                Date
0  A 2010-01-01 00:00:00
1  A 2010-02-01 00:00:00
2  A 2010-02-15 00:00:00
3  B 2010-01-01 00:00:00
4  C 2010-02-01 00:00:00
5  C 2010-02-15 00:00:00
&gt;&gt;&gt; df["everagain"] = df["ID"] == df["ID"].shift(-1)
&gt;&gt;&gt; df
  ID                Date everagain
0  A 2010-01-01 00:00:00      True
1  A 2010-02-01 00:00:00      True
2  A 2010-02-15 00:00:00     False
3  B 2010-01-01 00:00:00     False
4  C 2010-02-01 00:00:00      True
5  C 2010-02-15 00:00:00     False
</snippet></ROW><ROW><id>18971617</id><snippet>True and False</snippet></ROW><ROW><id>18971617</id><snippet>(df["ID"] == df["ID"].shift(-1))*1)</snippet></ROW><ROW><id>18971617</id><snippet>(df["ID"] == df["ID"].shift(-1)).astype(int)</snippet></ROW><ROW><id>18971629</id><snippet>
def add_word(self, word, meaning):
    self._add_word(self.root, word, meaning)&lt;/p&gt;

&lt;p&gt;def _add_word(self, node, word, meaning):
    if (None == node):
        node = Node(word, meaning)
        return
    if (word &lt; node.word): self._add_word(node.left, word, meaning)
    elif (word &gt; node.word): self._add_word(node.right, word, meaning)
&lt;/pre&gt;</snippet></ROW><ROW><id>18971725</id><snippet>action=store_false</snippet></ROW><ROW><id>18971725</id><snippet>p.add_option("-d", action="store_false", dest="debugflag")
</snippet></ROW><ROW><id>18971941</id><snippet>%</snippet></ROW><ROW><id>18971941</id><snippet>$</snippet></ROW><ROW><id>18971941</id><snippet>&gt;</snippet></ROW><ROW><id>18971941</id><snippet>vi</snippet></ROW><ROW><id>18971941</id><snippet>python -mtimeit -s</snippet></ROW><ROW><id>18971941</id><snippet>-m</snippet></ROW><ROW><id>18971941</id><snippet>timeit</snippet></ROW><ROW><id>18971941</id><snippet>import &lt;modulename&gt;</snippet></ROW><ROW><id>18971941</id><snippet>-s</snippet></ROW><ROW><id>18971941</id><snippet>sys.path</snippet></ROW><ROW><id>18972039</id><snippet>accept</snippet></ROW><ROW><id>18972039</id><snippet># Accept the connection once (for starter)
(conn, addr) = s.accept()
print 'Connected with ' + addr[0] + ':' + str(addr[1])
stored_data = ''
while True:
    # RECEIVE DATA
    data = conn.recv(1024)

    # PROCESS DATA
    tokens = data.split(' ',1)            # Split by space at most once
    command = tokens[0]                   # The first token is the command
    if command=='GET':                    # The client requests the data
        reply = stored_data               # Return the stored data
    elif command=='STORE':                # The client want to store data
        stored_data = tokens[1]           # Get the data as second token, save it
        reply = 'OK'                      # Acknowledge that we have stored the data
    elif command=='TRANSLATE':            # Client wants to translate
        stored_data = stored_data.upper() # Convert to upper case
        reply = stored_data               # Reply with the converted data
    elif command=='QUIT':                 # Client is done
        conn.send('Quit')                 # Acknowledge
        break                             # Quit the loop
    else:
        reply = 'Unknown command'

    # SEND REPLY
    conn.send(reply)
conn.close() # When we are out of the loop, we're done, close
</snippet></ROW><ROW><id>18972039</id><snippet>import socket

HOST = ''   # Symbolic name meaning the local host
PORT = 24069    # Arbitrary non-privileged port
s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
s.connect((HOST,PORT))
while True:
    command = raw_input('Enter your command: ')
    if command.split(' ',1)[0]=='STORE':
        while True:
            additional_text = raw_input()
            command = command+'\n'+additional_text
            if additional_text=='.':
                break
    s.send(command)
    reply = s.recv(1024)
    if reply=='Quit':
        break
    print reply
</snippet></ROW><ROW><id>18972039</id><snippet>socket.SOCK_STREAM</snippet></ROW><ROW><id>18972039</id><snippet>s.accept()</snippet></ROW><ROW><id>18972083</id><snippet>with open(argv[1]) as filex:
    for line in filex:
        #do the things
</snippet></ROW><ROW><id>18972104</id><snippet>xs = []
n = 0

class A:
    def __del__(self):
        global n
        n += 1
        print("time {} calling __del__".format(n))
        xs.append(self)

print("creating an A immediately thrown away")
A()
for _ in range(5):
    print("popping from xs")
    xs.pop()
</snippet></ROW><ROW><id>18972104</id><snippet>creating an A immediately thrown away
time 1 calling __del__
popping from xs
time 2 calling __del__
popping from xs
time 3 calling __del__
popping from xs
time 4 calling __del__
popping from xs
time 5 calling __del__
popping from xs
time 6 calling __del__
</snippet></ROW><ROW><id>18972104</id><snippet>__del__</snippet></ROW><ROW><id>18972104</id><snippet>__del__</snippet></ROW><ROW><id>18972104</id><snippet>__del__</snippet></ROW><ROW><id>18972104</id><snippet>__del__</snippet></ROW><ROW><id>18972104</id><snippet>class A:
    def __del__(self):
        print("A is going away")

class C:
    def __init__(self):
        self.self = self
        self.a = A()
</snippet></ROW><ROW><id>18972104</id><snippet>&gt;&gt;&gt; c = C()
&gt;&gt;&gt; import gc
&gt;&gt;&gt; gc.collect()  # nothing happens
0
&gt;&gt;&gt; c = None  # now c is in a trash self-cycle
&gt;&gt;&gt; gc.collect()  # c.a.__del__ *is* called
A is going away
2
</snippet></ROW><ROW><id>18972104</id><snippet>__del__</snippet></ROW><ROW><id>18972104</id><snippet>class CriticalResource:
    def __init__(self, resource):
        self.r = resource

    def __del__(self):
        self.r.close_nicely()  # whatever

class FancyObject:
    def __init__(self):
        # ...
        self.r = CriticalResource(get_some_resource())
        # ...
</snippet></ROW><ROW><id>18972104</id><snippet>FancyObject</snippet></ROW><ROW><id>18972104</id><snippet>CriticalResource</snippet></ROW><ROW><id>18972104</id><snippet>__del__</snippet></ROW><ROW><id>18972104</id><snippet>__del__</snippet></ROW><ROW><id>18972104</id><snippet>__del__</snippet></ROW><ROW><id>18972104</id><snippet>__del__</snippet></ROW><ROW><id>18972262</id><snippet>get_locale</snippet></ROW><ROW><id>18972262</id><snippet>import os
if os.name == 'posix':    
    from subprocess import check_output
elif os.name == 'nt':
    import win32api, win32con, win32process
    from ctypes import windll
    user32 = windll.user32

def get_locale(self):
    if os.name == 'nt':
        w = user32.GetForegroundWindow() 
        tid = user32.GetWindowThreadProcessId(w, 0) 
        return hex(user32.GetKeyboardLayout(tid))
    elif os.name == 'posix':
        return check_output(["xkblayout-state", "print", "%s"])
</snippet></ROW><ROW><id>18972262</id><snippet>get_locale</snippet></ROW><ROW><id>18972262</id><snippet>xset</snippet></ROW><ROW><id>18972262</id><snippet>xset -q | grep -A 0 'LED' | cut -c59-67</snippet></ROW><ROW><id>18972276</id><snippet>def flatten(lst):
    if not lst:
        return []
    elif not isinstance(lst, list):
        return [lst] 
    else:
        return flatten(lst[0]) + flatten(lst[1:])
</snippet></ROW><ROW><id>18972276</id><snippet>ls1 = [[[[1, '1.0.1'], [1, '2.0.1']], [1, '3.0.11']], [1, '4.0.11']]
flatten(ls1)
=&gt; [1, '1.0.1', 1, '2.0.1', 1, '3.0.11', 1, '4.0.11']
</snippet></ROW><ROW><id>18972276</id><snippet>def flatten(lst):
    if not lst:
        return
    elif not isinstance(lst, list):
        yield lst
    else:
        for e in flatten(lst[0]):
            yield e
        for e in flatten(lst[1:]):
            yield e

list(flatten(ls1))
=&gt; [1, '1.0.1', 1, '2.0.1', 1, '3.0.11', 1, '4.0.11']
</snippet></ROW><ROW><id>18972366</id><snippet>tkFileDialog.askopenfilename()</snippet></ROW><ROW><id>18972366</id><snippet>tkFileDialog.asksaveasfilename()</snippet></ROW><ROW><id>18972366</id><snippet>from tkFileDialog import askopenfilename

def browser():
    name = askopenfilename()
    if name:
        path.set(name)

....
</snippet></ROW><ROW><id>18972456</id><snippet>t</snippet></ROW><ROW><id>18972456</id><snippet>import time

def display_seconds(x):
    sec = time.strftime('%S',x)
    sec = int(sec)
    print sec

while True:
    t = time.gmtime()
    display_seconds(t)
</snippet></ROW><ROW><id>18972488</id><snippet>t0 = time.time()</snippet></ROW><ROW><id>18972533</id><snippet>&gt;&gt;&gt; aword="iabcdefghijklm"
&gt;&gt;&gt; value=sum(map(ord,aword),(1-ord("a"))*len(aword))
&gt;&gt;&gt; print value==100, value
True 100
&gt;&gt;&gt; 
</snippet></ROW><ROW><id>18972678</id><snippet>&gt;&gt;&gt; Meta.shadowed.__get__(Foo, Meta)()
Meta.shadowed()
</snippet></ROW><ROW><id>18972678</id><snippet>class Meta(type):
    def shadowed(cls):
        print "Meta.shadowed() on %s" % (cls.__name__,)
    def unshadowed(cls):
        print "Meta.unshadowed() on %s" % (cls.__name__,)

class Foo(object):
    __metaclass__ = Meta

    def shadowed(self):
        print "Foo.shadowed()"

class Bar(object):
    __metaclass__ = Meta

Bar.unshadowed()                   #Meta.unshadowed() on Bar 
Bar.shadowed()                     #Meta.shadowed() on Bar
Foo.unshadowed()                   #Meta.unshadowed() on Foo
#Foo.shadowed()                    #TypeError    
Meta.shadowed.__get__(Foo, Meta)() #Meta.shadowed() on Foo
</snippet></ROW><ROW><id>18972839</id><snippet>'0', '1', '2', ...</snippet></ROW><ROW><id>18972839</id><snippet>TEMPLATES</snippet></ROW><ROW><id>18972839</id><snippet>TEMPLATES = {"0": "myapp/step-one.html",
             "1": "myapp/step-two.html",
             "2": "myapp/step-three.html"}
</snippet></ROW><ROW><id>18972839</id><snippet>get_template_names</snippet></ROW><ROW><id>18972839</id><snippet>class CreateWizard(SessionWizardView):
    def get_template_names(self):
        return [TEMPLATES[self.steps.current]]
</snippet></ROW><ROW><id>18972907</id><snippet>def removeTempFile(tempFileName):
  f = None
  while f == None:
   try:
       f=open(tempFileName,'w')
       f.close()
   except Exception as e:
       print "already open"
       f=None
       time.sleep(2)

os.remove(tempFileName)
</snippet></ROW><ROW><id>18972990</id><snippet>conn</snippet></ROW><ROW><id>18972990</id><snippet>cur</snippet></ROW><ROW><id>18972990</id><snippet>conn = None    

def driverFunc():
    global conn
    try:
        conn = psycopg2.connect(database=db, user=user, password=password, host=host)
        tables = ['table1', 'table2']
        countDict = {}
        for thisTable in tables:
            db_query(thisTable, countDict)
    finally:
        if not conn == None:
            conn.close()

def db_query(tableName, countDict):
    # Beware of SQL injection with the following line:
    query = "select count(*) from " + tableName + " where error_string != '';"
    cur = None

    try:
        cur = conn.cursor(cursor_factory=psycopg2.extras.DictCursor)
        cur.execute(query)
        countDict[tableName] = int(cur.fetchone())
    finally:
        if not cur == None:
            cur.close()
</snippet></ROW><ROW><id>18973160</id><snippet>p1.stdout.close()</snippet></ROW><ROW><id>18973160</id><snippet>p2</snippet></ROW><ROW><id>18973160</id><snippet>stdin=p1.stdout</snippet></ROW><ROW><id>18973160</id><snippet>p2</snippet></ROW><ROW><id>18973160</id><snippet>p2</snippet></ROW><ROW><id>18973160</id><snippet>p1</snippet></ROW><ROW><id>18973160</id><snippet>SIGPIPE</snippet></ROW><ROW><id>18973160</id><snippet>p1.stdout</snippet></ROW><ROW><id>18973160</id><snippet>p2</snippet></ROW><ROW><id>18973160</id><snippet>p1</snippet></ROW><ROW><id>18973246</id><snippet>for</snippet></ROW><ROW><id>18973246</id><snippet>&lt;h1&gt;
    &lt;label string="Request for Quotation " for="nombre" attrs="{'invisible': [('state','not in',('draft','sent'))]}"/&gt;
    &lt;label string="Purchase Order " for="nombre" attrs="{'invisible': [('state','in',('draft','sent'))]}"/&gt;
    &lt;field name="nombre" class="oe_inline" readonly="1" /&gt;
&lt;/h1&gt;
</snippet></ROW><ROW><id>18973246</id><snippet>oe_editonly</snippet></ROW><ROW><id>18973246</id><snippet>&lt;div class="oe_title"&gt;
    &lt;div class="oe_edit_only"&gt;
       &lt;h1&gt; Your code &lt;/h1&gt;
    &lt;/div&gt;
&lt;/div&gt;
</snippet></ROW><ROW><id>18973246</id><snippet>_combinalos</snippet></ROW><ROW><id>18973246</id><snippet>id</snippet></ROW><ROW><id>18973246</id><snippet>def _combinalos(self, cr, uid, ids, field_name, args, context=None):
     values = {}
     for id in ids:
         rec = self.browse(cr, uid, [id], context=context)[0]
         values[id] = {}
         values[id] = '0%s-%s%s-%s-%s' %(rec.company_id.id, rec.partner_id.id, rec.soli_cant, rec.dest, rec.date_order)
    return values
</snippet></ROW><ROW><id>18973351</id><snippet>import signal

def sigint_handler(signum, frame):
     print "my_variable =", frame.f_locals.get("my_variable", None)

signal.signal(signal.SIGINT, sigint_handler)
</snippet></ROW><ROW><id>18973398</id><snippet>server.modules   += ( "mod_fastcgi" )
server.modules   += ( "mod_rewrite" )

fastcgi.server = ( "/code.py" =&gt;
(( "socket" =&gt; "/tmp/fastcgi.socket",
  "bin-path" =&gt; "/path-to/webpy-app/code.py",
  "max-procs" =&gt; 1,
 "bin-environment" =&gt; (
   "REAL_SCRIPT_NAME" =&gt; ""
 ),
 "check-local" =&gt; "disable"
))
)

url.rewrite-once = (
 "^/favicon.ico$" =&gt; "/static/favicon.ico",
 "^/static/(.*)$" =&gt; "/static/$1",
 "^/(.*)$" =&gt; "/code.py/$1",
)
</snippet></ROW><ROW><id>18973398</id><snippet>class list:
  def GET(self,irl):
    thisfile = inspect.getfile(inspect.currentframe())
    thispath = os.path.dirname(os.path.abspath(thisfile))
    dir = os.listdir("%s/static/%s"%(thispath,irl))
    rel = irl
    files = []
    folds = []
    for item in dir:
      if os.path.isfile("%s/static/%s/%s"%(thispath,irl,item)):
        files.append(item)
      elif item!='res':
        folds.append(item)
    return render.list(rel,folds,files)         
</snippet></ROW><ROW><id>18973398</id><snippet>$def with (rel,folds,files)
...
$if len(folds)&gt;0:
  $for fold in folds:
    &lt;a class='fold' href='/list$rel/$fold'&gt;$fold&lt;/a&gt;
...
$if len(files)&gt;0:
  $for file in files:
    &lt;a class='file' href='/$rel/$file'&gt;$file&lt;/a&gt;
</snippet></ROW><ROW><id>18973430</id><snippet>.set_color</snippet></ROW><ROW><id>18973430</id><snippet>&gt;&gt;&gt; barlist=plt.bar([1,2,3,4], [1,2,3,4])
&gt;&gt;&gt; barlist[0].set_color('r')
&gt;&gt;&gt; plt.show()
</snippet></ROW><ROW><id>18973430</id><snippet>&gt;&gt;&gt; f=plt.figure()
&gt;&gt;&gt; ax=f.add_subplot(1,1,1)
&gt;&gt;&gt; ax.bar([1,2,3,4], [1,2,3,4])
&lt;Container object of 4 artists&gt;
&gt;&gt;&gt; ax.get_children()
[&lt;matplotlib.axis.XAxis object at 0x6529850&gt;, &lt;matplotlib.axis.YAxis object at 0x78460d0&gt;,  &lt;matplotlib.patches.Rectangle object at 0x733cc50&gt;, &lt;matplotlib.patches.Rectangle object at 0x733cdd0&gt;, &lt;matplotlib.patches.Rectangle object at 0x777f290&gt;, &lt;matplotlib.patches.Rectangle object at 0x777f710&gt;, &lt;matplotlib.text.Text object at 0x7836450&gt;, &lt;matplotlib.patches.Rectangle object at 0x7836390&gt;, &lt;matplotlib.spines.Spine object at 0x6529950&gt;, &lt;matplotlib.spines.Spine object at 0x69aef50&gt;, &lt;matplotlib.spines.Spine object at 0x69ae310&gt;, &lt;matplotlib.spines.Spine object at 0x69aea50&gt;]
&gt;&gt;&gt; ax.get_children()[2].set_color('r') #You can also try to locate the first patches.Rectangle object instead of direct calling the index.
</snippet></ROW><ROW><id>18973430</id><snippet>&gt;&gt;&gt; import matplotlib
&gt;&gt;&gt; childrenLS=ax.get_children()
&gt;&gt;&gt; barlist=filter(lambda x: isinstance(x, matplotlib.patches.Rectangle), childrenLS)
[&lt;matplotlib.patches.Rectangle object at 0x3103650&gt;, &lt;matplotlib.patches.Rectangle object at 0x3103810&gt;, &lt;matplotlib.patches.Rectangle object at 0x3129850&gt;, &lt;matplotlib.patches.Rectangle object at 0x3129cd0&gt;, &lt;matplotlib.patches.Rectangle object at 0x3112ad0&gt;]
</snippet></ROW><ROW><id>18973439</id><snippet>try:
    os.mkdir(test)
except OSError:
    print "test already exists"
</snippet></ROW><ROW><id>18973500</id><snippet>&gt;&gt;&gt; sum(A[index] for index in patternDict[5])
</snippet></ROW><ROW><id>18973619</id><snippet>return Max</snippet></ROW><ROW><id>18973619</id><snippet>if</snippet></ROW><ROW><id>18973619</id><snippet>z</snippet></ROW><ROW><id>18973619</id><snippet>a</snippet></ROW><ROW><id>18973619</id><snippet>y</snippet></ROW><ROW><id>18973619</id><snippet>def biggest(a,y,z):
    Max = a
    if y &gt; Max:
        Max = y
    if z &gt; Max:
        Max = z
    return Max
</snippet></ROW><ROW><id>18973619</id><snippet>max</snippet></ROW><ROW><id>18973651</id><snippet>print(repr(data_line))
</snippet></ROW><ROW><id>18973996</id><snippet>x</snippet></ROW><ROW><id>18973996</id><snippet>x</snippet></ROW><ROW><id>18973996</id><snippet>x = 0
while x &lt; 10:
    if condition:
        x += 1
</snippet></ROW><ROW><id>18974037</id><snippet>first_valid_index</snippet></ROW><ROW><id>18974037</id><snippet>In [1]: s = pd.Series([np.nan])

In [2]: s.first_valid_index() # None
</snippet></ROW><ROW><id>18974037</id><snippet>loc</snippet></ROW><ROW><id>18974037</id><snippet>None</snippet></ROW><ROW><id>18974037</id><snippet>In [3]: s.loc[s.first_valid_index()]
KeyError: None
</snippet></ROW><ROW><id>18974037</id><snippet>g['Focal'].transform(lambda s: s.bfill().iloc[0])
</snippet></ROW><ROW><id>18974349</id><snippet>set lib_path to do shell script "defaults read com.apple.iphoto LibraryPath"
</snippet></ROW><ROW><id>18974596</id><snippet>from PythonMagick import Image, CompressionType
im = Image('tiger-rgb-strip-contig-16.tif')
im.compressType(CompressionType.ZipCompression)
im.write("tiger-rgb-strip-contig-16-zip.tif")
</snippet></ROW><ROW><id>18974596</id><snippet>import skimage.io._plugins.freeimage_plugin as fi
im = fi.read('tiger-rgb-strip-contig-16.tif')
fi.write(im, 'tiger-rgb-strip-contig-16-zip.tif',
         fi.IO_FLAGS.TIFF_ADOBE_DEFLATE)
</snippet></ROW><ROW><id>18974596</id><snippet>from tifffile import imread, imsave
im = imread('tiger-rgb-strip-contig-16.tif')
imsave("tiger-rgb-strip-contig-16-zip.tif", im, compress=6)
</snippet></ROW><ROW><id>18974656</id><snippet>cursor.execute('SELECT %s FROM song WHERE title = ? AND artist = ?' % (query),
               (title, artist))
</snippet></ROW><ROW><id>18974697</id><snippet>popen</snippet></ROW><ROW><id>18974697</id><snippet>proc_open</snippet></ROW><ROW><id>18974697</id><snippet>$password = 'Pa55w0rd!';
$salt = '$6$x88yEvVg';
$handle = popen('python -c \'import crypt; print crypt.crypt("' . $password . '", "' . $salt . '")\'', 'r');
$text = fread($handle, 100);
echo $text;
pclose($handle);
</snippet></ROW><ROW><id>18974737</id><snippet>&gt;&gt;&gt; import sys
&gt;&gt;&gt; sys.float_info.dig
15
</snippet></ROW><ROW><id>18974737</id><snippet>decimal.Decimal()</snippet></ROW><ROW><id>18974737</id><snippet>&gt;&gt;&gt; import decimal
&gt;&gt;&gt; (2**32-1)**2 - decimal.Decimal('4.0') ** 2 - (2**32-1)**2
Decimal('-16.00')
</snippet></ROW><ROW><id>18975377</id><snippet>&gt;&gt;&gt; import math
&gt;&gt;&gt; b = [math.ceil(x*2)/2 for x in a]
&gt;&gt;&gt; b
[2.0, 3.5, 7.0, 8.0, 9.0, 9.0]
</snippet></ROW><ROW><id>18975589</id><snippet>class Player(object):
    ...
    def __init__(self, x, y):
        self.rect = self.sprite.get_rect(centery=y, centerx=x)
        # indicates that we are standing on the ground
        # and thus are "allowed" to jump
        self.on_ground = True 
        self.xvel = 0
        self.yvel = 0
        self.jump_speed = 10
        self.move_speed = 8
</snippet></ROW><ROW><id>18975589</id><snippet>xvel</snippet></ROW><ROW><id>18975589</id><snippet>yvel</snippet></ROW><ROW><id>18975589</id><snippet>Player</snippet></ROW><ROW><id>18975589</id><snippet>def collide(self, xvel, yvel, blocks):
    # all blocks that we collide with
    for block in [blocks[i] for i in self.rect.collidelistall(blocks)]:

        # if xvel is &gt; 0, we know our right side bumped 
        # into the left side of a block etc.
        if xvel &gt; 0: self.rect.right = block.rect.left
        if xvel &lt; 0: self.rect.left = block.rect.right

        # if yvel &gt; 0, we are falling, so if a collision happpens 
        # we know we hit the ground (remember, we seperated checking for
        # horizontal and vertical collision, so if yvel != 0, xvel is 0)
        if yvel &gt; 0:
            self.rect.bottom = block.rect.top
            self.on_ground = True
            self.yvel = 0
        # if yvel &lt; 0 and a collision occurs, we bumped our head
        # on a block above us
        if yvel &lt; 0: self.rect.top = block.rect.bottom
</snippet></ROW><ROW><id>18975589</id><snippet>Player</snippet></ROW><ROW><id>18975589</id><snippet>namedtuple</snippet></ROW><ROW><id>18975589</id><snippet>from collections import namedtuple
...
max_gravity = 100
Move = namedtuple('Move', ['up', 'left', 'right'])
while True:
    screen.fill((25,30,90))
    mse = pygame.mouse.get_pos()
    key = pygame.key.get_pressed()

    for event in pygame.event.get():
       ...

    move = Move(key[K_UP], key[K_LEFT], key[K_RIGHT])
    for p in player:
        p.update(move, blocklist)
        screen.blit(p.sprite, p.rect)
</snippet></ROW><ROW><id>18975589</id><snippet>blocklist</snippet></ROW><ROW><id>18975589</id><snippet>update</snippet></ROW><ROW><id>18975589</id><snippet>Player</snippet></ROW><ROW><id>18975589</id><snippet>move</snippet></ROW><ROW><id>18975589</id><snippet>Player.update</snippet></ROW><ROW><id>18975589</id><snippet>def update(self, move, blocks):

    # check if we can jump 
    if move.up and self.on_ground: 
        self.yvel -= self.jump_speed

    # simple left/right movement
    if move.left: self.xvel = -self.move_speed
    if move.right: self.xvel = self.move_speed

    # if in the air, fall down
    if not self.on_ground:
        self.yvel += 0.3
        # but not too fast
        if self.yvel &gt; max_gravity: self.yvel = max_gravity

    # if no left/right movement, x speed is 0, of course
    if not (move.left or move.right):
        self.xvel = 0

    # move horizontal, and check for horizontal collisions
    self.rect.left += self.xvel
    self.collide(self.xvel, 0, blocks)

    # move vertically, and check for vertical collisions
    self.rect.top += self.yvel
    self.on_ground = False;
    self.collide(0, self.yvel, blocks)
</snippet></ROW><ROW><id>18975589</id><snippet>Clock</snippet></ROW><ROW><id>18975589</id><snippet>import pygame,random
from pygame.locals import *
from collections import namedtuple

pygame.init()
clock=pygame.time.Clock()
screen=pygame.display.set_mode((640,480))

max_gravity = 100

class Block(object):
    sprite = pygame.image.load("dirt.png").convert_alpha()
    def __init__(self, x, y):
        self.rect = self.sprite.get_rect(centery=y, centerx=x)

class Player(object):
    sprite = pygame.image.load("dirt.png").convert()
    sprite.set_colorkey((0,255,0))
    def __init__(self, x, y):
        self.rect = self.sprite.get_rect(centery=y, centerx=x)
        # indicates that we are standing on the ground
        # and thus are "allowed" to jump
        self.on_ground = True
        self.xvel = 0
        self.yvel = 0
        self.jump_speed = 10
        self.move_speed = 8

    def update(self, move, blocks):

        # check if we can jump 
        if move.up and self.on_ground: 
            self.yvel -= self.jump_speed

        # simple left/right movement
        if move.left: self.xvel = -self.move_speed
        if move.right: self.xvel = self.move_speed

        # if in the air, fall down
        if not self.on_ground:
            self.yvel += 0.3
            # but not too fast
            if self.yvel &gt; max_gravity: self.yvel = max_gravity

        # if no left/right movement, x speed is 0, of course
        if not (move.left or move.right):
            self.xvel = 0

        # move horizontal, and check for horizontal collisions
        self.rect.left += self.xvel
        self.collide(self.xvel, 0, blocks)

        # move vertically, and check for vertical collisions
        self.rect.top += self.yvel
        self.on_ground = False;
        self.collide(0, self.yvel, blocks)

    def collide(self, xvel, yvel, blocks):
        # all blocks that we collide with
        for block in [blocks[i] for i in self.rect.collidelistall(blocks)]:

            # if xvel is &gt; 0, we know our right side bumped 
            # into the left side of a block etc.
            if xvel &gt; 0: self.rect.right = block.rect.left
            if xvel &lt; 0: self.rect.left = block.rect.right

            # if yvel &gt; 0, we are falling, so if a collision happpens 
            # we know we hit the ground (remember, we seperated checking for
            # horizontal and vertical collision, so if yvel != 0, xvel is 0)
            if yvel &gt; 0:
                self.rect.bottom = block.rect.top
                self.on_ground = True
                self.yvel = 0
            # if yvel &lt; 0 and a collision occurs, we bumped our head
            # on a block above us
            if yvel &lt; 0: self.rect.top = block.rect.bottom

blocklist = []
player = []
colliding = False
Move = namedtuple('Move', ['up', 'left', 'right'])
while True:
    screen.fill((25,30,90))
    mse = pygame.mouse.get_pos()
    key = pygame.key.get_pressed()

    for event in pygame.event.get():
        if event.type == QUIT: exit()

        if key[K_LSHIFT]:
            if event.type==MOUSEMOTION:
                if not any(block.rect.collidepoint(mse) for block in blocklist):
                    x=(int(mse[0]) / 32)*32
                    y=(int(mse[1]) / 32)*32
                    blocklist.append(Block(x+16,y+16))
        else:
            if event.type == pygame.MOUSEBUTTONUP:
                if event.button == 1:
                    to_remove = [b for b in blocklist if b.rect.collidepoint(mse)]
                    for b in to_remove:
                        blocklist.remove(b)

                    if not to_remove:
                        x=(int(mse[0]) / 32)*32
                        y=(int(mse[1]) / 32)*32
                        blocklist.append(Block(x+16,y+16))

                elif event.button == 3:
                    x=(int(mse[0]) / 32)*32
                    y=(int(mse[1]) / 32)*32
                    player=[]
                    player.append(Player(x+16,y+16))

    move = Move(key[K_UP], key[K_LEFT], key[K_RIGHT])

    for b in blocklist:
        screen.blit(b.sprite, b.rect)
    for p in player:
        p.update(move, blocklist)
        screen.blit(p.sprite, p.rect)
    clock.tick(60)
    pygame.display.flip()
</snippet></ROW><ROW><id>18975633</id><snippet>for n in stack1:
</snippet></ROW><ROW><id>18975633</id><snippet>for n in range(len(stack1)):
    array[3*n] = stack1[n]
</snippet></ROW><ROW><id>18975633</id><snippet>enumerate</snippet></ROW><ROW><id>18975633</id><snippet>for n, stack1_n in enumerate(stack1):
    array[3*n] = stack1_n
</snippet></ROW><ROW><id>18975633</id><snippet>array[::3] = stack1
</snippet></ROW><ROW><id>18975633</id><snippet>array[::3]</snippet></ROW><ROW><id>18975633</id><snippet>array</snippet></ROW><ROW><id>18975633</id><snippet>start:stop:step</snippet></ROW><ROW><id>18975633</id><snippet>stack1</snippet></ROW><ROW><id>18975843</id><snippet>isinstance()</snippet></ROW><ROW><id>18975843</id><snippet>&gt;&gt;&gt; isinstance('a',basestring)
True
&gt;&gt;&gt; isinstance(['a'],list)
True
</snippet></ROW><ROW><id>18976611</id><snippet>import route53
conn = ....  # init connection here
route53.create(conn, "test.com")
</snippet></ROW><ROW><id>18977224</id><snippet>mainlib.db</snippet></ROW><ROW><id>18977224</id><snippet>mytestcode.db</snippet></ROW><ROW><id>18977224</id><snippet>mainlib.db</snippet></ROW><ROW><id>18977224</id><snippet>mainlib.db = MySQLdb.connect(...)</snippet></ROW><ROW><id>18977224</id><snippet>mainlib</snippet></ROW><ROW><id>18977224</id><snippet>mainlib</snippet></ROW><ROW><id>18977224</id><snippet>db = None
dbname = None
cursor = None

def connectdb(name = None):
    """
    Set up the global database connection and cursor, if it isn't already.

    Omit 'name' when the caller doesn't care what database is used,
    and is happy to accept whatever database is already connected or
    connect to a default database.

    Since there cannot be multiple global databases, an exception is thrown
    if 'name' is specified, the global connection already exists, and the
    names don't match.
    """
    global db, dbname, cursor
    if db is None:
        if name is None:
            name = 'MyDatabase'
        db = MySQLdb.connect(host='localhost', user='admin', password='admin', db=name)
        dbname = name
        cursor = db.cursor()
    elif name not in (None, dbname):
        raise Exception('cannot connect to the specified db: the global connection already exists and connects to a different db')
</snippet></ROW><ROW><id>18977224</id><snippet>mainlib.connectdb()</snippet></ROW><ROW><id>18977224</id><snippet>mainlib</snippet></ROW><ROW><id>18977224</id><snippet>mainlib.connectdb('TestDatabase')</snippet></ROW><ROW><id>18977224</id><snippet>connectdb</snippet></ROW><ROW><id>18977269</id><snippet>"""
os.path.getsize(path)
Return the size, in bytes, of path. Raise os.error if the file does not exist or is inaccessible.
"""
</snippet></ROW><ROW><id>18977876</id><snippet>mymodule.py</snippet></ROW><ROW><id>18977876</id><snippet>class A(object):
    pass


class B(A):
    pass


class C(A):
    pass
</snippet></ROW><ROW><id>18977876</id><snippet>A</snippet></ROW><ROW><id>18977876</id><snippet>import inspect
import mymodule
from mymodule import A

def is_subclass(o):
    return inspect.isclass(o) and issubclass(o, A)


print inspect.getmembers(mymodule, predicate=is_subclass)
</snippet></ROW><ROW><id>18977876</id><snippet>lambda</snippet></ROW><ROW><id>18977876</id><snippet>print inspect.getmembers(mymodule,  
                         predicate=lambda o: inspect.isclass(o) and \
                                             issubclass(o, A))
</snippet></ROW><ROW><id>18977984</id><snippet>(x, y)</snippet></ROW><ROW><id>18977984</id><snippet>x</snippet></ROW><ROW><id>18977984</id><snippet>y</snippet></ROW><ROW><id>18977984</id><snippet>from matplotlib import pyplot
import numpy as np
import matplotlib.mlab as mlab
import matplotlib.pyplot as plt
import string

with open('barplt.txt') as infile:
    x = [float(value) for value in infile.readline().strip().split()]
    y = [float(value) for value in infile.readline().strip().split()]

plt.bar(y, x, width=0.1)
plt.xlabel('slack')
plt.ylabel('traces')
plt.title(r'Histogram of Slack')

# Tweak spacing to prevent clipping of ylabel
plt.savefig('igor.png')
</snippet></ROW><ROW><id>18978126</id><snippet>idletime</snippet></ROW><ROW><id>18978126</id><snippet>None</snippet></ROW><ROW><id>18978126</id><snippet>if idletime is not None:
    if idletime &gt; 60 and len(user) &gt; 6:
        print(user,'\thas been logged on to Dynamics for\t',idletime,'\tminutes.')
    elif idletime &gt; 60 and len(user) &lt;= 6:
        print(user,'\t\thas been logged on to Dynamics for\t',idletime,'\tminutes.')
</snippet></ROW><ROW><id>18978177</id><snippet>numpy.loadtxt</snippet></ROW><ROW><id>18978177</id><snippet>&gt;&gt;&gt; import numpy as np
&gt;&gt;&gt; data1 = np.loadtxt("1.txt", dtype=np.object, delimiter=",")
&gt;&gt;&gt; data2 = np.loadtxt("2.txt", dtype=np.object, delimiter=",")
&gt;&gt;&gt; print data1
 [['A' 'B' 'D']
  ['E' 'G' 'A']]
</snippet></ROW><ROW><id>18978177</id><snippet>numpy.vstack</snippet></ROW><ROW><id>18978177</id><snippet>&gt;&gt;&gt; np.vstack( (data1, data2) )
 [['A' 'B' 'D']
  ['E' 'G' 'A']
  ['A' 'B' 'D']
  ['E' 'G' 'A']]
</snippet></ROW><ROW><id>18978177</id><snippet>&gt;&gt;&gt; first_col = np.vstack( (np.array([[1] * data1.shape[0]]).T, np.array([[2] * data2.shape[0]]).T) )
&gt;&gt;&gt; stack = np.vstack( (data1, data2) )
&gt;&gt;&gt; data = np.hstack( (first_col, stack) )
&gt;&gt;&gt; print data
 [[1 'A' 'B' 'D']
  [1 'E' 'G' 'A']
  [2 'A' 'B' 'D']
  [2 'E' 'G' 'A']]
</snippet></ROW><ROW><id>18978177</id><snippet>&gt;&gt;&gt; np.savetxt('data.txt', data, fmt='%s', delimiter=",")
</snippet></ROW><ROW><id>18978177</id><snippet>1,A,B,D
1,E,G,A
2,A,B,D
2,E,G,A
</snippet></ROW><ROW><id>18978177</id><snippet>import numpy as np

def get_from_csv(fname):
    data = np.loadtxt(fname, dtype=np.object, delimiter=",")
    col = np.array([[ int(fname.rstrip(".txt")) ] * data.shape[0]]).T
    return np.hstack( (col, data) )

files = ["1.txt", "2.txt", "3.txt"]

for f in files:
    try:
        data = np.vstack( (data, get_from_csv(f)) )
    except:
        data = get_from_csv(f)
print data
</snippet></ROW><ROW><id>18978177</id><snippet>[[1 'A' 'B' 'D']
 [1 'E' 'G' 'A']
 [2 'A' 'B' 'D']
 [2 'E' 'G' 'A']
 [3 'A' 'B' 'D']
 [3 'E' 'G' 'A']]
</snippet></ROW><ROW><id>18978385</id><snippet>{% for obj in queryset %}
    {% if forloop.last %}
        {{ obj.price }}
    {% endif %}
{% endfor %}
</snippet></ROW><ROW><id>18978618</id><snippet>Popen.communicate()</snippet></ROW><ROW><id>18978618</id><snippet>matchstr = process.communicate()
</snippet></ROW><ROW><id>18978618</id><snippet>matchstr, stderr = process.communicate()
</snippet></ROW><ROW><id>18979005</id><snippet>out</snippet></ROW><ROW><id>18979005</id><snippet>Final energy=</snippet></ROW><ROW><id>18979005</id><snippet>Final</snippet></ROW><ROW><id>18979005</id><snippet>Final</snippet></ROW><ROW><id>18979005</id><snippet>Number</snippet></ROW><ROW><id>18979005</id><snippet>undefined</snippet></ROW><ROW><id>18979005</id><snippet>Final = Number = ... = 'undefined'
file = os.path.join(root, filename)
with open(file, 'r') as reader:
    opt_cnt=0
    for line in reader:
        ...
</snippet></ROW><ROW><id>18979009</id><snippet>("{0:%ib}" % num_bits).format(I)
</snippet></ROW><ROW><id>18979009</id><snippet>"{:{}b}".format(I, num_bits)
</snippet></ROW><ROW><id>18979009</id><snippet>"{{:{}b}}".format(num_bits).format(I)
</snippet></ROW><ROW><id>18979009</id><snippet>{{</snippet></ROW><ROW><id>18979009</id><snippet>}}</snippet></ROW><ROW><id>18979009</id><snippet>.format</snippet></ROW><ROW><id>18979240</id><snippet>itertools.islice</snippet></ROW><ROW><id>18979240</id><snippet>import itertools
n = 1
with open('foobar.txt') as f:
    print next(itertools.islice(f, n, n+1))
</snippet></ROW><ROW><id>18979245</id><snippet>slice</snippet></ROW><ROW><id>18979245</id><snippet>substring</snippet></ROW><ROW><id>18979432</id><snippet>pprint</snippet></ROW><ROW><id>18979432</id><snippet>print</snippet></ROW><ROW><id>18979432</id><snippet>from pprint import pprint
pprint(items)
#&gt;&gt;&gt; [{'brand': 'ibm', 'id': 1},
#&gt;&gt;&gt;  {'brand': 'ibm', 'id': 2},
#&gt;&gt;&gt;  {'brand': 'ibm', 'id': 3},
#&gt;&gt;&gt;  {'brand': 'ibm', 'id': 4},
#&gt;&gt;&gt;  {'brand': 'ibm', 'id': 5},
#&gt;&gt;&gt;  {'brand': 'ibm', 'id': 6},
#&gt;&gt;&gt;  {'brand': 'acer', 'id': 7},
#&gt;&gt;&gt;  {'brand': 'acer', 'id': 8},
#&gt;&gt;&gt;  {'brand': 'acer', 'id': 9},
#&gt;&gt;&gt;  {'brand': 'acer', 'id': 10},
#&gt;&gt;&gt;  {'brand': 'apple', 'id': 11},
#&gt;&gt;&gt;  {'brand': 'apple', 'id': 12}]
</snippet></ROW><ROW><id>18979432</id><snippet>from collections import defaultdict

brand2items = defaultdict(list)

for item in items:
    brand2items[item["brand"]].append(item)

pprint(brand2items)
#&gt;&gt;&gt; {'acer': [{'brand': 'acer', 'id': 7},
#&gt;&gt;&gt;           {'brand': 'acer', 'id': 8},
#&gt;&gt;&gt;           {'brand': 'acer', 'id': 9},
#&gt;&gt;&gt;           {'brand': 'acer', 'id': 10}],
#&gt;&gt;&gt;  'apple': [{'brand': 'apple', 'id': 11}, {'brand': 'apple', 'id': 12}],
#&gt;&gt;&gt;  'ibm': [{'brand': 'ibm', 'id': 1},
#&gt;&gt;&gt;          {'brand': 'ibm', 'id': 2},
#&gt;&gt;&gt;          {'brand': 'ibm', 'id': 3},
#&gt;&gt;&gt;          {'brand': 'ibm', 'id': 4},
#&gt;&gt;&gt;          {'brand': 'ibm', 'id': 5},
#&gt;&gt;&gt;          {'brand': 'ibm', 'id': 6}]}
</snippet></ROW><ROW><id>18979432</id><snippet>items_by_brand = list(brand2items.values())

pprint(items_by_brand)
#&gt;&gt;&gt; [[{'brand': 'apple', 'id': 11}, {'brand': 'apple', 'id': 12}],
#&gt;&gt;&gt;  [{'brand': 'ibm', 'id': 1},
#&gt;&gt;&gt;   {'brand': 'ibm', 'id': 2},
#&gt;&gt;&gt;   {'brand': 'ibm', 'id': 3},
#&gt;&gt;&gt;   {'brand': 'ibm', 'id': 4},
#&gt;&gt;&gt;   {'brand': 'ibm', 'id': 5},
#&gt;&gt;&gt;   {'brand': 'ibm', 'id': 6}],
#&gt;&gt;&gt;  [{'brand': 'acer', 'id': 7},
#&gt;&gt;&gt;   {'brand': 'acer', 'id': 8},
#&gt;&gt;&gt;   {'brand': 'acer', 'id': 9},
#&gt;&gt;&gt;   {'brand': 'acer', 'id': 10}]]
</snippet></ROW><ROW><id>18979432</id><snippet>pop</snippet></ROW><ROW><id>18979432</id><snippet>from heapq import nlargest

shufflatored = []
while any(items_by_brand):
    items1, items2 = nlargest(2, items_by_brand, key=len)

    if items1: shufflatored.append(items1.pop())
    if items2: shufflatored.append(items2.pop())
</snippet></ROW><ROW><id>18979432</id><snippet>heapq</snippet></ROW><ROW><id>18979432</id><snippet>items_by_brand</snippet></ROW><ROW><id>18979432</id><snippet>key</snippet></ROW><ROW><id>18979432</id><snippet>    if items1: shufflatored.append(items1.pop())
    if items2: shufflatored.append(items2.pop())
</snippet></ROW><ROW><id>18979432</id><snippet>    if items1: shufflatored.append(items1.pop())
    if items1: shufflatored.append(items1.pop())
    if items2: shufflatored.append(items2.pop())
    if items2: shufflatored.append(items2.pop())
</snippet></ROW><ROW><id>18979432</id><snippet>lst = list(range(20))

lst[::2], lst[1::2] = lst[1::2], lst[::2]

lst
#&gt;&gt;&gt; [1, 0, 3, 2, 5, 4, 7, 6, 9, 8, 11, 10, 13, 12, 15, 14, 17, 16, 19, 18]
</snippet></ROW><ROW><id>18979432</id><snippet>a = 1
b = 2

a, b = b, a

a
#&gt;&gt;&gt; 2

b
#&gt;&gt;&gt; 1
</snippet></ROW><ROW><id>18979432</id><snippet>lst[::2]</snippet></ROW><ROW><id>18979432</id><snippet>lst[::2]
#&gt;&gt;&gt; [0, 2, 4, 6, 8, 10, 12, 14, 16, 18]
</snippet></ROW><ROW><id>18979432</id><snippet>lst[1::2]</snippet></ROW><ROW><id>18979432</id><snippet>lst[1::2]
#&gt;&gt;&gt; [1, 3, 5, 7, 9, 11, 13, 15, 17, 19]
</snippet></ROW><ROW><id>18979432</id><snippet>lst[::2], lst[1::2] = lst[1::2], lst[::2]</snippet></ROW><ROW><id>18979432</id><snippet>import random

items = [1,1,1,2,2,2,2,3,3,3,3,3,4,4,4,4,4,4]

[
    iv[1] for iv in
    sorted(
        enumerate(items),
        key=lambda iv: iv[0]+random.choice([-1, 1])
    )
]

#&gt;&gt;&gt; [1, 1, 2, 1, 2, 2, 3, 2, 3, 3, 3, 3, 4, 4, 4, 4, 4, 4]

[
    iv[1] for iv in
    sorted(
        enumerate(range(20)),
        key=lambda iv: iv[0]+random.choice([-1, 1])
    )
]
#&gt;&gt;&gt; [0, 2, 1, 4, 3, 5, 6, 7, 9, 8, 11, 10, 12, 14, 13, 15, 17, 16, 18, 19]
</snippet></ROW><ROW><id>18979432</id><snippet>  items a b c d e f g h i j
indexes 0 1 2 3 4 5 6 7 8 9
</snippet></ROW><ROW><id>18979432</id><snippet>[-1, 1]</snippet></ROW><ROW><id>18979432</id><snippet>  items a b c d e f g h i j
indexes 0 1 2 3 4 5 6 7 8 9
sort by 1 0 3 2 5 4 5 6 9 8
</snippet></ROW><ROW><id>18979432</id><snippet>  items b a d c f e g h j i
indexes 1 0 3 2 5 4 6 7 9 8
sort by 0 1 2 3 4 5 5 6 8 9
</snippet></ROW><ROW><id>18979432</id><snippet>[-1, 1]</snippet></ROW><ROW><id>18979432</id><snippet>[-1, 0, 1]</snippet></ROW><ROW><id>18979432</id><snippet>[0, 1]</snippet></ROW><ROW><id>18979432</id><snippet>indexed = enumerate(items)

shuffled = sorted(indexed, key=lambda iv: iv[0]+random.choice([-1, 1]))

# Remove the index, extract the values out again
result = [iv[1] for iv in shuffled]
</snippet></ROW><ROW><id>18979432</id><snippet>O(n log n)</snippet></ROW><ROW><id>18979432</id><snippet>O(n log n)</snippet></ROW><ROW><id>18979432</id><snippet>O(n)</snippet></ROW><ROW><id>18979432</id><snippet>O(kn)</snippet></ROW><ROW><id>18979432</id><snippet>k</snippet></ROW><ROW><id>18979432</id><snippet>log n</snippet></ROW><ROW><id>18979750</id><snippet>#http://stackoverflow.com/questions/4495120/combine-user-with-prefix-error-with-setup-py-install

#[install]
#prefix=
</snippet></ROW><ROW><id>18979801</id><snippet>&gt;&gt;&gt; data = ({'fruit': 'orange', 'vegetable':'lettuce'}, {'football':'arsenal', 'basketball':'lakers'}, {'england':'london', 'france':'paris'} )
&gt;&gt;&gt; myKey = "football"
&gt;&gt;&gt; myValue = "arsenal"
&gt;&gt;&gt; [d for d in data if (myKey, myValue) in d.items()][0]
 {'basketball': 'lakers', 'football': 'arsenal'}
</snippet></ROW><ROW><id>18979801</id><snippet>myKey</snippet></ROW><ROW><id>18979801</id><snippet>myValue</snippet></ROW><ROW><id>18979852</id><snippet>highlightthickness</snippet></ROW><ROW><id>18979852</id><snippet>canvas1 = Canvas(rightPanel, bg='black', highlightthickness=0)
</snippet></ROW><ROW><id>18979873</id><snippet>import numpy

Di = numpy.array([[1, 4], [1, 5], [4, 5]])

Dj = numpy.array([[9, 4], [5, 5], [3, 6]])

Dk = numpy.array([[2, 4], [5, 6], [4, 7]])
#&gt;&gt;&gt; 

next(array for array in [Di, Dj, Dk] if ([5, 5] == array).all(1).any())
#&gt;&gt;&gt; array([[9, 4],
#&gt;&gt;&gt;        [5, 5],
#&gt;&gt;&gt;        [3, 6]])
</snippet></ROW><ROW><id>18979873</id><snippet>next(i for i, array in enumerate([Di, Dj, Dk]) if ([5, 5] == array).all(1).any())
#&gt;&gt;&gt; 1
</snippet></ROW><ROW><id>18979873</id><snippet>next(k for k, array in {"Di":Di, "Dj":Dj, "Dk":Dk}.items() if ([5, 5] == array).all(1).any())
#&gt;&gt;&gt; 'Dj'
</snippet></ROW><ROW><id>18979873</id><snippet>([5, 5] == array).all(1).any()
</snippet></ROW><ROW><id>18979873</id><snippet>[9, 4] == array
#&gt;&gt;&gt; array([[ True,  True],
#&gt;&gt;&gt;        [False, False],
#&gt;&gt;&gt;        [False, False]], dtype=bool)
</snippet></ROW><ROW><id>18979873</id><snippet>all</snippet></ROW><ROW><id>18979873</id><snippet>([9, 4] == Dj).all(1)
#&gt;&gt;&gt; array([ True, False, False], dtype=bool)
</snippet></ROW><ROW><id>18979873</id><snippet>next(array for array in [Di, Dj, Dk] if CONDITION)
</snippet></ROW><ROW><id>18979873</id><snippet>next</snippet></ROW><ROW><id>18979873</id><snippet>next(..., fallback)</snippet></ROW><ROW><id>18979873</id><snippet>StopIteration</snippet></ROW><ROW><id>18980008</id><snippet>funclist</snippet></ROW><ROW><id>18980008</id><snippet>piecewise</snippet></ROW><ROW><id>18980008</id><snippet>t = np.arange(-2,2,.01)
f1 = lambda t: (t+2)**3
f2 = lambda t: (-t)**3
f3 = lambda t: (t)**3
f4 = lambda t: -(2-t)**3
fx = np.piecewise(t, [(t&lt; -1)*(t&gt;=-2), (t &lt;= 0) * (t&gt;=-1), (t&gt;0) * (t&lt;1),(t&gt;=1) * (t&lt;=2)], [f1,f2,f3,f4])
plot(t,fx)
</snippet></ROW><ROW><id>18980008</id><snippet>select</snippet></ROW><ROW><id>18980008</id><snippet>t = np.arange(-2,2,.01)
f = lambda x: x**3
fx = np.select([(t&lt; -1)*(t&gt;=-2), (t &lt;= 0) * (t&gt;=-1), (t&gt;0) * (t&lt;1),(t&gt;=1) * (t&lt;=2)], [f(t+2),f(-t),f(t),-f(2-t)])
plot(t,fx)
</snippet></ROW><ROW><id>18980008</id><snippet>select</snippet></ROW><ROW><id>18980008</id><snippet>default</snippet></ROW><ROW><id>18980008</id><snippet>(-10,10)</snippet></ROW><ROW><id>18980018</id><snippet>join</snippet></ROW><ROW><id>18980018</id><snippet>os.path</snippet></ROW><ROW><id>18980018</id><snippet>import os.path
os.path.join("myicons", "icon_1.gif")
</snippet></ROW><ROW><id>18980132</id><snippet>test.json</snippet></ROW><ROW><id>18980132</id><snippet>{"67790": {"1": {"kwh": 319.4}}}
</snippet></ROW><ROW><id>18980132</id><snippet>load</snippet></ROW><ROW><id>18980132</id><snippet>dict.update()</snippet></ROW><ROW><id>18980132</id><snippet>dump</snippet></ROW><ROW><id>18980132</id><snippet>test.json</snippet></ROW><ROW><id>18980132</id><snippet>import json

a_dict = {'new_key': 'new_value'}

with open('test.json') as f:
    data = json.load(f)

data.update(a_dict)

with open('test.json', 'w') as f:
    json.dump(data, f)
</snippet></ROW><ROW><id>18980132</id><snippet>test.json</snippet></ROW><ROW><id>18980132</id><snippet>{"new_key": "new_value", "67790": {"1": {"kwh": 319.4}}}
</snippet></ROW><ROW><id>18980136</id><snippet>from collections import Counter

class CountItemsWrapper:
    def __init__(self, items):
        self.items = iter(items)
        self.count = 0

    def __next__(self):
        res = next(self.items)
        self.count += 1
        return res

    def __iter__(self):
        return self

counter = Counter()
text = f.read()
words = CountItemsWrapper(words_generator(text))
interesting_words = filter_generator(words)
counter.update(interesting_words)

for i in counter:
    print("Frequency for "+i ": "+counter[i]/words.count)
</snippet></ROW><ROW><id>18980136</id><snippet>CountItemsWrapper</snippet></ROW><ROW><id>18980136</id><snippet>count</snippet></ROW><ROW><id>18980136</id><snippet>sum</snippet></ROW><ROW><id>18980136</id><snippet>def __init__(self, items):
    self.items = iter(items)
    self.count = 0
</snippet></ROW><ROW><id>18980136</id><snippet>def __next__(self):
    res = next(self.items)
    self.count += 1
    return res
</snippet></ROW><ROW><id>18980136</id><snippet>self.count</snippet></ROW><ROW><id>18980136</id><snippet>next</snippet></ROW><ROW><id>18980136</id><snippet>def __iter__(self):
    return self
</snippet></ROW><ROW><id>18980433</id><snippet>from itertools import product, combinations

def all_fill(source, num):
    output_len = len(source) + num
    for where in combinations(range(output_len), len(source)):
        # start with every possibility
        poss = [[0,1]] * output_len
        # impose the source list
        for w, s in zip(where, source):
            poss[w] = [s]
        # yield every remaining possibility
        for tup in product(*poss):
            yield tup
</snippet></ROW><ROW><id>18980433</id><snippet>&gt;&gt;&gt; set(all_fill([1,1], 1))
set([(0, 1, 1), (1, 1, 0), (1, 1, 1), (1, 0, 1)])
&gt;&gt;&gt; set(all_fill([0,1], 2))
set([(1, 0, 1, 1), (1, 1, 0, 1), (1, 0, 1, 0), (0, 1, 1, 1),
(0, 1, 0, 1), (1, 0, 0, 1), (0, 0, 1, 0), (0, 1, 1, 0),
(0, 1, 0, 0), (0, 0, 1, 1), (0, 0, 0, 1)])
</snippet></ROW><ROW><id>18980458</id><snippet>while len(outerlist) &lt;= idx:
    outerlist.append([])
</snippet></ROW><ROW><id>18980458</id><snippet>collections.defaultdict()</snippet></ROW><ROW><id>18980458</id><snippet>from collections import defaultdict

data = defaultdict(list)

data[2].append(3)
data[5].append(42)
</snippet></ROW><ROW><id>18980458</id><snippet>data</snippet></ROW><ROW><id>18980458</id><snippet>2</snippet></ROW><ROW><id>18980458</id><snippet>5</snippet></ROW><ROW><id>18980458</id><snippet>0</snippet></ROW><ROW><id>18980458</id><snippet>1</snippet></ROW><ROW><id>18980458</id><snippet>3</snippet></ROW><ROW><id>18980458</id><snippet>4</snippet></ROW><ROW><id>18980658</id><snippet>cvar</snippet></ROW><ROW><id>18980658</id><snippet>PyInt</snippet></ROW><ROW><id>18980658</id><snippet>PyInt</snippet></ROW><ROW><id>18980658</id><snippet>cvar</snippet></ROW><ROW><id>18980658</id><snippet>__setattr__</snippet></ROW><ROW><id>18980658</id><snippet>__getattr__</snippet></ROW><ROW><id>18980658</id><snippet>__getattribute__</snippet></ROW><ROW><id>18980658</id><snippet>cvar</snippet></ROW><ROW><id>18980748</id><snippet>src = lxml.etree.parse('real.xml')
ix = dict()
for n in src.getroot().iterdescendants():
    ix[n.tag] = n

dest = lxml.etree.parse('template.xml')
for n in dest.getroot().iterdescendants():
    if n.tag in ix:
        n.text = ix[n.tag].text
</snippet></ROW><ROW><id>18980851</id><snippet>struct.unpack('&gt;H',buff[0x5B:0x5B+2])[0])</snippet></ROW><ROW><id>18980851</id><snippet>itertools</snippet></ROW><ROW><id>18981298</id><snippet>for key in bucket.list():
   akey = bucket.get_key(key.name)
   print akey.get_metadata("company")
</snippet></ROW><ROW><id>18981943</id><snippet>r = requests.put(url, data=json.dumps(payload), headers=headers)
</snippet></ROW><ROW><id>18981965</id><snippet>json.loads(request.body)
</snippet></ROW><ROW><id>18982141</id><snippet> def three_panel_plot(data, ploting_args, ax1, ax2, ax3):
     # what you do to plot
</snippet></ROW><ROW><id>18982522</id><snippet>class Cascade12000b(object):
    """A Cascade12000b driver.

    :param connection: A connection object, used to communicate with the real device.
        The connection interface should conform to the following interface.
        It must have two methods:

        * `.write()` taking a string message
        * `.ask()` taking a string message, returning a string response

    :param int id: The device id

    """
    def __init__(self, connection, id=2):
        self.connection = connection
        self.id = int(id)

    def position(self):
        """Returns a tuple `(x,y,z)` with the position coordinates."""
        response = self.connection.ask(':MOV:ABS? {0:d}'.format(self.id))
        # assuming whitespace separated response
        return tuple(int(x) for x in reponse.split())

    def move_absolute(self, x, y, z=None):
        """Sets the position in absolute coordinates."""
        if z is None:
            _, _, z = self.position()
        self.connection.write(':MOV:ABS {0:d} {1:d} {2:d} {3:d}'.format(self.id, x, y, z)

    def move_relative(self, dx, dy, dz=0):
        """Sets the position in relative coordinates."""
        self.connection.write(':MOV:REL {0:d} {1:d} {2:d} {3:d}'.format(self.id, dx, dy, dz)
</snippet></ROW><ROW><id>18982522</id><snippet># Injecting the connection has the advantage that you can change the implementation, e.g. # to linux-gpib
&gt;&gt;&gt;connection = visa.instrument('GPIB::28')
&gt;&gt;&gt;device = Cascade12000b(connection)
&gt;&gt;&gt;device.move_absolute(10, 13, 20)
&gt;&gt;&gt;device.position()
10, 13, 20
&gt;&gt;&gt;device.move_relative(2,2)
&gt;&gt;&gt;device.position()
12,15,20
</snippet></ROW><ROW><id>18982726</id><snippet>&gt;&gt;&gt; def catch():
...     try:
...             asd()
...     except Exception as e:
...             print e.message, e.args
... 
&gt;&gt;&gt; catch()
global name 'asd' is not defined ("global name 'asd' is not defined",)
</snippet></ROW><ROW><id>18982726</id><snippet>BaseException</snippet></ROW><ROW><id>18982726</id><snippet>SystemExit</snippet></ROW><ROW><id>18982726</id><snippet>KeyboardInterrupt</snippet></ROW><ROW><id>18982726</id><snippet>GeneratorExit</snippet></ROW><ROW><id>18982726</id><snippet>&gt;&gt;&gt; def catch():
...     try:
...             raise BaseException()
...     except Exception as e:
...             print e.message, e.args
... 
&gt;&gt;&gt; catch()
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
  File "&lt;stdin&gt;", line 3, in catch
BaseException
</snippet></ROW><ROW><id>18982726</id><snippet>&gt;&gt;&gt; def catch():
...     try:
...             raise BaseException()
...     except:
...             pass
... 
&gt;&gt;&gt; catch()
&gt;&gt;&gt; 
</snippet></ROW><ROW><id>18982889</id><snippet>class Test(object):
    def __new__(*args):
        return False
</snippet></ROW><ROW><id>18982942</id><snippet>read_csv</snippet></ROW><ROW><id>18982942</id><snippet>[1, 2]</snippet></ROW><ROW><id>18982942</id><snippet>df['c'] = df['c'].map(ast.literal_eval)</snippet></ROW><ROW><id>18982942</id><snippet>import ast</snippet></ROW><ROW><id>18982942</id><snippet>read_csv</snippet></ROW><ROW><id>18982942</id><snippet>df.to_pickle('test.df')</snippet></ROW><ROW><id>18982978</id><snippet>import json   
import time

with open ('dat') as f:
  line = f.readline()
  while line:
    try:
      raw_data = json.loads(line.strip().strip(','))
      print (raw_data)
      time.sleep(15*60)
    except ValueError:
      pass
    line = f.readline()      
</snippet></ROW><ROW><id>18983027</id><snippet>matplotlib</snippet></ROW><ROW><id>18983027</id><snippet>set_major_locator</snippet></ROW><ROW><id>18983027</id><snippet>axes</snippet></ROW><ROW><id>18983027</id><snippet>copy</snippet></ROW><ROW><id>18983027</id><snippet>import datetime
import copy

def getDates(startdate, enddate):
    days  = (enddate + datetime.timedelta(days=1) - startdate).days
    dates = [ startdate + datetime.timedelta(days=x) for x in range(0, days) ]
    return dates

dates1 = getDates(datetime.datetime(2013, 1, 1), datetime.datetime(2013, 1, 31))
dates2 = getDates(datetime.datetime(2013, 3, 1), datetime.datetime(2013, 3, 31))
dates = dates1+dates2
data = np.arange(len(dates))

Locator = mpl.dates.DayLocator(interval=5)
Formatter = mpl.dates.DateFormatter('%d-%m-%y')

fig, (ax, ax2) = plt.subplots(1, 2, sharey=True, tight_layout=True)
fig.subplots_adjust(wspace=0.05)
fig.set_size_inches(10, 3, forward=True)

ax.plot(dates, data)
ax2.plot(dates, data)

ax.legend(loc=1)
ax.set_ylim(0, 61)
ax.set_xlim(datetime.datetime(2013, 1, 1), datetime.datetime(2013, 1, 31))
ax2.set_xlim(datetime.datetime(2013, 3, 1), datetime.datetime(2013, 3, 31))

labels = ax.get_xticklabels()
for label in labels:
    label.set_rotation(30)
labels = ax2.get_xticklabels()
for label in labels:
    label.set_rotation(30)

ax.spines['right'].set_visible(False)
ax2.spines['left'].set_visible(False)
ax.tick_params(right='off')
ax2.tick_params(left='off')
ax2.yaxis.tick_right()


# note the copy here
ax.xaxis.set_major_locator(copy.copy(Locator))
ax.xaxis.set_major_formatter(copy.copy(Formatter))
ax2.xaxis.set_major_locator(copy.copy(Locator))
ax2.xaxis.set_major_formatter(copy.copy(Formatter))
</snippet></ROW><ROW><id>18983082</id><snippet>def foo(**kwargs):
    pass
</snippet></ROW><ROW><id>18983082</id><snippet>foo(x=None, x=None)
#&gt;&gt;&gt; Traceback (most recent call last):
#&gt;&gt;&gt;   File "&lt;string&gt;", line 73, in &lt;module&gt;
#&gt;&gt;&gt;   File "/usr/lib/python3.3/ast.py", line 35, in parse
#&gt;&gt;&gt;     return compile(source, filename, mode, PyCF_ONLY_AST)
#&gt;&gt;&gt;   File "&lt;unknown&gt;", line 4
#&gt;&gt;&gt; SyntaxError: keyword argument repeated
</snippet></ROW><ROW><id>18983082</id><snippet>data, dictionary, data, dictionary, data, dictionary, ...</snippet></ROW><ROW><id>18983082</id><snippet>def funct(*args):
    ...

funct(
    data1, {"x": "x_val", "y": "y_val"},
    data2, {"x": "x_val", "y": "y_val"},
    data3, {"x": "x_val", "y": "y_val", "other_args": "other_args_val"}
)
</snippet></ROW><ROW><id>18983082</id><snippet>namedtuple</snippet></ROW><ROW><id>18983082</id><snippet>funct(
    Data(data1, x="x_val", y="y_val"),
    Data(data2, x="x_val", y="y_val"),
    Data(data3, x="x_val", y="y_val", other_args="other_args_val")
)
</snippet></ROW><ROW><id>18983233</id><snippet>import matplotlib.pyplot as plt
daysofweek = {1:('Sunday','r'), 
              2:('Monday','g'), 
              3:('Tuesday','b'), 
              4:('Wednesday','yellow'), 
              5:('Thursday','k'), 
              6:('Friday', 'magenta'), 
              7:('Saturday', 'orange')}
ax1 = plt.subplot(111)

xval = [2., 4., 7.]
yval = [2.5, 3.6, 2.7]

for j in range(len(xval)):
    ax1.bar(xval[j], yval[j], width=0.8, bottom=0.0, align='center', color=daysofweek[xval[j]][1], alpha=0.6, label=daysofweek[xval[j]][0])
ax1.set_xticks(xval)
ax1.set_xticklabels([daysofweek[i][0] for i in xval])
ax1.legend()
plt.show()
</snippet></ROW><ROW><id>18983452</id><snippet>sys.modules</snippet></ROW><ROW><id>18983496</id><snippet>matches = re.findall(r'&lt;b[^&gt;]+&gt;(.*?)&lt;/b&gt;(.*?)&lt;/p&gt;', str)
</snippet></ROW><ROW><id>18983496</id><snippet>&lt;b            match start of tag '&lt;b'
 [^&gt;]+        any character except: '&gt;' (1 or more times)
 &gt;            match enclosed '&gt;'
 (            group and capture to \1:
  .*?         any character except \n (0 or more times)
 )            end of \1
 &lt;/b&gt;         match '&lt;/b&gt;'
 (            group and capture to \2:
  .*?         any character except \n (0 or more times)
 )            end of \2
 &lt;/p&gt;         match '&lt;/p&gt;'
</snippet></ROW><ROW><id>18983496</id><snippet>.*</snippet></ROW><ROW><id>18983496</id><snippet>?</snippet></ROW><ROW><id>18983496</id><snippet>re</snippet></ROW><ROW><id>18983496</id><snippet>?</snippet></ROW><ROW><id>18983496</id><snippet>+?</snippet></ROW><ROW><id>18983496</id><snippet>??</snippet></ROW><ROW><id>18983565</id><snippet>X = map(set,product(x1,x2,x3))

def has_element(X,Y):
    return [y for y in Y if len(y.intersection(X))]

print has_element(['d1','u1'],X)

&gt;&gt;&gt; [set(['d2', 'u1', 'd3']), set(['d2', 'u1', 'u3']), set(['u1', 'd3', 'u2']), set(['u1', 'u3', 'u2']), set(['d2', 'd3', 'd1']), set(['d2', 'u3', 'd1']), set(['u2', 'd3', 'd1']), set(['u2', 'u3', 'd1'])]
</snippet></ROW><ROW><id>18983565</id><snippet>def new_product(X,Y):
    Z = []
    for a,b in product(X,Y):
        ab = b.copy()
        ab.add(a)
        Z.append(ab)
    return Z

print new_product(set(['d4','u4']),X)

&gt;&gt;&gt; [set(['u1', 'd2', 'd3', 'u4']), set(['u1', 'd2', 'u3', 'u4']), set(['u4', 'u1', 'd3', 'u2']), set(['u4', 'u1', 'u3', 'u2']), set(['u4', 'd2', 'd3', 'd1']), set(['u4', 'd2', 'u3', 'd1']), set(['u4', 'd1', 'd3', 'u2']), set(['u4', 'd1', 'u3', 'u2']), set(['u1', 'd4', 'd2', 'd3']), set(['u1', 'd4', 'd2', 'u3']), set(['d4', 'u1', 'd3', 'u2']), set(['d4', 'u1', 'u3', 'u2']), set(['d4', 'd2', 'd3', 'd1']), set(['d4', 'd2', 'u3', 'd1']), set(['d4', 'd1', 'd3', 'u2']), set(['d4', 'd1', 'u3', 'u2'])]
</snippet></ROW><ROW><id>18983565</id><snippet>def remove(X,Y):
    Z = Y[:] # Make a copy
    for z in Z:
        for x in X:
            if x in z:
                z.remove(x)
    return Z

print remove(x3,X)

&gt;&gt;&gt; [set(['d2', 'd1']), set(['d2', 'd1']), set(['u2', 'd1']), set(['u2', 'd1'])]
</snippet></ROW><ROW><id>18983566</id><snippet>python</snippet></ROW><ROW><id>18983566</id><snippet>user@x790:~/temp$ alias python=/usr/bin/python
user@x790:~/temp$ python --version
Python 2.7.4
user@x790:~/temp$ virtualenv --python=/usr/bin/python3 foo
Running virtualenv with interpreter /usr/bin/python3
Using base prefix '/usr'
New python executable in foo/bin/python3
Also creating executable in foo/bin/python
Installing distribute.................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................done.
Installing pip................done.
user@x790:~/temp$ . foo/bin/activate
(foo)user@x790:~/temp$ python --version
Python 2.7.4
</snippet></ROW><ROW><id>18983566</id><snippet>env</snippet></ROW><ROW><id>18983566</id><snippet>(foo)user@x790:~/temp$ env python --version
Python 3.3.1
</snippet></ROW><ROW><id>18983566</id><snippet>(foo)user@x790:~/temp$ \python --version
Python 3.3.1
(foo)user@x790:~/temp$ unalias python
(foo)user@x790:~/temp$ python --version
Python 3.3.1
</snippet></ROW><ROW><id>18983863</id><snippet>{% for domain in server.domain_set.all|dictsort:'url' %}
</snippet></ROW><ROW><id>18983986</id><snippet>numpy.round</snippet></ROW><ROW><id>18983986</id><snippet>numpy.around</snippet></ROW><ROW><id>18983986</id><snippet>fesetround</snippet></ROW><ROW><id>18983986</id><snippet>ctypes</snippet></ROW><ROW><id>18983986</id><snippet>import numpy as np
import ctypes
FE_TONEAREST = 0x0000
FE_DOWNWARD = 0x0400
FE_UPWARD = 0x0800
FE_TOWARDZERO = 0x0c00
libc = ctypes.CDLL('libc.dylib')

v = 1. / (1&lt;&lt;23)
print repr(np.float32(1+v) - np.float32(v/2)) # prints 1.0
libc.fesetround(FE_UPWARD)
print repr(np.float32(1+v) - np.float32(v/2)) # prints 1.0000002
</snippet></ROW><ROW><id>18984187</id><snippet>flush()</snippet></ROW><ROW><id>18984187</id><snippet>open()</snippet></ROW><ROW><id>18984187</id><snippet>outputFile = open("./outputFile.txt", "a", 0)
</snippet></ROW><ROW><id>18984232</id><snippet>Distance.__init__()</snippet></ROW><ROW><id>18984232</id><snippet>  Feet.__init__(self)
  Meters.__init__(self)
</snippet></ROW><ROW><id>18984232</id><snippet>class Distance(object):
    def __init__(self, meters=None, feet=None):
        self.feet = feet
        self.meters = meters
</snippet></ROW><ROW><id>18984232</id><snippet>distance = Distance(meters=Meters(12))
print distance.meters.value
print distance.meters.type
# Here do whatever you want with them
</snippet></ROW><ROW><id>18984292</id><snippet>None</snippet></ROW><ROW><id>18984292</id><snippet>vars1</snippet></ROW><ROW><id>18984292</id><snippet>def vars1(self):
    a = {}
    for i in xrange(0,10):
        a[i] = i*10
    return a
</snippet></ROW><ROW><id>18984292</id><snippet>result</snippet></ROW><ROW><id>18984292</id><snippet>r</snippet></ROW><ROW><id>18984292</id><snippet>vars1</snippet></ROW><ROW><id>18984292</id><snippet>vars1</snippet></ROW><ROW><id>18984416</id><snippet>tar -cf output_file.tar /path/to/installation</snippet></ROW><ROW><id>18984416</id><snippet>configure</snippet></ROW><ROW><id>18984532</id><snippet>myCounter = Counter()
largedict = { myKey:
                    {counterKey: myCounter
                     anotherKey: Value2}
             }

largedict[myKey][counterKey]['somethingyouwanttocount']+=1
</snippet></ROW><ROW><id>18984532</id><snippet>Counter</snippet></ROW><ROW><id>18984532</id><snippet>dicts</snippet></ROW><ROW><id>18984532</id><snippet>dict</snippet></ROW><ROW><id>18984532</id><snippet>from collections import defaultdict, Counter
largedict = defaultdict(Counter)
largedict['apple']['purple']+=1
</snippet></ROW><ROW><id>18985246</id><snippet>import subprocess, signal, time, os

cmd = "python target.py"
P = subprocess.Popen(cmd,shell=True)

while True:
   time.sleep(5)
   os.kill(P.pid, signal.SIGSTOP)
   print "doing something"
   os.kill(P.pid, signal.SIGCONT)
</snippet></ROW><ROW><id>18985263</id><snippet>[tox]
skipsdist=BOOL    # defaults to false
</snippet></ROW><ROW><id>18985263</id><snippet>True</snippet></ROW><ROW><id>18985263</id><snippet>setup.py</snippet></ROW><ROW><id>18985462</id><snippet>error LNK1104: cannot open file 'python27_d.lib'
</snippet></ROW><ROW><id>18985462</id><snippet>_d</snippet></ROW><ROW><id>18985462</id><snippet>python27.lib</snippet></ROW><ROW><id>18985462</id><snippet>python27_d.lib</snippet></ROW><ROW><id>18985462</id><snippet>python27_d.lib</snippet></ROW><ROW><id>18985491</id><snippet>TEST_1 = [['1', '1231', 'L', 'LA'],['1', '1234', 'L', 'T'],
    ['2', '1434', 'A', 'C'],['3', '1634', 'L', 'T'],
    ['4', '6034', 'L', 'LAL,LALLAL'],['5', '4231', 'N', 'AD']]
</snippet></ROW><ROW><id>18985491</id><snippet>{1, 2, 3, 4} - {3, 4, 5, 6} == {1, 2}</snippet></ROW><ROW><id>18985491</id><snippet>TEST_2 = [['1', '1231', 'L', 'LA'],['1', '1234', 'L', 'T'],
    ['2', '1434', 'A', 'C'],['3', '1634', 'L', 'T'],
    ['4', '6034', 'L', 'LALLAL,LAL'],['5', '4231', 'N', 'PL'],
    ['6', '5231', 'T', 'PAL']]

TEST_1 = {tuple(frozenset(x.split(",")) for x in t) for t in TEST_1}
TEST_2 = {tuple(frozenset(x.split(",")) for x in t) for t in TEST_2}
</snippet></ROW><ROW><id>18985491</id><snippet>['4', '6034', 'L', 'LALLAL,LAL']</snippet></ROW><ROW><id>18985491</id><snippet>({'4'}, {'6034'}, {'L'}, {'LALLAL', 'LAL'})</snippet></ROW><ROW><id>18985491</id><snippet>set</snippet></ROW><ROW><id>18985491</id><snippet>{'LALLAL', 'LAL'} == {'LAL', 'LALLAL'}</snippet></ROW><ROW><id>18985491</id><snippet>frozenset</snippet></ROW><ROW><id>18985491</id><snippet>tuple</snippet></ROW><ROW><id>18985491</id><snippet>list</snippet></ROW><ROW><id>18985491</id><snippet>print("ONLY IN TEST 1:")
for thing in TEST_1 - TEST_2:
    print('\t'.join(",".join(x) for x in thing))

print()

print("ONLY IN TEST 2:")
for thing in TEST_2 - TEST_1:
    print('\t'.join(",".join(x) for x in thing))

print()

print("IN BOTH:")
for thing in TEST_1 &amp; TEST_2:
    print('\t'.join(",".join(x) for x in thing))


#&gt;&gt;&gt; ONLY IN TEST 1:
#&gt;&gt;&gt; 5  4231    N   AD
#&gt;&gt;&gt; 
#&gt;&gt;&gt; ONLY IN TEST 2:
#&gt;&gt;&gt; 5  4231    N   PL
#&gt;&gt;&gt; 6  5231    T   PAL
#&gt;&gt;&gt; 
#&gt;&gt;&gt; IN BOTH:
#&gt;&gt;&gt; 1  1231    L   LA
#&gt;&gt;&gt; 3  1634    L   T
#&gt;&gt;&gt; 4  6034    L   LAL,LALLAL
#&gt;&gt;&gt; 1  1234    L   T
#&gt;&gt;&gt; 2  1434    A   C
</snippet></ROW><ROW><id>18985561</id><snippet>[A-Za-z]+(?:'[A-Za-z]+)*
</snippet></ROW><ROW><id>18985561</id><snippet>'?</snippet></ROW><ROW><id>18985561</id><snippet>'?[A-Za-z]+(?:'[A-Za-z]+)*
</snippet></ROW><ROW><id>18985571</id><snippet>import httplib2

def createDriveService():
    """Builds and returns a Drive service object authorized with the
       application's service account.
       Returns:
           Drive service object.
    """
    from oauth2client.appengine import AppAssertionCredentials
    from apiclient.discovery import build
    credentials = AppAssertionCredentials(scope='https://www.googleapis.com/auth/drive')
    http = httplib2.Http()
    http = credentials.authorize(http)
    return build('drive', 'v2', http=http, developerKey=API_KEY)
</snippet></ROW><ROW><id>18985571</id><snippet>service = createDriveService()
res = {'title': foldername, 
       'mimeType': "application/vnd.google-apps.folder"}
service.files().insert(body=res).execute()
</snippet></ROW><ROW><id>18985781</id><snippet>s[-1:3]</snippet></ROW><ROW><id>18985781</id><snippet>s[-1:3:-1]</snippet></ROW><ROW><id>18985807</id><snippet>x</snippet></ROW><ROW><id>18985807</id><snippet>level</snippet></ROW><ROW><id>18985807</id><snippet>x</snippet></ROW><ROW><id>18985807</id><snippet>level</snippet></ROW><ROW><id>18985807</id><snippet>height = int (input ("input height: "))

for level in range (1, height+1):
    num = level

    for x in range (num):
        if( (level+x)%2==0): #Even row starts with "11" first
            print ("11",end = "")
        else:
            print ("22",end = "")
    print()
</snippet></ROW><ROW><id>18985807</id><snippet>level</snippet></ROW><ROW><id>18985807</id><snippet>x</snippet></ROW><ROW><id>18985916</id><snippet>func1()</snippet></ROW><ROW><id>18985916</id><snippet>round()</snippet></ROW><ROW><id>18985932</id><snippet>&gt;&gt;&gt; c = ['nan'] * len(a)
&gt;&gt;&gt; for i, j in zip(aindex, lindex):
...     c[j] = al3[i]
... 
&gt;&gt;&gt; c
[5, 'nan', 'nan', 'nan', 'nan', 6, 4, 'nan', 'nan', 'nan', 'nan']
</snippet></ROW><ROW><id>18985932</id><snippet>c</snippet></ROW><ROW><id>18985932</id><snippet>a</snippet></ROW><ROW><id>18985932</id><snippet>nan</snippet></ROW><ROW><id>18985932</id><snippet>&gt;&gt;&gt; c = ['nan'] * len(a)
&gt;&gt;&gt; c
['nan', 'nan', 'nan', 'nan', 'nan', 'nan', 'nan', 'nan', 'nan', 'nan', 'nan']
</snippet></ROW><ROW><id>18985932</id><snippet>zip</snippet></ROW><ROW><id>18985932</id><snippet>&gt;&gt;&gt; zip(aindex, lindex)
[(0, 0), (1, 5), (3, 6)]
</snippet></ROW><ROW><id>18985932</id><snippet>al3</snippet></ROW><ROW><id>18985932</id><snippet>c</snippet></ROW><ROW><id>18985932</id><snippet>'nan'</snippet></ROW><ROW><id>18985996</id><snippet>scsv = request.POST['q'].encode('utf-8')
</snippet></ROW><ROW><id>18986410</id><snippet>lst = range(1, 149)
lst = [lst[i:i+13] for i in xrange(0, len(lst), 13)]
lst = zip(*[lst[i] + lst[i+4] + lst[i+8] for i in xrange(4)])

for row in lst:
    for col in row:
        print col,
    print
</snippet></ROW><ROW><id>18986434</id><snippet>for i in range(0,k-1):
    sum+=(ser(i*2*3.1415926/k))**8
</snippet></ROW><ROW><id>18986434</id><snippet>i=0</snippet></ROW><ROW><id>18986434</id><snippet>ser</snippet></ROW><ROW><id>18986434</id><snippet>a == 0</snippet></ROW><ROW><id>18986434</id><snippet>(a**(2j-1))</snippet></ROW><ROW><id>18986434</id><snippet>a**(2*j-1)</snippet></ROW><ROW><id>18986434</id><snippet>j</snippet></ROW><ROW><id>18986434</id><snippet>2j-1</snippet></ROW><ROW><id>18986446</id><snippet>from dateutil import parser
from datetime import datetime

object_date = parser.parse(my_obj.datefield)
if object_date &lt; datetime.now():
    # Do something
else:
    # Do something else
</snippet></ROW><ROW><id>18986446</id><snippet>dateutil</snippet></ROW><ROW><id>18986446</id><snippet>pip install python-dateutil</snippet></ROW><ROW><id>18986618</id><snippet>def __del__(self):
    self.driver.quite()
    ...
</snippet></ROW><ROW><id>18986618</id><snippet>@classmethod
def from_crawler(cls, crawler):
    o = cls(crawler.stats)
    crawler.signals.connect(o.quit_driver, signal=signals.spider_closed)
    return o
</snippet></ROW><ROW><id>18986843</id><snippet>class ExportFormView(FormView):

template_name = 'export_muids.html'
form_class = ExportForm
success_url = '/'

def get_form_kwargs(self):
    kwargs = super(ExportFormView, self).get_form_kwargs()
    kwargs.update({
         'request' : self.request
    })
    return kwargs
</snippet></ROW><ROW><id>18986843</id><snippet>class ExportForm(forms.Form):
def __init__(self, request, *args, **kwargs):
    self.request = request
    choice_list = []

    if request.user.has_perms('tracker.print_all'):
        e = Muid.objects.values('batch_number').distinct()
    else:
        e = Muid.objects.values('batch_number').distinct().filter(exported=False)
    for item in e:
        choice = item['batch_number']
        choice_list.append((choice, choice))
    super(ExportForm, self).__init__(*args, **kwargs)
    self.fields['batch_number'] = forms.ChoiceField(choices = choice_list)
</snippet></ROW><ROW><id>18986884</id><snippet>import tkinter as tk

class SimpleTableInput(tk.Frame):
    def __init__(self, parent, rows, columns):
        tk.Frame.__init__(self, parent)

        self._entry = {}
        self.rows = rows
        self.columns = columns

        # register a command to use for validation
        vcmd = (self.register(self._validate), "%P")

        # create the table of widgets
        for row in range(self.rows):
            for column in range(self.columns):
                index = (row, column)
                e = tk.Entry(self, validate="key", validatecommand=vcmd)
                e.grid(row=row, column=column, stick="nsew")
                self._entry[index] = e
        # adjust column weights so they all expand equally
        for column in range(self.columns):
            self.grid_columnconfigure(column, weight=1)
        # designate a final, empty row to fill up any extra space
        self.grid_rowconfigure(rows, weight=1)

    def get(self):
        '''Return a list of lists, containing the data in the table'''
        result = []
        for row in range(self.rows):
            current_row = []
            for column in range(self.columns):
                index = (row, column)
                current_row.append(self._entry[index].get())
            result.append(current_row)
        return result

    def _validate(self, P):
        '''Perform input validation. 

        Allow only an empty value, or a value that can be converted to a float
        '''
        if P.strip() == "":
            return True

        try:
            f = float(P)
        except ValueError:
            self.bell()
            return False
        return True

class Example(tk.Frame):
    def __init__(self, parent):
        tk.Frame.__init__(self, parent)
        self.table = SimpleTableInput(self, 3, 4)
        self.submit = tk.Button(self, text="Submit", command=self.on_submit)
        self.table.pack(side="top", fill="both", expand=True)
        self.submit.pack(side="bottom")

    def on_submit(self):
        print(self.table.get())


root = tk.Tk()
Example(root).pack(side="top", fill="both", expand=True)
root.mainloop()
</snippet></ROW><ROW><id>18986906</id><snippet>list_of_filenames = ['/foo/bar', '/baz', '/tmp/foo']
open_files = [open(f) for f in list_of_filenames]
</snippet></ROW><ROW><id>18986906</id><snippet>os.listdir</snippet></ROW><ROW><id>18986906</id><snippet>import os
open_files = [open(f) for f in os.listdir(some_path)]
</snippet></ROW><ROW><id>18986906</id><snippet>os.listdir</snippet></ROW><ROW><id>18986906</id><snippet>os.path.isfile</snippet></ROW><ROW><id>18986906</id><snippet>import os
open_files = [open(f) for f in os.listdir(some_path) if os.path.isfile(f)]
</snippet></ROW><ROW><id>18986906</id><snippet>os.listdir</snippet></ROW><ROW><id>18986906</id><snippet>some_path</snippet></ROW><ROW><id>18986906</id><snippet>os.path.join</snippet></ROW><ROW><id>18986906</id><snippet>import os
open_files = [open(os.path.join(some_path, f)) for f in os.listdir(some_path) 
              if os.path.isfile(f)]
</snippet></ROW><ROW><id>18986906</id><snippet>import os
all_files = (open(f) for f in os.listdir(some_path)) # note () instead of []
for f in all_files:
    pass # do something with the open file here.
</snippet></ROW><ROW><id>18986906</id><snippet>ExitStack</snippet></ROW><ROW><id>18986981</id><snippet>foo(arg1,arg2);</snippet></ROW><ROW><id>18986981</id><snippet>{
    "type": "Program",
    "body": [
        {
            "type": "ExpressionStatement",
            "expression": {
                "type": "CallExpression",
                "callee": {
                    "type": "Identifier",
                    "name": "foo"
                },
                "arguments": [
                    {
                        "type": "Identifier",
                        "name": "arg1"
                    },
                    {
                        "type": "Identifier",
                        "name": "arg2"
                    }
                ]
            }
        }
    ]
}
</snippet></ROW><ROW><id>18986981</id><snippet>                ExpressionStatement
                        |
                   expression
                 /      |     \
type=callExpression   callee   arguments
                        |       
                    name=foo  
</snippet></ROW><ROW><id>18987114</id><snippet>cb.ax</snippet></ROW><ROW><id>18987114</id><snippet>&gt;&gt;&gt; x=linspace(-4,4)
&gt;&gt;&gt; y=linspace(-4,4)
&gt;&gt;&gt; g=meshgrid(x,y)
&gt;&gt;&gt; z=g[0]**2+5*g[1]
&gt;&gt;&gt; ctf=plt.contourf(x, y, z)
&gt;&gt;&gt; cb=plt.colorbar(ctf, shrink=0.5)
&gt;&gt;&gt; cb.ax.text(0.5, 0, 'text', va='top', ha='center')
&lt;matplotlib.text.Text object at 0x9173670&gt;
</snippet></ROW><ROW><id>18987140</id><snippet>s_p.update(picture_id=I_object.id)
</snippet></ROW><ROW><id>18987140</id><snippet>s_p.update(picture=I_object)
</snippet></ROW><ROW><id>18987305</id><snippet>import os

root = "C:\\test\\"
for path, subdirs, files in os.walk(root):
    if files:
        print(os.path.join(path, min(files)))
</snippet></ROW><ROW><id>18987305</id><snippet>import os
import itertools

root = "C:\\test\\"
for path, subdirs, files in itertools.islice(os.walk(root), 1, None):
    if files:
        print(os.path.join(path, min(files)))
</snippet></ROW><ROW><id>18987305</id><snippet>min</snippet></ROW><ROW><id>18987410</id><snippet>bigList = [1, (1, 2), {(3,9): [4, 5]}, [{6: 7} , 8]]
linear_dict = dict()

def nestedList(l, index = None, break_tuple = False):
    for count, item in enumerate(l):
        if type(item) is list:
            nestedList(item, index if index else count)
        elif type(item) is dict:
            nestedList(item.iteritems(), index if index else count, True)
        elif type(item) is tuple and break_tuple:
            nestedList(list(item), index)
        else:
            linear_dict[item] = index if index else count

nestedList(bigList)
print linear_dict

{(1, 2): 1, 1: 0, 4: 2, 5: 2, 6: 3, 7: 3, 8: 3, (3, 9): 2}
</snippet></ROW><ROW><id>18987410</id><snippet>isinstance()</snippet></ROW><ROW><id>18987410</id><snippet>type()</snippet></ROW><ROW><id>18987446</id><snippet>l = re.findall(pat, sub)
print l
</snippet></ROW><ROW><id>18987446</id><snippet>['', 'ea', '', '']
</snippet></ROW><ROW><id>18987446</id><snippet>*</snippet></ROW><ROW><id>18987446</id><snippet>[aeiou]*</snippet></ROW><ROW><id>18987446</id><snippet>dear</snippet></ROW><ROW><id>18987446</id><snippet>*d*ea*r*  // * where the pattern matches.
</snippet></ROW><ROW><id>18987446</id><snippet>*'s</snippet></ROW><ROW><id>18987446</id><snippet>d</snippet></ROW><ROW><id>18987446</id><snippet>ea</snippet></ROW><ROW><id>18987446</id><snippet>ea</snippet></ROW><ROW><id>18987446</id><snippet>r</snippet></ROW><ROW><id>18987446</id><snippet>r</snippet></ROW><ROW><id>18987446</id><snippet>r</snippet></ROW><ROW><id>18987515</id><snippet>x</snippet></ROW><ROW><id>18987515</id><snippet>y</snippet></ROW><ROW><id>18987515</id><snippet>import numpy as np
import matplotlib.pyplot as plt

# populate x and y arrays.

x = np.array(x)
y = np.array(y)

fig = plt.figure()
ax = fig.add_subplot(111)

ax.plot(x[:,0], y[:,0], 'g-o')
ax.plot(x[:,1], y[:,1], 'r-x')
</snippet></ROW><ROW><id>18987515</id><snippet>ax.plot(x, y)
</snippet></ROW><ROW><id>18987515</id><snippet>for i in range(x.shape[-1]):
    ax.plot(x[:,i], y[:,0])
</snippet></ROW><ROW><id>18987515</id><snippet>x[:,n]</snippet></ROW><ROW><id>18987515</id><snippet>:</snippet></ROW><ROW><id>18987515</id><snippet>,n</snippet></ROW><ROW><id>18987515</id><snippet>n+1</snippet></ROW><ROW><id>18987515</id><snippet>[[date00, date01],
 [date10, date11],
 [date20, date21],
 ...
 [dateN0, dateN1]]
</snippet></ROW><ROW><id>18987515</id><snippet>x[:,0]</snippet></ROW><ROW><id>18987515</id><snippet>x[:,1]</snippet></ROW><ROW><id>18987515</id><snippet>x[dim0, dim1, ..., dimN]</snippet></ROW><ROW><id>18987515</id><snippet>data[0, :, -1]</snippet></ROW><ROW><id>18987515</id><snippet>data[0, :, :]</snippet></ROW><ROW><id>18987884</id><snippet>message.content.Extensions[TestPb_pb2.actionRequest]</snippet></ROW><ROW><id>18987884</id><snippet>
message.content.Extensions[TestPb_pb2.actionRequest].token = "foobar"
</snippet></ROW><ROW><id>18988069</id><snippet>gtk.main()</snippet></ROW><ROW><id>18988069</id><snippet>gtk.main_quit()</snippet></ROW><ROW><id>18988069</id><snippet>timeout</snippet></ROW><ROW><id>18988069</id><snippet>gobject.timeout_add</snippet></ROW><ROW><id>18988069</id><snippet>gtk.main()</snippet></ROW><ROW><id>18988069</id><snippet>...
    if(self.window.get_window().get_state() == gtk.gdk.WINDOW_STATE_MAXIMIZED):
      self.window.unmaximize()
    gobject.timeout_add(1000, gtk.main_quit)
    gtk.main()
...
</snippet></ROW><ROW><id>18988069</id><snippet>gobject.MainLoop.run()</snippet></ROW><ROW><id>18988069</id><snippet>s.run()</snippet></ROW><ROW><id>18988107</id><snippet>print</snippet></ROW><ROW><id>18988448</id><snippet>print ting[2]
</snippet></ROW><ROW><id>18988448</id><snippet>[1379962800000, 125.539504822835]
</snippet></ROW><ROW><id>18988448</id><snippet>item['values']</snippet></ROW><ROW><id>18988448</id><snippet>ting</snippet></ROW><ROW><id>18988448</id><snippet>&gt;&gt;&gt; print ting[2][0]
1379962800000
&gt;&gt;&gt; print ting[2][1]
125.539504822835
</snippet></ROW><ROW><id>18988448</id><snippet>second_vals = [t[1] for t in ting]
</snippet></ROW><ROW><id>18988504</id><snippet>def match(path, actual):
    path = path.strip('/').split('/')
    actual = iter(actual.strip('/').split('/'))
    for pathitem in path:
        for item in actual:
            if pathitem == item:
                break
        else:
            # The for-loop never breaked, so pathitem was never found
            return False
    return True

q1 = '/foo/baz/myfile.txt'
q2 = '/bar/foo/myfile.txt'
p1 = '/foo/bar/bar/myfile.txt'
p2 = '/bar/bar/baz/myfile.txt'
actual = '/foo/bar/baz/bar/myfile.txt'

print(match(q1, actual))
# True

print(match(q2, actual))
# False

print(match(p1, actual))
# True

print(match(p2, actual))
# False
</snippet></ROW><ROW><id>18988512</id><snippet>numpy.polyfit</snippet></ROW><ROW><id>18988512</id><snippet>import numpy as np

x = np.array([0,1,2,3,4,5])
y = np.array([2.1, 2.9, 4.15, 4.98, 5.5, 6])

z = np.polyfit(x, y, 1)
p = np.poly1d(z)

#plotting
import matplotlib.pyplot as plt
xp = np.linspace(-1, 6, 100)
plt.plot(x, y, '.', xp, p(xp))
plt.show()
</snippet></ROW><ROW><id>18988564</id><snippet>pathlength</snippet></ROW><ROW><id>18988564</id><snippet>def pathlength(x, y):
    return 42   # The length is 42 miles
</snippet></ROW><ROW><id>18988564</id><snippet>x,y</snippet></ROW><ROW><id>18988564</id><snippet>length = pathlength([0, 7, 9, 5, 2, 0], [0, 1, 3, 2, 2, 0])
</snippet></ROW><ROW><id>18988564</id><snippet>x</snippet></ROW><ROW><id>18988564</id><snippet>y</snippet></ROW><ROW><id>18988564</id><snippet>1</snippet></ROW><ROW><id>18988564</id><snippet>n-1</snippet></ROW><ROW><id>18988564</id><snippet>x[1:]  # The X(i) values from 1 to n-1
x[:-1] # The X(i-1) values from 1-1 to n-1-1
</snippet></ROW><ROW><id>18988564</id><snippet>y</snippet></ROW><ROW><id>18988564</id><snippet>zip</snippet></ROW><ROW><id>18988564</id><snippet>zip(x[1:], x[:-1], y[1:], y[:-1])
</snippet></ROW><ROW><id>18988564</id><snippet>zip</snippet></ROW><ROW><id>18988564</id><snippet>i</snippet></ROW><ROW><id>18988564</id><snippet>i</snippet></ROW><ROW><id>18988564</id><snippet>for xi, xi1, yi, yi1 in zip(x[1:], x[:-1], y[1:], y[:-1]):
    pass
</snippet></ROW><ROW><id>18988564</id><snippet>total_distance = 0
for xi, xi1, yi, yi1 in zip(x[1:], x[:-1], y[1:], y[:-1]):
    leg_distance = ((xi-xi1)**2+(yi-yi1)**2)**.5
    total_distance = total_distance + leg_distance
</snippet></ROW><ROW><id>18988564</id><snippet>def pathlength(x, y):
    total_distance = 0
    for xi, xi1, yi, yi1 in zip(x[1:], x[:-1], y[1:], y[:-1]):
        leg_distance = ((xi-xi1)**2+(yi-yi1)**2)**.5
        total_distance = total_distance + leg_distance
    return total_distance
</snippet></ROW><ROW><id>18988564</id><snippet>python list comprehension</snippet></ROW><ROW><id>18988564</id><snippet>python generators</snippet></ROW><ROW><id>18988564</id><snippet>def pathlength(x,y):
    return sum(
        ((xi-xi1)**2+(yi-yi1)**2)**.5 
        for (xi, xi1, yi, yi1) in zip(x[1:], x[:-1], y[1:], y[:-1]))
</snippet></ROW><ROW><id>18988601</id><snippet>Battle</snippet></ROW><ROW><id>18988601</id><snippet>Tournament</snippet></ROW><ROW><id>18988601</id><snippet>Battle</snippet></ROW><ROW><id>18988601</id><snippet>models.ForeignKey('Tournament')</snippet></ROW><ROW><id>18988601</id><snippet>guild_one</snippet></ROW><ROW><id>18988601</id><snippet>guild_two</snippet></ROW><ROW><id>18988601</id><snippet>Guild</snippet></ROW><ROW><id>18988601</id><snippet>.values_list()</snippet></ROW><ROW><id>18988601</id><snippet>&gt;&gt;&gt; from django.db.models import Q
&gt;&gt;&gt; Guild.objects.filter(Q(guild_one__tournament=t) |\
... Q(guild_two__tournament=t)).values_list('name', flat=True)
[u'red', u'blue', u'green', u'black']
</snippet></ROW><ROW><id>18988601</id><snippet>t</snippet></ROW><ROW><id>18988601</id><snippet>Tournament</snippet></ROW><ROW><id>18988662</id><snippet>from binascii import hexlify

hex_image = '0x' + hexlify(myImage)
myTable.create(..., image=hex_image)
</snippet></ROW><ROW><id>18988813</id><snippet>import Queue

def leaves(tree):
    result = []
    queue = Queue.Queue()
    queue.put(tree)
    while not queue.empty():
        node = queue.get()
        if type(node[1]) == tuple:
            for subnode in node[1:]:
                queue.put(subnode)
        else:
            result.append(node[1])
    return result

def makeList(tree):
    if len(tree) == 2:
        return [tree[1]]

    left = tree[1]
    right = tree[2]
    return [leaves(left), leaves(right)]
</snippet></ROW><ROW><id>18988813</id><snippet>exampleData</snippet></ROW><ROW><id>18988829</id><snippet>x = ([1] if conditional else []) + [3, 4]
</snippet></ROW><ROW><id>18988829</id><snippet>&gt;&gt;&gt; conditional = False
&gt;&gt;&gt; ([1] if conditional else []) + [3, 4]
[3, 4]
&gt;&gt;&gt; conditional = True
&gt;&gt;&gt; ([1] if conditional else []) + [3, 4]
[1, 3, 4]
</snippet></ROW><ROW><id>18988829</id><snippet>x = ([1, 2, 3] if conditional else []) + [4, 5, 6]
</snippet></ROW><ROW><id>18988909</id><snippet>import scipy.stats as stats
import matplotlib.pyplot as plt
import numpy as np

maxwell = stats.maxwell
data = maxwell.rvs(loc=0, scale=5, size=10000)

params = maxwell.fit(data, floc=0)
print(params)
# (0, 4.9808603062591041)

plt.hist(data, bins=20, normed=True)
x = np.linspace(0, 25, 100)
plt.plot(x, maxwell.pdf(x, *params), lw=3)
plt.show()
</snippet></ROW><ROW><id>18988909</id><snippet>a</snippet></ROW><ROW><id>18988909</id><snippet>rvs</snippet></ROW><ROW><id>18988909</id><snippet>newdata = maxwell.rvs(*params, size=100)
</snippet></ROW><ROW><id>18988927</id><snippet>isnull</snippet></ROW><ROW><id>18988927</id><snippet>TopicLabel.objects.filter(connection_label__isnull=False)
</snippet></ROW><ROW><id>18989075</id><snippet>os.path.dirname()</snippet></ROW><ROW><id>18989075</id><snippet>input = '/Users/Opus_Magnum/Desktop/list.txt'
input_dir = os.path.dirname(input)
output = 'test_output.txt'
temp_out = os.path.join(input_dir, output)
</snippet></ROW><ROW><id>18989512</id><snippet>dict</snippet></ROW><ROW><id>18989512</id><snippet>&gt;&gt;&gt; p = {k:[x[y] for x in A for y in v] for k, v in patterrnDict.iteritems()}
&gt;&gt;&gt; p[1]
[1, 6]
&gt;&gt;&gt; p[5]
[1, 5, 6, 9]
</snippet></ROW><ROW><id>18989608</id><snippet>CommaSeparatedIntegerField</snippet></ROW><ROW><id>18989608</id><snippet>class ForumPosts(models.Model):
    # ...

    def append_to_path(self, value):
        path_list = self.path.split(',')
        path_list.append(value)
        self.path = ','.join(path_list)
</snippet></ROW><ROW><id>18989608</id><snippet>forumpost.append_to_path(forumpost_id)
forumpost.save() # save will validate if the path is correct
</snippet></ROW><ROW><id>18989675</id><snippet>import numpy as np
import matplotlib.pyplot as plt

data = """100 0.0
      5 500.25
      2 10.0
      4 5.55
      3 950.0
      3 300.25"""

counts = []
values = []

for line in data.split("\n"):
    x, y = line.split()
    values.append(int(x))
    counts.append(float(y))

plt.bar(counts, values)

plt.show()
</snippet></ROW><ROW><id>18989701</id><snippet>plt.imshow(Hmasked.T,extent=extent,interpolation='nearest',origin='lower', aspect='auto')
</snippet></ROW><ROW><id>18989912</id><snippet>import threading

class Server(threading.Thread):
    # some code

    # This is the top level function called by other objects
    def reboot(self):
        # perhaps add a lock
        if not hasattr(self, "_down"):
            self._down = threading.Thread(target=self.__powerDown)
            self._down.start()
            up = threading.Thread(target=self.__powerUp)
            up.start()

    def __powerUp(self):
        if not hasattr(self, "_down"):
            return
        self._down.join()
        # do something
        del self._down
</snippet></ROW><ROW><id>18989986</id><snippet>&lt;thead class="title"&gt;
    ...
    &lt;tr class="sub"&gt;
      ...  
      &lt;td&gt;Home-team&lt;/td&gt;
      &lt;td&gt;&lt;/td&gt;
      &lt;td class="away"&gt;Away-team&lt;/td&gt;
      &lt;td class="broadcast"&gt;Broadcast&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
&lt;/thead&gt;
</snippet></ROW><ROW><id>18989986</id><snippet>awayteamsTd = soup.findAll('td', { "class" : "away" })[1:]
</snippet></ROW><ROW><id>18989986</id><snippet>Dutch KNVB Beker</snippet></ROW><ROW><id>18989986</id><snippet>hometeams = [tag.contents[1] for tag in hometeamsTd if tag.contents[1] != 'Dutch KNVB Beker']
</snippet></ROW><ROW><id>18990065</id><snippet>for cmd in command: os.system(cmd)
</snippet></ROW><ROW><id>18990137</id><snippet>class Rider(models.Model):
    first_name = models.CharField(max_length=30)
    last_name = models.CharField(max_length=30)
    def __unicode__(self):  
        return self.first_name + " " + self.last_name

class Ride(models.Model):
    name = models.CharField(max_length=200)
    meeting_place = models.CharField(max_length=2000)
    description = models.CharField(max_length=2000)
    leader = models.ForeignKey(Rider)
    date = models.DateTimeField('date of ride')
    miles = models.FloatField('scheduled miles')
    def __unicode__(self):  
        return self.name

class Miles(models.Model):
    rider = models.ForeignKey(Rider)
    ride = models.ForeignKey(Ride)
    actual_miles = models.FloatField('actual miles')
    def __unicode__(self):  
        return "%s %s %s" % (self.rider, self.ride, self.actual_miles)
</snippet></ROW><ROW><id>18990137</id><snippet>Ride</snippet></ROW><ROW><id>18990137</id><snippet>ride_</snippet></ROW><ROW><id>18990137</id><snippet>rider_id</snippet></ROW><ROW><id>18990137</id><snippet>rider</snippet></ROW><ROW><id>18990137</id><snippet>ride_id</snippet></ROW><ROW><id>18990147</id><snippet>[(x, lst2[i]) for i, x in enumerate(lst)]
</snippet></ROW><ROW><id>18990147</id><snippet>[(lst[i], lst2[i]) for i in xrange(len(lst))]
</snippet></ROW><ROW><id>18990147</id><snippet>zip</snippet></ROW><ROW><id>18990162</id><snippet>print ("your average is: ", round((scoreSum / count), 2))
#                                            right here ^
</snippet></ROW><ROW><id>18990162</id><snippet>print("your average is: ", round(scoreSum / count, 2))
</snippet></ROW><ROW><id>18990195</id><snippet>Lib/ftplib.py</snippet></ROW><ROW><id>18990195</id><snippet>wget http://www.python.org/ftp/python/2.7.1/Python-2.7.1.tgz
</snippet></ROW><ROW><id>18990195</id><snippet>import</snippet></ROW><ROW><id>18990554</id><snippet>dJSON</snippet></ROW><ROW><id>18990554</id><snippet>utf-8</snippet></ROW><ROW><id>18990554</id><snippet>&gt;&gt;&gt; d = {u'name':u'पाइथन'.encode('utf-8')}
&gt;&gt;&gt; json.dumps(d, encoding='utf-8', ensure_ascii=False)
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
  File "/System/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/json/__init__.py", line 238, in dumps
    **kw).encode(obj)
  File "/System/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/json/encoder.py", line 204, in encode
    return ''.join(chunks)
UnicodeDecodeError: 'ascii' codec can't decode byte 0xe0 in position 1: ordinal not in range(128)
</snippet></ROW><ROW><id>18990554</id><snippet>&gt;&gt;&gt; d = {u'name':u'पाइथन'}
&gt;&gt;&gt; json.dumps(d, encoding='utf-8', ensure_ascii=False)
u'{"name": "\u092a\u093e\u0907\u0925\u0928"}
</snippet></ROW><ROW><id>18990554</id><snippet>&gt;&gt;&gt; d = {'name':u'पाइथन'.encode('utf-8')}
&gt;&gt;&gt; json.dumps(d, encoding='utf-8', ensure_ascii=False)
'{"name": "\xe0\xa4\xaa\xe0\xa4\xbe\xe0\xa4\x87\xe0\xa4\xa5\xe0\xa4\xa8"}'
</snippet></ROW><ROW><id>18990710</id><snippet>import Queue

#somewhere accessible to both:
callback_queue = Queue.Queue()

def from_dummy_thread(func_to_call_from_main_thread):
    callback_queue.put(func_to_call_from_main_thread)

def from_main_thread_blocking():
    callback = callback_queue.get() #blocks until an item is available
    callback()

def from_main_thread_nonblocking():
    while True:
        try:
            callback = callback_queue.get(False) #doesn't block
        except Queue.Empty: #raised when queue is empty
            break
        callback()
</snippet></ROW><ROW><id>18990710</id><snippet>import threading
import time

def print_num(dummyid, n):
    print "From %s: %d" % (dummyid, n)
def dummy_run(dummyid):
    for i in xrange(5):
        from_dummy_thread(lambda: print_num(dummyid, i))
        time.sleep(0.5)

threading.Thread(target=dummy_run, args=("a",)).start()
threading.Thread(target=dummy_run, args=("b",)).start()

while True:
    from_main_thread_blocking()
</snippet></ROW><ROW><id>18990710</id><snippet>From a: 0
From b: 0
From a: 1
From b: 1
From b: 2
From a: 2
From b: 3
From a: 3
From b: 4
From a: 4
</snippet></ROW><ROW><id>18991038</id><snippet>func</snippet></ROW><ROW><id>18991038</id><snippet>none</snippet></ROW><ROW><id>18991038</id><snippet>func(my_list)</snippet></ROW><ROW><id>18991038</id><snippet>print</snippet></ROW><ROW><id>18991092</id><snippet>for tr in soup.findAll('tr', {'class': ['odd', 'even']}):
    home_team = tr.find('td', {'class': 'home'}).text
    if home_team == 'Dutch KNVB Beker':
        continue

    away_team = tr.find('td', {'class': 'away'}).text
    date = ' - '.join([span.text for span in tr.findAll('span', {'class': 'time'})])
    broadcast = tr.find('a', {'class': 'broadcast'})['href']

    print home_team, away_team, date, broadcast
</snippet></ROW><ROW><id>18991092</id><snippet>RKC Waalwijk Heracles 20:45 - 22:45 /broadcast.php?matchid=221553&amp;part=sports
PSV Stormvogels Telstar 18:45 - 20:45 /broadcast.php?matchid=221555&amp;part=sports
Ajax FC Volendam 20:45 - 22:45 /broadcast.php?matchid=221556&amp;part=sports
SC Heerenveen FC Twente 18:45 - 20:45 /broadcast.php?matchid=221558&amp;part=sports
Feyenoord FC Dordrecht 20:45 - 22:45 /broadcast.php?matchid=221559&amp;part=sports
</snippet></ROW><ROW><id>18991186</id><snippet>#!/usr/bin/env perl
use strict;
use warnings;

my $oldtime = "";  # hh:mm:ss for end of long interval
my $oldlineno = 0; # line number in the file of second line
my $oldoffset = 0; # offset in seconds from midnight of second command
my $olddiff = 0;   # time taken for longest command

sub hhmmss
{
    my($time) = @_;
    my(@tm) = (int($time/3600), int($time/60)%60, $time%60);
    return @tm;
}

while (&lt;&gt;)
{
    chomp;
    next unless m/^((\d\d):(\d\d):(\d\d))\s+/;
    my $newoffset = (($2 * 60) + $3) * 60 + $4;
    if ($oldoffset == 0)
    {
        $oldtime = $1;
        $olddiff = 0;
        $oldoffset = $newoffset;
        $oldlineno = $.;
    }
    elsif (($newoffset - $oldoffset) &gt; $olddiff)
    {
        $oldtime = $1;
        $olddiff = $newoffset - $oldoffset;
        $oldoffset = $newoffset;
        $oldlineno = $.;
    }
}

if ($oldoffset != 0)
{
    my $prvlineno = $oldlineno - 1;
    my $newoffset = $oldoffset - $olddiff;
    my(@tm) = hhmmss($newoffset);
    printf "line $prvlineno: %.2d:%.2d:%.2d\n", $tm[0], $tm[1], $tm[2];
    print  "line $oldlineno: $oldtime\n";
    @tm = hhmmss($olddiff);
    printf "diff:   %.2d:%.2d:%.2d\n", $tm[0], $tm[1], $tm[2];
}
</snippet></ROW><ROW><id>18991186</id><snippet>data</snippet></ROW><ROW><id>18991186</id><snippet>dt.pl</snippet></ROW><ROW><id>18991186</id><snippet>17:31:16 line1
17:31:18 line2
17:31:29 line3
17:33:59 line4
18:00:21 line5
18:21:03 line6
18:41:25 line7
19:51:54 line8
19:52:34 line9
</snippet></ROW><ROW><id>18991186</id><snippet>$ for i in $(seq 1 9); do sed ${i}q data | perl dt.pl; done | so
line 0: 17:31:16
line 1: 17:31:16
diff:   00:00:00
line 1: 17:31:16
line 2: 17:31:18
diff:   00:00:02
line 2: 17:31:18
line 3: 17:31:29
diff:   00:00:11
line 3: 17:31:29
line 4: 17:33:59
diff:   00:02:30
line 4: 17:33:59
line 5: 18:00:21
diff:   00:26:22
line 4: 17:33:59
line 5: 18:00:21
diff:   00:26:22
line 6: 18:00:21
line 7: 18:41:25
diff:   00:41:04
line 7: 18:41:25
line 8: 19:51:54
diff:   01:10:29
line 7: 18:41:25
line 8: 19:51:54
diff:   01:10:29
$
</snippet></ROW><ROW><id>18991186</id><snippet>$olddiff</snippet></ROW><ROW><id>18991201</id><snippet>INSTALLED_APPS</snippet></ROW><ROW><id>18991246</id><snippet>'title'</snippet></ROW><ROW><id>18991246</id><snippet>None</snippet></ROW><ROW><id>18991246</id><snippet>'title'</snippet></ROW><ROW><id>18991246</id><snippet>%if 'title' in message['contact'] and message['contact']['title'] is not None:
    ${message['contact']['title']}
%endif
</snippet></ROW><ROW><id>18991246</id><snippet>%if 'title' in message['contact']:
    ${message['contact']['title'] or ''}
%endif
</snippet></ROW><ROW><id>18991246</id><snippet>${message['contact'].get('title', None) or ''}
</snippet></ROW><ROW><id>18991331</id><snippet>def run(project_dir, main_class, specific_args):
    classpath = []

    for root, dirs, files in os.walk(project_dir):
        if os.path.basename(root) not in ('lib', 'properties'):
            continue

        has_properties = False
        for f in files:
            if f.endswith('.jar'):
                classpath.append(os.path.join(root, f))
            if f.endswith('.properties'):
                has_properties = True
        if has_properties:
            classpath.append(root)

    classpath_augment = ':'.join(classpath)

    print java_command, classpath_augment, main_class, specific_args
</snippet></ROW><ROW><id>18991331</id><snippet>lib</snippet></ROW><ROW><id>18991331</id><snippet>properties</snippet></ROW><ROW><id>18991493</id><snippet>&gt;&gt;&gt; vv = [10,20,30,40,50]
&gt;&gt;&gt; vv[3]
40
</snippet></ROW><ROW><id>18991493</id><snippet>&gt;&gt;&gt; vv = [v-1 for v in vv]
&gt;&gt;&gt; vv
[9, 19, 29, 39, 49]
&gt;&gt;&gt; vv[3]
39
</snippet></ROW><ROW><id>18991493</id><snippet>&gt;&gt;&gt; # first, let's make a test dictionary
&gt;&gt;&gt; from string import ascii_lowercase
&gt;&gt;&gt; d = {k: i for i, k in enumerate(ascii_lowercase[:10])}
&gt;&gt;&gt; d
{'a': 0, 'c': 2, 'b': 1, 'e': 4, 'd': 3, 'g': 6, 'f': 5, 'i': 8, 'h': 7, 'j': 9}
&gt;&gt;&gt; d['d']
3
</snippet></ROW><ROW><id>18991493</id><snippet>&gt;&gt;&gt; d = {k: v-1 for k,v in d.iteritems()}
&gt;&gt;&gt; d['d']
2
</snippet></ROW><ROW><id>18991624</id><snippet>Message</snippet></ROW><ROW><id>18991624</id><snippet>AboutMe</snippet></ROW><ROW><id>18991624</id><snippet>request.session["AboutMe_id"]</snippet></ROW><ROW><id>18991624</id><snippet>KeyError</snippet></ROW><ROW><id>18991624</id><snippet>get</snippet></ROW><ROW><id>18991624</id><snippet>None</snippet></ROW><ROW><id>18991624</id><snippet>AboutMe.objects.get(pk=myid)</snippet></ROW><ROW><id>18991624</id><snippet>def contact(request):
    myid = request.session.get("AboutMe_id")
    if not myid:
        # session has expired
        return redirect('/')
    try:
        sender = AboutMe.objects.get(pk=myid)
    except AbouMe.DoesNotExist:
        # Invalid id in session
        del request.session['AboutMe_id']
        return redirect('/')

    messageForm = ContactForm(request.POST or {})
    if request.method == "POST":      
        if messageForm.is_valid():
            message = messageForm.save(commit=False)
            message.MyRead = False
            message.MyDeleted = False
            message.MySpam = False
            message.MyDate = datetime.date.today()
            message.MyTime = timezone.now()
            message.MyToID = 1
            message.MyFromID = sender
            message.save()
            return redirect('/')
        else:
            # form is not valid
            return render(request, "contact.html", {'form': messageForm})
     else:
         # return empty form
         return render(request, 'contact.html', {'form': messageForm}) 
</snippet></ROW><ROW><id>18992172</id><snippet>Figure.savefig()</snippet></ROW><ROW><id>18992172</id><snippet>ax = s.hist()  # s is an instance of Series
fig = ax.get_figure()
fig.savefig('/path/to/figure.pdf')
</snippet></ROW><ROW><id>18992172</id><snippet>pdf</snippet></ROW><ROW><id>18992172</id><snippet>pyplot</snippet></ROW><ROW><id>18992172</id><snippet>savefig</snippet></ROW><ROW><id>18992172</id><snippet>s.hist()
savefig('path/to/figure.pdf')  # saves the current figure
</snippet></ROW><ROW><id>18992283</id><snippet>multiprocessing</snippet></ROW><ROW><id>18992283</id><snippet>line_profiler</snippet></ROW><ROW><id>18992283</id><snippet>kernprof</snippet></ROW><ROW><id>18992441</id><snippet>AttributeError</snippet></ROW><ROW><id>18992441</id><snippet>boost::python::enum_</snippet></ROW><ROW><id>18992441</id><snippet>enum_</snippet></ROW><ROW><id>18992441</id><snippet>int</snippet></ROW><ROW><id>18992441</id><snippet>name</snippet></ROW><ROW><id>18992441</id><snippet>name</snippet></ROW><ROW><id>18992441</id><snippet>PyImport_AppendInittab</snippet></ROW><ROW><id>18992441</id><snippet>PyImport_AppendInittab("example", &amp;initexample);
...
boost::python::object example = boost::python::import("example");
</snippet></ROW><ROW><id>18992441</id><snippet>example</snippet></ROW><ROW><id>18992441</id><snippet>main</snippet></ROW><ROW><id>18992441</id><snippet>main</snippet></ROW><ROW><id>18992441</id><snippet>#include &lt;iostream&gt;
#include &lt;boost/python.hpp&gt;

/// @brief Mockup class with a nested enum.
struct TestClass
{
  /// @brief Mocked enum.
  enum Motion
  {
    walk,
    bike 
  };

  // @brief Mocked enum.
  enum Color
  {
    red,
    blue
  };
};

/// @brief Python example module.
BOOST_PYTHON_MODULE(example)
{
  namespace python = boost::python;
  python::enum_&lt;TestClass::Motion&gt;("Motion")
    .value("walk", TestClass::walk)
    .value("bike", TestClass::bike)
    ;
}   

int main()
{
  PyImport_AppendInittab("example", &amp;initexample); // Add example to built-in.
  Py_Initialize(); // Start interpreter.

  // Create the __main__ module.
  namespace python = boost::python;
  python::object main = python::import("__main__");
  python::object main_namespace = main.attr("__dict__");

  try
  {
    python::scope scope(main); // Force main scope

    // Expose TestClass::Color as Color
    python::enum_&lt;TestClass::Color&gt;("Color")
      .value("red", TestClass::red)
      .value("blue", TestClass::blue)
      ;

    // Print values of Color enumeration.
    python::exec(
      "print Color.values",
      main_namespace, main_namespace);

    // Get a handle to the Color enumeration.
    python::object color = main_namespace["Color"];
    python::object blue  = color.attr("blue");

    if (TestClass::blue == python::extract&lt;TestClass::Color&gt;(blue))
      std::cout &lt;&lt; "blue enum values matched." &lt;&lt; std::endl;

    // Import example module into main namespace.
    main_namespace["example"] = python::import("example");

    // Print the values of the Motion enumeration.
    python::exec(
      "print example.Motion.values",
      main_namespace, main_namespace);

    // Check if the Python enums match the C++ enum values.
    if (TestClass::bike == python::extract&lt;TestClass::Motion&gt;(
          main_namespace["example"].attr("Motion").attr("bike")))
      std::cout &lt;&lt; "bike enum values matched." &lt;&lt; std::endl;
  }
  catch (const python::error_already_set&amp;)
  {
    PyErr_Print();
  }
}
</snippet></ROW><ROW><id>18992441</id><snippet>{0: __main__.Color.red, 1: __main__.Color.blue}
blue enum values matched.
{0: example.Motion.walk, 1: example.Motion.bike}
bike enum values matched.
</snippet></ROW><ROW><id>18992773</id><snippet>&lt;tr&gt;</snippet></ROW><ROW><id>18992773</id><snippet>station_name = ''
for tr in soup.findAll('tr'):
    if tr['class'] == 'broadcast':
        station_name = tr.findAll('td')[1].text
    else:
        # Your current extraction code
        print stationName, kindStream, ....
</snippet></ROW><ROW><id>18992882</id><snippet>http</snippet></ROW><ROW><id>18992882</id><snippet>from flask import session

class  ma_class(FlaskView):
  route_base = '/'


@route('/load')
def load(self):

  session['state'] = True
  return 'load : ok'

@route('/stuff')
def do_something(self)
   if 'state' not in session:
       return 'you must invoke load method' 
</snippet></ROW><ROW><id>18992934</id><snippet>class NewDateTime(DateTime):
    def to_python(self, val):
        if isinstance(val, basestring):
            val = struct.unpack('!Q', val)[0] / 1000.0
        return super(NewDateTime, self).to_python(val)
</snippet></ROW><ROW><id>18993055</id><snippet>In [1]: s1 = pd.Series([1, np.nan, 3, 4, 5, np.nan])

In [2]: s2 = pd.Series([7, 2, 3, np.nan, np.nan])
</snippet></ROW><ROW><id>18993055</id><snippet>In [3]: s2[s2.notnull()]
Out[3]:
0    7
1    2
2    3
dtype: float64
</snippet></ROW><ROW><id>18993055</id><snippet>In [4]: s1.update(s2[s2.notnull()])

In [5]: s1
Out[5]:
0     7
1     2
2     3
3     4
4     5
5   NaN
dtype: float64
</snippet></ROW><ROW><id>18993064</id><snippet>import string
my_input = "V 1 -2 3 4 5 7 8 9 10"
doctored_input = map(int,my_input.split()[1:])

print dict(zip(string.ascii_uppercase,doctored_input))
#result : {'A': 1, 'C': 3, 'B': -2, 'E': 5, 'D': 4, 'G': 8, 'F': 7, 'I': 10, 'H': 9}
</snippet></ROW><ROW><id>18993196</id><snippet>borderwidth</snippet></ROW><ROW><id>18993196</id><snippet>pady</snippet></ROW><ROW><id>18993196</id><snippet>highlightthickness</snippet></ROW><ROW><id>18993223</id><snippet>content = """\
Date/Time Sep 12 11:13:42

Date/Time   Sep 12 11:13:42

Date/Time
Sep 12 11:13:42

Date/Time



Sep 12 11:13:42"""

import re

re.findall("(?&lt;=Date/Time\s)(\r*[\w :]+)", content)
#&gt;&gt;&gt; ['Sep 12 11:13:42', '  Sep 12 11:13:42', 'Sep 12 11:13:42']
</snippet></ROW><ROW><id>18993223</id><snippet>\n</snippet></ROW><ROW><id>18993223</id><snippet>\r</snippet></ROW><ROW><id>18993223</id><snippet>\s</snippet></ROW><ROW><id>18993262</id><snippet>DeferredLock</snippet></ROW><ROW><id>18993262</id><snippet>class NetworkCounter(object):
    def __init__(self):
        self._count = 0

    def next(self):
        self._count += 1
        recording = self._record(self._count)
        def recorded(ignored):
            return self._count
        recording.addCallback(recorded)
        return recording

    def _record(self, value):
        return http.GET(
            b"http://example.com/record-count?value=%d" % (value,))
</snippet></ROW><ROW><id>18993262</id><snippet>next</snippet></ROW><ROW><id>18993262</id><snippet>from __future__ import print_function

counter = NetworkCounter()
d1 = counter.next()
d2 = counter.next()

d1.addCallback(print, "d1")
d2.addCallback(print, "d2")
</snippet></ROW><ROW><id>18993262</id><snippet>2 d1
2 d2
</snippet></ROW><ROW><id>18993262</id><snippet>NetworkCounter.next</snippet></ROW><ROW><id>18993262</id><snippet>_count</snippet></ROW><ROW><id>18993262</id><snippet>DeferredLock</snippet></ROW><ROW><id>18993262</id><snippet>class NetworkCounter(object):
    def __init__(self):
        self._count = 0
        self._lock = DeferredLock()

    def next(self):
        return self._lock.run(self._next)

    def _next(self):
        self._count += 1
        recording = self._record(self._count)
        def recorded(ignored):
            return self._count
        recording.addCallback(recorded)
        return recording

    def _record(self, value):
        return http.GET(
            b"http://example.com/record-count?value=%d" % (value,))
</snippet></ROW><ROW><id>18993262</id><snippet>NetworkCounter</snippet></ROW><ROW><id>18993262</id><snippet>DeferredLock</snippet></ROW><ROW><id>18993262</id><snippet>DeferredLock</snippet></ROW><ROW><id>18993262</id><snippet>DeferredLock</snippet></ROW><ROW><id>18993262</id><snippet>NetworkCounter</snippet></ROW><ROW><id>18993262</id><snippet>DeferredLock</snippet></ROW><ROW><id>18993262</id><snippet>DeferredLock.run</snippet></ROW><ROW><id>18993262</id><snippet>_next</snippet></ROW><ROW><id>18993262</id><snippet>NetworkCounter</snippet></ROW><ROW><id>18993262</id><snippet>NetworkCounter</snippet></ROW><ROW><id>18993262</id><snippet>DeferredLock</snippet></ROW><ROW><id>18993262</id><snippet>DeferredLock</snippet></ROW><ROW><id>18993262</id><snippet>DeferredLock</snippet></ROW><ROW><id>18993262</id><snippet>Deferred</snippet></ROW><ROW><id>18993262</id><snippet>Deferred</snippet></ROW><ROW><id>18993262</id><snippet>http.GET</snippet></ROW><ROW><id>18993262</id><snippet>Deferred</snippet></ROW><ROW><id>18993262</id><snippet>Deferred</snippet></ROW><ROW><id>18993262</id><snippet>DeferredLock</snippet></ROW><ROW><id>18993262</id><snippet>DeferredLock.run</snippet></ROW><ROW><id>18993262</id><snippet>Deferred</snippet></ROW><ROW><id>18993262</id><snippet>DeferredLock.run</snippet></ROW><ROW><id>18993262</id><snippet>Deferred</snippet></ROW><ROW><id>18993262</id><snippet>Deferred</snippet></ROW><ROW><id>18993262</id><snippet>DeferredLock.run</snippet></ROW><ROW><id>18993262</id><snippet>Deferred</snippet></ROW><ROW><id>18993262</id><snippet>NetworkCounter</snippet></ROW><ROW><id>18993262</id><snippet>class NetworkCounter(object):
    def __init__(self):
        self._count = 0

    def next(self):
        self._count += 1
        result = self._count
        recording = self._record(self._count)
        def recorded(ignored):
            return result
        recording.addCallback(recorded)
        return recording

    def _record(self, value):
        return http.GET(
            b"http://example.com/record-count?value=%d" % (value,))
</snippet></ROW><ROW><id>18993262</id><snippet>NetworkCounter.next</snippet></ROW><ROW><id>18993262</id><snippet>NetworkCounter</snippet></ROW><ROW><id>18993262</id><snippet>NetworkCounter.next</snippet></ROW><ROW><id>18993262</id><snippet>self._count</snippet></ROW><ROW><id>18993262</id><snippet>next</snippet></ROW><ROW><id>18993262</id><snippet>NetworkCounter</snippet></ROW><ROW><id>18993262</id><snippet>self._count += 1</snippet></ROW><ROW><id>18993262</id><snippet>result = self._count</snippet></ROW><ROW><id>18993262</id><snippet>DeferredLock</snippet></ROW><ROW><id>18993262</id><snippet>DeferredLock</snippet></ROW><ROW><id>18993342</id><snippet>matplotlib</snippet></ROW><ROW><id>18993342</id><snippet>rcParams['text.usetex'] = True
</snippet></ROW><ROW><id>18993342</id><snippet>text.usetex: True 
</snippet></ROW><ROW><id>18993342</id><snippet>matplotlibrc</snippet></ROW><ROW><id>18993384</id><snippet>str.rsplit()</snippet></ROW><ROW><id>18993384</id><snippet>str.count()</snippet></ROW><ROW><id>18993384</id><snippet>&gt;&gt;&gt; s = '11000000101010000000010000000000'
&gt;&gt;&gt; len(s.rsplit('1', 1)[-1])
10
</snippet></ROW><ROW><id>18993405</id><snippet>[-1, 1]</snippet></ROW><ROW><id>18993405</id><snippet>(f*g)'= f'*g = f*g'</snippet></ROW><ROW><id>18993405</id><snippet>*</snippet></ROW><ROW><id>18993405</id><snippet>import numpy as np
from scipy import ndimage
import matplotlib.pyplot as plt

#Data:
x = np.linspace(0,2*np.pi,100)
f = np.sin(x) + .02*(np.random.rand(100)-.5)

#Normalization:
dx = x[1] - x[0] # use np.diff(x) if x is not uniform
dxdx = dx**2

#First derivatives:
df = np.diff(f) / dx
cf = np.convolve(f, [1,-1]) / dx
gf = ndimage.gaussian_filter1d(f, sigma=1, order=1, mode='wrap') / dx

#Second derivatives:
ddf = np.diff(f, 2) / dxdx
ccf = np.convolve(f, [1, -2, 1]) / dxdx
ggf = ndimage.gaussian_filter1d(f, sigma=1, order=2, mode='wrap') / dxdx

#Plotting:
plt.figure()
plt.plot(x, f, 'k', lw=2, label='original')
plt.plot(x[:-1], df, 'r.', label='np.diff, 1')
plt.plot(x, cf[:-1], 'r--', label='np.convolve, [1,-1]')
plt.plot(x, gf, 'r', label='gaussian, 1')
plt.plot(x[:-2], ddf, 'g.', label='np.diff, 2')
plt.plot(x, ccf[:-2], 'g--', label='np.convolve, [1,-2,1]')
plt.plot(x, ggf, 'g', label='gaussian, 2')
</snippet></ROW><ROW><id>18993405</id><snippet>np.gradient</snippet></ROW><ROW><id>18993405</id><snippet>scipy.ndimage</snippet></ROW><ROW><id>18993405</id><snippet>from scipy import ndimage

x = np.linspace(0,2*np.pi,100)
sine = np.sin(x)

im = sine * sine[...,None]
d1 = ndimage.gaussian_filter(im, sigma=5, order=1, mode='wrap')
d2 = ndimage.gaussian_filter(im, sigma=5, order=2, mode='wrap')

plt.figure()

plt.subplot(131)
plt.imshow(im)
plt.title('original')

plt.subplot(132)
plt.imshow(d1)
plt.title('first derivative')

plt.subplot(133)
plt.imshow(d2)
plt.title('second derivative')
</snippet></ROW><ROW><id>18993405</id><snippet>gaussian_filter1d</snippet></ROW><ROW><id>18993405</id><snippet>imx = im * x
d2_0 = ndimage.gaussian_filter1d(imx, axis=0, sigma=5, order=2, mode='wrap')
d2_1 = ndimage.gaussian_filter1d(imx, axis=1, sigma=5, order=2, mode='wrap')

plt.figure()
plt.subplot(131)
plt.imshow(imx)
plt.title('original')
plt.subplot(132)
plt.imshow(d2_0)
plt.title('derivative along axis 0')
plt.subplot(133)
plt.imshow(d2_1)
plt.title('along axis 1')
</snippet></ROW><ROW><id>18993405</id><snippet>d2_mag = np.sqrt(d2_0**2 + d2_1**2)
</snippet></ROW><ROW><id>18993475</id><snippet>[</snippet></ROW><ROW><id>18993475</id><snippet>)</snippet></ROW><ROW><id>18993475</id><snippet>]</snippet></ROW><ROW><id>18993475</id><snippet>()</snippet></ROW><ROW><id>18993475</id><snippet>&gt;&gt;&gt; import json
&gt;&gt;&gt; json.loads('[{"name":"same"}]')
[{u'name': u'same'}]
</snippet></ROW><ROW><id>18993519</id><snippet>so.fields.all().values('name', 'value')
</snippet></ROW><ROW><id>18993519</id><snippet>s_objs = Setting.objects.filter(setting_type='d').prefetch_related('fields')
</snippet></ROW><ROW><id>18993556</id><snippet>if False:
    print 'hi'

"""1 child"""
elif True:
    print 'sdf'
</snippet></ROW><ROW><id>18993556</id><snippet>if False:
    print 'hi'
elif True:
    print 'sdf'
</snippet></ROW><ROW><id>18993556</id><snippet>#</snippet></ROW><ROW><id>18993556</id><snippet>if False:
    print 'hi'
# 1 child
elif True:
    print 'sdf'
</snippet></ROW><ROW><id>18993713</id><snippet>self.request = kwargs.pop('request', None)
</snippet></ROW><ROW><id>18993713</id><snippet>form = EventEditForm(request.POST, request=request) # or self.request for a class based view
</snippet></ROW><ROW><id>18993775</id><snippet>;</snippet></ROW><ROW><id>18993856</id><snippet>[buildout]
parts = pyside-interpreter
        pyside-postinstall

[pyside-interpreter] 
recipe = zc.recipe.egg 
interpreter = pyside-python
eggs = PySide

[pyside-postinstall] 
recipe = plone.recipe.command
command = ${buildout:directory}/bin/pyside_postinstall.py -install
</snippet></ROW><ROW><id>18993856</id><snippet>pyside_postinstall.py</snippet></ROW><ROW><id>18993856</id><snippet>rpath</snippet></ROW><ROW><id>18993856</id><snippet>zc.recipe.egg</snippet></ROW><ROW><id>18993856</id><snippet>zc.buildout</snippet></ROW><ROW><id>18993856</id><snippet>setup</snippet></ROW><ROW><id>18993900</id><snippet>sigmoid( dot([val1, val2], lr.coef_) + lr.intercept_ ) 
</snippet></ROW><ROW><id>18994056</id><snippet>1,2,3
4,5,6
7,8,9
10,11,12
13,14,15
16,17,18
19,20,21
</snippet></ROW><ROW><id>18994056</id><snippet>import csv
import numpy as np

desired=[1,3,5]
with open('/tmp/test.csv', 'r') as fin:
    reader=csv.reader(fin)
    result=[[int(s) for s in row] for i,row in enumerate(reader) if i in desired]

print(np.array(result))   
</snippet></ROW><ROW><id>18994056</id><snippet>[[ 4  5  6]
 [10 11 12]
 [16 17 18]]
</snippet></ROW><ROW><id>18994347</id><snippet>try/except</snippet></ROW><ROW><id>18994347</id><snippet>try/except</snippet></ROW><ROW><id>18994347</id><snippet>for infile in listing:
    try:
        if infile.startswith("ABC"):
            fo = open(infile,"r")
            for line in fo:
                if line.startswith("REVIEW"):
                    print infile
            fo.close()
    except:
        pass
</snippet></ROW><ROW><id>18994347</id><snippet>with</snippet></ROW><ROW><id>18994347</id><snippet>open()</snippet></ROW><ROW><id>18994347</id><snippet>for infile in listing:
    try:
        if infile.startswith("ABC"):
            with open(infile,"r") as fo
                for line in fo:
                    if line.startswith("REVIEW"):
                        print infile
    except:
        pass
</snippet></ROW><ROW><id>18994347</id><snippet>with</snippet></ROW><ROW><id>18994582</id><snippet>map/xmap</snippet></ROW><ROW><id>18994582</id><snippet>lambda</snippet></ROW><ROW><id>18994582</id><snippet>A.m</snippet></ROW><ROW><id>18994582</id><snippet>&gt;&gt;&gt; %timeit for obj in lst: obj.m()
100000 loops, best of 3: 2.99 µs per loop
&gt;&gt;&gt; %timeit [obj.m() for obj in lst]
100000 loops, best of 3: 3.5 µs per loop
&gt;&gt;&gt; %timeit xmap(lambda obj: obj.m(), lst)
100000 loops, best of 3: 5.69 µs per loop
&gt;&gt;&gt; %timeit xmap(A.m, lst)
100000 loops, best of 3: 3.32 µs per loop
</snippet></ROW><ROW><id>18994582</id><snippet>xmap</snippet></ROW><ROW><id>18994582</id><snippet>&gt;&gt;&gt; lst = [A() for i in xrange(10**3)]
&gt;&gt;&gt; %timeit for obj in lst: obj.m()
1000 loops, best of 3: 198 µs per loop
&gt;&gt;&gt; %timeit [obj.m() for obj in lst]
1000 loops, best of 3: 216 µs per loop
&gt;&gt;&gt; %timeit xmap(lambda obj: obj.m(), lst)
1000 loops, best of 3: 353 µs per loop
&gt;&gt;&gt; %timeit xmap(A.m, lst)
10000 loops, best of 3: 189 µs per loop
</snippet></ROW><ROW><id>18994897</id><snippet>forbid</snippet></ROW><ROW><id>18994897</id><snippet>O(f+k)</snippet></ROW><ROW><id>18994897</id><snippet>O(f+k)</snippet></ROW><ROW><id>18994897</id><snippet>forbid</snippet></ROW><ROW><id>18994897</id><snippet>forbid</snippet></ROW><ROW><id>18994897</id><snippet>O(k⋅n/(n-(f+k)))</snippet></ROW><ROW><id>18994897</id><snippet>O(k)</snippet></ROW><ROW><id>18994897</id><snippet>f+k</snippet></ROW><ROW><id>18994897</id><snippet>n</snippet></ROW><ROW><id>18994897</id><snippet>forbid</snippet></ROW><ROW><id>18994897</id><snippet>import random
def sample_gen(n, forbid):
    state = dict()
    track = dict()
    for (i, o) in enumerate(forbid):
        x = track.get(o, o)
        t = state.get(n-i-1, n-i-1)
        state[x] = t
        track[t] = x
        state.pop(n-i-1, None)
        track.pop(o, None)
    del track
    for remaining in xrange(n-len(forbid), 0, -1):
        i = random.randrange(remaining)
        yield state.get(i, i)
        state[i] = state.get(remaining - 1, remaining - 1)
        state.pop(remaining - 1, None)
</snippet></ROW><ROW><id>18994897</id><snippet>gen = sample_gen(10, [1, 2, 4, 8])
print gen.next()
print gen.next()
print gen.next()
print gen.next()
</snippet></ROW><ROW><id>18994932</id><snippet>try:
    while True:
        IDs2=UpdatePoints(value,IDs2)
        time.sleep(10)
except KeyboardInterrupt:
    print 'interrupted!'
</snippet></ROW><ROW><id>18994948</id><snippet>connect</snippet></ROW><ROW><id>18994948</id><snippet>def Login(self):
    global user_barcode
    self.login_attempts = 1
    self.lineEditScanBarcode.returnPressed.connect(LoginAttempt)

def LoginAttempt(self):
    user_barcode = self.lineEditScanBarcode.text()
    # all the stuff that validates the barcode
    if valid:
        self.LoggedIn()
        return
    print("Unauthorised access request.")
    self.login_attempts += 1
    self.lineEditScanBarcode.clear()
    self.LCDLoginAttempt.display(self.login_attempts-1)
    if self.login_attempts == 4:
        print("Sorry, you are not an authorised user of this system. Please contact the system administrator for further clarification, or if you feel this is an error.")
        # probably want to do something here... disconnect the signal? quit?
</snippet></ROW><ROW><id>18994948</id><snippet>print</snippet></ROW><ROW><id>18995003</id><snippet>.message_from_string</snippet></ROW><ROW><id>18995003</id><snippet>BeautifulSoup()</snippet></ROW><ROW><id>18995003</id><snippet>soup = BeautifulSoup(str(html))</snippet></ROW><ROW><id>18995003</id><snippet>soup = BeautifulSoup(unicode(html))</snippet></ROW><ROW><id>18995694</id><snippet>for item in foo:
    bar(item)
</snippet></ROW><ROW><id>18995694</id><snippet>gen = (bar(item) for item in foo)</snippet></ROW><ROW><id>18995694</id><snippet>itertools.imap</snippet></ROW><ROW><id>18995694</id><snippet>consume</snippet></ROW><ROW><id>18995774</id><snippet>%</snippet></ROW><ROW><id>18995774</id><snippet>//</snippet></ROW><ROW><id>18995774</id><snippet>**</snippet></ROW><ROW><id>18995774</id><snippet>&gt;&gt;&gt; l = 1932319
&gt;&gt;&gt; l // (10**3) % (10**2)
32
</snippet></ROW><ROW><id>18995774</id><snippet>==</snippet></ROW><ROW><id>18995811</id><snippet>cp</snippet></ROW><ROW><id>18995811</id><snippet>cat</snippet></ROW><ROW><id>18995811</id><snippet>cp: error reading ‘CATALOGUE.ods’: Input/output error</snippet></ROW><ROW><id>18995811</id><snippet>veto oplock files = /*.xlsx/</snippet></ROW><ROW><id>18996060</id><snippet>n</snippet></ROW><ROW><id>18996060</id><snippet>def isPrime(n):
    for i in xrange(2,n-1):
        if n % i == 0:
            return False
    return True

largest = 0
n = 600851475143
for i in xrange(2,n-1):
    print 'Checking whether %d divides %d' % (i,n)
    if isPrime(i) and n % i == 0:
        largest = i
        n = n / i
        continue

print("The largest prime factor is", largest)
</snippet></ROW><ROW><id>18996060</id><snippet>n</snippet></ROW><ROW><id>18996060</id><snippet>n = n / i
if n==1:
    break
continue
</snippet></ROW><ROW><id>18996460</id><snippet> readFlags = win32con.FILE_NOTIFY_CHANGE_FILE_NAME  | \
        win32con.FILE_NOTIFY_CHANGE_DIR_NAME   | \
        win32con.FILE_NOTIFY_CHANGE_ATTRIBUTES | \
        win32con.FILE_NOTIFY_CHANGE_SIZE       | \
        win32con.FILE_NOTIFY_CHANGE_LAST_WRITE | \
        win32con.FILE_NOTIFY_CHANGE_SECURITY
# Wait for new data and call ProcessNewData for each new chunk that's written
while 1:
    # Wait for a change to occur
    results = win32file.ReadDirectoryChangesW (
                                               hDir,
                                               1024,
                                               False,
                                               readFlags,
                                               None
                                               )
</snippet></ROW><ROW><id>18996474</id><snippet>self.__db_conn.cursor.execute("INSERT INTO TABLE VALUES ('%s')" % json.dumps(your_dict)
</snippet></ROW><ROW><id>18996474</id><snippet>row = db.conn.fetchone(.....)
your_dict = json.loads(row[...])
</snippet></ROW><ROW><id>18996494</id><snippet>c.send(3)</snippet></ROW><ROW><id>18996494</id><snippet>print c.send(3)</snippet></ROW><ROW><id>18996820</id><snippet>url(r'^snippets/$', snippets.views.SnippetListView.as_view()),
</snippet></ROW><ROW><id>18996948</id><snippet>In [1]: df = pd.DataFrame([[1, 2], [3, 4]], columns=['a', 'b'])

In [2]: df
Out[2]: 
   a  b
0  1  2
1  3  4

In [3]: from collections import OrderedDict

In [4]: df.apply(OrderedDict)
Out[4]: 
   a  b
0  1  2
1  3  4
</snippet></ROW><ROW><id>18996948</id><snippet>In [5]: [OrderedDict(row) for i, row in df.iterrows()]
Out[5]: [OrderedDict([('a', 1), ('b', 2)]), OrderedDict([('a', 3), ('b', 4)])]
</snippet></ROW><ROW><id>18996948</id><snippet>In [6]: (OrderedDict(row) for i, row in df.iterrows())
Out[6]: &lt;generator object &lt;genexpr&gt; at 0x10466da50&gt;
</snippet></ROW><ROW><id>18997205</id><snippet>ops = bytearray(i for i in range(256))
</snippet></ROW><ROW><id>18998019</id><snippet>L[0]</snippet></ROW><ROW><id>18998019</id><snippet>L</snippet></ROW><ROW><id>18998019</id><snippet>a</snippet></ROW><ROW><id>18998019</id><snippet>a = L[0]</snippet></ROW><ROW><id>18998019</id><snippet>a</snippet></ROW><ROW><id>18998019</id><snippet>L[0]</snippet></ROW><ROW><id>18998019</id><snippet>a = a + 1</snippet></ROW><ROW><id>18998019</id><snippet>a</snippet></ROW><ROW><id>18998019</id><snippet>=</snippet></ROW><ROW><id>18998019</id><snippet>a</snippet></ROW><ROW><id>18998019</id><snippet>L[0]</snippet></ROW><ROW><id>18998019</id><snippet>a</snippet></ROW><ROW><id>18998019</id><snippet>=</snippet></ROW><ROW><id>18998019</id><snippet>L[0]</snippet></ROW><ROW><id>18998019</id><snippet>a</snippet></ROW><ROW><id>18998019</id><snippet>=</snippet></ROW><ROW><id>18998106</id><snippet>== False</snippet></ROW><ROW><id>18998106</id><snippet># flake8: noqa</snippet></ROW><ROW><id>18998106</id><snippet>sqlalchemy.sql.expression.false</snippet></ROW><ROW><id>18998106</id><snippet>from sqlalchemy.sql.expression import false

TestCase.obsoleted == false()
</snippet></ROW><ROW><id>18998106</id><snippet>false()</snippet></ROW><ROW><id>18998106</id><snippet>sqlalchemy.expression.true</snippet></ROW><ROW><id>18998172</id><snippet>DEBUG = True</snippet></ROW><ROW><id>18998172</id><snippet>python manage.py runserver --traceback</snippet></ROW><ROW><id>18998357</id><snippet>str.encode('unicode_escape')</snippet></ROW><ROW><id>18998357</id><snippet>repr()</snippet></ROW><ROW><id>18998357</id><snippet>&gt;&gt;&gt; print u'☃'.encode('unicode_escape')
\u2603
&gt;&gt;&gt; print repr(u'☃')
u'\u2603'
</snippet></ROW><ROW><id>18998499</id><snippet>productsChecked</snippet></ROW><ROW><id>18998499</id><snippet>product_name</snippet></ROW><ROW><id>18998499</id><snippet>productsChecked = json.load(open('/Library/WebServer/Documents/scrapper/test2.json'))

print productsChecked[0]['product_name']
</snippet></ROW><ROW><id>18998499</id><snippet>products</snippet></ROW><ROW><id>18998499</id><snippet>any()</snippet></ROW><ROW><id>18998499</id><snippet>for check_product in productsChecked:
    if any(p['product_name'] == check_product['product_name'] for p in product):
        # match!
</snippet></ROW><ROW><id>18998499</id><snippet>for check_product in productsChecked:
    for prod in product:
        if prod['product_name'] == check_product['product_name']:
            print 'Match:', prod
</snippet></ROW><ROW><id>18998499</id><snippet>product</snippet></ROW><ROW><id>18998499</id><snippet>product</snippet></ROW><ROW><id>18998499</id><snippet>products_map = {p['product_name']: p for p in product}
</snippet></ROW><ROW><id>18998499</id><snippet>for check_product in productsChecked:
    if check_product['product_name'] in products_map:
        # the named product is in our map
</snippet></ROW><ROW><id>18998681</id><snippet>sys.modules</snippet></ROW><ROW><id>18998681</id><snippet>main</snippet></ROW><ROW><id>18998681</id><snippet>renderer</snippet></ROW><ROW><id>18998681</id><snippet>main</snippet></ROW><ROW><id>18998681</id><snippet>shared.app</snippet></ROW><ROW><id>18998681</id><snippet>renderer</snippet></ROW><ROW><id>18998681</id><snippet>app</snippet></ROW><ROW><id>18998681</id><snippet>shared.app</snippet></ROW><ROW><id>18998681</id><snippet>renderer.app</snippet></ROW><ROW><id>18998681</id><snippet>from module import something
</snippet></ROW><ROW><id>18998681</id><snippet>import module
# create a local name 'something' 
something = module.something 
del module

# at this point both module.something and something are bound to the 
# same object, but they are distinct names in distinct namespaces

# rebinds local name 'something'
# now `module.something` and `something` point to dffererent objects
something = object()
</snippet></ROW><ROW><id>18998681</id><snippet>Renderer</snippet></ROW><ROW><id>18998681</id><snippet>app</snippet></ROW><ROW><id>18998681</id><snippet>app</snippet></ROW><ROW><id>18998681</id><snippet>class Renderer(object):
    def __init__(self, app):
        self.app = app

class Application(object):
    def __init__(self):
        self.renderer = Renderer(self)
</snippet></ROW><ROW><id>18998731</id><snippet>save</snippet></ROW><ROW><id>18998731</id><snippet>proxy_array</snippet></ROW><ROW><id>18998731</id><snippet>save</snippet></ROW><ROW><id>18998731</id><snippet>while True:
 try:
   data = fetch_data_from_output_queue()
   save_to_database(data)
 except EmptyQueue:
   if not stop_flag.is_set():
     # All done
     break
   time.sleep(1)
   continue
</snippet></ROW><ROW><id>18998731</id><snippet>save</snippet></ROW><ROW><id>18998731</id><snippet>stop_flag</snippet></ROW><ROW><id>18998731</id><snippet>input_queue = initialize_input_queue()
ouput_queue = initialize_output_queue()

stop_flag = Event()
create_and_start_save_thread(output_queue) # read from output queue, save to DB
create_and_start_fetch_threads(input_queue, output_queue) # get sites to crawl from input queue, push crawled results to output_queue
join_fetch_threads() # this will block until the fetch threads have gone through everything in the input_queue
stop_flag.set() # this will inform the save thread that we are done
join_save_thread() # wait for all the saving to complete
</snippet></ROW><ROW><id>18999160</id><snippet>url(r'^service/create/$','django_th.views.get_form_list', name='create_service'),
</snippet></ROW><ROW><id>18999160</id><snippet>def get_form_list(request, form_list=None):
    if form_list is None:
        form_list = [ProviderForm, DummyForm, ConsummerForm, DummyForm, \
                     ServicesDescriptionForm]
    return UserServiceWizard.as_view(form_list=form_list)(request)
</snippet></ROW><ROW><id>18999160</id><snippet>ProviderForm</snippet></ROW><ROW><id>18999160</id><snippet>ConsummerForm</snippet></ROW><ROW><id>18999160</id><snippet>ServicesDescriptionForm</snippet></ROW><ROW><id>18999160</id><snippet>DummyForm</snippet></ROW><ROW><id>18999160</id><snippet>DummyForm</snippet></ROW><ROW><id>18999160</id><snippet>class DummyForm(forms.Form):
    pass
</snippet></ROW><ROW><id>18999160</id><snippet>class UserServiceWizard(SessionWizardView):

    def __init__(self, **kwargs):
        self.form_list = kwargs.pop('form_list')
        return super(UserServiceWizard, self).__init__(**kwargs)

    def get_form_instance(self, step):
        if self.instance is None:
            self.instance = UserService()
        return self.instance

    def get_context_data(self, form, **kwargs):
        data = self.get_cleaned_data_for_step(self.get_prev_step(
                                                    self.steps.current))
        if self.steps.current == '1':
            service_name = str(data['provider']).split('Service')[1]
            #services are named th_&lt;service&gt;
            #call of the dedicated &lt;service&gt;ProviderForm
            form = class_for_name('th_' + service_name.lower() + '.forms',
                  service_name + 'ProviderForm')
       elif self.steps.current == '3':
            service_name = str(data['consummer']).split('Service')[1]
            #services are named th_&lt;service&gt;
            #call of the dedicated &lt;service&gt;ConsummerForm
            form = class_for_name('th_' + service_name.lower() + '.forms',
                  service_name + 'ConsummerForm')
        context = super(UserServiceWizard, self).get_context_data(form=form,
                                  **kwargs)
    return context
</snippet></ROW><ROW><id>18999160</id><snippet>__init__</snippet></ROW><ROW><id>18999160</id><snippet>get_form_list</snippet></ROW><ROW><id>18999160</id><snippet>urls.py</snippet></ROW><ROW><id>18999160</id><snippet>get_context_data</snippet></ROW><ROW><id>18999160</id><snippet>DummyForm</snippet></ROW><ROW><id>18999160</id><snippet>ProviderForm</snippet></ROW><ROW><id>18999160</id><snippet>ConsummerForm</snippet></ROW><ROW><id>18999160</id><snippet>Foobar(Consummer|Provider)Form</snippet></ROW><ROW><id>18999160</id><snippet>class_for_name()</snippet></ROW><ROW><id>18999160</id><snippet>class_for_name</snippet></ROW><ROW><id>18999160</id><snippet>def class_for_name(module_name, class_name):
   m = importlib.import_module(module_name)
   c = getattr(m, class_name)
   return c
</snippet></ROW><ROW><id>18999170</id><snippet>fit_transform</snippet></ROW><ROW><id>18999170</id><snippet>transform</snippet></ROW><ROW><id>18999170</id><snippet>TruncatedSVD</snippet></ROW><ROW><id>18999170</id><snippet>sklearn.metrics.pairwise.cosine_similarity</snippet></ROW><ROW><id>18999212</id><snippet>clientsocket</snippet></ROW><ROW><id>18999212</id><snippet>i</snippet></ROW><ROW><id>18999212</id><snippet>i</snippet></ROW><ROW><id>18999372</id><snippet>mapper</snippet></ROW><ROW><id>18999372</id><snippet>mapper_init</snippet></ROW><ROW><id>18999372</id><snippet>reducer</snippet></ROW><ROW><id>18999372</id><snippet>combiner</snippet></ROW><ROW><id>18999372</id><snippet>steps</snippet></ROW><ROW><id>18999372</id><snippet>zip_codes</snippet></ROW><ROW><id>18999372</id><snippet>MR_zip.py</snippet></ROW><ROW><id>18999372</id><snippet>zip_codes = {int(zip_code): (float(latitude), float(longitude)) for zip_code, latitude, longitude in csv.reader(open("zip_codes.txt", "r"))}
</snippet></ROW><ROW><id>18999372</id><snippet>mapper_init</snippet></ROW><ROW><id>18999372</id><snippet>def mapper_init(self):
    self.zip_codes = {}
    for zip_code, latitude, longitude in csv.reader(open("zip_codes.txt", "r")):
        self.zip_codes[int(zip_code)] = (float(latitude), float(longitude))
</snippet></ROW><ROW><id>18999889</id><snippet>scipy.interpolate.interp1d</snippet></ROW><ROW><id>18999889</id><snippet>RuntimeWarning</snippet></ROW><ROW><id>18999889</id><snippet>slope = (y_hi - y_lo) / (x_hi - x_lo)[:, None]
</snippet></ROW><ROW><id>18999889</id><snippet>&gt;&gt;&gt; import numpy as np
&gt;&gt;&gt; from scipy.interpolate import interp1d
&gt;&gt;&gt; x = np.array([ 5,  5,  10,  10,  10,  20])
&gt;&gt;&gt; y = np.array([ 0,  0,   0,  0,   0,  30])
&gt;&gt;&gt; X = np.array([5.1,5.1,5.1,6,10,11,20, 19.999])
&gt;&gt;&gt; f = interp1d(x,y,'linear', 0, True, False, 0)
&gt;&gt;&gt; Y = f(X)
 [  0.      0.      0.      0.      0.      3.     30.     29.997]
</snippet></ROW><ROW><id>18999889</id><snippet>interp1d</snippet></ROW><ROW><id>18999889</id><snippet>x</snippet></ROW><ROW><id>18999889</id><snippet>y</snippet></ROW><ROW><id>18999889</id><snippet>interp1d</snippet></ROW><ROW><id>18999889</id><snippet>f</snippet></ROW><ROW><id>18999889</id><snippet>x_new</snippet></ROW><ROW><id>18999889</id><snippet>f</snippet></ROW><ROW><id>18999889</id><snippet>&gt;&gt;&gt; x_new_indices = np.searchsorted(x, X)
</snippet></ROW><ROW><id>18999889</id><snippet>x</snippet></ROW><ROW><id>18999889</id><snippet>x_new[n] = x[0]</snippet></ROW><ROW><id>18999889</id><snippet>&gt;&gt;&gt; x_new_indices = x_new_indices.clip(1, len(x)-1).astype(int)
</snippet></ROW><ROW><id>18999889</id><snippet>x_new</snippet></ROW><ROW><id>18999889</id><snippet>&gt;&gt;&gt; lo = x_new_indices - 1
&gt;&gt;&gt; hi = x_new_indices
&gt;&gt;&gt; x_lo = x[lo]
&gt;&gt;&gt; x_hi = x[hi]
&gt;&gt;&gt; y_lo = y[lo]
&gt;&gt;&gt; y_hi = y[hi]
</snippet></ROW><ROW><id>18999889</id><snippet>x_new</snippet></ROW><ROW><id>18999889</id><snippet>&gt;&gt;&gt; slope = (y_hi - y_lo) / (x_hi - x_lo)[:, None]
&gt;&gt;&gt; y_new = slope*(x_new - x_lo)[:, None] + y_lo
</snippet></ROW><ROW><id>19000194</id><snippet>import pickle

lst = [[1,5,7],[14,3,27], [19,12,0], [23,8,17], [12,7]]
pickle.dump(lst, open('data.pkl', 'wb'))
</snippet></ROW><ROW><id>19000194</id><snippet>import pickle

lst = pickle.load(open('data.pkl', 'r')
</snippet></ROW><ROW><id>19000194</id><snippet>from cPickle import Pickler

p = Pickler(open('data2.pkl', 'wb'))
p.dump(lst)
</snippet></ROW><ROW><id>19000194</id><snippet>from cPickle import Unpickler

up = Unpickler(open('data.pkl', 'r'))
lst = up.load()
</snippet></ROW><ROW><id>19000230</id><snippet>sqlite</snippet></ROW><ROW><id>19000230</id><snippet>__exit__</snippet></ROW><ROW><id>19000230</id><snippet>contextlib.closing</snippet></ROW><ROW><id>19000230</id><snippet>from contextlib import closing

with closing(sqlite3.connect(r'./mydb')) as connection:
    with connection:
        cursor = connection.cursor()
        cursor.executemany('...' )
</snippet></ROW><ROW><id>19000573</id><snippet>#!/usr/bin/env python
#-*-coding:utf-8-*-
import re

def reverse(s):
    p = re.compile(r'\w+')
    for m in p.finditer(s):
        word = m.group()
        if word:
            p = s.partition(word)
            l = list(p)
            index = p.index(word)
            l[index] = l[index][::-1]
            l2 = list(l[index])
            l2[0],l2[-1]=l2[-1],l2[0]
            l[index]=''.join(l2)
            s = ''.join(l)
    return s

s="Alistair Chris,"
print reverse(s)
</snippet></ROW><ROW><id>19000592</id><snippet>looup tagger</snippet></ROW><ROW><id>19000592</id><snippet>lookup tagger</snippet></ROW><ROW><id>19000592</id><snippet>NLTK</snippet></ROW><ROW><id>19000592</id><snippet>&gt;&gt;&gt; from nltk.corpus import brown
&gt;&gt;&gt; from nltk import UnigramTagger as ut
&gt;&gt;&gt; brown_sents = brown.tagged_sents()
# Split the data into train and test sets.
&gt;&gt;&gt; train = int(len(brown_sents)*90/100) # use 90% for training
# Trains the tagger
&gt;&gt;&gt; uni_tag = ut(brown_sents[:train]) # this will take some time, ~1-2 mins
# Tags a random sentence
&gt;&gt;&gt; uni_tag.tag ("this is a foo bar sentence .".split())
[('this', 'DT'), ('is', 'BEZ'), ('a', 'AT'), ('foo', None), ('bar', 'NN'), ('sentence', 'NN'), ('.', '.')]
# Test the taggers accuracy.
&gt;&gt;&gt; uni_tag.evaluate(brown_sents[train+1:]) # evaluate on 10%, will also take ~1-2 mins
0.8851469586629643
</snippet></ROW><ROW><id>19000710</id><snippet>&gt;&gt;&gt; import nltk
&gt;&gt;&gt; grammar = nltk.parse_cfg("""
... S -&gt; NP VP
... VP -&gt; V PUNCT
... PUNCT -&gt; '.'
... V -&gt; 'eat'
... NP -&gt; 'I'
... """)
&gt;&gt;&gt; 
&gt;&gt;&gt; sentence = "I eat .".split()
&gt;&gt;&gt; cp = nltk.ChartParser(grammar)
&gt;&gt;&gt; for tree in cp.nbest_parse(sentence):
...     print tree
... 
(S (NP I) (VP (V eat) (PUNCT .)))
</snippet></ROW><ROW><id>19000922</id><snippet>transposed</snippet></ROW><ROW><id>19000922</id><snippet>gensim</snippet></ROW><ROW><id>19000922</id><snippet>mmreader</snippet></ROW><ROW><id>19000922</id><snippet>mmwriter</snippet></ROW><ROW><id>19000938</id><snippet>jinja2</snippet></ROW><ROW><id>19000938</id><snippet>nbconvert</snippet></ROW><ROW><id>19000987</id><snippet>from Tkinter import *
import tkMessageBox

global x_data,y_data,z_data                       #----------add this

def get_data():
    global x_data,y_data,z_data
    x_data = x.get()
    y_data = y.get()
    z_data = z.get()
    print "x_data = {0} , y_data = {1} , z_data = {2}".format(x_data,y_data,z_data)

def messagePop():
    get_data()
    #---your Entry, which YOU NEED HELP ON THIS PART 
    if (x_data==0.25) and (y_data==2.5) and (z_data==20.5):   #----------compare here
        print("Well done")
        tkMessageBox.showinfo('Results', '100% Very Good')

#---your GUI design part----------------------------------------------
app = Tk()
app.configure(bg='cornflower blue')
COLORS = [...]
app.geometry('500x500+450+140')
app.title('Maths4Primary')
app.wm_iconbitmap('MathIcon.ico')
x = Entry(app)
y = Entry(app)
z = Entry(app)
x.place(x=50,y=60)
y.place(x=200,y=60)
z.place(x=350,y=60)
Label(app, text="Put these prices in order", bg="gold", fg="blue").place(x=100,y=10)
Label(app, text= u"\xA3" + "20.50", bg="gold", fg="blue").place(x=50,y=35)
Label(app, text=u"\xA3" + "2.50", bg="gold", fg="blue").place(x=200,y=35)
Label(app, text= u"\xA3" + "0.25", bg="gold", fg="blue").place(x=350,y=35)
B1 = Button(app,text='Marks',bg='gold',fg='blue', command = messagePop ).place(x=425,y=450)

app.mainloop()
</snippet></ROW><ROW><id>19001014</id><snippet>def read_text(text):
    for line in text.split('\n'):
        docid, termid, val = map(int,line.split())
        if docid &lt; previd or docid-1 &gt; previd:
            print line # I guess this is a debug feature
            return # or raise Exception("line not in running order", line)
        yield (docid, termid, val)
</snippet></ROW><ROW><id>19001014</id><snippet>for docid, termid, val in read_text(text):
    docs[docid].append((termid,val))
</snippet></ROW><ROW><id>19001014</id><snippet>text.split('\n')</snippet></ROW><ROW><id>19001014</id><snippet>open('myfile','r')</snippet></ROW><ROW><id>19001014</id><snippet>for line in open('myfile','r'):
    do_something(line)
</snippet></ROW><ROW><id>19001475</id><snippet>with open('data.txt') as f:
    print sum(1 for _ in f)
</snippet></ROW><ROW><id>19001475</id><snippet>len(f)</snippet></ROW><ROW><id>19001475</id><snippet>f</snippet></ROW><ROW><id>19001475</id><snippet>_</snippet></ROW><ROW><id>19001475</id><snippet>len(f.readlines())</snippet></ROW><ROW><id>19001684</id><snippet>POST</snippet></ROW><ROW><id>19001710</id><snippet>disable_existing_loggers: false</snippet></ROW><ROW><id>19001710</id><snippet>__main__</snippet></ROW><ROW><id>19001710</id><snippet>dictConfig</snippet></ROW><ROW><id>19001710</id><snippet>version: 1
disable_existing_loggers: false
formatters:
  simple:
  ...
</snippet></ROW><ROW><id>19001979</id><snippet>'handlers': {
    'mail_admins': {
        'level': 'ERROR',
        'class': 'django.utils.log.AdminEmailHandler',
        'email_backend': 'django.core.mail.backends.filebased.EmailBackend',
    }
},
</snippet></ROW><ROW><id>19001979</id><snippet>AdminEmailHandler</snippet></ROW><ROW><id>19002285</id><snippet>nsmap</snippet></ROW><ROW><id>19002285</id><snippet>set()</snippet></ROW><ROW><id>19002285</id><snippet>&gt;&gt;&gt; root = etree.XML('&lt;root a1="one" a2="two"&gt; &lt;somechild/&gt; &lt;/root&gt;')
&gt;&gt;&gt; etree.register_namespace('xi', 'http://www.w3.org/2001/XInclude')
&gt;&gt;&gt; etree.tostring(root)
b'&lt;root a1="one" a2="two"&gt; &lt;somechild/&gt; &lt;/root&gt;'
&gt;&gt;&gt; orig_attrib = dict(root.attrib)
&gt;&gt;&gt; root.set('{http://www.w3.org/2001/XInclude}xi', '')
&gt;&gt;&gt; for a in root.attrib: del root.attrib[a]
&gt;&gt;&gt; for a in orig_attrib: root.attrib[a] = orig_attrib[a]
&gt;&gt;&gt; etree.tostring(root)
b'&lt;root xmlns:xi="http://www.w3.org/2001/XInclude" a1="one" a2="two"&gt; &lt;somechild/&gt; &lt;/root&gt;'
&gt;&gt;&gt; root.nsmap
{'xi': 'http://www.w3.org/2001/XInclude'}
</snippet></ROW><ROW><id>19002524</id><snippet>b</snippet></ROW><ROW><id>19002524</id><snippet>from bs4 import BeautifulSoup

soup = BeautifulSoup("""
&lt;html&gt;
 &lt;body&gt;
  &lt;div&gt;
   &lt;b&gt;Question 1: What is your name?&lt;/b&gt;
   My name is Peter.
  &lt;/div&gt;
  &lt;div&gt;
   &lt;b&gt;Question 2: What is your native language?&lt;/b&gt;
   &lt;div&gt;Esperanto&lt;/div&gt;
  &lt;/div&gt;
 &lt;/body&gt;
&lt;/html&gt;
""")

for div in soup.find('body').findAll('div', recursive=False):
    question = div.find('b')
    print question.text
    print question.nextSibling.strip() or question.nextSibling.nextSibling.text.strip()
</snippet></ROW><ROW><id>19002524</id><snippet>Question 1: What is your name?
My name is Peter.
Question 2: What is your native language?
Esperanto
</snippet></ROW><ROW><id>19002897</id><snippet>lambda t:t['id']==task_id</snippet></ROW><ROW><id>19002897</id><snippet>t['id']</snippet></ROW><ROW><id>19002897</id><snippet>task_id</snippet></ROW><ROW><id>19002897</id><snippet>filter()</snippet></ROW><ROW><id>19002897</id><snippet>tasks</snippet></ROW><ROW><id>19002897</id><snippet>t</snippet></ROW><ROW><id>19002897</id><snippet>True</snippet></ROW><ROW><id>19002897</id><snippet>False</snippet></ROW><ROW><id>19002897</id><snippet>[t for t in tasks if t['id'] == task_id]</snippet></ROW><ROW><id>19002897</id><snippet>&gt;&gt;&gt; mylist = range(10)
&gt;&gt;&gt; filter(lambda x: x % 2 == 0, mylist)
[0, 2, 4, 6, 8]
</snippet></ROW><ROW><id>19002897</id><snippet>&gt;&gt;&gt; mylist = range(10)
&gt;&gt;&gt; [x for x in mylist if x % 2 == 0]
[0, 2, 4, 6, 8]
</snippet></ROW><ROW><id>19003014</id><snippet>.</snippet></ROW><ROW><id>19003014</id><snippet>def remove_sentence(input, word):
    return ".".join((sentence for sentence in input.split(".")
                    if word not in sentence))

&gt;&gt;&gt;&gt; remove_sentence(text, "published")
"[4][5] By the 1870s the scientific community and much of the general public had accepted evolution as a fact. However, many favoured competing explanations and it was not until the emergence of the modern evolutionary synthesis from the 1930s to the 1950s that a broad consensus developed in which natural selection was the basic mechanism of evolution.[6][7] In modified form, Darwin's scientific discovery is the unifying theory of the life sciences, explaining the diversity of life.[8][9]"
&gt;&gt;&gt;
&gt;&gt;&gt; remove_sentence(text, "favoured")
"Darwin published his theory of evolution with compelling evidence in his 1859 book On the Origin of Species, overcoming scientific rejection of earlier concepts of transmutation of species.[4][5] By the 1870s the scientific community and much of the general public had accepted evolution as a fact.[6][7] In modified form, Darwin's scientific discovery is the unifying theory of the life sciences, explaining the diversity of life.[8][9]"
</snippet></ROW><ROW><id>19003030</id><snippet>StringVar</snippet></ROW><ROW><id>19003030</id><snippet>StringVar</snippet></ROW><ROW><id>19003030</id><snippet>StringVar</snippet></ROW><ROW><id>19003030</id><snippet>StringVar</snippet></ROW><ROW><id>19003226</id><snippet>class color:
    def __init__(self,r,b):
        self.r = r
        self.b = b

    def displaycolor(self):
        print "The first should be :", self.r
        print "The 2nd should be :", self.b
pagal=color("Red","blue")
pagal.displaycolor()
</snippet></ROW><ROW><id>19003710</id><snippet>dictionary</snippet></ROW><ROW><id>19003710</id><snippet>dictionary</snippet></ROW><ROW><id>19003710</id><snippet>class_name.dictionary = {'foo1': class_name.foo1, 'foo2': class_name.foo2}
</snippet></ROW><ROW><id>19003710</id><snippet>dictionary</snippet></ROW><ROW><id>19003710</id><snippet>__dict__</snippet></ROW><ROW><id>19003710</id><snippet>foo1</snippet></ROW><ROW><id>19003710</id><snippet>foo2</snippet></ROW><ROW><id>19003710</id><snippet>In [9]: class A(object):
   ...:     def foo1(self):
   ...:         print('foo1')
   ...:     def foo2(self):
   ...:         print('foo2')
   ...:     def foo(self, key):
   ...:         self.dictionary[key](self)
   ...:     dictionary = {'foo1': foo1, 'foo2': foo2}  # NOTE: do NOT use cls_name.method

In [10]: a = A()

In [11]: a.foo('foo1')
foo1

In [12]: a.foo('foo2')
foo2
</snippet></ROW><ROW><id>19003710</id><snippet>foo</snippet></ROW><ROW><id>19003710</id><snippet>self</snippet></ROW><ROW><id>19003710</id><snippet>dictionary</snippet></ROW><ROW><id>19003710</id><snippet>foo1</snippet></ROW><ROW><id>19003710</id><snippet>foo2</snippet></ROW><ROW><id>19003710</id><snippet>getattr</snippet></ROW><ROW><id>19003710</id><snippet>dict</snippet></ROW><ROW><id>19003710</id><snippet>getattr(instance, method_name)()</snippet></ROW><ROW><id>19003780</id><snippet>import xml.etree.ElementTree as ET


data = '&lt;Sets X="s"&gt;&lt;B s="1" e="2176" t="-2.0774E4" r="1" /&gt;&lt;B s="2177" e="8982" t="-1.8597E4" r="1" /&gt;&lt;B s="8983" e="10393" t="-150.22" r="1" /&gt;&lt;/Sets&gt;'

tree = ET.fromstring(data)
for b in tree.findall('.//B'):
     print map(float, itemgetter(*'setr')(b.attrib))
</snippet></ROW><ROW><id>19003780</id><snippet>[1.0, 2176.0, -20774.0, 1.0]
[2177.0, 8982.0, -18597.0, 1.0]
[8983.0, 10393.0, -150.22, 1.0]
</snippet></ROW><ROW><id>19003952</id><snippet>multiprocessing</snippet></ROW><ROW><id>19003952</id><snippet>import BeautifulSoup
import urllib2
import itertools
import random


class Crawler(object):
    """docstring for Crawler"""

    def __init__(self):

        self.soup = None                                        # Beautiful Soup object
        self.current_page   = "http://www.python.org/"          # Current page's address
        self.links          = set()                             # Queue with every links fetched
        self.visited_links  = set()

        self.counter = 0 # Simple counter for debug purpose

    def open(self):

        # Open url
        print self.counter , ":", self.current_page
        res = urllib2.urlopen(self.current_page)
        html_code = res.read()
        self.visited_links.add(self.current_page) 

        # Fetch every links
        self.soup = BeautifulSoup.BeautifulSoup(html_code)

        page_links = []
        try :
            page_links = itertools.ifilter(  # Only deal with absolute links 
                                            lambda href: 'http://' in href,
                                                ( a.get('href') for a in self.soup.findAll('a') )  )
        except Exception: # Magnificent exception handling
            pass



        # Update links 
        self.links = self.links.union( set(page_links) ) 



        # Choose a random url from non-visited set
        self.current_page = random.sample( self.links.difference(self.visited_links),1)[0]
        self.counter+=1


    def run(self):

        # Crawl 3 webpages (or stop if all url has been fetched)
        while len(self.visited_links) &lt; 3 or (self.visited_links == self.links):
            self.open()

        for link in self.links:
            print link



if __name__ == '__main__':

    C = Crawler()
    C.run()
</snippet></ROW><ROW><id>19003952</id><snippet>In [48]: run BFScrawler.py
0 : http://www.python.org/
1 : http://twistedmatrix.com/trac/
2 : http://www.flowroute.com/
http://www.egenix.com/files/python/mxODBC.html
http://wiki.python.org/moin/PyQt
http://wiki.python.org/moin/DatabaseProgramming/
http://wiki.python.org/moin/CgiScripts
http://wiki.python.org/moin/WebProgramming
http://trac.edgewall.org/
http://www.facebook.com/flowroute
http://www.flowroute.com/
http://www.opensource.org/licenses/mit-license.php
http://roundup.sourceforge.net/
http://www.zope.org/
http://www.linkedin.com/company/flowroute
http://wiki.python.org/moin/TkInter
http://pypi.python.org/pypi
http://pycon.org/#calendar
http://dyn.com/
http://www.google.com/calendar/ical/j7gov1cmnqr9tvg14k621j7t5c%40group.calendar.
google.com/public/basic.ics
http://www.pygame.org/news.html
http://www.turbogears.org/
http://www.openbookproject.net/pybiblio/
http://wiki.python.org/moin/IntegratedDevelopmentEnvironments
http://support.flowroute.com/forums
http://www.pentangle.net/python/handbook/
http://dreamhost.com/?q=twisted
http://www.vrplumber.com/py3d.py
http://sourceforge.net/projects/mysql-python
http://wiki.python.org/moin/GuiProgramming
http://software-carpentry.org/
http://www.google.com/calendar/ical/3haig2m9msslkpf2tn1h56nn9g%40group.calendar.
google.com/public/basic.ics
http://wiki.python.org/moin/WxPython
http://wiki.python.org/moin/PythonXml
http://www.pytennessee.org/
http://labs.twistedmatrix.com/
http://www.found.no/
http://www.prnewswire.com/news-releases/voip-innovator-flowroute-relocates-to-se
attle-190011751.html
http://www.timparkin.co.uk/
http://docs.python.org/howto/sockets.html
http://blog.python.org/
http://docs.python.org/devguide/
http://www.djangoproject.com/
http://buildbot.net/trac
http://docs.python.org/3/
http://www.prnewswire.com/news-releases/flowroute-joins-voxbones-inum-network-fo
r-global-voip-calling-197319371.html
http://www.psfmember.org
http://docs.python.org/2/
http://wiki.python.org/moin/Languages
http://sip-trunking.tmcnet.com/topics/enterprise-voip/articles/341902-grandstrea
m-ip-voice-solutions-receive-flowroute-certification.htm
http://www.twitter.com/flowroute
http://wiki.python.org/moin/NumericAndScientific
http://www.google.com/calendar/ical/b6v58qvojllt0i6ql654r1vh00%40group.calendar.
google.com/public/basic.ics
http://freecode.com/projects/pykyra
http://www.xs4all.com/
http://blog.flowroute.com
http://wiki.python.org/moin/PyGtk
http://twistedmatrix.com/trac/
http://wiki.python.org/moin/
http://wiki.python.org/moin/Python2orPython3
http://stackoverflow.com/questions/tagged/twisted
http://www.pycon.org/
</snippet></ROW><ROW><id>19004390</id><snippet>X[~Z]</snippet></ROW><ROW><id>19004390</id><snippet>X[Z==0]</snippet></ROW><ROW><id>19004390</id><snippet>In [13]: import numpy as np

In [14]: X = np.random.random_integers(0, 1000, size=1000)

In [15]: thresh = 50

In [18]: Z = X &lt;= thresh

In [19]: %timeit X_l, X_r = X[Z == 0], X[Z == 1]
10000 loops, best of 3: 23.9 us per loop

In [20]: %timeit X_l, X_r = X[~Z], X[Z]
100000 loops, best of 3: 16.4 us per loop
</snippet></ROW><ROW><id>19004390</id><snippet>In [21]: %timeit np.array([])
100000 loops, best of 3: 4.31 us per loop

In [22]: %timeit []
10000000 loops, best of 3: 29.5 ns per loop

In [23]: 4310/295.
Out[23]: 14.610169491525424
</snippet></ROW><ROW><id>19004513</id><snippet>&lt;__main__.Block object at 0x02416B70&gt;</snippet></ROW><ROW><id>19004513</id><snippet>Block</snippet></ROW><ROW><id>19004513</id><snippet>pickle</snippet></ROW><ROW><id>19004513</id><snippet>shelve</snippet></ROW><ROW><id>19004513</id><snippet>shelve</snippet></ROW><ROW><id>19004513</id><snippet>save</snippet></ROW><ROW><id>19004513</id><snippet>while True:
    ...
    for event in pygame.event.get():
        if event.type == QUIT: 
            save(player, blocklist)
            exit()
</snippet></ROW><ROW><id>19004513</id><snippet>def save(player, blocks):
    f = shelve.open("save.bin") 
    f['player'] = player
    f['blocks'] = blocks
    f.close()
</snippet></ROW><ROW><id>19004513</id><snippet>shelve</snippet></ROW><ROW><id>19004513</id><snippet>dict</snippet></ROW><ROW><id>19004513</id><snippet>player, blocklist = load() or (None, [])
</snippet></ROW><ROW><id>19004513</id><snippet>load</snippet></ROW><ROW><id>19004513</id><snippet>None</snippet></ROW><ROW><id>19004513</id><snippet>None</snippet></ROW><ROW><id>19004513</id><snippet>save</snippet></ROW><ROW><id>19004513</id><snippet>def load():
    try:
        f = shelve.open("save.bin") 
        return f['player'], f['blocks']
    except KeyError:
        return None
    finally:
        f.close()
</snippet></ROW><ROW><id>19004513</id><snippet>import pygame,random
from pygame.locals import *
from collections import namedtuple
import shelve

pygame.init()
clock=pygame.time.Clock()
screen=pygame.display.set_mode((640,480))

max_gravity = 100

class Block(object):
    sprite = pygame.image.load("dirt.png").convert_alpha()
    def __init__(self, x, y):
        self.rect = self.sprite.get_rect(centery=y, centerx=x)

class Player(object):
    sprite = pygame.image.load("dirt.png").convert()
    sprite.fill((0,255,0))
    def __init__(self, x, y):
        self.rect = self.sprite.get_rect(centery=y, centerx=x)
        # indicates that we are standing on the ground
        # and thus are "allowed" to jump
        self.on_ground = True
        self.xvel = 0
        self.yvel = 0
        self.jump_speed = 10
        self.move_speed = 8

    def update(self, move, blocks):

        # check if we can jump 
        if move.up and self.on_ground: 
            self.yvel -= self.jump_speed

        # simple left/right movement
        if move.left: self.xvel = -self.move_speed
        if move.right: self.xvel = self.move_speed

        # if in the air, fall down
        if not self.on_ground:
            self.yvel += 0.3
            # but not too fast
            if self.yvel &gt; max_gravity: self.yvel = max_gravity

        # if no left/right movement, x speed is 0, of course
        if not (move.left or move.right):
            self.xvel = 0

        # move horizontal, and check for horizontal collisions
        self.rect.left += self.xvel
        self.collide(self.xvel, 0, blocks)

        # move vertically, and check for vertical collisions
        self.rect.top += self.yvel
        self.on_ground = False;
        self.collide(0, self.yvel, blocks)

    def collide(self, xvel, yvel, blocks):
        # all blocks that we collide with
        for block in [blocks[i] for i in self.rect.collidelistall(blocks)]:

            # if xvel is &gt; 0, we know our right side bumped 
            # into the left side of a block etc.
            if xvel &gt; 0: self.rect.right = block.rect.left
            if xvel &lt; 0: self.rect.left = block.rect.right

            # if yvel &gt; 0, we are falling, so if a collision happpens 
            # we know we hit the ground (remember, we seperated checking for
            # horizontal and vertical collision, so if yvel != 0, xvel is 0)
            if yvel &gt; 0:
                self.rect.bottom = block.rect.top
                self.on_ground = True
                self.yvel = 0
            # if yvel &lt; 0 and a collision occurs, we bumped our head
            # on a block above us
            if yvel &lt; 0: self.rect.top = block.rect.bottom

colliding = False
Move = namedtuple('Move', ['up', 'left', 'right'])

def load():
    try:
        f = shelve.open("save.bin") 
        return f['player'], f['blocks']
    except KeyError:
        return None
    finally:
        f.close()

def save(player, blocks):
    f = shelve.open("save.bin") 
    f['player'] = player
    f['blocks'] = blocks
    f.close()

player, blocklist = load() or (None, [])

while True:
    screen.fill((25,30,90))
    mse = pygame.mouse.get_pos()
    key = pygame.key.get_pressed()

    for event in pygame.event.get():
        if event.type == QUIT: 
            save(player, blocklist)
            exit()

        if key[K_LSHIFT]:
            if event.type==MOUSEMOTION:
                if not any(block.rect.collidepoint(mse) for block in blocklist):
                    x=(int(mse[0]) / 32)*32
                    y=(int(mse[1]) / 32)*32
                    blocklist.append(Block(x+16,y+16))
        else:
            if event.type == pygame.MOUSEBUTTONUP:
                if event.button == 1:
                    to_remove = [b for b in blocklist if b.rect.collidepoint(mse)]
                    for b in to_remove:
                        blocklist.remove(b)

                    if not to_remove:
                        x=(int(mse[0]) / 32)*32
                        y=(int(mse[1]) / 32)*32
                        blocklist.append(Block(x+16,y+16))

                elif event.button == 3:
                    x=(int(mse[0]) / 32)*32
                    y=(int(mse[1]) / 32)*32
                    player=Player(x+16,y+16)

    move = Move(key[K_UP], key[K_LEFT], key[K_RIGHT])

    for b in blocklist:
        screen.blit(b.sprite, b.rect)

    if player:
        player.update(move, blocklist)
        screen.blit(player.sprite, player.rect)

    clock.tick(60)
    pygame.display.flip()
</snippet></ROW><ROW><id>19004513</id><snippet>Surfaces</snippet></ROW><ROW><id>19004513</id><snippet>Surfaces</snippet></ROW><ROW><id>19004513</id><snippet>Player</snippet></ROW><ROW><id>19004513</id><snippet>Block</snippet></ROW><ROW><id>19004513</id><snippet>Surface</snippet></ROW><ROW><id>19004513</id><snippet>Surface</snippet></ROW><ROW><id>19004513</id><snippet>None</snippet></ROW><ROW><id>19004513</id><snippet>load</snippet></ROW><ROW><id>19004878</id><snippet>import numpy as np

L = 80.0
N = 2 ** np.arange(-4, 10, dtype=np.float64)
dx = L / N
</snippet></ROW><ROW><id>19004878</id><snippet>array([  1.28000000e+03,   6.40000000e+02,   3.20000000e+02,
         1.60000000e+02,   8.00000000e+01,   4.00000000e+01,
         2.00000000e+01,   1.00000000e+01,   5.00000000e+00,
         2.50000000e+00,   1.25000000e+00,   6.25000000e-01,
         3.12500000e-01,   1.56250000e-01])
</snippet></ROW><ROW><id>19004878</id><snippet>dtype</snippet></ROW><ROW><id>19004878</id><snippet>float</snippet></ROW><ROW><id>19004878</id><snippet>N = 2 ** np.arange(-4., 10.)
</snippet></ROW><ROW><id>19004997</id><snippet>class</snippet></ROW><ROW><id>19004997</id><snippet>def</snippet></ROW><ROW><id>19004997</id><snippet>import</snippet></ROW><ROW><id>19004997</id><snippet>bar</snippet></ROW><ROW><id>19004997</id><snippet>class</snippet></ROW><ROW><id>19004997</id><snippet>class</snippet></ROW><ROW><id>19004997</id><snippet>dict</snippet></ROW><ROW><id>19004997</id><snippet>dict</snippet></ROW><ROW><id>19004997</id><snippet>__dict__</snippet></ROW><ROW><id>19004997</id><snippet>bar=1</snippet></ROW><ROW><id>19004997</id><snippet>bar</snippet></ROW><ROW><id>19004997</id><snippet>__dict__</snippet></ROW><ROW><id>19004997</id><snippet>__dict__</snippet></ROW><ROW><id>19005131</id><snippet>Queue</snippet></ROW><ROW><id>19005131</id><snippet>from Queue import Queue

q = Queue()
</snippet></ROW><ROW><id>19005131</id><snippet>msg = q.get()
</snippet></ROW><ROW><id>19005131</id><snippet>def on_message(msg):
    q.put(msg)
rabbitmq_channel.register_callback(on_message)
</snippet></ROW><ROW><id>19005131</id><snippet>rabbitmq_channel.register_callback(lambda msg: q.put(msg))
</snippet></ROW><ROW><id>19005131</id><snippet>q.put(msg)</snippet></ROW><ROW><id>19005131</id><snippet>while</snippet></ROW><ROW><id>19005131</id><snippet>while True:
    msg = q.get()
    process_message(msg)
</snippet></ROW><ROW><id>19005131</id><snippet># this thing always called in a green thread; forget about pools and queues.
def on_message(msg):
    # you're in a green thread now; just process away!
    benefit_from("all the gevent goodness!")
    spawn_and_join_10_sub_greenlets()

rabbitmq_channel.register_callback(lambda msg: gevent.spawn(on_message, msg))
</snippet></ROW><ROW><id>19005245</id><snippet>def reduceOutputListToPossibleMatches(outputList, detailsList):
    details = {}
    for detailsItem in detailsList:
        key = detailsItem[14]
        if key in details:
            details[key][30] = "1"
        else:
            details[key] = detailsItem

    for outputItem in outputList:
        key = outputItem[4]
        if key in details:
            yield details[key]

res = reduceOutputListToPossibleMatches(outputList, detailsList)
with open('somefile', 'w') as f:
    f.writelines(res)
</snippet></ROW><ROW><id>19005245</id><snippet>def reduceOutputListToPossibleMatches(outputList, detailsList):
    details = {}
    for detailsItem in detailsList:
        key = detailsItem[14]
        if key in details:
            details[key].append(detailsItem)
        else:
            details[key] = [detailsItem]

    for outputItem in outputList:
        key = outputItem[4]
        if key in details:
            for item in details[key]:
                if len(details[key]) &gt; 1:
                    item[30] = "1"
                yield item

res = reduceOutputListToPossibleMatches(outputList, detailsList)
with open('somefile', 'w') as f:
    f.writelines(res)
</snippet></ROW><ROW><id>19005337</id><snippet>class Foo(object):
    def __init__(self):
        # statically analysable
        self.bla = 3

        # still, but more difficult
        if SOME_CONSTANT &gt; 123:
            self.x = 123
        else:
            self.y = 321

    def do_something(self):
        import random
        setattr(self, "attr%s" % random.randint(1, 100), "hello, world of dynamic languages!")

    foo = Foo()
    foo2 = Foo()
    # only `bla`, `x`, and `y` attrs in existence so far
    foo2.do_something()
    # now there's an attribute with a random name out there
    # in order to detect it, we'd have to get all instances of Foo existence at the moment, and individually inspect every attribute on them.
</snippet></ROW><ROW><id>19006063</id><snippet>lookup_type</snippet></ROW><ROW><id>19006063</id><snippet>forms.py</snippet></ROW><ROW><id>19006063</id><snippet>lookup_type = forms.ChoiceField(choices=LOOKUP_TYPE_CHOICES)
</snippet></ROW><ROW><id>19006063</id><snippet>lookup_type = django_filters.ChoiceFilter(choices=LOOKUP_TYPE_CHOICES)
</snippet></ROW><ROW><id>19006063</id><snippet>lookup_type</snippet></ROW><ROW><id>19006063</id><snippet>FieldError at/. Cannot resolve keyword 'lookup_type' into field</snippet></ROW><ROW><id>19006200</id><snippet>[root@host pyc]# cat .coveragerc
[run]
parallel = true

[paths]
mysources =
    ../src
    /root/lucian/coverage/module1/pyc

[root@host pyc]# coverage run main.py
[root@host pyc]# coverage combine
[root@host pyc]# coverage report
Name                                                     Stmts   Miss  Cover
----------------------------------------------------------------------------
/root/lucian/coverage/module1/src/main                       1      0   100%
/root/lucian/coverage/module1/src/test_coverage_callee       3      0   100%
/root/lucian/coverage/module1/src/test_coverage_caller       3      0   100%
----------------------------------------------------------------------------
TOTAL                                                        7      0   100%
</snippet></ROW><ROW><id>19006206</id><snippet>collections.Counter</snippet></ROW><ROW><id>19006206</id><snippet>&gt;&gt;&gt; from collections import Counter
&gt;&gt;&gt; d = [1, 2, 1, 2, 4, 4, 5, 'a', 'b', 'a', 'b', 'c', 6, 'f', 3]
&gt;&gt;&gt; [k for (k,v) in Counter(d).iteritems() if v &gt; 1]
['a', 1, 2, 'b', 4]
</snippet></ROW><ROW><id>19006206</id><snippet>&gt;&gt;&gt; keep = {k for (k,v) in Counter(d).iteritems() if v &gt; 1}
&gt;&gt;&gt; [x for x in d if x in keep]
[1, 2, 1, 2, 4, 4, 'a', 'b', 'a', 'b']
</snippet></ROW><ROW><id>19006206</id><snippet>b</snippet></ROW><ROW><id>19006206</id><snippet>[a, b, b, c]</snippet></ROW><ROW><id>19006206</id><snippet>b</snippet></ROW><ROW><id>19006206</id><snippet>b</snippet></ROW><ROW><id>19006206</id><snippet>for</snippet></ROW><ROW><id>19006747</id><snippet>students_app/reminders.py</snippet></ROW><ROW><id>19006747</id><snippet>from reminders.base_reminders import ReminderEmail</snippet></ROW><ROW><id>19006747</id><snippet>reminders</snippet></ROW><ROW><id>19006747</id><snippet>from __future__ import absolute_import</snippet></ROW><ROW><id>19006747</id><snippet>from __future__ import absolute_import
from reminders.base_reminders import ReminderEmail
</snippet></ROW><ROW><id>19006747</id><snippet>reminders</snippet></ROW><ROW><id>19006747</id><snippet>reminders</snippet></ROW><ROW><id>19006747</id><snippet>reminders</snippet></ROW><ROW><id>19006747</id><snippet>reminders</snippet></ROW><ROW><id>19006801</id><snippet>window.set_transient_for(self.gui.window)
</snippet></ROW><ROW><id>19006874</id><snippet>get</snippet></ROW><ROW><id>19006874</id><snippet>GET</snippet></ROW><ROW><id>19006874</id><snippet>import tornado.ioloop
import tornado.web

class MainHandler(tornado.web.RequestHandler):
    def post(self):
        self.write("Hello, world")
    get = post # &lt;--------------

application = tornado.web.Application([
    (r"/", MainHandler),
])

if __name__ == "__main__":
    application.listen(8888)
    tornado.ioloop.IOLoop.instance().start()
</snippet></ROW><ROW><id>19007046</id><snippet>nonzero_coordinates = np.argwhere(data != 0)
nonzero_values = np.extract(data, data)
</snippet></ROW><ROW><id>19007046</id><snippet>nonzero_values = data[data!=0]
</snippet></ROW><ROW><id>19007046</id><snippet>nonzero_values</snippet></ROW><ROW><id>19007049</id><snippet>width</snippet></ROW><ROW><id>19007049</id><snippet>&gt;&gt;&gt; '{:&gt;{width}} {:&gt;{width}}'.format(1, 2, width=5)
'    1     2'
</snippet></ROW><ROW><id>19007172</id><snippet>from django.contrib import admin

admin.autodiscover()

urlpatterns = patterns('',
    (r'^admin/', include(admin.site.urls)),
)
</snippet></ROW><ROW><id>19007172</id><snippet>site</snippet></ROW><ROW><id>19007172</id><snippet>admin</snippet></ROW><ROW><id>19007172</id><snippet>urls</snippet></ROW><ROW><id>19007172</id><snippet>(r'^admin\/?$',include('django.contrib.admin.site.urls'))
</snippet></ROW><ROW><id>19007172</id><snippet>^admin\/?$</snippet></ROW><ROW><id>19007172</id><snippet>$</snippet></ROW><ROW><id>19007172</id><snippet>^admin/</snippet></ROW><ROW><id>19007395</id><snippet>    0    1    2

0  -1    0    1

1   1   -1    4

2   1    4   -1
</snippet></ROW><ROW><id>19007395</id><snippet>-1,0,1;1,-1,4;1,4,-1</snippet></ROW><ROW><id>19007395</id><snippet>collections.defaultdict</snippet></ROW><ROW><id>19007395</id><snippet>&gt;&gt;&gt; d = defaultdict(dict)
&gt;&gt;&gt; input = '-1,0,1;1,-1,4;1,4,-1'
&gt;&gt;&gt; lst = map(lambda x: map(lambda y: int(y), x.split(',')), input.split(';'))
&gt;&gt;&gt; for i,j in enumerate(lst):
...     for k,l in enumerate(j):
...             d[i][k] = l
...
&gt;&gt;&gt; d
defaultdict(&lt;type 'dict'&gt;, {0: {0: -1, 1: 0, 2: 1}, 1: {0: 1, 1: -1, 2: 4}, 2: {
0: 1, 1: 4, 2: -1}})
</snippet></ROW><ROW><id>19007443</id><snippet>x = np.arange(-L / 2., L / 2. - dx, dx)
</snippet></ROW><ROW><id>19007443</id><snippet>dx</snippet></ROW><ROW><id>19007443</id><snippet>L = 10
dxs =  np.array([1,2,3])
xs = [ np.arange(-L/2, L/2, dx) for dx in dxs ]
</snippet></ROW><ROW><id>19007443</id><snippet>xs</snippet></ROW><ROW><id>19007443</id><snippet>[array([-5, -4, -3, -2, -1,  0,  1,  2,  3,  4]),
 array([-5, -3, -1,  1,  3]),
 array([-5, -2,  1,  4])]
</snippet></ROW><ROW><id>19007443</id><snippet>-dx</snippet></ROW><ROW><id>19007443</id><snippet>L/2 - dx</snippet></ROW><ROW><id>19007443</id><snippet>L/2</snippet></ROW><ROW><id>19007443</id><snippet>arange</snippet></ROW><ROW><id>19007443</id><snippet>L/2</snippet></ROW><ROW><id>19007443</id><snippet>5</snippet></ROW><ROW><id>19007443</id><snippet>x = np.arange(-L/2, L/2)
x
#array([-5, -4, -3, -2, -1,  0,  1,  2,  3,  4])

x * dxs[...,None]
#array([[ -5,  -4,  -3,  -2,  -1,   0,   1,   2,   3,   4],
#       [-10,  -8,  -6,  -4,  -2,   0,   2,   4,   6,   8],
#       [-15, -12,  -9,  -6,  -3,   0,   3,   6,   9,  12]])
</snippet></ROW><ROW><id>19007597</id><snippet>   &lt;record model="ir.ui.view" id="hr_tree_view"&gt;
        &lt;field name="name"&gt;hr.tree.form.inherited&lt;/field&gt;
        &lt;field name="model"&gt;hr.employee&lt;/field&gt;
        &lt;field name="inherit_id" ref="hr.view_employee_tree"/&gt;
        &lt;field name="arch" type="xml"&gt;
            &lt;field name="name" position='after'&gt;
                &lt;field name="Your_field"/&gt;
            &lt;/field&gt;
        &lt;/field&gt;
    &lt;/record&gt;
</snippet></ROW><ROW><id>19007761</id><snippet>update_document(document, data_dict)</snippet></ROW><ROW><id>19007761</id><snippet>data_dict</snippet></ROW><ROW><id>19007761</id><snippet>data_dict</snippet></ROW><ROW><id>19007761</id><snippet>field_value(field, value)</snippet></ROW><ROW><id>19007761</id><snippet>field</snippet></ROW><ROW><id>19007761</id><snippet>field_value()</snippet></ROW><ROW><id>19007761</id><snippet>field.__class__</snippet></ROW><ROW><id>19007761</id><snippet>StringField</snippet></ROW><ROW><id>19007761</id><snippet>EmbeddedDocumentField</snippet></ROW><ROW><id>19007761</id><snippet>from mongoengine import fields


def update_document(document, data_dict):

    def field_value(field, value):

        if field.__class__ in (fields.ListField, fields.SortedListField):
            return [
                field_value(field.field, item)
                for item in value
            ]
        if field.__class__ in (
            fields.EmbeddedDocumentField,
            fields.GenericEmbeddedDocumentField,
            fields.ReferenceField,
            fields.GenericReferenceField
        ):
            return field.document_type(**value)
        else:
            return value

    [setattr(
        document, key,
        field_value(document._fields[key], value)
    ) for key, value in data_dict.items()]

    return document
</snippet></ROW><ROW><id>19007761</id><snippet>class Pets(EmbeddedDocument):
    name = StringField()

class Person(Document):
    name = StringField()
    address = StringField()
    pets = ListField(EmbeddedDocumentField(Pets))

p = Person()

data = {
    "name": "Hank",
    "address": "Far away",
    "pets": [
        {
            "name": "Scooter"
        }
    ]
}

update_document(p, data)
</snippet></ROW><ROW><id>19007888</id><snippet>with open('some_file_1.txt', 'r') as file1:
    with open('some_file_2.txt', 'r') as file2:
        same = set(file1).intersection(file2)

same.discard('\n')

with open('some_output_file.txt', 'w') as FO:
    for line in same:
        FO.write(line)
</snippet></ROW><ROW><id>19007957</id><snippet>account['sites']</snippet></ROW><ROW><id>19007957</id><snippet>site_id</snippet></ROW><ROW><id>19007957</id><snippet>for site in account['sites']:
    print site['site_id']
</snippet></ROW><ROW><id>19008255</id><snippet>localhost:8000</snippet></ROW><ROW><id>19008255</id><snippet>url_for</snippet></ROW><ROW><id>19008255</id><snippet>&lt;script src="{{ url_for('static', filename='d3.js') }}"&gt;&lt;/script&gt;
</snippet></ROW><ROW><id>19008255</id><snippet>&lt;script src="/static/d3.js"&gt;&lt;/script&gt;
</snippet></ROW><ROW><id>19008255</id><snippet>/static</snippet></ROW><ROW><id>19008255</id><snippet>static</snippet></ROW><ROW><id>19008255</id><snippet>/static</snippet></ROW><ROW><id>19008255</id><snippet>static/images/img1.png</snippet></ROW><ROW><id>19008255</id><snippet>/static/images/img1.png</snippet></ROW><ROW><id>19008255</id><snippet>&lt;img src="{{ url_for('static', filename='img/img01.png') }}"&gt;&lt;/img&gt;
</snippet></ROW><ROW><id>19008255</id><snippet>&lt;img src="/static/img/img01.png"&gt;&lt;/img&gt;
</snippet></ROW><ROW><id>19008255</id><snippet>file:///C:/Python27/my/app/folders/etc/</snippet></ROW><ROW><id>19008255</id><snippet>localhost:8000</snippet></ROW><ROW><id>19008255</id><snippet>&lt;img src="file:///C:/Python27/my/app/folders/etc"&gt;&lt;/img&gt;</snippet></ROW><ROW><id>19008255</id><snippet>localhost:8000</snippet></ROW><ROW><id>19008255</id><snippet>google.com</snippet></ROW><ROW><id>19008255</id><snippet>example.com/index.html</snippet></ROW><ROW><id>19008255</id><snippet>file:///home/mark/index.html</snippet></ROW><ROW><id>19008255</id><snippet>localhost:8000</snippet></ROW><ROW><id>19008255</id><snippet>file:///...</snippet></ROW><ROW><id>19008255</id><snippet>/static</snippet></ROW><ROW><id>19008381</id><snippet>order_by(Page.rank==0, Page.rank)
</snippet></ROW><ROW><id>19008403</id><snippet>init_app</snippet></ROW><ROW><id>19008403</id><snippet>create_all()</snippet></ROW><ROW><id>19008403</id><snippet>main()</snippet></ROW><ROW><id>19008403</id><snippet>project/__init__.py</snippet></ROW><ROW><id>19008403</id><snippet>project/__init__.py</snippet></ROW><ROW><id>19008403</id><snippet>models</snippet></ROW><ROW><id>19008403</id><snippet>models</snippet></ROW><ROW><id>19008403</id><snippet>app</snippet></ROW><ROW><id>19008403</id><snippet>project</snippet></ROW><ROW><id>19008403</id><snippet>app</snippet></ROW><ROW><id>19008403</id><snippet>project</snippet></ROW><ROW><id>19008403</id><snippet>model</snippet></ROW><ROW><id>19008403</id><snippet>app</snippet></ROW><ROW><id>19008403</id><snippet>package</snippet></ROW><ROW><id>19008403</id><snippet>app</snippet></ROW><ROW><id>19008403</id><snippet>Models/__init__.py</snippet></ROW><ROW><id>19008403</id><snippet>SQLAlchemy</snippet></ROW><ROW><id>19008403</id><snippet>create_all()</snippet></ROW><ROW><id>19008403</id><snippet>drop_all()</snippet></ROW><ROW><id>19008403</id><snippet>SQLAlchemy</snippet></ROW><ROW><id>19008403</id><snippet>SQLAlchemy</snippet></ROW><ROW><id>19008403</id><snippet>Models</snippet></ROW><ROW><id>19008403</id><snippet>app</snippet></ROW><ROW><id>19008403</id><snippet>db = SQLAlchemy(app)
</snippet></ROW><ROW><id>19008403</id><snippet>db.init_app(app)
</snippet></ROW><ROW><id>19008403</id><snippet>create_all()</snippet></ROW><ROW><id>19008403</id><snippet>before_first_request()</snippet></ROW><ROW><id>19008403</id><snippet>app = Flask(...)

@app.before_first_request
def initialize_database():
    db.create_all()
</snippet></ROW><ROW><id>19008403</id><snippet>app_context()</snippet></ROW><ROW><id>19008403</id><snippet>app = Flask(...)
with app.app_context():
    # This should work because we are in an app context.
    db.create_all()
</snippet></ROW><ROW><id>19008521</id><snippet>os.path.isfile()</snippet></ROW><ROW><id>19008521</id><snippet>print(pathname)</snippet></ROW><ROW><id>19008521</id><snippet>cmd</snippet></ROW><ROW><id>19008521</id><snippet>dir</snippet></ROW><ROW><id>19008521</id><snippet>"</snippet></ROW><ROW><id>19008521</id><snippet>"</snippet></ROW><ROW><id>19008583</id><snippet>ts = np.array(t, dtype=dt)
</snippet></ROW><ROW><id>19008583</id><snippet>table</snippet></ROW><ROW><id>19008583</id><snippet>'RIGHT'</snippet></ROW><ROW><id>19008583</id><snippet>'RIGHT'</snippet></ROW><ROW><id>19008583</id><snippet>&gt;&gt;&gt; t[:2,:-1]
array([['0.00', '0.00', '5.751E-01', '-2.08', '9.532E-05', '-86.19', '1.7442', '-73.8670', '1.7442', '0.0002', '0.00'],
       ['2.00', '0.00', '5.747E-01', '-2.11', '1.291E-04', '-82.47', '1.7390', '-71.2312', '1.7390', '0.0002', '0.00']], 
      dtype='|S9')

&gt;&gt;&gt; np.array(t[:2,:-1], dt)
array([[(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, '0.00'),
        (0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, '0.00'),
        (0.5751, 0.5751, 0.5751, 0.5751, 0.5751, 0.5751, 0.5751, 0.5751, 0.5751, 0.5751, 0.5751, '5.751'),
        (-2.08, -2.08, -2.08, -2.08, -2.08, -2.08, -2.08, -2.08, -2.08, -2.08, -2.08, '-2.08'),
        (9.532e-05, 9.532e-05, 9.532e-05, 9.532e-05, 9.532e-05, 9.532e-05, 9.532e-05, 9.532e-05, 9.532e-05, 9.532e-05, 9.532e-05, '9.532'),
        (-86.19, -86.19, -86.19, -86.19, -86.19, -86.19, -86.19, -86.19, -86.19, -86.19, -86.19, '-86.1'),
        (1.7442, 1.7442, 1.7442, 1.7442, 1.7442, 1.7442, 1.7442, 1.7442, 1.7442, 1.7442, 1.7442, '1.744'),
        (-73.867, -73.867, -73.867, -73.867, -73.867, -73.867, -73.867, -73.867, -73.867, -73.867, -73.867, '-73.8'),
        (1.7442, 1.7442, 1.7442, 1.7442, 1.7442, 1.7442, 1.7442, 1.7442, 1.7442, 1.7442, 1.7442, '1.744'),
        (0.0002, 0.0002, 0.0002, 0.0002, 0.0002, 0.0002, 0.0002, 0.0002, 0.0002, 0.0002, 0.0002, '0.000'),
        (0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, '0.00')],
       [(2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, '2.00'),
        (0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, '0.00'),
        (0.5747, 0.5747, 0.5747, 0.5747, 0.5747, 0.5747, 0.5747, 0.5747, 0.5747, 0.5747, 0.5747, '5.747'),
        (-2.11, -2.11, -2.11, -2.11, -2.11, -2.11, -2.11, -2.11, -2.11, -2.11, -2.11, '-2.11'),
        (0.0001291, 0.0001291, 0.0001291, 0.0001291, 0.0001291, 0.0001291, 0.0001291, 0.0001291, 0.0001291, 0.0001291, 0.0001291, '1.291'),
        (-82.47, -82.47, -82.47, -82.47, -82.47, -82.47, -82.47, -82.47, -82.47, -82.47, -82.47, '-82.4'),
        (1.739, 1.739, 1.739, 1.739, 1.739, 1.739, 1.739, 1.739, 1.739, 1.739, 1.739, '1.739'),
        (-71.2312, -71.2312, -71.2312, -71.2312, -71.2312, -71.2312, -71.2312, -71.2312, -71.2312, -71.2312, -71.2312, '-71.2'),
        (1.739, 1.739, 1.739, 1.739, 1.739, 1.739, 1.739, 1.739, 1.739, 1.739, 1.739, '1.739'),
        (0.0002, 0.0002, 0.0002, 0.0002, 0.0002, 0.0002, 0.0002, 0.0002, 0.0002, 0.0002, 0.0002, '0.000'),
        (0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, '0.00')]], 
      dtype=[('LOCATION_THETA', '&lt;f8'), ('LOCATION_PHI', '&lt;f8'), ('ETHETA_MAGN', '&lt;f8'), ('ETHETA_PHASE', '&lt;f8'), ('EPHI_MAGN', '&lt;f8'), ('EPHI_PHASE', '&lt;f8'), ('DIRECTIVITY_VERT', '&lt;f8'), ('DIRECTIVITY_HORIZ', '&lt;f8'), ('DIRECTIVITY_TOTAL', '&lt;f8'), ('POLARISATION_AXIALR', '&lt;f8'), ('POLARISATION_ANGLE', '&lt;f8'), ('POLARISATION_DIRECTION', 'S5')])
</snippet></ROW><ROW><id>19008583</id><snippet>datatype1</snippet></ROW><ROW><id>19008583</id><snippet>view</snippet></ROW><ROW><id>19008583</id><snippet>recarray</snippet></ROW><ROW><id>19008583</id><snippet>fromarrays</snippet></ROW><ROW><id>19008583</id><snippet>&gt;&gt;&gt; np.rec.fromarrays(t.T, dt)
rec.array([ (0.0, 0.0, 0.5751, -2.08, 9.532e-05, -86.19, 1.7442, -73.867, 1.7442, 0.0002, 0.0, 'RIGHT'),
       (2.0, 0.0, 0.5747, -2.11, 0.0001291, -82.47, 1.739, -71.2312, 1.739, 0.0002, 0.0, 'RIGHT'),
       (4.0, 0.0, 0.5738, -2.21, 0.0001632, -80.31, 1.7243, -69.1973, 1.7243, 0.0003, 0.0, 'RIGHT'),
       (6.0, 0.0, 0.5722, -2.38, 0.0001973, -78.94, 1.7001, -67.5479, 1.7001, 0.0003, 0.0, 'RIGHT'),
       (8.0, 0.0, 0.5699, -2.61, 0.0002314, -78.02, 1.6663, -66.1644, 1.6663, 0.0004, 0.01, 'RIGHT')], 
      dtype=[('LOCATION_THETA', '&lt;f8'), ('LOCATION_PHI', '&lt;f8'), ('ETHETA_MAGN', '&lt;f8'), ('ETHETA_PHASE', '&lt;f8'), ('EPHI_MAGN', '&lt;f8'), ('EPHI_PHASE', '&lt;f8'), ('DIRECTIVITY_VERT', '&lt;f8'), ('DIRECTIVITY_HORIZ', '&lt;f8'), ('DIRECTIVITY_TOTAL', '&lt;f8'), ('POLARISATION_AXIALR', '&lt;f8'), ('POLARISATION_ANGLE', '&lt;f8'), ('POLARISATION_DIRECTION', 'S5')])
</snippet></ROW><ROW><id>19008583</id><snippet>rec.array</snippet></ROW><ROW><id>19008583</id><snippet>&gt;&gt;&gt; np.asarray(np.rec.fromarrays(t.T, dt))
</snippet></ROW><ROW><id>19008693</id><snippet>open()</snippet></ROW><ROW><id>19008693</id><snippet>urllib</snippet></ROW><ROW><id>19008693</id><snippet>requests</snippet></ROW><ROW><id>19008798</id><snippet>myf.replace("&lt;!--10305--&gt;", "")
</snippet></ROW><ROW><id>19008798</id><snippet>myf</snippet></ROW><ROW><id>19008798</id><snippet>myf = myf.replace("&lt;!--10305--&gt;", "")
</snippet></ROW><ROW><id>19008798</id><snippet>import re

myf = """\
&lt;h4&gt;  Founded in

&lt;/h4&gt;&lt;/td&gt;&lt;td&gt;&lt;h5&gt; &lt;!--10305--&gt; 1949&lt;/h5&gt;&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;"""

myf.replace("&lt;!--10305--&gt;", "")

year = re.findall(r"&lt;h4&gt;  Founded in.*? (.*?)&lt;/h5&gt;&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;", myf, re.DOTALL)

year
#&gt;&gt;&gt; ['&lt;!--10305--&gt; 1949']
</snippet></ROW><ROW><id>19008863</id><snippet>howManyX = int(raw_input('Input number of x-values for this graph: '))

x_col_nums = [1] * 6
for i in range(howManyX):
    x_col_nums[i] = int(raw_input("Input column number for x%d-value: " % (i + 1)))
</snippet></ROW><ROW><id>19008863</id><snippet>for x1 in x_col_nums:
    # all your second block of code goes here
    # you might want to change the variable name x1 to just be x, which might
    # make it clearer
</snippet></ROW><ROW><id>19008863</id><snippet>x(n)Axis</snippet></ROW><ROW><id>19008863</id><snippet>xaxes = []
</snippet></ROW><ROW><id>19008863</id><snippet>    xaxes.append(x1Axis)
</snippet></ROW><ROW><id>19008863</id><snippet>x1Axis</snippet></ROW><ROW><id>19008863</id><snippet>x2Axis</snippet></ROW><ROW><id>19008863</id><snippet>xaxes[0]</snippet></ROW><ROW><id>19008863</id><snippet>xaxes[1]</snippet></ROW><ROW><id>19008886</id><snippet>CustomStreamListener</snippet></ROW><ROW><id>19008886</id><snippet>__init__</snippet></ROW><ROW><id>19008886</id><snippet>status</snippet></ROW><ROW><id>19008886</id><snippet>sapi = tweepy.streaming.Stream(auth, CustomStreamListener())
</snippet></ROW><ROW><id>19008886</id><snippet>CustomStreamListener</snippet></ROW><ROW><id>19008886</id><snippet>__init__() takes exactly 2 arguments (1 given)
</snippet></ROW><ROW><id>19008886</id><snippet>__init__</snippet></ROW><ROW><id>19008886</id><snippet>self</snippet></ROW><ROW><id>19008886</id><snippet>status</snippet></ROW><ROW><id>19008886</id><snippet>status</snippet></ROW><ROW><id>19009049</id><snippet>sudo</snippet></ROW><ROW><id>19009049</id><snippet>python systrace.py -o output.html</snippet></ROW><ROW><id>19009049</id><snippet>PATH</snippet></ROW><ROW><id>19009049</id><snippet>sudo</snippet></ROW><ROW><id>19009049</id><snippet>PATH</snippet></ROW><ROW><id>19009049</id><snippet>sudo</snippet></ROW><ROW><id>19009049</id><snippet>File "systrace.py", line 274, in &lt;module&gt;
 main()
File "systrace.py", line 63, in main
 os.execv(legacy_script, sys.argv)
OSError: [Errno 13] Permission denied
</snippet></ROW><ROW><id>19009049</id><snippet>$chmod +x ./systrace-legacy.py
</snippet></ROW><ROW><id>19009145</id><snippet>if</snippet></ROW><ROW><id>19009145</id><snippet>if temp.upper() != "END":
    s += temp
    return getpayload(s)
</snippet></ROW><ROW><id>19009145</id><snippet>return</snippet></ROW><ROW><id>19009145</id><snippet>return s</snippet></ROW><ROW><id>19009145</id><snippet>None</snippet></ROW><ROW><id>19009157</id><snippet>while</snippet></ROW><ROW><id>19009157</id><snippet>for</snippet></ROW><ROW><id>19009157</id><snippet>def typeText(text, delay=0.05):
  for character in text:
    print character,
    time.sleep(delay)

typeText("Hello, this is a text")
</snippet></ROW><ROW><id>19009157</id><snippet>print</snippet></ROW><ROW><id>19009157</id><snippet>end</snippet></ROW><ROW><id>19009157</id><snippet>from __future__ import print_function</snippet></ROW><ROW><id>19009157</id><snippet>print</snippet></ROW><ROW><id>19009157</id><snippet>sys.stdout.write()</snippet></ROW><ROW><id>19009465</id><snippet>3</snippet></ROW><ROW><id>19009465</id><snippet>#UNTESTED
for period in myweather_sum:
    if period['period'] == 3:
        myforday = period['title']
        myfctxt = period['fcttext_metric']
        print myforday
        print myfctxt
</snippet></ROW><ROW><id>19009643</id><snippet>AllInstances</snippet></ROW><ROW><id>19009643</id><snippet>Frame</snippet></ROW><ROW><id>19009643</id><snippet>Frame</snippet></ROW><ROW><id>19009643</id><snippet>root.all_instances</snippet></ROW><ROW><id>19009643</id><snippet>import tkinter as tk

class FrameGroup(tk.Frame):
    def __init__(self, parent):
        tk.Frame.__init__(self, parent)
        self.all_instances = []
        self.counter = 0

    def Add(self):
        self.counter += 1
        name = "Frame %s" % self.counter 
        subframe = Subframe(self, name=name)
        subframe.pack(side="left", fill="y")
        self.all_instances.append(subframe)

    def Remove(self, instance):
        # don't allow the user to destroy the last item
        if len(self.all_instances) &gt; 1:
            index = self.all_instances.index(instance)
            subframe = self.all_instances.pop(index)
            subframe.destroy()

    def HowMany(self):
        return len(self.all_instances)

    def ShowMe(self):
        for instance in self.all_instances:
            print(instance.get())

class Subframe(tk.Frame):
    def __init__(self, parent, name):
        tk.Frame.__init__(self, parent)
        self.parent = parent
        self.e1 = tk.Entry(self)
        self.e2 = tk.Entry(self)
        self.e3 = tk.Entry(self)
        label = tk.Label(self, text=name, anchor="center")
        add_button = tk.Button(self, text="Add", command=self.parent.Add)
        remove_button = tk.Button(self, text="Remove", command=lambda: self.parent.Remove(self))

        label.pack(side="top", fill="x")
        self.e1.pack(side="top", fill="x")
        self.e2.pack(side="top", fill="x")
        self.e3.pack(side="top", fill="x")
        add_button.pack(side="top")
        remove_button.pack(side="top")

    def get(self):
        return (self.e1.get(), self.e2.get(), self.e3.get())

class GUI(tk.Tk):
    def __init__(self):
        tk.Tk.__init__(self)
        self.master_frame = tk.Frame(self)
        self.master_frame.grid()
        self.all_instances = FrameGroup(self.master_frame)
        self.all_instances.grid()

        # create the first frame
        self.all_instances.Add()

root = GUI()
root.mainloop()
</snippet></ROW><ROW><id>19009710</id><snippet>def extractor(xpathselector, selector):
    """
    Helper function that extract info from xpathselector object
    using the selector constrains.
    """
    val = xpathselector.select(selector).extract()
    return val[0] if val else None
</snippet></ROW><ROW><id>19009710</id><snippet>citem['name'] = extractor(cotacao, "td[4]/text()")
</snippet></ROW><ROW><id>19009710</id><snippet>citem</snippet></ROW><ROW><id>19009710</id><snippet>None</snippet></ROW><ROW><id>19009710</id><snippet>''</snippet></ROW><ROW><id>19010160</id><snippet>%pprint</snippet></ROW><ROW><id>19010160</id><snippet>In [1]: range(24)
Out[1]:
[0,
 1,
 2,
 ...
 21,
 22,
 23]

In [2]: %pprint
Pretty printing has been turned OFF

In [3]: range(24)
Out[3]: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23]
</snippet></ROW><ROW><id>19010160</id><snippet>pprint</snippet></ROW><ROW><id>19010160</id><snippet>c.PlainTextFormatter.pprint = False</snippet></ROW><ROW><id>19010160</id><snippet>$ ipython profile create
[ProfileCreate] Generating default config file: '.../ipython_config.py'
[ProfileCreate] Generating default config file: u'..../ipython_notebook_config.py'
$ echo 'c.PlainTextFormatter.pprint = False' &gt;&gt; ~/.ipython/profile_default/ipython_config.py
</snippet></ROW><ROW><id>19010315</id><snippet>dict.items()</snippet></ROW><ROW><id>19010315</id><snippet>dict.iteritems()</snippet></ROW><ROW><id>19010315</id><snippet>for date, data in a.iteritems():
    print date,
    for key, value in data.iteritems():
        print '{}={}'.format(key, value),
    print
</snippet></ROW><ROW><id>19010315</id><snippet>for date in a:
    print date,
    for key in a[date]:
        print '{}={}'.format(key, a[date][key]),
    print
</snippet></ROW><ROW><id>19010359</id><snippet>raw_input()</snippet></ROW><ROW><id>19010359</id><snippet>user = int(raw_input('&gt; '))
</snippet></ROW><ROW><id>19010359</id><snippet>user &gt; computer</snippet></ROW><ROW><id>19010359</id><snippet>&gt;&gt;&gt; '' &gt; 0
True
</snippet></ROW><ROW><id>19010359</id><snippet>&gt;&gt;&gt; '' &gt; 0
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
TypeError: unorderable types: str() &gt; int()
</snippet></ROW><ROW><id>19010359</id><snippet>int()</snippet></ROW><ROW><id>19010359</id><snippet>ValueError</snippet></ROW><ROW><id>19010359</id><snippet>&gt;&gt;&gt; int('42')
42
&gt;&gt;&gt; int('fortytwo')
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
ValueError: invalid literal for int() with base 10: 'fortytwo'
</snippet></ROW><ROW><id>19010359</id><snippet>def askForNumber():
    while True:
        try:
            return int(raw_input('&gt; '))
        except ValueError:
            print "Not a number, please try again"


def guessNumber():
    user = askForNumber()
    while user != computer:
        if user &gt; computer:
            print "Your number is too big"
            user = askForNumber()
        else:
            print "Naa! too small. Try a bit higher number"
            user = askForNumber()
    print "Now the numbers are equal"
</snippet></ROW><ROW><id>19010588</id><snippet>thread</snippet></ROW><ROW><id>19010588</id><snippet>queue</snippet></ROW><ROW><id>19010588</id><snippet>x</snippet></ROW><ROW><id>19010588</id><snippet>x</snippet></ROW><ROW><id>19010588</id><snippet>from threading import Thread
from Queue import Queue

class myGUIApp:
    def __init()__: 
        ....
    def createwidgets():
        ....

if __name__ == "__main__":
    import myBackgroundTasks
    QUEUE = Queue()
    def queue_fun(q):
        x = myBackgroundTasks()
        x.startbackground1()  &lt;----- this is background task that doesn't need user interaction
        x.startbackground2() &lt;----- this is background task that doesn't need user interaction
        q.put(x)
    THREAD = Thread(target=queue_fun, args=QUEUE)
    THREAD.start()
    MainWindow = myGUIApp()
    MainWindow.show() &lt;---- this is Pyside GUI

    # if you can wait until after mainloop terminates to get x, put this here
    while THREAD.is_alive()
        try:
            x = QUEUE.get_nowait()
        except Queue.Empty:
            continue
    # if you need this inside Pyside, then you should put this inside Pyside,
    # but don't use while loop, use Qt after function and call self.wait

    def wait(self):
        try:
            x = QUEUE.get_nowait()
        except Queue.Empty:
            self.after(5, self.wait)
</snippet></ROW><ROW><id>19010602</id><snippet># Python 2.x

print 'before', 42, 'after'
print 'before ' + str(42) + ' after'
print '%s %d %s' % ('before', 42, 'after')  # deprecated
print '{} {} {}'.format('before', 42, 'after')

# Python 3.x

print('before', 42, 'after', sep=' ')
print('before ' + str(42) + ' after')
print('%s %d %s' % ('before', 42, 'after')) # deprecated
print('{} {} {}'.format('before', 42, 'after'))
</snippet></ROW><ROW><id>19010602</id><snippet>=&gt; before 42 after
</snippet></ROW><ROW><id>19010607</id><snippet>.pid</snippet></ROW><ROW><id>19010607</id><snippet>start</snippet></ROW><ROW><id>19010812</id><snippet>for set in self.view_ports:
        for x, y in set:
</snippet></ROW><ROW><id>19011032</id><snippet>import mypackage.image

this_image = image.png(...)
that_image = image.jpeg(....)
</snippet></ROW><ROW><id>19011032</id><snippet>__init__</snippet></ROW><ROW><id>19011032</id><snippet>image</snippet></ROW><ROW><id>19011032</id><snippet>__init__.py</snippet></ROW><ROW><id>19011032</id><snippet>image.py</snippet></ROW><ROW><id>19011032</id><snippet>from _jpeg import jpeg
from _png import png
</snippet></ROW><ROW><id>19011032</id><snippet>_jpeg.py</snippet></ROW><ROW><id>19011032</id><snippet>class jpeg(...):
    ...
</snippet></ROW><ROW><id>19011032</id><snippet>_png.py</snippet></ROW><ROW><id>19011032</id><snippet>class png(...):
    ...
</snippet></ROW><ROW><id>19011032</id><snippet># if gathered in __init__
import mypackage
this_image = mypackage.png(...)
that_image = mypackage.jpeg(...)
</snippet></ROW><ROW><id>19011032</id><snippet># if gathered in image.py
from mypackage import image
this_image = image.png(...)
that_image = image.jpeg(....)
</snippet></ROW><ROW><id>19011061</id><snippet>a[a[:,2]&gt;=15.0, :]
</snippet></ROW><ROW><id>19011061</id><snippet>a[:,2]&lt;15.0</snippet></ROW><ROW><id>19011061</id><snippet>a[:,2]&gt;=15.0</snippet></ROW><ROW><id>19011061</id><snippet>~</snippet></ROW><ROW><id>19011061</id><snippet>a[~(a[:,2]&lt;15.0), :]
</snippet></ROW><ROW><id>19011259</id><snippet>importlib</snippet></ROW><ROW><id>19011259</id><snippet>&gt;&gt;&gt; import importlib.machinery
&gt;&gt;&gt; loader = importlib.machinery.SourceFileLoader('a_b', '/tmp/a-b.txt')
&gt;&gt;&gt; mod = loader.load_module()
&gt;&gt;&gt; mod
&lt;module 'a_b' from '/tmp/a-b.txt'&gt;
</snippet></ROW><ROW><id>19011361</id><snippet>import itertools

for i in itertools.product(['a1','a2','a3'], ['b1','b2'],['c1','c2','c3','c4']):
    print '_'.join(i)
</snippet></ROW><ROW><id>19011361</id><snippet>a1_b1_c1
a1_b1_c2
a1_b1_c3
...
a3_b2_c1
a3_b2_c2
a3_b2_c3
a3_b2_c4
</snippet></ROW><ROW><id>19011586</id><snippet>if __name__ == '__main__'</snippet></ROW><ROW><id>19011586</id><snippet>from multiprocessing import Pool
import time

start = time.clock()

def f(x):
    return x*x

def testfunc(r):
    print(True)
    with Pool(processes=7) as pool:     
        result = pool.map(f, range(r))
    return result

if __name__ == '__main__':
    result = testfunc(1000)
    print(time.clock() - start)
</snippet></ROW><ROW><id>19011586</id><snippet>multiprocessing - Programming guidelines</snippet></ROW><ROW><id>19011618</id><snippet>numpy</snippet></ROW><ROW><id>19011689</id><snippet>VariantDir('buildA', '.', duplicate=0)
VariantDir('buildB', '.', duplicate=0)

env.Library('libraryA', 'buildA/source.c', CCFLAGS=['-DCONFIG_X'])
env.Library('libraryB', 'buildB/source.c', CCFLAGS=['-DCONFIG_Y'])
</snippet></ROW><ROW><id>19011689</id><snippet>source.c</snippet></ROW><ROW><id>19011689</id><snippet>buildA</snippet></ROW><ROW><id>19011689</id><snippet>buildB</snippet></ROW><ROW><id>19011689</id><snippet>source.c</snippet></ROW><ROW><id>19011689</id><snippet>SCons</snippet></ROW><ROW><id>19011941</id><snippet>self.post</snippet></ROW><ROW><id>19011941</id><snippet>self.decorator</snippet></ROW><ROW><id>19011941</id><snippet>self.decorator</snippet></ROW><ROW><id>19011941</id><snippet>self</snippet></ROW><ROW><id>19011941</id><snippet>self</snippet></ROW><ROW><id>19011941</id><snippet>decorator</snippet></ROW><ROW><id>19011941</id><snippet>self</snippet></ROW><ROW><id>19011941</id><snippet>self</snippet></ROW><ROW><id>19011941</id><snippet>class Derived(Base):
    @staticmethod
    def decorator(func):
        whatever(fund)
</snippet></ROW><ROW><id>19011941</id><snippet>class Derived(Base):
    decorator = staticmethod(whatever)
</snippet></ROW><ROW><id>19011941</id><snippet>decorator</snippet></ROW><ROW><id>19011941</id><snippet>class Derived(Base):
    def __init__(self, *args, **kwargs):
        self.decorator = whatever
        super(Derived, self).__init__(*args, **kwargs)
</snippet></ROW><ROW><id>19011941</id><snippet>self.post = self.decorator.im_func(self.post)
</snippet></ROW><ROW><id>19011941</id><snippet>decorator = type(self).__dict__['decorator']
self.post = decorator(self.post)
</snippet></ROW><ROW><id>19011999</id><snippet>get(key,0.0)</snippet></ROW><ROW><id>19011999</id><snippet>InputData = """5090071648,2013-06-05,2013-09-05,P000001,1133997,223.010,20,2013-09-10,104,xxxxxx,AP COMMENT,002091
301067,2013-09-06,2013-09-11,P000002,1133919,42.000,20,2013-10-31,103,xxxxxx,AP COMMENT,002143
301067,2013-09-06,2013-09-11,P000002,1133919,359.400,20,2013-10-31,103,xxxxxx,AP COMMENT,002143
301067,2013-09-06,2013-09-11,P000003,1133910,23.690,20,2013-10-31,103,xxxxxx,AP COMMENT,002143"""

OutD = {}
ValueD = {}

for Line in InputData.split('\n'):
    # commas in comments won't matter because we are joining after anyway
    Fields = Line.split(',') 
    PO = Fields[3]
    Value = float(Fields[5])
    # set up the output string with a placeholder for .format()
    OutD[PO] = ",".join(Fields[:5] + ["{0:.3f}"] + Fields[6:])
    # add the value to the old value or to zero if it is not found
    ValueD[PO] = ValueD.get(PO,0.0) + Value

# the output is unsorted by default, but you could sort or preserve original order
for POKey in ValueD:
    print OutD[POKey].format(ValueD[POKey])
</snippet></ROW><ROW><id>19012021</id><snippet>soup.find_all('div', class_="crBlock ")
</snippet></ROW><ROW><id>19012021</id><snippet>find()</snippet></ROW><ROW><id>19012021</id><snippet>div = soup.find('div', class_="crBlock ")
print(div.find_all(text='foobar'))
</snippet></ROW><ROW><id>19012032</id><snippet>def _messageHandler(self, *args, **kwargs):
    print util.two_byte_iter_to_str(args)
</snippet></ROW><ROW><id>19012068</id><snippet>/generate</snippet></ROW><ROW><id>19012099</id><snippet>gluOrtho2D</snippet></ROW><ROW><id>19012099</id><snippet>glOrtho</snippet></ROW><ROW><id>19012099</id><snippet>gluOrtho2D</snippet></ROW><ROW><id>19012099</id><snippet>    glOrtho(0.0, 550.0, 550.0, 0.0, -100.0, 100.0);
</snippet></ROW><ROW><id>19012099</id><snippet>    glutSolidSphere(15, 250, 250)
</snippet></ROW><ROW><id>19012104</id><snippet>\x01</snippet></ROW><ROW><id>19012267</id><snippet>b = a.replace('1', '@temp_replace@').replace('2', '1').replace('@temp_replace@', '2')
</snippet></ROW><ROW><id>19012267</id><snippet>@temp_replace@</snippet></ROW><ROW><id>19012324</id><snippet>serch_word</snippet></ROW><ROW><id>19012324</id><snippet>data</snippet></ROW><ROW><id>19012324</id><snippet>meaning</snippet></ROW><ROW><id>19012324</id><snippet>print</snippet></ROW><ROW><id>19012324</id><snippet>print_tree</snippet></ROW><ROW><id>19012324</id><snippet>print(self.data, self.meaning)
</snippet></ROW><ROW><id>19012324</id><snippet>a = node("Rusuru", "000")
a.main_word()
b=a.serch_word("Rusuru", a)
print(b[0].data, b[0].meaning)
</snippet></ROW><ROW><id>19012324</id><snippet>b</snippet></ROW><ROW><id>19012324</id><snippet>word, parent = word_tree.serch_node("Rusuru", a)
print(word.data, word.meaning)
</snippet></ROW><ROW><id>19012324</id><snippet>__str__</snippet></ROW><ROW><id>19012324</id><snippet>__repr__</snippet></ROW><ROW><id>19012324</id><snippet>def __str__(self):
    return '{} {}'.format(self.data, self.meaning)

def __repr__(self):
    return 'node({}, {})'.format(self.data, self.meaning)
</snippet></ROW><ROW><id>19012324</id><snippet>print(b)</snippet></ROW><ROW><id>19012324</id><snippet>print_tree</snippet></ROW><ROW><id>19012488</id><snippet>newList = [row[0] for row in data[1:]]
</snippet></ROW><ROW><id>19012534</id><snippet>stdout</snippet></ROW><ROW><id>19012534</id><snippet>with open('new_file.txt', 'w') as outfile:
    subprocess.call(['program', 'arg'], stdout=outfile)
</snippet></ROW><ROW><id>19012534</id><snippet>multiprocessing.Pool</snippet></ROW><ROW><id>19012534</id><snippet>Popen</snippet></ROW><ROW><id>19012534</id><snippet>multiprocessing</snippet></ROW><ROW><id>19012534</id><snippet>Popen</snippet></ROW><ROW><id>19012534</id><snippet>multiprocessing</snippet></ROW><ROW><id>19012803</id><snippet>ElementTree</snippet></ROW><ROW><id>19012803</id><snippet>import xml.etree.cElementTree as etree

# ...

if namespace_uri not in etree._namespace_map:
</snippet></ROW><ROW><id>19012803</id><snippet>ElementTree</snippet></ROW><ROW><id>19012803</id><snippet>cElementTree</snippet></ROW><ROW><id>19012803</id><snippet>import xml.etree.cElementTree as etree
import xml.etree.ElementTree

# ...

if namespace_uri not in ElementTree._namespace_map:
</snippet></ROW><ROW><id>19012803</id><snippet>fixtag</snippet></ROW><ROW><id>19012917</id><snippet>def versioncmp(current, required):
    current = [int(i) for i in current.split('.')]
    required = [int(i) for i in required.split('.')]
    return current &gt;= required
</snippet></ROW><ROW><id>19013237</id><snippet>monday.values()</snippet></ROW><ROW><id>19013237</id><snippet>if choice_day == "monday" and choice_period == "NO":
    for v in monday.values():
        print v
</snippet></ROW><ROW><id>19013237</id><snippet>if choice_day == "monday" and choice_period == "NO":
    print '\n'.join(monday.values())
</snippet></ROW><ROW><id>19013237</id><snippet>sorted</snippet></ROW><ROW><id>19013237</id><snippet>if choice_day == "monday" and choice_period == "NO":
    print '\n'.join(sorted(monday.values()))
</snippet></ROW><ROW><id>19013251</id><snippet>roll = input("Do you want to roll again? y/n");
</snippet></ROW><ROW><id>19013251</id><snippet>input</snippet></ROW><ROW><id>19013251</id><snippet>yes</snippet></ROW><ROW><id>19013251</id><snippet>yes</snippet></ROW><ROW><id>19013251</id><snippet>NameError</snippet></ROW><ROW><id>19013251</id><snippet>n</snippet></ROW><ROW><id>19013251</id><snippet>no</snippet></ROW><ROW><id>19013251</id><snippet>y</snippet></ROW><ROW><id>19013251</id><snippet>y</snippet></ROW><ROW><id>19013251</id><snippet>1</snippet></ROW><ROW><id>19013251</id><snippet>while roll == "yes" or roll == "y":</snippet></ROW><ROW><id>19013251</id><snippet>1</snippet></ROW><ROW><id>19013251</id><snippet>"y"</snippet></ROW><ROW><id>19013251</id><snippet>"yes"</snippet></ROW><ROW><id>19013251</id><snippet>raw_input</snippet></ROW><ROW><id>19013251</id><snippet>input</snippet></ROW><ROW><id>19013251</id><snippet>roll = raw_input("Do you want to roll again? y/n");
</snippet></ROW><ROW><id>19013251</id><snippet>input</snippet></ROW><ROW><id>19013251</id><snippet>__import__('os').system('dir C:\\')</snippet></ROW><ROW><id>19013251</id><snippet>ls /</snippet></ROW><ROW><id>19013251</id><snippet>raw_input</snippet></ROW><ROW><id>19013251</id><snippet>int</snippet></ROW><ROW><id>19013251</id><snippet>ast.literal_eval</snippet></ROW><ROW><id>19013251</id><snippet>eval</snippet></ROW><ROW><id>19013251</id><snippet>input</snippet></ROW><ROW><id>19013323</id><snippet>void  setExpanding(bool enabled)</snippet></ROW><ROW><id>19013323</id><snippet>QTabWidget</snippet></ROW><ROW><id>19013323</id><snippet>QTabBar</snippet></ROW><ROW><id>19013323</id><snippet>from PyQt4.QtGui import *
from PyQt4.QtCore import *
from PyQt4 import QtGui,QtCore
import sys

class Main(QWidget):
    def __init__(self,parent=None):
        QWidget.__init__(self)
        self.setFixedSize(600,500)

        self.tabBar=QTabBar(self)
        self.tabBar.setStyleSheet("QTabBar::tab{width:400px;}")
        self.tabBar.setExpanding(True)

        self.layout=QVBoxLayout(self)
        self.layout.addWidget(self.tabBar)

        self.tabBar.addTab("Kontext Menu")
        self.tabBar.addTab("Settings in detail")
        self.tabBar.addTab("Help and tips")
        self.tabBar.addTab("About")
        self.tabBar.addTab("Credits")

        self.show()

if __name__ == '__main__':
    app=QApplication(sys.argv)
    sd=Main()
    app.exec()
</snippet></ROW><ROW><id>19013555</id><snippet>base_settings.py
siteA_settings.py
siteB_settings.py
</snippet></ROW><ROW><id>19013555</id><snippet>siteA_settings.py</snippet></ROW><ROW><id>19013555</id><snippet>siteB_settings.py</snippet></ROW><ROW><id>19013555</id><snippet>base_settings.py</snippet></ROW><ROW><id>19013555</id><snippet>SITE_ID</snippet></ROW><ROW><id>19013555</id><snippet>base_settings.py</snippet></ROW><ROW><id>19013555</id><snippet>siteA_settings.py</snippet></ROW><ROW><id>19013555</id><snippet>siteB_settings.py</snippet></ROW><ROW><id>19013555</id><snippet>TEMPLATE_DIRS</snippet></ROW><ROW><id>19013555</id><snippet>python manage.py runserver --settings=mysite.siteA_settings
</snippet></ROW><ROW><id>19013555</id><snippet>python manage.py runserver --settings=mysite.siteB_settings
</snippet></ROW><ROW><id>19013555</id><snippet>Site</snippet></ROW><ROW><id>19013555</id><snippet>Model.objects</snippet></ROW><ROW><id>19013739</id><snippet>result = session.getbulk(0, 48, vars)
for i in range(0, len(result), 3):
    print "ifind: "+result[i]+" ifdesc: "+result[i+1]+" status: "+result[i+2]
</snippet></ROW><ROW><id>19013762</id><snippet>max_value</snippet></ROW><ROW><id>19013762</id><snippet>min_value</snippet></ROW><ROW><id>19013762</id><snippet>max_value</snippet></ROW><ROW><id>19013762</id><snippet>for line in opened_function_file:
    min_value, max_value = compute_min_and_max(line)
    global_max = max(max_value, global_max)
    global_min = min(min_value, global_min)
</snippet></ROW><ROW><id>19013764</id><snippet>open_settings</snippet></ROW><ROW><id>19013764</id><snippet>    def open_settings(self):
        settings = SettingsDialog()
        settings.show()
</snippet></ROW><ROW><id>19013764</id><snippet>show()</snippet></ROW><ROW><id>19013764</id><snippet>settings</snippet></ROW><ROW><id>19013764</id><snippet>SettingsDialog</snippet></ROW><ROW><id>19013764</id><snippet>SettingsDialog</snippet></ROW><ROW><id>19013764</id><snippet>QDialog</snippet></ROW><ROW><id>19013764</id><snippet>QWidget</snippet></ROW><ROW><id>19013764</id><snippet>settings.show()</snippet></ROW><ROW><id>19013764</id><snippet>settings.exec_()</snippet></ROW><ROW><id>19013764</id><snippet>settings.exec_()</snippet></ROW><ROW><id>19013764</id><snippet>QDialog.Accepted</snippet></ROW><ROW><id>19013764</id><snippet>QDialog.Rejected</snippet></ROW><ROW><id>19013764</id><snippet>self.show()</snippet></ROW><ROW><id>19013764</id><snippet>SettingsDialog</snippet></ROW><ROW><id>19013764</id><snippet>QApplication</snippet></ROW><ROW><id>19013764</id><snippet>app.setQuitOnLastWindowClosed(False)</snippet></ROW><ROW><id>19013810</id><snippet>xpath</snippet></ROW><ROW><id>19013810</id><snippet>browser.find_element_by_xpath("//div[@itemprop='softwareVersion']")
</snippet></ROW><ROW><id>19014006</id><snippet>strip()</snippet></ROW><ROW><id>19014006</id><snippet>strip('\n')</snippet></ROW><ROW><id>19014006</id><snippet>&gt;&gt;&gt; mobj.getElementsByTagName("value")[1].childNodes[0]
&lt;DOM Text node "u'\t'"&gt;
&gt;&gt;&gt; mobj.getElementsByTagName("value")[1].childNodes[0].data
u'\t'
&gt;&gt;&gt; mobj.getElementsByTagName("value")[1].childNodes[0].data.strip()
u''
&gt;&gt;&gt; mobj.getElementsByTagName("value")[1].childNodes[0].data.strip('\n')
u'\t'
</snippet></ROW><ROW><id>19014159</id><snippet>parse</snippet></ROW><ROW><id>19014159</id><snippet>parse</snippet></ROW><ROW><id>19014159</id><snippet>&lt;!DOCTYPE HTML PU…</snippet></ROW><ROW><id>19014159</id><snippet>fromstring()</snippet></ROW><ROW><id>19014159</id><snippet>lxml.etree</snippet></ROW><ROW><id>19014159</id><snippet>requests</snippet></ROW><ROW><id>19014159</id><snippet>requests</snippet></ROW><ROW><id>19014159</id><snippet>requests</snippet></ROW><ROW><id>19014186</id><snippet>message = "whatever..."*1000
tmp = message
msgList = []
while tmp:
    msgList.append(tmp[:444])
    tmp = tmp[444:]
</snippet></ROW><ROW><id>19014186</id><snippet>IndexError</snippet></ROW><ROW><id>19014186</id><snippet>message = "whatever"*1000
msgList = [message[i:i+444] for i in range(0, len(message), 444)]
</snippet></ROW><ROW><id>19014195</id><snippet>def time_between(a, b):
    minutes, seconds = divmod((b-a).total_seconds(), 60)
    hours, minutes = divmod(minutes, 60)
    return hours, minutes, seconds
</snippet></ROW><ROW><id>19014195</id><snippet>import datetime as DT

def time_between(a, b):
    minutes, seconds = divmod((b-a).total_seconds(), 60)
    hours, minutes = divmod(minutes, 60)
    return hours, minutes, seconds

# current time
tct = DT.datetime.now()
# job datetime (just for example)
we_dt = tct + DT.timedelta(hours=3, minutes=30)

work_alarm = DT.timedelta(hours=2, minutes=30)

# time till work
work_hours, work_minutes, work_seconds = time_between(tct, we_dt)

# time till get up
up_time = we_dt - work_alarm
up_hours, up_minutes, up_seconds = time_between(tct, up_time)
print("""\
Scheduled Work Time: {wt}
You have {we} in {h} + hours and {m} minutes.""".format(
          wt=we_dt.strftime('%H:%M'),
          we='something to do',
          h=work_hours,
          m=work_minutes))

if up_time &gt; tct:
    print('You need to be up in {uh}  hours and {um} minutes.'.format(
        uh=up_hours,
        um=up_minutes))
</snippet></ROW><ROW><id>19014208</id><snippet>os.system</snippet></ROW><ROW><id>19014208</id><snippet>subprocess.call</snippet></ROW><ROW><id>19014208</id><snippet>python respotify.py john doe
</snippet></ROW><ROW><id>19014208</id><snippet>stdin</snippet></ROW><ROW><id>19014208</id><snippet>search Wrecking Ball
</snippet></ROW><ROW><id>19014208</id><snippet>from subprocess import Popen, PIPE

p = Popen(["python", "respotify.py", "john", "doe"], stdin=PIPE, stdout=PIPE)
input = "search Wrecking Ball\n" + "play 1\n"
output = p.communicate(input)[0]
</snippet></ROW><ROW><id>19014208</id><snippet>p.stdin</snippet></ROW><ROW><id>19014208</id><snippet>p.stdout</snippet></ROW><ROW><id>19014208</id><snippet>from subprocess import Popen, PIPE

p = Popen(["python", "respotify.py", "john", "doe"], stdin=PIPE, stdout=PIPE)
print &gt;&gt; p.stdin, "search Wrecking Ball"
output = p.stdout.readline()
print &gt;&gt; p.stdin, "play 1"
print &gt;&gt; p.stdin, "quit"
p.wait()
</snippet></ROW><ROW><id>19014208</id><snippet>subprocess</snippet></ROW><ROW><id>19014208</id><snippet>pexpect</snippet></ROW><ROW><id>19014350</id><snippet>import urllib2
from bs4 import BeautifulSoup
from time import sleep

def getData():
    htmlfile = open('C:/html.html', 'rb')
    html = htmlfile.read()
    soup = BeautifulSoup(html)
    items = soup.find_all('div', class_="blocks")
    for item in items:
        links = item.find_all('a')
        for link in links:
            if link.parent.name == 'h3':
                print(link.text)

getData()
</snippet></ROW><ROW><id>19014537</id><snippet>re</snippet></ROW><ROW><id>19014537</id><snippet>import re
from itertools import chain

lis = ['plu;ean;price;quantity'*1000, 'plu1;ean1;price1;quantity1'*100]*1000

matcher = re.compile('^(?:plu(?:;|$)|[^;]*;ean(?:;|$))').match
[l.split(';') for l in lis if matcher(l)]
</snippet></ROW><ROW><id>19014537</id><snippet>split</snippet></ROW><ROW><id>19014537</id><snippet>SETUP="
import re
from itertools import chain
matcher = re.compile('^(?:plu(?:;|$)|[^;]*;ean(?:;|$))').match

lis = ['plu1;ean1;price1;quantity1'+chr(i) for i in range(10000)] + ['plu;ean;price;quantity' for i in range(10000)]
"

python -m timeit -s "$SETUP" "[[x] + [y] + z.split(';') for x, y, z in (item.split(';', 2) for item in lis) if x== 'plu' or y=='ean']"
python -m timeit -s "$SETUP" "[l.split(';') for l in lis if matcher(l)]"
</snippet></ROW><ROW><id>19014537</id><snippet>10 loops, best of 3: 55 msec per loop
10 loops, best of 3: 49.5 msec per loop
</snippet></ROW><ROW><id>19014537</id><snippet>SETUP="
import re
from itertools import chain
matcher = re.compile('^(?:plu(?:;|$)|[^;]*;ean(?:;|$))').match

lis = ['plu1;ean1;price1;quantity1'+chr(i) for i in range(1000)] + ['plu;ean;price;quantity' for i in range(10000)]
"

python -m timeit -s "$SETUP" "[[x] + [y] + z.split(';') for x, y, z in (item.split(';', 2) for item in lis) if x== 'plu' or y=='ean']"
python -m timeit -s "$SETUP" "[l.split(';') for l in lis if matcher(l)]"
</snippet></ROW><ROW><id>19014537</id><snippet>10 loops, best of 3: 40.9 msec per loop
10 loops, best of 3: 35.7 msec per loop
</snippet></ROW><ROW><id>19014537</id><snippet>next([x] + [y] + z.split(';') for x, y, z in (item.split(';', 2) for item in lis) if x== 'plu' or y=='ean')
</snippet></ROW><ROW><id>19014537</id><snippet>next(filter(matcher, lis)).split(';')
</snippet></ROW><ROW><id>19014537</id><snippet>itertools.ifilter</snippet></ROW><ROW><id>19014537</id><snippet>SETUP="
import re
from itertools import chain
matcher = re.compile('^(?:plu(?:;|$)|[^;]*;ean(?:;|$))').match

lis = ['plu1;ean1;price1;quantity1'+chr(i) for i in range(10000)] + ['plu;ean;price;quantity'] + ['plu1;ean1;price1;quantity1'+chr(i) for i in range(10000)]
"

python -m timeit -s "$SETUP" "[[x] + [y] + z.split(';') for x, y, z in (item.split(';', 2) for item in lis) if x== 'plu' or y=='ean']"
python -m timeit -s "$SETUP" "next([x] + [y] + z.split(';') for x, y, z in (item.split(';', 2) for item in lis) if x== 'plu' or y=='ean')"

python -m timeit -s "$SETUP" "[l.split(';') for l in lis if matcher(l)]"
python -m timeit -s "$SETUP" "next(filter(matcher, lis)).split(';')"
</snippet></ROW><ROW><id>19014537</id><snippet>10 loops, best of 3: 31.3 msec per loop
100 loops, best of 3: 15.2 msec per loop
10 loops, best of 3: 28.8 msec per loop
100 loops, best of 3: 14.1 msec per loop
</snippet></ROW><ROW><id>19014859</id><snippet>def get_counts(sequence):  # Defines the function.
   counts = {}             # Creates an empty dictionary.
   for x in sequence:      # Loops through each item in sequence
      if x in counts:      # If item already exists in dictionary
          counts[x] += 1   # Add one to the current item in dictionary
      else:                # Otherwise...
          counts[x] = 1    # Add item to dictionary, give it a count of 1
   return counts           # Returns the resulting dictionary.
</snippet></ROW><ROW><id>19015082</id><snippet>select</snippet></ROW><ROW><id>19015082</id><snippet>while True:
    # If data can be received without blocking (timeout=0), read it now
    ready = select.select([s], [], [], 0)
    if s in ready[0]:
        data = s.recv(1024)
        # Process data
    else:
        # No data is available, perform other tasks
</snippet></ROW><ROW><id>19015092</id><snippet>'a'</snippet></ROW><ROW><id>19015092</id><snippet>fp = open("file_name.gz", "ab+")
fp.seek(0, 2)
fsize = fp.tell()
</snippet></ROW><ROW><id>19015092</id><snippet>fstat</snippet></ROW><ROW><id>19015092</id><snippet>stat</snippet></ROW><ROW><id>19015092</id><snippet>open</snippet></ROW><ROW><id>19015092</id><snippet>fopen</snippet></ROW><ROW><id>19015092</id><snippet>fopen(3)</snippet></ROW><ROW><id>19015092</id><snippet>fopen(3)</snippet></ROW><ROW><id>19015092</id><snippet>a</snippet></ROW><ROW><id>19015115</id><snippet>re.match</snippet></ROW><ROW><id>19015115</id><snippet>re.search</snippet></ROW><ROW><id>19015115</id><snippet>import re

def split_name(filename):
    match = re.match(r'(.*?)(\d+\.[^.]+)', filename)
    if match:
        return match.groups()
    else:
        return None, None

for name in [ 'foo123.jpg', 'bar;)234.png', 'baz^_^456.JPEG', 'notanumber.bmp' ]:
    prefix, suffix = split_name(name)
    print("prefix = %r, suffix = %r" % (prefix, suffix))
</snippet></ROW><ROW><id>19015115</id><snippet>prefix = 'foo', suffix = '123.jpg'
prefix = 'bar;)', suffix = '234.png'
prefix = 'baz^_^', suffix = '456.JPEG'
prefix = None, suffix = None
</snippet></ROW><ROW><id>19015348</id><snippet>from collections import defaultdict
from itertools import product, combinations

def all_fill(source, num):
    output_len = (len(source) + num)
    for where in combinations(range(output_len), len(source)):
        poss = ([[0, 1]] * output_len)
        for (w, s) in zip(where, source):
            poss[w] = [s]
        for tup in product(*poss):
            (yield tup)

def variable_name(seq):
    return ('x' + ''.join((str(s) for s in seq)))
n = 12
shortn = ((2 * n) // 3)
x = (n // 3)
all_seqs = list(product([0, 1], repeat=shortn))
hit_sets = defaultdict(set)
for seq in all_seqs:
    for fill in all_fill(seq, x):
        hit_sets[fill].add(seq)
print('Minimize')
print(' + '.join((variable_name(seq) for seq in all_seqs)))
print('Subject To')
for (fill, seqs) in hit_sets.items():
    print(' + '.join((variable_name(seq) for seq in seqs)), '&gt;=', 1)
print('Binary')
for seq in all_seqs:
    print(variable_name(seq))
print('End')
</snippet></ROW><ROW><id>19015348</id><snippet>MIP - Integer optimal solution:  Objective =  1.0000000000e+01
Solution time =    7.66 sec.  Iterations = 47411  Nodes = 337

CPLEX&gt; Incumbent solution
Variable Name           Solution Value
x00000000                     1.000000
x00000111                     1.000000
x00011110                     1.000000
x00111011                     1.000000
x10110001                     1.000000
x11000100                     1.000000
x11001110                     1.000000
x11100001                     1.000000
x11111000                     1.000000
x11111111                     1.000000
All other variables matching '*' are 0.
CPLEX&gt; 
</snippet></ROW><ROW><id>19015364</id><snippet>\b</snippet></ROW><ROW><id>19015364</id><snippet>\\b</snippet></ROW><ROW><id>19015454</id><snippet>limit = 1000
while abs(error) &gt; 50:
    limit -= 1
    if limit == 0:
        raise SomeError
    your_calcs
</snippet></ROW><ROW><id>19015594</id><snippet>PersonContainer.add</snippet></ROW><ROW><id>19015594</id><snippet>MainDialog.OK</snippet></ROW><ROW><id>19015594</id><snippet>MainDialog.Update</snippet></ROW><ROW><id>19015594</id><snippet>self.persons.load()</snippet></ROW><ROW><id>19015594</id><snippet>Update</snippet></ROW><ROW><id>19015594</id><snippet>load</snippet></ROW><ROW><id>19015594</id><snippet>def Update(self, load=False):
    self.table.clear()
    if load:
        self.persons.load()
</snippet></ROW><ROW><id>19015594</id><snippet>load</snippet></ROW><ROW><id>19015594</id><snippet>True</snippet></ROW><ROW><id>19015594</id><snippet>__init__</snippet></ROW><ROW><id>19015594</id><snippet>def __init__(self, parent = None):
    super(MainDialog,self).__init__(parent)
    self.InitGui()
    self.persons = DContainer.PersonContainer()
    self.Update(True)
</snippet></ROW><ROW><id>19015594</id><snippet>    buttonbox.accepted.connect(self.OK)
    buttonbox.rejected.connect(self.reject)
</snippet></ROW><ROW><id>19015706</id><snippet>class Node(object):
    def __init__(self, next=None, val=None):
        self.next = next
        self.val = val
</snippet></ROW><ROW><id>19015706</id><snippet>tailnode = Node()
tailnode.val = 'foo'
midnode = Node(val='bar')
midnode.next = tailnode
headnode = Node(val='baz', next=midnode)
</snippet></ROW><ROW><id>19015721</id><snippet>5</snippet></ROW><ROW><id>19015721</id><snippet>a += b</snippet></ROW><ROW><id>19015721</id><snippet>a = a + b</snippet></ROW><ROW><id>19015721</id><snippet>&gt;&gt;&gt; tup = (1, 2, 3)
&gt;&gt;&gt; id(tup)
140153476307856
&gt;&gt;&gt; tup += (4, 5)
&gt;&gt;&gt; id(tup)
140153479825840
</snippet></ROW><ROW><id>19015721</id><snippet>id</snippet></ROW><ROW><id>19015721</id><snippet>list</snippet></ROW><ROW><id>19015721</id><snippet>&gt;&gt;&gt; lst = [1, 2, 3]
&gt;&gt;&gt; id(lst)
140153476247704
&gt;&gt;&gt; lst += [4, 5]
&gt;&gt;&gt; id(lst)
140153476247704
</snippet></ROW><ROW><id>19015721</id><snippet>id</snippet></ROW><ROW><id>19015845</id><snippet>###########
#         #
#  ###### #
#S #F     #
###########
</snippet></ROW><ROW><id>19015845</id><snippet>pygame.sprite.groupcollide()</snippet></ROW><ROW><id>19015845</id><snippet>pygame.sprite.groupcollide()</snippet></ROW><ROW><id>19015845</id><snippet>groupcollide(group1, group2, dokill1, dokill2, collided = None) -&gt; Sprite_dict
This will find collisions between all the Sprites in two groups. Collision is
determined by comparing the Sprite.rect attribute of each Sprite or by using the 
collided function if it is not None.

Every Sprite inside group1 is added to the return dictionary. The value 
for each item is the list of Sprites in group2 that intersect.
</snippet></ROW><ROW><id>19015845</id><snippet>group1</snippet></ROW><ROW><id>19015845</id><snippet>group2</snippet></ROW><ROW><id>19015845</id><snippet>{player_in_group1: [&lt;list of obstacles from group2 that collide with player&gt;] }
</snippet></ROW><ROW><id>19015845</id><snippet>def handle_collisions(sprite_dict):
    '''given sprite dict, moves all entities in group1 out of group2's
       rectangle area'''
    for p in sprite_dict:
        for o in sprite_dict[p]:
            # move p in such a way that its rectangle is no longer overlapping
            # with the rectangle of o with the additional constraint that p must
            # be moved **as minimally as possible.**
</snippet></ROW><ROW><id>19015874</id><snippet>search</snippet></ROW><ROW><id>19015874</id><snippet>StringListProperty</snippet></ROW><ROW><id>19015874</id><snippet>=</snippet></ROW><ROW><id>19015874</id><snippet>in</snippet></ROW><ROW><id>19015874</id><snippet>search_string = "Reading"
q = MentorServices.all()
q.filter("Services =", search_string)
q.fetch()
</snippet></ROW><ROW><id>19015874</id><snippet>search</snippet></ROW><ROW><id>19015874</id><snippet>TextProperty</snippet></ROW><ROW><id>19015874</id><snippet>StringListProperty</snippet></ROW><ROW><id>19015874</id><snippet>StringListProperty</snippet></ROW><ROW><id>19015874</id><snippet>search</snippet></ROW><ROW><id>19015874</id><snippet>StringListProperty</snippet></ROW><ROW><id>19015874</id><snippet>search</snippet></ROW><ROW><id>19015965</id><snippet>"Line 3: Port #: 12; Type: 5000AX-FG;\n"
</snippet></ROW><ROW><id>19015965</id><snippet>if i == 2:
    line = line.rstrip() # 'Line 3: Port #: 12; Type: 5000AX-FG;'
    words = line.split() # ['Line', '3:', 'Port', '#:', '12;', 'Type:', '5000AX-FG;']
    last_word = line[-1] # '5000AX-FG;'
    part_type = last_word.rstrip(';') # '5000AX-FG'
    print part_type
</snippet></ROW><ROW><id>19015965</id><snippet>Line 66: Duration: 11 hrs 48.0 min.  Total Elapsed Time: 16 hrs 35.6 min.
</snippet></ROW><ROW><id>19015965</id><snippet>"Line NN: "</snippet></ROW><ROW><id>19015965</id><snippet>"Line NN: "</snippet></ROW><ROW><id>19015965</id><snippet>'.'</snippet></ROW><ROW><id>19015965</id><snippet>:</snippet></ROW><ROW><id>19015965</id><snippet>def parse_line(line):
    line = line.rstrip()
    line = line.partition(':')[-1]
    parts = line.split('.')
    mapping = {}
    for part in parts:
        key, _, value = part.partition(':')
        mapping[key.strip()] = value.strip()
    return mapping
</snippet></ROW><ROW><id>19015965</id><snippet>if i == 65:
    mapping = parse_line(line)
    print mapping['Duration']
</snippet></ROW><ROW><id>19015986</id><snippet>find_elements_by_link_text()</snippet></ROW><ROW><id>19015986</id><snippet>links = driver.find_elements_by_link_text('View all hits in this text')
for link in links:
    link.click()
</snippet></ROW><ROW><id>19015986</id><snippet>links = driver.find_elements_by_xpath("//a[text() = 'View all hits in this text']")
for link in links:
   link.click()
</snippet></ROW><ROW><id>19016020</id><snippet>def parse(line, regex, label):
    m = regex.match(line)
    if m:
        return ','.join([label] + m.groups())
</snippet></ROW><ROW><id>19016020</id><snippet>with open(file) as f:
    for line in f:
        line = line.rstrip('\n')
        outline = parse(line, regexA, 'A') or parse(line, regexB, 'B') or parse(line, regexC, 'C') or parse(line, regexD, 'D')
        if outline:
            anOutPutFile.write(outline)
</snippet></ROW><ROW><id>19016197</id><snippet>("YP" or "XP")</snippet></ROW><ROW><id>19016197</id><snippet>"YP"</snippet></ROW><ROW><id>19016197</id><snippet>"YP"</snippet></ROW><ROW><id>19016197</id><snippet>"XP"</snippet></ROW><ROW><id>19016197</id><snippet>True</snippet></ROW><ROW><id>19016197</id><snippet>"YP"</snippet></ROW><ROW><id>19016197</id><snippet>False</snippet></ROW><ROW><id>19016197</id><snippet>"XP"</snippet></ROW><ROW><id>19016197</id><snippet>"YP"</snippet></ROW><ROW><id>19016197</id><snippet>"YP"</snippet></ROW><ROW><id>19016197</id><snippet>a[:2]</snippet></ROW><ROW><id>19016197</id><snippet>XP</snippet></ROW><ROW><id>19016197</id><snippet>str()</snippet></ROW><ROW><id>19016197</id><snippet>a</snippet></ROW><ROW><id>19016197</id><snippet>&gt;&gt;&gt; a = "XPZC"
&gt;&gt;&gt; a[:2]
'XP'
&gt;&gt;&gt; "YP" or "XP"
'YP'
</snippet></ROW><ROW><id>19016197</id><snippet>in</snippet></ROW><ROW><id>19016197</id><snippet>&gt;&gt;&gt; a[:2] in ("YP", "XP")
True
</snippet></ROW><ROW><id>19016197</id><snippet>or</snippet></ROW><ROW><id>19016197</id><snippet>&gt;&gt;&gt; s = a[:2]
&gt;&gt;&gt; s == "YP" or s == "XP"
True
</snippet></ROW><ROW><id>19016301</id><snippet>apt-get install libevent-dev 
</snippet></ROW><ROW><id>19016301</id><snippet>apt-get install python-gevent
</snippet></ROW><ROW><id>19016438</id><snippet>numbers_data = [int(e.text) for e in soup.find_all('td', 'right')]

print numbers_data
</snippet></ROW><ROW><id>19016499</id><snippet>in_data = in_data.T</snippet></ROW><ROW><id>19016499</id><snippet>matplotlib</snippet></ROW><ROW><id>19016499</id><snippet>imshow</snippet></ROW><ROW><id>19016715</id><snippet>ModelAdmin.save_as</snippet></ROW><ROW><id>19016715</id><snippet>class MyAdmin(admin.ModelAdmin):
    ...
    save_as = True
</snippet></ROW><ROW><id>19016716</id><snippet>sys.argv[1:]</snippet></ROW><ROW><id>19016716</id><snippet>def main(argv):
    for x in argv[1:]:
        build(x)

if __name__ == "__main__":
    main(sys.argv)
</snippet></ROW><ROW><id>19016716</id><snippet>sys.argv[1]</snippet></ROW><ROW><id>19016716</id><snippet>sys.argv</snippet></ROW><ROW><id>19016716</id><snippet>def main(argv):
    if len(argv) == 1:
        print "Not enough arguments"
        return
    else:
        build(argv[1])

if __name__ == "__main__":
    main(sys.argv)
</snippet></ROW><ROW><id>19016771</id><snippet>dateranges = [
    "1***-**-**", 
    "-138 - ## - ##",
    "18##-##-##",
    "1713-##-##",
    "####-##-##"
]
</snippet></ROW><ROW><id>19016771</id><snippet>re</snippet></ROW><ROW><id>19016771</id><snippet>import re
matcher = re.compile("(-?[\d*#]+)\s*-\s*([\d*#][\d*#])\s*-\s*([\d*#][\d*#])")

datetuples = [matcher.match(daterange).groups() for daterange in dateranges]
</snippet></ROW><ROW><id>19016771</id><snippet>for year, month, day in datetuples:
</snippet></ROW><ROW><id>19016771</id><snippet>    minyear  = int(year.replace("*", "0").replace("#", "0"))
    minmonth = max(1, int(month.replace("*", "0").replace("#", "0")))
    minday   = max(1, int(day.replace("*", "0").replace("#", "0")))

    mindate = (minyear, minmonth, minday)

    maxyear  = int(year.replace("*", "9").replace("#", "9"))
    maxmonth = min(12, int(month.replace("*", "9").replace("#", "9")))
    ### WARNING! MAXIMUM DAY NUMBER DEPENDS ON BOTH MONTH AND YEAR
    maxday  = min(31, int(day.replace("*", "9").replace("#", "9")))

    maxdate = (maxyear, maxmonth, maxday)

    print(mindate, maxdate)

#&gt;&gt;&gt; (1000, 1, 1) (1999, 12, 31)
#&gt;&gt;&gt; (-138, 1, 1) (-138, 12, 31)
#&gt;&gt;&gt; (1800, 1, 1) (1899, 12, 31)
#&gt;&gt;&gt; (1713, 1, 1) (1713, 12, 31)
#&gt;&gt;&gt; (0, 1, 1) (9999, 12, 31)
</snippet></ROW><ROW><id>19017130</id><snippet>lambda</snippet></ROW><ROW><id>19017130</id><snippet>threading.Timer(1, lambda: GPID.output(26, GPIO.LOW))
</snippet></ROW><ROW><id>19017130</id><snippet>x if b else y</snippet></ROW></DATA>