<?xml version="1.0" encoding="UTF-8" standalone="no"?><DATA><ROW><id>18455611</id><snippet>import random
import linecache

def random_lines(filename)
    idxs = random.sample(range(10000), 10)
    return [linecache.getline(filename, i) for i in idxs]
</snippet></ROW><ROW><id>18455611</id><snippet>for line in random_lines('file.txt'):
    print line
</snippet></ROW><ROW><id>18455783</id><snippet>inp = [(4,4), (25,75), (8,9), (88,4)]

for eq in inp:
  print('{:&gt;4} = {:&gt;2} × {:&gt;2}'.format(eq[0] * eq[1], eq[0], eq[1]))
</snippet></ROW><ROW><id>18455923</id><snippet>__feature__</snippet></ROW><ROW><id>18456056</id><snippet>findall</snippet></ROW><ROW><id>18456056</id><snippet>import re
html = getHTMLText()
mp3s = []
other = []
for match in re.findall('&lt;reexpression&gt;',html):
    if match.endswith('.mp3'):
        mp3s.append(match)
    else:
        other.append(match)
</snippet></ROW><ROW><id>18456133</id><snippet>import re
from collections import defaultdict
regex = re.compile('([a-z]+\-)\d(\-[a-z]+)')

t = ["asdf-1-bhd","uuu-2-ggg","asdf-2-bhd","uuu-1-ggg","asdf-3-bhd"]

maps = defaultdict(list)

for x in t:
    parts = regex.match(x).groups()
    maps[parts[0]+parts[1]].append(x)
</snippet></ROW><ROW><id>18456133</id><snippet>[['asdf-1-bhd', 'asdf-2-bhd', 'asdf-3-bhd'], ['uuu-2-ggg', 'uuu-1-ggg']]
</snippet></ROW><ROW><id>18456133</id><snippet>"asdf-1-bhd" -&gt; "asdf--bhd"
"uuu-2-ggg" -&gt; "uuu--ggg"
"asdf-2-bhd" -&gt; "asdf--bhd"
"uuu-1-ggg" -&gt; "uuu--ggg"
"asdf-3-bhd" -&gt; "asdf--bhd"
</snippet></ROW><ROW><id>18456133</id><snippet>'asdf--bhd' -&gt; ['asdf-1-bhd', 'asdf-2-bhd', 'asdf-3-bhd']
'uuu--ggg' -&gt; ['uuu-2-ggg', 'uuu-1-ggg']
</snippet></ROW><ROW><id>18456388</id><snippet>self.pressed = False

if key[pygame.K_z]:
    self.pressed = True

if self.pressed:
    robsHouse.printText(screen)
</snippet></ROW><ROW><id>18456388</id><snippet>self.pressed</snippet></ROW><ROW><id>18456388</id><snippet>False</snippet></ROW><ROW><id>18456388</id><snippet>def printText(self, surface):
    if self.counter &lt; 20:
        text = pygame.font.SysFont("Pixelated Regular", 30)
        label = text.render("Hello", 0, (0,0,0,))
        surface.blit(label, (100,100))
        self.counter += 1
    else:
        self.pressed = False
</snippet></ROW><ROW><id>18456440</id><snippet>dailyAvg</snippet></ROW><ROW><id>18456440</id><snippet>def createDailyAvg(p):  # The method
    dailyAvg = []   # this creates the initial empty array for this method below
    i = 0
    while i &lt; 35140:    # I have 35140 data points in my array
        dailyAvg.append(np.mean(p[i:i+96]))  #Creates the avg of the 96, 15 minute avg
        i += 96
    return dailyAvg 

dailyAvgWind = createDailyAvg(Wind) # Wind is the array of 15 minute avg's.
dailyAvgDemand = createDailyAvg(M) # M is the array of demand avg's
</snippet></ROW><ROW><id>18456628</id><snippet>val="1 2 3"
for number in val:
        print number
</snippet></ROW><ROW><id>18456821</id><snippet>I_FILE="input.txt"
O_FILE="output.txt"

old=$(wc -l &lt;"$I_FILE")
while python Joiner.py "$I_FILE" "$O_FILE"
      new=$(wc -l &lt; "$O_FILE")
      mv "$O_FILE" "$I_FILE"
      [ $new != $old ]
do
    old=$new
done
</snippet></ROW><ROW><id>18456821</id><snippet>while</snippet></ROW><ROW><id>18456821</id><snippet>python</snippet></ROW><ROW><id>18456821</id><snippet>new=</snippet></ROW><ROW><id>18456821</id><snippet>[ $new != $old ]</snippet></ROW><ROW><id>18456821</id><snippet>while</snippet></ROW><ROW><id>18457052</id><snippet>extend</snippet></ROW><ROW><id>18457052</id><snippet>a.extend(b)</snippet></ROW><ROW><id>18457052</id><snippet>None</snippet></ROW><ROW><id>18457052</id><snippet>a = [5, 6, 7, 8, 9].extend(range(15, 20))</snippet></ROW><ROW><id>18457052</id><snippet>a</snippet></ROW><ROW><id>18457052</id><snippet>None</snippet></ROW><ROW><id>18457052</id><snippet>a = [5, 6, 7, 8, 9] + range(15, 20)</snippet></ROW><ROW><id>18457052</id><snippet>[5, 6, 7, 8, 9][2]</snippet></ROW><ROW><id>18457052</id><snippet>[5, 6, 7, 8, 7].count(7)</snippet></ROW><ROW><id>18457052</id><snippet>[5, 6, 7, 8, 7].index(8)</snippet></ROW><ROW><id>18457159</id><snippet>Sublime Text 2</snippet></ROW><ROW><id>18457159</id><snippet>Preferences -&gt; Browse Packages</snippet></ROW><ROW><id>18457159</id><snippet>~/Library/Application Support/Sublime Text 2/Packages</snippet></ROW><ROW><id>18457159</id><snippet>User</snippet></ROW><ROW><id>18457159</id><snippet>Package Control.sublime-settings</snippet></ROW><ROW><id>18457159</id><snippet>"repositories"</snippet></ROW><ROW><id>18457159</id><snippet>{
    "auto_upgrade_last_run": null,
    "installed_packages":
    [
        "PackageName",
        "AnotherPackageName",
        "AwesomeSublimePlugin",
        "Neon Color Scheme"
    ],
    "repositories":
    [
        "https://github.com/SoMeUsEr/BadURL"
    ]
}
</snippet></ROW><ROW><id>18457159</id><snippet>{
    "auto_upgrade_last_run": null,
    "installed_packages":
    [
        "PackageName",
        "AnotherPackageName",
        "AwesomeSublimePlugin",
        "Neon Color Scheme"
    ]
}
</snippet></ROW><ROW><id>18457159</id><snippet>,</snippet></ROW><ROW><id>18457159</id><snippet>]</snippet></ROW><ROW><id>18457159</id><snippet>}</snippet></ROW><ROW><id>18457510</id><snippet>d1 = mysql.connect(database1)
d2 = mysql.connect(database2)

with d2 as c2: # new transaction
    c2.execute("SELECT f1, f2, f3 FROM table")
    with d1 as c1:
        c1.executemany("INSERT INTO table (f1, f2, f3) VALUES (%s, %s, %s)", c2)
</snippet></ROW><ROW><id>18457698</id><snippet>StringIO.getvalue</snippet></ROW><ROW><id>18457698</id><snippet>StringIO</snippet></ROW><ROW><id>18457698</id><snippet>&gt;&gt;&gt; import StringIO
&gt;&gt;&gt; f = StringIO.StringIO()
&gt;&gt;&gt; f.write('asdf')
&gt;&gt;&gt; f.getvalue()
'asdf'
</snippet></ROW><ROW><id>18457698</id><snippet>seek</snippet></ROW><ROW><id>18457698</id><snippet>&gt;&gt;&gt; f.read()
''
&gt;&gt;&gt; f.seek(0)
&gt;&gt;&gt; f.read()
'asdf'
</snippet></ROW><ROW><id>18457698</id><snippet>mf = StringIO.StringIO()
with zipfile.ZipFile(mf, mode='w', compression=zipfile.ZIP_DEFLATED) as zf:
    zf.writestr('file1.txt', "hi")
    zf.writestr('file2.txt', "hi")

with open("C:/path/my_zip.zip", "wb") as f: # use `wb` mode
    f.write(mf.getvalue())
</snippet></ROW><ROW><id>18457966</id><snippet>fget=self.getNumberOfColumns</snippet></ROW><ROW><id>18457966</id><snippet>self</snippet></ROW><ROW><id>18457966</id><snippet>lambda</snippet></ROW><ROW><id>18457966</id><snippet>numberOfRows = property(fget=getNumberOfRows)
</snippet></ROW><ROW><id>18457966</id><snippet>@property
def numberOfRows(self):
    return self._numberOfRows
</snippet></ROW><ROW><id>18457966</id><snippet>property</snippet></ROW><ROW><id>18458152</id><snippet>print</snippet></ROW><ROW><id>18458152</id><snippet>result = ""  
for x in range (1, 21):  

    if x%15==0:
        result = result + "fizzbuzz "

    etc...
print result
</snippet></ROW><ROW><id>18458152</id><snippet>end</snippet></ROW><ROW><id>18458152</id><snippet>print</snippet></ROW><ROW><id>18458152</id><snippet>"\n"</snippet></ROW><ROW><id>18458152</id><snippet>for x in range (1, 21):  

    if x%15==0:
        print("fizzbuzz",end=" ")

    etc...
</snippet></ROW><ROW><id>18458152</id><snippet>print</snippet></ROW><ROW><id>18458152</id><snippet>print "fizzbuzz",</snippet></ROW><ROW><id>18458155</id><snippet>def join_lists(*args):
    return [i for L in args for i in L]
</snippet></ROW><ROW><id>18458155</id><snippet>def join_lists(*args):
    out = []
    for L in args:
        for i in L:
            out.append(i)
    return out
</snippet></ROW><ROW><id>18458184</id><snippet>*args, **kwargs</snippet></ROW><ROW><id>18458492</id><snippet>getargument</snippet></ROW><ROW><id>18458492</id><snippet>class MainHandler(tornado.web.RequestHandler):
    def get(self):
        roomid = self.get_argument('roomid', None)
        presenterid = self.get_argument('presenterid', None)
        if roomid is None or presenterid is None:
            self.redirect('/') # root url
            return
        self.write('I got the output ya {} {}'.format(roomid, presenterid))

application = tornado.web.Application([
    (r"/index\.html", MainHandler),
])
</snippet></ROW><ROW><id>18458534</id><snippet>from optparse import make_option

class Command(BaseCommand):
    option_list = BaseCommand.option_list + (
        make_option('--delete',
            action='store_true',
            dest='delete',
            default=False,
            help='Delete inactive packages'),
        )

    def handle(self, *args, **options):

        if options['delete']:
            selected_packs.objects.filter(activation_date__lt=timeframe).delete()
</snippet></ROW><ROW><id>18458584</id><snippet>tempfile</snippet></ROW><ROW><id>18458584</id><snippet>TemporaryFile()</snippet></ROW><ROW><id>18458584</id><snippet>NamedTemporaryFile()</snippet></ROW><ROW><id>18458584</id><snippet>delete=False</snippet></ROW><ROW><id>18458629</id><snippet>l[l.index(start): l.index(end) + 1]
</snippet></ROW><ROW><id>18458953</id><snippet>&gt;&gt;&gt; import matplotlib.pyplot as plt
&gt;&gt;&gt; testList =[(0, 6.0705199999997801e-08), (1, 2.1015700100300739e-08), 
 (2, 7.6280656623374823e-09), (3, 5.7348209304555086e-09), 
 (4, 3.6812203579604238e-09), (5, 4.1572516753310418e-09)]
&gt;&gt;&gt; from math import log
&gt;&gt;&gt; testList2 = [(elem1, log(elem2)) for elem1, elem2 in testList]
&gt;&gt;&gt; testList2
[(0, -16.617236475334405), (1, -17.67799605473062), (2, -18.691431541177973), (3, -18.9767093108359), (4, -19.420021520728017), (5, -19.298411635970396)]
&gt;&gt;&gt; zip(*testList2)
[(0, 1, 2, 3, 4, 5), (-16.617236475334405, -17.67799605473062, -18.691431541177973, -18.9767093108359, -19.420021520728017, -19.298411635970396)]
&gt;&gt;&gt; plt.scatter(*zip(*testList2))
&gt;&gt;&gt; plt.show()
</snippet></ROW><ROW><id>18458953</id><snippet>&gt;&gt;&gt; plt.plot(*zip(*testList2))
&gt;&gt;&gt; plt.show()
</snippet></ROW><ROW><id>18458953</id><snippet>&gt;&gt;&gt; plt.scatter(*zip(*testList2))
&gt;&gt;&gt; plt.title('Random Figure')
&gt;&gt;&gt; plt.xlabel('X-Axis')
&gt;&gt;&gt; plt.ylabel('Y-Axis')
&gt;&gt;&gt; plt.show()
</snippet></ROW><ROW><id>18459652</id><snippet>MyString = MyString.strip(", ").replace(", , ", "")
</snippet></ROW><ROW><id>18459683</id><snippet>import subprocess</snippet></ROW><ROW><id>18459683</id><snippet>from subprocess import call</snippet></ROW><ROW><id>18459683</id><snippet>dis</snippet></ROW><ROW><id>18459683</id><snippet>import dis

from_import_src = """
from subprocess import call
foo = call
"""

plain_import_src = """
import subprocess
foo = subprocess.call
"""

from_bytecode = compile(from_import_src, "from_import", "exec")
plain_bytecode = compile(plain_import_src, "plain_import", "exec")

print("from ... import ...")
dis.dis(from_bytecode)

print("\nimport ...")
dis.dis(plain_bytecode)
</snippet></ROW><ROW><id>18459683</id><snippet>from ... import ...
  2           0 LOAD_CONST               0 (0) 
              3 LOAD_CONST               1 (('call',)) 
              6 IMPORT_NAME              0 (subprocess) 
              9 IMPORT_FROM              1 (call) 
             12 STORE_NAME               1 (call) 
             15 POP_TOP              

  3          16 LOAD_NAME                1 (call) 
             19 STORE_NAME               2 (foo) 
             22 LOAD_CONST               2 (None) 
             25 RETURN_VALUE         

import ...
  2           0 LOAD_CONST               0 (0) 
              3 LOAD_CONST               1 (None) 
              6 IMPORT_NAME              0 (subprocess) 
              9 STORE_NAME               0 (subprocess) 

  3          12 LOAD_NAME                0 (subprocess) 
             15 LOAD_ATTR                1 (call) 
             18 STORE_NAME               2 (foo) 
             21 LOAD_CONST               1 (None) 
             24 RETURN_VALUE         
</snippet></ROW><ROW><id>18459683</id><snippet>dis.dis</snippet></ROW><ROW><id>18459683</id><snippet>from ... import ...</snippet></ROW><ROW><id>18459683</id><snippet>call</snippet></ROW><ROW><id>18459683</id><snippet>call</snippet></ROW><ROW><id>18459683</id><snippet>call</snippet></ROW><ROW><id>18459683</id><snippet>import ...</snippet></ROW><ROW><id>18459683</id><snippet>subprocess.call</snippet></ROW><ROW><id>18459683</id><snippet>from ... import ...</snippet></ROW><ROW><id>18459683</id><snippet>import ...</snippet></ROW><ROW><id>18459758</id><snippet>twitter = Twython(APP_KEY, APP_SECRET)
auth = twitter.get_authentication_tokens(callback_url='http://mysite.com/callback')
</snippet></ROW><ROW><id>18459758</id><snippet>OAUTH_TOKEN = auth['oauth_token']
OAUTH_TOKEN_SECRET = auth['oauth_token_secret']
</snippet></ROW><ROW><id>18459758</id><snippet>auth['auth_url']</snippet></ROW><ROW><id>18459758</id><snippet>oauth_verifier</snippet></ROW><ROW><id>18459758</id><snippet>twitter = Twython(APP_KEY, APP_SECRET,
                  OAUTH_TOKEN, OAUTH_TOKEN_SECRET)

twitter_authroized=twitter.get_authorized_tokens(oauth_verifier)

OAUTH_TOKEN = twitter_authroized['oauth_token']
OAUTH_TOKEN_SECERT = twitter_authroized['oauth_token_secret']
</snippet></ROW><ROW><id>18460013</id><snippet>KeyError</snippet></ROW><ROW><id>18460013</id><snippet>{\n    proxy_set_header ... }</snippet></ROW><ROW><id>18460013</id><snippet>"""location /%(instance_name)s {
    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
    proxy_set_header Host $http_host;
    proxy_set_header SCRIPT_NAME /%(instance_name)s;
    proxy_redirect off;
    proxy_pass unix:/var/run/openmooc/askbot/%(instance_name)s.sock;
}""" % {'instance_name': 'foo_bar'}
</snippet></ROW><ROW><id>18460031</id><snippet>def __str__(self):
    return __name__ + "." + self.__class__.__name__ + "." +  self._testMethodName
</snippet></ROW><ROW><id>18460098</id><snippet>'//[^/]+/[^/]+/[^/]+/(\d+(?=_)|[^/]+)'</snippet></ROW><ROW><id>18460417</id><snippet>from bs4 import BeautifulSoup

html = '&lt;td class="_480u"&gt;\
&lt;div class="clearfix"&gt;\
&lt;div&gt;&lt;a data-hovercard="/ajax/hovercard/page.php?id=112969428713061" href="https://www.facebook.com/pages/Hindi/112969428713061"&gt;Hindi&lt;/a&gt; and \
      &lt;a data-hovercard="/ajax/hovercard/page.php?id=106059522759137" href="https://www.facebook.com/pages/English/106059522759137"&gt;English&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;&lt;/td&gt;'

soup = BeautifulSoup(html)
print soup.find('a',{'class':''}).string
print soup.find('a',{'class':''}).nextSibling.nextSibling.string
</snippet></ROW><ROW><id>18460417</id><snippet>Hindi
English
</snippet></ROW><ROW><id>18460417</id><snippet>from bs4 import BeautifulSoup

html = '&lt;td class="_480u"&gt;\
&lt;div class="clearfix"&gt;\
&lt;div&gt;&lt;a data-hovercard="/ajax/hovercard/page.php?id=112969428713061" href="https://www.facebook.com/pages/Hindi/112969428713061"&gt;Hindi&lt;/a&gt; and \
      &lt;a data-hovercard="/ajax/hovercard/page.php?id=106059522759137" href="https://www.facebook.com/pages/English/106059522759137"&gt;English&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;&lt;/td&gt;'

soup = BeautifulSoup(html)
lang = soup.findAll('a', href = True)
for i in lang:
    print i.string
</snippet></ROW><ROW><id>18460417</id><snippet>Hindi
English
</snippet></ROW><ROW><id>18460437</id><snippet>QPushButton</snippet></ROW><ROW><id>18460437</id><snippet>QPushButton.clicked.connect</snippet></ROW><ROW><id>18460437</id><snippet>import sys

from PyQt4.QtGui import *
from PyQt4.QtCore import *


class MyWindow(QWidget):
    def __init__(self):
        QWidget.__init__(self)
        self.edit = QTextEdit()
        self.edit.setWindowTitle("QTextEdit Standard Output Redirection")
        self.button = QPushButton('Run ldconfig')
        self.button.clicked.connect(self.onClick)
        layout = QVBoxLayout(self)
        layout.addWidget(self.edit)
        layout.addWidget(self.button)

    @pyqtSlot()
    def readStdOutput(self):
        self.edit.append(QString(self.proc.readAllStandardOutput()))

    def onClick(self):
        self.proc = QProcess()
        self.proc.start("echo hello")
        self.proc.setProcessChannelMode(QProcess.MergedChannels);
        QObject.connect(self.proc, SIGNAL("readyReadStandardOutput()"), self, SLOT("readStdOutput()"));

def main():
    app = QApplication(sys.argv)
    win = MyWindow()
    win.show()
    return app.exec_()

if __name__ == '__main__':
    main()
</snippet></ROW><ROW><id>18460566</id><snippet>os</snippet></ROW><ROW><id>18460566</id><snippet>import os

os.system('clear')
os.system('CLS') # windows

# Solution for IDLE
N = 40 # you might need to adjust this
for i in range(N):
    print "\n"
</snippet></ROW><ROW><id>18460735</id><snippet>class interviewtable(models.Model):
    app = models.ForeignKey(application)
    interview = models.CharField(max_length=200)
    interview_on = models.CharField(max_length=200)
    interview_notes = models.CharField(max_length=200) 
</snippet></ROW><ROW><id>18460735</id><snippet>id</snippet></ROW><ROW><id>18460735</id><snippet>app_id</snippet></ROW><ROW><id>18460735</id><snippet>BigIntegerField()</snippet></ROW><ROW><id>18461114</id><snippet>in</snippet></ROW><ROW><id>18461114</id><snippet>&gt;&gt;&gt; inword = 'Hello N\S\A!'
&gt;&gt;&gt; r'N\S\A' in inword
True
</snippet></ROW><ROW><id>18461114</id><snippet>\</snippet></ROW><ROW><id>18461114</id><snippet>\S</snippet></ROW><ROW><id>18461114</id><snippet>\A</snippet></ROW><ROW><id>18461114</id><snippet>&gt;&gt;&gt; inword = 'Hello N\S\A!'
&gt;&gt;&gt; re.search(r'N\S\A', inword)
&gt;&gt;&gt; re.search(r'N\\S\\A', inword)
&lt;_sre.SRE_Match object at 0x7f804ea33370&gt;
</snippet></ROW><ROW><id>18461189</id><snippet>-</snippet></ROW><ROW><id>18461189</id><snippet>list(set(a) - set(b))
</snippet></ROW><ROW><id>18461189</id><snippet>set.difference()</snippet></ROW><ROW><id>18461189</id><snippet>list(set(a).difference(b))
</snippet></ROW><ROW><id>18461189</id><snippet>&gt;&gt;&gt; a = [1,2,3,4,5]
&gt;&gt;&gt; b = [1,3,5,6]
&gt;&gt;&gt; list(set(a).difference(b))
[2, 4]
</snippet></ROW><ROW><id>18461524</id><snippet>def getwidth():
    print(lbl.winfo_width(), lbl.winfo_height())
</snippet></ROW><ROW><id>18461562</id><snippet>from csv import reader
LIMITINTER= 10
with open("fichierin.txt") as f:
    read = reader(f,delimiter="\t")
    first = last =  None
    for line in read:
        if last is None:
            first = last = line
        else:
            if abs(int(line[1]) - int(last[2])) &lt; LIMITINTER :
                last = line
                continue
            else:

                print last[0], first[1], last[2]
                first = last = line

    print last[0], first[1], last[2]
</snippet></ROW><ROW><id>18461562</id><snippet>chr1 142936580 142936593
chr1 145034453 145034460
chr1 161418656 161418659
chr2 90386745  90386750 
</snippet></ROW><ROW><id>18461615</id><snippet>c_subset</snippet></ROW><ROW><id>18461615</id><snippet>C</snippet></ROW><ROW><id>18461615</id><snippet>A</snippet></ROW><ROW><id>18461615</id><snippet>C</snippet></ROW><ROW><id>18461615</id><snippet>&gt;&gt;&gt; A.objects.filter(b__c__in = c_subset)
</snippet></ROW><ROW><id>18461664</id><snippet>&gt;&gt;&gt; import numpy as np
&gt;&gt;&gt; old_set = [[0, 1], [4, 5]]
&gt;&gt;&gt; new_set = [[2, 7], [0, 1]]
&gt;&gt;&gt; (np.array(old_set) + np.array(new_set)) / 2
array([[1, 4],
       [2, 3]])
</snippet></ROW><ROW><id>18461715</id><snippet>__init__</snippet></ROW><ROW><id>18461715</id><snippet>printAction = QtGui.QAction('Print', self)
printAction.setShortcut('Ctrl+P') 
printAction.triggered.connect(self.do_print)
self.toolbar4 = self.addToolBar('Print')
self.toolbar4.addAction(printAction)
</snippet></ROW><ROW><id>18461715</id><snippet>do_print</snippet></ROW><ROW><id>18461715</id><snippet>def do_print(self):
    p = QtGui.QPrinter()
    p.setPaperSize(QtGui.QPrinter.A4)
    p.setFullPage(True)
    p.setResolution(300)
    p.setOrientation(QtGui.QPrinter.Portrait)
    p.setOutputFileName('D:\\test.pdf')
    self.web.print_(p)
</snippet></ROW><ROW><id>18461715</id><snippet>D:\test.pdf</snippet></ROW><ROW><id>18461715</id><snippet>def do_print(self):
    p = QtGui.QPrinter()
    dialog = QtGui.QPrintDialog(p)
    dialog.exec_()
    self.web.print_(p)
</snippet></ROW><ROW><id>18462393</id><snippet>psutil</snippet></ROW><ROW><id>18462393</id><snippet>gnome_panel_procs = []
for process in psutil.process_iter():
    # I assume the gnome-panel processes correctly set their name
    # eventually you could use process.cmdline instead
    if process.name == 'gnome-panel':
        gnome_panel_procs.append(process)

for proc in gnome_panel_procs:
    for _ in range(60):
        # check cpu percentage over 1 second
        if proc.get_cpu_percent(1) &lt; 80 or not proc.is_running():
            # less than 80% of cpu or process terminated
            break
    else:
        # process used 80% of cpu for over 1 minute
        proc.kill()
</snippet></ROW><ROW><id>18462393</id><snippet>is_running()</snippet></ROW><ROW><id>18462393</id><snippet>pid</snippet></ROW><ROW><id>18462393</id><snippet>import time
import psutil

for proc in psutil.process_iter():
    if proc.name == 'gnome-panel' and time.time() - proc.create_time &gt; 1:
        if proc.get_cpu_percent() &gt; 80:
            proc.kill()
</snippet></ROW><ROW><id>18462393</id><snippet>gnome-panel</snippet></ROW><ROW><id>18462550</id><snippet>replace()</snippet></ROW><ROW><id>18462550</id><snippet>&gt;&gt;&gt; def word_func(word, letter):
...     return word.replace(letter, '')
... 
&gt;&gt;&gt; word_func('bird', 'b')
'ird'
</snippet></ROW><ROW><id>18463033</id><snippet>commandArgs</snippet></ROW><ROW><id>18463033</id><snippet>args &lt;- commandArgs(trailingOnly = TRUE)

arg1 &lt;- args[1]
arg2 &lt;- args[2]
[...your code...]
</snippet></ROW><ROW><id>18463033</id><snippet>Rscript</snippet></ROW><ROW><id>18463033</id><snippet>PATH</snippet></ROW><ROW><id>18463389</id><snippet>virtualenv</snippet></ROW><ROW><id>18463389</id><snippet>.py</snippet></ROW><ROW><id>18463389</id><snippet>.pyw</snippet></ROW><ROW><id>18463389</id><snippet>C:\Python27\python.exe</snippet></ROW><ROW><id>18463389</id><snippet>C:\Python27\pythonw.exe</snippet></ROW><ROW><id>18463389</id><snippet>D:\virtualenv_test.py</snippet></ROW><ROW><id>18463389</id><snippet>.py</snippet></ROW><ROW><id>18463389</id><snippet>C:\Python27\python.exe</snippet></ROW><ROW><id>18463389</id><snippet>virtualenv</snippet></ROW><ROW><id>18463389</id><snippet>activate</snippet></ROW><ROW><id>18463389</id><snippet>PATH</snippet></ROW><ROW><id>18463389</id><snippet>python</snippet></ROW><ROW><id>18463389</id><snippet>cmd</snippet></ROW><ROW><id>18463389</id><snippet>python.exe</snippet></ROW><ROW><id>18463389</id><snippet>python D:\virtualenv_test.py
</snippet></ROW><ROW><id>18463832</id><snippet>ax.set_yticks(np.arange(data.shape[1])+0.5, minor=False)
</snippet></ROW><ROW><id>18463832</id><snippet>ax.set_xticks(np.arange(data.shape[1])+0.5, minor=False)
ax.set_yticks(np.arange(data.shape[0])+0.5, minor=False)
</snippet></ROW><ROW><id>18463901</id><snippet>python-daemon</snippet></ROW><ROW><id>18463901</id><snippet>daemon</snippet></ROW><ROW><id>18463901</id><snippet>setuptools</snippet></ROW><ROW><id>18463901</id><snippet>python-daemon</snippet></ROW><ROW><id>18463901</id><snippet>daemon</snippet></ROW><ROW><id>18463901</id><snippet>setup(
    install_requires=['python-daemon &gt;= 1.5']
)
</snippet></ROW><ROW><id>18463901</id><snippet>daemon</snippet></ROW><ROW><id>18464134</id><snippet>join()</snippet></ROW><ROW><id>18464134</id><snippet>",".join(str(msg.number) for msg in Message.objects.all())
</snippet></ROW><ROW><id>18464443</id><snippet>@celery.task
def file_transfer(password, source12, destination):
    # Do stuffs with paramters
</snippet></ROW><ROW><id>18464443</id><snippet>views.py</snippet></ROW><ROW><id>18464443</id><snippet>def test(View):
    # Get the data from post
    if request.method == 'POST':
        name = request.POST['name']
        # And get all the variable you need for the tasks

        # Now call the task like this
        file_transfer.delay(name, 'test', 'test')
</snippet></ROW><ROW><id>18464503</id><snippet>import re
s = "(1-2+3)*5+10/2"
print re.findall('[+-/*//()]|\d+',s)

['(', '1', '-', '2', '+', '3', ')', '*', '5', '+', '10', '/', '2']
</snippet></ROW><ROW><id>18464503</id><snippet>from pythonds.basic.stack import Stack

def postfixEval(postfixExpr):
    operandStack = Stack()
    tokenList = postfixExpr.split()

    for token in tokenList:
        if token in "0123456789":
            operandStack.push(int(token))
        else:
            operand2 = operandStack.pop()
            operand1 = operandStack.pop()
            result = doMath(token,operand1,operand2)
            operandStack.push(result)
    return operandStack.pop()

def doMath(op, op1, op2):
    if op == "*":
        return op1 * op2
    elif op == "/":
        return op1 / op2
    elif op == "+":
        return op1 + op2
    else:
        return op1 - op2

print(postfixEval('7 8 + 3 2 + /'))
</snippet></ROW><ROW><id>18464765</id><snippet>self.__dict__ = self</snippet></ROW><ROW><id>18464765</id><snippet>self.__dict__ = {}</snippet></ROW><ROW><id>18464765</id><snippet>class DottableDict(dict):
    def __init__(self, *args, **kwargs):
        dict.__init__(self, *args, **kwargs)
        self.__dict__ = self
    def allowDotting(self, state=True):
        if state:
            self.__dict__ = self
        else:
            self.__dict__ = dict()

d = DottableDict()
d.allowDotting()
d.foo = 'bar'

print(d['foo'])
# bar
print(d.foo)
# bar

d.allowDotting(state=False)
print(d['foo'])
# bar
print(d.foo)
# AttributeError: 'DottableDict' object has no attribute 'foo'         
</snippet></ROW><ROW><id>18464765</id><snippet>d.foo</snippet></ROW><ROW><id>18464765</id><snippet>'foo'</snippet></ROW><ROW><id>18464765</id><snippet>d.__dict__</snippet></ROW><ROW><id>18464765</id><snippet>d.__class__.__dict__</snippet></ROW><ROW><id>18464765</id><snippet>__dict__</snippet></ROW><ROW><id>18464765</id><snippet>d.__class__.mro()</snippet></ROW><ROW><id>18464765</id><snippet>d.__dict__</snippet></ROW><ROW><id>18464765</id><snippet>d</snippet></ROW><ROW><id>18464765</id><snippet>d.__dict__</snippet></ROW><ROW><id>18464765</id><snippet>d</snippet></ROW><ROW><id>18464765</id><snippet>d</snippet></ROW><ROW><id>18464765</id><snippet>d.__dict__</snippet></ROW><ROW><id>18464765</id><snippet>d.__dict__</snippet></ROW><ROW><id>18464765</id><snippet>d.__dict__</snippet></ROW><ROW><id>18464765</id><snippet>dict()</snippet></ROW><ROW><id>18464765</id><snippet>d</snippet></ROW><ROW><id>18464765</id><snippet>d.__class_.__dict__</snippet></ROW><ROW><id>18464765</id><snippet>allowDotting</snippet></ROW><ROW><id>18464765</id><snippet>d</snippet></ROW><ROW><id>18464765</id><snippet>__dict__</snippet></ROW><ROW><id>18464765</id><snippet>__dict__</snippet></ROW><ROW><id>18464765</id><snippet>d.__dict__ = {}</snippet></ROW><ROW><id>18464765</id><snippet>del self.__dict__
</snippet></ROW><ROW><id>18464765</id><snippet>self.__dict__ = dict()
</snippet></ROW><ROW><id>18464765</id><snippet>DottableDict</snippet></ROW><ROW><id>18464765</id><snippet>__dict__</snippet></ROW><ROW><id>18464765</id><snippet>__init__</snippet></ROW><ROW><id>18464765</id><snippet>DottableDict</snippet></ROW><ROW><id>18464765</id><snippet>__dict__</snippet></ROW><ROW><id>18464765</id><snippet>d.foo</snippet></ROW><ROW><id>18464765</id><snippet>allowDotting</snippet></ROW><ROW><id>18464765</id><snippet>self.__dict__</snippet></ROW><ROW><id>18464765</id><snippet>class DottableDict(dict):
    def __init__(self, *args, **kwargs):
        dict.__init__(self, *args, **kwargs)
        self['_attributes'] = dict()
        self.allowDotting()
    def allowDotting(self, state=True):
        if state:
            self.update(self['_attributes'])
            self.__dict__ = self
        else:
            self.__dict__ = self['_attributes']

d = DottableDict()
d.allowDotting(state=False)
d.foo = 'bar'
d.allowDotting(state=True)
print(d.foo)
# bar
d.allowDotting(state=False)
print(d.foo)
# bar
d.allowDotting(state=True)
print(d.foo)
# bar
</snippet></ROW><ROW><id>18464765</id><snippet>'_attribute'</snippet></ROW><ROW><id>18464871</id><snippet>patch.function</snippet></ROW><ROW><id>18464871</id><snippet>patch</snippet></ROW><ROW><id>18464871</id><snippet>with patch('random.choice', return_value=3) as mock_random:
    choice = my_code_that_uses_random()
    assert choice == 3
</snippet></ROW><ROW><id>18464891</id><snippet>total = Message.objects.all().count()
for i in xrange(0,total,500):
   batch = Message.objects.all()[i:500]
</snippet></ROW><ROW><id>18465122</id><snippet>&gt;=0</snippet></ROW><ROW><id>18465122</id><snippet>np.clip(Mat, 0, np.inf, out=Mat)
</snippet></ROW><ROW><id>18465122</id><snippet>Mat[ Mat&lt;0 ] = 0
</snippet></ROW><ROW><id>18465122</id><snippet>if</snippet></ROW><ROW><id>18465122</id><snippet>np.any</snippet></ROW><ROW><id>18465122</id><snippet>True</snippet></ROW><ROW><id>18465122</id><snippet>Check</snippet></ROW><ROW><id>18465122</id><snippet>True</snippet></ROW><ROW><id>18465122</id><snippet>Check = Mat&lt;0
if np.any(Check):
    Mat[Check] = 0
    ...
</snippet></ROW><ROW><id>18465257</id><snippet>df_vspd.stack(0).hist()
</snippet></ROW><ROW><id>18465810</id><snippet>order='F'</snippet></ROW><ROW><id>18465810</id><snippet>a=array([1,2,3,4,5,6,7,8,9])
b = a.reshape(3,3, order='F')

a[0] = 11

print b
#array([[11,  4,  7],
#       [ 2,  5,  8],
#       [ 3,  6,  9]])
</snippet></ROW><ROW><id>18465954</id><snippet>f = open('filename.ext', 'rb')
f.seek(255) # skip the first 255 bytes
rest = f.read() # read rest
</snippet></ROW><ROW><id>18466401</id><snippet>SUM()</snippet></ROW><ROW><id>18466401</id><snippet>cur.execute("SELECT SUM(memory) FROM vm WHERE hv_id=5")
result = cur.fetchone()[0]
</snippet></ROW><ROW><id>18466972</id><snippet>hasattr(...)</snippet></ROW><ROW><id>18466972</id><snippet>patch(patching_class, unpatched_class)</snippet></ROW><ROW><id>18466972</id><snippet>import logging
from types import FunctionType, MethodType


logger = logging.getLogger(__name__)
applied_patches = []


class PatchingError(Exception):
    pass


def patch(subcls, cls):
    if not subcls in applied_patches:
        logger.info("Monkeypatching %s methods into %s", subcls, cls)
        for methodname in subcls.__dict__:
            if methodname.startswith('_'):
                logger.debug('Skipping methodname %s', methodname)
                continue
            # TODO treat modified init
            elif hasattr(cls, methodname):
                raise PatchingError(
                    "%s alrady has methodname %s, cannot overwrite!",
                    cls, methodname)
            else:
                method = getattr(subcls, methodname)
                logger.debug("Adding %s %s", type(method), methodname)
                method = get_raw_method(methodname, method)
                setattr(cls, methodname, method)
        applied_patches.append(subcls)


def get_raw_method(methodname, method):
    # The following wouldn't be necessary in Python3...
    # http://stackoverflow.com/q/18701102/321973
    if type(method) == FunctionType:
        logger.debug("Making %s static", methodname)
        method = staticmethod(method)
    else:
        assert type(method) == MethodType
        logger.debug("Un-bounding %s", methodname)
        method = method.__func__
    return method
</snippet></ROW><ROW><id>18466972</id><snippet>patch</snippet></ROW><ROW><id>18466986</id><snippet>pygame.key.get_pressed()</snippet></ROW><ROW><id>18466986</id><snippet>pygame.display.set_mode((100,100))</snippet></ROW><ROW><id>18466986</id><snippet>pygame.init()</snippet></ROW><ROW><id>18466986</id><snippet>time.sleep</snippet></ROW><ROW><id>18467087</id><snippet>from collections import defaultdict
d = defaultdict(list)

def process(filename, line):
    if line[0] == '#':
        return

    fields = line.split('\t')
    key = tuple(fields[0:5]) # Fields that makes lines similar/same
    d[key].append((filename, line))

for filename in filenames:
    with gzip.open(filename) as fh:
        for line in fh:
            process(filename, line.strip())
</snippet></ROW><ROW><id>18467087</id><snippet>for l in d.values():
   if len(l) &lt; 10: continue

   print 'Same key found %d times:' % len(l)

   for filename, line in l:
       print '%s: %s' % (filename, line)
</snippet></ROW><ROW><id>18467180</id><snippet>apply</snippet></ROW><ROW><id>18467180</id><snippet>In [11]: df = pd.DataFrame([[['urn:dew_point'], 1]], columns=['properties', 'id'])

In [12]: df
Out[12]:
        properties  id
0  [urn:dew_point]   1

In [13]: df[df['properties'].apply(lambda x: 'urn:dew_point' in x)]
Out[13]:
        properties  id
0  [urn:dew_point]   1
</snippet></ROW><ROW><id>18467180</id><snippet>str.contains</snippet></ROW><ROW><id>18467180</id><snippet>In [21]: df = pd.DataFrame([['urn:dew_point', 1]], columns=['properties', 'id'])

In [22]: df['properties'].str.contains('urn:dew_point')
Out[22]:
0    True
Name: properties, dtype: bool

In [23]: df[df['properties'].str.contains('urn:dew_point')]
Out[23]:
      properties  id
0  urn:dew_point   1
</snippet></ROW><ROW><id>18467426</id><snippet>messages[0].content
</snippet></ROW><ROW><id>18467426</id><snippet>Message.objects.all()</snippet></ROW><ROW><id>18467434</id><snippet>values_from_hex = int(data.var1, 16)
</snippet></ROW><ROW><id>18467434</id><snippet>six_bit_values = [values_from_hex &gt;&gt; i*6 &amp; 0x3f for i in range(12)]
</snippet></ROW><ROW><id>18467434</id><snippet>'0x000000000000004080'</snippet></ROW><ROW><id>18467434</id><snippet>[0, 2, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0]</snippet></ROW><ROW><id>18467575</id><snippet>TEMPLATE_DIR</snippet></ROW><ROW><id>18467575</id><snippet>sys.path</snippet></ROW><ROW><id>18467575</id><snippet>bottle.TEMPLATE_PATH.insert(0, 'views')
</snippet></ROW><ROW><id>18467575</id><snippet>bottle.TEMPLATE_PATH.insert(0, '/path/to/xxx/views')
</snippet></ROW><ROW><id>18467615</id><snippet>&gt;&gt;&gt; import sys
&gt;&gt;&gt; sys.version
'2.4.4 (#1, Jul 12 2013, 10:47:50) \n[GCC 4.7.3]'
</snippet></ROW><ROW><id>18468116</id><snippet>$ pip install requests
</snippet></ROW><ROW><id>18468144</id><snippet>1</snippet></ROW><ROW><id>18468144</id><snippet>root.mainloop</snippet></ROW><ROW><id>18468144</id><snippet>NameError</snippet></ROW><ROW><id>18468144</id><snippet>1</snippet></ROW><ROW><id>18468147</id><snippet>cars</snippet></ROW><ROW><id>18468147</id><snippet>Tag_car</snippet></ROW><ROW><id>18468147</id><snippet>{% for car in cars %}
    ...
    {% for tag in car.car.tag_set.all %}
        ...
    {% endif %}
{% endif %}
</snippet></ROW><ROW><id>18468147</id><snippet>tags = models.ManyToManyField(Tag)
</snippet></ROW><ROW><id>18468183</id><snippet>headers = {
    "X-Auth-Token": "dddddsssb04411b4c6a2",
    "Access-Control-Allow-Origin": "*",
}
r = requests.post("https://verylong/url", headers=headers)
</snippet></ROW><ROW><id>18468490</id><snippet>img = misc.imread('mypic.jpg', flatten=True)
</snippet></ROW><ROW><id>18468491</id><snippet>import markdown
from markdown.extensions.headerid import HeaderIdExtension

def my_slugify(value, sep):
    return "100"

md = markdown.Markdown(extensions=[HeaderIdExtension(configs=[('slugify', my_slugify)])])
print md.convert("#Head 1")
</snippet></ROW><ROW><id>18468491</id><snippet>&lt;h1 id="100"&gt;Head 1&lt;/h1&gt;
</snippet></ROW><ROW><id>18468550</id><snippet>MultipleLocator</snippet></ROW><ROW><id>18468550</id><snippet>from matplotlib.ticker import MultipleLocator, FormatStrFormatter

majorLocator   = MultipleLocator(5)
majorFormatter = FormatStrFormatter('%d')
minorLocator   = MultipleLocator(1)

ax.xaxis.set_major_locator(majorLocator)
ax.xaxis.set_major_formatter(majorFormatter)
ax.xaxis.set_minor_locator(minorLocator)
</snippet></ROW><ROW><id>18468550</id><snippet>FixedLocator</snippet></ROW><ROW><id>18468550</id><snippet>from matplotlib.ticker import FixedLocator

majorLocator   = FixedLocator(np.linspace(20,40,5))
minorLocator   = FixedLocator(np.linspace(19,41,23))
</snippet></ROW><ROW><id>18468625</id><snippet>(.*)</snippet></ROW><ROW><id>18468625</id><snippet>\1</snippet></ROW><ROW><id>18468625</id><snippet>\2</snippet></ROW><ROW><id>18468625</id><snippet>description = re.sub(pattern, "&lt;a href=\"http://crucible.app.com:9090/\2?cs=\1\"&gt;\1&lt;/a&gt;", description)
</snippet></ROW><ROW><id>18468625</id><snippet>|</snippet></ROW><ROW><id>18468625</id><snippet>}</snippet></ROW><ROW><id>18468625</id><snippet>pattern = re.compile(r"\{cs:id=([^|]*)\|rep=([^}]*)\}")
</snippet></ROW><ROW><id>18468625</id><snippet>pattern = re.compile(r"\{cs:id=(?P&lt;id&gt;[^|]*)\|rep=(?P&lt;rep&gt;[^}]*)\}")
</snippet></ROW><ROW><id>18468625</id><snippet>"&lt;a href=\"http://crucible.app.com:9090/\g&lt;repo&gt;?cs=\g&lt;id&gt;\"&gt;\g&lt;id&gt;&lt;/a&gt;"
</snippet></ROW><ROW><id>18468805</id><snippet>"""%%$@_$^__#)^)&amp;!_+]!*@&amp;^}@[@%]()%+$&amp;[(_@%+%$*^@$^!+]!&amp;_#)_*}{}}!}_]$[%}@[{_@#_^{*
@##&amp;{#&amp;{&amp;)*%(]{{([*}@[@&amp;]+!!*{)!}{%+{))])[!^})+)$]#{*+^((@^@}$[**$&amp;^{$!@#$%)!@(&amp;
+^!{%_$&amp;@^!}$_${)$_#)!({@!)(^}!*^&amp;!$%_&amp;&amp;}&amp;_#&amp;@{)]{+)%*{&amp;*%*&amp;@%$+]!*__(#!*){%&amp;@++
!_)^$&amp;&amp;%#+)}!@!)&amp;^}**#!_$([$!$}#*^}$+&amp;#[{*{}{((#$]{[$[$$()_#}!@}^@_&amp;%^*!){*^^_$^"""
</snippet></ROW><ROW><id>18469144</id><snippet>node</snippet></ROW><ROW><id>18469144</id><snippet>for key in node:                                                            
    print(key,":",node.get(key))                                            
    node = node.get(key)                                                    
    print_rec(node)
</snippet></ROW><ROW><id>18469144</id><snippet>node</snippet></ROW><ROW><id>18469144</id><snippet>node.get(key)</snippet></ROW><ROW><id>18469144</id><snippet>node</snippet></ROW><ROW><id>18469144</id><snippet>node</snippet></ROW><ROW><id>18469144</id><snippet>for key in node:
    print(key,":",node.get(key))
    successor = node.get(key)
    print_rec(successor)
</snippet></ROW><ROW><id>18469144</id><snippet>for key, successor in node.items():
    print(key,":",successor)
    print_rec(successor)
</snippet></ROW><ROW><id>18469580</id><snippet>import json

data = []
with open('text.json', 'r+') as f:
    for line in f:
        data_line = json.loads(line)
        if data_line[0] == 'saelyth' and '1' in data_line[1]:
            data_line[1] = 'new value'
        data.append(data_line)
    f.seek(0)
    f.writelines(["%s\n" % json.dumps(i) for i in data])
    f.truncate()
</snippet></ROW><ROW><id>18469580</id><snippet>break</snippet></ROW><ROW><id>18469592</id><snippet>base_qs = Message.objects.filter(status="Unsent", sender=user, batch=batch).exclude(recipient_number__exact='')
total = base_qs.count()

for i in xrange(0, total, 500):
    page = list(base_qs[i:i+500])
    page_ids = [o.pk for o in page]
    # Do some stuff here
    base_qs.filter(pk__in=page_ids).update(send_date=datetime.datetime.now(), billed=True)
</snippet></ROW><ROW><id>18469817</id><snippet>&gt;&gt;&gt; map(max, abs(a[2]-a) )
[3, 4, 0]
&gt;&gt;&gt; np.abs(a[2] - a).max(axis=1)
array([3, 4, 0])
</snippet></ROW><ROW><id>18469902</id><snippet>insert into pfam_uniprot values ("UniProtKB-AC", "UniProtKB-ID", GeneID, RefSeq, GI, PDB, GO,
                                 IPI, UniRef100, UniRef90, UniRef50, UniParc, PIR, "NCBI-taxon",
                                 MIM, UniGene, PubMed, EMBL, "EMBL-CDS", Ensemble, "Ensemble-TRS",
                                 "Ensemble-PRO", Additional_PubMed
                                )
    values ('Q6GZX4', '001R_FRG3G', '2947773', 'YP_031579.1', '81941549,47060116,49237298', '',
            'GO:0006355,GO:0046782,GO:0006351', '', 'UniRef100_Q6GZX4', 'UniRef90_Q6GZX4',
            'UniRef50_Q6GZX4', 'UPI00003B0FD4', '', '654924', '', '', '15165820', 'AY548484',
            'AAT09660.1', '', '', '', '');
</snippet></ROW><ROW><id>18469987</id><snippet>&gt;&gt;&gt; np.mean(myarray[np.arange(5)[:, None, None], np.array(yy)[:, None], xx],
            axis=(-1, -2))
array([ 0.49482768,  0.53013301,  0.4485054 ,  0.49516017,  0.47034123])
</snippet></ROW><ROW><id>18470434</id><snippet>get_top_from_all()</snippet></ROW><ROW><id>18470494</id><snippet>DB</snippet></ROW><ROW><id>18470494</id><snippet>DB</snippet></ROW><ROW><id>18470494</id><snippet>pool.apply_async</snippet></ROW><ROW><id>18470494</id><snippet>()</snippet></ROW><ROW><id>18470494</id><snippet>async_result = pool.apply_async(DB, args, kwargs)
</snippet></ROW><ROW><id>18470499</id><snippet>import os.path
import shutil

def store_copy( file_to_copy, destination):
    filename, extension = os.path.splitext( os.path.basename(file_to_copy)
    existing_files = [i for in in os.listdir(destination) if i.startswith(filename)]
    new_file_name = "%s%02d%s" % (filename, len(existing_files), extension)
    shutil.copy2(file_to_copy, os.path.join(destination, new_file_name)
</snippet></ROW><ROW><id>18470527</id><snippet>def linkify(raw_message):
    message = raw_message
    for url in url_regex.findall(raw_message):
        if url.endswith('.'):
            url = url[:-1]
        if 'http://' not in url:
            href = 'http://' + url
        else:
            href = url
        message = message.replace(url, '&lt;a href="%s"&gt;%s&lt;/a&gt;' % (href, url))

    return message
</snippet></ROW><ROW><id>18470527</id><snippet>url_re = re.compile(r"""
       [^\s]             # not whitespace
       [a-zA-Z0-9:/\-]+  # the protocol and domain name
       \.(?!\.)          # A literal '.' not followed by another
       [\w\-\./\?=&amp;%~#]+ # country and path components
       [^\s]             # not whitespace""", re.VERBOSE) 
</snippet></ROW><ROW><id>18470527</id><snippet>.</snippet></ROW><ROW><id>18470527</id><snippet>hashtag_re = re.compile(r"""
       \#                # a hashmark
       [^\s]*            # not whitespace repeated""", re.VERBOSE)
</snippet></ROW><ROW><id>18470566</id><snippet>raw_input()</snippet></ROW><ROW><id>18470566</id><snippet>if len(sys.argv) &gt; 1:
    ssid_end = sys.argv[1].lower()
else:
    ssid_end = raw_input("==&gt; ").lower()
</snippet></ROW><ROW><id>18470594</id><snippet>itertext()</snippet></ROW><ROW><id>18470594</id><snippet>&gt;&gt;&gt; my_string = '''
... &lt;div&gt;
...     &lt;b&gt;hello&lt;/b&gt;world
... &lt;/div&gt;
... '''
&gt;&gt;&gt;
&gt;&gt;&gt; root = html.fromstring(my_string)
&gt;&gt;&gt; print root.text_content()

    helloworld

&gt;&gt;&gt; for text in root.itertext():
...     text = text.strip()
...     if text: # to skip empty(or space-only) string
...         print text
...
hello
world
&gt;&gt;&gt; print ' '.join(root.itertext())

     hello world
</snippet></ROW><ROW><id>18470628</id><snippet>avg = sum(datetimes, datetime.timedelta(0)) / len(datetimes)
avg = avg - datetime.timedelta(microseconds=avg.microseconds)
</snippet></ROW><ROW><id>18470628</id><snippet>import datetime

def chop_microseconds(delta):
    return delta - datetime.timedelta(microseconds=delta.microseconds)
</snippet></ROW><ROW><id>18470723</id><snippet>def run(self):
    while elevator.floor != 0:
        print(elevator.floor)
        for customer in self.customers:
            print(customer)
            if elevator.floor == customer.on_floor:
                elevator.reg_list.append(customer)
                customer.indicator = 1
            elif elevator.floor == customer.going_floor:
                elevator.reg_list.remove(customer)
                customer.indicator = 0
                customer.fin = 1
        elevator.move()
</snippet></ROW><ROW><id>18470723</id><snippet>elevator = Elevator(floor_count, cus_list)
building = Building(floor_count, cus_list, elevator)

class Building(object):
    def __init__(self, num_of_floors, customer_list, elevator):
        self.total_floors = num_of_floors
        self.customers = customer_list

class Elevator(object):
    def __init__(self, num_of_floors, register_list, direction = "up", cur_floor=1):
        self.total_floors = num_of_floors
        self.reg_list = register_list # &lt;-------- THIS IS "cus_list" reference
</snippet></ROW><ROW><id>18470723</id><snippet> elevator.reg_list.append(customer)
</snippet></ROW><ROW><id>18470723</id><snippet>class Elevator(object):
    def __init__(self, num_of_floors, register_list, direction = "up", cur_floor=1):
        self.total_floors = num_of_floors
        self.reg_list = []
</snippet></ROW><ROW><id>18470744</id><snippet>x</snippet></ROW><ROW><id>18470744</id><snippet>y</snippet></ROW><ROW><id>18470744</id><snippet>int</snippet></ROW><ROW><id>18470744</id><snippet>float</snippet></ROW><ROW><id>18470744</id><snippet>for</snippet></ROW><ROW><id>18470744</id><snippet>&gt;&gt;&gt; a2
array([[ 0.92607265,  1.26155686,  0.31516174,  0.91750943,  0.30713193],
       [ 1.0601752 ,  1.10404664,  0.67766044,  0.36434503,  0.64966887],
       [ 1.29878971,  0.66417322,  0.48084284,  1.0956822 ,  0.27142741],
       [ 0.27654032,  0.29566566,  0.33565457,  0.29749312,  0.34113315],
       [ 0.33608323,  0.25230828,  0.41507646,  0.37872512,  0.60471438]])
&gt;&gt;&gt; numpy.where(detect_peaks(a2))
(array([0, 2]), array([1, 0]))
&gt;&gt;&gt; def func1(locations): #You don't need to unpack the numpy.where result.
    for test_x in range(0, 4):
       for test_y in range(0, 4):
          locations=numpy.array(locations)
          central=numpy.array((test_x,test_y))
          #Vectorization is almost always better.
          #Be careful, iterate an array means iterate its rows, so, transpose it first.
          distances=map(numpy.linalg.norm, (locations-central.reshape((2,-1))).T)
          histogram=numpy.histogram(distances, bins=10)
          print 'cental point:', central
          print 'distance lst:', distances
          print histogram
          print '-------------------------'
</snippet></ROW><ROW><id>18470744</id><snippet>&gt;&gt;&gt; func1(numpy.where(detect_peaks(a2)))
cental point: [0 0]
distance lst: [1.0, 2.0]
(array([1, 0, 0, 0, 0, 0, 0, 0, 0, 1]), array([ 1. ,  1.1,  1.2,  1.3,  1.4,  1.5,  1.6,  1.7, 1.8,  1.9,  2. ]))
-------------------------
cental point: [0 1]
distance lst: [0.0, 2.2360679774997898]
(array([1, 0, 0, 0, 0, 0, 0, 0, 0, 1]), array([ 0.        ,  0.2236068 ,  0.4472136 ,  0.67082039,  0.89442719, 1.11803399,  1.34164079,  1.56524758,  1.78885438,  2.01246118,         2.23606798]))
-------------------------#and more
</snippet></ROW><ROW><id>18470778</id><snippet>GET</snippet></ROW><ROW><id>18470778</id><snippet>POST</snippet></ROW><ROW><id>18470778</id><snippet>else</snippet></ROW><ROW><id>18470778</id><snippet>if</snippet></ROW><ROW><id>18470778</id><snippet>Person</snippet></ROW><ROW><id>18470778</id><snippet>last_name</snippet></ROW><ROW><id>18470819</id><snippet>&gt;&gt;&gt; data
        one                           two                    
          a         b         c         a         b         c
0 -0.927134 -1.204302  0.711426  0.854065 -0.608661  1.140052
1 -0.690745  0.517359 -0.631856  0.178464 -0.312543 -0.418541
2  1.086432  0.194193  0.808235 -0.418109  1.055057  1.886883
3 -0.373822 -0.012812  1.329105  1.774723 -2.229428 -0.617690
&gt;&gt;&gt; data.ix[:,data.columns.get_level_values(1).isin({"a", "c"})]
        one                 two          
          a         c         a         c
0 -0.927134  0.711426  0.854065  1.140052
1 -0.690745 -0.631856  0.178464 -0.418541
2  1.086432  0.808235 -0.418109  1.886883
3 -0.373822  1.329105  1.774723 -0.617690
</snippet></ROW><ROW><id>18471464</id><snippet>dict</snippet></ROW><ROW><id>18471464</id><snippet>lists = {}
lists['0030'] = []
</snippet></ROW><ROW><id>18471636</id><snippet>that the method paginate() works on BaseQuery which is also Query
</snippet></ROW><ROW><id>18471636</id><snippet>Query</snippet></ROW><ROW><id>18471636</id><snippet>BaseQuery</snippet></ROW><ROW><id>18471636</id><snippet>Query</snippet></ROW><ROW><id>18471636</id><snippet>first_or_404()</snippet></ROW><ROW><id>18471636</id><snippet>paginate()</snippet></ROW><ROW><id>18471636</id><snippet>Query</snippet></ROW><ROW><id>18471636</id><snippet>paginate()</snippet></ROW><ROW><id>18471636</id><snippet>Query</snippet></ROW><ROW><id>18471636</id><snippet>BaseQuery</snippet></ROW><ROW><id>18471636</id><snippet>Query</snippet></ROW><ROW><id>18471636</id><snippet>db.session.query(models.Post).paginate(...)
</snippet></ROW><ROW><id>18471636</id><snippet>BaseQuery</snippet></ROW><ROW><id>18471636</id><snippet>Query</snippet></ROW><ROW><id>18471636</id><snippet>models.Post.query.paginate(...)
</snippet></ROW><ROW><id>18472061</id><snippet>logging</snippet></ROW><ROW><id>18472061</id><snippet>logging</snippet></ROW><ROW><id>18472061</id><snippet>logging</snippet></ROW><ROW><id>18472111</id><snippet>df2 = pd.read_csv('test', sep='\t', converters={'a': str})
</snippet></ROW><ROW><id>18472111</id><snippet>In [11]: df2['a'] = df2['a'].astype('str')

# now they are equal
In [12]: pd.util.testing.assert_frame_equal(df, df2)
</snippet></ROW><ROW><id>18472124</id><snippet> response = jsonify({'tag': top_tag, 'text': text})
 return response
</snippet></ROW><ROW><id>18472124</id><snippet> .done(function (data, status, jqXHR) {     
    $(data.tag).html(data.text);
 }
</snippet></ROW><ROW><id>18472298</id><snippet>"Dogs,Cats".split(",")
</snippet></ROW><ROW><id>18472298</id><snippet>re.split(r',\s*', "Dogs, Cats")
</snippet></ROW><ROW><id>18472346</id><snippet>psutil</snippet></ROW><ROW><id>18472346</id><snippet>set_cpu_affinity</snippet></ROW><ROW><id>18472346</id><snippet>multiprocessing</snippet></ROW><ROW><id>18472346</id><snippet>Process</snippet></ROW><ROW><id>18472346</id><snippet>processes = []
for i in range(4):
    p = Process(target=fonction, args=((process_id),filearg[file],t0))
    p.start()
    proc = psutil.Process(p.pid)
    proc.set_cpu_affinity([i])
    processes.append(p)

# Wait for *all* the child processes to terminate.
for p in processes:
    p.join()
</snippet></ROW><ROW><id>18472346</id><snippet>processes = []
for i in range(4):
    p = Process(target=fonction, args=((process_id),filearg[file],t0))
    p.start()
    proc = psutil.Process(p.pid)
    proc.set_cpu_affinity([i])
    processes.append(p)

while True:
    for i, p in enumerate(processes):
        if not p.is_alive():
            # this process finished. Replace with a new one.
            p.join()
            new_p = Process(...)
            new_p.start()
            proc = psutil.Process(new_p.pid)
            proc.set_cpu_affinity([i])
            processes[i] = new_p
</snippet></ROW><ROW><id>18472421</id><snippet>for</snippet></ROW><ROW><id>18472421</id><snippet>lst</snippet></ROW><ROW><id>18472421</id><snippet>for</snippet></ROW><ROW><id>18472421</id><snippet>for</snippet></ROW><ROW><id>18472421</id><snippet>for</snippet></ROW><ROW><id>18472421</id><snippet>range()</snippet></ROW><ROW><id>18472421</id><snippet>lst</snippet></ROW><ROW><id>18472421</id><snippet>lst[:]</snippet></ROW><ROW><id>18472421</id><snippet>for</snippet></ROW><ROW><id>18472421</id><snippet>iter()</snippet></ROW><ROW><id>18472421</id><snippet>for</snippet></ROW><ROW><id>18472421</id><snippet>next()</snippet></ROW><ROW><id>18472421</id><snippet>&gt;&gt;&gt; L = [1, 2, 3]
&gt;&gt;&gt; for i in L:
...     L.append(4)
...     print L
...     if len(L) &gt; 30:
...         break
... 
[1, 2, 3, 4]
[1, 2, 3, 4, 4]
[1, 2, 3, 4, 4, 4]
[1, 2, 3, 4, 4, 4, 4]
[1, 2, 3, 4, 4, 4, 4, 4]
[1, 2, 3, 4, 4, 4, 4, 4, 4]
[1, 2, 3, 4, 4, 4, 4, 4, 4, 4]
[1, 2, 3, 4, 4, 4, 4, 4, 4, 4, 4]
[1, 2, 3, 4, 4, 4, 4, 4, 4, 4, 4, 4]
[1, 2, 3, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4]
[1, 2, 3, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4]
[1, 2, 3, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4]
[1, 2, 3, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4]
[1, 2, 3, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4]
[1, 2, 3, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4]
[1, 2, 3, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4]
[1, 2, 3, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4]
[1, 2, 3, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4]
[1, 2, 3, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4]
[1, 2, 3, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4]
[1, 2, 3, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4]
[1, 2, 3, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4]
[1, 2, 3, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4]
[1, 2, 3, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4]
[1, 2, 3, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4]
[1, 2, 3, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4]
[1, 2, 3, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4]
[1, 2, 3, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4]
</snippet></ROW><ROW><id>18472421</id><snippet>L</snippet></ROW><ROW><id>18472421</id><snippet>L</snippet></ROW><ROW><id>18472866</id><snippet># on Linux/Unix at /etc/hosts
127.0.0.1 www.example.dev sub1.example.dev sub2.example.dev

# on windows its in system32\drivers\etc\
</snippet></ROW><ROW><id>18472968</id><snippet>def get_list_stores(self, code):
</snippet></ROW><ROW><id>18472968</id><snippet>ls = LeclercScraper()
ls.get_list_stores(92)
</snippet></ROW><ROW><id>18472968</id><snippet>self</snippet></ROW><ROW><id>18472968</id><snippet>def get_list_stores(code):
</snippet></ROW><ROW><id>18472968</id><snippet>get_list_stores(92)
</snippet></ROW><ROW><id>18473020</id><snippet>format</snippet></ROW><ROW><id>18473020</id><snippet>'{2} {1} {0}'</snippet></ROW><ROW><id>18473020</id><snippet>format</snippet></ROW><ROW><id>18473020</id><snippet>class DefaultList(list):
    def __getitem__(self, idx):
        try:
            return super(DefaultList, self).__getitem__(idx)
        except IndexError:
            return '-'
</snippet></ROW><ROW><id>18473020</id><snippet>list</snippet></ROW><ROW><id>18473020</id><snippet>tee</snippet></ROW><ROW><id>18473020</id><snippet>*lst</snippet></ROW><ROW><id>18473020</id><snippet>DefaultList</snippet></ROW><ROW><id>18473020</id><snippet>format</snippet></ROW><ROW><id>18473020</id><snippet>DefaultList</snippet></ROW><ROW><id>18473020</id><snippet>Formatter.vformat</snippet></ROW><ROW><id>18473020</id><snippet>&gt;&gt;&gt; string.Formatter().vformat('{0} {1} {2}', DefaultList([0, 1]), {})
'0 1 -'
</snippet></ROW><ROW><id>18473020</id><snippet>Formatter</snippet></ROW><ROW><id>18473020</id><snippet>str</snippet></ROW><ROW><id>18473020</id><snippet>get_value</snippet></ROW><ROW><id>18473020</id><snippet>check_unused_args</snippet></ROW><ROW><id>18473020</id><snippet>class DefaultFormatter(string.Formatter):
    def __init__(self, default):
        self.default = default

    # Allow excess arguments
    def check_unused_args(self, used_args, args, kwargs):
        pass

    # Fill in missing arguments
    def get_value(self, key, args, kwargs):
        try:
            return super(DefaultFormatter, self).get_value(key, args, kwargs)
        except IndexError:
            return '-'

f = DefaultFormatter('-')

print(f.vformat('{0} {2}', [0], {}))
print(f.vformat('{0} {2}', [0, 1, 2, 3], {}))
</snippet></ROW><ROW><id>18473020</id><snippet>format</snippet></ROW><ROW><id>18473020</id><snippet>__unpack__</snippet></ROW><ROW><id>18473181</id><snippet>def mysend(self, msg):
    totalsent = 0
    while totalsent &lt; MSGLEN:
        sent = self.sock.send(msg[totalsent:])
        if sent == 0:
            raise RuntimeError("socket connection broken")
        totalsent = totalsent + sent
</snippet></ROW><ROW><id>18473330</id><snippet>df = pd.DataFrame({'a': numpy.random.choice(['l1', 'l2'], 1000000),
                   'b': numpy.random.choice(['1', '2'], 1000000)})
</snippet></ROW><ROW><id>18473330</id><snippet>%timeit df['c'] = ((df.a == 'l1') == (df.b == '1')).astype(int)
</snippet></ROW><ROW><id>18473330</id><snippet>%timeit df['c'] = (df.a.str[-1] == df.b).astype(int)
</snippet></ROW><ROW><id>18473330</id><snippet>%timeit df['c'] = (((df['a'] == 'l1')&amp;(df['b']=='1'))|((df['a'] == 'l2')&amp;(df['b']=='2'))).astype(int)
</snippet></ROW><ROW><id>18473330</id><snippet>%timeit df['c'] = (df.a.apply(lambda x: x[1:])==df.b).astype(int)
</snippet></ROW><ROW><id>18473389</id><snippet>open('%s.log'%hname, 'wb').writelines([ line for line in open('%s_tmp.log' %hname) if 'word' in line])
</snippet></ROW><ROW><id>18473389</id><snippet>bytes</snippet></ROW><ROW><id>18473389</id><snippet>open('%s.log'%hname, 'w').writelines([line.decode('ascii') for line in open('%s_tmp.log' %hname) if 'word' in line])
</snippet></ROW><ROW><id>18473389</id><snippet>ast.literal_eval()</snippet></ROW><ROW><id>18473389</id><snippet>from ast import literal_eval

with open('%s.log'%hname, 'wb') as outfile:
    outfile.writelines(literal_eval(line.rstrip()) for line in open('%s_tmp.log' %hname) if 'word' in line)
</snippet></ROW><ROW><id>18473389</id><snippet>literal_eval()</snippet></ROW><ROW><id>18473415</id><snippet>get_text()</snippet></ROW><ROW><id>18473415</id><snippet>from bs4 import BeautifulSoup


text = "&lt;strong&gt;&lt;p&gt; hello &lt;/p&gt;&lt;p&gt; world &lt;/p&gt;&lt;/strong&gt;"

soup = BeautifulSoup(text)
print soup.get_text()  # prints " hello  world "
</snippet></ROW><ROW><id>18473415</id><snippet>import nltk


text = "&lt;strong&gt;&lt;p&gt; hello &lt;/p&gt;&lt;p&gt; world &lt;/p&gt;&lt;/strong&gt;"
print nltk.clean_html(text)  # prints "hello world"
</snippet></ROW><ROW><id>18473415</id><snippet>strong</snippet></ROW><ROW><id>18473415</id><snippet>*</snippet></ROW><ROW><id>18473425</id><snippet>func1.Z += 1
</snippet></ROW><ROW><id>18473425</id><snippet>Z</snippet></ROW><ROW><id>18473425</id><snippet>Z</snippet></ROW><ROW><id>18473647</id><snippet>browser.find_element_by_xpath("//a[@class='applyCustomFilter' and text() = 'Refine Search']").click()
</snippet></ROW><ROW><id>18473647</id><snippet>XPATH Tester</snippet></ROW><ROW><id>18473751</id><snippet>lists = {}
lists[('123', '456')] = [1, 2, 3]
# ...
</snippet></ROW><ROW><id>18473751</id><snippet>name = 'list_{0}_{1}' .format(filename[0:3],filename[6:9])
</snippet></ROW><ROW><id>18473751</id><snippet>name = lists[(filename[0:3], filename[6:9])]
</snippet></ROW><ROW><id>18473751</id><snippet>'list_123_456'</snippet></ROW><ROW><id>18473751</id><snippet>('123', '456')</snippet></ROW><ROW><id>18473751</id><snippet>lists[filename[0:3]][filename[6:9]]</snippet></ROW><ROW><id>18473751</id><snippet>globals()</snippet></ROW><ROW><id>18473751</id><snippet>locals()</snippet></ROW><ROW><id>18473751</id><snippet>MyClass.__dict__</snippet></ROW><ROW><id>18473751</id><snippet>name_name = 'list_{0}_{1}' .format(filename[0:3],filename[6:9])
name = globals()[name_name]
</snippet></ROW><ROW><id>18473751</id><snippet>eval(name_name)</snippet></ROW><ROW><id>18473752</id><snippet>itertools.product</snippet></ROW><ROW><id>18473752</id><snippet>collections.OrderedDict</snippet></ROW><ROW><id>18473752</id><snippet>&gt;&gt;&gt; from collections import OrderedDict
&gt;&gt;&gt; from itertools import product
&gt;&gt;&gt; 
&gt;&gt;&gt; d = OrderedDict()
&gt;&gt;&gt; for k, v in records:
...     d.setdefault(k, []).append(v)
...     
&gt;&gt;&gt; d
OrderedDict([('Length', ['Long', 'Med']), ('Fungus', ['Yes', 'No'])])
&gt;&gt;&gt; ['_'.join(k+v for k,v in zip(d, v)) for v in product(*d.values())]
['LengthLong_FungusYes', 'LengthLong_FungusNo', 'LengthMed_FungusYes', 'LengthMed_FungusNo']
</snippet></ROW><ROW><id>18473752</id><snippet>itertools.product</snippet></ROW><ROW><id>18473752</id><snippet>&gt;&gt;&gt; product(["Long", "Med"], ["Yes", "No"])
&lt;itertools.product object at 0x96b0dec&gt;
&gt;&gt;&gt; list(product(["Long", "Med"], ["Yes", "No"]))
[('Long', 'Yes'), ('Long', 'No'), ('Med', 'Yes'), ('Med', 'No')]
</snippet></ROW><ROW><id>18473752</id><snippet>records</snippet></ROW><ROW><id>18473785</id><snippet>__</snippet></ROW><ROW><id>18473785</id><snippet>.</snippet></ROW><ROW><id>18473785</id><snippet>tvpeople</snippet></ROW><ROW><id>18473785</id><snippet>people</snippet></ROW><ROW><id>18473785</id><snippet>t_summary = tvpeople.filter(in_summary=True).distinct('people__name')
</snippet></ROW><ROW><id>18473801</id><snippet>from itertools import groupby
from operator import itemgetter
from pprint import pprint

data = [ {
           'Organization' : '123 Solar',
           'Phone' : '444-444-4444',
           'Email' : '',
           'website' : 'www.123solar.com'
         }, {
           'Organization' : '123 Solar',
           'Phone' : '',
           'Email' : 'joey@123solar.com',
           'Website' : 'www.123solar.com'
         },
         {
           'Organization' : '234 test',
           'Phone' : '111',
           'Email' : 'a@123solar.com',
           'Website' : 'b.123solar.com'
         },
         {
           'Organization' : '234 test',
           'Phone' : '222',
           'Email' : 'ac@123solar.com',
           'Website' : 'bd.123solar.com'
         }]


data = sorted(data, key=itemgetter('Organization'))
result = {}
for key, group in groupby(data, key=itemgetter('Organization')):
    result[key] = [item for item in group]

pprint(result)
</snippet></ROW><ROW><id>18473801</id><snippet>{'123 Solar': [{'Email': '',
                'Organization': '123 Solar',
                'Phone': '444-444-4444',
                'website': 'www.123solar.com'},
               {'Email': 'joey@123solar.com',
                'Organization': '123 Solar',
                'Phone': '',
                'Website': 'www.123solar.com'}],
 '234 test': [{'Email': 'a@123solar.com',
               'Organization': '234 test',
               'Phone': '111',
               'Website': 'b.123solar.com'},
              {'Email': 'ac@123solar.com',
               'Organization': '234 test',
               'Phone': '222',
               'Website': 'bd.123solar.com'}]}
</snippet></ROW><ROW><id>18473801</id><snippet>for key, group in groupby(data, key=itemgetter('Organization')):
    result[key] = {'Phone': [],
                   'Email': [],
                   'Website': []}
    for item in group:
        result[key]['Phone'].append(item['Phone'])
        result[key]['Email'].append(item['Email'])
        result[key]['Website'].append(item['Website'])
</snippet></ROW><ROW><id>18473801</id><snippet>result</snippet></ROW><ROW><id>18473801</id><snippet>{'123 Solar': {'Email': ['', 'joey@123solar.com'],
               'Phone': ['444-444-4444', ''],
               'Website': ['www.123solar.com', 'www.123solar.com']},
 '234 test': {'Email': ['a@123solar.com', 'ac@123solar.com'],
              'Phone': ['111', '222'],
              'Website': ['b.123solar.com', 'bd.123solar.com']}}
</snippet></ROW><ROW><id>18474019</id><snippet>plot</snippet></ROW><ROW><id>18474019</id><snippet>plot</snippet></ROW><ROW><id>18474019</id><snippet>import numpy as np
import matplotlib.pyplot as plt

x1, x2 = [np.linspace(0, 10, num) for num in [10, 100]]
y1 = np.cos(x1)
y2 = np.sin(x2)

plt.plot(x1, y1)
plt.plot(x2, y2)
plt.show()
</snippet></ROW><ROW><id>18474264</id><snippet>LargeImage</snippet></ROW><ROW><id>18474264</id><snippet>product.LargeImage</snippet></ROW><ROW><id>18474264</id><snippet>try/except</snippet></ROW><ROW><id>18474403</id><snippet>class Check(models.Model):
    check_type = models.CharField(max_length=10, editable=False)
    type = models.CharField(max_length=10, null=True, choices=TYPES)
    method = models.CharField(max_length=25, choices=METHODS)
    'More fields.'

    def __init__(self, *args, **kwargs):
        super(Check, self).__init__(*args, **kwargs)
        if self.check_type:
            map = {'TypeA': Check_A,
                'TypeB': Check_B,
                'TypeC': Check_C}
            self.__class__ = map.get(self.check_type, Check)

    def run(self):
        'Do the normal stuff'
        pass


class Check_A(Check):
    class Meta:
        proxy = True

    def run(self):
        'Do something different'
        pass

class Check_B(Check):
    class Meta:
        proxy = True

    def run(self):
        'Do something different'
        pass


class Check_C(Check):
    class Meta:
        proxy = True

    def run(self):
        'Do something different'
        pass
</snippet></ROW><ROW><id>18474557</id><snippet>PYTHONPATH</snippet></ROW><ROW><id>18474557</id><snippet>from PROJECTA import com as comA
from PROJECTB import com as comB
from comA.example.sample.projectBBB.srcfiles import pythonfile.py
</snippet></ROW><ROW><id>18474557</id><snippet>__init__.py</snippet></ROW><ROW><id>18474557</id><snippet>MODULE_MERGE
    com
        example
            sample
</snippet></ROW><ROW><id>18474557</id><snippet>MODULE_MERGE/com/example/sample/__init__.py</snippet></ROW><ROW><id>18474557</id><snippet>from comA.example.sample import projAAA
from comB.example.sample import projBBB
</snippet></ROW><ROW><id>18474557</id><snippet>MODULE_MERGE</snippet></ROW><ROW><id>18474557</id><snippet>PYTHONPATH</snippet></ROW><ROW><id>18474748</id><snippet>a = 1
a = 2
</snippet></ROW><ROW><id>18474748</id><snippet>dict</snippet></ROW><ROW><id>18474748</id><snippet>mydict = {'corrector':0}
mydict['corrector'] = 1
</snippet></ROW><ROW><id>18474748</id><snippet>json</snippet></ROW><ROW><id>18474805</id><snippet>timeout</snippet></ROW><ROW><id>18474805</id><snippet>datetime.datetime</snippet></ROW><ROW><id>18474805</id><snippet>timeout</snippet></ROW><ROW><id>18474805</id><snippet>datetime.datetime</snippet></ROW><ROW><id>18474805</id><snippet>pdb</snippet></ROW><ROW><id>18474805</id><snippet>import pdb; pdb.pm()</snippet></ROW><ROW><id>18474820</id><snippet>from</snippet></ROW><ROW><id>18474820</id><snippet>form</snippet></ROW><ROW><id>18475022</id><snippet>import ast
config= ast.parse( file('config.py').read() )
</snippet></ROW><ROW><id>18475022</id><snippet>animals</snippet></ROW><ROW><id>18475022</id><snippet>ast.literal_eval</snippet></ROW><ROW><id>18475022</id><snippet>dict</snippet></ROW><ROW><id>18475022</id><snippet>class OnlyAssings(ast.NodeTransformer):

    def generic_visit( self, node ):
        return None  #throw other things away

    def visit_Module( self, node ):
        #We need to visit Module and pass it
        return ast.NodeTransformer.generic_visit( self, node )

    def visit_Assign(self, node):
        if node.targets[0].id == 'animals': # this you may want to change
            return node #pass it
        return None # throw away

config= OnlyAssings().visit(config)
</snippet></ROW><ROW><id>18475022</id><snippet>exec( compile(config,'config.py','exec') )
print animals 
</snippet></ROW><ROW><id>18475022</id><snippet>exec</snippet></ROW><ROW><id>18475022</id><snippet>data={}
exec( compile(config,'config.py','exec'), globals(), data )
print data['animals']
</snippet></ROW><ROW><id>18475082</id><snippet>import httplib

def requester(url):
    host = url.split('/')[0]
    #if urls do contain 'http://' --&gt;  host = url.split('/')[2].replace('http://','')
    req = url[url.find(host)+len(host):]
    conn = httplib.HTTPConnection(host)
    conn.request("HEAD","/"+req)
    response = conn.getresponse()
    print response.status, response.reason

    #if you want data...
    #data = response.read()
    #print data

for url in open(urls.txt):
    try:
        requester(url)
    except Error,e:
        print Error, e
</snippet></ROW><ROW><id>18475126</id><snippet>csvList = line.split(",")
</snippet></ROW><ROW><id>18475126</id><snippet>" 1"</snippet></ROW><ROW><id>18475126</id><snippet>" 'item1'"</snippet></ROW><ROW><id>18475126</id><snippet>" 'item6'  "</snippet></ROW><ROW><id>18475126</id><snippet>" 'item6'"</snippet></ROW><ROW><id>18475126</id><snippet>csv</snippet></ROW><ROW><id>18475126</id><snippet>strip</snippet></ROW><ROW><id>18475126</id><snippet>csvList = [item.strip() for item in line.split(",")]
</snippet></ROW><ROW><id>18475126</id><snippet>hardwareData = [csvList[2],csvList[3],csvList[4]]
</snippet></ROW><ROW><id>18475126</id><snippet>IndexError</snippet></ROW><ROW><id>18475126</id><snippet>hardwareData = csvList[2:5]
</snippet></ROW><ROW><id>18475126</id><snippet>for k, v in finalLoc.iteritems():
    if hardwareData in finalLoc.itervalues():
</snippet></ROW><ROW><id>18475126</id><snippet>finalLoc</snippet></ROW><ROW><id>18475126</id><snippet>if hardwareData == v</snippet></ROW><ROW><id>18475126</id><snippet>        finalLoc[key] = ""
</snippet></ROW><ROW><id>18475126</id><snippet>key</snippet></ROW><ROW><id>18475126</id><snippet>NameError</snippet></ROW><ROW><id>18475126</id><snippet>finalLoc[k]</snippet></ROW><ROW><id>18475126</id><snippet>from collections import OrderedDict

hardwareLines = """7pm, 1, 'item1', 'item2', 'item3'
8pm, 2, 'item4', 'item5', 'item6'  
9pm, 3, 'item7'
10pm, 4, 'item8'
11pm, 5, 'item1', 'item2', 'item3'
12am, 6, 'item9'
1am, 3, 'item4', 'item5', 'item6'""".splitlines()

finalLoc = OrderedDict() 

for line in hardwareLines: ##hardware is the second .csv
    csvList = [item.strip() for item in line.split(",")]
    hardwareData = csvList[2:5]
    for k, v in finalLoc.iteritems():
        if hardwareData == v:
            finalLoc[k] = ""
    finalLoc[csvList[1]] = hardwareData

for k, v in finalLoc.iteritems():
    print('{}: {}'.format(k, v))
</snippet></ROW><ROW><id>18475126</id><snippet>1: 
2: 
3: ["'item4'", "'item5'", "'item6'"]
4: ["'item8'"]
5: ["'item1'", "'item2'", "'item3'"]
6: ["'item9'"]
</snippet></ROW><ROW><id>18475126</id><snippet>csv</snippet></ROW><ROW><id>18475126</id><snippet>from collections import OrderedDict
import csv

hardwareLines = """7pm, 1, 'item1', 'item2', 'item3'
8pm, 2, 'item4', 'item5', 'item6'  
9pm, 3, 'item7'
10pm, 4, 'item8'
11pm, 5, 'item1', 'item2', 'item3'
12am, 6, 'item9'
1am, 3, 'item4', 'item5', 'item6'""".splitlines()

finalLoc = OrderedDict()

invmap = {}

for row in csv.reader(map(str.rstrip, hardwareLines), 
                      skipinitialspace=True, quotechar="'"):
    hardwareData = tuple(row[2:5])
    if hardwareData in invmap:
        finalLoc[invmap[hardwareData]] = ""
    finalLoc[row[1]] = list(hardwareData)
    invmap[hardwareData] = row[1]

for k, v in finalLoc.iteritems():
    print('{}: {}'.format(k, v))
</snippet></ROW><ROW><id>18475126</id><snippet>csv</snippet></ROW><ROW><id>18475126</id><snippet>invmap</snippet></ROW><ROW><id>18475126</id><snippet>[]</snippet></ROW><ROW><id>18475126</id><snippet>''</snippet></ROW><ROW><id>18475126</id><snippet>if value == '':
    return ''
elif isinstance(value, str):
    return process_one_value(value)
else:
    return map(process_one_value, value)
</snippet></ROW><ROW><id>18475126</id><snippet>return map(process_one_value, value)
</snippet></ROW><ROW><id>18475137</id><snippet>div</snippet></ROW><ROW><id>18475137</id><snippet>nextSibling</snippet></ROW><ROW><id>18475137</id><snippet>from bs4 import BeautifulSoup

html = '&lt;div id="product-short-summary-wrap"&gt;\
&lt;b class="tip-anchor tip-anchor-wrap"&gt;Short summary description Toshiba Satellite Pro C850-1GR&lt;/b&gt;ev\
:\
&lt;br/&gt;\
&lt;div class="tooltip-text"&gt;This short summary of the data-sheet.&lt;/div&gt;\
 Toshiba Satellite Pro C850-1GR Satellite Pro, 1.8 GHz\
&lt;/div&gt;'

soup = BeautifulSoup(html)

text = soup.find("div", {"class":"tooltip-text"})
print text.nextSibling.string
</snippet></ROW><ROW><id>18475137</id><snippet>Toshiba Satellite Pro C850-1GR Satellite Pro, 1.8 GHz
</snippet></ROW><ROW><id>18475137</id><snippet>This short summary of the data-sheet</snippet></ROW><ROW><id>18475137</id><snippet>from bs4 import BeautifulSoup

html = '&lt;div id="product-short-summary-wrap"&gt;\
&lt;b class="tip-anchor tip-anchor-wrap"&gt;Short summary description Toshiba Satellite Pro C850-1GR&lt;/b&gt;ev\
:\
&lt;br/&gt;\
&lt;div class="tooltip-text"&gt;This short summary of the data-sheet.&lt;/div&gt;\
 Toshiba Satellite Pro C850-1GR Satellite Pro, 1.8 GHz\
&lt;/div&gt;'

soup = BeautifulSoup(html)

text = soup.find("div", {"class":"tooltip-text"})
if "This short summary of the data-sheet." in text.string:
        print text.nextSibling.string
</snippet></ROW><ROW><id>18475137</id><snippet>Toshiba Satellite Pro C850-1GR Satellite Pro, 1.8 GHz
</snippet></ROW><ROW><id>18475137</id><snippet>import urllib2
from bs4 import BeautifulSoup

url = "http://icecat.biz/p/toshiba/pscbxe-01t01gfr/satellite-pro-notebooks-4051528036589-C8501GR-17411822.html"
html = urllib2.urlopen(url)

soup = BeautifulSoup(html)

texts = soup.findAll("div", {"class":"tooltip-text"})
for text in texts:
    if text.string:
        if "This short summary of the" in text.string:
            print text.nextSibling.string.strip() 
</snippet></ROW><ROW><id>18475137</id><snippet>Toshiba C850-1GR Satellite Pro, 1.8 GHz, Intel Celeron, 1000M, 4 GB, DDR3-SDRAM, 1600 MHz
</snippet></ROW><ROW><id>18475137</id><snippet>Intel H2312WPFJR, Socket R (2011), Intel, Xeon, 2048 GB, DDR3-SDRAM, 2048 GB
</snippet></ROW><ROW><id>18475192</id><snippet>bzip2</snippet></ROW><ROW><id>18475192</id><snippet>bzip2</snippet></ROW><ROW><id>18475192</id><snippet>gzip</snippet></ROW><ROW><id>18475192</id><snippet>In [1]: class Test(object):
            def __init__(self):
                self.x = 3841984789317471348934788731984731749374
                self.y = 'kdjsaflkjda;sjfkdjsf;klsdjakfjdafjdskfl;adsjfl;dasjf;ljfdlf'
        l = [Test() for i in range(1000000)]

In [2]: import cPickle as pickle          
        with open('test.pickle', 'wb') as f:
            pickle.dump(l, f)
        !ls -lh test.pickle
-rw-r--r--  1 viktor  staff    88M Aug 27 22:45 test.pickle

In [3]: import bz2
        import cPickle as pickle
        with bz2.BZ2File('test.pbz2', 'w') as f:
            pickle.dump(l, f)
        !ls -lh test.pbz2
-rw-r--r--  1 viktor  staff   2.3M Aug 27 22:47 test.pbz2

In [4]: import gzip
        import cPickle as pickle
        with gzip.GzipFile('test.pgz', 'w') as f:
            pickle.dump(l, f)
        !ls -lh test.pgz
-rw-r--r--  1 viktor  staff   4.8M Aug 27 22:51 test.pgz
</snippet></ROW><ROW><id>18475192</id><snippet>bzip2</snippet></ROW><ROW><id>18475192</id><snippet>gzip</snippet></ROW><ROW><id>18475192</id><snippet>cPickle : best of 3: 18.9 s per loop
bzip2   : best of 3: 54.6 s per loop
gzip    : best of 3: 24.4 s per loop
</snippet></ROW><ROW><id>18475495</id><snippet>for i in range(5 if switch else 10):
    # do something with i
</snippet></ROW><ROW><id>18475495</id><snippet>== True</snippet></ROW><ROW><id>18475495</id><snippet>if</snippet></ROW><ROW><id>18475495</id><snippet>end = 5 if switch else 10
for i in range(end):
    # do something with i
</snippet></ROW><ROW><id>18475550</id><snippet>&gt;&gt;&gt; tup = ('08:01: Woke Up\n08:05: Took Shower\n08:20: Ate Breakfast\n08:45: Left for work',)
&gt;&gt;&gt; print tup[0]
08:01: Woke Up
08:05: Took Shower
08:20: Ate Breakfast
08:45: Left for work
</snippet></ROW><ROW><id>18475550</id><snippet>str.splitlines()</snippet></ROW><ROW><id>18475550</id><snippet>&gt;&gt;&gt; tup[0].splitlines()
['08:01: Woke Up', '08:05: Took Shower', '08:20: Ate Breakfast', '08:45: Left for work']
&gt;&gt;&gt; for line in tup[0].splitlines():
...     print line
... 
08:01: Woke Up
08:05: Took Shower
08:20: Ate Breakfast
08:45: Left for work
</snippet></ROW><ROW><id>18475550</id><snippet>': '</snippet></ROW><ROW><id>18475550</id><snippet>&gt;&gt;&gt; for line in tup[0].splitlines():
...     time, activity = line.split(': ', 1)
...     print time, activity
... 
08:01 Woke Up
08:05 Took Shower
08:20 Ate Breakfast
08:45 Left for work
</snippet></ROW><ROW><id>18475712</id><snippet>sudo apt-get install php5-odbc php5-sybase tdsodbc
</snippet></ROW><ROW><id>18475712</id><snippet># Define a connection to the MSSQL server.
# The Description can be whatever we want it to be.
# The Driver value must match what we have defined in /etc/odbcinst.ini
# The Database name must be the name of the database this connection will connect to.
# The ServerName is the name we defined in /etc/freetds/freetds.conf
# The TDS_Version should match what we defined in /etc/freetds/freetds.conf
[mssql]
Description             = MSSQL Server
Driver                  = freetds
Database                = MyDatabase
ServerName              = mssql
TDS_Version             = 8.0
</snippet></ROW><ROW><id>18475712</id><snippet># Define where to find the driver for the Free TDS connections.
[freetds]
Description     = MS SQL database access with Free TDS
Driver          = /usr/lib/i386-linux-gnu/odbc/libtdsodbc.so
Setup           = /usr/lib/i386-linux-gnu/odbc/libtdsS.so
UsageCount      = 1
</snippet></ROW><ROW><id>18475712</id><snippet># The basics for defining a DSN (Data Source Name)
# [data_source_name]
#       host = &lt;hostname or IP address&gt;
#       port = &lt;port number to connect to - probably 1433&gt;
#       tds version = &lt;TDS version to use - probably 8.0&gt;

# Define a connection to the MSSQL server.
[mssql]
        host = mssql_server_ip_or_domain_name
        port = 1433
        tds version = 8.0
</snippet></ROW><ROW><id>18475712</id><snippet>isql mssql username password
</snippet></ROW><ROW><id>18475712</id><snippet>+---------------------------------------+
| Connected!                            |
|                                       |
| sql-statement                         |
| help [tablename]                      |
| quit                                  |
|                                       |
+---------------------------------------+
SQL&gt;
</snippet></ROW><ROW><id>18475712</id><snippet>cnxn = pyodbc.connect('DRIVER=freetds;SERVER=FOOBAR;PORT=1433;DATABASE=T2;UID=FOO;PWD=bar;TDS_Version=8.0;')
</snippet></ROW><ROW><id>18475771</id><snippet>def start_something():
    do_starting_actions()

def stop_something():
    do_terminal_actions()

def parse_args():
    parser = ArgumentParser()
    subparsers = parser.add_subparsers()
    start = subparsers.add_parser("start")
    start.set_defaults(func=start_something)
    stop = subparsers.add_parser("stop")
    stop.set_defaults(func=stop_something)
    # ...
    return parser.parse_args()

def main():
    args = parse_args()
    args.func()
</snippet></ROW><ROW><id>18475771</id><snippet>mymodule.py start
</snippet></ROW><ROW><id>18475771</id><snippet>start = subparsers.add_parser("start")
start.add_argument("--foo")
</snippet></ROW><ROW><id>18475793</id><snippet>bytes</snippet></ROW><ROW><id>18475793</id><snippet>&gt;&gt;&gt; rgb = [255, 128, 0]
&gt;&gt;&gt; bytes(rgb)
b'\xff\x80\x00'
</snippet></ROW><ROW><id>18476020</id><snippet>{}</snippet></ROW><ROW><id>18476020</id><snippet>%s</snippet></ROW><ROW><id>18476020</id><snippet>logger.debug("Message %s", 123)  # Works
logger.debug("Message {}", 123)  # Does not work. 
</snippet></ROW><ROW><id>18476020</id><snippet>.format</snippet></ROW><ROW><id>18476086</id><snippet>runserver</snippet></ROW><ROW><id>18476245</id><snippet>&gt;&gt;&gt; import pandas.io.data as web

&gt;&gt;&gt; start = datetime.datetime(2013, 8, 8)
&gt;&gt;&gt; end = datetime.datetime(2013, 8, 10)
&gt;&gt;&gt; f = web.DataReader("F", 'yahoo', start, end)
&gt;&gt;&gt; f
             Open    High    Low     Close   Volume      Adj Close
Date                        
2013-08-08   16.94   17.03   16.87   16.98   26589500    16.98
2013-08-09   16.95   17.11   16.94   17.02   25625300    17.02
</snippet></ROW><ROW><id>18476382</id><snippet>'ol\xe9'</snippet></ROW><ROW><id>18476382</id><snippet>'olé'</snippet></ROW><ROW><id>18476382</id><snippet>&gt;&gt;&gt; 'ol\xe9' == 'olé'
True
</snippet></ROW><ROW><id>18476382</id><snippet>'olé'</snippet></ROW><ROW><id>18476382</id><snippet>u'olé'</snippet></ROW><ROW><id>18476382</id><snippet>'ol\xe9'</snippet></ROW><ROW><id>18476382</id><snippet>str</snippet></ROW><ROW><id>18476382</id><snippet>repr</snippet></ROW><ROW><id>18476382</id><snippet>&gt;&gt;&gt; print u'olé'
olé
&gt;&gt;&gt; print [u'olé', u'olé']
[u'ol\xe9', u'ol\xe9']
</snippet></ROW><ROW><id>18476382</id><snippet>&gt;&gt;&gt; s = [u'olé', u'olé']
&gt;&gt;&gt; print u', '.join(s)
olé, olé
</snippet></ROW><ROW><id>18476382</id><snippet>u</snippet></ROW><ROW><id>18476382</id><snippet>&gt;&gt;&gt; print u'[{}]'.format(u', '.join(u"'{}'".format(item) for item in s))
['olé', 'olé']
</snippet></ROW><ROW><id>18476382</id><snippet>'olé'</snippet></ROW><ROW><id>18476382</id><snippet>decode</snippet></ROW><ROW><id>18476485</id><snippet>ls -l /usr/local/bin/python
</snippet></ROW><ROW><id>18476485</id><snippet>lrwxr-xr-x  1 yaser  admin  33 Mar 30 15:59 /usr/local/bin/python -&gt; ../Cellar/python/2.7.3/bin/python
</snippet></ROW><ROW><id>18476485</id><snippet>/Library/Frameworks/Python.framework/Versions/2.7/
</snippet></ROW><ROW><id>18476603</id><snippet>accept</snippet></ROW><ROW><id>18476603</id><snippet>connect</snippet></ROW><ROW><id>18476603</id><snippet>accept</snippet></ROW><ROW><id>18476603</id><snippet>socket.accept()</snippet></ROW><ROW><id>18476837</id><snippet>{{ yourtext|safe }}</snippet></ROW><ROW><id>18476862</id><snippet>dict</snippet></ROW><ROW><id>18476862</id><snippet>Series</snippet></ROW><ROW><id>18476862</id><snippet>def foo(group):
    A = group['A']
    B = group['B']
    r1 = randn()
    r2 = randn()
    return Series({'fancy': r1, 'great': r2})

df = DataFrame(randn(10, 1), columns=['a'])
df['B'] = np.random.choice(['hot', 'cold'], size=10)
df['A'] = np.random.choice(['sweet', 'sour'], size=10)
df['someAttribute'] = np.random.choice(['pretty', 'ugly'], size=10)
print df.groupby('someAttribute').apply(foo)
</snippet></ROW><ROW><id>18476862</id><snippet>                   fancy      great
someAttribute                      
pretty             -2.35       0.01
ugly                1.09      -1.09
</snippet></ROW><ROW><id>18476862</id><snippet>someAttribute</snippet></ROW><ROW><id>18476862</id><snippet>reset_index</snippet></ROW><ROW><id>18476862</id><snippet>df.groupby('someAttribute').apply(foo).reset_index()
</snippet></ROW><ROW><id>18476862</id><snippet>  someAttribute      fancy      great
0        pretty       0.46      -1.08
1          ugly       0.76       0.29
</snippet></ROW><ROW><id>18476946</id><snippet>&gt;&gt;&gt; pop = [[1,5,3],[1,1,1],[7,5,8],[2,5,4]]
&gt;&gt;&gt; pop.sort(key=sum)
&gt;&gt;&gt; pop
[[1, 1, 1], [1, 5, 3], [2, 5, 4], [7, 5, 8]]
</snippet></ROW><ROW><id>18476946</id><snippet>x.sort()</snippet></ROW><ROW><id>18476946</id><snippet>lambda</snippet></ROW><ROW><id>18476946</id><snippet>&gt;&gt;&gt; def weightedSum(listToSum):
...     ws = 0
...     weight = len(listToSum)
...     for i in listToSum:
...         ws += i * weight
...         weight -= 1
...     return ws
... 
&gt;&gt;&gt; weightedSum([1, 2, 3])
10
&gt;&gt;&gt; 1 * 3 + 2 * 2 + 3 * 1
10
&gt;&gt;&gt; pop
[[1, 5, 3], [1, 1, 1], [7, 5, 8], [2, 5, 4]]
&gt;&gt;&gt; pop.sort(key=weightedSum)
&gt;&gt;&gt; pop
[[1, 1, 1], [1, 5, 3], [2, 5, 4], [7, 5, 8]]
&gt;&gt;&gt; pop += [[1, 3, 8]]
&gt;&gt;&gt; pop.sort(key=weightedSum)
&gt;&gt;&gt; pop
[[1, 1, 1], [1, 5, 3], [1, 3, 8], [2, 5, 4], [7, 5, 8]]
</snippet></ROW><ROW><id>18476968</id><snippet>cd</snippet></ROW><ROW><id>18476968</id><snippet>sh</snippet></ROW><ROW><id>18476968</id><snippet>bash</snippet></ROW><ROW><id>18476968</id><snippet>SHELL=/bin/sh
PATH=/usr/local/sbin:/usr/local/bin:/sbin:/bin:/usr/sbin:/usr/bin
MAILTO="abc@avc.com" 
# m h dom mon dow   command
41 15 * * * /usr/bin/python /home/atweb/Documents/opengrok/setup_and_restart.py &gt;       /home/atweb/Documents/opengrok/restart_log.txt 2&amp;&gt;1
</snippet></ROW><ROW><id>18477058</id><snippet>print station[5:]</snippet></ROW><ROW><id>18477058</id><snippet>station[5:]</snippet></ROW><ROW><id>18477058</id><snippet>station = station[5:]</snippet></ROW><ROW><id>18477058</id><snippet>station</snippet></ROW><ROW><id>18477058</id><snippet>Name:</snippet></ROW><ROW><id>18477130</id><snippet>nonlocal</snippet></ROW><ROW><id>18477130</id><snippet>global</snippet></ROW><ROW><id>18477130</id><snippet>a</snippet></ROW><ROW><id>18477130</id><snippet>g</snippet></ROW><ROW><id>18477130</id><snippet>a</snippet></ROW><ROW><id>18477130</id><snippet>g</snippet></ROW><ROW><id>18477161</id><snippet>self.conn.commit()
</snippet></ROW><ROW><id>18477161</id><snippet>commit</snippet></ROW><ROW><id>18477161</id><snippet>execute_query</snippet></ROW><ROW><id>18477161</id><snippet>def execute_query(self, sql=""):
    try:
        self.cursor.execute(sql)
    except MySQLdb.Error as e:
        print "An error has occurred ", e
        self.conn.rollback()
    else:
        self.conn.commit()
</snippet></ROW><ROW><id>18477161</id><snippet>commit</snippet></ROW><ROW><id>18477161</id><snippet>rollback</snippet></ROW><ROW><id>18477161</id><snippet>commit</snippet></ROW><ROW><id>18477161</id><snippet>execute_query</snippet></ROW><ROW><id>18477161</id><snippet>commit</snippet></ROW><ROW><id>18477161</id><snippet>commit</snippet></ROW><ROW><id>18477161</id><snippet>with</snippet></ROW><ROW><id>18477161</id><snippet>MySQLdb</snippet></ROW><ROW><id>18477161</id><snippet>connection = MySQLdb.connect(
    host=config.HOST, user=config.USER,
    passwd=config.PASS, db=config.MYDB, )

with connection as cursor:
    cursor.execute(...)
</snippet></ROW><ROW><id>18477161</id><snippet>connection.commit()</snippet></ROW><ROW><id>18477161</id><snippet>with-suite</snippet></ROW><ROW><id>18477161</id><snippet>connection.rollback()</snippet></ROW><ROW><id>18477161</id><snippet>def __enter__(self): return self.cursor()

def __exit__(self, exc, value, tb):
    if exc:
        self.rollback()
    else:
        self.commit()
</snippet></ROW><ROW><id>18477188</id><snippet>def action():
    global repeat 
</snippet></ROW><ROW><id>18477314</id><snippet>def foo(A):
   tmp = A
   tmp = tmp + 1
   return (A, tmp)

foo(3)
</snippet></ROW><ROW><id>18477314</id><snippet>(3,4)</snippet></ROW><ROW><id>18477314</id><snippet>def foo(A):
   tmp = A
   tmp[0] = tmp[0] + 1
   return (A, tmp)

foo([1, 2])
</snippet></ROW><ROW><id>18477314</id><snippet>([2, 2], [2, 2])</snippet></ROW><ROW><id>18477314</id><snippet>tmp[0] = tmp[0] + 1</snippet></ROW><ROW><id>18477314</id><snippet>def foo(A):
   tmp = A[:]
   # this slice makes a new list, a copy of A

   tmp[0] = tmp[0] + 1
   return (A, tmp)

foo([1, 2])
</snippet></ROW><ROW><id>18477314</id><snippet>([1, 2], [2, 2])</snippet></ROW><ROW><id>18477371</id><snippet>import glob
strings = ['string1', 'string2']
for file in glob.glob('*.csv'):
    with open(file) as f:
        contents = f.read()
    for string in strings:
        if string in contents:
            print file
            break
</snippet></ROW><ROW><id>18477507</id><snippet>#! /usr/local/bin/ python</snippet></ROW><ROW><id>18477507</id><snippet>#!/usr/local/bin/python</snippet></ROW><ROW><id>18477507</id><snippet>#!/usr/bin/env python</snippet></ROW><ROW><id>18477507</id><snippet>/usr/local/bin/python</snippet></ROW><ROW><id>18477562</id><snippet>python -c 'print "hello"; print "world"'
</snippet></ROW><ROW><id>18478056</id><snippet>all_teams = Team.query.all()
for a_team in all_teams:
    if a_team.players.count() == 0
        db.session.delete(a_team)
db.session.commit()
</snippet></ROW><ROW><id>18478337</id><snippet>imshow</snippet></ROW><ROW><id>18478337</id><snippet>x</snippet></ROW><ROW><id>18478337</id><snippet>y</snippet></ROW><ROW><id>18478337</id><snippet>z</snippet></ROW><ROW><id>18478337</id><snippet>pcolor</snippet></ROW><ROW><id>18478337</id><snippet>pcolormesh</snippet></ROW><ROW><id>18478337</id><snippet>pcolormesh(x, y, z)</snippet></ROW><ROW><id>18478337</id><snippet>extent</snippet></ROW><ROW><id>18478337</id><snippet>plt.imshow(Z, extent=[X.min(), X.max(), Y.min(), Y.max()],
           cmap='bone')
</snippet></ROW><ROW><id>18478337</id><snippet>plt.pcolormesh(X, Y, Z, cmap='bone')
</snippet></ROW><ROW><id>18478337</id><snippet>imshow</snippet></ROW><ROW><id>18478337</id><snippet>imshow(X, cmap=None, norm=None, aspect=None, interpolation=None,
         alpha=None, vmin=None, vmax=None, origin=None, extent=None,
         **kwargs)
</snippet></ROW><ROW><id>18478337</id><snippet>cmap</snippet></ROW><ROW><id>18478337</id><snippet>cmap</snippet></ROW><ROW><id>18478472</id><snippet>accumulator = None
foreach match in (patientDataExpr | gleasonScoreExpr).searchString(source):

    if it's a patientDataExpr:
        if accumulator is not None:
            # we are starting a new patient data record, print out the previous one
            print out accumulated data
        initialize new accumulator with current match and empty list for gleason data

    else if it's a gleasonScoreExpr:
        add this expression into the current accumulator

# done with the for loop, do one last printout of the accumulated data
if accumulator is not None:
    print out accumulated data
</snippet></ROW><ROW><id>18478472</id><snippet>def printOut(patientDataTuple):
    pd,gleasonList = patientDataTuple
    print( "['{0.accDate}','{0.accNum}','{0.patientNum}',{1}]".format(
        pd, ','.join(''.join(gl.rhs) for gl in gleasonList)))

accumPatientData = None
for match in partMatch.searchString(TEXT):
    if match.patientData:
        if accumPatientData is not None:
            # this is a new patient data, print out the accumulated 
            # Gleason scores for the previous one
            printOut(accumPatientData)

        # start accumulating for a new patient data entry
        accumPatientData = (match.patientData, [])

    elif match.gleason:
        accumPatientData[1].append(match.gleason)
    #~ print match.dump()

if accumPatientData is not None:
    printOut(accumPatientData)
</snippet></ROW><ROW><id>18478472</id><snippet>diceGleason</snippet></ROW><ROW><id>18478472</id><snippet>gleason</snippet></ROW><ROW><id>18478472</id><snippet>def diceGleasonParseAction(tokens):
    def diceGleason(glrhs,gllhs):
        if len(glrhs) == 0:
            pri = gllhs[0]
            sec = gllhs[2]
            #~ tot = pri + sec
            tot = str(int(pri)+int(sec))
            return [pri, sec, tot]
        elif len(glrhs) == 1:
            pri = gllhs[0]
            sec = gllhs[2]
            tot = glrhs
            return [pri, sec, tot]
        else:
            pri = glrhs[0]
            sec = glrhs[2]
            tot = gllhs
            return [pri, sec, tot]

    pri,sec,tot = diceGleason(tokens.gleason.rhs, tokens.gleason.lhs)

    # assign results names for later use
    tokens.gleason['pri'] = pri
    tokens.gleason['sec'] = sec
    tokens.gleason['tot'] = tot

gleason.setParseAction(diceGleasonParseAction)
</snippet></ROW><ROW><id>18478472</id><snippet>pri</snippet></ROW><ROW><id>18478472</id><snippet>sec</snippet></ROW><ROW><id>18478472</id><snippet>tot</snippet></ROW><ROW><id>18478472</id><snippet>diceGleason</snippet></ROW><ROW><id>18478472</id><snippet>diceGleasonParseAction</snippet></ROW><ROW><id>18478472</id><snippet>pri</snippet></ROW><ROW><id>18478472</id><snippet>sec</snippet></ROW><ROW><id>18478472</id><snippet>tot</snippet></ROW><ROW><id>18478620</id><snippet>import unittest

from redis import Redis


class RedisTest(unittest.TestCase):

    def setUp(self):
        self.redis = Redis()

    def test_zrangebyscore(self):
        r = self.redis
        name = 'myset'
        r.zadd(name, 'one', 1)
        r.zadd(name, 'two', 2)
        r.zadd(name, 'three', 3)
        r.zadd(name, 'four', 4)

        self.assertTrue(r.zrangebyscore(name, '-inf', '+inf') == ['one', 'two', 'three', 'four'])
        self.assertTrue(r.zrangebyscore(name, 1, 1) == ['one'])
        self.assertTrue(r.zrangebyscore(name, 1, 2) == ['one', 'two'])
        self.assertTrue(r.zrangebyscore(name, 2, 3) == ['two', 'three'])
        self.assertTrue(r.zrangebyscore(name, '(1', '(2') == [])
        self.assertTrue(r.zrangebyscore(name, '(1', '(3') == ['two'])
</snippet></ROW><ROW><id>18478627</id><snippet>slice</snippet></ROW><ROW><id>18478627</id><snippet>c[0.2:0.4]</snippet></ROW><ROW><id>18478627</id><snippet>c.__getitem__</snippet></ROW><ROW><id>18478627</id><snippet>slice(0.2, 0.4)</snippet></ROW><ROW><id>18478627</id><snippet>__getitem__</snippet></ROW><ROW><id>18478627</id><snippet>def __getitem__(self, x):
    if isinstance(x, slice):
        start = x.start
        stop = x.stop
        step = x.step
        # Do whatever you want to do to define your return
    ...
</snippet></ROW><ROW><id>18478627</id><snippet>Coords</snippet></ROW><ROW><id>18478627</id><snippet>self.r</snippet></ROW><ROW><id>18478627</id><snippet>FancyIndexDict</snippet></ROW><ROW><id>18478627</id><snippet>dict</snippet></ROW><ROW><id>18478627</id><snippet>__getitem__</snippet></ROW><ROW><id>18478627</id><snippet>self.r</snippet></ROW><ROW><id>18478627</id><snippet>FancyIndexDict</snippet></ROW><ROW><id>18478627</id><snippet>dict</snippet></ROW><ROW><id>18478746</id><snippet>from IPython.display import display, Math
from sympy import *
x1 = var('x_1')
x2 = var('x_2')
display(Math(latex(x1*x2,mul_symbol='dot')))
</snippet></ROW><ROW><id>18478746</id><snippet>dot</snippet></ROW><ROW><id>18478746</id><snippet>times</snippet></ROW><ROW><id>18478746</id><snippet>ldot</snippet></ROW><ROW><id>18478746</id><snippet>def Latex(expr):
    return display(Math(latex(expr,mul_symbol='dot')))
</snippet></ROW><ROW><id>18478746</id><snippet>Latex(x1*x2)
</snippet></ROW><ROW><id>18478783</id><snippet>def main(global_conf, **settings)</snippet></ROW><ROW><id>18478783</id><snippet>global_conf</snippet></ROW><ROW><id>18478783</id><snippet>settings</snippet></ROW><ROW><id>18478783</id><snippet>global_conf</snippet></ROW><ROW><id>18478783</id><snippet>[DEFAULT]
foo = bar

[app:main]
use = egg:myapp#main
baz = xyz

def main(global_conf, **app_settings):
    settings = global_conf
    settings.update(app_settings)
    config = Configurator(settings=settings)
    config.include('kotti')
    return config.make_wsgi_app()
</snippet></ROW><ROW><id>18478972</id><snippet>sudo sh setuptools-0.6c11-py2.7.egg
</snippet></ROW><ROW><id>18478972</id><snippet>[Errno 13] Permission denied
</snippet></ROW><ROW><id>18479171</id><snippet>&gt;&gt;&gt; a = (1,2,3,4)
&gt;&gt;&gt; b = (2,3,4,5)
&gt;&gt;&gt; tuple(set(a).intersection(set(b)))
(2, 3, 4)
</snippet></ROW><ROW><id>18479172</id><snippet>from library.models import MyClass
</snippet></ROW><ROW><id>18479172</id><snippet>from &lt;app&gt;.models import &lt;ModelName&gt;</snippet></ROW><ROW><id>18479446</id><snippet>import Tkinter as tk

class Example(tk.Frame):
    def __init__(self, *args, **kwargs):
        tk.Frame.__init__(self, *args, **kwargs)
        canvas = tk.Canvas(self, width=800, height=500)
        canvas.pack(side="top", fill="both", expand=True)
        for i in range(0, 800, 40):
            i+= 40
            fill = "yellow" if (i / 40) % 2 == 0 else "green"
            canvas.create_rectangle(i, 0, i+20, 500, fill=fill, outline="")
        canvas_id = canvas.create_text(10, 10, anchor="nw")
        canvas.itemconfig(canvas_id, text="this is the text "*300, width=780)
        canvas.itemconfig(canvas_id, font=("courier", 12))
        canvas.insert(canvas_id, 12, "new ")

if __name__ == "__main__":
    root = tk.Tk()
    Example(root).pack(side="top", fill="both", expand=True)
    root.mainloop()
</snippet></ROW><ROW><id>18479684</id><snippet>&gt;&gt;&gt; import gmpy2
&gt;&gt;&gt; a = -48197174570431531987668852939807674377435188974148779416366905274642031729688518691
&gt;&gt;&gt; b = 4322669160730708444058642850762359547515258361061655693150034467061
&gt;&gt;&gt; gmpy2.f_divmod(a,b)
(mpz(-11149864303351921), mpz(1542354793066875276328139562907995977816446564586050094773477055490))
&gt;&gt;&gt; gmpy2.c_divmod(a,b)
(mpz(-11149864303351920), mpz(-2780314367663833167730503287854363569698811796475605598376557411571))
&gt;&gt;&gt; gmpy2.t_divmod(a,b)
(mpz(-11149864303351920), mpz(-2780314367663833167730503287854363569698811796475605598376557411571))
&gt;&gt;&gt; help(gmpy2.f_divmod)
f_divmod(x, y) -&gt; (quotient, remainder)

Return the quotient and remainder of x divided by y. The quotient
is rounded towards -Inf (floor rounding) and the remainder will
have the same sign as y. x and y must be integers.

&gt;&gt;&gt; help(gmpy2.c_divmod)
c_divmod(x, y) -&gt; (quotient, remainder)

Return the quotient and remainder of x divided by y. The quotient
is rounded towards +Inf (ceiling rounding) and the remainder will
have the opposite sign of y. x and y must be integers.

&gt;&gt;&gt; help(gmpy2.t_divmod)
t_divmod(x, y) -&gt; (quotient, remainder)

Return the quotient and remainder of x divided by y. The quotient
is rounded towards zero (truncation) and the remainder will have
the same sign as x. x and y must be integers.
</snippet></ROW><ROW><id>18480233</id><snippet>KEYDOWN</snippet></ROW><ROW><id>18480233</id><snippet>KEYUP</snippet></ROW><ROW><id>18480604</id><snippet>id.select('text()').extract() 
</snippet></ROW><ROW><id>18480604</id><snippet>def parse_items(self, response):
  str = ""
  hxs = HtmlXPathSelector(response)

  for titles in titles:
      item = CraigslistSampleItem()
      item ["job_id"] = id.select('text()').extract()[0].strip() #this should work if #there is some string data available. otherwise it will give an index out of range error.
      items.append(item)
  return(items)
end
</snippet></ROW><ROW><id>18480885</id><snippet>elements = {'2': 'Hydrogen', '8': 'Oxygen'}
</snippet></ROW><ROW><id>18480885</id><snippet>user_input = '2'
for key,value in elements.items():
   if user_input == key:
      print value
   if user_input == value:
      print key
</snippet></ROW><ROW><id>18480885</id><snippet>def search_dictionary(user_input, haystack):
    for key,value in haystack.items():
        if user_input == key:
            return value
        if user_input == value:
            return key
</snippet></ROW><ROW><id>18480885</id><snippet>user_input = raw_input('Please enter your search item: ')
elements = {'2': 'Hydrogen', '8': 'Oxygen'}
result = search_dictionary(user_input, elements)
if result:
    print("The result of your search is {0}".format(result))
else:
    print("Your search for {0} returned no results".format(user_input))
</snippet></ROW><ROW><id>18480919</id><snippet>  with prefix(". /usr/local/bin/virtualenvwrapper.sh; workon mysite"):
</snippet></ROW><ROW><id>18480991</id><snippet>ensure_ascii=False</snippet></ROW><ROW><id>18480991</id><snippet>&gt;&gt;&gt; import json
&gt;&gt;&gt; city = u'חיפה'
&gt;&gt;&gt; print(json.dumps(city))
"\u05d7\u05d9\u05e4\u05d4"
&gt;&gt;&gt; print(json.dumps(city, ensure_ascii=False))
"חיפה"
</snippet></ROW><ROW><id>18480991</id><snippet>json.dump</snippet></ROW><ROW><id>18480991</id><snippet>import json
j = {'results': [u'חיפה']}
to_save = json.dumps(j, ensure_ascii=False)
with open('test.json', 'wb') as f:
    f.write(to_save.encode('utf-8'))
</snippet></ROW><ROW><id>18480991</id><snippet>import codecs
import json
j = {'results': [u'חיפה']}
to_save = json.dumps(j, ensure_ascii=False)
with codecs.open('test.json', 'wb', encoding='utf-8') as f:
    f.write(to_save)
</snippet></ROW><ROW><id>18480991</id><snippet>import codecs
import json
j = {'results': [u'חיפה']}
with codecs.open('test.json', 'wb', encoding='utf-8') as f:
    json.dump(j, f, ensure_ascii=False)
</snippet></ROW><ROW><id>18481009</id><snippet>myDict = {'A':[1,2,3,4], 'B':[5,6,7,8], 'C':'str', 'D':'str'}
myDict = {key:np.array(val) if key not in {'C', 'D'} else val for key, val in myDict.iteritems()}
</snippet></ROW><ROW><id>18481009</id><snippet>myDict = {'A':[1,2,3,4], 'B':[5,6,7,8], 'C':'str', 'D':'str'}
dict((key, np.array(val) if key not in {'C', 'D'} else val for key, val in myDict.iteritems())
</snippet></ROW><ROW><id>18481177</id><snippet>ind = zip(*[pat0+pat1])
named_ind = pandas.MultiIndex.from_tuples(ind, names = ['Patients'])
df = pandas.DataFrame({'T1avg':ser})
df['Slice']=pandas.Series(numpy.append(slc, slc), index=df.index)
</snippet></ROW><ROW><id>18481177</id><snippet>df[df['Slice']=='Slice 4']
</snippet></ROW><ROW><id>18481177</id><snippet>df.join(df2)
</snippet></ROW><ROW><id>18481177</id><snippet>               T1avg    Slice Tx Group   Tumour Type Imaging Sessions
Patients                                                         
NecS3Hs05      0  Slice 0  Control  subcutaneous                2
NecS3Hs05      0  Slice 1  Control  subcutaneous                2
NecS3Hs05      0  Slice 2  Control  subcutaneous                2
NecS3Hs05      0  Slice 3  Control  subcutaneous                2
NecS3Hs05      0  Slice 4  Control  subcutaneous                2
NecS3Hs05      0  Slice 5  Control  subcutaneous                2
NecS3Hs06      0  Slice 0  Treated    orthotopic                3
NecS3Hs06      0  Slice 1  Treated    orthotopic                3
NecS3Hs06      0  Slice 2  Treated    orthotopic                3
NecS3Hs06      0  Slice 3  Treated    orthotopic                3
NecS3Hs06      0  Slice 4  Treated    orthotopic                3
NecS3Hs06      0  Slice 5  Treated    orthotopic                3
</snippet></ROW><ROW><id>18481499</id><snippet>__doc__</snippet></ROW><ROW><id>18481499</id><snippet>__getattr__</snippet></ROW><ROW><id>18481499</id><snippet>__doc__</snippet></ROW><ROW><id>18481499</id><snippet>class A(object):
    def __init__(self, name):
        self.name = name

    def __repr__(self):
        return 'A[%s]' % self.name

class Test(object):
    def __getattr__(self, name):
        a = A(name)
        a.__doc__ = 'My a documentation'
        return a

In [11]: t = Test()
In [12]: t.foo
A[foo]
In [13]: t.foo?
Type:       A
String Form:A[foo]
Docstring:  My a documentation
</snippet></ROW><ROW><id>18481651</id><snippet>split()</snippet></ROW><ROW><id>18481651</id><snippet>&gt;&gt;&gt; s = "838: DEBUG, GD, Parameter(Player_Appearance_Model) = GaussianDistribution(0.28, 0.09)"
&gt;&gt;&gt; s.split(" = ")[1]
'GaussianDistribution(0.28, 0.09)'
</snippet></ROW><ROW><id>18481651</id><snippet>&gt;&gt;&gt; s.split("=")[1].strip()
'GaussianDistribution(0.28, 0.09)'
</snippet></ROW><ROW><id>18481713</id><snippet>format()</snippet></ROW><ROW><id>18481713</id><snippet>item["code"] = "{}-{}-{}".format(item["country"], item["region"], item["location"])
</snippet></ROW><ROW><id>18481713</id><snippet>item["code"] = "{country}-{region}-{location}".format(country=item["country"], 
                                                      region=item["region"],
                                                      location=item["location"])
</snippet></ROW><ROW><id>18481713</id><snippet>item["code"] = "%s-%s-%s" % (item["country"], item["region"], item["location"])
</snippet></ROW><ROW><id>18481713</id><snippet>item ["country"] = loc_Con.select('text()').extract()
item ["region"] = loc_Reg.select('text()').extract()
item ["location"] = loc_Loc.select('text()').extract()

item ["country"] = item ["country"][0] if item ["country"] else ""
item ["region"] = item ["region"][0] if item ["region"] else ""
item ["location"] = item ["location"][0] if item ["location"] else ""
</snippet></ROW><ROW><id>18482074</id><snippet>&gt;&gt;&gt; import re
&gt;&gt;&gt; s = "562: DEBUG, CIC, Parameter(Auto_Gain_ROI_Size) = 4"
&gt;&gt;&gt; t = "711: DEBUG, VSrc, Parameter(Auto_Contrast) = 0 "
&gt;&gt;&gt; myreg = re.compile(r'Parameter\((.*?)\)')
&gt;&gt;&gt; print myreg.search(s).group(1)
Auto_Gain_ROI_Size
&gt;&gt;&gt; print myreg.search(t).group(1)
Auto_Contrast
</snippet></ROW><ROW><id>18482074</id><snippet>&gt;&gt;&gt; print s.split('Parameter(')[1].split(')')[0]
Auto_Gain_ROI_Size
&gt;&gt;&gt; print t.split('Parameter(')[1].split(')')[0]
Auto_Contrast
</snippet></ROW><ROW><id>18482128</id><snippet>def main_func():
    from impl import a, b, c

    a()
    b()
    c()
</snippet></ROW><ROW><id>18482128</id><snippet>main_func</snippet></ROW><ROW><id>18482712</id><snippet>name.split("_")</snippet></ROW><ROW><id>18482712</id><snippet>username = name.split("_")[0]
description = name.split("_")[1]
</snippet></ROW><ROW><id>18482787</id><snippet>form = PersonForm({'firstname':person.firstname,.....})    
is_valid = form.is_valid()
</snippet></ROW><ROW><id>18482857</id><snippet>class Transactionlog(Base):
    ...
    @classmethod
    def copy(cls, t):
        t_new = cls()
        t_new.tlog_newData = t.tlog_newData
        ...
</snippet></ROW><ROW><id>18482857</id><snippet>data = {'tlog_newData': origin,
        'tlog_ppl_id': self._contract.member.ppl_id,
        ...
       }
make_log = functools.partial(Transactionlog, **data)

# linked periodical articles AB
for linkedarticle in self._contract.linkedarticles:
    if linkedarticle.pmar_periodical:
        t = make_log()
        ...
</snippet></ROW><ROW><id>18483327</id><snippet>zip()</snippet></ROW><ROW><id>18483327</id><snippet>dict(zip(i, j))
</snippet></ROW><ROW><id>18483327</id><snippet>&gt;&gt;&gt; i=["abc","def","ghi","jkl"]
&gt;&gt;&gt; j=[["a","b","c","d"],["q","w","e","r"],["t","y","u","i"]]
&gt;&gt;&gt; dict(zip(i, j))
{'abc': ['a', 'b', 'c', 'd'], 'ghi': ['t', 'y', 'u', 'i'], 'def': ['q', 'w', 'e', 'r']}
</snippet></ROW><ROW><id>18483327</id><snippet>zip()</snippet></ROW><ROW><id>18483327</id><snippet>dict()</snippet></ROW><ROW><id>18483800</id><snippet>-file</snippet></ROW><ROW><id>18483800</id><snippet>import sys
sys.path.append('.')
</snippet></ROW><ROW><id>18483927</id><snippet>values = wkstest.Range("A3,A5,A7").Value
</snippet></ROW><ROW><id>18483927</id><snippet>values = wkstest.Range("A3,A5,A7").Select
</snippet></ROW><ROW><id>18483927</id><snippet>rows=[1,3,5]
val = wb.ActiveSheet.Range('A1:A5').Value 
vals = {} #create a dictionary
for i in xrange(0,len(rows)):
    vals[rows[i]]=val[rows[i]-1] 
</snippet></ROW><ROW><id>18484034</id><snippet>#!/bin/bash

NEXT=''

for (( ;; )); do
    if [[ -n $NEXT ]]; then
        LINE=$NEXT
        NEXT=''
    else
        read LINE || break
    fi

    FILES=("$LINE")
    FORMAT=${LINE#???/???}

    while read LINE; do
        if [[ $LINE == ???/???"$FORMAT" ]]; then
            FILES+=("$LINE")
        else
            NEXT=$LINE
            break
        fi
    done

    echo "Concatenating ${FILES[*]} to $FORMAT."

    cat "${FILES[@]}" &gt; "$FORMAT"
done &lt; &lt;(
    find xa?/ -mindepth 1 -maxdepth 1 -type f -name '???P_len_*.fa' | sort -k 1.14 -n
    find xa?/ -mindepth 1 -maxdepth 1 -type f -name '???NP_len_*.fa' | sort -k 1.15 -n
)
</snippet></ROW><ROW><id>18484281</id><snippet>pipeline.py</snippet></ROW><ROW><id>18484281</id><snippet>from scrapy.exceptions import DropItem

class DropIfEmptyFieldPipeline(object):

    def process_item(self, item, spider):

        # to test if only "job_id" is empty,
        # change to:
        # if not(item["job_id"]):
        if not(all(item.values())):
            raise DropItem()
        else:
            return item
</snippet></ROW><ROW><id>18484281</id><snippet>settings.py</snippet></ROW><ROW><id>18484281</id><snippet>ITEM_PIPELINES = [ 'myproject.pipeline.DropIfEmptyFieldPipeline', ]
</snippet></ROW><ROW><id>18484281</id><snippet>from scrapy.exceptions import DropItem
import re

class DropIfEmptyFieldPipeline(object):

    # case-insensitive search for string "nurse"
    REGEX_NURSE = re.compile(r'nurse', re.IGNORECASE)

    def process_item(self, item, spider):
        # user .search() and not .match() to test for substring match
        if not(self.REGEX_NURSE.search(item["job_id"])):
            raise DropItem()
        else:
            return item
</snippet></ROW><ROW><id>18484313</id><snippet>driver.find_element_by_id("txtfld").get_attribute("value")
</snippet></ROW><ROW><id>18484466</id><snippet># File: a.py

class Klass(object):
    pass
</snippet></ROW><ROW><id>18484466</id><snippet># File b.py

from a import Klass

def somemethod(foo):
    pass

somemethod(Klass)
</snippet></ROW><ROW><id>18484466</id><snippet># File c.py

from b import somemethod
from a import Klass

somemethod(Klass)
</snippet></ROW><ROW><id>18484466</id><snippet>A.Class</snippet></ROW><ROW><id>18484466</id><snippet>B</snippet></ROW><ROW><id>18484466</id><snippet>B.Class</snippet></ROW><ROW><id>18484466</id><snippet>A.Class</snippet></ROW><ROW><id>18484773</id><snippet>re.sub</snippet></ROW><ROW><id>18484773</id><snippet>&gt;&gt;&gt; import re
&gt;&gt;&gt; s = 'This is a cake. It is 1.45 dollars and 2.38 kg.'
&gt;&gt;&gt; re.sub(r'(?&lt;=\d)\.(?=\d)', '&lt;replace&gt;', s)
'This is a cake. It is 1&lt;replace&gt;45 dollars and 2&lt;replace&gt;38 kg.'
</snippet></ROW><ROW><id>18484848</id><snippet>def do_configure(self, line):
    config = ConfigMode(...)
    config.cmdloop()
</snippet></ROW><ROW><id>18485071</id><snippet>window.print()</snippet></ROW><ROW><id>18485121</id><snippet>&gt;&gt;&gt; msg = '#my_tag the rest of my tweet'
&gt;&gt;&gt; re.sub('^#(\w+) (.*)', r'&lt;a href="http://statigr.am/tag/\1"&gt;\2&lt;/a&gt;', msg)
'&lt;a href="http://statigr.am/tag/my_tag"&gt;the rest of my tweet&lt;/a&gt;'
&gt;&gt;&gt; 
</snippet></ROW><ROW><id>18485226</id><snippet>thread = TimerClass()
thread.start()
# Do your stuff
</snippet></ROW><ROW><id>18485226</id><snippet>thread.event.set()
</snippet></ROW><ROW><id>18485609</id><snippet>__repr__</snippet></ROW><ROW><id>18485609</id><snippet>TimeEntry</snippet></ROW><ROW><id>18485609</id><snippet>__repr__</snippet></ROW><ROW><id>18485609</id><snippet>__str__</snippet></ROW><ROW><id>18485701</id><snippet>from __future__ import print_function
print('tiers found: {0}'.format(tier.attrib['TIER_ID'].lower()), end=',')
</snippet></ROW><ROW><id>18485755</id><snippet>A_B D</snippet></ROW><ROW><id>18485755</id><snippet>A</snippet></ROW><ROW><id>18485755</id><snippet>[A-Z,0-9]+</snippet></ROW><ROW><id>18485755</id><snippet>_??</snippet></ROW><ROW><id>18485755</id><snippet>([A-Z,0-9]+_??)+</snippet></ROW><ROW><id>18485755</id><snippet>[A-Z,0-9]</snippet></ROW><ROW><id>18485755</id><snippet>_</snippet></ROW><ROW><id>18485755</id><snippet>([A-Z,0-9]+_??)+</snippet></ROW><ROW><id>18485755</id><snippet>_??</snippet></ROW><ROW><id>18485755</id><snippet>([A-Z,0-9]+_??)+</snippet></ROW><ROW><id>18485755</id><snippet>[A-Z,0-9]</snippet></ROW><ROW><id>18485755</id><snippet>$</snippet></ROW><ROW><id>18485755</id><snippet>([A-Z,0-9]+_??)+</snippet></ROW><ROW><id>18485755</id><snippet>#</snippet></ROW><ROW><id>18485755</id><snippet>%</snippet></ROW><ROW><id>18485755</id><snippet>^([A-Z0-9]_?)*[A-Z0-9]$
</snippet></ROW><ROW><id>18485755</id><snippet>_</snippet></ROW><ROW><id>18485755</id><snippet>([A-Z,0-9]+_??)+[A-Z,0-9]$
          ^  ^ ^
        You  |see those two, they are a lot of trouble together 
             |
            These two ?? with the the other two + on the inside and outside, hell :)
</snippet></ROW><ROW><id>18485967</id><snippet>&gt;&gt;&gt; a = '41cf4a077a7454'
&gt;&gt;&gt; b = [a[2*i]+a[2*i+1] for i in range(len(a)/2)]
 ['41', 'cf', '4a', '07', '7a', '74', '54']
&gt;&gt;&gt; c = map(lambda x: "{0:08b}".format(int(x, 16)), b)
['01000001',
 '11001111',
 '01001010',
 '00000111',
 '01111010',
 '01110100',
 '01010100']
&gt;&gt;&gt; "".join(c)
'01000001000111001100111111110100010010101010000000000111'
</snippet></ROW><ROW><id>18486118</id><snippet>__reduce__</snippet></ROW><ROW><id>18486118</id><snippet>class TestDict(dict):
    ...

    def __reduce__(self):
        return type(self), (self.test, dict(self))
</snippet></ROW><ROW><id>18486246</id><snippet>&gt;&gt;&gt; np.arange(a.shape[0])[~np.in1d(a,b)].tolist()
  [0, 1, 3]
</snippet></ROW><ROW><id>18486290</id><snippet>b = a.resample('AS-APR', how='sum').reindex(a.index, method='pad')
</snippet></ROW><ROW><id>18486290</id><snippet>resample</snippet></ROW><ROW><id>18486290</id><snippet>a</snippet></ROW><ROW><id>18486290</id><snippet>b = a.resample('AS-APR', how='sum').reindex(a.resample('D').index, method='pad')
</snippet></ROW><ROW><id>18486401</id><snippet>unicode</snippet></ROW><ROW><id>18486401</id><snippet>print some_unicode.encode('utf-8')</snippet></ROW><ROW><id>18486401</id><snippet>u'\xc1lvaro Salazar'</snippet></ROW><ROW><id>18486401</id><snippet>Á</snippet></ROW><ROW><id>18486401</id><snippet>\x</snippet></ROW><ROW><id>18486401</id><snippet>\u</snippet></ROW><ROW><id>18486401</id><snippet>\u00c1</snippet></ROW><ROW><id>18486534</id><snippet>os.environ</snippet></ROW><ROW><id>18486534</id><snippet>sys</snippet></ROW><ROW><id>18486534</id><snippet>import sys
print(sys.path)
</snippet></ROW><ROW><id>18486534</id><snippet>PYTHONPATH</snippet></ROW><ROW><id>18486577</id><snippet>def multiples_of_3():               # generator
    for i in range(100):
       yield i * 3
def multiples_of_7():               # generator
    for i in range(100):
       yield i * 7
list((i,j) for i in multiples_of_3() for j in multiples_of_7())
</snippet></ROW><ROW><id>18486577</id><snippet>(i*7 ...)</snippet></ROW><ROW><id>18486577</id><snippet>for</snippet></ROW><ROW><id>18486577</id><snippet>multiples_of_2 = iter(xrange(0, 100, 2))  # iterator
for i in multiples_of_2:
    print i
# prints nothing because the iterator is spent
for i in multiples_of_2:
    print i
</snippet></ROW><ROW><id>18486577</id><snippet>multiples_of_2 = xrange(0, 100, 2)        # iterable sequence, converted to iterator
for i in multiples_of_2:
    print i
# prints again because a new iterator gets created
for i in multiples_of_2:
    print i
</snippet></ROW><ROW><id>18486583</id><snippet># -*- coding: utf-8 -*-</snippet></ROW><ROW><id>18486583</id><snippet># -*- coding: utf-8 -*-
import pickle
WORDS = [['eat','manger','v'],['drink','boire','v'],
["cake",'le gateau','n'],['coffee','le café','n']]

wordDatabase = open('wordsForProgram.txt','wb')
pickle.dump(WORDS,wordDatabase)
wordDatabase.close()

inFile = open('wordsForProgram.txt','rb')
newList = pickle.load(inFile)

for i in newList:
    for j in i:
        print j
</snippet></ROW><ROW><id>18486583</id><snippet>eat
manger
v
drink
boire
v
cake
le gateau
n
coffee
le café
n
</snippet></ROW><ROW><id>18486583</id><snippet># -*- coding: utf-8 -*-
import pickle
import codecs
WORDS = [['eat','manger','v'],['drink','boire','v'],
["cake",'le gateau','n'],['coffee','le café','n']]

wordDatabase = codecs.open('wordsForProgram.txt', 'w', 'utf-8')
pickle.dump(WORDS,wordDatabase)
wordDatabase.close()

inFile = codecs.open('wordsForProgram.txt','rb')
newList = pickle.load(inFile)

for i in newList:
    for j in i:
        print j
</snippet></ROW><ROW><id>18486808</id><snippet>import datetime
time = datetime.datetime.strptime('27/Aug/2013:12:45:54', '%d/%b/%Y:%H:%M:%S')
start_timestamp = datetime.datetime.strptime('20/Aug/2013:12:45:54', '%d/%b/%Y:%H:%M:%S')
end_timestamp = datetime.datetime.strptime('30/Aug/2013:12:45:54', '%d/%b/%Y:%H:%M:%S')

if time &gt;= start_timestamp and  time &lt;= end_timestamp: print 'it worked'
</snippet></ROW><ROW><id>18486925</id><snippet>seed</snippet></ROW><ROW><id>18487162</id><snippet>/.../</snippet></ROW><ROW><id>18487162</id><snippet>tag_regex = re.compile(r"#\S+")
</snippet></ROW><ROW><id>18487430</id><snippet>from multiprocessing import Pool
NUMBER_OF_PROCS = 5 # some number... not necessarily the number of cores due to I/O

pool = Pool(NUMBER_OF_PROCS)

for i in customerID:
    pool.apply_async(getRecommendations, [i])

pool.close()
pool.join()
</snippet></ROW><ROW><id>18487687</id><snippet>#!/usr/bin/env python

"""
Test program.

Usage:
    test.py (-v ...)

Options:
    -v  Flag that should be counted
"""

import docopt
print docopt.docopt(__doc__)
</snippet></ROW><ROW><id>18487687</id><snippet>...</snippet></ROW><ROW><id>18487687</id><snippet>test.py -vvv</snippet></ROW><ROW><id>18487687</id><snippet>
    {'-v': 3}
</snippet></ROW><ROW><id>18487687</id><snippet>...</snippet></ROW><ROW><id>18488207</id><snippet>dis.dis()</snippet></ROW><ROW><id>18488207</id><snippet>&gt;&gt;&gt; import dis
&gt;&gt;&gt; def func(x):
...     return cos(x)
... 
&gt;&gt;&gt; dis.dis(func)
  2           0 LOAD_GLOBAL              0 (cos)
              3 LOAD_FAST                0 (x)
              6 CALL_FUNCTION            1
              9 RETURN_VALUE        
</snippet></ROW><ROW><id>18488207</id><snippet>LOAD_GLOBAL</snippet></ROW><ROW><id>18488207</id><snippet>cos</snippet></ROW><ROW><id>18488207</id><snippet>LOAD_FAST</snippet></ROW><ROW><id>18488207</id><snippet>LOAD_CONST</snippet></ROW><ROW><id>18488207</id><snippet>None</snippet></ROW><ROW><id>18488207</id><snippet>LOAD_DEREF</snippet></ROW><ROW><id>18488207</id><snippet>LOAD_NAME</snippet></ROW><ROW><id>18488207</id><snippet>LOAD_NAME</snippet></ROW><ROW><id>18488207</id><snippet>cos</snippet></ROW><ROW><id>18488207</id><snippet>locals</snippet></ROW><ROW><id>18488207</id><snippet>exec()</snippet></ROW><ROW><id>18488207</id><snippet>exec</snippet></ROW><ROW><id>18488207</id><snippet>&gt;&gt;&gt; def unoptimized(x):
...     exec('pass')
...     return cos(x)
... 
&gt;&gt;&gt; dis.dis(unoptimized)
  2           0 LOAD_CONST               1 ('pass')
              3 LOAD_CONST               0 (None)
              6 DUP_TOP             
              7 EXEC_STMT           

  3           8 LOAD_NAME                0 (cos)
             11 LOAD_FAST                0 (x)
             14 CALL_FUNCTION            1
             17 RETURN_VALUE        
</snippet></ROW><ROW><id>18488207</id><snippet>LOAD_NAME</snippet></ROW><ROW><id>18488207</id><snippet>cos</snippet></ROW><ROW><id>18488207</id><snippet>exec()</snippet></ROW><ROW><id>18488207</id><snippet>LOAD_NAME</snippet></ROW><ROW><id>18488207</id><snippet>eval</snippet></ROW><ROW><id>18488244</id><snippet>scipy</snippet></ROW><ROW><id>18488244</id><snippet>itertools</snippet></ROW><ROW><id>18488244</id><snippet>itertools.combinations</snippet></ROW><ROW><id>18488244</id><snippet>itertools.permutations</snippet></ROW><ROW><id>18488316</id><snippet>" "</snippet></ROW><ROW><id>18488316</id><snippet>category</snippet></ROW><ROW><id>18488316</id><snippet>split</snippet></ROW><ROW><id>18488316</id><snippet>{% for icon in instance.category.split %}
  &lt;p&gt;{{ icon }}&lt;/p&gt;
{% endfor %}
</snippet></ROW><ROW><id>18488540</id><snippet>tarout.add(tarname,arcname=os.path.basename(tarname))
</snippet></ROW><ROW><id>18488540</id><snippet>import os</snippet></ROW><ROW><id>18488684</id><snippet>.bash_profile</snippet></ROW><ROW><id>18488684</id><snippet>alias python='python3'</snippet></ROW><ROW><id>18488773</id><snippet>from django.db.models.signals import pre_delete
from django.dispatch.dispatcher import receiver
from django.contrib.auth.models import User
from django.core.exceptions import PermissionDenied

@receiver(pre_delete, sender=User)
def delete_user(sender, instance, **kwargs):
    if instance.is_superuser:
        raise PermissionDenied
</snippet></ROW><ROW><id>18488969</id><snippet>\</snippet></ROW><ROW><id>18488969</id><snippet>print</snippet></ROW><ROW><id>18488969</id><snippet>str</snippet></ROW><ROW><id>18488969</id><snippet>&gt;&gt;&gt; print re.sub(r'-N-', r'(\d+)', 'This is a number -N-')
This is a number (\d+)
</snippet></ROW><ROW><id>18488969</id><snippet>repr</snippet></ROW><ROW><id>18488969</id><snippet>&gt;&gt;&gt; re.sub(r'-N-', r'(\d+)', 'This is a number -N-')
'This is a number (\\d+)'
&gt;&gt;&gt; print repr(re.sub(r'-N-', r'(\d+)', 'This is a number -N-'))
'This is a number (\\d+)'
</snippet></ROW><ROW><id>18488969</id><snippet>&gt;&gt;&gt; patt = re.compile(re.sub(r'-N-', r'(\d+)', 'This is a number -N-'))
&gt;&gt;&gt; patt.match('This is a number 20').group(1)
'20'
&gt;&gt;&gt; regex = re.sub(r'-N-', r'(\d+)', 'This is a number -N-')
&gt;&gt;&gt; re.match(regex, 'This is a number 20').group(1)
'20'
</snippet></ROW><ROW><id>18488969</id><snippet>Difference between __str__ and __repr__ in Python</snippet></ROW><ROW><id>18489168</id><snippet>out</snippet></ROW><ROW><id>18489168</id><snippet>np.cumsum(a, axis=1, out=a)
</snippet></ROW><ROW><id>18489168</id><snippet>axis=0</snippet></ROW><ROW><id>18489168</id><snippet>axis=1</snippet></ROW><ROW><id>18489207</id><snippet>cls</snippet></ROW><ROW><id>18489207</id><snippet>self</snippet></ROW><ROW><id>18489207</id><snippet>cls</snippet></ROW><ROW><id>18489500</id><snippet>textctrl</snippet></ROW><ROW><id>18489500</id><snippet>wx.lib.FileBrowseButton</snippet></ROW><ROW><id>18489500</id><snippet>wx.Button</snippet></ROW><ROW><id>18489500</id><snippet>wx.FileDialog</snippet></ROW><ROW><id>18489500</id><snippet>wx.lib.FileBrowsBbutton</snippet></ROW><ROW><id>18489500</id><snippet>def OnBrowse (self, event = None):
        """ Going to browse for file... """
        current = self.GetValue()
        directory = os.path.split(current)
        if os.path.isdir( current):
            directory = current
            current = ''
        elif directory and os.path.isdir( directory[0] ):
            current = directory[1]
            directory = directory [0]
        else:
            directory = self.startDirectory
            current = ''
        dlg = wx.FileDialog(self, self.dialogTitle, directory, current,
                            self.fileMask, self.fileMode)

        if dlg.ShowModal() == wx.ID_OK:
            self.SetValue(dlg.GetPath())
        dlg.Destroy()
</snippet></ROW><ROW><id>18489504</id><snippet>id</snippet></ROW><ROW><id>18489574</id><snippet>N=10000;  % &lt;-- length of sequence

seq = rand(N,1)&gt;0.5;    
fid=fopen('test.txt','w','native');
fprintf(fid,'%d',seq)
fclose(fid)
</snippet></ROW><ROW><id>18489574</id><snippet>&gt; ./assess.exe 10000 
</snippet></ROW><ROW><id>18489574</id><snippet>&gt; ./assess.exe 1000000 

    0 [data source?]
    .\data\data.pi [path to file?]
    1 [tests?]
    0 [adjust pars?] 
    1 [bitstreams?] 
    0 [ASCII?]
</snippet></ROW><ROW><id>18489574</id><snippet>fid=fopen('test.txt','w','native');
fwrite(fid, bin2dec(reshape(num2str(A),[],8)), 'uint8')
fclose(fid)
</snippet></ROW><ROW><id>18489593</id><snippet>&lt;form ..&gt;</snippet></ROW><ROW><id>18489593</id><snippet>&lt;form&gt;</snippet></ROW><ROW><id>18489593</id><snippet>&lt;form &gt;
    {{ form1.as_p }}
    {{ form2.as_p }}
    {{ form3.as_p }}
&lt;/form&gt;
</snippet></ROW><ROW><id>18489593</id><snippet>if request.method == 'POST':
        form1 = Form1(request.POST)
        form2 = Form2(request.POST)
        print(request.POST)
        if form1.is_valid() or form2.is_valid(): 
</snippet></ROW><ROW><id>18489593</id><snippet>form prefix</snippet></ROW><ROW><id>18489593</id><snippet>if request.method == 'POST':
        form1 = Form1(prefix="form1", request.POST)
        form2 = Form2(prefix="form2", request.POST)
        print(request.POST)
        if form1.is_valid() or form2.is_valid(): 
else:
        form1 = Form1(prefix="form1")
        form2 = Form2(prefix="form2")
</snippet></ROW><ROW><id>18489624</id><snippet>int()</snippet></ROW><ROW><id>18489624</id><snippet>print "Please key in the first log file you would like to use: "
choice1=raw_input()
.
.
filename1=filenames[int(choice1)]
.
</snippet></ROW><ROW><id>18489624</id><snippet>choice1 = int(raw_input())
filename1 = filenames[choice1]
</snippet></ROW><ROW><id>18489624</id><snippet>while True:
    choice1 = raw_input('Enter first file name index: ')
    if choice1.strip() != '':
        index1 = int(choice1)
        if index1 &gt;= 0 and index1 &lt; len(filenames):
            filename1 = filenames[index1]
            break // this breaks the while loop when index is correct
</snippet></ROW><ROW><id>18489942</id><snippet>"TXT and CSV files (*.txt; *.csv)|*.txt; *.csv"</snippet></ROW><ROW><id>18489942</id><snippet>"TXT and CSV files (*.txt; *.csv)|*.txt; *.csv|PNG files (*.png)|*.png"</snippet></ROW><ROW><id>18489981</id><snippet>traceback</snippet></ROW><ROW><id>18489981</id><snippet>import traceback
traceback.print_stack()
</snippet></ROW><ROW><id>18489981</id><snippet>pdb</snippet></ROW><ROW><id>18490260</id><snippet>[dict(username='test')]
</snippet></ROW><ROW><id>18490586</id><snippet>run()</snippet></ROW><ROW><id>18490586</id><snippet>i</snippet></ROW><ROW><id>18490586</id><snippet>i</snippet></ROW><ROW><id>18490586</id><snippet>i</snippet></ROW><ROW><id>18490586</id><snippet>run()</snippet></ROW><ROW><id>18490586</id><snippet>import sys

def run():
   # Code here!

def main():
   for i in range(int(sys.stdin.readline())):
      run()

if __name__ == '__main__':
   main()
</snippet></ROW><ROW><id>18490737</id><snippet>from django.db.models import Count

sorted = coupons.objects.all()\
         .annotate(tags_count=Count('couponStore__storeTags')\
         .order_by('-tags_count')
</snippet></ROW><ROW><id>18490757</id><snippet>&gt;&gt;&gt; import re

&gt;&gt;&gt; formula = "P = V*I*cos(2*pi*f)"
&gt;&gt;&gt; variables = re.findall('[a-zA-Z]+' , formula)
['P', 'V', 'I', 'cos', 'pi', 'f']
&gt;&gt;&gt; special = ['cos', 'pi']
&gt;&gt;&gt; variables = [v for v in variables if v not in special]  
['P', 'V', 'I', 'f']
</snippet></ROW><ROW><id>18491085</id><snippet>def heading():
    result=[] #create a void list
    numbersum=sum(list1) #"calculate the total amount of numbers in the list"
# e.g. if list=[1,1,2] sum(list) return 1+1+2. 
    for i in range(len(list1)):
         result.append(((list1[i])/float(numbersum))*360) # calculate portion of the circle ("then divide by 360 to work out portions of a circle") 
#in this case if you have a list A=[250,250] the function will return two angle of 180° 
    #however you can return portion of the circle in percent e.g. 0.50 is half a circle 1 is the whole circle simply removing "*360" from the code above 
    return result
</snippet></ROW><ROW><id>18491085</id><snippet> test=heading()
 print test
 print sum(test)
</snippet></ROW><ROW><id>18491175</id><snippet>star_pos = my_string.find('*')
my_string = my_string[:star_pos] + '*' + checksum_str + my_string[star_pos + 3:]
</snippet></ROW><ROW><id>18491447</id><snippet>def fancy_dict(*args):
    'Pass in a list of tuples, which will be key/value pairs'
    ret = {}
    for k,v in args:
        for i in k:
            ret[i] = v
    return ret
</snippet></ROW><ROW><id>18491447</id><snippet>&gt;&gt;&gt; dic = fancy_dict((range(10), 'hello'), (range(100,125), 'bye'))
&gt;&gt;&gt; dic[1]
'hello'
&gt;&gt;&gt; dic[9]
'hello'
&gt;&gt;&gt; dic[100]
'bye'
&gt;&gt;&gt; 
</snippet></ROW><ROW><id>18491447</id><snippet>fancy_dict</snippet></ROW><ROW><id>18491578</id><snippet>find_element_by_xpath_selector</snippet></ROW><ROW><id>18491578</id><snippet>find_element_by_xpath</snippet></ROW><ROW><id>18491578</id><snippet>find_element_by_xpath_selector</snippet></ROW><ROW><id>18491578</id><snippet>driver = webdriver.Firefox()
...
driver = driver.find_element_by_xpath(u"//td[contains(text(), 'hello')]")
</snippet></ROW><ROW><id>18491578</id><snippet>from selenium import webdriver

driver = webdriver.Firefox()
driver.get('http://python.org')
link = driver.find_element_by_xpath(u'//a[contains(text(), "Download")]')
link.click()
</snippet></ROW><ROW><id>18491650</id><snippet>''</snippet></ROW><ROW><id>18491650</id><snippet>'auth'</snippet></ROW><ROW><id>18491650</id><snippet>logger = logging.getLogger('')
logger = logging.getLogger('auth')
</snippet></ROW><ROW><id>18491650</id><snippet>logger.info(...)
</snippet></ROW><ROW><id>18491650</id><snippet>root_logger = logging.getLogger('')
logger = logging.getLogger('auth')
</snippet></ROW><ROW><id>18491650</id><snippet>root_logger</snippet></ROW><ROW><id>18491650</id><snippet>logger</snippet></ROW><ROW><id>18491707</id><snippet>python time.py python ratatosk.py \&lt; input.txt
</snippet></ROW><ROW><id>18491862</id><snippet>False</snippet></ROW><ROW><id>18491862</id><snippet>True</snippet></ROW><ROW><id>18491862</id><snippet>False</snippet></ROW><ROW><id>18491862</id><snippet>True</snippet></ROW><ROW><id>18491862</id><snippet>None</snippet></ROW><ROW><id>18491862</id><snippet>0</snippet></ROW><ROW><id>18491862</id><snippet>'0'</snippet></ROW><ROW><id>18491862</id><snippet>True</snippet></ROW><ROW><id>18491914</id><snippet>document = ET.parse(sourcefileWithNoHeader)
</snippet></ROW><ROW><id>18491914</id><snippet>sourcefileWithNoHeader.read()
</snippet></ROW><ROW><id>18491914</id><snippet>StringIO</snippet></ROW><ROW><id>18491914</id><snippet>contents = StringIO(sourcefileWithNoHeader.read())
ET.parse(contents)
statefile.write(contents.getvalue())
</snippet></ROW><ROW><id>18491915</id><snippet>ctypes</snippet></ROW><ROW><id>18491915</id><snippet>ctypes.c_uint</snippet></ROW><ROW><id>18491915</id><snippet>&gt;&gt;&gt; i = ctypes.c_uint(0)
&gt;&gt;&gt; i.value -= 1
&gt;&gt;&gt; i                                                            
c_uint(4294967295)
&gt;&gt;&gt; i.value += 1
&gt;&gt;&gt; i
c_uint(0)
</snippet></ROW><ROW><id>18491915</id><snippet>ctypes</snippet></ROW><ROW><id>18492294</id><snippet>bytearrays</snippet></ROW><ROW><id>18492294</id><snippet>io.BytesIO</snippet></ROW><ROW><id>18492294</id><snippet>bytearray</snippet></ROW><ROW><id>18492294</id><snippet>import os
import io
import Image
from array import array

def readimage(path):
    count = os.stat(path).st_size / 2
    with open(path, "rb") as f:
        return bytearray(f.read())

bytes = readimage(path+extension)
image = Image.open(io.BytesIO(bytes))
image.save(savepath)
</snippet></ROW><ROW><id>18492581</id><snippet># assume your bytes came from a file:
bytesIneed = bytearray([234,232,231,188,122,132,145])
import base64

bytesConverted = base64.b64encode(bytesIneed)

print "encoded string: "
print bytesConverted

bytesRecovered = base64.b64decode(bytesConverted)

print "decoded binary: "
for c in bytesRecovered: print(ord(c))
</snippet></ROW><ROW><id>18492581</id><snippet>encoded string:
6ujnvHqEkQ==
decoded binary:
234
232
231
188
122
132
145
</snippet></ROW><ROW><id>18492581</id><snippet>6ujnvHqEkQ==</snippet></ROW><ROW><id>18492606</id><snippet>sort</snippet></ROW><ROW><id>18492606</id><snippet>dn: Subscriber=UniqueName1@domain.com;RestOfTree=node1|groups: 1|permissions: 1|IsActive: FALSE|Barring: TRUE||dn: ProfileID=UniqueName1@domain.com;Subscriber=UniqueName1;RestOfTree=node1|groups: 1|permissions: 1|ServiceProfile: Lemur
</snippet></ROW><ROW><id>18492606</id><snippet>sort -t \| -k1</snippet></ROW><ROW><id>18492606</id><snippet>sort</snippet></ROW><ROW><id>18492606</id><snippet>subprocess.check_call</snippet></ROW><ROW><id>18492606</id><snippet>tmpfile.NamedTemporaryFile</snippet></ROW><ROW><id>18492737</id><snippet>options = ["one","two","three"]
...
self.menuVar = tk.StringVar(master)
self.optionMenu = tk.OptionMenu(master, self.menuVar, *options)
...
self.menuVar.set(options[0])
</snippet></ROW><ROW><id>18492737</id><snippet>value = self.optionMenu["menu"].entrycget(0, "label")
self.menuVar.set(value)
</snippet></ROW><ROW><id>18492767</id><snippet>wait</snippet></ROW><ROW><id>18492767</id><snippet>poll</snippet></ROW><ROW><id>18492767</id><snippet>wait</snippet></ROW><ROW><id>18492767</id><snippet>poll</snippet></ROW><ROW><id>18492767</id><snippet>if self.returncode is None:
    if _WaitForSingleObject(self._handle, 0) == _WAIT_OBJECT_0:
        self.returncode = _GetExitCodeProcess(self._handle)
    return self.returncode
</snippet></ROW><ROW><id>18492767</id><snippet>wait</snippet></ROW><ROW><id>18492767</id><snippet>if self.returncode is None:
    _subprocess.WaitForSingleObject(self._handle,
                                    _subprocess.INFINITE)
    self.returncode = _subprocess.GetExitCodeProcess(self._handle)
return self.returncode
</snippet></ROW><ROW><id>18492767</id><snippet>subprocess</snippet></ROW><ROW><id>18492767</id><snippet>os.waitpid</snippet></ROW><ROW><id>18492974</id><snippet>d = {"Player": 
    {"Playlist": 
        [
            {"Song" : "Foo", "Album" : "Bar"}, 
            {"Song" : "Sunrise", "Album", "Random"}
        ]
    }
}

for song in d['Player']['PlayList']:
    print song
</snippet></ROW><ROW><id>18492974</id><snippet>{'Album': 'Bar', 'Song': 'Food'}
{'Album': 'Random', 'Song': 'Sunrise'}
</snippet></ROW><ROW><id>18492974</id><snippet>Sunrise</snippet></ROW><ROW><id>18492974</id><snippet>Song</snippet></ROW><ROW><id>18492974</id><snippet>for song in d['Player']['Playlist']:
    if song['Song'] is 'Sunrise':
        #do thing with song here
        print song
</snippet></ROW><ROW><id>18492974</id><snippet>{'Album': 'Random', 'Song': 'Sunrise'}
</snippet></ROW><ROW><id>18492974</id><snippet>{"Player":  
    {"Playlist": 
        [
            {"Song" : "Foo", "Album" : "Bar"}, 
            {"Song" : "Sunrise", "Album", "Random"}
        ]
    }
}
</snippet></ROW><ROW><id>18492974</id><snippet>d['Player']:</snippet></ROW><ROW><id>18492974</id><snippet>{'Playlist': [{'Album': 'Bar', 'Song': 'Food'}, {'Album': 'Random', 'Song': 'Sunrise'}]}</snippet></ROW><ROW><id>18492974</id><snippet>d['Player']['Playlist']:</snippet></ROW><ROW><id>18492974</id><snippet>{'Playlist': [{'Album': 'Bar', 'Song': 'Food'}, {'Album': 'Random', 'Song': 'Sunrise'}]}</snippet></ROW><ROW><id>18492974</id><snippet>Playlist</snippet></ROW><ROW><id>18492974</id><snippet>list</snippet></ROW><ROW><id>18492974</id><snippet>dict</snippet></ROW><ROW><id>18492974</id><snippet>d['Player']['Playlist'][0]</snippet></ROW><ROW><id>18492974</id><snippet>{'Album': 'Bar', 'Song': 'Food'}</snippet></ROW><ROW><id>18492974</id><snippet>dict</snippet></ROW><ROW><id>18492974</id><snippet>Album</snippet></ROW><ROW><id>18492974</id><snippet>Song</snippet></ROW><ROW><id>18492974</id><snippet>d['Player']['Playlist'][0]['Album']:</snippet></ROW><ROW><id>18492974</id><snippet>Album</snippet></ROW><ROW><id>18492974</id><snippet>Player</snippet></ROW><ROW><id>18492974</id><snippet>Playlists</snippet></ROW><ROW><id>18493164</id><snippet>yourList.insert(1)</snippet></ROW><ROW><id>18493164</id><snippet>self.head = node</snippet></ROW><ROW><id>18493164</id><snippet>node</snippet></ROW><ROW><id>18493164</id><snippet>insert</snippet></ROW><ROW><id>18493164</id><snippet>insert</snippet></ROW><ROW><id>18493164</id><snippet>int</snippet></ROW><ROW><id>18493164</id><snippet>Node</snippet></ROW><ROW><id>18493164</id><snippet>def insert(self, thing):
    node = Node(thing)
    //...
</snippet></ROW><ROW><id>18493164</id><snippet>Node</snippet></ROW><ROW><id>18493440</id><snippet>x</snippet></ROW><ROW><id>18493440</id><snippet>y</snippet></ROW><ROW><id>18493440</id><snippet>z</snippet></ROW><ROW><id>18493440</id><snippet>x</snippet></ROW><ROW><id>18493440</id><snippet>y</snippet></ROW><ROW><id>18493440</id><snippet>x, y, z</snippet></ROW><ROW><id>18493440</id><snippet>def find_x_and_y(array):
    '''Step 1: Get unique x and y coordinates, 
    and the width and height of the matrix'''
    x = sorted(list(set([i[0] for i in array])))
    y = sorted(list(set([i[1] for i in array])))

    width = len(x) + 1
    height = len(y) + 1

    return x, y, width, height

def construct_initial_matrix(array):
    '''Step 2: Make the initial matrix (filled with zeros)'''
    x, y, width, height = find_x_and_y(array)

    matrix = []
    for i in range(height):
        matrix.append([0] * width)

    return matrix

def add_edging(array, matrix):
    '''Step 3: Add the x and y coordinates to the edges'''
    x, y, width, height = find_x_and_y(array)

    for coord, position in zip(x, range(1, height)):
        matrix[position][0] = coord

    for coord, position in zip(y, range(1, width)):
        matrix[0][position] = coord

    return matrix

def add_z_coordinates(array, matrix):
    '''Step 4: Map the coordinates in the array to the position
    in the matrix'''
    x, y, width, height = find_x_and_y(array)

    x_to_pos = dict(zip(x, range(1, height)))
    y_to_pos = dict(zip(y, range(1, width)))

    for x, y, z in array:
        matrix[x_to_pos[x]][y_to_pos[y]] = z
    return matrix

def make_csv(matrix):
    '''Step 5: Pretty-printing'''
    return '\n'.join(', '.join(str(i) for i in row) for row in matrix)

def main():
    #example = [[1, 1, 10], [1, 2, 11], [2, 1, 12], [2, 2, 13]]
    example = [[1000,250,12.2],[1000,500,10],[2000,250,15],[2000,500,13.5]]

    matrix = construct_initial_matrix(example)
    matrix = add_edging(example, matrix)
    matrix = add_z_coordinates(example, matrix)

    print make_csv(matrix)

main()
</snippet></ROW><ROW><id>18493659</id><snippet>from google.appengine.ext.ndb import metadata
class RestCustomers(webapp2.RequestHandler):
    customers = metadata.get_properties_of_kind(Customers)
    self.response.headers['Content-Type'] = "application/json"
    self.response.write(json.dumps(customers))
</snippet></ROW><ROW><id>18493659</id><snippet>get_properties_of_kind</snippet></ROW><ROW><id>18493659</id><snippet>kind</snippet></ROW><ROW><id>18493712</id><snippet>re.MatchObject.group(0)</snippet></ROW><ROW><id>18493712</id><snippet>imtag = re.match(r'&lt;img.*?&gt;', line).group(0)
</snippet></ROW><ROW><id>18493712</id><snippet>imgtag  = re.match(r'&lt;img.*?&gt;',line)
if imtag:
    print("yo it's a {}".format(imgtag.group(0)))
</snippet></ROW><ROW><id>18493712</id><snippet>None</snippet></ROW><ROW><id>18493746</id><snippet>(\w)\1{2}(?!\1)\w\1{3}
</snippet></ROW><ROW><id>18493746</id><snippet>(\w)        # Match a word character and capture in group 1
\1{2}       # Match group 1 twice, to make the same character thrice - `XXX`
(?!\1)      # Make sure the character in group 1 is not ahead. (X is not ahead)
\w          # Then match a word character. This is `A` 
\1{3}       # Match the group 1 thrice - XXX
</snippet></ROW><ROW><id>18494022</id><snippet>tcollector/collectors/0</snippet></ROW><ROW><id>18494022</id><snippet>chmod a+x</snippet></ROW><ROW><id>18494022</id><snippet>#!/bin/sh</snippet></ROW><ROW><id>18494317</id><snippet>bytecopy = bytes</snippet></ROW><ROW><id>18494317</id><snippet>bytes</snippet></ROW><ROW><id>18494317</id><snippet>bytecopy = bytearray(bytes)</snippet></ROW><ROW><id>18494374</id><snippet>user.k</snippet></ROW><ROW><id>18494374</id><snippet>v</snippet></ROW><ROW><id>18494374</id><snippet>k</snippet></ROW><ROW><id>18494374</id><snippet>User</snippet></ROW><ROW><id>18494374</id><snippet>setattr()</snippet></ROW><ROW><id>18494374</id><snippet>for k,v in request.POST.items():
    if str(k)!="csrfmiddlewaretoken":
        setattr(user, k, v)
    user.save()
</snippet></ROW><ROW><id>18494455</id><snippet>l = [{"coefficient": -1.0, "compartment": "c", "molecule": "A", "evidence": []}, 
     {"coefficient": -1.0, "compartment": "c", "molecule": "B", "evidence": []},
     {"coefficient": -1.0, "compartment": "c", "molecule": "C", "evidence": []}, 
     {"coefficient": 1.0, "compartment": "c", "molecule": "D", "evidence": []}, 
     {"coefficient": 1.0, "compartment": "c", "molecule": "E", "evidence": []}, 
     {"coefficient": 1.0, "compartment": "c", "molecule": "F", "evidence": []}]

def format_mol_list(molecules):
    # Create lists that will hold the molecules of each type, in order
    reactants = []
    products = []

    # Sort the items into reactants and products
    for item in molecules:
       if item["coefficient"] &gt; 0:
          products.append(item["molecule"])
       else:
          reactants.append(item["molecule"])

    return " + ".join(reactants) + " --&gt; " + " + ".join(products)

print format_mol_list(l)
</snippet></ROW><ROW><id>18494455</id><snippet>A + B + C --&gt; D + E + F
</snippet></ROW><ROW><id>18494457</id><snippet>re.compile("^\s*%s\s*=\s*(r'[^']+')" % re.escape(eag))
</snippet></ROW><ROW><id>18494457</id><snippet>r</snippet></ROW><ROW><id>18494457</id><snippet>&gt;&gt;&gt; import re
&gt;&gt;&gt; sample = "linux = r'^LIN',"
&gt;&gt;&gt; eag = 'linux'
&gt;&gt;&gt; rpat = re.compile("^\s*%s\s*=\s*(r'[^']+')" % re.escape(eag))
&gt;&gt;&gt; rpat.match(sample).group(1)
"r'^LIN'"
</snippet></ROW><ROW><id>18494520</id><snippet>level[0][0]</snippet></ROW><ROW><id>18494520</id><snippet>level[0[0]]</snippet></ROW><ROW><id>18494949</id><snippet>import sys
sys.path.insert(0, '/tmp/python/')

import mylib
</snippet></ROW><ROW><id>18494949</id><snippet>$ PATH=/tmp/python/ you_script
</snippet></ROW><ROW><id>18495001</id><snippet>outcome_qs = Outcome.objects.all()
self.fields['relevantoutcome'] = forms.ModelMultipleChoiceField(queryset=outcome_qs, required=True, widget=forms.CheckboxSelectMultiple)
for outcome in outcome_qs:
    # Use Outcome primary key to easily match two fields in your view.
    self.fields['outcomevalue_%s' % outcome.pk] = forms.CharField(widget=forms.TextInput(attrs={'size':'30'}) 
</snippet></ROW><ROW><id>18495146</id><snippet>&gt;&gt;&gt; def checktype(obj):
        return bool(obj) and all(isinstance(elem, basestring) for elem in obj)

&gt;&gt;&gt; obj1 = ['foo','bar','bar','black','sheet']
&gt;&gt;&gt; obj2 = [1,2,3,4,5,'bar']
&gt;&gt;&gt; obj3 = 'bar'
&gt;&gt;&gt; for i in [obj1, obj2, obj3] :
        print checktype(i)


True
False
True
</snippet></ROW><ROW><id>18495146</id><snippet>basestring</snippet></ROW><ROW><id>18495146</id><snippet>str</snippet></ROW><ROW><id>18495146</id><snippet>basestring</snippet></ROW><ROW><id>18495146</id><snippet>str</snippet></ROW><ROW><id>18495146</id><snippet>str</snippet></ROW><ROW><id>18495146</id><snippet>unicode</snippet></ROW><ROW><id>18495146</id><snippet>str</snippet></ROW><ROW><id>18495146</id><snippet>unicode</snippet></ROW><ROW><id>18495146</id><snippet>&gt;&gt;&gt; def is_list_of_strings(lst):
        return bool(lst) and not isinstance(lst, basestring) and all(isinstance(elem, basestring) for elem in lst)
        # You could break it down into `if-else` constructs to make it clearer to read.

&gt;&gt;&gt; for i in [obj1, obj2, obj3] :
        print is_list_of_strings(i)


True
False
False
</snippet></ROW><ROW><id>18495146</id><snippet>list</snippet></ROW><ROW><id>18495146</id><snippet>not isinstance(lst, basestring)</snippet></ROW><ROW><id>18495146</id><snippet>&gt;&gt;&gt; def is_list_of_strings(lst):
        return bool(lst) and isinstance(lst, list) and all(isinstance(elem, basestring) for elem in lst)
        # You could break it down into `if-else` constructs to make it clearer to read.

&gt;&gt;&gt; for i in [obj1, obj2, obj3] :
        print is_list_of_strings(i)


True
False
False
</snippet></ROW><ROW><id>18495146</id><snippet>&gt;&gt;&gt; def is_list_of_strings(lst):
        if lst and isinstance(lst, list):
            return all(isinstance(elem, basestring) for elem in lst)
        else:
            return False
</snippet></ROW><ROW><id>18495487</id><snippet>import os
f = open(os.devnull,"w")
twill.set_output(f)
</snippet></ROW><ROW><id>18495620</id><snippet>Term("index","&lt;=",stamp)
</snippet></ROW><ROW><id>18495620</id><snippet>In [2]: start = Timestamp('20130101 9:00:00')

In [3]: start.value
Out[3]: 1357030800000000000

In [5]: index = pd.to_datetime([ start.value + i for i in list(ran
Out[8]: 
&lt;class 'pandas.tseries.index.DatetimeIndex'&gt;
[2013-01-01 09:00:00, ..., 2013-01-01 09:00:00.000000999]
Length: 1000, Freq: None, Timezone: None

In [9]: df = DataFrame(randn(1000,2),index=index)

In [10]: df.to_hdf('test.h5','df',mode='w',fmt='t')

In [12]: pd.read_hdf('test.h5','df')
Out[12]: 
&lt;class 'pandas.core.frame.DataFrame'&gt;
DatetimeIndex: 1000 entries, 2013-01-01 09:00:00 to 2013-01-01 09:00:00
Data columns (total 2 columns):
0    1000  non-null values
1    1000  non-null values
dtypes: float64(2)

In [15]: pd.read_hdf('test.h5','df',where=[pd.Term('index','&lt;=',index[-1])])
Out[15]: 
&lt;class 'pandas.core.frame.DataFrame'&gt;
DatetimeIndex: 1000 entries, 2013-01-01 09:00:00 to 2013-01-01 09:00:00
Data columns (total 2 columns):
0    1000  non-null values
1    1000  non-null values
dtypes: float64(2)

In [16]: pd.read_hdf('test.h5','df',where=[pd.Term('index','&lt;=',index[-1].value-1)])
Out[16]: 
&lt;class 'pandas.core.frame.DataFrame'&gt;
DatetimeIndex: 999 entries, 2013-01-01 09:00:00 to 2013-01-01 09:00:00
Data columns (total 2 columns):
0    999  non-null values
1    999  non-null values
dtypes: float64(2)
</snippet></ROW><ROW><id>18495620</id><snippet>'index&lt;=index[-1]'</snippet></ROW><ROW><id>18495707</id><snippet>worksheets</snippet></ROW><ROW><id>18495707</id><snippet>from openpyxl import load_workbook

wb = load_workbook(r"C:\Excel\LOOKUP_TABLES_edited.xlsx")

for sheet in wb.worksheets:
    print sheet
</snippet></ROW><ROW><id>18495746</id><snippet>from ast import literal_eval
pat = literal_eval(get_Pat(file))
</snippet></ROW><ROW><id>18495746</id><snippet>literal_eval()</snippet></ROW><ROW><id>18495746</id><snippet>literal_eval()</snippet></ROW><ROW><id>18495746</id><snippet>import re

detect = re.compile("r(['\"])(.*?)\\1[ \t]*$")

with open('your_file.txt') as f:
    pat = f.readline()

if detect.match(pat):
    r = re.compile(detect.match(pat).group(2))
else:
    r = re.compile(pat)
</snippet></ROW><ROW><id>18495746</id><snippet>r'^Six o\'clock\nJim'</snippet></ROW><ROW><id>18495746</id><snippet>&lt;type 'str'&gt;</snippet></ROW><ROW><id>18495746</id><snippet>&lt;class 'str'&gt;</snippet></ROW><ROW><id>18495746</id><snippet>"r'^Six o\'clock\nJim'"</snippet></ROW><ROW><id>18495746</id><snippet>r'^Six o\'clock\nJim'</snippet></ROW><ROW><id>18495746</id><snippet>r</snippet></ROW><ROW><id>18495746</id><snippet>'</snippet></ROW><ROW><id>18495746</id><snippet>^</snippet></ROW><ROW><id>18495746</id><snippet>S</snippet></ROW><ROW><id>18495746</id><snippet>i</snippet></ROW><ROW><id>18495746</id><snippet>x</snippet></ROW><ROW><id>18495746</id><snippet/></ROW><ROW><id>18495746</id><snippet>o</snippet></ROW><ROW><id>18495746</id><snippet>\</snippet></ROW><ROW><id>18495746</id><snippet>'</snippet></ROW><ROW><id>18495746</id><snippet>c</snippet></ROW><ROW><id>18495746</id><snippet>l</snippet></ROW><ROW><id>18495746</id><snippet>o</snippet></ROW><ROW><id>18495746</id><snippet>c</snippet></ROW><ROW><id>18495746</id><snippet>k</snippet></ROW><ROW><id>18495746</id><snippet>\</snippet></ROW><ROW><id>18495746</id><snippet>n</snippet></ROW><ROW><id>18495746</id><snippet>J</snippet></ROW><ROW><id>18495746</id><snippet>i</snippet></ROW><ROW><id>18495746</id><snippet>m</snippet></ROW><ROW><id>18495746</id><snippet>\n</snippet></ROW><ROW><id>18495746</id><snippet>r'^Six o\'clock\nJim'</snippet></ROW><ROW><id>18495746</id><snippet>[ \t]*$</snippet></ROW><ROW><id>18495746</id><snippet>print tuple(pat)</snippet></ROW><ROW><id>18495746</id><snippet>('r', "'", '^', 'S', 'i', 'x', ' ', 'o', '\\', "'", 'c', 'l', 'o', 'c', 'k', '\\', 'n', 'J', 'i', 'm', "'", ' ', ' ', ' ', '\t', '\n')
</snippet></ROW><ROW><id>18495746</id><snippet>detect.match(pat).group(2)</snippet></ROW><ROW><id>18495746</id><snippet>^Six o\'clock\nJim</snippet></ROW><ROW><id>18495746</id><snippet>\</snippet></ROW><ROW><id>18495746</id><snippet>'</snippet></ROW><ROW><id>18495746</id><snippet>n</snippet></ROW><ROW><id>18495746</id><snippet>\'</snippet></ROW><ROW><id>18495746</id><snippet>\n</snippet></ROW><ROW><id>18495746</id><snippet>rawS</snippet></ROW><ROW><id>18495746</id><snippet>rawS = r'^Six o\'clock\nJim'</snippet></ROW><ROW><id>18495746</id><snippet>r'....'</snippet></ROW><ROW><id>18495746</id><snippet>r = re.compile(detect.match(pat).group(2))</snippet></ROW><ROW><id>18495746</id><snippet>\'</snippet></ROW><ROW><id>18495746</id><snippet>\n</snippet></ROW><ROW><id>18495746</id><snippet>r'^Six o\'clock\nJim'</snippet></ROW><ROW><id>18495746</id><snippet>"r'^Six o\'clock\nJim'"</snippet></ROW><ROW><id>18495746</id><snippet>r'^Six o\'clock\nJim'</snippet></ROW><ROW><id>18495746</id><snippet>r'^Six o\'clock\nJim'</snippet></ROW><ROW><id>18495746</id><snippet>detect.match(pat).group(2)</snippet></ROW><ROW><id>18495746</id><snippet>&lt;type 'str'&gt;</snippet></ROW><ROW><id>18495746</id><snippet>'r'</snippet></ROW><ROW><id>18495746</id><snippet>'rb'</snippet></ROW><ROW><id>18495746</id><snippet>&lt;class 'str'&gt;</snippet></ROW><ROW><id>18495746</id><snippet>'r'</snippet></ROW><ROW><id>18495746</id><snippet>&lt;type 'str'&gt;</snippet></ROW><ROW><id>18495746</id><snippet>&lt;class 'bytes'&gt;</snippet></ROW><ROW><id>18495746</id><snippet>'rb'</snippet></ROW><ROW><id>18495746</id><snippet>'r'</snippet></ROW><ROW><id>18495746</id><snippet>'rb'</snippet></ROW><ROW><id>18495746</id><snippet>b"r(['\"])(.*?)\\1[ \t]*\r?\n"</snippet></ROW><ROW><id>18495906</id><snippet>sys.stdin</snippet></ROW><ROW><id>18495906</id><snippet>file</snippet></ROW><ROW><id>18495906</id><snippet>pandas</snippet></ROW><ROW><id>18495906</id><snippet>read_xy</snippet></ROW><ROW><id>18495906</id><snippet>$ cat test.py
import sys
import pandas as pd

df = pd.read_json(sys.stdin)
print df

$ cat data.json
{"a": [1,2,3,4], "b":[3,4,5,6]}

$ python test.py &lt; data.json
   a  b
0  1  3
1  2  4
2  3  5
3  4  6
</snippet></ROW><ROW><id>18496098</id><snippet>package require Tk 8.5
grid [ttk::entry .input -textvariable input] -sticky nesw
grid [text .text] -sticky nesw
grid rowconfigure . .text -weight 1
grid columnconfigure . .text -weight 1
bind .input &lt;Return&gt; execute
bind .input &lt;Up&gt; {histwalk -1}
bind .input &lt;Down&gt; {histwalk 1}

proc execute {} {
    history add $::input
    set ::eventcnt 0
    .text delete 1.0 end
    catch {exec /bin/bash -c $::input} res
    .text insert 1.0 $res
    .input selection range 0 end
}

set eventcnt 0
proc histwalk i {
   incr ::eventcnt $i
   set ::input [history event $::eventcnt]
   .input selection range 0 end
}
</snippet></ROW><ROW><id>18496150</id><snippet>home</snippet></ROW><ROW><id>18496206</id><snippet>find_and_remove_functions( string[ function_end + 1: ], found_functions )
</snippet></ROW><ROW><id>18496206</id><snippet>return find_and_remove_functions( string[ function_end + 1: ], found_functions )
</snippet></ROW><ROW><id>18496498</id><snippet>is</snippet></ROW><ROW><id>18496498</id><snippet>is</snippet></ROW><ROW><id>18496498</id><snippet>is</snippet></ROW><ROW><id>18496498</id><snippet>not is</snippet></ROW><ROW><id>18496498</id><snippet>x is y</snippet></ROW><ROW><id>18496498</id><snippet>is</snippet></ROW><ROW><id>18496498</id><snippet>id</snippet></ROW><ROW><id>18496498</id><snippet>id</snippet></ROW><ROW><id>18496498</id><snippet>is</snippet></ROW><ROW><id>18496498</id><snippet>id</snippet></ROW><ROW><id>18496498</id><snippet>is</snippet></ROW><ROW><id>18496498</id><snippet>id</snippet></ROW><ROW><id>18496498</id><snippet>id</snippet></ROW><ROW><id>18496498</id><snippet>is</snippet></ROW><ROW><id>18496498</id><snippet>id</snippet></ROW><ROW><id>18496498</id><snippet>id</snippet></ROW><ROW><id>18496817</id><snippet>&gt;&gt;&gt; import json
&gt;&gt;&gt; s = '["SU15AM","SU3AM","SU4AM","SU45AM","SU4PM","M3AM"]'
&gt;&gt;&gt; l = json.loads(s)
&gt;&gt;&gt; l
[u'SU15AM', u'SU3AM', u'SU4AM', u'SU45AM', u'SU4PM', u'M3AM']
&gt;&gt;&gt; type(l)
&lt;type 'list'&gt;  
</snippet></ROW><ROW><id>18496840</id><snippet>ipaddress</snippet></ROW><ROW><id>18496840</id><snippet>&gt;&gt;&gt; import ipaddress
&gt;&gt;&gt; addr = ipaddress.ip_address('192.168.0.1')
&gt;&gt;&gt; net = ipaddress.ip_network('192.168.0.0/20')
&gt;&gt;&gt; net[256]
IPv4Address('192.168.1.0')
&gt;&gt;&gt; next(i for i, a in enumerate(net) if a == addr)
3
</snippet></ROW><ROW><id>18496840</id><snippet>ipaddr</snippet></ROW><ROW><id>18496893</id><snippet>wn.synset('delayed.a.0')</snippet></ROW><ROW><id>18496893</id><snippet>lemma, pos, synset_index_str = name.lower().rsplit('.', 2)
synset_index = int(synset_index_str) - 1
</snippet></ROW><ROW><id>18496893</id><snippet>synset_index</snippet></ROW><ROW><id>18496893</id><snippet>-1</snippet></ROW><ROW><id>18496893</id><snippet>lemma</snippet></ROW><ROW><id>18496893</id><snippet>delayed</snippet></ROW><ROW><id>18496893</id><snippet>pos</snippet></ROW><ROW><id>18496893</id><snippet>a</snippet></ROW><ROW><id>18496893</id><snippet>&gt;&gt;&gt; wn.synset('delay.v.-1')
Synset('stay.v.06')
</snippet></ROW><ROW><id>18496953</id><snippet>display</snippet></ROW><ROW><id>18496953</id><snippet>say</snippet></ROW><ROW><id>18496953</id><snippet>challee</snippet></ROW><ROW><id>18496953</id><snippet>first = challee()
second = challee()
</snippet></ROW><ROW><id>18496953</id><snippet>self</snippet></ROW><ROW><id>18496953</id><snippet>first.cname('becky')
</snippet></ROW><ROW><id>18497114</id><snippet>config.include('pyramid_jinja2')

@view_config(..., renderer='myapp:templates/home.jinja2')
def view(request):
    return {}
</snippet></ROW><ROW><id>18497134</id><snippet>&gt;&gt;&gt; s = '\x16\x00\x00\x00\x02hello\x00\x06\x00\x00\x00world\x00\x00'
&gt;&gt;&gt; bson_obj = BSON(s)
&gt;&gt;&gt; bson_obj.decode()
{u'hello': u'world'}
</snippet></ROW><ROW><id>18497272</id><snippet>price</snippet></ROW><ROW><id>18497272</id><snippet>from decimal import Decimal

...

for price in request.POST.getlist('price'):
    if not price:
        continue
    list_item.price = Decimal(price)
    list_item.save()
</snippet></ROW><ROW><id>18497363</id><snippet>Locator</snippet></ROW><ROW><id>18497363</id><snippet>Formatter</snippet></ROW><ROW><id>18497363</id><snippet>MultipleLocator</snippet></ROW><ROW><id>18497363</id><snippet>FuncFormatter</snippet></ROW><ROW><id>18497363</id><snippet>import matplotlib
matplotlib.use('Agg')
import matplotlib.pyplot as plt
from matplotlib.ticker import MultipleLocator, FuncFormatter

data = (0, 1890,865, 236, 6, 1, 2, 0 , 0, 0, 0 ,0 ,0 ,0, 0, 0)
ind = range(len(data))
width = 0.9   # the width of the bars: can also be len(x) sequence

# Add `aling='center'` to center bars on ticks
p1 = plt.bar(ind, data, width, align='center')
plt.xlabel('Duration 2^x')
plt.ylabel('Count')
plt.title('DBFSwrite')
plt.axis([0, len(data), -1, max(data)])

ax = plt.gca()

# Place tickmarks at every multiple of 1, i.e. at any integer
ax.xaxis.set_major_locator(MultipleLocator(1))
# Format the ticklabel to be 2 raised to the power of `x`
ax.xaxis.set_major_formatter(FuncFormatter(lambda x, pos: int(2**x)))
# Make the axis labels rotated for easier reading
plt.gcf().autofmt_xdate()

ax.spines['right'].set_visible(False)
ax.spines['top'].set_visible(False)
ax.spines['left'].set_visible(False)
ax.spines['bottom'].set_visible(False)

plt.savefig('myfig')
</snippet></ROW><ROW><id>18497687</id><snippet>from itertools import product

a = [1,2,3,4]
b = [6,7]
[dict(zip(('a','b'), (i,j))) for i,j in product(a,b)]
</snippet></ROW><ROW><id>18497687</id><snippet>[{'a': 1, 'b': 6},
 {'a': 1, 'b': 7},
 {'a': 2, 'b': 6},
 {'a': 2, 'b': 7},
 {'a': 3, 'b': 6},
 {'a': 3, 'b': 7},
 {'a': 4, 'b': 6},
 {'a': 4, 'b': 7}]
</snippet></ROW><ROW><id>18497767</id><snippet>pandas</snippet></ROW><ROW><id>18497767</id><snippet>import sys
import pandas as pd

# Simulation of return values from the calls
calls = [
    [
        {u'dateTime': u'2011-03-28', u'value': u'2298'},
        {u'dateTime': u'2011-03-29', u'value': u'2322'},
        {u'dateTime': u'2011-03-30', u'value': u'2309'},
    ],
    [
        {u'dateTime': u'2011-03-28', u'value': u'28'},
        {u'dateTime': u'2011-03-29', u'value': u'22'},
        {u'dateTime': u'2011-03-30', u'value': u'09'},
    ]
]

# Create an initial empty data frame
df = pd.DataFrame()
# Make the consecutive calls
for i, call in enumerate(calls):
    # Create the new DataFrame from the data you got
    df_new = pd.DataFrame(call).set_index('dateTime')
    # Rebane the column to avoid collision
    df_new.rename(columns={'value': 'value_%s' % i}, inplace=True)
    # Merge it with the current data frame
    df = pd.concat([df, df_new], axis=1)
# Save data to file (I'm using here the sys.stdout, just
# to print it to console.
df.to_csv(sys.stdout, header=None)
</snippet></ROW><ROW><id>18497767</id><snippet>2011-03-28,2298,28
2011-03-29,2322,22
2011-03-30,2309,09
</snippet></ROW><ROW><id>18497865</id><snippet>data["data"]</snippet></ROW><ROW><id>18497865</id><snippet>cursor.execute("""INSERT INTO ProductInfo VALUES(
    :product_id, 
    :product_name,
    ...
    :diet_type)""", data["data"])
</snippet></ROW><ROW><id>18497865</id><snippet>str(data["data"]["sodium_mg"])</snippet></ROW><ROW><id>18497865</id><snippet>None</snippet></ROW><ROW><id>18497865</id><snippet>None</snippet></ROW><ROW><id>18497887</id><snippet>&gt;&gt;&gt; lis_A = [[], [], []]
&gt;&gt;&gt; vals = [1,2,3]
&gt;&gt;&gt; [x.append(y) for x, y in zip(lis_A, vals)]
&gt;&gt;&gt; lis_A
[[1], [2], [3]]
</snippet></ROW><ROW><id>18497887</id><snippet>from itertools import izip

for x, y in izip(lis_A, vals):
    x.append(y)
</snippet></ROW><ROW><id>18498073</id><snippet>return render_to_response('foo/page.html',
                          {
                              'situations': situations,
                              'active': active_req,
                          },
                          context_instance=RequestContext(request))
</snippet></ROW><ROW><id>18498073</id><snippet>pep8</snippet></ROW><ROW><id>18498073</id><snippet>return render_to_response(
    'foo/page.html',
    {
        'situations': situations,
        'active': active_req,
    },
    context_instance=RequestContext(request))
</snippet></ROW><ROW><id>18498073</id><snippet>d = {
    'situations': situations,
    'active': active_req,
}
context = RequestContext(request)
return render_to_response('foo/page.html', d, context_instance=context)
</snippet></ROW><ROW><id>18498186</id><snippet>tuple</snippet></ROW><ROW><id>18498186</id><snippet>list</snippet></ROW><ROW><id>18498186</id><snippet>frozenset</snippet></ROW><ROW><id>18498186</id><snippet>dict</snippet></ROW><ROW><id>18498186</id><snippet>d.items()</snippet></ROW><ROW><id>18498186</id><snippet>d</snippet></ROW><ROW><id>18498186</id><snippet>&gt;&gt;&gt; d = {'a': 1, 'b': 2}
&gt;&gt;&gt; s = frozenset(d.items())
&gt;&gt;&gt; hash(s)
-7588994739874264648
&gt;&gt;&gt; dict(s) == d
True
</snippet></ROW><ROW><id>18498186</id><snippet>set</snippet></ROW><ROW><id>18498186</id><snippet>OrderedSet</snippet></ROW><ROW><id>18498186</id><snippet>unique_everseen</snippet></ROW><ROW><id>18498186</id><snippet>&gt;&gt;&gt; unique_sets = set(frozenset(d.items()) for d in list_of_dicts)
&gt;&gt;&gt; unique_dicts = [dict(s) for s in unique_sets]
</snippet></ROW><ROW><id>18498186</id><snippet>&gt;&gt;&gt; sets = (frozenset(d.items()) for d in list_of_dicts)
&gt;&gt;&gt; unique_sets = unique_everseen(sets, key=operator.itemgetter(key))
&gt;&gt;&gt; unique_dicts = [dict(s) for s in unique_sets]
</snippet></ROW><ROW><id>18498252</id><snippet>command=self.doAction()</snippet></ROW><ROW><id>18498252</id><snippet>doAction</snippet></ROW><ROW><id>18498252</id><snippet>self.action = Button(frame,text="action",command=self.doAction)
</snippet></ROW><ROW><id>18498252</id><snippet>self.action = Button(frame,text="action",command=lambda: self.doAction(x))
</snippet></ROW><ROW><id>18498252</id><snippet>self.doAction(x)</snippet></ROW><ROW><id>18498252</id><snippet>def button_action(): 
    self.doAction(x)
self.action = Button(frame,text="action",command=button_action)
</snippet></ROW><ROW><id>18498265</id><snippet>with open('test2-2.csv', 'w') as csvout:
    write=csv.writer(csvout, delimiter=',', lineterminator='\r')
    with open('test2.csv', 'rb') as csvfile:
        read=csv.reader(csvfile, delimiter=',')
        header = next(read)
        write.writerow(header)
        for row in read:
            row[3]="test"
            write.writenow(row)
</snippet></ROW><ROW><id>18498265</id><snippet>writenow</snippet></ROW><ROW><id>18498265</id><snippet>skipinitialspace=True</snippet></ROW><ROW><id>18498265</id><snippet>6</snippet></ROW><ROW><id>18498265</id><snippet>test</snippet></ROW><ROW><id>18498265</id><snippet>for row in read:
    row = ('test' if col == '6' else col for col in row)
    write.writenow(row)
</snippet></ROW><ROW><id>18498265</id><snippet>test</snippet></ROW><ROW><id>18498265</id><snippet>for i, row in enumerate(read):
    if i == 3:
        row[2] = 'test'
    write.writenow(row)
</snippet></ROW><ROW><id>18498265</id><snippet>6</snippet></ROW><ROW><id>18498265</id><snippet>for i, row in enumerate(read):
    if row[2] == '6':
        row[2] = 'test'
    write.writenow(row)
</snippet></ROW><ROW><id>18498368</id><snippet>any()</snippet></ROW><ROW><id>18498368</id><snippet>all()</snippet></ROW><ROW><id>18498368</id><snippet>zip</snippet></ROW><ROW><id>18498368</id><snippet>not any(x &gt; y for x, y in zip(t1, t2))
=&gt; True
</snippet></ROW><ROW><id>18498368</id><snippet>all(x &lt;= y for x, y in zip(t1, t2))
=&gt; True
</snippet></ROW><ROW><id>18498549</id><snippet>import types
class Test(object):
    @staticmethod
    def foo():
        print 'foo'

    def bar(self):
        print 'bar'
</snippet></ROW><ROW><id>18498549</id><snippet>&gt;&gt;&gt;(isinstance(getattr(Test, 'foo'), types.FunctionType),
    isinstance(getattr(Test, 'bar'), types.FunctionType))
True, False
</snippet></ROW><ROW><id>18498549</id><snippet>inspect</snippet></ROW><ROW><id>18498549</id><snippet>&gt;&gt;&gt; inspect.isfunction(Test.foo)
True
&gt;&gt;&gt; inspect.isfunction(Test.bar)
False
</snippet></ROW><ROW><id>18498549</id><snippet>import inspect

def get_type(cls, attr):
    try:
        return [a.kind for a in inspect.classify_class_attrs(cls) if a.name == attr][0]
    except IndexError:
        return None

class Test(object):
    @classmethod
    def foo(cls):
        print 'foo'

    def bar(self):
        print 'bar'

    @staticmethod
    def baz():
        print 'baz'
</snippet></ROW><ROW><id>18498549</id><snippet>&gt;&gt;&gt; get_type(Test, 'foo')
'class method'
&gt;&gt;&gt; get_type(Test, 'bar')
'method'
&gt;&gt;&gt; get_type(Test, 'baz')
'static method'
&gt;&gt;&gt; get_type(Test, 'nonexistant')
None
</snippet></ROW><ROW><id>18498585</id><snippet>np.gradient</snippet></ROW><ROW><id>18498585</id><snippet>plt.plot(x1,np.gradient(y(x1),1),'r--o')
plt.plot(x2,np.gradient(y(x2),0.1),'b--o')
plt.plot(x3,np.gradient(y(x3),0.01),'g--o')
</snippet></ROW><ROW><id>18498585</id><snippet>d = np.diff(y(x))/np.diff(x) 
</snippet></ROW><ROW><id>18498585</id><snippet>x = np.array([1, 2, 4, 7, 11, 16], dtype=np.float)
y = lambda x: x**2

z1 = np.hstack((y(x[0]), y(x[:-1])))
z2 = np.hstack((y(x[1:]), y(x[-1])))

dx1 = np.hstack((0, np.diff(x)))
dx2 = np.hstack((np.diff(x), 0))

d = (z2-z1) / (dx2+dx1)
</snippet></ROW><ROW><id>18498681</id><snippet>itertools.chain.from_iterable</snippet></ROW><ROW><id>18498681</id><snippet>itertools.chain.from_iterable(
  ("new1", "new2") if item == "old" else (item, ) for item in values)
</snippet></ROW><ROW><id>18498681</id><snippet>list()</snippet></ROW><ROW><id>18498703</id><snippet>__init__</snippet></ROW><ROW><id>18498703</id><snippet>__slots__</snippet></ROW><ROW><id>18498703</id><snippet>"__init__"</snippet></ROW><ROW><id>18498703</id><snippet>__slots__</snippet></ROW><ROW><id>18498737</id><snippet>[26]: df = DataFrame([['foo',1],['foo',2],['bar',3],['bar',4]],columns=list('AB'))

In [27]: df
Out[27]: 
     A  B
0  foo  1
1  foo  2
2  bar  3
3  bar  4

In [35]: def f(g, grp):
   ....:     return (g, len(grp), grp['B'].sum())
   ....: 

In [36]: print [ f(g, grp) for g, grp in df.groupby('A') ]
[('bar', 2, 7), ('foo', 2, 3)]
</snippet></ROW><ROW><id>18498896</id><snippet>fields = 'USER','PERM1','PERM2','PERM3','PERM4',
'PERM5','PERM6','PERM7','PERM8'
</snippet></ROW><ROW><id>18498896</id><snippet>fields = 'USER','PERM1','PERM2','PERM3','PERM4',</snippet></ROW><ROW><id>18498896</id><snippet>'PERM5','PERM6','PERM7','PERM8'</snippet></ROW><ROW><id>18498896</id><snippet>csv.DictWriter</snippet></ROW><ROW><id>18498896</id><snippet>fields = ('USER','PERM1','PERM2','PERM3','PERM4',
          'PERM5','PERM6','PERM7','PERM8')
</snippet></ROW><ROW><id>18499111</id><snippet>Intersect</snippet></ROW><ROW><id>18499111</id><snippet>status_types</snippet></ROW><ROW><id>18499111</id><snippet>i.Status</snippet></ROW><ROW><id>18499111</id><snippet>ALL_ITEMS
  .Where(i =&gt; status_types.Contains(i.Status));
</snippet></ROW><ROW><id>18499111</id><snippet>ALL_ITEMS
  .Where(i =&gt; status_types.Any(x=&gt;x==i.Status));
</snippet></ROW><ROW><id>18499120</id><snippet>matplotlib</snippet></ROW><ROW><id>18499120</id><snippet>Axes.errorbar</snippet></ROW><ROW><id>18499120</id><snippet>'-'</snippet></ROW><ROW><id>18499120</id><snippet>fmt</snippet></ROW><ROW><id>18499120</id><snippet>plot</snippet></ROW><ROW><id>18499120</id><snippet>plot</snippet></ROW><ROW><id>18499120</id><snippet>rcparams</snippet></ROW><ROW><id>18499120</id><snippet>fmt = ''</snippet></ROW><ROW><id>18499120</id><snippet>eb = plt.errorbar(x, y, yerr=.1, fmt='', color='b')
</snippet></ROW><ROW><id>18499120</id><snippet>rcParam['lines.linestlye']</snippet></ROW><ROW><id>18499120</id><snippet>l0, = plt.plot(x,y, marker='o', color='b')
eb = plt.errorbar(x, y, yerr=.1, fmt=None, color='b')
</snippet></ROW><ROW><id>18499214</id><snippet>i</snippet></ROW><ROW><id>18499214</id><snippet>PossibleJumps</snippet></ROW><ROW><id>18499214</id><snippet>PossibleJumps</snippet></ROW><ROW><id>18499214</id><snippet>I</snippet></ROW><ROW><id>18499214</id><snippet>PossibleJumps</snippet></ROW><ROW><id>18499214</id><snippet>while I &lt; len( PossibleJumps ):
    CurrentJumps = PossibleJumps[I-1]
    ...
</snippet></ROW><ROW><id>18499214</id><snippet>print</snippet></ROW><ROW><id>18499214</id><snippet>print I
print PossibleJumps[ I ]
</snippet></ROW><ROW><id>18499214</id><snippet>print PossibleJumps[ I ]</snippet></ROW><ROW><id>18499264</id><snippet>json.loads()</snippet></ROW><ROW><id>18499264</id><snippet>dict</snippet></ROW><ROW><id>18499264</id><snippet>import json
import urllib2

response = urllib2.urlopen('http://api.formice.com/mouse/stats.json?n=Safwanrockz')
data = json.loads(response.read())

print type(data)  # prints &lt;type 'dict'&gt;

print data['tribe']  # prints "Three Feathers"
</snippet></ROW><ROW><id>18499349</id><snippet>xml.dom.minidom</snippet></ROW><ROW><id>18499349</id><snippet>Traceback (most recent call last):
  File "c:\python27\lib\xml\dom\minidom.py", line 1930, in parseString
    return expatbuilder.parseString(string)
  File "c:\python27\lib\xml\dom\expatbuilder.py", line 940, in parseString
    return builder.parseString(string)
  File "c:\python27\lib\xml\dom\expatbuilder.py", line 223, in parseString
    parser.Parse(string, True)
  File "c:\python27\lib\xml\dom\expatbuilder.py", line 751, in start_element_handler
    node = minidom.Element(qname, uri, prefix, localname)
  File "c:\python27\lib\xml\dom\minidom.py", line 653, in __init__
    self._attrs = {}   # attributes are double-indexed:
MemoryError
</snippet></ROW><ROW><id>18499349</id><snippet>&gt;&gt;&gt; import xmltodict, os
&gt;&gt;&gt; data = open('price.xml').read()
&gt;&gt;&gt; xml = xmltodict.parse(data)
&gt;&gt;&gt; xml['prices']['price'][0]
OrderedDict([(u'code', u'AD1550.301.1'), 
             (u'startdate', u'2013-08-24'), 
             (u'enddate', u'2013-09-30'), 
             (u'rentalprice', u'126.00'), 
             (u'midweekrentalprice', u'0.00'), 
             (u'weekendrentalprice', u'0.00'), 
             (u'fixprice', u'0.00')])
</snippet></ROW><ROW><id>18499349</id><snippet>Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
  File "c:\python27\lib\site-packages\xmltodict.py", line 228, in parse
    parser.Parse(xml_input, True)
xml.parsers.expat.ExpatError: out of memory: line 1, column 0
</snippet></ROW><ROW><id>18499349</id><snippet>expat</snippet></ROW><ROW><id>18499365</id><snippet>import os
import re
def locate(pattern = r'\d+[_]', root=os.curdir):
    for path, dirs, files in os.walk(os.path.abspath(root)):
        for filename in re.findall(pattern, ' '.join(files)):
            yield os.path.join(path, filename)
</snippet></ROW><ROW><id>18499365</id><snippet>with open('list_file.txt', 'r') as f:
     lines = [x.split('_')[0] for x in f.readlines()]

print_out = []

for f in locate(&lt;your code regex&gt;, &lt;your directory&gt;):
    if f in lines: print_out.append(f)

print(print_out)
</snippet></ROW><ROW><id>18499479</id><snippet>def single_element_permutation(given, new):
    for i in xrange(len(given)):
        for ele in new:
            yield given[:i] + (ele,) + given[i+1:]

for e in single_element_permutation((0, 0, 0, 0, 0), range(5)):
    print e
</snippet></ROW><ROW><id>18499479</id><snippet>(0, 0, 0, 0, 0)
(1, 0, 0, 0, 0)
(2, 0, 0, 0, 0)
(3, 0, 0, 0, 0)
(4, 0, 0, 0, 0)
(0, 0, 0, 0, 0)
(0, 1, 0, 0, 0)
(0, 2, 0, 0, 0)
(0, 3, 0, 0, 0)
(0, 4, 0, 0, 0)
(0, 0, 0, 0, 0)
(0, 0, 1, 0, 0)
(0, 0, 2, 0, 0)
(0, 0, 3, 0, 0)
(0, 0, 4, 0, 0)
(0, 0, 0, 0, 0)
(0, 0, 0, 1, 0)
(0, 0, 0, 2, 0)
(0, 0, 0, 3, 0)
(0, 0, 0, 4, 0)
(0, 0, 0, 0, 0)
(0, 0, 0, 0, 1)
(0, 0, 0, 0, 2)
(0, 0, 0, 0, 3)
(0, 0, 0, 0, 4)
</snippet></ROW><ROW><id>18499639</id><snippet>file1 = raw_input().strip()
file2 = raw_input().strip()
</snippet></ROW><ROW><id>18499760</id><snippet>from numpy import linspace, meshgrid

def grid(x, y, z, resX=100, resY=100):
    "Convert 3 column data to matplotlib grid"
    xi = linspace(min(x), max(x), resX)
    yi = linspace(min(y), max(y), resY)
    Z = griddata(x, y, z, xi, yi)
    X, Y = meshgrid(xi, yi)
    return X, Y, Z
</snippet></ROW><ROW><id>18499760</id><snippet>  X, Y, Z = grid(x, y, z)
</snippet></ROW><ROW><id>18499869</id><snippet>polyLineStr</snippet></ROW><ROW><id>18499869</id><snippet>var polyLineStr = "gnfdFffngVjBkEtCpBfClBjFpDdAv@xAdAzCvBnE`DxBkFzDiJxDmJvEeLxB_FtAmDdAuBtB}D~E_JtFqKlAyBnBiCpEmFz@aAP[j@aAl@gB\eBLuADmAAsAIsAOoBg@qEqAyHeCwMQ_CAiA@w@FkAZoBbA{CfAyBp@gANWOScFmE{EaEmHcHoCuCkGoGoEkEoCsCkDgDdHuNhB{DpC}FfEqI|B}E~H_PnMaXXi@r@cA`AmAFGf@_@~CsBtAcA";
</snippet></ROW><ROW><id>18499869</id><snippet>'\e'</snippet></ROW><ROW><id>18499869</id><snippet>'\e'</snippet></ROW><ROW><id>18499869</id><snippet>e</snippet></ROW><ROW><id>18499869</id><snippet>var polyLineStr = "gnfdFffngVjBkEtCpBfClBjFpDdAv@xAdAzCvBnE`DxBkFzDiJxDmJvEeLxB_FtAmDdAuBtB}D~E_JtFqKlAyBnBiCpEmFz@aAP[j@aAl@gB\\eBLuADmAAsAIsAOoBg@qEqAyHeCwMQ_CAiA@w@FkAZoBbA{CfAyBp@gANWOScFmE{EaEmHcHoCuCkGoGoEkEoCsCkDgDdHuNhB{DpC}FfEqI|B}E~H_PnMaXXi@r@cA`AmAFGf@_@~CsBtAcA";
</snippet></ROW><ROW><id>18499869</id><snippet>'\e'</snippet></ROW><ROW><id>18499869</id><snippet>\e</snippet></ROW><ROW><id>18499869</id><snippet>e</snippet></ROW><ROW><id>18499869</id><snippet>'\n'</snippet></ROW><ROW><id>18499912</id><snippet>objReach</snippet></ROW><ROW><id>18499912</id><snippet>obj</snippet></ROW><ROW><id>18499912</id><snippet>import time

def objReach(obj, pos):     
    try:
        obj.path = obj.reach(pos, move=False)       # A* (path-finding algorithm)
        obj.last_move = time.time()
        obj.move_after = 1   # move every 1 second.
    except Exception as e:
        sendMsg(str(e))
</snippet></ROW><ROW><id>18499912</id><snippet>def mainLoop():
    pygame.event.pump()
    keyboard(pygame.key.get_pressed())
    events = pygame.event.get()
    mouse(events)
    for event in events:
        if event.type == pygame.QUIT:
            pygame.quit()
            return False

    if time.time() - obj.last_move &gt; obj.move_after:
        obj.last_move = time.time()
        objMove(obj, obj.path.pop())

    return True
</snippet></ROW><ROW><id>18499917</id><snippet>B</snippet></ROW><ROW><id>18499917</id><snippet>a</snippet></ROW><ROW><id>18499917</id><snippet>a</snippet></ROW><ROW><id>18499917</id><snippet>abc</snippet></ROW><ROW><id>18499917</id><snippet>class X(object):
    def x1(self):
        self.b = B(self)
        self.b.do_something()
    def a1(self):
        # ...

class B(object):
    def __init__(self, a):
        self.a = a
    def do_something(self):
        self.a.a1()
</snippet></ROW><ROW><id>18500068</id><snippet>boxplot(..., vert=False)</snippet></ROW><ROW><id>18500068</id><snippet>vert=False</snippet></ROW><ROW><id>18500068</id><snippet>DataFrame.boxplot</snippet></ROW><ROW><id>18500068</id><snippet>import matplotlib.pyplot as plt
import pandas as pd
x = [[1.2, 2.3, 3.0, 4.5],
     [1.1, 2.2, 2.9, 5.0]]
df = pd.DataFrame(x, index=['Age of pregnant women', 'Age of pregnant men'])

df.T.boxplot(vert=False)
plt.subplots_adjust(left=0.25)
plt.show()
</snippet></ROW><ROW><id>18500068</id><snippet>import matplotlib.pyplot as plt
import pandas as pd
x = [[1.2, 2.3, 3.0, 4.5],
     [1.1, 2.2, 2.9, 5.0]]
df = pd.DataFrame(x, index=['Age of pregnant women', 'Age of pregnant men'])

df.T.boxplot()
plt.subplots_adjust(bottom=0.25)
plt.xticks(rotation=25)
plt.show()
</snippet></ROW><ROW><id>18500087</id><snippet>prev = copy.copy(current)
</snippet></ROW><ROW><id>18500087</id><snippet>prev.setNext(newNode)
</snippet></ROW><ROW><id>18500087</id><snippet>copy.copy</snippet></ROW><ROW><id>18500087</id><snippet>printLinkedList</snippet></ROW><ROW><id>18500087</id><snippet>prints.setNext(prints.nextNode())
</snippet></ROW><ROW><id>18500087</id><snippet>prints.next</snippet></ROW><ROW><id>18500087</id><snippet>prints.next</snippet></ROW><ROW><id>18500087</id><snippet>prints</snippet></ROW><ROW><id>18500087</id><snippet>prints = prints.nextNode()
</snippet></ROW><ROW><id>18500087</id><snippet>absolute
crisp
daytona
demand
extra
</snippet></ROW><ROW><id>18500087</id><snippet>albacore
axe
hello
jupiter
</snippet></ROW><ROW><id>18500087</id><snippet>shrimp</snippet></ROW><ROW><id>18500087</id><snippet>print</snippet></ROW><ROW><id>18500087</id><snippet>while</snippet></ROW><ROW><id>18500087</id><snippet>id</snippet></ROW><ROW><id>18500087</id><snippet>print</snippet></ROW><ROW><id>18500087</id><snippet>setNext</snippet></ROW><ROW><id>18500087</id><snippet>next</snippet></ROW><ROW><id>18500087</id><snippet>print</snippet></ROW><ROW><id>18500087</id><snippet>id</snippet></ROW><ROW><id>18500087</id><snippet>copy.copy</snippet></ROW><ROW><id>18500192</id><snippet>try:
    main_loop()
except KeyboardInterrupt as e:
    print('KeyboardInterrupt')
    # do some clean up
    raise Exit_Main_Loop()      # signal the UI to terminate
</snippet></ROW><ROW><id>18500192</id><snippet>main_loop</snippet></ROW><ROW><id>18500192</id><snippet>Exit_Main_Loop()</snippet></ROW><ROW><id>18500192</id><snippet>KeyboardInterrupt</snippet></ROW><ROW><id>18500192</id><snippet>main_loop</snippet></ROW><ROW><id>18500192</id><snippet>KeyboardInterrupt</snippet></ROW><ROW><id>18500192</id><snippet>main_loop</snippet></ROW><ROW><id>18500192</id><snippet>try</snippet></ROW><ROW><id>18500192</id><snippet>Exit_Main_Loop()</snippet></ROW><ROW><id>18500192</id><snippet>main_loop</snippet></ROW><ROW><id>18500192</id><snippet>KeyboardInterrupt</snippet></ROW><ROW><id>18500192</id><snippet>signal</snippet></ROW><ROW><id>18500192</id><snippet>signal.signal()</snippet></ROW><ROW><id>18500192</id><snippet>SIGINT</snippet></ROW><ROW><id>18500192</id><snippet>KeyboardInterrupt</snippet></ROW><ROW><id>18500192</id><snippet>def handle_sigint(signum, frame):
    raise ExitMainLoop()
signal.signal(signal.SIGINT, handle_sigint)
</snippet></ROW><ROW><id>18500192</id><snippet>main_loop</snippet></ROW><ROW><id>18500192</id><snippet>ExitMainLoop</snippet></ROW><ROW><id>18500192</id><snippet>KeyboardInterrupt</snippet></ROW><ROW><id>18500192</id><snippet>except ExitMainLoop:</snippet></ROW><ROW><id>18500192</id><snippet>main_loop</snippet></ROW><ROW><id>18500192</id><snippet>contextmanager</snippet></ROW><ROW><id>18500192</id><snippet>main_loop</snippet></ROW><ROW><id>18500192</id><snippet>main_loop</snippet></ROW><ROW><id>18500278</id><snippet>mainloop</snippet></ROW><ROW><id>18500278</id><snippet>shutdown_flag</snippet></ROW><ROW><id>18500278</id><snippet>signal.signal(signal.SIGTERM, handler)</snippet></ROW><ROW><id>18500278</id><snippet>shutdown_flag</snippet></ROW><ROW><id>18500278</id><snippet>thread.join()</snippet></ROW><ROW><id>18500299</id><snippet>import imp</snippet></ROW><ROW><id>18500299</id><snippet>&gt;&gt;&gt; import bigmeesh
&gt;&gt;&gt; import imp
&gt;&gt;&gt; imp.reload(bigmeesh)
</snippet></ROW><ROW><id>18500299</id><snippet>importlib</snippet></ROW><ROW><id>18500299</id><snippet>importlib</snippet></ROW><ROW><id>18500299</id><snippet>reload</snippet></ROW><ROW><id>18500299</id><snippet>importlib.machinery</snippet></ROW><ROW><id>18500299</id><snippet>imp</snippet></ROW><ROW><id>18500299</id><snippet>importlib.reload</snippet></ROW><ROW><id>18500299</id><snippet>reload</snippet></ROW><ROW><id>18500299</id><snippet>bob</snippet></ROW><ROW><id>18500299</id><snippet>bigmeesh.testmod()</snippet></ROW><ROW><id>18500367</id><snippet>fileobja.close
</snippet></ROW><ROW><id>18500367</id><snippet>close</snippet></ROW><ROW><id>18500367</id><snippet>fileobja.close()
</snippet></ROW><ROW><id>18500367</id><snippet>with</snippet></ROW><ROW><id>18500367</id><snippet>f = open('foo', 'a')
do_stuff(f)
do_more_stuff(f)
# ...
f.close()
</snippet></ROW><ROW><id>18500367</id><snippet>with open('foo', 'a') as f:
    do_stuff(f)
    do_more_stuff(f)
    # ...
</snippet></ROW><ROW><id>18500566</id><snippet>[(a, b, c) for a, (b, c) in l]
</snippet></ROW><ROW><id>18500637</id><snippet>array</snippet></ROW><ROW><id>18500637</id><snippet>str.join</snippet></ROW><ROW><id>18500637</id><snippet>str.join</snippet></ROW><ROW><id>18500637</id><snippet>array</snippet></ROW><ROW><id>18500637</id><snippet>array_fromstring</snippet></ROW><ROW><id>18500637</id><snippet>string_join</snippet></ROW><ROW><id>18500778</id><snippet>ix</snippet></ROW><ROW><id>18500778</id><snippet>0:n - 1</snippet></ROW><ROW><id>18500778</id><snippet>ix</snippet></ROW><ROW><id>18500778</id><snippet>DataFrame</snippet></ROW><ROW><id>18500778</id><snippet>In [1]:

df = DataFrame(randn(10, 3), columns=list('abc'))
print df
print
print df.sort('a')

           a          b          c
0      -1.80      -0.28      -1.10
1      -0.58       1.00      -0.48
2      -2.50       1.59      -1.42
3      -1.00      -0.12      -0.93
4      -0.65       1.41       1.20
5       0.51       0.96       1.28
6      -0.28       0.13       1.59
7       1.28      -0.84       0.51
8       0.77      -1.26      -0.50
9      -0.59      -1.34      -1.06

           a          b          c
2      -2.50       1.59      -1.42
0      -1.80      -0.28      -1.10
3      -1.00      -0.12      -0.93
4      -0.65       1.41       1.20
9      -0.59      -1.34      -1.06
1      -0.58       1.00      -0.48
6      -0.28       0.13       1.59
5       0.51       0.96       1.28
8       0.77      -1.26      -0.50
7       1.28      -0.84       0.51
</snippet></ROW><ROW><id>18500869</id><snippet>get_attribute</snippet></ROW><ROW><id>18500869</id><snippet>captcha_value = driver.find_element_by_id("current_captcha").get_attribute("value")
driver.find_element_by_id("capchta").send_keys(captcha_value)
</snippet></ROW><ROW><id>18500944</id><snippet>url(r'^foos/new$', 'create_view')
</snippet></ROW><ROW><id>18500944</id><snippet>url(r'^foos/new/$', 'create_view')
</snippet></ROW><ROW><id>18501073</id><snippet>msg['Subject'] = subject
</snippet></ROW><ROW><id>18501448</id><snippet>vectors[i] = A
</snippet></ROW><ROW><id>18501448</id><snippet>A</snippet></ROW><ROW><id>18501448</id><snippet>A</snippet></ROW><ROW><id>18501448</id><snippet>vectors</snippet></ROW><ROW><id>18501448</id><snippet>vectors[0]</snippet></ROW><ROW><id>18501448</id><snippet>A</snippet></ROW><ROW><id>18501448</id><snippet>A</snippet></ROW><ROW><id>18501448</id><snippet>A</snippet></ROW><ROW><id>18501448</id><snippet>vectors[i] = A[:]
</snippet></ROW><ROW><id>18502230</id><snippet>&gt;&gt;&gt; dict(zip(i,zip(*j)))
{'Type': ('input', 'output', 'input'), 'value': ('1234', '2345', '567'), 'Pin': ('abc', 'xyz', 'pqr')}
</snippet></ROW><ROW><id>18502230</id><snippet>&gt;&gt;&gt; dict(zip(i,map(list,zip(*j))))
{'Type': ['input', 'output', 'input'], 'value': ['1234', '2345', '567'], 'Pin': ['abc', 'xyz', 'pqr']}
</snippet></ROW><ROW><id>18502230</id><snippet>izip</snippet></ROW><ROW><id>18502230</id><snippet>imap</snippet></ROW><ROW><id>18502321</id><snippet>def countsort(unsorted):
    unsorted = numpy.asarray(unsorted)
    return numpy.repeat(numpy.arange(1+unsorted.max()), numpy.bincount(unsorted))
</snippet></ROW><ROW><id>18502321</id><snippet>bincount</snippet></ROW><ROW><id>18502321</id><snippet>repeat</snippet></ROW><ROW><id>18502326</id><snippet>&lt;link rel="stylesheet" type "text/css" href="{{ STATIC_URL }}css/styles.css"/&gt;
</snippet></ROW><ROW><id>18502326</id><snippet>&lt;link rel="stylesheet" type "text/css" href="{% static 'css/styles.css' %}"/&gt;
</snippet></ROW><ROW><id>18502382</id><snippet>tick</snippet></ROW><ROW><id>18502382</id><snippet>while True:
    # Handle user input
    # Do physics calculations/etc
    # Update character positions
    # Draw things to the screen
</snippet></ROW><ROW><id>18502382</id><snippet>tick</snippet></ROW><ROW><id>18502382</id><snippet>tick</snippet></ROW><ROW><id>18502382</id><snippet>def tick(fps):
    interval = 60 / fps 
    current_time = time()
    delta = current_time - last_time

    if delta &lt; interval:
        sleep(interval - delta)

    last_called = time()
</snippet></ROW><ROW><id>18502700</id><snippet>userline != element</snippet></ROW><ROW><id>18502700</id><snippet># The "with" statement automatically closes the file for you!
with open('periodic_table.txt') as f:  
    numbers = {}
    elements = {}
    for line in f:
        num, element = line.split()
        numbers[num] = element
        elements[element] = num

while True:
    userline = input('Enter element number or element name: ')
    userline = userline.capitalize()

    if userline in numbers:
        print('Element number ' + userline + ' is ' + numbers[userline])
    elif userline in elements:
        print('Element number for ' + userline + ' is ' + elements[userline])
    else:
        print("That's not real!")
</snippet></ROW><ROW><id>18502765</id><snippet>','.join(elements)
</snippet></ROW><ROW><id>18502845</id><snippet>CUSTOM USER</snippet></ROW><ROW><id>18502845</id><snippet>ForeingKey</snippet></ROW><ROW><id>18502845</id><snippet>Django User Model</snippet></ROW><ROW><id>18502845</id><snippet>author = models.ForeignKey(User, related_name="courses"</snippet></ROW><ROW><id>18502845</id><snippet>User</snippet></ROW><ROW><id>18502845</id><snippet>User</snippet></ROW><ROW><id>18502845</id><snippet>from django.contrib.auth import get_user_model as user_model
User = user_model()
</snippet></ROW><ROW><id>18502856</id><snippet>"OBJECT"</snippet></ROW><ROW><id>18502856</id><snippet>def parse(filepath):
    with open(filepath) as f:
        contents = f.readlines()

    output = {}
    group = {}
    inside_group = False

    for line in contents:
        line = line.strip()
        if line == '':
            continue

        type, value = line.split('=')
        type = type.strip()
        value = value.strip()

        if type == 'OBJECT':
            inside_group = True
        elif type == 'END_OBJECT':
            output[value] = group
            inside_group = False
            group = {}
        elif inside_group:
            group[type] = value

    return output
</snippet></ROW><ROW><id>18502856</id><snippet>&gt;&gt;&gt; parse('file1.txt')
{
    "WESTBOUNDINGCOORDINATE": {
        "NUM_VAL": 1,
        "VALUE": 80.829037677094
    },
    "NORTHBOUNDINGCOORDINATE": {
        "NUM_VAL": 1,
        "VALUE": 39.9999999964079
    },
    # etc
}
</snippet></ROW><ROW><id>18503157</id><snippet>maindict = dict([x, mydict] for x in range(5))
</snippet></ROW><ROW><id>18503157</id><snippet>maindict</snippet></ROW><ROW><id>18503157</id><snippet>{0: &lt;mydict&gt;, 1: &lt;mydict&gt;, ... , 4: &lt;mydict&gt;}
</snippet></ROW><ROW><id>18503391</id><snippet>def partitionfunc(n,k,l=1):
    '''n is the integer to partition, k is the length of partitions, l is the min partition element size'''
    if k &lt; 1:
        raise StopIteration
    if k == 1:
        if n &gt;= l:
            yield (n,)
        raise StopIteration
    for i in range(l,n+1):
        for result in partitionfunc(n-i,k-1,i):
            yield (i,)+result
</snippet></ROW><ROW><id>18503391</id><snippet>n</snippet></ROW><ROW><id>18503391</id><snippet>k</snippet></ROW><ROW><id>18503391</id><snippet>cProfile</snippet></ROW><ROW><id>18503391</id><snippet>lambda x,y: list(partitionfunc(x,y))</snippet></ROW><ROW><id>18503391</id><snippet>n=50,k-5</snippet></ROW><ROW><id>18503395</id><snippet>var</snippet></ROW><ROW><id>18503395</id><snippet>global</snippet></ROW><ROW><id>18503395</id><snippet>def generateNextNumber(startNumber):
    global current
    current= startNumber
    def tempFunction():
        global current
        current += 1
        return current 
    return tempFunction
</snippet></ROW><ROW><id>18503395</id><snippet>tempFunction</snippet></ROW><ROW><id>18503395</id><snippet>def generateNextNumber(startNumber):
    def tempFunction():
        tempFunction.current += 1
        return tempFunction.current
    tempFunction.current= startNumber
    return tempFunction
</snippet></ROW><ROW><id>18503395</id><snippet>tempFunction</snippet></ROW><ROW><id>18503395</id><snippet>.</snippet></ROW><ROW><id>18503395</id><snippet>()</snippet></ROW><ROW><id>18503395</id><snippet>[]</snippet></ROW><ROW><id>18503395</id><snippet>def generateNextNumber(startNumber):
    current= type("OnTheFly",(),{})()
    current.value= startNumber
    def tempFunction():
        current.value += 1
        return current.value
    return tempFunction
</snippet></ROW><ROW><id>18503395</id><snippet>.</snippet></ROW><ROW><id>18503395</id><snippet>current</snippet></ROW><ROW><id>18503395</id><snippet>type</snippet></ROW><ROW><id>18503395</id><snippet>def generateNextNumber(startNumber):
    class TempFunction:
        def __call__(self):
            self.current += 1
            return self.current
    tempFunction= TempFunction()
    tempFunction.current= startNumber
    return tempFunction
</snippet></ROW><ROW><id>18503395</id><snippet>()</snippet></ROW><ROW><id>18503395</id><snippet>nonlocal</snippet></ROW><ROW><id>18503395</id><snippet>def generateNextNumber(startNumber):
    current= startNumber
    def tempFunction():
        nonlocal current
        current += 1
        return current
    return tempFunction
</snippet></ROW><ROW><id>18503395</id><snippet>global</snippet></ROW><ROW><id>18503395</id><snippet>nonlocal</snippet></ROW><ROW><id>18503395</id><snippet>def generateNextNumber(current):
    while True :
        current+= 1
        yield current
</snippet></ROW><ROW><id>18503395</id><snippet>getNextNumber = generateNextNumber(10)
for i in range(10):
    print (getNextNumber.next())
</snippet></ROW><ROW><id>18503395</id><snippet>for</snippet></ROW><ROW><id>18503395</id><snippet>next()</snippet></ROW><ROW><id>18504033</id><snippet>import re

for line in open(filename, 'r'):
    matchPattern = "^(\d{5})$"
    match = re.match(matchPattern, line, flags=0)
    print match.group(0) #the whole match
</snippet></ROW><ROW><id>18504033</id><snippet>^</snippet></ROW><ROW><id>18504033</id><snippet>$</snippet></ROW><ROW><id>18504033</id><snippet>(\d{5})</snippet></ROW><ROW><id>18504441</id><snippet>def enum(*sequential, **named):
    """ Contruct an enum """
    enums = dict(zip(sequential, range(len(sequential))), **named)
    reverse = dict((value, key) for key, value in enums.items())
    key_names = enums.keys()
    enums['reverse_mapping'] = reverse        
    @classmethod
    def keys(klass):
       return key_names 
    enums['keys'] = keys
    return type('Enum', (), enums)
</snippet></ROW><ROW><id>18504441</id><snippet>classmethod</snippet></ROW><ROW><id>18504441</id><snippet>@classmethod</snippet></ROW><ROW><id>18504441</id><snippet>&gt;&gt;&gt; MY_COLORS = enum(RED=0, BLUE=1)
&gt;&gt;&gt; MY_COLORS.keys()
['BLUE', 'RED']
</snippet></ROW><ROW><id>18504441</id><snippet>MY_COLORS</snippet></ROW><ROW><id>18504628</id><snippet>libcairo2-dev</snippet></ROW><ROW><id>18504628</id><snippet>sudo apt-get install libcairo2-dev
</snippet></ROW><ROW><id>18504784</id><snippet>import math
v1 = [['be', 'VSIS3S0', 1], ['scott', 'NP00000', 2], ['north', 'NCMS000', 1], ['revolution', 'NP00000', 1], ['name', 'VMP00SM', 1]]
v2 = [['mechanic', 'NCMS000', 1], ['be', 'VSIS3S0', 1], ['tool', 'AQ0CS0', 1], ['sam', 'NP00000', 1], ['frida', 'NP00000', 1]]
v3 = [['be', 'VSIP3S0', 1], ['scott', 'NP00000', 1], ['who', 'NP00000', 1]]

v = [v1,v2,v3]

countdict = {}
for vi in v:
    for e in vi:
        countdict[e[0]] = countdict.get(e[0],0) + 1

scoredict = {}
for vi in v:
    for e in vi:
        scoredict[e[0]] = scoredict.get(e[0],0) + (e[2] * math.log10(3.0/countdict[e[0]]))

print scoredict
</snippet></ROW><ROW><id>18504784</id><snippet>{'be': 0.0, 'revolution': 0.47712125471966244, 'north': 0.47712125471966244, 'name': 0.47712125471966244, 'sam': 0.47712125471966244, 'tool': 0.47712125471966244, 'who': 0.47712125471966244, 'scott': 0.5282737771670437, 'mechanic': 0.47712125471966244, 'frida': 0.47712125471966244}
</snippet></ROW><ROW><id>18504817</id><snippet>{"foo/bar":"bar/baz"}
</snippet></ROW><ROW><id>18504817</id><snippet>{"foo\/bar":"bar\/baz"}
</snippet></ROW><ROW><id>18504817</id><snippet>\</snippet></ROW><ROW><id>18504817</id><snippet>/</snippet></ROW><ROW><id>18504843</id><snippet>--system-site-packages</snippet></ROW><ROW><id>18504843</id><snippet>virtualenv --help</snippet></ROW><ROW><id>18504843</id><snippet>--no-site-packages    Don't give access to the global site-packages dir to
                      the virtual environment (default)
--system-site-packages
                      Give access to the global site-packages dir to the
                      virtual environment
</snippet></ROW><ROW><id>18504852</id><snippet>User(...)</snippet></ROW><ROW><id>18504852</id><snippet>User.objects.create_user()</snippet></ROW><ROW><id>18505101</id><snippet>df['A_perc'] = df['A']/df['sum']
</snippet></ROW><ROW><id>18505101</id><snippet>div</snippet></ROW><ROW><id>18505101</id><snippet>ds.div(ds['sum'], axis=0)
</snippet></ROW><ROW><id>18505101</id><snippet>&gt;&gt;&gt; ds.join(ds.div(ds['sum'], axis=0), rsuffix='_perc')
          A         B         C         D       sum    A_perc    B_perc  \
1  0.151722  0.935917  1.033526  0.941962  3.063127  0.049532  0.305543   
2  0.033761  1.087302  1.110695  1.401260  3.633017  0.009293  0.299283   
3  0.761368  0.484268  0.026837  1.276130  2.548603  0.298739  0.190013   

     C_perc    D_perc  sum_perc  
1  0.337409  0.307517         1  
2  0.305722  0.385701         1  
3  0.010530  0.500718         1  
</snippet></ROW><ROW><id>18505136</id><snippet>item["code"]</snippet></ROW><ROW><id>18505136</id><snippet>item["code"]</snippet></ROW><ROW><id>18505136</id><snippet>.format()</snippet></ROW><ROW><id>18505136</id><snippet>loc_Con = hxs.select('/tr/td[2]/span/span/span') #for country
loc_Reg = hxs.select('/tr/td[2]/span/span') #for region
loc_Loc = hxs.select('//tr[3]/td[2]/span/span') #for local
items = []
for titles in titles:
   item = somethingItem()
   temp1 = loc_Con.select('text()').extract()
   temp2 = loc_Reg.select('text()').extract()
   temp3 = loc_Loc.select('text()').extract()
   temp1 = temp1[0] if temp1 else ""
   temp2 = temp2[0] if temp2 else ""
   temp3 = temp3[0] if temp3 else ""
   item["code"] = "{0}-{1}-{2}".format(temp1, 
                                       temp2,
                                       temp3)
</snippet></ROW><ROW><id>18505136</id><snippet>temp[1] = Field()</snippet></ROW><ROW><id>18505260</id><snippet>len(item_names)</snippet></ROW><ROW><id>18505679</id><snippet>import struct

def convert_temp (bytes):
    raw_temp = (bytes &amp; 0xff00) &gt;&gt; 8
    raw_frac = (bytes &amp; 0x00ff) &gt;&gt; 3

    a, b = struct.unpack('bb', '{}{}'.format(chr(raw_temp), chr(raw_frac)))
    return a + (0.03125 * b)
</snippet></ROW><ROW><id>18505696</id><snippet>def parse_file():
  with open('SOMETHING.txt', 'r') as f:
    c1 = 0
    c2 = 0
    for i in f:
      w = i.split()
      c1 += len(w)
      for j in w:
        if j.endswith('LY'):
          c2 += 1
    return {'Total words': c1, 'Words ending with LY': c2}
</snippet></ROW><ROW><id>18506220</id><snippet>__iter__</snippet></ROW><ROW><id>18506220</id><snippet>__next__</snippet></ROW><ROW><id>18506220</id><snippet>__init__</snippet></ROW><ROW><id>18506528</id><snippet>lower()</snippet></ROW><ROW><id>18506528</id><snippet>clean_username</snippet></ROW><ROW><id>18506528</id><snippet>def clean_username(self):
    username = self.cleaned_data.get('username')
    if username:
        return username.lower()
</snippet></ROW><ROW><id>18506597</id><snippet>&gt;&gt;&gt; i = 3
&gt;&gt;&gt; +i
3
&gt;&gt;&gt; ++i
3
&gt;&gt;&gt; +++i
3
&gt;&gt;&gt; -i
-3
&gt;&gt;&gt; --i
3
&gt;&gt;&gt; ---i
-3
</snippet></ROW><ROW><id>18506638</id><snippet> new_list = [elem for elem in mylist if elem.strip()]
</snippet></ROW><ROW><id>18506638</id><snippet>strip()</snippet></ROW><ROW><id>18507306</id><snippet>&gt;&gt;&gt; import re
&gt;&gt;&gt; s = "javascript:GetApplyClickCount('https://careers-virtua.icims.com/jobs/5587/1024245/job?apply=yes&amp;hashed=58168622', 'http://virtuacareers.com/list.aspx?state=voorhees&amp;category=staff+nurse&amp;jobtitle=registered+nurse+(rn)&amp;jobid=3025458&amp;dmaid=1286&amp;dmaname=voorhees', 'SameWindow', 'scrollbars=1, toolbar=1, resizable=1, location=1, directories=1, status=1, menubar=1, copyhistory=1, fullscreen=1', 'true', '0', '0', 'virtuacareers.com', '', '', '3025458', 'Registered Nurse (RN)','212','True','','False');"
&gt;&gt;&gt; re.search("\'(?P&lt;url&gt;https?://[^\s]+)\'", s).group("url")
'https://careers-virtua.icims.com/jobs/5587/1024245/job?apply=yes&amp;hashed=58168622'
</snippet></ROW><ROW><id>18507306</id><snippet>link = linker.select('@href').extract()[0]
item ["link"] = re.search("\'(?P&lt;url&gt;https?://[^\s]+)\'", link).group("url")
</snippet></ROW><ROW><id>18507536</id><snippet>/sbin/arp
</snippet></ROW><ROW><id>18507555</id><snippet>levels = {
    'INFO': logging.INFO, 
    'WARNING': logging.WARNING,
    'ERROR': logging.ERROR,
}
py_loglevel = levels.get(self.loglevel, logging.DEBUG)
</snippet></ROW><ROW><id>18507555</id><snippet>py_loglevel = getattr(logging, self.loglevel, logging.DEBUG)
</snippet></ROW><ROW><id>18507858</id><snippet>with open ('test.txt', 'r') as infile:
    data = infile.readlines()
    for line, content in enumerate(data, start=1):
            if content.strip() == 'this is my horse':
                print line
</snippet></ROW><ROW><id>18507858</id><snippet>4
</snippet></ROW><ROW><id>18508058</id><snippet>elements = []
for line in open("periodic_table.txt"):
    elements.append(line[3:])
</snippet></ROW><ROW><id>18508058</id><snippet>if answer.isdigit():
    print elements[int(answer)]
else:
    print elements.index(answer)
</snippet></ROW><ROW><id>18508102</id><snippet>if all(sequence[a[i:i+3]] == sequence[b[i:i+3]] for i in range(0, len(a), 3)):
    print('It\'s the same')
else:
    print('Mutated!')
</snippet></ROW><ROW><id>18508102</id><snippet>all</snippet></ROW><ROW><id>18508479</id><snippet>print</snippet></ROW><ROW><id>18508804</id><snippet>import numpy as np

# Load data from file.
data = np.genfromtxt('data_input', dtype=None)

# Force transpose list.
data = zip(*data)
</snippet></ROW><ROW><id>18508924</id><snippet>deepcopy</snippet></ROW><ROW><id>18509008</id><snippet>fs = require('fs');
var m = JSON.parse(fs.readFileSync('people.json').toString());
m.forEach(function(p){
    p.pic = p.name.toLowerCase()+".png";
});
fs.writeFile('people.json', JSON.stringify(m));
</snippet></ROW><ROW><id>18509008</id><snippet>[
    {"name":"Paul","age":29},
    {"name":"Kathy","age":101},
    {"name":"Paula","age":12},
    {"name":"Bruce","age":56}
]
</snippet></ROW><ROW><id>18509223</id><snippet>&gt;&gt;&gt; i = ['abc', 'def', 'ghi']
&gt;&gt;&gt; j = [' ', 'rfd', ' ', ' ', 'qf']
&gt;&gt;&gt; cnt = 0
&gt;&gt;&gt; new = []
&gt;&gt;&gt; for item in j:
...     if item == ' ':
...             new.append(i[cnt])
...             cnt += 1
...     else:
...             new.append(item)
... 
&gt;&gt;&gt; print new
['abc', 'rfd', 'abc', 'abc', 'qf']
</snippet></ROW><ROW><id>18509364</id><snippet>   msg = \
          """&lt;?xml version="1.0" encoding="UTF-8"?&gt;
          &lt;SOAP-ENV:Envelope xmlns:ns0="http://www.service-now.com/incident" 
              xmlns:ns1="http://schemas.xmlsoap.org/soap/envelope/" 
              xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
              xmlns:SOAP-ENV="http://schemas.xmlsoap.org/soap/envelope/"&gt;
          &lt;SOAP-ENV:Header/&gt;
              &lt;ns1:Body&gt;
                  &lt;ns0:getRecords&gt;
                      &lt;ns0:__encoded_query&gt;status=0&lt;/ns0:__encoded_query&gt;
                  &lt;/ns0:getRecords&gt;
              &lt;/ns1:Body&gt;
          &lt;/SOAP-ENV:Envelope&gt;
            """

    records = client.service.getRecords(__inject = {'msg' : msg})
</snippet></ROW><ROW><id>18509372</id><snippet>a = new int[]{1, 3, 5};
</snippet></ROW><ROW><id>18509673</id><snippet>views.py</snippet></ROW><ROW><id>18509673</id><snippet>class LocationListAPIView(generics.ListAPIView):
    queryset = Location.objects.all()
    serializer_class = LocationSerializer

class LocationDetailAPIView(generics.RetrieveAPIView):
    queryset = Location.objects.all()
    serializer_class = LocationSerializer
</snippet></ROW><ROW><id>18509673</id><snippet>urls.py</snippet></ROW><ROW><id>18509673</id><snippet>url(r'^location/$', views.LocationListAPIView.as_view(), name='location-list'),
url(r'^location/(?P&lt;pk&gt;[0-9]+)/$', views.LocationDetailAPIView.as_view(), name='location-detail')
</snippet></ROW><ROW><id>18509673</id><snippet>views.py</snippet></ROW><ROW><id>18509673</id><snippet>class CombinedAPIView(APIView):
    def get(self, request):
        locations = Location.objects.all()
        countries = Country.objects.all()

        location_serializer = LocationSerializer(locations, many=True)
        country_serializer = CountrySerializer(countries, many=True)

        return Response({
            'countries': country_serializer.data,
            'locations': location_serializer.data
        })
</snippet></ROW><ROW><id>18509673</id><snippet>urls.py</snippet></ROW><ROW><id>18509673</id><snippet>url(r'^combined/$', views.CombinedAPIView.as_view(), name='combined-list')
</snippet></ROW><ROW><id>18509797</id><snippet>class Bar(object):
    def __init__(self, inst):
        self.inst = inst
    def method(self):
        # use self.inst

inst = Foo()
bar = Bar(inst)
</snippet></ROW><ROW><id>18510139</id><snippet>|</snippet></ROW><ROW><id>18510139</id><snippet>or</snippet></ROW><ROW><id>18510139</id><snippet>or</snippet></ROW><ROW><id>18510139</id><snippet>&lt;&gt;</snippet></ROW><ROW><id>18510139</id><snippet>!=</snippet></ROW><ROW><id>18510139</id><snippet>&gt;&gt;&gt; 1 != 1
False
&gt;&gt;&gt; 1 != 0
True
&gt;&gt;&gt; False or True
True
&gt;&gt;&gt; False or 1 != 0
True
&gt;&gt;&gt; 1 != 1 or 1 != 0
True
</snippet></ROW><ROW><id>18510139</id><snippet>bool()</snippet></ROW><ROW><id>18510139</id><snippet>int()</snippet></ROW><ROW><id>18510139</id><snippet>True</snippet></ROW><ROW><id>18510139</id><snippet>False</snippet></ROW><ROW><id>18510139</id><snippet>True</snippet></ROW><ROW><id>18510139</id><snippet>False</snippet></ROW><ROW><id>18510139</id><snippet>&gt;&gt;&gt; True == 1
True
&gt;&gt;&gt; 10 | True
11
</snippet></ROW><ROW><id>18510139</id><snippet>|</snippet></ROW><ROW><id>18510139</id><snippet>!=</snippet></ROW><ROW><id>18510139</id><snippet>&lt;&gt;</snippet></ROW><ROW><id>18510139</id><snippet>&gt;&gt;&gt; 1 != (1 | 1) != 0
False
&gt;&gt;&gt; (1 != 1) | (1 != 0)
True
</snippet></ROW><ROW><id>18510139</id><snippet>or</snippet></ROW><ROW><id>18510404</id><snippet>list_subs[n-1] = [variables[n], media, desviopadrao, distribuicao]
</snippet></ROW><ROW><id>18510404</id><snippet>list_subs</snippet></ROW><ROW><id>18510404</id><snippet>4</snippet></ROW><ROW><id>18510404</id><snippet>0, 1, 2, 3</snippet></ROW><ROW><id>18510404</id><snippet>generateRandomNumbers</snippet></ROW><ROW><id>18510404</id><snippet>4</snippet></ROW><ROW><id>18510404</id><snippet>eval(input(...))</snippet></ROW><ROW><id>18510404</id><snippet>ast.literal_eval</snippet></ROW><ROW><id>18510621</id><snippet>import io
import pandas as pd

data = u'baz,qux\none,A\none,B\ntwo,C\nthree,A\none,B\none,C'
df = pd.read_csv(io.StringIO(data))

new = pd.DataFrame()
for key, group in df.groupby('baz'):
    new = pd.concat([new, pd.DataFrame(group.reset_index().qux, columns=[key])],
                    axis=1)
print new.replace(np.nan, '')
</snippet></ROW><ROW><id>18510621</id><snippet>  one two three  
0   A   C     A
1   B
2   B
3   C
</snippet></ROW><ROW><id>18510621</id><snippet>baz</snippet></ROW><ROW><id>18510621</id><snippet>qux</snippet></ROW><ROW><id>18510621</id><snippet>&gt;&gt;&gt; df['foo'] = 1 # Add aggregation column
&gt;&gt;&gt; df.pivot_table('foo', cols='baz', rows=['qux'])
     one  three  two                 
A      1      1  NaN
B      1    NaN  NaN
C      1    NaN    1
</snippet></ROW><ROW><id>18510689</id><snippet>Button(operator, text=btn_text, width=5, command=lambda: click(btn_text)).grid(row=r,column=c)
</snippet></ROW><ROW><id>18510689</id><snippet>btn_text</snippet></ROW><ROW><id>18510689</id><snippet>btn_text</snippet></ROW><ROW><id>18510689</id><snippet>click('C')</snippet></ROW><ROW><id>18510689</id><snippet>'C'</snippet></ROW><ROW><id>18510689</id><snippet>btn_text</snippet></ROW><ROW><id>18510689</id><snippet>command=lambda text=btn_text: click(text)
</snippet></ROW><ROW><id>18510689</id><snippet>command=(lambda text: lambda: click(text))(btn_text)
</snippet></ROW><ROW><id>18510689</id><snippet>text</snippet></ROW><ROW><id>18510689</id><snippet>btn_text</snippet></ROW><ROW><id>18510747</id><snippet>file.seek()</snippet></ROW><ROW><id>18510747</id><snippet>file.truncate()</snippet></ROW><ROW><id>18510747</id><snippet>file.flush()</snippet></ROW><ROW><id>18510747</id><snippet>import os

fileobj.flush()  # clear buffers
fileobj.seek(-256, os.SEEK_END)  # 256 bytes from the end
fileobj.truncate()
</snippet></ROW><ROW><id>18510853</id><snippet>pp=/home/user/projects/python/flask/project/app
module=filename
</snippet></ROW><ROW><id>18510999</id><snippet>"distance(survey_marker, geopoint(35.2, 40.5)) &lt; 100"
</snippet></ROW><ROW><id>18510999</id><snippet>100</snippet></ROW><ROW><id>18510999</id><snippet>500</snippet></ROW><ROW><id>18510999</id><snippet>geopoint(35.2, 40.5)</snippet></ROW><ROW><id>18510999</id><snippet>survey_marker</snippet></ROW><ROW><id>18510999</id><snippet>from google.appengine.api import search 

query = #something
index = search.Index(name="myIndex")
for entity in query:
    my_document = search.Document(
        doc_id = entity.key,
        fields=[
           search.GeoField(name='location', value=search.GeoPoint(entity.point))
           ])
    index.put(document)
</snippet></ROW><ROW><id>18510999</id><snippet>coords = (lat, long)
query_string = "distance(location, geopoint(%s, %s)) &lt; 500" % (lat, long)
index.search(query.string)
</snippet></ROW><ROW><id>18511052</id><snippet>print()</snippet></ROW><ROW><id>18511052</id><snippet>__str__()</snippet></ROW><ROW><id>18511052</id><snippet>print(f)</snippet></ROW><ROW><id>18511052</id><snippet>print( f.__str__() )</snippet></ROW><ROW><id>18511052</id><snippet>def __str__(self):
        print str(self.num)+"/"+str(self.den)
</snippet></ROW><ROW><id>18511052</id><snippet>None</snippet></ROW><ROW><id>18511052</id><snippet>TypeError</snippet></ROW><ROW><id>18511052</id><snippet>__str__()</snippet></ROW><ROW><id>18511125</id><snippet>This function takes the name of a file, and returns a 10-member tuple with the following contents:

(mode, ino, dev, nlink, uid, gid, size, atime, mtime, ctime)
</snippet></ROW><ROW><id>18511125</id><snippet>st_mode - protection bits,
st_ino - inode number,
st_dev - device,
st_nlink - number of hard links,
st_uid - user id of owner,
st_gid - group id of owner,
st_size - size of file, in bytes,
st_atime - time of most recent access,
st_mtime - time of most recent content modification,
st_ctime - platform dependent; time of most recent metadata change on Unix, or the time of creation on Windows)
</snippet></ROW><ROW><id>18511125</id><snippet>listdir</snippet></ROW><ROW><id>18511125</id><snippet>import os 

def list_dir(dir_name, traversed = [], results = []): 
    dirs = os.listdir(dir_name)
    if dirs:
        for f in dirs:
            new_dir = dir_name + f + '/'
            if os.path.isdir(new_dir) and new_dir not in traversed:
                traversed.append(new_dir)
                list_dir(new_dir, traversed, results)
            else:
                results.append([new_dir[:-1], os.stat(new_dir[:-1])])  
    return results

dir_name = '../c_the_hard_way/Valgrind/' # sample dir
for file_name, stat in list_dir(dir_name):
    print file_name, stat.st_size # sample with file size
</snippet></ROW><ROW><id>18511414</id><snippet>def custom_dec(view_func):
    @wraps(view_func, assigned=available_attrs(view_func))
    def wrapper(request,filters,*args,**kwargs):
        # do some processing on request and filters
        cached_func = cache_page(900, view_func)
        return cached_func(request,filters,*args,**kwargs) #this returns an HttpResponse object
        # the above two line could also be written as cache_page(900, view_func)(request,filters,*args,**kwargs)
return wrapper 
</snippet></ROW><ROW><id>18511728</id><snippet>sorted</snippet></ROW><ROW><id>18511728</id><snippet>range</snippet></ROW><ROW><id>18511728</id><snippet>key</snippet></ROW><ROW><id>18511728</id><snippet>x</snippet></ROW><ROW><id>18511728</id><snippet>y</snippet></ROW><ROW><id>18511728</id><snippet>example = [[1, 1, 20], [1, 1, 11], [2, 3, 12.1], [2, 5, 13], [5,4,10], [3,6,15]]
x = [el[0] for el in example]
y = [el[1] for el in example]
z = [el[2] for el in example]

# indices for x,y to get them in sorted order later
# duplicates in both dimensions are preserved
x_idx = sorted(range(len(x)), key=lambda k:x[k])
y_idx = sorted(range(len(y)), key=lambda k:y[k])

# initialize A with 0
A = [[0 for _ in range(len(y)+1)] for _ in range(len(x)+1)]

# and fill it with values
for k, val in enumerate(z):
    A[x_idx[k]+1][y_idx[k]+1] = val
    A[k+1][0] = x[x_idx[k]]
    A[0][k+1] = y[y_idx[k]]
</snippet></ROW><ROW><id>18511728</id><snippet>A</snippet></ROW><ROW><id>18511728</id><snippet>[[0, 1, 1, 3, 4, 5, 6],
 [1, 20, 0, 0, 0, 0, 0],
 [1, 0, 11, 0, 0, 0, 0],
 [2, 0, 0, 12.1, 0, 0, 0],
 [2, 0, 0, 0, 0, 13, 0],
 [3, 0, 0, 0, 0, 0, 15],
 [5, 0, 0, 0, 10, 0, 0]]
</snippet></ROW><ROW><id>18511728</id><snippet>1</snippet></ROW><ROW><id>18511728</id><snippet>itertools</snippet></ROW><ROW><id>18511728</id><snippet>AA = []
for row_index, rows_to_be_merged in itertools.groupby(A, lambda x: x[0]):
    AA.append([row_index] + 
              [sum(rows) for rows in zip(*rows_to_be_merged)][1:])
</snippet></ROW><ROW><id>18511728</id><snippet>AA</snippet></ROW><ROW><id>18511728</id><snippet>[[0, 1, 1, 3, 4, 5, 6],
 [1, 20, 11, 0, 0, 0, 0],
 [2, 0, 0, 12.1, 0, 13, 0],
 [3, 0, 0, 0, 0, 0, 15],
 [5, 0, 0, 0, 10, 0, 0]]
</snippet></ROW><ROW><id>18512307</id><snippet>localhost.com</snippet></ROW><ROW><id>18512307</id><snippet>test.localhost.com</snippet></ROW><ROW><id>18512307</id><snippet>localhost.com</snippet></ROW><ROW><id>18512307</id><snippet>from flask import Flask, redirect, url_for
app = Flask(__name__)
app.url_map.host_matching = True

@app.route("/", host="localhost.com:5000")
def hello1():
    return redirect(url_for("hello2")) # for permanent redirect you can do redirect(url_for("hello2"), 301)

@app.route("/", host="test.localhost.com:5000")
def hello2():
    return "Hello @ test!"

if __name__ == "__main__":
    app.run()
</snippet></ROW><ROW><id>18512307</id><snippet>localhost.com</snippet></ROW><ROW><id>18512307</id><snippet>test.localhost.com</snippet></ROW><ROW><id>18512638</id><snippet>cProfile</snippet></ROW><ROW><id>18512638</id><snippet>gprof2dot</snippet></ROW><ROW><id>18512638</id><snippet>re.compile</snippet></ROW><ROW><id>18512638</id><snippet>executemany</snippet></ROW><ROW><id>18512638</id><snippet>import fileinput

parsed_info = []
for linenum, line in enumerate(fileinput.input()):
    if not line.startswith("#DEBUG"):
        continue # Skip line

    msg = line.partition("MSG")[1] # Get everything after MSG
    words = msg.split() # Split on words
    info = {}
    for w in words:
        k, _, v = w.partition(":") # Split each word on first :
        info[k] = v

    parsed_info.append(info)

    if linenum % 10000 == 0: # Or maybe  if len(parsed_info) &gt; 500:
        # Insert everything in parsed_info to database
        ...
        parsed_info = [] # Clear
</snippet></ROW><ROW><id>18512716</id><snippet>getreader()</snippet></ROW><ROW><id>18512716</id><snippet>StreamReader</snippet></ROW><ROW><id>18512716</id><snippet>read()</snippet></ROW><ROW><id>18512716</id><snippet>response</snippet></ROW><ROW><id>18512716</id><snippet>StreamReader</snippet></ROW><ROW><id>18512716</id><snippet>conn = httplib.HTTPConnection('server')
conn.request('GET', '/')
response = conn.getresponse()

reader = codecs.getreader("cp1250")(response)
lines = sr.readlines()
</snippet></ROW><ROW><id>18512791</id><snippet>#include "PartOneOfUglyCode.cpp"
#include "PartTwoOfUglyCode.cpp"
#include "PartThreeOfUglyCode.cpp"
...
</snippet></ROW><ROW><id>18513073</id><snippet>In [117]: binned_time = df.groupby(pd.cut(df.speed, bins=[0,20,40,60,80]))['time']                                                                                                                                                                                        

In [118]: binned_time.sum()
Out[118]: 
speed
(0, 20]     0.30
(20, 40]    3.30
(40, 60]    1.11
(60, 80]    1.24
Name: time, dtype: float64
</snippet></ROW><ROW><id>18513149</id><snippet>list_a = [[1.2, 0.5, 3.1,...], [7.3, 1.5, 3.9,...], [100, 200, 150, ...]]
import numpy as np
x = np.asarray(list_a[0])
y = np.asarray(list_a[1])
m = np.asarray(list_a[2])
mrk = {100:'o',150:'s',200:'^'}
for key,value in mrk.items():
    s1 = (m==key)
    plt.scatter(x[s1],y[s1],marker=value)
</snippet></ROW><ROW><id>18513221</id><snippet>Dlg = wx.TextEntryDialog(panel, 'Enter your word:',"New word","", 
                style=wx.OK|wx.CANCEL|wx.CENTRE,pos=(100,200))

if Dlg.ShowModal() == wx.OK:
    test = Dlg.GetValue() 
del Dlg
</snippet></ROW><ROW><id>18513606</id><snippet>set</snippet></ROW><ROW><id>18513606</id><snippet>Bar.id</snippet></ROW><ROW><id>18513606</id><snippet>after_insert</snippet></ROW><ROW><id>18513606</id><snippet>Bar</snippet></ROW><ROW><id>18513606</id><snippet>foo.label</snippet></ROW><ROW><id>18513606</id><snippet>def _adjust_label(mapper, connection, target):

    print 'adjust', mapper, connection, target
    if not target.foo.label:
        connection.execute('UPDATE foo SET label="autostring %d" WHERE id=%d' % (target.id, target.foo.id))

event.listen(Bar, 'after_insert', _adjust_label)
</snippet></ROW><ROW><id>18513615</id><snippet>   for a in soup.select("span.p a[href]"):
        try:
            print (a['href']).encode('utf-8','replace')
            f.write ('http://www.brothersoft.com'+a['href']+'\n')
        except:
            print 'cannot read'
            f.write('cannot read:'+'http://www.brothersoft.com'+a['href']+'\n')

            pass
</snippet></ROW><ROW><id>18513615</id><snippet>body</snippet></ROW><ROW><id>18513615</id><snippet>onload</snippet></ROW><ROW><id>18513615</id><snippet>print soup.find('body')['onload'][10:-2]
</snippet></ROW><ROW><id>18513800</id><snippet>class MyModelAdmin(admin.ModelAdmin):

    def get_form(self, request, obj=None, **kwargs):            
        if not obj:
            return MyModelCreateForm
        return super(MyModelAdmin, self).get_form(request, obj, **kwargs)
</snippet></ROW><ROW><id>18513858</id><snippet>with_metaclass()</snippet></ROW><ROW><id>18513858</id><snippet>six</snippet></ROW><ROW><id>18513858</id><snippet>from six import with_metaclass

class Meta(type):
    pass

class Base(object):
    pass

class MyClass(with_metaclass(Meta, Base)):
    pass
</snippet></ROW><ROW><id>18513858</id><snippet>class MyClass(object):
    __metaclass__ = Meta
</snippet></ROW><ROW><id>18513858</id><snippet>class MyClass(metaclass=Meta):
    pass
</snippet></ROW><ROW><id>18513858</id><snippet>with_metaclass()</snippet></ROW><ROW><id>18513858</id><snippet>def with_metaclass(meta, *bases):
    """Create a base class with a metaclass."""
    return meta("NewBase", bases, {})
</snippet></ROW><ROW><id>18513858</id><snippet>NewBase</snippet></ROW><ROW><id>18513858</id><snippet>meta</snippet></ROW><ROW><id>18513877</id><snippet>&gt;&gt;&gt; tz = [(item, datetime.datetime.now(pytz.timezone(item)).strftime('%z') + " " + item) for item in pytz.common_timezones]
&gt;&gt;&gt; sorted(tz, key=lambda x: int(x[1].split()[0]))
[('Pacific/Midway', '-1100 Pacific/Midway'), ('Pacific/Niue', '-1100 Pacific/Niue'), ('Pacific/Pago_Pago', '-1100 Pacific/Pago_Pago'), ('Pacific/Honolulu', '-1000 Pacific/Honolulu'), ...
</snippet></ROW><ROW><id>18514116</id><snippet>json.loads()</snippet></ROW><ROW><id>18514116</id><snippet>eval()</snippet></ROW><ROW><id>18514840</id><snippet>self.__num = value</snippet></ROW><ROW><id>18514840</id><snippet>self.__num</snippet></ROW><ROW><id>18514840</id><snippet>self.__num</snippet></ROW><ROW><id>18514840</id><snippet>self.__num</snippet></ROW><ROW><id>18514840</id><snippet>self.__num</snippet></ROW><ROW><id>18514840</id><snippet>self.__num</snippet></ROW><ROW><id>18514840</id><snippet>self.__num</snippet></ROW><ROW><id>18514840</id><snippet>self.__num</snippet></ROW><ROW><id>18514840</id><snippet>self.__num</snippet></ROW><ROW><id>18514840</id><snippet>__num</snippet></ROW><ROW><id>18514840</id><snippet>self.__num = value</snippet></ROW><ROW><id>18514840</id><snippet>STORE_ATTR</snippet></ROW><ROW><id>18514840</id><snippet>&gt;&gt;&gt; import dis
&gt;&gt;&gt; def setNum(self, value):
...     self.__num = value
... 
&gt;&gt;&gt; dis.dis(setNum)
  2           0 LOAD_FAST                1 (value)
              3 LOAD_FAST                0 (self)
              6 STORE_ATTR               0 (__num)
              9 LOAD_CONST               0 (None)
             12 RETURN_VALUE        
</snippet></ROW><ROW><id>18514840</id><snippet>STORE_ATTR</snippet></ROW><ROW><id>18514840</id><snippet>__num</snippet></ROW><ROW><id>18514840</id><snippet>property</snippet></ROW><ROW><id>18514840</id><snippet>PropertyShow.__num.__set__(self, value)
</snippet></ROW><ROW><id>18514840</id><snippet>property</snippet></ROW><ROW><id>18514840</id><snippet>PropertyShow.setNum</snippet></ROW><ROW><id>18514840</id><snippet>PropertyShow.setNum(self, value)</snippet></ROW><ROW><id>18514840</id><snippet>self.__num = value</snippet></ROW><ROW><id>18514973</id><snippet>9.95380202e-01</snippet></ROW><ROW><id>18514973</id><snippet>0.995380202</snippet></ROW><ROW><id>18514973</id><snippet>1.0</snippet></ROW><ROW><id>18514973</id><snippet>xerr</snippet></ROW><ROW><id>18514973</id><snippet>xerr</snippet></ROW><ROW><id>18514973</id><snippet>1.0</snippet></ROW><ROW><id>18514973</id><snippet>2.0</snippet></ROW><ROW><id>18514973</id><snippet>width - 1.0</snippet></ROW><ROW><id>18514973</id><snippet>width + 1.0</snippet></ROW><ROW><id>18514973</id><snippet>pyplot.bar()</snippet></ROW><ROW><id>18514973</id><snippet>pyplot.barh()</snippet></ROW><ROW><id>18514973</id><snippet>errorbar()</snippet></ROW><ROW><id>18514973</id><snippet>pyplot.errorbar()</snippet></ROW><ROW><id>18514973</id><snippet>import matplotlib.pyplot as plt
import numpy as np

x = np.arange(9)
y = np.random.rand(9) * 10

stds = np.array([1.14428879e-01, 3.38164768e-01, 5.58287430e-01,
                 7.77484276e-01, 9.95380202e-01, 1.58493526e-08,
                 8.69720905e-02, 8.64435493e-02, 5.12989176e-03])

# Create array with only positive errors
pos_xerr = np.vstack((np.zeros(len(stds)), stds))

# Create array with only negative errors
neg_xerr = np.vstack((stds, np.zeros(len(stds))))

#Create array with different positive and negative error
both_xerr = np.vstack((stds, np.random.rand(len(stds))*2))

fig, ((ax, ax2),(ax3, ax4)) = plt.subplots(2,2, figsize=(9,5))

# Plot centered errorbars (+/- given value)
ax.barh(x, y, xerr=stds, ecolor='k', align='center', alpha=0.3)
ax.set_title('+/- errorbars')
# Plot positive errorbars
ax2.barh(x, y, xerr=pos_xerr, ecolor='g', align='center', alpha=0.3)
ax2.set_title('Positive errorbars')
# Plot negative errorbars
ax3.barh(x, y, xerr=neg_xerr, ecolor='r', align='center', alpha=0.3)
ax3.set_title('Negative errorbars')
# Plot errorbars with different positive and negative error
ax4.barh(x, y, xerr=both_xerr, ecolor='b', align='center', alpha=0.3)
ax4.set_title('Different positive and negative error')

plt.tight_layout()

plt.show()
</snippet></ROW><ROW><id>18515222</id><snippet>virtualenv</snippet></ROW><ROW><id>18515222</id><snippet>easy_install</snippet></ROW><ROW><id>18515222</id><snippet>easy_install</snippet></ROW><ROW><id>18515222</id><snippet>pip</snippet></ROW><ROW><id>18515222</id><snippet>brew doctor</snippet></ROW><ROW><id>18515222</id><snippet>pip</snippet></ROW><ROW><id>18515428</id><snippet>bincount</snippet></ROW><ROW><id>18515428</id><snippet>&gt;&gt;&gt; A = np.array([1,3,3,3,29])
&gt;&gt;&gt; B = np.array([2,3,4,2,3])
&gt;&gt;&gt; np.bincount(A, B)
array([ 0.,  2.,  0.,  9.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,
        0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,
        0.,  0.,  0.,  3.])
</snippet></ROW><ROW><id>18515428</id><snippet>numpy</snippet></ROW><ROW><id>18515539</id><snippet>db.test_collection.find({"data.Country": "ES"})
db.test_collection.find({"data.Count": {"$lt": 6}})
</snippet></ROW><ROW><id>18515600</id><snippet>9200</snippet></ROW><ROW><id>18515600</id><snippet>9200</snippet></ROW><ROW><id>18515600</id><snippet>9200</snippet></ROW><ROW><id>18515842</id><snippet>&gt;&gt;&gt; dict1 = {'foo': {'something':'x'} }
&gt;&gt;&gt; dict2 = {'foo': {'otherthing':'y'} }
&gt;&gt;&gt;
&gt;&gt;&gt; {key: dict(dict1[key], **dict2[key]) for key in dict1}
{'foo': {'otherthing': 'y', 'something': 'x'}}

&gt;&gt;&gt; # ---Or---
&gt;&gt;&gt; {keys: dict(dict1[keys].items() + dict2[keys].items()) for keys in dict1}
{'foo': {'otherthing': 'y', 'something': 'x'}}
</snippet></ROW><ROW><id>18515887</id><snippet>while True:
    try:
        result = json.loads(s)   # try to parse...
        break                    # parsing worked -&gt; exit loop
    except Exception as e:
        # "Expecting , delimiter: line 34 column 54 (char 1158)"
        # position of unexpected character after '"'
        unexp = int(re.findall(r'\(char (\d+)\)', str(e))[0])
        # position of unescaped '"' before that
        unesc = s.rfind(r'"', 0, unexp)
        s = s[:unesc] + r'\"' + s[unesc+1:]
        # position of correspondig closing '"' (+2 for inserted '\')
        closg = s.find(r'"', unesc + 2)
        s = s[:closg] + r'\"' + s[closg+1:]
print result
</snippet></ROW><ROW><id>18515887</id><snippet>"</snippet></ROW><ROW><id>18515887</id><snippet>"</snippet></ROW><ROW><id>18515887</id><snippet>"</snippet></ROW><ROW><id>18515887</id><snippet>"</snippet></ROW><ROW><id>18516161</id><snippet>from selenium import webdriver

browser = webdriver.Firefox()
#code to get you to the page
select_box = browser.find_element_by_name("countries") # if your select_box has a name.. why use xpath?..... this step could use either xpath or name, but name is sooo much easier.
options = [x for x in select_box.find_elements_by_tag_name("option")] #this part is cool, because it searches the elements contained inside of select_box and then adds them to the list options if they have the tag name "options"
for element in options:
    print element.get_attribute("value") # or append to list or whatever you want here
</snippet></ROW><ROW><id>18516161</id><snippet>-1
459
100
300
</snippet></ROW><ROW><id>18516296</id><snippet>b2 toolset=msvc-10.0 --with-python --user-config=user-config.jam --build-type=complete stage</snippet></ROW><ROW><id>18516296</id><snippet>C:\Boost\boost_1_54_0</snippet></ROW><ROW><id>18516296</id><snippet>boost_python-vc100-mt-gd-1_54.lib</snippet></ROW><ROW><id>18516389</id><snippet>//div/node()[not(self::strong and contains(text(), "Title") or preceding-sibling::strong[1][contains(text(), "Title")])]
</snippet></ROW><ROW><id>18516389</id><snippet>not(self::strong and contains(text(), "Title")
</snippet></ROW><ROW><id>18516389</id><snippet>preceding-sibling::strong[1][contains(text(), "Title")]
</snippet></ROW><ROW><id>18516843</id><snippet>RequestContext</snippet></ROW><ROW><id>18516843</id><snippet>def index(request):
    t = loader.get_template('reboot/index.html')
    servers = Server.objects.all()
    c = Context( {
      'servers': servers,
    })
    return HttpResponse(t.render(c))
</snippet></ROW><ROW><id>18516843</id><snippet>def index(request):
    servers = Server.objects.all()
    context = {
      'servers': servers,
    }
    return render_to_response('reboot/index.html', context, context_instance=RequestContext(request))
</snippet></ROW><ROW><id>18516843</id><snippet>render_to_response</snippet></ROW><ROW><id>18516843</id><snippet>RequestContext</snippet></ROW><ROW><id>18516843</id><snippet>django.contrib.auth.context_processors.auth</snippet></ROW><ROW><id>18516843</id><snippet>user</snippet></ROW><ROW><id>18516843</id><snippet>def index(request):
    t = loader.get_template('reboot/index.html')
    servers = Server.objects.all()
    c = RequestContext(request, {
      'servers': servers,
    })
    return HttpResponse(t.render(c))
</snippet></ROW><ROW><id>18516863</id><snippet>super</snippet></ROW><ROW><id>18516863</id><snippet>Put</snippet></ROW><ROW><id>18516863</id><snippet>super(Put, self)</snippet></ROW><ROW><id>18516863</id><snippet>ShortPut</snippet></ROW><ROW><id>18516863</id><snippet>super(ShortPut, self)</snippet></ROW><ROW><id>18516984</id><snippet>Foo</snippet></ROW><ROW><id>18516984</id><snippet>Bar</snippet></ROW><ROW><id>18516984</id><snippet>&gt;&gt;&gt; 10 &lt; ()
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
TypeError: unorderable types: int() &lt; tuple()
</snippet></ROW><ROW><id>18516984</id><snippet>set()</snippet></ROW><ROW><id>18516984</id><snippet>&gt;</snippet></ROW><ROW><id>18516984</id><snippet>__gt__</snippet></ROW><ROW><id>18516984</id><snippet>1 &lt; set()</snippet></ROW><ROW><id>18516984</id><snippet>int</snippet></ROW><ROW><id>18516984</id><snippet>__lt__</snippet></ROW><ROW><id>18516984</id><snippet>x &lt; y</snippet></ROW><ROW><id>18516984</id><snippet>y &gt; x</snippet></ROW><ROW><id>18516984</id><snippet>set.__gt__()</snippet></ROW><ROW><id>18516984</id><snippet>TypeError</snippet></ROW><ROW><id>18516984</id><snippet>set</snippet></ROW><ROW><id>18516984</id><snippet>&gt;&gt;&gt; 1 .__lt__(set())
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
AttributeError: 'int' object has no attribute '__lt__'
&gt;&gt;&gt; set().__gt__(1)
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
TypeError: can only compare to a set
</snippet></ROW><ROW><id>18516984</id><snippet>&gt;</snippet></ROW><ROW><id>18516984</id><snippet>set</snippet></ROW><ROW><id>18516984</id><snippet>PyTypeObject.tp_richcompare</snippet></ROW><ROW><id>18516984</id><snippet>__gt__</snippet></ROW><ROW><id>18516984</id><snippet>__gt__</snippet></ROW><ROW><id>18516984</id><snippet>tp_richcompare</snippet></ROW><ROW><id>18516984</id><snippet>.__lt__()</snippet></ROW><ROW><id>18516984</id><snippet>.__le__()</snippet></ROW><ROW><id>18516984</id><snippet>.__eq__()</snippet></ROW><ROW><id>18516984</id><snippet>. __ne__()</snippet></ROW><ROW><id>18516984</id><snippet>. __gt__()</snippet></ROW><ROW><id>18516984</id><snippet>. __ge__()</snippet></ROW><ROW><id>18516984</id><snippet>. __cmp__()</snippet></ROW><ROW><id>18516984</id><snippet>NotImplemented</snippet></ROW><ROW><id>18516984</id><snippet>NotImplemented</snippet></ROW><ROW><id>18516984</id><snippet>TypeError</snippet></ROW><ROW><id>18516984</id><snippet>&gt;&gt;&gt; class Foo():
...     def __lt__(self, other): return NotImplemented
... 
&gt;&gt;&gt; Foo() &lt; Foo()
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
TypeError: unorderable types: Foo() &lt; Foo()
</snippet></ROW><ROW><id>18516984</id><snippet>NotImplemented</snippet></ROW><ROW><id>18516984</id><snippet>default_3way_compare()</snippet></ROW><ROW><id>18516984</id><snippet>None</snippet></ROW><ROW><id>18516984</id><snippet>PyNumber_Check</snippet></ROW><ROW><id>18516984</id><snippet>v-&gt;ob_type-&gt;tp_name</snippet></ROW><ROW><id>18516984</id><snippet>w-&gt;ob_type-&gt;tp_name</snippet></ROW><ROW><id>18517089</id><snippet> def __init__(self):
    self.server = 'localhost'
    self.port = '27017'
    self.db = 'IngressoRapido'
    self.col = 'Shows'
</snippet></ROW><ROW><id>18517152</id><snippet>return</snippet></ROW><ROW><id>18517152</id><snippet>if x { return y } else { ... }</snippet></ROW><ROW><id>18517152</id><snippet>else</snippet></ROW><ROW><id>18517273</id><snippet>from PIL import Image</snippet></ROW><ROW><id>18517273</id><snippet>import Image</snippet></ROW><ROW><id>18517273</id><snippet>import Image</snippet></ROW><ROW><id>18517333</id><snippet>c++</snippet></ROW><ROW><id>18517333</id><snippet>import mad

mf = mad.MadFile("foo.mp3")
track_length_in_milliseconds = mf.total_time()
</snippet></ROW><ROW><id>18517333</id><snippet>audio = audioread.audio_open('/path/to/mp3')
print f.channels, f.samplerate, f.duration
</snippet></ROW><ROW><id>18517333</id><snippet>from mutagen.mp3 import MP3
audio = MP3("example.mp3")
print audio.info.length
</snippet></ROW><ROW><id>18517370</id><snippet>ipaddress</snippet></ROW><ROW><id>18517370</id><snippet>&gt;&gt;&gt; import ipaddress
&gt;&gt;&gt; ipaddress.ip_address('10.40.0.1') in ipaddress.ip_network('10.40.0.0/24')
True
&gt;&gt;&gt; ipaddress.ip_address('10.40.2.1') in ipaddress.ip_network('10.40.0.0/24')
False
</snippet></ROW><ROW><id>18517370</id><snippet>backport of ipaddress</snippet></ROW><ROW><id>18517370</id><snippet>ipaddr</snippet></ROW><ROW><id>18517370</id><snippet>&gt;&gt;&gt; import ipaddr
&gt;&gt;&gt; ipaddr.IPAddress('10.40.0.1') in ipaddr.IPNetwork('10.40.0.0/24')
True
&gt;&gt;&gt; ipaddr.IPAddress('10.40.2.1') in ipaddr.IPNetwork('10.40.0.0/24')
False
</snippet></ROW><ROW><id>18517426</id><snippet>str.replace()</snippet></ROW><ROW><id>18517426</id><snippet>sqlCmd.replace('\\', '\\\\') 
</snippet></ROW><ROW><id>18517426</id><snippet>sqlCmd = sqlCmd.replace('\\', '\\\\')
</snippet></ROW><ROW><id>18517426</id><snippet>__repr__()</snippet></ROW><ROW><id>18517426</id><snippet>__repr__()</snippet></ROW><ROW><id>18517499</id><snippet>app.mainloop()</snippet></ROW><ROW><id>18517499</id><snippet>main</snippet></ROW><ROW><id>18517499</id><snippet>app.button_press()</snippet></ROW><ROW><id>18517499</id><snippet>class CoreGUI(object):
    def __init__(self,parent):
        self.parent = parent
        self.InitUI()
        button = Button(self.parent, text="Start", command=self.main)
        button.grid(column=0, row=1, columnspan=2)

    def main(self):
        print('whatever')

    def InitUI(self):
        self.text_box = Text(self.parent, wrap='word', height = 11, width=50)
        self.text_box.grid(column=0, row=0, columnspan = 2, sticky='NSWE', padx=5, pady=5)
        sys.stdout = StdoutRedirector(self.text_box)


root = Tk()
gui = CoreGUI(root)
root.mainloop()
</snippet></ROW><ROW><id>18517700</id><snippet>object</snippet></ROW><ROW><id>18517700</id><snippet>class Rectangle(object):
</snippet></ROW><ROW><id>18517700</id><snippet>class ClassName(object1, object2, ...):
</snippet></ROW><ROW><id>18517700</id><snippet>ClassName</snippet></ROW><ROW><id>18517700</id><snippet>object1</snippet></ROW><ROW><id>18517700</id><snippet>object2</snippet></ROW><ROW><id>18517858</id><snippet>Pickle</snippet></ROW><ROW><id>18517858</id><snippet>__module__</snippet></ROW><ROW><id>18517858</id><snippet>__module__</snippet></ROW><ROW><id>18517858</id><snippet>Extension()</snippet></ROW><ROW><id>18517858</id><snippet>setup.py</snippet></ROW><ROW><id>18517858</id><snippet>Extension('reduce', ['reduce.pyx'])</snippet></ROW><ROW><id>18517858</id><snippet>__module__</snippet></ROW><ROW><id>18517858</id><snippet>reduce</snippet></ROW><ROW><id>18517858</id><snippet>bar/reduce</snippet></ROW><ROW><id>18517858</id><snippet>setup.py</snippet></ROW><ROW><id>18517858</id><snippet>from distutils.core import setup
from distutils.extension import Extension
from Cython.Distutils import build_ext

setup(
    cmdclass = {'build_ext': build_ext},
    ext_modules = [Extension('bar/reduce', ['reduce.pyx'])]
)
</snippet></ROW><ROW><id>18517922</id><snippet>next</snippet></ROW><ROW><id>18517922</id><snippet>[]</snippet></ROW><ROW><id>18517922</id><snippet>__getitem__</snippet></ROW><ROW><id>18517922</id><snippet>+=</snippet></ROW><ROW><id>18517922</id><snippet>__iadd__</snippet></ROW><ROW><id>18517922</id><snippet>np.dot</snippet></ROW><ROW><id>18517922</id><snippet>__getitem__</snippet></ROW><ROW><id>18517922</id><snippet>for i in range(m):
    delta3 = -(x[i,:]-a3[i,:])*a3[i,:]* (1 - a3[i,:])    
</snippet></ROW><ROW><id>18517922</id><snippet>delta3</snippet></ROW><ROW><id>18517922</id><snippet>i</snippet></ROW><ROW><id>18517922</id><snippet>delta3 = -(x-a3)*a3*(1-a3)
</snippet></ROW><ROW><id>18517922</id><snippet>for-loop</snippet></ROW><ROW><id>18517922</id><snippet>delta3</snippet></ROW><ROW><id>18517922</id><snippet>delta3</snippet></ROW><ROW><id>18517922</id><snippet>for-loop</snippet></ROW><ROW><id>18517922</id><snippet>i</snippet></ROW><ROW><id>18517922</id><snippet>sum2</snippet></ROW><ROW><id>18517922</id><snippet>sum2 = sparse.beta*(-float(sparse.rho)/rhoest + float(1.0 - sparse.rho) / (1.0 - rhoest) )
</snippet></ROW><ROW><id>18517922</id><snippet>alt</snippet></ROW><ROW><id>18517922</id><snippet>orig</snippet></ROW><ROW><id>18517922</id><snippet>In [52]: %timeit orig()
1 loops, best of 3: 495 ms per loop

In [53]: %timeit alt()
10 loops, best of 3: 72.6 ms per loop
</snippet></ROW><ROW><id>18517922</id><snippet>import numpy as np


class Bunch(object):
    """ http://code.activestate.com/recipes/52308 """
    def __init__(self, **kwds):
        self.__dict__.update(kwds)

m, n, p = 10 ** 4, 64, 25

sparse = Bunch(
    theta1=np.random.random((p, n)),
    theta2=np.random.random((n, p)),
    b1=np.random.random((p, 1)),
    b2=np.random.random((n, 1)),
)

x = np.random.random((m, n))
a3 = np.random.random((m, n))
a2 = np.random.random((m, p))
a1 = np.random.random((m, n))
sum2 = np.random.random((p, ))
sum2 = sum2[:, np.newaxis]

def orig():
    partial_j1 = np.zeros(sparse.theta1.shape)
    partial_j2 = np.zeros(sparse.theta2.shape)
    partial_b1 = np.zeros(sparse.b1.shape)
    partial_b2 = np.zeros(sparse.b2.shape)
    delta3t = (-(x - a3) * a3 * (1 - a3)).T
    for i in range(m):
        delta3 = delta3t[:, i:(i + 1)]
        sum1 = np.dot(sparse.theta2.T, delta3)
        delta2 = (sum1 + sum2) * a2[i:(i + 1), :].T * (1 - a2[i:(i + 1), :].T)
        partial_j1 += np.dot(delta2, a1[i:(i + 1), :])
        partial_j2 += np.dot(delta3, a2[i:(i + 1), :])
        partial_b1 += delta2
        partial_b2 += delta3
        # delta3: (64, 1)
        # sum1: (25, 1)
        # delta2: (25, 1)
        # a1[i:(i+1),:]: (1, 64)
        # partial_j1: (25, 64)
        # partial_j2: (64, 25)
        # partial_b1: (25, 1)
        # partial_b2: (64, 1)
        # a2[i:(i+1),:]: (1, 25)
    return partial_j1, partial_j2, partial_b1, partial_b2


def alt():
    delta3 = (-(x - a3) * a3 * (1 - a3)).T
    sum1 = np.dot(sparse.theta2.T, delta3)
    delta2 = (sum1 + sum2) * a2.T * (1 - a2.T)
    # delta3: (64, 10000)
    # sum1: (25, 10000)
    # delta2: (25, 10000)
    # a1: (10000, 64)
    # a2: (10000, 25)
    partial_j1 = np.dot(delta2, a1)
    partial_j2 = np.dot(delta3, a2)
    partial_b1 = delta2.sum(axis=1)
    partial_b2 = delta3.sum(axis=1)
    return partial_j1, partial_j2, partial_b1, partial_b2

answer = orig()
result = alt()
for a, r in zip(answer, result):
    try:
        assert np.allclose(np.squeeze(a), r)
    except AssertionError:
        print(a.shape)
        print(r.shape)
        raise
</snippet></ROW><ROW><id>18517922</id><snippet>np.dot(A, B)
</snippet></ROW><ROW><id>18517922</id><snippet>A.shape = (n, m)</snippet></ROW><ROW><id>18517922</id><snippet>B.shape = (m, p)</snippet></ROW><ROW><id>18517922</id><snippet>np.dot(A, B)</snippet></ROW><ROW><id>18517922</id><snippet>(n, p)</snippet></ROW><ROW><id>18517922</id><snippet>np.dot</snippet></ROW><ROW><id>18517922</id><snippet>x</snippet></ROW><ROW><id>18517922</id><snippet>xf</snippet></ROW><ROW><id>18517922</id><snippet>x</snippet></ROW><ROW><id>18517922</id><snippet>xf</snippet></ROW><ROW><id>18517922</id><snippet>y</snippet></ROW><ROW><id>18517922</id><snippet>yf</snippet></ROW><ROW><id>18517922</id><snippet>import numpy as np

m, n, p = 10 ** 4, 64, 25
x = np.random.random((n, m))
xf = np.asarray(x, order='F')

y = np.random.random((m, n))
yf = np.asarray(y, order='F')

assert np.allclose(x, xf)
assert np.allclose(y, yf)
assert np.allclose(np.dot(x, y), np.dot(xf, y))
assert np.allclose(np.dot(x, y), np.dot(xf, yf))
</snippet></ROW><ROW><id>18517922</id><snippet>%timeit</snippet></ROW><ROW><id>18517922</id><snippet>In [50]: %timeit np.dot(x, y)
100 loops, best of 3: 12.9 ms per loop

In [51]: %timeit np.dot(xf, y)
10 loops, best of 3: 27.7 ms per loop

In [56]: %timeit np.dot(x, yf)
10 loops, best of 3: 21.8 ms per loop

In [53]: %timeit np.dot(xf, yf)
10 loops, best of 3: 33.3 ms per loop
</snippet></ROW><ROW><id>18517922</id><snippet>time.time()</snippet></ROW><ROW><id>18517922</id><snippet>time.time</snippet></ROW><ROW><id>18517922</id><snippet>time.time</snippet></ROW><ROW><id>18517922</id><snippet>timeit</snippet></ROW><ROW><id>18518080</id><snippet>import cgi
form = cgi.FieldStorage()

try:
    test = form['name'].value
except KeyError:
    print('not found')
else:
    print(test)
</snippet></ROW><ROW><id>18518080</id><snippet>import os
print(os.environ["REQUEST_URI"])
</snippet></ROW><ROW><id>18518226</id><snippet>test.json</snippet></ROW><ROW><id>18518226</id><snippet>test.pickle</snippet></ROW><ROW><id>18518226</id><snippet>{
    "glossary": {
        "title": "example glossary",
        "GlossDiv": {
            "title": "S",
            "GlossList": {
                "GlossEntry": {
                    "ID": "SGML",
                    "SortAs": "SGML",
                    "GlossTerm": "Standard Generalized Markup Language",
                    "Acronym": "SGML",
                    "Abbrev": "ISO 8879:1986",
                    "GlossDef": {
                        "para": "A meta-markup language, used to create markup languages such as DocBook.",
                        "GlossSeeAlso": ["GML", "XML"]
                    },
                    "GlossSee": "markup"
                }
            }
        }
    }
}
</snippet></ROW><ROW><id>18518226</id><snippet>import timeit

import pickle
import cPickle

import json
import simplejson
import ujson
import yajl


def load_pickle(f):
    return pickle.load(f)


def load_cpickle(f):
    return cPickle.load(f)


def load_json(f):
    return json.load(f)


def load_simplejson(f):
    return simplejson.load(f)


def load_ujson(f):
    return ujson.load(f)


def load_yajl(f):
    return yajl.load(f)


print "pickle:"
print timeit.Timer('load_pickle(open("test.pickle"))', 'from __main__ import load_pickle').timeit()

print "cpickle:"
print timeit.Timer('load_cpickle(open("test.pickle"))', 'from __main__ import load_cpickle').timeit()

print "json:"
print timeit.Timer('load_json(open("test.json"))', 'from __main__ import load_json').timeit()

print "simplejson:"
print timeit.Timer('load_simplejson(open("test.json"))', 'from __main__ import load_simplejson').timeit()

print "ujson:"
print timeit.Timer('load_ujson(open("test.json"))', 'from __main__ import load_ujson').timeit()

print "yajl:"
print timeit.Timer('load_yajl(open("test.json"))', 'from __main__ import load_yajl').timeit()
</snippet></ROW><ROW><id>18518226</id><snippet>pickle:
107.936687946

cpickle:
28.4231381416

json:
31.6450419426

simplejson:
20.5853149891

ujson:
16.9352178574

yajl:
18.9763481617
</snippet></ROW><ROW><id>18518226</id><snippet>pickle</snippet></ROW><ROW><id>18518226</id><snippet>cPickle</snippet></ROW><ROW><id>18518226</id><snippet>ujson</snippet></ROW><ROW><id>18518226</id><snippet>json</snippet></ROW><ROW><id>18518226</id><snippet>simplejson</snippet></ROW><ROW><id>18518420</id><snippet>ref_files = map(open, reflist)
</snippet></ROW><ROW><id>18518420</id><snippet>open()</snippet></ROW><ROW><id>18518420</id><snippet>ref_files = [open(filename, ...) for filename in reflist]
</snippet></ROW><ROW><id>18518470</id><snippet>'\n'</snippet></ROW><ROW><id>18518470</id><snippet> '\n    '</snippet></ROW><ROW><id>18518470</id><snippet>string = string.replace('\n', '\n    ')
</snippet></ROW><ROW><id>18518480</id><snippet>copy</snippet></ROW><ROW><id>18518480</id><snippet>import copy

Class MyClass():
    def __init__(self):
        self.val = 5

a = MyClass()
b = copy.deepcopy(a)
</snippet></ROW><ROW><id>18518561</id><snippet>&gt;&gt;&gt; bin_avg[index] = np.average(items_in_bin, weights=my_weights)
</snippet></ROW><ROW><id>18518805</id><snippet>&gt;&gt;&gt; a=[100,200,300]

&gt;&gt;&gt; np.char.mod('%d', a)
array(['100', '200', '300'],
      dtype='|S3')
</snippet></ROW><ROW><id>18518805</id><snippet>&gt;&gt;&gt; a=[100,200,3005]
&gt;&gt;&gt; np.char.mod('%d', a)
array(['100', '200', '3005'],
      dtype='|S4')
</snippet></ROW><ROW><id>18518805</id><snippet>dtype="S.."</snippet></ROW><ROW><id>18518805</id><snippet>np.array(map(str,a))</snippet></ROW><ROW><id>18518805</id><snippet>&gt;&gt;&gt; a
[1234.5, 123.4, 12345]

&gt;&gt;&gt; np.char.mod('%s',a)
array(['1234.5', '123.4', '12345.0'],
      dtype='|S7')

&gt;&gt;&gt; np.char.mod('%f',a)
array(['1234.500000', '123.400000', '12345.000000'],
      dtype='|S12')

&gt;&gt;&gt; np.char.mod('%d',a) #Note the truncation of decimals here.
array(['1234', '123', '12345'],
      dtype='|S5')

&gt;&gt;&gt; np.char.mod('%s.stuff',a)
array(['1234.5.stuff', '123.4.stuff', '12345.0.stuff'],
      dtype='|S13')
</snippet></ROW><ROW><id>18518959</id><snippet>and_()</snippet></ROW><ROW><id>18518959</id><snippet>join(
    sq,
    and_(p1.Name==sq.c.Name,
    p1.Arch==sq.c.Arch,
    d1.repo==sq.c.repo,
    p1.Date==sq.c.Date)).\
</snippet></ROW><ROW><id>18519242</id><snippet>big_string = ''.join([string1, string2, ..., stringN])
</snippet></ROW><ROW><id>18519287</id><snippet>access_type=offline</snippet></ROW><ROW><id>18519287</id><snippet>approval_prompt=force</snippet></ROW><ROW><id>18519416</id><snippet>route1 = min(a, b, c)
</snippet></ROW><ROW><id>18519416</id><snippet>route2 = min(d, e)
</snippet></ROW><ROW><id>18519416</id><snippet>route_best = max(route1, route2)
</snippet></ROW><ROW><id>18519416</id><snippet>print(route_best)
</snippet></ROW><ROW><id>18519460</id><snippet>xrange</snippet></ROW><ROW><id>18519460</id><snippet>x=pool.map(f,((i,j) for i in range(10000) for j in range(10000)))
</snippet></ROW><ROW><id>18519460</id><snippet>map</snippet></ROW><ROW><id>18519460</id><snippet>pool.map</snippet></ROW><ROW><id>18519460</id><snippet>pool.imap</snippet></ROW><ROW><id>18519460</id><snippet>imap</snippet></ROW><ROW><id>18519460</id><snippet>1</snippet></ROW><ROW><id>18519460</id><snippet>imap</snippet></ROW><ROW><id>18519460</id><snippet>imap_unordered</snippet></ROW><ROW><id>18519460</id><snippet>args = ((i, j) for i in range(10000) for j in range(10000))
def indexed_f(index, (i, j)):
    return index, f(i, j)
results = pool.imap_unordered(indexed_f, enumerate(args))
</snippet></ROW><ROW><id>18519460</id><snippet>f(i, j)</snippet></ROW><ROW><id>18519460</id><snippet>for i in range(10000):
    for j in range(10000):
        map.apply_async(f, (i,j))
</snippet></ROW><ROW><id>18519460</id><snippet>imap_unordered</snippet></ROW><ROW><id>18519460</id><snippet>def consume(iterator):
    deque(iterator, max_len=0)
x=pool.imap_unordered(f,((i,j) for i in range(10000) for j in range(10000)))
consume(x)
</snippet></ROW><ROW><id>18519551</id><snippet>ps aux | grep [c]ron</snippet></ROW><ROW><id>18519551</id><snippet>MAILTO=&lt;email address&gt;</snippet></ROW><ROW><id>18519551</id><snippet>/opt/python2.7/bin/python</snippet></ROW><ROW><id>18519551</id><snippet>python</snippet></ROW><ROW><id>18519551</id><snippet>echo FOOBAR</snippet></ROW><ROW><id>18519551</id><snippet>ls -l /homeec2-user/code1.py</snippet></ROW><ROW><id>18519551</id><snippet>/home/ec2-user/code1.py</snippet></ROW><ROW><id>18519551</id><snippet>crontab -e</snippet></ROW><ROW><id>18519551</id><snippet>crontab -l | cat -A</snippet></ROW><ROW><id>18519751</id><snippet>2</snippet></ROW><ROW><id>18519751</id><snippet>a/2</snippet></ROW><ROW><id>18519751</id><snippet>a</snippet></ROW><ROW><id>18519751</id><snippet>2</snippet></ROW><ROW><id>18519751</id><snippet>isprime</snippet></ROW><ROW><id>18519751</id><snippet>2</snippet></ROW><ROW><id>18519751</id><snippet>isprime</snippet></ROW><ROW><id>18519751</id><snippet>b/2</snippet></ROW><ROW><id>18519751</id><snippet>sqrt(b)</snippet></ROW><ROW><id>18519751</id><snippet>O(n)</snippet></ROW><ROW><id>18519751</id><snippet>O(sqrt(n))</snippet></ROW><ROW><id>18519772</id><snippet>import array
f = ''.join(frames)
nums = array.array('h', f)
left = nums[1::2]
right = nums[0::2]
</snippet></ROW><ROW><id>18519772</id><snippet>CHUNK</snippet></ROW><ROW><id>18520024</id><snippet>datetime</snippet></ROW><ROW><id>18520024</id><snippet>datetime</snippet></ROW><ROW><id>18520024</id><snippet>timedelta</snippet></ROW><ROW><id>18520024</id><snippet>days</snippet></ROW><ROW><id>18520024</id><snippet> &gt;&gt;&gt; from datetime import datetime
 &gt;&gt;&gt; (datetime.now() - datetime.strptime('2013-07-31', '%Y-%m-%d')).days
 29
</snippet></ROW><ROW><id>18520107</id><snippet>from mongokit import *
class Test(Document):
    use_schemaless = True
    structure = {'title': unicode, 'body': unicode}
    required_fields = [ 'title', 'body' ]
</snippet></ROW><ROW><id>18520107</id><snippet>title</snippet></ROW><ROW><id>18520107</id><snippet>body</snippet></ROW><ROW><id>18520125</id><snippet>from base64 import b64encode
import mechanize

url = 'http://192.168.3.5/table.js'
username = 'admin'
password = 'password'

# I have had to add a carriage return ('%s:%s\n'), but
# you may not have to.
b64login = b64encode('%s:%s' % (username, password))

br = mechanize.Browser()

# # I needed to change to Mozilla for mine, but most do not
# br.addheaders= [('User-agent', 'Mozilla/5.0')]

br.addheaders.append( 
  ('Authorization', 'Basic %s' % b64login )
)

br.open(url)
r = br.response()
data = r.read()

print data
</snippet></ROW><ROW><id>18520125</id><snippet>import urllib
 import re
import mechanize

br = mechanize.Browser()
response = br.open("http://USERNAME:PASSWORD@ab/cabs");
print response.geturl()
print response.read(
</snippet></ROW><ROW><id>18520225</id><snippet>{% if company.name == contact.company %}
</snippet></ROW><ROW><id>18520225</id><snippet>{% if company == contact.company %}
</snippet></ROW><ROW><id>18520226</id><snippet>def symmetric_enc(message, key):
    return [ord(char) ^ key for char in message]

def symmetric_dec(cipher, key):
    return ''.join(num ^ key for num in cipher)

def asymmetric_enc(message, pubkey) :
    msg = [ord(char) for char in message]
    e,n = pubkey
    c = [m**e%n for m in msg]
    return c

def asymmetric_dec(cipher, prikey) :
    d,n = prikey
    msg = [c**d%n for c in cipher]
    msg = [chr(m) for m in msg]
    message = ''.join(msg)
    return message

def enc(message, pubkey):
    session_key = random.randrange(1, 256)
    return (asymmetric_enc(session_key, pubkey), 
            symmetric_enc(message, session_key))

def dec(message, prikey):
    session_key, body = message
    session_key = asymmetric_dec(session_key, prikey)
    return symmetric_dec(body, session_key)
</snippet></ROW><ROW><id>18520624</id><snippet>def bdh(sec_list, fld_list, start_date,
    end_date=dt.date.today().strftime('%Y%m%d'), periodicity='DAILY',
    verbose=False, **kwargs):
    """ Sends a historical request to Bloomberg.
    Parameters:
        sec_list: tuple or list of valid Bloomberg tickers.
        fld_list: tuple or list of valid Bloomberg fields.
        start_date: string formatted YYYYMMDD.
        end_date: string formatted YYYYMMDD (default = Today()).
        periodicity: string (default: DAILY).
        verbose: boolean to log Bloomberg response messages (default: False)
        **kwargs: any valid parameter.
    Returns a panda.Panel object.
    """
</snippet></ROW><ROW><id>18520685</id><snippet>._replace()</snippet></ROW><ROW><id>18520685</id><snippet>._replace()</snippet></ROW><ROW><id>18520685</id><snippet>record = record._replace(**field_to_change)                                         
</snippet></ROW><ROW><id>18520738</id><snippet>bool()</snippet></ROW><ROW><id>18520738</id><snippet>True</snippet></ROW><ROW><id>18520738</id><snippet>False</snippet></ROW><ROW><id>18520738</id><snippet>&gt;&gt;&gt; bool('abc')
True
</snippet></ROW><ROW><id>18520738</id><snippet>== True</snippet></ROW><ROW><id>18520738</id><snippet>== False</snippet></ROW><ROW><id>18520738</id><snippet>if 'abc':
    pass

while 'def':
    pass

foo if 'abc' else bar
</snippet></ROW><ROW><id>18520738</id><snippet>False</snippet></ROW><ROW><id>18520738</id><snippet>None</snippet></ROW><ROW><id>18520738</id><snippet>bool()</snippet></ROW><ROW><id>18520738</id><snippet>__len__()</snippet></ROW><ROW><id>18520738</id><snippet>0</snippet></ROW><ROW><id>18520738</id><snippet>__nonzero__()</snippet></ROW><ROW><id>18520738</id><snippet>False</snippet></ROW><ROW><id>18520738</id><snippet>__bool__</snippet></ROW><ROW><id>18520859</id><snippet>sum(&lt;array&gt;)</snippet></ROW><ROW><id>18520859</id><snippet>&lt;numpy array&gt;.sum()</snippet></ROW><ROW><id>18520859</id><snippet>sum(&lt;array&gt;)</snippet></ROW><ROW><id>18520859</id><snippet>numpy.sum(&lt;array&gt;)</snippet></ROW><ROW><id>18521075</id><snippet>def callback():
    print self.symbol.get()
</snippet></ROW><ROW><id>18521079</id><snippet>r'^(")?((?(1)[^"\\]*(?:\\.[^"\\]*)*|@))"?=([dh"].+$)'
</snippet></ROW><ROW><id>18521079</id><snippet>(1)</snippet></ROW><ROW><id>18521079</id><snippet>@</snippet></ROW><ROW><id>18521079</id><snippet>=</snippet></ROW><ROW><id>18521079</id><snippet>@"</snippet></ROW><ROW><id>18521079</id><snippet>""</snippet></ROW><ROW><id>18521079</id><snippet>^
(")?
(
  (?(1)
    [^"\\]*(?:\\.[^"\\]*)*
    |
    @
  )
)
"?
=
([dh"].+$)
</snippet></ROW><ROW><id>18521081</id><snippet>w = ax.get_window_extent(None).width
h = ax.get_window_extent(None).height
</snippet></ROW><ROW><id>18521081</id><snippet>ax.figure.canvas.renderer</snippet></ROW><ROW><id>18521081</id><snippet>None</snippet></ROW><ROW><id>18521081</id><snippet>(xmax-xmin)/(ymax-ymin)</snippet></ROW><ROW><id>18521301</id><snippet>defaultdict</snippet></ROW><ROW><id>18521301</id><snippet>FooDict</snippet></ROW><ROW><id>18521301</id><snippet>&gt;&gt;&gt; f = FooDict()
&gt;&gt;&gt; f['a'] = 1
&gt;&gt;&gt; f['a'] = 2
&gt;&gt;&gt; f['a']
[1, 2]
</snippet></ROW><ROW><id>18521301</id><snippet>import collections

class AppendDict(collections.MutableMapping):
    def __init__(self, container=list, append=None, pairs=()):
        self.container = collections.defaultdict(container)
        self.append = append or list.append
        for key, value in pairs:
            self[key] = value

    def __setitem__(self, key, value):
        self.append(self.container[key], value)

    def __getitem__(self, key): return self.container[key]
    def __delitem__(self, key): del self.container[key]
    def __iter__(self): return iter(self.container)
    def __len__(self): return len(self.container)
</snippet></ROW><ROW><id>18521487</id><snippet>os.getcwd()</snippet></ROW><ROW><id>18521487</id><snippet>import os
import threading

class child(threading.Thread):
    def __init__(self, initpath ):
        # initpath could be a string fed to many initializations 
        os.chdir( initpath )

    def run(self ):
        print os.getcwd()

child().start() # prints "/username/path"
custom_path_child = child(
                            initpath = '/home/username/somefolder/'
                    ).start() # prints "/home/username/somefolder/"


os.chdir('/') # The process is changing directory

child().start() # prints "/"
child().start() # prints "/"
</snippet></ROW><ROW><id>18521488</id><snippet>onclick</snippet></ROW><ROW><id>18521488</id><snippet>a</snippet></ROW><ROW><id>18521488</id><snippet>http://https:</snippet></ROW><ROW><id>18521488</id><snippet>http://https://api.login.yahoo.com/oauth/v2/request_auth?oauth_token=
</snippet></ROW><ROW><id>18521488</id><snippet>onclick()</snippet></ROW><ROW><id>18521488</id><snippet>href</snippet></ROW><ROW><id>18521539</id><snippet>pkg/a.py</snippet></ROW><ROW><id>18521539</id><snippet>import b
</snippet></ROW><ROW><id>18521539</id><snippet>sys.path</snippet></ROW><ROW><id>18521539</id><snippet>b.py</snippet></ROW><ROW><id>18521539</id><snippet>from . import b
</snippet></ROW><ROW><id>18521539</id><snippet>pkg</snippet></ROW><ROW><id>18521539</id><snippet>b.py</snippet></ROW><ROW><id>18521539</id><snippet>import pkg.b
from pkg import b
</snippet></ROW><ROW><id>18521539</id><snippet>pkg</snippet></ROW><ROW><id>18521539</id><snippet>sys.path</snippet></ROW><ROW><id>18521539</id><snippet>b</snippet></ROW><ROW><id>18521539</id><snippet>pkg.b</snippet></ROW><ROW><id>18521539</id><snippet>b.MyClass(3) != pkg.b.MyClass(3)</snippet></ROW><ROW><id>18521539</id><snippet>__init__.py</snippet></ROW><ROW><id>18521539</id><snippet>src</snippet></ROW><ROW><id>18521539</id><snippet>src</snippet></ROW><ROW><id>18521539</id><snippet>b</snippet></ROW><ROW><id>18521539</id><snippet>src.pkg.b</snippet></ROW><ROW><id>18521539</id><snippet>pkg.b</snippet></ROW><ROW><id>18521539</id><snippet>src</snippet></ROW><ROW><id>18521539</id><snippet>sys.path</snippet></ROW><ROW><id>18521539</id><snippet>src</snippet></ROW><ROW><id>18521591</id><snippet>x</snippet></ROW><ROW><id>18521591</id><snippet>&gt;&gt;&gt; def inc(xLocal):
...     xLocal += 1
...     return xLocal
... 
&gt;&gt;&gt; x = 4
&gt;&gt;&gt; inc(x)
5
&gt;&gt;&gt; x
4
</snippet></ROW><ROW><id>18521591</id><snippet>x = 1
for row in arcpy.SearchCursor(fc):              

    if not row.INCLUSION_TYPE or len(row.TYPE.strip()) == 0:
        x = errorPrinting(x) # &lt;=== here
        print x

    elif len(row.TYPE) not in range(2,5):
        x = errorPrinting(x) # &lt;=== here
        print x

    elif row.INCLUSION_TYPE.upper() not in [y.upper() for y in TableList]:
        x = errorPrinting(x) # &lt;=== here
        print x
</snippet></ROW><ROW><id>18521591</id><snippet>&gt;&gt;&gt; x = 4
&gt;&gt;&gt; x = inc(x)
&gt;&gt;&gt; x
5
</snippet></ROW><ROW><id>18521591</id><snippet>&gt;&gt;&gt; def incList(xList):
...     for i in range(len(xList)):
...         xList[i] += 1
... 
&gt;&gt;&gt; xList
[1]
&gt;&gt;&gt; incList(xList)
&gt;&gt;&gt; xList
[2]
</snippet></ROW><ROW><id>18521591</id><snippet>for i in xList:
    i += 1
</snippet></ROW><ROW><id>18521655</id><snippet>self.connection = httplib.HTTPSConnection("graph.facebook.com", timeout=2)</snippet></ROW><ROW><id>18521655</id><snippet>self.connection = httplib.HTTPSConnection("graph.facebook.com", timeout=2.0)</snippet></ROW><ROW><id>18521927</id><snippet>str.splitlines()</snippet></ROW><ROW><id>18521927</id><snippet>for y, line in enumerate(ascii_art.splitlines(), 2):
    w.addstr(y, 2, line)
</snippet></ROW><ROW><id>18521927</id><snippet>enumerate()</snippet></ROW><ROW><id>18521927</id><snippet>y</snippet></ROW><ROW><id>18522161</id><snippet>hp_history = [10]

def initial_health():
    return hp_history[0]

def cur_health():
    return hp_history[-1]

def affect_health(delta):
    hp_history.append(cur_health() + delta)
    return cur_health()
</snippet></ROW><ROW><id>18522161</id><snippet>&gt;&gt;&gt; cur_health()
10
&gt;&gt;&gt; affect_health(20)
30
&gt;&gt;&gt; affect_health(-5)
25
&gt;&gt;&gt; affect_health(17)
42
&gt;&gt;&gt; cur_health()
42
&gt;&gt;&gt; print hp_history
[10, 30, 25, 42]
</snippet></ROW><ROW><id>18522254</id><snippet>import unicodedata

unicodedata.normalize('NFKD', title).encode('ascii','ignore')
</snippet></ROW><ROW><id>18522254</id><snippet># If row references a unicode string
b.create_from_csv_row(row.encode('ascii', 'ignore'))
</snippet></ROW><ROW><id>18522281</id><snippet>&gt;&gt;&gt; import numpy as np
&gt;&gt;&gt; m = np.array([[1,2,3],[4,5,6],[7,8,9]])
&gt;&gt;&gt; c = np.array([0,1,2])
&gt;&gt;&gt; m * c
array([[ 0,  2,  6],
       [ 0,  5, 12],
       [ 0,  8, 18]])
</snippet></ROW><ROW><id>18522281</id><snippet>&gt;&gt;&gt; m * c[:, np.newaxis]
array([[ 0,  0,  0],
       [ 4,  5,  6],
       [14, 16, 18]])
</snippet></ROW><ROW><id>18522281</id><snippet>&gt;&gt;&gt; (m.T * c).T
array([[ 0,  0,  0],
       [ 4,  5,  6],
       [14, 16, 18]])
</snippet></ROW><ROW><id>18522376</id><snippet>nt_search</snippet></ROW><ROW><id>18522376</id><snippet>&gt;&gt;&gt; from Bio import SeqUtils
&gt;&gt;&gt; pat = "ATNTTRTCNGGHGCN"
&gt;&gt;&gt; SeqUtils.nt_search("CCCCCCCATCTTGTCAGGCGCTCCCCCC", pat)
['AT[GATC]TT[AG]TC[GATC]GG[ACT]GC[GATC]', 7]
</snippet></ROW><ROW><id>18522418</id><snippet>import os

def read_file(filename):
    #get the directory of the current running script. "__file__" is its full path
    path, fl = os.path.split(os.path.realpath(__file__))
    #use path to create the fully classified path to your data
    full_path = os.path.join(path, filename)
    with open(full_path, "r") as file:
       #etc
</snippet></ROW><ROW><id>18522837</id><snippet>from werkzeug.wsgi import DispatcherMiddleware
from frontend_app import application as frontend
from backend_app import application as backend

application = DispatcherMiddleware(frontend, {
    '/backend':     backend
})
</snippet></ROW><ROW><id>18522837</id><snippet>url_for()</snippet></ROW><ROW><id>18522837</id><snippet># Be careful about recursive imports here
from . import app
from .extention import mongo

@sched.interval_schedule(minutes=1)
def long_running_queries():
    with app.app_context():
        mongo.db.command("aggregate", "collection", pipeline = "some query" )
</snippet></ROW><ROW><id>18522837</id><snippet>with app.app_context()</snippet></ROW><ROW><id>18522852</id><snippet>**D</snippet></ROW><ROW><id>18522852</id><snippet>D</snippet></ROW><ROW><id>18522852</id><snippet>{say}</snippet></ROW><ROW><id>18522852</id><snippet>5</snippet></ROW><ROW><id>18522852</id><snippet>{get}</snippet></ROW><ROW><id>18522852</id><snippet>shrubbery</snippet></ROW><ROW><id>18522852</id><snippet>format</snippet></ROW><ROW><id>18522885</id><snippet>In [3]: df = pd.DataFrame([[1,2],[1,3],[1,4]],columns='a b'.split())

In [4]: df.groupby('a').count()
Out[4]:
   a  b
a
1  3  3
</snippet></ROW><ROW><id>18522885</id><snippet>squeeze=True</snippet></ROW><ROW><id>18522885</id><snippet>In [5]: df.groupby('a', squeeze=True).count()
Out[5]:
a
1  a    3
   b    3
Name: 1, dtype: int64
</snippet></ROW><ROW><id>18522885</id><snippet>In [3]: df.groupby('a').count().unstack()
Out[3]:
   a  b
a
1  3  3
</snippet></ROW><ROW><id>18522896</id><snippet>String s = "hello ";
s = s + 4;
</snippet></ROW><ROW><id>18522896</id><snippet>4</snippet></ROW><ROW><id>18522896</id><snippet>+</snippet></ROW><ROW><id>18522896</id><snippet>4</snippet></ROW><ROW><id>18522896</id><snippet>str</snippet></ROW><ROW><id>18522931</id><snippet>CacheValue</snippet></ROW><ROW><id>18522964</id><snippet>list-table</snippet></ROW><ROW><id>18522964</id><snippet>.. list-table:: Example table
   :header-rows: 1

   * - First header
     - Second header
     - Third header
   * - Some text
     - Some text
     - A list:
         * foo
         * bar
         * baz
   * - Second row
     - More cells
     - etc.
   * - ...
     - ...
     - ...
</snippet></ROW><ROW><id>18523082</id><snippet>range(10, 10, 10)</snippet></ROW><ROW><id>18523082</id><snippet>range</snippet></ROW><ROW><id>18523082</id><snippet>list</snippet></ROW><ROW><id>18523082</id><snippet>start</snippet></ROW><ROW><id>18523082</id><snippet>stop</snippet></ROW><ROW><id>18523082</id><snippet>list</snippet></ROW><ROW><id>18523082</id><snippet>In [15]: range(10, 10, 10)
Out[15]: []
</snippet></ROW><ROW><id>18523266</id><snippet>u = unique(label)
new_coord = empty((len(u), 4))

i = 0
for j in u:
    rects = compress(label == j, coord, 0)

    mn = rects.min(0)
    mx = rects.max(0)

    new_coord[i] = (mn[0], mx[1], mx[2], mn[3])

    i += 1

print new_coord
</snippet></ROW><ROW><id>18523266</id><snippet>label</snippet></ROW><ROW><id>18523266</id><snippet>coord</snippet></ROW><ROW><id>18523266</id><snippet>new_coord</snippet></ROW><ROW><id>18523266</id><snippet>[[ 387.  287.  399.  267.]
 [ 420.  143.  430.  134.]
 [ 370.   31.  411.   15.]
 [  75.  318.  102.  295.]
 [ 246.  122.  316.   73.]
 [ 556.  333.  568.  308.]
 [  57.  199.   99.  180.]]
</snippet></ROW><ROW><id>18523342</id><snippet>scipy.spatial.distance</snippet></ROW><ROW><id>18523342</id><snippet>In [26]: sklearn.metrics.pairwise.pairwise_distance_functions
Out[26]:
{'cityblock': &lt;function sklearn.metrics.pairwise.manhattan_distances&gt;,
 'euclidean': &lt;function sklearn.metrics.pairwise.euclidean_distances&gt;,
 'l1': &lt;function sklearn.metrics.pairwise.manhattan_distances&gt;,
 'l2': &lt;function sklearn.metrics.pairwise.euclidean_distances&gt;,
 'manhattan': &lt;function sklearn.metrics.pairwise.manhattan_distances&gt;}
</snippet></ROW><ROW><id>18523342</id><snippet>metric</snippet></ROW><ROW><id>18523342</id><snippet>callable</snippet></ROW><ROW><id>18523342</id><snippet>sklearn.metrics.pairwise.check_pairwise_arrays</snippet></ROW><ROW><id>18523342</id><snippet>scipy.spatial.distance.pdist</snippet></ROW><ROW><id>18523342</id><snippet>pairwise_distances</snippet></ROW><ROW><id>18523342</id><snippet>pdist</snippet></ROW><ROW><id>18523342</id><snippet>pairwise_distances</snippet></ROW><ROW><id>18523528</id><snippet>i</snippet></ROW><ROW><id>18523528</id><snippet>0</snippet></ROW><ROW><id>18523528</id><snippet>while</snippet></ROW><ROW><id>18523528</id><snippet>i</snippet></ROW><ROW><id>18523528</id><snippet>&gt;&gt;&gt; list1 = [0,0,0,0,0,1,2]
&gt;&gt;&gt; count = 0
&gt;&gt;&gt; for item in list1:
...     if item == 0:
...         count = count + 1
...     else:
...         break
... 
&gt;&gt;&gt; print count
5
</snippet></ROW><ROW><id>18523528</id><snippet>&gt;&gt;&gt; list1 = [0,0,0,0,0,1,2]
&gt;&gt;&gt; count = 0
&gt;&gt;&gt; for item in list1:
...     if item != 0: break
...     count = count + 1
... 
&gt;&gt;&gt; print count
5
</snippet></ROW><ROW><id>18523551</id><snippet>#%%</snippet></ROW><ROW><id>18523553</id><snippet>obmalloc.c</snippet></ROW><ROW><id>18523553</id><snippet>    Object-specific allocators
    _____   ______   ______       ________
   [ int ] [ dict ] [ list ] ... [ string ]       Python core         |
+3 | &lt;----- Object-specific memory -----&gt; | &lt;-- Non-object memory --&gt; |
    _______________________________       |                           |
   [   Python`s object allocator   ]      |                           |
+2 | ####### Object memory ####### | &lt;------ Internal buffers ------&gt; |
    ______________________________________________________________    |
   [          Python`s raw memory allocator (PyMem_ API)          ]   |
+1 | &lt;----- Python memory (under PyMem manager`s control) ------&gt; |   |
    __________________________________________________________________
   [    Underlying general-purpose allocator (ex: C library malloc)   ]
 0 | &lt;------ Virtual memory allocated for the python process -------&gt; |

   =========================================================================
    _______________________________________________________________________
   [                OS-specific Virtual Memory Manager (VMM)               ]
-1 | &lt;--- Kernel dynamic storage allocation &amp; management (page-based) ---&gt; |
    __________________________________   __________________________________
   [                                  ] [                                  ]
-2 | &lt;-- Physical memory: ROM/RAM --&gt; | | &lt;-- Secondary storage (swap) --&gt; |
</snippet></ROW><ROW><id>18523553</id><snippet>malloc</snippet></ROW><ROW><id>18523553</id><snippet>malloc</snippet></ROW><ROW><id>18523553</id><snippet>mmap</snippet></ROW><ROW><id>18523553</id><snippet>VirtualAlloc</snippet></ROW><ROW><id>18523553</id><snippet>malloc</snippet></ROW><ROW><id>18523553</id><snippet>malloc</snippet></ROW><ROW><id>18523553</id><snippet>int</snippet></ROW><ROW><id>18523553</id><snippet>int</snippet></ROW><ROW><id>18523553</id><snippet>malloc</snippet></ROW><ROW><id>18523553</id><snippet>int</snippet></ROW><ROW><id>18523553</id><snippet>python3.3</snippet></ROW><ROW><id>18523553</id><snippet>gc</snippet></ROW><ROW><id>18523553</id><snippet>listobject.c</snippet></ROW><ROW><id>18523553</id><snippet>PyList_New</snippet></ROW><ROW><id>18523553</id><snippet>list_resize</snippet></ROW><ROW><id>18523553</id><snippet>list.append</snippet></ROW><ROW><id>18523553</id><snippet>sorted</snippet></ROW><ROW><id>18523688</id><snippet>itertools</snippet></ROW><ROW><id>18523688</id><snippet>[1,1,1]</snippet></ROW><ROW><id>18523688</id><snippet>[1,5,6]</snippet></ROW><ROW><id>18524166</id><snippet>&gt;&gt; df = pd.DataFrame([[1, 1, 0], [1, 0, 0]], columns=['X', 'Y', 'Z'])
     X   Y   Z
0    1   1   0
1    1   0   0

&gt;&gt;&gt; df.apply(lambda x: np.sqrt(x.dot(x)), axis=1)
0    1.414214
1    1.000000
dtype: float64
</snippet></ROW><ROW><id>18524174</id><snippet>except</snippet></ROW><ROW><id>18524174</id><snippet>&gt;&gt;&gt; try:
...     raise Exception('foo')
... except Exception, ex:
...     print ex
...     print type(ex)
...
foo
&lt;type 'exceptions.Exception'&gt;
</snippet></ROW><ROW><id>18524174</id><snippet>as</snippet></ROW><ROW><id>18524174</id><snippet>&gt;&gt;&gt; try:
...     raise Exception('foo')
... except Exception as ex:
...     print ex
...     print type(ex)
...
foo
&lt;type 'exceptions.Exception'&gt;
</snippet></ROW><ROW><id>18524289</id><snippet>datetime.strptime()</snippet></ROW><ROW><id>18524289</id><snippet>datetime</snippet></ROW><ROW><id>18524289</id><snippet>time()</snippet></ROW><ROW><id>18524289</id><snippet>time</snippet></ROW><ROW><id>18524384</id><snippet>awk '{ print &gt;&gt; "artists_"toupper(substr($1, 1, 1))".txt" }' &lt; songs.txt
</snippet></ROW><ROW><id>18524551</id><snippet>showMaximized()</snippet></ROW><ROW><id>18524551</id><snippet>QMainWindow</snippet></ROW><ROW><id>18524551</id><snippet>showFullScreen()</snippet></ROW><ROW><id>18524551</id><snippet>QMainWindow</snippet></ROW><ROW><id>18524659</id><snippet>L = [int("".join([str(y) for y in x])) for x in L]
</snippet></ROW><ROW><id>18524659</id><snippet>A == sorted(A)</snippet></ROW><ROW><id>18524695</id><snippet>def removeNonAlpha(i,j):
    indexI = 0
    indexJ = 0
    while indexJ &lt; len(j):
        if not j[indexJ].isalnum():
            j[indexJ] = i[indexI]
            indexI += 1
        indexJ += 1
    return j

&gt;&gt;&gt;i=["a","b", "c"]
&gt;&gt;&gt;j=["abc","(3)","ab &amp; ac", "(1,4)","xyz"]
&gt;&gt;&gt;removeNonAlpha(i,j)
['abc', 'a', 'b', 'c', 'xyz']
</snippet></ROW><ROW><id>18524695</id><snippet>def removeNonAlpha(i,j):
    indexI = 0
    indexJ = 0
    while indexJ &lt; len(j):
        if not j[indexJ].replace('&amp;', '').replace(' ', '').isalnum():
            j[indexJ] = i[indexI]
            indexI += 1
        indexJ += 1
    return j

&gt;&gt;&gt;i=["a","b"]
&gt;&gt;&gt;j=["abc","(3)","ab &amp; ac", "(1,4)","xyz"]
&gt;&gt;&gt;removeNonAlpha(i,j)
['abc', 'a', 'ab &amp; ac', 'b', 'xyz']
</snippet></ROW><ROW><id>18524933</id><snippet>accept</snippet></ROW><ROW><id>18524933</id><snippet>print "Client disconnected, Awaiting new connections..."
</snippet></ROW><ROW><id>18524933</id><snippet>accept</snippet></ROW><ROW><id>18525040</id><snippet>Background</snippet></ROW><ROW><id>18525040</id><snippet>Feature: Simple and successful
  As the Lettuce maintainer
  In order to make sure the output is pretty
  I want to automate its test

  Background:
    Given the variable "X" holds 2

  Scenario: multiplication changing the value
    Given the variable "X" is equal to 2
</snippet></ROW><ROW><id>18525211</id><snippet>name</snippet></ROW><ROW><id>18525211</id><snippet>val</snippet></ROW><ROW><id>18525218</id><snippet>im = Image.open(open(infile, 'rb'))
</snippet></ROW><ROW><id>18525218</id><snippet>from StringIO import StringIO
im = Image.open(StringIO(infile))
</snippet></ROW><ROW><id>18525337</id><snippet>def callfunc(self, f, args):
  f(*args)
</snippet></ROW><ROW><id>18525571</id><snippet>def __init__(self):
    self.builder = gtk.Builder()

    # some code here ...

    self.win = self.builder.get_object('window1')
    options(self.win)
    self.win.show()
</snippet></ROW><ROW><id>18525571</id><snippet>class options():
    def __init__(self, window):
        self._window = window

    # do whatever you want with the window ...
</snippet></ROW><ROW><id>18525693</id><snippet>from jinja2 import Environment

env = Environment() # main environment, basically one per program.
env.filters['my_filter'] = lambda i: i * 100
template = env.from_string('{% for i in myList %}{{ i|my_filter }}_{% endfor %}')
print(template.render(myList=range(10)))
# 0_100_200_300_400_500_600_700_800_900_
</snippet></ROW><ROW><id>18525713</id><snippet>print 'checking ' + url 
request = urllib2.Request(url)
base64string = base64.encodestring('%s:%s' % (uid, pwd)).replace('\n', '')
request.add_header("Authorization", "Basic %s" % base64string)
request.get_method = lambda : 'HEAD'

try:
    connection = urllib2.urlopen(request)
        data = connection.info()
        connection.close()
    try:
        file_size = int(data.getheaders("Content-Length")[0])
        return 0
    except  IndexError, e:
        return 1        
except urllib2.HTTPError, e:
        print e.getcode()
    return 1
</snippet></ROW><ROW><id>18525808</id><snippet>Split</snippet></ROW><ROW><id>18525808</id><snippet>Filter2D</snippet></ROW><ROW><id>18525808</id><snippet>Split(src, src_r, src_g, src_b)
Smooth(src_r, dst_r)
Merge(dst_r, src_g, src_b, dst)
</snippet></ROW><ROW><id>18526067</id><snippet>Array</snippet></ROW><ROW><id>18526067</id><snippet>class CategoryService(ServiceBase):
    @rpc(Integer(min_occurs=1, max_occurs='unbounded', nillable=False)),
                                        _returns=Iterable(Category, **MANDATORY))
    def get_subcategories_by_path(ctx, category_path):
        # (...)
</snippet></ROW><ROW><id>18526119</id><snippet>width</snippet></ROW><ROW><id>18526119</id><snippet>dump</snippet></ROW><ROW><id>18526119</id><snippet>yaml.dump(data, width=1000)</snippet></ROW><ROW><id>18526841</id><snippet>for ol in range(n):
</snippet></ROW><ROW><id>18526841</id><snippet>for ol in range(n-1,-1,-1):
</snippet></ROW><ROW><id>18526841</id><snippet>print string[::-1]
</snippet></ROW><ROW><id>18526974</id><snippet>form = cgi.FieldStorage()
</snippet></ROW><ROW><id>18526974</id><snippet>form = cgi.FieldStorage()</snippet></ROW><ROW><id>18526974</id><snippet>def myfunction ():
    cgitb.enable()
    form = cgi.FieldStorage()
</snippet></ROW><ROW><id>18526974</id><snippet>form = cgi.FieldStorage()</snippet></ROW><ROW><id>18526974</id><snippet>def run():
    cgitb.enable()
    form = cgi.FieldStorage()
    myfunction(form) 
</snippet></ROW><ROW><id>18526974</id><snippet>def myfunction (form):
    name = form.getfirst('name', 'empty')
    id   = form.getfirst('id', 'empty')
</snippet></ROW><ROW><id>18526974</id><snippet>form = cgi.FieldStorage()</snippet></ROW><ROW><id>18526974</id><snippet>if __name__ == "__main__":
    cgitb.enable()
    form = cgi.FieldStorage()
</snippet></ROW><ROW><id>18526974</id><snippet>def myfunction ():
    name = form.getfirst('name', 'empty')
    id   = form.getfirst('id', 'empty')
</snippet></ROW><ROW><id>18527290</id><snippet>def create_custom_subclass(cls):
    class sub(cls):
        def set_value(self):
            more_set_value()
            super().set_value()
    return sub

AA = create_custom_subclass(A)
a = AA()
a.set_value()
</snippet></ROW><ROW><id>18527290</id><snippet>class Mixin:
    def set_value(self):
        more_set_value()
        super().set_value()

class AA(Mixin, A):
    pass
</snippet></ROW><ROW><id>18527476</id><snippet>requests.get("https://api.helpscout.net/v1/conversations/{id}.json", auth=('{API_KEY}','X'))</snippet></ROW><ROW><id>18527558</id><snippet>numpy</snippet></ROW><ROW><id>18527558</id><snippet>Fortran-contiguous</snippet></ROW><ROW><id>18527558</id><snippet>C-contiguous</snippet></ROW><ROW><id>18527558</id><snippet>order</snippet></ROW><ROW><id>18527794</id><snippet>a = sum(word.endswith('ly') for line in f for word in line.split())
</snippet></ROW><ROW><id>18527794</id><snippet>int</snippet></ROW><ROW><id>18527794</id><snippet>True</snippet></ROW><ROW><id>18527794</id><snippet>False</snippet></ROW><ROW><id>18527794</id><snippet>a = sum(1 for line in f for word in line.split() if word.endswith('ly'))
</snippet></ROW><ROW><id>18527794</id><snippet>with open("unknown.txt", 'r') as f:
    total = lycount = 0
    for line in f:
        words = line.split()
        total += len(words)
        lycount += sum(1 for word in words if word.endswith('ly'))

try:
    percentage = (lycount / total) * 100
    print('{}% adverbs'.format(percentage))
except ZeroDivisionError:
    print('File is empty!')
</snippet></ROW><ROW><id>18527908</id><snippet>numpy.bincount</snippet></ROW><ROW><id>18527908</id><snippet>dst = numpy.bincount(index, weights=a, minlength=maxIndex)
</snippet></ROW><ROW><id>18527908</id><snippet>array([  0.,   6.,   0.,  11.,   3.,  16.])</snippet></ROW><ROW><id>18527908</id><snippet>maxIndex</snippet></ROW><ROW><id>18527908</id><snippet>minlength</snippet></ROW><ROW><id>18527908</id><snippet>numpy</snippet></ROW><ROW><id>18528552</id><snippet>root.update_idletasks()</snippet></ROW><ROW><id>18528552</id><snippet>from Tkinter import *
import time

root = Tk()

def count():
    for i in range(300):
        Display.configure(text = 'The current number is: '+str(i))
        root.update_idletasks()
        time.sleep(0.01) # just to see something

Button = Button(root, text = 'Start', command = count)
Button.pack()

Display = Label(root)
Display.pack()

root.mainloop()
</snippet></ROW><ROW><id>18528552</id><snippet>after_idle</snippet></ROW><ROW><id>18528552</id><snippet>import time
from Tkinter import *

root = Tk()

def updatesdisplay(func):
    def driver(iterator):
        try: next(iterator)
        except StopIteration: pass
        else: root.after_idle(driver, iterator)
    def wrapped():
        driver(func())
    return wrapped

@updatesdisplay
def count():
    for i in range(300):
        time.sleep(0.005) # just to see something
        Display.configure(text = 'The current number is: '+str(i))
        yield # chance to update display here

Button = Button(root, text = 'Start', command = count)
Button.pack()

Display = Label(root)
Display.pack()

root.mainloop()
</snippet></ROW><ROW><id>18528643</id><snippet>A op1 B op2 C</snippet></ROW><ROW><id>18528643</id><snippet>op1</snippet></ROW><ROW><id>18528643</id><snippet>op2</snippet></ROW><ROW><id>18528643</id><snippet>A op1 B and B op2 C</snippet></ROW><ROW><id>18528643</id><snippet>B</snippet></ROW><ROW><id>18528643</id><snippet>in</snippet></ROW><ROW><id>18528643</id><snippet>not in</snippet></ROW><ROW><id>18528643</id><snippet>is</snippet></ROW><ROW><id>18528643</id><snippet>is not</snippet></ROW><ROW><id>18528643</id><snippet>a is b is not None</snippet></ROW><ROW><id>18528643</id><snippet>a is b and b is not None</snippet></ROW><ROW><id>18528643</id><snippet>dis</snippet></ROW><ROW><id>18528643</id><snippet>In [1]: import dis

In [2]: dis.dis(lambda: True == True != False)
  1           0 LOAD_CONST               1 (True) 
              3 LOAD_CONST               1 (True) 
              6 DUP_TOP              
              7 ROT_THREE            
              8 COMPARE_OP               2 (==) 
             11 JUMP_IF_FALSE_OR_POP    21 
             14 LOAD_CONST               2 (False) 
             17 COMPARE_OP               3 (!=) 
             20 RETURN_VALUE         
        &gt;&gt;   21 ROT_TWO              
             22 POP_TOP              
             23 RETURN_VALUE 
</snippet></ROW><ROW><id>18528643</id><snippet>True == True != False</snippet></ROW><ROW><id>18528643</id><snippet>True == True and True != False</snippet></ROW><ROW><id>18528643</id><snippet>True</snippet></ROW><ROW><id>18528643</id><snippet>LOAD_CONST</snippet></ROW><ROW><id>18528643</id><snippet>DUP_TOP</snippet></ROW><ROW><id>18528643</id><snippet>True</snippet></ROW><ROW><id>18528643</id><snippet>COMPARE_OP</snippet></ROW><ROW><id>18528643</id><snippet>JUMP_IF_FALSE_OR_POP</snippet></ROW><ROW><id>18528643</id><snippet>help(some_object)</snippet></ROW><ROW><id>18528643</id><snippet>IPython</snippet></ROW><ROW><id>18528663</id><snippet>uid = User.by_id_name(linkid)</snippet></ROW><ROW><id>18528663</id><snippet>str(uid) == linkid</snippet></ROW><ROW><id>18528805</id><snippet>resize()</snippet></ROW><ROW><id>18528805</id><snippet>numpy.ndarray</snippet></ROW><ROW><id>18528805</id><snippet>import numpy as np

a = np.array([1,2,3])
a.resize(2,3)
print a
#array([[1, 2, 3],
#       [0, 0, 0]])
</snippet></ROW><ROW><id>18528805</id><snippet>a</snippet></ROW><ROW><id>18528805</id><snippet>in-place</snippet></ROW><ROW><id>18528805</id><snippet>atb_mat = atbvec.copy()
atb_mat.resize(dim, nb)
</snippet></ROW><ROW><id>18528805</id><snippet>numpy.resize</snippet></ROW><ROW><id>18528805</id><snippet>atb_mat = numpy.resize(atbvec, (dim, nb))
</snippet></ROW><ROW><id>18528805</id><snippet>atbvec</snippet></ROW><ROW><id>18528805</id><snippet>a = np.array([1,2,3])
b = np.resize(a, (3, 4))
#array([[1, 2, 3, 1],
#       [2, 3, 1, 2],
#       [3, 1, 2, 3]])
</snippet></ROW><ROW><id>18529087</id><snippet>getparent()</snippet></ROW><ROW><id>18529087</id><snippet>&gt;&gt;&gt; import lxml.html
&gt;&gt;&gt; text_string = '''&lt;html&gt;
...   &lt;body&gt;
...     &lt;p&gt;Hello World!&lt;/p&gt;
...     &lt;p&gt;Goodbye!&lt;/p&gt;
...   &lt;/body&gt;
... &lt;/html&gt;'''
&gt;&gt;&gt; root = lxml.html.document_fromstring(text_string)
&gt;&gt;&gt; text_elements = root.xpath('//text()')
&gt;&gt;&gt; for t in text_elements:
...     print t.getparent(), type(t), repr(t)
... 
&lt;Element body at 0x193b170&gt; &lt;class 'lxml.etree._ElementStringResult'&gt; '\n    '
&lt;Element p at 0x193b1d0&gt; &lt;class 'lxml.etree._ElementStringResult'&gt; 'Hello World!'
&lt;Element p at 0x193b1d0&gt; &lt;class 'lxml.etree._ElementStringResult'&gt; '\n    '
&lt;Element p at 0x193b290&gt; &lt;class 'lxml.etree._ElementStringResult'&gt; 'Goodbye!'
&lt;Element p at 0x193b290&gt; &lt;class 'lxml.etree._ElementStringResult'&gt; '\n  '
</snippet></ROW><ROW><id>18529234</id><snippet>import re
txt="I like to eat apple. Me too. Let's go buy some apples."
define_words = 'some apple'
print re.findall(r"([^.]*?%s[^.]*\.)" % define_words,txt)  

Output: [" Let's go buy some apples."]
</snippet></ROW><ROW><id>18529234</id><snippet>define_words = raw_input("Enter string: ")
</snippet></ROW><ROW><id>18529234</id><snippet>import re
txt="I like to eat apple. Me too. Let's go buy some apples."
words = 'go apples'.split(' ')

sentences = re.findall(r"([^.]*\.)" ,txt)  
for sentence in sentences:
    if all(word in sentence for word in words):
        print sentence
</snippet></ROW><ROW><id>18529453</id><snippet>Out of memory: Kill process 26184 (python) score 439 or sacrifice child
Killed process 26184 (python) total-vm:628772kB, anon-rss:447660kB, file-rss:0kB
</snippet></ROW><ROW><id>18529529</id><snippet>fileinput.input</snippet></ROW><ROW><id>18529529</id><snippet>fileinput.input('zzz.txt', inplace=1):
</snippet></ROW><ROW><id>18529529</id><snippet>file</snippet></ROW><ROW><id>18529529</id><snippet>file</snippet></ROW><ROW><id>18529899</id><snippet>import inspect

def mc_me(cls):
    main_locals = inspect.currentframe().f_back.f_locals
    for suffix in ['Super', 'Extra']:
        new_name = cls.__name__ + suffix
        main_locals[new_name] = type(new_name, (), {'name': new_name})
    return cls
</snippet></ROW><ROW><id>18529899</id><snippet>inspect</snippet></ROW><ROW><id>18530011</id><snippet>def valid_combination(combination):
    # Do whatever test you want here
    pass

def product_with_validation(validation_func, *element_list):
    for combination in itertools.product(*element_list):
        if validation_func(combination):
            yield combination

all_combinations = list(product_with_combo(product_with_validation, [1,2,3],[1,2,3])
</snippet></ROW><ROW><id>18530011</id><snippet>import itertools

def valid_combination(combination):
    return len(combination)&gt;0 and combination[0]==2

def product_with_validation(validation_func, *element_list):
    return (combination for combination in itertools.product(*element_list) 
           if valid_combination(combination))
print list(product_with_validation(valid_combination, range(10), range(10)))
</snippet></ROW><ROW><id>18530011</id><snippet>[(2, 0), (2, 1), (2, 2), (2, 3), (2, 4), (2, 5), (2, 6), (2, 7), (2, 8), (2, 9)]
</snippet></ROW><ROW><id>18530403</id><snippet>import sys

option = sys.argv[1]
filename = sys.argv[2]
options = ['unique','multi']

def out_unique(data):
    for row in data.readlines():
        column = row.strip().split()
        if column[2] == 1:
            print row

def out_multi(data):
    for row in data.readlines():
        column = row.strip().split()
        if column[2] != 1:
            print row

if option == 'unique':
    out_unique(open(filename, 'r'))
elif option == 'multi':
    out_multi(open(filename, 'r'))
else:
    print 'available options:', options
</snippet></ROW><ROW><id>18530403</id><snippet>import sys

option = sys.argv[1]
filename = sys.argv[2]
options = ['unique','multi']

def out_unique(data):
    print '\n'.join(row for row in data.readlines() if row.strip().split()[2] == '1')

def out_multi(data):
    print '\n'.join(row for row in data.readlines() if row.strip().split()[2] != '1')

if option == 'unique':
    out_unique(open(filename, 'r'))
elif option == 'multi':
    out_multi(open(filename, 'r'))
else:
    print 'available options:', options
</snippet></ROW><ROW><id>18530452</id><snippet>p.full_clean()</snippet></ROW><ROW><id>18530559</id><snippet>x = plt.linspace(0, 10, 100)
y = 1e6 + plt.sin(x)

ax = plt.subplot(111)
ax.plot(x, y)
ax.set_yticklabels(["{:.6e}".format(t) for t in ax.get_yticks()])
plt.subplots_adjust(left=0.2)
plt.show()
</snippet></ROW><ROW><id>18530559</id><snippet>{:6e}".format(t)</snippet></ROW><ROW><id>18530559</id><snippet>plt.rcParams['axes.formatter.limits'] = [-5,5]
</snippet></ROW><ROW><id>18530559</id><snippet>[-7, 7]</snippet></ROW><ROW><id>18530594</id><snippet>1&gt;/dev/null
</snippet></ROW><ROW><id>18530594</id><snippet>subprocess.call("yum install ruby rubygems -y  2&gt;&amp;1 1&gt;/dev/null", shell=True)
</snippet></ROW><ROW><id>18530684</id><snippet>#!C:\Python33\python.exe
import cgitb
cgitb.enable()
print("Content-Type: text/html;charset=utf-8")
print() # &lt;----------- addtional newlnie for header/body separation.
print("Hello World!")
</snippet></ROW><ROW><id>18531029</id><snippet>from PIL import Image
import images2gif as i2g
images = i2g.readGif('Animated.gif', False)
watermark = Image.open("Watermark.gif")
for i in images: i.paste(watermark, (1, 1))

i2g.writeGif('Out.gif', images, 0.5) # You may wish to play with the timing, etc.
exit()
</snippet></ROW><ROW><id>18531223</id><snippet>threads_dict[i] = MyThread(target=print_test(i))
</snippet></ROW><ROW><id>18531223</id><snippet>threads_dict[i] = MyThread(target=print_test, args=[i,])
</snippet></ROW><ROW><id>18531223</id><snippet>('Sempahore acquired by:', 'Thread-1')
('Sempahore acquired by:', 'Thread-2')
('executing:', 1)
('Sempahore acquired by:', 'Thread-3')
('executing:', 2)
('Sempahore acquired by:', 'Thread-4')
('executing:', 3)
('Sempahore acquired by:', 'Thread-5')
('executing:', 4)
('executing:', 5)
('end of execution:', 1)
('Sempahore released by:', 'Thread-1')
('Sempahore acquired by:', 'Thread-6')
...
</snippet></ROW><ROW><id>18531525</id><snippet>str.join()</snippet></ROW><ROW><id>18531525</id><snippet>' and '</snippet></ROW><ROW><id>18531525</id><snippet>myquery = "select * from players where {}".format(
    ' and '.join('{}={}'.format(k, v) for k, v in mylist.iteritems()))
</snippet></ROW><ROW><id>18531525</id><snippet>&gt;&gt;&gt; mylist= {'name':'james', 'age': '23', 'time': 'next'}
&gt;&gt;&gt; "select * from players where {}".format(
...     ' and '.join('{}={}'.format(k, v) for k, v in mylist.iteritems()))
'select * from players where age=23 and name=james and time=next'
</snippet></ROW><ROW><id>18531525</id><snippet>myquery = "select * from players where {}".format(
    ' and '.join('{}=?'.format(k) for k in mylist))
</snippet></ROW><ROW><id>18531525</id><snippet>cursor.execute(myquery, mylist.values())</snippet></ROW><ROW><id>18531525</id><snippet>%s</snippet></ROW><ROW><id>18531525</id><snippet>?</snippet></ROW><ROW><id>18531765</id><snippet>d={}

for i in range(n):
    d1={}
    d2={}
</snippet></ROW><ROW><id>18531765</id><snippet>d</snippet></ROW><ROW><id>18531765</id><snippet>&gt;&gt;&gt; foo = {}
&gt;&gt;&gt; bar = foo
&gt;&gt;&gt; foo['eggs'] = 'ham'
&gt;&gt;&gt; bar
{'eggs': 'ham'}
&gt;&gt;&gt; foo['eggs'] = 'spam'
&gt;&gt;&gt; bar
{'eggs': 'spam'}
</snippet></ROW><ROW><id>18531765</id><snippet>d[s]=d1</snippet></ROW><ROW><id>18531765</id><snippet>d1</snippet></ROW><ROW><id>18531765</id><snippet>d</snippet></ROW><ROW><id>18531765</id><snippet>d1 = {}</snippet></ROW><ROW><id>18531765</id><snippet>d2 = {}</snippet></ROW><ROW><id>18531765</id><snippet>dict.copy()</snippet></ROW><ROW><id>18531765</id><snippet>d</snippet></ROW><ROW><id>18531765</id><snippet>d1</snippet></ROW><ROW><id>18531765</id><snippet>d2</snippet></ROW><ROW><id>18531765</id><snippet>customers</snippet></ROW><ROW><id>18531765</id><snippet>customer</snippet></ROW><ROW><id>18531765</id><snippet>address</snippet></ROW><ROW><id>18532167</id><snippet>&gt;&gt;&gt; a = '''
+NameA|InfoA1|InfoA2
-NameB|InfoB1|InfoB2
+NameB|InfoB3|InfoB2
-NameC|InfoC1|InfoC2
-NameD|InfoD1|InfoD2
-NameE|InfoE1|InfoE2
+NameD|InfoD1|InfoD3
+NameE|InfoE3|InfoE2
'''
&gt;&gt;&gt; diff = {}
&gt;&gt;&gt; for row in a.splitlines():
    if not row:
        continue
    s = row.split('|')
    name = s[0][1:]
    data = s[1:]
    if row.startswith('+'):
        change = diff.get(name, {'rows': []})
        change['rows'].append(row)
        change['status'] = 'modified' if change.has_key('status') else 'added'
    else:
        change = diff.get(name, {'rows': []})
        change['rows'].append(row)
        change['status'] = 'modified' if change.has_key('status') else 'removed'
    diff[name] = change

&gt;&gt;&gt; def print_by_status(status=None):
for item, value in diff.items():
    if status is not None and status == value['status'] or status is None:
        print '\nStatus: %s\n%s' % (value['status'], '\n'.join(value['rows']))
&gt;&gt;&gt; print_by_status(status='added')

Status: added
+NameA|InfoA1|InfoA2
&gt;&gt;&gt; print_by_status(status='modified')

Status: modified
-NameD|InfoD1|InfoD2
+NameD|InfoD1|InfoD3

Status: modified
-NameE|InfoE1|InfoE2
+NameE|InfoE3|InfoE2

Status: modified,
-NameB|InfoB1|InfoB2
+NameB|InfoB3|InfoB2
</snippet></ROW><ROW><id>18532575</id><snippet>class WSHandler(tornado.websocket.WebSocketHandler):
  connections = set()

  def open(self):
     self.connections.add(self)
     print 'New connection was opened'
     self.write_message("Conn!")

  def on_message(self, message):
     print 'Got :', message
     self.write_message("Received: " + message)


  def on_close(self):
     self.connections.remove(self)
     print 'Conn closed...'
</snippet></ROW><ROW><id>18532575</id><snippet> [con.write_message('Hi!') for con in connections]
</snippet></ROW><ROW><id>18532706</id><snippet>d = test().do
print(d(10))  # prints 100
</snippet></ROW><ROW><id>18532706</id><snippet>test.do</snippet></ROW><ROW><id>18532706</id><snippet>test().do</snippet></ROW><ROW><id>18532905</id><snippet>&gt;&gt;&gt; data = [[204.0, u'stock'], [204.0, u'stock']]
&gt;&gt;&gt; zip(*data)
[(204.0, 204.0), (u'stock', u'stock')]
&gt;&gt;&gt; column1, column2 = zip(*data)
&gt;&gt;&gt; column1
(204.0, 204.0)
&gt;&gt;&gt; column2
(u'stock', u'stock')
</snippet></ROW><ROW><id>18532905</id><snippet>itertools</snippet></ROW><ROW><id>18532905</id><snippet>&gt;&gt;&gt; from itertools import izip
&gt;&gt;&gt; column1, column2 = izip(*data)
&gt;&gt;&gt; column1
(204.0, 204.0)
&gt;&gt;&gt; column2
(u'stock', u'stock')
</snippet></ROW><ROW><id>18533178</id><snippet>for i in dic: # for every letter in the dictionary
    if i in l1:  # if that letter is one of the elements of the list l1
</snippet></ROW><ROW><id>18533178</id><snippet>import math
for letter in dic:
    for element in l1:
        if letter in element:
            result.append(dic[letter]**2 * element.count(letter))
return math.sqrt(sum(result))
</snippet></ROW><ROW><id>18533179</id><snippet>for x,y in zip(w,c):
    for j in x:
        for k in y:
           l=hamming_distance(x, y)
    print l
</snippet></ROW><ROW><id>18533179</id><snippet>j</snippet></ROW><ROW><id>18533179</id><snippet>k</snippet></ROW><ROW><id>18533179</id><snippet>for x,y in zip(w,c):
    l=hamming_distance(x, y)
    print l
</snippet></ROW><ROW><id>18533179</id><snippet>k = [hamming_distance(x, y) for x, y in zip(w,c)]
print k
print sum(k)
</snippet></ROW><ROW><id>18533179</id><snippet>[2,1]
3
</snippet></ROW><ROW><id>18533282</id><snippet>import csv
with open('file.csv','rb') as file:
    contents = csv.reader(file)
    [x for x in contents]
</snippet></ROW><ROW><id>18533282</id><snippet>import csv
with open('file.csv','rb') as file:
    contents = csv.reader(file)
    matrix = list()
    for row in contents:
        matrix.append(row)
</snippet></ROW><ROW><id>18533282</id><snippet>matrix[5][12]</snippet></ROW><ROW><id>18533399</id><snippet>time</snippet></ROW><ROW><id>18533475</id><snippet>class LocationByCountryListAPIView(generics.ListAPIView):
    def get(self, request, country_pk):
        # get the country by its primary key from the url
        country = Country.objects.get(pk=country_pk)

        locations = Location.objects.filter(country=country)
        location_serializer = LocationSerializer(locations, many=True)

        return Response({
            'locations': location_serializer.data
        })
</snippet></ROW><ROW><id>18533475</id><snippet>url(r'^location-by-country/(?P&lt;country_pk&gt;[0-9]+)/$', views.LocationByCountryListAPIView.as_view(), name='location-by-country-detail')
</snippet></ROW><ROW><id>18533669</id><snippet>next()</snippet></ROW><ROW><id>18533669</id><snippet>&gt;&gt;&gt; a = [None, None, None, 1, 2, 3, 4, 5]
&gt;&gt;&gt; next(item for item in a if item is not None)
1
</snippet></ROW><ROW><id>18533669</id><snippet>StopIteration</snippet></ROW><ROW><id>18533669</id><snippet>&gt;&gt;&gt; a = [None, None, None]
&gt;&gt;&gt; next((item for item in a if item is not None), 'All are Nones')
All are Nones
</snippet></ROW><ROW><id>18533673</id><snippet>def http_get(url, user=None, password=None, proxies=None, valid_response_status[httplib.OK], **kwargs):
"""
Performs a http get over an url
@param url: the url to perfom get against
@type url: str
@param user: user if authentication required
@type user: str
@param password: password if authentication required
@type password: str
@param proxies: proxies if required
@type proxies: dict
@param valid_response_status: http response status code considered as valid
@type valid_response_status: list of int
@raise exception: if the response status code is not in valid_response_status list
"""
auth = HTTPBasicAuth(username=user, password=password)
kwargs['proxies'] = proxies
kwargs['auth'] = auth
try:
    LOGGER.debug("Performing http get over : %s" % url)
    _request = requests.get(url, **kwargs)
    if _request.status_code not in valid_response_status:
        http_error_msg = '%s Error: %s' % (_request.status_code, _request.reason)
        http_error = HTTPError(http_error_msg)
        http_error.response = _request
        raise http_error
    return _request.content
except:
    LOGGER.error("Error while performing http get over : %s" % url)
    raise
</snippet></ROW><ROW><id>18533692</id><snippet>&gt;&gt;&gt; client_key = 'client key'
&gt;&gt;&gt; client_secret = 'secret'
&gt;&gt;&gt; callback_uri = 'https://yourhost.com/callback'

&gt;&gt;&gt; # Using OAuth1Session
&gt;&gt;&gt; oauth = OAuth1Session(client_key, client_secret=client_secret, callback_uri=callback_uri)
</snippet></ROW><ROW><id>18533704</id><snippet>open(name,'r+')</snippet></ROW><ROW><id>18533704</id><snippet>open(name, 'w')</snippet></ROW><ROW><id>18533704</id><snippet>open(name, 'a')</snippet></ROW><ROW><id>18533835</id><snippet>re.sub(pattern, '', original_string)</snippet></ROW><ROW><id>18533835</id><snippet>&gt;&gt;&gt; import re
&gt;&gt;&gt; string1 = 'one.two.three.four.five.six.eight'
&gt;&gt;&gt; string2 = 'one.two.hello.four.five.six.seven'
&gt;&gt;&gt; re.sub(r'^one\.two\.\w+\.four', '', string1)
'.five.six.eight'
&gt;&gt;&gt; re.sub(r'^one\.two\.\w+\.four', '', string2)
'.five.six.seven'
</snippet></ROW><ROW><id>18533835</id><snippet>str.lstrip</snippet></ROW><ROW><id>18533835</id><snippet>&gt;&gt;&gt; 'abcddcbaabcd'.lstrip('abcd')
''
</snippet></ROW><ROW><id>18533835</id><snippet>str.replace</snippet></ROW><ROW><id>18533835</id><snippet>&gt;&gt;&gt; 'abcddcbaabcd'.replace('abcd', '')
'dcba'
&gt;&gt;&gt; 'abcddcbaabcd'.replace('abcd', '', 1)
'dcbaabcd'
</snippet></ROW><ROW><id>18534220</id><snippet>mako.exceptions.SyntaxException</snippet></ROW><ROW><id>18534220</id><snippet>@bottle.route('/hello')
def hello():
    try:
        return bottle.mako_template('hello')

    except mako.exceptions.SyntaxException as exx:
        return 'mako exception: {}\n'.format(exx)
</snippet></ROW><ROW><id>18534220</id><snippet>@bottle.route('/hello')
def hello():
    return bottle.mako_template('hello')

def catch_mako_errors(callback):
    def wrapper(*args, **kwargs):
        try:
            return callback(*args, **kwargs)
        except mako.exceptions.SyntaxException as exx:
            return 'mako exception: {}\n'.format(exx)
    return wrapper

bottle.install(catch_mako_errors)
</snippet></ROW><ROW><id>18534259</id><snippet>@echo off
rem = '''
echo This is "%~f0" before Python

python -x "%~f0" %*

echo This is "%~f0" after Python

goto :end
'''

print "------------- Python code starts here --------------"
import sys
print sys.path
print sys.argv
print "------------- Python code ends here ----------------"

rem = '''
:end
rem '''
</snippet></ROW><ROW><id>18534425</id><snippet>average</snippet></ROW><ROW><id>18534425</id><snippet>class</snippet></ROW><ROW><id>18534425</id><snippet>average</snippet></ROW><ROW><id>18534425</id><snippet>main</snippet></ROW><ROW><id>18534425</id><snippet>def average(a,b):
    return int((a+b)/2)
def main():
    num = input("Number? ")
    x= int(num)
    y= average(x+1,x)
    print(y)
main()
</snippet></ROW><ROW><id>18534425</id><snippet>class two:
    def __init__(self, x,y):
        self.x = x
        self.y = y
    def average(self):
        return (self.x + self.y)/2
def main():
    t = two(7,42)
    print(t.average())

main ()
</snippet></ROW><ROW><id>18534425</id><snippet>average</snippet></ROW><ROW><id>18534425</id><snippet>self</snippet></ROW><ROW><id>18534425</id><snippet>two</snippet></ROW><ROW><id>18534425</id><snippet>average</snippet></ROW><ROW><id>18534425</id><snippet>t.average()</snippet></ROW><ROW><id>18534425</id><snippet>t</snippet></ROW><ROW><id>18534425</id><snippet>two.average()</snippet></ROW><ROW><id>18534605</id><snippet>str</snippet></ROW><ROW><id>18534605</id><snippet>__str__</snippet></ROW><ROW><id>18534605</id><snippet>__str__</snippet></ROW><ROW><id>18534605</id><snippet>__str__</snippet></ROW><ROW><id>18534605</id><snippet>__str__</snippet></ROW><ROW><id>18534605</id><snippet>unicode</snippet></ROW><ROW><id>18534605</id><snippet>str</snippet></ROW><ROW><id>18534605</id><snippet>In [29]: class A(object):
    ...:     def __init__(self):
    ...:         self.t1 = u"c∃".encode('utf8')
    ...:     def __str__(self):
    ...:         return self.t1
    ...:     

In [30]: a = A()

In [31]: print a
c∃

In [32]: str(a)
Out[32]: 'c\xe2\x88\x83'

In [33]: a.__str__()
Out[33]: 'c\xe2\x88\x83'
</snippet></ROW><ROW><id>18534867</id><snippet>body =  " Motion Detection Started \n Pixel Threshold (How much)   = " + str(threshold) + \
        "\n Sensitivity (changed Pixels) = " + str(sensitivity) + \
        "\n File Path for Image Save     = " + filepath
</snippet></ROW><ROW><id>18534937</id><snippet>data</snippet></ROW><ROW><id>18534937</id><snippet>df</snippet></ROW><ROW><id>18534937</id><snippet>mod = sm.ols(formula='Lottery ~ Literacy + Wealth + Region', df=df)
</snippet></ROW><ROW><id>18535002</id><snippet>where</snippet></ROW><ROW><id>18535002</id><snippet>here</snippet></ROW><ROW><id>18535002</id><snippet>_</snippet></ROW><ROW><id>18535002</id><snippet>where</snippet></ROW><ROW><id>18535002</id><snippet>tuple</snippet></ROW><ROW><id>18535002</id><snippet>&gt;&gt;&gt; here, _ = ("a", "b")
&gt;&gt;&gt; here
'a'
&gt;&gt;&gt; _
'b'
</snippet></ROW><ROW><id>18535086</id><snippet>{ }</snippet></ROW><ROW><id>18535086</id><snippet>if (x &lt;= y)
        x++;
        y--;
z++;
</snippet></ROW><ROW><id>18535137</id><snippet>&gt;&gt;&gt; s1 = 'cn=Name Surname (123)'
&gt;&gt;&gt; x = s1[:16]+'\\'+s1[16:-1]+'\\'+s1[-1:]
&gt;&gt;&gt; x
'cn=Name Surname \\(123\\)'
&gt;&gt;&gt; print x
cn=Name Surname \(123\)
&gt;&gt;&gt;
</snippet></ROW><ROW><id>18535137</id><snippet>\\</snippet></ROW><ROW><id>18535615</id><snippet>dict</snippet></ROW><ROW><id>18535615</id><snippet>sum</snippet></ROW><ROW><id>18535615</id><snippet>callable</snippet></ROW><ROW><id>18535615</id><snippet>dict</snippet></ROW><ROW><id>18535615</id><snippet>type</snippet></ROW><ROW><id>18535615</id><snippet>isinstance(dict, type) == True</snippet></ROW><ROW><id>18535615</id><snippet>dict</snippet></ROW><ROW><id>18535615</id><snippet>class MyDictSubclass(dict):
    pass
</snippet></ROW><ROW><id>18535615</id><snippet>class MySumSubclass(sum):
    pass
</snippet></ROW><ROW><id>18535615</id><snippet>tuple</snippet></ROW><ROW><id>18535615</id><snippet>+</snippet></ROW><ROW><id>18535615</id><snippet>class Vector(tuple):
    def __add__(self, other):
        return Vector(x + y for x, y in zip(self, other))
</snippet></ROW><ROW><id>18535615</id><snippet>type</snippet></ROW><ROW><id>18535615</id><snippet>dict</snippet></ROW><ROW><id>18535615</id><snippet>sum</snippet></ROW><ROW><id>18535615</id><snippet>type</snippet></ROW><ROW><id>18535615</id><snippet>isinstance(type, type) == True</snippet></ROW><ROW><id>18535615</id><snippet>type</snippet></ROW><ROW><id>18535615</id><snippet>class MyTypeSubclass(type):
    pass

class MyClass(object):
    __metaclass__ = MyTypeSubclass
</snippet></ROW><ROW><id>18535615</id><snippet>class MyClass(metaclass=MyTypeSubclass):
    pass
</snippet></ROW><ROW><id>18535615</id><snippet>isinstance(MyClass, MyTypeSubclass) == True</snippet></ROW><ROW><id>18535682</id><snippet>   cursor.execute("""select CUSTNBR,
                             FROMDATE,
                             sum(DECTHERMS) as DECTHERMS,
                             max(PRICE) as PRICE,
                             sum(SALESDLRS) as SALESDLRS,
                             sum(MCFS) as MCFS
                    from LQPPNATGAS
                    where CUSTNBR = ? and 
                          FROMDATE &lt;&gt; '20000000' 
                    group by CUSTNBR, FROMDATE """,str(cust_number))


    row = cursor.fetchone()
    while row:
        if str(row.FROMDATE)[0:4] &gt;= str(oldest_year):

            b = Usage.objects.filter(user_id=user_id,from_date=row.FROMDATE)[0]

            print &gt;&gt; sys.stderr , "before b.decatherms="+str(b.decatherms)

            b.decatherms = row.DECTHERMS
            b.price = row.PRICE
            b.sales_dollars = row.SALESDLRS
            b.mcf = row.MCFS
            b.save() #(update_fields=['decatherms','price','sales_dollars','mcf'])

            print &gt;&gt; sys.stderr , "after b.decatherms="+str(b.decatherms)

        row = cursor.fetchone()
</snippet></ROW><ROW><id>18535682</id><snippet>[Fri Aug 30 10:37:28 2013] [error] before b.decatherms=0.0
[Fri Aug 30 10:37:28 2013] [error] after b.decatherms=44.9
[Fri Aug 30 10:37:28 2013] [error] before b.decatherms=0.0
[Fri Aug 30 10:37:28 2013] [error] after b.decatherms=91.1
[Fri Aug 30 10:37:28 2013] [error] before b.decatherms=0.0
[Fri Aug 30 10:37:28 2013] [error] after b.decatherms=3.8
[Fri Aug 30 10:37:28 2013] [error] before b.decatherms=0.0
[Fri Aug 30 10:37:28 2013] [error] after b.decatherms=2.9
[Fri Aug 30 10:37:28 2013] [error] before b.decatherms=0.0
[Fri Aug 30 10:37:28 2013] [error] after b.decatherms=11.8
</snippet></ROW><ROW><id>18535710</id><snippet>global</snippet></ROW><ROW><id>18535710</id><snippet>def Create(filename):
    global file
    UserFile = open(str(filename), "wt")
    file = (str(filename))
    #return file  -- I commented this since there is no real reason to return now with a global
</snippet></ROW><ROW><id>18535710</id><snippet>file</snippet></ROW><ROW><id>18535710</id><snippet>file = Create(input("filename: "))</snippet></ROW><ROW><id>18535838</id><snippet>items = Item.objects.filter(category__parent=parent_category)
</snippet></ROW><ROW><id>18535920</id><snippet>datetime</snippet></ROW><ROW><id>18535920</id><snippet>datetime.strptime</snippet></ROW><ROW><id>18535920</id><snippet>'%Y-%m-%d %H:%M:%S'
</snippet></ROW><ROW><id>18535920</id><snippet>year-month-day hour:min:sec</snippet></ROW><ROW><id>18535920</id><snippet>import matplotlib.pyplot as plt
from matplotlib.dates import datetime as dt

raw_dates = ["2013-08-30 13:33:11", "2013-08-29 13:33:11", "2013-08-28 13:33:11"]
x = [dt.datetime.strptime(d, '%Y-%m-%d %H:%M:%S') for d in raw_dates]
y = [125, 120, 112]

plt.plot(x, y)
</snippet></ROW><ROW><id>18535920</id><snippet>import matplotlib.pyplot as plt
from matplotlib.dates import datetime as dt
from matplotlib.dates import DateFormatter

formatter = DateFormatter('%m-%d')

f = plt.figure()
ax = f.add_subplot(111)

raw_dates = ["2013-08-30 13:33:11", "2013-08-29 13:33:11", "2013-08-28 13:33:11"]
x = [dt.datetime.strptime(d, '%Y-%m-%d %H:%M:%S') for d in raw_dates]
y = [125, 120, 112]
ax.plot(x, y)

ax.xaxis.set_major_formatter(formatter)
plt.show()
</snippet></ROW><ROW><id>18536055</id><snippet>django.core.serializers</snippet></ROW><ROW><id>18536055</id><snippet>django.forms.model_to_dict</snippet></ROW><ROW><id>18536055</id><snippet>django.core.serializers.json.DjangoJSONEncoder</snippet></ROW><ROW><id>18536055</id><snippet>for indicator in indicators:
    score_data = {}
    score_data["indicator"] = model_to_dict(indicator)
    score_data["score"] = evaluation.indicator_percent_score(indicator.id)
    score_data["score_descriptor"] = \
        model_to_dict(form.getDescriptorByPercent(score_data["score"]), 
            fields=("order", "value", "title"))

    scores.append(score_data)
scores = json.dumps(scores, cls=DjangoJSONEncoder)
</snippet></ROW><ROW><id>18536055</id><snippet>django.core.serializers</snippet></ROW><ROW><id>18536055</id><snippet>json.dumps</snippet></ROW><ROW><id>18536055</id><snippet>json.dumps</snippet></ROW><ROW><id>18536055</id><snippet>DjangoJSONEncoder</snippet></ROW><ROW><id>18536224</id><snippet>os.path.exists</snippet></ROW><ROW><id>18536224</id><snippet>os.isfile</snippet></ROW><ROW><id>18536224</id><snippet>Firefox</snippet></ROW><ROW><id>18536224</id><snippet>about:config</snippet></ROW><ROW><id>18536224</id><snippet>browser.download.dir</snippet></ROW><ROW><id>18536224</id><snippet>profile.set_preference</snippet></ROW><ROW><id>18536224</id><snippet>profile.set_preference("browser.download.folderList",2</snippet></ROW><ROW><id>18536224</id><snippet>2</snippet></ROW><ROW><id>18536224</id><snippet>0</snippet></ROW><ROW><id>18536224</id><snippet>1</snippet></ROW><ROW><id>18536224</id><snippet>2</snippet></ROW><ROW><id>18536234</id><snippet>db = shelve.open('store',writeback=True)</snippet></ROW><ROW><id>18536234</id><snippet>'store'</snippet></ROW><ROW><id>18536234</id><snippet>writeback=True</snippet></ROW><ROW><id>18536234</id><snippet>temp = db['some variable']</snippet></ROW><ROW><id>18536234</id><snippet>some value</snippet></ROW><ROW><id>18536234</id><snippet>temp.append(another
value)</snippet></ROW><ROW><id>18536234</id><snippet>db['some variable'] =
temp</snippet></ROW><ROW><id>18536234</id><snippet>db['some variable'] = another value'</snippet></ROW><ROW><id>18536234</id><snippet>class Update_MyStore(MyStore):
    def __init__(self, store):
        db = shelve.open(store)
        for i in db:
            setattr(self, i, db[i])
        self.items()
        self.store_in_db()
Update_MyStore('store')
</snippet></ROW><ROW><id>18536234</id><snippet>while True:
    store = shelve.open('store',writeback = True)
    Item = input('Enter an item: ').capitalize() #I prefer str(raw_input('Question '))
    if not Item or Item == 'Break':
        break
    store['item_quantity'][Item] = int(input(('Enter the number of {0} available in the store: ').format(Item)))
    store['item_rate'][Item] = float(input(('Enter the rate of {0}: ').format(Item)))
    store.sync()
    store.close()
</snippet></ROW><ROW><id>18536319</id><snippet># app.yaml
- url: /rest/.*
  script: main.app

# main.py
class PageHandler(webapp2.RequestHandler):
    def get(self, page):
        if not page.endswith('.html'):
            page += '.html'
        self.response.write(self.jinja2.render_template(page))

app = webapp2.WSGIApplication([
    webapp2.RedirectRoute('/rest/&lt;page&gt;', PageHandler, name='page'),
], debug=True)
</snippet></ROW><ROW><id>18536824</id><snippet>import re

f = open("machinelist.txt", 'r')
lines = f.readlines()
for host in lines:
    hostnames = host.strip()
    if hostnames.startswith('\\'):
        print(re.match(r'\\\\(\S+)',hostnames).group(1))
</snippet></ROW><ROW><id>18536824</id><snippet>TESTHOSTDEV01
TESTHOSTDEVDB01
TESTHOSTDEVDBQA
TESTHOSTDEVQA02
BTLCMOODY01
BTLCSTG05
BTLCWEB02
BTLCWSUS01
HIMSAPP01
SLVAPP01
TORAAPP01
HNSVAPP01
TESAPP01
</snippet></ROW><ROW><id>18537047</id><snippet>{"code": # some int
 "name": # some str
  none / "country" / "place" / whatever # some dict or list
</snippet></ROW><ROW><id>18537047</id><snippet>def foo(my_dict):
    if my_dict['code'] == root['place']:
        city = my_dict['name']
    elif "country" in my_dict:
        city = foo(my_dict['country'])
    elif "place" in my_dict:
        # 
        # and so on...
    else:
        city = None
    return city
</snippet></ROW><ROW><id>18537140</id><snippet>open</snippet></ROW><ROW><id>18537140</id><snippet>os.system("open -a iTunes")
</snippet></ROW><ROW><id>18537174</id><snippet>itertools.groupby()</snippet></ROW><ROW><id>18537174</id><snippet>import itertools

c = [1,1,1,1,2,3,1,1,1,2,1]

class group_by_sum:
    def __init__(self, target):
        self.target = 3
        self.current = False
        self.sum = 0

    def __call__(self, item):
        self.sum += item
        if self.sum &gt; self.target:
            self.sum = item
            self.current = not self.current
        return self.current

    def group(self, iterable):
        return [tuple(items) for _, items in itertools.groupby(iterable, self)]

&gt;&gt;&gt; group_by_sum(3).group(c)

[(1, 1, 1), (1, 2), (3,), (1, 1, 1), (2, 1)]
</snippet></ROW><ROW><id>18537174</id><snippet>def chunk_to_sum(iterable, target):
    chunk_sum = 0
    chunk = []
    for item in iterable:
        chunk_sum += item
        if chunk_sum &gt; target:
            yield chunk
            chunk = [item]
            chunk_sum = item
        else:
            chunk.append(item)
    if chunk: yield chunk

&gt;&gt;&gt; list(chunk_to_sum([1, 1, 1, 1, 2, 3, 1, 1, 1, 2, 1], 3))
[[1, 1, 1], [1, 2], [3], [1, 1, 1], [2, 1]]
</snippet></ROW><ROW><id>18537498</id><snippet>View.as_view</snippet></ROW><ROW><id>18537570</id><snippet>requests</snippet></ROW><ROW><id>18537570</id><snippet>urllib2</snippet></ROW><ROW><id>18537570</id><snippet>import requests

r = requests.get('http://192.168.1.1/basic/home_dhcplist.htm', auth=('username', 'password'))

if 'Prasads' in r.text():
    print "found"
else:
    print "not found"
</snippet></ROW><ROW><id>18537604</id><snippet>#0  0x00002aaaaab243a0 in PyLong_AsDouble ()
   from libpython2.7.so.1.0
#1  0x00002aaaaab2447a in ?? ()
   from libpython2.7.so.1.0
#2  0x00002aaaaaaf8357 in PyNumber_Float ()
   from libpython2.7.so.1.0
#3  0x00002aaaae71acdc in MyPyFloat_AsDouble (obj=0x2aaaaae93c00)
    at numpy/core/src/multiarray/arraytypes.c.src:40
#4  0x00002aaaae71adfc in LONGDOUBLE_setitem (op=0x2aaaaae93c00, 
    ov=0xc157b0 "", ap=0xbf6ca0)
    at numpy/core/src/multiarray/arraytypes.c.src:278
#5  0x00002aaaae705c82 in PyArray_FromAny (op=0x2aaaaae93c00, 
    newtype=0x2aaaae995960, min_depth=&lt;value optimized out&gt;, max_depth=0, 
    flags=0, context=&lt;value optimized out&gt;)
    at numpy/core/src/multiarray/ctors.c:1664
#6  0x00002aaaae7300ad in longdouble_arrtype_new (type=0x2aaaae9938a0, 
    args=&lt;value optimized out&gt;, __NPY_UNUSED_TAGGEDkwds=&lt;value optimized out&gt;)
    at numpy/core/src/multiarray/scalartypes.c.src:2545
</snippet></ROW><ROW><id>18537604</id><snippet>long</snippet></ROW><ROW><id>18537604</id><snippet>2**64 + 2</snippet></ROW><ROW><id>18537604</id><snippet>float</snippet></ROW><ROW><id>18537604</id><snippet>long</snippet></ROW><ROW><id>18537604</id><snippet>long</snippet></ROW><ROW><id>18537604</id><snippet>np.longdouble</snippet></ROW><ROW><id>18537625</id><snippet>strip()</snippet></ROW><ROW><id>18537625</id><snippet>plt.plot()</snippet></ROW><ROW><id>18537625</id><snippet>label_from_txt_file = label_from_txt_file.strip()
plt.plot(range(2), line, label=label_from_txt_file)
</snippet></ROW><ROW><id>18537625</id><snippet>'\n'</snippet></ROW><ROW><id>18537752</id><snippet>In [19]: list_1 = [[1,3,5], [7,4,9], [3,6,2], [5,4,7]]
In [22]: np.mean(list_1, 0)
Out[22]: array([ 4.  ,  4.25,  5.75])
</snippet></ROW><ROW><id>18537929</id><snippet>&gt;&gt;&gt; from itertools import combinations
&gt;&gt;&gt; seq_len = 6
&gt;&gt;&gt; _0_count = 2
&gt;&gt;&gt; positions = range(seq_len)
&gt;&gt;&gt; _0_positions = combinations(positions, _0_count)
&gt;&gt;&gt; [[0 if i in zpos else 1 for i in positions] for zpos in _0_positions]
[[0, 0, 1, 1, 1, 1],
 [0, 1, 0, 1, 1, 1],
 [0, 1, 1, 0, 1, 1],
 [0, 1, 1, 1, 0, 1],
 [0, 1, 1, 1, 1, 0],
 [1, 0, 0, 1, 1, 1],
 [1, 0, 1, 0, 1, 1],
 [1, 0, 1, 1, 0, 1],
 [1, 0, 1, 1, 1, 0],
 [1, 1, 0, 0, 1, 1],
 [1, 1, 0, 1, 0, 1],
 [1, 1, 0, 1, 1, 0],
 [1, 1, 1, 0, 0, 1],
 [1, 1, 1, 0, 1, 0],
 [1, 1, 1, 1, 0, 0]]
</snippet></ROW><ROW><id>18538292</id><snippet>DEFAULT_FILE_STORAGE</snippet></ROW><ROW><id>18538292</id><snippet>STATICFILES_STORAGE</snippet></ROW><ROW><id>18538292</id><snippet>DEFAULT_FILE_STORAGE = 'storages.backends.s3boto.S3BotoStorage'
STATICFILES_STORAGE = 'storages.backends.s3boto.S3BotoStorage'
</snippet></ROW><ROW><id>18538292</id><snippet>AWS_STORAGE_BUCKET_NAME</snippet></ROW><ROW><id>18538292</id><snippet>S3BotoStorage</snippet></ROW><ROW><id>18538292</id><snippet>from django.conf import settings

from storages.backends.s3boto import S3BotoStorage

class S3StaticStorage(S3BotoStorage):

    def __init__(self, *args, **kwargs):
        kwargs['bucket']  = settings.AWS_STATIC_BUCKET_NAME
        super(S3StaticStorage, self).__init__(*args, **kwargs)
</snippet></ROW><ROW><id>18538292</id><snippet>AWS_STATIC_BUCKET_NAME</snippet></ROW><ROW><id>18538292</id><snippet>AWS_STATIC_BUCKET_NAME</snippet></ROW><ROW><id>18538292</id><snippet>STATICFILES_STORAGE = 'dotted.path.to.storage.S3StaticStorage'
</snippet></ROW><ROW><id>18538292</id><snippet>AWS_QUERYSTRING_AUTH</snippet></ROW><ROW><id>18538292</id><snippet>AWS_S3_CUSTOM_DOMAIN</snippet></ROW><ROW><id>18538292</id><snippet>AWS_PRELOAD_METADATA</snippet></ROW><ROW><id>18538301</id><snippet>for i in range(10):
    print i
</snippet></ROW><ROW><id>18538301</id><snippet>IndentationError</snippet></ROW><ROW><id>18538301</id><snippet>for i in range(10):
print i
</snippet></ROW><ROW><id>18538341</id><snippet>def calc_md5(self,file_path):
    hash = hashlib.md5()
    with open(file_path, 'rb') as file_to_check:
        for chunk in iter(lambda: file_to_check.read(4096), ''):    
            hash.update(chunk)

    return hash.hexdigest()
</snippet></ROW><ROW><id>18538341</id><snippet>iter()</snippet></ROW><ROW><id>18538345</id><snippet>&gt;&gt;&gt; scipy.fftpack.fft(np.arange(8))
array([ 28.+0.j        ,  -4.+9.65685425j,  -4.+4.j        ,
        -4.+1.65685425j,  -4.+0.j        ,  -4.-1.65685425j,
        -4.-4.j        ,  -4.-9.65685425j])
&gt;&gt;&gt; a = scipy.fftpack.rfft(np.arange(8))
&gt;&gt;&gt; a
array([ 28.        ,  -4.        ,   9.65685425,  -4.        ,
         4.        ,  -4.        ,   1.65685425,  -4.        ])
&gt;&gt;&gt; a.dtype
dtype('float64')
&gt;&gt;&gt; a[1:-1].view(np.complex128) # First and last entries are real
array([-4.+9.65685425j, -4.+4.j        , -4.+1.65685425j])
</snippet></ROW><ROW><id>18538345</id><snippet>&gt;&gt;&gt; scipy.fftpack.fft(np.arange(7))
array([ 21.0+0.j        ,  -3.5+7.26782489j,  -3.5+2.79115686j,
        -3.5+0.79885216j,  -3.5-0.79885216j,  -3.5-2.79115686j,
        -3.5-7.26782489j])
&gt;&gt;&gt; a = scipy.fftpack.rfft(np.arange(7))
&gt;&gt;&gt; a
array([ 21.        ,  -3.5       ,   7.26782489,  -3.5       ,
         2.79115686,  -3.5       ,   0.79885216])
&gt;&gt;&gt; a.dtype
dtype('float64')
&gt;&gt;&gt; a[1:].view(np.complex128)
array([-3.5+7.26782489j, -3.5+2.79115686j, -3.5+0.79885216j])
</snippet></ROW><ROW><id>18538397</id><snippet>background.save("result.png")
</snippet></ROW><ROW><id>18538416</id><snippet>favicon.ico</snippet></ROW><ROW><id>18538416</id><snippet>from tkinter import *
root = Tk()

root.iconbitmap(r'c:\Python32\DLLs\py.ico')
root.mainloop()
</snippet></ROW><ROW><id>18538416</id><snippet>from tkinter import *
root = Tk()

root.iconbitmap('py.ico')
root.mainloop()
</snippet></ROW><ROW><id>18538477</id><snippet>&gt;&gt;&gt; import scipy.ndimage.filters as filter

&gt;&gt;&gt; a=np.arange(5,dtype=np.double)
&gt;&gt;&gt; filter.uniform_filter(a,size=3)
array([ 0.33333333,  1.        ,  2.        ,  3.        ,  3.66666667])

#What this is actually doing
&gt;&gt;&gt; np.mean([0,0,1]) #ind0
0.33333333333333331
&gt;&gt;&gt; np.mean([0,1,2]) #ind1
1.0
&gt;&gt;&gt; np.mean([1,2,3]) #ind2
2.0
</snippet></ROW><ROW><id>18538477</id><snippet>&gt;&gt;&gt; filter.uniform_filter(a,size=5)
array([ 0.8,  1.2,  2. ,  2.8,  3.2])
</snippet></ROW><ROW><id>18538477</id><snippet>def stride_mean(arr,stride):
    extra = arr.shape[0]%stride
    if extra==0:
        return np.mean(arr.reshape(-1,stride),axis=1)
    else:
        toslice = arr.shape[0]-extra
        first = np.mean(arr[:toslice].reshape(-1,stride),axis=1)
        rest = np.mean(arr[toslice:])
        return np.hstack((first,rest))

print pre_array
[ 0.50712539  0.75062019  0.78681352  0.35659332]

print stride_mean(pre_array,3)
[ 0.6815197   0.35659332]
</snippet></ROW><ROW><id>18538981</id><snippet>&gt;&gt;&gt; l = [1, 9, 44, 999999999]
&gt;&gt;&gt; [(l[i] + int(i != 0), l[i + 1]) for i in xrange(len(l) - 1)]
[(1, 9), (10, 44), (45, 999999999)]
</snippet></ROW><ROW><id>18538981</id><snippet>xrange</snippet></ROW><ROW><id>18538981</id><snippet>range</snippet></ROW><ROW><id>18538981</id><snippet>&gt;&gt;&gt; l = [9, 44, 109]
&gt;&gt;&gt; low, high = 1, 999999999
&gt;&gt;&gt; l = [low] + l + [high]
&gt;&gt;&gt; [(l[i] + int(i != 0), l[i + 1]) for i in xrange(len(l) - 1)]
[(1, 9), (10, 44), (45, 109), (110, 999999999)]
</snippet></ROW><ROW><id>18539255</id><snippet>i</snippet></ROW><ROW><id>18539255</id><snippet>j</snippet></ROW><ROW><id>18539255</id><snippet>i</snippet></ROW><ROW><id>18539255</id><snippet>&gt;&gt;&gt; dict(j=2, i=1)
{'i': 1, 'j': 2}
</snippet></ROW><ROW><id>18539255</id><snippet>{...}</snippet></ROW><ROW><id>18539255</id><snippet>dict()</snippet></ROW><ROW><id>18539255</id><snippet>i</snippet></ROW><ROW><id>18539255</id><snippet>a</snippet></ROW><ROW><id>18539255</id><snippet>&gt;&gt;&gt; dict(i=1, a=2)
{'a': 2, 'i': 1}
&gt;&gt;&gt; {'i': 1, 'a': 2}
{'i': 1, 'a': 2}
</snippet></ROW><ROW><id>18539507</id><snippet>body = capture(self.body)</snippet></ROW><ROW><id>18539507</id><snippet>content.body()</snippet></ROW><ROW><id>18539538</id><snippet>foos = doc.find('foos')
for foo in foos:
    for text in foo.itertext():
        print text.strip(),
    print
</snippet></ROW><ROW><id>18539548</id><snippet>&lt;select name="startAddr"&gt;
    &lt;option value=""&gt;-----------&lt;/option&gt;
    {% for location in form.fields.startAddr.queryset %}    
        &lt;option value = "{ location.location_name }"&gt;{{location.location_name}}&lt;/option&gt;
    {% end for %}
&lt;/select&gt;
</snippet></ROW><ROW><id>18539548</id><snippet>&lt;div&gt;Start Address&lt;/div&gt;
{{ form.startAddr }}
</snippet></ROW><ROW><id>18539634</id><snippet>__file__</snippet></ROW><ROW><id>18539634</id><snippet>&gt;&gt;&gt; import genericpath
&gt;&gt;&gt; genericpath.__file__
 '/opt/local/Library/Frameworks/Python.framework/Versions/2.6/lib/python2.6/genericpath.pyc'
</snippet></ROW><ROW><id>18539719</id><snippet>def custom_path(instance, filename):
    path = os.path.join('upload', 'media', slugify(instance.student.user.username))
    try:
        os.path.mkdir(path)
    except OSError:
        # path already exists
        pass
</snippet></ROW><ROW><id>18539719</id><snippet>slugify</snippet></ROW><ROW><id>18539719</id><snippet>os.path.mkdir</snippet></ROW><ROW><id>18539719</id><snippet>OSError</snippet></ROW><ROW><id>18539719</id><snippet>os.path.join</snippet></ROW><ROW><id>18540064</id><snippet>re.compile("&lt;img src='([^']*)jpg'")
</snippet></ROW><ROW><id>18540064</id><snippet>for image in soup.find_all('img', src=True):
    print image['src']
</snippet></ROW><ROW><id>18540064</id><snippet>&lt;img /&gt;</snippet></ROW><ROW><id>18540064</id><snippet>src</snippet></ROW><ROW><id>18540380</id><snippet>import os

dir='e:\www\files\delivery'

for root, dirs, files in os.walk(dir):
  for name in files:
    if name.endswith(("_thumb.jpg")):
      os.remove(os.path.join(root, name))
</snippet></ROW><ROW><id>18540427</id><snippet>oneway</snippet></ROW><ROW><id>18540427</id><snippet>void</snippet></ROW><ROW><id>18540427</id><snippet>service MyService {
    //returns immediately
    oneway void onewayMethod(&lt;params&gt;);

    //blocks until completion
    void normalMethod(&lt;params&gt;);
}
</snippet></ROW><ROW><id>18540457</id><snippet>print ''.join([chr(ord(letter) + 5) for letter in word])
</snippet></ROW><ROW><id>18540635</id><snippet>from path import *
</snippet></ROW><ROW><id>18540635</id><snippet>path</snippet></ROW><ROW><id>18540635</id><snippet>PYTHONPATH</snippet></ROW><ROW><id>18540635</id><snippet>PYTHONPATH</snippet></ROW><ROW><id>18540635</id><snippet>type(os.path)
</snippet></ROW><ROW><id>18540635</id><snippet>os</snippet></ROW><ROW><id>18540635</id><snippet>PYTHONPATH</snippet></ROW><ROW><id>18540635</id><snippet>from x import y</snippet></ROW><ROW><id>18540635</id><snippet>y</snippet></ROW><ROW><id>18540635</id><snippet>x</snippet></ROW><ROW><id>18540719</id><snippet>apply</snippet></ROW><ROW><id>18540719</id><snippet>axis=1</snippet></ROW><ROW><id>18540719</id><snippet>pattern</snippet></ROW><ROW><id>18540719</id><snippet>In [3]: def func(row, pattern):
            referrer = np.nan
            for key in row.index:
                if row[key] == pattern:
                    referrer = key
            return referrer
        df['last_referred'] = df.apply(func, pattern='referred', axis=1)
        df
Out[3]:     name    action_1  action_2  action_3 last_referred
        0   bill    referred  referred      None      action_2
        1    bob  introduced  referred  referred      action_3
        2   mary  introduced                               NaN
        3   june  introduced  referred                action_2
        4   dale    referred                          action_1
        5  donna  introduced                               NaN
</snippet></ROW><ROW><id>18540913</id><snippet>if dieornot == "ja" or "y":
</snippet></ROW><ROW><id>18540913</id><snippet>if dieornot == "ja" or dieornot == "y":
</snippet></ROW><ROW><id>18540913</id><snippet>if dieornot in ("ja", "y"):
</snippet></ROW><ROW><id>18540971</id><snippet>val = []
for c in range(len(x)//4):
    val.append(x[c*4:c*4+4])

for a, b, c, d in val:

    ...  do something with a, b, c, d  ...
</snippet></ROW><ROW><id>18540971</id><snippet>x = ['1', '1377877381', 'off', '0', 
     '2', '1377886582', 'on', '0', 
     '3', '1376238596', 'off', '0', 
     '4', '1377812526', 'off', '0']
</snippet></ROW><ROW><id>18540971</id><snippet>val</snippet></ROW><ROW><id>18540971</id><snippet>[['1', '1377877381', 'off', '0'],
 ['2', '1377886582', 'on', '0'],
 ['3', '1376238596', 'off', '0'],
 ['4', '1377812526', 'off', '0']]
</snippet></ROW><ROW><id>18540971</id><snippet>map()</snippet></ROW><ROW><id>18540971</id><snippet>lambda</snippet></ROW><ROW><id>18540971</id><snippet>val = map(lambda y: x[y*4:y*4+4], range(len(x)//4))
</snippet></ROW><ROW><id>18540971</id><snippet>for a, b, c, d in map(lambda y: x[y*4:y*4+4], range(len(x)//4)):

    ...  more code ...
</snippet></ROW><ROW><id>18540971</id><snippet>itertools.imap()</snippet></ROW><ROW><id>18540971</id><snippet>xrange()</snippet></ROW><ROW><id>18540971</id><snippet>from itertools import imap

for a, b, c, d in imap(lambda y: x[y*4:y*4+4], xrange(len(x)//4)):

    ...  more code  ...
</snippet></ROW><ROW><id>18541060</id><snippet>show_double(value)</snippet></ROW><ROW><id>18541060</id><snippet>value</snippet></ROW><ROW><id>18541060</id><snippet>def show_double(number):</snippet></ROW><ROW><id>18541060</id><snippet>number</snippet></ROW><ROW><id>18541060</id><snippet>5</snippet></ROW><ROW><id>18541060</id><snippet>main</snippet></ROW><ROW><id>18541060</id><snippet>show_double</snippet></ROW><ROW><id>18541060</id><snippet>main</snippet></ROW><ROW><id>18541232</id><snippet>import psutil,os
self_process = psutil.Process(os.getpid())
self_process.get_cpu_affinity()
# [0,1] - i have 2 core cpu and process can load both cores
self_process.set_cpu_affinity([1])
# now this process can load only one core #1
</snippet></ROW><ROW><id>18541306</id><snippet>format</snippet></ROW><ROW><id>18541306</id><snippet>os.system('/sw/bin/python2.7 program1.py -i Users/Steve/Desktop/{}   -o  Users/Steve/Desktop/{}'.format(inputFile),.format(outputFile))
</snippet></ROW><ROW><id>18541306</id><snippet>system</snippet></ROW><ROW><id>18541306</id><snippet>.format(outputFile)</snippet></ROW><ROW><id>18541306</id><snippet>os.system('/sw/bin/python2.7 program1.py -i Users/Steve/Desktop/{}   -o  Users/Steve/Desktop/{}'.format(inputFile, outputFile))
</snippet></ROW><ROW><id>18541306</id><snippet>multiprocessing</snippet></ROW><ROW><id>18541306</id><snippet>os.system</snippet></ROW><ROW><id>18541306</id><snippet>sys.executable</snippet></ROW><ROW><id>18541306</id><snippet>os.system</snippet></ROW><ROW><id>18541306</id><snippet>subprocess</snippet></ROW><ROW><id>18541306</id><snippet>subprocess.call([sys.executable, 'program1.py',
                 '-i', 'Users/Steve/Desktop/{}'.format(inputfile),
                 '-o', 'Users/Steve/Desktop/{}'.format(outputfile)])
</snippet></ROW><ROW><id>18541306</id><snippet>'/'</snippet></ROW><ROW><id>18541306</id><snippet>/</snippet></ROW><ROW><id>18541306</id><snippet>os.path.join('/Users/Steve/Desktop', inputfile)</snippet></ROW><ROW><id>18541306</id><snippet>pyobjc</snippet></ROW><ROW><id>18541306</id><snippet>desktop = AppKit.NSSearchPathForDirectoriesInDomains(AppKit.NSDesktopDirectory,
                                                     AppKit.NSUserDomainMask, 
                                                     True)[0]
</snippet></ROW><ROW><id>18541344</id><snippet>t = datetime(
    2013, 5, 11, hour=11, minute=0,
    tzinfo=pytz.timezone('Europe/Warsaw')
)
</snippet></ROW><ROW><id>18541344</id><snippet>t = pytz.timezone('Europe/Warsaw').localize(
        datetime(2013, 5, 11, hour=11, minute=0))
</snippet></ROW><ROW><id>18541691</id><snippet>my_list = [('key1', 'topic1', 'content1'), ('key2', 'topic1', 'content2'), ('key3', 'topic2', 'content3')]

result={}
for t in my_list:
    result.setdefault(t[1],[]).append(t[2])

print result    
</snippet></ROW><ROW><id>18541692</id><snippet>libmagic</snippet></ROW><ROW><id>18541692</id><snippet>file</snippet></ROW><ROW><id>18541799</id><snippet> players["player_" + str(x)] = Player(input("Name"), input("Starting Wealth"), x)
</snippet></ROW><ROW><id>18541799</id><snippet> players["player_{}".format(x)] = Player(input("Name"), input("Starting Wealth"), x)
</snippet></ROW><ROW><id>18541799</id><snippet>player_</snippet></ROW><ROW><id>18541799</id><snippet>0</snippet></ROW><ROW><id>18541799</id><snippet>Player_count</snippet></ROW><ROW><id>18541799</id><snippet>x</snippet></ROW><ROW><id>18541952</id><snippet>jug</snippet></ROW><ROW><id>18541952</id><snippet>bottle</snippet></ROW><ROW><id>18541952</id><snippet>jug33</snippet></ROW><ROW><id>18541952</id><snippet>bottle</snippet></ROW><ROW><id>18541952</id><snippet>def replace_all(text, dic):
    for i, j in sorted(dic.iteritems(), key=lambda i: len(i[0]), reverse=True):
        text = text.replace(i, j)
    return text
</snippet></ROW><ROW><id>18541952</id><snippet>&gt;&gt;&gt; def replace_all(text, dic):
...     for i, j in dic.iteritems():
...         text = text.replace(i, j)
...     return text
... 
&gt;&gt;&gt; replace_all('jug33 jug', mydict)
'bottle33 bottle'
&gt;&gt;&gt; def replace_all(text, dic):
...     for i, j in sorted(dic.iteritems(), key=lambda i: len(i[0]), reverse=True):
...         text = text.replace(i, j)
...     return text
... 
&gt;&gt;&gt; replace_all('jug33 jug', mydict)
'bottle bottle'
</snippet></ROW><ROW><id>18541978</id><snippet>class Bill(models.Model):
    serial = models.IntegerField(default=lambda: Bill.objects.latest('id').serial + 1)
    # ...
</snippet></ROW><ROW><id>18542115</id><snippet>not final</snippet></ROW><ROW><id>18542115</id><snippet>if not final:
    print "You need to type something in..."
</snippet></ROW><ROW><id>18542115</id><snippet>if not final.strip():
    print "You need to type something in..."
</snippet></ROW><ROW><id>18542115</id><snippet>ValueError</snippet></ROW><ROW><id>18542115</id><snippet>final = raw_input("We will only cube numbers that are divisible by 3?")
try:
    final = int(final)
except ValueError:
    print "You need to type in a valid integer number!"
else:
    # code to execute when `final` was correctly interpreted as an integer.
</snippet></ROW><ROW><id>18542206</id><snippet>key: value</snippet></ROW><ROW><id>18542206</id><snippet>self.dict = {
    'Compressed Files': [
        {'7-zip': [ "777", "7z", "7zip", "7-zip", "lzma"]},
        {'8-zip': [ "bzip2", "tbz", "tbz2" ]},
        {'Norton': ["gho", "ghs", "v2i"]}
    ]
}
</snippet></ROW><ROW><id>18542206</id><snippet>self.dict = {
    'Compressed Files': {'7-zip': [ "777", "7z", "7zip", "7-zip", "lzma"]},
    'New Key 1': {'8-zip': [ "bzip2", "tbz", "tbz2" ]},
    'New Key 2': {'Norton': ["gho", "ghs", "v2i"]}
}
</snippet></ROW><ROW><id>18542338</id><snippet>from rpy2.robjects import pandas2ri
pandas2ri.activate()
</snippet></ROW><ROW><id>18542446</id><snippet>rpy2.robjects.lib.ggplot2</snippet></ROW><ROW><id>18542446</id><snippet>import rpy2.robjects.lib.ggplot2 as ggplot2

class ThemeClassic(ggplot2.Theme):
    _constructor = ggplot2.ggplot2.theme_classic
    @classmethod
    def new(cls):
        res = cls(cls._constructor())
        return res

# Monkey patching ggplot2
ggplot2.theme_classic = ThemeClassic.new
</snippet></ROW><ROW><id>18542459</id><snippet>from wsgiref.simple_server import make_server
</snippet></ROW><ROW><id>18542610</id><snippet>text</snippet></ROW><ROW><id>18542610</id><snippet>stmtrn.find('FITID').text</snippet></ROW><ROW><id>18542610</id><snippet>stmtrn.find('FITID')</snippet></ROW><ROW><id>18542610</id><snippet>fitid.text = ....</snippet></ROW><ROW><id>18542610</id><snippet>fitid = stmtrn.find('DTPOSTED')</snippet></ROW><ROW><id>18542610</id><snippet>from xml.etree import ElementTree as et

datafile = 'statement20130805.ofx'

tree = et.parse(datafile)
root = tree.getroot()
for stmtrn in root.iter('STMTTRN'):
  amount = stmtrn.find('TRNAMT').text
  date = stmtrn.find('DTPOSTED').text

  print "amount: ", (amount.split('.')[0])[1:]
  amount = (amount.split('.')[0])[1:]

  fitid = stmtrn.find('FITID')
  fitid.text = (date + amount).ljust(12,'0')
  print 'New fitid: ', fitid.text

tree.write(datafile+'new')
</snippet></ROW><ROW><id>18542638</id><snippet>def readn(sock, n):
    buf = ''
    while n &gt; len(buf):
        newbuf = sock.recv(n - len(buf))
        if not newbuf:
            raise something
        buf += newbuf
    return buf

def readmsg(sock):
    msgtype = readn(sock, 4).decode('ascii')
    size = struct.unpack('!I', readn(sock, 4))
    data = readn(sock, size)
    return msgtype, size, data
</snippet></ROW><ROW><id>18542638</id><snippet>recv</snippet></ROW><ROW><id>18542638</id><snippet>yield from</snippet></ROW><ROW><id>18542638</id><snippet>def readn(sock, n, callback):
    buf = ''
    def on_recv(newbuf):
        nonlocal buf, callback
        if not newbuf:
            callback(None, some error)
            return
        buf += newbuf
        if len(buf) == n:
            callback(buf)
        async_read(sock, n - len(buf), on_recv)
    async_read(sock, n, on_recv)

def readmsg(sock, callback):
    msgtype, size = None, None
    def on_recv_data(buf, err=None):
        nonlocal data
        if err: callback(None, err)
        callback(msgtype, size, buf)
    def on_recv_size(buf, err=None):
        nonlocal size
        if err: callback(None, err)
        size = struct.unpack('!I', buf)
        readn(sock, size, on_recv_data)            
    def on_recv_msgtype(buf, err=None):
        nonlocal msgtype
        if err: callback(None, err)
        msgtype = buf.decode('ascii')
        readn(sock, 4, on_recv_size)
    readn(sock, 4, on_recv_msgtype)
</snippet></ROW><ROW><id>18542638</id><snippet>@inlineCallbacks</snippet></ROW><ROW><id>18542638</id><snippet>def squares(n):
    for i in range(n):
        yield i*i

def squares(n):
    class Iterator:
        def __init__(self):
            self.i = 0
        def __iter__(self):
            return self
        def __next__(self):
            i, self.i = self.i, self.i+1
            return i*i
    return Iterator(n)
</snippet></ROW><ROW><id>18542638</id><snippet>next</snippet></ROW><ROW><id>18542638</id><snippet>yield</snippet></ROW><ROW><id>18542638</id><snippet>yield</snippet></ROW><ROW><id>18542638</id><snippet>for</snippet></ROW><ROW><id>18542961</id><snippet>winpython</snippet></ROW><ROW><id>18542961</id><snippet>window-&gt;preferences-&gt;pydev-&gt;Interpreter python</snippet></ROW><ROW><id>18543054</id><snippet>keyboard_mode=dock</snippet></ROW><ROW><id>18543208</id><snippet>key='\x00System/Library/Frameworks/GameKit.framework/GameK',
</snippet></ROW><ROW><id>18543445</id><snippet>("abc")
</snippet></ROW><ROW><id>18543445</id><snippet>if "a" in ("abc",)
</snippet></ROW><ROW><id>18543457</id><snippet>str</snippet></ROW><ROW><id>18543457</id><snippet>str()</snippet></ROW><ROW><id>18543457</id><snippet>findAll</snippet></ROW><ROW><id>18543457</id><snippet>ResultSet</snippet></ROW><ROW><id>18543457</id><snippet>str</snippet></ROW><ROW><id>18543457</id><snippet>str</snippet></ROW><ROW><id>18543457</id><snippet>ResultSet</snippet></ROW><ROW><id>18543457</id><snippet>Tag</snippet></ROW><ROW><id>18543457</id><snippet>ResultSet</snippet></ROW><ROW><id>18543462</id><snippet>reversed</snippet></ROW><ROW><id>18543462</id><snippet>&gt;&gt;&gt; list_1 = [[1,2,3], [4,5,6], [0,1,2], [6,5,3]]
&gt;&gt;&gt; list(reversed(list_1))
[[6, 5, 3], [0, 1, 2], [4, 5, 6], [1, 2, 3]]
</snippet></ROW><ROW><id>18543462</id><snippet>[::-1]</snippet></ROW><ROW><id>18543462</id><snippet>&gt;&gt;&gt; list_1[::-1]
[[6, 5, 3], [0, 1, 2], [4, 5, 6], [1, 2, 3]]
</snippet></ROW><ROW><id>18543462</id><snippet>list_1</snippet></ROW><ROW><id>18543462</id><snippet>reverse</snippet></ROW><ROW><id>18543462</id><snippet>&gt;&gt;&gt; list_2 = list(list_1) # copy
&gt;&gt;&gt; list_2.reverse()
&gt;&gt;&gt; list_2
[[6, 5, 3], [0, 1, 2], [4, 5, 6], [1, 2, 3]]
</snippet></ROW><ROW><id>18543462</id><snippet>reversed</snippet></ROW><ROW><id>18543462</id><snippet>[::-1]</snippet></ROW><ROW><id>18543462</id><snippet>list.reverse</snippet></ROW><ROW><id>18543480</id><snippet>chan.basic_qos(0,1,False)
</snippet></ROW><ROW><id>18543710</id><snippet>import BaseHTTPServer
import os
import shutil
import sys

FILEPATH = sys.argv[1] if sys.argv[1:] else __file__

class SimpleHTTPRequestHandler(BaseHTTPServer.BaseHTTPRequestHandler):
    def do_GET(self):
        with open(FILEPATH, 'rb') as f:
            self.send_response(200)
            self.send_header("Content-Type", 'application/octet-stream')
            self.send_header("Content-Disposition", 'attachment; filename="{}"'.format(os.path.basename(FILEPATH)))
            fs = os.fstat(f.fileno())
            self.send_header("Content-Length", str(fs.st_size))
            self.end_headers()
            shutil.copyfileobj(f, self.wfile)

def test(HandlerClass=SimpleHTTPRequestHandler,
         ServerClass=BaseHTTPServer.HTTPServer,
         protocol="HTTP/1.0"):
    if sys.argv[2:]:
        port = int(sys.argv[2])
    else:
        port = 8000
    server_address = ('', port)

    HandlerClass.protocol_version = protocol
    httpd = BaseHTTPServer.HTTPServer(server_address, HandlerClass)

    sa = httpd.socket.getsockname()
    print "Serving HTTP on", sa[0], "port", sa[1], "...", FILEPATH
    httpd.serve_forever()

if __name__ == '__main__':
    test()
</snippet></ROW><ROW><id>18543710</id><snippet>python script_path [filepath_to_serve [port]]</snippet></ROW><ROW><id>18544068</id><snippet>&gt;&gt;&gt; n = 4
&gt;&gt;&gt; result = np.arange(1,5) + 2*np.arange(n)[:,None]
&gt;&gt;&gt; result
array([[ 1,  2,  3,  4],
       [ 3,  4,  5,  6],
       [ 5,  6,  7,  8],
       [ 7,  8,  9, 10]])
</snippet></ROW><ROW><id>18544068</id><snippet>numpy</snippet></ROW><ROW><id>18544068</id><snippet>&gt;&gt;&gt; np.arange(1,4+1)
array([1, 2, 3, 4])
</snippet></ROW><ROW><id>18544068</id><snippet>&gt;&gt;&gt; 2*np.arange(n)[:,None]
array([[0],
       [2],
       [4],
       [6]])
</snippet></ROW><ROW><id>18544068</id><snippet>L2G</snippet></ROW><ROW><id>18544068</id><snippet>n</snippet></ROW><ROW><id>18544068</id><snippet>array</snippet></ROW><ROW><id>18544068</id><snippet>matrix</snippet></ROW><ROW><id>18544153</id><snippet>#!/usr/bin/env python
</snippet></ROW><ROW><id>18544153</id><snippet>/path/to/your_script.py</snippet></ROW><ROW><id>18544153</id><snippet>/path/to/your_script.py arg1 arg2 [...]
</snippet></ROW><ROW><id>18544153</id><snippet>python /path/to/your_script.py arg1 arg2 [...]
</snippet></ROW><ROW><id>18544153</id><snippet>'</snippet></ROW><ROW><id>18544153</id><snippet>def shellquote(s):
    return "'" + s.replace("'", "'\\''") + "'"
</snippet></ROW><ROW><id>18544153</id><snippet>params = [shellquote(p) for p in l if os.path.splitext(p)[1] in EXT]
</snippet></ROW><ROW><id>18544378</id><snippet>from __future__ import unicode_literals
</snippet></ROW><ROW><id>18544378</id><snippet>" "</snippet></ROW><ROW><id>18544378</id><snippet>text = HtmlTool.to_nice_text(urllib.urlopen(url).read().decode("utf-8"))
</snippet></ROW><ROW><id>18544397</id><snippet>count = 0
while True:
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    sock.connect((sys.argv[1], 1387))
    count += 1
    sock.sendall(str(count) + "\n")
    time.sleep(1)
    data = sock.recv(1024)
    print "received:\n", str(data)
</snippet></ROW><ROW><id>18544532</id><snippet>except</snippet></ROW><ROW><id>18544532</id><snippet>except (urllib.error.HTTPError, http.client.IncompleteRead):
</snippet></ROW><ROW><id>18544532</id><snippet>except Exception:
</snippet></ROW><ROW><id>18544532</id><snippet>except Exception as x:
    print(x)
</snippet></ROW><ROW><id>18544720</id><snippet>import os
workpath = os.path.dirname(os.path.abspath(__file__)) #Returns the Path your .py file is in
c = open(os.path.join(workpath, 'file.csv'), 'rb')
reader = csv.reader(c)
rows = []
rownum = 0
for row in reader:
    # Skip header
    if rownum != 0:
        rows.append(row)
    rownum += 1
c.close()
return rows
</snippet></ROW><ROW><id>18544779</id><snippet>frontend</snippet></ROW><ROW><id>18544779</id><snippet>frontend-websocket</snippet></ROW><ROW><id>18544779</id><snippet>PUSH -&gt; [PULL-PUB] -&gt; SUB
</snippet></ROW><ROW><id>18544779</id><snippet>PUSH</snippet></ROW><ROW><id>18544779</id><snippet>backend</snippet></ROW><ROW><id>18544779</id><snippet>backend</snippet></ROW><ROW><id>18544779</id><snippet>PULL</snippet></ROW><ROW><id>18544779</id><snippet>frontend</snippet></ROW><ROW><id>18544779</id><snippet>PUB</snippet></ROW><ROW><id>18544779</id><snippet>SUB</snippet></ROW><ROW><id>18544779</id><snippet>forwarder.frontend</snippet></ROW><ROW><id>18544794</id><snippet>html_data = """
&lt;table&gt;
  &lt;tr&gt;
    &lt;td&gt;Card balance&lt;/td&gt;
    &lt;td&gt;$18.30&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;Card name&lt;/td&gt;
    &lt;td&gt;NAMEn&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;Account holder&lt;/td&gt;
    &lt;td&gt;NAME&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;Card number&lt;/td&gt;
    &lt;td&gt;1234&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;Status&lt;/td&gt;
    &lt;td&gt;Active&lt;/td&gt;
  &lt;/tr&gt;
&lt;/table&gt;
"""
</snippet></ROW><ROW><id>18544794</id><snippet>from bs4 import BeautifulSoup
table_data = [[cell.text for cell in row("td")]
                         for row in BeautifulSoup(html_data)("tr")]
</snippet></ROW><ROW><id>18544794</id><snippet>import json
print json.dumps(dict(table_data))
</snippet></ROW><ROW><id>18544794</id><snippet>{
    "Status": "Active",
    "Card name": "NAMEn",
    "Account holder":
    "NAME", "Card number": "1234",
    "Card balance": "$18.30"
}
</snippet></ROW><ROW><id>18544794</id><snippet>from collections import OrderedDict
import json
print json.dumps(OrderedDict(table_data))
</snippet></ROW><ROW><id>18544794</id><snippet>{
    "Card balance": "$18.30",
    "Card name": "NAMEn",
    "Account holder": "NAME",
    "Card number": "1234",
    "Status": "Active"
}
</snippet></ROW><ROW><id>18544914</id><snippet>QPointF</snippet></ROW><ROW><id>18544914</id><snippet>QPointF</snippet></ROW><ROW><id>18544914</id><snippet>import myBoostPythonModule
from PySide.QtCore import *
...
x=myBoostPythonModule.X('foo') # Boost.Python knows how to convert C++ X
                               # to Python X.  Python's type system does not.

w=QPointF()                    # Shiboken knows how to convert C++ QPointF to
                               # Python QPointF.  Python's type system does not.
print(w)                       # Shiboken knows how to represent C++ QPointF as
                               # a string.

y=x.getY()                     # Boost.Python knows how to invoke X::getY(),
                               # but only Shiboken knows how to convert C++
                               # QPointF to Python QPointF.  Thus, the TypeError
                               # exception is raised.
</snippet></ROW><ROW><id>18544914</id><snippet>#include &lt;iostream&gt;

#include &lt;boost/python.hpp&gt;

/// @brief Mockup Complex class from Shiboken documentation.
class Complex
{
public:
  Complex(double real, double imaginary)
    : real_(real),
      imaginary_(imaginary)
  {}

  double real() const      { return real_;      }
  double imaginary() const { return imaginary_; }

private:
  double real_;
  double imaginary_;
};

/// @brief Mocked up Shiboken converter.
namespace Shiboken {

template &lt;typename&gt; struct Converter;

template &lt;&gt; struct Converter&lt;Complex&gt;
{
public:
  // ...

  static inline bool isConvertible(PyObject* pyObj)
  {
    std::cout &lt;&lt; "Shiboken::Converter&lt;Complex&gt;::isConvertible()" &lt;&lt; std::endl;
    return PyComplex_Check(pyObj);
  }

  // ...

  static inline PyObject* toPython(const Complex&amp; cpx)
  {
    std::cout &lt;&lt; "Shiboken::Converter&lt;Complex&gt;::toPython()" &lt;&lt; std::endl;
    return PyComplex_FromDoubles(cpx.real(), cpx.imaginary());
  }

  static inline Complex toCpp(PyObject* pyobj)
  {
    std::cout &lt;&lt; "Shiboken::Converter&lt;Complex&gt;::toCpp()" &lt;&lt; std::endl;
    double real      =  PyComplex_RealAsDouble(pyobj);
    double imaginary =  PyComplex_ImagAsDouble(pyobj);
    return Complex(real, imaginary);
  }
};
} // namespace Shiboken

/// @brief Type used to convert a complex to Python.
struct complex_converter_to_python
{
  static PyObject* convert(const Complex&amp; c)
  {
    // Delegate to Shiboken.
    std::cout &lt;&lt; "complex_converter_to_python::convert()" &lt;&lt; std::endl;
    return Shiboken::Converter&lt;Complex&gt;::toPython(c);
  }
};

/// @brief Type that registers a Python Complex type to C++
///        Complex when passing through Boost.Python.
struct complex_converter_from_python
{
  /// @note Registers converter from a python complex to C++ complex.
  complex_converter_from_python()
  {
    boost::python::converter::registry::push_back(
      &amp;complex_converter_from_python::convertible,
      &amp;complex_converter_from_python::construct,
      boost::python::type_id&lt;Complex&gt;());
  }

  /// @brief Check if PyObject is a Complex.
  static void* convertible(PyObject* object)
  {
    // Delegate to Shiboken.  Based on the documentation, the
    // isConvertible function is gone, so explicit checking may
    // be required based on the version of Shiboken.
    std::cout &lt;&lt; "complex_converter_from_python::convertible()" &lt;&lt; std::endl;
    return Shiboken::Converter&lt;Complex&gt;::isConvertible(object)
      ? object 
      : NULL;
  }

  /// @brief Convert Python Complex to C++ Complex.
  static void construct(
    PyObject* object,
    boost::python::converter::rvalue_from_python_stage1_data* data)
  {
    // Obtain a handle to the memory block that the Boost.Python
    // converter has allocated for the C++ type.
    namespace python = boost::python;
    typedef python::converter::rvalue_from_python_storage&lt;Complex&gt;
                                                                storage_type;
    void* storage = reinterpret_cast&lt;storage_type*&gt;(data)-&gt;storage.bytes;

    // In-place construct a Complex type via copy-constructor, passing
    // in a Complex created from Shiboken.
    std::cout &lt;&lt; "complex_converter_from_python::construct()" &lt;&lt; std::endl;
    data-&gt;convertible = new (storage) Complex(
      Shiboken::Converter&lt;Complex&gt;::toCpp(object));
  }
};

/// @brief Factory function used to exercise to-python conversion.
Complex make_complex(double real, double imaginary)
{
  return Complex(real, imaginary);
}

/// @brief Printing function used to exercise from-python converison.
void print_complex(const Complex&amp; c)
{
  std::cout &lt;&lt; "In print_complex: "
            &lt;&lt; c.real() &lt;&lt; ", "
            &lt;&lt; c.imaginary() &lt;&lt; std::endl;
}

BOOST_PYTHON_MODULE(example)
{
  namespace python = boost::python;

  // Register Complex from python converter.
  complex_converter_from_python();

  // Register Complex to python converter.
  python::to_python_converter&lt;
    Complex,
    complex_converter_to_python&gt;();

  python::def("make_complex",  &amp;make_complex);
  python::def("print_complex", &amp;print_complex);
}
</snippet></ROW><ROW><id>18544914</id><snippet>&gt;&gt;&gt; import example
&gt;&gt;&gt; x = example.make_complex(4, 2)
complex_converter_to_python::convert()
Shiboken::Converter&lt;Complex&gt;::toPython()
&gt;&gt;&gt; example.print_complex(x)
complex_converter_from_python::convertible()
Shiboken::Converter&lt;Complex&gt;::isConvertible()
complex_converter_from_python::construct()
Shiboken::Converter&lt;Complex&gt;::toCpp()
In print_complex: 4, 2
</snippet></ROW><ROW><id>18544914</id><snippet>boost::python::object</snippet></ROW><ROW><id>18544914</id><snippet>boost::python::object X::getY()
{ 
  return boost::python::exec("QPointF()", ...); 
}
</snippet></ROW><ROW><id>18544914</id><snippet>QPointF</snippet></ROW><ROW><id>18544914</id><snippet>X::getY()</snippet></ROW><ROW><id>18545019</id><snippet>&lt;button type="submit" class="button" name="delete" value="delete"&gt;Delete&lt;/button&gt;
</snippet></ROW><ROW><id>18545019</id><snippet>def response_action(self, request, queryset):
    .....
    data = request.POST.copy()
    data['action']= 'delete_selected'
    data.pop(helpers.ACTION_CHECKBOX_NAME, None)
    data.pop("index", None)
    .....
def changelist_view(self, request, extra_context=None):
    ....
    if ('delete' in request.POST and request.method == 'POST'  and '_save' not in request.POST):
        if selected:
            response = self.response_action(request, queryset=cl.get_query_set(request))
            if response:
                return response
            else:
                action_failed = True
        else:
            msg = _("Items must be selected in order to perform "
                    "actions on them. No items have been changed.")
            self.message_user(request, msg)
            action_failed = True   
    ....
</snippet></ROW><ROW><id>18545148</id><snippet>import argparse

class Highlander(argparse.Action):
    def __call__(self, parser, namespace, values, option_string=None):
        if getattr(namespace, self.dest, None) is not None:
            raise argparse.ArgumentError(self, 'There can be only one.')
        setattr(namespace, self.dest, values)

parser = argparse.ArgumentParser()
parser.add_argument('-f', action=Highlander)
print (parser.parse_args('-f 1 -f 2'.split()))
</snippet></ROW><ROW><id>18545248</id><snippet>inspect.getargspec(func)</snippet></ROW><ROW><id>18545248</id><snippet>(args, varargs, keywords, defaults)</snippet></ROW><ROW><id>18545248</id><snippet>*</snippet></ROW><ROW><id>18545248</id><snippet>**</snippet></ROW><ROW><id>18545248</id><snippet>ArgSpec(args, varargs,
  keywords, defaults)</snippet></ROW><ROW><id>18545281</id><snippet>res = data.reshape(data.shape[0], data.shape[1], -1).mean(axis=2)
</snippet></ROW><ROW><id>18545281</id><snippet>axis</snippet></ROW><ROW><id>18545281</id><snippet>res = np.mean(data, axis=(2,3,4))
</snippet></ROW><ROW><id>18545345</id><snippet>...
("more_funky_numbers_7bytes", c_uint, 56),
...
</snippet></ROW><ROW><id>18545345</id><snippet>c_uint</snippet></ROW><ROW><id>18545345</id><snippet>ValueError: number of bits invalid for bit field
</snippet></ROW><ROW><id>18545345</id><snippet>from ctypes import *

class MyStructure(Structure):
    _fields_ = [
        # c_uint8 is 8 bits length
        ('a', c_uint8, 4), # first 4 bits of `a`
        ('b', c_uint8, 2), # next 2 bits of `a`
        ('c', c_uint8, 2), # next 2 bits of `a`
        ('d', c_uint8, 2), # since we are beyond the size of `a`
                           # new byte will be create and `d` will
                           # have the first two bits
    ]

mystruct = MyStructure()

mystruct.a = 0b0000
mystruct.b = 0b11
mystruct.c = 0b00
mystruct.d = 0b11

v = c_uint16()

# copy `mystruct` into `v`, I use Windows
cdll.msvcrt.memcpy(byref(v), byref(mystruct), sizeof(v))

print sizeof(mystruct) # 2 bytes, so 6 bits are left floating, you may
                       # want to memset with zeros
print bin(v.value)     # 0b1100110000
</snippet></ROW><ROW><id>18545345</id><snippet>...
("more_funky_numbers_7bytes", c_byte * 7),
...
</snippet></ROW><ROW><id>18545345</id><snippet>from ctypes import *

class BinaryHeader(BigEndianStructure):
    _fields_ = [
        ("sequence_number_4bytes", c_uint),
        ("ascii_text_32bytes", c_char * 32),
        ("timestamp_4bytes", c_uint),
        ("more_funky_numbers_7bytes", c_byte * 7),
        ("some_flags_1byte", c_byte),
        ("other_flags_1byte", c_byte),
        ("payload_length_2bytes", c_ushort),
    ]

mystruct = BinaryHeader(
    0x11111111,
    '\x22' * 32,
    0x33333333,
    (c_byte * 7)(*([0x44] * 7)),
    0x55,
    0x66,
    0x7777
)

print sizeof(mystruct)

with open('data.txt', 'wb') as f:
    f.write(mystruct)
</snippet></ROW><ROW><id>18545345</id><snippet>other_flags_1byte</snippet></ROW><ROW><id>18545345</id><snippet>payload_length_2bytes</snippet></ROW><ROW><id>18545345</id><snippet>00000000 11 11 11 11 ....
00000004 22 22 22 22 """"
00000008 22 22 22 22 """"
0000000C 22 22 22 22 """"
00000010 22 22 22 22 """"
00000014 22 22 22 22 """"
00000018 22 22 22 22 """"
0000001C 22 22 22 22 """"
00000020 22 22 22 22 """"
00000024 33 33 33 33 3333
00000028 44 44 44 44 DDDD
0000002C 44 44 44 55 DDDU
00000030 66 00 77 77 f.ww
            ^
         extra byte
</snippet></ROW><ROW><id>18545345</id><snippet> ...
class BinaryHeader(BigEndianStructure):
    _pack_ = 1
    _fields_ = [
        ("sequence_number_4bytes", c_uint),
...
</snippet></ROW><ROW><id>18545345</id><snippet>00000000 11 11 11 11 ....
00000004 22 22 22 22 """"
00000008 22 22 22 22 """"
0000000C 22 22 22 22 """"
00000010 22 22 22 22 """"
00000014 22 22 22 22 """"
00000018 22 22 22 22 """"
0000001C 22 22 22 22 """"
00000020 22 22 22 22 """"
00000024 33 33 33 33 3333
00000028 44 44 44 44 DDDD
0000002C 44 44 44 55 DDDU
00000030 66 77 77    fww 
</snippet></ROW><ROW><id>18545345</id><snippet>struct</snippet></ROW><ROW><id>18545345</id><snippet>&gt;&gt;&gt; from struct import *
&gt;&gt;&gt;
&gt;&gt;&gt; data = '\x11\x11\x11\x11\x22\x22\x22\x22\x22\x22\x22\x22\x22\x22\x22\x22\x22
\x22\x22\x22\x22\x22\x22\x22\x22\x22\x22\x22\x22\x22\x22\x22\x22\x22\x22\x22\x33
\x33\x33\x33\x44\x44\x44\x44\x44\x44\x44\x55\x66\x77\x77'
&gt;&gt;&gt;
&gt;&gt;&gt; BinaryHeader = Struct('&gt;I32cI7BBBH')
&gt;&gt;&gt;
&gt;&gt;&gt; BinaryHeader.unpack(data)
(286331153, '"', '"', '"', '"', '"', '"', '"', '"', '"', '"', '"', '"', '"', '"'
, '"', '"', '"', '"', '"', '"', '"', '"', '"', '"', '"', '"', '"', '"', '"', '"'
, '"', '"', 858993459, 68, 68, 68, 68, 68, 68, 68, 85, 102, 30583)
&gt;&gt;&gt;
</snippet></ROW><ROW><id>18545345</id><snippet>namedtuple</snippet></ROW><ROW><id>18545345</id><snippet>'&gt;I(32c)(I)(7B)(B)(B)H'</snippet></ROW><ROW><id>18545348</id><snippet>Popen()</snippet></ROW><ROW><id>18545348</id><snippet>multiprocessing</snippet></ROW><ROW><id>18545348</id><snippet>import os
import sys
from subprocess import Popen

# run all child scripts in parallel
processes = [Popen([sys.executable, filename], cwd=dirpath)
             for dirpath, dirname , filenames in os.walk('.')
             for filename in filenames
             if filename == 'Test.py']

# wait until they finish
for p in processes:
    p.wait()
print("all done")
</snippet></ROW><ROW><id>18545369</id><snippet>mechanize</snippet></ROW><ROW><id>18545369</id><snippet>requests</snippet></ROW><ROW><id>18545707</id><snippet>class CommentListInline(admin.TabularInline):
    model = Comment
    fields = ('comment',)
    readonly_fields = fields
    extra = 0
    can_delete = False

    def has_add_permission(self, request):
        return False


class CommentAddInline(admin.TabularInline):
    model = Comment
    fields = ('comment',)
    extra = 1
    can_delete = False

    def has_change_permission(self, request, obj=None):
        return False


class PageAdmin(admin.ModelAdmin):
    inlines = [CommentListInline, CommentAddInline]
</snippet></ROW><ROW><id>18546243</id><snippet>from &lt;module&gt; import *</snippet></ROW><ROW><id>18546243</id><snippet>help(&lt;module&gt;)</snippet></ROW><ROW><id>18546243</id><snippet>__all__</snippet></ROW><ROW><id>18546243</id><snippet>from &lt;module&gt; import *</snippet></ROW><ROW><id>18546260</id><snippet>parts</snippet></ROW><ROW><id>18546260</id><snippet>StringSplitting.type1(parts)
</snippet></ROW><ROW><id>18546260</id><snippet>type1()</snippet></ROW><ROW><id>18546260</id><snippet>def type1(parts):
</snippet></ROW><ROW><id>18546260</id><snippet>global</snippet></ROW><ROW><id>18546260</id><snippet>global parts</snippet></ROW><ROW><id>18546260</id><snippet>testing.py</snippet></ROW><ROW><id>18546304</id><snippet>input()</snippet></ROW><ROW><id>18546304</id><snippet>data = []
while True:
    line = input('Enter a line; leave it blank to stop: ')
    if not line:
        break
    data.append(line)
</snippet></ROW><ROW><id>18546304</id><snippet>sys.stdin</snippet></ROW><ROW><id>18546304</id><snippet>input()</snippet></ROW><ROW><id>18546304</id><snippet>import sys

for line in sys.stdin:
</snippet></ROW><ROW><id>18546304</id><snippet>lines = list(sys.stdin)
</snippet></ROW><ROW><id>18546304</id><snippet>len()</snippet></ROW><ROW><id>18546348</id><snippet>words = inputstr.split()
secondwords = iter(words)
next(secondwords)

output = [' '.join((first, second)) 
          for first, second in zip(words, secondwords)]
</snippet></ROW><ROW><id>18546348</id><snippet>&gt;&gt;&gt; inputstr = "The boy is running on the train"
&gt;&gt;&gt; words = inputstr.split()
&gt;&gt;&gt; secondwords = iter(words)
&gt;&gt;&gt; next(secondwords)  # output is ignored
'The'
&gt;&gt;&gt; [' '.join((first, second)) for first, second in zip(words, secondwords)]
['The boy', 'boy is', 'is running', 'running on', 'on the', 'the train']
</snippet></ROW><ROW><id>18546370</id><snippet>enter codefrom numpy import *
from math import *
import operator

f = open('Data_Genergy_26.txt', 'r')
lines = f.readlines()
# initialize some variable to be lists:
r = []
ro = []
E =[]

# scan the rows of the file stored in lines, and put the values into some variables:
for line in lines:
    p = line.split()
    r.append(float(p[0]))
    ro.append(float(p[1]))
#Subtracting the current and previous item in a list
def foo(it):
    it = iter(it)
    t = it.next()
    for s in it:
        yield t, s
        t = s        
list(foo(r))
E=[x[1] - x[0] for x in foo(r)]
#print E
#Cubing all elements in a list
def cube(E):
    return [i ** 3 for i in E]
#print cube(E)
#computing total energy
z =[a*b for a,b in zip(cube(E),ro)]
z[:] = [x*4/3*pi for x in z] 
z.append(0.0) #for making r, ro, and z of same dimension
#print z     

DataOut = column_stack((r,ro,z))
savetxt('output.dat', DataOut)
</snippet></ROW><ROW><id>18546441</id><snippet>for ArchivesZip in glob.glob(os.path.join(directory,'*.zip')):
    print ArchivesZip
    zip_ref = zipfile.ZipFile(ArchivesZip, 'r')
    zip_ref.extractall(directory)
    zip_ref.close()
</snippet></ROW><ROW><id>18546466</id><snippet>-0</snippet></ROW><ROW><id>18546466</id><snippet>0</snippet></ROW><ROW><id>18546466</id><snippet>&gt;&gt;&gt; -0
0
</snippet></ROW><ROW><id>18546466</id><snippet>-1</snippet></ROW><ROW><id>18546466</id><snippet>&gt;&gt;&gt; A = [10, 78, "m", 89]
&gt;&gt;&gt; A[0]
10
&gt;&gt;&gt; A[-1]
89
</snippet></ROW><ROW><id>18546479</id><snippet>__init__.py</snippet></ROW><ROW><id>18546479</id><snippet>foo</snippet></ROW><ROW><id>18546479</id><snippet>foo/__init__.py</snippet></ROW><ROW><id>18546479</id><snippet>foo/</snippet></ROW><ROW><id>18546479</id><snippet>bar.py</snippet></ROW><ROW><id>18546479</id><snippet>foo/</snippet></ROW><ROW><id>18546479</id><snippet>import foo.bar
</snippet></ROW><ROW><id>18547217</id><snippet>omit</snippet></ROW><ROW><id>18547217</id><snippet>omit = /usr/*, /System/*
</snippet></ROW><ROW><id>18547901</id><snippet>next()</snippet></ROW><ROW><id>18547901</id><snippet>__next__</snippet></ROW><ROW><id>18547901</id><snippet>a.__next__(1)</snippet></ROW><ROW><id>18547901</id><snippet>next</snippet></ROW><ROW><id>18547901</id><snippet>next</snippet></ROW><ROW><id>18547901</id><snippet>&gt;&gt;&gt; L = (x for x in range(10))
&gt;&gt;&gt; next(L)
0
&gt;&gt;&gt; next(L)
1
</snippet></ROW><ROW><id>18547901</id><snippet>next</snippet></ROW><ROW><id>18547901</id><snippet>next</snippet></ROW><ROW><id>18547901</id><snippet>for root, dirs, files in next(os.walk(dir)):
</snippet></ROW><ROW><id>18547901</id><snippet>next</snippet></ROW><ROW><id>18547901</id><snippet>os.walk</snippet></ROW><ROW><id>18547901</id><snippet>for</snippet></ROW><ROW><id>18547901</id><snippet>root, dirs, files</snippet></ROW><ROW><id>18547901</id><snippet>next</snippet></ROW><ROW><id>18547901</id><snippet>iterable = os.walk(directory)
next(iterable)   # throw away first iteration
for root, dirs, files in iterable:
   #...
</snippet></ROW><ROW><id>18547901</id><snippet>root</snippet></ROW><ROW><id>18547901</id><snippet>files</snippet></ROW><ROW><id>18547901</id><snippet>_</snippet></ROW><ROW><id>18547901</id><snippet>for _, dirs, _ in os.walk(directory):
    # Work only on "dirs". Don't care for "_"s
</snippet></ROW><ROW><id>18547901</id><snippet>n</snippet></ROW><ROW><id>18547901</id><snippet>itertools.islice</snippet></ROW><ROW><id>18547901</id><snippet>collections.deque</snippet></ROW><ROW><id>18547901</id><snippet>from itertools import islice
from collections import deque

def drop_n_elements(n, iterable):
    deque(islice(iterable, n), maxlen=0)
</snippet></ROW><ROW><id>18547901</id><snippet>iterable = os.walk(directory)
drop_n_elements(N, iterable) # throw away first N iterations
for root, dirs, files in iterable:
    # ...
</snippet></ROW><ROW><id>18547901</id><snippet>def drop_n_elements(n, iterable):
    next(islice(iterable, n, n), None)
</snippet></ROW><ROW><id>18547901</id><snippet>deque(..., maxlen=0)</snippet></ROW><ROW><id>18547901</id><snippet>next</snippet></ROW><ROW><id>18547901</id><snippet>islice</snippet></ROW><ROW><id>18547939</id><snippet>numpy</snippet></ROW><ROW><id>18547939</id><snippet>&gt;&gt;&gt; a = np.arange(25).reshape(5,5)
&gt;&gt;&gt; a
array([[ 0,  1,  2,  3,  4],
       [ 5,  6,  7,  8,  9],
       [10, 11, 12, 13, 14],
       [15, 16, 17, 18, 19],
       [20, 21, 22, 23, 24]])   

  &gt;&gt;&gt; a[[2,0,1,3,4]] [:,[2,0,1,3,4]]
array([[12, 10, 11, 13, 14],
       [ 2,  0,  1,  3,  4],
       [ 7,  5,  6,  8,  9],
       [17, 15, 16, 18, 19],
       [22, 20, 21, 23, 24]])
</snippet></ROW><ROW><id>18547939</id><snippet>&gt;&gt;&gt; a[[2,0,1,3,4]]
array([[10, 11, 12, 13, 14],
       [ 0,  1,  2,  3,  4],
       [ 5,  6,  7,  8,  9],
       [15, 16, 17, 18, 19],
       [20, 21, 22, 23, 24]])
</snippet></ROW><ROW><id>18547939</id><snippet>&gt;&gt;&gt; a[:,[2,0,1,3,4]] 
array([[ 2,  0,  1,  3,  4],
       [ 7,  5,  6,  8,  9],
       [12, 10, 11, 13, 14],
       [17, 15, 16, 18, 19],
       [22, 20, 21, 23, 24]])
</snippet></ROW><ROW><id>18547967</id><snippet>#!/usr/bin/env python

import sys
import getpass
import telnetlib

HOST = "192.168.1.5"

def main():
    ports = ['6023']
    if len(sys.argv) &gt; 1:
        ports = sys.argv[1].split(',')

    for port in ports:
        get_stats(port)

def get_stats(port):
    tn = telnetlib.Telnet(HOST, port)
    tn.read_until('&gt;&gt;&gt;')
    tn.write("spider.name\n")
    print tn.read_until('&gt;&gt;&gt;')
    tn.close()

if __name__ == '__main__':
    main()
</snippet></ROW><ROW><id>18548313</id><snippet>u</snippet></ROW><ROW><id>18548313</id><snippet>u"foo"</snippet></ROW><ROW><id>18548313</id><snippet># -*- coding: utf-8 -*-

print u"""
 █▀▀▀▀▀▀▀▀▀█▀▀▀▀▀▀▀▀▀▀▀█
 █         █           █▀▀
 █         █           █▀
 █ Slim    █           █
 █ stone   █  Zika     ███
 █▀▀▀▀▀▀▀▀▀█  town     █▀
 █ Meju    █           █
 █     ▄▄▄▄█▄▄▄▄▄▄▄▄▄▄▄█
 █▄▄▄▄▄█▀  ▄█   █        """
</snippet></ROW><ROW><id>18548313</id><snippet>&gt; python foo.py

 █▀▀▀▀▀▀▀▀▀█▀▀▀▀▀▀▀▀▀▀▀█
 █         █           █▀▀
 █         █           █▀
 █ Slim    █           █
 █ stone   █  Zika     ███
 █▀▀▀▀▀▀▀▀▀█  town     █▀
 █ Meju    █           █
 █     ▄▄▄▄█▄▄▄▄▄▄▄▄▄▄▄█
 █▄▄▄▄▄█▀  ▄█   █

&gt;
</snippet></ROW><ROW><id>18548347</id><snippet>easy_install</snippet></ROW><ROW><id>18548347</id><snippet>setuptools</snippet></ROW><ROW><id>18548347</id><snippet>easy_install</snippet></ROW><ROW><id>18548347</id><snippet>easy_install -m PackageName
</snippet></ROW><ROW><id>18548347</id><snippet>pip</snippet></ROW><ROW><id>18548347</id><snippet>easy_install pip</snippet></ROW><ROW><id>18548347</id><snippet>setuptools</snippet></ROW><ROW><id>18548347</id><snippet>setuptools-*.egg
</snippet></ROW><ROW><id>18548347</id><snippet>pkg_resources.py
easy_install.py
setuptools/
setuptools-*.egg-info/
</snippet></ROW><ROW><id>18548505</id><snippet>\r</snippet></ROW><ROW><id>18548505</id><snippet>\r\n</snippet></ROW><ROW><id>18548520</id><snippet>-?(?:\d+())?(?:\.\d*())?(?:e-?\d+())?(?:\2|\1\3)
</snippet></ROW><ROW><id>18548520</id><snippet>float</snippet></ROW><ROW><id>18548520</id><snippet>()</snippet></ROW><ROW><id>18548520</id><snippet>\1</snippet></ROW><ROW><id>18548520</id><snippet>()</snippet></ROW><ROW><id>18548520</id><snippet>regex = re.compile(r"""
    -?    # Optional minus sign
   (?:    # Start of the first non-capturing group:
    \d+   #  Match a number (integer part)
    ()    #  Match the empty string, capture in group 1
   )?     # Make the first non-capturing group optional
   (?:    # Start of the second non-capturing group:
    \.\d* #  Match a dot and an optional fractional part
    ()    #  Match the empty string, capture in group 2
   )?     # Make the second non-capturing group optional
   (?:    # Start of the third non-capturing group:
    e     #  Match an e or E
    -?    #  Match an optional minus sign
    \d+   #  Match a mandatory exponent
    ()    #  Match the empty string, capture in group 3
   )?     # Make the third non-capturing group optional
  (?:     # Now make sure that at least the following groups participated:
   \2     #  Either group 2 (containing the empty string)
  |       # or
   \1\3   #  Groups 1 and 3 (because "1" or "e1" alone aren't valid matches)
  )""", re.I|re.X)
</snippet></ROW><ROW><id>18548520</id><snippet>&gt;&gt;&gt; [match.group(0) for match in
...        regex.finditer("1 1.1 .1 1. 1e1 1.04E-1 -.1 -1. e1 .1e1")]
['1.1', '.1', '1.', '1e1', '1.04E-1', '-.1', '-1.', '.1e1']
</snippet></ROW><ROW><id>18548879</id><snippet>class Profile(BaseProfile):
    user = models.OneToOneField(User, blank=True, null=True, on_delete=models.CASCADE)
    ...
</snippet></ROW><ROW><id>18548883</id><snippet>if not os.path.exists(os.path.join(template_path, page)): 
    self.abort(404)
</snippet></ROW><ROW><id>18548888</id><snippet>In [1]: df1 = pd.DataFrame([[1, 2], [3, 4]])

In [2]: df2 = pd.DataFrame([[3, 4], [1, 2]], index=[1, 0])

In [3]: df1 == df2
Exception: Can only compare identically-labeled DataFrame objects
</snippet></ROW><ROW><id>18548888</id><snippet>In [4]: df2.sort_index(inplace=True)

In [5]: df1 == df2
Out[5]: 
      0     1
0  True  True
1  True  True
</snippet></ROW><ROW><id>18548888</id><snippet>In [11]: df1.sort(axis=0) == df2.sort(axis=0)
Out[11]: 
      0     1
0  True  True
1  True  True
</snippet></ROW><ROW><id>18548888</id><snippet>==</snippet></ROW><ROW><id>18548888</id><snippet>In [12]: df1.sort(axis=0).sort(axis=1) == df2.sort(axis=0).sort(axis=1)
Out[12]: 
      0     1
0  True  True
1  True  True
</snippet></ROW><ROW><id>18548963</id><snippet>In [11]: df['n'].replace({'a': 'x', 'b': 'y', 'c': 'w', 'd': 'z'})
Out[11]: 
0    z
1    x
2    y
3    w
4    w
5    x
6    z
7    y
Name: n, dtype: object

In [12]: df['n'] = df['n'].replace({'a': 'x', 'b': 'y', 'c': 'w', 'd': 'z'})
</snippet></ROW><ROW><id>18549063</id><snippet>$ LD_DEBUG_OUTPUT=./ld_debug_out LD_DEBUG=all python -c 'import numpy'
</snippet></ROW><ROW><id>18549063</id><snippet>&gt;&gt; !LD_DEBUG_OUTPUT=./ld_debug_out LD_DEBUG=all python -c 'import numpy'
</snippet></ROW><ROW><id>18549063</id><snippet>all</snippet></ROW><ROW><id>18549063</id><snippet>numpy</snippet></ROW><ROW><id>18549063</id><snippet>itertools</snippet></ROW><ROW><id>18549063</id><snippet>Py_Initialize()</snippet></ROW><ROW><id>18549063</id><snippet>dlopen('libpython2.7.so', RTLD_GLOBAL|RTLD_LAZY);
</snippet></ROW><ROW><id>18549186</id><snippet>ImageTk.PhotoImage</snippet></ROW><ROW><id>18549186</id><snippet>Image</snippet></ROW><ROW><id>18549186</id><snippet>AxesImage</snippet></ROW><ROW><id>18549186</id><snippet>imshow</snippet></ROW><ROW><id>18549186</id><snippet>Image</snippet></ROW><ROW><id>18549186</id><snippet>PhotoImage</snippet></ROW><ROW><id>18549186</id><snippet>myarray</snippet></ROW><ROW><id>18549186</id><snippet>from Tkinter import *
from PIL import Image, ImageTk
import numpy as np
import matplotlib.pyplot as plt
from matplotlib import cm
root=Tk()
canvas = Canvas(root)
canvas.pack(expand = YES, fill = BOTH)
x = np.linspace(0, 2*np.pi, 400)
y = np.linspace(0, 2*np.pi, 400)
X, Y = np.meshgrid(x, y, copy=False)
myarray = np.cos(X) + np.cos(Y)

im_plt = plt.imshow(myarray)

image1 = Image.fromarray(np.uint8( im_plt.get_cmap()(im_plt.get_array())*255))
im = ImageTk.PhotoImage('RGB', image1.size)
im.paste(image1)
test = canvas.create_image(0, 0, image=im)
mainloop()
</snippet></ROW><ROW><id>18549193</id><snippet>from abc import ABCMeta, abstractmethod

class ThisIsAnAbstractClass(object):
    __metaclass__ = ABCMeta # &lt;--

    @abstractmethod
    def __init__(self, parameter):
        self.parameter = parameter

    def do_something():
        """do something"""

class ConcreteClass(ThisIsAnAbstractClass):
    def __init__(self, parameter):
        super(ConcreteClass, self).__init__(parameter)

try:
    ThisIsAnAbstractClass('test')
    assert False, 'Abstract class instance created!'
except TypeError:
    pass

assert ConcreteClass('test').parameter == 'test'
</snippet></ROW><ROW><id>18549193</id><snippet>abc.ABCMeta</snippet></ROW><ROW><id>18549551</id><snippet>from tkinter import Tk, OptionMenu, StringVar
root = Tk()
def func(val):
    print(val)
var = StringVar()
OptionMenu(root, var, "one", command=func).grid()
root.mainloop()
</snippet></ROW><ROW><id>18549551</id><snippet>val</snippet></ROW><ROW><id>18549551</id><snippet>def typeupdate(val):
</snippet></ROW><ROW><id>18549621</id><snippet>class Thing(object):
    id_iter = None
    def __init__(self, num=1):
        if Thing.id_iter is None:
            Thing.id_iter = itertools.count(num)
        self.id = next(self.id_iter)
</snippet></ROW><ROW><id>18549621</id><snippet>x = Thing(5)
print(x.id)      #prints 5
y = Thing()
print(y.id)      #prints 6
</snippet></ROW><ROW><id>18549768</id><snippet>import heapq
res = heapq.nlargest(2, some_sequence)
print res[1] # to get 2nd largest
</snippet></ROW><ROW><id>18549768</id><snippet>n</snippet></ROW><ROW><id>18549801</id><snippet>execfile('&lt;full_path_to_your_python_script&gt;')
</snippet></ROW><ROW><id>18549801</id><snippet>reload('module_name')</snippet></ROW><ROW><id>18549801</id><snippet>execfile</snippet></ROW><ROW><id>18549927</id><snippet>django-nonrel</snippet></ROW><ROW><id>18549927</id><snippet>settings.py</snippet></ROW><ROW><id>18549927</id><snippet>python settings.py</snippet></ROW><ROW><id>18549927</id><snippet>SyntaxError</snippet></ROW><ROW><id>18550237</id><snippet>redis 127.0.0.1:6379&gt; incr next_id:user
(integer) 1
redis 127.0.0.1:6379&gt; incr next_id:user
(integer) 2
</snippet></ROW><ROW><id>18550314</id><snippet>__new__</snippet></ROW><ROW><id>18550314</id><snippet>from builtins import property as _property, tuple as _tuple
from operator import itemgetter as _itemgetter
from collections import OrderedDict

class strings(tuple):
    __slots__ = ()
    _fields = tuple('a{}'.format(i) for i in range(400))
    def __new__(cls, *args, **kwargs):
        req = len(cls._fields)
        if len(args) + len(kwargs) &gt; req:
            raise TypeError(
                '__new__() takes {} positional arguments but {} were given'.format(
                    req, len(args) + len(kwargs)))
        if kwargs.keys() &gt; set(cls._fields):
            raise TypeError(
                '__new__() got an unexpected keyword argument {!r}'.format(
                    (kwargs.keys() - set(cls._fields)).pop()))
        missing = req - len(args)
        if kwargs.keys() &amp; set(cls._fields[:-missing]):
            raise TypeError(
                '__new__() got multiple values for argument {!r}'.format(
                    (kwargs.keys() &amp; set(cls._fields[:-missing])).pop()))
        try:
            for field in cls._fields[-missing:]:
                args += (kwargs[field],)
                missing -= 1
        except KeyError:
            pass
        if len(args) &lt; req:
            raise TypeError('__new__() missing {} positional argument{}: {}'.format(
                missing, 's' if missing &gt; 1 else '',
                ' and '.join(filter(None, [', '.join(map(repr, cls._fields[-missing:-1])), repr(cls._fields[-1])]))))
        return tuple.__new__(cls, args)

    @classmethod
    def _make(cls, iterable, new=tuple.__new__, len=len):
        'Make a new strings object from a sequence or iterable'
        result = new(cls, iterable)
        if len(result) != len(self._fields):
            raise TypeError('Expected %d arguments, got %d' % (len(self._fields), len(result)))
        return result

    def __repr__(self):
        'Return a nicely formatted representation string'
        format = '{}({})'.format(self.__class__.__name__, ', '.join('{}=%r'.format(n) for n in self._fields))
        return format % self

    def _asdict(self):
        'Return a new OrderedDict which maps field names to their values'
        return OrderedDict(zip(self._fields, self))

    __dict__ = property(_asdict)

    def _replace(self, **kwds):
        'Return a new strings object replacing specified fields with new values'
        result = self._make(map(kwds.pop, self._fields, self))
        if kwds:
            raise ValueError('Got unexpected field names: %r' % list(kwds))
        return result

    def __getnewargs__(self):
        'Return self as a plain tuple.  Used by copy and pickle.'
        return tuple(self)

    def __getstate__(self):
        'Exclude the OrderedDict from pickling'
        return None

for i, name in enumerate(strings._fields):
    setattr(strings, name, 
            _property(_itemgetter(i), doc='Alias for field number {}'.format(i)))
</snippet></ROW><ROW><id>18550314</id><snippet>__new__</snippet></ROW><ROW><id>18550314</id><snippet>_fields</snippet></ROW><ROW><id>18550314</id><snippet>s = strings(i for i in range(400))
</snippet></ROW><ROW><id>18550314</id><snippet>s = strings(iter(list_of_values))
</snippet></ROW><ROW><id>18550314</id><snippet>&gt;&gt;&gt; s = strings(i for i in range(400))
&gt;&gt;&gt; s
strings(a0=0, a1=1, a2=2, a3=3, a4=4, a5=5, a6=6, a7=7, a8=8, a9=9, a10=10, a11=11, a12=12, a13=13, a14=14, a15=15, a16=16, a17=17, a18=18, a19=19, a20=20, a21=21, a22=22, a23=23, a24=24, a25=25, a26=26, a27=27, a28=28, a29=29, a30=30, a31=31, a32=32, a33=33, a34=34, a35=35, a36=36, a37=37, a38=38, a39=39, a40=40, a41=41, a42=42, a43=43, a44=44, a45=45, a46=46, a47=47, a48=48, a49=49, a50=50, a51=51, a52=52, a53=53, a54=54, a55=55, a56=56, a57=57, a58=58, a59=59, a60=60, a61=61, a62=62, a63=63, a64=64, a65=65, a66=66, a67=67, a68=68, a69=69, a70=70, a71=71, a72=72, a73=73, a74=74, a75=75, a76=76, a77=77, a78=78, a79=79, a80=80, a81=81, a82=82, a83=83, a84=84, a85=85, a86=86, a87=87, a88=88, a89=89, a90=90, a91=91, a92=92, a93=93, a94=94, a95=95, a96=96, a97=97, a98=98, a99=99, a100=100, a101=101, a102=102, a103=103, a104=104, a105=105, a106=106, a107=107, a108=108, a109=109, a110=110, a111=111, a112=112, a113=113, a114=114, a115=115, a116=116, a117=117, a118=118, a119=119, a120=120, a121=121, a122=122, a123=123, a124=124, a125=125, a126=126, a127=127, a128=128, a129=129, a130=130, a131=131, a132=132, a133=133, a134=134, a135=135, a136=136, a137=137, a138=138, a139=139, a140=140, a141=141, a142=142, a143=143, a144=144, a145=145, a146=146, a147=147, a148=148, a149=149, a150=150, a151=151, a152=152, a153=153, a154=154, a155=155, a156=156, a157=157, a158=158, a159=159, a160=160, a161=161, a162=162, a163=163, a164=164, a165=165, a166=166, a167=167, a168=168, a169=169, a170=170, a171=171, a172=172, a173=173, a174=174, a175=175, a176=176, a177=177, a178=178, a179=179, a180=180, a181=181, a182=182, a183=183, a184=184, a185=185, a186=186, a187=187, a188=188, a189=189, a190=190, a191=191, a192=192, a193=193, a194=194, a195=195, a196=196, a197=197, a198=198, a199=199, a200=200, a201=201, a202=202, a203=203, a204=204, a205=205, a206=206, a207=207, a208=208, a209=209, a210=210, a211=211, a212=212, a213=213, a214=214, a215=215, a216=216, a217=217, a218=218, a219=219, a220=220, a221=221, a222=222, a223=223, a224=224, a225=225, a226=226, a227=227, a228=228, a229=229, a230=230, a231=231, a232=232, a233=233, a234=234, a235=235, a236=236, a237=237, a238=238, a239=239, a240=240, a241=241, a242=242, a243=243, a244=244, a245=245, a246=246, a247=247, a248=248, a249=249, a250=250, a251=251, a252=252, a253=253, a254=254, a255=255, a256=256, a257=257, a258=258, a259=259, a260=260, a261=261, a262=262, a263=263, a264=264, a265=265, a266=266, a267=267, a268=268, a269=269, a270=270, a271=271, a272=272, a273=273, a274=274, a275=275, a276=276, a277=277, a278=278, a279=279, a280=280, a281=281, a282=282, a283=283, a284=284, a285=285, a286=286, a287=287, a288=288, a289=289, a290=290, a291=291, a292=292, a293=293, a294=294, a295=295, a296=296, a297=297, a298=298, a299=299, a300=300, a301=301, a302=302, a303=303, a304=304, a305=305, a306=306, a307=307, a308=308, a309=309, a310=310, a311=311, a312=312, a313=313, a314=314, a315=315, a316=316, a317=317, a318=318, a319=319, a320=320, a321=321, a322=322, a323=323, a324=324, a325=325, a326=326, a327=327, a328=328, a329=329, a330=330, a331=331, a332=332, a333=333, a334=334, a335=335, a336=336, a337=337, a338=338, a339=339, a340=340, a341=341, a342=342, a343=343, a344=344, a345=345, a346=346, a347=347, a348=348, a349=349, a350=350, a351=351, a352=352, a353=353, a354=354, a355=355, a356=356, a357=357, a358=358, a359=359, a360=360, a361=361, a362=362, a363=363, a364=364, a365=365, a366=366, a367=367, a368=368, a369=369, a370=370, a371=371, a372=372, a373=373, a374=374, a375=375, a376=376, a377=377, a378=378, a379=379, a380=380, a381=381, a382=382, a383=383, a384=384, a385=385, a386=386, a387=387, a388=388, a389=389, a390=390, a391=391, a392=392, a393=393, a394=394, a395=395, a396=396, a397=397, a398=398, a399=399)
&gt;&gt;&gt; s.a391
391
</snippet></ROW><ROW><id>18550374</id><snippet>self.key</snippet></ROW><ROW><id>18550374</id><snippet>.index()</snippet></ROW><ROW><id>18550374</id><snippet>str.join()</snippet></ROW><ROW><id>18550374</id><snippet>keys = {char: chr(i) for i, char in enumerate(self.key)}
match = ''.join([keys[char] for char in data if char in keys])
</snippet></ROW><ROW><id>18550374</id><snippet>char(..)</snippet></ROW><ROW><id>18550374</id><snippet>chr()</snippet></ROW><ROW><id>18550374</id><snippet>char: i</snippet></ROW><ROW><id>18550374</id><snippet>chr()</snippet></ROW><ROW><id>18550401</id><snippet>p.save()</snippet></ROW><ROW><id>18550401</id><snippet>()</snippet></ROW><ROW><id>18550401</id><snippet>p.save</snippet></ROW><ROW><id>18550454</id><snippet>python shell</snippet></ROW><ROW><id>18550454</id><snippet>import sys

sys.path.append('/your_registration_package_path')
</snippet></ROW><ROW><id>18550580</id><snippet># Get the current environment end filter out the old
# PYTHONPATH variable if exists in the environment
env = [env for env in QtCore.QProcess.systemEnvironment()
       if not env.startswith('PYTHONPATH=')]
# Add your PYTHONPATH
env.append('PYTHONPATH=path_to_where_you_want')
# Create a process, set the environment and run the script
p = QtCore.QProcess()
p.setEnvironment(env)
p.start('perl abc.pl')
</snippet></ROW><ROW><id>18550580</id><snippet>PYTHONPATH</snippet></ROW><ROW><id>18550580</id><snippet>env.append</snippet></ROW><ROW><id>18550652</id><snippet>tempfile.SpooledTemporaryFile</snippet></ROW><ROW><id>18550652</id><snippet>seek(0)</snippet></ROW><ROW><id>18550678</id><snippet>root.xpath('//table[@class="main" and not(ancestor::table[@class="main"])]')
</snippet></ROW><ROW><id>18550753</id><snippet>side</snippet></ROW><ROW><id>18550753</id><snippet>from Tkinter import Tk, Label, Entry, StringVar

app = Tk()

labelText=StringVar()
labelText.set("Enter directory of log files")
labelDir=Label(app, textvariable=labelText, height=4)
labelDir.pack(side="left")

directory=StringVar(None)
dirname=Entry(app,textvariable=directory,width=50)
dirname.pack(side="left")

app.mainloop()
</snippet></ROW><ROW><id>18551120</id><snippet>name</snippet></ROW><ROW><id>18551120</id><snippet>name</snippet></ROW><ROW><id>18551120</id><snippet>LIKE</snippet></ROW><ROW><id>18551120</id><snippet>select * from table_name where name between 'Jo' and 'Joz'
</snippet></ROW><ROW><id>18551183</id><snippet>"months"</snippet></ROW><ROW><id>18551183</id><snippet>if form.is_valid():
    # change:
    #months = range(int(form.cleaned_data['months']))
    # to:
    months = range(int(request.POST['months']))
</snippet></ROW><ROW><id>18551183</id><snippet>ModelForm</snippet></ROW><ROW><id>18551183</id><snippet>LineItem</snippet></ROW><ROW><id>18551183</id><snippet>LineItem</snippet></ROW><ROW><id>18551183</id><snippet>form.cleaned_data</snippet></ROW><ROW><id>18551183</id><snippet>"name"</snippet></ROW><ROW><id>18551183</id><snippet>"months"</snippet></ROW><ROW><id>18551183</id><snippet>LineItem()</snippet></ROW><ROW><id>18551237</id><snippet>tests/__init__.py</snippet></ROW><ROW><id>18551272</id><snippet>heapq.merge</snippet></ROW><ROW><id>18551272</id><snippet>&gt;&gt;&gt; import heapq
&gt;&gt;&gt; list(heapq.merge([1,3,5], [2,4,6,7,8]))
[1, 2, 3, 4, 5, 6, 7, 8]
</snippet></ROW><ROW><id>18551272</id><snippet>&gt;&gt;&gt; def mymgsor(container, first_index, last_index):
...     if first_index &lt; last_index:
...         mid_index = (last_index+first_index) // 2
...         mymgsor(container, first_index, mid_index)
...         mymgsor(container, mid_index+1, last_index)
...         container[first_index:last_index+1] = heapq.merge(container[first_index:mid_index+1], container[mid_index+1:last_index+1])
...
&gt;&gt;&gt; xs = [5,4,2,3,1]
&gt;&gt;&gt; mymgsor(xs, 0, len(xs)-1)
&gt;&gt;&gt; xs
[1, 2, 3, 4, 5]
</snippet></ROW><ROW><id>18551272</id><snippet>mymgsor</snippet></ROW><ROW><id>18551272</id><snippet>mid_index = len(container)//2
</snippet></ROW><ROW><id>18551272</id><snippet>mymerg</snippet></ROW><ROW><id>18551272</id><snippet>def mymerg(container, first_index, mid_index, last_index):
    left_list = container[first_index:mid_index+1]   # copy only  first_index .. mid_index
    right_list = container[mid_index+1:last_index+1] # copy only mid_index+1 .. last_index
    i = 0
    j = 0
    for elem in range(first_index, last_index+1, 1):
        if left_list[i] &lt;= right_list[j]:
            container[elem] = left_list[i]
            i += 1
            if i == len(left_list): # no more left
                container[elem+1:last_index+1] = right_list[j:]
                break
        else:
            container[elem] = right_list[j]
            j += 1
            if j == len(right_list): # no more right
                container[elem+1:last_index+1] = left_list[i:]
                break
</snippet></ROW><ROW><id>18551366</id><snippet>&gt;&gt;&gt; pd.melt(p.reset_index(), id_vars=['row1', 'row2'],
            var_name='col', value_name='val')
  row1 row2  col  val
0    a    x    1   34
1    a    y    1   22
2    b    x    1   26
3    b    y    1   38
4    a    x    2   42
5    a    y    2   57
6    b    x    2   25
7    b    y    2   33
</snippet></ROW><ROW><id>18551366</id><snippet>row1</snippet></ROW><ROW><id>18551366</id><snippet>row2</snippet></ROW><ROW><id>18551366</id><snippet>&gt;&gt;&gt; p.reset_index()
col row1 row2   1   2
0      a    x  34  42
1      a    y  22  57
2      b    x  26  25
3      b    y  38  33
</snippet></ROW><ROW><id>18551366</id><snippet>pd.melt</snippet></ROW><ROW><id>18551366</id><snippet>row1</snippet></ROW><ROW><id>18551366</id><snippet>row2</snippet></ROW><ROW><id>18551366</id><snippet>id_vars</snippet></ROW><ROW><id>18551366</id><snippet>val</snippet></ROW><ROW><id>18551366</id><snippet>value_name</snippet></ROW><ROW><id>18551366</id><snippet>col</snippet></ROW><ROW><id>18551366</id><snippet>var_name</snippet></ROW><ROW><id>18551475</id><snippet>[entry for tag in tags for entry in entries if tag in entry]
</snippet></ROW><ROW><id>18551580</id><snippet>#pragma mark Correcting the defects
findContours(res, contours, RETR_LIST, CHAIN_APPROX_SIMPLE);
vector&lt;cv::Point&gt; centroids;
centroids.reserve(100);

for (int i = 0; i &lt; contours.size(); i++) {
    vector&lt;cv::Point&gt; contour = contours.at(i);
    Moments mom = moments(contour);
    cv::Point center = cv::Point(int(mom.m10 / mom.m00), int(mom.m01 / mom.m00));
    centroids.push_back(center);
}

std::reverse(centroids.begin(), centroids.end());

struct {
    bool operator()(const cv::Point p1, const cv::Point p2) {
        return p1.x &lt; p2.x;
    }
} pointXGreater;

for (int i = 0; i &lt; 10; i++) {
    std::sort(centroids.begin() + i * 10, centroids.begin() + (i + 1) * 10, pointXGreater);
}

Mat bm = Mat(centroids);
bm = bm.reshape(2, 10);

Mat output(450, 450, CV_8UC3, CV_RGB(1, 1, 1));

for (int i = 0; i &lt; centroids.size(); i++) {
    int ri = i / 10;
    int ci = i % 10;

    if (ci != 9 &amp;&amp; ri != 9) {
        cv::Point2f src[4];
        src[0] = cv::Point2f(bm.at&lt;cv::Point&gt;(ri, ci).x, bm.at&lt;cv::Point&gt;(ri, ci).y);
        src[1] = cv::Point2f(bm.at&lt;cv::Point&gt;(ri, ci + 1).x, bm.at&lt;cv::Point&gt;(ri, ci + 1).y);
        src[2] = cv::Point2f(bm.at&lt;cv::Point&gt;(ri + 1, ci).x, bm.at&lt;cv::Point&gt;(ri + 1, ci).y);
        src[3] = cv::Point2f(bm.at&lt;cv::Point&gt;(ri + 1, ci + 1).x, bm.at&lt;cv::Point&gt;(ri + 1, ci + 1).y);

        cv::Point2f dst[4];
        dst[0] = cv::Point2f(ci * 50, ri * 50);
        dst[1] = cv::Point2f((ci + 1) * 50 - 1, ri * 50);
        dst[2] = cv::Point2f(ci * 50, (ri + 1) * 50 - 1);
        dst[3] = cv::Point2f((ci + 1) * 50 - 1, (ri + 1) * 50 - 1);

        Mat retval = getPerspectiveTransform(src, dst);
        Mat warp;
        warpPerspective(res2, warp, retval, cv::Size(450, 450));

        for (int j = ri * 50; j &lt; (ri + 1) * 50 - 1; j++) {
            for (int k = ci * 50; k &lt; (ci + 1) * 50 - 1; k++) {
                output.at&lt;Vec3b&gt;(j, k) = warp.at&lt;Vec3b&gt;(j, k);
            }
        }
    }
}
</snippet></ROW><ROW><id>18551782</id><snippet>&gt;&gt;&gt; text = 'Hello, this is an example of text shown in the scrolling display. Bla, bla, bla!'
&gt;&gt;&gt; from textwrap import wrap
&gt;&gt;&gt; wrap(text, 16)
['Hello, this is', 'an example of', 'text shown in', 'the scrolling', 'display. Bla,', 'bla, bla!']
</snippet></ROW><ROW><id>18551782</id><snippet>&gt;&gt;&gt; from textwrap import TextWrapper
&gt;&gt;&gt; w = TextWrapper(16, break_long_words=True)
&gt;&gt;&gt; w.wrap("this_is_a_really_long_word")
['this_is_a_really', '_long_word']
&gt;&gt;&gt; w = TextWrapper(16, break_long_words=False)
&gt;&gt;&gt; w.wrap("this_is_a_really_long_word")
['this_is_a_really_long_word']
</snippet></ROW><ROW><id>18551882</id><snippet>bisect</snippet></ROW><ROW><id>18551882</id><snippet>In [24]: timestamp_list = [1377091800, 1377093000, 1377094500, 1377095500]

In [25]: timestamp_list[bisect.bisect_right(timestamp_list, 1377093100)]
Out[25]: 1377094500
</snippet></ROW><ROW><id>18551966</id><snippet>itertools.izip(...)</snippet></ROW><ROW><id>18551966</id><snippet>&gt;&gt;&gt; def a():
        for i in xrange(10):
            yield i


&gt;&gt;&gt; def b():
        for i in xrange(10, 20):
            yield i


&gt;&gt;&gt; from itertools import izip
&gt;&gt;&gt; for i, j in izip(a(), b()):
        print i, j


0 10
1 11
2 12
3 13
4 14
5 15
6 16
7 17
8 18
9 19
</snippet></ROW><ROW><id>18552025</id><snippet>list()</snippet></ROW><ROW><id>18552025</id><snippet>keys = list(test)
</snippet></ROW><ROW><id>18552025</id><snippet>dict.keys()</snippet></ROW><ROW><id>18552025</id><snippet>&gt;&gt;&gt; test = {'foo': 'bar', 'hello': 'world'}
&gt;&gt;&gt; list(test)
['foo', 'hello']
&gt;&gt;&gt; list(test)[0]
'foo'
</snippet></ROW><ROW><id>18552040</id><snippet>&lt;SOAP-ENV:Envelope xmlns:SOAP-ENV="http://schemas.xmlsoap.org/soap/envelope/" xmlns:SOAP-ENC="http://schemas.xmlsoap.org/soap/encoding/" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns="http://fedex.com/ws/rate/v13"&gt;
   &lt;SOAP-ENV:Body&gt;
      &lt;RateRequest&gt;
         &lt;WebAuthenticationDetail&gt;
            &lt;UserCredential&gt;
               &lt;Key&gt;&lt;/Key&gt;
               &lt;Password/&gt;
            &lt;/UserCredential&gt;
         &lt;/WebAuthenticationDetail&gt;
         &lt;ClientDetail&gt;
            &lt;AccountNumber&gt;&lt;/AccountNumber&gt;
            &lt;MeterNumber&gt;&lt;/MeterNumber&gt;
         &lt;/ClientDetail&gt;
         &lt;TransactionDetail&gt;
            &lt;CustomerTransactionId&gt;RateRequest_Condor_Sat_Del&lt;/CustomerTransactionId&gt;
         &lt;/TransactionDetail&gt;
         &lt;Version&gt;
            &lt;ServiceId&gt;crs&lt;/ServiceId&gt;
            &lt;Major&gt;13&lt;/Major&gt;
            &lt;Intermediate&gt;0&lt;/Intermediate&gt;
            &lt;Minor&gt;0&lt;/Minor&gt;
         &lt;/Version&gt;
         &lt;RequestedShipment&gt;
            &lt;ShipTimestamp&gt;2012-08-17T09:30:47-05:00&lt;/ShipTimestamp&gt;
            &lt;DropoffType&gt;REGULAR_PICKUP&lt;/DropoffType&gt;
            &lt;ServiceType&gt;FIRST_OVERNIGHT&lt;/ServiceType&gt;
            &lt;PackagingType&gt;YOUR_PACKAGING&lt;/PackagingType&gt;
            &lt;TotalWeight&gt;
               &lt;Units&gt;LB&lt;/Units&gt;
               &lt;Value&gt;50.0&lt;/Value&gt;
            &lt;/TotalWeight&gt;
            &lt;Shipper&gt;
               &lt;AccountNumber&gt;&lt;/AccountNumber&gt;
               &lt;Contact&gt;
                  &lt;CompanyName&gt;FedEx-WAPI&lt;/CompanyName&gt;
                  &lt;PhoneNumber&gt;1234567890&lt;/PhoneNumber&gt;
               &lt;/Contact&gt;
               &lt;Address&gt;
                  &lt;StreetLines&gt;SN2000 Test Meter 8&lt;/StreetLines&gt;
                  &lt;StreetLines&gt;10 Fedex Parkway&lt;/StreetLines&gt;
                  &lt;City&gt;COLORADO SPRINGS&lt;/City&gt;
                  &lt;StateOrProvinceCode&gt;CO&lt;/StateOrProvinceCode&gt;
                  &lt;PostalCode&gt;80915&lt;/PostalCode&gt;
                  &lt;CountryCode&gt;US&lt;/CountryCode&gt;
               &lt;/Address&gt;
            &lt;/Shipper&gt;
            &lt;Recipient&gt;
               &lt;AccountNumber&gt;&lt;/AccountNumber&gt;
               &lt;Contact&gt;
                  &lt;PersonName&gt;Recipient Contact&lt;/PersonName&gt;
                  &lt;PhoneNumber&gt;1234567890&lt;/PhoneNumber&gt;
               &lt;/Contact&gt;
               &lt;Address&gt;
                  &lt;StreetLines&gt;Recipient Address Line 1&lt;/StreetLines&gt;
                  &lt;StreetLines&gt;Recipient Address Line 2&lt;/StreetLines&gt;
                  &lt;City&gt;Minneapolis&lt;/City&gt;
                  &lt;StateOrProvinceCode&gt;MN&lt;/StateOrProvinceCode&gt;
                  &lt;PostalCode&gt;55411&lt;/PostalCode&gt;
                  &lt;CountryCode&gt;US&lt;/CountryCode&gt;
               &lt;/Address&gt;
            &lt;/Recipient&gt;
            &lt;ShippingChargesPayment&gt;
               &lt;PaymentType&gt;SENDER&lt;/PaymentType&gt;
               &lt;Payor&gt;
                  &lt;ResponsibleParty&gt;
                     &lt;AccountNumber&gt;&lt;/AccountNumber&gt;
                     &lt;Tins&gt;
                        &lt;TinType&gt;BUSINESS_STATE&lt;/TinType&gt;
                        &lt;Number&gt;123456&lt;/Number&gt;
                     &lt;/Tins&gt;
                  &lt;/ResponsibleParty&gt;
               &lt;/Payor&gt;
            &lt;/ShippingChargesPayment&gt;
            &lt;SpecialServicesRequested&gt;
               &lt;SpecialServiceTypes&gt;SATURDAY_DELIVERY&lt;/SpecialServiceTypes&gt;
            &lt;/SpecialServicesRequested&gt;
            &lt;LabelSpecification&gt;
               &lt;LabelFormatType&gt;COMMON2D&lt;/LabelFormatType&gt;
               &lt;ImageType&gt;PNG&lt;/ImageType&gt;
               &lt;LabelStockType&gt;PAPER_4X6&lt;/LabelStockType&gt;
            &lt;/LabelSpecification&gt;
            &lt;RateRequestTypes&gt;ACCOUNT&lt;/RateRequestTypes&gt;
            &lt;PackageCount&gt;1&lt;/PackageCount&gt;
            &lt;RequestedPackageLineItems&gt;
               &lt;SequenceNumber&gt;1&lt;/SequenceNumber&gt;
               &lt;GroupPackageCount&gt;1&lt;/GroupPackageCount&gt;
               &lt;Weight&gt;
                  &lt;Units&gt;LB&lt;/Units&gt;
                  &lt;Value&gt;20.0&lt;/Value&gt;
               &lt;/Weight&gt;
               &lt;Dimensions&gt;
                  &lt;Length&gt;12&lt;/Length&gt;
                  &lt;Width&gt;12&lt;/Width&gt;
                  &lt;Height&gt;12&lt;/Height&gt;
                  &lt;Units&gt;IN&lt;/Units&gt;
               &lt;/Dimensions&gt;
               &lt;ContentRecords&gt;
                  &lt;PartNumber&gt;123445&lt;/PartNumber&gt;
                  &lt;ItemNumber&gt;kjdjalsro1262739827&lt;/ItemNumber&gt;
                  &lt;ReceivedQuantity&gt;12&lt;/ReceivedQuantity&gt;
                  &lt;Description&gt;ContentDescription&lt;/Description&gt;
               &lt;/ContentRecords&gt;
            &lt;/RequestedPackageLineItems&gt;
         &lt;/RequestedShipment&gt;
      &lt;/RateRequest&gt;
   &lt;/SOAP-ENV:Body&gt;
&lt;/SOAP-ENV:Envelope&gt;
</snippet></ROW><ROW><id>18552049</id><snippet>url(r'^profile/(?P&lt;id&gt;\d+)/?(.+)$', Profile.as_view()),</snippet></ROW><ROW><id>18552237</id><snippet>StopIteration</snippet></ROW><ROW><id>18552237</id><snippet>next()</snippet></ROW><ROW><id>18552237</id><snippet>tuple(map(next, iterators))</snippet></ROW><ROW><id>18552237</id><snippet>StopIteration</snippet></ROW><ROW><id>18552251</id><snippet>PRIMARY_KEY</snippet></ROW><ROW><id>18552251</id><snippet>PRIMARY KEY</snippet></ROW><ROW><id>18552251</id><snippet>cur.execute("CREATE TABLE foreign_crew(id VARCHAR(45) PRIMARY KEY, surname VARCHAR(45))")
</snippet></ROW><ROW><id>18552347</id><snippet>num_list = []</snippet></ROW><ROW><id>18552347</id><snippet>while</snippet></ROW><ROW><id>18552347</id><snippet>num_list = []
while True:
    ...
</snippet></ROW><ROW><id>18552347</id><snippet>high = max(num_list)
low = min(num_list)
</snippet></ROW><ROW><id>18552601</id><snippet>sin(radians(12))
sin(radians(33))
# etc
</snippet></ROW><ROW><id>18552601</id><snippet>sin</snippet></ROW><ROW><id>18552601</id><snippet>sin(radians(12+angle))
sin(radians(33+angle))
</snippet></ROW><ROW><id>18552601</id><snippet>sin</snippet></ROW><ROW><id>18552601</id><snippet>sin(radians(12)) == sin(radians(12+360)) == sin(radians(12-360))</snippet></ROW><ROW><id>18552622</id><snippet>&gt;&gt;&gt; import json
&gt;&gt;&gt; numbers = {'1': 2, '3': 4, '5': 6}
&gt;&gt;&gt; with open('numbers.txt', 'w') as f:
...     json.dump(numbers, f)
&gt;&gt;&gt; with open('numbers.txt', 'r') as f:
...     print json.load(f)
... 
{u'1': 2, u'3': 4, u'5': 6}
</snippet></ROW><ROW><id>18552801</id><snippet>def generator(howmany):
    for x in xrange(howmany):
        yield x

g = generator(10)

with open('output.txt', 'w') as f:
    for x in g:
        f.write(str(x))

with open('output.txt', 'r') as f:
    print f.readlines()
</snippet></ROW><ROW><id>18552801</id><snippet>&gt;&gt;&gt; 
['0123456789']
</snippet></ROW><ROW><id>18552842</id><snippet>&gt;&gt;&gt; import urllib
&gt;&gt;&gt; s = b'https\u00253A\u00255C\u00252F\u00255C\u00252Ffbcdn-video'
&gt;&gt;&gt; print urllib.unquote_plus(s.decode('unicode_escape'))
https:\/\/fbcdn-video
</snippet></ROW><ROW><id>18552842</id><snippet>&gt;&gt;&gt; import re
&gt;&gt;&gt; import urllib
&gt;&gt;&gt; s = b'https\u00253A\u00255C\u00252F\u00255C\u00252Ffbcdn-video'
&gt;&gt;&gt; re.sub(r'\\(.)', r'\1', urllib.unquote_plus(s.decode('unicode_escape')))
u'https://fbcdn-video'
</snippet></ROW><ROW><id>18552945</id><snippet>i</snippet></ROW><ROW><id>18552945</id><snippet>1</snippet></ROW><ROW><id>18552945</id><snippet>for i in range(n):
    X = 0
    for j in range(n-i):
        X = X * 10 + 1
    print X
</snippet></ROW><ROW><id>18553009</id><snippet>Slide</snippet></ROW><ROW><id>18553009</id><snippet>add_slide()</snippet></ROW><ROW><id>18553009</id><snippet>Presentation</snippet></ROW><ROW><id>18553115</id><snippet>O(n^3)</snippet></ROW><ROW><id>18553115</id><snippet>O(n log n)</snippet></ROW><ROW><id>18553176</id><snippet>np.hamming(len(window_samples)) * window_samples</snippet></ROW><ROW><id>18553176</id><snippet>#calc magnetitude from FFT
fftData=fft(windowed);
#Get Magnitude (linear scale) of first half values
Mag=abs(fftData(1:Chunk/2))
#if you want log scale R=20 * np.log10(Mag)
plot(Mag)
</snippet></ROW><ROW><id>18553176</id><snippet>fft = np.sqrt(np.square(fft) / np.mean(fft)) # use RMS of data
</snippet></ROW><ROW><id>18553176</id><snippet>window_samples = channel_samples[ wi : (wi + self.window_size)]

#framMax=np.max(window_samples);
framMean=np.mean(window_samples);

Normalized=window_samples/framMean;
</snippet></ROW><ROW><id>18553238</id><snippet>literal_eval</snippet></ROW><ROW><id>18553238</id><snippet>import ast
s = '''(0, 0), (0, 2), ...'''
result = ast.literal_eval('({0})'.format(s))
</snippet></ROW><ROW><id>18553270</id><snippet>{% autoescape off %}{{ post.text|gfm }}{% endautoescape %}
</snippet></ROW><ROW><id>18553270</id><snippet>{{ post.text|gfm|safe }}
</snippet></ROW><ROW><id>18553283</id><snippet>bytes()</snippet></ROW><ROW><id>18553283</id><snippet>str()</snippet></ROW><ROW><id>18553283</id><snippet>message = "Message"</snippet></ROW><ROW><id>18553283</id><snippet>secret = "secret"</snippet></ROW><ROW><id>18553283</id><snippet>bytes()</snippet></ROW><ROW><id>18553364</id><snippet>Counter(t for u in l['users'] for p in u['photos'] for t in p['tags'])
</snippet></ROW><ROW><id>18553364</id><snippet>from collections import Counter

l = {'users': [{'photos': [{'tags': [1,2,3,4,5]}, {'tags': [3,4,5]}]},
               {'photos': [{'tags': [1]}, {'tags': [2,3,4,5]}]}]}

tags = Counter(t for u in l['users'] for p in u['photos'] for t in p['tags'])
print tags  # prints Counter({3: 3, 4: 3, 5: 3, 1: 2, 2: 2})
</snippet></ROW><ROW><id>18553508</id><snippet>csv</snippet></ROW><ROW><id>18553508</id><snippet>import csv 

f = open('infile', newline='')
reader = csv.reader(f)
for row in reader:
    for field in row:
        print('-- {}'.format(field))
</snippet></ROW><ROW><id>18553508</id><snippet>-- john
-- male US
-- done
-- Some sample text
across multiple lines. There
can be many lines of this
-- foo bar baz
-- jane
-- female UK
-- done
-- fields can have , in them
-- abc xyz
</snippet></ROW><ROW><id>18553544</id><snippet>templatetags</snippet></ROW><ROW><id>18553544</id><snippet>__init__.py</snippet></ROW><ROW><id>18553544</id><snippet>INSTALLED_APPS</snippet></ROW><ROW><id>18553986</id><snippet>merge</snippet></ROW><ROW><id>18553986</id><snippet>os.path.join</snippet></ROW><ROW><id>18553986</id><snippet>DataFrame</snippet></ROW><ROW><id>18553986</id><snippet>JJ</snippet></ROW><ROW><id>18553986</id><snippet>WW</snippet></ROW><ROW><id>18553986</id><snippet>merge</snippet></ROW><ROW><id>18553986</id><snippet>DataFrame</snippet></ROW><ROW><id>18553986</id><snippet>read_csv</snippet></ROW><ROW><id>18553986</id><snippet>group</snippet></ROW><ROW><id>18553986</id><snippet>In [49]: df1 = DataFrame(randn(10, 1), columns=['a'])

In [50]: df1['group'] = np.random.choice(['b', 'c'], size=len(df1))

In [51]: df2 = DataFrame(randn(10, 1), columns=['b'])

In [52]: df2['group'] = np.random.choice(['b', 'c'], size=len(df1))

In [53]: df1.to_csv('df1.csv', index=False)

In [54]: cat df1.csv
a,group
-1.590035935931282,b
0.5496398501891229,c
-0.6484689548035797,b
0.19162302248253205,b
-0.9852064283582675,c
0.5975155551821989,b
0.29443634291217047,b
-0.7929994157215382,b
-1.9546460886048795,b
0.19195457928475546,c

In [55]: df2.to_csv('df2.csv', index=False)

In [56]: cat df2.csv
b,group
-1.2874060006117918,c
1.1037959548210117,b
0.47172389260467507,c
0.12802538607490285,c
-0.8753708425917293,b
-0.09187827793091947,b
1.140204215271196,c
0.4862940170888638,b
-1.1080430563137758,b
-1.3698112665693232,c

In [57]: df1_csv = read_csv('df1.csv', index_col=None)

In [58]: df2_csv = read_csv('df2.csv', index_col=None)

In [59]: df1_csv
Out[59]:
       a group
0 -1.590     b
1  0.550     c
2 -0.648     b
3  0.192     b
4 -0.985     c
5  0.598     b
6  0.294     b
7 -0.793     b
8 -1.955     b
9  0.192     c

In [60]: df2_csv
Out[60]:
       b group
0 -1.287     c
1  1.104     b
2  0.472     c
3  0.128     c
4 -0.875     b
5 -0.092     b
6  1.140     c
7  0.486     b
8 -1.108     b
9 -1.370     c

In [61]: df3 = pd.merge(df1_csv, df2_csv, on='group')

In [62]: df3
Out[62]:
        a group      b
0  -1.590     b  1.104
1  -1.590     b -0.875
2  -1.590     b -0.092
3  -1.590     b  0.486
4  -1.590     b -1.108
5  -0.648     b  1.104
6  -0.648     b -0.875
7  -0.648     b -0.092
8  -0.648     b  0.486
9  -0.648     b -1.108
10  0.192     b  1.104
11  0.192     b -0.875
12  0.192     b -0.092
13  0.192     b  0.486
14  0.192     b -1.108
15  0.598     b  1.104
16  0.598     b -0.875
17  0.598     b -0.092
18  0.598     b  0.486
19  0.598     b -1.108
20  0.294     b  1.104
21  0.294     b -0.875
22  0.294     b -0.092
23  0.294     b  0.486
24  0.294     b -1.108
25 -0.793     b  1.104
26 -0.793     b -0.875
27 -0.793     b -0.092
28 -0.793     b  0.486
29 -0.793     b -1.108
30 -1.955     b  1.104
31 -1.955     b -0.875
32 -1.955     b -0.092
33 -1.955     b  0.486
34 -1.955     b -1.108
35  0.550     c -1.287
36  0.550     c  0.472
37  0.550     c  0.128
38  0.550     c  1.140
39  0.550     c -1.370
40 -0.985     c -1.287
41 -0.985     c  0.472
42 -0.985     c  0.128
43 -0.985     c  1.140
44 -0.985     c -1.370
45  0.192     c -1.287
46  0.192     c  0.472
47  0.192     c  0.128
48  0.192     c  1.140
49  0.192     c -1.370
</snippet></ROW><ROW><id>18553986</id><snippet>is</snippet></ROW><ROW><id>18553986</id><snippet>==</snippet></ROW><ROW><id>18553986</id><snippet>str.endswith</snippet></ROW><ROW><id>18553986</id><snippet>import glob

for f in glob.glob(os.path.join(path, '*J.csv')):
    if len(f) == 12:
        # do all the thingz!
</snippet></ROW><ROW><id>18554039</id><snippet>keys_a = set(dict_a.keys())
keys_b = set(dict_b.keys())
intersection = keys_a &amp; keys_b # '&amp;' operator is used for set intersection
</snippet></ROW><ROW><id>18554088</id><snippet>&gt;&gt;&gt; x = sympy.Symbol("x")
&gt;&gt;&gt; f = sympy.Function("f")
&gt;&gt;&gt; y = x * f(x)
&gt;&gt;&gt; y
x*f(x)
&gt;&gt;&gt; y.diff(x)
x*Derivative(f(x), x) + f(x)
</snippet></ROW><ROW><id>18554192</id><snippet>dir</snippet></ROW><ROW><id>18554192</id><snippet>In [98]: from ctypes import cdll

In [99]: libc = cdll.LoadLibrary('libc.so.6')

In [100]: dir(libc)
Out[100]:
['_FuncPtr',
 '__class__',
 '__delattr__',
 '__dict__',
 '__doc__',
 '__format__',
 '__getattr__',
 '__getattribute__',
 '__getitem__',
 '__hash__',
 '__init__',
 '__module__',
 '__new__',
 '__reduce__',
 '__reduce_ex__',
 '__repr__',
 '__setattr__',
 '__sizeof__',
 '__str__',
 '__subclasshook__',
 '__weakref__',
 '_func_flags_',
 '_func_restype_',
 '_handle',
 '_name']

In [101]: libc.printf
Out[101]: &lt;_FuncPtr object at 0x65a12c0&gt;

In [102]: dir(libc)
Out[102]:
['_FuncPtr',
 '__class__',
 '__delattr__',
 '__dict__',
 '__doc__',
 '__format__',
 '__getattr__',
 '__getattribute__',
 '__getitem__',
 '__hash__',
 '__init__',
 '__module__',
 '__new__',
 '__reduce__',
 '__reduce_ex__',
 '__repr__',
 '__setattr__',
 '__sizeof__',
 '__str__',
 '__subclasshook__',
 '__weakref__',
 '_func_flags_',
 '_func_restype_',
 '_handle',
 '_name',
 'printf']
</snippet></ROW><ROW><id>18554192</id><snippet>CDLL.__getitem__</snippet></ROW><ROW><id>18554192</id><snippet>CDLL.__getattr__</snippet></ROW><ROW><id>18554192</id><snippet>class CDLL(object):
    # ...

    def __getattr__(self, name):
        if name.startswith('__') and name.endswith('__'):
            raise AttributeError(name)
        func = self.__getitem__(name)
        setattr(self, name, func)
        return func

    def __getitem__(self, name_or_ordinal):
        func = self._FuncPtr((name_or_ordinal, self))
        if not isinstance(name_or_ordinal, (int, long)):
            func.__name__ = name_or_ordinal
        return func
</snippet></ROW><ROW><id>18554351</id><snippet>&gt;&gt;&gt; from nltk.corpus import wordnet as wn
&gt;&gt;&gt; wn.synsets('USA') 
</snippet></ROW><ROW><id>18554674</id><snippet>__metaclass__ = type</snippet></ROW><ROW><id>18554674</id><snippet>__metaclass__</snippet></ROW><ROW><id>18554674</id><snippet>object</snippet></ROW><ROW><id>18554674</id><snippet>__metaclass__</snippet></ROW><ROW><id>18554674</id><snippet>__init__.py</snippet></ROW><ROW><id>18554711</id><snippet>n=int(input())
counter = 1
for counter in range(1,n):
    a = counter*counter
    if a &gt;= n:
        break
    print(a)
</snippet></ROW><ROW><id>18554711</id><snippet>a &gt;= n</snippet></ROW><ROW><id>18554711</id><snippet>a &lt; n</snippet></ROW><ROW><id>18554711</id><snippet>if</snippet></ROW><ROW><id>18554711</id><snippet>for</snippet></ROW><ROW><id>18554711</id><snippet>print</snippet></ROW><ROW><id>18554711</id><snippet>while</snippet></ROW><ROW><id>18554711</id><snippet>for</snippet></ROW><ROW><id>18554761</id><snippet>file</snippet></ROW><ROW><id>18554761</id><snippet>file</snippet></ROW><ROW><id>18554761</id><snippet>file.fileno()</snippet></ROW><ROW><id>18554761</id><snippet>&gt;&gt;&gt; f = open("tmp.txt", "w")
&gt;&gt;&gt; help(f.fileno)
Help on built-in function fileno:

fileno(...)
    fileno() -&gt; integer "file descriptor".

    This is needed for lower-level file interfaces, such os.read().

&gt;&gt;&gt; f.fileno()
4
</snippet></ROW><ROW><id>18554761</id><snippet>f = os.popen('cat  &gt; out', 'w',1)
f.write('hello pipe')
f.close()
</snippet></ROW><ROW><id>18554766</id><snippet>vstack</snippet></ROW><ROW><id>18554766</id><snippet>&gt;&gt;&gt; x, y = np.mgrid[:2, :3]
&gt;&gt;&gt; np.vstack((x.ravel(),y.ravel())).T
array([[0, 0],
       [0, 1],
       [0, 2],
       [1, 0],
       [1, 1],
       [1, 2]])
</snippet></ROW><ROW><id>18554766</id><snippet>&gt;&gt;&gt; [(x,y) for x,y in zip(x.ravel(),y.ravel())]
[(0, 0), (0, 1), (0, 2), (1, 0), (1, 1), (1, 2)]
</snippet></ROW><ROW><id>18554784</id><snippet>location = location + sum(mot[x][1] for x in mot if x in str2)
</snippet></ROW><ROW><id>18554949</id><snippet>&gt;&gt;&gt; df
         date  duration user_id
0  2013-04-01        30    0001
1  2013-04-01        15    0001
2  2013-04-01        20    0002
3  2013-04-02        15    0002
4  2013-04-02        30    0002
&gt;&gt;&gt; df.groupby("date").agg({"duration": np.sum, "user_id": pd.Series.nunique})
            duration  user_id
date                         
2013-04-01        65        2
2013-04-02        45        1
&gt;&gt;&gt; df.groupby("date").agg({"duration": np.sum, "user_id": lambda x: x.nunique()})
            duration  user_id
date                         
2013-04-01        65        2
2013-04-02        45        1
</snippet></ROW><ROW><id>18555066</id><snippet>sed -i 's/old/new/g' file</snippet></ROW><ROW><id>18555066</id><snippet>old</snippet></ROW><ROW><id>18555066</id><snippet>new</snippet></ROW><ROW><id>18555066</id><snippet>file</snippet></ROW><ROW><id>18555066</id><snippet>-i</snippet></ROW><ROW><id>18555066</id><snippet>seedvalue</snippet></ROW><ROW><id>18555066</id><snippet>stepval</snippet></ROW><ROW><id>18555066</id><snippet>wwd.nm.conf</snippet></ROW><ROW><id>18555066</id><snippet>qsubScript.sh</snippet></ROW><ROW><id>18555142</id><snippet>Forward</snippet></ROW><ROW><id>18555142</id><snippet>from pyparsing import (Suppress, Word, nums, alphas, Regex, Forward, Group, 
                        Optional, OneOrMore, ParseResults)
from collections import defaultdict

"""
BNF for simple chemical formula (no nesting)

    integer :: '0'..'9'+
    element :: 'A'..'Z' 'a'..'z'*
    term :: element [integer]
    formula :: term+


BNF for nested chemical formula

    integer :: '0'..'9'+
    element :: 'A'..'Z' 'a'..'z'*
    term :: (element | '(' formula ')') [integer]
    formula :: term+

"""

LPAR,RPAR = map(Suppress,"()")
integer = Word(nums)

# add parse action to convert integers to ints, to support doing addition 
# and multiplication at parse time
integer.setParseAction(lambda t:int(t[0]))

element = Word(alphas.upper(), alphas.lower())
# or if you want to be more specific, use this Regex
# element = Regex(r"A[cglmrstu]|B[aehikr]?|C[adeflmorsu]?|D[bsy]|E[rsu]|F[emr]?|"
#                 "G[ade]|H[efgos]?|I[nr]?|Kr?|L[airu]|M[dgnot]|N[abdeiop]?|"
#                 "Os?|P[abdmortu]?|R[abefghnu]|S[bcegimnr]?|T[abcehilm]|"
#                 "Uu[bhopqst]|U|V|W|Xe|Yb?|Z[nr]")

# forward declare 'formula' so it can be used in definition of 'term'
formula = Forward()

term = Group((element | Group(LPAR + formula + RPAR)("subgroup")) + 
                Optional(integer, default=1)("mult"))

# define contents of a formula as one or more terms
formula &lt;&lt; OneOrMore(term)


# add parse actions for parse-time processing

# parse action to multiply out subgroups
def multiplyContents(tokens):
    t = tokens[0]
    # if these tokens contain a subgroup, then use multiplier to
    # extend counts of all elements in the subgroup
    if t.subgroup:
        mult = t.mult
        for term in t.subgroup:
            term[1] *= mult
        return t.subgroup
term.setParseAction(multiplyContents)

# add parse action to sum up multiple references to the same element
def sumByElement(tokens):
    elementsList = [t[0] for t in tokens]

    # construct set to see if there are duplicates
    duplicates = len(elementsList) &gt; len(set(elementsList))

    # if there are duplicate element names, sum up by element and
    # return a new nested ParseResults
    if duplicates:
        ctr = defaultdict(int)
        for t in tokens:
            ctr[t[0]] += t[1]
        return ParseResults([ParseResults([k,v]) for k,v in ctr.items()])
formula.setParseAction(sumByElement)


# run some tests
tests = """\
    H
    NaCl
    HO
    H2O
    HOH
    (H2O)2
    (H2O)2OH
    ((H2O)2OH)12
    C6H5OH
    """.splitlines()
for t in tests:
    if t.strip():
        results = formula.parseString(t)
        print t, '-&gt;', dict(results.asList())
</snippet></ROW><ROW><id>18555142</id><snippet>H -&gt; {'H': 1}
NaCl -&gt; {'Na': 1, 'Cl': 1}
HO -&gt; {'H': 1, 'O': 1}
H2O -&gt; {'H': 2, 'O': 1}
HOH -&gt; {'H': 2, 'O': 1}
(H2O)2 -&gt; {'H': 4, 'O': 2}
(H2O)2OH -&gt; {'H': 5, 'O': 3}
((H2O)2OH)12 -&gt; {'H': 60, 'O': 36}
C6H5OH -&gt; {'H': 6, 'C': 6, 'O': 1}
</snippet></ROW><ROW><id>18555203</id><snippet>.py</snippet></ROW><ROW><id>18555203</id><snippet>__init__.py</snippet></ROW><ROW><id>18555203</id><snippet>package</snippet></ROW><ROW><id>18555203</id><snippet>module</snippet></ROW><ROW><id>18555203</id><snippet>  mypackage
     __init__.py
     module_a.py
     module_b.py
        mysubpackage
             __init__.py
             module_c.py
             module_d.py
</snippet></ROW><ROW><id>18555203</id><snippet>mypackage.module_a</snippet></ROW><ROW><id>18555203</id><snippet>mypackage.mysubpacakge.module_c</snippet></ROW><ROW><id>18555203</id><snippet>mypackage</snippet></ROW><ROW><id>18555203</id><snippet>__init__.py</snippet></ROW><ROW><id>18555203</id><snippet>__init__.py</snippet></ROW><ROW><id>18555203</id><snippet>__init__.py</snippet></ROW><ROW><id>18555337</id><snippet>class Test(TestCase):
  def test_form_a(self):
    with patch('b.get_resource') as mock_tool:
      from b import A
      form_data = {'arg1': '1', 'arg2': 'Music'}
      form = A(data=form_data)
      mock_tool.return_value = MagicMock(spec=MusicModel)
</snippet></ROW><ROW><id>18555372</id><snippet>Data</snippet></ROW><ROW><id>18555372</id><snippet>int main ()
{
    struct String *mystr = AllocateString();
    mystr-&gt;AllocatorInstance.len = 10;
    mystr-&gt;AllocatorInstance.Data = (void *) malloc (10);
    memset (mystr-&gt;AllocatorInstance.Data, 0, 10);
    ((char *)mystr-&gt;AllocatorInstance.Data)[0] = 'h';
    ((char *)mystr-&gt;AllocatorInstance.Data)[2] = 'e';
    ((char *)mystr-&gt;AllocatorInstance.Data)[4] = 'l';
    ((char *)mystr-&gt;AllocatorInstance.Data)[6] = 'l';
    ((char *)mystr-&gt;AllocatorInstance.Data)[8] = 'o';

    FreeString (mystr);
}
</snippet></ROW><ROW><id>18555372</id><snippet>lldb.frame</snippet></ROW><ROW><id>18555372</id><snippet>lldb.process</snippet></ROW><ROW><id>18555372</id><snippet>script</snippet></ROW><ROW><id>18555372</id><snippet>Data</snippet></ROW><ROW><id>18555372</id><snippet>&gt;&gt;&gt; valobj = lldb.frame.FindVariable("mystr")
&gt;&gt;&gt; address = valobj.GetChildMemberWithName('AllocatorInstance').GetChildMemberWithName('Data').GetValueAsUnsigned()
&gt;&gt;&gt; size = valobj.GetChildMemberWithName('AllocatorInstance').GetChildMemberWithName('len').GetValueAsUnsigned()
&gt;&gt;&gt; print address
4296016096
&gt;&gt;&gt; print size
10
&gt;&gt;&gt; err = lldb.SBError()
&gt;&gt;&gt; print err
error: &lt;NULL&gt;
&gt;&gt;&gt; membuf = lldb.process.ReadMemory (address, size, err)
&gt;&gt;&gt; print err
success
&gt;&gt;&gt; membuf
'h\x00e\x00l\x00l\x00o\x00'
</snippet></ROW><ROW><id>18555372</id><snippet>&gt;&gt;&gt; for b in membuf:
...   print ord(b)
... 
104
0
101
0
108
0
108
0
111
0
</snippet></ROW><ROW><id>18555372</id><snippet>SBValue</snippet></ROW><ROW><id>18555372</id><snippet>Data</snippet></ROW><ROW><id>18555372</id><snippet>void *</snippet></ROW><ROW><id>18555372</id><snippet>SBProcess</snippet></ROW><ROW><id>18555399</id><snippet>json.dumps()</snippet></ROW><ROW><id>18555416</id><snippet>if sys.version_info[0] == 2:
   s = """
def raise_with_traceback(exc, traceback):
    raise exc, None, traceback
"""
   exec (s)
else:
   def raise_with_traceback(exc, traceback):
       raise exc.with_traceback(traceback)
</snippet></ROW><ROW><id>18555416</id><snippet>with_traceback</snippet></ROW><ROW><id>18555735</id><snippet>"".join(str(int(x) + int(y))[-1] for x, y in zip(_id, uid[4:]))
</snippet></ROW><ROW><id>18555735</id><snippet>'8322'</snippet></ROW><ROW><id>18555735</id><snippet>'6119'</snippet></ROW><ROW><id>18555890</id><snippet>(.{2,}?)(?:\s+\1)+
</snippet></ROW><ROW><id>18555902</id><snippet>with</snippet></ROW><ROW><id>18555902</id><snippet>input()</snippet></ROW><ROW><id>18555902</id><snippet>idk</snippet></ROW><ROW><id>18555902</id><snippet>print</snippet></ROW><ROW><id>18555914</id><snippet>def game(word, con):
    return (word + str('!') +
            word + str(',') +
            word + str(phrase1))
</snippet></ROW><ROW><id>18555914</id><snippet>def game(word, con):
    return word + '!' + \
           word + ',' + \
           word + str(phrase)
    # Removed the redundant str('!'), since '!' is a string literal we don't need to convert it
</snippet></ROW><ROW><id>18555914</id><snippet>def game(word, con):
    return "{word}!{word},{word}{phrase1}".format(
        word=word, phrase1=phrase1")
</snippet></ROW><ROW><id>18555914</id><snippet>def break_line():
    return "line\nbreak"
</snippet></ROW><ROW><id>18556003</id><snippet>...
if board[0] == board[1] == board[2]:
    return True
if board[3] == board[4] == board[5]:
    return True
...
</snippet></ROW><ROW><id>18556003</id><snippet>if checkAll() == True:
   print "The game is over!"
   break;
</snippet></ROW><ROW><id>18556030</id><snippet>close</snippet></ROW><ROW><id>18556030</id><snippet>proxy</snippet></ROW><ROW><id>18556030</id><snippet>mock</snippet></ROW><ROW><id>18556030</id><snippet>proxy mock</snippet></ROW><ROW><id>18556066</id><snippet>import threading

_f_got_killed = threading.Event()

def f():
    while(True):
        print "hello"
        _f_got_killed.wait(5)
        if _f_got_killed.is_set():
            break

def execute():
    t = threading.Timer(5,f)
    t.start()
    command = ''
    while command != 'exit':
        command = raw_input()
        if command == 'exit':
            _f_got_killed.set()
            t.cancel()

execute()
</snippet></ROW><ROW><id>18556425</id><snippet>break</snippet></ROW><ROW><id>18556425</id><snippet>continue</snippet></ROW><ROW><id>18556425</id><snippet>for y in file2.readlines():</snippet></ROW><ROW><id>18556425</id><snippet>file2.readlines()</snippet></ROW><ROW><id>18556425</id><snippet>file2 = open(filename2, 'r')</snippet></ROW><ROW><id>18556425</id><snippet>seek()</snippet></ROW><ROW><id>18556425</id><snippet>file2</snippet></ROW><ROW><id>18556474</id><snippet>&gt;&gt;&gt; def convert_to_tuple(elem):
        if isinstance(elem, list):
            return tuple(elem)
        elif isinstance(elem, basestring):
            return (elem,)
        else:
            # Do Something
            pass


&gt;&gt;&gt; convert_to_tuple('abc')
('abc',)
&gt;&gt;&gt; convert_to_tuple(['abc', 'def'])
('abc', 'def')
</snippet></ROW><ROW><id>18556474</id><snippet>basestring</snippet></ROW><ROW><id>18556474</id><snippet>str</snippet></ROW><ROW><id>18556474</id><snippet>&gt;&gt;&gt; def convert_to_tuple(elem):
        if isinstance(elem, basestring):
            return (elem,)
        else:
            return tuple(elem)


&gt;&gt;&gt; convert_to_tuple('abc')
('abc',)
&gt;&gt;&gt; convert_to_tuple(('abc', 'def'))
('abc', 'def')
&gt;&gt;&gt; convert_to_tuple(['abc', 'def'])
('abc', 'def')
</snippet></ROW><ROW><id>18556474</id><snippet>&gt;&gt;&gt; def convert_to_tuple(elem):
        return (elem,) if isinstance(elem, basestring) else tuple(elem)
</snippet></ROW><ROW><id>18556529</id><snippet>__gt</snippet></ROW><ROW><id>18556529</id><snippet>UserFriends.objects.filter(userid__userid__gt=0)
</snippet></ROW><ROW><id>18556624</id><snippet>rstrip</snippet></ROW><ROW><id>18556624</id><snippet>with open('lines.txt') as f:
    for i in f:
        i = i.rstrip()
        line = input('line: ')
        if line != i:
            print('No!')
</snippet></ROW><ROW><id>18556734</id><snippet>    c, addr = server.accept()
    print 'Got connection from', addr
    c.setblocking(1) # Make it blocking.
    connections.append( [c, addr] )
</snippet></ROW><ROW><id>18556748</id><snippet>os.mkdir(ArchivesZip)
</snippet></ROW><ROW><id>18556748</id><snippet>os.makedirs(dir)
</snippet></ROW><ROW><id>18556748</id><snippet>dir</snippet></ROW><ROW><id>18556748</id><snippet>dir</snippet></ROW><ROW><id>18556748</id><snippet>dir()</snippet></ROW><ROW><id>18556968</id><snippet>done</snippet></ROW><ROW><id>18556968</id><snippet>done = True</snippet></ROW><ROW><id>18556968</id><snippet>print x</snippet></ROW><ROW><id>18556968</id><snippet>int(col[3]) &lt; int(col2[2])</snippet></ROW><ROW><id>18557180</id><snippet>#!/usr/bin/env bash
set -e
xvfb-run --server-args="-screen 0 1024x768x24" python your_parse_script.py
</snippet></ROW><ROW><id>18557315</id><snippet>class DescriptionsInline(admin.TabularInline):
    model = Descriptions
    exclude = ['modified']
    extra = 0
    def formfield_for_dbfield(self, field, **kwargs):
        if field.name == 'descriptiontype':
            parent_business = self.get_object(kwargs['request'], Business)
            if parent_business == None:
                related_descriptiontype = DescriptionType.objects.all()
            else:
                related_descriptiontype = DescriptionType.objects.filter(category=parent_business.category_id)
            return forms.ModelChoiceField(queryset=related_descriptiontype)
        return super(DescriptionsInline, self).formfield_for_dbfield(field, **kwargs)


    def get_object(self, request, model):
        object_id = request.META['PATH_INFO'].strip('/').split('/')[-1]
        try:
            object_id = int(object_id)
        except ValueError:
            return None
        return model.objects.get(pk=object_id)
</snippet></ROW><ROW><id>18557373</id><snippet>    def shuffle(self):
      import random
      random.shuffle(self.cards)
      DrawCard = self.cards[0]
      DrawCard.draw()
</snippet></ROW><ROW><id>18557373</id><snippet>    def draw(self):
</snippet></ROW><ROW><id>18557422</id><snippet>cd</snippet></ROW><ROW><id>18557422</id><snippet>run</snippet></ROW><ROW><id>18557422</id><snippet>subprocess</snippet></ROW><ROW><id>18557422</id><snippet>import subprocess

subprocess.call("./program", cwd="/home/user/a/b")
</snippet></ROW><ROW><id>18557422</id><snippet>cwd</snippet></ROW><ROW><id>18557422</id><snippet>call</snippet></ROW><ROW><id>18557428</id><snippet>    import xml.etree.ElementTree as ET

namespaces = {"pns" : "http://apple.com/itunes/importer"}
tree = ET.parse('metadataCopy.xml')
root = tree.getroot()

p = root.find(".//pns:intervals/pns:interval", namespaces=namespaces)

print p
for interval in root.iterfind(".//pns:intervals/pns:interval",namespaces=namespaces):
    start_date = interval.find('pns:start_date',namespaces=namespaces)
    end_date = interval.find('pns:end_date',namespaces=namespaces)
    st_text = end_text = None
    if start_date is not None:
        st_text = start_date.text
    if end_date is not None:
        end_text = end_date.text 
    print st_text, end_text
</snippet></ROW><ROW><id>18557428</id><snippet>&lt;Element '{http://apple.com/itunes/importer}interval' at 0x178b350&gt;
2013-08-25 2014-09-01
2014-09-01 None
</snippet></ROW><ROW><id>18557502</id><snippet>join()</snippet></ROW><ROW><id>18557502</id><snippet>contains_eager()</snippet></ROW><ROW><id>18557502</id><snippet>q = session.query(Parent).\
    join(Parent.children).\
    options(contains_eager(Parent.children)).\
    filter(Child.foo == 1)
</snippet></ROW><ROW><id>18557547</id><snippet>small_list1</snippet></ROW><ROW><id>18557547</id><snippet>small_list2</snippet></ROW><ROW><id>18557547</id><snippet>[path, md5]</snippet></ROW><ROW><id>18557547</id><snippet>path_dict1 = something()
path_dict2 = something_else()
save_list = [(path, md5) for path, md5 in path_dict2.viewitems()
             if md5 != path_dict1.get(path)]
</snippet></ROW><ROW><id>18557624</id><snippet>from pymongo import Connection

server="localhost"
port = 27017
#Establish a connection with mongo instance.
conn = Connection(server,port)
</snippet></ROW><ROW><id>18557624</id><snippet>poll = conn.events.polls_post.find_one({},{"title" : 1}) #first parameter is the query, second one is the projection.
print "Title : ", poll['title']
</snippet></ROW><ROW><id>18557624</id><snippet>polls = conn.events.polls_post.find({},{"title" : 1})#first parameter is the query, second one is the projection.
for poll in polls:
    print "Title : ",poll['title']
</snippet></ROW><ROW><id>18557624</id><snippet>from models import Post 
posts = Post.objects.all() 
for post in posts: 
    print post.title
</snippet></ROW><ROW><id>18557624</id><snippet>class Post(models.Model):
    created_on = models.DateTimeField(auto_now_add=True, null=True)
    title = models.CharField()
    text = models.TextField()
    tags = ListField()
</snippet></ROW><ROW><id>18557749</id><snippet>try</snippet></ROW><ROW><id>18557749</id><snippet>finally</snippet></ROW><ROW><id>18557749</id><snippet>Try</snippet></ROW><ROW><id>18557749</id><snippet>finally</snippet></ROW><ROW><id>18557749</id><snippet>try:
    create_temp_file()
finally:
    delete_temp_file()
</snippet></ROW><ROW><id>18557749</id><snippet>from signal import *
import sys

def clean(*args):
    delete_temp_file()
    sys.exit(0)

for sig in (SIGABRT, SIGBREAK, SIGILL, SIGINT, SIGSEGV, SIGTERM):
    signal(sig, clean)
</snippet></ROW><ROW><id>18557801</id><snippet>New</snippet></ROW><ROW><id>18557801</id><snippet>delete</snippet></ROW><ROW><id>18557801</id><snippet>urls.py</snippet></ROW><ROW><id>18557801</id><snippet>Alert</snippet></ROW><ROW><id>18557801</id><snippet>delete</snippet></ROW><ROW><id>18557801</id><snippet>New</snippet></ROW><ROW><id>18557801</id><snippet>alert_id</snippet></ROW><ROW><id>18557801</id><snippet>  alert = New.objects.get(pk=a_id)
</snippet></ROW><ROW><id>18557801</id><snippet>Alert</snippet></ROW><ROW><id>18557801</id><snippet>New</snippet></ROW><ROW><id>18557801</id><snippet>Alert</snippet></ROW><ROW><id>18557801</id><snippet>ForeignKey</snippet></ROW><ROW><id>18557801</id><snippet>New</snippet></ROW><ROW><id>18557801</id><snippet>class New(models.Model):
  alert = models.ForeignKey(Alert, verbose_name=_("Alert posts"))
  ....
</snippet></ROW><ROW><id>18557801</id><snippet>alert_id</snippet></ROW><ROW><id>18557801</id><snippet>manage.py syndb</snippet></ROW><ROW><id>18557801</id><snippet>DoesNotExist</snippet></ROW><ROW><id>18557801</id><snippet>In [2]: appname.models.New.objects.get(pk=-1)
---------------------------------------------------------------------------
DoesNotExist                              Traceback (most recent call last)
/usr/local/lib/python2.6/dist-packages/django/core/management/commands/shell.pyc in &lt;module&gt;()
----&gt; 1 lead.models.Lead.objects.get(pk=-1)

/usr/local/lib/python2.6/dist-packages/django/db/models/manager.pyc in get(self, *args, **kwargs)
    129
    130     def get(self, *args, **kwargs):
--&gt; 131         return self.get_query_set().get(*args, **kwargs)
    132
    133     def get_or_create(self, **kwargs):
....
DoesNotExist: Lead matching query does not exist.
</snippet></ROW><ROW><id>18557801</id><snippet>settings.py</snippet></ROW><ROW><id>18557801</id><snippet>settings.py</snippet></ROW><ROW><id>18557801</id><snippet>LOGGING = {...}</snippet></ROW><ROW><id>18557890</id><snippet>&gt;&gt;&gt; year_list = range(2000,2014)
&gt;&gt;&gt; filenames = ["calendar_{0}.txt".format(year) for year in year_list]
&gt;&gt;&gt; filenames
['calendar_2000.txt', 'calendar_2001.txt', 'calendar_2002.txt', 
 'calendar_2003.txt', 'calendar_2004.txt', 'calendar_2005.txt', 
 'calendar_2006.txt', 'calendar_2007.txt', 'calendar_2008.txt', 
 'calendar_2009.txt', 'calendar_2010.txt', 'calendar_2011.txt', 
 'calendar_2012.txt', 'calendar_2013.txt']
&gt;&gt;&gt;
</snippet></ROW><ROW><id>18557927</id><snippet>filter_long_words</snippet></ROW><ROW><id>18557927</id><snippet>n = raw_input("Display words, that longer than...\n")
print filter_long_words(input_list, n)  
</snippet></ROW><ROW><id>18557927</id><snippet>n</snippet></ROW><ROW><id>18557927</id><snippet>&gt;&gt;&gt; 2 &gt; '0'
False
</snippet></ROW><ROW><id>18557927</id><snippet>strings</snippet></ROW><ROW><id>18557927</id><snippet>filtered_words = filter(lambda: len(word) &gt; n, words)
</snippet></ROW><ROW><id>18557968</id><snippet>f2py</snippet></ROW><ROW><id>18557968</id><snippet>f2py</snippet></ROW><ROW><id>18557968</id><snippet>f2py</snippet></ROW><ROW><id>18557968</id><snippet>numpy</snippet></ROW><ROW><id>18557999</id><snippet>mutated = False           # First, assume no mutation is present
for index in range(0, len(org), 3):
    if n[org[index:index+3]] != n[pat[index:index+3]]:
        mutated = True    # Set mutation flag to True
        break             # Abort the loop - no point in checking any further
if mutated:
    print("The patient's amino acid sequence is mutated.")
else:
    print("The patient's amino acid sequence is not mutated.")
</snippet></ROW><ROW><id>18557999</id><snippet>org</snippet></ROW><ROW><id>18557999</id><snippet>pat</snippet></ROW><ROW><id>18558065</id><snippet>from bs4 import BeautifulSoup

html="""
&lt;p&gt;This is the first paragraph with some details&lt;/p&gt;
&lt;p&gt;&lt;a href="user123"&gt;user1&lt;/a&gt;&lt;font&gt;This is opening contents for user1&lt;/font&gt;&lt;/p&gt;
&lt;p&gt;&lt;font&gt;This is the contents from user1&lt;/font&gt;&lt;/p&gt;
&lt;font&gt;&lt;p&gt;This is more content from user1&lt;/p&gt;&lt;/font&gt;
&lt;p&gt;&lt;a href="user234"&gt;user2&lt;/a&gt;&lt;font&gt;This is opening contents for user2&lt;/font&gt;&lt;/p&gt;
&lt;p&gt;&lt;font&gt;This is the contents from user2&lt;/font&gt;&lt;/p&gt;
&lt;font&gt;&lt;p&gt;This is more content from user1&lt;/p&gt;&lt;/font&gt;
"""

soup = BeautifulSoup(html)
for i in soup.find_all('a'):
  print 'name:', i.text
  for s in [i, i.parent.find_next_sibling()]:
    while s &lt;&gt; None:
      if s.find('a') &lt;&gt; None:
        break
      print 'contents:', s.text
      s = s.find_next_sibling()
</snippet></ROW><ROW><id>18558065</id><snippet>find_all</snippet></ROW><ROW><id>18558065</id><snippet>findAll</snippet></ROW><ROW><id>18558065</id><snippet>find_next_sibling</snippet></ROW><ROW><id>18558115</id><snippet>import time 
import wx.wizard


class Wizard(wx.wizard.Wizard):
    def __init__(self, parent, title):
        wx.wizard.Wizard.__init__(self, parent, wx.ID_ANY, title)
        self.pages = []
        self.Bind(wx.wizard.EVT_WIZARD_PAGE_CHANGED, self.on_page_changed)

    def add_page(self, page):
        """Add a WizardPage to the pages list"""
        self.pages.append(page)

    def chain_pages(self):
        i = 0
        while 1:
            if i == len(self.pages) - 1:
                break
            else:
                wx.wizard.WizardPageSimple_Chain(self.pages[i],
                                                 self.pages[i + 1])
                i += 1

    def run(self):
        self.RunWizard(self.pages[0])

    def on_page_changed(self, evt):
        # if coming from self.pages[0]
        # and direction is forward
        if evt.GetDirection():
            direction = 'forward'
        else:
            direction = 'backward'

        if evt.GetPage() is self.pages[1]\
        and direction == "forward":
#             self.pages[1].fill_gauge()
            self.pages[1].timer.Start(1000)


class StartPage(wx.wizard.WizardPageSimple):

    def __init__(self, parent, title):
        wx.wizard.WizardPageSimple.__init__(self, parent)
        self.sizer = wx.BoxSizer(wx.VERTICAL)
        self.text = wx.StaticText(self, -1,
        "This is the First Page")
        # self.text.Wrap(parent.GetClientSizeTuple()[0])
        self.sizer.Add(self.text, 0, wx.ALIGN_CENTER | wx.ALL, 5)


class UpdatePage(wx.wizard.WizardPageSimple):
    def __init__(self, parent, title):
        wx.wizard.WizardPageSimple.__init__(self, parent)
        self.sizer = wx.BoxSizer(wx.VERTICAL)
        self.status = wx.StaticText(self, -1, "This is the Second Page")
        self.gauge = wx.Gauge(self, -1, name="Guage")

        self.sizer.Add(self.status, 0, wx.ALIGN_CENTER | wx.ALL, 5)
        self.sizer.Add(self.gauge, 0,
                       wx.EXPAND | wx.ALIGN_CENTER_HORIZONTAL | wx.ALL, 10)
        self.SetSizer(self.sizer)

        self.gauge_pos = 0  # Added
        self.timer = wx.Timer(self)  # Added
        self.Bind(wx.EVT_TIMER, self.on_gauge_timer)  # Added

    def update(self, percent, status):
        self.status.SetLabel(status)
        self.gauge.SetValue(percent)
        # self.Refresh()

#     def fill_gauge(self):
#         x = 0
#         while x &lt;= 100:
#             self.update(x, "Gauge is at %d" % x)
#             x += 10
#             time.sleep(1)

    def on_gauge_timer(self, event):  # Added method
        if self.gauge_pos &lt; 100:
            self.gauge_pos += 10
            self.update(self.gauge_pos, "Gauge is at %d" % self.gauge_pos)
        else:
            self.timer.Stop()
            self.gauge_pos = 0


if __name__ == '__main__':
    app = wx.App()
    wizard = Wizard(None, "Updater")
    wizard.add_page(StartPage(wizard, "Updater"))
    wizard.add_page(UpdatePage(wizard, "Updater"))
    wizard.chain_pages()
    wizard.run()
    wizard.Destroy()
    app.MainLoop()
</snippet></ROW><ROW><id>18558172</id><snippet>writelines()</snippet></ROW><ROW><id>18558172</id><snippet>write()</snippet></ROW><ROW><id>18558172</id><snippet>str(get_size)</snippet></ROW><ROW><id>18558172</id><snippet>outfile.write(str(get_size))
</snippet></ROW><ROW><id>18558172</id><snippet>writelines()</snippet></ROW><ROW><id>18558172</id><snippet>filesizes = [str((os.path.getsize(file)) for file in files]
with open ("file_size.txt", "w") as outfile:
    outfile.writelines(filesizes)
</snippet></ROW><ROW><id>18558210</id><snippet>from collections import Counter

l =  ['some', 'here', 'tags', 'some', 'created', 'here', 'tags']
print(Counter(l).items())
</snippet></ROW><ROW><id>18558210</id><snippet>[('created', 1), ('some', 2), ('here', 2), ('tags', 2)]
</snippet></ROW><ROW><id>18558295</id><snippet>def MenuClicked(self, event):
    id_selected = event.GetId()
</snippet></ROW><ROW><id>18558376</id><snippet>&gt;&gt;&gt; units_ability = [(1L,), (2L,)] # units_abilities = (Session....all())
&gt;&gt;&gt; [x for (x,) in units_ability]
[1L, 2L]
</snippet></ROW><ROW><id>18558453</id><snippet>#Models

class ExpedienteConsultaInicial(models.Model):
    #max_legth=10 might be too small
    credencial_consultainicial = models.CharField(max_length=100, null=True, blank=True)

    def __unicode__(self):
        return self.credencial_consultainicial


class ConsultasSubsecuentes(models.Model):
     #related_name is name of attribute of instance of model 
     #to (not from!) which ForeignKey points.
     #Like:
     #assuming that `related_name` is 'consultations'
     #instance = ExpedienteConsultaInicial.objects.get(
     #                     credencial_consultainicial='text text text'
     #)
     #instaqnce.consultations.all()
     #So I suggest to change `related_name` to something that will explain what data of this model means in context of model to which it points with foreign key.
     consultasbc_credencial = models.ForeignKey(ExpedienteConsultaInicial,
     related_name='consultations')

#View    

def expediente_detalle(request, credencial):
    #Another suggestion is to not abuse CamelCase - look for PEP8
    #It is Python's code-style guide.
    detalle = get_object_or_404(ExpedienteConsultaInicial, credencial_consultainicial=credencial)
    subsequent_consultations = detalle.csb_credencial.all()
    return render(request, 'ExpedienteDetalle.html', {'Expediente_Detalle': detalle, 'consultations': subsequent_consultations})
</snippet></ROW><ROW><id>18558453</id><snippet>related_name</snippet></ROW><ROW><id>18558904</id><snippet>myservice.stopService</snippet></ROW><ROW><id>18558904</id><snippet>reactor.stop</snippet></ROW><ROW><id>18558904</id><snippet>self.patch(reactor, 'stop', mock.Mock())</snippet></ROW><ROW><id>18558904</id><snippet>stop</snippet></ROW><ROW><id>18558904</id><snippet>stopService</snippet></ROW><ROW><id>18558907</id><snippet>n</snippet></ROW><ROW><id>18558907</id><snippet>d = {}
size = sys.getsizeof(d)
print size
i = 0
j = 0
while i &lt; 3:
    d[j] = j
    j += 1
    new_size = sys.getsizeof(d)
    if size != new_size:
        print new_size
        size = new_size
        i += 1
</snippet></ROW><ROW><id>18558907</id><snippet>280
1048
3352
12568
</snippet></ROW><ROW><id>18558998</id><snippet>list_of_files</snippet></ROW><ROW><id>18558998</id><snippet>def list_of_files(self ,dir_name ,traversed = [], results = []): 
</snippet></ROW><ROW><id>18558998</id><snippet>results</snippet></ROW><ROW><id>18558998</id><snippet>results.append</snippet></ROW><ROW><id>18558998</id><snippet>def list_of_files(self, dir_name, traversed=None, results=None): 
    if traversed is None:
        traversed = []
    if results is None:
        results = []
    # rest of your method...
</snippet></ROW><ROW><id>18558999</id><snippet>Parent.foo(self, ...)</snippet></ROW><ROW><id>18558999</id><snippet>super()</snippet></ROW><ROW><id>18558999</id><snippet>super()</snippet></ROW><ROW><id>18558999</id><snippet>super()</snippet></ROW><ROW><id>18558999</id><snippet>class Base(object):
    def foo(self):
        print 'Base'


class Child1(Base):
    def foo(self):
        super(Child1, self).foo()
        print 'Child1'


class Child2(Base):
    def foo(self):
        super(Child2, self).foo()
        print 'Child2'



class GrandChild(Child1, Child2):
    def foo(self):
        super(Child2, self).foo()
        print 'GrandChild'

Base().foo()
# outputs:
# Base

Child1().foo()
# outputs:
# Base
# Child1

Child2().foo()
# outputs:
# Base
# Child2

GrandChild().foo()
# outputs:
# Base
# Child1
# Child2
# GrandChild
</snippet></ROW><ROW><id>18559303</id><snippet>import re

def split_caps(s):
    return "_".join(re.findall('[A-Z][^A-Z]*', s)).lower()

print split_caps("SomeStringLikeThis")
# some_string_like_this
</snippet></ROW><ROW><id>18559303</id><snippet>re.findall('[A-Z][^A-Z]*', s)</snippet></ROW><ROW><id>18559303</id><snippet>re.findall('[A-Z][^A-Z]*', s)
# ['Some', 'String', 'Like', 'This']
</snippet></ROW><ROW><id>18559303</id><snippet>"_".join</snippet></ROW><ROW><id>18559303</id><snippet>_</snippet></ROW><ROW><id>18559303</id><snippet>"_".join(re.findall('[A-Z][^A-Z]*', s))
# Some_String_Like_This
</snippet></ROW><ROW><id>18559303</id><snippet>.lower()</snippet></ROW><ROW><id>18559325</id><snippet>rate</snippet></ROW><ROW><id>18559325</id><snippet>import os, sys
rate=30

def foo():
    global rate # &lt;----
    print('#########rate:', rate)
    if False:
        rate=int(sys.argv[2])


foo()
</snippet></ROW><ROW><id>18559411</id><snippet>python setup.py install
</snippet></ROW><ROW><id>18559661</id><snippet>a</snippet></ROW><ROW><id>18559661</id><snippet>update()</snippet></ROW><ROW><id>18559661</id><snippet>a.clear()
a.update({1: 6, 2: 7})
</snippet></ROW><ROW><id>18559661</id><snippet>clear()</snippet></ROW><ROW><id>18559661</id><snippet>&gt;&gt;&gt; a = {1: 1, 2: 2}
&gt;&gt;&gt; b = {3: 3, 4: 4}
&gt;&gt;&gt; c = [a, b]
&gt;&gt;&gt; c
[{1: 1, 2: 2}, {3: 3, 4: 4}]
&gt;&gt;&gt; a.clear()
&gt;&gt;&gt; a.update({1: 6, 2: 7})
&gt;&gt;&gt; c
[{1: 6, 2: 7}, {3: 3, 4: 4}]  # &lt;--
</snippet></ROW><ROW><id>18559741</id><snippet>re.sub</snippet></ROW><ROW><id>18559741</id><snippet>&gt;&gt;&gt; import re
&gt;&gt;&gt; def action(matchObj):
...     return str(float(matchObj.group(0)) * 2)
... 
&gt;&gt;&gt; re.sub('\d+\.\d+', action, "[bezierPath moveToPoint: CGPointMake(7.98, 6.11)];")
'[bezierPath moveToPoint: CGPointMake(15.96, 12.22)];'
</snippet></ROW><ROW><id>18559745</id><snippet>input()</snippet></ROW><ROW><id>18559745</id><snippet>int()</snippet></ROW><ROW><id>18559745</id><snippet>if x == '1':
    # your stuffs

elif x == '2':
   # your stuffs
</snippet></ROW><ROW><id>18559745</id><snippet>elif &gt;=0</snippet></ROW><ROW><id>18559841</id><snippet>operator.itemgetter()</snippet></ROW><ROW><id>18559841</id><snippet>from operator import itemgetter

names = ["name", "value"] # fields to extract
values = itemgetter(*names) # function that extracts values from an input dict

result = [dict(zip(names, values(d))) for d in list_of_dicts]
print(result)
</snippet></ROW><ROW><id>18559841</id><snippet>[{'name': u'c_user', 'value': u'100001456251788'},
 {'name': u'csm', 'value': u'2'},
 {'name': u'datr', 'value': u'AUojdfkBUYA2wj4j04GT5XvX'}]
</snippet></ROW><ROW><id>18560252</id><snippet>souceout.write (str(readfile))
</snippet></ROW><ROW><id>18560252</id><snippet>sourceout.write (str(readfile))
</snippet></ROW><ROW><id>18560252</id><snippet>sourceout.write (str(readfile) + "\r\n")
</snippet></ROW><ROW><id>18560366</id><snippet>ccn</snippet></ROW><ROW><id>18560366</id><snippet>password</snippet></ROW><ROW><id>18560366</id><snippet>if ccn == self.data[ccn]['Password']:
</snippet></ROW><ROW><id>18560366</id><snippet>if password == self.data[ccn]['Password']:
</snippet></ROW><ROW><id>18560448</id><snippet>ALLOWED_HOSTS = ['www.mydomain.org']
</snippet></ROW><ROW><id>18560550</id><snippet>global gold = 0
def cave():
    print "You are in a cave."
    print "You have %i gold." % gold
    direction = input()
    if direction = 'N':
        stream()
    elif direction == 'S':
        house()
    elif direction == 'W':
        mountain()
    elif direction == 'directions':
        print "You can go North, West, or South."
    else:
        print "You cannot go there."
def stream():
    print "A small stream flows out of the building and down a gully."
    print "You have %i gold." % gold
    direction = input()
    if direction == 'N':
        tree()
    elif direction == 'S':
        cave()
    elif direction == 'directions':
        print "You can go North or South."
    else:
        print "You cannot go there."

def main():
    cave()
</snippet></ROW><ROW><id>18560550</id><snippet>class Location:
    map = { 'cave': {
              'description': 'You are in a cave.',
              'directions': { 'N': 'stream', 'S': 'house', 'W': 'mountain' } },
            'stream': {
              'description':
                'A small stream flows out the building and down a gully.',
              'directions': { 'N': 'tree', 'S': 'cave' } } #...
          }
    def __init__ (self):
        self.location = 'cave'
    def enter (self, direction):
        self.location = self.map[self.location]["directions"][direction]
        print self.map[self.location]["description"]
    def directions(self):
        return self.map[self.location]["directions"].keys()
    def readable(self, dirs):
        readable = { 'S': 'South', 'N': 'North', 'W': 'West', 'E': 'East' }
        return [readable[d] for d in dirs]

class Inventory:
    def __init__ (self):
        self.inventory = { 'gold': 0 }
    def query (self):
        print "You have %i gold." % self.inventory['gold']

def main:
    loc = Location()
    inv = Inventory()
    while True:
        directions = loc.directions()
        action = raw_input()
        if action in directions:
            loc.enter(action)
            inv.query()
        elif action == 'directions':
            where = loc.readable(directions)
            print "You can go " + ", ".join(where[:-1])\
                  + ", or " + where[-1]
        else:
            print "You cannot go there."
</snippet></ROW><ROW><id>18560550</id><snippet>class Object</snippet></ROW><ROW><id>18560550</id><snippet>take</snippet></ROW><ROW><id>18560550</id><snippet>drop</snippet></ROW><ROW><id>18560550</id><snippet>kill</snippet></ROW><ROW><id>18560631</id><snippet>setfname</snippet></ROW><ROW><id>18560631</id><snippet>self.setfname</snippet></ROW><ROW><id>18560631</id><snippet>setfname</snippet></ROW><ROW><id>18560631</id><snippet>self</snippet></ROW><ROW><id>18560631</id><snippet>class Person(object):
    def __init__(self, fname):
        self.setfname(fname)
    #   ^^^^^
    def setfname(self, fname):
    #            ^^^^^^
        self._fname = fname
</snippet></ROW><ROW><id>18560991</id><snippet>.. raw:: latex

    \href{git://github.com}{GitHub}

.. raw:: html

    &lt;a href="git://github.com"&gt;GitHub&lt;/a&gt;
</snippet></ROW><ROW><id>18560991</id><snippet>def visit_reference(self, node):
        uri = node.get('refuri', '')
        # ...
        elif uri.startswith('mailto:') or uri.startswith('http:') or \
                 uri.startswith('https:') or uri.startswith('ftp:'):
            self.body.append('\\href{%s}{' % self.encode_uri(uri))
        else:
            self.builder.warn('unusable reference target found: %s' % uri,
                              (self.curfilestack[-1], node.line))
            self.context.append('')
</snippet></ROW><ROW><id>18560991</id><snippet>def visit_reference(self, node):
        uri = node.get('refuri', '')
        # ...
        elif uri.startswith('mailto:') or uri.startswith('http:') or \
                 uri.startswith('git:') or \
                 uri.startswith('https:') or uri.startswith('ftp:'):
            self.body.append('\\href{%s}{' % self.encode_uri(uri))
</snippet></ROW><ROW><id>18560991</id><snippet>Test Link
=========

This is a paragraph that contains `a link`_.

.. _a link: git://git.kernel.org/pub/scm/linux/kernel/git/next/linux-next.git
</snippet></ROW><ROW><id>18561024</id><snippet>Card()</snippet></ROW><ROW><id>18561024</id><snippet>def populate(self):
    for suit in Card.SUIT:
        for rank in Card.RANKS:
            self.add(Card(rank, suit))
</snippet></ROW><ROW><id>18561024</id><snippet>.rank</snippet></ROW><ROW><id>18561024</id><snippet>def setValue(self):
    if self.cards[0].rank == "K":
        Card.totPoints += 10
        print Card.totPoints
    elif self.cards[0].rank == "Q":
        Card.totPoints += 10
    elif self.cards[0].rank == "J":
        Card.totPoints.rank += 10
    elif self.cards[0].rank == "A":
        Card.totPoints += 10
    else:
        Card.totPoints += int(self.cards[0].rank)
</snippet></ROW><ROW><id>18561024</id><snippet>.rank</snippet></ROW><ROW><id>18561024</id><snippet>else:</snippet></ROW><ROW><id>18561024</id><snippet>def setValue(self):
    rank = self.cards[0].rank
    Card.totPoints += 10 if rank in 'KQJA' else int(rank)
</snippet></ROW><ROW><id>18561024</id><snippet>Class.VALUE</snippet></ROW><ROW><id>18561024</id><snippet>def setValue(self):
    Card.totPoints += Card.VALUE[self.cards[0].rank]
</snippet></ROW><ROW><id>18561055</id><snippet>json</snippet></ROW><ROW><id>18561055</id><snippet>__init__.py</snippet></ROW><ROW><id>18561055</id><snippet>sys.modules</snippet></ROW><ROW><id>18561055</id><snippet>default</snippet></ROW><ROW><id>18561055</id><snippet>default()</snippet></ROW><ROW><id>18561055</id><snippet>make_json_serializable.py</snippet></ROW><ROW><id>18561055</id><snippet>"""Module that monkey-patches json module when it's imported so
JSONEncoder.default() automatically checks for a special "to_json()"
method and uses it to encode the object if found.
"""
from json import JSONEncoder

def _default(self, obj):
    return getattr(obj.__class__, "to_json", _default.default)(obj)

_default.default = JSONEncoder().default # save unmodified default
JSONEncoder.default = _default # replacement
</snippet></ROW><ROW><id>18561055</id><snippet>make_json_serializable_client.py</snippet></ROW><ROW><id>18561055</id><snippet>import json
import make_json_serializable

class Foo(object):
    def __init__(self, name):
        self.name = name
    def to_json(self):  # new special method
        return "{u'name': %r}" % self.name.decode('utf-8')

foo = Foo('sazpaz')
print json.dumps(foo)  # "{u'name': u'sazpaz'}"
</snippet></ROW><ROW><id>18561055</id><snippet>default()</snippet></ROW><ROW><id>18561055</id><snippet>make_json_serializable2.py</snippet></ROW><ROW><id>18561055</id><snippet>"""Module that imports the json module and monkey-patches it so
JSONEncoder.default() automatically pickles any Python objects
encountered that aren't standard JSON data types.
"""
from json import JSONEncoder
import pickle

def _default(self, obj):
    return {'_python_object': pickle.dumps(obj)}

_default.default = JSONEncoder.default # save default
JSONEncoder.default = _default # replacement
</snippet></ROW><ROW><id>18561055</id><snippet>object_hook</snippet></ROW><ROW><id>18561055</id><snippet>json.loads()</snippet></ROW><ROW><id>18561055</id><snippet>'_python_object'</snippet></ROW><ROW><id>18561055</id><snippet>def as_python_object(dct):
    if '_python_object' in dct:
        return pickle.loads(str(dct['_python_object']))
    return dct

pyobj = loads(json_str, object_hook=as_python_object)
</snippet></ROW><ROW><id>18561055</id><snippet>pickle</snippet></ROW><ROW><id>18561148</id><snippet>class CheckResponse(webapp2.RequestHandler):   # webapp2

    def get(self):

        self.response.headers['Content-Type'] = 'text/plain'
        self.response.write(self.request.GET['resp'])

application = webapp2.WSGIApplication([
        ('/mail', MainPage),
        ('/', ShowHome),
        ('/checkResponse', CheckResponse)      # changed
    ], debug=True)
</snippet></ROW><ROW><id>18561238</id><snippet>from __future__ import division
from sys import exit
history_begins = 1
history_ends = 16
historyjobs = []
targetjobs = []

def quickzh(zhlistsub,
            historyjobs=historyjobs):
    rev = reversed(zhlistsub)
    i = next(rev)
    num   =  historyjobs[i][1]
    denom = 1
    hfirst  = num
    li = [historyjobs[i][2]]
    for i in rev:
        x = historyjobs[i][1]
        num += x
        denom += 1
        if x &gt; 0.9 * (num / denom):
            li.append(historyjobs[i][2])
        else:
            break
    li.reverse()
    return hfirst,li 


def listcreate(hfirst,s,
               historyjobs=historyjobs,targetjobs=targetjobs):
    with open('outputfile.txt','a') as f1:
        j = targetjobs[0][2]
        try:
            a,c,d,g = sum(s)/len(s), max(s), min(s), len(s)
            e1  = abs(j-a)
            er1 = e1/j
            h   = abs(hfirst-targetjobs[0][1])
            # historyjobs[-1][1] is convertsub
            # targetjobs[0][1]   is targetsub
            f1.write('%s\t%s\t%s\t%s\t%s\t%s\t%s\t' %
                     (j, round(a,2), round(er1,3), c, d, g, h))
            f1.write("%s\t%s\t%s\t%s\n" %
                     tuple("good" if er1 &lt; x else "bad" for x in (0.2,0.3,0.4,0.5)))
        except ZeroDivisionError :
            print 'dem 0'
        else:
            print '0'
            f1.close()

def new(inputfile,history_ends,
        historyjobs=historyjobs,targetjobs=targetjobs):
    while 1:

        # checking the file
        with open(inputfile,'r') as f:
            for line in f:
                job = map(int,line.split())
                (historyjobs if job[0]  &lt; history_ends
                 else targetjobs).append(job)  

        if len(targetjobs) != 1:
            k = 0           
            zhlistsub = [i for i, element in enumerate(historyjobs)
                         if element[3:6] == targetjobs[k][3:6] ]
            if zhlistsub:
                listcreate(*quickzh(zhlistsub))
            history_ends = targetjobs[1][0]
            del targetjobs[:]
            del historyjobs[:]
        else:
            break


new('toto.txt',history_ends)
</snippet></ROW><ROW><id>18561238</id><snippet>history_ends = 16</snippet></ROW><ROW><id>18561238</id><snippet>43  43.5    0.012   44  43  2   188 good    good    good    good
43  43.33   0.008   44  43  3   54  good    good    good    good
43  43.25   0.006   44  43  4   26  good    good    good    good
44  43.2    0.018   44  43  5   949 good    good    good    good
45  49.14   0.092   84  43  7   1675    good    good    good    good
3746    3260.0  0.13    3260    3260    1   2   good    good    good    good
31  31.0    0.0 31  31  1   36  good    good    good    good
28  31.0    0.107   31  31  2   52  good    good    good    good
</snippet></ROW><ROW><id>18561238</id><snippet>runningMean()</snippet></ROW><ROW><id>18561238</id><snippet>for x in iterable:
    num += x
    denom += 1
    yield num / denom
</snippet></ROW><ROW><id>18561238</id><snippet>denom</snippet></ROW><ROW><id>18561238</id><snippet>num/denom</snippet></ROW><ROW><id>18561238</id><snippet>num</snippet></ROW><ROW><id>18561238</id><snippet>takewhile(lambda x: x[0] &gt; 0.9 * x[1],
                                     izip(reversed(mlistsub),
                                          runningMean(reversed(mlistsub)))))</snippet></ROW><ROW><id>18561238</id><snippet>x</snippet></ROW><ROW><id>18561238</id><snippet>(el,el)</snippet></ROW><ROW><id>18561238</id><snippet>x[0] &gt; 0.9 * x[1]</snippet></ROW><ROW><id>18561238</id><snippet>results</snippet></ROW><ROW><id>18561238</id><snippet>consub</snippet></ROW><ROW><id>18561238</id><snippet>listcreate()</snippet></ROW><ROW><id>18561238</id><snippet>condsub</snippet></ROW><ROW><id>18561238</id><snippet>if consub != |]</snippet></ROW><ROW><id>18561238</id><snippet>new()</snippet></ROW><ROW><id>18561238</id><snippet>def new(inputfile,history_ends,
        historyjobs=historyjobs,targetjobs=targetjobs):

    # checking the file
    with open(inputfile,'r') as f:
        for line in f:
            job = map(int,line.split())
            (historyjobs if job[0]  &lt; history_ends
             else targetjobs).append(job)

    while True:
        k = 0           
        zhlistsub = [i for i, element in enumerate(historyjobs)
                     if element[3:6] == targetjobs[k][3:6] ]
        if zhlistsub:
            listcreate(*quickzh(zhlistsub))
        tj00 = targetjobs[0][0]
        while True:
            if targetjobs[0][0]!=tj00:
                break
            historyjobs.append(targetjobs.pop(0))
        if len(targetjobs)==0:
            break
</snippet></ROW><ROW><id>18561238</id><snippet>def new(inputfile,history_ends,
        historyjobs=historyjobs,targetjobs=targetjobs):

    # checking the file
    with open(inputfile,'r') as f:
        for line in f:
            job = map(int,line.split())
            (historyjobs if job[0]  &lt; history_ends
             else targetjobs).append(job)

    while True:
        k = 0           
        zhlistsub = [i for i, element in enumerate(historyjobs)
                     if element[3:6] == targetjobs[k][3:6] ]
        if zhlistsub:
            listcreate(*quickzh(zhlistsub))
        historyjobs.append(targetjobs.pop(0))
        if len(targetjobs)==0:
            break
</snippet></ROW><ROW><id>18561238</id><snippet>k</snippet></ROW><ROW><id>18561281</id><snippet>accept-encoding</snippet></ROW><ROW><id>18561281</id><snippet>from PIL import Image
import urllib2
import gzip
import cStringIO

opener = urllib2.build_opener()
opener.addheaders = [('User-agent', 'Mozilla/5.0')]
opener.addheaders = [('Accept', 'text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8')]
opener.addheaders = [('Accept-Encoding', 'gzip,deflate,sdch')]

gzipped_file = cStringIO.StringIO(opener.open(url, None, 5).read())
image = Image.open(gzip.GzipFile(fileobj=gzipped_file))
</snippet></ROW><ROW><id>18561281</id><snippet>'identity;q=1, *;q=0'</snippet></ROW><ROW><id>18561321</id><snippet>new()</snippet></ROW><ROW><id>18561321</id><snippet>import rpy2.robjects.lib.ggplot2 as ggplot2

class ElementRect(ggplot2.Element):
    _constructor = ggplot2.ggplot2.element_rect
    @classmethod
    def new(cls, **kwargs):
        res = cls(cls._constructor(**kwargs))
        return res

# Monkey patch ggplot2
ggplot2.element_rect = ElementRect.new
</snippet></ROW><ROW><id>18561417</id><snippet>collation</snippet></ROW><ROW><id>18561417</id><snippet>class MyTableName(Base):
    __tablename__ = "mytablename2"
    test_column = Column(Unicode(2),
                         primary_key=True)
    test_column2 = Column(Unicode(2, collation='utf8_bin'))
#                                    ^^^^^^^^^^^^^^^^^^^^
</snippet></ROW><ROW><id>18561417</id><snippet>SHOW COLLATION</snippet></ROW><ROW><id>18561417</id><snippet>mysql&gt; show full columns from mytablename2;
+--------------+------------+-------------------+------+-----+---------+-------+---------------------------------+---------+
| Field        | Type       | Collation         | Null | Key | Default | Extra | Privileges                      | Comment |
+--------------+------------+-------------------+------+-----+---------+-------+---------------------------------+---------+
| test_column  | varchar(2) | latin1_swedish_ci | NO   | PRI | NULL    |       | select,insert,update,references |         |
| test_column2 | varchar(2) | utf8_bin          | YES  |     | NULL    |       | select,insert,update,references |         |
+--------------+------------+-------------------+------+-----+---------+-------+---------------------------------+---------+
2 rows in set (0.00 sec)

mysql&gt; 
</snippet></ROW><ROW><id>18561459</id><snippet>\d{6}\s-\s\(\d{5}\)\s-\s\w{3}\s\d{4}-\d{3}-[^\.]+\.txt</snippet></ROW><ROW><id>18561459</id><snippet>term + '\s-\s\(\d{5}\)\s-\s\w{3}\s\d{4}-\d{3}-[^\.]+\.txt'</snippet></ROW><ROW><id>18561459</id><snippet>term</snippet></ROW><ROW><id>18561459</id><snippet>&gt;&gt;&gt; term = '201308'
&gt;&gt;&gt; f = '201308 - (82608) - MAC 2233-007-Methods of Calculus - Klingler, Lee.txt'
&gt;&gt;&gt; re.search(term + '\s-\s\(\d{5}\)\s-\s\w{3}\s\d{4}-\d{3}-[^\.]+\.txt', f).group(0)
'201308 - (82608) - MAC 2233-007-Methods of Calculus - Klingler, Lee.txt'
</snippet></ROW><ROW><id>18561459</id><snippet>&gt;&gt;&gt; f = '/somefolder/somefolder2/201308 - (82608) - MAC 2233-007-Methods of Calculus - Klingler, Lee.txt'
&gt;&gt;&gt; re.search(term + '\s-\s\(\d{5}\)\s-\s\w{3}\s\d{4}-\d{3}-[^\.]+\.txt', f).group(0)
'201308 - (82608) - MAC 2233-007-Methods of Calculus - Klingler, Lee.txt'

&gt;&gt;&gt; f = 'c:\\somefolder\\somefolder2\\201308 - (82608) - MAC 2233-007-Methods of Calculus - Klingler, Lee.txt'
&gt;&gt;&gt; re.search(term + '\s-\s\(\d{5}\)\s-\s\w{3}\s\d{4}-\d{3}-[^\.]+\.txt', f).group(0)
'201308 - (82608) - MAC 2233-007-Methods of Calculus - Klingler, Lee.txt'
</snippet></ROW><ROW><id>18561466</id><snippet>fabfile</snippet></ROW><ROW><id>18561466</id><snippet>env.roledefs = {
    #static roles
}
# add dynamic role from file "hosts"
with open("./hosts") as f:
    env.roledefs['tmp'] = f.readlines()
</snippet></ROW><ROW><id>18561466</id><snippet>hosts</snippet></ROW><ROW><id>18561466</id><snippet>example1.com
example2.com
</snippet></ROW><ROW><id>18561466</id><snippet>$ fab -R tmp -- uname -a
</snippet></ROW><ROW><id>18561634</id><snippet>childrenScores = [0] * 10
gp1 = [2,6,9] # children who selected box 1
...
gp5 = [1,4,7,9]

boxes = [(0,gp1), (0,gp2), (1,gp3), (1,gp4), (0,gp5)]
</snippet></ROW><ROW><id>18561634</id><snippet>childrenScores</snippet></ROW><ROW><id>18561634</id><snippet>childrenScores = np.zeros(10, dtype=int)
...
for box in boxes:
    if box[0]:
        childrenScores[box[1]] += 1 # NumPy advanced indexing
</snippet></ROW><ROW><id>18561637</id><snippet>np.triu_indices_from</snippet></ROW><ROW><id>18561637</id><snippet>&gt;&gt;&gt; np.vstack(np.triu_indices_from(a,k=1)).T
array([[0, 1],
       [0, 2],
       [0, 3],
       [1, 2],
       [1, 3],
       [2, 3]])

&gt;&gt;&gt; inds=inds[inds[:,1]&gt;2] #Or whatever columns you want to start from.
&gt;&gt;&gt; inds
array([[0, 3],
       [1, 3],
       [2, 3]])


&gt;&gt;&gt; a[inds[:,0],inds[:,1]]
array([1, 4, 6])

&gt;&gt;&gt; max_index = np.argmax(a[inds[:,0],inds[:,1]])
&gt;&gt;&gt; inds[max_index]
array([2, 3]])
</snippet></ROW><ROW><id>18561637</id><snippet>&gt;&gt;&gt; inds=np.triu_indices_from(a,k=1)
&gt;&gt;&gt; mask = (inds[1]&gt;2) #Again change 2 for whatever columns you want to start at.
&gt;&gt;&gt; a[inds][mask]
array([1, 4, 6])

&gt;&gt;&gt; max_index = np.argmax(a[inds][mask])
&gt;&gt;&gt; inds[mask][max_index]
array([2, 3]])
</snippet></ROW><ROW><id>18561637</id><snippet>inds[0]</snippet></ROW><ROW><id>18561637</id><snippet>def ignore_upper(arr, k=0, skip_rows=None, skip_cols=None):
    rows, cols = np.triu_indices_from(arr, k=k)

    if skip_rows != None:
        row_mask = ~np.in1d(rows, skip_rows)
        rows = rows[row_mask]
        cols = cols[row_mask]

    if skip_cols != None:
        col_mask = ~np.in1d(cols, skip_cols)
        rows = rows[col_mask]
        cols = cols[col_mask]

    inds=np.ravel_multi_index((rows,cols),arr.shape)
    return np.take(arr,inds)

print ignore_upper(a, skip_rows=1, skip_cols=2) #Will also take numpy arrays for skipping.
[0 1 1 6 7]
</snippet></ROW><ROW><id>18561637</id><snippet>def fast_triu_indices(dim,k=0):

    tmp_range = np.arange(dim-k)
    rows = np.repeat(tmp_range,(tmp_range+1)[::-1])

    cols = np.ones(rows.shape[0],dtype=np.int)
    inds = np.cumsum(tmp_range[1:][::-1]+1)

    np.put(cols,inds,np.arange(dim*-1+2+k,1))
    cols[0] = k
    np.cumsum(cols,out=cols)
    return (rows,cols)
</snippet></ROW><ROW><id>18561637</id><snippet>k&lt;0</snippet></ROW><ROW><id>18561637</id><snippet>dim=5000
a=np.random.rand(dim,dim)

k=50
t=time.time()
rows,cols=np.triu_indices(dim,k=k)
print time.time()-t
0.913508892059

t=time.time()
rows2,cols2,=fast_triu_indices(dim,k=k)
print time.time()-t
0.16515994072

print np.allclose(rows,rows2)
True

print np.allclose(cols,cols2)
True
</snippet></ROW><ROW><id>18561679</id><snippet>gb = groupby(stuff, lambda item: item[0])
</snippet></ROW><ROW><id>18561679</id><snippet>key</snippet></ROW><ROW><id>18561766</id><snippet>cs = tricontourf(tri,height)
for collection in cs.collections:
    for path in collection.get_paths():
        print path.to_polygons()
</snippet></ROW><ROW><id>18561766</id><snippet>path.to_polygons()</snippet></ROW><ROW><id>18561786</id><snippet>L</snippet></ROW><ROW><id>18561786</id><snippet>out = ['&lt;cookies&gt;.facebook.com:%s:%s' % (k,v) 
       for d in L for k,v in d.iteritems()]
print ''.join(out) + '&lt;cookies&gt;'
</snippet></ROW><ROW><id>18561795</id><snippet>sys.argv[0]</snippet></ROW><ROW><id>18561795</id><snippet>"-c"</snippet></ROW><ROW><id>18561795</id><snippet>os.path.abspath</snippet></ROW><ROW><id>18561992</id><snippet>Flask-Testing</snippet></ROW><ROW><id>18561992</id><snippet>self.client.get</snippet></ROW><ROW><id>18561992</id><snippet>self.client</snippet></ROW><ROW><id>18561992</id><snippet>self.client.get()</snippet></ROW><ROW><id>18561992</id><snippet>self.browser.get()</snippet></ROW><ROW><id>18561992</id><snippet>self.client</snippet></ROW><ROW><id>18561992</id><snippet>self.client</snippet></ROW><ROW><id>18562033</id><snippet>map</snippet></ROW><ROW><id>18562033</id><snippet>numberlist = list(map(int,numberlist))
</snippet></ROW><ROW><id>18562033</id><snippet>print(list(numberlist))
</snippet></ROW><ROW><id>18562033</id><snippet>&gt;&gt;&gt; lis = ['1', '2', '3']
&gt;&gt;&gt; map(int, lis)
&lt;map object at 0x01DE0F70&gt;
&gt;&gt;&gt; list(map(int, lis))
[1, 2, 3]
&gt;&gt;&gt;
</snippet></ROW><ROW><id>18562033</id><snippet>numbers = input("Type 10 numbers, separated by spaces: ").split()
</snippet></ROW><ROW><id>18562206</id><snippet>timeit.timeit('math.e**2', 'import math', number=1000000)
</snippet></ROW><ROW><id>18562206</id><snippet>timeit.timeit('1+1', 'import math', number=1000000)
</snippet></ROW><ROW><id>18562206</id><snippet>timeit.timeit('1+1', number=1000000)
</snippet></ROW><ROW><id>18562274</id><snippet>&gt;&gt;&gt; pi = 22/7
&gt;&gt;&gt; pi
3
</snippet></ROW><ROW><id>18562274</id><snippet>&gt;&gt;&gt; vars()
{'__builtins__': &lt;module '__builtin__' (built-in)&gt;, '__name__': '__main__', 'pi': 3, '__doc__': None, '__package__': None}
</snippet></ROW><ROW><id>18562274</id><snippet>*</snippet></ROW><ROW><id>18562274</id><snippet>&gt;&gt;&gt; from math import *
</snippet></ROW><ROW><id>18562274</id><snippet>pi</snippet></ROW><ROW><id>18562274</id><snippet>math</snippet></ROW><ROW><id>18562274</id><snippet>pi</snippet></ROW><ROW><id>18562274</id><snippet>&gt;&gt;&gt; pi
3.141592653589793
</snippet></ROW><ROW><id>18562274</id><snippet>&gt;&gt;&gt; vars()
{'pow': &lt;built-in function pow&gt;, 'fsum': &lt;built-in function fsum&gt;, 'cosh': &lt;built-in function cosh&gt;, 'ldexp': &lt;built-in function ldexp&gt;, 'hypot': &lt;built-in function hypot&gt;, 'acosh': &lt;built-in function acosh&gt;, 'tan': &lt;built-in function tan&gt;, 'asin': &lt;built-in function asin&gt;, 'isnan': &lt;built-in function isnan&gt;, 'log': &lt;built-in function log&gt;, 'fabs': &lt;built-in function fabs&gt;, 'floor': &lt;built-in function floor&gt;, 'atanh': &lt;built-in function atanh&gt;, 'sqrt': &lt;built-in function sqrt&gt;, '__package__': None, 'frexp': &lt;built-in function frexp&gt;, 'factorial': &lt;built-in function factorial&gt;, 'degrees': &lt;built-in function degrees&gt;, 'pi': 3.141592653589793, 'log10': &lt;built-in function log10&gt;, '__doc__': None, 'asinh': &lt;built-in function asinh&gt;, 'fmod': &lt;built-in function fmod&gt;, 'atan': &lt;built-in function atan&gt;, '__builtins__': &lt;module '__builtin__' (built-in)&gt;, 'copysign': &lt;built-in function copysign&gt;, 'cos': &lt;built-in function cos&gt;, 'ceil': &lt;built-in function ceil&gt;, 'atan2': &lt;built-in function atan2&gt;, 'isinf': &lt;built-in function isinf&gt;, 'sinh': &lt;built-in function sinh&gt;, '__name__': '__main__', 'trunc': &lt;built-in function trunc&gt;, 'expm1': &lt;built-in function expm1&gt;, 'e': 2.718281828459045, 'tanh': &lt;built-in function tanh&gt;, 'radians': &lt;built-in function radians&gt;, 'sin': &lt;built-in function sin&gt;, 'lgamma': &lt;built-in function lgamma&gt;, 'erf': &lt;built-in function erf&gt;, 'erfc': &lt;built-in function erfc&gt;, 'modf': &lt;built-in function modf&gt;, 'exp': &lt;built-in function exp&gt;, 'acos': &lt;built-in function acos&gt;, 'log1p': &lt;built-in function log1p&gt;, 'gamma': &lt;built-in function gamma&gt;}
</snippet></ROW><ROW><id>18562274</id><snippet>*</snippet></ROW><ROW><id>18562305</id><snippet>pop = [[]]*popLen</snippet></ROW><ROW><id>18562305</id><snippet>popLen</snippet></ROW><ROW><id>18562305</id><snippet>&gt;&gt;&gt; a = [[]] * 3
&gt;&gt;&gt; a[0].append(42)
&gt;&gt;&gt; a
[[42], [42], [42]]
</snippet></ROW><ROW><id>18562305</id><snippet>pop = [[] for _ in range(popLen)]  # use xrange() in Python 2.x
</snippet></ROW><ROW><id>18562305</id><snippet>&gt;&gt;&gt; a = [[] for _ in range(3)]
&gt;&gt;&gt; a[0].append(42)
&gt;&gt;&gt; a
[[42], [], []]
</snippet></ROW><ROW><id>18562323</id><snippet>SELECT wiki_title.title 
FROM (SELECT title 
      FROM publicdata:samples.wikipedia 
      WHERE timestamp &gt; 1262304000) AS wiki_title 
JOIN (SELECT REGEXP_REPLACE(word, r'\W', '') word, COUNT(*) 
      FROM publicdata:samples.shakespeare 
      WHERE LENGTH(word) &gt; 15 GROUP BY word IGNORE CASE) AS shakespeare_word 
ON wiki_title.title = shakespeare_word.word 
GROUP BY wiki_title.title LIMIT 10;"
</snippet></ROW><ROW><id>18562323</id><snippet>publicdata:samples.wikipedia</snippet></ROW><ROW><id>18562323</id><snippet>publicdata:samples.shakespeare</snippet></ROW><ROW><id>18562328</id><snippet>package com.custom;
 import org.apache.hadoop.fs.Path;
 import org.apache.hadoop.io.Text;
 import org.apache.hadoop.mapred.lib.MultipleTextOutputFormat;

 public class CustomMultiOutputFormat extends MultipleTextOutputFormat&lt;Text, Text&gt; {
        /**
        * Use they key as part of the path for the final output file.
        */
       @Override
       protected String generateFileNameForKeyValue(Text key, Text value, String leaf) {
             return new Path(key.toString(), leaf).toString();
       }

       /**
        * We discard the key as per your requirement
        */
       @Override
       protected Text generateActualKey(Text key, Text value) {
             return null;
       }
 }
</snippet></ROW><ROW><id>18562328</id><snippet>$JAVA_HOME/bin/javac -cp $(hadoop classpath) -d . CustomMultiOutputFormat.java</snippet></ROW><ROW><id>18562328</id><snippet>$JAVA_HOME/bin/jar cvf custom.jar com/custom/CustomMultiOutputFormat.class</snippet></ROW><ROW><id>18562328</id><snippet>hadoop jar /path/to/your/hadoop-streaming-*.jar -libjars custom.jar -outputformat com.custom.CustomMultiOutputFormat -file your_script.py -input inputpath --numReduceTasks 0 -output outputpath -mapper your_script.py</snippet></ROW><ROW><id>18562554</id><snippet>cell = next(row)
</snippet></ROW><ROW><id>18562554</id><snippet>next</snippet></ROW><ROW><id>18562593</id><snippet>chardet</snippet></ROW><ROW><id>18562593</id><snippet>chardet</snippet></ROW><ROW><id>18562619</id><snippet>YearLocator</snippet></ROW><ROW><id>18562619</id><snippet>dates</snippet></ROW><ROW><id>18562619</id><snippet>from matplotlib.dates import YearLocator, DateFormatter

...

# YearLocator defaults to a locator at 1st of January every year
plt.gca().xaxis.set_major_locator(YearLocator())

plt.gca().xaxis.set_major_formatter(DateFormatter('%Y'))
</snippet></ROW><ROW><id>18563075</id><snippet>bytes</snippet></ROW><ROW><id>18563075</id><snippet>olddata[start:end]</snippet></ROW><ROW><id>18563075</id><snippet>newdata = olddata[:start] + olddata[end:]
</snippet></ROW><ROW><id>18563075</id><snippet>bytearray</snippet></ROW><ROW><id>18563082</id><snippet>#!/bin/sh
python=/path/to/python
script=$1; shift
exec "$python" -O "$script" "$@"
</snippet></ROW><ROW><id>18563082</id><snippet>bash script.sh your_python_script arg1 arg2 ...</snippet></ROW><ROW><id>18563082</id><snippet>sh script.sh your_python_script arg1 arg2 ...</snippet></ROW><ROW><id>18563266</id><snippet>from bs4 import BeautifulSoup

soup = BeautifulSoup(open('htmlfile'))

for elem in soup.find_all('span', class_='finereader'):
    elem.replace_with(elem.string or '') 

print(soup.prettify())
</snippet></ROW><ROW><id>18563286</id><snippet>enumerate</snippet></ROW><ROW><id>18563286</id><snippet>iteration number, iteration item</snippet></ROW><ROW><id>18563286</id><snippet>for directionpair in sections:</snippet></ROW><ROW><id>18563286</id><snippet>for index,directionpair in enumerate(sections)</snippet></ROW><ROW><id>18563286</id><snippet>in</snippet></ROW><ROW><id>18563286</id><snippet>sec = {} #construct a dictionary
for index, directionpair in enumerate(sections):
    long_name = directionpair[1] #take the second element of the pair
    short_name = ''
    for C in long_name: #for each character in long_name
        if C in ' /': #every time you find a forward slash in long_name, write '-' in short-name instead
            short_name += '-'
        elif C not in "'." : #in short-string, add all lower-case versions of the character if it's not a '.'
            short_name += C.lower()
    sec[short_name] = index
</snippet></ROW><ROW><id>18563286</id><snippet>re.sub</snippet></ROW><ROW><id>18563286</id><snippet>sec = {} #construct a dictionary
for index, directionpair in enumerate(sections):
    long_name = directionpair[1] #take the second element of the pair
    short_name = long_name.replace('/','-').replace(' ','-').replace("'",'').replace('.','').lower()
    sec[short_name] = index
</snippet></ROW><ROW><id>18563676</id><snippet>Tag</snippet></ROW><ROW><id>18563676</id><snippet>&lt;a&gt;</snippet></ROW><ROW><id>18563676</id><snippet>.string</snippet></ROW><ROW><id>18563676</id><snippet>for table in alltables:
    link = table.find('a')
    top100 = link.string
    print(top100)
</snippet></ROW><ROW><id>18563676</id><snippet>&lt;a&gt;</snippet></ROW><ROW><id>18563676</id><snippet>for table in alltables:
    links = table.find_all('a')
    top100 = [link.string for link in links]
    print(top100)
</snippet></ROW><ROW><id>18563781</id><snippet>def save(a):
    with open("random_number_highscores.txt", "w") as x:
        json.dump(a, x)
</snippet></ROW><ROW><id>18563781</id><snippet>json.load()</snippet></ROW><ROW><id>18563814</id><snippet>from Tkinter import *
master = Tk()

def getThrottle(event):
    print Throttle.get()

Throttle = Scale(master, from_=0, to=100, orient=HORIZONTAL, command=getThrottle)
Throttle.set(0)
Throttle.pack()

mainloop()
</snippet></ROW><ROW><id>18563884</id><snippet>class MplWidget(QtGui.QWidget): def __init__(self, parent = None): QtGui.QWidget.__init__(self, parent) self.canvas = MplCanvas() self.mpl_toolbar = NavigationToolbar(self.canvas, self) self.vbl = QtGui.QVBoxLayout() self.vbl.addWidget(self.canvas) self.vbl.addWidget(self.mpl_toolbar) self.setLayout(self.vbl)</snippet></ROW><ROW><id>18563973</id><snippet>Axes</snippet></ROW><ROW><id>18563973</id><snippet>nx.draw</snippet></ROW><ROW><id>18563973</id><snippet>G = nx.path_graph(8)
E = nx.path_graph(30)

# one plot, both graphs
fig, ax = subplots()
nx.draw(G, ax=ax)
nx.draw(E, ax=ax)
</snippet></ROW><ROW><id>18563973</id><snippet>G = nx.path_graph(8)
E = nx.path_graph(30)

# two separate graphs
fig1 = figure()
ax1 = fig1.add_subplot(111)
nx.draw(G, ax=ax1)

fig2 = figure()
ax2 = fig2.add_subplot(111)
nx.draw(G, ax=ax2)
</snippet></ROW><ROW><id>18563973</id><snippet>G = nx.path_graph(8)
E = nx.path_graph(30)

pos=nx.spring_layout(E,iterations=100)

subplot(121)
nx.draw(E, pos)

subplot(122)
nx.draw(G, pos)
</snippet></ROW><ROW><id>18563973</id><snippet>ax</snippet></ROW><ROW><id>18563973</id><snippet>nx.draw</snippet></ROW><ROW><id>18563973</id><snippet>matplotlib</snippet></ROW><ROW><id>18563973</id><snippet>pylab</snippet></ROW><ROW><id>18563973</id><snippet>nx.draw</snippet></ROW><ROW><id>18563973</id><snippet>gca</snippet></ROW><ROW><id>18563973</id><snippet>pylab</snippet></ROW><ROW><id>18563973</id><snippet>nx.draw</snippet></ROW><ROW><id>18563973</id><snippet>try:
    import matplotlib.pylab as pylab
except ImportError:
    raise ImportError("Matplotlib required for draw()")
except RuntimeError:
    print("Matplotlib unable to open display")
    raise

cf=pylab.gcf()
cf.set_facecolor('w')
if ax is None:
    if cf._axstack() is None:
        ax=cf.add_axes((0,0,1,1))
    else:
        ax=cf.gca()

# allow callers to override the hold state by passing hold=True|False

b = pylab.ishold()
h = kwds.pop('hold', None)
if h is not None:
    pylab.hold(h)
try:
    draw_networkx(G,pos=pos,ax=ax,**kwds)
    ax.set_axis_off()
    pylab.draw_if_interactive()
except:
    pylab.hold(b)
    raise
pylab.hold(b)
return
</snippet></ROW><ROW><id>18563973</id><snippet>gcf</snippet></ROW><ROW><id>18563973</id><snippet>Axes</snippet></ROW><ROW><id>18563973</id><snippet>gca</snippet></ROW><ROW><id>18563973</id><snippet>hold</snippet></ROW><ROW><id>18564059</id><snippet>accounts=accounts.objects.filter(twitterid=userid)
</snippet></ROW><ROW><id>18564059</id><snippet>from models import *
def info(request):
    yasin = "teksaas"
    if check_key(request):
        api = get_api(request)
        user = api.me()
        userid = user.id
        acc=accounts.objects.filter(twitterid=userid)
        if acc:
            return render_to_response('twitter_auth/info.html', locals())
        else:

            registeracc=accounts(twitterid=412313,others='Hello im jsaon walker what your problem i cant unt')
            registeracc.save()
            return render_to_response('twitter_auth/info.html', locals()) 
    else:
        return HttpResponseRedirect(reverse('main'))
</snippet></ROW><ROW><id>18564399</id><snippet>flatten</snippet></ROW><ROW><id>18564399</id><snippet>items</snippet></ROW><ROW><id>18564399</id><snippet>class recurdict(dict):
    '''
    Recursive Dictionary
    '''
    def __init__(self, idict=None, **kwargs):
        dict.__init__(self)
        if idict is not None:
            self.update(idict)
        if len(kwargs):
            self.update(kwargs)

    def __contains__(self, key):
        return (key in self.keys())

    def __getitem__(self, key):
        if self.__contains__(key):
            return self.___getitem__(self, key)
        else:
            raise KeyError(key)

    @staticmethod
    def ___getitem__(idict, key):
        if dict.__contains__(idict, key):
            return dict.__getitem__(idict, key) 
        else:
            result = None
            for k, v in idict.iteritems():
                if hasattr(v, "keys"):
                    result = recurdict.___getitem__(v, key)
                    if(result):
                        return result
                    else:
                        continue

    def flatten(self):
        return self._flatten(self)

    @staticmethod
    def _flatten(idict, key_chain = []):
        found_keys = []
        for k, v in idict.iteritems():
            if hasattr(v, "keys"):
                found_keys.extend(recurdict._flatten(v, key_chain + [k]))
            else:
                found_keys.append((tuple(key_chain + [k]), v))
        return found_keys

    def has_key(self, key):
        return self.__contains__(key)

    def keys(self):
        return self._keys(self)

    @staticmethod
    def _keys(idict):
        found_keys = dict.keys(idict)
        for k, v in idict.iteritems():
            if hasattr(v, "keys"):
                found_keys.extend(recurdict._keys(v))
        return found_keys

    def update(self, other=None, **kwargs):
        if other is None:
            pass
        elif hasattr(other, "iteritems"):
            for k, v in other.iteritems():
                self.__setitem__(k,v)
        elif hasattr(other, "keys"):
            for k in other.keys():
                self.__setitem__(k,other.__getitem__(k))
        else:
            for k, v in other:
                self.__setitem__(k,v)
        if kwargs:
            self.update(kwargs)

example_dict = recurdict\
({ 
    "key1" : "value1",
    "key2" : "value2",
    "key3" : 
    { 
        "key3a": "value3a" 
    },
    "key4" : 
    { 
        "key4a": 
        { 
            "key4aa": "value4aa",
            "key4ab": "value4ab",
            "key4ac": 
            {
                "key4ac1": [0,1,2],
                "key4ac2": (3,4,5),
                "key4ac3":
                [
                    {
                        "sub_key_x": 0,
                        "sub_key_y": 1,
                    }, 
                    6
                ]               
            }
        },
        "key4b": "value4b"
    }
})

print example_dict.keys()
print "key1" in example_dict
print "key4ac1" in example_dict
print example_dict["key4ac1"]
for (k, v) in example_dict.flatten():
    print (k, v)
</snippet></ROW><ROW><id>18564403</id><snippet>self.Frame</snippet></ROW><ROW><id>18564403</id><snippet>self.MainWindow</snippet></ROW><ROW><id>18564455</id><snippet>sum(1 for _ in iter(lambda: randint(0, 9), 5))
</snippet></ROW><ROW><id>18564455</id><snippet>iter(function, val)</snippet></ROW><ROW><id>18564455</id><snippet>function</snippet></ROW><ROW><id>18564455</id><snippet>val</snippet></ROW><ROW><id>18564455</id><snippet>lambda: randint(0, 9)</snippet></ROW><ROW><id>18564455</id><snippet>randint(0, 9)</snippet></ROW><ROW><id>18564455</id><snippet>sum(1 for _ in iterator)</snippet></ROW><ROW><id>18564639</id><snippet>python-mailer</snippet></ROW><ROW><id>18564639</id><snippet>$ sudo apt-get install python-pip
$ pip install mailer
</snippet></ROW><ROW><id>18564651</id><snippet>StringIO.read()</snippet></ROW><ROW><id>18564651</id><snippet>myStringIO.seek(0)
first = myStringIO.read(65536)
second = myStringIO.read(65536)
</snippet></ROW><ROW><id>18564714</id><snippet>classlist.append(MyClass("1", {"Key1": "Value"}))
</snippet></ROW><ROW><id>18564714</id><snippet>:</snippet></ROW><ROW><id>18564714</id><snippet>,</snippet></ROW><ROW><id>18564714</id><snippet>{arg, arg, arg}</snippet></ROW><ROW><id>18564909</id><snippet>from itertools import compress

l = [0, 1, 0, 1, 1, ...]     # your list
with open('second.txt') as src, open('third.txt', 'w') as dst:
    dst.writelines(compress(src, l))
</snippet></ROW><ROW><id>18565184</id><snippet>ElementTree.parse</snippet></ROW><ROW><id>18565329</id><snippet>print list(set(zip(*myList)[1]))
</snippet></ROW><ROW><id>18565329</id><snippet>myList=[]

myList.append(("a",0))
myList.append(("b",0))
myList.append(("b",0))
myList.append(("a",1))
myList.append(("a",1))

Dict = {}

for Data in myList :
    Dict.setdefault(Data[1], []).append(Data[0])

print [(values[0], key) for key, values in Dict.items()]
</snippet></ROW><ROW><id>18565329</id><snippet>[('a', 0), ('a', 1)]
</snippet></ROW><ROW><id>18565329</id><snippet>myList=[]

myList.append(("a",0))
myList.append(("b",0))
myList.append(("b",0))
myList.append(("a",2))
myList.append(("a",1))
myList.append(("a",1))

Dict   = {}
Unique = []
for Data in myList :
    Dict.setdefault(Data[1], []).append(Data[0])
    if Data[1] not in Unique: Unique.append(Data[1])

print [(Dict[Data][0], Data) for Data in Unique]
</snippet></ROW><ROW><id>18565329</id><snippet>[('a', 0), ('a', 2), ('a', 1)]
</snippet></ROW><ROW><id>18565435</id><snippet>|</snippet></ROW><ROW><id>18565435</id><snippet># ^More word lists and tips at http://wwwmajortests.com/word-lists$|
#                                                                  ^
</snippet></ROW><ROW><id>18565435</id><snippet>&gt;&gt;&gt; import re
&gt;&gt;&gt; re.match('abc|', 'abc')
&lt;_sre.SRE_Match object at 0x7fc63f3ff3d8&gt;
&gt;&gt;&gt; re.match('abc|', 'bbbb')
&lt;_sre.SRE_Match object at 0x7fc63f3ff440&gt;
</snippet></ROW><ROW><id>18565435</id><snippet>|</snippet></ROW><ROW><id>18565435</id><snippet>^</snippet></ROW><ROW><id>18565435</id><snippet>re.match</snippet></ROW><ROW><id>18565435</id><snippet>r'....'</snippet></ROW><ROW><id>18565435</id><snippet>\d</snippet></ROW><ROW><id>18565435</id><snippet>\d+</snippet></ROW><ROW><id>18565501</id><snippet>f(20, A+10)
</snippet></ROW><ROW><id>18565501</id><snippet>20</snippet></ROW><ROW><id>18565501</id><snippet>20</snippet></ROW><ROW><id>18565501</id><snippet>A+10</snippet></ROW><ROW><id>18565501</id><snippet>A</snippet></ROW><ROW><id>18565501</id><snippet>20</snippet></ROW><ROW><id>18565501</id><snippet>A+10</snippet></ROW><ROW><id>18565501</id><snippet>30</snippet></ROW><ROW><id>18565501</id><snippet>input1</snippet></ROW><ROW><id>18565501</id><snippet>input2</snippet></ROW><ROW><id>18565501</id><snippet>20</snippet></ROW><ROW><id>18565501</id><snippet>30</snippet></ROW><ROW><id>18565501</id><snippet>f</snippet></ROW><ROW><id>18565501</id><snippet>A+10</snippet></ROW><ROW><id>18565501</id><snippet>30</snippet></ROW><ROW><id>18565501</id><snippet>f(20, A)
</snippet></ROW><ROW><id>18565501</id><snippet>input2</snippet></ROW><ROW><id>18565501</id><snippet>A</snippet></ROW><ROW><id>18565501</id><snippet>A</snippet></ROW><ROW><id>18565501</id><snippet>input2</snippet></ROW><ROW><id>18565501</id><snippet>f</snippet></ROW><ROW><id>18565501</id><snippet>A</snippet></ROW><ROW><id>18565528</id><snippet>QTableWidget</snippet></ROW><ROW><id>18565528</id><snippet>setColumnHidden(int column, bool hide)</snippet></ROW><ROW><id>18565528</id><snippet>True</snippet></ROW><ROW><id>18565528</id><snippet>hide</snippet></ROW><ROW><id>18565609</id><snippet>read</snippet></ROW><ROW><id>18565609</id><snippet>read</snippet></ROW><ROW><id>18565609</id><snippet>()</snippet></ROW><ROW><id>18565609</id><snippet>self.wfile.write(content.read()) 
</snippet></ROW><ROW><id>18565609</id><snippet>file.read()</snippet></ROW><ROW><id>18565609</id><snippet>read()</snippet></ROW><ROW><id>18565609</id><snippet>shutil.copyfileobj</snippet></ROW><ROW><id>18565609</id><snippet>import shutil

...

self.send_response(200)
self.send_header('Content-type', 'image/jpeg')
self.end_headers()
with open(content_path, 'rb') as content:
    shutil.copyfileobj(content, self.wfile)
</snippet></ROW><ROW><id>18565624</id><snippet>httplib2.__path__ + '/cacerts.txt'</snippet></ROW><ROW><id>18565624</id><snippet>h = httplib2.Http(ca_certs='/path/to/that/file')
</snippet></ROW><ROW><id>18565804</id><snippet>from social.backends.linkedin import LinkedinOAuth</snippet></ROW><ROW><id>18565804</id><snippet>from social.backends.linkedin import LinkedinOAuth2</snippet></ROW><ROW><id>18565975</id><snippet>self</snippet></ROW><ROW><id>18565975</id><snippet>def mutate(self, array):
</snippet></ROW><ROW><id>18565980</id><snippet>shell=True</snippet></ROW><ROW><id>18565980</id><snippet>|</snippet></ROW><ROW><id>18565980</id><snippet>shell=True</snippet></ROW><ROW><id>18565980</id><snippet>from subprocess import check_output as qx

output = qx("rbox c {qpoints} | qconvex FQ FV n".format(qpoints=qpoints),
            shell=True)
print output
</snippet></ROW><ROW><id>18566156</id><snippet>import math
class Point:
  def __init__(self, x, y):
    self._x = x
    self._y = y

  def dist_to_point(self, p):
    a = self._x - p._x
    b = self._y - p._y
    c = math.sqrt(a**2+b**2)
    return c


foo = Point(1,2)
bar = Point(3,4)
print(foo.dist_to_point(bar))
</snippet></ROW><ROW><id>18566278</id><snippet>elf_rescued</snippet></ROW><ROW><id>18566278</id><snippet>    elf_rescued= False
</snippet></ROW><ROW><id>18566278</id><snippet>elf_rescued</snippet></ROW><ROW><id>18566278</id><snippet>    global elf_rescued
</snippet></ROW><ROW><id>18566278</id><snippet>situation_change</snippet></ROW><ROW><id>18566278</id><snippet>elf_rescued= True</snippet></ROW><ROW><id>18566331</id><snippet>range</snippet></ROW><ROW><id>18566331</id><snippet>increment</snippet></ROW><ROW><id>18566331</id><snippet>DeprecationWarning: integer argument expected, got float
</snippet></ROW><ROW><id>18566331</id><snippet>Start= 2
End= 21
change=1
for Start in range(Start,End,change) :
    print(Start*0.5)
</snippet></ROW><ROW><id>18566376</id><snippet>a = [b.replace('#', '') for b in a]
</snippet></ROW><ROW><id>18566376</id><snippet>a = [b.replace('#', '').replace(' ', '') for b in a]
</snippet></ROW><ROW><id>18566637</id><snippet>sample_list = [1,2,3,4,5,6,7]
#              0 1 2 3 4 5 6
</snippet></ROW><ROW><id>18566637</id><snippet>sample_list[-2:2]</snippet></ROW><ROW><id>18566637</id><snippet>step</snippet></ROW><ROW><id>18566637</id><snippet>&gt;&gt;&gt; print sample_list[2:-2][::-1]
[5, 4, 3]
</snippet></ROW><ROW><id>18566637</id><snippet>&gt;&gt;&gt; print sample_list[-3:-7:-1]
[5, 4, 3, 2]
</snippet></ROW><ROW><id>18566753</id><snippet>from itertools import imap

def RemDup(L):
    ListComp = {}
    for sublist in L:
        try: ListComp[sublist[0]].append(sublist[1:])
        except KeyError: ListComp[sublist[0]] = [sublist[1:]]
    return imap( list, ListComp.items() )

DupList = [['5th ave', 111, -30.00, 38.00],
['5th ave', 222, -30.00, 33.00],
['6th ave', 2224, -32.00, 34.90]]

print [ uniq for uniq in RemDup(DupList) ]
</snippet></ROW><ROW><id>18566817</id><snippet>INPUT</snippet></ROW><ROW><id>18566817</id><snippet>class INPUT(Structure):
    class _I(Union):
        _fields_ = [
            ('mi', MOUSEINPUT),
            ('ki', KEYBDINPUT),
            ('hi', HARDWAREINPUT),
        ]

    _anonymous_ = 'i'
    _fields_ = [
        ('type', DWORD),
        ('i', _I),
    ]
</snippet></ROW><ROW><id>18566817</id><snippet>input.i.hi.uMsg</snippet></ROW><ROW><id>18566817</id><snippet>from ctypes import *
from ctypes.wintypes import *

class MOUSEINPUT(Structure):
    _fields_ = [
        ('dx', LONG),
        ('dy', LONG),
        ('mouseData', DWORD),
        ('dwFlags', DWORD),
        ('time', DWORD),
        ('dwExtraInfo', POINTER(ULONG)),
    ]

class KEYBDINPUT(Structure):
    _fields_ = [
        ('wVk', WORD),
        ('wScan', WORD),
        ('dwFlags', DWORD),
        ('time', DWORD),
        ('dwExtraInfo', POINTER(ULONG)),
    ]

class HARDWAREINPUT(Structure):
    _fields_ = [
        ('uMsg', DWORD),
        ('wParamL', WORD),
        ('wParamH', DWORD)
    ]

class INPUT(Structure):
    class _I(Union):
        _fields_ = [
            ('mi', MOUSEINPUT),
            ('ki', KEYBDINPUT),
            ('hi', HARDWAREINPUT),
        ]

    _anonymous_ = 'i'
    _fields_ = [
        ('type', DWORD),
        ('i', _I),
    ]
</snippet></ROW><ROW><id>18566952</id><snippet>pricelist = []
for i, x in enumerate(wb.sheets()):
    header_cells = x.row(0)
    num_rows = x.nrows - 1
    curr_row = 0
    header = [each.value for each in header_cells]
    while curr_row &lt; num_rows:
        curr_row += 1
        row = [int(each.value) 
               if isinstance(each.value, float)
               else each.value
               for each in work_sheet.row(curr_row)]
        value_dict = dict(zip(header, row))
        value_dict['turnarround'] = x.name

        pricelist.append(value_dict)

print(pricelist)
</snippet></ROW><ROW><id>18567298</id><snippet>itertools.groupby()</snippet></ROW><ROW><id>18567298</id><snippet>L1, L2, L3, L4, L5, L6, L7 = L
</snippet></ROW><ROW><id>18567298</id><snippet>d = {}
for i, j in enumerate(L, 1):
    d['L{}'.format(i)] = j
</snippet></ROW><ROW><id>18567298</id><snippet>d</snippet></ROW><ROW><id>18567298</id><snippet>{'L6': [2, 5, 54, 4, 61, 72, 65, 54], 'L7': [43, 6, 2, 6, 51, 3, 43, 13, 64, 52, 5, 8, 3, 57, 52], 'L4': [12, 14, 53, 24, 41, 53], 'L5': [1, 3, 6, 4, 3, 8], 'L2': [1, 1, 2, 8, 5, 6], 'L3': [6, 46, 35, 86, 24, 3, 34, 46, 23, 35], 'L1': [1, 5]}
</snippet></ROW><ROW><id>18567420</id><snippet>(25, 25)</snippet></ROW><ROW><id>18567420</id><snippet>(200, 1)</snippet></ROW><ROW><id>18567420</id><snippet>(4, 4)</snippet></ROW><ROW><id>18567420</id><snippet>(4, 1)</snippet></ROW><ROW><id>18567420</id><snippet>(200, 1, 25, 25)</snippet></ROW><ROW><id>18567420</id><snippet>a = numpy.ones((25, 25, 1, 200))
b = numpy.ones((1, 200))
</snippet></ROW><ROW><id>18567694</id><snippet>0</snippet></ROW><ROW><id>18567694</id><snippet>datetime.datetime.replace</snippet></ROW><ROW><id>18567694</id><snippet>&gt;&gt;&gt; d = datetime.datetime.now()
&gt;&gt;&gt; d
datetime.datetime(2013, 9, 2, 16, 25, 59, 444433)
&gt;&gt;&gt; d.replace(microsecond=0)
datetime.datetime(2013, 9, 2, 16, 25, 59)
</snippet></ROW><ROW><id>18567694</id><snippet>self.assertEquals(only_foo_in_database.date_added.replace(microsecond=0),
                  foo.date_added.replace(microsecond=0))
</snippet></ROW><ROW><id>18567694</id><snippet>datetime.timedelta</snippet></ROW><ROW><id>18567694</id><snippet>d1 = datetime.datetime(2013,9,2,6,48,56)
d2 = datetime.datetime(2013,9,2,6,48,56,677255)
self.assertTrue(abs(d1 - d2) &lt; datetime.timedelta(seconds=1))
</snippet></ROW><ROW><id>18567793</id><snippet>yield</snippet></ROW><ROW><id>18567793</id><snippet>import time

def myFunction(limit):
    for i in range(0,limit):
        time.sleep(2)
        yield i*i

for x in myFunction(100):
    print( x )
</snippet></ROW><ROW><id>18568098</id><snippet>load_committed</snippet></ROW><ROW><id>18568098</id><snippet>urlentry</snippet></ROW><ROW><id>18568098</id><snippet>    ...
    self.webview = WebKit.WebView()
    self.webview.connect('load_committed', self.change_url)

    self.scrolledwindow.add(self.webview)
    self.webview.show()

def change_url(self, widget, data=None):
    self.urlentry.set_text( widget.get_main_frame().get_uri() )

...
</snippet></ROW><ROW><id>18568168</id><snippet>paragraphs = re.split(r"\n\n", DATA)
</snippet></ROW><ROW><id>18568168</id><snippet>for match in re.finditer(r'(?s)((?:[^\n][\n]?)+)', DATA):
   print match.start(), match.end()

# Prints:
# 0 214
# 215 298
# 299 589
</snippet></ROW><ROW><id>18568209</id><snippet>html2 = ("""&lt;tr border = 1px black&gt; 
              &lt;th&gt;%s&lt;/th&gt;
              &lt;td&gt;%s&lt;/td&gt;
              &lt;td&gt;%s&lt;/td&gt;"""  )% (key, value, ip_count_dict.get(key, 0)) 
</snippet></ROW><ROW><id>18568345</id><snippet>collections.Counter</snippet></ROW><ROW><id>18568345</id><snippet>&gt;&gt;&gt; from collections import Counter
&gt;&gt;&gt; print sorted(Counter('xli uymgo fvsar jsb'.replace(' ', '')).most_common())
[('a', 1), ('b', 1), ('f', 1), ('g', 1), ('i', 1), ('j', 1), ('l', 1), ('m', 1), ('o', 1), ('r', 1), ('s', 2), ('u', 1), ('v', 1), ('x', 1), ('y', 1)]
</snippet></ROW><ROW><id>18568345</id><snippet>a</snippet></ROW><ROW><id>18568345</id><snippet>new = []
for i in f:
    new.append(i + ' ' + str(f.count(i)) # Note that i is a string, so str() is unnecessary
</snippet></ROW><ROW><id>18568345</id><snippet>new = [i + ' ' + str(f.count(i)) for i in f]
</snippet></ROW><ROW><id>18568345</id><snippet>sorted()</snippet></ROW><ROW><id>18568363</id><snippet>input()</snippet></ROW><ROW><id>18568363</id><snippet>items</snippet></ROW><ROW><id>18568363</id><snippet>item.split()</snippet></ROW><ROW><id>18568363</id><snippet>items</snippet></ROW><ROW><id>18568363</id><snippet>John Mary Bill</snippet></ROW><ROW><id>18568363</id><snippet>items = items.split()
</snippet></ROW><ROW><id>18568363</id><snippet>items.sort()</snippet></ROW><ROW><id>18568363</id><snippet>items</snippet></ROW><ROW><id>18568466</id><snippet>class Photo(models.Model):
    publish_by = models.ForeignKey(User)
    name = models.CharField(max_length=40)
    desc = models.CharField(max_length=40)
    liked_by = models.ManyToManyField(User, related_name="likes")
</snippet></ROW><ROW><id>18568466</id><snippet>photoInstance.liked_by.add(user)
</snippet></ROW><ROW><id>18568466</id><snippet> photoInstance.liked_by.all()
</snippet></ROW><ROW><id>18568466</id><snippet>user.likes.all()
</snippet></ROW><ROW><id>18568529</id><snippet>open</snippet></ROW><ROW><id>18568529</id><snippet>with</snippet></ROW><ROW><id>18568529</id><snippet>def importImage(fileName):
    with open(fileName, 'rb') as imgText:
        return imgText.read()

screenSurf = initializeScreen(800,600)
textOfImg = importImage(r'path/to/file')

with open(r'path/to/otherfile', 'wb') as newFile:
    newFile.write(textOfImg)

newimgSurf = pygame.image.load(r'path/to/otherfile')
screenSurf.blit(newimgSurf, (0,0))
pygame.display.flip()
</snippet></ROW><ROW><id>18568724</id><snippet>from twisted.internet import defer

class SomeWarningsTests(TestCase):
    def setUp(self):
        #init your connection , return the deferred that callback when is ready
    def tearDown(self):
        # disconnect from the server
    def getVoltage(self):
        #connect to you serveur and get the voltage , so return deferred
    def test_voltage(self):
        def testingVoltage(result):
             if not result:
                  raise Exception("this not normal")
             return result
        return self.getVoltage.addCallback(testingVoltage)

    #other way
    def getCurrent(self):
        #connect to you serveur and get the current(?) , so return deferred

    @defer.inlineCallbacks
    def test_current(self):
        current = yield self.getCurrent()
        if not current:
            raise  Exception("this not normal")
        defer.returnValue(current)
</snippet></ROW><ROW><id>18568754</id><snippet>&gt;&gt;&gt; x
['a=1', 'b=2']
&gt;&gt;&gt;
&gt;&gt;&gt; dict( i.split('=') for i in x )
{'a': '1', 'b': '2'}
&gt;&gt;&gt;
</snippet></ROW><ROW><id>18568888</id><snippet>li[1:]</snippet></ROW><ROW><id>18568888</id><snippet>zip()</snippet></ROW><ROW><id>18568888</id><snippet>def zips():
    from itertools import izip
    li = range(1,20000000)
    next_li = iter(li)
    next(next_li)  # advance one step
    for tup in izip(li, next_li):
        pass
    del li
</snippet></ROW><ROW><id>18568888</id><snippet>iter()</snippet></ROW><ROW><id>18568888</id><snippet>izip()</snippet></ROW><ROW><id>18568942</id><snippet>var paths = engine.GetSearchPaths();
paths.Add(yourLibsPath); // add directory to search
</snippet></ROW><ROW><id>18568942</id><snippet>engine.SetSearchPaths(paths);
</snippet></ROW><ROW><id>18568942</id><snippet>import pyFileName # without extention .py
</snippet></ROW><ROW><id>18568942</id><snippet>var scope = engine.CreateScope(); // Create ScriptScope to use it like a module
engine.Execute("import clr\n" +
                "clr.AddReference(\"System.Windows.Forms\")\n" +
                "import System.Windows.Forms\n" + 
                "def Hello():\n" +
                "\tSystem.Windows.Forms.MessageBox.Show(\"Hello World!\")", scope); // Execute code from string in scope. 
</snippet></ROW><ROW><id>18568942</id><snippet>foreach (var keyValuePair in scope.GetItems())
{
    if(keyValuePair.Value != null)
        anotherScope.SetVariable(keyValuePair.Key, keyValuePair.Value);
}
</snippet></ROW><ROW><id>18568942</id><snippet>dynamic executed = engine.ExecuteFile("Filename.py", scope);
executed.SomeFuncInFilename();
</snippet></ROW><ROW><id>18568942</id><snippet>def SomeFuncInFilename():
    Hello() # uses function from your scope
</snippet></ROW><ROW><id>18568968</id><snippet>JSON</snippet></ROW><ROW><id>18568968</id><snippet>function</snippet></ROW><ROW><id>18568968</id><snippet>route</snippet></ROW><ROW><id>18568968</id><snippet>@route(...)
@expandargs
def foo(id, bar, baz):
    ...
</snippet></ROW><ROW><id>18568968</id><snippet>request.json()</snippet></ROW><ROW><id>18568968</id><snippet>JSON</snippet></ROW><ROW><id>18568968</id><snippet>args</snippet></ROW><ROW><id>18568968</id><snippet>**expandedargs</snippet></ROW><ROW><id>18569114</id><snippet>def main():
    x = 'idle (images=green:200, inpadoc=green:60, other=green:1000, retrieval=green:200, search=green:30)'
    x= x.replace("idle (", "")
    x= x.replace(")", "")
    tmp = x.split(',')

    tmp2 = dict( i.split('=') for i in tmp )

    for item in tmp2:        
        tmp2[item] = tmp2[item].split(":")

    print tmp2  


if __name__ == '__main__':
    main()
</snippet></ROW><ROW><id>18569178</id><snippet>items=input("Students: ")
items.capitalize()
items = items.split()
items.sort()
print('')
for item in items:
    print(item)
</snippet></ROW><ROW><id>18569259</id><snippet>main</snippet></ROW><ROW><id>18569259</id><snippet>if __name__ == '__main__'</snippet></ROW><ROW><id>18569259</id><snippet>App</snippet></ROW><ROW><id>18569259</id><snippet>        ...
        self.SetTopWindow(self.frame)
        return True

def main():
    app = App()
    app.MainLoop()

if __name__ == '__main__':
    main()
</snippet></ROW><ROW><id>18569259</id><snippet>wxPython.jpg</snippet></ROW><ROW><id>18569259</id><snippet>    size = temp.GetWidth(), temp.GetHight()
</snippet></ROW><ROW><id>18569259</id><snippet>GetHeight()</snippet></ROW><ROW><id>18569259</id><snippet>GetHight()</snippet></ROW><ROW><id>18569392</id><snippet>collections.Counter</snippet></ROW><ROW><id>18569392</id><snippet>import collections

s = 'xli uymgo fvsar jsb'
cnt = collections.Counter(s.replace(' ', ''))
for letter in sorted(cnt):
  print (letter, cnt[letter])
</snippet></ROW><ROW><id>18569392</id><snippet>a 1
b 1
f 1
g 1
i 1
j 1
l 1
m 1
o 1
r 1
s 2
u 1
v 1
x 1
y 1
</snippet></ROW><ROW><id>18569821</id><snippet>ipython</snippet></ROW><ROW><id>18569821</id><snippet>test.py</snippet></ROW><ROW><id>18569821</id><snippet>import numpy as np
import matplotlib.pyplot as plt 

fig = plt.figure()
x = np.linspace(-1, 1, 100)
y = np.sin(x)
plt.plot(x, y)
plt.show()
</snippet></ROW><ROW><id>18569821</id><snippet>ipython</snippet></ROW><ROW><id>18569821</id><snippet>ipython --pylab=qt
</snippet></ROW><ROW><id>18569821</id><snippet>ipython</snippet></ROW><ROW><id>18569821</id><snippet>%run /path/to/the/test.py
</snippet></ROW><ROW><id>18569821</id><snippet>x = np.linspace(-0, 2, 100)
</snippet></ROW><ROW><id>18569821</id><snippet>%run</snippet></ROW><ROW><id>18569821</id><snippet>ipython</snippet></ROW><ROW><id>18569821</id><snippet>%run /path/to/the/test.py
</snippet></ROW><ROW><id>18570238</id><snippet>#</snippet></ROW><ROW><id>18570238</id><snippet>#</snippet></ROW><ROW><id>18570238</id><snippet>#</snippet></ROW><ROW><id>18570238</id><snippet>from itertools import combinations, product
def canMerge (g, h):
    for i, j in g:
        for x, y in h:
            if abs(i - x) &lt;= 1 and abs(j - y) &lt;= 1:
                return True
    return False

def findGroups (field):
    # initialize one-element groups
    groups = [[(i, j)] for i, j in product(range(len(field)), range(len(field[0]))) if field[i][j] == '#']

    # keep joining until no more joins can be executed
    merged = True
    while merged:
        merged = False
        for g, h in combinations(groups, 2):
            if canMerge(g, h):
                g.extend(h)
                groups.remove(h)
                merged = True
                break

    return groups

# intialize field
field = '''\
..##.#..#
##..####.
.........
###.###..
##...#...'''.splitlines()
groups = findGroups(field)

print(len(groups)) # 3
</snippet></ROW><ROW><id>18570256</id><snippet>str.translate()</snippet></ROW><ROW><id>18570256</id><snippet>None</snippet></ROW><ROW><id>18570256</id><snippet>remove = dict.fromkeys(map(ord, '\n ' + string.punctuation))
f.translate(remove)
</snippet></ROW><ROW><id>18570256</id><snippet>dict.fromkeys()</snippet></ROW><ROW><id>18570256</id><snippet>None</snippet></ROW><ROW><id>18570256</id><snippet>&gt;&gt;&gt; import string
&gt;&gt;&gt; remove = dict.fromkeys(map(ord, '\n ' + string.punctuation))
&gt;&gt;&gt; sample = 'The quick brown fox, like, totally jumped, man!'
&gt;&gt;&gt; sample.translate(remove)
'Thequickbrownfoxliketotallyjumpedman'
</snippet></ROW><ROW><id>18570256</id><snippet>remove = dict.fromkeys(map(ord, '\n ' + string.punctuation))

with open('cipher.txt') as inputfile:
    f = inputfile.read().translate(remove)
</snippet></ROW><ROW><id>18570415</id><snippet>urlsafe()</snippet></ROW><ROW><id>18570716</id><snippet>PYTHONPATH</snippet></ROW><ROW><id>18570716</id><snippet>ipcluster</snippet></ROW><ROW><id>18570716</id><snippet>from IPython.parallel import Client

rc = Client()
dview = rc[:]

with dview.sync_imports():
    import sys
    sys.path[:] = ['something']

def parallel(x):
    import sys
    return sys.path

print 'Local: ', sys.path
print 'Remote: ', dview.map_sync(parallel, range(1))
</snippet></ROW><ROW><id>18570716</id><snippet>sync_imports</snippet></ROW><ROW><id>18570716</id><snippet>PYTHONPATH</snippet></ROW><ROW><id>18570716</id><snippet>PYTHONPATH</snippet></ROW><ROW><id>18570842</id><snippet>translation = input("Word: ")
count = 0
previous = []
while translation != "":
    if translation not in previous:
        count = (count - 1)
        previous.append(translation)
    translation = input("Word: ")

print("You know", count, "unique translation(s)!")
</snippet></ROW><ROW><id>18570909</id><snippet>subprocess.check_call()</snippet></ROW><ROW><id>18570909</id><snippet>0</snippet></ROW><ROW><id>18570909</id><snippet>CalledProcessError</snippet></ROW><ROW><id>18570909</id><snippet>subprocess.check_output()</snippet></ROW><ROW><id>18570909</id><snippet>from subprocess import Popen, PIPE
from subprocess import CalledProcessError as BaseCalledProcessError

class CalledProcessError(BaseCalledProcessError):
    def __init__(self, returncode, cmd, output=None):
        super(CalledProcessError, self).__init__(returncode, cmd)
        self.output = output

def check_output(*popenargs, **kwargs):
    r"""Run command with arguments and return its output as a byte string.

    If the exit code was non-zero it raises a CalledProcessError.  The
    CalledProcessError object will have the return code in the returncode
    attribute and output in the output attribute.

    The arguments are the same as for the Popen constructor.  Example:

    &gt;&gt;&gt; check_output(["ls", "-l", "/dev/null"])
    'crw-rw-rw- 1 root root 1, 3 Oct 18  2007 /dev/null\n'

    The stdout argument is not allowed as it is used internally.
    To capture standard error in the result, use stderr=STDOUT.

    &gt;&gt;&gt; check_output(["/bin/sh", "-c",
    ...               "ls -l non_existent_file ; exit 0"],
    ...              stderr=STDOUT)
    'ls: non_existent_file: No such file or directory\n'
    """
    if 'stdout' in kwargs:
        raise ValueError('stdout argument not allowed, it will be overridden.')
    process = Popen(stdout=PIPE, *popenargs, **kwargs)
    output, unused_err = process.communicate()
    retcode = process.poll()
    if retcode:
        cmd = kwargs.get("args")
        if cmd is None:
            cmd = popenargs[0]
        raise CalledProcessError(retcode, cmd, output=output)
    return output
</snippet></ROW><ROW><id>18571084</id><snippet>l = [a, b, c, d, e]
c_index = l.index("c")
l2 = l[:c_index]
</snippet></ROW><ROW><id>18571458</id><snippet>--variablefile path/to/test_variables
</snippet></ROW><ROW><id>18571458</id><snippet>--variablefile path/to/live_variables --exclude WRITING
</snippet></ROW><ROW><id>18571458</id><snippet>pybot --argumentfile argumentfile_for_test.arg
</snippet></ROW><ROW><id>18571458</id><snippet>pybot --argumentfile argumentfile_for_live.arg
</snippet></ROW><ROW><id>18571508</id><snippet>owner</snippet></ROW><ROW><id>18571508</id><snippet>pre_save()</snippet></ROW><ROW><id>18571508</id><snippet>def pre_save(self, obj):
    obj.owner = self.request.user
</snippet></ROW><ROW><id>18572022</id><snippet>import operator
data = [
    {"flag":"ZAR", "time":"17:45"},
    {"flag":"AUS", "time":"17:15"},
    {"flag":"USA", "time":"17:00"},
    {"flag":"GBP", "time":"16:55"},
    {"flag":"ZAR", "time":"16:45"},
    {"flag":"USA", "time":"16:35"},
    {"flag":"GBP", "time":"16:25"},
    {"flag":"ZAR", "time":"16:15"},
]

data.sort(key=operator.itemgetter("time"))
data.sort(key=lambda L: L['flag'] == 'ZAR', reverse=True)

# [{'flag': 'ZAR', 'time': '16:15'}, {'flag': 'ZAR', 'time': '16:45'}, {'flag': 'ZAR', 'time': '17:45'}, {'flag': 'GBP', 'time': '16:25'}, {'flag': 'USA', 'time': '16:35'}, {'flag': 'GBP', 'time': '16:55'}, {'flag': 'USA', 'time': '17:00'}, {'flag': 'AUS', 'time': '17:15'}, {'flag': 'AUS', 'time': '17:30'}]
</snippet></ROW><ROW><id>18572229</id><snippet>cipher = {}
for f in open('mapping.txt'):
  org, cip = f.split()
  cipher[ord(org)] = cip


inpt = input('Enter string: ')

inpt = inpt.translate(cipher)
print('Message: ' + inpt)
</snippet></ROW><ROW><id>18572325</id><snippet>collections.Counter</snippet></ROW><ROW><id>18572325</id><snippet>&gt;&gt;&gt; a = {}
&gt;&gt;&gt; a["hello"]={'n': 1,'m': 2,'o': 3}
&gt;&gt;&gt; a["bye"]={'n': 2,'m': 1,'o': 0}
&gt;&gt;&gt; a["goodbye"]={'n': 0,'m': 2,'o': 1}
&gt;&gt;&gt; import collections
&gt;&gt;&gt; result = collections.Counter()
&gt;&gt;&gt; for d in a.values():
...     result += collections.Counter(d)
...
&gt;&gt;&gt; result
Counter({'m': 5, 'o': 4, 'n': 3})
&gt;&gt;&gt; dict(result)
{'m': 5, 'o': 4, 'n': 3}
</snippet></ROW><ROW><id>18572325</id><snippet>collections.Counter</snippet></ROW><ROW><id>18572325</id><snippet>sum</snippet></ROW><ROW><id>18572325</id><snippet>&gt;&gt;&gt; a = ...
&gt;&gt;&gt; sum(map(collections.Counter, a.values()), collections.Counter())
Counter({'m': 5, 'o': 4, 'n': 3})
</snippet></ROW><ROW><id>18572594</id><snippet>&lt;KeyPress&gt;</snippet></ROW><ROW><id>18572594</id><snippet>&lt;KeyRelease&gt;</snippet></ROW><ROW><id>18572594</id><snippet>&lt;KeyPress&gt;</snippet></ROW><ROW><id>18572594</id><snippet>'break'</snippet></ROW><ROW><id>18572594</id><snippet>&lt;KeyRelease&gt;</snippet></ROW><ROW><id>18572594</id><snippet>&lt;KeyPress-Return&gt;</snippet></ROW><ROW><id>18572594</id><snippet>&lt;Return&gt;</snippet></ROW><ROW><id>18572594</id><snippet>event.keysym == "Return"</snippet></ROW><ROW><id>18572679</id><snippet>&lt;KeyRelease&gt;</snippet></ROW><ROW><id>18572679</id><snippet>&lt;KeyPress&gt;</snippet></ROW><ROW><id>18572679</id><snippet>&lt;Return&gt;</snippet></ROW><ROW><id>18572679</id><snippet>&lt;KeyRelease&gt;</snippet></ROW><ROW><id>18572679</id><snippet>&lt;KeyPress&gt;</snippet></ROW><ROW><id>18572679</id><snippet>&lt;Return&gt;</snippet></ROW><ROW><id>18572679</id><snippet>&lt;KeyRelease&gt;</snippet></ROW><ROW><id>18572679</id><snippet>&lt;KeyRelease&gt;</snippet></ROW><ROW><id>18572679</id><snippet>&lt;Return&gt;</snippet></ROW><ROW><id>18572679</id><snippet>&lt;KeyPress&gt;</snippet></ROW><ROW><id>18572679</id><snippet>def handle_keyrelease(event):
    global text
    if event.keysym in validkeysymchars:
        for x in ['testcommand']:
            strtocmp = text.get("MARK","end")
            strtocmp = strtocmp.encode('ascii','ignore')
            strtocmp = strtocmp.strip()
            print strtocmp
            if x.startswith(strtocmp):
                currpos = text.index(INSERT)
                text.insert(END,x[len(strtocmp):])
                text.tag_add(SEL,currpos,"%s+%dc"%(currpos,len(x)-len(strtocmp)))
                text.mark_set("insert",currpos)
                return

def handle_return(event):
    text.tag_remove(SEL,"1.9",END)
    text.mark_set("insert",END)
    text.insert(END, "\n")
    text.insert(END, "command&gt;")
    text.mark_set("MARK",INSERT)
    text.mark_gravity("MARK",LEFT)
    return "break"

...
text.bind("&lt;KeyRelease&gt;", handle_keyrelease)
text.bind("&lt;Return&gt;", handle_return)
...
</snippet></ROW><ROW><id>18573332</id><snippet>In [1]: import datetime as DT

In [2]: d = DT.datetime(1900,1,1,2,0)

In [3]: m = DT.datetime(1900,1,1,6,0)

In [4]: delta = d - DT.datetime(1900,1,1,0,0)

In [5]: m + delta
Out[5]: datetime.datetime(1900, 1, 1, 8, 0)
</snippet></ROW><ROW><id>18573332</id><snippet>d</snippet></ROW><ROW><id>18573833</id><snippet>from application import app
app.run(debug=True, host='0.0.0.0')
</snippet></ROW><ROW><id>18573833</id><snippet>from flask import Flask
from route import mod

app = Flask(__name__)
app.register_blueprint(mod, url_prefix='/')
</snippet></ROW><ROW><id>18573833</id><snippet>from flask import Flask, Blueprint

mod = Blueprint('app', __name__)

@mod.route('/')
def index():
    return "hello world"
</snippet></ROW><ROW><id>18573989</id><snippet>print(username)</snippet></ROW><ROW><id>18573989</id><snippet>nathan</snippet></ROW><ROW><id>18573989</id><snippet>username</snippet></ROW><ROW><id>18573989</id><snippet>password</snippet></ROW><ROW><id>18573989</id><snippet>load</snippet></ROW><ROW><id>18573989</id><snippet>username = fRUsername.readlines()
</snippet></ROW><ROW><id>18573989</id><snippet>username</snippet></ROW><ROW><id>18573989</id><snippet>password</snippet></ROW><ROW><id>18573989</id><snippet>def load():
    global username, password
    username = ... # this now changes the _global_ variable
</snippet></ROW><ROW><id>18573989</id><snippet>readlines</snippet></ROW><ROW><id>18573989</id><snippet>user1\n</snippet></ROW><ROW><id>18573989</id><snippet>user2\n</snippet></ROW><ROW><id>18573989</id><snippet>user3</snippet></ROW><ROW><id>18573989</id><snippet>strip()</snippet></ROW><ROW><id>18573989</id><snippet>with</snippet></ROW><ROW><id>18573989</id><snippet>close()</snippet></ROW><ROW><id>18573989</id><snippet>with open('username.txt', 'r') as fRUsername:
    username = fRUsername.readlines()
</snippet></ROW><ROW><id>18574143</id><snippet>replace</snippet></ROW><ROW><id>18574143</id><snippet>url = string.replace("\\", "")
</snippet></ROW><ROW><id>18574173</id><snippet>process_all</snippet></ROW><ROW><id>18574173</id><snippet>return</snippet></ROW><ROW><id>18574173</id><snippet>def is_send_permitted(request):
    # Check user has required credits in account to these batches.
    balance = Account.objects.get(user=request.user).get_balance()
    cost_of_sending = Batch.objects.batches_cost_pending(user=request.user)
    if balance &lt; cost_of_sending:
        return False
    else:
        return True


@login_required
def process_all(request):
    #If we had a POST then get the request post values.
    if request.method == 'POST':
        batches = Batch.objects.for_user_pending(request)

        # Will redirect/cancel request if user does not meet requirements, funds, permissions etc
        if not is_send_permitted_interceptor(request):
            return HttpResponseForbidden()
        # stuff here if everything is ok
</snippet></ROW><ROW><id>18574173</id><snippet>from django.core.exceptions import PermissionDenied
raise PermissionDenied()
</snippet></ROW><ROW><id>18574551</id><snippet>np.repeat</snippet></ROW><ROW><id>18574551</id><snippet>np.repeat(a,3,axis=0)
array([[0, 1, 2],
       [0, 1, 2],
       [0, 1, 2],
       [3, 4, 5],
       [3, 4, 5],
       [3, 4, 5],
       [6, 7, 8],
       [6, 7, 8],
       [6, 7, 8]])
</snippet></ROW><ROW><id>18574551</id><snippet>N=100
%timeit np.repeat(a,N,axis=0)
100000 loops, best of 3: 4.6 us per loop

%timeit rows, cols = a.shape;b=np.hstack(N*(a,));b.reshape(N*rows, cols)
1000 loops, best of 3: 257 us per loop

N=100000
%timeit np.repeat(a,N,axis=0)
100 loops, best of 3: 3.93 ms per loop

%timeit rows, cols = a.shape;b=np.hstack(N*(a,));b.reshape(N*rows, cols)
1 loops, best of 3: 245 ms per loop
</snippet></ROW><ROW><id>18574551</id><snippet>np.tile</snippet></ROW><ROW><id>18574670</id><snippet>from werkzeug.wrappers import Request
req = Request(environ, shallow=True)
</snippet></ROW><ROW><id>18574670</id><snippet>flask.wrappers.Request</snippet></ROW><ROW><id>18574880</id><snippet>getBookSet()</snippet></ROW><ROW><id>18574880</id><snippet>def getBookSet(sales_input="data/sales_3yr.csv"):
    sales = csv.reader(open(sales_input, 'rb'))
    bookID = set()
    lineNumber = 0    
    for line in sales:
        id = line[6]
        if lineNumber&lt;&gt;0:
            bookID.add(eval(id))
        lineNumber=1
    return bookID
</snippet></ROW><ROW><id>18574880</id><snippet>sales_input</snippet></ROW><ROW><id>18574880</id><snippet>def getBookSet(sales_input="data/sales_3yr.csv"):
    with open(sales_input, 'rb') as sales_file:
        sales = csv.reader(sales_file)
        next(sales, None)  # skip the first line
        return {int(row[6]) for row in sales}
</snippet></ROW><ROW><id>18574880</id><snippet>next()</snippet></ROW><ROW><id>18574880</id><snippet>sales</snippet></ROW><ROW><id>18574880</id><snippet>&lt;&gt;</snippet></ROW><ROW><id>18574880</id><snippet>if lineNumber</snippet></ROW><ROW><id>18574880</id><snippet>if lineNumber &gt; 0</snippet></ROW><ROW><id>18574880</id><snippet>if lineNumber != 0</snippet></ROW><ROW><id>18574880</id><snippet>eval()</snippet></ROW><ROW><id>18574880</id><snippet>int()</snippet></ROW><ROW><id>18574880</id><snippet>float()</snippet></ROW><ROW><id>18574880</id><snippet>with</snippet></ROW><ROW><id>18574951</id><snippet>next</snippet></ROW><ROW><id>18574951</id><snippet>iterable</snippet></ROW><ROW><id>18574951</id><snippet>islice</snippet></ROW><ROW><id>18574951</id><snippet>def drop_n_elements(start, stop, iterable):
    return itertools.islice(iterable, start, stop)
</snippet></ROW><ROW><id>18574951</id><snippet>iterable = drop_n_elements(0, 2, iterable)
</snippet></ROW><ROW><id>18574951</id><snippet>None</snippet></ROW><ROW><id>18574951</id><snippet>islice</snippet></ROW><ROW><id>18574951</id><snippet>step</snippet></ROW><ROW><id>18574987</id><snippet>GPSTime</snippet></ROW><ROW><id>18574987</id><snippet>gpstime</snippet></ROW><ROW><id>18574987</id><snippet>gpstime.GPSTime</snippet></ROW><ROW><id>18574987</id><snippet>gpstime</snippet></ROW><ROW><id>18574987</id><snippet>__init__</snippet></ROW><ROW><id>18574987</id><snippet>gpstime</snippet></ROW><ROW><id>18574987</id><snippet>gpstime.GPSTime</snippet></ROW><ROW><id>18574987</id><snippet>from pygpstools import gpstime</snippet></ROW><ROW><id>18574987</id><snippet>gpstime.GPSTime</snippet></ROW><ROW><id>18574987</id><snippet>__init__</snippet></ROW><ROW><id>18574987</id><snippet>from almanacs import *
from constants import *
from geodesy import *
from gpstime import GPSTime
from satellite import * 
</snippet></ROW><ROW><id>18574987</id><snippet>*</snippet></ROW><ROW><id>18574987</id><snippet>__all__</snippet></ROW><ROW><id>18574987</id><snippet>__init__</snippet></ROW><ROW><id>18574987</id><snippet>from pygpstools import *</snippet></ROW><ROW><id>18575188</id><snippet>kernel(sample)</snippet></ROW><ROW><id>18575188</id><snippet>tik = time.time()
insample = kernel(sample) &lt; iso
print 'filter/sample: ', time.time()-tik
#filter/sample:  1.94065904617
</snippet></ROW><ROW><id>18575188</id><snippet>multiprocessing</snippet></ROW><ROW><id>18575188</id><snippet>from multiprocessing import Pool
tik = time.time()

#Create definition.
def calc_kernel(samp):
    return kernel(samp)

#Choose number of cores and split input array.
cores = 4
torun = np.array_split(sample, cores, axis=1)

#Calculate
pool = Pool(processes=cores)
results = pool.map(calc_kernel, torun)

#Reintegrate and calculate results
insample_mp = np.concatenate(results) &lt; iso

print 'multiprocessing filter/sample: ', time.time()-tik
#multiprocessing filter/sample:  0.496874094009
</snippet></ROW><ROW><id>18575188</id><snippet>print np.all(insample==insample_mp)
#True
</snippet></ROW><ROW><id>18575290</id><snippet>genfromtxt</snippet></ROW><ROW><id>18575290</id><snippet>missing values</snippet></ROW><ROW><id>18575290</id><snippet>genfromtxt</snippet></ROW><ROW><id>18575290</id><snippet>nan</snippet></ROW><ROW><id>18575290</id><snippet>nan</snippet></ROW><ROW><id>18575290</id><snippet>import numpy as np
from StringIO import StringIO

data = """
0,4,1
34758,1,100
52,,
"""

my_data = np.genfromtxt(StringIO(data), delimiter=",")

index_to_use=[]
for i, row in enumerate(my_data):
    if True not in np.isnan(row):
        index_to_use.append(i)

print my_data[index_to_use]

&gt;&gt;&gt;
[[  0.00000000e+00   4.00000000e+00   1.00000000e+00]
[  3.47580000e+04   1.00000000e+00   1.00000000e+02]]
</snippet></ROW><ROW><id>18575381</id><snippet>import xml.etree.ElementTree as ET
    Books = ET.parse('4.xml') #parse the xml file into an elementtre
    root = Books.getroot()
    for child in root:
        BookInfo = [
        child.find('title').text,
        child.find('author').text,
        child.find('year').text,
        child.find('price').text
        ]
        print (BookInfo)
</snippet></ROW><ROW><id>18575489</id><snippet>urlconf</snippet></ROW><ROW><id>18575489</id><snippet>url(r'^add/conf_certificate/(?P&lt;configuration_pk&gt;\d+)/(?P&lt;type_pk&gt;\d+)/$', 'Tank.views.new_conf_cert', name='new_conf_cert')
</snippet></ROW><ROW><id>18575575</id><snippet>join</snippet></ROW><ROW><id>18575575</id><snippet>thread.start_new_thread(f1(res))
</snippet></ROW><ROW><id>18575575</id><snippet>f1(res)</snippet></ROW><ROW><id>18575575</id><snippet>thread.start_new_thread</snippet></ROW><ROW><id>18575575</id><snippet>f1(res)</snippet></ROW><ROW><id>18575575</id><snippet>f1</snippet></ROW><ROW><id>18575575</id><snippet>thread</snippet></ROW><ROW><id>18575575</id><snippet>threading</snippet></ROW><ROW><id>18575575</id><snippet> thread.start_new_thread(f1(res))
</snippet></ROW><ROW><id>18575575</id><snippet>TypeError: start_new_thread expected at least 2 arguments, got 1
</snippet></ROW><ROW><id>18575575</id><snippet>import threading
import logging
logger = logging.getLogger(__name__)
lock = threading.Lock()

def f1():
    with lock:
        logger.info('f1')
        threading.Timer(10, f1).start()

def f2():
    with lock:
        logger.info('f2')
        threading.Timer(8, f2).start()

def f3():
    with lock:
        logger.info('f3')
        threading.Timer(23, f3).start()

if __name__ == '__main__':
    logging.basicConfig(level=logging.DEBUG,
                        format='[%(asctime)s %(threadName)s] %(message)s',
                        datefmt='%H:%M:%S')
    threading.Thread(target=f1).start()
    threading.Thread(target=f2).start()
    threading.Thread(target=f3).start()
</snippet></ROW><ROW><id>18575575</id><snippet>[10:53:12 Thread-1] f1
[10:53:12 Thread-3] f2
[10:53:12 Thread-4] f3
[10:53:20 Thread-5] f2
[10:53:22 Thread-2] f1
[10:53:28 Thread-7] f2
[10:53:32 Thread-8] f1
[10:53:35 Thread-6] f3
[10:53:36 Thread-9] f2
  C-c C-\Quit
</snippet></ROW><ROW><id>18575634</id><snippet>TEMPLATE_CONTEXT_PROCESSORS</snippet></ROW><ROW><id>18575897</id><snippet>def keyPressEvent(self, event):
        if event.key() in [16777235, 16777237, 16777234, 16777236, 16777220]: # Up, down, left, right, return.
            event.ignore()
        else:
            super(MyTextEdit, self).keyPressEvent(event)
</snippet></ROW><ROW><id>18575917</id><snippet>from win32com.client import Dispatch
excel = Dispatch('Excel.Application')
sheet = excel.Workbooks.open('Book1').Sheets('Sheet1')
</snippet></ROW><ROW><id>18575917</id><snippet>def itercolumn(sheet, col, iStart=1):
    res = []
    while True:
        cellval = sheet.Cells(iStart, col).value
        if cellval == None:
            return res
        res.append(cellval)
        iStart += 1
</snippet></ROW><ROW><id>18575917</id><snippet>def iterbyrange(sheet, col, start, end):
    res = []
    for i in range(start, end):
        res.append(sheet.Cells(i, col).value)
    return res
</snippet></ROW><ROW><id>18575917</id><snippet>import xlrd
book = xlrd.open_workbooks('Book1')
sheet = book.sheet_by_name('Sheet1')
sheel.col(1)
sheet.col(2)
# and so on...
</snippet></ROW><ROW><id>18576067</id><snippet>item</snippet></ROW><ROW><id>18576067</id><snippet>def func(row):
    xml = ['&lt;item&gt;']
    for field in row.index:
        xml.append('  &lt;field name="{0}"&gt;{1}&lt;/field&gt;'.format(field, row[field]))
    xml.append('&lt;/item&gt;')
    return '\n'.join(xml)
</snippet></ROW><ROW><id>18576067</id><snippet>axis=1</snippet></ROW><ROW><id>18576067</id><snippet>&gt;&gt;&gt; print '\n'.join(df.apply(func, axis=1))
&lt;item&gt;
  &lt;field name="field_1"&gt;cat&lt;/field&gt;
  &lt;field name="field_2"&gt;15,263&lt;/field&gt;
  &lt;field name="field_3"&gt;2.52&lt;/field&gt;
  &lt;field name="field_4"&gt;00:03:00&lt;/field&gt;
&lt;/item&gt;
&lt;item&gt;
  &lt;field name="field_1"&gt;dog&lt;/field&gt;
  &lt;field name="field_2"&gt;1,652&lt;/field&gt;
  &lt;field name="field_3"&gt;3.71&lt;/field&gt;
  &lt;field name="field_4"&gt;00:03:47&lt;/field&gt;
&lt;/item&gt;
...
</snippet></ROW><ROW><id>18576120</id><snippet>xlrd</snippet></ROW><ROW><id>18576120</id><snippet>xlrd</snippet></ROW><ROW><id>18576120</id><snippet>'\t '</snippet></ROW><ROW><id>18576120</id><snippet>csv</snippet></ROW><ROW><id>18576120</id><snippet>split()</snippet></ROW><ROW><id>18576120</id><snippet>.xls</snippet></ROW><ROW><id>18576120</id><snippet>xlwt</snippet></ROW><ROW><id>18576307</id><snippet>to_numpy</snippet></ROW><ROW><id>18576307</id><snippet>class MyClass:
    def __init__(self):
        container1 = []
        container2 = []
        ...
def to_numpy(self,container):
    list = self.__getattr__(container)
    self.__setattr__(container,np.array(list))
        ...  
</snippet></ROW><ROW><id>18576307</id><snippet>object = MyClass()

lists_to_convert = ["container1", "container2" ...]

def converter(lists_to_convert):
    for list in lists_to_convert:
        object.to_numpy(list)
</snippet></ROW><ROW><id>18576329</id><snippet>equal</snippet></ROW><ROW><id>18576329</id><snippet>ax.set_aspect(1./ax.get_data_ratio())
</snippet></ROW><ROW><id>18576598</id><snippet>collections</snippet></ROW><ROW><id>18576598</id><snippet>itertools</snippet></ROW><ROW><id>18576598</id><snippet>chain.from_iterable</snippet></ROW><ROW><id>18576598</id><snippet>islice</snippet></ROW><ROW><id>18576598</id><snippet>grouper</snippet></ROW><ROW><id>18576598</id><snippet>grouper</snippet></ROW><ROW><id>18576598</id><snippet>def shift(pairs):
    it = iter(pairs)
    (_, p) = next(it)
    for (n, p2) in it:
        yield (p, n)
        p = p2
</snippet></ROW><ROW><id>18576649</id><snippet>&amp;</snippet></ROW><ROW><id>18576649</id><snippet>and</snippet></ROW><ROW><id>18576649</id><snippet>and</snippet></ROW><ROW><id>18576649</id><snippet>&amp;</snippet></ROW><ROW><id>18576649</id><snippet>while 1:
    event = pygame.event.poll()
    if event.type == pygame.QUIT:
       break
    if (event.type == pygame.KEYDOWN) and (event.key == pygame.K_RETURN):
       break
</snippet></ROW><ROW><id>18576700</id><snippet>__init__</snippet></ROW><ROW><id>18576700</id><snippet>some_instance = SomeClass(a, b)</snippet></ROW><ROW><id>18576700</id><snippet>self</snippet></ROW><ROW><id>18576700</id><snippet>a</snippet></ROW><ROW><id>18576700</id><snippet>b</snippet></ROW><ROW><id>18576700</id><snippet>__init__</snippet></ROW><ROW><id>18576700</id><snippet>some_instance.__init__(*args)</snippet></ROW><ROW><id>18576700</id><snippet>SomeClass(*args)</snippet></ROW><ROW><id>18576700</id><snippet>__init__</snippet></ROW><ROW><id>18576700</id><snippet>__init__</snippet></ROW><ROW><id>18576700</id><snippet>__init__</snippet></ROW><ROW><id>18576700</id><snippet>super</snippet></ROW><ROW><id>18576727</id><snippet>f.write('File ID: ' + '%d' + '%d' % (num, newNum))
</snippet></ROW><ROW><id>18576727</id><snippet>f.write('File ID: %d' % (num + newNum))
</snippet></ROW><ROW><id>18576727</id><snippet>numNum += 1
</snippet></ROW><ROW><id>18577188</id><snippet>@decorator.decorator</snippet></ROW><ROW><id>18577188</id><snippet>@decorator.decorator
def mydec(func, cls, *args, **kwargs):
    # do some stuff
    return func(cls, *args, **kwargs)
</snippet></ROW><ROW><id>18577188</id><snippet>decorator</snippet></ROW><ROW><id>18577188</id><snippet>&gt;&gt;&gt; @decorator.decorator
... def mydec(func, cls, *args, **kwargs):
...     # do some stuff
...     return func(cls, *args, **kwargs)
... 
&gt;&gt;&gt; class Foo(object):
...     @classmethod
...     @mydec
...     def bar(cls, baz='test', qux=None):
...         print (baz, qux)
... 
&gt;&gt;&gt; Foo.bar()
('test', None)
</snippet></ROW><ROW><id>18577319</id><snippet>lbl = Label(wind, bg = 'white', text = gravitation(oval1, oval2))
lbl.pack(padx=5, pady=5)
# Put this on its own line so that there are no errors since 'lbl' isn't defined yet
gravitation(oval1, oval2)
</snippet></ROW><ROW><id>18577319</id><snippet>lbl</snippet></ROW><ROW><id>18577319</id><snippet>pack</snippet></ROW><ROW><id>18577319</id><snippet>None</snippet></ROW><ROW><id>18577319</id><snippet>gravitation(oval1, oval2)
</snippet></ROW><ROW><id>18577319</id><snippet>move</snippet></ROW><ROW><id>18577319</id><snippet>grav</snippet></ROW><ROW><id>18577319</id><snippet>gravitation</snippet></ROW><ROW><id>18577319</id><snippet>lbl["text"] = grav
</snippet></ROW><ROW><id>18577319</id><snippet>gravitation</snippet></ROW><ROW><id>18577319</id><snippet>from tkinter import *
import math

x, y = 135, 135

def gravitation (obj1,obj2):
    a, b, c, d = can.coords (obj1)
    e, f, g, h = can.coords (obj2)
    dist = math.sqrt ((((a+c)/2)-((e+g)/2))**2+(((b+d)/2)-((f+h)/2))**2)
    grav = 6.67384/dist
    ##################
    lbl["text"] = grav
    ##################

def move (ov, lr, tb):
    coo = can.coords(ov)
    coo[0] = coo[0] + lr
    coo[1] = coo[1] + tb
    coo[2] = coo[0]+30
    coo[3] = coo[1]+30
    can.coords(ov, *coo)
    ########################
    gravitation(oval1, oval2)
    ########################


def moveLeft ():
    move(oval1, -10, 0)

def moveRight ():
    move(oval1, 10, 0)


def moveTop ():
    move(oval1, 0, -10)

def moveBottom ():
    move(oval1, 0, 10)

def moveLeft2 ():
    move(oval2, -10, 0)

def moveRight2 ():
    move(oval2, 10, 0)

def moveTop2 ():
    move(oval2, 0, -10)

def moveBottom2 ():
    move(oval2, 0, 10)



wind = Tk()
wind.title ("Move Da Ball")
can = Canvas (wind, width = 300, height = 300, bg = "light blue")
can.pack (side = LEFT,padx = 5, pady = 5)
Button(wind, text = 'Quit', command=wind.destroy).pack(padx = 5, pady = 5)

oval1 = can.create_oval(x,y,x+30,y+30,width=2,fill='orange') #Planet 1 moving etc
Button(wind, text = 'Left', command=moveLeft).pack(padx = 5, pady = 5)
Button(wind, text = 'Right', command=moveRight).pack(padx = 5, pady = 5)
Button(wind, text = 'Top', command=moveTop).pack(padx = 5, pady = 5)
Button(wind, text = 'Bottom', command=moveBottom).pack(padx = 5, pady = 5)

oval2 = can.create_oval(x+50,y+50,x+80,y+80,width=2,fill='orange') #Planet 2 moving etc
Button(wind, text = 'Left', command=moveLeft2).pack(padx = 5, pady = 5)
Button(wind, text = 'Right', command=moveRight2).pack(padx = 5, pady = 5)
Button(wind, text = 'Top', command=moveTop2).pack(padx = 5, pady = 5)
Button(wind, text = 'Bottom', command=moveBottom2).pack(padx = 5, pady = 5)

###############################
lbl = Label(wind, bg = 'white')
lbl.pack(padx=5, pady=5)
gravitation(oval1, oval2)
##############################

wind.mainloop()
</snippet></ROW><ROW><id>18577319</id><snippet>gravitation = 0</snippet></ROW><ROW><id>18577319</id><snippet>gravitation</snippet></ROW><ROW><id>18577378</id><snippet>def walk_to_value(d, l):
    for e in l:
        d = d[e]
    return d
</snippet></ROW><ROW><id>18577459</id><snippet>kqueue.control</snippet></ROW><ROW><id>18577459</id><snippet>import select
import os

os.mkfifo('my.fifo')
f = os.open('my.fifo', os.O_RDONLY|os.O_NONBLOCK)

try:
    kq = select.kqueue()

    # Add FD to the queue
    kq.control([select.kevent(f, select.KQ_FILTER_READ, select.KQ_EV_ADD|select.KQ_EV_ENABLE)], 0)

    # Should break as soon as we received something.
    i = 0
    while True:
        events = kq.control(None, 1, 1.0) # max_events, timeout
        print(i, events)
        i += 1
        if len(events) &gt;= 1:
            print('We got:', os.read(f, events[0].data))
            break

    # Remove FD from the queue.
    kq.control([select.kevent(f, select.KQ_FILTER_READ, select.KQ_EV_DELETE)], 0)

    # Should never receive anything now even if we write to the pipe.
    i = 0
    while True:
        events = kq.control(None, 1, 1.0) # max_events, timeout
        print(i, events)
        i += 1
        if len(events) &gt;= 1:
            print('We got:', os.read(f, events[0].data))
            break

finally:
    os.close(f)
    os.remove('my.fifo')
</snippet></ROW><ROW><id>18577459</id><snippet>select()</snippet></ROW><ROW><id>18577459</id><snippet>fileno()</snippet></ROW><ROW><id>18577560</id><snippet>foreign_keys</snippet></ROW><ROW><id>18577560</id><snippet>primaryjoin</snippet></ROW><ROW><id>18577560</id><snippet>secondaryjoin</snippet></ROW><ROW><id>18577560</id><snippet>next_nodes = relationship('Node',
    secondary=node_connector,
    primaryjoin=handle==node_connector.c.to_node_handle,
    secondaryjoin=handle==node_connector.c.from_node_handle,
    backref="previous_nodes",
    )
</snippet></ROW><ROW><id>18577560</id><snippet>node_b</snippet></ROW><ROW><id>18577560</id><snippet>node_c</snippet></ROW><ROW><id>18577560</id><snippet>node_a</snippet></ROW><ROW><id>18577560</id><snippet>commit</snippet></ROW><ROW><id>18577596</id><snippet>source</snippet></ROW><ROW><id>18577596</id><snippet>source</snippet></ROW><ROW><id>18577596</id><snippet>import</snippet></ROW><ROW><id>18577602</id><snippet>src = {
    'corp': 'http://www.youtube.com/embed/0lrqEGlu0Fo',
    'uk': 'http://www.youtube.com/embed/30MfCTLhdZ4',
}

followers = {
    'corp': 'uk', 
    'uk': 'corp',
}

return {
    'opener': {'lookup': 'opener', 'src': src[opener]},
    'follower': {'lookup': 'follower', 'src': src[followers[opener]]},
}
</snippet></ROW><ROW><id>18577835</id><snippet>from stem import CircStatus
from stem.control import Controller

with Controller.from_port() as controller:
  controller.authenticate()

  for circ in controller.get_circuits():
    if circ.status != CircStatus.BUILT:
      continue  # skip circuits that aren't yet usable

    entry_fingerprint = circ.path[0][0]
    entry_descriptor = controller.get_network_status(entry_fingerprint, None)

    if entry_descriptor:
      print "Circuit %s starts with %s" % (circ.id, entry_descriptor.address)
    else:
      print "Unable to determine the address belonging to circuit %s" % circ.id
</snippet></ROW><ROW><id>18577835</id><snippet>atagar@morrigan:~/Desktop/stem$ python example.py 
Circiut 15 starts with 209.222.8.196
Circiut 7 starts with 209.222.8.196
</snippet></ROW><ROW><id>18578098</id><snippet>media = MediaFileUpload('image.png', mimetype='image/png', chunksize=1000, resumable=True)
request = drive.files().update(id='fileId', media_body=media)

response = None
while response is None:
  status, response = request.next_chunk()
  if status:
    print status.progress()
</snippet></ROW><ROW><id>18578210</id><snippet>.get()</snippet></ROW><ROW><id>18578210</id><snippet>if 'Dict4' in Dict1.get('Dict2', {}).get('Dict3', {}):
    print "Yes"
</snippet></ROW><ROW><id>18578210</id><snippet>Dict2</snippet></ROW><ROW><id>18578210</id><snippet>.get()</snippet></ROW><ROW><id>18578210</id><snippet>Dict3</snippet></ROW><ROW><id>18578210</id><snippet>in</snippet></ROW><ROW><id>18578210</id><snippet>False</snippet></ROW><ROW><id>18578210</id><snippet>KeyError</snippet></ROW><ROW><id>18578210</id><snippet>try:
    if 'Dict4' in Dict1['Dict2']['Dict3']:
        print "Yes"
except KeyError:
    print "Definitely no"
</snippet></ROW><ROW><id>18578373</id><snippet>  def setUp(self):
    self.client = Client()
    self.username = 'agconti'
    self.email = 'test@test.com'
    self.password = 'test'        
    self.test_user = User.objects.create_user(self.username, self.email, self.password)
    login = self.client.login(username=self.username, password=self.password)
    self.assertEqual(login, True)
</snippet></ROW><ROW><id>18578407</id><snippet>for p in psutil.get_process_list():
  if p.cmdline[0].endswith('pythonw.exe') and p.cmdline[1] == 'myscript.py':
    print p.pid
</snippet></ROW><ROW><id>18578434</id><snippet>def unzip_artifact( local_directory, file_path ):
    fileName, ext = os.path.splitext( file_path )
    if ext == ".zip":
        print 'unzipping file ' + basename(fileName) + ext
        try:
            with zipfile.ZipFile(file_path) as zf:
                for member in zf.infolist():
                        # Path traversal defense copied from
                        # http://hg.python.org/cpython/file/tip/Lib/http/server.py#l789
                        zf.extract(member, local_directory)
        except zipfile.error, e:
            print "Bad zipfile: %s" % (e)
        return
</snippet></ROW><ROW><id>18578434</id><snippet>def unzip_artifact( local_directory, file_path ):
    fileName, ext = os.path.splitext( file_path )
    if ext == ".zip":
        print 'unzipping file ' + basename(fileName) + ext
        try:
            zipfile.ZipFile(file_path).extractall(local_directory)
        except zipfile.error, e:
            print "Bad zipfile: %s" % (e)
        return
</snippet></ROW><ROW><id>18578577</id><snippet>sqlalchemy.orm.relation(*arg, **kw)</snippet></ROW><ROW><id>18578577</id><snippet>relationship()</snippet></ROW><ROW><id>18578725</id><snippet>==</snippet></ROW><ROW><id>18578725</id><snippet>&gt;&gt;&gt; class animal:
...  tiger = "tiger"
...  bear = "bear"
...
&gt;&gt;&gt; animal.tiger
'tiger'
&gt;&gt;&gt; id(animal.tiger)
140052399801616
&gt;&gt;&gt; id('tiger')
140052399801616
&gt;&gt;&gt;
</snippet></ROW><ROW><id>18578725</id><snippet>&gt;&gt;&gt; id(animal.tiger)
140052399801616
&gt;&gt;&gt; a=raw_input()
tiger
&gt;&gt;&gt; id(a)
140052399801664
&gt;&gt;&gt; a==animal.tiger
True
&gt;&gt;&gt; a is animal.tiger
False
</snippet></ROW><ROW><id>18578725</id><snippet>is</snippet></ROW><ROW><id>18579144</id><snippet>update</snippet></ROW><ROW><id>18579144</id><snippet>def update(self):
    self.data1.set(random.randint(1,10))
    self.data1_Var.after(200, self.update)

    self.data2.set(random.randint(1,10))
    self.data2_Var.after(200, self.update)
</snippet></ROW><ROW><id>18579144</id><snippet>.after(200, self.update)</snippet></ROW><ROW><id>18579144</id><snippet>update is called 1x
200 millisecond gap
update is called 1x
200 millisecond gap
update is called 1x
200 millisecond gap
update is called 1x
200 millisecond gap
update is called 1x
200 millisecond gap...
</snippet></ROW><ROW><id>18579144</id><snippet>update is called 1x
200 millisecond gap
update is called 2x
200 millisecond gap
update is called 4x
200 millisecond gap
update is called 8x
200 millisecond gap
update is called 16x
200 millisecond gap...
</snippet></ROW><ROW><id>18579144</id><snippet>update</snippet></ROW><ROW><id>18579144</id><snippet>root.after</snippet></ROW><ROW><id>18579144</id><snippet>update</snippet></ROW><ROW><id>18579144</id><snippet>after</snippet></ROW><ROW><id>18579160</id><snippet>import pandas as pd
areas = pd.DataFrame({'Com':[1,2,3], 'Ind':[4,5,6]})
demand = pd.DataFrame({'Water':[4,3], 
                       'Elec':[8,9]}, index=['Com', 'Ind'])

def multiply_by_demand(series):
    return demand.ix[series.name].apply(lambda x: x*series).stack()
df = areas.apply(multiply_by_demand).unstack(0)
print(df)
</snippet></ROW><ROW><id>18579160</id><snippet>    Com          Ind       
   Elec  Water  Elec  Water
0     8      4    36     12
1    16      8    45     15
2    24     12    54     18
</snippet></ROW><ROW><id>18579160</id><snippet>areas.apply(foo)</snippet></ROW><ROW><id>18579160</id><snippet>foo</snippet></ROW><ROW><id>18579160</id><snippet>areas</snippet></ROW><ROW><id>18579160</id><snippet>def foo(series):
    print(series)

In [226]: areas.apply(foo)
0    1
1    2
2    3
Name: Com, dtype: int64
0    4
1    5
2    6
Name: Ind, dtype: int64
</snippet></ROW><ROW><id>18579160</id><snippet>series</snippet></ROW><ROW><id>18579160</id><snippet>In [230]: series = areas['Com']

In [231]: series
Out[231]: 
0    1
1    2
2    3
Name: Com, dtype: int64
</snippet></ROW><ROW><id>18579160</id><snippet>In [229]: demand.ix['Com'].apply(lambda x: x*series)
Out[229]: 
       0   1   2
Elec   8  16  24
Water  4   8  12
</snippet></ROW><ROW><id>18579160</id><snippet>apply</snippet></ROW><ROW><id>18579160</id><snippet>Series</snippet></ROW><ROW><id>18579160</id><snippet>DataFrame</snippet></ROW><ROW><id>18579160</id><snippet>DataFrame</snippet></ROW><ROW><id>18579160</id><snippet>Series</snippet></ROW><ROW><id>18579160</id><snippet>stack</snippet></ROW><ROW><id>18579160</id><snippet>stack</snippet></ROW><ROW><id>18579160</id><snippet>In [232]: demand.ix['Com'].apply(lambda x: x*areas['Com']).stack()
Out[232]: 
Elec   0     8
       1    16
       2    24
Water  0     4
       1     8
       2    12
dtype: int64
</snippet></ROW><ROW><id>18579160</id><snippet>multiply_by_demand</snippet></ROW><ROW><id>18579160</id><snippet>In [235]: areas.apply(multiply_by_demand)
Out[235]: 
         Com  Ind
Elec  0    8   36
      1   16   45
      2   24   54
Water 0    4   12
      1    8   15
      2   12   18
</snippet></ROW><ROW><id>18579160</id><snippet>unstack</snippet></ROW><ROW><id>18579160</id><snippet>In [236]: areas.apply(multiply_by_demand).unstack(0)
Out[236]: 
    Com          Ind       
   Elec  Water  Elec  Water
0     8      4    36     12
1    16      8    45     15
2    24     12    54     18
</snippet></ROW><ROW><id>18579160</id><snippet>pivot_table</snippet></ROW><ROW><id>18579160</id><snippet>import pandas as pd
areas = pd.DataFrame({'Com':[1,2,3], 'Ind':[4,5,6]})
demand = pd.DataFrame({'Water':[4,3], 
                       'Elec':[8,9]}, index=['Com', 'Ind'])

areas = pd.DataFrame({'area': areas.stack()})
areas.index.names = ['Edge', 'Type']
both = areas.reset_index(1).join(demand, on='Type')
both['Elec'] = both['Elec'] * both['area']
both['Water'] = both['Water'] * both['area']
both.reset_index(inplace=True)
both = both.pivot_table(values=['Elec', 'Water'], rows='Edge', cols='Type')
both = both.reorder_levels([1,0], axis=1)
both = both.reindex(columns=both.columns[[0,2,1,3]])
print(both)
</snippet></ROW><ROW><id>18579327</id><snippet>\1</snippet></ROW><ROW><id>18579327</id><snippet>r"..."</snippet></ROW><ROW><id>18579327</id><snippet>pattern = re.compile(r" ([a-zA-Z]+) \1 ")
</snippet></ROW><ROW><id>18579447</id><snippet>{% url user.registration_activate activation_key %}</snippet></ROW><ROW><id>18579447</id><snippet>ActivationView</snippet></ROW><ROW><id>18579447</id><snippet>ActivationView</snippet></ROW><ROW><id>18579447</id><snippet>url(r'^activate/(?P&lt;activation_key&gt;\w+)/$', ActivationView.as_view(), name='registration_activate'),</snippet></ROW><ROW><id>18579850</id><snippet>python "D:\\Folder name\\Project name\\src\\module name.py"
</snippet></ROW><ROW><id>18579850</id><snippet>python "D:/Folder name/Project name/src/module name.py"
</snippet></ROW><ROW><id>18579850</id><snippet>\</snippet></ROW><ROW><id>18579850</id><snippet>\\</snippet></ROW><ROW><id>18579966</id><snippet>reindex</snippet></ROW><ROW><id>18579966</id><snippet>In [13]: cols = list('xacybz')

In [14]: df = DataFrame(randn(10, len(cols)), columns=cols)

In [15]: preordered = list('xyz')

In [16]: new_order = preordered + list(df.columns - preordered)

In [17]: new_order
Out[17]: ['x', 'y', 'z', 'a', 'b', 'c']

In [18]: df.reindex(columns=new_order)
Out[18]:
       x      y      z      a      b      c
0 -0.012  0.949 -0.276 -0.074 -0.054  0.541
1  0.994  1.059 -0.158  0.267 -0.590  0.263
2 -0.632 -0.015 -0.097 -1.904 -1.351 -1.105
3 -0.730 -0.684 -0.226  2.664 -0.385  1.727
4  0.891 -0.602  3.426  1.529  0.853 -0.451
5 -0.471  0.689  1.170 -0.635 -0.663  0.180
6  1.536  0.793  1.461  0.723 -0.795 -1.094
7  0.417  0.787  1.676  1.563  1.412  0.398
8  0.378  1.436 -0.024  0.293  0.655 -0.113
9 -0.159 -0.416 -1.526  0.633 -0.780 -0.613
</snippet></ROW><ROW><id>18579966</id><snippet>preorder</snippet></ROW><ROW><id>18579966</id><snippet>In [25]: shuffle(df.columns.values)

In [26]: df
Out[26]:
       b      a      z      c      x      y
0 -0.054 -0.074 -0.276  0.541 -0.012  0.949
1 -0.590  0.267 -0.158  0.263  0.994  1.059
2 -1.351 -1.904 -0.097 -1.105 -0.632 -0.015
3 -0.385  2.664 -0.226  1.727 -0.730 -0.684
4  0.853  1.529  3.426 -0.451  0.891 -0.602
5 -0.663 -0.635  1.170  0.180 -0.471  0.689
6 -0.795  0.723  1.461 -1.094  1.536  0.793
7  1.412  1.563  1.676  0.398  0.417  0.787
8  0.655  0.293 -0.024 -0.113  0.378  1.436
9 -0.780  0.633 -1.526 -0.613 -0.159 -0.416

In [27]: new_order = preordered + list(df.columns - preordered)

In [28]: new_order
Out[28]: ['x', 'y', 'z', 'a', 'b', 'c']
</snippet></ROW><ROW><id>18579995</id><snippet>paste</snippet></ROW><ROW><id>18579995</id><snippet>paste - - - &lt; file | awk '{print $2, $3, "=", $1, "times"}'
</snippet></ROW><ROW><id>18579997</id><snippet>curve_fit</snippet></ROW><ROW><id>18579997</id><snippet>position</snippet></ROW><ROW><id>18579997</id><snippet>&gt;&gt;&gt; x = np.arange(93,98)
&gt;&gt;&gt; y = np.arange(7,12)
&gt;&gt;&gt; position = np.transpose([np.tile(x, len(x)), np.repeat(y, len(y))])
&gt;&gt;&gt; position
array([[93,  7],
       [94,  7],
       [95,  7],
       [96,  7],
       [97,  7],
       [93,  8],
       [94,  8],
       [95,  8],
       [96,  8],
       [97,  8],
       [93,  9],
       [94,  9],
       [95,  9],
       [96,  9],
       [97,  9],
       [93, 10],
       [94, 10],
       [95, 10],
       [96, 10],
       [97, 10],
       [93, 11],
       [94, 11],
       [95, 11],
       [96, 11],
       [97, 11]])
</snippet></ROW><ROW><id>18580058</id><snippet>collections.Counter()</snippet></ROW><ROW><id>18580058</id><snippet>from collections import Counter

acount = Counter(a)
bcount = Counter(b)
result = list((acount - bcount).elements())
</snippet></ROW><ROW><id>18580058</id><snippet>&gt;&gt;&gt; from collections import Counter
&gt;&gt;&gt; a = ['a', 'a', 'b', 'c', 'c', 'c', 'd', 'e', 'f']
&gt;&gt;&gt; b = ['a', 'b', 'c', 'd', 'e', 'f']
&gt;&gt;&gt; Counter(a) - Counter(b)
Counter({'c': 2, 'a': 1})
&gt;&gt;&gt; list((Counter(a) - Counter(b)).elements())
['a', 'c', 'c']
</snippet></ROW><ROW><id>18580058</id><snippet>Counter()</snippet></ROW><ROW><id>18580058</id><snippet>Counter.elements()</snippet></ROW><ROW><id>18580074</id><snippet>object_hook</snippet></ROW><ROW><id>18580074</id><snippet>id</snippet></ROW><ROW><id>18580074</id><snippet>name</snippet></ROW><ROW><id>18580074</id><snippet>object_hook</snippet></ROW><ROW><id>18580074</id><snippet>object_decoder</snippet></ROW><ROW><id>18580074</id><snippet>{u'name': u'bedroom'}
{u'name': u'kitchen'}
{u'1': None, u'2': None}
None
</snippet></ROW><ROW><id>18580074</id><snippet>object_decoder</snippet></ROW><ROW><id>18580074</id><snippet>Light</snippet></ROW><ROW><id>18580074</id><snippet>import json


class Light:
    def __init__(self, id, name):
        self.id = id
        self.name = name


response = '{"1": {"name": "bedroom"}, "2": {"name": "kitchen"}}'


class Decoder(json.JSONDecoder):
    def decode(self, s):
        obj = super(Decoder, self).decode(s)
        return [Light(id=k, name=v['name']) for k, v in obj.iteritems()]


lights = json.loads(response, cls=Decoder)
print lights  # prints [&lt;__main__.Light instance at 0x9c3b50c&gt;, &lt;__main__.Light instance at 0x9c3b56c&gt;]
print [light.__dict__ for light in lights]  # prints [{'id': u'1', 'name': u'bedroom'}, {'id': u'2', 'name': u'kitchen'}]
</snippet></ROW><ROW><id>18580074</id><snippet>json.loads()</snippet></ROW><ROW><id>18580270</id><snippet>*</snippet></ROW><ROW><id>18580270</id><snippet>django.db.models.CharField</snippet></ROW><ROW><id>18580270</id><snippet>django.forms.CharField</snippet></ROW><ROW><id>18580270</id><snippet>&gt;&gt;&gt; from django.db.models import *
&gt;&gt;&gt; CharField 
&lt;class 'django.db.models.fields.CharField'&gt;
&gt;&gt;&gt; from django.forms import *
&gt;&gt;&gt; CharField 
&lt;class 'django.forms.fields.CharField'&gt;
</snippet></ROW><ROW><id>18580270</id><snippet>name = CharField(max_length=60)</snippet></ROW><ROW><id>18580270</id><snippet>forms</snippet></ROW><ROW><id>18580270</id><snippet>from django.db import models
from django.contrib import admin


class Stock(models.Model):
    name = models.CharField(max_length=60)

    class Meta:
        ordering = ["name"]

    def __unicode__(self):
        return self.name

admin.site.register(Stock)
</snippet></ROW><ROW><id>18580472</id><snippet>tweepy</snippet></ROW><ROW><id>18580472</id><snippet>pip install --upgrade tweepy
</snippet></ROW><ROW><id>18580472</id><snippet>git clone https://github.com/tweepy/tweepy.git
cd tweepy
python setup.py install
</snippet></ROW><ROW><id>18580472</id><snippet>2.1</snippet></ROW><ROW><id>18580496</id><snippet>Series.quantile()</snippet></ROW><ROW><id>18580496</id><snippet>In [48]: cols = list('abc')

In [49]: df = DataFrame(randn(10, len(cols)), columns=cols)

In [50]: df.a.quantile(0.95)
Out[50]: 1.5776961953820687
</snippet></ROW><ROW><id>18580496</id><snippet>df</snippet></ROW><ROW><id>18580496</id><snippet>df.a</snippet></ROW><ROW><id>18580496</id><snippet>In [72]: df[df.a &lt; df.a.quantile(.95)]
Out[72]:
       a      b      c
0 -1.044 -0.247 -1.149
2  0.395  0.591  0.764
3 -0.564 -2.059  0.232
4 -0.707 -0.736 -1.345
5  0.978 -0.099  0.521
6 -0.974  0.272 -0.649
7  1.228  0.619 -0.849
8 -0.170  0.458 -0.515
9  1.465  1.019  0.966
</snippet></ROW><ROW><id>18580709</id><snippet>np.fromiter</snippet></ROW><ROW><id>18580709</id><snippet>A = numpy.fromiter(cursor.fetchall(), count=-1,
                   dtype=[('', numpy.uint8)]*57)
</snippet></ROW><ROW><id>18580709</id><snippet>A = A.view(numpy.uint8).reshape(-1, 57)
</snippet></ROW><ROW><id>18580750</id><snippet>updt</snippet></ROW><ROW><id>18580750</id><snippet>updt</snippet></ROW><ROW><id>18580750</id><snippet>updt</snippet></ROW><ROW><id>18580750</id><snippet>move</snippet></ROW><ROW><id>18580750</id><snippet>def updt():
    lbl.configure (text = gravitation(oval1, oval2)) 

def move (ov, lr, tb): # function to move the ball
    coo = can.coords(ov)
    coo[0] = coo[0] + lr
    coo[1] = coo[1] + tb
    coo[2] = coo[0]+30
    coo[3] = coo[1]+30
    can.coords(ov, *coo)
    updt()
</snippet></ROW><ROW><id>18580766</id><snippet>django.contrib.gis.geos</snippet></ROW><ROW><id>18580772</id><snippet>()</snippet></ROW><ROW><id>18580772</id><snippet>class Root():

    def header(self):
        return '''&lt;html&gt;
                  &lt;body&gt;'''

    def footer(self):
        return '''&lt;/body&gt;
                  &lt;/html&gt;'''


a_root = Root()
a_string = a_root.header() + a_root.footer()
print(a_string)
</snippet></ROW><ROW><id>18580815</id><snippet>@validates('started_at', 'stopped_at')
def do_validation(self, key, field):
    return field
</snippet></ROW><ROW><id>18581109</id><snippet>size</snippet></ROW><ROW><id>18581109</id><snippet>A[1]</snippet></ROW><ROW><id>18581109</id><snippet>mode</snippet></ROW><ROW><id>18581109</id><snippet>result</snippet></ROW><ROW><id>18581109</id><snippet>result = self._array[self.coordinates] == buffer.max()</snippet></ROW><ROW><id>18581109</id><snippet>a = arange(12).reshape(3,4)

class fnc_class:
    def __init__(self, _array):
        # store the shape:
        self.shape = _array.shape
        self._array = _array
        # initialize the coordinates:
        self.coordinates = [0] * len(self.shape)

    def filter(self, buffer):
        result = self._array[tuple(self.coordinates)] == buffer.max()
        print self.coordinates
        # calculate the next coordinates:
        axes = range(len(self.shape))
        axes.reverse()
        for jj in axes:
            if self.coordinates[jj] &lt; self.shape[jj] - 1:
                self.coordinates[jj] += 1
                break
            else:
                self.coordinates[jj] = 0
        return result

fnc = fnc_class(a)
generic_filter(a, fnc.filter, footprint = [[1, 0], [0, 1]])
</snippet></ROW><ROW><id>18581168</id><snippet>import webapp2
from google.appengine.ext import ndb

def parent_key():
    return ndb.Key('My','Entities')

class SmallModel(ndb.Model):
    n = ndb.IntegerProperty(required=True)
    stamp = ndb.DateTimeProperty(auto_now_add=True)

class MainHandler(webapp2.RequestHandler):
    def get(self):
        self.response.write('Hello world. Simple form. &lt;form method="post"&gt;&lt;input name="n" type="number"&gt;&lt;input type="submit"&gt;&lt;/form&gt;')
    def post(self):
        entity = SmallModel(parent=parent_key(),n=int(self.request.get('n')))
        entity.put()
        self.redirect('/list')

class List(webapp2.RequestHandler):
    def get(self):
        self.response.out.write("here's a list:")
        entities = SmallModel.query(ancestor=parent_key())
        for entity in entities.iter():
            self.response.out.write(" %s " % entity.n)
        self.response.out.write("...end list.")

app = webapp2.WSGIApplication([
    ('/', MainHandler),
    ('/list',List)
], debug=True)
</snippet></ROW><ROW><id>18581231</id><snippet>&gt;&gt;&gt; s = "AATGCAGACCTTACGTAA"
&gt;&gt;&gt; s[1]
'A'
&gt;&gt;&gt; s[-2]
'A'
&gt;&gt;&gt; start = 1
&gt;&gt;&gt; stop = -2
&gt;&gt;&gt; s[start: stop+1]
'ATGCAGACCTTACGTA'
</snippet></ROW><ROW><id>18581350</id><snippet>urls = [ user['url'] for user in loadmain ]
</snippet></ROW><ROW><id>18581494</id><snippet>which</snippet></ROW><ROW><id>18581494</id><snippet>$ which python
/usr/bin/python
</snippet></ROW><ROW><id>18581494</id><snippet>usr/bin/python</snippet></ROW><ROW><id>18581549</id><snippet>esky.bdist_esky.Exectuable</snippet></ROW><ROW><id>18581600</id><snippet>label</snippet></ROW><ROW><id>18581600</id><snippet>Line2D</snippet></ROW><ROW><id>18581600</id><snippet>In [40]: import pandas.util.testing as tm

In [41]: df = DataFrame(randn(10, 5))

In [42]: df
Out[42]:
       0      1      2      3      4
0 -1.225  0.144 -0.539  0.765 -0.269
1 -0.261  0.830 -0.008  2.096  1.123
2 -0.887 -1.272 -0.232  0.926  0.760
3 -0.241 -1.617 -0.360  0.333 -1.676
4  0.845 -1.661  1.405  1.444 -0.064
5 -2.013 -0.906 -1.854 -0.951 -1.117
6 -1.442 -0.400 -0.455  1.163  0.688
7 -0.960  1.451 -0.106 -0.244  0.091
8  0.525  1.551 -0.644 -1.248 -1.080
9 -1.252 -1.085  0.795 -0.310 -0.072

In [43]: ax = df.plot(legend=False)                                                                       

In [44]: lines = ax.get_lines()

In [45]: for line in lines:
   ....:     line.set_label(tm.rands(10))
   ....:

In [46]: legend()
Out[46]: &lt;matplotlib.legend.Legend at 0x8c946d0&gt;
</snippet></ROW><ROW><id>18581600</id><snippet># do this outside of the first loop
lines = ax2.get_lines()
for line, subsm in zip(lines, subsl):
    line.set_label(subsm)

ax2.legend()
</snippet></ROW><ROW><id>18581672</id><snippet>import csv

csv_reader = csv.reader(open('data.csv', 'rb'))

# Read first two rows of field text out as a prefix.                            
prefix = ' '.join(csv_reader.next()[2].strip() for i in range(2))

def collapsed_row_iter():
    depth_value_list = []
    for (_, field_id, field_text, _) in csv_reader:
        # Count number of leading &lt;SPACE&gt; chars to determine depth.             
        pre_strip_text_len = len(field_text)
        field_text = field_text.lstrip()
        depth = pre_strip_text_len - len(field_text)

        depth_value_list_len = len(depth_value_list)
        if depth == depth_value_list_len + 1:
            # Append a new depth value.                                            
            depth_value_list.append(field_text.rstrip())

        if depth &lt;= depth_value_list_len:
            # Truncate list to depth, append new value.                         
            del depth_value_list[depth:]
            depth_value_list.append(field_text.rstrip())

        else:
            # Depth value is greater than current_depth + 1                     
            raise ValueError

        # Only yield the row if field_id value is non-NULL.                     
        if field_id:
            yield (field_id, '%s %s' % (prefix, ' '.join(depth_value_list)))

# Get CSV writer object, write the header.                                      
csv_writer = csv.writer(open('collapsed.csv', 'wb'))
csv_writer.writerow(['FIELD', 'TEXT'])

# Iterate over collapsed rows, writing each to the output CSV.                  
for (field_id, collapsed_text) in collapsed_row_iter():
    csv_writer.writerow([field_id, collapsed_text])
</snippet></ROW><ROW><id>18581672</id><snippet>FIELD,TEXT
P0190001,RACE OF HOUSEHOLDER BY HOUSEHOLD TYPE (8) Universe: Households White Family Households: Married-couple family: With related children
P0190002,RACE OF HOUSEHOLDER BY HOUSEHOLD TYPE (8) Universe: Households White Family Households: Married-couple family: No related children
P0190003,"RACE OF HOUSEHOLDER BY HOUSEHOLD TYPE (8) Universe: Households White Family Households: Other family: Male householder, no wife present: With related children"
P0190004,"RACE OF HOUSEHOLDER BY HOUSEHOLD TYPE (8) Universe: Households White Family Households: Other family: Male householder, no wife present: No related children"
</snippet></ROW><ROW><id>18581734</id><snippet>df.loc[(df.l == 'a') &amp; (df.n == 1), 'v'] = 'val1'
df.loc[(df.l == 'a') &amp; (df.n == 2), 'v'] = 'val2'
df.loc[(df.l == 'b') &amp; (df.n == 1), 'v'] = 'val3'
df.loc[(df.l == 'b') &amp; (df.n == 2), 'v'] = 'val4'

In [11]: df
Out[11]:
   g  l  n     v
0  0  a  1  val1
1  0  b  2  val4
2  0  a  1  val1
3  0  c  2     y
4  0  b  2  val4
5  1  b  1  val3
6  1  a  2  val2
7  1  b  1  val3
8  1  b  1  val3
9  1  a  2  val2
</snippet></ROW><ROW><id>18581734</id><snippet>from itertools import product
lhs_values, rhs_values = ['a', 'b'], [1, 2]
for i, (lhs, rhs) in enumerate(product(lhs_values, rhs_values)):
    df.loc[(df.l == lhs) &amp; (df.n == rhs), 'v'] = 'val%s' % (i + 1)
</snippet></ROW><ROW><id>18581734</id><snippet>for i, (lhs, rhs) in enumerate(product(df.l.unique(), df.n.unique())):
    df.loc[(df.l == lhs) &amp; (df.n == rhs), 'v'] = 'val%s' % (i + 1)

In [21]: df
Out[21]:
   g  l  n     v
0  0  a  1  val1
1  0  b  2  val4
2  0  a  1  val1
3  0  c  2  val6
4  0  b  2  val4
5  1  b  1  val3
6  1  a  2  val2
7  1  b  1  val3
8  1  b  1  val3
9  1  a  2  val2
</snippet></ROW><ROW><id>18581745</id><snippet>lxml.etree</snippet></ROW><ROW><id>18581745</id><snippet>b</snippet></ROW><ROW><id>18581745</id><snippet>utf-8</snippet></ROW><ROW><id>18581745</id><snippet>f = open('uzivatelska_prirucka.xml', 'r', encoding='utf-8')
fo = open('try.xml', 'w', 1, encoding='utf-8')
</snippet></ROW><ROW><id>18581745</id><snippet>if b.find('r'):  
</snippet></ROW><ROW><id>18581745</id><snippet>if not (b.find('r') is None):  
</snippet></ROW><ROW><id>18581745</id><snippet>None</snippet></ROW><ROW><id>18581745</id><snippet>False</snippet></ROW><ROW><id>18581745</id><snippet>find()</snippet></ROW><ROW><id>18581745</id><snippet>None</snippet></ROW><ROW><id>18581745</id><snippet>$ python3.3
Python 3.3.1 (default, Apr 17 2013, 22:30:32) 
[GCC 4.7.3] on linux
Type "help", "copyright", "credits" or "license" for more information.
&gt;&gt;&gt; print(1) if None else print(0)
0
&gt;&gt;&gt; print(1) if not None else print(0)
1
</snippet></ROW><ROW><id>18581753</id><snippet>(key, listdata)</snippet></ROW><ROW><id>18581753</id><snippet>(key, index, listitem)</snippet></ROW><ROW><id>18581753</id><snippet>(key, index)</snippet></ROW><ROW><id>18581753</id><snippet>key</snippet></ROW><ROW><id>18581753</id><snippet>index=null</snippet></ROW><ROW><id>18581753</id><snippet>str/eval</snippet></ROW><ROW><id>18581753</id><snippet>json.dumps</snippet></ROW><ROW><id>18581753</id><snippet>json.loads</snippet></ROW><ROW><id>18581786</id><snippet>a = np.array([1, 0, 2, 1])
z = np.zeros(12, dtype=int).reshape(4,3)
z[np.arange(a.size), a] = 1
</snippet></ROW><ROW><id>18581822</id><snippet>xrange</snippet></ROW><ROW><id>18581822</id><snippet>range</snippet></ROW><ROW><id>18581822</id><snippet>tests = [test(i == int(sys.argv[1])) for i in xrange(5)]
</snippet></ROW><ROW><id>18581822</id><snippet>int</snippet></ROW><ROW><id>18581886</id><snippet>myTable-&gt;horizontalHeader()-&gt;setStretchLastSection(true);
</snippet></ROW><ROW><id>18582144</id><snippet>string.lower</snippet></ROW><ROW><id>18582144</id><snippet>()</snippet></ROW><ROW><id>18582144</id><snippet>&gt;&gt;&gt; letter_3 = raw_input("What is the third letter that you know?").lower
What is the third letter that you know?a
&gt;&gt;&gt; letter_3
&lt;built-in method lower of str object at 0x104e514e0&gt;

&gt;&gt;&gt; letter_3 = raw_input("What is the third letter that you know?").lower()
What is the third letter that you know?a
&gt;&gt;&gt; letter_3
'a'
</snippet></ROW><ROW><id>18582144</id><snippet>.lower</snippet></ROW><ROW><id>18582144</id><snippet>for i in fin</snippet></ROW><ROW><id>18582144</id><snippet>\n</snippet></ROW><ROW><id>18582146</id><snippet>template_tuple = (0, 0, 'X', 0, 'Y', 'Z')
template_tuple_len = len(template_tuple)

def extract_normalized_fields_from_row(row):
    split_row = row.strip().split('\t')
    return [v if len(v) else template_tuple[i] for (i, v) in enumerate(
            split_row + [''] * (template_tuple_len - len(split_row)))]

for row in (
    '\t'.join(('1', '2', '3', '4', '5', '6')),
    '\t'.join(('1', '', '3', '4', '5', '6')),
    '\t'.join(('1', '2', '3', '4'))
    ):
    print extract_normalized_fields_from_row(row)
</snippet></ROW><ROW><id>18582146</id><snippet>split_row + [''] * (template_tuple_len - len(split_row))
</snippet></ROW><ROW><id>18582146</id><snippet>['1', '2', '3', '4', '5', '6']
['1', 0, '3', '4', '5', '6']
['1', '2', '3', '4', 'Y', 'Z']
</snippet></ROW><ROW><id>18582146</id><snippet>template_tuple = (0, 0, 'X', 0, 'Y', 'Z')
template_tuple_len = len(template_tuple)

for row in (
    '\t'.join(('1', '2', '3', '4', '5', '6')),
    '\t'.join(('1', '', '3', '4', '5', '6')),
    '\t'.join(('1', '2', '3', '4'))
    ):
    print [v if len(v) else template_tuple[i] for split_row in
           (row.strip().split('\t'),) for (i, v) in enumerate(
            split_row + [''] * (template_tuple_len - len(split_row)))]
</snippet></ROW><ROW><id>18582182</id><snippet>x[(exp1, exp2, ..., expN)]</snippet></ROW><ROW><id>18582182</id><snippet>x[exp1, exp2, ..., expN]</snippet></ROW><ROW><id>18582182</id><snippet>A[1,1]</snippet></ROW><ROW><id>18582182</id><snippet>ndarray</snippet></ROW><ROW><id>18582228</id><snippet>&gt;&gt;&gt; x = numpy.array([[0, 1],
...                  [3, 2]])
&gt;&gt;&gt; x.argmin(axis=0)
array([0, 0])
&gt;&gt;&gt; x.argmin(axis=1)
array([0, 1])
</snippet></ROW><ROW><id>18582228</id><snippet>numpy.where(x == x.min())
</snippet></ROW><ROW><id>18582629</id><snippet>d = {'0': ['Pyrobaculum'], '1': ['Mycobacterium', 'Mycobacterium', 'Mycobacterium', 'Mycobacterium', 'Mycobacterium', 'Mycobacterium', 'Mycobacterium', 'Mycobacterium', 'Mycobacterium', 'Mycobacterium', 'Mycobacterium', 'Mycobacterium', 'Mycobacterium', 'Mycobacterium'], '3': ['Thermoanaerobacter', 'Thermoanaerobacter'], '2': ['Helicobacter', 'Mycobacterium'], '5': ['Thermoanaerobacter', 'Thermoanaerobacter'], '4': ['Helicobacter'], '7': ['Syntrophomonas'], '6': ['Gelria'], '9': ['Campylobacter', 'Campylobacter'], '8': ['Syntrophomonas'], '10': ['Desulfitobacterium', 'Mycobacterium']}

# Iterate through and find out how many times each key occurs
vals = {}                       # A dictonary to store how often each value occurs.
for i in d.values():
  for j in set(i):              # Convert to a set to remove duplicates
    vals[j] = 1 + vals.get(j,0) # If we've seen this value iterate the count
                                # Otherwise we get the default of 0 and iterate it
print vals

# Iterate through each possible freqency and find how many values have that count.
counts = {}                     # A dictonary to store the final frequencies.
# We will iterate from 0 (which is a valid count) to the maximum count
for i in range(0,max(vals.values())+1):
    # Find all values that have the current frequency, count them
    #and add them to the frequency dictionary
    counts[i] = len([x for x in vals.values() if x == i])

for key in sorted(counts.keys()):
  if counts[key] &gt; 0:
     print key,":",counts[key]
</snippet></ROW><ROW><id>18582634</id><snippet>Key(encoded=None)</snippet></ROW><ROW><id>18582634</id><snippet>k = Key(uid)
m = Member.get(k)
</snippet></ROW><ROW><id>18582634</id><snippet>m = Key(urlsafe=uid).get()
</snippet></ROW><ROW><id>18582882</id><snippet>import ast

actual_list = ast.literal_eval(your_list[0])
</snippet></ROW><ROW><id>18583054</id><snippet>from google.appengine.ext import ndb
import json

class ExtendedJsonProperty(ndb.BlobProperty):
  def _to_base_type(self, value):
    return json.dumps(value) 

  def _from_base_type(self, value):
    return value
    # originally return json.loads(value)

class DataForBrowser(ndb.Model):
    json = ExtendedJsonProperty()


data = {'a': 'A'}
data_for_browser = DataForBrowser()
data_for_browser.json = data
print type(data_for_browser.json)  # returns &lt;type 'dict'&gt;
data_for_browser.put()
print type(data_for_browser.json) # returns &lt;type 'str'&gt;
data_for_browser_retrieverd = DataForBrowser.query().get()
print type(data_for_browser_retrieverd.json) # returns &lt;type 'str'&gt;
</snippet></ROW><ROW><id>18583054</id><snippet>@property
def json_as_json(self):
  return json.dumps(self.json)
</snippet></ROW><ROW><id>18583208</id><snippet>An object structure is represented as a pair of curly brackets
surrounding zero or more name/value pairs (or members).  A name is a
string.  A single colon comes after each name, separating the name
from the value.  A single comma separates a value from a following
name.  The names within an object SHOULD be unique.

   object = begin-object [ member *( value-separator member ) ]
   end-object

   member = string name-separator value
</snippet></ROW><ROW><id>18583208</id><snippet>&gt;&gt;&gt; import pickle
&gt;&gt;&gt; original_dict = {0: {1: 2}}
&gt;&gt;&gt; original_dict == pickle.loads((pickle.dumps(original_dict)))
True
</snippet></ROW><ROW><id>18583227</id><snippet>split</snippet></ROW><ROW><id>18583227</id><snippet>math.fsum</snippet></ROW><ROW><id>18583227</id><snippet>sum</snippet></ROW><ROW><id>18583227</id><snippet>import math
# Use input() instead of raw_input() in 3.x
s = raw_input("Input numbers, delimited by spaces: ")
numbers = [float(n) for n in s.split()]
print("Average:", math.fsum(numbers) / len(numbers))
</snippet></ROW><ROW><id>18583234</id><snippet>np.sum</snippet></ROW><ROW><id>18583234</id><snippet>def sum_chunk(x, chunk_size, axis=-1):
    shape = x.shape
    if axis &lt; 0:
        axis += x.ndim
    shape = shape[:axis] + (-1, chunk_size) + shape[axis+1:]
    x = x.reshape(shape)
    return x.sum(axis=axis+1)

&gt;&gt;&gt; a = np.arange(24).reshape(4, 6)
&gt;&gt;&gt; a
array([[ 0,  1,  2,  3,  4,  5],
       [ 6,  7,  8,  9, 10, 11],
       [12, 13, 14, 15, 16, 17],
       [18, 19, 20, 21, 22, 23]])
&gt;&gt;&gt; sum_chunk(a, 2)
array([[ 1,  5,  9],
       [13, 17, 21],
       [25, 29, 33],
       [37, 41, 45]])
&gt;&gt;&gt; sum_chunk(a, 2, axis=0)
array([[ 6,  8, 10, 12, 14, 16],
       [30, 32, 34, 36, 38, 40]])
</snippet></ROW><ROW><id>18583456</id><snippet>&gt;&gt;&gt; A = 7
&gt;&gt;&gt; B = 7
&gt;&gt;&gt; C = 9.899
&gt;&gt;&gt; from math import acos, degrees
&gt;&gt;&gt; degrees(acos((A * A + B * B - C * C)/(2.0 * B * C)))
89.99594878743945
</snippet></ROW><ROW><id>18583456</id><snippet>&gt;&gt;&gt; C=9.899494936611665
&gt;&gt;&gt; degrees(acos((A * A + B * B - C * C)/(2.0 * B * C)))
90.0
</snippet></ROW><ROW><id>18583494</id><snippet>set</snippet></ROW><ROW><id>18583494</id><snippet>&gt;&gt;&gt; lst = [
...     ['24', 'john', 'july', 'email@gmail.com'],
...     ['12', 'alice', 'auguts', 'email@hotmail.com'],
...     ['48', 'john', 'september', 'email@outlook.com'],
... ]
&gt;&gt;&gt; 
&gt;&gt;&gt; seen = set()
&gt;&gt;&gt; result = []
&gt;&gt;&gt; for item in lst:
...     name = item[1]
...     if name not in seen:
...         seen.add(name)
...         result.append(item)
... 
&gt;&gt;&gt; result
[['24', 'john', 'july', 'email@gmail.com'],
 ['12', 'alice', 'auguts', 'email@hotmail.com']]
</snippet></ROW><ROW><id>18583494</id><snippet>list</snippet></ROW><ROW><id>18583494</id><snippet>list</snippet></ROW><ROW><id>18583494</id><snippet>&gt;&gt;&gt; seen = set()
&gt;&gt;&gt; [x for x in lst if (x[1] not in seen, seen.add(x[1]))[0]]
[['24', 'john', 'july', 'email@gmail.com'],
 ['12', 'alice', 'auguts', 'email@hotmail.com']]
</snippet></ROW><ROW><id>18583637</id><snippet>w = read('ggg.wav')
a = w[1]  # already an array
l=len(a)
b=(float(l)/w[0])
c=b*1000
d=int(c/40)
e=l/d
k = a[:e*d].reshape(d,e)
print k.shape
print k
print ''
k = [[] for i in range(d)]  # initialize python list
for i in range(0,d):
    k[i] = a[(i*e)+1:((i+1)*e)]
for i in k:
    print i
# or
k = np.zeros((d,e-1),dtype='int') # initialize np.array
for i in range(d):
    k[i,:] = a[(i*e)+1:((i+1)*e)]
print k
</snippet></ROW><ROW><id>18583637</id><snippet>w[1]</snippet></ROW><ROW><id>18583637</id><snippet>a</snippet></ROW><ROW><id>18583637</id><snippet>e</snippet></ROW><ROW><id>18583637</id><snippet>a</snippet></ROW><ROW><id>18583637</id><snippet>k</snippet></ROW><ROW><id>18583637</id><snippet>a[0]</snippet></ROW><ROW><id>18583637</id><snippet>a[e]</snippet></ROW><ROW><id>18584065</id><snippet>for i in range(len(letters)):
    letter = raw_input()
    index = letters.index(letter)
    blanks = blanks[:index] + letter + blanks[index + 1:]
    print blanks
</snippet></ROW><ROW><id>18584288</id><snippet>"EXPRESS_CKECKOUT"</snippet></ROW><ROW><id>18584288</id><snippet>"EXPRESS_CHECKOUT"</snippet></ROW><ROW><id>18584288</id><snippet>urllib.urlencode(data)</snippet></ROW><ROW><id>18584288</id><snippet>urllib2.Request</snippet></ROW><ROW><id>18584288</id><snippet>data = {"scope":"EXPRESS_CHECKOUT", "callback":"http://www.example.com/success.html", "requestEnvelope": {"errorLanguage":"en_US"}}
req = urllib2.Request("https://svcs.sandbox.paypal.com/Permissions/RequestPermissions/", simplejson.dumps(data), headers)
res = urllib2.urlopen(req).read()
</snippet></ROW><ROW><id>18584330</id><snippet>def AdjustTime(f):
    f = f or ""   # in case None was passed in
    while True:
        f = f.zfill(4)
        if f.isdigit() and len(f) == 4 and int(f[:2]) &lt;= 23 and int(f[2:]) &lt;= 59:
            return f
        clear()
        print f, 'Get this date right'
        f = raw_input('')
</snippet></ROW><ROW><id>18584453</id><snippet>enumerate(...)</snippet></ROW><ROW><id>18584453</id><snippet>&gt;&gt;&gt; x=[["hi hello"], ["this is other"],["this"],["something"],["this"],["last element"]]
&gt;&gt;&gt; for index, line in enumerate(x):
        print index, line


0 ['hi hello']
1 ['this is other']
2 ['this']
3 ['something']
4 ['this']
5 ['last element']
</snippet></ROW><ROW><id>18584652</id><snippet>wikipedia.page</snippet></ROW><ROW><id>18584652</id><snippet>WikipediaPage</snippet></ROW><ROW><id>18584652</id><snippet>&gt;&gt;&gt; import wikipedia
&gt;&gt;&gt; ny = wikipedia.page('New York')
&gt;&gt;&gt; dir(ny)
['__class__', '__delattr__', '__dict__', '__doc__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', 'content', 'html', 'images', 'links', 'load', 'original_title', 'pageid', 'references', 'summary', 'title', 'url']
</snippet></ROW><ROW><id>18584652</id><snippet>&gt;&gt;&gt; type(ny)
&lt;class 'wikipedia.wikipedia.WikipediaPage'&gt;
&gt;&gt;&gt; type(wikipedia.page)
&lt;type 'function'&gt;
</snippet></ROW><ROW><id>18584684</id><snippet>driver.close()
</snippet></ROW><ROW><id>18584684</id><snippet>driver.quit()
</snippet></ROW><ROW><id>18584870</id><snippet>&gt;&gt;&gt; primes = filter(f , range (6,50))
&gt;&gt;&gt; primes
[7, 11, 13, 17, 19, 23, 25, 29, 31, 35, 37, 41, 43, 47, 49]
</snippet></ROW><ROW><id>18584870</id><snippet>a</snippet></ROW><ROW><id>18584870</id><snippet>primes</snippet></ROW><ROW><id>18584870</id><snippet>a</snippet></ROW><ROW><id>18584870</id><snippet>x</snippet></ROW><ROW><id>18584870</id><snippet>for x in primes:
    for a in filter(f, range(2,x-1)):
        if x%a == 0:
            primes.remove(x)
            break
</snippet></ROW><ROW><id>18584870</id><snippet>primes=[7, 11, 13, 17, 19, 23, 25, 29, 31, 35, 37, 41, 43, 47, 49, 53, 55, 59, 61, 65, 67, 71, 73, 77, 79, 83, 85, 89, 91, 95, 97]
</snippet></ROW><ROW><id>18584870</id><snippet>primes</snippet></ROW><ROW><id>18584870</id><snippet>for x in primes[:]:
    for a in filter(f, range(2,x-1)):
        if x%a == 0:
            primes.remove(x)
            break
</snippet></ROW><ROW><id>18585183</id><snippet>{key: value}</snippet></ROW><ROW><id>18585183</id><snippet>'classes'</snippet></ROW><ROW><id>18585183</id><snippet>('Galinhas', {
                'classes': ['collapse',],
                'fields': galinhas
            }),
            ('Porcos', {
                'classes': ['collapse',],
                'fields': porcos
            }),
            ('Perus', {
                'classes': ['collapse',],
</snippet></ROW><ROW><id>18585183</id><snippet>treino</snippet></ROW><ROW><id>18585183</id><snippet>models.treino</snippet></ROW><ROW><id>18585183</id><snippet>NameError</snippet></ROW><ROW><id>18585261</id><snippet>4</snippet></ROW><ROW><id>18585261</id><snippet>spoon</snippet></ROW><ROW><id>18585261</id><snippet>foo</snippet></ROW><ROW><id>18585261</id><snippet>class Foo(object):
    def __del__(self):
        print "tell my wife I love her!"


&gt;&gt;&gt; f = Foo()
&gt;&gt;&gt; def f():
...  print 'Make room for thy beloved king!'
...
tell my wife I love her!
&gt;&gt;&gt; 
</snippet></ROW><ROW><id>18585825</id><snippet>Property</snippet></ROW><ROW><id>18585825</id><snippet>property</snippet></ROW><ROW><id>18585825</id><snippet>ObjectProperty</snippet></ROW><ROW><id>18585825</id><snippet>Property</snippet></ROW><ROW><id>18585825</id><snippet>Property documentation</snippet></ROW><ROW><id>18585825</id><snippet>PongGame</snippet></ROW><ROW><id>18585825</id><snippet>ball</snippet></ROW><ROW><id>18585825</id><snippet>None</snippet></ROW><ROW><id>18585825</id><snippet>&lt;PongGame&gt;:
    ball: pong_ball

    PongBall:
        id: pong_ball
        center: self.parent.center
</snippet></ROW><ROW><id>18585825</id><snippet>ball = ObjectProperty(PongBall())
</snippet></ROW><ROW><id>18585957</id><snippet>file.readlines</snippet></ROW><ROW><id>18585957</id><snippet>str.strip</snippet></ROW><ROW><id>18585957</id><snippet>file.readlines</snippet></ROW><ROW><id>18585957</id><snippet>import socket

with open('hosts.txt') as fp:
    for line in fp:
        host = line.strip()
        print "Host: {}  IP: {}".format(host, socket.gethostbyname(host))
</snippet></ROW><ROW><id>18586199</id><snippet>time.sleep</snippet></ROW><ROW><id>18586199</id><snippet>fib</snippet></ROW><ROW><id>18586199</id><snippet>7.5s</snippet></ROW><ROW><id>18586199</id><snippet>15</snippet></ROW><ROW><id>18586199</id><snippet>2</snippet></ROW><ROW><id>18586357</id><snippet>url_dict</snippet></ROW><ROW><id>18586357</id><snippet>key = (clientip, url)
url_dict[key] += 1
</snippet></ROW><ROW><id>18586357</id><snippet>url_dict = defaultdict(0)
</snippet></ROW><ROW><id>18586357</id><snippet>for line in wwwlog :
    print line
    m = log_re.match(line) 
    if m : 
        request1 = m.groupdict()  

        clientip = request1["clientip"]
        url =  remove_access_token(request1['url'])

        key = (clientip, url)
        url_dict[key] += 1
</snippet></ROW><ROW><id>18586599</id><snippet>multiprocessing</snippet></ROW><ROW><id>18586599</id><snippet>multiprocessing</snippet></ROW><ROW><id>18586599</id><snippet>multiprocessing</snippet></ROW><ROW><id>18586599</id><snippet>multiprocessing.Value</snippet></ROW><ROW><id>18586599</id><snippet>multiprocessing.Array</snippet></ROW><ROW><id>18586724</id><snippet> @csrf_exempt
    def applicationform(request):
         if request.method == 'POST':

            getappid = request.POST['appid']
            getjobtitle=request.POST['jobtitle']
            odeskid=request.POST['odeskid']
            clientspent=request.POST['client_spent']
            jobtype=request.POST['jobtype']
            notestype=request.POST['notes']
                request.session['setid'] = request.POST['appid']
                    if getappid == '':
                return HttpResponse('&lt;script&gt; alert("fill app id"); document.location.href="redirect url" &lt;/script&gt;') #change here
                    else:
                getintable = application(app_id = request.POST['appid'], job_title = request.POST['jobtitle'], odesk_id = request.POST['odeskid'],client_spent = request.POST['client_spent'], job_type = request.POST['jobtype'],notes_type = request.POST['notes'])
            getintable.save()
            return HttpResponseRedirect('/applicationview/')        
         else:
            return render_to_response('applicationform.html')
</snippet></ROW><ROW><id>18586935</id><snippet>import unicodedata
def compute_ratio(input_str):
    '''
    This function will return the ratio between the number of latin letter and other letters.
    '''
    num_latin = 0
    input_str = "".join(input_str.split()) # Remove whitespaces.
    for char in input_str:
        try:
            if unicodedata.name(unicode(char))[:5] == "LATIN":
                num_latin += 1
            #end if
        except UnicodeDecodeError:
            pass
        #end try
    #end for
    return (num_latin*1.0)/len(input_str)
</snippet></ROW><ROW><id>18586935</id><snippet>&gt;&gt;&gt; lines = '''She wants to ride my BMW the go for a ride in my BMW lol http://t.co/FeoNg48AQZ
RT @YuaElena: Ð‘Ð°Ð±ÑƒÑˆÐºÐ° Ð»Ð°ÑÐºÐ¾Ð²Ð¾ Ð³Ð¾Ð²Ð¾Ñ€Ð¸Ñ‚ 5-Ð»ÐµÑ‚Ð½ÐµÐ¼Ñƒ Ð¢Ñ‘Ð¼Ð¾Ñ‡ÐºÐµ: - Ð¡Ð¼Ð¾Ñ‚Ñ€Ð¸, Ð¢ÐµÐ¼Ð¸Ðº, Ð²Ð¾Ð½ ÐµÐ´ÐµÑ‚ "Ð±Ð¸-Ð±Ð¸". - Ð‘Ð¾Ð³ Ñ Ñ‚Ð¾Ð±Ð¾Ð¹, Ð±Ð°Ð±ÐºÐ°, ÑÑ‚Ð¾-Ð¶ BMW 335xi 4x4.'''
&gt;&gt;&gt; saved_Output = []
&gt;&gt;&gt; for line in lines.split('\n'):
        if compute_ratio(line) &gt; 0.95:
            saved_Output.append(line)
        #end if
#end for

&gt;&gt;&gt; "\n".join(saved_Output)
''
&gt;&gt;&gt; compute_ratio('She wants to ride my BMW the go for a ride in my BMW lol http://t.co/FeoNg48AQZ')
0.890625
&gt;&gt;&gt; # A ratio of 0.95 seems too high even for your first line.
&gt;&gt;&gt; compute_ratio('this is a long string')
0.8095238095238095
&gt;&gt;&gt; compute_ratio(u"c'est une longue cha\xeene")
0.8260869565217391
</snippet></ROW><ROW><id>18587054</id><snippet>os.path.exists(path)</snippet></ROW><ROW><id>18587054</id><snippet>os.path.isdir(path)</snippet></ROW><ROW><id>18587527</id><snippet>import numpy as np
from traits.api import Array, HasTraits, NO_COMPARE


class C(HasTraits):
    x = Array(comparison_mode=NO_COMPARE)

    def _x_changed(self):
        print 'Doing something'


c = C()
c.x = np.linspace(0, 1, 10)

# This does not trigger:
c.x[3] = 100
# This does:
c.x = c.x
</snippet></ROW><ROW><id>18587748</id><snippet>cv2.SURF.detectAndCompute(image, mask[, descriptors[, useProvidedKeypoints]]) → keypoints, descriptors
</snippet></ROW><ROW><id>18587748</id><snippet>import cv2
import numpy

opencv_haystack =cv2.imread('haystack.jpg')
opencv_needle =cv2.imread('needle.jpg')

ngrey = cv2.cvtColor(opencv_needle, cv2.COLOR_BGR2GRAY)
hgrey = cv2.cvtColor(opencv_haystack, cv2.COLOR_BGR2GRAY)

# build feature detector and descriptor extractor
hessian_threshold = 5000
detector = cv2.SURF(hessian_threshold)
hkeypoints,hdescriptors = detector.detectAndCompute(hgrey,None)
nkeypoints,ndescriptors = detector.detectAndCompute(ngrey,None)

# extract vectors of size 64 from raw descriptors numpy arrays
rowsize = len(hdescriptors) / len(hkeypoints)
if rowsize &gt; 1:
    hrows = numpy.array(hdescriptors, dtype = numpy.float32).reshape((-1, rowsize))
    nrows = numpy.array(ndescriptors, dtype = numpy.float32).reshape((-1, rowsize))
    #print hrows.shape, nrows.shape
else:
    hrows = numpy.array(hdescriptors, dtype = numpy.float32)
    nrows = numpy.array(ndescriptors, dtype = numpy.float32)
    rowsize = len(hrows[0])

# kNN training - learn mapping from hrow to hkeypoints index
samples = hrows
responses = numpy.arange(len(hkeypoints), dtype = numpy.float32)
#print len(samples), len(responses)
knn = cv2.KNearest()
knn.train(samples,responses)

# retrieve index and value through enumeration
for i, descriptor in enumerate(nrows):
    descriptor = numpy.array(descriptor, dtype = numpy.float32).reshape((1, rowsize))
    #print i, descriptor.shape, samples[0].shape
    retval, results, neigh_resp, dists = knn.find_nearest(descriptor, 1)
    res, dist =  int(results[0][0]), dists[0][0]
    #print res, dist

    if dist &lt; 0.1:
        # draw matched keypoints in red color
        color = (0, 0, 255)
    else:
        # draw unmatched in blue color
        color = (255, 0, 0)
    # draw matched key points on haystack image
    x,y = hkeypoints[res].pt
    center = (int(x),int(y))
    cv2.circle(opencv_haystack,center,2,color,-1)
    # draw matched key points on needle image
    x,y = nkeypoints[i].pt
    center = (int(x),int(y))
    cv2.circle(opencv_needle,center,2,color,-1)

cv2.imshow('haystack',opencv_haystack)
cv2.imshow('needle',opencv_needle)
cv2.waitKey(0)
cv2.destroyAllWindows()
</snippet></ROW><ROW><id>18587822</id><snippet> expression.Union(Arg1, Arg2, ...)
</snippet></ROW><ROW><id>18587822</id><snippet>h = "%s " * len(r) % tuple(r)    
...
hello = cellTagging.excel.Union(h).Name = "Test1"
</snippet></ROW><ROW><id>18587822</id><snippet>hello = cellTagging.excel.Union(r[0],r[1],r[2]).Name = "Test1" 
</snippet></ROW><ROW><id>18587889</id><snippet>import re

lines = [
    'Mozilla/5.0 (compatible; Googlebot/2.1; +http://www.google.com/bot.html)',
    'Mozilla/5.0 (compatible; AhrefsBot/4.0; +http://ahrefs.com/robot/)',
    'msnbot/2.0b (+http://search.msn.com/msnbot.htm)'
]

botname = re.compile('\w+bot/[.\w]+', flags=re.IGNORECASE)
for line in lines:
    matched = botname.search(line)
    if matched:
        print(matched.group())
</snippet></ROW><ROW><id>18587889</id><snippet>Googlebot/2.1
AhrefsBot/4.0
msnbot/2.0b
</snippet></ROW><ROW><id>18587889</id><snippet>bot/</snippet></ROW><ROW><id>18588383</id><snippet>class BinTree (object):
    def __init__(self, value=None, left=None, right=None):
        if left == None and right == None and value != None:                
            self.isLeaf = True
            self.value = value
        elif left != None and right != None and value == None:
            self.isLeaf = False
            self.value = (left, right)
        else:
            raise ArgumentError("some help message")
</snippet></ROW><ROW><id>18588383</id><snippet>def leaf(value):
    return BinTree(value=value)

def branch(left, right):
    return BinTree(left=left, right=right)
</snippet></ROW><ROW><id>18588383</id><snippet>def left(tree):
    if tree.isLeaf:
        raise ArgumentError ("tree is leaf")
    else:
        return tree.value[0]

def right(tree):
    if tree.isLeaf:
        raise ArgumentError ("tree is leaf")
    else:
        return tree.value[1]

def value(tree):
    if not tree.isLeaf:
        raise ArgumentError ("tree is branch")
    else:
        return tree.value
</snippet></ROW><ROW><id>18588383</id><snippet>def count(bin_tree):
    if bin_tree.isLeaf:
        return 1
    else:
        return count(left(bin_tree))+count(right(bin_tree))
</snippet></ROW><ROW><id>18588921</id><snippet>re.compile(r" i am ([\w]+).*?$")
</snippet></ROW><ROW><id>18588921</id><snippet>&gt;&gt;&gt; a = 'i am struggling with life...'
&gt;&gt;&gt; reg = re.compile(r" i am ([\w]+).*?$")
&gt;&gt;&gt; reg.findall(a)
[]
&gt;&gt;&gt; reg = re.compile(r"i am ([\w]+).*?$")
&gt;&gt;&gt; reg.findall(a)
['struggling']
</snippet></ROW><ROW><id>18588921</id><snippet>.format()</snippet></ROW><ROW><id>18588921</id><snippet>IndexError</snippet></ROW><ROW><id>18589070</id><snippet>bet = raw_input("&gt; ") 
if bet &gt; money:
...
</snippet></ROW><ROW><id>18589070</id><snippet>bet = raw_input("&gt; ")
bet = int(bet)
if bet &gt; money:
...
</snippet></ROW><ROW><id>18589070</id><snippet>money += int(bet)
</snippet></ROW><ROW><id>18589070</id><snippet>bet</snippet></ROW><ROW><id>18589211</id><snippet>io.open()</snippet></ROW><ROW><id>18589211</id><snippet>import io

with io.open('all.txt', 'r', encoding='utf8') as f_in:
    with io.open('all.out', 'w', encoding='utf8') as f_out:
        for line in f_in:
            if u"&lt;title&gt;" in line:
                f_out.write(line)
</snippet></ROW><ROW><id>18589297</id><snippet>my_data2</snippet></ROW><ROW><id>18589297</id><snippet>N = len(my_data2)//2
learning_sample, test_sample = my_data2[:N], my_data2[N:]
</snippet></ROW><ROW><id>18589297</id><snippet>import numpy as np
from statsmodels.formula.api import logit

FNAME2 = "C:/Users/lenovo/Desktop/Nouveau dossier (2)/table.csv"
FinalTableau = np.savetxt(FNAME2, my_data[index_to_use], delimiter=",")
my_data2 = np.genfromtxt(FNAME2, delimiter=',')

# converts my binary data series from (1, 2) to (0,1)
my_data2[:, 1] -= 1  
# print my_data2

N = len(my_data2)//2
learning_sample, test_sample = my_data2[:N], my_data2[N:]
x = learning_sample[:, 1]
a = learning_sample[:, 3]
# x with values 1 and 2
print x

form = 'x ~ a'
affair_model = logit(form, learning_sample)
affair_result = affair_model.fit()

print affair_result.summary()
print affair_result.predict()
</snippet></ROW><ROW><id>18589355</id><snippet>0.125
</snippet></ROW><ROW><id>18589355</id><snippet>1/10 + 2/100 + 5/1000</snippet></ROW><ROW><id>18589355</id><snippet>&gt;&gt;&gt; 0.1
0.1
</snippet></ROW><ROW><id>18589355</id><snippet>&gt;&gt;&gt; 0.1 + 0.2
0.30000000000000004
</snippet></ROW><ROW><id>18589355</id><snippet>&gt;&gt;&gt; round(2.675, 2)
2.67
</snippet></ROW><ROW><id>18589460</id><snippet>|</snippet></ROW><ROW><id>18589460</id><snippet>queryset = queryset1 | queryset2 | queryset3</snippet></ROW><ROW><id>18589460</id><snippet>&amp;</snippet></ROW><ROW><id>18589460</id><snippet>queryset = entries[0].tags.all()
for entry in entries[1:]:
    queryset = queryset | entry.tags.all()
</snippet></ROW><ROW><id>18589506</id><snippet>&gt;&gt;&gt; s = 'a=(10100*10)+(-1289201*20)+(12312312*100)'
&gt;&gt;&gt; index = s.find('=') + 1
&gt;&gt;&gt; eval(s[index:])
</snippet></ROW><ROW><id>18589548</id><snippet>namespaces</snippet></ROW><ROW><id>18589548</id><snippet>findall()</snippet></ROW><ROW><id>18589548</id><snippet>namespaces = {name_space_name_here: 'http://url'}
for x in doc.findall('./A/B/C', namespaces=namespaces):
    # do smth
</snippet></ROW><ROW><id>18589548</id><snippet>xmlns</snippet></ROW><ROW><id>18589548</id><snippet>for x in tree.findall('.//{%(uri)s}C' % {'uri': 'http://url'}):
</snippet></ROW><ROW><id>18589625</id><snippet>polls</snippet></ROW><ROW><id>18589899</id><snippet>.*?</snippet></ROW><ROW><id>18589899</id><snippet>.*</snippet></ROW><ROW><id>18589899</id><snippet>In [9]: re.search(r'(\w{3} \d{2})\.(\w*)\..*?(\d{1,3})$', text).groups()
Out[9]: ('Jan 13', 'BIGGS', '15')
</snippet></ROW><ROW><id>18589899</id><snippet>.*</snippet></ROW><ROW><id>18589899</id><snippet>\d{1,3}</snippet></ROW><ROW><id>18590046</id><snippet>In [11]: (pd.get_dummies(useProb) * pred).sum(axis=1)
Out[11]:
Timestamp
2010-12-21 00:00:00    0
2010-12-20 00:00:00    1
2010-12-17 00:00:00    1
2010-12-16 00:00:00    1
2010-12-15 00:00:00    1
2010-12-14 00:00:00    1
2010-12-13 00:00:00    0
2010-12-10 00:00:00    1
2010-12-09 00:00:00    1
2010-12-08 00:00:00    0
dtype: float64
</snippet></ROW><ROW><id>18590046</id><snippet>In [21]: pred.apply(lambda row: row.loc[useProb.loc[row.name]], axis=1)
Out[21]:
Timestamp
2010-12-21 00:00:00    0
2010-12-20 00:00:00    1
2010-12-17 00:00:00    1
2010-12-16 00:00:00    1
2010-12-15 00:00:00    1
2010-12-14 00:00:00    1
2010-12-13 00:00:00    0
2010-12-10 00:00:00    1
2010-12-09 00:00:00    1
2010-12-08 00:00:00    0
dtype: int64
</snippet></ROW><ROW><id>18590078</id><snippet>sys.path</snippet></ROW><ROW><id>18590078</id><snippet>project/confs</snippet></ROW><ROW><id>18590078</id><snippet>custom_handler</snippet></ROW><ROW><id>18590078</id><snippet>log.py</snippet></ROW><ROW><id>18590112</id><snippet>tar -xf opencv-2.4.6.1.tar.gz -C /tmp
</snippet></ROW><ROW><id>18590112</id><snippet>cmake -D CMAKE_BUILD_TYPE=RELEASE \
      -D BUILD_PYTHON_SUPPORT=ON \
      -D WITH_XINE=ON \
      -D WITH_OPENGL=ON \
      -D WITH_TBB=ON \
      -D BUILD_EXAMPLES=ON \
      -D BUILD_NEW_PYTHON_SUPPORT=ON \
      -D WITH_V4L=ON \
      -D CMAKE_INSTALL_PREFIX=~/.opencv-2.4.6.1 \
      /tmp/opencv-2.4.6.1
</snippet></ROW><ROW><id>18590112</id><snippet>cd /tmp/opencv-2.4.6.1
make -j4
make install
</snippet></ROW><ROW><id>18590112</id><snippet>export PYTHONPATH=~/.opencv-2.4.6.1/lib/python2.7/dist-packages
</snippet></ROW><ROW><id>18590487</id><snippet>&gt;&gt;&gt; a2 = np.ones_like(a1)
&gt;&gt;&gt; a2[::3] = 0
&gt;&gt;&gt; a1[a2.astype(bool)]
array([ 2,  3,  5,  6,  8,  9, 11, 12, 14, 15, 17, 18, 20, 21, 23, 24, 26,
       27, 29, 30])
</snippet></ROW><ROW><id>18590487</id><snippet>&gt;&gt;&gt; a1[~a2.astype(bool)]
array([ 1,  4,  7, 10, 13, 16, 19, 22, 25, 28])
</snippet></ROW><ROW><id>18590706</id><snippet>Content-Type</snippet></ROW><ROW><id>18590706</id><snippet>.send()</snippet></ROW><ROW><id>18590706</id><snippet>.send(FormData)</snippet></ROW><ROW><id>18590924</id><snippet>d</snippet></ROW><ROW><id>18590924</id><snippet>dlist=[]
for x, y in zip(list1, list2):
    d={'name': x.name, 'age': x.age, 'gender': y.gender}
    dlist.append(d)
</snippet></ROW><ROW><id>18590924</id><snippet>dlist = [{'name': x.name, 'age': x.age, 'gender': y.gender} for x, y in zip(list1, list2)]
</snippet></ROW><ROW><id>18591066</id><snippet>import pandas
myfile = open('myfile.csv')
data = pandas.read_csv(myfile, encoding='utf-8', quotechar='"', delimiter=';')
print(data.values)
</snippet></ROW><ROW><id>18591066</id><snippet>import unicodecsv
myfile = open('myfile.csv')
data = unicodecsv.reader(myfile, encoding='utf-8', delimiter=';')
for row in data:                                                 
    print row
</snippet></ROW><ROW><id>18591066</id><snippet>data = [line.strip().split(';') for i, line in enumerate(open('./foo.csv').readlines()) if i != 0]
</snippet></ROW><ROW><id>18591066</id><snippet>from StringIO import StringIO
import codecs
import unicodedata

...

    try:
        self.FichierE =  StringIO(
            unicodedata.normalize(
                'NFKD', codecs.open(self.CheminFichierE, "r", "utf-8").read()
            ).encode('ascii', 'ignore'))
        self.ReaderFichierE = csv.reader(self.FichierE, delimiter=';')

    except IOError:
        self.TextCtrl.AppendText(u"Fichier E n'a pas été trouvé")
        return

    try:
        DataFichierE = [ligne for ligne in self.ReaderFichierE]
    except UnicodeDecodeError:
        self.TextCtrl.AppendText(self.NomFichierE+ u" n'est pas lisible")
        return
    except UnicodeEncodeError:
        self.TextCtrl.AppendText(self.NomFichierE+ u" n'est pas lisible (ASCII)")
        return
</snippet></ROW><ROW><id>18591424</id><snippet>class Example(object):
  def method1(self):
    print 1
  def method2(self):
    print 2
  def __getattribute__(self, name):
    def f():
        # todo: check if it's actually a function or not before calling
        r = object.__getattribute__(self, name)()
        print 'hello world'
        return r
    return f
</snippet></ROW><ROW><id>18591424</id><snippet>def SaysHelloAfterEveryMethod(klass):
  def __getattribute__(self, name):
    def f():
      # todo: check if it's actually a function or not
      r = object.__getattribute__(self, name)()
      print 'hello world'
      return r
    return f
  klass.__getattribute__ = __getattribute__
  return klass

@SaysHelloAfterEveryMethod
class Example(object):
  def method1(self):
    print 1
  def method2(self):
    print 2
</snippet></ROW><ROW><id>18591473</id><snippet>Animal</snippet></ROW><ROW><id>18591473</id><snippet>Dog</snippet></ROW><ROW><id>18591473</id><snippet>class Animal:
    def __init__(self, animal, name, bark):
        self.animal = animal
        self.name = name
        self.bark = bark

    def say(self):
        print('A {} goes {}'.format(self.animal, self.bark))

class Dog(Animal):
    def __init__(self):
        Animal.__init__(self, "dog", "", "Woof!")

class Cat(Animal):
    def __init__(self):
        Animal.__init__(self, "cat", "", "Miao!")        


d1 = Dog()
d1.say()

c1 = Cat()
c1.say()
</snippet></ROW><ROW><id>18591473</id><snippet>A dog goes Woof!
A cat goes Miao!
</snippet></ROW><ROW><id>18591529</id><snippet>random.sample()</snippet></ROW><ROW><id>18591529</id><snippet>random.choice()</snippet></ROW><ROW><id>18591529</id><snippet>books = None

def getRandomBook():
    global books
    if books is None:
        books = list(getBookSet())
    return random.choice(books)
</snippet></ROW><ROW><id>18591529</id><snippet>int()</snippet></ROW><ROW><id>18591529</id><snippet>getRandomBook()</snippet></ROW><ROW><id>18591655</id><snippet>for newr in new_r:
  print [(r[i+1]-r[i])**3 * ro[i+1] for i in xrange(len(r) - 1) if r[i] &lt; newr]
</snippet></ROW><ROW><id>18591860</id><snippet>import operator
get_truth(1.0, operator.gt, 0.0)

...

def get_truth(inp, relate, cut):    
    return relate(inp, cut)
    # you don't actually need an if statement here
</snippet></ROW><ROW><id>18592207</id><snippet>if</snippet></ROW><ROW><id>18592207</id><snippet>elif</snippet></ROW><ROW><id>18592207</id><snippet>else</snippet></ROW><ROW><id>18592207</id><snippet>if</snippet></ROW><ROW><id>18592207</id><snippet>elif</snippet></ROW><ROW><id>18592207</id><snippet>True</snippet></ROW><ROW><id>18592207</id><snippet>else</snippet></ROW><ROW><id>18592207</id><snippet>elif</snippet></ROW><ROW><id>18592207</id><snippet>if</snippet></ROW><ROW><id>18592207</id><snippet>if a[flicker - 2] in vowels and a[flicker -1] in'r':
    final = str(a[:flicker-2])+'r'
    flicker = len(str(final))

if flicker &lt; 6:
    final = 'My'+final
</snippet></ROW><ROW><id>18592207</id><snippet>if</snippet></ROW><ROW><id>18592207</id><snippet>if</snippet></ROW><ROW><id>18592207</id><snippet>flicker</snippet></ROW><ROW><id>18592207</id><snippet>if a[-2] in vowels and a[-1] == 'r':
    a = a[:-2] + 'r'

if len(a) &lt; 6:
    a = 'My{}'.format(a)
</snippet></ROW><ROW><id>18592207</id><snippet>a</snippet></ROW><ROW><id>18592207</id><snippet>flicker</snippet></ROW><ROW><id>18592248</id><snippet>for object in sequence:
   if selector(object):
      result.append(object)
</snippet></ROW><ROW><id>18592248</id><snippet>def is_number(s):
    """ From your solution. """
    try:
        float(s)
        return True
    except ValueError:
        return False

def func(i1, i2):
    return lambda str: is_number(str[i1:i2].strip())

if __name__ == '__main__':
    result = []
    with open('in.txt') as fin:
       result = filter(func(0,10), fin)
    with open('out.txt', 'w') as fout:
        for s in result:
            fout.write(s)
</snippet></ROW><ROW><id>18592248</id><snippet>def func(idx, number):
  return lambda arg: arg[idx] == number
</snippet></ROW><ROW><id>18592248</id><snippet>input = open('file name', 'r')
listoflists = []
for line in input:
  list = line.split(' ') # an example of splitting with space separator
  listoflists.append(list)
</snippet></ROW><ROW><id>18592248</id><snippet>idx = 1
number = 10
result = filter(func(idx, number), listoflists)
</snippet></ROW><ROW><id>18592248</id><snippet>out = open('file name', 'w')
for l in result:
  out.write(l)
</snippet></ROW><ROW><id>18592248</id><snippet>input.close()
out.close()
</snippet></ROW><ROW><id>18592354</id><snippet>redis.SubscriberFactory.protocol = RedisListenerProtocol
</snippet></ROW><ROW><id>18592354</id><snippet>from twisted.internet.protocol import ClientCreator
from twisted.internet import reactor

# some where : 
defer = ClientCreator(reactor, RedisListenerProtocol).connectTCP(__HOST__, __PORT__)
# the defer will have your client when the connection is done
</snippet></ROW><ROW><id>18592504</id><snippet>None</snippet></ROW><ROW><id>18592625</id><snippet>gep</snippet></ROW><ROW><id>18592625</id><snippet>gep</snippet></ROW><ROW><id>18592625</id><snippet>gep</snippet></ROW><ROW><id>18592625</id><snippet>gep</snippet></ROW><ROW><id>18592625</id><snippet>bitcast</snippet></ROW><ROW><id>18592625</id><snippet>i8*</snippet></ROW><ROW><id>18592898</id><snippet> class CustomModelChoiceField(django.forms.ModelChoiceField):
        """Subclasses Django's ModelChoiceField and adds one parameter, `obj_label`.
        This should be a callable with one argument (the current object) which
        returns a string to use as the label of that object or instance."""

        def __init__(self, obj_label=None, *args, **kwargs):
            super(CustomModelChoiceField, self).__init__(*args, **kwargs)
            self.obj_label = obj_label

        def label_from_instance(self, obj):
            if self.obj_label:
                return self.label(obj)
            return super(CustomModelChoiceField, self).label_from_instance(obj)
</snippet></ROW><ROW><id>18592967</id><snippet>import os
if not os.environ.has_key('SILENT_MODE'):
    import Tkinter
    import tkMessageBox 

    warningWindow = Tkinter.Tk()
    warningWindow.withdraw()
    tkMessageBox.showwarning("WARNING", "blah, blah, blah")

    warningWindow.destroy()
</snippet></ROW><ROW><id>18592967</id><snippet>SET SILENT_MODE=1
python -m unittest discover
</snippet></ROW><ROW><id>18593179</id><snippet>UncertaintyVisualisaton.py</snippet></ROW><ROW><id>18593179</id><snippet>image = Image.new("RGB", (width, height))
</snippet></ROW><ROW><id>18593179</id><snippet>images</snippet></ROW><ROW><id>18593179</id><snippet>image = images[i]
</snippet></ROW><ROW><id>18593179</id><snippet>#Error here
rgb = image[x][y]
</snippet></ROW><ROW><id>18593179</id><snippet>#no more Error here
rgb = image.data[x][y]
</snippet></ROW><ROW><id>18593563</id><snippet>1+2+3+4+5+6=21</snippet></ROW><ROW><id>18593563</id><snippet>In [4]: sum(Counter([1,2,3,4,5,1,2,1,6]).values())
Out[4]: 9
</snippet></ROW><ROW><id>18593625</id><snippet>dict</snippet></ROW><ROW><id>18593625</id><snippet>O(1)</snippet></ROW><ROW><id>18593625</id><snippet>timeit</snippet></ROW><ROW><id>18593861</id><snippet>for ArchivesFiles in chemin_zipfiles :    
    truncated_file, ext = os.path.splitext(os.path.basename(ArchivesFiles)) 
    if not os.path.exists(truncated_file):
        os.makedirs(truncated_file)
        if ext == 'rar':
            arch_ref = rarfile.RarFile(ArchivesFiles,'r')
        else:
            arch_ref = zipfile.ZipFile(ArchivesFiles,'r')
        new_folder = os.path.realpath(truncated_file)
        arch_ref.extractall(new_folder)
</snippet></ROW><ROW><id>18593861</id><snippet>truncated_file</snippet></ROW><ROW><id>18593861</id><snippet>funcs = {'.rar':rarfile.RarFile, '.zip':zipfile.ZipFile}

for ArchivesFiles in chemin_zipfiles :    
    truncated_file, ext = os.path.splitext(os.path.basename(ArchivesFiles)) 
    if not os.path.exists(truncated_file):
        os.makedirs(truncated_file)
        arch_ref = funcs[ext](ArchivesFiles,'r')
        new_folder = os.path.realpath(truncated_file)
        arch_ref.extractall(new_folder)
</snippet></ROW><ROW><id>18593970</id><snippet>proc = subprocess.Popen("ping %s" % ip, shell=True, 
                            stdout=subprocess.PIPE) 
line = proc.stdout.readline()
print line.strip()
</snippet></ROW><ROW><id>18594083</id><snippet>if os.path.exists('C:/Program Files'): print 'yes'
if os.path.exists(r'C:\Program Files'): print 'yes'
if os.path.exists('C:\\Program Files'): print 'yes'
</snippet></ROW><ROW><id>18594128</id><snippet>strftime()</snippet></ROW><ROW><id>18594128</id><snippet>'C'</snippet></ROW><ROW><id>18594128</id><snippet>strftime</snippet></ROW><ROW><id>18594128</id><snippet>#! /usr/bin/python3
import time
import locale


def get_c_locale_abbrev():
  lc = locale.setlocale(locale.LC_TIME)
  try:
    locale.setlocale(locale.LC_TIME, "C")
    return time.strftime("%a-%b")
  finally:
    locale.setlocale(locale.LC_TIME, lc)

# Let's suppose that we're french
locale.setlocale(locale.LC_ALL, 'fr_FR.utf8')

# Should print french, english, then french
print(time.strftime('%a-%b'))
print(get_c_locale_abbrev())
print(time.strftime('%a-%b'))
</snippet></ROW><ROW><id>18594128</id><snippet>with:</snippet></ROW><ROW><id>18594128</id><snippet>try:</snippet></ROW><ROW><id>18594128</id><snippet>finally:</snippet></ROW><ROW><id>18594128</id><snippet>#! /usr/bin/python3
import time
import locale
import contextlib

@contextlib.contextmanager
def setlocale(*args, **kw):
  saved = locale.setlocale(locale.LC_ALL)
  yield locale.setlocale(*args, **kw)
  locale.setlocale(locale.LC_ALL, saved)

def get_c_locale_abbrev():
  with setlocale(locale.LC_TIME, "C"):
    return time.strftime("%a-%b")

# Let's suppose that we're french
locale.setlocale(locale.LC_ALL, 'fr_FR.utf8')

# Should print french, english, then french
print(time.strftime('%a-%b'))
print(get_c_locale_abbrev())
print(time.strftime('%a-%b'))
</snippet></ROW><ROW><id>18594152</id><snippet>import wx

########################################################################
class Car:
    """"""

    #----------------------------------------------------------------------
    def __init__(self, id, model, make, year):
        """Constructor"""
        self.id = id
        self.model = model
        self.make = make
        self.year = year       


########################################################################
class MyForm(wx.Frame):

    #----------------------------------------------------------------------
    def __init__(self):
        wx.Frame.__init__(self, None, wx.ID_ANY, "Tutorial")

        # Add a panel so it looks the correct on all platforms
        panel = wx.Panel(self, wx.ID_ANY)

        cars = [Car(0, "Ford", "F-150", "2008"),
                Car(1, "Chevrolet", "Camaro", "2010"),
                Car(2, "Nissan", "370Z", "2005")]

        sampleList = []
        self.cb = wx.ComboBox(panel,
                              size=wx.DefaultSize,
                              choices=sampleList)
        self.widgetMaker(self.cb, cars)

        sizer = wx.BoxSizer(wx.VERTICAL)
        sizer.Add(self.cb, 0, wx.ALL, 5)
        panel.SetSizer(sizer)

    #----------------------------------------------------------------------
    def widgetMaker(self, widget, objects):
        """"""
        for obj in objects:
            widget.Append(obj.make, obj)
        widget.Bind(wx.EVT_COMBOBOX, self.onSelect)

    #----------------------------------------------------------------------
    def onSelect(self, event):
        """"""
        print "You selected: " + self.cb.GetStringSelection()
        obj = self.cb.GetClientData(self.cb.GetSelection())
        text = """
        The object's attributes are:
        %s  %s    %s  %s

        """ % (obj.id, obj.make, obj.model, obj.year)
        print text

# Run the program
if __name__ == "__main__":
    app = wx.App(False)
    frame = MyForm()
    frame.Show()
    app.MainLoop()
</snippet></ROW><ROW><id>18594444</id><snippet>basicConfig()</snippet></ROW><ROW><id>18594444</id><snippet>root</snippet></ROW><ROW><id>18594444</id><snippet>self.log.addHandler( logging.handlers.RotatingFileHandler('/var/log/pdmd.log', mode='a', maxBytes=50000, backupCount=5) )
</snippet></ROW><ROW><id>18594444</id><snippet>rothnd = logging.handlers.RotatingFileHandler('/var/log/pdmd.log', mode='a', maxBytes=50000, backupCount=5)
rothnd.setFormatter(logging.Formatter(FORMAT))
self.log.addHandler(rothnd)
</snippet></ROW><ROW><id>18594489</id><snippet>request.META</snippet></ROW><ROW><id>18594489</id><snippet>request</snippet></ROW><ROW><id>18594489</id><snippet>request_started and request_finished</snippet></ROW><ROW><id>18594582</id><snippet>QAction</snippet></ROW><ROW><id>18594582</id><snippet>triggered</snippet></ROW><ROW><id>18594582</id><snippet>class Example(QtGui.QMainWindow):

    def __init__(self):
        super(Example, self).__init__()

        self.initUI()

    def initUI(self):
        testAction = QtGui.QAction(QtGui.QIcon('test.png'), '&amp;Exit', self)
        testAction.triggered.connect(self.runExample)
        menubar = self.menuBar()
        testMenu = menubar.addMenu('&amp;Test')
        testMenu.addAction(testAction)

    def runExample(self):
        print "Running example."
</snippet></ROW><ROW><id>18594595</id><snippet>div</snippet></ROW><ROW><id>18594595</id><snippet>df.div(df.sum(axis=1), axis=0)
</snippet></ROW><ROW><id>18595299</id><snippet>import numpy, random
from mayavi.mlab import *

def cMap(x,y,z):
    #whatever logic you want for colors
    return [random.random() for i in x]

def test_points3d():
    t = numpy.linspace(0, 4*numpy.pi, 20)
    cos = numpy.cos
    sin = numpy.sin

    x = sin(2*t)
    y = cos(t)
    z = cos(2*t)
    s = cMap(x,y,z)

    return points3d(x, y, z, s, colormap="spectral", scale_factor=0.25)

test_points3d()
</snippet></ROW><ROW><id>18595381</id><snippet>def construct_position_sym(loader, node):
    return loader.construct_yaml_str(node)
</snippet></ROW><ROW><id>18595381</id><snippet>def construct_position_sym(loader, node):
    return loader.construct_yaml_seq(node)
</snippet></ROW><ROW><id>18595381</id><snippet>!Position [something, something]
</snippet></ROW><ROW><id>18595404</id><snippet>my_var = (#some_variable +
         some_other_var)
</snippet></ROW><ROW><id>18595575</id><snippet>dstack</snippet></ROW><ROW><id>18595575</id><snippet>&gt;&gt;&gt; import numpy as np
&gt;&gt;&gt; np.dstack((a,b,c)).swapaxes(1,2)
array([[[[  1.  0.  0.],
         [  5.  9.  9.],
         [  0.  0.  0.]],

        [[  3.  0.  0.],
         [ 37.  8.  9.],
         [  0.  6.  0.]],

        [[  5.  2.  0.],
         [ 49.  8.  3.],
         [  1.  4.  6.]],

        [[  2.  0.  0.],
         [  3.  3.  1.],
         [  6.  2.  0.],

        [[  1.  2.  1.],
         [  4.  4.  5.],
         [  0.  5.  4.]]])
</snippet></ROW><ROW><id>18595655</id><snippet>In [11]: df.TIMESTAMP = pd.to_datetime(df.TIMESTAMP, unit='s')

In [12]: df.set_index('TIMESTAMP', inplace=True)

In [13]: df
Out[13]:
                     PRICE      VOLUME
TIMESTAMP
2011-01-06 10:59:05  24990  1500000000
2011-01-06 12:43:33  25499  5000000000
2011-01-06 12:54:09  25499   100000000
</snippet></ROW><ROW><id>18595655</id><snippet>In [14]: df['VOLUME'].resample('H', how='ohlc')
Out[14]:
                           open        high         low       close
TIMESTAMP
2011-01-06 10:00:00  1500000000  1500000000  1500000000  1500000000
2011-01-06 11:00:00         NaN         NaN         NaN         NaN
2011-01-06 12:00:00  5000000000  5000000000   100000000   100000000

In [15]: df['PRICE'].resample('H', how='ohlc')
Out[15]:
                      open   high    low  close
TIMESTAMP
2011-01-06 10:00:00  24990  24990  24990  24990
2011-01-06 11:00:00    NaN    NaN    NaN    NaN
2011-01-06 12:00:00  25499  25499  25499  25499
</snippet></ROW><ROW><id>18595655</id><snippet>In [16]: df['PRICE'].resample('H', how='ohlc').to_json()
Out[16]: '{"open":{"1294308000000000000":24990.0,"1294311600000000000":null,"1294315200000000000":25499.0},"high":{"1294308000000000000":24990.0,"1294311600000000000":null,"1294315200000000000":25499.0},"low":{"1294308000000000000":24990.0,"1294311600000000000":null,"1294315200000000000":25499.0},"close":{"1294308000000000000":24990.0,"1294311600000000000":null,"1294315200000000000":25499.0}}'
</snippet></ROW><ROW><id>18595655</id><snippet>In [21]: price = df['PRICE'].resample('D', how='ohlc').reset_index()

In [22]: price
Out[22]: 
            TIMESTAMP   open   high    low  close
0 2011-01-06 00:00:00  24990  25499  24990  25499
</snippet></ROW><ROW><id>18595655</id><snippet>In [23]: price.to_json(date_format='iso', orient='records')
Out[23]: '[{"TIMESTAMP":"2011-01-06T00:00:00.000Z","open":24990,"high":25499,"low":24990,"close":25499}]'

In [24]: price.to_json('foo.json', date_format='iso', orient='records')  # save as json file
</snippet></ROW><ROW><id>18595779</id><snippet>if json_resp['status'] == u'OK':
    for pred in json_resp['predictions']:
        desc = pred['description'] 
        if u'Novi Sad' in desc or u'Нови Сад' in desc:
            obj = {
                'name': pred['description'],
                'reference': pred['reference']
            }
            json_result['suggestions'].append(obj)

return json.dumps(json_result)
</snippet></ROW><ROW><id>18595877</id><snippet># dd.py
import sys
def main(arg):
    # do something here
    print arg

if __name__ == "__main__":
    arg = sys.argv[1]
    main(arg)
</snippet></ROW><ROW><id>18595877</id><snippet>subprocess.Popen("/path/to/dd.py", arg)
</snippet></ROW><ROW><id>18596183</id><snippet>operator</snippet></ROW><ROW><id>18596183</id><snippet>operator.itemgetter(n)</snippet></ROW><ROW><id>18596183</id><snippet>key=a[x][1]</snippet></ROW><ROW><id>18596183</id><snippet>x</snippet></ROW><ROW><id>18596183</id><snippet>lambda</snippet></ROW><ROW><id>18596183</id><snippet>elem</snippet></ROW><ROW><id>18596183</id><snippet>a.sort(key=lambda elem: elem[1])
</snippet></ROW><ROW><id>18596183</id><snippet>def get_second_elem(iterable):
    return iterable[1]

a.sort(key=get_second_elem)
</snippet></ROW><ROW><id>18596183</id><snippet>reverse=True</snippet></ROW><ROW><id>18596183</id><snippet>a.sort(key=..., reverse=True)</snippet></ROW><ROW><id>18596183</id><snippet>itemgetter</snippet></ROW><ROW><id>18596183</id><snippet>operator.itemgetter(1,2)</snippet></ROW><ROW><id>18596183</id><snippet>labda elem: (elem[1], elem[2])</snippet></ROW><ROW><id>18596183</id><snippet>a[2,1]</snippet></ROW><ROW><id>18596183</id><snippet>operator.itemgetter</snippet></ROW><ROW><id>18596404</id><snippet>path = "path/"
name = "fileName"

xmlRoot = Element("root")#create a root element for the xml structure
xmlSub = SubElement(xmlRoot,"sub")
subName = SubElement(xmlCard,"name")
subName.text = "element text"

saveName = path + name + ".xml" #constructs location of xml file (path/fileName.xml)
tree = ElementTree(xmlRoot) #compiles the tree
tree.append(saveName) #appends to specified file
</snippet></ROW><ROW><id>18596404</id><snippet>&lt;root&gt;
    &lt;sub&gt;
        &lt;name&gt;element text&lt;/name&gt;
    &lt;/sub&gt;
&lt;/root&gt;
</snippet></ROW><ROW><id>18596404</id><snippet>xml = parse("path/fileName.xml")
nameList = xml.findall("sub/name") #find all objects in &lt;name&gt; brackets
for i in nameList:
    i.text #convert item in the list to a readable string
    #do comparison here
</snippet></ROW><ROW><id>18596527</id><snippet>pickle.load</snippet></ROW><ROW><id>18596527</id><snippet>testing.test1 = pickle.load(f)
</snippet></ROW><ROW><id>18596527</id><snippet># to save
pickle.dump(allStuff, f)

# to load
allStuff = pickle.load(f)
testing.test1, testing.test2 = allStuff
</snippet></ROW><ROW><id>18596611</id><snippet>str</snippet></ROW><ROW><id>18596611</id><snippet>&gt;&gt;&gt; import sys
&gt;&gt;&gt; sys.getsizeof('')
37
&gt;&gt;&gt; sys.getsizeof('a')
38
&gt;&gt;&gt; sys.getsizeof('aa')
39
&gt;&gt;&gt; sys.getsizeof('aaa')
40
</snippet></ROW><ROW><id>18596611</id><snippet>str</snippet></ROW><ROW><id>18596611</id><snippet>str</snippet></ROW><ROW><id>18596674</id><snippet>df['B'] = df.resample('s', how='ffill').tshift(5, freq='s').reindex_like(df)
</snippet></ROW><ROW><id>18596674</id><snippet>In [59]: df
Out[59]: 
      A
Time   
0     0
1     1
4     2
7     3
8     4
10    5
12    6
15    7
18    8
20    9
</snippet></ROW><ROW><id>18596674</id><snippet>In [60]: index = np.arange(df.index.values.min(), df.index.values.max() + 1)
</snippet></ROW><ROW><id>18596674</id><snippet>In [61]: df1 = df.reindex(index, method='ffill')
</snippet></ROW><ROW><id>18596674</id><snippet>In [62]: df1['B'] = df1.shift(-5)
</snippet></ROW><ROW><id>18596674</id><snippet>In [63]: df1.reindex(df.index)
Out[63]: 
      A   B
Time       
0     0   2
1     1   2
4     2   4
7     3   6
8     4   6
10    5   7
12    6   7
15    7   9
18    8 NaN
20    9 NaN
</snippet></ROW><ROW><id>18596674</id><snippet>fillna</snippet></ROW><ROW><id>18596769</id><snippet>from pymongo import MongoClient
import xml.etree.ElementTree as ET
from urllib2 import urlopen

cl = MongoClient()
coll = cl["dbname"]["collectionname"]

tree = ET.parse("https://www.eventbrite.com/xml/event_search?app_key=USO53E2ZHT6LM4D5RA&amp;country=DE&amp;max=100&amp;date=Future&amp;page=1")
root = tree.getroot()

for event in root.findall("./event"):
    doc = {}
    for c in event.getchildren():
        if c.tag in ("start_date", "end_date", "title"):
            doc[c.tag] = c.text
        elif c.tag == "venue":
            doc[c.tag] = {}
            for v in c.getchildren():
                if v.tag in ("address", "address_2", "city", "latitude", "longitude", "name", "postal_code"):
                    doc[c.tag][v.tag] = v.text

    coll.insert(doc)
</snippet></ROW><ROW><id>18596791</id><snippet>plot(x,y)</snippet></ROW><ROW><id>18596791</id><snippet>savefig('image.svg')</snippet></ROW><ROW><id>18596791</id><snippet>plot</snippet></ROW><ROW><id>18596835</id><snippet>c = ax.contourf(x, y, data, level=clevel, norm=norm)
</snippet></ROW><ROW><id>18596835</id><snippet>level</snippet></ROW><ROW><id>18596835</id><snippet>levels</snippet></ROW><ROW><id>18596957</id><snippet>len</snippet></ROW><ROW><id>18596957</id><snippet>table=[['John',  8, 'Student'   ],
       ['Paul', 22, 'Car Dealer'],
       ['Nick', 30, 'Doctor', 'this row is longer..','making 5'],
       ['Mark', 66, 'Retired'   ]]

y=len(table)      # 4
</snippet></ROW><ROW><id>18596957</id><snippet>x=max(len(row) for row in table)     # 5
</snippet></ROW><ROW><id>18596957</id><snippet>&gt;&gt;&gt; [li[0] for li in table]
['John', 'Paul', 'Nick', 'Mark']
</snippet></ROW><ROW><id>18596957</id><snippet>any('John' in l for l in table)      # True
'Paul' in (li[0] for li in table)    # True
</snippet></ROW><ROW><id>18596957</id><snippet>[i for i,l in enumerate(table) if 'Mark' in l]   # 3
</snippet></ROW><ROW><id>18597050</id><snippet>line_dict
for line in sys.stdin:
    parts = line.split(",")
    line_dict = dict(map(str.strip,part.split("=")) for part in parts)
    print line_dict['protocol']
</snippet></ROW><ROW><id>18597050</id><snippet>import re
for line in sys.stdin:
     if 'protocol' in line:
         print re.findall("protocol\s*=([^,]*)",line)
</snippet></ROW><ROW><id>18597157</id><snippet>metric</snippet></ROW><ROW><id>18597157</id><snippet>n_jobs= -1</snippet></ROW><ROW><id>18597157</id><snippet>PAIRWISE_DISTANCE_FUNCTIONS</snippet></ROW><ROW><id>18597225</id><snippet>|-main.py
|-src
 |-utils.py (containing get_base_dir())
|-data
</snippet></ROW><ROW><id>18597225</id><snippet>import os, sys, inspect
def get_base_dir():
   if getattr(sys,"frozen",False):
       # If this is running in the context of a frozen (executable) file, 
       # we return the path of the main application executable
       return os.path.dirname(os.path.abspath(sys.executable))
   else:
       # If we are running in script or debug mode, we need 
       # to inspect the currently executing frame. This enable us to always
       # derive the directory of main.py no matter from where this function
       # is being called
       thisdir = os.path.dirname(inspect.getfile(inspect.currentframe()))
       return os.path.abspath(os.path.join(thisdir, os.pardir))
</snippet></ROW><ROW><id>18597225</id><snippet>.exe</snippet></ROW><ROW><id>18597445</id><snippet>book1</snippet></ROW><ROW><id>18597445</id><snippet>book2</snippet></ROW><ROW><id>18597445</id><snippet>book2</snippet></ROW><ROW><id>18597445</id><snippet>.csv</snippet></ROW><ROW><id>18597445</id><snippet>with open('book1.csv', 'r') as book1:
    with open('book2.csv', 'r') as book2:
        reader1 = csv.reader(book1, delimiter=',')
        reader2 = csv.reader(book2, delimiter=',')

        both = []
        fields = reader1.next() # read header row
        reader2.next() # read and ignore header row
        for row1, row2 in zip(reader1, reader2):
            row2.append(row1[-1])
            both.append(row2)

        with open('output.csv', 'w') as output:
            writer = csv.writer(output, delimiter=',')
            writer.writerow(fields) # write a header row
            writer.writerows(both)
</snippet></ROW><ROW><id>18597548</id><snippet>from django.template import Context

def getdjtemplate():
    dj_template = """
    &lt;table&gt;
        {% for field in form %}
        &lt;tr&gt;{{ field }}&lt;/tr&gt;
        {% endfor %}
        &lt;/table&gt;
        """
    return dj_template

form = old_form()
djtemplate = getdjtemplate()
newtmpl = Template(djtemplate)
c = Context({'form': form})
newtmpl.render(c)
</snippet></ROW><ROW><id>18597704</id><snippet>Flask-SQLAlchemy</snippet></ROW><ROW><id>18597704</id><snippet>app.test_request_context().push()
</snippet></ROW><ROW><id>18597704</id><snippet>Flask-SQLAlchemy</snippet></ROW><ROW><id>18597704</id><snippet>SQLAlchemy</snippet></ROW><ROW><id>18597805</id><snippet>from io import BytesIO
import urllib
import urllib.request
import tkinter as tk
from PIL import Image, ImageTk
root = tk.Tk()
url = "http://imgs.xkcd.com/comics/python.png"
with urllib.request.urlopen(url) as u:
    raw_data = u.read()
im = Image.open(BytesIO(raw_data))
image = ImageTk.PhotoImage(im)
label = tk.Label(image=image)
label.pack()
root.mainloop()
</snippet></ROW><ROW><id>18597993</id><snippet>planet = IntVar()
planet.set(0)

buttonBlue = Radiobutton(wind, text="Blue Planet", variable=planet, value=1)
buttonOrange = Radiobutton(wind, text="Orange Planet", variable=planet, value=0)
...
def choice (event):#Function binded to can, move the selected planet (blue = 1, prange = 0)
    if planet.get() == 0:
        moveOrange(event)
    else :
        moveBlue(event)
</snippet></ROW><ROW><id>18597993</id><snippet>lambda</snippet></ROW><ROW><id>18597993</id><snippet>functools.partial</snippet></ROW><ROW><id>18597993</id><snippet>buttonBlue = Button(wind, text = 'Blue Planet', command = lambda: change(1))
buttonOrange = Button(wind, text = 'Blue Planet', command = lambda: change(0))
def change(newValue):
    global a
    a = newValue
</snippet></ROW><ROW><id>18598043</id><snippet>import sys
args = map(float, sys.argv[1:])
</snippet></ROW><ROW><id>18598043</id><snippet>args = [float(x) for x in sys.argv[1:]]
</snippet></ROW><ROW><id>18598227</id><snippet>iter</snippet></ROW><ROW><id>18598227</id><snippet>&gt;&gt;&gt; mylist = ["a",1,"b",2,"c",3]
&gt;&gt;&gt; it = iter(mylist)
&gt;&gt;&gt; {k: next(it) for k in it}
{'a': 1, 'c': 3, 'b': 2}
</snippet></ROW><ROW><id>18598227</id><snippet>zip</snippet></ROW><ROW><id>18598227</id><snippet>iter</snippet></ROW><ROW><id>18598227</id><snippet>&gt;&gt;&gt; dict(zip(*[iter(mylist)]*2)) #use `itertools.izip` if the list is huge.
{'a': 1, 'c': 3, 'b': 2}
</snippet></ROW><ROW><id>18598227</id><snippet>zip(*[iter(s)]*n)</snippet></ROW><ROW><id>18598230</id><snippet>distribute</snippet></ROW><ROW><id>18598230</id><snippet>setuptools</snippet></ROW><ROW><id>18598230</id><snippet>easy_install</snippet></ROW><ROW><id>18598230</id><snippet>distribute</snippet></ROW><ROW><id>18598230</id><snippet>setuptools</snippet></ROW><ROW><id>18598230</id><snippet>distribute</snippet></ROW><ROW><id>18598230</id><snippet>setuptools</snippet></ROW><ROW><id>18598230</id><snippet>setuptools</snippet></ROW><ROW><id>18598265</id><snippet>__persistDB</snippet></ROW><ROW><id>18598265</id><snippet>target=self.__persistDB</snippet></ROW><ROW><id>18598265</id><snippet>Thread</snippet></ROW><ROW><id>18598265</id><snippet>start</snippet></ROW><ROW><id>18598265</id><snippet>while True</snippet></ROW><ROW><id>18598265</id><snippet>Thread</snippet></ROW><ROW><id>18598265</id><snippet>threading</snippet></ROW><ROW><id>18598470</id><snippet>eval()</snippet></ROW><ROW><id>18598470</id><snippet>test</snippet></ROW><ROW><id>18598470</id><snippet>script1</snippet></ROW><ROW><id>18598470</id><snippet>eval()</snippet></ROW><ROW><id>18598470</id><snippet>Foo</snippet></ROW><ROW><id>18598470</id><snippet>bar</snippet></ROW><ROW><id>18598470</id><snippet>test</snippet></ROW><ROW><id>18598470</id><snippet>test</snippet></ROW><ROW><id>18598470</id><snippet>script2</snippet></ROW><ROW><id>18598470</id><snippet>script1</snippet></ROW><ROW><id>18598470</id><snippet>script2</snippet></ROW><ROW><id>18598470</id><snippet>print test.func_globals</snippet></ROW><ROW><id>18598470</id><snippet>script1</snippet></ROW><ROW><id>18598772</id><snippet>current = datetime.date.today()
summer = current.replace(month=4, day=16), current.replace(month=10, day=14)

if summer[0] &lt;= current &lt;= summer[1]:
    # summer semester
else:
    # winter semester
</snippet></ROW><ROW><id>18598772</id><snippet>datetime.date()</snippet></ROW><ROW><id>18598772</id><snippet>datetime.datetime()</snippet></ROW><ROW><id>18598772</id><snippet>date.replace()</snippet></ROW><ROW><id>18598772</id><snippet>&gt;&gt;&gt; import datetime
&gt;&gt;&gt; current = datetime.date.today()
&gt;&gt;&gt; current
datetime.date(2013, 9, 3)
&gt;&gt;&gt; summer = current.replace(month=4, day=16), current.replace(month=10, day=14)
&gt;&gt;&gt; summer[0] &lt;= current &lt;= summer[1]:
True
</snippet></ROW><ROW><id>18598856</id><snippet>session</snippet></ROW><ROW><id>18598856</id><snippet>import requests

s = requests.session() # &lt;--

url = 'http://company.page.com/member/index.php'
values = {'username': 'myusernamehere',
          'password': 'mypasswordhere'}

r = s.post(url, data=values) # session.post instead of requests.post

# Now you have logged in
url = "http://company.page.com/member/member.php" (this is the resulting url after logging in)

result = s.get(url) # Use session.get and do not specify cookies.

print (result.headers)
print (result.text)
</snippet></ROW><ROW><id>18599083</id><snippet>df.groupby(['fill', 'xlabel']).mean().unstack().plot(kind='bar')
</snippet></ROW><ROW><id>18599083</id><snippet>df.pivot_table(rows='fill', cols='xlabel', values='val').plot(kind='bar')
</snippet></ROW><ROW><id>18599083</id><snippet>mean_df = df.pivot_table(rows='fill', cols='xlabel',
                         values='val', aggfunc='mean')
err_df = df.pivot_table(rows='fill', cols='xlabel',
                        values='val', aggfunc='std')

rows = len(mean_df)
cols = len(mean_df.columns)
ind = np.arange(rows)
width = 0.8 / cols
colors = 'grb'

fig, ax = plt.subplots()
for i, col in enumerate(mean_df.columns):
    ax.bar(ind + i * width, mean_df[col], width=width,
           color=colors[i], yerr=err_df[col], label=col)

ax.set_xticks(ind + cols / 2.0 * width)
ax.set_xticklabels(mean_df.index)
ax.legend()
</snippet></ROW><ROW><id>18599134</id><snippet>output</snippet></ROW><ROW><id>18599134</id><snippet>value</snippet></ROW><ROW><id>18599134</id><snippet>#+begin_src python :results value
return 1+1
#+end_src
</snippet></ROW><ROW><id>18599134</id><snippet>#+begin_src python :results output
print 1+1
#+end_src
</snippet></ROW><ROW><id>18599134</id><snippet>value</snippet></ROW><ROW><id>18599134</id><snippet>return</snippet></ROW><ROW><id>18599134</id><snippet>1+1</snippet></ROW><ROW><id>18599134</id><snippet>value</snippet></ROW><ROW><id>18599134</id><snippet>output</snippet></ROW><ROW><id>18599134</id><snippet>org-confirm-babel-evaluate</snippet></ROW><ROW><id>18599134</id><snippet>nil</snippet></ROW><ROW><id>18599427</id><snippet>LoggingEventHandler</snippet></ROW><ROW><id>18599427</id><snippet>#!/usr/bin/python
import time
from watchdog.observers import Observer
from watchdog.events import FileSystemEventHandler


class MyHandler(FileSystemEventHandler):
    def on_modified(self, event):
        print "Got it!"


if __name__ == "__main__":
    event_handler = MyHandler()
    observer = Observer()
    observer.schedule(event_handler, path='.', recursive=False)
    observer.start()

    try:
        while True:
            time.sleep(1)
    except KeyboardInterrupt:
        observer.stop()
    observer.join()
</snippet></ROW><ROW><id>18599427</id><snippet>on_modified</snippet></ROW><ROW><id>18599439</id><snippet>enumerate</snippet></ROW><ROW><id>18599439</id><snippet>S = input()
for position, character in enumerate(S):
   if character == '+':
      print(position)
      break  # break out of the loop once the character is found
</snippet></ROW><ROW><id>18599439</id><snippet>enumerate</snippet></ROW><ROW><id>18599439</id><snippet>&gt;&gt;&gt; list(enumerate("foobar"))
[(0, 'f'), (1, 'o'), (2, 'o'), (3, 'b'), (4, 'a'), (5, 'r')]
</snippet></ROW><ROW><id>18599439</id><snippet>S = input()
s_len = len(S)
for position in range(0, s_len):
   if S[position] == '+':        #use indexing to fetch items from the string.
      print(position)
</snippet></ROW><ROW><id>18599452</id><snippet>if os.path.isfile(filename):
    with open(filename) as f:
        contents = f.read()
else:
    print 'Could not locate {0}'.format(filename)
    sys.exit(1)
</snippet></ROW><ROW><id>18599543</id><snippet>if name_email.has_key(sheet.cell(row_index,i).value):
    name_email[str(sheet.cell(row_index,i).value)]=(sheet.cell(row_index,i+1).value,)
else:
    #print name_email[str(sheet.cell(row_index,i).value)]

    abc= str(sheet.cell(row_index,i).value)
    print name_email[abc]
</snippet></ROW><ROW><id>18599543</id><snippet>name_email[abc]</snippet></ROW><ROW><id>18599543</id><snippet>name_mail</snippet></ROW><ROW><id>18599543</id><snippet>abc</snippet></ROW><ROW><id>18599543</id><snippet>if x.has_key(y):
    x[y] = 1
else:
    print x[y]
</snippet></ROW><ROW><id>18599543</id><snippet>if x.has_key(y):
    print x[y]
else:
    x[y] = 1
</snippet></ROW><ROW><id>18599704</id><snippet>thread = threading.Thread(target=self.doDownloade(realAddress, saveAsFilename))
</snippet></ROW><ROW><id>18599704</id><snippet>self.doDownloade(realAddress, saveAsFilename)</snippet></ROW><ROW><id>18599704</id><snippet>None</snippet></ROW><ROW><id>18599704</id><snippet>thread = threading.Thread(target=self.doDownloade, args=(realAddress, saveAsFilename))
</snippet></ROW><ROW><id>18599704</id><snippet>self.doDownloade</snippet></ROW><ROW><id>18599704</id><snippet>thread</snippet></ROW><ROW><id>18599704</id><snippet>thread.start</snippet></ROW><ROW><id>18599704</id><snippet>wx.Timer</snippet></ROW><ROW><id>18599766</id><snippet>def sparse_col_vec_dot(csc_mat, csc_vec):
    # row numbers of vector non-zero entries
    v_rows = csc_vec.indices
    v_data = csc_vec.data
    # matrix description arrays
    m_dat = csc_mat.data
    m_ind = csc_mat.indices
    m_ptr = csc_mat.indptr
    # output arrays
    sizes = m_ptr.take(v_rows+1) - m_ptr.take(v_rows)
    sizes = np.concatenate(([0], np.cumsum(sizes)))
    data = np.empty((sizes[-1],), dtype=csc_mat.dtype)
    indices = np.empty((sizes[-1],), dtype=np.intp)
    indptr = np.zeros((2,), dtype=np.intp)

    for j in range(len(sizes)-1):
        slice_ = slice(*m_ptr[[v_rows[j] ,v_rows[j]+1]])
        np.multiply(m_dat[slice_], v_data[j], out=data[sizes[j]:sizes[j+1]])
        indices[sizes[j]:sizes[j+1]] = m_ind[slice_]
    indptr[-1] = len(data)
    ret = sps.csc_matrix((data, indices, indptr),
                         shape=csc_vec.shape)
    ret.sum_duplicates()

    return ret
</snippet></ROW><ROW><id>18599766</id><snippet>data</snippet></ROW><ROW><id>18599766</id><snippet>indices</snippet></ROW><ROW><id>18599766</id><snippet>indptr</snippet></ROW><ROW><id>18599766</id><snippet>j</snippet></ROW><ROW><id>18599766</id><snippet>data[indptr[j]:indptr[j+1]]</snippet></ROW><ROW><id>18599766</id><snippet>indices[indptr[j]:indptr[j+1]]</snippet></ROW><ROW><id>18599766</id><snippet>data</snippet></ROW><ROW><id>18599766</id><snippet>indices</snippet></ROW><ROW><id>18599766</id><snippet>(d, r)</snippet></ROW><ROW><id>18599766</id><snippet>d</snippet></ROW><ROW><id>18599766</id><snippet>data[indptr[r]:indptr[r+1]] * d</snippet></ROW><ROW><id>18599766</id><snippet>indices[indptr[r]:indptr[r+1]]</snippet></ROW><ROW><id>18599964</id><snippet>listdir</snippet></ROW><ROW><id>18599964</id><snippet>os.py</snippet></ROW><ROW><id>18599964</id><snippet>if 'posix' in _names:
    name = 'posix'
    linesep = '\n'
    from posix import *
</snippet></ROW><ROW><id>18599964</id><snippet>posixmodule.c</snippet></ROW><ROW><id>18599964</id><snippet>listdir</snippet></ROW><ROW><id>18600014</id><snippet>isinstance()</snippet></ROW><ROW><id>18600014</id><snippet>&gt;&gt;&gt; from mako.template import Template
&gt;&gt;&gt; print Template("${isinstance(a, int)}").render(a=1)
True
&gt;&gt;&gt; print Template("${isinstance(a, list)}").render(a=[1,2,3,4])
True
</snippet></ROW><ROW><id>18600014</id><snippet>from mako.template import Template
t = Template("""
% if isinstance(a, int):
    I'm an int
% else:
    I'm a list
% endif
""")


print t.render(a=1)  # prints "I'm an int"
print t.render(a=[1,2,3,4])  # prints "I'm a list"
</snippet></ROW><ROW><id>18600042</id><snippet>caps = gst.Caps('video/x-raw-yuv,width=640,height=480,framerate=30/1')
</snippet></ROW><ROW><id>18600042</id><snippet>caps = gst.Caps('video/x-raw-yuv,format=(fourcc)I420,width=640,height=480,framerate=30/1')
</snippet></ROW><ROW><id>18600042</id><snippet>format=(fourcc)I420</snippet></ROW><ROW><id>18600279</id><snippet>match</snippet></ROW><ROW><id>18600279</id><snippet>re</snippet></ROW><ROW><id>18600279</id><snippet>import re

x = 'a'
if re.match('[a-zA-Z]', x):
    print "Alpha"
</snippet></ROW><ROW><id>18600347</id><snippet>setWindowFlags</snippet></ROW><ROW><id>18600347</id><snippet>Qt.WindowMaximizeButtonHint</snippet></ROW><ROW><id>18600347</id><snippet>Qt.CustomizeWindowHint</snippet></ROW><ROW><id>18600347</id><snippet>Qt.WindowMaximizeButtonHint</snippet></ROW><ROW><id>18600347</id><snippet>setFixedSize</snippet></ROW><ROW><id>18600347</id><snippet>win.setWindowFlags(win.windowFlags() | QtCore.Qt.CustomizeWindowHint)
win.setWindowFlags(win.windowFlags() &amp; ~QtCore.Qt.WindowMaximizeButtonHint)
</snippet></ROW><ROW><id>18600347</id><snippet>from PyQt4 import QtCore
</snippet></ROW><ROW><id>18600347</id><snippet>CustomizeWindowHint</snippet></ROW><ROW><id>18600347</id><snippet>WindowMaximizeButtonHint</snippet></ROW><ROW><id>18600347</id><snippet>win.setWindowFlags(QtCore.Qt.WindowMinimizeButtonHint)
</snippet></ROW><ROW><id>18600434</id><snippet># Fixing the python path
import sys
import os

file_location = os.path.dirname(os.path.abspath(__file__))
project_dir = os.path.abspath(os.path.join(file_location, os.pardir))
if not project_dir in sys.path:
    sys.path.insert(0, project_dir)
</snippet></ROW><ROW><id>18600505</id><snippet>import datetime

class MyThread(threading.Thread)
    termination_cause = None
    termination_time = None

    #snip

    def run(self):
        try:
            # do stuff
        except Exception as e:  # I wouldn't recommend this, but you asked for it
            self.termination_cause = e  # If an Exception occurred, it will be here
        finally:
            self.termination_time = datetime.datetime.now()
</snippet></ROW><ROW><id>18600505</id><snippet>try</snippet></ROW><ROW><id>18600505</id><snippet>Exception</snippet></ROW><ROW><id>18600505</id><snippet>finally</snippet></ROW><ROW><id>18600505</id><snippet>termination_time</snippet></ROW><ROW><id>18600505</id><snippet>SystemExit</snippet></ROW><ROW><id>18600505</id><snippet>def run(self):
    try:
        while 1:
            if url_returns_404(url):
                break
            # do my thing with the URL
    finally:
        self.termination_time = datetime.datetime.now()
</snippet></ROW><ROW><id>18600603</id><snippet>In [7]: df.dtypes
Out[7]: 
a        &gt;f4
b        &gt;f4
c        &gt;f4
shots    &gt;f4
dtype: object

In [9]: df.apply(lambda x: x.values.byteswap().newbyteorder())
Out[9]: 
&lt;class 'pandas.core.frame.DataFrame'&gt;
Int64Index: 100 entries, 20000 to 20099
Data columns (total 4 columns):
a        100  non-null values
b        100  non-null values
c        100  non-null values
shots    100  non-null values
dtypes: float32(4)

In [10]: df.apply(lambda x: x.values.byteswap().newbyteorder()).dtypes
Out[10]: 
a        float32
b        float32
c        float32
shots    float32
dtype: object
</snippet></ROW><ROW><id>18600603</id><snippet>df.set_index('shots',inplace=True)
</snippet></ROW><ROW><id>18600623</id><snippet>{% extends "layout.html" %}
{% set active_page = "index" %}
</snippet></ROW><ROW><id>18600623</id><snippet>{% set navigation_bar = [
    ('/', 'index', 'Index'),
    ('/downloads/', 'downloads', 'Downloads'),
    ('/about/', 'about', 'About')
] -%}

{% set active_page = active_page|default('index') -%}
...
&lt;ul id="navigation"&gt;
    {% for href, id, caption in navigation_bar %}
    &lt;li{% if id == active_page %} class="active"{% endif
    %}&gt;&lt;a href="{{ href|e }}"&gt;{{ caption|e }}&lt;/a&gt;
    &lt;/li&gt;
{% endfor %}
&lt;/ul&gt;
</snippet></ROW><ROW><id>18600739</id><snippet>driver.find_element_by_css_selector(".test_button4[value='Update']").click()
</snippet></ROW><ROW><id>18600739</id><snippet>class</snippet></ROW><ROW><id>18600739</id><snippet>id</snippet></ROW><ROW><id>18600739</id><snippet>tagname</snippet></ROW><ROW><id>18600739</id><snippet>value.Update</snippet></ROW><ROW><id>18600739</id><snippet>.test_button4</snippet></ROW><ROW><id>18600739</id><snippet>[value='Update']</snippet></ROW><ROW><id>18600869</id><snippet>re.escape</snippet></ROW><ROW><id>18600869</id><snippet>def my_re_escape(regex):
    regex = re.escape(regex)
    regex = regex.replace('foo', 'bar')
    # etc
    return regex
</snippet></ROW><ROW><id>18601018</id><snippet>In [2]: numpy.r_
Out[2]: &lt;numpy.lib.index_tricks.RClass at 0x1923710&gt;
</snippet></ROW><ROW><id>18601018</id><snippet>__getitem__</snippet></ROW><ROW><id>18601018</id><snippet>[something,something...something]</snippet></ROW><ROW><id>18601018</id><snippet>numpy.r_</snippet></ROW><ROW><id>18601018</id><snippet>class myClass(object)
    def __getitem__(self,i)
    return i*2
</snippet></ROW><ROW><id>18601018</id><snippet>In [1]: a = myClass()

In [2]: a[3]
Out[2]: 6

In [3]: a[3,4]
Out[3]: (3, 4, 3, 4)
</snippet></ROW><ROW><id>18601018</id><snippet>__getitem__</snippet></ROW><ROW><id>18601018</id><snippet>[]</snippet></ROW><ROW><id>18601018</id><snippet>__getitem__</snippet></ROW><ROW><id>18601018</id><snippet>__getitem__</snippet></ROW><ROW><id>18601018</id><snippet>myClass</snippet></ROW><ROW><id>18601018</id><snippet>myClass</snippet></ROW><ROW><id>18601018</id><snippet>a = myClass()</snippet></ROW><ROW><id>18601018</id><snippet>RClass</snippet></ROW><ROW><id>18601018</id><snippet>numpy.r_</snippet></ROW><ROW><id>18601018</id><snippet>RClass</snippet></ROW><ROW><id>18601278</id><snippet>import socket

class TestClient(object):
    _buffer = ""

    def __init__(self, host, port):
        self.socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
        self.connect((host, port))

    def writable(self):
        return (len(self._buffer) &gt; 0)

    def write(self):
        while self.writable():
            sent = self.send(self._buffer)
            self.buffer = self._buffer[sent:]

    def link(self, name):
        return name.replace(' ', '%20')

    def sendArtist(self, artist):
        print "here"
        self._buffer = self.link(artist)
        self.write()
</snippet></ROW><ROW><id>18601296</id><snippet>get</snippet></ROW><ROW><id>18601296</id><snippet>&gt;&gt;&gt; h = dict()
&gt;&gt;&gt; h.get('a', 1)
1
&gt;&gt;&gt; h
{}
</snippet></ROW><ROW><id>18601296</id><snippet>[]</snippet></ROW><ROW><id>18601296</id><snippet>[]</snippet></ROW><ROW><id>18601296</id><snippet>&gt;&gt;&gt; h['a']
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
KeyError: 'a'
&gt;&gt;&gt; h
{}
</snippet></ROW><ROW><id>18601296</id><snippet>&gt;&gt;&gt; h['a'] = 1
&gt;&gt;&gt; h
{'a': 1}
</snippet></ROW><ROW><id>18601303</id><snippet>version</snippet></ROW><ROW><id>18601303</id><snippet>main</snippet></ROW><ROW><id>18601303</id><snippet>#!/path/to/rdmd --shebang -version=run
version(run) void main() {}
</snippet></ROW><ROW><id>18601303</id><snippet>chmod +x foo.d</snippet></ROW><ROW><id>18601303</id><snippet>./foo.d</snippet></ROW><ROW><id>18601507</id><snippet>list2cmdline</snippet></ROW><ROW><id>18601507</id><snippet>subprocess.check_output</snippet></ROW><ROW><id>18601507</id><snippet>import os

output = []

for _, _, files in os.walk(directory):
    for f in files:
        fullpath = os.path.join(directory, os.path.basename(f))
        output.append(subprocess.check_output([fullpath]))

print '\n'.join(output)
</snippet></ROW><ROW><id>18601523</id><snippet>result = numeric_value * a_bool</snippet></ROW><ROW><id>18601523</id><snippet>result = numeric_value if a_bool else 0</snippet></ROW><ROW><id>18601523</id><snippet>result = (value_if_false, value_if_true)[a_bool]</snippet></ROW><ROW><id>18601523</id><snippet>bool</snippet></ROW><ROW><id>18601523</id><snippet>int</snippet></ROW><ROW><id>18601682</id><snippet>import sqlite3</snippet></ROW><ROW><id>18601682</id><snippet>Elixir</snippet></ROW><ROW><id>18601693</id><snippet>read_csv</snippet></ROW><ROW><id>18601693</id><snippet>In [1]: df = pd.read_csv('foo.csv', header=None)

In [2]: df
Out[2]: 
   0         1
0  0  0.487130
1  0  0.248932
2  0  0.248932
3  1  0.405285
4  1  0.405285
5  1  0.405285
6  1  0.405285
</snippet></ROW><ROW><id>18601693</id><snippet>In [3]: df[2] = df[1].round()

In [4]: df
Out[4]: 
   0         1  2
0  0  0.487130  0
1  0  0.248932  0
2  0  0.248932  0
3  1  0.405285  0
4  1  0.405285  0
5  1  0.405285  0
6  1  0.405285  0
</snippet></ROW><ROW><id>18601693</id><snippet>In [11]: s = StringIO()

In [12]: df.to_csv(s, header=None, index=False)
# alternatively write to file with df.to_csv('foo.csv', header=None, index=False)

In [13]: print(s.getvalue())
0.0,0.4871303471776849,0.0
0.0,0.2489319061991417,0.0
0.0,0.2489319061991417,0.0
1.0,0.4052854182229446,0.0
1.0,0.4052854182229446,0.0
1.0,0.4052854182229446,0.0
1.0,0.4052854182229446,0.0
</snippet></ROW><ROW><id>18601730</id><snippet>csv.py</snippet></ROW><ROW><id>18601730</id><snippet>Finacial.py</snippet></ROW><ROW><id>18601730</id><snippet>csv</snippet></ROW><ROW><id>18601730</id><snippet>/home/definity/Desktop/Cloud/code/Python/csv.py</snippet></ROW><ROW><id>18601730</id><snippet>/home/definity/Desktop/Cloud/code/Python/csv.pyc</snippet></ROW><ROW><id>18601730</id><snippet>csv</snippet></ROW><ROW><id>18601802</id><snippet>len</snippet></ROW><ROW><id>18601802</id><snippet>def len(x):
    if type(x) == str:
        # compute the length of a string
    elif type(x) == list:
        # compute the length of a list
    else:
        #
</snippet></ROW><ROW><id>18601802</id><snippet>len</snippet></ROW><ROW><id>18601802</id><snippet>len</snippet></ROW><ROW><id>18601802</id><snippet>str</snippet></ROW><ROW><id>18601802</id><snippet>def len(x):
    return x.__len__()
</snippet></ROW><ROW><id>18601802</id><snippet>__len__</snippet></ROW><ROW><id>18601802</id><snippet>len</snippet></ROW><ROW><id>18601859</id><snippet>Text Item Delimiters</snippet></ROW><ROW><id>18601859</id><snippet>set ASTID to AppleScript's text item delimiters
tell application "iTunes"
    repeat with song in (selection of browser window 1)
        set the_name to name of song
        if the_name contains " - " then
            set AppleScript's text item delimiters to ("- ")
            set the_name to text items of the_name
            set AppleScript's text item delimiters to ("(")
            set the_name to (the_name as string) &amp; ")"
            set name of song to the_name
        end if
    end repeat
    set AppleScript's text item delimiters to ASTID
end tell
</snippet></ROW><ROW><id>18601876</id><snippet>six</snippet></ROW><ROW><id>18601876</id><snippet>b()</snippet></ROW><ROW><id>18601876</id><snippet>binary_type</snippet></ROW><ROW><id>18601897</id><snippet>socket</snippet></ROW><ROW><id>18601897</id><snippet>import socket
def guard(*args, **kwargs):
    raise Exception("I told you not to use the Internet!")
socket.socket = guard
</snippet></ROW><ROW><id>18602080</id><snippet>getattr()</snippet></ROW><ROW><id>18602080</id><snippet>with</snippet></ROW><ROW><id>18602080</id><snippet>for i in xrange(1, 3):
    if os.path.exists("data/ao-%d.dat" % i):
        with open("data/ao-%d.dat" % i) as f:
            logininfo = f.read().split()

        text = logininfo[0] if logininfo[0] else "Save"
        getattr(self.AccountsList, 'connect_%d' % i).SetText(text)
    else:
        getattr(self.AccountsList, 'connect_%d' % i).SetText("Save")
</snippet></ROW><ROW><id>18602080</id><snippet>loginInfo</snippet></ROW><ROW><id>18602080</id><snippet>logininfo</snippet></ROW><ROW><id>18602141</id><snippet>if __name__ == "__main__":
    t1 = threading.Thread(name="Hello1", target=testForThread1()) # &lt;&lt;-- here
    t1.start()
</snippet></ROW><ROW><id>18602141</id><snippet>if __name__ == "__main__":
    result = testForThread1() # == 'ok', this is the blocking execution
    t1 = threading.Thread(name="Hello1", target=result) 
    t1.start()
</snippet></ROW><ROW><id>18602141</id><snippet>Thread.start()</snippet></ROW><ROW><id>18602141</id><snippet>if __name__ == "__main__":
    t1 = threading.Thread(name="Hello1", target=testForThread1) # tell thread what the target function is
    # notice no function call braces for the function "testForThread1"
    t1.start() # tell the thread to execute the target function
</snippet></ROW><ROW><id>18602273</id><snippet>.</snippet></ROW><ROW><id>18602273</id><snippet>.</snippet></ROW><ROW><id>18602273</id><snippet>sed 's/\..*$//' data.txt &gt; cleaned.txt
sed 's/[.].*$//' data.txt &gt; cleaned.txt
</snippet></ROW><ROW><id>18602273</id><snippet>'s/\.*//'</snippet></ROW><ROW><id>18602273</id><snippet>'s/\..*//'</snippet></ROW><ROW><id>18602273</id><snippet>$</snippet></ROW><ROW><id>18602321</id><snippet>{% for athlete in athlete_list|slice:"10:20" %}
    &lt;li&gt;{{ athlete.name }}&lt;/li&gt;
{% endfor %}
</snippet></ROW><ROW><id>18602321</id><snippet>range</snippet></ROW><ROW><id>18602321</id><snippet>range</snippet></ROW><ROW><id>18602321</id><snippet>it is trying to lead to programming in the template.</snippet></ROW><ROW><id>18602355</id><snippet>df = pd.read_csv(location, names=names, header=None, delim_whitespace=True)
</snippet></ROW><ROW><id>18602584</id><snippet>while</snippet></ROW><ROW><id>18602584</id><snippet>for</snippet></ROW><ROW><id>18602584</id><snippet>compound_stmt ::=  if_stmt
                   | while_stmt
                   | for_stmt
                   | try_stmt
                   | with_stmt
                   | funcdef
                   | classdef
                   | decorated
suite         ::=  stmt_list NEWLINE | NEWLINE INDENT statement+ DEDENT
statement     ::=  stmt_list NEWLINE | compound_stmt
stmt_list     ::=  simple_stmt (";" simple_stmt)* [";"]
</snippet></ROW><ROW><id>18602584</id><snippet>compound_stmt</snippet></ROW><ROW><id>18602584</id><snippet>simple_stmt</snippet></ROW><ROW><id>18602584</id><snippet>simple_stmt ::=  expression_stmt
                 | assert_stmt
                 | assignment_stmt
                 | augmented_assignment_stmt
                 | pass_stmt
                 | del_stmt
                 | print_stmt
                 | return_stmt
                 | yield_stmt
                 | raise_stmt
                 | break_stmt
                 | continue_stmt
                 | import_stmt
                 | global_stmt
                 | exec_stmt
</snippet></ROW><ROW><id>18602856</id><snippet>connect_timeout</snippet></ROW><ROW><id>18602856</id><snippet>MySQLdb.connect</snippet></ROW><ROW><id>18603043</id><snippet>up_text = urlopen(up_url)
</snippet></ROW><ROW><id>18603045</id><snippet>In [11]: (a.A == b.A) &amp; ((a.B == b.E) | (a.C == b.E)) # they all satisfy this requirement!
Out[11]: 
0    True
1    True
2    True
3    True
dtype: bool

In [12]: b.D[(a.A == b.A) &amp; ((a.B == b.E) | (a.C == b.E))]
Out[12]: 
0    0
1    1
2    0
3    0
Name: D, dtype: int64

In [13]: a['NEW'] = b.D[(a.A == b.A) &amp; ((a.B == b.E) | (a.C == b.E))]

In [14]: a
Out[14]: 
     A  B  C  NEW
0  foo  1  4    0
1  goo  2  3    1
2  doo  3  1    0
3  boo  4  2    0
</snippet></ROW><ROW><id>18603045</id><snippet>In [21]: merged = pd.merge(a, b, on='id')

In [22]: matching = merged[(merged.left == merged.left_and_right) | (merged.right == merged.left_and_right)]

In [23]: (matching.groupby(['id', 'left', 'right'])['boolen'].sum()).reset_index()
Out[23]: 
    id  left  right  boolen
0  id1     2      3       1
1  id1     5      4       1
2  id1     6      1       0
3  id2     1      5       2
4  id2     2      6       0
5  id2     4      3       1
6  id3     2      3       1
7  id3     4      2       0
8  id3     5      6       1
</snippet></ROW><ROW><id>18603045</id><snippet>In [24]: (matching.groupby(['id', 'left', 'right'])['boolen'].sum() &gt; 0).reset_index()
Out[24]: 
    id  left  right boolen
0  id1     2      3   True
1  id1     5      4   True
2  id1     6      1  False
3  id2     1      5   True
4  id2     2      6  False
5  id2     4      3   True
6  id3     2      3   True
7  id3     4      2  False
8  id3     5      6   True
</snippet></ROW><ROW><id>18603172</id><snippet>class Foo(object):
    # something here
    pass

a = Foo()
b = Foo()
c = Foo()

print a.__name # a
print b.__name # b
print c.__name # c
</snippet></ROW><ROW><id>18603172</id><snippet>&gt;&gt;&gt; class Foo(object):
...     pass
...
&gt;&gt;&gt;
&gt;&gt;&gt; a = Foo()
&gt;&gt;&gt; b = a
&gt;&gt;&gt; c = b
&gt;&gt;&gt;
&gt;&gt;&gt; print a
&lt;__main__.Foo object at 0x01765B70&gt;
&gt;&gt;&gt; print b
&lt;__main__.Foo object at 0x01765B70&gt;
&gt;&gt;&gt; print c
&lt;__main__.Foo object at 0x01765B70&gt;
&gt;&gt;&gt;
</snippet></ROW><ROW><id>18603172</id><snippet>class Foo(object):
    pass

a = [Foo(), Foo(), Foo()]
</snippet></ROW><ROW><id>18603172</id><snippet>&gt;&gt;&gt; class Foo(object):
...     def __init__(self, name):
...         self.__name__ = name
...
&gt;&gt;&gt; a = Foo('a')
&gt;&gt;&gt; b = Foo('b')
&gt;&gt;&gt; c = Foo('c')
&gt;&gt;&gt;
&gt;&gt;&gt; a.__name__
'a'
&gt;&gt;&gt; b.__name__
'b'
&gt;&gt;&gt; c.__name__
'c'
&gt;&gt;&gt;
</snippet></ROW><ROW><id>18603214</id><snippet>?</snippet></ROW><ROW><id>18603214</id><snippet>pathList = glob.glob("./%s/19??@60??_npo/" % path)
</snippet></ROW><ROW><id>18603233</id><snippet>south</snippet></ROW><ROW><id>18603233</id><snippet>run ./manage.py syncdb --all</snippet></ROW><ROW><id>18603233</id><snippet>south_migrationhistory</snippet></ROW><ROW><id>18603233</id><snippet>run ./manage.py migrate</snippet></ROW><ROW><id>18603233</id><snippet>migrated</snippet></ROW><ROW><id>18603254</id><snippet>u = ['abc', 'de', 'fghi', 'jklm', 'n', '']
v = []
for item in u:
     v.append(len(item))
print v
</snippet></ROW><ROW><id>18603507</id><snippet>arr = { 
'pincode':'pincode',
'username':'username',
'password':'password',
'action':'action',
'forward':'forward'
}
myname="myname"
print """my pincode is: %s and my name is: %s !""" % (arr['pincode'], myname)
</snippet></ROW><ROW><id>18603507</id><snippet>print 'my pincode is: {pincode} and my name is: {myname} !'.format(
       myname=myname, **arr)
</snippet></ROW><ROW><id>18603507</id><snippet>myname</snippet></ROW><ROW><id>18603507</id><snippet>**arr</snippet></ROW><ROW><id>18603515</id><snippet>from django import db
db.close_connection()
</snippet></ROW><ROW><id>18603863</id><snippet>from difflib import SequenceMatcher

li = [\
([u'Houston', u'Alabama'],
 [u'Houst', u'Alab']),

([u'Florida State', u'North Carolina State'],
 [u'NCSt', u'FlaSt']),

([u'Penn State', u'Iowa'],
 [u'PnSt', u'Iowa']),

([u'Oklahoma', u'Texas'],
 [u'Texas', u'Okla']),

([u'Florida Atlantic', u'South Florida'],
 [u'SFla', u'FlAtl']),

([u'Georgia', u'Tennessee'],
 [u'Geo', u'Tenn']),

([u'San Jose State', u'Idaho'],
 [u'UI', u'SJSU']),

([u'Washington State', u'Arizona State'],
 [u'ArzSt', u'WshSt']),

([u'Fresno State', u'Nevada'],
 [u'Nevad', u'FrsSt']),

([u'Oregon State', u'Arizona'],
 [u'ARIZ', u'OSU']),

([u'Clemson', u'Virginia Tech'],
 [u'VTech', u'Clem']),

([u'Chattanooga', u'Arkansas'],
 [u'UTC', u'AR']),

([u'USC', u'Stanford'],
 [u'USC', u'Stanf']),

([u'Baylor', u'Colorado'],
 [u'BU', u'CU']),

([u'North Texas', u'Louisiana-Lafayette'],
 [u'NoTex', u'LaLaf']),

([u'Tulane', u'Army'],
 [u'TLN', u'ARMY']),

([u'Troy', u'Florida International'],
 [u'TROY', u'FIU']),

([u'Louisiana-Monroe', u'Arkansas State'],
 [u'ASU', u'ULM']),

([u'Texas Tech', u'Iowa State'],
 [u'TT', u'ISU']),

([u'Akron', u'Western Michigan'],
 [u'AKRON', u'WMU']),

([u'Liberty', u'Toledo'],
 [u'LIBERTY', u'TOLEDO']),

([u'Virginia', u'Middle Tennessee'],
 [u'Virg', u'MTnSt']),

([u'Oklahoma State', u'Texas A&amp;M'],
 [u'TexAM', u'OKSt']),

([u'Notre Dame', u'UCLA'],
 [u'NDame', u'UCLA']),

([u'Rutgers', u'Cincinnati'],
 [u'Cincy', u'Rutgr']),

([u'Ohio State', u'Purdue'],
 [u'Prdue', u'OhSt']),

([u'LSU', u'Florida'],
 [u'Fla', u'LSU']),

([u'Air Force', u'UNLV'],
 [u'AFA', u'UNLV']),

([u'Nebraska', u'Missouri'],
 [u'Misso', u'Neb']),

([u'New Mexico State', u'Boise State'],
 [u'NMxSt', u'BoiSt']),

([u'Pittsburgh', u'Navy'],
 [u'Navy', u'Pitt']),

([u'Wake Forest', u'Florida State'],
 [u'WFrst', u'FlaSt']),

([u'San Jose State', u'Hawaii'],
 [u'Hawa', u'SJSt']),

([u'UCF', u'South Florida'],
 [u'UCF', u'SFla']) ]


def comp(N,D,sq = SequenceMatcher(None)):
    sq.set_seqs(N[0],D[0])
    a = sq.ratio()
    sq.set_seqs(N[1],D[1])
    b = sq.ratio()

    sq.set_seqs(N[0],D[1])
    x = sq.ratio()
    sq.set_seqs(N[1],D[0])
    y = sq.ratio()

    if a&gt;x and b&gt;y:
        return (N[0],D[0]), (N[1],D[1])
    else:
        return (N[0],D[1]),(N[1],D[0])


print '\n'.join('%-30s   %s' % comp(N,D) for N,D in li)
</snippet></ROW><ROW><id>18603863</id><snippet>(u'Houston', u'Houst')             (u'Alabama', u'Alab')
(u'Florida State', u'FlaSt')       (u'North Carolina State', u'NCSt')
(u'Penn State', u'PnSt')           (u'Iowa', u'Iowa')
(u'Oklahoma', u'Okla')             (u'Texas', u'Texas')
(u'Florida Atlantic', u'FlAtl')    (u'South Florida', u'SFla')
(u'Georgia', u'Geo')               (u'Tennessee', u'Tenn')
(u'San Jose State', u'SJSU')       (u'Idaho', u'UI')
(u'Washington State', u'WshSt')    (u'Arizona State', u'ArzSt')
(u'Fresno State', u'FrsSt')        (u'Nevada', u'Nevad')
(u'Oregon State', u'OSU')          (u'Arizona', u'ARIZ')
(u'Clemson', u'Clem')              (u'Virginia Tech', u'VTech')
(u'Chattanooga', u'UTC')           (u'Arkansas', u'AR')
(u'USC', u'USC')                   (u'Stanford', u'Stanf')
(u'Baylor', u'BU')                 (u'Colorado', u'CU')
(u'North Texas', u'NoTex')         (u'Louisiana-Lafayette', u'LaLaf')
(u'Tulane', u'TLN')                (u'Army', u'ARMY')
(u'Troy', u'TROY')                 (u'Florida International', u'FIU')
(u'Louisiana-Monroe', u'ULM')      (u'Arkansas State', u'ASU')
(u'Texas Tech', u'TT')             (u'Iowa State', u'ISU')
(u'Akron', u'AKRON')               (u'Western Michigan', u'WMU')
(u'Liberty', u'TOLEDO')            (u'Toledo', u'LIBERTY')
(u'Virginia', u'Virg')             (u'Middle Tennessee', u'MTnSt')
(u'Oklahoma State', u'OKSt')       (u'Texas A&amp;M', u'TexAM')
(u'Notre Dame', u'NDame')          (u'UCLA', u'UCLA')
(u'Rutgers', u'Rutgr')             (u'Cincinnati', u'Cincy')
(u'Ohio State', u'OhSt')           (u'Purdue', u'Prdue')
(u'LSU', u'LSU')                   (u'Florida', u'Fla')
(u'Air Force', u'AFA')             (u'UNLV', u'UNLV')
(u'Nebraska', u'Neb')              (u'Missouri', u'Misso')
(u'New Mexico State', u'NMxSt')    (u'Boise State', u'BoiSt')
(u'Pittsburgh', u'Pitt')           (u'Navy', u'Navy')
(u'Wake Forest', u'WFrst')         (u'Florida State', u'FlaSt')
(u'San Jose State', u'SJSt')       (u'Hawaii', u'Hawa')
(u'UCF', u'UCF')                   (u'South Florida', u'SFla')
</snippet></ROW><ROW><id>18603863</id><snippet>from difflib import SequenceMatcher

li = [\
 ([u'Liberty', u'Toledo'], #######
 [u'LIBERTY', u'TOLEDO']),

([u'Chattanooga', u'Arkansas'], ################
 [u'UTC', u'AR']),

([u'Texas Tech', u'Iowa State'], ###########
 [u'TT', u'ISU'])  ]


def comp(N,D,sq = SequenceMatcher(None)):
    sq.set_seqs(N[0],D[0])
    a = sq.ratio()
    sq.set_seqs(N[1],D[1])
    b = sq.ratio()

    sq.set_seqs(N[0],D[1])
    x = sq.ratio()
    sq.set_seqs(N[1],D[0])
    y = sq.ratio()

    sq.set_seqs(N[0].lower(),D[0].lower())
    al = sq.ratio()
    sq.set_seqs(N[1].lower(),D[1].lower())
    bl = sq.ratio()

    sq.set_seqs(N[0].lower(),D[1].lower())
    xl = sq.ratio()
    sq.set_seqs(N[1].lower(),D[0].lower())
    yl = sq.ratio()

    return ((N[0],D[0]), (N[1],D[1]),
            a,b,a*b,a+b,
            (N[0].lower(),D[0].lower()), (N[1].lower(),D[1].lower()),
            al,bl,al*bl,al+bl,
            (N[0],D[1]),(N[1],D[0]),
            x,y,x*y,x+y,
            (N[0].lower(),D[1].lower()),(N[1].lower(),D[0].lower()),
            xl,yl,xl*yl,xl+yl)

print '\n'.join(('====='*14)+ '\n'
                '%-25s   %s\n'
                '    %-10f                  %f       --&gt;   x%f  +%f\n'
                '%-25s   %s\n'
                '    %-10f                  %f       --&gt;   x%f  +%f\n\n'
                '%-25s   %s\n'
                '    %-10f                  %f       --&gt;   x%f  +%f\n'
                '%-25s   %s\n'
                '    %-10f                  %f       --&gt;   x%f  +%f\n'
                % comp(N,D) for N,D in li)
</snippet></ROW><ROW><id>18603863</id><snippet>======================================================================
(u'Liberty', u'LIBERTY')    (u'Toledo', u'TOLEDO')
    0.142857                    0.166667       --&gt;   x0.023810  +0.309524
(u'liberty', u'liberty')    (u'toledo', u'toledo')
    1.000000                    1.000000       --&gt;   x1.000000  +2.000000

(u'Liberty', u'TOLEDO')     (u'Toledo', u'LIBERTY')
    0.153846                    0.153846       --&gt;   x0.023669  +0.307692
(u'liberty', u'toledo')     (u'toledo', u'liberty')
    0.307692                    0.153846       --&gt;   x0.047337  +0.461538

======================================================================
(u'Chattanooga', u'UTC')    (u'Arkansas', u'AR')
    0.142857                    0.200000       --&gt;   x0.028571  +0.342857
(u'chattanooga', u'utc')    (u'arkansas', u'ar')
    0.142857                    0.400000       --&gt;   x0.057143  +0.542857

(u'Chattanooga', u'AR')     (u'Arkansas', u'UTC')
    0.000000                    0.000000       --&gt;   x0.000000  +0.000000
(u'chattanooga', u'ar')     (u'arkansas', u'utc')
    0.153846                    0.000000       --&gt;   x0.000000  +0.153846

======================================================================
(u'Texas Tech', u'TT')      (u'Iowa State', u'ISU')
    0.333333                    0.307692       --&gt;   x0.102564  +0.641026
(u'texas tech', u'tt')      (u'iowa state', u'isu')
    0.333333                    0.307692       --&gt;   x0.102564  +0.641026

(u'Texas Tech', u'ISU')     (u'Iowa State', u'TT')
    0.000000                    0.000000       --&gt;   x0.000000  +0.000000
(u'texas tech', u'isu')     (u'iowa state', u'tt')
    0.153846                    0.333333       --&gt;   x0.051282  +0.487179
</snippet></ROW><ROW><id>18603863</id><snippet>(u'Liberty', u'LIBERTY')</snippet></ROW><ROW><id>18603863</id><snippet>(u'Liberty', u'TOLEDO')</snippet></ROW><ROW><id>18603863</id><snippet>a&gt;x and b&gt;y</snippet></ROW><ROW><id>18603863</id><snippet>(u'Liberty', u'TOLEDO')</snippet></ROW><ROW><id>18603863</id><snippet>(u'Toledo', u'TOLEDO')</snippet></ROW><ROW><id>18603863</id><snippet>(u'Toledo', u'LIBERTY')</snippet></ROW><ROW><id>18603863</id><snippet>(u'Toledo', u'TOLEDO')</snippet></ROW><ROW><id>18603863</id><snippet>lower()</snippet></ROW><ROW><id>18603863</id><snippet>(u'liberty', u'liberty')</snippet></ROW><ROW><id>18603863</id><snippet>(u'toledo', u'toledo')</snippet></ROW><ROW><id>18603863</id><snippet>lower()</snippet></ROW><ROW><id>18603863</id><snippet>lower()</snippet></ROW><ROW><id>18603863</id><snippet>(u'Chattanooga', u'AR')</snippet></ROW><ROW><id>18603863</id><snippet>(u'Arkansas', u'UTC')</snippet></ROW><ROW><id>18603863</id><snippet>(u'Chattanooga', u'UTC')           (u'Arkansas', u'AR')</snippet></ROW><ROW><id>18603863</id><snippet>lower()</snippet></ROW><ROW><id>18603863</id><snippet>(u'chattanooga', u'utc')</snippet></ROW><ROW><id>18603863</id><snippet>(u'chattanooga', u'ar')</snippet></ROW><ROW><id>18603863</id><snippet>(u'chattanooga', u'utc')</snippet></ROW><ROW><id>18603863</id><snippet>(u'chattanooga', u'ar')</snippet></ROW><ROW><id>18603863</id><snippet>(u'Chattanooga', u'AR')          (u'Arkansas', u'UTC')</snippet></ROW><ROW><id>18603863</id><snippet>(u'Texas Tech', u'ISU')            (u'Iowa State', u'TT')</snippet></ROW><ROW><id>18603863</id><snippet>(u'Texas Tech', u'TT')             (u'Iowa State', u'ISU')</snippet></ROW><ROW><id>18603863</id><snippet>(u'iowa state', u'tt')</snippet></ROW><ROW><id>18603863</id><snippet>(u'iowa state', u'isu')</snippet></ROW><ROW><id>18603863</id><snippet>u'AR'</snippet></ROW><ROW><id>18603863</id><snippet>u'TT'</snippet></ROW><ROW><id>18603863</id><snippet>'chattanooga'</snippet></ROW><ROW><id>18603863</id><snippet>u'texas tech'</snippet></ROW><ROW><id>18603863</id><snippet>a&gt;x and b&gt;y</snippet></ROW><ROW><id>18603863</id><snippet>a&gt;x</snippet></ROW><ROW><id>18603863</id><snippet>b&gt;y</snippet></ROW><ROW><id>18603863</id><snippet>a&gt;x</snippet></ROW><ROW><id>18603863</id><snippet>b&gt;y</snippet></ROW><ROW><id>18603863</id><snippet>from difflib import SequenceMatcher

li = [\
([u'Houston', u'Alabama'],
 [u'Houst', u'Alab']),

([u'Florida State', u'North Carolina State'],
 [u'NCSt', u'FlaSt']),

([u'Penn State', u'Iowa'],
 [u'PnSt', u'Iowa']),

([u'Oklahoma', u'Texas'],
 [u'Texas', u'Okla']),

([u'Florida Atlantic', u'South Florida'],
 [u'SFla', u'FlAtl']),

([u'Georgia', u'Tennessee'],
 [u'Geo', u'Tenn']),

([u'San Jose State', u'Idaho'],
 [u'UI', u'SJSU']),

([u'Washington State', u'Arizona State'],
 [u'ArzSt', u'WshSt']),

([u'Fresno State', u'Nevada'],
 [u'Nevad', u'FrsSt']),

([u'Oregon State', u'Arizona'],
 [u'ARIZ', u'OSU']),

([u'Clemson', u'Virginia Tech'],
 [u'VTech', u'Clem']),

([u'Chattanooga', u'Arkansas'],
 [u'UTC', u'AR']),

([u'USC', u'Stanford'],
 [u'USC', u'Stanf']),

([u'Baylor', u'Colorado'],
 [u'BU', u'CU']),

([u'North Texas', u'Louisiana-Lafayette'],
 [u'NoTex', u'LaLaf']),

([u'Tulane', u'Army'],
 [u'TLN', u'ARMY']),

([u'Troy', u'Florida International'],
 [u'TROY', u'FIU']),

([u'Louisiana-Monroe', u'Arkansas State'],
 [u'ASU', u'ULM']),

([u'Texas Tech', u'Iowa State'],
 [u'TT', u'ISU']),

([u'Akron', u'Western Michigan'],
 [u'AKRON', u'WMU']),

([u'Liberty', u'Toledo'],
 [u'LIBERTY', u'TOLEDO']),

([u'Virginia', u'Middle Tennessee'],
 [u'Virg', u'MTnSt']),

([u'Oklahoma State', u'Texas A&amp;M'],
 [u'TexAM', u'OKSt']),

([u'Notre Dame', u'UCLA'],
 [u'NDame', u'UCLA']),

([u'Rutgers', u'Cincinnati'],
 [u'Cincy', u'Rutgr']),

([u'Ohio State', u'Purdue'],
 [u'Prdue', u'OhSt']),

([u'LSU', u'Florida'],
 [u'Fla', u'LSU']),

([u'Air Force', u'UNLV'],
 [u'AFA', u'UNLV']),

([u'Nebraska', u'Missouri'],
 [u'Misso', u'Neb']),

([u'New Mexico State', u'Boise State'],
 [u'NMxSt', u'BoiSt']),

([u'Pittsburgh', u'Navy'],
 [u'Navy', u'Pitt']),

([u'Wake Forest', u'Florida State'],
 [u'WFrst', u'FlaSt']),

([u'San Jose State', u'Hawaii'],
 [u'Hawa', u'SJSt']),

([u'UCF', u'South Florida'],
 [u'UCF', u'SFla']) ]

def comp(N,D,sq = SequenceMatcher(None)):
    sq.set_seqs(N[0],D[0])
    a = sq.ratio()
    sq.set_seqs(N[1],D[1])
    b = sq.ratio()

    sq.set_seqs(N[0],D[1])
    x = sq.ratio()
    sq.set_seqs(N[1],D[0])
    y = sq.ratio()

    sq.set_seqs(N[0].lower(),D[0].lower())
    al = sq.ratio()
    sq.set_seqs(N[1].lower(),D[1].lower())
    bl = sq.ratio()

    sq.set_seqs(N[0].lower(),D[1].lower())
    xl = sq.ratio()
    sq.set_seqs(N[1].lower(),D[0].lower())
    yl = sq.ratio()

    if ((a&gt;0.5 and b&gt;0.5 and a+b&gt;1.4)
        or (al&gt;0.5 and bl&gt;0.5 and al+bl&gt;1.4)):
        return (N[0],D[0]), (N[1],D[1])
    elif ((x&gt;0.4 and y&gt;0.4 and x+y&gt;1.4)
          or (xl&gt;0.4 and yl&gt;0.4 and xl+yl&gt;1.4)):
        return (N[0],D[1]), (N[1],D[0])
    elif x+y==0.0 and a+b&gt;0.1:
        return (N[0],D[0]), (N[1],D[1])
    elif a+b==0.00 and x+y&gt;0.1:
        return (N[0],D[1]), (N[1],D[0])
    elif a+b &gt; x + y + 0.5:
        return (N[0],D[0]), (N[1],D[1])
    elif x+y &gt; a + b + 0.5:
        return (N[0],D[1]), (N[1],D[0])
    elif a+b &gt; x + y:
        return (N[0],D[0]), (N[1],D[1])
    elif x+y &gt; a + b:
        return (N[0],D[1]), (N[1],D[0])


print '\n'.join('%-30s   %s' % comp(N,D) for N,D in li)
</snippet></ROW><ROW><id>18603863</id><snippet>(u'Houston', u'Houst')           (u'Alabama', u'Alab')
(u'Florida State', u'FlaSt')     (u'North Carolina State', u'NCSt')
(u'Penn State', u'PnSt')         (u'Iowa', u'Iowa')
(u'Oklahoma', u'Okla')           (u'Texas', u'Texas')
(u'Florida Atlantic', u'FlAtl')   (u'South Florida', u'SFla')
(u'Georgia', u'Geo')             (u'Tennessee', u'Tenn')
(u'San Jose State', u'SJSU')     (u'Idaho', u'UI')
(u'Washington State', u'WshSt')   (u'Arizona State', u'ArzSt')
(u'Fresno State', u'FrsSt')      (u'Nevada', u'Nevad')
(u'Oregon State', u'OSU')        (u'Arizona', u'ARIZ')
(u'Clemson', u'Clem')            (u'Virginia Tech', u'VTech')
(u'Chattanooga', u'UTC')         (u'Arkansas', u'AR')
(u'USC', u'USC')                 (u'Stanford', u'Stanf')
(u'Baylor', u'BU')               (u'Colorado', u'CU')
(u'North Texas', u'NoTex')       (u'Louisiana-Lafayette', u'LaLaf')
(u'Tulane', u'TLN')              (u'Army', u'ARMY')
(u'Troy', u'TROY')               (u'Florida International', u'FIU')
(u'Louisiana-Monroe', u'ULM')    (u'Arkansas State', u'ASU')
(u'Texas Tech', u'TT')           (u'Iowa State', u'ISU')
(u'Akron', u'AKRON')             (u'Western Michigan', u'WMU')
(u'Liberty', u'LIBERTY')         (u'Toledo', u'TOLEDO')
(u'Virginia', u'Virg')           (u'Middle Tennessee', u'MTnSt')
(u'Oklahoma State', u'OKSt')     (u'Texas A&amp;M', u'TexAM')
(u'Notre Dame', u'NDame')        (u'UCLA', u'UCLA')
(u'Rutgers', u'Rutgr')           (u'Cincinnati', u'Cincy')
(u'Ohio State', u'OhSt')         (u'Purdue', u'Prdue')
(u'LSU', u'LSU')                 (u'Florida', u'Fla')
(u'Air Force', u'AFA')           (u'UNLV', u'UNLV')
(u'Nebraska', u'Neb')            (u'Missouri', u'Misso')
(u'New Mexico State', u'NMxSt')   (u'Boise State', u'BoiSt')
(u'Pittsburgh', u'Pitt')         (u'Navy', u'Navy')
(u'Wake Forest', u'WFrst')       (u'Florida State', u'FlaSt')
(u'San Jose State', u'SJSt')     (u'Hawaii', u'Hawa')
(u'UCF', u'UCF')                 (u'South Florida', u'SFla')
</snippet></ROW><ROW><id>18603890</id><snippet>from django.core.urlresolvers import reverse

def logout(request):
    auth.logout(request)
    return HttpResponseRedirect(reverse('index'))
</snippet></ROW><ROW><id>18604089</id><snippet>urllib.request.urlopen</snippet></ROW><ROW><id>18604105</id><snippet>collections.Counter</snippet></ROW><ROW><id>18604105</id><snippet>most_common()</snippet></ROW><ROW><id>18604105</id><snippet>import collections
import string

def me():
    info = input("what file would you like to select? ")
    filehandle = open(info, "r")
    data = filehandle.read().upper()
    char_counter = collections.Counter(data)
    for char, count in char_counter.most_common():
        if char in string.ascii_uppercase:
            print(char, count)

me()
</snippet></ROW><ROW><id>18604105</id><snippet>Counter</snippet></ROW><ROW><id>18604105</id><snippet>char_counter.most_common()</snippet></ROW><ROW><id>18604105</id><snippet>string.ascii_uppercase</snippet></ROW><ROW><id>18604196</id><snippet>x = linspace(0, 2 * pi, 1000)
y = sin(x)
fig, ax = subplots()
ax.plot(x, y)
ax.spines['top'].set_visible(False)
ax.spines['right'].set_visible(False)
ax.spines['left'].set_visible(False)
ax.grid(axis='y')
</snippet></ROW><ROW><id>18604353</id><snippet>open()</snippet></ROW><ROW><id>18604353</id><snippet>f</snippet></ROW><ROW><id>18604353</id><snippet>next()</snippet></ROW><ROW><id>18604353</id><snippet>for</snippet></ROW><ROW><id>18604353</id><snippet>file.next()</snippet></ROW><ROW><id>18604480</id><snippet>self.bind_all("&lt;Command-f&gt;", lambda event: self.after(100,self.menu_file))
</snippet></ROW><ROW><id>18604540</id><snippet>umask 0022 &amp;&amp; chmod -R a+rX . &amp;&amp; python setup.py sdist upload
</snippet></ROW><ROW><id>18604587</id><snippet>except</snippet></ROW><ROW><id>18604587</id><snippet>try:
    newbutton['roundcornerradius'] = buttondata['roundcornerradius']
    buttons.append(newbutton)
except:
    pass
</snippet></ROW><ROW><id>18604587</id><snippet>except AttributeError:</snippet></ROW><ROW><id>18604587</id><snippet>except Exception,e: print str(e)</snippet></ROW><ROW><id>18604873</id><snippet>strptime</snippet></ROW><ROW><id>18604873</id><snippet>time.mktime</snippet></ROW><ROW><id>18604873</id><snippet>import time
created_at = "Wed Aug 29 17:12:58 +0000 2012"
print time.mktime(time.strptime(created_at,"%a %b %d %H:%M:%S +0000 %Y"))
</snippet></ROW><ROW><id>18605162</id><snippet>from sqlalchemy import *

"""
INSERT INTO example_table
    (id, name)
SELECT 1, 'John'
WHERE
    NOT EXISTS (
        SELECT id FROM example_table WHERE id = 1
    );
"""

m = MetaData()

example_table = Table("example_table", m,
                        Column('id', Integer),
                        Column('name', String)
                    )

sel = select([literal("1"), literal("John")]).where(
           ~exists([example_table.c.id]).where(example_table.c.id == 1)
      )

ins = example_table.insert().from_select(["id", "name"], sel)
print(ins)
</snippet></ROW><ROW><id>18605162</id><snippet>INSERT INTO example_table (id, name) SELECT :param_1 AS anon_1, :param_2 AS anon_2 
WHERE NOT (EXISTS (SELECT example_table.id 
FROM example_table 
WHERE example_table.id = :id_1))
</snippet></ROW><ROW><id>18605218</id><snippet>\n</snippet></ROW><ROW><id>18605218</id><snippet>print(name+'\n')
</snippet></ROW><ROW><id>18605218</id><snippet>print()</snippet></ROW><ROW><id>18605218</id><snippet>'\n'</snippet></ROW><ROW><id>18605231</id><snippet>path</snippet></ROW><ROW><id>18605231</id><snippet>@app.route("/mainsite/&lt;path:varargs&gt;")
def api(varargs=None):
    # for mainsite/key1/key2/key3/keyn
    # `varargs` is a string contain the above
    varargs = varargs.split("/")
    # And now it is a list of strings
</snippet></ROW><ROW><id>18605231</id><snippet>from werkzeug.routing import BaseConverter, ValidationError

class PathVarArgsConverter(BaseConverter):
    """Convert the remaining path segments to a list"""

    def __init__(self, url_map):
        super(PathVarArgsConverter, self).__init__(url_map)
        self.regex = "(?:.*)"

    def to_python(self, value):
        return value.split(u"/")

    def to_url(self, value):
        return u"/".join(value)

app.url_map.converters['varargs'] = PathVarArgsConverter
</snippet></ROW><ROW><id>18605231</id><snippet>@app.route("/mainsite/&lt;varargs:args&gt;")
def api(args):
    # args here is the list of path segments
</snippet></ROW><ROW><id>18605254</id><snippet>x</snippet></ROW><ROW><id>18605254</id><snippet>x=1000</snippet></ROW><ROW><id>18605254</id><snippet>x</snippet></ROW><ROW><id>18605254</id><snippet>y = 2000

def a(x=0, t=''):
    print(t + "In a({0})".format(x))
    global y
    if y:
        y -= 1
        try:
            a(x+1, t)
        except RuntimeError:
            print(t + "*** E: %d" % x)
            a(x+1, t+'\t')
</snippet></ROW><ROW><id>18605254</id><snippet>In a(986)
In a(987)
*** E: 987
*** E: 986
    In a(987)
    *** E: 987
*** E: 985
    In a(986)
    In a(987)
    *** E: 987
    *** E: 986
        In a(987)
        *** E: 987
*** E: 984
    In a(985)
    In a(986)
    In a(987)
    *** E: 987
    *** E: 986
        In a(987)
        *** E: 987
    *** E: 985
        In a(986)
        In a(987)
        *** E: 987
        *** E: 986
            In a(987)
            *** E: 987
*** E: 983
    In a(984)
    In a(985)
    In a(986)
    In a(987)
    *** E: 987
    *** E: 986
        In a(987)
        *** E: 987
    *** E: 985
        In a(986)
        In a(987)
        *** E: 987
        *** E: 986
            In a(987)
            *** E: 987
    *** E: 984
        In a(985)
        In a(986)
        In a(987)
        *** E: 987
        *** E: 986
            In a(987)
            *** E: 987
        *** E: 985
            In a(986)
            In a(987)
            *** E: 987
            *** E: 986
                In a(987)
                *** E: 987
</snippet></ROW><ROW><id>18605254</id><snippet>2**(R-12)</snippet></ROW><ROW><id>18605276</id><snippet>while</snippet></ROW><ROW><id>18605276</id><snippet>  while i &lt; len(gList):
        if gList[i] == a[i]:
            x = x + 1
        else:
            x = x
        i = i + 1
</snippet></ROW><ROW><id>18605276</id><snippet>i</snippet></ROW><ROW><id>18605276</id><snippet>gList</snippet></ROW><ROW><id>18605276</id><snippet>a</snippet></ROW><ROW><id>18605276</id><snippet>x</snippet></ROW><ROW><id>18605276</id><snippet>gList[i]</snippet></ROW><ROW><id>18605276</id><snippet>a[1]</snippet></ROW><ROW><id>18605276</id><snippet>a[2]</snippet></ROW><ROW><id>18605276</id><snippet>a[3]</snippet></ROW><ROW><id>18605276</id><snippet>a[4]</snippet></ROW><ROW><id>18605671</id><snippet>dict2 = dict1</snippet></ROW><ROW><id>18605671</id><snippet>OrderedDict</snippet></ROW><ROW><id>18605671</id><snippet>dict2</snippet></ROW><ROW><id>18605671</id><snippet>Object</snippet></ROW><ROW><id>18605671</id><snippet>dict1</snippet></ROW><ROW><id>18605671</id><snippet># copy
dict2 = dict1.copy()
# update dict 2
dict2.update(dict1.iteritems())
</snippet></ROW><ROW><id>18605845</id><snippet>input = [['SE01_inf', 'name', [], 'NA', []],\
         ['SE01_loc', 'NA', 'loc', 'NA', []],\
         ['SE01_id', 'NA', [], '123', []],\
         ['SE01_1_inf', 'name1', [], 'NA', []],\
         ['SE01_1_loc', 'NA', 'loc', 'NA', []]]

output = {}
for row in input:
    id = row[0][:row[0].rfind('_')]
    if id not in output:
        output[id] = [id] + row[1:]
    else:
        output[id] = [new if old in ('NA', []) else old for new, old in zip(row, output[id])]

print output.values()
</snippet></ROW><ROW><id>18605845</id><snippet>[['SE01', 'name', 'loc', '123', []], ['SE01_1', 'name1', 'loc', 'NA', []]]
</snippet></ROW><ROW><id>18606009</id><snippet>shade = np.array([np.dot(n / proj3d.mod(n), [-1, -1, 0.5]) for n in normals])
</snippet></ROW><ROW><id>18606009</id><snippet>from mayavi import mlab
mlab.barchart(xpos,ypos,dz*100)
</snippet></ROW><ROW><id>18606285</id><snippet>require_post_data</snippet></ROW><ROW><id>18606285</id><snippet>update_contact</snippet></ROW><ROW><id>18606285</id><snippet>@mod.route('/&lt;int:contact_id&gt;', methods=['POST'])
@require_post_data() # &lt;- note the parens
def update_contact(contact_id):
    # Do some business
</snippet></ROW><ROW><id>18606285</id><snippet>create contact</snippet></ROW><ROW><id>18606285</id><snippet>decorator</snippet></ROW><ROW><id>18606285</id><snippet>require_post_data</snippet></ROW><ROW><id>18606285</id><snippet>update_contact</snippet></ROW><ROW><id>18606285</id><snippet>require_post_data</snippet></ROW><ROW><id>18606285</id><snippet>required_fields</snippet></ROW><ROW><id>18606285</id><snippet>require_post_data</snippet></ROW><ROW><id>18606285</id><snippet>decorator</snippet></ROW><ROW><id>18606285</id><snippet>/&lt;int&gt;</snippet></ROW><ROW><id>18606285</id><snippet>contact_id</snippet></ROW><ROW><id>18606470</id><snippet>itertools.groupby</snippet></ROW><ROW><id>18606470</id><snippet>&gt;&gt;&gt; records = [(datetime.datetime(2013, 8, 8, 1, 20, 15), 2060), ....]
&gt;&gt;&gt; import itertools
&gt;&gt;&gt; [(dt, max(v for d, v in grp)) for dt, grp in itertools.groupby(records, key=lambda x: x[0].date())]
[(datetime.date(2013, 8, 8), 2060),
 (datetime.date(2013, 8, 9), 2055),
 (datetime.date(2013, 8, 10), 2050),
 ...
]
</snippet></ROW><ROW><id>18606889</id><snippet>save()</snippet></ROW><ROW><id>18606889</id><snippet>save()</snippet></ROW><ROW><id>18606889</id><snippet>return found</snippet></ROW><ROW><id>18606889</id><snippet>save()</snippet></ROW><ROW><id>18606889</id><snippet>get_or_create()</snippet></ROW><ROW><id>18606889</id><snippet>def test_personne_is_the_same(self):
    p1, _ = Personne.objects.get_or_create(nom="Malcom X")
    p2, _ = Personne.objects.get_or_create(nom="Malcom X")
    self.assertEqual(p1, p2)
</snippet></ROW><ROW><id>18607421</id><snippet>web: python bin/app.py ${PORT}
</snippet></ROW><ROW><id>18607428</id><snippet>help(float.__setformat__)</snippet></ROW><ROW><id>18607428</id><snippet>float.__setformat__(typestr, fmt) -&gt; None</snippet></ROW><ROW><id>18607428</id><snippet>'double'</snippet></ROW><ROW><id>18607428</id><snippet>'float'</snippet></ROW><ROW><id>18607428</id><snippet>'unknown'</snippet></ROW><ROW><id>18607428</id><snippet>'IEEE, big-endian'</snippet></ROW><ROW><id>18607428</id><snippet>'IEEE, little-endian'</snippet></ROW><ROW><id>18607428</id><snippet>float.__getformat__()</snippet></ROW><ROW><id>18607428</id><snippet>float</snippet></ROW><ROW><id>18607428</id><snippet>decimal</snippet></ROW><ROW><id>18607428</id><snippet>sys.float_info</snippet></ROW><ROW><id>18607458</id><snippet>django</snippet></ROW><ROW><id>18607458</id><snippet>mongoengine</snippet></ROW><ROW><id>18607458</id><snippet>mongoengine</snippet></ROW><ROW><id>18607458</id><snippet>mongodb</snippet></ROW><ROW><id>18607458</id><snippet>models.py</snippet></ROW><ROW><id>18607458</id><snippet>Document</snippet></ROW><ROW><id>18607458</id><snippet>mongoengine</snippet></ROW><ROW><id>18607458</id><snippet>mongodb</snippet></ROW><ROW><id>18607458</id><snippet>Sqlite3</snippet></ROW><ROW><id>18607458</id><snippet>PostgreSQL</snippet></ROW><ROW><id>18607458</id><snippet>mongodb</snippet></ROW><ROW><id>18607458</id><snippet>mongodb</snippet></ROW><ROW><id>18607458</id><snippet>mongoengine</snippet></ROW><ROW><id>18607458</id><snippet>mongoengine</snippet></ROW><ROW><id>18607458</id><snippet>mongodb</snippet></ROW><ROW><id>18607458</id><snippet>mongoengine</snippet></ROW><ROW><id>18607458</id><snippet>mongodb</snippet></ROW><ROW><id>18607458</id><snippet>mongodb</snippet></ROW><ROW><id>18607821</id><snippet>eachproperty['href'] is None</snippet></ROW><ROW><id>18607821</id><snippet>eachproperty.string is None</snippet></ROW><ROW><id>18607821</id><snippet>print eachproperty['href'], eachproperty.string
</snippet></ROW><ROW><id>18607882</id><snippet>python bin/app.py 3030
</snippet></ROW><ROW><id>18607959</id><snippet>&gt;&gt;&gt; l # assume you already read the list of numbers from the file.
[12, 23, 45, 45, 45, 34, 34, 56, 12, 12, 12, 67, 89]
&gt;&gt;&gt; from collections import Counter
&gt;&gt;&gt; Counter(l).most_common()
[(12, 4), (45, 3), (34, 2), (67, 1), (23, 1), (56, 1), (89, 1)]
</snippet></ROW><ROW><id>18608089</id><snippet>#!/usr/local/bin/python3
word=input("Enter string: ")
with open('input.txt') as f:
  key = {}
  for line in f:
    first, second = line.split()
    key[first] = second
for replacement in key:
    word=word.replace(replacement,key[replacement])

print(word)
</snippet></ROW><ROW><id>18608199</id><snippet>ff=subprocess.Popen("plink root@server -pw pass rpm -qa",shell=False,stdin=subprocess.PIPE) 
ff.communicate("grep string &gt; rpm.txt")
</snippet></ROW><ROW><id>18608213</id><snippet>from datetime import datetime
start = datetime.now()
</snippet></ROW><ROW><id>18608213</id><snippet>difference = datetime.now() - start
</snippet></ROW><ROW><id>18608718</id><snippet>def login():
    if current_user.is_authenticated():
        return redirect(url_for('index'))
    # process login for anon user
</snippet></ROW><ROW><id>18609117</id><snippet>tastypie.authorization.Authorization</snippet></ROW><ROW><id>18609117</id><snippet>from tastypie.authorization import Authorization
from tastypie.resources import ModelResource
from .models import ListModel

class ListModelResource(ModelResource):
    def determine_format(self, request):
        return 'application/json'

    class Meta:
        allowed_methods = ['get','put']
        queryset = ListModel.objects.all()
        authorization= Authorization() # &lt;---
</snippet></ROW><ROW><id>18609193</id><snippet>{</snippet></ROW><ROW><id>18609193</id><snippet>}</snippet></ROW><ROW><id>18609193</id><snippet>{{</snippet></ROW><ROW><id>18609193</id><snippet>}}</snippet></ROW><ROW><id>18609193</id><snippet>&gt;&gt;&gt; "{0}\w{{2}}b{1}\w{{2}}quarter".format('b', 'a')
'b\\w{2}ba\\w{2}quarter'
</snippet></ROW><ROW><id>18609361</id><snippet>dict("{'key1': 'value1'}")
</snippet></ROW><ROW><id>18609361</id><snippet>parser.add_argument('-m', '--my-dict', type=str)
args = parser.parse_args()

import json
my_dictionary = json.loads(args.my_dict)
</snippet></ROW><ROW><id>18609361</id><snippet>&gt;&gt;&gt;json.loads('{"value1":"key1"}')
{u'value1': u'key1'}
</snippet></ROW><ROW><id>18609361</id><snippet>import json
parser.add_argument('-d', '--my-dict', type=json.loads)
args = parse.parse_args()

mydict = args.my_dict  # Will return a dictionary
</snippet></ROW><ROW><id>18609432</id><snippet>datetime.datetime.replace</snippet></ROW><ROW><id>18609432</id><snippet>datetime.timedelta</snippet></ROW><ROW><id>18609432</id><snippet>tomorrow = t.replace(hour=10, minute=0, second=0, microsecond=0) + \
           datetime.timedelta(days=1)
</snippet></ROW><ROW><id>18609432</id><snippet>tomorrow = datetime.datetime.combine(t.date(), datetime.time(10)) + \
           datetime.timedelta(days=1)

tomorrow = datetime.datetime(t.year, t.month, t.day, 10) + \
           datetime.timedelta(days=1)
</snippet></ROW><ROW><id>18609492</id><snippet>count()</snippet></ROW><ROW><id>18609492</id><snippet>published_count = Book.objects.filter(published=True).count()
</snippet></ROW><ROW><id>18609685</id><snippet>def __init__(self, *args, **kwargs):
    super(MyModelAdminForm, self).__init__(*args, **kwargs)
    self.fields['value'].value = self.instance.get_reverted_value()
</snippet></ROW><ROW><id>18609762</id><snippet>from . import bar</snippet></ROW><ROW><id>18609762</id><snippet>import foo
import bar.foo
import sys
</snippet></ROW><ROW><id>18609762</id><snippet>import ..foo
import .foo
import sys #absolute
</snippet></ROW><ROW><id>18610035</id><snippet>seq="TCATTCTaTTTAAAAAAatATAAAaGGGgTTTTGGGgTTTtGGGGTTTtGGGG"
stop_codons = ["TAG", "TAA"]

def printcount(seq, stop_codons, start):
    found = False
    count = 0
    n = start
    while n &lt; len(seq):
        if seq[n:n+3] in stop_codons:
            found = True
            break        
        count += 1
        n += 3
    print count if found else 0

printcount(seq, stop_codons, 0)
printcount(seq, stop_codons, 1)
printcount(seq, stop_codons, 2)
</snippet></ROW><ROW><id>18610140</id><snippet>draw</snippet></ROW><ROW><id>18610140</id><snippet>path</snippet></ROW><ROW><id>18610140</id><snippet>None</snippet></ROW><ROW><id>18610140</id><snippet>format</snippet></ROW><ROW><id>18610393</id><snippet>subplots</snippet></ROW><ROW><id>18610393</id><snippet>ndarray</snippet></ROW><ROW><id>18610393</id><snippet>images = [...]
fig, axes = plt.subplots(len(images))
for i, image in enumerate(images):
    im = Image.open(image)
    axes[i].imshow(im)
</snippet></ROW><ROW><id>18610426</id><snippet>run</snippet></ROW><ROW><id>18610426</id><snippet>run</snippet></ROW><ROW><id>18610426</id><snippet>def run(self):
    while True:
        try:
            func, args, kargs = self.tasks.get()
        except Queue.Empty:
            break

        try:
            func(*args, **kargs)
        except Exception, e:
            print e

        self.tasks.task_done()
</snippet></ROW><ROW><id>18610429</id><snippet>segmenting.py</snippet></ROW><ROW><id>18610429</id><snippet>import</snippet></ROW><ROW><id>18610429</id><snippet>reload()</snippet></ROW><ROW><id>18610447</id><snippet>Tag</snippet></ROW><ROW><id>18610447</id><snippet>Post</snippet></ROW><ROW><id>18610447</id><snippet>tags = Tag.objects.filter(field_name='string_or_field')
posts = Post.objects.filter(tags__in=tags)
</snippet></ROW><ROW><id>18610464</id><snippet>def foobar():
    def __init__(self,x={123:'a',456:'b'}):
        self.x = x
    def getStuff(self,field):
        return x[field]
</snippet></ROW><ROW><id>18610464</id><snippet>class</snippet></ROW><ROW><id>18610464</id><snippet>class foobar:
    def __init__(self,x={123:'a',456:'b'}):
        self.x = x
    def getStuff(self, field):
        return self.x[field]
</snippet></ROW><ROW><id>18610464</id><snippet>self.x</snippet></ROW><ROW><id>18610464</id><snippet>getStuff()</snippet></ROW><ROW><id>18610464</id><snippet>&gt;&gt;&gt; class foobar:
...     def __init__(self,x={123:'a',456:'b'}):
...         self.x = x
...     def getStuff(self, field):
...         return self.x[field]
... 
&gt;&gt;&gt; fb = foobar()
&gt;&gt;&gt; print fb.x
{456: 'b', 123: 'a'}
</snippet></ROW><ROW><id>18610539</id><snippet>O(n)</snippet></ROW><ROW><id>18610539</id><snippet>if</snippet></ROW><ROW><id>18610539</id><snippet>sys.exit(0)</snippet></ROW><ROW><id>18610539</id><snippet>n^n</snippet></ROW><ROW><id>18610539</id><snippet>safe(k,i)</snippet></ROW><ROW><id>18610628</id><snippet>*_proxy</snippet></ROW><ROW><id>18610628</id><snippet>http_proxy</snippet></ROW><ROW><id>18610628</id><snippet>import os

print {k: v for k, v in os.environ.items() if k.lower().endswith('_proxy')}
</snippet></ROW><ROW><id>18610673</id><snippet>append()</snippet></ROW><ROW><id>18610673</id><snippet>a[len(a):] = [x]</snippet></ROW><ROW><id>18610673</id><snippet>list.count(x)</snippet></ROW><ROW><id>18610728</id><snippet>&lt;td valign="top"&gt;</snippet></ROW><ROW><id>18610728</id><snippet>&lt;span class="foodTitle"&gt;</snippet></ROW><ROW><id>18610728</id><snippet>//div[@id="menu_list"]//td[@valign="top"][.//span[@class="foodTitle"]]
</snippet></ROW><ROW><id>18610728</id><snippet>td</snippet></ROW><ROW><id>18610728</id><snippet>.//text()
</snippet></ROW><ROW><id>18610728</id><snippet>['\n                ',
 '\n                    ',
 'Century Square',
 '\n                    2 Tampines Central 5',
 '\n                    #01-44-47 Century Square',
 '\n                    Singapore 529509',
 '\n                ',
 '\n                    ',
 'Opening Hours:',
 u'\n                    7am to 12am (Sun-Thu &amp;\xa0PH)',
 u'\n                    24 Hours (Fri &amp; Sat\xa0&amp;',
 '\n                ',
 '\n                    Eve of PH)',
 '\n                    Telephone: 6789 0457',
 '\n            ']
</snippet></ROW><ROW><id>18610728</id><snippet>['\n                ',
 'Liat Towers',
 '\n                541 Liat towers #01-01',
 '\n                Orchard Road',
 '\n                Singapore 238888',
 'Opening Hours: ',
 '\n                24 hours (Daily)',
 '\n                Telephone: 6737 8036']
</snippet></ROW><ROW><id>18610728</id><snippet>from scrapy.spider import BaseSpider
from scrapy.selector import HtmlXPathSelector
import re
from todo.items import wendyItem

class wendySpider(BaseSpider):
    name = "wendyspider"
    allowed_domains = ["wendys.com.sg"]
    start_urls = ["http://www.wendys.com.sg/outlets.php"]

    def parse(self, response):
        hxs = HtmlXPathSelector(response)
        cells = hxs.select('//div[@id="menu_list"]//td[@valign="top"][.//span[@class="foodTitle"]]')
        items = []
        for cell in cells:
            item = wendyItem()

            # get all text nodes
            # some lines are blank so .strip() them
            lines = cell.select('.//text()').extract()
            lines = [l.strip() for l in lines if l.strip()]

            # first non-blank line is the place name
            item['name'] = lines.pop(0)

            # for the other lines, check for "Opening hours" and "Telephone"
            # to store lines in correct list container

            address_lines = []
            hours_lines = []
            telephone_lines = []

            opening_hours = False
            telephone = False

            for line in lines:
                if 'Opening Hours' in line:
                    opening_hours = True
                elif 'Telephone' in line:
                    telephone = True
                if telephone:
                    telephone_lines.append(line)
                elif opening_hours:
                    hours_lines.append(line)
                else:
                    address_lines.append(line)

            # last address line is the postal code + town name
            item['address'] = "\n".join(address_lines[:-1])
            item['postal'] = address_lines[-1]

            # ommit "Opening hours" (first element in list)
            item['hours'] = "\n".join(hours_lines[1:])

            item['contact'] = "\n".join(telephone_lines)

            items.append(item)

        return items
</snippet></ROW><ROW><id>18610781</id><snippet>clean_file</snippet></ROW><ROW><id>18610781</id><snippet>InMemoryUploadedFile</snippet></ROW><ROW><id>18611257</id><snippet>x,y = m(lon,lat)
</snippet></ROW><ROW><id>18611257</id><snippet>Point(m(lon, lat)).buffer(1000)
</snippet></ROW><ROW><id>18611473</id><snippet>connecting = ClientCreator(reactor, RedisListenerProtocol).connectTCP(HOST, PORT)
def connected(listener):
    listener.subscribe("newChannelName")
    listener.unsubscribe("channelName")
connecting.addCallback(connected)
</snippet></ROW><ROW><id>18611535</id><snippet>def logged_apply(g, func, *args, **kwargs):
    step_percentage = 100. / len(g)
    import sys
    sys.stdout.write('apply progress:   0%')
    sys.stdout.flush()

    def logging_decorator(func):
        def wrapper(*args, **kwargs):
            progress = wrapper.count * step_percentage
            sys.stdout.write('\033[D \033[D' * 4 + format(progress, '3.0f') + '%')
            sys.stdout.flush()
            wrapper.count += 1
            return func(*args, **kwargs)
        wrapper.count = 0
        return wrapper

    logged_func = logging_decorator(func)
    res = g.apply(logged_func)
    sys.stdout.write('\033[D \033[D' * 4 + format(100., '3.0f') + '%' + '\n')
    sys.stdout.flush()
    return res
</snippet></ROW><ROW><id>18611535</id><snippet>In [11]: g = df_users.groupby(['userID', 'requestDate'])

In [12]: f = feature_rollup)

In [13]: logged_apply(g, f)
apply progress: 100%
Out[13]: 
...
</snippet></ROW><ROW><id>18611535</id><snippet>from pandas.core.groupby import DataFrameGroupBy
DataFrameGroupBy.logged_apply = logged_apply

In [21]: g.logged_apply(f)
apply progress: 100%
Out[21]: 
...
</snippet></ROW><ROW><id>18611837</id><snippet>http://github.com/search</snippet></ROW><ROW><id>18611837</id><snippet>import requests

headers = {'User-Agent': 'Awesome-Octocat-App', 'Accept': 'application/vnd.github.preview+json'}
link = "https://api.github.com/search/repositories"
query = {'q': 'chembl created:&gt;=2000'}
r = requests.get(link, headers=headers, params=query)
</snippet></ROW><ROW><id>18611837</id><snippet>&gt;&gt;&gt; r = requests.get(link, headers=headers, params=query)
&gt;&gt;&gt; r.ok
True
&gt;&gt;&gt; r.json().keys()
[u'total_count', u'items']
&gt;&gt;&gt; r.json()['total_count']
17
</snippet></ROW><ROW><id>18612121</id><snippet>itertools.groupby</snippet></ROW><ROW><id>18612121</id><snippet>itertools.product</snippet></ROW><ROW><id>18612121</id><snippet>L = [('n0', 1), ('n1', 4), ('n1', 2), ('n2', 5)] 

from itertools import groupby, product
groups = [list(group) for key, group in groupby(L, lambda x: x[0])]
R = map(list, product(*groups))
print R
</snippet></ROW><ROW><id>18612121</id><snippet>[[('n0', 1), ('n1', 4), ('n2', 5)], [('n0', 1), ('n1', 2), ('n2', 5)]]
</snippet></ROW><ROW><id>18612162</id><snippet>set</snippet></ROW><ROW><id>18612162</id><snippet>result = ','.join(set(text.split(',')))
</snippet></ROW><ROW><id>18612162</id><snippet>&gt;&gt;&gt; text = 'b,a,b'
&gt;&gt;&gt; ','.join(set(text.split(',')))
'a,b'
</snippet></ROW><ROW><id>18612188</id><snippet>matches = root.findall(".//{http://www.w3.org/2000/svg}g[@id='" + sid + "']/{http://www.w3.org/2000/svg}circle")
</snippet></ROW><ROW><id>18612353</id><snippet>&gt;&gt;&gt; from urlparse import parse_qs
&gt;&gt;&gt; url = 'http://example.com/json?key=12345&amp;lat=52.370216&amp;lon=4.895168&amp;status=upcoming&amp;radius=20&amp;offset=0'
&gt;&gt;&gt; parse_qs(url)['radius'][0]
'20'
</snippet></ROW><ROW><id>18612353</id><snippet>&gt;&gt;&gt; from urlparse import parse_qs, urlparse
&gt;&gt;&gt; parse_qs(urlparse(url).query)['radius'][0]
'20'
</snippet></ROW><ROW><id>18612852</id><snippet>setup.py</snippet></ROW><ROW><id>18612852</id><snippet>lib_dirs = self.compiler.library_dirs + [
'/lib64', '/usr/lib64',
'/lib', '/usr/lib',
'/usr/lib/x86_64-linux-gnu',   # added
'/usr/lib/i386-linux-gnu',     # added
]
</snippet></ROW><ROW><id>18612852</id><snippet>setup.py clean</snippet></ROW><ROW><id>18613001</id><snippet>python manage.py runserver
</snippet></ROW><ROW><id>18613001</id><snippet>http://127.0.0.1:8000</snippet></ROW><ROW><id>18613001</id><snippet>python manage.py runserver 192.168.1.1
</snippet></ROW><ROW><id>18613001</id><snippet>from django.db import models</snippet></ROW><ROW><id>18613015</id><snippet>&gt;&gt;&gt; hot_words = ["spam", "eggs"]
&gt;&gt;&gt; message_body = "Oh boy, my favourite! spam, spam, spam, eggs and spam"
&gt;&gt;&gt; matching_words = filter(lambda word: word in hot_words, message_body.split())
&gt;&gt;&gt; matching_words
['eggs', 'spam']
&gt;&gt;&gt; message_body = "No, I'd rather just egg and bacon"
&gt;&gt;&gt; matching_words = filter(lambda word: word in hot_words, message_body.split())
&gt;&gt;&gt; matching_words
[]
</snippet></ROW><ROW><id>18613015</id><snippet>trackeado = filter(lambda word: word in buffertracker, message.body.split())
</snippet></ROW><ROW><id>18613015</id><snippet>if len(trackeado) &gt; 0:
    # Do something
</snippet></ROW><ROW><id>18613015</id><snippet>&gt;&gt;&gt; words = buffer tracker.split(',')
&gt;&gt;&gt; trackeado = filter(lambda word: word in words, message.body.split())
&gt;&gt;&gt; if len(trackeado) &gt; 0:
...     print "found"
</snippet></ROW><ROW><id>18613112</id><snippet>.format(**vars(object))</snippet></ROW><ROW><id>18613112</id><snippet>__dict__</snippet></ROW><ROW><id>18613112</id><snippet>vars</snippet></ROW><ROW><id>18613112</id><snippet>vars(...)</snippet></ROW><ROW><id>18613112</id><snippet>vars([object])</snippet></ROW><ROW><id>18613112</id><snippet>locals()</snippet></ROW><ROW><id>18613112</id><snippet>object.__dict__</snippet></ROW><ROW><id>18613112</id><snippet>In [2]: '{.bar}'.format(Foo())
Out[2]: 'bar here'
</snippet></ROW><ROW><id>18613112</id><snippet>.</snippet></ROW><ROW><id>18613112</id><snippet>.format(**vars(object))</snippet></ROW><ROW><id>18613112</id><snippet>format_map</snippet></ROW><ROW><id>18613112</id><snippet>In [6]: '{baz}'.format_map(vars(Foo()))
Out[6]: 'baz here'
</snippet></ROW><ROW><id>18613112</id><snippet>format_map</snippet></ROW><ROW><id>18613112</id><snippet>dict</snippet></ROW><ROW><id>18613112</id><snippet>format</snippet></ROW><ROW><id>18613112</id><snippet>**</snippet></ROW><ROW><id>18613243</id><snippet>    credentials = SignedJwtAssertionCredentials(
        service_account_name='5163XXXXX@developer.gserviceaccount.com',
        private_key=oauth2_private_key,
        scope='https://www.googleapis.com/auth/admin.reports.usage.readonly',
        sub='super-admin@yourdomain.com')
</snippet></ROW><ROW><id>18613340</id><snippet>Bedroom</snippet></ROW><ROW><id>18613340</id><snippet>import re

properties = soup.find_all('a', title=re.compile('Bedroom'))
</snippet></ROW><ROW><id>18613587</id><snippet>SetEnv PYTHONIOENCODING utf-8
</snippet></ROW><ROW><id>18613766</id><snippet>^</snippet></ROW><ROW><id>18613766</id><snippet>bin()</snippet></ROW><ROW><id>18613766</id><snippet>In [1]: bin(int('1000', 2) ^ int('1011', 2))
Out[1]: '0b11'
</snippet></ROW><ROW><id>18613874</id><snippet>None</snippet></ROW><ROW><id>18613874</id><snippet>def sendCommand(command, callback=NetVend.blankCallback):
    return NetVend.sendSignedCommand(command, NetVend.signCommand(command), callback)
</snippet></ROW><ROW><id>18613874</id><snippet>def sendCommand(command, callback=None):
    if callback is None:
        callback = NetVend.blankCallback
    return NetVend.sendSignedCommand(command, NetVend.signCommand(command), callback)
</snippet></ROW><ROW><id>18614101</id><snippet>del</snippet></ROW><ROW><id>18614101</id><snippet>&gt;&gt;&gt; c = Counter([ 1,2,3,4,5,6,7,6,5,4,3,2,3,4,5,6,5,4,3,4,5,4 ])
&gt;&gt;&gt; c
Counter({4: 6, 5: 5, 3: 4, 6: 3, 2: 2, 1: 1, 7: 1})
&gt;&gt;&gt; del c[2]
&gt;&gt;&gt; del c[3]
&gt;&gt;&gt; c
Counter({4: 6, 5: 5, 6: 3, 1: 1, 7: 1})
&gt;&gt;&gt;
</snippet></ROW><ROW><id>18614101</id><snippet>Counter</snippet></ROW><ROW><id>18614101</id><snippet>del</snippet></ROW><ROW><id>18614101</id><snippet>&gt;&gt;&gt; c = Counter([ 1,2,3,4,5,6,7,6,5,4,3,2,3,4,5,6,5,4,3,4,5,4 ])
&gt;&gt;&gt; c
Counter({4: 6, 5: 5, 3: 4, 6: 3, 2: 2, 1: 1, 7: 1})
&gt;&gt;&gt; c - Counter({2:sys.maxint, 3:sys.maxint})
Counter({4: 6, 5: 5, 6: 3, 1: 1, 7: 1})
</snippet></ROW><ROW><id>18614106</id><snippet>def add_default_meta(name, bases, attrs):
    cls = type(name, bases, attrs)
    cls.default = cls()
    return cls
</snippet></ROW><ROW><id>18614106</id><snippet>__metaclass__</snippet></ROW><ROW><id>18614106</id><snippet>class Animal(object, metaclass=add_default_meta):
    # stuff

class NameClass(Animal, metaclass=add_default_meta):
    # stuff
</snippet></ROW><ROW><id>18614106</id><snippet>metaclass=...</snippet></ROW><ROW><id>18614106</id><snippet>Animal</snippet></ROW><ROW><id>18614106</id><snippet>__new__</snippet></ROW><ROW><id>18614106</id><snippet>class AddDefaultMeta(type):
    def __new__(cls, name, bases, attrs):
        cls = super(AddDefaultMeta, cls).__new__(cls, name, bases, attrs)
        cls.default = cls()
        return cls
</snippet></ROW><ROW><id>18614106</id><snippet>def add_default(cls):
    cls.default = cls()
    return cls


@add_default
class Bird(Animal):
   # stuff
</snippet></ROW><ROW><id>18614106</id><snippet>a == a.default</snippet></ROW><ROW><id>18614106</id><snippet>Animal.__new__</snippet></ROW><ROW><id>18614106</id><snippet>class Animal(object):
    def __new__(cls, *args, **kwargs):
        if not (args or kwargs) and not hasattr(cls, 'default'):
            cls.default = object.__new__(cls)
            return cls.default
        else:
            return object.__new__(cls)
</snippet></ROW><ROW><id>18614106</id><snippet>default</snippet></ROW><ROW><id>18614106</id><snippet>a == a.default
</snippet></ROW><ROW><id>18614106</id><snippet>a == Bird.default
</snippet></ROW><ROW><id>18614106</id><snippet>Bird.default</snippet></ROW><ROW><id>18614106</id><snippet>AttributeError</snippet></ROW><ROW><id>18614106</id><snippet>Bird</snippet></ROW><ROW><id>18614106</id><snippet>Bird.Default</snippet></ROW><ROW><id>18614106</id><snippet>Default</snippet></ROW><ROW><id>18614106</id><snippet>Bird</snippet></ROW><ROW><id>18614106</id><snippet>lowercase_with_underscore</snippet></ROW><ROW><id>18614106</id><snippet>is_empty()</snippet></ROW><ROW><id>18614106</id><snippet>class Animal(object):
    def __init__(self, *args, **kwargs):
        # might require more complex condition
        self._is_empty = not (bool(args) or bool(kwargs))
    def is_empty(self):
        return self._is_empty
</snippet></ROW><ROW><id>18614106</id><snippet>_is_empty</snippet></ROW><ROW><id>18614106</id><snippet>True</snippet></ROW><ROW><id>18614106</id><snippet>True</snippet></ROW><ROW><id>18614106</id><snippet>_is_empty</snippet></ROW><ROW><id>18614106</id><snippet>False</snippet></ROW><ROW><id>18614453</id><snippet>HTMLParser</snippet></ROW><ROW><id>18614453</id><snippet>html5lib</snippet></ROW><ROW><id>18614453</id><snippet>&gt;&gt;&gt; len(BeautifulSoup(r.text, 'html').find('td', attrs={'class': 'eelantext'}).find_all('p'))
0
&gt;&gt;&gt; len(BeautifulSoup(r.text, 'lxml').find('td', attrs={'class': 'eelantext'}).find_all('p'))
0
&gt;&gt;&gt; len(BeautifulSoup(r.text, 'html5lib').find('td', attrs={'class': 'eelantext'}).find_all('p'))
22
</snippet></ROW><ROW><id>18614567</id><snippet>@echo off
&lt;nul set /p "=Good morning world and all who inhabit it! :D"
</snippet></ROW><ROW><id>18614567</id><snippet>tr</snippet></ROW><ROW><id>18614567</id><snippet>@ECHO OFF &amp;SETLOCAL
ECHO Good morning world and all who inhabit it! :D | tr -d \r
</snippet></ROW><ROW><id>18614775</id><snippet>nohup</snippet></ROW><ROW><id>18614775</id><snippet>nohup python -m SimpleHTTPServer 55550
</snippet></ROW><ROW><id>18614775</id><snippet>kill</snippet></ROW><ROW><id>18615272</id><snippet>if os.isatty(1):
    print "text"
</snippet></ROW><ROW><id>18615272</id><snippet>os.isatty()</snippet></ROW><ROW><id>18615272</id><snippet>True</snippet></ROW><ROW><id>18615272</id><snippet>stdout</snippet></ROW><ROW><id>18615272</id><snippet>1</snippet></ROW><ROW><id>18615272</id><snippet>stderr</snippet></ROW><ROW><id>18615272</id><snippet>2</snippet></ROW><ROW><id>18615305</id><snippet>my_list = []
for n in range(56000):
        my_list[n] = True
</snippet></ROW><ROW><id>18615305</id><snippet>my_list = [True for n in range(5600])
</snippet></ROW><ROW><id>18615305</id><snippet>array</snippet></ROW><ROW><id>18615305</id><snippet>import array
my_array = array.array("b", (True for n in range(56000)))
</snippet></ROW><ROW><id>18615305</id><snippet>set</snippet></ROW><ROW><id>18615305</id><snippet>False</snippet></ROW><ROW><id>18615305</id><snippet>True</snippet></ROW><ROW><id>18615305</id><snippet>my_true_numbers = {0, 2323, 23452} # just the True ones
</snippet></ROW><ROW><id>18615305</id><snippet>value = number in my_true_numbers
</snippet></ROW><ROW><id>18615305</id><snippet>True</snippet></ROW><ROW><id>18615305</id><snippet>False</snippet></ROW><ROW><id>18615822</id><snippet>from operator import or_
from django.db.models import Q

l = [(name1, version1), (name2, version2), (name3, version3)...]

data = YourModel.objects.filter(reduce(or_, Q(name=name, version=version)
                                            for name, version in l))
</snippet></ROW><ROW><id>18615822</id><snippet>in</snippet></ROW><ROW><id>18616080</id><snippet>parse_wine_page</snippet></ROW><ROW><id>18616080</id><snippet>import urlparse
...

    def parse_wine_page(self, reponse):
        ...
        hxs = HtmlXPathSelector(response)
        content = hxs.select('//*[@id="glo_right"]')
        for res in content:
            ...
            #item ["Image"]= map(unicode.strip, res.select('//div[@class="pro_detail_tit"]//div[@class="pro_titre"]/h1/text()').extract())
            item['image_urls'] = map(lambda src: urlparse.urljoin(response.url, src), res.select('./div[@class="pro_col_left"]/img/@src').extract())
            items.append(item)
        return items
</snippet></ROW><ROW><id>18616080</id><snippet>Projetvinnicolas3Item</snippet></ROW><ROW><id>18616334</id><snippet>subprocess.Popen('''echo "var1+'hello!'+var2"''', shell=True)
</snippet></ROW><ROW><id>18616334</id><snippet>'''some\'\'\'triple quotes\'\'\'''' -&gt; "some'''triple quotes'''"
</snippet></ROW><ROW><id>18616334</id><snippet>subprocess.Popen('echo "var1+' "'hello!'" '+var2"', shell=True)
</snippet></ROW><ROW><id>18616334</id><snippet>In [17]: print('non\traw' r'\traw' 'non\traw')
non     raw\trawnon     raw
</snippet></ROW><ROW><id>18616474</id><snippet>import socket
s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
s.bind(("localhost", 9988))
s.listen(1)

while True:
    conn, addr = s.accept()
    data = conn.recv(1024)
    conn.close()
    my_function_that_handles_data(data)
</snippet></ROW><ROW><id>18616474</id><snippet>s.accept()</snippet></ROW><ROW><id>18616474</id><snippet>import socket
s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
s.connect(("localhost", 9988))
s.sendall('My parameters that I want to share with the server')
s.close()
</snippet></ROW><ROW><id>18616474</id><snippet>"localhost"</snippet></ROW><ROW><id>18616593</id><snippet>_ctx</snippet></ROW><ROW><id>18616593</id><snippet>__call__</snippet></ROW><ROW><id>18616593</id><snippet>class BaseTestCase(unittest2.TestCase):

    def __call__(self, result=None):
        try:
            self._pre_setup()
            super(BaseTestCase, self).__call__(result)
        finally:
            self._post_teardown()

    def _pre_setup(self):
        self.app = create_app()
        self.client = self.app.test_client()
        self._ctx = self.app.test_request_context()
        self._ctx.push()

    def _post_teardown(self):
        if getattr(self, '_ctx') and self._ctx is not None:
            self._ctx.pop()
        del self._ctx
</snippet></ROW><ROW><id>18616593</id><snippet>class SomeTestCase(BaseTestCase):

    test_something(self):
        # Test something - we're using the right app context here
</snippet></ROW><ROW><id>18616733</id><snippet>print "a: %.50f:" % (a),type(a)</snippet></ROW><ROW><id>18616733</id><snippet>print "a: %s:" % (a, type(a))
print "b: %s:" % (b, type(b))
print "c: %s:" % (c, type(c))
</snippet></ROW><ROW><id>18616803</id><snippet>document.getElementById('location').value = pos
</snippet></ROW><ROW><id>18616803</id><snippet>&lt;form id = "geolocation" action="/location" method="POST" &gt;
            {% csrf_token %}
        &lt;input type="text" id = "location" name="location" value="" /&gt;
        &lt;input type="submit" /&gt;

&lt;/form&gt;
</snippet></ROW><ROW><id>18616803</id><snippet>document.getElementById("geolocation").submit(); 
</snippet></ROW><ROW><id>18616803</id><snippet>user_location = request.POST.get('location')
</snippet></ROW><ROW><id>18616803</id><snippet>var infowindow = new google.maps.InfoWindow({
    map: map,
    position: pos,
    content: 'Location found using HTML5.'
  });
  // the below line has been inserted to assign a JS variable to HTML input field called 'geolocation' 
document.getElementById('location').value = pos
map.setCenter(pos);
// the below line has been inserted to autosubmit the form.  
document.getElementById("geolocation").submit(); 
</snippet></ROW><ROW><id>18616875</id><snippet>k = int(input('enter counter: '))
</snippet></ROW><ROW><id>18616875</id><snippet>int</snippet></ROW><ROW><id>18616875</id><snippet>for i in range(1, k+1):
    # do something
</snippet></ROW><ROW><id>18616875</id><snippet>i = 1
while i &lt;= k:
    # do something
    i += 1
</snippet></ROW><ROW><id>18616883</id><snippet>foo = 1
base64.b64encode(bytes([foo]))
</snippet></ROW><ROW><id>18616883</id><snippet>foo = 1
base64.b64encode(bytes(str(foo), 'ascii'))
# Or, roughly equivalently:
base64.b64encode(str(foo).encode('ascii'))
</snippet></ROW><ROW><id>18616883</id><snippet>1</snippet></ROW><ROW><id>18616883</id><snippet>'1'</snippet></ROW><ROW><id>18617004</id><snippet>name.split('_')
</snippet></ROW><ROW><id>18617004</id><snippet>sep_names = name.split('_')
Name = 'Name='+sep_names[0]
Test = 'Test='+sep_names[2]
Data = 'Date='+sep_names[5]+'/'+sep_names[4]+'/'+sep_names[3]
</snippet></ROW><ROW><id>18617051</id><snippet>onclick</snippet></ROW><ROW><id>18617051</id><snippet>properties = soup.findAll('a', title=re.compile('Bedroom'))
for eachproperty in properties:
    print re.findall("'([a-zA-Z0-9,\s]*)'", eachproperty['onclick'])
</snippet></ROW><ROW><id>18617051</id><snippet>['Y10765227', '9884877926, 9283183326', '', 'Dealer', 'Rgmuthu']
['L10038779', '9551154555', ',', ',']
['R10831945', '9150000747, 9282109134, 9043728565', ',', ',']
['B10750123', '9952946340', '', 'Dealer', 'Bala']
['R10763559', '9841280752, 9884797013', '', 'Dealer', 'Senthil']
...
</snippet></ROW><ROW><id>18617377</id><snippet>cmp</snippet></ROW><ROW><id>18617377</id><snippet>key</snippet></ROW><ROW><id>18617789</id><snippet>bytes</snippet></ROW><ROW><id>18617789</id><snippet>int</snippet></ROW><ROW><id>18617789</id><snippet>\x00</snippet></ROW><ROW><id>18617789</id><snippet>bytes(1) == b'\x00'</snippet></ROW><ROW><id>18617789</id><snippet>bytes</snippet></ROW><ROW><id>18617789</id><snippet>str</snippet></ROW><ROW><id>18617789</id><snippet>Python 2.7.5 (v2.7.5:ab05e7dd2788, May 13 2013, 13:18:45) 
[GCC 4.2.1 (Apple Inc. build 5666) (dot 3)] on darwin
Type "help", "copyright", "credits" or "license" for more information.
&gt;&gt;&gt; bytes is str
True
</snippet></ROW><ROW><id>18618200</id><snippet>class State(object):
    def __init__(self):
        self.current = None
        self.current_label = None
        self.types = {}

def func(row, state):
    t = row['type']
    if state.current != t:
        state.current = t
        state.types[t] = state.types.get(t, -1) + 1
        state.current_label = t + str(state.types[t])
    return state.current_label

&gt;&gt;&gt; df.apply(func, args=(State(),), axis=1)
0     A0
1     A0
2     A0
3     B0
4     B0
5     B0
6     B0
7     A1
8     A1
9     A1
10    B1
dtype: object
</snippet></ROW><ROW><id>18618200</id><snippet>df['change'] = ~ (df == df.shift())
def func(row, state):
    t = row['type']
    if row['change']:
        state[t] = state.get(t, -1) + 1
    return t + str(state[t])
df.apply(func, args=({},), axis=1)
</snippet></ROW><ROW><id>18618365</id><snippet>with open('DATA.txt') as f:
    for line in f:
        myLine=line.rstrip().split("\t")
        print sum(2**int(l) for l in myLine[1:5])
</snippet></ROW><ROW><id>18618426</id><snippet>pygame.Surface</snippet></ROW><ROW><id>18618426</id><snippet>dialogue = 'Ooh! French Vanilla!'
self.Coffee = self.fontType.render(dialogue, 0, (0,0,0))
</snippet></ROW><ROW><id>18618426</id><snippet>self.Coffee = self.fontType.render('Some really long dialogue that might make me want this on two lines', 0, (0,0,0))
</snippet></ROW><ROW><id>18618573</id><snippet>db.test.find(query,{"_id":0})
</snippet></ROW><ROW><id>18618587</id><snippet>strftime</snippet></ROW><ROW><id>18618587</id><snippet>&gt;&gt;&gt; df['q_date'].apply(
        lambda x: pd.datetools.parse(x).strftime('%Y%m%dT%H:%M%SZ'))
0    20120210T00:0000Z
1    20120210T00:0000Z
2    20120210T00:0000Z
3    20120210T00:0000Z
4    20120210T00:0000Z
Name: q_date, dtype: object
</snippet></ROW><ROW><id>18618750</id><snippet>table = dbf.Table('dbf_file', codepage='cp437')
</snippet></ROW><ROW><id>18618750</id><snippet>cp437</snippet></ROW><ROW><id>18618750</id><snippet>table.codepage
</snippet></ROW><ROW><id>18618790</id><snippet>currentColorChanged</snippet></ROW><ROW><id>18618790</id><snippet>...

def liveColor(self, color):
    print(color)
    ...
</snippet></ROW><ROW><id>18618790</id><snippet>curentColor</snippet></ROW><ROW><id>18619063</id><snippet>urllib</snippet></ROW><ROW><id>18619063</id><snippet>import urllib.request
import tarfile
thetarfile = "ftp://ftp.ncbi.nlm.nih.gov/pub/pmc/b0/ac/Breast_Cancer_Res_2001_Nov_9_3(1)_61-65.tar.gz"
ftpstream = urllib.request.urlopen(thetarfile)
thetarfile = tarfile.open(fileobj=ftpstream, mode="r|gz")
</snippet></ROW><ROW><id>18619063</id><snippet>ftpstream</snippet></ROW><ROW><id>18619063</id><snippet>mode</snippet></ROW><ROW><id>18619228</id><snippet>list.count</snippet></ROW><ROW><id>18619228</id><snippet>&gt;&gt;&gt; data = ['This','is','some','test','data','\nThis','is','some','test','data','\nThis','is','some','test','data','\nThis','is','some','test','data','\n']
</snippet></ROW><ROW><id>18619228</id><snippet>'\n'</snippet></ROW><ROW><id>18619228</id><snippet>&gt;&gt;&gt; sum('\n' in item for item in data)
4
</snippet></ROW><ROW><id>18619228</id><snippet>'\n'</snippet></ROW><ROW><id>18619228</id><snippet>data</snippet></ROW><ROW><id>18619228</id><snippet>&gt;&gt;&gt; data = ['\n\nfoo','\n\n\nbar']
&gt;&gt;&gt; sum(item.count('\n') for item in data)
5
</snippet></ROW><ROW><id>18619544</id><snippet>curve_fit</snippet></ROW><ROW><id>18619544</id><snippet>scipy.optimize</snippet></ROW><ROW><id>18619544</id><snippet>import numpy as np
from scipy.optimize import curve_fit
from pylab import *

def myFunc(t, V, W, k):
    y = V * t - ((V - W) * (1 - np.exp(-k * t)) / k)
    return y

# this generates some fake data to fit. For youm just read in the 
# data in CSV or whatever you've
x = np.linspace(0,4,50)
y = myFunc(x, 2.5, 1.3, 0.5)
# add some noise to the fake data to make it more realistic. . .
yn = y + 0.2*np.random.normal(size=len(x))

#fit the data, return the best fit parameters and the covariance matrix
popt, pcov = curve_fit(myFunc, x, yn)
print popt
print pcov

#plot the data
clf()
plot(x, yn, "rs")
#overplot the best fit curve
plot(x, myFunc(x, popt[0], popt[1], popt[2]))
grid(True)
show()
</snippet></ROW><ROW><id>18619544</id><snippet>[ 2.32751132, 1.27686053, 0.65986596]
</snippet></ROW><ROW><id>18619652</id><snippet>ax.scatter</snippet></ROW><ROW><id>18619652</id><snippet># The data
x = np.linspace(0, 10, 1000)
y = np.sin(2 * np.pi * x)

# The colormap
cmap = cm.jet

# Create figure and axes
fig = plt.figure(1)
fig.clf()
ax = fig.add_subplot(1, 1, 1)

c = np.linspace(0, 10, 1000)
ax.scatter(x, y, c=c, cmap=cmap)
</snippet></ROW><ROW><id>18619652</id><snippet>timeit</snippet></ROW><ROW><id>18619752</id><snippet>place</snippet></ROW><ROW><id>18619752</id><snippet>click</snippet></ROW><ROW><id>18619752</id><snippet>def click():
    frame.place_configure(width=0, height=0)
</snippet></ROW><ROW><id>18619752</id><snippet>grid</snippet></ROW><ROW><id>18619752</id><snippet>grid_propagate(False)</snippet></ROW><ROW><id>18619752</id><snippet>frame.grid_propagate(False)
</snippet></ROW><ROW><id>18619817</id><snippet>{% load staticfiles %}
</snippet></ROW><ROW><id>18619817</id><snippet>&lt;link rel="stylesheet" href="{% static 'css/style.css' %}" /&gt;
</snippet></ROW><ROW><id>18619946</id><snippet>zip</snippet></ROW><ROW><id>18619946</id><snippet>izip</snippet></ROW><ROW><id>18619946</id><snippet>[offset for offset, ratio in zip(Offset, Ratio) if ratio &lt; 2.5]
</snippet></ROW><ROW><id>18619983</id><snippet>def roulette_sim(money, losses):
    print "How much do you want to bet?"
    bet = int(raw_input("&gt; "))   
    if bet &gt; money:
        return bet_too_much(money, losses)
    else:
        eturn red_or_black(money, losses, bet)
</snippet></ROW><ROW><id>18619983</id><snippet>red_or_black</snippet></ROW><ROW><id>18619983</id><snippet>money</snippet></ROW><ROW><id>18619983</id><snippet>losses</snippet></ROW><ROW><id>18619983</id><snippet>replay</snippet></ROW><ROW><id>18619983</id><snippet>roulette_sim</snippet></ROW><ROW><id>18619983</id><snippet>self.money</snippet></ROW><ROW><id>18619983</id><snippet>self.losses</snippet></ROW><ROW><id>18619983</id><snippet>self.bet</snippet></ROW><ROW><id>18619983</id><snippet>RuntimError: Maximum recursion depth exceeded</snippet></ROW><ROW><id>18619983</id><snippet>import random



def get_bet():
    bet = float('+inf')
    while bet &gt; money:
        print("How much do you want to bet?")
        bet = int(raw_input("&gt; "))
        if bet &gt; money:
            bet_too_much()
    return bet

def bet_too_much():
    print("you do not have all the money. Please bet again.")
    raw_input("Press ENTER to continue")


def roulette_sim():
    money = 50
    losses = 0
    while True:
        bet = get_bet()
        won = red_or_black(bet)
        money += won
        losses -= won
</snippet></ROW><ROW><id>18619983</id><snippet>get_bet()</snippet></ROW><ROW><id>18620232</id><snippet># this is the nsteps ahead predictor function
from statsmodels.tsa.arima_model import _arma_predict_out_of_sample
res = sm.tsa.ARMA(y, (3, 2)).fit(trend="nc")

# get what you need for predicting one-step ahead
params = res.params
residuals = res.resid
p = res.k_ar
q = res.k_ma
k_exog = res.k_exog
k_trend = res.k_trend
steps = 1

_arma_predict_out_of_sample(params, steps, residuals, p, q, k_trend, k_exog, endog=y, exog=None, start=len(y))
</snippet></ROW><ROW><id>18620291</id><snippet>...
my_urls = patterns('', url(r'^settings/([A-Za-z0-9]*)',
                   self.admin_site.admin_view(self.settings), 
                   name="common_variable_settings"))
...
</snippet></ROW><ROW><id>18620291</id><snippet>admin_urlname</snippet></ROW><ROW><id>18620291</id><snippet>@register.filter
def admin_urlname(value, arg):
    return 'admin:%s_%s_%s' % (value.app_label, value.module_name, arg)
</snippet></ROW><ROW><id>18620291</id><snippet>"appname_modulename_settings"</snippet></ROW><ROW><id>18620291</id><snippet>r'^settings/([A-Za-z0-9]+/)?$'
</snippet></ROW><ROW><id>18620407</id><snippet>pd.crosstab([df.c1,df.c2], [df.c3,df.c4], values=df.val, aggfunc=[len, np.mean])
</snippet></ROW><ROW><id>18620407</id><snippet>In [42]: table = pd.crosstab([df.c1,df.c2], [df.c3,df.c4], values=df.val, aggfunc=[len, np.mean])

In [43]: table
Out[43]: 
       len                mean                              
c3      G1     G2           G1                  G2          
c4       1  2   1  2         1         2         1         2
c1 c2                                                       
a  x     4  6   8  7  0.303036  0.414474  0.624900  0.425234
   y     5  5   8  7  0.543363  0.480419  0.583499  0.637657
b  x    10  6   4  5  0.400279  0.436929  0.442924  0.287572
   y     6  8   5  6  0.400427  0.623319  0.764506  0.408708

In [44]: table.reorder_levels([1, 2, 0], axis=1).sort_index(axis=1)
Out[44]: 
c3      G1                            G2                         
c4       1              2              1              2          
       len      mean  len      mean  len      mean  len      mean
c1 c2                                                            
a  x     4  0.303036    6  0.414474    8  0.624900    7  0.425234
   y     5  0.543363    5  0.480419    8  0.583499    7  0.637657
b  x    10  0.400279    6  0.436929    4  0.442924    5  0.287572
   y     6  0.400427    8  0.623319    5  0.764506    6  0.408708
</snippet></ROW><ROW><id>18620483</id><snippet>rank=Rank()
for att in attributes:
     setattr(rank, att, somevalue)
</snippet></ROW><ROW><id>18620485</id><snippet>PySide</snippet></ROW><ROW><id>18620485</id><snippet>PyQt</snippet></ROW><ROW><id>18620485</id><snippet>PySide</snippet></ROW><ROW><id>18620485</id><snippet>backend.qt4 : PySide        # PyQt4 | PySide
</snippet></ROW><ROW><id>18620485</id><snippet>matplotlibrc</snippet></ROW><ROW><id>18620485</id><snippet>PyQt</snippet></ROW><ROW><id>18620485</id><snippet>backend.qt4 : PyQt4        # PyQt4 | PySide
</snippet></ROW><ROW><id>18620485</id><snippet>matplotlibrc</snippet></ROW><ROW><id>18620569</id><snippet>&gt;&gt;&gt; code_string = '''
... @staticmethod
... def test():
...     return 'returning blah'
... '''
&gt;&gt;&gt;
&gt;&gt;&gt; exec(code_string)

&gt;&gt;&gt; test
&lt;staticmethod object at 0x10fd25c58&gt;

&gt;&gt;&gt; class ClassName(object):
...     def instancemethod(self):
...             print "instancemethod!"
...
&gt;&gt;&gt; setattr(ClassName, 'teststaticmethod', test)

&gt;&gt;&gt; ClassName.teststaticmethod()
'returning blah'
&gt;&gt;&gt;
</snippet></ROW><ROW><id>18620609</id><snippet>def gen_alphaLabels(donotInclude):
    for i in range(65,91):
        char = chr(i)
        if char not in donotInclude:
            yield char
</snippet></ROW><ROW><id>18620619</id><snippet>__getitem__</snippet></ROW><ROW><id>18620619</id><snippet>In [2]: x = np.arange(16).reshape((4,4))

In [3]: x
Out[3]: 
array([[ 0,  1,  2,  3],
       [ 4,  5,  6,  7],
       [ 8,  9, 10, 11],
       [12, 13, 14, 15]])

In [4]: y = x[[0, 2], :]

In [5]: y[:, :] = 100

In [6]: x
Out[6]: 
array([[ 0,  1,  2,  3],
       [ 4,  5,  6,  7],
       [ 8,  9, 10, 11],
       [12, 13, 14, 15]])
</snippet></ROW><ROW><id>18620619</id><snippet>y</snippet></ROW><ROW><id>18620619</id><snippet>x</snippet></ROW><ROW><id>18620619</id><snippet>y</snippet></ROW><ROW><id>18620619</id><snippet>x</snippet></ROW><ROW><id>18620619</id><snippet>In [7]: z = x[::2, :]

In [8]: z[:, :] = 100

In [9]: x
Out[9]: 
array([[100, 100, 100, 100],
       [  4,   5,   6,   7],
       [100, 100, 100, 100],
       [ 12,  13,  14,  15]])
</snippet></ROW><ROW><id>18620619</id><snippet>__getitem__</snippet></ROW><ROW><id>18620632</id><snippet>t.cursor(...)</snippet></ROW><ROW><id>18620632</id><snippet>followers = t.cursor(t.get_followers_ids, id=id)
</snippet></ROW><ROW><id>18620632</id><snippet>followers = t.cursor(t.get_followers_ids, id=id)
followers = list(followers)
</snippet></ROW><ROW><id>18620652</id><snippet>import QtCore</snippet></ROW><ROW><id>18620717</id><snippet>str.center</snippet></ROW><ROW><id>18620717</id><snippet>&gt;&gt;&gt; lis = ['Text', 'in', 'the', 'middle!', 'END']
&gt;&gt;&gt; for item in lis:
...     print item.center(13, '.')
...     
.....Text....
......in.....
.....the.....
...middle!...
.....END.....
</snippet></ROW><ROW><id>18620717</id><snippet>format</snippet></ROW><ROW><id>18620717</id><snippet>for item in lis:
    print format(item,'.^13')
...     
....Text.....
.....in......
.....the.....
...middle!...
.....END.....
</snippet></ROW><ROW><id>18620717</id><snippet>lis = ['Text', 'in', 'the', 'middle!', 'END']
width = 13
for s1 in lis:
    L = len(s1)                                    #length of line
    periods_rtside = (width - L)//2                #periods on the RHS
    periods_leftside = width - periods_rtside - L  #peroids on the LHS
    periods_rt_str = '.' * periods_rtside
    periods_left_str = '.' * periods_leftside
    line1 = periods_left_str + s1 + periods_rt_str
    print line1
</snippet></ROW><ROW><id>18620717</id><snippet>.....Text....
......in.....
.....the.....
...middle!...
.....END.....
</snippet></ROW><ROW><id>18620959</id><snippet>def unwrap_self_f(arg, **kwarg):
    return C.f(*arg,**kwarg) #here you call a CLASS method of C
</snippet></ROW><ROW><id>18620959</id><snippet>class C:
    def f(self, name): #self in here, so instance method
        print 'hello %s' % name
        return name
</snippet></ROW><ROW><id>18621033</id><snippet>psix_align = fftw.n_byte_align(psi0, fftw.simd_alignment, dtype='complex64')
psik_align = fftw.n_byte_align(np.zeros_like(psi0), fftw.simd_alignment, dtype='complex64')
</snippet></ROW><ROW><id>18621033</id><snippet>complex64</snippet></ROW><ROW><id>18621033</id><snippet>complex128</snippet></ROW><ROW><id>18621033</id><snippet>1e-11</snippet></ROW><ROW><id>18621033</id><snippet>pyfftw</snippet></ROW><ROW><id>18621043</id><snippet>for month in range(0, 12):
    Balance = (StartBalance-Payment)/10*(1+MonthlyRate)   
</snippet></ROW><ROW><id>18621043</id><snippet>Balance = StartBalance
for month in range(0, 12):
    Balance = (Balance-Payment) * (1 + MonthlyRate)  
</snippet></ROW><ROW><id>18621050</id><snippet>str.join</snippet></ROW><ROW><id>18621050</id><snippet>str.translate</snippet></ROW><ROW><id>18621050</id><snippet>&gt;&gt;&gt; from string import punctuation, whitespace
&gt;&gt;&gt; lis = [['Y10765227', '9884877926, 9283183326', '', 'Dealer', 'Rgmuthu'],
['L10038779', '9551154555', ',', ','],['R10831945', '9150000747, 9282109134, 9043728565', ',', ','],
['B10750123', '9952946340', '', 'Dealer', 'Bala'],
['R10763559', '9841280752, 9884797013', '', 'Dealer', 'Senthil']]
for item in lis:
    print ", ".join(x for x in item[1:] 
                                 if x.translate(None, punctuation + whitespace))
...     
9884877926, 9283183326, Dealer, Rgmuthu
9551154555
9150000747, 9282109134, 9043728565
9952946340, Dealer, Bala
9841280752, 9884797013, Dealer, Senthil
</snippet></ROW><ROW><id>18621069</id><snippet>from bottle import route, run, request
@route('/deleteauthor', method='POST')
def index():
    request.body.seek(0)
    data = request.body.read()
    #do something with data

run(host='localhost', port=8080, debug=True)
</snippet></ROW><ROW><id>18621522</id><snippet>any(keywords) in string_tags</snippet></ROW><ROW><id>18621522</id><snippet>any(keyword in string_tags for keyword in keywords)
</snippet></ROW><ROW><id>18621522</id><snippet>keywords = set(['diy','decorate', 'craft', 'home decor', 'food'])

def get_tags(blog_soup):
    tags_html = blog_soup.find('div', attrs = {'style': 'margin-left: 60px; margin-bottom: 15px;'})
    tags = [tag.string for tag in tags_html.findAll('a')]
    if keywords.intersection(tags):
        print url
</snippet></ROW><ROW><id>18621755</id><snippet>from dmi import functions
</snippet></ROW><ROW><id>18621775</id><snippet>$ python3
Python 3.3.0 (default, Apr 17 2013, 13:40:43) 
[GCC 4.6.3] on linux
Type "help", "copyright", "credits" or "license" for more information.
&gt;&gt;&gt; 1 &lt; [1,2,3]
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
TypeError: unorderable types: int() &lt; list()
</snippet></ROW><ROW><id>18621821</id><snippet>input</snippet></ROW><ROW><id>18621821</id><snippet>lst = []
s = input()
while s != 'END':
    lst.append(s)
    s = input()
</snippet></ROW><ROW><id>18621821</id><snippet>while True</snippet></ROW><ROW><id>18621821</id><snippet>break</snippet></ROW><ROW><id>18621986</id><snippet>% wget -q http://www.labix.org/download/python-dateutil/python-dateutil-1.5.tar.gz                                                              
% md5sum python-dateutil-1.5.tar.gz
35f3732db3f2cc4afdc68a8533b60a52  python-dateutil-1.5.tar.gz
</snippet></ROW><ROW><id>18622179</id><snippet>class MyConnection:
    def __init__(self, hostname, port, user, password):
        self.myhostname = hostname
        self.myport = port
        self.myuser = user
        self.mypassword = password
    @staticmethod
    def connect():
        my_session = MyConnection()
        print my_session.myuser # just an example
</snippet></ROW><ROW><id>18622243</id><snippet>Logger</snippet></ROW><ROW><id>18622243</id><snippet>WARNING</snippet></ROW><ROW><id>18622243</id><snippet>Logger</snippet></ROW><ROW><id>18622264</id><snippet>array</snippet></ROW><ROW><id>18622264</id><snippet>sqlite3</snippet></ROW><ROW><id>18622264</id><snippet>import sqlite3
import numpy as np
import io

def adapt_array(arr):
    out = io.BytesIO()
    np.save(out, arr)
    out.seek(0)
    # http://stackoverflow.com/a/3425465/190597 (R. Hill)
    return buffer(out.read())


def convert_array(text):
    out = io.BytesIO(text)
    out.seek(0)
    return np.load(out)


# Converts np.array to TEXT when inserting
sqlite3.register_adapter(np.ndarray, adapt_array)

# Converts TEXT to np.array when selecting
sqlite3.register_converter("array", convert_array)

x = np.arange(12).reshape(2,6)

con = sqlite3.connect(":memory:", detect_types=sqlite3.PARSE_DECLTYPES)
cur = con.cursor()
cur.execute("create table test (arr array)")
</snippet></ROW><ROW><id>18622264</id><snippet>cur.execute("insert into test (arr) values (?)", (x, ))
</snippet></ROW><ROW><id>18622264</id><snippet>cur.execute("select arr from test")
data = cur.fetchone()[0]

print(data)
# [[ 0  1  2  3  4  5]
#  [ 6  7  8  9 10 11]]
print(type(data))
# &lt;type 'numpy.ndarray'&gt;
</snippet></ROW><ROW><id>18622463</id><snippet>global val</snippet></ROW><ROW><id>18622475</id><snippet>intern()</snippet></ROW><ROW><id>18622475</id><snippet>()</snippet></ROW><ROW><id>18622475</id><snippet>None</snippet></ROW><ROW><id>18622475</id><snippet>Ellipsis</snippet></ROW><ROW><id>18622475</id><snippet>NotImplemented</snippet></ROW><ROW><id>18622475</id><snippet>True</snippet></ROW><ROW><id>18622475</id><snippet>False</snippet></ROW><ROW><id>18622475</id><snippet>__dict__</snippet></ROW><ROW><id>18622475</id><snippet>in</snippet></ROW><ROW><id>18622475</id><snippet>in</snippet></ROW><ROW><id>18622475</id><snippet>None</snippet></ROW><ROW><id>18622475</id><snippet>Ellipsis</snippet></ROW><ROW><id>18622475</id><snippet>NotImplemented</snippet></ROW><ROW><id>18622475</id><snippet>True</snippet></ROW><ROW><id>18622475</id><snippet>False</snippet></ROW><ROW><id>18622789</id><snippet>parts_set = car.parts_set.exclude(pk=new_part.pk)
price_qs = Price.objects.all()
for part in parts_set:
    price_qs = price_qs.filter(excluded_parts=part)
</snippet></ROW><ROW><id>18622789</id><snippet>excluded_parts</snippet></ROW><ROW><id>18622789</id><snippet>price_qs</snippet></ROW><ROW><id>18622833</id><snippet>var = numpy.random.choice([-1, 0, 1], size=1000, p=[0.25, 0.5, 0.25])
</snippet></ROW><ROW><id>18622833</id><snippet>&gt;&gt;&gt; timeit.timeit('''numpy.random.choice([-1, 0, 1],
...                                      size=1000,
...                                      p=[0.25, 0.5, 0.25])''',
...               'import numpy', number=10000)
2.380380242513752

&gt;&gt;&gt; timeit.timeit('''
... var = []
... for i in xrange(1000):
...     tmp = rand.rand()
...     if tmp &lt; 0.25:
...         var.append(1)
...     elif tmp &lt; 0.5:
...         var.append(-1)
...     else:
...         var.append(0)''',
... setup='import numpy.random as rand', number=10000)
5.673041396894519
</snippet></ROW><ROW><id>18622932</id><snippet>In [17]: a = [1, 0, 1]

In [18]: mean(a)
Out[18]: 0.66666666666666663

In [19]: type(mean(a))
Out[19]: numpy.float64

In [20]: 2.0 / 3
Out[20]: 0.6666666666666666

In [21]: type(2.0 / 3)
Out[21]: float

In [22]: mean(a).item()
Out[22]: 0.6666666666666666
</snippet></ROW><ROW><id>18622932</id><snippet>In [24]: mean(a) == 2.0 / 3
Out[24]: True

In [25]: mean(a).item() == 2.0 / 3
Out[25]: True
</snippet></ROW><ROW><id>18622932</id><snippet>numpy</snippet></ROW><ROW><id>18622932</id><snippet>numpy</snippet></ROW><ROW><id>18623004</id><snippet>--opt1</snippet></ROW><ROW><id>18623004</id><snippet>    ['--opt1', 'opt1value', 'req1value']
</snippet></ROW><ROW><id>18623004</id><snippet>    ['--opt1', 'opt1value', 'req1value', 'r1', 'r2']
</snippet></ROW><ROW><id>18623008</id><snippet>Member</snippet></ROW><ROW><id>18623008</id><snippet>Group</snippet></ROW><ROW><id>18623008</id><snippet>class Member(models.Model):
    name = models.CharField(max_length=100)
    dob = models.DateField()
    group = modes.ForeignKey('Group', related_name='members')

class Group(models.Model):
    name = models.CharField(max_length=100)
    owner = models.ForeignKey('Member', related_name='owned_groups')

class Activity(models.Model):
    group = models.ForeignKey('Group', related_name='activities')
    topic = models.CharField(max_length=100)
    start_by = models.ForeignKey('Member', related_name='started_activities')
    participants = models.ManyToManyField('Member', related_name='participating_activities')
</snippet></ROW><ROW><id>18623008</id><snippet>class ActivityForm(ModelForm):
    def __init__(self, *args, **kwargs):
        super(ActivityForm, self).__init__(*args, **kwargs)
        if 'initial' in kwargs:
            self.fields['participants'].queryset = Member.objects.filter(group=initial.group)
    class Meta:
        model = Activity
</snippet></ROW><ROW><id>18623008</id><snippet>ManyToManyField</snippet></ROW><ROW><id>18623008</id><snippet>ForeignKey</snippet></ROW><ROW><id>18623008</id><snippet>ManyToManyField</snippet></ROW><ROW><id>18623008</id><snippet>queryset</snippet></ROW><ROW><id>18623008</id><snippet>class Member(models.Model):
    name = models.CharField(max_length=100)
    dob = models.DateField()

class Group(models.Model):
    name = models.CharField(max_length=100)
    owner = models.ForeignKey('Member', related_name='owned_groups')
    members = models.ManyToManyField('Member', related_name='groups')

class Activity(models.Model):
    group = models.ForeignKey(Group)
    topic = models.CharField(max_length=100)
    start_by = models.ForeignKey('Member', related_name='started_activities')
    participants = models.ManyToManyField('Member', related_name='activities')
</snippet></ROW><ROW><id>18623008</id><snippet>g1 = Group.objects.create(name='Group 1', ...)
g2 = Group.objects.create(name='Group 2', ...)

member = Member.objects.get(name='John')
member.groups.all() # Get all the groups for the member
member.groups.add(g1, g2) # Add the member to 2 groups
member.activities.all() # Get all activities the member is a participant in
member.started_activities.all() # Get all activities started by the user
</snippet></ROW><ROW><id>18623008</id><snippet>class ActivityForm(ModelForm):
    ...
    def __init__(self, *args, **kwargs):
        super(ActivityForm, self).__init__(*args, **kwargs)
        if 'initial' in kwargs:
            self.fields['participants'].queryset = initial.group.members.all()

    class Meta: 
        model = Activity
</snippet></ROW><ROW><id>18623008</id><snippet>class ActivityForm(ModelForm):
    ...
    def __init__(self, *args, **kwargs):
        super(ActivityForm, self).__init__(*args, **kwargs)
        if 'initial' in kwargs:
            self.fields['participants'].queryset = Member.objects.filter(group__id=initial.group.id)

    class Meta: 
        model = Activity
</snippet></ROW><ROW><id>18623304</id><snippet>import openpyxl
wb = openpyxl.workbook.Workbook()
ws = wb.worksheets[0]
a=ws.cell('D6')
a.row
6
a.column
'D'
</snippet></ROW><ROW><id>18623409</id><snippet>['%s:%d' % (e, i) for e in mylist for i in (1, 2)]
</snippet></ROW><ROW><id>18623464</id><snippet>url(r'^time/plus/\d+/$', hours_ahead)
</snippet></ROW><ROW><id>18623464</id><snippet>url(r'^time/plus/(\d+)/$', hours_ahead)
</snippet></ROW><ROW><id>18623469</id><snippet>response.url</snippet></ROW><ROW><id>18623469</id><snippet>set()</snippet></ROW><ROW><id>18623469</id><snippet>spider_stats</snippet></ROW><ROW><id>18623522</id><snippet>object</snippet></ROW><ROW><id>18623522</id><snippet>__setitem__</snippet></ROW><ROW><id>18623522</id><snippet>__setitem__</snippet></ROW><ROW><id>18623522</id><snippet>obj[key] = value</snippet></ROW><ROW><id>18623522</id><snippet>setattr()</snippet></ROW><ROW><id>18623522</id><snippet>self</snippet></ROW><ROW><id>18623522</id><snippet>setattr(self, FileName_withoutExtension, OS_appropriete_file(self.root,fileName))
</snippet></ROW><ROW><id>18623698</id><snippet>variable = int(stringToInt) if stringToInt else None
</snippet></ROW><ROW><id>18623698</id><snippet>variable</snippet></ROW><ROW><id>18623698</id><snippet>int(stringToInt)</snippet></ROW><ROW><id>18623698</id><snippet>stringToInt</snippet></ROW><ROW><id>18623698</id><snippet>'mystring'</snippet></ROW><ROW><id>18623698</id><snippet>ValueError</snippet></ROW><ROW><id>18623698</id><snippet>ValueError</snippet></ROW><ROW><id>18623698</id><snippet>try:
    variable = int(stringToInt)
except ValueError:
    variable = None
</snippet></ROW><ROW><id>18623790</id><snippet>&lt;tag&gt;a&lt;/tag&gt;&lt;tag&gt;b&lt;/tag&gt;</snippet></ROW><ROW><id>18623790</id><snippet>&lt;tag&gt;ab&lt;/tag&gt;</snippet></ROW><ROW><id>18623790</id><snippet>&lt;p&gt;</snippet></ROW><ROW><id>18623790</id><snippet>&lt;block&gt;</snippet></ROW><ROW><id>18623918</id><snippet>float(numer)/i == float(int(n[0])) and float(denom)/i == float(int(d[1]))
</snippet></ROW><ROW><id>18623918</id><snippet>numer == i * int(n[0]) and denom == i * int(d[1])
</snippet></ROW><ROW><id>18623918</id><snippet>int</snippet></ROW><ROW><id>18623918</id><snippet>float</snippet></ROW><ROW><id>18623918</id><snippet>elif</snippet></ROW><ROW><id>18623918</id><snippet>elif</snippet></ROW><ROW><id>18623918</id><snippet>if</snippet></ROW><ROW><id>18623918</id><snippet>for</snippet></ROW><ROW><id>18623918</id><snippet>elif</snippet></ROW><ROW><id>18623918</id><snippet>if</snippet></ROW><ROW><id>18623918</id><snippet>curious</snippet></ROW><ROW><id>18623918</id><snippet>for</snippet></ROW><ROW><id>18623918</id><snippet>i</snippet></ROW><ROW><id>18623918</id><snippet>def curious(numer,denom):
    n = str(numer)
    d = str(denom)

    if len(n) == 2 == len(d) and n[1] == d[0] and n != d:
       for i in range(2, numer+1):
           if numer == i*int(n[0]) and denom == i*int(d[1]):
               return n + "/" + d
           elif i == 2 and d[1] != "0":
               if Fraction(int(n[0]), int(d[1])) == Fraction(numer, denom):
                   return n + d
</snippet></ROW><ROW><id>18623918</id><snippet>curious</snippet></ROW><ROW><id>18623918</id><snippet>curious</snippet></ROW><ROW><id>18623918</id><snippet>numer &lt; denom</snippet></ROW><ROW><id>18623918</id><snippet>for</snippet></ROW><ROW><id>18623918</id><snippet>curious</snippet></ROW><ROW><id>18623918</id><snippet>import time
from fractions import Fraction

def curious(numer, denom):
    n = str(numer)
    d = str(denom)
    return (n[0] == d[1] != '0' and denom * int(n[1]) == numer * int(d[0])) \
        or (n[0] == d[0] != '0' and denom * int(n[1]) == numer * int(d[1])) \
        or (n[1] == d[0] != '0' and denom * int(n[0]) == numer * int(d[1])) \
        or (n[1] == d[1] != '0' and denom * int(n[0]) == numer * int(d[0]))

start = time.time()

for i in range(10, 100):
    for j in range(i+1, 100):
        if curious(i, j):
           print i, "/", j

elapsed = time.time() - start
print "The elapsed time is", elapsed, "seconds."
</snippet></ROW><ROW><id>18623918</id><snippet>fractions.gcd(n,d)</snippet></ROW><ROW><id>18623936</id><snippet>&gt;&gt;&gt; A = [[1,2,3], [2,3,4], [3,4,5], [3,2,4]]
&gt;&gt;&gt; smaller_A = {frozenset(x) for x in A}
&gt;&gt;&gt; smaller_A
{frozenset({1, 2, 3}), frozenset({2, 3, 4}), frozenset({3, 4, 5})}
</snippet></ROW><ROW><id>18623936</id><snippet>&gt;&gt;&gt; [list(x) for x in smaller_A]
[[1, 2, 3], [2, 3, 4], [3, 4, 5]]
</snippet></ROW><ROW><id>18623936</id><snippet>A</snippet></ROW><ROW><id>18623936</id><snippet>&gt;&gt;&gt; A = [[1,2,3], [2,3,4], [3,4,5], [3,2,4]]
&gt;&gt;&gt; seen = set()
&gt;&gt;&gt; smaller_A = []
&gt;&gt;&gt; for x in A:
...     if frozenset(x) not in seen:
...         smaller_A.append(x)
...         seen.add(frozenset(x))
...
&gt;&gt;&gt; smaller_A
[[1, 2, 3], [2, 3, 4], [3, 4, 5]]
</snippet></ROW><ROW><id>18623936</id><snippet>frozenset(x)</snippet></ROW><ROW><id>18624069</id><snippet>reset_index()</snippet></ROW><ROW><id>18624069</id><snippet>In [130]: s
Out[130]:
0           1
1999-03-31  SOLD_PRICE   NaN
1999-06-30  SOLD_PRICE   NaN
1999-09-30  SOLD_PRICE   NaN
1999-12-31  SOLD_PRICE     3
2000-03-31  SOLD_PRICE     3
Name: 2, dtype: float64

In [131]: s.reset_index()
Out[131]:
            0           1   2
0  1999-03-31  SOLD_PRICE NaN
1  1999-06-30  SOLD_PRICE NaN
2  1999-09-30  SOLD_PRICE NaN
3  1999-12-31  SOLD_PRICE   3
4  2000-03-31  SOLD_PRICE   3
</snippet></ROW><ROW><id>18624069</id><snippet>reset_index()</snippet></ROW><ROW><id>18624069</id><snippet>In [136]: s.reset_index(0).reset_index(drop=True)
Out[136]:
            0   2
0  1999-03-31 NaN
1  1999-06-30 NaN
2  1999-09-30 NaN
3  1999-12-31   3
4  2000-03-31   3
</snippet></ROW><ROW><id>18624069</id><snippet>In [137]: df = s.reset_index()

In [138]: df
Out[138]:
            0           1   2
0  1999-03-31  SOLD_PRICE NaN
1  1999-06-30  SOLD_PRICE NaN
2  1999-09-30  SOLD_PRICE NaN
3  1999-12-31  SOLD_PRICE   3
4  2000-03-31  SOLD_PRICE   3

In [139]: del df[1]

In [140]: df
Out[140]:
            0   2
0  1999-03-31 NaN
1  1999-06-30 NaN
2  1999-09-30 NaN
3  1999-12-31   3
4  2000-03-31   3
</snippet></ROW><ROW><id>18624069</id><snippet>drop()</snippet></ROW><ROW><id>18624069</id><snippet>In [144]: s.reset_index().drop(1, axis=1)
Out[144]:
            0   2
0  1999-03-31 NaN
1  1999-06-30 NaN
2  1999-09-30 NaN
3  1999-12-31   3
4  2000-03-31   3
</snippet></ROW><ROW><id>18624069</id><snippet>In [146]: df.columns = ['Date', 'Sales']

In [147]: df
Out[147]:
         Date  Sales
0  1999-03-31    NaN
1  1999-06-30    NaN
2  1999-09-30    NaN
3  1999-12-31      3
4  2000-03-31      3
</snippet></ROW><ROW><id>18624073</id><snippet>from collections import Counter

def selectUnique(x):
    count = Counter((i[1], i[2]) for i in x)
    out = [i for i in x if count[(i[1], i[2])] == 1]
    return out
</snippet></ROW><ROW><id>18624174</id><snippet>/path/to/your/env/bin/fab</snippet></ROW><ROW><id>18624174</id><snippet>hello</snippet></ROW><ROW><id>18624269</id><snippet>getmembers()</snippet></ROW><ROW><id>18624269</id><snippet>#!/usr/bin/env python3
from io import BytesIO
import urllib.request
import tarfile

tarfile_url = "ftp://ftp.ncbi.nlm.nih.gov/pub/pmc/b0/ac/Breast_Cancer_Res_2001_Nov_9_3(1)_61-65.tar.gz"
ftpstream = urllib.request.urlopen(tarfile_url)

# BytesIO creates an in-memory temporary file.
# See the Python manual: http://docs.python.org/3/library/io.html
tmpfile = BytesIO()
while True:
    # Download a piece of the file from the connection
    s = ftpstream.read(16384)

    # Once the entire file has been downloaded, tarfile returns b''
    # (the empty bytes) which is a falsey value
    if not s:  
        break

    # Otherwise, write the piece of the file to the temporary file.
    tmpfile.write(s)
ftpstream.close()

# Now that the FTP stream has been downloaded to the temporary file,
# we can ditch the FTP stream and have the tarfile module work with
# the temporary file.  Begin by seeking back to the beginning of the
# temporary file.
tmpfile.seek(0)

# Now tell the tarfile module that you're using a file object
# that supports seeking backward.
# r|gz forbids seeking backward; r:gz allows seeking backward
tfile = tarfile.open(fileobj=tmpfile, mode="r:gz")

# You want to limit it to the .nxml files
tfile_members2 = [filename
                  for filename in tfile.getnames()
                  if filename.endswith('.nxml')]

tfile_extract1 = tfile.extractfile(tfile_members2[0])
tfile_extract1_text = tfile_extract1.read()

# And when you're done extracting members:
tfile.close()
tmpfile.close()
</snippet></ROW><ROW><id>18624361</id><snippet>in</snippet></ROW><ROW><id>18624361</id><snippet>from mako.template import Template
t = Template("""
% if key in d:
    key is in dictionary
% else:
    key is not in dictionary
% endif
""")


print t.render(key='a', d={'a': 'A'})  # prints "key is in dictionary"
</snippet></ROW><ROW><id>18624603</id><snippet>a</snippet></ROW><ROW><id>18624603</id><snippet>Hello World</snippet></ROW><ROW><id>18624603</id><snippet>import easygui as eg
a = 4
eg.msgbox(msg='Hello World '+str(a))
</snippet></ROW><ROW><id>18624603</id><snippet>+</snippet></ROW><ROW><id>18624603</id><snippet>'a'+'bc'='abc'</snippet></ROW><ROW><id>18624603</id><snippet>a</snippet></ROW><ROW><id>18624603</id><snippet>str</snippet></ROW><ROW><id>18624603</id><snippet>4</snippet></ROW><ROW><id>18624603</id><snippet>'4'</snippet></ROW><ROW><id>18624603</id><snippet>+</snippet></ROW><ROW><id>18624616</id><snippet>import test
</snippet></ROW><ROW><id>18624616</id><snippet>test</snippet></ROW><ROW><id>18624616</id><snippet>test</snippet></ROW><ROW><id>18624616</id><snippet>test.whatever</snippet></ROW><ROW><id>18624616</id><snippet>module1</snippet></ROW><ROW><id>18624616</id><snippet>test.module1</snippet></ROW><ROW><id>18624616</id><snippet>from test import *
</snippet></ROW><ROW><id>18624616</id><snippet>test</snippet></ROW><ROW><id>18624616</id><snippet>module1</snippet></ROW><ROW><id>18624616</id><snippet>test</snippet></ROW><ROW><id>18624616</id><snippet>module1</snippet></ROW><ROW><id>18624806</id><snippet>zip()</snippet></ROW><ROW><id>18624806</id><snippet>&gt;&gt;&gt; l = [[["a","b","c"],["d","e","f"]],[["g","h","i"],["j","k","l"]]]
&gt;&gt;&gt; [zip(*item) for item in l]
[[('a', 'd'), ('b', 'e'), ('c', 'f')], [('g', 'j'), ('h', 'k'), ('i', 'l')]]
</snippet></ROW><ROW><id>18624806</id><snippet>def MakePairs(inputlist):
    return [zip(*item) for item in inputlist]
</snippet></ROW><ROW><id>18624815</id><snippet>?</snippet></ROW><ROW><id>18624815</id><snippet>^(?P&lt;source&gt;\[[^\]]+\])?\s*&lt;(?:\[[^\]]+\])?(?P&lt;sender&gt;[^&gt;]*)&gt;\s*(?P&lt;message&gt;.*)$
</snippet></ROW><ROW><id>18624815</id><snippet>[Owner]bit2shift</snippet></ROW><ROW><id>18624815</id><snippet>&lt;sender&gt;</snippet></ROW><ROW><id>18624815</id><snippet>[Chat] &lt;[VIP][Owner]bit2shift&gt; hey</snippet></ROW><ROW><id>18624815</id><snippet>*</snippet></ROW><ROW><id>18624815</id><snippet>^(?P&lt;source&gt;\[[^\]]+\])?\s*&lt;(?:\[[^\]]+\])*(?P&lt;sender&gt;[^&gt;]*)&gt;\s*(?P&lt;message&gt;.*)$
</snippet></ROW><ROW><id>18624815</id><snippet>bit2shift</snippet></ROW><ROW><id>18624815</id><snippet>&lt;sender&gt;</snippet></ROW><ROW><id>18625018</id><snippet>   python setup.py build --compiler=cygwin
</snippet></ROW><ROW><id>18625018</id><snippet>   python setup.py build
</snippet></ROW><ROW><id>18625018</id><snippet>   python setup.py install
</snippet></ROW><ROW><id>18625082</id><snippet>EOF = chr(4)
import zmq

def file_sink(filename, url):
    """forward messages on zmq to a file"""
    socket = zmq.Context.instance().socket(zmq.PULL)
    socket.bind(url)
    written = 0
    with open(filename, 'wb') as f:
        while True:
            chunk = socket.recv()
            if chunk == EOF:
                break
            f.write(chunk)
            written += len(chunk)

    socket.close()
    return written
</snippet></ROW><ROW><id>18625082</id><snippet>class FileProxy(object):
    """Proxy to a remote file over zmq"""
    def __init__(self, url):
        self.socket = zmq.Context.instance().socket(zmq.PUSH)
        self.socket.connect(url)

    def write(self, chunk):
        """write a chunk of bytes to the remote file"""
        self.socket.send(chunk)
</snippet></ROW><ROW><id>18625082</id><snippet>Proxy.write(EOF)</snippet></ROW><ROW><id>18625140</id><snippet>import fileinput
import sys

print 'list of goodies'
for line in fileinput.input(['./lista.txt'], inplace=True):
    number, item = line.rstrip().split(' ', 1) # strip new line from right, split on first space
    print 'number {0} of {1} for me'.format(number, item)
</snippet></ROW><ROW><id>18625140</id><snippet>print '{0}.{0}-{1}:{test}'.format('first','second', test='third')
</snippet></ROW><ROW><id>18625140</id><snippet>first.first-second:third
</snippet></ROW><ROW><id>18625248</id><snippet>#!/usr/bin/python</snippet></ROW><ROW><id>18625248</id><snippet>#!</snippet></ROW><ROW><id>18625294</id><snippet>import matplotlib.pyplot as plt
import numpy as np
import wave
import sys


spf = wave.open('wavfile.wav','r')

#Extract Raw Audio from Wav File
signal = spf.readframes(-1)
signal = np.fromstring(signal, 'Int16')


#If Stereo
if spf.getnchannels() == 2:
    print 'Just mono files'
    sys.exit(0)

plt.figure(1)
plt.title('Signal Wave...')
plt.plot(signal)
</snippet></ROW><ROW><id>18625294</id><snippet>plt.plot(Time,signal)</snippet></ROW><ROW><id>18625294</id><snippet>import matplotlib.pyplot as plt
import numpy as np
import wave
import sys


spf = wave.open('Animal_cut.wav','r')

#Extract Raw Audio from Wav File
signal = spf.readframes(-1)
signal = np.fromstring(signal, 'Int16')
fs = spf.getframerate()

#If Stereo
if spf.getnchannels() == 2:
    print 'Just mono files'
    sys.exit(0)


Time=np.linspace(0, len(signal)/fs, num=len(signal))

plt.figure(1)
plt.title('Signal Wave...')
plt.plot(Time,signal)
plt.show()
</snippet></ROW><ROW><id>18625372</id><snippet>directions = dict(
    white={'North':'East','East':'South','South':'West','West':'North'},
    black={'North':'West','West':'South','South':'East','East':'North'},
)

def orientation_and_colour_change(ant_row,ant_col,orientation):
    "Return new orientation, and change grid state as a side effect."
    color = grid[ant_row][ant_col]
    grid[ant_row][ant_col] = 'white' if color == 'black' else 'black'
    return directions[color][orientation]
</snippet></ROW><ROW><id>18625566</id><snippet>QMessageBox.information(...)
</snippet></ROW><ROW><id>18625653</id><snippet>join</snippet></ROW><ROW><id>18625653</id><snippet>One-to-One</snippet></ROW><ROW><id>18625653</id><snippet>User</snippet></ROW><ROW><id>18625653</id><snippet>User</snippet></ROW><ROW><id>18625677</id><snippet>#define you functions
def move_ant(grid,row,col,orientation):
    row,col,orientation = orientation_and_color_change(row,col,orientation)#run function and return values.

    row,col,orientation = movement(row,col,orientation)#run function and return changed vals

    return row,col,orientation

def orientation_and_color_change(changeRow,changeCol,changeOrientation):
    #do stuff with the variables you've inputted
    return changeRow,changeCol,changeOrientation

def movement(moveRow,moveCol,moveOrientation):
    #do stuff with variables
    return changeRow,changeCol,changeOrientation
#RUN THE FUNCTION
#not sure how you have you're vars set up
grid = [10,30]#random numbers! Yay!
row = 1
col = 1
orientation = 0
row,col,orientation = move_ant(grid,row,col,orientation)
</snippet></ROW><ROW><id>18625677</id><snippet>row,col,orientation = movement(row,col,orientation)</snippet></ROW><ROW><id>18625677</id><snippet>row</snippet></ROW><ROW><id>18625677</id><snippet>col</snippet></ROW><ROW><id>18625677</id><snippet>orientation</snippet></ROW><ROW><id>18625677</id><snippet>return changeRow,changeCol,changeOrientation</snippet></ROW><ROW><id>18625709</id><snippet>'7' in line and len(line) &gt; 1
</snippet></ROW><ROW><id>18625709</id><snippet>str.isdigit()</snippet></ROW><ROW><id>18625741</id><snippet>l3 = l1
</snippet></ROW><ROW><id>18625741</id><snippet>l3</snippet></ROW><ROW><id>18625741</id><snippet>l1</snippet></ROW><ROW><id>18625741</id><snippet>remove()</snippet></ROW><ROW><id>18625741</id><snippet>l3.remove(a)</snippet></ROW><ROW><id>18625741</id><snippet>l1</snippet></ROW><ROW><id>18625741</id><snippet>l1</snippet></ROW><ROW><id>18625741</id><snippet>b</snippet></ROW><ROW><id>18625741</id><snippet>c</snippet></ROW><ROW><id>18625741</id><snippet>l3 = list(l1)  # create a new, independent list
</snippet></ROW><ROW><id>18625799</id><snippet>search()</snippet></ROW><ROW><id>18625799</id><snippet>m = re.search("at (\d{1,2}):\d{2}", p)

if m:
    a = m.group(1)
</snippet></ROW><ROW><id>18625799</id><snippet>a = m.group(1) if m else some_default_value
</snippet></ROW><ROW><id>18625799</id><snippet>re.compile()</snippet></ROW><ROW><id>18625867</id><snippet>&lt;VirtualHost *:80&gt;

    WSGIScriptAlias / /Users/username/Projects/django_books/django_books/django.wsgi

    #the directory tag before was /Users/username/Projects/django_books/django_books/&gt;
    #this was one directory too deep
    #from my structure above, you can see I needed to change my directory tag to this:

    &lt;Directory /Users/username/Projects/django_books/&gt;
        Order Allow,Deny
        Allow from All
    &lt;/Directory&gt;

    &lt;Directory /Users/username/.virtualenvs/django_books/lib/python2.7/site-packages/django/contrib/admin/static/admin/&gt;
        Order Allow,Deny
        Allow from All
    &lt;/Directory&gt;

    Alias /static/admin/ /Users/username/.virtualenvs/django_books/lib/python2.7/site-packages/d$
    Alias /static/ /Users/username/Projects/django_books/static/

&lt;/VirtualHost&gt;
</snippet></ROW><ROW><id>18625932</id><snippet>shutil.move()</snippet></ROW><ROW><id>18625932</id><snippet>shutil.move()</snippet></ROW><ROW><id>18625932</id><snippet>rmtree()</snippet></ROW><ROW><id>18625932</id><snippet>shutil</snippet></ROW><ROW><id>18625932</id><snippet>[Errno 22] Invalid argument</snippet></ROW><ROW><id>18625932</id><snippet>EINVAL</snippet></ROW><ROW><id>18625932</id><snippet>import shutil
import sys
import traceback

orig_copystat = shutil.copystat
def my_copystat(src, dst):
    try:
        orig_copystat(src, dst)
    except Exception as e:
        sys.stdout.write('copystat failed: %s\n' % e)
        traceback.print_exc()

shutil.copystat = my_copystat

# Your script here...
</snippet></ROW><ROW><id>18625932</id><snippet>copystat failed: ...</snippet></ROW><ROW><id>18625932</id><snippet>shutil.copyfile</snippet></ROW><ROW><id>18625932</id><snippet>copyfile()</snippet></ROW><ROW><id>18626031</id><snippet>reduce</snippet></ROW><ROW><id>18626031</id><snippet>reduce(lambda acc, c: acc + c, [i.a for i in B])
</snippet></ROW><ROW><id>18626031</id><snippet>sum()</snippet></ROW><ROW><id>18626031</id><snippet>sum([i.a for i in B])
</snippet></ROW><ROW><id>18626176</id><snippet>data = np.loadtxt('data.csv',delimiter=',',usecols=range(1,7),skiprows=1)
</snippet></ROW><ROW><id>18626176</id><snippet>day,hour,minute,Net_Shortwave_Avg,Net_Longwave_Avg,Net_Rad_Avg =  np.loadtxt('data.csv',delimiter=',',usecols=range(1,7),skiprows=1,unpack=True)
</snippet></ROW><ROW><id>18626210</id><snippet>tupleize_cols=False</snippet></ROW><ROW><id>18626210</id><snippet>DataFrame.to_csv()</snippet></ROW><ROW><id>18626210</id><snippet>In [60]: df = DataFrame(poisson(50, size=(10, 2)), columns=['laptop', 'tv'])

In [61]: df
Out[61]:
   laptop  tv
0      48  57
1      48  45
2      48  49
3      61  47
4      49  47
5      45  65
6      49  40
7      58  39
8      46  65
9      43  53

In [62]: df['store'] = np.random.choice(['best_buy', 'amazon'], len(df))

In [63]: df
Out[63]:
   laptop  tv     store
0      48  57  best_buy
1      48  45  best_buy
2      48  49  best_buy
3      61  47  best_buy
4      49  47    amazon
5      45  65    amazon
6      49  40    amazon
7      58  39  best_buy
8      46  65    amazon
9      43  53  best_buy

In [64]: res = df.groupby('store').agg(['mean', 'std', 'min', 'max']).T

In [65]: res
Out[65]:
store        amazon  best_buy
laptop mean  47.250    51.000
       std    2.062     6.928
       min   45.000    43.000
       max   49.000    61.000
tv     mean  54.250    48.333
       std   12.738     6.282
       min   40.000    39.000
       max   65.000    57.000

In [66]: u = res.unstack()

In [67]: u
Out[67]:
store   amazon                    best_buy
          mean     std  min  max      mean    std  min  max
laptop   47.25   2.062   45   49    51.000  6.928   43   61
tv       54.25  12.738   40   65    48.333  6.282   39   57

In [68]: u.to_csv('the_csv.csv', tupleize_cols=False, sep='\t')

In [69]: cat the_csv.csv
store   amazon  amazon  amazon  amazon  best_buy        best_buy        best_buy        best_buy
        mean    std     min     max     mean    std     min     max

laptop  47.25   2.0615528128088303      45.0    49.0    51.0    6.928203230275509       43.0    61.0
tv      54.25   12.737739202856996      40.0    65.0    48.333333333333336      6.282250127674532       39.0    57.0
</snippet></ROW><ROW><id>18626289</id><snippet>root = tree.getroot()</snippet></ROW><ROW><id>18626289</id><snippet>import lxml.html
import urllib

response = urllib.urlopen('http://www.codecademy.com/username')
tree = lxml.html.parse(response)
# tree.write('/tmp/test.html')
root = tree.getroot()
print(root.find_class('stat-count'))
</snippet></ROW><ROW><id>18626289</id><snippet>[&lt;Element span at 0xa3146bc&gt;, &lt;Element span at 0xa3146ec&gt;]
</snippet></ROW><ROW><id>18626647</id><snippet>input()</snippet></ROW><ROW><id>18626647</id><snippet>raw_input()</snippet></ROW><ROW><id>18626647</id><snippet>re</snippet></ROW><ROW><id>18626647</id><snippet>&lt;p&gt;</snippet></ROW><ROW><id>18626647</id><snippet>name</snippet></ROW><ROW><id>18626647</id><snippet>#!/usr/bin/env python3
from xml.dom import minidom
import os.path

def new_value(parameter, parameter_value, target_dir, inputfile):
    # Load the XML file and parse it
    dom = minidom.parse(inputfile)

    # Find all &lt;p&gt; elements with the correct name= attribute
    els = [element
           for element in dom.getElementsByTagName('p')
           if element.getAttribute('name') == parameter]

    # Choose the first among these
    chosen_el = els[0]

    # Set its text content
    if chosen_el.hasChildNodes:
        # Assumes that the first child is in fact a text node
        chosen_el.firstChild.nodeValue = parameter_value
    else:
        # If the element is empty, add a child node
        chosen_el.appendChild(dom.createTextNode(parameter_value))

    fullname = os.path.join(target_dir, "test" + str(parameter_value) + ".xml")

    # Opening a file using a "with open" block automatically
    # closes it at the end of the block
    with open(fullname, 'wb') as outFile:
        outFile.write(dom.toxml('utf-8'))

parameter = input("Enter the parameter: ")              # or 'Mango'
target_dir = input("Enter the target directory: ")      # or '.'
input_file = input("Enter the input file: ")            # or 'so_xml.xml'
parameter_value = input("Enter the value to replace: ") # or 'Manstop'
new_value(parameter, parameter_value, target_dir, input_file)
</snippet></ROW><ROW><id>18626651</id><snippet>import numpy as np
import itertools as it

def row_product(*arrays):
    lengths = np.array([x.shape[0] for x in arrays])
    positions = np.cumsum(lengths)

    ranges = np.arange(positions[-1])
    ranges = np.split(ranges,positions[:-1])

    total = np.concatenate((arrays),axis=0)

    inds = np.fromiter(it.chain.from_iterable(it.product(*ranges)), np.int)
    inds = inds.reshape(-1, len(arrays))

    return np.take(total, inds, axis=0)
</snippet></ROW><ROW><id>18626651</id><snippet>a=np.array([[2,0],[1,1],[2,0]])
b=np.array([[1,0],[0,1]])
c=np.array([[0,0]])

print row_product(a,b,c)

[[[2 0]
  [1 0]
  [0 0]]

 [[2 0]
  [0 1]
  [0 0]]

 [[1 1]
  [1 0]
  [0 0]]

 [[1 1]
  [0 1]
  [0 0]]

 [[2 0]
  [1 0]
  [0 0]]

 [[2 0]
  [0 1]
  [0 0]]]
</snippet></ROW><ROW><id>18626691</id><snippet>foo</snippet></ROW><ROW><id>18626691</id><snippet>foo</snippet></ROW><ROW><id>18626691</id><snippet>bar</snippet></ROW><ROW><id>18626691</id><snippet>class Blah(object):
    @copy_argspec(bar)
    def foo(self, *args, **kwargs): 
        """ a docstr """
        result = bar(*args, **kwargs)
        result = result**2 # just so it's clear we're doing something extra here...
        return result
</snippet></ROW><ROW><id>18626691</id><snippet>bar</snippet></ROW><ROW><id>18626691</id><snippet>help(Blah.foo)</snippet></ROW><ROW><id>18626691</id><snippet>Help on method foo in module __main__:

foo(self, *args, **kwargs) unbound __main__.Blah method
    a docstr
</snippet></ROW><ROW><id>18626691</id><snippet>Help on method foo in module __main__:

foo(self, x, y, z=1, q=2) unbound __main__.Blah method
    a more useful docstr, saying what x,y,z,q do
</snippet></ROW><ROW><id>18626691</id><snippet>import inspect

class copy_argspec(object):
    """
    copy_argspec is a signature modifying decorator.  Specifically, it copies
    the signature from `source_func` to the wrapper, and the wrapper will call
    the original function (which should be using *args, **kwds).  The argspec,
    docstring, and default values are copied from src_func, and __module__ and
    __dict__ from tgt_func.
    """
    def __init__(self, src_func):
        self.argspec = inspect.getargspec(src_func)
        self.src_doc = src_func.__doc__
        self.src_defaults = src_func.func_defaults

    def __call__(self, tgt_func):
        tgt_argspec = inspect.getargspec(tgt_func)
        need_self = False
        if tgt_argspec[0][0] == 'self':
            need_self = True

        name = tgt_func.__name__
        argspec = self.argspec
        if argspec[0][0] == 'self':
            need_self = False
        if need_self:
            newargspec = (['self'] + argspec[0],) + argspec[1:]
        else:
            newargspec = argspec
        signature = inspect.formatargspec(
                formatvalue=lambda val: "",
                *newargspec
                )[1:-1]
        new_func = (
                'def _wrapper_(%(signature)s):\n' 
                '    return %(tgt_func)s(%(signature)s)' % 
                {'signature':signature, 'tgt_func':'tgt_func'}
                   )
        evaldict = {'tgt_func' : tgt_func}
        exec new_func in evaldict
        wrapped = evaldict['_wrapper_']
        wrapped.__name__ = name
        wrapped.__doc__ = self.src_doc
        wrapped.func_defaults = self.src_defaults
        wrapped.__module__ = tgt_func.__module__
        wrapped.__dict__ = tgt_func.__dict__
        return wrapped
</snippet></ROW><ROW><id>18626918</id><snippet>unittest</snippet></ROW><ROW><id>18626918</id><snippet>with self.assertRaises(InvalidObj) as cm:
    at.aequalb()

self.assertEqual("This is an error", cm.exception.value)
</snippet></ROW><ROW><id>18626918</id><snippet>assertRaises()</snippet></ROW><ROW><id>18626967</id><snippet>for word in words:
</snippet></ROW><ROW><id>18626967</id><snippet>word</snippet></ROW><ROW><id>18626967</id><snippet>words</snippet></ROW><ROW><id>18626967</id><snippet>x</snippet></ROW><ROW><id>18626967</id><snippet>for item in words:
</snippet></ROW><ROW><id>18626967</id><snippet>y = is_word(wordlist, word)
</snippet></ROW><ROW><id>18626967</id><snippet>y = is_word(wordlist, item)
</snippet></ROW><ROW><id>18626967</id><snippet>if y == True:
</snippet></ROW><ROW><id>18626967</id><snippet>if y:
</snippet></ROW><ROW><id>18627379</id><snippet>id_array = [x.id for x in _get_object_array() if x.id % 2 == 0]
</snippet></ROW><ROW><id>18627404</id><snippet>range(2,number)</snippet></ROW><ROW><id>18627404</id><snippet>else</snippet></ROW><ROW><id>18627404</id><snippet>for</snippet></ROW><ROW><id>18627404</id><snippet>for number in range(0,1000):
    for x in range(2,number):
        if(number % x == 0):
            print number,"divisible by",x
            break
    else:
        print number, "is prime"
</snippet></ROW><ROW><id>18627404</id><snippet>number</snippet></ROW><ROW><id>18627404</id><snippet>from math import sqrt
for number in range(0,1000):
    for x in range(2,int(sqrt(number/2))):
        # Rest of code as above.
</snippet></ROW><ROW><id>18627597</id><snippet>QPushButton</snippet></ROW><ROW><id>18627597</id><snippet>QAbstractButton</snippet></ROW><ROW><id>18627597</id><snippet>QWidget</snippet></ROW><ROW><id>18627597</id><snippet>QWidget.setFixedHeight</snippet></ROW><ROW><id>18627597</id><snippet>self.spherize.setFixedHeight(50)
</snippet></ROW><ROW><id>18627622</id><snippet>import ui.interface.interface</snippet></ROW><ROW><id>18627622</id><snippet>ui.interface.interface</snippet></ROW><ROW><id>18627622</id><snippet>self.interfaceCodesConstructor = InterfaceCodes()
</snippet></ROW><ROW><id>18627622</id><snippet>import ui.interface.interface
self.interfaceCodesConstructor = ui.interface.interface.InterfaceCodes()
</snippet></ROW><ROW><id>18627622</id><snippet>from ui.interface.interface import *
self.interfaceCodesConstructor = InterfaceCodes()
</snippet></ROW><ROW><id>18627754</id><snippet>export</snippet></ROW><ROW><id>18627754</id><snippet>source</snippet></ROW><ROW><id>18627754</id><snippet>.</snippet></ROW><ROW><id>18627754</id><snippet>#!</snippet></ROW><ROW><id>18627754</id><snippet>source</snippet></ROW><ROW><id>18627754</id><snippet>#!/bin/echo please run this with the source command
</snippet></ROW><ROW><id>18628642</id><snippet>import gzip
data = gzip.open('pagecounts-20130601-000000.gz', 'r')
data.readline()
data.readline()
print data.readline()
</snippet></ROW><ROW><id>18629154</id><snippet>&gt;&gt;&gt; a = [-1, 1, 66.25, 333, 333, 1234.5]
&gt;&gt;&gt; a[:] = [item for item in a if item != 333]
</snippet></ROW><ROW><id>18629154</id><snippet>remove</snippet></ROW><ROW><id>18629154</id><snippet>&gt;&gt;&gt; a = [-1, 1, 66.25, 333, 333, 1234.5]
&gt;&gt;&gt; for i in range(len(a) - 1, -1, -1):  # iterate over reversed indices's
&gt;&gt;&gt;     if a[i] == 333:
&gt;&gt;&gt;         del a[i]
</snippet></ROW><ROW><id>18629154</id><snippet>del list[index]</snippet></ROW><ROW><id>18629154</id><snippet>list.remove</snippet></ROW><ROW><id>18629173</id><snippet>split_string_to_get_key_pair()</snippet></ROW><ROW><id>18629173</id><snippet>(key, value)</snippet></ROW><ROW><id>18630037</id><snippet>concat([aapl_old, aapl_new])</snippet></ROW><ROW><id>18630037</id><snippet>aapl_new</snippet></ROW><ROW><id>18630037</id><snippet>aapl_new[~aapl_new.index.isin(aapl_old.index)]
</snippet></ROW><ROW><id>18630037</id><snippet>&gt;&gt;&gt; aapl_new_unique = aapl_new[~aapl_new.index.isin(aapl_old.index)]
&gt;&gt;&gt; pd.concat([aapl_old, aapl_new_unique])
</snippet></ROW><ROW><id>18630037</id><snippet>&gt;&gt;&gt; aapl_all = pd.concat([aapl_old, aapl_new])
&gt;&gt;&gt; aapl_all.drop_duplicates()
</snippet></ROW><ROW><id>18630121</id><snippet>d</snippet></ROW><ROW><id>18630121</id><snippet>for key in d:
    print('{} | {}'.format(key, d[i]))
</snippet></ROW><ROW><id>18630121</id><snippet>KeyError</snippet></ROW><ROW><id>18630121</id><snippet>collections.Counter()</snippet></ROW><ROW><id>18630121</id><snippet>from collections import Counter

def histogram(L):
    d = Counter(letter for line in L for letter in x)
    for letter in d:
        print('{} | {}'.format(letter, d[i]))
    return d
</snippet></ROW><ROW><id>18630607</id><snippet>from itertools import *
print len(filter(
  lambda candidate: all(imap(
    lambda index: sum(imap(lambda _: _[index], candidate)) == 2,
    xrange(5)
  )),
  product(set(permutations([0,0,0,1,1])), repeat=5)
))
</snippet></ROW><ROW><id>18631198</id><snippet>i</snippet></ROW><ROW><id>18631198</id><snippet>[8,9]</snippet></ROW><ROW><id>18631198</id><snippet>&gt;&gt;&gt; lis = [[1, 2, 3, 4, 5, 6], [4, 5, 6], [7], [8, 9]]
&gt;&gt;&gt; [j for i in lis for j in i]
[1, 2, 3, 4, 5, 6, 4, 5, 6, 7, 8, 9]
&gt;&gt;&gt; i
[8, 9]
</snippet></ROW><ROW><id>18631198</id><snippet>i</snippet></ROW><ROW><id>18631198</id><snippet>&gt;&gt;&gt; [j for j in i for i in lis]
[8, 8, 8, 8, 9, 9, 9, 9]
</snippet></ROW><ROW><id>18631198</id><snippet>&gt;&gt;&gt; lis = [[1, 2, 3, 4, 5, 6], [4, 5, 6], [7], [8, 9]]
&gt;&gt;&gt; for i in lis:
...     for j in i:
...         print j,
...         
1 2 3 4 5 6 4 5 6 7 8 9
&gt;&gt;&gt; i
[8, 9]
&gt;&gt;&gt; for j in i:
...     for i in lis:
...         print j,
...         
8 8 8 8 9 9 9 9
</snippet></ROW><ROW><id>18631198</id><snippet>&gt;&gt;&gt; lis = [[1, 2, 3, 4, 5, 6], [4, 5, 6], [7], [8, 9]]
&gt;&gt;&gt; [j for i in lis for j in i]
[1, 2, 3, 4, 5, 6, 4, 5, 6, 7, 8, 9]
&gt;&gt;&gt; i
Traceback (most recent call last):
NameError: name 'i' is not defined

&gt;&gt;&gt; j
Traceback (most recent call last):
NameError: name 'j' is not defined
</snippet></ROW><ROW><id>18631615</id><snippet>def f():
   locals()['a'] = 3
   print(a)
</snippet></ROW><ROW><id>18631615</id><snippet>NameError: global name 'b' is not defined</snippet></ROW><ROW><id>18631615</id><snippet>file_path = ..\vessel_name.txt

def my_input_func(file_path):
    vessel = {}
    execfile(file_path, vessel)

    data = np.array([[vessel['hull_length']],
                     [vessel['hull_width'],
                     [vessel['etc.']])

    return(data)
</snippet></ROW><ROW><id>18631930</id><snippet>logging</snippet></ROW><ROW><id>18631930</id><snippet>logging</snippet></ROW><ROW><id>18631930</id><snippet>logging.getLogger()</snippet></ROW><ROW><id>18631930</id><snippet>lib_xml</snippet></ROW><ROW><id>18631930</id><snippet>import logging

logger = logging.getLogger('conf_store')
</snippet></ROW><ROW><id>18631930</id><snippet>logger = logging.getLogger(__name__)
</snippet></ROW><ROW><id>18631949</id><snippet>    for index,tag in enumerate(globalTagnames):
      if tag in tobesearched:
         print values[index]
</snippet></ROW><ROW><id>18632004</id><snippet>str.rsplit()</snippet></ROW><ROW><id>18632004</id><snippet>my_string = my_string.rsplit('+', 1)[0]
</snippet></ROW><ROW><id>18632004</id><snippet>.rsplit()</snippet></ROW><ROW><id>18632004</id><snippet>+</snippet></ROW><ROW><id>18632004</id><snippet>[0]</snippet></ROW><ROW><id>18632004</id><snippet>+</snippet></ROW><ROW><id>18632004</id><snippet>&gt;&gt;&gt; 'Mother+why+is+the+river+laughing'.rsplit('+', 1)[0]
'Mother+why+is+the+river'
</snippet></ROW><ROW><id>18632004</id><snippet>+</snippet></ROW><ROW><id>18632004</id><snippet>&gt;&gt;&gt; 'Mother'.rsplit('+', 1)[0]
'Mother'
</snippet></ROW><ROW><id>18632004</id><snippet>True</snippet></ROW><ROW><id>18632004</id><snippet>+</snippet></ROW><ROW><id>18632004</id><snippet>while True:
    last = my_string[-1]
    my_string = my_string[:-1]
    if last == '+':
        break
</snippet></ROW><ROW><id>18632004</id><snippet>str.rsplit()</snippet></ROW><ROW><id>18632325</id><snippet>class myFactory(WebSocketClientFactory):

    def __init__(self, url, data_processing):
        WebSocketClientFactory.__init__(self, url)
        # here you could have passed whatever parameters
        # later allow you to build up the protocol instance
        self._data_processing = data_processing

    def buildProtocol(self, addr):
        # Use this method to control the creation of the 
        # protocol instance.
        # You can either build a protocol here and inject
        # data_func, or use different protocol class type.

        protocol = myWs()
        protocol.data_func = self._data_processing
        return protocol
</snippet></ROW><ROW><id>18632325</id><snippet>for topic, func in zip(topic_ids, data_process_fcns):
    url = 'wss://mywebsocket.com/feed?topic_id[]=' + topic
    factory = myFactory(url, func)
    reactor.connectSSL(factory.host, factory.port, factory, ssl.ClientContextFactory())
</snippet></ROW><ROW><id>18632553</id><snippet>__doc__</snippet></ROW><ROW><id>18632553</id><snippet>class Test():
    def test_method(self):
        """I'm a docstring"""
        print "test method"


print Test.test_method.__doc__  # prints "I'm a docstring"
</snippet></ROW><ROW><id>18632553</id><snippet>inspect</snippet></ROW><ROW><id>18632553</id><snippet>inspect.getdoc(object)</snippet></ROW><ROW><id>18632553</id><snippet>print inspect.getdoc(Test.test_method)  # prints "I'm a docstring"
</snippet></ROW><ROW><id>18632558</id><snippet>def parseXML(path):
    '''
    @return: {property: value}
    '''
    # ...


def Bunch():
    return type("XML", tuple(), parseXML(PATH))

foo = Bunch()
</snippet></ROW><ROW><id>18632645</id><snippet>slice</snippet></ROW><ROW><id>18632645</id><snippet>def parsesection(snapshot):
    if snapshot == 'all':
        return slice(None)
    try:
        section = int(snapshot)
    except ValueError:
        section = [int(s) if s else None for s in snapshot.split(':')]
        if len(section) &gt; 3:
            raise ValueError('snapshots input incorrect')
        section = slice(*section)
    return section

print(parsesection(':5'))
print(parsesection('5:15'))
print(parsesection('5:15:3'))
print(parsesection('3'))
print(parsesection('5::3'))
print(parsesection('::2'))
print(parsesection('all'))
</snippet></ROW><ROW><id>18632645</id><snippet>slice(None, 5, None)
slice(5, 15, None)
slice(5, 15, 3)
3
slice(5, None, 3)
slice(None, None, 2)
slice(None, None, None)
</snippet></ROW><ROW><id>18632645</id><snippet>section = slice(*section)</snippet></ROW><ROW><id>18632645</id><snippet>if elif else</snippet></ROW><ROW><id>18632645</id><snippet>section</snippet></ROW><ROW><id>18633026</id><snippet>fetch_version_iter</snippet></ROW><ROW><id>18633206</id><snippet>zip</snippet></ROW><ROW><id>18633206</id><snippet>a = "  PVT corner         |    TYP_25_0P85    |    SLOW_125_0P765 |    SLOW_0_0P765   |    SLOW_M40_0P765 |    FAST_125_0P935 "
b = " Description         |  RD   |  WR | A   |  RD     |  WR     |  RD     |  WR     |  RD     |  WR     |  RD     |  WR     "
head = 0
res = []
for i,(s,t) in enumerate(zip(a,b)):
    if (s,t) == ("|","|"):
        res.append([a[head:i].strip()]+[m.strip() for m in b[head:i].split("|")])
        head = i + 1
res.append([a[head:].strip()]+[m.strip() for m in b[head:].split("|")])

for r in res:
    print r
</snippet></ROW><ROW><id>18633206</id><snippet>['PVT corner', 'Description']
['TYP_25_0P85', 'RD', 'WR', 'A']
['SLOW_125_0P765', 'RD', 'WR']
['SLOW_0_0P765', 'RD', 'WR']
['SLOW_M40_0P765', 'RD', 'WR']
['FAST_125_0P935', 'RD', 'WR']
</snippet></ROW><ROW><id>18633543</id><snippet>if</snippet></ROW><ROW><id>18633543</id><snippet>if len(name) &gt;= 3:  #name must have at least 3 parts
    print(name[0], name[1], name[2])
else:
    print(name[0], name[1])
</snippet></ROW><ROW><id>18633555</id><snippet>(</snippet></ROW><ROW><id>18633555</id><snippet>properties = soup.findAll(('a', {'title':re.compile('Bedroom')}),('i',{'class':'pdate'})
#                      --^^                     ---^      ---^-^-^                -----^
</snippet></ROW><ROW><id>18633555</id><snippet>)</snippet></ROW><ROW><id>18633555</id><snippet>properties = soup.findAll(('a', {'title':re.compile('Bedroom')}),('i',{'class':'pdate'}))
</snippet></ROW><ROW><id>18633596</id><snippet>sys.path</snippet></ROW><ROW><id>18633864</id><snippet>import xml.etree.ElementTree as ET
import sys

name = str.strip(sys.argv[1])
filename = str.strip(sys.argv[2])

fp = open("sample.xml","r")
tree = ET.parse(fp)
root = tree.getroot()

for offers in root.findall('.//{http://url}Offers'):
    value_found = False
    for amount in offers.findall('.//{http://url}Amount'):
        if amount.text == name:
            value_found = True
            break
    if value_found:
        print ET.tostring(offers)
</snippet></ROW><ROW><id>18633864</id><snippet>&lt;url:Offers xmlns:url="http://url"&gt;
    &lt;url:Offer&gt;
      &lt;url:OfferListing&gt;
        &lt;url:Price&gt;
          &lt;url:Amount&gt;1853&lt;/url:Amount&gt;
        &lt;/url:Price&gt;
      &lt;/url:OfferListing&gt;
    &lt;/url:Offer&gt;
  &lt;/url:Offers&gt;

&lt;url:Offers xmlns:url="http://url"&gt;
    &lt;url:Offer&gt;
      &lt;url:OfferListing&gt;
        &lt;url:Price&gt;
          &lt;url:Amount&gt;1853&lt;/url:Amount&gt;
        &lt;/url:Price&gt;
      &lt;/url:OfferListing&gt;
    &lt;/url:Offer&gt;
  &lt;/url:Offers&gt;
</snippet></ROW><ROW><id>18633864</id><snippet>for i, offers in enumerate(root.findall('.//{http://url}Offers'), start=1):
    value_found = False
    for amount in offers.findall('.//{http://url}Amount'):
        if amount.text == name:
            value_found = True
            break
    if value_found:
        tree = ET.ElementTree(offers)
        tree.write("offers%d.xml" % i,
           xml_declaration=True, encoding='utf-8',
           method="xml", default_namespace='http://url')
</snippet></ROW><ROW><id>18633864</id><snippet>&lt;?xml version='1.0' encoding='utf-8'?&gt;
&lt;Offers xmlns="http://url"&gt;
    &lt;Offer&gt;
      &lt;OfferListing&gt;
        &lt;Price&gt;
          &lt;Amount&gt;1853&lt;/Amount&gt;
        &lt;/Price&gt;
      &lt;/OfferListing&gt;
    &lt;/Offer&gt;
  &lt;/Offers&gt;
</snippet></ROW><ROW><id>18634047</id><snippet># pylint: disable=E0602</snippet></ROW><ROW><id>18634047</id><snippet>undefined-variable</snippet></ROW><ROW><id>18634047</id><snippet># pylint: disable=E0602</snippet></ROW><ROW><id>18634047</id><snippet>--disable-msg=E0602</snippet></ROW><ROW><id>18634228</id><snippet>{
_id: Usemongokeyhere
userid: X
days: [
         {day:IsoDate(2013-08-12 00:00), 
          loginCount: 10,
          #morestuff
         },
         {day:IsoDate(2013-08-13 00:00), 
          loginCount: 11,
          #morestuff
         },
      ]
},
#more users
</snippet></ROW><ROW><id>18634228</id><snippet>db.items.find(
    {"days.day":{$gte:ISODate("2013-08-30T00:00:00.000Z"),
                $lt: ISODate("2013-08-31T00:00:00.000Z")
                }
    }
)
</snippet></ROW><ROW><id>18634456</id><snippet>BaseHTTPServer</snippet></ROW><ROW><id>18634649</id><snippet>a[slice_][indices][high_indices]</snippet></ROW><ROW><id>18634649</id><snippet>a</snippet></ROW><ROW><id>18634649</id><snippet>a[slice_][(a[slice_] &gt; 700) &amp; (b[slice_] &gt; 0.5)] = 42
</snippet></ROW><ROW><id>18634675</id><snippet>dict.fromkeys()</snippet></ROW><ROW><id>18634675</id><snippet>c = dict.fromkeys(s, 0)
</snippet></ROW><ROW><id>18634675</id><snippet>&gt;&gt;&gt; s = {1,2,4,5,6}
&gt;&gt;&gt; dict.fromkeys(s, 0)
{1: 0, 2: 0, 4: 0, 5: 0, 6: 0}
</snippet></ROW><ROW><id>18634675</id><snippet>dict.fromkeys()</snippet></ROW><ROW><id>18634683</id><snippet>import collections

d = {
    u'csrfmiddlewaretoken': [u'fhvpUorGAl7LMv4JIJRd0WOEHPkKn6iN'], 
    u'actor_1': [u'first_actor'], 
    u'actor_2': [u'fourth_actor']
}

collections.OrderedDict(sorted(d.items()))
</snippet></ROW><ROW><id>18634809</id><snippet>class SkillRecord(models.Model):
    player          = models.ForeignKey(Player, related_name='skills')
    date            = models.DateTimeField(default=datetime.datetime.now)
</snippet></ROW><ROW><id>18634809</id><snippet>qt = Transfer.objects.filter(...).select_related('player').prefetch_related('player__skills')
</snippet></ROW><ROW><id>18634809</id><snippet>qt[0].player.skills.all()
</snippet></ROW><ROW><id>18634894</id><snippet>interview</snippet></ROW><ROW><id>18634894</id><snippet>Template</snippet></ROW><ROW><id>18634894</id><snippet>Interview</snippet></ROW><ROW><id>18634894</id><snippet>new_message</snippet></ROW><ROW><id>18634894</id><snippet>get_message_value</snippet></ROW><ROW><id>18634894</id><snippet>userprofile.context_processors</snippet></ROW><ROW><id>18635110</id><snippet>def __init__( self, von=None, bis=None, somemore=something ):
    if von is None:
        von = _today()
    if bis is None:
        bis = _today()
</snippet></ROW><ROW><id>18635110</id><snippet>_today()</snippet></ROW><ROW><id>18635110</id><snippet>date</snippet></ROW><ROW><id>18635110</id><snippet>date.strftime()</snippet></ROW><ROW><id>18635110</id><snippet>def _today():
    """Todays date formatted as a string"""

    todays_date = datetime.date.today()
    return todays_date.strftime('%d.%m.%Y')
</snippet></ROW><ROW><id>18635110</id><snippet>    return '{0.day}.{0.month}.{0.year}'.format(todays_date)
</snippet></ROW><ROW><id>18635110</id><snippet>&gt;&gt;&gt; import datetime
&gt;&gt;&gt; adate = datetime.date(2013, 2, 14)
&gt;&gt;&gt; adate.strftime('%d.%m.%Y')
'14.02.2013'
&gt;&gt;&gt; '{0.day}.{0.month}.{0.year}'.format(adate)
'14.2.2013'
</snippet></ROW><ROW><id>18635175</id><snippet>print</snippet></ROW><ROW><id>18635175</id><snippet>=</snippet></ROW><ROW><id>18635175</id><snippet>print("Hi {}, You go to {} don't you". format (x,y))
</snippet></ROW><ROW><id>18635175</id><snippet>&gt;&gt;&gt; x = input('Enter your Name : ')
Enter your Name : Martijn Pieters
&gt;&gt;&gt; y = input('Enter your School : ')
Enter your School : Life
&gt;&gt;&gt; print("Hi {}, You go to {} don't you". format (x,y))
Hi Martijn Pieters, You go to Life don't you
</snippet></ROW><ROW><id>18635175</id><snippet>TypeError: 'str' object is not callable</snippet></ROW><ROW><id>18635175</id><snippet>print</snippet></ROW><ROW><id>18635175</id><snippet>del print
</snippet></ROW><ROW><id>18635392</id><snippet>local("hg pull")
res = local("hg update", capture=True)
print(blue(res))
local("hg status")
</snippet></ROW><ROW><id>18635392</id><snippet>capture=True</snippet></ROW><ROW><id>18635516</id><snippet>if viewYourFile == 'Y' or 'y':</snippet></ROW><ROW><id>18635516</id><snippet>True</snippet></ROW><ROW><id>18635516</id><snippet>'y'</snippet></ROW><ROW><id>18635516</id><snippet>True</snippet></ROW><ROW><id>18635516</id><snippet>&gt;&gt;&gt; bool('y')
True
&gt;&gt;&gt; bool(False or 'y')
True
</snippet></ROW><ROW><id>18635516</id><snippet>if viewYourFile in ('Y', 'y'):</snippet></ROW><ROW><id>18635516</id><snippet>with</snippet></ROW><ROW><id>18635516</id><snippet>print "Note: Your file is available now."
viewYourFile = raw_input("\nDo you wish to view this file now? ")

if viewYourFile in ('Y', 'y'):
    with open('messages.txt', 'r+') as fo:
        data = fo.read()
elif viewYourFile in ('N', 'n'): 
    print "Thank you!"
else:
    print "Didn't recognize user input"
</snippet></ROW><ROW><id>18635668</id><snippet>session.commit()
</snippet></ROW><ROW><id>18635941</id><snippet>http://&lt;url&gt;/paypal/notify 
</snippet></ROW><ROW><id>18635941</id><snippet>500: error</snippet></ROW><ROW><id>18635941</id><snippet>http://&lt;url&gt;/paypal/notify/ 
</snippet></ROW><ROW><id>18636034</id><snippet>for i in ID:
    for j in sales:
        if int(i) == int(j[2])
</snippet></ROW><ROW><id>18636034</id><snippet>i</snippet></ROW><ROW><id>18636034</id><snippet>j[2]</snippet></ROW><ROW><id>18636034</id><snippet>int(i) == int(j[2])</snippet></ROW><ROW><id>18636034</id><snippet>i</snippet></ROW><ROW><id>18636034</id><snippet>for i in ID</snippet></ROW><ROW><id>18636034</id><snippet>for j in sales:
    key = j[2]
    if key in ID:
</snippet></ROW><ROW><id>18636034</id><snippet>getCustomerSet</snippet></ROW><ROW><id>18636034</id><snippet>getBookSet</snippet></ROW><ROW><id>18636034</id><snippet>ID</snippet></ROW><ROW><id>18636034</id><snippet>critics[int(i)] = sales_dict
</snippet></ROW><ROW><id>18636034</id><snippet>sales_dict</snippet></ROW><ROW><id>18636034</id><snippet>critics[int(i)]</snippet></ROW><ROW><id>18636034</id><snippet>i</snippet></ROW><ROW><id>18636034</id><snippet>ID</snippet></ROW><ROW><id>18636034</id><snippet>int(i)</snippet></ROW><ROW><id>18636034</id><snippet>dict</snippet></ROW><ROW><id>18636034</id><snippet>sales</snippet></ROW><ROW><id>18636034</id><snippet>ID</snippet></ROW><ROW><id>18636034</id><snippet>sales_dict</snippet></ROW><ROW><id>18636034</id><snippet>sales_dict[int(j[6])] = 1
</snippet></ROW><ROW><id>18636034</id><snippet>critics</snippet></ROW><ROW><id>18636034</id><snippet>critics</snippet></ROW><ROW><id>18636034</id><snippet>sales_dict</snippet></ROW><ROW><id>18636034</id><snippet>critics = {i:sales_dict.copy() for i in ID}
</snippet></ROW><ROW><id>18636034</id><snippet>def computeCritics(mode, cleaned_sales_input="data/cleaned_sales.csv"):
    if mode == 1:
        filename = 'customer.critics.recommendations'
        path = os.path.join("data/customer", filename)
        ID = getCustomerSet(cleaned_sales_input)
        sales_dict = pickle.load(
            open("data/customer/books.dict.recommendations", "r"))
        key_idx, other_idx = 2, 6
    else:
        filename = 'books.critics.recommendations'
        path = os.path.join("data/books", filename)        
        ID = getBookSet(cleaned_sales_input)
        sales_dict = pickle.load(
            open("data/books/users.dict.recommendations", "r"))
        key_idx, other_idx = 6, 2

    print "creating {}".format(filename)
    ID = {int(item) for item in ID}
    critics = {i:sales_dict.copy() for i in ID}
    with open(path, "wb") as critics_output:
        # make critics dict and pickle it
        with open(cleaned_sales_input, 'rb') as sales_input:
            sales = csv.reader(sales_input)  # read new
            for j in sales:
                key = int(j[key_idx])
                if key in ID:
                    other_key = int(j[other_idx])
                    critics[key][other_key] = 1                    
                critics[key] = sales_dict
        pickle.dump(dict(critics), critics_output)
        print "done"
</snippet></ROW><ROW><id>18636517</id><snippet>input</snippet></ROW><ROW><id>18636517</id><snippet>&gt;&gt;&gt; x = '123'
&gt;&gt;&gt; y = '321'
&gt;&gt;&gt; x+y
'123321'
</snippet></ROW><ROW><id>18636517</id><snippet>answear = int(x) + int(y)
</snippet></ROW><ROW><id>18636518</id><snippet>import pandas as pd
df = pd.DataFrame({'STEPS_ID':range(1107,1113)*2})
df['GROUP'] = (df['STEPS_ID'] &lt; df['STEPS_ID'].shift(1)).astype('int').cumsum()
# df.set_index('GROUP', inplace=True, append=True)
print(df)
</snippet></ROW><ROW><id>18636518</id><snippet>    STEPS_ID  GROUP
0       1107      0
1       1108      0
2       1109      0
3       1110      0
4       1111      0
5       1112      0
6       1107      1
7       1108      1
8       1109      1
9       1110      1
10      1111      1
11      1112      1
</snippet></ROW><ROW><id>18636518</id><snippet>df.groupby('GROUP')....
</snippet></ROW><ROW><id>18637010</id><snippet>obj</snippet></ROW><ROW><id>18637010</id><snippet>lst.sort(key=lambda obj: obj.dimensions.x+obj.dimensions.y+obj.dimensions.z)
</snippet></ROW><ROW><id>18637010</id><snippet>list</snippet></ROW><ROW><id>18637010</id><snippet>list()</snippet></ROW><ROW><id>18637406</id><snippet>try:</snippet></ROW><ROW><id>18637406</id><snippet>except Exception:</snippet></ROW><ROW><id>18637406</id><snippet>logger.exception()</snippet></ROW><ROW><id>18637406</id><snippet>try:
    print a
except Exception:
    logger.exception('Oops, something went wrong')
</snippet></ROW><ROW><id>18637406</id><snippet>raise</snippet></ROW><ROW><id>18637406</id><snippet>&gt;&gt;&gt; import logging
&gt;&gt;&gt; logging.basicConfig()
&gt;&gt;&gt; logger = logging.getLogger()
&gt;&gt;&gt; def foo():
...     print a
... 
&gt;&gt;&gt; def bar(i=0):
...     if i &lt; 3:
...         bar(i + 1)
...     else:
...         foo()
... 
&gt;&gt;&gt; def baz():
...     try:
...         bar()
...     except Exception:
...        logger.exception('Oops, something went wrong')
... 
&gt;&gt;&gt; def spam(): baz()
... 
&gt;&gt;&gt; spam()
ERROR:root:Oops, something went wrong
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 3, in baz
  File "&lt;stdin&gt;", line 3, in bar
  File "&lt;stdin&gt;", line 3, in bar
  File "&lt;stdin&gt;", line 3, in bar
  File "&lt;stdin&gt;", line 5, in bar
  File "&lt;stdin&gt;", line 2, in foo
NameError: global name 'a' is not defined
</snippet></ROW><ROW><id>18637406</id><snippet>logging</snippet></ROW><ROW><id>18637406</id><snippet>try</snippet></ROW><ROW><id>18637406</id><snippet>spam()</snippet></ROW><ROW><id>18637658</id><snippet>count()</snippet></ROW><ROW><id>18637658</id><snippet>&gt;&gt;&gt; sentence = 'The cat sat on the mat.'
&gt;&gt;&gt; sentence.count('a')
3
</snippet></ROW><ROW><id>18637658</id><snippet>sentence = 'The cat sat on the mat.'
c = 0
for letter in sentence:
    if letter == 'a':
        c += 1
print(c)
</snippet></ROW><ROW><id>18637677</id><snippet>zip()</snippet></ROW><ROW><id>18637677</id><snippet>[list(t) for t in zip(*list_of_tuples)]
</snippet></ROW><ROW><id>18637677</id><snippet>zip()</snippet></ROW><ROW><id>18637677</id><snippet>*arguments</snippet></ROW><ROW><id>18637677</id><snippet>zip()</snippet></ROW><ROW><id>18637677</id><snippet>&gt;&gt;&gt; list_of_tuples = [('day1', 'name1', 'value1'), ('day2', 'name2', 'value2'), ('day3', 'name3', 'value3')]
&gt;&gt;&gt; [list(t) for t in zip(*list_of_tuples)]
[['day1', 'day2', 'day3'], ['name1', 'name2', 'name3'], ['value1', 'value2', 'value3']]
</snippet></ROW><ROW><id>18637677</id><snippet>zip()</snippet></ROW><ROW><id>18637677</id><snippet>&gt;&gt;&gt; zip(*list_of_tuples)
[('day1', 'day2', 'day3'), ('name1', 'name2', 'name3'), ('value1', 'value2', 'value3')]
</snippet></ROW><ROW><id>18637677</id><snippet>list(zip(*list_of_tuples))</snippet></ROW><ROW><id>18637740</id><snippet>key</snippet></ROW><ROW><id>18637740</id><snippet>&gt;&gt;&gt; L = ['actor_1', 'actor_3', 'actor_130', 'actor_55', 'actor_5']
&gt;&gt;&gt; def sort_key(s):
...     s, n = s.split('_')
...     return s, int(n)
...
&gt;&gt;&gt; L.sort(key=sort_key)
&gt;&gt;&gt; L
['actor_1', 'actor_3', 'actor_5', 'actor_55', 'actor_130']
</snippet></ROW><ROW><id>18637761</id><snippet>results = index.search(query)</snippet></ROW><ROW><id>18637761</id><snippet>cursor = search.Cursor()
index = search.Index(name='title')

while cursor != None:
    options = search.QueryOptions(limit=5, cursor=cursor, returned_fields='state'))
    results = index.search(search.Query(query_string=text_to_search, options=options))
    cursor = results.cursor
</snippet></ROW><ROW><id>18637777</id><snippet>def tearDown(self):
    """
    Make sure we reset the cursor
    """
    if self.email_sender.connection:
        self.email_sender.connection.close()
    del self.email_sender
</snippet></ROW><ROW><id>18638131</id><snippet>{% extends x|yesno:"stamped/blank.html,stamped/home.html" %}
</snippet></ROW><ROW><id>18638131</id><snippet>blank.html</snippet></ROW><ROW><id>18638131</id><snippet>{% block results %}{% endblock %}

&lt;!-- to allow for corrected shared rendering 
    with ajax posts and normal django rendering --&gt;
</snippet></ROW><ROW><id>18638131</id><snippet>home.html</snippet></ROW><ROW><id>18638158</id><snippet>text</snippet></ROW><ROW><id>18638158</id><snippet>import re
from bs4 import BeautifulSoup as Soup

soup = Soup("""&lt;span class="blk"&gt;Society/Project: &lt;b&gt;Sai Sparsh&lt;/b&gt;&lt;/span&gt;
      &lt;i class="blk"&gt;
         Built-up  Area: &lt;b&gt;1005 Sq.Ft.&lt;/b&gt;
             @ &lt;i class="WebRupeesmall b mr_5 f14"&gt;Rs.&lt;/i&gt;6109/sq.ft&lt;/i&gt;""")

print re.sub('(\s{2,})', ' ', soup.text)
</snippet></ROW><ROW><id>18638158</id><snippet>Society/Project: Sai Sparsh Built-up Area: 1005 Sq.Ft. @ Rs.6109/sq.ft
</snippet></ROW><ROW><id>18638158</id><snippet>re.sub</snippet></ROW><ROW><id>18638158</id><snippet>import re
import urllib2
from bs4 import BeautifulSoup as Soup

html = urllib2.urlopen("http://www.99acres.com/property-in-velachery-chennai-south-ffid").read()
soup = Soup(html)

re_digit = re.compile('(\d+)')
for div in soup.find_all('div', {'class': 'sT_disc grey'}):
    try:
        project = div.find('span').find('b').text.strip()
    except:
        project = 'No project'
    area = re.findall(re_digit, div.find('i', {'class': 'blk'}).text.strip())

    print ", ".join([project] + area)
</snippet></ROW><ROW><id>18638236</id><snippet>request.vars.useraccount</snippet></ROW><ROW><id>18638236</id><snippet>None</snippet></ROW><ROW><id>18638236</id><snippet>def empty_to_none(value):
    return (None if value == '' else value, None)

SQLFORM.factory(Field('useraccount', 'unicode', requires=empty_to_none))
</snippet></ROW><ROW><id>18638236</id><snippet>None</snippet></ROW><ROW><id>18638236</id><snippet>SQLFORM.factory(Field('useraccount', 'unicode',
                      requires=lambda v: (None if v == '' else v, None)))
</snippet></ROW><ROW><id>18638236</id><snippet>default</snippet></ROW><ROW><id>18638236</id><snippet>SQLFORM.factory</snippet></ROW><ROW><id>18638236</id><snippet>default</snippet></ROW><ROW><id>18638236</id><snippet>Field</snippet></ROW><ROW><id>18638418</id><snippet>{% url 'admin:app_model_changelist' %}
</snippet></ROW><ROW><id>18638433</id><snippet>(?P&lt;name&gt;...)</snippet></ROW><ROW><id>18638433</id><snippet>name</snippet></ROW><ROW><id>18638433</id><snippet>&gt;&gt;&gt; import re
&gt;&gt;&gt; strs = "foo = bar"
&gt;&gt;&gt; m = re.search(r'(?P&lt;name&gt;^\w+\s*)\=(?P&lt;value&gt;\s*(.*?)$)', strs)
&gt;&gt;&gt; m.groupdict()
{'name': 'foo ', 'value': ' bar'}
</snippet></ROW><ROW><id>18638540</id><snippet>cursor.execute()</snippet></ROW><ROW><id>18638540</id><snippet>sql = "INSERT INTO employee(id, firstname, surname, sex, employmentdate) VALUES (%s, %s, %s, %s, '%s')"
cursor.execute(sql, ["012345","Mark", "Rooney", "M", dater])
db.commit()
</snippet></ROW><ROW><id>18638601</id><snippet>from random import sample

numbers = range(1,50) # 1-49

def generate_draw(balls=6,population=numbers):
    return sorted(sample(population,k=balls))
</snippet></ROW><ROW><id>18638601</id><snippet>generate_draw()</snippet></ROW><ROW><id>18638601</id><snippet>&gt;&gt;&gt; generate_draw()
[19, 31, 34, 39, 40, 44]
&gt;&gt;&gt; generate_draw()
[4, 7, 18, 22, 25, 44]
</snippet></ROW><ROW><id>18638601</id><snippet>def multiple_draws(count=5):
    results = []
    for i in range(count):
        results.append(generate_draw())
    return results
</snippet></ROW><ROW><id>18638781</id><snippet> sudo apt-get install libboost-python1.49-dev
</snippet></ROW><ROW><id>18638881</id><snippet>zip</snippet></ROW><ROW><id>18638881</id><snippet>dates</snippet></ROW><ROW><id>18638881</id><snippet>values</snippet></ROW><ROW><id>18638881</id><snippet>zip(*...)</snippet></ROW><ROW><id>18638881</id><snippet>dates, values = zip(*sorted(zip(dates,values)))
plot_date(dates,values, '-')
</snippet></ROW><ROW><id>18638907</id><snippet>request.vars</snippet></ROW><ROW><id>18638907</id><snippet>form.vars.useraccount</snippet></ROW><ROW><id>18638907</id><snippet>request.vars.useraccount</snippet></ROW><ROW><id>18638907</id><snippet>form.vars.useraccount</snippet></ROW><ROW><id>18638907</id><snippet>None</snippet></ROW><ROW><id>18638989</id><snippet>date</snippet></ROW><ROW><id>18638989</id><snippet>{{ model.field|date:'l' }}
</snippet></ROW><ROW><id>18639631</id><snippet>x</snippet></ROW><ROW><id>18639631</id><snippet>int * make_int(int val)
{
    int * p = malloc(sizeof(int));
    *p = val;
    return p;
}

int * x = make_int(5);      // Python: x = 5   # x is a new variable

x = make_int(7);            //         x = 7

x = make_int(11);           //         x = 11
</snippet></ROW><ROW><id>18640116</id><snippet>#</snippet></ROW><ROW><id>18640116</id><snippet>"""This part turned into a string to ease commenting out
if ...:
    # 500 lines

""" # end of block string.
</snippet></ROW><ROW><id>18640116</id><snippet>'''</snippet></ROW><ROW><id>18640116</id><snippet>"""</snippet></ROW><ROW><id>18640164</id><snippet>round</snippet></ROW><ROW><id>18640202</id><snippet>pyplot.cla()</snippet></ROW><ROW><id>18640202</id><snippet>all_Lists = [list(np.random.randn(30).cumsum()) for i in range(10)]

fig, ax = plt.subplots()

for n, curv in enumerate(all_Lists):
    ax.cla()
    ax.plot(curv)
    fig.savefig()
</snippet></ROW><ROW><id>18640222</id><snippet>bytes()</snippet></ROW><ROW><id>18640222</id><snippet>&gt;&gt;&gt; bytes([255])
b'\xff'
</snippet></ROW><ROW><id>18640222</id><snippet>SET_BG_COLOR = b'\xAA\x03\x03'
for r in range(0,255):
    red = bytes([r])
    blue = bytes([255 - r])
    ser.write(SET_BG_COLOR + blue + b'\x00' + red + b'\xC3') #BGR format
</snippet></ROW><ROW><id>18640222</id><snippet>SET_BG_COLOR = [0xAA, 0x03, 0x03]
for r in range(0,255):
    ser.write(bytes(SET_BG_COLOR + [r, 0x00, 255 - r, 0xC3])) #BGR format
</snippet></ROW><ROW><id>18640222</id><snippet>r = 10</snippet></ROW><ROW><id>18640222</id><snippet>&gt;&gt;&gt; SET_BG_COLOR = [0xAA, 0x03, 0x03]
&gt;&gt;&gt; r = 10
&gt;&gt;&gt; bytes(SET_BG_COLOR + [r, 0x00, 255 - r, 0xC3])
b'\xaa\x03\x03\n\x00\xf5\xc3'
</snippet></ROW><ROW><id>18640222</id><snippet>hex()</snippet></ROW><ROW><id>18640222</id><snippet>0x</snippet></ROW><ROW><id>18640222</id><snippet>b'\x30\x78\x30\x31'</snippet></ROW><ROW><id>18640222</id><snippet>10</snippet></ROW><ROW><id>18640222</id><snippet>b'\x10'</snippet></ROW><ROW><id>18640308</id><snippet>TypeError: super(type, obj): obj must be an instance or subtype of type</snippet></ROW><ROW><id>18640308</id><snippet>obj</snippet></ROW><ROW><id>18640308</id><snippet>classobj</snippet></ROW><ROW><id>18640308</id><snippet>object</snippet></ROW><ROW><id>18640308</id><snippet>type</snippet></ROW><ROW><id>18640308</id><snippet>type</snippet></ROW><ROW><id>18640308</id><snippet>super</snippet></ROW><ROW><id>18640308</id><snippet>D</snippet></ROW><ROW><id>18640308</id><snippet>B</snippet></ROW><ROW><id>18640308</id><snippet>super</snippet></ROW><ROW><id>18640308</id><snippet>D</snippet></ROW><ROW><id>18640308</id><snippet>B</snippet></ROW><ROW><id>18640308</id><snippet>if isinstance(self.__obj__, self.__type__):
    starttype = self.__obj__.__class__
else:
    starttype = self.__obj__   ## This line does not work
mro = iter(starttype.__mro__)
</snippet></ROW><ROW><id>18640308</id><snippet>__obj__</snippet></ROW><ROW><id>18640308</id><snippet>__type__</snippet></ROW><ROW><id>18640308</id><snippet>__obj__</snippet></ROW><ROW><id>18640308</id><snippet>__obj__</snippet></ROW><ROW><id>18640308</id><snippet>super</snippet></ROW><ROW><id>18640308</id><snippet>Super</snippet></ROW><ROW><id>18640363</id><snippet>class ModelName(models.Model):

    data = models.CharField()

    def save(self):
        """ Extension of parent save method """

        for name in ModelName._meta.get_all_field_names():
            field = getattr(name, ModelName, None)
            field = translate(field)

        super(ModelName, self).save()
</snippet></ROW><ROW><id>18640363</id><snippet>class ModelNameForm(forms.Form):

    data = forms.CharField()

    def clean_data(self):
        data = self.cleaned_data['data']
        return translate(data)
</snippet></ROW><ROW><id>18640601</id><snippet>conda</snippet></ROW><ROW><id>18640601</id><snippet>pip</snippet></ROW><ROW><id>18640601</id><snippet>pip</snippet></ROW><ROW><id>18640601</id><snippet>setuptools</snippet></ROW><ROW><id>18640601</id><snippet>setup.py</snippet></ROW><ROW><id>18640601</id><snippet>conda list</snippet></ROW><ROW><id>18640601</id><snippet>pip freeze</snippet></ROW><ROW><id>18640601</id><snippet>conda</snippet></ROW><ROW><id>18640601</id><snippet>conda list</snippet></ROW><ROW><id>18640601</id><snippet>conda</snippet></ROW><ROW><id>18640601</id><snippet>pip</snippet></ROW><ROW><id>18640601</id><snippet>pip freeze</snippet></ROW><ROW><id>18640601</id><snippet>conda list</snippet></ROW><ROW><id>18640601</id><snippet>pip</snippet></ROW><ROW><id>18640601</id><snippet>python</snippet></ROW><ROW><id>18640601</id><snippet>pip</snippet></ROW><ROW><id>18640601</id><snippet>distribute</snippet></ROW><ROW><id>18640601</id><snippet>pip</snippet></ROW><ROW><id>18640601</id><snippet>conda</snippet></ROW><ROW><id>18640601</id><snippet>conda</snippet></ROW><ROW><id>18640601</id><snippet>conda</snippet></ROW><ROW><id>18640601</id><snippet> conda skeleton pypi PACKAGE
 conda build PACKAGE
</snippet></ROW><ROW><id>18640601</id><snippet>conda</snippet></ROW><ROW><id>18640706</id><snippet>__init__</snippet></ROW><ROW><id>18640706</id><snippet>Deck</snippet></ROW><ROW><id>18640706</id><snippet>Player</snippet></ROW><ROW><id>18640706</id><snippet>game</snippet></ROW><ROW><id>18640706</id><snippet>def __init__(self, game, *args):
    self.game = game
</snippet></ROW><ROW><id>18640706</id><snippet>draw</snippet></ROW><ROW><id>18640706</id><snippet>game.lose()</snippet></ROW><ROW><id>18640706</id><snippet>self.game.lose()</snippet></ROW><ROW><id>18640706</id><snippet>__init__</snippet></ROW><ROW><id>18640748</id><snippet>formats = {"U": {"text": "upper case", "func": str.upper},
           "L": {"text": "lower case", "func": str.lower},
           "C": {"text": "Capitalization", "func": lambda x: x}
          }

data = '"The most profound technologies are those that disappear: they weave themselves into fabric of everyday life until are indistinguishable from it" [Mark Weiser, The Computer for the 21st Century, Scientific American, Sept. 1991]'

for c in formats:
    print('Press "{}" and "Enter" for {}.'.format(c, formats[c]['text']))

letter = input("Please type a letter and press enter: ")
if letter in formats:
    print(formats[letter]['func'](data))
</snippet></ROW><ROW><id>18641464</id><snippet>apply</snippet></ROW><ROW><id>18641464</id><snippet>apply</snippet></ROW><ROW><id>18641464</id><snippet>&gt;&gt;&gt; def test(row):
        return [1, 2, 3]
&gt;&gt;&gt; df= pd.DataFrame(np.random.randn(4, 3), columns=list('ABC'))
&gt;&gt;&gt; df.apply(test, axis=1)
   A  B  C
0  1  2  3
1  1  2  3
2  1  2  3
3  1  2  3
</snippet></ROW><ROW><id>18641464</id><snippet>&gt;&gt;&gt; def test(row):
       return [1, 2]
&gt;&gt;&gt; df= pd.DataFrame(np.random.randn(4, 3), columns=list('ABC'))
&gt;&gt;&gt; df.apply(test, axis=1)
0    [1, 2]
1    [1, 2]
2    [1, 2]
3    [1, 2]
&gt;&gt;&gt; df['D'] = df.apply(test, axis=1)
&gt;&gt;&gt; df
          A         B         C       D
0  0.333535  0.209745 -0.972413  [1, 2]
1  0.469590  0.107491 -1.248670  [1, 2]
2  0.234444  0.093290 -0.853348  [1, 2]
3  1.021356  0.092704 -0.406727  [1, 2]
</snippet></ROW><ROW><id>18641464</id><snippet>list</snippet></ROW><ROW><id>18641464</id><snippet>ndarray</snippet></ROW><ROW><id>18641464</id><snippet>tuple</snippet></ROW><ROW><id>18641464</id><snippet>&gt;&gt;&gt; def test(row):
        return (1, 2, 3)
&gt;&gt;&gt; df= pd.DataFrame(np.random.randn(4, 3), columns=list('ABC'))
&gt;&gt;&gt; df['D'] = df.apply(test, axis=1)
&gt;&gt;&gt; df
          A         B         C          D
0  0.121136  0.541198 -0.281972  (1, 2, 3)
1  0.569091  0.944344  0.861057  (1, 2, 3)
2 -1.742484 -0.077317  0.181656  (1, 2, 3)
3 -1.541244  0.174428  0.660123  (1, 2, 3)
</snippet></ROW><ROW><id>18641614</id><snippet>str.isdigit()</snippet></ROW><ROW><id>18641614</id><snippet>max(int(num) for num in text if num.isdigit())
</snippet></ROW><ROW><id>18641614</id><snippet>&gt;&gt;&gt; text = ['2', '3', '4', '5', '6', '7', '8', '9', '10', '...', '1458', 'Next']
&gt;&gt;&gt; max(int(num) for num in text if num.isdigit())
1458
</snippet></ROW><ROW><id>18641614</id><snippet>int()</snippet></ROW><ROW><id>18641614</id><snippet>str.strip()</snippet></ROW><ROW><id>18641614</id><snippet>max(int(num) for num in text if num.strip().isdigit())
</snippet></ROW><ROW><id>18641614</id><snippet>-</snippet></ROW><ROW><id>18641614</id><snippet>+</snippet></ROW><ROW><id>18641614</id><snippet>max(int(num) for num in text if num.strip().lstrip('-+').isdigit() and num.count('-') + num.count('+') &lt;= 1)
</snippet></ROW><ROW><id>18641614</id><snippet>int()</snippet></ROW><ROW><id>18641614</id><snippet>&gt;&gt;&gt; text = [' +2 ', '-3', '     4', '5    ', '6', '7', '8', '9', '10', '...', '  +1458  ', 'Next']
&gt;&gt;&gt; max(int(num) for num in text if num.strip().lstrip('-+').isdigit() and num.count('-') + num.count('+') &lt;= 1)
1458
</snippet></ROW><ROW><id>18641853</id><snippet>def rand_parts(seq, n, l):
    indices = xrange(len(seq) - (l - 1) * n)
    result = []
    offset = 0
    for i in sorted(random.sample(indices, n)):
        i += offset
        result.append(seq[i:i+l])
        offset += l - 1
    return result
</snippet></ROW><ROW><id>18641853</id><snippet>l == 1</snippet></ROW><ROW><id>18641853</id><snippet>random.sample()</snippet></ROW><ROW><id>18641853</id><snippet>offset</snippet></ROW><ROW><id>18641853</id><snippet>l &gt; 1</snippet></ROW><ROW><id>18641853</id><snippet>random.sample()</snippet></ROW><ROW><id>18641853</id><snippet>offset</snippet></ROW><ROW><id>18641853</id><snippet>l</snippet></ROW><ROW><id>18641970</id><snippet>WriteSpeech</snippet></ROW><ROW><id>18641970</id><snippet>stream</snippet></ROW><ROW><id>18641970</id><snippet>while silence:
    try:
        input = GetStream(chunk)
    except:
        continue
</snippet></ROW><ROW><id>18641970</id><snippet>listen()</snippet></ROW><ROW><id>18641970</id><snippet>jump</snippet></ROW><ROW><id>18641970</id><snippet>goto</snippet></ROW><ROW><id>18641970</id><snippet>listen()</snippet></ROW><ROW><id>18641970</id><snippet>listen()</snippet></ROW><ROW><id>18641970</id><snippet>SHORT_NORMALIZE</snippet></ROW><ROW><id>18641970</id><snippet>listen()</snippet></ROW><ROW><id>18641970</id><snippet>listen()
Time = Time + 1

if (Time &gt; TimeoutSignal):
    print "Waiting No Speech Detected"
    listen()
</snippet></ROW><ROW><id>18641970</id><snippet>listen()</snippet></ROW><ROW><id>18641970</id><snippet>return</snippet></ROW><ROW><id>18641970</id><snippet>listen</snippet></ROW><ROW><id>18641970</id><snippet>listen()</snippet></ROW><ROW><id>18641970</id><snippet>while True:</snippet></ROW><ROW><id>18641970</id><snippet>listen()</snippet></ROW><ROW><id>18641970</id><snippet>listen</snippet></ROW><ROW><id>18641970</id><snippet>continue</snippet></ROW><ROW><id>18641970</id><snippet>if exit:
    print 'Terminating normally'
    break
</snippet></ROW><ROW><id>18641970</id><snippet>KeepRecord</snippet></ROW><ROW><id>18641970</id><snippet>listen()</snippet></ROW><ROW><id>18641970</id><snippet>listen</snippet></ROW><ROW><id>18641970</id><snippet>KeepRecord</snippet></ROW><ROW><id>18641970</id><snippet>Time = Time + 1</snippet></ROW><ROW><id>18641977</id><snippet>options = [('python','hello.py'), ('python','hello2.py')]
for option in options:
    process = subprocess.Popen(option) 
    #do something here
</snippet></ROW><ROW><id>18642042</id><snippet>graph = facebook.GraphAPI(token.token)
connection_type = 'feed'
total_posts = 0
try:
    feed = graph.get_connections('me', connection_type, limit=1000)
    while 'paging' in feed and 'next' in feed['paging'] and feed['paging']['next']:
        total_posts += len(feed['data'])
        print 'celery_count_facebook_posts @ %s total_posts' % (total_posts,)
        nextUrl = feed['paging']['next']
        parsed = urlparse.urlparse(nextUrl)
        until = int(urlparse.parse_qs(parsed.query)['until'][0])
        feed = graph.get_connections('me', connection_type, limit=1000, until=until)
    total_posts += len(feed['data'])
    print 'celery_count_facebook_posts FINISHED @ %s total_posts' % (total_posts,)
</snippet></ROW><ROW><id>18642136</id><snippet>import sys; print sys.path</snippet></ROW><ROW><id>18642434</id><snippet>frame.SetTitle('yourtitle')
</snippet></ROW><ROW><id>18642464</id><snippet>reduce</snippet></ROW><ROW><id>18642464</id><snippet>import operator
from functools import reduce
def concatenate(*lists):
    return reduce(operator.add, lists)
</snippet></ROW><ROW><id>18642464</id><snippet>from itertools import chain
def concatenate(*lists):
    return chain(lists)
</snippet></ROW><ROW><id>18642464</id><snippet>itertool.chain(iterable_of_lists)</snippet></ROW><ROW><id>18642464</id><snippet>def concatenate(*lists):
    new_list = []
    for i in lists:
        new_list.extend(i)
    return new_list
</snippet></ROW><ROW><id>18642464</id><snippet>j=lambda*x:sum(x,[])</snippet></ROW><ROW><id>18642758</id><snippet>def appendList(self, new = someClass())</snippet></ROW><ROW><id>18642758</id><snippet>new</snippet></ROW><ROW><id>18642799</id><snippet>class Animal:
    def __init__(self, name):    # Constructor of the class
        self.name = name
    def talk(self):              # Abstract method, defined by convention only
        raise NotImplementedError("Subclass must implement abstract method")

class Cat(Animal):
    def talk(self):
        return 'Meow!'

class Dog(Animal):
    def talk(self):
        return 'Woof! Woof!'

animals = [Cat('Missy'),
           Dog('Lassie')]

for animal in animals:
    print(animal.name + ': ' + animal.talk())


# prints the following:
# Missy: Meow!
# Lassie: Woof! Woof!
</snippet></ROW><ROW><id>18642882</id><snippet>M + (D % 60) &gt; 60</snippet></ROW><ROW><id>18642882</id><snippet>M + (D % 60) &gt; 60</snippet></ROW><ROW><id>18642882</id><snippet>H</snippet></ROW><ROW><id>18642882</id><snippet>if</snippet></ROW><ROW><id>18642882</id><snippet>elif</snippet></ROW><ROW><id>18642882</id><snippet>else if</snippet></ROW><ROW><id>18642882</id><snippet>finalhr = (D // 60) + H + ((M + (D % 60)) // 60)
finalhr = finalhr % 24
</snippet></ROW><ROW><id>18642882</id><snippet>D &lt; 60</snippet></ROW><ROW><id>18642882</id><snippet>(D // 60)</snippet></ROW><ROW><id>18642882</id><snippet>(M + (D % 60)) &lt; 60</snippet></ROW><ROW><id>18642882</id><snippet>((M + (D % 60)) // 60)</snippet></ROW><ROW><id>18642882</id><snippet>finalhr</snippet></ROW><ROW><id>18642917</id><snippet>for row in sam:
    c[row[2]] += 1
</snippet></ROW></DATA>