<?xml version="1.0" encoding="UTF-8" standalone="no"?><DATA><ROW><id>8252564</id><snippet>from django import template
register = template.Library()

@register.simple_tag
def dictKeyLookup(the_dict, key):
   # Try to fetch from the dict, and if it's not found return an empty string.
   return the_dict.get(key, '')
</snippet></ROW><ROW><id>8252564</id><snippet>{% dictKeyLookup your_dict_passed_into_context "phone-number" %}
</snippet></ROW><ROW><id>8252564</id><snippet>from django import template
register = template.Library()

@register.simple_tag
def attributeLookup(the_object, attribute_name):
   # Try to fetch from the object, and if it's not found return None.
   return getattr(the_object, attribute_name, None)
</snippet></ROW><ROW><id>8252564</id><snippet>{% attributeLookup your_object_passed_into_context "phone-number" %}
</snippet></ROW><ROW><id>8252586</id><snippet>count</snippet></ROW><ROW><id>8252586</id><snippet>    y = int(y) / 10
</snippet></ROW><ROW><id>8252586</id><snippet>/</snippet></ROW><ROW><id>8252586</id><snippet>from __future__ import division</snippet></ROW><ROW><id>8252586</id><snippet>y</snippet></ROW><ROW><id>8252586</id><snippet>sys.float_info.dig</snippet></ROW><ROW><id>8252586</id><snippet>count</snippet></ROW><ROW><id>8252586</id><snippet>count</snippet></ROW><ROW><id>8252586</id><snippet>[count(int('8' * 17 + str(k) + '0')) for k in range(1, 10)]
# [130, 130, 130, 130, 130, 130, 130, 130, 130]
import random
[count(int('8' * 17 + ('%05d' % random.randint(1,99999)) + '0')) for k in range(1, 10)]
# [146, 146, 146, 146, 146, 146, 146, 146, 146]
</snippet></ROW><ROW><id>8252586</id><snippet>//</snippet></ROW><ROW><id>8252586</id><snippet>int</snippet></ROW><ROW><id>8252586</id><snippet>y</snippet></ROW><ROW><id>8252586</id><snippet>count</snippet></ROW><ROW><id>8252586</id><snippet>sum</snippet></ROW><ROW><id>8252586</id><snippet>sum</snippet></ROW><ROW><id>8252586</id><snippet>sum</snippet></ROW><ROW><id>8252586</id><snippet>y</snippet></ROW><ROW><id>8252586</id><snippet>factorial</snippet></ROW><ROW><id>8252586</id><snippet>def factorial(x, p=1):
    p *= x
    if x &gt; 1:
        return factorial(x-1, p)
    else:
        return p
</snippet></ROW><ROW><id>8252586</id><snippet>factorial</snippet></ROW><ROW><id>8253040</id><snippet>x + x_speed * ticks / 1000</snippet></ROW><ROW><id>8253040</id><snippet>def update_object(ticks):
    object.x += float(x_speed) * ticks / 1000  # converting to float is needed

# this is your main game loop
time = pygame.time.Clock()
ticks = 0
while running:
    ...
    update_object(ticks)
    ticks = time.tick(30)  # this 30 means time.tick() waits enough to make your max framerate 30
</snippet></ROW><ROW><id>8253040</id><snippet>object.x</snippet></ROW><ROW><id>8253040</id><snippet>def update_object():
   object.x += object_vx
   object.y += object.vy

# this is your main game loop
while running:
    ...
    update_object()
</snippet></ROW><ROW><id>8253040</id><snippet>character = pygame.Rect(10, 10, 20, 30)
character_image = pygame.image.load(...)
screen.blit(character_image, character)  # screen is you surface
</snippet></ROW><ROW><id>8253040</id><snippet>character.x += x_amount
character.y += y_amount
</snippet></ROW><ROW><id>8253228</id><snippet>0b1</snippet></ROW><ROW><id>8253228</id><snippet>1 &lt;&lt; 4</snippet></ROW><ROW><id>8253237</id><snippet>c.execute('INSERT INTO documents VALUES (?, ?)', (somekey, buffer(yourstring)))</snippet></ROW><ROW><id>8253548</id><snippet>inspect</snippet></ROW><ROW><id>8253548</id><snippet>&gt; import inspect
&gt; a = 5
&gt; f = inspect.currentframe()
&gt; print f.f_locals
...
...
'a': 5
...
</snippet></ROW><ROW><id>8253548</id><snippet>for</snippet></ROW><ROW><id>8253548</id><snippet>for v in f.f_locals.keys():
    if not v.startswith("_"):
        print v
</snippet></ROW><ROW><id>8253548</id><snippet>for v in f.f_locals</snippet></ROW><ROW><id>8253560</id><snippet>import logging
import logging.config
from pyramid.paster import bootstrap
logging.config.fileConfig('../test.ini')
env = bootstrap('../test.ini')

log = logging.getLogger(__name__)
log.debug('foo')
</snippet></ROW><ROW><id>8254035</id><snippet>main.py</snippet></ROW><ROW><id>8254035</id><snippet>main.py</snippet></ROW><ROW><id>8254035</id><snippet>otherfile.py</snippet></ROW><ROW><id>8254035</id><snippet>Main.config</snippet></ROW><ROW><id>8254035</id><snippet>asgard.py</snippet></ROW><ROW><id>8254035</id><snippet>__main__</snippet></ROW><ROW><id>8254035</id><snippet>asgard.py</snippet></ROW><ROW><id>8254035</id><snippet>__name__</snippet></ROW><ROW><id>8254035</id><snippet>__main__</snippet></ROW><ROW><id>8254035</id><snippet>sys.modules</snippet></ROW><ROW><id>8254035</id><snippet>sys.modules['__main__']</snippet></ROW><ROW><id>8254035</id><snippet>sys.modules['asgard']</snippet></ROW><ROW><id>8254035</id><snippet>library.childcontainer</snippet></ROW><ROW><id>8254035</id><snippet>asgard</snippet></ROW><ROW><id>8254035</id><snippet>sys.modules['asgard']</snippet></ROW><ROW><id>8254035</id><snippet>asgard.py</snippet></ROW><ROW><id>8254035</id><snippet>main.py</snippet></ROW><ROW><id>8254035</id><snippet>import asgard; asgard.Asgard.initialize()</snippet></ROW><ROW><id>8254035</id><snippet>__main__</snippet></ROW><ROW><id>8254035</id><snippet>main.py</snippet></ROW><ROW><id>8254035</id><snippet>asgard.py</snippet></ROW><ROW><id>8254035</id><snippet>asgard</snippet></ROW><ROW><id>8254035</id><snippet>if __name__ == '__main__': sys.modules['asgard'] = sys.modules['__main__']</snippet></ROW><ROW><id>8254035</id><snippet>if __name__ == '__main__': import ...</snippet></ROW><ROW><id>8254035</id><snippet>import asgard; asgard.Asgard.initialize()</snippet></ROW><ROW><id>8254306</id><snippet>&gt;&gt;&gt; r"\b"
'\\b'
&gt;&gt;&gt; "Hello"
'Hello' 
&gt;&gt;&gt; u"Hello"
u'Hello'
</snippet></ROW><ROW><id>8254306</id><snippet>test.txt</snippet></ROW><ROW><id>8254306</id><snippet>(?i:\bsys\.user_catalog\b)</snippet></ROW><ROW><id>8254306</id><snippet>f = open("test.txt").read()
print f
print repr(f)
</snippet></ROW><ROW><id>8254306</id><snippet>(?i:\bsys\.user_catalog\b)
'(?i:\\bsys\\.user_catalog\\b)'
</snippet></ROW><ROW><id>8254350</id><snippet>values = food_to_food_type.values()
dict( zip( values, map( values.count, values ) ) )
</snippet></ROW><ROW><id>8254350</id><snippet>values = food_to_food_type.values()
dict( zip( values, [NUM_FOOD_TYPES]*len(values) ) )
</snippet></ROW><ROW><id>8254472</id><snippet>session.expunge_all()
</snippet></ROW><ROW><id>8254472</id><snippet>session.close()
</snippet></ROW><ROW><id>8254472</id><snippet>expunge_all</snippet></ROW><ROW><id>8254472</id><snippet>for item in lst:
    session.expunge(item)
</snippet></ROW><ROW><id>8254586</id><snippet>Builder</snippet></ROW><ROW><id>8254586</id><snippet>single_source</snippet></ROW><ROW><id>8254586</id><snippet>Builder</snippet></ROW><ROW><id>8254586</id><snippet>env = Environment()
code_generator = Builder(action = '$CC $CCFLAGS -S $SOURCE -o $TARGET',
                         single_source = 1,
                         suffix = '.s')
env.Replace(CC= 'clang')
env.Append(BUILDERS = {'CodeGenerator' : code_generator})
sources = env.CodeGenerator(file)
env.Program('say_hello', sources)
</snippet></ROW><ROW><id>8254586</id><snippet>scons: Reading SConscript files ...
scons: done reading SConscript files.
scons: Building targets ...
clang -S bar.c -o bar.s
as -o bar.o bar.s
clang -S foo.c -o foo.s
as -o foo.o foo.s
clang -o say_hello bar.o foo.o
scons: done building targets.
</snippet></ROW><ROW><id>8254662</id><snippet>s = 'ifmmp'
new_s = ''
for c in s:
    n = ord(c)
    n = n - 1
    if n &lt; ord('a'):
        # 'a' -&gt; 'z'
        n = ord('z')
    new_s += chr(n)
# print('new_s = %r' % new_s)  -&gt; new_s = 'hello'
</snippet></ROW><ROW><id>8254768</id><snippet>fobj.close()</snippet></ROW><ROW><id>8254768</id><snippet>return</snippet></ROW><ROW><id>8254768</id><snippet>import re

fcontent = '''
def test_a(self):
    var["hello"]
    var["world"]

def test_b(self):
    var["hola"]
    var["mundo"]
'''

dict_ = {}
chunks = [chunk for chunk in fcontent.split('def ') if chunk.strip()]
for chunk in chunks:
    tname = re.findall(r'test\_\w+', chunk)[0]
    vars = re.findall(r'var\[\"\w+\"\]', chunk)
    dict_[tname] = vars
for k, v in dict_.items():
    print k
    for e in v:
        print "\t%s" % e
</snippet></ROW><ROW><id>8254768</id><snippet>re.findall</snippet></ROW><ROW><id>8254768</id><snippet>re.search</snippet></ROW><ROW><id>8254843</id><snippet>logging/__init__.py</snippet></ROW><ROW><id>8254843</id><snippet>#
# _srcfile is used when walking the stack to check when we've got the first
# caller stack frame.
#
if hasattr(sys, 'frozen'): #support for py2exe
    _srcfile = "logging%s__init__%s" % (os.sep, __file__[-4:])
elif __file__[-4:].lower() in ['.pyc', '.pyo']:
    _srcfile = __file__[:-4] + '.py'
else:
    _srcfile = __file__
_srcfile = os.path.normcase(_srcfile)

# next bit filched from 1.5.2's inspect.py
def currentframe():
    """Return the frame object for the caller's stack frame."""
    try:
        raise Exception
    except:
        return sys.exc_info()[2].tb_frame.f_back

if hasattr(sys, '_getframe'): currentframe = lambda: sys._getframe(3)
# done filching
</snippet></ROW><ROW><id>8254843</id><snippet>def findCaller(self):
    """
    Find the stack frame of the caller so that we can note the source
    file name, line number and function name.
    """
    f = currentframe()
    #On some versions of IronPython, currentframe() returns None if
    #IronPython isn't run with -X:Frames.
    if f is not None:
        f = f.f_back
    rv = "(unknown file)", 0, "(unknown function)"
    while hasattr(f, "f_code"):
        co = f.f_code
        filename = os.path.normcase(co.co_filename)
        if filename == _srcfile:
            f = f.f_back
            continue
        rv = (filename, f.f_lineno, co.co_name)
        break
    return rv
</snippet></ROW><ROW><id>8255259</id><snippet>db = MySQLdb.connect(user="yourUser",passwd="1337",db="awesomeDB")
cursor = db.cursor()
resultSet = "SELECT time FROM tableX"
cursor.execute(resultSet)
for row in cursor
#do something here, maybe add to an array if you want
arrayList.append(row)
</snippet></ROW><ROW><id>8255394</id><snippet>now = datetime.datetime.now()
print "%04d%02d%02d%02d%02d" % ( now.year, now.month, now.day, now.hour, now.minute )
</snippet></ROW><ROW><id>8255394</id><snippet>%</snippet></ROW><ROW><id>8255394</id><snippet>0</snippet></ROW><ROW><id>8255394</id><snippet>2</snippet></ROW><ROW><id>8255394</id><snippet>d</snippet></ROW><ROW><id>8255466</id><snippet>$("#id_username")</snippet></ROW><ROW><id>8255466</id><snippet>$("#id_userName")</snippet></ROW><ROW><id>8256188</id><snippet># serversocket: One server socket listening on some port, has to be non-blocking
# all_sockets : List containing all connected client sockets
while True:
    readset = [serversocket]
    readset += all_sockets

    # Wait for sockets to be ready, with a 0.1 second timeout
    read_ready = select.select(readset, None, None, 0.1)

    # If the listening socket can be read, it means it has a new connection
    if serversocket in read_ready:
        new_connection = serversocket.accept()
        new_connection.setblocking(0);  # Make socket non-blocking
        all_sockets += [new_connection]
        read_ready.remove(serversocket) # To not loop over it below

    for socket in read_ready:
        # Read data from socket
        data = socket.recv(2048)
        for s in all_sockets:
            # Do not send to self
            if s != socket:
                s.send(data)
</snippet></ROW><ROW><id>8256639</id><snippet>test1 = "test"
print("test" + test1)
</snippet></ROW><ROW><id>8256639</id><snippet>import sys
print sys.argv
</snippet></ROW><ROW><id>8256921</id><snippet>class EmailAddress(Base):
    __tablename__ = 'address'

    id = Column(Integer, primary_key=True)
    email = Column(String)

    @validates('email')
    def validate_email(self, key, address):
        assert '@' in address
        return address
</snippet></ROW><ROW><id>8257582</id><snippet>...values('parent__other_field')
</snippet></ROW><ROW><id>8257587</id><snippet>The GQL syntax can be summarized as follows:   
    SELECT [* | __key__]
        [FROM &lt;kind&gt;]]
        [WHERE &lt;condition&gt; [AND &lt;condition&gt; ...]]
        [ORDER BY &lt;property&gt; [ASC | DESC] [, &lt;property&gt; [ASC | DESC] ...]]
        [LIMIT [&lt;offset&gt;,]&lt;count&gt;]
        [OFFSET &lt;offset&gt;]
</snippet></ROW><ROW><id>8257587</id><snippet>SELECT *</snippet></ROW><ROW><id>8257587</id><snippet>SELECT __key__</snippet></ROW><ROW><id>8257587</id><snippet>SELECT __key__</snippet></ROW><ROW><id>8257587</id><snippet>SELECT *</snippet></ROW><ROW><id>8258198</id><snippet>os.path.getmtime</snippet></ROW><ROW><id>8258198</id><snippet>time.time</snippet></ROW><ROW><id>8258198</id><snippet>&gt;&gt;&gt; import os.path as path
&gt;&gt;&gt; path.getmtime('next_commit.txt')
1318340964.0525577
&gt;&gt;&gt; import time
&gt;&gt;&gt; time.time()
1322143114.693798
</snippet></ROW><ROW><id>8258465</id><snippet>timedelta</snippet></ROW><ROW><id>8258465</id><snippet>&gt;&gt;&gt; from datetime import date
&gt;&gt;&gt; a = date(2011,11,24)
&gt;&gt;&gt; b = date(2011,11,17)
&gt;&gt;&gt; a-b
datetime.timedelta(7)
&gt;&gt;&gt; (a-b).days
7
</snippet></ROW><ROW><id>8258465</id><snippet>&gt;&gt;&gt; from datetime import datetime
&gt;&gt;&gt; a = datetime(2011,11,24,0,0,0)
&gt;&gt;&gt; b = datetime(2011,11,17,23,59,59)
&gt;&gt;&gt; a-b
datetime.timedelta(6, 1)
&gt;&gt;&gt; (a-b).days
6
</snippet></ROW><ROW><id>8259043</id><snippet>windll</snippet></ROW><ROW><id>8259043</id><snippet>cdll</snippet></ROW><ROW><id>8259043</id><snippet>POINTER(c_char_p)</snippet></ROW><ROW><id>8259080</id><snippet>True</snippet></ROW><ROW><id>8259080</id><snippet>False</snippet></ROW><ROW><id>8259080</id><snippet>parser.add_argument('-w', action='store_true')
</snippet></ROW><ROW><id>8259086</id><snippet>__getattr__</snippet></ROW><ROW><id>8259086</id><snippet>__get__</snippet></ROW><ROW><id>8259086</id><snippet>__get__</snippet></ROW><ROW><id>8259145</id><snippet>import xlrd

book = xlrd.open_workbook('xlrd_test.xls')

for sheet in book.sheets():
    print sheet.row(0) # do stuff here - I'm printing the first line as example

# or if you need the sheet index for some purpose:
for shidx in xrange(0, book.nsheets):
    sheet = book.sheet_by_index(shidx)
    # would print 'Page N, first line: ....'
    print 'Page %d, first line: %s' % (shidx, sheet.row(0))
</snippet></ROW><ROW><id>8259765</id><snippet>array</snippet></ROW><ROW><id>8259765</id><snippet>[Text(i) for i in range(0, 5)]
</snippet></ROW><ROW><id>8259873</id><snippet>class A(object):    # inherit from object to be a new style class
    def start(self):
        pass

class B(A):
    def start(self):
        super(B,self).start()   # the first arg of super is the current class

b = B()
b.start()
</snippet></ROW><ROW><id>8260775</id><snippet>multiprocessing</snippet></ROW><ROW><id>8261032</id><snippet>xrange</snippet></ROW><ROW><id>8261032</id><snippet>range</snippet></ROW><ROW><id>8261032</id><snippet>min</snippet></ROW><ROW><id>8261032</id><snippet>max</snippet></ROW><ROW><id>8261032</id><snippet>xrange</snippet></ROW><ROW><id>8261083</id><snippet>import sys, tarfile

def get_members(tar, prefix):
    if not prefix.endswith('/'):
        prefix += '/'
    offset = len(prefix)
    for tarinfo in tar.getmembers():
        if tarinfo.name.startswith(prefix):
            tarinfo.name = tarinfo.name[offset:]
            yield tarinfo

args = sys.argv[1:]

if len(args) &gt; 1:
    tar = tarfile.open(args[0])
    path = args[2] if len(args) &gt; 2 else '.'
    tar.extractall(path, get_members(tar, args[1]))
</snippet></ROW><ROW><id>8261110</id><snippet>Fruit</snippet></ROW><ROW><id>8261110</id><snippet>Apple</snippet></ROW><ROW><id>8261110</id><snippet>Orange</snippet></ROW><ROW><id>8261110</id><snippet>Plugin</snippet></ROW><ROW><id>8261110</id><snippet>FormattingPlugin</snippet></ROW><ROW><id>8261110</id><snippet>PluginFormatting</snippet></ROW><ROW><id>8261110</id><snippet>Formatting</snippet></ROW><ROW><id>8261338</id><snippet>#coding: utf8
import xml.sax 
import io 
parser = xml.sax.make_parser() 
parser.parse(io.BytesIO(u'&lt;a&gt;é&lt;/a&gt;'.encode('utf8')))
</snippet></ROW><ROW><id>8261338</id><snippet>#coding: utf8</snippet></ROW><ROW><id>8261338</id><snippet>.encode('utf8')</snippet></ROW><ROW><id>8261338</id><snippet>BytesIO</snippet></ROW><ROW><id>8261338</id><snippet>#coding: utf8
parser.parse(io.BytesIO('&lt;a&gt;é&lt;/a&gt;'))
</snippet></ROW><ROW><id>8261338</id><snippet>BytesIO</snippet></ROW><ROW><id>8261387</id><snippet>elap</snippet></ROW><ROW><id>8261387</id><snippet>minutes</snippet></ROW><ROW><id>8261387</id><snippet>hours = int(elap/3600)
minutes = int((elap-hours*3600)/60)
seconds = int(elap-hours*3600-minutes*60)
hseconds = int((elap-hours*3600-minutes*60-seconds)*100)
</snippet></ROW><ROW><id>8261387</id><snippet>elap</snippet></ROW><ROW><id>8261387</id><snippet>hours = int(elap/3600)
elap -= hours*3600
minutes = int(elap/60)
elap -= minutes*60
seconds = int(elap)
elap -= seconds
hseconds = int(elap*100)
</snippet></ROW><ROW><id>8261387</id><snippet>days = int(elap/86400)
elap -= days*86400
</snippet></ROW><ROW><id>8261387</id><snippet>elap</snippet></ROW><ROW><id>8261387</id><snippet>float</snippet></ROW><ROW><id>8261387</id><snippet>elap = float(elap)</snippet></ROW><ROW><id>8261641</id><snippet>NotImplementedError</snippet></ROW><ROW><id>8261641</id><snippet>#pylint: disable=R0921
</snippet></ROW><ROW><id>8261754</id><snippet>move_to_element</snippet></ROW><ROW><id>8261754</id><snippet>from selenium import webdriver
from selenium.webdriver.common.action_chains import ActionChains

firefox = webdriver.Firefox()
firefox.get('http://foo.bar')
element_to_hover_over = firefox.find_element_by_id("baz")

hover = ActionChains(firefox).move_to_element(element_to_hover_over)
hover.perform()
</snippet></ROW><ROW><id>8261856</id><snippet>thread.start_new_thread</snippet></ROW><ROW><id>8261856</id><snippet>thread.start_new_thread(function, args[, kwargs])
</snippet></ROW><ROW><id>8261856</id><snippet>thread.start_new_thread(target=socketFunctionRead1,())
</snippet></ROW><ROW><id>8261856</id><snippet>target=socket...</snippet></ROW><ROW><id>8261856</id><snippet>()</snippet></ROW><ROW><id>8262001</id><snippet>margin = offset = 40
for line in textwrap.wrap(text, width=40):
    draw.text((margin, offset), line, font=font, fill="#aa0000")
    offset += font.getsize(line)[1]
</snippet></ROW><ROW><id>8262226</id><snippet>PyInt_FromSsize_t()</snippet></ROW><ROW><id>8262226</id><snippet>int</snippet></ROW><ROW><id>8262226</id><snippet>PyList_Size()</snippet></ROW><ROW><id>8262226</id><snippet>count = (int) PyList_Size(pValue)
</snippet></ROW><ROW><id>8262226</id><snippet>count</snippet></ROW><ROW><id>8262226</id><snippet>long</snippet></ROW><ROW><id>8262226</id><snippet>-1</snippet></ROW><ROW><id>8262434</id><snippet>for ix in [.02e9,.2e9,2e9,20e9,200e9,2000e9]:
    print('{:.3e} =&gt; {:0=8.3f}e9'.format(ix,ix/1e9))
</snippet></ROW><ROW><id>8262434</id><snippet>2.000e+07 =&gt; 0000.020e9
2.000e+08 =&gt; 0000.200e9
2.000e+09 =&gt; 0002.000e9
2.000e+10 =&gt; 0020.000e9
2.000e+11 =&gt; 0200.000e9
2.000e+12 =&gt; 2000.000e9
</snippet></ROW><ROW><id>8262434</id><snippet>{:0=8.3f}</snippet></ROW><ROW><id>8262444</id><snippet>requests</snippet></ROW><ROW><id>8262444</id><snippet>import requests
from requests.exceptions import HTTPError

try:
    r = requests.get('http://httpbin.org/status/200')
    r.raise_for_status()
except HTTPError:
    print 'Could not download page'
else:
    print r.url, 'downloaded successfully'

try:
    r = requests.get('http://httpbin.org/status/404')
    r.raise_for_status()
except HTTPError:
    print 'Could not download', r.url
else:
    print r.url, 'downloaded successfully'
</snippet></ROW><ROW><id>8263299</id><snippet>ifconfig -a</snippet></ROW><ROW><id>8263299</id><snippet>ipconfig /all</snippet></ROW><ROW><id>8263299</id><snippet>[ 15:01 jon@hozbox.com ~/SO/python ]$ ./sock.py
sockets set up
launch 1
launch 2
launch 3
launch 4
Writing connections
Writing connections
^CTraceback (most recent call last):
  File "./sock.py", line 93, in &lt;module&gt;
    time.sleep(1)
KeyboardInterrupt
</snippet></ROW><ROW><id>8263299</id><snippet>[ 15:01 jon@hozbox.com ~ ]$ telnet 10.10.1.11 50115
Trying 10.10.1.11...
Connected to 10.10.1.11.
Escape character is '^]'.
Hello, World!
Hello 2
^]
telnet&gt; quit
Connection closed.
[ 15:02 jon@hozbox.com ~ ]$ telnet 10.10.1.11 50125
Trying 10.10.1.11...
Connected to 10.10.1.11.
Escape character is '^]'.
Hello 50125!
Hi!
^]
telnet&gt; quit
Connection closed.
[ 15:02 jon@hozbox.com ~ ]$
</snippet></ROW><ROW><id>8263299</id><snippet>inet addr:10.10.1.11</snippet></ROW><ROW><id>8263299</id><snippet>[ 15:07 jon@hozbox.com ~/SO/python ]$ ifconfig eth0
eth0      Link encap:Ethernet  HWaddr **:**:**:**:**:**
          inet addr:10.10.1.11  Bcast:10.10.1.255  Mask:255.255.255.0
          ...
</snippet></ROW><ROW><id>8263514</id><snippet>list</snippet></ROW><ROW><id>8263514</id><snippet>list</snippet></ROW><ROW><id>8263514</id><snippet>list</snippet></ROW><ROW><id>8263514</id><snippet>csvreader</snippet></ROW><ROW><id>8263669</id><snippet>for</snippet></ROW><ROW><id>8263669</id><snippet>[re.sub(r'"', '', elem) for line in f_lines for elem in line]
</snippet></ROW><ROW><id>8263669</id><snippet>line</snippet></ROW><ROW><id>8263669</id><snippet>line</snippet></ROW><ROW><id>8263967</id><snippet>ctypes</snippet></ROW><ROW><id>8263967</id><snippet>ar</snippet></ROW><ROW><id>8263967</id><snippet>ctypes</snippet></ROW><ROW><id>8263967</id><snippet>ctypes</snippet></ROW><ROW><id>8264275</id><snippet>memoryview</snippet></ROW><ROW><id>8264275</id><snippet>dest = bytearray(10) # all zero bytes
v = memoryview(dest)
ioObject.readinto(v[3:])
print(repr(dest))
</snippet></ROW><ROW><id>8264275</id><snippet>iObject.readinto(...)</snippet></ROW><ROW><id>8264275</id><snippet>bytearray(b'\x00\x00\x00\x01\x02\x03\x04\x05\x00\x00')
</snippet></ROW><ROW><id>8264275</id><snippet>memoryview</snippet></ROW><ROW><id>8264275</id><snippet>struct.unpack_from</snippet></ROW><ROW><id>8264275</id><snippet>struct.pack_into</snippet></ROW><ROW><id>8264275</id><snippet>dest = bytearray(10) # all zero bytes
v = memoryview(dest)
struct.pack_into("2c", v[3:5], 0, b'\x07', b'\x08')
print(repr(dest))
</snippet></ROW><ROW><id>8264275</id><snippet>bytearray(b'\x00\x00\x00\x07\x08\x00\x00\x00\x00\x00')
</snippet></ROW><ROW><id>8264290</id><snippet>ctypes</snippet></ROW><ROW><id>8264290</id><snippet>BOOL</snippet></ROW><ROW><id>8264290</id><snippet>bool</snippet></ROW><ROW><id>8264290</id><snippet>from ctypes import *

ok = windll.user32.BlockInput(True)
</snippet></ROW><ROW><id>8264290</id><snippet>int</snippet></ROW><ROW><id>8264290</id><snippet>ctypes</snippet></ROW><ROW><id>8264337</id><snippet>easy_install networkx==1.6
</snippet></ROW><ROW><id>8265001</id><snippet>class TestFirefox:
    browser = '*firefox'

    def pytest_funcarg__selenium(self, request):
        sel = selenium('10.3.10.154', 5555, self.browser, 'http://10.3.10.180:8000')
        sel.start()
        return sel 

class TestChrome(TestFirefox):
    browser = '*opera'
</snippet></ROW><ROW><id>8265090</id><snippet>app_label</snippet></ROW><ROW><id>8265090</id><snippet>models.py</snippet></ROW><ROW><id>8265090</id><snippet>myapp.models</snippet></ROW><ROW><id>8265090</id><snippet>app_label = 'myapp'
</snippet></ROW><ROW><id>8265627</id><snippet>std::unordered_map</snippet></ROW><ROW><id>8265675</id><snippet>print [r.lower() for r in row]
</snippet></ROW><ROW><id>8265857</id><snippet>x(:)</snippet></ROW><ROW><id>8265857</id><snippet>temp(size(x))</snippet></ROW><ROW><id>8265857</id><snippet>allocatable</snippet></ROW><ROW><id>8265857</id><snippet>allocate(y(j))</snippet></ROW><ROW><id>8265857</id><snippet>program test
    implicit none
    integer:: x(10) = (/1,0,2,0,3,0,4,0,5,0/)
    print "(10I2.1)", select(x)

contains

    function select(x) result(y)
        implicit none
        integer, intent(in):: x(:) 
        integer:: i, j, temp(size(x))
        integer, allocatable:: y(:)

        j = 0
        do i = 1, size(x)
            if (x(i) /= 0) then
                j = j + 1
                temp(j) = x(i)
            endif
        enddo

        allocate(y(j))
        y = temp(:j)
    end function select

end program test
</snippet></ROW><ROW><id>8265857</id><snippet>y</snippet></ROW><ROW><id>8265857</id><snippet>    function select(x) result(y)
        implicit none
        integer, intent(in):: x(:) 
        integer:: i, j, dsize
        integer, allocatable:: temp(:), y(:)

        dsize = 0; allocate(y(0))

        j = 0
        do i = 1, size(x)
            if (x(i) /= 0) then
                j = j + 1

                if (j &gt;= dsize) then         !grow y using temp
                    dsize = j + j / 8 + 8 
                    allocate(temp(dsize))
                    temp(:size(y)) = y
                    call move_alloc(temp, y) !temp gets deallocated
                endif

                y(j) = x(i)
            endif
        enddo
        y = y(:j)
    end function select
</snippet></ROW><ROW><id>8266142</id><snippet>(?!...)</snippet></ROW><ROW><id>8266142</id><snippet>...</snippet></ROW><ROW><id>8266142</id><snippet>(?&lt;!...)</snippet></ROW><ROW><id>8266142</id><snippet>...</snippet></ROW><ROW><id>8266142</id><snippet>[</snippet></ROW><ROW><id>8266142</id><snippet>]</snippet></ROW><ROW><id>8266142</id><snippet>\</snippet></ROW><ROW><id>8266142</id><snippet>[</snippet></ROW><ROW><id>8266142</id><snippet>(?&lt;!\[)</snippet></ROW><ROW><id>8266142</id><snippet>\d{4}</snippet></ROW><ROW><id>8266142</id><snippet>]</snippet></ROW><ROW><id>8266142</id><snippet>(?!\])</snippet></ROW><ROW><id>8266142</id><snippet>&gt;&gt;&gt; import re
&gt;&gt;&gt; r = re.compile("(?&lt;!\[)\d{4}(?!\])")
&gt;&gt;&gt; r.match(" 2011 ")
&gt;&gt;&gt; r.search(" 2011 ")
&lt;_sre.SRE_Match object at 0x10884de00&gt;
&gt;&gt;&gt; r.search("[2011]")
</snippet></ROW><ROW><id>8266142</id><snippet>re.sub</snippet></ROW><ROW><id>8266142</id><snippet>sub</snippet></ROW><ROW><id>8266142</id><snippet>\1</snippet></ROW><ROW><id>8266142</id><snippet>\</snippet></ROW><ROW><id>8266142</id><snippet>&gt;&gt;&gt; r = re.compile("(?&lt;!\[)(\d{4})(?!\])")
&gt;&gt;&gt; name = "2011 - This Year"
&gt;&gt;&gt; r.sub(r"[\1]",name)
'[2011] - This Year'
</snippet></ROW><ROW><id>8266408</id><snippet>import csv
import time
import numpy as np

count = 0

with open('test.csv','r') as infile:
    reader=csv.reader(infile, delimiter='\t',lineterminator='\n',)
    reader.next()
    for row in reader:
        rec = np.fromiter(row[1:], dtype=np.float32)
        if (rec &gt; 0.5).sum() &gt;= (len(rec) - 1) * 0.5:
            count += 1
</snippet></ROW><ROW><id>8266842</id><snippet>args = sys.argv[:]  # Copy so don't destroy original
while len(args) &gt; 0:
    current_arg = args[0]

    if current_arg == '-f':
        foo = args[1]
        args = args[2:]
    elif current_arg == '-b':
        bar = args[1]
        args = args[2:]
    elif current_arg == '-z':
        baz = args[1]
        args = args[2:]
    else:
        print 'Unknown argument: %r' % args[0]
        args = args[1:]
</snippet></ROW><ROW><id>8267285</id><snippet>"bla".replace("a", "b")
</snippet></ROW><ROW><id>8267285</id><snippet>string.replace("bla", "a", "b")
</snippet></ROW><ROW><id>8267480</id><snippet>class Vehicle(Model):
    name = models.TextField()

class Car(Vehicle):
    passengers = PositiveIntegerField()

class Truck(Vehicle):
    tonnage = FloatField()

&gt;&gt;&gt; Car.objects.create(name='Beetle', passengers = 5)
&lt;Car: name="Beetle",passengers=5&gt;
&gt;&gt;&gt; Truck.objects.create(name='Mack', tonnage=4.5)
&lt;Truck: name="Mack,tonnage=4.5&gt;
&gt;&gt;&gt; Vehicle.objects.all()
[&lt;Vehicle: name="Beetle"&gt;,&lt;Vehicle: name="Mack&gt;]
&gt;&gt;&gt; v = Vehicle.objects.get(name='Beetle')
&gt;&gt;&gt; (bool(v.car), bool(v.truck))
(True, False)
&gt;&gt;&gt; v.car
&lt;Car: name="Beetle",passengers=5&gt;
&gt;&gt;&gt; v.truck
None
</snippet></ROW><ROW><id>8268638</id><snippet>import wx

class MainFrame(wx.Frame):
    def __init__(self):
        wx.Frame.__init__(self, None, size=(150,100), title='MainFrame')
        pan =wx.Panel(self)
        self.txt = wx.TextCtrl(pan, -1, pos=(0,0), size=(100,20), style=wx.DEFAULT)
        self.but = wx.Button(pan,-1, pos=(10,30), label='Tell child')
        self.Bind(wx.EVT_BUTTON, self.onbutton, self.but)
        self.child = ChildFrame(self)
        self.child.Show()

    def onbutton(self, evt):
        text = self.txt.GetValue()
        self.child.txt.write('Parent says: %s' %text)


class ChildFrame(wx.Frame):
    def __init__(self, parent):
        wx.Frame.__init__(self, None, size=(150,100), title='ChildFrame')
        self.parent = parent
        pan = wx.Panel(self)
        self.txt = wx.TextCtrl(pan, -1, pos=(0,0), size=(100,20), style=wx.DEFAULT)
        self.but = wx.Button(pan,-1, pos=(10,30), label='Tell parent')
        self.Bind(wx.EVT_BUTTON, self.onbutton, self.but)

    def onbutton(self, evt):
        text = self.txt.GetValue()
        self.parent.txt.write('Child says: %s' %text)


if __name__ == "__main__":

    App=wx.PySimpleApp()
    MainFrame().Show()
    App.MainLoop()
</snippet></ROW><ROW><id>8269141</id><snippet>Button</snippet></ROW><ROW><id>8269141</id><snippet>command=Hello()
</snippet></ROW><ROW><id>8269141</id><snippet>command=Hello
</snippet></ROW><ROW><id>8269141</id><snippet>function_name</snippet></ROW><ROW><id>8269141</id><snippet>function_name()</snippet></ROW><ROW><id>8269141</id><snippet>&gt;&gt;&gt; def func():
...     return 'hello'
... 
&gt;&gt;&gt; type(func)
&lt;type 'function'&gt;
&gt;&gt;&gt; type(func())
&lt;type 'str'&gt;
</snippet></ROW><ROW><id>8269505</id><snippet>^(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)(\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){0,3}$
</snippet></ROW><ROW><id>8270146</id><snippet>str.strip()</snippet></ROW><ROW><id>8270146</id><snippet>sentence = ' hello  apple'
sentence.strip()
&gt;&gt;&gt; 'hello  apple'
</snippet></ROW><ROW><id>8270146</id><snippet>str.replace()</snippet></ROW><ROW><id>8270146</id><snippet>sentence = ' hello  apple'
sentence.replace(" ", "")
&gt;&gt;&gt; 'helloapple'
</snippet></ROW><ROW><id>8270146</id><snippet>str.split()</snippet></ROW><ROW><id>8270146</id><snippet>sentence = ' hello  apple'
" ".join(sentence.split())
&gt;&gt;&gt; 'hello apple'
</snippet></ROW><ROW><id>8270389</id><snippet>x = 7</snippet></ROW><ROW><id>8270389</id><snippet>for c in string:</snippet></ROW><ROW><id>8270389</id><snippet>for i,c in enumerate(string):</snippet></ROW><ROW><id>8270389</id><snippet>result = []
for i,c in enumerate(string):
    result.append(chr(ord(c)^(x if i%2 else 0)))
print("".join(result))
</snippet></ROW><ROW><id>8270540</id><snippet>r'^list_cv/(?:(?P&lt;category&gt;[\w+])?/)$'
</snippet></ROW><ROW><id>8270598</id><snippet>if</snippet></ROW><ROW><id>8270598</id><snippet>try:
     s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
     s.connect((HOST, PORT))
     s.settimeout(60)               
     char = s.recv(1)
except socket.error, exception:
    if exception.errno == errno.ECONNREFUSED:
        # this is a connection refused
    # or in a more pythonic way to handle many errors:
    {
       errno.ECONNREFUSED : manage_connection_refused,
       errno.EHOSTDOWN : manage_host_down,
       #all the errors you want to catch
    }.get(exception.errno, default_behaviour)()
except socket.timeout:
    pass
</snippet></ROW><ROW><id>8270598</id><snippet>def manage_connection_refused():
   print "Connection refused"

def manage_host_down():
   print "Host down"

def default_behaviour():
   print "error"
</snippet></ROW><ROW><id>8271397</id><snippet>matplotlib</snippet></ROW><ROW><id>8271397</id><snippet>1.1.0</snippet></ROW><ROW><id>8271397</id><snippet>1.0</snippet></ROW><ROW><id>8271397</id><snippet>import matplotlib
print matplotlib.__version__
</snippet></ROW><ROW><id>8271438</id><snippet>axvspan</snippet></ROW><ROW><id>8271438</id><snippet>import matplotlib.pyplot as plt

plt.plot(range(10))
plt.axvspan(3, 6, color='red', alpha=0.5)
plt.show()
</snippet></ROW><ROW><id>8271438</id><snippet>matplotlib.dates.date2num</snippet></ROW><ROW><id>8271438</id><snippet>datetime</snippet></ROW><ROW><id>8271438</id><snippet>matplotlib.dates.datestr2num</snippet></ROW><ROW><id>8271438</id><snippet>import matplotlib.pyplot as plt
import matplotlib.dates as mdates
import datetime as dt

t = mdates.drange(dt.datetime(2011, 10, 15), dt.datetime(2011, 11, 27),
                  dt.timedelta(hours=2))
y = np.sin(t)

fig, ax = plt.subplots()
ax.plot_date(t, y, 'b-')
ax.axvspan(*mdates.datestr2num(['10/27/2011', '11/2/2011']), color='red', alpha=0.5)
fig.autofmt_xdate()
plt.show()
</snippet></ROW><ROW><id>8271703</id><snippet>filename.py</snippet></ROW><ROW><id>8271703</id><snippet>filename</snippet></ROW><ROW><id>8271703</id><snippet>#!/usr/bin/env python</snippet></ROW><ROW><id>8271703</id><snippet>chmod +x</snippet></ROW><ROW><id>8272160</id><snippet>from selenium import selenium
s = selenium("localhost", 4444, "*chrome", "http://tagger.steve.museum")
s.start()

s.open("/steve/object/141913")

text = s.get_html_source()
print text
</snippet></ROW><ROW><id>8272438</id><snippet>[/]
tools.staticfile.root = "C:\Documents and Settings\ginssj\Desktop\cherry"
</snippet></ROW><ROW><id>8272438</id><snippet>.file</snippet></ROW><ROW><id>8272438</id><snippet>[/style/iegl/Samples.css]
tools.staticfile.on = True
tools.staticfile.filename = "style\iegl\Samples.css"
</snippet></ROW><ROW><id>8272438</id><snippet>\style</snippet></ROW><ROW><id>8272442</id><snippet>def enviarCorreo(fromaddr, toaddr, text, file):
    msg = MIMEMultipart('mixed')
    msg['From'] = fromaddr
    msg['To'] = toaddr
    msg['Subject'] = 'asunto'

    #This is the part you had missed.
    msg.attach( MIMEText(text) )

    #adjunto
    adjunto = MIMEBase('application', "octet-stream")
    adjunto.set_payload( open(file,"rb").read() )
    Encoders.encode_base64(adjunto)
    adjunto.add_header('Content-Disposition', 'attachment; filename="%s"' % os.path.basename(file))
    msg.attach(adjunto)

    server = smtplib.SMTP('localhost')
    server.set_debuglevel(1)
    server.sendmail(fromaddr, toaddr, msg.as_string())
    server.close()

enviarCorreo("x@from.com", ["y@to.com"], "Hello World", ['/tmp/sample.png'])
</snippet></ROW><ROW><id>8272486</id><snippet>import subprocess
subprocess.call(['notepad', '/p', filename])
</snippet></ROW><ROW><id>8272640</id><snippet>matplotlib.ticker.FuncFormatter</snippet></ROW><ROW><id>8272640</id><snippet>import numpy as np
import matplotlib.pyplot as plt
import matplotlib.ticker as tkr

def func(x, pos):  # formatter function takes tick label and tick position
    s = str(x)
    ind = s.index('.')
    return s[:ind] + ',' + s[ind+1:]   # change dot to comma

y_format = tkr.FuncFormatter(func)  # make formatter

x = np.linspace(0,10,501)
y = np.sin(x)
ax = plt.subplot(111)
ax.plot(x,y)
ax.yaxis.set_major_formatter(y_format)  # set formatter to needed axis

plt.show()
</snippet></ROW><ROW><id>8272643</id><snippet>without_else()</snippet></ROW><ROW><id>8272643</id><snippet>with_else()</snippet></ROW><ROW><id>8272643</id><snippet>&gt;&gt;&gt; T(lambda : without_else()).repeat()
[0.42015745017874906, 0.3188967452567226, 0.31984281521812363]
&gt;&gt;&gt; T(lambda : with_else()).repeat()
[0.36009842032996175, 0.28962249392031936, 0.2927151355828528]
&gt;&gt;&gt; T(lambda : without_else(True)).repeat()
[0.31709728471076915, 0.3172671387005721, 0.3285821242644147]
&gt;&gt;&gt; T(lambda : with_else(True)).repeat()
[0.30939889008243426, 0.3035132258429485, 0.3046679117038593]
</snippet></ROW><ROW><id>8272643</id><snippet>without_else()</snippet></ROW><ROW><id>8272643</id><snippet>&gt;&gt;&gt; def no_else(param=False):
    if param:
        return 1
    return 0

&gt;&gt;&gt; T(lambda : no_else()).repeat()
[0.3359846013948413, 0.29025818923918223, 0.2921801513879245]
&gt;&gt;&gt; T(lambda : no_else(True)).repeat()
[0.3810395594970828, 0.2969634408842694, 0.2960104566362247]
</snippet></ROW><ROW><id>8272643</id><snippet>without_else</snippet></ROW><ROW><id>8272643</id><snippet>globals()</snippet></ROW><ROW><id>8272643</id><snippet>without_else</snippet></ROW><ROW><id>8272643</id><snippet>__builtins__</snippet></ROW><ROW><id>8272643</id><snippet>&gt;&gt;&gt; [(k, hash(k) % 32) for k in globals().keys() ]
[('__builtins__', 8), ('with_else', 9), ('__package__', 15), ('without_else', 8), ('T', 21), ('__name__', 25), ('no_else', 28), ('__doc__', 29)]
</snippet></ROW><ROW><id>8272643</id><snippet>__builtins__</snippet></ROW><ROW><id>8272643</id><snippet>without_else</snippet></ROW><ROW><id>8272643</id><snippet>j = hash % 32
perturb = hash
</snippet></ROW><ROW><id>8272643</id><snippet>j = (5*j) + 1 + perturb;
perturb &gt;&gt;= 5;
use j % 2**i as the next table index;
</snippet></ROW><ROW><id>8272643</id><snippet>__builtins__</snippet></ROW><ROW><id>8272643</id><snippet>without_else</snippet></ROW><ROW><id>8272873</id><snippet>&gt;&gt;&gt; sort_words(break_words(sentence))
['My', 'O-S-C-A-R', 'a', 'balogna', 'first', 'has', "it's", 'name,']
</snippet></ROW><ROW><id>8272873</id><snippet>&gt;&gt;&gt; sorted("foo bar wibble")
[' ', ' ', 'a', 'b', 'b', 'b', 'e', 'f', 'i', 'l', 'o', 'o', 'r', 'w']
&gt;&gt;&gt; sorted(["foo", "bar", "wibble"])
['bar', 'foo', 'wibble']
</snippet></ROW><ROW><id>8273017</id><snippet>N==36</snippet></ROW><ROW><id>8273017</id><snippet>2, 2, 3, 3</snippet></ROW><ROW><id>8273017</id><snippet>F*R==N</snippet></ROW><ROW><id>8273017</id><snippet>GCD(F,R)==1</snippet></ROW><ROW><id>8273017</id><snippet>N==23256</snippet></ROW><ROW><id>8273017</id><snippet>2,2,2,3,3,17,19</snippet></ROW><ROW><id>8273017</id><snippet>8,9,17,19</snippet></ROW><ROW><id>8273017</id><snippet>8*19</snippet></ROW><ROW><id>8273017</id><snippet>17*19</snippet></ROW><ROW><id>8273017</id><snippet>[choice for choice in powerset([8,9,17,19]) if prod(choice) &lt; math.sqrt(N)]</snippet></ROW><ROW><id>8273017</id><snippet>prime_factors = factorize(N)      # [2,2,2,3,3,17,19]
clusters = [p**e for p, e in collections.Counter(prime_factors).items()]  # [8,9,17,19]
R = max(prod(group) for group in powerset(clusters) if prod(group) &lt; math.sqrt(N))
F = N // R
</snippet></ROW><ROW><id>8273054</id><snippet>re.match()</snippet></ROW><ROW><id>8273054</id><snippet>re.search()</snippet></ROW><ROW><id>8273054</id><snippet>&gt;&gt;&gt; re.match('z\\|a', 'xyz|abc')
&gt;&gt;&gt; re.search('z\\|a', 'xyz|abc')
&lt;_sre.SRE_Match object at 0x02BF2BB8&gt;
&gt;&gt;&gt; re.search(r'z\|a', 'xyz|abc')
&lt;_sre.SRE_Match object at 0x02BF2BF0&gt;
</snippet></ROW><ROW><id>8273054</id><snippet>re.escape()</snippet></ROW><ROW><id>8273091</id><snippet>range()</snippet></ROW><ROW><id>8273091</id><snippet>function range(start, stop, step){
    if (typeof stop=='undefined'){
        // one param defined
        stop = start;
        start = 0;
    };
    if (typeof step=='undefined'){
        step = 1;
    };
    if ((step&gt;0 &amp;&amp; start&gt;=stop) || (step&lt;0 &amp;&amp; start&lt;=stop)){
        return [];
    };
    var result = [];
    for (var i=start; step&gt;0 ? i&lt;stop : i&gt;stop; i+=step){
        result.push(i);
    };
    return result;
};
</snippet></ROW><ROW><id>8273091</id><snippet>range()</snippet></ROW><ROW><id>8273091</id><snippet>range(4)</snippet></ROW><ROW><id>8273091</id><snippet>[0, 1, 2, 3]</snippet></ROW><ROW><id>8273091</id><snippet>range(3,6)</snippet></ROW><ROW><id>8273091</id><snippet>[3, 4, 5]</snippet></ROW><ROW><id>8273091</id><snippet>range(0,10,2)</snippet></ROW><ROW><id>8273091</id><snippet>[0, 2, 4, 6, 8]</snippet></ROW><ROW><id>8273091</id><snippet>range(10,0,-1)</snippet></ROW><ROW><id>8273091</id><snippet>[10, 9, 8, 7, 6, 5, 4, 3, 2, 1]</snippet></ROW><ROW><id>8273091</id><snippet>range(8,2,-2)</snippet></ROW><ROW><id>8273091</id><snippet>[8, 6, 4]</snippet></ROW><ROW><id>8273091</id><snippet>range(8,2)</snippet></ROW><ROW><id>8273091</id><snippet>[]</snippet></ROW><ROW><id>8273091</id><snippet>range(8,2,2)</snippet></ROW><ROW><id>8273091</id><snippet>[]</snippet></ROW><ROW><id>8273091</id><snippet>range(1,5,-1)</snippet></ROW><ROW><id>8273091</id><snippet>[]</snippet></ROW><ROW><id>8273091</id><snippet>range(1,5,-2)</snippet></ROW><ROW><id>8273091</id><snippet>[]</snippet></ROW><ROW><id>8273091</id><snippet>&gt;&gt;&gt; range(4)
[0, 1, 2, 3]
&gt;&gt;&gt; range(3,6)
[3, 4, 5]
&gt;&gt;&gt; range(0,10,2)
[0, 2, 4, 6, 8]
&gt;&gt;&gt; range(10,0,-1)
[10, 9, 8, 7, 6, 5, 4, 3, 2, 1]
&gt;&gt;&gt; range(8,2,-2)
[8, 6, 4]
&gt;&gt;&gt; range(8,2)
[]
&gt;&gt;&gt; range(8,2,2)
[]
&gt;&gt;&gt; range(1,5,-1)
[]
&gt;&gt;&gt; range(1,5,-2)
[]
</snippet></ROW><ROW><id>8273091</id><snippet>range()</snippet></ROW><ROW><id>8273106</id><snippet>destroy</snippet></ROW><ROW><id>8273106</id><snippet>self.Top.destroy()</snippet></ROW><ROW><id>8273106</id><snippet>self.Top</snippet></ROW><ROW><id>8273114</id><snippet>setattr(item, param, value)</snippet></ROW><ROW><id>8273114</id><snippet>db.Model</snippet></ROW><ROW><id>8273359</id><snippet>Queue</snippet></ROW><ROW><id>8273382</id><snippet>def memsetObject(bufferObject):
    "Note, dangerous"
    import ctypes
    data = ctypes.POINTER(ctypes.c_char)()
    size = ctypes.c_int()  # Note, int only valid for python 2.5
    ctypes.pythonapi.PyObject_AsCharBuffer(ctypes.py_object(bufferObject), ctypes.pointer(data), ctypes.pointer(size))
    ctypes.memset(data, 0, size.value)

testObject = "sneakyctypes"
memsetObject(testObject)
print repr(testObject)
# '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
</snippet></ROW><ROW><id>8273758</id><snippet>cell()</snippet></ROW><ROW><id>8273758</id><snippet>:</snippet></ROW><ROW><id>8273758</id><snippet>elif "febreeze"...</snippet></ROW><ROW><id>8273758</id><snippet>elif</snippet></ROW><ROW><id>8273758</id><snippet>return 'cell'</snippet></ROW><ROW><id>8274479</id><snippet>self.mybuttons = defaultdict(list)
for rows in range(1,21):
    for columns in range(1,21):
        self.mybuttons[rows].append(Button(self, text=''))
</snippet></ROW><ROW><id>8274479</id><snippet>abutton = self.mybuttons[arow][acolumn]
</snippet></ROW><ROW><id>8274479</id><snippet>reset</snippet></ROW><ROW><id>8274479</id><snippet>self.toggle</snippet></ROW><ROW><id>8274757</id><snippet>list = request.POST.getlist('list')
</snippet></ROW><ROW><id>8274757</id><snippet>list</snippet></ROW><ROW><id>8274863</id><snippet>try:
    opener.open(url)
except ValueError,e:
    # fix url and try again
    # ...
</snippet></ROW><ROW><id>8274904</id><snippet>import lxml.etree as ET

filename='/tmp/test.xml'
with open(filename,'w') as f:
    f.write(ET.tostring(myobject))
</snippet></ROW><ROW><id>8274904</id><snippet>with open(filename,'r') as f:
    myobject=ET.parse(f)
</snippet></ROW><ROW><id>8274904</id><snippet>myobject=ET.fromstring(content)
</snippet></ROW><ROW><id>8274904</id><snippet>import urllib2
myobject=ET.parse(urllib2.urlopen(url))
</snippet></ROW><ROW><id>8275097</id><snippet>item = self.list.GetItem(row, column)
print item.GetText()
</snippet></ROW><ROW><id>8275190</id><snippet>def redirector_app(environ, start_response):
   param = '' # Set the parameter you want to pass here
   start_response('301 Redirect', [('Location', 'http:/yourphpscript.com/?param=%s' % param),])
   # ...
</snippet></ROW><ROW><id>8275255</id><snippet>self.Bind()</snippet></ROW><ROW><id>8275255</id><snippet>wx.TextDropTarget</snippet></ROW><ROW><id>8275255</id><snippet>wx.FileDropTarget</snippet></ROW><ROW><id>8275255</id><snippet>OnDropText</snippet></ROW><ROW><id>8275255</id><snippet>OnDropFiles</snippet></ROW><ROW><id>8275271</id><snippet>android_mixer</snippet></ROW><ROW><id>8275271</id><snippet>import android_mixer as mixer
</snippet></ROW><ROW><id>8275271</id><snippet>mixer.music.load(sys.argv[1])
mixer.music.play()
</snippet></ROW><ROW><id>8275281</id><snippet>QPlaintTextEdit</snippet></ROW><ROW><id>8275281</id><snippet>QTextControl</snippet></ROW><ROW><id>8275281</id><snippet>QTextEdit</snippet></ROW><ROW><id>8275281</id><snippet>tr</snippet></ROW><ROW><id>8275281</id><snippet>&gt;&gt;&gt; from PyQt4 import QtCore
&gt;&gt;&gt; print QtCore.QLibraryInfo.location(QtCore.QLibraryInfo.TranslationsPath)
/usr/share/qt/translations
</snippet></ROW><ROW><id>8275281</id><snippet>lconvert</snippet></ROW><ROW><id>8275281</id><snippet>lconvert --drop-translations -o qt_xx.ts qt_fr.qm
</snippet></ROW><ROW><id>8275442</id><snippet>hash(obj)</snippet></ROW><ROW><id>8275442</id><snippet>&gt;&gt;&gt; a = ((1, 2), (3, 4))
&gt;&gt;&gt; b = ((1, 2), [3, 4])
&gt;&gt;&gt; hash(a)
5879964472677921951
&gt;&gt;&gt; hash(b)
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
TypeError: unhashable type: 'list'
</snippet></ROW><ROW><id>8275543</id><snippet>found = any(word in item for item in wordlist)
</snippet></ROW><ROW><id>8275809</id><snippet># revised carp.py
import sys
import inspect

def carp( msg ):
    # grab the current call stack, and remove the stuff we don't want
    stack = inspect.stack()
    stack = stack[1:]

    caller_func = stack[0][1]
    caller_line = stack[0][2]
    sys.stderr.write('%s at %s line %d\n' % (msg, caller_func, caller_line))

    for idx, frame in enumerate(stack[1:]):
        # The frame, one up from `frame`
        upframe = stack[idx]
        upframe_record = upframe[0]
        upframe_func   = upframe[3]
        upframe_module = inspect.getmodule(upframe_record).__name__

        # The stuff we need from the current frame
        frame_file = frame[1]
        frame_line = frame[2]

        sys.stderr.write( '\t%s.%s ' % (upframe_module, upframe_func) )
        sys.stderr.write( 'called at %s line %d\n' % (frame_file, frame_line) )

    # Exit, circumventing (most) exception handling
    sys.exit(1)
</snippet></ROW><ROW><id>8275809</id><snippet>  1 import carp
  2
  3 def f():
  4     carp.carp( 'carpmsg' )
  5
  6 def g():
  7     f()
  8
  9 g()
</snippet></ROW><ROW><id>8275809</id><snippet>msg at main.py line 4
        __main__.f called at main.py line 7
        __main__.g called at main.py line 9
</snippet></ROW><ROW><id>8275809</id><snippet># carp.py
import sys
import traceback

'''
carp.py - partial emulation of the concept of perls Carp::carp
'''

class CarpError(Exception):
    def __init__(self, value):
        self.value = value
    def __str__(self):
        return repr(self.value)

def carpmain( fun ):
    def impl():
        try:
            fun()
        except CarpError as ex:
            _, _, tb = sys.exc_info()
            items = traceback.extract_tb(tb)[:-1]
            filename, lineno, funcname, line = items[-1]
            print '%s at %s line %d' % (ex.value, filename, lineno)
            for item in items[1:]:
                filename, lineno, funcname, line = item
                print '\t%s called at %s line %d' % (funcname, filename, lineno)
    return impl

def carp( value ):
    raise CarpError( value )
</snippet></ROW><ROW><id>8275809</id><snippet>import carp

def g():
    carp.carp( 'pmsg' )

def f():
    g()

@carp.carpmain
def main():
    f()

main()
</snippet></ROW><ROW><id>8275809</id><snippet>msg at foo.py line 4
    main called at foo.py line 12
    f called at foo.py line 7
    g called at foo.py line 4
</snippet></ROW><ROW><id>8275809</id><snippet>  1 use strict;
  2 use warnings;
  3 use Carp;
  4
  5 sub f {
  6     Carp::carp("msg");
  7 }
  8
  9 sub g {
 10     f();
 11 }
 12
 13 g();
</snippet></ROW><ROW><id>8275809</id><snippet>msg at foo.pl line 6
    main::f() called at foo.pl line 10
    main::g() called at foo.pl line 13
</snippet></ROW><ROW><id>8275907</id><snippet>'(2,)object'</snippet></ROW><ROW><id>8275907</id><snippet>import interval
A = [(interval.interval([2,3]), interval.interval([0,1])),
     (interval.interval([1,2]), interval.interval([2,3]))]
a = np.array(A,dtype='(2,)object')
</snippet></ROW><ROW><id>8275907</id><snippet>m=np.matrix(A,dtype='(2,)object')
</snippet></ROW><ROW><id>8275907</id><snippet>A = [(interval.interval([2,3]), interval.interval([0,1])),
     (interval.interval([1,2]), interval.interval([2,3]))]
a = np.empty((2,2),dtype='object')
a[:]=A
</snippet></ROW><ROW><id>8275907</id><snippet>object</snippet></ROW><ROW><id>8275907</id><snippet>dtype='(2,)object'</snippet></ROW><ROW><id>8275907</id><snippet>bd = [interval.interval([0,1]),
      interval.interval([6,7])]

b = np.empty(2,dtype='object')
b[:]=bd
</snippet></ROW><ROW><id>8275950</id><snippet>d</snippet></ROW><ROW><id>8275950</id><snippet>D</snippet></ROW><ROW><id>8275950</id><snippet>rs</snippet></ROW><ROW><id>8275950</id><snippet>d</snippet></ROW><ROW><id>8275950</id><snippet>file.write(str(d) + '\n')</snippet></ROW><ROW><id>8275950</id><snippet>open your workbook
open your output file
for each sheet:
    get dim # a list
    for each data row:
        get d, D, and rs # three scalars
        for each bb value in the BB zone of the current row:
            if bb is non-zero:
                get the corresponding dim value (e.g. 27)
                write d, D, bb, dim_value, rs as 1 line to the output file
close your output file
</snippet></ROW><ROW><id>8276112</id><snippet>import urllib, json, pprint

params = urllib.urlencode(dict(q='obama', rpp=10, geocode='37.781157,-122.398720,1mi'))
u = urllib.urlopen('http://search.twitter.com/search.json?' + params)
j = json.load(u)
pprint.pprint(j)
</snippet></ROW><ROW><id>8276131</id><snippet>import itertools

def task(kw,text):
    i = itertools.cycle(kw)
    return tuple(next(i)+t if t.isalpha() else t for t in text)

print(task('lemon','hi there!'))
</snippet></ROW><ROW><id>8276131</id><snippet>('lh', 'ei', ' ', 'mt', 'oh', 'ne', 'lr', 'ee', '!')
</snippet></ROW><ROW><id>8276384</id><snippet>class RestTestCase(unittest.TestCase):
    resource = Resource('http://example.com')

    def sometest(self):
        r = self.resource
        ...
        self.assertEqual(expectedresult, actualresult)

class SomeOtherRestTestCase(RestTestCase):
    resource = Resource('http://someother.example.com')

class YetAnotherRestTestCase(RestTestCase):
    resource = Resource('http://yetanother.example.com')

if __name__ == '__main__':
    unittest.main()
</snippet></ROW><ROW><id>8276779</id><snippet>child.__bases__</snippet></ROW><ROW><id>8276779</id><snippet>&gt;&gt;&gt; child.__bases__
(&lt;class __main__.A at 0x10052f0b8&gt;,)
</snippet></ROW><ROW><id>8276830</id><snippet>python foo.py
</snippet></ROW><ROW><id>8276830</id><snippet>&gt;&gt;&gt; import foo 
</snippet></ROW><ROW><id>8276830</id><snippet>&gt;&gt;&gt;from foo import *
</snippet></ROW><ROW><id>8276830</id><snippet>import sys
sys.path.add("ur file path")
import foo
</snippet></ROW><ROW><id>8276832</id><snippet>%s</snippet></ROW><ROW><id>8277028</id><snippet>__lt__</snippet></ROW><ROW><id>8277028</id><snippet>__eq__</snippet></ROW><ROW><id>8277028</id><snippet>__cmp__</snippet></ROW><ROW><id>8277028</id><snippet>__lt__</snippet></ROW><ROW><id>8277028</id><snippet>self</snippet></ROW><ROW><id>8277028</id><snippet>other</snippet></ROW><ROW><id>8277028</id><snippet>self</snippet></ROW><ROW><id>8277028</id><snippet>other</snippet></ROW><ROW><id>8277028</id><snippet>class Point(object):
    ...
    def __lt__(self, other):
        return ((self.x &lt; other.x) and (self.y &lt; other.y))
</snippet></ROW><ROW><id>8277028</id><snippet>p1 = Point(1, 2)
p2 = Point(3, 4)

p1 &lt; p2
</snippet></ROW><ROW><id>8277028</id><snippet>p1.__lt__(p2)
</snippet></ROW><ROW><id>8277028</id><snippet>True</snippet></ROW><ROW><id>8277028</id><snippet>__eq__</snippet></ROW><ROW><id>8277028</id><snippet>True</snippet></ROW><ROW><id>8277028</id><snippet>False</snippet></ROW><ROW><id>8277028</id><snippet>functools.total_ordering</snippet></ROW><ROW><id>8277028</id><snippet>__lt__</snippet></ROW><ROW><id>8277028</id><snippet>__eq__</snippet></ROW><ROW><id>8277028</id><snippet>from functools import total_ordering

@total_ordering
class Point(object):
    def __lt__(self, other):
        ...

    def __eq__(self, other):
        ...
</snippet></ROW><ROW><id>8277122</id><snippet>len</snippet></ROW><ROW><id>8277123</id><snippet>Pool</snippet></ROW><ROW><id>8277123</id><snippet>cpu_count()</snippet></ROW><ROW><id>8277123</id><snippet>apply_async</snippet></ROW><ROW><id>8277123</id><snippet>import multiprocessing
import time

def merge(d2):
    time.sleep(1) # some time consuming stuffs
    for key in d2.keys():
        if key in d1:
            d1[key] += d2[key]
        else:
            d1[key] = d2[key]

def init(d):
    global d1
    d1 = d

if __name__ == '__main__':

    d1 = multiprocessing.Manager().dict()
    pool = multiprocessing.Pool(initializer=init, initargs=(d1, ))

    l = [{ x % 5 : x } for x in range(10)]

    for item in l:
        pool.apply_async(merge, (item,))

    pool.close()
    pool.join()

    print(l)
    print(d1)
</snippet></ROW><ROW><id>8277298</id><snippet>\ua000</snippet></ROW><ROW><id>8277298</id><snippet>a000</snippet></ROW><ROW><id>8277412</id><snippet>class Search:  # The class does not include the search methods, at first
    def __init__(self):
        self.conditions = {}

def make_set_condition(option):  # Factory function that generates a "condition setter" for "option"
    def set_cond(self, value):
        self.conditions[option] = value
        return self
    return set_cond

for option in ('price', 'name'):  # The class is extended with additional condition setters
    setattr(Search, option, make_set_condition(option))

Search().name("Nice name").price('$3').conditions  # Example
{'price': '$3', 'name': 'Nice name'}
</snippet></ROW><ROW><id>8277412</id><snippet>__init__()</snippet></ROW><ROW><id>8277412</id><snippet>family</snippet></ROW><ROW><id>8277412</id><snippet>Search</snippet></ROW><ROW><id>8277412</id><snippet>__init__()</snippet></ROW><ROW><id>8277412</id><snippet>family</snippet></ROW><ROW><id>8277412</id><snippet>import types

class Search:  # The class does not include the search methods, at first

    def __init__(self, family):
        self.conditions = {}
        for option in family:  # The class is extended with additional condition setters
            # The new 'option' attributes must be methods, not regular functions:
            setattr(self, option, types.MethodType(make_set_condition(option), self))

def make_set_condition(option):  # Factory function that generates a "condition setter" for "option"
    def set_cond(self, value):
        self.conditions[option] = value
        return self
    return set_cond

&gt;&gt;&gt; o0 = Search(('price', 'name'))  # Example
&gt;&gt;&gt; o0.name("Nice name").price('$3').conditions
{'price': '$3', 'name': 'Nice name'}
&gt;&gt;&gt; dir(o0)  # Each Search object has its own condition setters (here: name and price)
['__doc__', '__init__', '__module__', 'conditions', 'name', 'price']

&gt;&gt;&gt; o1 = Search(('director', 'style'))
&gt;&gt;&gt; o1.director("Louis L").conditions  # New method name
{'director': 'Louis L'}
&gt;&gt;&gt; dir(o1)  # Each Search object has its own condition setters (here: director and style)
['__doc__', '__init__', '__module__', 'conditions', 'director', 'style']
</snippet></ROW><ROW><id>8277412</id><snippet>make_set_condition()</snippet></ROW><ROW><id>8277412</id><snippet>       set_cond.__name__ = option  # Sets the function name
</snippet></ROW><ROW><id>8277412</id><snippet>return set_cond</snippet></ROW><ROW><id>8277412</id><snippet>Search.name</snippet></ROW><ROW><id>8277412</id><snippet>&gt;&gt;&gt; Search.price
&lt;function set_cond at 0x107f832f8&gt;
</snippet></ROW><ROW><id>8277412</id><snippet>__name__</snippet></ROW><ROW><id>8277412</id><snippet>&gt;&gt;&gt; Search.price
&lt;function price at 0x107f83490&gt;
</snippet></ROW><ROW><id>8277611</id><snippet>classa_dict={}

class Test():
    def __init__(self):
        global classa_dict
        print classa_dict[2]
</snippet></ROW><ROW><id>8277611</id><snippet>import testmodule

class MyClassA():
    def __init__(self, id):
        self.id = id

if __name__ == '__main__':
    lclassa_dict = testmodule.classa_dict
    lclassa_dict[1] = MyClassA(1)
    lclassa_dict[2] = MyClassA(2)

    testing = testmodule.Test()
</snippet></ROW><ROW><id>8277611</id><snippet>global varname</snippet></ROW><ROW><id>8277611</id><snippet>varname</snippet></ROW><ROW><id>8277611</id><snippet>varname</snippet></ROW><ROW><id>8277611</id><snippet>Test</snippet></ROW><ROW><id>8277611</id><snippet>classa_dict</snippet></ROW><ROW><id>8277611</id><snippet>classa_dict</snippet></ROW><ROW><id>8277611</id><snippet>global</snippet></ROW><ROW><id>8277611</id><snippet>testmodule.ty</snippet></ROW><ROW><id>8277611</id><snippet>global classa_dict</snippet></ROW><ROW><id>8277611</id><snippet>classa_dict</snippet></ROW><ROW><id>8277611</id><snippet>classa_dict</snippet></ROW><ROW><id>8277611</id><snippet>test.py</snippet></ROW><ROW><id>8277611</id><snippet>classa_dict = testmodule.classa_dict</snippet></ROW><ROW><id>8277611</id><snippet>lclassa_dict</snippet></ROW><ROW><id>8277611</id><snippet>classa_dict</snippet></ROW><ROW><id>8277611</id><snippet>testmodule.py</snippet></ROW><ROW><id>8277611</id><snippet>global</snippet></ROW><ROW><id>8277611</id><snippet>test.py</snippet></ROW><ROW><id>8277611</id><snippet>testmodule.classa_dict</snippet></ROW><ROW><id>8277611</id><snippet>lclassa_dict</snippet></ROW><ROW><id>8277611</id><snippet>Test</snippet></ROW><ROW><id>8277611</id><snippet>testmodule.py</snippet></ROW><ROW><id>8277611</id><snippet>testmodule.classa_dict</snippet></ROW><ROW><id>8277611</id><snippet>global</snippet></ROW><ROW><id>8277775</id><snippet>&gt;&gt;&gt; import re
&gt;&gt;&gt; s = 'Global across "Modules" ?'
&gt;&gt;&gt; '-'.join(item.lower() for item in re.findall(r'\w+', s))
'global-across-modules'
</snippet></ROW><ROW><id>8278007</id><snippet>Rule</snippet></ROW><ROW><id>8278007</id><snippet>follow</snippet></ROW><ROW><id>8278007</id><snippet>rules = [
    ..., #your existing parse_tune rule
    Rule(
        SgmlLinkExtractor(
             allow=('/index/new\?new_start=\d+',)
        ),
        follow=True,
    ),
]
</snippet></ROW><ROW><id>8278007</id><snippet>follow=True</snippet></ROW><ROW><id>8278007</id><snippet>callback=None</snippet></ROW><ROW><id>8278007</id><snippet>follow=True</snippet></ROW><ROW><id>8278098</id><snippet>_scan_tag</snippet></ROW><ROW><id>8278098</id><snippet>SimpleTagNode</snippet></ROW><ROW><id>8278098</id><snippet>from simple_tag.templatetags.simple_tag import SimpleTagNode
</snippet></ROW><ROW><id>8278098</id><snippet>isinstance</snippet></ROW><ROW><id>8278098</id><snippet>from paulo.simple_tag.templatetags.simple_tag import SimpleTagNode
</snippet></ROW><ROW><id>8278331</id><snippet># This Python file uses the following encoding: utf-8
</snippet></ROW><ROW><id>8278331</id><snippet># -*-</snippet></ROW><ROW><id>8278331</id><snippet>-*-</snippet></ROW><ROW><id>8278331</id><snippet>_*_</snippet></ROW><ROW><id>8278331</id><snippet># TODO: fix this nasty bug
</snippet></ROW><ROW><id>8278331</id><snippet>TODO:</snippet></ROW><ROW><id>8278331</id><snippet>@MarkZar</snippet></ROW><ROW><id>8278331</id><snippet>WTF!</snippet></ROW><ROW><id>8278333</id><snippet>win32com</snippet></ROW><ROW><id>8278333</id><snippet>SetMTU</snippet></ROW><ROW><id>8278333</id><snippet>&gt;&gt;&gt; import win32com.client
&gt;&gt;&gt; wmobj = obj.ConnectServer("localhost","root\cimv2")
&gt;&gt;&gt; nobj = wmobj.ExecQuery("Select * from Win32_NetworkAdapterConfiguration")
&gt;&gt;&gt; n = nobj[10]  #my wireless interface
&gt;&gt;&gt; n.ReleaseDHCPLease  #invoked
0
&gt;&gt;&gt; n.RenewDHCPLease
0
</snippet></ROW><ROW><id>8278333</id><snippet>TypeError</snippet></ROW><ROW><id>8278333</id><snippet>&gt;&gt;&gt; n._FlagAsMethod('ReleaseDHCPLease')
&gt;&gt;&gt; n._FlagAsMethod('RenewDHCPLease')
&gt;&gt;&gt; n.ReleaseDHCPLease()
0
&gt;&gt;&gt; n.RenewDHCPLease()
0
</snippet></ROW><ROW><id>8278333</id><snippet>SetMTU</snippet></ROW><ROW><id>8278333</id><snippet>&gt;&gt;&gt; NetAdapterConfig = wmobj.Get("Win32_NetworkAdapterConfiguration")
&gt;&gt;&gt; NetAdapterConfig._FlagAsMethod('SetMTU')
</snippet></ROW><ROW><id>8278333</id><snippet>winreg</snippet></ROW><ROW><id>8278333</id><snippet>import winreg

nid = n.SettingID
MTU = 1500

path = r'SYSTEM\CurrentControlSet\Services\TCPIP\Parameters\Interfaces\\'+ nid 
sam = winreg.KEY_ALL_ACCESS
adapter = winreg.OpenKey(winreg.HKEY_LOCAL_MACHINE, path, 0, sam)
winreg.SetValueEx(adapter, 'MTU', None, winreg.REG_DWORD, MTU)
</snippet></ROW><ROW><id>8278442</id><snippet>__dict__()</snippet></ROW><ROW><id>8278442</id><snippet>&gt;&gt;&gt; x = object()
&gt;&gt;&gt; x.__dict__
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
AttributeError: 'object' object has no attribute '__dict__'
&gt;&gt;&gt; class MyObject(object):
...     pass 
... 
&gt;&gt;&gt; x = MyObject()
&gt;&gt;&gt; x.__dict__
{}
</snippet></ROW><ROW><id>8278442</id><snippet>__dict__</snippet></ROW><ROW><id>8278442</id><snippet>__slots__</snippet></ROW><ROW><id>8278442</id><snippet>&gt;&gt;&gt; class MyObject(object):
...     __slots__ = []
... 
&gt;&gt;&gt; x = MyObject()
&gt;&gt;&gt; x.__dict__
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
AttributeError: 'MyObject' object has no attribute '__dict__'
</snippet></ROW><ROW><id>8278584</id><snippet>r''</snippet></ROW><ROW><id>8278584</id><snippet>r""</snippet></ROW><ROW><id>8278584</id><snippet>foo="""&lt;li&gt;&lt;a href="#Quick Start"&gt;Quick Start*&lt;/li&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#Parsing a Document"&gt;Parsing a Document*&lt;/li&gt;&lt;/li&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#Parsing HTML"&gt;Parsing HTML*&lt;/li&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#Parsing XML"&gt;Parsing XML*&lt;/li&gt;&lt;/li&gt;"""

foo = foo.replace('*', '&lt;/a&gt;')
</snippet></ROW><ROW><id>8279103</id><snippet>MyApp</snippet></ROW><ROW><id>8279103</id><snippet>wx.Frame</snippet></ROW><ROW><id>8279103</id><snippet>wx.Panel</snippet></ROW><ROW><id>8279103</id><snippet>wx.Frame</snippet></ROW><ROW><id>8279103</id><snippet>class ChildPanel(wx.Panel): 
    def __init__(self, parent): 
        wx.Panel.__init__(self, parent, wx.NewId())
    .........................................
</snippet></ROW><ROW><id>8279103</id><snippet>class Common(wx.Frame): 
    def __init__(self, parent): 
        wx.Frame.__init__(self, parent, wx.NewId(), "Common")
        self.Bind(wx.EVT_CLOSE, self.on_close)

        self.child = ChildPanel(self, .....)
        self.main = MainPanel(self, .....)

        ................... 
</snippet></ROW><ROW><id>8279769</id><snippet>try:
    from elementtree.ElementTree import parse as parse_xml
except ImportError:
    # Python 2.5 and higher
    from xml.etree.ElementTree import parse as parse_xml
</snippet></ROW><ROW><id>8280005</id><snippet>from random import randint
from math import log10
from time import clock
from itertools import chain

def splitmerge0 (ls, digit): ## python (pure!)

    seq = map (lambda n: ((n // 10 ** digit) % 10, n), ls)
    buf = {0:[], 1:[], 2:[], 3:[], 4:[], 5:[], 6:[], 7:[], 8:[], 9:[]}

    return reduce (lambda acc, key: acc.extend(buf[key]) or acc,
        reduce (lambda _, (d,n): buf[d].append (n) or buf, seq, buf), [])

def splitmerge1 (ls, digit): ## python (readable!)
    buf = [[] for i in range(10)]
    divisor = 10 ** digit
    for n in ls:
        buf[(n//divisor)%10].append(n)
    return chain(*buf)

def radixsort (ls, fn = splitmerge1):
    return list(reduce (fn, xrange (int (log10 (max(abs(val) for val in ls)) + 1)), ls))

###############################################################################
# quick sort
###############################################################################

def partition (ls, start, end, pivot_index):

    lower = start
    upper = end - 1

    pivot = ls[pivot_index]
    ls[pivot_index] = ls[end]

    while True:

        while lower &lt;= upper and ls[lower] &lt;  pivot: lower += 1
        while lower &lt;= upper and ls[upper] &gt;= pivot: upper -= 1
        if lower &gt; upper: break

        ls[lower], ls[upper] = ls[upper], ls[lower]

    ls[end] = ls[lower]
    ls[lower] = pivot

    return lower

def qsort_range (ls, start, end):

    if end - start + 1 &lt; 32:
        insertion_sort(ls, start, end)
    else:
        pivot_index = partition (ls, start, end, randint (start, end))
        qsort_range (ls, start, pivot_index - 1)
        qsort_range (ls, pivot_index + 1, end)

    return ls

def insertion_sort (ls, start, end):

    for idx in xrange (start, end + 1):
        el = ls[idx]
        for jdx in reversed (xrange(0, idx)):
            if ls[jdx] &lt;= el:
                ls[jdx + 1] = el
                break
            ls[jdx + 1] = ls[jdx]
        else:
            ls[0] = el

    return ls

def quicksort (ls):

    return qsort_range (ls, 0, len (ls) - 1)

if __name__=='__main__':
    for value in 1000, 10000, 100000, 1000000, 10000000:
        ls = [randint (1, value) for _ in range(value)]
        ls2 = list(ls)
        last = -1
        start = clock()
        ls = radixsort(ls)
        end = clock()
        for i in ls:
            assert last &lt;= i
            last = i
        print("rs %d: %0.2fs" % (value, end-start))
        tdiff = end-start
        start = clock()
        ls2 = quicksort(ls2)
        end = clock()
        last = -1
        for i in ls2:
            assert last &lt;= i
            last = i
        print("qs %d: %0.2fs %0.2f%%" % (value, end-start, ((end-start)/tdiff*100)))
</snippet></ROW><ROW><id>8280005</id><snippet>C:\temp&gt;c:\python27\python radixsort.py
rs 1000: 0.00s
qs 1000: 0.00s 212.98%
rs 10000: 0.02s
qs 10000: 0.05s 291.28%
rs 100000: 0.19s
qs 100000: 0.58s 311.98%
rs 1000000: 2.47s
qs 1000000: 7.07s 286.33%
rs 10000000: 31.74s
qs 10000000: 86.04s 271.08%
</snippet></ROW><ROW><id>8280005</id><snippet>itertools.chain</snippet></ROW><ROW><id>8280073</id><snippet>&gt;&gt;&gt; repr([1, 2, 3, 4, 5])
'[1, 2, 3, 4, 5]'
</snippet></ROW><ROW><id>8280244</id><snippet>from email.mime.text import MIMEText
from email.header import Header
...

LOGIN = ''
PASSWORD = ''
SUBJECT = u'Invitation'
FROMADDR = u''
TOADDRS = unicode(self.listWidget.currentItem().text())
CONTENT = unicode(self.textEdit.toPlainText())

encoding = 'utf-8'

msg = MIMEText(CONTENT, 'plain', encoding)
msg['Subject'] = Header(SUBJECT, encoding)
msg['From'] = Header(FROMADDR, encoding)
msg['To'] = Header(TOADDRS, encoding)

server = smtplib.SMTP('smtp.gmail.com', 587)
server.set_debuglevel(1)
server.ehlo()
server.starttls()
server.login(LOGIN, PASSWORD)
server.sendmail(FROMADDR, [TOADDRS], msg.as_string())
server.quit()
</snippet></ROW><ROW><id>8280495</id><snippet>self.show_word</snippet></ROW><ROW><id>8280495</id><snippet>Cell.check</snippet></ROW><ROW><id>8280495</id><snippet>def check(self, choice1, choice2):
    """ Checks if the chosen words are a pair """
    tries = 0
    if choice1 == choice2:
        pass
    else:
        self.show_word

    tries += 1
</snippet></ROW><ROW><id>8280495</id><snippet>!=</snippet></ROW><ROW><id>8280495</id><snippet>pass</snippet></ROW><ROW><id>8280495</id><snippet>if</snippet></ROW><ROW><id>8280495</id><snippet>tries</snippet></ROW><ROW><id>8280495</id><snippet>self.show_word()</snippet></ROW><ROW><id>8280495</id><snippet>self.show_word</snippet></ROW><ROW><id>8280495</id><snippet>check</snippet></ROW><ROW><id>8280495</id><snippet>show_word</snippet></ROW><ROW><id>8280495</id><snippet>check</snippet></ROW><ROW><id>8280495</id><snippet>choice1</snippet></ROW><ROW><id>8280495</id><snippet>choice2</snippet></ROW><ROW><id>8280495</id><snippet>else</snippet></ROW><ROW><id>8280495</id><snippet>Cell.check</snippet></ROW><ROW><id>8280495</id><snippet>def show_word(self):
    """ Shows the word behind the cell """
    if self.hidden == True:
        self.hidden = False
    else:
        self.hidden = True

    self.button["text"] = str(self)

    if mem.choice1 == None:
        mem.choice1 = [self.word, self.hidden]
    else:
        mem.choice2 = [self.word, self.hidden]
        self.check(mem.choice1, mem.choice2)

def check(self, choice1, choice2):
    """ Checks if the chosen words are a pair """
    tries = 0
    if choice1 == choice2:
        pass
    else:
        self.show_word

    tries += 1
</snippet></ROW><ROW><id>8280495</id><snippet>def show_word(self):
    """ Shows the word behind the cell """
    self.hidden = not self.hidden
    self.button["text"] = str(self)

    if mem.choice1 is None:
        mem.choice1 = [self.word, self.hidden]
    else:
        mem.choice2 = [self.word, self.hidden]
        self.check(mem.choice1, mem.choice2)

def check(self, choice1, choice2):
    """ Checks if the chosen words are a pair """
    if choice1 != choice2:
        self.show_word() # Infinite recursion!!
</snippet></ROW><ROW><id>8280495</id><snippet>Cell</snippet></ROW><ROW><id>8280495</id><snippet>def show_word(self):
    """ Shows the word behind the cell """
    self.hidden = not self.hidden
    self.button["text"] = str(self)

    if mem.choice1 is None:
        mem.choice1 = self
    else:
        mem.choice2 = self
        self.check(mem.choice1, mem.choice2)

def check(self, choice1, choice2):
    """ Checks if the chosen words are a pair """
    mem.choice1, mem.choice2 = None, None
    if choice1.word != choice2.word:
        for cell in (choice1, choice2):
            cell.hidden = True
            cell.button['text'] = str(cell)
</snippet></ROW><ROW><id>8280495</id><snippet>mem.choice2</snippet></ROW><ROW><id>8280495</id><snippet>def show_word(self):
    """ Shows the word behind the cell """
    self.hidden = not self.hidden
    self.button["text"] = str(self)

    if mem.choice1 is None:
        mem.choice1 = self
    elif mem.choice2 is None:
        mem.choice2 = self
    else:
        choice1, choice2 = mem.choice1, mem.choice2
        mem.choice1, mem.choice2 = self, None
        self.check(choice1, choice2)

def check(self, choice1, choice2):
    """ Checks if the chosen words are a pair """
    if choice1.word != choice2.word:
        for cell in (choice1, choice2):
            cell.hidden = True
            cell.button['text'] = str(cell)
</snippet></ROW><ROW><id>8280495</id><snippet>from tkinter import *
import random

class Cell:
    def __init__(self, word, hidden=True):
        self.word = word
        self.hidden = hidden

    def show_word(self):
        """ Shows the word behind the cell """
        self.hidden = not self.hidden
        self.button["text"] = str(self)

        if mem.choice1 is None:
            mem.choice1 = self
        elif mem.choice2 is None:
            mem.choice2 = self
        else:
            choice1, choice2 = mem.choice1, mem.choice2
            mem.choice1, mem.choice2 = self, None
            self.check(choice1, choice2)

    def check(self, choice1, choice2):
        """ Checks if the chosen words are a pair """
        if choice1.word != choice2.word:
            for cell in (choice1, choice2):
                cell.hidden = True
                cell.button['text'] = str(cell)

    def __str__(self):
        """ Displays or hides the word """
        if self.hidden == True:
            return "---"
        else:
            return self.word

class Memory(Frame):
    """ GUI application that creates a Memory game """
    def __init__(self, master):
        super(Memory, self).__init__(master)
        self.grid()
        self.create_widgets()
        self.tries = 0
        self.choice1 = None
        self.choice2 = None

    def readShuffle(self):
        """ Creates and organizes (shuffles) the pairs in a list """
        # reads a list of words from the file
        with open('memo.txt', 'r') as infile:
            words = [line.strip() for line in infile]

        # creates 18 pairs of words in a new list
        the_pairs = list()
        for i in range(18):
            the_pairs.extend([Cell(words[i]), Cell(words[i])])

        # shuffles the words in the new list
        random.shuffle(the_pairs)

        return the_pairs

    def create_widgets(self):
        """ Create widgets to display the Memory game """
        # instruction text
        Label(self,
              text = "- The Memory Game -",
              font = ("Helvetica", 12, "bold"),
              ).grid(row = 0, column = 0, columnspan = 7)

        # buttons to show the words
        column = 0
        row = 1
        the_pairs = self.readShuffle()
        for index in range(36):
            temp = Button(self,
                   text = the_pairs[index],
                   width = "7",
                   height = "2",
                   relief = GROOVE,
                   command = the_pairs[index].show_word
                   )
            temp.grid(row = row, column = column, padx = 1, pady = 1)
            column += 1
            the_pairs[index].button = temp
            if column == 6:
                column = 0
                row += 1

        # total tries
        self.label = Label(self)
        Label(self,
              text = "Total tries: 0",
              font = ("Helvetica", 11, "italic")
              ).grid(row = 7, columnspan = 7, pady = 5)

        # a quit button
        Button(self,
               text = "Quit",
               font = ("Helvetica", 10, "bold"),
               width = "25",
               height = "1",
               command = self.quit
               ).grid(row = 8, column = 0, columnspan = 7, pady = 5)


    def quit(self):
        """ Ends the memory game """
        global root
        root.destroy()

# main
root = Tk()
root.title("Memory")
root.geometry("365x355")
mem = Memory(root)
root.mainloop()
</snippet></ROW><ROW><id>8280495</id><snippet>Memory</snippet></ROW><ROW><id>8280495</id><snippet>readShuffle</snippet></ROW><ROW><id>8280508</id><snippet>from twisted import protocols
from twisted.protocols import basic
from twisted.internet import threads, protocol, reactor
from twisted.application import service, internet
import re
import time

def slowFunction(arg):
    print "starting process"
    time.sleep(20)
    print "processed "+arg

class MySimpleServer(basic.LineReceiver):

    PROCESS_COMMAND = "process (.*)" #re pattern
    clients = []

    def connectionMade(self):
        print "Client connected"
        MySimpleServer.clients.append(self)

    def connectionLost(self, reason):
        print "Client gone"
        MySimpleServer.clients.remove(self)

    def onProcessDone(self, result):
        self.message("Process done")

    def onError(self, result):
        self.message("Process fail with error")

    def processFunction(self, processArgument):
        slowFunction(processArgument)

    def lineReceived(self, line):
        processArgumentResult = re.search(MySimpleServer.PROCESS_COMMAND, line)
        if not processArgumentResult == None:
            processArgument = processArgumentResult.groups()[0] 
            deferred = threads.deferToThread(self.processFunction, processArgument)
            deferred.addCallback(self.onProcessDone)
            deferred.addErrback(self.onError)
            self.message("processing your request")
        else:
            print "Unknown message line: "+line

    def message(self, message):
        self.transport.write(message + '\n')

if __name__ == '__main__':
    factory = protocol.ServerFactory()
    factory.protocol = MySimpleServer
    factory.client = []

    reactor.listenTCP(8000, factory)
    reactor.run()
</snippet></ROW><ROW><id>8280661</id><snippet>/usr/local/sbin/uwsgi
--uid www-data
--socket 127.0.0.1:5050
--master
--logto /var/log/uwsgi_main.log
--logdate
--optimize 2
--processes 4
--harakiri 120
--virtualenv /home/USER/virtualenv/
--pythonpath /home/USER/virtualenv/
--chdir /home/USER/virtualenv/PROJECT
--env DJANGO_SETTINGS_MODULE=PROJECT.settings
--module "django.core.handlers.wsgi:WSGIHandler()"
</snippet></ROW><ROW><id>8280916</id><snippet>ftpcallback</snippet></ROW><ROW><id>8280916</id><snippet>None</snippet></ROW><ROW><id>8280916</id><snippet>return</snippet></ROW><ROW><id>8280916</id><snippet>storbinary</snippet></ROW><ROW><id>8280916</id><snippet>storbinary</snippet></ROW><ROW><id>8280916</id><snippet>(...)</snippet></ROW><ROW><id>8280916</id><snippet>intid = self.intid
def ftpcallback():
    ftpuploaded = transStatus[intid][3] + 8192  # transStatus[intid] equals 0 to start with
    if ftpuploaded &gt; transStatus[intid][2]:
        ftpuploaded = transStatus[intid][2]  # Is this needed? It's supposed to just keep the value below the file size
    transStatus[intid][3] = ftpuploaded
    print(transStatus[intid][3])  # Always outputs 8192
    print("Callback called")

#FTP and file open code

self.ftp.storbinary("STOR " + self.destname, self.f, 1, ftpcallback)
</snippet></ROW><ROW><id>8280916</id><snippet>ftpcallback</snippet></ROW><ROW><id>8280916</id><snippet>ftpcallback()</snippet></ROW><ROW><id>8280916</id><snippet>intid</snippet></ROW><ROW><id>8280916</id><snippet>intid = self.intid</snippet></ROW><ROW><id>8280916</id><snippet>ftpcallback</snippet></ROW><ROW><id>8280916</id><snippet>def ftpcallback(self):</snippet></ROW><ROW><id>8280916</id><snippet>self.ftpcallback</snippet></ROW><ROW><id>8280916</id><snippet>storbinary</snippet></ROW><ROW><id>8280916</id><snippet>self.intid</snippet></ROW><ROW><id>8280975</id><snippet>datetime</snippet></ROW><ROW><id>8280975</id><snippet>replace</snippet></ROW><ROW><id>8281083</id><snippet>&lt;form method="POST" action="a.cgi"&gt;
&lt;p&gt;
Please enter a text that you want to analyze.
&lt;/p&gt;
&lt;p&gt;
&lt;textarea name="paragraph" rows="15" cols="80" wrap="soft"&gt;
... some text here ...
### This is a sample. Replace this with your own text.

&lt;/textarea&gt;
&lt;/p&gt;
&lt;p&gt;
&lt;input type="submit" value="Submit Text" /&gt;
&lt;input type="reset" /&gt;
&lt;/p&gt;
&lt;/form&gt;
</snippet></ROW><ROW><id>8281083</id><snippet>http://text0.mib.man.ac.uk/software/geniatagger/
</snippet></ROW><ROW><id>8281083</id><snippet>http://text0.mib.man.ac.uk/software/geniatagger/a.cgi
</snippet></ROW><ROW><id>8281083</id><snippet>import urllib
import urllib2

text =  """
        Further, while specific constitutive binding to the peri-kappa B site is seen in monocytes, stimulation with phorbol esters induces additional, specific binding. Understanding the monocyte-specific function of the peri-kappa B factor may ultimately provide insight into the different role monocytes and T-cells play in HIV pathogenesis. 

### This is a sample. Replace this with your own text.
        """
data = {
        "paragraph" : text 
       }

encoded_data = urllib.urlencode(data)
content = urllib2.urlopen("http://text0.mib.man.ac.uk/software/geniatagger/a.cgi",
        encoded_data)
print content.readlines()
</snippet></ROW><ROW><id>8281176</id><snippet>&gt;&gt;&gt; from collections import Counter
&gt;&gt;&gt; protein = "AGTTTCAGGAC"
&gt;&gt;&gt; Counter(protein[i:i+6] for i in range(len(protein)-5))
Counter({'TTCAGG': 1, 'AGTTTC': 1, 'CAGGAC': 1, 'TCAGGA': 1, 'GTTTCA': 1, 'TTTCAG': 1})
</snippet></ROW><ROW><id>8281241</id><snippet>&gt;&gt;&gt; ss = ShuffleSplit(X.shape[0], n_iterations=100, test_fraction=0.1,
...     random_state=42)
</snippet></ROW><ROW><id>8281241</id><snippet>&gt;&gt;&gt; from sklearn.utils import shuffle
&gt;&gt;&gt; from sklearn.cross_validation import StratifiedKFold, cross_val_score
&gt;&gt;&gt; for i in range(10):
...    X, y = shuffle(X_orig, y_orig, random_state=i)
...    skf = StratifiedKFold(y, 10)
...    print cross_val_score(clf, X, y, cv=skf)
</snippet></ROW><ROW><id>8281312</id><snippet>gtk.MessageDialog</snippet></ROW><ROW><id>8281312</id><snippet>gtk.Dialog</snippet></ROW><ROW><id>8281312</id><snippet>gtk.Dialog</snippet></ROW><ROW><id>8281312</id><snippet>gtk.HBox</snippet></ROW><ROW><id>8281312</id><snippet>action_area</snippet></ROW><ROW><id>8281312</id><snippet>&gt; prompt.action_area.get_children()
[&lt;gtk.Button object at 0x18c0aa0 (GtkButton at 0x130e990)&gt;, &lt;gtk.Button object at 0x18c0af0 (GtkButton at 0x130e8d0)&gt;]
</snippet></ROW><ROW><id>8281326</id><snippet>def signedOn(self):
    self.msg("NickServ", "id &lt;password_removed&gt;") # Identify the bot
    time.sleep(0.1) # Wait a little...
    self.join(self.factory.channel) # Join channel #chantest
    print "Signed on as %s." % (self.nickname,)
</snippet></ROW><ROW><id>8281326</id><snippet>EchoClient().sendData('IRC'+' '.join(map(str, [name, msg])))
</snippet></ROW><ROW><id>8281326</id><snippet>IRC = BotFactory('#chantest')
reactor.connectTCP('irc.rizon.net', 6667, IRC) # Our IRC connection
f = EchoFactory()
reactor.connectTCP("localhost", 8000, f) # Connection to the Distributor server
</snippet></ROW><ROW><id>8281326</id><snippet>EchoClient</snippet></ROW><ROW><id>8281326</id><snippet>reactor.connectTCP</snippet></ROW><ROW><id>8281326</id><snippet>EchoClient</snippet></ROW><ROW><id>8281326</id><snippet>EchoClient().sendData(...)</snippet></ROW><ROW><id>8281326</id><snippet>EchoClient</snippet></ROW><ROW><id>8281326</id><snippet>def buildProtocol(self, addr):
    print 'Connected to the Distributor'
    return EchoClient()
</snippet></ROW><ROW><id>8281326</id><snippet>buildProtocol</snippet></ROW><ROW><id>8281326</id><snippet>def buildProtocol(self, addr):
    print 'Connected to the Distributor'
    self.connection = EchoClient()
    return self.connection
</snippet></ROW><ROW><id>8281326</id><snippet>EchoClient</snippet></ROW><ROW><id>8281326</id><snippet>    if channel == "#testchan" and name != "BotName":
        f.connection.sendData('IRC:'+' '.join(map(str, [name, msg])))
        # This should make the bot send chat data to the distributor server (NOT IRC server)
</snippet></ROW><ROW><id>8281326</id><snippet>f</snippet></ROW><ROW><id>8281326</id><snippet>EchoFactory</snippet></ROW><ROW><id>8281326</id><snippet>connectionLost</snippet></ROW><ROW><id>8281326</id><snippet>connection</snippet></ROW><ROW><id>8281326</id><snippet>AttributeError</snippet></ROW><ROW><id>8281326</id><snippet>f.connection.sendData</snippet></ROW><ROW><id>8281326</id><snippet>AttributeError</snippet></ROW><ROW><id>8281326</id><snippet>None</snippet></ROW><ROW><id>8281530</id><snippet>django.core.management.call_command</snippet></ROW><ROW><id>8281530</id><snippet>from django.core import management
management.call_command('runserver')
</snippet></ROW><ROW><id>8281758</id><snippet>__eq__</snippet></ROW><ROW><id>8281758</id><snippet>class SomeObject(object):
    def __eq__(self, other):
        return self.a == other.a and self.b == other.b
</snippet></ROW><ROW><id>8281758</id><snippet>left is right</snippet></ROW><ROW><id>8281760</id><snippet>{2: -4, 3: 4, 3: 7, 5: 2}</snippet></ROW><ROW><id>8281760</id><snippet>&gt;&gt;&gt; list1 = [2, 3, 3, 4, 4, 5]
&gt;&gt;&gt; list2 = [-4, 8, -4, 8, -1, 2]

&gt;&gt;&gt; d = {}
&gt;&gt;&gt; for k, v in zip(list1, list2):
        d[k] = d.get(k, 0) + v

&gt;&gt;&gt; d
{2: -4, 3: 4, 4: 7, 5: 2}
</snippet></ROW><ROW><id>8281915</id><snippet>x</snippet></ROW><ROW><id>8281915</id><snippet>str</snippet></ROW><ROW><id>8281915</id><snippet>str</snippet></ROW><ROW><id>8281915</id><snippet>unicode</snippet></ROW><ROW><id>8281915</id><snippet>x</snippet></ROW><ROW><id>8281915</id><snippet>str</snippet></ROW><ROW><id>8281915</id><snippet>UnicodeDecodeError: 'ascii' codec can't decode byte 0xc5 in position 7: etc etc</snippet></ROW><ROW><id>8281915</id><snippet>UnicodeEncodeError: 'ascii' codec can't encode character u'\u0144' in position 7: etc etc</snippet></ROW><ROW><id>8281915</id><snippet>unicode</snippet></ROW><ROW><id>8281915</id><snippet>x</snippet></ROW><ROW><id>8281915</id><snippet>unicode</snippet></ROW><ROW><id>8281915</id><snippet>replace</snippet></ROW><ROW><id>8281915</id><snippet>print type(x), repr(x) # for Python 2.x
Lstroke = "Ł"
print type(Lstroke), repr(Lstroke)
y = x.replace(Lstroke, 'L')
</snippet></ROW><ROW><id>8282210</id><snippet>&gt;&gt;&gt; numbers = [100, 10, 1, 0.1, 0.01, 0.001, 0.0001, 0.00001]
&gt;&gt;&gt; for number in numbers:
...     print "%%e=%e, %%f=%f, %%g=%g" % (number, number, number)
... 
%e=1.000000e+02, %f=100.000000, %g=100
%e=1.000000e+01, %f=10.000000, %g=10
%e=1.000000e+00, %f=1.000000, %g=1
%e=1.000000e-01, %f=0.100000, %g=0.1
%e=1.000000e-02, %f=0.010000, %g=0.01
%e=1.000000e-03, %f=0.001000, %g=0.001
%e=1.000000e-04, %f=0.000100, %g=0.0001
%e=1.000000e-05, %f=0.000010, %g=1e-05
&gt;&gt;&gt; for number in numbers:
...     print "%%0.2e=%0.2e, %%0.2f=%0.2f, %%0.2g=%0.2g" % (number, number, number)
... 
%0.2e=1.00e+02, %0.2f=100.00, %0.2g=1e+02
%0.2e=1.00e+01, %0.2f=10.00, %0.2g=10
%0.2e=1.00e+00, %0.2f=1.00, %0.2g=1
%0.2e=1.00e-01, %0.2f=0.10, %0.2g=0.1
%0.2e=1.00e-02, %0.2f=0.01, %0.2g=0.01
%0.2e=1.00e-03, %0.2f=0.00, %0.2g=0.001
%0.2e=1.00e-04, %0.2f=0.00, %0.2g=0.0001
%0.2e=1.00e-05, %0.2f=0.00, %0.2g=1e-05
</snippet></ROW><ROW><id>8282420</id><snippet>dev_appserver</snippet></ROW><ROW><id>8282563</id><snippet>lst = [("aaaa8"),("bb8"),("ccc8"),("dddddd8")]
print([s.strip('8') for s in lst]) # remove the 8 from the string borders
print([s.replace('8', '') for s in lst]) # remove all the 8s 
</snippet></ROW><ROW><id>8282692</id><snippet>pairs</snippet></ROW><ROW><id>8282692</id><snippet>set</snippet></ROW><ROW><id>8282692</id><snippet>pairs[::2]</snippet></ROW><ROW><id>8282692</id><snippet>set</snippet></ROW><ROW><id>8282692</id><snippet>def mating_pairs(males, females):
    return zip(males, females)
</snippet></ROW><ROW><id>8282692</id><snippet>from itertools import product
def mating_pairs(males, females):
    return product(males, females)
</snippet></ROW><ROW><id>8282692</id><snippet>zip</snippet></ROW><ROW><id>8282692</id><snippet>product</snippet></ROW><ROW><id>8282873</id><snippet>PATH</snippet></ROW><ROW><id>8282873</id><snippet>PYTHON_PATH</snippet></ROW><ROW><id>8282873</id><snippet>site-packages</snippet></ROW><ROW><id>8283000</id><snippet>f = open('data.txt', 'r')

data = f.read()
array1 = []
array2 = []
array3 = []
splat = data.split("\n\n")
for number, paragraph in enumerate(splat, 1):
    if number % 3 == 1:
        array1 += [paragraph]
    elif number % 3 == 2:
        array2 += [paragraph]
    elif number % 3 == 0:
        array3 += [paragraph]
</snippet></ROW><ROW><id>8283016</id><snippet>app.yaml</snippet></ROW><ROW><id>8283016</id><snippet>- url: /robots.txt
  static_files: robots/robots.txt
  upload: robots/robots.txt
</snippet></ROW><ROW><id>8283329</id><snippet>pstats</snippet></ROW><ROW><id>8283329</id><snippet>import pstats
p = pstats.Stats('thing.txt')
p.sort_stats('cumulative').print_stats(10)
</snippet></ROW><ROW><id>8283484</id><snippet>Queue.Queue()</snippet></ROW><ROW><id>8283484</id><snippet>def __init__(self, cmd_q=None, reply_q=None):
    super(SocketClientThread, self).__init__()
    self.cmd_q = cmd_q or Queue.Queue()
    self.reply_q = reply_q or Queue.Queue()
    self.alive = threading.Event()
    self.alive.set()
    self.socket = None

    self.handlers = {
        ClientCommand.CONNECT: self._handle_CONNECT,
        ClientCommand.CLOSE: self._handle_CLOSE,
        ClientCommand.SEND: self._handle_SEND,
        ClientCommand.RECEIVE: self._handle_RECEIVE,
    }
</snippet></ROW><ROW><id>8283484</id><snippet>localhost</snippet></ROW><ROW><id>8283591</id><snippet>zip()</snippet></ROW><ROW><id>8283591</id><snippet>for row in zip(array1, array2, array3):
    cursor.execute("insert into Recipe values (?,?,?)", row)
db.commit()
</snippet></ROW><ROW><id>8283640</id><snippet>__remove_workers_unemployed_for_3_rounds</snippet></ROW><ROW><id>8283640</id><snippet>def __remove_workers_unemployed_for_3_rounds(self):
    for employee in self.employees[:]:
        if employee.turns_unemployed &gt;= 3:
            self.employees.remove(employee)
</snippet></ROW><ROW><id>8284246</id><snippet>def foo(stringio):
    datalist = []
    while True:
        chunk = stringio.read(256)
        i = chunk.find('Z')
        if i == -1:
            datalist.append(chunk)
        else:
            datalist.append(chunk[:i+1])
            break
        if len(chunk) &lt; 256:
            break
    return ''.join(datalist)
</snippet></ROW><ROW><id>8284246</id><snippet>timeit</snippet></ROW><ROW><id>8284457</id><snippet>gtk.gdk.Pixbuf</snippet></ROW><ROW><id>8284457</id><snippet>gtk.Image</snippet></ROW><ROW><id>8284457</id><snippet>gtk.gdk.Drawable.draw_pixbuf()</snippet></ROW><ROW><id>8284457</id><snippet>add()</snippet></ROW><ROW><id>8284457</id><snippet>gtk.DrawingArea</snippet></ROW><ROW><id>8284457</id><snippet>pixbuf = gtk.gdk.pixbuf_new_from_file(image_filename) #one way to load a pixbuf
pixmap.draw_pixbuf(None, pixbuf, 0, 0, x, y, -1, -1, gtk.gdk.RGB_DITHER_NONE, 0, 0)
</snippet></ROW><ROW><id>8285059</id><snippet>getlist()</snippet></ROW><ROW><id>8285059</id><snippet>print "&lt;form method=\"post\"&gt;"

for s in ListStr:
    print "&lt;input type=hidden name=\"state_carry\" value=\"" + s + "\"&gt;&lt;br /&gt;"

print "&lt;input type=\"submit\" value=\"Submit\" /&gt;"
print "&lt;/form&gt;"
</snippet></ROW><ROW><id>8285059</id><snippet>MyList = form.getlist("state_carry")
</snippet></ROW><ROW><id>8285397</id><snippet>find_elements_by_class_name</snippet></ROW><ROW><id>8285577</id><snippet>&gt;&gt;&gt; from sklearn.metrics import classification_report
&gt;&gt;&gt; print classification_report(y_true, y_predicted)
</snippet></ROW><ROW><id>8285988</id><snippet>def extrema(value, deltas):
    max_value = min_value = value
    for delta in deltas:
        value += delta
        if value &lt; min_value:
            min_value = value
        elif value &gt; max_value:
            max_value = value
    return min_value, max_value
</snippet></ROW><ROW><id>8285988</id><snippet>def extrema(value, deltas):
    values = [value]
    for delta in deltas:
        value += delta
        values.append(value)
    average = sum(values)/len(values)
    threshold = (max(values) - min(values))/6
    min_threshold = average - threshold
    max_threshold = average + threshold
    min_value = max_value = None
    for value in values:
        if value &lt; min_threshold:
            if min_value is None or value &lt; min_value:
                min_value = value
        elif value &gt; max_threshold:
            if max_value is None or value &gt; max_value:
                max_value = value
        elif min_value is not None and max_value is not None:
            yield min_value, max_value
            max_value = min_value = None
</snippet></ROW><ROW><id>8285988</id><snippet>min_threshold &lt; value &lt; max_threshold</snippet></ROW><ROW><id>8285988</id><snippet>class Point(object):

    __slots__ = ('x', 'y')

    def __init__(self, x=0, y=0):
        self.x = x
        self.y = y

    def __repr__(self):
        return str((self.x, self.y))

    def __iadd__(self, other):
        self.x += other.x
        self.y += other.y
        return self

    def __isub__(self, other):
        self.x -= other.x
        self.y -= other.y
        return self

    def __idiv__(self, number):
        self.x /= number
        self.y /= number
        return self

    def abs(self):
        return abs(self.x) + abs(self.y)

    def copy(self):
        return Point(self.x, self.y)


def extrema(moves, jitter=0.1, threshold=1000, sample=16):
    point = Point()
    minpoint = Point()
    maxpoint = Point()
    average = Point()
    average /= 1.0
    turned = False
    for move in moves:
        point += move
        x = point.x
        if x &lt; minpoint.x:
            minpoint.x = x
        elif x &gt; maxpoint.x:
            maxpoint.x = x
        y = point.y
        if y &lt; minpoint.y:
            minpoint.y = y
        elif y &gt; maxpoint.y:
            maxpoint.y = y
        delta = move.copy()
        delta -= average
        delta /= sample
        average += delta
        if average.abs() &lt; jitter:
            if point.abs() &gt; threshold:
                turned = True
            elif turned:
                yield minpoint, maxpoint
                point = Point() # reset (calibrate)
                minpoint = Point()
                maxpoint = Point()
                turned = False


# read data from file
moves = [Point(*map(int, move.split(',')))
    for move in open('data.txt').read().split(';') if move]

# generate extrema
print list(extrema(moves))
</snippet></ROW><ROW><id>8286083</id><snippet>app.mysite.sub-folder
</snippet></ROW><ROW><id>8286083</id><snippet>app.mysite.sub</snippet></ROW><ROW><id>8286083</id><snippet>folder</snippet></ROW><ROW><id>8286083</id><snippet>secondlevel = mysite['sub-folder']['2nd-level']
</snippet></ROW><ROW><id>8286083</id><snippet>secondlevel = mysite.restrictedTraverse('/mysite/sub-folder/2nd-level')
</snippet></ROW><ROW><id>8286180</id><snippet>f = file('myfile.txt','w')
f.write(s)
f.close()
</snippet></ROW><ROW><id>8286180</id><snippet>def after_equals(s):
    return s.partition(' = ')[-1]
f = file('myfile.txt','w')
for k,s in zip(keyword, score):
  f.write('%s,%s\n' % (after_equals(k), after_equals(s)))
f.close()
</snippet></ROW><ROW><id>8286199</id><snippet>@echo off
echo Command Loop Test
echo.
:looper
set INPUT=
set /P INPUT=Type the correct command string:
if "%INPUT%" == "command string" (echo you are correct) else (goto looper)
</snippet></ROW><ROW><id>8286199</id><snippet>Output:
Command Loop Test

Type the correct command string:
Input: wrong
Output:
Type the correct command string:
Input: still wrong
Output:
Type the correct command string:
Input: command string
Output:
you are correct

Return Code: 0
</snippet></ROW><ROW><id>8286199</id><snippet>readline</snippet></ROW><ROW><id>8286199</id><snippet>set /P INPUT</snippet></ROW><ROW><id>8286199</id><snippet>lambda: stdout.read(1)</snippet></ROW><ROW><id>8286199</id><snippet>get</snippet></ROW><ROW><id>8286199</id><snippet>import subprocess
import threading
import time
import sys

if sys.version_info.major &gt;= 3:
    import queue
else:
    import Queue as queue
    input = raw_input

def read_stdout(stdout, q):
    it = iter(lambda: stdout.read(1), b'')
    for c in it:
        q.put(c)
        if stdout.closed:
            break

_encoding = getattr(sys.stdout, 'encoding', 'latin-1')
def get_stdout(q, encoding=_encoding):
    out = []
    while 1:
        try:
            out.append(q.get(timeout=0.2))
        except queue.Empty:
            break
    return b''.join(out).rstrip().decode(encoding)

def printout(q):
    outdata = get_stdout(q)
    if outdata:
        print('Output:\n%s' % outdata)

if __name__ == '__main__':

    ARGS = ["shellcomm.bat"]   ### Modify this

    #setup
    p = subprocess.Popen(ARGS, bufsize=0, stdin=subprocess.PIPE, 
                         stdout=subprocess.PIPE, stderr=subprocess.PIPE)
    q = queue.Queue()
    encoding = getattr(sys.stdin, 'encoding', 'utf-8')

    #for reading stdout
    t = threading.Thread(target=read_stdout, args=(p.stdout, q))
    t.daemon = True
    t.start()

    #command loop
    while 1:
        printout(q)
        if p.poll() is not None or p.stdin.closed:
            break
        cmd = input('Input: ') 
        cmd = (cmd + '\n').encode(encoding)
        p.stdin.write(cmd)

    #tear down
    for n in range(4):
        rc = p.poll()
        if rc is not None:
            break
        time.sleep(0.25)
    else:
        p.terminate()
        rc = p.poll()
        if rc is None:
            rc = 1

    printout(q)
    print('\nReturn Code: %d' % rc)
</snippet></ROW><ROW><id>8286403</id><snippet>classObject</snippet></ROW><ROW><id>8286403</id><snippet>&gt;&gt;&gt; class A(object): pass
&gt;&gt;&gt; class B(object): pass
&gt;&gt;&gt; hash(A)
2579460
&gt;&gt;&gt; hash(B)
2579600
</snippet></ROW><ROW><id>8286449</id><snippet>import urllib

urllib.urlretrieve("http://www.digimouth.com/news/media/2011/09/google-logo.jpg", "local-filename.jpg")
</snippet></ROW><ROW><id>8286639</id><snippet>def isAnagram(str1, str2):
    str1_list = list(str1)
    str1_list.sort()
    str2_list = list(str2)
    str2_list.sort()

    return (str1_list == str2_list)
</snippet></ROW><ROW><id>8286654</id><snippet>for match in matches:
    first_names.append(match[0])
    last_names.append(match[1])
</snippet></ROW><ROW><id>8286723</id><snippet>split()</snippet></ROW><ROW><id>8286723</id><snippet>split()</snippet></ROW><ROW><id>8286723</id><snippet>split()</snippet></ROW><ROW><id>8286723</id><snippet>sep</snippet></ROW><ROW><id>8287065</id><snippet>&gt;&gt;&gt; import netifaces as ni
&gt;&gt;&gt; ni.interfaces()
['lo', 'eth0', 'eth1', 'vboxnet0', 'dummy1']
&gt;&gt;&gt; ni.ifaddresses('eth0')
{17: [{'broadcast': 'ff:ff:ff:ff:ff:ff', 'addr': '00:02:55:7b:b2:f6'}], 2: [{'broadcast': '24.19.161.7', 'netmask': '255.255.255.248', 'addr': '24.19.161.6'}], 10: [{'netmask': 'ffff:ffff:ffff:ffff::', 'addr': 'fe80::202:55ff:fe7b:b2f6%eth0'}]}
&gt;&gt;&gt; 
&gt;&gt;&gt; ni.ifaddresses.__doc__
'Obtain information about the specified network interface.\n\nReturns a dict whose keys are equal to the address family constants,\ne.g. netifaces.AF_INET, and whose values are a list of addresses in\nthat family that are attached to the network interface.'
&gt;&gt;&gt; # for the IPv4 address of eth0
&gt;&gt;&gt; ni.ifaddresses('eth0')[2][0]['addr']
'24.19.161.6'
</snippet></ROW><ROW><id>8287065</id><snippet>/usr/include/linux/socket.h</snippet></ROW><ROW><id>8287065</id><snippet>#define AF_INET         2       /* Internet IP Protocol         */
#define AF_INET6        10      /* IP version 6                 */
#define AF_PACKET       17      /* Packet family                */
</snippet></ROW><ROW><id>8287182</id><snippet>1-11</snippet></ROW><ROW><id>8287182</id><snippet>5</snippet></ROW><ROW><id>8287182</id><snippet>import random
for x in range(20):
  print random.randint(1,11)*5,
print
</snippet></ROW><ROW><id>8287182</id><snippet>5 40 50 55 5 15 40 45 15 20 25 40 15 50 25 40 20 15 50 10
</snippet></ROW><ROW><id>8287245</id><snippet>[Foo]</snippet></ROW><ROW><id>8287245</id><snippet>Matrix</snippet></ROW><ROW><id>8287245</id><snippet>Vector</snippet></ROW><ROW><id>8287245</id><snippet>type Vector = [Double]
type Matrix = [Vector]
</snippet></ROW><ROW><id>8287245</id><snippet>!!</snippet></ROW><ROW><id>8287245</id><snippet>["foo", "bar", "baz"] !! 1 == "bar"
</snippet></ROW><ROW><id>8287245</id><snippet>:</snippet></ROW><ROW><id>8287245</id><snippet>"quux" : ["foo", "bar", "baz"] == ["quux", "foo", "bar", "baz"]
</snippet></ROW><ROW><id>8287245</id><snippet>++</snippet></ROW><ROW><id>8287245</id><snippet>[1,2] ++ [3,4] == [1,2,3,4]
</snippet></ROW><ROW><id>8287245</id><snippet>list ++ [x]</snippet></ROW><ROW><id>8287252</id><snippet>logging.info(self.current_user)</snippet></ROW><ROW><id>8287252</id><snippet>self</snippet></ROW><ROW><id>8287252</id><snippet>def get(self):
    path = ...
    logging.info(self.current_user)
</snippet></ROW><ROW><id>8287282</id><snippet>(r,c)</snippet></ROW><ROW><id>8287282</id><snippet>(r,c)</snippet></ROW><ROW><id>8287282</id><snippet>(r,c)</snippet></ROW><ROW><id>8287282</id><snippet>(c,)</snippet></ROW><ROW><id>8287282</id><snippet>(1,c)</snippet></ROW><ROW><id>8287282</id><snippet>(r,c)</snippet></ROW><ROW><id>8287282</id><snippet>r</snippet></ROW><ROW><id>8287282</id><snippet>x</snippet></ROW><ROW><id>8287282</id><snippet>(r,)</snippet></ROW><ROW><id>8287282</id><snippet>(r,c)</snippet></ROW><ROW><id>8287282</id><snippet>(r,1)</snippet></ROW><ROW><id>8287282</id><snippet>x[:,np.newaxis]</snippet></ROW><ROW><id>8287282</id><snippet>x</snippet></ROW><ROW><id>8287282</id><snippet>(1,c)</snippet></ROW><ROW><id>8287282</id><snippet>x[0]</snippet></ROW><ROW><id>8287282</id><snippet>(c,)</snippet></ROW><ROW><id>8287282</id><snippet>(r,c)</snippet></ROW><ROW><id>8287282</id><snippet>if isinstance(obj,type)</snippet></ROW><ROW><id>8287474</id><snippet>setuptools</snippet></ROW><ROW><id>8287705</id><snippet>maskedarr</snippet></ROW><ROW><id>8287705</id><snippet>&gt;&gt;&gt; maskedarr.mask
False
</snippet></ROW><ROW><id>8287705</id><snippet>mask</snippet></ROW><ROW><id>8287705</id><snippet>&gt;&gt;&gt; maskedarr = np.ma.array(test, mask=np.isnan(test))
</snippet></ROW><ROW><id>8287705</id><snippet>maskedarr.mask</snippet></ROW><ROW><id>8287705</id><snippet>&gt;&gt;&gt; maskedarr.mask
array([[ True,  True, False, False],
       [ True,  True, False, False],
       [False, False, False, False],
       [ True,  True, False, False],
       [ True,  True, False, False],
       [False, False, False, False],
       [False, False, False, False],
       [ True,  True, False, False],
       [ True,  True, False, False],
       [ True,  True, False, False],
       [ True,  True, False, False],
       [ True,  True, False, False],
       [False, False, False, False],
       [ True,  True, False, False],
       [False, False, False, False]], dtype=bool)
</snippet></ROW><ROW><id>8287705</id><snippet>numpy.ma.cov</snippet></ROW><ROW><id>8287705</id><snippet>&gt;&gt;&gt; np.ma.cov(maskedarr,rowvar=False,allow_masked=True)
masked_array(data =
 [[0.0769732996251 0.0 0.0 0.0428294015418]
 [0.0 0.0 0.0 0.0]
 [0.0 0.0 0.0 0.0]
 [0.0428294015418 0.0 0.0 0.553648402899]],
             mask =
 [[False False False False]
 [False False False False]
 [False False False False]
 [False False False False]],
       fill_value = 1e+20)
</snippet></ROW><ROW><id>8287752</id><snippet>proxies</snippet></ROW><ROW><id>8287752</id><snippet>{"protocol":"ip:port", ...}</snippet></ROW><ROW><id>8287752</id><snippet>http_proxy  = "10.10.1.10:3128"
https_proxy = "10.10.1.11:1080"
ftp_proxy   = "10.10.1.10:3128"

proxyDict = { 
              "http"  : http_proxy, 
              "https" : https_proxy, 
              "ftp"   : ftp_proxy
            }

r = requests.get(url, headers=headers, proxies=proxyDict)
</snippet></ROW><ROW><id>8287752</id><snippet>requests</snippet></ROW><ROW><id>8287752</id><snippet>method</snippet></ROW><ROW><id>8287752</id><snippet>url</snippet></ROW><ROW><id>8287752</id><snippet>proxies</snippet></ROW><ROW><id>8287752</id><snippet>HTTP_PROXY</snippet></ROW><ROW><id>8287752</id><snippet>HTTPS_PROXY</snippet></ROW><ROW><id>8287752</id><snippet>FTP_PROXY</snippet></ROW><ROW><id>8287752</id><snippet>export HTTP_PROXY=10.10.1.10:3128
export HTTPS_PROXY=10.10.1.11:1080
export FTP_PROXY=10.10.1.10:3128
</snippet></ROW><ROW><id>8287752</id><snippet>set http_proxy=10.10.1.10:3128
set https_proxy=10.10.1.11:1080
set ftp_proxy=10.10.1.10:3128
</snippet></ROW><ROW><id>8288111</id><snippet>join</snippet></ROW><ROW><id>8288111</id><snippet>join</snippet></ROW><ROW><id>8288111</id><snippet>cmd = 'my_command' + ''.join(counters[:1])
</snippet></ROW><ROW><id>8288111</id><snippet>os.popen</snippet></ROW><ROW><id>8288111</id><snippet>os.system</snippet></ROW><ROW><id>8288111</id><snippet>subprocess</snippet></ROW><ROW><id>8288111</id><snippet>import subprocess
# You may want to set some options in the following line ...
p = subprocess.Popen(['my_command'] + counters[:1])
p.communicate()
</snippet></ROW><ROW><id>8288298</id><snippet>django.utils.formats</snippet></ROW><ROW><id>8288298</id><snippet>USE_L10N</snippet></ROW><ROW><id>8288298</id><snippet>True</snippet></ROW><ROW><id>8288298</id><snippet>from datetime import datetime
date_joined = datetime.now()
from django.utils import formats
formatted_datetime = formats.date_format(date_joined, "SHORT_DATETIME_FORMAT")
</snippet></ROW><ROW><id>8288318</id><snippet>import urllib
proxies = {"http": "http://localhost:8888"}
params = urllib.urlencode({'search':"August Rush"})
f = urllib.urlopen("http://www.thepiratebay.org/search/query", params, proxies)
print len(f.read())
</snippet></ROW><ROW><id>8288342</id><snippet>a = [1, 0, 0, 0]
table = [a, a, a]
</snippet></ROW><ROW><id>8288342</id><snippet>table = [[1, 0, 0, 0]] * 3
</snippet></ROW><ROW><id>8288342</id><snippet>table</snippet></ROW><ROW><id>8288342</id><snippet>table = [[1, 0, 0, 0] for i in range(3)]
</snippet></ROW><ROW><id>8288342</id><snippet>table = [[1, 0, 0, 0], [1, 0, 0, 0], [1, 0, 0, 0]]
</snippet></ROW><ROW><id>8288724</id><snippet>print x()</snippet></ROW><ROW><id>8288724</id><snippet>x()</snippet></ROW><ROW><id>8288724</id><snippet>None</snippet></ROW><ROW><id>8288724</id><snippet>print "Hello world"</snippet></ROW><ROW><id>8288724</id><snippet>return "Hello world"</snippet></ROW><ROW><id>8288724</id><snippet>print x()</snippet></ROW><ROW><id>8288724</id><snippet>x()</snippet></ROW><ROW><id>8288991</id><snippet>[(a, b) for a in A for b in B if a in b]
</snippet></ROW><ROW><id>8288991</id><snippet>import itertools
import timeit
import re
import collections

with open("/usr/share/dict/british-english") as f:
    A = [s.strip() for s in itertools.islice(f, 28000, 30000)]
    B = [s.strip() for s in itertools.islice(f, 23000, 25000)]

def f():
    result = []
    for a in A:
        for b in B:
            if a in b:
                result.append((a, b))
    return result

def g():
    return [(a, b) for a in A for b in B if a in b]

def h():
    res = [re.compile(re.escape(a)) for a in A]
    return [(a, b) for a in res for b in B if a.search(b)]

def ninjagecko():
    d = collections.defaultdict(set)
    for k, b in enumerate(B):
        for i, j in itertools.combinations(range(len(b) + 1), 2):
            d[b[i:j]].add(k)
    return [(a, B[k]) for a in A for k in d[a]]

print "Nested loop", timeit.repeat(f, number=1)
print "List comprehension", timeit.repeat(g, number=1)
print "Regular expressions", timeit.repeat(h, number=1)
print "ninjagecko", timeit.repeat(ninjagecko, number=1)
</snippet></ROW><ROW><id>8288991</id><snippet>Nested loop [0.3641810417175293, 0.36279606819152832, 0.36295199394226074]
List comprehension [0.362030029296875, 0.36148500442504883, 0.36158299446105957]
Regular expressions [1.6498990058898926, 1.6494300365447998, 1.6480278968811035]
ninjagecko [0.06402897834777832, 0.063711881637573242, 0.06389307975769043]
</snippet></ROW><ROW><id>8289044</id><snippet>timer</snippet></ROW><ROW><id>8289044</id><snippet>def timer(message, x):
  for i in range(1,x):
    sys.stdout.write("\r%s%d" % (message, i))
    sys.stdout.flush()
    sleep(1)
    sys.stdout.write('\r  \r')
...


timer('Now counting..... ', 6)
</snippet></ROW><ROW><id>8289068</id><snippet>from selenium import webdriver
browser = webdriver.Firefox()
browser.get('http://subscene.com/english/How-I-Met-Your-Mother-Seventh-Season/subtitle-482407.aspx')        
browser.execute_script('WebForm_DoPostBackWithOptions(new WebForm_PostBackOptions("s$lc$bcr$downloadLink", "", true, "", "/english/How-I-Met-Your-Mother-Seventh-Season/subtitle-482407-dlpath-90698/zip.zipx", false, true))')
raw_input()
</snippet></ROW><ROW><id>8289110</id><snippet>manage.py test myapp</snippet></ROW><ROW><id>8289110</id><snippet>settings.py</snippet></ROW><ROW><id>8289110</id><snippet>multiprocessing</snippet></ROW><ROW><id>8289110</id><snippet>BaseHTTPServer</snippet></ROW><ROW><id>8289154</id><snippet>from BeautifulSoup import BeautifulSoup

text = """
&lt;ul class="descShort bullet"&gt;text1&lt;/ul&gt;
&lt;a href="example.com"&gt;test&lt;/a&gt;
&lt;ul class="descShort bullet"&gt;one more&lt;/ul&gt;
&lt;ul class="other"&gt;text2&lt;/ul&gt;
"""

soup = BeautifulSoup(text)

# to get the contents of all &lt;ul&gt; tags:
for tag in soup.findAll('ul'):
    print tag.contents[0]

# to get the contents of &lt;ul&gt; tags w/ attribute class="descShort bullet":
for tag in soup.findAll('ul', {'class': 'descShort bullet'}):
    print tag.contents[0]
</snippet></ROW><ROW><id>8289167</id><snippet>libedit</snippet></ROW><ROW><id>8289167</id><snippet>readline</snippet></ROW><ROW><id>8289167</id><snippet>libedit</snippet></ROW><ROW><id>8289167</id><snippet>readline</snippet></ROW><ROW><id>8289167</id><snippet>libedit</snippet></ROW><ROW><id>8289167</id><snippet>libedit</snippet></ROW><ROW><id>8289167</id><snippet>readline</snippet></ROW><ROW><id>8289167</id><snippet>readline</snippet></ROW><ROW><id>8289167</id><snippet>$ export PATH=/Library/Frameworks/Python.framework/Versions/3.2/bin:$PATH
</snippet></ROW><ROW><id>8289167</id><snippet>$ curl -O http://python-distribute.org/distribute_setup.py
$ python3.2 distribute_setup.py
</snippet></ROW><ROW><id>8289167</id><snippet>readline</snippet></ROW><ROW><id>8289167</id><snippet>$ easy_install-3.2 readline
</snippet></ROW><ROW><id>8289167</id><snippet>readline</snippet></ROW><ROW><id>8289167</id><snippet>py32-readline</snippet></ROW><ROW><id>8289391</id><snippet>/etc/hostname</snippet></ROW><ROW><id>8289391</id><snippet>uname -n</snippet></ROW><ROW><id>8289391</id><snippet>/etc/init.d/hostname.sh</snippet></ROW><ROW><id>8289391</id><snippet>socket.gethostname()</snippet></ROW><ROW><id>8289397</id><snippet>self.Bind(wx.EVT_MENU, self.on_copy, self.copy)
</snippet></ROW><ROW><id>8289397</id><snippet>widget = self.FindFocus()
</snippet></ROW><ROW><id>8289397</id><snippet>self.copied = widget.GetStringSelection()
</snippet></ROW><ROW><id>8289397</id><snippet>import wx

class MyFrame(wx.Frame):
    def __init__(self, *args, **kwds):
        kwds["style"] = wx.DEFAULT_FRAME_STYLE
        wx.Frame.__init__(self, *args, **kwds)
        self.tctrl_1 = wx.TextCtrl(self, -1, "", style=wx.TE_MULTILINE)
        self.tctrl_2 = wx.TextCtrl(self, -1, "", style=wx.TE_MULTILINE)

        self.menubar = wx.MenuBar()
        self.test = wx.Menu()
        self.copy = wx.MenuItem(self.test, wx.NewId(), "copy", "is_going to copy", wx.ITEM_NORMAL)
        self.test.AppendItem(self.copy)
        self.paste = wx.MenuItem(self.test, wx.NewId(), "paste", "will paste", wx.ITEM_NORMAL)
        self.test.AppendItem(self.paste)
        self.menubar.Append(self.test, "Test")
        self.SetMenuBar(self.menubar)

        self.__set_properties()
        self.__do_layout()

        self.Bind(wx.EVT_MENU, self.on_copy, self.copy)
        self.Bind(wx.EVT_MENU, self.on_paste, self.paste)

    def __set_properties(self):
        self.SetTitle("frame_1")

    def __do_layout(self):
        sizer_1 = wx.BoxSizer(wx.VERTICAL)
        sizer_2 = wx.BoxSizer(wx.HORIZONTAL)
        sizer_2.Add(self.tctrl_1, 1, wx.EXPAND, 0)
        sizer_2.Add(self.tctrl_2, 1, wx.EXPAND, 0)
        sizer_1.Add(sizer_2, 1, wx.EXPAND, 0)
        self.SetSizer(sizer_1)
        sizer_1.Fit(self)
        self.Layout()

    def on_copy(self, event): 
        widget = self.FindFocus()
        self.copied = widget.GetStringSelection()

    def on_paste(self, event): 
        widget = self.FindFocus()
        widget.WriteText(self.copied)


if __name__ == "__main__":
    app = wx.PySimpleApp(0)
    frame = MyFrame(None, -1, "")
    frame.Show()
    app.MainLoop()
</snippet></ROW><ROW><id>8289432</id><snippet>&gt;&gt;&gt; {1: 1, 9: 9}
{1: 1, 9: 9}
&gt;&gt;&gt; {9: 9, 1: 1}
{9: 9, 1: 1}
</snippet></ROW><ROW><id>8289563</id><snippet>__init__</snippet></ROW><ROW><id>8289563</id><snippet>int</snippet></ROW><ROW><id>8289563</id><snippet>str</snippet></ROW><ROW><id>8289563</id><snippet>list</snippet></ROW><ROW><id>8289563</id><snippet>class Tile:
    def __init__(self, val):
        # here paste the code making Tile object out of other objects,
        # possibly checking their types in the process
        pass
</snippet></ROW><ROW><id>8289563</id><snippet>__init__</snippet></ROW><ROW><id>8289563</id><snippet>spam = Tile(ham)
</snippet></ROW><ROW><id>8289563</id><snippet>&gt;&gt;&gt; class AmericanTile:
    def __init__(self, val=None):
        if isinstance(val, str):
            self.color = val
        elif isinstance(val, BritishTile):
            self.color = val.colour


&gt;&gt;&gt; class BritishTile:
    def __init__(self, val=None):
        if isinstance(val, str):
            self.colour = val
        elif isinstance(val, AmericanTile):
            self.colour = val.color


&gt;&gt;&gt; a = AmericanTile('yellow')
&gt;&gt;&gt; a.color
'yellow'
&gt;&gt;&gt; b = BritishTile(a)
&gt;&gt;&gt; b.colour
'yellow'
</snippet></ROW><ROW><id>8289623</id><snippet>config</snippet></ROW><ROW><id>8289623</id><snippet>constructor = config['class'] # or '()' for a custom object being configured
kwargs = dict([(k, config[k]) for k in config if valid_ident(k)])
obj = constructor(**kwargs)
</snippet></ROW><ROW><id>8289623</id><snippet>level,</snippet></ROW><ROW><id>8289623</id><snippet>and</snippet></ROW><ROW><id>8289755</id><snippet>include</snippet></ROW><ROW><id>8289755</id><snippet>(r'^login/', 'project.views.login'),
</snippet></ROW><ROW><id>8289755</id><snippet>render</snippet></ROW><ROW><id>8289755</id><snippet>def login(request):
    t = get_template('login.html')
    c = Context({})
    return HttpResponse(t.render(c)) 
</snippet></ROW><ROW><id>8289755</id><snippet>render</snippet></ROW><ROW><id>8289755</id><snippet>render_to_response</snippet></ROW><ROW><id>8289807</id><snippet>Exception</snippet></ROW><ROW><id>8289807</id><snippet>class MyModuleException(Exception):
    """An exception raised by my module"""

    def __init__(self, message):
        super(MyModuleException, self).__init__(message)
</snippet></ROW><ROW><id>8289807</id><snippet>try:
    myModule.doSomethingExceptional()
except MyModuleException as e:
    print "Oh no!"
</snippet></ROW><ROW><id>8289915</id><snippet>whois</snippet></ROW><ROW><id>8289915</id><snippet>Popen</snippet></ROW><ROW><id>8289915</id><snippet>PIPE</snippet></ROW><ROW><id>8289915</id><snippet>stdin</snippet></ROW><ROW><id>8289915</id><snippet>.communicate()</snippet></ROW><ROW><id>8289915</id><snippet>Popen</snippet></ROW><ROW><id>8289915</id><snippet>from subprocess import Popen, PIPE, STDOUT
import re

## Text result of the whois is stored in whois_result...
whois_result = Popen(['whois', domain], stdout=PIPE,
    stderr=STDOUT).communicate()[0]
if 'No match for' in whois_result:
    print "Processing whois failure on '%s'" % domain
    whois_result = Popen(['whois', p_ip], stdout=PIPE,
        stderr=STDOUT).communicate()[0]
    if 'No match for' in whois_result:
            print "complete and utter whois failure, its you isnt it, not me."
    test = re.search("country.+([A-Z].)",whois_result)
    countryid = test.group(1)
</snippet></ROW><ROW><id>8290064</id><snippet>findPatImgSrc = re.findall(patImgSrc, str(imgsrc))
</snippet></ROW><ROW><id>8290064</id><snippet>[x['src'] for x in soup.findAll('img', {'class': 'sizedProdImage'})]
</snippet></ROW><ROW><id>8290307</id><snippet>&gt;&gt;&gt; u = u'hello\u2013world'
&gt;&gt;&gt; u.encode('latin-1', 'replace')    # replace it with a question mark
'hello?world'
&gt;&gt;&gt; u.encode('latin-1', 'ignore')     # ignore it
'helloworld'
</snippet></ROW><ROW><id>8290307</id><snippet>&gt;&gt;&gt; u.replace(u'\u2013', '-').encode('latin-1')
'hello-world'
</snippet></ROW><ROW><id>8290307</id><snippet>&gt;&gt;&gt; u.encode('utf-8')
'hello\xe2\x80\x93world'
</snippet></ROW><ROW><id>8290331</id><snippet>class Quadratic(Polynomial):
    def __init__(self, quadratic, linear, constant):
        Polynomial.__init__(self, (2, quadratic), (1, linear), (0, constant))
</snippet></ROW><ROW><id>8290508</id><snippet>def batch(iterable, n = 1):
   l = len(iterable)
   for ndx in range(0, l, n):
       yield iterable[ndx:min(ndx+n, l)]

for x in batch(range(0, 10), 3):
    print x
</snippet></ROW><ROW><id>8290656</id><snippet>__init__</snippet></ROW><ROW><id>8290656</id><snippet>Model</snippet></ROW><ROW><id>8290656</id><snippet>class MyModel(db.Model):
  @classmethod
  def new(cls, **kwargs):
    return cls(key_name=str(uuid.uuid4()), **kwargs)
</snippet></ROW><ROW><id>8290724</id><snippet>def factorial(n):
    if not isinstance(n, int):
        raise ValueError('value must be an int')
    if n &lt; 0:
        raise ValueError('n must be &gt;= 0')

    result = 1
    for x in range(n):
        result = result * (x + 1)

    return result # &lt;-- This is the magic line :)
</snippet></ROW><ROW><id>8290724</id><snippet>def factorial(n):
    """Calculate the factorial of a non-negative integer ``n``.

    &gt;&gt;&gt; factorial(1)
    1
    &gt;&gt;&gt; factorial(4)
    24

    Negative numbers are not supported and will result in a ValueError:
    &gt;&gt;&gt; factorial(-1)
    Traceback (most recent call last):
        ...
    ValueError: n must be &gt;= 0
    """

    # (Insert original code here)

# Run the tests only if the file is run directly, not imported from another module
if __name__ == '__main__':
    import doctest
    doctest.testmod() # Find and run all the tests in this module
</snippet></ROW><ROW><id>8290910</id><snippet>ipython -i</snippet></ROW><ROW><id>8290910</id><snippet>run -i</snippet></ROW><ROW><id>8290910</id><snippet>ipython</snippet></ROW><ROW><id>8290910</id><snippet>from __future__ import division</snippet></ROW><ROW><id>8290910</id><snippet>print05.py</snippet></ROW><ROW><id>8290910</id><snippet>$ cat print05.py 
from __future__ import division
print(1/2)
</snippet></ROW><ROW><id>8290910</id><snippet>ipython</snippet></ROW><ROW><id>8290910</id><snippet>In [1]: print 1/2
0
In [2]: run -i print05.py
0.5
In [3]: division
Out[3]: _Feature((2, 2, 0, 'alpha', 2), (3, 0, 0, 'alpha', 0), 8192)
In [4]: print 1/2
0
In [5]: from __future__ import division
In [6]: print 1/2
0.5
</snippet></ROW><ROW><id>8290910</id><snippet>execfile</snippet></ROW><ROW><id>8290910</id><snippet>import</snippet></ROW><ROW><id>8290910</id><snippet>&gt;&gt;&gt; print 1/2
0
&gt;&gt;&gt; execfile('print05.py')
0.5
&gt;&gt;&gt; print 1/2
0
&gt;&gt;&gt; from __future__ import division
&gt;&gt;&gt; print 1/2
0.5
</snippet></ROW><ROW><id>8290910</id><snippet>from __future__ import division</snippet></ROW><ROW><id>8290910</id><snippet>from __future__ import division</snippet></ROW><ROW><id>8290910</id><snippet>$ python -i print05.py
0.5
&gt;&gt;&gt; print 1/2
0.5
&gt;&gt;&gt; division
_Feature((2, 2, 0, 'alpha', 2), (3, 0, 0, 'alpha', 0), 8192)
</snippet></ROW><ROW><id>8290910</id><snippet>__main__</snippet></ROW><ROW><id>8290910</id><snippet>print05.py</snippet></ROW><ROW><id>8290910</id><snippet>print 1/2</snippet></ROW><ROW><id>8290910</id><snippet>print05</snippet></ROW><ROW><id>8290910</id><snippet>__main__</snippet></ROW><ROW><id>8290910</id><snippet>$ python -im print05
0.5
&gt;&gt;&gt; print 1/2
0
</snippet></ROW><ROW><id>8290910</id><snippet>$ ipython -i print05.py
0.5
In [1]: division
Out[1]: _Feature((2, 2, 0, 'alpha', 2), (3, 0, 0, 'alpha', 0), 8192)
In [2]: print 1/2
0
</snippet></ROW><ROW><id>8290910</id><snippet>__future__</snippet></ROW><ROW><id>8290910</id><snippet>ipython</snippet></ROW><ROW><id>8290910</id><snippet>-i</snippet></ROW><ROW><id>8291148</id><snippet>os.makedirs</snippet></ROW><ROW><id>8291148</id><snippet>mkdir -p</snippet></ROW><ROW><id>8291148</id><snippet>subprocess</snippet></ROW><ROW><id>8291148</id><snippet>popen</snippet></ROW><ROW><id>8291148</id><snippet>import sys
import os
DATEFILE = open(os.path.join(r'/Astronomy', 'Sorted', '2-Scratch', 'MAPninox-DATE.txt'), "r")
TIMEFILE = open(os.path.join(r'/Astronomy', 'Sorted', '2-Scratch', 'MAPninox-TIME.txt'), "r")

for DATE in DATEFILE:
    print DATE,

for TIME in TIMEFILE:
    os.makedirs(os.path.join(r'/Astronomy', DATE, TIME))

    astrDir = os.path.join(r'/Astronomy', '20111126', TIME)
    try
        os.makedirs(astrDir)
    except os.error:
        print "Dir %s already exists, moving on..." % astrDir
    # etc...
</snippet></ROW><ROW><id>8291148</id><snippet>shutil</snippet></ROW><ROW><id>8291148</id><snippet>cp</snippet></ROW><ROW><id>8291148</id><snippet>mv</snippet></ROW><ROW><id>8291148</id><snippet>os</snippet></ROW><ROW><id>8291148</id><snippet>os.makedirs(path[, mode])</snippet></ROW><ROW><id>8291148</id><snippet>mkdir()</snippet></ROW><ROW><id>8291169</id><snippet>c = serial.Serial(3, 9600)
</snippet></ROW><ROW><id>8291209</id><snippet>$$</snippet></ROW><ROW><id>8291209</id><snippet>cut -d ' ' -f 4 /proc/self/stat</snippet></ROW><ROW><id>8291242</id><snippet>print "3"</snippet></ROW><ROW><id>8291242</id><snippet>print 3</snippet></ROW><ROW><id>8291242</id><snippet>print repr(something)</snippet></ROW><ROW><id>8291242</id><snippet>print something</snippet></ROW><ROW><id>8291242</id><snippet>f = open("set_initial.txt")
numbers = [int(n) for n in f.read().split()]
print numbers
assert len(numbers) == 4
shift_l1, shift_l2, shift_l3, shift_l4 = numbers
print shift_l1, shift_l2, shift_l3, shift_l4
</snippet></ROW><ROW><id>8291348</id><snippet>colour</snippet></ROW><ROW><id>8291348</id><snippet>.split()</snippet></ROW><ROW><id>8291348</id><snippet>color_cycle = [
    [colour[name] for name in 'bldylw bldred bldgrn bldblu txtwht'.split()],
    [colour[name] for name in 'txtblu txtcyn'.split()]
]
</snippet></ROW><ROW><id>8291348</id><snippet>import itertools

# Create an iterator for the selected color sequence.
if colourc:
    icolor = itertools.cycle(color_cycle[colourc - 1])

for a in stringy:
    # Write out the escape code for next color
    if colourc:
        color = next(icolor)
        sys.stdout.write(color)
</snippet></ROW><ROW><id>8291348</id><snippet>    if rndcase:
        if random.randint(0,1):
            a = a.upper()
        else:
            a = a.lower()
</snippet></ROW><ROW><id>8291356</id><snippet>def refresh(*args):

    if  v.get() == 'Disable' :
        fb_entry.state(['disabled'])
        fw_entry.state(['disabled'])
        fb.set('')
        fw.set('')
    elif v.get() == 'Enable' :
        fb_entry.state(['!disabled'])
        fw_entry.state(['!disabled'])


root = Tk()
v = StringVar()
var = StringVar()

entry1 = ttk.Entry (root, textvariable= var)
entry1.grid(row=2, column=2, sticky=(E,W))

entry2 = ttk.Entry (root, textvariable= var)
entry2.grid(row=4, column=2, sticky=(E,W))


v_list=['Disable','Enable']
v.set(v_list[1])
v_optionmenu = apply(OptionMenu, (root,v) + tuple(v_list))
v_optionmenu.grid(column=4,row=11,sticky=(W,E))

var = v

root.bind('&lt;Enter&gt;',refresh_widget)
root.mainloop()
</snippet></ROW><ROW><id>8291438</id><snippet>input</snippet></ROW><ROW><id>8291438</id><snippet>&gt;&gt;&gt; mydict = {'nom':'singe', 'poids':70, 'taille':1.75}
&gt;&gt;&gt; myvar = input()
nom
&gt;&gt;&gt; print(mydict[myvar])
singe
</snippet></ROW><ROW><id>8291580</id><snippet>querysets = [cls.objects.filter(date=now) for cls in [Model1, Model2, Model3]]
</snippet></ROW><ROW><id>8291804</id><snippet>b.split('/')</snippet></ROW><ROW><id>8291804</id><snippet>&gt;&gt;&gt; [x+'/'+y for y in 'ab' for x in '012']
['0/a', '1/a', '2/a', '0/b', '1/b', '2/b']
    # desire output 0,1,2
    # not output 0,1,2,0,1,2
</snippet></ROW><ROW><id>8291804</id><snippet>&gt;&gt;&gt; [frac.split('/')[0] for frac in c.split(',')]
['A', 'C', 'E']
</snippet></ROW><ROW><id>8291804</id><snippet>&gt;&gt;&gt; [[x+'/'+y for y in 'ab'] for x in '012']
[['0/a', '0/b'], ['1/a', '1/b'], ['2/a', '2/b']]
    # desire output 0,1,2
    # not [0,0],[1,1],[2,2]
</snippet></ROW><ROW><id>8291804</id><snippet>((a,b,c) for a in A for b in B for c in C)
            #SAME AS#
((a,b,c) for (a,b,c) in itertools.product(A,B,C))
            #SAME AS#
for a in A:
    for b in B:
        for c in C:
            yield (a,b,c)
</snippet></ROW><ROW><id>8291804</id><snippet>[[[(a,b,c) for a in A] for b in B] for c in C]
            #SAME AS#
def fC(c):
    def fB(b,c):
        def fA(a,b,c):
            return (a,b,c)   
        yield [f(a,b,c) for a in A]
    yield [fB(b,c) for b in B]
[fC(c) for c in C]
            #SAME AS#
Cs = []
for c in C:
    Bs = []
    for b in B:
        As = []
        for a in A:
            As += [a]
        Bs += [As]
    Cs += [Bs]
return Cs
</snippet></ROW><ROW><id>8291804</id><snippet>({'z':z} for x in ({'y':y} for y in ({'x':x} for x in 'abc')))
              #SAME AS#
for x in 'abc':
    x2 = {'x':x}
    y2 = {'y':x2}
    z2 = {'z':y2}
    yield z2
              #SAME AS#
def f(x):
    return {'z':{'y':{'x':x}}}
return [f(x) for x in 'abc']     # or map(f,'abc')
</snippet></ROW><ROW><id>8291951</id><snippet>mount</snippet></ROW><ROW><id>8291951</id><snippet>shell=True</snippet></ROW><ROW><id>8291951</id><snippet>subprocess</snippet></ROW><ROW><id>8291951</id><snippet>shell=False</snippet></ROW><ROW><id>8291951</id><snippet>split</snippet></ROW><ROW><id>8291951</id><snippet>mount</snippet></ROW><ROW><id>8291951</id><snippet>shell=True</snippet></ROW><ROW><id>8291951</id><snippet>.split(" ")</snippet></ROW><ROW><id>8292101</id><snippet>FlashWindowEx</snippet></ROW><ROW><id>8292101</id><snippet>FLASHW_*</snippet></ROW><ROW><id>8292436</id><snippet>return Polynomial(*poly)
</snippet></ROW><ROW><id>8292436</id><snippet>return Polynomial(poly[0], poly[1], poly[2], poly[3], poly[4])
</snippet></ROW><ROW><id>8292436</id><snippet>poly</snippet></ROW><ROW><id>8292436</id><snippet>def read_file(polyfilename):
    with open(polyfilename) as f:
        return Polynomial(*[[int(x) for x in line.split()] for line in f])
</snippet></ROW><ROW><id>8292460</id><snippet>var namedlist = function(fields) {
    return function(arr) {
        var obj = { };

        for(var i = 0; i &lt; arr.length; i++) {
            obj[fields[i]] = arr[i];            
        }

        return obj;
    };
};

//use:
var points = [[1,2], [3,4], [5,6]];
var Point = namedlist(['x', 'y']);

points = _.map(Point, points);

//Single item:
var pt = Point([1,2]);
</snippet></ROW><ROW><id>8292467</id><snippet>zip()</snippet></ROW><ROW><id>8292467</id><snippet>from string import ascii_lowercase as alphabet

def cipher(plaintext, shift):
   # Build a lookup table between the alphabet and the shifted alphabet.
   table = dict(zip(alphabet, alphabet[shift:] + alphabet[0:shift]))
   # Convert each character to its shifted equivalent. 
   # N.B. This doesn't handle non-alphabetic characters
   return ''.join(table[c] for c in plaintext.lower())
</snippet></ROW><ROW><id>8292613</id><snippet>safe_substitute</snippet></ROW><ROW><id>8292613</id><snippet>print html.safe_substitute(toFirstName='jibin',fromFirstName='Vishnu')
</snippet></ROW><ROW><id>8292847</id><snippet>raw_input</snippet></ROW><ROW><id>8292847</id><snippet>sys.stdin</snippet></ROW><ROW><id>8292847</id><snippet>sys.stdin.read</snippet></ROW><ROW><id>8292847</id><snippet>buf.append(line.split('STOP ME\n', 1)[0]+'\n')
</snippet></ROW><ROW><id>8292847</id><snippet>STOP ME</snippet></ROW><ROW><id>8293164</id><snippet>urllib.urlencode</snippet></ROW><ROW><id>8293164</id><snippet>urllib.quote</snippet></ROW><ROW><id>8293164</id><snippet>urllib.quote_plus</snippet></ROW><ROW><id>8293309</id><snippet>pymssql</snippet></ROW><ROW><id>8293309</id><snippet>mssql+pymssql://&lt;freetds_name&gt;?trusted=True
</snippet></ROW><ROW><id>8293394</id><snippet>Exception</snippet></ROW><ROW><id>8293394</id><snippet>Exception</snippet></ROW><ROW><id>8293398</id><snippet>class CFile(models.Model):
   filepath   = models.FileField(upload_to=...)
   collection = models.ForeignKey("FileCollection",null=True, related_name='files')
   filename = models.CharField(max_length=255)
   ... # other attributes that are not relevant

    class Meta:
        unique_together = (('filename', 'collection'),)

    def save(self, *args, **kwargs):
        self.filename = bname(self.filepath.path)
        super(CFile, self).save(args, kwargs)
</snippet></ROW><ROW><id>8293835</id><snippet>WHERE</snippet></ROW><ROW><id>8293835</id><snippet>Post</snippet></ROW><ROW><id>8293835</id><snippet>Rating</snippet></ROW><ROW><id>8293835</id><snippet># ...
.filter(Post.id==Rating.post_id)\
</snippet></ROW><ROW><id>8293835</id><snippet>qry =  (session.query(Post, Rating).
        outerjoin(Rating, and_(Post.id==Rating.post_id, Rating.user_id==user.id)).
        filter(Post.page_id==current_pageid)
        )
res = qry.all() # you can return *res* already to a view, but to get to your results, do below as well:
for post, rating in res:
    post.user_rating = rating
posts = [post for post, rating in res]
return posts
</snippet></ROW><ROW><id>8293835</id><snippet>posts</snippet></ROW><ROW><id>8293835</id><snippet>user_rating</snippet></ROW><ROW><id>8293835</id><snippet>.all()</snippet></ROW><ROW><id>8293835</id><snippet>posts = session.query(Post).filter(Post.page_id==current_pageid).all()
</snippet></ROW><ROW><id>8293869</id><snippet>collections.Counter</snippet></ROW><ROW><id>8293869</id><snippet>from collections import Counter

with open("allocFile.txt") as fp:
    counter = Counter(line.split()[0] for line in fp)

for bytes, count in counter.most_common():
    print bytes, "bytes -&gt; ", count, " times"
</snippet></ROW><ROW><id>8293904</id><snippet>verbose=True</snippet></ROW><ROW><id>8293904</id><snippet>line 2: column 0</snippet></ROW><ROW><id>8293964</id><snippet>Logger</snippet></ROW><ROW><id>8293964</id><snippet>.py</snippet></ROW><ROW><id>8293964</id><snippet>logger = logging.getLogger("package.module")
</snippet></ROW><ROW><id>8293964</id><snippet>def foo():
    ...
    logger.info("message")
    ...
</snippet></ROW><ROW><id>8293964</id><snippet>logger.info</snippet></ROW><ROW><id>8293964</id><snippet>LogMethod</snippet></ROW><ROW><id>8294043</id><snippet>self.cursor.movePosition(QTextCursor.NextCell)
self.cursor.insertText("second cell")
</snippet></ROW><ROW><id>8294091</id><snippet>Boolean ret = map.get("x");
if (ret == null) {
    return true
}
return ret;
</snippet></ROW><ROW><id>8294091</id><snippet>public static &lt;K,V&gt; V mapGet(Map&lt;K, V&gt; map, K key, V defaultValue) {
    V ret = map.get(key);
    if (ret == null) {
        return defaultValue;
    }
    return ret;
}
</snippet></ROW><ROW><id>8294091</id><snippet>public class MyHashMap&lt;K,V&gt; extends HashMap&lt;K,V&gt; {
    public V get(K key, V default) {
        V ret = get(key);
        if (ret == null) {
            return defaultValue;
        }
        return ret;
    }
}
</snippet></ROW><ROW><id>8294217</id><snippet>filter</snippet></ROW><ROW><id>8294217</id><snippet>with open(filename, 'rb') as f:
    for record in csv.reader(f):
        do_something_with(record[0], record[2])
</snippet></ROW><ROW><id>8294217</id><snippet>with open(filename, 'rb') as f:
    the_iterator = ((record[0], record[2]) for record in csv.reader(f))
    # do something with the iterator
</snippet></ROW><ROW><id>8294217</id><snippet>with open(filename, 'rb') as f:
    the_list = [(record[0], record[2]) for record in csv.reader(f)]
    # do something with the list
</snippet></ROW><ROW><id>8294217</id><snippet>filter</snippet></ROW><ROW><id>8294217</id><snippet>def strictly_increasing(fields):
    return all(int(i) &lt; int(j) for i,j in pairwise(fields))
</snippet></ROW><ROW><id>8294217</id><snippet>itertools</snippet></ROW><ROW><id>8294217</id><snippet>pairwise</snippet></ROW><ROW><id>8294217</id><snippet>filter</snippet></ROW><ROW><id>8294217</id><snippet>with open(filename, 'rb') as f:
    the_list = filter(strictly_increasing, csv.reader(f))
    # do something with the list
</snippet></ROW><ROW><id>8294217</id><snippet>with open(filename, 'rb') as f:
    the_list = [record for record in csv.reader(f) if strictly_increasing(record)]
    # do something with the list
</snippet></ROW><ROW><id>8294217</id><snippet>filter</snippet></ROW><ROW><id>8294654</id><snippet>raise ex</snippet></ROW><ROW><id>8294654</id><snippet>def raise_(ex):
    raise ex

y = lambda: raise_(Exception())
</snippet></ROW><ROW><id>8294654</id><snippet>def</snippet></ROW><ROW><id>8294654</id><snippet>y = lambda x: 2*x if x &lt; 10 else raise_(Exception())
</snippet></ROW><ROW><id>8294894</id><snippet>localfile</snippet></ROW><ROW><id>8294894</id><snippet>import subprocess
subprocess.call(['transmission', localFile])
</snippet></ROW><ROW><id>8294894</id><snippet>import subprocess
subprocess.call(['transmission', url.split('/')[-1]])
</snippet></ROW><ROW><id>8294894</id><snippet>url.split('/')[-1]</snippet></ROW><ROW><id>8294894</id><snippet>os.system()</snippet></ROW><ROW><id>8294894</id><snippet>subprocess.call()</snippet></ROW><ROW><id>8295022</id><snippet>try..except</snippet></ROW><ROW><id>8295022</id><snippet>years &lt; 1900</snippet></ROW><ROW><id>8295022</id><snippet>years &lt; 1000</snippet></ROW><ROW><id>8295022</id><snippet>import datetime as dt
format = "%Y-%m-%d"
t = dt.datetime.strptime("0023-10-10", format)
try:
    t.strftime(format)
except ValueError as err:
    print(err)
</snippet></ROW><ROW><id>8295022</id><snippet>year=23 is before 1000; the datetime strftime() methods require year &gt;= 1000
</snippet></ROW><ROW><id>8295174</id><snippet>globals</snippet></ROW><ROW><id>8295174</id><snippet>def is_defined(variable):
    return variable in globals()

tomato = 42

is_defined ("tomato")
</snippet></ROW><ROW><id>8295174</id><snippet>def set_var(variable, value=0):
     globals()[variable] = value
</snippet></ROW><ROW><id>8295693</id><snippet>extern "C"</snippet></ROW><ROW><id>8295701</id><snippet>Venue</snippet></ROW><ROW><id>8295701</id><snippet>Base</snippet></ROW><ROW><id>8295701</id><snippet>Venue</snippet></ROW><ROW><id>8295701</id><snippet>ForeignKeyConstraint</snippet></ROW><ROW><id>8295701</id><snippet>__table_args__</snippet></ROW><ROW><id>8295701</id><snippet>tag</snippet></ROW><ROW><id>8295701</id><snippet>relationship</snippet></ROW><ROW><id>8295701</id><snippet>Tag</snippet></ROW><ROW><id>8295701</id><snippet>cascade</snippet></ROW><ROW><id>8295701</id><snippet>relationship</snippet></ROW><ROW><id>8295701</id><snippet>'save-update'</snippet></ROW><ROW><id>8295701</id><snippet>save-update</snippet></ROW><ROW><id>8295701</id><snippet>Session.add()</snippet></ROW><ROW><id>8295701</id><snippet>add()</snippet></ROW><ROW><id>8295818</id><snippet>re.escape()</snippet></ROW><ROW><id>8295818</id><snippet>\b</snippet></ROW><ROW><id>8295818</id><snippet>import re
words = 'This is word of spy++'
wl = ['spy++','cry','fpp']
regobjs = []

for word in wl:
    eword = re.escape(word.lower())
    if eword[0].isalnum() or eword[0]=="_":
        eword = r"\b" + eword
    if eword[-1].isalnum() or eword[-1]=="_":
        eword = eword + r"\b"
    regobjs.append(re.compile(eword))

for regobj in regobjs:
    print re.search(regobj, words).group()
</snippet></ROW><ROW><id>8296293</id><snippet>fanout</snippet></ROW><ROW><id>8296586</id><snippet>errno</snippet></ROW><ROW><id>8296586</id><snippet>args</snippet></ROW><ROW><id>8296586</id><snippet>except socket.error, socket_error:
    if socket_error.args[0] == errno.ECONNREFUSED:
</snippet></ROW><ROW><id>8296838</id><snippet>itertools.cycle</snippet></ROW><ROW><id>8296838</id><snippet>import itertools
import string
letters = itertools.cycle(string.lowercase)
</snippet></ROW><ROW><id>8296838</id><snippet>letters</snippet></ROW><ROW><id>8296838</id><snippet>while</snippet></ROW><ROW><id>8296838</id><snippet>letters.next()</snippet></ROW><ROW><id>8296838</id><snippet>for</snippet></ROW><ROW><id>8296838</id><snippet>itertools.islice</snippet></ROW><ROW><id>8296838</id><snippet>def cyclic_letters(start='a'):
    i = string.lowercase.index(start)
    letts = string.lowercase[i:] + string.lowercase[:i]
    return itertools.cycle(letts)
</snippet></ROW><ROW><id>8296838</id><snippet>cyclic_letters</snippet></ROW><ROW><id>8296838</id><snippet>'a'</snippet></ROW><ROW><id>8296838</id><snippet>letter_map = dict(zip(string.lowercase, string.lowercase[1:] + string.lowercase[0]))
</snippet></ROW><ROW><id>8296838</id><snippet>letter_map['c']</snippet></ROW><ROW><id>8296838</id><snippet>'d'</snippet></ROW><ROW><id>8296838</id><snippet>string.lowercase</snippet></ROW><ROW><id>8296838</id><snippet>'abcdefghijklmnopqrstuvwxyz'</snippet></ROW><ROW><id>8296838</id><snippet>string.ascii_lowercase</snippet></ROW><ROW><id>8296919</id><snippet>pdcurses_path = ctypes.util.find_library('pdcurses.dll')
if pdcurses_path:
    pdcurses = ctypes.CDLL(pdcurses_path)
else:
    raise ImportError("could not locate pdcurses.dll library")
</snippet></ROW><ROW><id>8296932</id><snippet>def repo_changes(commit):
  "Iterator over repository changes starting with the given commit."
  number = 0
  next_parent = None
  yield commit                           # return the first commit itself
  while len(commit.parents) &gt; 0:         # iterate
    same_parent(commit.parents)          # check only one grandparent
    for parent in commit.parents:        # go over all parents
      yield parent                       # return each parent
      next_parent = parent               # for the next iteration
    commit = next_parent                 # start again
</snippet></ROW><ROW><id>8296932</id><snippet>same_parent()</snippet></ROW><ROW><id>8296932</id><snippet>for commit in repo_changes(remote_commit):
  if commit.hexsha == local_commit.hexsha:
    return
  authors.append(remote_commit.author.email)
</snippet></ROW><ROW><id>8296947</id><snippet>class Customer(Sim.Process):
    def visit(self):
        yield Sim.hold, self, 2.0
        if random.random()&lt;0.5:
            for x in self.holdLong():
                yield x
        else:
            for x in self.holdShort():
                yield x
</snippet></ROW><ROW><id>8297365</id><snippet>import cPickle
import numpy
M = numpy.array([[1,2],[3,4]]) # here it will be your matrix
cPickle( M , open( "~/M.pic", "w") ) # here it's where you pickle the file
</snippet></ROW><ROW><id>8297365</id><snippet>import cPickle
import numpy
M = cPickle.load( open( "~/M.pic", "r") )
M = numpy.coa( M )
</snippet></ROW><ROW><id>8297365</id><snippet>import numpy
M = numpy.array([[1,2],[3,4]] , dtype.float32 )
</snippet></ROW><ROW><id>8297651</id><snippet>TypeError</snippet></ROW><ROW><id>8297651</id><snippet>NoneType</snippet></ROW><ROW><id>8297651</id><snippet>ValueError</snippet></ROW><ROW><id>8297651</id><snippet>None</snippet></ROW><ROW><id>8297651</id><snippet>TypeError</snippet></ROW><ROW><id>8297651</id><snippet>None</snippet></ROW><ROW><id>8297651</id><snippet>False</snippet></ROW><ROW><id>8297651</id><snippet>__nonzero__</snippet></ROW><ROW><id>8297651</id><snippet>__bool__</snippet></ROW><ROW><id>8297651</id><snippet>if MyArg2 is None:
    raise TypeError
</snippet></ROW><ROW><id>8297804</id><snippet>A</snippet></ROW><ROW><id>8297804</id><snippet>B</snippet></ROW><ROW><id>8297804</id><snippet>Base = declarative_base()

class A(Base):
    __tablename__ = 'a'

    id = Column(Integer, primary_key=True)

class B(Base):
    __tablename__ = 'b'

    id = Column(Integer, primary_key=True)
    a_id = Column(Integer, ForeignKey('a.id'))

    foobar = relationship('A')

    def __init__(self):
        self.foobar = A()
</snippet></ROW><ROW><id>8297804</id><snippet>A</snippet></ROW><ROW><id>8297804</id><snippet>User</snippet></ROW><ROW><id>8297804</id><snippet>B</snippet></ROW><ROW><id>8297804</id><snippet>Address</snippet></ROW><ROW><id>8298064</id><snippet>set.add()</snippet></ROW><ROW><id>8298064</id><snippet>not in</snippet></ROW><ROW><id>8298064</id><snippet>z = set()
if y not in z: # If the object is not in the list yet...
    print something
z.add(y)
</snippet></ROW><ROW><id>8298064</id><snippet>z = set()
was_here = y not in z
z.add(y)
if was_here: # If the object was not in the list yet...
    print something
</snippet></ROW><ROW><id>8298064</id><snippet>None</snippet></ROW><ROW><id>8298258</id><snippet>_multiprocessing</snippet></ROW><ROW><id>8298258</id><snippet>multiprocessing</snippet></ROW><ROW><id>8298340</id><snippet>def do_whois(data):
    if data: return Popen(['whois', str(data)], stdout=PIPE,stderr=STDOUT).communicate()[0]
    return 'No entries'

def check_whois(data):
    if 'No entries' in data or 'Not found' in data:return False
    test = re.search("country.+([A-Z].)",whois_result)
    return test.group(1)

def find_whois(domain, ip):
    return check_whois(do_whois(domain)) or check_whois(do_whois(ip))
</snippet></ROW><ROW><id>8298873</id><snippet>numpy.insert</snippet></ROW><ROW><id>8298873</id><snippet>&gt;&gt;&gt; import numpy as np
&gt;&gt;&gt; a = np.zeros((2, 2))
&gt;&gt;&gt; a
array([[ 0.,  0.],
       [ 0.,  0.]])
# In the following line 1 is the index before which to insert, 0 is the axis.
&gt;&gt;&gt; np.insert(a, 1, np.array((1, 1)), 0)  
array([[ 0.,  0.],
       [ 1.,  1.],
       [ 0.,  0.]])
&gt;&gt;&gt; np.insert(a, 1, np.array((1, 1)), 1)
array([[ 0.,  1.,  0.],
       [ 0.,  1.,  0.]])
</snippet></ROW><ROW><id>8298917</id><snippet>delimiter='\t' and '\n'</snippet></ROW><ROW><id>8298917</id><snippet>fh</snippet></ROW><ROW><id>8298917</id><snippet>'\t' and '\n'</snippet></ROW><ROW><id>8298917</id><snippet>'\n'</snippet></ROW><ROW><id>8298917</id><snippet>'\n'</snippet></ROW><ROW><id>8298917</id><snippet>'\n'</snippet></ROW><ROW><id>8298917</id><snippet>fh = open("internal_link.txt", 'rb')
G = nx.parse_edgelist(fh, create_using=nx.DiGraph())
</snippet></ROW><ROW><id>8298917</id><snippet>read_edgelist</snippet></ROW><ROW><id>8298917</id><snippet>G = nx.read_edgelist("internal_link.txt", create_using=nx.DiGraph())
</snippet></ROW><ROW><id>8298917</id><snippet>G.nodes()</snippet></ROW><ROW><id>8298917</id><snippet>G.edges()</snippet></ROW><ROW><id>8298917</id><snippet>print G.nodes()
print G.edges()
</snippet></ROW><ROW><id>8299285</id><snippet>sip-6.0</snippet></ROW><ROW><id>8299285</id><snippet>sip-8.0</snippet></ROW><ROW><id>8299285</id><snippet>site-packages/</snippet></ROW><ROW><id>8299285</id><snippet>sip_helper.py</snippet></ROW><ROW><id>8299285</id><snippet>import sys
import re
from os.path import join, dirname
def install_sip(version='6.0'):
    assert version in ('6.0', '8.0'), "unsupported version"
    keep = []
    if 'sip' in sys.modules:
       del sys.modules['sip']
    for path in sys.path:
        if not re.match('.*sip\d\.\d', path):
            keep.append(path)
    sys.path[:] = keep # remove other paths
    sys.path.append(join(dirname(__file__), 'sip-%s' % version))
</snippet></ROW><ROW><id>8299285</id><snippet>sip_helper.install_sip</snippet></ROW><ROW><id>8299486</id><snippet>&gt;&gt;&gt; a=[1,2,[3,4,[5,6]]]
&gt;&gt;&gt; a[2][2].append(7)
&gt;&gt;&gt; a
[1, 2, [3, 4, [5, 6, 7]]]
</snippet></ROW><ROW><id>8299486</id><snippet>&gt;&gt;&gt; def findlastlist(s):
    while s and isinstance(s[-1], list):
        s = s[-1]
    return s

&gt;&gt;&gt; a=[1,2,[3,4,[5,6]]]
&gt;&gt;&gt; findlastlist(a).append(7)
&gt;&gt;&gt; a
[1, 2, [3, 4, [5, 6, 7]]]
</snippet></ROW><ROW><id>8299932</id><snippet>import os.path

p = '/var/www/RH/HV/FILE.doc'
print os.path.basename(p)
</snippet></ROW><ROW><id>8299955</id><snippet>socket.herror</snippet></ROW><ROW><id>8299955</id><snippet>import socket
def lookup(addr):
    """
    Example usage:
    name, alias, addresslist = lookup('4.2.2.2')
    """
    try:
        return socket.gethostbyaddr(addr)
    except socket.herror:
        return None, None, None
</snippet></ROW><ROW><id>8299955</id><snippet>import socket
import time
def relookup(addr):
    """
    Example usage:
    name, alias, addresslist = relookup('4.2.2.2')
    """
    attempts = 1
    while (attempts &lt;= 3):
        try:
            return socket.gethostbyaddr(addr)
        except IOError, socket.herror:
            time.sleep(5)
            attempts += 1

    return None, None, None
</snippet></ROW><ROW><id>8300035</id><snippet>transport.write</snippet></ROW><ROW><id>8300067</id><snippet>foo()</snippet></ROW><ROW><id>8300067</id><snippet>foo()</snippet></ROW><ROW><id>8300067</id><snippet>(N, A, B)</snippet></ROW><ROW><id>8300067</id><snippet>(A, B)</snippet></ROW><ROW><id>8300067</id><snippet>foo()</snippet></ROW><ROW><id>8300067</id><snippet>def foo(arr):
    return np.sum(arr, axis=0)
</snippet></ROW><ROW><id>8300067</id><snippet>(N, A, B)</snippet></ROW><ROW><id>8300067</id><snippet>foo()</snippet></ROW><ROW><id>8300067</id><snippet>foo(a[:, :, np.newaxis] - b[:, np.newaxis])
</snippet></ROW><ROW><id>8300072</id><snippet>import multiprocessing as mp
import time
import logging  
import re

logger = logging.getLogger(__name__)

def abc(string, result, wait = 0):
    time.sleep(wait)
    result.put(bool(re.match('some_pattern', string)))

if __name__ == '__main__':
    logging.basicConfig(level = logging.DEBUG,
                        format = '%(asctime)s:  %(message)s',
                        datefmt = '%H:%M:%S', )
    result = mp.Queue()
    proc = mp.Process(target = abc, args = ('some_pattern to match', result))
    proc.start()
    proc.join(timeout = 5)
    if proc.is_alive():
        proc.terminate()
    else:
        logger.info(result.get())

    proc = mp.Process(target = abc, args = ('some string to match', result, 20))
    proc.start()
    proc.join(timeout = 5)
    if proc.is_alive():
        logger.info('Timed out')
        proc.terminate()
    else:
        logger.info(result.get())
</snippet></ROW><ROW><id>8300072</id><snippet>12:07:59:  True
12:08:04:  Timed out
</snippet></ROW><ROW><id>8300072</id><snippet>abc('some string',20)</snippet></ROW><ROW><id>8300222</id><snippet>collections.Counter</snippet></ROW><ROW><id>8300222</id><snippet>&gt;&gt;&gt; dictionary={'a':10,'b':20,'c':30,'d':5}
&gt;&gt;&gt; collections.Counter(dictionary).most_common(2)
[('c', 30), ('b', 20)]
</snippet></ROW><ROW><id>8300249</id><snippet>while 1:
    print "hello from stdout"
    sys.stdout.flush()
    print &gt;&gt; sys.stderr, "Hello from stderr"
    sleep(1)
</snippet></ROW><ROW><id>8300290</id><snippet>for translate in myVar:
</snippet></ROW><ROW><id>8300290</id><snippet>for translate in myVar.split():
</snippet></ROW><ROW><id>8300290</id><snippet>'123'</snippet></ROW><ROW><id>8300290</id><snippet>'1 2 3'</snippet></ROW><ROW><id>8300290</id><snippet>split</snippet></ROW><ROW><id>8300290</id><snippet>' '.join(myVar)
</snippet></ROW><ROW><id>8300767</id><snippet>class MultipleKeyDict(dict):
    __slots__ = ["_primary_keys"]
    def __init__(self, arg=None, **kwargs):
        self._primary_keys = {}
        self.update(arg, **kwargs)
    def __setitem__(self, key, value):
        super(MultipleKeyDict, self).__setitem__(key, value)
        self._primary_keys.setdefault(value, key)
    def __delitem__(self, key):
        value = self[key]
        super(MultipleKeyDict, self).__delitem__(key)
        if self._primary_keys[value] == key:
            del self._primary_keys[value]
            for k, v in super(MultipleKeyDict, self).iteritems():
                if v == value:
                    self._primary_keys[value] = k
                    break
    def __iter__(self):
        return self.iterkeys()
    def update(self, arg=None, **kwargs):
        if arg is not None:
            if isinstance(arg, collections.Mapping):
                for k in arg:
                    self[k] = arg[k]
            else:
                for k, v in arg:
                    self[k] = v
        for k in kwargs:
            self[k] = kwargs[k]
    def clear(self):
        super(MultipleKeyDict, self).clear()
        self._primary_keys.clear()
    def iteritems(self):
        for v, k in self._primary_keys.iteritems():
            yield k, v
    def items(self):
        return list(self.iteritems())
    def itervalues(self):
        return self._primary_keys.iterkeys()
    def values(self):
        return self._primary_keys.keys()
    def iterkeys(self):
        return self._primary_keys.itervalues()
    def keys(self):
        return self._primary_keys.values()
</snippet></ROW><ROW><id>8300767</id><snippet>copy()</snippet></ROW><ROW><id>8300767</id><snippet>pop()</snippet></ROW><ROW><id>8300767</id><snippet>popitem()</snippet></ROW><ROW><id>8300767</id><snippet>setdefault()</snippet></ROW><ROW><id>8300770</id><snippet>&gt;&gt;&gt; from string import Template
&gt;&gt;&gt; import uuid
&gt;&gt;&gt; def gen_uuid():
        return str(uuid.uuid4())

&gt;&gt;&gt; s = Template("insert ... values('$name', ${uuid});")
&gt;&gt;&gt; t = [s.substitute(name=name, uuid=gen_uuid()) for name in ('foo', 'bar', 'baz')]
&gt;&gt;&gt; print '\n'.join(t)
insert ... values('foo', ee1b1b21-c022-4de5-8f7c-0a4d0554ae49);
insert ... values('bar', 0b96872f-ab0e-48cf-a025-f997f7976a0e);
insert ... values('baz', 25165bb6-8b7b-4c87-9ce1-ca274fc51bc8);
</snippet></ROW><ROW><id>8300770</id><snippet>&gt;&gt;&gt; class UUID_Dict(dict):
        def __missing__(self, key):
            if key == 'uuid':
                 return str(uuid.uuid4())
            raise KeyError(key)


&gt;&gt;&gt; s = Template("""
insert ... values('foo', ${uuid});
insert ... values('bar', ${uuid});
insert ... values('baz', ${uuid});
""")
&gt;&gt;&gt; print s.substitute(UUID_Dict())

insert ... values('foo', eabc65b6-1294-43b7-9506-61a4e324e0f2);
insert ... values('bar', 93e4f0b7-7fa1-4e88-9696-e361da31358f);
insert ... values('baz', 503d34a3-17a4-4513-8ce0-b5efb70c94cc);
</snippet></ROW><ROW><id>8300843</id><snippet>pickle</snippet></ROW><ROW><id>8300843</id><snippet>pickle</snippet></ROW><ROW><id>8300896</id><snippet>msg.attach(MIMEText(text))
</snippet></ROW><ROW><id>8300896</id><snippet>msg.attach(MIMEText(text, 'html'))
</snippet></ROW><ROW><id>8301159</id><snippet>def add_helpfunc(obj):
    def helpfunc(self):
        """Nice readable docstring"""
        #code

    obj.helpfunc = helpfunc
</snippet></ROW><ROW><id>8301159</id><snippet>&gt;&gt;&gt; class A:
...     pass
...
&gt;&gt;&gt; add_helpfunc(A)
&gt;&gt;&gt; help(A.helpfunc)
Help on method helpfunc in module __main__:

helpfunc(self) unbound __main__.A method
    Nice readable docstring

&gt;&gt;&gt; help(A().helpfunc)
Help on method helpfunc in module __main__:

helpfunc(self) method of __main__.A instance
    Nice readable docstring
</snippet></ROW><ROW><id>8301329</id><snippet>sent = [word for line in f for word in line.lower().split()]
</snippet></ROW><ROW><id>8301329</id><snippet>itertools.chain.from_iterable()</snippet></ROW><ROW><id>8301539</id><snippet>http://yourdomain.com/images/image.jpg</snippet></ROW><ROW><id>8301749</id><snippet>open_list</snippet></ROW><ROW><id>8301749</id><snippet>open_list</snippet></ROW><ROW><id>8302601</id><snippet>for i in range(10):
    print i
    try:
       raise RuntimeError
    finally:
       continue        # if the loop continues, what would happen to the exception?
    print i
</snippet></ROW><ROW><id>8302601</id><snippet>try: ... except Exception: pass; continue</snippet></ROW><ROW><id>8302860</id><snippet>string</snippet></ROW><ROW><id>8302860</id><snippet>unicode</snippet></ROW><ROW><id>8302860</id><snippet>unicode()</snippet></ROW><ROW><id>8302860</id><snippet>u"this is a unicode string"</snippet></ROW><ROW><id>8302968</id><snippet>super(NewBatchForm, self).save</snippet></ROW><ROW><id>8302968</id><snippet>NewBatchForm</snippet></ROW><ROW><id>8302968</id><snippet>super(CreateSharedObjectForm, self)</snippet></ROW><ROW><id>8303033</id><snippet>self.label["text"] = "Total tries: 0",
</snippet></ROW><ROW><id>8303033</id><snippet>self.label["text"]</snippet></ROW><ROW><id>8303043</id><snippet>def sim(haystack, needle):
    if needle in haystack:
        return needle
</snippet></ROW><ROW><id>8303043</id><snippet>def sim(haystack, needle):
    index = haystack.index(needle) # throws ValueError when not found
    return (index, index + len(needle))
</snippet></ROW><ROW><id>8303261</id><snippet>t.forward(60)
</snippet></ROW><ROW><id>8303261</id><snippet>for a in range(4):
    t.forward(60)
    t.left(90)
</snippet></ROW><ROW><id>8303261</id><snippet>for col in range(8):
    for row in range(8):
        # draw a square here
</snippet></ROW><ROW><id>8303261</id><snippet>col</snippet></ROW><ROW><id>8303261</id><snippet>row</snippet></ROW><ROW><id>8303261</id><snippet>draw_square(row, col)</snippet></ROW><ROW><id>8303538</id><snippet>hashlib</snippet></ROW><ROW><id>8303561</id><snippet>return</snippet></ROW><ROW><id>8303561</id><snippet>yield</snippet></ROW><ROW><id>8303561</id><snippet>get_collection_iterator</snippet></ROW><ROW><id>8303561</id><snippet>return x</snippet></ROW><ROW><id>8303561</id><snippet>yield</snippet></ROW><ROW><id>8303561</id><snippet>return</snippet></ROW><ROW><id>8303683</id><snippet>import subprocess

p = subprocess.Popen("gzip -c &gt; zipped.gz", shell=True, stdin=subprocess.PIPE)
p.communicate("Hello World\n")
</snippet></ROW><ROW><id>8303683</id><snippet>stdin</snippet></ROW><ROW><id>8303683</id><snippet>import subprocess

p = subprocess.Popen("gzip -c &gt; zipped.gz", shell=True, stdin=subprocess.PIPE)
p.stdin.write("Some data")

# Write more data here...

p.communicate() # Finish writing data and wait for subprocess to finish
</snippet></ROW><ROW><id>8303816</id><snippet>IWebElement element = ...
String returnText = ((IJavaScriptExecutor)webDriver).ExecuteScript("return arguments[0].innerHTML", element).ToString();
</snippet></ROW><ROW><id>8303883</id><snippet>#!/usr/bin/env python
import gtk
class EntryDialog(gtk.MessageDialog):
    def __init__(self, *args, **kwargs):
        '''
        Creates a new EntryDialog. Takes all the arguments of the usual
        MessageDialog constructor plus one optional named argument 
        "default_value" to specify the initial contents of the entry.
        '''
        if 'default_value' in kwargs:
            default_value = kwargs['default_value']
            del kwargs['default_value']
        else:
            default_value = ''
        super(EntryDialog, self).__init__(*args, **kwargs)
        entry = gtk.Entry()        
        entry.set_text(str(default_value))
        entry.connect("activate", 
                      lambda ent, dlg, resp: dlg.response(resp), 
                      self, gtk.RESPONSE_OK)
        self.vbox.pack_end(entry, True, True, 0)
        self.vbox.show_all()
        self.entry = entry
    def set_value(self, text):
        self.entry.set_text(text)
    def run(self):
        result = super(EntryDialog, self).run()
        if result == gtk.RESPONSE_OK:
            text = self.entry.get_text()
        else:
            text = None
        return text
</snippet></ROW><ROW><id>8303883</id><snippet>run()</snippet></ROW><ROW><id>8303883</id><snippet>&lt;Enter&gt;</snippet></ROW><ROW><id>8303883</id><snippet>Cancel</snippet></ROW><ROW><id>8303883</id><snippet>&lt;Esc&gt;</snippet></ROW><ROW><id>8303883</id><snippet>run()</snippet></ROW><ROW><id>8303883</id><snippet>None</snippet></ROW><ROW><id>8303883</id><snippet>gtk.MessageDialog</snippet></ROW><ROW><id>8303940</id><snippet>referrer</snippet></ROW><ROW><id>8303940</id><snippet>detect_referral</snippet></ROW><ROW><id>8303940</id><snippet>detect_referral</snippet></ROW><ROW><id>8303940</id><snippet>class ArticleController(BaseController):
    def view(self):
        c.referral = self.detect_referral()
        return render('/article.mako')

    @staticmethod
    def detect_referral():
        return request.META.get('HTTP_REFERRER', '')
</snippet></ROW><ROW><id>8303943</id><snippet>$output = array();
exec("python hi.py", $output);
var_dump( $output);
</snippet></ROW><ROW><id>8304026</id><snippet>d = {}
for i in listofdict:
   d[i.pop('name')] = i
</snippet></ROW><ROW><id>8304026</id><snippet>{i.pop('name'): i for i in listofdict}
</snippet></ROW><ROW><id>8304064</id><snippet>0x040C</snippet></ROW><ROW><id>8304064</id><snippet>8BIM...New Win</snippet></ROW><ROW><id>8304077</id><snippet>class Info(db.Model):
    link = db.SelfReferenceProperty()
    val_1 = db.IntegerProperty()
    val_2 = db.IntegerProperty()
    ancestors = db.ListProperty(db.Key) #list of ancestor links

def updateLinked(cid):
    c = Info.get_by_id(int(cid))
    result = Info.all().filter('ancestors = ', c.key())
    for item in result:
        item.val_1 = c.val_1 + item.val_2
        item.put()
</snippet></ROW><ROW><id>8304342</id><snippet>atexit</snippet></ROW><ROW><id>8304657</id><snippet>JSON:</snippet></ROW><ROW><id>8304657</id><snippet>loads</snippet></ROW><ROW><id>8304657</id><snippet>{"password":"wfbarks","email":"wfbarks","username":"wfbarks"}</snippet></ROW><ROW><id>8304696</id><snippet>cid:&lt;filename used in your Content-Disposition header&gt;
</snippet></ROW><ROW><id>8304696</id><snippet>&lt;p&gt;
&lt;img src="cid:image1.jpeg"/&gt;
&lt;/p&gt;
</snippet></ROW><ROW><id>8304729</id><snippet>submitButton=driver.find_element_by_xpath("//input[@type='image'][@src='/images/buttons/loginnow.gif']")
submitButton.click()
</snippet></ROW><ROW><id>8304777</id><snippet>font = pygame.font.Font(None, 36)
text = font.render("Pummel The Chimp, And Win $$$", 1, (10, 10, 10))
textpos = text.get_rect(centerx=background.get_width()/2)
background.blit(text, textpos)
</snippet></ROW><ROW><id>8305291</id><snippet>b &lt;- b XOR 1</snippet></ROW><ROW><id>8305291</id><snippet>~x</snippet></ROW><ROW><id>8305291</id><snippet>(-x) - 1</snippet></ROW><ROW><id>8305291</id><snippet>~</snippet></ROW><ROW><id>8305291</id><snippet>operator.invert</snippet></ROW><ROW><id>8305291</id><snippet>__invert__(self)</snippet></ROW><ROW><id>8305291</id><snippet>&gt;&gt;&gt; import operator
&gt;&gt;&gt; class Foo:
...   def __invert__(self):
...     print 'invert'
...
&gt;&gt;&gt; x = Foo()
&gt;&gt;&gt; operator.invert(x)
invert
&gt;&gt;&gt; ~x
invert
</snippet></ROW><ROW><id>8305291</id><snippet>__invert__</snippet></ROW><ROW><id>8305291</id><snippet>'\xff'</snippet></ROW><ROW><id>8305385</id><snippet>from datetime import *

def convproxy(methods,converter):
    def f(cls):
        def _proxyfactory(method):
            def _convproxy(self,*args,**kwargs):
                return converter(getattr(super(cls,self),method)(*args,**kwargs))
            return _convproxy
        for m in methods:
            setattr(cls,m,_proxyfactory(m))
        return cls
    return f

@convproxy(('__add__','__sub__'),lambda d:mydatetime(d.timetuple()[:6]))
class mydatetime(datetime):
    pass

@convproxy(('__add__','__sub__','__div__','__rmul__','__mul__'),\
        lambda t:mytimetuple(t.days,t.seconds))
class mytimedelta(timedelta):
    pass
</snippet></ROW><ROW><id>8305385</id><snippet>convproxy</snippet></ROW><ROW><id>8305512</id><snippet>glibc</snippet></ROW><ROW><id>8305512</id><snippet>catchsegv</snippet></ROW><ROW><id>8305512</id><snippet>libSegFault.so</snippet></ROW><ROW><id>8305512</id><snippet>segv_handler</snippet></ROW><ROW><id>8305512</id><snippet>SIGSEGV</snippet></ROW><ROW><id>8305512</id><snippet>SIGABRT</snippet></ROW><ROW><id>8305512</id><snippet>gstack</snippet></ROW><ROW><id>8305512</id><snippet>gdb</snippet></ROW><ROW><id>8305541</id><snippet>my_dict2 = dict((y,x) for x,y in my_dict.iteritems())
</snippet></ROW><ROW><id>8305541</id><snippet>my_dict2 = {y:x for x,y in my_dict.iteritems()}
</snippet></ROW><ROW><id>8305541</id><snippet>items</snippet></ROW><ROW><id>8305541</id><snippet>iteritems</snippet></ROW><ROW><id>8305602</id><snippet>py-appscript</snippet></ROW><ROW><id>8305602</id><snippet>py-appscript</snippet></ROW><ROW><id>8305602</id><snippet>appscript</snippet></ROW><ROW><id>8305602</id><snippet>AppleScript Editor.app</snippet></ROW><ROW><id>8305602</id><snippet>Script Editor</snippet></ROW><ROW><id>8305602</id><snippet>py-appscript</snippet></ROW><ROW><id>8305602</id><snippet>application</snippet></ROW><ROW><id>8305602</id><snippet>py-appscript</snippet></ROW><ROW><id>8305602</id><snippet>&gt;&gt;&gt; from appscript import *
&gt;&gt;&gt; it = app('iTunes')   # the "application" object
&gt;&gt;&gt; it.player_state()    # access properties of the "application" object
k.playing
&gt;&gt;&gt; it.player_position() #   (calling the property "( )" implies a "get" action)
1958
&gt;&gt;&gt; it.player_position()
1961
&gt;&gt;&gt; it.current_track.artist()
u'Bavarian Radio Symphony Orchestra'
</snippet></ROW><ROW><id>8305670</id><snippet>def myMethod(myVar):
    if isinstance(myVar, list):
        for i in range(len(myVar)):
            # do stuff
    else:
        # do stuff
</snippet></ROW><ROW><id>8306314</id><snippet>pip install httplib2
</snippet></ROW><ROW><id>8306314</id><snippet>sudo apt-get install python-httplib2
</snippet></ROW><ROW><id>8306355</id><snippet>globals().update(vars(args))
</snippet></ROW><ROW><id>8306355</id><snippet>def foo(args):
   locals().update(vars(args))       
   print a, b, c
   return
   exec ""  # forces Python to use a dict for all local vars
            # does not need to ever be executed!  but assigning
            # to locals() won't work otherwise.
</snippet></ROW><ROW><id>8306355</id><snippet>exec</snippet></ROW><ROW><id>8306355</id><snippet>args</snippet></ROW><ROW><id>8306457</id><snippet>django.core.urlresolvers.reverse</snippet></ROW><ROW><id>8306457</id><snippet>args</snippet></ROW><ROW><id>8306457</id><snippet>kwargs</snippet></ROW><ROW><id>8306457</id><snippet>reverse(viewname[, urlconf=None, args=None, kwargs=None, current_app=None])
</snippet></ROW><ROW><id>8306457</id><snippet>from django.core.urlresolvers import reverse

def myview(request):
    return HttpResponseRedirect(reverse('arch-summary', args=[1945]))
</snippet></ROW><ROW><id>8306484</id><snippet>[get_object_or_404(Animal, pk=1),]
</snippet></ROW><ROW><id>8306484</id><snippet>my_obj = deserialize()[0]
</snippet></ROW><ROW><id>8306507</id><snippet>from django.db.models import Count
Checkins.objects.filter(user=my_user).annotate(chkn_count=Count('location')).order_by('-chkn_count')
</snippet></ROW><ROW><id>8306508</id><snippet>restype = c_void_p</snippet></ROW><ROW><id>8306508</id><snippet>class DOODLE(Structure):
    _fields_ = [('ptr', c_void_p)]
_libintpointer.C_intpointerfunction.restype = DOODLE
</snippet></ROW><ROW><id>8306608</id><snippet>i</snippet></ROW><ROW><id>8306608</id><snippet>itertools.tee</snippet></ROW><ROW><id>8306658</id><snippet>set</snippet></ROW><ROW><id>8306658</id><snippet>list2 = list(set(list2) - set(list1))
</snippet></ROW><ROW><id>8306658</id><snippet>list1</snippet></ROW><ROW><id>8306658</id><snippet>list2</snippet></ROW><ROW><id>8306658</id><snippet>set</snippet></ROW><ROW><id>8306692</id><snippet>&gt;&gt;&gt; from itertools import permutations
&gt;&gt;&gt; perms = [''.join(p) for p in permutations('stack')]
&gt;&gt;&gt; perms
</snippet></ROW><ROW><id>8306692</id><snippet>set</snippet></ROW><ROW><id>8306692</id><snippet>&gt;&gt;&gt; perms = [''.join(p) for p in permutations('stacks')]
&gt;&gt;&gt; len(perms)
720
&gt;&gt;&gt; len(set(perms))
360
</snippet></ROW><ROW><id>8306692</id><snippet>set()</snippet></ROW><ROW><id>8307016</id><snippet>import os
import ConfigParser
from Tkinter import *
import Tkinter as tk
import os
import ttk 
os.system('echo OS ready')
os.system('chmod 755 *')
import subprocess
from subprocess import call
import sys

os.system('rm stdout')

#Creating new Window to display output 
t = Tk()
t.title('output Run Display')
t.geometry('100x100')
t.state('normal')
little = Label(t, text="NRUNTEST OUTPUT LOG").grid(column = 0, row = 0)
log = Text(t, state='disabled', width=50, height=50, wrap='none')
log.grid(row = 1, column = 0,sticky=(N,W,E,S))
s = ttk.Scrollbar(t,orient=VERTICAL,command=log.yview)
s.grid(column=1,row=1,sticky=(N,S))
log.configure(yscrollcommand=s.set)
ttk.Sizegrip().grid(column=1, row=1, sticky=(S,E))

with open("stdout","wb") as out:
    with open("stderr","wb") as err:
        test=subprocess.Popen('tem',shell=True,stdout=out,stderr=err)
fout = open('stdout','r')
ferr = open('stderr','r') 
def verify():

    data_out = fout.readlines()
    data_out = ''.join(data_out)

    log['state'] = 'normal'
    log.insert('end',data_out)
    log['state'] = 'disabled'
    #print data_out

    t.after(1000,verify)
    fout.close()

verify()

t.mainloop()
</snippet></ROW><ROW><id>8307090</id><snippet>import csv
with open('datafile.txt', 'rb') as f:
    for row in csv.reader(f, delimiter='|'):
        ...
</snippet></ROW><ROW><id>8307323</id><snippet>Session.expunge()</snippet></ROW><ROW><id>8307323</id><snippet>delete()</snippet></ROW><ROW><id>8307323</id><snippet>delete()</snippet></ROW><ROW><id>8307323</id><snippet>Session.query()</snippet></ROW><ROW><id>8307323</id><snippet>delete()</snippet></ROW><ROW><id>8307323</id><snippet>delete()</snippet></ROW><ROW><id>8307323</id><snippet>rollback()</snippet></ROW><ROW><id>8307323</id><snippet>add()</snippet></ROW><ROW><id>8307361</id><snippet>from django.db.backends.signals import connection_created
from django.dispatch import receiver

@receiver(connection_created)
def extend_sqlite(connection=None, **kwargs):
    connection.connection.create_function("least", 2, min)
    connection.connection.create_function("greatest", 2, max)
</snippet></ROW><ROW><id>8307361</id><snippet>connection.vendor == "sqlite"</snippet></ROW><ROW><id>8307362</id><snippet>import facebook as fb  
graph = fb.GraphAPI(access_token)  
profile = graph.get_object("me")  
# if you want to get the user's profile picture (you need to have the session UID)  
profile.update({"picture": "http://graph.facebook.com/%s/picture?type=large" % uid})  
</snippet></ROW><ROW><id>8307639</id><snippet>class Foo():
     ...

vars=('tx', 'ty', 'tz')  # plus plenty more
for v in vars:
    setattr(Foo, v, 0)
</snippet></ROW><ROW><id>8307661</id><snippet>def module_config(mod):
    '''Loads the config residing next to the module.'''
    import configparser, os.path
    cp = configparser.ConfigParser()
    cp.read_file(open(os.path.splitext(mod.__file__)[0] + '.conf'))
    return cp

# load config for some module
import some_module
module_config(some_module)

# load config for current module
module_config(sys.modules(__name__))
</snippet></ROW><ROW><id>8307669</id><snippet>from wx.lib.pubsub import Publisher
Publisher().subscribe(update_function, 'update') # Params: callback, event name
</snippet></ROW><ROW><id>8307669</id><snippet>CallAfter</snippet></ROW><ROW><id>8307669</id><snippet># Will trigger 'update_function' with argument 'My message'
wx.CallAfter(Publisher().sendMessage, 'update', 'My message')
</snippet></ROW><ROW><id>8307733</id><snippet>product = qa.id
</snippet></ROW><ROW><id>8307733</id><snippet>product = qa
</snippet></ROW><ROW><id>8308165</id><snippet>PyArg_ParseTuple</snippet></ROW><ROW><id>8308165</id><snippet>PyArg_ParseTuple</snippet></ROW><ROW><id>8308165</id><snippet>static PyObject *
_sayhello_obj(PyObject *self, PyObject *args)
{
  PyObject *obj = NULL;
  // How can I fill obj?

  static char fmt_string = "O" // For "object"

  int parse_result = PyArg_ParseTuple(args, fmt_string, &amp;obj);

  if(!parse_res)
  {
    // Don't worry about using PyErr_SetString, all the exception stuff should be
    // done in PyArg_ParseTuple()
    return NULL;
  }

  // Of course, at this point you need to do your own verification of whatever
  // constraints might be on your argument.
</snippet></ROW><ROW><id>8308165</id><snippet>PyObject_CallMethod</snippet></ROW><ROW><id>8308165</id><snippet>PyObject_CallMethodObjArgs</snippet></ROW><ROW><id>8308165</id><snippet>PyObject_Print</snippet></ROW><ROW><id>8308165</id><snippet>  char s[1024];
  // How can I fill s, from obj.getName() ?

  // Name of the method
  static char method_name = "getName";
  // No arguments? Score! We just need NULL here
  char method_fmt_string = NULL;

  PyObject *objname = PyObject_CallMethod(obj, obj_method, method_fmt_string);
  // This is really important! What we have here now is a Python object with a newly
  // incremented reference count! This means you own it, and are responsible for
  // decrementing the ref count when you're done. See below.

  // If there's a failure, we'll get NULL
  if(objname == NULL)
  {
    // Again, this should just propagate the exception information
    return NULL;
  }
</snippet></ROW><ROW><id>8308165</id><snippet>  // Now that we're done with the object we obtained, decrement the reference count
  Py_XDECREF(objname);

  // You didn't mention whether you wanted to return a value from here, so let's just
  // return the "None" singleton.
  // Note: this macro includes the "return" statement!
  Py_RETURN_NONE;
}
</snippet></ROW><ROW><id>8308165</id><snippet>Py_RETURN_NONE</snippet></ROW><ROW><id>8308165</id><snippet>return Py_RETURN_NONE</snippet></ROW><ROW><id>8308165</id><snippet>static char</snippet></ROW><ROW><id>8308165</id><snippet>NULL</snippet></ROW><ROW><id>8308189</id><snippet>&gt;&gt;&gt; import mechanize
&gt;&gt;&gt; br = mechanize.Browser()
&gt;&gt;&gt; br.open("http://www.htmlcodetutorial.com/linking/linking_famsupp_114.html")
&lt;response_seek_wrapper at 0x2b4b238 (...)&gt;
&gt;&gt;&gt; _, f = br.forms()                      # Select second form
&gt;&gt;&gt; c = f.find_control('gourl')            # Select dropdown control
&gt;&gt;&gt; c.set_value_by_label(['Idocs.com'])    # Select the item with this label
</snippet></ROW><ROW><id>8308189</id><snippet>&gt;&gt;&gt; c.items[2]._selected
True
&gt;&gt;&gt; c.set_value_by_label(['Ninth Wonder'])
&gt;&gt;&gt; c.items[2]._selected
False
</snippet></ROW><ROW><id>8308299</id><snippet>itertools</snippet></ROW><ROW><id>8308299</id><snippet>&gt;&gt;&gt; parts = s.split(designatedstring)
&gt;&gt;&gt; num = len(parts) - 1
&gt;&gt;&gt; replacements = itertools.product([designatedstring, replacerstring], repeat=num)
&gt;&gt;&gt; replacements = list(replacements)
&gt;&gt;&gt; replacements.remove((designatedstring,) * num)
&gt;&gt;&gt; for r in replacements:
...     print ''.join(itertools.chain(*zip(parts, r + ('',))))
...
thrupought
throughput
throughpought
</snippet></ROW><ROW><id>8308367</id><snippet>import wx
from wx.lib.stattext import GenStaticText as StaticText

if wx.Platform == "__WXMAC__":
    from Carbon.Appearance import kThemeBrushDialogBackgroundActive


class EllipticStaticText(StaticText):

    def __init__(self, parent, id=wx.ID_ANY, label='', pos=wx.DefaultPosition, size=wx.DefaultSize,
                 style=0, name="ellipticstatictext"):
        """
        Default class constructor.

        :param `parent`: the L{EllipticStaticText} parent. Must not be ``None``;
        :param `id`: window identifier. A value of -1 indicates a default value;
        :param `label`: the text label;
        :param `pos`: the control position. A value of (-1, -1) indicates a default position,
         chosen by either the windowing system or wxPython, depending on platform;
        :param `size`: the control size. A value of (-1, -1) indicates a default size,
         chosen by either the windowing system or wxPython, depending on platform;
        :param `style`: the static text style;
        :param `name`: the window name.
        """

        StaticText.__init__(self, parent, id, label, pos, size, style, name)

        self.Bind(wx.EVT_SIZE, self.OnSize)
        self.Bind(wx.EVT_PAINT, self.OnPaint)
        self.Bind(wx.EVT_ERASE_BACKGROUND, self.OnEraseBackground)


    def OnSize(self, event):
        """
        Handles the ``wx.EVT_SIZE`` event for L{EllipticStaticText}.

        :param `event`: a `wx.SizeEvent` event to be processed.
        """

        event.Skip()
        self.Refresh()


    def OnEraseBackground(self, event):
        """
        Handles the ``wx.EVT_ERASE_BACKGROUND`` event for L{EllipticStaticText}.

        :param `event`: a `wx.EraseEvent` event to be processed.

        :note: This is intentionally empty to reduce flicker.
        """

        pass


    def OnPaint(self, event):
        """
        Handles the ``wx.EVT_PAINT`` event for L{EllipticStaticText}.

        :param `event`: a `wx.PaintEvent` to be processed.
        """

        dc = wx.BufferedPaintDC(self)        
        width, height = self.GetClientSize()

        if not width or not height:
            return

        clr = self.GetBackgroundColour()

        if wx.Platform == "__WXMAC__":
            # if colour is still the default then use the theme's  background on Mac
            themeColour = wx.MacThemeColour(kThemeBrushDialogBackgroundActive)
            backBrush = wx.Brush(themeColour)
        else:
            backBrush = wx.Brush(clr, wx.SOLID)

        dc.SetBackground(backBrush)
        dc.Clear()

        if self.IsEnabled():
            dc.SetTextForeground(self.GetForegroundColour())
        else:
            dc.SetTextForeground(wx.SystemSettings.GetColour(wx.SYS_COLOUR_GRAYTEXT))

        dc.SetFont(self.GetFont())

        label = self.GetLabel()
        text = self.ChopText(dc, label, width)

        dc.DrawText(text, 0, 0)


    def ChopText(self, dc, text, max_size):
        """
        Chops the input `text` if its size does not fit in `max_size`, by cutting the
        text and adding ellipsis at the end.

        :param `dc`: a `wx.DC` device context;
        :param `text`: the text to chop;
        :param `max_size`: the maximum size in which the text should fit.
        """

        # first check if the text fits with no problems
        x, y = dc.GetTextExtent(text)

        if x &lt;= max_size:
            return text

        textLen = len(text)
        last_good_length = 0

        for i in xrange(textLen, -1, -1):
            s = text[0:i]
            s += "..."

            x, y = dc.GetTextExtent(s)
            last_good_length = i

            if x &lt; max_size:
                break

        ret = text[0:last_good_length] + "..."    
        return ret


    def Example():

        app = wx.PySimpleApp()
        frame = wx.Frame(None, -1, "EllipticStaticText example ;-)", size=(400, 300))

        panel = wx.Panel(frame, -1)
        sizer = wx.BoxSizer(wx.VERTICAL)

        elliptic = EllipticStaticText(panel, -1, r"F:\myreservoir\re\util\python\hm_evaluation\data\HM_Evaluation_0.9.9.7.exe")
        whitePanel = wx.Panel(panel, -1)
        whitePanel.SetBackgroundColour(wx.WHITE)

        sizer.Add(elliptic, 0, wx.ALL|wx.EXPAND, 10)
        sizer.Add(whitePanel, 1, wx.ALL|wx.EXPAND, 10)

        panel.SetSizer(sizer)
        sizer.Layout()

        frame.CenterOnScreen()
        frame.Show()

        app.MainLoop()


    if __name__ == "__main__":

        Example()
</snippet></ROW><ROW><id>8308429</id><snippet>response = self.connection.retr(i+1)
raw_message = response[1]
</snippet></ROW><ROW><id>8308429</id><snippet>raw_message</snippet></ROW><ROW><id>8308429</id><snippet>str(raw_message)</snippet></ROW><ROW><id>8308429</id><snippet>str_message = email.message_from_string(str(raw_message))
</snippet></ROW><ROW><id>8308429</id><snippet>str_message = email.message_from_string("\n".join(raw_message))
</snippet></ROW><ROW><id>8308429</id><snippet>str_message = email.message_from_bytes(b'\n'.join(raw_message))
</snippet></ROW><ROW><id>8308429</id><snippet>import poplib
import email
import os

class GmailTest(object):
    def __init__(self):
        self.savedir="/tmp"

    def test_save_attach(self):
        self.connection = poplib.POP3_SSL('pop.gmail.com', 995)
        self.connection.set_debuglevel(1)
        self.connection.user("&lt;munged&gt;")
        self.connection.pass_("&lt;munged&gt;")

        emails, total_bytes = self.connection.stat()
        print("{0} emails in the inbox, {1} bytes total".format(emails, total_bytes))
        # return in format: (response, ['mesg_num octets', ...], octets)
        msg_list = self.connection.list()
        print(msg_list)

        # messages processing
        for i in range(emails):

            # return in format: (response, ['line', ...], octets)
            response = self.connection.retr(i+1)
            raw_message = response[1]

            str_message = email.message_from_bytes(b'\n'.join(raw_message))

            # save attach
            for part in str_message.walk():
                print(part.get_content_type())

                if part.get_content_maintype() == 'multipart':
                    continue

                if part.get('Content-Disposition') is None:
                    print("no content dispo")
                    continue

                filename = part.get_filename()
                if not(filename): filename = "test.txt"
                print(filename)

                fp = open(os.path.join(self.savedir, filename), 'wb')
                fp.write(part.get_payload(decode=1))
                fp.close

        #I  exit here instead of pop3lib quit to make sure the message doesn't get removed in gmail
        import sys
        sys.exit(0)

d=GmailTest()
d.test_save_attach()
</snippet></ROW><ROW><id>8308429</id><snippet>python3 thetest.py
*cmd* 'USER &lt;munged&gt;'
*cmd* 'PASS &lt;munged&gt;'
*cmd* 'STAT'
*stat* [b'+OK', b'2', b'152928']
2 emails in the inbox, 152928 bytes total
*cmd* 'LIST'
(b'+OK 2 messages (152928 bytes)', [b'1 76469', b'2 76459'], 18)
*cmd* 'RETR 1'
multipart/mixed
text/plain
test.txt
application/pdf
ADDFILE_0.pdf
*cmd* 'RETR 2'
multipart/mixed
text/plain
test.txt
application/pdf
ADDFILE_0.pdf
</snippet></ROW><ROW><id>8308593</id><snippet>pip install gunicorn 
gunicorn --workers=2 /home/myapp/env/pyramid.wsgi:app
</snippet></ROW><ROW><id>8308691</id><snippet>&lt;script type=text/javascript&gt;
    if (!window._EXAMPLE_HTML_) {
        window._EXAMPLE_HTML_ = true;
        // your code goes here
    }
&lt;/script&gt;
</snippet></ROW><ROW><id>8309441</id><snippet>pos = mylist.index(max(mylist))
</snippet></ROW><ROW><id>8309481</id><snippet>grid()</snippet></ROW><ROW><id>8309481</id><snippet>pack()</snippet></ROW><ROW><id>8309481</id><snippet>mainGUI</snippet></ROW><ROW><id>8309481</id><snippet>compound</snippet></ROW><ROW><id>8309702</id><snippet>import functools

def wrap_method(cls, name):
    # This unbound method will be pulled from the superclass.
    wrapped = getattr(cls, name)
    @functools.wraps(wrapped)
    def wrapper(self, *args, **kwargs):
        return self._in(wrapped.__get__(self, cls), *args, **kwargs)
    return wrapper

def wrap_methods(cls):
    for name in cls.WRAP_ATTRS:
        setattr(cls, name, wrap_method(cls, name))
    return cls

@wrap_methods
class my_socket(parent_class):
    WRAP_ATTRS = ['recv', 'recvfrom'] # ... + more method names

    def _in(self, method, *args, **kwargs):
        # do funky stuff
</snippet></ROW><ROW><id>8310065</id><snippet>set_flair</snippet></ROW><ROW><id>8310065</id><snippet>@require_login
def set_flair(self, subreddit, user, text='', css_class=''):
    """Set flair of user in given subreddit"""
    url = urls["flair"]
    params = {'r': subreddit,
              'name': user,
              'text': text,
              'css_class': css_class,
              'uh': self.user.modhash}
    return self._request_json(url, params)
</snippet></ROW><ROW><id>8310065</id><snippet>.error.USER_REQUIRED</snippet></ROW><ROW><id>8310065</id><snippet>self.modhash</snippet></ROW><ROW><id>8310065</id><snippet>self.user.modhash</snippet></ROW><ROW><id>8310065</id><snippet>.error.NO_USER.field-name</snippet></ROW><ROW><id>8310065</id><snippet>user</snippet></ROW><ROW><id>8310065</id><snippet>name</snippet></ROW><ROW><id>8310359</id><snippet>WSGIApplicationGroup %{GLOBAL}
</snippet></ROW><ROW><id>8310678</id><snippet>ManyRelatedManager</snippet></ROW><ROW><id>8310678</id><snippet>all()</snippet></ROW><ROW><id>8310678</id><snippet>{{song_list.artist.all}}</snippet></ROW><ROW><id>8310740</id><snippet>tail -f</snippet></ROW><ROW><id>8311290</id><snippet>==</snippet></ROW><ROW><id>8311290</id><snippet>operator.eq</snippet></ROW><ROW><id>8311290</id><snippet>list.__eq__</snippet></ROW><ROW><id>8311290</id><snippet>__eq__</snippet></ROW><ROW><id>8311290</id><snippet>float.__eq__</snippet></ROW><ROW><id>8311302</id><snippet>cmd.append(format % (colours[tmpword]+fgoffset))</snippet></ROW><ROW><id>8311302</id><snippet>cmd</snippet></ROW><ROW><id>8311302</id><snippet>format</snippet></ROW><ROW><id>8311302</id><snippet>(colours[tmpword]+fgoffset))</snippet></ROW><ROW><id>8311302</id><snippet>tmpword</snippet></ROW><ROW><id>8311302</id><snippet>fgoffset</snippet></ROW><ROW><id>8311302</id><snippet>format</snippet></ROW><ROW><id>8311302</id><snippet>'1;%dm'</snippet></ROW><ROW><id>8311302</id><snippet>%</snippet></ROW><ROW><id>8311302</id><snippet>fgoffset</snippet></ROW><ROW><id>8311302</id><snippet>c=format % attrs[tmpword] if tmpword in attrs else None</snippet></ROW><ROW><id>8311302</id><snippet>if</snippet></ROW><ROW><id>8311302</id><snippet>expr?:val1: val2</snippet></ROW><ROW><id>8311302</id><snippet>%</snippet></ROW><ROW><id>8311302</id><snippet>c= (format % attrs[tmpword]) if tmpword in attrs else  ''</snippet></ROW><ROW><id>8311441</id><snippet>import sys
sys.stderr.write("Equivalent message here\n")
</snippet></ROW><ROW><id>8311441</id><snippet>import sys
sys.stdout.write("Equivalent message here\n")
sys.stdout.flush()
</snippet></ROW><ROW><id>8311498</id><snippet>FLANN_INDEX_KDTREE = 1  # bug: flann enums are missing

flann_params = dict(algorithm = FLANN_INDEX_KDTREE,
                    trees = 4)

def match_flann(desc1, desc2, r_threshold = 0.6):
    flann = cv2.flann_Index(desc2, flann_params)
    idx2, dist = flann.knnSearch(desc1, 2, params = {}) # bug: need to provide empty dict
    mask = dist[:,0] / dist[:,1] &lt; r_threshold
    idx1 = np.arange(len(desc1))
    pairs = np.int32( zip(idx1, idx2[:,0]) )
    return pairs[mask]
</snippet></ROW><ROW><id>8311526</id><snippet>__enter__()</snippet></ROW><ROW><id>8311526</id><snippet>__exit__()</snippet></ROW><ROW><id>8311526</id><snippet>DaemonContext</snippet></ROW><ROW><id>8311526</id><snippet>open()</snippet></ROW><ROW><id>8311526</id><snippet>close()</snippet></ROW><ROW><id>8311526</id><snippet>with daemon.DaemonContext():
    do_main_program()
</snippet></ROW><ROW><id>8311526</id><snippet>context = daemon.DaemonContext()
context.open()
try:
    do_main_program()
finally:
    context.close()
</snippet></ROW><ROW><id>8311526</id><snippet>reversed()</snippet></ROW><ROW><id>8311778</id><snippet>pythonw script.py|more</snippet></ROW><ROW><id>8311951</id><snippet>csv</snippet></ROW><ROW><id>8311951</id><snippet>skipinitialspace=True</snippet></ROW><ROW><id>8311951</id><snippet>&gt;&gt;&gt; s = StringIO.StringIO('1, "text1,text2", "text3, text4", a, b, c')
&gt;&gt;&gt; list(csv.reader(s, skipinitialspace=True))
[['1', 'text1,text2', 'text3, text4', 'a', 'b', 'c']]
</snippet></ROW><ROW><id>8312075</id><snippet># send to emailname@example.com
emailname: "|/path/to/script.py"
</snippet></ROW><ROW><id>8312075</id><snippet>email.FeedParser</snippet></ROW><ROW><id>8312075</id><snippet># Read from STDIN into array of lines.
email_input = sys.stdin.readlines()

# email.FeedParser.feed() expects to receive lines one at a time
# msg holds the complete email Message object
parser = email.FeedParser.FeedParser()
msg = None
for msg_line in email_input:
   parser.feed(msg_line)
msg = parser.close()
</snippet></ROW><ROW><id>8312075</id><snippet>msg</snippet></ROW><ROW><id>8312075</id><snippet>email.Message</snippet></ROW><ROW><id>8312075</id><snippet>email.Message.get("Header")</snippet></ROW><ROW><id>8312075</id><snippet>Header</snippet></ROW><ROW><id>8312683</id><snippet>$ python
Python 2.7.1 (r271:86832, Jun 16 2011, 16:59:05) 
[GCC 4.2.1 (Based on Apple Inc. build 5658) (LLVM build 2335.15.00)] on darwin
Type "help", "copyright", "credits" or "license" for more information.
&gt;&gt;&gt; import objc
&gt;&gt;&gt; objc.__version__
'2.3.2a0'
&gt;&gt;&gt; 
</snippet></ROW><ROW><id>8312792</id><snippet>pdb.gimp_edit_copy (original_layer)

floating = pdb.gimp_edit_paste (target_layer)
</snippet></ROW><ROW><id>8312792</id><snippet>pdb.gimp_floating_sel_anchor(float)
</snippet></ROW><ROW><id>8312792</id><snippet>pdb.gimp_floating_sel_to_layer(float)
</snippet></ROW><ROW><id>8312792</id><snippet>new_layer</snippet></ROW><ROW><id>8313032</id><snippet>CURRENT_DATE</snippet></ROW><ROW><id>8313032</id><snippet>'CURRENT_DATE'</snippet></ROW><ROW><id>8313032</id><snippet>UPDATE cw_ImportLog SET cw_import_date = current_date;
</snippet></ROW><ROW><id>8313032</id><snippet>now</snippet></ROW><ROW><id>8313268</id><snippet>;</snippet></ROW><ROW><id>8313268</id><snippet>tokenize</snippet></ROW><ROW><id>8313268</id><snippet>bigram</snippet></ROW><ROW><id>8313268</id><snippet>from itertools import tee, izip

def bigrams(iterable):
    a, b = tee(iterable)
    next(b, None)
    return izip(a, b)

with open("data.txt", 'r') as f:
    for line in f:
        words = line.strip().split()
        uni = words
        bi = bigrams(words)
        print uni
        print list(bi)
</snippet></ROW><ROW><id>8313321</id><snippet>ObjectName.SetLabel(Message)
</snippet></ROW><ROW><id>8313321</id><snippet>wx.CallAfter(ObjectName.SetLabel, Message)
</snippet></ROW><ROW><id>8313481</id><snippet>dict.get()</snippet></ROW><ROW><id>8313481</id><snippet>fieldA = [obj.get("fieldA", "missing") for obj in json["objects"]]
</snippet></ROW><ROW><id>8313481</id><snippet>["key"]</snippet></ROW><ROW><id>8313481</id><snippet>.key</snippet></ROW><ROW><id>8313522</id><snippet>class InvoiceAdmin(admin.ModelAdmin):
    inlines = [
        SoldItemAdmin,
    ]

    def response_add(self, request, new_object):
        obj = self.after_saving_model_and_related_inlines(new_object)
        return super(InvoiceAdmin, self).response_add(request, obj)

    def response_change(self, request, obj):
        obj = self.after_saving_model_and_related_inlines(obj)
        return super(InvoiceAdmin, self).response_change(request, obj)

    def after_saving_model_and_related_inlines(self, obj):
        solditem_changed.send(obj)
        return obj
</snippet></ROW><ROW><id>8313522</id><snippet>solditem_changed = Signal()
@receiver(solditem_changed)
def update_invoice(sender, **kwargs):
    if hasattr(sender, 'solditem_set'):
        total = 0
        for item in sender.solditem_set.all():
            total += item.item.price * item.qty
        sender.amount = total
        sender.save()
    else:
        sender.amount = 0
        sender.save()
</snippet></ROW><ROW><id>8313562</id><snippet>def printTotals(transferred, toBeTransferred):
    print "Transferred: {0}\tStill to send: {1}".format(transferred, toBeTransferred)

sftp.put("myfile","myRemoteFile",callback=printTotals)
</snippet></ROW><ROW><id>8313754</id><snippet>streamplot</snippet></ROW><ROW><id>8313754</id><snippet>numpy</snippet></ROW><ROW><id>8313754</id><snippet>scipy</snippet></ROW><ROW><id>8313754</id><snippet>scipy</snippet></ROW><ROW><id>8313754</id><snippet>numpy</snippet></ROW><ROW><id>8313754</id><snippet>import matplotlib.pyplot as plt
import numpy as np
from streamplot import streamplot

x = np.linspace(-3,3,100)
y = np.linspace(-3,3,100)
u = -1-x**2+y[:,np.newaxis]
v = 1+x-y[:,np.newaxis]**2
speed = np.sqrt(u*u + v*v)

plt.figure()
plt.subplot(121)
streamplot(x, y, u, v, density=1, INTEGRATOR='RK4', color='b')
plt.subplot(122)
streamplot(x, y, u, v, density=(1,1), INTEGRATOR='RK4', color=u,
           linewidth=5*speed/speed.max())
plt.show()
</snippet></ROW><ROW><id>8313754</id><snippet>VTK</snippet></ROW><ROW><id>8313754</id><snippet>mayavi.mlab.flow</snippet></ROW><ROW><id>8313797</id><snippet>class MarshalServlet(RequestHandler):
  """ This class is part of your frontend. """
  def post(self, instance, backend):
    # generate an urlfetch request to http[s]?://instance.backend.appid.appspot.com
    # and return its result.
    # (left as an exercise for the reader)

# add a "dashboard" handler to your frontend application.
app = webapp.WSGIApplication([('/dashboard/', MarshalServlet),
                               # other servlets etc.
                             ], debug=True)
</snippet></ROW><ROW><id>8313797</id><snippet>$.getJSON("http://instance.backend.appid.appspot.com/dashboard/", function() {
  alert("success");
});
</snippet></ROW><ROW><id>8314327</id><snippet>libpython2</snippet></ROW><ROW><id>8314608</id><snippet>lazy</snippet></ROW><ROW><id>8314608</id><snippet>lazy=’select’ – specifies how the related items should be loaded. Default value is select. Values include:
    ...
    noload - no loading should occur at any time. This is to support “write-only” attributes, or attributes which are populated in some manner specific to the application.
    ...
    True - a synonym for ‘select’
    False - a synonyn for ‘joined’
    None - a synonym for ‘noload’
</snippet></ROW><ROW><id>8314608</id><snippet>lazy=None</snippet></ROW><ROW><id>8314608</id><snippet>immediate, joined or subquery</snippet></ROW><ROW><id>8314608</id><snippet>lst = (session.query(Parent).with_polymorphic('*').
    options(eagerload('fubar')).all()) # confused if it is "fubar" or "ref"
</snippet></ROW><ROW><id>8314615</id><snippet>c_char*256</snippet></ROW><ROW><id>8314615</id><snippet>c_char_p*256</snippet></ROW><ROW><id>8314615</id><snippet>char[256]</snippet></ROW><ROW><id>8314615</id><snippet>char *[256]</snippet></ROW><ROW><id>8314615</id><snippet>&lt;a href="http://docs.python.org/library/ctypes.html#ctypes.string_at" rel="nofollow"&gt;string_at&lt;/a&gt;(theGroupName, sizeof(theGroupName))</snippet></ROW><ROW><id>8314667</id><snippet>DOUBLE(11,9)</snippet></ROW><ROW><id>8314667</id><snippet>VARCHAR(21)</snippet></ROW><ROW><id>8314667</id><snippet>FROM_UNIXTIME(1322485992.420381000)</snippet></ROW><ROW><id>8314667</id><snippet>float(result)</snippet></ROW><ROW><id>8314858</id><snippet>int main()
{
   setuid( 0 );
   system( "/path/to/script.sh" );

   return 0;
}
</snippet></ROW><ROW><id>8315221</id><snippet>def listFiles(dir):
    rootdir = dir
    for root, subFolders, files in os.walk(rootdir):
        for file in files:
            yield os.path.join(root,file)
    return


for f in listFiles(r"Your Path"):
    if f[-1].isalpha():
        os.rename(f,f[:-1]+f[-1].lower())
        print "Renamed " + f + "to" + f[:-1]+f[-1].lower()
</snippet></ROW><ROW><id>8315221</id><snippet>for fname in listFiles(r"Your Path"):
        newName=re.match("(^.*?)([A-Za-z\.]*$)",x)
        newName=''.join([newName[0],newName[1].lower()])
        os.rename(fname,newName)
        print "Renamed " + fname + "to" + newName
</snippet></ROW><ROW><id>8315292</id><snippet>client.send('HTTP/1.0 200 OK\r\n')
</snippet></ROW><ROW><id>8315292</id><snippet>client.send('&lt;html&gt;&lt;body&gt;&lt;h1&gt;Hello World&lt;/body&gt;&lt;/html&gt;')
</snippet></ROW><ROW><id>8315292</id><snippet>client.close()
</snippet></ROW><ROW><id>8315292</id><snippet>sock.close()
</snippet></ROW><ROW><id>8315292</id><snippet>\r\n</snippet></ROW><ROW><id>8315292</id><snippet>\n</snippet></ROW><ROW><id>8315292</id><snippet>localhost:8080</snippet></ROW><ROW><id>8315292</id><snippet>import socket

sock = socket.socket()
sock.bind(('', 8080))
sock.listen(5)
client, adress = sock.accept()

print "Incoming:", adress
print client.recv(1024)
print

client.send('HTTP/1.0 200 OK\r\n')
client.send("Content-Type: text/html\r\n\r\n")
client.send('&lt;html&gt;&lt;body&gt;&lt;h1&gt;Hello World&lt;/body&gt;&lt;/html&gt;')
client.close()

print "Answering ..."
print "Finished."

sock.close()
</snippet></ROW><ROW><id>8315315</id><snippet>UUID('f82aa75f-56a8-442b-89d2-eb7aaae6f9c3')</snippet></ROW><ROW><id>8315315</id><snippet>def LeID(Xv,Yv,Dv):
    import uuid
    import string
    import arcpy
    MyNS = uuid.UUID('f82aa75f-56a8-442b-89d2-eb7aaae6f9c3')
    X_val = "%.6f" % Xv
    Y_val  = "%.6f" % Yv
    date = Dv
    xarr = string.split(X_val, '.')
    yarr = string.split(Y_val, '.')
    date = string.split(date , '/')
    val =  str(xarr[0] + xarr[1] + yarr[0] + yarr[1] + date[0]  + date[1] + date[2] )
    print MyNS, repr(val) # for debugging
    return '{' + str(uuid.uuid5(MyNS, val)) + '}'
</snippet></ROW><ROW><id>8315543</id><snippet>re.match(r"(?!.*foo_).*", "foo_bar")
</snippet></ROW><ROW><id>8315543</id><snippet>(?!.*foo_)</snippet></ROW><ROW><id>8315543</id><snippet>.*foo_</snippet></ROW><ROW><id>8315543</id><snippet>re.match()</snippet></ROW><ROW><id>8315566</id><snippet>def tracefunc(frame, event, arg, indent=[0]):
      if event == "call":
          indent[0] += 2
          print "-" * indent[0] + "&gt; call function", frame.f_code.co_name
      elif event == "return":
          print "&lt;" + "-" * indent[0], "exit function", frame.f_code.co_name
          indent[0] -= 2
      return tracefunc

import sys
sys.settrace(tracefunc)

main()   # or whatever kicks off your script
</snippet></ROW><ROW><id>8316108</id><snippet>dict</snippet></ROW><ROW><id>8316108</id><snippet>e_d.clear()
</snippet></ROW><ROW><id>8316163</id><snippet>from datetime import datetime, tzinfo, timedelta

timestamp = "1322485986.672901000"

class UTC(tzinfo):
    def utcoffset(self, dt):
         return timedelta(0)
    def tzname(self, dt):
        return "UTC"
    def dst(self, dt):
        return timedelta(0)


d1 = datetime.fromtimestamp(float(timestamp), UTC())
print d1
</snippet></ROW><ROW><id>8316210</id><snippet>%r</snippet></ROW><ROW><id>8316210</id><snippet>variable_1 = "HELLO"
variable_2 = "ADIOS"
varlist = [variable_1, variable_2]
print "INSERT INTO table VALUES %r;" % (tuple(varlist),)
</snippet></ROW><ROW><id>8316210</id><snippet>variable_1 = "HELLO"
variable_2 = "ADIOS"
varlist = [variable_1,variable_2]
var_string = ', '.join('?' * len(varlist))
query_string = 'INSERT INTO table VALUES (%s);' % var_string
cursor.execute(query_string, varlist)
</snippet></ROW><ROW><id>8316429</id><snippet>instance_dict</snippet></ROW><ROW><id>8316429</id><snippet># set the queryset for step '0' of the formset
instance_dict = {'0': Domain.objects.none()}

# in your url patterns
url(r'^$', BuyNowWizardView.as_view([UserFormSet], instance_dict=instance_dict)),
</snippet></ROW><ROW><id>8316429</id><snippet>BaseModelFormSet</snippet></ROW><ROW><id>8316429</id><snippet>__init__</snippet></ROW><ROW><id>8316429</id><snippet>from django.forms.models import BaseModelFormSet

class BaseDomainFormSet(BaseModelFormSet):
    def __init__(self, *args, **kwargs):
        super(BaseDomainFormSet, self).__init__(*args, **kwargs)
        self.queryset = Domain.objects.none()

DomainFormSet = modelformset_factory(Domain, formset=BaseDomainFormSet)
</snippet></ROW><ROW><id>8316429</id><snippet>DomainFormSet</snippet></ROW><ROW><id>8316517</id><snippet>select_related</snippet></ROW><ROW><id>8316517</id><snippet>post = Post.objects.select_related('category').get(id=1)
</snippet></ROW><ROW><id>8316517</id><snippet>select_related</snippet></ROW><ROW><id>8316517</id><snippet>select_related</snippet></ROW><ROW><id>8316565</id><snippet># -*- coding: utf-8 -*- 
</snippet></ROW><ROW><id>8316565</id><snippet>import threading
import sys
import time
import os

spinner="▏▎▍▌▋▊▉█▉▊▌▍▎" #utf8

#convert the utf8 spinner string to a list
chars=[c.encode("utf-8") for c in unicode(spinner,"utf-8")]

class spin(threading.Thread):   # not sure what to put in the brackets was (threading.Thread, but now im not sure whether to use processes or not)
</snippet></ROW><ROW><id>8316565</id><snippet>    def __init__(self):
        super(spin,self).__init__() # dont understand what this does
</snippet></ROW><ROW><id>8316565</id><snippet>        self._stop = False
</snippet></ROW><ROW><id>8316565</id><snippet>    def run (self):
        pos=0
        while not self._stop:
            sys.stdout.write("\r"+chars[pos])
            sys.stdout.flush()
            time.sleep(.15)
            pos+=1
            pos%=len(chars)

    def cursor_visible(self):
        os.system("tput cvvis")
    def cursor_invisible(self):
        os.system("tput civis")
    def stop(self):
        self._stop = True  #the underscore makes this a private variable ?
</snippet></ROW><ROW><id>8316565</id><snippet>    def stopped(self):
        return self._stop == True
</snippet></ROW><ROW><id>8316565</id><snippet>if __name__ == "__main__":
    s = spin()
    s.cursor_invisible()
    s.start()
    a = raw_input("")
    s.stop()
    s.cursor_visible()
</snippet></ROW><ROW><id>8316565</id><snippet># -*- coding: utf-8 -*- 

import threading
import sys
import time
import os

spinner="▏▎▍▌▋▊▉█▉▊▌▍▎" #utf8

#convert the utf8 spinner string to a list
chars=[c.encode("utf-8") for c in unicode(spinner,"utf-8")]

class spin(threading.Thread):   # not sure what to put in the brackets was (threading.Thread, but now im not sure whether to use processes or not)

    def __init__(self):
        super(spin,self).__init__() # dont understand what this does
        self._stop = False

    def run (self):
        pos=0
        while not self._stop:
            sys.stdout.write("\r"+chars[pos])
            sys.stdout.flush()
            time.sleep(.15)
            pos+=1
            pos%=len(chars)

    def cursor_visible(self):
        os.system("tput cvvis")
    def cursor_invisible(self):
        os.system("tput civis")
    def stop(self):
        self._stop = True  #the underscore makes this a private variable ?
    def stopped(self):
        return self._stop == True


if __name__ == "__main__":
    s = spin()
    s.cursor_invisible()
    s.start()
    a = raw_input("")
    s.stop()
    s.cursor_visible()
</snippet></ROW><ROW><id>8316622</id><snippet>WebElement</snippet></ROW><ROW><id>8316622</id><snippet>browser.page_source</snippet></ROW><ROW><id>8316989</id><snippet>requests</snippet></ROW><ROW><id>8316989</id><snippet>import requests
import sys

EMAIL = ''
PASSWORD = ''

URL = 'http://friends.cisv.org'

def main():
    # Start a session so we can have persistant cookies
    session = requests.session(config={'verbose': sys.stderr})

    # This is the form data that the page sends when logging in
    login_data = {
        'loginemail': EMAIL,
        'loginpswd': PASSWORD,
        'submit': 'login',
    }

    # Authenticate
    r = session.post(URL, data=login_data)

    # Try accessing a page that requires you to be logged in
    r = session.get('http://friends.cisv.org/index.cfm?fuseaction=user.fullprofile')

if __name__ == '__main__':
    main()
</snippet></ROW><ROW><id>8317043</id><snippet>after</snippet></ROW><ROW><id>8317043</id><snippet>import Tkinter as tk

class App():
    def __init__(self, tick):
        self.tick = tick
        self.idle_time = 0

        self.root = tk.Tk()
        frame = tk.Frame(self.root, width=100, height=100)
        frame.bind_all("&lt;Motion&gt;", self.reset_idle)
        frame.bind_all("&lt;Key&gt;", self.reset_idle)
        frame.pack()

        self.root.after(self.tick, self.update_timer)
        self.root.mainloop()

    def update_timer(self):
        print('Idle for %sms' % self.idle_time)
        self.idle_time += self.tick
        self.root.after(self.tick, self.update_timer)

    def reset_idle(self, event):
        self.idle_time = 0

app = App(1000)
</snippet></ROW><ROW><id>8317237</id><snippet>m = re.search('&lt;(".+")&gt;', 'Tags=&lt;"traffic""apple""sample"&gt;')
tags = [x for x in m.group(1).split('"') if x]
</snippet></ROW><ROW><id>8317237</id><snippet>tags</snippet></ROW><ROW><id>8317237</id><snippet>['traffic', 'apple', 'sample']
</snippet></ROW><ROW><id>8317403</id><snippet>numpy.intersect1d</snippet></ROW><ROW><id>8317403</id><snippet>import numpy as np

A = np.array([[1,4],[2,5],[3,6]])
B = np.array([[1,4],[3,6],[7,8]])

nrows, ncols = A.shape
dtype={'names':['f{}'.format(i) for i in range(ncols)],
       'formats':ncols * [A.dtype]}

C = np.intersect1d(A.view(dtype), B.view(dtype))

# This last bit is optional if you're okay with "C" being a structured array...
C = C.view(A.dtype).reshape(-1, ncols)
</snippet></ROW><ROW><id>8317572</id><snippet>None</snippet></ROW><ROW><id>8317572</id><snippet>is None</snippet></ROW><ROW><id>8317572</id><snippet>def region_required(view_func):
    def new_view(request, ctx=None, *args, **kw):
        if ctx is None:
            ctx = {}
        import pdb; pdb.set_trace()
        ctx['regions'] = Region.objects.all()
        return view_func(request, context=ctx, *args, **kw)
    return new_view
</snippet></ROW><ROW><id>8317658</id><snippet>binary_op_names</snippet></ROW><ROW><id>8317658</id><snippet>list</snippet></ROW><ROW><id>8317658</id><snippet>tuple</snippet></ROW><ROW><id>8317658</id><snippet>__xor__</snippet></ROW><ROW><id>8317658</id><snippet>op</snippet></ROW><ROW><id>8317658</id><snippet>op</snippet></ROW><ROW><id>8317658</id><snippet>op</snippet></ROW><ROW><id>8317658</id><snippet>__xor__</snippet></ROW><ROW><id>8317658</id><snippet>op_tofunction_op</snippet></ROW><ROW><id>8317658</id><snippet>op_to_function_op = lambda f: lambda self, other: function(lambda: f(self(), other()))
for name in binary_op_names:
    op = getattr(operator, name)
    type.__setattr__(function, name, op_to_function_op(op))

&gt;&gt;&gt; (function(lambda: 4) + (lambda: 7))()
11
&gt;&gt;&gt; (function(lambda: 4) - (lambda: 7))()
-3
&gt;&gt;&gt; (function(lambda: 4) ^ (lambda: 7))()
3
</snippet></ROW><ROW><id>8318136</id><snippet>for part in email.iterators.typed_subpart_iterator(msg, 'text', 'plain'):
   for body_line in email.iterators.body_line_iterator(part):
       print body_line
</snippet></ROW><ROW><id>8318797</id><snippet>manage.py</snippet></ROW><ROW><id>8318797</id><snippet>DJANGO_SETTINGS_MODULE</snippet></ROW><ROW><id>8318797</id><snippet>django-admin.py</snippet></ROW><ROW><id>8318797</id><snippet>DJANGO_SETTINGS_MODULE</snippet></ROW><ROW><id>8318797</id><snippet>django-admin.py</snippet></ROW><ROW><id>8318797</id><snippet>manage.py</snippet></ROW><ROW><id>8318797</id><snippet>manage.py</snippet></ROW><ROW><id>8318797</id><snippet>local.py</snippet></ROW><ROW><id>8318797</id><snippet>settings</snippet></ROW><ROW><id>8318797</id><snippet>dev_settings</snippet></ROW><ROW><id>8318797</id><snippet>#!/usr/bin/env python
from django.core.management import execute_manager
import imp

try:
    import settings_local
except ImportError:
    import sys
    sys.stderr.write("Error: Can't find the file 'settings_local.py' in the directory containing %r. It appears you've customized things.\nYou'll have to run django-admin.py, passing it your settings module.\n" % __file__)
    sys.exit(1)

if __name__ == "__main__":
    execute_manager(settings_local)
</snippet></ROW><ROW><id>8318797</id><snippet>./local.py</snippet></ROW><ROW><id>8319214</id><snippet>QApplication.processEvents()
</snippet></ROW><ROW><id>8319214</id><snippet>print value</snippet></ROW><ROW><id>8319289</id><snippet>GetVolumeInformation</snippet></ROW><ROW><id>8319338</id><snippet>zip_safe</snippet></ROW><ROW><id>8319338</id><snippet>setup()</snippet></ROW><ROW><id>8319338</id><snippet>setup(
    ...
    zip_safe = False,
    ...
)
</snippet></ROW><ROW><id>8319946</id><snippet>self</snippet></ROW><ROW><id>8319946</id><snippet>_ID</snippet></ROW><ROW><id>8319946</id><snippet>self.id = self._ID 
self.__class__._ID += 1
</snippet></ROW><ROW><id>8319946</id><snippet>class Edge(object):
    @property
    def id(self): return id(self)
</snippet></ROW><ROW><id>8320038</id><snippet>file_old</snippet></ROW><ROW><id>8320038</id><snippet>old_lines = set((line.strip() for line in open(r'C:\Users\test\Desktop\file_old.txt', 'r+')))
file_new = open(r'C:\Users\test\Desktop\file1.txt', 'r+')
file_diff = open(r'C:\Users\test\Desktop\file_diff.txt', 'w')

for line in file_new:
    if line.strip() not in old_lines:
        file_diff.write(line)
file_new.close()
file_diff.close()
</snippet></ROW><ROW><id>8320129</id><snippet>for line in file</snippet></ROW><ROW><id>8320129</id><snippet>line.strip()</snippet></ROW><ROW><id>8320129</id><snippet>print &gt;&gt;result, "fact_text[%d] = \"%s\";" % (i, line.strip())
</snippet></ROW><ROW><id>8320160</id><snippet>In [1]: import numpy as np

In [23]: v = np.arange(10)

In [24]: a = v[3:4]

In [25]: a[0] = 100

In [26]: v
Out[26]: array([  0,   1,   2, 100,   4,   5,   6,   7,   8,   9])
</snippet></ROW><ROW><id>8320160</id><snippet>a</snippet></ROW><ROW><id>8320160</id><snippet>v</snippet></ROW><ROW><id>8320160</id><snippet>a</snippet></ROW><ROW><id>8320160</id><snippet>v</snippet></ROW><ROW><id>8320177</id><snippet>GroupArray = Group * count
</snippet></ROW><ROW><id>8320177</id><snippet>group_array = GroupArray.from_address(myGroups.value)
</snippet></ROW><ROW><id>8320177</id><snippet>for x in range(0,count):
    print "~~~~~~~~~~" + group_array[x].groupname
</snippet></ROW><ROW><id>8320222</id><snippet>do {
    WATCH value
    i = 1 + GET value
    MULTI
    set value i
    SADD set i
    result = EXEC
} while (result == nil)
</snippet></ROW><ROW><id>8320252</id><snippet>body = open(email.txt)
</snippet></ROW><ROW><id>8320252</id><snippet>body = open("email.txt").read()
</snippet></ROW><ROW><id>8320424</id><snippet>app.exec_()</snippet></ROW><ROW><id>8320424</id><snippet>dialog.exec_()</snippet></ROW><ROW><id>8320640</id><snippet>B</snippet></ROW><ROW><id>8320640</id><snippet>re</snippet></ROW><ROW><id>8320640</id><snippet>import re

l3_trim = re.sub(r"B*$", "", l3)
</snippet></ROW><ROW><id>8320708</id><snippet>request.override_renderer = 'other-renderer.mak'
</snippet></ROW><ROW><id>8320708</id><snippet>from pyramid.httpexceptions import HTTPFound, HTTPNotFound
from pyramid.url import route_url
from your_app import Model, some_stuff, save_to_db

@view_config(route_name='new_model',
        renderer='model/new.mak', request_method='GET')
def new(request):
    """Shows the empty form."""
    return {'model': Model(), 'errors': {}}

@view_config(route_name='create_model',
        renderer='model/new.mak', request_method='POST')
def create(request):
    """Receives submitted form."""
    model = some_stuff()
    if len(model.errors) = 0: # is valid
        # do your stuff, then redirect
        save_to_db(model)
        return HTTPFound(route_url('show_model', request, model_id=model.id))
    # is invalid
    return {'model': model, 'errors': model.errors}

@view_config(route_name='show_model',
    renderer='model/show.mak', request_method='GET')
def show(request):
    """Shows details of one model."""
    model = Model.find(request.matchdict['model_id'])
    if model is None:
        return HTTPNotFound()
    return {'model': model}
</snippet></ROW><ROW><id>8320708</id><snippet>GET</snippet></ROW><ROW><id>8320708</id><snippet>POST</snippet></ROW><ROW><id>8320708</id><snippet>GET</snippet></ROW><ROW><id>8320708</id><snippet>POST</snippet></ROW><ROW><id>8320708</id><snippet>POST</snippet></ROW><ROW><id>8320712</id><snippet># The function called whenever a key is pressed. Note the use of Python tuples to pass in: (key, x, y)  
def keyPressed(self,*args):
    if args[0] == '\x08':
        self.keyCache = self.keyCache[:-1]
    elif args[0] == '\x1b':
        sys.exit()
    elif args[0] == 'm':
        print "Now meteoring otherwise peaceful teapot"
        # meteor shenanigans
    else:
        self.keyCache += args[0]
    sys.stdout.write(self.keyCache +"                                                  \r")#print "keypress: &lt;",self.keyCache,"&gt;"
    sys.stdout.flush()
</snippet></ROW><ROW><id>8321198</id><snippet>import sys; print sys.executable</snippet></ROW><ROW><id>8321198</id><snippet>python setup.py install</snippet></ROW><ROW><id>8321270</id><snippet>RequestContext</snippet></ROW><ROW><id>8321270</id><snippet>csrf_token</snippet></ROW><ROW><id>8321270</id><snippet>from django.template import RequestContext

...

return render_to_response('fileupload/upload.html', {'form': c['UploadFileForm']},  RequestContext(request))
# Added RequestContext
</snippet></ROW><ROW><id>8321541</id><snippet>termdict = dict(termpairs)
</snippet></ROW><ROW><id>8321541</id><snippet>termpairs</snippet></ROW><ROW><id>8321541</id><snippet>((2, 14), (2, 11), (-12, 3), (42, 0)) =&gt; {2: 14, 2: 11, -12: 3, 42: 0}
</snippet></ROW><ROW><id>8321541</id><snippet>dict</snippet></ROW><ROW><id>8321541</id><snippet>2: 11</snippet></ROW><ROW><id>8321541</id><snippet>2: 14</snippet></ROW><ROW><id>8321541</id><snippet>dict</snippet></ROW><ROW><id>8321541</id><snippet>dict</snippet></ROW><ROW><id>8321541</id><snippet>def __init__(self, *termpairs):
    self.termdict = {}
    # termpairs is a tuple of tuples
    for x, y in termdict:
        self.termdict[y] = x
</snippet></ROW><ROW><id>8321626</id><snippet>update()</snippet></ROW><ROW><id>8321626</id><snippet>None</snippet></ROW><ROW><id>8321626</id><snippet>update()</snippet></ROW><ROW><id>8321626</id><snippet> lambda x, y: x.update(y) or x
</snippet></ROW><ROW><id>8321626</id><snippet>or</snippet></ROW><ROW><id>8321626</id><snippet>x</snippet></ROW><ROW><id>8321626</id><snippet>None</snippet></ROW><ROW><id>8321626</id><snippet>union()</snippet></ROW><ROW><id>8321626</id><snippet>update()</snippet></ROW><ROW><id>8321626</id><snippet>lambda x, y: x.union(y) 
</snippet></ROW><ROW><id>8321626</id><snippet>set()</snippet></ROW><ROW><id>8321626</id><snippet>set([])</snippet></ROW><ROW><id>8321626</id><snippet>reduce()</snippet></ROW><ROW><id>8321626</id><snippet>reduce(lambda x, y: x.union(y), a, set())
</snippet></ROW><ROW><id>8322573</id><snippet>listb.pop()[0]
</snippet></ROW><ROW><id>8322573</id><snippet>listb.pop</snippet></ROW><ROW><id>8322573</id><snippet>pop</snippet></ROW><ROW><id>8322944</id><snippet>import paramiko
ssh = paramiko.SSHClient()
ssh.set_missing_host_key_policy(paramiko.AutoAddPolicy())
privkey = paramiko.RSAKey.from_private_key_file('xxx.pem')
ssh.connect('xxx.compute-1.amazonaws.com', username='ubuntu', pkey=privkey)
stdin, stdout, stderr = ssh.exec_command("nohup ssh  -f -o StrictHostKeyChecking=no -i     ~/.ssh/xxx.pem ubuntu@xxx.compute-1.amazonaws.com -L 16646:localhost:16646 -L -N &gt;&amp; /dev/null &lt; /dev/null &amp;")
ssh.close()
</snippet></ROW><ROW><id>8323008</id><snippet>stderr</snippet></ROW><ROW><id>8323008</id><snippet>os.wait()
</snippet></ROW><ROW><id>8323008</id><snippet>Popen</snippet></ROW><ROW><id>8323008</id><snippet>wait</snippet></ROW><ROW><id>8323008</id><snippet>communicate</snippet></ROW><ROW><id>8323008</id><snippet># Instead of os.wait():
for p in ps:
    p.wait()
    print 'A process returned:', p.returncode
</snippet></ROW><ROW><id>8323158</id><snippet>str(instance.album.slug)</snippet></ROW><ROW><id>8323232</id><snippet>def createTest(testcase, somedata, index):
    def test(self):
         "Do something with somedata and assert a result"
    test_name = "test_%d" % index
    setattr(testcase, test_name, test)

for index, somedata in enumerate(somebigtable):
    createTest(MyTestCase, somedata, index)
</snippet></ROW><ROW><id>8323232</id><snippet>__xxx__</snippet></ROW><ROW><id>8323232</id><snippet>__dict__</snippet></ROW><ROW><id>8323428</id><snippet>&gt;&gt;&gt; re.findall(r"\b(?:world|other|words)|([a-zA-Z0-9]+)\b", text)
['hello', '', 'how', 'are', 'you']
</snippet></ROW><ROW><id>8323428</id><snippet>&gt;&gt;&gt; list(set(final_list) - set(negate_words))
['hello', 'how', 'are', 'you']
</snippet></ROW><ROW><id>8323428</id><snippet>&gt;&gt;&gt; negate_words_set = set(negate_words)
&gt;&gt;&gt; list(itertools.ifilterfalse(negate_words_set.__contains__, final_list))
['hello', 'how', 'are', 'you']
</snippet></ROW><ROW><id>8323428</id><snippet>&gt;&gt;&gt; result = []
&gt;&gt;&gt; negate_words_set = set(negate_words)
&gt;&gt;&gt; result = []
&gt;&gt;&gt; for mo in re.finditer(r"[a-zA-Z0-9]+", text):
    word = mo.group()
    if word not in negate_words_set:
         result.append(word)

&gt;&gt;&gt; result
['hello', 'how', 'are', 'you']
</snippet></ROW><ROW><id>8324235</id><snippet>j="""{"data":"foo \\r\\n bar"}"""
</snippet></ROW><ROW><id>8324384</id><snippet>from lxml import etree
data = """&lt;job&gt;
  &lt;server&gt;
    &lt;cpu-set&gt;
    &lt;/cpu-set&gt;
  &lt;/server&gt;
  &lt;ip-routings&gt;
  &lt;/ip-routings&gt;
&lt;/job&gt;"""
doc = etree.XML(data)
for e in doc.xpath('//*[contains(local-name(),"-")]'):
  e.tag = e.tag.replace('-','_')

print etree.tostring(doc)
</snippet></ROW><ROW><id>8324384</id><snippet>&lt;job&gt;
  &lt;server&gt;
    &lt;cpu_set&gt;
    &lt;/cpu_set&gt;
  &lt;/server&gt;
  &lt;ip_routings&gt;
  &lt;/ip_routings&gt;
&lt;/job&gt;
</snippet></ROW><ROW><id>8324521</id><snippet>user</snippet></ROW><ROW><id>8324521</id><snippet>user[0]</snippet></ROW><ROW><id>8324521</id><snippet>get</snippet></ROW><ROW><id>8324521</id><snippet>user = User.objects.get(id=123)
</snippet></ROW><ROW><id>8324881</id><snippet>if hasattr(lst, "attr"):
    attr = lst.attr
else:
    attr = {}
</snippet></ROW><ROW><id>8324881</id><snippet>lst.attr</snippet></ROW><ROW><id>8324881</id><snippet>lst.attr.get(idx, default_value)
</snippet></ROW><ROW><id>8324881</id><snippet>try</snippet></ROW><ROW><id>8324881</id><snippet>except</snippet></ROW><ROW><id>8324881</id><snippet>x</snippet></ROW><ROW><id>8324881</id><snippet>y</snippet></ROW><ROW><id>8324881</id><snippet>attr</snippet></ROW><ROW><id>8324881</id><snippet>attrs = [(x.attr if hasattr(x) else {}) for x in y]

print [attr.get(idx, default_value) for attr in attrs]
</snippet></ROW><ROW><id>8325041</id><snippet>dirs[:] = [d for d in dirs if pred_dir(path.join(base, d))]
</snippet></ROW><ROW><id>8325041</id><snippet>_ignore_dirs_predicate(base)</snippet></ROW><ROW><id>8325041</id><snippet>NameError</snippet></ROW><ROW><id>8325041</id><snippet>_ignore_dirs_predicate</snippet></ROW><ROW><id>8325041</id><snippet>pred_dir</snippet></ROW><ROW><id>8325041</id><snippet>ISA_PY</snippet></ROW><ROW><id>8325041</id><snippet>str.endswith()</snippet></ROW><ROW><id>8325392</id><snippet>item_c=item_a[(date_a &gt;= (datetime(2000,1,3))) * (date_a &lt;= (datetime(2000,1,4)))]
</snippet></ROW><ROW><id>8325564</id><snippet>s.start('hello')</snippet></ROW><ROW><id>8325564</id><snippet>Threadin.start()</snippet></ROW><ROW><id>8325564</id><snippet>self</snippet></ROW><ROW><id>8325564</id><snippet>s.echo('hello')</snippet></ROW><ROW><id>8325564</id><snippet>var</snippet></ROW><ROW><id>8325564</id><snippet>import threading

class Spin(threading.Thread):  
    def __init__(self,var):
        super(Spin,self).__init__()
        self.var = var
    def run(self):
        print self.var

if __name__ == '__main__':
    s = Spin('hello')
    s.start()
    s.join()
</snippet></ROW><ROW><id>8325849</id><snippet>Property</snippet></ROW><ROW><id>8325849</id><snippet>validate()</snippet></ROW><ROW><id>8325958</id><snippet>os.linesep</snippet></ROW><ROW><id>8325958</id><snippet>&gt;&gt;&gt; import os
&gt;&gt;&gt; os.linesep
'\n'
&gt;&gt;&gt; print "line one" + os.linesep + "line two"
line one
line two
</snippet></ROW><ROW><id>8326062</id><snippet>class Test1:
    def __init__(self):
        self.x = 1

class Test2(Test1):
    def __init__(self):
        Test1.__init__(self)
        print self.x

a = Test2()
</snippet></ROW><ROW><id>8326145</id><snippet>/mainfolder --&gt; __init__.py
                launcher.py
                /MainPackage --&gt; __init__.py
                                 /Mainframe  --&gt; __init__.py
                                                 Mainframe.py
                                                 Mainframe_base.py
                                 /Subframe_1 --&gt; __init__.py
                                                 Subframe_1.py
                                                 Subframe_1_base.py
                                 /Subframe_2 --&gt; __init__.py
                                                 Subframe_2.py
                                                 Subframe_2_base.py
</snippet></ROW><ROW><id>8326174</id><snippet>class Current(models.Model):  
    field1 = models.IntegerField()  
    field2 = models.IntegerField()
    field3 = models.IntegerField()  

    def save(self, *args, **kwargs):
        self.field3 = self.field1 + self.field2
        super(Current, self).save(*args, **kwargs)
</snippet></ROW><ROW><id>8326178</id><snippet>from time import time

def index():
    # THE REST OF YOUR CODE GOES HERE
    start = time.time()
    resp = template.render(message=message)
    end = time.time()
    processing_time = end - start
    # LOG PROCESSING TIME SOMEPLACE
    return resp
</snippet></ROW><ROW><id>8326661</id><snippet>class BlogPost(Document):
    tags = ListField(StringField())
    # other things
</snippet></ROW><ROW><id>8326661</id><snippet>last_tag</snippet></ROW><ROW><id>8326661</id><snippet>class BlogPost(Document):
    tags = ListField(StringField())
    last_tag = StringField()
    # other things
</snippet></ROW><ROW><id>8326661</id><snippet>BlogPost.objects(id=post.id).update_one(push__tags='nosql', set__last_tag='nosql')
</snippet></ROW><ROW><id>8326661</id><snippet>BlogPost.objects(last_tag='nosql')
</snippet></ROW><ROW><id>8326661</id><snippet>last_tag</snippet></ROW><ROW><id>8326661</id><snippet>tags</snippet></ROW><ROW><id>8326818</id><snippet>import csv

with open('output_file.csv', 'w') as f:
    csv_w = csv.writer(f)
    for rec in time_deltas(infile): 
        csv_w.writerow(rec)
</snippet></ROW><ROW><id>8326818</id><snippet>import csv

with open('output_file.csv', 'w') as f:
    csv.writer(f).writerows(time_deltas(infile))
</snippet></ROW><ROW><id>8326851</id><snippet>print ('We\'d have {0} beans, {1} jars, and {2} crates.'
        .format(*secret_formula(start_point)))
</snippet></ROW><ROW><id>8326851</id><snippet>*</snippet></ROW><ROW><id>8326851</id><snippet>secret_formula(...)</snippet></ROW><ROW><id>8326851</id><snippet>format()</snippet></ROW><ROW><id>8326888</id><snippet>l = [ 'NICE dog' , 'blue FLOWER' , 'GOOD cat' , 'YELLOW caw']

output = [' '.join(w for w in a.split() if w.isupper())  for a in l]
# or:    
output = [' '.join(filter(str.isupper, a.split())) for a in l]
</snippet></ROW><ROW><id>8326888</id><snippet>['NICE', 'FLOWER', 'GOOD', 'YELLOW']
</snippet></ROW><ROW><id>8326888</id><snippet>list</snippet></ROW><ROW><id>8327018</id><snippet>DictField</snippet></ROW><ROW><id>8327018</id><snippet>class UserThings(Document):
    # you can look this document up by username
    username = StringField()

    # you can store whatever you want here
    things = DictField()

dcrosta_things = UserThings(username='dcrosta')
dcrosta_things.things['foo'] = 'bar'
dcrosta_things.things['bad'] = 'quack'
dcrosta_things.save()
</snippet></ROW><ROW><id>8327018</id><snippet>{ _id: ObjectId(...),
  _types: ["UserThings"],
  _cls: "UserThings",
  username: "dcrosta",
  things: {
    foo: "bar",
    baz: "quack"
  }
}
</snippet></ROW><ROW><id>8327158</id><snippet>FULLWIDTH LATIN LETTER</snippet></ROW><ROW><id>8327448</id><snippet>datetime</snippet></ROW><ROW><id>8327448</id><snippet>tzinfo</snippet></ROW><ROW><id>8327492</id><snippet>&gt;&gt;&gt; 'foo' in 'foobar' # Basic match
True
&gt;&gt;&gt; re.search(r'\bfoo\b', 'foobar') # Whole word only
&gt;&gt;&gt; re.search(r'\bfoo\b', 'foo bar')
&lt;_sre.SRE_Match object at 0x7f6eb4761ed0&gt;
</snippet></ROW><ROW><id>8327655</id><snippet>ImportError: No module named routes
</snippet></ROW><ROW><id>8327655</id><snippet>routes</snippet></ROW><ROW><id>8327655</id><snippet>port install py-routes
</snippet></ROW><ROW><id>8327655</id><snippet>py25-routes</snippet></ROW><ROW><id>8327655</id><snippet>py26-routes</snippet></ROW><ROW><id>8327655</id><snippet>easy_install routes
</snippet></ROW><ROW><id>8327892</id><snippet>itertools.chain</snippet></ROW><ROW><id>8327892</id><snippet>from itertools import chain

list(chain.from_iterable(list_of_lists))
</snippet></ROW><ROW><id>8328171</id><snippet>mydata = [
    {
        'name': 'Windows',
        'value': '12%',
        'members': [
            {
                'name': 'pc1',
                'value': 123,
                'members': []
            },
            {
                'name': 'pc2',
                'value': 321,
                'members': []
            },
        ]
    },
    {
        'name': 'Linux',
        'value': '11%',
        'members': [
            {
                'name': 'pc3',
                'value': 213,
                'members': []
            },
            {
                'name': 'pc4',
                'value': 132,
                'members': []
            },
        ]
    },
]
</snippet></ROW><ROW><id>8328171</id><snippet>for topmember in mydata:
    print "%s = %s"%(topmember['name'], topmember['value'])
    for member in topmember['members']:
        print '   MEMBER: %s = %s' % (member['name'], member['value'])
</snippet></ROW><ROW><id>8328171</id><snippet>Windows = 12%
   MEMBER: pc1 = 123
   MEMBER: pc2 = 321
Linux = 11%
   MEMBER: pc3 = 213
   MEMBER: pc4 = 132
</snippet></ROW><ROW><id>8328171</id><snippet>def print_recursive(members, indent=''):
    for member in members:
        print "%s%s = %s"%(indent, member['name'], member['value'])
        print_recursive(member['members'], indent + '    ')

print_recursive(mydata)
</snippet></ROW><ROW><id>8328171</id><snippet>Windows = 12%
    pc1 = 123
    pc2 = 321
Linux = 11%
    pc3 = 213
    pc4 = 132
</snippet></ROW><ROW><id>8328258</id><snippet>print</snippet></ROW><ROW><id>8328258</id><snippet>&gt;&gt;&gt; print u'\u0441\u0438\u0441\u0442\u0435\u043c\u043d\u0430\u044f \u043e\u0448\u0438\u0431\u043a\u0430'
системная ошибка
</snippet></ROW><ROW><id>8328423</id><snippet>self.image = pygame.image.load(os.path.join('img', line.strip()))
</snippet></ROW><ROW><id>8328423</id><snippet>name, ntype, text, filename = [l.strip() for l in open(name).readlines()[:4]]

# Now use the variables normally, for example:
self.image = pygame.image.load(os.path.join('img', filename))
</snippet></ROW><ROW><id>8328563</id><snippet>from urllib2 import urlopen
import Image
import sys
import StringIO

url = "http://maps.googleapis.com/maps/api/staticmap?center=Narita+International+Airport,Narita,Chiba+Prefecture,+Japan&amp;zoom=18&amp;size=512x512&amp;maptype=roadmap&amp;markers=color:blue|label:S|40.702147,-74.015794&amp;markers=color:green|label:G|40.711614,-74.012318&amp;markers=color:red|color:red|label:C|40.718217,-73.998284&amp;sensor=false"
result = urlopen(url=url)
if result.getcode() != 200:
  print "errrrrr"
  sys.exit(1)

imgdata = result.read()
# As the URL above tells, its size is 512x512 
img = Image.open(StringIO.StringIO(imgdata))
print img.size
</snippet></ROW><ROW><id>8328563</id><snippet>(512, 512)
</snippet></ROW><ROW><id>8328610</id><snippet>DEVSERVER_MODULES = (
    'devserver.modules.sql.SQLRealTimeModule',
    'devserver.modules.sql.SQLSummaryModule',
    'devserver.modules.profile.ProfileSummaryModule',

    # Modules not enabled by default
    'devserver.modules.ajax.AjaxDumpModule',
    #'devserver.modules.profile.MemoryUseModule',
    'devserver.modules.cache.CacheSummaryModule',
    #'devserver.modules.profile.LineProfilerModule',
)
</snippet></ROW><ROW><id>8328610</id><snippet>Django version 1.3.1, using settings 'myproject.settings' Running django-devserver 0.3.1 Threaded django server is running at http://127.0.0.1:8000/ Quit the server with CTRL-BREAK.
    [sql] SELECT ...
      FROM "auth_message"
      WHERE "auth_message"."user_id" = 1
    [sql] SELECT ...
      FROM "django_admin_log"
      INNER JOIN "auth_user" ON ("django_admin_log"."user_id" = "auth_user"."id")
      LEFT OUTER JOIN "django_content_type" ON ("django_admin_log"."content_typ_id" = "django_content_type"."id")
      WHERE "django_admin_log"."user_id" = 1
      ORDER BY "django_admin_log"."action_time" DESC LIMIT 10
    [sql] 4 queries with 0 duplicates
    [profile] Total time to render was 0.54s
    [cache] 0 calls made with a 100% hit percentage (0 misses) [30/Nov/2011 08:36:34] "GET /admin/ HTTP/1.1" 200 21667 (time: 0.69s; sql: 0ms (4q))
    [sql] SELECT ...
      FROM "django_flatpage"
      INNER JOIN "django_flatpage_sites" ON ("django_flatpage"."id" = "django_fatpage_sites"."flatpage_id")
      WHERE ("django_flatpage"."url" = /favicon.ico/
             AND "django_flatpage_sites"."site_id" = 1)
    [sql] 1 queries with 0 duplicates
    [profile] Total time to render was 0.02s
    [cache] 0 calls made with a 100% hit percentage (0 misses) [30/Nov/2011 08:36:34] "GET /favicon.ico/ HTTP/1.1" 404 2587 (time:
0.89s; sql: 0ms (1q))
</snippet></ROW><ROW><id>8328681</id><snippet>before_object.object.leaders</snippet></ROW><ROW><id>8328681</id><snippet>all()</snippet></ROW><ROW><id>8328780</id><snippet>re</snippet></ROW><ROW><id>8328780</id><snippet>import re
</snippet></ROW><ROW><id>8328780</id><snippet>s = 'abcd&lt;aaa&gt;some thing &lt;#^&amp;*some more!#$@ &lt;/aaa&gt; abcdefgasf &lt;aaa&gt;asfaf %^&amp;*$saf  asf %$^ &lt;/aaa&gt; &lt;another tag&gt; some text &lt;/another tag&gt; &lt;aaa&gt;sfafaff#%%%^^&lt;/aaa&gt;'
</snippet></ROW><ROW><id>8328780</id><snippet>inside_tags = re.findall('&lt;aaa&gt;(.+?)&lt;/aaa&gt;', s)
</snippet></ROW><ROW><id>8328780</id><snippet>inside_tags</snippet></ROW><ROW><id>8328780</id><snippet>cleaned_contents = [ re.sub('[^\w ]', '_' , content) for content in inside_tags ]
</snippet></ROW><ROW><id>8328780</id><snippet>cleaned_contents</snippet></ROW><ROW><id>8328780</id><snippet>zip</snippet></ROW><ROW><id>8328780</id><snippet>zipped = zip(inside_tags, cleaned_contents)
</snippet></ROW><ROW><id>8328780</id><snippet>for old, new in zipped:
    s = s.replace(old, new)
</snippet></ROW><ROW><id>8328780</id><snippet>?</snippet></ROW><ROW><id>8328780</id><snippet>[^\w ]</snippet></ROW><ROW><id>8328780</id><snippet>zip</snippet></ROW><ROW><id>8329047</id><snippet>from xattr import xattr
from struct import unpack

colornames = { 0: 'none', 1: 'gray', 2 : 'green', 3 : 'purple', 4 : 'blue', 5 : 'yellow', 6 : 'red', 7 : 'orange' }

attrs = xattr('./test.cpp')

try:
    finder_attrs = attrs[u'com.apple.FinderInfo']
    flags = unpack(32*'B', finder_attrs)
    color = flags[9] &gt;&gt; 1 &amp; 7
except KeyError:
    color = 0

print colornames[color]
</snippet></ROW><ROW><id>8329047</id><snippet>'red'</snippet></ROW><ROW><id>8329224</id><snippet>glob</snippet></ROW><ROW><id>8329224</id><snippet>glob</snippet></ROW><ROW><id>8329224</id><snippet>import glob

glob.glob('*.html') #return all html files in curr dir
glob.glob('*')     # lists all files in the current directory python is running in
glob.glob('*.jpg')   # returns all jpeg images
glob.glob('[a-z]????.*')    # lists all files starting with a letter, followed by 4 characters (numbers, letters) and any ending.
</snippet></ROW><ROW><id>8329224</id><snippet>import glob
def main():
   args = sys.argv[1:]
   for file in glob.glob(args):
       print i
</snippet></ROW><ROW><id>8329617</id><snippet>from math import *
</snippet></ROW><ROW><id>8329617</id><snippet>import math
</snippet></ROW><ROW><id>8329617</id><snippet>from X import *</snippet></ROW><ROW><id>8329634</id><snippet>A.B</snippet></ROW><ROW><id>8329634</id><snippet>A</snippet></ROW><ROW><id>8329709</id><snippet>soup = BeautifulSoup(your_data)
uploaded = []
link_data = []
for f in soup.findAll("font", {"class":"detDesc"}):
    uploaded.append(f.contents[0]) 
    link_data.append(f.a.contents[0])  
</snippet></ROW><ROW><id>8329709</id><snippet>your_data = """
&lt;font class="detDesc"&gt;Uploaded 10-29 18:50, Size 4.36 GiB, ULed by &lt;a class="detDesc" href="/user/NLUPPER002/" title="Browse NLUPPER002"&gt;NLUPPER002&lt;/a&gt;&lt;/font&gt;
&lt;div id="meow"&gt;test&lt;/div&gt;
&lt;font class="detDesc"&gt;Uploaded 10-26 19:23, Size 1.16 GiB, ULed by &lt;a class="detDesc" href="/user/NLUPPER002/" title="Browse NLUPPER002"&gt;NLUPPER003&lt;/a&gt;&lt;/font&gt;
"""
</snippet></ROW><ROW><id>8329709</id><snippet>&gt;&gt;&gt; print uploaded
[u'Uploaded 10-29 18:50, Size 4.36 GiB, ULed by ', u'Uploaded 10-26 19:23, Size 1.16 GiB, ULed by ']
&gt;&gt;&gt; print link_data
[u'NLUPPER002', u'NLUPPER003']
</snippet></ROW><ROW><id>8329709</id><snippet>&gt;&gt;&gt; [",".join(x.split(",")[:2]).replace(" ", " ") for x in uploaded]
[u'Uploaded 10-29 18:50, Size 4.36 GiB', u'Uploaded 10-26 19:23, Size 1.16 GiB']
</snippet></ROW><ROW><id>8329709</id><snippet>output = [(f.contents[0], f.a.contents[0]) for f in soup.findAll("font", {"class":"detDesc"})]
</snippet></ROW><ROW><id>8329709</id><snippet>&gt;&gt;&gt; output  # list of tuples
[(u'Uploaded 10-29 18:50, Size 4.36 GiB, ULed by ', u'NLUPPER002'), (u'Uploaded 10-26 19:23, Size 1.16 GiB, ULed by ', u'NLUPPER003')]

&gt;&gt;&gt; uploaded, link_data = zip(*output)  # split into two separate lists
&gt;&gt;&gt; uploaded
(u'Uploaded 10-29 18:50, Size 4.36 GiB, ULed by ', u'Uploaded 10-26 19:23, Size 1.16 GiB, ULed by ')
&gt;&gt;&gt; link_data
(u'NLUPPER002', u'NLUPPER003')
</snippet></ROW><ROW><id>8329774</id><snippet>cdef int *shiftIndexes = [1,-1, 0, 2,-1, -1, 4, 0, -1, 8, 1, -1, 16, 1, 0, 32, 1, 1, 64, 0, 1, 128, -1, 1]
</snippet></ROW><ROW><id>8329884</id><snippet>MySQLdb.cursors</snippet></ROW><ROW><id>8329884</id><snippet>MySQLdb</snippet></ROW><ROW><id>8329884</id><snippet>MySQLdb</snippet></ROW><ROW><id>8329884</id><snippet>MySQLdb</snippet></ROW><ROW><id>8329963</id><snippet>urlopen</snippet></ROW><ROW><id>8329963</id><snippet>read</snippet></ROW><ROW><id>8329963</id><snippet>print result</snippet></ROW><ROW><id>8329963</id><snippet>print result.read()</snippet></ROW><ROW><id>8329963</id><snippet>result = urllib2.urlopen(request)

print "Content-type: text/html\n\n"
print result.read()
</snippet></ROW><ROW><id>8329963</id><snippet>result = urllib2.urlopen(request)</snippet></ROW><ROW><id>8329963</id><snippet>result = urllib2.urlopen(request).read()</snippet></ROW><ROW><id>8329963</id><snippet>result = urllib2.urlopen(request).read()

print "Content-type: text/html\n\n"
print result
</snippet></ROW><ROW><id>8330253</id><snippet>&gt;&gt;&gt; import os
&gt;&gt;&gt; for root, subFolders, files in os.walk('/tmp'):
...   for f in files:
...     if len(f) &lt; 5: continue
...     newf = f[:-5]+f[-5].lower()+f[-4:]
...     print "changing",f,"to",newf
... 
</snippet></ROW><ROW><id>8330284</id><snippet>lst = ["dog", "cat" ,"boy", "cat", "car", "bus"]
pairs = zip(lst, lst[1:])     # [("dog", "cat"), ("cat", "boy"), ...]
d = {}
for k,v in pairs:
    d.setdefault(k, [])    # Set e.g. d["dog"] to [] if there is no d["dog"] yet
    d[k].append(v)
</snippet></ROW><ROW><id>8330339</id><snippet>MonteCarlo</snippet></ROW><ROW><id>8330339</id><snippet>.results</snippet></ROW><ROW><id>8330339</id><snippet>mc</snippet></ROW><ROW><id>8330339</id><snippet>multiprocessing.Queue</snippet></ROW><ROW><id>8330339</id><snippet>MonteCarlo</snippet></ROW><ROW><id>8330339</id><snippet>result_queue = multiprocessing.Queue()
montecarlos = [MonteCarlo(result_queue, f,fargs) for fargs in farglist]
obs = [multiprocessing.Process(mc) for mc in montecarlos]
for job in jobs: job.start()
for job in jobs: job.join()
results = [result_queue.get() for mc in montecarlos]
</snippet></ROW><ROW><id>8330896</id><snippet>java -jar $JARFILE -Dwebdriver.chrome.driver=$CHROMEDRIVER -role webdriver -hub http://$HUB_IP:4444/grid/register -maxSession 10 -browser browserName=chrome,maxInstances=10"
</snippet></ROW><ROW><id>8331278</id><snippet>sizehint</snippet></ROW><ROW><id>8331278</id><snippet>readlines</snippet></ROW><ROW><id>8331278</id><snippet>readlines</snippet></ROW><ROW><id>8331278</id><snippet>text.readlines()[:30]</snippet></ROW><ROW><id>8331278</id><snippet>readline</snippet></ROW><ROW><id>8331278</id><snippet>itertools.islice()</snippet></ROW><ROW><id>8331278</id><snippet>itertools</snippet></ROW><ROW><id>8331278</id><snippet>output = [line for _, line in zip(range(30), open("yourfile.txt", "r"))]
</snippet></ROW><ROW><id>8331278</id><snippet>output = (line for _, line in zip(range(30), open("yourfile.txt", "r")))
for line in output:
    # do something with line.
</snippet></ROW><ROW><id>8331299</id><snippet>&lt;echo&gt;${basedir}&lt;/echo&gt;</snippet></ROW><ROW><id>8331299</id><snippet>release</snippet></ROW><ROW><id>8331299</id><snippet>${basedir}</snippet></ROW><ROW><id>8331299</id><snippet>&lt;dirname property="project.basedir" file="${ant.file.project_name}"/&gt;
</snippet></ROW><ROW><id>8331299</id><snippet>${project.basedir}</snippet></ROW><ROW><id>8331299</id><snippet>${basedir}</snippet></ROW><ROW><id>8331299</id><snippet>${basedir}</snippet></ROW><ROW><id>8331308</id><snippet>&gt;&gt;&gt; def partitions(n):
        if n:
            for subpart in partitions(n-1):
                yield [1] + subpart
                if subpart and (len(subpart) &lt; 2 or subpart[1] &gt; subpart[0]):
                    yield [subpart[0] + 1] + subpart[1:]
        else:
            yield []

&gt;&gt;&gt; print list(partitions(4))
[[1, 1, 1, 1], [1, 1, 2], [2, 2], [1, 3], [4]]
</snippet></ROW><ROW><id>8331349</id><snippet>except pymongo.errors.OperationFailure</snippet></ROW><ROW><id>8331349</id><snippet>pymongo</snippet></ROW><ROW><id>8331349</id><snippet>except</snippet></ROW><ROW><id>8331349</id><snippet>pymongo.errors.OperationFailure</snippet></ROW><ROW><id>8331549</id><snippet>SELECT *
FROM l1, l2
WHERE l1.customer = l2.customer
</snippet></ROW><ROW><id>8331549</id><snippet>def join(t1,t2,column):
    result = []
    for entry in t2:
        for match in [d for d in t1 if d[column] == entry[column]]:
            result.append(dict((k,v) for k,v in entry.items()+match.items()))
    return result
</snippet></ROW><ROW><id>8331561</id><snippet>operator.itemgetter</snippet></ROW><ROW><id>8331561</id><snippet>__getitem__()</snippet></ROW><ROW><id>8331561</id><snippet>&gt;&gt;&gt; from operator import itemgetter
&gt;&gt;&gt; pick = itemgetter(0, 2)
&gt;&gt;&gt; pick("Jack and Jill went up the hill".split())
('Jack', 'Jill')
</snippet></ROW><ROW><id>8331561</id><snippet>&gt;&gt;&gt; user1, user2 = itemgetter(0, 2)("Jack and Jill went up the hill".split())
</snippet></ROW><ROW><id>8331898</id><snippet>os.walk</snippet></ROW><ROW><id>8331898</id><snippet>for root, subFolders, files in os.walk(rootdir,topdown=False):
</snippet></ROW><ROW><id>8331898</id><snippet>listFiles()</snippet></ROW><ROW><id>8331898</id><snippet>def listDirs(dir):
    for root, subFolders, files in os.walk(dir, topdown=False):
        for folder in subFolders:
           yield os.path.join(root,folder)
    return
</snippet></ROW><ROW><id>8332008</id><snippet>import urllib2,sys
from BeautifulSoup import BeautifulSoup

address = 'http://www.presidency.ucsb.edu/ws/index.php?pid=29644&amp;st=&amp;st1=#axzz1fD98kGZW'
soup = BeautifulSoup(urllib2.urlopen(address).read())

span = soup.find("span", {"class":"displaytext"})  # span.string gives you the first bit
paras = [x.contents[0] for x in span.findAllNext("p")]  # this gives you the rest
# use .contents[0] instead of .string to deal with last para that's not well formed

print "%s\n\n%s" % (span.string, "\n\n".join(paras))
</snippet></ROW><ROW><id>8332008</id><snippet>&lt;p&gt;</snippet></ROW><ROW><id>8332008</id><snippet>paras = ["".join(x.findAll(text=True)) for x in span.findAllNext("p")]
</snippet></ROW><ROW><id>8332008</id><snippet>&lt;p&gt;</snippet></ROW><ROW><id>8332008</id><snippet>import urllib2,sys
from BeautifulSoup import BeautifulSoup

address = 'http://www.presidency.ucsb.edu/ws/index.php?pid=29644&amp;st=&amp;st1=#axzz1fD98kGZW'
soup = BeautifulSoup(urllib2.urlopen(address).read())
span = soup.find("span", {"class":"displaytext"})  
paras = [x for x in span.findAllNext("p")]

start = span.string
middle = "\n\n".join(["".join(x.findAll(text=True)) for x in paras[:-1]])
last = paras[-1].contents[0]
print "%s\n\n%s\n\n%s" % (start, middle, last)
</snippet></ROW><ROW><id>8332117</id><snippet>sys.exit()</snippet></ROW><ROW><id>8332355</id><snippet>def is_valid(str1,list1):
    return str1 in list1
words=["BAD","CAB","BEC"]
def generate2(words,letters):
    answers=[]
    [[answers.append(''.join(x).upper()) for x in itertools.permutations(letters,length) if ''.join(x).upper() in words] for length in range(2,len(letters)+1)]
    #print(answers)
    return answers
</snippet></ROW><ROW><id>8332355</id><snippet>       word=''
        for let in x:
            word+=let
        if is_valid(word.upper(),words):
</snippet></ROW><ROW><id>8332355</id><snippet>is_valid(''.join(x).upper,words)</snippet></ROW><ROW><id>8332355</id><snippet>''.join(x).upper in words</snippet></ROW><ROW><id>8332355</id><snippet>&gt;&gt;&gt; stmt1="""
def is_valid(str1,list1):
    valid=False
    if str1 in list1:
        valid=True
    return valid
words=["BAD","CAB","BEC"]
def generate1(words,letters):
    answers=[]
    for length in range(2,len(letters)+1):
        for x in itertools.permutations(letters,length):
            word=''
            for let in x:
                word+=let
            if is_valid(word.upper(),words):
                answers.append(word)
                #print(word)
    #print(answers)
    return answers
generate1(words,['A','B','C','D','E'])
"""
&gt;&gt;&gt; 
&gt;&gt;&gt; stmt2="""
def is_valid(str1,list1):
    return str1 in list1
words=["BAD","CAB","BEC"]
def generate2(words,letters):
    answers=[]
    [[answers.append(''.join(x).upper()) for x in itertools.permutations(letters,length) if ''.join(x).upper() in words] for length in range(2,len(letters)+1)]
    #print(answers)
    return answers
generate2(words,['A','B','C','D','E'])
"""
&gt;&gt;&gt; 
&gt;&gt;&gt; t1=timeit.Timer(stmt=stmt1)
&gt;&gt;&gt; t2=timeit.Timer(stmt=stmt2)
&gt;&gt;&gt; t1.repeat(number=1000)
&gt;&gt;&gt; t2=timeit.Timer(stmt=stmt2)
&gt;&gt;&gt; t1.repeat(number=1000)
[0.47923321640178074, 0.4353549521401874, 0.4362746333173959]
&gt;&gt;&gt; t2.repeat(number=1000)
[0.2536238984591819, 0.2470974750062851, 0.24726312027155473]
</snippet></ROW><ROW><id>8332535</id><snippet>--with-http_ssl_module</snippet></ROW><ROW><id>8332535</id><snippet>./configure --help</snippet></ROW><ROW><id>8332535</id><snippet>--without-*</snippet></ROW><ROW><id>8332885</id><snippet>fig.autofmt_xdate(rotation = num)</snippet></ROW><ROW><id>8332885</id><snippet>ax</snippet></ROW><ROW><id>8332885</id><snippet>ax.twinx()</snippet></ROW><ROW><id>8332885</id><snippet>import matplotlib.pyplot as plt
import matplotlib.dates as md
import datetime as dt
import numpy as np

np.random.seed(0)
t=md.drange(dt.datetime(2009,10,1),
            dt.datetime(2010,1,15),
            dt.timedelta(days=1))
n=len(t)
x1 = np.cumsum(np.random.random(n) - 0.5) * 40000
x2 = np.cumsum(np.random.random(n) - 0.5) * 0.002

fig = plt.figure()
# fig.autofmt_xdate(rotation=25) # does not work
ax1 = fig.add_subplot(1,1,1)
fig.autofmt_xdate(rotation=25) # works
ax2 = ax1.twinx()
# fig.autofmt_xdate(rotation=25) # does not work
ax1.plot_date(t, x1, 'r-')
ax2.plot_date(t, x2, 'g-')
plt.show()
</snippet></ROW><ROW><id>8333497</id><snippet>class Parent(object):
    def __init__(self, a, b):
        print 'a', a
        print 'b', b

class Child(Parent):
    def __init__(self, c, d, *args, **kwargs):
        print 'c', c
        print 'd', d
        super(Child, self).__init__(*args, **kwargs)

test = Child(1,2,3,4)
</snippet></ROW><ROW><id>8333673</id><snippet>def echo (self, arg=None, sep=' ', end='\n', rndcase=True, txtspeed=0.03, bnum=0, spsw=True):
    print cursave, 
    self.cursor_invisible()

    # do you have to do all this ? 
    # c0m4: Only if you need all of those to be accessible for the spin object when echo ends
    self.arg=arg
    self.sep=sep
    self.end=end
    self.rndcase=rndcase
    self.txtspeed=txtspeed
    self.bnum=bnum
    self.spsw=spsw

    pos=0
    cmd, txt = [reset], []
    spsw=True
    last_colour=''
    txtpos=0
    if arg:

# test if spinner is wanted and set the text position to be moved across a bit to allow for it
    if spsw is True:
    txtpos=4
    self.start()
</snippet></ROW><ROW><id>8333673</id><snippet>self.running = False
</snippet></ROW><ROW><id>8333673</id><snippet>self.running = True
</snippet></ROW><ROW><id>8333673</id><snippet>if not self.running:
    self.start()
</snippet></ROW><ROW><id>8333673</id><snippet>def resetThread():
    self.pos = 0
</snippet></ROW><ROW><id>8333916</id><snippet>import</snippet></ROW><ROW><id>8333916</id><snippet>.pyc</snippet></ROW><ROW><id>8333916</id><snippet>.py</snippet></ROW><ROW><id>8333916</id><snippet>.pyc</snippet></ROW><ROW><id>8333964</id><snippet>&gt;&gt;&gt; import pickle
&gt;&gt;&gt; d = {'name':'same'}
&gt;&gt;&gt; ds = pickle.dumps([d,d])
&gt;&gt;&gt; newd = pickle.loads(ds)
&gt;&gt;&gt; newd[0]['name'] = 'different'
&gt;&gt;&gt; newd
[{'name': 'different'}, {'name': 'different'}]
</snippet></ROW><ROW><id>8333964</id><snippet>&gt;&gt;&gt; import json
&gt;&gt;&gt; ds = json.dumps([d,d])
&gt;&gt;&gt; newd = json.loads(ds)
&gt;&gt;&gt; newd[0]['name'] = 'different'
&gt;&gt;&gt; newd
[{u'name': 'different'}, {u'name': u'same'}]
</snippet></ROW><ROW><id>8334091</id><snippet>if c == ord('q'):
    subprocess.call('reset', shell=False)
    break
</snippet></ROW><ROW><id>8334382</id><snippet>set(a) == set(b)</snippet></ROW><ROW><id>8334382</id><snippet>sorted(a) == sorted(b)</snippet></ROW><ROW><id>8334382</id><snippet>len(a) == len(b) and all(x in b for x in a)</snippet></ROW><ROW><id>8334382</id><snippet>Counter(a) == Counter(b)</snippet></ROW><ROW><id>8334382</id><snippet>sorted(a) == sorted(b)</snippet></ROW><ROW><id>8334382</id><snippet>len(a) == len(b) and all(a.count(x) == b.count(x) for x in a)</snippet></ROW><ROW><id>8334414</id><snippet>'a+'</snippet></ROW><ROW><id>8334414</id><snippet>import pickle 
lists = [1,2,3,4,5]

f = open('tmp_pickle.pic', 'wb')
pickle.dump(lists, f)
f.close()

f = open('tmp_pickle.pic', 'rb')
unpickledlist = pickle.load(f)
print unpickledlist
</snippet></ROW><ROW><id>8334700</id><snippet>pip install -r requirements.txt
</snippet></ROW><ROW><id>8334700</id><snippet>pip install django-cms
</snippet></ROW><ROW><id>8334726</id><snippet>if isinstance(section, SectionHeading)
</snippet></ROW><ROW><id>8334726</id><snippet>Section</snippet></ROW><ROW><id>8334726</id><snippet>if hasattr(section, 'sectionheading')
</snippet></ROW><ROW><id>8334726</id><snippet>try:
    do_something_with(section.sectionheading)
except AttributeError:
    pass  # i guess it wasn't one of those
</snippet></ROW><ROW><id>8334848</id><snippet>address</snippet></ROW><ROW><id>8334892</id><snippet>$ python3.2
Python 3.2.2 (default, Sep  5 2011, 22:09:30) 
[GCC 4.6.1] on linux2
Type "help", "copyright", "credits" or "license" for more information.
&gt;&gt;&gt; sqlstring = 'INSERT INTO {}'
&gt;&gt;&gt; table = 'Product'
&gt;&gt;&gt; sqlstring.format(table)
'INSERT INTO Product'
&gt;&gt;&gt; 
</snippet></ROW><ROW><id>8334892</id><snippet>sqlstring = sqlstring.format(table)
</snippet></ROW><ROW><id>8334892</id><snippet>format()</snippet></ROW><ROW><id>8335038</id><snippet>
item.active = not item.active
</snippet></ROW><ROW><id>8335042</id><snippet>subprocess.Popen()</snippet></ROW><ROW><id>8335042</id><snippet>sys.executable</snippet></ROW><ROW><id>8335042</id><snippet>Popen()</snippet></ROW><ROW><id>8335212</id><snippet>taskkill /im python.exe</snippet></ROW><ROW><id>8335661</id><snippet>requests</snippet></ROW><ROW><id>8335661</id><snippet>lxml</snippet></ROW><ROW><id>8335661</id><snippet>Scrapy</snippet></ROW><ROW><id>8335670</id><snippet>sort -u file1 file2 ...
</snippet></ROW><ROW><id>8335722</id><snippet>QSplashScreen.setMask</snippet></ROW><ROW><id>8335722</id><snippet>from PyQt4 import QtGui, QtCore

def show_splash(path):
    image = QtGui.QPixmap(path)
    splash = QtGui.QSplashScreen(image)
    splash.setAttribute(QtCore.Qt.WA_DeleteOnClose)
    splash.setMask(image.mask())
    font = QtGui.QFont(splash.font())
    font.setPointSize(font.pointSize() + 5)
    splash.setFont(font)
    splash.show()
    QtGui.QApplication.processEvents()
    for count in range(1, 6):
        splash.showMessage(splash.tr('Processing %1...').arg(count),
                           QtCore.Qt.AlignBottom | QtCore.Qt.AlignLeft,
                           QtCore.Qt.white)
        QtGui.QApplication.processEvents()
        QtCore.QThread.msleep(1000)

if __name__ == '__main__':

    import sys
    app = QtGui.QApplication(sys.argv)
    show_splash(sys.argv[1])
    app.quit()
</snippet></ROW><ROW><id>8335722</id><snippet>from PyQt4 import QtGui, QtCore

class SplashScreen(QtGui.QWidget):
    def __init__(self, pixmap):
        QtGui.QWidget.__init__(self)
        self._pixmap = pixmap
        self._message = QtCore.QString()
        self._color = QtGui.QColor.black
        self._alignment = QtCore.Qt.AlignLeft
        self.setWindowFlags(QtCore.Qt.FramelessWindowHint |
                            QtCore.Qt.WindowStaysOnTopHint)
        self.setAttribute(QtCore.Qt.WA_TranslucentBackground)
        self.setAttribute(QtCore.Qt.WA_DeleteOnClose)
        self.setFixedSize(self._pixmap.size())
        self.setMask(self._pixmap.mask())

    def clearMessage(self):
        self._message.clear()
        self.repaint()

    def showMessage(self, message, alignment=QtCore.Qt.AlignLeft,
                                   color=QtGui.QColor.black):
        self._message = QtCore.QString(message)
        self._alignment = alignment
        self._color = color
        self.repaint()

    def paintEvent(self, event):
        textbox = QtCore.QRect(self.rect())
        textbox.setRect(textbox.x() + 5, textbox.y() + 5,
                        textbox.width() - 10, textbox.height() - 10)
        painter = QtGui.QPainter(self)
        painter.drawPixmap(self.rect(), self._pixmap)
        painter.setPen(QtGui.QColor(self._color))
        painter.drawText(textbox, self._alignment, self._message)

    def mousePressEvent(self, event):
        self.hide()

def show_splash(path):
    image = QtGui.QPixmap(path)
    splash = SplashScreen(image)
    font = QtGui.QFont(splash.font())
    font.setPointSize(font.pointSize() + 5)
    splash.setFont(font)
    splash.show()
    QtGui.QApplication.processEvents()
    for count in range(1, 6):
        splash.showMessage(splash.tr('Processing %1...').arg(count),
                           QtCore.Qt.AlignCenter, QtCore.Qt.white)
        QtGui.QApplication.processEvents()
        QtCore.QThread.msleep(1000)
    splash.hide()
    splash.close()

if __name__ == '__main__':

    import sys
    app = QtGui.QApplication(sys.argv)
    show_splash(sys.argv[1])
    app.quit()
</snippet></ROW><ROW><id>8335946</id><snippet>super()</snippet></ROW><ROW><id>8335946</id><snippet>help(super)</snippet></ROW><ROW><id>8335946</id><snippet>class super(object)
 |  super(type) -&gt; unbound super object
 |  super(type, obj) -&gt; bound super object; requires isinstance(obj, type)
 |  super(type, type2) -&gt; bound super object; requires issubclass(type2, type)
 |  Typical use to call a cooperative superclass method:
 |  class C(B):
 |      def meth(self, arg):
 |          super(C, self).meth(arg)
</snippet></ROW><ROW><id>8336113</id><snippet>exec</snippet></ROW><ROW><id>8336113</id><snippet>from __future__ import division
from math import *
def solution_handler(self, input):
    return eval(input)
</snippet></ROW><ROW><id>8336166</id><snippet>def load_everything_from(module_names):
    g = globals()
    for module_name in module_names:
        m = __import__(module_name)
        names = getattr(m, '__all__', None)
        if names is None:
            names = [name for name in dir(m) if not name.startswith('_')]
        for name in names:
            g[name] = getattr(m, name)
</snippet></ROW><ROW><id>8336166</id><snippet>__all__</snippet></ROW><ROW><id>8336166</id><snippet>dir()</snippet></ROW><ROW><id>8336166</id><snippet>import *</snippet></ROW><ROW><id>8337012</id><snippet>%</snippet></ROW><ROW><id>8337012</id><snippet>print '%+d' % score
</snippet></ROW><ROW><id>8337012</id><snippet>str.format</snippet></ROW><ROW><id>8337012</id><snippet>print '{0:+d}'.format(score)
</snippet></ROW><ROW><id>8337142</id><snippet>form = browser.forms()[0]
control = form.find_control(name="ctl00$SPWebPartManager1$g_9bdf5859_9c73_4144_8b6a_9a3b3df417d5$ctl01$ddlBrand")
</snippet></ROW><ROW><id>8337218</id><snippet>a = b - c</snippet></ROW><ROW><id>8337218</id><snippet>sumOfQuantity</snippet></ROW><ROW><id>8337218</id><snippet>sumOfQuantity = Booking.objects.filter(date_select='2011-11-29').aggregate(Sum('quantity'))['quantity__sum']
</snippet></ROW><ROW><id>8337264</id><snippet>from django.core.files.storage import FileSystemStorage

class MyFileStorage(FileSystemStorage):

    # This method is actually defined in Storage
    def get_available_name(self, name):
      return name # simply returns the name passed
</snippet></ROW><ROW><id>8337264</id><snippet>from mystuff.customs import MyFileStorage

mfs = MyFileStorage()

class SomeModel(model.Model):
   my_file = model.FileField(storage=mfs)
</snippet></ROW><ROW><id>8337354</id><snippet>subprocess.Popen(whatever, stdin=sys.stdout, stdout=sys.stdin)
</snippet></ROW><ROW><id>8337354</id><snippet>sys.stdin</snippet></ROW><ROW><id>8337354</id><snippet>sys.stdout</snippet></ROW><ROW><id>8337354</id><snippet>subprocess.Popen</snippet></ROW><ROW><id>8337354</id><snippet>fileno</snippet></ROW><ROW><id>8337452</id><snippet>self.response.out.write("&lt;form action=\"/HugPanda\" method=\"post\"&gt;&lt;div&gt;&lt;input type=\"text\" name=\"PandaMessage\" value=\"A message for a panda.\"&gt;&lt;/div&gt;&lt;div&gt;&lt;input type=\"submit\" value=\"Hug a panda?\"&gt;&lt;/div&gt;&lt;/form&gt;&lt;/body&gt;&lt;/html&gt;"&gt;
</snippet></ROW><ROW><id>8337452</id><snippet>self.response.out.write('''&lt;html&gt;
  &lt;body&gt;
    &lt;h6&gt;Panda has %s hugs!&lt;/h6&gt;
      &lt;form action="/HugPanda" method="post"&gt;
        &lt;div&gt;
          &lt;input type="text" name="PandaMessage" value=
          "A message for a panda."&gt;
        &lt;/div&gt;
        &lt;div&gt;
          &lt;input type="submit" value="Hug a panda?"&gt;
        &lt;/div&gt;
      &lt;/form&gt;
  &lt;/body&gt;
&lt;/html&gt;''' % Adder)
</snippet></ROW><ROW><id>8337482</id><snippet>def linematcher(haystack, needles, lineNumbers):
    f = open(needles)
    needles = [line.strip() for n, line in enumerate(f, 1) if n in lineNumbers]
    f.close()

    hsubs = set(hash(s) for s in needles)
    for n, lineWithNewline in enumerate(open(haystack), 1):
        line = lineWithNewline.strip()
        hs = hash(line)
        if hs in hsubs and line in needles:
            print "{0} ===&gt; {1}".format(lineNumbers[needles.index(line)], n)
</snippet></ROW><ROW><id>8337482</id><snippet>old_foo.txt</snippet></ROW><ROW><id>8337482</id><snippet>new_foo.txt</snippet></ROW><ROW><id>8337482</id><snippet>linematcher('new_foo.txt', 'old_foo.txt', [1, 3, 4])
</snippet></ROW><ROW><id>8337482</id><snippet>1 ===&gt; 1
3 ===&gt; 4
4 ===&gt; 6
</snippet></ROW><ROW><id>8337489</id><snippet>&gt;&gt;&gt; from itertools import compress, count, imap, islice
&gt;&gt;&gt; from functools import partial
&gt;&gt;&gt; from operator import eq

&gt;&gt;&gt; def nth_item(n, item, iterable):
        indicies = compress(count(), imap(partial(eq, item), iterable))
        return next(islice(indicies, n, None), -1)
</snippet></ROW><ROW><id>8337489</id><snippet>&gt;&gt;&gt; x = [False,True,True,False,True,False,True,False,False,False,True,False,True]
&gt;&gt;&gt; nth_item(50, True, x)
-1
&gt;&gt;&gt; nth_item(0, True, x)
1
&gt;&gt;&gt; nth_item(1, True, x)
2
&gt;&gt;&gt; nth_item(2, True, x)
4
&gt;&gt;&gt; nth_item(3, True, x)
6
</snippet></ROW><ROW><id>8337629</id><snippet>[i for (i,e) in enumerate(list) if e==1][5]
</snippet></ROW><ROW><id>8337997</id><snippet>x[::2] = itertools.repeat(False)
</snippet></ROW><ROW><id>8337997</id><snippet>x[::2]</snippet></ROW><ROW><id>8337997</id><snippet>itertools.repeat(False)</snippet></ROW><ROW><id>8337997</id><snippet>list_ass_slice</snippet></ROW><ROW><id>8337997</id><snippet>v_as_SF = PySequence_Fast(v, "can only assign an iterable");
if(v_as_SF == NULL)
    goto Error;
n = PySequence_Fast_GET_SIZE(v_as_SF);
</snippet></ROW><ROW><id>8337997</id><snippet>n</snippet></ROW><ROW><id>8337997</id><snippet>PySequence_Fast</snippet></ROW><ROW><id>8337997</id><snippet>PySequence_List</snippet></ROW><ROW><id>8337997</id><snippet>listextend()</snippet></ROW><ROW><id>8337997</id><snippet>/* Run iterator to exhaustion. */
for (;;) {
</snippet></ROW><ROW><id>8337997</id><snippet>numpy.array</snippet></ROW><ROW><id>8337997</id><snippet>itertools.repeat</snippet></ROW><ROW><id>8337997</id><snippet>&gt;&gt;&gt; import numpy, itertools
&gt;&gt;&gt; x = numpy.ones(10,dtype='bool')
&gt;&gt;&gt; x[::2] = itertools.repeat(False)
&gt;&gt;&gt; x
array([ True,  True,  True,  True,  True,  True,  True,  True,  True,  True], dtype=bool)
&gt;&gt;&gt; #but the scalar assignment does work as advertised...
&gt;&gt;&gt; x = numpy.ones(10,dtype='bool')
&gt;&gt;&gt; x[::2] = False
&gt;&gt;&gt; x
array([False,  True, False,  True, False,  True, False,  True, False,  True], dtype=bool)
</snippet></ROW><ROW><id>8338010</id><snippet>sys.path</snippet></ROW><ROW><id>8338010</id><snippet>import sys
sys.path.insert(0, '/home/miki725/django/django')
</snippet></ROW><ROW><id>8338010</id><snippet>export PYTHONSTARTUP=/home/miki725/.pythonrc</snippet></ROW><ROW><id>8338010</id><snippet>.bash_profile</snippet></ROW><ROW><id>8338010</id><snippet>.pythonrc</snippet></ROW><ROW><id>8338373</id><snippet>class BaseHandler(webapp2.RequestHandler):
    ...
    def render_jinja(self, name, **data):
        data['logout_url']=users.create_logout_url(self.request.uri)
        template = jinja_environment.get_template('templates/'+name+'.html')
        self.response.out.write(template.render(data))
</snippet></ROW><ROW><id>8338373</id><snippet>class FileUploadFormHandler(BaseHandler):
    def get(self):
        ...
        self.render_jinja('contact_jinja', form=form, ...
</snippet></ROW><ROW><id>8338794</id><snippet>platform.dist</snippet></ROW><ROW><id>8338794</id><snippet>&gt;&gt;&gt; platform.dist()
('Ubuntu', '11.10', 'oneiric')
</snippet></ROW><ROW><id>8339400</id><snippet>for s in my_str.replace(' ', '').split('^'):
    print s
</snippet></ROW><ROW><id>8339400</id><snippet>print repr(my_str.replace(' ', ''))
</snippet></ROW><ROW><id>8339626</id><snippet>for person in MyMydel.objects.all():
    do_something_with(person.name)
</snippet></ROW><ROW><id>8339626</id><snippet>MyMode.objects.values('name', 'age', 'address')
</snippet></ROW><ROW><id>8339634</id><snippet>from struct import *
from socket import *

for ip in xrange(unpack('!I',inet_pton(AF_INET,"1.47.0.0"))[0],unpack('!I',inet_pton(AF_INET,"1.51.255.255"))[0]):
    print inet_ntop(AF_INET,pack('!I',ip));

f = unpack('!I',inet_pton(AF_INET,"1.47.0.0"))[0]
l = unpack('!I',inet_pton(AF_INET,"1.51.255.255"))[0]
while f &lt; l:
    print inet_ntop(AF_INET,pack('!I',f));
    f = f + 1
</snippet></ROW><ROW><id>8339710</id><snippet>code</snippet></ROW><ROW><id>8339710</id><snippet>.func_code</snippet></ROW><ROW><id>8339710</id><snippet>&gt;&gt;&gt; def bar(x):
...     def foo():
...         return x
...     return foo
... 
&gt;&gt;&gt; f1 = bar(1)
&gt;&gt;&gt; f2 = bar(2)
&gt;&gt;&gt; f1()
1
&gt;&gt;&gt; f2()
2
&gt;&gt;&gt; f1.func_code is f2.func_code
True
&gt;&gt;&gt; 
</snippet></ROW><ROW><id>8339781</id><snippet>def sign_request():
    from hashlib import sha1
    import hmac
    import binascii

    # If you dont have a token yet, the key should be only "CONSUMER_SECRET&amp;"
    key = "CONSUMER_SECRET&amp;TOKEN_SECRET" 

    # The Base String as specified here: 
    raw = "BASE_STRING" # as specified by oauth

    hashed = hmac.new(key, raw, sha1)

    # The signature
    return binascii.b2a_base64(hashed.digest())[:-1]
</snippet></ROW><ROW><id>8339781</id><snippet>file=vacation.jpg&amp;oauth_consumer_key=dpf43f3p2l4k3l03&amp;
oauth_nonce=kllo9940pd9333jh&amp;oauth_signature_method=HMAC-SHA1&amp;oauth_timestamp=1191242096&amp;
oauth_token=nnch734d00sl2jdk&amp;
oauth_version=1.0&amp;size=original</snippet></ROW><ROW><id>8339781</id><snippet>GET&amp;http%3A%2F%2Fphotos.example.net%2Fphotos&amp;file%3Dvacation.jpg%26
oauth_consumer_key%3Ddpf43f3p2l4k3l03%26oauth_nonce%3Dkllo9940pd9333jh%26
oauth_signature_method%3DHMAC-SHA1%26oauth_timestamp%3D1191242096%26
oauth_token%3Dnnch734d00sl2jdk%26oauth_version%3D1.0%26size%3Doriginal</snippet></ROW><ROW><id>8339968</id><snippet>txt = "Hello Steve"</snippet></ROW><ROW><id>8340033</id><snippet>WebDriverWait(driver, 10).until(lambda driver : driver.title.lower().startswith("cheese!"))
</snippet></ROW><ROW><id>8340233</id><snippet>import Image</snippet></ROW><ROW><id>8340233</id><snippet>[me@oldserver]$ cat /usr/lib/python2.4/site-packages/PIL.pth
PIL
</snippet></ROW><ROW><id>8340233</id><snippet>import Image</snippet></ROW><ROW><id>8340233</id><snippet>from PIL import Image</snippet></ROW><ROW><id>8340233</id><snippet>.pth</snippet></ROW><ROW><id>8340233</id><snippet>/some/install/path/PIL</snippet></ROW><ROW><id>8340617</id><snippet>import re

def ind_sbt(text,indent='\t'):
    return text.replace('\n','\n%s' % (indent,))

def adjust_indents(fmtstr,*args):
    """Hacky, crude detection of identation level"""
    indented_substitutions = re.compile(r'\n(\s+)%s')
    return fmtstr % tuple([ ind_sbt(arg,indent=i) for (arg,i) in zip(args,indented_substitutions.findall(fmtstr))])

p1 = p2 = p3 = p4 = "foo\nbar"

print adjust_indents('''
&lt;
    %s
    &lt;
        %s
        %s
        &lt;
            %s
        &gt;
    &gt;
&gt;
''',p1,p2,p3,p4)
</snippet></ROW><ROW><id>8340617</id><snippet>&lt;
        foo
        bar
        &lt;
                foo
                bar
                foo
                bar
                &lt;
                        foo
                        bar
                &gt;
        &gt;
&gt;
</snippet></ROW><ROW><id>8340843</id><snippet>ReferenceField</snippet></ROW><ROW><id>8340843</id><snippet>another_field   = ReferenceField('Bar')
</snippet></ROW><ROW><id>8341285</id><snippet>n</snippet></ROW><ROW><id>8341285</id><snippet>import random
def shuffle_n(s, n):
  idx = range(len(s))
  random.shuffle(idx)
  idx = idx[:n]
  mapping = dict((idx[i], idx[i-1]) for i in range(n))
  return ''.join(s[mapping.get(x,x)] for x in range(len(s)))
</snippet></ROW><ROW><id>8341285</id><snippet>n</snippet></ROW><ROW><id>8341285</id><snippet>n</snippet></ROW><ROW><id>8341285</id><snippet>idx is [0, 1, 2, 3, 4, 5]
we shuffle it, now it is [5, 3, 1, 4, 0, 2]
we take just the first 3 elements, now it is [5, 3, 1]
those are the characters that we are going to swap
s t r i n g
  ^   ^   ^
t (1) will be i (3)
i (3) will be g (5)
g (5) will be t (1)
the rest will remain unchanged
so we get 'sirgnt'
</snippet></ROW><ROW><id>8341285</id><snippet>import random

def randparts(l):
    n = len(l)
    s = random.randint(0, n-1) + 1
    if s &gt;= 2 and n - s &gt;= 2: # the split makes two valid parts
        yield l[:s]
        for p in randparts(l[s:]):
            yield p
    else: # the split would make a single cycle
        yield l

def shuffle_n(s, n):
    idx = range(len(s))
    random.shuffle(idx)
    mapping = dict((x[i], x[i-1])
        for i in range(len(x))
        for x in randparts(idx[:n]))
    return ''.join(s[mapping.get(x,x)] for x in range(len(s)))
</snippet></ROW><ROW><id>8341353</id><snippet>visit</snippet></ROW><ROW><id>8341353</id><snippet>generic_visit</snippet></ROW><ROW><id>8341353</id><snippet>NodeVisitor.generic_visit</snippet></ROW><ROW><id>8342021</id><snippet>permutations</snippet></ROW><ROW><id>8342021</id><snippet>combinations</snippet></ROW><ROW><id>8342021</id><snippet>import itertools

a = 'ABCD'
k = 2

for p in itertools.permutations(a, k):
    print "".join(p),
</snippet></ROW><ROW><id>8342021</id><snippet>permutations(iterable[,r])</snippet></ROW><ROW><id>8342046</id><snippet>a = models.Object1.get_or_create(f__pk=foreign_object_id)
</snippet></ROW><ROW><id>8342273</id><snippet>sum()</snippet></ROW><ROW><id>8342273</id><snippet>total = float(sum(counts))
</snippet></ROW><ROW><id>8342273</id><snippet>frequencies.append(count/float(total))
</snippet></ROW><ROW><id>8342760</id><snippet>self.box = Pmw.ScrolledListBox(...).grid(row=12, column=0, ipadx=30, ipady=30)
</snippet></ROW><ROW><id>8342760</id><snippet>None</snippet></ROW><ROW><id>8342760</id><snippet>self.box</snippet></ROW><ROW><id>8342760</id><snippet>None</snippet></ROW><ROW><id>8342760</id><snippet>self.box.curselection</snippet></ROW><ROW><id>8342760</id><snippet>self.box = Pmw.ScrolledListBox(...)
self.box.grid(...)
</snippet></ROW><ROW><id>8343031</id><snippet>data = open("data.txt", "r")

last_time = 0.0
last_ip = None
last_hash = None

for line in data:
        timestamp, ip, hash_value = line.split()
        if ip==last_ip and hash_value==last_hash and float(timestamp) - float(last_time) &lt; 5.0:
                print "Remove ", line
        else:
                print "Keep ", line
        last_time, last_ip, last_hash = timestamp, ip, hash_value
</snippet></ROW><ROW><id>8343405</id><snippet>class Reader(object): # Assuming Python &lt;= 2.7
    def __init__(self, fname):
        self.fname = fname

    def __iter__(self):
        yield 1
        yield 2

r = Reader("some file")
print r.fname ## 'some file'
for line in r:
    print line ## 1 then 2
</snippet></ROW><ROW><id>8343469</id><snippet>h = d.hour + d.minute / 60. + d.second / 3600.
</snippet></ROW><ROW><id>8343480</id><snippet>class DependentProperty(object):
    def __init__(self, calculate=None, default=None, depends_on=()):
        # "name" and "dependence_tree" properties are attributes
        # set up by the metaclass of the owner class
        if calculate:
            self.calculate = calculate
        else:
            self.default = default
        self.depends_on = set(depends_on)

    def __get__(self, instance, owner):
        if hasattr(self, "default"):
            return self.default
        if not hasattr(instance, "_" + self.name):
            setattr(instance, "_" + self.name,
                self.calculate(instance, getattr(instance, "_" + self.name + "_last_value")))
        return getattr(instance, "_" + self.name)

    def __set__(self, instance, value):
        setattr(instance, "_" + self.name + "_last_value", value)
        setattr(instance, "_" + self.name, self.calculate(instance, value))
        for attr in self.dependence_tree[self.name]:
            delattr(instance, attr)

    def __delete__(self, instance):
        try:
            delattr(instance, "_" + self.name)
        except AttributeError:
            pass


def assemble_tree(name,  dict_, all_deps = None):
    if all_deps is None:
        all_deps = set()
    for dependance in dict_[name].depends_on:
        all_deps.add(dependance)
        assemble_tree(dependance, dict_, all_deps)
    return all_deps

def invert_tree(tree):
    new_tree = {}
    for key, val in tree.items():
        for dependence in val:
            if dependence not in new_tree:
                new_tree[dependence] = set()
            new_tree[dependence].add(key)
    return new_tree

class DependenceMeta(type):
    def __new__(cls, name, bases, dict_):
        dependence_tree = {}
        properties = []
        for key, val in dict_.items():
            if not isinstance(val, DependentProperty):
                continue
            val.name = key
            val.dependence_tree = dependence_tree
            dependence_tree[key] = set()
            properties.append(val)
        inverted_tree = {}
        for property in properties:
            inverted_tree[property.name] = assemble_tree(property.name, dict_)
        dependence_tree.update(invert_tree(inverted_tree))
        return type.__new__(cls, name, bases, dict_)


if __name__ == "__main__":
    # Example and visual test:

    class Bla:
        __metaclass__ = DependenceMeta

        def calc_b(self, x):
            print "Calculating b"
            return x + self.a

        def calc_c(self, x):
            print "Calculating c"
            return x + self.b

        a = DependentProperty(default=10)    
        b = DependentProperty(depends_on=("a",), calculate=calc_b)
        c = DependentProperty(depends_on=("b",), calculate=calc_c)




    bla = Bla()
    bla.b = 5
    bla.c = 10

    print bla.a, bla.b, bla.c
    bla.b = 10
    print bla.b
    print bla.c
</snippet></ROW><ROW><id>8343657</id><snippet>def init(self):</snippet></ROW><ROW><id>8343657</id><snippet>__init__</snippet></ROW><ROW><id>8343657</id><snippet>__new__</snippet></ROW><ROW><id>8343876</id><snippet>&gt;&gt;&gt; john = Author.objects.create(name="John")
&gt;&gt;&gt; paul = Author.objects.create(name="Paul")
&gt;&gt;&gt; george = Author.objects.create(name="George")
&gt;&gt;&gt; ringo = Author.objects.create(name="Ringo")
&gt;&gt;&gt; entry.authors.add(john, paul, george, ringo)
</snippet></ROW><ROW><id>8343876</id><snippet>a.many_b.add(*list_of_b)
</snippet></ROW><ROW><id>8344138</id><snippet>A-S-B</snippet></ROW><ROW><id>8344138</id><snippet>A-S</snippet></ROW><ROW><id>8344138</id><snippet>S-B</snippet></ROW><ROW><id>8344138</id><snippet>S-B</snippet></ROW><ROW><id>8344138</id><snippet>S-A</snippet></ROW><ROW><id>8344138</id><snippet>S-B</snippet></ROW><ROW><id>8344138</id><snippet>A-S</snippet></ROW><ROW><id>8344149</id><snippet>def apply_all(functions, item):
    for f in functions:
        yield f(item)
</snippet></ROW><ROW><id>8344149</id><snippet>functions = [type, id, hex]
for result in apply_all(functions, 55):
    print result
</snippet></ROW><ROW><id>8344149</id><snippet>&lt;type 'int'&gt;
20326112
0x37
</snippet></ROW><ROW><id>8344979</id><snippet>import random
s = 'this is a lower case string'

''.join(random.choice((str.upper,str.lower))(x) for x in s)
</snippet></ROW><ROW><id>8344979</id><snippet>random.choice</snippet></ROW><ROW><id>8344979</id><snippet>str.upper</snippet></ROW><ROW><id>8344979</id><snippet>str.lower</snippet></ROW><ROW><id>8344979</id><snippet>x</snippet></ROW><ROW><id>8344979</id><snippet>s</snippet></ROW><ROW><id>8344979</id><snippet>''.join(x.upper() if random.randint(0,1) else x for x in s)
</snippet></ROW><ROW><id>8344979</id><snippet>str.lowercase</snippet></ROW><ROW><id>8344979</id><snippet>str.upper</snippet></ROW><ROW><id>8344979</id><snippet>str.upper</snippet></ROW><ROW><id>8345238</id><snippet>get_length</snippet></ROW><ROW><id>8345238</id><snippet>get_length_get_width_get_depth</snippet></ROW><ROW><id>8345238</id><snippet>length,width,depth = get_length_get_width_get_depth("What is the length of the object?","What is the depth?", "What is the width?")
</snippet></ROW><ROW><id>8345238</id><snippet>def get_length_get_width_get_depth(ask_for_length,ask_for_width,ask_for_depth):

    "Ask the user for the object's length,width, and depth"

    length = raw_input(ask_for_length)
    width = raw_input(ask_for_width)
    depth = raw_input(ask_for_depth)

    return  length,width,depth

response = get_length_get_width_get_depth("What is the length of the object?",
                                          "What is the depth?",
                                          "What is the width?")

print "\nThe object's length,width, and depth is %s,%s, and %s, respectively" %\
        response
</snippet></ROW><ROW><id>8345533</id><snippet>...
&gt;&gt;&gt; c = zeros((a.shape[0],a.shape[1]), dtype=a.dtype)
&gt;&gt;&gt; c[:,:] = a[:,:,0]
&gt;&gt;&gt; cv2.imwrite('out.jpg', c)
True
</snippet></ROW><ROW><id>8345569</id><snippet>show_p=re.compile("(.*)\.s(\d*)e(\d*)")
show_p.match(x).groups()
</snippet></ROW><ROW><id>8345569</id><snippet>show_p=re.compile("^(.*)\.s(\d*)e(\d*).*?([^\.]*)$")
show_p.match(x).groups()
</snippet></ROW><ROW><id>8345569</id><snippet>&gt;&gt;&gt; show_p=re.compile("(.*)\.s(\d*)e(\d*).*?([^\.]*)$")
&gt;&gt;&gt; x="tv_show.s01e01.episode_name.avi"
&gt;&gt;&gt; show_p.match(x).groups()
('tv_show', '01', '01', 'avi')
&gt;&gt;&gt; x="tv_show.s2e1.episode_name.avi"
&gt;&gt;&gt; show_p.match(x).groups()
('tv_show', '2', '1', 'avi')
&gt;&gt;&gt; x='some.other.tv.show.s04e05.episode_name.avi'
&gt;&gt;&gt; show_p.match(x).groups()
('some.other.tv.show', '04', '05', 'avi')
&gt;&gt;&gt;  
</snippet></ROW><ROW><id>8345611</id><snippet>GET
https://www.googleapis.com/taskqueue/v1beta1/projects/{PROJECT_NAME}/taskqueues/{TASKQUEUE_NAME}/tasks/{TASK_NAME}
</snippet></ROW><ROW><id>8345864</id><snippet>parse</snippet></ROW><ROW><id>8345864</id><snippet>parse_page</snippet></ROW><ROW><id>8345864</id><snippet>parse</snippet></ROW><ROW><id>8345866</id><snippet>print '{0:.10f}'.format(1.0e-9)
</snippet></ROW><ROW><id>8346130</id><snippet>mylist[-1]</snippet></ROW><ROW><id>8346130</id><snippet>mylist</snippet></ROW><ROW><id>8346130</id><snippet>mylist[-2]</snippet></ROW><ROW><id>8346171</id><snippet>from matplotlib import rc
rc('text', usetex=True)
plt.xticks(ind+width/2., ("$\lozenge$", "$\square$", "$\plus$", "o", "$\bigtriangledown$") )
</snippet></ROW><ROW><id>8346176</id><snippet>random.choice</snippet></ROW><ROW><id>8346176</id><snippet>list1</snippet></ROW><ROW><id>8346176</id><snippet>list2</snippet></ROW><ROW><id>8346176</id><snippet>a = random.choice(list1)
b = random.choice(list2)
</snippet></ROW><ROW><id>8346176</id><snippet>random.seed</snippet></ROW><ROW><id>8346176</id><snippet>&gt;&gt;&gt; def not_very_random():
...     random.seed(0)
...     return random.choice(range(10))
... 
&gt;&gt;&gt; not_very_random()
8
&gt;&gt;&gt; not_very_random()
8
&gt;&gt;&gt; not_very_random()
8
&gt;&gt;&gt; not_very_random()
8
</snippet></ROW><ROW><id>8346216</id><snippet>width</snippet></ROW><ROW><id>8346216</id><snippet>#include &lt;iostream&gt;
#include &lt;list&gt;
#include &lt;utility&gt;
#include &lt;vector&gt;
using namespace std;

void likeCPlusPlus()
{
    int i = 666, j = 666, width = 666, height = 666, image[666][666];

    for( int dy = 1;  dy &gt;= -1;  --dy )
    {
        int const   dx  = -1;
        int const   x   = i + dx;
        int const   y   = j + dy;

        if(
            0 &lt;= x &amp;&amp; x &lt; width &amp;&amp;
            0 &lt;= y &amp;&amp; y &lt; height &amp;&amp;
            image[x][y] == 0
            )
        {}
    }
}

void likePythonInCPlusPlus()
{
    int i = 666, j = 666, width = 666, image[666][666];

    std::vector&lt;std::pair&lt;int,int&gt; &gt; direction;
    direction.push_back(std::make_pair(-1,1));
    direction.push_back(std::make_pair(-1,0));
    direction.push_back(std::make_pair(-1,-1));
    for ( std::vector&lt;std::pair&lt;int,int&gt; &gt;::iterator itr = direction.begin(); 
                       itr != direction.end(); ++itr)
    {
        int m = (*itr).first;
        int n = (*itr).second;
        if ( (0 &lt;= i + m &amp;&amp; i + m &lt; width ) &amp;&amp; 
                       (0 &lt;= j + n &amp;&amp; j + n &lt; width ) &amp;&amp; 
                       image[i + m][j + n ] == 0)
        {}
    }
}

int main()
{}
</snippet></ROW><ROW><id>8346265</id><snippet>from flask import Flask
app = Flask(__name__)

@app.route("/")
def hello():
    return "Hello World!"

if __name__ == "__main__":
    app.run()
</snippet></ROW><ROW><id>8346663</id><snippet># Encoding: UTF-8

japanese = u"桜の花びらたち"
print japanese
print len(japanese)
</snippet></ROW><ROW><id>8346663</id><snippet>u</snippet></ROW><ROW><id>8346663</id><snippet>decode</snippet></ROW><ROW><id>8346663</id><snippet>"桜の花びらたち".decode('utf-8')</snippet></ROW><ROW><id>8346696</id><snippet>def func_1():
    ...

def func_2():
    ...

def main():
    ....

if __name__ == '__main__':
    main()
</snippet></ROW><ROW><id>8346696</id><snippet>func_*</snippet></ROW><ROW><id>8346696</id><snippet>func_*</snippet></ROW><ROW><id>8346822</id><snippet>zip</snippet></ROW><ROW><id>8346822</id><snippet>[a[0]] + [y for x, y, z in zip(a, a[1:], a[2:]) if threeArgs(x, y, z)] + [a[-1]]
</snippet></ROW><ROW><id>8346921</id><snippet>2.7</snippet></ROW><ROW><id>8346921</id><snippet>/System/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7
# and #
/opt/local/lib/python2.7
</snippet></ROW><ROW><id>8346921</id><snippet>/System/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7</snippet></ROW><ROW><id>8346921</id><snippet>/usr/lib/python2.7</snippet></ROW><ROW><id>8346921</id><snippet>configure</snippet></ROW><ROW><id>8346921</id><snippet>--prefix</snippet></ROW><ROW><id>8346921</id><snippet>    [ 11:06 jon@hozbox.com ~ ]$ ./configure --prefix=/usr/local
</snippet></ROW><ROW><id>8346921</id><snippet>/usr/local</snippet></ROW><ROW><id>8346921</id><snippet>/usr/local/lib/python/...</snippet></ROW><ROW><id>8347189</id><snippet>recv</snippet></ROW><ROW><id>8347189</id><snippet>accept</snippet></ROW><ROW><id>8347189</id><snippet>recv</snippet></ROW><ROW><id>8347189</id><snippet>send</snippet></ROW><ROW><id>8347192</id><snippet>title</snippet></ROW><ROW><id>8347192</id><snippet>&gt;&gt;&gt; "they're bill's friends from the UK".title()
"They'Re Bill'S Friends From The Uk"
</snippet></ROW><ROW><id>8347192</id><snippet>&gt;&gt;&gt; ''.join(x for x in 'make IT camel CaSe'.title() if not x.isspace())
'MakeItCamelCase'
</snippet></ROW><ROW><id>8347236</id><snippet>for line in textwrap.wrap(some_text, 80, break_long_words=False):
  yield "%-80s" % (line)
</snippet></ROW><ROW><id>8347236</id><snippet>TextWrapper</snippet></ROW><ROW><id>8347587</id><snippet>/etc/init.d/mysql start
</snippet></ROW><ROW><id>8347587</id><snippet>/etc/init.d/mysql restart
</snippet></ROW><ROW><id>8347610</id><snippet>re.findall()</snippet></ROW><ROW><id>8347610</id><snippet>matches = re.findall(r'#\w*', line)
</snippet></ROW><ROW><id>8347613</id><snippet>import os

fileList = ["dir/dir2/dir3/dir3/file.txt",
    "dir/dir2/dir3/file.txt",
    "example/directory/path/file.txt"]

for file in fileList:
    dir = os.path.dirname(file)
    # create directory if not exist
    if not os.path.exists(dir):
        os.makedirs(dir)
    # Create blank file if not exists
    with open(file, "w"):
        pass
</snippet></ROW><ROW><id>8347787</id><snippet>app_label=='auth'</snippet></ROW><ROW><id>8347791</id><snippet>require 'pry' # gem install pry
binding.pry   # Drop into the pry console
</snippet></ROW><ROW><id>8348062</id><snippet>out = out[:-1]</snippet></ROW><ROW><id>8348062</id><snippet>del out[-1]</snippet></ROW><ROW><id>8348062</id><snippet>out</snippet></ROW><ROW><id>8348062</id><snippet>out</snippet></ROW><ROW><id>8348062</id><snippet>&gt;&gt;&gt; print doCombine(target, x, len(target), 0, 0)
['w']
['w', 'x']
['w', 'x', 'y']
['w', 'x', 'y', 'z']
['w', 'x', 'z']
['w', 'y']
['w', 'y', 'z']
['w', 'z']
['x']
['x', 'y']
['x', 'y', 'z']
['x', 'z']
['y']
['y', 'z']
['z']
None
</snippet></ROW><ROW><id>8348529</id><snippet>vertex1</snippet></ROW><ROW><id>8348529</id><snippet>num_vertexes</snippet></ROW><ROW><id>8348529</id><snippet>lst[0]</snippet></ROW><ROW><id>8348529</id><snippet>lst[n-1]</snippet></ROW><ROW><id>8348529</id><snippet>1</snippet></ROW><ROW><id>8348529</id><snippet>n</snippet></ROW><ROW><id>8348529</id><snippet>vertex1 = int(args[0])-1</snippet></ROW><ROW><id>8348894</id><snippet>__package__</snippet></ROW><ROW><id>8348894</id><snippet>None</snippet></ROW><ROW><id>8348894</id><snippet>-m</snippet></ROW><ROW><id>8348894</id><snippet>None</snippet></ROW><ROW><id>8348917</id><snippet>iter(f)</snippet></ROW><ROW><id>8348917</id><snippet>for</snippet></ROW><ROW><id>8348917</id><snippet>for line in f: print line</snippet></ROW><ROW><id>8348917</id><snippet>next()</snippet></ROW><ROW><id>8348917</id><snippet>StopIteration</snippet></ROW><ROW><id>8348917</id><snippet>for</snippet></ROW><ROW><id>8348917</id><snippet>next()</snippet></ROW><ROW><id>8348917</id><snippet>next()</snippet></ROW><ROW><id>8348917</id><snippet>readline()</snippet></ROW><ROW><id>8348917</id><snippet>seek()</snippet></ROW><ROW><id>8348917</id><snippet>file.tell</snippet></ROW><ROW><id>8349070</id><snippet>def __repr__(self):
    return 'MyClass #%d' % (self.id,)
</snippet></ROW><ROW><id>8349372</id><snippet>curses</snippet></ROW><ROW><id>8349372</id><snippet>urwid</snippet></ROW><ROW><id>8349372</id><snippet>urwid</snippet></ROW><ROW><id>8349697</id><snippet>sleep</snippet></ROW><ROW><id>8349697</id><snippet>import subprocess
import time

bin_path = 'sleep'
invocation_args = [[str(x*0.1)] for x in range(0,100)]

subprocs = []
for args in invocation_args:
    subprocs.append(subprocess.Popen([bin_path] + args))

while len(subprocs) &gt; 0:
    subprocs = [p for p in subprocs if p.poll() is None]
    time.sleep(0.05)

print 'Finished running all subprocs'
</snippet></ROW><ROW><id>8349930</id><snippet>//table[contains(@class, "mg-b20")]/tr[3]/td[2]//a
</snippet></ROW><ROW><id>8349930</id><snippet>lxml.etree</snippet></ROW><ROW><id>8349930</id><snippet>element = HTML.ElementFromURL(url)
alltext = element.xpath('string(//table[contains(@class, "mg-b20")]/tr[3]/td[2]//a)')

for item in alltext:
    Log("text = %s" % item);
</snippet></ROW><ROW><id>8349930</id><snippet>&lt;a href="#"&gt;I am anchor text &lt;span&gt;But I am too and am not in Element.text&lt;/span&gt; and I am in Element.tail&lt;/a&gt;
</snippet></ROW><ROW><id>8350217</id><snippet>visit.Launch()</snippet></ROW><ROW><id>8350217</id><snippet>visit</snippet></ROW><ROW><id>8350217</id><snippet>import sys
import visit

def main():
    visit.Launch()

    # Loop through the locals that were just imported
    # and assign the names to the visit module
    loc = locals()
    for key in loc:
        setattr(visit, key, loc[key])

    return 0

if __name__=="__main__":
    ret = main()
    print dir(visit)
    sys.exit(ret)
</snippet></ROW><ROW><id>8350217</id><snippet>loc = locals()
glob = globals()

for key in loc:
    glob[key] = loc[key]
</snippet></ROW><ROW><id>8350217</id><snippet>Version()</snippet></ROW><ROW><id>8350217</id><snippet>Version()</snippet></ROW><ROW><id>8350251</id><snippet>def fibs(number):
    result = [0, 1]
    for i in range(number-2):
        result.append(result[-2] + result[-1])
        return result
</snippet></ROW><ROW><id>8350251</id><snippet>return result</snippet></ROW><ROW><id>8350251</id><snippet>for</snippet></ROW><ROW><id>8350532</id><snippet>submthd()</snippet></ROW><ROW><id>8350532</id><snippet>Cls()</snippet></ROW><ROW><id>8350532</id><snippet>object</snippet></ROW><ROW><id>8350532</id><snippet>Cls()</snippet></ROW><ROW><id>8350532</id><snippet>class Cls(object):
    def submthd(self):
        return 0
    def mthd(self):
        return self.submthd()
    def submthd2(self):
        return 0
    def mthd2(self):
        return self.submthd()
</snippet></ROW><ROW><id>8350532</id><snippet>submthd2</snippet></ROW><ROW><id>8350532</id><snippet>mthd2</snippet></ROW><ROW><id>8350532</id><snippet>mockup(...)</snippet></ROW><ROW><id>8350532</id><snippet>class Test_me(MockerTestCase):
    def mockup(self, p, f, m):
        methodToCall = getattr(p, f)
        methodToCall()
        m.result(1)

    def test_null(self):
        m = Mocker()
        o = Cls()
        p = m.patch(o)
        self.mockup(p, 'submthd', m)
        self.mockup(p, 'submthd2', m)
        m.replay()
        self.assertEqual(o.mthd(), 1)
        self.assertEqual(o.mthd2(), 1)
        m.verify()
</snippet></ROW><ROW><id>8350532</id><snippet>.
----------------------------------------------------------------------
Ran 1 test in 0.002s

OK
</snippet></ROW><ROW><id>8350576</id><snippet>PandasHugs</snippet></ROW><ROW><id>8350576</id><snippet>HugForAPanda = PandaHugs(message=TheMessage)
</snippet></ROW><ROW><id>8350576</id><snippet>HugForAPanda = PandasHugs(message=TheMessage)
</snippet></ROW><ROW><id>8350576</id><snippet>for PandasHugs in ListOfHugs:</snippet></ROW><ROW><id>8350576</id><snippet>get()</snippet></ROW><ROW><id>8350576</id><snippet>MainPage</snippet></ROW><ROW><id>8350576</id><snippet>PandasHugs</snippet></ROW><ROW><id>8350576</id><snippet>get()</snippet></ROW><ROW><id>8350576</id><snippet>for hug in ListOfHugs</snippet></ROW><ROW><id>8350698</id><snippet>def pastChoice():
    prevMove = []

    while True:
        choice = raw_input("&gt; ")
        prevMove.append(choice)
        print prevMove
pastChoice()
</snippet></ROW><ROW><id>8350698</id><snippet> choice = raw_input("&gt; ")
 prevMove = []
 prevMove.append(choice)
</snippet></ROW><ROW><id>8350698</id><snippet>i in prevMove</snippet></ROW><ROW><id>8350698</id><snippet>i</snippet></ROW><ROW><id>8350698</id><snippet>prevMove</snippet></ROW><ROW><id>8350698</id><snippet>prevMove</snippet></ROW><ROW><id>8350698</id><snippet>for</snippet></ROW><ROW><id>8350698</id><snippet>prevMove</snippet></ROW><ROW><id>8350751</id><snippet>factors = []

while num % 2 == 0:
  factors.append(2)
  num /= 2
</snippet></ROW><ROW><id>8350785</id><snippet>lst[:]</snippet></ROW><ROW><id>8350785</id><snippet>copy</snippet></ROW><ROW><id>8350785</id><snippet>first = foo(copy.deepcopy(mylst), "first")
</snippet></ROW><ROW><id>8350881</id><snippet>foo-bar</snippet></ROW><ROW><id>8350881</id><snippet>foo_bar.py</snippet></ROW><ROW><id>8350881</id><snippet>import</snippet></ROW><ROW><id>8350881</id><snippet>sys.modules</snippet></ROW><ROW><id>8350881</id><snippet>execfile</snippet></ROW><ROW><id>8350881</id><snippet># contents of foo-bar.py
baz = 'quux'
</snippet></ROW><ROW><id>8350881</id><snippet>&gt;&gt;&gt; execfile('foo-bar.py')
&gt;&gt;&gt; baz
'quux'
&gt;&gt;&gt; 
</snippet></ROW><ROW><id>8350952</id><snippet>(2+1)*(1+1) = 3*2 = 6</snippet></ROW><ROW><id>8350952</id><snippet>11*2*2 = 44</snippet></ROW><ROW><id>8350952</id><snippet>3*3=9</snippet></ROW><ROW><id>8350952</id><snippet>36=2^2*3^2</snippet></ROW><ROW><id>8350952</id><snippet>def factorize(i):
    # returns an array of prime factors
    whatever

def number_of_divisors(i):
    n = 1
    for v in Counter(factorize(i)).values():
        n *= v + 1
    return n
</snippet></ROW><ROW><id>8351167</id><snippet>datetime.timedelta</snippet></ROW><ROW><id>8351167</id><snippet>import datetime
target_date = datetime.date(2011,2,7)

delta = datetime.timedelta(days=2)
new_date = target_date - delta

print new_date # 2011-02-05
</snippet></ROW><ROW><id>8351198</id><snippet>np.angle</snippet></ROW><ROW><id>8351198</id><snippet>np.quantile</snippet></ROW><ROW><id>8351198</id><snippet>[np.]asarray</snippet></ROW><ROW><id>8351198</id><snippet>ma.asarray</snippet></ROW><ROW><id>8351198</id><snippet>np.asarray</snippet></ROW><ROW><id>8351198</id><snippet>np.angle</snippet></ROW><ROW><id>8351198</id><snippet>np.arctan2(a.imag,a.real)</snippet></ROW><ROW><id>8351325</id><snippet>try:
    user = User.objects.get(username=new_username)
    # ERROR! user already exists!
    # if you're using a form you could do:
    # raise forms.ValidationError('Already exists a user with this username!')        
except User.DoesNotExist:
    # We're good!, lets create the user
    user = User.objects.create_user(username, email, password)
</snippet></ROW><ROW><id>8351648</id><snippet>s = Booking.objects.values('date_select').distinct('date_select').filter(date_select='2011-12-1')[0]['date_select']
</snippet></ROW><ROW><id>8351659</id><snippet>subprocess.call(whatever, stdin=sys.stdout, stdout=sys.stdin)
</snippet></ROW><ROW><id>8351755</id><snippet>xl.Quit
</snippet></ROW><ROW><id>8351779</id><snippet>import argparse

def x(x_center, y_center, values):
    print "X center:", x_center
    print "Y center:", y_center
    print "Values:", values

def main():
    parser = argparse.ArgumentParser(description="Do something.")
    parser.add_argument('-x', '--x-center', type=float, required=True)
    parser.add_argument('-y', '--y-center', type=float, required=True)
    parser.add_argument('values', type=float, nargs='*')
    args = parser.parse_args()

    x(args.x_center, args.y_center, args.values)

if __name__ == '__main__':
    main()
</snippet></ROW><ROW><id>8351779</id><snippet>$ python test.py --x-center 1 --y-center 2 3 4 5
X center: 1.0
Y center: 2.0
Values: [3.0, 4.0, 5.0]
</snippet></ROW><ROW><id>8351779</id><snippet>argparse</snippet></ROW><ROW><id>8351779</id><snippet>main</snippet></ROW><ROW><id>8351779</id><snippet>main</snippet></ROW><ROW><id>8351779</id><snippet>ArgumentParser</snippet></ROW><ROW><id>8351779</id><snippet>add_argument</snippet></ROW><ROW><id>8351779</id><snippet>parser.add_argument('-x', '--x-center', type=float, required=True)
</snippet></ROW><ROW><id>8351779</id><snippet>-x</snippet></ROW><ROW><id>8351779</id><snippet>--x-center</snippet></ROW><ROW><id>8351779</id><snippet>type</snippet></ROW><ROW><id>8351779</id><snippet>add_argument</snippet></ROW><ROW><id>8351779</id><snippet>float</snippet></ROW><ROW><id>8351779</id><snippet>argparse</snippet></ROW><ROW><id>8351779</id><snippet>parser.add_argument('values', type=float, nargs='*')
</snippet></ROW><ROW><id>8351779</id><snippet>float</snippet></ROW><ROW><id>8351779</id><snippet>nargs</snippet></ROW><ROW><id>8351779</id><snippet>*</snippet></ROW><ROW><id>8351779</id><snippet>parse_args</snippet></ROW><ROW><id>8351779</id><snippet>args</snippet></ROW><ROW><id>8352218</id><snippet>(?:expr)</snippet></ROW><ROW><id>8352218</id><snippet>(expr)</snippet></ROW><ROW><id>8352218</id><snippet>re.sub</snippet></ROW><ROW><id>8352218</id><snippet>MatchObject.group</snippet></ROW><ROW><id>8352218</id><snippet>?:</snippet></ROW><ROW><id>8352218</id><snippet>*</snippet></ROW><ROW><id>8352218</id><snippet>?::</snippet></ROW><ROW><id>8352218</id><snippet>?:</snippet></ROW><ROW><id>8352218</id><snippet>:</snippet></ROW><ROW><id>8352585</id><snippet>zip(firstname, lastmane)</snippet></ROW><ROW><id>8352755</id><snippet>class Schedule(Time)</snippet></ROW><ROW><id>8352755</id><snippet>class Schedule(object)</snippet></ROW><ROW><id>8352755</id><snippet>Time.__init__</snippet></ROW><ROW><id>8352755</id><snippet>init_hr</snippet></ROW><ROW><id>8352755</id><snippet>hr</snippet></ROW><ROW><id>8352755</id><snippet>this.*</snippet></ROW><ROW><id>8352755</id><snippet>self.*</snippet></ROW><ROW><id>8352755</id><snippet>Time(hr=4, ...)</snippet></ROW><ROW><id>8352755</id><snippet>Time(init_hr=4, ...)</snippet></ROW><ROW><id>8352755</id><snippet>print (...)</snippet></ROW><ROW><id>8352755</id><snippet>print ...</snippet></ROW><ROW><id>8352755</id><snippet>print(...)</snippet></ROW><ROW><id>8352923</id><snippet>Object(att1='test',att2='test').save()</snippet></ROW><ROW><id>8352923</id><snippet>save()</snippet></ROW><ROW><id>8352923</id><snippet>Object</snippet></ROW><ROW><id>8352923</id><snippet>None</snippet></ROW><ROW><id>8352923</id><snippet>obj=Object(att1='test',att2='test')
obj.save()
</snippet></ROW><ROW><id>8352923</id><snippet>obj.id</snippet></ROW><ROW><id>8353170</id><snippet>d = {}
with open(sys.argv[1]) as f:
    for line in f:
        if line[0].isalpha(): # is first character in the line a letter?
            curr = d.setdefault(line.strip(), [])
        elif filter(str.isdigit, line): # is there any digit in the line?
            curr.append(line.strip())
</snippet></ROW><ROW><id>8353170</id><snippet>d</snippet></ROW><ROW><id>8353170</id><snippet>{'AAA': ['|           3 |             1445 |',
         '|           4 |              105 |',
         '|           9 |              160 |',
         '|          10 |               30 |'],
 'BBB': ['|           3 |             1445 |',
         '|           4 |              105 |',
         '|           9 |              160 |',
         '|          10 |               30 |'],
 'CCC': ['|           3 |             1445 |',
         '|           4 |              105 |',
         '|           9 |              160 |',
         '|          10 |               30 |']}
</snippet></ROW><ROW><id>8353170</id><snippet>B_values</snippet></ROW><ROW><id>8353170</id><snippet>d['BBB']</snippet></ROW><ROW><id>8353293</id><snippet>product</snippet></ROW><ROW><id>8353293</id><snippet>resource</snippet></ROW><ROW><id>8353293</id><snippet>Emitter.construct()</snippet></ROW><ROW><id>8353293</id><snippet>_to_xml()</snippet></ROW><ROW><id>8353293</id><snippet>from piston.emitters import Emitter, XMLEmitter

class ProductXMLEmitter(XMLEmitter):
    def _to_xml(self, xml, data):
        if isinstance(data, (list, tuple)):
            for item in data:
                attrs = {}
                # if item contains id value, use it as an attribute instead
                if isinstance(item, dict):
                    attrs["id"] = unicode(item.pop("id"))
                xml.startElement("product", attrs)
                self._to_xml(xml, item)
                xml.endElement("product")
        else:
            super(BetterXMLEmitter, self)._to_xml(xml, data)

# replace default XMLEmitter with ours
Emitter.register('xml', ProductXMLEmitter, 'text/xml; charset=utf-8')
</snippet></ROW><ROW><id>8353391</id><snippet>{{ stringVar|slice:":2" }}
</snippet></ROW><ROW><id>8353523</id><snippet>if __name__ in ('__main__', '__android__'):
    YourApp().run()
</snippet></ROW><ROW><id>8353696</id><snippet>itertools.chain</snippet></ROW><ROW><id>8353696</id><snippet>for item in itertools.chain(list, [singleobj]):
    ...
</snippet></ROW><ROW><id>8353996</id><snippet>cell.button.config(state = DISABLED)
</snippet></ROW><ROW><id>8354035</id><snippet>ai()</snippet></ROW><ROW><id>8354035</id><snippet>gobject.idle_add(callback, ...)  #execute callback when idle
gobject.timeout_add(interval, callback, ...)  #execute callback every interval millisecs
</snippet></ROW><ROW><id>8354035</id><snippet>gobject.idle_add()</snippet></ROW><ROW><id>8354035</id><snippet>gobject.timeout_add()</snippet></ROW><ROW><id>8354035</id><snippet>True</snippet></ROW><ROW><id>8354377</id><snippet>def ftp_connect(path):
    link = FTP(host = 'example.com', timeout = 5) #Keep low timeout
    link.login(passwd = 'ftppass', user = 'ftpuser')
    debug("%s - Connected to FTP" % strftime("%d-%m-%Y %H.%M"))
    link.cwd(path)
    return link

downloaded = open('/local/path/to/file.tgz', 'wb')

def debug(txt):
    print txt

link = ftp_connect(path)
file_size = link.size(filename)

max_attempts = 5 #I dont want death loops.

while file_size != downloaded.tell():
    try:
        debug("%s while &gt; try, run retrbinary\n" % strftime("%d-%m-%Y %H.%M"))
        if downloaded.tell() != 0:
            link.retrbinary('RETR ' + filename, downloaded.write, downloaded.tell())
        else:
            link.retrbinary('RETR ' + filename, downloaded.write)
    except Exception as myerror:
        if max_attempts != 0:
            debug("%s while &gt; except, something going wrong: %s\n \tfile lenght is: %i &gt; %i\n" %
                (strftime("%d-%m-%Y %H.%M"), myerror, file_size, downloaded.tell())
            )
            link = ftp_connect(path)
            max_attempts -= 1
        else:
            break
debug("Done with file, attempt to download m5dsum")
[...]
</snippet></ROW><ROW><id>8354377</id><snippet>01-12-2011 23.30 - Connected to FTP
01-12-2011 23.30 while &gt; try, run retrbinary
02-12-2011 00.31 while &gt; except, something going wrong: timed out
    file lenght is: 1754695793 &gt; 1754695793
02-12-2011 00.31 - Connected to FTP
Done with file, attempt to download m5dsum
</snippet></ROW><ROW><id>8354624</id><snippet>create table info (s datetime not null primary key, str varchar(100), str2 varchar(100));

load data local infile '/home/maartenl/sample.txt' 
into table info (@s, str, str2) 
set s = from_unixtime(@s);
</snippet></ROW><ROW><id>8354782</id><snippet>0x91</snippet></ROW><ROW><id>8354782</id><snippet>with open(file_path, 'r') as fp:
    result = []
    while True:
        # 1.
        s = fp.read(2)
        if not s:
            break

        # 2. 
        number = int(s, 16) # No need for '0x' prefix!

        # 3.
        number = number ^ 0x91  # '91' needs '0x' prefix!

        # 4.
        result.append(format(number, '02x'))

print ''.join(result)
</snippet></ROW><ROW><id>8355260</id><snippet>/etc/apache2/sites-enable/me</snippet></ROW><ROW><id>8355260</id><snippet>/etc/apache2/sites-enable/me</snippet></ROW><ROW><id>8355432</id><snippet>MCRYPT_RIJNDAEL_256</snippet></ROW><ROW><id>8355432</id><snippet>MCRYPT_RIJNDAEL_256</snippet></ROW><ROW><id>8355432</id><snippet>Crypto.Cipher.RIJNDAEL</snippet></ROW><ROW><id>8355512</id><snippet>a=[x/10. for x in range(100000)]</snippet></ROW><ROW><id>8355512</id><snippet>np.array(a) # 9.92ms
np.fromiter(a, dtype=np.float) # 5.19ms
</snippet></ROW><ROW><id>8355512</id><snippet>list2 = np.zeros(len(lis))
list2.fill(lis)
</snippet></ROW><ROW><id>8355512</id><snippet>.fill</snippet></ROW><ROW><id>8355670</id><snippet>ships.update(
  {'_id': 1}, 
  {"$set": {'staff': staff}},
  false,true
) 
</snippet></ROW><ROW><id>8355692</id><snippet>&gt;&gt;&gt; x='&lt;td&gt;$GETR("wp","1")$Yes$GETR("","2")$No$NOTE()$&lt;/td&gt;'
&gt;&gt;&gt; if x.count("$GETR")&gt;1:
    x=x.replace("$GETR","\n\t$GETR").replace("&lt;/td&gt;","\n&lt;/td&gt;")


&gt;&gt;&gt; print x
&lt;td&gt;
    $GETR("wp","1")$Yes
    $GETR("","2")$No$NOTE()$
&lt;/td&gt;
&gt;&gt;&gt; x='&lt;td&gt;$GETR("","2")$No$NOTE()$&lt;/td&gt;'
&gt;&gt;&gt; if x.count("$GETR")&gt;1:
    x=x.replace("$GETR","\n\t$GETR").replace("&lt;/td&gt;","\n&lt;/td&gt;")


&gt;&gt;&gt; print x
&lt;td&gt;$GETR("","2")$No$NOTE()$&lt;/td&gt;
</snippet></ROW><ROW><id>8355692</id><snippet>if x.count("$GETR")&gt;=1:x=x.replace("$GETR","\n\t$GETR").replace("&lt;/td&gt;","\n&lt;/td&gt;")
if x.count("$GETR") == 1: x=x.replace("$GETR","$GETC")


&gt;&gt;&gt; x='&lt;td&gt;$GETR("","2")$No$NOTE()$&lt;/td&gt;'
&gt;&gt;&gt; if x.count("$GETR")&gt;=1:x=x.replace("$GETR","\n\t$GETR").replace("&lt;/td&gt;","\n&lt;/td&gt;")
&gt;&gt;&gt; if x.count("$GETR") == 1: x=x.replace("$GETR","$GETC")
&gt;&gt;&gt; print x
&lt;td&gt;
    $GETC("","2")$No$NOTE()$
&lt;/td&gt;
&gt;&gt;&gt; x='&lt;td&gt;$GETR("wp","1")$Yes$GETR("","2")$No$NOTE()$&lt;/td&gt;'
&gt;&gt;&gt; if x.count("$GETR")&gt;=1:x=x.replace("$GETR","\n\t$GETR").replace("&lt;/td&gt;","\n&lt;/td&gt;")
&gt;&gt;&gt; if x.count("$GETR") == 1: x=x.replace("$GETR","$GETC")
&gt;&gt;&gt; print x
&lt;td&gt;
    $GETR("wp","1")$Yes
    $GETR("","2")$No$NOTE()$
&lt;/td&gt;
&gt;&gt;&gt; 
</snippet></ROW><ROW><id>8356465</id><snippet>print()</snippet></ROW><ROW><id>8356465</id><snippet>sys.stdout</snippet></ROW><ROW><id>8356465</id><snippet>sys.stderr</snippet></ROW><ROW><id>8356465</id><snippet>write(text)</snippet></ROW><ROW><id>8356465</id><snippet>class MyStream(object):
    def write(self, text):
        # Add text to a QTextEdit...

sys.stdout = MyStream()
sys.stderr = MyStream()
</snippet></ROW><ROW><id>8356465</id><snippet>sys.__stdout__</snippet></ROW><ROW><id>8356465</id><snippet>sys.__stderr__</snippet></ROW><ROW><id>8356465</id><snippet>sys.stdout = sys.__stdout__
sys.stderr = sys.__stderr__
</snippet></ROW><ROW><id>8356465</id><snippet>from PyQt4 import QtCore

class EmittingStream(QtCore.QObject):

    textWritten = QtCore.pyqtSignal(str)

    def write(self, text):
        self.textWritten.emit(str(text))
</snippet></ROW><ROW><id>8356465</id><snippet>sys.stdout</snippet></ROW><ROW><id>8356465</id><snippet>textWritten</snippet></ROW><ROW><id>8356465</id><snippet>QTextEdit</snippet></ROW><ROW><id>8356465</id><snippet># Within your main window class...

def __init__(self, parent=None, **kwargs):
    # ...

    # Install the custom output stream
    sys.stdout = EmittingStream(textWritten=self.normalOutputWritten)

def __del__(self):
    # Restore sys.stdout
    sys.stdout = sys.__stdout__

def normalOutputWritten(self, text):
    """Append text to the QTextEdit."""
    # Maybe QTextEdit.append() works as well, but this is how I do it:
    cursor = self.textEdit.textCursor()
    cursor.movePosition(QtGui.QTextCursor.End)
    cursor.insertText(text)
    self.textEdit.setTextCursor(cursor)
    self.textEdit.ensureCursorVisible()
</snippet></ROW><ROW><id>8356620</id><snippet>def print_table(table):
    col_width = [max(len(x) for x in col) for col in zip(*table)]
    for line in table:
        print "| " + " | ".join("{:{}}".format(x, col_width[i])
                                for i, x in enumerate(line)) + " |"

table = [(str(x), str(f(x))) for x in mylist]
print_table(table)
</snippet></ROW><ROW><id>8356787</id><snippet>&gt;&gt;&gt; (a1[:,numpy.newaxis] == a2).all(axis=2)
array([[ True, False, False, False],
       [False, False, False,  True],
       [False,  True, False, False],
       [ True, False, False, False]], dtype=bool)
</snippet></ROW><ROW><id>8356787</id><snippet>int</snippet></ROW><ROW><id>8356787</id><snippet>&gt;&gt;&gt; (a1[:,numpy.newaxis] == a2).all(axis=2).astype(int)
array([[1, 0, 0, 0],
       [0, 0, 0, 1],
       [0, 1, 0, 0],
       [1, 0, 0, 0]])
</snippet></ROW><ROW><id>8357518</id><snippet>urlparse</snippet></ROW><ROW><id>8357518</id><snippet>&gt;&gt;&gt; import urlparse
&gt;&gt;&gt; def is_absolute(url):
...     return bool(urlparse.urlparse(url).scheme)
... 
&gt;&gt;&gt; is_absolute('http://www.example.com/some/path')
True
&gt;&gt;&gt; is_absolute('/some/path')
False
</snippet></ROW><ROW><id>8357558</id><snippet>arglist[1] = 'my'
arglist[1][1] # equivalent to 'my'[1], so you get 'y'.
              # and you cannot assign anything to arglist[1][1] 
              # because 'str' is immutable

arglist[2] = None
arglist[2][1] # invalid, because arglist[2] (None) is not subscriptable
</snippet></ROW><ROW><id>8357558</id><snippet>@</snippet></ROW><ROW><id>8357558</id><snippet>for val in doh.split():
    if val.startswith("@"):  # this is a command
        do_commandy_stuff(val)
    else:   # this is a word
        do_wordy_stuff(val)
</snippet></ROW><ROW><id>8357558</id><snippet>&gt;&gt;&gt; lookup = [(w.startswith("@"), w) for w in doh.split()]
&gt;&gt;&gt; lookup
[(False, 'my'), (True, '@command'), (False, 'string'), (False, 'is'), (False, 'this'), (False, 'bunch'), (False, 'of'), (False, 'words'), (True, '@blah'), (False, 'with'), (False, 'some'), (False, 'commands'), (False, 'contained'), (False, 'in'), (False, 'it')]
</snippet></ROW><ROW><id>8357558</id><snippet>lookup</snippet></ROW><ROW><id>8357558</id><snippet>list</snippet></ROW><ROW><id>8357558</id><snippet>tuple</snippet></ROW><ROW><id>8357558</id><snippet>tuple</snippet></ROW><ROW><id>8357558</id><snippet>is_command, word = lookup[1]   # is_command = True, word = "@command"
</snippet></ROW><ROW><id>8357576</id><snippet>*</snippet></ROW><ROW><id>8357576</id><snippet>from java import *
</snippet></ROW><ROW><id>8357576</id><snippet>java</snippet></ROW><ROW><id>8357576</id><snippet>lang</snippet></ROW><ROW><id>8357576</id><snippet>lang</snippet></ROW><ROW><id>8357576</id><snippet>java.lang</snippet></ROW><ROW><id>8357576</id><snippet>import java.lang
</snippet></ROW><ROW><id>8357576</id><snippet>java.lang.Exception</snippet></ROW><ROW><id>8357659</id><snippet>POST</snippet></ROW><ROW><id>8357659</id><snippet>TradeForForm(request.POST, user=request.user)
</snippet></ROW><ROW><id>8357659</id><snippet>user = kwargs.pop('user')</snippet></ROW><ROW><id>8357659</id><snippet>user = kwargs.pop('user', None)
# if kwargs has no key 'user', user is assigned None
# make sure your code handles this case gracefully
</snippet></ROW><ROW><id>8357921</id><snippet>re.compile("^[A-Za-z]\w{2,}$")

&gt;&gt;&gt; re.compile("^[A-Za-z]\w{2,}$")
&lt;_sre.SRE_Pattern object at 0x0272C158&gt;
&gt;&gt;&gt; expr=re.compile("^[A-Za-z]\w{2,}$")
&gt;&gt;&gt; expr.match("A12345")
&lt;_sre.SRE_Match object at 0x02721288&gt;
&gt;&gt;&gt; expr.match("A1")
&gt;&gt;&gt; expr.match("1AS")
&gt;&gt;&gt; expr.match("AB1")
&lt;_sre.SRE_Match object at 0x0272E138&gt;
&gt;&gt;&gt; expr.match("ab1")
&lt;_sre.SRE_Match object at 0x02721288&gt;
&gt;&gt;&gt; expr.match("Abhijit$%^&amp;#@")
&gt;&gt;&gt; 
</snippet></ROW><ROW><id>8357937</id><snippet>return</snippet></ROW><ROW><id>8357937</id><snippet>class A(object):
    def method(self, val):
        if not val:
            return self.submethod()
        return "Method action"

    def submethod():
        return "Submethod action"
</snippet></ROW><ROW><id>8357952</id><snippet>City2Parser</snippet></ROW><ROW><id>8357952</id><snippet>from BeautifulSoup import BeautifulSoup
import urllib2

page = urllib2.urlopen('http://www.worldgolf.com/courses/usa/massachusetts/')
soup = BeautifulSoup(page)
s = soup.findAll('h2')

print len(s)
for t in s:
    print t.text
</snippet></ROW><ROW><id>8357952</id><snippet>3
Featured Massachusetts Golf Course
Golf Locations
Latest user ratings for Massachusetts golf courses
</snippet></ROW><ROW><id>8358385</id><snippet>import</snippet></ROW><ROW><id>8358385</id><snippet>.py</snippet></ROW><ROW><id>8358385</id><snippet>.pyc</snippet></ROW><ROW><id>8358385</id><snippet>.pyo</snippet></ROW><ROW><id>8358385</id><snippet>sys.modules</snippet></ROW><ROW><id>8358385</id><snippet>import</snippet></ROW><ROW><id>8358385</id><snippet>reload()</snippet></ROW><ROW><id>8358385</id><snippet>import a</snippet></ROW><ROW><id>8358385</id><snippet>a</snippet></ROW><ROW><id>8358385</id><snippet>a.py[c]</snippet></ROW><ROW><id>8358385</id><snippet>import b</snippet></ROW><ROW><id>8358385</id><snippet>sys.modules['b']</snippet></ROW><ROW><id>8358385</id><snippet>a</snippet></ROW><ROW><id>8358397</id><snippet>"key3"</snippet></ROW><ROW><id>8358397</id><snippet>&gt;&gt;&gt; data = [ {"key1": "value1", "key2": "value2", "key3": "value3"},
...          {"key1": "value4", "key2": "value5", "key3": "value3"},
...          {"key1": "value1", "key2": "value8", "key3": "value3"} ]
&gt;&gt;&gt;
&gt;&gt;&gt; keylist = data[0].keys()
&gt;&gt;&gt; mydata = dict((k,', '.join(set(map(lambda d: d[k], data)))) for k in keylist)
&gt;&gt;&gt; mydata
{'key3': 'value3', 'key2': 'value5, value2, value8', 'key1': 'value4, value1'}
</snippet></ROW><ROW><id>8358953</id><snippet>re.sub()</snippet></ROW><ROW><id>8358953</id><snippet>In [8]: import re

In [9]: s = "Can you help me!"

In [10]: re.sub(r'[-\w]+', lambda w:w.group()[::-1], s)
Out[10]: 'naC uoy pleh em!'
</snippet></ROW><ROW><id>8359009</id><snippet>import urllib2

proxy_handler = urllib2.ProxyHandler({})
opener = urllib2.build_opener(proxy_handler)
page = opener.open('http://www.google.com')
</snippet></ROW><ROW><id>8359442</id><snippet>&gt;&gt;&gt; vector = numpy.array([0, 1, 2, 3])
&gt;&gt;&gt; for i in xrange(4):
...     print numpy.r_[vector[:i], vector[i+1:]]
... 
[1 2 3]
[0 2 3]
[0 1 3]
[0 1 2]
</snippet></ROW><ROW><id>8359442</id><snippet>&gt;&gt;&gt; import numpy
&gt;&gt;&gt; vector = numpy.array([0,1,2])
&gt;&gt;&gt; for i in xrange(4):
...     print vector + (vector &gt;= i)
... 
[1 2 3]
[0 2 3]
[0 1 3]
[0 1 2]
</snippet></ROW><ROW><id>8359544</id><snippet>$ fuser /dev/ttyUSB0
</snippet></ROW><ROW><id>8359544</id><snippet>fuser</snippet></ROW><ROW><id>8359544</id><snippet>-k</snippet></ROW><ROW><id>8359572</id><snippet>a = ["pera", "uva", "maca", "saladamista"]
b = a[:]
b.reverse()
</snippet></ROW><ROW><id>8359572</id><snippet>b = a[::-1]
</snippet></ROW><ROW><id>8359572</id><snippet>In [1]: a = range(100000)

In [2]: %timeit b = a[:]; b.reverse()
1000 loops, best of 3: 436 us per loop

In [3]: %timeit b = a[::-1]          
1000 loops, best of 3: 414 us per loop

In [4]: %timeit b = list(reversed(a))
1000 loops, best of 3: 823 us per loop
</snippet></ROW><ROW><id>8359856</id><snippet>&gt;&gt;&gt; cc
&lt;9x9 sparse matrix of type '&lt;type 'numpy.int32'&gt;'
    with 24 stored elements in Compressed Sparse Row format&gt;
&gt;&gt;&gt; ccd = sparse.spdiags(1./cc.sum(1).T, 0, *cc.shape)
&gt;&gt;&gt; ccn = ccd * cc
&gt;&gt;&gt; np.round(ccn.todense(), 2)
array([[ 0.  ,  0.5 ,  0.  ,  0.5 ,  0.  ,  0.  ,  0.  ,  0.  ,  0.  ],
       [ 0.33,  0.  ,  0.33,  0.  ,  0.33,  0.  ,  0.  ,  0.  ,  0.  ],
       [ 0.  ,  0.5 ,  0.  ,  0.  ,  0.  ,  0.5 ,  0.  ,  0.  ,  0.  ],
       [ 0.33,  0.  ,  0.  ,  0.  ,  0.33,  0.  ,  0.33,  0.  ,  0.  ],
       [ 0.  ,  0.25,  0.  ,  0.25,  0.  ,  0.25,  0.  ,  0.25,  0.  ],
       [ 0.  ,  0.  ,  0.33,  0.  ,  0.33,  0.  ,  0.  ,  0.  ,  0.33],
       [ 0.  ,  0.  ,  0.  ,  0.5 ,  0.  ,  0.  ,  0.  ,  0.5 ,  0.  ],
       [ 0.  ,  0.  ,  0.  ,  0.  ,  0.33,  0.  ,  0.33,  0.  ,  0.33],
       [ 0.  ,  0.  ,  0.  ,  0.  ,  0.  ,  0.5 ,  0.  ,  0.5 ,  0.  ]])
&gt;&gt;&gt; ccn
&lt;9x9 sparse matrix of type '&lt;type 'numpy.float64'&gt;'
    with 24 stored elements in Compressed Sparse Row format&gt;
</snippet></ROW><ROW><id>8359894</id><snippet>Project.objects.filter(node__collaborators=my_user)
</snippet></ROW><ROW><id>8360069</id><snippet>only</snippet></ROW><ROW><id>8360069</id><snippet>ifconfig</snippet></ROW><ROW><id>8360069</id><snippet>.. toctree::
   doc1.rst

.. only:: latex

   .. toctree::
      doc2.rst
</snippet></ROW><ROW><id>8360488</id><snippet>xvals=riadok[3::2]
yvals=riadok[4::2]
xmax=max(xvals)
ymax=max(yvals)
</snippet></ROW><ROW><id>8360488</id><snippet>xtruemax=max(xtruemax,xmax)
ytruemax=max(ytruemax,ymax)
</snippet></ROW><ROW><id>8360560</id><snippet>from path import json as anotherjson
</snippet></ROW><ROW><id>8360560</id><snippet>from __future__ import absolute_import
# from standard path
import json as _json 
# from a package
from pkg import json as pkgjson
</snippet></ROW><ROW><id>8360560</id><snippet>import imp
json = imp.load_source('json', '/path/to/json.py')
</snippet></ROW><ROW><id>8360618</id><snippet>collections.Counter</snippet></ROW><ROW><id>8360618</id><snippet>&gt;&gt;&gt; from collections import Counter
&gt;&gt;&gt; a = ["a", "b", "aaa", "bb", "aa", "bbb", "", "a", "b"]
&gt;&gt;&gt; Counter(map(len, a))
Counter({1: 4, 2: 2, 3: 2, 0: 1})
</snippet></ROW><ROW><id>8360618</id><snippet>itertools.groupby()</snippet></ROW><ROW><id>8360618</id><snippet>&gt;&gt;&gt; sequence = "aaaabbababbbbabbabb"
&gt;&gt;&gt; Counter(len(list(it)) for k, it in groupby(sequence))
Counter({1: 5, 2: 3, 4: 2})
</snippet></ROW><ROW><id>8361087</id><snippet>colorama</snippet></ROW><ROW><id>8361087</id><snippet>tendo.ansiterm</snippet></ROW><ROW><id>8361087</id><snippet>waf</snippet></ROW><ROW><id>8361087</id><snippet>colorama</snippet></ROW><ROW><id>8361087</id><snippet>import sys
try:
   import colorama
   colorama.init()
except:
   try:
       import tendo.ansiterm
   except:
       pass

sys.stdout.write"\033[33mYellow Submarine"
sys.stderr.write"\033[31mred, red , wine!"
</snippet></ROW><ROW><id>8361193</id><snippet>import datetime
pub = lastItem.pub_date
end_date = datetime.datetime(pub.year, pub.month, pub.day)
</snippet></ROW><ROW><id>8361215</id><snippet>Thread</snippet></ROW><ROW><id>8361215</id><snippet>Thread</snippet></ROW><ROW><id>8361215</id><snippet>class WorkerWrapper:
    __init__(self):
        self.worker = Worker()
    __del__(self):
        self.worker.terminate()
</snippet></ROW><ROW><id>8361740</id><snippet>mydict.item()</snippet></ROW><ROW><id>8361740</id><snippet>&gt;&gt;&gt; import numpy as np
&gt;&gt;&gt; np.save('/tmp/data.npy',{'a':'Hi Mom!'})
&gt;&gt;&gt; x=np.load('/tmp/data.npy')
&gt;&gt;&gt; x.item()
{'a': 'Hi Mom!'}
</snippet></ROW><ROW><id>8361990</id><snippet>instance.__class__.__name__
</snippet></ROW><ROW><id>8362750</id><snippet>def gimmeANumber():
    while True:
        Number = raw_input("Please can you input a number from 0 to 255\n")
        Number = int(Number)
        if Number &lt; 0 or 255 &lt; Number:
            print "Please enter a valid number\n"
        else:
            return Number
</snippet></ROW><ROW><id>8362821</id><snippet>a = 0.01;
a *= 10; // shifts decimal place right
a /= 10.; // shifts decimal place left
</snippet></ROW><ROW><id>8362963</id><snippet># -*- coding: utf-8 -*-
"""Detrending multivariate array

Created on Fri Dec 02 15:08:42 2011

Author: Josef Perktold

http://stackoverflow.com/questions/8355197/detrending-a-time-series-of-a-multi-dimensional-array-without-the-for-loops

I should also add the multivariate version to statsmodels

"""

import numpy as np

import matplotlib.pyplot as plt


def detrend_common(y, order=1):
    '''detrend multivariate series by common trend

    Paramters
    ---------
    y : ndarray
       data, can be 1d or nd. if ndim is greater then 1, then observations
       are along zero axis
    order : int
       degree of polynomial trend, 1 is linear, 0 is constant

    Returns
    -------
    y_detrended : ndarray
       detrended data in same shape as original 

    '''
    nobs = y.shape[0]
    shape = y.shape
    y_ = y.ravel()
    nobs_ = len(y_)
    t = np.repeat(np.arange(nobs), nobs_ /float(nobs))
    exog = np.vander(t, order+1)
    params = np.linalg.lstsq(exog, y_)[0]
    fittedvalues = np.dot(exog, params)
    resid = (y_ - fittedvalues).reshape(*shape)
    return resid, params

def detrend_separate(y, order=1):
    '''detrend multivariate series by series specific trends

    Paramters
    ---------
    y : ndarray
       data, can be 1d or nd. if ndim is greater then 1, then observations
       are along zero axis
    order : int
       degree of polynomial trend, 1 is linear, 0 is constant

    Returns
    -------
    y_detrended : ndarray
       detrended data in same shape as original 

    '''
    nobs = y.shape[0]
    shape = y.shape
    y_ = y.reshape(nobs, -1)
    kvars_ = len(y_)
    t = np.arange(nobs)
    exog = np.vander(t, order+1)
    params = np.linalg.lstsq(exog, y_)[0]
    fittedvalues = np.dot(exog, params)
    resid = (y_ - fittedvalues).reshape(*shape)
    return resid, params

nobs = 30
sige = 0.1
y0 = 0.5 * np.random.randn(nobs,4,3)
t = np.arange(nobs)
y_observed = y0 + t[:,None,None]

for detrend_func, name in zip([detrend_common, detrend_separate], 
                               ['common', 'separate']):
    y_detrended, params = detrend_func(y_observed, order=1)
    print '\n\n', name 
    print 'params for detrending'
    print params
    print 'std of detrended', y_detrended.std()  #should be roughly sig=0.5 (var of y0)
    print 'maxabs', np.max(np.abs(y_detrended - y0))

    print 'observed'
    print y_observed[-1]
    print 'detrended'
    print y_detrended[-1]
    print 'original "true"'
    print y0[-1]

    plt.figure()
    for i in range(4):
        for j in range(3):
            plt.plot(y0[:,i,j], 'bo', alpha=0.75)
            plt.plot(y_detrended[:,i,j], 'ro', alpha=0.75)
    plt.title(name + ' detrending: blue - original, red - detrended')


plt.show()
</snippet></ROW><ROW><id>8362963</id><snippet>&gt;&gt;&gt; res = signal.detrend(y_observed, axis=0)
&gt;&gt;&gt; (res - y0).var()
0.016931858083279336
&gt;&gt;&gt; (y_detrended - y0).var()
0.01693185808327945
&gt;&gt;&gt; (res - y_detrended).var()
8.402584948582852e-30
</snippet></ROW><ROW><id>8363237</id><snippet>INF=float('INF')</snippet></ROW><ROW><id>8363237</id><snippet>INF=1E12</snippet></ROW><ROW><id>8363391</id><snippet>import matplotlib as mpl
import matplotlib.pyplot as plt

min, max = (-40, 30)
step = 10

# Setting up a colormap that's a simple transtion
mymap = mpl.colors.LinearSegmentedColormap.from_list('mycolors',['blue','red'])

# Using contourf to provide my colorbar info, then clearing the figure
Z = [[0,0],[0,0]]
levels = range(min,max+step,step)
CS3 = plt.contourf(Z, levels, cmap=mymap)
plt.clf()

# Plotting what I actually want
X=[[1,2],[1,2],[1,2],[1,2]]
Y=[[1,2],[1,3],[1,4],[1,5]]
Z=[-40,-20,0,30]
for x,y,z in zip(X,Y,Z):
    # setting rgb color based on z normalized to my range
    r = (float(z)-min)/(max-min)
    g = 0
    b = 1-r
    plt.plot(x,y,color=(r,g,b))
plt.colorbar(CS3) # using the colorbar info I got from contourf
plt.show()
</snippet></ROW><ROW><id>8363664</id><snippet>@QtCore.Slot(QTreeWidgetItem, QTreeWidgetItem)
def on_list_currentItemChanged(self, current=None, previous=None):
    if current is not None and current.isSelected():
        self.ui.actionDelete_Task.setEnabled(True)
    else:
        self.ui.actionDelete_Task.setEnabled(False)
</snippet></ROW><ROW><id>8363664</id><snippet>currentItemChanged</snippet></ROW><ROW><id>8363664</id><snippet>itemSelectionChanged</snippet></ROW><ROW><id>8363664</id><snippet>selectedItems</snippet></ROW><ROW><id>8363664</id><snippet>def on_list_ItemSelectionChanged(self):
    if self.list.selectedItems():
        self.ui.actionDelete_Task.setEnabled(True)
    else:
        self.ui.actionDelete_Task.setEnabled(False)
</snippet></ROW><ROW><id>8363664</id><snippet>currentItem()</snippet></ROW><ROW><id>8363664</id><snippet>selectedItems()[0]</snippet></ROW><ROW><id>8363963</id><snippet>dict((k,v) for k,v in d.iteritems())</snippet></ROW><ROW><id>8364071</id><snippet>&gt;&gt;&gt; import collections
&gt;&gt;&gt; seq = ["House", "Dream", "Tree", "Tree", "House", "Sky", "House"]
&gt;&gt;&gt; for word, cnt in collections.Counter(seq).most_common():
        print repr(word), '-', cnt

'House' - 3
'Tree' - 2
'Sky' - 1
'Dream' - 1
</snippet></ROW><ROW><id>8364589</id><snippet>setColumnWidth</snippet></ROW><ROW><id>8364589</id><snippet>self.view.header().resizeSection(column, width)
</snippet></ROW><ROW><id>8364589</id><snippet>setModel</snippet></ROW><ROW><id>8364589</id><snippet>self.view.header().setModel(model)
</snippet></ROW><ROW><id>8364589</id><snippet>tl;dr</snippet></ROW><ROW><id>8364589</id><snippet>from PyQt4 import QtGui, QtCore

class Window(QtGui.QMainWindow):
    def __init__(self):
        QtGui.QMainWindow.__init__(self)
        self.model = QtGui.QStandardItemModel()
        self.view = QtGui.QTreeView()
        self.view.setEditTriggers(QtGui.QAbstractItemView.NoEditTriggers)
        self.view.setModel(self.model)
        self.setCentralWidget(self.view)
        parent = self.model.invisibleRootItem()
        for item in 'One Two Three Four'.split():
            parent.appendRow([
                QtGui.QStandardItem(item),
                QtGui.QStandardItem(),
                QtGui.QStandardItem(),
                ])
        self.view.setColumnWidth(0, 800)

if __name__ == '__main__':

    import sys
    app = QtGui.QApplication(sys.argv)
    window = Window()
    window.show()
    sys.exit(app.exec_())
</snippet></ROW><ROW><id>8364723</id><snippet>numpy.sum(boolarr)
numpy.count_nonzero(boolarr)
</snippet></ROW><ROW><id>8364723</id><snippet>&gt;&gt;&gt; import numpy as np
&gt;&gt;&gt; boolarr = np.array([[0, 0, 1], [1, 0, 1], [1, 0, 1]], dtype=np.bool)
&gt;&gt;&gt; boolarr
array([[False, False,  True],
       [ True, False,  True],
       [ True, False,  True]], dtype=bool)

&gt;&gt;&gt; np.sum(boolarr)
5
</snippet></ROW><ROW><id>8364723</id><snippet>bool</snippet></ROW><ROW><id>8364723</id><snippet>numpy.count_nonzero</snippet></ROW><ROW><id>8364723</id><snippet>&gt;&gt;&gt; np.count_nonzero(boolarr)
5
</snippet></ROW><ROW><id>8364788</id><snippet>&gt;&gt;&gt; print u'Trentem\u00f8ller'
Trentemøller
</snippet></ROW><ROW><id>8364788</id><snippet>&gt;&gt;&gt; import ast
&gt;&gt;&gt; s = 'Trentem\u00f8ller'                   # a regular string
&gt;&gt;&gt; print ast.literal_eval('u"""' + s + '"""')
Trentemøller
</snippet></ROW><ROW><id>8364894</id><snippet>from BeautifulSoup import BeautifulSoup as bs
import urllib as ul

base_url = 'http://www.yellowpages.ca'
data_file = open('yellow_file.txt', 'a')

bt = bs(ul.urlopen(base_url + '/locations/Quebec/Montreal/90014002.html'))

for div in bt.findAll('div', 'ypgCategory'):
    for a in div.findAll('a'):
        link = base_url + a['href']

        bt = bs(ul.urlopen(link), convertEntities=bs.HTML_ENTITIES)

        titles = bt.findAll('span', 'listingTitle')
        phones = bt.findAll('a', 'phoneNumber')

        for title, phone in zip(titles, phones):
            line = '%s   %s\n' % (title.text, phone.text)
            data_file.write(line.encode('utf-8'))
            print line.rstrip()

data_file.close()
</snippet></ROW><ROW><id>8364895</id><snippet>from tkinter import Tk, Message

root = Tk()
m = Message(text="This is a Tkinter message widget. Pretty exiting, huh? I enjoy Tkinter. It is very simple.")
m.pack(expand=True, fill='x')
m.bind("&lt;Configure&gt;", lambda e: m.configure(width=e.width-10))
root.mainloop()
</snippet></ROW><ROW><id>8364999</id><snippet>&lt;input type="hidden" name="foo" value="bar" /&gt;

print request.POST['foo'] # out: bar
</snippet></ROW><ROW><id>8364999</id><snippet>copy()</snippet></ROW><ROW><id>8364999</id><snippet>mutable_post = request.POST.copy()
mutable_post['foo'] = 'bar'

form = MyForm(mutable_post)
</snippet></ROW><ROW><id>8365025</id><snippet>stripe</snippet></ROW><ROW><id>8365025</id><snippet>stripe</snippet></ROW><ROW><id>8365025</id><snippet>easy_install</snippet></ROW><ROW><id>8365025</id><snippet>python2.7 `which easy_install` stripe
</snippet></ROW><ROW><id>8365279</id><snippet>exists()</snippet></ROW><ROW><id>8365279</id><snippet>if my_queryset.exists():
    print "QuerySet has Data"
else:
    print "QuerySet is empty"
</snippet></ROW><ROW><id>8365423</id><snippet>date_select</snippet></ROW><ROW><id>8365423</id><snippet>timedelta</snippet></ROW><ROW><id>8365423</id><snippet>datetime</snippet></ROW><ROW><id>8365423</id><snippet>timedelta</snippet></ROW><ROW><id>8365423</id><snippet>datetime</snippet></ROW><ROW><id>8365423</id><snippet>from datetime import datetime, timedelta

date_select = datetime.strptime('2011-12-1', '%Y-%m-%d')
delta = timedelta(days=1)
target_date = date_select + delta
print target_date
</snippet></ROW><ROW><id>8365423</id><snippet>from ... import ...</snippet></ROW><ROW><id>8365423</id><snippet>import datetime    # &lt;- LOOK HERE, same as in your example

date_select = datetime.datetime.strptime('2011-12-1', '%Y-%m-%d')
delta = datetime.timedelta(days=1)
target_date = date_select + delta
print target_date
</snippet></ROW><ROW><id>8365493</id><snippet>LD_LIBRARY_PATH=my_path
sqsub -np $1 /path/to/executable
</snippet></ROW><ROW><id>8365493</id><snippet>import os
import subprocess
import sys

os.environ['LD_LIBRARY_PATH'] = "my_path"
subprocess.check_call(['sqsub', '-np', sys.argv[1], '/path/to/executable'],
                      env=os.environ)
</snippet></ROW><ROW><id>8365667</id><snippet>gtk.Window.set_decorated</snippet></ROW><ROW><id>8365667</id><snippet>gtk.Window.set_keep_above</snippet></ROW><ROW><id>8365782</id><snippet>latin1</snippet></ROW><ROW><id>8365782</id><snippet>connect()</snippet></ROW><ROW><id>8365782</id><snippet>charset='utf8'</snippet></ROW><ROW><id>8365782</id><snippet>SET NAMES</snippet></ROW><ROW><id>8365782</id><snippet>SET character_set_client</snippet></ROW><ROW><id>8365833</id><snippet>&gt;&gt;&gt; t.strftime('%Y-%m-%d')
'2011-12-02'
</snippet></ROW><ROW><id>8365896</id><snippet>Response ID:</snippet></ROW><ROW><id>8365896</id><snippet>General</snippet></ROW><ROW><id>8365990</id><snippet>LoadModule wsgi_module modules/mod_wsgi.so
</snippet></ROW><ROW><id>8365990</id><snippet>Include conf/extra/httpd-vhosts.conf
</snippet></ROW><ROW><id>8365990</id><snippet>NameVirtualHost 127.0.0.1:80
&lt;VirtualHost 127.0.0.1:80&gt;
    &lt;Directory "path/to/directory/in/which/wsgi_test.wsgi/is/present"&gt;
        Options FollowSymLinks Indexes
        AllowOverride All
        Order deny,allow
        allow from All
    &lt;/Directory&gt;
    ServerName 127.0.0.1
    ServerAlias 127.0.0.1
    WSGIScriptAlias /wsgi "path/to/wsgi_test.wsgi"
    DocumentRoot "path/to/htdocs"
    ErrorLog "path/to/log.err"
    CustomLog "path/to/log.log" combined
&lt;/VirtualHost&gt;
</snippet></ROW><ROW><id>8365990</id><snippet>def application(environ, start_response):
    status = '200 OK'
    output = 'Hello World!'

    response_headers = [('Content-type', 'text/plain'),
                        ('Content-Length', str(len(output)))]
    start_response(status, response_headers)

    return [output]
</snippet></ROW><ROW><id>8365990</id><snippet>&lt;IfModule wsgi_module&gt;
&lt;Directory path/to/directory&gt;
    Options FollowSymLinks Indexes
    AllowOverride All
    Order deny,allow
    allow from All
&lt;/Directory&gt;
WSGIScriptAlias /wsgi path/to/wsgi_test.wsgi
&lt;/IfModule&gt;
</snippet></ROW><ROW><id>8366094</id><snippet>strftime</snippet></ROW><ROW><id>8366094</id><snippet>datetime</snippet></ROW><ROW><id>8366094</id><snippet>datetime.date</snippet></ROW><ROW><id>8366094</id><snippet>entered_date = datetime.datetime.strptime(date_select, '%Y-%m-%d')
entered_date = entered_date.date()
</snippet></ROW><ROW><id>8366285</id><snippet>for t in some_list:
  f.write(' '.join(str(s) for s in t) + '\n')
</snippet></ROW><ROW><id>8366285</id><snippet>f</snippet></ROW><ROW><id>8366285</id><snippet>file</snippet></ROW><ROW><id>8367119</id><snippet>if a &gt; 1:
  # ANYTHING
elif a == 2:
  # ANYTHING
</snippet></ROW><ROW><id>8367119</id><snippet>def action():
  if a &gt; 1:
    if b == 2:
      doSomething()
      return
    if b == 3:
      doSomethingElse()
      return
 if a == 2: # Note: NO elif!
   doDefaultForA2()
   return
 showError("Unknown command")
 return
</snippet></ROW><ROW><id>8367119</id><snippet>function+return</snippet></ROW><ROW><id>8367119</id><snippet>handled</snippet></ROW><ROW><id>8367119</id><snippet>unhandled = True
if a &gt; 1:
  if b == 2:
    doSomething()
    unhandled = False
  if unhandled and b == 3:
    doSomethingElse()
    unhandled = False
if unhandled and a == 2: # Note: NO elif!
  doDefaultForA2()
  unhandled = False
if unhandled:
  showError("Unknown command")
</snippet></ROW><ROW><id>8367162</id><snippet>nu</snippet></ROW><ROW><id>8367358</id><snippet>from selenium import webdriver
from selenium.common.exceptions import NoSuchElementException

driver = webdriver.Firefox()
driver.get("http://whatever")
driver.find_element_by_link_text("link-text").click()
</snippet></ROW><ROW><id>8368218</id><snippet>Node</snippet></ROW><ROW><id>8368218</id><snippet>Project</snippet></ROW><ROW><id>8368218</id><snippet>nodes = Node.objects.filter(Q(project__project_collaborators=user) | Q(collaborators=user)).select_related('project').distinct()
</snippet></ROW><ROW><id>8368218</id><snippet>QuerySet</snippet></ROW><ROW><id>8368218</id><snippet>projects = []
for node in nodes:
    if node.project not in projects:
        projects.append(node.project)
</snippet></ROW><ROW><id>8368218</id><snippet>QuerySet</snippet></ROW><ROW><id>8368218</id><snippet>project_ids = set([node.project.id for node in nodes])
projects = Project.objects.filter(id__in=project_ids)
</snippet></ROW><ROW><id>8368218</id><snippet>Project</snippet></ROW><ROW><id>8368218</id><snippet>Node</snippet></ROW><ROW><id>8368218</id><snippet>projects_and_nodes = {}
for project in projects:
     projects_and_nodes[project] = [node for node in nodes if node.project == project]
</snippet></ROW><ROW><id>8368218</id><snippet>Project</snippet></ROW><ROW><id>8368218</id><snippet>Node</snippet></ROW><ROW><id>8368218</id><snippet>Project</snippet></ROW><ROW><id>8368218</id><snippet># pseudocode
if the user is a collaborator on this project:
    get all the nodes
else:
    get only the nodes applicable to the user
</snippet></ROW><ROW><id>8368218</id><snippet>if request.user in project.project_collaborators.all():
    nodes = project.node_set.all()
else:
    nodes = project.node_set.filter(collaborators=request.user)
</snippet></ROW><ROW><id>8368330</id><snippet>email</snippet></ROW><ROW><id>8368500</id><snippet>&gt;&gt;&gt; print '\u2022'
\u2022
&gt;&gt;&gt; print len('\u2022')
6
&gt;&gt;&gt; import unicodedata
&gt;&gt;&gt; map(unicodedata.name, '\u2022'.decode('ascii'))
['REVERSE SOLIDUS', 'LATIN SMALL LETTER U', 'DIGIT TWO', 'DIGIT ZERO', 'DIGIT TWO', 'DIGIT TWO']
&gt;&gt;&gt; 
</snippet></ROW><ROW><id>8368500</id><snippet>&gt;&gt;&gt; print u'\u2022'
•
&gt;&gt;&gt; print len(u'\u2022')
1
&gt;&gt;&gt; map(unicodedata.name, u'\u2022')
['BULLET']
&gt;&gt;&gt; 
</snippet></ROW><ROW><id>8368500</id><snippet>text.split('\u2022')</snippet></ROW><ROW><id>8368500</id><snippet>text.split(u'\u2022')</snippet></ROW><ROW><id>8368664</id><snippet>print re.search(r"Site:\s*(.*)", alarm).group(1)
</snippet></ROW><ROW><id>8368962</id><snippet>#file: argp.py

import argparse

parser = argparse.ArgumentParser(prog='PROG')
parser_subparsers = parser.add_subparsers()
sub = parser_subparsers.add_parser('sub')
sub_subparsers = sub.add_subparsers()
sub_sub = sub_subparsers.add_parser('sub_sub')                                                                       
sub_sub_subparsers = sub_sub.add_subparsers()
sub_sub_sub = sub_sub_subparsers.add_parser('sub_sub_sub')
</snippet></ROW><ROW><id>8368962</id><snippet>In [392]: run argp.py

In [393]: parser.parse_args('sub sub_sub sub_sub_sub'.split())
Out[393]: Namespace()

In [400]: sys.version_info
Out[400]: sys.version_info(major=2, minor=7, micro=2, releaselevel='final', serial=0)
</snippet></ROW><ROW><id>8369051</id><snippet>In [395]: def tester():
     ...:     print "Tester Called!"
     ...:     return [1,2,3]

In [396]: for i in tester():
     ...:     pass
Tester Called!
</snippet></ROW><ROW><id>8369281</id><snippet>mkdir python-libdir/site-packages/pysvn
cp pysvn/__init__.py python-libdir/site-packages/pysvn   
cp pysvn/_pysvn*.so python-libdir/site-packages/pysvn
</snippet></ROW><ROW><id>8369345</id><snippet>with open ("data.txt", "r") as myfile:
    data=myfile.read().replace('\n', '')
</snippet></ROW><ROW><id>8369458</id><snippet>cv2.cv
</snippet></ROW><ROW><id>8369458</id><snippet>slice = cv2.reduce(image, 1, cv2.cv.CV_REDUCE_SUM, dtype=numpy.int32)
</snippet></ROW><ROW><id>8369514</id><snippet>int(x, 16)</snippet></ROW><ROW><id>8369514</id><snippet>af/ce/13/...</snippet></ROW><ROW><id>8369514</id><snippet>l = [int(x, 16) for x in string.split('/')]
</snippet></ROW><ROW><id>8369651</id><snippet>&gt;&gt;&gt; a=(("a",2),("b",2),("a",1))
&gt;&gt;&gt; from operator import itemgetter
&gt;&gt;&gt; sorted(a, key=itemgetter(1, 0))
[('a', 1), ('a', 2), ('b', 2)]
</snippet></ROW><ROW><id>8369775</id><snippet>profile</snippet></ROW><ROW><id>8369775</id><snippet>python-profiler</snippet></ROW><ROW><id>8370120</id><snippet>"".join(code.get(k, k) for k in str)
</snippet></ROW><ROW><id>8370120</id><snippet>code.get(k, k)</snippet></ROW><ROW><id>8370120</id><snippet>code[k]</snippet></ROW><ROW><id>8370120</id><snippet>k</snippet></ROW><ROW><id>8370120</id><snippet>code</snippet></ROW><ROW><id>8370120</id><snippet>k</snippet></ROW><ROW><id>8370161</id><snippet>raw_input("Press Enter to terminate.")
</snippet></ROW><ROW><id>8370177</id><snippet>class Hop(SQLObject):
    BITTERING = 0 
    AROMA = 1
    BOTH = 2
    LEAF = 0
    PELLET = 1
    PLUG = 2
    hop_types = ['Bittering', 'Aroma', 'Both',]
    hop_forms = ['Leaf', 'Pellet', 'Plug',]

    hop_type = IntCol(default=BITTERING)
    hop_form = IntCol(default=LEAF)
    alpha = PercentCol(default=0.0)
    beta = PercentCol(default=0.0)
    stability = PercentCol(default=0.0)
    origin = UnicodeCol(default=None)
    name = UnicodeCol(length=64, default=None)
    description = UnicodeCol(default=None)
    substitutes = RelatedJoin('Hop',
                              joinColumn='master_hop',
                              otherColumn='substitute_hop',
                              addRemoveName="Substitute",
                              intermediateTable="substitute_hops",
                              createRelatedTable=True)
    versions = Versioning()
</snippet></ROW><ROW><id>8370259</id><snippet>District (also called deanery or vicariate. In this case they all seem to be Vicariates Forane.)
    Cathedral, Parish, Oratory
</snippet></ROW><ROW><id>8370259</id><snippet>li</snippet></ROW><ROW><id>8370259</id><snippet>i</snippet></ROW><ROW><id>8370259</id><snippet>i</snippet></ROW><ROW><id>8370259</id><snippet>br</snippet></ROW><ROW><id>8370259</id><snippet>MinimalSoup</snippet></ROW><ROW><id>8370259</id><snippet>BeautifulSoup</snippet></ROW><ROW><id>8370259</id><snippet>li</snippet></ROW><ROW><id>8370259</id><snippet>ol</snippet></ROW><ROW><id>8370259</id><snippet>ul</snippet></ROW><ROW><id>8370259</id><snippet>('key','value')</snippet></ROW><ROW><id>8370259</id><snippet>from BeautifulSoup import MinimalSoup
import urllib

fp = urllib.urlopen("http://www.ucanews.com/diocesan-directory/html/ordinary-of-philippine-cagayandeoro-parishes.html")
html = fp.read()
fp.close()

soup = MinimalSoup(html);

root = soup.table.tr.td

items = []
currentdistrict = None
# this loops through each "item"
for li in root.findAll(lambda tag: tag.name=='li' and len(tag.attrs)==0):
    attributes = []
    parishordistrict = li.next.strip()
     # look for string "district" to determine if district; otherwise it's something else under the district
    if parishordistrict.endswith(' District'):
        currentdistrict = parishordistrict
        attributes.append(('_isDistrict',True))
    else:
        attributes.append(('_isDistrict',False))

    attributes.append(('_name',parishordistrict))
    attributes.append(('_district',currentdistrict))

    # now loop through all attributes of this thing
    attributekeys = li.findAll('i')

    for i in attributekeys:
        key = i.string # normalize as needed. Will be 'Address:', 'Parochial Victor:', etc
        # now continue among the siblings until we reach an &lt;i&gt; again.
        # these are "values" of this key
        # if you want a nested key:[values] structure, you can use a dict,
        # but beware of multiple &lt;i&gt; with the same name in your logic
        next = i.nextSibling
        while next is not None and getattr(next, 'name', None) != 'i':
            if not hasattr(next, 'name') and getattr(next, 'string', None):
                value = next.string.strip()
                if value:
                    attributes.append((key, value))
            next = next.nextSibling
    items.append(attributes)

from pprint import pprint
pprint(items)
</snippet></ROW><ROW><id>8370405</id><snippet>&gt;&gt;&gt; import socket
&gt;&gt;&gt; print socket.gethostbyname('google.com')
74.125.236.52
</snippet></ROW><ROW><id>8370415</id><snippet>sys.builtin_module_names</snippet></ROW><ROW><id>8370415</id><snippet>pkgutil.iter_modules</snippet></ROW><ROW><id>8370415</id><snippet>virtualenv</snippet></ROW><ROW><id>8370643</id><snippet>...</snippet></ROW><ROW><id>8370643</id><snippet>:</snippet></ROW><ROW><id>8370643</id><snippet>ExtSlice</snippet></ROW><ROW><id>8370643</id><snippet>o[...:None]</snippet></ROW><ROW><id>8370643</id><snippet>o[1,2:3]</snippet></ROW><ROW><id>8370643</id><snippet>&gt;&gt;&gt; compile('o[x]', '&lt;string&gt;', 'exec', PyCF_ONLY_AST).body[0].value.slice
&lt;_ast.Index object at 0xb72a9e6c&gt;
&gt;&gt;&gt; compile('o[x,y]', '&lt;string&gt;', 'exec', PyCF_ONLY_AST).body[0].value.slice
&lt;_ast.Index object at 0xb72a9dac&gt;
&gt;&gt;&gt; compile('o[x:y]', '&lt;string&gt;', 'exec', PyCF_ONLY_AST).body[0].value.slice
&lt;_ast.Slice object at 0xb72a9dcc&gt;
&gt;&gt;&gt; compile('o[x:y,z]', '&lt;string&gt;', 'exec', PyCF_ONLY_AST).body[0].value.slice
&lt;_ast.ExtSlice object at 0xb72a9f0c&gt;
&gt;&gt;&gt; 
</snippet></ROW><ROW><id>8370696</id><snippet>&gt;&gt;&gt; 1j
1j
&gt;&gt;&gt; 1j * 1j
(-1+0j)
</snippet></ROW><ROW><id>8370696</id><snippet>cmath</snippet></ROW><ROW><id>8370696</id><snippet>&gt;&gt;&gt; import cmath
&gt;&gt;&gt; cmath.sin(2 + 3j)
(9.15449914691143-4.168906959966565j)
</snippet></ROW><ROW><id>8370696</id><snippet>&gt;&gt;&gt; abs(3 + 4j)
5.0
&gt;&gt;&gt; pow(3 + 4j, 2)
(-7+24j)
</snippet></ROW><ROW><id>8371017</id><snippet>for item in l:
  print item[0], ', '.join(map(str, item[1:]))
</snippet></ROW><ROW><id>8371017</id><snippet>l</snippet></ROW><ROW><id>8371017</id><snippet>tables 1, 2
ladders 2, 5
chairs 2
</snippet></ROW><ROW><id>8371036</id><snippet>ppython</snippet></ROW><ROW><id>8371036</id><snippet>panda3d.pth</snippet></ROW><ROW><id>8371036</id><snippet>C:\[Python Version]\Lib\site-packages</snippet></ROW><ROW><id>8371036</id><snippet>ppython</snippet></ROW><ROW><id>8371111</id><snippet>    for i in lst1 :
            for j in lst2 :
</snippet></ROW><ROW><id>8371111</id><snippet>lst1 = ["hello", "first", "is"]
lst2 = ["my", "name", "tom"]
new_list = []
    for i in range(len(lst1)):
                    new_list.append((lst1[i], list2[i]))
    return new_list
</snippet></ROW><ROW><id>8371317</id><snippet>test = table.nextSibling
</snippet></ROW><ROW><id>8371320</id><snippet>abutton = self.mybuttons[arow][acolumn]
text_at_row_col = abutton["text"]
</snippet></ROW><ROW><id>8371320</id><snippet>button.bind("&lt;Button-1&gt;", self.callback)
</snippet></ROW><ROW><id>8371320</id><snippet>def callback(self, event):
    mybutton = event.widget
    text_at_row_col = mybutton["text"]
</snippet></ROW><ROW><id>8371504</id><snippet>if w == u"ה.": print (w)
</snippet></ROW><ROW><id>8371504</id><snippet>w</snippet></ROW><ROW><id>8371504</id><snippet>w = u"..."</snippet></ROW><ROW><id>8371565</id><snippet>import string

def clean_string(input_string):
    result = ""
    for char in input_string:
        if char in string.letters: # string.letters contains a...zA...Z
            result += char
    return result
</snippet></ROW><ROW><id>8371565</id><snippet>def clean_string2(input_string):
    return "".join([char for char in input_string if char in string.letters])
</snippet></ROW><ROW><id>8371661</id><snippet>/Applications</snippet></ROW><ROW><id>8371802</id><snippet>subprocess.call([join(home_dir,bin,'pip'),'install -r requirements.txt'])
</snippet></ROW><ROW><id>8371802</id><snippet>'install -r requirements.txt'</snippet></ROW><ROW><id>8371802</id><snippet>pip 'install -r requirements.txt'</snippet></ROW><ROW><id>8371802</id><snippet>subprocess.call([join(home_dir,bin,'pip'), 'install', '-r', 'requirements.txt'])
</snippet></ROW><ROW><id>8371921</id><snippet>re.sub</snippet></ROW><ROW><id>8371921</id><snippet>repl</snippet></ROW><ROW><id>8371921</id><snippet>re.match</snippet></ROW><ROW><id>8371921</id><snippet>s.sub(lambda m: q(m.group()), "A/B")
</snippet></ROW><ROW><id>8371921</id><snippet>safe</snippet></ROW><ROW><id>8371921</id><snippet>urllib.quote</snippet></ROW><ROW><id>8371921</id><snippet>urllib.quote("A/B", safe="/.: ^*$@!+_?-")
</snippet></ROW><ROW><id>8371972</id><snippet>return = client.service[0]['MyClass.mymethod']('input string')
</snippet></ROW><ROW><id>8372132</id><snippet>import sys
import time
import os

watchdir = '/home/lou/Documents/script/txts/'
contents = os.listdir(watchdir)
count = len(watchdir)
dirmtime = os.stat(watchdir).st_mtime

while True:
    newmtime = os.stat(watchdir).st_mtime
    if newmtime != dirmtime:
        dirmtime = newmtime
        newcontents = os.listdir(watchdir)
        added = set(newcontents).difference(contents)
        if added:
            print "Files added: %s" %(" ".join(added))
        removed = set(contents).difference(newcontents)
        if removed:
            print "Files removed: %s" %(" ".join(removed))

        contents = newcontents
    time.sleep(30)
</snippet></ROW><ROW><id>8372264</id><snippet>min</snippet></ROW><ROW><id>8372264</id><snippet>max</snippet></ROW><ROW><id>8372264</id><snippet>for line in data1:</snippet></ROW><ROW><id>8372264</id><snippet>line</snippet></ROW><ROW><id>8372264</id><snippet>x</snippet></ROW><ROW><id>8372264</id><snippet># These assertions state the presumed effect of code that you have not included.
assert len(data1) == 10
assert d_chan == []
# I suspect a typo in the OP ... it makes more sense for the 
# two values below to be the same.
MIN_COL = 3
MAX_COL = 2
d_chan = [[0, 0] for i in xrange(9)]
min10 = min(data1[i][MIN_COL] for i in xrange(10))      
max10 = max(data1[i][MAX_COL] for i in xrange(10))
d_chan.append([max10, min10])
</snippet></ROW><ROW><id>8372438</id><snippet>&gt;&gt;&gt; import itertools
&gt;&gt;&gt; foo = [[1, 2, 3], [4, 5, 6], [7, 8, 8]]
&gt;&gt;&gt; for p in itertools.permutations(foo, 2):
...     print zip(*p)
... 
[(1, 4), (2, 5), (3, 6)]
[(1, 7), (2, 8), (3, 8)]
[(4, 1), (5, 2), (6, 3)]
[(4, 7), (5, 8), (6, 8)]
[(7, 1), (8, 2), (8, 3)]
[(7, 4), (8, 5), (8, 6)]
</snippet></ROW><ROW><id>8372438</id><snippet>&gt;&gt;&gt; import itertools
&gt;&gt;&gt; for p in itertools.combinations(foo, 2):
...     print zip(*p)
... 
[(1, 4), (2, 5), (3, 6)]
[(1, 7), (2, 8), (3, 8)]
[(4, 7), (5, 8), (6, 8)]
</snippet></ROW><ROW><id>8372442</id><snippet>[list(a) for a in zip([1,2,3], [4,5,6], [7,8,9])]
</snippet></ROW><ROW><id>8372444</id><snippet>other_objs[0]</snippet></ROW><ROW><id>8372444</id><snippet>other_objs[0].myattr1</snippet></ROW><ROW><id>8372444</id><snippet>objects.values_list</snippet></ROW><ROW><id>8372444</id><snippet>attrs = ['id', 'attr1']
values = Object1.objects.values_list(attrs)[0]
obj_dict = dict(zip(attrs, values))
</snippet></ROW><ROW><id>8372462</id><snippet>view = QGraphicsView()
view.setScene(scene)
view.setSceneRect(QRectF(view.viewport().rect()))
</snippet></ROW><ROW><id>8372730</id><snippet>any</snippet></ROW><ROW><id>8372730</id><snippet>not in</snippet></ROW><ROW><id>8372730</id><snippet>if selection not in commands:
</snippet></ROW><ROW><id>8372730</id><snippet>any</snippet></ROW><ROW><id>8372730</id><snippet>True</snippet></ROW><ROW><id>8372730</id><snippet>any(commands)</snippet></ROW><ROW><id>8372730</id><snippet>True</snippet></ROW><ROW><id>8372730</id><snippet>True</snippet></ROW><ROW><id>8372730</id><snippet>commands</snippet></ROW><ROW><id>8372932</id><snippet>COMP\d+</snippet></ROW><ROW><id>8372932</id><snippet>\d</snippet></ROW><ROW><id>8372932</id><snippet>+</snippet></ROW><ROW><id>8372932</id><snippet>from BeautifulSoup import BeautifulSoup
import re

day ='Mon'
codePat = re.compile(r'COMP\d+')

with open('timetable.txt', 'rt') as input_file:
  html = input_file.read()
  soup = BeautifulSoup(html)
  #finds correct day tag
  starttag = soup.find(text=day).parent.parent
#  print starttag
  nexttag = starttag
  row=[]
  x = 0
  #puts all td tags for that day in a list
  while x &lt; 18:
    nexttag = nexttag.nextSibling.nextSibling
    found = codePat.search(repr(nexttag))
    if found:
      row.append(found.group(0))
    x += 1
print row
</snippet></ROW><ROW><id>8372932</id><snippet>['COMP1940', 'COMP1550', 'COMP1740']
</snippet></ROW><ROW><id>8373076</id><snippet>s.send('wget http://url/file1')
print "file 1 OK"
s.recv(1024) # Wait for ANY response
s.send(....
</snippet></ROW><ROW><id>8373076</id><snippet>while True:
    data = conn.recv(1024)
    cmd = ['/bin/sh', '-c', data]
    proc = subprocess.Popen(cmd, stdout=subprocess.PIPE).wait()
    conn.send('done') # Send something, ANYTHING
# EOF
</snippet></ROW><ROW><id>8373102</id><snippet># state_slugs lets you lookup either state name or code =&gt; its slug
state_slugs = {}
# states_from_slugs lets you lookup the slug =&gt; the state name
states_from_slugs = {}

for state_name, state_code in state_dict.items():
    slug = state_name.lower().replace(' ', '_')
    state_slugs[state_name] = slug
    state_slugs[state_code] = slug
    states_from_slugs[slug] = state_name
</snippet></ROW><ROW><id>8373102</id><snippet>state_dict</snippet></ROW><ROW><id>8373102</id><snippet>state_slugs['NC']</snippet></ROW><ROW><id>8373102</id><snippet>state_slugs['North Carolina']</snippet></ROW><ROW><id>8373102</id><snippet>states_from_slugs['north_carolina']</snippet></ROW><ROW><id>8373103</id><snippet>indices = [1, 4, 5, 6, 7]
zero = numpy.zeros(10)
zero[indices] = 42
</snippet></ROW><ROW><id>8373177</id><snippet>from flask import Flask
from Cheetah.Template import Template


mainTemplate = """
&lt;html&gt;
    &lt;head&gt;&lt;title&gt;$title&lt;/title&gt;&lt;/head&gt;
    &lt;body&gt;&lt;h1&gt;$title&lt;/h1&gt;&lt;/body&gt;
&lt;/html&gt;"""


app = Flask(__name__)


@app.route('/')
def main_route():
    return render(mainTemplate, {'title': 'Welcome to "/"!'})


def render(template, context):
    """Helper function to make template rendering less painful."""
    return str(Template(template, namespaces=[context]))


if __name__ == "__main__":
    app.run()
</snippet></ROW><ROW><id>8373426</id><snippet>sub</snippet></ROW><ROW><id>8373426</id><snippet>re</snippet></ROW><ROW><id>8373426</id><snippet>&gt;&gt;&gt; import re
&gt;&gt;&gt; s = 'I like this as much as that'
&gt;&gt;&gt; re.sub('and|as|like', '', s)
'I  this  much  that'
</snippet></ROW><ROW><id>8373470</id><snippet>&gt;&gt;&gt; import numpy as np
&gt;&gt;&gt; np.set_printoptions(linewidth=132)
&gt;&gt;&gt; a = np.arange(100).reshape(2,50)
&gt;&gt;&gt; a
array([[ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16, 17, 18,       19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30,
    31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49],
   [50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80,
    81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99]])
</snippet></ROW><ROW><id>8373490</id><snippet>numpy.squeeze</snippet></ROW><ROW><id>8373647</id><snippet>float</snippet></ROW><ROW><id>8373647</id><snippet>float</snippet></ROW><ROW><id>8373647</id><snippet>float</snippet></ROW><ROW><id>8373647</id><snippet>object['score-set'] = [(a, float(b)) for (a, b) in object['score-set']]
</snippet></ROW><ROW><id>8373673</id><snippet>def computation(A):
    for i in range(A.shape[0]):
        idx_begin = A.indptr[i]
        idx_end = A.indptr[i+1]
        row_nnz = idx_end - idx_begin
        diag_elems = A.data[idx_begin:idx_end]
        diag_indices = A.indices[idx_begin:idx_end]
        ith_diag = sparse.csc_matrix((diag_elems, (diag_indices, diag_indices)),shape=(A.shape[1], A.shape[1]))
        ith_diag.eliminate_zeros()
</snippet></ROW><ROW><id>8373756</id><snippet>exists</snippet></ROW><ROW><id>8373756</id><snippet>x = Booking.objects.filter(date_select='2011-12-3')
if x.exists():
   # There are some results from this query set
</snippet></ROW><ROW><id>8373756</id><snippet>count</snippet></ROW><ROW><id>8373756</id><snippet>x = Booking.objects.filter(date_select='2011-12-3')
print x.count()
</snippet></ROW><ROW><id>8373825</id><snippet>__init__.py</snippet></ROW><ROW><id>8373825</id><snippet>import MyClass</snippet></ROW><ROW><id>8373825</id><snippet>from MyClass import MyClass</snippet></ROW><ROW><id>8373825</id><snippet>__all__</snippet></ROW><ROW><id>8373825</id><snippet>mylib.MyClass</snippet></ROW><ROW><id>8374028</id><snippet>Dict</snippet></ROW><ROW><id>8374028</id><snippet>Dict</snippet></ROW><ROW><id>8374028</id><snippet>List</snippet></ROW><ROW><id>8374028</id><snippet>## Broken method definition: def _inputs_changed(self, old, new):
# container event static listeners must be in the form of _foo_items_changed()
def _inputs_items_changed(self, old, new):
    # static event listener for self.inputs
    if len(new.added) &gt; 0:
        print "Check it out, we added %s to self.items" % new.added
    elif len(new.removed) &gt; 0:
        print "Check it out, we removed %s from self.items" % new.removed
</snippet></ROW><ROW><id>8374028</id><snippet>on_trait_change</snippet></ROW><ROW><id>8374028</id><snippet>traits</snippet></ROW><ROW><id>8374028</id><snippet>traits.api.List</snippet></ROW><ROW><id>8374028</id><snippet>traits.api.Dict</snippet></ROW><ROW><id>8374028</id><snippet>from traits.api import on_trait_change
# ...
@on_trait_change('inputs_items')
def something_changed(self, name, new):
    # static event listener for self.inputs
    if len(new.added) &gt; 0:
        print "Check it out, we added %s to self.items" % new.added
    elif len(new.removed) &gt; 0:
        print "Check it out, we removed %s from self.items" % new.removed
</snippet></ROW><ROW><id>8374028</id><snippet>[mpenning@Bucksnort ~]$ python spinaltap.py
Check it out, we added [5.0] to self.items
Check it out, we added [11.0] to self.items
This one goes to eleven... so far, we have seen [5.0, 11.0]
DIRECTLY adding a new volume input...
Check it out, we added [4.0] to self.items
NEGATIVE Test... adding 12.0
Test passed
[mpenning@Bucksnort ~]$
</snippet></ROW><ROW><id>8374430</id><snippet>asrock = Brand(name='Asrock')
asus = Brand(name='Asus')
mobo = Category(name='Motherboard')
proc = Category(name='Processor')     
session.commit()

p1 = Product(name='N98', cost=2100.50, price=2500.50, order_quantity=5, unit='unit',    
    category=mobo, brand=asrock)

p2 = Product(name='M-N98', cost=2300.50, price=2500.50, order_quantity=5, unit='unit',    
    category=mobo, brand=asus)

session.commit()
</snippet></ROW><ROW><id>8374611</id><snippet>isinstance</snippet></ROW><ROW><id>8374611</id><snippet>if isinstance(c, complex):
</snippet></ROW><ROW><id>8374767</id><snippet>#!/bin/sh
case $1 in
start) 
nohup ./server.py &amp;
echo $! &gt; ./server.pid
;;
stop) # code to stop the service
kill `cat ./server.pid`
esac
</snippet></ROW><ROW><id>8374915</id><snippet>def get(self):
  city = self.request.get('city')
  state = self.request.get('state')
</snippet></ROW><ROW><id>8375552</id><snippet>.close()</snippet></ROW><ROW><id>8375552</id><snippet># ...
start_response(status, response_headers)
return ResponseIterator(iter(queue.get, None),
     on_finish=lambda: Processor.connections.remove(queue))
</snippet></ROW><ROW><id>8375552</id><snippet>ResponseIterator</snippet></ROW><ROW><id>8375552</id><snippet>class ResponseIterator:

  def __init__(self, iterator, on_finish=None):
      self.iterator = iterator
      self.on_finish = on_finish

  def __iter__(self):
      return self

  def next(self):
      return next(self.iterator)

  def close(self):
      if self.on_finish is not None:
         self.on_finish()
</snippet></ROW><ROW><id>8375556</id><snippet>def chart(occurance_list):
    hour_list = [t.hour for t in occurance_list]
    print hour_list
    numbers=[x for x in xrange(0,24)]
    labels=map(lambda x: str(x), numbers)
    plt.xticks(numbers, labels)
    plt.xlim(0,24)
    plt.hist(hour_list)
    plt.show()
</snippet></ROW><ROW><id>8375649</id><snippet>u'Adam Gilchrist xxxxxxxxxxxxxxxxxxxxx'</snippet></ROW><ROW><id>8375649</id><snippet>temp1=u'Adam Gilchrist xxxxxxxxxxxxxxxxxxxxx'
x=re.search(u'Adam',temp1)    
x.group()    
u'Adam'
</snippet></ROW><ROW><id>8375864</id><snippet>pip install gapbuffer</snippet></ROW><ROW><id>8375963</id><snippet>self</snippet></ROW><ROW><id>8375963</id><snippet>My_Class</snippet></ROW><ROW><id>8375963</id><snippet>def addToList(funcList):
    '''Decorator that adds the function to a given list'''
    def actual_decorator(f):
         funcList.append(f)
         return f
    return actual_decorator

class MyClass(object):
    funcList = []

    @addToList(funcList)
    def some_function(self, name):
        print 'Hello,', name
</snippet></ROW><ROW><id>8375963</id><snippet>MyClass.funcList</snippet></ROW><ROW><id>8376104</id><snippet>'/home/mhh91/django_test/polls/admin'</snippet></ROW><ROW><id>8376104</id><snippet>/home/mhh91/django_test/templates',</snippet></ROW><ROW><id>8376104</id><snippet>admin/base_site.html</snippet></ROW><ROW><id>8376104</id><snippet>/home/mhh91/django_test/templates/</snippet></ROW><ROW><id>8376271</id><snippet>func.py</snippet></ROW><ROW><id>8376271</id><snippet>## @package func
#  Module docs

## A function
#
#  More documentation.
def foo():
    print "Hello World!"

## Another function.
#
#  This function simply calls foo()
def bar():
    foo()
</snippet></ROW><ROW><id>8376271</id><snippet>another.py</snippet></ROW><ROW><id>8376271</id><snippet>## @package another
#
#  Another module

import func

## This function calls func.foo()
def another():
     foo()
</snippet></ROW><ROW><id>8376273</id><snippet># Initializations:
from matplotlib import pyplot as pp
import numpy as np

pp.ion()  # "Interactive mode on": pyplot.* commands draw immediately

# Data:
series_red_y = [1.3, 1.4, 2.2]
series_blue_y = [1.6, 1.8, 1.8]
series_blue_err = [0.25, 0.25, 0.5]
names = ('Category 1', 'Category 2', 'Category 3')

# Where on the x-axis the data will go:    
series_red_x = np.arange(0, 3*len(series_red_y), 3)  # Step of 3: red dot, blue dot, empty space
series_blue_x = np.arange(1, 3*len(series_blue_y)+1, 3)  # Step of 3: red dot, blue dot, empty space

# Plotting:
pp.scatter(series_red_x, series_red_y, c='r', s=100)
pp.scatter(series_blue_x, series_blue_y, s=100)
pp.errorbar(series_blue_x, series_blue_y, yerr=series_blue_err, fmt=None,
            capsize=0)
pp.xticks((series_red_x+series_blue_x)/2., names)

# We wait until the user is ready to close the program:
raw_input('Press enter...')
</snippet></ROW><ROW><id>8376648</id><snippet>"unicode string"</snippet></ROW><ROW><id>8376648</id><snippet>from array import *
a = array('u', u"unicode string")
</snippet></ROW><ROW><id>8376648</id><snippet>a = array('u', u'\0' * size)
</snippet></ROW><ROW><id>8376648</id><snippet>size</snippet></ROW><ROW><id>8376685</id><snippet>imshow</snippet></ROW><ROW><id>8376685</id><snippet>imshow(array, interpolation="nearest") 
</snippet></ROW><ROW><id>8376685</id><snippet>A=10*np.eye(10) + np.random.rand(100).reshape(10,10)
imshow(A)
</snippet></ROW><ROW><id>8376685</id><snippet>A=10*np.eye(10) + np.random.rand(100).reshape(10,10)
imshow(A, interpolation="nearest")
</snippet></ROW><ROW><id>8376797</id><snippet>__init__</snippet></ROW><ROW><id>8376797</id><snippet>def __init__(self, size=8):
  self.buffer = [1] * size
</snippet></ROW><ROW><id>8376797</id><snippet>Example</snippet></ROW><ROW><id>8376797</id><snippet>e = Example()
</snippet></ROW><ROW><id>8376797</id><snippet>e = Example(10)
</snippet></ROW><ROW><id>8376797</id><snippet>e = Example(size=10)
</snippet></ROW><ROW><id>8376987</id><snippet>ls -l</snippet></ROW><ROW><id>8376987</id><snippet>subprocess.call(['ls', '-l'])
</snippet></ROW><ROW><id>8376987</id><snippet>subprocess.call(['.\Ext\PrintfPC', '/p', 'C:\Leica\DBX', '/l', '.\joblist.log'])
</snippet></ROW><ROW><id>8376987</id><snippet>Popen</snippet></ROW><ROW><id>8377135</id><snippet>from PIL import Image, ImageDraw

img = Image.new('RGBA',(100, 100))

draw = ImageDraw.Draw(img)
draw.ellipse((25, 25, 75, 75), fill=(255, 0, 0))

img.save('test.gif', 'GIF', transparency=0)
</snippet></ROW><ROW><id>8377253</id><snippet>'c'</snippet></ROW><ROW><id>8377253</id><snippet>array</snippet></ROW><ROW><id>8377253</id><snippet>a = array.array("b",4*(0,))
a[0] = 'h'
a[1] = 'h'
a[2] = 'h'
</snippet></ROW><ROW><id>8377253</id><snippet>a=array.array('u', "hhh") # the same as yours, but shorter
a.tounicode()
</snippet></ROW><ROW><id>8377253</id><snippet>bytes()</snippet></ROW><ROW><id>8377364</id><snippet>elinks</snippet></ROW><ROW><id>8377364</id><snippet>urwid</snippet></ROW><ROW><id>8377373</id><snippet>import requests
import lxml.html as lh


def gender_genie(text, genre):
    url = 'http://bookblog.net/gender/analysis.php'
    caption = 'The Gender Genie thinks the author of this passage is:'

    form_data = {
        'text': text,
        'genre': genre,
        'submit': 'submit',
    }

    response = requests.post(url, data=form_data)

    tree = lh.document_fromstring(response.content)

    return tree.xpath("//b[text()=$caption]", caption=caption)[0].tail.strip()


if __name__ == '__main__':
    print gender_genie('I have a beard!', 'blog')
</snippet></ROW><ROW><id>8377382</id><snippet>def create_or_update_and_get(model_class, data):
    get_or_create_kwargs = {
        model_class._meta.pk.name: data.pop(model_class._meta.pk.name)
    }
    try:
        # get
        instance = model_class.objects.get(**get_or_create_kwargs)
    except model_class.DoesNotExist:
        # create
        instance = model_class(**get_or_create_kwargs)
    # update (or finish creating)
    for key,value in data.items():
        field = model_class._meta.get_field(key)
        if not field:
            continue
        if isinstance(field, models.ManyToManyField):
            # can't add m2m until parent is saved
            continue
        elif isinstance(field, models.ForeignKey) and hasattr(value, 'items'):
            rel_instance = create_or_update_and_get(field.rel.to, value)
            setattr(instance, key, rel_instance)
        else:
            setattr(instance, key, value)
    instance.save()
    # now add the m2m relations
    for field in model_class._meta.many_to_many:
        if field.name in data and hasattr(data[field.name], 'append'):
            for obj in data[field.name]:
                rel_instance = create_or_update_and_get(field.rel.to, obj)
                getattr(instance, field.name).add(rel_instance)
    return instance

# for example:
from django.utils.simplejson import simplejson as json

data = json.loads(ninja_json)
ninja = create_or_update_and_get(NinjaData, data)
</snippet></ROW><ROW><id>8377413</id><snippet>__nonzero__</snippet></ROW><ROW><id>8377413</id><snippet>__bool__</snippet></ROW><ROW><id>8377413</id><snippet>if img.is_loaded():</snippet></ROW><ROW><id>8377413</id><snippet>__nonzero__</snippet></ROW><ROW><id>8377413</id><snippet>__bool__</snippet></ROW><ROW><id>8377413</id><snippet>__len__()</snippet></ROW><ROW><id>8377413</id><snippet>len(obj) == 0</snippet></ROW><ROW><id>8377429</id><snippet>subprocess.call</snippet></ROW><ROW><id>8377429</id><snippet>returncode</snippet></ROW><ROW><id>8377429</id><snippet>subprocess.check_call</snippet></ROW><ROW><id>8377429</id><snippet>call</snippet></ROW><ROW><id>8377429</id><snippet>check_call</snippet></ROW><ROW><id>8377434</id><snippet>handle_options</snippet></ROW><ROW><id>8377434</id><snippet>Menu</snippet></ROW><ROW><id>8377434</id><snippet>class Menu(object):
   def __init__(self):
      # Ideally, self._options would be an empty dict for the base class.
      # This is just for the sake of example.
      self._options = {'a': self.optionA,
                       'b': self.optionB}

   def handle_options(self, option):
      if option not in self._options:
         print "Invalid option"
         # re-draw
         return

      self._options[option]()

   def optionA(self):
      print "option A"

   def optionB(self):
      print "option B"
</snippet></ROW><ROW><id>8377434</id><snippet>self._options</snippet></ROW><ROW><id>8377434</id><snippet>class SubMenu(Menu):
   def __init__(self):
      Menu.__init__(self)

      self._options = {'c': self.optionC,
                       'd': self.optionD}

   def optionC(self):
      # ...

   def optionD(self):
      # ...
</snippet></ROW><ROW><id>8377434</id><snippet>self._options</snippet></ROW><ROW><id>8377440</id><snippet>' '.join(re.sub("(@[A-Za-z0-9]+)|([^0-9A-Za-z \t])|(\w+:\/\/\S+)"," ",x).split())
</snippet></ROW><ROW><id>8377440</id><snippet>&gt;&gt;&gt; x="@peter I really love that shirt at #Macy. http://bit.ly//WjdiW4"
&gt;&gt;&gt; ' '.join(re.sub("(@[A-Za-z0-9]+)|([^0-9A-Za-z \t])|(\w+:\/\/\S+)"," ",x).split())
'I really love that shirt at Macy'
&gt;&gt;&gt; x="@shawn Titanic tragedy could have been prevented Economic Times: Telegraph.co.ukTitanic tragedy could have been preve... http://bit.ly/tuN2wx"
&gt;&gt;&gt; ' '.join(re.sub("(@[A-Za-z0-9]+)|([^0-9A-Za-z \t])|(\w+:\/\/\S+)"," ",x).split())
'Titanic tragedy could have been prevented Economic Times Telegraph co ukTitanic tragedy could have been preve'
&gt;&gt;&gt; x="I am at Starbucks http://4sq.com/samqUI (7419 3rd ave, at 75th, Brooklyn) "
&gt;&gt;&gt; ' '.join(re.sub("(@[A-Za-z0-9]+)|([^0-9A-Za-z \t])|(\w+:\/\/\S+)"," ",x).split())
'I am at Starbucks 7419 3rd ave at 75th Brooklyn'
&gt;&gt;&gt; 
</snippet></ROW><ROW><id>8377440</id><snippet>&gt;&gt;&gt; x="I c RT @iamFink: @SamanthaSpice that's my excited face and my regular face. The expression never changes."
&gt;&gt;&gt; ' '.join(re.sub("(@[A-Za-z0-9]+)|([^0-9A-Za-z \t])|(\w+:\/\/\S+)"," ",x).split())
'I c RT that s my excited face and my regular face The expression never changes'
&gt;&gt;&gt; x="RT @AstrologyForYou: #Gemini recharges through regular contact with people of like mind, and social involvement that allows expression of their ideas"
&gt;&gt;&gt; ' '.join(re.sub("(@[A-Za-z0-9]+)|([^0-9A-Za-z \t])|(\w+:\/\/\S+)"," ",x).split())
'RT Gemini recharges through regular contact with people of like mind and social involvement that allows expression of their ideas'
&gt;&gt;&gt; # Though after you add # to the regex expression filter, results become a bit better
&gt;&gt;&gt; ' '.join(re.sub("([@#][A-Za-z0-9]+)|([^0-9A-Za-z \t])|(\w+:\/\/\S+)"," ",x).split())
'RT recharges through regular contact with people of like mind and social involvement that allows expression of their ideas'
&gt;&gt;&gt; x="New comment by diego.bosca: Re: Re: wrong regular expression? http://t.co/4KOb94ua"
&gt;&gt;&gt; ' '.join(re.sub("(@[A-Za-z0-9]+)|([^0-9A-Za-z \t])|(\w+:\/\/\S+)"," ",x).split())
'New comment by diego bosca Re Re wrong regular expression'
&gt;&gt;&gt; #See how miserably it performed?
&gt;&gt;&gt; 
</snippet></ROW><ROW><id>8377459</id><snippet>&gt;&gt;&gt; print request_url
http%3A%2F%2Fipeirotis.appspot.com%2Freadability%2FGetReadabilityScores%3Fformat
%3Djson%26text%3Dthis+reminds+me+of+the+Dutch+2001a+caravan+full+of+smoky+people
+Auld+Lang+Syne
</snippet></ROW><ROW><id>8377459</id><snippet>text = 'this reminds me of the Dutch 2001a caravan full of smoky people Auld Lang Syne'
# construct Readability Metrics API url
request_url = 'http://ipeirotis.appspot.com/readability/GetReadabilityScores?format=json&amp;text=%s' % urllib.quote_plus(text.encode('utf-8'))
# make request
j = json.load(urllib.urlopen(request_url))
</snippet></ROW><ROW><id>8377484</id><snippet>gtk.gdk.threads_init()

...

def on_button_clicked(button):
    label.set_text("Doing something...")
    threading.Thread(target=do_something).start()

def do_something():
    time.sleep(2)
    glib.idle_add(label.set_text, "Done")
</snippet></ROW><ROW><id>8377490</id><snippet>array.array</snippet></ROW><ROW><id>8377490</id><snippet>dict</snippet></ROW><ROW><id>8377490</id><snippet>list</snippet></ROW><ROW><id>8377490</id><snippet>&gt;&gt;&gt; def make_lookup_func(table):
...     def lookup(val, t=table):
...         return t[val]
...     return lookup
... 
&gt;&gt;&gt; lookup_tuple = make_lookup_func(tuple(range(10)))
&gt;&gt;&gt; lookup_list = make_lookup_func(list(range(10)))
&gt;&gt;&gt; lookup_array = make_lookup_func(array.array('i', range(10)))
&gt;&gt;&gt; lookup_dict = make_lookup_func(dict(zip(range(10), range(10))))
&gt;&gt;&gt; %timeit lookup_tuple(9)
10000000 loops, best of 3: 177 ns per loop
&gt;&gt;&gt; %timeit lookup_list(9)
10000000 loops, best of 3: 158 ns per loop
&gt;&gt;&gt; %timeit lookup_array(9)
10000000 loops, best of 3: 181 ns per loop
&gt;&gt;&gt; %timeit lookup_dict(9)
10000000 loops, best of 3: 166 ns per loop
</snippet></ROW><ROW><id>8377490</id><snippet>&gt;&gt;&gt; lookup_tuple = make_lookup_func(tuple(range(10000)))
&gt;&gt;&gt; lookup_list = make_lookup_func(list(range(10000)))
&gt;&gt;&gt; lookup_array = make_lookup_func(array.array('i', range(10000)))
&gt;&gt;&gt; lookup_dict = make_lookup_func(dict(zip(range(10000), range(10000))))
&gt;&gt;&gt; %timeit lookup_tuple(9000)
10000000 loops, best of 3: 177 ns per loop
&gt;&gt;&gt; %timeit lookup_list(9000)
10000000 loops, best of 3: 158 ns per loop
&gt;&gt;&gt; %timeit lookup_array(9000)
10000000 loops, best of 3: 186 ns per loop
&gt;&gt;&gt; %timeit lookup_dict(9000)
10000000 loops, best of 3: 195 ns per loop
</snippet></ROW><ROW><id>8377519</id><snippet>output = {}

in_list = False
current_name = None

for line in open('actors.list'):
    if in_list:
        if line.startswith('-'):
            break
        if '\t' not in line:
            continue
        name, title = line.split('\t', 1)
        name = name.strip()
        title = title.strip()
        if name:
            if ',' in name:
                name = name.split(',', 1)
                name[0] = name[0].rstrip()
                name[1] = name[1].lstrip()
                name.reverse()
                name = ' '.join(name)
            current_name = name
        if title:
            output.setdefault(
                current_name, []).append(title)
    else:
        if line.startswith('-'):
            in_list = True
</snippet></ROW><ROW><id>8377678</id><snippet>MyClass._normal</snippet></ROW><ROW><id>8377678</id><snippet>numpy.random.normal</snippet></ROW><ROW><id>8377678</id><snippet>_normal</snippet></ROW><ROW><id>8377678</id><snippet>class MyClass(MyBaseClass):
    def run(self):
        _normal = numpy.random.normal
        _Lappend = self.L.append
        while True:
            ...
            _Lappend(_normal(0,1))
</snippet></ROW><ROW><id>8377678</id><snippet>append</snippet></ROW><ROW><id>8377678</id><snippet>  LOAD_FAST                0 (self)
  LOAD_ATTR                1 (L)
  LOAD_ATTR                2 (append)
  LOAD_GLOBAL              3 (numpy)
  LOAD_ATTR                4 (random)
  LOAD_ATTR                5 (normal)
  LOAD_CONST               1 (0)
  LOAD_CONST               2 (1)
  CALL_FUNCTION            2
  CALL_FUNCTION            1
  POP_TOP             
</snippet></ROW><ROW><id>8377678</id><snippet>  LOAD_FAST                2 (_Lappend)
  LOAD_FAST                1 (_normal)
  LOAD_CONST               1 (0)
  LOAD_CONST               2 (1)
  CALL_FUNCTION            2
  CALL_FUNCTION            1
</snippet></ROW><ROW><id>8377678</id><snippet>size</snippet></ROW><ROW><id>8377678</id><snippet>numpy.random.normal</snippet></ROW><ROW><id>8377759</id><snippet>Sub</snippet></ROW><ROW><id>8377759</id><snippet>Super</snippet></ROW><ROW><id>8377759</id><snippet>Sub</snippet></ROW><ROW><id>8377759</id><snippet>Super</snippet></ROW><ROW><id>8377759</id><snippet>self.a = b</snippet></ROW><ROW><id>8377940</id><snippet>&gt;&gt;&gt; from itertools import product
&gt;&gt;&gt; markers = ["-", "--", "x"]
&gt;&gt;&gt; colors = ["b", "g", "r", "c", "m", "y", "k"]
&gt;&gt;&gt; [a + b for a, b in product(colors, markers)]
['b-', 'b--', 'bx', 'g-', 'g--', 'gx', 'r-', 'r--', 'rx', 'c-', 'c--', 'cx', 'm-', 'm--', 'mx', 'y-', 'y--', 'yx', 'k-', 'k--', 'kx']
</snippet></ROW><ROW><id>8377940</id><snippet>================    ===============================
character           description
================    ===============================
``'-'``             solid line style
``'--'``            dashed line style
``'-.'``            dash-dot line style
``':'``             dotted line style
``'.'``             point marker
``','``             pixel marker
``'o'``             circle marker
``'v'``             triangle_down marker
``'^'``             triangle_up marker
``'&lt;'``             triangle_left marker
``'&gt;'``             triangle_right marker
``'1'``             tri_down marker
``'2'``             tri_up marker
``'3'``             tri_left marker
``'4'``             tri_right marker
``'s'``             square marker
``'p'``             pentagon marker
``'*'``             star marker
``'h'``             hexagon1 marker
``'H'``             hexagon2 marker
``'+'``             plus marker
``'x'``             x marker
``'D'``             diamond marker
``'d'``             thin_diamond marker
``'|'``             vline marker
``'_'``             hline marker
================    ===============================
</snippet></ROW><ROW><id>8377940</id><snippet>==========  ========
character   color
==========  ========
'b'         blue
'g'         green
'r'         red
'c'         cyan
'm'         magenta
'y'         yellow
'k'         black
'w'         white
==========  ========
</snippet></ROW><ROW><id>8377940</id><snippet>(0, 1, 0, 1)</snippet></ROW><ROW><id>8378093</id><snippet>logging.Formatter.formatTime()</snippet></ROW><ROW><id>8378093</id><snippet>def sim_time(record, datefmt=None):
    return datetime.datetime(2000,1,2,3,4,5,678).strftime('%Y-%m-%d %H:%M:%S,%f')[:-3]

formatter.formatTime = sim_time
</snippet></ROW><ROW><id>8378093</id><snippet>import logging</snippet></ROW><ROW><id>8378093</id><snippet>def sim_time(self, record, datefmt=None):
    return datetime.datetime(2000,1,2,3,4,5,678).strftime('%Y-%m-%d %H:%M:%S,%f')[:-3]

import logging
logging.Formatter.formatTime = sim_time
</snippet></ROW><ROW><id>8378213</id><snippet>for _myvar1, myvar2 in mylist:
</snippet></ROW><ROW><id>8378254</id><snippet>/opt/local/bin/easy_install-2.7
</snippet></ROW><ROW><id>8378262</id><snippet>&gt;&gt;&gt; i = iter(data)
&gt;&gt;&gt; attr = [next(i) for x in range(next(i))]
&gt;&gt;&gt; [{x:next(i) for x in attr} for y in range(next(i))]
[{'lastname': 'black', 'email': 'jb@example.com', 'firstname': 'jack'}, {'lastname': 'green', 'email': 'jg@examlpe.com', 'firstname': 'jane'}]
</snippet></ROW><ROW><id>8378455</id><snippet>-</snippet></ROW><ROW><id>8378455</id><snippet>―</snippet></ROW><ROW><id>8378462</id><snippet>intersect</snippet></ROW><ROW><id>8378474</id><snippet>f = open("urls.txt")
start_urls = [url.strip() for url in f.readlines()]
f.close()
</snippet></ROW><ROW><id>8378484</id><snippet>truth = word.startswith(('^','@'))
</snippet></ROW><ROW><id>8378484</id><snippet>startswith(...)
    S.startswith(prefix[, start[, end]]) -&gt; bool

    Return True if S starts with the specified prefix, False otherwise.
    With optional start, test S beginning at that position.
    With optional end, stop comparing S at that position.
    prefix can also be a tuple of strings to try.
</snippet></ROW><ROW><id>8378491</id><snippet>&gt;&gt;&gt; import pysal
&gt;&gt;&gt; coords = [(0,0), (10,0), (10,10), (0,10), (0,0)]
&gt;&gt;&gt; pts = map(pysal.cg.Point, coords)
&gt;&gt;&gt; polygon = pysal.cg.Polygon(pts)
&gt;&gt;&gt; shp = pysal.open('myPolygon.shp','w')
&gt;&gt;&gt; shp.write(polygon)
&gt;&gt;&gt; shp.close()
</snippet></ROW><ROW><id>8378491</id><snippet>ogr2ogr -f KML myPolygon.kml myPolygon.shp
</snippet></ROW><ROW><id>8379018</id><snippet>speed1 = .3    # must be between 0 and 1
speed2 = .7

time1 += speed1
if time1 &gt;= 1.:
    time1 -= 1.
    print "speed1"
</snippet></ROW><ROW><id>8379105</id><snippet> DEPTH_PRIORITY = 1
 SCHEDULER_DISK_QUEUE = 'scrapy.squeue.PickleFifoDiskQueue'
 SCHEDULER_MEMORY_QUEUE = 'scrapy.squeue.FifoMemoryQueue'
</snippet></ROW><ROW><id>8379290</id><snippet>redirect_uri</snippet></ROW><ROW><id>8379290</id><snippet>http://example.com/name/3242?code=A_CODE_GENERATED_BY_SERVER
</snippet></ROW><ROW><id>8379290</id><snippet>http://example.com/name/3242?error_reason=user_denied&amp;
     error=access_denied&amp;error_description=The+user+denied+your+request.
</snippet></ROW><ROW><id>8379472</id><snippet>s</snippet></ROW><ROW><id>8379472</id><snippet>char_rand_max</snippet></ROW><ROW><id>8379472</id><snippet>str_rand_max</snippet></ROW><ROW><id>8379472</id><snippet>import random

def rand_print(s, char_rand_max, str_rand_max):
    for i in range(random.randint(1, str_rand_max)):
        print ''.join([c*random.randint(1, char_rand_max) for c in s]),
    print
</snippet></ROW><ROW><id>8379472</id><snippet>&gt;&gt;&gt; s = 'fo0'
&gt;&gt;&gt; rand_print(s, 5, 5)
fffoooo0000

&gt;&gt;&gt; rand_print(s, 5, 5)
fo000 fffffooo00000 ffooo00000 fffooo00 fffo0

&gt;&gt;&gt; rand_print(s, 5, 5)
ffffo00 fffffooo00000 fffffo00000
</snippet></ROW><ROW><id>8379472</id><snippet>from random import randint as ri; x = 'fo0'; \
    print ' '.join([''.join([c*ri(1, 5) for c in x]) for i in range(ri(1, 5))])
</snippet></ROW><ROW><id>8379702</id><snippet>Browser.links()</snippet></ROW><ROW><id>8379702</id><snippet>for link in links:
    print link
</snippet></ROW><ROW><id>8379702</id><snippet>link[5]</snippet></ROW><ROW><id>8379702</id><snippet>def odds():
    x = 1
    while True:
        yield x
        x += 2

 os = odds()
 os.next() # returns 1
 os.next() # returns 3
</snippet></ROW><ROW><id>8379702</id><snippet>odds()</snippet></ROW><ROW><id>8379702</id><snippet>itertools</snippet></ROW><ROW><id>8379702</id><snippet>links</snippet></ROW><ROW><id>8379702</id><snippet>list()</snippet></ROW><ROW><id>8379702</id><snippet> print list(links)
</snippet></ROW><ROW><id>8379702</id><snippet> print [l.url for l in list(links)]
</snippet></ROW><ROW><id>8379702</id><snippet> for l in links:
      print l.url
</snippet></ROW><ROW><id>8379702</id><snippet>links</snippet></ROW><ROW><id>8379702</id><snippet>links = list(br.links(url_regex="/people/"))
</snippet></ROW><ROW><id>8379702</id><snippet>mechanize</snippet></ROW><ROW><id>8379702</id><snippet> links = set(l.url for l in br.links(url_regex='/people/'))
 links.update(l.url for l in br.get_links_with_class('office-holder'))
</snippet></ROW><ROW><id>8379702</id><snippet>get_links_with_class</snippet></ROW><ROW><id>8379702</id><snippet>/people/</snippet></ROW><ROW><id>8379702</id><snippet>office-holder</snippet></ROW><ROW><id>8379702</id><snippet>Link</snippet></ROW><ROW><id>8380019</id><snippet>def FileCheck(fn):
    try:
      open(fn, "r")
      return 1
    except IOError:
      print "Error: File does not appear to exist."
      return 0

result = FileCheck("testfile")
print result
</snippet></ROW><ROW><id>8380152</id><snippet>cherrypy.quickstart</snippet></ROW><ROW><id>8380152</id><snippet>127.0.0.1</snippet></ROW><ROW><id>8380152</id><snippet>import cherrypy
class HelloWorld(object):
    def index(self):
        return "Hello World!"
    index.exposed = True

# bind to all IPv4 interfaces
cherrypy.config.update({'server.socket_host': '0.0.0.0'})
cherrypy.quickstart(HelloWorld())
</snippet></ROW><ROW><id>8380186</id><snippet>from ... import * except blah, bleh, bluh</snippet></ROW><ROW><id>8380186</id><snippet>from xyz import *
del set
</snippet></ROW><ROW><id>8380186</id><snippet>set</snippet></ROW><ROW><id>8380186</id><snippet>xyz.set</snippet></ROW><ROW><id>8380186</id><snippet>from xyz import set as xyzset
</snippet></ROW><ROW><id>8380186</id><snippet>from ... import *</snippet></ROW><ROW><id>8380293</id><snippet>.sort</snippet></ROW><ROW><id>8380293</id><snippet>max</snippet></ROW><ROW><id>8380293</id><snippet>list.sort()</snippet></ROW><ROW><id>8380293</id><snippet>key=None</snippet></ROW><ROW><id>8380293</id><snippet>max</snippet></ROW><ROW><id>8380293</id><snippet>a = [("one", 1), ("two", 2), ("three", 3), ("four", 4)]
a.sort(key=lambda item:item[1])
</snippet></ROW><ROW><id>8380362</id><snippet>message = mail.EmailMessage(sender=senderemail,
        subject=_('Password reset successful'))
</snippet></ROW><ROW><id>8380362</id><snippet>message = mail.EmailMessage(sender=senderemail,
        subject=unicode(_('Password reset successful')))
</snippet></ROW><ROW><id>8380402</id><snippet>import datetime
now = datetime.datetime.now()
print now.strftime("%A")
</snippet></ROW><ROW><id>8380586</id><snippet>access.MoveNext
</snippet></ROW><ROW><id>8380586</id><snippet>access.MoveNext()
</snippet></ROW><ROW><id>8380730</id><snippet>def generate_people(list_):
    previous_row = None
    for person in sorted(list_):
        if person == previous_row:
            continue
        first_name,last_name = re.split(',| | ',person)
        yield [first_name,last_name]
        previous_row = person
</snippet></ROW><ROW><id>8380730</id><snippet>for first_name, last_name in generate_people():
    print first_name, last_name
</snippet></ROW><ROW><id>8380730</id><snippet>people = queue.Queue()
previous_row = None
for person in sorted(list_):
    if person == previous_row:
        continue
    first_name,last_name = re.split(',| | ',person)
    people.put([first_name,last_name])
    previous_row = person
</snippet></ROW><ROW><id>8380894</id><snippet>python manage.py</snippet></ROW><ROW><id>8380894</id><snippet>/usr/bin/python</snippet></ROW><ROW><id>8380894</id><snippet>which python</snippet></ROW><ROW><id>8381013</id><snippet>if 1 &lt;= int(tmpword[2]) &lt;= len(blah):
</snippet></ROW><ROW><id>8381013</id><snippet>if int(tmpword[2]) &gt;= 1 and int(tmpword[2]) &lt;= len(blah):
</snippet></ROW><ROW><id>8381083</id><snippet>captcha_key = get_config('RECAPTCHA_PUB_KEY',None)
recaptcha_challenge_field = request.POST.get('recaptcha_challenge_field', None)
recaptcha_response_field = request.POST.get('recaptcha_response_field', None)
check_captcha = captcha.submit(recaptcha_challenge_field, recaptcha_response_field, settings.RECAPTCHA_PRIVATE_KEY, request.META['REMOTE_ADDR'])
if check_captcha.is_valid is False:
    log.info('captcha_error : %s' % check_captcha.error_code)
    return {'TEMPLATE':template_name,'captcha_error': True,'register_form': f,'captcha_key':captcha_key ,'next':redirect_to}
</snippet></ROW><ROW><id>8381097</id><snippet>from Tkinter import *
import os
from PIL import Image

root = Tk()
scrollbar = Scrollbar(root)
scrollbar.pack( side = RIGHT, fill=Y )
mylist = Listbox(root, font = "verdana 15", yscrollcommand = scrollbar.set,  height= 5, width = 10 )

pathToImages = ['D://images/biscuit.jpeg',
'D://images/chocolate.jpeg','D://images/sandwich.jpeg',
'D://images/cake.jpeg']

def buttonHandler(self):
    bi = Image.open(pathToImages[int(mylist.curselection()[0])])
    bi.show()

a = mylist.insert(END,str('Biscuit'))
b = mylist.insert(END,str('Chocolate'))
c = mylist.insert(END,str('Sandwich'))
d = mylist.insert(END,str('Cake'))

mylist.bind('&lt;&lt;ListboxSelect&gt;&gt;', buttonHandler)

mylist.pack( )
scrollbar.config( command = mylist.yview )
mainloop()
</snippet></ROW><ROW><id>8381223</id><snippet>try:
    qByUser = byUsrUrlObj.read()
    qUserData = json.loads(qByUser).decode('utf-8')
    questionSubjs = qUserData["all"]["questions"]
except ValueError:  # includes simplejson.decoder.JSONDecodeError
    print 'Decoding JSON has failed'
</snippet></ROW><ROW><id>8381223</id><snippet>simplejson.decoder.JSONDecodeError</snippet></ROW><ROW><id>8381223</id><snippet>ValueError</snippet></ROW><ROW><id>8381223</id><snippet>ValueError</snippet></ROW><ROW><id>8381301</id><snippet>/usr/sbin/sendmail</snippet></ROW><ROW><id>8381474</id><snippet>Error 500: Internal Server Error
</snippet></ROW><ROW><id>8381564</id><snippet>gksudo</snippet></ROW><ROW><id>8381564</id><snippet>sudo</snippet></ROW><ROW><id>8381564</id><snippet>EXEC=gksudo python /usr/bin/app_launcher.py %f
</snippet></ROW><ROW><id>8381774</id><snippet>def plus_one(*args):
    return tuple(arg + 1 for arg in args)
</snippet></ROW><ROW><id>8381774</id><snippet>def plus_one(*args):
    result = []
    for arg in args: result.append(arg + 1)
    return tuple(result)
</snippet></ROW><ROW><id>8381774</id><snippet>d, e, f = plus_one(1, 2, 3)
</snippet></ROW><ROW><id>8381883</id><snippet>list_ = [1,1,2,3,4,4,4,5,6]
</snippet></ROW><ROW><id>8381883</id><snippet>histogram = {}
for i in list_:
    oldfreq = histogram.get(i, 0) # get the old number of times we've seen i, or 0 if we haven't seen it yet
    histogram[i] = oldfreq+1  # add one to the old count
</snippet></ROW><ROW><id>8381883</id><snippet>defaultdict()</snippet></ROW><ROW><id>8381883</id><snippet>from collections import defaultdict
histogram = defaultdict(int) # this means, "if we haven't seen a number before, set its default value to the result of int(), which is 0
for i in list_:
    histogram[i] += 1
</snippet></ROW><ROW><id>8381883</id><snippet>Counter</snippet></ROW><ROW><id>8381883</id><snippet>from collections import Counter
histogram = Counter(list_)
</snippet></ROW><ROW><id>8381883</id><snippet>twoormore = [n for n,freq in histogram.iteritems() if freq &gt; 1]

print twoormore
</snippet></ROW><ROW><id>8381955</id><snippet>&gt;&gt;&gt; x = True
&gt;&gt;&gt; x = not x        # toggle
&gt;&gt;&gt; x
False
&gt;&gt;&gt; x = not x        # toggle
&gt;&gt;&gt; x
True
&gt;&gt;&gt; x = not x        # toggle
&gt;&gt;&gt; x
False
</snippet></ROW><ROW><id>8381955</id><snippet>&gt;&gt;&gt; A = 5
&gt;&gt;&gt; B = 3
&gt;&gt;&gt; total = A + B
&gt;&gt;&gt; x = A
&gt;&gt;&gt; x = total - x    # toggle
&gt;&gt;&gt; x
3
&gt;&gt;&gt; x = total - x    # toggle
&gt;&gt;&gt; x
5
&gt;&gt;&gt; x = total - x    # toggle
&gt;&gt;&gt; x
3
</snippet></ROW><ROW><id>8381955</id><snippet>&gt;&gt;&gt; A = 'xyz'
&gt;&gt;&gt; B = 'pdq'
&gt;&gt;&gt; d = {A:B, B:A}
&gt;&gt;&gt; x = A
&gt;&gt;&gt; x = d[x]         # toggle
&gt;&gt;&gt; x
'pdq'
&gt;&gt;&gt; x = d[x]         # toggle
&gt;&gt;&gt; x
'xyz'
&gt;&gt;&gt; x = d[x]         # toggle
&gt;&gt;&gt; x
'pdq'
</snippet></ROW><ROW><id>8381955</id><snippet>&gt;&gt;&gt; A = [1,2,3]
&gt;&gt;&gt; B = [4,5,6]
&gt;&gt;&gt; x = A
&gt;&gt;&gt; x = B if x == A else A
&gt;&gt;&gt; x
[4, 5, 6]
&gt;&gt;&gt; x = B if x == A else A
&gt;&gt;&gt; x
[1, 2, 3]
&gt;&gt;&gt; x = B if x == A else A
&gt;&gt;&gt; x
[4, 5, 6]
</snippet></ROW><ROW><id>8382006</id><snippet>from twisted.internet.task import LoopingCall

DESIRED_FPS = 30.0 # 30 frames per second

def game_tick():
   events = pygame.events.get()
   for event in events:
      # Process input events
   redraw()

# Set up a looping call every 1/30th of a second to run your game tick
tick = LoopingCall(game_tick)
tick.start(1.0 / DESIRED_FPS)

# Set up anything else twisted here, like listening sockets

reactor.run() # Omit this if this is a tap/tac file
</snippet></ROW><ROW><id>8382006</id><snippet>reactor.callLater</snippet></ROW><ROW><id>8382167</id><snippet>hexstrings = ["DE", "AD", "BE", "EF"]   # big-endian 0xDEADBEEF

bytes = bytearray(int(x, 16) for x in hexstrings)
bytes = bytearray.fromhex("".join(hexstrings))     # Python 2.6 may need u""
</snippet></ROW><ROW><id>8382194</id><snippet>user.groups.all()
</snippet></ROW><ROW><id>8382194</id><snippet>group.user_set.all()
</snippet></ROW><ROW><id>8382198</id><snippet>def v1_page(request, page_id):
    page = get_object_or_404(Page, id=page_id)
    if page.upgraded:
        return v2_page(request, page)
    else:
        # load this page 
</snippet></ROW><ROW><id>8382500</id><snippet>from ctypes import*  

class t_mem_fields(Structure):
    _fields_ = [("header",c_ulong),
                ("log", c_byte *  10)]             

class t_mem(Union):
    _fields_ = [("st_field",t_mem_fields),
                ("byte_index",c_byte * 14)]  

def calc(buff,len):
    sum = 0
    print(type(buff))
    for cur_byte in buff.byte_index:
         print "cur_byte = %x" %cur_byte
         sum += cur_byte
    print "sum = %x" %sum
    return sum     

def main():
    mem1 = t_mem()
    mem1.st_field.header = 0x12345678
    mem1.byte_index[4] = 1
    mem1.byte_index[5] = 2
    mem1.byte_index[6] = 3
    mem1.byte_index[7] = 4

   calc(mem1,14)

main()
</snippet></ROW><ROW><id>8382635</id><snippet>&gt;&gt;&gt; import networkx as nx
&gt;&gt;&gt; G = nx.random_geometric_graph(10, 0.5)
&gt;&gt;&gt; with open("junk.txt", "wb") as f:
...   nx.write_adjlist(G, f)
...
&gt;&gt;&gt; G.nodes()
[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]
&gt;&gt;&gt; with open("junk.txt", "rb") as f:
...   G2 = nx.read_adjlist(f)
...
&gt;&gt;&gt; G2.nodes()
[u'1', u'0', u'3', u'2', u'5', u'4', u'7', u'6', u'9', u'8']
&gt;&gt;&gt;
</snippet></ROW><ROW><id>8382635</id><snippet>1</snippet></ROW><ROW><id>8382635</id><snippet>2</snippet></ROW><ROW><id>8382635</id><snippet>'1'</snippet></ROW><ROW><id>8382635</id><snippet>'2'</snippet></ROW><ROW><id>8382713</id><snippet>MODULES</snippet></ROW><ROW><id>8382713</id><snippet>name</snippet></ROW><ROW><id>8382713</id><snippet>navigation_links = sorted(navigation_links.values(), 
                          key=lambda m: MODULES[m['module']].name)
</snippet></ROW><ROW><id>8382713</id><snippet>section</snippet></ROW><ROW><id>8382713</id><snippet>module_object</snippet></ROW><ROW><id>8382966</id><snippet>ast.literal_eval()</snippet></ROW><ROW><id>8382966</id><snippet>eval</snippet></ROW><ROW><id>8382966</id><snippet>&gt;&gt;&gt; from ast import literal_eval
&gt;&gt;&gt; literal_eval(u'229, 255, 66')
(229, 255, 66)
</snippet></ROW><ROW><id>8383141</id><snippet>queue_draw</snippet></ROW><ROW><id>8383141</id><snippet>gtk.gdk.Window.invalidate_rect()</snippet></ROW><ROW><id>8383141</id><snippet>set</snippet></ROW><ROW><id>8383141</id><snippet>if hasattr(item,'show')
</snippet></ROW><ROW><id>8383141</id><snippet>queue_draw</snippet></ROW><ROW><id>8383141</id><snippet>while gtk.events_pending():
    gtk.main_iteration_do(True)
</snippet></ROW><ROW><id>8383339</id><snippet>re.findall(r'\w+(?:-\w+)+',text)
</snippet></ROW><ROW><id>8384039</id><snippet>^(?=.*[a-z])(?=.*[A-Z])(?=.*[0-9]).*$
</snippet></ROW><ROW><id>8384039</id><snippet>^</snippet></ROW><ROW><id>8384039</id><snippet>$</snippet></ROW><ROW><id>8384039</id><snippet>(?=...)</snippet></ROW><ROW><id>8384039</id><snippet>=</snippet></ROW><ROW><id>8384039</id><snippet>.*</snippet></ROW><ROW><id>8384039</id><snippet>.*</snippet></ROW><ROW><id>8384039</id><snippet>re.X</snippet></ROW><ROW><id>8384039</id><snippet>reg = re.compile(r'''
                ^            # Match the start of the string
                (?=.*[a-z])  # Check if there is a lowercase letter in the string
                (?=.*[A-Z])  # Check if there is a uppercase letter in the string
                (?=.*[0-9])  # Check if there is a digit in the string
                .*           # Match the string
                $            # Match the end of the string
                '''
                , re.X)      # eXtented option whitespace is not part of he pattern for better readability
</snippet></ROW><ROW><id>8384123</id><snippet>?</snippet></ROW><ROW><id>8384123</id><snippet>ref=</snippet></ROW><ROW><id>8384178</id><snippet>urlopen error [Errno 10060]</snippet></ROW><ROW><id>8384178</id><snippet>prxy = dict(http='http://someurl.com:1234/')
Client.set_options(proxy=prxy)
</snippet></ROW><ROW><id>8384229</id><snippet>axes.set_xticks(ticks, minor=False)
</snippet></ROW><ROW><id>8384229</id><snippet>axes.set_xticklabels(labels, fontdict=None, minor=False, **kwargs)
</snippet></ROW><ROW><id>8384492</id><snippet>from twisted.internet.protocol import ClientFactory
from twisted.protocols.basic import LineReceiver
from twisted.internet import reactor

class TTTClientProtocol(LineReceiver):
    def lineReceived(self, line):
        line = line.strip()
        if line == 'You are connected':
            self.sendLine(self.factory.username)
        else:
            print 'SERVER SAYS:', line

class TTTClientFactory(ClientFactory):
    protocol = TTTClientProtocol 

    def __init__(self, name):
        self.username = name


name = raw_input('Please enter your name: ')
print 'Connecting...'

reactor.connectTCP('localhost', 8007, TTTClientFactory(name))

reactor.run()
</snippet></ROW><ROW><id>8384492</id><snippet>stdin</snippet></ROW><ROW><id>8384685</id><snippet>import numpy as np
import matplotlib.pyplot as plt
from matplotlib import rc

# activate latex text rendering
rc('text', usetex=True)

x = np.arange(10)
y = np.random.random(10)
z = np.random.random(10)

fig = plt.figure()
ax = fig.add_subplot(111)
ax.plot(x, y, label = r"This is \textbf{line 1}")
ax.plot(x, z, label = r"This is \textit{line 2}")
ax.legend()
plt.show()
</snippet></ROW><ROW><id>8384685</id><snippet>\textbf</snippet></ROW><ROW><id>8384685</id><snippet>\\textbef</snippet></ROW><ROW><id>8384693</id><snippet>json.loads</snippet></ROW><ROW><id>8384693</id><snippet>&gt;&gt;&gt; jdata = json.load('{"uri": "http:", "foo", "bar"}')
&gt;&gt;&gt; 'uri' in jdata       # Check if 'uri' is in jdata's keys
True
&gt;&gt;&gt; jdata['uri']         # Will return the value belonging to the key 'uri'
u'http:'
</snippet></ROW><ROW><id>8384693</id><snippet>&gt;&gt;&gt; import json
&gt;&gt;&gt; jdata = json.loads(open ('bookmarks.json').read())
&gt;&gt;&gt; for c in jdata['children'][0]['children']:
...     print 'Title: {}, URI: {}'.format(c.get('title', 'No title'),
                                          c.get('uri', 'No uri'))
...
Title: Recently Bookmarked, URI: place:folder=BOOKMARKS_MENU(...)
Title: Recent Tags, URI: place:sort=14&amp;type=6&amp;maxResults=10&amp;queryType=1
Title: , URI: No uri
Title: Mozilla Firefox, URI: No uri
</snippet></ROW><ROW><id>8384693</id><snippet>jdata</snippet></ROW><ROW><id>8384693</id><snippet>pprint</snippet></ROW><ROW><id>8384693</id><snippet>&gt;&gt;&gt; def build_structure(data, d=[]):
...     if 'children' in data:
...         for c in data['children']:
...             d.append({'title': c.get('title', 'No title'),
...                                      'uri': c.get('uri', None)})
...             build_structure(c, d)
...     return d
...
&gt;&gt;&gt; pprint.pprint(build_structure(jdata))
[{'title': u'Bookmarks Menu', 'uri': None},
 {'title': u'Recently Bookmarked',
  'uri':   u'place:folder=BOOKMARKS_MENU&amp;folder=UNFILED_BOOKMARKS&amp;(...)'},
 {'title': u'Recent Tags',
  'uri':   u'place:sort=14&amp;type=6&amp;maxResults=10&amp;queryType=1'},
 {'title': u'', 'uri': None},
 {'title': u'Mozilla Firefox', 'uri': None},
 {'title': u'Help and Tutorials',
  'uri':   u'http://www.mozilla.com/en-US/firefox/help/'},
 (...)
}]
</snippet></ROW><ROW><id>8384693</id><snippet>u'uri': u'http:'</snippet></ROW><ROW><id>8384693</id><snippet>for c in build_structure(jdata):
    if c['uri'].startswith('http:'):
        print 'Started with http'
</snippet></ROW><ROW><id>8384741</id><snippet>def reformat(fin, fout):
    fout.write(next(fin)) # just copy the first line (the header) to output
    for line in fin:
        fields = line.split(' ')

        # Make a format header specific to the number of fields
        fmt = '%6.2f' + ('%10.6f' * (len(fields)-1)) + '\n'

        fout.write(fmt % tuple(map(float, fields)))

basenames = os.listdir(indir)  # get a list of input ASCII files to be processed
for basename in basenames:
    input_filename = os.path.join(indir, basename)
    output_filename = os.path.join(outdir, basename)
    with open(input_filename, 'r') as fin, open(output_filename, 'w') as fout:
        reformat(fin, fout)
</snippet></ROW><ROW><id>8384788</id><snippet>os.path.split</snippet></ROW><ROW><id>8384788</id><snippet>os.path.basename</snippet></ROW><ROW><id>8384788</id><snippet>ntpath</snippet></ROW><ROW><id>8384788</id><snippet>import ntpath
ntpath.basename("a/b/c")
</snippet></ROW><ROW><id>8384788</id><snippet>def path_leaf(path):
    head, tail = ntpath.split(path)
    return tail or ntpath.basename(head)
</snippet></ROW><ROW><id>8384788</id><snippet>&gt;&gt;&gt; paths = ['a/b/c/', 'a/b/c', '\\a\\b\\c', '\\a\\b\\c\\', 'a\\b\\c', 
...     'a/b/../../a/b/c/', 'a/b/../../a/b/c']
&gt;&gt;&gt; [path_leaf(path) for path in paths]
['c', 'c', 'c', 'c', 'c', 'c', 'c']
</snippet></ROW><ROW><id>8384788</id><snippet>r'a/b\c'</snippet></ROW><ROW><id>8384788</id><snippet>b\c</snippet></ROW><ROW><id>8384788</id><snippet>a</snippet></ROW><ROW><id>8384788</id><snippet>c</snippet></ROW><ROW><id>8384788</id><snippet>b</snippet></ROW><ROW><id>8384788</id><snippet>a</snippet></ROW><ROW><id>8384885</id><snippet>tfactory = TTransport.TBufferedTransportFactory()
</snippet></ROW><ROW><id>8385246</id><snippet>print sum67([1,2,5])
print sum67([1,2,6,5,7])
print sum67([1,2,6,5,7,6,7])
</snippet></ROW><ROW><id>8385246</id><snippet>8
3
16 &lt;-- wrong
</snippet></ROW><ROW><id>8385246</id><snippet>def sum67(nums):
        state=0
        s=0
        for n in nums:
                if state == 0:
                        if n == 6:
                                state=1
                        else:
                                s+=n
                else:
                        if n == 7:
                                state=0
        return s
</snippet></ROW><ROW><id>8385246</id><snippet>for element in list: ...</snippet></ROW><ROW><id>8385497</id><snippet>split()</snippet></ROW><ROW><id>8385497</id><snippet>timestamp</snippet></ROW><ROW><id>8385497</id><snippet>ip</snippet></ROW><ROW><id>8385497</id><snippet>hash_value</snippet></ROW><ROW><id>8385497</id><snippet>&gt;&gt;&gt; a,b,c = "foo".split()
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
ValueError: need more than 1 value to unpack
</snippet></ROW><ROW><id>8386407</id><snippet>def multiply(a,b):
    r"""
    returns a \times b
    """
    return a*b
</snippet></ROW><ROW><id>8386407</id><snippet>&lt;TAB&gt;</snippet></ROW><ROW><id>8386461</id><snippet>pop</snippet></ROW><ROW><id>8386555</id><snippet>br = mechanize.Browser()
....
# Ignore robots.txt.  Do not do this without thought and consideration.
br.set_handle_robots(False)
</snippet></ROW><ROW><id>8386737</id><snippet>1</snippet></ROW><ROW><id>8386737</id><snippet>9</snippet></ROW><ROW><id>8386737</id><snippet>data[:, [1, 9]]
</snippet></ROW><ROW><id>8386751</id><snippet>wget http://www.web2py.com/examples/static/web2py_src.zip
unzip web2py_src.zip
</snippet></ROW><ROW><id>8386751</id><snippet>wsgi.py</snippet></ROW><ROW><id>8386751</id><snippet>import os
import sys

path = '/home/my_username/web2py'
if path not in sys.path:
    sys.path.append(path)

from wsgihandler import application
</snippet></ROW><ROW><id>8386751</id><snippet>my_username</snippet></ROW><ROW><id>8386751</id><snippet># comment out these two lines if you want to use another framework
#app = web.application(urls, globals())
#application = app.wsgifunc()
</snippet></ROW><ROW><id>8386751</id><snippet>cd</snippet></ROW><ROW><id>8386751</id><snippet>web2py</snippet></ROW><ROW><id>8386751</id><snippet>python web2py.py --port=80
</snippet></ROW><ROW><id>8386751</id><snippet>parameters_80.py</snippet></ROW><ROW><id>8386821</id><snippet>from mako.lookup import TemplateLookup
import haml

class Lookup(TemplateLookup):
    def get_template(self, uri):
        if uri.rsplit('.')[1] == 'haml':
            # change preprocessor used for this template
            default = self.template_args['preprocessor']
            self.template_args['preprocessor'] = haml.preprocessor
            template = super(Lookup, self).get_template(uri)
            # change it back
            self.template_args['preprocessor'] = default
        else:
            template = super(Lookup, self).get_template(uri)
        return template

lookup = Lookup(['.'])
print lookup.get_template('index.haml').render()
</snippet></ROW><ROW><id>8386821</id><snippet>&lt;%inherit file="base.html"/&gt;

&lt;%block name="content"&gt;
  %h1 Hello
&lt;/%block&gt;
</snippet></ROW><ROW><id>8386821</id><snippet>&lt;html&gt;
  &lt;body&gt;
    &lt;%block name="content"/&gt;
  &lt;/body&gt;
&lt;/html&gt;
</snippet></ROW><ROW><id>8387039</id><snippet>l1 = [('x',20),('y',10),('z',40)]
l2 = [('x',30),('r',90),('z',10),('s',20)]
l3 = [('y',20),('z',40),('x',39)]
l4 = [('s',10),('p',20),('z',20)]

d = {}
for k, v in l1+l2+l3+l4:
    d.setdefault(k, []).append(v)

mylist = [(k, max(v)) for k, v in d.items()]
</snippet></ROW><ROW><id>8387039</id><snippet>mylist</snippet></ROW><ROW><id>8387039</id><snippet>[('p', 20), ('s', 20), ('r', 90), ('y', 20), ('x', 39), ('z', 40)]</snippet></ROW><ROW><id>8387039</id><snippet>mylist = [(k, max(d[k])) for k in 'xyzrsp']

[('x', 39), ('y', 20), ('z', 40), ('r', 90), ('s', 20), ('p', 20)]
</snippet></ROW><ROW><id>8387132</id><snippet>from lxml import etree

data = """&lt;X&gt;
    &lt;X03&gt;3&lt;/X03&gt;
    &lt;X02&gt;2&lt;/X02&gt;
    &lt;A&gt;
        &lt;A02&gt;Y&lt;/A02&gt;
        &lt;A01&gt;X&lt;/A01&gt;
        &lt;A03&gt;Z&lt;/A03&gt;
    &lt;/A&gt;
    &lt;X01&gt;1&lt;/X01&gt;
    &lt;B&gt;
        &lt;B01&gt;Z&lt;/B01&gt;
        &lt;B02&gt;X&lt;/B02&gt;
        &lt;B03&gt;C&lt;/B03&gt;
    &lt;/B&gt;
&lt;/X&gt;"""

doc = etree.XML(data,etree.XMLParser(remove_blank_text=True))

for parent in doc.xpath('//*[./*]'): # Search for parent elements
  parent[:] = sorted(parent,key=lambda x: x.tag)

print etree.tostring(doc,pretty_print=True)
</snippet></ROW><ROW><id>8387132</id><snippet>&lt;X&gt;
  &lt;A&gt;
    &lt;A01&gt;X&lt;/A01&gt;
    &lt;A02&gt;Y&lt;/A02&gt;
    &lt;A03&gt;Z&lt;/A03&gt;
  &lt;/A&gt;
  &lt;B&gt;
    &lt;B01&gt;Z&lt;/B01&gt;
    &lt;B02&gt;X&lt;/B02&gt;
    &lt;B03&gt;C&lt;/B03&gt;
  &lt;/B&gt;
  &lt;X01&gt;1&lt;/X01&gt;
  &lt;X02&gt;2&lt;/X02&gt;
  &lt;X03&gt;3&lt;/X03&gt;
&lt;/X&gt;
</snippet></ROW><ROW><id>8387404</id><snippet>my_view( request, page, options):
    sort_choices = {P:'price',N:'name', ...}
    n_item_choices = {'S':5, 'L':50, 'XL':100)
    ascending_descending_choices = {'A':'', 'D':'-'}
    ...
</snippet></ROW><ROW><id>8387404</id><snippet>options='P-S-D'  #order by price, 5 items per page, descending order
</snippet></ROW><ROW><id>8387404</id><snippet>&lt;a href="?page={{ prev_page }}&amp;options={{ options }}"&gt;Previous&lt;/a&gt;
</snippet></ROW><ROW><id>8387404</id><snippet>my_view( request, page, options):
   ... #choides ....
   try:
      optionsArray = options.split('-')
      sort_by = sort_choices[ optionsArray[0]  ]
      n_ites_page = n_item_choices[ optionsArray[1]  ]
      asc_or_desc = ascending_descending_choices[ optionsArray[2]  ]
      ...
   except:
      somebody is playing ....
</snippet></ROW><ROW><id>8387424</id><snippet>class User(models.Model):
    ...
    pets = models.ManyToManyField(Pet, through='UserPet')

class UserPet(models.Model):
    user = models.ForeignKey(User)
    pet = models.ForeignKey(Pet)
    since = models.DateTimeField(auto_now_add=True)
</snippet></ROW><ROW><id>8387610</id><snippet>position = {12: 'd',
            13: 'D', ... }
data = {}
with open(filename, 'r') as f:
    for i, line in enumerate(f):
        if i in position:
            data[position[i]] = float(line.strip())
</snippet></ROW><ROW><id>8387610</id><snippet>data</snippet></ROW><ROW><id>8387610</id><snippet>data['d']</snippet></ROW><ROW><id>8387821</id><snippet>DBSession.flush()</snippet></ROW><ROW><id>8387821</id><snippet>DBSession.commit()</snippet></ROW><ROW><id>8387821</id><snippet>flush()</snippet></ROW><ROW><id>8387821</id><snippet>commit()</snippet></ROW><ROW><id>8387821</id><snippet>commit()</snippet></ROW><ROW><id>8387881</id><snippet>import sys, os, shutil

def prune(dirpath, exceptions=()):
    for name in os.listdir(dirpath):
        path = os.path.join(dirpath, name)
        if name in exceptions:
            prune(path)
        else:
            if os.path.isdir(path):
                shutil.rmtree(path)
            else:
                os.remove(path)

exceptions = ('dir1', 'dir2', '.dotfile1', '.dotfile2', 'dir3', '.dotdir1')

if __name__ == '__main__':

    root = os.path.join('/home', sys.argv[1], 'parentdir')

    prune(root, exceptions)
</snippet></ROW><ROW><id>8389060</id><snippet>self.model = QSqlTableModel(self)
self.model.setEditStrategy(QSqlTableModel.OnManualSubmit)
</snippet></ROW><ROW><id>8389067</id><snippet>QColor</snippet></ROW><ROW><id>8389067</id><snippet>item.setBackground(QtGui.QColor('red'))
</snippet></ROW><ROW><id>8389368</id><snippet>wget http://upload.wikimedia.org/wikipedia/en/4/44/Zindagi1976.jpg
</snippet></ROW><ROW><id>8389368</id><snippet>from urllib import urlretrieve
urlretrieve('http://upload.wikimedia.org/wikipedia/en/4/44/Zindagi1976.jpg', 
            'Zindagi1976.jpg')
</snippet></ROW><ROW><id>8389368</id><snippet>('User-agent', 
 'Mozilla/5.0 (X11; U; Linux i686; en-US; rv:1.9.0.1) 
 Gecko/2008071615 Fedora/3.0.1-1.fc9 Firefox/3.0.1')
</snippet></ROW><ROW><id>8389368</id><snippet>&gt;&gt;&gt; from urllib import FancyURLopener
&gt;&gt;&gt; class MyOpener(FancyURLopener):
...     version = 'Mozilla/5.0 (Windows; U; Windows NT 5.1; it; rv:1.8.1.11) Gecko/20071127 Firefox/2.0.0.11'
... 
&gt;&gt;&gt; myopener = MyOpener()
&gt;&gt;&gt; myopener.retrieve('http://upload.wikimedia.org/wikipedia/en/4/44/Zindagi1976.jpg', 'Zindagi1976.jpg')
('Zindagi1976.jpg', &lt;httplib.HTTPMessage instance at 0x1007bfe18&gt;)
</snippet></ROW><ROW><id>8389577</id><snippet>Python 2.7.1 (r271:86832, Jun 16 2011, 16:59:05) 
[GCC 4.2.1 (Based on Apple Inc. build 5658) (LLVM build 2335.15.00)] on darwin
Type "help", "copyright", "credits" or "license" for more information.
&gt;&gt;&gt; L1 = [[1,2], [3,4], [5,6], [7,8], [9,10]]
&gt;&gt;&gt; from random import shuffle
&gt;&gt;&gt; shuffle(L1)
&gt;&gt;&gt; print L1
[[3, 4], [9, 10], [5, 6], [7, 8], [1, 2]]
&gt;&gt;&gt; shuffle(L1)
&gt;&gt;&gt; print L1
[[9, 10], [3, 4], [5, 6], [1, 2], [7, 8]]
&gt;&gt;&gt; 
</snippet></ROW><ROW><id>8389577</id><snippet>from random import shuffle

L1 = [[1,2], [3,4], [5,6], [7,8], [9,10]]
match = [9,10]
while L1[0]!=match:
    shuffle(L1)
print(L1)
</snippet></ROW><ROW><id>8389686</id><snippet>\s</snippet></ROW><ROW><id>8389686</id><snippet>\t</snippet></ROW><ROW><id>8389686</id><snippet>\n</snippet></ROW><ROW><id>8389686</id><snippet>newline = re.sub(r"(?&lt;!\n)\n[ \t]*(?!\n)", "", line)
</snippet></ROW><ROW><id>8389686</id><snippet>(?&lt;!\n) # Assert that the previous character isn't a newline
\n      # Match a newline
[ \t]*  # Match any number of spaces/tabs
(?!\n)  # Assert that the next character isn't a newline
</snippet></ROW><ROW><id>8389686</id><snippet>&gt;&gt;&gt; line = "  abc\n  def\n\n  ghi\n  jkl"
&gt;&gt;&gt; newline = re.sub(r"(?&lt;!\n)\n[ \t]*(?!\n)", "", line)
&gt;&gt;&gt; print newline
  abcdef

  ghijkl
</snippet></ROW><ROW><id>8389694</id><snippet>file.seek</snippet></ROW><ROW><id>8389694</id><snippet>import os
f = open('insert.txt', 'r+')
f.seek(3)
f.seek(-1, os.SEEK_CUR) # will go back one position
f.seek(-1, os.SEEK_END) # one position before the end of the file
</snippet></ROW><ROW><id>8389694</id><snippet>import sys
import os

RESERVED = 40
SENTINEL = '\n### HEADER ENDS ###\n'

def pad(heading):
    free_space = RESERVED - len(heading)
    padding = ('#' * free_space) if free_space &gt; 0 else ''
    return heading + padding

def _write_header_slow(fname, text):
    # Do this in chunks instead if you have large files.
    dest = fname + '.temp'
    with open(fname) as infile:
        content = infile.read()
    with open(dest, 'w') as outfile:
        outfile.write(text)
        outfile.write(SENTINEL)
        outfile.write(content)
    os.rename(dest, fname)

def write_header(fname, text):
    if not text.endswith('\n'):
        text += '\n'
    assert len(text) &lt; RESERVED, 'too much for the header!'
    padded = pad(text)
    with open(fname, 'rb+') as f:
        current_header = f.read(RESERVED + len(SENTINEL))
        if current_header.endswith(SENTINEL):
            f.seek(0)
            print 'fast path!'
            f.write(padded)
        else:
            print 'slow path ):'
            _write_header_slow(fname, text)

if __name__ == '__main__':
    write_header(sys.argv[1], sys.argv[2])
</snippet></ROW><ROW><id>8390077</id><snippet>yield</snippet></ROW><ROW><id>8390077</id><snippet>__iter__</snippet></ROW><ROW><id>8390415</id><snippet>import twitter
api = twitter.Api()

# try a large page number:
i = 181

try:
    result = api.GetSearch("Avatar", page=i)
    print [s.text for s in result]
except:
    print 'page is out of range'
</snippet></ROW><ROW><id>8390541</id><snippet>arr[20:] = [0] * (len(arr) - 20)
</snippet></ROW><ROW><id>8390541</id><snippet>for i in xrange(20, len(arr)):
    arr[i] = 0
</snippet></ROW><ROW><id>8390560</id><snippet>DrawRectangle</snippet></ROW><ROW><id>8390560</id><snippet>dc.SetPen(wx.Pen("WHITE",1))
dc.DrawRectangle(0, 0, w, h)
</snippet></ROW><ROW><id>8390560</id><snippet>make_canvas</snippet></ROW><ROW><id>8390741</id><snippet>easy_install ngram
</snippet></ROW><ROW><id>8390741</id><snippet>pip install ngram
</snippet></ROW><ROW><id>8390788</id><snippet>&gt;&gt;&gt; grid = [
            [1,2,3],
            [4,5,6],
            [7,8,9],
            ]
&gt;&gt;&gt; fishlist = ["salmon", "carp", "bass", "catfish"]

&gt;&gt;&gt; [r.__setitem__(i,random.choice(fishlist)) for r in grid for i in xrange(0,len(r))]
[None, None, None, None, None, None, None, None, None]
&gt;&gt;&gt; print grid
[['salmon', 'salmon', 'carp'], ['carp', 'salmon', 'bass'], ['bass', 'salmon', 'bass']]
&gt;&gt;&gt; 
</snippet></ROW><ROW><id>8390788</id><snippet>&gt;&gt;&gt; def Move(grid):
    rSrc=random.choice(grid)
    rDest=random.choice(grid)
    a,b=random.randint(0,len(rSrc)-1),random.randint(0,len(rSrc)-1)
    rSrc[a],rDest[b]=rDest[b],rSrc[a]
    &gt;&gt;&gt; grid
[['carp', 'catfish', 'catfish'], ['catfish', 'carp', 'salmon'], ['catfish', 'catfish', 'carp']]
&gt;&gt;&gt; Move(grid)
&gt;&gt;&gt; grid
[['catfish', 'catfish', 'carp'], ['catfish', 'carp', 'salmon'], ['catfish', 'catfish', 'carp']]
&gt;&gt;&gt; 
</snippet></ROW><ROW><id>8390788</id><snippet>&gt;&gt;&gt; grid = [
            [1,2,3],
            [4,5,6],
            [7,8,9],
            ]
&gt;&gt;&gt; fishlist = ["salmon", "carp", "bass", "catfish"]
&gt;&gt;&gt; for r in grid:
    for i in xrange(0,len(r)):
        r[i]=random.choice(fishlist)


&gt;&gt;&gt; grid
[['bass', 'catfish', 'carp'], ['catfish', 'salmon', 'salmon'], ['bass', 'salmon', 'catfish']]
&gt;&gt;&gt; 
</snippet></ROW><ROW><id>8390892</id><snippet>class Location(models.Model)
    continent = models.ForeignKey(Continent)
    country = models.ForeignKey(Country)
</snippet></ROW><ROW><id>8390892</id><snippet>from smart_selects.db_fields import GroupedForeignKey

class Location(models.Model)
    continent = models.ForeignKey(Continent)
    country = GroupedForeignKey(Country, "continent")
</snippet></ROW><ROW><id>8390922</id><snippet>&gt;&gt;&gt; help('modules')
</snippet></ROW><ROW><id>8391043</id><snippet>setUpClass</snippet></ROW><ROW><id>8391043</id><snippet>tearDownClass</snippet></ROW><ROW><id>8391043</id><snippet>setUpModule</snippet></ROW><ROW><id>8391043</id><snippet>tearDownModule</snippet></ROW><ROW><id>8391043</id><snippet>run()</snippet></ROW><ROW><id>8391043</id><snippet>run</snippet></ROW><ROW><id>8391195</id><snippet>while 0 == 0:

    if abs(x1-x2) &lt; .0001:
        print x1
        break

    else:
        n = x2 - (func1sub/func1dsub)
        x2 = n 

    if abs(x - n) &lt; .03:
        print x
</snippet></ROW><ROW><id>8391195</id><snippet>n = x2 - (func1sub/func1dsub)
x2 = n 
</snippet></ROW><ROW><id>8391195</id><snippet>abs(x1-x2) &lt; .0001</snippet></ROW><ROW><id>8391195</id><snippet>while abs(x1 - x2) &gt;= .0001:
    x2 -= (func1sub / func1dsub)
print x1
</snippet></ROW><ROW><id>8391195</id><snippet>x2 -= (func1sub / func1dsub)</snippet></ROW><ROW><id>8391195</id><snippet>x2</snippet></ROW><ROW><id>8391195</id><snippet>while abs(x1 - x2) &gt;= .0001:
    x2 -= (func1sub / func1dsub)
    print (x1, x2)
</snippet></ROW><ROW><id>8391195</id><snippet>func1sub / func1dsub</snippet></ROW><ROW><id>8391463</id><snippet>&gt;&gt;&gt; import pygame
&gt;&gt;&gt; pygame.mixer.init()
&gt;&gt;&gt; pygame.mixer.music.load('filename.wav')
&gt;&gt;&gt; pygame.mixer.music.play()
</snippet></ROW><ROW><id>8391501</id><snippet>re.findall('ATA((...)*?)AGA', mydna)
</snippet></ROW><ROW><id>8391746</id><snippet>&gt;&gt;&gt; def a():
...     print 'foo'\
... 
...     print 'bar'
... 
&gt;&gt;&gt; a()
foo
bar
</snippet></ROW><ROW><id>8391746</id><snippet>\</snippet></ROW><ROW><id>8391746</id><snippet>#</snippet></ROW><ROW><id>8391746</id><snippet>\</snippet></ROW><ROW><id>8391972</id><snippet>aDict</snippet></ROW><ROW><id>8391972</id><snippet>&gt;&gt;&gt; aDict = { 'a' : [1, 2, 3,], 'b' : [4, 5, 6,], 'c' : [7, 8, 9,] }
&gt;&gt;&gt; for item in aDict:
...     for item2 in aDict[item]:
...         print item2
...
1
2
3
7
8
9
4
5
6
&gt;&gt;&gt;
</snippet></ROW><ROW><id>8392131</id><snippet>def TREE_PRINT(tree, indent=''):
    #is this a leaf node?
    if 'val' in tree:
        print str(tree['val'])
    else:
        #print the criteria
        print 'split: '+ str(tree['spl']) + ' ' + str(tree['go_r'])
        #print the branches
        print indent+'L-&gt;',
        TREE_PRINT(tree['l'], indent+'  ')

        print indent+'R-&gt;',
        TREE_PRINT(tree['r'], indent+'  ')
</snippet></ROW><ROW><id>8392490</id><snippet>board_state</snippet></ROW><ROW><id>8392490</id><snippet>list</snippet></ROW><ROW><id>8392490</id><snippet>list</snippet></ROW><ROW><id>8392490</id><snippet>&gt;&gt;&gt; board_state = [[0, 1, 2], [3, 4, 5], [6, 7, 8]]
</snippet></ROW><ROW><id>8392490</id><snippet>&gt;&gt;&gt; board_state[1][1], board_state[2][1] = board_state[2][1], board_state[1][1]
&gt;&gt;&gt; board_state
[[0, 1, 2], [3, 7, 5], [6, 4, 8]]
</snippet></ROW><ROW><id>8392601</id><snippet>answer = [x for x, y in zip(list1, list2) if x == y]
</snippet></ROW><ROW><id>8392601</id><snippet>answer = []
for x, y in zip(list1, list2):
    if x == y:
        answer.append(x)
</snippet></ROW><ROW><id>8392601</id><snippet>answer</snippet></ROW><ROW><id>8392601</id><snippet>[0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1]
</snippet></ROW><ROW><id>8392914</id><snippet>import urllib

urlStr = "http://www..."

fileObj = urllib.urlopen(urlStr)

for line in fileObj:
    if ('&lt;input name="extWarrantyProds"' in line):
        startIndex = line.find('value="') + 7
        endIndex = line.find('"',startIndex)
        print line[startIndex:endIndex]
</snippet></ROW><ROW><id>8392941</id><snippet>ReferenceProperty</snippet></ROW><ROW><id>8392941</id><snippet>Currency.country.get_value_for_datastore(currency_instance)</snippet></ROW><ROW><id>8393033</id><snippet>import threading
import time

lock = threading.Lock()
cond = threading.Condition(threading.Lock())

def waitLock(timeout):
    with cond:
        current_time = start_time = time.time()
        while current_time &lt; start_time + timeout:
            if lock.acquire(False):
                return True
            else:
                cond.wait(timeout - current_time + start_time)
                current_time = time.time()
    return False
</snippet></ROW><ROW><id>8393033</id><snippet>threading.Lock()</snippet></ROW><ROW><id>8393033</id><snippet>threading.Condition()</snippet></ROW><ROW><id>8393033</id><snippet>cond</snippet></ROW><ROW><id>8393033</id><snippet>wait()</snippet></ROW><ROW><id>8393033</id><snippet>threading.Condition</snippet></ROW><ROW><id>8393033</id><snippet>waitLock</snippet></ROW><ROW><id>8393033</id><snippet>lock.release()</snippet></ROW><ROW><id>8393033</id><snippet>cond.notify()</snippet></ROW><ROW><id>8393130</id><snippet>ModelAdmin</snippet></ROW><ROW><id>8393130</id><snippet>has_add_permission</snippet></ROW><ROW><id>8393130</id><snippet>has_change_permission</snippet></ROW><ROW><id>8393130</id><snippet>has_delete_permission</snippet></ROW><ROW><id>8393130</id><snippet>True</snippet></ROW><ROW><id>8393130</id><snippet>False</snippet></ROW><ROW><id>8393130</id><snippet>class TicketAdmin(admin.ModelAdmin):
    ...
    def has_add_permission(self, request):
        return request.user.groups.filter(name='Developers').exists()

    def has_change_permission(self, request, obj=None):
        return request.user.groups.filter(name='Developers').exists()

    def has_delete_permission(self, request, obj=None):
        return request.user.groups.filter(name='Developers').exists()
</snippet></ROW><ROW><id>8393130</id><snippet>False</snippet></ROW><ROW><id>8393317</id><snippet>a_variable = 0
</snippet></ROW><ROW><id>8393317</id><snippet>import config

def blah():
    config.a_variable = 14
    return 0
</snippet></ROW><ROW><id>8393317</id><snippet>import tfs, config

print config.a_variable
tfs.blah()
print config.a_variable
</snippet></ROW><ROW><id>8393317</id><snippet>a_variable</snippet></ROW><ROW><id>8393463</id><snippet>student_list</snippet></ROW><ROW><id>8393463</id><snippet>global</snippet></ROW><ROW><id>8393463</id><snippet>global</snippet></ROW><ROW><id>8393463</id><snippet>def b():
    global a
    a = 5

a = 4
print(a)  # prints 4
b()
print(a)  # prints 5
</snippet></ROW><ROW><id>8393463</id><snippet>global</snippet></ROW><ROW><id>8393463</id><snippet>global</snippet></ROW><ROW><id>8393467</id><snippet>import os  
cmd = 'lsusb'  
os.system(cmd)
</snippet></ROW><ROW><id>8393467</id><snippet>import commands  
output = commands.getstatusoutput('lsusb')
</snippet></ROW><ROW><id>8393716</id><snippet>vi_cv_path_python=~/bin/python ./configure --enable-pythoninterp
</snippet></ROW><ROW><id>8393950</id><snippet>C:\Python32\Pythonw.exe
</snippet></ROW><ROW><id>8393950</id><snippet>C:\Python32\Lib\idlelib\idle.pyw
</snippet></ROW><ROW><id>8394097</id><snippet>usernameCheck()</snippet></ROW><ROW><id>8394323</id><snippet>email_message = email.message_from_string(raw_email)
</snippet></ROW><ROW><id>8394323</id><snippet>email_message = str(email.message_from_string(raw_email)).decode("quoted-printable")
</snippet></ROW><ROW><id>8394421</id><snippet>#!/usr/bin/python
# SUPER LIVER ADVENTURE 12!
# If you steal my stuff, credit me.
# Owen Sanders on StackOverflow
#
# Updated December 5, 2011
# OregonTrail on StackOverflow

from sys import exit
from random import randint

quips = [
    "Welcome!",
    "have a wonderful day",
    "Livers are cool!",
    "this text was chosen at random",
    "Writen in python",
    "woo, splash text!",
    "Notch loves ez!",
    "Almost dragon free!"
]

print quips[randint(0, len(quips)-1)]

def first_thing():
    print ("You are a liver, congratulations! "
           "You should do some liver stuff now.")
    print "Here comes some blood, what should you do?"
    filterblood = raw_input ("&gt; ")

    if filterblood in ("filter", "filter blood", "filter the blood"):
        return 'second_thing'

    elif filterblood == "who cares":
        print "I care, be more considorate!"
        return "first_thing"

    else:
        print "Sorry, no (Hint, it is your main purpose!)"
        return "first_thing"

def second_thing():
    print "You are now filtering the blood, good for you!"
    print "oh no! There is too much aldosterone! what would that do?"
    fluidz = raw_input ("&gt; ")

    if fluidz in ("retain fluid", "fluid retention", "keep fluids",
                  "keep fluid"):
        return 'third_thing'

    else:
        print "nope! (hint, what does aldosterone do?)"
        return "second_thing"

def third_thing():
    print "Oh no!, that's bad!"
    print "What should you do about that aldosterone?"
    metabolize = raw_input ("&gt; ")

    if metabolize == "metabolize":
        return 'fourth_thing'

    else:
        print "BRZZZZ, wrong!"
        return "third_thing"

def fourth_thing():
    print "super duper!"
    print ("the aldosterone has been taken care of, no problems at the "
           "current moment")
    print "..."
    print "..."
    print "..."
    print ("After a couple of months a problem arises, you are inflamed, "
           "what could this be?")
    hepatitis = raw_input ("&gt; ")

    if hepatitis == "hepatitis":
        return 'fifth_thing'

    else:
        return "fourth_thing"

def fifth_thing():
    print "OH NO! Hepatitis!"
    print "What could have caused this?"
    idunno_somthing = raw_input ("&gt; ")

    if idunno_somthing in ("infection", "an infection"):
        print "neat, thats no good."
        print "thank you for coming"
        exit (0)

    elif idunno_somthing in ("sex", "drugs", "rock n roll"):
        print "very funny, what specificly caused it?"
        return "fifth_thing"

    else:
        return "fifth_thing"

ROOMS = {
    'first_thing': first_thing,
    'second_thing': second_thing,
    'third_thing': third_thing,
    'fourth_thing': fourth_thing,
    'fifth_thing': fifth_thing
}

def runner(rooms, start):
    nextRoom = start
    while True:
        room = rooms[nextRoom]
        print "--------"
        nextRoom = room()

runner(ROOMS, 'first_thing')
</snippet></ROW><ROW><id>8394539</id><snippet>Rerun LaTeX</snippet></ROW><ROW><id>8394539</id><snippet>def my_view(request):
    pdf_stream = process_latex(
        'latex_template.tex',
        context=RequestContext(request, {'context_obj': context_obj})
    )
    return HttpResponse(pdf_stream, content_type='application/pdf')
</snippet></ROW><ROW><id>8394539</id><snippet>pdflatex</snippet></ROW><ROW><id>8394539</id><snippet>import os
from subprocess import Popen, PIPE
from tempfile import NamedTemporaryFile

from django.template import loader, Context


class LaTeXException(Exception):
    pass


def process_latex(template, context={}, type='pdf', outfile=None):
    """
    Processes a template as a LaTeX source file.
    Output is either being returned or stored in outfile.
    At the moment only pdf output is supported.
    """
    t = loader.get_template(template)
    c = Context(context)
    r = t.render(c)

    tex = NamedTemporaryFile()
    tex.write(r)
    tex.flush()
    base = tex.name
    names = dict((x, '%s.%s' % (base, x)) for x in (
        'log', 'aux', 'pdf', 'dvi', 'png'))
    output = names[type]

    stdout = None
    if type == 'pdf' or type == 'dvi':
        stdout = pdflatex(base, type)
    elif type == 'png':
        stdout = pdflatex(base, 'dvi')
        out, err = Popen(
            ['dvipng', '-bg', '-transparent', names['dvi'], '-o', names['png']],
            cwd=os.path.dirname(base), stdout=PIPE, stderr=PIPE
        ).communicate()

    os.remove(names['log'])
    os.remove(names['aux'])

    # pdflatex appears to ALWAYS return 1, never returning 0 on success, at
    # least on the version installed from the Ubuntu apt repository.
    # so instead of relying on the return code to determine if it failed,
    # check if it successfully created the pdf on disk.
    if not os.path.exists(output):
        details = '*** pdflatex output: ***\n%s\n*** LaTeX source: ***\n%s' % (
            stdout, r)
        raise LaTeXException(details)

    if not outfile:
        o = file(output).read()
        os.remove(output)
        return o
    else:
        os.rename(output, outfile)


def pdflatex(file, type='pdf'):
    out, err = Popen(
        ['pdflatex', '-interaction=nonstopmode', '-output-format', type, file],
        cwd=os.path.dirname(file), stdout=PIPE, stderr=PIPE
    ).communicate()

    # If the output tells us to rerun, do it by recursing over ourself.
    if 'Rerun LaTeX.' in out:
        return pdflatex(file, type)
    else:
        return out
</snippet></ROW><ROW><id>8394647</id><snippet>/</snippet></ROW><ROW><id>8394647</id><snippet>1/2</snippet></ROW><ROW><id>8394647</id><snippet>0</snippet></ROW><ROW><id>8394647</id><snippet>float()</snippet></ROW><ROW><id>8394647</id><snippet>int((float(a) / b) * 100)</snippet></ROW><ROW><id>8394647</id><snippet>a/b</snippet></ROW><ROW><id>8394647</id><snippet>from __future__ import division
</snippet></ROW><ROW><id>8394647</id><snippet>a</snippet></ROW><ROW><id>8394647</id><snippet>b</snippet></ROW><ROW><id>8394647</id><snippet>def percent(a, b):
    return int((float(a) / b) * 100)
</snippet></ROW><ROW><id>8395021</id><snippet>variable_id</snippet></ROW><ROW><id>8395021</id><snippet>choice_id</snippet></ROW><ROW><id>8395021</id><snippet>CREATE TEMP TABLE systemvariables (
 variable_id integer PRIMARY KEY
,variable text
,choice_id integer
);

INSERT INTO systemvariables(variable_id, variable) VALUES
 (1, 'var1')
,(2, 'var2')
,(3, 'var3');

CREATE TEMP TABLE variableoptions (
 option_id integer PRIMARY KEY
,option text
,variable_id integer
   REFERENCES systemvariables(variable_id)
   ON UPDATE CASCADE ON DELETE CASCADE
,UNIQUE (option_id, variable_id) -- needed for the foreign key
);

ALTER TABLE systemvariables
ADD CONSTRAINT systemvariables_choice_id_fk
   FOREIGN KEY (choice_id, variable_id)
   REFERENCES variableoptions(option_id, variable_id);

INSERT INTO variableoptions VALUES
 (1, 'var1_op1', 1)
,(2, 'var1_op2', 1)
,(3, 'var1_op3', 1)
,(4, 'var2_op1', 2)
,(5, 'var2_op2', 2)
,(6, 'var3_op1', 3);
</snippet></ROW><ROW><id>8395021</id><snippet>UPDATE systemvariables SET choice_id = 2 WHERE variable_id = 1;
UPDATE systemvariables SET choice_id = 5 WHERE variable_id = 2;
UPDATE systemvariables SET choice_id = 6 WHERE variable_id = 3;
</snippet></ROW><ROW><id>8395021</id><snippet>UPDATE systemvariables SET choice_id = 7 WHERE variable_id = 3;
UPDATE systemvariables SET choice_id = 4 WHERE variable_id = 1;
</snippet></ROW><ROW><id>8395021</id><snippet>NOT NULL</snippet></ROW><ROW><id>8395021</id><snippet>CREATE TEMP TABLE systemvariables (
 variable_id integer PRIMARY KEY
,variable    text
,choice_id   integer NOT NULL
);

CREATE TEMP TABLE variableoptions (
 option_id   integer PRIMARY KEY
,option      text
,variable_id integer NOT NULL
   REFERENCES systemvariables(variable_id)
   ON UPDATE CASCADE ON DELETE CASCADE
   DEFERRABLE INITIALLY DEFERRED
,UNIQUE (option_id, variable_id) -- needed for the foreign key
);

ALTER TABLE systemvariables
ADD CONSTRAINT systemvariables_choice_id_fk
   FOREIGN KEY (choice_id, variable_id)
   REFERENCES variableoptions(option_id, variable_id)
   DEFERRABLE INITIALLY DEFERRED; -- no CASCADING here!
</snippet></ROW><ROW><id>8395021</id><snippet>BEGIN;
INSERT INTO systemvariables VALUES
 (1, 'var1', 2)
,(2, 'var2', 5)
,(3, 'var3', 6);

INSERT INTO variableoptions VALUES
 (1, 'var1_op1', 1)
,(2, 'var1_op2', 1)
,(3, 'var1_op3', 1)
,(4, 'var2_op1', 2)
,(5, 'var2_op2', 2)
,(6, 'var3_op1', 3);
END;
</snippet></ROW><ROW><id>8395021</id><snippet>NOT NULL</snippet></ROW><ROW><id>8395021</id><snippet>CASCADING</snippet></ROW><ROW><id>8395021</id><snippet>variableoptions.variable_id</snippet></ROW><ROW><id>8395021</id><snippet>No ACTION</snippet></ROW><ROW><id>8395021</id><snippet>INSERT</snippet></ROW><ROW><id>8395021</id><snippet>DELETE</snippet></ROW><ROW><id>8395021</id><snippet>UPDATE</snippet></ROW><ROW><id>8395021</id><snippet>UPDATE option SET var_id = 4 WHERE var_id = 5;
DELETE FROM var WHERE var_id = 5;
</snippet></ROW><ROW><id>8395153</id><snippet>A.x is relationship with B
B.y is relationship with C
</snippet></ROW><ROW><id>8395153</id><snippet>Class A:

    p = relationship(C,
             primaryjoin=A.x==B.y,
             secondaryjoin=B.y==C.z
             )
</snippet></ROW><ROW><id>8395419</id><snippet>0</snippet></ROW><ROW><id>8395419</id><snippet>'%.03f'</snippet></ROW><ROW><id>8395419</id><snippet>'%.3f'</snippet></ROW><ROW><id>8395419</id><snippet>'%3f'</snippet></ROW><ROW><id>8395419</id><snippet>'%3s'</snippet></ROW><ROW><id>8395419</id><snippet>&gt;&gt;&gt; '%10f' % 2.3
'  2.300000'
&gt;&gt;&gt; len(_)
10
&gt;&gt;&gt;
</snippet></ROW><ROW><id>8395493</id><snippet>-V</snippet></ROW><ROW><id>8395493</id><snippet>sort -V ~/headers
</snippet></ROW><ROW><id>8395493</id><snippet>@42EBKAAXX090828:6:10:1077:1883/2
@42EBKAAXX090828:6:100:1699:328/2
@42EBKAAXX090828:6:102:785:808/2
</snippet></ROW><ROW><id>8395513</id><snippet>json.load()</snippet></ROW><ROW><id>8395513</id><snippet>jsondata['results'][0]['address_components']
</snippet></ROW><ROW><id>8395513</id><snippet>locality</snippet></ROW><ROW><id>8395513</id><snippet>administrative_area_level_1</snippet></ROW><ROW><id>8395513</id><snippet>filter()</snippet></ROW><ROW><id>8395513</id><snippet>&gt;&gt;&gt; mydata = jsondata['results'][0]['address_components']
&gt;&gt;&gt; types = ['locality', 'administrative_area_level_1']
&gt;&gt;&gt; geonames = filter(lambda x: len(set(x['types']).intersection(types)), mydata)
</snippet></ROW><ROW><id>8395513</id><snippet>geonames</snippet></ROW><ROW><id>8395513</id><snippet>long_name</snippet></ROW><ROW><id>8395513</id><snippet>types</snippet></ROW><ROW><id>8395513</id><snippet>&gt;&gt;&gt; for geoname in geonames:
    common_types = set(geoname['types']).intersection(set(types))
    print '{} ({})'.format(geoname['long_name'], str(', '.join(common_types)))


Stockholm (locality)
Stockholm (administrative_area_level_1)
</snippet></ROW><ROW><id>8395513</id><snippet>import json
import urllib2

def get_geonames(lat, lng, types):
    url = 'http://maps.googleapis.com/maps/api/geocode/json' + \
            '?latlng={},{}&amp;sensor=false'.format(lat, lng)
    jsondata = json.load(urllib2.urlopen(url))
    address_comps = jsondata['results'][0]['address_components']
    filter_method = lambda x: len(set(x['types']).intersection(types))
    return filter(filter_method, address_comps)

lat, lng = 59.3, 18.1
types = ['locality', 'administrative_area_level_1']

# Display all geographical names along with their types
for geoname in get_geonames(lat, lng, types):
    common_types = set(geoname['types']).intersection(set(types))
    print '{} ({})'.format(geoname['long_name'], ', '.join(common_types))
</snippet></ROW><ROW><id>8395707</id><snippet>d = (adict.get('key') or QueryDict('')).copy()
</snippet></ROW><ROW><id>8395707</id><snippet>if 'key' in adict and adict['key'] is not None:
    d = adict['key'].copy()
else:
    d = QueryDict('')
</snippet></ROW><ROW><id>8395766</id><snippet>actor_name = "ActE"
conn_list = [('m6', 'D ActD'), 
             ('m3', 'B ActB'), 
             ('m2', 'Kevin Bacon')]

for con in conn_list:
     print "%s was in movie %s with %s" % (actor_name, con[0], con[1])
</snippet></ROW><ROW><id>8395766</id><snippet>%s</snippet></ROW><ROW><id>8395766</id><snippet>"%s likes %s" % ("bob", "apples")
</snippet></ROW><ROW><id>8395766</id><snippet>%s</snippet></ROW><ROW><id>8395766</id><snippet>tuple[0]</snippet></ROW><ROW><id>8395766</id><snippet>%s</snippet></ROW><ROW><id>8395766</id><snippet>tuple[1]</snippet></ROW><ROW><id>8395852</id><snippet>TypeError: list indices must be integers, not list
</snippet></ROW><ROW><id>8395852</id><snippet>board_state[new[0]][1] = 0
</snippet></ROW><ROW><id>8396057</id><snippet>format()</snippet></ROW><ROW><id>8396057</id><snippet>%</snippet></ROW><ROW><id>8396057</id><snippet>format()</snippet></ROW><ROW><id>8396057</id><snippet>str</snippet></ROW><ROW><id>8396057</id><snippet>&gt;&gt;&gt; string = 'I will be {} years and {} months on {month} {day}'
&gt;&gt;&gt; some_date = {'month': 'January', 'day': '1st'}
&gt;&gt;&gt; diff = [3, 11] # years, months
&gt;&gt;&gt; string.format(*diff, **some_date)
'I will be 3 years and 11 months on January 1st'
</snippet></ROW><ROW><id>8396057</id><snippet>&gt;&gt;&gt; string = 'On {month} {day} it will be {1} months, {0} years'
&gt;&gt;&gt; string.format(*diff, **some_date)
'On January 1st it will be 11 months, 3 years'
</snippet></ROW><ROW><id>8396057</id><snippet>format()</snippet></ROW><ROW><id>8396057</id><snippet>&gt;&gt;&gt; data = [(1, 2), ('a', 'b'), (5, 'ABC')]
&gt;&gt;&gt; formatter = 'First is "{0[0]}", then comes "{0[1]}"'.format
&gt;&gt;&gt; for item in map(formatter, data):
    print item


First is "1", then comes "2"
First is "a", then comes "b"
First is "5", then comes "ABC"
</snippet></ROW><ROW><id>8396057</id><snippet>%</snippet></ROW><ROW><id>8396057</id><snippet>.format()</snippet></ROW><ROW><id>8396057</id><snippet>%</snippet></ROW><ROW><id>8396057</id><snippet>%</snippet></ROW><ROW><id>8396057</id><snippet>base_string % values
</snippet></ROW><ROW><id>8396057</id><snippet>values</snippet></ROW><ROW><id>8396057</id><snippet>base_string</snippet></ROW><ROW><id>8396057</id><snippet>tuple</snippet></ROW><ROW><id>8396057</id><snippet>&gt;&gt;&gt; 'Three first values are: %f, %f and %f' % (3.14, 2.71, 1)
'Three first values are: 3.140000, 2.710000 and 1.000000'
</snippet></ROW><ROW><id>8396057</id><snippet>dict</snippet></ROW><ROW><id>8396057</id><snippet>&gt;&gt;&gt; 'My name is %(name)s, I am %(age)s years old' % {'name':'John','age':98}
'My name is John, I am 98 years old'
</snippet></ROW><ROW><id>8396057</id><snippet>base_string</snippet></ROW><ROW><id>8396057</id><snippet>&gt;&gt;&gt; 'This is a string: %s' % 'abc'
'This is a string: abc'
</snippet></ROW><ROW><id>8396057</id><snippet>format()</snippet></ROW><ROW><id>8396057</id><snippet>&gt;&gt;&gt; name = 'John'
&gt;&gt;&gt; surname = 'Smith'
&gt;&gt;&gt; age = 87
# some code goes here
&gt;&gt;&gt; 'My name is %(surname)s, %(name)s %(surname)s. I am %(age)i.' % locals()
'My name is Smith, John Smith. I am 87.'
</snippet></ROW><ROW><id>8396057</id><snippet>format()</snippet></ROW><ROW><id>8396057</id><snippet>&gt;&gt;&gt; 'My name is {surname}, {name} {surname}. I am {age}.'.format(**locals())
'My name is Smith, John Smith. I am 87.'
</snippet></ROW><ROW><id>8396124</id><snippet>origin='lower'</snippet></ROW><ROW><id>8396124</id><snippet>origin='upper'</snippet></ROW><ROW><id>8396124</id><snippet>imshow</snippet></ROW><ROW><id>8396371</id><snippet>update-python-modules</snippet></ROW><ROW><id>8396371</id><snippet>python-updater</snippet></ROW><ROW><id>8396371</id><snippet>site-packages</snippet></ROW><ROW><id>8396371</id><snippet>find</snippet></ROW><ROW><id>8396371</id><snippet>find {,/Users/*}/Library/Python/*/ -name '*.py[co]' -exec rm {} \;
</snippet></ROW><ROW><id>8396376</id><snippet>player_categories_statistics = cur.fetchone()
</snippet></ROW><ROW><id>8396376</id><snippet>player_categories_statistics</snippet></ROW><ROW><id>8396376</id><snippet>None</snippet></ROW><ROW><id>8396376</id><snippet>None[0]</snippet></ROW><ROW><id>8396376</id><snippet>sometable</snippet></ROW><ROW><id>8396376</id><snippet>players</snippet></ROW><ROW><id>8396376</id><snippet>INSERT INTO sometable (%s) VALUES (%s)
</snippet></ROW><ROW><id>8396376</id><snippet>SELECT %s FROM players
</snippet></ROW><ROW><id>8396376</id><snippet>rowcount = 2 #hard-coded for debugging
</snippet></ROW><ROW><id>8396376</id><snippet>query = "SELECT %s FROM customer" % 'first_name, last_name'

row = c.execute("%s" % (query)).fetchone()

row
Out[28]: (u'Derek', u'Litz')
</snippet></ROW><ROW><id>8396376</id><snippet>query = "SELECT %s FROM customer2" % 'first_name, last_name'

print c.execute("%s" % (query)).fetchone()
None
</snippet></ROW><ROW><id>8396406</id><snippet>^\[\[(?:.*?\|)?(.*?)?\]\]$
</snippet></ROW><ROW><id>8396683</id><snippet>__nonzero__</snippet></ROW><ROW><id>8396683</id><snippet>if myobject:
</snippet></ROW><ROW><id>8396683</id><snippet>myobject</snippet></ROW><ROW><id>8396683</id><snippet>if True:
</snippet></ROW><ROW><id>8396683</id><snippet>__nonzero__()</snippet></ROW><ROW><id>8397271</id><snippet>__file__</snippet></ROW><ROW><id>8397271</id><snippet>import os
import foo.bar

print(os.path.abspath(foo.bar.__file__))
</snippet></ROW><ROW><id>8397271</id><snippet>import os
import sys

module_name = 'foo.bar'
__import__(module_name)
print(os.path.abspath(sys.modules[module_name].__file__))
</snippet></ROW><ROW><id>8397584</id><snippet>pty=False</snippet></ROW><ROW><id>8397714</id><snippet>import subprocess
subprocess.call(["zenity", "--notification", "--text=You have been notified"])
</snippet></ROW><ROW><id>8397748</id><snippet>Content-Length</snippet></ROW><ROW><id>8397748</id><snippet>(downloaded so far) / (total size)</snippet></ROW><ROW><id>8398011</id><snippet>q = (select([Item.identifier_id, func.count(Item.id).label("cnt")]).
     group_by(Item.identifier_id).having(func.count(Item.id)&gt;1)).alias("subq")
qry =  (session.query(Item).join(q, Item.identifier_id==q.c.identifier_id))
print qry # prints SQL statement generated
items = qry.all() # result
</snippet></ROW><ROW><id>8398142</id><snippet>dict</snippet></ROW><ROW><id>8398142</id><snippet>bitarray.bitarray</snippet></ROW><ROW><id>8398142</id><snippet>S1, S2 = {}, {} # dicts are slightly faster than `set()`
with open(path) as f:
     for i, line in enumerate(f, 1):
         id, sep, type = line.partition(" ")
         if type == "1" or type == "2":
            S1[id] = True
         elif type == "3" or type == "4":
            S2[id] = True
         else:
            print "WARNING: unknown type: %r in line %d: %r" % (type, i, line)
print len(S1), len(S2)
</snippet></ROW><ROW><id>8398142</id><snippet>def gettype(line):
    return line[-1]

S1, S2 = 0, 0
with open(path) as f:
     lines = f.read().splitlines()

lines.sort(key=gettype)
for type, group in itertools.groupby(lines, gettype):
    ids = (line.partition(" ")[0] for line in group)
    if type == "1" or type == "2":
       S1 += len(set(ids))
    elif type == "3" or type == "4":
       S2 += len(set(ids))
    else:
       assert 0, (type, list(ids))

print S1, S2
</snippet></ROW><ROW><id>8398312</id><snippet>    def _get_raw_emails(self):
        messages = []
        self.imap_server.check() # Fetch new mails since object is created.
        typ, data = self.imap_server.search(None, 'UnSeen')
        for num in data[0].split():
            typ, data = self.imap_server.fetch(num, '(RFC822)')
            messages.append(data[0][1])
        return messages
</snippet></ROW><ROW><id>8398596</id><snippet>urllib2</snippet></ROW><ROW><id>8398596</id><snippet>mechanize</snippet></ROW><ROW><id>8398596</id><snippet>handlers</snippet></ROW><ROW><id>8398596</id><snippet>urllib2.BaseHandler</snippet></ROW><ROW><id>8398596</id><snippet>add_handler</snippet></ROW><ROW><id>8398881</id><snippet>counter</snippet></ROW><ROW><id>8398881</id><snippet>nb == n</snippet></ROW><ROW><id>8398881</id><snippet>sum</snippet></ROW><ROW><id>8398881</id><snippet>len</snippet></ROW><ROW><id>8398881</id><snippet>0</snippet></ROW><ROW><id>8398881</id><snippet>&gt;&gt;&gt; n = 3
&gt;&gt;&gt; counter = {'a': 1}
&gt;&gt;&gt; 100. / sum(1 for nb in counter.itervalues() if nb == n) / len(counter) 
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
ZeroDivisionError: float division by zero
&gt;&gt;&gt; counter = {'a': 3}
&gt;&gt;&gt; 100. / sum(1 for nb in counter.itervalues() if nb == n) / len(counter) 
100.0
</snippet></ROW><ROW><id>8398940</id><snippet>self.rtext = wx.TextCtrl(self, 1, "", size=(80, -1), style=wx.ALL)
self.stext = wx.TextCtrl(self, 1, "", size=(80, -1), style=wx.ALL)
</snippet></ROW><ROW><id>8398940</id><snippet>self.gbs.Add(self.lb1, (1,0), span=wx.GBSpan(2,1))
</snippet></ROW><ROW><id>8399121</id><snippet>in</snippet></ROW><ROW><id>8399121</id><snippet>list</snippet></ROW><ROW><id>8399121</id><snippet>list = ['gmail', 'aol', 'hotmail', 'yahoo']
myemail = 'foo@aol.com'
if mystring.split('@')[1].split('.')[0] in list:
    print 'I`m public'
</snippet></ROW><ROW><id>8399134</id><snippet>from copy import deepcopy

class guarded_property(object):
    # self.name attribute set here by the metaclass
    def __set__(self, instance, value):
        setattr(instance, "_" + self.name, value)
        setattr(instance, "_" + self.name + "_copy", deepcopy(value))
        setattr(instance, "_" +  self.name + "_dirty", True)

    def __get__(self, instance, owner):
        return getattr (instance, "_" + self.name)

    def clear(self, instance):
        setattr(instance, "_" +  self.name + "_dirty", False)
        setattr(instance, "_" + self.name + "_copy", deepcopy(self.__get__(instance, None)))

    def dirty(self, instance):
        return getattr(instance, "_" +  self.name + "_dirty") or   not (getattr(instance, "_" + self.name + "_copy") == self.__get__(instance, None))


class Guarded(type):
    def __new__(cls, name, bases, dict_):
        for key, val in dict_.items():
            if isinstance(val, guarded_property):
                val.name = key
                dict_[key + "_clear"] = (lambda v: lambda self: v.clear(self))(val)
                dict_[key + "_dirty"] = (lambda v: property(lambda self: v.dirty(self)))(val)
        return type.__new__(cls, name, bases, dict_)


if __name__ == "__main__":
    class Example(object):
        __metaclass__ = Guarded
        a = guarded_property()

    g =  Example()
    g.a = []
    g.a_clear()
    print g.a_dirty
    g.a.append(5)
    print g.a_dirty
    g.a_clear()
    print g.a_dirty
</snippet></ROW><ROW><id>8399544</id><snippet>&gt;&gt;&gt; my_list = [[1,2], [3,7], [6,9], [4,3]]
&gt;&gt;&gt; new_list = [[v*2 if i==0 else v for i,v in enumerate(sublist)] for sublist in my_list]
&gt;&gt;&gt; new_list
[[2, 2], [6, 7], [12, 9], [8, 3]]
</snippet></ROW><ROW><id>8399721</id><snippet>threading</snippet></ROW><ROW><id>8399721</id><snippet>threading</snippet></ROW><ROW><id>8399721</id><snippet>thread</snippet></ROW><ROW><id>8399721</id><snippet>threading</snippet></ROW><ROW><id>8399721</id><snippet>thread</snippet></ROW><ROW><id>8399721</id><snippet>threading</snippet></ROW><ROW><id>8399747</id><snippet>&gt;&gt;&gt; from itertools import groupby
&gt;&gt;&gt; x = [2345,67,24,24,11,11,6,6,6,6,6,3,3,3,3,3,1,1,1,1,1,1]
&gt;&gt;&gt; grouped_x = [(k, sum(1 for i in g)) for k,g in groupby(x)]
&gt;&gt;&gt; grouped_x
[(2345, 1), (67, 1), (24, 2), (11, 2), (6, 5), (3, 5), (1, 6)]
</snippet></ROW><ROW><id>8399747</id><snippet>groupby</snippet></ROW><ROW><id>8399747</id><snippet>list</snippet></ROW><ROW><id>8399747</id><snippet>round</snippet></ROW><ROW><id>8399747</id><snippet>&gt;&gt;&gt; from math import ceil
&gt;&gt;&gt; for k, v in grouped_x:
print int(ceil(100 * v / float(len(x)))),
print  "% is", k


5 % is 2345
5 % is 67
10 % is 24
10 % is 11
23 % is 6
23 % is 3
28 % is 1
</snippet></ROW><ROW><id>8400251</id><snippet>[('hello world', 'this is python'),('this is python', 'today is tuesday')]
</snippet></ROW><ROW><id>8400251</id><snippet>[('hello', 'world'), ('world', 'this'), ('this', 'is'),...]
</snippet></ROW><ROW><id>8400396</id><snippet>y</snippet></ROW><ROW><id>8400396</id><snippet>yes | pip install &lt;package&gt;
</snippet></ROW><ROW><id>8400446</id><snippet>locate libpython2.7.a</snippet></ROW><ROW><id>8400446</id><snippet>/opt/python2.7/lib</snippet></ROW><ROW><id>8400446</id><snippet>LDFLAGS="-L/opt/python2.7/lib" make</snippet></ROW><ROW><id>8400446</id><snippet>@</snippet></ROW><ROW><id>8400446</id><snippet>*</snippet></ROW><ROW><id>8400446</id><snippet>ls -F</snippet></ROW><ROW><id>8400609</id><snippet>def POST(self):
    s = web.input().signal
    print s
    return
</snippet></ROW><ROW><id>8401014</id><snippet>from twisted.internet.defer import Deferred
from twisted.internet.protocol import Protocol, Factory
from twisted.internet.endpoints import TCP4ClientEndpoint
from twisted.internet import reactor

# Stream-oriented connections like TCP are handled by an instance 
# of a Protocol subclass
class SomeKindOfClient(Protocol):

     # When a new connection is established, the first thing that
     # happens is this method is called.
     def connectionMade(self):
         # self.transport is set by the superclass, and lets us 
         # send data over the connection
         self.transport.write("GREETING")

         # a Deferred is a generic, composable API for specifying
         # callbacks
         self.greetingComplete = Deferred()

         # Here's some local state
         self._buffer = ""

     # Whenever bytes arrive on the TCP connection, they're passed
     # to this method
     def dataReceived(self, bytes):

         # Incorportate the network event data into our local state.
         #  This kind of buffering is always necessary with TCP, because
         # there's no guarantees about how many bytes will be delivered
         # at once (except that it will be at least 1), regardless of
         # the size of the send() the peer did.
         self._buffer += bytes

         # Figure out if we're done - let's say the server response is 32
         # bytes of something
         if len(self._buffer) &gt;= 32:
             # Deliver it to whomever is waiting, by way of the Deferred
             # object
             greeting, self._buffer = self._buffer[:32], self._buffer[32:]
             complete = self.greetingComplete
             self.greetingComplete = None
             complete.callback(greeting)

         # Otherwise we'll keep waiting until dataReceived is called again
         # and we have enough bytes.


# One of the normal ways to create a new client connection
f = Factory()
f.protocol = SomeKindOfClient
e = TCP4ClientEndpoint(reactor, "somehost", 1234)

# Connect returns one of those Deferreds - letting us specify a function
# to call when the connection is established.  The implementation of
# connect is also doing basically the same kind of thing as you're asking
# about.
d = e.connect(f)

# Execution continues to this point before the connection has been
# established.  Define a function to use as a callback when the connection
# does get established.
def connected(proto):
    # proto is an instance of SomeKindOfClient.  It has the 
    # greetingComplete attribute, which we'll attach a callback to so we
    # can "wait" for the greeting to be complete.
    d = proto.greetingComplete

    def gotGreeting(greeting):
        # Note that this is really the core of the answer.  This function
        # is called *only* once the protocol has decided it has received
        # some necessary data from the server.  If you were waiting for a
        # session identifier of some sort, this is where you might get it
        # and be able to proceed with the remainder of your application
        # logic.
        print "Greeting arrived", repr(greeting)

    # addCallback is how you hook a callback up to a Deferred - now
    # gotGreeting will be called when d "fires" - ie, when its callback
    # method is invoked by the dataReceived implementation above.
    d.addCallback(gotGreeting)

# And do the same kind of thing to the Deferred we got from 
# TCP4ClientEndpoint.connect
d.addCallback(connected)

# Start the main loop so network events can be processed
reactor.run()
</snippet></ROW><ROW><id>8401014</id><snippet>nc -l 1234</snippet></ROW><ROW><id>8401043</id><snippet>from datetime import datetime
t = 1322745926.123
datetime.fromtimestamp(t).isoformat()
</snippet></ROW><ROW><id>8401043</id><snippet>'2011-12-01T14:25:26.123000'
</snippet></ROW><ROW><id>8401043</id><snippet>from datetime import datetime
t = "1322745926.123"
datetime.fromtimestamp(float(t)).isoformat()
</snippet></ROW><ROW><id>8401161</id><snippet>from sklearn.feature_extraction.text import CountVectorizer, WordNGramAnalyzer
v = CountVectorizer(analyzer=WordNGramAnalyzer(min_n=1, max_n=2))
X = v.fit_transform(files)
</snippet></ROW><ROW><id>8401161</id><snippet>files</snippet></ROW><ROW><id>8401161</id><snippet>X</snippet></ROW><ROW><id>8401649</id><snippet># This code assumes you have created a function called "func" 
# that returns the time at which the next execution should happen.
s = sched.scheduler(time.time, time.sleep)
while True:
    if not s.queue():  # Return True if there are no events scheduled
        time_next_run = func()
        s.enterabs(time_next_run, 1, &lt;task_to_schedule_here&gt;, &lt;args_for_the_task&gt;)
    else:
        time.sleep(1800)  # Minimum interval between task executions
</snippet></ROW><ROW><id>8401649</id><snippet>from datetime import datetime as dt
while True:
    if dt.now().hour in range(start, stop):  #start, stop are integers (eg: 6, 9)
        # call to your scheduled task goes here
        time.sleep(60)  # Minimum interval between task executions
    else:
        time.sleep(10)  # The else clause is not necessary but would prevent the program to keep the CPU busy.
</snippet></ROW><ROW><id>8401933</id><snippet>N-gram</snippet></ROW><ROW><id>8401933</id><snippet>found</snippet></ROW><ROW><id>8401933</id><snippet># assumptions:
# - [('hates','DT'),('alice','JJ'),('but','CC')] is typoed and should be:
#   [('hates','VB'),('alice','NN'),('but','CC')]
# - matches can't overlap, matched elements are excluded from further checking
# - bigrams precede unigrams

main_text = [
  [('the','DT'),('mad','JJ'),('hatter','NN'),('likes','VB'),('tea','NN'),('and','CC'),('hats','NN')],
  [('the','DT'),('red','JJ'),('queen','NN'),('hates','VB'),('alice','NN')]
]
ngrams_to_match = [
  [('likes','VB'),('tea','NN'),('and','CC')],
  [('the','DT'),('mad','JJ'),('hatter','NN')],
  [('hates','VB'),('alice','NN'),('but','CC')],
  [('and','CC'),('the','DT'),('rabbit','NN')]
]

def slice_generator(sentence,size=3):
  """
  Generate slices through the sentence in decreasing sized windows. If True is sent to the
  generator, the elements from the previous window will be excluded from future slices.
  """
  sent = list(sentence)
  for c in range(size,0,-1):
    for i in range(len(sent)):
      slice = tuple(sent[i:i+c])
      if all(x is not None for x in slice) and len(slice) == c:
        used = yield slice
        if used:
          sent[i:i+size] = [None] * c

def gram_search(text,matches):
  tri_bi_uni = set(tuple(x) for x in matches) | set(tuple(x[:2]) for x in matches) | set(tuple(x[:1]) for x in matches)
  found = set()
  for i, sentence in enumerate(text):
    gen = slice_generator(sentence)
    send = None
    try:
      while True:
        row = gen.send(send)
        if row in tri_bi_uni - found:
          send = True
          found |= set(tuple(row[:x]) for x in range(1,len(row)))
          print "%s_gram_match, sentence[%s] = %r" % (len(row),i,row)
        else:
          send = False
    except StopIteration:
      pass

gram_search(main_text,ngrams_to_match)
</snippet></ROW><ROW><id>8402049</id><snippet>print "If you're using 3.x this will give an error"
</snippet></ROW><ROW><id>8402217</id><snippet>from django.utils.translation import get_language
get_language()
</snippet></ROW><ROW><id>8402282</id><snippet>serial = Serial(...)
try:
    # do your stuff here
finally:
    serial.close()
</snippet></ROW><ROW><id>8402576</id><snippet>&gt;&gt;&gt; li = [("I'm", 'using'), ('using', 'python')]
&gt;&gt;&gt; [set(el) for el in li]
[set(['using', "I'm"]), set(['python', 'using'])]
</snippet></ROW><ROW><id>8402576</id><snippet>&gt;&gt;&gt; sets = [set([1]), set([2])]
&gt;&gt;&gt; sets
[set([1]), set([2])]
&gt;&gt;&gt; [sets[i].add(set_) for i, set_ in enumerate(li)]  #could be expanded in proper loop
[None, None]
&gt;&gt;&gt; sets
[set([1, ("I'm", 'using')]), set([2, ('using', 'python')])]
</snippet></ROW><ROW><id>8402649</id><snippet>ax.plot3D(x, y, z, 'k.', alpha=.8)
</snippet></ROW><ROW><id>8402855</id><snippet>pyplot.ticklabel_format</snippet></ROW><ROW><id>8402855</id><snippet>from pylab import *

plot((0,1),(1.200001,1.200002))
ticklabel_format(useOffset=False)
show()
</snippet></ROW><ROW><id>8402972</id><snippet>class FormPage(Resource):    
    def render_GET(self, request):
        return
            &lt;html&gt;
                &lt;body&gt;
                      &lt;form method="POST"&gt;
                          &lt;input name="the-field" type="text" /&gt;
                          &lt;input type='submit' name='Get udl' /&gt;
                      &lt;/form&gt;
                  &lt;/body&gt;
               &lt;/html&gt;

    def render_POST(self, request):
        deferred= deferToThread(my_blocking_method, arg1, arg2)
        deferred.addCallback(self.print_success, request)
        deferred.addErrback(self.print_failure, request)
        return NOT_DONE_YET

    def print_success(self, result, request):
        request.write('Request executed successfully')
        request.finish()


    def print_failure(self, err, request):
        request.write(str(err))
        request.finish()      

    def run()
        root = Resource()
        root.putChild("form", FormPage())
        factory = Site(root)
        reactor.listenTCP(8880, factory)
        reactor.run()
</snippet></ROW><ROW><id>8403037</id><snippet>def validate_parameters(args):
    unset = []
    for k in args:
        if args[k] is None or args[k]=="":
            unset.append(k)
    return unset
</snippet></ROW><ROW><id>8403037</id><snippet>def foo(a, b, c):
    print "Unset:", validate_parameters(locals())

&gt;&gt;&gt; foo(1, None, 3)
Unset: ['b']
&gt;&gt;&gt; foo(1, None, "")
Unset: ['c', 'b']
</snippet></ROW><ROW><id>8403037</id><snippet>locals()</snippet></ROW><ROW><id>8403399</id><snippet>timesince</snippet></ROW><ROW><id>8403399</id><snippet>timesince</snippet></ROW><ROW><id>8403399</id><snippet>django.utils.timesince</snippet></ROW><ROW><id>8403467</id><snippet>luasocket</snippet></ROW><ROW><id>8403467</id><snippet>lua.so</snippet></ROW><ROW><id>8403467</id><snippet>liblua5.1.so</snippet></ROW><ROW><id>8403467</id><snippet>require</snippet></ROW><ROW><id>8403467</id><snippet>liblua5.1.so</snippet></ROW><ROW><id>8403467</id><snippet>dlopen</snippet></ROW><ROW><id>8403467</id><snippet>RTLD_GLOBAL</snippet></ROW><ROW><id>8403467</id><snippet>lua-5.1.4/src/loadlib.c:69</snippet></ROW><ROW><id>8403467</id><snippet>require</snippet></ROW><ROW><id>8403467</id><snippet>lua.so</snippet></ROW><ROW><id>8403467</id><snippet>liblua5.1.so</snippet></ROW><ROW><id>8403467</id><snippet>lua.so</snippet></ROW><ROW><id>8403467</id><snippet>luasocket</snippet></ROW><ROW><id>8403467</id><snippet>dlopen</snippet></ROW><ROW><id>8403467</id><snippet>sys</snippet></ROW><ROW><id>8403467</id><snippet>RTLD_GLOBAL</snippet></ROW><ROW><id>8403467</id><snippet>$ python
Python 2.7.1+ (r271:86832, Apr 11 2011, 18:13:53) 
[GCC 4.5.2] on linux2
Type "help", "copyright", "credits" or "license" for more information.
&gt;&gt;&gt; import sys, DLFCN
&gt;&gt;&gt; sys.setdlopenflags(DLFCN.RTLD_NOW | DLFCN.RTLD_GLOBAL)
&gt;&gt;&gt; import lua
&gt;&gt;&gt; lua.require("socket")
&lt;Lua table at 0x22ccef0&gt;
</snippet></ROW><ROW><id>8403616</id><snippet>&gt;&gt;&gt; netCmds={'Windows': [['ipconfig', '/all'], 'Description',':'], 'Linux': [['lshw', '-class', 'network'], 'product',':']}
&gt;&gt;&gt; netcmd=netCmds[platform.system()]
&gt;&gt;&gt; for l in subprocess.check_output(netcmd[0]).splitlines():
        if netcmd[1] in l:
            print l.split(netcmd[2])[-1]
</snippet></ROW><ROW><id>8403616</id><snippet>&lt;System_name&gt;:[[&lt;command to list n/w info&gt;....],&lt;parse_string&gt;,&lt;Split character&gt;]</snippet></ROW><ROW><id>8403729</id><snippet>mySizer = wx.BoxSizer(wx.VERTICAL)
</snippet></ROW><ROW><id>8403729</id><snippet>block = wx.BoxSizer(wx.VERTICAL)
</snippet></ROW><ROW><id>8403729</id><snippet>self.Sidebar.SetSizer(block)
</snippet></ROW><ROW><id>8403729</id><snippet>self.Sidebar.sizer.Add(block, 0, wx.EXPAND|wx.ALIGN_LEFT|wx.BOTTOM, 5)
</snippet></ROW><ROW><id>8403729</id><snippet>import wx

########################################################################
class MyFrame(wx.Frame):
    """"""

    #----------------------------------------------------------------------
    def __init__(self):
        """Constructor"""
        wx.Frame.__init__(self, None, title="Test")

        self.panel = wx.Panel(self)
        self.mainSizer = wx.BoxSizer(wx.VERTICAL)
        samples = [("Red", "Breathe Into Me", "End of Silence"),
                   ("eleventyseven", "Lonely", "Sugarfist"),
                   ("Lecrae", "Go Hard", "Rebel")]
        for sample in samples:
            artist, track, album = sample
            self.PlayLabel(artist, track, album)

        self.panel.SetSizer(self.mainSizer)
        panelSizer = wx.BoxSizer()
        panelSizer.Add(self.panel, 1, wx.EXPAND)
        self.SetSizer(panelSizer)
        self.Fit()


    def PlayLabel(self, artist, track, album):
        header_font = wx.Font(26, wx.SWISS, wx.NORMAL, wx.BOLD, False, "Helvetica")
        album_font = wx.Font(18, wx.SWISS, wx.NORMAL, wx.BOLD, False, "Helvetica")

        block = self.panel

        # sizer
        sizer = self.mainSizer

        # artist
        label_artist = wx.StaticText(block, -1, artist)
        label_artist.SetForegroundColour('BLACK')
        label_artist.SetFont(header_font)

        # track
        label_track = wx.StaticText(block, -1, track)
        label_track.SetForegroundColour('BLACK')
        label_track.SetFont(header_font)

        # album
        label_album = wx.StaticText(block, -1, album)
        label_album.SetForegroundColour('BLACK')
        label_album.SetFont(album_font)

        sizer.AddMany([
                (label_artist, 1, wx.EXPAND|wx.TOP|wx.LEFT|wx.RIGHT, 5),
                (label_track, 1, wx.EXPAND|wx.LEFT|wx.RIGHT, 5),
                (label_album, 1, wx.EXPAND|wx.LEFT|wx.RIGHT, 5)
        ])

if __name__ == "__main__":
    app = wx.App(False)
    frame = MyFrame()
    frame.Show()
    app.MainLoop()
</snippet></ROW><ROW><id>8403732</id><snippet>before_execute</snippet></ROW><ROW><id>8403732</id><snippet>from sqlalchemy import event, create_engine

def before_execute(conn, clauseelement, multiparams, params):
    log.info("Received statement: %s" % clauseelement)

engine = create_engine('postgresql://scott:tiger@localhost/test')
event.listen(engine, "before_execute", before_execute)
</snippet></ROW><ROW><id>8403754</id><snippet>dict</snippet></ROW><ROW><id>8403754</id><snippet>lookdict</snippet></ROW><ROW><id>8403754</id><snippet>lookdict_string</snippet></ROW><ROW><id>8403754</id><snippet>lookdict_unicode</snippet></ROW><ROW><id>8403754</id><snippet>dictobject.c</snippet></ROW><ROW><id>8403754</id><snippet>dict</snippet></ROW><ROW><id>8403991</id><snippet>&gt;&gt;&gt; x="Ae Fond Kiss... (also known as ''Just a Kiss'') is a 2004 romantic [[drama film|film]]\ndirected by [[Ken Loach]], and starring [[Atta Yaqub]] and [[Eva Birthistle]]. The \ntitle is taken from a [[Scotland|Scottish]] song by [[Robert Burns]], the complete\nline  being ''[[Ae Fond Kiss|Ae fond kiss]], and then we sever...'"
&gt;&gt;&gt; print re.sub("([^\[\]]*\|)|(\[\[)|(\]\])","",x)
Ae Fond Kiss... (also known as ''Just a Kiss'') is a 2004 romantic film
directed by Ken Loach, and starring Atta Yaqub and Eva Birthistle. The 
title is taken from a Scottish song by Robert Burns, the complete
line  being ''Ae fond kiss, and then we sever...'
&gt;&gt;&gt; x="Hero Hitler In Love is a 2011 Punjabi [[romantic]] and [[action film|action]] film directed by [[Sukhjant Dadda]] with story, screenplay &amp; dialogues by [[Babbu Maan]]. Hero Hitler is produced by B S Maan (Khantmanpur) and [[Darshan Singh Grewal]], and stars [[Babbu Maan]], [[Mouni Roy]] and [[Bhagwant Mann]]. ''Hero Hitler In Love'' was released on 18 November in mostly all Punjab theaters. It released to mixed reviews but did have a good opening at the box office."
 &gt;&gt;&gt; print re.sub("([^\[\]]*\|)|(\[\[)|(\]\])","",x)
 Hero Hitler In Love is a 2011 Punjabi romantic and action film directed by Sukhjant Dadda with story, screenplay &amp; dialogues by Babbu Maan. Hero Hitler is produced by B S Maan (Khantmanpur) and Darshan Singh Grewal, and stars Babbu Maan, Mouni Roy and Bhagwant Mann. ''Hero Hitler In Love'' was released on 18 November in mostly all Punjab theaters. It released to mixed reviews but did have a good opening at the box office.
&gt;&gt;&gt; 
</snippet></ROW><ROW><id>8404061</id><snippet>import multiprocessing as mp
import datetime as dt
def work():
    t = dt.datetime.now()
    print mp.current_process().name, t
    i = 0
    while i &lt; 100000000:
        i+=1
    t2 = dt.datetime.now()
    print mp.current_process().name, t2, t2-t

if __name__ == '__main__': 
    print "single process:"
    t1 = mp.Process(target=work)
    t1.start()
    t1.join()

    print "multi process:"
    t1 = mp.Process(target=work)
    t1.start()
    t2 = mp.Process(target=work)
    t2.start()
    t1.join()
    t2.join()
</snippet></ROW><ROW><id>8404061</id><snippet>single process:
Process-1 2011-12-06 12:34:20.611526
Process-1 2011-12-06 12:34:28.494831 0:00:07.883305
multi process:
Process-3 2011-12-06 12:34:28.497895
Process-2 2011-12-06 12:34:28.503433
Process-2 2011-12-06 12:34:36.458354 0:00:07.954921
Process-3 2011-12-06 12:34:36.546656 0:00:08.048761
</snippet></ROW><ROW><id>8404238</id><snippet>saveFile=input("Please enter the name of the file you want to save in: ")
  outputFile=open(saveFile,"w")
  pieceList=[]
  characterCounter =0
  for row_index in range (self.SIZE):
     for column_index in range(self.SIZE):
        pieceRow=[]
        char=" "
        if self.grid[row_index][column_index]==Piece(Piece.WHITE):
           char="w"
        elif self.grid[row_index][column_index]==Piece(Piece.RED):
           char="r"
        pieceRow.append(char)
        characterCounter++
        if characterCounter==8:
           pieceRow.append("\n")
           characterCounter=0
     pieceList.append(pieceRow)
     for item in pieceList:
        for char in item:
           outputFile.write("%s" %char)
</snippet></ROW><ROW><id>8404359</id><snippet>SocketHandler</snippet></ROW><ROW><id>8404359</id><snippet>fork()</snippet></ROW><ROW><id>8404359</id><snippet>monitor()</snippet></ROW><ROW><id>8404359</id><snippet>fork()</snippet></ROW><ROW><id>8404359</id><snippet>Process A writes first part of its message
Process B writes its message
Process A writes second part of its message
</snippet></ROW><ROW><id>8404359</id><snippet>FileHandler</snippet></ROW><ROW><id>8404521</id><snippet>f[5] += 2</snippet></ROW><ROW><id>8404521</id><snippet>__getitem__</snippet></ROW><ROW><id>8404521</id><snippet>__setitem__</snippet></ROW><ROW><id>8404521</id><snippet>+</snippet></ROW><ROW><id>8404599</id><snippet>from django.db.models import F
User.objects.filter(node__pk=node.pk, project=F('node__project'))
</snippet></ROW><ROW><id>8404599</id><snippet>User.objects.filter(node__pk=node.pk, project__node__pk=node.pk)
</snippet></ROW><ROW><id>8404599</id><snippet>debugsqlshell</snippet></ROW><ROW><id>8404659</id><snippet>project</snippet></ROW><ROW><id>8404659</id><snippet>from project.code import ...</snippet></ROW><ROW><id>8404659</id><snippet>sys.path</snippet></ROW><ROW><id>8404659</id><snippet>PYTHONPATH</snippet></ROW><ROW><id>8404659</id><snippet>sys.path</snippet></ROW><ROW><id>8404659</id><snippet>project</snippet></ROW><ROW><id>8404659</id><snippet>project/
    __init__.py (empty)
    code.py
    sub1/
        __init__.py (empty)
        test.py
</snippet></ROW><ROW><id>8404659</id><snippet>project/code.py</snippet></ROW><ROW><id>8404659</id><snippet># code.py (module that resides in main "project" package)

def foo():
    print "this is code.foo"
</snippet></ROW><ROW><id>8404659</id><snippet>project/sub1/test.py</snippet></ROW><ROW><id>8404659</id><snippet># test.py (module that resides in "sub1" subpackage of main "project" package)

from ..code import foo
foo()
</snippet></ROW><ROW><id>8404659</id><snippet>test.py</snippet></ROW><ROW><id>8404659</id><snippet>foo</snippet></ROW><ROW><id>8404659</id><snippet>..code</snippet></ROW><ROW><id>8404659</id><snippet>code.py</snippet></ROW><ROW><id>8404659</id><snippet>..</snippet></ROW><ROW><id>8404659</id><snippet>sub1.test</snippet></ROW><ROW><id>8404659</id><snippet>shell$ (cd to directory where "project" package is located)
shell$ python
Python 2.6.1 (r261:67515, Aug  2 2010, 20:10:18) 
[GCC 4.2.1 (Apple Inc. build 5646)] on darwin
Type "help", "copyright", "credits" or "license" for more information.
&gt;&gt;&gt; import project.sub1.test
this is code.foo
</snippet></ROW><ROW><id>8404659</id><snippet>from .. import X</snippet></ROW><ROW><id>8404659</id><snippet>from .. import X</snippet></ROW><ROW><id>8404659</id><snippet>from project import X</snippet></ROW><ROW><id>8404659</id><snippet>X</snippet></ROW><ROW><id>8404659</id><snippet>project</snippet></ROW><ROW><id>8404659</id><snippet>project/__init__.py</snippet></ROW><ROW><id>8404659</id><snippet>from ..code import X</snippet></ROW><ROW><id>8404659</id><snippet>from project.code import X</snippet></ROW><ROW><id>8404844</id><snippet>for line in data.read():
</snippet></ROW><ROW><id>8404844</id><snippet>line = data.readline()
while(line):
    print line
    line = data.readline()
</snippet></ROW><ROW><id>8404844</id><snippet>import urllib2
from BeautifulSoup import BeautifulSoup
url = "http://www.my_url.com"
data = urllib2.urlopen(url).read()
soup = BeautifulSoup.BeautifulSoup(data)

all_links = soup.find('a')
# you can look for specific link
</snippet></ROW><ROW><id>8404889</id><snippet>set</snippet></ROW><ROW><id>8404889</id><snippet>in</snippet></ROW><ROW><id>8404889</id><snippet>words = ['elephant', 'dog', 'blue', 'sam', 'white', 'red', 'sun', 'moon']
colors = set(['red', 'green', 'blue', 'orange', 'white'])
print [word for word in words if word in colors]
</snippet></ROW><ROW><id>8404889</id><snippet>['blue', 'white', 'red']
</snippet></ROW><ROW><id>8405005</id><snippet>  message = get_other_message() if optional_var else get_message()
</snippet></ROW><ROW><id>8405005</id><snippet>  message = get_other_message() if optional_var is not None else get_message()
</snippet></ROW><ROW><id>8405015</id><snippet>matplotlib</snippet></ROW><ROW><id>8405015</id><snippet>class MyDiagram(FigureCanvas):
    def __init__(self, fig):
        FigureCanvas.__init__(self, fig)
        self._cursor = None

    def enterEvent(self, event):
        if (self._cursor is not None and
            QApplication.overrideCursor() is None):
            QApplication.setOverrideCursor(self._cursor)
        FigureCanvas.enterEvent(self, event)

    def leaveEvent(self, event):
        self._cursor = QCursor(QApplication.overrideCursor())
        QApplication.restoreOverrideCursor()
        FigureCanvas.leaveEvent(self, event)
</snippet></ROW><ROW><id>8405077</id><snippet>py-postprocess-output-buffer</snippet></ROW><ROW><id>8405077</id><snippet>(defadvice py-postprocess-output-buffer (after my-py-postprocess-output-buffer activate)
  (run-with-idle-timer 0 nil (lambda ()
                               (let ((output-win (get-buffer-window py-output-buffer))
                                     (orig-win (selected-window)))
                                 (when output-win
                                   (select-window output-win)
                                   (end-of-buffer)
                                   (select-window orig-win))))))
</snippet></ROW><ROW><id>8405315</id><snippet>from django.db import connection</snippet></ROW><ROW><id>8405315</id><snippet>DatabaseWrapper</snippet></ROW><ROW><id>8405315</id><snippet>DatabaseWrapper</snippet></ROW><ROW><id>8405315</id><snippet>connection.cursor().connection</snippet></ROW><ROW><id>8405524</id><snippet>{{l.code=="es"|yesno:"disabled,"}}
</snippet></ROW><ROW><id>8405524</id><snippet>{{ l.code=={{"es"|yesno:"disabled,"}} }}
</snippet></ROW><ROW><id>8405524</id><snippet>if</snippet></ROW><ROW><id>8405524</id><snippet>yesno</snippet></ROW><ROW><id>8405587</id><snippet>setup.py install -v -n
</snippet></ROW><ROW><id>8405587</id><snippet>-n</snippet></ROW><ROW><id>8405587</id><snippet>-v</snippet></ROW><ROW><id>8405587</id><snippet>setup.py</snippet></ROW><ROW><id>8405785</id><snippet>{method 'acquire' of 'thread.lock' objects}</snippet></ROW><ROW><id>8405986</id><snippet>python-support</snippet></ROW><ROW><id>8405986</id><snippet>/usr/lib/python2.7/dist-packages/python-support.pth</snippet></ROW><ROW><id>8405986</id><snippet>sys.path</snippet></ROW><ROW><id>8406031</id><snippet>import jsonpickle as jp

json = '''
{
    "attr1": true,
    "attr2": "fooA",
    "attr3": 7,
    "attr4": [
        {
        "someattr1": "fooB",
        "someattr2": "barC"
        },
        {
        "someattr1": "fooD",
        "someattr2": "barE"
        }
        ],
    "attr6": false
} '''

print jp.decode(json)['attr4'][1]['someattr1']  #index == 1 → 2nd in the series!!
</snippet></ROW><ROW><id>8406391</id><snippet>dic = {}
dic['aaa'] = 5
</snippet></ROW><ROW><id>8406391</id><snippet>dic = {'aaa': 5}
</snippet></ROW><ROW><id>8406391</id><snippet>dict()</snippet></ROW><ROW><id>8406391</id><snippet>dic = dict()
dic['aaa'] = 5
</snippet></ROW><ROW><id>8407152</id><snippet>a*x^(b) - c*x^(b-1)</snippet></ROW><ROW><id>8407152</id><snippet>(a*b)*x^(b-1) - (c*(b-1))*x^(b-2)</snippet></ROW><ROW><id>8407152</id><snippet>def newton(f, fprime, firstguess, epsilon):
    x = firstguess
    while abs(f(x)) &gt; epsilon:
        x = x - (f(x) / fprime(x))
    return x
</snippet></ROW><ROW><id>8407219</id><snippet>&gt;&gt;&gt; import numpy as np
&gt;&gt;&gt; x = np.array([['a.','cd'],['ef','g.']])
&gt;&gt;&gt; x[np.char.find(x, '.') &gt; -1]
array(['a.', 'g.'], 
      dtype='|S2')
</snippet></ROW><ROW><id>8407219</id><snippet>&gt;&gt;&gt; np.where(np.char.find(x, '.') &gt; -1)
(array([0, 1]), array([0, 1]))
</snippet></ROW><ROW><id>8407219</id><snippet>&gt;&gt;&gt; zip(*np.where(np.char.find(x, '.') &gt; -1))
[(0, 0), (1, 1)]
</snippet></ROW><ROW><id>8407554</id><snippet>list</snippet></ROW><ROW><id>8407554</id><snippet>list</snippet></ROW><ROW><id>8407554</id><snippet>list = []
</snippet></ROW><ROW><id>8407554</id><snippet>lines</snippet></ROW><ROW><id>8407554</id><snippet>&gt;&gt;&gt; lines = []
&gt;&gt;&gt; type(lines)
&lt;class 'list'&gt;
</snippet></ROW><ROW><id>8407800</id><snippet>submodel_generator(newpat, current+1, maxn)
</snippet></ROW><ROW><id>8407800</id><snippet>for b in submodel_generator(newpat, current+1, maxn):
    yield b
</snippet></ROW><ROW><id>8407800</id><snippet>yield from submodel_generator(newpat, current+1, maxn)
</snippet></ROW><ROW><id>8408045</id><snippet>N1 = grid_lon.size
grid_point_array = np.hstack([grid_lon.reshape((N1,1)), grid_lat.reshape((N1,1))])
</snippet></ROW><ROW><id>8408045</id><snippet>N2 = len(measurement_lon)
measurment_data_array = np.hstack([np.array(measurement_lon).reshape((N2,1)),
    np.array(measurement_lat).reshape((N2,1))])
</snippet></ROW><ROW><id>8408045</id><snippet>d = scipy.spatial.distance.cdist(grid_point_array, measurement_data_array, 'euclidean')
</snippet></ROW><ROW><id>8408045</id><snippet>measurement_range_array = np.array(measurement_range)
flat_grid_idx = pow(measurement_range_array-d,2).sum(1).argmin()
</snippet></ROW><ROW><id>8408045</id><snippet>grid_x = flat_grid_idx % gridsize_x
grid_y = flat_grid_idx // gridsize_x
</snippet></ROW><ROW><id>8408131</id><snippet>settings.py</snippet></ROW><ROW><id>8408131</id><snippet>django_content_type</snippet></ROW><ROW><id>8408131</id><snippet>UPDATE django_content_type SET app_label='&lt;NewAppName&gt;' WHERE app_label='&lt;OldAppName&gt;'</snippet></ROW><ROW><id>8408131</id><snippet>ALTER TABLE &lt;oldAppName&gt;_modelName RENAME TO &lt;newAppName&gt;_modelName</snippet></ROW><ROW><id>8408131</id><snippet>django_content_type.name</snippet></ROW><ROW><id>8408177</id><snippet>import re

def nat_cmp(a, b):
    convert = lambda text: int(text) if text.isdigit() else text.lower()
    alphanum_key = lambda key: [ convert(c) for c in re.split('([0-9]+)', key) ]

    return cmp(alphanum_key(a), alphanum_key(b))

print nat_cmp('foo10z', 'foo100z')
print cmp('foo10z', 'foo100z')  # &lt;- notice the builtin yields a different result
</snippet></ROW><ROW><id>8408177</id><snippet>-1
1
</snippet></ROW><ROW><id>8408177</id><snippet>In [1]: %timeit nat_cmp('foo10z', 'foo100z')
100000 loops, best of 3: 11.6 us per loop
</snippet></ROW><ROW><id>8408177</id><snippet>re</snippet></ROW><ROW><id>8408177</id><snippet>re</snippet></ROW><ROW><id>8408177</id><snippet>re.split</snippet></ROW><ROW><id>8408177</id><snippet>import re
from itertools import groupby

def regex_key(key):
    """Traditional, regular-expression-based nat-sort key."""
    convert = lambda text: int(text) if text.isdigit() else text.lower()
    return [convert(c) for c in re.split('([0-9]+)', key)]

def fast_key(value):
    """Attempt #1 to go faster than 'slow' 're' library."""
    result = []
    for is_int, chunk in groupby(value.lower(), str.isdigit):
        if is_int:
            result.append(int(''.join(chunk)))
        else:
            result.append(tuple(chunk))
    return result

def faster_key(value):
    """Attempt #2.  'Low-level' python."""
    start_idx = 0
    is_num = None
    result = []
    for idx, c in enumerate(value.lower()):
        now_is_num = c.isdigit()
        if is_num is not None and now_is_num != is_num:
            buf = value[start_idx:idx]
            result.append(int(buf) if is_num else buf)
            start_idx = idx
            is_num = None
        is_num = now_is_num
    buf = value[start_idx:]
    result.append(int(buf) if is_num else buf)
    return result
</snippet></ROW><ROW><id>8408177</id><snippet>from datetime import datetime

def benchmark(fn):
    print "Benching %s (run 1000 times)" % fn.__name__

    start = datetime.now()
    for x in xrange(1000):
        # run key function on something approx 100 chars long
        fn('asdf1234sdfg234jhd88123j2134 - 123d34123djfsk'*2)
    print "\t%s" % (datetime.now() - start)

benchmark(regex_key)
benchmark(fast_key)
benchmark(faster_key)
</snippet></ROW><ROW><id>8408177</id><snippet>Benching regex_key (run 1000 times)
    0:00:00.025908
Benching fast_key (run 1000 times)
    0:00:00.065567
Benching faster_key (run 1000 times)
    0:00:00.042654
</snippet></ROW><ROW><id>8408177</id><snippet>re.split</snippet></ROW><ROW><id>8408227</id><snippet>walk_set(self, photoset_id, per_page=20, page=1)
</snippet></ROW><ROW><id>8408429</id><snippet>listView = next(c for c in controls if c.name == "ListView")
</snippet></ROW><ROW><id>8408429</id><snippet>StopIteration</snippet></ROW><ROW><id>8408429</id><snippet>StopIteration</snippet></ROW><ROW><id>8408429</id><snippet>next</snippet></ROW><ROW><id>8408429</id><snippet>from itertools import chain
listView = next(chain((c for c in controls if c.name == "ListView"), [default])
</snippet></ROW><ROW><id>8408429</id><snippet>next(iterable)</snippet></ROW><ROW><id>8408429</id><snippet>iterable.next()</snippet></ROW><ROW><id>8408631</id><snippet>c.execute</snippet></ROW><ROW><id>8408631</id><snippet>(
    c.execute("""insert into feed_post values (%r,'%s','%s',%d)""")
    % 
    (status.id, status.text, status.author.screen_name, status.created_at)
)
</snippet></ROW><ROW><id>8408631</id><snippet>sql = "insert into feed_post values (?,?,?,?)"
params = (status.id, status.text, status.author.screen_name, status.created_at)
c.execute(sql, params)
</snippet></ROW><ROW><id>8408870</id><snippet>ipython --c='print "Hi"'
</snippet></ROW><ROW><id>8408870</id><snippet>-</snippet></ROW><ROW><id>8408870</id><snippet>--</snippet></ROW><ROW><id>8408870</id><snippet>ipython -i --pdb -c "%run my_program.py"
</snippet></ROW><ROW><id>8409044</id><snippet>git add -A
</snippet></ROW><ROW><id>8409044</id><snippet>mv somefile someotherfile
</snippet></ROW><ROW><id>8409070</id><snippet>class ThreadForm(ModelForm):

    def __init__(self, forum, user, *args, **kwargs):
        super(ThreadForm, self).__init__(*args, **kwargs)
        self.forum = forum
        self.user = user

    def save(self):
        thread = super(ThreadForm, self).save(commit=False)
        thread.forum = self.forum
        thread.creator = self.user
        thread.save()
        return thread

    class Meta:
        model = Thread
        exclude = ('slug', 'created', 'creator', 'forum') 
</snippet></ROW><ROW><id>8409070</id><snippet>def thread_add(self, forum_id):
    data = None
    if request.method == 'POST':
        data = request.POST
    forum = Forum.objects.get(id=form_id)
    form = ThreadForm(forum=forum, user=request.user, data=data)
    if form.is_valid():
        form.save()
        .............
    return render_to_response .....
</snippet></ROW><ROW><id>8409110</id><snippet>linestyle</snippet></ROW><ROW><id>8409110</id><snippet>marker</snippet></ROW><ROW><id>8409110</id><snippet>plot</snippet></ROW><ROW><id>8409110</id><snippet>plt.plot(range(10), linestyle='--', marker='o', color='b')</snippet></ROW><ROW><id>8409110</id><snippet>plt.plot(range(10), '--bo')</snippet></ROW><ROW><id>8409110</id><snippet>================    ===============================
character           description
================    ===============================
``'-'``             solid line style
``'--'``            dashed line style
``'-.'``            dash-dot line style
``':'``             dotted line style
``'.'``             point marker
``','``             pixel marker
``'o'``             circle marker
``'v'``             triangle_down marker
``'^'``             triangle_up marker
``'&lt;'``             triangle_left marker
``'&gt;'``             triangle_right marker
``'1'``             tri_down marker
``'2'``             tri_up marker
``'3'``             tri_left marker
``'4'``             tri_right marker
``'s'``             square marker
``'p'``             pentagon marker
``'*'``             star marker
``'h'``             hexagon1 marker
``'H'``             hexagon2 marker
``'+'``             plus marker
``'x'``             x marker
``'D'``             diamond marker
``'d'``             thin_diamond marker
``'|'``             vline marker
``'_'``             hline marker
================    ===============================
</snippet></ROW><ROW><id>8409110</id><snippet>xs = linspace(-pi, pi, 30)
ys = sin(xs)
markers_on = [12, 17, 18, 19]
plt.plot(xs, ys, 'g-')
plt.plot(xs[markers_on], ys[markers_on], 'rD')
</snippet></ROW><ROW><id>8409182</id><snippet>Image</snippet></ROW><ROW><id>8409182</id><snippet>&lt;b&gt;show&lt;/b&gt;(self, title=None, command=None)</snippet></ROW><ROW><id>8409539</id><snippet>s = '{"_id": {"$oid": "4edebd262ae5e93b41000000"}}'
u = json.loads(s, object_hook=json_util.object_hook)

print u  # Result:  {u'_id': ObjectId('4edebd262ae5e93b41000000')}

s = json.dumps(u, default=json_util.default)

print s  # Result:  {"_id": {"$oid": "4edebd262ae5e93b41000000"}}
</snippet></ROW><ROW><id>8409584</id><snippet>@</snippet></ROW><ROW><id>8409584</id><snippet>&gt;&gt;&gt; from lxml import etree
&gt;&gt;&gt; xml = """\
... &lt;?xml version="1.0" encoding="utf8"?&gt;
... &lt;rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#"&gt;
...     &lt;rdf:li rdf:resource="urn:miriam:obo.chebi:CHEBI%3A37671"/&gt;
... &lt;/rdf:RDF&gt;
... """
&gt;&gt;&gt; tree = etree.fromstring(xml)
&gt;&gt;&gt; ns = {'rdf': 'http://www.w3.org/1999/02/22-rdf-syntax-ns#'}
&gt;&gt;&gt; tree.xpath('//rdf:li/@rdf:resource', namespaces=ns)
['urn:miriam:obo.chebi:CHEBI%3A37671']
</snippet></ROW><ROW><id>8409584</id><snippet>import lxml.etree as etree

ns = {
    'sbml': 'http://www.sbml.org/sbml/level2/version4',
    'rdf':'http://www.w3.org/1999/02/22-rdf-syntax-ns#',
    'body':'http://www.w3.org/1999/xhtml',
    're': 'http://exslt.org/regular-expressions',
    }

def extract_name_and_chebi(node):
    chebies = node.xpath("""
        .//rdf:li[
        starts-with(@rdf:resource, 'urn:miriam:obo.chebi')
        ]/@rdf:resource
        """, namespaces=ns)
    return node.attrib['name'], chebies[0]

with open('yeast_4.02.xml') as xml:
    tree = etree.parse(xml)

    maybemeta = tree.xpath("""
        //sbml:speciesType[descendant::rdf:li[
        starts-with(@rdf:resource, 'urn:miriam:obo.chebi')]]
        """, namespaces = ns)

    with open('metabolites.txt', 'w') as output:
        for node in maybemeta:
            output.write('%s\t%s\n' % extract_name_and_chebi(node))
</snippet></ROW><ROW><id>8409879</id><snippet>def hashing(header_hash, signature, hash_size):
     for index, i in enumerate(xrange(len(signature), hash_size)):
          header_hash['Some-Authorization-%s' % index] = signature[i:i+hash_size]
</snippet></ROW><ROW><id>8409879</id><snippet>itertools</snippet></ROW><ROW><id>8409881</id><snippet>?</snippet></ROW><ROW><id>8409881</id><snippet>c.execute('SELECT colname FROM music WHERE other_colname LIKE ?', ('%' + query + '%'))
</snippet></ROW><ROW><id>8410462</id><snippet>/model/new/{subpath}</snippet></ROW><ROW><id>8410462</id><snippet>/model/new/a/b/c</snippet></ROW><ROW><id>8410462</id><snippet>config.add_route('new_model_route', '/model/new/{subpath}')
request.route_url('new_model_route', 'b', 'c', subpath='a')
# /model/new/a/b/c
</snippet></ROW><ROW><id>8410462</id><snippet>config.add_route('new_model_route', '/model/new/*subpath')
# matches /model/new/a, /model/new/a/b, etc

request.route_url('new_model_route', subpath=('a', 'b', 'c'))
# /model/new/a/b/c
</snippet></ROW><ROW><id>8410462</id><snippet>static=True</snippet></ROW><ROW><id>8410462</id><snippet>add_route</snippet></ROW><ROW><id>8410462</id><snippet>route name</snippet></ROW><ROW><id>8410462</id><snippet>subpath</snippet></ROW><ROW><id>8410462</id><snippet>traverse</snippet></ROW><ROW><id>8410462</id><snippet>config.add_route('new_model_route', '/model/new/*rest')
# matches /model/new/a, /model/new/a/b, etc

request.route_url('new_model_route', rest='a/b/c')
# /model/new/a/b/c
</snippet></ROW><ROW><id>8410462</id><snippet>config.add_route('new_model_route', '/model/new')
# matches /model/new only

request.route_url('new_model_route', 'a', 'b', 'c')
# /model/new/a/b/c
</snippet></ROW><ROW><id>8410481</id><snippet>json</snippet></ROW><ROW><id>8410481</id><snippet>def myview(request):
    return {'result': False, 'error_message': 'Unknown User'}

config.add_view(myview, renderer='json')
</snippet></ROW><ROW><id>8410535</id><snippet>import pylab
pylab.plot(epochs, errors)
pylab.show()
</snippet></ROW><ROW><id>8411221</id><snippet>SERVICES</snippet></ROW><ROW><id>8411221</id><snippet>Service</snippet></ROW><ROW><id>8411221</id><snippet>name</snippet></ROW><ROW><id>8411221</id><snippet>serviceModules = [m for m in ALL_MODULES if m.service.name == 'FACEBOOK']
</snippet></ROW><ROW><id>8411332</id><snippet>import datetime as dt
from collections import deque
from itertools import tee, islice, izip

def dayiter(start, end):
    one = dt.timedelta(days=1)
    day = start
    while day &lt;= end:
        yield day
        day += one

def moving_average(mapping, window, dft=0):
    n = float(window)
    t1, t2 = tee(dayiter(min(mapping), max(mapping)))
    s = sum(mapping.get(day, dft) for day in islice(t2, window))
    yield s / n
    for olddate, newdate in izip(t1, t2):
        oldvalue = mapping.get(olddate, dft)
        newvalue = mapping.get(newdate, dft)
        s += newvalue - oldvalue
        yield s / n

example = {dt.datetime(2008, 1, 1) : 5, dt.datetime(2008, 1, 2) : 6, dt.datetime(2008, 1, 3) : 7, dt.datetime(2008, 1, 4) : 9, dt.datetime(2008, 1, 5) : 12,
dt.datetime(2008, 1, 6) : 15, dt.datetime(2008, 1, 7) : 20, dt.datetime(2008, 1, 8) :     22, dt.datetime(2008, 1, 9) : 25, dt.datetime(2008, 1, 10) : 35}

for ma in moving_average(example, window=3):
    print ma
</snippet></ROW><ROW><id>8411344</id><snippet>import argparse

parser = argparse.ArgumentParser(description = "Compare files")
parser.add_argument('first', help="the first file")
parser.add_argument('other', nargs='+', help="the other files")

args = parser.parse_args()
print args
</snippet></ROW><ROW><id>8411344</id><snippet>-h</snippet></ROW><ROW><id>8411344</id><snippet>usage: script.py [-h] first other [other ...]

Compare files

positional arguments:
  first       the first file
  other       the other files

optional arguments:
  -h, --help  show this help message and exit
</snippet></ROW><ROW><id>8411344</id><snippet>usage: script.py [-h] first other [other ...]
script.py: error: too few arguments
</snippet></ROW><ROW><id>8411344</id><snippet>Namespace(first='one', other=['two', 'three'])
</snippet></ROW><ROW><id>8411767</id><snippet>Thread</snippet></ROW><ROW><id>8411767</id><snippet>Uzvy.models.Thread</snippet></ROW><ROW><id>8411767</id><snippet>threading.Thread
</snippet></ROW><ROW><id>8411802</id><snippet>from django.core.urlresolvers import reverse    

messages.warning(request, 'WARNING! You have not set your custom URL for this profile. You can set this &lt;a href="%s"&gt;HERE.&lt;/a&gt;' % reverse('change_url'))
</snippet></ROW><ROW><id>8411802</id><snippet>safe</snippet></ROW><ROW><id>8411802</id><snippet>{{ message | safe }}
</snippet></ROW><ROW><id>8412202</id><snippet>&gt;&gt;&gt; in_json = None
&gt;&gt;&gt; json.loads(in_json)
</snippet></ROW><ROW><id>8412202</id><snippet>None</snippet></ROW><ROW><id>8412202</id><snippet>&gt;&gt;&gt; r = requests.get("http://api.ustream.tv/json/stream/popular/search/all?key=y
ourDevKey")
&gt;&gt;&gt; json.loads(r.content)
</snippet></ROW><ROW><id>8412352</id><snippet>True</snippet></ROW><ROW><id>8412352</id><snippet>stmts = {
"Mark Byers: ": "x = l.index(a) &lt; l.index(b)",
"jcollado: ": """try:
    x = bool(l.index(b, l.index(a)))
except ValueError:
    x = False""",
"Greg Hewgill: ": """try:
   x = b in l[l.index(a):]
except ValueError:
   x = False"""
}

setups = ["a = 80; b = 90; l = list(range(100))", 
          "a = 5; b = 10; l = list(range(100))", 
          "a = 90; b = 80; l = list(range(100))",
          "a = 10; b = 5; l = list(range(100))"]

import timeit
for se in setups:
    print(se)
    for st in stmts:
        print(st, timeit.timeit(stmt=stmts[st], setup=se))
    print()
</snippet></ROW><ROW><id>8412352</id><snippet>a = 80; b = 90; l = list(range(100))
Mark Byers:  5.760545506106019
Greg Hewgill:  3.454101240451526     # Tie!
jcollado:  3.4574156981854536        # Tie!


a = 5; b = 10; l = list(range(100))
Mark Byers:  1.0853995762934794      # Close runner-up!
Greg Hewgill:  1.7265326426395209
jcollado:  1.0528704983320782        # Winner!

a = 90; b = 80; l = list(range(100))
Mark Byers:  5.741535600372806
Greg Hewgill:  3.623253643486848     # Winner!
jcollado:  4.567104188774817

a = 10; b = 5; l = list(range(100))
Mark Byers:  1.0592141197866987      # Winner!
Greg Hewgill:  4.73399648151641
jcollado:  4.77415749512712
</snippet></ROW><ROW><id>8412394</id><snippet>a='abcdefg'
b = [a[i:i+3] for i in xrange(len(a)-2)]
print b
['abc', 'bcd', 'cde', 'def', 'efg']
</snippet></ROW><ROW><id>8412743</id><snippet>self.request.headers</snippet></ROW><ROW><id>8413288</id><snippet>class BaseClass:
    def m1(self):
        return 1

class MyClass(BaseClass):
    def m1(self):
        return BaseClass.m1(self)
</snippet></ROW><ROW><id>8413288</id><snippet>class BaseClass(object):
    def m1(self):
        return 1

class MyClass(BaseClass):
    def m1(self):
        return super(MyClass, self).m1()
</snippet></ROW><ROW><id>8413288</id><snippet>super(classname, ...).method()</snippet></ROW><ROW><id>8413288</id><snippet>parentclassname.method(...)</snippet></ROW><ROW><id>8413288</id><snippet>__slots__</snippet></ROW><ROW><id>8413288</id><snippet>__slots__</snippet></ROW><ROW><id>8413288</id><snippet>@property</snippet></ROW><ROW><id>8413288</id><snippet>property()</snippet></ROW><ROW><id>8413368</id><snippet>collections.namedtuple</snippet></ROW><ROW><id>8413374</id><snippet>subprocess.Popen(["C:\\Program Files\Microsoft Office\Office12\winword.exe", "P:\\docs\\daily checks.doc", "/mFilePrintDefault", "/mFileExit"]).communicate()
</snippet></ROW><ROW><id>8413374</id><snippet>subprocess.Popen("'C:\\Program Files\Microsoft Office\Office12\winword.exe' 'P:\\docs\\daily checks.doc' /mFilePrintDefault /mFileExit", shell=True).communicate()
</snippet></ROW><ROW><id>8413374</id><snippet>shell=True</snippet></ROW><ROW><id>8413374</id><snippet>shell=False</snippet></ROW><ROW><id>8413725</id><snippet>la["text"] = e.get()
</snippet></ROW><ROW><id>8413751</id><snippet>input()</snippet></ROW><ROW><id>8413751</id><snippet>$ cat input27.py 
#!/usr/bin/python2.7
data = input("")

for l in data.split("\n"):
    print(l)
$ cat input32.py 
#!/usr/bin/python3.2
data = input("")

for l in data.split("\n"):
    print(l)
$ ./input27.py &lt; names.txt 
Traceback (most recent call last):
  File "./input27.py", line 2, in &lt;module&gt;
    data = input("")
  File "&lt;string&gt;", line 1
    Victor Bertha Amy Diane Erika Clare
                ^
SyntaxError: invalid syntax
$ ./input32.py &lt; names.txt 
Victor Bertha Amy Diane Erika Clare
$ 
</snippet></ROW><ROW><id>8413751</id><snippet>names.txt</snippet></ROW><ROW><id>8413751</id><snippet>input()</snippet></ROW><ROW><id>8413751</id><snippet>for line in file:</snippet></ROW><ROW><id>8413751</id><snippet>$ cat fixed_input27.py 
#!/usr/bin/python2.7

import sys

for line in sys.stdin:
    print(line.split()[0])
$ cat fixed_input32.py 
#!/usr/bin/python3.2

import sys

for line in sys.stdin:
    print(line.split()[0])
$ ./fixed_input27.py &lt; names.txt 
Victor
Wyatt
Xavier
Yancey
Zeus
Amy
Bertha
Clare
Diane
Erika
$ ./fixed_input32.py &lt; names.txt 
Victor
Wyatt
Xavier
Yancey
Zeus
Amy
Bertha
Clare
Diane
Erika
$ 
</snippet></ROW><ROW><id>8413751</id><snippet>names.txt</snippet></ROW><ROW><id>8413751</id><snippet>input()</snippet></ROW><ROW><id>8413751</id><snippet>input()</snippet></ROW><ROW><id>8413751</id><snippet>eval</snippet></ROW><ROW><id>8413751</id><snippet>for l in sys.stdin:</snippet></ROW><ROW><id>8413751</id><snippet>$ ./GS.py 
Victor Bertha Amy Diane Erika Clare
Wyatt Diane Bertha Amy Clare Erika
Xavier Bertha Erika Clare Diane Amy
Yancey Amy Diane Clare Bertha Erika
Zeus Bertha Diane Amy Erika Clare

Amy Zeus Victor Wyatt Yancey Xavier
Bertha Xavier Wyatt Yancey Victor Zeus
Clare Wyatt Xavier Yancey Zeus Victor
Diane Victor Zeus Yancey Xavier Wyatt
Erika Yancey Wyatt Zeus Xavier Victor

Wyatt Clare
Xavier Bertha
Yancey Erika
Zeus Diane
Victor Amy
$ cat GS.py 
#!/usr/bin/python3.2

if __name__ == "__main__":
    import sys

    ## Data Dictionary

    ''' Name : Preferences '''
    men = dict()
    women = dict()

    ''' List of unmatched men '''
    freeMen = list()

    ''' Name : How far down in preferences '''
    count = dict()

    ''' Name : Current Match '''
    wife = dict()
    husband = dict()

    ## Reading Input
    readingMen = True
    for l in sys.stdin:
        line = l.split()
        if len(line) &gt; 1:
            newPerson = line[0]
            newPersonPreferences = list()
            for i in range(1,len(line)):
                newPersonPreferences.append(line[i])
            if readingMen:
                men[newPerson] = newPersonPreferences
                wife[newPerson] = 0
                count[newPerson] = 0
                freeMen.append(newPerson)
            else:
                women[newPerson] = newPersonPreferences
                husband[newPerson] = 0
        elif len(line) == 1:
            raise IOError(l + "\nis an invalid line.")
        else:
            readingMen = False

    ## Proposing
    while len(freeMen) != 0:
        m = freeMen[0]
        w = men[m][count[m]]
        count[m] += 1
        if husband[w] == 0:
            husband[w] = m
            wife[m] = w
            freeMen.remove(m)
        else:
            try:
                if women[w].index(husband[w], women[w].index(m)):
                    freeMen.append(husband[w])
                    wife[husband[w]] = 0
                    husband[w] = m
                    wife[m] = w
                    freeMen.remove(m)
            except ValueError:
                pass

    ## Match Printing
    print()
    for m in wife:
        print(m, wife[m])

$ 
</snippet></ROW><ROW><id>8413751</id><snippet>^D</snippet></ROW><ROW><id>8413751</id><snippet>./GS.py &lt; names.txt</snippet></ROW><ROW><id>8413751</id><snippet>^D</snippet></ROW><ROW><id>8414134</id><snippet>data = [dict(itertools.izip(headers, entries) for entries in values]
</snippet></ROW><ROW><id>8414457</id><snippet>mac1 = 0x1122334455
mac2 = 0x1122334695
for i in xrange(mac1, mac2+1):
    s = "%012x" % i
    print ':'.join(s[j:j+2] for j in range(0,12,2)))
</snippet></ROW><ROW><id>8414690</id><snippet>mmap</snippet></ROW><ROW><id>8414858</id><snippet>__getitem__</snippet></ROW><ROW><id>8414858</id><snippet>class EvalGlobalsDict(dict):
    def __getitem__(self, name):
        return self.get(name, name)

foo = 1337
eval_globals = EvalGlobalsDict(globals())
print repr(eval("aaa", eval_globals))
print repr(eval("foo", eval_globals))
</snippet></ROW><ROW><id>8414858</id><snippet>&gt; 'aaa'
&gt; 1337
</snippet></ROW><ROW><id>8415985</id><snippet>dict</snippet></ROW><ROW><id>8415985</id><snippet>&gt;&gt;&gt; class Foo(object):
...     def __init__(self, value):
...         self.value = value
... 
...     def __eq__(self, other):
...         return self.value == other.value
... 
</snippet></ROW><ROW><id>8415985</id><snippet>&gt;&gt;&gt; f1 = Foo(5)
&gt;&gt;&gt; f2 = Foo(5)
&gt;&gt;&gt; f1 == f2
True
&gt;&gt;&gt; d1 = {f1: 6}
&gt;&gt;&gt; d2 = {f2: 6}
&gt;&gt;&gt; d1.items() == d2.items()
True
&gt;&gt;&gt; d1 == d2
False
</snippet></ROW><ROW><id>8415985</id><snippet>__hash__</snippet></ROW><ROW><id>8415985</id><snippet>__hash__</snippet></ROW><ROW><id>8415985</id><snippet>dict</snippet></ROW><ROW><id>8415985</id><snippet>object</snippet></ROW><ROW><id>8415985</id><snippet>__eq__</snippet></ROW><ROW><id>8415985</id><snippet>__hash__</snippet></ROW><ROW><id>8415985</id><snippet>__eq__</snippet></ROW><ROW><id>8415985</id><snippet>__hash__</snippet></ROW><ROW><id>8415985</id><snippet>dict</snippet></ROW><ROW><id>8415985</id><snippet>__hash__</snippet></ROW><ROW><id>8415985</id><snippet>&gt;&gt;&gt; class Bar(object):
...     def __init__(self, value):
...         self.value = value
... 
...     def __eq__(self, other):
...         return self.value == other.value
... 
...     def __hash__(self):
...         return hash((Bar, self.value))
... 
&gt;&gt;&gt; b1 = Bar(5)
&gt;&gt;&gt; b2 = Bar(5)
&gt;&gt;&gt; {b1: 6} == {b2: 6}
True
&gt;&gt;&gt; 
</snippet></ROW><ROW><id>8415985</id><snippet>__hash__</snippet></ROW><ROW><id>8416031</id><snippet>entry.rating</snippet></ROW><ROW><id>8416031</id><snippet>entry.rating.average</snippet></ROW><ROW><id>8416031</id><snippet>entry.rating.num_raters</snippet></ROW><ROW><id>8416398</id><snippet>import os
path="/root/Desktop"
dirList=os.listdir(path)
for i in range(0,len(dirList)): # generate an index an loop over it
    print "%d)" % (i+1), dirList[i] # print a selection number matching each file

selected = raw_input("Select a file above: ")
selected = int(selected) # cast the input to int

print "You have selected:", dirList[selected-1] # you can get the corresponding entry!
</snippet></ROW><ROW><id>8417134</id><snippet>TreeViewColumn</snippet></ROW><ROW><id>8417134</id><snippet>ListStore</snippet></ROW><ROW><id>8417134</id><snippet>CellRenderer</snippet></ROW><ROW><id>8417134</id><snippet>TreeView</snippet></ROW><ROW><id>8417134</id><snippet>Edit</snippet></ROW><ROW><id>8417181</id><snippet>import paramiko
ssh = paramiko.SSHClient()

ssh.set_missing_host_key_policy(paramiko.AutoAddPolicy())

ssh.connect('&lt;hostname&gt;', username='&lt;username&gt;', password='&lt;password&gt;', key_filename='&lt;path/to/openssh-private-key-file&gt;')

stdin, stdout, stderr = ssh.exec_command('ls')
print stdout.readlines()
ssh.close()
</snippet></ROW><ROW><id>8417267</id><snippet> print (words3)
</snippet></ROW><ROW><id>8417267</id><snippet>words3</snippet></ROW><ROW><id>8417267</id><snippet>itertools.izip</snippet></ROW><ROW><id>8417267</id><snippet>print(list(words3))
</snippet></ROW><ROW><id>8417267</id><snippet>for w in words3:
    print 3
</snippet></ROW><ROW><id>8417555</id><snippet>def tfact(n,acc=1):
    if n&lt;=1: return acc
    else: return tfact(n-1,acc*n)
</snippet></ROW><ROW><id>8417555</id><snippet>def ifact(n):
    stack = []
    while True:
        if n==1:
            while stack:
                n *= stack.pop()
            break
        else:
            stack.append(n)
            n -= 1
    return n 
</snippet></ROW><ROW><id>8417575</id><snippet>re.match</snippet></ROW><ROW><id>8417575</id><snippet>'[A-Za-z0-9-_]*'</snippet></ROW><ROW><id>8418011</id><snippet>sudo port install py27-serial</snippet></ROW><ROW><id>8418165</id><snippet>class StateManager(threading.Thread):
    def __init__(self, lock, state):
        threading.Thread.__init__(self)
        self.lock = lock
        self.state = state            

    def run(self):
        lock = self.lock
        state = self.state
        while True:
            lock.acquire()
            self.updateState(state)
            lock.release()
            time.sleep(60)
</snippet></ROW><ROW><id>8418299</id><snippet>exec_command()</snippet></ROW><ROW><id>8418299</id><snippet>invoke_shell</snippet></ROW><ROW><id>8418299</id><snippet>sudo</snippet></ROW><ROW><id>8418299</id><snippet>su -c</snippet></ROW><ROW><id>8418359</id><snippet>if x and y: # logical operation
   ...
z = z &amp; 0xFF # bitwise operation
</snippet></ROW><ROW><id>8418379</id><snippet>perl -ne 'if (/#region/../#endregion/) {print if /#(?:end)?region/;next};print' file
</snippet></ROW><ROW><id>8418437</id><snippet>grep</snippet></ROW><ROW><id>8418437</id><snippet>tail -f | grep ... | some_other_prog</snippet></ROW><ROW><id>8418437</id><snippet>grep</snippet></ROW><ROW><id>8418437</id><snippet>--line-buffered</snippet></ROW><ROW><id>8418437</id><snippet>% tail -f data.txt | grep -e APL --line-buffered | test.py
APL

APL

APL
</snippet></ROW><ROW><id>8418437</id><snippet>test.py</snippet></ROW><ROW><id>8418437</id><snippet>import sys
for line in sys.stdin:
    print(line)
</snippet></ROW><ROW><id>8418928</id><snippet>ax.set_aspect(1)</snippet></ROW><ROW><id>8418928</id><snippet>ax.axis('equal')</snippet></ROW><ROW><id>8418928</id><snippet>plt.axis('equal')</snippet></ROW><ROW><id>8418928</id><snippet>ax.axis('equal')</snippet></ROW><ROW><id>8419306</id><snippet>import urllib  
url = 'http://maps.googleapis.com/maps/api/geocode/json' + \
        '?latlng={},{}&amp;sensor=false'.format(entity.geopt.lat, entity.geopt.lon)
logging.info('url%s' % url)
jsondata = json.load(urllib.urlopen(url))
</snippet></ROW><ROW><id>8419306</id><snippet>from google.appengine.api import urlfetch
result = urlfetch.fetch(url)
jsondata = json.loads(result.content)
</snippet></ROW><ROW><id>8419427</id><snippet>x[k]</snippet></ROW><ROW><id>8419427</id><snippet>k</snippet></ROW><ROW><id>8419427</id><snippet>v=x[k]</snippet></ROW><ROW><id>8419427</id><snippet>(k,0)</snippet></ROW><ROW><id>8419427</id><snippet>x[k]=0</snippet></ROW><ROW><id>8419427</id><snippet>x = defaultdict(int)
</snippet></ROW><ROW><id>8419427</id><snippet>y</snippet></ROW><ROW><id>8419427</id><snippet>y["ham"]["spam"]</snippet></ROW><ROW><id>8419427</id><snippet>"ham"</snippet></ROW><ROW><id>8419427</id><snippet>y</snippet></ROW><ROW><id>8419427</id><snippet>defaultdict</snippet></ROW><ROW><id>8419427</id><snippet>"spam"</snippet></ROW><ROW><id>8419427</id><snippet>0</snippet></ROW><ROW><id>8419427</id><snippet>y</snippet></ROW><ROW><id>8419427</id><snippet>defaultdict</snippet></ROW><ROW><id>8419427</id><snippet>"ham" not in y</snippet></ROW><ROW><id>8419427</id><snippet>y["ham"]["spam"]</snippet></ROW><ROW><id>8419427</id><snippet>y["ham"] = {}
y["ham"]["spam"] = 0
</snippet></ROW><ROW><id>8419427</id><snippet>dict</snippet></ROW><ROW><id>8419655</id><snippet>-</snippet></ROW><ROW><id>8419655</id><snippet>datetime</snippet></ROW><ROW><id>8419655</id><snippet>days</snippet></ROW><ROW><id>8419655</id><snippet>from datetime import datetime

def days_between(d1, d2):
    d1 = datetime.strptime(d1, "%Y-%m-%d")
    d2 = datetime.strptime(d2, "%Y-%m-%d")
    return abs((d2 - d1).days)
</snippet></ROW><ROW><id>8419853</id><snippet>map(int, your_list)
</snippet></ROW><ROW><id>8419853</id><snippet>[int(value) for value in your_list]
</snippet></ROW><ROW><id>8419853</id><snippet>print('[' + ', '.join(your_list) + ']')
</snippet></ROW><ROW><id>8419892</id><snippet>import urllib
tlds = urllib.urlopen("http://data.iana.org/TLD/tlds-alpha-by-domain.txt").readlines()
</snippet></ROW><ROW><id>8420179</id><snippet>id</snippet></ROW><ROW><id>8420179</id><snippet>#!/usr/bin/python

import os,sys
from scipy import stats
import numpy as np

f=open('data2.txt', 'r').readlines()
N=len(f)-1
for i in range(0,N):
    w=f[i].split()
    l1=w[1:8]
    l2=w[8:15]
    try:
        list1=[float(x) for x in l1]
        list2=[float(x) for x in l2]
    except ValueError,e:
        print "error",e,"on line",i
    result=stats.ttest_ind(list1,list2)
    print result[1]
</snippet></ROW><ROW><id>8420498</id><snippet>with</snippet></ROW><ROW><id>8420498</id><snippet>#!/usr/bin/env python2.7
import time, threading

class Ticker(threading.Thread):
  """A very simple thread that merely blocks for :attr:`interval` and sets a
  :class:`threading.Event` when the :attr:`interval` has elapsed. It then waits
  for the caller to unset this event before looping again.

  Example use::

    t = Ticker(1.0) # make a ticker
    t.start() # start the ticker in a new thread
    try:
      while t.evt.wait(): # hang out til the time has elapsed
        t.evt.clear() # tell the ticker to loop again
        print time.time(), "FIRING!"
    except:
      t.stop() # tell the thread to stop
      t.join() # wait til the thread actually dies

  """
  # SIGALRM based timing proved to be unreliable on various python installs,
  # so we use a simple thread that blocks on sleep and sets a threading.Event
  # when the timer expires, it does this forever.
  def __init__(self, interval):
    super(Ticker, self).__init__()
    self.interval = interval
    self.evt = threading.Event()
    self.evt.clear()
    self.should_run = threading.Event()
    self.should_run.set()

  def stop(self):
    """Stop the this thread. You probably want to call :meth:`join` immediately
    afterwards
    """
    self.should_run.clear()

  def consume(self):
    was_set = self.evt.is_set()
    if was_set:
      self.evt.clear()
    return was_set

  def run(self):
    """The internal main method of this thread. Block for :attr:`interval`
    seconds before setting :attr:`Ticker.evt`

    .. warning::
      Do not call this directly!  Instead call :meth:`start`.
    """
    while self.should_run.is_set():
      time.sleep(self.interval)
      self.evt.set()
</snippet></ROW><ROW><id>8420696</id><snippet>from urllib2 import urlopen
from lxml import etree

url = 'http://www.uscho.com/standings/division-i-men/2011-2012/'

tree = etree.HTML(urlopen(url).read())

for section in tree.xpath('//section[starts-with(@id, "section_")]'):
    print section.xpath('h3[1]/text()')[0]
    for row in section.xpath('table/tbody/tr'):
        cols = row.xpath('td//text()')
        print '  ', cols[0].ljust(25), ' '.join(cols[1:])
    print
</snippet></ROW><ROW><id>8420696</id><snippet>Atlantic Hockey
   Air Force                 8 2 1 .773 17 40-26 9 4 2 .667 53-36 6 0 1 3 3 1
   Mercyhurst                6 1 2 .778 14 21-15 7 7 2 .500 36-49 5 1 1 2 4 1
   RIT                       5 3 2 .600 12 24-20 6 5 2 .538 30-32 5 2 2 1 3 0
   Robert Morris             5 2 1 .688 11 31-20 7 6 1 .536 44-43 3 2 1 3 3 0
   Bentley                   4 3 2 .556 10 25-18 4 8 3 .367 35-43 1 2 2 3 6 1
   Canisius                  4 3 2 .556 10 16-17 4 8 3 .367 23-41 2 2 1 2 6 2
   Holy Cross                5 4 0 .556 10 28-26 7 7 0 .500 40-47 5 1 0 2 6 0
   Niagara                   3 2 4 .556 10 25-22 4 5 5 .464 36-39 1 2 2 3 3 3
   Connecticut               4 5 1 .450 9 30-24 5 8 2 .400 41-42 3 1 0 1 7 2
   American International    2 7 2 .273 6 24-36 3 12 2 .235 35-58 1 4 2 2 8 0
   Army                      1 5 4 .300 6 20-33 1 7 6 .286 26-47 0 4 2 1 3 3
   Sacred Heart              0 10 1 .045 1 30-57 1 14 1 .094 39-86 0 5 1 0 9 0

CCHA
   Ohio State                9 2 1 1 .792 29 42-26 12 3 1 .781 53-31 6 1 1 6 2 0
   Notre Dame                7 2 3 0 .708 24 36-28 10 5 3 .639 55-50 6 3 0 4 2 3
   Western Michigan          6 4 2 2 .583 22 33-28 8 4 4 .625 49-34 5 2 1 3 2 3
   Lake Superior             6 5 1 1 .542 20 31-32 10 6 2 .611 46-43 5 3 0 5 3 2
   Ferris State              6 5 1 0 .542 19 28-27 10 5 1 .656 43-30 5 1 1 5 4 0
   Michigan State            6 4 0 0 .600 18 32-23 10 5 1 .656 56-41 6 1 1 3 3 0
   Northern Michigan         4 5 3 2 .458 17 28-31 7 6 3 .531 41-40 6 1 3 1 5 0
   Miami                     4 6 2 1 .417 15 26-31 8 8 2 .500 48-48 3 3 2 4 5 0
   Michigan                  4 6 2 1 .417 15 36-32 8 8 2 .500 64-47 7 5 0 1 3 2
   Alaska                    4 8 2 0 .357 14 26-33 7 9 2 .444 39-41 4 5 1 2 3 1
   Bowling Green             1 10 1 1 .125 5 14-41 6 10 2 .389 32-49 3 6 1 3 4 1

D-I Independent
   Alabama-Huntsville        0 0 0 .000 0 - 1 15 1 .088 16-67 1 8 1 0 7 0

ECAC
   Cornell                   6 1 1 .812 13 26-11 7 3 1 .682 32-18 4 1 1 3 1 0
   Colgate                   6 2 0 .750 12 28-15 11 4 1 .719 55-36 5 2 0 5 2 0
   Clarkson                  3 4 2 .444 8 19-18 9 6 4 .579 55-37 6 2 0 3 3 4
   St. Lawrence              4 5 0 .444 8 16-22 5 10 0 .333 31-52 3 6 0 2 4 0
   Union                     3 2 2 .571 8 16-13 7 3 5 .633 49-29 1 2 2 6 1 3
   Yale                      4 2 0 .667 8 19-15 6 4 1 .591 36-31 3 2 0 3 1 0
   Dartmouth                 3 3 1 .500 7 18-22 4 5 1 .450 24-30 3 3 1 1 2 0
   Princeton                 3 5 1 .389 7 23-30 4 7 2 .385 30-39 2 2 1 1 4 0
   Quinnipiac                2 4 3 .389 7 18-22 9 6 3 .583 57-40 6 1 2 3 5 1
   Brown                     3 3 0 .500 6 19-20 4 6 1 .409 24-30 2 2 0 1 4 1
   Harvard                   2 3 2 .429 6 20-21 3 3 3 .500 31-31 2 2 1 1 1 2
   Rensselaer                1 6 0 .143 2 8-21 3 12 0 .200 18-42 2 5 0 1 7 0

Hockey East
   Boston College            9 3 0 .750 18 45-29 12 5 0 .706 63-42 5 3 0 6 2 0
   Boston University         6 4 1 .591 13 37-34 8 5 1 .607 47-43 5 3 0 2 2 1
   Merrimack                 6 2 1 .722 13 23-18 9 2 1 .792 37-20 4 1 1 5 1 0
   Massachusetts-Lowell      6 3 0 .667 12 33-27 9 4 0 .692 46-33 4 1 0 5 2 0
   Providence                6 4 0 .600 12 37-29 8 7 1 .531 51-47 7 2 1 1 3 0
   Maine                     5 5 1 .500 11 37-35 6 6 2 .500 45-44 4 3 0 2 3 2
   New Hampshire             4 6 1 .409 9 31-37 6 8 2 .438 56-56 6 2 0 0 6 2
   Northeastern              3 7 2 .333 8 31-35 6 7 2 .467 46-39 2 2 1 4 5 1
   Massachusetts             2 6 3 .318 7 29-39 4 7 4 .400 47-52 4 0 3 0 7 1
   Vermont                   1 8 1 .150 3 22-42 3 10 1 .250 33-59 2 5 1 1 5 0

WCHA
   Minnesota                 10 2 0 .833 20 43-23 13 4 1 .750 75-36 8 1 0 5 3 1
   Minnesota-Duluth          9 2 1 .792 19 52-27 11 3 2 .750 66-39 7 3 0 4 0 2
   Nebraska-Omaha            6 3 3 .625 15 44-41 8 7 3 .528 60-58 5 2 1 3 4 2
   Colorado College          6 4 0 .600 12 44-36 8 4 0 .667 52-38 5 0 0 3 4 0
   North Dakota              6 6 0 .500 12 37-35 8 7 1 .531 49-48 5 2 1 3 5 0
   Denver                    4 3 3 .550 11 39-34 6 5 3 .536 51-44 5 2 2 1 3 1
   Michigan Tech             5 6 1 .458 11 36-35 8 7 1 .531 48-43 6 3 1 2 4 0
   St. Cloud State           4 5 3 .458 11 36-37 6 8 4 .444 57-58 3 1 3 2 7 1
   Bemidji State             4 6 2 .417 10 32-42 6 8 2 .438 43-52 3 2 1 3 6 1
   Wisconsin                 4 7 1 .375 9 35-43 7 8 1 .469 52-52 7 3 0 0 5 1
   Alaska-Anchorage          2 9 1 .208 5 20-47 5 9 2 .375 37-56 2 5 1 1 4 1
   Minnesota State           2 9 1 .208 5 34-52 3 12 1 .219 39-64 1 4 1 2 8 0
</snippet></ROW><ROW><id>8420817</id><snippet>apt</snippet></ROW><ROW><id>8421045</id><snippet>for x, y in zip(a, b):
    if x &gt; y:
        z = calculate_z(x, y)
        if y - z &lt; x:
            y = min(y, z)
            if x ** 2 - y ** 2 &gt; 0:
                lots()
                of()
                code()
                here()
</snippet></ROW><ROW><id>8421045</id><snippet>for x, y in zip(a, b):
    if x &lt;= y:
        continue
    z = calculate_z(x, y)
    if y - z &gt;= x:
        continue
    y = min(y, z)
    if x ** 2 - y ** 2 &lt;= 0:
        continue
    lots()
    of()
    code()
    here()
</snippet></ROW><ROW><id>8421231</id><snippet># Add auto-completion and a stored history file of commands to your Python
# interactive interpreter. Requires Python 2.0+, readline. Autocomplete is
# bound to the Esc key by default (you can change it - see readline docs).
#
# Store the file in ~/.pystartup, and set an environment variable to point
# to it:  "export PYTHONSTARTUP=/home/user/.pystartup" in bash.
#
# Note that PYTHONSTARTUP does *not* expand "~", so you have to put in the
# full path to your home directory.

import atexit
import os
import readline
import rlcompleter

historyPath = os.path.expanduser("~/.pyhistory")

def save_history(historyPath=historyPath):
    import readline
    readline.write_history_file(historyPath)

if os.path.exists(historyPath):
    readline.read_history_file(historyPath)

atexit.register(save_history)
del os, atexit, readline, rlcompleter, save_history, historyPath
</snippet></ROW><ROW><id>8421231</id><snippet>readline.parse_and_bind('tab: complete')
</snippet></ROW><ROW><id>8421414</id><snippet>repr</snippet></ROW><ROW><id>8421414</id><snippet>repr</snippet></ROW><ROW><id>8421414</id><snippet>hex(id(somefun))</snippet></ROW><ROW><id>8421414</id><snippet>id</snippet></ROW><ROW><id>8421484</id><snippet>original = [[1, 2],
            [3, 4]]
</snippet></ROW><ROW><id>8421484</id><snippet>&gt;&gt;&gt; original[::-1]   # elements of original are reversed
[[3, 4], [1, 2]]
</snippet></ROW><ROW><id>8421484</id><snippet>zip()</snippet></ROW><ROW><id>8421484</id><snippet>zip</snippet></ROW><ROW><id>8421484</id><snippet>zip([3, 4],
    [1, 2])
#    ^  ^----column 2
#    |-------column 1
# returns [(3, 1), (4, 2)], which is a original rotated clockwise
</snippet></ROW><ROW><id>8421484</id><snippet>zip</snippet></ROW><ROW><id>8421524</id><snippet>foo/&lt;slug&gt;/bar/</snippet></ROW><ROW><id>8421540</id><snippet>status</snippet></ROW><ROW><id>8421540</id><snippet>\x00\x83\x00\x0d\x00\x00\x00\x00\x00\x00?status\x00</snippet></ROW><ROW><id>8421540</id><snippet>import socket, struct

host,port = 'baystation12.net', 8000
s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
s.connect((host, port))

senddata = "?status"
query  = '\x00\x83' + struct.pack("&gt;H", len(senddata)+6) + '\x00'*5 + senddata + '\x00'
s.send(query)

data = s.recv(1024)
print `data`
</snippet></ROW><ROW><id>8421540</id><snippet>'\x00\x83\x00\xe9\x06version=Baystation+12&amp;mode=traitor&amp;respawn=0&amp;enter=1&amp;vote=1&amp;ai=1&amp;host&amp;players=7&amp;player0=Kosherman&amp;player1=Ghazkull&amp;player2=Doug+H.+Nuts&amp;player3=Lord+Braindead&amp;player4=KirbyElder&amp;player5=Master+of+Apples&amp;player6=Cacophony&amp;end=%23end\x00'
</snippet></ROW><ROW><id>8421543</id><snippet>class ClassA(object):
    pass

o = ClassA()
mytype = type(o)
new_object = mytype()
</snippet></ROW><ROW><id>8421755</id><snippet>// events.py
class Events:
    eOne, eTwo, eThree = range(3)

def getEvent():
    # add code for getEvent here (might have been in events.c for C code)
    return some_event
</snippet></ROW><ROW><id>8421755</id><snippet>// ctrl.py
from events import Events, getEvent
def ctrl():
    event = getEvent()
    if event == Events.eOne:
        # ...
    elif event == Events.eTwo:
        # ...
    elif event == Events.eThree:
        # ...
    else:
        # default
</snippet></ROW><ROW><id>8421879</id><snippet>beautifulsoup</snippet></ROW><ROW><id>8421879</id><snippet>urls</snippet></ROW><ROW><id>8421879</id><snippet>urls = open('&lt;your-filename-here&gt;').readlines()
</snippet></ROW><ROW><id>8421879</id><snippet># extract video ids from the urls
ids = []
for video_url in urls:
    url = urlparse.urlparse(video_url)
    video_id = urlparse.parse_qs(url.query).get('v')
    if not video_id: continue # no video_id in the url
    ids.append(video_id[0])
</snippet></ROW><ROW><id>8422055</id><snippet>from re import sub
from decimal import Decimal

money = '$6,150,593.22'
value = Decimal(sub(r'[^\d.]', '', money))
</snippet></ROW><ROW><id>8422055</id><snippet>Decimal</snippet></ROW><ROW><id>8422055</id><snippet>float</snippet></ROW><ROW><id>8422320</id><snippet>split()</snippet></ROW><ROW><id>8422320</id><snippet>tgs</snippet></ROW><ROW><id>8422320</id><snippet>Quote</snippet></ROW><ROW><id>8422320</id><snippet>split</snippet></ROW><ROW><id>8422320</id><snippet>...
tgs = self.request.get('tags').split()
newq = Quote(user = self.session['userkey'], text=msg, tags= tgs)
...
</snippet></ROW><ROW><id>8422535</id><snippet>appcfg.py request_logs appid/ appidlogs.txt
</snippet></ROW><ROW><id>8422761</id><snippet>urls = ['http://www.youtube.com/watch?v=_wmD3M-BfVo']
</snippet></ROW><ROW><id>8423033</id><snippet>d = { t[0]:t[1:] for t in arr }
</snippet></ROW><ROW><id>8423212</id><snippet>mean</snippet></ROW><ROW><id>8423212</id><snippet>mean</snippet></ROW><ROW><id>8423212</id><snippet>newaxis</snippet></ROW><ROW><id>8423212</id><snippet>mean</snippet></ROW><ROW><id>8423212</id><snippet>A</snippet></ROW><ROW><id>8423212</id><snippet>import numpy as np

A = np.array([[1,2,3], [4,5,6], [7,8,9], [10, 11, 12]])
mean = A.mean(axis=1)
</snippet></ROW><ROW><id>8423212</id><snippet>numpy.newaxis</snippet></ROW><ROW><id>8423212</id><snippet>&gt;&gt;&gt; A - mean[:, np.newaxis]
array([[-1.,  0.,  1.],
       [-1.,  0.,  1.],
       [-1.,  0.,  1.],
       [-1.,  0.,  1.]])
</snippet></ROW><ROW><id>8423212</id><snippet>None</snippet></ROW><ROW><id>8423212</id><snippet>None</snippet></ROW><ROW><id>8423212</id><snippet>newaxis</snippet></ROW><ROW><id>8423212</id><snippet>&gt;&gt;&gt; np.newaxis is None
True
</snippet></ROW><ROW><id>8423212</id><snippet>&gt;&gt;&gt; A - mean[:, None]
array([[-1.,  0.,  1.],
       [-1.,  0.,  1.],
       [-1.,  0.,  1.],
       [-1.,  0.,  1.]])
</snippet></ROW><ROW><id>8423212</id><snippet>newaxis</snippet></ROW><ROW><id>8423212</id><snippet>newaxis</snippet></ROW><ROW><id>8423212</id><snippet>ndarray.reshape</snippet></ROW><ROW><id>8423212</id><snippet>&gt;&gt;&gt; A - mean.reshape((mean.shape[0]), 1)
array([[-1.,  0.,  1.],
       [-1.,  0.,  1.],
       [-1.,  0.,  1.],
       [-1.,  0.,  1.]])
</snippet></ROW><ROW><id>8423212</id><snippet>ndarray.shape</snippet></ROW><ROW><id>8423212</id><snippet>mean</snippet></ROW><ROW><id>8423212</id><snippet>&gt;&gt;&gt; mean.shape = (mean.shape[0], 1)
&gt;&gt;&gt; A - mean
array([[-1.,  0.,  1.],
       [-1.,  0.,  1.],
       [-1.,  0.,  1.],
       [-1.,  0.,  1.]])
</snippet></ROW><ROW><id>8423389</id><snippet>seed()</snippet></ROW><ROW><id>8423389</id><snippet>seed()</snippet></ROW><ROW><id>8423389</id><snippet>random</snippet></ROW><ROW><id>8423389</id><snippet>random.Random</snippet></ROW><ROW><id>8423389</id><snippet>seed()</snippet></ROW><ROW><id>8423389</id><snippet>__init__()</snippet></ROW><ROW><id>8423389</id><snippet>choice()</snippet></ROW><ROW><id>8423389</id><snippet>seed()</snippet></ROW><ROW><id>8423996</id><snippet>some_var = 'default' if other_var is None else other_var
</snippet></ROW><ROW><id>8424052</id><snippet>import argparse

parser = argparse.ArgumentParser(description='SO test.')
parser.add_argument('--doh', action='store_true')
parser.add_argument('files', nargs='*')  # This is it!!
args = parser.parse_args()
print(args.doh)
print(args.files)
</snippet></ROW><ROW><id>8424052</id><snippet>nargs ='*'</snippet></ROW><ROW><id>8424052</id><snippet>$ ./p.py --doh *.py
True
['p2.py', 'p.py']
$ ./p.py *.py
False
['p2.py', 'p.py']
$ ./p.py p.py
False
['p.py']
$ ./p.py 
False
[]
</snippet></ROW><ROW><id>8424089</id><snippet>qres = g.query(
    """SELECT ?x ?z ?y
        WHERE {
           """+some_uri+""" course:termName ?x.
           """+some_uri+""" ?s ?t.
           ?s ?d ?z.
           ?t course:termName ?y.
           FILTER (regex(?z,"[^a-z]","i") &amp;&amp; isLiteral(?z) )
        }"""
        ,initNs=dict(course=Namespace.....
</snippet></ROW><ROW><id>8424089</id><snippet>qres = g.query(
    """SELECT ?newVar ?x ?z ?y
        WHERE {
           ?newVar course:termName ?x.
           ?newVar ?s ?t.
           ?s ?d ?z.
           ?t course:termName ?y.
           FILTER (regex(?z,"[^a-z]","i") &amp;&amp; isLiteral(?z) )
        }"""
        ,initNs=dict(course=Namespace.....
</snippet></ROW><ROW><id>8424089</id><snippet>q = """SELECT ?x ?z ?y
        WHERE {
           course:%s course:termName ?x;
                  ?s ?t.
           ?s ?d ?z.
           ?t course:termName ?y.
           FILTER (regex(?z,'[^a-z0-9]','i') &amp;&amp; isLiteral(?z) )
        }ORDER BY ASC(?s)
        """%var_value
</snippet></ROW><ROW><id>8424089</id><snippet>;</snippet></ROW><ROW><id>8424089</id><snippet>?s ?d ?z</snippet></ROW><ROW><id>8424334</id><snippet>def to_json(obj):
    return json.dumps(dict((c, getattr(obj, c)) for c in obj.sqlmeta.columns))
</snippet></ROW><ROW><id>8424334</id><snippet>Foo</snippet></ROW><ROW><id>8424334</id><snippet>&gt;&gt;&gt; print to_json(f)
{"bar": "test", "lulz": "only for the", "baz": true}
</snippet></ROW><ROW><id>8424334</id><snippet>foo</snippet></ROW><ROW><id>8424334</id><snippet>class Foo(SQLObject):
    bar = UnicodeCol(length=128)
    baz = BoolCol(default=True)
    lulz = UnicodeCol(length=256)

    def _get_foo(self):
        return "foo"
</snippet></ROW><ROW><id>8424334</id><snippet>to_json()</snippet></ROW><ROW><id>8424334</id><snippet>def to_json(obj):
    cls = type(obj)
    d = dict((c, getattr(obj, c)) for c in vars(cls) if isinstance(getattr(cls, c), property))
    return json.dumps(d)
</snippet></ROW><ROW><id>8424334</id><snippet>f = Foo(bar = "test", lulz = "only for the")
print to_json(f)
</snippet></ROW><ROW><id>8424334</id><snippet>{"baz": true, "lulz": "only for the", "bar": "test", "foo": "foo"}
</snippet></ROW><ROW><id>8424403</id><snippet>class Demo:
    def __init__(self):
       self.__snooze_time = None
       self.window = gtk.Window()
       self.window.connect("destroy", gtk.main_quit)
       self.button = gtk.Button(stock = gtk.STOCK_SAVE)

       self.button.connect("clicked", self.run, window, snooze_time_entry)
    def run(self, widget, event, data):
       try: 
          self.__snooze_time = int(data.get_text()) 
       except ValueError: 
          snooze_time = 5
</snippet></ROW><ROW><id>8424504</id><snippet>ansi_codes = re.compile('\033\[[0-9;]+m')
def strip_ansi(with_ansi):
    return ansi_codes.sub('', with_ansi)
</snippet></ROW><ROW><id>8424504</id><snippet>strip_ansi(child.before)
</snippet></ROW><ROW><id>8424563</id><snippet>from email.parser import HeaderParser
parser = HeaderParser()
h = parser.parsestr(email)

print h.keys()
</snippet></ROW><ROW><id>8424563</id><snippet>headers.items()</snippet></ROW><ROW><id>8424577</id><snippet>num1 = 0.04154721841
num2 = 10.04154721841
num3 = 1002.04154721841

print "{0:&lt;12.11g}".format(num1)[:12]
print "{0:&lt;12.11g}".format(num2)[:12]
print "{0:&lt;12.11g}".format(num3)[:12]
</snippet></ROW><ROW><id>8424577</id><snippet>0.0415472184
10.041547218
1002.0415472
</snippet></ROW><ROW><id>8424577</id><snippet>str.format</snippet></ROW><ROW><id>8424718</id><snippet>list1</snippet></ROW><ROW><id>8424718</id><snippet>self.comboBox_2.clear()
self.comboBox_2.addItems(list1)
</snippet></ROW><ROW><id>8424718</id><snippet>QApplication.translate</snippet></ROW><ROW><id>8424718</id><snippet>list1</snippet></ROW><ROW><id>8424718</id><snippet>list1 = [
    self.tr('First Item'),
    self.tr('Second Item'),
    self.tr('Third Item'),
    ]
</snippet></ROW><ROW><id>8424718</id><snippet>_fromUtf8</snippet></ROW><ROW><id>8424718</id><snippet>self.comboBox_2.clear()
for pixmap, text in list1:
    self.comboBox_2.addItem(QIcon(pixmap), text)
</snippet></ROW><ROW><id>8424744</id><snippet>subprocess.call</snippet></ROW><ROW><id>8424744</id><snippet>solrURL = "http://mySolr:8983/solr/solrdatabase/update/csv?commit=true"
subprocess.call(['curl', '-v', solrURL,  '--data-binary', '@+"fileName"', '-H', 'Content-type:text/xml; charset=utf-8'])
</snippet></ROW><ROW><id>8424955</id><snippet>dict</snippet></ROW><ROW><id>8424955</id><snippet>new_dict = dict()
</snippet></ROW><ROW><id>8424955</id><snippet>new_dict = {}
</snippet></ROW><ROW><id>8425075</id><snippet>d = dict((k, v) for k, v in d.iteritems() if v &gt; 0)
</snippet></ROW><ROW><id>8425075</id><snippet>d = {k: v for k, v in d.items() if v &gt; 0}
</snippet></ROW><ROW><id>8425299</id><snippet>self.ReportServiceStatus(win32service.SERVICE_STOPPED)</snippet></ROW><ROW><id>8425362</id><snippet>paintEvent()</snippet></ROW><ROW><id>8425362</id><snippet>paintEvent()</snippet></ROW><ROW><id>8425418</id><snippet>nproc</snippet></ROW><ROW><id>8425418</id><snippet>setrlimit(2)</snippet></ROW><ROW><id>8425418</id><snippet>bash(1)</snippet></ROW><ROW><id>8425418</id><snippet>ulimit</snippet></ROW><ROW><id>8425418</id><snippet>/etc/security/limits.conf</snippet></ROW><ROW><id>8425418</id><snippet>nofile</snippet></ROW><ROW><id>8425418</id><snippet>stdin</snippet></ROW><ROW><id>8425418</id><snippet>stdout</snippet></ROW><ROW><id>8425418</id><snippet>stderr</snippet></ROW><ROW><id>8425418</id><snippet>/proc/sys/kernel/pid_max</snippet></ROW><ROW><id>8425418</id><snippet>/proc/sys/fs/file-max</snippet></ROW><ROW><id>8425418</id><snippet>init(8)</snippet></ROW><ROW><id>8425418</id><snippet>init(8)</snippet></ROW><ROW><id>8425418</id><snippet>init(8)</snippet></ROW><ROW><id>8425418</id><snippet>wait(2)</snippet></ROW><ROW><id>8425418</id><snippet>signal(7)</snippet></ROW><ROW><id>8425418</id><snippet>SIGCHLD</snippet></ROW><ROW><id>8425418</id><snippet>wait(2)</snippet></ROW><ROW><id>8425418</id><snippet>waitpid(2)</snippet></ROW><ROW><id>8425418</id><snippet>SIGCHLD</snippet></ROW><ROW><id>8425418</id><snippet>SIG_IGN</snippet></ROW><ROW><id>8425418</id><snippet>import signal
signal.signal(signal.SIGCHLD, signal.SIG_IGN)
</snippet></ROW><ROW><id>8425418</id><snippet>Subprocess</snippet></ROW><ROW><id>8425418</id><snippet>wait(2)</snippet></ROW><ROW><id>8425652</id><snippet>import argparse

parser=argparse.ArgumentParser()
parser.add_argument('--shortname')
args=parser.parse_args()

print 'starting: ' + str(args.shortname)
</snippet></ROW><ROW><id>8425652</id><snippet>% prog.py --shortname example
starting: example
</snippet></ROW><ROW><id>8425775</id><snippet>row[:] = ...
</snippet></ROW><ROW><id>8425775</id><snippet>listName = [range(0, x + 1) for z in range(y + 1)]
</snippet></ROW><ROW><id>8425933</id><snippet>line_start = self.OutWidget.index("@%s,%s linestart" % (event.x, event.y))
</snippet></ROW><ROW><id>8425933</id><snippet>line_end = self.OutWidget.index("%s lineend" % line_start)
self.OutWidget.tag_remove("highlight", 1.0, "end")
self.OutWidget.tag_add("highlight", line_start, line_end)
</snippet></ROW><ROW><id>8425933</id><snippet>self.OutWidget.tag_configure("highlight", background="bisque")
</snippet></ROW><ROW><id>8425933</id><snippet>self.InWidget.focus_set()
</snippet></ROW><ROW><id>8426164</id><snippet>event.type == QUIT</snippet></ROW><ROW><id>8426164</id><snippet>for event in pygame.event.get()</snippet></ROW><ROW><id>8426164</id><snippet>if event.type == MOUSEBUTTONDOWN:
    flag = not flag # This will swap the value of the flag
</snippet></ROW><ROW><id>8426164</id><snippet>flag = True</snippet></ROW><ROW><id>8426164</id><snippet>flag = False</snippet></ROW><ROW><id>8426164</id><snippet>time.sleep(0.2)</snippet></ROW><ROW><id>8426358</id><snippet>openerp/static/calandar/calendar.js

=&gt; find:

    param_default("range",[1900,2999])

=&gt; and replace with:

    param_default("range",[1,2999])
</snippet></ROW><ROW><id>8426358</id><snippet>openerp/i18n/format.py

=&gt; find the two occurances of:

    return time.strftime(server_format, value)

=&gt; and replace with:

    return mx.DateTime.Date(value[0],value[1],value[2],value[3],value[4],value[5]).strftime(server_format)
</snippet></ROW><ROW><id>8426536</id><snippet>(mE, a)</snippet></ROW><ROW><id>8427269</id><snippet>if len(row) &gt;= 2:
    print [row[index] for index in (1, 0)]
</snippet></ROW><ROW><id>8427301</id><snippet>ints = [1, 2, 3, 4]
widths = [(4, w), (2, x), (2, y), (8, z)]
for i in ints:
    print "%s|%s|%s|%s" % tuple(((("%0." + str(padding) + "d") % (i)).center(width)) for padding, width in widths)
</snippet></ROW><ROW><id>8427301</id><snippet>widths</snippet></ROW><ROW><id>8427301</id><snippet>"%0.[padding]d"</snippet></ROW><ROW><id>8427562</id><snippet>import random

image_size = (5000,5000)
portion_size = (200, 200)

x1 = random.randint(0, image_size[0]-portion_size[0]-1)
y1 = random.randint(0, image_size[1]-portion_size[1]-1)

x2, y2 = x1+portion_size[0]-1, y1+portion_size[1]-1

# Grab the area of the image that is the rectangle defined by (x1,y1) and (x2,y2)
</snippet></ROW><ROW><id>8427664</id><snippet>a</snippet></ROW><ROW><id>8427664</id><snippet>b</snippet></ROW><ROW><id>8427664</id><snippet>[x if x != '*' else y for (x, y) in zip(a, b)]
</snippet></ROW><ROW><id>8427664</id><snippet>zip</snippet></ROW><ROW><id>8427664</id><snippet>*args</snippet></ROW><ROW><id>8427664</id><snippet>set</snippet></ROW><ROW><id>8427664</id><snippet>'*'</snippet></ROW><ROW><id>8427664</id><snippet>'*'</snippet></ROW><ROW><id>8427664</id><snippet>set</snippet></ROW><ROW><id>8427664</id><snippet>.pop()</snippet></ROW><ROW><id>8427664</id><snippet>def non_star_if_possible(items):
    try: return set(items).difference('*').pop()
    except KeyError: return '*'

def merge(lists):
    return [non_star_if_possible(items) for items in zip(*lists)]
</snippet></ROW><ROW><id>8427664</id><snippet>zip</snippet></ROW><ROW><id>8427664</id><snippet>def merge_all(data):
    return [merge(lists) for lists in zip(*data)]
</snippet></ROW><ROW><id>8427775</id><snippet>__init__.py</snippet></ROW><ROW><id>8427775</id><snippet>__all__ = ["BananasTest", "ApplesTest"]
</snippet></ROW><ROW><id>8427775</id><snippet>__all__</snippet></ROW><ROW><id>8427775</id><snippet># pyflakes.ignore</snippet></ROW><ROW><id>8428153</id><snippet>['.'.join(str(octet) for octet in addr['ip']) for addr in hosts]
</snippet></ROW><ROW><id>8428301</id><snippet>from kivy.config import Config
Config.set('kivy', 'double_tap_timeout', '500') #&lt; 500 ms between 2 touch tap
</snippet></ROW><ROW><id>8428301</id><snippet>class MyCustomWidget(Widget):
    def on_touch_down(self, touch):
        # is the touch is touching on me ?
        if not self.collide_point(*touch.pos):
            return False
        if touch.is_double_tap:
            print 'its a double tap!'
        else:
            print 'its a tap'
        return super(MyCustomWidget, self).on_touch_down(touch)
</snippet></ROW><ROW><id>8428935</id><snippet>user = User.objects.get(id=1)
group = Group.objects.get(id=5)

user.groups.add(group)
</snippet></ROW><ROW><id>8429176</id><snippet>from os.path import join
from os import listdir, rmdir
from shutils import move

root = 'dstfolder/slave1'
for filename in listdir(join(root, 'slave')):
    move(join(root, 'slave', filename), join(root, filename))
rmdir(root)
</snippet></ROW><ROW><id>8429282</id><snippet>settings.py</snippet></ROW><ROW><id>8429282</id><snippet>from django.conf import settings
FOO = getattr(settings, 'FOO', "default_value")
</snippet></ROW><ROW><id>8429282</id><snippet>settings</snippet></ROW><ROW><id>8429282</id><snippet>from myapp.settings import *

def print_foo():
    print FOO
</snippet></ROW><ROW><id>8429522</id><snippet>def shutdown():
  self.shutdown = True

def run():
  while not self.shutdown:
     workloop()
</snippet></ROW><ROW><id>8429549</id><snippet>prod_Available</snippet></ROW><ROW><id>8429549</id><snippet>prod_Available = 0</snippet></ROW><ROW><id>8429549</id><snippet>    prod = Product.objects.get(id=product_id)

    prod_Available = 0 # !

    for x in range(start_date,end_date + 1):
        x = x - start_date
        delta = datetime.timedelta(days=x)
        all_date = check_in + delta
        sumOfQuantity = HotelCheck.objects.filter(date_booked=all_date, product=prod).aggregate(Sum('quantity'))['quantity__sum']
        if sumOfQuantity == None:
            sumOfQuantity = 0
        prod_Available = prod.quantity - sumOfQuantity
        #global prod_Available
    if prod_Available &lt;= 0:
        status = 0
    else:
        status = 1

    return status
</snippet></ROW><ROW><id>8429837</id><snippet>split()</snippet></ROW><ROW><id>8429837</id><snippet>&gt;&gt;&gt; ll = "3a.24.5t.5a  4     1743 3150924      2786 0".split()
&gt;&gt;&gt; ll
['3a.24.5t.5a', '4', '1743', '3150924', '2786', '0']
</snippet></ROW><ROW><id>8429889</id><snippet>awk 'NR==1{for(i=1;i&lt;=NF;i++)n[i]=$i}; NR==3{for(i=1;i&lt;=NF;i++){if($i~/florida|texas/)print $i"\t"n[i];}}' yourFile
</snippet></ROW><ROW><id>8429889</id><snippet>kent$  echo "Ron Rob rock bammy
m f m f
florida Atlanta florida texas"|awk 'NR==1{for(i=1;i&lt;=NF;i++)n[i]=$i}; NR==3{for(i=1;i&lt;=NF;i++){if($i~/florida|texas/)print $i"\t"n[i];}}'
</snippet></ROW><ROW><id>8429889</id><snippet>florida Ron
florida rock
texas   bammy
</snippet></ROW><ROW><id>8429889</id><snippet>kent$  echo "Ron  Rob  rock bammy
m    f   m  f
florida(8)  Atlanta  florida(8) texas(2;7)"|awk 'NR==1{for(i=1;i&lt;=NF;i++)n[i]=$i}; NR==3{for(i=1;i&lt;=NF;i++){if($i~/florida\(8\)|texas\(2;7\)/)print $i"\t"n[i];}}'
</snippet></ROW><ROW><id>8429889</id><snippet>florida(8)      Ron
florida(8)      rock
texas(2;7)      bammy
</snippet></ROW><ROW><id>8430096</id><snippet>&gt;&gt;&gt; myhash = bcrypt.hashpw('testpassword', bcrypt.gensalt(12))
&gt;&gt;&gt; myhash    
'$2a$12$K1hnCm5z74QtXaynv4.S8.i1FK9xjRr7JSPCRCyB9zpv8xZznZGFi'
&gt;&gt;&gt; bcrypt.hashpw('testpassword', myhash)
'$2a$12$K1hnCm5z74QtXaynv4.S8.i1FK9xjRr7JSPCRCyB9zpv8xZznZGFi'
</snippet></ROW><ROW><id>8430157</id><snippet>PlanetarySystemConstants</snippet></ROW><ROW><id>8430157</id><snippet>MolecularAggregateConstants</snippet></ROW><ROW><id>8430157</id><snippet>ATTRACTION_CONSTANT</snippet></ROW><ROW><id>8430157</id><snippet>class PlanetarySystem(NBodyGroup, PlanetarySystemConstants)</snippet></ROW><ROW><id>8430157</id><snippet>class MolecularAggregate(NBodyGroup, MolecularAggregateConstants)</snippet></ROW><ROW><id>8430287</id><snippet>extend</snippet></ROW><ROW><id>8430287</id><snippet>def fillmylist(l, n):
    l.extend(range(1, n + 1))
l = []
fillmylist(l, 5)
</snippet></ROW><ROW><id>8430342</id><snippet>args=('./logs/log.out', 'when=\'S\'', 'interval=10', 'backupCount=5')
</snippet></ROW><ROW><id>8430342</id><snippet>args=('./logs/log.out', when='S', interval=10, backupCount=5)
</snippet></ROW><ROW><id>8430342</id><snippet>args=('./logs/log.out','S',10,5)
</snippet></ROW><ROW><id>8430550</id><snippet>List&lt;ImageIcon&gt;</snippet></ROW><ROW><id>8430550</id><snippet>SwingWorker</snippet></ROW><ROW><id>8430677</id><snippet>    ...
        clsname = str(classes[0])
    ...
    if clsname is not None:
        # final hack - module name shows up in str(cls), but we've already
        # computed module name, so remove it
        clsname = clsname.split(".")[1:]
        clsname = ".".join(clsname)
        funcname = "%s.%s" % (clsname, funcname)
</snippet></ROW><ROW><id>8430677</id><snippet>str(someclass)</snippet></ROW><ROW><id>8430677</id><snippet>module.klass</snippet></ROW><ROW><id>8430677</id><snippet>&lt;proxy for 'module.klass'&gt;</snippet></ROW><ROW><id>8430959</id><snippet>import</snippet></ROW><ROW><id>8430959</id><snippet>from</snippet></ROW><ROW><id>8430959</id><snippet>from pylons import config</snippet></ROW><ROW><id>8430959</id><snippet>class</snippet></ROW><ROW><id>8430959</id><snippet>function</snippet></ROW><ROW><id>8430959</id><snippet>import</snippet></ROW><ROW><id>8430959</id><snippet>functions</snippet></ROW><ROW><id>8430959</id><snippet>classes</snippet></ROW><ROW><id>8430959</id><snippet>import pylons
....
pylons.config #to retreive config
</snippet></ROW><ROW><id>8431391</id><snippet>gtk.CheckButton</snippet></ROW><ROW><id>8431391</id><snippet>gtk.Label</snippet></ROW><ROW><id>8431391</id><snippet>gtk.Table</snippet></ROW><ROW><id>8431391</id><snippet>gtk.Grid</snippet></ROW><ROW><id>8431653</id><snippet>from threading import Thread

threads = [Thread(target=f1), Thread(target=f2), Thread(target=f3)]

for thread in threads:
    thread.start()

# Wait for all of them
for thread in threads:
    thread.join()

# Do stuff afterwards
</snippet></ROW><ROW><id>8431743</id><snippet>inspect.getmodule</snippet></ROW><ROW><id>8431743</id><snippet>&gt;&gt;&gt; from collections import defaultdict
&gt;&gt;&gt; import inspect
&gt;&gt;&gt; inspect.getmodule(defaultdict)
&lt;module 'collections' from '/usr/lib/python2.6/collections.pyc'&gt;
</snippet></ROW><ROW><id>8431743</id><snippet>__name__</snippet></ROW><ROW><id>8431743</id><snippet>&gt;&gt;&gt; from scipy.sparse import csr_matrix
&gt;&gt;&gt; inspect.getmodule(csr_matrix).__name__
'scipy.sparse.csr'
</snippet></ROW><ROW><id>8431752</id><snippet>foods</snippet></ROW><ROW><id>8431752</id><snippet>nutrients</snippet></ROW><ROW><id>8431752</id><snippet>foods_nutrients</snippet></ROW><ROW><id>8431752</id><snippet>food_id</snippet></ROW><ROW><id>8431752</id><snippet>nutrient_id</snippet></ROW><ROW><id>8431752</id><snippet>value</snippet></ROW><ROW><id>8431752</id><snippet>foods</snippet></ROW><ROW><id>8431752</id><snippet>nutrients</snippet></ROW><ROW><id>8431752</id><snippet>+------------------+
| foods            |
+---------+--------+
| food_id | name   |
+---------+--------+
| 1       | Banana |
| 2       | Apple  |
+---------+--------+

+-------------------------+
| nutrients               |
+-------------+-----------+
| nutrient_id | name      |
+-------------+-----------+
| 1           | Potassium |
| 2           | Vitamin C |
| 3           | Sugar     |
+-------------+-----------+

+-------------------------------+
| foods_nutrients               |
+---------+-------------+-------+
| food_id | nutrient_id | value |
+---------+-------------+-------+
| 1       | 1           | 1000  |
| 1       | 2           | 12    |
| 1       | 3           | 1     |
| 2       | 1           | 3     |
| 2       | 2           | 7     |
| 2       | 3           | 98    |
+---------+-------------+-------+
</snippet></ROW><ROW><id>8431752</id><snippet>SELECT food_nutrients.value
  FROM food_nutrients, foods, nutrients
  WHERE foods_nutrients.food_id = foods.food_id
    AND foods_nutrients.nutrient_id = nutrients.nutrient_id
    AND foods.name = 'Banana'
    AND nutrients.name = 'Potassium';
</snippet></ROW><ROW><id>8431852</id><snippet>&lt;xsd:include schemaLocation="ProductImage.xsd"/&gt;
</snippet></ROW><ROW><id>8431915</id><snippet>signal</snippet></ROW><ROW><id>8431915</id><snippet>time</snippet></ROW><ROW><id>8431915</id><snippet>time.sleep()</snippet></ROW><ROW><id>8431915</id><snippet>import signal, time

def handler(signum, frame):
    print('Signal handler called with signal', signum)

signal.signal(signal.SIGINT, handler)

print("signal set, sleeping")
time.sleep(10)
print("sleep done")
</snippet></ROW><ROW><id>8431915</id><snippet>signal set, sleeping
Signal handler called with signal 2
sleep done
</snippet></ROW><ROW><id>8432308</id><snippet># read keys
with open('file1', 'r') as fd:
    keys = fd.read().splitlines()

# output keys
print '\t'.join(keys)

# read data file, with header line and content
with open('file2', 'r') as fd:
    headers = fd.readline().split()
    while True:
        line = fd.readline().split()
        if len(line) == 0:
            break
        print '\t'.join([line[headers.index(x)] for x in keys if x in headers])
</snippet></ROW><ROW><id>8432308</id><snippet>$ python test.py 
Ronny   Ruby    Suzie   Paul
11      11      12      12
12      8.9     5.1     23
</snippet></ROW><ROW><id>8432564</id><snippet>def get_form(self, request, obj=None, **kwargs):
    ....
    ....
    defaults = {
        "form": self.form,
        "fields": fields,
        "exclude": exclude,
        "formfield_callback": curry(self.formfield_for_dbfield, request=request),
    }
    defaults.update(kwargs)
    ...
</snippet></ROW><ROW><id>8432923</id><snippet>mydict = {}
for line in myfile:
   items = line.split()          # split line on whitespace
   mydict[items[0]] = items[1:]  # first item: key, rest: values
</snippet></ROW><ROW><id>8432923</id><snippet>print mydict["no.3"]
</snippet></ROW><ROW><id>8432923</id><snippet>['normal', 'yes', '54', '0,543', '12']
</snippet></ROW><ROW><id>8432927</id><snippet>lambda</snippet></ROW><ROW><id>8432927</id><snippet>class Spinner(object):
  def __init__(self):
    self._chars = r"-\|/-\|/"
    self._pos = 0

  def spin(self):
    sys.stdout.write(self._chars[self._pos])
    sys.stdout.write("\r")
    sys.stdout.flush()
    self._pos += 1
    if self._pos &gt;= len(self._chars):
      self._pos = 0
    return True

spinner = Spinner()
gobject.timeout_add(2 * 1000, spinner.spin)
</snippet></ROW><ROW><id>8432935</id><snippet>soup = BeautifulSoup(open('yourhtml.html').read())
for tr in soup('tr'):
    if tr('td')[3].text == '0.00':
         tr.extract()
</snippet></ROW><ROW><id>8433258</id><snippet>(User.id, Score1-Score2)</snippet></ROW><ROW><id>8433258</id><snippet>from sqlalchemy.orm import aliased

Visit1 = aliased(Visit)
Visit2 = aliased(Visit)
session.query(User)\
    .join(Visit1, (Visit1.user_id==User.id) &amp; (Visit1.visit_number==1))\
    .join(Visit2, (Visit2.user_id==User.id) &amp; (Visit2.visit_number==2))\
    .values(User.id, Visit1.Score-Visit2.Score)
</snippet></ROW><ROW><id>8433258</id><snippet>Visit.user_id</snippet></ROW><ROW><id>8433258</id><snippet>User.id</snippet></ROW><ROW><id>8433258</id><snippet>User</snippet></ROW><ROW><id>8433258</id><snippet>Visit</snippet></ROW><ROW><id>8433258</id><snippet>User</snippet></ROW><ROW><id>8433306</id><snippet>VERSION=@VERSION@
DATADIR=@DATADIR@
</snippet></ROW><ROW><id>8433306</id><snippet>bld.new_task_gen (
  features = "subst",
  source= "versionfile.ver",
  target= "versionfile.out",
  VERSION = bld.env['VERSION'],
  DATADIR = bld.env['DATADIR'])
</snippet></ROW><ROW><id>8433306</id><snippet>conf.env['VERSION'] = '0.7.0'
</snippet></ROW><ROW><id>8433306</id><snippet>lib_typelib = bld.new_task_gen(
  name = 'versionfile',
  source = 'versionfile.ver',
  target = 'versionfile.out',
  rule='/path/to/your/python/script ${SRC} -o ${TGT}')
</snippet></ROW><ROW><id>8433345</id><snippet>Tkinter</snippet></ROW><ROW><id>8433345</id><snippet>ComboBox</snippet></ROW><ROW><id>8433345</id><snippet>Entry</snippet></ROW><ROW><id>8433345</id><snippet>Entry</snippet></ROW><ROW><id>8433345</id><snippet>-validatecommand</snippet></ROW><ROW><id>8433345</id><snippet>-validate</snippet></ROW><ROW><id>8433345</id><snippet>key</snippet></ROW><ROW><id>8433476</id><snippet>def count(limits):
    idcs = [0] * len(limits)
    while True:
        yield tuple(idcs)
        for n in range(len(limits)-1, -1, -1):
            idcs[n] += 1
            if idcs[n] != limits[n]:
                break
            elif n == 0:
                raise StopIteration
            else:
                idcs[n] = 0

words = ['foo', 'bar', 'xyzzy']
for idcs in count(map(len, words)):
    chars = map(lambda w, i: w[i], words, idcs)
    print idcs, chars
</snippet></ROW><ROW><id>8433761</id><snippet>bcrypt.gensalt(12)</snippet></ROW><ROW><id>8434098</id><snippet>#forms.py
from django import forms

class AdditionForm(forms.Form):
    first_number = forms.IntegerField()
    second_number = forms.IntegerField()


#views.py
from django.shortcuts import render

from [your_app].forms imort AdditionForm

def calc(request):
    form = AdditionForm(request.POST or None)
    answer = None
    if request.method == 'POST':
        if form.is_valid():
            first_number = form.cleaned_data.get('first_number', 0)
            second_number = form.cleaned_data.get('second_number', 0)
            answer = first_number + second_number
    return render(request, 'some-file.html', {'form' : form, 'answer' : answer})


#some-file.html
&lt;html&gt;
    &lt;head&gt;
        &lt;title&gt;Simple Calculator&lt;/title&gt;
    &lt;/head&gt;
    &lt;body&gt;
        &lt;form action="." method="post" enctype="application/x-www-form-urlencoded"&gt;
            &lt;fieldset&gt;
                &lt;ol&gt;
                    {{ form.as_ul }}
                    &lt;li&gt;&lt;input type="submit" value="Add the Numbers" /&gt;
                &lt;/ol&gt;
            &lt;/fieldset&gt;
        &lt;/form&gt;
        {% if answer %}
        &lt;p&gt;Your answer was: {{ answer }}&lt;/p&gt;
        {% endif %}
    &lt;/body&gt;
&lt;/html&gt;
</snippet></ROW><ROW><id>8434210</id><snippet>process</snippet></ROW><ROW><id>8434210</id><snippet>class WordPress(object):
    def newentry(self):
        data = get_data()
        data = process_data(data)

        # do moe generi cthings

    def process_data(self):
        return data
</snippet></ROW><ROW><id>8434671</id><snippet>KeyError: 'the-field'
</snippet></ROW><ROW><id>8434671</id><snippet>Data has Posted
</snippet></ROW><ROW><id>8434671</id><snippet>def render_POST(self, request):        
    try:
        value = request.args["the-field"][0]
    except KeyError:
        value = "&lt;missing the-field value&gt;"
    return '&lt;html&gt;&lt;body&gt;You submitted: %s&lt;/body&gt;&lt;/html&gt;' % (cgi.escape(value),)
</snippet></ROW><ROW><id>8434671</id><snippet>the-field=%5B%27some+value%27%5D
</snippet></ROW><ROW><id>8434671</id><snippet>urllib.urlencode</snippet></ROW><ROW><id>8434671</id><snippet>urllib.urlencode({'the-field': ['some value']})
</snippet></ROW><ROW><id>8434742</id><snippet>pyuic4</snippet></ROW><ROW><id>8434742</id><snippet>/usr/bin/pyuic4</snippet></ROW><ROW><id>8434742</id><snippet>exec /usr/bin/python /usr/lib/python2.7/site-packages/PyQt4/uic/pyuic.py ${1+"$@"}
     ^
SyntaxError: invalid syntax
</snippet></ROW><ROW><id>8434742</id><snippet>File "/usr/lib/python2.7/site-packages/PyQt4/uic/pyuic.py", line 2
</snippet></ROW><ROW><id>8434742</id><snippet>/usr/lib/python2.7/site-packages/PyQt4/uic/pyuic.py</snippet></ROW><ROW><id>8434742</id><snippet>/usr/bin/pyuic4</snippet></ROW><ROW><id>8434849</id><snippet>__setitem__</snippet></ROW><ROW><id>8434849</id><snippet>__getitem__</snippet></ROW><ROW><id>8434939</id><snippet>__is_shut_down</snippet></ROW><ROW><id>8434939</id><snippet>__shutdown_request</snippet></ROW><ROW><id>8434939</id><snippet>class ModTCPServer(SocketServer.TCPServer):
    def __init__(self, *args, **kwargs):
        SocketServer.TCPServer.__init__(self, *args, **kwargs)
        self.__is_shut_down = threading.Event()
        self.__shutdown_request = threading.Event()
</snippet></ROW><ROW><id>8434939</id><snippet>socket.error: [Errno 112] Address already in use
</snippet></ROW><ROW><id>8434939</id><snippet>sudo netstat -ltpn</snippet></ROW><ROW><id>8434946</id><snippet>User</snippet></ROW><ROW><id>8434946</id><snippet>Project</snippet></ROW><ROW><id>8434946</id><snippet>resource_id</snippet></ROW><ROW><id>8434946</id><snippet>request.root</snippet></ROW><ROW><id>8434946</id><snippet>__resource_url__</snippet></ROW><ROW><id>8435005</id><snippet>def skipNdCmp(f1, f2,skip1,skip2,bufsize = 8*1024):
    with open(f1, 'rb') as fp1, open(f2, 'rb') as fp2:
        for i in xrange(0,skip1): fp1.readline()
        for i in xrange(0,skip2): fp2.readline()
        while True:
                b1 = fp1.read(bufsize)
                b2 = fp2.read(bufsize)
                if b1 != b2:
                    return False
                if not b1:
                    return True
</snippet></ROW><ROW><id>8435152</id><snippet>map_func = { 'ID' : lambda x : 'mig_farm_seq.nextval',
             'ENTERPRISE_NAME' : wrap_str,
             'TAX_NUMBER' : wrap_str,
             'FAMILY_NAME' : lambda x : wrap_str(x.split()[0]),
             'GIVEN_NAME' : lambda x : wrap_str(x.split()[1]),
             'ENTERPRISE_REGISTRATION_NUMBER' : wrap_str,
             'PREMISE_NAME' : wrap_str,
             'HOUSE_ID' : wrap_str,
             'POSTAL_CODE' : wrap_str,
             'PHONE_NUMBER_1' : lambda x : wrap_str(get_phone_number(x, True)),
             'PHONE_NUMBER_2' : lambda x : wrap_str(get_phone_number(x, False)),
             'FAX_NUMBER' : lambda x : wrap_str(x.replace(' ', '')),
             'BANK_IDENTIFIER' : lambda x : wrap_str(x.replace(' ', '').replace('-', '')[:3]),
             'BANK_ACCOUNT_NUMBER' : lambda x : wrap_str(x.replace(' ', '').replace('-', '')),
             'NUMBER_OF_EMPLOYEES' : wrap_null,
             'SETTLEMENT_NUMBER' : wrap_null,
             'REGISTRATION_NUMBER' : lambda x : insert_reg_number % x,
             'GENDER' : wrap_str,
             'ACTIVITY' : lambda x : '0',
             'REG_HOLDER_ACTIVITY' : lambda x : '0',
             'PROCESSED_BY_JOB' : lambda x : '0'
         }
</snippet></ROW><ROW><id>8435667</id><snippet>requests</snippet></ROW><ROW><id>8435835</id><snippet>timetuple</snippet></ROW><ROW><id>8435835</id><snippet>class _Infinity(object):

    def __lt__(self, other):
        return False

    def __gt__(self, other):
        return True

    def timetuple(self):
        return tuple()

import datetime
INF = _Infinity()
now = datetime.datetime.now()
print cmp(INF, now)
print cmp(now, INF)
</snippet></ROW><ROW><id>8435835</id><snippet>1    
-1
</snippet></ROW><ROW><id>8435844</id><snippet>&gt;&gt;&gt; x="the name of 33e4853h45y45 is one of the 33e445a64b65 and we want all the 33e5c44598e46 to be matched"
&gt;&gt;&gt; re.findall("33e\w+",x)
['33e4853h45y45', '33e445a64b65', '33e5c44598e46']
</snippet></ROW><ROW><id>8436056</id><snippet>csv</snippet></ROW><ROW><id>8436056</id><snippet>set</snippet></ROW><ROW><id>8436056</id><snippet>csv</snippet></ROW><ROW><id>8436056</id><snippet>intersection</snippet></ROW><ROW><id>8436056</id><snippet>s1 = set([1,2,3])  # You can add things incrementally with "s1.add(value)"
s2 = set([2,3,4])

shared_items = s1.intersection(s2)
print shared_items
</snippet></ROW><ROW><id>8436056</id><snippet>set([2, 3])
</snippet></ROW><ROW><id>8436056</id><snippet>logging</snippet></ROW><ROW><id>8436056</id><snippet>bob,123,127.0.0.1,mac-address-1
fred,124,127.0.0.1,mac-address-2
</snippet></ROW><ROW><id>8436056</id><snippet>import csv

set1 = set()
for record in csv.reader(open('foo.csv', 'rb')):
    user, machine_id, ip_address, mac_address = record
    set1.add(mac_address)
    # or simply "set1.add(record[3])", if you don't need the other fields.
</snippet></ROW><ROW><id>8436056</id><snippet>csvfile = csv.reader(open('foo.csv', 'rb'))
set1 = set(rec[3] for rec in csvfile)   # Assuming mac-address is the 4th column.
</snippet></ROW><ROW><id>8436159</id><snippet>r'^t\d{4,5}$'
</snippet></ROW><ROW><id>8436159</id><snippet>{4,5}</snippet></ROW><ROW><id>8436279</id><snippet>import os
import posixpath
import socket
import urllib
from BaseHTTPServer import HTTPServer
from SimpleHTTPServer import SimpleHTTPRequestHandler


class MyFileHandler(SimpleHTTPRequestHandler):
    def translate_path(self, path):
        """Translate a /-separated PATH to the local filename syntax.

        Components that mean special things to the local file system
        (e.g. drive or directory names) are ignored.  (XXX They should
        probably be diagnosed.)

        """
        # abandon query parameters
        path = path.split('?',1)[0]
        path = path.split('#',1)[0]
        path = posixpath.normpath(urllib.unquote(path))
        words = path.split('/')
        words = filter(None, words)
        path = '/' # yourpath
        for word in words:
            drive, word = os.path.splitdrive(word)
            head, word = os.path.split(word)
            if word in (os.curdir, os.pardir): continue
            path = os.path.join(path, word)
        return path

def run():
    try:
        httpd = HTTPServer(('', 7214), MyFileHandler)
        httpd.serve_forever()
    except KeyboardInterrupt:
        pass
    except socket.error as e:
        print e
    else:
        httpd.server_close()
</snippet></ROW><ROW><id>8436589</id><snippet>load</snippet></ROW><ROW><id>8436589</id><snippet>Open</snippet></ROW><ROW><id>8436589</id><snippet>Close</snippet></ROW><ROW><id>8436589</id><snippet>import</snippet></ROW><ROW><id>8436589</id><snippet>load</snippet></ROW><ROW><id>8436589</id><snippet>import</snippet></ROW><ROW><id>8436589</id><snippet>/usr/local/bin/idle3.2</snippet></ROW><ROW><id>8436589</id><snippet>IDLE.app</snippet></ROW><ROW><id>8436589</id><snippet>/Applications/Python 3.2</snippet></ROW><ROW><id>8436589</id><snippet>Documents</snippet></ROW><ROW><id>8436589</id><snippet>IDLE.app</snippet></ROW><ROW><id>8436589</id><snippet>Documents</snippet></ROW><ROW><id>8436589</id><snippet>sys.path</snippet></ROW><ROW><id>8436589</id><snippet>Python</snippet></ROW><ROW><id>8436589</id><snippet>import</snippet></ROW><ROW><id>8436589</id><snippet>sys.path</snippet></ROW><ROW><id>8436589</id><snippet>PYTHONPATH</snippet></ROW><ROW><id>8436589</id><snippet>export PYTHONPATH=...</snippet></ROW><ROW><id>8436589</id><snippet>.bash_profile</snippet></ROW><ROW><id>8436589</id><snippet>IDLE.app</snippet></ROW><ROW><id>8436589</id><snippet>.bash_profile</snippet></ROW><ROW><id>8436589</id><snippet>/usr/local/bin/idle3.2</snippet></ROW><ROW><id>8436589</id><snippet>Update Shell Profile</snippet></ROW><ROW><id>8436589</id><snippet>/Applications/Python 3.2</snippet></ROW><ROW><id>8436589</id><snippet>idle3</snippet></ROW><ROW><id>8436589</id><snippet>IDLE.app</snippet></ROW><ROW><id>8436589</id><snippet>Documents</snippet></ROW><ROW><id>8436589</id><snippet>PYTHONPATH</snippet></ROW><ROW><id>8436589</id><snippet>IDLE.app</snippet></ROW><ROW><id>8436589</id><snippet>idle</snippet></ROW><ROW><id>8436589</id><snippet>.pth</snippet></ROW><ROW><id>8436589</id><snippet>sys.path</snippet></ROW><ROW><id>8436589</id><snippet>mkdir -p ~/Library/Python/3.2/lib/python/site-packages
cd ~/Library/Python/3.2/lib/python/site-packages
cat &gt;my_paths.pth &lt;&lt;EOF
/Users/YOUR_USER_NAME/path/to/your_additional_python_directory_1
/Users/YOUR_USER_NAME/path/to/your_additional_python_directory_2
EOF
</snippet></ROW><ROW><id>8436589</id><snippet>.pth</snippet></ROW><ROW><id>8436589</id><snippet>sys.path</snippet></ROW><ROW><id>8436589</id><snippet>~/.local/lib/python3.2/site-packages</snippet></ROW><ROW><id>8436886</id><snippet>m = re.findall("((http:|https:)//[^ \&lt;]*[^ \&lt;\.])",line)
</snippet></ROW><ROW><id>8436974</id><snippet>\t</snippet></ROW><ROW><id>8436974</id><snippet>print repr(li)</snippet></ROW><ROW><id>8436974</id><snippet>print(ascii(li))</snippet></ROW><ROW><id>8436974</id><snippet>print(li')</snippet></ROW><ROW><id>8436974</id><snippet>&gt;&gt;&gt; li = ['\u0404']
&gt;&gt;&gt; print(li)
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
  File "C:\python32\lib\encodings\cp850.py", line 19, in encode
    return codecs.charmap_encode(input,self.errors,encoding_map)[0]
UnicodeEncodeError: 'charmap' codec can't encode character '\u0404' in position
2: character maps to &lt;undefined&gt;
</snippet></ROW><ROW><id>8436974</id><snippet>print li</snippet></ROW><ROW><id>8436974</id><snippet>repr()</snippet></ROW><ROW><id>8436974</id><snippet>print repr(thing)</snippet></ROW><ROW><id>8436974</id><snippet>print(li)</snippet></ROW><ROW><id>8436974</id><snippet>repr()</snippet></ROW><ROW><id>8436974</id><snippet>ascii()</snippet></ROW><ROW><id>8436974</id><snippet>&gt;&gt;&gt; def check_list(li):
...     for x, v in enumerate(li):
...         if not isinstance(v, (str, unicode)):
...             print "Type %s (%r) at offset %d" % (type(v), v, x)
...
&gt;&gt;&gt; check_list(['\xff', 2, u'\u0303', 4.0])
Type &lt;type 'int'&gt; (2) at offset 1
Type &lt;type 'float'&gt; (4.0) at offset 3
</snippet></ROW><ROW><id>8437059</id><snippet>a[:] = map(lambda x: -x, a)
</snippet></ROW><ROW><id>8437084</id><snippet>QTreeView.dragMoveEvent</snippet></ROW><ROW><id>8437084</id><snippet>QTreeView.dragEnterEvent</snippet></ROW><ROW><id>8437084</id><snippet>event.mimeData()</snippet></ROW><ROW><id>8437084</id><snippet>model.mimeTypes()</snippet></ROW><ROW><id>8437084</id><snippet>PyMimeData</snippet></ROW><ROW><id>8437084</id><snippet>PyMimeData.__init__</snippet></ROW><ROW><id>8437084</id><snippet>...
try:
    pdata = dumps(data)
except:
    return
self.setData(self.MIME_TYPE, dumps(data.__class__) + pdata)
</snippet></ROW><ROW><id>8437084</id><snippet>data</snippet></ROW><ROW><id>8437084</id><snippet>treeModel.mimeData</snippet></ROW><ROW><id>8437084</id><snippet>def mimeData(self, index):
    node = self.nodeFromIndex(index[0])
    mimeData = PyMimeData(node)
    return mimeData
</snippet></ROW><ROW><id>8437084</id><snippet>data/node</snippet></ROW><ROW><id>8437084</id><snippet>treeModel</snippet></ROW><ROW><id>8437084</id><snippet>dumps(data)</snippet></ROW><ROW><id>8437084</id><snippet>data</snippet></ROW><ROW><id>8437084</id><snippet>PyMimeData</snippet></ROW><ROW><id>8437342</id><snippet>self.lineEdit1 = QtGui.QLineEdit(self)
self.setCentralWidget(self.lineEdit1)
</snippet></ROW><ROW><id>8437342</id><snippet>self.mainwi = QtGui.QWidget(self)
self.lineEdit1 = QtGui.QLineEdit(self.mainwi)
self.setCentralWidget(self.mainwi)
</snippet></ROW><ROW><id>8437385</id><snippet>QWidget</snippet></ROW><ROW><id>8437385</id><snippet>QWidget::paintEvent</snippet></ROW><ROW><id>8437385</id><snippet>#ifndef _WIDGET_H_
#define _WIDGET_H_

#include &lt;QtGui&gt;

class CustomPaint : public QWidget
{
    Q_OBJECT
    protected:
        virtual void paintEvent(QPaintEvent* event);
};

#endif
</snippet></ROW><ROW><id>8437385</id><snippet>#include "widget.h"

void CustomPaint::paintEvent(QPaintEvent* ev)
{
    QPainter painter(this);
    painter.setClipRect(ev-&gt;rect());
    painter.fillRect(ev-&gt;rect(), Qt::white);

    const int x = 10;
    const int y = 10;
    const int w = width() - 20;
    const int h = height() - 20;

    painter.setPen(QPen(QBrush(Qt::red), 0.0, Qt::DashLine));
    painter.drawRect(x, y, w, h);

    painter.setPen(QPen(QBrush(Qt::black), 0.0, Qt::SolidLine));
    painter.drawText(x, y, w, h,
        Qt::AlignLeft | Qt::AlignTop | Qt::TextWordWrap,
        tr("Hello World"));
}
</snippet></ROW><ROW><id>8437385</id><snippet>#include &lt;QtGui&gt;
#include "widget.h"

int main(int argc, char** argv)
{
    QApplication app(argc, argv);

    CustomPaint win;
    win.show();

    return app.exec();
}
</snippet></ROW><ROW><id>8437385</id><snippet>QT=core gui
HEADERS=widget.h
SOURCES=test.cpp widget.cpp
</snippet></ROW><ROW><id>8437549</id><snippet>l = zip(name, idc, startD, ...)
l.sort(key=...)
</snippet></ROW><ROW><id>8437549</id><snippet>l = []
for name, idc, ... in reader:
    if name != ...:
        continue
    l.append((str(name), int(idc), ..))

sorted(l, key=itemgetter(0))
</snippet></ROW><ROW><id>8437768</id><snippet>find</snippet></ROW><ROW><id>8437768</id><snippet>geoNear</snippet></ROW><ROW><id>8437768</id><snippet>geoNear</snippet></ROW><ROW><id>8437768</id><snippet>spherical</snippet></ROW><ROW><id>8437768</id><snippet>find</snippet></ROW><ROW><id>8437768</id><snippet>miles per arcdegree</snippet></ROW><ROW><id>8437901</id><snippet>__init__</snippet></ROW><ROW><id>8438002</id><snippet>for x in data:
    print x,    # notice the comma at the end of the line
</snippet></ROW><ROW><id>8438002</id><snippet>for x in data:
    print(x,end=' ')
</snippet></ROW><ROW><id>8438162</id><snippet>PLT.colorbar</snippet></ROW><ROW><id>8438162</id><snippet>import numpy as N
import matplotlib as M
import matplotlib.pyplot as PLT

# Set up a simple function to plot 
x,y = N.meshgrid(range(10),range(10))
values = N.exp(x*y/10. - 1)

levels = N.logspace(-1, 4, 10)
log_norm = M.colors.LogNorm() 
# Currently not used - linear scaling
linear_norm = M.colors.Normalize()
# Plot the function using the indices as the x and y axes
PLT.contourf(values, norm=log_norm, levels=levels)
PLT.colorbar(format='%.2f')
PLT.show()
</snippet></ROW><ROW><id>8438494</id><snippet>background:(.*?);
</snippet></ROW><ROW><id>8438494</id><snippet>background = re.search(r'background:(.*?);', some_string).group(1)
</snippet></ROW><ROW><id>8438494</id><snippet>.</snippet></ROW><ROW><id>8438494</id><snippet>*</snippet></ROW><ROW><id>8438494</id><snippet>?</snippet></ROW><ROW><id>8438494</id><snippet>background:([^;]*)</snippet></ROW><ROW><id>8438494</id><snippet>[^;]</snippet></ROW><ROW><id>8438817</id><snippet>/Users/user1/.rvm/gems/ruby-1.9.2-p290/bin:
/Users/user1/.rvm/gems/ruby-1.9.2-p290@global/bin:
/Users/user1/.rvm/rubies/ruby-1.9.2-p290/bin:
/Users/user1/.rvm/bin:/opt/local/bin:
/usr/bin:/bin:/usr/sbin:/sbin:/usr/local/bin:
....
</snippet></ROW><ROW><id>8438817</id><snippet>PATH="$HOME/.rbenv/bin:$PATH" eval "$(rbenv init -)"
export PATH=$PATH:/usr/bin:/bin:/usr/sbin:/sbin:/usr/local/bin
</snippet></ROW><ROW><id>8438818</id><snippet>class ClassB(object):
    _logger = logging.getLogger("ClassB")

    @classmethod
    def do_something(cls):
         cls._logger.info("Doing something")
</snippet></ROW><ROW><id>8438818</id><snippet>ClassB</snippet></ROW><ROW><id>8438818</id><snippet>do_something</snippet></ROW><ROW><id>8438818</id><snippet>cls</snippet></ROW><ROW><id>8438818</id><snippet>ClassB</snippet></ROW><ROW><id>8438852</id><snippet>import abc

class SomeAbstractClass(metaclass=abc.ABCMeta):

    @abc.abstractstaticmethod
    def some_method(): 
        return 123

class ValidConcreteClass1(SomeAbstractClass):

    def some_method(self):
        return 456

inst = ValidConcreteClass1()
print(inst.some_method())
print(SomeAbstractClass.some_method())
</snippet></ROW><ROW><id>8438852</id><snippet>class NotWorking(metaclass=abc.ABCMeta):
    @abc.abstractmethod
    @staticmethod
    def some_method(self):
        return "asd"
</snippet></ROW><ROW><id>8438860</id><snippet>from pyparsing import Suppress, alphas, alphanums, nums, Word
from itertools import groupby

# you could do this with regular expressions too, if you prefer
LBRACK,RBRACK = map(Suppress, '[]')
ident = Word('_' + alphas, '_' + alphanums)
integer = Word(nums).setParseAction(lambda t : int(t[0]))
subscriptedRef = ident + 2*(LBRACK + (ident | integer) + RBRACK)


def simplify_value(v):
    if isinstance(v,list) and len(v)==1:
        return simplify_value(v[0])
    if v == integer:
        return int(v)
    return v

def regroup_args(dd):
    ret = {}
    subscripts = []
    for k,v in dd.items():
        # this is a pyparsing short-cut to see if a string matches a pattern
        # I also used it above in simplify_value to test for integerness of a string
        if k == subscriptedRef:
            subscripts.append(tuple(subscriptedRef.parseString(k))+
                                    (simplify_value(v),))
        else:
            ret[k] = simplify_value(v)

    # sort all the matched subscripted args, and then use groupby to
    # group by name and list index
    # this assumes all indexes 0-n are present in the parsed arguments
    subscripts.sort()
    for name,nameitems in groupby(subscripts, key=lambda x:x[0]):
        ret[name] = []
        for idx,idxitems in groupby(nameitems, key=lambda x:x[1]):
            idd = {}
            for item in idxitems:
                name, i, attr, val = item
                idd[attr] = val
            ret[name].append(idd)

    return ret

request_args = {'grid[1][y]': ['184'], 'grid[0][y]': ['185'], 'grid[1][x]': ['18'], 'request': ['loadTiles'], 'grid[0][x]': ['17']} 
print regroup_args(request_args)
</snippet></ROW><ROW><id>8438860</id><snippet>{'grid': [{'y': 185, 'x': 17}, {'y': 184, 'x': 18}], 'request': 'loadTiles'}
</snippet></ROW><ROW><id>8439076</id><snippet>application = webapp.WSGIApplication([('/.*', MainPage)], ...</snippet></ROW><ROW><id>8439118</id><snippet>some_value</snippet></ROW><ROW><id>8439118</id><snippet>MyCustomDescriptor</snippet></ROW><ROW><id>8439118</id><snippet>foo</snippet></ROW><ROW><id>8439118</id><snippet>some_value</snippet></ROW><ROW><id>8439118</id><snippet>def register(method_name,foo):
    def class_decorator(cls):
        method=getattr(cls,method_name)
        class MyCustomDescriptor(object):
            def __get__(self,instance,type):
                result=method(instance)
                return '{c}: {r}'.format(c=cls.__name__,r=result)
        setattr(cls,method_name,MyCustomDescriptor())
        return cls
    return class_decorator

@register('some_value',foo=1)
class ClassA:
    def some_value(self):
        return 10
</snippet></ROW><ROW><id>8439118</id><snippet>a=ClassA()
print(a.some_value)
</snippet></ROW><ROW><id>8439118</id><snippet>ClassA: 10
</snippet></ROW><ROW><id>8439150</id><snippet>&gt;&gt;&gt; import itertools as it
&gt;&gt;&gt; A = {1:'one', 2:'two', 3: 'three'}
&gt;&gt;&gt; list(it.combinations(A.keys(), 2))
[(1, 2), (1, 3), (2, 3)]
</snippet></ROW><ROW><id>8439519</id><snippet>for</snippet></ROW><ROW><id>8439519</id><snippet>__iter__()</snippet></ROW><ROW><id>8439519</id><snippet>IndexError</snippet></ROW><ROW><id>8439519</id><snippet>list</snippet></ROW><ROW><id>8439519</id><snippet>__init__()</snippet></ROW><ROW><id>8439519</id><snippet>pop()</snippet></ROW><ROW><id>8439519</id><snippet>__getitem__()</snippet></ROW><ROW><id>8439519</id><snippet>push</snippet></ROW><ROW><id>8439519</id><snippet>append</snippet></ROW><ROW><id>8439519</id><snippet>list</snippet></ROW><ROW><id>8439519</id><snippet>__iter()__</snippet></ROW><ROW><id>8439519</id><snippet>for</snippet></ROW><ROW><id>8439519</id><snippet>class Stack(list):
    push = list.append
</snippet></ROW><ROW><id>8439997</id><snippet>del</snippet></ROW><ROW><id>8439997</id><snippet>&gt;&gt;&gt; class Example(object):
...     pass
... 
&gt;&gt;&gt; Example
&lt;class '__main__.Example'&gt;
&gt;&gt;&gt; del Example
&gt;&gt;&gt; Example
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
NameError: name 'Example' is not defined
</snippet></ROW><ROW><id>8440136</id><snippet>os.system("export DISPLAY=:99")
</snippet></ROW><ROW><id>8440136</id><snippet>system()</snippet></ROW><ROW><id>8440136</id><snippet>DISPLAY</snippet></ROW><ROW><id>8440136</id><snippet>os.environ["DISPLAY"]=":99"
</snippet></ROW><ROW><id>8440136</id><snippet>bash(1)</snippet></ROW><ROW><id>8440136</id><snippet>export DISPLAY=:99
</snippet></ROW><ROW><id>8440136</id><snippet>DISPLAY</snippet></ROW><ROW><id>8440136</id><snippet>ssh -X testinguser@machine ...</snippet></ROW><ROW><id>8440136</id><snippet>ssh(1)</snippet></ROW><ROW><id>8440136</id><snippet>~/.bashrc</snippet></ROW><ROW><id>8440136</id><snippet>~/.profile</snippet></ROW><ROW><id>8440136</id><snippet>~/.bash_profile</snippet></ROW><ROW><id>8440136</id><snippet>bash(1)</snippet></ROW><ROW><id>8440136</id><snippet>export DISPLAY=:99
</snippet></ROW><ROW><id>8440136</id><snippet>DISPLAY</snippet></ROW><ROW><id>8440136</id><snippet>/etc/environment</snippet></ROW><ROW><id>8440136</id><snippet>pam_env(8)</snippet></ROW><ROW><id>8440136</id><snippet>pam_env(8)</snippet></ROW><ROW><id>8440136</id><snippet>/etc/pam.d/</snippet></ROW><ROW><id>8440294</id><snippet>ax.set_xlabel('Temperature ($^\circ$C)')
</snippet></ROW><ROW><id>8440367</id><snippet>(guess ** 2.0 + epsl)</snippet></ROW><ROW><id>8440367</id><snippet>(guess ** 2 - num)</snippet></ROW><ROW><id>8440367</id><snippet>diff</snippet></ROW><ROW><id>8440578</id><snippet>sudo</snippet></ROW><ROW><id>8440584</id><snippet>if self.sulfur.here:
    self.screen.blit(self.sulfur.surf, (32,289)) # add the second parenthesis
</snippet></ROW><ROW><id>8440607</id><snippet>def run(self):
    if self.command is not None:
        self.process = Popen( self.command.split(), shell=False, stdout=PIPE, stderr=PIPE)

def stop(self):
    if self.process is not None:
        self.process.terminate()
</snippet></ROW><ROW><id>8441279</id><snippet>tar xzvf db-5.2.36.tar.gz
cd db-5.2.36/build_unix/
CFLAGS="-fPIC" ../dist/configure --enable-static --disable-shared --enable-sql-compat
# you need -fPIC to build the python ext of pysqlite
make
make prefix=/tmp/bdb install
</snippet></ROW><ROW><id>8441279</id><snippet>include_dirs=/tmp/bdb/include
library_dirs=/tmp/bdb/lib
</snippet></ROW><ROW><id>8441279</id><snippet>python setup.py build
python setup.py install
</snippet></ROW><ROW><id>8441279</id><snippet>cd build/lib.linux-x86_64-2.7
python
from pysqlite2 import dbapi2
conn = dbapi2.connect('test.db')
c = conn.cursor()
c.execute('bla bla bla sql')
</snippet></ROW><ROW><id>8441645</id><snippet>__init__</snippet></ROW><ROW><id>8441645</id><snippet>monthMenu=OptionMenu(self.app,month, *months)</snippet></ROW><ROW><id>8441645</id><snippet>self.monthMenu=OptionMenu(self.app,month, *months)</snippet></ROW><ROW><id>8441679</id><snippet>s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
socket.bind(('192.168.0.1', 0))
socket.connect(('...'))
</snippet></ROW><ROW><id>8441753</id><snippet>from openpyxl.reader.excel import load_workbook
from openpyxl.workbook import Workbook
from openpyxl.style import Color, Fill
from openpyxl.cell import Cell

# Load the workbook...
book = load_workbook('foo.xlsx')

# define ws here, in this case I pick the first worksheet in the workbook...
#    NOTE: openpyxl has other ways to select a specific worksheet (i.e. by name
#    via book.get_sheet_by_name('someWorksheetName'))
ws = book.worksheets[0]

## ws is a openpypxl worksheet object
_cell = ws.cell('C1')

# Font properties
_cell.style.font.color.index = Color.GREEN
_cell.style.font.name = 'Arial'
_cell.style.font.size = 8
_cell.style.font.bold = True
_cell.style.alignment.wrap_text = True

# Cell background color
_cell.style.fill.fill_type = Fill.FILL_SOLID
_cell.style.fill.start_color.index = Color.DARKRED

# You should only modify column dimensions after you have written a cell in 
#     the column. Perfect world: write column dimensions once per column
# 
ws.column_dimensions["C"].width = 60.0
</snippet></ROW><ROW><id>8441753</id><snippet>openpyxl/style.py</snippet></ROW><ROW><id>8441753</id><snippet>class Color(HashableObject):
    """Named colors for use in styles."""
    BLACK = 'FF000000'
    WHITE = 'FFFFFFFF'
    RED = 'FFFF0000'
    DARKRED = 'FF800000'
    BLUE = 'FF0000FF'
    DARKBLUE = 'FF000080'
    GREEN = 'FF00FF00'
    DARKGREEN = 'FF008000'
    YELLOW = 'FFFFFF00'
    DARKYELLOW = 'FF808000'
</snippet></ROW><ROW><id>8441995</id><snippet>scapy</snippet></ROW><ROW><id>8441995</id><snippet>[mpenning@hotcoffee tshark_wd]$ tcpdump -n -r sample.pcap 
reading from file sample.pcap, link-type EN10MB (Ethernet)
00:25:42.443559 IP 192.168.12.237.1052 &gt; 192.168.12.236.22: Flags [P.], 
    seq 2445372969:2445373021, ack 1889447842, win 63432, length 52
00:25:42.443607 IP 192.168.12.236.22 &gt; 192.168.12.237.1052: Flags [.], 
    ack 52, win 65535, length 0
00:25:42.443980 IP 192.168.12.236.22 &gt; 192.168.12.237.1052: Flags [P.], 
    seq 1:389, ack 52, win 65535, length 388
</snippet></ROW><ROW><id>8441995</id><snippet>#!/usr/bin/env python
from scapy.all import *
INFILE = 'sample.pcap'
OUTFILE = 'stripped.pcap'
paks = rdpcap(INFILE)
for pak in paks:
    pak[TCP].remove_payload()
wrpcap(OUTFILE, paks)
</snippet></ROW><ROW><id>8441995</id><snippet>[mpenning@hotcoffee tshark_wd]$ tcpdump -n -r stripped.pcap 
reading from file sample.pcap, link-type EN10MB (Ethernet)
00:25:42.443559 IP truncated-ip - 52 bytes missing! 192.168.12.237.1052 
    &gt; 192.168.12.236.22: Flags [P.], seq 2445372969:2445373021, 
    ack 1889447842, win 63432, length 52
00:25:42.443607 IP 192.168.12.236.22 &gt; 192.168.12.237.1052: Flags [.], 
    ack 52, win 65535, length 0
00:25:42.443980 IP truncated-ip - 388 bytes missing! 192.168.12.236.22 
    &gt; 192.168.12.237.1052: Flags [P.], seq 1:389, 
    ack 52, win 65535, length 388
</snippet></ROW><ROW><id>8441995</id><snippet>tcpdump</snippet></ROW><ROW><id>8442104</id><snippet>User</snippet></ROW><ROW><id>8442104</id><snippet>UserProfile</snippet></ROW><ROW><id>8442104</id><snippet>Member</snippet></ROW><ROW><id>8442104</id><snippet>Member</snippet></ROW><ROW><id>8442104</id><snippet>User</snippet></ROW><ROW><id>8442104</id><snippet>User</snippet></ROW><ROW><id>8442104</id><snippet>set_password</snippet></ROW><ROW><id>8442104</id><snippet>user.get_profile().gender</snippet></ROW><ROW><id>8442122</id><snippet># make up some sample (a,b): format might be different to yours but you get the point.
import matplotlib.pyplot as plt
points = [ (1.,2.3), (2.,4.), (3.5,6.) ] # (a1,b1), (a2,b2), ...

plt.hold(True)
plt.xlim(0,4)  # set up the plot limits

for pt in points:
    # plot (x,y) pairs.
    # vertical line: 2 x,y pairs: (a,0) and (a,b)
    plt.plot( [pt[0],pt[0]], [0,pt[1]] )

plt.show()
</snippet></ROW><ROW><id>8442230</id><snippet>from catalog.views import catalog_products_view

urlpatterns = patterns(
    '',
    url(r'^(?P&lt;category&gt;[\w-]+)/$', catalog_products_view, name="catalog_products_view"),
    url(r'^(?P&lt;category&gt;[\w-]+)/(?P&lt;filter1&gt;[\w-]+)/$', catalog_products_view, name="catalog_products_view"),
    url(r'^(?P&lt;category&gt;[\w-]+)/(?P&lt;filter1&gt;[\w-]+)/(?P&lt;filter2&gt;[\w-]+)/$', catalog_products_view, name="catalog_products_view"),
    url(r'^(?P&lt;category&gt;[\w-]+)/(?P&lt;filter1&gt;[\w-]+)/(?P&lt;filter2&gt;[\w-]+)/(?P&lt;filter3&gt;[\w-]+)/$', catalog_products_view, name="catalog_products_view"),
)
</snippet></ROW><ROW><id>8442230</id><snippet>def catalog_products_view(request, category, filter1=None, filter2=None, filter3=None):
    # some code here
</snippet></ROW><ROW><id>8442230</id><snippet>def catalog_products_view(request, category, **kwargs):
    filter1 = kwargs['filter1']
    filter2 = kwargs['filter2']
    ....
    filterN = kwargs['filterN']
    # some code here
</snippet></ROW><ROW><id>8442318</id><snippet>f = open('foo.dat','rb') # NOTE b for binary
data = f.read() 
print len(data), f.tell() 
print repr(data[60:70])
</snippet></ROW><ROW><id>8442318</id><snippet>'\x1a'</snippet></ROW><ROW><id>8442318</id><snippet>chr(26)</snippet></ROW><ROW><id>8442377</id><snippet>print [item.lower() for item in [row[index] for index in (1, 0)]]
</snippet></ROW><ROW><id>8442377</id><snippet> print [item.lower() for item in row[::-1][-2:]] # Slicing in 2 steps: [::-1] reverses the list and [-2:] returns the last two items of the reversed list
</snippet></ROW><ROW><id>8442377</id><snippet> print [item.lower() for item in row[1::-1] # Same thing, but it helps to break these things up into steps
</snippet></ROW><ROW><id>8442671</id><snippet>while True</snippet></ROW><ROW><id>8442671</id><snippet># ... pygame and app initialization

# get screen size
info = pygame.display.Info()
sw = info.current_w
sh = info.current_h

# initial position
x = y = 0
# initial direction
dx = 5
dy = 2

while True:

    # update position with direction
    x += dx
    y += dy

    # check bounds
    if x - dx &lt; 0 or x + dx &gt; sw:
        dx = -dx
    if y - dy &lt; 0 or y + dy &gt; sh:
        dy = -dy

    # then draw and use x/y in your drawing instructions!
    # ... pygame events ...
</snippet></ROW><ROW><id>8442858</id><snippet>re.escape()</snippet></ROW><ROW><id>8442858</id><snippet>replacement = replacement.replace("\\", "\\\\")
</snippet></ROW><ROW><id>8442858</id><snippet>import re

x = r'hai! \1 &lt;ops&gt; $1 \' \x \\'
print "want to see: "
print x

print "getting: "
print re.sub(".(.).", x, "###")
print "over escaped: "
print re.sub(".(.).", re.escape(x), "###")
print "could work: "
print re.sub(".(.).", x.replace("\\", "\\\\"), "###")
</snippet></ROW><ROW><id>8442858</id><snippet>want to see: 
hai! \1 &lt;ops&gt; $1 \' \x \\
getting: 
hai! # &lt;ops&gt; $1 \' \x \
over escaped: 
hai\!\ \1\ \&lt;ops\&gt;\ \$1\ \\'\ \x\ \\
could work: 
hai! \1 &lt;ops&gt; $1 \' \x \\
</snippet></ROW><ROW><id>8443040</id><snippet>def homogeneous_lines (file_name):
    with open(file_name) as fd:
        for line in fd:
            if line.islower() or line.isupper():
                yield line
</snippet></ROW><ROW><id>8443047</id><snippet>if prod_Available &lt; 0:
    status = 0
else:
    status=1

data = {'available': prod_Available, 'status': status, 'sumquantity': sumOfQuantity, 'quanity': quantity}
array.append(data)         
if status == 0:
   break
</snippet></ROW><ROW><id>8443350</id><snippet>tornado/web.py</snippet></ROW><ROW><id>8443350</id><snippet>prepare</snippet></ROW><ROW><id>8443350</id><snippet>import tornado.ioloop
import tornado.web
from tornado import escape

class MainHandler(tornado.web.RequestHandler):
    def prepare(self):
        # work out url regex match as in
        # tornado/web.py:1283
        handlers = self.application._get_host_handlers(self.request)
        for spec in handlers:
            match = spec.regex.match(self.request.path)
            def unquote(s):
                if s is None: return s
                return escape.url_unescape(s, encoding=None)
            args = [unquote(s) for s in match.groups()]
            # do something with args

    def get(self, who):
        self.write('hello ' + who)

if __name__ == "__main__":
    application = tornado.web.Application([
        (r"/(\w+)", MainHandler),
    ])
    application.listen(8999)
    tornado.ioloop.IOLoop.instance().start()
</snippet></ROW><ROW><id>8443438</id><snippet>(dog|cat)</snippet></ROW><ROW><id>8443438</id><snippet>&gt;&gt;&gt; mysentence = ('i have a dog and a cat', 'i have a cat and a dog', 'i have a cat', 'i have a dog')
&gt;&gt;&gt; import re                                                                   
&gt;&gt;&gt; pattern = re.compile("(dog|cat) ")
&gt;&gt;&gt; [x for x in mysentence if not pattern.search(x)]                            
['i have a cat', 'i have a dog']
</snippet></ROW><ROW><id>8443646</id><snippet>defaultdict</snippet></ROW><ROW><id>8443646</id><snippet>collections</snippet></ROW><ROW><id>8443646</id><snippet>dict</snippet></ROW><ROW><id>8443646</id><snippet>defaultdict</snippet></ROW><ROW><id>8443646</id><snippet>0</snippet></ROW><ROW><id>8443646</id><snippet>defaultdict</snippet></ROW><ROW><id>8443646</id><snippet>defaultdict</snippet></ROW><ROW><id>8443646</id><snippet>&gt;&gt;&gt; A = [{u'CI': {u'RP': 1}}, {u'CI': {u'RP': 1}},  {u'JI': {u'RP': 1}}]
&gt;&gt;&gt; B = defaultdict(lambda: defaultdict(int))
&gt;&gt;&gt; for d in A:
...     for (key,d2) in d.iteritems():
...         for (key2, value) in d2.iteritems():
...             B[key][key2] += value
... 
&gt;&gt;&gt; B.items()
[(u'CI', defaultdict(&lt;type 'int'&gt;, {u'RP': 2})), (u'JI', defaultdict(&lt;type 'int'&gt;, {u'RP': 1}))]
</snippet></ROW><ROW><id>8443646</id><snippet>defaultdict</snippet></ROW><ROW><id>8443646</id><snippet>&gt;&gt;&gt; [{key: dict(value)} for key,value in B.iteritems()]
[{u'CI': {u'RP': 2}}, {u'JI': {u'RP': 1}}]
</snippet></ROW><ROW><id>8443963</id><snippet>import</snippet></ROW><ROW><id>8443963</id><snippet>somescript.py</snippet></ROW><ROW><id>8443963</id><snippet>import somescript
args = ['one','two']
somescript.main(args)
</snippet></ROW><ROW><id>8444001</id><snippet>twisted.internet</snippet></ROW><ROW><id>8444001</id><snippet>twisted.py</snippet></ROW><ROW><id>8444001</id><snippet>internet</snippet></ROW><ROW><id>8444001</id><snippet>twisted</snippet></ROW><ROW><id>8444060</id><snippet>uniq</snippet></ROW><ROW><id>8444060</id><snippet>uniq = cur.fetchall()
</snippet></ROW><ROW><id>8444060</id><snippet>uniq = cur.fetchall()[0]
</snippet></ROW><ROW><id>8444060</id><snippet>queryuniq = "SELECT COUNT(distinct src_ip), COUNT(distinct video_id)FROM video"
cur.execute(queryuniq)
uniq = cur.fetchall()[0]
ip, video = uniq
fd2.write("There are %d ip addresses and %d video in total" %(ip, video))
</snippet></ROW><ROW><id>8444253</id><snippet>md5()</snippet></ROW><ROW><id>8444253</id><snippet>md5()</snippet></ROW><ROW><id>8444253</id><snippet>true</snippet></ROW><ROW><id>8444606</id><snippet>def get_changes_between_objects(object1, object2, excludes=[]):
    """
    Finds the changes between the common fields on two objects

    :param object1: The first object
    :param object2: The second object
    :param excludes: A list of field names to exclude
    """
    changes = {}

    # For every field in the model
    for field in object1._meta.fields:
        # Don't process excluded fields or automatically updating fields
        if not field.name in excludes and not isinstance(field, fields.AutoField):
            # If the field isn't a related field (i.e. a foreign key)..
            if not isinstance(field, fields.related.RelatedField):
                old_val = field.value_from_object(object1)
                new_val = field.value_from_object(object2)
                # If the old value doesn't equal the new value, and they're
                # not both equivalent to null (i.e. None and "")
                if old_val != new_val and not(not old_val and not new_val):
                    changes[field.verbose_name] = (old_val, new_val)

            # If the field is a related field..
            elif isinstance(field, fields.related.RelatedField):
                if field.value_from_object(object1) != field.value_from_object(object2):
                    old_pk = field.value_from_object(object1)
                    try:
                        old_val = field.related.parent_model.objects.get(pk=old_pk)
                    except field.related.parent_model.DoesNotExist:
                        old_val = None

                    new_pk = field.value_from_object(object2)
                    try:
                        new_val = field.related.parent_model.objects.get(pk=new_pk)
                    except field.related.parent_model.DoesNotExist:
                        new_val = None

                    changes[field.verbose_name] = (old_val, new_val)

    return changes
</snippet></ROW><ROW><id>8444606</id><snippet>&gt;&gt;&gt; item = Item.objects.get(pk=1)
&gt;&gt;&gt; item_old = Item.objects.get(pk=1)
&gt;&gt;&gt; print item.my_attribute
'foo'
&gt;&gt;&gt; item.my_attribute = 'bar'
&gt;&gt;&gt; get_changes_between_objects(item, item_old)
{'My Attribute': ('bar', 'foo')}
</snippet></ROW><ROW><id>8445471</id><snippet>toarray</snippet></ROW><ROW><id>8445471</id><snippet>v</snippet></ROW><ROW><id>8445471</id><snippet>n_docs</snippet></ROW><ROW><id>8445471</id><snippet>n_docs</snippet></ROW><ROW><id>8445471</id><snippet>n_terms</snippet></ROW><ROW><id>8445471</id><snippet>v = v.toarray()
vi = np.argsort(v, axis=0)[::-1]
vs = v[vi]
</snippet></ROW><ROW><id>8445471</id><snippet>np.inner</snippet></ROW><ROW><id>8445471</id><snippet>v = (tfidf * tfidf[idx, :]).transpose()
</snippet></ROW><ROW><id>8445515</id><snippet>from multiprocessing import Process
import os

def info(title):
    print title
    print 'module name:', __name__
    print 'parent process:', os.getppid()
    print 'process id:', os.getpid()

def f(name):
    os.setuid(1000)
    info('function f')
    print 'hello', name
    os.system('id')

if __name__ == '__main__':
    info('main line')
    p = Process(target=f, args=('bob',))
    p.start()
    p.join()
</snippet></ROW><ROW><id>8445553</id><snippet>import base64
data = base64.b16decode("01000001B8000102030405")
</snippet></ROW><ROW><id>8445745</id><snippet>sudo('python manage.py collectstatic --noinput', user='www-data')
</snippet></ROW><ROW><id>8445983</id><snippet>import os
import re
for name in (name for name in  os.listdir('/etc/tor/statistiekjes/')
             if re.search(FILE,name)):
    print(repr(name))
</snippet></ROW><ROW><id>8445983</id><snippet>subprocess</snippet></ROW><ROW><id>8445983</id><snippet>os.popen</snippet></ROW><ROW><id>8445983</id><snippet>os.popen</snippet></ROW><ROW><id>8445983</id><snippet>import subprocess
import shlex
proc1 = subprocess.Popen(shlex.split('ls /etc/tor/statistiekjes/'),
                         stdout=subprocess.PIPE)
proc2 = subprocess.Popen(shlex.split('egrep {pat}'.format(pat=FILE)),
                         stdin=proc1.stdout,
                         stdout=subprocess.PIPE,stderr=subprocess.PIPE)

proc1.stdout.close() # Allow proc1 to receive a SIGPIPE if proc2 exits.
out,err=proc2.communicate()
print(out)
</snippet></ROW><ROW><id>8445983</id><snippet>subprocess.Popen</snippet></ROW><ROW><id>8445983</id><snippet>shell=True</snippet></ROW><ROW><id>8445983</id><snippet>shell=True</snippet></ROW><ROW><id>8447352</id><snippet>sys.stdout</snippet></ROW><ROW><id>8447352</id><snippet>import sys
import os

sys.stdout = open(os.devnull, "w")

my_nasty_function()

sys.stdout = sys.__stdout__
</snippet></ROW><ROW><id>8447352</id><snippet>my_nasty_function</snippet></ROW><ROW><id>8447352</id><snippet>sys.__stdout__</snippet></ROW><ROW><id>8447446</id><snippet>$.getJSON('http://localhost:8051').success(function(data) {
    //here `data` will be your `result` in your python application
});
</snippet></ROW><ROW><id>8447446</id><snippet>$.getJSON('http://localhost:8051', function(data){
    // data == result
});
</snippet></ROW><ROW><id>8447446</id><snippet>Content-Type</snippet></ROW><ROW><id>8447446</id><snippet>application/json</snippet></ROW><ROW><id>8447487</id><snippet>from ctypes import *

charptr = POINTER(c_char)

test = CDLL('test.so')
test.initializetest.argtypes = []
test.initializetest.restype = charptr
test.searchtest.argtypes = [charptr]
test.searchtest.restype = c_int

buf = test.initializetest()
test.searchtest(buf)
print cast(buf, c_char_p).value
# TODO Release the "buf" memory or it will leak.
</snippet></ROW><ROW><id>8447487</id><snippet>c_char_p</snippet></ROW><ROW><id>8447487</id><snippet>c_char_p</snippet></ROW><ROW><id>8447487</id><snippet>restype</snippet></ROW><ROW><id>8447487</id><snippet>str</snippet></ROW><ROW><id>8447487</id><snippet>initializetest</snippet></ROW><ROW><id>8447487</id><snippet>POINTER</snippet></ROW><ROW><id>8447487</id><snippet>c_char</snippet></ROW><ROW><id>8447487</id><snippet>searchtest</snippet></ROW><ROW><id>8447487</id><snippet>c_char_p</snippet></ROW><ROW><id>8447487</id><snippet>c_char_p</snippet></ROW><ROW><id>8447487</id><snippet>searchtest</snippet></ROW><ROW><id>8447487</id><snippet>&gt;&gt;&gt; libc.memset.argtypes = [c_char_p, c_int, c_int]
&gt;&gt;&gt; foo = 'Python'
&gt;&gt;&gt; foo
'Python'
&gt;&gt;&gt; libc.memset(foo, ord('x'), 3)
44808532
&gt;&gt;&gt; foo
'xxxhon'
&gt;&gt;&gt;
</snippet></ROW><ROW><id>8447487</id><snippet>argtypes</snippet></ROW><ROW><id>8447487</id><snippet>ctypes</snippet></ROW><ROW><id>8447487</id><snippet>c_char_p</snippet></ROW><ROW><id>8447487</id><snippet>str</snippet></ROW><ROW><id>8447965</id><snippet>urllib2</snippet></ROW><ROW><id>8447965</id><snippet>cooklib</snippet></ROW><ROW><id>8447965</id><snippet>urllib2</snippet></ROW><ROW><id>8448011</id><snippet>nonlocal</snippet></ROW><ROW><id>8448011</id><snippet>def foo():
    a = []
    def bar():
        a.append(1)
    bar()
    bar()
    print a

foo()
</snippet></ROW><ROW><id>8448011</id><snippet>[1, 1]
</snippet></ROW><ROW><id>8448238</id><snippet>def function(data):
   try:
      for element in data:
         --- do something----
         function(element)
   except TypeError:
      pass
</snippet></ROW><ROW><id>8448255</id><snippet>del</snippet></ROW><ROW><id>8448255</id><snippet>x = {'a': 5, 'b': 2, 'c': 3}
del x['a'], x['b']
print x
{'c': 3}
</snippet></ROW><ROW><id>8448476</id><snippet>results = db.query("SELECT * FROM users WHERE id=$id", vars={'id':10})
</snippet></ROW><ROW><id>8448477</id><snippet>def new_task():
    while True:
        temp = open(filename, 'a')
        new_entry = raw_input('Enter New Task: ')
        if new_entry == 'exit' or new_entry == 'quit':
            break
        if new_entry == 'preview':
            print '\n'
            preview()
            break
        temp.write(new_entry + '\n')
        temp.close()
</snippet></ROW><ROW><id>8448477</id><snippet>temp.close</snippet></ROW><ROW><id>8448477</id><snippet>temp.close()</snippet></ROW><ROW><id>8448477</id><snippet>temp = open(filename, 'a')</snippet></ROW><ROW><id>8448591</id><snippet>$push</snippet></ROW><ROW><id>8448591</id><snippet>team</snippet></ROW><ROW><id>8448591</id><snippet>$push</snippet></ROW><ROW><id>8448648</id><snippet>if</snippet></ROW><ROW><id>8448648</id><snippet>elif</snippet></ROW><ROW><id>8448648</id><snippet>else</snippet></ROW><ROW><id>8448648</id><snippet>{% if data.some_state %}
    Display some markup
{% elif data.some_state_2 %}
    State 2 different view
{% elif data.process_data %}
    Display some list of data
{% endif %}
</snippet></ROW><ROW><id>8448720</id><snippet>with open(...) as f:
    for line in f:
        &lt;do something with line&gt;
</snippet></ROW><ROW><id>8448720</id><snippet>with</snippet></ROW><ROW><id>8448720</id><snippet>for line in f</snippet></ROW><ROW><id>8448720</id><snippet>f</snippet></ROW><ROW><id>8448819</id><snippet>CREATE OR REPLACE FUNCTION ST_MultiLine_Nearest_Point(amultiline geometry,apoint geometry) 
  RETURNS geometry AS
$BODY$
DECLARE
    mindistance float8;
    adistance float8;
    nearestlinestring geometry;
    nearestpoint geometry;
    simplifiedline geometry;
    line geometry;
BEGIN
        simplifiedline:=ST_LineMerge(amultiline);
        IF ST_NumGeometries(simplifiedline) &lt;= 1 THEN
            nearestpoint:=ST_Line_Interpolate_Point(simplifiedline, ST_Line_Locate_Point(simplifiedline,apoint) );
            RETURN nearestpoint;
      END IF;
--      *Change your mindistance according to your projection, it should be stupidly big*
        mindistance := 100000; 
        FOR line IN SELECT (ST_Dump(simplifiedline)).geom as geom LOOP
                adistance:=ST_Distance(apoint,line);
            IF adistance &lt; mindistance THEN
                mindistance:=adistance;
                nearestlinestring:=line; 
            END IF;
        END LOOP;
        RETURN ST_Line_Interpolate_Point(nearestlinestring,ST_Line_Locate_Point(nearestlinestring,apoint));
    END;
    $BODY$
      LANGUAGE 'plpgsql' IMMUTABLE STRICT; 
</snippet></ROW><ROW><id>8449520</id><snippet>False</snippet></ROW><ROW><id>8449520</id><snippet>strip()</snippet></ROW><ROW><id>8449520</id><snippet>&gt;&gt;&gt; starring = ['Vashu Bhagnani', 'Khemchand Bhagnani', ' ', 'Jacky Bhagnani', ' ', 'Prashant Shah', ' ']                                      
&gt;&gt;&gt; starring = filter(lambda name: name.strip(), starring)
&gt;&gt;&gt; starring
['Vashu Bhagnani', 'Khemchand Bhagnani', 'Jacky Bhagnani', 'Prashant Shah']
</snippet></ROW><ROW><id>8449520</id><snippet>&gt;&gt;&gt; [name for name in starring if name.strip()]
['Vashu Bhagnani', 'Khemchand Bhagnani', 'Jacky Bhagnani', 'Prashant Shah']
</snippet></ROW><ROW><id>8450362</id><snippet>StopValidation</snippet></ROW><ROW><id>8450362</id><snippet>if not field.raw_data or isinstance(field.raw_data[0], basestring) and not field.raw_data[0].strip():
    field.errors[:] = []
    raise StopValidation()
</snippet></ROW><ROW><id>8450362</id><snippet>from wtforms.validators import StopValidation

def myvalidator(form, field):
    if not form.some_checkbox_field.data:
        # clear out processing errors
        field.errors[:] = []
        # Stop further validators running
        raise StopValidation()
</snippet></ROW><ROW><id>8450362</id><snippet>from wtforms import BooleanField, IntegerField, Form, validators as v

class SomeForm(Form):
    some_checkbox_field = BooleanField('Enable MyNumber')
    mynumber = IntegerField('', [myvalidator, v.NumberRange(min=5, max=50)])
</snippet></ROW><ROW><id>8450514</id><snippet>&gt;&gt;&gt; print '%5s' % 'aa'
   aa
&gt;&gt;&gt; print '%5s' % 'aaa'
  aaa
&gt;&gt;&gt; print '%5s' % 'aaaa'
 aaaa
&gt;&gt;&gt; print '%5s' % 'aaaaa'
aaaaa
</snippet></ROW><ROW><id>8450514</id><snippet>%</snippet></ROW><ROW><id>8450514</id><snippet>s</snippet></ROW><ROW><id>8450514</id><snippet>5</snippet></ROW><ROW><id>8450514</id><snippet>&gt;&gt;&gt; dict_ = {'a': 1, 'ab': 1, 'abc': 1}
&gt;&gt;&gt; for item in dict_.items():
...     print 'value %3s - num of occurances = %d' % item # %d is the token of integers
... 
value   a - num of occurances = 1
value  ab - num of occurances = 1
value abc - num of occurances = 1
</snippet></ROW><ROW><id>8450514</id><snippet>itertools</snippet></ROW><ROW><id>8450514</id><snippet>&gt;&gt;&gt; [''.join(perm) for i in range(1, len(s)) for perm in it.permutations(s, i)]
['a', 'b', 'c', 'd', 'ab', 'ac', 'ad', 'ba', 'bc', 'bd', 'ca', 'cb', 'cd', 'da', 'db', 'dc', 'abc', 'abd', 'acb', 'acd', 'adb', 'adc', 'bac', 'bad', 'bca', 'bcd', 'bda', 'bdc', 'cab', 'cad', 'cba', 'cbd', 'cda', 'cdb', 'dab', 'dac', 'dba', 'dbc', 'dca', 'dcb']
</snippet></ROW><ROW><id>8450514</id><snippet>combinations</snippet></ROW><ROW><id>8450514</id><snippet>count()</snippet></ROW><ROW><id>8450555</id><snippet>__init__()</snippet></ROW><ROW><id>8450555</id><snippet>class Point(object):
    def __init__(x, y):
        self.x = x
        self.y = y

    @staticmethod
    def init_from_point(obj):
        return Point(obj.x, obj.y)
</snippet></ROW><ROW><id>8450555</id><snippet>obj = Point.init_from_point(obj)</snippet></ROW><ROW><id>8450555</id><snippet>__init__()</snippet></ROW><ROW><id>8450658</id><snippet>fork_bare(path, **kwargs)  
Fork a bare git repository from this repo 
path is the full path of the new repo (traditionally ends with name.git)  
options is any additional options to the git clone command 
Returns git.Repo (the newly forked repo)
</snippet></ROW><ROW><id>8450658</id><snippet>git = repo.git
git.checkout('head', b="my_new_branch") 
</snippet></ROW><ROW><id>8450880</id><snippet>return Py_BuildValue("");
</snippet></ROW><ROW><id>8451454</id><snippet>import yum

yb = yum.YumBase()
if yb.rpmdb.searchNevra(name='make'):
   print "installed"
else:
   print "not installed"
</snippet></ROW><ROW><id>8451463</id><snippet>help('modules')
</snippet></ROW><ROW><id>8451563</id><snippet>from Tkinter  import *

ALL=N+S+E+W

class Application(Frame):

    def __init__(self,master=None):
        Frame.__init__(self,master)

        # the UI is made up of two major areas: a bottom row
        # of buttons, and a top area that fills the result of 
        # UI
        top_frame = Frame(self)
        button_frame = Frame(self)

        button_frame.pack(side="bottom", fill="x")
        top_frame.pack(side="top", fill="both", expand=True)

        # top frame is made up of three sections: two smaller
        # regions on the left, and a larger region on the right
        ul_frame = Frame(top_frame, background="green", width=200)
        ll_frame = Frame(top_frame, background="blue", width=200)
        right_frame = Frame(top_frame, background="red")

        ul_frame.grid(row=0, column=0, sticky=ALL)
        ll_frame.grid(row=1, column=0, sticky=ALL)
        right_frame.grid(row=0, column=1, rowspan=2, sticky=ALL)
        top_frame.columnconfigure(1, weight=1)
        top_frame.rowconfigure(0, weight=1)
        top_frame.rowconfigure(1, weight=1)

        # the right frame is made up of two widgets, an entry
        # on top and a text below
        entry = Entry(right_frame)
        text = Text(right_frame)

        entry.pack(side="top", fill="x")
        text.pack(side="top", fill="both", expand=True)

        # the button frame has five equally spaced buttons
        for color in ('Red', 'Blue', 'Green', 'Black'):
            b = Button(button_frame, text=color)
            b.pack(side="left", fill="x", expand=True)
        quit_button = Button(button_frame, text="Quit")
        quit_button.pack(side="left", fill="x", expand=True)

root = Tk()
app = Application(root)
app.pack(fill="both", expand=True)
root.mainloop()
</snippet></ROW><ROW><id>8451584</id><snippet>Number</snippet></ROW><ROW><id>8451584</id><snippet>Rotations</snippet></ROW><ROW><id>8451584</id><snippet>Number</snippet></ROW><ROW><id>8451584</id><snippet>Rotations.append(list(Number))
</snippet></ROW><ROW><id>8451689</id><snippet>sys.stdout.write</snippet></ROW><ROW><id>8451689</id><snippet>type(sys.stdout)</snippet></ROW><ROW><id>8451689</id><snippet>while 1:
    x = sys.stdin.readline()
    sys.stdout.write("got-" + x) # x already contains newline
    sys.stdout.flush() # flush the buffer
</snippet></ROW><ROW><id>8452132</id><snippet>cp ./*h10v03* /other/directory/
</snippet></ROW><ROW><id>8452132</id><snippet>import os
import shutil

src_dir = "/some/path/"
target_dir = "/some/other/path/"
searchstring = "h10v03"

for f in os.listdir(src_dir):
   if searchstring in f and os.path.isfile(os.path.join(src_dir, f)):
      shutil.copy2(os.path.join(src_dir, f), target_dir)
      print "COPY", f
</snippet></ROW><ROW><id>8452132</id><snippet>import glob
import os
import shutil

for f in glob.glob("/some/path/*2000*h10v03*"):
   print f
   shutil.copy2(f, os.path.join("/some/target/dir/", os.path.basename(f)))
</snippet></ROW><ROW><id>8452268</id><snippet>command = 'pylint'
</snippet></ROW><ROW><id>8452268</id><snippet>command = 'pylint.bat'
</snippet></ROW><ROW><id>8452268</id><snippet>shell=True</snippet></ROW><ROW><id>8452268</id><snippet>Popen()</snippet></ROW><ROW><id>8452609</id><snippet>form.mako</snippet></ROW><ROW><id>8452609</id><snippet>htmlfill</snippet></ROW><ROW><id>8452609</id><snippet>&lt;!-- new_model_form.mako --&gt;
&lt;form ...&gt;
&lt;/form&gt;
</snippet></ROW><ROW><id>8452609</id><snippet>from pyramid.renderers import render

@view_config(..., renderer="new_model.mako")
def new_model(self):
    raw_form_html = render('new_model_form.mako', request, {...})
    form_html = htmlfill(raw_form_html, ...)
    return {
        'form_html': form_html,
    }
</snippet></ROW><ROW><id>8452609</id><snippet>&lt;!-- new_model.mako --&gt;
&lt;% inherit file='base.mako' %&gt;

${form_html | n}
</snippet></ROW><ROW><id>8452609</id><snippet>n</snippet></ROW><ROW><id>8452609</id><snippet>Response</snippet></ROW><ROW><id>8452609</id><snippet>from pyramid.renderers import render

@view_config(...) # no renderer needed
def new_model(self):
    raw_html = render('new_model.mako', request, {...})
    html = htmlfill(raw_html, ...)
    resp = request.response
    resp.body = html
    return resp
</snippet></ROW><ROW><id>8452661</id><snippet>u''</snippet></ROW><ROW><id>8452661</id><snippet>print u'{:─^10}'.format(u'')
</snippet></ROW><ROW><id>8452697</id><snippet>string = "Here is my dog"

def alternateUppercase(s):
    i = 0
    a = s.split(' ')
    l = []
    for w in a:
        if i:
            l.append(w.upper())
        else:
            l.append(w)
        i = int(not i)
    return " ".join(l)

print alternateUppercase(string)
</snippet></ROW><ROW><id>8452700</id><snippet>open</snippet></ROW><ROW><id>8452700</id><snippet>for</snippet></ROW><ROW><id>8452992</id><snippet>&gt;&gt;&gt; s = 'hi'
&gt;&gt;&gt; [ord(c) for c in s]
[104, 105]
</snippet></ROW><ROW><id>8453091</id><snippet>import twilio.rest
import csv

account = &lt;ACCOUNT_SID&gt;
token = &lt;ACCOUNT_TOKEN&gt;

client = twilio.rest.TwilioRestClient(account, token)

csvout = open("calls.csv","wb")
writer = csv.writer(csvout)

current_page = 0
page_size = 50
started_after = "20111208"

test = True

while test:

     try:
         calls_page = client.calls.list(page=current_page, page_size=page_size, started_after=started_after)

         for calls in calls_page:
             writer.writerow( (calls.sid, calls.to, calls.duration, calls.start_time) )

         current_page += 1
     except:
         test = False
</snippet></ROW><ROW><id>8453379</id><snippet>reload(module_name)
</snippet></ROW><ROW><id>8453486</id><snippet>cgi-bin</snippet></ROW><ROW><id>8453486</id><snippet>cgi-bin</snippet></ROW><ROW><id>8453486</id><snippet>chmod</snippet></ROW><ROW><id>8453486</id><snippet>755</snippet></ROW><ROW><id>8453486</id><snippet>#!/usr/bin/python

print "Content-type: text/html"
print
print "&lt;pre&gt;"
import os, sys
from cgi import escape
print "&lt;strong&gt;Python %s&lt;/strong&gt;" % sys.version
keys = os.environ.keys()
keys.sort()
for k in keys:
    print "%s\t%s" % (escape(k), escape(os.environ[k]))
print "&lt;/pre&gt;"
</snippet></ROW><ROW><id>8453486</id><snippet>&lt;!doctype html&gt;
&lt;html lang="en"&gt;
&lt;head&gt;
  &lt;meta charset="utf-8"&gt;
  &lt;title&gt;Webpage&lt;/title&gt;
  &lt;meta name="description" content="html5 webpage"&gt;
  &lt;meta name="author" content=""&gt;
  &lt;!--[if lt IE 9]&gt;
  &lt;script src="http://html5shiv.googlecode.com/svn/trunk/html5.js"&gt;&lt;/script&gt;
  &lt;![endif]--&gt;
&lt;/head&gt;
&lt;body&gt;
    &lt;form action="/cgi-bin/test.py"&gt;
    &lt;input name="mystuff" width="500px" /&gt;
    &lt;input type="submit" value="Do" /&gt;
    &lt;/form&gt;
&lt;/body&gt;
&lt;/html&gt;
</snippet></ROW><ROW><id>8453486</id><snippet>test.py</snippet></ROW><ROW><id>8453486</id><snippet>mystuff</snippet></ROW><ROW><id>8453486</id><snippet>except</snippet></ROW><ROW><id>8453486</id><snippet>print "Content-type: text/html"
print
print "&lt;pre&gt;"

import os, sys
import cgi, cgitb
cgitb.enable()

form = cgi.FieldStorage()

try: 
    num = int(form['mystuff'].value)
    print 'The number %d to the 13th power is %d.' % (num, num**13)
except Exception: 
    print 'What am I suposed to do with that?  This is what you call an "err
or message".  Try a number instead'

print "&lt;/pre&gt;"
</snippet></ROW><ROW><id>8453589</id><snippet>&gt;&gt;&gt; A
  array([[ 0,  1,  2,  3,  4],
         [ 5,  6,  7,  8,  9],
         [10, 11, 12, 13, 14],
         [15, 16, 17, 18, 19],
         [20, 21, 22, 23, 24]])
&gt;&gt;&gt; B = NP.array([ 0,  1,  0,  1,  0])

&gt;&gt;&gt; # convert the indexing array to a boolean array
&gt;&gt;&gt; B = NP.array(B, dtype=bool)

&gt;&gt;&gt; # index A against B--indexing array is placed after the ',' because
&gt;&gt;&gt; # you are selecting columns

&gt;&gt;&gt; res = A[:,B]

&gt;&gt;&gt; res
  array([[ 1,  3],
         [ 6,  8],
         [11, 13],
         [16, 18],
         [21, 23]])  
</snippet></ROW><ROW><id>8453620</id><snippet>ord()</snippet></ROW><ROW><id>8453675</id><snippet>param = {"address" : region,
        "sensor" : "false"
        }
</snippet></ROW><ROW><id>8453675</id><snippet>param = [("address", region), ("sensor", "false")]
</snippet></ROW><ROW><id>8453675</id><snippet>encoded_param = urllib.urlencode(param)
url = 'http://maps.googleapis.com/maps/api/geocode/json'
url = url + '?' + encoded_param
result = urlfetch.fetch(url)
</snippet></ROW><ROW><id>8453815</id><snippet>--with-pylons=test.ini</snippet></ROW><ROW><id>8453815</id><snippet>export TEST_INI="test.ini"
env/bin/nosetests
</snippet></ROW><ROW><id>8453815</id><snippet>import os

ini_file = os.environ['TEST_INI']
</snippet></ROW><ROW><id>8454036</id><snippet>stem3</snippet></ROW><ROW><id>8454036</id><snippet>import matplotlib.pyplot as plt
import mpl_toolkits.mplot3d.art3d as art3d
import numpy as np

fig = plt.figure()
ax = fig.add_subplot(1, 1, 1, projection='3d')

N = 100
theta = np.linspace(0, 2*np.pi, N, endpoint=False)
x = np.cos(theta)
y = np.sin(theta)
z = range(N)
for x_, y_, z_ in zip(x, y, z):        
    line=art3d.Line3D(*zip((x_, y_, 0), (x_, y_, z_)), marker='o', markevery=(1, 1))
    ax.add_line(line)
ax.set_xlim3d(-1, 1)
ax.set_ylim3d(-1, 1)
ax.set_zlim3d(0, N)    
plt.show()
</snippet></ROW><ROW><id>8454041</id><snippet>os.path</snippet></ROW><ROW><id>8454041</id><snippet>path = '/Data/a'
</snippet></ROW><ROW><id>8454041</id><snippet>import os
path = os.path.join(r'/Data', 'a')
</snippet></ROW><ROW><id>8454041</id><snippet>path</snippet></ROW><ROW><id>8454041</id><snippet>os.path.join</snippet></ROW><ROW><id>8454041</id><snippet>os.path.join(path, filenames[0]) # Modify to fit your filenames loop accordingly
</snippet></ROW><ROW><id>8454041</id><snippet>path</snippet></ROW><ROW><id>8454152</id><snippet>with</snippet></ROW><ROW><id>8454152</id><snippet>f</snippet></ROW><ROW><id>8454152</id><snippet>f</snippet></ROW><ROW><id>8454152</id><snippet>open</snippet></ROW><ROW><id>8454152</id><snippet>with</snippet></ROW><ROW><id>8454152</id><snippet>__enter__</snippet></ROW><ROW><id>8454152</id><snippet>__exit__</snippet></ROW><ROW><id>8454152</id><snippet>Objects/fileobject.c</snippet></ROW><ROW><id>8454152</id><snippet>file_methods</snippet></ROW><ROW><id>8454152</id><snippet>{"__enter__", (PyCFunction)file_self,     METH_NOARGS,  enter_doc},
{"__exit__",  (PyCFunction)file_exit,     METH_VARARGS, exit_doc},
</snippet></ROW><ROW><id>8454152</id><snippet>__enter__</snippet></ROW><ROW><id>8454152</id><snippet>static PyObject *
file_self(PyFileObject *f)
{
    if (f-&gt;f_fp == NULL)
        return err_closed();
    Py_INCREF(f);
    return (PyObject *)f;
}
</snippet></ROW><ROW><id>8454152</id><snippet>__exit__</snippet></ROW><ROW><id>8454152</id><snippet>static PyObject *
file_exit(PyObject *f, PyObject *args)
{
    PyObject *ret = PyObject_CallMethod(f, "close", NULL);
    if (!ret)
        /* If error occurred, pass through */
        return NULL;
    Py_DECREF(ret);
    /* We cannot return the result of close since a true
     * value will be interpreted as "yes, swallow the
     * exception if one was raised inside the with block". */
    Py_RETURN_NONE;
}
</snippet></ROW><ROW><id>8454205</id><snippet>os.path.split</snippet></ROW><ROW><id>8454205</id><snippet>os.path.join</snippet></ROW><ROW><id>8454205</id><snippet>import os
dir, file = os.path.split(test_infile)
out_file_name = os.path.join(dir, 'test_outfile.csv')
</snippet></ROW><ROW><id>8454205</id><snippet>os.path</snippet></ROW><ROW><id>8454251</id><snippet>parse</snippet></ROW><ROW><id>8454251</id><snippet>xml.dom.minidom.Document</snippet></ROW><ROW><id>8454251</id><snippet>xml.dom</snippet></ROW><ROW><id>8454251</id><snippet>import xml.dom.minidom

d = xml.dom.minidom.parseString('&lt;head&gt;hello&lt;/head&gt;')
d.getElementsByTagName('head')[0].setAttribute('joe', '2')
print d.toxml()
</snippet></ROW><ROW><id>8454251</id><snippet>joe="2"</snippet></ROW><ROW><id>8454251</id><snippet>head</snippet></ROW><ROW><id>8454251</id><snippet>&lt;?xml version="1.0" ?&gt;&lt;head joe="2"&gt;hello&lt;/head&gt;
</snippet></ROW><ROW><id>8454385</id><snippet>site</snippet></ROW><ROW><id>8454385</id><snippet>virtualenv</snippet></ROW><ROW><id>8454385</id><snippet>Using Virtualenv without bin/python</snippet></ROW><ROW><id>8454439</id><snippet>/usr/bin/python</snippet></ROW><ROW><id>8454439</id><snippet>defaults</snippet></ROW><ROW><id>8454439</id><snippet>man python</snippet></ROW><ROW><id>8454439</id><snippet>defaults write com.apple.versioner.python Prefer-32-Bit -bool yes
</snippet></ROW><ROW><id>8454439</id><snippet>lipo</snippet></ROW><ROW><id>8454439</id><snippet>sudo lipo /usr/bin/python2.7 -extract_family i386 -output /usr/local/bin/python2.7-32
sudo chmod 755 /usr/local/bin/python2.7-32
</snippet></ROW><ROW><id>8454467</id><snippet>&gt;&gt;&gt; import random
&gt;&gt;&gt; cells = [['empty'] * 5 for i in range(5)]
&gt;&gt;&gt; for i in range(3):
        x = random.randrange(5)
        y = random.randrange(5)
        cells[x][y] = 'mine'


&gt;&gt;&gt; import pprint
&gt;&gt;&gt; pprint.pprint(cells)
[['empty', 'empty', 'empty', 'empty', 'empty'],
 ['mine', 'empty', 'mine', 'empty', 'empty'],
 ['empty', 'empty', 'empty', 'empty', 'mine'],
 ['empty', 'empty', 'empty', 'empty', 'empty'],
 ['empty', 'empty', 'empty', 'empty', 'empty']]
</snippet></ROW><ROW><id>8454580</id><snippet>result = urlfetch.fetch("http://www.domain.com/",
                        headers={"Authorization": 
                                 "Basic %s" % base64.b64encode("username:password")})
</snippet></ROW><ROW><id>8454666</id><snippet>for i, j in zip(position, value):
    out_file.write(str(i) + '\t' + str(j) + '\n')
</snippet></ROW><ROW><id>8454666</id><snippet>     out_file.write('%s\t%s\n' % (str(i), str(j))
</snippet></ROW><ROW><id>8454666</id><snippet>text = ['%s\t%s' % (str(i), str(j) for i, j in zip(position, value)]
text = '\n'.join(text)
out_file.write(text)
</snippet></ROW><ROW><id>8454876</id><snippet>.</snippet></ROW><ROW><id>8454876</id><snippet>print repr(row)</snippet></ROW><ROW><id>8454876</id><snippet>.</snippet></ROW><ROW><id>8454876</id><snippet>&gt;&gt;&gt; txt = '''\
tom.smith
ben.cohen
scott.friedman
michael.jones
'''.splitlines()
&gt;&gt;&gt; import csv
&gt;&gt;&gt; for row in csv.reader(txt, delimiter='.'):
        print [item.lower() for item in [row[index] for index in (1, 0)]]

['smith', 'tom']
['cohen', 'ben']
['friedman', 'scott']
['jones', 'michael']
</snippet></ROW><ROW><id>8454876</id><snippet>&gt;&gt;&gt; txt = '''\
tom,smith
ben,cohen
scott,friedman
michael,jones
'''.splitlines()
&gt;&gt;&gt; for row in csv.reader(txt):
        print '.'.join([item.lower() for item in [row[index] for index in (1, 0)]])

smith.tom
cohen.ben
friedman.scott
jones.michael
</snippet></ROW><ROW><id>8455043</id><snippet>match</snippet></ROW><ROW><id>8455043</id><snippet>s2</snippet></ROW><ROW><id>8455043</id><snippet>for word in match:
    if word not in s2:
        print 'ok'
</snippet></ROW><ROW><id>8455043</id><snippet>[word for word in match if word not in s2]
</snippet></ROW><ROW><id>8455194</id><snippet>#!/usr/bin/env python
from contextlib import closing
from selenium.webdriver import Firefox # pip install selenium

url = "http://busymovies.appspot.com/News.html?id=2965032"

# use firefox to get page with javascript generated content
with closing(Firefox()) as browser:
    browser.get(url)
    link = browser.find_element_by_link_text("Direct Link")
    print link.get_attribute("href")
</snippet></ROW><ROW><id>8455194</id><snippet>http://www.youtube.com/v/nLJYkat4HpE&amp;hl=en_US&amp;feature=player_embedded&amp;version=3
</snippet></ROW><ROW><id>8455220</id><snippet>&gt;&gt;&gt; z = [(i, x.index(item)) for i, x in enumerate(alist) if item in x][0]
&gt;&gt;&gt; alist[z[0]][z[1]] = blist[z[0]][z[1]]
&gt;&gt;&gt; alist
[['a', 2, 3], [4, 5, 6], [7, 8, 9]]
</snippet></ROW><ROW><id>8455231</id><snippet>dbEngine1</snippet></ROW><ROW><id>8455313</id><snippet>&gt;&gt;&gt; print repr(1323494016.855676)
1323494016.855676
&gt;&gt;&gt; print str(1323494016.855676)
1323494016.86
</snippet></ROW><ROW><id>8455313</id><snippet>d = dict((k, repr(v)) for k, v in d.items())</snippet></ROW><ROW><id>8455313</id><snippet>import sys, csv

d = {'time_final': 1323494016.8556759,
     'time_init': 1323493818.0042379,
     'time_lapsed': 198.85143804550171
}

d = dict((k, repr(v)) for k, v in d.items())

fieldnames = ('time_init', 'time_final', 'time_lapsed')
myWriter = csv.DictWriter(sys.stdout, fieldnames=fieldnames)
headers = dict( (n,n) for n in fieldnames )
myWriter.writerow(headers)
myWriter.writerow(d)
</snippet></ROW><ROW><id>8455313</id><snippet>time_init,time_final,time_lapsed
1323493818.0042379,1323494016.8556759,198.85143804550171
</snippet></ROW><ROW><id>8455313</id><snippet>d = dict((k, (repr(v) if isinstance(v, float) else str(v))) for k, v in d.items())
</snippet></ROW><ROW><id>8455502</id><snippet>#!/usr/bin/env python
import fileinput
from collections import defaultdict, Counter

# count guids
perfile = defaultdict(Counter)
total = Counter()
for line in fileinput.input():
    fname, guid = map(str.strip, line.split(':'))
    perfile[guid][fname] += 1
    total[guid] += 1

# print most common guid first
for guid, count in total.most_common():
    if count &lt; 2: continue # skip printing if count is below threshold
    print '{:&gt;3} {}'.format(count, guid)
    # sorting by filename counts
    for fname, fname_cnt in perfile[guid].most_common():
        print '{:&gt;8} {}'.format(fname_cnt, fname)
</snippet></ROW><ROW><id>8455502</id><snippet>$ python2.7 count-guid.py  input 
  3 E289D834-4421-4DCE-B0A8-94C09978058A
       2 ./A2.Spam.TrojanBunnies/Files/File1.wxs
       1 ./A2.Spam.TrojanBunnies/Files/File2.wxs
  2 083863F1-70DE-11D0-BD40-00A0C911CE86
       2 ./A2.Spam.TrojanBunnies/Files/Files.wxs
</snippet></ROW><ROW><id>8455573</id><snippet>print "%s wrote:" % self.client_address[0]
</snippet></ROW><ROW><id>8455573</id><snippet>self.client_address[0]</snippet></ROW><ROW><id>8455684</id><snippet>app = webapp2.WSGIApplication([('/', MainPage), ('/product/.*', MainPage)], debug=True)
</snippet></ROW><ROW><id>8455799</id><snippet>contents</snippet></ROW><ROW><id>8455799</id><snippet>django/utils/xmlutils.py</snippet></ROW><ROW><id>8455799</id><snippet>"""
Utilities for XML generation/parsing.
"""

from xml.sax.saxutils import XMLGenerator

class SimplerXMLGenerator(XMLGenerator):
    def addQuickElement(self, name, contents=None, attrs=None):
        "Convenience method for adding an element with no children"
        if attrs is None: attrs = {}
        self.startElement(name, attrs)
        if contents is not None:
            self.characters(contents)
        self.endElement(name)
</snippet></ROW><ROW><id>8455799</id><snippet>contents</snippet></ROW><ROW><id>8455799</id><snippet>x.addQuickElement(name, attrs=attrs)</snippet></ROW><ROW><id>8455799</id><snippet>short_empty_elements</snippet></ROW><ROW><id>8455799</id><snippet>XMLGenerator.__init__</snippet></ROW><ROW><id>8455799</id><snippet>xml.sax.saxutils.XMLGenerator.startElement</snippet></ROW><ROW><id>8456003</id><snippet>stuff = """
Other stuff
[quote user2] 
[quote user1]Hello[/quote] 
World 
[/quote] 
Other stuff after the stuff
"""

from pyparsing import (Word, printables, originalTextFor, Literal, OneOrMore, 
    ZeroOrMore, Forward, Suppress)

# prototype username
username = Word(printables, excludeChars=']')

# BBCODE quote tags
openQuote = originalTextFor(Literal("[") + "quote" + username + "]")
closeQuote = Literal("[/quote]")

# use negative lookahead to not include BBCODE quote tags in tbe body of the quote
contentWord = ~(openQuote | closeQuote) + (Word(printables,excludeChars='[') | '[')
content = originalTextFor(OneOrMore(contentWord))

# define recursive definition of quote, suppressing any nested quotes
quotes = Forward()
quotes &lt;&lt; ( openQuote + ZeroOrMore( Suppress(quotes) | content ) + closeQuote )

# put separate tokens back together
quotes.setParseAction(lambda t : '\n'.join(t))

# quote extractor
for q in quotes.searchString(stuff):
    print q[0]

# nested quote stripper
print quotes.transformString(stuff)
</snippet></ROW><ROW><id>8456003</id><snippet>[quote user2]
World
[/quote]

Other stuff
[quote user2]
World
[/quote] 
Other stuff after the stuff
</snippet></ROW><ROW><id>8456076</id><snippet>gtk.Table</snippet></ROW><ROW><id>8456076</id><snippet>homogeneous</snippet></ROW><ROW><id>8456076</id><snippet>False</snippet></ROW><ROW><id>8456115</id><snippet>class MyRequestHandler(webapp.RequestHandler):
    def get(self):
        import json
        result = {"filename": xxx} // just an example, result can be any Python object
        json_obj = json.dumps(result)
        self.response.out.write(str(json_obj))
</snippet></ROW><ROW><id>8456277</id><snippet>dictionary</snippet></ROW><ROW><id>8456277</id><snippet>from jinja2 import Template

template = Template("""                                                     
{%- for key, value in dictionary.items() recursive %}                       
  &lt;li&gt;{{ key }}                                                             
    {%- if value %}                                                         
      Recursive {{ key }}, {{value}}                                        
      &lt;ul&gt;{{ loop(value.items())}}&lt;/ul&gt;                                     
    {%- endif %}                                                            
  &lt;/li&gt;                                                                     
{%- endfor %}                                                               
""")

print template.render(dictionary={'a': {'b': {'c': {}}}})
</snippet></ROW><ROW><id>8456277</id><snippet>&lt;li&gt;a
    Recursive a, {'b': {'c': {}}}
    &lt;ul&gt;
&lt;li&gt;b
    Recursive b, {'c': {}}
    &lt;ul&gt;
&lt;li&gt;c
&lt;/li&gt;&lt;/ul&gt;
&lt;/li&gt;&lt;/ul&gt;
&lt;/li&gt;
</snippet></ROW><ROW><id>8456277</id><snippet>b</snippet></ROW><ROW><id>8456277</id><snippet>key</snippet></ROW><ROW><id>8456277</id><snippet>value</snippet></ROW><ROW><id>8456755</id><snippet>'3e-12'</snippet></ROW><ROW><id>8456755</id><snippet>old = [('GCK', '3e-12'), ('ist', '6e-30'), ('iso', '5e-15'), ('tig', '5e-77')]
new = [(name, float(x)) for name,x in old]
new.sort(key=operator.itemgetter(1))
</snippet></ROW><ROW><id>8456755</id><snippet>old.sort(key=lambda elem: float(elem[1]))
</snippet></ROW><ROW><id>8456799</id><snippet>&gt;&gt;&gt; from daemon import add
&gt;&gt;&gt; r = add.delay(100,20)
&gt;&gt;&gt; r
&lt;AsyncResult: 016a6eac-333c-4606-9f3c-ea3b38dac0ea&gt;
</snippet></ROW><ROW><id>8456799</id><snippet>r</snippet></ROW><ROW><id>8456799</id><snippet>AsyncResult</snippet></ROW><ROW><id>8456799</id><snippet>&gt;&gt;&gt; from daemon import add
&gt;&gt;&gt; r = add.AsyncResult('016a6eac-333c-4606-9f3c-ea3b38dac0ea')
&gt;&gt;&gt; r.get()
</snippet></ROW><ROW><id>8456820</id><snippet>subprocess</snippet></ROW><ROW><id>8456942</id><snippet>from email.mime.text import MIMEText
from email.mime.application import MIMEApplication
from email.utils import formataddr
from email.utils import make_msgid
from email.utils import formatdate

email = MIMEMultipart()
email['From'] = formataddr(('Jane Doe', 'jane@example.com'))
email['Subject'] = u'Test email'
email['Message-Id'] = make_msgid()
email['Date'] = formatdate(localtime=True)
email.attach(MIMEText(u'This is your email contents.'))
email.attach(MIMEApplication('your binary data'))
print email.as_string()
</snippet></ROW><ROW><id>8456942</id><snippet>import smtplib
import os
from email.mime.multipart import MIMEMultipart
from email.mime.application import MIMEApplication
from email.mime.text import MIMEText
from email.utils import make_msgid
from email.utils import formatdate


def make_mail(address,body,format,mylist=[]):
    msg = MIMEMultipart()
    msg['To'] = address
    msg['From'] = 'ggous1@gmail.com'
    msg['Message-Id'] = make_msgid()
    msg['Date'] = formatdate(localtime=True)
    msg.attach(MIMEText(body, 'plain' if format == 'txt' else 'html'))
    for filename in mylist:
        part = MIMEApplication(open(filename).read())
        part.add_header('Content-Disposition',
                'attachment; filename="%s"' % os.path.basename(filename))
        msg.attach(part)
    return msg    

def send_mail(msg):
    srv = smtplib.SMTP('smtp.gmail.com')
    srv.set_debuglevel(1)
    srv.ehlo()
    srv.starttls()
    srv.ehlo()
    srv.login('username','pass')
    srv.sendmail(msg['From'], msg['To'], msg.as_string())
    srv.quit()

if __name__=="__main__":
    address=raw_input('Enter an address to send email in the form "name@host.com" ')
    body=raw_input('Enter the contents of the email')
    format=raw_input('The format is txt or html?')
    question=raw_input('Do you have any files to attach?Yes or No?')
    mylist=[]
    if question=='Yes' or question=='yes':
        fn=raw_input('Enter filename')
        mylist.append(fn)

    msg = make_mail(address,body,format,mylist)
    send_mail(msg)
</snippet></ROW><ROW><id>8456986</id><snippet>def f(x):
    if x == 1:
        return 'first'
    elif x == 2:
        return 'second'
    else:
        return 'other'
</snippet></ROW><ROW><id>8456986</id><snippet>&gt;&gt;&gt; f(1), f(2), f(3), f(4)
('first', 'second', 'other', 'other')
</snippet></ROW><ROW><id>8456986</id><snippet>def condition(lab, val):
    print('testing condition', lab);
    return val

def g():
    if condition(1, True):
        return 'first branch'
    elif condition(2, False):
        return 'second branch'
    else:
        return 'other branch'
    return 'fallthrough'


&gt;&gt;&gt; g()
testing condition 1
'first branch'
</snippet></ROW><ROW><id>8456986</id><snippet>def h():
    if condition(1, True):
        if condition('1b', False):
            return 'first branch'
    elif condition(2, False):
        return 'second branch'
    else:
        return 'other branch'
    return 'fallthrough'

&gt;&gt;&gt; h()
testing condition 1
testing condition 1b
'fallthrough'
</snippet></ROW><ROW><id>8456986</id><snippet>    if CharacterStats.usesSubStats and key in self.subStats:
</snippet></ROW><ROW><id>8457090</id><snippet>class ProductsHandler(webapp.RequestHandler):
    def get(self, resource):
        self.response.headers['Content-Type'] = 'text/plain'
        table = self.request.url
        self.response.out.write(table)
        self.response.out.write("\n")
        self.response.out.write(resource)

def main():
    application = webapp.WSGIApplication([
        ('/products/(.*)', ProductsHandler)
        ],
        debug=True)
    util.run_wsgi_app(application)
</snippet></ROW><ROW><id>8457090</id><snippet>http://localhost:8080/products/table</snippet></ROW><ROW><id>8457090</id><snippet>resource</snippet></ROW><ROW><id>8457090</id><snippet>get</snippet></ROW><ROW><id>8457090</id><snippet>WSGIApplication</snippet></ROW><ROW><id>8457090</id><snippet>url_mapping</snippet></ROW><ROW><id>8457090</id><snippet>('/products/(.*)', ProductsHandler)
</snippet></ROW><ROW><id>8457090</id><snippet>(.*)</snippet></ROW><ROW><id>8457090</id><snippet>get</snippet></ROW><ROW><id>8457090</id><snippet>resource</snippet></ROW><ROW><id>8457090</id><snippet>table</snippet></ROW><ROW><id>8457090</id><snippet>http://localhost:8080/products/fish</snippet></ROW><ROW><id>8457090</id><snippet>class MainHandler(webapp.RequestHandler):
    def get(self):
        table = self.request.url
        self.response.out.write(table)
</snippet></ROW><ROW><id>8457090</id><snippet>http://localhost:8080/</snippet></ROW><ROW><id>8457090</id><snippet>Request</snippet></ROW><ROW><id>8457166</id><snippet>adj = gtk.Adjustment(1, 1, 99, 1, 1, 1)
spinBtn = self.builder.get_object("spinbutton1")
spinBtn.configure(adj, 1, 0)
</snippet></ROW><ROW><id>8457350</id><snippet>w, h = draw.textsize(text, font)
</snippet></ROW><ROW><id>8457638</id><snippet>o=gzip.open(file2,'w')
f=gzip.open(file1,'r'):
LIST=[]

for i,line in enumerate(f):
   if i % 4 != 3:
      LIST.append(line)
   else:
      LIST.append(line)
      b1 = [ord(x) for x in line]
      ave1 = (sum(b1) - 10) / float(len(line) - 1

      # If we've found what we want, save them to the file
      if (ave1 &gt;= 84):
         o.writelines(LIST)

      # Release the values in the list by starting a clean list to work with
      LIST = []
</snippet></ROW><ROW><id>8457693</id><snippet>def func1():
    def func2():
        print("Hello")
    return func2

innerfunc = func1()
innerfunc()
</snippet></ROW><ROW><id>8457693</id><snippet>func1()()
</snippet></ROW><ROW><id>8457738</id><snippet>import bisect
def snap(myGrid, myValue):
    ix = bisect.bisect_right(myGrid, myValue)
    if ix == 0:
        return myGrid[0]
    elif ix == len(myGrid):
        return myGrid[-1]
    else:
        return min(myGrid[ix - 1], myGrid[ix], key=lambda gridValue: abs(gridValue - myValue))
</snippet></ROW><ROW><id>8457769</id><snippet>registration/password_reset_subject.txt</snippet></ROW><ROW><id>8457769</id><snippet>.po</snippet></ROW><ROW><id>8457769</id><snippet>#: forms.py:143
#, python-format
msgid "Password reset on %s"
msgstr "YOUR SUBJECT HERE %s"
</snippet></ROW><ROW><id>8457769</id><snippet># change to your custom view
(r'^password_reset/$', 'your_app.views.password_reset'),
</snippet></ROW><ROW><id>8457769</id><snippet>from django.contrib.auth.views import password_reset as django_password_reset
from .forms import CustomPasswordResetForm

# reuse Django view, but change form
def password_reset(*args, **kwargs):
    kwargs['password_reset_form'] = CustomPasswordResetForm
    django_password_reset(*args, **kwargs):
</snippet></ROW><ROW><id>8457769</id><snippet>class CustomPasswordResetForm(PasswordResetForm):
    def save(self, domain_override=None, email_template_name='registration/password_reset_email.html',
         use_https=False, token_generator=default_token_generator, request=None):
        from django.core.mail import send_mail
        for user in self.users_cache:
            if not domain_override:
                current_site = get_current_site(request)
                site_name = current_site.name
                domain = current_site.domain
            else:
                 site_name = domain = domain_override
            t = loader.get_template(email_template_name)
            c = {
            'email': user.email,
            'domain': domain,
            'site_name': site_name,
            'uid': int_to_base36(user.id),
            'user': user,
            'token': token_generator.make_token(user),
            'protocol': use_https and 'https' or 'http',
            }
            send_mail(_("YOUR SUBJECT HERE %s") % site_name,
                t.render(Context(c)), None, [user.email])
</snippet></ROW><ROW><id>8457797</id><snippet>    "print.always_print_silent": "true",
    "print.show_print_progress": "false",
</snippet></ROW><ROW><id>8457922</id><snippet>from collections import defaultdict

sentences = ['Hi, friend', 'can you help me?']

start_sentence_map = defaultdict(list)
for sentence in sentences:
    start = sentence.split()[0]
    start_sentence_map[start].append(sentence)

for s in ["can", "you", "Hi,", "friend"]:
    print s,":",start_sentence_map.get(s)
</snippet></ROW><ROW><id>8457922</id><snippet>can : ['can you help me?']
you : None
Hi, : ['Hi, friend']
friend : None
</snippet></ROW><ROW><id>8457922</id><snippet>list</snippet></ROW><ROW><id>8457922</id><snippet>list class</snippet></ROW><ROW><id>8458125</id><snippet>while True</snippet></ROW><ROW><id>8458125</id><snippet>q = Queue.Queue()             # word insertion queue
terminate = object()          # sentinel value to tell a thread to terminate

def worker(q):
    while True:
         word = q.get()       # block until next word is available
         if word is terminate:
             break
         insert_word(word)
</snippet></ROW><ROW><id>8458125</id><snippet>for word in wordlist:
    q.put(word)
for i in range(numthreads):
    q.put(terminate)          # terminate all the worker threads
for t in threadlist:
    t.join()                  # wait for them all to finish
</snippet></ROW><ROW><id>8458125</id><snippet>q.task_done</snippet></ROW><ROW><id>8458125</id><snippet>q.join</snippet></ROW><ROW><id>8458282</id><snippet>def rotate(strg,n):
    return strg[n:] + strg[:n]
</snippet></ROW><ROW><id>8458282</id><snippet>&gt;&gt;&gt; rotate("hello", 2)
'llohe'
&gt;&gt;&gt; rotate("hello", -1)
'ohell'
&gt;&gt;&gt; rotate("hello", 1)
'elloh'
&gt;&gt;&gt; rotate("hello", 4)
'ohell'
&gt;&gt;&gt; rotate("hello", -3)
'llohe'
&gt;&gt;&gt; rotate("hello", 6)  # same with -6: no change if n &gt; len(strg)
'hello' 
</snippet></ROW><ROW><id>8458282</id><snippet>def rotate(strg,n):
    n = n % len(strg)
    return strg[n:] + strg[:n]
</snippet></ROW><ROW><id>8458282</id><snippet>&gt;&gt;&gt; rotate("hello", 1)
'elloh'
&gt;&gt;&gt; rotate("hello", 6)
'elloh'
</snippet></ROW><ROW><id>8458337</id><snippet>a=[[0 for y in range(8)] for x in range(8)]
</snippet></ROW><ROW><id>8458451</id><snippet>""</snippet></ROW><ROW><id>8458451</id><snippet>&gt;&gt;&gt; s='The dog ran'
&gt;&gt;&gt; ' '.join(w[::-1] for w in s.split())
'ehT god nar'
</snippet></ROW><ROW><id>8458704</id><snippet>+</snippet></ROW><ROW><id>8458704</id><snippet>str(n)</snippet></ROW><ROW><id>8458704</id><snippet>str(n)</snippet></ROW><ROW><id>8458802</id><snippet>import lxml.html as LH

content='&lt;input name="myInput" value="This is what i want"/&gt;'

doc=LH.fromstring(content)
for val in doc.xpath("//input[@name='myInput']/@value"):
    print(val)
</snippet></ROW><ROW><id>8458802</id><snippet>This is what i want
</snippet></ROW><ROW><id>8458802</id><snippet>    //input                    # find all input tags
      [@name='myInput']        # such that the name attribute equals myInput
      /@value                  # return the value of the value attribute           
</snippet></ROW><ROW><id>8458863</id><snippet>for row in rows:
    if row["Type"] = 'DEADLINE':
-&gt;print (row["Title"])
</snippet></ROW><ROW><id>8458863</id><snippet>-&gt;</snippet></ROW><ROW><id>8459050</id><snippet>((np.matrix(X).T*np.matrix(A)).A * Y.T.A).sum(1)
</snippet></ROW><ROW><id>8459090</id><snippet>class MyTextInput(TextInput):
    def __init__(self, error_class=u'has_errors'):
        super(MyTextInput, self).__init__()
        self.error_class = error_class

    def __call__(self, field, **kwargs):
        if field.errors:
            c = kwargs.pop('class', '') or kwargs.pop('class_', '')
            kwargs['class'] = u'%s %s' % (self.error_class, c)
        return super(MyTextInput, self).__call__(field, **kwargs)
</snippet></ROW><ROW><id>8459090</id><snippet>class AdForm(Form):

    name = TextField(_('Name'), [validators.Length(min=4, max=50,
                     message=_('Name is required'))], widget=MyTextInput())
    title = TextField(_('title'))
    text = TextAreaField(_('Text'), widget=TextArea())
    phonenumber = TextField(_('Phone number'))
    phoneview = BooleanField(_('Display phone number on site'))
    price = TextField(_('Price'))
    password = PasswordField(_('Password'))
    email = TextField(_('Email'))
</snippet></ROW><ROW><id>8459090</id><snippet>.has_errors { border: 1px solid #ff0000 }
</snippet></ROW><ROW><id>8459169</id><snippet>from sets import Set
import csv

source = list(csv.reader(open("account_file.csv")))

accounts = Set(line[0] for line in source)

for account in accounts:
    out = open(account+".csv","w")
    out.write( "\n".join(",".join(x) for x in source if x[0] == account))
    out.close()
</snippet></ROW><ROW><id>8459243</id><snippet>key</snippet></ROW><ROW><id>8459243</id><snippet>list.sort()</snippet></ROW><ROW><id>8459243</id><snippet>my_list.sort(key=lambda x: x[1])
</snippet></ROW><ROW><id>8459243</id><snippet>my_list.sort(key=operator.itemgetter(1))
</snippet></ROW><ROW><id>8459243</id><snippet>import operator</snippet></ROW><ROW><id>8459440</id><snippet>with open('random_text.txt', 'w') as f:
    f.write('{0:6}{1:6}{2:4}'.format('Atom','word','next'))
</snippet></ROW><ROW><id>8459440</id><snippet>random_text.txt</snippet></ROW><ROW><id>8459440</id><snippet>Atom  word  next
</snippet></ROW><ROW><id>8459440</id><snippet>{0:6}</snippet></ROW><ROW><id>8459440</id><snippet>'Atom'</snippet></ROW><ROW><id>8459440</id><snippet>{0:&gt;6}</snippet></ROW><ROW><id>8459451</id><snippet>&gt;&gt;&gt; import re
&gt;&gt;&gt; example = 'abcdefabcdefabcdefg'
&gt;&gt;&gt; for match in re.finditer('abc', example):
        print match.start(), match.end()
0 3
6 9 
12 15
</snippet></ROW><ROW><id>8460209</id><snippet>brew install python
brew install sdl sdl_image sdl_mixer sdl_ttf smpeg portmidi 
/usr/local/share/python/pip install hg+http://bitbucket.org/pygame/pygame
</snippet></ROW><ROW><id>8460646</id><snippet>STATICFILES_DIRS = (
                '/path/to/static',
)
</snippet></ROW><ROW><id>8460660</id><snippet>import argparse

parser = argparse.ArgumentParser()
group = parser.add_mutually_exclusive_group()
group.add_argument('-k', action='store_true')
group.add_argument('-r', action='store_true')
group.add_argument('-b', action='store_true')
group.add_argument('-p', action='store_true')
parser.parse_args()
</snippet></ROW><ROW><id>8460660</id><snippet>$ python test.py -k -r -b -p
usage: test.py [-h] [-k | -r | -b | -p]
test.py: error: argument -r: not allowed with argument -k
</snippet></ROW><ROW><id>8460660</id><snippet>argparse.Namespace</snippet></ROW><ROW><id>8460660</id><snippet>parse_args</snippet></ROW><ROW><id>8460660</id><snippet>True</snippet></ROW><ROW><id>8460783</id><snippet>Xpad</snippet></ROW><ROW><id>8460783</id><snippet>Margin on the right</snippet></ROW><ROW><id>8460783</id><snippet>Common</snippet></ROW><ROW><id>8460783</id><snippet>GtkLabel</snippet></ROW><ROW><id>8460783</id><snippet>Add Parent-&gt;Alignment</snippet></ROW><ROW><id>8460783</id><snippet>GtkAlignment</snippet></ROW><ROW><id>8460783</id><snippet>RightPadding</snippet></ROW><ROW><id>8460785</id><snippet>plt.hexbin(x, y, cmap=cm.jet, gridsize = 20, extent=[x_min, x_max, y_min, y_max]) 
</snippet></ROW><ROW><id>8460856</id><snippet>update</snippet></ROW><ROW><id>8460856</id><snippet>FormatLabel</snippet></ROW><ROW><id>8460856</id><snippet>FormatLabel</snippet></ROW><ROW><id>8460856</id><snippet>from progressbar import *
import time

widgets = [FormatLabel(''), ' ', Percentage(), ' ', Bar('/'), ' ', RotatingMarker()]
progressbar = ProgressBar(widgets=widgets, maxval=10)
progressbar.start()
for i in range(0, 11):
    widgets[0] = FormatLabel('&lt;filename-{0}&gt;'.format(i))
    progressbar.update(i)
    time.sleep(.5)
progressbar.finish()
</snippet></ROW><ROW><id>8460926</id><snippet>wrong MAX_WRONG</snippet></ROW><ROW><id>8460926</id><snippet>&lt;</snippet></ROW><ROW><id>8460970</id><snippet>f(6) = 6  *  f(5)                                    = 720
              |------------------------------------
              5  *  f(4)                             = 120
                     |-----------------------------
                     4  *  f(3)                      =  24
                            |----------------------
                            3  * f(2)                =   6
                                  |----------------
                                  2  *  f(1)         =   2
                                         |---------
                                         1  *  f(0)  =   1
                                                |
                                                1    =   1  (base case)
</snippet></ROW><ROW><id>8460975</id><snippet>import re
import sys

seen = set() 

infile = open("/var/log/user.log","r")
outfile = open("/var/log/intruders.txt","w")

pattern = r"\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}"
regexp = re.compile(pattern, re.VERBOSE)

for line in infile:
  mo = regexp.search(line)
  if mo is not None:
     ip_addr = mo.group()
     if ip_addr not in seen:
         seen.add(ip_addr)
         outfile.write("%s\n" % ip_addr)

infile.close()
outfile.close()
</snippet></ROW><ROW><id>8461097</id><snippet>obj</snippet></ROW><ROW><id>8461097</id><snippet>Noddy</snippet></ROW><ROW><id>8461097</id><snippet>isinstance(obj, Noddy)</snippet></ROW><ROW><id>8461097</id><snippet>PyObject *obj</snippet></ROW><ROW><id>8461097</id><snippet>NoddyType</snippet></ROW><ROW><id>8461097</id><snippet>PyObject_IsInstance()</snippet></ROW><ROW><id>8461097</id><snippet>PyObject_IsInstance(obj, &amp;NoddyType)
</snippet></ROW><ROW><id>8461097</id><snippet>NeverSeenNoddyType</snippet></ROW><ROW><id>8461097</id><snippet>NoddyType</snippet></ROW><ROW><id>8461097</id><snippet>NoddyType</snippet></ROW><ROW><id>8461166</id><snippet>izip()</snippet></ROW><ROW><id>8461166</id><snippet>enumerate()</snippet></ROW><ROW><id>8461166</id><snippet>for i, (line1, line2) in enumerate(izip(f1, f2)):
    ...
</snippet></ROW><ROW><id>8461166</id><snippet>i, line1, line2</snippet></ROW><ROW><id>8461166</id><snippet>s1</snippet></ROW><ROW><id>8461166</id><snippet>s2</snippet></ROW><ROW><id>8461166</id><snippet>i, line1, line2 = s1, s2
</snippet></ROW><ROW><id>8461228</id><snippet>os.urandom</snippet></ROW><ROW><id>8461228</id><snippet>random.random</snippet></ROW><ROW><id>8461254</id><snippet>&gt;&gt;&gt; from operator import methodcaller
&gt;&gt;&gt; a = ['2011-12-22 46:31:11','2011-12-20 20:19:17', '2011-12-20 01:09:21']
&gt;&gt;&gt; map(methodcaller("split", " "), a)
[['2011-12-22', '46:31:11'], ['2011-12-20', '20:19:17'], ['2011-12-20', '01:09:21']]
</snippet></ROW><ROW><id>8461367</id><snippet>["bob"["likes:blue, hates:red"]</snippet></ROW><ROW><id>8461367</id><snippet>["bob", ["likes:blue, hates:red"]</snippet></ROW><ROW><id>8461367</id><snippet>dict</snippet></ROW><ROW><id>8461367</id><snippet>{"likes": "blue"}</snippet></ROW><ROW><id>8461822</id><snippet>array.array</snippet></ROW><ROW><id>8461822</id><snippet>fromfile</snippet></ROW><ROW><id>8461982</id><snippet>import string
from ctypes import Structure,c_int,c_char_p,POINTER,cast,pointer,byref,CDLL

class Row(Structure):
    _fields_ = [('cols_count', c_int), 
                ('cols', POINTER(c_char_p))]
    def __init__(self,cols):
        self.cols_count = cols
        # Allocate an array of character pointers
        pc = (c_char_p * cols)()
        self.cols = cast(pc,POINTER(c_char_p))            

class Unit(Structure):
    _fields_ = [('rows_count', c_int),
                ('rows',POINTER(Row))]
    def __init__(self,rows,cols):
        self.rows_count = rows
        # Allocate an array of Row structures.
        # This does NOT call __init__.
        pr = (Row * rows)()
        # Call init manually with the column size.
        for r in pr:
            r.__init__(cols)
        self.rows = cast(pr,POINTER(Row))

unit = Unit(2,3)

# Stuff some strings ('aaaaa','bbbbb',etc.)
for i in xrange(unit.rows_count):
    for j in xrange(unit.rows[i].cols_count):
        unit.rows[i].cols[j] = string.ascii_lowercase[i*5+j]*5

dll = CDLL('test.dll')
dll.my_func(byref(unit))
</snippet></ROW><ROW><id>8461982</id><snippet>#include &lt;stdio.h&gt;

struct _rows {
    int cols_count;
    char **cols;
};

struct _unit {
    int rows_count;
    struct _rows *rows;
};

__declspec(dllexport) int my_func(struct _unit *param)
{
    int i,j;
    for(i=0;i&lt;param-&gt;rows_count;i++)
        for(j=0;j&lt;param-&gt;rows[i].cols_count;j++)
            printf("%d,%d = %s\n",i,j,param-&gt;rows[i].cols[j]);
    return 0;
}
</snippet></ROW><ROW><id>8461982</id><snippet>test.dll: test.c
    cl /W4 /LD test.c
</snippet></ROW><ROW><id>8461982</id><snippet>0,0 = aaaaa
0,1 = bbbbb
0,2 = ccccc
1,0 = fffff
1,1 = ggggg
1,2 = hhhhh
</snippet></ROW><ROW><id>8462337</id><snippet>log(counts)</snippet></ROW><ROW><id>8462337</id><snippet>log(counts)</snippet></ROW><ROW><id>8462337</id><snippet>counts</snippet></ROW><ROW><id>8462337</id><snippet>matplotlib.colors</snippet></ROW><ROW><id>8462337</id><snippet>matplotlib.colors.LinearSegmentedColormap.from_list</snippet></ROW><ROW><id>8462337</id><snippet>import matplotlib.colors as colors
# colourmap from green to red, biased towards the blue end.
# Try out different gammas &gt; 1.0
cmap = colors.LinearSegmentedColormap.from_list('nameofcolormap',['g','r'],gamma=2.0)

# feed cmap into hexbin
hexbin( ...., cmap=cmap )
</snippet></ROW><ROW><id>8462401</id><snippet>days</snippet></ROW><ROW><id>8462401</id><snippet>None</snippet></ROW><ROW><id>8462401</id><snippet>print</snippet></ROW><ROW><id>8462401</id><snippet>days</snippet></ROW><ROW><id>8462401</id><snippet>return</snippet></ROW><ROW><id>8462401</id><snippet>def days(n):
    if n == 0:
        return "Sunday"
    elif n == 1:
        return "Monday"
    elif n == 2:
        return "Tuesday"
    elif n == 3:
        return "Wednesday"
    elif n == 4:
        return "Thrusday"
    elif n == 5:
        return "Friday"
    elif n == 6:
        return "Saturday"
    elif n &gt;= 7:
        return days(n % 7)
</snippet></ROW><ROW><id>8462460</id><snippet>os.listdir</snippet></ROW><ROW><id>8462660</id><snippet>matplotlib.pyplot.xticks</snippet></ROW><ROW><id>8462660</id><snippet>from pylab import hist, show

x = [1.1]*29 + [2]*7 + [3.2]*3 + [5]
hist(x)
show()
</snippet></ROW><ROW><id>8462660</id><snippet>xticks</snippet></ROW><ROW><id>8462660</id><snippet>from pylab import hist, show, xticks

x = [1.1]*29 + [2]*7 + [3.2]*3 + [5]
hist(x)
xticks(range(1, 6))
show()
</snippet></ROW><ROW><id>8462661</id><snippet>import win32com.client
from win32com.client import constants as c

xl = win32com.client.gencache.EnsureDispatch('Excel.Application')
xl.Visible = True
wb = xl.Workbooks.Add()
ws = xl.ActiveSheet
ws.Range('A1').FormulaR1C1 = 'X'
ws.Range('B1').FormulaR1C1 = 'Y'
ws.Range('A2').FormulaR1C1 = 1
ws.Range('A3').FormulaR1C1 = 2
ws.Range('A4').FormulaR1C1 = 3
ws.Range('B2').FormulaR1C1 = 4
ws.Range('B3').FormulaR1C1 = 5
ws.Range('B4').FormulaR1C1 = 6
ws.Range('A1:B4').Select()
ch = ws.Shapes.AddChart().Select()
xl.ActiveChart.ChartType = c.xlXYScatterLines
xl.ActiveChart.SetSourceData(Source=ws.Range("A1:B4"))
</snippet></ROW><ROW><id>8462661</id><snippet>Sub Macro1()
'
' Macro1 Macro
'

'
    ActiveCell.FormulaR1C1 = "X"
    Range("B1").Select
    ActiveCell.FormulaR1C1 = "Y"
    Range("A2").Select
    ActiveCell.FormulaR1C1 = "1"
    Range("A3").Select
    ActiveCell.FormulaR1C1 = "2"
    Range("A4").Select
    ActiveCell.FormulaR1C1 = "3"
    Range("B2").Select
    ActiveCell.FormulaR1C1 = "4"
    Range("B3").Select
    ActiveCell.FormulaR1C1 = "5"
    Range("B4").Select
    ActiveCell.FormulaR1C1 = "6"
    Range("A1:B4").Select
    ActiveSheet.Shapes.AddChart.Select
    ActiveChart.ChartType = xlXYScatterLines
    ActiveChart.SetSourceData Source:=Range("Sheet1!$A$1:$B$4")
End Sub
</snippet></ROW><ROW><id>8462670</id><snippet>from django.core.files.base import ContentFile

# get_pdf_contents should return the binary information for
# a properly formed pdf doc.
pdf_contents = get_pdf_contents()

file_to_be_saved = ContentFile(pdf_contents)

item = Item.objects.get(pk=1)

item.myfilefield.save('blarg.pdf', file_to_be_saved)
</snippet></ROW><ROW><id>8462720</id><snippet>for i in xrange(0,len(values)):
    results[-1].append(values[i])
    if len(filter(lambda x:int(x)&lt;100,results[-1][-3:])) == 3:
        results.append(results[-1][-2:])
        results[-2]=results[-2][:-3]
        if len(results[-2]) == 0:
            del results[-2]


&gt;&gt;&gt; results
[['130', '90', '150', '123', '133', '120', '160'], ['55', '34', '130', '120', '180', '130', '10']]
&gt;&gt;&gt; 
</snippet></ROW><ROW><id>8463046</id><snippet>Pipe()</snippet></ROW><ROW><id>8463046</id><snippet>Queue()</snippet></ROW><ROW><id>8463046</id><snippet>Queue()</snippet></ROW><ROW><id>8463046</id><snippet>Pipe()</snippet></ROW><ROW><id>8463046</id><snippet>Queue()</snippet></ROW><ROW><id>8463046</id><snippet>Pipe()</snippet></ROW><ROW><id>8463046</id><snippet>Pipe()</snippet></ROW><ROW><id>8463046</id><snippet>Queue()</snippet></ROW><ROW><id>8463046</id><snippet>JoinableQueue()</snippet></ROW><ROW><id>8463046</id><snippet>JoinableQueue()</snippet></ROW><ROW><id>8463046</id><snippet>queue.task_done()</snippet></ROW><ROW><id>8463046</id><snippet>queue.join()</snippet></ROW><ROW><id>8463046</id><snippet>mpenning@mpenning-T61:~$ python multi_pipe.py 
Sending 10000 numbers to Pipe() took 0.0369849205017 seconds
Sending 100000 numbers to Pipe() took 0.328398942947 seconds
Sending 1000000 numbers to Pipe() took 3.17266988754 seconds
mpenning@mpenning-T61:~$ python multi_queue.py 
Sending 10000 numbers to Queue() took 0.105256080627 seconds
Sending 100000 numbers to Queue() took 0.980564117432 seconds
Sending 1000000 numbers to Queue() took 10.1611330509 seconds
mpnening@mpenning-T61:~$ python multi_joinablequeue.py 
Sending 10000 numbers to JoinableQueue() took 0.172781944275 seconds
Sending 100000 numbers to JoinableQueue() took 1.5714070797 seconds
Sending 1000000 numbers to JoinableQueue() took 15.8527247906 seconds
mpenning@mpenning-T61:~$
</snippet></ROW><ROW><id>8463046</id><snippet>Pipe()</snippet></ROW><ROW><id>8463046</id><snippet>Queue()</snippet></ROW><ROW><id>8463046</id><snippet>JoinableQueue()</snippet></ROW><ROW><id>8463046</id><snippet>try</snippet></ROW><ROW><id>8463046</id><snippet>except</snippet></ROW><ROW><id>8463046</id><snippet>sys.exc_info()</snippet></ROW><ROW><id>8463046</id><snippet>import sys
def reader(args):
    try:
        # Insert stuff to be multiprocessed here
        return args[0]['that']
    except:
        print "reader(%s) exited with '%s' while multiprocessing" % (args, 
            sys.exc_info())
</snippet></ROW><ROW><id>8463046</id><snippet>reader([{'crash', 'this'}]) exited with '(&lt;type 'exceptions.KeyError'&gt;, 
KeyError(0,), &lt;traceback object at 0x287bdd0&gt;)' while multiprocessing
</snippet></ROW><ROW><id>8463046</id><snippet>"""
multi_pipe.py
"""
from multiprocessing import Process, Pipe
import time

def reader(pipe):
    output_p, input_p = pipe
    input_p.close()    # We are only reading
    while True:
        try:
            msg = output_p.recv()    # Read from the output pipe and do nothing
        except EOFError:
            break

def writer(count, input_p):
    for ii in xrange(0, count):
        input_p.send(ii)             # Write 'count' numbers into the input pipe

if __name__=='__main__':
    for count in [10**4, 10**5, 10**6]:
        output_p, input_p = Pipe()
        reader_p = Process(target=reader, args=((output_p, input_p),))
        reader_p.start()     # Launch the reader process

        output_p.close()       # We no longer need this part of the Pipe()
        _start = time.time()
        writer(count, input_p) # Send a lot of stuff to reader()
        input_p.close()        # Ask the reader to stop when it reads EOF
        reader_p.join()
        print "Sending %s numbers to Pipe() took %s seconds" % (count, 
            (time.time() - _start))
</snippet></ROW><ROW><id>8463046</id><snippet>"""
multi_queue.py
"""
from multiprocessing import Process, Queue
import time

def reader(queue):
    while True:
        msg = queue.get()         # Read from the queue and do nothing
        if (msg == 'DONE'):
            break

def writer(count, queue):
    for ii in xrange(0, count):
        queue.put(ii)             # Write 'count' numbers into the queue
    queue.put('DONE')

if __name__=='__main__':
    for count in [10**4, 10**5, 10**6]:
        queue = Queue()   # reader() reads from queue
                          # writer() writes to queue
        reader_p = Process(target=reader, args=((queue),))
        reader_p.daemon = True
        reader_p.start()     # Launch the reader process

        _start = time.time()
        writer(count, queue)    # Send a lot of stuff to reader()
        reader_p.join()         # Wait for the reader to finish
        print "Sending %s numbers to Queue() took %s seconds" % (count, 
            (time.time() - _start))
</snippet></ROW><ROW><id>8463046</id><snippet>"""
multi_joinablequeue.py
"""
from multiprocessing import Process, JoinableQueue
import time

def reader(queue):
    while True:
        msg = queue.get()         # Read from the queue and do nothing
        queue.task_done()

def writer(count, queue):
    for ii in xrange(0, count):
        queue.put(ii)             # Write 'count' numbers into the queue

if __name__=='__main__':
    for count in [10**4, 10**5, 10**6]:
        queue = JoinableQueue()   # reader() reads from queue
                                  # writer() writes to queue
        reader_p = Process(target=reader, args=((queue),))
        reader_p.daemon = True
        reader_p.start()     # Launch the reader process

        _start = time.time()
        writer(count, queue) # Send a lot of stuff to reader()
        queue.join()         # Wait for the reader to finish
        print "Sending %s numbers to JoinableQueue() took %s seconds" % (count, 
            (time.time() - _start))
</snippet></ROW><ROW><id>8463313</id><snippet>()</snippet></ROW><ROW><id>8463313</id><snippet>tosave.close</snippet></ROW><ROW><id>8463313</id><snippet>finally</snippet></ROW><ROW><id>8463313</id><snippet>finally</snippet></ROW><ROW><id>8463313</id><snippet>try</snippet></ROW><ROW><id>8463313</id><snippet>tosave.write(top+nm+'\n')</snippet></ROW><ROW><id>8463313</id><snippet>tosave.close()</snippet></ROW><ROW><id>8463313</id><snippet>except</snippet></ROW><ROW><id>8463313</id><snippet>            # snip
            try:
                tosave.write(top+nm+'\n')
            except:
                tosave.close()
</snippet></ROW><ROW><id>8463313</id><snippet>                tosave.write(os.path.join(top, nm) + '\n')
</snippet></ROW><ROW><id>8463380</id><snippet>def s_exp(x):
    if isinstance(x, (tuple, list)):
        return '(%s)' % (' '.join(map(s_exp, x)))
    return str(x)
</snippet></ROW><ROW><id>8463552</id><snippet>request.raw_post_data</snippet></ROW><ROW><id>8463552</id><snippet>data=simplejson.loads( request.raw_post_data )
</snippet></ROW><ROW><id>8463623</id><snippet>ldd _sndfile.so</snippet></ROW><ROW><id>8463623</id><snippet>    linux-vdso.so.1 =&gt;  (0x00007fffd3dea000)
    libsndfile.so.1 =&gt; /usr/lib/x86_64-linux-gnu/libsndfile.so.1 (0x00007f2bfbb5b000)
    libpthread.so.0 =&gt; /lib/x86_64-linux-gnu/libpthread.so.0 (0x00007f2bfb93e000)
    libc.so.6 =&gt; /lib/x86_64-linux-gnu/libc.so.6 (0x00007f2bfb59e000)
    libFLAC.so.8 =&gt; /usr/lib/x86_64-linux-gnu/libFLAC.so.8 (0x00007f2bfb354000)
    libvorbisenc.so.2 =&gt; /usr/lib/x86_64-linux-gnu/libvorbisenc.so.2 (0x00007f2bfae85000)
    libvorbis.so.0 =&gt; /usr/lib/x86_64-linux-gnu/libvorbis.so.0 (0x00007f2bfac58000)
    libogg.so.0 =&gt; /usr/lib/x86_64-linux-gnu/libogg.so.0 (0x00007f2bfaa51000)
    libm.so.6 =&gt; /lib/x86_64-linux-gnu/libm.so.6 (0x00007f2bfa7cd000)
</snippet></ROW><ROW><id>8463623</id><snippet>sudo aptitude install flac vorbis-tools</snippet></ROW><ROW><id>8463623</id><snippet>In [1]: from scikits.audiolab import sndfile
/usr/local/lib/python2.7/dist-packages/scikits.audiolab-0.11.0-py2.7-linux-x86_6                                     
4.egg/scikits/audiolab/soundio/play.py:48: UserWarning: Could not import alsa ba                                     
ckend; most probably, you did not have alsa headers when building audiolab
warnings.warn("Could not import alsa backend; most probably, "
</snippet></ROW><ROW><id>8463623</id><snippet>libFLAC</snippet></ROW><ROW><id>8463623</id><snippet>libvorbis</snippet></ROW><ROW><id>8463623</id><snippet>libvorbisenc</snippet></ROW><ROW><id>8463623</id><snippet>scikits.audiolab</snippet></ROW><ROW><id>8463791</id><snippet>(value, name, selected)</snippet></ROW><ROW><id>8463791</id><snippet>class SelectWithDisable(object):
    """
    Renders a select field.

    If `multiple` is True, then the `size` property should be specified on
    rendering to make the field useful.

    The field must provide an `iter_choices()` method which the widget will
    call on rendering; this method must yield tuples of 
    `(value, label, selected, disabled)`.
    """
    def __init__(self, multiple=False):
        self.multiple = multiple

    def __call__(self, field, **kwargs):
        kwargs.setdefault('id', field.id)
        if self.multiple:
            kwargs['multiple'] = 'multiple'
        html = [u'&lt;select %s&gt;' % html_params(name=field.name, **kwargs)]
        for val, label, selected, disabled in field.iter_choices():
            html.append(self.render_option(val, label, selected, disabled))
        html.append(u'&lt;/select&gt;')
        return HTMLString(u''.join(html))

    @classmethod
    def render_option(cls, value, label, selected, disabled):
        options = {'value': value}
        if selected:
            options['selected'] = u'selected'
        if disabled:
            options['disabled'] = u'disabled'
        return HTMLString(u'&lt;option %s&gt;%s&lt;/option&gt;' % (html_params(**options), escape(unicode(label))))
</snippet></ROW><ROW><id>8463791</id><snippet>class SelectFieldWithDisable(SelectFiel):
    widget = widgets.SelectWithDisable()

    def iter_choices(self):
        for value, label, selected, disabled in self.choices:
            yield (value, label, selected, disabled, self.coerce(value) == self.data)
</snippet></ROW><ROW><id>8463791</id><snippet>form.select_field_variable_name</snippet></ROW><ROW><id>8463791</id><snippet>&lt;select id=selector&gt;
    &lt;option id=value1 value=1&gt;Bananas&lt;/option&gt;
    &lt;option id=value2 value=2&gt;Corn&lt;/option&gt;
    &lt;option id=value3 value=3&gt;Lolcats&lt;/option&gt;
&lt;/select&gt;
</snippet></ROW><ROW><id>8463791</id><snippet>&lt;style&gt;
#selector {background-color: #beef99}
&lt;/style&gt;
</snippet></ROW><ROW><id>8463791</id><snippet>&lt;script&gt;
option = document.getElementById('value3')
option.disabled = true
&lt;/script&gt;
</snippet></ROW><ROW><id>8463812</id><snippet>storm</snippet></ROW><ROW><id>8463812</id><snippet>ReferenceSet</snippet></ROW><ROW><id>8463812</id><snippet>Author.papers = ReferenceSet(Author.id, AuthorPapers.author_id, AuthorPapers.paper_id, Paper.id)
</snippet></ROW><ROW><id>8463812</id><snippet>Author.papers = ReferenceSet(Author.id, AuthorPapers.author_id, Paper.id, AuthorPapers.paper_id)
</snippet></ROW><ROW><id>8464011</id><snippet>a = b = 0</snippet></ROW><ROW><id>8464011</id><snippet>int</snippet></ROW><ROW><id>8464011</id><snippet>0</snippet></ROW><ROW><id>8464011</id><snippet>a</snippet></ROW><ROW><id>8464011</id><snippet>b</snippet></ROW><ROW><id>8464011</id><snippet>a = 4</snippet></ROW><ROW><id>8464011</id><snippet>int</snippet></ROW><ROW><id>8464011</id><snippet>4</snippet></ROW><ROW><id>8464011</id><snippet>a</snippet></ROW><ROW><id>8464011</id><snippet>4</snippet></ROW><ROW><id>8464011</id><snippet>0</snippet></ROW><ROW><id>8464011</id><snippet>a = 4</snippet></ROW><ROW><id>8464011</id><snippet>a</snippet></ROW><ROW><id>8464011</id><snippet>a = b = 4</snippet></ROW><ROW><id>8464011</id><snippet>4</snippet></ROW><ROW><id>8464011</id><snippet>a</snippet></ROW><ROW><id>8464011</id><snippet>b</snippet></ROW><ROW><id>8464011</id><snippet>a = Klass(2)</snippet></ROW><ROW><id>8464011</id><snippet>Klass</snippet></ROW><ROW><id>8464011</id><snippet>a</snippet></ROW><ROW><id>8464011</id><snippet>b = a</snippet></ROW><ROW><id>8464011</id><snippet>a</snippet></ROW><ROW><id>8464011</id><snippet>b</snippet></ROW><ROW><id>8464011</id><snippet>a = b = Klass(2)</snippet></ROW><ROW><id>8464011</id><snippet>a.num</snippet></ROW><ROW><id>8464011</id><snippet>b.num</snippet></ROW><ROW><id>8464011</id><snippet>id</snippet></ROW><ROW><id>8464011</id><snippet>id(a)</snippet></ROW><ROW><id>8464011</id><snippet>id(b)</snippet></ROW><ROW><id>8464011</id><snippet>a</snippet></ROW><ROW><id>8464011</id><snippet>b</snippet></ROW><ROW><id>8464011</id><snippet>a</snippet></ROW><ROW><id>8464011</id><snippet>b</snippet></ROW><ROW><id>8464478</id><snippet>RequiredIf</snippet></ROW><ROW><id>8464478</id><snippet>class RequiredIf(Required):
    # a validator which makes a field required if
    # another field is set and has a truthy value

    def __init__(self, other_field_name, *args, **kwargs):
        self.other_field_name = other_field_name
        super(RequiredIf, self).__init__(*args, **kwargs)

    def __call__(self, form, field):
        other_field = form._fields.get(self.other_field_name)
        if other_field is None:
            raise Exception('no field named "%s" in form' % self.other_field_name)
        if bool(other_field.data):
            super(RequiredIf, self).__call__(form, field)
</snippet></ROW><ROW><id>8464478</id><snippet>class DateTimeForm(Form):
    datetime = TextField()
    timezone = SelectField(choices=..., validators=[RequiredIf('datetime')])
</snippet></ROW><ROW><id>8464819</id><snippet>for</snippet></ROW><ROW><id>8464819</id><snippet>range()</snippet></ROW><ROW><id>8464819</id><snippet>xrange()</snippet></ROW><ROW><id>8464819</id><snippet>xrange()</snippet></ROW><ROW><id>8464819</id><snippet>range()</snippet></ROW><ROW><id>8464819</id><snippet>xrange([start], stop[, step])</snippet></ROW><ROW><id>8464819</id><snippet>for y in xrange(0, 128, 1024):
    for x in xrange(0, 64, 1024):
        # here you have x and y
</snippet></ROW><ROW><id>8464819</id><snippet>y</snippet></ROW><ROW><id>8464819</id><snippet>x</snippet></ROW><ROW><id>8464819</id><snippet>var y = 0;
var x = 0;
</snippet></ROW><ROW><id>8464819</id><snippet>x = 0
y = 0
</snippet></ROW><ROW><id>8464893</id><snippet>&lt;rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#" ...&gt;
  &lt;channel rdf:about="http://slashdot.org/"&gt;
    &lt;title&gt;Slashdot&lt;/title&gt;
    &lt;!-- more stuff (but no &lt;item&gt;-tags) --&gt;
  &lt;/channel&gt;
  &lt;item rdf:about="blabla"&gt;
    &lt;title&gt;The Condescending UI&lt;/title&gt;
    &lt;!-- item data --&gt;
  &lt;/item&gt;
  &lt;!-- more &lt;item&gt;-tags --&gt;
&lt;/rdf:RDF&gt;
</snippet></ROW><ROW><id>8464893</id><snippet>&lt;?xml version="1.0" encoding="ISO-8859-1" standalone="yes"?&gt;
&lt;rss xmlns:content="http://purl.org/rss/1.0/modules/content/" version="2.0"&gt;
  &lt;channel&gt;
    &lt;title&gt;SPIEGEL ONLINE - Schlagzeilen&lt;/title&gt;
    &lt;link&gt;http://www.spiegel.de&lt;/link&gt;
    &lt;item&gt;
      &lt;title&gt;Streit über EU-Veto: Vize Clegg meutert gegen britischen Premier Cameron&lt;/title&gt;
    &lt;/item&gt;
    &lt;!-- more &lt;item&gt;-tags --&gt;
  &lt;channel&gt;
&lt;/rss&gt;
</snippet></ROW><ROW><id>8464893</id><snippet>&lt;item&gt;</snippet></ROW><ROW><id>8464893</id><snippet>&lt;channel&gt;</snippet></ROW><ROW><id>8464893</id><snippet>&lt;rdf:RDF&gt;</snippet></ROW><ROW><id>8464893</id><snippet>for node in rootNode.childNodes:
</snippet></ROW><ROW><id>8464893</id><snippet>for node in rootNode.getElementsByTagName('item'):
</snippet></ROW><ROW><id>8464893</id><snippet>&lt;item&gt;</snippet></ROW><ROW><id>8465202</id><snippet>socket.setsocketimeout</snippet></ROW><ROW><id>8465202</id><snippet>socket.setblocking</snippet></ROW><ROW><id>8465202</id><snippet>urllib2.open</snippet></ROW><ROW><id>8465202</id><snippet>urllib2.Request</snippet></ROW><ROW><id>8465202</id><snippet>mechanize</snippet></ROW><ROW><id>8465202</id><snippet>socket.setsockettimeout</snippet></ROW><ROW><id>8465202</id><snippet>mechanize</snippet></ROW><ROW><id>8465202</id><snippet>timeout * num_of_conn</snippet></ROW><ROW><id>8465202</id><snippet>socket.recv</snippet></ROW><ROW><id>8465202</id><snippet>timeout * incoming_bytes</snippet></ROW><ROW><id>8465202</id><snippet>socket.recv</snippet></ROW><ROW><id>8465202</id><snippet>timeout</snippet></ROW><ROW><id>8465202</id><snippet>ALARM</snippet></ROW><ROW><id>8465202</id><snippet>timeout</snippet></ROW><ROW><id>8465202</id><snippet>with</snippet></ROW><ROW><id>8465202</id><snippet>import signal, time

def request(arg):
  """Your http request"""
  time.sleep(2)
  return arg

class Timeout():
  """Timeout class using ALARM signal"""
  class Timeout(Exception): pass

  def __init__(self, sec):
    self.sec = sec

  def __enter__(self):
    signal.signal(signal.SIGALRM, self.raise_timeout)
    signal.alarm(self.sec)

  def __exit__(self, *args):
    signal.alarm(0) # disable alarm

  def raise_timeout(self, *args):
    raise Timeout.Timeout()

# Run block of code with timeouts
try:
  with Timeout(3):
    print request("Request 1")
  with Timeout(1):
    print request("Request 2")
except Timeout.Timeout:
  print "Timeout"

# Prints "Request 1" and "Timeout"
</snippet></ROW><ROW><id>8465202</id><snippet>multiprocessing</snippet></ROW><ROW><id>8465202</id><snippet>multiprocessing.Pipe</snippet></ROW><ROW><id>8465202</id><snippet>from multiprocessing import Process, Pipe
import time

def request(sleep, result):
  """Your http request example"""
  time.sleep(sleep)
  return result

class TimeoutWrapper():
  """Timeout wrapper using separate process"""
  def __init__(self, func, timeout):
    self.func = func
    self.timeout = timeout

  def __call__(self, *args, **kargs):
    """Run func with timeout"""
    def pmain(pipe, func, args, kargs):
      """Function to be called in separate process"""
      result = func(*args, **kargs) # call func with passed arguments
      pipe.send(result) # send result to pipe

    parent_pipe, child_pipe = Pipe() # Pipe for retrieving result of func
    p = Process(target=pmain, args=(child_pipe, self.func, args, kargs))
    p.start()
    p.join(self.timeout) # wait for prcoess to end

    if p.is_alive():
      p.terminate() # Timeout, kill
      return None # or raise exception if None is acceptable result
    else:          
      return parent_pipe.recv() # OK, get result

print TimeoutWrapper(request, 3)(1, "OK") # prints OK
print TimeoutWrapper(request, 1)(2, "Timeout") # prints None
</snippet></ROW><ROW><id>8465202</id><snippet>socket.timeout</snippet></ROW><ROW><id>8465288</id><snippet>x in y</snippet></ROW><ROW><id>8465288</id><snippet>True</snippet></ROW><ROW><id>8465288</id><snippet>False</snippet></ROW><ROW><id>8465288</id><snippet>a = 'abcdef'  ,'ijklmno' , 'pqrst'
b = 'ijklmno' , 'zxy'
set(a).intersection(set(b))
</snippet></ROW><ROW><id>8465288</id><snippet>set(['ijklmno'])</snippet></ROW><ROW><id>8465364</id><snippet>unichr</snippet></ROW><ROW><id>8465364</id><snippet>chr</snippet></ROW><ROW><id>8465364</id><snippet>chr</snippet></ROW><ROW><id>8465364</id><snippet>unichr</snippet></ROW><ROW><id>8465364</id><snippet>d[u'é']</snippet></ROW><ROW><id>8465364</id><snippet>d['é']</snippet></ROW><ROW><id>8465617</id><snippet>"</snippet></ROW><ROW><id>8465617</id><snippet>[.!?]\s{1,2}</snippet></ROW><ROW><id>8465617</id><snippet>sentenceEnders = re.compile(r'''[.!?]['"]?\s{1,2}(?=[A-Z])''')
</snippet></ROW><ROW><id>8465617</id><snippet>sentenceEnders = re.compile(r'''(?&lt;=[.!?]['"\s])\s*(?=[A-Z])''')
</snippet></ROW><ROW><id>8465657</id><snippet>import random

def main():
    global tries,moves
</snippet></ROW><ROW><id>8465657</id><snippet>    tries,moves=0,0
    restart()

def restart():
    global a,indexes,x,y
</snippet></ROW><ROW><id>8465657</id><snippet>a</snippet></ROW><ROW><id>8465657</id><snippet>squares_visited</snippet></ROW><ROW><id>8465657</id><snippet>    a=[[0 for y in range(8)] for x in range(8)] #Costrutto chic
    indexes=[x for x in range(8)]
</snippet></ROW><ROW><id>8465657</id><snippet>[x for x in range(8)] == range(8)</snippet></ROW><ROW><id>8465657</id><snippet>range</snippet></ROW><ROW><id>8465657</id><snippet>list</snippet></ROW><ROW><id>8465657</id><snippet>list(range(8))</snippet></ROW><ROW><id>8465657</id><snippet>    #Random part
    x=random.randint(0,7)
    y=random.randint(0,7)
    a[x][y]=1
    start()
</snippet></ROW><ROW><id>8465657</id><snippet>a</snippet></ROW><ROW><id>8465657</id><snippet>x</snippet></ROW><ROW><id>8465657</id><snippet>y</snippet></ROW><ROW><id>8465657</id><snippet>1</snippet></ROW><ROW><id>8465657</id><snippet>start</snippet></ROW><ROW><id>8465657</id><snippet>restart</snippet></ROW><ROW><id>8465657</id><snippet>def start():
    global i,indexes,moves,tries
</snippet></ROW><ROW><id>8465657</id><snippet>    i=0
    random.shuffle(indexes) #List filled with random numbers that i'll use as indexes
    while i&lt;=7:
        if indexes[i]==0:
            move(-2,-1)
        elif indexes[i]==1:
            move(-2,1)
        elif indexes[i]==2:
            move(-1,-2)
        elif indexes[i]==3:
            move(-1,2)
        elif indexes[i]==4:
            move(1,-2)
        elif indexes[i]==5:
            move(1,2)
        elif indexes[i]==6:
            move(2,-1)
        elif indexes[i]==7:
            move(2,1)
        i+=1
</snippet></ROW><ROW><id>8465657</id><snippet>indexes</snippet></ROW><ROW><id>8465657</id><snippet>while</snippet></ROW><ROW><id>8465657</id><snippet>i</snippet></ROW><ROW><id>8465657</id><snippet>for</snippet></ROW><ROW><id>8465657</id><snippet>indexes</snippet></ROW><ROW><id>8465657</id><snippet>    for index in indexes: 
        if index==0:
            ...
</snippet></ROW><ROW><id>8465657</id><snippet>    for _ in a:
        if 0 in _:
            print "Wasted moves: %d"%(moves)
            tries+=1
            moves=0
            restart()
    print "Success obtained in %d tries"%(tries)
</snippet></ROW><ROW><id>8465657</id><snippet>restart</snippet></ROW><ROW><id>8465657</id><snippet>0</snippet></ROW><ROW><id>8465657</id><snippet>restart</snippet></ROW><ROW><id>8465657</id><snippet>0</snippet></ROW><ROW><id>8465657</id><snippet>1</snippet></ROW><ROW><id>8465657</id><snippet>move</snippet></ROW><ROW><id>8465657</id><snippet>start</snippet></ROW><ROW><id>8465657</id><snippet>def move(column,row):
    global x,y,a,moves
    try: b=a[x+row][y+column]
    except IndexError: return 0
    if b==0 and 0&lt;=x+row&lt;=7 and 0&lt;=y+column&lt;=7:
        x=x+row
        y=y+column
        a[x][y]=1
        moves+=1
        start()
    else: return 0
</snippet></ROW><ROW><id>8465657</id><snippet>1</snippet></ROW><ROW><id>8465657</id><snippet>i</snippet></ROW><ROW><id>8465657</id><snippet>indexes</snippet></ROW><ROW><id>8465657</id><snippet>start</snippet></ROW><ROW><id>8465657</id><snippet>start</snippet></ROW><ROW><id>8465657</id><snippet>indexes</snippet></ROW><ROW><id>8465657</id><snippet>i</snippet></ROW><ROW><id>8465657</id><snippet>i</snippet></ROW><ROW><id>8465657</id><snippet>start</snippet></ROW><ROW><id>8465657</id><snippet>move</snippet></ROW><ROW><id>8465657</id><snippet>start</snippet></ROW><ROW><id>8465657</id><snippet>while</snippet></ROW><ROW><id>8465657</id><snippet>try :main()
#except: print "I couldn't handle it" &lt;-Row added to prevent python from returning a huge amount of errors
</snippet></ROW><ROW><id>8465657</id><snippet>indexes</snippet></ROW><ROW><id>8465657</id><snippet>start</snippet></ROW><ROW><id>8465657</id><snippet>restart</snippet></ROW><ROW><id>8465657</id><snippet>restart</snippet></ROW><ROW><id>8465657</id><snippet>return</snippet></ROW><ROW><id>8465657</id><snippet>start</snippet></ROW><ROW><id>8465657</id><snippet>restart</snippet></ROW><ROW><id>8465657</id><snippet>sys.exit()</snippet></ROW><ROW><id>8465657</id><snippet>start</snippet></ROW><ROW><id>8465881</id><snippet>web/error.html</snippet></ROW><ROW><id>8465881</id><snippet>{%if e %}
  You had some errors in your submission!&lt;br /&gt;
  {{ e }}
{% endif %}
</snippet></ROW><ROW><id>8465881</id><snippet>variables = RequestContext(request, {'form': form})
return render_to_response('web/error.html', variables)
</snippet></ROW><ROW><id>8465881</id><snippet>{% if form.errors %}
   You have some errors!&lt;br /&gt;
   {{ form.errors }}
{% endif %}
</snippet></ROW><ROW><id>8465881</id><snippet># First, you need to import the widget:
from django.contrib.admin.widgets import AdminSplitDateTime
from django.forms import TextField

# In your form class, you have to specify the widget
# for the field.

class AnimalForm(forms.ModelForm):
   pub_date = models.TextField(widget=AdminSplitDateTime)
   class Meta:
      model = Animal
</snippet></ROW><ROW><id>8466003</id><snippet>NumberFormatDlg</snippet></ROW><ROW><id>8466003</id><snippet>__init__</snippet></ROW><ROW><id>8466003</id><snippet>self</snippet></ROW><ROW><id>8466003</id><snippet>NumberFormatDlg.__init__</snippet></ROW><ROW><id>8466003</id><snippet>format</snippet></ROW><ROW><id>8466003</id><snippet>parent</snippet></ROW><ROW><id>8466003</id><snippet>None</snippet></ROW><ROW><id>8466003</id><snippet>parent</snippet></ROW><ROW><id>8466003</id><snippet>NumberFormatDlg</snippet></ROW><ROW><id>8466003</id><snippet>form = NumberFormatDlg(format_string)
</snippet></ROW><ROW><id>8466003</id><snippet>form = NumberFormatDlg(format_string, parent_widget)
</snippet></ROW><ROW><id>8466003</id><snippet>format_string</snippet></ROW><ROW><id>8466040</id><snippet>&gt;&gt;&gt; import numpy
&gt;&gt;&gt; a = numpy.array([1,2,3,4,5,6])
&gt;&gt;&gt; b = numpy.array([2,3,5])
&gt;&gt;&gt; numpy.setxor1d(a, b)
array([1, 4, 6])
</snippet></ROW><ROW><id>8466153</id><snippet>pop</snippet></ROW><ROW><id>8466153</id><snippet>def addQuestion(self):
    question = ' '.join(self.stack)
    answer = input(question)
</snippet></ROW><ROW><id>8466153</id><snippet>pop</snippet></ROW><ROW><id>8466153</id><snippet>join</snippet></ROW><ROW><id>8466153</id><snippet>pop</snippet></ROW><ROW><id>8466153</id><snippet>&gt;&gt;&gt; stack = ['testing', 'this']
&gt;&gt;&gt; stack.pop()
'this'
&gt;&gt;&gt; stack
['testing']
</snippet></ROW><ROW><id>8466153</id><snippet>join</snippet></ROW><ROW><id>8466153</id><snippet>&gt;&gt;&gt; stack = ['testing', 'this']
&gt;&gt;&gt; ' '.join(stack)
'testing this'
&gt;&gt;&gt; stack
['testing', 'this']
</snippet></ROW><ROW><id>8466153</id><snippet>operator()</snippet></ROW><ROW><id>8466153</id><snippet>if token in self.commands:
    operator = self.commands[token]
    operator()
    self.stack = []
</snippet></ROW><ROW><id>8466153</id><snippet>class FlashCard:
    def __init__(self):
        self.commands = {'addQuestion':self.addQuestion}

    def addQuestion(self, phrase):
        answer = raw_input(phrase)

    def interpret(self, expressions):
        for expression in expressions.split('\n'):
            phrase, command = expression.rsplit(' ', 1)
            if command in self.commands:
                operator = self.commands[command]
                operator(phrase)
            else:
                raise RuntimeError('Invalid command')

expressions = '''testing this addQuestion
testing that addQuestion
testing error removeQuestion'''
i = FlashCard()
i.interpret(expressions)
</snippet></ROW><ROW><id>8466700</id><snippet>itemgetter(0)</snippet></ROW><ROW><id>8466700</id><snippet>max</snippet></ROW><ROW><id>8466928</id><snippet>vars = {}
for x in config_list['entry']:
    vars[x] = StringVar()
    entry = ttk.Entry(mainframe_entry, textvariable=vars[x])
    entry.grid()
</snippet></ROW><ROW><id>8466928</id><snippet>x=ttk.Entry(...).grid(...)</snippet></ROW><ROW><id>8466928</id><snippet>x</snippet></ROW><ROW><id>8466928</id><snippet>grid</snippet></ROW><ROW><id>8467005</id><snippet>stdout=subprocess.PIPE</snippet></ROW><ROW><id>8467005</id><snippet>sys.stdin</snippet></ROW><ROW><id>8467005</id><snippet>sys.stdin = subprocess.Popen(my_cmd, stdout=subprocess.PIPE, shell=True).stdout
s = pysam.Samfile("-", "rb")
sys.stdin = sys.__stdin__ # restore original stdin
</snippet></ROW><ROW><id>8467248</id><snippet>class AnimalForm(ModelForm):
    class Meta:
        model = Animal
        exclude = ('publisher',)
</snippet></ROW><ROW><id>8467248</id><snippet>    form = AnimalForm(request.POST)
    if form.is_valid():
        animal = form.save(commit=false)
        animal.publisher = request.user
        animal.save()
</snippet></ROW><ROW><id>8467248</id><snippet>else</snippet></ROW><ROW><id>8467490</id><snippet>import json
import urllib2
data = json.dumps([1, 2, 3])
req = urllib2.Request(url, data, {'Content-Type': 'application/json'})
f = urllib2.urlopen(req)
response = f.read()
f.close()
</snippet></ROW><ROW><id>8467707</id><snippet>self</snippet></ROW><ROW><id>8467707</id><snippet>print_point</snippet></ROW><ROW><id>8467707</id><snippet>x</snippet></ROW><ROW><id>8467707</id><snippet>y</snippet></ROW><ROW><id>8467707</id><snippet>self</snippet></ROW><ROW><id>8467707</id><snippet>def print_point(self):
     print '(%s, %s)' % (str(self.x), str(self.y))
</snippet></ROW><ROW><id>8467781</id><snippet>r'^[a-zA-Z\d-]{,63}(\.[a-zA-Z\d-]{,63})*$'
</snippet></ROW><ROW><id>8467799</id><snippet>_ZN6MatrixC2ERKS_</snippet></ROW><ROW><id>8467799</id><snippet>Matrix::Matrix(const Matrix&amp;)</snippet></ROW><ROW><id>8467799</id><snippet>samm@mac ~&gt; echo _ZN6MatrixC2ERKS_ | c++filt 
Matrix::Matrix(Matrix const&amp;)
samm@mac ~&gt; 
</snippet></ROW><ROW><id>8467917</id><snippet>@hosts('host.example.com')
def task():
    if run('echo $SOME_VAR') == 'some value':
        run('some_other_command.sh')
</snippet></ROW><ROW><id>8468041</id><snippet>encoding='bz2'</snippet></ROW><ROW><id>8468041</id><snippet>maxBytes</snippet></ROW><ROW><id>8468041</id><snippet>backupCount</snippet></ROW><ROW><id>8468041</id><snippet>TimeRotatingFileHandler</snippet></ROW><ROW><id>8468041</id><snippet>TimeRotatingFileHandler</snippet></ROW><ROW><id>8468041</id><snippet>/tmp/log_rotate*</snippet></ROW><ROW><id>8468041</id><snippet>time.sleep</snippet></ROW><ROW><id>8468041</id><snippet>time.sleep</snippet></ROW><ROW><id>8468041</id><snippet>import time
import re
import os
import stat
import logging
import logging.handlers as handlers

class SizedTimedRotatingFileHandler(handlers.TimedRotatingFileHandler):
    """
    Handler for logging to a set of files, which switches from one file
    to the next when the current file reaches a certain size, or at certain
    timed intervals
    """
    def __init__(self, filename, mode='a', maxBytes=0, backupCount=0, encoding=None,
                 delay=0, when='h', interval=1, utc=False):
        # If rotation/rollover is wanted, it doesn't make sense to use another
        # mode. If for example 'w' were specified, then if there were multiple
        # runs of the calling application, the logs from previous runs would be
        # lost if the 'w' is respected, because the log file would be truncated
        # on each run.
        if maxBytes &gt; 0:
            mode = 'a'
        handlers.TimedRotatingFileHandler.__init__(
            self, filename, when, interval, backupCount, encoding, delay, utc)
        self.maxBytes = maxBytes

    def shouldRollover(self, record):
        """
        Determine if rollover should occur.

        Basically, see if the supplied record would cause the file to exceed
        the size limit we have.
        """
        if self.stream is None:                 # delay was set...
            self.stream = self._open()
        if self.maxBytes &gt; 0:                   # are we rolling over?
            msg = "%s\n" % self.format(record)
            self.stream.seek(0, 2)  #due to non-posix-compliant Windows feature
            if self.stream.tell() + len(msg) &gt;= self.maxBytes:
                return 1
        t = int(time.time())
        if t &gt;= self.rolloverAt:
            return 1
        return 0

def demo_SizedTimedRotatingFileHandler():
    log_filename='/tmp/log_rotate'
    logger=logging.getLogger('MyLogger')
    logger.setLevel(logging.DEBUG)
    handler=SizedTimedRotatingFileHandler(
        log_filename, maxBytes=100, backupCount=5,
        when='s',interval=10,
        # encoding='bz2',  # uncomment for bz2 compression
        )
    logger.addHandler(handler)
    for i in range(10000):
        time.sleep(0.1)
        logger.debug('i=%d' % i)

demo_SizedTimedRotatingFileHandler()
</snippet></ROW><ROW><id>8468120</id><snippet>mylist = ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k']
i = 0
while i &lt;= 27:
    print mylist[i % len(mylist)]
    i +=1
</snippet></ROW><ROW><id>8468126</id><snippet>utf-16</snippet></ROW><ROW><id>8468126</id><snippet>utf-8-sig</snippet></ROW><ROW><id>8468126</id><snippet>cp874  Thai
cp932  Japanese 
cp936  Unified Chinese (P.R. China, Singapore)
cp949  Korean 
cp950  Traditional Chinese (Taiwan, Hong Kong, Macao(?))
cp1250 Central and Eastern Europe 
cp1251 Cyrillic ( Belarusian, Bulgarian, Macedonian, Russian, Serbian, Ukrainian)
cp1252 Western European languages
cp1253 Greek 
cp1254 Turkish 
cp1255 Hebrew 
cp1256 Arabic script
cp1257 Baltic languages 
cp1258 Vietnamese
cp???? languages/scripts of India  
</snippet></ROW><ROW><id>8468126</id><snippet>locale.getpreferredencoding()</snippet></ROW><ROW><id>8468126</id><snippet>codecs.open()</snippet></ROW><ROW><id>8468126</id><snippet>\r\n</snippet></ROW><ROW><id>8468126</id><snippet>The quick brown fox jumped over the lazy dogs.
àáâãäå
</snippet></ROW><ROW><id>8468126</id><snippet>import locale

def guess_notepad_encoding(filepath, default_ansi_encoding=None):
    with open(filepath, 'rb') as f:
        data = f.read(3)
    if data[:2] in ('\xff\xfe', '\xfe\xff'):
        return 'utf-16'
    if data == u''.encode('utf-8-sig'):
        return 'utf-8-sig'
    # presumably "ANSI"
    return default_ansi_encoding or locale.getpreferredencoding()

if __name__ == "__main__":
    import sys, glob, codecs
    defenc = sys.argv[1]
    for fpath in glob.glob(sys.argv[2]):
        print
        print (fpath, defenc)
        with open(fpath, 'rb') as f:
            print "raw:", repr(f.read())
        enc = guess_notepad_encoding(fpath, defenc)
        print "guessed encoding:", enc
        with codecs.open(fpath, 'r', enc) as f:
            for lino, line in enumerate(f, 1):
                print lino, repr(line)
                print lino, repr(line.rstrip('\r\n'))
</snippet></ROW><ROW><id>8468126</id><snippet>\python27\python read_notepad.py "" t1-*.txt</snippet></ROW><ROW><id>8468126</id><snippet>('t1-ansi.txt', '')
raw: 'The quick brown fox jumped over the lazy dogs.\r\n\xe0\xe1\xe2\xe3\xe4\xe5
\r\n'
guessed encoding: cp1252
1 u'The quick brown fox jumped over the lazy dogs.\r\n'
1 u'The quick brown fox jumped over the lazy dogs.'
2 u'\xe0\xe1\xe2\xe3\xe4\xe5\r\n'
2 u'\xe0\xe1\xe2\xe3\xe4\xe5'

('t1-u8.txt', '')
raw: '\xef\xbb\xbfThe quick brown fox jumped over the lazy dogs.\r\n\xc3\xa0\xc3
\xa1\xc3\xa2\xc3\xa3\xc3\xa4\xc3\xa5\r\n'
guessed encoding: utf-8-sig
1 u'The quick brown fox jumped over the lazy dogs.\r\n'
1 u'The quick brown fox jumped over the lazy dogs.'
2 u'\xe0\xe1\xe2\xe3\xe4\xe5\r\n'
2 u'\xe0\xe1\xe2\xe3\xe4\xe5'

('t1-uc.txt', '')
raw: '\xff\xfeT\x00h\x00e\x00 \x00q\x00u\x00i\x00c\x00k\x00 \x00b\x00r\x00o\x00w
\x00n\x00 \x00f\x00o\x00x\x00 \x00j\x00u\x00m\x00p\x00e\x00d\x00 \x00o\x00v\x00e
\x00r\x00 \x00t\x00h\x00e\x00 \x00l\x00a\x00z\x00y\x00 \x00d\x00o\x00g\x00s\x00.
\x00\r\x00\n\x00\xe0\x00\xe1\x00\xe2\x00\xe3\x00\xe4\x00\xe5\x00\r\x00\n\x00'
guessed encoding: utf-16
1 u'The quick brown fox jumped over the lazy dogs.\r\n'
1 u'The quick brown fox jumped over the lazy dogs.'
2 u'\xe0\xe1\xe2\xe3\xe4\xe5\r\n'
2 u'\xe0\xe1\xe2\xe3\xe4\xe5'

('t1-ucb.txt', '')
raw: '\xfe\xff\x00T\x00h\x00e\x00 \x00q\x00u\x00i\x00c\x00k\x00 \x00b\x00r\x00o\
x00w\x00n\x00 \x00f\x00o\x00x\x00 \x00j\x00u\x00m\x00p\x00e\x00d\x00 \x00o\x00v\
x00e\x00r\x00 \x00t\x00h\x00e\x00 \x00l\x00a\x00z\x00y\x00 \x00d\x00o\x00g\x00s\
x00.\x00\r\x00\n\x00\xe0\x00\xe1\x00\xe2\x00\xe3\x00\xe4\x00\xe5\x00\r\x00\n'
guessed encoding: utf-16
1 u'The quick brown fox jumped over the lazy dogs.\r\n'
1 u'The quick brown fox jumped over the lazy dogs.'
2 u'\xe0\xe1\xe2\xe3\xe4\xe5\r\n'
2 u'\xe0\xe1\xe2\xe3\xe4\xe5'
</snippet></ROW><ROW><id>8468126</id><snippet>cp1252</snippet></ROW><ROW><id>8468126</id><snippet>latin1</snippet></ROW><ROW><id>8468126</id><snippet>&gt;&gt;&gt; all_bytes = "".join(map(chr, range(256)))
&gt;&gt;&gt; u1 = all_bytes.decode('cp1252', 'replace')
&gt;&gt;&gt; u2 = all_bytes.decode('mbcs', 'replace')
&gt;&gt;&gt; u1 == u2
False
&gt;&gt;&gt; [(i, u1[i], u2[i]) for i in xrange(256) if u1[i] != u2[i]]
[(129, u'\ufffd', u'\x81'), (141, u'\ufffd', u'\x8d'), (143, u'\ufffd', u'\x8f')
, (144, u'\ufffd', u'\x90'), (157, u'\ufffd', u'\x9d')]
&gt;&gt;&gt;
</snippet></ROW><ROW><id>8468126</id><snippet>chardet</snippet></ROW><ROW><id>8468205</id><snippet>deadline</snippet></ROW><ROW><id>8468205</id><snippet>fetch</snippet></ROW><ROW><id>8468317</id><snippet>import Tkinter as tk

class Display:
    def __init__(self, master):
        self.label = None
        self.master = master
        self.tick()

    def tick(self):
        if self.label:
            self.label.destroy()
        self.label = tk.Label(self.master, text = 'a')
        self.label.place(x=0,y=0)
        self.master.after(50, self.tick)

root = tk.Tk()
disp = Display(root)
</snippet></ROW><ROW><id>8468390</id><snippet>from zope.schema import Text, List, Object
from zope.interface import Interface

class IChildInterface(Interface):
    someField = Text()

class IParentInterface(Interface):
    mycollection = List(value_type=Object(title=u'Child',
                                          schema=IChildInterface))
</snippet></ROW><ROW><id>8468679</id><snippet>os.walk</snippet></ROW><ROW><id>8468934</id><snippet>QDateTime</snippet></ROW><ROW><id>8468934</id><snippet>toPyDateTime</snippet></ROW><ROW><id>8468934</id><snippet>datetime</snippet></ROW><ROW><id>8468934</id><snippet>In : from PyQt4 import QtCore

In : QtCore.PYQT_VERSION_STR
Out: '4.8.6'

In : QtCore.QT_VERSION_STR
Out: '4.7.4'

In : now = QtCore.QDateTime.currentDateTime()

In : now
Out: PyQt4.QtCore.QDateTime(2011, 12, 11, 20, 12, 47, 55)

In : now.toPyDateTime()
Out: datetime.datetime(2011, 12, 11, 20, 12, 47, 55000)
</snippet></ROW><ROW><id>8469057</id><snippet>globals()[self.inventory_type]
</snippet></ROW><ROW><id>8469224</id><snippet>raw_input</snippet></ROW><ROW><id>8469224</id><snippet>  :/tmp% python -c 'print "A"*1000000' | python -c 'print len (raw_input ())';
  1000000
  :/tmp% python -c 'print "A"*210012300' | python -c 'print len (raw_input ())';
  210012300
  :/tmp% python -c 'print "A"*100+"\n"+"B"*100' | python -c 'print len (raw_input ())'; 
  100
</snippet></ROW><ROW><id>8469228</id><snippet>exp(-(1/thing_to_minimize))</snippet></ROW><ROW><id>8469228</id><snippet>current_fitness/previous_fitness</snippet></ROW></DATA>