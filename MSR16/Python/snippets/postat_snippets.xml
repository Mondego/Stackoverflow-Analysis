<?xml version="1.0" encoding="UTF-8" standalone="no"?><DATA><ROW><id>4860087</id><snippet>create_rpc</snippet></ROW><ROW><id>4860087</id><snippet>DeadlineExceededErrors</snippet></ROW><ROW><id>4860087</id><snippet># Set a five-second timeout
rpc = db.create_rpc(deadline=5)

# A query:
query = YourModel.all().fetch(100, rpc=rpc)
</snippet></ROW><ROW><id>4860112</id><snippet>name, _ = 'bida.bombu.foo'.split('.', 1')
</snippet></ROW><ROW><id>4860112</id><snippet>name, ignored = 'bida.bombu.foo'.split('.', 1')
</snippet></ROW><ROW><id>4860112</id><snippet>from zope.i18nmessageid import MessageFactory
_ = MessageFactory('my.domain')

label = _("The label text")
</snippet></ROW><ROW><id>4860112</id><snippet>label</snippet></ROW><ROW><id>4860112</id><snippet>_</snippet></ROW><ROW><id>4860112</id><snippet>_("The label text")</snippet></ROW><ROW><id>4860112</id><snippet>MyDomainMessage("The label text")</snippet></ROW><ROW><id>4860250</id><snippet>command = 'mysql -uuser -ppassword -hhost db_name &lt; mysql_proc.sql'
mysql_cmd_proc = subprocess.Popen(command,
        shell=True,
        stdout=subprocess.PIPE,
        stderr=subprocess.PIPE)
</snippet></ROW><ROW><id>4860250</id><snippet>shell=True</snippet></ROW><ROW><id>4860250</id><snippet>False</snippet></ROW><ROW><id>4860250</id><snippet>command</snippet></ROW><ROW><id>4860250</id><snippet>&gt;&gt;&gt; import shlex
&gt;&gt;&gt; command = 'mysql -uuser -ppassword -hhost db_name &lt; mysql_proc.sql'
&gt;&gt;&gt; mysql_cmd_proc = subprocess.Popen(shlex.split(command),   # shlex.split
...                                   stdout=subprocess.PIPE,
...                                   stderr=subprocess.PIPE)
</snippet></ROW><ROW><id>4860302</id><snippet>'date :2011-02-01 13:05:58.642704'</snippet></ROW><ROW><id>4860302</id><snippet>d = datetime.datetime.now()

a = d.strftime('date_%Y%m%d_%H%M%S_%f')
os.mkdir(a)
</snippet></ROW><ROW><id>4860302</id><snippet>date_20110201_130558_642704</snippet></ROW><ROW><id>4860302</id><snippet>ls</snippet></ROW><ROW><id>4860777</id><snippet>import matplotlib.pyplot as PLT
from matplotlib.offsetbox import AnnotationBbox, OffsetImage
from matplotlib._png import read_png

fig = PLT.gcf()
fig.clf()
ax = PLT.subplot(111)

# add a first image
arr_hand = read_png('/path/to/this/image.png')
imagebox = OffsetImage(arr_hand, zoom=.1)
xy = [0.25, 0.45]               # coordinates to position this image

ab = AnnotationBbox(imagebox, xy,
    xybox=(30., -30.),
    xycoords='data',
    boxcoords="offset points")                                  
ax.add_artist(ab)

# add second image
arr_vic = read_png('/path/to/this/image2.png')
imagebox = OffsetImage(arr_vic, zoom=.1)
xy = [.6, .3]                  # coordinates to position 2nd image

ab = AnnotationBbox(imagebox, xy,
    xybox=(30, -30),
    xycoords='data',
    boxcoords="offset points")
ax.add_artist(ab)

# rest is just standard matplotlib boilerplate
ax.grid(True)
PLT.draw()
PLT.show()
</snippet></ROW><ROW><id>4860784</id><snippet>__slots__</snippet></ROW><ROW><id>4860784</id><snippet>object</snippet></ROW><ROW><id>4860784</id><snippet>class Foo(object):
  # etc...
</snippet></ROW><ROW><id>4860937</id><snippet>import inspect
spec = inspect.getargspec(myFunction)
</snippet></ROW><ROW><id>4860937</id><snippet>ArgSpec</snippet></ROW><ROW><id>4860937</id><snippet>args</snippet></ROW><ROW><id>4860937</id><snippet>defaults</snippet></ROW><ROW><id>4860937</id><snippet>ArgSpec(args=['arg1'], varargs=None, keywords=None, defaults=('a default value',))
</snippet></ROW><ROW><id>4861132</id><snippet>^</snippet></ROW><ROW><id>4861132</id><snippet>\</snippet></ROW><ROW><id>4861132</id><snippet>([\^&amp;]*)</snippet></ROW><ROW><id>4861132</id><snippet>([^&amp;]*)</snippet></ROW><ROW><id>4861685</id><snippet>dis</snippet></ROW><ROW><id>4861685</id><snippet>import dis
dis.dis(func)
</snippet></ROW><ROW><id>4861685</id><snippet>chedict</snippet></ROW><ROW><id>4862004</id><snippet>a = [8, 8, 1, 1, 5, 8, 9]

popularity = sorted(set(a), key=lambda x: -a.count(x))

[8, 1, 5, 9]
</snippet></ROW><ROW><id>4862004</id><snippet>count</snippet></ROW><ROW><id>4862004</id><snippet>a = [8, 8, 1, 1, 5, 8, 9]
d = {}
for i in a:
    d[i] = d.get(i, 0) + 1
popularity = sorted(d, key=d.get, reverse=True)
</snippet></ROW><ROW><id>4862243</id><snippet>line.partition("as follows: ")[2]
</snippet></ROW><ROW><id>4862243</id><snippet>line = line.partition("as follows")[2]
</snippet></ROW><ROW><id>4862243</id><snippet>writelines</snippet></ROW><ROW><id>4862243</id><snippet>findme = 'important '
outfile = open('out.txt', 'w')
for line in open('new.txt'):
    if findme in line:
        outfile.write(line.partition('as follows: ')[2])
</snippet></ROW><ROW><id>4862874</id><snippet>&gt;&gt;&gt; re.search(ur'([£$€])(\d+(?:\.\d{2})?)', s).groups()
(u'\xa3', u'6.50')
</snippet></ROW><ROW><id>4862874</id><snippet>[£$€]</snippet></ROW><ROW><id>4862874</id><snippet>\d+(?:\.\d{2})</snippet></ROW><ROW><id>4862874</id><snippet>()</snippet></ROW><ROW><id>4862874</id><snippet>.*</snippet></ROW><ROW><id>4863323</id><snippet>a = list()
print dir(a)
</snippet></ROW><ROW><id>4863323</id><snippet>a = list()
print dir(a.__class__)
</snippet></ROW><ROW><id>4863340</id><snippet>./manage.py shell</snippet></ROW><ROW><id>4863340</id><snippet>./manage.py shell_plus</snippet></ROW><ROW><id>4863382</id><snippet>&gt;&gt;&gt; [s.strip() for s in input_line[1:-1].split(',')]
['update', '/CoaddedRegriddedFrame[1]/OBJECT[1]/text()[1]', 'Centaurus-AB']
</snippet></ROW><ROW><id>4863441</id><snippet>map()</snippet></ROW><ROW><id>4863441</id><snippet>dict(
    ('{t}.{c}'.format(t=h.table_name, c=h.column_name), h.position)
    for h in self.heading_set.all()
    )
</snippet></ROW><ROW><id>4863504</id><snippet>self.__class__.__name__
</snippet></ROW><ROW><id>4863504</id><snippet>ContentType.objects.get_for_model(self)
</snippet></ROW><ROW><id>4863717</id><snippet>str.join()</snippet></ROW><ROW><id>4863717</id><snippet>print '.'.join(str(x) for x in L[:-1]) + ' = %s' % L[-1]
</snippet></ROW><ROW><id>4863970</id><snippet>project</snippet></ROW><ROW><id>4863970</id><snippet>cd project
virtualenv -p /usr/bin/python2.5 --no-site-packages --distribute .
</snippet></ROW><ROW><id>4863970</id><snippet>src</snippet></ROW><ROW><id>4863970</id><snippet>appcfg.py</snippet></ROW><ROW><id>4863970</id><snippet>import sys
for p in ['librarie.zip', 'package.egg'...]:
    sys.path.insert(0, p)
</snippet></ROW><ROW><id>4863970</id><snippet>pkg_resources.py</snippet></ROW><ROW><id>4863970</id><snippet>src</snippet></ROW><ROW><id>4863970</id><snippet>entry_point</snippet></ROW><ROW><id>4863970</id><snippet>entry_point</snippet></ROW><ROW><id>4864058</id><snippet>today = datetime.datetime.now()
DD = datetime.timedelta(days=90)
earlier = today - DD
earlier_str = earlier.strftime("%Y%m%d")
</snippet></ROW><ROW><id>4864773</id><snippet>def userJoined(self, user, channel):
    log.msg('%s has joined %s' % (user, channel))

def userLeft(self, user, channel):
    log.msg('%s has left %s' % (user, channel))

def userQuit(self, user, quitMessage):
    log.msg('%s has quit. Reason: %s' % (user, quitMessage))
</snippet></ROW><ROW><id>4864870</id><snippet>{% ifequal forloop.counter 2 %} checked="checked"{% endifequal %}
</snippet></ROW><ROW><id>4864870</id><snippet>forloop.counter</snippet></ROW><ROW><id>4864870</id><snippet>forloop.counter0
</snippet></ROW><ROW><id>4864929</id><snippet>from django.db import models</snippet></ROW><ROW><id>4864999</id><snippet>$ /opt/pypy-1.4.1/bin/virtualenv test
$ cd test
$ bin/pip install PIL
...
--------------------------------------------------------------------
PIL 1.1.7 SETUP SUMMARY
--------------------------------------------------------------------
version       1.1.7
platform      linux2 2.5.2 (e503e483e9ac, Dec 21 2010, 12:02:29)
              [PyPy 1.4.1]
--------------------------------------------------------------------
*** TKINTER support not available
--- JPEG support available
--- ZLIB (PNG/ZIP) support available
--- FREETYPE2 support available
*** LITTLECMS support not available
--------------------------------------------------------------------
... 
$ bin/pypy
Python 2.5.2 (e503e483e9ac, Dec 21 2010, 12:02:29)
[PyPy 1.4.1] on linux2
&gt;&gt;&gt;&gt; import Image
&gt;&gt;&gt;&gt; im = Image.open('/path/to/file.jpg')
&gt;&gt;&gt;&gt; outfile = open('/path/to/file.png', 'wb')
&gt;&gt;&gt;&gt; im.save(outfile, 'png')
</snippet></ROW><ROW><id>4865282</id><snippet>echo -e "2\n3" | python test.py | grep -q "The sum is 5" &amp;&amp; echo "Success"
</snippet></ROW><ROW><id>4865330</id><snippet>heights_per_year</snippet></ROW><ROW><id>4865330</id><snippet>dict</snippet></ROW><ROW><id>4865330</id><snippet>year = getuserselection()
heights = heights_per_year[int(year)]
max_height = max(a.itervalues())
</snippet></ROW><ROW><id>4865330</id><snippet>int</snippet></ROW><ROW><id>4865330</id><snippet>height_per_year</snippet></ROW><ROW><id>4865330</id><snippet>list</snippet></ROW><ROW><id>4865330</id><snippet>max_height = heights[0][1]
</snippet></ROW><ROW><id>4865370</id><snippet>import numpy as NP
import numpy.linalg as LA

# generate some data
fnx = lambda : NP.random.randint(0, 10, 10)
s1, s2 = fnx(), fnx()

# a function to calculate cosine similarity
cx = lambda a, b : round(NP.inner(a, b)/(LA.norm(a)*LA.norm(b)), 2)

cx(s1, s2)
# returns 0.85
</snippet></ROW><ROW><id>4865503</id><snippet>_</snippet></ROW><ROW><id>4865503</id><snippet>_</snippet></ROW><ROW><id>4865503</id><snippet>gettext</snippet></ROW><ROW><id>4865539</id><snippet>'inherit_condition'</snippet></ROW><ROW><id>4865539</id><snippet>__mapper_args__</snippet></ROW><ROW><id>4865539</id><snippet>primaryjoin=(staff_id==User.id)</snippet></ROW><ROW><id>4865539</id><snippet>relationship</snippet></ROW><ROW><id>4865539</id><snippet>staff</snippet></ROW><ROW><id>4865539</id><snippet>Staff</snippet></ROW><ROW><id>4865539</id><snippet>staff_id</snippet></ROW><ROW><id>4865539</id><snippet>User</snippet></ROW><ROW><id>4865539</id><snippet>staff_id</snippet></ROW><ROW><id>4865539</id><snippet>ForeignKey("auth_staff.id")</snippet></ROW><ROW><id>4865706</id><snippet>snav</snippet></ROW><ROW><id>4865706</id><snippet>DictReader</snippet></ROW><ROW><id>4865706</id><snippet>line['200']</snippet></ROW><ROW><id>4865847</id><snippet>[[0]*2 for i in range(2)]
</snippet></ROW><ROW><id>4865847</id><snippet>[[0 for j in range(2)] for i in range(2)]
</snippet></ROW><ROW><id>4865847</id><snippet>[Foo()] * 2</snippet></ROW><ROW><id>4865847</id><snippet>[Foo() for i in range(2)]</snippet></ROW><ROW><id>4865920</id><snippet>classmethod</snippet></ROW><ROW><id>4865920</id><snippet>@classmethod
def save_from_row(cls, row):
    c = cls()
    # ...
    return c
</snippet></ROW><ROW><id>4865920</id><snippet>@staticmethod
def save_from_row(row):
    c = Customer()
    # ...
    return c
</snippet></ROW><ROW><id>4865920</id><snippet>classmethod</snippet></ROW><ROW><id>4865920</id><snippet>Customer</snippet></ROW><ROW><id>4865920</id><snippet>staticmethod</snippet></ROW><ROW><id>4866212</id><snippet>imp.load_source</snippet></ROW><ROW><id>4866212</id><snippet>logging = imp.load_source('logx', '/code/y/logging.py')
</snippet></ROW><ROW><id>4866299</id><snippet>category_codes_cnt = Item.objects.values('category_codes').distinct().count()
</snippet></ROW><ROW><id>4866299</id><snippet>unique_codes_cnt = Item.objects.values('unique_codes').distinct().count()
</snippet></ROW><ROW><id>4866299</id><snippet>codes_cnt = Item.objects.values('category_codes', 'unique_codes').distinct().count()
</snippet></ROW><ROW><id>4866330</id><snippet>with open('dwn.txt') as f:
    for i in xrange(6):
        f.next()
    for line in f:
        process(line)
</snippet></ROW><ROW><id>4866639</id><snippet>IRCClient.whois</snippet></ROW><ROW><id>4866639</id><snippet>None</snippet></ROW><ROW><id>4866639</id><snippet>IRCClient.whois</snippet></ROW><ROW><id>4866639</id><snippet>IRCClient</snippet></ROW><ROW><id>4866639</id><snippet>IRCClient</snippet></ROW><ROW><id>4866639</id><snippet>irc_</snippet></ROW><ROW><id>4866639</id><snippet>RPL_WHOISCHANNELS</snippet></ROW><ROW><id>4866639</id><snippet>irc_RPL_WHOISCHANNELS</snippet></ROW><ROW><id>4866639</id><snippet>irc_</snippet></ROW><ROW><id>4866639</id><snippet>whois</snippet></ROW><ROW><id>4866639</id><snippet>IRCClient</snippet></ROW><ROW><id>4866720</id><snippet>layouts</snippet></ROW><ROW><id>4866720</id><snippet>bushy</snippet></ROW><ROW><id>4866720</id><snippet>lawn</snippet></ROW><ROW><id>4866720</id><snippet>DirectoryStorage</snippet></ROW><ROW><id>4866814</id><snippet>def filter_with_prefix( self, prefix, object ):

    if self.type = 'Running':    
        kwargs = { '%s__%s__%s__%s' % (prefix, 'alpha', 'beta', 'gamma') : object }
    elif self.type = 'Jumping':
        kwargs = { '%s__%s__%s' % (prefix, 'alpha', 'beta') : object }
    elif self.type = 'Playing':
        kwargs = { '%s__%s' % (prefix, 'alpha',) : object }
    return kwargs
</snippet></ROW><ROW><id>4866814</id><snippet>f1= some_object.filter_with_prefix( 'foo', object )
self.customers = Fest.objects.filter(**f1)
f2= some_object.filter_with_prefix( 'bar', object )
self.customers = Fest.objects.filter(**f2)
f3= some_object.filter_with_prefix( 'baz', object )
self.customers = Fest.objects.filter(**f3)
</snippet></ROW><ROW><id>4866967</id><snippet>def upload_and_get_data(username, password, image_filename):
    print image_filename, type(image_filename)
    browser = mechanize.Browser()
    browser.open("http://itmages.ru/user/login")
    form = browser.form = browser.forms().next()
    form["LoginForm[username]"] = username
    form["LoginForm[password]"] = password
    login_response = browser.submit()

    # file uploading
    form = browser.form = browser.forms().next()
    form.add_file(open(image_filename, "r"),
                  filename=os.path.basename(image_filename))
    send_response = browser.submit()

    table_regex = re.compile('&lt;table class="stat".*?&lt;input.*?&lt;/table&gt;')
    table_data_text = table_regex.findall(
        send_response.get_data().replace("\n", " "))[0]
    table_data_regex = re.compile(
        '&lt;tr&gt; *&lt;td.*?&lt;b&gt;([^&lt;]*)&lt;/b&gt;&lt;/td&gt; *&lt;td&gt;(.*?)&lt;/td&gt; *&lt;/tr&gt;')
    table_data = dict(table_data_regex.findall(table_data_text))
    return table_data
</snippet></ROW><ROW><id>4867136</id><snippet>eval</snippet></ROW><ROW><id>4867136</id><snippet>eval</snippet></ROW><ROW><id>4867136</id><snippet>eval</snippet></ROW><ROW><id>4867136</id><snippet>exec</snippet></ROW><ROW><id>4867136</id><snippet>eval</snippet></ROW><ROW><id>4867223</id><snippet>file:</snippet></ROW><ROW><id>4867340</id><snippet>STATIC_URL = "/site_media/static/"
STATIC_ROOT = os.path.join(PROJECT_ROOT, "site_media", "static")
STATICFILES_DIRS = (
    os.path.join(PROJECT_ROOT, "static_media"),
)
</snippet></ROW><ROW><id>4867340</id><snippet>{{ STATIC_URL }}css/style.css</snippet></ROW><ROW><id>4867340</id><snippet>../images/logo.png</snippet></ROW><ROW><id>4867340</id><snippet>project_dir
  ...
  stuff
  static_media
    ...
    css
    images
</snippet></ROW><ROW><id>4867389</id><snippet>foo in mydict</snippet></ROW><ROW><id>4867389</id><snippet>foo in keys_list</snippet></ROW><ROW><id>4867389</id><snippet>dict</snippet></ROW><ROW><id>4867389</id><snippet>O(1)</snippet></ROW><ROW><id>4867389</id><snippet>keys_list</snippet></ROW><ROW><id>4867389</id><snippet>O(n)</snippet></ROW><ROW><id>4867389</id><snippet>$ python -m timeit -s "x = range(1000)" "15 in x"
1000000 loops, best of 3: 0.311 usec per loop
$ python -m timeit -s "x = dict.fromkeys(xrange(1000))" "15 in x"
10000000 loops, best of 3: 0.0515 usec per loop
</snippet></ROW><ROW><id>4867389</id><snippet>dict</snippet></ROW><ROW><id>4867389</id><snippet>.keys()</snippet></ROW><ROW><id>4867536</id><snippet>__hash__()</snippet></ROW><ROW><id>4867536</id><snippet>_Py_HashPointer</snippet></ROW><ROW><id>4867536</id><snippet>k in d</snippet></ROW><ROW><id>4867536</id><snippet>d.has_key(k)</snippet></ROW><ROW><id>4867536</id><snippet>d[(x, y)]</snippet></ROW><ROW><id>4867536</id><snippet>d[x][y]</snippet></ROW><ROW><id>4867536</id><snippet>&gt;&gt;&gt; n = 15000
&gt;&gt;&gt; i = 0
&gt;&gt;&gt; while 2 ** i / 1.5 &lt; n:
...    i += 1
...
&gt;&gt;&gt; print i, 2 ** i, int(2 ** i / 1.5)
15 32768 21845
&gt;&gt;&gt; probe_mask = 2 ** i - 1
&gt;&gt;&gt; print hex(probe_mask)
0x7fff
&gt;&gt;&gt; class Foo(object):
...     pass
...
&gt;&gt;&gt; olist = [Foo() for j in xrange(n)]
&gt;&gt;&gt; hashes = [hash(o) for o in olist]
&gt;&gt;&gt; print len(set(hashes))
15000
&gt;&gt;&gt; probes = [h &amp; probe_mask for h in hashes]
&gt;&gt;&gt; print len(set(probes))
12997
&gt;&gt;&gt;
</snippet></ROW><ROW><id>4867723</id><snippet>mcif</snippet></ROW><ROW><id>4867723</id><snippet>McifModel</snippet></ROW><ROW><id>4867723</id><snippet>from mcif.models.mcif_model import McifModel

class Customer(McifModel):
    ...
</snippet></ROW><ROW><id>4867785</id><snippet>class Person:
    name: ""
    birthDate: ""

class PoliceOfficer extends Person:
    badgeNumber: ""
</snippet></ROW><ROW><id>4867785</id><snippet>move()</snippet></ROW><ROW><id>4867785</id><snippet>PoliceOfficer</snippet></ROW><ROW><id>4867785</id><snippet>Person</snippet></ROW><ROW><id>4867785</id><snippet>class Person:
    def move(world):
</snippet></ROW><ROW><id>4867785</id><snippet>issueTicket()</snippet></ROW><ROW><id>4867785</id><snippet>Person</snippet></ROW><ROW><id>4867785</id><snippet>Person</snippet></ROW><ROW><id>4867785</id><snippet>PoliceOfficer</snippet></ROW><ROW><id>4867785</id><snippet>move()</snippet></ROW><ROW><id>4867785</id><snippet>world</snippet></ROW><ROW><id>4867889</id><snippet>/proc/self/cmdline</snippet></ROW><ROW><id>4867889</id><snippet>#!/usr/bin/env python
import sys
print sys.argv[0]

f = open('/proc/self/cmdline', 'rb')
cmdline = f.read()
f.close()

print repr(cmdline.split('\x00'))
</snippet></ROW><ROW><id>4867889</id><snippet>$ bash
$ exec -a "somestring" python foo.py 
foo.py
['somestring', 'foo.py', '']
</snippet></ROW><ROW><id>4867889</id><snippet>bash</snippet></ROW><ROW><id>4867935</id><snippet>array = numpy.zeros((6,6))</snippet></ROW><ROW><id>4867935</id><snippet>array = numpy.zeros((6,6))
array[0:2,0:2] = 1
</snippet></ROW><ROW><id>4867935</id><snippet>array[ystart:yend,xstart:xend] = smallermatrix
</snippet></ROW><ROW><id>4868017</id><snippet>send_bufr = "PRIVMSG %s :Hello %s\r\n" %(self.channel, sender)
print(send_bufr)
self.sock.send(bytearray(send_bufr, "utf-8"))
</snippet></ROW><ROW><id>4868337</id><snippet>class User(object):

    @classmethod
    def get_by_username(cls, dbsession, username):
        return dbsession.query(cls).filter(cls.username==username).one()
</snippet></ROW><ROW><id>4868367</id><snippet>from django.conf import settings 
settings.configure()
</snippet></ROW><ROW><id>4868419</id><snippet>assert False</snippet></ROW><ROW><id>4868490</id><snippet>__new__</snippet></ROW><ROW><id>4868490</id><snippet>__init__</snippet></ROW><ROW><id>4868490</id><snippet>super</snippet></ROW><ROW><id>4868490</id><snippet>class OctetString(array):
    def __new__(cls):
        return array.__new__(cls, 'c')
</snippet></ROW><ROW><id>4869022</id><snippet>python setup.py install</snippet></ROW><ROW><id>4869131</id><snippet>class author(models.Model):
    # fields?

class language(models.Model):
    iso_lang_code = models.CharField() # probably need some constraints here

class resource(models.Model):
    name = models.CharField()
    authors = models.ManyToManyField(Author)
    languages = models.ManyToManyField(Language)
</snippet></ROW><ROW><id>4869131</id><snippet>r = resource(name="")
a1 = author(name="ninefingers")
a2 = author(name="jon skeet", type="god")
r.authors.add(a1)
r.authors.add(a2)
english = languages.objects.get(iso_lang_code="en-GB")
r.add(english)
r.save()
</snippet></ROW><ROW><id>4869131</id><snippet>english = languages.objects.get(iso_lang_code="en-GB")
resourcesinenglish = english.resource_set.all()

for r in resourcesinenglish:
    # do something on r.
</snippet></ROW><ROW><id>4869131</id><snippet>objects.filter(language='en-GB')</snippet></ROW><ROW><id>4869131</id><snippet>WHERE language='en-GB'</snippet></ROW><ROW><id>4869131</id><snippet>;</snippet></ROW><ROW><id>4869131</id><snippet>r = resource.objects.get(id=701)
langs = r.languages.split(';')
for l in language:
    print l
</snippet></ROW><ROW><id>4869131</id><snippet>Authors</snippet></ROW><ROW><id>4869131</id><snippet>select_near</snippet></ROW><ROW><id>4869245</id><snippet>import csv
from itertools import izip
a = izip(*csv.reader(open("input.csv", "rb")))
csv.writer(open("output.csv", "wb")).writerows(a)
</snippet></ROW><ROW><id>4869245</id><snippet>zip()</snippet></ROW><ROW><id>4869245</id><snippet>izip()</snippet></ROW><ROW><id>4869245</id><snippet>a = [(1, 2, 3),
     (4, 5, 6),
     (7, 8, 9)]
zip(*a)
# [(1, 4, 7),
#  (2, 5, 8),
#  (3, 6, 9)]
</snippet></ROW><ROW><id>4869245</id><snippet>izip()</snippet></ROW><ROW><id>4869341</id><snippet>set show-all-if-ambiguous on
</snippet></ROW><ROW><id>4869341</id><snippet>&lt;tab&gt;</snippet></ROW><ROW><id>4869341</id><snippet>&lt;tab&gt;</snippet></ROW><ROW><id>4869494</id><snippet>SyntaxError</snippet></ROW><ROW><id>4869805</id><snippet>i = dictionary['Name'].index('Thomas')
y = dictionary['Age'][i]
</snippet></ROW><ROW><id>4869805</id><snippet>index</snippet></ROW><ROW><id>4869805</id><snippet>Person = collections.namedtuple('Person', ['Name', 'Age'])
dictionary = {'Thomas': Person('Thomas', 30), 'Steven': Person('Steven', 50), 'Pauly D': Person('Pauly D', 29)}
</snippet></ROW><ROW><id>4869838</id><snippet>if x = y: # oops! meant to say ==
</snippet></ROW><ROW><id>4869838</id><snippet>def f():
    print x

def g():
    x = h()
    print x
</snippet></ROW><ROW><id>4869838</id><snippet>print x</snippet></ROW><ROW><id>4869838</id><snippet>x</snippet></ROW><ROW><id>4869838</id><snippet>x</snippet></ROW><ROW><id>4869838</id><snippet>x</snippet></ROW><ROW><id>4869838</id><snippet>g</snippet></ROW><ROW><id>4869905</id><snippet>ADMINS</snippet></ROW><ROW><id>4869905</id><snippet>from django.conf import settings
settings.ADMINS
</snippet></ROW><ROW><id>4869905</id><snippet>from django.conf import settings
admin_emails = [v for k,v in settings.ADMINS]
</snippet></ROW><ROW><id>4870159</id><snippet>setup</snippet></ROW><ROW><id>4870159</id><snippet>setup</snippet></ROW><ROW><id>4870426</id><snippet>application/x-www-form-urlencoded</snippet></ROW><ROW><id>4870426</id><snippet>{"description": "Some Description for the build"}
</snippet></ROW><ROW><id>4870426</id><snippet>def set_description(build_url, desc):
    req_data = urllib.urlencode({'description': desc})
    req = urllib2.Request(build_url + '/submitDescription', req_data)
    req.add_header('Content-Type', 'application/x-www-form-urlencoded')
    urllib2.urlopen(req)
</snippet></ROW><ROW><id>4870542</id><snippet>                            C#       IronPython
Dynamic Operations           1           4
Allocations                  1           4
Locks Acquired               0           1
</snippet></ROW><ROW><id>4870542</id><snippet>def computeValue(value):
    return value + 1
</snippet></ROW><ROW><id>4870542</id><snippet>CompiledCode compiled = src.Compile();
compiled.Execute(pys);
var computer = pys.GetVariable&lt;Func&lt;object,object&gt;&gt;("computeValue");
</snippet></ROW><ROW><id>4870542</id><snippet>for (int i = 0; i &lt; 10000000; i++)
{
    results[i] = computer(i);
}
</snippet></ROW><ROW><id>4870654</id><snippet>class X(object):
    def func(self, *, arg1, arg2, arg3):
        pass
</snippet></ROW><ROW><id>4870680</id><snippet>gtk_rc_parse_string</snippet></ROW><ROW><id>4870680</id><snippet>gtk.rc_parse_string</snippet></ROW><ROW><id>4870711</id><snippet>with open('lyrics.conf') as f:
    data = file.read()
verses = data.split('/')
def build_blender_object(verse):
  # Put meaningful code here
  pass
blender_objects = [build_blender_object(v) for v in verses]
</snippet></ROW><ROW><id>4870905</id><snippet>w + xi + yj + zk</snippet></ROW><ROW><id>4870905</id><snippet>(w, x, y, z)</snippet></ROW><ROW><id>4870905</id><snippet>def normalize(v, tolerance=0.00001):
    mag2 = sum(n * n for n in v)
    if abs(mag2 - 1.0) &gt; tolerance:
        mag = sqrt(mag2)
        v = tuple(n / mag for n in v)
    return v
</snippet></ROW><ROW><id>4870905</id><snippet>def q_mult(q1, q2):
    w1, x1, y1, z1 = q1
    w2, x2, y2, z2 = q2
    w = w1 * w2 - x1 * x2 - y1 * y2 - z1 * z2
    x = w1 * x2 + x1 * w2 + y1 * z2 - z1 * y2
    y = w1 * y2 + y1 * w2 + z1 * x2 - x1 * z2
    z = w1 * z2 + z1 * w2 + x1 * y2 - y1 * x2
    return w, x, y, z
</snippet></ROW><ROW><id>4870905</id><snippet>def q_conjugate(q):
    q = normalize(q)
    w, x, y, z = q
    return (w, -x, -y, -z)
</snippet></ROW><ROW><id>4870905</id><snippet>w = 0</snippet></ROW><ROW><id>4870905</id><snippet>x</snippet></ROW><ROW><id>4870905</id><snippet>y</snippet></ROW><ROW><id>4870905</id><snippet>z</snippet></ROW><ROW><id>4870905</id><snippet>q * v * q_conjugate(q)</snippet></ROW><ROW><id>4870905</id><snippet>def qv_mult(q1, v1):
    v1 = normalize(v1)
    q2 = (0.0,) + v1
    return q_mult(q_mult(q1, q2), q_conjugate(q1))[1:]
</snippet></ROW><ROW><id>4870905</id><snippet>def axisangle_to_q(v, theta):
    v = normalize(v)
    x, y, z = v
    theta /= 2
    w = cos(theta)
    x = x * sin(theta)
    y = y * sin(theta)
    z = z * sin(theta)
    return w, x, y, z
</snippet></ROW><ROW><id>4870905</id><snippet>def q_to_axisangle(q):
    w, v = q[0], q[1:]
    theta = acos(w) * 2.0
    return normalize(v), theta
</snippet></ROW><ROW><id>4870905</id><snippet>x_axis_unit = (1, 0, 0)
y_axis_unit = (0, 1, 0)
z_axis_unit = (0, 0, 1)
r1 = axisangle_to_q(x_axis_unit, numpy.pi / 2)
r2 = axisangle_to_q(y_axis_unit, numpy.pi / 2)
r3 = axisangle_to_q(z_axis_unit, numpy.pi / 2)

v = qv_mult(r1, y_axis_unit)
v = qv_mult(r2, v)
v = qv_mult(r3, v)

print v
# output: (0.0, 1.0, 2.220446049250313e-16)
</snippet></ROW><ROW><id>4870905</id><snippet>v = qv_mult(r1, x_axis_unit)
v = qv_mult(r2, v)
v = qv_mult(r3, v)

print v
# output: (4.930380657631324e-32, 2.220446049250313e-16, -1.0)
</snippet></ROW><ROW><id>4871075</id><snippet>num_members</snippet></ROW><ROW><id>4871075</id><snippet>mygroup.members.count()</snippet></ROW><ROW><id>4871075</id><snippet>ManyToManyField</snippet></ROW><ROW><id>4871075</id><snippet>Group</snippet></ROW><ROW><id>4871075</id><snippet>member</snippet></ROW><ROW><id>4871075</id><snippet>User</snippet></ROW><ROW><id>4871075</id><snippet>group_group_users</snippet></ROW><ROW><id>4871075</id><snippet>Group</snippet></ROW><ROW><id>4871075</id><snippet>User</snippet></ROW><ROW><id>4871075</id><snippet>group_group_users</snippet></ROW><ROW><id>4871075</id><snippet>&gt;&gt;&gt; group = Group.objects.get(pk=1)
&gt;&gt;&gt; user = User.objects.get(pk=1)
&gt;&gt;&gt; group.members.add(user)
&gt;&gt;&gt; # Worked fine as expected. Let's check the results.
&gt;&gt;&gt; group.members.all()
[&lt;User: foousername&gt;]
&gt;&gt;&gt; group.members.add(user)
&gt;&gt;&gt; # Worked fine again. Let's check for duplicates.
&gt;&gt;&gt; group.members.all()
[&lt;User: foousername&gt;]
&gt;&gt;&gt; # Worked fine.
</snippet></ROW><ROW><id>4871330</id><snippet>127.0.0.1</snippet></ROW><ROW><id>4871330</id><snippet>localhost</snippet></ROW><ROW><id>4871330</id><snippet>mysql</snippet></ROW><ROW><id>4871330</id><snippet>user</snippet></ROW><ROW><id>4871330</id><snippet>host</snippet></ROW><ROW><id>4871330</id><snippet>hosts</snippet></ROW><ROW><id>4871384</id><snippet>break</snippet></ROW><ROW><id>4871384</id><snippet>x[i-1:i+1, j-1:j+1] = value 
</snippet></ROW><ROW><id>4871384</id><snippet>x</snippet></ROW><ROW><id>4871384</id><snippet>i</snippet></ROW><ROW><id>4871384</id><snippet>j</snippet></ROW><ROW><id>4871384</id><snippet>value</snippet></ROW><ROW><id>4871384</id><snippet>x[i-1:i+1, j-1:j+1]</snippet></ROW><ROW><id>4871384</id><snippet>&lt;i,j&gt;</snippet></ROW><ROW><id>4871384</id><snippet>&lt;i,j&gt;</snippet></ROW><ROW><id>4871384</id><snippet>numpy.argwhere</snippet></ROW><ROW><id>4871384</id><snippet>&lt;i,j&gt;</snippet></ROW><ROW><id>4871384</id><snippet>x &gt;= 10</snippet></ROW><ROW><id>4871384</id><snippet>x</snippet></ROW><ROW><id>4871384</id><snippet>True</snippet></ROW><ROW><id>4871384</id><snippet>False</snippet></ROW><ROW><id>4871384</id><snippet>x[x&gt;100] = 10</snippet></ROW><ROW><id>4871384</id><snippet>x</snippet></ROW><ROW><id>4871384</id><snippet>import numpy as np

# First let's generate some data and set a few duplicate values
data = np.arange(100).reshape(10,10)
data[9,9] = 2
data[8,6] = 53

print 'Original Data:'
print data

# We want to replace the _first_ occurences of "samples" with the corresponding
# value in "grid_details" within a 3x3 window...
samples = [2, 53, 69]
grid_details = [200,500,100]

nrows, ncols = data.shape
for value, new_value in zip(samples, grid_details):
    # Notice that were're indexing the _first_ item than argwhere returns!
    i,j = np.argwhere(data == value)[0]

    # We need to make sure that we don't index outside the boundaries of the
    # array (which would cause a "wraparound" assignment)
    istart, istop = max(i-1, 0), min(i+2, nrows)
    jstart, jstop = max(j-1, 0), min(j+2, ncols)

    # Set the value within a 3x3 window to be "new_value"
    data[istart:istop, jstart:jstop] = new_value

print 'Modified Data:'
print data
</snippet></ROW><ROW><id>4871384</id><snippet>Original Data:
[[ 0  1  2  3  4  5  6  7  8  9]
 [10 11 12 13 14 15 16 17 18 19]
 [20 21 22 23 24 25 26 27 28 29]
 [30 31 32 33 34 35 36 37 38 39]
 [40 41 42 43 44 45 46 47 48 49]
 [50 51 52 53 54 55 56 57 58 59]
 [60 61 62 63 64 65 66 67 68 69]
 [70 71 72 73 74 75 76 77 78 79]
 [80 81 82 83 84 85 50 87 88 89]
 [90 91 92 93 94 95 96 97 98  2]]

Modified Data:
[[  0 200 200 200   4   5   6   7   8   9]
 [ 10 200 200 200  14  15  16  17  18  19]
 [ 20  21  22  23  24  25  26  27  28  29]
 [ 30  31  32  33  34  35  36  37  38  39]
 [ 40  41 500 500 500  45  46  47  48  49]
 [ 50  51 500 500 500  55  56  57 100 100]
 [ 60  61 500 500 500  65  66  67 100 100]
 [ 70  71  72  73  74  75  76  77 100 100]
 [ 80  81  82  83  84  85  50  87  88  89]
 [ 90  91  92  93  94  95  96  97  98   2]]
</snippet></ROW><ROW><id>4871384</id><snippet>import numpy as np

x = np.arange(9)
y = x.reshape(3,3)

print x
print y

y[2,2] = 10000

print x
print y
</snippet></ROW><ROW><id>4871384</id><snippet>y</snippet></ROW><ROW><id>4871384</id><snippet>x</snippet></ROW><ROW><id>4871384</id><snippet>y</snippet></ROW><ROW><id>4871384</id><snippet>x</snippet></ROW><ROW><id>4871384</id><snippet>flat_array = y.ravel()</snippet></ROW><ROW><id>4871384</id><snippet>y</snippet></ROW><ROW><id>4871475</id><snippet>c = ConfigParser.RawConfigParser()
c.readfp(open(os.path.join('/var/lib/schroot/session', chroot_session), 'r'))
chroot_basedir = c.get(chroot_session, 'mount-location')
with open(os.path.join(chroot_basedir, '/tmp/file.txt'), 'w') as fp:
    fp.write(text)
</snippet></ROW><ROW><id>4871475</id><snippet>schroot</snippet></ROW><ROW><id>4871475</id><snippet>p = subprocess.Popen(['schroot', '-c', name, '-r', 'tee', '/tmp/file.txt'],
                     stdin=subprocess.PIPE,
                     stdout=open('/dev/null', 'w'),
                     stderr=sys.stderr)
p.stdin.write(text)
p.stdin.close()
rc = p.wait()
assert rc == 0
</snippet></ROW><ROW><id>4871674</id><snippet>delete()</snippet></ROW><ROW><id>4871674</id><snippet>signal.connect</snippet></ROW><ROW><id>4872325</id><snippet>{% for file in filelist %}
  {{ file }}
{% endfor %}
</snippet></ROW><ROW><id>4872325</id><snippet>{% for file in filelist %}
  &lt;a href="{{file.url}}"&gt;{{ file.name }}&lt;/a&gt;
{% endfor %}
</snippet></ROW><ROW><id>4872431</id><snippet>[buildout]
versions = versions

[versions]
foo = 1.0
bar = 1.1
spam = 1.0b2
</snippet></ROW><ROW><id>4872431</id><snippet>versions</snippet></ROW><ROW><id>4872431</id><snippet>[buildout]</snippet></ROW><ROW><id>4872431</id><snippet>[versions]</snippet></ROW><ROW><id>4872431</id><snippet>[release1]</snippet></ROW><ROW><id>4872431</id><snippet>[release2]</snippet></ROW><ROW><id>4872431</id><snippet>versions</snippet></ROW><ROW><id>4872431</id><snippet>allow-picked-versions</snippet></ROW><ROW><id>4872431</id><snippet>[buildout]
allow-picked-versions = false
</snippet></ROW><ROW><id>4872431</id><snippet>true</snippet></ROW><ROW><id>4872431</id><snippet>false</snippet></ROW><ROW><id>4872431</id><snippet>[buildout]
extensions = buildout.dumppickedversions
</snippet></ROW><ROW><id>4873927</id><snippet>    # -*- coding: utf8 -*-
</snippet></ROW><ROW><id>4874181</id><snippet>ConfigParser</snippet></ROW><ROW><id>4874230</id><snippet>import numpy as np
dists = np.vstack(([x_dists.T], [y_dists.T])).T
</snippet></ROW><ROW><id>4874230</id><snippet>dists</snippet></ROW><ROW><id>4874230</id><snippet>dists.shape # (3, 3, 2)
</snippet></ROW><ROW><id>4874471</id><snippet>for model, category in self.current_session.query(Model, Category).join(Category).distinct():
    print model.category_id, category.name
</snippet></ROW><ROW><id>4874503</id><snippet>locals</snippet></ROW><ROW><id>4874503</id><snippet>globals</snippet></ROW><ROW><id>4874503</id><snippet>import</snippet></ROW><ROW><id>4874503</id><snippet>globals</snippet></ROW><ROW><id>4874503</id><snippet>import</snippet></ROW><ROW><id>4874503</id><snippet>import.c</snippet></ROW><ROW><id>4874503</id><snippet>__import__</snippet></ROW><ROW><id>4874503</id><snippet>__name__</snippet></ROW><ROW><id>4874503</id><snippet>__path__</snippet></ROW><ROW><id>4874503</id><snippet>globals</snippet></ROW><ROW><id>4874560</id><snippet># Java

0       beshort         0xcafe
&gt;2      beshort         0xbabe          application/x-java-applet
</snippet></ROW><ROW><id>4874560</id><snippet>data = open(path).read()
if data[0:4] == '\xca\xfe\xba\xbe':
    minetype = 'application/x-java-applet'
</snippet></ROW><ROW><id>4874672</id><snippet>0</snippet></ROW><ROW><id>4874672</id><snippet>'seljak'</snippet></ROW><ROW><id>4874672</id><snippet>0</snippet></ROW><ROW><id>4874672</id><snippet>print sim_pearson(tests, 'test@example.com', 'seljak')
</snippet></ROW><ROW><id>4874672</id><snippet>'seljak'</snippet></ROW><ROW><id>4874826</id><snippet>import Image
import ImageDraw

im = Image.open("image.jpg")
im.thumbnail((300,300))
box = im.getbbox()
im2=im.crop((box[0], box[1], box[2], box[3]+50))
draw=ImageDraw.Draw(im2)
draw.text((box[2]-100,box[3]+10), "Copyright")
im2.show()
</snippet></ROW><ROW><id>4875003</id><snippet>echo ini_get('upload_max_filesize');</snippet></ROW><ROW><id>4875055</id><snippet>import win32gui
handle = win32gui.FindWindow(None, cmd_window_title)
win32gui.ShowWindow(handle, 6)
</snippet></ROW><ROW><id>4875055</id><snippet>SW_MINIMIZE</snippet></ROW><ROW><id>4875076</id><snippet>RewriteEngine On
RewriteOptions Inherit
RewriteRule   ^commentsubmit$  commentsubmit.py
</snippet></ROW><ROW><id>4875130</id><snippet>__unicode__</snippet></ROW><ROW><id>4875130</id><snippet>class School(db.Model):  
    school_id = db.StringProperty(required=True)  
    school_name= db.StringProperty(required=True)  
    school_domain = db.StringProperty(required=False) 

    def __unicode__(self):
        return self.school_name
</snippet></ROW><ROW><id>4875139</id><snippet>from datetime import datetime, timedelta
import random

birthday = datetime.today() - timedelta(days = random.randrange(6571, 27375))

print 'Person was born on %s' % (birthday.strftime('%Y-%m-%d'))    
</snippet></ROW><ROW><id>4875196</id><snippet>// Algorithm example

MarkerCoords = {Four coordinates of know 3D points}

I1 = take 1st image
F1 = focal(I1)
MarkerPixels1 = {Matching pixels in I1}
Pose1 = posit(MarkerCoords, MarkerPixels1, F1)

I2 = take 2nd image
F2 = focal(I2)
MarkerPixels2 = {Matching pixels in I2 by optical flow}
Pose2 = posit(MarkerCoords, MarkerPixels2, F2)

o1 = origin_of_camera * Pose1 // Origin of camera is
o2 = origin_of_camera * Pose2 // typically [0,0,0]
dist = euclidean_distance(o1, o2)
speed = dist/frequency
</snippet></ROW><ROW><id>4875196</id><snippet>speed = D/(t2-t1)
</snippet></ROW><ROW><id>4875196</id><snippet>D</snippet></ROW><ROW><id>4875196</id><snippet>[o1 o2]</snippet></ROW><ROW><id>4875196</id><snippet>o1</snippet></ROW><ROW><id>4875196</id><snippet>t1</snippet></ROW><ROW><id>4875196</id><snippet>o2</snippet></ROW><ROW><id>4875196</id><snippet>t2</snippet></ROW><ROW><id>4875196</id><snippet>t1</snippet></ROW><ROW><id>4875196</id><snippet>t2</snippet></ROW><ROW><id>4875196</id><snippet>t2-t1 = T = 1/F</snippet></ROW><ROW><id>4875333</id><snippet>.key()</snippet></ROW><ROW><id>4875333</id><snippet>i.key</snippet></ROW><ROW><id>4875452</id><snippet>kontenier = db.GqlQuery('SELECT * FROM oceni')
kolekcija = {}
for it in kontenier:
    if it.user not in kolekcija:
        kolekcija[it.user] = {}
    kolekcija[it.user][it.item] = it.weight
</snippet></ROW><ROW><id>4875519</id><snippet>import scikits.timeseries as ts

dates = ts.date_array(start_date=ts.Date('Q', '2009-01'),
                      end_date=ts.Date('Q', '2011-01'))
data = ts.TimeSeries(np.arange(9), dates=dates, mask=1-dates.quarter%2)

# returns:
timeseries([0 -- 2 -- 4 -- 6 -- 8],
   dates = [2009Q1 ... 2011Q1],
   freq  = Q-DEC)
</snippet></ROW><ROW><id>4875877</id><snippet>import os
import sys
import zipfile

if __name__ == "__main__":
    args = sys.argv[1:]


    print "Testing zip file: %s" % args[0]

    the_zip_file = zipfile.ZipFile(args[0])
    ret = the_zip_file.testzip()

    if ret is not None:
        print "First bad file in zip: %s" % ret
        sys.exit(1)
    else:
        print "Zip file is good."
        sys.exit(0)
</snippet></ROW><ROW><id>4875961</id><snippet>&gt;&gt;&gt; from ctypes import *
&gt;&gt;&gt; libc = cdll.msvcrt
</snippet></ROW><ROW><id>4875961</id><snippet>libc.printf</snippet></ROW><ROW><id>4875961</id><snippet>libc.fopen</snippet></ROW><ROW><id>4875961</id><snippet>open</snippet></ROW><ROW><id>4875961</id><snippet>read</snippet></ROW><ROW><id>4875961</id><snippet>libc._open</snippet></ROW><ROW><id>4875961</id><snippet>libc._read</snippet></ROW><ROW><id>4876204</id><snippet>source</snippet></ROW><ROW><id>4876304</id><snippet>  target_row = 5
  for num, line in enumerate(d):
      if num == target_row:
          print line["name"]
          break
</snippet></ROW><ROW><id>4876304</id><snippet>score</snippet></ROW><ROW><id>4876467</id><snippet>class Universe:
    def __contains__(_,x): return True
</snippet></ROW><ROW><id>4876510</id><snippet>##-------------demo code--------------------------------------------##

def count_numbers(number):
    i = 0
    while i &lt; number:
        i = i + 1

def some_fct():
    global count
    i = 0
    while i &lt; 5:
        count = count + 1
        count_numbers(5000000)
        i = i + 1

def other_fct():
    global count
    i = 0
    while i &lt; 5:
        count = count + 1
        count_numbers(5000000)
        i = i + 1

def do_stuff():
    some_fct()
    other_fct()

def update_progress(m):
    value = float(count) / total
    if value &lt; 1.0:
        m.set(value)
        m.after(500, lambda: update_progress(m))
    else:
        m.set(value, 'Process Completed')

if __name__ == '__main__':
    global count
    global total
    count = 0
    total = 10
    root = Tkinter.Tk(className='meter demo')
    m = Meter(root, relief='ridge', bd=3)
    m.pack(fill='x')
    m.set(0.0, 'Starting meter')    
    m.after(50, lambda: update_progress(m))
    thread.start_new_thread(do_stuff, () )
    root.mainloop()
</snippet></ROW><ROW><id>4876540</id><snippet>fig.subplots_adjust(left=None, bottom=None, right=None, top=None, wspace=None, hspace=None)
</snippet></ROW><ROW><id>4877548</id><snippet>self.EnsureVisible(self.GetItemCount() - 1)
</snippet></ROW><ROW><id>4877655</id><snippet>A.__dict__.__dict__</snippet></ROW><ROW><id>4877655</id><snippet>A.__dict__['__dict__']</snippet></ROW><ROW><id>4877655</id><snippet>__dict__</snippet></ROW><ROW><id>4877655</id><snippet>__dict__</snippet></ROW><ROW><id>4877655</id><snippet>__dict__</snippet></ROW><ROW><id>4877655</id><snippet>A</snippet></ROW><ROW><id>4877655</id><snippet>instance.__dict__</snippet></ROW><ROW><id>4877655</id><snippet>A.__dict__['__dict__']</snippet></ROW><ROW><id>4877655</id><snippet>vars(A)['__dict__']</snippet></ROW><ROW><id>4877655</id><snippet>A.__dict__</snippet></ROW><ROW><id>4877655</id><snippet>type.__dict__['__dict__']</snippet></ROW><ROW><id>4877655</id><snippet>vars(type)['__dict__']</snippet></ROW><ROW><id>4877655</id><snippet>__getattribute__</snippet></ROW><ROW><id>4877655</id><snippet>__dict__</snippet></ROW><ROW><id>4877655</id><snippet>vars(ob)</snippet></ROW><ROW><id>4877655</id><snippet>__dict__</snippet></ROW><ROW><id>4877655</id><snippet>dict</snippet></ROW><ROW><id>4877655</id><snippet>__getattribute__</snippet></ROW><ROW><id>4877655</id><snippet>__getattr__</snippet></ROW><ROW><id>4877655</id><snippet>__dict__</snippet></ROW><ROW><id>4877655</id><snippet>x.name</snippet></ROW><ROW><id>4877655</id><snippet>x.__dict__['name']</snippet></ROW><ROW><id>4877655</id><snippet>type(x).name.__get__(x, type(x))</snippet></ROW><ROW><id>4877655</id><snippet>type(x).name</snippet></ROW><ROW><id>4877655</id><snippet>x.__dict__</snippet></ROW><ROW><id>4877655</id><snippet>__dict__</snippet></ROW><ROW><id>4877655</id><snippet>instance</snippet></ROW><ROW><id>4877655</id><snippet>__dict__</snippet></ROW><ROW><id>4877655</id><snippet>__dict__</snippet></ROW><ROW><id>4877655</id><snippet>var(cls)</snippet></ROW><ROW><id>4877655</id><snippet>__dict__</snippet></ROW><ROW><id>4877655</id><snippet>__weakref__</snippet></ROW><ROW><id>4877655</id><snippet>weakref</snippet></ROW><ROW><id>4877655</id><snippet>__slots__</snippet></ROW><ROW><id>4877655</id><snippet>__dict__</snippet></ROW><ROW><id>4877655</id><snippet>__weakref__</snippet></ROW><ROW><id>4877655</id><snippet>A.__dict__</snippet></ROW><ROW><id>4877655</id><snippet>A.__dict__['__dict__']</snippet></ROW><ROW><id>4877655</id><snippet>__dict__</snippet></ROW><ROW><id>4877655</id><snippet>vars(A)</snippet></ROW><ROW><id>4877655</id><snippet>A.__weakref__</snippet></ROW><ROW><id>4877655</id><snippet>A.__dict__['__weakref__']</snippet></ROW><ROW><id>4877655</id><snippet>A.__dict__</snippet></ROW><ROW><id>4877655</id><snippet>vars(A)</snippet></ROW><ROW><id>4877676</id><snippet>MultiService</snippet></ROW><ROW><id>4877676</id><snippet>ServiceMaker</snippet></ROW><ROW><id>4877676</id><snippet>ThreadPoolService</snippet></ROW><ROW><id>4877676</id><snippet>multi = MultiService()
mine = TCPServer(...) # your existing application service
threads = ThreadPoolService()
mine.setServiceParent(multi)
threads.setServiceParent(multi)
return multi
</snippet></ROW><ROW><id>4877755</id><snippet>def some_method(param1="param1", param2=None):
    # param1 is "param1" unless some other value is passed in.
    # param2 is None if some value is not passed for it.
</snippet></ROW><ROW><id>4877755</id><snippet>def print_values(first_value="Hello", second_value=None):
    print first_value, second_value or "World!"

print_values() #prints Hello World!
print_values(first_value="Greetings") #prints Greetings World!
print_values(second_value="You!") # prints Hello You!
print_values(first_value="Greetings", second_value="You!")
# prints Greetings You!
</snippet></ROW><ROW><id>4877755</id><snippet>print first_value, special_variable_name or second_value or "World!"
</snippet></ROW><ROW><id>4877755</id><snippet>special_variable_name = "Sean"
print_values() # prints Hello Sean
</snippet></ROW><ROW><id>4877755</id><snippet>special_variable_name = None
# ... much code later ...
special_variable_name = "Sean" #This can be commented out
print_values(second_value=special_variable_name) # prints Hello Sean
</snippet></ROW><ROW><id>4877867</id><snippet>in</snippet></ROW><ROW><id>4877867</id><snippet>is</snippet></ROW><ROW><id>4877867</id><snippet>if "x" in dog:
    print "Yes!"
</snippet></ROW><ROW><id>4877867</id><snippet>not in</snippet></ROW><ROW><id>4877867</id><snippet>if "x" not in dog:
    print "No!"
</snippet></ROW><ROW><id>4877915</id><snippet>import sys

f = open("error.log", "w")
sys.stderr = f            
print "raising exception"
raise Exception, "find this in error.log"
</snippet></ROW><ROW><id>4877915</id><snippet>import sys
f = open("logall.txt", "w")
sys.stderr = f
sys.stdout = f
print "find this in logall.txt"
raise Exception, "find this in logall.txt"
</snippet></ROW><ROW><id>4878036</id><snippet>#!/usr/bin/python

result = raw_input("Enter some string: ")
print result.replace("J","")
</snippet></ROW><ROW><id>4878036</id><snippet>1J1J</snippet></ROW><ROW><id>4878036</id><snippet>11
</snippet></ROW><ROW><id>4878036</id><snippet>1J1J</snippet></ROW><ROW><id>4878202</id><snippet>import re

def _replace(content):
    values = [float(val) for val in content.group(2).split()]
    values[3] += 20
    values[5] += 100
    values = ['{0}'.format(val) for val in values]
    return content.group(1) + ' '.join(values) + content.group(3)

test_string = '&lt;g transform="matrix(0.412445 -0.0982513 0.0982513 0.412445 -5.77618 67.0025)"&gt;'
pattern = r'(transform=\"matrix\()(.*?)(\))'
print test_string
print re.sub(pattern, _replace, test_string)
</snippet></ROW><ROW><id>4878233</id><snippet>__init__</snippet></ROW><ROW><id>4878233</id><snippet>import numpy as np

class Site:
    def __init__(self, a):
        self.a = a
    def set_a(self, new_a):
        self.a = new_a

vSite = np.vectorize(Site)

init_arry = np.arange(9).reshape((3,3))

lattice = np.empty((3,3), dtype=object)
lattice[:,:] = vSite(init_arry)
</snippet></ROW><ROW><id>4878243</id><snippet>james = User.objects.get(pk= 123)
james_groups = james.group_set.all()
</snippet></ROW><ROW><id>4878425</id><snippet>self.lineEdit.setText(’My Generic Device Name’)
</snippet></ROW><ROW><id>4878425</id><snippet>from brisa.core.reactors.qtreactor import QtReactor
reactor = QtReactor()
from brisa.core import config
from brisa.upnp.device import Device
from brisa.upnp.device.service import Service, StateVariable
class QtDevice(QtGui.QWidget):
     def __init__(self):

         QtGui.QWidget.__init__(self)
         self.verticalLayout = QtGui.QVBoxLayout(self)
         self.title = QtGui.QLabel("Qt Simple Device")
         font = QtGui.QFont()
         font.setPointSize(15)
         self.title.setFont(font)
         self.title.setAlignment(QtCore.Qt.AlignCenter)
         self.verticalLayout.addWidget(self.title)
         self.lineEdit = QtGui.QLineEdit(self)
         self.verticalLayout.addWidget(self.lineEdit)
         self.search_btn = QtGui.QPushButton("Start Device", self)
         self.verticalLayout.addWidget(self.search_btn)
         QtCore.QObject.connect(self.search_btn, QtCore.SIGNAL("clicked()"), self.start)
         self.stop_btn = QtGui.QPushButton("Stop Device", self)
         self.verticalLayout.addWidget(self.stop_btn)
         QtCore.QObject.connect(self.stop_btn, QtCore.SIGNAL("clicked()"), self.stop)
         self.lineEdit.setText('My Generic Device Name')
         self.root_device = None
         self.upnp_urn = 'urn:schemas-upnp-org:device:MyDevice:1'


     def _add_root_device(self):
         project_page = 'http://brisa.garage.maemo.org'
         serial_no = config.manager.brisa_version.replace('.', '').rjust(7, '0')
         self.root_device = Device(self.upnp_urn,str(self.lineEdit.text()),
                                    manufacturer='',
                                    manufacturer_url=,
                                    model_description=' '

                                    model_name='',
                                    model_number=,
                                    model_url=,
                                    serial_number=)  


     def _add_services(self):
         service_name = 'MyService'
         service_type = 'urn:schemas-upnp-org:service:MyService:1'
         myservice = Service(service_name, service_type, '')
         var = StateVariable(self, "A_ARG_TYPE_Variable",True, False, "string")
         myservice.add_state_variable(var)
         self.root_device.add_service(myservice)

    def _load(self):
         self._add_root_device()
         self._add_services()
         def start(self):
         self.stop()
         self._load()
         self.root_device.start()
         reactor.add_after_stop_func(self.root_device.stop)  

     def stop(self):
         if self.root_device:
             self.root_device.stop()
             self.root_device = None

def main():
     qt_dev = QtDevice()
     qt_dev.show()
     reactor.main()
if __name__ == '__main__':
     main()   
</snippet></ROW><ROW><id>4878660</id><snippet>__init__.py</snippet></ROW><ROW><id>4878660</id><snippet>import SiteCrawlers.site1_ripper
</snippet></ROW><ROW><id>4878948</id><snippet>memoryview</snippet></ROW><ROW><id>4878948</id><snippet>array.array</snippet></ROW><ROW><id>4878948</id><snippet>bytearray</snippet></ROW><ROW><id>4878948</id><snippet>str</snippet></ROW><ROW><id>4878948</id><snippet>memoryview</snippet></ROW><ROW><id>4878962</id><snippet>numpy</snippet></ROW><ROW><id>4878962</id><snippet>&gt;&gt;&gt; from collections import namedtuple
&gt;&gt;&gt; Fruit = namedtuple("Fruit", ["name", "color"])
&gt;&gt;&gt; f = Fruit(name="banana", color="red")
&gt;&gt;&gt; print f
Fruit(name='banana', color='red')
&gt;&gt;&gt; f.name
'banana'
&gt;&gt;&gt; f.color
'red'
</snippet></ROW><ROW><id>4878962</id><snippet>&gt;&gt;&gt; fruitcount = {Fruit("banana", "red"):5}
&gt;&gt;&gt; fruitcount[f]
5
</snippet></ROW><ROW><id>4878962</id><snippet>&gt;&gt;&gt; fruits = fruitcount.keys()
&gt;&gt;&gt; fruits.sort()
&gt;&gt;&gt; print fruits
[Fruit(name='apple', color='green'), 
 Fruit(name='apple', color='red'), 
 Fruit(name='banana', color='blue'), 
 Fruit(name='strawberry', color='blue')]
&gt;&gt;&gt; fruits.sort(key=lambda x:x.color)
&gt;&gt;&gt; print fruits
[Fruit(name='banana', color='blue'), 
 Fruit(name='strawberry', color='blue'), 
 Fruit(name='apple', color='green'), 
 Fruit(name='apple', color='red')]
</snippet></ROW><ROW><id>4878962</id><snippet>bananas = [fruit for fruit in fruits if fruit.name=='banana']
</snippet></ROW><ROW><id>4879022</id><snippet>'\r\n'</snippet></ROW><ROW><id>4879022</id><snippet>'\n'</snippet></ROW><ROW><id>4879205</id><snippet>myproduct.myproduct</snippet></ROW><ROW><id>4879205</id><snippet>django-admin.py startproject myproduct
cd myproduct
mkdir myproduct
touch myproduct/__init__.py
touch myproduct/models.py
touch myproduct/views.py
</snippet></ROW><ROW><id>4879205</id><snippet>views.py</snippet></ROW><ROW><id>4879205</id><snippet>views.py</snippet></ROW><ROW><id>4879205</id><snippet>widgets.py</snippet></ROW><ROW><id>4879205</id><snippet>fields.py</snippet></ROW><ROW><id>4879205</id><snippet>context_processors.py</snippet></ROW><ROW><id>4879205</id><snippet>website</snippet></ROW><ROW><id>4879205</id><snippet>fields.py</snippet></ROW><ROW><id>4879205</id><snippet>inputtypes.py</snippet></ROW><ROW><id>4879242</id><snippet>csr.executemany('INSERT INTO test.%s VALUES (?,?,?,?)' % symbol, Newdata)
</snippet></ROW><ROW><id>4879242</id><snippet>query = 'INSERT INTO test.%s VALUES (?,?,?,?)' % symbol
csr.executemany(query, Newdata)
</snippet></ROW><ROW><id>4879242</id><snippet>?</snippet></ROW><ROW><id>4879242</id><snippet>%s</snippet></ROW><ROW><id>4879242</id><snippet>query = 'INSERT INTO test.%s' % symbol
query += ' VALUES (%s,%s,%s,%s)'
</snippet></ROW><ROW><id>4879242</id><snippet>query = 'INSERT INTO test.%s VALUES (%%s,%%s,%%s,%%s)' % symbol
</snippet></ROW><ROW><id>4879368</id><snippet>from mongoengine import *                           

class Foo(EmbeddedDocument):                  
    #Declare your Foo properties here

class Guid(EmbeddedDocument):                  
    name = StringField()                 
    foos = ListField(EmbeddedDocumentField(Foo))                                    

class Name(Document):                          
    title = StringField(required=True)                                       
    guids = ListField(EmbeddedDocumentField(Guid))
</snippet></ROW><ROW><id>4879414</id><snippet>def due_date_key(t):
  return (t.due_date is None, t.due_date)

tasks.sort(key=due_date_key)
</snippet></ROW><ROW><id>4879656</id><snippet>overrideredirect</snippet></ROW><ROW><id>4879656</id><snippet>def SetWindowShape(self, evt=None):
    r = wx.RegionFromBitmap(self.bmp)
    self.hasShape = self.SetShape(r)

def OnPaint(self, evt):
    dc = wx.PaintDC(self)
    dc.DrawBitmap(self.bmp, 0,0, True)
</snippet></ROW><ROW><id>4879656</id><snippet>shaped_frame_mobile.py</snippet></ROW><ROW><id>4879656</id><snippet>import wx

# Create a .png image with something drawn on a white background
# and put the path to it here.
IMAGE_PATH = '/python26/projects/shapedwin/image.png'


class ShapedFrame(wx.Frame):
    def __init__(self):
        wx.Frame.__init__(self, None, -1, "Shaped Window",
                style = wx.FRAME_SHAPED | wx.SIMPLE_BORDER )
        self.hasShape = False
        self.delta = wx.Point(0,0)

        # Load the image
        image = wx.Image(IMAGE_PATH, wx.BITMAP_TYPE_PNG)
        image.SetMaskColour(255,255,255)
        image.SetMask(True)            
        self.bmp = wx.BitmapFromImage(image)

        self.SetClientSize((self.bmp.GetWidth(), self.bmp.GetHeight()))
        dc = wx.ClientDC(self)
        dc.DrawBitmap(self.bmp, 0,0, True)
        self.SetWindowShape()
        self.Bind(wx.EVT_LEFT_DCLICK, self.OnDoubleClick)
        self.Bind(wx.EVT_LEFT_DOWN, self.OnLeftDown)
        self.Bind(wx.EVT_LEFT_UP, self.OnLeftUp)
        self.Bind(wx.EVT_MOTION, self.OnMouseMove)
        self.Bind(wx.EVT_RIGHT_UP, self.OnExit)
        self.Bind(wx.EVT_PAINT, self.OnPaint)
        self.Bind(wx.EVT_WINDOW_CREATE, self.SetWindowShape)

    def SetWindowShape(self, evt=None):
        r = wx.RegionFromBitmap(self.bmp)
        self.hasShape = self.SetShape(r)

    def OnDoubleClick(self, evt):
        if self.hasShape:
            self.SetShape(wx.Region())
            self.hasShape = False
        else:
            self.SetWindowShape()

    def OnPaint(self, evt):
        dc = wx.PaintDC(self)
        dc.DrawBitmap(self.bmp, 0,0, True)

    def OnExit(self, evt):
        self.Close()

    def OnLeftDown(self, evt):
        self.CaptureMouse()
        pos = self.ClientToScreen(evt.GetPosition())
        origin = self.GetPosition()
        self.delta = wx.Point(pos.x - origin.x, pos.y - origin.y)

    def OnMouseMove(self, evt):
        if evt.Dragging() and evt.LeftIsDown():
            pos = self.ClientToScreen(evt.GetPosition())
            newPos = (pos.x - self.delta.x, pos.y - self.delta.y)
            self.Move(newPos)

    def OnLeftUp(self, evt):
        if self.HasCapture():
            self.ReleaseMouse()



if __name__ == '__main__':
    app = wx.PySimpleApp()
    ShapedFrame().Show()
    app.MainLoop()
</snippet></ROW><ROW><id>4879684</id><snippet> [y['baz'] for x in foos for y in x['bar']]
</snippet></ROW><ROW><id>4880198</id><snippet>connection.literal</snippet></ROW><ROW><id>4880198</id><snippet>cursor=connection.cursor()
args=[(1,'foo'),(2,'bar')]
sql=('INSERT INTO `foo` (`fooid`,`data`,`time_added`) VALUES '
     +','.join(
         ['(%s,%s,NOW())'%connection.literal(arg)
          for arg in args]))
cursor.execute(sql)
</snippet></ROW><ROW><id>4880198</id><snippet>cursors.executemany</snippet></ROW><ROW><id>4880198</id><snippet>cursors.insert_values</snippet></ROW><ROW><id>4880198</id><snippet>sql='INSERT INTO `foo` (`fooid`,`data`,`time_added`) VALUES (?,?,NOW())'
cursor.executemany(sql,args)
</snippet></ROW><ROW><id>4880237</id><snippet>'\n'</snippet></ROW><ROW><id>4880237</id><snippet>'\r\n'</snippet></ROW><ROW><id>4880237</id><snippet>'\n'</snippet></ROW><ROW><id>4880237</id><snippet>'\r\n'</snippet></ROW><ROW><id>4880454</id><snippet>objects</snippet></ROW><ROW><id>4880454</id><snippet>*arg</snippet></ROW><ROW><id>4880454</id><snippet>**kw</snippet></ROW><ROW><id>4880454</id><snippet>filter</snippet></ROW><ROW><id>4880454</id><snippet>def our_special_filter( some_queryset ):
    for row in some_queryset:
        if row.aMethod(): yield row

result= our_special_filter( SomeModel.objects.filter(...) )
</snippet></ROW><ROW><id>4880480</id><snippet>proxy_set_header X-Real-IP $remote_addr;</snippet></ROW><ROW><id>4880480</id><snippet>request.META</snippet></ROW><ROW><id>4880735</id><snippet>if choice:</snippet></ROW><ROW><id>4880735</id><snippet>print choice</snippet></ROW><ROW><id>4880845</id><snippet>settings.WEB_ROOT</snippet></ROW><ROW><id>4880845</id><snippet># web root set
self.web_root = getattr(self.settings, 'WEB_ROOT')

# web root used 
filename = self.fs.join(self.web_root, path.lstrip('/')).encode('utf-8')

# breaks on real os.path.join
return os.path.join(paths[0], *[path.lstrip("/") for path in paths[1:]])
</snippet></ROW><ROW><id>4880869</id><snippet>__init__</snippet></ROW><ROW><id>4880869</id><snippet>class FooForm(forms.Form):
    bar = forms.ModelChoiceField(queryset=Bar.objects.none())

    def __init__(self, *args, **kwargs):
        qs = kwargs.pop('bars')
        super(FooForm, self).__init__(*args, **kwargs)
        self.fields['bar'].queryset = qs
</snippet></ROW><ROW><id>4880971</id><snippet>sum(d.values())
</snippet></ROW><ROW><id>4880971</id><snippet>itervalues</snippet></ROW><ROW><id>4881033</id><snippet>#ifdef Q_OS_SYMBIAN
const int QHttpNetworkConnectionPrivate::defaultChannelCount = 3;
#else
const int QHttpNetworkConnectionPrivate::defaultChannelCount = 6;
#endif
</snippet></ROW><ROW><id>4881033</id><snippet>hackUrl.setUserName(QString::number(qrand()));
</snippet></ROW><ROW><id>4881213</id><snippet>input_is_valid = False
while not input_is_valid:
    comma_separated_numbers = raw_input("Please enter a list of 5 numbers,separated by commas: ")
    numbers = [int(x.strip()) for x in comma_separated_numbers.split(",")]
    if len(numbers) != 5:
        print "Please enter exactly 5 numbers"
    else:
        input_is_valid = True
</snippet></ROW><ROW><id>4881319</id><snippet>import random
random.seed(seed_value)

import something
import else

if __name__ == "__main__":
    main()
</snippet></ROW><ROW><id>4881390</id><snippet>subprocess</snippet></ROW><ROW><id>4881390</id><snippet>os.system</snippet></ROW><ROW><id>4881390</id><snippet>subprocess.Popen()</snippet></ROW><ROW><id>4881390</id><snippet>cwd</snippet></ROW><ROW><id>4881390</id><snippet>os.system</snippet></ROW><ROW><id>4881390</id><snippet>p = subprocess.Popen("yourcmd" + " yourarg", shell=True, cwd="c:/your/path")
sts = os.waitpid(p.pid, 0)[1]
</snippet></ROW><ROW><id>4881840</id><snippet>class Trip(models.Model):
    members = models.ManyToManyField(User,blank=True,null=True, related_name='user_trips')
</snippet></ROW><ROW><id>4881840</id><snippet>user.user_trips.all()
</snippet></ROW><ROW><id>4881840</id><snippet>#User is defined in django.auth

class Trip(models.Model):
    members = models.ManyToManyField(User,blank=True,null=True, related_name='user_trips', through='TripReservation')

class TripReservation(models.Model):
    user = models.ForeignKey(User)
    trip = models.ForeignKey(Trip)
    registered = models.DateField()
</snippet></ROW><ROW><id>4881840</id><snippet>user.user_trips.all()
</snippet></ROW><ROW><id>4882141</id><snippet>__init__.py</snippet></ROW><ROW><id>4882141</id><snippet>import package.module</snippet></ROW><ROW><id>4882141</id><snippet>from package import module</snippet></ROW><ROW><id>4882141</id><snippet>PYTHONPATH</snippet></ROW><ROW><id>4882141</id><snippet>__main__</snippet></ROW><ROW><id>4882141</id><snippet>#!/usr/bin/env python
import sys
import os.path

sys.path.append(os.path.dirname(__file__))
example = __import__("examples", globals(), locals(), sys.argv[1])
</snippet></ROW><ROW><id>4882141</id><snippet>module.py</snippet></ROW><ROW><id>4882141</id><snippet>from .. import module</snippet></ROW><ROW><id>4882141</id><snippet>__import__</snippet></ROW><ROW><id>4882228</id><snippet>wx.ImageFromBitmap(bitmap)</snippet></ROW><ROW><id>4882228</id><snippet>wx.BitmapFromImage(image)</snippet></ROW><ROW><id>4882297</id><snippet>print [key for (key,value) in nameagedict.items() if value == 19]
</snippet></ROW><ROW><id>4882297</id><snippet>nameagedict.items()</snippet></ROW><ROW><id>4882376</id><snippet>def process_backspaces(input, token='[BACKSPACE]'):
    """Delete character before an occurence of "token" in a string."""
    output = ''
    for item in (input+' ').split(token):
        output += item
        output = output[:-1]
    return output

def process_shifts(input, token='[SHIFT]'):
    """Replace characters after an occurence of "token" with their uppecase 
    equivalent. (Doesn't turn "1" into "!" or "2" into "@", however!)."""
    output = ''
    for item in (' '+input).split(token):
        output += item[0].upper() + item[1:]
    return output

test_string = '[SHIFT]this isrd[BACKSPACE][BACKSPACE] an example file[SHIFT]1'
print process_backspaces(process_shifts(test_string))
</snippet></ROW><ROW><id>4882392</id><snippet>load()</snippet></ROW><ROW><id>4882392</id><snippet>dump()</snippet></ROW><ROW><id>4882392</id><snippet>object_hook</snippet></ROW><ROW><id>4882525</id><snippet>limit</snippet></ROW><ROW><id>4882525</id><snippet>[... 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43 ...]
</snippet></ROW><ROW><id>4882525</id><snippet>[... 31, 0, 33, 34, 35, 0, 37, 0, 39, 0, 41, 0, 43 ...]
</snippet></ROW><ROW><id>4882525</id><snippet>if i - x in Abundant[:i]:</snippet></ROW><ROW><id>4882525</id><snippet>x in list</snippet></ROW><ROW><id>4882600</id><snippet>while s:
    print s[:117]
    s = s[117:]
</snippet></ROW><ROW><id>4882764</id><snippet>position: absolute</snippet></ROW><ROW><id>4882942</id><snippet>SOUTH_TESTS_MIGRATE = False</snippet></ROW><ROW><id>4883305</id><snippet>from . import _eggs
</snippet></ROW><ROW><id>4883305</id><snippet>python spam/boiler.py
</snippet></ROW><ROW><id>4883305</id><snippet>python -m spam.boiler
</snippet></ROW><ROW><id>4883305</id><snippet>import spam.boiler</snippet></ROW><ROW><id>4883305</id><snippet>from __future__ import absolute_imports</snippet></ROW><ROW><id>4883306</id><snippet>{m,n}?</snippet></ROW><ROW><id>4883306</id><snippet>m</snippet></ROW><ROW><id>4883306</id><snippet>n</snippet></ROW><ROW><id>4883306</id><snippet>^x{2}y$</snippet></ROW><ROW><id>4883306</id><snippet>^x{2,4}?y$</snippet></ROW><ROW><id>4883306</id><snippet>xxxy</snippet></ROW><ROW><id>4883306</id><snippet>x{m}</snippet></ROW><ROW><id>4883306</id><snippet>x</snippet></ROW><ROW><id>4883306</id><snippet>m</snippet></ROW><ROW><id>4883306</id><snippet>x{m,n}</snippet></ROW><ROW><id>4883306</id><snippet>x</snippet></ROW><ROW><id>4883306</id><snippet>n</snippet></ROW><ROW><id>4883306</id><snippet>m</snippet></ROW><ROW><id>4883306</id><snippet>x{m,n}?</snippet></ROW><ROW><id>4883306</id><snippet>x</snippet></ROW><ROW><id>4883306</id><snippet>m</snippet></ROW><ROW><id>4883306</id><snippet>n</snippet></ROW><ROW><id>4883533</id><snippet>connection.execute</snippet></ROW><ROW><id>4883533</id><snippet>execute</snippet></ROW><ROW><id>4883807</id><snippet>for i in d</snippet></ROW><ROW><id>4883807</id><snippet>for aritcle in d['Sections']['Section'][0]['Article']:
      print article
</snippet></ROW><ROW><id>4883872</id><snippet>write</snippet></ROW><ROW><id>4883872</id><snippet>old_f = sys.stdout
class F:
    def write(self, x):
        old_f.write(x.replace("\n", " [%s]\n" % str(datetime.now()) )
sys.stdout = F()
</snippet></ROW><ROW><id>4883872</id><snippet>&gt;&gt;&gt; print "foo"
foo [2011-02-03 09:31:05.226899]
</snippet></ROW><ROW><id>4883897</id><snippet>super</snippet></ROW><ROW><id>4883897</id><snippet>type(self)</snippet></ROW><ROW><id>4883897</id><snippet>super()</snippet></ROW><ROW><id>4883897</id><snippet>super()</snippet></ROW><ROW><id>4883897</id><snippet>&gt;&gt;&gt; class A(object):
    def foo(self):
        print "A.foo"


&gt;&gt;&gt; class B(A):
    def foo(self):
        self.__super.foo()
        print "B.foo"


&gt;&gt;&gt; B._B__super = super(B)
&gt;&gt;&gt; class C(A):
    def foo(self):
        self.__super.foo()
        print "C.foo"


&gt;&gt;&gt; C._C__super = super(C)
&gt;&gt;&gt; class D(C,B): pass

&gt;&gt;&gt; D._D__super = super(D)
&gt;&gt;&gt; D().foo()
A.foo
B.foo
C.foo
</snippet></ROW><ROW><id>4883897</id><snippet>super</snippet></ROW><ROW><id>4883897</id><snippet>self.__super</snippet></ROW><ROW><id>4883897</id><snippet>super</snippet></ROW><ROW><id>4883897</id><snippet>__super</snippet></ROW><ROW><id>4883922</id><snippet>dd = []
for l in li:
    d = {'date':l[0]['date'], 'values':[]}
    for ll in l:
        d['values'].append({'foo':ll['foo'], 'bar':ll['bar']})
    dd.append(d)



print dd

[{'date': datetime.date(2011, 2, 1),
  'values': [{'bar': 'a', 'foo': '1'}, {'bar': 'b', 'foo': '2'}]},
 {'date': datetime.date(2011, 1, 30),
  'values': [{'bar': 'f', 'foo': '2'}, {'bar': 'g', 'foo': '5'}]}]
</snippet></ROW><ROW><id>4885813</id><snippet>mid</snippet></ROW><ROW><id>4885813</id><snippet>(low + high)/2</snippet></ROW><ROW><id>4885951</id><snippet>def f():
    a = 1
    def func():
        print(a)
    return func
</snippet></ROW><ROW><id>4885951</id><snippet>f</snippet></ROW><ROW><id>4885951</id><snippet>func</snippet></ROW><ROW><id>4885951</id><snippet>a</snippet></ROW><ROW><id>4885951</id><snippet>myfunc = f()
# ('a',)
print(myfunc.__code__.co_freevars)
# (&lt;cell at 0xb7abce84: int object at 0x82b1de0&gt;,)
print(myfunc.__closure__)
</snippet></ROW><ROW><id>4885951</id><snippet>func.__closure__</snippet></ROW><ROW><id>4885951</id><snippet>freevars</snippet></ROW><ROW><id>4885951</id><snippet>__class__</snippet></ROW><ROW><id>4885951</id><snippet>super</snippet></ROW><ROW><id>4885951</id><snippet>__class__</snippet></ROW><ROW><id>4885951</id><snippet>__class__</snippet></ROW><ROW><id>4885951</id><snippet>class foo:
    def bar(self):
        print(__class__)
</snippet></ROW><ROW><id>4885951</id><snippet>func.__closure__</snippet></ROW><ROW><id>4885951</id><snippet>types.FunctionType</snippet></ROW><ROW><id>4885951</id><snippet>__init__</snippet></ROW><ROW><id>4885951</id><snippet>__class__</snippet></ROW><ROW><id>4885951</id><snippet>B</snippet></ROW><ROW><id>4885951</id><snippet>__init__</snippet></ROW><ROW><id>4885951</id><snippet>__class__</snippet></ROW><ROW><id>4885951</id><snippet>C.dummy</snippet></ROW><ROW><id>4885951</id><snippet>import types

class B(object):
    def __init__(self):
        print("base")

class C(B):
    def dummy(self): __class__

def __init__(self):
    print('calling __init__')
    super().__init__()

def MakeCodeObjectWithClass(c):
    """
    Return a copy of the code object c, with __class__ added to the end
    of co_freevars.
    """
    return types.CodeType(c.co_argcount, c.co_kwonlyargcount, c.co_nlocals,
            c.co_stacksize, c.co_flags, c.co_code, c.co_consts, c.co_names,
            c.co_varnames, c.co_filename, c.co_name, c.co_firstlineno,
            c.co_lnotab, c.co_freevars + ('__class__',), c.co_cellvars)

new_code = MakeCodeObjectWithClass(__init__.__code__)
old_closure = __init__.__closure__ or ()
C.__init__ = types.FunctionType(new_code, globals(), __init__.__name__,
    __init__.__defaults__, old_closure + (C.dummy.__closure__[0],))

if __name__ == '__main__':
    c = C()
</snippet></ROW><ROW><id>4886337</id><snippet>if button.CanSetTransparent():
    button.SetTransparent(100)
</snippet></ROW><ROW><id>4886779</id><snippet>"%(ns)Event" % {'ns':NS }</snippet></ROW><ROW><id>4886779</id><snippet>NS+"Event"</snippet></ROW><ROW><id>4886779</id><snippet>xml_declaration=True</snippet></ROW><ROW><id>4886779</id><snippet>write()</snippet></ROW><ROW><id>4886779</id><snippet>nsmap</snippet></ROW><ROW><id>4886779</id><snippet>nsmap={None: NS}</snippet></ROW><ROW><id>4887810</id><snippet>sample_set = SampleModel.objects.filter(sample_field='sample_value').filter(another_sample_field='another_sample_value') 
</snippet></ROW><ROW><id>4887810</id><snippet>SELECT something FROM sometable 
WHERE sample_field='sample_value' 
AND another_sample_field='another_sample_value'
</snippet></ROW><ROW><id>4887810</id><snippet>sample_set.append(sample_object)</snippet></ROW><ROW><id>4887860</id><snippet>pi</snippet></ROW><ROW><id>4887860</id><snippet>ident</snippet></ROW><ROW><id>4887860</id><snippet>+ StringEnd()</snippet></ROW><ROW><id>4887860</id><snippet>expr</snippet></ROW><ROW><id>4887860</id><snippet>pyparsing.ParseException</snippet></ROW><ROW><id>4888055</id><snippet>max_value_observed  == 3 # at the end of this step
</snippet></ROW><ROW><id>4888055</id><snippet>new_max_value = max_value_observed + 1
</snippet></ROW><ROW><id>4888203</id><snippet>for i in range(1, len(e.merchandise)):</snippet></ROW><ROW><id>4888203</id><snippet>range()</snippet></ROW><ROW><id>4888203</id><snippet>len()</snippet></ROW><ROW><id>4888203</id><snippet>range()</snippet></ROW><ROW><id>4888222</id><snippet>for .. yield</snippet></ROW><ROW><id>4888233</id><snippet>place</snippet></ROW><ROW><id>4888381</id><snippet>+=</snippet></ROW><ROW><id>4888381</id><snippet>&gt;&gt;&gt; m = sparse.lil_matrix((100,100))
&gt;&gt;&gt; m[50:56,50:56]+=scipy.ones((6,6))
&gt;&gt;&gt; m[50,50]  #1.0
</snippet></ROW><ROW><id>4888752</id><snippet>def my_view( request ):
    followup= user.has_perm('followup.add_followup')
    # etc.
    return render_to_response( template, {'followup':followup,... )
</snippet></ROW><ROW><id>4888752</id><snippet>{% if followup %}
&lt;li&gt;&lt;a href="{% url followup-new p.id %}"&gt;Log&lt;/a&gt;&lt;/li&gt;
{% endif %}
</snippet></ROW><ROW><id>4889261</id><snippet>Python 2.5.2 (r252:60911, Jan 24 2010, 14:53:14)
[GCC 4.3.2] on linux2
Type "help", "copyright", "credits" or "license" for more information.
&gt;&gt;&gt; def f(x): pass
...
&gt;&gt;&gt; f(x=1, x=2)
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
TypeError: f() got multiple values for keyword argument 'x'
&gt;&gt;&gt; f(x=1, **{'x': 2})
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
TypeError: f() got multiple values for keyword argument 'x'

Python 2.6.6 (r266:84297, Aug 24 2010, 18:46:32) [MSC v.1500 32 bit (Intel)] on
win32
Type "help", "copyright", "credits" or "license" for more information.
&gt;&gt;&gt; def f(x): pass
...
&gt;&gt;&gt; f(x=1, x=2)
  File "&lt;stdin&gt;", line 1
SyntaxError: keyword argument repeated
&gt;&gt;&gt; f(x=2, **{'x': 1})
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
TypeError: f() got multiple values for keyword argument 'x'
</snippet></ROW><ROW><id>4889392</id><snippet>file_path = os.path.normpath(file_path)</snippet></ROW><ROW><id>4889897</id><snippet>mechanize</snippet></ROW><ROW><id>4889897</id><snippet>import mechanize

links = [
"http://en.wikipedia.org/wiki/Markov_chain",
"http://en.wikipedia.org/wiki/Dari",
"http://en.wikipedia.org/wiki/Frobnab"
]

br = mechanize.Browser()
br.addheaders = [('User-agent', 'Mozilla/5.0')] # A white lie

for link in links:
    print link
    try:
        br.open(link)
        page_name = br.title()[:-35].replace(" ", "_")
        if page_name != link.split("/")[-1]:
            print "redirected to:", page_name
        else:
            print "page OK"
    except mechanize.URLError:
        print "error: dead link"
</snippet></ROW><ROW><id>4890193</id><snippet>0</snippet></ROW><ROW><id>4890193</id><snippet>False</snippet></ROW><ROW><id>4890463</id><snippet>for row in doc.cssselect('tr'):
    cells = [ cell.text_content() for cell in row.cssselect('td') ]
    if any(cells):
        sys.stdout.write('\t'.join(cells) + '\n')
</snippet></ROW><ROW><id>4890832</id><snippet>best</snippet></ROW><ROW><id>4890832</id><snippet>technical</snippet></ROW><ROW><id>4890850</id><snippet>1&lt;&lt;0</snippet></ROW><ROW><id>4890878</id><snippet>import numpy, Image
i = Image.open(fp).convert('RGB')
a = numpy.asarray(i, int)

R, G, B = a.T

m = numpy.min(a,2).T
M = numpy.max(a,2).T

C = M-m #chroma
Cmsk = C!=0

# Hue
H = numpy.zeros(R.shape, int)
mask = (M==R)&amp;Cmsk
H[mask] = numpy.mod(60*(G-B)/C, 360)[mask]
mask = (M==G)&amp;Cmsk
H[mask] = (60*(B-R)/C + 120)[mask]
mask = (M==B)&amp;Cmsk
H[mask] = (60*(R-G)/C + 240)[mask]
H *= 255
H /= 360 # if you prefer, leave as 0-360, but don't convert to uint8

# Value
V = M

# Saturation
S = numpy.zeros(R.shape, int)
S[Cmsk] = ((255*C)/V)[Cmsk]

# H, S, and V are now defined as integers 0-255
</snippet></ROW><ROW><id>4891149</id><snippet>ZipFile.extract()</snippet></ROW><ROW><id>4891149</id><snippet>ZipFile.read(name)</snippet></ROW><ROW><id>4891522</id><snippet>...</snippet></ROW><ROW><id>4891522</id><snippet>&gt;&gt;&gt; class foo:
    pass

&gt;&gt;&gt; def make_it(cls):
    return cls()

&gt;&gt;&gt; make_it(foo)
&lt;__main__.foo instance at 0x011D9B48&gt;
</snippet></ROW><ROW><id>4891710</id><snippet>_mine</snippet></ROW><ROW><id>4891710</id><snippet>def test_something(self):
    self.assertEqual(self._mine.attribute, 'myAttribute')
</snippet></ROW><ROW><id>4891804</id><snippet>World</snippet></ROW><ROW><id>4891804</id><snippet>Agents</snippet></ROW><ROW><id>4891804</id><snippet>Locations</snippet></ROW><ROW><id>4891804</id><snippet>Location</snippet></ROW><ROW><id>4891804</id><snippet>Agent</snippet></ROW><ROW><id>4891804</id><snippet>Agent</snippet></ROW><ROW><id>4891804</id><snippet>Location</snippet></ROW><ROW><id>4891804</id><snippet>World</snippet></ROW><ROW><id>4891804</id><snippet>class Agent:
    def __init__(self, world):
        self.location = None
        self.world = world

    def move(self, new_location):
        if self.location is not None:
            self.location.agent = None
        new_location.agent = self
        self.location = new_location

    def update(self):
        for new_location in self.world.locations:
            if self.location_is_good(new_location):
                self.move(new_location)

    def location_is_good(self, location):
        if location.agent is not None:
            return False

class Location:
    def __init__(self, x, y):
        self.x = x
        self.y = y
        self.agent = None
</snippet></ROW><ROW><id>4891804</id><snippet>Location</snippet></ROW><ROW><id>4891804</id><snippet>Agent</snippet></ROW><ROW><id>4891804</id><snippet>move()</snippet></ROW><ROW><id>4891804</id><snippet>World</snippet></ROW><ROW><id>4891804</id><snippet>move()</snippet></ROW><ROW><id>4891804</id><snippet>Agent</snippet></ROW><ROW><id>4891804</id><snippet>Location</snippet></ROW><ROW><id>4892234</id><snippet>isinstance(x, str)
</snippet></ROW><ROW><id>4892234</id><snippet>isinstance(x, bytes)
</snippet></ROW><ROW><id>4892255</id><snippet>logfile = open(logFullPath, "a")
for event in xrange(self.lvActions.GetItemCount()):
    date = self.lvActions.GetItem(event, 0).GetText()        # item in column 0
    filename = self.lvActions.GetItem(event, 1).GetText()    # col 1, etc
    action = self.lvActions.GetItem(event, 2).GetText()
    logfile.write( "{0}, {1}, {2}\n".format(date, filename, action)

logfile.close()
</snippet></ROW><ROW><id>4892363</id><snippet>$ hg help incoming
hg incoming [-p] [-n] [-M] [-f] [-r REV]... [--bundle FILENAME] [SOURCE]

aliases: in

show new changesets found in source
</snippet></ROW><ROW><id>4892797</id><snippet>from index import index
</snippet></ROW><ROW><id>4892814</id><snippet>windows=[ 'test.py' ]
</snippet></ROW><ROW><id>4893172</id><snippet>Foo</snippet></ROW><ROW><id>4893172</id><snippet>clean_*</snippet></ROW><ROW><id>4893172</id><snippet>save_model</snippet></ROW><ROW><id>4893172</id><snippet>FooAdmin</snippet></ROW><ROW><id>4893172</id><snippet>Foo</snippet></ROW><ROW><id>4893172</id><snippet>from django import forms
from django.db import models
from django.contrib import admin


class Foo(models.Model):
    name = models.CharField(max_length=30)


class FooAdminForm(forms.ModelForm):
    # custom field not backed by database
    calculated = forms.IntegerField()

    class Meta:
        model = Foo 


class FooAdmin(admin.ModelAdmin):
    # use the custom form instead of a generic modelform
    form = FooAdminForm

    # your own processing
    def save_model(self, request, obj, form, change):
        # for example:
        obj.name = 'Foo #%d' % form.cleaned_data['calculated'] 
        obj.save()


admin.site.register(Foo, FooAdmin)
</snippet></ROW><ROW><id>4893172</id><snippet>__init__</snippet></ROW><ROW><id>4893172</id><snippet>    def __init__(self, *args, **kwargs):
        # only change attributes if an instance is passed            
        instance = kwargs.get('instance')
        if instance:
            self.base_fields['calculated'].initial = (instance.bar == 42)
        forms.ModelForm.__init__(self, *args, **kwargs)
</snippet></ROW><ROW><id>4893314</id><snippet>  words = 'A B. C D E F G A B C D E F G A B C D E F G A B C D E F G'
  corpus = words.split()
   for item in corpus:
    if item.endswith('.'):
     #logic
</snippet></ROW><ROW><id>4893453</id><snippet>Instrument_Control = __import__("Instrument-Control.audio$pecial")
audiospecial = getattr(Instrument_Control, "audio$pecial")
print audiospecial
# &lt;module 'Instrument-Control.audio$pecial' from 'Instrument-Control/audio$pecial/__init__.py'&gt;
audiospecial.example_func()  # executes example_func() from audio$pecial
</snippet></ROW><ROW><id>4893463</id><snippet>if selection == 2:
    add_member(members)
</snippet></ROW><ROW><id>4893463</id><snippet>members</snippet></ROW><ROW><id>4893463</id><snippet>if selection == 2:
    members = add_member(members)
</snippet></ROW><ROW><id>4893482</id><snippet>d = {frozenset((1,2)): "foo"}
print d.get(frozenset((2,1)))
</snippet></ROW><ROW><id>4893549</id><snippet>re.sub(reg, rep, text)
</snippet></ROW><ROW><id>4893648</id><snippet>movedmsg = "object moved from = %s to = %s"
print(movedmsg % (object.location, new_location))
</snippet></ROW><ROW><id>4893648</id><snippet>movedmsg = "object moved from = {0} to = {1}"
print(movedmsg.format(object.location, new_location))
</snippet></ROW><ROW><id>4893704</id><snippet>import csv
w = csv.writer(open("output.csv", "w"))
for key, val in dict.items():
    w.writerow([key, val])
</snippet></ROW><ROW><id>4893704</id><snippet>import csv
dict = {}
for key, val in csv.reader(open("input.csv")):
    dict[key] = val
</snippet></ROW><ROW><id>4893704</id><snippet>json</snippet></ROW><ROW><id>4893704</id><snippet>simplejson</snippet></ROW><ROW><id>4893704</id><snippet>&gt;&gt;&gt; import json
&gt;&gt;&gt; dict = {"hello": "world"}
&gt;&gt;&gt; json.dumps(dict)
'{"hello": "world"}'
</snippet></ROW><ROW><id>4893958</id><snippet>MEDIA_URL</snippet></ROW><ROW><id>4893958</id><snippet>http://localhost:8000/admin/products/product/1/</snippet></ROW><ROW><id>4894004</id><snippet>def get_items(cheapness):
    """ Return a list of (item, (price, count)) tuples that are the given
    cheapness. Note that the second element of the tuple is another tuple. """

    if cheapness == 'CHEAP':
        return [(item, (price,count)) for (item, (price,count)) in inventory.items() if price &lt; 20]
    elif cheapness == 'MODERATE':
        return [(item, (price,count)) for (item, (price,count)) in inventory.items() if price &gt; 20 and price &lt; 100]
    elif cheapness == 'EXPENSIVE':
        return [(item, (price,count)) for (item, (price,count)) in inventory.items() if price &gt; 100]
</snippet></ROW><ROW><id>4894156</id><snippet>s[s.find("(")+1:s.find(")")]
</snippet></ROW><ROW><id>4894376</id><snippet>num_digits = 0
with open("data.txt") as f:
    for line in f:
        if line.strip().isdigit():
            num_digits += 1
</snippet></ROW><ROW><id>4894376</id><snippet>with open("data.txt") as f:
   num_digits = sum( 1 for line in f if line.strip().isdigit() )
</snippet></ROW><ROW><id>4894376</id><snippet>sum</snippet></ROW><ROW><id>4894440</id><snippet>class Users(db.Model):
  gae_user_object = db.UserProperty()
  premium_member = db.BooleanProperty(default=False)
</snippet></ROW><ROW><id>4894549</id><snippet>if request.content_type:
</snippet></ROW><ROW><id>4894549</id><snippet>True</snippet></ROW><ROW><id>4894586</id><snippet>START TRANSACTION</snippet></ROW><ROW><id>4894586</id><snippet>COMMIT</snippet></ROW><ROW><id>4894648</id><snippet>dont_filter=True</snippet></ROW><ROW><id>4894648</id><snippet>def logged_in(self, response):
    if response.url == 'http://my.yahoo.com':
        self.log("Successfully logged in. Now requesting message page.",
                level=log.INFO)
        return Request(MSG_URL % self.msg_id, callback=self.parse_msg,
                errback=self.error, dont_filter=True)
    else:
        self.log("Login failed.", level=log.CRITICAL)
</snippet></ROW><ROW><id>4894679</id><snippet>foo = FooBar(baz)</snippet></ROW><ROW><id>4894679</id><snippet>foo</snippet></ROW><ROW><id>4894679</id><snippet>FooBar</snippet></ROW><ROW><id>4894679</id><snippet>Converted</snippet></ROW><ROW><id>4894679</id><snippet>converted</snippet></ROW><ROW><id>4894679</id><snippet>import numpy as np
def grid(array,samples,details):
    ...
</snippet></ROW><ROW><id>4894679</id><snippet>array</snippet></ROW><ROW><id>4894679</id><snippet>array</snippet></ROW><ROW><id>4894679</id><snippet>numpy.ndarray</snippet></ROW><ROW><id>4894679</id><snippet>array.reshape</snippet></ROW><ROW><id>4894679</id><snippet>array</snippet></ROW><ROW><id>4894679</id><snippet>import numpy as np
def grid(array,samples,details):
    array = np.asarray(array, dtype=np.float)
    ...
</snippet></ROW><ROW><id>4894679</id><snippet>    ...
    #Sides of the square (will be using a squarable number
    Width = (len(array)) ** 0.5
    #Convert to grid
    Converted = array.reshape(Width,Width)
    ...
</snippet></ROW><ROW><id>4894679</id><snippet>    ...
    #Sides of the square (will be using a squareable number)
    Width = int(np.sqrt(array.size))
    #Convert to grid
    Converted = array.reshape(Width,Width)
    ...
</snippet></ROW><ROW><id>4894679</id><snippet>x**0.5</snippet></ROW><ROW><id>4894679</id><snippet>sqrt(x)</snippet></ROW><ROW><id>4894679</id><snippet>*</snippet></ROW><ROW><id>4894679</id><snippet>    ...
    Change = [details[1]] + [details[2]]
    ...
</snippet></ROW><ROW><id>4894679</id><snippet>Change = details[1:3]
</snippet></ROW><ROW><id>4894679</id><snippet>    ...
    #Set the value within a 3x3 window to their "new_value"  
    for elem in Converted[istart:istop, jstart:jstop]:

       Converted[elem] = elem + (elem * (value * ((Change[1]/100))

    #Set the main value to the new value  
    Converted[i,j] = value + (value * ((Change[0])/100))
    ...
</snippet></ROW><ROW><id>4894679</id><snippet>elem</snippet></ROW><ROW><id>4894679</id><snippet>0.01</snippet></ROW><ROW><id>4894679</id><snippet>pi</snippet></ROW><ROW><id>4894679</id><snippet>5.6 + 98.44j</snippet></ROW><ROW><id>4894679</id><snippet>    ...
    #--Set the value within a 3x3 window to their "new_value"  
    # Save the "center" value for later use
    center = Converted[i,j]

    # Adjust the pixels around the center by a percentage
    Converted[istart:istop] *= 1 + Change[1] / 100.0

    # Adjust the center pixel by a different percentage
    Converted[i,j] = center * (1 + Change[0] / 100.0)
    ...
</snippet></ROW><ROW><id>4894679</id><snippet>array</snippet></ROW><ROW><id>4894679</id><snippet>a = [16,2,20,4,14,6,70,8,9,100,32,15,7,14,50,20,17,10,9,20,7,17,50,2,19,20,21,22,23,24,25]
</snippet></ROW><ROW><id>4894679</id><snippet>15**2</snippet></ROW><ROW><id>4894679</id><snippet>a = [16,2,20,4,14,6,70,8,9,100,32,15,7,14,50,20,17,10,9,20,7,17,50,2,19]
</snippet></ROW><ROW><id>4894679</id><snippet>import numpy as np

def grid(array,samples,details):
    array = np.asarray(array, dtype=np.float)

    #Sides of the square (will be using a squarable number
    Width = int(np.sqrt(array.size))
    #Convert to grid
    Converted = array.reshape(Width,Width)
    #Conversion details
    Change = details[1:3]
    nrows, ncols = Converted.shape

    for value in samples:

        #First instance where indexing returns it
        i,j  = np.argwhere(Converted == value)[0]

        #Prevent indexing outside the boudaries of the
        #array which would cause a "wraparound" assignment
        istart, istop = max(i-1, 0), min(i+2, nrows)
        jstart, jstop = max(j-1, 0), min(j+2, ncols)


        #Set the value within a 3x3 window to their "new_value"  
        center_value = Converted[i,j]
        Converted[istart:istop, jstart:jstop] *= 1 + Change[1] / 100.0
        Converted[i,j] = center_value * (1 + Change[0] / 100.0)

    #Convert back to 1D list
    Converted.tolist()

    return Converted

a =  [16,2,20,4,14,6,70,8,9,100,32,15,7,14,50,20,17,10,9,20,7,17,50,2,19]
samples = [2, 7]
grid_details = [10,50,100]

result = grid(a,samples,grid_details)

print(result)
</snippet></ROW><ROW><id>4894679</id><snippet>[[  16.    2.   20.    4.   14.]
 [   6.   70.    8.    9.  100.]
 [  32.   15.    7.   14.   50.]
 [  20.   17.   10.    9.   20.]
 [   7.   17.   50.    2.   19.]]
</snippet></ROW><ROW><id>4894679</id><snippet>[[  32.     3.    40.     4.    14. ]
 [  12.   280.    32.    18.   100. ]
 [  32.    30.    10.5   28.    50. ]
 [  20.    34.    20.    18.    20. ]
 [   7.    17.    50.     2.    19. ]]
</snippet></ROW><ROW><id>4894679</id><snippet>for value in samples:
    #First instance where indexing returns it
    i,j  = np.argwhere(Converted == value)[0]
</snippet></ROW><ROW><id>4894679</id><snippet>locations = [np.argwhere(Converted == value)[0] for value in samples]
for i,j in locations:
    ...
</snippet></ROW><ROW><id>4895093</id><snippet>for line in file:
</snippet></ROW><ROW><id>4895413</id><snippet>jSONToObj</snippet></ROW><ROW><id>4895413</id><snippet>object_hook</snippet></ROW><ROW><id>4895413</id><snippet>loads</snippet></ROW><ROW><id>4895564</id><snippet>sudo sh -c 'echo $HOME'</snippet></ROW><ROW><id>4895606</id><snippet>$xml = $_POST['xml'];
// do something with posted XML
.....
// post it to the "real" cURL server
$ch = curl_init();
curl_setopt($ch, CURLOPT_URL,  $url);
curl_setopt($ch, CURLOPT_POST, 1);
curl_setopt($ch, CURLOPT_POSTFIELDS, array('xml' =&gt; $xml));
$result = curl_exec($ch);
curl_close($ch);
</snippet></ROW><ROW><id>4895654</id><snippet>ProcessProtocol</snippet></ROW><ROW><id>4895654</id><snippet>self.mailbox.append(relevantData)</snippet></ROW><ROW><id>4895654</id><snippet>render_GET</snippet></ROW><ROW><id>4895654</id><snippet>relevantData = self.mailbox.pop()</snippet></ROW><ROW><id>4895654</id><snippet>a</snippet></ROW><ROW><id>4895654</id><snippet>b</snippet></ROW><ROW><id>4895654</id><snippet>a</snippet></ROW><ROW><id>4895654</id><snippet>b</snippet></ROW><ROW><id>4895702</id><snippet>subprocess</snippet></ROW><ROW><id>4895702</id><snippet>import subprocess

subprocess.call(['pdftk', '1.pdf', '2.pdf', 'cat', 'output', 'result.pdf'])
</snippet></ROW><ROW><id>4895702</id><snippet>os.system</snippet></ROW><ROW><id>4896061</id><snippet>from QuantLib import *
</snippet></ROW><ROW><id>4896061</id><snippet>exercise = EuropeanExercise(Date(3,August,2011))
payoff = PlainVanillaPayoff(Option.Call, 100.0)
option = EuropeanOption(payoff,exercise)
</snippet></ROW><ROW><id>4896061</id><snippet>S = QuoteHandle(SimpleQuote(100.0))
r = YieldTermStructureHandle(FlatForward(0, TARGET(), 0.03, Actual360()))
q = YieldTermStructureHandle(FlatForward(0, TARGET(), 0.01, Actual360()))
sigma = BlackVolTermStructureHandle(BlackConstantVol(0, TARGET(), 0.20, Actual360()))
process = BlackScholesMertonProcess(S,q,r,sigma)
</snippet></ROW><ROW><id>4896061</id><snippet>option.impliedVolatility(11.10, process)
</snippet></ROW><ROW><id>4896061</id><snippet>engine = AnalyticEuropeanEngine(process)
option.setPricingEngine(engine)
option.NPV()
</snippet></ROW><ROW><id>4896224</id><snippet>&gt;&gt;&gt; email.header.decode_header('=?KOI8-R?B?W1JFUS0wMDI1NDEtNDc5NzddIO/h7yAi89TSz8rGwdLGz9IiIDs=?=\r\n\t=?KOI8-R?B?Ry43MjkgKDEwKQ==?=')
[('[REQ-002541-47977] \xef\xe1\xef "\xf3\xd4\xd2\xcf\xca\xc6\xc1\xd2\xc6\xcf\xd2" ;G.729 (10)', 'koi8-r')]
&gt;&gt;&gt; print '[REQ-002541-47977] \xef\xe1\xef "\xf3\xd4\xd2\xcf\xca\xc6\xc1\xd2\xc6\xcf\xd2" ;G.729 (10)'.decode('koi8-r')
[REQ-002541-47977] ОАО "Стройфарфор" ;G.729 (10)
</snippet></ROW><ROW><id>4896448</id><snippet>Group.objects.exclude(~Q(person__position="worker"))
</snippet></ROW><ROW><id>4896448</id><snippet>Group.objects.filter(
    Q(person__position="worker") 
    &amp; ~Q(person__position__gt="worker")
    &amp; ~Q(person__position__lt="worker")
)
</snippet></ROW><ROW><id>4896991</id><snippet>from lxml import html

tree = html.parse('http://www.datamystic.com/timezone/time_zones.html')
table = tree.findall('//table')[1]
data = [
           [td.text_content().strip() for td in row.findall('td')] 
           for row in table.findall('tr')
       ]
</snippet></ROW><ROW><id>4897088</id><snippet>io.open</snippet></ROW><ROW><id>4897088</id><snippet>open</snippet></ROW><ROW><id>4897088</id><snippet>open</snippet></ROW><ROW><id>4897088</id><snippet>open</snippet></ROW><ROW><id>4897088</id><snippet>io.open</snippet></ROW><ROW><id>4897088</id><snippet>open</snippet></ROW><ROW><id>4897088</id><snippet>unicode</snippet></ROW><ROW><id>4897088</id><snippet>codecs.open</snippet></ROW><ROW><id>4897088</id><snippet>io.open</snippet></ROW><ROW><id>4897088</id><snippet>encoding</snippet></ROW><ROW><id>4897088</id><snippet>open</snippet></ROW><ROW><id>4897088</id><snippet>io.open</snippet></ROW><ROW><id>4897088</id><snippet>io</snippet></ROW><ROW><id>4897088</id><snippet>io</snippet></ROW><ROW><id>4897088</id><snippet>open</snippet></ROW><ROW><id>4897088</id><snippet>open</snippet></ROW><ROW><id>4897200</id><snippet>paramiko</snippet></ROW><ROW><id>4898898</id><snippet>%H:%M:%S.%f</snippet></ROW><ROW><id>4898898</id><snippet>import datetime

times = """
09:50:08.650000
09:50:08.665000
09:50:08.820000
09:50:08.877000
09:50:09.897000
09:50:09.907000
09:50:09.953000
09:50:10.662000
09:50:10.662000
""".split()

# parse all times
times = [datetime.datetime.strptime(x, "%H:%M:%S.%f") for x in times]
for i in range(len(times) - 1):
    # compute timedelta between current and next time in the list
    print times[i + 1] - times[i]
</snippet></ROW><ROW><id>4898898</id><snippet>0:00:00.015000
0:00:00.155000
0:00:00.057000
0:00:01.020000
0:00:00.010000
0:00:00.046000
0:00:00.709000
0:00:00
</snippet></ROW><ROW><id>4898898</id><snippet>delta = times[i + 1] - times[i]
print ((delta.days * 24 * 60 * 60 + delta.seconds) * 1000 + delta.microseconds / 1000)
</snippet></ROW><ROW><id>4899018</id><snippet>virtual()</snippet></ROW><ROW><id>4899018</id><snippet>virtual('path/to/python.py?'.$query);
</snippet></ROW><ROW><id>4899018</id><snippet>exec()</snippet></ROW><ROW><id>4899110</id><snippet>methodToCall</snippet></ROW><ROW><id>4899110</id><snippet>fleet.addFighter</snippet></ROW><ROW><id>4899110</id><snippet>repr(methodToCall)</snippet></ROW><ROW><id>4899110</id><snippet>repr(fleet.addFighter)</snippet></ROW><ROW><id>4899110</id><snippet>methodNameString = "add" + typeOfShip
methodToCall = getattr(listOfPlayerFleets[currentPlayer], methodNameString)

methodToCall(num)
</snippet></ROW><ROW><id>4899338</id><snippet>def Veli(a, b = my_list):</snippet></ROW><ROW><id>4899338</id><snippet>my_list</snippet></ROW><ROW><id>4899338</id><snippet>func_defaults</snippet></ROW><ROW><id>4899338</id><snippet>b</snippet></ROW><ROW><id>4899338</id><snippet>b</snippet></ROW><ROW><id>4899338</id><snippet>Veli.func_defaults[0]</snippet></ROW><ROW><id>4899338</id><snippet>func_defaults</snippet></ROW><ROW><id>4899338</id><snippet>b</snippet></ROW><ROW><id>4899338</id><snippet>None</snippet></ROW><ROW><id>4899338</id><snippet>my_list</snippet></ROW><ROW><id>4899338</id><snippet>b is None</snippet></ROW><ROW><id>4899338</id><snippet>self</snippet></ROW><ROW><id>4899338</id><snippet>(... = None): if ... is None: use = default</snippet></ROW><ROW><id>4899338</id><snippet>id</snippet></ROW><ROW><id>4899338</id><snippet>id</snippet></ROW><ROW><id>4899338</id><snippet>id</snippet></ROW><ROW><id>4899633</id><snippet>rules.py</snippet></ROW><ROW><id>4899633</id><snippet>mappings = [
    # (regex, action_name)
    (r'Hi ([a-z]+)!', greet),
    (r'Bye', bye),
]

def greet(msg):
    return 'Hello'

def bye(msg):
    return 'Bye'
</snippet></ROW><ROW><id>4899633</id><snippet>main.py</snippet></ROW><ROW><id>4899633</id><snippet>import rules

# compile regex
compiled = dict([(re.compile(regex), action_name) for (regex, action_name) in rules.mappings])

def incoming(msg):
    for regex, action_name in compiled:
        if regex.search(msg):
            # if search is successfull, execute action
            action_function = getattr(rules, action_name)
            action(msg)
</snippet></ROW><ROW><id>4899773</id><snippet>send</snippet></ROW><ROW><id>4899811</id><snippet>bad_code = "system('rm -rf /users')"
eval(bad_code)
</snippet></ROW><ROW><id>4899937</id><snippet>tags</snippet></ROW><ROW><id>4899937</id><snippet>selects = filter(lambda x: x != "None", 
              [image_style, image_background, image_activity,
               image_merchandise, image_type]
          )

if selects:
    for choice in selects:
        items.filter("image_tags =", choice)
else:
    self.response.out.write(""" select tags to sort images""")
</snippet></ROW><ROW><id>4900020</id><snippet>import csv
from itertools import izip

with open('source.csv') as f:
    reader = csv.reader(f)
    # filter data
    data = (row for row in reader if row[1].strip() in ('5', '8'))
    # make a new variable
    data = (row + [int(row[2]) * 3] for row in data)
    # transpose data
    data = izip(*data)
    # write data to a new csv file
    with open('destination.csv', 'w') as fw:
        csv.writer(fw).writerows(data)
</snippet></ROW><ROW><id>4900031</id><snippet>from reportlab.pdfbase import pdfmetrics
from reportlab.pdfbase.ttfonts import TTFont

pdfmetrics.registerFont(TTFont('Vera', 'Vera.ttf'))
pdfmetrics.registerFont(TTFont('VeraBd', 'VeraBd.ttf'))
pdfmetrics.registerFont(TTFont('VeraIt', 'VeraIt.ttf'))
pdfmetrics.registerFont(TTFont('VeraBI', 'VeraBI.ttf'))

canvas.setFont('Vera', 32)
canvas.drawString(10, 150, "Some text encoded in UTF-8")
canvas.drawString(10, 100, "In the Vera TT Font!")
</snippet></ROW><ROW><id>4900031</id><snippet>getAvailableFonts</snippet></ROW><ROW><id>4900139</id><snippet>from numpy import log2
import matplotlib.pyplot as plt

from matplotlib import scale as mscale
from matplotlib import transforms as mtransforms

class CustomScale(mscale.ScaleBase):
    name = 'custom'

    def __init__(self, axis, **kwargs):
        mscale.ScaleBase.__init__(self)
        self.thresh = None #thresh

    def get_transform(self):
        return self.CustomTransform(self.thresh)

    def set_default_locators_and_formatters(self, axis):
        pass

    class CustomTransform(mtransforms.Transform):
        input_dims = 1
        output_dims = 1
        is_separable = True

        def __init__(self, thresh):
            mtransforms.Transform.__init__(self)
            self.thresh = thresh

        def transform(self, a):
            return 10**(a/10)

        def inverted(self):
            return CustomScale.InvertedCustomTransform(self.thresh)

    class InvertedCustomTransform(mtransforms.Transform):
        input_dims = 1
        output_dims = 1
        is_separable = True

        def __init__(self, thresh):
            mtransforms.Transform.__init__(self)
            self.thresh = thresh

        def transform(self, a):
            return log2(a)*(10/log2(10))

        def inverted(self):
            return CustomScale.CustomTransform(self.thresh)


mscale.register_scale(CustomScale)

xdata = [log2(x)*(10/log2(10)) for x in range(1,11)]
ydata = range(10)
plt.plot(xdata, ydata)

plt.gca().set_xscale('custom')
plt.show()
</snippet></ROW><ROW><id>4900273</id><snippet>mcif.models.generic_import</snippet></ROW><ROW><id>4900273</id><snippet>mcif.models.account_import</snippet></ROW><ROW><id>4900273</id><snippet>mcif.models</snippet></ROW><ROW><id>4900281</id><snippet>&lt;pre&gt;</snippet></ROW><ROW><id>4900281</id><snippet>\n</snippet></ROW><ROW><id>4900281</id><snippet>\r\n</snippet></ROW><ROW><id>4900281</id><snippet>self.response.out.write(myString.replace("\n", "&lt;br /&gt;"))
</snippet></ROW><ROW><id>4900351</id><snippet>from collections import defaultdict
some_dict = { 'abc':'a', 'cdf':'b', 'gh':'a', 'fh':'g', 'hfz':'g' }
new_dict = defaultdict(list)
for k, v in some_dict.iteritems():
    new_dict[v].append(k)
</snippet></ROW><ROW><id>4900351</id><snippet>defaultdict</snippet></ROW><ROW><id>4900351</id><snippet>new_dict = {}
for k, v in some_dict.iteritems():
    new_dict.setdefault(v, []).append(k)
</snippet></ROW><ROW><id>4901002</id><snippet>file.seek</snippet></ROW><ROW><id>4901002</id><snippet>line</snippet></ROW><ROW><id>4901002</id><snippet>with open(filename,'r') as f:
    line = f.readline()
    print("length = ", len(line))
    if 'b' in line:
        print("letter 'b' found.")

    for line in f: 
    ...
</snippet></ROW><ROW><id>4901053</id><snippet>180/pi</snippet></ROW><ROW><id>4901053</id><snippet>math.radians()</snippet></ROW><ROW><id>4901053</id><snippet>def hitsin(a):
    return math.sin(math.radians(a))
hitsin(90)
# 1.0
</snippet></ROW><ROW><id>4901053</id><snippet>cos()</snippet></ROW><ROW><id>4901053</id><snippet>sin()</snippet></ROW><ROW><id>4901224</id><snippet>self</snippet></ROW><ROW><id>4901224</id><snippet>self.__private()
</snippet></ROW><ROW><id>4901224</id><snippet>self</snippet></ROW><ROW><id>4901224</id><snippet>self.__private()</snippet></ROW><ROW><id>4901224</id><snippet>self</snippet></ROW><ROW><id>4901224</id><snippet>def __private(randomText):
    print "Hey man! This is private!"

def public(otherRandomText):
    otherRandomText.__private()
    print "I don't care if you see this!"
</snippet></ROW><ROW><id>4901224</id><snippet>self</snippet></ROW><ROW><id>4901227</id><snippet>zip()</snippet></ROW><ROW><id>4901227</id><snippet>for src, url in zip(filtered_items_list, filtered_items_url_list):
    print src, url
</snippet></ROW><ROW><id>4901295</id><snippet>import clr
clr.AddReference('IronPython')
clr.AddReference('System')
clr.AddReference('mscorlib')
clr.AddReference('Microsoft.Scripting')
clr.AddReference('MyStandardLib')
#Now you can reference things like 'import lxml as L .....

from IronPython.Hosting import Python
from Microsoft.Scripting import SourceCodeKind

spath = "C:/fred.py"  # Path to script


engine = Python.CreateEngine()
#Now add your assemblies (like the standard library) to the engine
for assembly in clr.References:
    runtime.LoadAssembly(assembly)

source = engine.CreateScriptSourceFromFile(spath, SourceCodeKind.Statements)
mod = engine.CreateScope()
runtime = engine.Runtime

source.Execute(mod)
</snippet></ROW><ROW><id>4901341</id><snippet>#in mysite/categories/models.py
class Category(models.Model):
    ...


#in mysite/posts/models.py
class Post(models.Model):
    category = models.ForeignKey('categories.Category')
</snippet></ROW><ROW><id>4901341</id><snippet>def posts(self):
    from posts.models import Post
    return Post.filter(category__pk=self.id)
</snippet></ROW><ROW><id>4901516</id><snippet>node_after_b == node_a</snippet></ROW><ROW><id>4901516</id><snippet>node_after_b.__eq__(node_a)</snippet></ROW><ROW><id>4901516</id><snippet>&gt;&gt;&gt; class B(object):
...     def __eq__(self, other):
...         print "B.__eq__()"
...         return False
... 
&gt;&gt;&gt; class A(object):
...     def __eq__(self, other):
...         print "A.__eq__()"
...         return False
... 
&gt;&gt;&gt; a = A()
&gt;&gt;&gt; b = B()
&gt;&gt;&gt; a == b
A.__eq__()
False
&gt;&gt;&gt; b == a
B.__eq__()
False
&gt;&gt;&gt; 
</snippet></ROW><ROW><id>4901516</id><snippet>Node.__eq__()</snippet></ROW><ROW><id>4901516</id><snippet>#!/usr/bin/env python
# test.py
class A(object):
    def __init__(self, id):
        self.id = id

class B(A):
    def __eq__(self, other):
        return self.id == other.id

@profile
def main():
    list_a = []
    list_b = []
    for x in range(100000):
        list_a.append(A(x))
        list_b.append(B(x))

    ob_a = A(1)
    ob_b = B(1)
    for ob in list_a:
        if ob == ob_a:
            x = True
        if ob is ob_a:
            x = True
        if ob.id == ob_a.id:
            x = True
        if ob.id == 1:
            x = True
    for ob in list_b:
        if ob == ob_b:
            x = True
        if ob is ob_b:
            x = True
        if ob.id == ob_b.id:
            x = True
        if ob.id == 1:
            x = True

if __name__ == '__main__':
    main()
</snippet></ROW><ROW><id>4901516</id><snippet>Timer unit: 1e-06 s

File: test.py Function: main at line 10 Total time: 5.52964 s

Line #      Hits         Time  Per Hit % Time  Line Contents
==============================================================
    10                                           @profile
    11                                           def main():
    12         1            5      5.0      0.0      list_a = []
    13         1            3      3.0      0.0      list_b = []
    14    100001       360677      3.6      6.5      for x in range(100000):
    15    100000       763593      7.6     13.8          list_a.append(A(x))
    16    100000       924822      9.2     16.7          list_b.append(B(x))
    17
    18         1           14     14.0      0.0      ob_a = A(1)
    19         1            5      5.0      0.0      ob_b = B(1)
    20    100001       500454      5.0      9.1      for ob in list_a:
    21    100000       267252      2.7      4.8          if ob == ob_a:
    22                                                       x = True
    23    100000       259075      2.6      4.7          if ob is ob_a:
    24                                                       x = True
    25    100000       539683      5.4      9.8          if ob.id == ob_a.id:
    26         1            3      3.0      0.0              x = True
    27    100000       271519      2.7      4.9          if ob.id == 1:
    28         1            3      3.0      0.0              x = True
    29    100001       296736      3.0      5.4      for ob in list_b:
    30    100000       472204      4.7      8.5          if ob == ob_b:
    31         1            4      4.0      0.0              x = True
    32    100000       283165      2.8      5.1          if ob is ob_b:
    33                                                       x = True
    34    100000       298839      3.0      5.4          if ob.id == ob_b.id:
    35         1            3      3.0      0.0              x = True
    36    100000       291576      2.9      5.3          if ob.id == 1:
    37         1            3      3.0      0.0              x = True
</snippet></ROW><ROW><id>4901516</id><snippet>vmstat 10 100
</snippet></ROW><ROW><id>4901653</id><snippet>timeit</snippet></ROW><ROW><id>4901653</id><snippet>from timeit import timeit
import re

def find(string, text):
    if string.find(text) &gt; -1:
        pass

def re_find(string, text):
    if re.match(text, string):
        pass

def best_find(string, text):
    if text in string:
       pass

print timeit("find(string, text)", "from __main__ import find; string='lookforme'; text='look'")  
print timeit("re_find(string, text)", "from __main__ import re_find; string='lookforme'; text='look'")  
print timeit("best_find(string, text)", "from __main__ import best_find; string='lookforme'; text='look'")  
</snippet></ROW><ROW><id>4901653</id><snippet>0.441393852234
2.12302494049
0.251421928406
</snippet></ROW><ROW><id>4901653</id><snippet>in</snippet></ROW><ROW><id>4901724</id><snippet>x</snippet></ROW><ROW><id>4901724</id><snippet>x</snippet></ROW><ROW><id>4901724</id><snippet>x</snippet></ROW><ROW><id>4901724</id><snippet>x</snippet></ROW><ROW><id>4901724</id><snippet>x</snippet></ROW><ROW><id>4901724</id><snippet>global x</snippet></ROW><ROW><id>4901847</id><snippet>class MyThing:
    def __init__(self,name,location,length):
        self.name = name
        self.location = location
        self.length = length

    def __hash__(self):
        return hash((self.name, self.location))

    def __eq__(self, other):
        return (self.name, self.location) == (other.name, other.location)
</snippet></ROW><ROW><id>4902096</id><snippet>__unicode__</snippet></ROW><ROW><id>4902096</id><snippet># ... model class

def __unicode__(self):
    return "%s %s" % (self.id, self.date)
</snippet></ROW><ROW><id>4902096</id><snippet>latest_matches_list</snippet></ROW><ROW><id>4902096</id><snippet>matches</snippet></ROW><ROW><id>4902096</id><snippet>{{ match.id }}</snippet></ROW><ROW><id>4902096</id><snippet>{{ matches.id }}</snippet></ROW><ROW><id>4902096</id><snippet>{% for matches in latest_matches_list %}
    {{ match.id }} &lt;!-- not defined --&gt;
    {{ matches.id }} &lt;!-- this is your variable --&gt;
{% endfor %}
</snippet></ROW><ROW><id>4902380</id><snippet>python -c 'import mercurial; print mercurial.__file__'</snippet></ROW><ROW><id>4902405</id><snippet>read</snippet></ROW><ROW><id>4902405</id><snippet>readlines</snippet></ROW><ROW><id>4902405</id><snippet>import re

lines = response.readlines()

r = re.compile(r'MMa')
for i in range(len(lines)):
    if r.search(lines[i]):
        print lines[max(0, i-14)]
</snippet></ROW><ROW><id>4902541</id><snippet>#!/usr/bin/env python

import pygtk
pygtk.require('2.0')
import gtk, sys, cairo
from math import pi

def expose (widget, event):
    cr = widget.window.cairo_create()

    # Sets the operator to clear which deletes everything below where an object is drawn
    cr.set_operator(cairo.OPERATOR_CLEAR)
    # Makes the mask fill the entire window
    cr.rectangle(0.0, 0.0, *widget.get_size())
    # Deletes everything in the window (since the compositing operator is clear and mask fills the entire window
    cr.fill()
    # Set the compositing operator back to the default
    cr.set_operator(cairo.OPERATOR_OVER)

    # Draw a fancy little circle for demonstration purpose
    cr.set_source_rgba(0.5,1.0,0.0,1)
    cr.arc(widget.get_size()[0]/2,widget.get_size()[1]/2,
           widget.get_size()[0]/2,0,pi*2)
    cr.fill()

def main (argc):

    win = gtk.Window()

    win.set_decorated(False)

    # Makes the window paintable, so we can draw directly on it
    win.set_app_paintable(True)
    win.set_size_request(100, 100)

    # This sets the windows colormap, so it supports transparency.
    # This will only work if the wm support alpha channel
    screen = win.get_screen()
    rgba = screen.get_rgba_colormap()
    win.set_colormap(rgba)

    win.connect('expose-event', expose)

    win.show()
</snippet></ROW><ROW><id>4902605</id><snippet>urllib2.HTTPRedirectHandler</snippet></ROW><ROW><id>4902638</id><snippet>urlpatterns = patterns('',
    (r'^manager$', 'myapp.views.manager_view'),
    (r'^items/(?P&lt;page&gt;[0-9]+)$', 'django.views.generic.list_detail.object_list',
        items_list),
)
</snippet></ROW><ROW><id>4902638</id><snippet>urlpatterns = patterns('myapp.views',
    (r'^manager$', 'manager_view'),
)

urlpatterns += patterns('django.views.generic',
    (r'^items/(?P&lt;page&gt;[0-9]+)$', 'list_detail.object_list',
        items_list),
)
</snippet></ROW><ROW><id>4902713</id><snippet>font.getsize()</snippet></ROW><ROW><id>4902713</id><snippet>import ImageFont, ImageDraw, Image

image = Image.open('hsvwheel.png')
draw = ImageDraw.Draw(image)
txt = "Hello World"
fontsize = 1  # starting font size

# portion of image width you want text width to be
img_fraction = 0.50

font = ImageFont.truetype("arial.ttf", fontsize)
while font.getsize(txt)[0] &lt; img_fraction*image.size[0]:
    # iterate until the text size is just larger than the criteria
    fontsize += 1
    font = ImageFont.truetype("arial.ttf", fontsize)

# optionally de-increment to be sure it is less than criteria
fontsize -= 1
font = ImageFont.truetype("arial.ttf", fontsize)

print 'final font size',fontsize
draw.text((10, 25), txt, font=font) # put the text on the image
image.save('hsvwheel_txt.png') # save it
</snippet></ROW><ROW><id>4902713</id><snippet>font.getsize()</snippet></ROW><ROW><id>4902883</id><snippet>(__[a-zA-Z0-9_]*(__)?)
</snippet></ROW><ROW><id>4902883</id><snippet>__hello()
__init__()
__this_is_a_function()
__this_is_also_a_function__()
__a_URL2_function__()
</snippet></ROW><ROW><id>4903076</id><snippet>#!/usr/bin/env python2.7
#
# camera.py -- by Trevor Bentley (02/04/2011)
# 
# This work is licensed under a Creative Commons Attribution 3.0 Unported License.
#
# Run from the command line on an Apple laptop running OS X 10.6, this script will
# take a single frame capture using the built-in iSight camera and save it to disk
# using three methods.
#

import sys
import os
import time
import objc
import QTKit
from AppKit import *
from Foundation import NSObject
from Foundation import NSTimer
from PyObjCTools import AppHelper

class NSImageTest(NSObject):
    def init(self):
        self = super(NSImageTest, self).init()
        if self is None:
            return None

        self.session = None
        self.running = True

        return self

    def captureOutput_didOutputVideoFrame_withSampleBuffer_fromConnection_(self, captureOutput, 
                                                                           videoFrame, sampleBuffer, 
                                                                           connection):
        self.session.stopRunning() # I just want one frame

        # Get a bitmap representation of the frame using CoreImage and Cocoa calls
        ciimage = CIImage.imageWithCVImageBuffer_(videoFrame)
        rep = NSCIImageRep.imageRepWithCIImage_(ciimage)
        bitrep = NSBitmapImageRep.alloc().initWithCIImage_(ciimage)
        bitdata = bitrep.representationUsingType_properties_(NSBMPFileType, objc.NULL)

        # Save image to disk using Cocoa
        t0 = time.time()
        bitdata.writeToFile_atomically_("grab.bmp", False)
        t1 = time.time()
        print "Cocoa saved in %.5f seconds" % (t1-t0)

        # Save a read-only buffer of image to disk using Python
        t0 = time.time()
        bitbuf = bitdata.bytes()
        f = open("python.bmp", "w")
        f.write(bitbuf)
        f.close()
        t1 = time.time()
        print "Python saved buffer in %.5f seconds" % (t1-t0)

        # Save a string-copy of the buffer to disk using Python
        t0 = time.time()
        bitbufstr = str(bitbuf)
        f = open("python2.bmp", "w")
        f.write(bitbufstr)
        f.close()
        t1 = time.time()
        print "Python saved string in %.5f seconds" % (t1-t0)

        # Will exit on next execution of quitMainLoop_()
        self.running = False

    def quitMainLoop_(self, aTimer):
        # Stop the main loop after one frame is captured.  Call rapidly from timer.
        if not self.running:
            AppHelper.stopEventLoop()

    def startImageCapture(self, aTimer):
        error = None
        print "Finding camera"

        # Create a QT Capture session
        self.session = QTKit.QTCaptureSession.alloc().init()

        # Find iSight device and open it
        dev = QTKit.QTCaptureDevice.defaultInputDeviceWithMediaType_(QTKit.QTMediaTypeVideo)
        print "Device: %s" % dev
        if not dev.open_(error):
            print "Couldn't open capture device."
            return

        # Create an input instance with the device we found and add to session
        input = QTKit.QTCaptureDeviceInput.alloc().initWithDevice_(dev)
        if not self.session.addInput_error_(input, error):
            print "Couldn't add input device."
            return

        # Create an output instance with a delegate for callbacks and add to session
        output = QTKit.QTCaptureDecompressedVideoOutput.alloc().init()
        output.setDelegate_(self)
        if not self.session.addOutput_error_(output, error):
            print "Failed to add output delegate."
            return

        # Start the capture
        print "Initiating capture..."
        self.session.startRunning()


    def main(self):
        # Callback that quits after a frame is captured
        NSTimer.scheduledTimerWithTimeInterval_target_selector_userInfo_repeats_(0.1, 
                                                                                 self, 
                                                                                 'quitMainLoop:', 
                                                                                 None, 
                                                                                 True)

        # Turn on the camera and start the capture
        self.startImageCapture(None)

        # Start Cocoa's main event loop
        AppHelper.runConsoleEventLoop(installInterrupt=True)

        print "Frame capture completed."

if __name__ == "__main__":
    test = NSImageTest.alloc().init()
    test.main()
</snippet></ROW><ROW><id>4903165</id><snippet>def get_xpath_count(self,xpath):
    """
    Returns the number of nodes that match the specified xpath, eg. "//table" would give
    the number of tables.

    'xpath' is the xpath expression to evaluate. do NOT wrap this expression in a 'count()' function; we will do that for you.
    """
    return self.get_number("getXpathCount", [xpath,])
</snippet></ROW><ROW><id>4903502</id><snippet>from celery.decorators import task

@task()
def add(x, y, **kwargs):
    if not x or not y:
        try:
            raise Exception("test error")
        except Exception, e:
            add.retry(args=[x, y], exc=e, countdown=30, kwargs=kwargs)
    return x+y
</snippet></ROW><ROW><id>4903502</id><snippet>**kwargs</snippet></ROW><ROW><id>4903502</id><snippet>add</snippet></ROW><ROW><id>4903502</id><snippet>kwargs=kwargs</snippet></ROW><ROW><id>4903579</id><snippet>clenotes.cfg</snippet></ROW><ROW><id>4903579</id><snippet>clenotes.py</snippet></ROW><ROW><id>4903579</id><snippet>config.readfp(open('%sconfig/clenotes.cfg' % System.getProperty('jython.home')))
</snippet></ROW><ROW><id>4903579</id><snippet>config.readfp(open('%sconfig/clenotes.cfg' % System.getProperty('jython.home'), "rU"))
</snippet></ROW><ROW><id>4903579</id><snippet>fopen()</snippet></ROW><ROW><id>4903579</id><snippet>perl -pi.bak -e 's/[ \t\r]+$// clenotes.cfg</snippet></ROW><ROW><id>4903579</id><snippet>clenotes.py</snippet></ROW><ROW><id>4903579</id><snippet>\r</snippet></ROW><ROW><id>4903579</id><snippet>clenotes.cfg</snippet></ROW><ROW><id>4903579</id><snippet>.py</snippet></ROW><ROW><id>4903579</id><snippet>clenotes.cmd</snippet></ROW><ROW><id>4903753</id><snippet>"%s's Level: %s" % (self.name, self.level)
</snippet></ROW><ROW><id>4903944</id><snippet>os.walk</snippet></ROW><ROW><id>4903944</id><snippet>os.path.splitext</snippet></ROW><ROW><id>4903944</id><snippet>import os
import collections
extensions = collections.defaultdict(int)

for path, dirs, files in os.walk('/'):
   for filename in files:
       extensions[os.path.splitext(filename)[1].lower()] += 1

for key,value in extensions.items():
    print 'Extension: ', key, ' ', value, ' items'
</snippet></ROW><ROW><id>4904107</id><snippet>getattr(server, vars["fnc"])(vars)
</snippet></ROW><ROW><id>4904107</id><snippet>getattr(server, "do_" + vars["fnc"])(vars)
</snippet></ROW><ROW><id>4904200</id><snippet>import sys
from StringIO import StringIO

buffer = StringIO()
sys.stdout = buffer

exec "print 'Hello, World!'"

#remember to restore the original stdout!
sys.stdout = sys.__stdout__

print buffer.getvalue()
</snippet></ROW><ROW><id>4904384</id><snippet>sudo easy_install &lt;package&gt;
</snippet></ROW><ROW><id>4904384</id><snippet>easy_install -d /home/&lt;username&gt;/wherever &lt;package&gt;
</snippet></ROW><ROW><id>4904492</id><snippet>def splitter(str):
    for i in range(1, len(str)):
        start = str[0:i]
        end = str[i:]
        yield (start, end)
        for split in splitter(end):
            result = [start]
            result.extend(split)
            yield result

combinations = list(splitter(str))
</snippet></ROW><ROW><id>4904847</id><snippet>baseobj.derived    # note: small 'd'
</snippet></ROW><ROW><id>4905102</id><snippet>{{ my_variable|forceescape|linebreaks }}
</snippet></ROW><ROW><id>4905174</id><snippet>user.get_profile().friends.all()</snippet></ROW><ROW><id>4905209</id><snippet>def iter_frames(im):
    try:
        i= 0
        while 1:
            im.seek(i)
            imframe = im.copy()
            if i == 0: 
                palette = imframe.getpalette()
            else:
                imframe.putpalette(palette)
            yield imframe
            i += 1
    except EOFError:
        pass

for i, frame in enumerate(iter_frames(im)):
    frame.save('test%d.png' % i,**frame.info)
</snippet></ROW><ROW><id>4905277</id><snippet>import ast

def parse_params(s):
    root = ast.parse(s)
    expr = root.body[0]
    return process_node(expr.value)

def process_node(node):
    if isinstance(node, ast.Tuple):
        return tuple(map(process_node, node.elts))
    elif isinstance(node, ast.Name):
        return node.id
    else:
        raise ValueError("unsupported node type %r" % node)
</snippet></ROW><ROW><id>4905277</id><snippet>&gt;&gt;&gt; parse_params('(id,title,(author,username,),)')
('id', 'title', ('author', 'username'))</snippet></ROW><ROW><id>4905330</id><snippet>__init__.py</snippet></ROW><ROW><id>4905384</id><snippet>settings.py</snippet></ROW><ROW><id>4905384</id><snippet>storage.py</snippet></ROW><ROW><id>4905384</id><snippet>OverwriteStorage()</snippet></ROW><ROW><id>4905384</id><snippet>from storage import OverwriteStorage
...
class MyModel(models.Model):
    ...
    image = ImageField(upload_to='images', storage=OverwriteStorage())
</snippet></ROW><ROW><id>4905384</id><snippet>storage.py</snippet></ROW><ROW><id>4905384</id><snippet>from django.core.files.storage import FileSystemStorage

class OverwriteStorage(FileSystemStorage):
    """
    Returns same name for existing file and deletes existing file on save.
    """                                                              
    def _save(self, name, content):
        if self.exists(name):
            self.delete(name)
        return super(OverwriteStorage, self)._save(name, content)

    def get_available_name(self, name):
        return name
</snippet></ROW><ROW><id>4905415</id><snippet>&gt;&gt;&gt; m = matrix([[-1.0/6 + (2.0j/3)]])
&gt;&gt;&gt; m
matrix([[-0.16666667+0.66666667j]])
&gt;&gt;&gt; m.shape
(1, 1)
&gt;&gt;&gt; m[0,0]
(-0.16666666666666666+0.66666666666666663j)
&gt;&gt;&gt; m[(0,0)]
(-0.16666666666666666+0.66666666666666663j)
</snippet></ROW><ROW><id>4905415</id><snippet>&gt;&gt;&gt; m.tolist()[0][0] # seldom useful, though
(-0.16666666666666666+0.6666666666666666j)
&gt;&gt;&gt; m.flat[0]  # more frequently useful
(-0.16666666666666666+0.66666666666666663j)
</snippet></ROW><ROW><id>4905415</id><snippet>&gt;&gt;&gt; m[(0,0)]
(-0.16666666666666666+0.66666666666666663j)
&gt;&gt;&gt; type(m[(0,0)])
&lt;type 'numpy.complex128'&gt;
&gt;&gt;&gt; x = m[(0,0)]
&gt;&gt;&gt; x + 3
(2.8333333333333335+0.66666666666666663j)
&gt;&gt;&gt; abs(x)
0.68718427093627676
&gt;&gt;&gt; x.real
-0.16666666666666666
&gt;&gt;&gt; x.imag
0.66666666666666663
</snippet></ROW><ROW><id>4905920</id><snippet>import unicodedata as ucd
import sys
with open(sys.argv[1]) as f:
    for linex, line in enumerate(f):
        uline = line.decode('UTF-8')
        bad_line = False
        for charx, char in enumerate(uline):
            if char &lt;= u'\xff': continue
            print "line %d, column %d: %s" % (
                linex+1, charx+1, ucd.name(char, '&lt;unknown&gt;'))
            bad_line = True
        if bad_line:
            print repr(uline)
            print
</snippet></ROW><ROW><id>4905920</id><snippet>line 1, column 6: RIGHT SINGLE QUOTATION MARK
line 1, column 10: SINGLE LOW-9 QUOTATION MARK
u'yadda\u2019foo\u201abar\r\n'

line 2, column 4: IDEOGRAPHIC SPACE
u'fat\u3000space\r\n'
</snippet></ROW><ROW><id>4905967</id><snippet>'=\?(?:[^?]|\?[^=])+\?='
</snippet></ROW><ROW><id>4905989</id><snippet>def look_around(self):
    max_sugar_point = self.point
    max_sugar = self.world.sugar_map[self.point].level
    min_range = 0

    selfx = self.point[0]
    selfy = self.point[1]
    wlength = self.world.surface.length
    wheight = self.world.surface.height
    occupied = self.world.occupied
    sugar_map = self.world.sugar_map
    all_directions = self.all_directions

    random.shuffle(all_directions)
    for r in range(1, self.vision+1):
        for dx,dy in all_directions:
            p = ((selfx + r * dx) % wlength,
                (selfy + r * dy) % wheight)
            if occupied(p): # checks if p is in a lookup table (dict)
                continue
            if sugar_map[p].level &gt; max_sugar:
                max_sugar = sugar_map[p].level
                max_sugar_point = p
    if max_sugar_point is not self.point:
        self.move(max_sugar_point)
</snippet></ROW><ROW><id>4905989</id><snippet>occupied</snippet></ROW><ROW><id>4906054</id><snippet>def combinations(list1, list2):
    return ([opt1, opt2, opt3]
            for i,opt1 in enumerate(list1)
            for opt2 in list1[i+1:]
            for opt3 in list2)
</snippet></ROW><ROW><id>4906054</id><snippet>def combinations(list1, list2):
    return ([opt1, opt2, opt3]
            for opt1 in list1
            for opt2 in list1
            for opt3 in list2 if opt1 != opt2)
</snippet></ROW><ROW><id>4906749</id><snippet>Membership.ValidateUser(username, password)</snippet></ROW><ROW><id>4906749</id><snippet>string siteUrl = "http://example.com/sites/hr";
AuthenticationService.Authentication client = new AuthenticationService.Authentication();

client.AllowAutoRedirect = true;
client.CookieContainer = new CookieContainer();
client.Url = siteUrl + "_vti_bin/Authentication.asmx";

AuthenticationService.LoginResult loginResult = client.Login(username, password);
if (loginResult.ErrorCode == AuthenticationService.LoginErrorCode.NoError)
{
    string cookie = client.CookieContainer.GetCookieHeader(new Uri(siteUrl));
}
</snippet></ROW><ROW><id>4907047</id><snippet>&lt;dc:subject&gt;</snippet></ROW><ROW><id>4907047</id><snippet>&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;feed xmlns="http://www.w3.org/2005/Atom"
      xmlns:openSearch="http://a9.com/-/spec/opensearchrss/1.0/"
      xmlns:gbs="http://schemas.google.com/books/2008" 
      xmlns:dc="http://purl.org/dc/terms"
      xmlns:gd="http://schemas.google.com/g/2005"&gt;
  &lt;id&gt;http://www.google.com/books/feeds/volumes&lt;/id&gt;
  &lt;updated&gt;2008-08-12T23:25:35.000&lt;/updated&gt;

&lt;!--  a loot of information here, just removed those nodes to save space.. --&gt;

    &lt;dc:creator&gt;Jane Austen&lt;/dc:creator&gt;
    &lt;dc:creator&gt;James Kinsley&lt;/dc:creator&gt;
    &lt;dc:creator&gt;Fiona Stafford&lt;/dc:creator&gt;
    &lt;dc:date&gt;2004&lt;/dc:date&gt;
    &lt;dc:description&gt;
      If a truth universally acknowledged can shrink quite so rapidly into 
      the opinion of a somewhat obsessive comic character, the reader may reasonably feel ...
    &lt;/dc:description&gt;
    &lt;dc:format&gt;382&lt;/dc:format&gt;
    &lt;dc:identifier&gt;8cp-Z_G42g4C&lt;/dc:identifier&gt;
    &lt;dc:identifier&gt;ISBN:0192802380&lt;/dc:identifier&gt;
    &lt;dc:publisher&gt;Oxford University Press, USA&lt;/dc:publisher&gt;
    &lt;dc:subject&gt;Fiction&lt;/dc:subject&gt;
    &lt;dc:title&gt;Pride and Prejudice&lt;/dc:title&gt;
    &lt;dc:title&gt;A Novel&lt;/dc:title&gt;
  &lt;/entry&gt;
&lt;/feed&gt;
</snippet></ROW><ROW><id>4907053</id><snippet>import os
print os.environ['HOME']

 # using get will return `none` if key is not present rather than raise a `KeyError`
print os.environ.get('KEY_THAT_MIGHT_EXIST')

# os.getenv is equivalent, and can also give a default value instead of None
print os.getenv('KEY_THAT_MIGHT_EXIST', default_value)
</snippet></ROW><ROW><id>4907053</id><snippet>import sys
print sys.prefix
</snippet></ROW><ROW><id>4907278</id><snippet>&gt;&gt;&gt; import itertools
&gt;&gt;&gt; a = [1,2]
&gt;&gt;&gt; b = [4,5]
&gt;&gt;&gt; list(itertools.product(a,b))
[(1, 4), (1, 5), (2, 4), (2, 5)]
</snippet></ROW><ROW><id>4907470</id><snippet>class NameResolver(object):
    def __getitem__(self, key):
        return "dynamic %r" % key

&gt;&gt;&gt; eval("foo, bar", {}, NameResolver())
("dynamic 'foo'", "dynamic 'bar'")
</snippet></ROW><ROW><id>4907470</id><snippet>eval()</snippet></ROW><ROW><id>4907470</id><snippet>ast</snippet></ROW><ROW><id>4907777</id><snippet>twisted.mail</snippet></ROW><ROW><id>4907793</id><snippet>sudo apt-get install mysql-python</snippet></ROW><ROW><id>4907793</id><snippet>sudo easy_install mysqld</snippet></ROW><ROW><id>4907793</id><snippet>easy_install</snippet></ROW><ROW><id>4907996</id><snippet># pseudocode. If you went the route of admin forms, 
# the ModelForms would use self.cleaned_data[attr]

if self.page == self.also_page: 
    raise models(or forms).ValidationError("Pages are the same")

elif Also_Viewed.objects.filter(page=self.page).count() &gt;= 24:
    raise models(or forms).ValidationError("Can not have more than 24 items for %s" % self.page)

# let the unique_together catch uniqueness.
</snippet></ROW><ROW><id>4908144</id><snippet>gtk_window_set_urgency_hint()</snippet></ROW><ROW><id>4908150</id><snippet>os.path.join()</snippet></ROW><ROW><id>4908150</id><snippet>import os
getattr(getattr(os, 'path'), 'join').__call__('.', 'directory')
</snippet></ROW><ROW><id>4908150</id><snippet>class PythonExecutor {
    public static void main(String...args) {
        String moduleName = "...";
        String functionName = "...";

        PyObject importer = state.getBuiltins().__getitem__(Py.newString("__import__"));

        // module = __import__(moduleName)
        PyObject module = importer.__call__(Py.newString(moduleName));

        // function = getattr(module, functionName)
        PyObject function = module.__getattr__(functionName);

        // function.__call__()
        function.__call__();
    }
}
</snippet></ROW><ROW><id>4908150</id><snippet>__tojava__()</snippet></ROW><ROW><id>4908150</id><snippet>__init__()</snippet></ROW><ROW><id>4908280</id><snippet>Participants.objects.all()
</snippet></ROW><ROW><id>4908280</id><snippet>players = models.ManyToManyField(User, through='Participants')
</snippet></ROW><ROW><id>4908280</id><snippet>Matches.objects.all()
</snippet></ROW><ROW><id>4908394</id><snippet>import gviz_api

scheme = [('col1','string','SURNAME'),('col2','number','ONE'),('col3','number','TWO')]
data_table = gviz_api.DataTable(scheme)

#  --- lines in surnames.csv are : --- 
#  surname,percent,cumulative percent,rank\n
#  SMITH,1.006,1.006,1,\n
#  JOHNSON,0.810,1.816,2,\n
#  WILLIAMS,0.699,2.515,3,\n

with open('surnames.csv') as f:

    def transf(surname,x,y):
        return (surname,float(x),float(y))

    f.readline()
    # to skip the first line surname,percent,cumulative percent,rank\n

    data_table.LoadData( transf(*line.split(',')[0:3]) for line in f )
    # to populate the data table by iterating in the CSV file
</snippet></ROW><ROW><id>4908394</id><snippet>import gviz_api

scheme = [('col1','string','SURNAME'),('col2','number','ONE'),('col3','number','TWO')]
data_table = gviz_api.DataTable(scheme)

#  --- lines in surnames.csv are : --- 
#  surname,percent,cumulative percent,rank\n
#  SMITH,1.006,1.006,1,\n
#  JOHNSON,0.810,1.816,2,\n
#  WILLIAMS,0.699,2.515,3,\n

with open('surnames.csv') as f:

    f.readline()
    # to skip the first line surname,percent,cumulative percent,rank\n

    datdata_table.LoadData( [el if n==0 else float(el) for n,el in enumerate(line.split(',')[0:3])] for line in f )    
    # to populate the data table by iterating in the CSV file
</snippet></ROW><ROW><id>4908394</id><snippet>def GvizFromCsv(filename):
  """ creates a gviz data table from a CSV file """

  data_table = gviz_api.DataTable([('col1','string','SURNAME'),
                                   ('col2','number','ONE'    ),
                                   ('col3','number','TWO'    ) ])

  #  --- with such a table schema , lines in the file must be like that: ---  
  #  blah, number, number, ...anything else...\n 
  #  SMITH,1.006,1.006, ...anything else...\n 
  #  JOHNSON,0.810,1.816, ...anything else...\n 
  #  WILLIAMS,0.699,2.515, ...anything else...\n

  with open(filename) as f:
    data_table.LoadData( [el if n==0 else float(el) for n,el in enumerate(line.split(',')[0:3])]
                         for line in f )
  return data_table
</snippet></ROW><ROW><id>4908455</id><snippet>command = self.openFile</snippet></ROW><ROW><id>4908455</id><snippet>command = self.openFile()</snippet></ROW><ROW><id>4908455</id><snippet>self.</snippet></ROW><ROW><id>4908455</id><snippet>openFile</snippet></ROW><ROW><id>4908455</id><snippet>App.openFile</snippet></ROW><ROW><id>4908455</id><snippet>self.openFile</snippet></ROW><ROW><id>4908455</id><snippet>App</snippet></ROW><ROW><id>4909015</id><snippet>itertools.izip_longest()</snippet></ROW><ROW><id>4909015</id><snippet>for x in itertools.izip_longest(*l, fillvalue="."):
    print " ".join(str(i) for i in x)
</snippet></ROW><ROW><id>4909044</id><snippet>math.atan2</snippet></ROW><ROW><id>4909044</id><snippet>def A(dx, dy):
  return math.atan2(dy, dx) * 180 / math.pi
</snippet></ROW><ROW><id>4909044</id><snippet>math</snippet></ROW><ROW><id>4909044</id><snippet>def LengthDir(length, angle):
  radian_angle = angle * math.pi / 180
  return (length * math.cos(radian_angle), length * math.sin(radian_angle))
</snippet></ROW><ROW><id>4909044</id><snippet>math.degrees</snippet></ROW><ROW><id>4909044</id><snippet>math.radians</snippet></ROW><ROW><id>4909044</id><snippet>def A(dx, dy):
  return math.degrees( math.atan2(dy, dx) )

def LengthDir(length, angle):
  radian_angle = math.radians(angle)
  return (length * math.cos(radian_angle), length * math.sin(radian_angle))
</snippet></ROW><ROW><id>4909349</id><snippet>url('/admin/post/edit/' + request.urlvars['id'])
</snippet></ROW><ROW><id>4909591</id><snippet>e.extractAll("th")
</snippet></ROW><ROW><id>4909591</id><snippet>extractAll()</snippet></ROW><ROW><id>4909591</id><snippet>Extractor.extractAll(e, "th")
</snippet></ROW><ROW><id>4909591</id><snippet>staticmethod</snippet></ROW><ROW><id>4909591</id><snippet>@staticmethod
def extractAll(tag):
    ...
</snippet></ROW><ROW><id>4909591</id><snippet>e.extractAll("th")</snippet></ROW><ROW><id>4909735</id><snippet>regex = '|'.join([r'\b' + str(state) + r'\b' for state in states])
</snippet></ROW><ROW><id>4909735</id><snippet>'\b'</snippet></ROW><ROW><id>4909735</id><snippet>r'\b'</snippet></ROW><ROW><id>4909735</id><snippet>u'string</snippet></ROW><ROW><id>4909735</id><snippet>ur"é\n"</snippet></ROW><ROW><id>4909735</id><snippet>u"é\n"</snippet></ROW><ROW><id>4909735</id><snippet>regex = '|'.join(r'\b' + str(state) + r'\b' for state in states)
</snippet></ROW><ROW><id>4909735</id><snippet>[]</snippet></ROW><ROW><id>4909735</id><snippet>join()</snippet></ROW><ROW><id>4909735</id><snippet>regex = '|'.join(r'\b%s\b' % state for state in states)
</snippet></ROW><ROW><id>4909735</id><snippet>regex = r'\b%s\b' % r'\b|\b'.join(states)
</snippet></ROW><ROW><id>4909735</id><snippet>in</snippet></ROW><ROW><id>4909735</id><snippet>matches = [s for s in states if s in 'grand rapids, mi 49505']
</snippet></ROW><ROW><id>4909814</id><snippet>np.empty((m,n), dtype=np.object)</snippet></ROW><ROW><id>4909814</id><snippet>x = np.empty((3,4), dtype=np.object)
print x
x[2,3] = range(5)
x[1,2] = 2
x[1,3] = (item*2 for item in xrange(10))
print x
</snippet></ROW><ROW><id>4909814</id><snippet>Initial array:
[[None None None None]
 [None None None None]
 [None None None None]]

Modified array:
[[None None None None]
 [None None 2 &lt;generator object &lt;genexpr&gt; at 0x8700d9c&gt;]
 [None None None [0, 1, 2, 3, 4]]]
</snippet></ROW><ROW><id>4909814</id><snippet>None</snippet></ROW><ROW><id>4909841</id><snippet>for i in range(len(xs)): # use xs[i]</snippet></ROW><ROW><id>4909841</id><snippet>int i = 0; while (i &lt; N) { /* use xs[i]; */ i++; }</snippet></ROW><ROW><id>4909841</id><snippet>for x in xs: # use x</snippet></ROW><ROW><id>4909841</id><snippet>{ level_1: { id_1: (val_1, val_2), id_2: ...}, level_2: ...}</snippet></ROW><ROW><id>4909841</id><snippet>for lift in net.lifts:
    for other_lift in net.lifts:
        if (lift[1]['id'] == other_lift[1]['id'] and
            abs(lift[1]['level'] - other_lift[1]['level']) &lt;= 1):
            # got one
</snippet></ROW><ROW><id>4909841</id><snippet>O(n**2)</snippet></ROW><ROW><id>4909916</id><snippet>{% if not variable.approved %}</snippet></ROW><ROW><id>4909964</id><snippet>try:
    from local_settings import *
except ImportError:
    pass
</snippet></ROW><ROW><id>4910020</id><snippet>text_content</snippet></ROW><ROW><id>4910020</id><snippet>import lxml.html as lh
content='''\
&lt;div class="ds-list"&gt;
    &lt;b&gt;1. &lt;/b&gt; 
    A domesticated carnivorous mammal 
    &lt;i&gt;(Canis familiaris)&lt;/i&gt; 
    related to the foxes and wolves and raised in a wide variety of breeds.
&lt;/div&gt;'''
doc=lh.fromstring(content)
for div in doc.cssselect('div.ds-list'):
    print(div.text_content())
</snippet></ROW><ROW><id>4910020</id><snippet>1.  
A domesticated carnivorous mammal 
(Canis familiaris) 
related to the foxes and wolves and raised in a wide variety of breeds.
</snippet></ROW><ROW><id>4910031</id><snippet>def bytestomb(b):
    mb = float(b) / (1024*1024)
    return mb


def bytessubidatransferidos():
    interface= 'ppp0'
    for line in open('/proc/net/dev', 'r'):
        if interface in line:
            data = line.split('%s:' % interface)[1].split()
            tx_bytes =  (data[8])
    return bytestomb(tx_bytes)


def bytesbajadatransferidos():
    interface= 'ppp0'
    for line in open('/proc/net/dev', 'r'):
        if interface in line:
            data = line.split('%s:' % interface)[1].split()
            rx_bytes = (data[0])
    return bytestomb(rx_bytes)


print bytessubidatransferidos()
print bytesbajadatransferidos()
</snippet></ROW><ROW><id>4910232</id><snippet>site-packages</snippet></ROW><ROW><id>4910232</id><snippet>pip install markdown</snippet></ROW><ROW><id>4910514</id><snippet>int32</snippet></ROW><ROW><id>4910514</id><snippet>A.dtype</snippet></ROW><ROW><id>4910514</id><snippet>A = mat('[1 3 5; 2 5 1; 2 3 8]', dtype=numpy.int64)
</snippet></ROW><ROW><id>4910514</id><snippet>A = mat('[1 3 5; 2 5 1; 2 3 8]', dtype=float)
</snippet></ROW><ROW><id>4910514</id><snippet>n!</snippet></ROW><ROW><id>4911238</id><snippet>self</snippet></ROW><ROW><id>4911238</id><snippet>a</snippet></ROW><ROW><id>4911238</id><snippet>self.a()</snippet></ROW><ROW><id>4911238</id><snippet>class A:
  def a(self):
    print 'a'
  def b(self):
    print 'b'
    self.a()
</snippet></ROW><ROW><id>4911257</id><snippet>&gt;&gt;&gt; src_match('this is &lt;img src="my example" /&gt;','my example')
the match was: my example
</snippet></ROW><ROW><id>4911257</id><snippet>&lt;img width="200px" src="Y U NO C ME!!" /&gt;
</snippet></ROW><ROW><id>4911257</id><snippet>&gt;&gt;&gt; src_match('&lt;p class="p1"&gt;&lt;img src="myfile.png" alt="beat-divisions.tiff"&gt;&lt;/p&gt;','myfile.png')
the match was: myfile.png
&gt;&gt;&gt; src_match('&lt;p class="p1"&gt;&lt;img src="myfile.anotherword.png" alt="beat-divisions.tiff"&lt;/p&gt;\n','myfile.anotherword.png')
the match was: myfile.anotherword.png
</snippet></ROW><ROW><id>4911427</id><snippet>def pyramid(rows=8):
    for i in range(rows):
        print ' '*(rows-i-1) + '*'*(2*i+1)

pyramid(8)
       *
      ***
     *****
    *******
   *********
  ***********
 *************
***************

pyramid(12)
           *
          ***
         *****
        *******
       *********
      ***********
     *************
    ***************
   *****************
  *******************
 *********************
***********************
</snippet></ROW><ROW><id>4911430</id><snippet>BEGIN IMMEDIATE TRANSACTION;
SELECT COUNT(*) FROM x WHERE y;
SELECT a,b,c FROM x WHERE y;
ROLLBACK TRANSACTION;
</snippet></ROW><ROW><id>4911585</id><snippet>import base64

exe = 'c:/users/me/program.exe'
script = 'c:/users/me/newpython.py'
chunksize = 6144
linelength = 80

with open(exe,'rb') as inf, open(script,'w') as outf:
    outf.write('program_data = """')

    while True:
        progdata = inf.read(chunksize)
        if len(progdata):
            progdata = progdata.encode("base64")
            outf.writelines(progdata[i:i+linelength] for i in range(0, len(progdata), linelength))
        else:
            break

    outf.write('""".decode("base64")')
</snippet></ROW><ROW><id>4911629</id><snippet>user</snippet></ROW><ROW><id>4911629</id><snippet>for widget in widget_list:
    widget.latest_finished_widget = widget.finished_widget_set.filter(user=request.user).latest('created')

{% for widget in widget_list %}
    &lt;p&gt;{{ widget.name }}&lt;/p&gt;
    &lt;p&gt;{{ widget.latest_finished_widget }}&lt;/p&gt;
{% endfor %}
</snippet></ROW><ROW><id>4911629</id><snippet>widgets = Widget.objects.filter(...)

finished_widget_map = dict( 
    [(x['thing__id'], x['created']) for x in 
        Finished_Widget.objects.filter(thing__in=widgets, user=request.user).values_list('thing__id', 'created').order_by('created')])
    # this ensures we only select what we need, thing__id and the created column
    # ordering by created will ensure only the last (latest) will appear in our dictionary

for widget in widgets:
    widget.latest_finished_widget_created = finished_widget_map.get(widget.id, 'No Widget')


{% for widget in widgets %}
    {{ widget.name }}
    {{ widget.latest_finished_widget_created }}
{% endfor %}
</snippet></ROW><ROW><id>4911802</id><snippet>g(n) = n log n + n log log n</snippet></ROW><ROW><id>4911802</id><snippet>g(n)</snippet></ROW><ROW><id>4911802</id><snippet>log</snippet></ROW><ROW><id>4911855</id><snippet>/usr/local/google_appengine</snippet></ROW><ROW><id>4911855</id><snippet>/Applications/GoogleAppEngineLauncher.app/Contents/Resources/GoogleAppEngine-default.bundle/Contents/Resources/google_appengine</snippet></ROW><ROW><id>4912261</id><snippet>models.py

class Tag(models.Model):
    name = models.CharField(max_length=200)

class Poll(models.Model):
    topic = models.CharField(max_length=200)
    tags = models.ManyToManyField(Tag)

in views.py:

poll = Poll(topic="My topic")
poll.save()
for splitTag in splitTags:
    tag = Tag(name = splitTag.lower())
    tag.save()
    poll.tags.add(tag)
poll.save()
</snippet></ROW><ROW><id>4912513</id><snippet>python manage.py your_cms init
</snippet></ROW><ROW><id>4912513</id><snippet>try-except</snippet></ROW><ROW><id>4912599</id><snippet>__dict__</snippet></ROW><ROW><id>4912599</id><snippet>class MyDescriptor(object):
    __slots__ = ['name']
    def __init__(self, name_):
        self.name = name_
    def __get__(self, instance, owner):
        return getattr(instance, self.name)
    def __set__(self, instance, value):
        setattr(instance, self.name, value)

class C(object):
    __slots__ = ['_a']
    a = MyDescriptor('_a')
    def __init__(self, val):
        self.a = val

foo = C(1)
print foo.a
foo.a = 2
print foo.a
</snippet></ROW><ROW><id>4912656</id><snippet>import collections

def handle_vertex(v, vs):
  if v in vs[0]:
    vs[0].remove(v)
  elif v in vs[1]:
    vs[0].add(v)
    vs[1].remove(v)

def follow(edgemap, start, vs):
  """Follow a path in the graph, yielding the edges."""
  v0 = start
  last = None
  while True:
    # All vertices that we can go to next.
    next_v = [v for v in edgemap[v0] if v != last]
    if not next_v:
      # We've reached the end (we must have been a line).
      return
    assert len(next_v) == 1 or (v0 == start and len(next_v) == 2)
    next_v = next_v[0]
    # Remove the endpoints from the vertex-degree sets.
    handle_vertex(v0, vs)
    handle_vertex(next_v, vs)
    yield v0, next_v
    if next_v == start:
      # We've got back to the start (we must have been a cycle).
      return
    v0, last = next_v, v0

def pairsort(edges):
  edgemap = collections.defaultdict(list)
  original_edges = {}
  for a, b in edges:
    # Build the adjacency table.
    edgemap[a].append(b)
    edgemap[b].append(a)
    # Keep a map to remember the original order pairs appeared in
    # so we can output edges correctly no matter which way round
    # we store them.
    original_edges[a, b] = [a, b]
    original_edges[b, a] = [a, b]
  # Build sets of degree 1 and degree 2 vertices.
  vs = [set(), set()]
  for k, v in edgemap.iteritems():
    vs[len(v) - 1].add(k)
  # Find all components that are lines.
  while vs[0]:
    v0 = vs[0].pop()
    for e in follow(edgemap, v0, vs):
      yield original_edges[e]
  # Find all components that are cycles.
  while vs[1]:
    v0 = vs[1].pop()
    for e in follow(edgemap, v0, vs):
      yield original_edges[e]

input = [
    [ 4, 10],
    [ 4,  2],
    [ 0,  7],
    [ 5, 11],
    [ 6,  8],
    [ 3,  6],
    [ 9,  7],
    [ 2, 11],
    [ 9,  5],
    [ 8,  1]]

print list(pairsort(input))
</snippet></ROW><ROW><id>4912720</id><snippet>print ' ' * 10
</snippet></ROW><ROW><id>4912720</id><snippet>print 'a' * 10
</snippet></ROW><ROW><id>4912720</id><snippet>l</snippet></ROW><ROW><id>4912720</id><snippet>for (c, n) in l:
    print c * n
</snippet></ROW><ROW><id>4912856</id><snippet>toString</snippet></ROW><ROW><id>4912856</id><snippet>__str__</snippet></ROW><ROW><id>4912856</id><snippet>def __str__(self):
     return "foo"
</snippet></ROW><ROW><id>4912856</id><snippet>__repr__</snippet></ROW><ROW><id>4912902</id><snippet>In []: import this
The Zen of Python, by Tim Peters

Beautiful is better than ugly.
Explicit is better than implicit.
...
</snippet></ROW><ROW><id>4912902</id><snippet>In []: a= arange(12).reshape(3, 4)
In []: a
Out[]:
array([[ 0,  1,  2,  3],
       [ 4,  5,  6,  7],
       [ 8,  9, 10, 11]])
In []: a[2, logical_and(1== a[0, :], 5== a[1, :])]+= 12
In []: a
Out[]:
array([[ 0,  1,  2,  3],
       [ 4,  5,  6,  7],
       [ 8, 21, 10, 11]])
</snippet></ROW><ROW><id>4912902</id><snippet>In []: a= a.T
In []: a
Out[]:
array([[ 0,  4,  8],
       [ 1,  5, 21],
       [ 2,  6, 10],
       [ 3,  7, 11]])
In []: a[logical_and(1== a[:, 0], 5== a[:, 1]), 2]+= 12
In []: a
Out[]:
array([[ 0,  4,  8],
       [ 1,  5, 33],
       [ 2,  6, 10],
       [ 3,  7, 11]])
</snippet></ROW><ROW><id>4912979</id><snippet>import sys

groups = {}
for l in sys.stdin:
    group, value = l.split()
    s = groups.get(group, 0)
    groups[group] = s + int(value)

print groups
</snippet></ROW><ROW><id>4912999</id><snippet>issubclass()</snippet></ROW><ROW><id>4912999</id><snippet>assert issubclass(suit, Suit)</snippet></ROW><ROW><id>4913021</id><snippet>def test_function():
    test_variable = 1
    return test_variable
</snippet></ROW><ROW><id>4913021</id><snippet>def View(request):
   result = test_function()
   return render_to_response('template', {'test_valiable' : result })
</snippet></ROW><ROW><id>4913613</id><snippet>require 'rubygems'
require 'RMagick'
include Magick

image = Image.read("stack.png")[0]
hash = image.color_histogram
color, number = hash.max{|a,b| a[1] &lt;=&gt; b[1]}
puts color.to_color
</snippet></ROW><ROW><id>4913653</id><snippet>from math import radians, cos, sin, asin, sqrt

def haversine(lon1, lat1, lon2, lat2):
    """
    Calculate the great circle distance between two points 
    on the earth (specified in decimal degrees)
    """
    # convert decimal degrees to radians 
    lon1, lat1, lon2, lat2 = map(radians, [lon1, lat1, lon2, lat2])

    # haversine formula 
    dlon = lon2 - lon1 
    dlat = lat2 - lat1 
    a = sin(dlat/2)**2 + cos(lat1) * cos(lat2) * sin(dlon/2)**2
    c = 2 * asin(sqrt(a)) 

    # 6367 km is the radius of the Earth
    km = 6367 * c
    return km 
</snippet></ROW><ROW><id>4913947</id><snippet>t.join()</snippet></ROW><ROW><id>4913947</id><snippet>join()</snippet></ROW><ROW><id>4913947</id><snippet>def main():
    # We will store the running threads in this
    threads = []
    # Start the threads
    for nums in [range(0,5), range(5,10)]:
        t = Spider(nums)
        t.start()
        print 'started a thread'
        threads.append(t)
    # All the threads have been started
    # Now we wait for them to finish
    for t in threads:
        t.join()
    print "done"
</snippet></ROW><ROW><id>4913947</id><snippet>Thread.join()</snippet></ROW><ROW><id>4914287</id><snippet>class BaseHandler(webapp.RequestHandler):
    def DoGet(self, *args):
        ''' defined in derived classes, actual per-handler get() logic'''
        pass

    def get(self, *args):
        # don't get caught in endless redirects!
        if specialCase and not self.request.path.startswith('/special'):
            self.redirect('/special')
        else:
            self.DoGet(*args)

class NormalHandler(BaseHandler):
    def DoGet(self, *args):
        # normal stuff

class SpecialHandler(BaseHandler):
    def DoGet(self, *args):
        # SPECIAL stuff
</snippet></ROW><ROW><id>4914288</id><snippet>open(filename, 'w').close()
</snippet></ROW><ROW><id>4914475</id><snippet>def generalized_taylor_expansion_exponents( order, n_variables ):
    """
    Find the exponents of a multivariate polynomial expression of order
    `order` and `n_variable` number of variables. 
    """
    pattern = [0] * n_variables
    for current_sum in range(1, order+1):
        pattern[0] = current_sum
        yield tuple(pattern)
        while pattern[-1] &lt; current_sum:
            for i in range(2, n_variables + 1):
                if 0 &lt; pattern[n_variables - i]:
                    pattern[n_variables - i] -= 1
                    if 2 &lt; i:
                        pattern[n_variables - i + 1] = 1 + pattern[-1]
                        pattern[-1] = 0
                    else:
                        pattern[-1] += 1
                    break
            yield tuple(pattern)
        pattern[-1] = 0
</snippet></ROW><ROW><id>4914927</id><snippet>scripttag = soup.head.findAll("script")[1]
javascriptdata = scripttag.contents[0]
</snippet></ROW><ROW><id>4914927</id><snippet>partition('=')[2]</snippet></ROW><ROW><id>4914927</id><snippet>strip(' \n"')</snippet></ROW><ROW><id>4914927</id><snippet>"</snippet></ROW><ROW><id>4914927</id><snippet>replace("\\n","\n")</snippet></ROW><ROW><id>4914927</id><snippet>data.replace(...</snippet></ROW><ROW><id>4914927</id><snippet>StringIO</snippet></ROW><ROW><id>4914927</id><snippet>for line in data.splitlines():
    row = line.split(",")
</snippet></ROW><ROW><id>4914983</id><snippet>class Frame</snippet></ROW><ROW><id>4914983</id><snippet>Frame</snippet></ROW><ROW><id>4914983</id><snippet>grid</snippet></ROW><ROW><id>4914983</id><snippet>class Animation</snippet></ROW><ROW><id>4914983</id><snippet>frames</snippet></ROW><ROW><id>4914983</id><snippet>myAnimation.frames[10].grid[2][3] = 'f'
</snippet></ROW><ROW><id>4914983</id><snippet>doctest</snippet></ROW><ROW><id>4914983</id><snippet>import string

class Frame(object):
    """This is a single frame in an animation."""
    def __init__(self, fill=None, color=None):
        """Initializes the frame.

        &gt;&gt;&gt; f = Frame()
        &gt;&gt;&gt; f.print()
        aaaa
        aaaa
        aaaa
        aaaa
        &gt;&gt;&gt; g = Frame(fill='c', color=(0, 255, 0))
        &gt;&gt;&gt; g.print()
        cccc
        cccc
        cccc
        cccc
        """
        if fill is None:
            fill = 'a' # Or whatever default you want
        self.letterGrid = []
        for row in range(4):
            self.letterGrid.append([fill for col in range(4)])

        if color is None:
            color = (0, 0, 0)
        self.colorGrid = []
        for row in range(4):
            self.letterGrid.append([fill for col in range(4)])

    def set_grid(self, row, col, letter=None, color=None):
        """Sets the letter and/or color at the given grid.

        &gt;&gt;&gt; f.set_grid(1, 1, 'b', (255, 0, 0))
        &gt;&gt;&gt; f.print()
        aaaa
        abaa
        aaaa
        aaaa
        &gt;&gt;&gt; f.set_grid(1, 3, letter='x')
        &gt;&gt;&gt; f.print()
        aaaa
        abax
        aaaa
        aaaa
        &gt;&gt;&gt; f.set_grid(3, 3, color=(255, 0, 0))
        """
        if letter is not None:
            self.letterGrid[row][col] = letter
        if color is not None:
            self.colorGrid[row][col] = color

    def position(row, col):
        return (row * 16, col * 16)

    def print(self):
        """Simple routine to print a frame as text."""
        for row in self.letterGrid:
            print(''.join(row))

class Animation(object):
    def __init__(self, frames=None):
        """Initializes an animation."""
        self.frames = frames or []
</snippet></ROW><ROW><id>4915001</id><snippet>pip freeze -E lepoc &gt; requirements.txt
pip install -E newve -r /path/to/pip-requirements.txt
</snippet></ROW><ROW><id>4915277</id><snippet>    self.maintimer = gobject.timeout_add_seconds(1, self.sendMessages)
</snippet></ROW><ROW><id>4915277</id><snippet>    self.maintimer = QtCore.QTimer(self);
    self.connect(self.maintimer, QtCore.SIGNAL('timeout()'), self.sendMessages)
    self.maintimer.start(1000)
</snippet></ROW><ROW><id>4915277</id><snippet>gobject.timeout_add_seconds</snippet></ROW><ROW><id>4915316</id><snippet>class ItemAdmin(VersionAdmin, ModerationAdmin):
    pass
</snippet></ROW><ROW><id>4915338</id><snippet>Content-Type: text/html; charset=utf-8
</snippet></ROW><ROW><id>4915359</id><snippet>struct</snippet></ROW><ROW><id>4915359</id><snippet>import struct

fieldwidths = (2, -10, 24)  # negative widths represent ignored padding fields
fmtstring = ' '.join('{}{}'.format(abs(fw), 'x' if fw &lt; 0 else 's')
                        for fw in fieldwidths)
fieldstruct = struct.Struct(fmtstring)
parse = fieldstruct.unpack_from
print('fmtstring: {!r}, recsize: {} chars'.format(fmtstring, fieldstruct.size))

line = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789\n'
fields = parse(line)
print('fields: {}'.format(fields))
</snippet></ROW><ROW><id>4915359</id><snippet>fmtstring: '2s 10x 24s', recsize: 36 chars
fields: ('AB', 'MNOPQRSTUVWXYZ0123456789')
</snippet></ROW><ROW><id>4915359</id><snippet>import sys

fieldstruct = struct.Struct(fmtstring)
if sys.version_info[0] &lt; 3:
    parse = fieldstruct.unpack_from
else:
    # converts unicode input to byte string and results back to unicode string
    unpack = fieldstruct.unpack_from
    parse = lambda line: tuple(s.decode() for s in unpack(line.encode()))
</snippet></ROW><ROW><id>4915359</id><snippet>struct</snippet></ROW><ROW><id>4915359</id><snippet>from itertools import izip_longest
try:
    from itertools import accumulate  # added in Py 3.2
except ImportError:
    def accumulate(iterable):
        'Return running totals (simplified version).'
        total = next(iterable)
        yield total
        for value in iterable:
            total += value
            yield total

def make_parser(fieldwidths):
    cuts = tuple(cut for cut in accumulate(abs(fw) for fw in fieldwidths))
    pads = tuple(fw &lt; 0 for fw in fieldwidths)  # True values for padding fields
    flds = tuple(izip_longest(pads, (0,)+cuts, cuts))[:-1]
    parse = lambda line: tuple(line[i:j] for pad, i, j in flds if not pad)
    # optional informational function attributes
    parse.size = sum(abs(fw) for fw in fieldwidths)
    parse.fmtstring = ' '.join('{}{}'.format(abs(fw), 'x' if fw &lt; 0 else 's')
                                                for fw in fieldwidths)
    return parse

line = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789\n'
fieldwidths = (2, -10, 24)  # negative widths represent ignored padding fields
parse = make_parser(fieldwidths)
fields = parse(line)
print('format: {!r}, rec size: {} chars'.format(parse.fmtstring, parse.size))
print('fields: {}'.format(fields))
</snippet></ROW><ROW><id>4915359</id><snippet>format: '2s 10x 24s', rec size: 36 chars
fields: ('AB', 'MNOPQRSTUVWXYZ0123456789')
</snippet></ROW><ROW><id>4915366</id><snippet>raw_input()</snippet></ROW><ROW><id>4915366</id><snippet>input()</snippet></ROW><ROW><id>4915366</id><snippet>raw_input()</snippet></ROW><ROW><id>4915366</id><snippet>input()</snippet></ROW><ROW><id>4915366</id><snippet>input()</snippet></ROW><ROW><id>4915366</id><snippet>eval(input())</snippet></ROW><ROW><id>4915498</id><snippet>File "C:\Python27\lib\SocketServer.py"
</snippet></ROW><ROW><id>4915665</id><snippet>$</snippet></ROW><ROW><id>4915665</id><snippet>^</snippet></ROW><ROW><id>4915665</id><snippet>urlpatterns = patterns('',
    (r'^', include('realestate.properties.urls')),
    (r'^admin/', include(admin.site.urls)),
)
</snippet></ROW><ROW><id>4915964</id><snippet>in</snippet></ROW><ROW><id>4915964</id><snippet>remove</snippet></ROW><ROW><id>4915964</id><snippet>if thing in some_list: some_list.remove(thing)
</snippet></ROW><ROW><id>4915964</id><snippet>try:
    some_list.remove(thing)
except ValueError:
    pass # or scream: thing not in some_list!
except AttributeError:
    pass # call security, some_list not quacking like a list!
</snippet></ROW><ROW><id>4915964</id><snippet>lambda</snippet></ROW><ROW><id>4915964</id><snippet>reduce()</snippet></ROW><ROW><id>4915964</id><snippet>filter()</snippet></ROW><ROW><id>4915964</id><snippet>map()</snippet></ROW><ROW><id>4915964</id><snippet>filter</snippet></ROW><ROW><id>4915964</id><snippet>is_not_thing = lambda x: x is not thing
cleaned_list = filter(is_not_thing, some_list)
</snippet></ROW><ROW><id>4915964</id><snippet>bool(item) == False</snippet></ROW><ROW><id>4915964</id><snippet>None</snippet></ROW><ROW><id>4915964</id><snippet>cleaned_list = filter(None, some_list)
</snippet></ROW><ROW><id>4915964</id><snippet>filter(function, iterable)</snippet></ROW><ROW><id>4915964</id><snippet>[item for item in iterable if function(item)]</snippet></ROW><ROW><id>4915964</id><snippet>[item for item in iterable if item]</snippet></ROW><ROW><id>4915964</id><snippet>None</snippet></ROW><ROW><id>4915964</id><snippet>(item for item in iterable if function(item))</snippet></ROW><ROW><id>4915964</id><snippet>filter()</snippet></ROW><ROW><id>4915964</id><snippet>list()</snippet></ROW><ROW><id>4915964</id><snippet>filter</snippet></ROW><ROW><id>4915964</id><snippet>map</snippet></ROW><ROW><id>4915964</id><snippet>reduce</snippet></ROW><ROW><id>4915964</id><snippet>reduce</snippet></ROW><ROW><id>4915964</id><snippet>map()</snippet></ROW><ROW><id>4915964</id><snippet>filter()</snippet></ROW><ROW><id>4915964</id><snippet>cleaned_list = [ x for x in some_list if x is not thing ]
</snippet></ROW><ROW><id>4915964</id><snippet>for item in (x for x in some_list if x is not thing):
    do_your_thing_with(item)
</snippet></ROW><ROW><id>4916247</id><snippet>r' = ((100 - x) * r + x * 255) / 100
g' = ((100 - x) * g + x * 255) / 100
b' = ((100 - x) * b + x * 255) / 100
</snippet></ROW><ROW><id>4916587</id><snippet>from django.db.models import Count
statuses = Status.objects.all().annotate(Count('task'))
</snippet></ROW><ROW><id>4916587</id><snippet>statuses</snippet></ROW><ROW><id>4916587</id><snippet>task__count</snippet></ROW><ROW><id>4916614</id><snippet>script.py</snippet></ROW><ROW><id>4916614</id><snippet>app = Flask(__name__)
app.config.from_object(__name__)

@app.route('/')
def index():
  return render_template('index.html', message = 'Hello')

if __name__ == '__main__':
  app.run(host = '0.0.0.0')
</snippet></ROW><ROW><id>4916614</id><snippet>index.html</snippet></ROW><ROW><id>4916614</id><snippet>&lt;!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN"  http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd"&gt; 
&lt;html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en"&gt; 
  &lt;head&gt;
    &lt;title&gt;Test&lt;/title&gt;
  &lt;/head&gt;

  &lt;body&gt;
  {% if message != 'nope' %}
    {{ message }}
  {% endif %}
  &lt;/body&gt;
&lt;/html&gt;
</snippet></ROW><ROW><id>4916662</id><snippet>for taglist in tag_query:
  for tag in sorted(taglist.article_tags):
    #...
</snippet></ROW><ROW><id>4916662</id><snippet>taglist.article_tags.sort()</snippet></ROW><ROW><id>4916828</id><snippet>app.yaml</snippet></ROW><ROW><id>4916828</id><snippet>main</snippet></ROW><ROW><id>4916828</id><snippet>main</snippet></ROW><ROW><id>4916828</id><snippet>main</snippet></ROW><ROW><id>4916828</id><snippet>if __name__ == "__main__":</snippet></ROW><ROW><id>4916828</id><snippet>main</snippet></ROW><ROW><id>4916828</id><snippet>main</snippet></ROW><ROW><id>4916828</id><snippet>if</snippet></ROW><ROW><id>4917011</id><snippet>setup_all()
create_all()
</snippet></ROW><ROW><id>4917044</id><snippet>json</snippet></ROW><ROW><id>4917044</id><snippet>simplejson</snippet></ROW><ROW><id>4917044</id><snippet>import json    # or `import simplejson as json` if on Python &lt; 2.6

json_string = u'{ "id":"123456789", ... }'
obj = json.loads(json_string)    # obj now contains a dict of the data
</snippet></ROW><ROW><id>4917140</id><snippet>GetWeekOfYear</snippet></ROW><ROW><id>4917140</id><snippet>isocalendar</snippet></ROW><ROW><id>4917140</id><snippet>GetWeekOfYear</snippet></ROW><ROW><id>4917140</id><snippet>GetWeekOfYear</snippet></ROW><ROW><id>4917140</id><snippet>GetWeekOfYear</snippet></ROW><ROW><id>4917140</id><snippet>day &lt; 4</snippet></ROW><ROW><id>4917140</id><snippet>day == 1 or day == 2 ...</snippet></ROW><ROW><id>4917140</id><snippet>isocalendar</snippet></ROW><ROW><id>4917140</id><snippet>GetWeekOfYear</snippet></ROW><ROW><id>4917318</id><snippet>class Foo(models.Model):
    pass


class Bar(models.Model):
    foo = models.ForeignKey(Foo)
</snippet></ROW><ROW><id>4917318</id><snippet>Bar</snippet></ROW><ROW><id>4917318</id><snippet>Foo</snippet></ROW><ROW><id>4917318</id><snippet>Foo</snippet></ROW><ROW><id>4917318</id><snippet>Bar</snippet></ROW><ROW><id>4917318</id><snippet>ForeignKey</snippet></ROW><ROW><id>4917318</id><snippet>self.save_model(request, new_object, form, change=False)
form.save_m2m()
for formset in formsets:
    self.save_formset(request, form, formset, change=False)
</snippet></ROW><ROW><id>4917318</id><snippet>Foo</snippet></ROW><ROW><id>4917318</id><snippet>save</snippet></ROW><ROW><id>4917318</id><snippet>Bar</snippet></ROW><ROW><id>4917318</id><snippet>post_save</snippet></ROW><ROW><id>4917318</id><snippet>Bar</snippet></ROW><ROW><id>4917318</id><snippet>Foo</snippet></ROW><ROW><id>4917469</id><snippet>ZipFile.extract</snippet></ROW><ROW><id>4917469</id><snippet>import os
import shutil
import zipfile

my_dir = r"D:\Download"
my_zip = r"D:\Download\my_file.zip"

with zipfile.ZipFile(my_zip) as zip_file:
    for member in zip_file.namelist():
        filename = os.path.basename(member)
        # skip directories
        if not filename:
            continue

        # copy file (taken from zipfile's extract)
        source = zip_file.open(member)
        target = file(os.path.join(my_dir, filename), "wb")
        with source, target:
            shutil.copyfileobj(source, target)
</snippet></ROW><ROW><id>4917687</id><snippet>load_module</snippet></ROW><ROW><id>4918234</id><snippet>readlines()</snippet></ROW><ROW><id>4918234</id><snippet>maxlines = 100
lines = f.readlines()

if maxlines &gt; len(lines):  maxlines = len(lines)

for i in xrange(maxlines):
  line = lines[i]

  # Do your stuff...
</snippet></ROW><ROW><id>4918234</id><snippet>float()</snippet></ROW><ROW><id>4918234</id><snippet>print '9000' == 9000 # False.
print int('9000') == 9000 # True
</snippet></ROW><ROW><id>4918234</id><snippet>int()</snippet></ROW><ROW><id>4918234</id><snippet>fdata.append(data))</snippet></ROW><ROW><id>4918234</id><snippet>fdata.append(int(data()</snippet></ROW><ROW><id>4918234</id><snippet>for element in data:
  element = int(element)
</snippet></ROW><ROW><id>4918234</id><snippet>for i in xrange(1, len(data)): # I used 1 because 0 is the first element. This skips it.
  data[i] = int(data[i])
</snippet></ROW><ROW><id>4918310</id><snippet>from pyramid.security import has_permission
has_permission('view', someresource, request)
</snippet></ROW><ROW><id>4918413</id><snippet>$''</snippet></ROW><ROW><id>4918413</id><snippet>google youtube post ~/videos/cat-falls-down-stairs.avi Comedy \
    --tags 'currency of the internet' \
    --summary $'Poor whiskers takes a tumble.\nShe'\''s fine, though, don'\''t worry.'
</snippet></ROW><ROW><id>4918435</id><snippet>a[:] = [x - 13 for x in a]
</snippet></ROW><ROW><id>4918463</id><snippet>os.listdir()</snippet></ROW><ROW><id>4918463</id><snippet>os.walk()</snippet></ROW><ROW><id>4918619</id><snippet>(;|$)</snippet></ROW><ROW><id>4918619</id><snippet>(?:;|$)</snippet></ROW><ROW><id>4918812</id><snippet>(function($) {
// Note that this function works only for one widget per page
$('#state').change(function(){
    $('#city').load('/cities_by_state/', {id: this.value}); // the endpoint returns HTML
});
})(JQuery||django.JQuery);
</snippet></ROW><ROW><id>4919154</id><snippet>isinstance</snippet></ROW><ROW><id>4919154</id><snippet>if isinstance(var, int):
  print "Int"
elif isinstance(var, str):
  print "Str"
else:
  print "Other:", type(var)
</snippet></ROW><ROW><id>4919483</id><snippet>from Xlib.display import Display
from Xlib.Xatom import WINDOW
display = Display()
root = display.screen().root
active_id = root.get_full_property(_NET_ACTIVE_WINDOW, WINDOW).value[0]
window = display.create_resource_object('window', active_id)
title = window.get_full_property(_NET_WM_NAME, UTF8_STRING).value
</snippet></ROW><ROW><id>4919734</id><snippet>import os
import csv

for filename in os.listdir(path):
    with open(os.path.join(path, filename), 'r') as f:
        for row in csv.reader(f):
            cells = [ cell.replace('www', 'vvv').replace('..', '--')
                      for cell in row ]
            # now you have a list of cells within one row
            # with all strings modified.
</snippet></ROW><ROW><id>4919734</id><snippet>sed</snippet></ROW><ROW><id>4919734</id><snippet>sed -i 's/www/vvv/g' yourPath/*csv
sed -i 's/\.\./,,/g' yourPath/*csv
</snippet></ROW><ROW><id>4919971</id><snippet>if color.startswith("grey") and color[4:].isdigit():
    return int(color[4:])
else:
    return 'pass'
</snippet></ROW><ROW><id>4919971</id><snippet>color[4:]</snippet></ROW><ROW><id>4920555</id><snippet>*</snippet></ROW><ROW><id>4920555</id><snippet>*.*</snippet></ROW><ROW><id>4921156</id><snippet>continue</snippet></ROW><ROW><id>4921156</id><snippet>break</snippet></ROW><ROW><id>4921156</id><snippet>break</snippet></ROW><ROW><id>4921156</id><snippet>continue</snippet></ROW><ROW><id>4921250</id><snippet>"/home/my_username/mytemplates", # Change this to your own directory.
</snippet></ROW><ROW><id>4921250</id><snippet>settings.py</snippet></ROW><ROW><id>4921250</id><snippet>TEMPLATE_DIRS = (
     "/home/my_username/mytemplates", # Change this to your own directory. )
</snippet></ROW><ROW><id>4921329</id><snippet>class ProcessExceptionMiddleware(object):
    def process_exception(self, request, exception):
        t = Template("500 Error: {{ exception }}")
        response_html = t.render(Context({'exception' : exception }))

        response = http.HttpResponse(response_html)
        response.status_code = 500
        return response
</snippet></ROW><ROW><id>4921425</id><snippet>import re
KEYVAL = re.compile(r"([A-Z])\s*\((\d+)\)")

def max_item(row):
    return max((int(v),k) for k,v in KEYVAL.findall(row))[1]

def max_item_lines(fh):
    for row in fh:
        yield "%s\n" % max_item(row)

def process_file(infilename, outfilename):
    infile = open(infilename)
    max_items = max_item_lines(infile)
    outfile = open(outfilename, "w")
    outfile.writelines(max_items)
    outfile.close()

if __name__ == '__main__':
    import sys
    infilename, outfilename = sys.argv[1:]
    process_file(infilename, outfilename)</snippet></ROW><ROW><id>4921425</id><snippet>&gt;&gt;&gt; max_item("A (8) C (4) G (48419) T (2)")
'G'
</snippet></ROW><ROW><id>4921425</id><snippet>&gt;&gt;&gt; process_file("inputfile.txt", "outputfile.txt")
</snippet></ROW><ROW><id>4921425</id><snippet>&gt;&gt;&gt; map(max_item, open("inputfile.txt"))
</snippet></ROW><ROW><id>4921527</id><snippet>    Page.query.get(page_id).query.delete()
</snippet></ROW><ROW><id>4921527</id><snippet>query</snippet></ROW><ROW><id>4921527</id><snippet>    db.session.delete(page)
</snippet></ROW><ROW><id>4922115</id><snippet>import</snippet></ROW><ROW><id>4922272</id><snippet>grid = [ ['-'] * self.w ] * self.h
</snippet></ROW><ROW><id>4922272</id><snippet>self.h</snippet></ROW><ROW><id>4922272</id><snippet>grid = [ ['-'] * 3 ] * 3 
grid[0][0] = 'X'
print grid
# [['X', '-', '-'], ['X', '-', '-'], ['X', '-', '-']]
</snippet></ROW><ROW><id>4922272</id><snippet>grid = [['-'] * self.w for ignored in xrange(self.h)]
</snippet></ROW><ROW><id>4922479</id><snippet>import pyodbc

filename = 'db.mdb'

connection = pyodbc.connect('DRIVER={Easysoft ODBC-ACCESS}; MDBFILE='+filename)
cursor = conn.cursor()
</snippet></ROW><ROW><id>4922642</id><snippet>PyEval_CallFunction(obj, "iii", a, b, c);
</snippet></ROW><ROW><id>4922642</id><snippet>PyEval_CallObject(obj, Py_BuildValue("iii", a, b, c));
</snippet></ROW><ROW><id>4922642</id><snippet>PyEval_CallFunction</snippet></ROW><ROW><id>4922642</id><snippet>PyEval_CallObject</snippet></ROW><ROW><id>4922642</id><snippet>PyEval_CallObjectWithKeywords</snippet></ROW><ROW><id>4922642</id><snippet>#define PyEval_CallObject(func,arg) \
        PyEval_CallObjectWithKeywords(func, arg, (PyObject *)NULL)
</snippet></ROW><ROW><id>4922757</id><snippet>$ java -jar selenium-server.jar
</snippet></ROW><ROW><id>4922757</id><snippet>from multiprocessing import Process
from django.test import TestCase
from selenium import selenium

class SeleniumFixtureCase(TestCase):
"""
Wrapper to multiprocess localhost server and selenium instance on one
test run.
"""

def setUp(self):
    "Make the selenium connection"
    TestCase.setUp(self)
    self.server = Process(target=serve)
    self.server.start()
    self.verificationErrors = []
    self.selenium = selenium("localhost", 4444, "*firefox",
                             "http://localhost:8000/")
    self.selenium.start()

def tearDown(self):
    "Kill processes"
    TestCase.tearDown(self)
    self.server.terminate()
    self.selenium.stop()
    self.assertEqual([], self.verificationErrors)

def _login(self):
    "Login as Albert Camus"
    self.selenium.open("http://localhost:8000/admin/")
    self.selenium.wait_for_page_to_load("30000")
    self.selenium.type("id_username", "albert")
    self.selenium.type("id_password", "albert")
    self.selenium.click("//input[@value='Log in']")
    self.selenium.wait_for_page_to_load("30000")
</snippet></ROW><ROW><id>4922767</id><snippet>ProxyPass</snippet></ROW><ROW><id>4922881</id><snippet>random.seed(k)</snippet></ROW><ROW><id>4922881</id><snippet>k</snippet></ROW><ROW><id>4922881</id><snippet>import random
print [random.randint(0,255) for i in xrange(5)]
</snippet></ROW><ROW><id>4922881</id><snippet>import random
random.seed(2)
print [random.randint(0,255) for i in xrange(5)]
</snippet></ROW><ROW><id>4922881</id><snippet>[244, 242, 14, 21, 213]</snippet></ROW><ROW><id>4922881</id><snippet>seed</snippet></ROW><ROW><id>4922881</id><snippet>k</snippet></ROW><ROW><id>4922881</id><snippet>bytearr = [ ord(c) for c in f1.read() ]</snippet></ROW><ROW><id>4922881</id><snippet>for c in bytearr:
</snippet></ROW><ROW><id>4922881</id><snippet>c</snippet></ROW><ROW><id>4922881</id><snippet>for i in range(len(bytearr)):
</snippet></ROW><ROW><id>4922881</id><snippet>bytearr[i]</snippet></ROW><ROW><id>4922881</id><snippet>for c in bytearr:
    byt = (c + random.randint(0, 255)) % 256
    f2.write(chr(byt))
</snippet></ROW><ROW><id>4922889</id><snippet>class SuperUser(User):
  type = models.IntegerField(choices=[(0, 'Student'), (1, 'Teacher'), (2, 'Parent')]
  # insert all the data for all 3 seperate classes here

class ProxyStudent(SuperUser):
  class Meta:
    proxy = True

  def special_student_method(self):
    pass


fetch request.user
and make request.user an instance of SuperUser


student = ProxyStudent()
student.__dict__ = request.user.__dict__
</snippet></ROW><ROW><id>4922965</id><snippet>test()</snippet></ROW><ROW><id>4922965</id><snippet>Classical</snippet></ROW><ROW><id>4922965</id><snippet>unbound_method.im_class</snippet></ROW><ROW><id>4923178</id><snippet>webkit2png</snippet></ROW><ROW><id>4923178</id><snippet>main</snippet></ROW><ROW><id>4923178</id><snippet>webkit2png</snippet></ROW><ROW><id>4923178</id><snippet>subprocess</snippet></ROW><ROW><id>4923178</id><snippet>import feedparser
import subprocess

d = feedparser.parse('http://example.com/rss')
link = d.entries[0].link
title = d.entries[0].title

subprocess.call(["webkit2png", link])
</snippet></ROW><ROW><id>4923178</id><snippet>webkit2png.py</snippet></ROW><ROW><id>4923178</id><snippet>subprocess.call</snippet></ROW><ROW><id>4923178</id><snippet>subprocess.call(["python", "webkit2png.py", link])
</snippet></ROW><ROW><id>4923278</id><snippet>from BeautifulSoup import BeautifulSoup

content = "&lt;code class='csharp'&gt;List&lt;Person&gt; persons = new List&lt;Person&gt;();&lt;/code&gt;"

BeautifulSoup.QUOTE_TAGS['code'] = None
soup = BeautifulSoup(str(content))
code_blocks = soup.findAll('code')
</snippet></ROW><ROW><id>4923278</id><snippet>[&lt;code class="csharp"&gt; List&lt;Person&gt; persons = new List&lt;Person&gt;(); &lt;/code&gt;]
</snippet></ROW><ROW><id>4923578</id><snippet>RequestHandler</snippet></ROW><ROW><id>4923578</id><snippet>error</snippet></ROW><ROW><id>4923578</id><snippet>self.error(500)</snippet></ROW><ROW><id>4923578</id><snippet>self.error</snippet></ROW><ROW><id>4923578</id><snippet>error</snippet></ROW><ROW><id>4923796</id><snippet>test = [
    '=?Windows-1251?B?ICLRLcvu5Obo8fLo6iI?=',
    '=?koi8-r?B?5tLPzM/XwSDtwdLJzsEg98nUwczYxdfOwQ?=',
    '=?Windows-1251?B?1PDu6+7i4CDM4PDo7eAgwujy4Ov85eLt4A?='
]

def decodeStr(s):
    s = s.split('?')
    enc = s[1]
    dat = s[3]

    return (dat+'===').decode('base-64').decode(enc)

for t in test:
    print decodeStr(t)
</snippet></ROW><ROW><id>4924003</id><snippet>import sys
print sys.path
</snippet></ROW><ROW><id>4924011</id><snippet>unicode_csv_reader()</snippet></ROW><ROW><id>4924258</id><snippet>class MyObject(object):

    def method(self):
        print "method called on %s" % str(self)

    @property
    def result(self):
        return "Some derived property"

    def common(self, a=None):
        print self

def my_decorator(func):
    def _wrapped(*args, **kwargs):
        print "Calling decorated function %s" % func
        return func(*args, **kwargs)
    return _wrapped


class WrappedObject(object):

    def __init__(self, cls):
        for attr, item in cls.__dict__.items():
            if attr != '__init__' and callable(item):
                setattr(cls, attr, my_decorator(item))
            elif  isinstance(item, property):
                new_property = property(my_decorator(item.__get__), item.__set__, item.__delattr__)
                setattr(cls, attr, new_property)
        self._cls = cls

    def __call__(self, *args, **kwargs):
        return self._cls(*args, **kwargs)

inst = WrappedObject(MyObject)()
</snippet></ROW><ROW><id>4924258</id><snippet>type</snippet></ROW><ROW><id>4924258</id><snippet>class WrappedObject(object):

    def __init__(self, cls):
        dct = cls.__dict__.copy()
        for attr, item in dct.items():
            if attr != '__init__' and callable(item):
                dct[attr] =  my_decorator(item)
            elif  isinstance(item, property):
                new_property = property(my_decorator(item.__get__), item.__set__, item.__delattr__)
                dct[attr] = new_property
        self._cls = type("wrapped_" + cls.__name__, (cls,), dct)

    def __call__(self, *args, **kwargs):
        return self._cls(*args, **kwargs)
</snippet></ROW><ROW><id>4924433</id><snippet>vstack</snippet></ROW><ROW><id>4924433</id><snippet>import numpy as np

def rolling(a, window):
    shape = (a.size - window + 1, window)
    strides = (a.itemsize, a.itemsize)
    return np.lib.stride_tricks.as_strided(a, shape=shape, strides=strides)

a = np.arange(10)
print rolling(a, 3)
</snippet></ROW><ROW><id>4924433</id><snippet>a</snippet></ROW><ROW><id>4924433</id><snippet>window</snippet></ROW><ROW><id>4924433</id><snippet>[[0 1 2]
 [1 2 3]
 [2 3 4]
 [3 4 5]
 [4 5 6]
 [5 6 7]
 [6 7 8]
 [7 8 9]]
</snippet></ROW><ROW><id>4924433</id><snippet>a</snippet></ROW><ROW><id>4924433</id><snippet>a = np.arange(100000)</snippet></ROW><ROW><id>4924433</id><snippet>window=3</snippet></ROW><ROW><id>4924433</id><snippet>%timeit np.vstack([a[i:i-window] for i in xrange(window)]).T
1000 loops, best of 3: 256 us per loop

%timeit rolling(a, window)
100000 loops, best of 3: 12 us per loop
</snippet></ROW><ROW><id>4924433</id><snippet>import numpy as np

def rolling_window(a, window):
   """
   Make an ndarray with a rolling window of the last dimension

   Parameters
   ----------
   a : array_like
       Array to add rolling window to
   window : int
       Size of rolling window

   Returns
   -------
   Array that is a view of the original array with a added dimension
   of size w.

   Examples
   --------
   &gt;&gt;&gt; x=np.arange(10).reshape((2,5))
   &gt;&gt;&gt; rolling_window(x, 3)
   array([[[0, 1, 2], [1, 2, 3], [2, 3, 4]],
          [[5, 6, 7], [6, 7, 8], [7, 8, 9]]])

   Calculate rolling mean of last dimension:
   &gt;&gt;&gt; np.mean(rolling_window(x, 3), -1)
   array([[ 1.,  2.,  3.],
          [ 6.,  7.,  8.]])

   """
   if window &lt; 1:
       raise ValueError, "`window` must be at least 1."
   if window &gt; a.shape[-1]:
       raise ValueError, "`window` is too long."
   shape = a.shape[:-1] + (a.shape[-1] - window + 1, window)
   strides = a.strides + (a.strides[-1],)
   return np.lib.stride_tricks.as_strided(a, shape=shape, strides=strides)
</snippet></ROW><ROW><id>4924433</id><snippet>strides</snippet></ROW><ROW><id>4924433</id><snippet>x.strides</snippet></ROW><ROW><id>4924433</id><snippet>(8,)</snippet></ROW><ROW><id>4924433</id><snippet>x = np.arange(9)
print x.strides
</snippet></ROW><ROW><id>4924433</id><snippet>(3 * 8, 8)</snippet></ROW><ROW><id>4924433</id><snippet>y = x.reshape(3,3)
print y.strides
</snippet></ROW><ROW><id>4924433</id><snippet>print y
y.strides = y.strides[::-1]
print y
</snippet></ROW><ROW><id>4924433</id><snippet>x.strides</snippet></ROW><ROW><id>4924433</id><snippet>x.shape</snippet></ROW><ROW><id>4924433</id><snippet>numpy.lib.as_strided</snippet></ROW><ROW><id>4924433</id><snippet>__array_interface__</snippet></ROW><ROW><id>4924433</id><snippet>(whatever, 3)</snippet></ROW><ROW><id>4924433</id><snippet>3 * x.itemsize</snippet></ROW><ROW><id>4924433</id><snippet>x.shape[0] * x.shape[1]</snippet></ROW><ROW><id>4924433</id><snippet>x.size</snippet></ROW><ROW><id>4924449</id><snippet>app.jinja_env.cache = None
</snippet></ROW><ROW><id>4924528</id><snippet>response</snippet></ROW><ROW><id>4924528</id><snippet>read</snippet></ROW><ROW><id>4924528</id><snippet>data = response.read()
m = re.search('&lt;td&gt;(?P&lt;alt&gt;\d\d*)', data)
m = re.search('&lt;td&gt;(?P&lt;alt&gt;\d\d*)', data)
print m.group('alt')
</snippet></ROW><ROW><id>4924528</id><snippet>search</snippet></ROW><ROW><id>4924671</id><snippet>result = deferred.defer(meeple_tasks.buildGames)
</snippet></ROW><ROW><id>4924671</id><snippet>buildGames()</snippet></ROW><ROW><id>4924671</id><snippet>defer()</snippet></ROW><ROW><id>4925036</id><snippet>from idlelib.PyShell import main
if __name__ == '__main__':
  main()
</snippet></ROW><ROW><id>4925564</id><snippet>f.read()</snippet></ROW><ROW><id>4926030</id><snippet>
import urllib2
import re

html_content = urllib2.urlopen('http://www.domain.com').read()

matches = re.findall('regex of string to find', html_content);

if len(matches) == 0: 
   print 'I did not find anything'
else:
   print 'My string is in the html'
</snippet></ROW><ROW><id>4926186</id><snippet>class LogWrapper:

    def __init__(self, log):
        self.log = log
        self.error = False

    def exception(self, message)
        self.error = True
        self.log.exception(message)
</snippet></ROW><ROW><id>4926381</id><snippet>mimeType,_ = mimetypes.guess_type(filePath)
response = django.http.HttpResponse(mimetype = mimeType)
response['Accept-Ranges'] = 'bytes'
response['X-Sendfile'] = filePath
return response
</snippet></ROW><ROW><id>4926464</id><snippet>&gt;&gt;&gt; foo = """&lt;a href="www.example.com/"&gt;&lt;/a&gt;
... &lt;table class="theclass"&gt;
... &lt;tr&gt;&lt;td&gt;
... &lt;a href="www.example.com/two"&gt;two&lt;/a&gt;
... &lt;/td&gt;&lt;/tr&gt;
... &lt;tr&gt;&lt;td&gt;
... &lt;a href ="www.example.com/three"&gt;three&lt;/a&gt;
... &lt;span&gt;blabla&lt;span&gt;
... &lt;/td&gt;&lt;/td&gt;
... &lt;/table&gt;
... """
&gt;&gt;&gt; import BeautifulSoup as bs
&gt;&gt;&gt; soup = bs.BeautifulSoup(foo)
&gt;&gt;&gt; for table in soup.findAll('table', {'class':'theclass'} ):
...     links=table.findAll('a')
... 
&gt;&gt;&gt; print links
[&lt;a href="www.example.com/two"&gt;two&lt;/a&gt;, &lt;a href="www.example.com/three"&gt;three&lt;/a&gt;]
</snippet></ROW><ROW><id>4926522</id><snippet># tested on 1.2.3  
form = VoteForm(initial={})
form.fields['field_name'].widget = forms.HiddenInput() # make sure you call widget()

form.as_p() # shows new widget
</snippet></ROW><ROW><id>4926655</id><snippet>insert</snippet></ROW><ROW><id>4926655</id><snippet>insert_at_cursor</snippet></ROW><ROW><id>4926655</id><snippet>tview = gtk.TextView()
tview.set_property('editable', False)


# Insert text at the end on the textview.
buffer = tview.get_buffer()
buffer.insert(buffer.get_end_iter(), 'This text goes at the end of the existing text')
</snippet></ROW><ROW><id>4926771</id><snippet>allProducts[index][x]</snippet></ROW><ROW><id>4926771</id><snippet>allProducts[index]</snippet></ROW><ROW><id>4926771</id><snippet>x</snippet></ROW><ROW><id>4926771</id><snippet>allProducts[index]</snippet></ROW><ROW><id>4926771</id><snippet>for x in range(10):
    if index not in allProducts:
        allProducts[index] = {  }    # or dict() if you prefer
    allProducts[index][x] = ...
</snippet></ROW><ROW><id>4926771</id><snippet>allProducts</snippet></ROW><ROW><id>4926771</id><snippet>map(lambda i: allProducts[i] = {  }, searchIndices)
for index in searchIndices:
    # ... rest of loop does not need to be modified
</snippet></ROW><ROW><id>4926793</id><snippet>db.table.column.like('%needle%')</snippet></ROW><ROW><id>4926793</id><snippet>ilike</snippet></ROW><ROW><id>4926793</id><snippet>if '*' in needle or '_' in needle: 
    looking_for = needle.replace('*', '%').replace('?', '_')
else:
    looking_for = '%{0}%'.format(needle)

result = db.table.filter(db.table.column.ilike(looking_for))
</snippet></ROW><ROW><id>4926793</id><snippet>db.table.filter</snippet></ROW><ROW><id>4926793</id><snippet>db.table.collumn</snippet></ROW><ROW><id>4926793</id><snippet>SQLSoup</snippet></ROW><ROW><id>4926793</id><snippet>select(column_list).where(table.c.column.ilike(expr))</snippet></ROW><ROW><id>4926793</id><snippet>Model.query.filter(Model.field.ilike(expr))</snippet></ROW><ROW><id>4927034</id><snippet>%</snippet></ROW><ROW><id>4927034</id><snippet>"%%20space%%20in%%20%d--" % ordnum
</snippet></ROW><ROW><id>4927034</id><snippet>urllib.quote_plus()</snippet></ROW><ROW><id>4927034</id><snippet>urllib.quote_plus(" space in %d--" % ordnum)
</snippet></ROW><ROW><id>4927129</id><snippet>sys.builtin_module_names</snippet></ROW><ROW><id>4927493</id><snippet>Memoized.__cache[self.key] = {args : value}
</snippet></ROW><ROW><id>4927493</id><snippet>import functools

class Memoized(object):
    """Decorator that caches a function's return value each time it is called.
    If called later with the same arguments, the cached value is returned, and
    not re-evaluated.
    """

    cache = {}

    def __init__(self, func):
        self.func = func
        self.key = (func.__module__, func.__name__)
        self.cache[self.key] = {}

    def __call__(self, *args):
      try:
          return Memoized.cache[self.key][args]
      except KeyError:
          value = self.func(*args)
          Memoized.cache[self.key][args] = value
          return value
      except TypeError:
          # uncachable -- for instance, passing a list as an argument.
          # Better to not cache than to blow up entirely.
          return self.func(*args)

    def __get__(self, obj, objtype):
        """Support instance methods."""
        return functools.partial(self.__call__, obj)

    @staticmethod
    def reset():
        Memoized.cache = {}
</snippet></ROW><ROW><id>4927493</id><snippet>__prefix</snippet></ROW><ROW><id>4927493</id><snippet>Memoized</snippet></ROW><ROW><id>4927493</id><snippet>Memoized</snippet></ROW><ROW><id>4927493</id><snippet>import functools
import weakref

class Memoized(object):
    """Decorator that caches a function's return value each time it is called.
    If called later with the same arguments, the cached value is returned, and
    not re-evaluated.

    &gt;&gt;&gt; counter = 0
    &gt;&gt;&gt; @Memoized
    ... def count():
    ...     global counter
    ...     counter += 1
    ...     return counter

    &gt;&gt;&gt; counter = 0
    &gt;&gt;&gt; Memoized.reset()
    &gt;&gt;&gt; count()
    1
    &gt;&gt;&gt; count()
    1
    &gt;&gt;&gt; Memoized.reset()
    &gt;&gt;&gt; count()
    2

    &gt;&gt;&gt; class test(object):
    ...     @Memoized
    ...     def func(self):
    ...         global counter
    ...         counter += 1
    ...         return counter
    &gt;&gt;&gt; testobject = test()
    &gt;&gt;&gt; counter = 0
    &gt;&gt;&gt; testobject.func()
    1
    &gt;&gt;&gt; testobject.func()
    1
    &gt;&gt;&gt; Memoized.reset()
    &gt;&gt;&gt; testobject.func()
    2
    """

    caches = weakref.WeakSet()

    def __init__(self, func):
        self.func = func
        self.cache = {}
        Memoized.caches.add(self)

    def __call__(self, *args):
      try:
          return self.cache[args]
      except KeyError:
          value = self.func(*args)
          self.cache[args] = value
          return value
      except TypeError:
          # uncachable -- for instance, passing a list as an argument.
          # Better to not cache than to blow up entirely.
          return self.func(*args)

    def __get__(self, obj, objtype):
        """Support instance methods."""
        return functools.partial(self.__call__, obj)

    @staticmethod
    def reset():
        for memo in Memoized.caches:
            memo.cache = {}

if __name__ == '__main__':
    import doctest
    doctest.testmod()
</snippet></ROW><ROW><id>4927502</id><snippet>/usr</snippet></ROW><ROW><id>4927502</id><snippet>/usr/local</snippet></ROW><ROW><id>4927502</id><snippet>/usr/lib</snippet></ROW><ROW><id>4927502</id><snippet>/usr/local/lib</snippet></ROW><ROW><id>4927916</id><snippet>model_number = '1.0'</snippet></ROW><ROW><id>4927916</id><snippet>model_name = 'Binary Light Device',
model_description = 'Test Device',
model_number = '1.0'               &lt;-
model_url= project_page)
</snippet></ROW><ROW><id>4928150</id><snippet>pyserial</snippet></ROW><ROW><id>4928150</id><snippet>&gt;&gt;&gt; ser = serial.Serial('/dev/ttyS1', 19200, timeout=1)
&gt;&gt;&gt; x = ser.read()          # read one byte
&gt;&gt;&gt; s = ser.read(10)        # read up to ten bytes (timeout)
&gt;&gt;&gt; line = ser.readline()   # read a '\n' terminated line
&gt;&gt;&gt; ser.close()
</snippet></ROW><ROW><id>4928350</id><snippet>itertools.product</snippet></ROW><ROW><id>4928350</id><snippet>&gt;&gt;&gt; import itertools
&gt;&gt;&gt; ["".join(seq) for seq in itertools.product("01", repeat=2)]
['00', '01', '10', '11']
&gt;&gt;&gt; ["".join(seq) for seq in itertools.product("01", repeat=3)]
['000', '001', '010', '011', '100', '101', '110', '111']
</snippet></ROW><ROW><id>4928476</id><snippet>records = dict((record['_id'], record) for record in cursor)
</snippet></ROW><ROW><id>4928539</id><snippet>"%s %%s %s" % ('foo', 'bar')
</snippet></ROW><ROW><id>4928651</id><snippet>echo testing &gt; test.txt
gzip test.txt
cat test.txt.gz test.txt.gz &gt; test2.txt.gz
zcat test2.txt.gz
# testing
# testing
</snippet></ROW><ROW><id>4928651</id><snippet>_read</snippet></ROW><ROW><id>4928651</id><snippet>reading_second_block</snippet></ROW><ROW><id>4928651</id><snippet>_read_gzip_header</snippet></ROW><ROW><id>4928651</id><snippet>EOFError</snippet></ROW><ROW><id>4928651</id><snippet>IOError</snippet></ROW><ROW><id>4928946</id><snippet>del</snippet></ROW><ROW><id>4928946</id><snippet>del time[0]
</snippet></ROW><ROW><id>4929133</id><snippet>a = sum(e for d in b.itervalues() for e, _ in d)</snippet></ROW><ROW><id>4929133</id><snippet>a = sum([e for d in b.itervalues() for e, _ in d])</snippet></ROW><ROW><id>4929133</id><snippet>a = sum(e for d in b.values() for e, _ in d)</snippet></ROW><ROW><id>4929170</id><snippet>for directory in dirList:
    w.writerow([directory])
</snippet></ROW><ROW><id>4929231</id><snippet>wikilink_rx = re.compile(r'\[\[(?:[^|\]]*\|)?([^\]]+)\]\]')
return wikilink_rx.sub(r'\1', the_string)
</snippet></ROW><ROW><id>4929267</id><snippet>pdb</snippet></ROW><ROW><id>4929267</id><snippet>pdb</snippet></ROW><ROW><id>4929267</id><snippet>pdb myscript.py</snippet></ROW><ROW><id>4929267</id><snippet>python -m pdb myscript.py</snippet></ROW><ROW><id>4929267</id><snippet>pdb</snippet></ROW><ROW><id>4929267</id><snippet>b</snippet></ROW><ROW><id>4929267</id><snippet>c</snippet></ROW><ROW><id>4929267</id><snippet>s</snippet></ROW><ROW><id>4929267</id><snippet>n</snippet></ROW><ROW><id>4929267</id><snippet>l</snippet></ROW><ROW><id>4929267</id><snippet>u</snippet></ROW><ROW><id>4929267</id><snippet>d</snippet></ROW><ROW><id>4929457</id><snippet>py.test</snippet></ROW><ROW><id>4929457</id><snippet>pytest_generate_tests()</snippet></ROW><ROW><id>4929704</id><snippet>def raise_wrapper(wrapped_method=None):
    def method(tmp_instance, *args, **kawrgs):
        raise AttributeError("'%s' object has no attribute '%s'" % (
                type(tmp_instance._parent).__name__, tmp_instance._key))
    if wrapped_method:
        raise_wrapper.__doc__ = wrapped_method.__doc__
    return method


class TemporaryValue(object):
    def __init__(self, parent, key):
        self._parent = parent
        self._key = key

    def __setattr__(self, key, value):
        if key in ('_parent', '_key'):
            return object.__setattr__(self, key, value)

        newval = ObjectLike()
        object.__setattr__(self._parent, self._key, newval)
        return object.__setattr__(newval, key, value)

    __eq__ = raise_wrapper(object.__eq__)
    # __del__ = raise_wrapper()
    # __repr__ = raise_wrapper(object.__repr__)
    __str__ = raise_wrapper(object.__str__)
    __lt__ = raise_wrapper(object.__lt__)
    __le__ = raise_wrapper(object.__le__)
    __eq__ = raise_wrapper(object.__eq__)
    __ne__ = raise_wrapper(object.__ne__)
    __cmp__ = raise_wrapper()
    __hash__ = raise_wrapper(object.__hash__)
    __nonzero__ = raise_wrapper()
    __unicode__ = raise_wrapper()
    __delattr__ = raise_wrapper(object.__delattr__)
    __call__ = raise_wrapper(object.__call__)


class ObjectLike(object):
    def __init__(self):
        pass

    def __getattr__(self, key):
        newtmp = TemporaryValue(self, key)
        object.__setattr__(self, key, newtmp)
        return newtmp

    def __str__(self):
        return str(self.__dict__)


o = ObjectLike()
o.foo.bar = 'baz'
print o.foo.bar
print o.not_set_yet
print o.some_function()
if o.unset &gt; 3: 
    print "yes" 
else:
    print "no" 
</snippet></ROW><ROW><id>4929723</id><snippet>D:\Python26\Lib\site-packages\ipython-0.10-py2.6.egg\share\doc\ipython\manual\html\searchindex.js
</snippet></ROW><ROW><id>4929723</id><snippet>--exclude=searchindex.js
</snippet></ROW><ROW><id>4929749</id><snippet>p = 9
</snippet></ROW><ROW><id>4929749</id><snippet>9</snippet></ROW><ROW><id>4929749</id><snippet>p</snippet></ROW><ROW><id>4929749</id><snippet>p = 3
</snippet></ROW><ROW><id>4929749</id><snippet>3</snippet></ROW><ROW><id>4929749</id><snippet>p</snippet></ROW><ROW><id>4929749</id><snippet>(1a)       9
(1b) p --&gt; 9

(2a) p --&gt; 9
           3
(2b)       9
     p --&gt; 3
</snippet></ROW><ROW><id>4929857</id><snippet>optparse</snippet></ROW><ROW><id>4929857</id><snippet>argparse</snippet></ROW><ROW><id>4929988</id><snippet>shipNamesandNumber</snippet></ROW><ROW><id>4929988</id><snippet>self</snippet></ROW><ROW><id>4929988</id><snippet>__init__()</snippet></ROW><ROW><id>4929988</id><snippet>class Fleet:
  def __init__(self):
    self.shipNamesandNumber = {}
</snippet></ROW><ROW><id>4930118</id><snippet>insert_at_cursor</snippet></ROW><ROW><id>4930118</id><snippet>buff.insert_at_cursor(')')  # This invalidates existing iterators.
mark = buff.get_mark('insert')
iter = buff.get_iter_at_mark(mark)  # New iterator
iter.backward_cursor_positions(1)
buff.place_cursor(iter)
</snippet></ROW><ROW><id>4930482</id><snippet>for i in [float(j) / 100 for j in range(0, 100, 1)]:
    print i
</snippet></ROW><ROW><id>4930502</id><snippet>Ctrl-F #N/A</snippet></ROW><ROW><id>4930867</id><snippet>AGG</snippet></ROW><ROW><id>4930867</id><snippet>show()</snippet></ROW><ROW><id>4930867</id><snippet>TkAgg</snippet></ROW><ROW><id>4930867</id><snippet>WX</snippet></ROW><ROW><id>4930867</id><snippet>QTAgg</snippet></ROW><ROW><id>4930867</id><snippet>QT4Agg</snippet></ROW><ROW><id>4931051</id><snippet>#!/usr/bin/env python

import pytz
import babel.dates

tz = pytz.timezone('America/New_York')
print babel.dates.get_timezone_location(tz)
</snippet></ROW><ROW><id>4931051</id><snippet>$ python tz.py 
United States (New York) Time
</snippet></ROW><ROW><id>4931051</id><snippet>#!/usr/bin/env python

import pytz
import babel.dates
import re

country_timezones = {}
for (country, tzlist) in pytz.country_timezones.iteritems():
    country_name = pytz.country_names[country]
    cities = []
    for timezone in tzlist:
        # remove continent
        city = re.sub(r'^[^/]*/', r'', timezone)
        # Argentina has an extra "Argentina/" on my system (pytz 2010b)
        city = re.sub(country_name + '/', '', city)
        # Indiana and North Dakota have different rules by country
        # change Indiana/Location to Location, Indiana
        city = re.sub(r'^([^/]*)/(.*)', r'\2, \1', city)
        # change underscores to spaces
        city = re.sub(r'_', r' ', city)
        cities.append(city)  
    country_timezones[country_name] = cities

for country in sorted(country_timezones):
    print country
    for city in sorted(country_timezones[country]):
        print "\t%s" % (city)
</snippet></ROW><ROW><id>4931051</id><snippet>Aaland Islands
        Mariehamn
Afghanistan
        Kabul
...
Indonesia
        Jakarta
        Jayapura
        Makassar
        Pontianak
...
United States
        Adak
        Anchorage
        Boise
        Center, North Dakota
        Chicago
        Denver
        Detroit
</snippet></ROW><ROW><id>4931264</id><snippet>org.bluez.Adapter.SetProperty(u'Name', u'New name here')</snippet></ROW><ROW><id>4931264</id><snippet>/org/bluez/&lt;pid&gt;/&lt;device&gt;</snippet></ROW><ROW><id>4931264</id><snippet>org.bluez</snippet></ROW><ROW><id>4931286</id><snippet>for i, question in enumerate(extra):
            self.fields['custom_%s' % i] = forms.CharField(label=question)
</snippet></ROW><ROW><id>4931302</id><snippet>&lt;BLANKLINE&gt;</snippet></ROW><ROW><id>4931302</id><snippet>&gt;&gt;&gt; data_lists=[ {"Average execution" : [1, 2, 3, 2, 3]},
...                              {"Top execution"     : [3, 4, 5, 7, 8, 11, 6]},
...                              {"Current execution" : [1, 2, 1, 2, 1, 5]}       ]
&gt;&gt;&gt; c=Chart(data_lists,
...         ("Large&lt;br&gt;rooster", "Rsync rooster", "Pool&lt;br&gt;Chicken", "Disease"),
...         width=700, height=300)
&gt;&gt;&gt; print c.html.strip()
&lt;div id="placeholder3" style="width:700px;height:300px"&gt;&lt;/div&gt;
&lt;BLANKLINE&gt;
&lt;script id="source" language="javascript" type="text/javascript"&gt;
$(function () {
&lt;BLANKLINE&gt;
var d0 = [[0, 1], [4, 2], [8, 3], [12, 2], [16, 3]];
var d1 = [[1, 3], [5, 4], [9, 5], [13, 7], [17, 8], [21, 11], [25, 6]];
var d2 = [[2, 1], [6, 2], [10, 1], [14, 2], [18, 1], [22, 5]];
&lt;BLANKLINE&gt;
    $.plot($("#placeholder3"), [
&lt;BLANKLINE&gt;
    {   label: "Average execution",  data: d0,   bars: { show: true }  },
    {   label: "Top execution",  data: d1,   bars: { show: true }  },
    {   label: "Current execution",  data: d2,   bars: { show: true }  }
&lt;BLANKLINE&gt;
    ],
    {
        xaxis: { ticks: [[1.5, "Large&lt;br&gt;rooster"], [5.5, "Rsync&lt;br&gt;rooster"], [9.5, "Pool&lt;br&gt;Chicken"], [13.5, "Disease"]] }
    }
    );
});
&lt;/script&gt;
</snippet></ROW><ROW><id>4931577</id><snippet>from __future__ import absolute_import
</snippet></ROW><ROW><id>4931743</id><snippet>queue:
- name: mail-throttle
  rate: 2000/d
  bucket_size: 10
- name: background-processing-throttle
  rate: 5/s
</snippet></ROW><ROW><id>4932473</id><snippet>__str__()</snippet></ROW><ROW><id>4932473</id><snippet>__repr__()</snippet></ROW><ROW><id>4932473</id><snippet>class MC(type):
  def __repr__(self):
    return 'Wahaha!'

class C(object):
  __metaclass__ = MC

print C
</snippet></ROW><ROW><id>4932566</id><snippet>None</snippet></ROW><ROW><id>4932566</id><snippet>__init__</snippet></ROW><ROW><id>4932566</id><snippet>def _get_image(self):
    if not hasattr(self, '_image'):
        self._image = Media.objects.get_for_object(self)
    return self._image

image = property(_get_image)
</snippet></ROW><ROW><id>4932566</id><snippet>@property
def image(self):
    if not hasattr(self, '_image'):
        self._image = Media.objects.get_for_object(self)
    return self._image
</snippet></ROW><ROW><id>4932950</id><snippet>&gt;&gt;&gt; def manytimes(n):
    def decorate(fn):
        for i in range(n):
            fn()
    return decorate

&gt;&gt;&gt; @manytimes(3)
def _():
    print("hello")


hello
hello
hello
</snippet></ROW><ROW><id>4933395</id><snippet>python_version_full := $(wordlist 2,4,$(subst ., ,$(shell python --version 2&gt;&amp;1)))
python_version_major := $(word 1,${python_version_full})
python_version_minor := $(word 2,${python_version_full})
python_version_patch := $(word 3,${python_version_full})

my_cmd.python.2 := python2 some_script.py2
my_cmd.python.3 := python3 some_script.py3
my_cmd := ${my_cmd.python.${python_version_major}}

all :
    @echo ${python_version_full}
    @echo ${python_version_major}
    @echo ${python_version_minor}
    @echo ${python_version_patch}
    @echo ${my_cmd}

.PHONY : all
</snippet></ROW><ROW><id>4933406</id><snippet>types</snippet></ROW><ROW><id>4933406</id><snippet>isinstance()</snippet></ROW><ROW><id>4933406</id><snippet>types.GeneratorType</snippet></ROW><ROW><id>4933406</id><snippet>help(types.CodeType)
</snippet></ROW><ROW><id>4933406</id><snippet>types</snippet></ROW><ROW><id>4933406</id><snippet>BuiltinFunctionType, BuiltinMethodType
DictProxyType
EllipsisType
FrameType
GeneratorType
GetSetDescriptorType
MemberDescriptorType
NoneType
NotImplementedType
TracebackType
</snippet></ROW><ROW><id>4933406</id><snippet>BooleanType                 bool
BufferType                  buffer
ComplexType                 complex
DictType, DictionaryType    dict
FileType                    file
FloatType                   float
IntType                     int
ListType                    list
LongType                    long
ObjectType                  object
SliceType                   slice
TupleType                   tuple
TypeType                    type
StringType                  str
UnicodeType                 unicode
XRangeType                  xrange
</snippet></ROW><ROW><id>4933406</id><snippet>ClassType
CodeType
FunctionType, LambdaType
InstanceType
MethodType, UnboundMethodType
ModuleType
</snippet></ROW><ROW><id>4933406</id><snippet>ClassType</snippet></ROW><ROW><id>4933406</id><snippet>InstanceType</snippet></ROW><ROW><id>4933673</id><snippet>ord()</snippet></ROW><ROW><id>4933673</id><snippet>chr()</snippet></ROW><ROW><id>4933673</id><snippet>unichr()</snippet></ROW><ROW><id>4933933</id><snippet>p_names = (p.name for p in Position.objects.all())
</snippet></ROW><ROW><id>4933933</id><snippet>POS_CHOICES = [(p.id, p.name) for p in Position.objects.all()]
class EmployerForm(forms.Form):
    p_choices = forms.CharField(widget=forms.Select(choices=POS_CHOICES))
</snippet></ROW><ROW><id>4933933</id><snippet>{{form.p_choices}}
</snippet></ROW><ROW><id>4934281</id><snippet>headers = {'User-Agent': user_agent}
</snippet></ROW><ROW><id>4934281</id><snippet>headers = {
    'User-Agent': user_agent,
    'Cookie': '__utma=48024167.372656243.1297092510.1297169678.1297174274.6...'
}
</snippet></ROW><ROW><id>4934738</id><snippet> headerLabel = wx.StaticText(self.scroll, -1, "TestStr %s" % key)
 self.mainSizer.Add(headerLabel)
</snippet></ROW><ROW><id>4934820</id><snippet>&gt;&gt;&gt;import datetime
&gt;&gt;&gt;datetime.datetime.today().day
</snippet></ROW><ROW><id>4934903</id><snippet>build</snippet></ROW><ROW><id>4934903</id><snippet>onFirstPage</snippet></ROW><ROW><id>4934903</id><snippet>onLaterPages</snippet></ROW><ROW><id>4934928</id><snippet>setup.py</snippet></ROW><ROW><id>4934928</id><snippet>make install</snippet></ROW><ROW><id>4934928</id><snippet>.so</snippet></ROW><ROW><id>4934928</id><snippet>PYTHONPATH</snippet></ROW><ROW><id>4934928</id><snippet>export PYTHONPATH=~/path/to/python/extensions:PYTHONPATH
</snippet></ROW><ROW><id>4934928</id><snippet>./configure --prefix=$HOME/.local</snippet></ROW><ROW><id>4934928</id><snippet>site-packages</snippet></ROW><ROW><id>4934928</id><snippet>make install</snippet></ROW><ROW><id>4934928</id><snippet>~/.local/lib/pythonX.Y/site-packages</snippet></ROW><ROW><id>4934928</id><snippet>setup.py</snippet></ROW><ROW><id>4934928</id><snippet>python setup.py install --user
</snippet></ROW><ROW><id>4935087</id><snippet>ALTER DATABASE MyDatabase SET ALLOW_SNAPSHOT_ISOLATION ON

ALTER DATABASE MyDatabase SET READ_COMMITTED_SNAPSHOT ON
</snippet></ROW><ROW><id>4935259</id><snippet>./configure BASECFLAGS=-U_FORTIFY_SOURCE
</snippet></ROW><ROW><id>4935422</id><snippet>import urllib
import time

while True:
   urllib.urlopen(url, post_data)
   time.sleep(60)
</snippet></ROW><ROW><id>4935624</id><snippet>In [18]: print('\xf3'.decode('cp1252'))
ó
</snippet></ROW><ROW><id>4935624</id><snippet>unicode(line)</snippet></ROW><ROW><id>4935624</id><snippet>unicode</snippet></ROW><ROW><id>4935624</id><snippet>line</snippet></ROW><ROW><id>4935624</id><snippet>utf-8</snippet></ROW><ROW><id>4935624</id><snippet>UnicodeDecodeError: 'utf8' codec can't decode...</snippet></ROW><ROW><id>4935624</id><snippet>line</snippet></ROW><ROW><id>4935624</id><snippet>if options.remove_nonascii:
    nERROR = 0
    print _("# Removing all acentuation from coding files in %s") % (options.folder)
    exts = ('.f90', '.f', '.cpp', '.c', '.hpp', '.h', '.py'); files=set()
    for dirpath, dirnames, filenames in os.walk(options.folder):
        for filename in (f for f in filenames if f.endswith(exts)):
            files.add(os.path.join(dirpath,filename))   
    for i,f in enumerate(files):
        os.rename(f,f+'.BACK')
        with open(f,'w') as fout:
            with open(f+'.BACK','r') as fin:
                for line fin:
                    try:
                        try:
                            line=line.decode('cp1252')
                        except UnicodeDecodeError:
                            line=line.decode('utf-8')
                            # If this still raises an UnicodeDecodeError, let the outer
                            # except block handle it
                        newLine = unicodedata.normalize('NFKD',line).encode('ascii','ignore')
                        fout.write(newLine)
                    except UnicodeDecodeError:
                        nERROR +=1
                        print "ERROR n %i - Could not remove from Line: %i" % (nERROR,i)
                        newLine = line
                        fout.write(newLine)
</snippet></ROW><ROW><id>4935624</id><snippet>unicodedata.normalize('NFKD',line).encode('ascii','ignore')
</snippet></ROW><ROW><id>4935624</id><snippet>In [23]: unicodedata.normalize('NFKD',u'ß').encode('ascii','ignore')
Out[23]: ''

In [24]: unicodedata.normalize('NFKD',u'‘’“”').encode('ascii','ignore')
Out[24]: ''
</snippet></ROW><ROW><id>4935624</id><snippet>In [25]: import unidecode
In [28]: print(unidecode.unidecode(u'‘’“”ß'))
''""ss
</snippet></ROW><ROW><id>4935941</id><snippet>import wnck
screen = wnck.screen_get_default()
window_list = screen.get_windows()
active_window = screen.get_active_window()
</snippet></ROW><ROW><id>4936099</id><snippet>fib = lambda n:reduce(lambda x,n:[x[1],x[0]+x[1]], range(n),[0,1])[0]
</snippet></ROW><ROW><id>4936099</id><snippet>&gt;&gt;&gt; fib(1000)
43466557686937456435688527675040625802564660517371780402481729089536555417949051
89040387984007925516929592259308032263477520968962323987332247116164299644090653
3187938298969649928516003704476137795166849228875L
</snippet></ROW><ROW><id>4936190</id><snippet>multiprocessing</snippet></ROW><ROW><id>4936190</id><snippet>multiprocessing</snippet></ROW><ROW><id>4936231</id><snippet>"""foo"""</snippet></ROW><ROW><id>4936231</id><snippet>'''bar'''</snippet></ROW><ROW><id>4936353</id><snippet>from dateutil.relativedelta import relativedelta

A_MONTH = relativedelta(months=1)

month = ItemPrice.objects \
    .filter(date__gte = date - A_MONTH) \
    .filter(date__lt = date) \
    .aggregate(month_average = Avg('price'))
</snippet></ROW><ROW><id>4936353</id><snippet>month</snippet></ROW><ROW><id>4936353</id><snippet>{'month_average': 40}
</snippet></ROW><ROW><id>4936353</id><snippet>month</snippet></ROW><ROW><id>4936353</id><snippet>.aggregate()</snippet></ROW><ROW><id>4936353</id><snippet>dateutil</snippet></ROW><ROW><id>4936827</id><snippet>def binary_values(n):
    fmt = "{0:0"+str((n-1).bit_length())+"b}"
    for i in range(n):
        print fmt.format(i)
</snippet></ROW><ROW><id>4936827</id><snippet>def binary_values(n):
    fmt = ("{0:0"+str((n-1).bit_length())+"b}").format
    for i in range(n):
        print fmt(i)
</snippet></ROW><ROW><id>4937107</id><snippet>def getwrap(my_dict, my_key, default=None):
    if default is None:
        return my_dict[my_key]
    else:
        return my_dict.get(my_key, default)
</snippet></ROW><ROW><id>4937182</id><snippet>groupby</snippet></ROW><ROW><id>4937182</id><snippet>&gt;&gt;&gt; import itertools
&gt;&gt;&gt; numbers = [1, 1, 1, 0, 2, 2, 0, 2, 2, 0, 0, 3, 3, 0, 1, 1, 1, 1, 1, 2, 2, 2]
&gt;&gt;&gt; list(k for k, g in itertools.groupby(numbers))
[1, 0, 2, 0, 2, 0, 3, 0, 1, 2]
</snippet></ROW><ROW><id>4937182</id><snippet>&gt;&gt;&gt; list(k for k, g in itertools.groupby(x for x in numbers if x != 0))
[1, 2, 3, 1, 2]
</snippet></ROW><ROW><id>4937182</id><snippet>groupby</snippet></ROW><ROW><id>4937510</id><snippet>tokenize</snippet></ROW><ROW><id>4937510</id><snippet>generate_tokens</snippet></ROW><ROW><id>4937526</id><snippet>&gt;&gt;&gt; theArray = [['a','b','c'],['d','e','f'],['g','h','i']]
&gt;&gt;&gt; zip(*theArray)
[('a', 'd', 'g'), ('b', 'e', 'h'), ('c', 'f', 'i')]
</snippet></ROW><ROW><id>4937565</id><snippet>def call_a():
    a()

def a():
    pass

call_a()
</snippet></ROW><ROW><id>4937565</id><snippet>a()</snippet></ROW><ROW><id>4937565</id><snippet>call_a()</snippet></ROW><ROW><id>4937565</id><snippet>a</snippet></ROW><ROW><id>4937565</id><snippet>call_a</snippet></ROW><ROW><id>4937565</id><snippet>a()</snippet></ROW><ROW><id>4937565</id><snippet>a</snippet></ROW><ROW><id>4937565</id><snippet>call_a()</snippet></ROW><ROW><id>4937565</id><snippet>call_a</snippet></ROW><ROW><id>4937565</id><snippet>dis.dis</snippet></ROW><ROW><id>4937565</id><snippet>Disassembly of call_a:
  2           0 LOAD_GLOBAL              0 (a)
              3 CALL_FUNCTION            0
              6 POP_TOP
              7 LOAD_CONST               0 (None)
             10 RETURN_VALUE
</snippet></ROW><ROW><id>4937565</id><snippet>call_a</snippet></ROW><ROW><id>4937565</id><snippet>a</snippet></ROW><ROW><id>4937565</id><snippet>None</snippet></ROW><ROW><id>4937565</id><snippet>call_a() is None</snippet></ROW><ROW><id>4937565</id><snippet>True</snippet></ROW><ROW><id>4937642</id><snippet># create two calendars
one = models.Calendar.objects.create(title='calendar one')
two = models.Calendar.objects.create(title='calendar two')

# attach event 1 to both calendars
event = models.Event.objects.create(title='event 1', start_date='2011-11-11')
one.event_set.add(event)
two.event_set.add(event)

# attach event 2 to calendar 2
two.event_set.add(models.Event.objects.create(title='event 2', start_date='2011-11-11'))

# get and print all events from calendar one
events_one = models.Calendar.objects.get(title='calendar one').event_set.all()
print [ event.title for event in events_one ] 
# will print: [u'event 1']

# get and print all events from calendar two
events_two = models.Calendar.objects.get(title='calendar two').event_set.all()
print [ event.title for event in events_two ] 
# will print: [u'event 1', u'event 2']
</snippet></ROW><ROW><id>4937795</id><snippet>[([int(item1 == item2) for item2 in list2], [n for n, item2 in enumerate(list2) if item1 == item2]) for item1 in list1]
</snippet></ROW><ROW><id>4938459</id><snippet>calendar.monthrange</snippet></ROW><ROW><id>4938459</id><snippet>&gt;&gt;&gt; from calendar import monthrange
&gt;&gt;&gt; monthrange(2011, 2)
(1, 28)
</snippet></ROW><ROW><id>4938459</id><snippet>monthrange</snippet></ROW><ROW><id>4938459</id><snippet>&gt;&gt;&gt; from calendar import monthrange
&gt;&gt;&gt; monthrange(2012, 2)
(2, 29)
</snippet></ROW><ROW><id>4938478</id><snippet>itertools</snippet></ROW><ROW><id>4938478</id><snippet>num_pages</snippet></ROW><ROW><id>4938478</id><snippet>.upper()</snippet></ROW><ROW><id>4938478</id><snippet>names = ['Agrajag', 'Colin', 'Deep Thought', 'Ford Prefect' , 'Zaphod Beeblebrox', 'Zarquon']
num_pages = 3

def group_names(names, num_pages):
    letter_groups = defaultdict(list)
    for name in names: letter_groups[name[0].upper()].append(name)
    letter_groups = [letter_groups[key] for key in sorted(letter_groups.keys())]
    current_group = []
    page_groups = []
    group_size = len(names) / num_pages
    for group in letter_groups:
        current_group.extend(group)
        if len(current_group) &gt; group_size:
            page_groups.append(current_group)
            current_group = []
    if current_group: page_groups.append(current_group)

    return page_groups

print group_names(names, num_pages)
</snippet></ROW><ROW><id>4938599</id><snippet>jpeg()</snippet></ROW><ROW><id>4938599</id><snippet>png()</snippet></ROW><ROW><id>4938665</id><snippet>/&lt;projectdir&gt;/templates/admin/base_site.html
</snippet></ROW><ROW><id>4938665</id><snippet>{% block branding %}
&lt;h1 id="site-name"&gt;{% trans 'my cool admin console' %}&lt;/h1&gt;
{% endblock %}
</snippet></ROW><ROW><id>4939113</id><snippet>import signal
import sys

from PyQt4.QtCore import QTimer
from PyQt4.QtGui import QApplication, QMessageBox

# Your code here

def sigint_handler(*args):
    """Handler for the SIGINT signal."""
    sys.stderr.write('\r')
    if QMessageBox.question(None, '', "Are you sure you want to quit?",
                            QMessageBox.Yes | QMessageBox.No,
                            QMessageBox.No) == QMessageBox.Yes:
        QApplication.quit()

if __name__ == "__main__":
    signal.signal(signal.SIGINT, sigint_handler)
    app = QApplication(sys.argv)
    timer = QTimer()
    timer.start(500)  # You may change this if you wish.
    timer.timeout.connect(lambda: None)  # Let the interpreter run each 500 ms.
    # Your code here.
    sys.exit(app.exec_())
</snippet></ROW><ROW><id>4939113</id><snippet>signal.signal(signal.SIGINT, signal.SIG_DFL)</snippet></ROW><ROW><id>4939137</id><snippet>os.environ['PATH_INFO']</snippet></ROW><ROW><id>4939147</id><snippet>[
  {
    "pk": 1, 
    "model": "seo.opportunitymetadatamodel", 
    "fields": {
      "_content_type": [
        "opportunity", 
        "jobopportunity"
      ], 
      "og_description": "", 
      "description": "", 
      "title": "test", 
      "keywords": "", 
      "og_title": "", 
      "heading": ""
    }
  }
]
</snippet></ROW><ROW><id>4939147</id><snippet>82      for d in object_list:
83          # Look up the model and starting build a dict of data for it.
84          Model = _get_model(d["model"])
</snippet></ROW><ROW><id>4939147</id><snippet>object_list</snippet></ROW><ROW><id>4939147</id><snippet>pk, model, field</snippet></ROW><ROW><id>4939147</id><snippet>_get_model(d["model"])</snippet></ROW><ROW><id>4939147</id><snippet>"model"</snippet></ROW><ROW><id>4939147</id><snippet>pk</snippet></ROW><ROW><id>4939147</id><snippet>object_list</snippet></ROW><ROW><id>4939147</id><snippet>object_list</snippet></ROW><ROW><id>4939181</id><snippet>u</snippet></ROW><ROW><id>4939181</id><snippet>print u'I am a Unicode string.'
</snippet></ROW><ROW><id>4939222</id><snippet>#!/usr/bin/python
from tumblr import Api
import sys

BLOG='example.tumblr.com'
USER='example@example.com'
PASSWORD='example'
api = Api(BLOG,USER,PASSWORD)
api.write_photo('http://example.org/somewhere/lolcat.jpg')
</snippet></ROW><ROW><id>4939222</id><snippet>title = "life is amazing" 
body = """
_here my html code_
"""
</snippet></ROW><ROW><id>4939222</id><snippet>api.write_regular(title,body)
</snippet></ROW><ROW><id>4939410</id><snippet>def strip_accents(s):
  return ''.join((c for c in unicodedata.normalize('NFD', s) if unicodedata.category(c) != 'Mn'))
</snippet></ROW><ROW><id>4939429</id><snippet>&gt;&gt;&gt; help(dir)
Help on built-in function dir in module __builtin__:

dir(...)
    dir([object]) -&gt; list of strings

    If called without an argument, return the names in the current scope.
    Else, return an alphabetized list of names comprising (some of) the attributes
    of the given object, and of attributes reachable from it.
    If the object supplies a method named __dir__, it will be used; otherwise
    the default dir() logic is used and returns:
      for a module object: the module's attributes.
      for a class object:  its attributes, and recursively the attributes
        of its bases.
      for any other object: its attributes, its class's attributes, and
        recursively the attributes of its class's base classes.
</snippet></ROW><ROW><id>4939429</id><snippet>dir()</snippet></ROW><ROW><id>4939429</id><snippet>help()</snippet></ROW><ROW><id>4939504</id><snippet>def FormForUser(user):
  class TmpClass(forms.ModelForm):
    def __init__(self, *args, **kwargs):
      super(TmpClass, self).__init__(*args, **kwargs)
      self.fields['group'].queryset = user.group_set.all()

    class Meta:
      model = Project
      fields = ['group', 'another']
</snippet></ROW><ROW><id>4939504</id><snippet>@login_required # Only logged users right?
def create_project(request):
  user = request.user
  form_class = FormForUser(user)
  return create_object(request, form_class=form_class, ..... )
</snippet></ROW><ROW><id>4939685</id><snippet>&gt;&gt;&gt; re.match('^\w+$', '4tg25g_3yg')
&lt;_sre.SRE_Match object at 0x7f8093f198b8&gt;
</snippet></ROW><ROW><id>4939821</id><snippet>Update</snippet></ROW><ROW><id>4939912</id><snippet>order_by()</snippet></ROW><ROW><id>4939912</id><snippet>sort()</snippet></ROW><ROW><id>4940003</id><snippet>def lastF(name):
    """Function that takes a string of the form 
    &lt;FirstName LastName&gt; as a parameter and returns 
    a string of the form &lt;LastName, F.&gt;.
    """
    # If 'name' is empty (empty strings are False), return it.
    if not name:
        return name
    # Split name by spaces and assign the first item of the split to 'first'.
    first = name.split()[0]
    # Split name by spaces and assign the last item of the split to 'last'.
    last = name.split()[-1]
    # Concatenate 'last', ",", the first letter of 'first' and "." and return it.
    return last + ', ' + first[0] + '.'
</snippet></ROW><ROW><id>4940295</id><snippet>action='store_const'</snippet></ROW><ROW><id>4940295</id><snippet>const=&lt;stuff&gt;</snippet></ROW><ROW><id>4940295</id><snippet>add_argument()</snippet></ROW><ROW><id>4940295</id><snippet>set_defaults()</snippet></ROW><ROW><id>4940295</id><snippet>parsed_args</snippet></ROW><ROW><id>4940295</id><snippet>import argparse

def foo(parsed_args):
    print "woop is {0!r}".format(getattr(parsed_args, 'woop'))

def bar(parsed_args):
    print "moop is {0!r}".format(getattr(parsed_args, 'moop'))

parser = argparse.ArgumentParser()

parser.add_argument('--foo', dest='action', action='store_const', const=foo)
parser.add_argument('--bar', dest='action', action='store_const', const=bar)
parser.add_argument('--woop')
parser.add_argument('--moop')

parsed_args = parser.parse_args()
if parsed_args.action is None:
    parser.parse_args(['-h'])
parsed_args.action(parsed_args)
</snippet></ROW><ROW><id>4940295</id><snippet>% python /tmp/junk.py --foo                                           
woop is None
% python /tmp/junk.py --foo --woop 8 --moop 17                        
woop is '8'
% python /tmp/junk.py --bar --woop 8 --moop 17                        
moop is '17'
</snippet></ROW><ROW><id>4940485</id><snippet>pip</snippet></ROW><ROW><id>4940485</id><snippet>pip install -U boto</snippet></ROW><ROW><id>4940485</id><snippet>easy_install</snippet></ROW><ROW><id>4940485</id><snippet>easy_install -U boto</snippet></ROW><ROW><id>4940485</id><snippet>pip</snippet></ROW><ROW><id>4940582</id><snippet>import re
from sre_parse import parse

pattern = r'^page/(?P&lt;slug&gt;[-\w]+)/(?P&lt;page_id&gt;[0-9]+)/$'
regex = re.compile(pattern)
matches = regex.match('page/slug-name/5/')
params = matches.groupdict()
print params
&gt;&gt; {'page_id': '5', 'slug': 'slug-name'}

lookup = dict((v,k) for k, v in regex.groupindex.iteritems())
frags = [chr(i[1]) if i[0] == 'literal' else str(params[lookup[i[1][0]]]) \
    for i in parse(pattern) if i[0] != 'at']
print ''.join(frags)
&gt;&gt; page/slug-name/5/
</snippet></ROW><ROW><id>4940632</id><snippet>months = lambda a, b: abs((a.year - b.year) * 12 + a.month - b.month)
</snippet></ROW><ROW><id>4940632</id><snippet>&gt;&gt;&gt; import datetime
&gt;&gt;&gt; a = datetime.date(2011, 2, 8)
&gt;&gt;&gt; b = datetime.date(2010, 5, 14)
&gt;&gt;&gt; months(a, b)
9
</snippet></ROW><ROW><id>4940632</id><snippet>months = lambda a, b: abs((a.year - b.year) * 12 + a.month - b.month) + int(abs(a.day - b.day) &gt; 15)
</snippet></ROW><ROW><id>4940632</id><snippet>&gt;&gt;&gt; import datetime
&gt;&gt;&gt; a = datetime.date(2011, 2, 8)
&gt;&gt;&gt; b = datetime.date(2010, 5, 14)
&gt;&gt;&gt; months(a, b)
9
&gt;&gt;&gt; b = datetime.date(2010, 5, 30)
&gt;&gt;&gt; months(a, b)
10
</snippet></ROW><ROW><id>4940652</id><snippet>python2.6</snippet></ROW><ROW><id>4940652</id><snippet>python3</snippet></ROW><ROW><id>4940937</id><snippet>html = BeautifulSoup(page)
table = html.find('table', 't1')
links = table.findAll('a')
</snippet></ROW><ROW><id>4941039</id><snippet>try:
    inp = raw_input
except NameError:
    inp = input

def getInt(msg):
    while True:
        try:
            return int(inp(msg))
        except ValueError:
            pass

START, ODD, EVEN = range(3)
state_next = [ODD, EVEN, ODD]
state_str  = ['no zeros yet', 'an odd number of zeros', 'an even number of zeros']

state = START
while True:
    num = getInt('Enter a number (-1 to exit)')

    if num==-1:
        break
    elif num==0:
        state = state_next[state]

    print 'I have seen {0}.'.format(state_str[state])
</snippet></ROW><ROW><id>4941039</id><snippet>try:
    inp = raw_input
except NameError:
    inp = input

START, ODD, EVEN = range(3)
state_next = [ODD, EVEN, ODD]
state_str  = ['no zeros yet', 'an odd number of zeros', 'an even number of zeros']

def reduce_fn(state, ch):
    return state_next[state] if ch=='0' else state

state = reduce(reduce_fn, inp('Enter at own risk: '), START)
print "I have seen " + state_str[state]
</snippet></ROW><ROW><id>4941062</id><snippet>Column('article_text', sqlalchemy.UnicodeText())
</snippet></ROW><ROW><id>4941127</id><snippet>random</snippet></ROW><ROW><id>4941127</id><snippet>random</snippet></ROW><ROW><id>4941301</id><snippet>import gtk

class ScaleImage:
    def __init__(self):
        self.temp_height = 0
        self.temp_width = 0

        window = gtk.Window(gtk.WINDOW_TOPLEVEL)

        image = gtk.Image()
        image.set_from_file('/home/my_test_image.jpg')
        self.pixbuf = image.get_pixbuf()
        image.connect('expose-event', self.on_image_resize, window)    

        box = gtk.ScrolledWindow()
        box.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)
        box.add(image)

        window.add(box)
        window.set_size_request(300, 300)
        window.show_all()        

    def on_image_resize(self, widget, event, window):
        allocation = widget.get_allocation()
        if self.temp_height != allocation.height or self.temp_width != allocation.width:
            self.temp_height = allocation.height
            self.temp_width = allocation.width
            pixbuf = self.pixbuf.scale_simple(allocation.width, allocation.height, gtk.gdk.INTERP_BILINEAR)
            widget.set_from_pixbuf(pixbuf)

    def close_application(self, widget, event, data=None):
        gtk.main_quit()
        return False

if __name__ == "__main__":
    ScaleImage()
    gtk.main()
</snippet></ROW><ROW><id>4941342</id><snippet>test_something1()</snippet></ROW><ROW><id>4941611</id><snippet>tarFile = tarfile.open("/media/%s/backup/%s.tar.bz2" % (drive, dateVar), 'w:bz2')
</snippet></ROW><ROW><id>4941729</id><snippet>sys.excepthook</snippet></ROW><ROW><id>4941729</id><snippet>import sys

def my_excepthook(type, value, tb):
    # you can log the exception to a file here
    print 'In My Exception Handler'

    # the following line does the default (prints it to err)
    sys.__excepthook__(type, value, tb)

sys.excepthook = my_excepthook
</snippet></ROW><ROW><id>4941846</id><snippet>&gt;&gt;&gt; import itertools
&gt;&gt;&gt; itertools.combinations('abcd',2)
&lt;itertools.combinations object at 0x01348F30&gt;
&gt;&gt;&gt; list(itertools.combinations('abcd',2))
[('a', 'b'), ('a', 'c'), ('a', 'd'), ('b', 'c'), ('b', 'd'), ('c', 'd')]
&gt;&gt;&gt; [''.join(x) for x in itertools.combinations('abcd',2)]
['ab', 'ac', 'ad', 'bc', 'bd', 'cd']
</snippet></ROW><ROW><id>4941846</id><snippet>import math

def nCr(n,r):
    f = math.factorial
    return f(n) / f(r) / f(n-r)

if __name__ == '__main__':
    print nCr(4,2)
</snippet></ROW><ROW><id>4941846</id><snippet>6
</snippet></ROW><ROW><id>4941976</id><snippet>class LoggerMiddleware(object):
    '''WSGI middleware'''

    def __init__(self, application):

        self.app = application

    def __call__(self, environ, start_response):

        # write logs

        try:
            return self.app(environ, start_response)
        except Exception, e:
            # write logs
            pass
        finally:
            # write logs
            pass
</snippet></ROW><ROW><id>4941976</id><snippet>from paste.httpserver import serve
from pyramid.response import Response
from pyramid.view import view_config

@view_config()
def hello(request):
    return Response('Hello')

if __name__ == '__main__':
    from pyramid.config import Configurator
    config = Configurator()
    config.scan()
    app = config.make_wsgi_app()

    # Put middleware
    app = LoggerMiddleware(app)

    serve(app, host='0.0.0.0')
</snippet></ROW><ROW><id>4942284</id><snippet>clean()</snippet></ROW><ROW><id>4942284</id><snippet>import datetime

class MyForm(forms.Form):
    date = forms.DateField(...)

    def clean_date(self):
        date = self.cleaned_data['date']
        if date &lt; datetime.date.today():
            raise forms.ValidationError("The date cannot be in the past!")
        return date
</snippet></ROW><ROW><id>4942553</id><snippet>class myParent( object ):
    def __init__( self ):
        self.parentNumber = 5

class Child( myParent ):
    def __init__( self ):
        myParent.__init__( self )
        self.childNumber = 4

    def multiplyNumbers( self ):
        print self.parentNumber * self.childNumber

p = Child()
p.multiplyNumbers()</snippet></ROW><ROW><id>4942553</id><snippet>super</snippet></ROW><ROW><id>4942553</id><snippet>__init__ </snippet></ROW><ROW><id>4942553</id><snippet>__init__</snippet></ROW><ROW><id>4942553</id><snippet>class myParent( object ):
    def __init__( self, customParam ):
        self.parentNumber = 5
        self.customParam = customParam

class Child( myParent ):
    def __init__( self, customParam ):
        myParent.__init__( self, customParam )
        self.childNumber = 4</snippet></ROW><ROW><id>4942553</id><snippet>class myParent( object ):
    def customInit( self, customParam ):
        self.parentNumber = 5
        self.customParam = customParam

class Child( myParent ):
    def __init__( self, customParam ):
        self.childNumber = 4

p = Child()
p.customInit(10)
p.multiplyNumbers()
</snippet></ROW><ROW><id>4942553</id><snippet>__init__</snippet></ROW><ROW><id>4942553</id><snippet>class myParent( object ):
    def __init__( self, parentId ):
        self.id = parentId
        self.children = []

    def createChild( self, name ):
        self.children.append( myChild( name, self ) )

    def getChildren( self ):
        return self.children

class myChild( object ):
    def __init__( self, childId, parent ):
        self.id = childId
        self.parent = parent

    def getParentId( self ):
        return self.parent.id

p = myParent( 'parent01' )
p.createChild( 'child01' )
print p.getChildren()[0].getParentId()</snippet></ROW><ROW><id>4942616</id><snippet>re.compile()</snippet></ROW><ROW><id>4942616</id><snippet>Reference:</snippet></ROW><ROW><id>4942616</id><snippet>refresidue = re.search(r"Reference:\s*(\w)", your_text_to_be_matched).group(1)
</snippet></ROW><ROW><id>4943512</id><snippet>from django.contrib.contenttypes import generic
from django.contrib.contenttypes.models import ContentType

class UserProfileOne(models.Model):
    pass

class UserProfileTwo(models.Model):
    pass


class UserProfile(models.Model):
    content_type    = models.ForeignKey(ContentType)
    object_id       = models.PositiveIntegerField(db_index=True)
    content_object  = generic.GenericForeignKey('content_type', 'object_id')
</snippet></ROW><ROW><id>4943512</id><snippet>UserProfile.objects.create(content_object=any_profile_instance)

User(pk=1).get_profile().content_object.some_special_field
</snippet></ROW><ROW><id>4943542</id><snippet>py2tex.Interpret</snippet></ROW><ROW><id>4943709</id><snippet>char*</snippet></ROW><ROW><id>4944172</id><snippet>retries</snippet></ROW><ROW><id>4944172</id><snippet>complaint</snippet></ROW><ROW><id>4944270</id><snippet>from sqlalchemy import create_engine, Column, Integer, Unicode, ForeignKey
from sqlalchemy.orm import relationship, scoped_session, sessionmaker
from sqlalchemy.orm.collections import attribute_mapped_collection
from sqlalchemy.ext.declarative import declarative_base
from sqlalchemy.ext.associationproxy import association_proxy

# Configure test data SA
engine = create_engine(u'sqlite:///:memory:', echo=False)
session = scoped_session(sessionmaker(bind=engine, autoflush=False))
Base = declarative_base()

class _BaseMixin(object):
    """
    A helper mixin class to set properties on object creation.

    Also provides a convenient default __repr__() function, but be aware that
    also relationships are printed, which might result in loading the relation
    objects from the database
    """
    def __init__(self, **kwargs):
        for k, v in kwargs.items():
            setattr(self, k, v)

    def __repr__(self):
        return "&lt;%s(%s)&gt;" % (self.__class__.__name__,
            ', '.join('%s=%r' % (k, self.__dict__[k])
                      for k in sorted(self.__dict__)
                      if '_' != k[0]
                      #if '_sa_' != k[:4] and '_backref_' != k[:9]
                      )
            )


# relation creator factory functions
def _creator_gr(group, role):
    res = UserGroup(group=group, role=role)
    return res
def _creator_ur(user, role):
    res = UserGroup(user=user, role=role)
    return res

##############################################################################
# Object Model
##############################################################################
class Role(Base, _BaseMixin):
    __tablename__ = 'roles'
    # columns
    id = Column(Integer, primary_key=True, autoincrement=True)
    name = Column(Unicode(16), unique=True)
    # relations
    usergroup = relationship("UserGroup", backref='role')

class User(Base, _BaseMixin):
    __tablename__ = 'users'
    # columns
    id = Column(Integer, primary_key=True, autoincrement=True)
    name = Column(Unicode(16), unique=True)
    # relations
    _rel_usergroup = relationship("UserGroup", collection_class=attribute_mapped_collection('group'),
                                  cascade='all,delete-orphan',
                                  backref='user',
                                  )
    groups = association_proxy('_rel_usergroup', 'role', creator=_creator_gr)

class Group(Base, _BaseMixin):
    __tablename__ = 'groups'
    # columns
    id = Column(Integer, primary_key=True, autoincrement=True)
    name = Column(Unicode(16), unique=True)
    # relations
    _rel_usergroup = relationship("UserGroup", collection_class=attribute_mapped_collection('user'),
                                  cascade='all,delete-orphan',
                                  backref='group',
                                  )
    users = association_proxy('_rel_usergroup', 'role', creator=_creator_ur)

class UserGroup(Base, _BaseMixin):
    __tablename__ = 'user_group'
    # columns
    id = Column(Integer, primary_key=True, autoincrement=True)
    user_id = Column(Integer, ForeignKey('users.id', ondelete='CASCADE'), nullable=False)
    group_id = Column(Integer, ForeignKey('groups.id', ondelete='CASCADE'), nullable=False)
    role_id = Column(Integer, ForeignKey('roles.id', ondelete='CASCADE'), nullable=False)
    # relations
    # (all backrefs)



##############################################################################
# TESTS (showing usages)
#
# Requirements:
#  - list all groups of the user: user.groups (use keys)
#  - list all users of the group: group.users (use keys)
#  - get all users ordered (grouped) by group with the role title
##############################################################################

def _requirement_get_user_groups(user):
    return user.groups.keys()

def _requirement_get_group_users(group):
    return group.users.keys()

def _requirement_get_all_users_by_group_with_role():
    qry = session.query(Group).order_by(Group.name)
    res = []
    for g in qry.all():
        for u, r in sorted(g.users.items()):
            value = (g.name, u.name, r.name)
            res.append(value)
    return res

def _test_all_requirements():
    print '--requirement: all-ordered:'
    for v in _requirement_get_all_users_by_group_with_role():
        print v

    print '--requirement: user-groups:'
    for v in session.query(User).order_by(User.id):
        print v, " has groups: ",  _requirement_get_user_groups(v)

    print '--requirement: group-users:'
    for v in session.query(Group).order_by(Group.id):
        print v, " has users: ",  _requirement_get_group_users(v)

# create db schema
Base.metadata.create_all(engine)

##############################################################################
# CREATE TEST DATA
##############################################################################

# create entities
u_peter = User(name='u_Peter')
u_sonja = User(name='u_Sonja')
g_sales = Group(name='g_Sales')
g_wales = Group(name='g_Wales')
r_super = Role(name='r_Super')
r_minor = Role(name='r_Minor')

# helper functions
def _get_entity(entity, name):
    return session.query(entity).filter_by(name=name).one()
def get_user(name):
    return _get_entity(User, name)
def get_group(name):
    return _get_entity(Group, name)
def _checkpoint():
    session.commit()
    session.expunge_all()
    _test_all_requirements()
    session.expunge_all()
    print '-' * 80


# test: **ADD**
u_peter.groups[g_wales] = r_minor # add
g_wales.users[u_sonja] = r_super # add
g_sales.users[u_peter] = r_minor # add
session.add(g_wales)
#session.add(g_sales)
_checkpoint()

# test: **UPDATE**
u_peter = get_user('u_Peter')
assert u_peter.name == 'u_Peter' and len(u_peter.groups) == 2
assert len(u_peter.groups) == 2
g_wales = get_group('g_Wales')
g_wales.users[u_peter] = r_super # update
_checkpoint()

# test: **DELETE**
u_peter = get_user('u_Peter')
assert u_peter.name == 'u_Peter' and len(u_peter.groups) == 2
g_wales = get_group('g_Wales')
del u_peter.groups[g_wales] # delete
_checkpoint()
</snippet></ROW><ROW><id>4944538</id><snippet>PYTHONPATH</snippet></ROW><ROW><id>4944538</id><snippet>.bashrc</snippet></ROW><ROW><id>4944538</id><snippet>echo</snippet></ROW><ROW><id>4944538</id><snippet>env | grep PYTHONPATH
</snippet></ROW><ROW><id>4944538</id><snippet>export</snippet></ROW><ROW><id>4944538</id><snippet>.bashrc</snippet></ROW><ROW><id>4944834</id><snippet>copy.deepcopy()</snippet></ROW><ROW><id>4944834</id><snippet>copy.deepcopy()</snippet></ROW><ROW><id>4944929</id><snippet>True</snippet></ROW><ROW><id>4944929</id><snippet>if 'blabla' in open('example.txt').read():
    print "true"
</snippet></ROW><ROW><id>4944929</id><snippet>mmap.mmap()</snippet></ROW><ROW><id>4944929</id><snippet>import mmap
f = open('example.txt')
s = mmap.mmap(f.fileno(), 0, access=mmap.ACCESS_READ)
if 'blabla' in s:
    print 'true'
</snippet></ROW><ROW><id>4945007</id><snippet>class MyClassA(object):
    @classmethod
    def hello(cls):
        return "Hello"

    an_attr = AnotherClassB(do_something=hello)
</snippet></ROW><ROW><id>4945007</id><snippet>hello</snippet></ROW><ROW><id>4945007</id><snippet>MyClassA.hello</snippet></ROW><ROW><id>4945007</id><snippet>AnotherClassB</snippet></ROW><ROW><id>4945175</id><snippet>itertools.tee()</snippet></ROW><ROW><id>4945175</id><snippet>walk, walk2 = itertools.tee(walk)
</snippet></ROW><ROW><id>4945558</id><snippet>s = ":dfa:sif:e"
print s[1:]
</snippet></ROW><ROW><id>4945558</id><snippet>dfa:sif:e
</snippet></ROW><ROW><id>4945913</id><snippet>myform.fields['status'].widget.attrs['readonly'] = True # text input
myform.fields['status'].widget.attrs['disabled'] = True # radio / checkbox
</snippet></ROW><ROW><id>4945913</id><snippet>def clean_status(self):
    return self.instance.status
</snippet></ROW><ROW><id>4946141</id><snippet>Scripts.txt</snippet></ROW><ROW><id>4946141</id><snippet># -*- coding: utf-8; -*-

import bisect

script_file = "/path/to/Scripts.txt"
scripts = []

with open(script_file, "rt") as stream:
    for line in stream:
        line = line.split("#", 1)[0].strip()
        if line:
            rng, script = line.split(";", 1)
            elems = rng.split("..", 1)
            start = int(elems[0], 16)
            if len(elems) == 2:
                stop = int(elems[1], 16)
            else:
                stop = start
            scripts.append((start, stop, script.lstrip()))

scripts.sort()
indices = [elem[0] for elem in scripts]

def find_script(char):
    if not isinstance(char, int):
        char = ord(char)
    index = bisect.bisect(indices, char) - 1
    start, stop, script = scripts[index]
    if start &lt;= char &lt;= stop:
        return script
    else:
        return "Unknown"

print find_script(u'A')
print find_script(u'Д')
print find_script(u'ሕ')
print find_script(0x1000)
print find_script(0xE007F)
print find_script(0xE0080)
</snippet></ROW><ROW><id>4946378</id><snippet>reader = [(1, 'a'), (2, 'b')] # Replace it with your CSV reader.

# First, fill a dictionary:
text_dict = {}
for index, text in reader:
    text_dict[index] = text

# Then create a sufficiently large list:
max_index = max(text_dict.iterkeys())
texts = [None] * (max_index + 1)

# And fill it:
for index, text in text_dict.iteritems():
    texts[index] = text

print texts
# prints: [None, 'a', 'b']
print texts[1]
# prints: a
</snippet></ROW><ROW><id>4946897</id><snippet>delta_mL.append([max(deltaL),M])
</snippet></ROW><ROW><id>4946897</id><snippet>delta_mL.append([max(deltaL),list(M)])
</snippet></ROW><ROW><id>4947061</id><snippet>class BeforeAfterSuite(unittest.TestSuite):
    def run(self, result):
        if len(self._tests) &lt; 1:
            return unittest.TestSuite.run(self, result)

        first_test = self._tests[0]
        if "before" in dir(first_test):
            first_test.before()
        result = unittest.TestSuite.run(self, result)
        if "after" in dir(first_test):
            first_test.after()
        return result
</snippet></ROW><ROW><id>4947061</id><snippet>class BeforeAfterLoader(unittest.TestLoader):
    def loadTestsFromTestCase(self, testCaseClass):
        self.suiteClass = BeforeAfterSuite
        suite = unittest.TestLoader.loadTestsFromTestCase(self, testCaseClass)
        self.suiteClass = unittest.TestLoader.suiteClass
        return suite
</snippet></ROW><ROW><id>4947198</id><snippet>LOAD DATA LOCAL INFILE
</snippet></ROW><ROW><id>4947413</id><snippet>forms.CharField(initial=X</snippet></ROW><ROW><id>4947413</id><snippet>{{ document.title.field.initial }}</snippet></ROW><ROW><id>4947413</id><snippet>form = MyForm(initial={...})</snippet></ROW><ROW><id>4947413</id><snippet>BoundField</snippet></ROW><ROW><id>4947413</id><snippet>data = self.form.initial.get(self.name, self.field.initial)</snippet></ROW><ROW><id>4947413</id><snippet>initial</snippet></ROW><ROW><id>4947413</id><snippet>form = MyForm(request.POST)</snippet></ROW><ROW><id>4947413</id><snippet>{{ document.title.data }}</snippet></ROW><ROW><id>4947413</id><snippet>BoundField.value</snippet></ROW><ROW><id>4947453</id><snippet>scipy.ndimage</snippet></ROW><ROW><id>4947453</id><snippet>scipy.ndimage.uniform_filter</snippet></ROW><ROW><id>4947453</id><snippet>scipy.ndimage.convolve</snippet></ROW><ROW><id>4947453</id><snippet>scipy.ndimage</snippet></ROW><ROW><id>4947453</id><snippet>import numpy as np

def rolling_window_lastaxis(a, window):
    """Directly taken from Erik Rigtorp's post to numpy-discussion.
    &lt;http://www.mail-archive.com/numpy-discussion@scipy.org/msg29450.html&gt;"""
    if window &lt; 1:
       raise ValueError, "`window` must be at least 1."
    if window &gt; a.shape[-1]:
       raise ValueError, "`window` is too long."
    shape = a.shape[:-1] + (a.shape[-1] - window + 1, window)
    strides = a.strides + (a.strides[-1],)
    return np.lib.stride_tricks.as_strided(a, shape=shape, strides=strides)

def rolling_window(a, window):
    if not hasattr(window, '__iter__'):
        return rolling_window_lastaxis(a, window)
    for i, win in enumerate(window):
        if win &gt; 1:
            a = a.swapaxes(i, -1)
            a = rolling_window_lastaxis(a, win)
            a = a.swapaxes(-2, i)
    return a

filtsize = (3, 3)
a = np.zeros((10,10), dtype=np.float)
a[5:7,5] = 1

b = rolling_window(a, filtsize)
blurred = b.mean(axis=-1).mean(axis=-1)
</snippet></ROW><ROW><id>4947453</id><snippet>b = rolling_window(a, filtsize)</snippet></ROW><ROW><id>4947453</id><snippet>filtsize = (0,3,0,3)</snippet></ROW><ROW><id>4947453</id><snippet>mean</snippet></ROW><ROW><id>4947453</id><snippet>std</snippet></ROW><ROW><id>4947453</id><snippet>ndimage</snippet></ROW><ROW><id>4947453</id><snippet>blurred = scipy.ndimage.uniform_filter(a, filtsize, output=a)
</snippet></ROW><ROW><id>4947776</id><snippet>&gt;&gt;&gt; l = [1,2,3]
&gt;&gt;&gt; m = l[:]
&gt;&gt;&gt; n = l
&gt;&gt;&gt; l.append(4)
&gt;&gt;&gt; m
[1, 2, 3]
&gt;&gt;&gt; n
[1, 2, 3, 4]
&gt;&gt;&gt; n is l
True
&gt;&gt;&gt; m is l
False
</snippet></ROW><ROW><id>4948131</id><snippet>import ast

class Py2Neko(ast.NodeVisitor):
    def generic_visit(self, node):
        print type(node).__name__
        ast.NodeVisitor.generic_visit(self, node)

    def visit_Name(self, node):
        print 'Name :', node.id

    def visit_Num(self, node):
        print 'Num :', node.__dict__['n']

    def visit_Str(self, node):
        print "Str :", node.s

    def visit_Print(self, node):
        print "Print :"
        ast.NodeVisitor.generic_visit(self, node)

    def visit_Assign(self, node):
        print "Assign :"
        ast.NodeVisitor.generic_visit(self, node)

    def visit_Expr(self, node):
        print "Expr :"
        ast.NodeVisitor.generic_visit(self, node)

if __name__ == '__main__':
    node = ast.parse("a = 1 + 2")

    print ast.dump(node)

    v = Py2Neko()
    v.visit(node)
</snippet></ROW><ROW><id>4948169</id><snippet>root.wm_geometry("")</snippet></ROW><ROW><id>4948320</id><snippet>double NiceNumber (const double Value, const int Round) {
  int    Exponent;
  double Fraction;
  double NiceFraction;

  Exponent = (int) floor(log10(Value));
  Fraction = Value/pow(10, (double)Exponent);

  if (Round) {
    if (Fraction &lt; 1.5) 
      NiceFraction = 1.0;
    else if (Fraction &lt; 3.0)
      NiceFraction = 2.0;
    else if (Fraction &lt; 7.0)
      NiceFraction = 5.0;
    else
      NiceFraction = 10.0;
   }
  else {
    if (Fraction &lt;= 1.0)
      NiceFraction = 1.0;
    else if (Fraction &lt;= 2.0)
      NiceFraction = 2.0;
    else if (Fraction &lt;= 5.0)
      NiceFraction = 5.0;
    else
      NiceFraction = 10.0;
   }

  return NiceFraction*pow(10, (double)Exponent);
 }
</snippet></ROW><ROW><id>4948320</id><snippet>      //Input parameters
  double AxisStart = 26.5;
  double AxisEnd   = 28.3;
  double NumTicks  = 10;

  double AxisWidth;
  double NewAxisStart;
  double NewAxisEnd;
  double NiceRange;
  double NiceTick;

    /* Check for special cases */
  AxisWidth = AxisEnd - AxisStart;
  if (AxisWidth == 0.0) return (0.0);

    /* Compute the new nice range and ticks */
  NiceRange = NiceNumber(AxisEnd - AxisStart, 0);
  NiceTick = NiceNumber(NiceRange/(NumTicks - 1), 1);

    /* Compute the new nice start and end values */
  NewAxisStart = floor(AxisStart/NiceTick)*NiceTick;
  NewAxisEnd = ceil(AxisEnd/NiceTick)*NiceTick;

  AxisStart = NewAxisStart; //26.4
  AxisEnd = NewAxisEnd;     //28.4
</snippet></ROW><ROW><id>4948508</id><snippet>a[:] = [i + 6 for i in a]
</snippet></ROW><ROW><id>4948508</id><snippet>a[:]</snippet></ROW><ROW><id>4948508</id><snippet>a[:] = (i + 6 for i in a)
</snippet></ROW><ROW><id>4948508</id><snippet>a = [i + 6 for i in a]
</snippet></ROW><ROW><id>4948508</id><snippet>list_ass_slice()</snippet></ROW><ROW><id>4948508</id><snippet>v_as_SF = PySequence_Fast(v, "can only assign an iterable");
</snippet></ROW><ROW><id>4948636</id><snippet>prev = None
for line in sorted(open('file')):
  line = line.strip()
  if prev is not None and not line.startswith(prev):
    print prev
  prev = line
if prev is not None:
  print prev
</snippet></ROW><ROW><id>4948636</id><snippet>sort</snippet></ROW><ROW><id>4949650</id><snippet>cookielib.CookieJar</snippet></ROW><ROW><id>4949650</id><snippet>urllib2</snippet></ROW><ROW><id>4949650</id><snippet>while 1</snippet></ROW><ROW><id>4949736</id><snippet>import re
pattern = re.compile('prod/([\d_]+)/x/blah')
query   = "http://www.example.com/blah/prod/4_2343_234/x/blah.html"
result  = pattern.search(query).group(1)
print result
</snippet></ROW><ROW><id>4949867</id><snippet>os.path.join</snippet></ROW><ROW><id>4949867</id><snippet>normpath</snippet></ROW><ROW><id>4950215</id><snippet>__hash__()</snippet></ROW><ROW><id>4950215</id><snippet>__eq__()</snippet></ROW><ROW><id>4950215</id><snippet>__cmp__()</snippet></ROW><ROW><id>4950215</id><snippet>__hash__()</snippet></ROW><ROW><id>4950215</id><snippet>&gt;&gt;&gt; content_type in package_disseminators.keys()
True
</snippet></ROW><ROW><id>4950215</id><snippet>dict.keys()</snippet></ROW><ROW><id>4950215</id><snippet>__contains__</snippet></ROW><ROW><id>4950501</id><snippet>xlrd</snippet></ROW><ROW><id>4950501</id><snippet>xlsxrd</snippet></ROW><ROW><id>4950501</id><snippet>xlsxrd</snippet></ROW><ROW><id>4950605</id><snippet>a = p.search(...)
if a is not None:
    # ...
</snippet></ROW><ROW><id>4950644</id><snippet>a = "/blah/blah/{0}_{1}/blah.html".format(int1, int2)
</snippet></ROW><ROW><id>4950644</id><snippet>a = "/blah/blah/{}_{}/blah.html".format(int1, int2)
</snippet></ROW><ROW><id>4950690</id><snippet>import pdb; pdb.set_trace() 
</snippet></ROW><ROW><id>4950690</id><snippet>-s</snippet></ROW><ROW><id>4950690</id><snippet>stdout</snippet></ROW><ROW><id>4950757</id><snippet>field.label_tag</snippet></ROW><ROW><id>4950757</id><snippet>&lt;label&gt; tag</snippet></ROW><ROW><id>4950757</id><snippet>field.label</snippet></ROW><ROW><id>4950964</id><snippet>findAll</snippet></ROW><ROW><id>4950964</id><snippet>[]</snippet></ROW><ROW><id>4950964</id><snippet>for link in pagelinks:
    do_stuff()  # never executed when findAll returns []
</snippet></ROW><ROW><id>4951010</id><snippet>self.foo = tk.Toplevel(self)</snippet></ROW><ROW><id>4951010</id><snippet>self.foo.destroy()</snippet></ROW><ROW><id>4951010</id><snippet>class Foo(tk.Frame):
    """Foo example""""

    def __init__(self, master=None):
        """Draw Foo GUI"""
        tk.Frame.__init__(self, master)
        self.grid()
        self.draw_window_bar()

    def draw_window_bar(self):
        """Draw bar TopLevel window"""
        self.window_bar = tk.Toplevel(self)
        # Some uber-pythonian code here...
        ask_yes_or_no = messagebox.askyesno('Brian?', 'Romani Ite Domum')
        if not ask_yes_or_no:
            self.window_bar.destroy()
</snippet></ROW><ROW><id>4951010</id><snippet>tk.Frame</snippet></ROW><ROW><id>4951010</id><snippet>self.window_bar</snippet></ROW><ROW><id>4951010</id><snippet>self.window_bar.destroy()</snippet></ROW><ROW><id>4951010</id><snippet>self.window_bar.destroy()</snippet></ROW><ROW><id>4951175</id><snippet>stdout=subprocess.PIPE</snippet></ROW><ROW><id>4951175</id><snippet>p = subprocess.Popen(["ls"], stdout=subprocess.PIPE)
while True:
    line = p.stdout.readline()
    if not line:
        break
    print line
</snippet></ROW><ROW><id>4951175</id><snippet>python superprint.py</snippet></ROW><ROW><id>4951175</id><snippet>import time
import sys
print 10
sys.stdout.flush()
time.sleep(10)
print 20
sys.stdout.flush()
</snippet></ROW><ROW><id>4951175</id><snippet>import subprocess
import sys
p = subprocess.Popen(["python printandwait.py"], shell=True, stdout=subprocess.PIPE)
while True:
    print "Looping"
    line = p.stdout.readline()
    if not line:
        break
    print line.strip()
    sys.stdout.flush()
</snippet></ROW><ROW><id>4951394</id><snippet>django.contrib.auth.urls</snippet></ROW><ROW><id>4951394</id><snippet>login</snippet></ROW><ROW><id>4951394</id><snippet>logout</snippet></ROW><ROW><id>4951394</id><snippet>password_change</snippet></ROW><ROW><id>4951394</id><snippet>password_reset</snippet></ROW><ROW><id>4951394</id><snippet>('^accounts/', include('django.contrib.auth.urls')),
</snippet></ROW><ROW><id>4951950</id><snippet>&gt;&gt;&gt; config = 'H/2'
&gt;&gt;&gt; config == 'H/2' or 'H' or '2H'
True
&gt;&gt;&gt; config == 'H/2' or config == 'H' or config == '2H'
True

&gt;&gt;&gt; config = 'H'
&gt;&gt;&gt; config == 'H/2' or 'H' or '2H'
'H'
&gt;&gt;&gt; config == 'H/2' or config == 'H' or config == '2H'
True

&gt;&gt;&gt; config = 'R'
&gt;&gt;&gt; config == 'H/2' or 'H' or '2H'
'H'
&gt;&gt;&gt; config == 'H/2' or config == 'H' or config == '2H'
False
</snippet></ROW><ROW><id>4952238</id><snippet>PlaintextCorpusReader</snippet></ROW><ROW><id>4952238</id><snippet>__init__</snippet></ROW><ROW><id>4952238</id><snippet>__init__(
    self,
    root,
    fileids,
    word_tokenizer=WordPunctTokenizer(pattern='\\w+|[^\\w\\s]+', gaps=False, disc...,  
    sent_tokenizer=nltk.data.LazyLoader('tokenizers/punkt/english.pickle'),
    para_block_reader=&lt;function read_blankline_block at 0x1836d30&gt;,
    encoding=None
)
</snippet></ROW><ROW><id>4952238</id><snippet>nltk.data.LazyLoader('tokenizers/punkt/english.pickle')</snippet></ROW><ROW><id>4952238</id><snippet>&gt;&gt;&gt; import nltk.data
&gt;&gt;&gt; text = """
... Punkt knows that the periods in Mr. Smith and Johann S. Bach
... do not mark sentence boundaries.  And sometimes sentences
... can start with non-capitalized words.  i is a good variable
... name.
... """
&gt;&gt;&gt; tokenizer = nltk.data.load('tokenizers/punkt/english.pickle')
&gt;&gt;&gt; tokenizer.tokenize(text.strip())
</snippet></ROW><ROW><id>4952261</id><snippet>__main__</snippet></ROW><ROW><id>4952261</id><snippet>pytest2</snippet></ROW><ROW><id>4952261</id><snippet>__main__</snippet></ROW><ROW><id>4952261</id><snippet>pytest2</snippet></ROW><ROW><id>4952261</id><snippet>pytest1</snippet></ROW><ROW><id>4952261</id><snippet>__main__.MyError</snippet></ROW><ROW><id>4952261</id><snippet>pytest1.MyError</snippet></ROW><ROW><id>4952288</id><snippet>tokenize.tokenize(readline)</snippet></ROW><ROW><id>4952288</id><snippet>import tokenize
import io

class _CHAIN(object):

    def __init__(self, execution_context=None):
        self.execution_context = execution_context

    def eat(self, toktype, tokval, rowcol, line, logical_line):        
        #some code and error checking
        print(toktype, tokval, rowcol, line, logical_line)


operations = _CHAIN(None)

readline = io.StringIO('aaaa').readline

#Python 2 way:
#tokenize.tokenize(readline, operations.eat)

#Python 3 way:
for token in tokenize.generate_tokens(readline):
    operations.eat(token[0], token[1], token[2], token[3], token[4])
</snippet></ROW><ROW><id>4952312</id><snippet>def unwrap(fn):
    return fn.__wrapped__

def squared(method):
    def wrapper(x, y):
        return method(x*x, y*y)
    wrapper.__wrapped__ = method
    return wrapper

@squared
def sum(x, y):
    return x+y

sum(2,3)       -&gt;  13
unwrap(sum)(2,3)  -&gt;  5
</snippet></ROW><ROW><id>4952711</id><snippet>file1.seek(0)</snippet></ROW><ROW><id>4952711</id><snippet>loc1 = '/council/council1'
file1 = open(loc1, 'r')
string1 = file1.read()
print string1
</snippet></ROW><ROW><id>4952855</id><snippet>self.game_buttons</snippet></ROW><ROW><id>4952855</id><snippet>__init__</snippet></ROW><ROW><id>4952855</id><snippet>init_game</snippet></ROW><ROW><id>4952855</id><snippet>self.view.update()</snippet></ROW><ROW><id>4952855</id><snippet>winfo_children</snippet></ROW><ROW><id>4952950</id><snippet>repr</snippet></ROW><ROW><id>4952950</id><snippet>type(list(lowerAndMakeSet(c))[2])</snippet></ROW><ROW><id>4953289</id><snippet>pat = re.compile('foo|bar')
if pat.match(mystring):
    # Do whatever
</snippet></ROW><ROW><id>4953289</id><snippet>|</snippet></ROW><ROW><id>4953289</id><snippet>pat = re.compile('(foo|bar)\\.trailingString');
if pat.match(mystring):
    # Do Whatever
</snippet></ROW><ROW><id>4953289</id><snippet>[]</snippet></ROW><ROW><id>4953289</id><snippet>[foo|bar]</snippet></ROW><ROW><id>4953289</id><snippet>()</snippet></ROW><ROW><id>4953415</id><snippet>class 'bytes'</snippet></ROW><ROW><id>4953542</id><snippet>import urllib2

class SmartRedirectHandler(urllib2.HTTPRedirectHandler):
    def http_error_302(self, req, fp, code, msg, headers):
        result = urllib2.HTTPRedirectHandler.http_error_302(self, req, fp,
                                                                 code, msg,
                                                                 headers)
        result.status = code
        result.headers = headers
        return result

request = urllib2.Request("http://wp.me")
opener = urllib2.build_opener(SmartRedirectHandler())
obj = opener.open(request)
print 'The original headers where', obj.headers
print 'The Redirect Code was', obj.status
</snippet></ROW><ROW><id>4953628</id><snippet>from xml.etree.ElementTree import ElementTree
</snippet></ROW><ROW><id>4953769</id><snippet>$ ip route get &lt;ip&gt; | head -1 | awk '{ print $3 }'
</snippet></ROW><ROW><id>4953769</id><snippet>$ ip route get 8.8.8.8 | head -1 | awk '{ print $3 }'
192.168.0.1
</snippet></ROW><ROW><id>4953769</id><snippet>$ ip route get 192.168.0.2 | head -1 | awk '{ print $3 }'
eth0
</snippet></ROW><ROW><id>4953769</id><snippet>ip</snippet></ROW><ROW><id>4953769</id><snippet>tracepath</snippet></ROW><ROW><id>4953769</id><snippet>traceroute</snippet></ROW><ROW><id>4953769</id><snippet>TTL expired</snippet></ROW><ROW><id>4953829</id><snippet>string = "addressing scheme network location path query fragment_identifier".split()
url = urlparse.urlsplit("url")

dictionary = dict(zip(string,url))
</snippet></ROW><ROW><id>4954825</id><snippet>   /proc/net
          various net pseudo-files, all of which give the status of some part of
          the networking layer.  These files contain ASCII structures and  are,
          there‐fore, readable with cat(1).
          However, the standard netstat(8) suite provides much 
          cleaner access to these files.
</snippet></ROW><ROW><id>4955000</id><snippet>ID = int(data_key)
results = db.GqlQuery("SELECT * FROM PatientMeds WHERE patientinfo_ID=:1", ID)
# or
results = db.GqlQuery("SELECT * FROM PatientMeds WHERE patientinfo_ID=:id", id=ID)
</snippet></ROW><ROW><id>4955157</id><snippet>import graph
graph.create
</snippet></ROW><ROW><id>4955430</id><snippet>{% load mytags %}</snippet></ROW><ROW><id>4955430</id><snippet>@register.tag</snippet></ROW><ROW><id>4955430</id><snippet>@register.simple_tag</snippet></ROW><ROW><id>4955517</id><snippet>str.translate()</snippet></ROW><ROW><id>4955517</id><snippet>import string
s = "a\nb\rc\td"
print s.translate(string.maketrans("\n\t\r", "   "))
</snippet></ROW><ROW><id>4955517</id><snippet>a b c d
</snippet></ROW><ROW><id>4955517</id><snippet>translate()</snippet></ROW><ROW><id>4955517</id><snippet>s = "a\nb\rc\td " * 1250000

regex = re.compile(r'[\n\r\t]')
%timeit t = regex.sub(" ", s)
# 1 loops, best of 3: 1.19 s per loop

table = string.maketrans("\n\t\r", "   ")
%timeit s.translate(table)
# 10 loops, best of 3: 29.3 ms per loop
</snippet></ROW><ROW><id>4956374</id><snippet>doc.build(Story, onFirstPage=myFirstPage, onLaterPages=myLaterPages)
</snippet></ROW><ROW><id>4956770</id><snippet>show()</snippet></ROW><ROW><id>4956770</id><snippet>def AddCheckButton(self, button):
    button = gtk.CheckButton("CheckButton")
    self.vBox.pack_start(button, True, True, 1)
    button.show()
    print "adding checkbox..."
</snippet></ROW><ROW><id>4957046</id><snippet>reader</snippet></ROW><ROW><id>4957046</id><snippet>list</snippet></ROW><ROW><id>4957046</id><snippet>&gt;&gt;&gt; reader = csv.reader(open('big.csv', 'rb'))
&gt;&gt;&gt; lines = list(reader)
&gt;&gt;&gt; print lines[:100]
...
</snippet></ROW><ROW><id>4957046</id><snippet>#!/usr/bin/env python

import csv
reader = csv.reader(open('4956984.csv', 'rb'))

chunk, chunksize = [], 100

def process_chunk(chuck):
    print len(chuck)
    # do something useful ...

for i, line in enumerate(reader):
    if (i % chunksize == 0 and i &gt; 0):
        process_chunk(chunk)
        del chunk[:]
    chunk.append(line)

# process the remainder
process_chunk(chunk)
</snippet></ROW><ROW><id>4957046</id><snippet>#!/usr/bin/env python

import csv
reader = csv.reader(open('4956984.csv', 'rb'))

def gen_chunks(reader, chunksize=100):
    """ 
    Chunk generator. Take a CSV `reader` and yield
    `chunksize` sized slices. 
    """
    chunk = []
    for i, line in enumerate(reader):
        if (i % chunksize == 0 and i &gt; 0):
            yield chunk
            del chunk[:]
        chunk.append(line)
    yield chunk

for chunk in gen_chunks(reader):
    print chunk # process chunk

# test gen_chunk on some dummy sequence:
for chunk in gen_chunks(range(10), chunksize=3):
    print chunk # process chunk

# =&gt; yields
# [0, 1, 2]
# [3, 4, 5]
# [6, 7, 8]
# [9]
</snippet></ROW><ROW><id>4957204</id><snippet>new_list = []
for key, value in group.items(): 
    for tariff in value['trf']:
        name = ''.join(ncode, vendor, extra, value['suffix'], tariff)
        new_list.append(name, value['latest_cost'], value['rrp'], value['rb']])
return new_list
</snippet></ROW><ROW><id>4957204</id><snippet>def tariffs(group):
    for key, value in group.items(): 
        for tariff in value['trf']:
            name = ''.join(ncode, vendor, extra, value['suffix'], tariff)
            yield [name, value['latest_cost'], value['rrp'], value['rb']]
</snippet></ROW><ROW><id>4957420</id><snippet>column1</snippet></ROW><ROW><id>4957420</id><snippet>column2</snippet></ROW><ROW><id>4957420</id><snippet>column2</snippet></ROW><ROW><id>4957420</id><snippet>LOAD DATA INFILE 'filename' (column1, @var1)
SET column2 = STR_TO_DATE(@var1, '%d-%m-%Y')
</snippet></ROW><ROW><id>4957420</id><snippet>(column1, @var1)</snippet></ROW><ROW><id>4957420</id><snippet>column1</snippet></ROW><ROW><id>4957420</id><snippet>@var1</snippet></ROW><ROW><id>4957420</id><snippet>SET column2 =</snippet></ROW><ROW><id>4957420</id><snippet>column2</snippet></ROW><ROW><id>4957420</id><snippet>=</snippet></ROW><ROW><id>4957741</id><snippet>import apt

a='1:1.3.10-0.3'
b='1.3.4-1'
vc=apt.VersionCompare(a,b)
if vc &gt; 0:
    print('version a &gt; version b')
elif vc == 0:
    print('version a == version b')
elif vc &lt; 0:
    print('version a &lt; version b')        
</snippet></ROW><ROW><id>4957741</id><snippet>version a &gt; version b
</snippet></ROW><ROW><id>4957741</id><snippet>VersionCompare</snippet></ROW><ROW><id>4957741</id><snippet>python-apt</snippet></ROW><ROW><id>4957741</id><snippet>/usr/share/doc/python-apt/html/apt_pkg/index.html</snippet></ROW><ROW><id>4958232</id><snippet>class LineOfOnesChecker(object):

    _DIAG_INDICES = (lambda i: i, lambda i: -i - 1)

    def __init__(self, matrix):
        self._matrix = matrix
        self._len_range = range(len(self._matrix))

    def has_any(self):
        return self.has_row() or self.has_col() or self.has_diag()

    def has_row(self):
        return any(all(elem == 1 for elem in row)
                   for row in self._matrix)

    def has_col(self):
        return any(all(self._matrix[i][j] == 1 for i in self._len_range)
                   for j in self._len_range)

    def has_diag(self):
        return any(all(self._matrix[transf(i)][i] == 1 for i in self._len_range)
                   for transf in self._DIAG_INDICES)
</snippet></ROW><ROW><id>4958232</id><snippet>print LineOfOnesChecker(matrix).has_any()
</snippet></ROW><ROW><id>4958296</id><snippet>SOUTH_TESTS_MIGRATE = False</snippet></ROW><ROW><id>4958816</id><snippet>def block_process(a, blocksize, filt, args):
    b = numpy.empty(a.shape)
    for row in xrange(0, a.shape[0], blocksize):
        for col in xrange(0, a.shape[1], blocksize):
            b[col:col + blocksize, row:row + blocksize] = (
                filt(a[col:col + blocksize, row:row + blocksize], *args))
    return b
</snippet></ROW><ROW><id>4958816</id><snippet>filter1(a, filtsize)</snippet></ROW><ROW><id>4958816</id><snippet>block_process(a, blocksize, filter1, (filtsize,))
</snippet></ROW><ROW><id>4959254</id><snippet>indexing_suite</snippet></ROW><ROW><id>4959254</id><snippet>std::set</snippet></ROW><ROW><id>4959254</id><snippet>indexing_suite</snippet></ROW><ROW><id>4959254</id><snippet>std::set&lt;std::string&gt;</snippet></ROW><ROW><id>4959254</id><snippet>std::set&lt;std::string&gt;</snippet></ROW><ROW><id>4959254</id><snippet>set</snippet></ROW><ROW><id>4959254</id><snippet>std::vector&lt;std::string&gt;</snippet></ROW><ROW><id>4959254</id><snippet>std::set&lt;std::string&gt;</snippet></ROW><ROW><id>4959254</id><snippet>std::vector&lt;std::string&gt;</snippet></ROW><ROW><id>4959254</id><snippet>set</snippet></ROW><ROW><id>4959798</id><snippet>import struct
"%x:%x:%x:%x:%x:%x" % struct.unpack("BBBBBB",your_variable_with_mac)
</snippet></ROW><ROW><id>4959995</id><snippet>import Tkinter as tk
class GameBoard(tk.Frame):
    def __init__(self, parent, rows=8, columns=8, size=32, color1="white", color2="blue"):
        '''size is the size of a square, in pixels'''

        self.rows = rows
        self.columns = columns
        self.size = size
        self.color1 = color1
        self.color2 = color2
        self.pieces = {}

        canvas_width = columns * size
        canvas_height = rows * size

        tk.Frame.__init__(self, parent)
        self.canvas = tk.Canvas(self, borderwidth=0, highlightthickness=0,
                                width=canvas_width, height=canvas_height, background="bisque")
        self.canvas.pack(side="top", fill="both", expand=True, padx=2, pady=2)

        # this binding will cause a refresh if the user interactively
        # changes the window size
        self.canvas.bind("&lt;Configure&gt;", self.refresh)

    def addpiece(self, name, image, row=0, column=0):
        '''Add a piece to the playing board'''
        self.canvas.create_image(0,0, image=image, tags=(name, "piece"), anchor="c")
        self.placepiece(name, row, column)

    def placepiece(self, name, row, column):
        '''Place a piece at the given row/column'''
        self.pieces[name] = (row, column)
        x0 = (column * self.size) + int(self.size/2)
        y0 = (row * self.size) + int(self.size/2)
        self.canvas.coords(name, x0, y0)

    def refresh(self, event):
        '''Redraw the board, possibly in response to window being resized'''
        xsize = int((event.width-1) / self.columns)
        ysize = int((event.height-1) / self.rows)
        self.size = min(xsize, ysize)
        self.canvas.delete("square")
        color = self.color2
        for row in range(self.rows):
            color = self.color1 if color == self.color2 else self.color2
            for col in range(self.columns):
                x1 = (col * self.size)
                y1 = (row * self.size)
                x2 = x1 + self.size
                y2 = y1 + self.size
                self.canvas.create_rectangle(x1, y1, x2, y2, outline="black", fill=color, tags="square")
                color = self.color1 if color == self.color2 else self.color2
        for name in self.pieces:
            self.placepiece(name, self.pieces[name][0], self.pieces[name][1])
        self.canvas.tag_raise("piece")
        self.canvas.tag_lower("square")


# image comes from the silk icon set which is under a Creative Commons
# license. For more information see http://www.famfamfam.com/lab/icons/silk/
imagedata = '''
    R0lGODlhEAAQAOeSAKx7Fqx8F61/G62CILCJKriIHM+HALKNMNCIANKKANOMALuRK7WOVLWPV9eR
    ANiSANuXAN2ZAN6aAN+bAOCcAOKeANCjKOShANKnK+imAOyrAN6qSNaxPfCwAOKyJOKyJvKyANW0
    R/S1APW2APW3APa4APe5APm7APm8APq8AO28Ke29LO2/LO2/L+7BM+7BNO6+Re7CMu7BOe7DNPHA
    P+/FOO/FO+jGS+/FQO/GO/DHPOjBdfDIPPDJQPDISPDKQPDKRPDIUPHLQ/HLRerMV/HMR/LNSOvH
    fvLOS/rNP/LPTvLOVe/LdfPRUfPRU/PSU/LPaPPTVPPUVfTUVvLPe/LScPTWWfTXW/TXXPTXX/XY
    Xu/SkvXZYPfVdfXaY/TYcfXaZPXaZvbWfvTYe/XbbvHWl/bdaPbeavvadffea/bebvffbfbdfPvb
    e/fgb/Pam/fgcvfgePTbnfbcl/bfivfjdvfjePbemfjelPXeoPjkePbfmvffnvbfofjlgffjkvfh
    nvjio/nnhvfjovjmlvzlmvrmpvrrmfzpp/zqq/vqr/zssvvvp/vvqfvvuPvvuvvwvfzzwP//////
    ////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////
    /////////////////////////////////////////////////////yH+FUNyZWF0ZWQgd2l0aCBU
    aGUgR0lNUAAh+QQBCgD/ACwAAAAAEAAQAAAIzAD/CRxIsKDBfydMlBhxcGAKNIkgPTLUpcPBJIUa
    +VEThswfPDQKokB0yE4aMFiiOPnCJ8PAE20Y6VnTQMsUBkWAjKFyQaCJRYLcmOFipYmRHzV89Kkg
    kESkOme8XHmCREiOGC/2TBAowhGcAyGkKBnCwwKAFnciCAShKA4RAhyK9MAQwIMMOQ8EdhBDKMuN
    BQMEFPigAsoRBQM1BGLjRIiOGSxWBCmToCCMOXSW2HCBo8qWDQcvMMkzCNCbHQga/qMgAYIDBQZU
    yxYYEAA7
'''



if __name__ == "__main__":
    root = tk.Tk()
    board = GameBoard(root)
    board.pack(side="top", fill="both", expand="true", padx=4, pady=4)
    player1 = tk.PhotoImage(data=imagedata)
    board.addpiece("player1", player1, 0,0)
    root.mainloop()
</snippet></ROW><ROW><id>4960009</id><snippet>from xml.dom import minidom

xmldoc = minidom.parse(datasource)   

def get_xmltext(parent, subnode_name):
    node = parent.getElementsByTagName(subnode_name)[0]
    return "".join([ch.toxml() for ch in node.childNodes])

matchingNodes = [node for node in xmldoc.getElementsByTagName("article")
           if get_xmltext(node, "DOI") == '10.1016/B978-0-12-381015-1.00004-6']

for node in matchingNodes:
    print "title:", get_xmltext(node, "title")
    print "abstract:", get_xmltext(node, "abstract")
</snippet></ROW><ROW><id>4960022</id><snippet>options</snippet></ROW><ROW><id>4960022</id><snippet>for groupAMR_arg in groupAMR.option_list:
    print getattr(options, groupAMR_arg.dest)
</snippet></ROW><ROW><id>4960031</id><snippet> /* When we are tracing reference counts, rename Py_InitModule4 so
    modules compiled with incompatible settings will generate a
    link-time error. */
</snippet></ROW><ROW><id>4960070</id><snippet>Sqls = (Sql,Sql_2,Sql_3)
</snippet></ROW><ROW><id>4960070</id><snippet>Sqls = ('Sql','Sql_2','Sql_3')
</snippet></ROW><ROW><id>4960216</id><snippet>raw_input()</snippet></ROW><ROW><id>4960216</id><snippet>input()</snippet></ROW><ROW><id>4960216</id><snippet>testVar = raw_input("Ask user for something.")
</snippet></ROW><ROW><id>4960216</id><snippet>input()</snippet></ROW><ROW><id>4960216</id><snippet>raw_input()</snippet></ROW><ROW><id>4960345</id><snippet>return false</snippet></ROW><ROW><id>4960345</id><snippet>function submitForm() {
    var result = validate(this);

    if ( result === false ) { return false; }
}
</snippet></ROW><ROW><id>4960358</id><snippet>def keyboard(key):
  values = {
    110: discoMode(),
    27: exit()
  }
</snippet></ROW><ROW><id>4960358</id><snippet>def keyboard(key):
  values = {
    110: discoMode,
    27: exit
  }
</snippet></ROW><ROW><id>4960383</id><snippet>re.match('^' + code + r'(?=\s*,)', line)
</snippet></ROW><ROW><id>4960383</id><snippet>^</snippet></ROW><ROW><id>4960383</id><snippet>(?=\s*,)</snippet></ROW><ROW><id>4960815</id><snippet>'</snippet></ROW><ROW><id>4960815</id><snippet>sqlite</snippet></ROW><ROW><id>4960815</id><snippet>args</snippet></ROW><ROW><id>4960815</id><snippet>subprocess</snippet></ROW><ROW><id>4960815</id><snippet>'</snippet></ROW><ROW><id>4960815</id><snippet>args = ["sqlite3", "db.sqlite", "CREATE TABLE my_table(my_column TEXT)"]
</snippet></ROW><ROW><id>4960990</id><snippet>for e in a[:]: ...</snippet></ROW><ROW><id>4960990</id><snippet>[e for e in a if ...]</snippet></ROW><ROW><id>4961063</id><snippet>def compose(current_value, *args):
    for func in args:
        current_value = func(current_value)
    return current_value

def double(n):
    return 2*n

print compose(5, double, double) # prints 20
</snippet></ROW><ROW><id>4961616</id><snippet>Popen</snippet></ROW><ROW><id>4961616</id><snippet>from subprocess import Popen, PIPE

input = "some input"
cproc = Popen("c_prog", stdin=PIPE, stdout=PIPE)
out, err = cproc.communicate(input)
</snippet></ROW><ROW><id>4961616</id><snippet>#include&lt;stdio.h&gt;
#include&lt;stdlib.h&gt;
#define BUFMAX 100

int main() {
    char buffer[BUFMAX + 1];
    char *bp = buffer;
    int c;
    FILE *in;
    while (EOF != (c = fgetc(stdin)) &amp;&amp; (bp - buffer) &lt; BUFMAX) {
        *bp++ = c;
    }
    *bp = 0;    // Null-terminate the string
    printf("%s", buffer);
}
</snippet></ROW><ROW><id>4961616</id><snippet>from subprocess import Popen, PIPE
from sys import argv

input = ' '.join(argv[1:])
if not input: input = "no arguments given"
cproc = Popen("./c_prog", stdin=PIPE, stdout=PIPE)
out, err = cproc.communicate(input)
print "output:", out
print "errors:", err
</snippet></ROW><ROW><id>4961616</id><snippet>instant</snippet></ROW><ROW><id>4961616</id><snippet>from instant import inline
c_code = """
    [ ... some c code ... ] //see the below page for a more complete example.
"""
c_func = inline(c_code)
</snippet></ROW><ROW><id>4961838</id><snippet># coding=utf-8
</snippet></ROW><ROW><id>4961970</id><snippet>python manage.py shell</snippet></ROW><ROW><id>4962500</id><snippet>virtual</snippet></ROW><ROW><id>4962593</id><snippet>#
# This file contains the Python code from Program 16.16 of
# "Data Structures and Algorithms
# with Object-Oriented Design Patterns in Python"
# by Bruno R. Preiss.
#
# Copyright (c) 2003 by Bruno R. Preiss, P.Eng.  All rights reserved.
#
# http://www.brpreiss.com/books/opus7/programs/pgm16_16.txt
#
class Algorithms(object):

    def DijkstrasAlgorithm(g, s):
        n = g.numberOfVertices
        table = Array(n)
        for v in xrange(n):
            table[v] = Algorithms.Entry()
        table[s].distance = 0
        queue = BinaryHeap(g.numberOfEdges)
        queue.enqueue(Association(0, g[s]))
        while not queue.isEmpty:
            assoc = queue.dequeueMin()
            v0 = assoc.value
            if not table[v0.number].known:
                table[v0.number].known = True
                for e in v0.emanatingEdges:
                    v1 = e.mateOf(v0)
                    d = table[v0.number].distance + e.weight
                    if table[v1.number].distance &gt; d:

                        table[v1.number].distance = d
                        table[v1.number].predecessor = v0.number
                        queue.enqueue(Association(d, v1))
        result = DigraphAsLists(n)
        for v in xrange(n):
            result.addVertex(v, table[v].distance)
        for v in xrange(n):
            if v != s:
                result.addEdge(v, table[v].predecessor)
        return result
    DijkstrasAlgorithm = staticmethod(DijkstrasAlgorithm)
</snippet></ROW><ROW><id>4962593</id><snippet>class Entry(object):
    """
    Data structure used in Dijkstra's and Prim's algorithms.
    """

    def __init__(self):
        """
        (Algorithms.Entry) -&gt; None
        Constructor.
        """
        self.known = False
        self.distance = sys.maxint
        self.predecessor = sys.maxint
</snippet></ROW><ROW><id>4962602</id><snippet>help()</snippet></ROW><ROW><id>4962602</id><snippet>site</snippet></ROW><ROW><id>4962602</id><snippet>sitecustomize.py</snippet></ROW><ROW><id>4962602</id><snippet>sitecustomize.py</snippet></ROW><ROW><id>4962602</id><snippet>help()</snippet></ROW><ROW><id>4962602</id><snippet>def help_wrapper(func):
    def inner(*args):
        results = func(*args)
        return your_cleanup_function_here(results)
help = help_wrapper(help)
</snippet></ROW><ROW><id>4962602</id><snippet>def my_help(*args):
    return your_cleanup_function_here(help(*args))
</snippet></ROW><ROW><id>4962602</id><snippet>help()</snippet></ROW><ROW><id>4962649</id><snippet>import os
import sys

from PyQt4 import QtCore,  QtGui

from matplotlib.backends.backend_qt4agg import FigureCanvasQTAgg as FigureCanvas
from matplotlib.backends.backend_qt4 import NavigationToolbar2QT as NavigationToolbar

from matplotlib.figure import Figure
from mpl_toolkits.mplot3d import Axes3D

class QtMplCanvas(FigureCanvas):
    def __init__(self, parent=None, width = 6.5, height = 5.5, dpi = 100, sharex = None, sharey = None, fig = None):
        if fig == None:
            self.fig = Figure(figsize = (width, height), dpi=dpi, facecolor = '#FFFFFF')
            self.ax = self.fig.add_subplot(111, projection='3d')
            self.fig.subplots_adjust(left=0.1, bottom=0.1, right=0.9, top=0.9)
            self.ax.hold(True)
        else:
            self.fig = fig

        FigureCanvas.__init__(self, self.fig)
        FigureCanvas.setSizePolicy(self,
            QtGui.QSizePolicy.Expanding,
            QtGui.QSizePolicy.Expanding)
        FigureCanvas.updateGeometry(self)

    def sizeHint(self):
        w, h = self.get_width_height()
        return QtCore.QSize(w, h)

    def minimumSizeHint(self):
        return QtCore.QSize(10, 10)

    def sizeHint(self):
        w, h = self.get_width_height()
        return QtCore.QSize(w, h)

    def minimumSizeHint(self):
        return QtCore.QSize(10, 10)


class MyNavigationToolbar(NavigationToolbar) :
    def __init__(self, parent, canvas, direction = 'h' ) :

        self.canvas = canvas
        QWidget.__init__( self, parent )

        if direction=='h' :
            self.layout = QHBoxLayout( self )
        else :
            self.layout = QVBoxLayout( self )

        self.layout.setMargin( 2 )
        self.layout.setSpacing( 0 )

        NavigationToolbar2.__init__( self, canvas )


    def set_message( self, s ):
        pass


class MPL_WIDGET_3D(QtGui.QWidget):
    def __init__(self, parent = None, enableAutoScale = False, enableCSV = False, enableEdit = False, fig = None):
        QtGui.QWidget.__init__(self, parent)
        self.canvas = QtMplCanvas(fig)
        self.canvas.ax.mouse_init()
        self.toolbar = NavigationToolbar(self.canvas, self.canvas)
        self.vbox = QtGui.QVBoxLayout()
        self.vbox.addWidget(self.canvas)
        self.vbox.addWidget(self.toolbar)
        self.setLayout(self.vbox)


        ###########SAVING FIGURE TO CLIPBOARD##########
        self.cb = None #will be used for the clipboard
        self.tempPath = getHomeDir()
        self.tempPath = os.path.join(self.tempPath,'tempMPL.png')

        self.mpl2ClipAction = QtGui.QAction("Save to Clipboard",  self)
        self.mpl2ClipAction.setShortcut("Ctrl+C")
        self.addAction(self.mpl2ClipAction)
        QtCore.QObject.connect(self.mpl2ClipAction,QtCore.SIGNAL("triggered()"), self.mpl2Clip)

    def mpl2Clip(self):
        try:
            self.canvas.fig.savefig(self.tempPath)
            tempImg = QtGui.QImage(self.tempPath)
            self.cb = QtGui.QApplication.clipboard()
            self.cb.setImage(tempImg)
        except:
            print 'Error copying figure to clipboard'
            errorMsg = "Sorry: %s\n\n:%s\n"%(sys.exc_type, sys.exc_value)
            print errorMsg

####USED TO GET THE USERS HOME DIRECTORY FOR USE OF A TEMP FILE

def valid(path):
    if path and os.path.isdir(path):
        return True
    return False

def env(name):
    return os.environ.get( name, '' )

def getHomeDir():
    if sys.platform != 'win32':
        return os.path.expanduser( '~' )

    homeDir = env( 'USERPROFILE' )
    if not valid(homeDir):
        homeDir = env( 'HOME' )
        if not valid(homeDir) :
            homeDir = '%s%s' % (env('HOMEDRIVE'),env('HOMEPATH'))
            if not valid(homeDir) :
                homeDir = env( 'SYSTEMDRIVE' )
                if homeDir and (not homeDir.endswith('\\')) :
                    homeDir += '\\'
                if not valid(homeDir) :
                    homeDir = 'C:\\'
    return homeDir


if __name__ == "__main__":
    app = QtGui.QApplication(sys.argv)
    mplQt = MPL_WIDGET_3D()
    mplQt.show()
    sys.exit(app.exec_())
</snippet></ROW><ROW><id>4962991</id><snippet>arg1</snippet></ROW><ROW><id>4962991</id><snippet>arg2</snippet></ROW><ROW><id>4962991</id><snippet>nonlocal arg1, arg2
</snippet></ROW><ROW><id>4962991</id><snippet>wrapper()</snippet></ROW><ROW><id>4963113</id><snippet>tensordot</snippet></ROW><ROW><id>4963113</id><snippet>g</snippet></ROW><ROW><id>4963113</id><snippet>def rotT(T, g):
    gg = np.outer(g, g)
    gggg = np.outer(gg, gg).reshape(4 * g.shape)
    axes = ((0, 2, 4, 6), (0, 1, 2, 3))
    return np.tensordot(gggg, T, axes)
</snippet></ROW><ROW><id>4963113</id><snippet>g</snippet></ROW><ROW><id>4963113</id><snippet>gggg</snippet></ROW><ROW><id>4963113</id><snippet>tensordot</snippet></ROW><ROW><id>4963113</id><snippet>def rotT(T, gggg):
    return np.dot(gggg.transpose((1, 3, 5, 7, 0, 2, 4, 6)).reshape((81, 81)),
                  T.reshape(81, 1)).reshape((3, 3, 3, 3))
</snippet></ROW><ROW><id>4963113</id><snippet>timeit</snippet></ROW><ROW><id>4963113</id><snippet>Your original code: 19.471129179
Sven's code: 0.718412876129
My first code: 0.118047952652
My second code: 0.0690279006958
</snippet></ROW><ROW><id>4963113</id><snippet>Your original code: 9.77922987938
Sven's code: 0.137110948563
My first code: 0.0569641590118
My second code: 0.0308079719543
</snippet></ROW><ROW><id>4963124</id><snippet>MyClass.management_form = property(self.myfunc)
</snippet></ROW><ROW><id>4963124</id><snippet>class MyOtherClass(MyClass):
    def _new_mf(self):
        # Better code
        return form
    management_form = property(new_mf)
</snippet></ROW><ROW><id>4963229</id><snippet>has_key</snippet></ROW><ROW><id>4963229</id><snippet>in</snippet></ROW><ROW><id>4963229</id><snippet>if game_name in game_votes:
</snippet></ROW><ROW><id>4963285</id><snippet>ax.dist</snippet></ROW><ROW><id>4963285</id><snippet>ax.dist = 15
</snippet></ROW><ROW><id>4963654</id><snippet>import re

def get_words_from_string(s):
    return set(re.findall(re.compile('\w+'), s.lower()))

def get_words_from_file(fname):
    with open(fname, 'rb') as inf:
        return get_words_from_string(inf.read())

def all_words(needle, haystack):
    return set(needle).issubset(set(haystack))

def any_words(needle, haystack):
    return set(needle).intersection(set(haystack))

search_words = get_words_from_string("This is my test")
find_in = get_words_from_string("If this were my test, I is passing")

print any_words(search_words, find_in)

print all_words(search_words, find_in)
</snippet></ROW><ROW><id>4963654</id><snippet>set(['this', 'test', 'is', 'my'])
True
</snippet></ROW><ROW><id>4963707</id><snippet>+</snippet></ROW><ROW><id>4963707</id><snippet>*</snippet></ROW><ROW><id>4963707</id><snippet>.split()</snippet></ROW><ROW><id>4963707</id><snippet>lun_q = 'Lun:\s*(\d+(?:\s+\d+)*)'
s = '''Lun: 0 1 2 3 295 296 297 298'''

r = re.search(lun_q, s)

if r:
    luns = r.group(1).split()

    # optionally, also convert luns from strings to integers
    luns = [int(lun) for lun in luns]
</snippet></ROW><ROW><id>4963843</id><snippet>def my_mean(values):
    n = 0
    Sum = 0.0
    for v in values:
        Sum += v
        n += 1
    return Sum / n
</snippet></ROW><ROW><id>4964023</id><snippet>f.flush()</snippet></ROW><ROW><id>4964023</id><snippet>f.write(filename)</snippet></ROW><ROW><id>4964034</id><snippet>itertools.chain</snippet></ROW><ROW><id>4964034</id><snippet>max(flatlist, key=lambda x: x[1])
</snippet></ROW><ROW><id>4964034</id><snippet>output = [] 
for lst in lists:
   output.append( max(flatlist, key=lambda x: x[1]) )
</snippet></ROW><ROW><id>4964034</id><snippet>map(lambda x:  max(x, key=lambda y: y[1]) , lists)
</snippet></ROW><ROW><id>4964085</id><snippet> [0 0 0 0 0 0 0 0 0 0 0 0 0]
</snippet></ROW><ROW><id>4964085</id><snippet> [0 0 0 0 0 0 0 0 0 0 0 0]
</snippet></ROW><ROW><id>4964085</id><snippet> [0 0 0 0 0 0 0 0 0 0 0 0]
</snippet></ROW><ROW><id>4964085</id><snippet> []
</snippet></ROW><ROW><id>4964085</id><snippet>for items in array:
    if items &lt;= pivotVal:
        smaller.append(items)
    else:
        greater.append(items)
</snippet></ROW><ROW><id>4964085</id><snippet>for items in array:
    if items &lt; pivotVal:
        smaller.append(items)
    elif items == pivotVal:
        equal.append(items)
    else:
        greater.append(items)
</snippet></ROW><ROW><id>4964412</id><snippet>submmithttp_report</snippet></ROW><ROW><id>4964412</id><snippet>submithttp_report</snippet></ROW><ROW><id>4964550</id><snippet>var list_of_names = document.getElementsByTagName('input').map(
  function(element) { return element.getAttribute('name'); }
);
</snippet></ROW><ROW><id>4964550</id><snippet>var list_of_names = jQuery.map(jQuery('input'), function(element) { return jQuery(element).attr('name'); });
</snippet></ROW><ROW><id>4964550</id><snippet>.each</snippet></ROW><ROW><id>4964714</id><snippet>In [111]: lst =  [ ['text',2,3,4], ['text2',4,5,6] ]

In [112]: import operator

In [113]: print(map(operator.add,*lst))
['texttext2', 6, 8, 10]
</snippet></ROW><ROW><id>4964714</id><snippet>lst =  [ ['text',2,3,4], ['text2',4,5,6] ]
result=[]
for column in zip(*lst):
    try:
        result.append(sum(map(int,column)))
    except ValueError:
        pass
print(result)
# [6, 8, 10]
</snippet></ROW><ROW><id>4964759</id><snippet>def mlock(f):
    def inner(*args, **kwargs):
        with Coloring.lock:
            return f(*args, **kwargs)
    return inner
</snippet></ROW><ROW><id>4964857</id><snippet>pyexecdir</snippet></ROW><ROW><id>4964857</id><snippet>AM_PATH_PYTHON</snippet></ROW><ROW><id>4964857</id><snippet>configure.ac</snippet></ROW><ROW><id>4964857</id><snippet>_PRIMARY</snippet></ROW><ROW><id>4964857</id><snippet>lib_LTLIBRARIES</snippet></ROW><ROW><id>4964857</id><snippet>$(libdir)</snippet></ROW><ROW><id>4964857</id><snippet>pyexec_LTLIBRARIES</snippet></ROW><ROW><id>4964857</id><snippet>$(pyexecdir)</snippet></ROW><ROW><id>4964857</id><snippet>bin_PROGRAMS</snippet></ROW><ROW><id>4964857</id><snippet>$(bindir)</snippet></ROW><ROW><id>4964895</id><snippet>f = open(loc + fname + '.txt', 'w', encoding='utf-8')
</snippet></ROW><ROW><id>4965063</id><snippet>cass A:
  a = 1
  def `__init__`(self):
    self.a = 2

print A().a
print A.a
</snippet></ROW><ROW><id>4965063</id><snippet>newview.next = next
</snippet></ROW><ROW><id>4965063</id><snippet>def b():
  x=b.x
  print x

b()
&gt; Traceback (most recent call last):
&gt;   File "&lt;stdin&gt;", line 1, in &lt;module&gt;
&gt;   File "&lt;stdin&gt;", line 2, in b
&gt;   AttributeError: 'function' object has no attribute 'x'
b.x = 1
b()
&gt; 1
</snippet></ROW><ROW><id>4965063</id><snippet>d = b
d.x = 1
</snippet></ROW><ROW><id>4965091</id><snippet>import collections

def uniques(*args):
    """For an arbitrary number of sequences,
           return the items in each sequence which
            do not occur in any of the other sequences
    """

    # ensure that each value only occurs once in each sequence
    args = [set(a) for a in args]

    seen = collections.defaultdict(int)
    for a in args:
        for i in a:
            seen[i] += 1
    # seen[i] = number of sequences in which value i occurs

    # for each sequence, return items
    #  which only occur in one sequence (ie this one)
    return [[i for i in a if seen[i]==1] for a in args]
</snippet></ROW><ROW><id>4965091</id><snippet>uniques([1,1,2,3,5], [2,3,4,5], [3,3,3,9])  -&gt;  [[1], [4], [9]]
</snippet></ROW><ROW><id>4965176</id><snippet>os.system</snippet></ROW><ROW><id>4965176</id><snippet>os.system(my_cmd)
</snippet></ROW><ROW><id>4965176</id><snippet>p = subprocess.Popen(my_cmd, shell=True)
os.waitpid(p.pid, 0)
</snippet></ROW><ROW><id>4965176</id><snippet>import shutil

with open('myfile', 'w') as outfile:
    for infile in ('file1', 'file2', 'file3'):
        shutil.copyfileobj(open(infile), outfile)
</snippet></ROW><ROW><id>4965365</id><snippet>from google.appengine.ext import db

class SuppSet(db.Model):
    name = db.StringProperty()

class Supp(db.Model):
    suppset = db.ReferenceProperty(SuppSet, collection_name='supp_list')

suppSet0, suppSet1 = SuppSet(name = '0'), SuppSet(name = '1')
suppSet0.put()
suppSet1.put()

supp = Supp(suppset=suppSet0)
supp.put()

print 'suppSet0.supp_list: %r' % list(suppSet0.supp_list)
print 'suppSet1.supp_list: %r' % list(suppSet1.supp_list)
print 'suppset for sup: %s' % supp.suppset.name

supp.suppset = suppSet1
supp.put()

print 'suppSet0.supp_list: %r' % list(suppSet0.supp_list)
print 'suppSet1.supp_list: %r' % list(suppSet1.supp_list)
print 'suppset for sup: %s' % supp.suppset.name
</snippet></ROW><ROW><id>4965365</id><snippet>suppSet0.supp_list: [&lt;__main__.Supp object at 0x42a0f10&gt;]
suppSet1.supp_list: []
suppset for sup: 0
suppSet0.supp_list: []
suppSet1.supp_list: [&lt;__main__.Supp object at 0x429a3d0&gt;]
suppset for sup: 1
</snippet></ROW><ROW><id>4965605</id><snippet>pg_restore</snippet></ROW><ROW><id>4965605</id><snippet>pg_restore</snippet></ROW><ROW><id>4965621</id><snippet>match = [regex.match(str) for regex in episodeRegExes if regex.match(str)]
</snippet></ROW><ROW><id>4965621</id><snippet>def getEpisodeTuple(iterable):
    episodeTuple = [episodeChunk(chunk)
        for chunk in iterable
        if episodeChunk(chunk)]
    if episodeTuple:
        assert len(episodeTuple) == 1
        return episodeTuple[0]
    else:
        return None
</snippet></ROW><ROW><id>4965621</id><snippet>def getEpisodeTuple(iterable):
    for chunk in iterable:
        echunk = episodeChunk(chunk)
        if echunk:
            return echunk
</snippet></ROW><ROW><id>4965621</id><snippet>def splitWithAny(string, delimiters):
    "Splits the string with any of the strings of delimiters"
    return reduce(
        lambda iterable, delim: reduce(
            lambda lst,chunk: lst + chunk.split(delim),
            iterable,
            []),
        delimiters,
        [string])

def splitName(fileName):
    "Splits the fileName into smaller and hopefully significant chunks"
    delimiters = [" ", ".", "_", "-"]
    return filter(None, splitWithAny(fileName, delimiters))
</snippet></ROW><ROW><id>4965621</id><snippet>def splitName(fileName):
    return re.split("[ ._-]+", fileName)
</snippet></ROW><ROW><id>4965762</id><snippet>foo/</snippet></ROW><ROW><id>4965762</id><snippet>sys.path</snippet></ROW><ROW><id>4965762</id><snippet>python -m foo.gui
</snippet></ROW><ROW><id>4965858</id><snippet>entry = [VC_s, VC_i, VT_s]
rowAdd = tempfile.next()
ofile.writerow(rowAdd + entry)
</snippet></ROW><ROW><id>4966057</id><snippet>result = doc.xpath("//tr")[0:-2]
</snippet></ROW><ROW><id>4966720</id><snippet>/usr/bin/pip</snippet></ROW><ROW><id>4966720</id><snippet>bin</snippet></ROW><ROW><id>4966847</id><snippet>__init__</snippet></ROW><ROW><id>4966847</id><snippet>class A(object):
    def __init__(self, xx, yy):
        self.xx = xx
        self.yy = yy

foo(A(1, 2))
</snippet></ROW><ROW><id>4966945</id><snippet>cd</snippet></ROW><ROW><id>4966945</id><snippet>search-for-file</snippet></ROW><ROW><id>4966945</id><snippet>project-local-variables.el</snippet></ROW><ROW><id>4966945</id><snippet>(defun search-for-file (file dir)
  "Look up the file in and above `dir'."
 (let ((f (expand-file-name file dir))
       (parent (file-truename (expand-file-name ".." dir))))
   (cond ((string= dir parent) nil)
         ((file-exists-p f) f)
         (t (search-for-file file parent)))))
</snippet></ROW><ROW><id>4967259</id><snippet>for line in open('your_file.txt'):
    s = line.strip().split("  ") # two spaces are for split
    p = '{} =&gt; "{:0{min_bits}b}"'.format(s[0], int(s[1]), min_bits=10)
    print p
</snippet></ROW><ROW><id>4967619</id><snippet>&gt;&gt;&gt; s = "please anwser my question"
&gt;&gt;&gt; len(s)  # number of characters in s
25
</snippet></ROW><ROW><id>4967619</id><snippet>&gt;&gt;&gt; import sys
&gt;&gt;&gt; sys.getsizeof(s)
58
</snippet></ROW><ROW><id>4967619</id><snippet>str</snippet></ROW><ROW><id>4967659</id><snippet>&gt;&gt;&gt; import datetime
&gt;&gt;&gt; a = ('[19:49:40:680]', '[19:49:49:128]')
&gt;&gt;&gt; start = datetime.datetime.strptime(a[0][:-1]+"000", "[%H:%M:%S:%f")
&gt;&gt;&gt; end = datetime.datetime.strptime(a[1][:-1]+"000", "[%H:%M:%S:%f")
&gt;&gt;&gt; delta = end-start
&gt;&gt;&gt; ms = delta.seconds*1000 + delta.microseconds/1000
&gt;&gt;&gt; ms
8448.0
</snippet></ROW><ROW><id>4967659</id><snippet>&gt;&gt;&gt; a = ('[23:59:59:000]','[00:00:01:000]')
&gt;&gt;&gt; # &lt;snip&gt; see above
&gt;&gt;&gt; ms = delta.seconds*1000 + delta.microseconds/1000
&gt;&gt;&gt; ms
2000.0
</snippet></ROW><ROW><id>4968684</id><snippet>warnings</snippet></ROW><ROW><id>4968684</id><snippet>buffer()</snippet></ROW><ROW><id>4968769</id><snippet>&gt;&gt;&gt; a = ["a;b", "c;d", "y;z"]
&gt;&gt;&gt; ";".join(a).split(";")
['a', 'b', 'c', 'd', 'y', 'z']
</snippet></ROW><ROW><id>4968769</id><snippet>python -mtimeit -s'a=["a;b","x;y","p;q"]*99' '";".join(a).split(";")'
10000 loops, best of 3: 48.2 usec per loop

python -mtimeit -s'a=["a;b","x;y","p;q"]*99' '[single for pair in a for single in pair.split(";")]'
1000 loops, best of 3: 347 usec per loop

python -mtimeit -s'from itertools import chain; a=["a;b","x;y","p;q"]*99' 'list(chain(*(s.split(";") for s in a)))'
1000 loops, best of 3: 350 usec per loop

python -mtimeit -s'a=["a;b","x;y","p;q"]*99' 'sum([x.split(";") for x in a],[])'
1000 loops, best of 3: 1.13 msec per loop

python -mtimeit -s'a=["a;b","x;y","p;q"]*99' 'sum(map(lambda x: x.split(";"), a), [])'
1000 loops, best of 3: 1.22 msec per loop

python -mtimeit -s'a=["a;b","x;y","p;q"]*99' 'reduce(lambda x,y:x+y, [pair.split(";") for pair in a])'
1000 loops, best of 3: 1.24 msec per loop
</snippet></ROW><ROW><id>4969498</id><snippet>somevar = 3
expression = lambda: somevar &lt; 5
while expression():
    ...
    if continue_if_even:
        expression = lambda: (somevar % 2) == 0
    ...
</snippet></ROW><ROW><id>4969498</id><snippet>lambda</snippet></ROW><ROW><id>4969498</id><snippet>eval</snippet></ROW><ROW><id>4969498</id><snippet>eval</snippet></ROW><ROW><id>4969571</id><snippet> import os

 for root,dirs,files in os.walk(path):
     for fname in files:
         if fname.endswith('.html'):
             fq = os.path.join(root, fname)
             for line in open(fq):
                 if 'sub_middle_1col' in line:
                     ...
</snippet></ROW><ROW><id>4969601</id><snippet>$ hachoir-metadata pacte_des_gnous.avi
Common:
- Duration: 4 min 25 sec
- Comment: Has audio/video index (248.9 KB)
- MIME type: video/x-msvideo
- Endian: Little endian
Video stream:
- Image width: 600
- Image height: 480
- Bits/pixel: 24
- Compression: DivX v4 (fourcc:"divx")
- Frame rate: 30.0
Audio stream:
- Channel: stereo
- Sample rate: 22.1 KHz
- Compression: MPEG Layer 3
</snippet></ROW><ROW><id>4969675</id><snippet>x==y</snippet></ROW><ROW><id>4969675</id><snippet>x!=y</snippet></ROW><ROW><id>4969675</id><snippet>__eq__()</snippet></ROW><ROW><id>4969675</id><snippet>__ne__()</snippet></ROW><ROW><id>4969675</id><snippet>C(1) != C(2)</snippet></ROW><ROW><id>4969675</id><snippet>__cmp__</snippet></ROW><ROW><id>4969675</id><snippet>...   def __cmp__(self, o):
...     return 0
&gt;&gt;&gt; C(1) != C(2)
False
</snippet></ROW><ROW><id>4969931</id><snippet>% python -c "import urllib, os; os.mkdir('py-env'); \
     urllib.urlretrieve('http://goo.gl/D2RB', 'py-env/virtualenv.py')"
% python py-env/virtualenv.py --no-site-packages py-env
% source py-env/bin/activate
% pip install flask SQLAlchemy 
</snippet></ROW><ROW><id>4970239</id><snippet>dl = ((coord[i+1][0]-coord[i][0]), (coord[i+1][1]-coord[i][1]), 0)
bfield2 = konstante*I*cross(dl, (rx,ry,rz))/r**3 # i have to use numpy arrays
</snippet></ROW><ROW><id>4970239</id><snippet>dl = np.array([(coord[i+1][0]-coord[i][0]), (coord[i+1][1]-coord[i][1]), 0])
bfield2 = konstante*I*cross(dl, np.array([rx,ry,rz]))/r**3 # i have to use numpy arrays
</snippet></ROW><ROW><id>4970239</id><snippet>np.array</snippet></ROW><ROW><id>4970239</id><snippet>dl</snippet></ROW><ROW><id>4970239</id><snippet>bfield2</snippet></ROW><ROW><id>4970239</id><snippet>np.array(dl)</snippet></ROW><ROW><id>4970239</id><snippet>dl</snippet></ROW><ROW><id>4970600</id><snippet>&gt;&gt;&gt; map(len, re.split(r"(?&lt;=[^ ]) ", head))
[5, 5, 10, 13]
</snippet></ROW><ROW><id>4970600</id><snippet>re.split</snippet></ROW><ROW><id>4970600</id><snippet>(?&lt;=[^ ])</snippet></ROW><ROW><id>4970947</id><snippet>imp.load_source</snippet></ROW><ROW><id>4970947</id><snippet>mod = imp.load_source("bar","./foo/bar.py")
</snippet></ROW><ROW><id>4971411</id><snippet>FFnetlayer0 = FFnetlayer0.reshape(-1, 2)
</snippet></ROW><ROW><id>4971411</id><snippet>FFnetlayer0[i]</snippet></ROW><ROW><id>4971411</id><snippet>i</snippet></ROW><ROW><id>4971462</id><snippet>System.IO.Path.ChangeExtension</snippet></ROW><ROW><id>4971462</id><snippet>string path = "hello.exe";
string newPath = System.IO.Path.ChangeExtension(path, ".coverage");
</snippet></ROW><ROW><id>4971462</id><snippet>using System.IO</snippet></ROW><ROW><id>4971462</id><snippet>Path.ChangeExtension(path, newExtension);
</snippet></ROW><ROW><id>4971462</id><snippet>Console.WriteLine</snippet></ROW><ROW><id>4971462</id><snippet>Console.WriteLine("{0} - {1}", path, newPath);</snippet></ROW><ROW><id>4971681</id><snippet>import socket

HOST = ''
PORT = 50007

s = socket.socket()
s.bind((HOST, PORT))
s.listen(1)
conn, addr = s.accept()

f = open("client.txt", "rb")
while 1:
    data = f.read(1024)
    if not data: break
    conn.send(data)
conn.close()
</snippet></ROW><ROW><id>4971728</id><snippet>def regressionTest():
   path = os.path.abspath(os.path.dirname(sys.argv[0]))
</snippet></ROW><ROW><id>4971728</id><snippet>def regressionTest(somearg):
   path = os.path.abspath(os.path.dirname(somearg))
</snippet></ROW><ROW><id>4971728</id><snippet>for root, dirs, files in os.walk(path):
    regressionTest(root)
</snippet></ROW><ROW><id>4972033</id><snippet>PyRun_SimpleString</snippet></ROW><ROW><id>4972067</id><snippet>&lt;xsl:stylesheet version="1.0"
 xmlns:xsl="http://www.w3.org/1999/XSL/Transform"&gt;
 &lt;xsl:output method="text"/&gt;

 &lt;xsl:key name="kFollowing" match="dd"
      use="generate-id(preceding-sibling::dt[1])"/&gt;

 &lt;xsl:template match="dl"&gt;
  { &lt;xsl:apply-templates select="dt"/&gt; }
 &lt;/xsl:template&gt;

 &lt;xsl:template match="dt"&gt;
  &lt;xsl:text/&gt;'&lt;xsl:value-of select="."/&gt;' : [ &lt;xsl:text/&gt;
   &lt;xsl:apply-templates select=
       "key('kFollowing', generate-id())"/&gt;
   &lt;xsl:text&gt; ]&lt;/xsl:text&gt;
   &lt;xsl:if test="not(position()=last())"&gt;, &lt;/xsl:if&gt;
 &lt;/xsl:template&gt;

 &lt;xsl:template match="dd"&gt;
  &lt;xsl:text/&gt;'&lt;xsl:value-of select="."/&gt;'&lt;xsl:text/&gt;
   &lt;xsl:if test="not(position()=last())"&gt;, &lt;/xsl:if&gt;
 &lt;/xsl:template&gt;
&lt;/xsl:stylesheet&gt;
</snippet></ROW><ROW><id>4972067</id><snippet>&lt;dl&gt;
    &lt;dt&gt;Section One&lt;/dt&gt;
    &lt;dd&gt;Child one&lt;/dd&gt;
    &lt;dd&gt;Child one.2&lt;/dd&gt;
    &lt;dt&gt;Section Two&lt;/dt&gt;
    &lt;dd&gt;Child two&lt;/dd&gt;
&lt;/dl&gt;
</snippet></ROW><ROW><id>4972067</id><snippet>  { 'Section One' : [ 'Child one', 'Child one.2' ], 'Section Two' : [ 'Child two' ] }
</snippet></ROW><ROW><id>4972067</id><snippet>xsl:key</snippet></ROW><ROW><id>4972067</id><snippet>dt</snippet></ROW><ROW><id>4972067</id><snippet>dt</snippet></ROW><ROW><id>4972154</id><snippet>System.IO.File</snippet></ROW><ROW><id>4972154</id><snippet>System.IO.Directory</snippet></ROW><ROW><id>4972154</id><snippet>Exists</snippet></ROW><ROW><id>4972154</id><snippet>bool dirExists = System.IO.Directory.Exists(@"C:\directory\");
bool fileExists = System.IO.File.Exists(@"C:\directory\file.txt");</snippet></ROW><ROW><id>4972154</id><snippet>System.IO.Path.Combine("c:", "directory", "file.txt");</snippet></ROW><ROW><id>4972154</id><snippet>System.IO.Path.DirectorySeparatorChar</snippet></ROW><ROW><id>4972548</id><snippet>def stringWidth2(string, font, size, charspace):
    width = stringWidth(string, font, size)
    width += (len(string) - 1) * charspace
    return width
</snippet></ROW><ROW><id>4972548</id><snippet>stringWidth</snippet></ROW><ROW><id>4972548</id><snippet>(area_width - string_width) / 2
</snippet></ROW><ROW><id>4972722</id><snippet>fun(arg4=10)
</snippet></ROW><ROW><id>4972761</id><snippet>(1,2)</snippet></ROW><ROW><id>4972761</id><snippet>L</snippet></ROW><ROW><id>4972761</id><snippet>set</snippet></ROW><ROW><id>4972761</id><snippet>set((1,2)).issubset(L)
</snippet></ROW><ROW><id>4972761</id><snippet>set((1,2)) &lt;= set(L)
</snippet></ROW><ROW><id>4973224</id><snippet>&gt; sqrt(2)
[1] 1.414214
&gt; .Last.value
[1] 1.414214
</snippet></ROW><ROW><id>4973505</id><snippet>open_workbook(filename=None, etc etc etc)

    Open a spreadsheet file for data extraction.

    filename
        The path to the spreadsheet file to be opened.
</snippet></ROW><ROW><id>4973505</id><snippet>import sys
import xlrd
book = xlrd.open_workbook(sys.argv[1])
</snippet></ROW><ROW><id>4973505</id><snippet>python c:\myscripts\demo_script.py d:\datafiles\foo.xls
</snippet></ROW><ROW><id>4973505</id><snippet>"c:\testdata\new.xls"</snippet></ROW><ROW><id>4973505</id><snippet>\t</snippet></ROW><ROW><id>4973505</id><snippet>\n</snippet></ROW><ROW><id>4973505</id><snippet>"c:\\testdata\\new.xls"</snippet></ROW><ROW><id>4973505</id><snippet>r"c:\testdata\new.xls"</snippet></ROW><ROW><id>4973505</id><snippet>"c:/testdata/new.xls"</snippet></ROW><ROW><id>4973824</id><snippet>sThread.ServerThread()</snippet></ROW><ROW><id>4973824</id><snippet>ServerThread()</snippet></ROW><ROW><id>4973824</id><snippet>ServerThread()</snippet></ROW><ROW><id>4973824</id><snippet>.getDeviceState()</snippet></ROW><ROW><id>4973914</id><snippet>getattr(self.ui,conf[0]).setText(...)</snippet></ROW><ROW><id>4973949</id><snippet>if __name__ == '__main__':
    unittest.main()
</snippet></ROW><ROW><id>4974358</id><snippet>pstats</snippet></ROW><ROW><id>4974358</id><snippet>profile</snippet></ROW><ROW><id>4974424</id><snippet>arrays = [np.array(map(int, line.split())) for line in open('scienceVertices.txt')]
</snippet></ROW><ROW><id>4974424</id><snippet>arrays</snippet></ROW><ROW><id>4974457</id><snippet>// using System.IO;

string newPath = Path.Combine(
               Path.GetDirectoryName(
                     Path.GetFullPath(Environment.GetCommandLineArgs[0])
               ), "hello.txt");
</snippet></ROW><ROW><id>4974457</id><snippet>// using System.IO;
// using System.Reflection;

string newPath = Path.Combine(
                    Path.GetDirectoryName(Assembly.GetEntryAssembly().Location)
               , "hello.txt");
</snippet></ROW><ROW><id>4974534</id><snippet>pickle</snippet></ROW><ROW><id>4974638</id><snippet>print [(text, int(a), int(b), int(c)) for (text, a, b, c) in lst]
</snippet></ROW><ROW><id>4974690</id><snippet>String.prototype.replace</snippet></ROW><ROW><id>4974690</id><snippet>String.prototype.format = function () {
  var i = 0, args = arguments;
  return this.replace(/{}/g, function () {
    return typeof args[i] != 'undefined' ? args[i++] : '';
  });
};

var bar1 = 'foobar',
    bar2 = 'jumped',
    bar3 = 'dog';

'The lazy {} {} over the {}'.format(bar3, bar2, bar1);
// "The lazy dog jumped over the foobar"
</snippet></ROW><ROW><id>4974930</id><snippet>utc</snippet></ROW><ROW><id>4974930</id><snippet>datetime(2011,2,11,20,0,0,0,pacific).astimezone(utc).strftime("%s")
</snippet></ROW><ROW><id>4974930</id><snippet>datetime</snippet></ROW><ROW><id>4974930</id><snippet>pacific.localize(datetime(2011,2,11,20,0,0,0)).astimezone(utc).strftime("%s")
</snippet></ROW><ROW><id>4974952</id><snippet>?</snippet></ROW><ROW><id>4974952</id><snippet>example.com/foo/42?p1=foo&amp;p2=bar</snippet></ROW><ROW><id>4974952</id><snippet>request.GET</snippet></ROW><ROW><id>4975163</id><snippet>AssertionError</snippet></ROW><ROW><id>4975163</id><snippet>assert</snippet></ROW><ROW><id>4975163</id><snippet>SetTarget</snippet></ROW><ROW><id>4975163</id><snippet>True</snippet></ROW><ROW><id>4975163</id><snippet>{}</snippet></ROW><ROW><id>4975163</id><snippet>False</snippet></ROW><ROW><id>4975163</id><snippet>AssertionError</snippet></ROW><ROW><id>4975163</id><snippet>SetTarget</snippet></ROW><ROW><id>4975163</id><snippet>{}</snippet></ROW><ROW><id>4975250</id><snippet>go=Tkinter.Button(text='file location',command=chooseDir,state=Tkinter.DISABLED).pack()
</snippet></ROW><ROW><id>4975250</id><snippet>go</snippet></ROW><ROW><id>4975250</id><snippet>go</snippet></ROW><ROW><id>4975250</id><snippet>go.pack()</snippet></ROW><ROW><id>4975474</id><snippet>and</snippet></ROW><ROW><id>4975474</id><snippet>foo = dict()

if 'bar' in foo and foo['bar']:
    doSomething()
</snippet></ROW><ROW><id>4975493</id><snippet>ssh_proc = Popen(['ssh', '-f', '-N', '-L', '10000:gateway:11000', 'localhost'], stdin=PIPE, stdout=PIPE)
stat = ssh_proc.poll()
while stat == None:
    stat = ssh_proc.poll()
</snippet></ROW><ROW><id>4975581</id><snippet>{% extends "admin/base_site.html" %}
</snippet></ROW><ROW><id>4975581</id><snippet>{% block breadcrumbs %}{% if not is_popup %}
    &lt;div class="breadcrumbs"&gt;
         &lt;a href="/admin/"&gt;Home&lt;/a&gt; &amp;rsaquo;
         &lt;a href="/admin/yourpath/"&gt;Up One Level&lt;/a&gt; &amp;rsaquo; 
         You Are Here
    &lt;/div&gt;
{% endif %}{% endblock %}
</snippet></ROW><ROW><id>4975614</id><snippet>%s</snippet></ROW><ROW><id>4975614</id><snippet>&gt;&gt;&gt; print '%d' % True
1
&gt;&gt;&gt; print '%s' % True
True
</snippet></ROW><ROW><id>4975677</id><snippet>re.split(r'(?&lt;!\\),', 'part1,part2,pa\\,rt3,part4')
</snippet></ROW><ROW><id>4976032</id><snippet>import sys
from sys import exit
print ("MathCheats Times-Ed by jtl999")
numbermodechoice = raw_input ("Are you using a number with a decimal? yes/no ")
if numbermodechoice == "yes":
    try:
        numberx1 = float(raw_input('Enter first number: '))
        numberx2 = float(raw_input('Enter second number: '))
    except ValueError:
        print ("Oops you typed it wrong")
        exit()
elif numbermodechoice == "no":
    print ("Remember only numbers are allowed")  
    try:
        numberx1 = (int)(raw_input('Enter first number: '))
        numberx2 = (int)(raw_input('Enter second number: '))
    except ValueError:
        print ("Oops you typed it wrong")        
        exit()
else:
    print ("Oops you typed it wrong")
    exit()
print ("The answer was") 
print numberx1*numberx2
ostype = sys.platform
if ostype == 'win32':
    raw_input ("Press enter to exit")
elif ostype == 'win64':
    raw_input ("Press enter to exit")
</snippet></ROW><ROW><id>4976333</id><snippet>import re
config.gThingCollection.find({"name": re.compile(regex, re.IGNORECASE)})
</snippet></ROW><ROW><id>4976389</id><snippet>NameVar</snippet></ROW><ROW><id>4976389</id><snippet>NameAssign</snippet></ROW><ROW><id>4976389</id><snippet>NameAssign.NameWorks.InputNames()</snippet></ROW><ROW><id>4976389</id><snippet>NameAssign</snippet></ROW><ROW><id>4976389</id><snippet>import NameAssign

namelist = NameAssign.NameWorks(['harry', 'betty', 'sam'])
print namelist.InputNames()  # or print(...) for Py3k
</snippet></ROW><ROW><id>4976389</id><snippet>class NameWorks(object):
  def __init__(self, names):
    self.names = names

  def InputNames(self):
    return self.names
</snippet></ROW><ROW><id>4976472</id><snippet>bool</snippet></ROW><ROW><id>4976472</id><snippet>int</snippet></ROW><ROW><id>4976472</id><snippet>bool</snippet></ROW><ROW><id>4976472</id><snippet>YeaOrNea</snippet></ROW><ROW><id>4976472</id><snippet>int</snippet></ROW><ROW><id>4976472</id><snippet>bool</snippet></ROW><ROW><id>4976472</id><snippet>class YeaOrNea(int):
    ...
</snippet></ROW><ROW><id>4976472</id><snippet>print('Yes' if isTrue else 'No')
</snippet></ROW><ROW><id>4976524</id><snippet>rowAdd = tempfile.next()
ofile.writerow(rowAdd + ['HEADER4', 'HEADER5', 'HEADER6'])

for ...
</snippet></ROW><ROW><id>4976621</id><snippet>python-Levenshtein</snippet></ROW><ROW><id>4976774</id><snippet>ServicePointManager.UseNagleAlgorithm = true;
ServicePointManager.Expect100Continue = true;
ServicePointManager.CheckCertificateRevocationList = true;
ServicePointManager.DefaultConnectionLimit = 10; // for example
</snippet></ROW><ROW><id>4976774</id><snippet>&lt;?xml version="1.0" encoding="utf-8" ?&gt;
&lt;configuration&gt;
  &lt;system.net&gt;
    &lt;connectionManagement&gt;
      &lt;add address="*" maxconnection="10"/&gt;
    &lt;/connectionManagement&gt;
  &lt;/system.net&gt;
&lt;/configuration&gt;
</snippet></ROW><ROW><id>4976911</id><snippet>if __name__ == '__main__':
    import sys
    argc = len(sys.argv)
    argv = sys.argv
</snippet></ROW><ROW><id>4976911</id><snippet>main</snippet></ROW><ROW><id>4976986</id><snippet>def parse_the_file():
    lower = str.lower
    split = str.split
    with open('f.txt') as f:
        d = {}
        lines = f.read().split('\n')
        for A,B in [split(l) for l in lines]:
            try:
                d[lower(A)].add(B)
            except KeyError:
                d[lower(A)] = set(B)

        for a in d:
            print "%s - %s" % (a,",".join(list(d[a])))

if __name__ == "__main__":
    parse_the_file()
</snippet></ROW><ROW><id>4976986</id><snippet>a = lower(A)</snippet></ROW><ROW><id>4976986</id><snippet>xxxd - 4
xxxa - 1,3,2
xxxb - 2
xxxc - 3
</snippet></ROW><ROW><id>4977312</id><snippet>#!/usr/bin/python
for i in xrange(100000):
    print "def foo%d(): pass\n" % i
</snippet></ROW><ROW><id>4977312</id><snippet>foo.py</snippet></ROW><ROW><id>4977312</id><snippet>import.py</snippet></ROW><ROW><id>4977312</id><snippet>import foo</snippet></ROW><ROW><id>4977312</id><snippet># time python import.py

7.83s user 0.55s system 99% cpu 8.381 total
1.52s user 0.11s system 99% cpu 1.630 total
1.54s user 0.09s system 100% cpu 1.626 total
1.48s user 0.15s system 100% cpu 1.623 total
</snippet></ROW><ROW><id>4977312</id><snippet>foo.pyc</snippet></ROW><ROW><id>4977312</id><snippet>foo</snippet></ROW><ROW><id>4977312</id><snippet>foo.py</snippet></ROW><ROW><id>4977312</id><snippet>fromimport.py</snippet></ROW><ROW><id>4977312</id><snippet>from foo import foo1</snippet></ROW><ROW><id>4977312</id><snippet># time python fromimport.py

7.81s user 0.44s system 99% cpu 8.253 total
1.48s user 0.15s system 100% cpu 1.626 total
1.52s user 0.11s system 99% cpu 1.631 total
1.49s user 0.14s system 100% cpu 1.630 total
</snippet></ROW><ROW><id>4977312</id><snippet>foo.py</snippet></ROW><ROW><id>4977312</id><snippet>import foo</snippet></ROW><ROW><id>4977312</id><snippet>from foo import foo1</snippet></ROW><ROW><id>4977408</id><snippet>class Host(models.Model):
    .
    .
    .
    @property
    def average_latency(self):
        # calculate latency from Query model ...
        return latency
</snippet></ROW><ROW><id>4977547</id><snippet> import json
    json_doc = json.dumps(projects, default=convert_to_builtin_type)
                    print json_doc
　　def convert_to_builtin_type(obj):
    　print 'default(', repr(obj), ')'
    　# Convert objects to a dictionary of their representation
    　d = { '__class__':obj.__class__.__name__,
          '__module__':obj.__module__,
          }
    　d.update(obj.__dict__)
    　return d
</snippet></ROW><ROW><id>4977547</id><snippet>try {
    serverAddress = new URL("http://127.0.0.1:5000/projects/" + ruser.getUserEmail()+"+++++"+ruser.getUserHash());
    //set up out communications stuff
    connection = null;

    //Set up the initial connection
    connection = (HttpURLConnection)serverAddress.openConnection();
    connection.setRequestMethod("GET");
    connection.setDoOutput(true);
    connection.setReadTimeout(100000);

    connection.connect();

    //get the output stream writer and write the output to the server
    //not needed in this example

    rd  = new BufferedReader(new InputStreamReader(connection.getInputStream()));
    sb = new StringBuilder();

    while ((line = rd.readLine()) != null)
    {
       sb.append(line + '\n');
    }
    String mystr = sb.toString();
    // Now do the magic.
    Gson gson = new Gson();
    projectData = gson.fromJson(mystr, ProjectData[].class);    
} catch (MalformedURLException e) {
    e.printStackTrace();
} catch (ProtocolException e) {
    e.printStackTrace();
} catch (IOException e) {
    e.printStackTrace();
}
finally
{
    //close the connection, set all objects to null
    connection.disconnect();
    rd = null;
    sb = null;
    connection = null;
}


return projectData;
</snippet></ROW><ROW><id>4977889</id><snippet>def steps(path):
    if len(path) &gt; 0:
        for i in range(1, len(path)):
            for step in steps_between(path[i - 1], path[i]):
                yield step
        yield path[-1]


def steps_between(start, end):
    x0, y0 = start
    x1, y1 = end

    steep = abs(y1 - y0) &gt; abs(x1 - x0)
    if steep:
        x0, y0 = y0, x0
        x1, y1 = y1, x1

    if y0 &gt; y1:
        x0, x1 = x1, x0
        y0, y1 = y1, y0

    if y0 &lt; y1:
        ystep = 1
    else:
        ystep = -1

    deltax = x1 - x0
    deltay = abs(y1 - y0)
    error = -deltax / 2

    y = y0
    for x in range(x0, x1):
        if steep:
            yield (y, x)
        else:
            yield (x, y)

        error += deltay
        if error &gt; 0:
            y += ystep
            error -= deltax
            if steep:
                yield (y, x)
            else:
                yield (x, y)
</snippet></ROW><ROW><id>4977889</id><snippet>coords = [(10, 10), (13, 10), (13, 13)]
print "\n".join(str(step) for step in steps(coords))
</snippet></ROW><ROW><id>4977889</id><snippet>(10, 10)
(11, 10)
(12, 10)
(13, 10)
(13, 11)
(13, 12)
(13, 13)
</snippet></ROW><ROW><id>4977889</id><snippet>x</snippet></ROW><ROW><id>4977889</id><snippet>y</snippet></ROW><ROW><id>4977889</id><snippet>coords = [(10, 10), (13, 12), (15, 13)]
print "\n".join(str(step) for step in steps(coords))
</snippet></ROW><ROW><id>4977889</id><snippet>(10, 10)
(11, 10)
(11, 11)
(12, 11)
(12, 12)
(13, 12)
(14, 12)
(14, 13)
(15, 13)
</snippet></ROW><ROW><id>4977950</id><snippet>hash</snippet></ROW><ROW><id>4977950</id><snippet>0.545173168182    # list
0.479876995087    # tuple
</snippet></ROW><ROW><id>4977950</id><snippet>tuple</snippet></ROW><ROW><id>4977950</id><snippet>$ python -mtimeit 'l=[]'
10000000 loops, best of 3: 0.053 usec per loop
$ python -mtimeit 't=()'
10000000 loops, best of 3: 0.026 usec per loop
</snippet></ROW><ROW><id>4977950</id><snippet>foo</snippet></ROW><ROW><id>4977950</id><snippet>tuple</snippet></ROW><ROW><id>4977950</id><snippet>list</snippet></ROW><ROW><id>4977950</id><snippet>0.911674976349  # list
1.1165189743    # tuple
</snippet></ROW><ROW><id>4978234</id><snippet>from django.contrib.sessions.models import Session
class SessionAdmin(ModelAdmin):
    def _session_data(self, obj):
        return obj.get_decoded()
    list_display = ['session_key', '_session_data', 'expire_date']
admin.site.register(Session, SessionAdmin)
</snippet></ROW><ROW><id>4978745</id><snippet>other = s or "some default value"
</snippet></ROW><ROW><id>4978745</id><snippet>or</snippet></ROW><ROW><id>4978745</id><snippet>or</snippet></ROW><ROW><id>4978745</id><snippet>True</snippet></ROW><ROW><id>4978745</id><snippet>False</snippet></ROW><ROW><id>4978745</id><snippet>x or y</snippet></ROW><ROW><id>4978745</id><snippet>x</snippet></ROW><ROW><id>4978745</id><snippet>True</snippet></ROW><ROW><id>4978745</id><snippet>y</snippet></ROW><ROW><id>4978745</id><snippet>42    or "something"    # returns 42
0     or "something"    # returns "something"
None  or "something"    # returns "something"
False or "something"    # returns "something"
""    or "something"    # returns "something"
</snippet></ROW><ROW><id>4978745</id><snippet>s</snippet></ROW><ROW><id>4978745</id><snippet>None</snippet></ROW><ROW><id>4978745</id><snippet>__nonzero__()</snippet></ROW><ROW><id>4978745</id><snippet>__len__()</snippet></ROW><ROW><id>4978745</id><snippet>None</snippet></ROW><ROW><id>4978783</id><snippet>{1}</snippet></ROW><ROW><id>4979486</id><snippet>()</snippet></ROW><ROW><id>4979486</id><snippet>\</snippet></ROW><ROW><id>4979486</id><snippet>
    decision = (is_female and under_30 and single
                or
                is_male and above_35 and single)
</snippet></ROW><ROW><id>4979486</id><snippet>\</snippet></ROW><ROW><id>4979486</id><snippet>if</snippet></ROW><ROW><id>4979486</id><snippet>while</snippet></ROW><ROW><id>4979486</id><snippet>for</snippet></ROW><ROW><id>4979486</id><snippet>return</snippet></ROW><ROW><id>4979486</id><snippet>()</snippet></ROW><ROW><id>4979486</id><snippet>(1)</snippet></ROW><ROW><id>4979486</id><snippet>1</snippet></ROW><ROW><id>4979486</id><snippet>()</snippet></ROW><ROW><id>4979486</id><snippet>return</snippet></ROW><ROW><id>4979486</id><snippet>()</snippet></ROW><ROW><id>4979486</id><snippet>()</snippet></ROW><ROW><id>4979486</id><snippet>()</snippet></ROW><ROW><id>4979486</id><snippet>return</snippet></ROW><ROW><id>4979486</id><snippet>,</snippet></ROW><ROW><id>4979486</id><snippet>()</snippet></ROW><ROW><id>4979486</id><snippet>()</snippet></ROW><ROW><id>4979486</id><snippet>()</snippet></ROW><ROW><id>4979486</id><snippet>return</snippet></ROW><ROW><id>4979569</id><snippet>some_func(*params)
</snippet></ROW><ROW><id>4980306</id><snippet>for windspeed in range(5, 55, 5):
    for temp in range(-20, 70, 10):
        print "%3d" % int(35.74 + (0.6215*(temp)) - (35.75* windspeed**0.16) + (0.4275*(temp)) * (windspeed**0.16)),
    print
</snippet></ROW><ROW><id>4980306</id><snippet>-34 -22 -10   1  12  24  36  48  59
-40 -28 -15  -3   8  21  33  46  58
-45 -32 -19  -6   6  19  31  44  57
-48 -35 -21  -8   4  17  30  43  56
-50 -37 -24 -10   2  16  29  42  56
-53 -39 -25 -12   1  14  28  42  55
-54 -41 -27 -13   0  13  27  41  55
-56 -42 -28 -14   0  13  26  40  54
-58 -44 -29 -15  -1  12  26  40  54
-59 -45 -31 -16  -2  11  25  39  54
</snippet></ROW><ROW><id>4980323</id><snippet>(r'^grappelli/', include('grappelli.urls'))
</snippet></ROW><ROW><id>4980323</id><snippet>include</snippet></ROW><ROW><id>4980323</id><snippet>from grappelli.urls import urlpatterns as grappelli_urls

(r'^grappelli/', include(grappelli_urls)),
</snippet></ROW><ROW><id>4980323</id><snippet>grappelli</snippet></ROW><ROW><id>4980323</id><snippet>&gt;&gt;&gt; print grappelli
exception: variable undefined
&gt;&gt;&gt; grappelli = 'hello' # we just defined grappelli
&gt;&gt;&gt; print grappelli
'hello'
</snippet></ROW><ROW><id>4980585</id><snippet>f(filename, some_function)</snippet></ROW><ROW><id>4980585</id><snippet>f(filename, lambda fh: fh.whatever(x))</snippet></ROW><ROW><id>4980585</id><snippet>f(filename, fh, fh.whatever(x))</snippet></ROW><ROW><id>4980585</id><snippet>fh</snippet></ROW><ROW><id>4980585</id><snippet>reverse_function</snippet></ROW><ROW><id>4980585</id><snippet>reverse_function(lambda: "hello world" print)</snippet></ROW><ROW><id>4980585</id><snippet>print "hello world"</snippet></ROW><ROW><id>4980585</id><snippet>loop</snippet></ROW><ROW><id>4980585</id><snippet>for ... in</snippet></ROW><ROW><id>4980585</id><snippet>for(collection, function)</snippet></ROW><ROW><id>4981334</id><snippet>#urls
urlpatterns += patterns('',
url(r'^article/rate/', 'article.rate'),

#views 
def rate(request):
    if request.method == 'POST':
       # use post data to complete the rating..

#javascript
$.post("/article/rate", { rating: 3, article: 2 },
    function(data) {
       // success! so now set the UI star to 3
});
</snippet></ROW><ROW><id>4981334</id><snippet>checked</snippet></ROW><ROW><id>4981345</id><snippet>indices.sort(key = lambda x:mylist[x], reverse = True)
</snippet></ROW><ROW><id>4981612</id><snippet>response = render_to_response(template_name, locals(), context-etc..)
response.set_cookie("favorite_color",request.GET["favorite_color"])
return response
</snippet></ROW><ROW><id>4981674</id><snippet>from pyswitch import Switch

mySwitch = Switch()

@myswitch.caseRegEx(regex1)
def doSomething(matchObj, *args, **kwargs):
    # Do Something
    return 1

@myswitch.caseRegEx(regex2)
def doSomethingElse(matchObj, *args, **kwargs):
    # Do Something Else
    return 2

rval = myswitch(stringYouWantToSwitchOn)
</snippet></ROW><ROW><id>4981737</id><snippet>def caught_speeding(speed, is_birthday):
    adjustment = 5 if is_birthday else 0
    if speed &lt;= 60 + adjustment:
        return 0
    elif speed &lt;= 80 + adjustment:
        return 1
    else:
        return 2
</snippet></ROW><ROW><id>4981918</id><snippet>lines.pop(0)</snippet></ROW><ROW><id>4981918</id><snippet>l.remove()</snippet></ROW><ROW><id>4981918</id><snippet>del l</snippet></ROW><ROW><id>4981918</id><snippet>from matplotlib import pyplot
import numpy, weakref
a = numpy.arange(int(1e3))
fig = pyplot.Figure()
ax  = fig.add_subplot(1, 1, 1)
lines = ax.plot(a)

l = lines.pop(0)
wl = weakref.ref(l)  # create a weak reference to see if references still exist
#                      to this object
print wl  # not dead
l.remove()
print wl  # not dead
del l
print wl  # dead  (remove either of the steps above and this is still live)
</snippet></ROW><ROW><id>4981918</id><snippet>remove</snippet></ROW><ROW><id>4981918</id><snippet>lines.pop(0).remove()
</snippet></ROW><ROW><id>4981999</id><snippet>Content-Type</snippet></ROW><ROW><id>4981999</id><snippet>output = response.decode('utf-8')
</snippet></ROW><ROW><id>4982003</id><snippet>__builtin__</snippet></ROW><ROW><id>4982163</id><snippet>    if choice == "car":
        return CarRoom()
</snippet></ROW><ROW><id>4982191</id><snippet>import random
def biasedRandom(lo, hi, target, steps=1):
    if lo &gt;= hi:
        raise ValueError("lo should be less than hi")
    elif target &lt; lo or target &gt;= hi:
        raise ValueError("target not in range(lo, hi)")
    else:
        num = random.randint(lo, hi)
        for i in range(steps):
            num += int(random.random() * (target - num))
        return num
</snippet></ROW><ROW><id>4982321</id><snippet>lxml.html</snippet></ROW><ROW><id>4982497</id><snippet>tuple</snippet></ROW><ROW><id>4982497</id><snippet>class Region(tuple):
    pass

region = Region(( "buffer", "region" ))
region.cmd = ( "kill", "mark" )
</snippet></ROW><ROW><id>4982560</id><snippet>$within</snippet></ROW><ROW><id>4982560</id><snippet>$within</snippet></ROW><ROW><id>4982752</id><snippet>with open("second.txt") as second_file:
    second_values = set(second_file.read().lower().split())

with open("first.txt") as first_file:
    with open("third.txt", "wt") as third_file:
        for line in first_file:
            if line.lower().strip() not in second_values:
                third_file.write(line + "\n")
</snippet></ROW><ROW><id>4982752</id><snippet>with</snippet></ROW><ROW><id>4982752</id><snippet>from __future__ import with_statements</snippet></ROW><ROW><id>4982752</id><snippet>in</snippet></ROW><ROW><id>4982752</id><snippet>not in</snippet></ROW><ROW><id>4982752</id><snippet>in</snippet></ROW><ROW><id>4982752</id><snippet>for</snippet></ROW><ROW><id>4982752</id><snippet>for x in [1, 2, 3]</snippet></ROW><ROW><id>4982828</id><snippet>@classmethod
def make_from_post(cls, post):
    """ Create an object from another object, possibly of a slightly
    different class (like tree Post).  """
    data = {}
    for field in cls._meta.fields:
        if field.primary_key:
            continue
        # Assuming that all default fields for cls are None and thus
        # skipping 'None's from attribute values.
        attrdata = getattr(post, field.name, None)
        if attrdata is not None:
            data[field.name] = attrdata
    return cls(**data)
</snippet></ROW><ROW><id>4982998</id><snippet>\xe0</snippet></ROW><ROW><id>4982998</id><snippet>'\xe0'.decode('iso-8859-8').encode('utf-8')
</snippet></ROW><ROW><id>4983011</id><snippet>from collections import defaultdict

dolol=defaultdict(list)
for data in lol:
    dolol[data[0],data[1]].append(data[2:])
</snippet></ROW><ROW><id>4983359</id><snippet>def strictly_increasing(L):
    return all(x&lt;y for x, y in zip(L, L[1:]))

def strictly_decreasing(L):
    return all(x&gt;y for x, y in zip(L, L[1:]))

def non_increasing(L):
    return all(x&gt;=y for x, y in zip(L, L[1:]))

def non_decreasing(L):
    return all(x&lt;=y for x, y in zip(L, L[1:]))
</snippet></ROW><ROW><id>4983401</id><snippet>{{ job.description|truncatewords:20 }}
</snippet></ROW><ROW><id>4983562</id><snippet>    return 3 * string[:3]
</snippet></ROW><ROW><id>4983565</id><snippet>re.findall</snippet></ROW><ROW><id>4983565</id><snippet>import re

def parse_fields(text):
    r"""
    &gt;&gt;&gt; list(parse_fields('hey,hello,,"hello,world",\'hey,world\''))
    ['hey', 'hello', '', 'hello,world', 'hey,world']
    &gt;&gt;&gt; list(parse_fields('hey,hello,,"hello,world",\'hey,world\','))
    ['hey', 'hello', '', 'hello,world', 'hey,world', '']
    &gt;&gt;&gt; list(parse_fields(',hey,hello,,"hello,world",\'hey,world\','))
    ['', 'hey', 'hello', '', 'hello,world', 'hey,world', '']
    &gt;&gt;&gt; list(parse_fields(''))
    ['']
    &gt;&gt;&gt; list(parse_fields(','))
    ['', '']
    &gt;&gt;&gt; list(parse_fields('testing,quotes not at "the" beginning \'of\' the,string'))
    ['testing', 'quotes not at "the" beginning \'of\' the', 'string']
    &gt;&gt;&gt; list(parse_fields('testing,"unterminated quotes'))
    ['testing', '"unterminated quotes']
    """
    pos = 0
    exp = re.compile(r"""(['"]?)(.*?)\1(,|$)""")
    while True:
        m = exp.search(text, pos)
        result = m.group(2)
        separator = m.group(3)

        yield result

        if not separator:
            break

        pos = m.end(0)

if __name__ == "__main__":
    import doctest
    doctest.testmod()
</snippet></ROW><ROW><id>4983565</id><snippet>(['"]?)</snippet></ROW><ROW><id>4983565</id><snippet>(.*?)</snippet></ROW><ROW><id>4983565</id><snippet>result</snippet></ROW><ROW><id>4983565</id><snippet>\1</snippet></ROW><ROW><id>4983565</id><snippet>(,|$)</snippet></ROW><ROW><id>4983565</id><snippet>separator</snippet></ROW><ROW><id>4983565</id><snippet>m.end(0)</snippet></ROW><ROW><id>4983653</id><snippet>through</snippet></ROW><ROW><id>4983653</id><snippet>class Agent(models.Model):
    ...
    regions = models.ManyToManyField(Region, through='ARM2M')
</snippet></ROW><ROW><id>4983758</id><snippet># import xml.etree.cElementTree as et
import lxml.etree as et
import sys

toc = [
  {'entryno': 1, 'level': 1, 'pageno': 17, 'title': 'title a'},
  {'entryno': 2, 'level': 2, 'pageno': 19, 'title': 'title b'},
  {'entryno': 3, 'level': 1, 'pageno': 25, 'title': 'Smith &amp; Wesson'},
  {'entryno': 4, 'level': 2, 'pageno': 27, 'title': '&lt;duct tape&gt;'},
  {'entryno': 5, 'level': 2, 'pageno': 29, 'title': u'\u0404'},
  ]

root = et.Element("root")
tree = et.ElementTree(root)
parent = {0: root}
for entry in toc:
    level = entry['level']
    entryno = entry['entryno']
    # create the element and link it to its parent
    elem = et.SubElement(parent[level - 1], "entry", {'id': str(entryno)})
    # create children to hold the other data items
    for k, v in entry.iteritems():
        if k in ('entryno', 'level'): continue
        child = et.SubElement(elem, k)
        child.text = unicode(v)
    # record current element as a possible parent
    parent[level] = elem
# tree.write(sys.stdout)
tree.write(sys.stdout, pretty_print=True)
</snippet></ROW><ROW><id>4983895</id><snippet>obj, created = MyModel.objects.get_or_create(keywordArguments)
</snippet></ROW><ROW><id>4984000</id><snippet>Foo.objects.values_list()
</snippet></ROW><ROW><id>4984000</id><snippet>queryset</snippet></ROW><ROW><id>4984000</id><snippet>Foo.objects.values()
</snippet></ROW><ROW><id>4984185</id><snippet>def my_filter(iterable):
    result=[]
    for i in iterable:
        result.append(i)
        if i==5:
            continue
        yield result
        result=[]        

idx = iter(range(0, 10))

for i in my_filter(idx):
    print i
</snippet></ROW><ROW><id>4984304</id><snippet>&gt;&gt;&gt; setattr(str, "hello", lambda: "Hello custom str!")
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
TypeError: can't set attributes of built-in/extension type 'str'
</snippet></ROW><ROW><id>4984304</id><snippet>should_equal</snippet></ROW><ROW><id>4984933</id><snippet>__del__()</snippet></ROW><ROW><id>4985231</id><snippet>import urllib

myPort = "8080"
myParameters = { "date" : "whatever", "another_parameters" : "more_whatever" }

myURL = "http://localhost:%s/read?%s" % (myPort, urllib.urlencode(myParameters)) 
</snippet></ROW><ROW><id>4985365</id><snippet>Content-Type: x-text/html-fragment
</snippet></ROW><ROW><id>4985407</id><snippet>import socket
import httplib
from encryption import GetSSOTicket
import re
from xml.sax import saxutils

username = "login@hotmail.com"
password = "password"

def ReadAll(sock):
    data = ""
    while 1:
        try:
            r = sock.recv(4096)
            data += r
        except socket.timeout:
            break
    return data


def SOAPRequest(xml):
    url = "login.live.com"
    con = httplib.HTTPSConnection(url)

    headers = {"Host": "login.live.com",
                "Accept": "text/plain"}

    con.request("POST", "/RST.srf", xml, headers)

    response = con.getresponse().read()

    con.close()

    return response


def GetTicket(policy, nonce):
    xml = "&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;";
    xml += "&lt;Envelope xmlns=\"http://schemas.xmlsoap.org/soap/envelope/\" xmlns:wsse=\"http://schemas.xmlsoap.org/ws/2003/06/secext\" xmlns:saml=\"urn:oasis:names:tc:SAML:1.0:assertion\" xmlns:wsp=\"http://schemas.xmlsoap.org/ws/2002/12/policy\" xmlns:wsu=\"http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-utility-1.0.xsd\" xmlns:wsa=\"http://schemas.xmlsoap.org/ws/2004/03/addressing\" xmlns:wssc=\"http://schemas.xmlsoap.org/ws/2004/04/sc\" xmlns:wst=\"http://schemas.xmlsoap.org/ws/2004/04/trust\"&gt;&lt;Header&gt;";
    xml += "&lt;ps:AuthInfo xmlns:ps=\"http://schemas.microsoft.com/Passport/SoapServices/PPCRL\" Id=\"PPAuthInfo\"&gt;";
    xml += "&lt;ps:HostingApp&gt;{7108E71A-9926-4FCB-BCC9-9A9D3F32E423}&lt;/ps:HostingApp&gt;";
    xml += "&lt;ps:BinaryVersion&gt;4&lt;/ps:BinaryVersion&gt;";
    xml += "&lt;ps:UIVersion&gt;1&lt;/ps:UIVersion&gt;";
    xml += "&lt;ps:Cookies&gt;&lt;/ps:Cookies&gt;";
    xml += "&lt;ps:RequestParams&gt;AQAAAAIAAABsYwQAAAAxMDMz&lt;/ps:RequestParams&gt;";
    xml += "&lt;/ps:AuthInfo&gt;";
    xml += "&lt;wsse:Security&gt;&lt;wsse:UsernameToken Id=\"user\"&gt;";
    xml += "&lt;wsse:Username&gt;" + username + "&lt;/wsse:Username&gt;";
    xml += "&lt;wsse:Password&gt;" + password + "&lt;/wsse:Password&gt;";
    xml += "&lt;/wsse:UsernameToken&gt;&lt;/wsse:Security&gt;&lt;/Header&gt;&lt;Body&gt;";
    xml += "&lt;ps:RequestMultipleSecurityTokens xmlns:ps=\"http://schemas.microsoft.com/Passport/SoapServices/PPCRL\" Id=\"RSTS\"&gt;";
    xml += "&lt;wst:RequestSecurityToken Id=\"RST0\"&gt;";
    xml += "&lt;wst:RequestType&gt;http://schemas.xmlsoap.org/ws/2004/04/security/trust/Issue&lt;/wst:RequestType&gt;";
    xml += "&lt;wsp:AppliesTo&gt;&lt;wsa:EndpointReference&gt;&lt;wsa:Address&gt;http://Passport.NET/tb";
    xml += "&lt;/wsa:Address&gt;&lt;/wsa:EndpointReference&gt;&lt;/wsp:AppliesTo&gt;&lt;/wst:RequestSecurityToken&gt;";
    xml += "&lt;wst:RequestSecurityToken Id=\"RST1\"&gt;";
    xml += "&lt;wst:RequestType&gt;http://schemas.xmlsoap.org/ws/2004/04/security/trust/Issue&lt;/wst:RequestType&gt;&lt;wsp:AppliesTo&gt;&lt;wsa:EndpointReference&gt;";
    xml += "&lt;wsa:Address&gt;messengerclear.live.com&lt;/wsa:Address&gt;&lt;/wsa:EndpointReference&gt;&lt;/wsp:AppliesTo&gt;";
    xml += "&lt;wsse:PolicyReference URI=\"" + policy + "\"&gt;&lt;/wsse:PolicyReference&gt;&lt;/wst:RequestSecurityToken&gt;";
    xml += "&lt;wst:RequestSecurityToken Id=\"RST2\"&gt;";
    xml += "&lt;wst:RequestType&gt;http://schemas.xmlsoap.org/ws/2004/04/security/trust/Issue&lt;/wst:RequestType&gt;";
    xml += "&lt;wsp:AppliesTo&gt;";
    xml += "&lt;wsa:EndpointReference&gt;";
    xml += "&lt;wsa:Address&gt;contacts.msn.com&lt;/wsa:Address&gt;";
    xml += "&lt;/wsa:EndpointReference&gt;";
    xml += "&lt;/wsp:AppliesTo&gt;";
    xml += "&lt;wsse:PolicyReference URI=\"MBI\"&gt;";
    xml += "&lt;/wsse:PolicyReference&gt;";
    xml += "&lt;/wst:RequestSecurityToken&gt;";
    xml += "&lt;/ps:RequestMultipleSecurityTokens&gt;&lt;/Body&gt;&lt;/Envelope&gt;";

    xmlDoc = SOAPRequest(xml)

    m = re.search(r'&lt;wsse:BinarySecurityToken Id="Compact1"&gt;(.*?)&lt;/wst:BinarySecret&gt;', xmlDoc)
    secret = saxutils.unescape(m.group(1))
    secret = secret.split("&lt;wst:BinarySecret&gt;")[1]

    print "secret:"
    print secret

    m = re.search(r'&lt;wsse:BinarySecurityToken Id="Compact1"&gt;(.*?)&lt;/wsse:BinarySecurityToken&gt;',xmlDoc)
    ticket = saxutils.unescape(m.group(1))

    SSOTicket = GetSSOTicket(secret, nonce)

    return ticket + " " + SSOTicket



def LogIntoNS():
    address = ("64.4.61.219", 1863)

    s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    s.connect(address)
    s.settimeout(3)

    s.send("VER 1 MSNP15 CVR0\r\n")

    ReadAll(s)

    s.send("CVR 2 0x0407 win 6.0 i386 MSNMSGR 8.5 MSMSGS " + username + "\r\n")

    ReadAll(s)

    s.send("USR 3 SSO I " + username + "\r\n")

    recvbuf = ReadAll(s)

    recvbuf = recvbuf[recvbuf.find("USR"):]

    policy = recvbuf.split()[4]

    print "policy:"
    print policy

    nonce = recvbuf.split()[5]
    print "nonce:"
    print nonce

    ticket = GetTicket(policy, nonce)

    print "ticket:"
    print ticket

    s.send("USR 4 SSO S " + ticket + "\r\n")

    print "Sent"

    print s.recv(4096)


LogIntoNS()
</snippet></ROW><ROW><id>4985509</id><snippet>import cherrypy

class HelloWorld(object):
    def index(self):
        return "Hello World!"
    index.exposed = True

cherrypy.quickstart(HelloWorld())
</snippet></ROW><ROW><id>4985564</id><snippet>(driver, passenger)</snippet></ROW><ROW><id>4985564</id><snippet>p = [(driver, passenger) for driver in drivers for passenger in passengers]
self.problem.addVariables(p, [0,1])
</snippet></ROW><ROW><id>4985564</id><snippet>addConstraint()</snippet></ROW><ROW><id>4985564</id><snippet>(passenger, driver)</snippet></ROW><ROW><id>4985564</id><snippet>passenger_set = [zip([e1]*len(drivers), drivers) for e1 in passengers]
for passenger in passenger_set:
    self.problem.addConstraint(MaxSumConstraint(1), passenger)
</snippet></ROW><ROW><id>4985564</id><snippet>(2, 0)</snippet></ROW><ROW><id>4985687</id><snippet>urllib2.urlopen</snippet></ROW><ROW><id>4985898</id><snippet>session.query(WhateverClass).filter(WhateverClass._containerClassId == 5).all()
</snippet></ROW><ROW><id>4985898</id><snippet>session.query(WhateverClass).join(ContainerClass).filter(ContainerClass.id == 5).all()
</snippet></ROW><ROW><id>4986013</id><snippet>&gt;&gt;&gt; items = ["First", "Second", "# First", "Third", "# Second"]
&gt;&gt;&gt; for e in items:
...     if e.startswith('#'):
...             items.remove(e)
...             break
... 
&gt;&gt;&gt; items
['First', 'Second', 'Third', '# Second']
</snippet></ROW><ROW><id>4986160</id><snippet>somevar</snippet></ROW><ROW><id>4986160</id><snippet>True</snippet></ROW><ROW><id>4986160</id><snippet>if any(somecondition(item) for item in items):
    # do something
</snippet></ROW><ROW><id>4986160</id><snippet>required_items = [item for item in items if somecondition(item)]
if required_items:
    # do something
    # if only one required item is ever present, then maybe...
    required_item = required_items[0]
</snippet></ROW><ROW><id>4986475</id><snippet>f.close()</snippet></ROW><ROW><id>4986475</id><snippet>continue</snippet></ROW><ROW><id>4986475</id><snippet>1</snippet></ROW><ROW><id>4986475</id><snippet>close</snippet></ROW><ROW><id>4986640</id><snippet>import module</snippet></ROW><ROW><id>4986640</id><snippet>module.name</snippet></ROW><ROW><id>4986640</id><snippet>from module import *</snippet></ROW><ROW><id>4986640</id><snippet>__init__.py</snippet></ROW><ROW><id>4986640</id><snippet>from dir1.dir2.pack2 import Pack2</snippet></ROW><ROW><id>4986640</id><snippet>from dir2.pack2 import Pack2</snippet></ROW><ROW><id>4986646</id><snippet>import libvirt

conn = libvirt.openReadOnly(None)  # $LIBVIRT_DEFAULT_URI, or give a URI here
assert conn, 'Failed to open connection'

names = conn.listDefinedDomains()
domains = map(conn.lookupByName, names)

ids = conn.listDomainsID()
running = map(conn.lookupByID, ids)

columns = 3

states = {
    libvirt.VIR_DOMAIN_NOSTATE: 'no state',
    libvirt.VIR_DOMAIN_RUNNING: 'running',
    libvirt.VIR_DOMAIN_BLOCKED: 'blocked on resource',
    libvirt.VIR_DOMAIN_PAUSED: 'paused by user',
    libvirt.VIR_DOMAIN_SHUTDOWN: 'being shut down',
    libvirt.VIR_DOMAIN_SHUTOFF: 'shut off',
    libvirt.VIR_DOMAIN_CRASHED: 'crashed',
}
def info(dom):
    [state, maxmem, mem, ncpu, cputime] = dom.info()
    return '%s is %s,' % (dom.name(), states.get(state, state))

print 'Defined domains:'
for row in map(None, *[iter(domains)] * columns):
    for domain in row:
        if domain:
            print info(domain),
    print
print

print 'Running domains:'
for row in map(None, *[iter(running)] * columns):
    for domain in row:
        if domain:
            print info(domain),
    print
</snippet></ROW><ROW><id>4986678</id><snippet>transaction.abort()</snippet></ROW><ROW><id>4986678</id><snippet>transaction.commit()</snippet></ROW><ROW><id>4986701</id><snippet>itertools.groupby()</snippet></ROW><ROW><id>4986701</id><snippet>import csv
from itertools import groupby
from operator import itemgetter

with open("data.csv", "rb") as f:
    next(f)    # Skip header
    for account, lines in groupby(csv.reader(f), itemgetter(0)):
        gross_amount = 0.
        for line in lines:
            print line
            gross_amount += float(line[2])
        print "The total gross amount for account", account, "is", gross_amount
</snippet></ROW><ROW><id>4986738</id><snippet>import re
from BeautifulSoup import BeautifulSoup

# find ".html" or ".pdf" in a string
match = re.compile('\.(html|pdf)')

# parse page content
status, response = http.request("http://www.example.com")
page = BeautifulSoup(response)

# check links
for link in page.findAll('a'):
    try:
        href = link['href']
        if re.search(match, href):
            print href
    except KeyError:
        pass
</snippet></ROW><ROW><id>4986771</id><snippet>if month == 1 or 10:
    # ...
</snippet></ROW><ROW><id>4986771</id><snippet>if (month == 1) or 10:
    # ...
</snippet></ROW><ROW><id>4986771</id><snippet>...</snippet></ROW><ROW><id>4986771</id><snippet>if month in (1, 10):
    month1 = 0
</snippet></ROW><ROW><id>4986771</id><snippet>a = [0, 3, 3, 6, 1, 4, 6, 2, 5, 0, 3, 5]
month1 = a[month - 1]
</snippet></ROW><ROW><id>4986771</id><snippet>d = {1: 0, 2: 3, 3: 3, 4: 6, 5: 1, 6: 4,
     7: 6, 8: 2, 9: 5, 10: 0, 11: 3, 12: 5}
month1 = d[month]
</snippet></ROW><ROW><id>4986771</id><snippet>datetime</snippet></ROW><ROW><id>4986771</id><snippet>from datetime import datetime
month1 = (datetime(2011, month, 1) - datetime(2011, 1, 1)).days % 7
</snippet></ROW><ROW><id>4986914</id><snippet>str(divmod(x, y)[0])
</snippet></ROW><ROW><id>4986914</id><snippet>str(divmod(x, y)[1])
</snippet></ROW><ROW><id>4986914</id><snippet>a, b = divmod(x, y)
str(a)
str(b)
</snippet></ROW><ROW><id>4986914</id><snippet>str(a)</snippet></ROW><ROW><id>4986915</id><snippet>def resize_and_crop(im, mask_width=1000, mask_height=1000):
    width, height = im.size
    aspect = 1.0*width/height
    mask_aspect = 1.0*mask_width/mask_height
    if width != mask_width or height != mask_height:
        if aspect &gt; mask_aspect:
            ratio = 1.0*height/mask_height
            imt = im.transform((mask_width, mask_height), 
                                Image.AFFINE, 
                               (ratio, 0, (width-mask_width*ratio)/2, 0, ratio, 0),
                               Image.CUBIC)
        else:
            ratio = 1.0*width/mask_width
            imt = im.transform((mask_width, mask_height), 
                               Image.AFFINE, 
                               (ratio, 0, 0, 0, ratio, (height-mask_height*ratio)/2),
                               Image.CUBIC)
    else:
        imt = im
    return imt
</snippet></ROW><ROW><id>4987080</id><snippet>children = {}
for obj in tree:
    children.setdefault(obj.parent, []).append(obj)

def preorder(root, children):
    yield root.value
    for child in children.get(root, []):
        for value in preorder(child, children):
            yield value

for root in children[None]:
    for value in preorder(root, children):
        print value
</snippet></ROW><ROW><id>4987080</id><snippet>collections.defaultdict</snippet></ROW><ROW><id>4987203</id><snippet>ctypes</snippet></ROW><ROW><id>4987203</id><snippet>.communicate()</snippet></ROW><ROW><id>4987203</id><snippet>import struct, sys    
from subprocess import Popen, PIPE

vertex_struct = struct.Struct('i f f')

def pack(vertices, n):    
    yield struct.pack('i', n)
    for v in vertices:
        yield vertex_struct.pack(*v)

def main():
    try: n = int(sys.argv[1])
    except IndexError:
        n = 100
    vertices = ((i,i+1,i+2) for i in range(n))

    p = Popen(["./echo_vertices", "random", "arg"], stdin=PIPE, stdout=PIPE)
    out, _ = p.communicate(b''.join(pack(vertices, n)))

    index, x, y = vertex_struct.unpack(out)
    assert index == (n-1) and int(x) == n and int(y) == (n+1)

if __name__ == '__main__':
    main()
</snippet></ROW><ROW><id>4987203</id><snippet>n</snippet></ROW><ROW><id>4987203</id><snippet>import struct, sys
from subprocess import Popen, PIPE
from threading import Thread

def pack(vertices, n):
    yield struct.pack('i', n)
    s = struct.Struct('i f f')
    for v in vertices:
        yield s.pack(*v)

def write(output_file, chunks):
    for chunk in chunks:
        output_file.write(chunk)
    output_file.close()

def main():
    try: n = int(sys.argv[1])
    except IndexError:
        n = 100
    vertices = ((i,i+1,i+2) for i in range(n))

    p = Popen(["./echo_vertices", "random", "arg"], stdin=PIPE, stdout=PIPE)

    Thread(target=write, args=[p.stdin, pack(vertices, n)]).start()

    for line in iter(p.stdout.readline, b''):
        pass
    p.stdout.close()
    sys.stdout.buffer.write(line)
    p.wait()

if __name__ == '__main__':
    main()
</snippet></ROW><ROW><id>4987203</id><snippet>pack()</snippet></ROW><ROW><id>4987203</id><snippet>&gt;&gt;&gt; def f():
...     yield 1
...     yield 2
... 
&gt;&gt;&gt; for i in f():
...     print(i)
...     
1
2
</snippet></ROW><ROW><id>4987203</id><snippet>yield</snippet></ROW><ROW><id>4987203</id><snippet>&gt;&gt;&gt; def g(n):
...     for i in range(n):
...         yield i
... 
&gt;&gt;&gt; list(g(10))
[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]
</snippet></ROW><ROW><id>4987203</id><snippet>yield</snippet></ROW><ROW><id>4987203</id><snippet>s.pack(*v)</snippet></ROW><ROW><id>4987203</id><snippet>pack</snippet></ROW><ROW><id>4987203</id><snippet>&gt;&gt;&gt; def h(a, b):
...     print(a, b)
... 
&gt;&gt;&gt; h(*[1, 'a'])
1 a
&gt;&gt;&gt; h(*range(2))
0 1
&gt;&gt;&gt; h(0, 1)
0 1
</snippet></ROW><ROW><id>4987203</id><snippet>Thread(target=write, args=[p.stdin, pack(vertices, n)]).start()
</snippet></ROW><ROW><id>4987203</id><snippet>write()</snippet></ROW><ROW><id>4987203</id><snippet>args</snippet></ROW><ROW><id>4987203</id><snippet>output_file=p.stdin</snippet></ROW><ROW><id>4987203</id><snippet>chunks=pack(vertices, n)</snippet></ROW><ROW><id>4987203</id><snippet>write()</snippet></ROW><ROW><id>4987203</id><snippet>p.stdin.write(struct.pack('i', n))
p.stdin.write(s.pack(0, 1, 2))
p.stdin.write(s.pack(1, 2, 3))
...
p.stdin.write(s.pack(n-1, n, n+1))
p.stdin.close()
</snippet></ROW><ROW><id>4987203</id><snippet>for line in iter(p.stdout.readline, b''):
    pass
</snippet></ROW><ROW><id>4987203</id><snippet>p.stdout</snippet></ROW><ROW><id>4987203</id><snippet>.readline()</snippet></ROW><ROW><id>4987203</id><snippet>b''</snippet></ROW><ROW><id>4987203</id><snippet>line</snippet></ROW><ROW><id>4987203</id><snippet>iter()</snippet></ROW><ROW><id>4987203</id><snippet>sys.stdout.buffer.write(line)
</snippet></ROW><ROW><id>4987203</id><snippet>p = Popen(...)</snippet></ROW><ROW><id>4987203</id><snippet>p.stdin.write()</snippet></ROW><ROW><id>4987203</id><snippet>stdin</snippet></ROW><ROW><id>4987203</id><snippet>$ echo abc | some_program
</snippet></ROW><ROW><id>4987203</id><snippet>p.stdin</snippet></ROW><ROW><id>4987203</id><snippet>p.wait()</snippet></ROW><ROW><id>4987203</id><snippet>p.wait()</snippet></ROW><ROW><id>4987283</id><snippet>virtualenv foo_env --python=Python2.7
</snippet></ROW><ROW><id>4987283</id><snippet>python</snippet></ROW><ROW><id>4987283</id><snippet>bin</snippet></ROW><ROW><id>4987283</id><snippet>lib</snippet></ROW><ROW><id>4987331</id><snippet>printf()</snippet></ROW><ROW><id>4987331</id><snippet>libc.printf()</snippet></ROW><ROW><id>4987331</id><snippet>ctypes</snippet></ROW><ROW><id>4987331</id><snippet>printf()</snippet></ROW><ROW><id>4987346</id><snippet>virtualenv</snippet></ROW><ROW><id>4987346</id><snippet>pip</snippet></ROW><ROW><id>4987346</id><snippet>curl -O http://peak.telecommunity.com/dist/ez_setup.py
sudo python ez_setup.py
sudo easy_install pip
sudo pip install virtualenv
</snippet></ROW><ROW><id>4987346</id><snippet>virtualenvwrapper</snippet></ROW><ROW><id>4987346</id><snippet>virtualenv</snippet></ROW><ROW><id>4987346</id><snippet>sudo pip install virtualenvwrapper
</snippet></ROW><ROW><id>4987346</id><snippet>~/.bash_profile</snippet></ROW><ROW><id>4987346</id><snippet>~/.bash_profile</snippet></ROW><ROW><id>4987346</id><snippet># Mac OS X specific settings
if [ ${os_name} == 'Darwin' ]; then

    # The last Python added to PATH will be the default Python
    PY_VER=( '3.1' '2.6' '2.7')
    PY_VER_ELEMENTS=${#PY_VER[@]}
    DEFAULT_PY=${PY_VER[${PY_VER_ELEMENTS}-1]}
    PY_FW="/Library/Frameworks/Python.framework/Versions"

    for (( i=0;i&lt;$PY_VER_ELEMENTS;i++)); do
        if [ -x ${PY_FW}/${PY_VER[${i}]}/bin/python${PY_VER[${i}]} ]; then
            PATH="${PY_FW}/${PY_VER[${i}]}/bin:${PATH}"
            export PATH
        fi
    done

    # Check for virtualenv in the default Python
    if [ -x ${PY_FW}/${DEFAULT_PY}/bin/virtualenv ]; then
        export VIRTUALENV_USE_DISTRIBUTE=true
        export WORKON_HOME=$HOME/.virtualenvs
    fi

    # Check for pip
    if [ -x ${PY_FW}/${DEFAULT_PY}/bin/pip ]; then
        export PIP_VIRTUALENV_BASE=$WORKON_HOME
        export PIP_REQUIRE_VIRTUALENV=true
        export PIP_DOWNLOAD_CACHE=$HOME/.pip_download_cache
    fi

    # Enable virtualenvwrapper
    if [ -x ${PY_FW}/${DEFAULT_PY}/bin/virtualenvwrapper.sh ]; then
        source ${PY_FW}/${DEFAULT_PY}/bin/virtualenvwrapper.sh
    fi

fi
</snippet></ROW><ROW><id>4987414</id><snippet>bytes</snippet></ROW><ROW><id>4987414</id><snippet>str</snippet></ROW><ROW><id>4987414</id><snippet>unicode</snippet></ROW><ROW><id>4987414</id><snippet>def whatisthis(s):
    if isinstance(s, str):
        print "ordinary string"
    elif isinstance(s, unicode):
        print "unicode string"
    else:
        print "not a string"
</snippet></ROW><ROW><id>4987488</id><snippet>class saveconfig(object):
    def __init__(self, f):
        self.f = f

    def __get__(self, instance, owner):
        def wrapper(*args):
            print "Saving configuration"
            print instance.cfg
            return self.f(instance, *args)
        return wrapper
</snippet></ROW><ROW><id>4987488</id><snippet>object</snippet></ROW><ROW><id>4987488</id><snippet>self.f()</snippet></ROW><ROW><id>4987488</id><snippet>pbtools</snippet></ROW><ROW><id>4987526</id><snippet>w = QWidget()
w.resize(800, 800)

i = QWidget(w)
i.move(200, 200)
i.setFixedSize(400, 400)
#alternatively: i.setGeometry(200, 200, 400, 400)

i.setStyleSheet("QWidget {background-color:blue}")
w.show()
</snippet></ROW><ROW><id>4987609</id><snippet>if line.startswith("text"):
</snippet></ROW><ROW><id>4988012</id><snippet>list[start:end:step]</snippet></ROW><ROW><id>4988012</id><snippet>l[2]</snippet></ROW><ROW><id>4988012</id><snippet>l[2:5]</snippet></ROW><ROW><id>4988012</id><snippet>&gt;&gt;&gt; l = range(10)
&gt;&gt;&gt; l[::2]         # even  - start at the beginning at take every second item
[0, 2, 4, 6, 8]
&gt;&gt;&gt; l[1::2]        # odd - start at second item and take every second item
[1, 3, 5, 7, 9]
</snippet></ROW><ROW><id>4988012</id><snippet>n</snippet></ROW><ROW><id>4988012</id><snippet>l[(n-1)::n]</snippet></ROW><ROW><id>4988012</id><snippet>&gt;&gt;&gt; l = range(20)
&gt;&gt;&gt; l
[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19]
</snippet></ROW><ROW><id>4988012</id><snippet>&gt;&gt;&gt; l[2::3]
[2, 5, 8, 11, 14, 17]
</snippet></ROW><ROW><id>4988012</id><snippet>l[::n]</snippet></ROW><ROW><id>4988250</id><snippet>pip</snippet></ROW><ROW><id>4988250</id><snippet>virtualenvwrapper</snippet></ROW><ROW><id>4988250</id><snippet>pip</snippet></ROW><ROW><id>4988250</id><snippet>virtualenv</snippet></ROW><ROW><id>4988250</id><snippet>virtualenvwrapper</snippet></ROW><ROW><id>4988250</id><snippet>pip install virtualenvwrapper
</snippet></ROW><ROW><id>4988250</id><snippet>$ which virtualenvwrapper.sh
</snippet></ROW><ROW><id>4988250</id><snippet>virtualenvwrapper_bashrc</snippet></ROW><ROW><id>4988250</id><snippet>virtualenvwrapper.sh</snippet></ROW><ROW><id>4988346</id><snippet>def remove_every_nth_word_from_file(filename, n):
    with open(filename) as f:
        words = f.read().split()
        del words[n - 1::n]
    return words
</snippet></ROW><ROW><id>4988406</id><snippet>__hash__</snippet></ROW><ROW><id>4988406</id><snippet>__eq__</snippet></ROW><ROW><id>4988406</id><snippet>__eq__</snippet></ROW><ROW><id>4988406</id><snippet>a.__eq__(b) == True</snippet></ROW><ROW><id>4988406</id><snippet>hash(a)</snippet></ROW><ROW><id>4988406</id><snippet>hash(b)</snippet></ROW><ROW><id>4988406</id><snippet>__hash__</snippet></ROW><ROW><id>4988406</id><snippet>def __hash__(self):
    return id(self)
</snippet></ROW><ROW><id>4988428</id><snippet>input_text = """Level: 1
Level: 1
Level: 2
Level: 2
Level: 2
Level: 3
Level: 3
Level: 1
Level: 2
Level: 2
Level: 1"""

# Parse input text into a list of levels (as int)
levels = []
for line in input_text.split('\n'):
    try:
        levels.append(int(line.split(': ', 1)[-1]))
    except Exception:
        pass # skip line

# Compute how many children each node has by counting the number of
# consecutive subsequent lines that belong to exactly the next level
counters = [0] * len(levels)
for i, level in enumerate(levels):
    for other in levels[i + 1:]:
        if other == level + 1:
            counters[i] += 1
        elif other == level:
            break

print '\n'.join(':%d' % c for c in counters)
</snippet></ROW><ROW><id>4988440</id><snippet>u</snippet></ROW><ROW><id>4988440</id><snippet>s</snippet></ROW><ROW><id>4988566</id><snippet>virtualenv --no-site-packages foobar</snippet></ROW><ROW><id>4988566</id><snippet>lsvirtualenv</snippet></ROW><ROW><id>4988566</id><snippet>mkvirtualenv --no-site-packages foobar</snippet></ROW><ROW><id>4988578</id><snippet>mkvirtualenv --no-site-packages test1
</snippet></ROW><ROW><id>4988752</id><snippet> web.wsgi.runwsgi = lambda func, addr = None: web.wsgi.runfcgi(func, addr) </snippet></ROW><ROW><id>4989086</id><snippet>%f</snippet></ROW><ROW><id>4989251</id><snippet>    defaultSizeTestCase = WidgetTestCase("testDefaultSize")
    resizeTestCase = WidgetTestCase("testResize")
</snippet></ROW><ROW><id>4989251</id><snippet>   suite = unittest.makeSuite(WidgetTestCase,'test')
</snippet></ROW><ROW><id>4989251</id><snippet>suite = unittest.makeSuite(test_class, 'test')
result = unittest.TestResult()
suite.run(result)
</snippet></ROW><ROW><id>4989323</id><snippet>mmap</snippet></ROW><ROW><id>4989323</id><snippet>size = os.stat(fn).st_size
f = open(fn)
data = mmap.mmap(f.fileno(), size, access=mmap.ACCESS_READ)

m = re.search(r"867-?5309", data)
</snippet></ROW><ROW><id>4989445</id><snippet>class number(object):
    def __init__(self, value)
        self.val = value # or something like that

n = number(2.3)
</snippet></ROW><ROW><id>4989445</id><snippet>int()</snippet></ROW><ROW><id>4989445</id><snippet>str()</snippet></ROW><ROW><id>4989783</id><snippet>zip()</snippet></ROW><ROW><id>4990239</id><snippet>**kw</snippet></ROW><ROW><id>4990239</id><snippet>login</snippet></ROW><ROW><id>4990239</id><snippet>login</snippet></ROW><ROW><id>4990239</id><snippet>login</snippet></ROW><ROW><id>4990239</id><snippet>login</snippet></ROW><ROW><id>4990239</id><snippet>**kw</snippet></ROW><ROW><id>4990239</id><snippet>def say(phrase):
    print phrase

say("Hello, World!")
</snippet></ROW><ROW><id>4990239</id><snippet>**kw</snippet></ROW><ROW><id>4990239</id><snippet>def say(**kw):
    phrase = kw.get('say_what')
    print phrase

say(**{'say_what':"Hello, World!"})
</snippet></ROW><ROW><id>4990239</id><snippet>**</snippet></ROW><ROW><id>4990239</id><snippet>say</snippet></ROW><ROW><id>4990239</id><snippet>say_what</snippet></ROW><ROW><id>4990239</id><snippet>"Hello, World!"</snippet></ROW><ROW><id>4990239</id><snippet>**kw</snippet></ROW><ROW><id>4990239</id><snippet>**kw</snippet></ROW><ROW><id>4990348</id><snippet>PYTHONPATH</snippet></ROW><ROW><id>4990498</id><snippet>print "x: " + str(x)
</snippet></ROW><ROW><id>4990498</id><snippet>print "x:", x
</snippet></ROW><ROW><id>4990498</id><snippet>for month in xrange(1, 12+1):
</snippet></ROW><ROW><id>4990498</id><snippet>balance = float(raw_input("Outstanding Balance: "))
interestRate = float(raw_input("Interest Rate: "))
minPayRate = float(raw_input("Minimum Monthly Payment Rate: "))

for month in xrange(1, 12+1):    
  interestPaid = round(interestRate / 12.0 * balance, 2)
  minPayment = round(minPayRate * balance, 2)
  principalPaid = round(minPayment - interestPaid, 2)
  remainingBalance = round(balance - principalPaid, 2)   

  print 'Month:', month
  print 'Minimum monthly payment:', minPayment
  print 'Principle paid:', principalPaid
  print 'Remaining balance:', remainingBalance

  balance = remainingBalance
</snippet></ROW><ROW><id>4990739</id><snippet>try:
    do_something()
except:
    print "Caught it!"
</snippet></ROW><ROW><id>4990739</id><snippet>KeyboardInterrupt</snippet></ROW><ROW><id>4990739</id><snippet>try:
    f = open('myfile.txt')
    s = f.readline()
    i = int(s.strip())
except IOError as (errno, strerror):
    print "I/O error({0}): {1}".format(errno, strerror)
except ValueError:
    print "Could not convert data to an integer."
except:
    print "Unexpected error:", sys.exc_info()[0]
    raise
</snippet></ROW><ROW><id>4991363</id><snippet>class Match(models.Model):
    player_1 = models.ForeignKey(auth.User)
    score_1 = models.PositiveIntegerField(null=True, blank=True)
    player_2 = models.ForeignKey(auth.USer)
    score_2 = models.PositiveIntegerField(null=True, blank=True)
    court = models.ForeignKey(Court)
    date = models.DateField()

    @property
    def winner(self):
        "None means not played yet, or a draw."
        if self.score_1 &gt; self.score_2:
            return self.player_1
        if self.score_1 &lt; self.score_2:
            return self.player_2

    @property
    def is_draw(self):
        return self.score_1 == self.score_2 and self.score_1 is not None


class Location(models.Model):
    name = models.CharField()

class Court(models.Model):
    location = models.ForeignKey(Location)
    number = models.PositiveIntegerField()
</snippet></ROW><ROW><id>4991448</id><snippet>$sudo /usr/bin/python2.4 setup.py install
</snippet></ROW><ROW><id>4991652</id><snippet>'return' outside function</snippet></ROW><ROW><id>4991652</id><snippet>IndentationError</snippet></ROW><ROW><id>4991652</id><snippet>SyntaxError: invalid syntax</snippet></ROW><ROW><id>4991652</id><snippet>return</snippet></ROW><ROW><id>4991652</id><snippet>retürn</snippet></ROW><ROW><id>4991652</id><snippet>SyntaxError: invalid syntax</snippet></ROW><ROW><id>4992078</id><snippet>globals()</snippet></ROW><ROW><id>4992078</id><snippet>v</snippet></ROW><ROW><id>4992078</id><snippet>"v"</snippet></ROW><ROW><id>4992078</id><snippet>"v"</snippet></ROW><ROW><id>4992085</id><snippet>array ^= numpy.random.rand(len(array)) &lt; prob
</snippet></ROW><ROW><id>4992085</id><snippet>True</snippet></ROW><ROW><id>4992085</id><snippet>&gt;&gt;&gt; bool(array)
ValueError: The truth value of an array with more than one element is ambiguous. Use a.any() or a.all()
</snippet></ROW><ROW><id>4992085</id><snippet>not</snippet></ROW><ROW><id>4992085</id><snippet>bool</snippet></ROW><ROW><id>4992085</id><snippet>not</snippet></ROW><ROW><id>4992085</id><snippet>bool</snippet></ROW><ROW><id>4992085</id><snippet>~array
</snippet></ROW><ROW><id>4992085</id><snippet>numpy.logical_not(array)
</snippet></ROW><ROW><id>4992085</id><snippet>numpy.invert(array)
</snippet></ROW><ROW><id>4992948</id><snippet>records.update((k, 0) for k,v in records.iteritems() if v is None)
</snippet></ROW><ROW><id>4992948</id><snippet>&gt;&gt;&gt; records
{'bar': None, 'baz': 1, 'foo': None}
&gt;&gt;&gt; records.update((k, 0) for k,v in records.iteritems() if v is None)
&gt;&gt;&gt; records
{'bar': 0, 'baz': 1, 'foo': 0}
</snippet></ROW><ROW><id>4993648</id><snippet>#!/usr/bin/env python
</snippet></ROW><ROW><id>4993648</id><snippet>chmod +x foo
</snippet></ROW><ROW><id>4993648</id><snippet>./foo
</snippet></ROW><ROW><id>4993648</id><snippet>dos2unix</snippet></ROW><ROW><id>4993648</id><snippet>dos2unix foo.py</snippet></ROW><ROW><id>4993777</id><snippet>##        self.connect(self.btnClearText, QtCore.SIGNAL('clicked()'), self.label.setText('ABC'))
</snippet></ROW><ROW><id>4993777</id><snippet>ABC</snippet></ROW><ROW><id>4993777</id><snippet>self.label.setText('ABC')</snippet></ROW><ROW><id>4993777</id><snippet>self.connect</snippet></ROW><ROW><id>4993777</id><snippet>value = self.label.setText('ABC')
self.connect(self.btnClearText, QtCore.SIGNAL('clicked()'), value)
</snippet></ROW><ROW><id>4993777</id><snippet>setText</snippet></ROW><ROW><id>4993777</id><snippet>None</snippet></ROW><ROW><id>4993777</id><snippet>connect</snippet></ROW><ROW><id>4993777</id><snippet>None</snippet></ROW><ROW><id>4993777</id><snippet>NoneType</snippet></ROW><ROW><id>4993777</id><snippet>None</snippet></ROW><ROW><id>4993777</id><snippet>def setLabelText(self):
    self.label.setText('ABC')
</snippet></ROW><ROW><id>4993777</id><snippet>self.connect</snippet></ROW><ROW><id>4993777</id><snippet>self.connect(self.btnClearText, QtCore.SIGNAL('clicked()'), self.setLabelText)
</snippet></ROW><ROW><id>4993777</id><snippet>()</snippet></ROW><ROW><id>4993777</id><snippet>self.connect</snippet></ROW><ROW><id>4994084</id><snippet>import datetime
from pylab import *
d = datetime.date.today()
tt = [datetime.time(12,0), datetime.time(13,0)]
b = []
for t in tt:
    b.append(datetime.datetime.combine(d,t))
c = [4,5]
plot(b,c)
show()
</snippet></ROW><ROW><id>4994105</id><snippet>def onListView1ListItemSelected(self, event):
    obj     = event.GetEventObject()
    index   = event.GetIndex()
    columns = obj.GetColumnCount()
    data    = []

    for i in range(columns):
        item = obj.GetItem(index, i)
        data.append(item.GetText())

    print(data)
</snippet></ROW><ROW><id>4994308</id><snippet>import Image
# get an image that is greyscale with alpha
i = Image.open('hsvwheel.png').convert('LA')
# get the two bands
L,A = i.split()
# a fully saturated band 
S, = Image.new('L', i.size, 255).split()
# re-combine the bands
# this keeps tha alpha channel in the new image
i2 = Image.merge('RGBA', (S,L,L,A))  
# save
i2.save('test.png')
</snippet></ROW><ROW><id>4994683</id><snippet>tick_params</snippet></ROW><ROW><id>4994683</id><snippet>ax1.yaxis.get_offset_text().set_color(plot_ax1.get_color())
ax2.yaxis.get_offset_text().set_color(plot_ax2.get_color())
</snippet></ROW><ROW><id>4994683</id><snippet>import matplotlib.pyplot as plt
import numpy as np

numdata = 100
t = np.linspace(0.05, 0.11, numdata)
x1 = np.cumsum(np.random.random(numdata) - 0.5) * 40000
x2 = np.cumsum(np.random.random(numdata) - 0.5) * 0.002

fig = plt.figure()
ax1 = fig.add_subplot(111)
ax2 = ax1.twinx()

# Plotting the data
plot_ax1, = ax1.plot(t, x1, 'r-', label='x1')
plot_ax2, = ax2.plot(t, x2, 'g-', label='x2')

# Setting the label colors
ax2.yaxis.set_offset_position('right') # To set the power indicator of ax2 
ax1.yaxis.label.set_color(plot_ax1.get_color())
ax2.yaxis.label.set_color(plot_ax2.get_color())

# Setting the ticker properties     
tkw = dict(size=4, width=1.5)
ax1.ticklabel_format(style='sci', scilimits=(0,0), axis='y')
ax2.ticklabel_format(style='sci', scilimits=(0,0), axis='y')        
ax1.tick_params(axis='y', colors=plot_ax1.get_color(), **tkw)
ax2.tick_params(axis='y', colors=plot_ax2.get_color(), **tkw)

ax1.yaxis.get_offset_text().set_color(plot_ax1.get_color())
ax2.yaxis.get_offset_text().set_color(plot_ax2.get_color())

ax1.tick_params(axis='x', **tkw)

# Setting the legend
lines = [plot_ax1, plot_ax2]
ax1.legend(lines, [l.get_label() for l in lines],'upper left')

plt.show()
</snippet></ROW><ROW><id>4994822</id><snippet>filelist = []
for inFile in os.listdir('.'):
    if inFile.isdigit():
        if int(inFile) &lt;= int(strftime("%m")):
            year = strftime("%Y")
        else:
            year = int(strftime("%Y"))-1
        filelist.append((year, inFile))
filelist.sort()
for year, inFile in filelist:
    month = months[int(inFile)]
    ...
</snippet></ROW><ROW><id>4994862</id><snippet>twistd -n ftp
</snippet></ROW><ROW><id>4994862</id><snippet>twistd ftp --help

Usage: twistd [options] ftp [options].
WARNING: This FTP server is probably INSECURE do not use it.
Options:
  -p, --port=           set the port number [default: 2121]
  -r, --root=           define the root of the ftp-site. [default:
                    /usr/local/ftp]
  --userAnonymous=  Name of the anonymous user. [default: anonymous]
  --password-file=  username:password-style credentials database
  --version         
  --help            Display this help and exit.
</snippet></ROW><ROW><id>4994930</id><snippet>Foo</snippet></ROW><ROW><id>4994930</id><snippet>Foo</snippet></ROW><ROW><id>4994930</id><snippet>Foo = Foo
</snippet></ROW><ROW><id>4994930</id><snippet>Foo</snippet></ROW><ROW><id>4994930</id><snippet>def test_foo():
    foo = 3
    class A:
        bar = foo
        foo = 42

test_foo()
</snippet></ROW><ROW><id>4995147</id><snippet>N = 3 # for 3 lines of output
p = subprocess.Popen(['/path/to/external-app.sh'], 
    stdout=subprocess.PIPE, stderr=subprocess.PIPE)
stdout, stderr = p.communicate()

if p.returncode != 0:
    print ("ERROR: External app did not complete successfully "
           "(error code is %s)" % p.returncode)
    print "Error/failure details: ", '\n'.join(stderr.splitlines()[-N:])
    status = False
else:
    status = True
</snippet></ROW><ROW><id>4995172</id><snippet># coding=utf-8</snippet></ROW><ROW><id>4995237</id><snippet>data_str = """x1    y1    z1
              x1    y2    z2
              x2    y3    z3"""
</snippet></ROW><ROW><id>4995237</id><snippet>data_list = [d.split() for d in data_str.splitlines()] # [['x1', 'y1', 'z1'], ['x1', 'y2', 'z2'], ['x2', 'y3', 'z3']]
</snippet></ROW><ROW><id>4995237</id><snippet>from collections import defaultdict
data_dict = defaultdict(list)
for data_row in data_list: # E.g., data_row = ['x1', 'y1', 'z1']
   data_dict[data_row[0]].append(data_row[1:])
print data_dict # defaultdict(&lt;type 'list'&gt;, {'x2': [['y3', 'z3']], 'x1': [['y1', 'z1'], ['y2', 'z2']]})
</snippet></ROW><ROW><id>4995368</id><snippet>   order = orders[0], orders.get(id=3), etc.
   return render_to_response('service_step1.html', {'orders':order }, context_instance = RequestContext(request))
</snippet></ROW><ROW><id>4995368</id><snippet>   {{ orders.0.id }}
   {{ orders.5.id }}
</snippet></ROW><ROW><id>4995435</id><snippet>encodings/__init__.py</snippet></ROW><ROW><id>4995480</id><snippet>.find(text=True)</snippet></ROW><ROW><id>4995480</id><snippet>&gt;&gt;&gt; BeautifulSoup.BeautifulSOAP('&lt;html&gt;yes&lt;b&gt;no&lt;/b&gt;&lt;/html&gt;').find(text=True)
u'yes'
&gt;&gt;&gt; BeautifulSoup.BeautifulSOAP('&lt;html&gt;&lt;b&gt;no&lt;/b&gt;yes&lt;/html&gt;').find(text=True)
u'no'
</snippet></ROW><ROW><id>4995480</id><snippet>&gt;&gt;&gt; BeautifulSoup.BeautifulSOAP('&lt;html&gt;&lt;b&gt;no&lt;/b&gt;yes&lt;/html&gt;').html.find(text=True, recursive=False)
u'yes'
&gt;&gt;&gt; BeautifulSoup.BeautifulSOAP('&lt;html&gt;yes&lt;b&gt;no&lt;/b&gt;&lt;/html&gt;').html.find(text=True, recursive=False)
u'yes'
</snippet></ROW><ROW><id>4995728</id><snippet>foreach (var subitem in myList.Select(si =&gt; new {a = si[0], b = si[1], c = si[2]})
{
                int a = subitem.a;
                int b = subitem.b;
                int c = subitem.c;
                continue;
}
</snippet></ROW><ROW><id>4995896</id><snippet>import sys
import time

def spinning_cursor():
    cursor='/-\|'
    i = 0
    while 1:
        yield cursor[i]
        i = (i + 1) % len(cursor)


for c in spinning_cursor():
    sys.stdout.write(c)
    sys.stdout.flush()
    time.sleep(0.1)
    sys.stdout.write('\b')
</snippet></ROW><ROW><id>4996043</id><snippet>(?:...)</snippet></ROW><ROW><id>4996043</id><snippet>p = re.compile(r'((?:Friday|Saturday)\s*\d{1,2})')
</snippet></ROW><ROW><id>4996189</id><snippet>&gt;&gt;&gt; x = [0]
&gt;&gt;&gt; y = x
&gt;&gt;&gt; y[0] = 4
&gt;&gt;&gt; y
[4]
&gt;&gt;&gt; x
[4]
&gt;&gt;&gt; x is y
True
</snippet></ROW><ROW><id>4996407</id><snippet>import pywintypes, win32file, win32con
def changeFileCreationTime(fname, newtime):
    wintime = pywintypes.Time(newtime)
    winfile = win32file.CreateFile(
        fname, win32con.GENERIC_WRITE,
        win32con.FILE_SHARE_READ | win32con.FILE_SHARE_WRITE | win32con.FILE_SHARE_DELETE,
        None, win32con.OPEN_EXISTING,
        win32con.FILE_ATTRIBUTE_NORMAL, None)

    win32file.SetFileTime(winfile, wintime, None, None)

    winfile.close()
</snippet></ROW><ROW><id>4996681</id><snippet>self.__class__</snippet></ROW><ROW><id>4996681</id><snippet>class Foo(object):
    def __init__(self, data):
        self.data = data

    def get_new(self):
        data = # Do interesting things
        return self.__class__(data)
</snippet></ROW><ROW><id>4996681</id><snippet>@classmethod</snippet></ROW><ROW><id>4996681</id><snippet>#Do interesting things</snippet></ROW><ROW><id>4996681</id><snippet>type(self)</snippet></ROW><ROW><id>4996681</id><snippet>object</snippet></ROW><ROW><id>4996681</id><snippet>&gt;&gt;&gt; class Foo:
...     pass
... 
&gt;&gt;&gt; f = Foo()
&gt;&gt;&gt; type(f)
&lt;type 'instance'&gt;
&gt;&gt;&gt; f.__class__    # Note that the __class__ attribute still works
&lt;class '__main__.Foo'&gt;
</snippet></ROW><ROW><id>4996681</id><snippet>object</snippet></ROW><ROW><id>4996681</id><snippet>self.__class__</snippet></ROW><ROW><id>4996812</id><snippet>NULL</snippet></ROW><ROW><id>4996812</id><snippet>ldd</snippet></ROW><ROW><id>4996812</id><snippet>otool -L</snippet></ROW><ROW><id>4996943</id><snippet>p = subprocess.Popen(cmd, stdout=subprocess.PIPE, stderr=subprocess.PIPE)
out, err = p.communicate()
# do something with out, err, or don't bother altogether.
</snippet></ROW><ROW><id>4996943</id><snippet>cmd</snippet></ROW><ROW><id>4996943</id><snippet>subprocess</snippet></ROW><ROW><id>4996943</id><snippet>call</snippet></ROW><ROW><id>4996943</id><snippet>&gt;&gt;&gt; subprocess.call('ping 127.0.0.1')

Pinging 127.0.0.1 with 32 bytes of data:
Reply from 127.0.0.1: bytes=32 time&lt;1ms TTL=128
Reply from 127.0.0.1: bytes=32 time&lt;1ms TTL=128
Reply from 127.0.0.1: bytes=32 time&lt;1ms TTL=128
Reply from 127.0.0.1: bytes=32 time&lt;1ms TTL=128

Ping statistics for 127.0.0.1:
    Packets: Sent = 4, Received = 4, Lost = 0 (0% loss),
Approximate round trip times in milli-seconds:
    Minimum = 0ms, Maximum = 0ms, Average = 0ms
0
&gt;&gt;&gt; subprocess.call('ping 127.0.0.1', stdout=subprocess.PIPE)
0
</snippet></ROW><ROW><id>4996943</id><snippet>subprocess.call</snippet></ROW><ROW><id>4997322</id><snippet>python manage.py runserver 0.0.0.0:8000
</snippet></ROW><ROW><id>4997458</id><snippet>recover</snippet></ROW><ROW><id>4997458</id><snippet>from lxml import etree

parser = etree.XMLParser(recover=True) # recover from bad characters.
root = etree.fromstring(broken_xml, parser=parser)
print etree.tostring(root)
</snippet></ROW><ROW><id>4997458</id><snippet>&lt;root&gt;
&lt;element&gt;
&lt;name&gt;name  surname&lt;/name&gt;
&lt;mail&gt;name@name.org&lt;/mail&gt;
&lt;/element&gt;
&lt;/root&gt;
</snippet></ROW><ROW><id>4997735</id><snippet>.</snippet></ROW><ROW><id>4997735</id><snippet>+</snippet></ROW><ROW><id>4997735</id><snippet>exec('/var/www/cgi-bin/test.cgi ' . escapeshellcmd($_POST["var"]));
</snippet></ROW><ROW><id>4997891</id><snippet>total_paid = 0
</snippet></ROW><ROW><id>4997891</id><snippet>+=</snippet></ROW><ROW><id>4997891</id><snippet>total_paid += 1
</snippet></ROW><ROW><id>4997891</id><snippet>total_paid = total_paid + 1</snippet></ROW><ROW><id>4997891</id><snippet>total_paid</snippet></ROW><ROW><id>4997947</id><snippet>msvcrt.setmode(sys.stdout.fileno(), os.O_BINARY)</snippet></ROW><ROW><id>4997948</id><snippet>{ 
  's': {'u' : 10, 'x' : 5}, 
  'u': {'v' : 1, 'x' : 2}, 
  'v': {'y' : 4}, 
  'x': {'u' : 3, 'v' : 9, 'y' : 2}, 
  'y': {'s' : 7, 'v' : 6}
}
</snippet></ROW><ROW><id>4997976</id><snippet>d = ast.literal_eval('{' + s[1:-1] + '}')
</snippet></ROW><ROW><id>4998211</id><snippet>ctypes</snippet></ROW><ROW><id>4998211</id><snippet>ctypes</snippet></ROW><ROW><id>4998211</id><snippet>vertex</snippet></ROW><ROW><id>4998211</id><snippet>typedef struct
{
    int index;
    float x, y;
} vertex;
</snippet></ROW><ROW><id>4998211</id><snippet>vertex_dtype = [('index', 'i'), ('x', 'f'), ('y', 'f')]
</snippet></ROW><ROW><id>4998211</id><snippet>ctypes</snippet></ROW><ROW><id>4998211</id><snippet>class Vertex(ctypes.Structure):
    _fields_ = [("index", ctypes.c_int),
                ("x", ctypes.c_float),
                ("y", ctypes.c_float)]
</snippet></ROW><ROW><id>4998211</id><snippet>ctypes</snippet></ROW><ROW><id>4998211</id><snippet>find_vertex()</snippet></ROW><ROW><id>4998211</id><snippet>from numpy.ctypeslib import ndpointer
lib = ctypes.CDLL(...)
lib.find_vertex.argtypes = [ndpointer(dtype=vertex_dtype, flags="C_CONTIGUOUS"),
                            ctypes.c_int,
                            ctypes.POINTER(Vertex),
                            ctypes.POINTER(Vertex)]
lib.find_vertex.restypes = None
</snippet></ROW><ROW><id>4998211</id><snippet>vertices = numpy.empty(1000, dtype=vertex_dtype)
</snippet></ROW><ROW><id>4998211</id><snippet>lower = Vertex()
higher = Vertex()
</snippet></ROW><ROW><id>4998211</id><snippet>lib.find_vertex(vertices, len(vertices), lower, higher)
</snippet></ROW><ROW><id>4998211</id><snippet>ctypes</snippet></ROW><ROW><id>4998211</id><snippet>vertices</snippet></ROW><ROW><id>4998211</id><snippet>ctypes</snippet></ROW><ROW><id>4998688</id><snippet>import re
re.split('; |, ',str)
</snippet></ROW><ROW><id>4998688</id><snippet>&gt;&gt;&gt; a='Beautiful, is; better*than\nugly'
&gt;&gt;&gt; import re
&gt;&gt;&gt; re.split('; |, |\*|\n',a)
['Beautiful', 'is', 'better', 'than', 'ugly']
</snippet></ROW><ROW><id>4998842</id><snippet>Count the values in a that year with Django's .count() .
If not complete:
    Count the values for each month in that year
    If not complete:
        Count the values for each day in that month
</snippet></ROW><ROW><id>4999123</id><snippet>- url: /crossdomain.xml 
  mime_type: text/xml
  static_files: static/crossdomain.xml 
  upload: static/crossdomain.xml
</snippet></ROW><ROW><id>4999123</id><snippet>&lt;?xml version="1.0"?&gt;
&lt;!DOCTYPE cross-domain-policy SYSTEM "http://www.adobe.com/xml/dtds/cross-domain-policy.dtd"&gt;
&lt;cross-domain-policy&gt;


&lt;!-- Read this: www.adobe.com/devnet/articles/crossdomain_policy_file_spec.html --&gt;

&lt;!-- Most restrictive policy: --&gt;
&lt;!--
    &lt;site-control permitted-cross-domain-policies="none"/&gt;
--&gt;


&lt;!-- Least restrictive policy: --&gt;
    &lt;site-control permitted-cross-domain-policies="all"/&gt;
    &lt;allow-access-from domain="*" to-ports="*" secure="false"/&gt;
    &lt;allow-http-request-headers-from domain="*" headers="*" secure="false"/&gt;
&lt;!--
  If you host a crossdomain.xml file with allow-access-from domain=“*”      
  and don’t understand all of the points described here, you probably       
  have a nasty security vulnerability. ~ simon willison
--&gt;

&lt;/cross-domain-policy&gt;
</snippet></ROW><ROW><id>4999129</id><snippet>P(x) = a*x^2 + b*x + c</snippet></ROW><ROW><id>4999129</id><snippet>r1</snippet></ROW><ROW><id>4999129</id><snippet>r2</snippet></ROW><ROW><id>4999129</id><snippet>P(x) = 0</snippet></ROW><ROW><id>4999129</id><snippet>a*(x-r1)(x-r2)</snippet></ROW><ROW><id>4999158</id><snippet>def immutable_meta(name, bases, dct):
    class Meta(type):
        def __init__(cls, name, bases, dct):
            type.__setattr__(cls,"attr",set(dct.keys()))
            type.__init__(cls, name, bases, dct)

        def __setattr__(cls, attr, value):
            if attr not in cls.attr:
                raise AttributeError ("Cannot assign attributes to this class")
            return type.__setattr__(cls, attr, value)
    return Meta(name, bases, dct)


class A:
    __metaclass__ = immutable_meta
    b = "test"

a = A()
a.c = 10 # this works
A.c = 20 # raises valueError
</snippet></ROW><ROW><id>4999201</id><snippet>from functools import wraps
import warnings

def deprecated(message, newfunc):
    def _deprecated(func):
        @wraps(func)
        def _wrapped(*args, **kwds):
            warnings.warn(message + ', ' + newfunc, 
                DeprecationWarning, stacklevel=2)
            return func(*args, **kwds)
        return _wrapped
    return _deprecated
</snippet></ROW><ROW><id>4999201</id><snippet>@deprecated("function foo is deprecated", "use bar instead")
def foo(bar):
    print 'Hello', bar
foo('World')
</snippet></ROW><ROW><id>4999201</id><snippet>teste.py:17: DeprecationWarning: function foo is deprecated, use bar instead
  foo('World')
Hello World
</snippet></ROW><ROW><id>4999201</id><snippet>class Foo(object):
    @deprecated("method bar is deprecated", "use baz instead")
    def bar(self, baz):
        print 'Goodbye', baz
f = Foo()
f.bar('World')
</snippet></ROW><ROW><id>4999201</id><snippet>teste.py:25: DeprecationWarning: method bar is deprecated, use baz instead
  f.bar('World')
Goodbye World
</snippet></ROW><ROW><id>4999201</id><snippet>stacklevel</snippet></ROW><ROW><id>4999201</id><snippet>warnings.warn</snippet></ROW><ROW><id>4999284</id><snippet>import collections

class Dict(dict):
    def __init__(self, inp=None):
        if isinstance(inp,dict):
            super(Dict,self).__init__(inp)
        else:
            super(Dict,self).__init__()
            if isinstance(inp, (collections.Mapping, collections.Iterable)): 
                si = self.__setitem__
                for k,v in inp:
                    si(k,v)

    def __setitem__(self, k, v):
        try:
            self.__getitem__(k)
            raise ValueError("duplicate key '{0}' found".format(k))
        except KeyError:
            super(Dict,self).__setitem__(k,v)
</snippet></ROW><ROW><id>4999284</id><snippet>dico = Dict(
    ('root', Dict(
        ('a', Dict(
            ('some_key', 'value'),
            ('another_key', 'another_value')
        ),
        ('b', Dict(
            ('some_key', 'value')
        ),
        ('c', Dict(
            ('some_key', 'value'),
            ('another_key', 'another_value')
        ),

        ....
    )
)
</snippet></ROW><ROW><id>4999510</id><snippet>&lt;?xml&gt;</snippet></ROW><ROW><id>4999510</id><snippet>from xml.etree import ElementTree as ET
ET.register_namespace('com',"http://www.company.com") #some name

# build a tree structure
root = ET.Element("{http://www.company.com}STUFF")
body = ET.SubElement(root, "{http://www.company.com}MORE_STUFF")
body.text = "STUFF EVERYWHERE!"

# wrap it in an ElementTree instance, and save as XML
tree = ET.ElementTree(root)

tree.write("page.xml",
           xml_declaration=True,encoding='utf-8',
           method="xml")
</snippet></ROW><ROW><id>4999510</id><snippet>&lt;?xml version='1.0' encoding='utf-8'?&gt;&lt;com:STUFF xmlns:com="http://www.company.com"&gt;&lt;com:MORE_STUFF&gt;STUFF EVERYWHERE!&lt;/com:MORE_STUFF&gt;&lt;/com:STUFF&gt;
</snippet></ROW><ROW><id>4999510</id><snippet>&lt;?xml version='1.0' encoding='utf-8'?&gt;
&lt;com:STUFF xmlns:com="http://www.company.com"&gt;
    &lt;com:MORE_STUFF&gt;STUFF EVERYWHERE!&lt;/com:MORE_STUFF&gt;
&lt;/com:STUFF&gt;
</snippet></ROW><ROW><id>4999510</id><snippet>from xml.etree import ElementTree as ET

# build a tree structure
root = ET.Element("{http://www.company.com}STUFF")
body = ET.SubElement(root, "{http://www.company.com}MORE_STUFF")
body.text = "STUFF EVERYWHERE!"

# wrap it in an ElementTree instance, and save as XML
tree = ET.ElementTree(root)

tree.write("page.xml",
           xml_declaration=True,encoding='utf-8',
           method="xml",default_namespace='http://www.company.com')
</snippet></ROW><ROW><id>4999510</id><snippet>&lt;?xml version='1.0' encoding='utf-8'?&gt;
&lt;STUFF xmlns="http://www.company.com"&gt;
    &lt;MORE_STUFF&gt;STUFF EVERYWHERE!&lt;/MORE_STUFF&gt;
&lt;/STUFF&gt;
</snippet></ROW><ROW><id>4999679</id><snippet>Toy.objects.filter(toy_owners__parents=parent)
</snippet></ROW><ROW><id>4999724</id><snippet>convert file.png file.pdf
</snippet></ROW><ROW><id>4999724</id><snippet>pilconvert file.png file.pdf
</snippet></ROW><ROW><id>4999724</id><snippet>% sudo easy_install reportlab
Searching for reportlab
Reading http://pypi.python.org/simple/reportlab/
Reading http://www.reportlab.com/
Best match: reportlab 2.5
Downloading http://pypi.python.org/packages/source/r/reportlab/reportlab-2.5.tar.gz#md5=cdf8b87a6cf1501de1b0a8d341a217d3
Processing reportlab-2.5.tar.gz
</snippet></ROW><ROW><id>4999741</id><snippet>mmap</snippet></ROW><ROW><id>4999741</id><snippet>mmap</snippet></ROW><ROW><id>4999741</id><snippet>&gt;&gt;&gt; f = open("bonnie.txt", "wb")
&gt;&gt;&gt; f.write("My Bonnie lies over the ocean.")
&gt;&gt;&gt; f.close()
&gt;&gt;&gt; f.open("bonnie.txt", "r+b")
&gt;&gt;&gt; mm = mmap(f.fileno(), 0)
&gt;&gt;&gt; print mm[3:9]
Bonnie
</snippet></ROW><ROW><id>4999741</id><snippet>mmap</snippet></ROW><ROW><id>4999741</id><snippet>&gt;&gt;&gt; print mm[24:]
ocean.
&gt;&gt;&gt; mm[24:] = "sea.  "
&gt;&gt;&gt; print mm[:]
My Bonnie lies over the sea.  
</snippet></ROW><ROW><id>5000218</id><snippet>&gt;&gt;&gt; from operator import itemgetter
&gt;&gt;&gt; import pprint
&gt;&gt;&gt; pprint.pprint(sorted(((i,k) for i,j in INPUT for k in j), key=itemgetter(1)))
[('A', (0.12, 'how')),
 ('A', (0.26000000000000001, 'are')),
 ('A', (0.69999999999999996, 'you')),
 ('A', (0.90000000000000002, 'mike')),
 ('B', (1.23, 'fine')),
 ('B', (1.5, 'thanks')),
 ('B', (1.6000000000000001, 'and you')),
 ('A', (1.8999999999999999, "I'm fine")),
 ('C', (2.1200000000000001, 'good')),
 ('C', (2.2400000000000002, 'morning')),
 ('C', (3.1299999999999999, 'guys'))]
</snippet></ROW><ROW><id>5000218</id><snippet>[(i,k) for i,j in INPUT for k in j]
</snippet></ROW><ROW><id>5000218</id><snippet>[('A', (0.12, 'how')),
 ('A', (0.26, 'are')),
 ('A', (0.7, 'you')),
 ('A', (0.9, 'mike')),
 ('A', (1.9, "I'm fine")),
 ('B', (1.23, 'fine')),
 ('B', (1.5, 'thanks')),
 ('B', (1.6, 'and you')),
 ('C', (2.12, 'good')),
 ('C', (2.24, 'morning')),
 ('C', (3.13, 'guys'))]
</snippet></ROW><ROW><id>5000218</id><snippet>sorted(L, key=itemgetter(1))
</snippet></ROW><ROW><id>5000717</id><snippet>&lt;div class="dialog"&gt;
    &lt;h2&gt;Hello World&lt;/h2&gt;
    &lt;div class="contents"&gt;

   This is a simple dialog rendered by using a macro and
    a call block.

    &lt;/div&gt;
&lt;/div&gt;
</snippet></ROW><ROW><id>5000717</id><snippet>caller()</snippet></ROW><ROW><id>5000717</id><snippet>call</snippet></ROW><ROW><id>5001462</id><snippet>&gt;&gt;&gt; s = u'[obj1,obj2,ob3]'
&gt;&gt;&gt; n = [e.encode('utf-8') for e in s.strip('[]').split(',')]
&gt;&gt;&gt; n
['obj1', 'obj2', 'ob3']
</snippet></ROW><ROW><id>5001505</id><snippet>random_key = os.urandom(16)
</snippet></ROW><ROW><id>5001555</id><snippet>--prefix</snippet></ROW><ROW><id>5001555</id><snippet>./configure</snippet></ROW><ROW><id>5001555</id><snippet>./configure --prefix=/Path/To/Where/I/Want/Python/After/Compilation/</snippet></ROW><ROW><id>5001555</id><snippet>$HOME/packages/Python-2.7</snippet></ROW><ROW><id>5001555</id><snippet>make</snippet></ROW><ROW><id>5001555</id><snippet>make install</snippet></ROW><ROW><id>5001555</id><snippet>sudo</snippet></ROW><ROW><id>5001555</id><snippet>AssertionError</snippet></ROW><ROW><id>5001695</id><snippet>html_data=html_data.decode("UTF-8","ignore")
html_data=html_data.encode("UTF-8","ignore")
</snippet></ROW><ROW><id>5001695</id><snippet>lxml.HTML()</snippet></ROW><ROW><id>5001695</id><snippet>utf-8</snippet></ROW><ROW><id>5001696</id><snippet>def parsePsycopgSQLArray(input):
    import csv
    import cStringIO

    input = input.strip("{")
    input = input.strip("}")

    buffer = cStringIO.StringIO(input)
    reader = csv.reader(buffer, delimiter=',', quotechar='"')   

    return reader.next() #There can only be one row 

if __name__ == "__main__":
    text = '{2f5e5fef-1e8c-43a2-9a11-3a39b2cbb45e,"Marc, Dirk en Koen",398547,85.5,-9.2, 62fe6393-00f7-418d-b0b3-7116f6d5cf10}' 
    result = parsePsycopgSQLArray(text)
    print result
</snippet></ROW><ROW><id>5002035</id><snippet>PyThreadState</snippet></ROW><ROW><id>5003115</id><snippet>try:
    from opencv.cv import *
    from opencv.highgui import *
except:
    #
    # Different OpenCV installs name their packages differently.
    #
    from cv import *

if __name__ == '__main__':
    import sys
    #
    # 1 = Force the image to be loaded as RGB
    #
    img = LoadImage (sys.argv[1], 1)
    NamedWindow ('img')
    ShowImage ('img', img)
    WaitKey ()

    #
    # Canny and Harris expect grayscale  (8-bit) input.
    # Convert the image to grayscale.  This is a two-step process:
    #   1.  Convert to 3-channel YCbCr image
    #   2.  Throw away the chroma (Cb, Cr) and keep the luma (Y)
    #
    yuv = CreateImage(GetSize(img), 8, 3)
    gray = CreateImage(GetSize(img), 8, 1)
    CvtColor(img, yuv, CV_BGR2YCrCb)
    Split(yuv, gray, None, None, None)

    canny = CreateImage(GetSize(img), 8, 1)
    Canny(gray, canny, 50, 200)
    NamedWindow ('canny')
    ShowImage ('canny', canny)
    WaitKey()

    #
    # The Harris output must be 32-bit float.
    #
    harris = CreateImage (GetSize(img), IPL_DEPTH_32F, 1)
    CornerHarris(gray, harris, 5, 5, 0.1)
</snippet></ROW><ROW><id>5003133</id><snippet>ast</snippet></ROW><ROW><id>5003133</id><snippet>mod = Module(stmt* body)
    | Interactive(stmt* body)
    | Expression(expr body)

    -- not really an actual node but useful in Jython's typesystem.
    | Suite(stmt* body)
</snippet></ROW><ROW><id>5003133</id><snippet>Module</snippet></ROW><ROW><id>5003133</id><snippet>f.read()</snippet></ROW><ROW><id>5003133</id><snippet>__name__</snippet></ROW><ROW><id>5003133</id><snippet>__package__</snippet></ROW><ROW><id>5003267</id><snippet>o</snippet></ROW><ROW><id>5003267</id><snippet>[^A-Z]</snippet></ROW><ROW><id>5003267</id><snippet>.</snippet></ROW><ROW><id>5003267</id><snippet>[^a-z]</snippet></ROW><ROW><id>5003267</id><snippet>[^A-Za-z0-9]</snippet></ROW><ROW><id>5003313</id><snippet>sys.builtin_module_names</snippet></ROW><ROW><id>5003313</id><snippet>_io</snippet></ROW><ROW><id>5003468</id><snippet>import MODULE, os
path = os.path.dirname(MODULE.__file__)
</snippet></ROW><ROW><id>5003600</id><snippet>key</snippet></ROW><ROW><id>5003600</id><snippet>&gt;&gt;&gt; addresses = {}
&gt;&gt;&gt; addresses['john'] = 'somewhere' # Set john's address
&gt;&gt;&gt; print "John's address is", addresses['john'] # Retrieve it
</snippet></ROW><ROW><id>5003619</id><snippet>staticMethod()</snippet></ROW><ROW><id>5003619</id><snippet>bye</snippet></ROW><ROW><id>5003619</id><snippet>varA</snippet></ROW><ROW><id>5003619</id><snippet>staticmethod</snippet></ROW><ROW><id>5003619</id><snippet>classmethod</snippet></ROW><ROW><id>5003619</id><snippet>class StaticClass:
    var_a = 'hello'

    @classmethod
    def cls_method(cls):
        cls.var_a = 'bye'
</snippet></ROW><ROW><id>5003733</id><snippet>.strip()</snippet></ROW><ROW><id>5003733</id><snippet>import urllib2,StringIO
from lxml import etree

seite = urllib2.urlopen("http://www.samsungapps.com/topApps/topAppsDetail.as?productId=G00000467050&amp;listYN=Y")
html = seite.read()
seite.close()
parser = etree.HTMLParser()
tree = etree.parse(StringIO.StringIO(html), parser)
xpath = "//div[contains(@class,'detail-view')]/h4/text()"
name = tree.xpath(xpath)
xpath = "//div[contains(@class,'detail-view')]/table/tbody/tr[2]/td/text()"
cat = tree.xpath(xpath)
xpath = "//div[contains(@class,'detail-view')]/table/tbody/tr[3]/td/text()"
typ = tree.xpath(xpath)
xpath = "//div[contains(@class,'detail-view')]/table/tbody/tr[4]/td/text()"
version = tree.xpath(xpath)

print name[0].strip().encode("utf-8")
print cat[0].strip().encode("utf-8")
print typ[0].strip().encode("utf-8")
print version[0].strip().encode("utf-8")
</snippet></ROW><ROW><id>5003733</id><snippet>$ /usr/bin/python
Python 2.6.6 (r266:84292, Sep 15 2010, 16:22:56) 
[GCC 4.4.5] on linux2
Type "help", "copyright", "credits" or "license" for more information.
&gt;&gt;&gt; import urllib2,StringIO
&gt;&gt;&gt; from lxml import etree
&gt;&gt;&gt; 
&gt;&gt;&gt; seite = urllib2.urlopen("http://www.samsungapps.com/topApps/topAppsDetail.as?productId=G00000467050&amp;listYN=Y")
&gt;&gt;&gt; html = seite.read()
&gt;&gt;&gt; seite.close()
&gt;&gt;&gt; parser = etree.HTMLParser()
&gt;&gt;&gt; tree = etree.parse(StringIO.StringIO(html), parser)
&gt;&gt;&gt; xpath = "//div[contains(@class,'detail-view')]/h4/text()"
&gt;&gt;&gt; name = tree.xpath(xpath)
&gt;&gt;&gt; xpath = "//div[contains(@class,'detail-view')]/table/tbody/tr[2]/td/text()"
&gt;&gt;&gt; cat = tree.xpath(xpath)
&gt;&gt;&gt; xpath = "//div[contains(@class,'detail-view')]/table/tbody/tr[3]/td/text()"
&gt;&gt;&gt; typ = tree.xpath(xpath)
&gt;&gt;&gt; xpath = "//div[contains(@class,'detail-view')]/table/tbody/tr[4]/td/text()"
&gt;&gt;&gt; version = tree.xpath(xpath)
&gt;&gt;&gt; 
&gt;&gt;&gt; print name[0].strip().encode("utf-8")
Dark
&gt;&gt;&gt; print cat[0].strip().encode("utf-8")
Theme
&gt;&gt;&gt; print typ[0].strip().encode("utf-8")
Application
&gt;&gt;&gt; print version[0].strip().encode("utf-8")
1.0.0 (14.02.2011)
&gt;&gt;&gt; 
</snippet></ROW><ROW><id>5004008</id><snippet>csvdata = pkgutil.get_data("curve", "ntc.10k.csv") 
csvio = StringIO(csvdata)
raw = csv.reader(csvio)
</snippet></ROW><ROW><id>5004256</id><snippet>zipfile</snippet></ROW><ROW><id>5004357</id><snippet>&gt;&gt;&gt; d={1:2, 3:4}
&gt;&gt;&gt; print '{0[1]}'.format(d)
2
&gt;&gt;&gt; print '{0[d][1]}'.format(locals())
2
&gt;&gt;&gt; print '{[d][1]}'.format(locals())
2
&gt;&gt;&gt;
</snippet></ROW><ROW><id>5004795</id><snippet>import pymssql 
conn = pymssql.connect(host='SQL01', user='user', password='password', database='mydatabase', as_dict=True) 
cur = conn.cursor()  
cur.execute('SELECT * FROM persons WHERE salesrep=%s', 'John Doe') 
print cur.fetchall()
</snippet></ROW><ROW><id>5004835</id><snippet>nltk.Text</snippet></ROW><ROW><id>5005464</id><snippet>scikits.timeseries</snippet></ROW><ROW><id>5005464</id><snippet>numpy</snippet></ROW><ROW><id>5005464</id><snippet>pip</snippet></ROW><ROW><id>5005464</id><snippet>setuptools</snippet></ROW><ROW><id>5005464</id><snippet>scikits.timeseries</snippet></ROW><ROW><id>5005495</id><snippet>class UploadImageForm(forms.ModelForm):
    class Meta:
        model = GallryImage
...
# Sample view
def upload_file(request):
    if request.method == 'POST':
        form = UploadImageForm(request.POST, request.FILES)
        if form.is_valid():
            form.save()
            return HttpResponseRedirect('/success/url/')
    else:
        form = UploadImageForm()
    return render_to_response('upload.html', {'form': form})
</snippet></ROW><ROW><id>5005573</id><snippet>def UnicodeDictReader(utf8_data, **kwargs):
    csv_reader = csv.DictReader(utf8_data, **kwargs)
    for row in csv_reader:
        yield dict([(key, unicode(value, 'utf-8')) for key, value in row.iteritems()])
</snippet></ROW><ROW><id>5006234</id><snippet>TileTable</snippet></ROW><ROW><id>5006234</id><snippet>tile_table</snippet></ROW><ROW><id>5006234</id><snippet>imageloader</snippet></ROW><ROW><id>5006234</id><snippet>import imageloader
aTile = imageloader.tile_table[1]
</snippet></ROW><ROW><id>5006234</id><snippet>import imageloader
anotherTile = imageloader.tile_table[2]
</snippet></ROW><ROW><id>5006234</id><snippet>def _loadTileTable(arg1, arg2):
    pass # blah blah
tile_table = _loadTileTable('image path', other_var)
</snippet></ROW><ROW><id>5006340</id><snippet>http</snippet></ROW><ROW><id>5006340</id><snippet>socks</snippet></ROW><ROW><id>5006340</id><snippet>proxyhand = urllib.request.ProxyHandler({"http" : "http://localhost:5678"})
</snippet></ROW><ROW><id>5006385</id><snippet>sum</snippet></ROW><ROW><id>5006385</id><snippet>0</snippet></ROW><ROW><id>5006385</id><snippet>0</snippet></ROW><ROW><id>5006385</id><snippet>timedelta</snippet></ROW><ROW><id>5006385</id><snippet>sum</snippet></ROW><ROW><id>5006385</id><snippet>timedelta()</snippet></ROW><ROW><id>5006385</id><snippet># this is the average
return sum(delta_list, timedelta()) / len(delta_list)
</snippet></ROW><ROW><id>5006385</id><snippet>print str(some_delta)
</snippet></ROW><ROW><id>5006385</id><snippet>some_delta.days</snippet></ROW><ROW><id>5006385</id><snippet>some_delta.seconds</snippet></ROW><ROW><id>5006412</id><snippet>var st = "a:b:c";
foreach(var item in st.Split(':'))
   Console.WriteLine(item);
</snippet></ROW><ROW><id>5006600</id><snippet>def shear3(a, strength=1, shift_axis=0, increase_axis=1):
    if shift_axis &gt; increase_axis:
        shift_axis -= 1
    res = numpy.empty_like(a)
    index = numpy.index_exp[:] * increase_axis
    roll = numpy.roll
    for i in range(0, a.shape[increase_axis]):
        index_i = index + (i,)
        res[index_i] = roll(a[index_i], -i * strength, shift_axis)
    return res
</snippet></ROW><ROW><id>5006786</id><snippet>__doc__</snippet></ROW><ROW><id>5006914</id><snippet>cursor.rowcount</snippet></ROW><ROW><id>5006973</id><snippet>operatorPrecedence</snippet></ROW><ROW><id>5007187</id><snippet>from math import sin, cos, pi, radians, ceil
import itertools

try:
    rng = xrange    # Python 2.x
except NameError:
    rng = range     # Python 3.x

# for the following calculations,
# - all angles are in radians (unless otherwise specified)
# - latitude is in [-pi/2..pi/2]
# - longitude is in [-pi..pi)
MIN_LAT = -pi/2   # South Pole
MAX_LAT = pi/2    # North Pole
MIN_LON = -pi     # Far West
MAX_LON = pi      # Far East

def floatRange(start, end=None, step=1.0):
    "Floating-point range generator"
    start += 0.0    # cast to float
    if end is None:
        end = start
        start = 0.0
    steps = int(ceil((end-start)/step))
    return (start + k*step for k in rng(0, steps+1))

def patch2d(xmin, xmax, ymin, ymax, step=1.0):
    "2d rectangular grid generator"
    if xmin&gt;xmax:
        xmin,xmax = xmax,xmin
    xrange = floatRange(xmin, xmax, step)

    if ymin&gt;ymax:
        ymin,ymax = ymax,ymin
    yrange = floatRange(ymin, ymax, step)

    return itertools.product(xrange, yrange)

def patch2d_to_3d(xyIter, zFn):
    "Convert 2d field to 2.5d height-field"
    mapFn = lambda a: (a[0], a[1], zFn(a[0],a[1]))
    return itertools.imap(mapFn, xyIter)

#
# Representation conversion functions    
#

def to_spherical(lon, lat, rad):
    "Map from spherical to spherical coordinates (identity function)"
    return lon, lat, rad

def to_cylindrical(lon, lat, rad):
    "Map from spherical to cylindrical coordinates"
    # angle, z, radius
    return lon, rad*sin(lat), rad*cos(lat)

def to_cartesian(lon, lat, rad):
    "Map from spherical to Cartesian coordinates"
    # x, y, z
    cos_lat = cos(lat)
    return rad*cos_lat*cos(lon), rad*cos_lat*sin(lon), rad*sin(lat)


def bumpySphere(gridSize, radiusFn, outConv):
    lonlat = patch2d(MIN_LON, MAX_LON, MIN_LAT, MAX_LAT, gridSize)
    return list(outConv(*lonlatrad) for lonlatrad in patch2d_to_3d(lonlat, radiusFn))


# make a plain sphere of radius 10    
sphere = bumpySphere(radians(5.0), lambda x,y: 10.0, to_cartesian)    


# spiky-star-function maker
def starFnMaker(xWidth, xOffset, yWidth, yOffset, minRad, maxRad):
    # make a spiky-star function:
    #   longitudinal and latitudinal triangular waveforms,
    #   joined as boolean intersection,
    #   resulting in a grid of positive square pyramids
    def starFn(x, y, xWidth=xWidth, xOffset=xOffset, yWidth=yWidth, yOffset=yOffset, minRad=minRad, maxRad=maxRad):
        xo = ((x-xOffset)/float(xWidth)) % 1.0   # xo in [0.0..1.0), progress across a single pattern-repetition
        xh = 2 * min(xo, 1.0-xo)                 # height at xo in [0.0..1.0]
        xHeight = minRad + xh*(maxRad-minRad)

        yo = ((y-yOffset)/float(yWidth)) % 1.0
        yh = 2 * min(yo, 1.0-yo)
        yHeight = minRad + yh*(maxRad-minRad)

        return min(xHeight, yHeight)
    return starFn

# parameters to spike-star-function maker    
width = 2*pi
horDivs = 20    # number of waveforms longitudinally
horShift = 0.0  # longitudinal offset in [0.0..1.0) of a wave

height = pi
verDivs = 10
verShift = 0.5      # leave spikes at the poles

minRad = 10.0
maxRad = 15.0

deathstarFn = starFnMaker(width/horDivs, width*horShift/horDivs, height/verDivs, height*verShift/verDivs, minRad, maxRad)

deathstar = bumpySphere(radians(2.0), deathstarFn, to_cartesian)
</snippet></ROW><ROW><id>5007592</id><snippet>self</snippet></ROW><ROW><id>5007592</id><snippet>Toplevel instance has no attribute 'updateSearch'</snippet></ROW><ROW><id>5007592</id><snippet>EditStudentWindow instance...</snippet></ROW><ROW><id>5007592</id><snippet>class EditStudentWindowClass(Tkinter.Toplevel):
    def __init__(self, *args, **kwargs):
        Tkinter.Toplevel.__init__(self, *args, **kwargs)
        self.title('Edit Students')
        ...
</snippet></ROW><ROW><id>5007608</id><snippet>twisted.enterprise.adbapi</snippet></ROW><ROW><id>5007608</id><snippet>twisted.internet.threads.deferToThread</snippet></ROW><ROW><id>5007608</id><snippet>socket</snippet></ROW><ROW><id>5007608</id><snippet>DeferredList</snippet></ROW><ROW><id>5007608</id><snippet>Deferred</snippet></ROW><ROW><id>5007608</id><snippet>twisted.protocols.amp</snippet></ROW><ROW><id>5007608</id><snippet>multiprocessing</snippet></ROW><ROW><id>5007620</id><snippet>text = html_escape(text); // dummy function
text = text.replace(/\t/g, '    ')
           .replace(/  /g, '  ')
           .replace(/  /g, '  ') // second pass
                                      // handles odd number of spaces, where we 
                                      // end up with " " + " " + " "
           .replace(/\r\n|\n|\r/g, '&lt;br /&gt;');
</snippet></ROW><ROW><id>5007889</id><snippet>__file__</snippet></ROW><ROW><id>5007889</id><snippet>name = os.path.join(os.path.dirname(__file__) or  ".", "binary_file.out")
subprocess.Popen(name)
</snippet></ROW><ROW><id>5008097</id><snippet>def words(lines):
    for line in lines:
        for word in line.split():
            yield word
</snippet></ROW><ROW><id>5008097</id><snippet>yield</snippet></ROW><ROW><id>5008097</id><snippet>import sys
for word in words(sys.stdin):
    print word
</snippet></ROW><ROW><id>5008097</id><snippet>lines = open('nyt.txt')
words = []
for line in lines:
    words.extend(line.split())
print words
</snippet></ROW><ROW><id>5008210</id><snippet>a</snippet></ROW><ROW><id>5008210</id><snippet>v</snippet></ROW><ROW><id>5008210</id><snippet>global</snippet></ROW><ROW><id>5008325</id><snippet>user_id = ObjectId(self.get_argument("id"))
contact_id = ObjectId(self.get_argument("contactId"))
contact_confidentiality = db.cara.users.find_one({"_id" : contact_id}, {"profil.private.confidential" : 1})

projection = {
  'profil' : { 
     'private' : {  
        'first_name': 1,
        'last_name':1,
        'gender':1,
        'dob' : 1,
        'email' : 1,
        'nationality': 1,
        'work' : 1,
        'situation' : 1,
        'skype' : 1,
        'facebook' : 1
     }
   }
} 
for i in contact_confidentiality["profil"]["private"]["confidential"]:
  projection['profil']['private'].remove(i)

contact = db.cara.users.find_one({"_id" : contact_id}, projection)
</snippet></ROW><ROW><id>5008482</id><snippet>system('python myscript.py')</snippet></ROW><ROW><id>5008482</id><snippet>system([use_this_python ' myscript.py'])
</snippet></ROW><ROW><id>5008508</id><snippet>var xml = XDocument.Load(filename);
var res = from p in xml.Root.Elements("Class").Elements("ClassKeyName") select p.Value;
</snippet></ROW><ROW><id>5008800</id><snippet>a = [(s[:5], s[5:10], s[10], s[11:]) for s in FF]
</snippet></ROW><ROW><id>5008854</id><snippet>print type(someObject).__name__
</snippet></ROW><ROW><id>5008854</id><snippet>print some_instance.__class__.__name__
</snippet></ROW><ROW><id>5008854</id><snippet>class A:
    pass
print type(A())
# prints &lt;type 'instance'&gt;
print A().__class__.__name__
# prints A
</snippet></ROW><ROW><id>5008854</id><snippet>type()</snippet></ROW><ROW><id>5008854</id><snippet>object</snippet></ROW><ROW><id>5008854</id><snippet>type(someObject).__name__</snippet></ROW><ROW><id>5008854</id><snippet>instance</snippet></ROW><ROW><id>5008968</id><snippet>if num &lt; 0:
    lst = list(chained)
    lst.reverse()
    return lst
else:
    return chained
</snippet></ROW><ROW><id>5008968</id><snippet>reversed()</snippet></ROW><ROW><id>5008968</id><snippet>.reverse()</snippet></ROW><ROW><id>5009280</id><snippet>msg</snippet></ROW><ROW><id>5009578</id><snippet>pylab.scatter</snippet></ROW><ROW><id>5009578</id><snippet>import pylab
axes = pylab.axes()
circle1 = pylab.Circle((0,0), radius=20, alpha=.5)
circle2 = pylab.Circle((0.5,0.5), radius=20, alpha=.5)
axes.add_patch(circle1)
axes.add_patch(circle2)
pylab.axis('scaled')
pylab.show()
</snippet></ROW><ROW><id>5009578</id><snippet>import pylab
import matplotlib

def my_circle_scatter(axes, x_array, y_array, radius=0.5, **kwargs):
    for x, y in zip(x_array, y_array):
        circle = pylab.Circle((x,y), radius=radius, **kwargs)
        axes.add_patch(circle)
    return True

def my_square_scatter(axes, x_array, y_array, size=0.5, **kwargs):
    size = float(size)
    for x, y in zip(x_array, y_array):
        square = pylab.Rectangle((x-size/2,y-size/2), size, size, **kwargs)
        axes.add_patch(square)
    return True

def my_polygon_scatter(axes, x_array, y_array, resolution=5, radius=0.5, **kwargs):
    ''' resolution is number of sides of polygon '''
    for x, y in zip(x_array, y_array):
        polygon = matplotlib.patches.CirclePolygon((x,y), radius=radius, resolution=resolution, **kwargs)
        axes.add_patch(polygon)
    return True

axes=pylab.axes()
my_circle_scatter(axes, [0,0.5], [0,0.5], radius=2, alpha=.5, color='b')
my_square_scatter(axes, [-3,-4,2,3], [1,-3,0,3], size=.5, alpha=.5, color='r')
my_polygon_scatter(axes, [-1,-2,3], [-3,0,3], radius=.5, resolution=3, alpha=.5, color='g')
my_polygon_scatter(axes, [4,1.5,3], [2,-1,-3], radius=.5, resolution=5, alpha=.5, color='k')
pylab.axis('scaled')
pylab.axis([-5,5,-5,5])
pylab.show()
</snippet></ROW><ROW><id>5009578</id><snippet>def my_circle_scatter_radii(axes, x_array, y_array, radii_array, **kwargs):
    for (x, y, r) in zip(x_array, y_array, radii_array):
        circle = pylab.Circle((x,y), radius=r, **kwargs)
        axes.add_patch(circle)
    return True
</snippet></ROW><ROW><id>5009808</id><snippet>-files</snippet></ROW><ROW><id>5009808</id><snippet>$HADOOP_HOME/bin/hadoop jar /usr/lib/COMPANY/analytics/libjars/MyJar.jar -files hdfs://PDHadoop1.corp.COMPANY.com:54310/data/geoip/GeoIPCity.dat</snippet></ROW><ROW><id>5009808</id><snippet>if (DistributedCache.getLocalCacheFiles(context.getConfiguration()) != null) {
    List&lt;Path&gt; localFiles = Utility.arrayToList(DistributedCache.getLocalCacheFiles(context.getConfiguration()));
    for (Path localFile : localFiles) {
        if ((localFile.getName() != null) &amp;&amp; (localFile.getName().equalsIgnoreCase("GeoIPCity.dat"))) {
            Path path = new File(localFile.toUri().getPath());
        }
    }
}
</snippet></ROW><ROW><id>5009808</id><snippet>-files</snippet></ROW><ROW><id>5009808</id><snippet>-libjars</snippet></ROW><ROW><id>5009899</id><snippet>Contains</snippet></ROW><ROW><id>5009899</id><snippet>ICollection&lt;T&gt;</snippet></ROW><ROW><id>5009899</id><snippet>Enumerable.Contains</snippet></ROW><ROW><id>5009899</id><snippet>char[] x = { 'a', 'b', 'c' };

if(x.Contains('a'))
{
   ...    
}
</snippet></ROW><ROW><id>5009899</id><snippet>public static bool In&lt;T&gt;(this T item, IEnumerable&lt;T&gt; sequence)
{
   if(sequence == null)
      throw new ArgumentNullException("sequence");

   return sequence.Contains(item);    
}
</snippet></ROW><ROW><id>5009899</id><snippet>char[] x = { 'a', 'b', 'c' };

if('a'.In(x))
{
   ...    
}
</snippet></ROW><ROW><id>5009963</id><snippet>[command, args]</snippet></ROW><ROW><id>5009963</id><snippet>['montage', '-tile', '{}x{}'.format(...), '-geometry'...]</snippet></ROW><ROW><id>5009963</id><snippet>shell=True</snippet></ROW><ROW><id>5010431</id><snippet>'test /'.split(' ')
</snippet></ROW><ROW><id>5010431</id><snippet>tst, path = 'test /'.split()
os.chdir(path)
</snippet></ROW><ROW><id>5010473</id><snippet>LL = [ (x,) + y for x, y in zip(f, d) ]
</snippet></ROW><ROW><id>5010659</id><snippet>cursor.execute('INSERT INTO auth_user (password) VALUES (%s)', [password])
</snippet></ROW><ROW><id>5010674</id><snippet>def build_ranges(steps):
    val = 0
    for step in steps:
        yield val, val + step
        val += step
</snippet></ROW><ROW><id>5010674</id><snippet>&gt;&gt;&gt; input = (0.1, 0.2, 0.7)
&gt;&gt;&gt; list(build_ranges(input))
[(0, 0.10000000000000001), (0.10000000000000001, 0.30000000000000004), (0.30000000000000004, 1.0)]
</snippet></ROW><ROW><id>5011000</id><snippet>datetime</snippet></ROW><ROW><id>5011000</id><snippet>strptime</snippet></ROW><ROW><id>5011000</id><snippet>'2011-02-15'</snippet></ROW><ROW><id>5011000</id><snippet>import datetime
str_due_date = self.request.get('duedate')
goal.duedate = datetime.datetime.strptime(str_due_date, '%Y-%m-%d')
</snippet></ROW><ROW><id>5011016</id><snippet>os.link</snippet></ROW><ROW><id>5011016</id><snippet>def CreateHardLink(src, dst):
    import ctypes 
    if not ctypes.windll.kernel32.CreateHardLinkA(dst, src, 0):
        raise OSError
</snippet></ROW><ROW><id>5011016</id><snippet>shutil.copy2</snippet></ROW><ROW><id>5011016</id><snippet>Exception</snippet></ROW><ROW><id>5011094</id><snippet>urllib.request</snippet></ROW><ROW><id>5011094</id><snippet>OpenerDirector</snippet></ROW><ROW><id>5011094</id><snippet>HTTPCookieProcessor</snippet></ROW><ROW><id>5011094</id><snippet>cookiejar</snippet></ROW><ROW><id>5011094</id><snippet>import http.cookiejar, urllib.request
cj = http.cookiejar.CookieJar()
opener = urllib.request.build_opener(urllib.request.HTTPCookieProcessor(cj))
r = opener.open("http://example.com/")
</snippet></ROW><ROW><id>5011094</id><snippet>cj</snippet></ROW><ROW><id>5011094</id><snippet>cj.clear()</snippet></ROW><ROW><id>5011094</id><snippet>urllib.request.HTTPCookieProcessor().cookiejar.clear()</snippet></ROW><ROW><id>5011094</id><snippet>HTTPCookieProcessor</snippet></ROW><ROW><id>5011094</id><snippet>cookiejar</snippet></ROW><ROW><id>5011094</id><snippet>cookiejar</snippet></ROW><ROW><id>5011288</id><snippet>double[][] testSquare = {{0.69314718}, {1.09861229}, {1.38629436}, {1.60943791}, {1.79175947}, {1.94591015}};
RealMatrix matrix = MatrixUtils.createRealMatrix(testSquare);
SingularValueDecomposition svd = new SingularValueDecompositionImpl(matrix);
DecompositionSolver ds=svd.getSolver();
double[] b = {0.0, 0.20273255, 0.5815754, 0.7520387, 0.96885669, 1.09861229};
ds.solve(b)[0];
</snippet></ROW><ROW><id>5011411</id><snippet>#----lol.py----
import os,sys

f = open("foo.txt","w")
f.write("HI")
f.close() # HERE !
os.execl(sys.executable, sys.executable, "delfoo.py")
</snippet></ROW><ROW><id>5011489</id><snippet>audiolab</snippet></ROW><ROW><id>5011548</id><snippet>Policy_Base</snippet></ROW><ROW><id>5011548</id><snippet>import re

def slugify(s):
    return re.sub(r'\W+', '-', s.lower().replace('_', '-'))

def get_slug_to_class_items(policy_class):
    yield (slugify(policy_class.__name__), policy_class)
    for subclass in policy_class.__subclasses__():
        for slug, subclass in get_slug_to_class_items(subclass):
            yield (slug, subclass)

slug_to_class = dict(get_slug_to_class_items(Policy_Base))
# print repr(slug_to_class)
</snippet></ROW><ROW><id>5011548</id><snippet>get_slug_to_class_items</snippet></ROW><ROW><id>5011548</id><snippet>Policy_Base</snippet></ROW><ROW><id>5011548</id><snippet>dict</snippet></ROW><ROW><id>5011548</id><snippet>get_slug_to_class_items</snippet></ROW><ROW><id>5011683</id><snippet>from xml.dom import minidom                                          
xmldoc = minidom.parse('~/diveintopython/common/py/kgp/binary.xml')  
</snippet></ROW><ROW><id>5011683</id><snippet>from xml.dom import minidom                                          
xmldoc = minidom.parseString( Your string goes here )  
</snippet></ROW><ROW><id>5011782</id><snippet>import re

pat = re.compile('^(#+)',re.MULTILINE)

ch = '''# Section
## Subsection
## Subsection
# Section
## Subsection
### Subsubsection
### Subsubsection
## Subsection
### Subsubsection
### Subsubsection
#### Sub4section
#### Sub4section
#### Sub4section
#### Sub4section
##### Sub5section
#### Sub4section
##### Sub5section
##### Sub5section
### Subsubsection
### Subsubsection
#### Sub4section
#### Sub4section
## Subsection
### Subsubsection
### Subsubsection
### Subsubsection
#### Sub4section
##### Sub5section
##### Sub5section
### Subsubsection
#### Sub4section
## Subsection
### Subsubsection
### Subsubsection
# Section
## Subsection
## Subsection
# Section
## Subsection
### Subsubsection
#### Sub4section
#### Sub4section
#### Sub4section
##### Sub5section
#### Sub4section
### Subsubsection
## Subsection
### Subsubsection
# Section
## Subsection
'''

def cbk(match, nb = [0] ):
    if len(match.group())==len(nb):
        nb[-1] += 1
    elif  len(match.group())&gt;len(nb):
        nb.append(1)
    else:
        nb[:] = nb[0:len(match.group())]
        nb[-1] += 1
    return match.group()+' '+('.'.join(map(str,nb)))

ch = pat.sub(cbk,ch)
print ch
</snippet></ROW><ROW><id>5011782</id><snippet># 1 Section
## 1.1 Subsection
## 1.2 Subsection
# 2 Section
## 2.1 Subsection
### 2.1.1 Subsubsection
### 2.1.2 Subsubsection
## 2.2 Subsection
### 2.2.1 Subsubsection
### 2.2.2 Subsubsection
#### 2.2.2.1 Sub4section
#### 2.2.2.2 Sub4section
#### 2.2.2.3 Sub4section
#### 2.2.2.4 Sub4section
##### 2.2.2.4.1 Sub5section
#### 2.2.2.5 Sub4section
##### 2.2.2.5.1 Sub5section
##### 2.2.2.5.2 Sub5section
### 2.2.3 Subsubsection
### 2.2.4 Subsubsection
#### 2.2.4.1 Sub4section
#### 2.2.4.2 Sub4section
## 2.3 Subsection
### 2.3.1 Subsubsection
### 2.3.2 Subsubsection
### 2.3.3 Subsubsection
#### 2.3.3.1 Sub4section
##### 2.3.3.1.1 Sub5section
##### 2.3.3.1.2 Sub5section
### 2.3.4 Subsubsection
#### 2.3.4.1 Sub4section
## 2.4 Subsection
### 2.4.1 Subsubsection
### 2.4.2 Subsubsection
# 3 Section
## 3.1 Subsection
## 3.2 Subsection
# 4 Section
## 4.1 Subsection
### 4.1.1 Subsubsection
#### 4.1.1.1 Sub4section
#### 4.1.1.2 Sub4section
#### 4.1.1.3 Sub4section
##### 4.1.1.3.1 Sub5section
#### 4.1.1.4 Sub4section
### 4.1.2 Subsubsection
## 4.2 Subsection
### 4.2.1 Subsubsection
# 5 Section
## 5.1 Subsection
</snippet></ROW><ROW><id>5011782</id><snippet>def cbk(match, nb = [0] ):
    if len(match.group())&gt;len(nb):
        nb.append(1)
    else:
        nb[:] = nb[0:len(match.group())]
        nb[-1] += 1
    return match.group()+' '+('.'.join(map(str,nb))) 
</snippet></ROW><ROW><id>5012175</id><snippet>user.profile</snippet></ROW><ROW><id>5012175</id><snippet>profile = user.profile
profile.age = 34
profile.save()
</snippet></ROW><ROW><id>5012184</id><snippet>class MultiDict(dict):
    def __getitem__(self, key):
        if key in self:
            return dict.__getitem__(self, key)
        result = []
        for complete_key in sorted(self.keys()):
            if complete_key.startswith(key):
                result.extend(self[complete_key])
        return result

#example 
a = MultiDict()
a["a0"] = [1]
a["a1"] = [2]
print  a["a"]
[1, 2]
</snippet></ROW><ROW><id>5012617</id><snippet>random.random()</snippet></ROW><ROW><id>5012617</id><snippet>math</snippet></ROW><ROW><id>5012617</id><snippet>seed = random.randint(0, sys.maxint)
myRand = random.Random(seed)
</snippet></ROW><ROW><id>5013276</id><snippet>from django.core.exceptions import ValidationError

def validate_current_century(value):
    if value &lt; 2000 or value &gt; 2100:
        raise ValidationError(u'%s is not a valid year!' % value)
</snippet></ROW><ROW><id>5013276</id><snippet>class Completion(models.Model):
    start_date = models.DateField(validators=[validate_current_century])
    end_date = models.DateField(validators=[validate_current_century])
</snippet></ROW><ROW><id>5013276</id><snippet>from django import forms

class MyForm(forms.Form):
    current_century_field = forms.DateField(validators=[validate_current_century])
</snippet></ROW><ROW><id>5013438</id><snippet>enumerate</snippet></ROW><ROW><id>5013438</id><snippet>{% for j in a %}
    {{ forloop.counter0 }}, {{ j }}
{% endfor %}
</snippet></ROW><ROW><id>5013448</id><snippet>class MyClass(models.Model):
    ...

    def save(self):
        super(Myclass,self).save()
        if not self.code:
            self.code = str(self.id) + str(self.type_id)
            self.save()
</snippet></ROW><ROW><id>5013644</id><snippet>Python2&gt; import locale
Python2&gt; locale.getpreferredencoding()
'UTF-8'
</snippet></ROW><ROW><id>5013962</id><snippet>import re

# regular expression for matching a (node1,node2;cost)
EDGE = re.compile(r'\((\d+),(\d+);(\d+)\)')

def parse(s):
    # Separate size from the list of edges
    size, edges = s.split(':')

    # Build a dictionary
    edges = dict(
        # ...where key is (node1,node2) and value is (cost)
        # (all converted to integers)
        ((int(node1),int(node2)),int(cost))

        # ...by iterating the edges using the regular expression
        for node1,node2,cost in EDGE.findall(edges))

    return int(size),edges
</snippet></ROW><ROW><id>5013962</id><snippet>&gt;&gt;&gt; test = "4:(1,2;4),(2,6;3),(3,7;15),(4,8;1),(5,6;1),(6,7;1),(5,9;9),(6,10;2),(7,11;1),(8,12;23),(9,10;5),(9,13;7),(10,14;6),(11,15;3),(12,16;3),(13,14;4),(15,16;7)"
&gt;&gt;&gt; parse(test)
(4, {(1, 2): 4, (5, 9): 9, (2, 6): 3, (6, 7): 1, (4, 8): 1, (5, 6): 1, (6, 10): 2, (9, 10): 5, (13, 14): 4, (11, 15): 3, (10, 14): 6, (9, 13): 7, (12, 16): 3, (7, 11): 1, (3, 7): 15, (8, 12): 23, (15, 16): 7})
</snippet></ROW><ROW><id>5014048</id><snippet>def minmax(*a):

    if len(a) == 1:  # Single (list, tuple, or scalar) argument
        try:
            return minmax(*a[0])  # Expansion of sequence elements, if possible
        except TypeError:  # Case of minmax(42)
            pass  # The general code below handles this directly

    return (min(a), max(a))

&gt;&gt;&gt; minmax(3, 5, 1, 10)
(1, 10)
&gt;&gt;&gt; minmax([3, 5, 1, 10])
(1, 10)
&gt;&gt;&gt; minmax((42, 123, -12))
(-12, 123)
&gt;&gt;&gt; minmax(42)
42
</snippet></ROW><ROW><id>5014048</id><snippet>min()</snippet></ROW><ROW><id>5014048</id><snippet>max()</snippet></ROW><ROW><id>5014048</id><snippet>min(42)</snippet></ROW><ROW><id>5014048</id><snippet>&gt;&gt;&gt; min(42)
TypeError: 'int' object is not iterable
</snippet></ROW><ROW><id>5014048</id><snippet>min()</snippet></ROW><ROW><id>5014048</id><snippet>max()</snippet></ROW><ROW><id>5014048</id><snippet>min()</snippet></ROW><ROW><id>5014048</id><snippet>minmax(42)</snippet></ROW><ROW><id>5014048</id><snippet>min((42,))</snippet></ROW><ROW><id>5014097</id><snippet>&lt;&lt;</snippet></ROW><ROW><id>5014097</id><snippet>||= []</snippet></ROW><ROW><id>5014097</id><snippet>&lt;&lt;</snippet></ROW><ROW><id>5014097</id><snippet>comment</snippet></ROW><ROW><id>5014097</id><snippet>||=</snippet></ROW><ROW><id>5014097</id><snippet>[]</snippet></ROW><ROW><id>5014097</id><snippet>Array.new</snippet></ROW><ROW><id>5014097</id><snippet>map[parent]</snippet></ROW><ROW><id>5014097</id><snippet>Array.new</snippet></ROW><ROW><id>5014097</id><snippet>results</snippet></ROW><ROW><id>5014097</id><snippet>map</snippet></ROW><ROW><id>5014291</id><snippet>zip</snippet></ROW><ROW><id>5014291</id><snippet>for</snippet></ROW><ROW><id>5014291</id><snippet>for</snippet></ROW><ROW><id>5014291</id><snippet>for this,after in zip(a,a[1:]):
    print this,after
</snippet></ROW><ROW><id>5014291</id><snippet>zip</snippet></ROW><ROW><id>5014291</id><snippet>izip_longest</snippet></ROW><ROW><id>5014291</id><snippet>itertools</snippet></ROW><ROW><id>5014291</id><snippet>import itertools
for this,after in itertools.izip_longest(a,a[1:]):
    print this,after
</snippet></ROW><ROW><id>5014291</id><snippet>after</snippet></ROW><ROW><id>5014291</id><snippet>None</snippet></ROW><ROW><id>5014291</id><snippet>izip_longest</snippet></ROW><ROW><id>5014291</id><snippet>None</snippet></ROW><ROW><id>5014291</id><snippet>for this,after in zip(a,a[1:] + [None]):
    print this,after
</snippet></ROW><ROW><id>5014291</id><snippet>{% for x, y in somelist %}</snippet></ROW><ROW><id>5014291</id><snippet>zip</snippet></ROW><ROW><id>5014420</id><snippet>python2.9 setup.py install
</snippet></ROW><ROW><id>5014441</id><snippet>reduce</snippet></ROW><ROW><id>5014441</id><snippet>&gt;&gt;&gt; coll.insert(dict(uid=1,event='a',time=1))
ObjectId('4d5b91d558839f06a8000000')
&gt;&gt;&gt; coll.insert(dict(uid=1,event='b',time=2))
ObjectId('4d5b91e558839f06a8000001')
&gt;&gt;&gt; coll.insert(dict(uid=2,event='c',time=2))
ObjectId('4d5b91f358839f06a8000002')
&gt;&gt;&gt; coll.insert(dict(uid=3,event='d',time=4))
ObjectId('4d5b91fd58839f06a8000003')
&gt;&gt;&gt; result = coll.group(['uid'], None,
                        {'list': []}, # initial
                        'function(obj, prev) {prev.list.push(obj)}') # reducer
&gt;&gt;&gt; len(result) # will show three groups
3
&gt;&gt;&gt; int(result[0]['uid'])
1
&gt;&gt;&gt; result[0]['list']
[{u'event': u'a', u'_id': ObjectId('4d5b...0000'), u'uid': 1, u'time': 1},
 {u'event': u'b', u'_id': ObjectId('4d5b...0001'), u'uid': 1, u'time': 2}]
&gt;&gt;&gt; int(result[1]['uid'])
2
&gt;&gt;&gt; result[1]['list']
[{u'event': u'c', u'_id': ObjectId('4d5b...0002'), u'uid': 2, u'time': 2}]
&gt;&gt;&gt; int(result[2]['uid'])
3
&gt;&gt;&gt; result[2]['list']
[{u'event': u'd', u'_id': ObjectId('4d5b...0003'), u'uid': 3, u'time': 4}]
</snippet></ROW><ROW><id>5014548</id><snippet>\g&lt;name&gt;</snippet></ROW><ROW><id>5014548</id><snippet>(?P&lt;name&gt;...)</snippet></ROW><ROW><id>5014548</id><snippet>\g&lt;number&gt;</snippet></ROW><ROW><id>5014548</id><snippet>\g&lt;2&gt;</snippet></ROW><ROW><id>5014548</id><snippet>\2</snippet></ROW><ROW><id>5014548</id><snippet>\g&lt;2&gt;0</snippet></ROW><ROW><id>5014548</id><snippet>\20</snippet></ROW><ROW><id>5014548</id><snippet>\g&lt;0&gt;</snippet></ROW><ROW><id>5014755</id><snippet>shutil</snippet></ROW><ROW><id>5014755</id><snippet>os</snippet></ROW><ROW><id>5014808</id><snippet># myfilters.py
def return_element(list, index):
    return list[index+1]
</snippet></ROW><ROW><id>5014808</id><snippet>{% include myfilters %}
...
{% for i in a %}
    {{ i }}ww{{ a|return_element:forloop.counter0 }}
{% endfor %}
</snippet></ROW><ROW><id>5015346</id><snippet>for f in *.py; do python "$f"; done
</snippet></ROW><ROW><id>5015495</id><snippet>x = number(5)</snippet></ROW><ROW><id>5015495</id><snippet>import types

class number(object):
    def __init__(self, value):
        self.value = value

def replace_int(x):
    if isinstance(x, int):
        return number(x)
    else:
        return x

def custom_numbers(f):
    code = f.func_code
    consts = tuple(map(replace_int, code.co_consts))
    new_code = types.CodeType(code.co_argcount, code.co_nlocals,
                              code.co_stacksize, code.co_flags,
                              code.co_code, consts, code.co_names,
                              code.co_varnames, code.co_filename,
                              code.co_name, code.co_firstlineno,
                              code.co_lnotab)
    return types.FunctionType(new_code, f.func_globals, f.func_name)</snippet></ROW><ROW><id>5015495</id><snippet>@custom_numbers
def test():
    x = 5
    print type(x)


&gt;&gt;&gt; test()
&lt;class '__main__.number'&gt;
</snippet></ROW><ROW><id>5015495</id><snippet>function.co_code</snippet></ROW><ROW><id>5015495</id><snippet>code.co_consts</snippet></ROW><ROW><id>5016218</id><snippet>try:
    import numpy
except ImportError:
    print "numpy is not installed"
</snippet></ROW><ROW><id>5016417</id><snippet>order = models.Order.objects.get(pk=1219)
if request.POST.get('delete'):
    order.delete()
</snippet></ROW><ROW><id>5016563</id><snippet>Table</snippet></ROW><ROW><id>5016563</id><snippet>Table</snippet></ROW><ROW><id>5016563</id><snippet>'SPAN'</snippet></ROW><ROW><id>5016563</id><snippet>blockSpan</snippet></ROW><ROW><id>5017091</id><snippet>open('picklefile.pkl','rb')
</snippet></ROW><ROW><id>5017326</id><snippet>&gt;&gt;&gt; s= "https://www.site.gov.uk//search/cgi-bin/contract_search/contract_search.cgi?rm=show_detail&amp;id=4035219;num=1;session_id=1445045;start=0;recs=20;subscription=1;value=0"
&gt;&gt;&gt; s.split(";session_id=1445045")[0].split("show_detail&amp;")[-1]
'id=4035219;num=1'
&gt;&gt;&gt;
</snippet></ROW><ROW><id>5017379</id><snippet>ii_key</snippet></ROW><ROW><id>5017379</id><snippet>ii_key.rstrip()</snippet></ROW><ROW><id>5017483</id><snippet>scriptTags = outputDoc.findAll('script')
for script in scriptTags:
    if script.has_key('some_attribute'):
        do_something()        
</snippet></ROW><ROW><id>5018066</id><snippet>import urllib
import urllib2
import simplejson
import datetime

authURL = "http://api.sample.com/authenticate"
values = {"username" : "user@sample.com",
          "password" : "sample"}

data = urllib.urlencode(values)

req = urllib2.Request(authURL, data)
response = urllib2.urlopen(req)

authToken = simplejson.load(response)["output"]

day = str(datetime.date.today())
dataURL = "http://api.sample.com/data/day/" + day + "/authToken/" + authToken

print simplejson.load(urllib2.urlopen(dataURL))
</snippet></ROW><ROW><id>5018270</id><snippet> import subprocess;
 retcode = subprocess.call(["ls","-l"])
</snippet></ROW><ROW><id>5018638</id><snippet>numpy.linalg.matrix_power</snippet></ROW><ROW><id>5018638</id><snippet>import numpy as np
x = np.arange(9).reshape(3,3)
y = np.matrix(x)

a = y**3
b = np.linalg.matrix_power(x, 3)

print a
print b
assert np.all(a==b)
</snippet></ROW><ROW><id>5018638</id><snippet>In [19]: a
Out[19]: 
matrix([[ 180,  234,  288],
        [ 558,  720,  882],
        [ 936, 1206, 1476]])

In [20]: b
Out[20]: 
array([[ 180,  234,  288],
       [ 558,  720,  882],
       [ 936, 1206, 1476]])
</snippet></ROW><ROW><id>5018987</id><snippet>def allOneOf(items, ids):
    first = items[0]
    if first in ids and all(i==first for i in items):
        return first
    else:
        raise TypeError()

assert_all_zero_or_one = (lambda vector: allOneOf(vector, set([0,1])))
</snippet></ROW><ROW><id>5019026</id><snippet>for k in list:
    print map(str, k)
</snippet></ROW><ROW><id>5019170</id><snippet># assemble the mail content
from email.MIMEMultipart import MIMEMultipart
from email.MIMEText import MIMEText
message = MIMEMultipart('alternative')
message.add_header('Subject', 'subject goes here')
# add a few more add_header calls here for things like "To", "Cc", "From"
message.attach(MIMEText('some code')) # plain text alternative
message.attach(MIMEText('&lt;html&gt;&lt;pre&gt;some code&lt;/pre&gt;&lt;/html&gt;', # html content
                        'html'))

# pipe the mail to sendmail
sendmail = os.popen('sendmail recipient@example.org', 'w')
sendmail.write(message.as_string())
if sendmail.close() is not None:
   print 'error: failed to send mail :-(' 
</snippet></ROW><ROW><id>5019817</id><snippet>$ scrapy startproject bar
$ cd bar/
$ ls
bar  scrapy.cfg
$ scrapy
Scrapy 0.12.0.2536 - project: bar

Usage:
  scrapy &lt;command&gt; [options] [args]

Available commands:
  crawl         Start crawling from a spider or URL
  deploy        Deploy project in Scrapyd target
  fetch         Fetch a URL using the Scrapy downloader
  genspider     Generate new spider using pre-defined templates
  list          List available spiders
  parse         Parse URL (using its spider) and print the results
  queue         Deprecated command. See Scrapyd documentation.
  runserver     Deprecated command. Use 'server' command instead
  runspider     Run a self-contained spider (without creating a project)
  server        Start Scrapyd server for this project
  settings      Get settings values
  shell         Interactive scraping console
  startproject  Create new project
  version       Print Scrapy version
  view          Open URL in browser, as seen by Scrapy

Use "scrapy &lt;command&gt; -h" to see more info about a command


$ cd ..
$ scrapy
Scrapy 0.12.0.2536 - no active project

Usage:
  scrapy &lt;command&gt; [options] [args]

Available commands:
  fetch         Fetch a URL using the Scrapy downloader
  runspider     Run a self-contained spider (without creating a project)
  settings      Get settings values
  shell         Interactive scraping console
  startproject  Create new project
  version       Print Scrapy version
  view          Open URL in browser, as seen by Scrapy

Use "scrapy &lt;command&gt; -h" to see more info about a command
</snippet></ROW><ROW><id>5019832</id><snippet>env</snippet></ROW><ROW><id>5019832</id><snippet>import os
@task()
def insert_sqldump_threaded(username, database, file):
  d = dict(os.environ)
  d['PGPASSFILE'] = settings.DB_PASSFILE
  host = database.server.db_address

  work = subprocess.Popen([settings.PSQL, 
                          "-f%s" % file, 
                          "-d%s" % database.db_name,
                          "-h%s" % host,
                          "-U%s" % settings.DB_ADMIN_USER
                          ], env = d
                          )
  work.wait()
  return work.returncode
</snippet></ROW><ROW><id>5020044</id><snippet>list1 = [0, 1, 2]
list2 = [3, 4, 5]
list3 = [6, 7, 8]
lists = [list1, list2, list3]
</snippet></ROW><ROW><id>5020044</id><snippet>map(lambda *row: list(row), *lists)
</snippet></ROW><ROW><id>5020044</id><snippet>map(lambda *row: list(row), list1, list2, list3)
</snippet></ROW><ROW><id>5020044</id><snippet>map()</snippet></ROW><ROW><id>5020044</id><snippet>f = lambda *row: list(row)
return [f(list1[0], list2[0], list3[0]),
        f(list1[1], list2[1], list3[1]),
        f(list1[2], list2[2], list3[2])]
</snippet></ROW><ROW><id>5020044</id><snippet>list</snippet></ROW><ROW><id>5020044</id><snippet>return [[list1[0], list2[0], list3[0]],
        [list1[1], list2[1], list3[1]],
        [list1[2], list2[2], list3[2]]]
</snippet></ROW><ROW><id>5020044</id><snippet>lists</snippet></ROW><ROW><id>5020131</id><snippet>DomainRoute</snippet></ROW><ROW><id>5020131</id><snippet>    SUBDOMAIN_RE = '^([^.]+)\.app-id\.appspot\.com$'

    app = WSGIApplication([
        DomainRoute(SUBDOMAIN_RE, [
            Route('/foo', 'FooHandler', 'subdomain-thing'),
        ]),
        Route('/bar', 'BarHandler', 'normal-thing'),
    ])
</snippet></ROW><ROW><id>5020173</id><snippet>subprocess</snippet></ROW><ROW><id>5020173</id><snippet>taskkill</snippet></ROW><ROW><id>5020173</id><snippet>win32api.TerminateProcess</snippet></ROW><ROW><id>5020214</id><snippet>contextlib.contextmanager</snippet></ROW><ROW><id>5020214</id><snippet>from contextlib import contextmanager

@contextmanager
def tempOpen( path, mode ):
    # if this fails there is nothing left to do anyways
    file = open(path, mode)

    try:
        yield file
    finally:
        file.close()
        os.remove(path)
</snippet></ROW><ROW><id>5020284</id><snippet>os.walk</snippet></ROW><ROW><id>5020284</id><snippet>ignored = ["foo", "bar"]
for path, dirs, files in os.walk(os.path.abspath(root)):
    for dir in ignored:
        if dir in dirs: dirs.remove(dir)
    for filename in fnmatch.filter(files, pattern):
        yield os.path.join(path, filename)
</snippet></ROW><ROW><id>5020535</id><snippet>suite()</snippet></ROW><ROW><id>5020535</id><snippet>.py</snippet></ROW><ROW><id>5020535</id><snippet>[5:-3]</snippet></ROW><ROW><id>5020535</id><snippet>.py</snippet></ROW><ROW><id>5020593</id><snippet>from itertools import islice
a = range(10)
i = iter(a)
print list(islice(i, 1, 3))
print list(islice(i, 1, 3))
print list(islice(i, 1, 3))
print list(islice(i, 1, 3))
</snippet></ROW><ROW><id>5020593</id><snippet>[1, 2]
[4, 5]
[7, 8]
[]
</snippet></ROW><ROW><id>5020593</id><snippet>f.readlines()</snippet></ROW><ROW><id>5020593</id><snippet>[i:j]</snippet></ROW><ROW><id>5020593</id><snippet>islice()</snippet></ROW><ROW><id>5020593</id><snippet>f.seek(0)</snippet></ROW><ROW><id>5020669</id><snippet>*args</snippet></ROW><ROW><id>5020669</id><snippet>import sys
cmd = sys.argv[1]
params = sys.argv[2:]

pbt = pbtools()

func = getattr(pbt, cmd)
func(*params)
</snippet></ROW><ROW><id>5020669</id><snippet>__get__</snippet></ROW><ROW><id>5020669</id><snippet>import functools

def saveconfig(f):
    @functools.wraps(f)
    def wrapper(self, *args):
        f(self, *args)
        self.cfg.write()
        self.paramcfg.write()
    return wrapper</snippet></ROW><ROW><id>5020669</id><snippet>functools.wraps</snippet></ROW><ROW><id>5020690</id><snippet>def __parse64(self, path_file):
    file_data = open(path_file, 'rb').read(-1) 
    #This slurps the whole file as binary.
    self.encoded_string_file = b64.b64encode(file_data)
</snippet></ROW><ROW><id>5020947</id><snippet>\g&lt;0&gt;</snippet></ROW><ROW><id>5020947</id><snippet>\g&lt;1&gt;</snippet></ROW><ROW><id>5020947</id><snippet>(…)</snippet></ROW><ROW><id>5020947</id><snippet>\g&lt;1&gt;</snippet></ROW><ROW><id>5020947</id><snippet>\g&lt;2&gt;</snippet></ROW><ROW><id>5020947</id><snippet>label = re.sub("([a-z])([A-Z])","\g&lt;1&gt; \g&lt;2&gt;",label)
</snippet></ROW><ROW><id>5021107</id><snippet>class Dicty(dict):
    def __getattr__(self, key):
        return self[key]

    def __setattr__(self, key, value):
        self[key] = value</snippet></ROW><ROW><id>5021107</id><snippet>__dict__</snippet></ROW><ROW><id>5021247</id><snippet>new_dict = {}
for key in dict1.keys()
    new_key = "%sprofile" % key
    if dict1[key] == 1:   # note your = is actually a SyntaxError
        new_dict[new_key] = ['yes']
    else:
        new_dict[new_key] = []
</snippet></ROW><ROW><id>5021247</id><snippet>"yes"</snippet></ROW><ROW><id>5021247</id><snippet>1</snippet></ROW><ROW><id>5021333</id><snippet>def handle(block):
    f.write(block)
    print ".", 
</snippet></ROW><ROW><id>5021333</id><snippet>ftp.storbinary(command="stor someFileNameOnServer", file=open("localFile",'rb'), callback=handle,blocksize=1024)
</snippet></ROW><ROW><id>5021333</id><snippet>sizeWritten = 0
totalSize = someMethodToGetTotalBytesInFile()
def handle(block):
    sizeWritten += 1024
    percentComplete = sizeWritten / totalSize
    print "%s percent complete" %str(sizeWritten / totalSize)
</snippet></ROW><ROW><id>5021445</id><snippet>str</snippet></ROW><ROW><id>5021445</id><snippet>for row in csv.reader("foo.csv", delimiter=known_delimiter):
   row = [item.decode(encoding) for item in row]
</snippet></ROW><ROW><id>5021445</id><snippet>windows-1252</snippet></ROW><ROW><id>5021445</id><snippet>windows-1251</snippet></ROW><ROW><id>5021445</id><snippet>from chardet.universaldetector import UniversalDetector
chardet_detector = UniversalDetector()

def charset_detect(f, chunk_size=4096):
    global chardet_detector
    chardet_detector.reset()
    while 1:
        chunk = f.read(chunk_size)
        if not chunk: break
        chardet_detector.feed(chunk)
        if chardet_detector.done: break
    chardet_detector.close()
    return chardet_detector.result

# Exercise for the reader: replace the above with a class

import csv    
import sys
from pprint import pprint

pathname = sys.argv[1]
delim = sys.argv[2] # allegedly known
print "delim=%r pathname=%r" % (delim, pathname)

with open(pathname, 'rb') as f:
    cd_result = charset_detect(f)
    encoding = cd_result['encoding']
    confidence = cd_result['confidence']
    print "chardet: encoding=%s confidence=%.3f" % (encoding, confidence)
    # insert actions contingent on encoding and confidence here
    f.seek(0)
    csv_reader = csv.reader(f, delimiter=delim)
    for bytes_row in csv_reader:
        unicode_row = [x.decode(encoding) for x in bytes_row]
        pprint(unicode_row)
</snippet></ROW><ROW><id>5021445</id><snippet>delim=',' pathname='sample-euro.csv'
chardet: encoding=windows-1252 confidence=0.500
[u'31-01-11',
 u'Overf\xf8rsel utland',
 u'UTLBET; ID 9710032001647082',
 u'1990.00',
 u'']
[u'31-01-11',
 u'Overf\xf8ring',
 u'OVERF\xd8RING MELLOM EGNE KONTI',
 u'5750.00',
 u';']
</snippet></ROW><ROW><id>5021445</id><snippet>delim=';' pathname='sample-russian.csv'
chardet: encoding=windows-1251 confidence=0.602
[u'-',
 u'04.02.2011 23:20',
 u'300,00\xa0\u0440\u0443\u0431.',
 u'',
 u'\u041c\u0422\u0421',
 u'']
[u'-',
 u'04.02.2011 23:15',
 u'450,00\xa0\u0440\u0443\u0431.',
 u'',
 u'\u041e\u043f\u043b\u0430\u0442\u0430 Interzet',
 u'']
[u'-',
 u'13.01.2011 02:05',
 u'100,00\xa0\u0440\u0443\u0431.',
 u'',
 u'\u041c\u0422\u0421 kolombina',
 u'']
</snippet></ROW><ROW><id>5021445</id><snippet>xlrd</snippet></ROW><ROW><id>5021641</id><snippet>import subprocess

def check_output(command):
    process = subprocess.Popen(command, shell=True, stdout=subprocess.PIPE, stderr=subprocess.STDOUT, universal_newlines=True)
    output = process.communicate()
    retcode = process.poll()
    if retcode:
            raise subprocess.CalledProcessError(retcode, command, output=output[0])
    return output 

command = "echo this&gt;CON"

print "subprocess -&gt; " + subprocess.check_output(command, shell=True)
print "native -&gt; " + str(check_output(command))

try:
    subprocess.check_output("python output.py", shell=True)
except subprocess.CalledProcessError, e:
    print "subproces CalledProcessError.output = " + e.output

try:
    check_output("python output.py")
except subprocess.CalledProcessError, e:
    print "native CalledProcessError.output = " + e.output
</snippet></ROW><ROW><id>5021641</id><snippet>subprocess -&gt; 
native -&gt; ('', None)
stderr subproces CalledProcessError.output = stdout
native CalledProcessError.output = stderr stdout
</snippet></ROW><ROW><id>5021641</id><snippet>subprocess.check_output</snippet></ROW><ROW><id>5021641</id><snippet>subprocess.check_output</snippet></ROW><ROW><id>5021648</id><snippet>with</snippet></ROW><ROW><id>5021648</id><snippet>if</snippet></ROW><ROW><id>5021648</id><snippet>with</snippet></ROW><ROW><id>5021648</id><snippet>for</snippet></ROW><ROW><id>5021648</id><snippet>del</snippet></ROW><ROW><id>5021648</id><snippet>del fal</snippet></ROW><ROW><id>5021648</id><snippet>f</snippet></ROW><ROW><id>5021648</id><snippet>fal</snippet></ROW><ROW><id>5021857</id><snippet>rsync</snippet></ROW><ROW><id>5022063</id><snippet>for filename in locate("*.dll"):
    if os.path.exists(filename + ".processed"):
        continue
    process(filename)
    open(filename + ".processed", "w").close()

for filename in locate("*.processed"):
    os.remove(filename)
</snippet></ROW><ROW><id>5022290</id><snippet>s = set()
s.add([10])
</snippet></ROW><ROW><id>5022290</id><snippet>s = set([[10]])
</snippet></ROW><ROW><id>5022412</id><snippet>from matplotlib import pyplot, lines
import numpy

x = numpy.linspace(0,10,100)
y = numpy.sin(x)*(1+x)

fig = pyplot.figure()
ax = pyplot.subplot(111)
ax.plot(x,y,label='a')

# new clear axis overlay with 0-1 limits
ax2 = pyplot.axes([0,0,1,1], axisbg=(1,1,1,0))

x,y = numpy.array([[0.05, 0.1, 0.9], [0.05, 0.5, 0.9]])
line = lines.Line2D(x, y, lw=5., color='r', alpha=0.4)
ax2.add_line(line)

pyplot.show()
</snippet></ROW><ROW><id>5022488</id><snippet>Date()</snippet></ROW><ROW><id>5022499</id><snippet>if</snippet></ROW><ROW><id>5022499</id><snippet>if (rec.endswith(b'FIN')):
    writefile.write(rec[:-3]) # Ignore the last 3 bytes
    break
</snippet></ROW><ROW><id>5022499</id><snippet>FIN</snippet></ROW><ROW><id>5022499</id><snippet>FIN</snippet></ROW><ROW><id>5022499</id><snippet>read()</snippet></ROW><ROW><id>5022499</id><snippet>rec</snippet></ROW><ROW><id>5022499</id><snippet>F</snippet></ROW><ROW><id>5022499</id><snippet>FI</snippet></ROW><ROW><id>5022499</id><snippet>def _sendFile(self, path):
    sendfile = open(path, 'rb')
    data = sendfile.read()

    self._con.sendall(encode_length(len(data)) # Send the length as a fixed size message
    self._con.sendall(data)


    # Get Acknowledgement
    self._con.recv(1) # Just 1 byte


def _recieveFile(self, path):
    LENGTH_SIZE = 4 # length is a 4 byte int.
    # Recieve the file from the client
    writefile = open(path, 'wb')
    length = decode_length(self.con.read(LENGTH_SIZE) # Read a fixed length integer, 2 or 4 bytes
    while (length):
        rec = self.con.recv(min(1024, length))
        writefile.write(rec)
        length -= sizeof(rec)

    self.con.send(b'A') # single character A to prevent issues with buffering
</snippet></ROW><ROW><id>5022603</id><snippet>try:
    index = bytes.index('a')
    print "Found letter a in position", index
    # we substract 1 because the array is 0-indexed.
    print "Bytes available:", len(bytes) - index - 1
except ValueError:
    print "Letter a not found"
</snippet></ROW><ROW><id>5022603</id><snippet>x[x.index('a')] == 'a'</snippet></ROW><ROW><id>5022603</id><snippet>x.index('a')</snippet></ROW><ROW><id>5022603</id><snippet>a</snippet></ROW><ROW><id>5022603</id><snippet>ValueError</snippet></ROW><ROW><id>5022603</id><snippet>a</snippet></ROW><ROW><id>5022666</id><snippet>fileName = input("Arb file name (.txt): ")
tempName = 'TempFile.txt'

with open(fileName) as inf, open(tempName, 'w', encoding='UTF-8') as outf:
    for line in inf:
        line = line.strip().split(": ", 1)[-1]

        #print(line)
        outf.write(line + '\n')
</snippet></ROW><ROW><id>5022821</id><snippet>&gt;&gt;&gt; class Foo(object): pass
...
</snippet></ROW><ROW><id>5022821</id><snippet>&gt;&gt;&gt; Foo.a = 1
&gt;&gt;&gt; Foo.a
1
</snippet></ROW><ROW><id>5022821</id><snippet>class</snippet></ROW><ROW><id>5022821</id><snippet>&gt;&gt;&gt; class Foo(object):
...     class Bar(object): pass
...
</snippet></ROW><ROW><id>5022821</id><snippet>Foo</snippet></ROW><ROW><id>5022821</id><snippet>Bar</snippet></ROW><ROW><id>5022821</id><snippet>Foo</snippet></ROW><ROW><id>5022821</id><snippet>Bar</snippet></ROW><ROW><id>5022821</id><snippet>&gt;&gt;&gt; class Foo(object):
...     class Bar(object): pass
...
&gt;&gt;&gt; class Foo(object): pass
...
&gt;&gt;&gt; class Bar(object): pass
...
&gt;&gt;&gt; Foo.Bar = Bar
</snippet></ROW><ROW><id>5022821</id><snippet>Page</snippet></ROW><ROW><id>5022821</id><snippet>contents</snippet></ROW><ROW><id>5022821</id><snippet>Page</snippet></ROW><ROW><id>5022821</id><snippet>contents</snippet></ROW><ROW><id>5022821</id><snippet>Child1.Subcls.a</snippet></ROW><ROW><id>5022821</id><snippet>Child2.Subcls.a</snippet></ROW><ROW><id>5022886</id><snippet>#!/usr/bin/python
import os

f = open('list.txt', 'r')
for n, name in enumerate(f):
    original_name = 'BusinessCard_%02d_Blue.pdf' % (n + 1)
    new_name = 'BusinessCard_%02d_%s_Blue.pdf' % (
                             n, ''.join(name.title().split()))
    if os.path.isfile(original_name):
        print "Renaming %s to %s" % (original_name, new_name),
        os.rename(original_name, new_name)
        print "OK!"
    else:
        print "File %s not found." % original_name
</snippet></ROW><ROW><id>5023160</id><snippet>conn.headers['last-modified']</snippet></ROW><ROW><id>5023175</id><snippet>datetime</snippet></ROW><ROW><id>5023175</id><snippet>datetime.datetime.strptime(request.POST['time'], '%H:%M:%S').time()
</snippet></ROW><ROW><id>5023351</id><snippet>subprocess</snippet></ROW><ROW><id>5023521</id><snippet>&gt;&gt;&gt; import csv
&gt;&gt;&gt; iterable = ['Reseller,cost', 'fred,100', 'joe,99']
&gt;&gt;&gt; reseller_csv = csv.DictReader(iterable)
&gt;&gt;&gt; map(lambda x: x.get('Reseller'), reseller_csv)
['fred', 'joe']
&gt;&gt;&gt; map(lambda x: x.get('Reseller'), reseller_csv)
[]
&gt;&gt;&gt;
</snippet></ROW><ROW><id>5023521</id><snippet>newline=''</snippet></ROW><ROW><id>5023521</id><snippet>\n</snippet></ROW><ROW><id>5023521</id><snippet>\t</snippet></ROW><ROW><id>5023638</id><snippet>rdiff signature oldfile oldfile.sig
rdiff delta oldfile.sig newfile | gzip -c | gpg -e -r ... &gt; compressed_encrypted_delta
</snippet></ROW><ROW><id>5023853</id><snippet>vote_date = models.DateField(_('vote date'), null=False, blank=False, auto_now=True)
</snippet></ROW><ROW><id>5023855</id><snippet>&gt;&gt;&gt; data = "chdir /"
&gt;&gt;&gt; a = data.split(" ")
&gt;&gt;&gt; a
['chdir', '/']
&gt;&gt;&gt; a[-1]
'/'
</snippet></ROW><ROW><id>5023855</id><snippet>data</snippet></ROW><ROW><id>5023855</id><snippet>.split(" ")</snippet></ROW><ROW><id>5023855</id><snippet>.split()</snippet></ROW><ROW><id>5023855</id><snippet>&gt;&gt;&gt; "chdir /".split(" ")
['chdir', '/']
&gt;&gt;&gt; "chdir  /".split(" ")
['chdir', '', '/']
&gt;&gt;&gt; "chdir  /".split()
['chdir', '/']
</snippet></ROW><ROW><id>5023924</id><snippet>import kyotocabinet
import collections
import heapq

class IterableCursor(kyotocabinet.Cursor, collections.Iterator):
    def __init__(self, *args, **kwargs):
        kyotocabinet.Cursor.__init__(self, *args, **kwargs)
        collections.Iterator.__init__(self)

    def next():
        "Return (key,value) pair"
        res = self.get(True)
        if res is None:
            raise StopIteration
        else:
            return res

def orderedMerge(*iterables, **kwargs):
    """Take a list of ordered iterables; return as a single ordered generator.

    @param key:     function, for each item return key value
                    (Hint: to sort descending, return negated key value)

    @param unique:  boolean, return only first occurrence for each key value?
    """
    key     = kwargs.get('key', (lambda x: x))
    unique  = kwargs.get('unique', False)

    _heapify       = heapq.heapify
    _heapreplace   = heapq.heapreplace
    _heappop       = heapq.heappop
    _StopIteration = StopIteration

    # preprocess iterators as heapqueue
    h = []
    for itnum, it in enumerate(map(iter, iterables)):
        try:
            next  = it.next
            data   = next()
            keyval = key(data)
            h.append([keyval, itnum, data, next])
        except _StopIteration:
            pass
    _heapify(h)

    # process iterators in ascending key order
    oldkeyval = None
    while True:
        try:
            while True:
                keyval, itnum, data, next = s = h[0]  # get smallest-key value
                                                      # raises IndexError when h is empty
                # if unique, skip duplicate keys
                if unique and keyval==oldkeyval:
                    pass
                else:
                    yield data
                    oldkeyval = keyval

                # load replacement value from same iterator
                s[2] = data = next()        # raises StopIteration when exhausted
                s[0] = key(data)
                _heapreplace(h, s)          # restore heap condition
        except _StopIteration:
            _heappop(h)                     # remove empty iterator
        except IndexError:
            return    
</snippet></ROW><ROW><id>5023924</id><snippet>from operator import itemgetter

def merge_join_kv(leftGen, rightGen):
    # assuming that kyotocabinet.Cursor has a copy initializer
    leftIter = IterableCursor(leftGen)
    rightIter = IterableCursor(rightGen)

    return orderedMerge(leftIter, rightIter, key=itemgetter(0), unique=True)
</snippet></ROW><ROW><id>5024291</id><snippet>dev_appserver.py</snippet></ROW><ROW><id>5024334</id><snippet>grid</snippet></ROW><ROW><id>5024334</id><snippet>checkline</snippet></ROW><ROW><id>5024334</id><snippet>Grid.checkline</snippet></ROW><ROW><id>5024334</id><snippet>class Foo:
    @staticmethod
    def test():
        print('Hi')
    @staticmethod
    def test2():
        Foo.test()

Foo.test2()       
</snippet></ROW><ROW><id>5024334</id><snippet>Hi
</snippet></ROW><ROW><id>5024361</id><snippet>reactor.main</snippet></ROW><ROW><id>5024361</id><snippet>main</snippet></ROW><ROW><id>5024361</id><snippet>if</snippet></ROW><ROW><id>5024361</id><snippet>if __name__ == "__main__":
    run_async_function(main)
    reactor.main()
</snippet></ROW><ROW><id>5024361</id><snippet>run_async_function</snippet></ROW><ROW><id>5024361</id><snippet>threaded_call</snippet></ROW><ROW><id>5024808</id><snippet>None</snippet></ROW><ROW><id>5024808</id><snippet>0</snippet></ROW><ROW><id>5024808</id><snippet>&gt;&gt;&gt; import ctypes
&gt;&gt;&gt; x=ctypes.c_char_p(0)
&gt;&gt;&gt; x
c_char_p(None)
&gt;&gt;&gt; x=ctypes.c_char_p(None)
&gt;&gt;&gt; x
c_char_p(None)
</snippet></ROW><ROW><id>5025040</id><snippet>argparse</snippet></ROW><ROW><id>5025040</id><snippet>import argparse

parser = argparse.ArgumentParser(description='Process some integers.')
parser.add_argument('integers', metavar='N', type=int, nargs='+',
                   help='an integer for the accumulator')
parser.add_argument('--sum', dest='accumulate', action='store_const',
                   const=sum, default=max,
                   help='sum the integers (default: find the max)')

args = parser.parse_args()
print args.accumulate(args.integers)
</snippet></ROW><ROW><id>5025284</id><snippet>django.contrib.comments.signals.comment_was_posted</snippet></ROW><ROW><id>5025882</id><snippet>parsed = False
while not parsed:
    try:
        x = int(raw_input('Enter the value:'))
        parsed = True # we only get here if the previous line didn't throw an exception
    except ValueError:
        print 'Invalid value!'
</snippet></ROW><ROW><id>5025882</id><snippet>parsed</snippet></ROW><ROW><id>5025882</id><snippet>True</snippet></ROW><ROW><id>5025939</id><snippet>raw_input</snippet></ROW><ROW><id>5025939</id><snippet>input</snippet></ROW><ROW><id>5025939</id><snippet>wage[me] = wage[me] * 2</snippet></ROW><ROW><id>5025939</id><snippet>input(prompt)</snippet></ROW><ROW><id>5025939</id><snippet>eval(raw_input(prompt))</snippet></ROW><ROW><id>5026501</id><snippet>d.has_key(k)</snippet></ROW><ROW><id>5026501</id><snippet>k in d</snippet></ROW><ROW><id>5026501</id><snippet>== None</snippet></ROW><ROW><id>5026501</id><snippet>!= None</snippet></ROW><ROW><id>5026501</id><snippet>is None</snippet></ROW><ROW><id>5026501</id><snippet>is not None</snippet></ROW><ROW><id>5026501</id><snippet>d.get(k, None)</snippet></ROW><ROW><id>5026501</id><snippet>None</snippet></ROW><ROW><id>5026501</id><snippet>d.get(k)</snippet></ROW><ROW><id>5026501</id><snippet>... and x.get('latitude') is not None and ...</snippet></ROW><ROW><id>5026501</id><snippet>if</snippet></ROW><ROW><id>5026501</id><snippet>x['attribute_name']</snippet></ROW><ROW><id>5026501</id><snippet>bedroom_number = int(x.get('bedroom_number', '0'))
latitude = x.get('latitude')
longitude = x.get('longitude')
title = x.get('title')
price_high = x.get('price_high')
if not (bedroom_number and latitude and longitude and title and price_high): continue
print title, latitude, longitude, bedroom_number, price_high, \
    'The price per bedroom is... ', float(price_high) / bedroom_number
</snippet></ROW><ROW><id>5026640</id><snippet>dist/mpl-data</snippet></ROW><ROW><id>5026877</id><snippet>std::string error;
if(pvalue != NULL) {
    error = boost::python::extract&lt;std::string&gt;(pvalue);
}
</snippet></ROW><ROW><id>5026932</id><snippet>popen.wait</snippet></ROW><ROW><id>5026932</id><snippet>poll</snippet></ROW><ROW><id>5026932</id><snippet>popen</snippet></ROW><ROW><id>5026932</id><snippet>kill</snippet></ROW><ROW><id>5026932</id><snippet>Popen</snippet></ROW><ROW><id>5026932</id><snippet>wait</snippet></ROW><ROW><id>5027365</id><snippet>[logger_submodule]                                                                                                                                           
level = INFO                                                                                                                                                 
handlers = submodulelog                                                                                                                                      
qualname = myapp.lib.submodule                                                                                                                               
propagate=0
</snippet></ROW><ROW><id>5027393</id><snippet>NameErrors</snippet></ROW><ROW><id>5027393</id><snippet>sys.modules</snippet></ROW><ROW><id>5027393</id><snippet>from &lt;module&gt; import &lt;variable&gt;</snippet></ROW><ROW><id>5027393</id><snippet>from sys import path</snippet></ROW><ROW><id>5027393</id><snippet>sys</snippet></ROW><ROW><id>5027393</id><snippet>sys.modules</snippet></ROW><ROW><id>5027393</id><snippet>from pkg import module</snippet></ROW><ROW><id>5027393</id><snippet>pkg.module</snippet></ROW><ROW><id>5027414</id><snippet>&lt;a href="{% url view-name %}?subjectID={{id}}"&gt;your link&lt;/a&gt;
</snippet></ROW><ROW><id>5027414</id><snippet>&lt;a href="{% url path.to.some_view subjectid=id action=action %}"&gt;your link&lt;/a&gt;
</snippet></ROW><ROW><id>5027585</id><snippet>category_a</snippet></ROW><ROW><id>5027585</id><snippet>category_b</snippet></ROW><ROW><id>5027585</id><snippet>constants</snippet></ROW><ROW><id>5027585</id><snippet>constants.category_a</snippet></ROW><ROW><id>5027585</id><snippet>constants.category_b</snippet></ROW><ROW><id>5027585</id><snippet>class</snippet></ROW><ROW><id>5027585</id><snippet>import *</snippet></ROW><ROW><id>5027674</id><snippet>/quote/service_order/(\d+)/(\d+)
</snippet></ROW><ROW><id>5027674</id><snippet># client_id - first parameter in braces from the url
# order_id - 2nd parameter in braces from the url
def order_view(request, client_id, order_id):
    order = models.Order.objects.get(pk=int(order_id))
    if request.POST.get('delete'):
        order.delete()
</snippet></ROW><ROW><id>5028262</id><snippet>ast.literal_eval</snippet></ROW><ROW><id>5028262</id><snippet>eval</snippet></ROW><ROW><id>5028262</id><snippet>null</snippet></ROW><ROW><id>5028262</id><snippet>None</snippet></ROW><ROW><id>5028349</id><snippet>try:
    from lxml import etree
except ImportError:
    try:
        from xml.etree.cElementTree as etree
    except ImportError:
        from xml.etree.ElementTree as etree

doc = """&lt;Book_API&gt;
&lt;Contributor_List&gt;
&lt;Display_Name&gt;Jason&lt;/Display_Name&gt;
&lt;/Contributor_List&gt;
&lt;Contributor_List&gt;
&lt;Display_Name&gt;John Smith&lt;/Display_Name&gt;
&lt;/Contributor_List&gt;
&lt;/Book_API&gt;"""
xml_doc = etree.fromstring(doc)
</snippet></ROW><ROW><id>5028449</id><snippet>try:
    f(**kwargs)
except TypeError:
    #do stuff
</snippet></ROW><ROW><id>5028820</id><snippet>com.example.myapp.&lt;pid&gt;</snippet></ROW><ROW><id>5028820</id><snippet>+-------------------+                    
| MASTER APP        |                    +--------------------+
| on my workstation |------ RPyC --------| Server#0 Manager   |
+-------------------+                    +--------------------+
      |                                      | | |
    RPyC                                     | | '-- dbus ---[INSTANCE #0]
      |                                      | '--- dbus ---[INSTANCE #1]
   +--------------------+                    '---- dbus ---[INSTANCE #2]
   | Server#1 Manager   |
   +--------------------+
      | | |
      | | '-- dbus ---[INSTANCE #0]
      | '--- dbus ---[INSTANCE #1]
      '---- dbus ---[INSTANCE #2]
</snippet></ROW><ROW><id>5028826</id><snippet>re.UNICODE</snippet></ROW><ROW><id>5028826</id><snippet>u</snippet></ROW><ROW><id>5028826</id><snippet>&gt;&gt;&gt; re.match(r'^/by_tag/(?P&lt;tag&gt;\w+)/(?P&lt;filename&gt;(\w|[.,!#%{}()@])+)$', u'/by_tag/påske/øyfjell.jpg', re.UNICODE).groupdict()
{'tag': u'p\xe5ske', 'filename': u'\xf8yfjell.jpg'}
</snippet></ROW><ROW><id>5028826</id><snippet>u</snippet></ROW><ROW><id>5029305</id><snippet>for i, d in enumerate(records):
    print i, d
</snippet></ROW><ROW><id>5029305</id><snippet>n = records.next()
</snippet></ROW><ROW><id>5029305</id><snippet>n = next(records)
</snippet></ROW><ROW><id>5029305</id><snippet>next()</snippet></ROW><ROW><id>5029305</id><snippet>rewind()</snippet></ROW><ROW><id>5029305</id><snippet>rewind()</snippet></ROW><ROW><id>5029305</id><snippet>&gt;&gt; help(records)</snippet></ROW><ROW><id>5029562</id><snippet>class A(object):
    test = []

    def coolThings(self):
        # do cool things here and print the new self.test
        print self.test
</snippet></ROW><ROW><id>5029586</id><snippet>ID</snippet></ROW><ROW><id>5029586</id><snippet>IDs</snippet></ROW><ROW><id>5029586</id><snippet>ID==1</snippet></ROW><ROW><id>5029586</id><snippet>IDs</snippet></ROW><ROW><id>5029586</id><snippet>ID</snippet></ROW><ROW><id>5029586</id><snippet>AccessEntity</snippet></ROW><ROW><id>5029958</id><snippet>defaultdict(lambda : defaultdict(int))
</snippet></ROW><ROW><id>5030940</id><snippet>ctypes.Structure</snippet></ROW><ROW><id>5030940</id><snippet>class _Opaque(ctypes.Structure):
    pass
</snippet></ROW><ROW><id>5030940</id><snippet>lib.f.restype = ctypes.POINTER(_Opaque)
</snippet></ROW><ROW><id>5030940</id><snippet>lib.g.argtypes = [ctypes.POINTER(_Opaque)]
</snippet></ROW><ROW><id>5030940</id><snippet>ctypes</snippet></ROW><ROW><id>5030940</id><snippet>g</snippet></ROW><ROW><id>5030940</id><snippet>f</snippet></ROW><ROW><id>5030940</id><snippet>_</snippet></ROW><ROW><id>5030940</id><snippet>_Opaque</snippet></ROW><ROW><id>5031159</id><snippet>from django.utils.importlib import import_module
from django.conf import settings
from django.contrib.auth import get_user
from django.contrib.auth.models import AnonymousUser
from django.contrib.auth import SESSION_KEY, BACKEND_SESSION_KEY, load_backend

engine = import_module(settings.SESSION_ENGINE)
session = engine.SessionStore(YOUR_SESSION_KEY)

try:
    user_id = session[SESSION_KEY]
    backend_path = session[BACKEND_SESSION_KEY]
    backend = load_backend(backend_path)
    user = backend.get_user(user_id) or AnonymousUser()
except KeyError:
    user = AnonymousUser()

if user.is_authenticated():
    print "User"
else:
    print "Guest"
</snippet></ROW><ROW><id>5031191</id><snippet>array</snippet></ROW><ROW><id>5031191</id><snippet>array.byteswap()</snippet></ROW><ROW><id>5031191</id><snippet>sys.byteorder</snippet></ROW><ROW><id>5031191</id><snippet># Create an array of 16-bit signed integers
a = array.array("h", range(10))
# Write to file in big endian order
if sys.byteorder == "little":
    a.byteswap()
with open("data", "wb") as f:
    a.tofile(f)
# Read from file again
b = array.array("h")
with open("data", "rb") as f:
    b.fromfile(f, 10)
if sys.byteorder == "little":
    b.byteswap()
</snippet></ROW><ROW><id>5031414</id><snippet>backend_agg</snippet></ROW><ROW><id>5031414</id><snippet>backend_tkagg</snippet></ROW><ROW><id>5031414</id><snippet>import matplotlib.backends.backend_tkagg as backend
from matplotlib.figure import Figure

manager = backend.new_figure_manager(0)
fig = manager.canvas.figure
ax = fig.add_subplot(1,1,1)
ax.plot([1,2,3])
fig.show()
backend.show()
</snippet></ROW><ROW><id>5031414</id><snippet>import matplotlib.pyplot as plt
fig = plt.figure()
ax = fig.add_subplot(1,1,1)
ax.plot([1,2,3])
plt.show()
</snippet></ROW><ROW><id>5031414</id><snippet>pyplot</snippet></ROW><ROW><id>5031749</id><snippet>Item[index]</snippet></ROW><ROW><id>5031752</id><snippet>dict.pop</snippet></ROW><ROW><id>5031752</id><snippet> def __init__(self, *args, **kwargs):
    user = kwargs.pop('user', None)
    super(BaseCheckoutForm, self).__init__(*args, **kwargs)
    if user is not None:
        self.prefill_from_user(user)
</snippet></ROW><ROW><id>5032089</id><snippet>from pyramid.events import NewRequest

def do_something(request):
    # do something here
    pass

def setup_post_request(event):
    event.request.add_finished_callback(do_something)

config.add_subscriber(setup_post_request, NewRequest)
</snippet></ROW><ROW><id>5032315</id><snippet>import lxml.objectify as objectify
import io

content='''\
&lt;?xml version="1.0" encoding="utf-8"?&gt;
&lt;feed xmlns="http://www.w3.org/2005/Atom" xmlns:dd="http://example.com/ns/1.0" xml:lang="en-US"&gt;
&lt;entry&gt;
    &lt;content type="html"&gt;Hello World!&lt;/content&gt;
    &lt;dd:country_code&gt;USA&lt;/dd:country_code&gt;
&lt;/entry&gt;
&lt;/feed&gt;'''

doc=objectify.parse(io.BytesIO(content))
tree=doc.getroot()
</snippet></ROW><ROW><id>5032315</id><snippet>print(list(tree.entry.iterchildren()))
# ['Hello World!', 'USA']
</snippet></ROW><ROW><id>5032315</id><snippet>print(tree.entry["content"])
# Hello World!
</snippet></ROW><ROW><id>5032315</id><snippet>print(tree.entry["{http://example.com/ns/1.0}country_code"])
# USA
</snippet></ROW><ROW><id>5033049</id><snippet>class AutoJoiningThread(threading.Thread):
    def run(self):
        threading.Thread.run(self)
        gobject.idle_add(self.join)
</snippet></ROW><ROW><id>5033049</id><snippet>import threading
import time
import sys
import gobject
gobject.threads_init()

class Child:
    def __init__(self):
        self.result = None

    def play(self, count):
        print "Child starting to play."
        for i in range(count):
            print "Child playing."
            time.sleep(1)
        print "Child finished playing."
        self.result = 42

    def get_result(self, obj):
        print "The result was "+str(self.result)

class AutoJoiningThread(threading.Thread, gobject.GObject):
    __gsignals__ = {
        'finished': (gobject.SIGNAL_RUN_LAST,
                     gobject.TYPE_NONE,
                     ())
        }

    def __init__(self, *args, **kwargs):
        threading.Thread.__init__(self, *args, **kwargs)
        gobject.GObject.__init__(self)

    def run(self):
        threading.Thread.run(self)
        gobject.idle_add(self.join)
        gobject.idle_add(self.emit, 'finished')

    def join(self):
        threading.Thread.join(self)
        print "Called Thread.join()"

if __name__ == '__main__':
    print "Creating child"
    child = Child()
    print "Creating thread"
    thread = AutoJoiningThread(target=child.play,
                               args=(3,))
    thread.connect('finished', child.get_result)
    print "Starting thread"
    thread.start()
    print "Running mainloop (Ctrl+C to exit)"
    mainloop = gobject.MainLoop()

    try:
        mainloop.run()
    except KeyboardInterrupt:
        print "Received KeyboardInterrupt.  Quiting."
        sys.exit()

    print "God knows how we got here.  Quiting."
    sys.exit()
</snippet></ROW><ROW><id>5033049</id><snippet>class AutoJoiningProcess(multiprocessing.Process):
    def start(self):
        thread = AutoJoiningThread(target=self.start_process)
        thread.start() # automatically joins

    def start_process(self):
        multiprocessing.Process.start(self)
        self.join()
</snippet></ROW><ROW><id>5033049</id><snippet>import threading
import multiprocessing
import time
import sys
import gobject
gobject.threads_init()

class Child:
    def __init__(self):
        self.result = multiprocessing.Manager().list()

    def play(self, count):
        print "Child starting to play."
        for i in range(count):
            print "Child playing."
            time.sleep(1)
    print "Child finished playing."
        self.result.append(42)

    def get_result(self, obj):
        print "The result was "+str(self.result)

class AutoJoiningThread(threading.Thread, gobject.GObject):
    __gsignals__ = {
        'finished': (gobject.SIGNAL_RUN_LAST,
                     gobject.TYPE_NONE,
                     ())
    }

    def __init__(self, *args, **kwargs):
        threading.Thread.__init__(self, *args, **kwargs)
        gobject.GObject.__init__(self)

    def run(self):
        threading.Thread.run(self)
        gobject.idle_add(self.join)
        gobject.idle_add(self.emit, 'finished')

    def join(self):
        threading.Thread.join(self)
        print "Called Thread.join()"

class AutoJoiningProcess(multiprocessing.Process, gobject.GObject):
    __gsignals__ = {
        'finished': (gobject.SIGNAL_RUN_LAST,
                     gobject.TYPE_NONE,
                     ())
        }

    def __init__(self, *args, **kwargs):
        multiprocessing.Process.__init__(self, *args, **kwargs)
        gobject.GObject.__init__(self)

    def start(self):
        thread = AutoJoiningThread(target=self.start_process)
        thread.start()

    def start_process(self):
        multiprocessing.Process.start(self)
        self.join()
        gobject.idle_add(self.emit, 'finished')

    def join(self):
        multiprocessing.Process.join(self)
        print "Called Process.join()"

if __name__ == '__main__':
    print "Creating child"
    child = Child()
    print "Creating thread"
    process = AutoJoiningProcess(target=child.play,
                               args=(3,))
    process.connect('finished',child.get_result)
    print "Starting thread"
    process.start()
    print "Running mainloop (Ctrl+C to exit)"
    mainloop = gobject.MainLoop()

    try:
        mainloop.run()
    except KeyboardInterrupt:
        print "Received KeyboardInterrupt.  Quiting."
        sys.exit()

    print "God knows how we got here.  Quiting."
    sys.exit()
</snippet></ROW><ROW><id>5033066</id><snippet>cython</snippet></ROW><ROW><id>5033066</id><snippet>-a</snippet></ROW><ROW><id>5033066</id><snippet>Person</snippet></ROW><ROW><id>5033066</id><snippet>Person</snippet></ROW><ROW><id>5033066</id><snippet>cdef class</snippet></ROW><ROW><id>5033066</id><snippet>p1</snippet></ROW><ROW><id>5033066</id><snippet>p2</snippet></ROW><ROW><id>5033066</id><snippet>random.sample</snippet></ROW><ROW><id>5033066</id><snippet>tuple</snippet></ROW><ROW><id>5033066</id><snippet>list</snippet></ROW><ROW><id>5033066</id><snippet>ctypedef int ITYPE_t

cdef class CyPerson:
    # These attributes are placed in the extension type's C-struct, so C-level
    # access is _much_ faster.
    cdef ITYPE_t value, id, max_val
    cdef tuple awareness_status

    def __init__(self, ITYPE_t id, ITYPE_t value):
        # The __init__ function is much the same as before.
        self.value = value
        self.id = id
        self.max_val = 50000
        ## Initial awareness status.          
        self.awareness_status = (self.max_val, -1)

NPERSONS = 10000

import math
import random

class Some_class(object):

    def __init__(self):
        ri = lambda: random.randint(0, 10)
        self.possibilities = [(CyPerson(ri(), ri()), CyPerson(ri(), ri())) for i in range(NPERSONS)]

    def update_awareness_status(self, this_var, timePd):
        '''Inputs: this_var (type: float)
           timePd (type: int)
           Output: None'''

        cdef CyPerson p1, p2
        price = 10

        max_number = len(self.possibilities)
        # self.possibilities is a list of tuples.
        # Each tuple is a pair of person objects. 

        k = int(math.ceil(0.3 * max_number))
        actual_number = random.choice(range(k))
        chosen_possibilities = random.sample(self.possibilities,
                                         actual_number)
        if len(chosen_possibilities) &gt; 0:
            # chosen_possibilities is a list of tuples, each tuple is a pair
            # of person objects. I have included the code for the Person class
            # below.
            for persons in chosen_possibilities:
                p1, p2 = persons
                # awareness_status is a tuple (float, int)
                if p1.awareness_status[1] &lt; p2.awareness_status[1]:
                    if p1.value &gt; p2.awareness_status[0]:
                        p1.awareness_status = (this_var, timePd)
                    else:
                        p1.awareness_status = p2.awareness_status
                elif p1.awareness_status[1] &gt; p2.awareness_status[1]:
                    if p2.value &gt; p1.awareness_status[0]:
                        p2.awareness_status = (price, timePd)
                    else:
                        p2.awareness_status = p1.awareness_status
</snippet></ROW><ROW><id>5033148</id><snippet>manage.py runsrever</snippet></ROW><ROW><id>5033148</id><snippet>import os
PROJECT_DIR = os.path.dirname(__file__)

# You probably provided some python-paths (places to look for python modules) 
# in your eclipse configuration. You'll need to add those path's to the wsgi 
# script too.

os.path.append(PROJECT_DIR)
os.path.append(PROJECT_DIR + '/lib')
os.path.append(PROJECT_DIR + '/src')

# You probably have this set in eclipse too:
os.environ['DJANGO_SETTINGS_MODULE'] = 'production_setting'

import django.core.handlers.wsgi
application = django.core.handlers.wsgi.WSGIHandler()
</snippet></ROW><ROW><id>5033148</id><snippet>settings.py</snippet></ROW><ROW><id>5033148</id><snippet>from settings import *

DEBUG = False
TEMPLATE_DEBUG = False

maybe your database settings...
maybe some secret keys...
maybe some API keys to various services...
</snippet></ROW><ROW><id>5033525</id><snippet>require 'iconv'
-- convert from utf8 to latin1
local decoder = iconv.new('latin1', 'utf8')
local data = io.open('doubleutf8.dat'):read('*a')
-- decodedData is encoded in utf8
local decodedData = decoder:iconv(data)
-- if your terminal understands utf8, prints "нижний новгород"
-- if not, you can further convert it from utf8 to any encoding, like KOI8-R
print(decodedData)
</snippet></ROW><ROW><id>5033540</id><snippet>SimpleXMLRPCServer</snippet></ROW><ROW><id>5033540</id><snippet>from SocketServer import ThreadingMixIn
from SimpleXMLRPCServer import SimpleXMLRPCServer

class MyXMLRPCServer(ThreadingMixIn, SimpleXMLRPCServer):
    """..."""
</snippet></ROW><ROW><id>5033977</id><snippet>r"""(?mx)
    ^country\s:\s*(.+)\s
    (?:^.+\s)*?
    ^continent\s:\s*(.+)\s
    (?:^.+\s)*?
    (?:^(?:planet\s:\s*(.+)\s|-+\s|\Z))
"""
</snippet></ROW><ROW><id>5034070</id><snippet>Child</snippet></ROW><ROW><id>5034070</id><snippet>Parent</snippet></ROW><ROW><id>5034070</id><snippet>children = relationship("Child", cascade="all,delete", backref="parent")
</snippet></ROW><ROW><id>5034070</id><snippet>"Child"</snippet></ROW><ROW><id>5034070</id><snippet>delete-orphan</snippet></ROW><ROW><id>5034070</id><snippet>delete</snippet></ROW><ROW><id>5034070</id><snippet>delete-orphan</snippet></ROW><ROW><id>5034070</id><snippet>Child</snippet></ROW><ROW><id>5034070</id><snippet>parent = relationship(Parent, backref=backref("children", cascade="all,delete"))
</snippet></ROW><ROW><id>5034070</id><snippet>from sqlalchemy.orm import backref</snippet></ROW><ROW><id>5034111</id><snippet>var route_id = $(this).attr('input[name=route_id]').val()
</snippet></ROW><ROW><id>5034111</id><snippet>var route_id = $(this).find('input[name=route_id]').val()
</snippet></ROW><ROW><id>5034111</id><snippet>input[name=route_id]</snippet></ROW><ROW><id>5034111</id><snippet>input</snippet></ROW><ROW><id>5034111</id><snippet>[name=route_id]</snippet></ROW><ROW><id>5034111</id><snippet>var route_id = $('input[name=route_id]',this).val()
</snippet></ROW><ROW><id>5034348</id><snippet>easy_install somemodule
</snippet></ROW><ROW><id>5034440</id><snippet>class A(object):
    def __init__(self):
        print('Running A.__init__')
        super(A,self).__init__()
class B(A):
    def __init__(self):
        print('Running B.__init__')        
        # super(B,self).__init__()
        A.__init__(self) 

class C(A):
    def __init__(self):
        print('Running C.__init__')
        super(C,self).__init__()
class D(B,C):
    def __init__(self):
        print('Running D.__init__')
        super(D,self).__init__()

foo=D()
</snippet></ROW><ROW><id>5034440</id><snippet>    A
   / \
  B   C
   \ /
    D
</snippet></ROW><ROW><id>5034440</id><snippet>Running D.__init__
Running B.__init__
Running A.__init__
</snippet></ROW><ROW><id>5034440</id><snippet>C</snippet></ROW><ROW><id>5034440</id><snippet>__init__</snippet></ROW><ROW><id>5034440</id><snippet>B</snippet></ROW><ROW><id>5034440</id><snippet>__init__</snippet></ROW><ROW><id>5034440</id><snippet>A</snippet></ROW><ROW><id>5034440</id><snippet>__init__</snippet></ROW><ROW><id>5034440</id><snippet>super</snippet></ROW><ROW><id>5034440</id><snippet># super(B,self).__init__()
</snippet></ROW><ROW><id>5034440</id><snippet>A.__init__(self) 
</snippet></ROW><ROW><id>5034440</id><snippet>Running D.__init__
Running B.__init__
Running C.__init__
Running A.__init__
</snippet></ROW><ROW><id>5034440</id><snippet>__init__</snippet></ROW><ROW><id>5034440</id><snippet>B.__init__</snippet></ROW><ROW><id>5034440</id><snippet>super(B,self).__init__()</snippet></ROW><ROW><id>5034440</id><snippet>A.__init__(self)</snippet></ROW><ROW><id>5034440</id><snippet>super(B,self).__init__()</snippet></ROW><ROW><id>5034440</id><snippet>C.__init__(self)</snippet></ROW><ROW><id>5034440</id><snippet>B</snippet></ROW><ROW><id>5034440</id><snippet>C</snippet></ROW><ROW><id>5034440</id><snippet>super(B,self)</snippet></ROW><ROW><id>5034440</id><snippet>C</snippet></ROW><ROW><id>5034440</id><snippet>__init__</snippet></ROW><ROW><id>5034440</id><snippet>self.__class__.mro()</snippet></ROW><ROW><id>5034440</id><snippet>C</snippet></ROW><ROW><id>5034440</id><snippet>self</snippet></ROW><ROW><id>5034440</id><snippet>foo</snippet></ROW><ROW><id>5034440</id><snippet>C</snippet></ROW><ROW><id>5034440</id><snippet>super</snippet></ROW><ROW><id>5034440</id><snippet>__init__</snippet></ROW><ROW><id>5034440</id><snippet>__init__</snippet></ROW><ROW><id>5034440</id><snippet>__init__</snippet></ROW><ROW><id>5034440</id><snippet>super</snippet></ROW><ROW><id>5034440</id><snippet>**kwargs</snippet></ROW><ROW><id>5034440</id><snippet>super</snippet></ROW><ROW><id>5034440</id><snippet>super</snippet></ROW><ROW><id>5034440</id><snippet>super</snippet></ROW><ROW><id>5034506</id><snippet>print html.parse(url).xpath('//p/text()')
</snippet></ROW><ROW><id>5034506</id><snippet>['Here is the First Paragraph.', 'Here is the second Paragraph.', 
 'Paragraph Three."']
</snippet></ROW><ROW><id>5034662</id><snippet>bin</snippet></ROW><ROW><id>5034662</id><snippet>PATH</snippet></ROW><ROW><id>5034662</id><snippet>__init__.py</snippet></ROW><ROW><id>5034853</id><snippet>sys.setrecursionlimit(n)</snippet></ROW><ROW><id>5035382</id><snippet>jinja_env = Environment(...)
jinja_env.globals['url_for'] = url_for
</snippet></ROW><ROW><id>5035382</id><snippet>from jinja2 import Environment
env = Environment()
env.globals['foo'] = lambda: "foobar"
env.from_string('{% macro bar() %}{{ foo() }}{% endmacro %}{{ bar() }}').render() 
</snippet></ROW><ROW><id>5035733</id><snippet>import shlex
shlex.split('arg arg1 "arg2 with quotes" arg4 arg5=1')
</snippet></ROW><ROW><id>5036444</id><snippet>def getModel(db_table):
  class MyClass(models.Model):
     # define as usual ...
     class Meta:
       db_table = db_table

  return MyClass

newClass = getModel('29345794_table')
newClass.objects.filter( ...
</snippet></ROW><ROW><id>5036444</id><snippet>_meta</snippet></ROW><ROW><id>5036444</id><snippet>_meta</snippet></ROW><ROW><id>5036444</id><snippet>def getModel(db_table):
  class MyClassMetaclass(models.base.ModelBase):
    def __new__(cls, name, bases, attrs):
      name += db_table
      return models.base.ModelBase.__new__(cls, name, bases, attrs)

  class MyClass(models.Model):
    __metaclass__ = MyClassMetaclass

    class Meta:
      db_table = db_table

  return MyClass
</snippet></ROW><ROW><id>5036444</id><snippet>&gt;&gt;&gt; MyModel._meta.db_table = '10293847_table'
&gt;&gt;&gt; MyModel.objects.all()
</snippet></ROW><ROW><id>5036459</id><snippet>%s</snippet></ROW><ROW><id>5036459</id><snippet>sql = sql + " WHERE CAT_ID = %s
                AND COMMONS_ID = %s " % (p_CAT_ID, p_COMMONS_ID)
</snippet></ROW><ROW><id>5036459</id><snippet>c1 = connection.cursor()
sql = "SELECT COMMONS_ID, CAT_ID, CAT_NAME 
         FROM DT_CATALOG"

sql = sql + " WHERE CAT_ID = :foo 
                AND COMMONS_ID = :bar "

param = (p_CAT_ID, p_COMMONS_ID)
c1.execute(sql, param)
return c1
</snippet></ROW><ROW><id>5036459</id><snippet>c1 = connection.cursor()
sql = "SELECT COMMONS_ID, CAT_ID, CAT_NAME 
         FROM DT_CATALOG"

sql = sql + " WHERE CAT_ID = :foo 
                AND COMMONS_ID = :bar "

param = {"foo": p_CAT_ID, "bar": p_COMMONS_ID}
c1.execute(sql, param)
return c1
</snippet></ROW><ROW><id>5036766</id><snippet>import sharedmem as shm
import numpy as np
import multiprocessing as mp

def worker(q,arr):
    done = False
    while not done:
        cmd = q.get()
        if cmd == 'done':
            done = True
        elif cmd == 'data':
            ##Fake data. In real life, get data from hardware.
            rnd=np.random.randint(100)
            print('rnd={0}'.format(rnd))
            arr[:]=rnd
        q.task_done()

if __name__=='__main__':
    N=10
    arr=shm.zeros(N,dtype=np.uint8)
    q=mp.JoinableQueue()    
    proc = mp.Process(target=worker, args=[q,arr])
    proc.daemon=True
    proc.start()

    for i in range(3):
        q.put('data')
        # Wait for the computation to finish
        q.join()   
        print arr.shape
        print(arr)
    q.put('done')
    proc.join()
</snippet></ROW><ROW><id>5036766</id><snippet>rnd=53
(10,)
[53 53 53 53 53 53 53 53 53 53]
rnd=15
(10,)
[15 15 15 15 15 15 15 15 15 15]
rnd=87
(10,)
[87 87 87 87 87 87 87 87 87 87]
</snippet></ROW><ROW><id>5036775</id><snippet>a = {}
k = 0
while k &lt; 10:
    &lt;dynamically create key&gt; 
    key = ...
    &lt;calculate value&gt; 
    value = ...
    a[key] = value 
    k += 1
</snippet></ROW><ROW><id>5036797</id><snippet>z = request.GET.copy()
del z['a']
</snippet></ROW><ROW><id>5036900</id><snippet>A = array([[32, 32, 99,  9, 45],  # A
   [99, 45,  9, 45, 32],
   [45, 45, 99, 99, 32],
   [ 9,  9, 32, 45, 99]])

B = array([ 99, 32, 45, 9])

ii = np.argsort(B)
C = np.digitize(A.reshape(-1,),np.sort(B)) - 1
</snippet></ROW><ROW><id>5036900</id><snippet>D = np.choose(C,ii).reshape(A.shape)
</snippet></ROW><ROW><id>5036900</id><snippet>D = np.argsort(B)[C].reshape(A.shape)
</snippet></ROW><ROW><id>5036900</id><snippet>np.argsort(B)[np.digitize(A.reshape(-1,),np.sort(B)) - 1].reshape(A.shape)
</snippet></ROW><ROW><id>5036910</id><snippet>(?P&lt;id&gt;REGEXP)</snippet></ROW><ROW><id>5036910</id><snippet>(?P...</snippet></ROW><ROW><id>5036910</id><snippet>(r'^view/(?P&lt;post_number&gt;\d+)/$', 'foofunc'),

# we're capturing a very simple regular expression \d+ (any digits) as post_number 
# to be passed on to foofunc

def foofunc(request, post_number):
    print post_number

# visiting /view/3 would print 3. 
</snippet></ROW><ROW><id>5036973</id><snippet>self.__class__</snippet></ROW><ROW><id>5036988</id><snippet>Product.name = classmethod(lambda cls: "stubbed_name")
</snippet></ROW><ROW><id>5036988</id><snippet>classmethod()</snippet></ROW><ROW><id>5036988</id><snippet>Product.name = lambda self: "stubbed_name"
</snippet></ROW><ROW><id>5037045</id><snippet>import inspect

class renameable(object):
  def rename_me(self, new_name):
    for stack_frame in inspect.stack()[1:]:
      frame_object = stack_frame[0] # frame is the first object in the tuple
      for (name, value) in frame_object.f_locals.iteritems():
        if value is self:
          old_name = name
          matched_frame = frame_object
          break
      if matched_frame:
        break
    if matched_frame:
      matched_frame.f_locals[new_name] = matched_frame.f_locals[old_name]
      del matched_frame.f_locals[old_name]
</snippet></ROW><ROW><id>5037045</id><snippet>rename_me</snippet></ROW><ROW><id>5037045</id><snippet>&gt;&gt;&gt; import blah
&gt;&gt;&gt; x = blah.renameable()
&gt;&gt;&gt; x
&lt;blah.renameable object at 0x1004cb790&gt;
&gt;&gt;&gt; x.rename_me('y')
&gt;&gt;&gt; x
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
NameError: name 'x' is not defined
&gt;&gt;&gt; y
&lt;blah.renameable object at 0x1004cb790&gt;
&gt;&gt;&gt;
</snippet></ROW><ROW><id>5037045</id><snippet>withhacks</snippet></ROW><ROW><id>5037107</id><snippet>for address in sess.query(Address).join(Address.association).filter_by(type='users'):
    print "Street", address.street, "Member", address.member
</snippet></ROW><ROW><id>5038469</id><snippet>importlib.import_module()</snippet></ROW><ROW><id>5038469</id><snippet>__import__</snippet></ROW><ROW><id>5038469</id><snippet>import_module()</snippet></ROW><ROW><id>5038469</id><snippet>__name__</snippet></ROW><ROW><id>5038588</id><snippet>client_encoding</snippet></ROW><ROW><id>5038588</id><snippet>client_encoding</snippet></ROW><ROW><id>5038929</id><snippet>from Foundation import *
standardUserDefaults = NSUserDefaults.standardUserDefaults()
persistentDomains = standardUserDefaults.persistentDomainNames()
persistentDomains.objectAtIndex_(14)
aDomain = standardUserDefaults.persistentDomainForName_(persistentDomains[14])
aDomain.keys()
</snippet></ROW><ROW><id>5039417</id><snippet>mypackage</snippet></ROW><ROW><id>5039417</id><snippet>import mypackage.utils
</snippet></ROW><ROW><id>5039814</id><snippet>new.classobj</snippet></ROW><ROW><id>5039814</id><snippet>classobj</snippet></ROW><ROW><id>5039814</id><snippet>type</snippet></ROW><ROW><id>5039814</id><snippet>type</snippet></ROW><ROW><id>5040002</id><snippet>bytearray</snippet></ROW><ROW><id>5040002</id><snippet>b = bytearray(open('a.out', 'rb').read())
for i in range(len(b)):
    b[i] ^= 0x71
open('b.out', 'wb').write(b)
</snippet></ROW><ROW><id>5040017</id><snippet>import</snippet></ROW><ROW><id>5040017</id><snippet>import</snippet></ROW><ROW><id>5040017</id><snippet>import</snippet></ROW><ROW><id>5040017</id><snippet>import</snippet></ROW><ROW><id>5040017</id><snippet>import static</snippet></ROW><ROW><id>5040017</id><snippet>import</snippet></ROW><ROW><id>5040017</id><snippet>import</snippet></ROW><ROW><id>5040017</id><snippet>include</snippet></ROW><ROW><id>5040017</id><snippet>use</snippet></ROW><ROW><id>5040017</id><snippet>IMPORT</snippet></ROW><ROW><id>5040351</id><snippet># This is used to ensure paths in generated ZIP files always use
# forward slashes as the directory separator, as required by the
# ZIP format specification.
if os.sep != "/" and os.sep in filename:
    filename = filename.replace(os.sep, "/")
</snippet></ROW><ROW><id>5040626</id><snippet>/etc/resolv.conf</snippet></ROW><ROW><id>5040626</id><snippet>root</snippet></ROW><ROW><id>5040723</id><snippet>byte_string.decode('utf-8')</snippet></ROW><ROW><id>5040723</id><snippet>StreamReader</snippet></ROW><ROW><id>5040732</id><snippet>StopIteration</snippet></ROW><ROW><id>5040732</id><snippet>yield</snippet></ROW><ROW><id>5040961</id><snippet>&gt;&gt;&gt; import re
&gt;&gt;&gt; re.sub("&amp;#(\d+);",lambda x:unichr(int(x.group(1),10)),": or .")
u': or .'
</snippet></ROW><ROW><id>5041056</id><snippet>mydivs = soup.findAll("div", { "class" : "stylelistrow" })
</snippet></ROW><ROW><id>5041069</id><snippet>db.put()</snippet></ROW><ROW><id>5041069</id><snippet>db</snippet></ROW><ROW><id>5041069</id><snippet>db.put()</snippet></ROW><ROW><id>5041069</id><snippet>put()</snippet></ROW><ROW><id>5041683</id><snippet>static_dir</snippet></ROW><ROW><id>5041683</id><snippet>app.yaml</snippet></ROW><ROW><id>5041889</id><snippet>parse(response):
    #make some manipulations
    if info.startswith('Foo'):
            item['foo'] = info.split(':')[1]
            return [item]
        else:
            return []
</snippet></ROW><ROW><id>5041889</id><snippet>yield</snippet></ROW><ROW><id>5041889</id><snippet>parse(response):
    #make some manipulations
    if info.startswith('Foo'):
            item['foo'] = info.split(':')[1]
            yield item
        else:
            return
</snippet></ROW><ROW><id>5042185</id><snippet>numpy</snippet></ROW><ROW><id>5042185</id><snippet>ccworder</snippet></ROW><ROW><id>5042185</id><snippet>In []: def ccworder(A):
   ..:     A= A- mean(A, 1)[:, None]
   ..:     return argsort(arctan2(A[1, :], A[0, :]))
   ..:
</snippet></ROW><ROW><id>5042185</id><snippet>In []: A
Out[]:
array([[0, 0, 1, 1],
       [0, 1, 1, 0]])
In []: ccworder(A)
Out[]: array([0, 3, 2, 1])
</snippet></ROW><ROW><id>5042185</id><snippet>numpy</snippet></ROW><ROW><id>5042185</id><snippet>ccworder</snippet></ROW><ROW><id>5042185</id><snippet>ccworder</snippet></ROW><ROW><id>5042293</id><snippet>TIME_WAIT</snippet></ROW><ROW><id>5042293</id><snippet>server.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)
</snippet></ROW><ROW><id>5043183</id><snippet>{% extends my_template %}
</snippet></ROW><ROW><id>5043183</id><snippet>if ajax:
    template_values['my_template'] = 'base_ajax.html'
else:
    template_values['my_template'] = 'base.html'
</snippet></ROW><ROW><id>5043638</id><snippet>imaplib</snippet></ROW><ROW><id>5043638</id><snippet>twisted.mail</snippet></ROW><ROW><id>5043789</id><snippet>child.tag</snippet></ROW><ROW><id>5043789</id><snippet>&gt;&gt;&gt; class foo(object):
    def __init__(self, val):
        self.val = val

    def __str__(self):
        return "str: %s" % self.val
    def __unicode__(self):
        return "unicode: %s" % self.val


&gt;&gt;&gt; f = foo("bar")
&gt;&gt;&gt; u'%s' % f
u'unicode: bar'
&gt;&gt;&gt; unicode(f)
u'unicode: bar'
&gt;&gt;&gt; '%s' % f
'str: bar'
</snippet></ROW><ROW><id>5043884</id><snippet>&gt;&gt;&gt; datetime.datetime.strptime ?
Type:       builtin_function_or_method
Base Class: &lt;type 'builtin_function_or_method'&gt;
String Form:    &lt;built-in method strptime of type object at 0xb70b3520&gt;
Namespace:  Interactive
Docstring:
    string, format -&gt; new datetime parsed from a string (like time.strptime()).
</snippet></ROW><ROW><id>5043884</id><snippet>&gt;&gt;&gt; d = datetime.strptime("01/01/2011 01:48:36.157", "%m/%d/%Y %H:%M:%S.%f")
</snippet></ROW><ROW><id>5043884</id><snippet>import time
time.mktime(d.timetuple())
</snippet></ROW><ROW><id>5043970</id><snippet>enumerate</snippet></ROW><ROW><id>5043970</id><snippet>dict</snippet></ROW><ROW><id>5043970</id><snippet>dict_c = dict(enumerate(characters))
</snippet></ROW><ROW><id>5043970</id><snippet>&gt;&gt;&gt; dict_c[3]
'D'
&gt;&gt;&gt; characters[3]
'D'
</snippet></ROW><ROW><id>5043996</id><snippet>col = line.split(line, ',')
</snippet></ROW><ROW><id>5043996</id><snippet>str.split</snippet></ROW><ROW><id>5043996</id><snippet>str.split([sep[, maxsplit]])
</snippet></ROW><ROW><id>5043996</id><snippet>maxsplit+1</snippet></ROW><ROW><id>5043996</id><snippet>network.append</snippet></ROW><ROW><id>5043996</id><snippet>for line in filename.readlines():
    # line is a string representing the values for this row
    row = line.split(',')
    # row is the list of numbers strings for this row, such as ['1', '0', '4', ...]
    cols = [int(x) for x in row]
    # cols is the list of numbers for this row, such as [1, 0, 4, ...]
    network.append(row)
    # Put this row into network, such that network is [[1, 0, 4, ...], [...], ...]
</snippet></ROW><ROW><id>5044101</id><snippet>subprocess</snippet></ROW><ROW><id>5044101</id><snippet>#!/bin/bash

echo echo to stderr 1&gt;&amp;2
echo echo to stdout
</snippet></ROW><ROW><id>5044101</id><snippet>#!/usr/bin/python

import subprocess

command = ('./joe.sh',)
task = subprocess.Popen(command, stdout=subprocess.PIPE,
                                 stderr=subprocess.PIPE)
stdout, stderr = task.communicate()
print 'stdout == %r\nstderr == %r' % (stdout, stderr)
</snippet></ROW><ROW><id>5044101</id><snippet>$ python joe.py 
stdout == 'echo to stdout\n'
stderr == 'echo to stderr\n'
</snippet></ROW><ROW><id>5044101</id><snippet>ipython</snippet></ROW><ROW><id>5044101</id><snippet>subprocess</snippet></ROW><ROW><id>5044101</id><snippet>subprocess</snippet></ROW><ROW><id>5044101</id><snippet>subprocess</snippet></ROW><ROW><id>5044364</id><snippet>numpy.random.shuffle()</snippet></ROW><ROW><id>5044364</id><snippet>numpy.random.shuffle()</snippet></ROW><ROW><id>5044364</id><snippet>ufunc</snippet></ROW><ROW><id>5044364</id><snippet>a</snippet></ROW><ROW><id>5044364</id><snippet>map(numpy.random.shuffle, a)
</snippet></ROW><ROW><id>5044382</id><snippet>getattr()</snippet></ROW><ROW><id>5044382</id><snippet>def f (*arg, **kargs):
    e = pq('&lt;div id="guido"&gt;&lt;/div&gt;')
    getattr(e, arg[0])('&lt;div id="cool"&gt;&lt;/div&gt;')
    return str(e)
</snippet></ROW><ROW><id>5044384</id><snippet>"x", "y"
</snippet></ROW><ROW><id>5044384</id><snippet>x,xx = "x=y".split("=")
</snippet></ROW><ROW><id>5044384</id><snippet>"foo=bar,blah=boo,etc=something"
</snippet></ROW><ROW><id>5044384</id><snippet>for x,y in [ (pair.split("=")) for pair in "foo=bar,blah=boo,etc=something".split(",") ]:
    print x,y
</snippet></ROW><ROW><id>5044384</id><snippet>params = "foo=bar,blah=boo,etc=something"
pair_list = params.split(",")
for pair in pair_list:
    x,y = pair.split("=")
    ...
</snippet></ROW><ROW><id>5044529</id><snippet>condition = 'Symbol == "abcd"'
indices = table.getWhereList(condition)  # get indices
rows_array = table[indices]  # get values
new_rows = compute(rows_array)   # compute new values
table[indices] = new_rows  # update the indices with new values
</snippet></ROW><ROW><id>5044538</id><snippet>for activesession in SessionModel.all():
    data = Session._Session__decode_data(activesession.pdump)
    logged_in.append(data['user'])
</snippet></ROW><ROW><id>5044663</id><snippet>functools.partial()</snippet></ROW><ROW><id>5044663</id><snippet>from functools import partial

def f(a, b):
    return a + b

x = range(10)
print map(partial(f, b=3), x)
</snippet></ROW><ROW><id>5044663</id><snippet>[3, 4, 5, 6, 7, 8, 9, 10, 11, 12]
</snippet></ROW><ROW><id>5044703</id><snippet>KeyboardInterrupt</snippet></ROW><ROW><id>5044703</id><snippet>SIGINT</snippet></ROW><ROW><id>5044703</id><snippet>fuse_session_exit</snippet></ROW><ROW><id>5044703</id><snippet>KeyboardInterrupt</snippet></ROW><ROW><id>5044703</id><snippet>CFUNCTYPE</snippet></ROW><ROW><id>5044703</id><snippet>SIGQUIT</snippet></ROW><ROW><id>5044703</id><snippet>SIGINT</snippet></ROW><ROW><id>5044703</id><snippet>SIGINT</snippet></ROW><ROW><id>5044703</id><snippet>old_handler =signal(SIGINT, SIG_DFL)
# call main
signal(SIGINT, old_handler)
</snippet></ROW><ROW><id>5044794</id><snippet>commands.getoutput("bash -c 'diff x  &lt;(tail +2 y)'")</snippet></ROW><ROW><id>5044794</id><snippet>cat</snippet></ROW><ROW><id>5044794</id><snippet>commands.getoutput('tail +2 y | diff x -')</snippet></ROW><ROW><id>5044911</id><snippet>uic</snippet></ROW><ROW><id>5044911</id><snippet>pyuic4</snippet></ROW><ROW><id>5044911</id><snippet>build_helper.py</snippet></ROW><ROW><id>5044911</id><snippet>ui</snippet></ROW><ROW><id>5044911</id><snippet>import os.path
from PyQt4 import uic

generated_ui_output = 'myapp/ui/generated'

def process_ui_files():
    ui_files = (glob.glob('ui/*.ui'),
                glob.glob('ui/Dialogs/*.ui'),
                glob.glob('ui/Widgets/*.ui')))
    for f in ui_files:
        out_filename = (
            os.path.join(
                generated_ui_output,
                os.path.splitext(
                    os.path.basename(f))[0].replace(' ', '')+'.py')
        )
        out_file = open(out_filename, 'w')
        uic.compileUi(f, out_file)
        out_file.close()

if __name__ == '__main__':
    process_ui_files()
</snippet></ROW><ROW><id>5044911</id><snippet>pyrcc4</snippet></ROW><ROW><id>5044911</id><snippet>pylupdate4</snippet></ROW><ROW><id>5044911</id><snippet>lrelease</snippet></ROW><ROW><id>5045386</id><snippet>end_date = end_date.split(" ")
end_date[-1] = end_date[-1][:4]
end_date = " ".join(end_date)
</snippet></ROW><ROW><id>5046652</id><snippet>image = Image.open('test.png')
tf = tempfile.TemporaryFile(mode='r+b')
name = tf.name
del tf
image.save(name, 'png')
dji=DjInfo()
dji.picture.save('test.png', name)
</snippet></ROW><ROW><id>5046706</id><snippet># Not broken anymore, prints 3.1415559...

from math import sqrt

def get_y(x, r):
    return sqrt((r**2.0)-(x**2.0)) # First mistake: ** is exponentiation, not ^

def get_distance(x1, y1, x2, y2):
    return sqrt( (x2-x1)**2.0 + (y2-y1)**2.0 )

def c(r):
    # def range(b): # redundant
    #     a = 0
    #     while a &lt; b:
    #         yield a
    #         a = a + 1
    circumference = 0.0
    for x1 in range(r):
        x2 = x1 + 1.0
        y1 = get_y(x1, r)
        y2 = get_y(x2, r)
        distance = get_distance(x1, y1, x2, y2) # second mistake, x2, x2 --&gt; x2, y2
        circumference = circumference + distance
    circumference = circumference * 4
    return circumference

print get_y(0, 4)
radius = 400.0
print "%.64f" % (c(radius) / (radius * 2)) # third mistake: / radius * 2 --&gt; / (radius*2)
</snippet></ROW><ROW><id>5046919</id><snippet>object</snippet></ROW><ROW><id>5046919</id><snippet>object</snippet></ROW><ROW><id>5046919</id><snippet>class foo(object):
    ...
</snippet></ROW><ROW><id>5046919</id><snippet>object</snippet></ROW><ROW><id>5046919</id><snippet>object</snippet></ROW><ROW><id>5046981</id><snippet>scipy.integrate</snippet></ROW><ROW><id>5046981</id><snippet>scipy.integrate.quad()</snippet></ROW><ROW><id>5046981</id><snippet>(Result,MaximumError)</snippet></ROW><ROW><id>5046981</id><snippet>P_inner</snippet></ROW><ROW><id>5046981</id><snippet>P</snippet></ROW><ROW><id>5046981</id><snippet>P = P_inner[0] + P_outer/2</snippet></ROW><ROW><id>5047058</id><snippet>sys.stdin</snippet></ROW><ROW><id>5047058</id><snippet>threading</snippet></ROW><ROW><id>5047058</id><snippet>msvcrt.kbhit</snippet></ROW><ROW><id>5047058</id><snippet>msvcrt</snippet></ROW><ROW><id>5047058</id><snippet>kbhit</snippet></ROW><ROW><id>5047058</id><snippet>try:
    from msvcrt import kbhit
except ImportError:
    import termios, fcntl, sys, os
    def kbhit():
        fd = sys.stdin.fileno()
        oldterm = termios.tcgetattr(fd)
        newattr = termios.tcgetattr(fd)
        newattr[3] = newattr[3] &amp; ~termios.ICANON &amp; ~termios.ECHO
        termios.tcsetattr(fd, termios.TCSANOW, newattr)
        oldflags = fcntl.fcntl(fd, fcntl.F_GETFL)
        fcntl.fcntl(fd, fcntl.F_SETFL, oldflags | os.O_NONBLOCK)
        try:
            while True:
                try:
                    c = sys.stdin.read(1)
                    return True
                except IOError:
                    return False
        finally:
            termios.tcsetattr(fd, termios.TCSAFLUSH, oldterm)
            fcntl.fcntl(fd, fcntl.F_SETFL, oldflags)
</snippet></ROW><ROW><id>5047348</id><snippet>x = numpy.array([1, 2, 3, -1, 5])
mx = numpy.ma.masked_array(x, mask=[0, 0, 0, 1, 0])
print mx.mean()
</snippet></ROW><ROW><id>5047348</id><snippet>2.75
</snippet></ROW><ROW><id>5047559</id><snippet>create_string_buffer()</snippet></ROW><ROW><id>5047559</id><snippet>raw</snippet></ROW><ROW><id>5047559</id><snippet>a = ctypes.create_string_buffer(10)
a.raw 
# '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
</snippet></ROW><ROW><id>5047559</id><snippet>n</snippet></ROW><ROW><id>5047559</id><snippet>a.raw[:n]
</snippet></ROW><ROW><id>5047929</id><snippet>&gt;&gt;&gt; import pkg_resources
&gt;&gt;&gt; env = pkg_resources.Environment()
&gt;&gt;&gt; env['sqlalchemy-migrate'][0].version
'0.6.2.dev'
</snippet></ROW><ROW><id>5048068</id><snippet>network = []  

def populateArray(network):
    file = open('theroute.txt', 'r')

    for line in file:
        network.append(line)    
    file.close()


if __name__ == "__main__":
        print "Start"
        populateArray(network)
        print "Network = "
        print network
</snippet></ROW><ROW><id>5048155</id><snippet>foo.setdefault('bar', 123)
</snippet></ROW><ROW><id>5048200</id><snippet>System.setOut</snippet></ROW><ROW><id>5048200</id><snippet>&gt;&gt;&gt; from java.lang import System 
&gt;&gt;&gt; from java.io import PrintStream, OutputStream
&gt;&gt;&gt; oldOut = System.out
&gt;&gt;&gt; class NoOutputStream(OutputStream):         
...     def write(self, b, off, len): pass      
... 
&gt;&gt;&gt; System.setOut(PrintStream(NoOutputStream()))
&gt;&gt;&gt; System.out.println('foo')                   
&gt;&gt;&gt; System.setOut(oldOut)
&gt;&gt;&gt; System.out.println('foo')                   
foo
</snippet></ROW><ROW><id>5048200</id><snippet>System.out</snippet></ROW><ROW><id>5048200</id><snippet>sys.stdout</snippet></ROW><ROW><id>5048216</id><snippet>def keyPressEvent(self, event):
    if (event.modifiers() &amp; QtCore.Qt.ShiftModifier):
        self.shift = True
        print 'Shift!'
    # call base class keyPressEvent
    QtGui.QLineEdit.keyPressEvent(self, event)
</snippet></ROW><ROW><id>5048227</id><snippet>import re

test = "this matches"
match = re.match('(\w+\s\w+)', test)
print match.groups()
</snippet></ROW><ROW><id>5048227</id><snippet>('this matches',)
</snippet></ROW><ROW><id>5048331</id><snippet>def midpoint(p1, p2):
    return Point((p1.x+p2.x)/2, (p1.y+p2.y)/2)
</snippet></ROW><ROW><id>5048331</id><snippet>def midpoint(p1, p2):
    return Point((p1[0]+p2[0])/2, (p1[1]+p2[1])/2)
</snippet></ROW><ROW><id>5048331</id><snippet>def midpoint(p1, p2):
    return (p1+p2)/2     # or *0.5
</snippet></ROW><ROW><id>5048331</id><snippet>def midpoint(p1, p2):
    return p1 + (p2-p1)/2     # or *0.5
</snippet></ROW><ROW><id>5048335</id><snippet>import web
import re

urls = ('/', 'index')
render = web.template.render('templates/', globals={'re':re})
app = web.application(urls, globals())

class index:
    def GET(self):
        args = web.input(s='')
        return render.index(args.s)

if __name__ == '__main__':
    app.run()
</snippet></ROW><ROW><id>5048335</id><snippet>$def with(s)

$code:
    if re.match('\d+', s):
        num = 'yes'
    else:
        num = 'no'

&lt;h1&gt;Is arg "$:s" a number? $num!&lt;/h1&gt;
</snippet></ROW><ROW><id>5048405</id><snippet>print "     A   B   C   D   E"
for row_label, row in zip(row_labels, x):
    print '%s [%s]' % (row_label, ' '.join('%03s' % i for i in row))
</snippet></ROW><ROW><id>5048405</id><snippet>     A   B   C   D   E
Z [ 85  86  87  88  89]
Y [ 90 191 192  93  94]
X [ 95  96  97  98  99]
W [100 101 102 103 104]
</snippet></ROW><ROW><id>5048405</id><snippet>'%03s'</snippet></ROW><ROW><id>5048405</id><snippet>'%04s'</snippet></ROW><ROW><id>5048783</id><snippet>def tally_status_count(status):
</snippet></ROW><ROW><id>5048783</id><snippet>for status in range (status):
</snippet></ROW><ROW><id>5048783</id><snippet>status = odd_even(number)
</snippet></ROW><ROW><id>5048783</id><snippet>import random

even_total = 0
odd_total = 0

def main():

    print 'Number\tStatus'
    print'______________'
    statuses = [] #the status for each random number is added to this list

    for count in range (10):
        number = random.randint(1, 10)
        current_status = odd_even(number)

        print number, '\t', current_status

        statuses += [current_status] #add to the list

    tally_status_count(statuses) #go through the list and total everything up

#Function to determine odd or even status
def odd_even(number):
    if (number % 2) == 0:
        status = 'Even'
    else:
        status = 'Odd'
    return status

#Function to tally odd and even counts
def tally_status_count(statuses):

    even_total = 0
    odd_total = 0

    for status in statuses:
        if status == 'Even':
            even_total = even_total + 1
        else:          
            odd_total = odd_total + 1


    print
    print 'The total count of even numbers is: ', even_total
    print 'The total count of odd numbers is:  ', odd_total

main()
</snippet></ROW><ROW><id>5048830</id><snippet>name = lambda arguments: expression

def name(arguments):
    return expression
</snippet></ROW><ROW><id>5048830</id><snippet>problem.addConstraint(FunctionConstraint(lambda *values: ...), driver_variables)
</snippet></ROW><ROW><id>5048830</id><snippet>lambda *values: get_route_distance([variable for variable, value in zip(driver_variables, values) if value == 1]) &lt;= maximum_distance
</snippet></ROW><ROW><id>5048830</id><snippet>[[(0, 0), (1, 0), (2, 0)], [(0, 1), (1, 1), (2, 1)]]
</snippet></ROW><ROW><id>5048830</id><snippet>passengers_variables = [[(passenger, driver) for driver in drivers] for passenger in passengers]
drivers_variables = [[(passenger, driver) for passenger in passengers] for driver in drivers]
</snippet></ROW><ROW><id>5048897</id><snippet>A</snippet></ROW><ROW><id>5048897</id><snippet>A.sort(cmp = lambda x,y: cmp(x["name"],y["name"]))</snippet></ROW><ROW><id>5049200</id><snippet>p1=Popen(..., stdin=PIPE, ...) # creates a pipe the parent process can write to
p2=Popen(...) # inherits the writer FD - as long as p2 exists, p1 won't see EOF
</snippet></ROW><ROW><id>5049200</id><snippet>close_fds</snippet></ROW><ROW><id>5049200</id><snippet>Popen</snippet></ROW><ROW><id>5049200</id><snippet>close_fds=True</snippet></ROW><ROW><id>5049534</id><snippet>ast</snippet></ROW><ROW><id>5049534</id><snippet>ast</snippet></ROW><ROW><id>5049534</id><snippet>ast.parse()</snippet></ROW><ROW><id>5049534</id><snippet>&gt;&gt;&gt; import ast
&gt;&gt;&gt; ast.parse("(1+2)*3", "", "eval")
&lt;_ast.Expression object at 0x88950&gt;
&gt;&gt;&gt; ast.dump(_)
'Expression(body=BinOp(left=BinOp(left=Num(n=1), op=Add(), right=Num(n=2)), op=Mult(), right=Num(n=3)))'
</snippet></ROW><ROW><id>5049785</id><snippet>django</snippet></ROW><ROW><id>5049785</id><snippet>FOOBAR = (
    ('0', 'foo'),
    ('1', 'bar'),
    )
</snippet></ROW><ROW><id>5050290</id><snippet>&gt;&gt;&gt; print '\u041a\u041e\u041b'.decode('unicode-escape')
КОЛ
</snippet></ROW><ROW><id>5050508</id><snippet>hashlib</snippet></ROW><ROW><id>5050521</id><snippet>import subprocess
import signal

def preexec_function():
    # Ignore the SIGINT signal by setting the handler to the standard
    # signal handler SIG_IGN.
    signal.signal(signal.SIGINT, signal.SIG_IGN)

my_process = subprocess.Popen(
    ["my_executable"],
    preexec_fn = preexec_function
)
</snippet></ROW><ROW><id>5050522</id><snippet>ping</snippet></ROW><ROW><id>5050522</id><snippet>root</snippet></ROW><ROW><id>5050779</id><snippet>type()</snippet></ROW><ROW><id>5050779</id><snippet>type</snippet></ROW><ROW><id>5050779</id><snippet>type(3)     --&gt; int
type(int)   --&gt; type
type(type)  --&gt; type
</snippet></ROW><ROW><id>5050779</id><snippet>class A(type):
    pass
class B(type, metaclass=A):
    pass
class C(metaclass=B):
    pass
c = C()

type(c)     --&gt; C
type(C)     --&gt; B
type(B)     --&gt; A
type(A)     --&gt; type
type(type)  --&gt; type
</snippet></ROW><ROW><id>5050779</id><snippet>type</snippet></ROW><ROW><id>5050779</id><snippet>type</snippet></ROW><ROW><id>5050850</id><snippet>delivery_mode</snippet></ROW><ROW><id>5050850</id><snippet>&gt;&gt;&gt; from tasks import add
&gt;&gt;&gt; add.delay(2, 2)

&gt;&gt;&gt; from celery import current_app
&gt;&gt;&gt; conn = current_app.broker_connection()
&gt;&gt;&gt; consumer = current_app.amqp.get_task_consumer(conn)

&gt;&gt;&gt; messages = []
&gt;&gt;&gt; def callback(body, message):
...     messages.append(message)
&gt;&gt;&gt; consumer.register_callback(callback)
&gt;&gt;&gt; consumer.consume()

&gt;&gt;&gt; conn.drain_events(timeout=1)

&gt;&gt;&gt; messages[0].properties
&gt;&gt;&gt; messages[0].properties
{'application_headers': {}, 'delivery_mode': 2, 'content_encoding': u'binary',    'content_type': u'application/x-python-serialize'}
</snippet></ROW><ROW><id>5050939</id><snippet>args</snippet></ROW><ROW><id>5050939</id><snippet>args</snippet></ROW><ROW><id>5050939</id><snippet>if</snippet></ROW><ROW><id>5050939</id><snippet>def main(args):
    printip3octets(args)
    printip(args)
</snippet></ROW><ROW><id>5051146</id><snippet>import urllib2

response = urllib2.urlopen('http://example.com/some/path/?myvar=myvalue')
</snippet></ROW><ROW><id>5051146</id><snippet>import urlib2

response = urllib2.urlopen('http://example.com/some/path/', {'myvar': 'myvalue'})
</snippet></ROW><ROW><id>5051146</id><snippet>response.read()</snippet></ROW><ROW><id>5051146</id><snippet>response.info()</snippet></ROW><ROW><id>5051244</id><snippet>@cache_page</snippet></ROW><ROW><id>5051244</id><snippet># imagine you have a function that takes a day to complete.
cache.set('very_expensive_homepage_logic', takes_a_day_to_calculate())

# now if you call get() with your key, it will be returned and you won't have to wait a day to calculate.
cache.get('very_expensive_homepage_logic')
</snippet></ROW><ROW><id>5051298</id><snippet> users.create_logout_url('/home/example/example1')
</snippet></ROW><ROW><id>5051298</id><snippet>currentUser = users.get_current_user()
logoutUrl = users.create_logout_url("/home/example/%s" % currentUser.nickname())
</snippet></ROW><ROW><id>5051446</id><snippet>import atexit
import sys
import logging

log = logging.getLogger('test')
log.setLevel(logging.DEBUG)

console_handler = logging.StreamHandler()
console_handler.setFormatter(logging.Formatter("%(message)s"))
log.addHandler(console_handler)

def shutdown_logging():
    logging.shutdown()    

atexit.register(shutdown_logging)

def main(argv=None):
    log.info('Starting something...')
    log.info('Doing something...')
    log.info('Finished something.')


if __name__=='__main__':
    sys.exit(main(sys.argv[1:]))
</snippet></ROW><ROW><id>5051789</id><snippet>portscan</snippet></ROW><ROW><id>5051789</id><snippet>args.ip</snippet></ROW><ROW><id>5051789</id><snippet>args</snippet></ROW><ROW><id>5051789</id><snippet>if args.ip != None:
    portscan(args)
</snippet></ROW><ROW><id>5051789</id><snippet>ip</snippet></ROW><ROW><id>5051789</id><snippet>pingsweep</snippet></ROW><ROW><id>5051850</id><snippet>OrderedDict(itertools.islice(d.iteritems(), 500))
</snippet></ROW><ROW><id>5051850</id><snippet>d</snippet></ROW><ROW><id>5051850</id><snippet># can't use .iteritems() as you can't/shouldn't modify something while iterating it
to_remove = d.keys()[500:] # slice off first 500 keys
for key in to_remove:
    del d[key]
</snippet></ROW><ROW><id>5051857</id><snippet>getTickCount</snippet></ROW><ROW><id>5051857</id><snippet>getTickFrequency</snippet></ROW><ROW><id>5052022</id><snippet>prefix</snippet></ROW><ROW><id>5052022</id><snippet>i</snippet></ROW><ROW><id>5052022</id><snippet>prefixes = "JK..."</snippet></ROW><ROW><id>5052022</id><snippet>for prefix in prefixes:</snippet></ROW><ROW><id>5052022</id><snippet>"O"</snippet></ROW><ROW><id>5052022</id><snippet>prefix=="Q"</snippet></ROW><ROW><id>5052022</id><snippet>"O"</snippet></ROW><ROW><id>5052022</id><snippet>prefix == "Q" or prefix == "O"</snippet></ROW><ROW><id>5052022</id><snippet>prefix in ("Q", "O")</snippet></ROW><ROW><id>5052156</id><snippet>def mplot(x,y,fmt,*args,**kwargs):
   #do stuff with x, y and fmt
   return plt.plot(*args,**kwargs)
</snippet></ROW><ROW><id>5052156</id><snippet>x</snippet></ROW><ROW><id>5052156</id><snippet>y</snippet></ROW><ROW><id>5052156</id><snippet>fmt</snippet></ROW><ROW><id>5052156</id><snippet>mplot</snippet></ROW><ROW><id>5052156</id><snippet>plt.plot</snippet></ROW><ROW><id>5052156</id><snippet>plt.plot</snippet></ROW><ROW><id>5052156</id><snippet>x</snippet></ROW><ROW><id>5052156</id><snippet>y</snippet></ROW><ROW><id>5052156</id><snippet>fmt</snippet></ROW><ROW><id>5052877</id><snippet>{packet, N}</snippet></ROW><ROW><id>5052877</id><snippet>packet</snippet></ROW><ROW><id>5052877</id><snippet>packet=1</snippet></ROW><ROW><id>5053095</id><snippet>from google.appengine.ext import webapp
from google.appengine.ext.webapp import util


class ExampleHandler(webapp.RequestHandler):
    def get(self, name="default"):
        self.response.out.write('Hello %s!' % name)


def main():
    application = webapp.WSGIApplication([('/example/(\w+)', MainHandler)],
                                         debug=True)
    util.run_wsgi_app(application)
</snippet></ROW><ROW><id>5053095</id><snippet>(\w+)</snippet></ROW><ROW><id>5053095</id><snippet>get()</snippet></ROW><ROW><id>5053095</id><snippet>ExampleHandler</snippet></ROW><ROW><id>5053242</id><snippet>zc</snippet></ROW><ROW><id>5053242</id><snippet>z3c</snippet></ROW><ROW><id>5053242</id><snippet>collective</snippet></ROW><ROW><id>5053242</id><snippet>zope</snippet></ROW><ROW><id>5053242</id><snippet>Products</snippet></ROW><ROW><id>5053590</id><snippet>string.py</snippet></ROW><ROW><id>5053590</id><snippet>urllib</snippet></ROW><ROW><id>5053590</id><snippet>string</snippet></ROW><ROW><id>5053590</id><snippet>urllib</snippet></ROW><ROW><id>5053631</id><snippet>~/.bashrc</snippet></ROW><ROW><id>5053631</id><snippet>import fileinput
import os

# assume script name is unique in the .bashrc context
uniqkey = os.path.basename(__file__)
startupfile = os.path.expanduser('~/.bashrc')
startupline = 'python %s &amp;\n' % os.path.abspath(__file__)

written = False
for line in fileinput.input(startupfile, inplace=1):
    if uniqkey in line:
        if not written: 
            written = True
            print startupline, # rewrite
        #else do nothing (it removes duplicate lines)
    else:
        print line,

if not written: # add startup line if it is not present
   open(startupfile,'a').write('\n'+startupline) # ignore possible race condition
</snippet></ROW><ROW><id>5053866</id><snippet>input()</snippet></ROW><ROW><id>5053866</id><snippet>lines = []
while True:
    line = input('line: ')
    if line:
        lines.append(line)
    else:
        break
print(lines)
</snippet></ROW><ROW><id>5053906</id><snippet>%%</snippet></ROW><ROW><id>5053906</id><snippet>%</snippet></ROW><ROW><id>5053906</id><snippet>query = 'DELETE FROM boyd.%s WHERE teamid = %%s AND id = %%s AND year = %%s' % (statstype)
self.executequery(query, values[0:3])
</snippet></ROW><ROW><id>5054168</id><snippet>(r'^app/$', 'app.views.index'),
</snippet></ROW><ROW><id>5054168</id><snippet>include</snippet></ROW><ROW><id>5054168</id><snippet>index</snippet></ROW><ROW><id>5054168</id><snippet>include()</snippet></ROW><ROW><id>5054203</id><snippet>from models import *</snippet></ROW><ROW><id>5054203</id><snippet>__all__</snippet></ROW><ROW><id>5054203</id><snippet>models/__init__.py</snippet></ROW><ROW><id>5054203</id><snippet>__import__()</snippet></ROW><ROW><id>5054355</id><snippet>encode</snippet></ROW><ROW><id>5054355</id><snippet>tmp[0]</snippet></ROW><ROW><id>5054355</id><snippet>tmp</snippet></ROW><ROW><id>5054355</id><snippet>tmp</snippet></ROW><ROW><id>5054355</id><snippet>type(tmp)</snippet></ROW><ROW><id>5054355</id><snippet>print dir(tmp)</snippet></ROW><ROW><id>5054692</id><snippet>import matplotlib.pyplot as plt

fig = plt.figure()
ax1 = fig.add_subplot(4,2,1)
ax2 = fig.add_subplot(4,2,4)
ax3 = fig.add_subplot(4,2,5)
ax4 = fig.add_subplot(4,2,8)

fig.subplots_adjust(hspace=1)

plt.show()
</snippet></ROW><ROW><id>5054830</id><snippet>return 1 - (-value%1) if value &gt; 0 else value%1
</snippet></ROW><ROW><id>5054861</id><snippet>a, b = zip(*[func(i,j) for i, j in zip(x,y)])
</snippet></ROW><ROW><id>5054954</id><snippet>self.Bind(wx.EVT_MOVE, self.OnMove)
</snippet></ROW><ROW><id>5054954</id><snippet>def OnMove(self, event):
    print event.GetPosition()
</snippet></ROW><ROW><id>5054967</id><snippet>name_hash</snippet></ROW><ROW><id>5054967</id><snippet>red = name_hash &amp; 0xFF
</snippet></ROW><ROW><id>5054967</id><snippet>name_hash</snippet></ROW><ROW><id>5054967</id><snippet>&amp;</snippet></ROW><ROW><id>5054967</id><snippet>0xFF</snippet></ROW><ROW><id>5054967</id><snippet>green</snippet></ROW><ROW><id>5054967</id><snippet>blue</snippet></ROW><ROW><id>5054967</id><snippet>green = (name_hash &gt;&gt; 8) &amp; 0xFF
blue = (name_hash &gt;&gt; 16) &amp; 0xFF
</snippet></ROW><ROW><id>5054967</id><snippet>name_hash</snippet></ROW><ROW><id>5054967</id><snippet>make_light_color</snippet></ROW><ROW><id>5055366</id><snippet>corpus</snippet></ROW><ROW><id>5055366</id><snippet>words_to_find = ['tree', 'cow', 'lots_of_other_words']
words_to_search = ['bathtub', 'more_words']
def find_words(words_to_search, words_to_find):
    for i, fword in enumerate(words_to_find):
        for j, sword in enumerate(words_to_search):
            if fword == sword: 
                return (fword, i, j)
</snippet></ROW><ROW><id>5055366</id><snippet>for</snippet></ROW><ROW><id>5055366</id><snippet>while</snippet></ROW><ROW><id>5055366</id><snippet>word_list = ['blah', 'blah2', 'etc']
word_list2 = ['other', 'words']
i = 0
j = 0
while True:
    if i == len(word_list):
        i = 0
        j += 1
    elif thing_I_want(word_list[i], word_list2[j]):
        do_something()
        break
    else:
        i += 1
</snippet></ROW><ROW><id>5055374</id><snippet>pycurl</snippet></ROW><ROW><id>5055374</id><snippet>import pycurl

fields = [('field1', 'this is a test using httppost &amp; stuff'),
    ('field2', (pycurl.FORM_FILE, 'file1.txt', pycurl.FORM_FILE, 'file2.txt')),
    ('field3', (pycurl.FORM_CONTENTS, 'this is wei\000rd, but null-bytes are okay'))
]

c = pycurl.Curl()
c.setopt(c.URL, 'http://www.example.com')
c.setopt(c.HTTPPOST, fields)
c.perform()
c.close()
</snippet></ROW><ROW><id>5055609</id><snippet>threads1.py</snippet></ROW><ROW><id>5055609</id><snippet>import queue

finished_queue = queue.Queue()
</snippet></ROW><ROW><id>5055609</id><snippet>num_finished = 0
while True:
    info = finished_queue.get()
    num_finished += 1
    if info is t1:
        print("t1 finished")
    else:
        print("t2 finished")
    if num_finished == 2:
        global results
        results = [t1.AskFinished, t2.AskFinished]
        print("Both Finished")
        break
</snippet></ROW><ROW><id>5055609</id><snippet>def run(self):
    time.sleep(self.SleepWait)
    self.AskFinished = 'Finished'
    finished_queue.put(self)
</snippet></ROW><ROW><id>5055609</id><snippet>self</snippet></ROW><ROW><id>5055609</id><snippet>self.results = [t1.AskFinished, t2.AskFinished]</snippet></ROW><ROW><id>5055680</id><snippet>runfastcgi(method="threaded", daemonize="false")
</snippet></ROW><ROW><id>5055680</id><snippet>runfastcgi(method="prefork", daemonize="true", host="127.0.0.1", port="3033")
</snippet></ROW><ROW><id>5055680</id><snippet>supervisord</snippet></ROW><ROW><id>5055680</id><snippet>./manage.py runfcgi method=prefork host=127.0.0.1 port=3033 pidfile=/path/to/foo.pid
</snippet></ROW><ROW><id>5055680</id><snippet>"/mysite.fcgi" =&gt; (
    "main" =&gt; (
         "host" =&gt; "127.0.0.1",
         "port" =&gt; 3033,
          "check-local" =&gt; "disable",
    )
),
</snippet></ROW><ROW><id>5055776</id><snippet>httplib2</snippet></ROW><ROW><id>5055818</id><snippet>results.sort(key=lambda r: r.person.birthdate)
</snippet></ROW><ROW><id>5055852</id><snippet>self.word_counts[source].update({'date':posttime},{"$inc" : words},True)
</snippet></ROW><ROW><id>5055952</id><snippet>import datetime
results.sort(key=lambda r: r.person.birthdate
    if (r and r.person and r.person.birthdate)
    else datetime.datetime.now())
</snippet></ROW><ROW><id>5056083</id><snippet>list(set(d))
</snippet></ROW><ROW><id>5056083</id><snippet>[x for (i, x) in sorted((i, x) for (x, i) in dict((x, i) for (i, x) in reversed(list(enumerate(d)))).iteritems())]
</snippet></ROW><ROW><id>5056083</id><snippet>a = []
for x in d:
    if x not in a:
        a.append(x)
</snippet></ROW><ROW><id>5056136</id><snippet>fmt = 'sequence_header_code,
       uint:12=horizontal_size_value,
       uint:12=vertical_size_value,
       uint:4=aspect_ratio_information,
       ...
       '
d = {'sequence_header_code': '0x000001b3',
     'horizontal_size_value': 352,
     'vertical_size_value': 288,
     'aspect_ratio_information': 1,
     ...
    }

s = bitstring.pack(fmt, **d)
</snippet></ROW><ROW><id>5056136</id><snippet>&gt;&gt;&gt; s.unpack('bytes:4, 2*uint:12, uint:4')
['\x00\x00\x01\xb3', 352, 288, 1]
</snippet></ROW><ROW><id>5056218</id><snippet>db.collection.update({'_id' : ObjectId(...)}, 
                     {'$set' : {'create_time' : datetime(..) }})
</snippet></ROW><ROW><id>5056462</id><snippet>#include &lt;boost/python.hpp&gt;
#include &lt;string&gt;
#include &lt;iostream&gt;

using namespace boost::python;
using namespace std;

class World
{
private:
    string name;
public:
    void set(string name) {
        this-&gt;name = name;
    }
    void greet() {
        cout &lt;&lt; "hello, I am " &lt;&lt; name &lt;&lt; endl;
    }
};

typedef boost::shared_ptr&lt; World &gt; world_ptr;

BOOST_PYTHON_MODULE(hello)
{
    class_&lt;World&gt;("World")
        .def("greet", &amp;World::greet)
        .def("set", &amp;World::set)
    ;
};

int main(int argc, char **argv)
{
    Py_Initialize();
    try {
        PyRun_SimpleString(
            "class Person:\n"
            "    def sayHi(self):\n"
            "        print 'hello from python'\n"
            "    def greetReset(self, instance):\n"
            "        instance.set('Python')\n"
          );

        world_ptr worldObjectPtr (new World);
        worldObjectPtr-&gt;set("C++!");

        inithello();
        object o_main 
            = object(handle&lt;&gt;(borrowed(PyImport_AddModule("__main__"))));
        object o_person_type = o_main.attr("Person");
        object o_person = o_person_type();
        object o_func1 = o_person.attr("sayHi");
        o_func1();
        object o_func2 = o_person.attr("greetReset");
        o_func2(boost::python::ptr(worldObjectPtr.get()));
        worldObjectPtr-&gt;greet();
    }
    catch (error_already_set) {
        PyErr_Print();
    }

    Py_Finalize();

    return 0;
}
</snippet></ROW><ROW><id>5056466</id><snippet>_[1].__self__</snippet></ROW><ROW><id>5056466</id><snippet>this_list</snippet></ROW><ROW><id>5056466</id><snippet>s</snippet></ROW><ROW><id>5056466</id><snippet>set</snippet></ROW><ROW><id>5056466</id><snippet>seen</snippet></ROW><ROW><id>5056466</id><snippet>list</snippet></ROW><ROW><id>5056466</id><snippet>raw_data = [c for c in 'abcdaebfc']

seen = set()
def some_function(s):
    seen.add(s)
    return s

print [ some_function(s) for s in raw_data if s not in seen ]
# ['a', 'b', 'c', 'd', 'e', 'f']
</snippet></ROW><ROW><id>5056466</id><snippet>some_function</snippet></ROW><ROW><id>5056466</id><snippet>seen</snippet></ROW><ROW><id>5056466</id><snippet>def some_function(s):
    # do something with or to 's'...
    return s

def add_unique(function, data):
    result = []
    seen = set(result) # init to empty set
    for s in data:
        if s not in seen:
            t = function(s)
            result.append(t)
            seen.add(t)
    return result

print add_unique(some_function, raw_data)
# ['a', 'b', 'c', 'd', 'e', 'f']
</snippet></ROW><ROW><id>5056466</id><snippet>raw_data</snippet></ROW><ROW><id>5056466</id><snippet>some_function</snippet></ROW><ROW><id>5056466</id><snippet>some_function</snippet></ROW><ROW><id>5056466</id><snippet>raw_data</snippet></ROW><ROW><id>5056570</id><snippet>pip</snippet></ROW><ROW><id>5056570</id><snippet>pip uninstall package-name
</snippet></ROW><ROW><id>5057362</id><snippet>dp[i, j, k] = 1 + dp[i - 1, j - 1, k - 1] if A[i] = B[j] = C[k]
              max(dp[i - 1, j, k], dp[i, j - 1, k], dp[i, j, k - 1]) otherwise
</snippet></ROW><ROW><id>5057644</id><snippet>curry</snippet></ROW><ROW><id>5057644</id><snippet>partial</snippet></ROW><ROW><id>5057736</id><snippet>EVT_CLOSE</snippet></ROW><ROW><id>5057736</id><snippet>onClose</snippet></ROW><ROW><id>5057736</id><snippet>class ChildFrame(wx.Frame):
    def __init__(self):
        wx.Frame.__init__(self, None)
        self.Bind(wx.EVT_CLOSE, self.on_close)


    def on_close(self, evt):       
        process_whatever_you_want()
        self.Destroy()
</snippet></ROW><ROW><id>5058049</id><snippet># myapp/myapp.py
from __future__ import with_statement
from sqlite3 import dbapi2 as sqlite3
from contextlib import closing
from flask import Flask, request, session, g, redirect, url_for, abort, \
     render_template, flash

# configuration
DATABASE = '/tmp/flaskr.db'
DEBUG = True
SECRET_KEY = 'development key'
USERNAME = 'admin'
PASSWORD = 'default'

# create our little application :)
app = Flask(__name__)
app.config.from_object(__name__)
app.config.from_envvar('MYAPP_SETTINGS', silent=True)

def connect_db():
    """Returns a new connection to the database."""
    return sqlite3.connect(app.config['DATABASE'])


def init_db():
    """Creates the database tables."""
    with closing(connect_db()) as db:
        with app.open_resource('schema.sql') as f:
            db.cursor().executescript(f.read())
        db.commit()


@app.before_request
def before_request():
    """Make sure we are connected to the database each request."""
    g.db = connect_db()


@app.after_request
def after_request(response):
    """Closes the database again at the end of the request."""
    g.db.close()
    return response

@app.route('/')
def show_entries():
    cur = g.db.execute('select title, text from entries order by id desc')
    entries = [dict(title=row[0], text=row[1]) for row in cur.fetchall()]
    return render_template('show_entries.html', entries=entries)

if __name__=="__main__":
    app.run()
</snippet></ROW><ROW><id>5058049</id><snippet>import os
import myapp
import unittest
import tempfile

class MyappTestCase(unittest.TestCase):

    def setUp(self):
        self.db_fd, myapp.app.config['DATABASE'] = tempfile.mkstemp()
        self.app = myapp.app.test_client()
        myapp.init_db()

    def tearDown(self):
        os.close(self.db_fd)
        os.unlink(myapp.app.config['DATABASE'])

    def test_empty_db(self):
        rv = self.app.get('/')
        assert 'No entries here so far' in rv.data
</snippet></ROW><ROW><id>5058066</id><snippet>isinstance(val, collections.Mapping)
</snippet></ROW><ROW><id>5058066</id><snippet>isinstance(val, dict)
</snippet></ROW><ROW><id>5058111</id><snippet>import collections
d = collections.defaultdict(int)
for n1, n2, v in arcdata:
    d[min(n1, n2), max(n1, n2)] += v
result = [[k[0], k[1], v] for k, v in d.iteritems()]
</snippet></ROW><ROW><id>5058211</id><snippet>Contents/Frameworks/Python.framework/Versions/2.6/Resources/Python.app/Contents/Info.plist</snippet></ROW><ROW><id>5058327</id><snippet>__dict__</snippet></ROW><ROW><id>5058327</id><snippet>__dict__</snippet></ROW><ROW><id>5058327</id><snippet>__dict__</snippet></ROW><ROW><id>5058327</id><snippet>PyObject_GenericGetAttr</snippet></ROW><ROW><id>5058327</id><snippet>PyObject_GenericSetAttr</snippet></ROW><ROW><id>5058327</id><snippet>__slots__</snippet></ROW><ROW><id>5058327</id><snippet>__dict__</snippet></ROW><ROW><id>5058383</id><snippet>&lt;link rel="stylesheet" href="styles.css"&gt;
</snippet></ROW><ROW><id>5058383</id><snippet>/something/1</snippet></ROW><ROW><id>5058383</id><snippet>/something/1/styles.css
</snippet></ROW><ROW><id>5058383</id><snippet>&lt;link rel="stylesheet" href="/stylesheets/styles.css"&gt;
</snippet></ROW><ROW><id>5058524</id><snippet>class Question(db.Model):
    text = db.StringProperty()

class Answer(db.Model):
    text = db.StringProperty()
    question = db.ReferenceProperty(Question,
                               required=True,
                               collection_name='answers')
</snippet></ROW><ROW><id>5058524</id><snippet>{% for answer in question.answers %}
    {{answer.text}}
{% endfor %}
</snippet></ROW><ROW><id>5058789</id><snippet>center</snippet></ROW><ROW><id>5058789</id><snippet>t</snippet></ROW><ROW><id>5058789</id><snippet>def circular_orbit(center, radius, speed, t):
    theta = math.fmod(t * speed, math.PI * 2)
    c = math.cos(theta)
    s = math.sin(theta)
    return center[0] + radius * c, center[1] + radius * s
</snippet></ROW><ROW><id>5058835</id><snippet>live</snippet></ROW><ROW><id>5058835</id><snippet>delegate</snippet></ROW><ROW><id>5058835</id><snippet>$(".doneForm").submit(function() ...</snippet></ROW><ROW><id>5058835</id><snippet>$(".doneForm").live("submit", function() {...
</snippet></ROW><ROW><id>5058903</id><snippet>get()</snippet></ROW><ROW><id>5058903</id><snippet>None</snippet></ROW><ROW><id>5058903</id><snippet>fetch()</snippet></ROW><ROW><id>5058903</id><snippet>offset</snippet></ROW><ROW><id>5058903</id><snippet>fetch()</snippet></ROW><ROW><id>5058903</id><snippet>for tag in query.filter("owner", user)</snippet></ROW><ROW><id>5058950</id><snippet>num_fields = len(cursor.description)
field_names = [i[0] for i in cursor.description]
</snippet></ROW><ROW><id>5059493</id><snippet>lists = {}
for n in nodes:
    b = lists.setdefault(n.id, [])
    lists.setdefault(n.parentid, []).extend([n.name, b])
print lists[0]
</snippet></ROW><ROW><id>5059493</id><snippet>collections.defaultdict</snippet></ROW><ROW><id>5059493</id><snippet>lists = collections.defaultdict(list)
for n in nodes:
    lists[n.parentid] += [n.name, lists[n.id]]
print lists[0]
</snippet></ROW><ROW><id>5059493</id><snippet>['a', ['c', ['e', []], 'd', []], 'b', ['f', []]]
</snippet></ROW><ROW><id>5059493</id><snippet>for n in nodes:
    if not lists[n.id]:
        lists[n.parentid].remove(lists[n.id])
</snippet></ROW><ROW><id>5059864</id><snippet>def viewData(request):
    return Response(["aaaaaaaaaa" * 120000])
</snippet></ROW><ROW><id>5060108</id><snippet>dist</snippet></ROW><ROW><id>5060108</id><snippet>destination</snippet></ROW><ROW><id>5060108</id><snippet>bearing2</snippet></ROW><ROW><id>5060108</id><snippet>from math import degrees, atan2

def gb(x, y, center_x, center_y):
    angle = degrees(atan2(y - center_y, x - center_x))
    bearing1 = (angle + 360) % 360
    bearing2 = (90 - angle) % 360
    print "gb: x=%2d y=%2d angle=%6.1f bearing1=%5.1f bearing2=%5.1f" % (
        x, y, angle, bearing1, bearing2)

for pt in ((0, 1),(1,1),(1,0),(1,-1),(0,-1),(-1,-1),(-1, 0),(-1,1)):
    gb(pt[0], pt[1], 0, 0)
</snippet></ROW><ROW><id>5060108</id><snippet>gb: x= 0 y= 1 angle=  90.0 bearing1= 90.0 bearing2=  0.0
gb: x= 1 y= 1 angle=  45.0 bearing1= 45.0 bearing2= 45.0
gb: x= 1 y= 0 angle=   0.0 bearing1=  0.0 bearing2= 90.0
gb: x= 1 y=-1 angle= -45.0 bearing1=315.0 bearing2=135.0
gb: x= 0 y=-1 angle= -90.0 bearing1=270.0 bearing2=180.0
gb: x=-1 y=-1 angle=-135.0 bearing1=225.0 bearing2=225.0
gb: x=-1 y= 0 angle= 180.0 bearing1=180.0 bearing2=270.0
gb: x=-1 y= 1 angle= 135.0 bearing1=135.0 bearing2=315.0
</snippet></ROW><ROW><id>5060174</id><snippet>haystack/backends/simple.py</snippet></ROW><ROW><id>5060209</id><snippet>from pyparsing import *

QUOTED = quotedString.setParseAction(removeQuotes)  
OAND = CaselessLiteral("and") 
OOR = CaselessLiteral("or") 
ONOT = "-"  
WWORD = ~OAND + ~OOR + ~ONOT + Word(printables.replace("(", "").replace(")", ""))
TERM = (QUOTED | WWORD)  
EXPRESSION = operatorPrecedence(TERM,
    [
    (ONOT, 1, opAssoc.RIGHT),
    (Optional(OAND,default="and"), 2, opAssoc.LEFT),
    (OOR, 2, opAssoc.LEFT)
    ])

STRING = OneOrMore(EXPRESSION) + StringEnd()

tests = """\
word and ward or wird
word werd or wurd""".splitlines()

for t in tests:
    print STRING.parseString(t)
</snippet></ROW><ROW><id>5060209</id><snippet>[[['word', 'and', 'ward'], 'or', 'wird']]
[[['word', 'and', 'werd'], 'or', 'wurd']]
</snippet></ROW><ROW><id>5060255</id><snippet>class A(object):
    def func(self):
        self.f()

class B(A):
    @staticmethod
    def f():
        print "I'm B"
</snippet></ROW><ROW><id>5060255</id><snippet>&gt;&gt;&gt; a=x.A()
&gt;&gt;&gt; a.func()
Traceback (most recent call last):
  File "&lt;interactive input&gt;", line 1, in &lt;module&gt;
  File "x.py", line 3, in func
    self.f()
AttributeError: 'A' object has no attribute 'f'
&gt;&gt;&gt; b=x.B()
&gt;&gt;&gt; b.func()
I'm B
</snippet></ROW><ROW><id>5060255</id><snippet>A</snippet></ROW><ROW><id>5060255</id><snippet>B</snippet></ROW><ROW><id>5060358</id><snippet>fetch</snippet></ROW><ROW><id>5060358</id><snippet>def fetch(url):
    return (url, urllib2.urlopen(url).read())
</snippet></ROW><ROW><id>5060692</id><snippet>def findblock( lines, start, stop ):
    it = iter(lines)
    for line in it:
        if start in line:
            # now we are in the block, so yield till we find the end
            for line in it:
                if stop in line:
                    # lets just look for one block
                    return # leave this generator
                    # break # would keep looking for the next block
                yield line                

for line in findblock(lines, start="something distinctive", 
                             stop="something distinctive"):
    print line
</snippet></ROW><ROW><id>5060692</id><snippet>def findblock( lines, start='The text I want is set off by something distinctive', 
                      stop='The end is also identifiable by something distinctive'):
    for line in lines:
        inblock = False
        if line==start:
            inblock=True
        if line==stop:
            inblock=False # or return mb?
        if inblock:
            yield line

themasterlist = [list(findblock( file )) for file in files]
</snippet></ROW><ROW><id>5060695</id><snippet>*</snippet></ROW><ROW><id>5060695</id><snippet>re.findall(...)</snippet></ROW><ROW><id>5060695</id><snippet>re.finditer</snippet></ROW><ROW><id>5060713</id><snippet>CaptureMouse</snippet></ROW><ROW><id>5060748</id><snippet>urllib2</snippet></ROW><ROW><id>5060748</id><snippet>BeautifulSoup</snippet></ROW><ROW><id>5060748</id><snippet>urllib2</snippet></ROW><ROW><id>5060748</id><snippet>BeautifulSoup</snippet></ROW><ROW><id>5060748</id><snippet>src</snippet></ROW><ROW><id>5060748</id><snippet>{'class': some_pattern}</snippet></ROW><ROW><id>5060748</id><snippet>keyword=pattern</snippet></ROW><ROW><id>5060851</id><snippet>some_list[2:4] = [2, 3]
</snippet></ROW><ROW><id>5060851</id><snippet>list.__setitem__()</snippet></ROW><ROW><id>5060851</id><snippet>slice</snippet></ROW><ROW><id>5060851</id><snippet>some_list.__setitem__(slice(2, 4), [2, 3])
</snippet></ROW><ROW><id>5060959</id><snippet>SELECT field1, field2, fieldn FROM app_content WHERE next_decay_at &lt;= NOW()
</snippet></ROW><ROW><id>5061360</id><snippet>hasattr</snippet></ROW><ROW><id>5061360</id><snippet>getattr</snippet></ROW><ROW><id>5061360</id><snippet>dir</snippet></ROW><ROW><id>5061360</id><snippet>callable</snippet></ROW><ROW><id>5061641</id><snippet>os.system('ulimit -s unlimited; some_executable')
</snippet></ROW><ROW><id>5061641</id><snippet>resource.setrlimit(resource.RLIMIT_STACK, (resource.RLIM_INFINITY, resource.RLIM_INFINITY))
</snippet></ROW><ROW><id>5061645</id><snippet>os.dirname(__file__)</snippet></ROW><ROW><id>5061645</id><snippet>os.dirname(module.__file__)</snippet></ROW><ROW><id>5061648</id><snippet>def negpos (lst):
    (neg, pos) = (0, 0)
    for elem in lst:
        if elem &lt; 0:
            neg = neg + elem
        else:
            pos = pos + elem
    return [neg, pos]

print negpos ([-5,5,6,-8,9])
</snippet></ROW><ROW><id>5061648</id><snippet>[-13, 20]
</snippet></ROW><ROW><id>5061805</id><snippet>x / y</snippet></ROW><ROW><id>5061805</id><snippet>x</snippet></ROW><ROW><id>5061805</id><snippet>y</snippet></ROW><ROW><id>5061805</id><snippet>def avrg( inlist ):
    result = []
    for a in inlist:
        # now "a" is just a list by itself
        n = len(a)
        total = sum(a)
        # you can fill in the rest here
    return result
</snippet></ROW><ROW><id>5062023</id><snippet>expanded_bits = [
    0b00000000000000000000000000000000,
    0b00000000000000000000000011111111,
    0b00000000000000001111111100000000,
    0b00000000000000001111111111111111,
    0b00000000111111110000000000000000,
    0b00000000111111110000000011111111,
    0b00000000111111111111111100000000,
    0b00000000111111111111111111111111,
    0b11111111000000000000000000000000,
    0b11111111000000000000000011111111,
    0b11111111000000001111111100000000,
    0b11111111000000001111111111111111,
    0b11111111111111110000000000000000,
    0b11111111111111110000000011111111,
    0b11111111111111111111111100000000,
    0b11111111111111111111111111111111,
    ]
</snippet></ROW><ROW><id>5062023</id><snippet>&gt;&gt;&gt; bin(expanded_bits[0b1011])
"0b11111111000000001111111111111111"
</snippet></ROW><ROW><id>5062159</id><snippet>Genre</snippet></ROW><ROW><id>5062159</id><snippet>def _recurse_for_children(self, node, only_active=False):
    children = []
    children.append(node)
    for child in node.child.active():
        if child != self:
            if (not only_active) or child.active_products().count() &gt; 0:
                children_list = self._recurse_for_children(child, only_active=only_active)
                children.append(children_list)
    return children
</snippet></ROW><ROW><id>5062200</id><snippet>shared_keyvals = dict( (key, dict1[key])
                       for key in (set(dict1) &amp; set(dict2))
                       if dict1[key] == dict2[key]
                     )
</snippet></ROW><ROW><id>5062200</id><snippet>def shared_keyvals(dict1, dict2):
    return dict( (key, dict1[key])
                 for key in (set(dict1) &amp; set(dict2))
                 if dict1[key] == dict2[key]
               )
</snippet></ROW><ROW><id>5062200</id><snippet>dict()</snippet></ROW><ROW><id>5062200</id><snippet>[]</snippet></ROW><ROW><id>5062383</id><snippet>dictOne = dict(arrayOne)
dictTwo = dict(arrayTwo)
</snippet></ROW><ROW><id>5062383</id><snippet>combined = dict()
for name in set(dictOne.keys() + dictTwo.keys()):
  combined[name] = [ dictOne.get(name, 0), dictTwo.get(name, 0) ]
</snippet></ROW><ROW><id>5062383</id><snippet>combined</snippet></ROW><ROW><id>5062383</id><snippet>combined</snippet></ROW><ROW><id>5062383</id><snippet>.get</snippet></ROW><ROW><id>5062383</id><snippet>0</snippet></ROW><ROW><id>5062383</id><snippet>arrayResult = []
for name in combined:
  arrayResult.append([ name ] + combined[name])
</snippet></ROW><ROW><id>5062383</id><snippet>combined = dict()
for name in set(dictOne.keys() + dictTwo.keys() + dictThree.keys()):
  combined[name] = [ dictOne.get(name, 0), dictTwo.get(name, 0), dictThree.get(name, 0) ]
</snippet></ROW><ROW><id>5062383</id><snippet>def combine(*args):
  # Create a list of dictionaries from the arrays we passed in, since we are
  # going to use dictionaries to solve the problem.
  dicts = [ dict(a) for a in args ]

  # Create a list of names by looping through all dictionaries, and through all
  # the names in each dictionary, adding to a master list of names
  names = []
  for d in dicts:
    for name in d.keys():
      names.append(name)

  # Remove duplicates in our list of names by making it a set
  names = set(names)

  # Create a result dict to store results in
  result = dict()

  # Loop through all the names, and add a row for each name, pulling data from
  # each dict we created in the beginning
  for name in names:
    result[name] = [ d.get(name, 0) for d in dicts ]

  # Return, secure in the knowledge of a job well done. :-)
  return result

# Use the function:
resultDict = combine(arrayOne, arrayTwo, arrayThree)
</snippet></ROW><ROW><id>5062660</id><snippet>if word in hash.keys():</snippet></ROW><ROW><id>5062660</id><snippet>if word in hash:</snippet></ROW><ROW><id>5062660</id><snippet>statlist[hash[word]]</snippet></ROW><ROW><id>5062660</id><snippet>statlist=[0]*43990</snippet></ROW><ROW><id>5062660</id><snippet>hash</snippet></ROW><ROW><id>5062660</id><snippet>word</snippet></ROW><ROW><id>5062660</id><snippet>hash</snippet></ROW><ROW><id>5062660</id><snippet>hash[word] = n</snippet></ROW><ROW><id>5062660</id><snippet>hash</snippet></ROW><ROW><id>5062660</id><snippet>hash</snippet></ROW><ROW><id>5062660</id><snippet>if</snippet></ROW><ROW><id>5062660</id><snippet>else:
    hash[word]=n
    ref.write('['+str(word)+','+str(n)+']'+'\n')
    statlist[hash[word]] = 1
</snippet></ROW><ROW><id>5062660</id><snippet>n</snippet></ROW><ROW><id>5062660</id><snippet>global</snippet></ROW><ROW><id>5062660</id><snippet>&gt;&gt;&gt; line = "foo bar foo\n"
&gt;&gt;&gt; line.split(" ")
['foo', 'bar', 'foo\n']
&gt;&gt;&gt; line.split()
['foo', 'bar', 'foo']
&gt;&gt;&gt;
</snippet></ROW><ROW><id>5062660</id><snippet>n</snippet></ROW><ROW><id>5062660</id><snippet>hash[word] = n</snippet></ROW><ROW><id>5062660</id><snippet>n</snippet></ROW><ROW><id>5062731</id><snippet>var1 = re.sub(r'\$this-&gt;getSomething\(\)-&gt;getSomethingElse\(\)-&gt;(.*?)', r'\1', var1)
</snippet></ROW><ROW><id>5062731</id><snippet>var1 = re.sub(r'\$this-&gt;getSomething\(\)-&gt;getSomethingElse\(\)-&gt;', '', var1)
</snippet></ROW><ROW><id>5062731</id><snippet>var1 = var1.replace('$this-&gt;getSomething()-&gt;getSomethingElse()-&gt;', '')
</snippet></ROW><ROW><id>5062926</id><snippet>sys.stdin</snippet></ROW><ROW><id>5062926</id><snippet>StringIO</snippet></ROW><ROW><id>5062926</id><snippet>cStringIO</snippet></ROW><ROW><id>5062926</id><snippet>&gt;&gt;&gt; s = StringIO.StringIO('Hello, world!')
&gt;&gt;&gt; sys.stdin = s ; r = raw_input('What you say?\n') ; sys.stdin = sys.__stdin__ 
What you say?
&gt;&gt;&gt; r
'Hello, world!'
</snippet></ROW><ROW><id>5063762</id><snippet>awk 'BEGIN{OFS = FS = ";"} {print $0, FILENAME}' *.csv &gt; newfile.csv
</snippet></ROW><ROW><id>5063762</id><snippet>awk 'BEGIN{OFS = ","; FS = ";"} {$1 = $1; print $0, FILENAME}' *.csv &gt; newfile.csv
</snippet></ROW><ROW><id>5063762</id><snippet>awk 'BEGIN{OFS = ","; FS = ";"} {$1 = $1; split(FILENAME, a, "_"); print $0, a[1]}' *.csv &gt; newfile.csv
</snippet></ROW><ROW><id>5063783</id><snippet>from functools import wraps
def showinfo(f):
    @wraps(f)
    def wrapper(*args, **kwds):
         print(f.__name__, f.__hash__)
         return f(*args, **kwds)
    return wrapper

@showinfo
def aa():
    pass
</snippet></ROW><ROW><id>5063783</id><snippet>def withself(f):
    @wraps(f)
    def wrapper(*args, **kwds):
        return f(f, *args, **kwds)
    return wrapper

@withself
def aa(self):
      print(self.__name__)
      # etc.
</snippet></ROW><ROW><id>5063783</id><snippet>def bind(f):
    """Decorate function `f` to pass a reference to the function
    as the first argument"""
    return f.__get__(f, type(f))

@bind
def foo(self, x):
    "This is a bound function!"
    print(self, x)


&gt;&gt;&gt; foo(42)
&lt;function foo at 0x02A46030&gt; 42
&gt;&gt;&gt; help(foo)
Help on method foo in module __main__:

foo(self, x) method of builtins.function instance
    This is a bound function!
</snippet></ROW><ROW><id>5063783</id><snippet>__get__</snippet></ROW><ROW><id>5063932</id><snippet>&gt;&gt;&gt; import binascii
&gt;&gt;&gt; binascii.a2b_base64('a')
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
binascii.Error: Incorrect padding
</snippet></ROW><ROW><id>5063932</id><snippet>env</snippet></ROW><ROW><id>5063932</id><snippet>filelocation = os.path.join(WORK,'aws/myproject.pem')
env.key_filename = [filelocation]
</snippet></ROW><ROW><id>5064564</id><snippet>get_all_parties_and_people_for_user(user)</snippet></ROW><ROW><id>5064628</id><snippet>setdefault</snippet></ROW><ROW><id>5064628</id><snippet>for item in data:
    if item["parentId"] != 0:
        parents.setdefault(item["parentId"], []).append(item['id'])
</snippet></ROW><ROW><id>5065108</id><snippet>db</snippet></ROW><ROW><id>5065108</id><snippet>results_patientalerts = db.GqlQuery("SELECT * FROM PatientAlerts WHERE patientinfo_ID = :1 AND alert_type != :2", data_key, 3)</snippet></ROW><ROW><id>5065350</id><snippet>/setup.py
/abc/__init__.py
/abc/seo/
</snippet></ROW><ROW><id>5065350</id><snippet>/abc/__init__.py</snippet></ROW><ROW><id>5065350</id><snippet>__import__('pkg_resources').declare_namespace(__name__)
</snippet></ROW><ROW><id>5065350</id><snippet>setup.py</snippet></ROW><ROW><id>5065350</id><snippet>setup(...,
    packages: ['abc', 'abc.seo'],
    namespace_packages = ['abc']
    ...
)
</snippet></ROW><ROW><id>5065481</id><snippet>#   (generated by ArcGIS/ModelBuilder)
# Usage: DBF2SHAPEFILE &lt;XY_Table&gt; &lt;Y_Field&gt; &lt;X_Field&gt; &lt;Output_Feature_Class&gt;
# ---------------------------------------------------------------------------

# Import system modules
import sys, string, os, arcgisscripting, datetime

# Adds the creation date to all of the previous shapefiles in that folder
filename = 'D:/test.txt'
fileinfo = os.stat(filename)
creation_date = datetime.date.fromtimestamp(fileinfo.st_ctime)
os.rename(filename, filename + '-' + creation_date.strftime('%Y-%m-%d'))

# Create the Geoprocessor object
gp = arcgisscripting.create()

# Load required toolboxes...
gp.AddToolbox("C:/Program Files/ArcGIS/ArcToolbox/Toolboxes/Data Management Tools.tbx")

# Script arguments...
XY_Table = sys.argv[1]

Y_Field = sys.argv[2]

X_Field = sys.argv[3]

Output_Feature_Class = sys.argv[4]

# Local variables...
Layer_Name_or_Table_View = ""

# Process: Make XY Event Layer...
gp.MakeXYEventLayer_management(XY_Table, X_Field, Y_Field, Layer_Name_or_Table_View, "")

# Process: Copy Features...
gp.CopyFeatures_management(Layer_Name_or_Table_View, Output_Feature_Class, "", "0", "0", "0")
</snippet></ROW><ROW><id>5066184</id><snippet>from bitstring import BitArray
s = BitArray('0b11011')
s += '0b100'
s += 'uint:5=9'
s += [0, 1, 1, 0, 1]
...
s.tobytes()
</snippet></ROW><ROW><id>5066184</id><snippet>&gt;&gt;&gt; symbols = [0, 4, 5, 3, 1, 1, 7, 6, 5, 2, 6, 2]
&gt;&gt;&gt; BitArray().join(BitArray(uint=x, length=3) for x in symbols)
BitArray('0x12b27eab2')
&gt;&gt;&gt; _.tobytes()
'\x12\xb2~\xab '
</snippet></ROW><ROW><id>5066411</id><snippet>super()</snippet></ROW><ROW><id>5066411</id><snippet>self, cls</snippet></ROW><ROW><id>5066411</id><snippet>self</snippet></ROW><ROW><id>5066411</id><snippet>cls</snippet></ROW><ROW><id>5066411</id><snippet>super()</snippet></ROW><ROW><id>5066411</id><snippet>super()</snippet></ROW><ROW><id>5066411</id><snippet>run()</snippet></ROW><ROW><id>5066411</id><snippet>super()</snippet></ROW><ROW><id>5066411</id><snippet>class A(object):
    def __init__(self, i):
        self.i = i
    def run(self, value):
        return self.i * value

class B(A):
    def __init__(self, i, j):
        super(B, self).__init__(i)
        self.j = j
    def run(self, value):
        return super(B, self).run(value) + self.j
</snippet></ROW><ROW><id>5066411</id><snippet>run()</snippet></ROW><ROW><id>5066411</id><snippet>info()</snippet></ROW><ROW><id>5066411</id><snippet>info()</snippet></ROW><ROW><id>5066411</id><snippet>super()</snippet></ROW><ROW><id>5066411</id><snippet>class Logger(object):
    def __init__(self, name):
        self.name = name
    def run_logged(self, value):
        print "Running", self.name, "with info", self.info()
        return self.run(value)

class BLogged(B, Logger):
    def __init__(self, i, j):
        B.__init__(self, i, j)
        Logger.__init__("B")
    def info(self):
        return 42
</snippet></ROW><ROW><id>5066411</id><snippet>super()</snippet></ROW><ROW><id>5066411</id><snippet>Logger.__init__()</snippet></ROW><ROW><id>5066411</id><snippet>BLogged</snippet></ROW><ROW><id>5066411</id><snippet>super()</snippet></ROW><ROW><id>5066411</id><snippet>B</snippet></ROW><ROW><id>5066411</id><snippet>super()</snippet></ROW><ROW><id>5066411</id><snippet>class A(object):
    def __init__(self, i, **kwargs):
        super(A, self).__init__(**kwargs)
        self.i = i
    def run(self, value):
        return self.i * value

class B(A):
    def __init__(self, j, **kwargs):
        super(B, self).__init__(**kwargs)
        self.j = j
    def run(self, value):
        return super(B, self).run(value) + self.j

class Logger(object):
    def __init__(self, name, **kwargs):
        super(Logger,self).__init__(**kwargs)
        self.name = name
    def run_logged(self, value):
        print "Running", self.name, "with info", self.info()
        return self.run(value)

class BLogged(B, Logger):
    def __init__(self, **kwargs):
        super(BLogged, self).__init__(name="B", **kwargs)
    def info(self):
        return 42

b = BLogged(i=3, j=4)
</snippet></ROW><ROW><id>5066411</id><snippet>super()</snippet></ROW><ROW><id>5066411</id><snippet>super()</snippet></ROW><ROW><id>5067149</id><snippet>urlpatterns = patterns('tiptop.views',
    (r'^(\d+)/(\d*)$', 'test_items'),
)
</snippet></ROW><ROW><id>5067262</id><snippet>os.open</snippet></ROW><ROW><id>5067262</id><snippet>O_EXLOCK</snippet></ROW><ROW><id>5067475</id><snippet>from django.contrib.auth.models import User
from piston.handler import AnonymousBaseHandler
from piston.utils import rc

class AnonymousUserHandler(AnonymousBaseHandler):
    allowed_methods = ('GET', )
    fields = ('id', 'username',)

    def read(self, request):
        try:
            user = User.objects.get(username=request.GET.get('username', None))
            return user
        except Exception:
            resp = rc.NOT_FOUND
            resp.write(' User not found')
            return resp
</snippet></ROW><ROW><id>5067544</id><snippet>myKey = db.Key.from_path('MyModel', 'mykeyvalue')
rec = db.get(myKey)

rec.MyProperty = 'this is a new value'
rec.put()
</snippet></ROW><ROW><id>5067628</id><snippet>import re
from django.utils.translation import ugettext as _

def process_image_tags(text, ImageModel):
    '''image tag usage:
        ... some text ... [img=image_name:image_class(optional)] ... some text ...
    '''
    t1 = re.split(r'(\[img=[a-z0-9\-_\:]+\])', text)
    t2 = []
    for i in t1:
        if i[:5] == '[img=':
            attrs = i[5:-1].split(':')
            name_attr = attrs[0] #name attribute
            error = None
            try:
                image = ImageModel.objects.get(name=name_attr)
            except ImageModel.DoesNotExist:
                error = '&lt;span class="image_tag_error"&gt;%s&lt;/span&gt;' % _('Image with given name not found')
            except ImageModel.MultipleObjectsReturned:
                error = '&lt;span class="image_tag_error"&gt;%s&lt;/span&gt;' % _('More than one image found')
            if not error:
                p = ['&lt;img']
                p.append('src="%s"' % image.image.url) 
                if len(attrs) &gt; 1:
                    p.append('class="%s"' % attrs[1]) #class attribute
                if image.description:
                    p.append('title="%s"' % image.description)
                p.append('alt="%s"' % image.name)
                p.append('/&gt;')                   
                t2.append(' '.join(p))
            else:
                t2.append(error)
        else:
            t2.append(i)
    return ''.join(t2)
</snippet></ROW><ROW><id>5067628</id><snippet>CustomFlatPage</snippet></ROW><ROW><id>5067628</id><snippet>def save(self, *args, **kwargs):           
    self.content = process_image_tags(self.pre_content, ContentImage)        
    super(CustomFlatPage, self).save(*args, **kwargs)
</snippet></ROW><ROW><id>5067661</id><snippet>"bar"</snippet></ROW><ROW><id>5067661</id><snippet>bar.__name__</snippet></ROW><ROW><id>5067823</id><snippet>        for option_value, option_label in chain(self.choices, choices):
</snippet></ROW><ROW><id>5067823</id><snippet>option_value</snippet></ROW><ROW><id>5067823</id><snippet>option_label</snippet></ROW><ROW><id>5067823</id><snippet>parts = [(x.pk, x.name) for x in Part.objects.all()]
</snippet></ROW><ROW><id>5068182</id><snippet>list</snippet></ROW><ROW><id>5068267</id><snippet>class AlgoMixin(object):
  # Does not end in "Test"; not a subclass of unittest.TestCase.
  # You may prefer "AbstractBase" or something else.

  def test_empty(self):
    result = self.function(make_empty_graph())
    self.assertTrue(result)

class TestF(AlgoMixin, unittest.TestCase):
  function = staticmethod(f)
  # Doesn't need to be in setup, nor be an instance attribute.
  # But doesn't take either self or class parameter, so use staticmethod.

  def test_random(self):
    pass  # Specific test for algorithm 'f'.
</snippet></ROW><ROW><id>5068280</id><snippet>"C:\...\java.exe" -Dpython.home="C:\..." -classpath "C:\...
</snippet></ROW><ROW><id>5068280</id><snippet>"C:\...\java.exe" -Xmx1024m -Dpython.home="C:\..." -classpath "C:\...
</snippet></ROW><ROW><id>5068492</id><snippet>for i in range(10):
    filename = 'data_%d.dat'%(i,)
    print filename
</snippet></ROW><ROW><id>5068658</id><snippet>collective.civicrm.civicrmpfgadaptor/
collective.documentpfgadapter/
collective.pfg.creditcardfields/
collective.pfg.downloadfield/
collective.pfg.masterselect/
collective.pfg.silverpop/
collective.pfg.sslfield/
collective.pfg.verkkomaksut/
pfg.donationform/
pfg.drafts/
raptus.multilanguagepfg/
sc.pfg.brazilianfields/
uwosh.pfg.d2c/
</snippet></ROW><ROW><id>5068682</id><snippet>.so</snippet></ROW><ROW><id>5068682</id><snippet>.pyd</snippet></ROW><ROW><id>5068682</id><snippet>.py</snippet></ROW><ROW><id>5068682</id><snippet>.py</snippet></ROW><ROW><id>5068682</id><snippet>.so</snippet></ROW><ROW><id>5069101</id><snippet>allocation = parent_widget.get_allocation()
desired_width = allocation.width
desired_height = allocation.height

pixbuf = gtk.gdk.pixbuf_new_from_file('your_image.png')
pixbuf = pixbuf.scale_simple(desired_width, desired_height, gtk.gdk.INTERP_BILINEAR)
image = gtk.image_new_from_pixbuf(pixbuf)
</snippet></ROW><ROW><id>5069123</id><snippet>int</snippet></ROW><ROW><id>5069123</id><snippet>continue</snippet></ROW><ROW><id>5069123</id><snippet>for i in currentList:
    if not i[0:length] == parameters:
        self.searchResults.delete(int)
        continue # &lt;--  Use continue so `int` does not increment.
    int += 1
</snippet></ROW><ROW><id>5069123</id><snippet>int</snippet></ROW><ROW><id>5069345</id><snippet>connectionLost</snippet></ROW><ROW><id>5069345</id><snippet>from twisted.internet.protocol import ClientFactory

class EchoClientFactory(ClientFactory):
    def clientConnectionLost(self, connector, reason):
        connector.connect()
</snippet></ROW><ROW><id>5069345</id><snippet>ReconnectingClientFactory</snippet></ROW><ROW><id>5069393</id><snippet>popen = Popen(command_args, stdout=PIPE, stderr=PIPE)
body_contents = popen.stdout().read()
popen.terminate()
popen.wait()
r = HttpResponse(body_contents, mimetype='application/pdf')
</snippet></ROW><ROW><id>5069911</id><snippet>request.show_tracebacks</snippet></ROW><ROW><id>5069911</id><snippet>True</snippet></ROW><ROW><id>5069911</id><snippet>False</snippet></ROW><ROW><id>5070316</id><snippet>if __name__ == '__main__':

    indir = r'C:\basil\rs_Rock_and_Sediment\DVD_Data\testdir'
    mdblist = createDeepMdbList(indir)

    processes = 6  # set num procs to use here
    pool = multiprocessing.Pool(processes)

    pool.map(processMdb, mdblist)
</snippet></ROW><ROW><id>5070514</id><snippet>Products.PluggableAuthService.interfaces.events.IPrincipalCreatedEvent</snippet></ROW><ROW><id>5071162</id><snippet>from numpy import array, dot
dot(array([0.5, -1]), array([[1, 2, 3], [4, 5, 6]]))
# array([-3.5 -4. -4.5])
</snippet></ROW><ROW><id>5071376</id><snippet>malloc</snippet></ROW><ROW><id>5071376</id><snippet>free</snippet></ROW><ROW><id>5071376</id><snippet>del</snippet></ROW><ROW><id>5071376</id><snippet>with</snippet></ROW><ROW><id>5071376</id><snippet>with</snippet></ROW><ROW><id>5071441</id><snippet>python-virtualenv</snippet></ROW><ROW><id>5071441</id><snippet>virtualenv</snippet></ROW><ROW><id>5071441</id><snippet>/usr/bin/</snippet></ROW><ROW><id>5071441</id><snippet>/usr/local/bin/virtualenv</snippet></ROW><ROW><id>5071441</id><snippet>/usr/local</snippet></ROW><ROW><id>5071441</id><snippet>virtualenv</snippet></ROW><ROW><id>5071489</id><snippet>from collections import Mapping

zipcode1 = {'placemark1':{'AddressDetails':{'Country':{'AdministrativeArea':{'SubAdministrativeArea':{'Locality':{'PostalCode':{'PostalCodeNumber':"94043"}}}}}}}}
zipcode2 = {'placemark2':{'AddressDetails':{'Country':{'AdministrativeArea':{'Locality':{'PostalCode':{'PostalCodeNumber':'11201'}}}}}}}

def treeGet(d, name):
    if isinstance(d, Mapping):
        if name in d:
            yield d[name]
        for it in d.values():
            for found in treeGet(it, name):
                yield found
</snippet></ROW><ROW><id>5071489</id><snippet>&gt;&gt;&gt; list(treeGet(zipcode1, 'PostalCodeNumber'))
['94043']
&gt;&gt;&gt; list(treeGet(zipcode2, 'PostalCodeNumber'))
['11201']
</snippet></ROW><ROW><id>5071813</id><snippet>list(set(mammals) &amp; set(apes))
</snippet></ROW><ROW><id>5071813</id><snippet>set(mammals) &amp; set(apes)
</snippet></ROW><ROW><id>5071881</id><snippet>&lt;app&gt;.&lt;model&gt;</snippet></ROW><ROW><id>5071881</id><snippet>django</snippet></ROW><ROW><id>5071899</id><snippet>types.FunctionType</snippet></ROW><ROW><id>5071899</id><snippet>def func(a=1):
    print a

func2 = types.FunctionType(func.func_code, globals(), 'func2', (2,))
func2()
# 2
</snippet></ROW><ROW><id>5071971</id><snippet>import re

# create regular expression pattern
chop = re.compile('#chop-begin.*?#chop-end', re.DOTALL)

# open file
f = open('data', 'r')
data = f.read()
f.close()

# chop text between #chop-begin and #chop-end
data_chopped = chop.sub('', data)

# save result
f = open('data', 'w')
f.write(data_chopped)
f.close()
</snippet></ROW><ROW><id>5072328</id><snippet>if isinstance(data, list):
    # [...]
if isinstance(data, str):
    # "..."
</snippet></ROW><ROW><id>5072328</id><snippet>if isinstance(data, array.array):
    # ...
</snippet></ROW><ROW><id>5072396</id><snippet>ssh-add ~/.ssh/ec2key.pem
fab -H ubuntu@ec2-host deploy
</snippet></ROW><ROW><id>5072396</id><snippet>env.user = 'ubuntu'
env.hosts = [
    'ec2-host'
]
</snippet></ROW><ROW><id>5072396</id><snippet>fab deploy
</snippet></ROW><ROW><id>5072474</id><snippet>def check_email(self, user):
  if os.environ.get('SERVER_SOFTWARE', '').startswith('Dev'):
    return True
</snippet></ROW><ROW><id>5072619</id><snippet>alias bzr status='bzr status -V' 
</snippet></ROW><ROW><id>5072619</id><snippet>.bashrc</snippet></ROW><ROW><id>5072619</id><snippet>bzr status</snippet></ROW><ROW><id>5072634</id><snippet>range(1,7)
</snippet></ROW><ROW><id>5073453</id><snippet>pcount = 0
for c in function_str:
    if c == '(': pcount += 1
    if c == ')': pcount -= 1
    if (c == 'a' or c == 'o') and pcount == 0: 
        return c # Root found
</snippet></ROW><ROW><id>5073509</id><snippet>pyplot.scatter()</snippet></ROW><ROW><id>5073509</id><snippet>import matplotlib.pyplot as plt
im = plt.imread(image_name)
implot = plt.imshow(im)

# put a blue dot at (10, 20)
plt.scatter([10], [20])

# put a red dot, size 40, at 2 locations:
plt.scatter(x=[30, 40], y=[50, 60], c='r', s=40)

plt.show()
</snippet></ROW><ROW><id>5073649</id><snippet>d = {'a':1, 'b':1, 'c':1}
len(set(d.values()))==1    # -&gt; True
</snippet></ROW><ROW><id>5073649</id><snippet>testval = 1
all(val==testval for val in d.values())   # -&gt; True
</snippet></ROW><ROW><id>5073765</id><snippet># File: ScrollTest.py
# coding: ASCII
"""
Interatively zoom plots together, but permit them to scroll independently.
"""
from matplotlib import pyplot
import sys

def _get_limits( ax ):
    """ Return X and Y limits for the passed axis as [[xlow,xhigh],[ylow,yhigh]]
    """
    return [list(ax.get_xlim()), list(ax.get_ylim())]

def _set_limits( ax, lims ):
    """ Set X and Y limits for the passed axis
    """
    ax.set_xlim(*(lims[0]))
    ax.set_ylim(*(lims[1]))
    return

def pre_zoom( fig ):
    """ Initialize history used by the re_zoom() event handler.
        Call this after plots are configured and before pyplot.show().
    """
    global oxy
    oxy = [_get_limits(ax) for ax in fig.axes]
    # :TODO: Intercept the toolbar Home, Back and Forward buttons.
    return

def re_zoom(event):
    """ Pyplot event handler to zoom all plots together, but permit them to
        scroll independently.  Created to support eyeball correlation.
        Use with 'motion_notify_event' and 'button_release_event'.
    """
    global oxy
    for ax in event.canvas.figure.axes:
        navmode = ax.get_navigate_mode()
        if navmode is not None:
            break
    scrolling = (event.button == 1) and (navmode == "PAN")
    if scrolling:                   # Update history (independent of event type)
        oxy = [_get_limits(ax) for ax in event.canvas.figure.axes]
        return
    if event.name != 'button_release_event':    # Nothing to do!
        return
    # We have a non-scroll 'button_release_event': Were we zooming?
    zooming = (navmode == "ZOOM") or ((event.button == 3) and (navmode == "PAN"))
    if not zooming:                 # Nothing to do!
        oxy = [_get_limits(ax) for ax in event.canvas.figure.axes]  # To be safe
        return
    # We were zooming, but did anything change?  Check for zoom activity.
    changed = None
    zoom = [[0.0,0.0],[0.0,0.0]]    # Zoom from each end of axis (2 values per axis)
    for i, ax in enumerate(event.canvas.figure.axes): # Get the axes
        # Find the plot that changed
        nxy = _get_limits(ax)
        if (oxy[i] != nxy):         # This plot has changed
            changed = i
            # Calculate zoom factors
            for j in [0,1]:         # Iterate over x and y for each axis
                # Indexing: nxy[x/y axis][lo/hi limit]
                #           oxy[plot #][x/y axis][lo/hi limit]
                width = oxy[i][j][1] - oxy[i][j][0]
                # Determine new axis scale factors in a way that correctly
                # handles simultaneous zoom + scroll: Zoom from each end.
                zoom[j] = [(nxy[j][0] - oxy[i][j][0]) / width,  # lo-end zoom
                           (oxy[i][j][1] - nxy[j][1]) / width]  # hi-end zoom
            break                   # No need to look at other axes
    if changed is not None:
        for i, ax in enumerate(event.canvas.figure.axes): # change the scale
            if i == changed:
                continue
            for j in [0,1]:
                width = oxy[i][j][1] - oxy[i][j][0]
                nxy[j] = [oxy[i][j][0] + (width*zoom[j][0]),
                          oxy[i][j][1] - (width*zoom[j][1])]
            _set_limits(ax, nxy)
        event.canvas.draw()         # re-draw the canvas (if required)
        pre_zoom(event.canvas.figure)   # Update history
    return
# End re_zoom()

def main(argv):
    """ Test/demo code for re_zoom() event handler.
    """
    import numpy
    x = numpy.linspace(0,100,1000)      # Create test data
    y = numpy.sin(x)*(1+x)

    fig = pyplot.figure()               # Create plot
    ax1 = pyplot.subplot(211)
    ax1.plot(x,y)
    ax2 = pyplot.subplot(212)
    ax2.plot(x,y)

    pre_zoom( fig )                     # Prepare plot event handler
    pyplot.connect('motion_notify_event', re_zoom)  # for right-click pan/zoom
    pyplot.connect('button_release_event',re_zoom)  # for rectangle-select zoom

    pyplot.show()                       # Show plot and interact with user
# End main()

if __name__ == "__main__":
    # Script is being executed from the command line (not imported)
    main(sys.argv)

# End of file ScrollTest.py
</snippet></ROW><ROW><id>5074060</id><snippet>&lt;ns1:query&gt; 
</snippet></ROW><ROW><id>5074203</id><snippet>'EdgeColor'</snippet></ROW><ROW><id>5074203</id><snippet>'none'</snippet></ROW><ROW><id>5074203</id><snippet>'CData'</snippet></ROW><ROW><id>5074203</id><snippet>s = .05;
x = [-2:s:2+s];
y = [-1:s:3+s];
[X,Y] = meshgrid(x,y);
Z = (1.-X).^2 + 100.*(Y-X.*X).^2;
minZ = min(Z(:));  %# Find minimum value of Z
maxZ = max(Z(:));  %# Find maximum value of Z
C = minZ+(maxZ-minZ).*log(1+Z-minZ)./log(1+maxZ-minZ);  %# Create a log-scaled
                                                        %#   set of color data
surf(X,Y,Z,C,'EdgeColor','none');
colormap jet
</snippet></ROW><ROW><id>5074203</id><snippet>Z</snippet></ROW><ROW><id>5074203</id><snippet>C</snippet></ROW><ROW><id>5074203</id><snippet>x = 0:5:100;      %# Create a range of values from 0 to 100
plot(x,x,'b-*');  %# Plot the values as a straight line (y = x) in blue
hold on;          %# Add to the plot
plot(x,100.*log(1+x)./log(101),'r-*');  %# Plot a log-scaled version of x in red
colorbar          %# Display the default jet color map, for comparison
</snippet></ROW><ROW><id>5074203</id><snippet>C = Z;
[~,index] = sort(C(:));
C(index) = 1:numel(index);
h = surf(X,Y,Z,C,'EdgeColor','none');
colormap jet
caxis([1 numel(index)]);
</snippet></ROW><ROW><id>5074203</id><snippet>C = Z</snippet></ROW><ROW><id>5074278</id><snippet>
for row in d:
 print row
 print
</snippet></ROW><ROW><id>5074278</id><snippet>
def value():
 infile=open("C:/Documents and Settings/242481/My Documents/file.csv", "rU")
 data = [row for row in infile]
 infile.close()
 return data
</snippet></ROW><ROW><id>5074346</id><snippet>.*?</snippet></ROW><ROW><id>5074356</id><snippet>c</snippet></ROW><ROW><id>5074356</id><snippet>&gt;&gt;&gt; DFT(4, [1, 2, 3, 4])
4 point DFT finished in 0.0310370227732s
[(10+0j), (-2.0000000000000004-1.9999999999999996j), (-2+9.797174393178826e-16j), (-1.9999999999999982+2.000000000000001j)]
</snippet></ROW><ROW><id>5074356</id><snippet>&gt;&gt;&gt; DFT(4, [1, 2, 3, 4])
4 point DFT finished in 4.17962941128e-05s
[(10+0j), (-2.0000000000000004+1.9999999999999996j), (-2-9.797174393178826e-16j), (-1.9999999999999982-2.000000000000001j)]
</snippet></ROW><ROW><id>5074660</id><snippet>def numeric_prefix(s):
    n = 0
    for c in s:
        if not c.isdigit():
            return n
        else:
            n = n * 10 + int(c)
    return n
</snippet></ROW><ROW><id>5074660</id><snippet>&gt;&gt;&gt; strings = ["1asdf", "25etrth", "2234342 awefiasd"]
&gt;&gt;&gt; [numeric_prefix(s) for s in strings]
[1, 25, 2234342]
</snippet></ROW><ROW><id>5074660</id><snippet>import itertools

def numeric_prefix(s):
    n = ''.join(itertools.takewhile(lambda c: c.isdigit(), s))
    return int(n) if n else 0
</snippet></ROW><ROW><id>5074729</id><snippet>np.argwhere(a1!=a2)
np.where(a1!=a2)
</snippet></ROW><ROW><id>5075252</id><snippet>self</snippet></ROW><ROW><id>5075252</id><snippet>self.__class__.__name__</snippet></ROW><ROW><id>5075252</id><snippet>self</snippet></ROW><ROW><id>5075283</id><snippet>re.sub(r"(?&lt;=[a-z])\r?\n"," ", textblock)
</snippet></ROW><ROW><id>5075283</id><snippet>\Z</snippet></ROW><ROW><id>5075283</id><snippet>\z</snippet></ROW><ROW><id>5075283</id><snippet>(?&lt;=[a-z])</snippet></ROW><ROW><id>5075485</id><snippet>PrincessRoom</snippet></ROW><ROW><id>5075485</id><snippet>Game</snippet></ROW><ROW><id>5075485</id><snippet>princess</snippet></ROW><ROW><id>5075485</id><snippet>PrincessRoom</snippet></ROW><ROW><id>5075485</id><snippet>Game</snippet></ROW><ROW><id>5075485</id><snippet>PrincessRoom</snippet></ROW><ROW><id>5075485</id><snippet>Game</snippet></ROW><ROW><id>5075585</id><snippet>code</snippet></ROW><ROW><id>5075585</id><snippet>client_secret</snippet></ROW><ROW><id>5075585</id><snippet>access_token</snippet></ROW><ROW><id>5076070</id><snippet>rstrip</snippet></ROW><ROW><id>5076070</id><snippet>replace</snippet></ROW><ROW><id>5076070</id><snippet>b'hiya\0x\0'</snippet></ROW><ROW><id>5076070</id><snippet>rstrip</snippet></ROW><ROW><id>5076070</id><snippet>&gt;&gt;&gt; b'hiya\0x\0'.split(b'\0',1)[0]
b'hiya'
</snippet></ROW><ROW><id>5076086</id><snippet>for</snippet></ROW><ROW><id>5076086</id><snippet>readline()</snippet></ROW><ROW><id>5076086</id><snippet>for</snippet></ROW><ROW><id>5076086</id><snippet>readline()</snippet></ROW><ROW><id>5076086</id><snippet>for</snippet></ROW><ROW><id>5076086</id><snippet>readline()</snippet></ROW><ROW><id>5076086</id><snippet>read()</snippet></ROW><ROW><id>5076086</id><snippet>readline()</snippet></ROW><ROW><id>5076191</id><snippet>env.Program ('PCorrect', Glob ('*.cc'), LIBS = ['proverim'])
</snippet></ROW><ROW><id>5076191</id><snippet>env['LIBS'] = ['proverim']
</snippet></ROW><ROW><id>5076191</id><snippet>env.Append(LIBS=['proverim'])
env.Program('PCorrect', Glob('*.cc'))
</snippet></ROW><ROW><id>5076727</id><snippet>functools.wraps</snippet></ROW><ROW><id>5076727</id><snippet>__wrapped__</snippet></ROW><ROW><id>5076727</id><snippet>f.__globals__</snippet></ROW><ROW><id>5076863</id><snippet>print "\n" 
</snippet></ROW><ROW><id>5076863</id><snippet>print "\r\n"
</snippet></ROW><ROW><id>5077111</id><snippet>QTabWidget</snippet></ROW><ROW><id>5077111</id><snippet>QComboBox</snippet></ROW><ROW><id>5077111</id><snippet>QStackedWidget</snippet></ROW><ROW><id>5077350</id><snippet>from scrapy.item import BaseItem
from scrapy.contrib.loader import ItemLoader

class FlexibleItem(dict, BaseItem):
    pass

if __name__ == '__main__':
    item = FlexibleItem()
    loader = ItemLoader(item)

    loader.add_value('foo', 'bar')
    loader.add_value('baz', 123)
    loader.add_value('baz', 'test')
    loader.add_value(None, {'abc': 'xyz', 'foo': 555})

    print loader.load_item()

    if 'meow' not in item:
        print "it's not a cat!"
</snippet></ROW><ROW><id>5077350</id><snippet>fields</snippet></ROW><ROW><id>5077350</id><snippet>def __setitem__(self, key, value):
    if key in self.fields:
        self._values[key] = value
    else:
        raise KeyError("%s does not support field: %s" %\
              (self.__class__.__name__, key))
</snippet></ROW><ROW><id>5077350</id><snippet>__setitem__</snippet></ROW><ROW><id>5077350</id><snippet>class FlexItem(Item):
    def __setitem__(self, key, value):
        if key not in self.fields:
            self.fields[key] = Field()

        self._values[key] = value
</snippet></ROW><ROW><id>5077366</id><snippet>event.listen(child_table, "after-create", DDL(inherit).execute_if(dialect='postgresql'))
</snippet></ROW><ROW><id>5077580</id><snippet>application: ***your-app-name***
version: 1
runtime: python
api_version: 1

handlers:
- url: /(robots\.txt|favicon\.ico)
  static_files: public/\1
  upload: public/(.*)

- url: /public
  static_dir: public

- url: /.*
  script: main.py
</snippet></ROW><ROW><id>5077580</id><snippet>pubic</snippet></ROW><ROW><id>5077580</id><snippet>&lt;link rel="stylesheet" href="/public/style.css"&gt;
</snippet></ROW><ROW><id>5077700</id><snippet>staticdata</snippet></ROW><ROW><id>5077994</id><snippet>raw_input()</snippet></ROW><ROW><id>5077994</id><snippet>choice == "1"
</snippet></ROW><ROW><id>5077994</id><snippet>input()</snippet></ROW><ROW><id>5077994</id><snippet>raw_input()</snippet></ROW><ROW><id>5077994</id><snippet>int(raw_input())</snippet></ROW><ROW><id>5077994</id><snippet>try:
  choice = int(raw_input(), 10)
except ValueError:
  choice = None
</snippet></ROW><ROW><id>5078155</id><snippet>import numpy as np
from numpy.lib.stride_tricks import as_strided as ast

A= np.arange(36).reshape(6, 6)
print A
#[[ 0  1  2  3  4  5]
# [ 6  7  8  9 10 11]
# ...
# [30 31 32 33 34 35]]

# 2x2 block view
B= ast(A, shape= (3, 3, 2, 2), strides= (48, 8, 24, 4))
print B[1, 1]
#[[14 15]
# [20 21]]

# for preserving original shape
B[:, :]= np.dot(B[:, :], np.array([[0, 1], [1, 0]]))
print A
#[[ 1  0  3  2  5  4]
# [ 7  6  9  8 11 10]
# ...
# [31 30 33 32 35 34]]
print B[1, 1]
#[[15 14]
# [21 20]]

# for reducing shape, processing in 3D is enough
C= B.reshape(3, 3, -1)
print C.sum(-1)
#[[ 14  22  30]
# [ 62  70  78]
# [110 118 126]]
</snippet></ROW><ROW><id>5078155</id><snippet>matlab</snippet></ROW><ROW><id>5078155</id><snippet>numpy</snippet></ROW><ROW><id>5078155</id><snippet>numpy</snippet></ROW><ROW><id>5078155</id><snippet>scipy</snippet></ROW><ROW><id>5078155</id><snippet>magic</snippet></ROW><ROW><id>5078155</id><snippet>strides</snippet></ROW><ROW><id>5078155</id><snippet>block_view</snippet></ROW><ROW><id>5078155</id><snippet>numpy</snippet></ROW><ROW><id>5078155</id><snippet>from numpy.lib.stride_tricks import as_strided as ast

def block_view(A, block= (3, 3)):
    """Provide a 2D block view to 2D array. No error checking made.
    Therefore meaningful (as implemented) only for blocks strictly
    compatible with the shape of A."""
    # simple shape and strides computations may seem at first strange
    # unless one is able to recognize the 'tuple additions' involved ;-)
    shape= (A.shape[0]/ block[0], A.shape[1]/ block[1])+ block
    strides= (block[0]* A.strides[0], block[1]* A.strides[1])+ A.strides
    return ast(A, shape= shape, strides= strides)

if __name__ == '__main__':
    from numpy import arange
    A= arange(144).reshape(12, 12)
    print block_view(A)[0, 0]
    #[[ 0  1  2]
    # [12 13 14]
    # [24 25 26]]
    print block_view(A, (2, 6))[0, 0]
    #[[ 0  1  2  3  4  5]
    # [12 13 14 15 16 17]]
    print block_view(A, (3, 12))[0, 0]
    #[[ 0  1  2  3  4  5  6  7  8  9 10 11]
    # [12 13 14 15 16 17 18 19 20 21 22 23]
    # [24 25 26 27 28 29 30 31 32 33 34 35]]
</snippet></ROW><ROW><id>5078280</id><snippet>setup.py</snippet></ROW><ROW><id>5078280</id><snippet>requires</snippet></ROW><ROW><id>5078280</id><snippet>python setup.py develop
</snippet></ROW><ROW><id>5078280</id><snippet>requires = ['pyramid',
            'WebError',
            'pymongo',
            'mock',
            'formencode']
</snippet></ROW><ROW><id>5078532</id><snippet>gethostbyaddr</snippet></ROW><ROW><id>5078532</id><snippet>man</snippet></ROW><ROW><id>5078981</id><snippet>CherryPy-3.1.2.win32.exe</snippet></ROW><ROW><id>5078981</id><snippet>CherryPy</snippet></ROW><ROW><id>5078981</id><snippet>CherryPy</snippet></ROW><ROW><id>5078981</id><snippet>C:\Python27\Lib\site-packages\cherrypy\tutorial</snippet></ROW><ROW><id>5078981</id><snippet>python tut01_helloworld.py</snippet></ROW><ROW><id>5078981</id><snippet>http://localhost:8080/</snippet></ROW><ROW><id>5079152</id><snippet>squared = [x**2 for x in lst]
</snippet></ROW><ROW><id>5079152</id><snippet>map</snippet></ROW><ROW><id>5079152</id><snippet>lambda</snippet></ROW><ROW><id>5079152</id><snippet>map</snippet></ROW><ROW><id>5079152</id><snippet>lambda</snippet></ROW><ROW><id>5079188</id><snippet>from win32com.client import GetObject
WMI = GetObject('winmgmts:')

#List all processes
processes = WMI.InstancesOf('Win32_Process')
for process in processes:
    print process.Properties_('Name')

#Get a specific process
p = WMI.ExecQuery('select * from Win32_Process where Name="chrome.exe"')
#view all possible properties
for prop in p[0].Properties_:
    print prop
#print out PID
print p[0].Properties_('ProcessId').Value
</snippet></ROW><ROW><id>5079313</id><snippet>class UserDetails(Form):
    group_id = SelectField(u'Group', coerce=int)

def edit_user(request, id):
    user = User.query.get(id)
    form = UserDetails(request.POST, obj=user)
    form.group_id.choices = [(g.id, g.name) for g in Group.query.order_by('name')]
</snippet></ROW><ROW><id>5079379</id><snippet>_client = gdata.docs.client.DocsClient('My-Prety-App-v1')
# Set your prefered auth method
# ...
entry = _client.GetDoc('document:XXXXXXXXXXXXXXXXXXXXXXXXXXXXXX')
exportFormat = 'html'
content = _client.GetFileContent(uri=entry.content.src + '&amp;exportFormat=' + exportFormat)
self.response.out.write(content)
</snippet></ROW><ROW><id>5079482</id><snippet>python_select</snippet></ROW><ROW><id>5079482</id><snippet>pip install virtualenvwrapper
</snippet></ROW><ROW><id>5079482</id><snippet>.bashrc</snippet></ROW><ROW><id>5079482</id><snippet>.profile</snippet></ROW><ROW><id>5079482</id><snippet>source</snippet></ROW><ROW><id>5079482</id><snippet>export WORKON_HOME=$HOME/.virtualenvs
source /usr/local/bin/virtualenvwrapper.sh # where Homebrew places it
export VIRTUALENVWRAPPER_VIRTUALENV_ARGS='--no-site-packages' # optional
</snippet></ROW><ROW><id>5079482</id><snippet>workon</snippet></ROW><ROW><id>5079482</id><snippet>mkvirtualenv testEnvironmentName
</snippet></ROW><ROW><id>5079482</id><snippet>--no-site-packages</snippet></ROW><ROW><id>5079482</id><snippet>pip freeze</snippet></ROW><ROW><id>5079482</id><snippet>deactivate</snippet></ROW><ROW><id>5079482</id><snippet>workon testEnvironmentName</snippet></ROW><ROW><id>5079482</id><snippet>workon</snippet></ROW><ROW><id>5079482</id><snippet>pip install</snippet></ROW><ROW><id>5079482</id><snippet>py-pil</snippet></ROW><ROW><id>5079515</id><snippet>noisy</snippet></ROW><ROW><id>5079515</id><snippet>False</snippet></ROW><ROW><id>5079515</id><snippet>import sys

from twisted.internet import reactor, protocol
from twisted.python import log

log.startLogging(sys.stdout)

f = protocol.ClientFactory()
f.protocol = protocol.Protocol
reactor.connectTCP('localhost', 22, f)

g = protocol.ClientFactory()
g.noisy = False
g.protocol = protocol.Protocol
reactor.connectTCP('localhost', 25, g)

reactor.run()
</snippet></ROW><ROW><id>5079515</id><snippet>2011-02-22 09:43:23-0500 [-] Log opened.
2011-02-22 09:43:23-0500 [-] Starting factory &lt;twisted.internet.protocol.ClientFactory instance at 0x8f422cc&gt;
^C
2011-02-22 09:43:26-0500 [-] Received SIGINT, shutting down.
2011-02-22 09:43:26-0500 [Protocol,client] Stopping factory &lt;twisted.internet.protocol.ClientFactory instance at 0x8f422cc&gt;
2011-02-22 09:43:26-0500 [-] Main loop terminated.
</snippet></ROW><ROW><id>5079586</id><snippet># the self param passed to installEventFilter indicates the object which
# defines eventFilter(), see below:
self.list.installEventFilter(self)
</snippet></ROW><ROW><id>5079586</id><snippet>def eventFilter(self, watched, event):
    if event.type() == QEvent.KeyPress and \
       event.matches(QKeySequence.InsertParagraphSeparator):
       i = self.list.currentRow()
       # process enter key on row i
</snippet></ROW><ROW><id>5079586</id><snippet>InsertParagraphSeparator</snippet></ROW><ROW><id>5079653</id><snippet>from datetime import datetime, timedelta
now = datetime.now()
now = now - timedelta(minutes = now.minute % 15, seconds = now.second, microseconds = now.microsecond )
</snippet></ROW><ROW><id>5079722</id><snippet>PyList_GetItem</snippet></ROW><ROW><id>5079722</id><snippet>PyObject*</snippet></ROW><ROW><id>5079722</id><snippet>printf("%f\n", PyFloat_AsDouble(PyList_GetItem(input, (Py_ssize_t)i)));
</snippet></ROW><ROW><id>5079766</id><snippet>def my_method(*args, **kwds):
    # do something

# when you call the method
my_method(a1, a2, k1=a3, k2=a4)

# you get: 
args = (a1, a2)
kwds = {'k':a3, 'k2':a4}
</snippet></ROW><ROW><id>5079766</id><snippet>def my_method(*args):
    if len(args) == 1 and isinstance(args[0], str):
        # case 1
    elif len(args) == 2 and isinstance(args[1], int):
        # case 2 
    elif len(args) == 2 and isinstance(args[1], str):
        # case 3
</snippet></ROW><ROW><id>5080137</id><snippet>f = inspect.currentframe()
print(f.f_locals)
print(inspect.getframeinfo(f))
</snippet></ROW><ROW><id>5080137</id><snippet>inspect.getargvalues</snippet></ROW><ROW><id>5080137</id><snippet>def some_call(arg1, arg2, *args, **kwargs):
    f = inspect.currentframe()
    fn_name = inspect.getframeinfo(f)[2]
    arginfo = inspect.getargvalues(f)
    args = [repr(arginfo.locals[arg]) for arg in arginfo.args]
    varargs = [repr(x) for x in arginfo.locals[arginfo.varargs]]
    kwargs = [', '.join(str(k)+"="+repr(v) for k,v in 
        arginfo.locals[arginfo.keywords].items())]
    print('{0}({1})'.format(fn_name, ', '.join(args + varargs + kwargs)))

&gt;&gt;&gt; some_call(1, 2, "hi", kw1="frob")
some_call(1, 2, 'hi', kw1='frob')
</snippet></ROW><ROW><id>5080772</id><snippet>kMaxLoad = 80
while True:
    x = [cpu.LoadPercentage for cpu in c.Win32_Processor()]
    if max(x) &lt; kMaxLoad:
        break
print "okay, load is under %i" % kMaxLoad
</snippet></ROW><ROW><id>5080887</id><snippet>....other code....
self.aTrack = [Track(sTitle,sArtist,sAlbum,sSource, sDestDir)]
self.TrackOlv.AddObjects(self.aTrack)
....other code....
</snippet></ROW><ROW><id>5080887</id><snippet>AttributeError: type object 'Track' has no attribute 'atrTitle'
</snippet></ROW><ROW><id>5080887</id><snippet>&gt;&gt;&gt; class Foo(object): pass
...
&gt;&gt;&gt; Foo.cat
Traceback (most recent call last):
  File "&lt;input&gt;", line 1, in &lt;module&gt;
AttributeError: type object 'Foo' has no attribute 'cat'
&gt;&gt;&gt; Foo().cat
Traceback (most recent call last):
  File "&lt;input&gt;", line 1, in &lt;module&gt;
AttributeError: 'Foo' object has no attribute 'cat'
</snippet></ROW><ROW><id>5081268</id><snippet>def makeAdjuster(name, attr, lower, upper, step):
    def doAdjust(par):
        setattr(Bikedrawing.p, attr, par.get_value())
        panelhoriz.queue_draw()

    val = getattr(Bikedrawing.p, attr)
    adjust = gtk.Adjustment(value=val, lower=lower, upper=upper, step_incr=step)

    label = gtk.Label(name)
    topcolumn1.pack_start(label, False, False)

    scale = gtk.HScale(adjustment=adjust)
    scale.set_value_pos(gtk.POS_LEFT)
    scale.connect("value-changed", doAdjust)
    topcolumn1.pack_start(scale, True, True)

for adj in (
    ('Bottom bracket height', 'bottomBracketHeight', 180., 400., 10.),
    ('Seat tube angle', 'seatTubeAngle', 60., 80., 0.5),
    ('Seat tube length', 'seatTubeLength', 300., 700., 10.),
    ('Top tube length', 'topTubeLength', 400., 700., 10.)
):
    makeAdjuster(*adj)
</snippet></ROW><ROW><id>5081329</id><snippet>import matplotlib.pyplot as plt
x=[1,2,3,4,5]
y=[1,2,3,4,5]
plt.plot(x,y)
plt.xticks(rotation='vertical')

fig = plt.gcf()
fig.subplots_adjust(bottom=0.2)

plt.show()
</snippet></ROW><ROW><id>5081430</id><snippet>window.Disable()
window.Show()
window.Enable()
</snippet></ROW><ROW><id>5081449</id><snippet>Person.objects.filter(teacher__isnull=False) 
# return Person who has a teacher pointing to it
</snippet></ROW><ROW><id>5081579</id><snippet>cd C:\Path\to\folder\with\your\scripts</snippet></ROW><ROW><id>5081579</id><snippet>python myscript.py</snippet></ROW><ROW><id>5081579</id><snippet>cd</snippet></ROW><ROW><id>5081770</id><snippet>app.restrictedTraverse('/path/to/folder').manage_delObjects(list_of_ids)
transaction.commit()
</snippet></ROW><ROW><id>5081774</id><snippet>import urllib
import re

def get_quote(symbol):
    base_url = 'http://finance.google.com/finance?q='
    content = urllib.urlopen(base_url + symbol).read()
    m = re.search('id="ref_694653_l".*?&gt;(.*?)&lt;', content)
    if m:
        quote = m.group(1)
    else:
        quote = 'no quote available for: ' + symbol
    return quote
</snippet></ROW><ROW><id>5081774</id><snippet>import stockquote
print stockquote.get_quote('goog')
</snippet></ROW><ROW><id>5081917</id><snippet>import matplotlib.pyplot as plt
import numpy as np
import textwrap

mu, sigma=100, 15
N=4
x=mu + sigma*np.random.randn(N)
plt.bar(range(N), x,  align='center')
labels=[
    'hello world 12345',
    'another long one',
    'what happened to pithy',
    'yada yada',
    ]
labels=[textwrap.fill(text,15) for text in labels]

plt.xticks(range(N), labels)
plt.show()
</snippet></ROW><ROW><id>5081937</id><snippet>import dbus

bus = dbus.SystemBus()
ud_manager_obj = bus.get_object("org.freedesktop.UDisks", "/org/freedesktop/UDisks")
ud_manager = dbus.Interface(ud_manager_obj, 'org.freedesktop.UDisks')

for dev in ud_manager.EnumerateDevices():
    device_obj = bus.get_object("org.freedesktop.UDisks", dev)
    device_props = dbus.Interface(device_obj, dbus.PROPERTIES_IFACE)
    print device_props.Get('org.freedesktop.UDisks.Device', "DriveVendor")
    print device_props.Get('org.freedesktop.UDisks.Device', "DeviceMountPaths")
    print device_props.Get('org.freedesktop.UDisks.Device', "DriveSerial")
    print device_props.Get('org.freedesktop.UDisks.Device', "PartitionSize")
</snippet></ROW><ROW><id>5082144</id><snippet>def login_handler(sender, **kwargs):
    try:
        user = kwargs['user']
        request = kwargs['request']
        result=Visitor.objects.get(user=user)
        print "You already have login with your name"
    except:
        visitor=Visitor()
        visitor.user=user
        visitor.save()
post_login.connect(login_handler)
</snippet></ROW><ROW><id>5082229</id><snippet>__radd__</snippet></ROW><ROW><id>5082229</id><snippet>__radd__</snippet></ROW><ROW><id>5082229</id><snippet>x + y</snippet></ROW><ROW><id>5082229</id><snippet>x.__add__(y)</snippet></ROW><ROW><id>5082229</id><snippet>y.__radd__(x)</snippet></ROW><ROW><id>5082229</id><snippet>0 + x</snippet></ROW><ROW><id>5082229</id><snippet>0.__add__(x)</snippet></ROW><ROW><id>5082229</id><snippet>int</snippet></ROW><ROW><id>5082229</id><snippet>__add__</snippet></ROW><ROW><id>5082229</id><snippet>int</snippet></ROW><ROW><id>5082229</id><snippet>__radd__</snippet></ROW><ROW><id>5082229</id><snippet>sum</snippet></ROW><ROW><id>5082229</id><snippet>__radd__</snippet></ROW><ROW><id>5082482</id><snippet>.format</snippet></ROW><ROW><id>5082482</id><snippet>%</snippet></ROW><ROW><id>5082482</id><snippet>%</snippet></ROW><ROW><id>5082482</id><snippet>"hi there %s" % name
</snippet></ROW><ROW><id>5082482</id><snippet>name</snippet></ROW><ROW><id>5082482</id><snippet>(1, 2, 3)</snippet></ROW><ROW><id>5082482</id><snippet>TypeError</snippet></ROW><ROW><id>5082482</id><snippet>"hi there %s" % (name,)   # supply the single argument as a single-item tuple
</snippet></ROW><ROW><id>5082482</id><snippet>.format</snippet></ROW><ROW><id>5082482</id><snippet>.format</snippet></ROW><ROW><id>5082482</id><snippet>log.debug</snippet></ROW><ROW><id>5082482</id><snippet>"some debug info: %s"%some_info</snippet></ROW><ROW><id>5082482</id><snippet>"some debug info: roflcopters are active"</snippet></ROW><ROW><id>5082482</id><snippet>log.debug()</snippet></ROW><ROW><id>5082556</id><snippet>._v_attrs</snippet></ROW><ROW><id>5082704</id><snippet>&lt;Configure&gt;</snippet></ROW><ROW><id>5082713</id><snippet>xml.parsers.expat.XML_ERROR_INVALID_TOKEN</snippet></ROW><ROW><id>5082713</id><snippet>ExpatError.lineno</snippet></ROW><ROW><id>5082713</id><snippet>ExpatError.offset</snippet></ROW><ROW><id>5082713</id><snippet>python -c "print repr(open('win_ok_file.xml', 'rb').read(200))"
</snippet></ROW><ROW><id>5082713</id><snippet>CR</snippet></ROW><ROW><id>5082713</id><snippet>xmlns:space="preserve"</snippet></ROW><ROW><id>5082713</id><snippet>CR LF</snippet></ROW><ROW><id>5082713</id><snippet>LF</snippet></ROW><ROW><id>5082713</id><snippet>iterparse()</snippet></ROW><ROW><id>5082713</id><snippet>xml.etree.cElementTree</snippet></ROW><ROW><id>5082713</id><snippet>lxml</snippet></ROW><ROW><id>5082912</id><snippet>,</snippet></ROW><ROW><id>5082912</id><snippet>:</snippet></ROW><ROW><id>5082912</id><snippet>re.sub()</snippet></ROW><ROW><id>5082912</id><snippet>.badstrings</snippet></ROW><ROW><id>5082912</id><snippet>import re

def sanitize_address(address, regex):
    return regex.sub('', address)

badstrings = ['get directions', 'multiple locations']
base_regex = r'[,\s]+('+'|'.join(badstrings)+')'
regex = re.compile(base_regex, re.I)
address = '123 Awesome St, Pleasantville, NY, Get Directions'
print sanitize_address(address, regex)
</snippet></ROW><ROW><id>5082912</id><snippet>123 Awesome St, Pleasantville, NY
</snippet></ROW><ROW><id>5083326</id><snippet>from django.db.models import Q

searchterm='y'
Patient.objects.filter(Q(mrn__icontains=searchterm) | Q(first_name__icontains=searchterm) | Q(last_name__icontains=searchterm))
</snippet></ROW><ROW><id>5083439</id><snippet>mask[mask==1] = data</snippet></ROW><ROW><id>5083497</id><snippet>min</snippet></ROW><ROW><id>5083497</id><snippet>result = min(apple.values(), key=lambda x:x['size'])
</snippet></ROW><ROW><id>5083497</id><snippet>key</snippet></ROW><ROW><id>5083497</id><snippet>result = min((x['size'], x) for x in apple.values())[1]
</snippet></ROW><ROW><id>5083497</id><snippet>result = min(apple.keys(), key=lambda x:apples[x]['size'])
</snippet></ROW><ROW><id>5083497</id><snippet>result = min((apples[x]['size'], x) for x in apple.keys())[1]
</snippet></ROW><ROW><id>5083542</id><snippet>json_doesnt_work</snippet></ROW><ROW><id>5083542</id><snippet>print</snippet></ROW><ROW><id>5083542</id><snippet>self.request.body</snippet></ROW><ROW><id>5083542</id><snippet>Response header</snippet></ROW><ROW><id>5083542</id><snippet>{key:value}</snippet></ROW><ROW><id>5083542</id><snippet>{'status': '200', 'content-length': '0',
 'expires': 'Fri, 01 Jan 1990 00:00:00 GMT',
 'server': 'Development/1.0',
 'cache-control': 'no-cache',
 'date': 'Tue, 22 Feb 2011 21:54:15 GMT',
 '{"sux"': '"test"}', &lt;=== HERE!
 'content-type': 'text/html; charset=utf-8'
}
</snippet></ROW><ROW><id>5083542</id><snippet>class MessageSync(webapp.RequestHandler):
def post(self):
    print ''
    print self.request.body 
</snippet></ROW><ROW><id>5083542</id><snippet>class MessageSync(webapp.RequestHandler):
def post(self):
    self.response.headers['Content-Type'] = "text/plain"
    self.response.out.write(self.request.body)
</snippet></ROW><ROW><id>5083580</id><snippet>SendKeys</snippet></ROW><ROW><id>5083580</id><snippet>SendKeys</snippet></ROW><ROW><id>5083580</id><snippet>SendKeys</snippet></ROW><ROW><id>5083580</id><snippet>Post</snippet></ROW><ROW><id>5083580</id><snippet>Send</snippet></ROW><ROW><id>5083580</id><snippet>WPARAM</snippet></ROW><ROW><id>5083580</id><snippet>def send_input_hax(hwnd, msg):
    for c in msg:
        if c == "\n":
            win32api.SendMessage(hwnd, win32con.WM_KEYDOWN, win32con.VK_RETURN, 0)
            win32api.SendMessage(hwnd, win32con.WM_KEYUP, win32con.VK_RETURN, 0)
        else:
            win32api.SendMessage(hwnd, win32con.WM_CHAR, ord(c), 0)
</snippet></ROW><ROW><id>5084126</id><snippet>&gt;&gt;&gt; num_str = '5,4,2,4,1,0,3,0,5,1,3,3,14,32,3,5'
&gt;&gt;&gt; zip(*[iter(num_str.split(","))]*2)
[('5', '4'), ('2', '4'), ('1', '0'), ('3', '0'), ('5', '1'), 
('3', '3'), ('14', '32'), ('3', '5')]
</snippet></ROW><ROW><id>5084126</id><snippet>&gt;&gt;&gt; zip(*[iter(num_str.split(","))]*4)
[('5', '4', '2', '4'), ('1', '0', '3', '0'), ('5', '1', '3', '3'), 
('14', '32', '3', '5')]
</snippet></ROW><ROW><id>5084126</id><snippet>&gt;&gt;&gt; [list(t) for t in zip(*[iter(num_str.split(","))]*4)]
[['5', '4', '2', '4'], ['1', '0', '3', '0'], ['5', '1', '3', '3'], 
['14', '32', '3', '5']]
&gt;&gt;&gt; [list(t) for t in zip(*[iter(num_str.split(","))]*2)]
[['5', '4'], ['2', '4'], ['1', '0'], ['3', '0'], ['5', '1'], ['3', '3'], 
['14', '32'], ['3', '5']]
</snippet></ROW><ROW><id>5084126</id><snippet>num_str</snippet></ROW><ROW><id>5084126</id><snippet>&gt;&gt;&gt; l=num_str.split(',')
&gt;&gt;&gt; [l[i:i+2] for i in range(0,len(l),2)]
[['5', '4'], ['2', '4'], ['1', '0'], ['3', '0'], ['5', '1'], 
['3', '3'], ['14', '32'], ['3', '5']]
&gt;&gt;&gt; [l[i:i+7] for i in range(0,len(l),7)]
[['5', '4', '2', '4', '1', '0', '3'], ['0', '5', '1', '3', '3', '14', '32'], 
['3', '5']]
</snippet></ROW><ROW><id>5084126</id><snippet>&gt;&gt;&gt; nums=[int(x) for x in num_str.split(",")]
&gt;&gt;&gt; zip(*[iter(nums)]*2)
# etc etc etc
</snippet></ROW><ROW><id>5084126</id><snippet>[ ]</snippet></ROW><ROW><id>5084126</id><snippet>( )</snippet></ROW><ROW><id>5084126</id><snippet> &gt;&gt;&gt; nums=(int(x) for x in num_str.split(","))
 &gt;&gt;&gt; zip(nums,nums)
 [(5, 4), (2, 4), (1, 0), (3, 0), (5, 1), (3, 3), (14, 32), (3, 5)]
 # or map(list,zip(nums,nums)) for the list of lists version...
</snippet></ROW><ROW><id>5084192</id><snippet>122</snippet></ROW><ROW><id>5084690</id><snippet>band = (lambda x,y: x and y)
bor = (lambda x,y: x or y)
</snippet></ROW><ROW><id>5084690</id><snippet>and</snippet></ROW><ROW><id>5084690</id><snippet>or</snippet></ROW><ROW><id>5084690</id><snippet>if variable or long_fonction_to_execute():
    # do stuff
</snippet></ROW><ROW><id>5084690</id><snippet>variable</snippet></ROW><ROW><id>5084690</id><snippet>True</snippet></ROW><ROW><id>5084690</id><snippet>long_fonction_to_execute</snippet></ROW><ROW><id>5084690</id><snippet>or</snippet></ROW><ROW><id>5084690</id><snippet>True</snippet></ROW><ROW><id>5084690</id><snippet>if bor(variable, long_fonction_to_execute()):
    # do stuff
</snippet></ROW><ROW><id>5084690</id><snippet>long_fonction_to_execute</snippet></ROW><ROW><id>5084813</id><snippet>for x in sorted(d, key=lambda x:d[x][2]):
    print x
</snippet></ROW><ROW><id>5084813</id><snippet>HELLO
FOUR
</snippet></ROW><ROW><id>5084863</id><snippet>WS_MINIMIZEBOX</snippet></ROW><ROW><id>5084863</id><snippet>WS_MAXIMIZEBOX</snippet></ROW><ROW><id>5085118</id><snippet>objectify.deannotate(root, xsi_nil=True)
etree.cleanup_namespaces(root)
</snippet></ROW><ROW><id>5085137</id><snippet># assume that your data rows are tuples
template = "{0:8}|{1:10}|{2:15}|{3:7}|{4:10}" # column widths: 8, 10, 15, 7, 10
print template.format("CLASSID", "DEPT", "COURSE NUMBER", "AREA", "TITLE") # header
for rec in your_data_source: 
  print template.format(*rec)
</snippet></ROW><ROW><id>5085137</id><snippet># assume that your data rows are dicts
template = "{CLASSID:8}|{DEPT:10}|{C_NUM:15}|{AREA:7}|{TITLE:10}" # same, but named
print template.format( # header
  CLASSID="CLASSID", DEPT="DEPT", C_NUM="COURSE NUMBER", 
  AREA="AREA", TITLE="TITLE"
) 
for rec in your_data_source: 
  print template.format(**rec)
</snippet></ROW><ROW><id>5085148</id><snippet>text = Z + " " + title
draw.text ( (20,20), text, font=arial16, fill="white")
</snippet></ROW><ROW><id>5085148</id><snippet>im.save(S)
im.show(S)
</snippet></ROW><ROW><id>5085406</id><snippet>datetime.datetime</snippet></ROW><ROW><id>5085406</id><snippet>In [23]: import datetime as dt
</snippet></ROW><ROW><id>5085406</id><snippet>fromtimestamp</snippet></ROW><ROW><id>5085406</id><snippet>datetime.datetime</snippet></ROW><ROW><id>5085406</id><snippet>In [24]: dt.datetime.fromtimestamp(0)
Out[25]: datetime.datetime(1969, 12, 31, 19, 0)
</snippet></ROW><ROW><id>5085406</id><snippet>utcfromtimestamp</snippet></ROW><ROW><id>5085406</id><snippet>datetime.datetime</snippet></ROW><ROW><id>5085406</id><snippet>In [26]: dt.datetime.utcfromtimestamp(0)
Out[26]: datetime.datetime(1970, 1, 1, 0, 0)
</snippet></ROW><ROW><id>5085428</id><snippet>import struct
s = struct.pack('S5if',"Hello",42,3.1415)
print s
print struct.unpack('5sif')
</snippet></ROW><ROW><id>5085428</id><snippet>import struct, binascii
s = binascii.b2a_hex(struct.pack('S5if',"Hello",42,3.1415))
print s
print struct.unpack('5sif',binascii.a2b_hex(s))
</snippet></ROW><ROW><id>5085909</id><snippet>{% for form in formset.form %}
</snippet></ROW><ROW><id>5085994</id><snippet>timeit</snippet></ROW><ROW><id>5085994</id><snippet>a += 'x'</snippet></ROW><ROW><id>5085994</id><snippet>a</snippet></ROW><ROW><id>5085994</id><snippet>1L</snippet></ROW><ROW><id>5086135</id><snippet>root.__path__</snippet></ROW><ROW><id>5086135</id><snippet>root</snippet></ROW><ROW><id>5086135</id><snippet>load_module()</snippet></ROW><ROW><id>5086135</id><snippet>1</snippet></ROW><ROW><id>5086135</id><snippet>5</snippet></ROW><ROW><id>5086135</id><snippet>imp.find_module()</snippet></ROW><ROW><id>5086135</id><snippet>imp.load_module()</snippet></ROW><ROW><id>5086135</id><snippet>imp.load_module()</snippet></ROW><ROW><id>5086135</id><snippet># demo is a package in the current directory for this example
&gt;&gt;&gt; info = imp.find_module('demo')
&gt;&gt;&gt; info
(None, 'demo', ('', '', 5))
&gt;&gt;&gt; demo = imp.load_module('demo', *info)
&gt;&gt;&gt; demo.__path__
['demo']
</snippet></ROW><ROW><id>5086405</id><snippet>from collections import defaultdict

OUTF = "{0}.txt".format

def sortWords(wordList):
    d = defaultdict(list)
    for word in wordList:
        d[len(word)].append(word)
    return d

def readWords(fname):
    with open(fname) as inf:
        return [word for word in (line.strip() for line in inf.readlines()) if word]

def writeWords(fname, wordList):
    wordList.sort()
    with open(fname, 'w') as outf:
        outf.write('\n'.join(wordList))

def main():
    for wordLen,wordList in sortWords(readWords('words.txt')).iteritems():
        writeWords(OUTF(wordLen), wordList)

if __name__=="__main__":
    main()
</snippet></ROW><ROW><id>5086485</id><snippet>import timeit

setup = """
A = 1
B = 2

def foo(num1, num2):
    pass

def mainprog():
    global A,B
    for i in range(20):
        # do something to A and B
        foo(A, B)
"""

t = timeit.Timer(stmt="mainprog()" setup=setup)
print(t.timeit(5))
</snippet></ROW><ROW><id>5086576</id><snippet>heapq</snippet></ROW><ROW><id>5086594</id><snippet>logging.getLogger('foo').addHandler(...)</snippet></ROW><ROW><id>5086594</id><snippet>setUp</snippet></ROW><ROW><id>5086594</id><snippet>tearDown</snippet></ROW><ROW><id>5086594</id><snippet>import logging
import logging.handlers

class AssertingHandler(logging.handlers.BufferingHandler):

    def __init__(self,capacity):
        logging.handlers.BufferingHandler.__init__(self,capacity)

    def assert_logged(self,test_case,msg):
        for record in self.buffer:
            s = self.format(record)
            if s == msg:
                return
        test_case.assertTrue(False, "Failed to find log message: " + msg)


def cook_eggs():
    logging.warn("eggs are ready!")


import unittest

class TestLogging(unittest.TestCase):

    def test(self):
        asserting_handler = AssertingHandler(10)
        logging.getLogger().addHandler(asserting_handler)
        cook_eggs() 
        asserting_handler.assert_logged(self,"eggs are ready!")
        logging.getLogger().removeHandler(asserting_handler)


unittest.main()
</snippet></ROW><ROW><id>5086600</id><snippet>data[testedoffset:]</snippet></ROW><ROW><id>5086600</id><snippet>footers</snippet></ROW><ROW><id>5086600</id><snippet>__getitem__</snippet></ROW><ROW><id>5086600</id><snippet>map + reduce + operator.or_</snippet></ROW><ROW><id>5086600</id><snippet>y = 'whatever'
if any(x[0] == y for x in data[offset:]):
    print "yep, it's in there"
</snippet></ROW><ROW><id>5086837</id><snippet>import csv

def main():
    infname  = 'contacts.csv'
    outfname = 'per_contact.csv'

    with open(infname) as inf, open(outfname, 'w') as outf:
        inCsv  = csv.reader(inf)
        outCsv = csv.writer(outf)

        inCsv.next()  # skip header row
        outCsv.writerow(['ID', 'Company', 'ContactFirst', 'ContactLast', 'Title', 'Email'])

        for row in inCsv:
            id_co = row[:2]
            for contact in (row[i:i+4] for i in range(2, len(row), 4)):
                if any(c.strip() for c in contact):  # at least one cell contains data?
                    outCsv.writerow(id_co+contact)

if __name__=="__main__":
    main()
</snippet></ROW><ROW><id>5086963</id><snippet>print(foo)</snippet></ROW><ROW><id>5086963</id><snippet>foo</snippet></ROW><ROW><id>5086963</id><snippet>__str__</snippet></ROW><ROW><id>5086963</id><snippet>__str__</snippet></ROW><ROW><id>5086963</id><snippet>foo</snippet></ROW><ROW><id>5086963</id><snippet>Foo</snippet></ROW><ROW><id>5086963</id><snippet>print(Foo)</snippet></ROW><ROW><id>5086963</id><snippet>Foo</snippet></ROW><ROW><id>5086963</id><snippet>__str__</snippet></ROW><ROW><id>5086963</id><snippet>__str__</snippet></ROW><ROW><id>5086963</id><snippet>Foo</snippet></ROW><ROW><id>5086963</id><snippet>type</snippet></ROW><ROW><id>5086963</id><snippet>class FooType(type):
    def __str__(cls):
        return 'Me a Foo'
    def __repr__(cls):
        return '&lt;Foo&gt;'

class Foo(object):
    __metaclass__=FooType
    def __str__(self):
        return "instance of class Foo"

print(Foo)
# Me a Foo

print(repr(Foo))
# &lt;Foo&gt;
</snippet></ROW><ROW><id>5087004</id><snippet>def employeeProfile(request):
    profile = EmployeeDetails.objects.all()
    return render_to_response('employeeProfile.html',{'emp_profile':emp_profile})
</snippet></ROW><ROW><id>5087004</id><snippet>profile</snippet></ROW><ROW><id>5087004</id><snippet>emp_profile</snippet></ROW><ROW><id>5087071</id><snippet>bbfreeze</snippet></ROW><ROW><id>5087119</id><snippet>try</snippet></ROW><ROW><id>5087119</id><snippet>except</snippet></ROW><ROW><id>5087168</id><snippet>get</snippet></ROW><ROW><id>5087168</id><snippet>found_ips = Tag2Node.objects.filter( tag__name=include ).values('ip').distinct()
# values returns a dictionary
q = Q( ip__exact=found_ips[0]['ip'] ) 
nodes = Node.objects.get( q )
</snippet></ROW><ROW><id>5087293</id><snippet>V_x[0] = V_x[-1] = abs(v0)*10**4</snippet></ROW><ROW><id>5087293</id><snippet>h-bar^2/2/m/delta_x^2</snippet></ROW><ROW><id>5087327</id><snippet>g.write(str(x**2) + "\n")
g.close()
</snippet></ROW><ROW><id>5087327</id><snippet>f</snippet></ROW><ROW><id>5087327</id><snippet>f</snippet></ROW><ROW><id>5087327</id><snippet>write()</snippet></ROW><ROW><id>5087327</id><snippet>SIGPIPE</snippet></ROW><ROW><id>5087327</id><snippet>f.close()</snippet></ROW><ROW><id>5087327</id><snippet>g.write(...)</snippet></ROW><ROW><id>5087695</id><snippet>stdin</snippet></ROW><ROW><id>5087695</id><snippet>decode()</snippet></ROW><ROW><id>5087695</id><snippet>&gt;&gt;&gt; import subprocess
&gt;&gt;&gt; cmdline = ["cmd", "/q", "/k", "echo off"]
&gt;&gt;&gt; cmd = subprocess.Popen(cmdline, stdin=subprocess.PIPE, stdout=subprocess.PIPE)
&gt;&gt;&gt; batch = b"""\
... set TEST_VAR=Hello World
... set TEST_VAR
... echo %TEST_VAR%
... exit
... """
&gt;&gt;&gt; cmd.stdin.write(batch)
59
&gt;&gt;&gt; cmd.stdin.flush() # Must include this to ensure data is passed to child process
&gt;&gt;&gt; result = cmd.stdout.read()
&gt;&gt;&gt; print(result.decode())
TEST_VAR=Hello World
Hello World
</snippet></ROW><ROW><id>5087695</id><snippet>subprocess.call</snippet></ROW><ROW><id>5087695</id><snippet>&gt;&gt;&gt; subprocess.call(["set", "TEST_VAR=Hello World"], shell=True)
0
&gt;&gt;&gt; subprocess.call(["set", "TEST_VAR"], shell=True)
Environment variable TEST_VAR not defined
1
&gt;&gt;&gt; subprocess.call(["echo", "%TEST_VAR%"], shell=True)
%TEST_VAR%
0
</snippet></ROW><ROW><id>5087867</id><snippet>&lt;Loop&gt;</snippet></ROW><ROW><id>5087867</id><snippet>&lt;/Loop&gt;</snippet></ROW><ROW><id>5087867</id><snippet>class Point(object):
    x, y: Integer
class Rectangle(object):
"""Assuming that the orientation doesn't matter, length&gt;=width"""
    length, width: Integer
class Edge(object):
    from, to: Point
    length: Integer
class Pile_Of_Rectangles(object):
    edges: list of Edges #clockwise
    def add_rectangle(r):
        search longest edge "e1"
        search the longer of the two adjacent edges "e2"
        attach r with its longer side to "e1" at the end, where it adjoins to "e2":
            adjust "e1" so that e1.length = e1.length - r.length
            insert the new edges with length r.width, r.length and r.width into self.edges
            connect the last edge with "e2"
</snippet></ROW><ROW><id>5087977</id><snippet>somedict = { "item"     : [ x[0] for x in data ],
             "settings" : { "axisx" : [ x[1] for x in data ],
                            "axisy" : [ 0, 100],
                            "colour" : "ff9900" }
           }
</snippet></ROW><ROW><id>5087977</id><snippet>print json.dumps(somedict)
</snippet></ROW><ROW><id>5087978</id><snippet>xrandr</snippet></ROW><ROW><id>5087978</id><snippet>$ xrandr -q
...
VGA-0 connected 1280x1024+0+26 ...
   ...
LVDS connected 1400x1050+1280+0 ...
   ...
DVI-0 disconnected ...
</snippet></ROW><ROW><id>5088126</id><snippet> s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
</snippet></ROW><ROW><id>5088126</id><snippet>AF_INET</snippet></ROW><ROW><id>5088126</id><snippet>AF_UNIX</snippet></ROW><ROW><id>5088610</id><snippet># self.FW.En is an entry widget.
self.FW.En.bind('&lt;KeyRelease&gt;', self.find)
</snippet></ROW><ROW><id>5088610</id><snippet>def find (self, event):

        self.Te.tag_remove('found', '1.0', 'end')
        pat = self.FW.En.get()
        if len(pat) &gt; 1:
            index = '1.0'
            while True:
                index = self.Te.search(pat, index, nocase=1, stopindex='end')
                if not index:
                    break
                lastidex = '%s+%dc' % (index, len(pat))
                self.Te.tag_add('found', index, lastidex)
                index = lastidex

            self.Te.tag_config('found', background='#80ff00')
</snippet></ROW><ROW><id>5088728</id><snippet>data = [1,2,-3,-143, ...]
binData = ''.join(map(lambda x: chr(x % 256), data))
</snippet></ROW><ROW><id>5088728</id><snippet>binData = ''.join(map(lambda x: chr(x % 256), attach.attcoll))
    sql_stmt = """INSERT INTO attachments (attno,filename,fileextension,projNo,procNo,wpattachment) \
    VALUES ('%s','%s','%s','%s','%s','%s') ON DUPLICATE KEY UPDATE filename='%s',fileextension='%s'""" % (attach.attno,\
    attach.filename,attach.fileextension,attach.projNo,attach.procNo,binData,attach.filename,attach.fileextension)

    try:
        cursor.execute(sql_stmt)
        conn.commit()
        cursor.close()
        conn.close()
        return 'SUCCESS'
    except MySQLdb.Error:
        cursor.close()
        conn.close()
        print "My SQL cursor execute error."
        return 'FAILURE'
</snippet></ROW><ROW><id>5088750</id><snippet>__getattr__</snippet></ROW><ROW><id>5088750</id><snippet>class Foo(object):
    def __init__(self):
        self.readonly = set()

    def set_readonly(self, attr, value):
        setattr(self, attr, value)
        self.readonly.add(attr)

    def __setattr__(self, attr, value):
        if hasattr(self, "readonly") and attr in self.readonly:
            raise AttributeError("Read only attribute: %s" % (attr,))
        object.__setattr__(self, attr, value)
</snippet></ROW><ROW><id>5088750</id><snippet>&gt;&gt;&gt; f = Foo()
&gt;&gt;&gt; f.x = 5
&gt;&gt;&gt; f.set_readonly("y", 9)
&gt;&gt;&gt; f.x, f.y
(5, 9)
&gt;&gt;&gt; f.x = 7
&gt;&gt;&gt; f.y = 1
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
  File "ro.py", line 13, in __setattr__
    raise AttributeError("Read only attribute: %s" % (name,))
AttributeError: Read only attribute: y
</snippet></ROW><ROW><id>5088750</id><snippet>    def unset_readonly(self, attr):
        self.readonly.remove(attr)
</snippet></ROW><ROW><id>5088750</id><snippet>self.__readonly</snippet></ROW><ROW><id>5088750</id><snippet>self.readonly</snippet></ROW><ROW><id>5088750</id><snippet>__readonly</snippet></ROW><ROW><id>5088750</id><snippet>hasattr(self, "_Foo__readonly")</snippet></ROW><ROW><id>5088857</id><snippet>How do I create a non-ascii dendrogram with Python?</snippet></ROW><ROW><id>5089070</id><snippet>pat = re.compile('\\\\##### To extract from here ####'
                 '.*?'
                 '(?=\\\\##### To extract till here ####)',
                 re.DOTALL)
</snippet></ROW><ROW><id>5089070</id><snippet>pat = re.compile(r'\\##### To extract from here ####'
                 '.*?'
                 r'(?=\\##### To extract till here ####)',
                 re.DOTALL)
</snippet></ROW><ROW><id>5089131</id><snippet>WSGIScriptAlias /myapp my_path_to_wsgi_module/django.wsgi
</snippet></ROW><ROW><id>5089131</id><snippet>'/api/dir'</snippet></ROW><ROW><id>5089131</id><snippet>'api/dir'</snippet></ROW><ROW><id>5089131</id><snippet>(r'^api/dir$', 'available_services')</snippet></ROW><ROW><id>5089131</id><snippet>(r'^/api/dir$', 'available_services')</snippet></ROW><ROW><id>5089346</id><snippet>i = variable
if i != 'literal':
    whatever
</snippet></ROW><ROW><id>5089688</id><snippet>[... minragged:@"Just testing to see how this works." lineCount:3]</snippet></ROW><ROW><id>5089688</id><snippet>@interface NSMutableArray (reverse)
/* Could also return self, but this makes it explicit that array is reversed in-place
   rather than returning a reversed copy.
 */
-(void)reverse;
@end

@implementation NSMutableArray (reverse)
-(void)reverse {
    int i,j;
    for (i=0,j=[self count]-1; i&lt;j; ++i,--j) {
        [self exchangeObjectAtIndex:i withObjectAtIndex:j];
    }
}
@end




-(NSArray*)minragged:(NSString*)text lineCount:(int)n {
    int width = 0;
    NSArray *words = [text componentsSeparatedByCharactersInSet:[NSCharacterSet whitespaceAndNewlineCharacterSet]];
    NSMutableArray *cumWordWidth = [NSMutableArray arrayWithObject:[NSNumber numberWithInt:width]];
    for (NSString *word in words) {
        width += [word length];
        [cumWordWidth addObject:[NSNumber numberWithInt:width]];
    }
    int totalWidth = width + [words count] - 1,
        lineWidth = (double)(totalWidth - (n - 1)) / (double)(n),
        actualLineWidth,
        i, j, k, min_k;
    double cost, min_cost;

    // best[i][k][0] is the min total cost for words 0, ..., k - 1 on i lines
    // best[i][k][1] is a minimizing index for the start of the last line
    NSMutableArray *best = [NSMutableArray arrayWithCapacity:n],
                   *best_i_prev = [NSMutableArray arrayWithCapacity:([words count]+1)],
                   *best_i;

    [best_i_prev addObject:[NSArray arrayWithObjects:[NSNumber numberWithDouble:0.0],[NSNull null],nil]];
    for (i=0; i &lt; [words count]; ++i) {
        [best_i_prev addObject:[NSArray arrayWithObjects:(NSNumber*)kCFNumberPositiveInfinity,[NSNull null],nil]];
    }
    [best addObject:best_i_prev];

    for (i=1; i &lt;= n; ++i) {
        best_i=[NSMutableArray arrayWithCapacity:[words count]];
        for (j=0; j &lt;= [words count]; ++j) {
            min_k=0;
            min_cost = [(NSNumber*)kCFNumberPositiveInfinity doubleValue];
            for (k=0; k &lt; j; ++k) {
                actualLineWidth = j - k - 1;
                if (actualLineWidth &lt; 0) {
                    actualLineWidth = 0;
                }
                actualLineWidth += [[cumWordWidth objectAtIndex:j] intValue]
                                   - [[cumWordWidth objectAtIndex:k] intValue];
                cost = (lineWidth - (double)(actualLineWidth));
                cost *= cost;
                cost += [[[best_i_prev objectAtIndex:k] objectAtIndex:0] doubleValue];
                if (cost &lt; min_cost) {
                    min_cost = cost;
                    min_k = k;
                }
            }
            [best_i addObject:[NSArray arrayWithObjects:[NSNumber numberWithDouble:min_cost], 
                                                        [NSNumber numberWithInt:min_k],
                                                        nil]];
        }
        [best addObject:best_i];
        best_i_prev = best_i;
    }

    NSMutableArray *lines = [NSMutableArray arrayWithCapacity:n];
    NSRange range;
    int end;
    end = [words count];
    for (i=n; i &gt; 0; --i) {
        range.location = [[[[best objectAtIndex:i] objectAtIndex:end] objectAtIndex:1] intValue];
        range.length = end-range.location;
        [lines addObject:[[words subarrayWithRange:range] componentsJoinedByString:@" "]];
        end = range.location;
    }
    [lines reverse];
    return lines;
}
</snippet></ROW><ROW><id>5089688</id><snippet>-minragged:lineCount:</snippet></ROW><ROW><id>5089688</id><snippet>lines</snippet></ROW><ROW><id>5089698</id><snippet>parent</snippet></ROW><ROW><id>5089698</id><snippet>parent</snippet></ROW><ROW><id>5089698</id><snippet>parent</snippet></ROW><ROW><id>5089707</id><snippet>&gt;&gt;&gt; from lxml import etree
&gt;&gt;&gt; f = etree.fromstring('&lt;document&gt;&lt;/document&gt;')
&gt;&gt;&gt; ele = etree.Element('br')   # the element to be inserted
&gt;&gt;&gt; f.insert(0, ele)
&gt;&gt;&gt; print etree.tostring(f, pretty_print=True)
&lt;document&gt;
  &lt;br/&gt;
&lt;/document&gt;
</snippet></ROW><ROW><id>5089801</id><snippet>&gt;&gt;&gt; name = raw_input('Enter your name: ')
Enter your name: foo_bar
&gt;&gt;&gt; name.isalnum()
False
&gt;&gt;&gt; name = raw_input('Enter your name: ')
Enter your name: foobar
&gt;&gt;&gt; name.isalnum()
True
</snippet></ROW><ROW><id>5089954</id><snippet>For a project’s tests to be compatible with test discovery they must all be importable from the top level directory of the project (in other words, they must all be in Python packages).</snippet></ROW><ROW><id>5089954</id><snippet>test-report.py</snippet></ROW><ROW><id>5089954</id><snippet>test-report</snippet></ROW><ROW><id>5089954</id><snippet>-p</snippet></ROW><ROW><id>5089963</id><snippet>BaseHTTPServer</snippet></ROW><ROW><id>5089963</id><snippet># hello.py
from flask import Flask, request
import socket

app = Flask(__name__)

@app.route('/')
def hello():
    return 'Hello, world! running on %s' % request.host

if __name__ == '__main__':
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    sock.bind(('localhost', 0))
    port = sock.getsockname()[1]
    sock.close()
    app.run(port=port)
</snippet></ROW><ROW><id>5089963</id><snippet>$ python hello.py 
* Running on http://127.0.0.1:34447/
</snippet></ROW><ROW><id>5090109</id><snippet>/</snippet></ROW><ROW><id>5090109</id><snippet>home/tsudot/Pictures/zombie.jpg</snippet></ROW><ROW><id>5090109</id><snippet>os.path.exists(filename)</snippet></ROW><ROW><id>5090236</id><snippet>"cppcode.pxd"</snippet></ROW><ROW><id>5090236</id><snippet>cdef extern from "cppcode.hpp":
     int init(char *address, int port, bint en_msg, int error)
     int init(char *address, int port, bint en_msg)
     int init(char *address, int port)
     int init(char *address)
     int init()
</snippet></ROW><ROW><id>5090236</id><snippet>"cppcode.hpp"</snippet></ROW><ROW><id>5090236</id><snippet>int init(const char *address=0, int port=0, bool en_msg=false, int error=0);
</snippet></ROW><ROW><id>5090236</id><snippet>"pycode.pyx"</snippet></ROW><ROW><id>5090236</id><snippet>cimport cppcode

def init(address=None,port=None,en_msg=None,error=None):
    if error is not None:
        return cppcode.init(address, port, en_msg, error)
    elif en_msg is not None:
         return cppcode.init(address, port, en_msg)
    elif port is not None:
         return cppcode.init(address, port)
    elif address is not None:
         return cppcode.init(address)
    return cppcode.init()
</snippet></ROW><ROW><id>5090236</id><snippet>"test_pycode.py"</snippet></ROW><ROW><id>5090236</id><snippet>import pycode

pycode.init("address")
</snippet></ROW><ROW><id>5090236</id><snippet>address 0 false 0
</snippet></ROW><ROW><id>5090236</id><snippet>arg=*</snippet></ROW><ROW><id>5090236</id><snippet>*.pxd</snippet></ROW><ROW><id>5090236</id><snippet>cdef foo(x=*)
</snippet></ROW><ROW><id>5090519</id><snippet>glob.iglob(pathname)
Return an iterator which yields the same values as glob() without
actually storing them all simultaneously.
</snippet></ROW><ROW><id>5090519</id><snippet>import glob
for eachfile in glob.iglob('*'):
    # act upon eachfile
</snippet></ROW><ROW><id>5090599</id><snippet>del fig</snippet></ROW><ROW><id>5090599</id><snippet>def plotSomething(x,y):
    fig = plt.figure()
    ax = fig.add_subplot(111)
    ax.set_xscale("log", nonposx='clip')
    ax.set_yscale("log", nonposy='clip')
    ax.scatter(x,y)   
    fig.savefig('test.png')
</snippet></ROW><ROW><id>5090599</id><snippet>def plotSomething(x,y):
    fig = plt.figure()
    ax = fig.add_subplot(111)
    ax.set_xscale("log", nonposx='clip')
    ax.set_yscale("log", nonposy='clip')
    ax.scatter(x,y)   
    return fig
</snippet></ROW></DATA>