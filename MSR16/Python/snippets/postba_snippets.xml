<?xml version="1.0" encoding="UTF-8" standalone="no"?><DATA><ROW><id>6468180</id><snippet>import glob

def avg(lst):
    return float(sum(lst))/len(lst)

all_numbers = []
for filename in glob.glob("100107_902988_6188DAAXX_s_*.sorted"):
    numbers = []
    with open(filename, "r") as file:
        for line in file:
            numbers.append(int(line.split()[7]))
    print "{0}: {1:.2f}".format(filename, avg(numbers))
    all_numbers.extend(numbers)
print "Total average: {0:.2f}".format(avg(all_numbers))
</snippet></ROW><ROW><id>6468393</id><snippet>d</snippet></ROW><ROW><id>6468393</id><snippet>split()</snippet></ROW><ROW><id>6468393</id><snippet>new_d = {}
for k, v in d.items():
   u, n, r = k.split('_')
   new_d[(n, r)] = v + new_d.get((n, r), 0)
</snippet></ROW><ROW><id>6469156</id><snippet>str.isdigit()
</snippet></ROW><ROW><id>6469156</id><snippet>if station.isdigit():
   print 'Thank you for checking into station: ', station
else:
   # show your error information here
   pass
</snippet></ROW><ROW><id>6469381</id><snippet>Where is the mouse?</snippet></ROW><ROW><id>6469381</id><snippet>main</snippet></ROW><ROW><id>6469381</id><snippet>from livewires import games
</snippet></ROW><ROW><id>6469381</id><snippet>games.init(screen_width = 640, screen_height = 480, fps = 50)
</snippet></ROW><ROW><id>6469381</id><snippet>class Pan(games.Sprite):
    """ A pan controlled by the mouse. """
    def update(self):
        """ Move to mouse coordinates. """
        self.x = games.mouse.x
        self.y = games.mouse.y
</snippet></ROW><ROW><id>6469381</id><snippet>def main():
    wall_image = games.load_image("wall.jpg", transparent = False)
    games.screen.background = wall_image
</snippet></ROW><ROW><id>6469381</id><snippet>    pan_image = games.load_image("pan.bmp")
    the_pan = Pan(image = pan_image,
                  x = games.mouse.x,
                  y = games.mouse.y)
    games.screen.add(the_pan)
</snippet></ROW><ROW><id>6469381</id><snippet>    games.mouse.is_visible = False
    games.screen.event_grab = True
</snippet></ROW><ROW><id>6469381</id><snippet>Run me</snippet></ROW><ROW><id>6469381</id><snippet>( function</snippet></ROW><ROW><id>6469381</id><snippet>main</snippet></ROW><ROW><id>6469381</id><snippet>)</snippet></ROW><ROW><id>6469381</id><snippet>over and over!</snippet></ROW><ROW><id>6469381</id><snippet>    games.screen.mainloop()
</snippet></ROW><ROW><id>6469381</id><snippet>main()
</snippet></ROW><ROW><id>6469381</id><snippet>from livewires import games,color
games.init (screen_width = 640, screen_height = 480, fps = 50)

class Pan (games.Sprite):
    def moved (self):
        self.x = games.mouse.x
        self.y = games.mouse.y
</snippet></ROW><ROW><id>6469381</id><snippet>myscr = games.screen
myscr.set_background (games.load_image ("wall.jpg", transparent = False))
pan_image = games.load_image ("pan.bmp")
le_pan = Pan (image = pan_image,
              x = games.mouse.x,
              y = games.mouse.y)
myscr.add(le_pan)
</snippet></ROW><ROW><id>6469381</id><snippet>games.mouse.is_visible = False
myscr.event_grab = True
</snippet></ROW><ROW><id>6469381</id><snippet>Run me</snippet></ROW><ROW><id>6469381</id><snippet>( function</snippet></ROW><ROW><id>6469381</id><snippet>undefined</snippet></ROW><ROW><id>6469381</id><snippet>)</snippet></ROW><ROW><id>6469381</id><snippet>over and over!</snippet></ROW><ROW><id>6469381</id><snippet>myscr.mainloop()
</snippet></ROW><ROW><id>6469381</id><snippet>mainloop</snippet></ROW><ROW><id>6469789</id><snippet>from Tkinter import *

master = Tk()

var = BooleanVar()

def cb():
    print "variable is {0}".format(var.get())

c = Checkbutton(master, text="Press me", variable=var, command=cb)
c.pack()

mainloop()
</snippet></ROW><ROW><id>6469821</id><snippet>def is_most_current(table_name, id):
    db = MySQLdb.connect(passwd="moonpie",db="thangs")
    c=db.cursor()
    c.execute("SELECT last_updated from %s where id = %s", (table_name, id))
    return c.fetchone()
</snippet></ROW><ROW><id>6470099</id><snippet>ctypes.c_void_p</snippet></ROW><ROW><id>6470099</id><snippet>c_void_p</snippet></ROW><ROW><id>6470099</id><snippet>strace -v -e mount python mymount.py
</snippet></ROW><ROW><id>6470099</id><snippet>strace -v -e mount ./mymount-c
</snippet></ROW><ROW><id>6470099</id><snippet>fd</snippet></ROW><ROW><id>6470099</id><snippet>file("/dev/fuse", 'w+')</snippet></ROW><ROW><id>6470099</id><snippet>file("/dev/fuse")</snippet></ROW><ROW><id>6470373</id><snippet>extras_require</snippet></ROW><ROW><id>6470373</id><snippet>setup(
  ...
  extras_require={
    'win32': 'pywin32'
  },
  ...
)
</snippet></ROW><ROW><id>6470373</id><snippet>easy_install mypackage[win32]
</snippet></ROW><ROW><id>6470373</id><snippet>pywin32</snippet></ROW><ROW><id>6470447</id><snippet>self.request</snippet></ROW><ROW><id>6470447</id><snippet>def log_request(fn):
    def decorated_get(self):
        logging.debug("request object:", self.request)
        return fn(self)
    return decorated_get

class MyHandler(webapp. RequestHandler):
    @log_request
    def get(self):
        self.response.out.write('hello world')
</snippet></ROW><ROW><id>6470447</id><snippet>import inspect

def class_printer(fn):
    cls = inspect.getouterframes(inspect.currentframe())[1][3]
    def decorated_fn(self, msg):
        fn(self,cls+" says: "+msg)
    return decorated_fn

class MyClass():
    @class_printer
    def say(self, msg):
        print msg
</snippet></ROW><ROW><id>6470447</id><snippet>msg</snippet></ROW><ROW><id>6470447</id><snippet>say</snippet></ROW><ROW><id>6470447</id><snippet>&gt;&gt;&gt; MyClass().say('hello')
MyClass says: hello
</snippet></ROW><ROW><id>6470452</id><snippet>except (IDontLIkeYouException, YouAreBeingMeanException) as e:
    pass
</snippet></ROW><ROW><id>6470452</id><snippet>as</snippet></ROW><ROW><id>6470945</id><snippet>def somedecorator(fn):
    import traceback
    print "decorating function:", fn
    print "function class:", fn.__class__
    print traceback.extract_stack()[-2][2]
    return fn
</snippet></ROW><ROW><id>6471552</id><snippet>import httplib
from urlparse import urlparse

def checkUrl(url):
    p = urlparse(url)
    conn = httplib.HTTPConnection(p.netloc)
    conn.request('HEAD', p.path)
    resp = conn.getresponse()
    return resp.status &lt; 400

if __name__ == '__main__':
    print checkUrl('http://www.stackoverflow.com') # True
    print checkUrl('http://stackoverflow.com/notarealpage.html') # False
</snippet></ROW><ROW><id>6472647</id><snippet>mechanize</snippet></ROW><ROW><id>6472647</id><snippet>logging</snippet></ROW><ROW><id>6472647</id><snippet>mechanize</snippet></ROW><ROW><id>6472647</id><snippet>import logging
logging.basicConfig(level=logging.DEBUG)
</snippet></ROW><ROW><id>6472647</id><snippet>DEBUG</snippet></ROW><ROW><id>6472647</id><snippet>logging.basicConfig(level=logging.CRITICAL)
</snippet></ROW><ROW><id>6472647</id><snippet>logging.disable(logging.DEBUG)
</snippet></ROW><ROW><id>6472718</id><snippet>self.connect(
    accept_button, QtCore.SIGNAL('clicked()'),
    lambda: self.updateGroupComments(str(view_textedit.toPlainText()))
)
</snippet></ROW><ROW><id>6472718</id><snippet>view_textedit</snippet></ROW><ROW><id>6472718</id><snippet>self.connect(
    accept_button, QtCore.SIGNAL('clicked()'), self.updateGroupComments
)
</snippet></ROW><ROW><id>6472718</id><snippet>updateGroupComments</snippet></ROW><ROW><id>6472718</id><snippet>self.view_textedit.toPlainText</snippet></ROW><ROW><id>6472718</id><snippet>def slot():
    self.updateGroupComments(str(view_textedit.toPlainText()))

self.connect(accept_button, QtCore.SIGNAL('clicked()'), slot)
</snippet></ROW><ROW><id>6472871</id><snippet>readline</snippet></ROW><ROW><id>6472871</id><snippet>with open("data.txt") as file:
    for line in file:
        # do stuff with line
</snippet></ROW><ROW><id>6472871</id><snippet>break</snippet></ROW><ROW><id>6472871</id><snippet>with open("data.txt") as file:
    for index, line in enumerate(file):
        if index == 2: # looking for third line (0-based indexes)
            # do stuff with this line
            break # no need to go on
</snippet></ROW><ROW><id>6473210</id><snippet>#forms.py
class TrainingAddForm(forms.ModelForm):
    class Meta:
        model = TrainingTasks
        fields = ('ac_reg','date','wo_no',)
        #not include the task

    def __init__(self, *args, **kwargs):
        super(TrainingAddForm, self).__init__(*args, **kwargs)
        self.fields['date'].widget = widgets.AdminDateWidget()

#views.py
from django.core.urlresolvers import reverse
from django.shortcuts import get_object_or_404, render
from your_app.forms import TrainingAddForm
from your_app.models import Task, TrainingTasks

def add_trainingtask(request, task_id):
    #make sure we have a valid Task object, or redirect.
    #you could also use a try/except Task.DoesNotExist and show an error
    task = get_object_or_404(Task, pk=task_id)

    form = TrainingAddForm(request.POST or None)
    if request.POST:
        if form.is_valid():                
            tt = TrainingTasks(
                trainee = request.user,
                task = task,
                date = form.cleaned_data['date'],
                ac_reg = form.cleaned_data['ac_reg'],
                wo_no = form.cleaned_data['wo_no'],
            )
            tt.save()
            #dont hard-code the url here
            return HttpResponseRedirect(reverse('admin_tot_tasks'))
    return render(request, 'admin/tot/trainingtasks/add.html', {'form': form,
        'task' : task})
</snippet></ROW><ROW><id>6473271</id><snippet>__init__.py</snippet></ROW><ROW><id>6473271</id><snippet>from sqlalchemy import scoped_session, sessionmaker
Session = scoped_session( sessionmaker() )
</snippet></ROW><ROW><id>6473271</id><snippet>session = Session()
someObject = session.query( someMappedClass ).get( someId )
# use session like normal ...
session.close()
</snippet></ROW><ROW><id>6473271</id><snippet>session = Session()
someObject = session.merge( someObject )
# more db stuff
session.close()
</snippet></ROW><ROW><id>6473271</id><snippet>pool_recycle</snippet></ROW><ROW><id>6473271</id><snippet>create_engine</snippet></ROW><ROW><id>6473271</id><snippet>pool_recycle</snippet></ROW><ROW><id>6473312</id><snippet>code = line.strip()</snippet></ROW><ROW><id>6473312</id><snippet> def getCode(i):
    with open('temp.txt', 'r') as f:
             for index, line in enumerate(f):
                     if index == i:
                             code = line.strip()
                             return code
</snippet></ROW><ROW><id>6473312</id><snippet>.strip()</snippet></ROW><ROW><id>6473312</id><snippet>&gt;&gt;&gt; def getCode(i):
...     with open('temp.txt') as f:
...             for index, line in enumerate(f):
...                     if index == i:
...                             code = line
...                             return code
 ... 
&gt;&gt;&gt; getCode(2)
"                  'LINGUISTIC AFFILIATION',\n"
</snippet></ROW><ROW><id>6473724</id><snippet>map(list, zip(*l))
--&gt; [[1, 4, 7], [2, 5, 8], [3, 6, 9]]
</snippet></ROW><ROW><id>6473834</id><snippet>out, err = p.communicate()
</snippet></ROW><ROW><id>6474046</id><snippet>tables</snippet></ROW><ROW><id>6474046</id><snippet>&gt;&gt;&gt; metadata.tables.keys()
['posts', 'comments', 'users']
</snippet></ROW><ROW><id>6474046</id><snippet>&gt;&gt;&gt; Base = sqlalchemy.ext.declarative.declarative_base()
&gt;&gt;&gt; Base.metadata
MetaData(None)
</snippet></ROW><ROW><id>6474046</id><snippet>&gt;&gt;&gt; metadata.reflect(engine)
</snippet></ROW><ROW><id>6474376</id><snippet>frozenset</snippet></ROW><ROW><id>6474376</id><snippet>&gt;&gt;&gt; listA = [ [1,20], [3,19], [37,11], [21,17] ]
&gt;&gt;&gt; listB = [ [1,20], [21,17] ]

&gt;&gt;&gt; setA = frozenset([frozenset(element) for element in listA])
&gt;&gt;&gt; setB = frozenset([frozenset(element) for element in listB])

&gt;&gt;&gt; setA
frozenset([frozenset([17, 21]), frozenset([1, 20]), frozenset([11, 37]), frozens
et([19, 3])])
&gt;&gt;&gt; setB
frozenset([frozenset([17, 21]), frozenset([1, 20])])

&gt;&gt;&gt; setB &lt;= setA
True
</snippet></ROW><ROW><id>6474552</id><snippet>(filepath)</snippet></ROW><ROW><id>6474552</id><snippet>(filepath,)</snippet></ROW><ROW><id>6474839</id><snippet>import socket

HOST = 'yourhost'    # The remote host
PORT = 101             # The same port as used by the server
s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
s.connect((HOST, PORT))
data = s.recv(1024)
s.close()
with open('yourfile','w') as f:
     f.write(data)
</snippet></ROW><ROW><id>6474900</id><snippet>&gt;&gt;&gt; # first, generate some fake data:
&gt;&gt;&gt; m, n = 5, 4            # rows &amp; cols, represents dimensions of original image
&gt;&gt;&gt; D = NP.random.randint(0, 10, m*n).reshape(m, n)
&gt;&gt;&gt; D
    array([[8, 2, 2, 1],
           [7, 5, 0, 9],
           [2, 2, 9, 3],
           [5, 7, 3, 0],
           [5, 8, 1, 7]])
</snippet></ROW><ROW><id>6474900</id><snippet>&gt;&gt;&gt; G = NP.zeros((m, n, r), dtype='uint')
</snippet></ROW><ROW><id>6474900</id><snippet>&gt;&gt;&gt; # placing the color pixel (209, 127, 87) at location 3,2:
&gt;&gt;&gt; G[3,2] = (209, 124, 87)
</snippet></ROW><ROW><id>6474900</id><snippet>&gt;&gt;&gt; G[:,:,0]      # red
&gt;&gt;&gt; array([[  0,   0,   0,   0,   0],
           [  0,   0,   0,   0,   0],
           [  0,   0,   0,   0,   0],
           [  0,   0, 209,   0,   0],
           [  0,   0,   0,   0,   0]], dtype=uint8)

&gt;&gt;&gt; G[:,:,1]    # green
&gt;&gt;&gt; array([[  0,   0,   0,   0,   0],
           [  0,   0,   0,   0,   0],
           [  0,   0,   0,   0,   0],
           [  0,   0, 124,   0,   0],
           [  0,   0,   0,   0,   0]], dtype=uint8)

&gt;&gt;&gt; G[:,:,2]   # blue
&gt;&gt;&gt; array([[ 0,  0,  0,  0,  0],
           [ 0,  0,  0,  0,  0],
           [ 0,  0,  0,  0,  0],
           [ 0,  0, 87,  0,  0],
           [ 0,  0,  0,  0,  0]], dtype=uint8)
</snippet></ROW><ROW><id>6474900</id><snippet>&gt;&gt;&gt; # create the Grid
&gt;&gt;&gt; G = NP.zeros((m, n, r), dtype='uint')
&gt;&gt;&gt; # now from the container that holds your rgb tuples, create *three* m x n arrays, 
&gt;&gt;&gt; # one for each item in your rgb tuples

&gt;&gt;&gt; # now just map the r values (1st itm in each rgb tuple) to the 3D grid
&gt;&gt;&gt; G[:,:,0] = r_vals
&gt;&gt;&gt; G[:,:,1] = g_vals
&gt;&gt;&gt; G[:,:,2] = b_vals

&gt;&gt;&gt; G.shape
    (5, 4, 3)
</snippet></ROW><ROW><id>6474919</id><snippet>root.bind("&lt;Up&gt;", app.moveIt)
</snippet></ROW><ROW><id>6475047</id><snippet>&gt;&gt;&gt; print json.dumps({u'key1':u'value', u'key2':u'value2'}, indent=4)
{
    "key2": "value2", 
    "key1": "value"
}
</snippet></ROW><ROW><id>6475101</id><snippet>class A:
    def __init__(self, filename, sources):
        self.recover()
        # gather info from file
        # info is updated during lifetime of the object

    def update_info(self, info):
        # append 'info' to recovery_log
        # recovery_log.flush()
        # write 'info' to file
        # file.flush()
        # append 'info-SUCCESS' to recover_log
        # recovery_log.flush()

    def recover(self):
        # open recovery_log
        # skip to last 'info-SUCCESS'
        # read 'info' from recover_log
        # write 'info' to file
        # file.flush()
        # append 'info-SUCCESS' to recover_log
        # recovery_log.flush()
</snippet></ROW><ROW><id>6475101</id><snippet>recover()</snippet></ROW><ROW><id>6475101</id><snippet>flush()</snippet></ROW><ROW><id>6475407</id><snippet>with open("log.txt") as infile:
    for line in infile:
        do_something_with(line)
</snippet></ROW><ROW><id>6475419</id><snippet>easy_install</snippet></ROW><ROW><id>6475419</id><snippet>easy_install git-python</snippet></ROW><ROW><id>6475912</id><snippet>ctypes/__init__.py</snippet></ROW><ROW><id>6475912</id><snippet>from _ctypes import LoadLibrary as _dlopen
</snippet></ROW><ROW><id>6475912</id><snippet>LoadLibrary</snippet></ROW><ROW><id>6475912</id><snippet>_ctypes.c</snippet></ROW><ROW><id>6475912</id><snippet>LoadLibraryEx</snippet></ROW><ROW><id>6475912</id><snippet>dlopen</snippet></ROW><ROW><id>6475912</id><snippet>ctypes.CDLL</snippet></ROW><ROW><id>6475912</id><snippet>folder = os.path.dirname(os.path.abspath(__file__))
dll_path = os.path.join(folder, "wiiuse.dll")    
dll = ctypes.CDLL(dll_path)
</snippet></ROW><ROW><id>6476398</id><snippet>html, body {
    margin:0; 
    padding:0;
    background-color:blue; 
}

a{
    /* Note: For whatever reason this does not apply to templates/tags/naviagtion.html */
    text-decoration: none;
}
</snippet></ROW><ROW><id>6476462</id><snippet>'These boats'</snippet></ROW><ROW><id>6476462</id><snippet>re.findall('Catalina 320', string.split('These boats')[0])
</snippet></ROW><ROW><id>6476489</id><snippet>def adder(dict, source, dest, weight):
   if not source in dict:
     dict[source] = {}
   if not dest in dict:
     dict[dest] = {}
   dict[source][dest] = weight
</snippet></ROW><ROW><id>6476489</id><snippet>dict</snippet></ROW><ROW><id>6476501</id><snippet>fig = pylab.figure()
ax = fig.add_subplot(111)
ax.plot( range(1,10), camean - 25, 'ro-' )
ax.plot( range(1,10), oemean , 'go-' )
ax.plot( range(1,10), hlmean , 'bo-' ) 
ax.set_yticks(range(5, 60, 5))
ax.set_yticklabels(["5","10","15","20","25","30","...","65","70","75"]) 
ax.legend(('ClassificationAccuracy','One-Error','HammingLoss'),loc='upper right')
pylab.show()
</snippet></ROW><ROW><id>6476838</id><snippet>.getwriter</snippet></ROW><ROW><id>6476838</id><snippet>def returnFunction():
    def myFunction():
        print('hello!')
    return myFunction
</snippet></ROW><ROW><id>6476838</id><snippet>&gt;&gt;&gt; returnFunction()()
hello!
</snippet></ROW><ROW><id>6476838</id><snippet>&gt;&gt;&gt; result = returnFunction()
&gt;&gt;&gt; result()
hello!
</snippet></ROW><ROW><id>6476838</id><snippet>evaluation step 0: returnSomeFunction()()
evaluation step 1: |&lt;-somefunction&gt;--&gt;|()
evaluation step 2: |&lt;----result--------&gt;|
</snippet></ROW><ROW><id>6476913</id><snippet>strip_tags</snippet></ROW><ROW><id>6476913</id><snippet>strip_elements</snippet></ROW><ROW><id>6476913</id><snippet>from lxml import etree

text = '''&lt;x&gt;hello, &lt;z&gt;keep me&lt;/z&gt; and &lt;y&gt;ignore me&lt;/y&gt;, and
here's some &lt;y&gt;more&lt;/y&gt; text&lt;/x&gt;'''

tree = etree.fromstring(text)

print etree.tostring(tree, pretty_print=True)

# Remove the &lt;z&gt; tags, but keep their contents:
etree.strip_tags(tree, 'z')

print '-' * 72
print etree.tostring(tree, pretty_print=True)

# Remove all the &lt;y&gt; tags including their contents:
etree.strip_elements(tree, 'y', with_tail=False)

print '-' * 72
print etree.tostring(tree, pretty_print=True)
</snippet></ROW><ROW><id>6476913</id><snippet>&lt;x&gt;hello, &lt;z&gt;keep me&lt;/z&gt; and &lt;y&gt;ignore me&lt;/y&gt;, and
here's some &lt;y&gt;more&lt;/y&gt; text&lt;/x&gt;

------------------------------------------------------------------------
&lt;x&gt;hello, keep me and &lt;y&gt;ignore me&lt;/y&gt;, and
here's some &lt;y&gt;more&lt;/y&gt; text&lt;/x&gt;

------------------------------------------------------------------------
&lt;x&gt;hello, keep me and , and
here's some  text&lt;/x&gt;
</snippet></ROW><ROW><id>6477061</id><snippet>csrf_token</snippet></ROW><ROW><id>6477061</id><snippet>xhr.setRequestHeader('X-CSRF-Token', csrf_token);</snippet></ROW><ROW><id>6477061</id><snippet>loadBeforeSend: function(jqXHR) {
    // you should modify the next line to get the CSRF tocken
    // in any way (for example $('meta[name=csrf]').attr('content')
    // if you have &lt;meta name="csrf" content="abcdefjklmnopqrstuvwxyz="/&gt;)
    var csrf_token = '&lt;%= token_value %&gt;'; // any way to get
    jqXHR.setRequestHeader('X-CSRF-Token', csrf_token);
}
</snippet></ROW><ROW><id>6477061</id><snippet>editData</snippet></ROW><ROW><id>6477061</id><snippet>jQuery("#list").jqGrid('navGrid','#pager',{},
    { // Edit option (parameters of editGridRow method)
        recreateForm:true,
        reloadAfterSubmit:false,
        closeOnEscape:true,
        savekey: [true,13],
        closeAfterEdit:true,
        ajaxEditOptions: {
            loadBeforeSend: function(jqXHR) {
                // you should modify the next line to get the CSRF tocken
                // in any way (for example $('meta[name=csrf]').attr('content')
                // if you have &lt;meta name="csrf" content="abcdefjklmnopqrstuvwxyz="/&gt;)
                var csrf_token = '&lt;%= token_value %&gt;'; // any way to get
                jqXHR.setRequestHeader('X-CSRF-Token', csrf_token);
            }
        },
        editData: {
            csrfmiddlewaretoken: '&lt;%= token_value %&gt;'
        }
    },
    { // Add options (parameters of editGridRow method)
        recreateForm:true,
        reloadAfterSubmit:false,
        closeOnEscape:true,
        savekey: [true,13],
        closeAfterAdd:true,
        ajaxEditOptions: {
            loadBeforeSend: function(jqXHR) {
                // you should modify the next line to get the CSRF tocken
                // in any way (for example $('meta[name=csrf]').attr('content')
                // if you have &lt;meta name="csrf" content="abcdefjklmnopqrstuvwxyz="/&gt;)
                var csrf_token = '&lt;%= token_value %&gt;'; // any way to get
                jqXHR.setRequestHeader('X-CSRF-Token', csrf_token);
            }
        },
        editData: {
            csrfmiddlewaretoken: '&lt;%= token_value %&gt;'
        }
    }
);
</snippet></ROW><ROW><id>6477061</id><snippet>csrfmiddlewaretoken</snippet></ROW><ROW><id>6477061</id><snippet>jQuery.extend(jQuery.jgrid.edit, {
    recreateForm:true,
    reloadAfterSubmit:false,
    closeOnEscape:true,
    savekey: [true,13],
    closeAfterAdd:true,
    closeAfterEdit:true,
    ajaxEditOptions: {
        loadBeforeSend: function(jqXHR) {
            // you should modify the next line to get the CSRF tocken
            // in any way (for example $('meta[name=csrf]').attr('content')
            // if you have &lt;meta name="csrf" content="abcdefjklmnopqrstuvwxyz="/&gt;)
            var csrf_token = '&lt;%= token_value %&gt;'; // any way to get
            jqXHR.setRequestHeader('X-CSRF-Token', csrf_token);
        }
    },
    editData: {
        csrfmiddlewaretoken: '&lt;%= token_value %&gt;'
    }
});
</snippet></ROW><ROW><id>6477061</id><snippet>navGrid</snippet></ROW><ROW><id>6477061</id><snippet>jQuery("#list").jqGrid('navGrid','#pager');
</snippet></ROW><ROW><id>6477602</id><snippet>time.sleep(1)</snippet></ROW><ROW><id>6478016</id><snippet>varchar 256</snippet></ROW><ROW><id>6478016</id><snippet>mysql</snippet></ROW><ROW><id>6478032</id><snippet>ModelForm</snippet></ROW><ROW><id>6478032</id><snippet>Meta</snippet></ROW><ROW><id>6478032</id><snippet>model</snippet></ROW><ROW><id>6478032</id><snippet>class PlayerForm(forms.ModelForm):
    class Meta:
        model = models.Player # or whatever
</snippet></ROW><ROW><id>6478032</id><snippet>save</snippet></ROW><ROW><id>6478435</id><snippet>loop</snippet></ROW><ROW><id>6478435</id><snippet>reader</snippet></ROW><ROW><id>6478435</id><snippet>loop</snippet></ROW><ROW><id>6478435</id><snippet>loop</snippet></ROW><ROW><id>6478435</id><snippet>reader</snippet></ROW><ROW><id>6478435</id><snippet>loop</snippet></ROW><ROW><id>6478490</id><snippet>import asyncmongo
import tornado.web

class Handler(tornado.web.RequestHandler):

    @tornado.web.asynchronous
    def get(self, id):
        self.id = id
        self.db = asyncmongo.Client(pool_id='mypool', host='localhost', 
            port=27107, dbname='mydb')

        self.db.users.find_one({'username': self.current_user}, 
            callback=self.on_user)

    def on_user(self, response, error):
        if error:
            raise tornado.web.HTTPError(500)
        self.user = response
        self.db.documents.find_one({'id': self.id, 'user': self.user}, 
            callback=self.on_document)

    def on_document(self, response, error):
        if error:
            raise tornado.web.HTTPError(500)
        self.render('template', first_name=self.user['first_name'],
            document=response)
</snippet></ROW><ROW><id>6478550</id><snippet>import types
class Scriptable:
    def __init__(self, script = None):
        if script is not None:
            self.script = types.MethodType(script, self)   # replace the method
    def script(self):
        print("greetings from the default script")
</snippet></ROW><ROW><id>6478550</id><snippet>class</snippet></ROW><ROW><id>6478550</id><snippet>instance</snippet></ROW><ROW><id>6478657</id><snippet>widget = Widget.objects.get(id=1234)
</snippet></ROW><ROW><id>6478877</id><snippet>re.split(pattern, string[, maxsplit=0, flags=0])
</snippet></ROW><ROW><id>6478983</id><snippet>unicode</snippet></ROW><ROW><id>6479031</id><snippet>from common import *
#...more stuff
__all__ += common.__all__
</snippet></ROW><ROW><id>6479031</id><snippet>scipy.__init__.py</snippet></ROW><ROW><id>6479045</id><snippet>for x in range(0,16):
    for y in range(0,16):
        prod = p[y][x] * p[y+1][x+1] * p[y+2][x+2] * p[y+3][x+3]
        m = max(m, prod)
</snippet></ROW><ROW><id>6479247</id><snippet>def clear_something(modeladmin, request, queryset):
    queryset.update(field=0)
    for a in queryset:
        a.b_set.all().delete()
</snippet></ROW><ROW><id>6479247</id><snippet>def clear_something(modeladmin, request, queryset):
    queryset.update(field=0)
    for a in queryset:
        B.objects.filter(f=a).delete()
</snippet></ROW><ROW><id>6479349</id><snippet>bytes</snippet></ROW><ROW><id>6479349</id><snippet>str</snippet></ROW><ROW><id>6479400</id><snippet>fields = ('name', 'school')
match_found = any(all(x[f]==example[f] for f in fields) for x in myList)
</snippet></ROW><ROW><id>6479591</id><snippet>from django.forms import ModelForm
from yourapp.models import Account

class AccountForm(ModelForm):
    class Meta:
        model = Order
</snippet></ROW><ROW><id>6479686</id><snippet>rstrip()</snippet></ROW><ROW><id>6479686</id><snippet>&gt;&gt;&gt; "abcbcbaba".rstrip("ab")
"abcbc"
</snippet></ROW><ROW><id>6479728</id><snippet>def __unicode__(self):
    return "%s" % self.user
</snippet></ROW><ROW><id>6479728</id><snippet>def __unicode__(self):
    return self.username
</snippet></ROW><ROW><id>6479891</id><snippet>include</snippet></ROW><ROW><id>6479891</id><snippet>{% include "registration/login.html" %}
</snippet></ROW><ROW><id>6479928</id><snippet>$PATH</snippet></ROW><ROW><id>6479928</id><snippet>$PATH</snippet></ROW><ROW><id>6479928</id><snippet>$ more ~/.bash_profile
[...]

# Setting PATH for MacPython 2.6
# The orginal version is saved in .profile.pysave
PATH="/Library/Frameworks/Python.framework/Versions/2.6/bin:${PATH}"
export PATH

# Setting PATH for Python 2.7
# The orginal version is saved in .profile.pysave
PATH="/Library/Frameworks/Python.framework/Versions/2.7/bin:${PATH}"
export PATH
$ echo $PATH
/Library/Frameworks/Python.framework/Versions/2.7/bin:/Library/Frameworks/Python.framework/Versions/2.6/bin:/usr/bin:/bin:/usr/sbin:/sbin:/usr/local/bin:/usr/X11/bin
</snippet></ROW><ROW><id>6479928</id><snippet>pip</snippet></ROW><ROW><id>6479928</id><snippet>easy_install</snippet></ROW><ROW><id>6479928</id><snippet>pip</snippet></ROW><ROW><id>6479928</id><snippet>easy_install</snippet></ROW><ROW><id>6479928</id><snippet>yolk</snippet></ROW><ROW><id>6479928</id><snippet>$PATH</snippet></ROW><ROW><id>6479928</id><snippet>python2.7</snippet></ROW><ROW><id>6479928</id><snippet>python</snippet></ROW><ROW><id>6479928</id><snippet>$PATH</snippet></ROW><ROW><id>6479928</id><snippet>yolk</snippet></ROW><ROW><id>6479928</id><snippet>yolk</snippet></ROW><ROW><id>6479928</id><snippet>.bash_profile</snippet></ROW><ROW><id>6479928</id><snippet>.profile</snippet></ROW><ROW><id>6479928</id><snippet>yolk</snippet></ROW><ROW><id>6479928</id><snippet>$ cd /Library/Frameworks/Python.framework/Versions/2.6/bin
$ ln -s yolk yolk2.6
$ cd /Library/Frameworks/Python.framework/Versions/2.7/bin
$ ln -s yolk yolk2.7
$ which yolk2.6
/Library/Frameworks/Python.framework/Versions/2.6/bin/yolk2.6
$ which yolk2.7
/Library/Frameworks/Python.framework/Versions/2.7/bin/yolk2.7
</snippet></ROW><ROW><id>6479982</id><snippet>dic = {}
with open('filename') as file:
    for name, addr, zcode in (i.split(',') for i in file if i.rstrip()):
        dic.setdefault(zcode.split()[0], []).append(name.split())
</snippet></ROW><ROW><id>6479982</id><snippet>setdefault</snippet></ROW><ROW><id>6480194</id><snippet>tot=PurchaseOrderLine.objects.aggregate(total=Sum('price'))['total'] 
return HttpResponse(tot)
</snippet></ROW><ROW><id>6480239</id><snippet>models.Model</snippet></ROW><ROW><id>6480380</id><snippet>&gt;&gt;&gt; a = numpy.arange(10000, dtype=numpy.double)
&gt;&gt;&gt; p = a[100:].ctypes.data_as(ctypes.POINTER(ctypes.c_double))
&gt;&gt;&gt; p.contents
c_double(100.0)
&gt;&gt;&gt; a[100] = 55
&gt;&gt;&gt; p.contents
c_double(55.0)
</snippet></ROW><ROW><id>6480465</id><snippet>nodes = [[Node() for j in range(cols)] for i in range(rows)]
</snippet></ROW><ROW><id>6480465</id><snippet>&gt;&gt;&gt; class Node:
      def __repr__(self):
        return "Node: %s" % id(self)
&gt;&gt;&gt; cols = 3
&gt;&gt;&gt; rows = 4
&gt;&gt;&gt; nodes = [[Node() for j in range(cols)] for i in range(rows)]
&gt;&gt;&gt; from pprint import pprint
&gt;&gt;&gt; pprint(nodes)
[[Node: 41596976, Node: 41597048, Node: 41596904],
 [Node: 41597120, Node: 41597192, Node: 41597336],
 [Node: 41597552, Node: 41597624, Node: 41597696],
 [Node: 41597768, Node: 41597840, Node: 41597912]]
</snippet></ROW><ROW><id>6480503</id><snippet>msglist = [ hextotal[i:i+4096] for i in range(0,len(hextotal),4096) ]
</snippet></ROW><ROW><id>6480529</id><snippet>nmConnect('weblogic','password','net4dns','5556','mydomain','/weblogic103/domains/mydomain')
nmStart('Net4')
nmStart('Net5')
nmStart('Net6')
nmStart('Net7')
nmStart('Net8')
nmDisconnect()
</snippet></ROW><ROW><id>6480625</id><snippet>from distutils.core import setup
import py2exe
setup(windows=["script.py"])
</snippet></ROW><ROW><id>6480711</id><snippet>prettify</snippet></ROW><ROW><id>6480841</id><snippet> theslab = Slab (image = slabimage,
                    x = games.mouse.x,
                    y = games.mouse.y)
</snippet></ROW><ROW><id>6480841</id><snippet>games.screen.add(theslab)
</snippet></ROW><ROW><id>6480841</id><snippet> def mouse_moves (self):
    self.x = games.mouse.x
    self.y = games.mouse.y
    self.iCollide()
</snippet></ROW><ROW><id>6480841</id><snippet> def mouse_moves (self):
    print "mouse_moves: ", str(games.mouse.x), str(games.mouse.y) 
    self.x = games.mouse.x
    self.y = games.mouse.y
    self.iCollide()
</snippet></ROW><ROW><id>6480869</id><snippet>http://github.com/namlook/mongokit/tarball/devel#egg=mongokit
</snippet></ROW><ROW><id>6480869</id><snippet>http://github.com/namlook/mongokit/tarball/devel#egg=mongokit-0.6yourmarker1
</snippet></ROW><ROW><id>6480869</id><snippet>yourmarker</snippet></ROW><ROW><id>6480869</id><snippet>[buildout]
parts = whatever
find-links =
    http://github.com/namlook/mongokit/tarball/devel#egg=mongokit-0.6yourmarker1
eggs = mongokit
versions = versions

[versions]
mongokit = 0.6yourmarker1
</snippet></ROW><ROW><id>6480869</id><snippet>install_requires=['mongokit']</snippet></ROW><ROW><id>6480912</id><snippet> h_B = sqrt (h_A * h_(A+1)) = sqrt (h_a * h_a * sqrt(2)) = h_a * sqrt(sqrt (2))

 h_C = sqrt (h_A * h_B)
     = sqrt (h_A) * sqrt (h_A * sqrt(sqrt(2)))
     = sqrt (h_A) * sqrt (h_A) * sqrt(sqrt(sqrt(2)))
     = h_A * sqrt(sqrt(sqrt(2)))
</snippet></ROW><ROW><id>6480912</id><snippet> h_B = sqrt(h_A * h_A(+1))
 h_C = sqrt(h_A * h_B).
</snippet></ROW><ROW><id>6480960</id><snippet>Node()</snippet></ROW><ROW><id>6480960</id><snippet>&gt;&gt;&gt; nodes = [[],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[]]
&gt;&gt;&gt; nodes[0][0] = 5
Traceback (most recent call last):
  File "&lt;interactive input&gt;", line 1, in &lt;module&gt;
IndexError: list assignment index out of range
&gt;&gt;&gt; nodes[0].append(5)
&gt;&gt;&gt; nodes
[[5], [], [], [], [], [], [], [], [], [], [], [], [], [], [], []]
</snippet></ROW><ROW><id>6481056</id><snippet>text = gzip.open(file,'r').read()
</snippet></ROW><ROW><id>6481056</id><snippet>file</snippet></ROW><ROW><id>6481056</id><snippet>fullpath = os.path.join(path, file)
text = gzip.open(fullpath,'r').read()
</snippet></ROW><ROW><id>6481056</id><snippet>F.readlines()[:10]</snippet></ROW><ROW><id>6481056</id><snippet>import itertools
list(itertools.islice(F.xreadlines(),10))
</snippet></ROW><ROW><id>6481056</id><snippet>list(itertools.islice(F,10))
</snippet></ROW><ROW><id>6481056</id><snippet>&gt;&gt;&gt; import gzip,itertools
&gt;&gt;&gt; list(itertools.islice(gzip.open("/home/dan/Desktop/rp718.ps.gz"),10))
['%!PS-Adobe-2.0\n', '%%Creator: dvips 5.528 Copyright 1986, 1994 Radical Eye Software\n', '%%Title: WLP-94-int.dvi\n', '%%CreationDate: Mon Jan 16 16:24:41 1995\n', '%%Pages: 6\n', '%%PageOrder: Ascend\n', '%%BoundingBox: 0 0 596 842\n', '%%EndComments\n', '%DVIPSCommandLine: dvips -f WLP-94-int.dvi\n', '%DVIPSParameters: dpi=300, comments removed\n']
</snippet></ROW><ROW><id>6481120</id><snippet>&gt;&gt;&gt; import urllib
&gt;&gt;&gt; tests = ['\x80', '\xe2\x82\xac', 1, '1', u'1', u'\x80', u'\u20ac']
&gt;&gt;&gt; for test in tests:
...     print repr(test), repr(urllib.urlencode({'a':test}))
...
'\x80' 'a=%80'
'\xe2\x82\xac' 'a=%E2%82%AC'
1 'a=1'
'1' 'a=1'
u'1' 'a=1'
u'\x80'
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 2, in &lt;module&gt;
  File "C:\python27\lib\urllib.py", line 1282, in urlencode
    v = quote_plus(str(v))
UnicodeEncodeError: 'ascii' codec can't encode character u'\x80' in position 0: ordinal not in range(128)
</snippet></ROW><ROW><id>6481120</id><snippet>def encoded_dict(in_dict):
    out_dict = {}
    for k, v in in_dict.iteritems():
        if isinstance(v, unicode):
            v = v.encode('utf8')
        elif isinstance(v, str):
            # Must be encoded in UTF-8
            v.decode('utf8')
        out_dict[k] = v
    return out_dict
</snippet></ROW><ROW><id>6481120</id><snippet>&gt;&gt;&gt; for test in tests[::-1]:
...     print repr(test), repr(urllib.urlencode(encoded_dict({'a':test})))
...
u'\u20ac' 'a=%E2%82%AC'
u'\x80' 'a=%C2%80'
u'1' 'a=1'
'1' 'a=1'
1 'a=1'
'\xe2\x82\xac' 'a=%E2%82%AC'
'\x80'
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 2, in &lt;module&gt;
  File "&lt;stdin&gt;", line 8, in encoded_dict
  File "C:\python27\lib\encodings\utf_8.py", line 16, in decode
    return codecs.utf_8_decode(input, errors, True)
UnicodeDecodeError: 'utf8' codec can't decode byte 0x80 in position 0: invalid start byte
&gt;&gt;&gt;
</snippet></ROW><ROW><id>6481297</id><snippet>from django.db.models import Sum

ModelName.objects.filter(field_name__isnull=True).aggregate(Sum('field_name'))
</snippet></ROW><ROW><id>6481297</id><snippet>ModelName.objects.aggregate(Sum('field_name'))
</snippet></ROW><ROW><id>6481472</id><snippet>lala = self.get_velocity()
</snippet></ROW><ROW><id>6481472</id><snippet>dx, dy = self.get_velocity()
</snippet></ROW><ROW><id>6481565</id><snippet>u'杭州'</snippet></ROW><ROW><id>6481565</id><snippet>'%BA%BC%D6%DD'</snippet></ROW><ROW><id>6481565</id><snippet>In [24]: ''.join('%{0:X}'.format(ord(c)) for c in u"杭州".encode('gbk'))
Out[24]: '%BA%BC%D6%DD'

In [25]: ''.join('%{0:X}'.format(ord(c)) for c in u"大连".encode('gbk'))
Out[25]: '%B4%F3%C1%AC'
</snippet></ROW><ROW><id>6481565</id><snippet>'%BA%BC%D6%DD'</snippet></ROW><ROW><id>6481565</id><snippet>u'杭州'</snippet></ROW><ROW><id>6481565</id><snippet>In [54]: import binascii    
In [55]: print(binascii.unhexlify(''.join('%BA%BC%D6%DD'.split('%'))).decode('gbk'))
杭州
</snippet></ROW><ROW><id>6481794</id><snippet>sarnoldwashere</snippet></ROW><ROW><id>6481794</id><snippet>&gt;&gt;&gt; mail.create("sarnoldwashere")
('OK', ['Success'])
&gt;&gt;&gt; mail.list()
('OK', ['(\\HasNoChildren) "/" "INBOX"',
'(\\HasNoChildren) "/" "Personal"',
'(\\HasNoChildren) "/" "Receipts"',
'(\\HasNoChildren) "/" "Travel"',
'(\\HasNoChildren) "/" "Work"',
'(\\Noselect \\HasChildren) "/" "[Gmail]"',
'(\\HasNoChildren) "/" "[Gmail]/All Mail"',
'(\\HasNoChildren) "/" "[Gmail]/Drafts"',
'(\\HasNoChildren) "/" "[Gmail]/Sent Mail"',
'(\\HasNoChildren) "/" "[Gmail]/Spam"',
'(\\HasNoChildren) "/" "[Gmail]/Starred"',
'(\\HasChildren \\HasNoChildren) "/" "[Gmail]/Trash"',
'(\\HasNoChildren) "/" "sarnoldwashere"'])
&gt;&gt;&gt; mail.logout()
('BYE', ['LOGOUT Requested'])
</snippet></ROW><ROW><id>6481794</id><snippet>&gt;&gt;&gt; import imaplib
&gt;&gt;&gt; mail = imaplib.IMAP4_SSL('imap.gmail.com')
&gt;&gt;&gt; mail.login('foobar306@gmail.com', 'testing123testing')
('OK', ['foobar306@gmail.com .. .. authenticated (Success)'])
&gt;&gt;&gt; mail.list()
('OK', ['(\\HasNoChildren) "/" "INBOX"', '(\\HasNoChildren) "/" "Personal"', '(\\HasNoChildren) "/" "Receipts"', '(\\HasNoChildren) "/" "Travel"', '(\\HasNoChildren) "/" "Work"', '(\\Noselect \\HasChildren) "/" "[Gmail]"', '(\\HasNoChildren) "/" "[Gmail]/All Mail"', '(\\HasNoChildren) "/" "[Gmail]/Drafts"', '(\\HasNoChildren) "/" "[Gmail]/Sent Mail"', '(\\HasNoChildren) "/" "[Gmail]/Spam"', '(\\HasNoChildren) "/" "[Gmail]/Starred"', '(\\HasChildren \\HasNoChildren) "/" "[Gmail]/Trash"'])
&gt;&gt;&gt; # Out: list of "folders" aka labels in gmail.
... mail.select("inbox") # connect to inbox.
('OK', ['3'])
&gt;&gt;&gt; mail.dir()
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
  File "/usr/lib/python2.6/imaplib.py", line 214, in __getattr__
    raise AttributeError("Unknown IMAP4 command: '%s'" % attr)
AttributeError: Unknown IMAP4 command: 'dir'
&gt;&gt;&gt; dir(mail)
['PROTOCOL_VERSION', '_CRAM_MD5_AUTH', '__doc__', '__getattr__', '__init__', '__module__', '_append_untagged', '_check_bye', '_checkquote', '_cmd_log', '_cmd_log_idx', '_cmd_log_len', '_command', '_command_complete', '_dump_ur', '_get_line', '_get_response', '_get_tagged_response', '_log', '_match', '_mesg', '_new_tag', '_quote', '_simple_command', '_untagged_response', 'abort', 'append', 'authenticate', 'capabilities', 'capability', 'certfile', 'check', 'close', 'continuation_response', 'copy', 'create', 'debug', 'delete', 'deleteacl', 'error', 'expunge', 'fetch', 'getacl', 'getannotation', 'getquota', 'getquotaroot', 'host', 'is_readonly', 'keyfile', 'list', 'literal', 'login', 'login_cram_md5', 'logout', 'lsub', 'mo', 'mustquote', 'myrights', 'namespace', 'noop', 'open', 'partial', 'port', 'print_log', 'proxyauth', 'read', 'readline', 'readonly', 'recent', 'rename', 'response', 'search', 'select', 'send', 'setacl', 'setannotation', 'setquota', 'shutdown', 'sock', 'socket', 'sort', 'ssl', 'sslobj', 'state', 'status', 'store', 'subscribe', 'tagged_commands', 'tagnum', 'tagpre', 'tagre', 'thread', 'uid', 'unsubscribe', 'untagged_responses', 'welcome', 'xatom']
&gt;&gt;&gt; dir(mail).sort()
&gt;&gt;&gt; d=dir(mail)
&gt;&gt;&gt; d.sort()
&gt;&gt;&gt; d
['PROTOCOL_VERSION', '_CRAM_MD5_AUTH', '__doc__', '__getattr__', '__init__', '__module__', '_append_untagged', '_check_bye', '_checkquote', '_cmd_log', '_cmd_log_idx', '_cmd_log_len', '_command', '_command_complete', '_dump_ur', '_get_line', '_get_response', '_get_tagged_response', '_log', '_match', '_mesg', '_new_tag', '_quote', '_simple_command', '_untagged_response', 'abort', 'append', 'authenticate', 'capabilities', 'capability', 'certfile', 'check', 'close', 'continuation_response', 'copy', 'create', 'debug', 'delete', 'deleteacl', 'error', 'expunge', 'fetch', 'getacl', 'getannotation', 'getquota', 'getquotaroot', 'host', 'is_readonly', 'keyfile', 'list', 'literal', 'login', 'login_cram_md5', 'logout', 'lsub', 'mo', 'mustquote', 'myrights', 'namespace', 'noop', 'open', 'partial', 'port', 'print_log', 'proxyauth', 'read', 'readline', 'readonly', 'recent', 'rename', 'response', 'search', 'select', 'send', 'setacl', 'setannotation', 'setquota', 'shutdown', 'sock', 'socket', 'sort', 'ssl', 'sslobj', 'state', 'status', 'store', 'subscribe', 'tagged_commands', 'tagnum', 'tagpre', 'tagre', 'thread', 'uid', 'unsubscribe', 'untagged_responses', 'welcome', 'xatom']
&gt;&gt;&gt; mail.list()
('OK', ['(\\HasNoChildren) "/" "INBOX"', '(\\HasNoChildren) "/" "Personal"', '(\\HasNoChildren) "/" "Receipts"', '(\\HasNoChildren) "/" "Travel"', '(\\HasNoChildren) "/" "Work"', '(\\Noselect \\HasChildren) "/" "[Gmail]"', '(\\HasNoChildren) "/" "[Gmail]/All Mail"', '(\\HasNoChildren) "/" "[Gmail]/Drafts"', '(\\HasNoChildren) "/" "[Gmail]/Sent Mail"', '(\\HasNoChildren) "/" "[Gmail]/Spam"', '(\\HasNoChildren) "/" "[Gmail]/Starred"', '(\\HasChildren \\HasNoChildren) "/" "[Gmail]/Trash"'])
&gt;&gt;&gt; mail.select("INBOX") # connect to inbox.
('OK', ['3'])
&gt;&gt;&gt; mail.list()
('OK', ['(\\HasNoChildren) "/" "INBOX"', '(\\HasNoChildren) "/" "Personal"', '(\\HasNoChildren) "/" "Receipts"', '(\\HasNoChildren) "/" "Travel"', '(\\HasNoChildren) "/" "Work"', '(\\Noselect \\HasChildren) "/" "[Gmail]"', '(\\HasNoChildren) "/" "[Gmail]/All Mail"', '(\\HasNoChildren) "/" "[Gmail]/Drafts"', '(\\HasNoChildren) "/" "[Gmail]/Sent Mail"', '(\\HasNoChildren) "/" "[Gmail]/Spam"', '(\\HasNoChildren) "/" "[Gmail]/Starred"', '(\\HasChildren \\HasNoChildren) "/" "[Gmail]/Trash"'])
&gt;&gt;&gt; mail.list("INBOX")
('OK', ['(\\HasNoChildren) "/" "INBOX"'])
&gt;&gt;&gt; mail.open("INBOX")
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
  File "/usr/lib/python2.6/imaplib.py", line 1149, in open
    self.sock = socket.create_connection((host, port))
  File "/usr/lib/python2.6/socket.py", line 547, in create_connection
    for res in getaddrinfo(host, port, 0, SOCK_STREAM):
socket.gaierror: [Errno -2] Name or service not known
&gt;&gt;&gt; mail.recent()
('OK', ['0'])
&gt;&gt;&gt; mail.create("sarnoldwashere")
('OK', ['Success'])
&gt;&gt;&gt; mail.list()
('OK', ['(\\HasNoChildren) "/" "INBOX"', '(\\HasNoChildren) "/" "Personal"', '(\\HasNoChildren) "/" "Receipts"', '(\\HasNoChildren) "/" "Travel"', '(\\HasNoChildren) "/" "Work"', '(\\Noselect \\HasChildren) "/" "[Gmail]"', '(\\HasNoChildren) "/" "[Gmail]/All Mail"', '(\\HasNoChildren) "/" "[Gmail]/Drafts"', '(\\HasNoChildren) "/" "[Gmail]/Sent Mail"', '(\\HasNoChildren) "/" "[Gmail]/Spam"', '(\\HasNoChildren) "/" "[Gmail]/Starred"', '(\\HasChildren \\HasNoChildren) "/" "[Gmail]/Trash"', '(\\HasNoChildren) "/" "sarnoldwashere"'])
&gt;&gt;&gt; mail.logout()
('BYE', ['LOGOUT Requested'])
&gt;&gt;&gt; 
</snippet></ROW><ROW><id>6481795</id><snippet>class Foo(object):
    @property
    def bar(self):
        return 'foobar'

&gt;&gt;&gt; foo = Foo()

&gt;&gt;&gt; foo.bar
&lt;&lt;&lt; 'foobar'
</snippet></ROW><ROW><id>6481979</id><snippet>from Tkinter import *
import tkSimpleDialog as tks

import cmath,math

root = Tk()

c = Canvas(root,width=200, height=200)
c.pack()

# keypress event
def key(event):
    text.focus_force()
    ch=event.char

    # handle backspace
    if ch=='\x08':
        if len(text.get())&gt;1 :
            entry_text=text.get()[:-1]
            if entry_text=='-': entry_text='0'
        else:
            entry_text='0'
    else:
        entry_text=text.get()+ch 

    # we want an integer
    try:
        angle_degrees=int(entry_text)
        cangle = cmath.exp(angle_degrees*1j*math.pi/180)


        offset = complex(center[0], center[1])
        newxy = []
        for x, y in triangle:
            v = cangle * (complex(x, y) - offset) + offset
            newxy.append(v.real)
            newxy.append(v.imag)
        c.coords(polygon_item, *newxy)
    except ValueError:
        print "not integer"

text = Entry(root)
text.bind("&lt;Key&gt;", key)

text.pack()
text.focus_force()

# a triangle
triangle = [(50, 50), (150, 50), (150, 150)]

polygon_item = c.create_polygon(triangle)
center = 100, 100


mainloop()
</snippet></ROW><ROW><id>6482022</id><snippet>ConfigParser</snippet></ROW><ROW><id>6482022</id><snippet># items in section 'NODE': key, value pairs
for key, value in config.items('NODE'):
  if value == WHAT_I_NEED:
    print key
</snippet></ROW><ROW><id>6482022</id><snippet>items</snippet></ROW><ROW><id>6482027</id><snippet>def update (self):
    if self.right&gt;544 and self.dx &gt; 0:
        self.dx = -self.dx
    if (self.top &gt; 11 and self.dy &lt; 0) or (self.bottom &gt; 470 and self.dy &gt; 0):
        self.dy = -self.dy
    if self.left &lt; 0:
        self.iLost()
</snippet></ROW><ROW><id>6482027</id><snippet>def iCollide (self):
    for Ball in self.overlapping_sprites:

        #Extract the components of the slab's velocity
        slab_vx, slab_vy = self.iVelocity()

        #Compute relative components of slab velocity
        rel_vx, rel_vy = Ball.dx - slab_vx, Ball.dy - slab_vy

        #Determine the time of intersection and the normal direction
        #This is done to compute which face the ball hits
        #Initially suppose that the objects intersect at t=infinity
        t, nx, ny = 100000, 0, 0

        #Check left/right faces
        if rel_vx != 0:
            #Check if ball hits left face
            toi = (self.left - Ball.right) / rel_vx
            if toi &lt; t:
                t, nx, ny = toi, -1, 0

            #Check if ball hits right face
            toi = (self.right - Ball.left) / rel_vx

            if toi &lt; t:
                t, nx, ny = toi, 1, 0

        #Check top/bottom faces:
        if rel_vy != 0:

            #Check if ball hits top face
            toi = (self.top - Ball.bottom) / rel_vx
            if toi &lt; t:
                t, nx, ny = toi, 0, -1

            #Check if ball hits right face
            toi = (self.bottom - Ball.top) / rel_vx
            if toi &lt; t:
                t, nx, ny = toi, 0, 1

        #Check if impact force properly corrects velocity
        if Ball.dx * nx + Ball.dy * ny &lt; 0:

            #Reflect the ball's position
            Ball.dx += Ball.dx * nx * 2.0
            Ball.dy += Ball.dy * ny * 2.0

        #Check if cursor movement is not pushing ball into paddle:
        if slab_vx * nx + slab_vy * ny &lt; 0:
            Ball.dx += slab_vx
            Ball.dy += slab.vy
</snippet></ROW><ROW><id>6482031</id><snippet>difflib</snippet></ROW><ROW><id>6482031</id><snippet>difflib.SequenceMatcher</snippet></ROW><ROW><id>6482045</id><snippet>def is_prime_candidate(self, p, iterations=7):  
    if p == 1 or p % 2 == 0: return False       
    elif p &lt; 1: raise ValueError("is_prime_candidate: n must be a positive integer")
    elif p &lt; self.maxsmallprime: return p in self.smallprimes

    odd = p - 1
    count = 0
    while odd % 2 == 0:
        odd //= 2
        count += 1

    for i in range(iterations):
        r = random.randrange(2, p - 2) 
        test = pow(r, odd, p)
        if test == 1 or test == p - 1: continue
        for j in range(count - 1):
            test = pow(test, 2, p)
            if test == 1: return False
            if test == p - 1: break
        else: return False
        print i
    return True
</snippet></ROW><ROW><id>6482045</id><snippet>d = int(nn / (2 ** s))
</snippet></ROW><ROW><id>6482045</id><snippet>int</snippet></ROW><ROW><id>6482045</id><snippet>False</snippet></ROW><ROW><id>6482045</id><snippet>d = nn // (2 ** s)</snippet></ROW><ROW><id>6482045</id><snippet>True</snippet></ROW><ROW><id>6482087</id><snippet>insert</snippet></ROW><ROW><id>6482087</id><snippet>SET autocommit=0; 
</snippet></ROW><ROW><id>6482922</id><snippet>rand_smpl = [ mylist[i] for i in sorted(random.sample(xrange(len(mylist)), 4)) ]
</snippet></ROW><ROW><id>6482922</id><snippet>random.sample(xrange(len(mylist)), sample_size)
</snippet></ROW><ROW><id>6482998</id><snippet>regexStr = r'(%s)' % searchString
</snippet></ROW><ROW><id>6482998</id><snippet>r('hello\n')  # Raw string =&gt; (hello\n)
u'unicodestring'
</snippet></ROW><ROW><id>6483122</id><snippet>&gt;&gt;&gt; [list(t) for t in zip(*[[1,2,3], [4,5,6], [7,8,9]])]
[[1, 4, 7], [2, 5, 8], [3, 6, 9]]
</snippet></ROW><ROW><id>6483299</id><snippet>__init__.py</snippet></ROW><ROW><id>6483299</id><snippet>from Params import *</snippet></ROW><ROW><id>6483299</id><snippet>import Params
__all__ = ["Params"]
from Params import *
__all__ += Params.__all__
</snippet></ROW><ROW><id>6483299</id><snippet>__all__</snippet></ROW><ROW><id>6483458</id><snippet>import mechanize
from BeautifulSoup import BeautifulSoup
br = mechanize.Browser()
resp = br.open('your_url')
soup = BeautifulSoup(resp.get_data())
second_select = soup.findAll('select', name="mv_searchspec")[1]
# now use BeautifulSoup API to get the data you want
</snippet></ROW><ROW><id>6483458</id><snippet>br['mv_searchspec'] = 'foo'</snippet></ROW><ROW><id>6483458</id><snippet>br.select_form(nr=0) # select index
controls = br.form.controls
controls[desired_index]._value = 'your_value'
...
br.submit()
</snippet></ROW><ROW><id>6483469</id><snippet>5085.2872588</snippet></ROW><ROW><id>6483469</id><snippet>1</snippet></ROW><ROW><id>6483469</id><snippet>decimal.Decimal</snippet></ROW><ROW><id>6483469</id><snippet>create_decimal</snippet></ROW><ROW><id>6483508</id><snippet>GtkDialog.run()</snippet></ROW><ROW><id>6483568</id><snippet>connection = pyodbc.connect(...)
connection.begin() # superfluous, but for illustration purposes;
cursor = connection.cursor()
cursor.execute('INSERT ....')
connection.commit() # or rollback    
</snippet></ROW><ROW><id>6483639</id><snippet>email_pattern.findall()</snippet></ROW><ROW><id>6483639</id><snippet>with open(fileName) as lijstEmails: 
    self.FinalMailsArray.append([email_pattern.findall(line) for line in lijstEmails])
</snippet></ROW><ROW><id>6483639</id><snippet>email_pattern.findall()</snippet></ROW><ROW><id>6483639</id><snippet>with open(fileName) as lijstEmails: 
    self.FinalMailsArray.append([email_pattern.findall(line)[0] for line in lijstEmails])
</snippet></ROW><ROW><id>6483900</id><snippet>import lxml.etree
doc = lxml.etree.parse(xml)
count = doc.xpath('count(//author)')
</snippet></ROW><ROW><id>6484272</id><snippet>for string in self.FinalMailsArray:
    c.execute("""INSERT IGNORE INTO table (email) VALUES(%s) """,(string))
</snippet></ROW><ROW><id>6484533</id><snippet>(album, photo)</snippet></ROW><ROW><id>6484533</id><snippet>for album in albums:
    album_list.append((album, Photo.objects.filter(album=album).order_by('?')[0]))
</snippet></ROW><ROW><id>6484533</id><snippet>    {{ for album, photo in album_list }}
</snippet></ROW><ROW><id>6484664</id><snippet>python.exe</snippet></ROW><ROW><id>6484664</id><snippet>pythonw.exe</snippet></ROW><ROW><id>6484664</id><snippet>manage.py</snippet></ROW><ROW><id>6484664</id><snippet>chmod +x manage.py</snippet></ROW><ROW><id>6484664</id><snippet>./manage.py</snippet></ROW><ROW><id>6484664</id><snippet>#!/usr/bin/python</snippet></ROW><ROW><id>6484664</id><snippet>manage.py</snippet></ROW><ROW><id>6484704</id><snippet>__import__</snippet></ROW><ROW><id>6484888</id><snippet>album_list.append((album, Photo.objects.filter(album=album).order_by('?')[0]))
</snippet></ROW><ROW><id>6485171</id><snippet>syncdb</snippet></ROW><ROW><id>6485171</id><snippet>python manage.py flush
</snippet></ROW><ROW><id>6485171</id><snippet>python manage.py reset appname
</snippet></ROW><ROW><id>6485171</id><snippet>--no-input</snippet></ROW><ROW><id>6485222</id><snippet>a = b
b = a+b
</snippet></ROW><ROW><id>6485222</id><snippet>a</snippet></ROW><ROW><id>6485222</id><snippet>b</snippet></ROW><ROW><id>6485222</id><snippet>b = b + b</snippet></ROW><ROW><id>6485222</id><snippet>a,b = b, a+b
</snippet></ROW><ROW><id>6485222</id><snippet>b</snippet></ROW><ROW><id>6485222</id><snippet>a</snippet></ROW><ROW><id>6485222</id><snippet>b</snippet></ROW><ROW><id>6485222</id><snippet>a</snippet></ROW><ROW><id>6485415</id><snippet>urls.py</snippet></ROW><ROW><id>6485464</id><snippet>on_call</snippet></ROW><ROW><id>6485464</id><snippet>def on_call(self, callback):
    callback()
</snippet></ROW><ROW><id>6485464</id><snippet>def test_MyClass(self):
    def threaded_test():
        self.assertEqual(mc.get(),6)

    mc = MyClass()
    self.queue.put(1)
    self.queue.put(2)
    self.queue.put(3)
    self.queue.put({'event_name':'call','val':threaded_test})
</snippet></ROW><ROW><id>6485489</id><snippet>ModelAdmin</snippet></ROW><ROW><id>6485489</id><snippet>models.Model</snippet></ROW><ROW><id>6485489</id><snippet>formfield_for_foreignkey</snippet></ROW><ROW><id>6485489</id><snippet>class MyModelAdmin(admin.ModelAdmin):
    def formfield_for_foreignkey(self, db_field, request, **kwargs):
        if db_field.name == "car":
            kwargs["queryset"] = Car.objects.filter(owner=request.user)
    return super(MyModelAdmin, self).formfield_for_foreignkey(db_field, request, **kwargs)
</snippet></ROW><ROW><id>6485489</id><snippet>if db_field.name == "company":
    kwargs['queryset'] = request.user.company_set.all()
</snippet></ROW><ROW><id>6485627</id><snippet>class SomeForm(forms.ModelForm):
    ...
    update_date = forms.CharField(widget=CalendarWidget)
    ...
</snippet></ROW><ROW><id>6485686</id><snippet>try:
   smtpObj = smtplib.SMTP('localhost')
   smtpObj.sendmail(sender, receivers, message)         
   print "Successfully sent email"
except SMTPException:
   print "Error: unable to send email"
</snippet></ROW><ROW><id>6485831</id><snippet>.</snippet></ROW><ROW><id>6485831</id><snippet>[.]</snippet></ROW><ROW><id>6485831</id><snippet>.</snippet></ROW><ROW><id>6485831</id><snippet>[^.]</snippet></ROW><ROW><id>6485831</id><snippet>.</snippet></ROW><ROW><id>6485831</id><snippet>.</snippet></ROW><ROW><id>6485943</id><snippet>import base64
import numpy as np

t = np.arange(25, dtype=np.float64)
s = base64.b64encode(t)
r = base64.decodestring(s)
q=np.frombuffer(r,dtype=np.float64)

print(np.allclose(q,t))
# True
</snippet></ROW><ROW><id>6486302</id><snippet>cd</snippet></ROW><ROW><id>6486401</id><snippet>__getitem__</snippet></ROW><ROW><id>6486401</id><snippet>__setitem__</snippet></ROW><ROW><id>6486401</id><snippet>__delitem__</snippet></ROW><ROW><id>6486401</id><snippet>class MetaContainer():
    def __delitem__(self, key):
        self.__delattr__(key)
    def __getitem__(self, key):
        return self.__getattribute__(key)
    def __setitem__(self, key, value):
        self.__setattr__(key, value)
</snippet></ROW><ROW><id>6486403</id><snippet>line.split(':')[1].split[0]
</snippet></ROW><ROW><id>6486403</id><snippet>line = "[aln-core]:10000000 sequences have been processed"

line.split(':')[1]
'10000000 sequences have been processed'

line.split(':')[1].split()[0]
'10000000'
</snippet></ROW><ROW><id>6486425</id><snippet># globals
DEBUG = 0
(...)
def main():
[...]
    def increment(*args):
        global DEBUG
        DEBUG += 1

    parser.add_option("-v",  action="callback",
        callback=increment,
        help="Verbose (-vvv for added verboseness)")
</snippet></ROW><ROW><id>6486428</id><snippet>127.0.0.1:8000/admin
</snippet></ROW><ROW><id>6486428</id><snippet>127.0.0.1:8000/admin/
</snippet></ROW><ROW><id>6486437</id><snippet>self.canvas.create_line(list(points))
</snippet></ROW><ROW><id>6486513</id><snippet>set</snippet></ROW><ROW><id>6486513</id><snippet>&gt;&gt;&gt; def diff(a, b):
        b = set(b)
        return [aa for aa in a if aa not in b]

&gt;&gt;&gt; diff(A, B)
[1, 3, 4]
&gt;&gt;&gt; diff(B, A)
[5]
&gt;&gt;&gt; 
</snippet></ROW><ROW><id>6486514</id><snippet>&gt;&gt;&gt; ast.literal_eval("""(u'bretagne tr\xe9minou 23archiefdingen', u'chicago, il')""")
(u'bretagne tr\xe9minou 23archiefdingen', u'chicago, il')
</snippet></ROW><ROW><id>6486684</id><snippet>r</snippet></ROW><ROW><id>6486684</id><snippet>\</snippet></ROW><ROW><id>6486684</id><snippet>music_file = 'C:\\Music\\song.mp3'
</snippet></ROW><ROW><id>6486861</id><snippet>result = commands.getoutput('zcat ' + fullpath + ' |wc -l')
</snippet></ROW><ROW><id>6486921</id><snippet>&gt;&gt;&gt; s = "cats \\ dogs"
&gt;&gt;&gt; print s
cats \ dogs
&gt;&gt;&gt; print s.replace("\\", "\\\\")
cats \\ dogs
</snippet></ROW><ROW><id>6486933</id><snippet>import random
tries = 0
heads=0
tails=0
while tries &lt; 100:
    tries += 1
    coin = random.randint(1, 2)
    if coin == 1:
        print('Heads')
        heads+=1
    if coin == 2:
        print ('Tails')
        tails+=1
total = tries
print(total)
print tails
print heads
</snippet></ROW><ROW><id>6486950</id><snippet>&gt;&gt;&gt; l = [["1a","1b","1c","1d"], ["2a","2b"], ["3a","3b","3c","3d","3e"]]
&gt;&gt;&gt; while l:
...     x = random.choice(l)
...     print x.pop(-1) 
...     if not x:
...         l.remove(x)

1d
1c
2b
3e
2a
3d
1b
3c
3b
3a
1a
</snippet></ROW><ROW><id>6487251</id><snippet>play</snippet></ROW><ROW><id>6487328</id><snippet>def getNewTable( db, table ):
    class NewTable( Base ):
        __tablename__ = table
        __table_args__ = { 'schema': db }
        id = Column( ...

    return NewTable

newClassInst = getNewTable( 'somedb', 'sometable' )
newRow = newClassInst( data )
</snippet></ROW><ROW><id>6487524</id><snippet>from django.db import models

class MyManager(models.Manager):
    def all(self, session=None):
        if session is None:
            return self.all()
        else:
            return self.filter(.....)

class MyModel(models.Model):
    # fields go here
    objects = MyManager()
</snippet></ROW><ROW><id>6487524</id><snippet>all()</snippet></ROW><ROW><id>6487524</id><snippet># code in the view
qs = MyModel.objects.all()
if session....:
    qs = qs.filter(...)
</snippet></ROW><ROW><id>6487536</id><snippet>import commands
import glob
from os import path

dir1 = '/home/x/nearline'
dir2 = '/home/x/sge_jobs_output'

for filepath in glob.glob(path.join(dir1, '*.recal.fastq.gz')):
    filename = path.basename(filepath)
    job_id = filename.split('.', 1)[0]

    ## Look for corresponding .txt file
    txt_filepath = path.join(dir2, '%s.txt' % job_id)
    ## Fail early if corresponding .txt file is missing
    if not path.isfile(txt_filepath):
        print('Missing %s for %s' % (txt_filepath, filepath))
        continue

    ## Both exist, process each
    ## This is from your code snippet
    result = commands.getoutput('zcat ' + fullpath1 + ' |wc -l')
    fastq_seq_num = int(result)/4.0

    linelist = open(txt_filepath).readlines()
    lastline = linelist[len(linelist)-1]
    num_seq_processed_sai = lastline.split(']')[1].split()[0]

    if fastq_seq_num == num_seq_processed_sai:
        print "Sequence numbers match (%d : %d)" % (fastq_seq_num, num_seq_processed_sai)
    else:
        print "Sequence numbers do not match (%d : %d)" % (fastq_seq_num, num_seq_processed_sai)
</snippet></ROW><ROW><id>6487536</id><snippet>glob.glob()</snippet></ROW><ROW><id>6487536</id><snippet>commands</snippet></ROW><ROW><id>6487536</id><snippet>subprocess</snippet></ROW><ROW><id>6487536</id><snippet>tail</snippet></ROW><ROW><id>6487551</id><snippet>data:(\w+)/(\w+);(\w+),(\w+)</snippet></ROW><ROW><id>6487551</id><snippet>m.group(x)</snippet></ROW><ROW><id>6487551</id><snippet>m.groups()</snippet></ROW><ROW><id>6487551</id><snippet>m</snippet></ROW><ROW><id>6487573</id><snippet>os.startfile</snippet></ROW><ROW><id>6487573</id><snippet>subprocess</snippet></ROW><ROW><id>6487573</id><snippet>cwd</snippet></ROW><ROW><id>6487573</id><snippet>Popen</snippet></ROW><ROW><id>6487573</id><snippet>import subprocess
process = subprocess.Popen('command', cwd = 'directory')
</snippet></ROW><ROW><id>6487573</id><snippet>ShellExecute</snippet></ROW><ROW><id>6487573</id><snippet>os.startfile</snippet></ROW><ROW><id>6487573</id><snippet>ctypes</snippet></ROW><ROW><id>6487595</id><snippet>Model.__init__</snippet></ROW><ROW><id>6487835</id><snippet>xreadlines()</snippet></ROW><ROW><id>6487835</id><snippet>with</snippet></ROW><ROW><id>6487835</id><snippet>r</snippet></ROW><ROW><id>6487835</id><snippet>with open(sys.argv[1], 'r') as r:
    for curline in r:
        sift = string.split(curline, ' ')
        ip = sift[1]

    ...
</snippet></ROW><ROW><id>6487835</id><snippet>or</snippet></ROW><ROW><id>6487835</id><snippet>if curport in ('3128', '8080', '80'):
</snippet></ROW><ROW><id>6487959</id><snippet>&lt;!--#include virtual="/footer.html" --&gt;
</snippet></ROW><ROW><id>6488053</id><snippet>newarray['item1']</snippet></ROW><ROW><id>6488053</id><snippet>newarray['item2']</snippet></ROW><ROW><id>6488578</id><snippet>str1 = 'foo1({0}).foo2({1})'
para = [1,2]
eval(str1.format(*para)) # equivalent to eval(str1.format(1,2))
</snippet></ROW><ROW><id>6489134</id><snippet>from datetime import datetime
class Venue(object):
    """Collection of events"""
    def __init__(self):
        self.events_list = []

    def add_events(self,*args):
        for e in args:
            self.events_list.append(e)

    def sort_list(self):
        self.events_list.sort(key=lambda e: e.start_date)

    def find_spare_times(self):
        self.sort_list()
        for event in self.events_list:
            yield event.start_date
            yield event.end_date

    def add_spare_events(self):
        l = list(self.find_spare_times())
        print l
        new_start,new_end = None, None
        for e in l[1:]:
            if new_start:
                new_end = e
                self.add_events(Event(new_start,new_end,res=False))
                new_start = None
            else:
                new_start = e
                new_end = None

    def get_events(self):
        return self.events_list

class Event(object):
    """Holds the data for an individual event"""
    def __init__(self,start_date, end_date,res=True):
        self.start_date = start_date
        self.end_date = end_date
        self.reserved = res

# create a couple of events with some spare time between them...
def main():
    ev1 = Event(datetime(2011,1,1,5),datetime(2011,1,1,6))
    ev2 = Event(datetime(2011,1,1,8),datetime(2011,1,1,9))

    v = Venue()
    v.add_events(ev1,ev2)
    print v.get_events()
    v.add_spare_events()
    print v.get_events()

if __name__ == "__main__":
    main()
</snippet></ROW><ROW><id>6489174</id><snippet>__unicode__</snippet></ROW><ROW><id>6489174</id><snippet>Bank</snippet></ROW><ROW><id>6489174</id><snippet>class Bank(models.Model):

    ...

    def __unicode__(self):
        return unicode(self.name)
</snippet></ROW><ROW><id>6489194</id><snippet>request.FILES</snippet></ROW><ROW><id>6489194</id><snippet>form = AccountForm(request.POST, request.FILES) # A form bound to the POST data
</snippet></ROW><ROW><id>6489194</id><snippet>save()</snippet></ROW><ROW><id>6489194</id><snippet>save_m2m()</snippet></ROW><ROW><id>6489194</id><snippet>ModelForm</snippet></ROW><ROW><id>6489194</id><snippet>is_valid()</snippet></ROW><ROW><id>6489194</id><snippet>is_multipart()</snippet></ROW><ROW><id>6489194</id><snippet>request.FILES</snippet></ROW><ROW><id>6489326</id><snippet>SchemaNode</snippet></ROW><ROW><id>6489326</id><snippet>title</snippet></ROW><ROW><id>6489326</id><snippet>colander.SchemaNode(colander.String(),
                    title='Complete name')
</snippet></ROW><ROW><id>6489699</id><snippet>u"""</snippet></ROW><ROW><id>6489699</id><snippet>u</snippet></ROW><ROW><id>6489699</id><snippet>&gt;&gt;&gt; a=u"""\\u003cdiv class=\\"pas status fcg\\"&gt;Loading...\\u003c\\/div&gt;
... \\u003c\\/div&gt;\\u003cdiv class=\\"uiTypeaheadView fbChatBuddyListTypeaheadView dark hidden_elem\\" id=\\"u971289_14\\"&gt;\\u003c\\/div&gt;
... \\u003c\\/div&gt;\\u003c\\/div&gt;\\u003cdiv class=\\"fbNubFlyoutFooter\\"&gt;
... \\u003cdiv class=\\"uiTypeahead uiClearableTypeahead fbChatTypeahead\\" id=\\"u971289_15\\"&gt;
... \\u003cdiv class=\\"wrap\\"&gt;\\u003clabel class=\\"clear uiCloseButton\\" for=\\"u971291_21\\"&gt;
... """
&gt;&gt;&gt; print(a.decode('unicode_escape')).replace('\\/', '/')
&lt;div class="pas status fcg"&gt;Loading...&lt;\/div&gt;
&lt;\/div&gt;&lt;div class="uiTypeaheadView fbChatBuddyListTypeaheadView dark hidden_elem" id="u971289_14"&gt;&lt;\/div&gt;
&lt;\/div&gt;&lt;\/div&gt;&lt;div class="fbNubFlyoutFooter"&gt;
&lt;div class="uiTypeahead uiClearableTypeahead fbChatTypeahead" id="u971289_15"&gt;
&lt;div class="wrap"&gt;&lt;label class="clear uiCloseButton" for="u971291_21"&gt;
</snippet></ROW><ROW><id>6489699</id><snippet>\/</snippet></ROW><ROW><id>6489699</id><snippet>/</snippet></ROW><ROW><id>6490106</id><snippet>|</snippet></ROW><ROW><id>6490106</id><snippet>&amp;</snippet></ROW><ROW><id>6490106</id><snippet>and</snippet></ROW><ROW><id>6490106</id><snippet>or</snippet></ROW><ROW><id>6490106</id><snippet>&gt;&gt;&gt; def talk(x):
...     print "Evaluating: ", bool(x)
...     return x
... 
&gt;&gt;&gt; talk(1 == 1) or talk(2 == 1)   # 2 == 1 is not evaluated
Evaluating:  True
True
&gt;&gt;&gt; talk(1 == 1) and talk(2 == 1)
Evaluating:  True
Evaluating:  False
False
&gt;&gt;&gt; talk(1 == 2) and talk(1 == 3)  # 1 == 3 is not evaluated
Evaluating:  False
False
</snippet></ROW><ROW><id>6490106</id><snippet>&gt;&gt;&gt; def eager_or(a, b):
...    return a or b
...
&gt;&gt;&gt; eager_or(talk(1 == 1), talk(2 == 1))
Evaluating:  True
Evaluating:  False
True
</snippet></ROW><ROW><id>6490106</id><snippet>a</snippet></ROW><ROW><id>6490106</id><snippet>b</snippet></ROW><ROW><id>6490106</id><snippet>or</snippet></ROW><ROW><id>6490106</id><snippet>|</snippet></ROW><ROW><id>6490106</id><snippet>&amp;</snippet></ROW><ROW><id>6490106</id><snippet>&gt;&gt;&gt; bin(0b11110000 &amp; 0b10101010)
'0b10100000'
&gt;&gt;&gt; bin(0b11110000 | 0b10101010)
'0b11111010'
</snippet></ROW><ROW><id>6490106</id><snippet>|</snippet></ROW><ROW><id>6490106</id><snippet>&gt;&gt;&gt; frame = wx.Frame(title="My Frame", style=wx.MAXIMIZE | wx.STAY_ON_TOP)
&gt;&gt;&gt; bin(wx.MAXIMIZE)
'0b10000000000000'
&gt;&gt;&gt; bin(wx.STAY_ON_TOP)
'0b1000000000000000'
&gt;&gt;&gt; bin(wx.MAXIMIZE | wx.STAY_ON_TOP)
'0b1010000000000000'
</snippet></ROW><ROW><id>6490106</id><snippet>&gt;&gt;&gt; set("abcd") &amp; set("cdef")
set(['c', 'd'])
&gt;&gt;&gt; set("abcd") | set("cdef")
set(['a', 'c', 'b', 'e', 'd', 'f'])
</snippet></ROW><ROW><id>6490608</id><snippet>a.insert(0, a.pop())
</snippet></ROW><ROW><id>6490608</id><snippet>collections.deque</snippet></ROW><ROW><id>6491319</id><snippet>reader = csv.reader( (line.replace('\0','') for line in f) , delimiter=';',quotechar = '"')
</snippet></ROW><ROW><id>6491688</id><snippet>line = [(1, {'even': False, 'foo': 'bar'}), ..., (2332, {'even': True, 'foo': 'baz'}), ...]
</snippet></ROW><ROW><id>6491688</id><snippet>line = "4 0 2837 9323 ..."
line = [(int(n), dict()) for n in line.split()]
</snippet></ROW><ROW><id>6491688</id><snippet>for n, attributes in line:
    ...
    attributes['foo'] = 'bar'
</snippet></ROW><ROW><id>6491775</id><snippet>&gt;&gt;&gt; "%.02f" % 150
'150.00'
</snippet></ROW><ROW><id>6491966</id><snippet>top</snippet></ROW><ROW><id>6491966</id><snippet>free</snippet></ROW><ROW><id>6492093</id><snippet>from multiprocessing import Queue
from Queue import Empty
q = Queue()
try:
    q.get( False )
except Empty:
    print "Queue was empty"
</snippet></ROW><ROW><id>6492093</id><snippet>import multiprocessing
import Queue
q = multiprocessing.Queue()
try:
    q.get( False )
execpt Queue.Empty:
    print "Queue was empty"
</snippet></ROW><ROW><id>6492108</id><snippet>float()</snippet></ROW><ROW><id>6492108</id><snippet>e</snippet></ROW><ROW><id>6492108</id><snippet>&gt;&gt;&gt; float("5.785e1")
57.85
</snippet></ROW><ROW><id>6492108</id><snippet>map(float, line.split())</snippet></ROW><ROW><id>6492428</id><snippet>instance</snippet></ROW><ROW><id>6492428</id><snippet>POST</snippet></ROW><ROW><id>6492428</id><snippet>form = AccountForm(request.POST, request.FILES) # A form bound to the POST data
</snippet></ROW><ROW><id>6492428</id><snippet>form = AccountForm(request.POST, request.FILES, instance=f) # A form bound to the POST data
</snippet></ROW><ROW><id>6492428</id><snippet>instance=None</snippet></ROW><ROW><id>6492428</id><snippet>instance</snippet></ROW><ROW><id>6492428</id><snippet>def edit_account(request, acc_id=None):
    if acc_id:
        f = Account.objects.get(pk=acc_id)
    else:
        f = None

    if request.method == 'POST': # If the form has been submitted...
        form = AccountForm(request.POST, request.FILES, instance=f) # A form bound to the POST data
        if form.is_valid(): # All validation rules pass
            form.save()
            return HttpResponseRedirect('/thanks/') # Redirect after POST
    else:
        form = AccountForm(instance=f) # An unbound form

    return render_to_response('account_form.html', {
        'form': form,
    })
</snippet></ROW><ROW><id>6493237</id><snippet>errors_list.sort(key=lambda x: (x, find_pos(x, search_terms)))
</snippet></ROW><ROW><id>6493237</id><snippet>key</snippet></ROW><ROW><id>6493237</id><snippet>cmp</snippet></ROW><ROW><id>6493237</id><snippet>key</snippet></ROW><ROW><id>6493237</id><snippet>max()</snippet></ROW><ROW><id>6493237</id><snippet>width = max(map(len, errors_list))
</snippet></ROW><ROW><id>6493237</id><snippet>right_align = "&gt;{}".format(width)
</snippet></ROW><ROW><id>6493237</id><snippet>format()</snippet></ROW><ROW><id>6493237</id><snippet>str</snippet></ROW><ROW><id>6493237</id><snippet>for item in errors_list:
    print format(item, right_align)
</snippet></ROW><ROW><id>6493237</id><snippet>str.rjust(item, size)</snippet></ROW><ROW><id>6493237</id><snippet>item.rjust(size)</snippet></ROW><ROW><id>6493662</id><snippet>n</snippet></ROW><ROW><id>6493662</id><snippet>heapq.nsmallest()</snippet></ROW><ROW><id>6493662</id><snippet>n</snippet></ROW><ROW><id>6493662</id><snippet>&gt;&gt;&gt; from heapq import nsmallest
&gt;&gt;&gt; from random import random
&gt;&gt;&gt; values = [random() for i in range(20)]
&gt;&gt;&gt; values
[0.012227103410989537, 0.9782624648209769, 0.9896111545377924, 0.9033620518745159, 0.6767780103989406, 0.4595455061820246, 0.39814471642551696, 0.6904798136040561, 0.8727083752258934, 0.6680153337266017, 0.606044647078923, 0.5644656135679249, 0.934351848916147, 0.05955628567745763, 0.7236000566917332, 0.8303865367817055, 0.9671576336593124, 0.3164892315873573, 0.8416372881413415, 0.5009057933309073]
&gt;&gt;&gt; nsmallest(4, range(len(values)), key=lambda i: values[i])
[0, 13, 17, 6]
</snippet></ROW><ROW><id>6493662</id><snippet>&gt;&gt;&gt; nsmallest(4, range(len(values)), key=values.__getitem__)
[0, 13, 17, 6]
</snippet></ROW><ROW><id>6493662</id><snippet>def indices():
    for k in range(47):
        for j in range(1000):
            for i in range(40):
                yield k, j, i
def keyfn(ind):
    k, j, i = ind
    return list_a[k][j][i]

print(nsmallest(4, indices(), key=keyfn))
</snippet></ROW><ROW><id>6493765</id><snippet>'(%s)' % ','.join(map(str,x))
</snippet></ROW><ROW><id>6493765</id><snippet>IN</snippet></ROW><ROW><id>6493765</id><snippet>(1,2,3,4,5,6)
</snippet></ROW><ROW><id>6493845</id><snippet>reader = csv.reader(open("reference.txt"), delimiter = "\t")
reader2 = csv.reader(open("current.txt"), delimiter = "\t")
</snippet></ROW><ROW><id>6493845</id><snippet>reader = list(csv.reader(open("reference.txt"), delimiter = "\t"))
reader2 = list(csv.reader(open("current.txt"), delimiter = "\t"))
</snippet></ROW><ROW><id>6493845</id><snippet>list()</snippet></ROW><ROW><id>6494151</id><snippet>print 'The total price is: %.2f' % result</snippet></ROW><ROW><id>6494411</id><snippet>try:
    last_note = client.note_set.latest("datetime")
except DoesNotExist:
    last_note = None
</snippet></ROW><ROW><id>6494519</id><snippet>random.sample()</snippet></ROW><ROW><id>6494519</id><snippet>&gt;&gt;&gt; random.sample(range(1, 16), 3)
[11, 10, 2]
</snippet></ROW><ROW><id>6494519</id><snippet>population = [1, 2, 3, 4, 5, 6, 5, 4, 3, 2, 1]
population = set(population)
samples = random.sample(population, 3)
</snippet></ROW><ROW><id>6494534</id><snippet>&gt;&gt;&gt; nan = float('NaN')
&gt;&gt;&gt; left = (nan, nan)
&gt;&gt;&gt; right = (nan, nan)
&gt;&gt;&gt; left==right
True
&gt;&gt;&gt; left[0]==right[0]
False
</snippet></ROW><ROW><id>6494732</id><snippet>import sys
from sys import _getframe as getframe
import atexit

examined_modules = []

def gendeps():
    """Adds the calling module to the initialization queue."""
    # Get the calling module's name, and add it to the intialization queue
    calling_module_name = getframe(1).f_globals['__name__']
    examined_modules.append(calling_module_name)

def init():
    """Initializes all examined modules in the correct order."""

    for module in examined_modules:
        module = sys.modules[module]
        if hasattr(module, 'init'):
            module.init()
        if hasattr(module, 'deinit'):
            # So modules get de-initialized in the correct order,
            # as well
            atexit.register(module.deinit)
</snippet></ROW><ROW><id>6494834</id><snippet>run_gunicorn</snippet></ROW><ROW><id>6495153</id><snippet>locals</snippet></ROW><ROW><id>6495153</id><snippet>for name, value in locals().items():
     if isinstance(value, someclass):
        do something
</snippet></ROW><ROW><id>6495153</id><snippet> In [25]: np.who()
 Name            Shape            Bytes            Type
 ===========================================================

 anp             9                36               int32

 Upper bound on total bytes  =       36

 In [26]: for name, value in locals().items():
 ....:     if isinstance(value, np.ndarray):
 ....:         print name
 ....:         print value
 ....:         del globals()[name]
 ....: 
 anp
 [1 2 3 4 5 6 7 8 9]

 In [27]: np.who()

 Upper bound on total bytes  =       0
</snippet></ROW><ROW><id>6495277</id><snippet>timesince</snippet></ROW><ROW><id>6495277</id><snippet>from datetime import datetime, timedelta
from django import template
from django.utils.timesince import timesince

register = template.Library()

@register.filter
def age(value):
    now = datetime.now()
    try:
        difference = now - value
    except:
        return value

    if difference &lt;= timedelta(minutes=1):
        return 'just now'
    return '%(time)s ago' % {'time': timesince(value).split(', ')[0]}
</snippet></ROW><ROW><id>6495351</id><snippet>Shell("cmd.exe /c " &amp; compiler &amp; " """ &amp; fileName &amp; " "" &gt; ""C:\output.txt"" ", vbNormalFocus)
</snippet></ROW><ROW><id>6495835</id><snippet>pythonbrew/commands/py.py</snippet></ROW><ROW><id>6495835</id><snippet>subprocess.Popen()</snippet></ROW><ROW><id>6495900</id><snippet>item in clean_compare</snippet></ROW><ROW><id>6495900</id><snippet>&gt;&gt;&gt; clean_compare = [i[13:-1] for i in compare]
&gt;&gt;&gt; clean_compare
['bark', 'dentla', 'group', 'fusion']
&gt;&gt;&gt; name
['group', 'sound', 'bark', 'dentla', 'test']
&gt;&gt;&gt; {i:i in clean_compare for i in name} #for Python 2.7+
{'sound': False, 'dentla': True, 'bark': True, 'test': False, 'group': True}
</snippet></ROW><ROW><id>6495900</id><snippet>&gt;&gt;&gt; d
{'sound': False, 'dentla': True, 'bark': True, 'test': False, 'group': True}
&gt;&gt;&gt; for i,j in d.items():
...     print(i,j)
... 
sound False
dentla True
bark True
test False
group True
</snippet></ROW><ROW><id>6495900</id><snippet>&gt;&gt;&gt; name
['group', 'sound', 'bark', 'dentla', 'test']
&gt;&gt;&gt; clean_compare
['bark', 'dentla', 'group', 'fusion']
&gt;&gt;&gt; for i in name:
...     print(i, i in clean_compare)
... 
group True
sound False
bark True
dentla True
test False
</snippet></ROW><ROW><id>6496105</id><snippet>self.fields['business'].queryset = Business.objects.filter(financialproduct__id=fpID.id) 
</snippet></ROW><ROW><id>6496209</id><snippet>cdict = {'red':   [(0.0,  0.0, 0.0),
               (0.5,  1.0, 1.0),
               (1.0,  1.0, 1.0)],

     'green': [(0.0,  0.0, 0.0),
               (0.25, 0.0, 0.0),
               (0.75, 1.0, 1.0),
               (1.0,  1.0, 1.0)],

     'blue':  [(0.0,  0.0, 0.0),
               (0.5,  0.0, 0.0),
               (1.0,  1.0, 1.0)]}
</snippet></ROW><ROW><id>6496209</id><snippet>RdYlGn</snippet></ROW><ROW><id>6496209</id><snippet>cdict</snippet></ROW><ROW><id>6496209</id><snippet>plt.cm.RdYlGn._segmentdata
</snippet></ROW><ROW><id>6496209</id><snippet>matplotlib.colors.LinearSegmentedColormap</snippet></ROW><ROW><id>6496209</id><snippet>cdict</snippet></ROW><ROW><id>6496221</id><snippet>clients = list(client_response.clients.client)
clients.extend(list(client_response2.clients.client))
</snippet></ROW><ROW><id>6496871</id><snippet>tkinter</snippet></ROW><ROW><id>6496906</id><snippet>' '.join("some   user entered     text".split())
</snippet></ROW><ROW><id>6497052</id><snippet>create_string_buffer()</snippet></ROW><ROW><id>6497052</id><snippet>free()</snippet></ROW><ROW><id>6497052</id><snippet>malloc()</snippet></ROW><ROW><id>6497052</id><snippet>ctypes</snippet></ROW><ROW><id>6497115</id><snippet>"</snippet></ROW><ROW><id>6497115</id><snippet>$var = "Sum Random'z String\"s with quotemarks";
</snippet></ROW><ROW><id>6497115</id><snippet>$var</snippet></ROW><ROW><id>6497186</id><snippet>x is None</snippet></ROW><ROW><id>6497186</id><snippet>x</snippet></ROW><ROW><id>6497186</id><snippet>None</snippet></ROW><ROW><id>6497186</id><snippet>x</snippet></ROW><ROW><id>6497186</id><snippet>None</snippet></ROW><ROW><id>6497186</id><snippet>if "":
    print "non-empty"
else:
    print "empty"
</snippet></ROW><ROW><id>6497186</id><snippet>if</snippet></ROW><ROW><id>6497186</id><snippet>bool</snippet></ROW><ROW><id>6497186</id><snippet>&gt;&gt;&gt; bool("")
False
&gt;&gt;&gt; bool("x")
True
</snippet></ROW><ROW><id>6497340</id><snippet>for input in inputs:
    if input[:5].isnumeric():
        input = input[:5]
        # Takes the first 5 characters from the string 
</snippet></ROW><ROW><id>6497779</id><snippet>with open("file.to.create", "w") as file:
    file.truncate(10 ** 10)
</snippet></ROW><ROW><id>6497887</id><snippet>board = { "a1" : "o", "a2" : "k", # ...
}
</snippet></ROW><ROW><id>6497887</id><snippet>if board[move] == "o":
    # take appropriate action
</snippet></ROW><ROW><id>6498025</id><snippet>&gt;&gt;&gt; class LogMsg(unicode):
...      def __new__(cls, string_):
...         if string_[:7] == '!Silent':
...             cls.nolog = True
...             return super(LogMsg, cls).__new__(cls, string_[7:])
...         else:
...             cls.nolog = False
...             return super(LogMsg, cls).__new__(cls, string_)
... 
&gt;&gt;&gt; a = LogMsg('The hard drive is on fire!')
&gt;&gt;&gt; a
u'The hard drive is on fire!'
&gt;&gt;&gt; a.nolog
False
&gt;&gt;&gt; b = LogMsg('!SilentMy feet stink! :(')
&gt;&gt;&gt; b
u'My feet stink! :('
&gt;&gt;&gt; b.nolog
True
</snippet></ROW><ROW><id>6498025</id><snippet>!Silent</snippet></ROW><ROW><id>6498025</id><snippet>nolog</snippet></ROW><ROW><id>6498063</id><snippet>from gi.repository import Gtk

class aStatusIcon:
    def __init__(self):
        self.statusicon = Gtk.StatusIcon()
        self.statusicon.set_from_stock(Gtk.STOCK_HOME) 
        self.statusicon.connect("popup-menu", self.right_click_event)

        window = Gtk.Window()
        window.connect("destroy", lambda w: Gtk.main_quit())
        window.show_all()

    def right_click_event(self, icon, button, time):
        self.menu = Gtk.Menu()

        about = Gtk.MenuItem()
        about.set_label("About")
        quit = Gtk.MenuItem()
        quit.set_label("Quit")

        about.connect("activate", self.show_about_dialog)
        quit.connect("activate", Gtk.main_quit)

        self.menu.append(about)
        self.menu.append(quit)

        self.menu.show_all()

    def pos(menu, ignore, icon):
        return (Gtk.StatusIcon.position_menu(menu, icon))

        self.menu.popup(None, None, pos, self.statusicon, button, time) 

    def show_about_dialog(self, widget):
        about_dialog = Gtk.AboutDialog()

        about_dialog.set_destroy_with_parent(True)
        about_dialog.set_name("StatusIcon Example")
        about_dialog.set_version("1.0")
        about_dialog.set_authors(["Andrew Steele"])

        about_dialog.run()
        about_dialog.destroy()

aStatusIcon()
Gtk.main()
</snippet></ROW><ROW><id>6498163</id><snippet>import mechanize 

br = mechanize.Browser()
br.open('webpage.com') 

email='user@domain.com'

br.select_form(nr=0) 
br['email'] = email 
br.form.add_file(open('filename'), 'mime-type', 'filename')    
br.form.set_all_readonly(False) 
br.submit() 
</snippet></ROW><ROW><id>6498180</id><snippet>import itertools
for a, b, c in itertools.izip(lst1, lst2, lst3):
    ...
</snippet></ROW><ROW><id>6498180</id><snippet>izip</snippet></ROW><ROW><id>6498299</id><snippet>var preselect = function () {
    var results = $.ajax({
        url: "/autofill_featured",
        dataType: "json",
        data: {show_id: $("#id_show_id").val()}
    });
    return results;
};
</snippet></ROW><ROW><id>6498299</id><snippet>$.ajax</snippet></ROW><ROW><id>6498299</id><snippet>jqXHR</snippet></ROW><ROW><id>6498299</id><snippet>$.ajax({
    /* ... */
    success: function (data) {
        /* Set date pickers date 
           I am  not sure about multiDatePicker API */
    }
});
</snippet></ROW><ROW><id>6498427</id><snippet>print pre_in ( ['+', 8, 9] )
</snippet></ROW><ROW><id>6498427</id><snippet>(8 + 9)
</snippet></ROW><ROW><id>6498427</id><snippet>class Calculator:
    def __init__ (self):
        self.stack = []

    def push (self, p):
        if p in ['+', '-', '*', '/']:
            op1 = self.stack.pop ()
            op2 = self.stack.pop ()
            self.stack.append ('(%s %s %s)' % (op1, p, op2) )
        elif p == '!':
            op = self.stack.pop ()
            self.stack.append ('%s!' % (op) )
        elif p in ['sin', 'cos', 'tan']:
            op = self.stack.pop ()
            self.stack.append ('%s(%s)' % (p, op) )
        else:
            self.stack.append (p)

    def convert (self, l):
        l.reverse ()
        for e in l:
            self.push (e)
        return self.stack.pop ()

c = Calculator ()

print c.convert ( ['+', 8, 9] )
print c.convert ( ['!', 42] )
print c.convert ( ['sin', 'pi'] )
print c.convert ( ['+', 'sin', '/', 'x', 2, 'cos', '/', 'x', 3] )
</snippet></ROW><ROW><id>6498666</id><snippet>piston</snippet></ROW><ROW><id>6498666</id><snippet>django-tastypie</snippet></ROW><ROW><id>6498666</id><snippet>tastypie</snippet></ROW><ROW><id>6498666</id><snippet>my_model.save()</snippet></ROW><ROW><id>6498666</id><snippet>Backbone.sync</snippet></ROW><ROW><id>6498666</id><snippet>backbone.js</snippet></ROW><ROW><id>6498666</id><snippet>eco</snippet></ROW><ROW><id>6498666</id><snippet>stylus</snippet></ROW><ROW><id>6498666</id><snippet>brunch watch</snippet></ROW><ROW><id>6498666</id><snippet>brunch build</snippet></ROW><ROW><id>6498666</id><snippet>requirejs</snippet></ROW><ROW><id>6498666</id><snippet>brunch</snippet></ROW><ROW><id>6498876</id><snippet>readability counts</snippet></ROW><ROW><id>6498876</id><snippet>def dec(input_, output_):
    if type(input_) is list:
        for subitem in input_:
            dec(subitem, output_)
    else:
        output_.append(input_)
</snippet></ROW><ROW><id>6498876</id><snippet>input_ = [['a-3','b-3', ['x','hello', ['3','b']]],'r',['j']]
output_ = ['a-3', 'b-3', 'x', 'hello', '3', 'b', 'r', 'j']
</snippet></ROW><ROW><id>6499017</id><snippet>#! /usr/bin/env perl

use strict;
use warnings;

use Stream qw/ filter head node promise show tail upfrom /;

use subs 'sieve';  # no parens on recursive calls
sub sieve {
  my($s) = @_;
  my $n = head $s;
  node $n, promise { sieve filter { $_[0] % $n != 0 } tail $s };
}

sub primes { sieve upfrom 2 }

show primes, 10;
</snippet></ROW><ROW><id>6499017</id><snippet>#! /usr/bin/env python

null_stream = (None, None)

def reduce(f, result, stream):
    if stream is null_stream: return result
    return reduce(f, f(result, head(stream)), tail(stream))

def take(N, stream):
    if N &lt;= 0 or stream is null_stream: return null_stream
    return (head(stream), lambda: take(N-1, tail(stream)))

def filter(pred, stream):
    if stream is null_stream: return null_stream
    if pred(head(stream)):
        return (head(stream), lambda: filter(pred, tail(stream)))
    return filter(pred, tail(stream))

def integers_from(N): return (N, lambda: integers_from(N+1))
def head((H, _)): return H
def tail((_, T)): return T()
def to_array(stream): return reduce(lambda a, x: a + [x], [], stream)

def sieve(stream):
    if stream is null_stream: return null_stream
    h = head(stream)
    return (h, lambda: sieve(filter(lambda x: x%h != 0, tail(stream))))

def primes(): return sieve(integers_from(2))

print to_array(take(10, primes()))
</snippet></ROW><ROW><id>6499017</id><snippet>primes</snippet></ROW><ROW><id>6499017</id><snippet>primes = sieve [2 ..]
  where sieve (x:xs) =
          let remains = filter (not . isMultipleOf x) xs
          in x : sieve remains
        isMultipleOf a b = b `mod` a == 0
</snippet></ROW><ROW><id>6499251</id><snippet>POST</snippet></ROW><ROW><id>6499251</id><snippet>refreshing_vcs</snippet></ROW><ROW><id>6499251</id><snippet>request.session</snippet></ROW><ROW><id>6499251</id><snippet>django-celery</snippet></ROW><ROW><id>6499338</id><snippet>a</snippet></ROW><ROW><id>6499338</id><snippet>b</snippet></ROW><ROW><id>6499338</id><snippet>itertools.product()</snippet></ROW><ROW><id>6499338</id><snippet>for i, j in itertools.product(a, b):
    # whatever
</snippet></ROW><ROW><id>6499436</id><snippet>None</snippet></ROW><ROW><id>6499436</id><snippet>TypeError</snippet></ROW><ROW><id>6499660</id><snippet>for t in list_of_tuples:
    t[1].sort()
</snippet></ROW><ROW><id>6499865</id><snippet>def flatten(iterable):
    """Recursively iterate lists and tuples.
    """
    for elm in iterable:
        if isinstance(elm, (list, tuple)):
            for relm in flatten(elm):
                yield relm
        else:
            yield elm
</snippet></ROW><ROW><id>6499865</id><snippet>__iter__</snippet></ROW><ROW><id>6499865</id><snippet>collections.Iterable</snippet></ROW><ROW><id>6500115</id><snippet>(?P&lt;year&gt;d{4})</snippet></ROW><ROW><id>6500115</id><snippet>(?P&lt;year&gt;\d{4})</snippet></ROW><ROW><id>6500115</id><snippet>(?P&lt;day&gt;\d{1,2})</snippet></ROW><ROW><id>6500115</id><snippet>(?P&lt;slug&gt;[-\w]+)</snippet></ROW><ROW><id>6500150</id><snippet>location=url</snippet></ROW><ROW><id>6500150</id><snippet>Client</snippet></ROW><ROW><id>6500150</id><snippet>client = Client(url, location=url)
</snippet></ROW><ROW><id>6500337</id><snippet>for item in items
</snippet></ROW><ROW><id>6500337</id><snippet>items = PastedItem.objects.all()
</snippet></ROW><ROW><id>6500337</id><snippet>{'form':form, 'items': items}
</snippet></ROW><ROW><id>6500377</id><snippet>class Method(object):
    def __init__(self, client, method_name):
        self.client = client
        self.method_name = method_name

    def __getattr__(self, key):
        return Method(self.client, '.'.join((self.method_name, key)))

    def __call__(self, **kwargs):
        print self.method_name, kwargs

class Client(object):
    def __getattr__(self, key):
        return Method(self, key)
</snippet></ROW><ROW><id>6500377</id><snippet>&gt;&gt;&gt; c = Client()  
&gt;&gt;&gt; c.some.method(x=1, y=2)
some.method {'y': 2, 'x': 1}
</snippet></ROW><ROW><id>6500498</id><snippet>__getitem__</snippet></ROW><ROW><id>6500498</id><snippet>class Root(object):
    def __getitem__(self, key):
        if key in ['Red', 'Green']:
            return ColorCategory(key)
        elif key in ['4', '5']:
            return SizeCategory(key)

class ColorCategory(object):
    ...

class SizeCategory(object):
    ...
</snippet></ROW><ROW><id>6500498</id><snippet>    config.add_view('myapp.views.color',
                context='myapp:resources.ColorCategory', name='',
                renderer='myapp:templates/color.mak')

    config.add_view('myapp.views.size',
                context='myapp:resources.SizeCategory', name='',
                renderer='myapp:templates/size.mak')
</snippet></ROW><ROW><id>6500498</id><snippet>ColorCategory('Red')</snippet></ROW><ROW><id>6500498</id><snippet>''</snippet></ROW><ROW><id>6500504</id><snippet>SELECT … FOR UPDATE</snippet></ROW><ROW><id>6500504</id><snippet>UPDATE</snippet></ROW><ROW><id>6500504</id><snippet>#!/usr/bin/perl
use DBI;
$numchild = 0;
$SIG{CHLD} = sub { if (wait) {$numchild--;} };

sub worker($)
{
  my ($i) = @_;
  my ($job);

  my $dbh = DBI-&gt;connect("dbi:Pg:host=localhost",undef,undef,{'RaiseError'=&gt;0, 'AutoCommit'=&gt;0});

  my ($x) = 0;
  while(++$x)
  {
#    $dbh-&gt;do("lock table slots in access exclusive mode;") || die "Cannot lock at $i\n";
    my @id = $dbh-&gt;selectrow_array("select id from slots where job_name is NULL LIMIT 1 FOR UPDATE;");

    if ($#id &lt; 0)
    {
      $dbh-&gt;rollback;
      sleep(.5);
      next;
    }
    $job = "$$-$i-($x)";
    $dbh-&gt;do("update slots set job_name='$job' where id=$id[0];") || die "Cannot update at $i\n";
    $dbh-&gt;commit || die "Cannot commit\n";
    last;
  }
  if (!$job)
  {
    print STDERR "Could not find slots in 5 attempts for $i $$\n" if ($ENV{'verbose'});
    return;
  }
  else
  {
    print STDERR "Got $job\n" if ($ENV{'verbose'} &gt; 1);
  }
  sleep(rand(5));

#  $dbh-&gt;do("lock table slots in access exclusive mode;") || die "Cannot lock at $i\n";
  $dbh-&gt;do("update slots set usage=usage+1, job_name = NULL where job_name='$job';") || die "Cannot unlock $job";
  print STDERR "Unlocked $job\n" if ($ENV{'verbose'} &gt; 2);
  $dbh-&gt;commit || die "Cannot commit";
}

my $dbh = DBI-&gt;connect("dbi:Pg:host=localhost",undef,undef,{'RaiseError'=&gt;0, 'AutoCommit'=&gt;0});

$dbh-&gt;do("drop table slots;");
$dbh-&gt;commit;
$dbh-&gt;do("create table slots (id serial primary key, job_name text, usage int);") || die "Cannot create\n";
$dbh-&gt;do("insert into slots values (DEFAULT,NULL,0), (DEFAULT,NULL,0), (DEFAULT,NULL,0), (DEFAULT,NULL,0), (DEFAULT,NULL,0), (DEFAULT,NULL,0), (DEFAULT,NULL,0), (DEFAULT,NULL,0), (DEFAULT,NULL,0), (DEFAULT,NULL,0);") || die "Cannot insert";
$dbh-&gt;commit;

for(my $i=0;$i&lt;200;$i++)
{
  if (!fork)
  {
    worker($i);
    exit(0);
  }

  if (++$numchild &gt; 50)
  {
    sleep(1);
  }
}
while (wait &gt; 0)
{
  $numchild--;
  print "Waiting numchild $numchild\n";
  sleep(1);
}
my $dbh = DBI-&gt;connect("dbi:Pg:host=localhost",undef,undef,{'RaiseError'=&gt;0, 'AutoCommit'=&gt;0});
my $slots = $dbh-&gt;selectall_arrayref("select * from slots;") || die "Cannot do final select";
my $sum=0;
foreach my $slot (@$slots)
{
  printf("%02d %3d %s\n",$slot-&gt;[0], $slot-&gt;[2], $slot-&gt;[1]);
  $sum += $slot-&gt;[2];
}
print "Successfully made $sum entries\n";
</snippet></ROW><ROW><id>6500637</id><snippet>&gt;&gt;&gt; struct.unpack_from('1sxHxbxf', a)
('9', 255, 10, 2.8355782166755716e-09)
&gt;&gt;&gt; struct.unpack_from('f',a[8:])
(2.8355782166755716e-09,)
</snippet></ROW><ROW><id>6500637</id><snippet>=</snippet></ROW><ROW><id>6500637</id><snippet>&lt;</snippet></ROW><ROW><id>6500637</id><snippet>&gt;</snippet></ROW><ROW><id>6500637</id><snippet>!</snippet></ROW><ROW><id>6500637</id><snippet>&gt;&gt;&gt; struct.unpack_from('=1sxHxbxf', a)
('9', 255, 10, 110.01000213623047)
</snippet></ROW><ROW><id>6500711</id><snippet>re.search(r'\n', r'this\nis\nit')
</snippet></ROW><ROW><id>6500711</id><snippet>re.search(r'\\n', r'this\nis\nit')
</snippet></ROW><ROW><id>6500711</id><snippet>r</snippet></ROW><ROW><id>6500711</id><snippet>re.search(r'\n', 'this\nis\nit')
</snippet></ROW><ROW><id>6501064</id><snippet>[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]       &lt;-  b = 0; remove? no
 ^
[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]       &lt;-  b = 1; remove? yes
    ^
[0, 2, 3, 4, 5, 6, 7, 8, 9]          &lt;-  b = 3; remove? no
       ^
[0, 2, 3, 4, 5, 6, 7, 8, 9]          &lt;-  b = 4; remove? yes
          ^
[0, 2, 3, 5, 6, 7, 8, 9]             &lt;-  b = 6; remove? no
             ^
[0, 2, 3, 5, 6, 7, 8, 9]             &lt;-  b = 7; remove? yes
                ^
[0, 2, 3, 5, 6, 8, 9]                &lt;-  b = 9; remove? no
                   ^
</snippet></ROW><ROW><id>6501134</id><snippet>exit</snippet></ROW><ROW><id>6501134</id><snippet>sys.exit</snippet></ROW><ROW><id>6501134</id><snippet>exit</snippet></ROW><ROW><id>6501134</id><snippet>SystemExit</snippet></ROW><ROW><id>6501134</id><snippet>sys.exit</snippet></ROW><ROW><id>6501134</id><snippet>static PyObject *
sys_exit(PyObject *self, PyObject *args)
{
    PyObject *exit_code = 0;
    if (!PyArg_UnpackTuple(args, "exit", 0, 1, &amp;exit_code))
        return NULL;
    /* Raise SystemExit so callers may catch it or clean up. */
    PyErr_SetObject(PyExc_SystemExit, exit_code);
   return NULL;
}
</snippet></ROW><ROW><id>6501134</id><snippet>exit</snippet></ROW><ROW><id>6501134</id><snippet>class Quitter(object):
    def __init__(self, name):
        self.name = name
    def __repr__(self):
        return 'Use %s() or %s to exit' % (self.name, eof)
    def __call__(self, code=None):
        # Shells like IDLE catch the SystemExit, but listen when their
        # stdin wrapper is closed.
        try:
            sys.stdin.close()
        except:
            pass
        raise SystemExit(code)
__builtin__.quit = Quitter('quit')
__builtin__.exit = Quitter('exit')
</snippet></ROW><ROW><id>6501134</id><snippet>fork()</snippet></ROW><ROW><id>6501158</id><snippet>od -xcb myfile.py</snippet></ROW><ROW><id>6501158</id><snippet>vi</snippet></ROW><ROW><id>6501158</id><snippet>vi</snippet></ROW><ROW><id>6501158</id><snippet>^@</snippet></ROW><ROW><id>6501270</id><snippet>--logging=debug</snippet></ROW><ROW><id>6501270</id><snippet>import logging
...
def on_response(self, response):
    logging.debug(response)
    self.write(response.body)
</snippet></ROW><ROW><id>6501674</id><snippet>class Vertex(object):
    @classmethod
    def foo(cls):
        print cls.resource

Vertex.resource = 'something'
v = Vertex()
v.foo()
</snippet></ROW><ROW><id>6501674</id><snippet>__init__</snippet></ROW><ROW><id>6501674</id><snippet>class Vertex(object):

    def __init__(self, resource):
        if not hasattr(self.__class__, 'resource'):
            self.__class__.resource = resource

    @classmethod
    def foo(cls):
        print cls.resource

resource = 'some resource'
v = Vertex(resource)
v.foo()
</snippet></ROW><ROW><id>6501674</id><snippet>self.edges</snippet></ROW><ROW><id>6501674</id><snippet>create</snippet></ROW><ROW><id>6501674</id><snippet>__init__</snippet></ROW><ROW><id>6501902</id><snippet>numpy</snippet></ROW><ROW><id>6501902</id><snippet>import numpy as np
import Image

im = Image.open('fig1.png')
data = np.array(im)

r1, g1, b1 = 0, 0, 0 # Original value
r2, g2, b2 = 255, 255, 255 # Value that we want to replace it with

red, green, blue = data[:,:,0], data[:,:,1], data[:,:,2]
mask = (red == r1) &amp; (green == g1) &amp; (blue == b1)
data[:,:,:3][mask] = [r2, g2, b2]

im = Image.fromarray(data)
im.save('fig1_modified.png')
</snippet></ROW><ROW><id>6501928</id><snippet># -*- coding: utf-8 -*-
import sys, re
import codecs

#reload(sys)
#sys.setdefaultencoding('utf-8')

#prepareing the examples to work on
writer = codecs.open("input.txt",'w','utf-8')
examples = [u'가시 돋친(신랄한)평 spinosity',
            u'가장 완전한 (같은 종류의 것 중에서)',
            u'알코올이)표준강도(50%) 이하의 underproof',
            u'(암초 awash',
            u'치명적인(fatal) capital']
for exampl in examples:
    writer.write(exampl+"\n")
writer.write(exampl)
writer.close()

reader = codecs.open("input.txt",'r','utf-8')

#order of patterns is important,
#if you remove brackets first, the other won't find anything
patterns_to_remove = [r"\(.{1,}\)",r"[\(\)]"]

#one pattern would work just fine, with the loop is a bit more clear
#pat = r"(\(.{1,}\))|([\(\)])"    
#for row in reader:
#    row = re.sub(pat,'',row)#,re.U)
#    print row

reader.seek(0)
for row in reader:
    for pat in patterns_to_remove:
        row = re.sub(pat,'',row)#,re.U)
    print row
reader.close()
</snippet></ROW><ROW><id>6502404</id><snippet>SubElement</snippet></ROW><ROW><id>6502404</id><snippet>SubElement</snippet></ROW><ROW><id>6502404</id><snippet>append</snippet></ROW><ROW><id>6502404</id><snippet>#3.xml
root_element = ET.Element("root")
root_element.append(Bookstore)
root_element.append(root2)
tree = ET.ElementTree(root_element)
tree.write("3.xml")
</snippet></ROW><ROW><id>6502640</id><snippet>[0-9]{9}([0-9]{3})?
</snippet></ROW><ROW><id>6502640</id><snippet>\d</snippet></ROW><ROW><id>6502640</id><snippet>[0-9]</snippet></ROW><ROW><id>6502640</id><snippet>[0-9]{3}</snippet></ROW><ROW><id>6502640</id><snippet>^</snippet></ROW><ROW><id>6502640</id><snippet>$</snippet></ROW><ROW><id>6502640</id><snippet>\b</snippet></ROW><ROW><id>6502640</id><snippet>re.match()</snippet></ROW><ROW><id>6502640</id><snippet>123456789</snippet></ROW><ROW><id>6502640</id><snippet>1234567890</snippet></ROW><ROW><id>6502742</id><snippet>import matplotlib.pyplot as plt
import matplotlib.cm as cm
import numpy as np

# Generate data....
intervals, weights = [], []
max_weight = 5
for _ in range(30):
    numtimes = np.random.randint(3, 15)
    times = np.random.randint(1, 24*60 - 1, numtimes)
        times = np.r_[0, times, 24*60]
    times.sort()
    intervals.append(np.diff(times) / 60.0)
    weights.append(max_weight * np.random.random(numtimes + 1))

# Plot the data as a stacked bar chart.
for i, (interval, weight) in enumerate(zip(intervals, weights)):
    # We need to calculate where the bottoms of the bars will be.
    bottoms = np.r_[0, np.cumsum(interval[:-1])]

    # We want the left edges to all be the same, but increase with each day.
    left = len(interval) * [i]
    patches = plt.bar(left, interval, bottom=bottoms, align='center')

    # And set the colors of each bar based on the weights
    for val, patch in zip(weight, patches):
        # We need to normalize the "weight" value between 0-1 to feed it into
        # a given colorbar to generate an actual color...
        color = cm.jet(float(val) / max_weight)
        patch.set_facecolor(color)

# Setting the ticks and labels manually...
plt.xticks(range(0, 30, 2), range(1, 31, 2))
plt.yticks(range(0, 24 + 4, 4), 
           ['12am', '4am', '8am', '12pm', '4pm', '8pm', '12am'])
plt.xlabel('Day')
plt.ylabel('Hour')
plt.axis('tight')
plt.show()
</snippet></ROW><ROW><id>6502863</id><snippet>from scrapy import signals, log
from scrapy.xlib.pydispatch import dispatcher
from scrapy.crawler import CrawlerProcess
from scrapy.conf import settings
from scrapy.http import Request

def handleSpiderIdle(spider):
    '''Handle spider idle event.''' # http://doc.scrapy.org/topics/signals.html#spider-idle
    print '\nSpider idle: %s. Restarting it... ' % spider.name
    for url in spider.start_urls: # reschedule start urls
        spider.crawler.engine.crawl(Request(url, dont_filter=True), spider)

mySettings = {'LOG_ENABLED': True, 'ITEM_PIPELINES': 'mybot.pipeline.validate.ValidateMyItem'} # global settings http://doc.scrapy.org/topics/settings.html

settings.overrides.update(mySettings)

crawlerProcess = CrawlerProcess(settings)
crawlerProcess.install()
crawlerProcess.configure()

class MySpider(BaseSpider):
    start_urls = ['http://site_to_scrape']
    def parse(self, response):
        yield item

spider = MySpider() # create a spider ourselves
crawlerProcess.queue.append_spider(spider) # add it to spiders pool

dispatcher.connect(handleSpiderIdle, signals.spider_idle) # use this if you need to handle idle event (restart spider?)

log.start() # depends on LOG_ENABLED
print "Starting crawler."
crawlerProcess.start()
print "Crawler stopped."
</snippet></ROW><ROW><id>6502863</id><snippet>for spiderConfig in spiderConfigs:
    spiderConfig = spiderConfig.copy() # a dictionary similar to the one with global settings above
    spiderName = spiderConfig.pop('name') # name of the spider is in the configs - i can use the same spider in several instances - giving them different names
    spiderModuleName = spiderConfig.pop('spiderClass') # module with the spider is in the settings
    spiderModule = __import__(spiderModuleName, {}, {}, ['']) # import that module
    SpiderClass = spiderModule.Spider # spider class is named 'Spider'
    spider = SpiderClass(name = spiderName, **spiderConfig) # create the spider with given particular settings
    crawlerProcess.queue.append_spider(spider) # add the spider to spider pool
</snippet></ROW><ROW><id>6502863</id><snippet>name = punderhere_com    
allowed_domains = plunderhere.com
spiderClass = scraper.spiders.plunderhere_com
start_urls = http://www.plunderhere.com/categories.php?
</snippet></ROW><ROW><id>6502889</id><snippet>--extra-index-url=http://dist.pinaxproject.com/dev/

docutils==0.6
gdata==1.3.3
Pygments==1.3.1
python-openid==2.2.5
python-twitter==0.6
pytz==2010h
simplejson==2.0.9
textile==2.1.4
vobject==0.8.1c
Markdown==2.0.3
ybrowserauth==1.2
geopy==0.94
diff-match-patch==20090804
django-atomformat==0.1.1.dev1
creole==1.1

# vobject depends on dateutil. it requires &gt;=1.1. OS X ships with 1.2 with
# Python 2.5 and requiring anything newer will break for --development. this
# is not an issue for the released tarball
python-dateutil&gt;=1.1

Django==1.2.5
django-ajax-validation==0.1.3
django-announcements==0.1.2
django-avatar==1.0.4
django-dbtemplates==0.5.8
django-notification==0.2a1.dev4
django-pagination==1.0.7
django-robots==0.6.1
django-messages==0.4.2
django-threadedcomments==0.5.2
django-extensions==0.4.1
django-uni-form==0.7.0
django-bookmarks==0.1.0
django-gravatar==0.1.0
django-mailer==0.2a1.dev3
django-friends==0.1.5
django-locations==0.1.1
django-oembed==0.1.1
django-swaps==0.5.3
django-flag==0.2.dev9
django-db-log==1.0.1
django-attachments==0.3.1
django-markup==0.3
django-microblogging==0.2.dev1
django-wakawaka==0.4.dev5
sorl-thumbnail==3.2.5
django-generic-flatblocks==0.9.1
django-frontendadmin==0.4
django-filter==0.5.3
django-photologue==2.3
django-tagging==0.3.1
django-staticfiles==0.2
django-debug-toolbar==0.8.3
django-tagging-ext==0.2.0
django-voting==0.1
django-sorting&gt;=0.1
django-groups==0.1.dev10
biblion==0.1.dev6
django-email-confirmation==0.2.dev4
django-openid==0.2.3.dev1
django-timezones==0.2.dev1
idios==0.1.dev6
</snippet></ROW><ROW><id>6503192</id><snippet>[x for x in y]</snippet></ROW><ROW><id>6503254</id><snippet>LANGUAGE_CODE           = 'en-us'
FIRST_DAY_OF_WEEK       = 0     # 0 is Sunday
# Convert to calendar module, where 0 is Monday :/
FIRST_DAY_OF_WEEK_CAL   = (FIRST_DAY_OF_WEEK - 1) % 7

# figure locale name
LOCAL_LANG              = LANGUAGE_CODE.split('-')[0]
LOCAL_COUNTRY           = LANGUAGE_CODE.split('-')[1].upper()
LOCALE_NAME             = LOCAL_LANG + '_' + LOCAL_COUNTRY + '.UTF8'
</snippet></ROW><ROW><id>6503254</id><snippet># -*- coding: utf8 -*-
class kCalendar(calendar.LocaleHTMLCalendar):
    def __init__(self, *args):
        # some customization I did ...
        calendar.LocaleHTMLCalendar.__init__(self, *args)  
        # super didn't work, can't remember why...
# more customization here...

kcal = kCalendar(date, settings.FIRST_DAY_OF_WEEK_CAL, 
    settings.LOCALE_NAME)
calhtml = kcal.formatmonth(date.year, date.month)
</snippet></ROW><ROW><id>6503254</id><snippet>#!/usr/bin/env bash

if [ "$#" -eq 0 ]; then
  echo -e "\nUsage: `basename $0` &lt;locale, eg: en_US&gt;\n"
  exit 1
fi

sudo /usr/share/locales/install-language-pack $1

if grep -q "$1" /etc/locale.nopurge
then
    # code if found
    echo -e "\n** not adding $1 to /etc/locale.nopurge, is already there.\n"
else
    sudo sh -c "echo $1 &gt;&gt; /etc/locale.nopurge"
    sudo sh -c "echo $1.UTF-8 &gt;&gt; /etc/locale.nopurge"
fi

sudo dpkg-reconfigure locales
</snippet></ROW><ROW><id>6503429</id><snippet>perm_iterator = itertools.permutations(list(graph.Nodes))

for item in perm_iterator:
   do_the_stuff(item)
</snippet></ROW><ROW><id>6503853</id><snippet>FORMS = {
    'account': AccountForm,
    'transaction': TransactionForm,
    ...
}

def create_object(request, object_class, object_id=None):
    form_class = FORMS[object_class]
    model = form_class._meta.model
    if object_id:
        object = model.object.get(pk=object_id)
</snippet></ROW><ROW><id>6503912</id><snippet>skip_header(file)</snippet></ROW><ROW><id>6503912</id><snippet>parse(line)</snippet></ROW><ROW><id>6503912</id><snippet>(ip, path)</snippet></ROW><ROW><id>6503912</id><snippet>from collections import defaultdict
first = defaultdict(int)
second = defaultdict(lambda: defaultdict(int))
for line in skip_header(file):
    ip, path = parse(line)
    first[path] += 1
    second[ip][path] += 1
</snippet></ROW><ROW><id>6503912</id><snippet>print "path count"
for path, count in first.iteritems():
    print "%s %d" % (path, count)
</snippet></ROW><ROW><id>6503912</id><snippet>print "ip path count"
for ip,d in second.iteritems():
     for path, count in d.iteritems():
         print "%s %s %d" % (ip, path, count)
</snippet></ROW><ROW><id>6504209</id><snippet>_</snippet></ROW><ROW><id>6504209</id><snippet>def drive(from_, to):
    pass
</snippet></ROW><ROW><id>6504515</id><snippet>    s.decode('unicode_escape')
</snippet></ROW><ROW><id>6504563</id><snippet>NSMutableArray* list = [NSMutableArray array];
[list addObject:[NSDictionary dictionaryWithObjectsAndKeys:@"first value",@"text", @"number 1",@"value", nil]];
[list addObject:[NSDictionary dictionaryWithObjectsAndKeys:@"second value",@"text", @"number 2",@"value", nil]];
[list addObject:[NSDictionary dictionaryWithObjectsAndKeys:@"third value",@"text", @"number 3",@"value", nil]];
</snippet></ROW><ROW><id>6504674</id><snippet>pre_in</snippet></ROW><ROW><id>6504674</id><snippet>&gt;&gt;&gt; pre_in(read_from(tok("(+ (square x) (square y))")))
'((x) + (y))'
</snippet></ROW><ROW><id>6504674</id><snippet>'(square(x) + square(y))'</snippet></ROW><ROW><id>6504674</id><snippet>SoS</snippet></ROW><ROW><id>6504674</id><snippet>(lambda (x y) (+ (square x) (square y)))</snippet></ROW><ROW><id>6504675</id><snippet>&lt;img src=""/&gt;
</snippet></ROW><ROW><id>6504716</id><snippet>"*"</snippet></ROW><ROW><id>6504716</id><snippet>"Products.ATContentTypes.interfaces.IATDocument"</snippet></ROW><ROW><id>6504716</id><snippet>plone.abovecontent</snippet></ROW><ROW><id>6504716</id><snippet>plone.abovecontenttitle</snippet></ROW><ROW><id>6504716</id><snippet>plone.app.layout</snippet></ROW><ROW><id>6504716</id><snippet>browser:viewlet</snippet></ROW><ROW><id>6504716</id><snippet>&lt;browser:viewlet
    name="your.html.snippet"
    for="Products.ATContentTypes.interfaces.IATDocument"
    manager="plone.app.layout.viewlet.interfaces.IAboveContent"
    template="htmlsnippet.pt"
    permission="zope.Public"
    /&gt;
</snippet></ROW><ROW><id>6504716</id><snippet>htmlsnippet.pt</snippet></ROW><ROW><id>6504716</id><snippet>plone.abovecontent</snippet></ROW><ROW><id>6504716</id><snippet>&lt;div i18n:domain="your"&gt;
    &lt;h3 i18:translate="html_snippet_header"&gt;This is a snippet of HTML that'll be injected into all Pages!&lt;/h3&gt;
&lt;/div&gt;
</snippet></ROW><ROW><id>6504716</id><snippet>&lt;?xml version="1.0"?&gt;
&lt;object&gt;
  &lt;order manager="plone.abovecontent" skinname="My Theme"
         based-on="Plone Default"&gt;
    &lt;viewlet name="your.html.snippet" insert-before="*"/&gt;
  &lt;/order&gt;
&lt;/object&gt;
</snippet></ROW><ROW><id>6504860</id><snippet>apt-get install libxml2-dev libxslt-dev
</snippet></ROW><ROW><id>6504860</id><snippet>apt-get install python-lxml
</snippet></ROW><ROW><id>6505035</id><snippet>list</snippet></ROW><ROW><id>6505035</id><snippet>my_list</snippet></ROW><ROW><id>6505035</id><snippet>diict</snippet></ROW><ROW><id>6505035</id><snippet>my_dict</snippet></ROW><ROW><id>6505035</id><snippet>for k in my_list:
    if k in my_dict:
        print k, my_dict[k]
</snippet></ROW><ROW><id>6505035</id><snippet>new_dict = {k: my_dict[k] for k in my_list if k in my_dict}
</snippet></ROW><ROW><id>6505132</id><snippet>class TCPServer(SocketServer.TCPServer):
allow_reuse_address = True 
</snippet></ROW><ROW><id>6505132</id><snippet>setsockopt</snippet></ROW><ROW><id>6505761</id><snippet>after</snippet></ROW><ROW><id>6505761</id><snippet>import Tkinter as tk
import random

class SampleApp(tk.Tk):
    def __init__(self, *args, **kwargs):
        self._running = False
        self._relx = None

        tk.Tk.__init__(self, *args, **kwargs)

        self.pack_propagate(False)
        self.configure(width=400, height=400)
        self.label = tk.Label(self, text="hello, world", background="red")
        self.button = tk.Button(self, text="Start", command=self.toggle)
        self.button.pack(side="top")

    def toggle(self):
        '''toggle animation on or off'''
        self._running = not self._running
        if self._running:
            self.button.configure(text="Stop")
            self.moveit()
        else:
            self.button.configure(text="Start")

    def moveit(self):
        '''Animate the label'''
        if not self._running:
            # animation has been stopped
            # hide the label from view.
            self.label.place_forget()

        if self._running:
            if not self.label.winfo_viewable():
                # not visible; establish future locations
                self._relx = [.5, .4, .3, .2, .1, 0]
            relx = self._relx.pop(0)
            self._relx.append(relx)
            self.label.place(relx=relx, rely=0.7)
            self.after(1000, self.moveit)

if __name__ == "__main__":
    app = SampleApp()
    app.mainloop()
</snippet></ROW><ROW><id>6506585</id><snippet>value</snippet></ROW><ROW><id>6506585</id><snippet>name</snippet></ROW><ROW><id>6506585</id><snippet>//input[@value='something' and @name='test' and count(attribute::*)=2]
</snippet></ROW><ROW><id>6506741</id><snippet>books = Book.objects.all()
user_relations = BookRelation.objects.filter(user=my_user)
# now create a dict of relations keyed by book id:
book_relations = dict((r.book_id, r) for r in user_relations)
# now annotate the books with relations if they exist:
for book in books:
    book.relation = book_relations.get(book.id)
</snippet></ROW><ROW><id>6506741</id><snippet>relation</snippet></ROW><ROW><id>6506741</id><snippet>BookRelation</snippet></ROW><ROW><id>6506763</id><snippet>normalize-space()</snippet></ROW><ROW><id>6506763</id><snippet>translate()</snippet></ROW><ROW><id>6506848</id><snippet>app.yaml</snippet></ROW><ROW><id>6506848</id><snippet>- url: /
  static_files: main.html
  upload: main\.html
</snippet></ROW><ROW><id>6506848</id><snippet>main.html</snippet></ROW><ROW><id>6506848</id><snippet>/</snippet></ROW><ROW><id>6507114</id><snippet>Handler</snippet></ROW><ROW><id>6507114</id><snippet>emit</snippet></ROW><ROW><id>6507114</id><snippet>def make_filetype_aware_handler(handler_class):
    class DontRepeatFiletypeHandler(handler_class):

        def __init__(self, *args, **kwds):
            super().__init__(*args, **kwds)
            self.previous_types = set()

        def emit(self, record):
            if not record.file_type in self.previous_types:
                self.previous_types.add(record.file_type)
                super().emit(record)
    return DontRepeatFiletypeHandler

FiletypeStreamHandler = make_filetype_aware_handler(logging.StreamHandler)

logger = logging.getLogger()
logger.addHandler(FiletypeStreamHandler(sys.stderr))
logger.debug('Found file of type %(file_type)', file_type='x-type/zomg')
</snippet></ROW><ROW><id>6507456</id><snippet>print " ".join(map(str, a))
</snippet></ROW><ROW><id>6507456</id><snippet>print "".join(format(x, "10.3f") for x in a)
</snippet></ROW><ROW><id>6507970</id><snippet>import mod
import sys
del sys.modules["mod"]
import mod as mod2
</snippet></ROW><ROW><id>6507970</id><snippet>mod</snippet></ROW><ROW><id>6507970</id><snippet>mod2</snippet></ROW><ROW><id>6507970</id><snippet>import imp

def my_import(name):
    file, pathname, description = imp.find_module(name)
    code = compile(file.read(), pathname, "exec", dont_inherit=True)
    file.close()
    module = imp.new_module(name)
    exec code in module.__dict__
    return module
</snippet></ROW><ROW><id>6507970</id><snippet>__file__</snippet></ROW><ROW><id>6507970</id><snippet>__path__</snippet></ROW><ROW><id>6507970</id><snippet>__package__</snippet></ROW><ROW><id>6508110</id><snippet>[+-]?\d+(?:\.\d+)?</snippet></ROW><ROW><id>6508110</id><snippet>&gt;&gt;&gt; nums = re.compile(r"[+-]?\d+(?:\.\d+)?")
&gt;&gt;&gt; nums.search("0.123").group(0)
'0.123'
&gt;&gt;&gt; nums.search("+0.123").group(0)
'+0.123'
&gt;&gt;&gt; nums.search("123").group(0)
'123'
&gt;&gt;&gt; nums.search("-123").group(0)
'-123'
&gt;&gt;&gt; nums.search("1").group(0)
'1'
</snippet></ROW><ROW><id>6508110</id><snippet>&gt;&gt;&gt; nums.search("0001.20000").group(0)
'0001.20000'
</snippet></ROW><ROW><id>6508110</id><snippet>[+-]?\d+(?:\.\d+)?(?:[eE][+-]?\d+)?</snippet></ROW><ROW><id>6508110</id><snippet>&gt;&gt;&gt; nums2 = re.compile(r"[+-]?\d+(?:\.\d+)?(?:[eE][+-]?\d+)?")
&gt;&gt;&gt; nums2.search("-1.23E+45").group(0)
'-1.23E+45'
&gt;&gt;&gt; nums2.search("0.1e-456").group(0)
'0.1e-456'
&gt;&gt;&gt; nums2.search("1e99").group(0)
'1e99'
</snippet></ROW><ROW><id>6508346</id><snippet>#[related_name]-group</snippet></ROW><ROW><id>6508346</id><snippet>(function($){
    $(document).ready(function(){

        function togglePictureInline(selected) {
            $.getJSON('/ajax/category-type/', { id: selected }, function (data, jqXHR) {
                if (data[0].fields.type == 1)
                    $('#pictures-group').show();
                else
                    $('#pictures-group').hide();
            });
        }

        var $category = $('#id_category');
        togglePictureInline($category.val());
        $category.change(function(){
            togglePictureInline($(this).val());
        });
    });
})(django.jQuery);
</snippet></ROW><ROW><id>6508346</id><snippet>from django.shortcuts import get_list_or_404
from django.core import serializers

def ajax_category_type(request):
    id = request.GET.get('id')
    categories = get_list_or_404(Category, id=id)
    data = serializers.serialize('json', categories, fields=('type',))
    return HttpResponse(data, mimetype='application/json')
</snippet></ROW><ROW><id>6508346</id><snippet>VideoAdmin</snippet></ROW><ROW><id>6508346</id><snippet>class VideoAdmin(admin.ModelAdmin):
    ...
    class Media:
        js = ('path/to/this.js',)
</snippet></ROW><ROW><id>6508346</id><snippet>templates/yourapp/video/change_form.html</snippet></ROW><ROW><id>6508346</id><snippet>{% extends 'admin/change_form.html' %}
{% block extrahead %}
    {{ block.super }}
    &lt;script src="path/to/this.js" type="text/javascript"&gt;&lt;/script&gt;
{% endblock %}
</snippet></ROW><ROW><id>6508491</id><snippet>:s/,$//</snippet></ROW><ROW><id>6508491</id><snippet>:n,ms/,$//</snippet></ROW><ROW><id>6508491</id><snippet>:%s/,$//</snippet></ROW><ROW><id>6508604</id><snippet>os.sys</snippet></ROW><ROW><id>6508604</id><snippet>os</snippet></ROW><ROW><id>6508604</id><snippet>sys</snippet></ROW><ROW><id>6508604</id><snippet>sys</snippet></ROW><ROW><id>6508611</id><snippet>(r'^clients/(?P&lt;client_id&gt;\d+)/$', views.get_client)</snippet></ROW><ROW><id>6508611</id><snippet>url(r'^clients/(?P&lt;client_id&gt;\d+)/$', views.get_client, name='MY_URL_NAME')</snippet></ROW><ROW><id>6508611</id><snippet>{% url MY_URL_NAME client.pk %}</snippet></ROW><ROW><id>6508611</id><snippet>url</snippet></ROW><ROW><id>6508611</id><snippet>django.conf.urls.defaults</snippet></ROW><ROW><id>6508616</id><snippet>libcloud</snippet></ROW><ROW><id>6508616</id><snippet>boto</snippet></ROW><ROW><id>6508616</id><snippet>boto</snippet></ROW><ROW><id>6508806</id><snippet>/Library/Python/2.6/site-packages-&gt; zipinfo python_twitter-0.8.2-py2.6.egg
Archive:  python_twitter-0.8.2-py2.6.egg   60381 bytes   8 files
-rw-r--r--  2.0 unx   122153 b- defN 16-Apr-11 16:57 twitter.py
-rw-r--r--  2.0 unx   128307 b- defN 28-Jun-11 09:14 twitter.pyc
-rw-r--r--  2.0 unx        1 b- defN 28-Jun-11 09:14 EGG-INFO/dependency_links.txt
-rw-r--r--  2.0 unx    25334 b- defN 28-Jun-11 09:14 EGG-INFO/PKG-INFO
-rw-r--r--  2.0 unx       28 b- defN 28-Jun-11 09:14 EGG-INFO/requires.txt
-rw-r--r--  2.0 unx      397 b- defN 28-Jun-11 09:14 EGG-INFO/SOURCES.txt
-rw-r--r--  2.0 unx        8 b- defN 28-Jun-11 09:14 EGG-INFO/top_level.txt
-rw-r--r--  2.0 unx        1 b- defN 28-Jun-11 09:14 EGG-INFO/zip-safe
8 files, 276229 bytes uncompressed, 59457 bytes compressed:  78.5%
</snippet></ROW><ROW><id>6508881</id><snippet>gzip</snippet></ROW><ROW><id>6508881</id><snippet>shutil</snippet></ROW><ROW><id>6508881</id><snippet>import gzip, shutil

src = open('executable', 'rb')
dest = gzip.open('executable.gz.jpg', 'wb')

shutil.copyfileobj(src, dest)

src.close()
dest.close()
</snippet></ROW><ROW><id>6508881</id><snippet>import gzip. shutil

src = gzip.open('executable.gz.jpg', 'rb')
dest = gzip.open('executable', 'wb')

shutil.copyfileobj(src, dest)

src.close()
dest.close()
</snippet></ROW><ROW><id>6509013</id><snippet>str='slope'+str(slope)
plt.text(2, 30, str, fontsize=15)
</snippet></ROW><ROW><id>6509013</id><snippet>plt.text(2, 30, r'slope='+str(slope), fontsize=15)</snippet></ROW><ROW><id>6509121</id><snippet>&gt;&gt;&gt; dict(set(a.iteritems()) ^ set(b.iteritems()))
{'a': 1, 'e': 5, 'd': 4}
</snippet></ROW><ROW><id>6509392</id><snippet>diff = lambda a,b: [x for x in a if x not in b]

mergelist = lambda lVals: reduce(lambda res,x: res + x, map(tuple, lVals))

diff(mergelist(A), mergelist(B))
diff(mergelist(B), mergelist(A))
</snippet></ROW><ROW><id>6509392</id><snippet>mergelist = lambda lVals: reduce(lambda res,x: res + x, map(tuple, lVals))
diff = set(a) ^ set(b) # would contains difference between two initial lists 
</snippet></ROW><ROW><id>6509392</id><snippet>A = [['a', 'b','c'], ['d','e', 'f']]
B = [['b', 'a', 'c'], ['a', 'o', 'p']]

diff = lambda a,b: [list(x) for x in map(tuple, map(sorted, a)) if x not in map(tuple, map(sorted, b))]
print diff(A, B)
print diff(B, A)
</snippet></ROW><ROW><id>6509402</id><snippet>#mymod.py
import urllib2

def openurl():
    req = urllib2.Request("http://duznotexist.com/")
    try:
        response = urllib2.urlopen(req)
    except urllib2.URLError as e:
        # add URL and reason to the exception object
        e.url = "http://duznotexist.com/"
        e.reason = "URL does not exist"
        raise e # re-raise the exception, so the calling function can catch it

#main.py
import urllib2
import mymod

try:
    mymod.openurl()
except urllib2.URLError as e:
    print "Website (%s) could not be reached due to %s" % (e.url, e.reason)
</snippet></ROW><ROW><id>6509744</id><snippet>JButton</snippet></ROW><ROW><id>6509744</id><snippet>focusGained</snippet></ROW><ROW><id>6509744</id><snippet>FocusListener</snippet></ROW><ROW><id>6509744</id><snippet>data = DefaultTableModel(items, columnNames)
mytable = JTable(data, focusGained=my.other.function)
</snippet></ROW><ROW><id>6510022</id><snippet>def my_sqrt(num):
    import math #load a module
    return math.sqrt(num) #call the function
</snippet></ROW><ROW><id>6510022</id><snippet>&gt;&gt;&gt; def f(module, function, *args):
...     return(getattr(__import__(module), function)(*args))
... 
&gt;&gt;&gt; f("math", "sqrt", 2)
1.4142135623730951
</snippet></ROW><ROW><id>6510025</id><snippet>self.panel</snippet></ROW><ROW><id>6510025</id><snippet>gs</snippet></ROW><ROW><id>6510025</id><snippet>gs</snippet></ROW><ROW><id>6510025</id><snippet>    sizer.Add(self.term, 5, wx.EXPAND | wx.TOP | wx.BOTTOM, 0) 

    gs = wx.GridSizer(1, 3, 0, 0) #Define the grid layout in rows, columns
    gs.AddMany([
        (wx.Button(self.panel, 3, 'Browse'), 0, wx.EXPAND),
        (wx.Button(self.panel, 1, 'RUN'), 0, wx.EXPAND),
        (wx.Button(self.panel, 2, 'QUIT'), 0, wx.EXPAND) ])

    self.panel.SetSizer(gs)

    sizer.Add(self.panel, 1, wx.EXPAND) #Add our defined grid layout above to our sizer
</snippet></ROW><ROW><id>6510188</id><snippet>__getattr__</snippet></ROW><ROW><id>6510188</id><snippet>object.__setattr__(self, name, value)
</snippet></ROW><ROW><id>6510484</id><snippet>#!/usr/bin/python3

# myList = [['keith', 'roger', 'david'], [5, 'nobody', 31], ['attack', 'thomas', 4]]
# myDict = {'55': '...', 'roger': '...'}

secondElements = {x[1] for x in myList}

filteredDict = {k:v for k,v in myDict.items() if (k in secondElements)}

print(filteredDict)
# prints: {'roger': '...'}
</snippet></ROW><ROW><id>6510484</id><snippet>secondElements</snippet></ROW><ROW><id>6510484</id><snippet>O(1)</snippet></ROW><ROW><id>6510484</id><snippet>(k.lower() in secondElements)</snippet></ROW><ROW><id>6510556</id><snippet>legacy_id</snippet></ROW><ROW><id>6510556</id><snippet>id</snippet></ROW><ROW><id>6510556</id><snippet>count = PlayerYear.objects.filter(team__legacy_id=3128).count()
</snippet></ROW><ROW><id>6510556</id><snippet>If you don't specify primary_key=True for any fields in your model, Django will automatically add an IntegerField to hold the primary key, so you don't need to set primary_key=True on any of your fields unless you want to override the default primary-key behavior.</snippet></ROW><ROW><id>6510590</id><snippet>sudo pip install virtualenv</snippet></ROW><ROW><id>6510590</id><snippet>1.4.x</snippet></ROW><ROW><id>6510590</id><snippet>pip</snippet></ROW><ROW><id>6510590</id><snippet>easy_install</snippet></ROW><ROW><id>6510669</id><snippet>dependency_links</snippet></ROW><ROW><id>6510669</id><snippet>http://URL_Y</snippet></ROW><ROW><id>6510669</id><snippet>dependency_links = ['http://URL_Y'],</snippet></ROW><ROW><id>6510669</id><snippet>easy_install X[Y]</snippet></ROW><ROW><id>6510868</id><snippet>mmap(2)</snippet></ROW><ROW><id>6510868</id><snippet>   ENODEV The  underlying  file system of the specified file does not sup-
          port memory mapping.
</snippet></ROW><ROW><id>6510943</id><snippet>httpcache</snippet></ROW><ROW><id>6510943</id><snippet>HTTPCACHE_DIR</snippet></ROW><ROW><id>6511749</id><snippet>zf.write(f)
</snippet></ROW><ROW><id>6511749</id><snippet>zf.write(f, os.path.basename(f), zipfile.ZIP_DEFLATED)
</snippet></ROW><ROW><id>6512077</id><snippet>def\s+(?=[a-z]+(?:[A-Z][a-z0-9]+)*\s*\().*?\(
</snippet></ROW><ROW><id>6512077</id><snippet>+</snippet></ROW><ROW><id>6512077</id><snippet>*</snippet></ROW><ROW><id>6512077</id><snippet>def\s+(?=[a-z]+(?:[A-Z][a-z0-9]+)+\s*\().*?\(
</snippet></ROW><ROW><id>6512195</id><snippet>UserProfile.objects.exclude(id__in=chris.pageView.userList.all())
</snippet></ROW><ROW><id>6512273</id><snippet>src</snippet></ROW><ROW><id>6512273</id><snippet>&lt;frame&gt;</snippet></ROW><ROW><id>6512452</id><snippet>#!/usr/bin/env python
# -*- coding: utf-8 -*-

import argparse
from os import path
import re

pattern = '&lt;&lt;([^&gt;]*)&gt;&gt;'

def user_replace(match):
    return raw_input('%s? ' % match.group(1))


def main():
    parser = argparse.ArgumentParser()
    parser.add_argument('infile', type=argparse.FileType('r'))
    parser.add_argument('outfile', type=argparse.FileType('w'))
    args = parser.parse_args()

    matcher = re.compile(pattern)

    for line in args.infile:
        new_line = matcher.sub(user_replace, line)
        args.outfile.write(new_line)

    args.infile.close()
    args.outfile.close()

if __name__ == '__main__':
    main()
</snippet></ROW><ROW><id>6512452</id><snippet>python script.py input.txt output.txt</snippet></ROW><ROW><id>6512463</id><snippet>type</snippet></ROW><ROW><id>6512463</id><snippet>from argparse import ArgumentParser, ArgumentTypeError
import re

def parseNumList(string):
    m = re.match(r'(\d+)(?:-(\d+))?$', string)
    # ^ (or use .split('-'). anyway you like.)
    if not m:
        raise ArgumentTypeError("'" + string + "' is not a range of number. Expected forms like '0-5' or '2'.")
    start = m.group(1)
    end = m.group(2) or start
    return list(range(int(start,10), int(end,10)+1))

parser = ArgumentParser()
parser.add_argument('--range', type=parseNumList)

args = parser.parse_args()
print(args)
</snippet></ROW><ROW><id>6512463</id><snippet>~$ python3 z.py --range m
usage: z.py [-h] [--range RANGE]
z.py: error: argument --range: 'm' is not a range of number. Expected forms like '0-5' or '2'.

~$ python3 z.py --range 2m
usage: z.py [-h] [--range RANGE]
z.py: error: argument --range: '2m' is not a range of number. Expected forms like '0-5' or '2'.

~$ python3 z.py --range 25
Namespace(range=[25])

~$ python3 z.py --range 2-5
Namespace(range=[2, 3, 4, 5])
</snippet></ROW><ROW><id>6512603</id><snippet>any</snippet></ROW><ROW><id>6512603</id><snippet>session.query(ZKContact).filter(ZKContact.groups.any(ZKGroup.id.in_([1,2,3])))
</snippet></ROW><ROW><id>6512603</id><snippet>SELECT * FROM contacts 
WHERE EXISTS (
    SELECT 1 FROM contact_groups, groups 
    WHERE contacts.id = contact_groups.contact_id 
        AND groups.id = contact_groups.group_id 
        AND groups.id IN (%s, %s, %s)
    )
</snippet></ROW><ROW><id>6512810</id><snippet>scrape_items = map(os.path.basename, scrape_items)</snippet></ROW><ROW><id>6512810</id><snippet>reader_items</snippet></ROW><ROW><id>6512810</id><snippet>reader_items = [row[0] for row in reader_items]</snippet></ROW><ROW><id>6512810</id><snippet>not_in_csv = set(reader_items).difference(scrape_items)</snippet></ROW><ROW><id>6513145</id><snippet>large</snippet></ROW><ROW><id>6513145</id><snippet>http://graph.facebook.com/UID/picture?type=large</snippet></ROW><ROW><id>6513145</id><snippet>https://graph.facebook.com/UID/albums?access_token=TOKEN</snippet></ROW><ROW><id>6513145</id><snippet>{
         "id": "123456781234",
         "from": {
            "name": "FirstName Surname",
            "id": "123456789"
         },
         "name": "Profile Pictures",
         "link": "http://www.facebook.com/album.php?aid=123456&amp;id=123456789",
         "cover_photo": "12345678912345123",
         "privacy": "friends",
         "count": 12,
         "type": "profile",
         "created_time": "2000-01-23T23:38:14+0000",
         "updated_time": "2011-06-15T21:45:14+0000"
      },
</snippet></ROW><ROW><id>6513145</id><snippet>https://graph.facebook.com/12345678912345123?access_token=TOKEN</snippet></ROW><ROW><id>6513145</id><snippet>{
   "id": "12345678912345123",
   "from": {
      "name": "FirstName Surname",
      "id": "123456789"
   },
   "name": "A Caption",
   "picture": "PICTUREURL",
   "source": "PICTURE_SRC_URL",
   "height": 480,
   "width": 720,
   "images": [
      {
         "height": 608,
         "width": 912,
         "source": "PICTUREURL"
      },
      {
         "height": 480,
         "width": 720,
         "source": "PICTUREURL"
      },
      {
         "height": 120,
         "width": 180,
         "source": "PICTUREURL"
      },
      {
         "height": 86,
         "width": 130,
         "source": "PICTUREURL"
      },
      {
         "height": 50,
         "width": 75,
         "source": "PICTUREURL"
      }
   ],
   "link": "FACEBOOK_LINK_URL",
   "icon": "FACEBOOK_ICON_URL",
   "created_time": "2000-01-15T08:42:42+0000",
   "position": 1,
   "updated_time": "2011-06-15T21:44:47+0000"
}
</snippet></ROW><ROW><id>6513145</id><snippet>PICTUREURL</snippet></ROW><ROW><id>6513145</id><snippet>//get the current user id
FB.api('/me', function (response) {

  // the FQL query: Get the link of the image, that is the first in the album "Profile pictures" of this user.
  var query = FB.Data.query('select src_big from photo where pid in (select cover_pid from album where owner={0} and name="Profile Pictures")', response.id);
  query.wait(function (rows) {

    //the image link
    image = rows[0].src_big;
  });
});
</snippet></ROW><ROW><id>6513145</id><snippet>FB.Data.query</snippet></ROW><ROW><id>6513375</id><snippet>Gmail won't accept these types of files even if they are sent in a zipped
(.zip, .tar, .tgz, .taz, .z, .gz) format. If this type of message is sent to 
your Gmail address, it is bounced back to the sender automatically. 
</snippet></ROW><ROW><id>6513624</id><snippet>In [23]: a
Out[23]: u'\xc5\x9f'

In [24]: a.encode('latin-1')
Out[24]: '\xc5\x9f'

In [25]: type(a.encode('latin-1'))
Out[25]: &lt;type 'str'&gt;
</snippet></ROW><ROW><id>6513788</id><snippet>PIL.pth</snippet></ROW><ROW><id>6513788</id><snippet>sys.path</snippet></ROW><ROW><id>6513906</id><snippet>cgi</snippet></ROW><ROW><id>6513906</id><snippet>os.environ['QUERY_STRING']</snippet></ROW><ROW><id>6513906</id><snippet>sys.stdin</snippet></ROW><ROW><id>6513906</id><snippet>os.environ['CONTENT_TYPE']</snippet></ROW><ROW><id>6513906</id><snippet>os.environ</snippet></ROW><ROW><id>6513906</id><snippet># make a COPY of the environment
environ = dict(os.environ)
# remove the query string from it
del environ['QUERY_STRING']
# parse the environment
form = cgi.FieldStorage(environ=environ)
# form contains no arguments from the query string!
</snippet></ROW><ROW><id>6513906</id><snippet>cgi</snippet></ROW><ROW><id>6513906</id><snippet>import webob
def application(environ, start_response):
    req = webob.Request(environ)
    if req.method == 'POST':
        # do something with req.POST

# still a CGI application:
if __name__ == '__main__':
    import wsgiref.handlers
    wsgiref.handlers.CGIHandler().run(application)
</snippet></ROW><ROW><id>6514178</id><snippet>IsEnabled</snippet></ROW><ROW><id>6514178</id><snippet>if not widget.IsEnabled():
    # do something
</snippet></ROW><ROW><id>6514214</id><snippet>    def connect(self):
        "Connect to a host on a given (SSL) port."

        sock = socket.create_connection((self.host, self.port),
                                        self.timeout, self.source_address)
        if self._tunnel_host:
            self.sock = sock
            self._tunnel()
        self.sock = ssl.wrap_socket(sock, self.key_file, self.cert_file)
</snippet></ROW><ROW><id>6514215</id><snippet>ascii</snippet></ROW><ROW><id>6514215</id><snippet>ascii</snippet></ROW><ROW><id>6514215</id><snippet>for location in locations:
    print location['name'].encode('utf8')
</snippet></ROW><ROW><id>6514215</id><snippet>json.load()</snippet></ROW><ROW><id>6514215</id><snippet>codecs.open()</snippet></ROW><ROW><id>6514215</id><snippet>json.load()</snippet></ROW><ROW><id>6514215</id><snippet>locations = json.load(open('../../publish_scripts/locations.json'))
for location in locations:
    print location['name'].encode('utf8')
</snippet></ROW><ROW><id>6514268</id><snippet>import concurrent.futures
import time
import datetime

max_numbers = [10000000, 10000000, 10000000, 10000000, 10000000]

class Task:
    def __init__(self, max_number):
        self.max_number = max_number
        self.interrupt_requested = False

    def __call__(self):
        print("Started:", datetime.datetime.now(), self.max_number)
        last_number = 0;
        for i in xrange(1, self.max_number + 1):
            if self.interrupt_requested:
                print("Interrupted at", i)
                break
            last_number = i * i
        print("Reached the end")
        return last_number

    def interrupt(self):
        self.interrupt_requested = True

def main():
    with concurrent.futures.ThreadPoolExecutor(max_workers=len(max_numbers)) as executor:
        tasks = [Task(num) for num in max_numbers]
        for task, future in [(i, executor.submit(i)) for i in tasks]:
            try:
                print(future.result(timeout=1))
            except concurrent.futures.TimeoutError:
                print("this took too long...")
                task.interrupt()


if __name__ == '__main__':
    main()
</snippet></ROW><ROW><id>6514268</id><snippet>task.interrupt()</snippet></ROW><ROW><id>6514703</id><snippet>getpass.getpass()</snippet></ROW><ROW><id>6515019</id><snippet>def get_time():
    return int(time.time())

while(count &lt; 10):    
    filepath='/home/shared/word_out.gz'
    start = get_time()
    f = gzip.open( filepath, "rb" )
    pickleFile = cPickle.Unpickler( f )
    paData = pickleFile.load()
    f.close()
    end = get_time()

    print 'Time ellapsed' , end - start
    count+=1
</snippet></ROW><ROW><id>6515019</id><snippet>Time ellapsed 1
Time ellapsed 1
Time ellapsed 0
Time ellapsed 1
Time ellapsed 1
Time ellapsed 0
Time ellapsed 1
Time ellapsed 1
Time ellapsed 0
Time ellapsed 1
</snippet></ROW><ROW><id>6515019</id><snippet>Time ellapsed 5
Time ellapsed 4
Time ellapsed 2
Time ellapsed 2
Time ellapsed 3
Time ellapsed 2
Time ellapsed 3
Time ellapsed 2
Time ellapsed 2
Time ellapsed 2 
</snippet></ROW><ROW><id>6515118</id><snippet>/*Diophantine equation solving genetic algorithm
Copyright (C) 2009- by Joel Rein
Licensed under the terms of the MIT License*/
#include &lt;stdio.h&gt;
#include &lt;stdlib.h&gt;
#include &lt;time.h&gt;
#define POP 100
//number of variables to solve for
#define VAR 4
//maximum value for a) result and b) variables
#define MAX 100 
#define MAX_GENS 500
//probability of crossover (otherwise just one parent will be used)
#define CROSSOVER 0.7
//probability of mutation (per gene)
#define MUTATION 0.4
//print out debug information each generation (recommended: if used, keep RUNS low)
#define DEBUG
//print result of each run individually
#define PRINT_RESULT
//how many times to run the GA
#define RUNS 1

int pop[POP][VAR], scores[POP], new[POP][VAR];
int coefficients[VAR];
int result=0;

int score(int index){
    int sum=0;
    for(int i=0;i&lt;VAR;i++)
        sum+=coefficients[i]*pop[index][i];
    return abs(sum-result);
}

int tournament(int size){
    int best=rand()%POP;
    for(int i=1;i&lt;size;i++){
        int comp=rand()%POP;
        if(scores[comp]&lt;scores[best])
            best=comp;
    }
    return best;
}

void breed(int target){
    int a=tournament(3), b=tournament(3);
    //copy a
    for(int i=0;i&lt;VAR;i++)
        new[target][i]=pop[a][i];
    //crossover
    if((float)rand()/RAND_MAX&lt;CROSSOVER){
        int x=rand()%VAR;
        for(int i=x;i&lt;VAR;i++)
            new[target][i]=pop[b][i];
    }
    //mutation
    for(int i=0;i&lt;VAR;i++)
        if((float)rand()/RAND_MAX&lt;MUTATION)
            new[target][i]=rand()%(result*2)-result;
}

void debug(int gen, int best){
#ifdef DEBUG
    printf("Gen: %3i Score: %3i --- ", gen, scores[best]);
    int sum=0;
    for(int i=0;i&lt;VAR;i++){
        sum+=coefficients[i]*pop[best][i];
        printf("%3i*%3i+", coefficients[i], pop[best][i]);
    }
    printf("0= %3i (target: %i)\n", sum, result);
#endif
}

int ga(int run){
    srand(time(NULL)+run);
    //calculate a result for the equation. 
    //this mustn't be 0, else we get division-by-zero errors while initialising &amp; mutating.
    while(!result)
        result=rand()%MAX;
    for(int i=0;i&lt;VAR;i++)
        coefficients[i]=rand()%result;
    //initialise population
    for(int i=0;i&lt;POP;i++)
        for(int j=0;j&lt;VAR;j++)
            pop[i][j]=rand()%(result*2)-result;
    //main loop
    int gen, best;
    for(gen=0;gen&lt;MAX_GENS;gen++){
        best=0;
        //evaluate population
        for(int i=0;i&lt;POP;i++){
            scores[i]=score(i);
            if(scores[i]&lt;scores[best])
                best=i;
        }
        debug(gen, best);
        if(scores[best]==0)
            break;
        //breed and replace
        for(int i=0;i&lt;POP;i++)
            breed(i);
        for(int i=0;i&lt;POP;i++)
            for(int j=0;j&lt;VAR;j++)
                pop[i][j]=new[i][j];
    }
#ifdef PRINT_RESULT
    printf("Terminated after %4i generations with a score of %3i\n", gen, scores[best]); 
#else
    printf(".");
#endif
    return gen;
}

int main(){
    int total=0;
    for(int i=0;i&lt;RUNS;i++)
        total+=ga(i);
    printf("\nAverage runtime: %i generations\n", total/RUNS);
}
</snippet></ROW><ROW><id>6515124</id><snippet>one = np.ascontiguousarray(a['one'])
one.ctypes.data_as(ctypes.POINTER(ctypes.c_double))
</snippet></ROW><ROW><id>6515172</id><snippet>from collections import defaultdict

records = defaultdict(list)

file = 'test.csv'

data = csv.reader(open(file))
fields = data.next()

for row in data:
    records[row[0]].append(row[1])

#sorting by ids since keys don't maintain order
results = sorted(records.items(), key=lambda x: x[0])
print results
</snippet></ROW><ROW><id>6515172</id><snippet>defaultdict(list)</snippet></ROW><ROW><id>6515172</id><snippet>defaultdict(set)</snippet></ROW><ROW><id>6515172</id><snippet>records[row[0]].append(row[1])</snippet></ROW><ROW><id>6515172</id><snippet>records[row[0]].add(row[1])</snippet></ROW><ROW><id>6515265</id><snippet>&lt;a href="{% url user_login %}?next={{ request.get_full_path|urlencode }}"&gt;Login&lt;/a&gt;
</snippet></ROW><ROW><id>6515265</id><snippet>if successful_login:
    url_with_get = urllib2.unquote(request.GET.get('next'))
    return http.HttpResponseRedirect(url_with_get)
</snippet></ROW><ROW><id>6515985</id><snippet>class Klose:
  def closingStuff(self):
    print("bye")

...
app.connect(app, SIGNAL("aboutToQuit()"), k.closingStuff)
</snippet></ROW><ROW><id>6516097</id><snippet>dict</snippet></ROW><ROW><id>6516097</id><snippet>list</snippet></ROW><ROW><id>6516097</id><snippet>set</snippet></ROW><ROW><id>6516097</id><snippet>repr()</snippet></ROW><ROW><id>6516097</id><snippet>&gt;&gt;&gt; d = {'a': 2, 'b': 3, 'c': 4}
&gt;&gt;&gt; repr(d)
"{'a': 2, 'c': 4, 'b': 3}"
&gt;&gt;&gt; l = range(10)
&gt;&gt;&gt; repr(l)
'[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]'
&gt;&gt;&gt; s = set(range(10))
&gt;&gt;&gt; repr(s)
'set([0, 1, 2, 3, 4, 5, 6, 7, 8, 9])'
</snippet></ROW><ROW><id>6516097</id><snippet>eval()</snippet></ROW><ROW><id>6516649</id><snippet>b and gcd(b, a % b) or a
</snippet></ROW><ROW><id>6516649</id><snippet>gcd(b, a % b) if b else a
</snippet></ROW><ROW><id>6517155</id><snippet>base_test_class.py</snippet></ROW><ROW><id>6517155</id><snippet>class BaseSQLTest(unittest.TestCase)</snippet></ROW><ROW><id>6517155</id><snippet>mysqltest.py</snippet></ROW><ROW><id>6517155</id><snippet>psqltest.py</snippet></ROW><ROW><id>6517155</id><snippet>class MySQLTest(BaseSQLTest)</snippet></ROW><ROW><id>6517155</id><snippet>class PSQLTest(BaseSQLTest)</snippet></ROW><ROW><id>6517516</id><snippet>bar = copy.deepcopy(foo)
</snippet></ROW><ROW><id>6517540</id><snippet>virtualenv</snippet></ROW><ROW><id>6517540</id><snippet>pip</snippet></ROW><ROW><id>6517540</id><snippet>requirements.txt</snippet></ROW><ROW><id>6517725</id><snippet>from paste.deploy.loadwsgi import appconfig
config = appconfig('config:development.ini', 'myapp', relative_to='.')

if config['env'] == 'production':
    api_endpoint_uri = 'http://api.external.com/?{0}'
    timezone = timezone('US/Eastern')
# .. and so on ...
</snippet></ROW><ROW><id>6517820</id><snippet>my_dict = {"key1": 1, "key2":2}
my_dict.items()       # in python &lt; 3 , you should use iteritems()
&gt;&gt;&gt; ("key1", 1), ("key2", 2)
</snippet></ROW><ROW><id>6517820</id><snippet>for key, value in my_dict.items():
   do_the_stuff(key, value)
</snippet></ROW><ROW><id>6518011</id><snippet>q = Queue.Queue()
q.queue.clear()
</snippet></ROW><ROW><id>6518011</id><snippet>q = Queue.Queue()
with q.mutex:
    q.queue.clear()
</snippet></ROW><ROW><id>6518140</id><snippet>temp = {}
for key, number, date in input_list:
    if key not in temp: # we see this key for the first time
        temp[key] = (key, number, date)
    else:
        if temp[key][2] &lt; date: # the new date is larger than the old one
            temp[key] = (key, number, date)
result = temp.values()
</snippet></ROW><ROW><id>6518175</id><snippet>callback</snippet></ROW><ROW><id>6518192</id><snippet>(\w)\1{2,}</snippet></ROW><ROW><id>6518192</id><snippet>r"(\w)\1{2,}"</snippet></ROW><ROW><id>6518345</id><snippet>u""</snippet></ROW><ROW><id>6518345</id><snippet>unicode()</snippet></ROW><ROW><id>6518806</id><snippet>class Note(models.Model):
    datetime = models.DateTimeField(default=datetime.now)
    user  = models.ForeignKey(User)
    note = models.TextField()

    def __unicode__(self):
        return unicode(self.user)

class Client(models.Model):
    name = models.CharField(max_length = 40)
    telephone = models.CharField(max_length = 20)
    website = models.URLField(verify_exists = False)
    fax = models.CharField(max_length = 20)
    email = models.EmailField()
    is_active = models.BooleanField()
    note = models.OneToOneField(Note)

    def __unicode__(self):
        return self.name
</snippet></ROW><ROW><id>6519476</id><snippet>NameError</snippet></ROW><ROW><id>6519476</id><snippet>.replace()</snippet></ROW><ROW><id>6519476</id><snippet>string</snippet></ROW><ROW><id>6519476</id><snippet>s.replace(sub, '')
</snippet></ROW><ROW><id>6520216</id><snippet>not none == True</snippet></ROW><ROW><id>6520216</id><snippet>not (None == True)</snippet></ROW><ROW><id>6520216</id><snippet>None != True</snippet></ROW><ROW><id>6520216</id><snippet>None != False</snippet></ROW><ROW><id>6520216</id><snippet>None</snippet></ROW><ROW><id>6520216</id><snippet>False != False</snippet></ROW><ROW><id>6520216</id><snippet>False != True</snippet></ROW><ROW><id>6520557</id><snippet>numpy.recarray</snippet></ROW><ROW><id>6520557</id><snippet># Create an uninitialised array with 100 records
a = numpy.recarray(100,
                   formats=["f8", "f8", "i4"],
                   names=["latitude", "longitude", "date"])
# initialise to 0
a[:] = (0.0, 0.0, 0)
# assign a single record
a[0] = (-65.100234, -38.32432, 1309351408)
# access the date of the first record
a[0].date
# access the whole date column
a.date
</snippet></ROW><ROW><id>6520557</id><snippet>ctypes</snippet></ROW><ROW><id>6520557</id><snippet>ctypes</snippet></ROW><ROW><id>6520663</id><snippet>rcParams</snippet></ROW><ROW><id>6520663</id><snippet>xticks.color</snippet></ROW><ROW><id>6520663</id><snippet>yticks.color</snippet></ROW><ROW><id>6520663</id><snippet>import pylab

pylab.plot([1,2,3],[4,5,6], label ='test')
lg = pylab.legend()
lg.get_frame().set_edgecolor('blue')
ax = pylab.axes()

for line in ax.yaxis.get_ticklines():
    line.set_color('blue')
for line in ax.xaxis.get_ticklines():
    line.set_color('blue')

for label in ax.yaxis.get_ticklabels():
    label.set_color('blue')
for label in ax.xaxis.get_ticklabels():
    label.set_color('blue')

pylab.show()
</snippet></ROW><ROW><id>6520696</id><snippet>import numpy as np

def nan_helper(y):
    """Helper to handle indices and logical indices of NaNs.

    Input:
        - y, 1d numpy array with possible NaNs
    Output:
        - nans, logical indices of NaNs
        - index, a function, with signature indices= index(logical_indices),
          to convert logical indices of NaNs to 'equivalent' indices
    Example:
        &gt;&gt;&gt; # linear interpolation of NaNs
        &gt;&gt;&gt; nans, x= nan_helper(y)
        &gt;&gt;&gt; y[nans]= np.interp(x(nans), x(~nans), y[~nans])
    """

    return np.isnan(y), lambda z: z.nonzero()[0]
</snippet></ROW><ROW><id>6520696</id><snippet>nan_helper(.)</snippet></ROW><ROW><id>6520696</id><snippet>&gt;&gt;&gt; y= array([1, 1, 1, NaN, NaN, 2, 2, NaN, 0])
&gt;&gt;&gt;
&gt;&gt;&gt; nans, x= nan_helper(y)
&gt;&gt;&gt; y[nans]= interp(x(nans), x(~nans), y[~nans])
&gt;&gt;&gt;
&gt;&gt;&gt; print y.round(2)
[ 1.    1.    1.    1.33  1.67  2.    2.    1.    0.  ]
</snippet></ROW><ROW><id>6520696</id><snippet>&gt;&gt;&gt; nans, x= np.isnan(y), lambda z: z.nonzero()[0]
</snippet></ROW><ROW><id>6520847</id><snippet>import subprocess
for f in files:
    subprocess.call(['wc', '-l', f])
</snippet></ROW><ROW><id>6520847</id><snippet>subprocess.check_output()</snippet></ROW><ROW><id>6520847</id><snippet>subprocess.call()</snippet></ROW><ROW><id>6522189</id><snippet>from plone.app.controlpanel.security import ISecuritySchema
# Fetch the adapter
security_adapter =  ISecuritySchema(portal)
security_adapter.set_enable_user_folders(True)
</snippet></ROW><ROW><id>6522189</id><snippet>class YourPloneFixture(PloneSandboxLayer):
    defaultBases = (PLONE_FIXTURE,)

    def setUpZope(self, app, configurationContext):

        # Required by Products.CMFPlone:plone-content
        z2.installProduct(app, 'Products.PythonScripts')

    def setUpPloneSite(self, portal):

        # Installs all the Plone stuff. Workflows etc.
        self.applyProfile(portal, 'Products.CMFPlone:plone')

        # Install portal content. Including the Members folder!
        self.applyProfile(portal, 'Products.CMFPlone:plone-content')
</snippet></ROW><ROW><id>6522189</id><snippet>browser = Browser(self.layer['app'])
browser.open(self.portal.absolute_url() + '/login_form')
browser.getControl(name='__ac_name').value = TEST_USER_NAME
browser.getControl(name='__ac_password').value = TEST_USER_PASSWOR
browser.getControl(name='submit').click()
</snippet></ROW><ROW><id>6522223</id><snippet>choice</snippet></ROW><ROW><id>6522223</id><snippet>to</snippet></ROW><ROW><id>6522223</id><snippet>to</snippet></ROW><ROW><id>6522223</id><snippet>clean_&lt;fieldname&gt;</snippet></ROW><ROW><id>6522223</id><snippet>from django.core.exceptions import ValidationError

def validate_to(value):
    """
    Ensure that the 'to' is either 1, 2 or 3.
    """
    if value not in [1, 2, 3]:
        raise ValidationError("Invalid 'to' value.")

class Action(models.Model):
    """
    Contains the logic for the visit
    """
    id = models.AutoField(primary_key=True)
    path = models.CharField(max_length=65535, null=False)
    to = models.IntegerField(null=False,validators=[validate_to])
</snippet></ROW><ROW><id>6522396</id><snippet>numpy.savetxt('outfile.txt', array.view(float))
</snippet></ROW><ROW><id>6522396</id><snippet>array = numpy.loadtxt('outfile.txt').view(complex)
</snippet></ROW><ROW><id>6522396</id><snippet>numpy.savetxt('outfile.txt', array.view(float).reshape(-1, 2))
</snippet></ROW><ROW><id>6522396</id><snippet>array = numpy.loadtxt('outfile.txt').view(complex).reshape(-1)
</snippet></ROW><ROW><id>6522396</id><snippet>view()</snippet></ROW><ROW><id>6522396</id><snippet>reshape()</snippet></ROW><ROW><id>6522396</id><snippet>numpy.savetxt('outfile.txt', numpy.column_stack([
    array1.view(float).reshape(-1, 2),
    array2.view(float).reshape(-1, 2),
]))

array1, array2 = numpy.loadtxt('outfile.txt', unpack=True).view(complex)
</snippet></ROW><ROW><id>6522396</id><snippet>numpy.view()</snippet></ROW><ROW><id>6522409</id><snippet>lineEdit1 = QtGui.QLineEdit()
lineEdit1.setEchoMode(2)
passWord = lineEdit1.text()  
</snippet></ROW><ROW><id>6522409</id><snippet>lineEdit1.text()</snippet></ROW><ROW><id>6522409</id><snippet>lineEdit1</snippet></ROW><ROW><id>6522409</id><snippet>passWord = lineEdit1.text()</snippet></ROW><ROW><id>6522469</id><snippet>&gt;&gt;&gt; my_list = [('a', 1), ('b', 2)]
&gt;&gt;&gt; dict(my_list)
{'a': 1, 'b': 2}
</snippet></ROW><ROW><id>6523306</id><snippet>\\.\PhysicalDriveN
</snippet></ROW><ROW><id>6523306</id><snippet>\\.\X: 
</snippet></ROW><ROW><id>6523428</id><snippet>fileNames=""
for i in range(1, NumberOfImages):
    fileNames += "image_0000000%d.jpg "%i

os.system( "java -jar C:\\Inetpub\\ftproot\\JPivSource\\jpivc.jar %s"%fileNames )
</snippet></ROW><ROW><id>6523428</id><snippet>pidId = os.spawnl(os.P_NOWAIT, "\\windows\\notepad.exe") 
import win32api
win32api.TerminateProcess(pidId ,0)
</snippet></ROW><ROW><id>6523686</id><snippet>Thread</snippet></ROW><ROW><id>6523686</id><snippet>args=</snippet></ROW><ROW><id>6523686</id><snippet>import time
import threading


def otherdef(num1, num2, num3):
    #Inside of otherdef we use an event to loop on, 
    #we do this so we can have a convent way to stop the process.

    stopped = threading.Event()
     #set a timer, after 10 seconds.. kill this loop
    threading.Timer(10, stopped.set).start()
    #while the event has not been triggered, do something useless
    while(not stopped.is_set()):
        print 'doing ' , num1, num2, num3
        stopped.wait(1)

    print 'otherdef exiting'

print 'Running'
#create a thread, when I call start call the target and pass args
p = threading.Thread(target=otherdef, args=(1,2,3))
p.start()
#wait for the threadto finish
p.join(11)

print 'Done'    
</snippet></ROW><ROW><id>6523686</id><snippet>Process</snippet></ROW><ROW><id>6523852</id><snippet>class</snippet></ROW><ROW><id>6523852</id><snippet>def</snippet></ROW><ROW><id>6523852</id><snippet># stuff to run always here such as class/def
def main():
    pass

if __name__ == "__main__":
   # stuff only to run when not called via 'import' here
   main()
</snippet></ROW><ROW><id>6523852</id><snippet>if __name__ == "__main__"</snippet></ROW><ROW><id>6523852</id><snippet>import</snippet></ROW><ROW><id>6523882</id><snippet>Text.edit_modified()</snippet></ROW><ROW><id>6523882</id><snippet>&gt;&gt;&gt; import Tkinter
&gt;&gt;&gt; root = Tkinter.Tk()
&gt;&gt;&gt; frame = Tkinter.Frame(root)
&gt;&gt;&gt; text = Tkinter.Text(frame)
&gt;&gt;&gt; text.pack()
&gt;&gt;&gt; frame.pack()
&gt;&gt;&gt; text.edit_modified()
0
&gt;&gt;&gt; text.insert('1.0', 'some text')
&gt;&gt;&gt; text.edit_modified()
1
&gt;&gt;&gt; text.edit_modified(False)
''
&gt;&gt;&gt; text.edit_modified()
0
</snippet></ROW><ROW><id>6523923</id><snippet>htmlspaced = re.sub(r"\r\n", " ", html)
</snippet></ROW><ROW><id>6524078</id><snippet>curl</snippet></ROW><ROW><id>6524078</id><snippet>Host</snippet></ROW><ROW><id>6524078</id><snippet>cherrypy.dispatch.VirtualHost</snippet></ROW><ROW><id>6524078</id><snippet>example.com</snippet></ROW><ROW><id>6524078</id><snippet>example.com:80</snippet></ROW><ROW><id>6524100</id><snippet>data = args[0]
print data['my_field']
</snippet></ROW><ROW><id>6524100</id><snippet>kwargs.pop('extra')</snippet></ROW><ROW><id>6524100</id><snippet>self.data</snippet></ROW><ROW><id>6524100</id><snippet>forms.__init__</snippet></ROW><ROW><id>6524100</id><snippet>class MyForm(forms.Form):
    def __init__(self, *args, **kwargs):
        super(MyForm, self).__init__(*args, **kwargs)
        self.data['my_field']
</snippet></ROW><ROW><id>6524229</id><snippet>curl --silent http://earthquake.usgs.gov/earthquakes/eqinthenews/2010/uu00002715/uu00002715_gcmt.php |
awk '
    BEGIN {
        FS = "[,:;= ]+"
        OFS = "^"
    }
    /&lt;pre&gt;/ {process=1}
    /&lt;\/pre&gt;/ {process=0}
    ! process {next}
    /MW=/ {
        date = $1 " " $2 " " $3
        place = $4
        mw = $NF
    }
    /^ORIGIN TIME:/ {
        otime = $3 ":" $4 ":" $5
    }
    /^LAT:.*LON:/ {
        lat = $2
        lon = $5
    }
    /^DEP:/ {
        dep = $2
        dep_err = $3
    }
    /^BEST DBLE.COUPLE:/ {
        m0 = $NF
    }
    /^NP1:/ {
        strike = $3
        dip = $5
        slip = $7
    }
    END {
        print "name", "date", "time", "lon", "lat", "dep", "dep_err", "Mw", "M0", "strike", "dip", "slip"
        print place, date, otime, lon, lat, dep, dep_err, mw, m0, strike, dip, slip
    }
' | column -s ^ -t
</snippet></ROW><ROW><id>6524229</id><snippet>name  date           time        lon      lat     dep   dep_err  Mw   M0           strike  dip  slip
UTAH  April 15 2010  23:59:42.8  110.86W  41.72N  12.5  1.8      4.6  1.07*10**23  193     35   -80
</snippet></ROW><ROW><id>6524542</id><snippet>time.sleep()</snippet></ROW><ROW><id>6524542</id><snippet>def main():
  t1_stop= threading.Event()
  t1 = threading.Thread(target=thread1, args=(1, t1_stop))

  t2_stop = threading.Event()
  t2 = threading.Thread(target=thread2,  args=(2, t2_stop))

  time.sleep(duration)
  #stop the thread2
  t2_stop.set()

def thread(arg1, stop_event):
  while(not stop_event.is_set()):
      #equivalent to time.sleep()
      stop_event.wait(time)
      pass


def thread2(arg1, stop_event):
  while(not stop_event.is_set()):
      stop_event.wait(time)
      pass
</snippet></ROW><ROW><id>6524640</id><snippet>object.self</snippet></ROW><ROW><id>6524777</id><snippet>le_chef = Chef = ()
games.screen.add(le_chef)
le_pan = Pan = ()
games.screen.add (le_pan)
</snippet></ROW><ROW><id>6524777</id><snippet>le_chef = Chef(&lt;some args&gt;)
le_pan = Pan(&lt;some args&gt;)
</snippet></ROW><ROW><id>6524951</id><snippet>'(\{date:[\w\s]+\})'</snippet></ROW><ROW><id>6524951</id><snippet>&gt;&gt;&gt; import re
&gt;&gt;&gt; re.findall('(\{date:[\w\s]+\})', '{server}_{date:YYYYMMDD}{date:MONDAYYYYY}{int:######}')
['{date:YYYYMMDD}', '{date:MONDAYYYYY}']
&gt;&gt;&gt; re.findall('(\{date:[\w\s]+\})', '{server}_{date:MON DAY YYYY}{int:######}')
['{date:MON DAY YYYY}']
</snippet></ROW><ROW><id>6524951</id><snippet>'\{date:([\w\s]+)\}'</snippet></ROW><ROW><id>6524960</id><snippet>pip freeze &gt; REQUIREMENTS.txt
</snippet></ROW><ROW><id>6524960</id><snippet>pip install -r ./REQUIREMENTS.txt
</snippet></ROW><ROW><id>6525003</id><snippet>function clockwise(r){
    if(r.length&gt;0){
        var remaining = r.slice(1)
        var a = reversed(zip(remaining));
        return r[0].concat(clockwise(a));
     } else {
        return [];
    }
}
</snippet></ROW><ROW><id>6525232</id><snippet>pygame.init()
screen = pygame.display.set_mode([320, 240])
enemy = Enemy()
screen.blit(enemy.image, enemy.rect)
pygame.display.update()
</snippet></ROW><ROW><id>6525441</id><snippet>&gt;&gt;&gt; print re.compile(r'^.*[.](?P&lt;ext&gt;tar\.gz|tar\.bz2|\w+)$').match('a.tar.gz').group('ext')
gz
&gt;&gt;&gt; print re.compile(r'^.*?[.](?P&lt;ext&gt;tar\.gz|tar\.bz2|\w+)$').match('a.tar.gz').group('ext')
tar.gz
&gt;&gt;&gt;
</snippet></ROW><ROW><id>6525514</id><snippet>pgrep -P $(head -1 $PGDATA/postmaster.pid)
</snippet></ROW><ROW><id>6525514</id><snippet>pgrep</snippet></ROW><ROW><id>6525514</id><snippet>/proc</snippet></ROW><ROW><id>6525618</id><snippet>SLOT_LENGTH = 1000 * 60 *5
for line in file:
    slot = convert_time_string_to_unix_time(line) / SLOT_LENGTH
    bucket[slot] = bucket.get(slot, 0) + 1

for slot in sorted(bucket.keys()):
    print(
        convert_unix_time_to_time_string(slot * SLOT_LENGTH),
        convert_unix_time_to_time_string((slot + 1) * SLOT_LENGTH - 1),
        bucket[slot]
    )
</snippet></ROW><ROW><id>6525643</id><snippet>EffectDescription</snippet></ROW><ROW><id>6525643</id><snippet>&gt;&gt;&gt;for effect in Phonon.BackendCapabilities.availableAudioEffects():
       print effect.name()

ParamEq
WavesReverb
Gargle
Compressor
Distortion
Echo
I3DL2Reverb
Flanger
Chorus
</snippet></ROW><ROW><id>6526287</id><snippet>super</snippet></ROW><ROW><id>6526287</id><snippet>__init__</snippet></ROW><ROW><id>6526287</id><snippet>games.Sprite</snippet></ROW><ROW><id>6526287</id><snippet>Chef</snippet></ROW><ROW><id>6526287</id><snippet>y=55</snippet></ROW><ROW><id>6526287</id><snippet>super</snippet></ROW><ROW><id>6526287</id><snippet>super</snippet></ROW><ROW><id>6526287</id><snippet>__init__</snippet></ROW><ROW><id>6526287</id><snippet>__init__</snippet></ROW><ROW><id>6526287</id><snippet>super(Chef, self).__init__</snippet></ROW><ROW><id>6526287</id><snippet>__init__</snippet></ROW><ROW><id>6526287</id><snippet>class Chef(games.Sprite):
    """
    A chef which moves left and right, dropping pizzas.
    """
    image = games.load_image("chef.bmp")

    def __init__(self, x = games.screen.width / 2, y = 55, speed = 2, odds_change = 200):
        """ Initialize the Chef object. """
        super(Chef, self).__init__(image = Chef.image,
                               x = x,
                               y = y,
                               dx = speed)     # although this will work, you should either rename dx as speed or vice-versa

        self.odds_change = odds_change
        self.time_til_drop = 0
</snippet></ROW><ROW><id>6526287</id><snippet>__init__</snippet></ROW><ROW><id>6526287</id><snippet>super(Chef, self).__init__</snippet></ROW><ROW><id>6526560</id><snippet>class FooBar(object):
    def take_a_string_and_do_something(self, param):
        # process nonempty string
        # If they couldn't provide a non-empty string, they get an exception.
</snippet></ROW><ROW><id>6526560</id><snippet>class TestFooBar(unittest.TestCase):
    def setUp( self ):
        self.foo= FooBar()
    def test_zero_length_should_fail(self):
        self.failUnlessRaises(IndexError, foo.take_a_string_and_do_something, '')
    def test_none_should_fail(self):
        self.failUnlessRaises(TypeError, foo.take_a_string_and_do_something, None)
    def test_non_string_should_fail(self):
        self.failUnlessRaises(TypeError, foo.take_a_string_and_do_something, 234)
</snippet></ROW><ROW><id>6526930</id><snippet>main</snippet></ROW><ROW><id>6526930</id><snippet>if __name__ == '__main__':
    main()
</snippet></ROW><ROW><id>6527208</id><snippet>QOUT=[1.0, 3.0, 1.0, 2.0]
QIN=[2.0, 3.0, 5.0, 2.0]
TIN=[10.0,12.0,13.0, 12.0]

V=[2.0, 4.0, 5.0]

T=[10.0, 11.0, 12.0]

for q_in, q_out in zip(QIN, QOUT):
    C = [v + q_in - q_out for v in V]    
    print C

    lineNum=0         
    for t1 in range(len(TIN)):
        Tx=[]
        for c in range(len(C)): 
            for i in range(len(T)):   
                Tx.append((T[i]*C[c]+TIN[t1]*QIN[lineNum])/(C[c]+QIN[lineNum]))
        lineNum +=1
        print Tx
</snippet></ROW><ROW><id>6527379</id><snippet>start = int(input("Starting number: "))
ending = int(input("Ending number: "))
tick = int(input("Interval: "))
print("Counting by", tick)
for i in range(start, ending, tick):
    print(i, end = " ")
</snippet></ROW><ROW><id>6527461</id><snippet>q = Kind.all()
</snippet></ROW><ROW><id>6527691</id><snippet>-vp     Pause before each volume

        By default RAR asks for confirmation before creating
        or unpacking next volume only for removable disks.
        This switch forces RAR to ask such confirmation always.
        It can be useful if disk space is limited and you wish
        to copy each volume to another media immediately after
        creation.
</snippet></ROW><ROW><id>6527895</id><snippet>def _loadPackagePlugins(package):
  "Load plugins from a specified package."
  ppath = package.__path__
  pname = package.__name__ + "."
  for importer, modname, ispkg in pkgutil.iter_modules(ppath, pname):
    module = __import__(modname, fromlist = "dummy")
</snippet></ROW><ROW><id>6528024</id><snippet>def matrix_cofactor(matrix):
    return np.linalg.inv(matrix).T * np.linalg.det(matrix)
</snippet></ROW><ROW><id>6528024</id><snippet>O(n^3)</snippet></ROW><ROW><id>6528024</id><snippet>O(n^5)</snippet></ROW><ROW><id>6528024</id><snippet>det</snippet></ROW><ROW><id>6528024</id><snippet>minor = np.zeros([nrows-1, ncols-1])
for row in xrange(nrows):
    for col in xrange(ncols):
        minor[:row,:col] = matrix[:row,:col]
        minor[row:,:col] = matrix[row+1:,:col]
        minor[:row,col:] = matrix[:row,col+1:]
        minor[row:,col:] = matrix[row+1:,col+1:]
        ...
</snippet></ROW><ROW><id>6528024</id><snippet>range</snippet></ROW><ROW><id>6528024</id><snippet>numpy.linalg.det</snippet></ROW><ROW><id>6528148</id><snippet>import types
def copy_func(f, name=None):
    return types.FunctionType(f.func_code, f.func_globals, name or f.func_name,
        f.func_defaults, f.func_closure)

def A():
    """A"""
    pass
B = copy_func(A, "B")
B.__doc__ = """B"""
</snippet></ROW><ROW><id>6528368</id><snippet>from collections import defaultdict
import random

wordsByLength = defaultdict( list )
for word in allWords:
    wordsByLength[ len(word) ].append( word )
</snippet></ROW><ROW><id>6528368</id><snippet>randomLen = random.choice( wordsByLength.keys() )
randomWord = random.choice( wordsByLength[ randomLen ] )
</snippet></ROW><ROW><id>6528518</id><snippet>sys.path.append(os.path.dirname(__file__))
</snippet></ROW><ROW><id>6528544</id><snippet>datetime.datetime.utcnow() + datetime.timedelta(hours=-8)
</snippet></ROW><ROW><id>6528810</id><snippet>from collections import defaultdict
import re

stop_words = set(['a', 'is', 'and', 'the', 'i'])
text = [ 'This is the first line in my text'
       , 'and this one is the second line in my text'
       , 'I like texts with three lines, so I added that one'
       ]   
word_line_dict = defaultdict(list)

for line_no, line in enumerate(text, 1): 
    words = set(map(str.lower, re.split('\W+', line)))
    words_ok = words.difference(stop_words)
    for wok in words_ok:
        word_line_dict[wok].append(line_no)

print word_line_dict
</snippet></ROW><ROW><id>6528810</id><snippet>{ 'added': [3]
, 'like': [3]
, 'that': [3]
, 'this': [1, 2]
, 'text': [1, 2]
, 'lines': [3]
, 'three': [3]
, 'one': [2, 3]
, 'texts': [3]
, 'second': [2]
, 'so': [3]
, 'in': [1, 2]
, 'line': [1, 2]
, 'my': [1, 2]
, 'with': [3]
, 'first': [1]
}
</snippet></ROW><ROW><id>6528907</id><snippet>for idx, a in enumerate(foo):
    foo[idx] = a + 42
</snippet></ROW><ROW><id>6528907</id><snippet>map</snippet></ROW><ROW><id>6528907</id><snippet>foo = [a + 42 for a in foo]
</snippet></ROW><ROW><id>6529044</id><snippet>MoveFileEx</snippet></ROW><ROW><id>6529044</id><snippet>os.rename</snippet></ROW><ROW><id>6529044</id><snippet># ...
a['example']['test'] = 'red'

import tempfile, os
with tempfile.NamedTemporaryFile() as tmp:
    a.write(tmp)

    # or ctypes.windll.kernel32.MoveFileExW(tmp.name, 'data.txt', 2)
    # 2 = MOVEFILE_REPLACE_EXISTING 
    # I'll leave wrapping it in a cross-platform manner up to you
    os.rename(tmp.name, 'data.txt')
</snippet></ROW><ROW><id>6529258</id><snippet>    EditText usernameText = (EditText)findViewById(R.id.username);
    EditText passwordText = (EditText)findViewById(R.id.password);
    String postParameters = "u=" + usernameText.getText() + "&amp;p=" + passwordText.getText();
    try {
        DefaultHttpClient kccClient = new DefaultHttpClient();

        HttpPost postRequest = new HttpPost("http://www.mywebsite.com/login.php");
        HttpEntity postEntity = new StringEntity(postParameters);
        postRequest.setHeader("Content-Type", "application/x-www-form-urlencoded");
        postRequest.setEntity(postEntity);

        HttpResponse postResponse = kccClient.execute(postRequest);
        HttpEntity postResponseEntity = postResponse.getEntity();

        responseText.setText(EntityUtils.toString(postResponseEntity));
    } catch(Exception e) {
        responseText.setText(e.getMessage());
    }
</snippet></ROW><ROW><id>6529458</id><snippet>getInfo()</snippet></ROW><ROW><id>6529458</id><snippet>return grosspay,hrs,dependents
</snippet></ROW><ROW><id>6529458</id><snippet>return [grosspay, hrs, dependents]
</snippet></ROW><ROW><id>6529458</id><snippet>&gt;&gt;&gt; [1, 2, 3] * 3
[1, 2, 3, 1, 2, 3, 1, 2, 3]
</snippet></ROW><ROW><id>6529458</id><snippet>grosspay</snippet></ROW><ROW><id>6529458</id><snippet>def main():
    grosspay=getInfo()
    tax(grosspay)
</snippet></ROW><ROW><id>6529458</id><snippet>def main():
    grosspay, hrs, dependents = getInfo()
    tax(grosspay)
</snippet></ROW><ROW><id>6529458</id><snippet>grosspay</snippet></ROW><ROW><id>6529458</id><snippet>hrs</snippet></ROW><ROW><id>6529458</id><snippet>dependents</snippet></ROW><ROW><id>6529687</id><snippet>from scrapy.spider import BaseSpider
from scrapy.selector import HtmlXPathSelector

class DmozSpider(BaseSpider):
    name = "dmoz.org"
    allowed_domains = ["dmoz.org"]
    start_urls = [
        "http://www.dmoz.org/Computers/Programming/Languages/Python/Books/",
        "http://www.dmoz.org/Computers/Programming/Languages/Python/Resources/"
    ]
def parse(self, response):
    hxs = HtmlXPathSelector(response)
    sites = hxs.select('//ul/li')
    for site in sites:
        title = site.select('a/text()').extract()
        link = site.select('a/@href').extract()
        desc = site.select('text()').extract()
        print title, link, desc
</snippet></ROW><ROW><id>6530189</id><snippet>f</snippet></ROW><ROW><id>6530189</id><snippet>g</snippet></ROW><ROW><id>6530189</id><snippet>g</snippet></ROW><ROW><id>6530189</id><snippet>g</snippet></ROW><ROW><id>6530280</id><snippet>from django.conf.urls.defaults import *
from django.contrib import admin
</snippet></ROW><ROW><id>6530280</id><snippet>admin.py</snippet></ROW><ROW><id>6530280</id><snippet>(r'^admin/', include(admin.site.urls)),
</snippet></ROW><ROW><id>6530280</id><snippet>DATABASES = {
    'default': {
        'NAME': 'app_data',
        'ENGINE': 'django.db.backends.postgresql_psycopg2',
        'USER': 'postgres_user',
        'PASSWORD': 's3krit'
    },
    'users': {
        'NAME': 'user_data',
        'ENGINE': 'django.db.backends.mysql',
        'USER': 'mysql_user',
        'PASSWORD': 'priv4te'
    }
}
</snippet></ROW><ROW><id>6530335</id><snippet>something = [[1,2,3] for u in xrange(3)]
</snippet></ROW><ROW><id>6530335</id><snippet>something = map(lambda x: [1,2,3], xrange(3))
</snippet></ROW><ROW><id>6530335</id><snippet>something = [[1,2,3]]
something.append([1,2,3])# something == [[1,2,3],[1,2,3]]
something.insert(0, [2,3,1])# something == [[2,3,4],[1,2,3],[1,2,3]]
</snippet></ROW><ROW><id>6530335</id><snippet>something = {}
for u in xrange(3):
   something[u] = [1,2,3]
</snippet></ROW><ROW><id>6530427</id><snippet>&gt;&gt;&gt; urllib.unquote('{%22%22%3A%22test_%E5%93%A6%E4%BA%88%E4%BB%A5%E8%85%BF%E5%93%A6.doc.txt%22%2C%22mimeType%22%3A%22text%2Fplain%22%2C%22compressed%22%3AFalse%7D')
'{"":"test_\xe5\x93\xa6\xe4\xba\x88\xe4\xbb\xa5\xe8\x85\xbf\xe5\x93\xa6.doc.txt","mimeType":"text/plain","compressed":False}'
&gt;&gt;&gt; eval(_)
{'': 'test_\xe5\x93\xa6\xe4\xba\x88\xe4\xbb\xa5\xe8\x85\xbf\xe5\x93\xa6.doc.txt', 'mimeType': 'text/plain', 'compressed': False}
&gt;&gt;&gt; _['']
'test_\xe5\x93\xa6\xe4\xba\x88\xe4\xbb\xa5\xe8\x85\xbf\xe5\x93\xa6.doc.txt'
&gt;&gt;&gt; print _
test_哦予以腿哦.doc.txt
</snippet></ROW><ROW><id>6530427</id><snippet>&gt;&gt;&gt; import json, urllib
&gt;&gt;&gt; json.loads(urllib.unquote('{%22%22%3A%22test_%E5%93%A6%E4%BA%88%E4%BB%A5%E8%85%BF%E5%93%A6.doc.txt%22%2C%22mimeType%22%3A%22text%2Fplain%22%2C%22compressed%22%3Afalse%7D'))['']
u'test_\u54e6\u4e88\u4ee5\u817f\u54e6.doc.txt'
&gt;&gt;&gt; print _
test_哦予以腿哦.doc.txt
</snippet></ROW><ROW><id>6531461</id><snippet>event.GetText()</snippet></ROW><ROW><id>6531461</id><snippet>event.GetItem().&lt;manipulate your item here&gt;</snippet></ROW><ROW><id>6531461</id><snippet>wx.ListEvent</snippet></ROW><ROW><id>6531582</id><snippet>index.html</snippet></ROW><ROW><id>6531582</id><snippet>&lt;html&gt;
    &lt;head&gt;
        &lt;title&gt;A web page that points a browser to a different page after 2 seconds&lt;/title&gt;
        &lt;meta http-equiv="refresh" content="2; URL=http://www.example.com"&gt;
        &lt;meta name="keywords" content="automatic redirection"&gt;
    &lt;/head&gt;
    &lt;body&gt;
        {PACKAGE_NAME}'s documentation is maintained elsewhere.
        You will be redirected to the new documentation within 2 seconds.
        If the browser does not automatically redirect you, you may want to go to &lt;a href="http://www.example.com"&gt;the destination&lt;/a&gt; manually.
    &lt;/body&gt;
&lt;/html&gt;
</snippet></ROW><ROW><id>6531690</id><snippet>id('test')</snippet></ROW><ROW><id>6531690</id><snippet>'test' is 'test'</snippet></ROW><ROW><id>6531690</id><snippet>True</snippet></ROW><ROW><id>6531704</id><snippet>any</snippet></ROW><ROW><id>6531704</id><snippet>if any(ext in url_string for ext in extensionsToCheck):
    print(url_string)
</snippet></ROW><ROW><id>6531807</id><snippet>for line in rb_text:
    # do something
</snippet></ROW><ROW><id>6531807</id><snippet>def find_details(id2find):
    rb_text = open('roombookings.txt', 'r')
    for line in rb_text:
        s = {}
        (s['Date'], s['Room'], s['Course'], s['Stage']) = line.split(";")
        if id2find == (s['Room']):
            yield s
    rb_text.close()
</snippet></ROW><ROW><id>6531807</id><snippet>for room in find_details(roomNumber):
    print("Date: " + room['Date'])
    print("Room: " + room['Room'])
    print("Course: " + room['Course'])
    print("Stage: " + room['Stage'])
</snippet></ROW><ROW><id>6532046</id><snippet>&lt;form action="" method="POST"&gt;
...
&lt;/form&gt;
</snippet></ROW><ROW><id>6532247</id><snippet>&gt;&gt;&gt; print re.findall ('[^\d ]+', "my t0kens");
['my', 't', 'kens']
&gt;&gt;&gt; print re.findall ('[\d]+', "my t0kens");
['0']
&gt;&gt;&gt;
</snippet></ROW><ROW><id>6532247</id><snippet>&gt;&gt;&gt; print re.findall('[a-zA-Z]+|\\d+', "my t0kens")
['my', 't', '0', 'kens']
&gt;&gt;&gt;
</snippet></ROW><ROW><id>6532323</id><snippet>#!/usr/bin/env python
import platform
import subprocess

commands = {
    'Darwin': {'ipv4': "ifconfig  | grep -E 'inet.[0-9]' | grep -v '127.0.0.1' | awk '{ print $2}'", 'ipv6': "ifconfig  | grep -E 'inet6.[0-9]' | grep -v 'fe80:' | awk '{ print $2}'"},
    'Linux': {'ipv4': "/sbin/ifconfig  | grep 'inet addr:'| grep -v '127.0.0.1' | cut -d: -f2 | awk '{ print $1}'", 'ipv6': "/sbin/ifconfig  | grep 'inet6 addr:'| grep 'Global' | grep -v 'fe80' | awk '{print $3}'"}
}

def ip_addresses(version):
    proc = subprocess.Popen(commands[platform.system()][version], shell=True,stdout=subprocess.PIPE)
    return proc.communicate()[0].replace('\n', '')

if __name__ == '__main__':
    print ip_addresses('ipv4')
    print ip_addresses('ipv6')
</snippet></ROW><ROW><id>6532656</id><snippet>multiprocess</snippet></ROW><ROW><id>6532908</id><snippet>from copy import copy, deepcopy
y = deepcopy(x)
</snippet></ROW><ROW><id>6532908</id><snippet>copy()</snippet></ROW><ROW><id>6533051</id><snippet>x= download_buffer.read(1024)
while x:
    self.wfile.write(x)
    x= download_buffer.read(1024)
</snippet></ROW><ROW><id>6533808</id><snippet>SubElement(parent, tag, attrib={}, **extra)
</snippet></ROW><ROW><id>6533808</id><snippet>root.append(child)
</snippet></ROW><ROW><id>6534097</id><snippet>save()</snippet></ROW><ROW><id>6534097</id><snippet>create()</snippet></ROW><ROW><id>6534493</id><snippet>brew info opencv</snippet></ROW><ROW><id>6534493</id><snippet>import sys</snippet></ROW><ROW><id>6534493</id><snippet>sys.path.insert(0, "/usr/local/lib/python2.6/site-packages/")</snippet></ROW><ROW><id>6534493</id><snippet>import cv</snippet></ROW><ROW><id>6534998</id><snippet>itertools.permutations</snippet></ROW><ROW><id>6534998</id><snippet>next_permutation</snippet></ROW><ROW><id>6534998</id><snippet>itertools.permutations</snippet></ROW><ROW><id>6534998</id><snippet>&gt;&gt;&gt; list(itertools.permutations([1+2j, 1-2j, 2+j, 2-j]))
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
TypeError: no ordering relation is defined for complex numbers
</snippet></ROW><ROW><id>6534998</id><snippet>itertools.permutations</snippet></ROW><ROW><id>6534998</id><snippet>__eq__</snippet></ROW><ROW><id>6534998</id><snippet>itertools.permutations</snippet></ROW><ROW><id>6534998</id><snippet>itertools</snippet></ROW><ROW><id>6534998</id><snippet>itertools.permutations</snippet></ROW><ROW><id>6535281</id><snippet>class StructReader(object):
    def __init__(self, input_file):
        self.input_file = input_file

    def get_float(self, n):
        fmt = ...
        return struct.unpack(fmt, self.input_file.read(struct.calcsize(fmt)))

    ...
</snippet></ROW><ROW><id>6535360</id><snippet>class ExpressionNode(object):
    def __init__(self, tokens):
        self.tokens = tokens

    def __repr__(self):
        return "%s:\n%s" % (self.__class__.__name__, self.tokens.dump(indent='  '))

    def __getattr__(self, attr):
        return getattr(self.tokens, attr)

class SelectNode(ExpressionNode): pass

select_stmt.setParseAction(SelectNode)
stmtobj = select_stmt.parseString("SELECT * FROM B")[0]
print stmtobj.columns
</snippet></ROW><ROW><id>6535722</id><snippet>def right_shift(data, bits):
    sign = (data &gt;&gt; 31) &amp; 1 
    if sign:
       fills = ((sign &lt;&lt; bits) - 1) &lt;&lt; (32 - bits)
    else:
       fills = 0
    return ((data &amp; 0xffffffff) &gt;&gt; bits) | fills
</snippet></ROW><ROW><id>6535722</id><snippet>def zero_fill_right_shit(data, bits):
    return (data &amp; 0xffffffff) &gt;&gt; bits
</snippet></ROW><ROW><id>6535797</id><snippet>&gt;&gt;&gt; import code
&gt;&gt;&gt; def host_func():
...     print("Hello old chap!")
...
&gt;&gt;&gt; c = code.compile_command("print(\"Script says hello!\"); host_func()")
&gt;&gt;&gt; exec(c)
Script says hello!
Hello old chap!
</snippet></ROW><ROW><id>6535797</id><snippet>exec</snippet></ROW><ROW><id>6535797</id><snippet>locals</snippet></ROW><ROW><id>6535797</id><snippet>globals</snippet></ROW><ROW><id>6535797</id><snippet>&gt;&gt;&gt; import code
&gt;&gt;&gt; def secret():
...     print("What?! I don't even... get out of here.")
...
&gt;&gt;&gt; def public():
...     print("Hello stranger.")
...
&gt;&gt;&gt; c = code.compile_command("secret(); public()")
</snippet></ROW><ROW><id>6535797</id><snippet>&gt;&gt;&gt; exec(c, {"secret": secret, "public": public})
What?! I don't even... get out of here.
Hello stranger.
</snippet></ROW><ROW><id>6535797</id><snippet>secret</snippet></ROW><ROW><id>6535797</id><snippet>&gt;&gt;&gt; exec(c, {"public": public})
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
  File "&lt;input&gt;", line 1, in &lt;module&gt;
NameError: name 'secret' is not defined
</snippet></ROW><ROW><id>6535797</id><snippet>secret</snippet></ROW><ROW><id>6535797</id><snippet>&gt;&gt;&gt; exec(c, {"public": public, "secret":lambda: print("Haha! Doppelganger.")})
Haha! Doppelganger.
Hello stranger.
</snippet></ROW><ROW><id>6535797</id><snippet>__builtins__</snippet></ROW><ROW><id>6535797</id><snippet>import</snippet></ROW><ROW><id>6535797</id><snippet>__builtins__</snippet></ROW><ROW><id>6535797</id><snippet>&gt;&gt;&gt; import builtins
&gt;&gt;&gt; def no_import(*args, **kwargs):
...     raise ImportError("I cannot let you do that, Dave.")
...
&gt;&gt;&gt; builtins.__import__ = no_import
&gt;&gt;&gt; import os
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
  File "&lt;stdin&gt;", line 2, in no_import
ImportError: I cannot let you do that, Dave.
</snippet></ROW><ROW><id>6535797</id><snippet>builtins</snippet></ROW><ROW><id>6535797</id><snippet>&gt;&gt;&gt; import code
&gt;&gt;&gt; evil_code = "import os; import stat; os.chmod(\"passwords.txt\", stat.S_IROT
H);"
&gt;&gt;&gt; compiled = code.compile_command(evil_code)
&gt;&gt;&gt; def no_import(*args, **kwargs):
...    raise ImportError("I cannot let you do that, Dave.")
...
&gt;&gt;&gt; exec(compiled, {"__builtins__": {"__import__": no_import}})
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
  File "&lt;input&gt;", line 1, in &lt;module&gt;
  File "&lt;stdin&gt;", line 2, in no_import
ImportError: I cannot let you do that, Dave.
</snippet></ROW><ROW><id>6535884</id><snippet>super(SubClass, self).__init__(...)
</snippet></ROW><ROW><id>6537136</id><snippet>def checkall(xs):
    for j, x in enumerate(xs):
        if abs(x) &gt; (2 if j % 2 else 1):
            return -1
    return 1
cons = (checkall,)
</snippet></ROW><ROW><id>6537136</id><snippet>def checkpos(j):
    if j % 2:
        return lambda xs: 2 - xs[j]
    else:
        return lambda xs: 1 - xs[j]
def checkneg(j):
    if j % 2:
        return lambda xs: 2 + xs[j]
    else:
        return lambda xs: 1 + xs[j]

cons = [checkpos(j) for j in range(N)] + [checkneg(j) for j in range(N)]
</snippet></ROW><ROW><id>6537219</id><snippet>inputText = "x1 y1\n x2 y2\n x3 y3\n"
print [line.split() for line in inputText.split('\n') if line]
</snippet></ROW><ROW><id>6537296</id><snippet>post_save</snippet></ROW><ROW><id>6537296</id><snippet>created</snippet></ROW><ROW><id>6537497</id><snippet>multiprocessing</snippet></ROW><ROW><id>6537563</id><snippet>import winsound
Freq = 2500 # Set Frequency To 2500 Hertz
Dur = 1000 # Set Duration To 1000 ms == 1 second
winsound.Beep(Freq,Dur)
</snippet></ROW><ROW><id>6537695</id><snippet>def qs_ancestors(queryset):
    if isinstance(queryset, EmptyQuerySet):
        return queryset
    new_queryset = queryset.none()
    for obj in queryset:
        new_queryset = new_queryset | obj.get_ancestors()
return new_queryset
</snippet></ROW><ROW><id>6537695</id><snippet>min_obj_set = []
for obj in queryset.order_by('tree_id', '-level'):
    for obj2 in min_obj_set:
        if obj.is_ancestor_of(obj2):
            break
    else:
        min_obj_set.append(obj)
</snippet></ROW><ROW><id>6537986</id><snippet>(Pdb) from jam2dot import JamParser
(Pdb) b JamParser.parse
</snippet></ROW><ROW><id>6538101</id><snippet>cv.Line</snippet></ROW><ROW><id>6538101</id><snippet>cv.Line</snippet></ROW><ROW><id>6538101</id><snippet>def grid(p):
    """Return the nearest point with integer coordinates to p."""
    return int(round(p[0])), int(round(p[1]))
</snippet></ROW><ROW><id>6538101</id><snippet>cv.Line(sg,pt[0],pt[1],(0,255,0),2)
</snippet></ROW><ROW><id>6538101</id><snippet>cv.Line(sg,grid(pt[0]),grid(pt[1]),(0,255,0),2)
</snippet></ROW><ROW><id>6538178</id><snippet>/request</snippet></ROW><ROW><id>6538178</id><snippet>class LoginPage(object):
    ...
    @cherrypy.expose
    def request(self, username, password):
        auth = SiteAuth()
        if not auth.isAuthorizedUser(username,password):
            cherrypy.response.headers['Content-Type'] = 'application/json'
            return simplejson.dumps(dict(response ="Invalid username and/or password"))
        else:
            return open(os.path.join(MEDIA_DIR, u'network.html'))
</snippet></ROW><ROW><id>6538178</id><snippet>/request</snippet></ROW><ROW><id>6538178</id><snippet>/device</snippet></ROW><ROW><id>6538178</id><snippet>class LoginPage(object):
    ...
    @cherrypy.expose
    def request(self, username, password):
        auth = SiteAuth()
        if not auth.isAuthorizedUser(username,password):
            cherrypy.response.headers['Content-Type'] = 'application/json'
            return simplejson.dumps(dict(response ="Invalid username and/or password"))
        else:
            raise cherrypy.HTTPRedirect('/device')
</snippet></ROW><ROW><id>6538193</id><snippet>super</snippet></ROW><ROW><id>6538193</id><snippet>__init__</snippet></ROW><ROW><id>6538193</id><snippet>SecondClass</snippet></ROW><ROW><id>6538193</id><snippet>FirstClass</snippet></ROW><ROW><id>6538193</id><snippet>FirstClass</snippet></ROW><ROW><id>6538193</id><snippet>__init__</snippet></ROW><ROW><id>6538193</id><snippet>value</snippet></ROW><ROW><id>6538193</id><snippet>super(SecondClass, self)</snippet></ROW><ROW><id>6538193</id><snippet>__init__</snippet></ROW><ROW><id>6538193</id><snippet>meth</snippet></ROW><ROW><id>6538193</id><snippet>__init__</snippet></ROW><ROW><id>6538193</id><snippet>super</snippet></ROW><ROW><id>6538193</id><snippet>class FirstClass(object):
    def __init__ (self, value="I am the value from FirstClass"):
        print value

    def meth(self):
        print "I am meth from FirstClass"

    def meth2(self):
        print "I am meth2 from FirstClass"

class SecondClass(FirstClass):
    def __init__ (self):
        print "I am in SecondClass"
        super(SecondClass, self).__init__(value="I am the value from SecondClass")

    def meth(self):
        print "I am meth from SecondClass"


a=FirstClass() # prints "I am the value from FirstClass"
b=SecondClass() # prints *both* "I am in SecondClass" *and* "I am the value from SecondClass

a.meth() # prints "I am meth from FirstClass"
b.meth() # prints "I am meth from SecondClass"

a.meth2() # prints "I am meth2 from FirstClass"
b.meth2() # *also* prints "I am meth2 from FirstClass", because you didn't redefine it.
</snippet></ROW><ROW><id>6538526</id><snippet> from PyQt4 import QtGui, QtCore
 from PyQt4.phonon import Phonon
 list_of_backend_audio_effects = Phonon.BackendCapabilities.availableAudioEffects()
</snippet></ROW><ROW><id>6538526</id><snippet> list_of_effect_names = [str(elem.name()) for elem in list_of_backend_audio_effects]
 for iter in range(len(list_of_effect_names)):
     if list_of_effect_names[iter] == 'speed':
         effect_index = iter
         break
</snippet></ROW><ROW><id>6538526</id><snippet> speed_effect = Phonon.Effect(list_of_backend_audio_effects[effect_index])
 speed_effect.setParameterValue(speed_effect.parameters()[0],QtCore.QVariant(str(2)))
</snippet></ROW><ROW><id>6538622</id><snippet>module_loader('datetime', globals, locals)
</snippet></ROW><ROW><id>6538773</id><snippet>shell=True</snippet></ROW><ROW><id>6538773</id><snippet>shell=True</snippet></ROW><ROW><id>6538773</id><snippet>shell=False</snippet></ROW><ROW><id>6538898</id><snippet>find</snippet></ROW><ROW><id>6538898</id><snippet>replace</snippet></ROW><ROW><id>6538898</id><snippet>return substring in string_
</snippet></ROW><ROW><id>6538898</id><snippet>find</snippet></ROW><ROW><id>6538898</id><snippet>replace</snippet></ROW><ROW><id>6538965</id><snippet>mgr = Manager.objects.get(id=1)
emps = mgr.employee_set.all()
</snippet></ROW><ROW><id>6538965</id><snippet>mgr = Manager.objects.create(name='John')
emp = Employee.objects.create(name='Johns Slave', manager=mgr)
</snippet></ROW><ROW><id>6539203</id><snippet>method='c14n'</snippet></ROW><ROW><id>6539324</id><snippet>var1 = barcode[:3]   # first three characters
var2 = barcode[3:-1] # all characters from third to next-to-last
var3 = barcode[-1]   # last character
</snippet></ROW><ROW><id>6539393</id><snippet>Image.tostring()</snippet></ROW><ROW><id>6539393</id><snippet>imgdata</snippet></ROW><ROW><id>6539393</id><snippet>typedef unsigned int uint32;
typedef unsigned char uint8;

typedef struct simple_image_t {
    uint32 rows;
    uint32 cols;
    uint8 *imgdata;
} simple_image;

#ifdef SAMPLE_EXPORT
#   define SAMPLE_API __declspec(dllexport)
#else
#   define SAMPLE_API __declspec(dllimport)
#endif

SAMPLE_API void some_func(const simple_image* si);
</snippet></ROW><ROW><id>6539393</id><snippet>#include &lt;stdio.h&gt;

#define SAMPLE_EXPORT
#include "sample.h"

void some_func(const simple_image* si)
{
    uint32 i,j;

    printf(
        "rows = %d\n"
        "cols = %d\n",
        si-&gt;rows,si-&gt;cols);

    /* Dump a simple map of the image data */
    for(i = 0; i &lt; si-&gt;rows; i++)
    {
        for(j = 0; j &lt; si-&gt;cols; j++)
        {
            if(si-&gt;imgdata[i * si-&gt;rows + j] &lt; 0x80)
                printf(" ");
            else
                printf("*");
        }
        printf("\n");
    }
}
</snippet></ROW><ROW><id>6539393</id><snippet>%module sample

%begin %{
#pragma warning(disable:4100 4127 4706)
%}

%{
#include "sample.h"
%}

%include &lt;windows.i&gt;

%typemap(in) uint8* (char* buffer, Py_ssize_t length) {
    PyString_AsStringAndSize($input,&amp;buffer,&amp;length);
    $1 = (uint8*)buffer;
}

%include "sample.h"
</snippet></ROW><ROW><id>6539393</id><snippet>all: _sample.pyd

sample.dll: sample.c sample.h
    cl /nologo /W4 /LD /MD sample.c

sample_wrap.c: sample.i
    @echo sample.i
    swig -python sample.i

_sample.pyd: sample_wrap.c sample.dll
    cl /nologo /W4 /LD /MD /Fe_sample.pyd sample_wrap.c /Ic:\Python27\include -link /LIBPATH:c:\Python27\libs python27.lib sample.lib
</snippet></ROW><ROW><id>6539393</id><snippet>from PIL import Image
import sample

im = Image.open('sample.gif')
im = im.convert('L')
si = sample.simple_image()
si.rows,si.cols = im.size
s = im.tostring() # Must keep a reference 
si.imgdata = s
sample.some_func(si)
</snippet></ROW><ROW><id>6539393</id><snippet>si.imgdata = im.tostring()
</snippet></ROW><ROW><id>6539393</id><snippet>PyString_AsStringAndSize</snippet></ROW><ROW><id>6539393</id><snippet>some_func</snippet></ROW><ROW><id>6539393</id><snippet>s</snippet></ROW><ROW><id>6539527</id><snippet>python-pygame</snippet></ROW><ROW><id>6539798</id><snippet>dict(MyModel.objects.values_list('id', 'my_column'))</snippet></ROW><ROW><id>6539798</id><snippet>my_column</snippet></ROW><ROW><id>6539798</id><snippet>MyModel.objects.values_list('my_column', flat=True)</snippet></ROW><ROW><id>6539919</id><snippet>apple.decode('iso-8859-1').encode('utf8')
</snippet></ROW><ROW><id>6540547</id><snippet>python setup.py config --fcompiler=gfortran build_ext --inplace
</snippet></ROW><ROW><id>6540547</id><snippet>python setup.py config --fcompiler=gfortran build_ext
</snippet></ROW><ROW><id>6540619</id><snippet>socket</snippet></ROW><ROW><id>6540725</id><snippet>class SessionManager(models.Manager):
    def new_session(self, visit, **kwargs):
        vs = self.model.objects.filter(visit=visit).order_by("-sequence_no")[:1]
        if len(vs):
            kwargs.update({"sequence_no": vs.sequence_no + 1})
        return Super(SessionManager, self).create(visit=visit, **kwargs)
</snippet></ROW><ROW><id>6540820</id><snippet>%s</snippet></ROW><ROW><id>6540820</id><snippet>cursor.execute("""INSERT INTO scan (prefix, code_id, answer, station) VALUES(%s, %s, %s, %s, timestamp, comport)""",(prefix, code_id, answer, station))
</snippet></ROW><ROW><id>6540833</id><snippet>tkinter</snippet></ROW><ROW><id>6540833</id><snippet># Import several GUI libraries.
import tkinter.ttk
import tkinter.filedialog
import tkinter.messagebox

# Import other needed modules.
import queue
import _thread
import operator

################################################################################

class AffinityLoop:

    "Restricts code execution to thread that instance was created on."

    __slots__ = '__action', '__thread'

    def __init__(self):
        "Initialize AffinityLoop with job queue and thread identity."
        self.__action = queue.Queue()
        self.__thread = _thread.get_ident()

    def run(self, func, *args, **keywords):
        "Run function on creating thread and return result."
        if _thread.get_ident() == self.__thread:
            self.__run_jobs()
            return func(*args, **keywords)
        else:
            job = self.__Job(func, args, keywords)
            self.__action.put_nowait(job)
            return job.result

    def __run_jobs(self):
        "Run all pending jobs currently in the job queue."
        while not self.__action.empty():
            job = self.__action.get_nowait()
            job.execute()

    ########################################################################

    class __Job:

        "Store information to run a job at a later time."

        __slots__ = ('__func', '__args', '__keywords',
                     '__error', '__mutex', '__value')

        def __init__(self, func, args, keywords):
            "Initialize the job's info and ready for execution."
            self.__func = func
            self.__args = args
            self.__keywords = keywords
            self.__error = False
            self.__mutex = _thread.allocate_lock()
            self.__mutex.acquire()

        def execute(self):
            "Run the job, store any error, and return to sender."
            try:
                self.__value = self.__func(*self.__args, **self.__keywords)
            except Exception as error:
                self.__error = True
                self.__value = error
            self.__mutex.release()

        @property
        def result(self):
            "Return execution result or raise an error."
            self.__mutex.acquire()
            if self.__error:
                raise self.__value
            return self.__value

################################################################################

class _ThreadSafe:

    "Create a thread-safe GUI class for safe cross-threaded calls."

    ROOT = tkinter.Tk

    def __init__(self, master=None, *args, **keywords):
        "Initialize a thread-safe wrapper around a GUI base class."
        if master is None:
            if self.BASE is not self.ROOT:
                raise ValueError('Widget must have a master!')
            self.__job = AffinityLoop() # Use Affinity() if it does not break.
            self.__schedule(self.__initialize, *args, **keywords)
        else:
            self.master = master
            self.__job = master.__job
            self.__schedule(self.__initialize, master, *args, **keywords)

    def __initialize(self, *args, **keywords):
        "Delegate instance creation to later time if necessary."
        self.__obj = self.BASE(*args, **keywords)

    ########################################################################

    # Provide a framework for delaying method execution when needed.

    def __schedule(self, *args, **keywords):
        "Schedule execution of a method till later if necessary."
        return self.__job.run(self.__run, *args, **keywords)

    @classmethod
    def __run(cls, func, *args, **keywords):
        "Execute the function after converting the arguments."
        args = tuple(cls.unwrap(i) for i in args)
        keywords = dict((k, cls.unwrap(v)) for k, v in keywords.items())
        return func(*args, **keywords)

    @staticmethod
    def unwrap(obj):
        "Unpack inner objects wrapped by _ThreadSafe instances."
        return obj.__obj if isinstance(obj, _ThreadSafe) else obj

    ########################################################################

    # Allow access to and manipulation of wrapped instance's settings.

    def __getitem__(self, key):
        "Get a configuration option from the underlying object."
        return self.__schedule(operator.getitem, self, key)

    def __setitem__(self, key, value):
        "Set a configuration option on the underlying object."
        return self.__schedule(operator.setitem, self, key, value)

    ########################################################################

    # Create attribute proxies for methods and allow their execution.

    def __getattr__(self, name):
        "Create a requested attribute and return cached result."
        attr = self.__Attr(self.__callback, (name,))
        setattr(self, name, attr)
        return attr

    def __callback(self, path, *args, **keywords):
        "Schedule execution of named method from attribute proxy."
        return self.__schedule(self.__method, path, *args, **keywords)

    def __method(self, path, *args, **keywords):
        "Extract a method and run it with the provided arguments."
        method = self.__obj
        for name in path:
            method = getattr(method, name)
        return method(*args, **keywords)

    ########################################################################

    class __Attr:

        "Save an attribute's name and wait for execution."

        __slots__ = '__callback', '__path'

        def __init__(self, callback, path):
            "Initialize proxy with callback and method path."
            self.__callback = callback
            self.__path = path

        def __call__(self, *args, **keywords):
            "Run a known method with the given arguments."
            return self.__callback(self.__path, *args, **keywords)

        def __getattr__(self, name):
            "Generate a proxy object for a sub-attribute."
            if name in {'__func__', '__name__'}:
                # Hack for the "tkinter.__init__.Misc._register" method.
                raise AttributeError('This is not a real method!')
            return self.__class__(self.__callback, self.__path + (name,))

################################################################################

# Provide thread-safe classes to be used from tkinter.

class Tk(_ThreadSafe): BASE = tkinter.Tk
class Frame(_ThreadSafe): BASE = tkinter.ttk.Frame
class Button(_ThreadSafe): BASE = tkinter.ttk.Button
class Entry(_ThreadSafe): BASE = tkinter.ttk.Entry
class Progressbar(_ThreadSafe): BASE = tkinter.ttk.Progressbar
class Treeview(_ThreadSafe): BASE = tkinter.ttk.Treeview
class Scrollbar(_ThreadSafe): BASE = tkinter.ttk.Scrollbar
class Sizegrip(_ThreadSafe): BASE = tkinter.ttk.Sizegrip
class Menu(_ThreadSafe): BASE = tkinter.Menu
class Directory(_ThreadSafe): BASE = tkinter.filedialog.Directory
class Message(_ThreadSafe): BASE = tkinter.messagebox.Message
</snippet></ROW><ROW><id>6540833</id><snippet>_ThreadSafe</snippet></ROW><ROW><id>6540833</id><snippet>tkinter</snippet></ROW><ROW><id>6540833</id><snippet>mainloop</snippet></ROW><ROW><id>6540833</id><snippet>@classmethod
def main(cls):
    "Create an application containing a single TrimDirView widget."
    tkinter.NoDefaultRoot()
    root = cls.create_application_root()
    cls.attach_window_icon(root, ICON)
    view = cls.setup_class_instance(root)
    cls.main_loop(root)
</snippet></ROW><ROW><id>6540833</id><snippet>@staticmethod
def main_loop(root):
    "Process all GUI events according to tkinter's settings."
    target = time.clock()
    while True:
        try:
            root.update()
        except tkinter.TclError:
            break
        target += tkinter._tkinter.getbusywaitinterval() / 1000
        time.sleep(max(target - time.clock(), 0))
</snippet></ROW><ROW><id>6540852</id><snippet>HasPage</snippet></ROW><ROW><id>6540852</id><snippet>FigurePrintout</snippet></ROW><ROW><id>6540852</id><snippet>def HasPage(self, page):
    return page &lt;= 1
</snippet></ROW><ROW><id>6540852</id><snippet>return page == 1</snippet></ROW><ROW><id>6540852</id><snippet>GetPageInfo</snippet></ROW><ROW><id>6540988</id><snippet>import re
regex = re.compile(r'[,:/]')
a, b, c, d, e = regex.split('a,b:c,d/e')
</snippet></ROW><ROW><id>6541289</id><snippet>BYTES = 'abera\xc8\x9bie'
</snippet></ROW><ROW><id>6541289</id><snippet>utf-8</snippet></ROW><ROW><id>6541289</id><snippet>&gt;&gt;&gt; BYTES 
'abera\xc8\x9bie'
&gt;&gt;&gt; print BYTES 
aberaÈ›ie
&gt;&gt;&gt; abberation = BYTES.decode('utf-8')
&gt;&gt;&gt; abberation 
u'abera\u021bie'
&gt;&gt;&gt; print abberation 
aberație
</snippet></ROW><ROW><id>6541289</id><snippet>&gt;&gt;&gt; abberation.encode('utf-8')
'abera\xc8\x9bie'
&gt;&gt;&gt; abberation.encode('utf-16')
'\xff\xfea\x00b\x00e\x00r\x00a\x00\x1b\x02i\x00e\x00'
</snippet></ROW><ROW><id>6541296</id><snippet>ae1.111</snippet></ROW><ROW><id>6541296</id><snippet>ae0.842</snippet></ROW><ROW><id>6541296</id><snippet>-NONE-</snippet></ROW><ROW><id>6541296</id><snippet>111</snippet></ROW><ROW><id>6541296</id><snippet>842</snippet></ROW><ROW><id>6541296</id><snippet>842</snippet></ROW><ROW><id>6541296</id><snippet>111</snippet></ROW><ROW><id>6541296</id><snippet>775</snippet></ROW><ROW><id>6541691</id><snippet>from lxml import etree

xml_string = """
&lt;response method="switchvox.currentCalls.getList"&gt;
    &lt;result&gt;
            &lt;current_calls total_items="3"&gt;
                            &lt;current_call id="SIP/6525-b59313c8" from_caller_id_name="user1" from_caller_id_number="user1_ext" to_caller_id_name="callee1" to_caller_id_number="callee1_num"  start_time="2011-06-30 15:44:17" duration="346" state="talking" provider="Internal" format="g722-&gt;g722" /&gt;
                            &lt;current_call id="SIP/4476-b595a0a0" from_caller_id_name="user2" from_caller_id_number="user1_ext" to_caller_id_name="callee2" to_caller_id_number="callee2_num"  start_time="2011-06-30 15:48:44" duration="79" state="talking" provider="VCG_B" format="g722-&gt;ulaw" /&gt;
                            &lt;current_call id="SIP/4483-0aa41320" from_caller_id_name="user3" from_caller_id_number="user1_ext" to_caller_id_name="callee3" to_caller_id_number="callee3_num"  start_time="2011-06-30 15:47:54" duration="129" state="talking" provider="VCG_B" format="g722-&gt;ulaw" /&gt;
            &lt;/current_calls&gt;
    &lt;/result&gt;
&lt;/response&gt;
"""

tree = etree.fromstring(xml_string)

for call in tree.xpath('.//current_call'):
    print call.attrib
</snippet></ROW><ROW><id>6541691</id><snippet>{'from_caller_id_number': 'user1_ext', 'to_caller_id_name': 'callee1', 'start_time': '2011-06-30 15:44:17', 'format': 'g722-&gt;g722', 'to_caller_id_number': 'callee1_num',
state': 'talking', 'provider': 'Internal', 'duration': '346', 'id': 'SIP/6525-b59313c8', 'from_caller_id_name': 'user1'}
{'from_caller_id_number': 'user1_ext', 'to_caller_id_name': 'callee2', 'start_time': '2011-06-30 15:48:44', 'format': 'g722-&gt;ulaw', 'to_caller_id_number': 'callee2_num',
state': 'talking', 'provider': 'VCG_B', 'duration': '79', 'id': 'SIP/4476-b595a0a0', 'from_caller_id_name': 'user2'}
{'from_caller_id_number': 'user1_ext', 'to_caller_id_name': 'callee3', 'start_time': '2011-06-30 15:47:54', 'format': 'g722-&gt;ulaw', 'to_caller_id_number': 'callee3_num',
state': 'talking', 'provider': 'VCG_B', 'duration': '129', 'id': 'SIP/4483-0aa41320', 'from_caller_id_name': 'user3'}
</snippet></ROW><ROW><id>6541755</id><snippet>import numpy as np
from scipy.spatial import Delaunay

points = np.random.rand(30, 2) # 30 points in 2-d
tri = Delaunay(points)

# Make a list of line segments: 
# edge_points = [ ((x1_1, y1_1), (x2_1, y2_1)),
#                 ((x1_2, y1_2), (x2_2, y2_2)),
#                 ... ]
edge_points = []
edges = set()

def add_edge(i, j):
    """Add a line between the i-th and j-th points, if not in the list already"""
    if (i, j) in edges or (j, i) in edges:
        # already added
        return
    edges.add( (i, j) )
    edge_points.append(points[ [i, j] ])

# loop over triangles: 
# ia, ib, ic = indices of corner points of the triangle
for ia, ib, ic in tri.vertices:
    add_edge(ia, ib)
    add_edge(ib, ic)
    add_edge(ic, ia)

# plot it: the LineCollection is just a (maybe) faster way to plot lots of
# lines at once
import matplotlib.pyplot as plt
from matplotlib.collections import LineCollection

lines = LineCollection(edge_points)
plt.figure()
plt.title('Delaunay triangulation')
plt.gca().add_collection(lines)
plt.plot(points[:,0], points[:,1], 'o', hold=1)
plt.xlim(-1, 2)
plt.ylim(-1, 2)

# -- the same stuff for the convex hull

edges = set()
edge_points = []

for ia, ib in tri.convex_hull:
    add_edge(ia, ib)

lines = LineCollection(edge_points)
plt.figure()
plt.title('Convex hull')
plt.gca().add_collection(lines)
plt.plot(points[:,0], points[:,1], 'o', hold=1)
plt.xlim(-1, 2)
plt.ylim(-1, 2)
plt.show()
</snippet></ROW><ROW><id>6541755</id><snippet>scipy.spatial.Delaunay</snippet></ROW><ROW><id>6541978</id><snippet>Ts = [T0]
Tx = []
counter = 1
for T in Ts:
    for t in T:
        Ts.append([s[0] * s[1] + s[2] for s in izip(Ts[-1], C, QIN)])
</snippet></ROW><ROW><id>6542236</id><snippet>jsonResponse = json.loads(response.decode('utf-8'))
</snippet></ROW><ROW><id>6542526</id><snippet>"""
demo of multiple processes doing processing and publishing the results
to a common subscriber
"""
from multiprocessing import Process


class Worker(Process):
    def __init__(self, filename, bind):
        self._filename = filename
        self._bind = bind
        super(Worker, self).__init__()

    def run(self):
        import zmq
        import time
        ctx = zmq.Context()
        result_publisher = ctx.socket(zmq.PUB)
        result_publisher.bind(self._bind)
        time.sleep(1)
        with open(self._filename) as my_input:
            for l in my_input.readlines():
                result_publisher.send(l)

if __name__ == '__main__':
    import sys
    import os
    import zmq

    #assume every argument but the first is a file to be processed
    files = sys.argv[1:]

    # create a worker for each file to be processed if it exists pass
    # in a bind argument instructing the socket to communicate via ipc
    workers = [Worker(f, "ipc://%s_%s" % (f, i)) for i, f \
               in enumerate((x for x in files if os.path.exists(x)))]

    # create subscriber socket
    ctx = zmq.Context()

    result_subscriber = ctx.socket(zmq.SUB)
    result_subscriber.setsockopt(zmq.SUBSCRIBE, "")

    # wire up subscriber to whatever the worker is bound to 
    for w in workers:
        print w._bind
        result_subscriber.connect(w._bind)

    # start workers
    for w in workers:
        print "starting workers..."
        w.start()

    result = []

    # read from the subscriber and add it to the result list as long
    # as at least one worker is alive
    while [w for w in workers if w.is_alive()]:
        result.append(result_subscriber.recv())
    else:
        # output the result
        print result
</snippet></ROW><ROW><id>6542526</id><snippet>$ pip install pyzmq-static
</snippet></ROW><ROW><id>6542744</id><snippet>class Product(db.Model):
  # ...

class UserInfo(db.Model):
  # ...

class ProductList(db.Model):
  owner = db.ReferenceProperty(UserInfo)
  products = db.ListProperty(db.Key)
</snippet></ROW><ROW><id>6542744</id><snippet>product_keys = set(Product.all(keys_only=True).fetch(1000))
product_list = ProductList.get_by_id(product_list_id)
missing_products = product_keys - set(product_list.products)
</snippet></ROW><ROW><id>6542744</id><snippet>missing_products</snippet></ROW><ROW><id>6542744</id><snippet>db.get</snippet></ROW><ROW><id>6542808</id><snippet>&gt;&gt;&gt; "test.png".endswith(('jpg', 'png', 'gif'))
True
</snippet></ROW><ROW><id>6542808</id><snippet>&gt;&gt;&gt; import re
&gt;&gt;&gt; re.compile('jpg|png|gif').search('testpng.txt')
&lt;_sre.SRE_Match object at 0xb74a46e8&gt;
&gt;&gt;&gt; re.compile('jpg|png|gif').search('testpg.txt')
</snippet></ROW><ROW><id>6543089</id><snippet>.filter(Blog.keywords.any(Keyword.name.in_(['keyword1', 'keyword2', ...])))
</snippet></ROW><ROW><id>6543279</id><snippet>db.Model</snippet></ROW><ROW><id>6543279</id><snippet>db.Model</snippet></ROW><ROW><id>6543640</id><snippet>&gt;&gt;&gt; shares_1 = [50, 100, 75, 200]
&gt;&gt;&gt; shares_2 = [100, 100, 300, 500]
&gt;&gt;&gt; print shares_1.extend(shares_2)
None
&gt;&gt;&gt; print shares_1.sort()
None
</snippet></ROW><ROW><id>6543640</id><snippet>sorted</snippet></ROW><ROW><id>6543640</id><snippet>&gt;&gt;&gt; shares_1.extend(shares_2)
&gt;&gt;&gt; shares_3 = sorted(shares_1)
&gt;&gt;&gt; shares_3
[50, 75, 100, 100, 100, 100, 100, 200, 300, 300, 500, 500]
</snippet></ROW><ROW><id>6543640</id><snippet>&gt;&gt;&gt; def foo():
...     pass
... 
&gt;&gt;&gt; foo() = 1
  File "&lt;stdin&gt;", line 1
SyntaxError: can't assign to function call
</snippet></ROW><ROW><id>6543751</id><snippet>fp = urllib2.urlopen("http://remotedomain.com/file.mp3")
</snippet></ROW><ROW><id>6543987</id><snippet>initVM()</snippet></ROW><ROW><id>6543987</id><snippet>settings.py</snippet></ROW><ROW><id>6543987</id><snippet>attachCurrentThread</snippet></ROW><ROW><id>6543987</id><snippet>lucene</snippet></ROW><ROW><id>6543987</id><snippet>attachCurrentThread</snippet></ROW><ROW><id>6543987</id><snippet>vm_env = lucene.getVMEnv()
vm_env.attachCurrentThread()
</snippet></ROW><ROW><id>6543987</id><snippet>ìmport settings</snippet></ROW><ROW><id>6543987</id><snippet>django.conf import settings</snippet></ROW><ROW><id>6544069</id><snippet>jcomeau@intrepid:/tmp$ python
Python 2.6.7 (r267:88850, Jun 13 2011, 22:03:32) 
[GCC 4.6.1 20110608 (prerelease)] on linux2
Type "help", "copyright", "credits" or "license" for more information.
&gt;&gt;&gt; import re
&gt;&gt;&gt; re.compile('\(([^)]*)\)').search("transparent url(http://www.google.com/chart?chs=630x100&amp;cht=bvs&amp;chxt=x&amp;chxl=0:%7C1840%7C1860%7C1880%7C1900%7C1920%7C1940%7C1960%7C1980%7C2000%7C&amp;chxr=0,0,100&amp;chxs=0,676767,11.3000002,0,tl,676767,676767&amp;chd=e:D9AACPFjGWAAGDLfCeFgBvHLLSCZGED5GOKwDKCxJmF2FwFfERFwEZGcEJHlENJDJ9I0HQDjE-MAK2J9NMI9IAFtNaIOKtGoG2IYKBFvLEJmMLHdIFHXG.IPHrK2I9ULROI8SfHRFTeCIrQPOwXgPHVxQkbCbhg8iDwIvKkety..AAAAAAAA&amp;chbh=7,0,0&amp;chg=11.11,0,5,6&amp;chxp=0,0.0,11.1,22.2,33.3,44.4,55.6,66.7,77.8,88.9&amp;chco=3366cc,bbcced&amp;chm=R,bbbbbb,0,0.9954,1.0%7Ch,bbbbbb,0,1.0,1.0,1&amp;chxs=0,000000,11,-1&amp;hl=en)").groups()[0]
'http://www.google.com/chart?chs=630x100&amp;cht=bvs&amp;chxt=x&amp;chxl=0:%7C1840%7C1860%7C1880%7C1900%7C1920%7C1940%7C1960%7C1980%7C2000%7C&amp;chxr=0,0,100&amp;chxs=0,676767,11.3000002,0,tl,676767,676767&amp;chd=e:D9AACPFjGWAAGDLfCeFgBvHLLSCZGED5GOKwDKCxJmF2FwFfERFwEZGcEJHlENJDJ9I0HQDjE-MAK2J9NMI9IAFtNaIOKtGoG2IYKBFvLEJmMLHdIFHXG.IPHrK2I9ULROI8SfHRFTeCIrQPOwXgPHVxQkbCbhg8iDwIvKkety..AAAAAAAA&amp;chbh=7,0,0&amp;chg=11.11,0,5,6&amp;chxp=0,0.0,11.1,22.2,33.3,44.4,55.6,66.7,77.8,88.9&amp;chco=3366cc,bbcced&amp;chm=R,bbbbbb,0,0.9954,1.0%7Ch,bbbbbb,0,1.0,1.0,1&amp;chxs=0,000000,11,-1&amp;hl=en'
</snippet></ROW><ROW><id>6544110</id><snippet>MyAppRouter</snippet></ROW><ROW><id>6544110</id><snippet>class MyAppRouter(object):
    """A router to control all database operations on models in
    the myapp application"""

    def db_for_read(self, model, **hints):
        "Point all operations on myapp models to 'other'"
        if model._meta.app_label == 'myapp':
            return 'other'
        return None

    def db_for_write(self, model, **hints):
        "Point all operations on myapp models to 'other'"
        if model._meta.app_label == 'myapp':
            return 'other'
        return None

    def allow_relation(self, obj1, obj2, **hints):
        "Allow any relation if a model in myapp is involved"
        if obj1._meta.app_label == 'myapp' or obj2._meta.app_label == 'myapp':
            return True
        return None

    def allow_syncdb(self, db, model):
        "Make sure the myapp app only appears on the 'other' db"
        if db == 'other':
            return model._meta.app_label == 'myapp'
        elif model._meta.app_label == 'myapp':
            return False
        return None
</snippet></ROW><ROW><id>6544932</id><snippet>gt</snippet></ROW><ROW><id>6544932</id><snippet>os.path.getctime</snippet></ROW><ROW><id>6544932</id><snippet>os.path.getatime</snippet></ROW><ROW><id>6544932</id><snippet>import os, shutil

fromdir = '/home/mac/Desktop'
todir = '/home/mac/Desktop/tmp'
gt = os.path.getmtime  #change if you want something else
oldest = min([(f, gt(f)) for f in os.listdir(fromdir)])[0]
shutil.move(fromdir + '/' + oldest, todir)
</snippet></ROW><ROW><id>6544996</id><snippet>class filesDB(db.model) 
                   Template_file = db.BlobProperty()
                   Template_name= db.StringProperty()


       output = StringIO.StringIO()
       z = zipfile.ZipFile(output,'w')
       files =  filesDB.all().filter("fCreatedBy","sandeep")
       for fil in files:
        my_data = fil.Template_file
        z.writestr(fil.Template_name.encode('utf-8'), my_data)
        z.close()
</snippet></ROW><ROW><id>6545090</id><snippet>key</snippet></ROW><ROW><id>6545090</id><snippet>def split_ip(ip):
    """Split a IP address given as string into a 4-tuple of integers."""
    return tuple(int(part) for part in ip.split('.'))

def my_key(item):
    return split_ip(item[0])

items = sorted(ipCount.items(), key=my_key)
</snippet></ROW><ROW><id>6545090</id><snippet>split_ip()</snippet></ROW><ROW><id>6545090</id><snippet>'192.168.102.105'</snippet></ROW><ROW><id>6545090</id><snippet>(192, 168, 102, 105)</snippet></ROW><ROW><id>6545090</id><snippet>inet_aton()</snippet></ROW><ROW><id>6545090</id><snippet>socket</snippet></ROW><ROW><id>6545090</id><snippet>import socket
items = sorted(ipCount.items(), key=lambda item: socket.inet_aton(item[0]))
</snippet></ROW><ROW><id>6545143</id><snippet>&gt;&gt;&gt; a = Array.CreateInstance(Double, 3, 3)
</snippet></ROW><ROW><id>6545463</id><snippet>li[-1]</snippet></ROW><ROW><id>6545463</id><snippet>&gt;&gt;&gt; li = [1, 2, 3]
&gt;&gt;&gt; li.append(4)
&gt;&gt;&gt; li[-1]
4
</snippet></ROW><ROW><id>6545463</id><snippet>len(li) - 1</snippet></ROW><ROW><id>6545463</id><snippet>len(li)</snippet></ROW><ROW><id>6545463</id><snippet>len</snippet></ROW><ROW><id>6545463</id><snippet>list_length</snippet></ROW><ROW><id>6545463</id><snippet>Objects/listobject.c</snippet></ROW><ROW><id>6545463</id><snippet>static Py_ssize_t
list_length(PyListObject *a)
{
    return Py_SIZE(a);
}
</snippet></ROW><ROW><id>6545463</id><snippet>Py_SIZE</snippet></ROW><ROW><id>6545463</id><snippet>Include/object.h</snippet></ROW><ROW><id>6545463</id><snippet>#define Py_SIZE(ob)     (((PyVarObject*)(ob))-&gt;ob_size)
</snippet></ROW><ROW><id>6545463</id><snippet>len(lst)</snippet></ROW><ROW><id>6545836</id><snippet>def fix_json(string_):
    if string_[0] == string_[-1] == "'":
        return '"' + string_[1:-1] +'"'
    return string_
</snippet></ROW><ROW><id>6545836</id><snippet>&gt;&gt;&gt; fix_json("'{'key':'val\"'...cd'}'")
"{'key':'val"'...cd'}"
</snippet></ROW><ROW><id>6545836</id><snippet>&gt;&gt;&gt; fix_json("'This string has - I'm sure -  single quotes delimiters.'")
"This string has - I'm sure -  single quotes delimiters."
</snippet></ROW><ROW><id>6546036</id><snippet>global</snippet></ROW><ROW><id>6546036</id><snippet>global build_data</snippet></ROW><ROW><id>6546200</id><snippet>import csv
for row in csv.reader(open('allnamesallyearsn.csv')):
    c.execute(sql, row)
</snippet></ROW><ROW><id>6546200</id><snippet>import sqlite3, csv, time
from datetime import datetime, date

conn = sqlite3.connect('mynewtable.sqlite3')
conn.text_factory = str
c = conn.cursor()
c.execute('drop table if exists mynewtable')
c.execute('create table mynewtable('
          'id integer primary key autoincrement, '
          'rank integer, '
          'placename text, '
          'information text, '
          'nooftimes integer, '
          'visit text, '
          'fav integer, '
          'year integer)')

sql_insert = "insert into mynewtable values(NULL, ?, ?, ?, ?, ?, ?, ?)"
csv_reader = csv.reader(open('mynewtable.csv', 'rb'))
csv_reader.next() # skip headers
for csv_row in csv_reader:
    print "Inserting %s..." % (csv_row)
    c.execute(sql_insert, csv_row)

conn.commit()
</snippet></ROW><ROW><id>6546343</id><snippet>choices = Player.objects.values_list('id', flat=True)</snippet></ROW><ROW><id>6546343</id><snippet>CharField</snippet></ROW><ROW><id>6546568</id><snippet>gtk.gdk.Drawable</snippet></ROW><ROW><id>6546568</id><snippet>gtk.DrawingArea</snippet></ROW><ROW><id>6546568</id><snippet>gtk.DrawingArea</snippet></ROW><ROW><id>6546568</id><snippet>gtk.gdk.Window</snippet></ROW><ROW><id>6546613</id><snippet>parentnode.appendChild(childnode)</snippet></ROW><ROW><id>6546613</id><snippet>childnode.appendChild(parentnode)</snippet></ROW><ROW><id>6546708</id><snippet>block content</snippet></ROW><ROW><id>6546761</id><snippet>form = SomeForm(initial={'alive' : 0})
</snippet></ROW><ROW><id>6546761</id><snippet>BooleanField</snippet></ROW><ROW><id>6546761</id><snippet>RESOLUTIONS = (                                                
        ("1","800x600"),
        ("2","1024x768"),                            
         .....                        
)   
</snippet></ROW><ROW><id>6546761</id><snippet>resolutions = models.CharField(RESOLUTIONS, max_length=1)
</snippet></ROW><ROW><id>6546761</id><snippet>def get_resolution(self):
    return "%sx%s" % (self.width, self.height)
</snippet></ROW><ROW><id>6546909</id><snippet>__del__</snippet></ROW><ROW><id>6546909</id><snippet>&gt;&gt;&gt; class Finalizable:
...     def __del__(self): pass
...
&gt;&gt;&gt; a = Finalizable()
&gt;&gt;&gt; b = Finalizable()
&gt;&gt;&gt; a.x = b
&gt;&gt;&gt; b.x = a
&gt;&gt;&gt; del a
&gt;&gt;&gt; del b
&gt;&gt;&gt; import gc
&gt;&gt;&gt; gc.collect()
4
&gt;&gt;&gt; gc.garbage
[&lt;__main__.Finalizable instance at 0x1004e0b48&gt;,
 &lt;__main__.Finalizable instance at 0x1004e73f8&gt;]
</snippet></ROW><ROW><id>6547188</id><snippet>csv.reader</snippet></ROW><ROW><id>6547188</id><snippet>_csv.c</snippet></ROW><ROW><id>6547188</id><snippet>PyIter_Next</snippet></ROW><ROW><id>6547188</id><snippet>csv.reader</snippet></ROW><ROW><id>6547188</id><snippet>class MockFile:
    def __init__(self): self.line = 0
    def __iter__(self): return self
    def next(self):
        self.line += 1
        print "MockFile line", self.line
        return "line,{0}".format(self.line)

&gt;&gt;&gt; r = csv.reader(MockFile())
&gt;&gt;&gt; next(r)
MockFile line 1
['line', '1']
&gt;&gt;&gt; next(r)
MockFile line 2
['line', '2']
</snippet></ROW><ROW><id>6547188</id><snippet>csv</snippet></ROW><ROW><id>6547188</id><snippet>next</snippet></ROW><ROW><id>6547188</id><snippet>csv.reader</snippet></ROW><ROW><id>6547188</id><snippet>Reader_iternext</snippet></ROW><ROW><id>6547188</id><snippet>_csv.c</snippet></ROW><ROW><id>6547188</id><snippet>lineobj</snippet></ROW><ROW><id>6547188</id><snippet>Py_DECREF(lineobj)</snippet></ROW><ROW><id>6547188</id><snippet>csv.reader</snippet></ROW><ROW><id>6547188</id><snippet>lineobj</snippet></ROW><ROW><id>6547188</id><snippet>class FinalizableString(string):
    """A string that reports its deletion."""
    def __init__(self, s): self.s = s
    def __str__(self): return self.s
    def __del__(self): print "*** Deleting", self.s

class MockFile:
    def __init__(self): self.line = 0
    def __iter__(self): return self
    def next(self):
        self.line += 1
        return FinalizableString("line,{0}".format(self.line))

&gt;&gt;&gt; r = csv.reader(MockFile())
&gt;&gt;&gt; next(r)
*** Deleting line,1
['line', '1']
&gt;&gt;&gt; next(r)
*** Deleting line,2
['line', '2']
</snippet></ROW><ROW><id>6547188</id><snippet>csv.reader</snippet></ROW><ROW><id>6547200</id><snippet>for line in iter(InFile) :
</snippet></ROW><ROW><id>6547450</id><snippet>from HTMLParser import HTMLParser
import urllib2


query="http://code.google.com/feeds/issues/p/chromium/issues/full/2"

def get_issue_report(query):
    request = urllib2.Request(query)
    response = urllib2.urlopen(request)
    response_headers = response.info()
    return response.read()

s = get_issue_report(query)

p = HTMLParser()

print p.unescape(s)

p.close()
</snippet></ROW><ROW><id>6547818</id><snippet>object</snippet></ROW><ROW><id>6547818</id><snippet>class Swoosh(object):
</snippet></ROW><ROW><id>6547818</id><snippet>__init__</snippet></ROW><ROW><id>6547818</id><snippet>def __init__(self,spam,eggs,swallow,coconut):
    self.spam = spam
    self.eggs = eggs
    self.swallow = swallow
    self.coconut = coconut
</snippet></ROW><ROW><id>6547818</id><snippet>s = Swoosh('Spam!','Eggs','Swallow','Migrated')
</snippet></ROW><ROW><id>6547818</id><snippet>__init__</snippet></ROW><ROW><id>6547818</id><snippet>def __init__(self,spam,eggs,swallow,coconut='Migrated.'):
        self.spam = spam
        self.eggs = eggs
        self.swallow = swallow
        self.coconut = coconut
</snippet></ROW><ROW><id>6547818</id><snippet>property</snippet></ROW><ROW><id>6547818</id><snippet>myobject.spam</snippet></ROW><ROW><id>6547818</id><snippet>@property
def spam(self):
    """I'm the 'spam' property."""
    return self._spam

@spam.setter
def spam(self, value):
    if not value.endswith("!"):
        raise ValueError("spam must end with !")
    # Store the value in "private" _spam attribute
    self._spam = value

@spam.deleter
def spam(self):
    del self._spam
</snippet></ROW><ROW><id>6547818</id><snippet>property</snippet></ROW><ROW><id>6547818</id><snippet>class Swoosh():
    spam = ''
    eggs = ''
    swallow = ''
    coconut = ''
</snippet></ROW><ROW><id>6547818</id><snippet>__init__</snippet></ROW><ROW><id>6547818</id><snippet>class</snippet></ROW><ROW><id>6547911</id><snippet>map &lt;Leader&gt;p :call InsertLine()&lt;CR&gt;

function! InsertLine()
  let trace = expand("import pdb; pdb.set_trace()")
  execute "normal o".trace
endfunction
</snippet></ROW><ROW><id>6547996</id><snippet>b</snippet></ROW><ROW><id>6547996</id><snippet>destroy</snippet></ROW><ROW><id>6547996</id><snippet>quit</snippet></ROW><ROW><id>6547996</id><snippet>b</snippet></ROW><ROW><id>6547996</id><snippet>b</snippet></ROW><ROW><id>6547996</id><snippet>b = 0                    # this is now in the global namespace

class BatchIndiv():
    def __init__(self, master):
        self.master=master
        self.startwindow()
        #self.b=0      # no need for this, directly store in the global variable

    def startwindow(self):

        self.var1 = IntVar()
        self.textvar = StringVar()

        self.Label1=Label(self.master, text="Batch or indivdual import?")
        self.Label1.grid(row=0, column=0)

        self.Label2=Label(self.master, textvariable=self.textvar)
        self.Label2.grid(row=2, column=0)

        self.rb1 = Radiobutton(self.master, text="Batch", variable=self.var1,
                               value=1, command=self.cb1select)
        self.rb1.grid(row=1, column=0, sticky=W)

        self.rb2 = Radiobutton(self.master, text="Individual", variable=self.var1,
                               value=2, command=self.cb1select)
        self.rb2.grid(row=1, column=1, sticky=W)

        self.Button1=Button(self.master, text="ok", command=self.ButtonClick)
        self.Button1.grid(row=1, column=2)

    def ButtonClick(self):
        global b
        if (self.var1.get())==1:
            b=BatchImport()
            self.master.quit()
            #self.master.destroy()    # either quit or destroy, I think one is sufficient, but confirm to be sure.
        elif (self.var1.get())==2:
            b=IndivImport()
            self.master.quit()
            #self.master.destroy()    # either quit or destroy, I think one is sufficient, but confirm to be sure
         else: pass

    def cb1select(self):
        return self.var1.get()

#End of class definition.
#Code:

root=Tk()
window=BatchIndiv(root)
root.mainloop()

# now do here whatever you want to do with the variable b
print b
</snippet></ROW><ROW><id>6547996</id><snippet>b</snippet></ROW><ROW><id>6548045</id><snippet>select_related()</snippet></ROW><ROW><id>6548045</id><snippet>appuser = AppUser.objects.get(pk=id)
</snippet></ROW><ROW><id>6548045</id><snippet>appuser = AppUser.objects.select_related().get(pk=id)
</snippet></ROW><ROW><id>6548525</id><snippet>NULL</snippet></ROW><ROW><id>6549268</id><snippet>class Server:
    def do_thing(self):
        pass #do that server thing here

class Client:
    def do_thing(self):
        pass #do that client thing here

def do_thing(thingy):
    thingy.do_thing() # is it a Client? a Server? something else?

s=Server()
c=Client()

do_thing(s)
do_thing(c)
</snippet></ROW><ROW><id>6549377</id><snippet>if "select count(*) from scan where prefix = ? and code_id = ? and ..." == 0:
    execute("insert into scan....")
</snippet></ROW><ROW><id>6549443</id><snippet>def enumerate_nested(nested, indices):
    for i, item in enumerate(nested):
        if isinstance(item, collections.Iterable) and not isinstance(item, basestring):
            for new_indices in enumerate_nested(item, indices + (i,)):
                yield new_indices
        else:
            yield indices + (i,)
</snippet></ROW><ROW><id>6549443</id><snippet>def tuple_index(nested_list, index_tuple):
    for i in index_tuple:
        nested_list = nested_list[i]
    return nested_list
</snippet></ROW><ROW><id>6549443</id><snippet>&gt;&gt;&gt; indices = list(enumerate_nested(l, tuple()))
&gt;&gt;&gt; print l
[1, 2, 3, ['a', 'b', 'c'], 4, ['d', 'e', [100, 200, 300]], 5, ['a', 'b', 'c'], 6]
&gt;&gt;&gt; for i in indices:
...     print tuple_index(l, i),
... 
1 2 3 a b c 4 d e 100 200 300 5 a b c 6
</snippet></ROW><ROW><id>6549535</id><snippet>from Tkinter import *

def callback(sv):
    print sv.get()

root = Tk()
sv = StringVar()
sv.trace("w", lambda name, index, mode, sv=sv: callback(sv))
e = Entry(root, textvariable=sv)
e.pack()
root.mainloop()  
</snippet></ROW><ROW><id>6549740</id><snippet>kill</snippet></ROW><ROW><id>6549740</id><snippet>os.killpg()</snippet></ROW><ROW><id>6550195</id><snippet>s = 'somestring'
names = ['file1.sql', 'file2.sql']
for n in names:  
    f = open(n)
    lines = f.readlines()
    for i, l in enumerate(lines):
        if s in l:
            print 'line %d' % (i)
</snippet></ROW><ROW><id>6550469</id><snippet># Sometimes blobKey is None
self.blobKey = files.blobstore.get_blob_key(file_name)

# We have to make it wait til it works!
for i in range(1,3):
    if(self.blobKey):
         break
    else:
        logging.info("blobKey is still None")
        time.sleep(0.05)
        self.blobKey = files.blobstore.get_blob_key(file_name)

logging.info("Blobkey: "+str(self.blobKey))
</snippet></ROW><ROW><id>6550469</id><snippet>import time
</snippet></ROW><ROW><id>6550559</id><snippet>$ python3
Python 3.1.3 (r313:86834, May 20 2011, 06:10:42) 
[GCC 4.4.5] on linux2
Type "help", "copyright", "credits" or "license" for more information.
&gt;&gt;&gt; len('día')   # Unicode text
3
&gt;&gt;&gt; 

$ python
Python 2.7.1 (r271:86832, May 20 2011, 17:19:04) 
[GCC 4.4.5] on linux2
Type "help", "copyright", "credits" or "license" for more information.
&gt;&gt;&gt; len('día')   # bytes
4
&gt;&gt;&gt; len(u'día')  # Unicode text
3
&gt;&gt;&gt;


Python 3.1.3 (r313:86834, May 20 2011, 06:10:42) 
[GCC 4.4.5] on linux2
Type "help", "copyright", "credits" or "license" for more information.
&gt;&gt;&gt; len(b'día')
  File "&lt;stdin&gt;", line 1
SyntaxError: bytes can only contain ASCII literal characters.
&gt;&gt;&gt; len(b'dia')
3
&gt;&gt;&gt; 
</snippet></ROW><ROW><id>6550869</id><snippet>def twofunc(one, two):
    for a, b in itertools.product(main[one], main[two]):
        return [a, b]

mydata.append(twofunc(2,0))
</snippet></ROW><ROW><id>6550971</id><snippet>&gt;&gt;&gt; test = ['cat', 'dog', 'mouse', 'rat', 6126, 516]
&gt;&gt;&gt; temp = []
&gt;&gt;&gt; for x in set(test):
        temp.append(x)  
&gt;&gt;&gt; temp
[516, 'dog', 6126, 'cat', 'rat', 'mouse']
</snippet></ROW><ROW><id>6550971</id><snippet>&gt;&gt;&gt; test = ['cat', 'dog', 'mouse', 'rat', 6126, 516]
&gt;&gt;&gt; temp = []
&gt;&gt;&gt; for x in set(test):
        temp.append(x)  
&gt;&gt;&gt; temp
[6126, 'dog', 'cat', 'rat', 516, 'mouse']
</snippet></ROW><ROW><id>6551061</id><snippet>import re

s = '''   &lt;DT&gt;&lt;A HREF="http://gmazars.info/conf/index.html" 
            &lt;DT&gt;&lt;A HREF="http://research.google.com/" 
            &lt;DT&gt;&lt;A HREF="http://research.microsoft.com/en-us/" 
            &lt;DT&gt;&lt;A HREF="http://techresearch.intel.com/articles/index.html" 
'''

print re.findall("HREF=\"(.*?)\"", s)
</snippet></ROW><ROW><id>6551092</id><snippet>s.decode("unicode-escape")
</snippet></ROW><ROW><id>6551279</id><snippet>contour()</snippet></ROW><ROW><id>6551279</id><snippet>contour(r*np.cos(theta), r*np.sin(theta), values)</snippet></ROW><ROW><id>6551279</id><snippet>griddata()</snippet></ROW><ROW><id>6551279</id><snippet>import pylab as plt
from matplotlib.mlab import griddata
import numpy as np

# data on a grid
r = np.linspace(0, 1, 100)
t = np.linspace(0, 2*np.pi, 100)
r, t = np.meshgrid(r, t)
z = (t-np.pi)**2 + 10*(r-0.5)**2

plt.subplot(121)
plt.contour(r*np.cos(t), r*np.sin(t), z)

# ungrid data, then re-grid it
r = r.flatten()
t = t.flatten()
x = r*np.cos(t)
y = r*np.sin(t)
z = z.flatten()
xgrid = np.linspace(x.min(), x.max(), 100)
ygrid = np.linspace(y.min(), y.max(), 100)
xgrid, ygrid = np.meshgrid(xgrid, ygrid)
zgrid = griddata(x,y,z, xgrid, ygrid)

plt.subplot(122)
plt.contour(xgrid, ygrid, zgrid)

plt.show()
</snippet></ROW><ROW><id>6551559</id><snippet>for result in page['blah']:
    that = result[0]['this']
    list.append(that)
</snippet></ROW><ROW><id>6552032</id><snippet>import Bio
</snippet></ROW><ROW><id>6552280</id><snippet>import urllib

url = 'http://www.website.com/x.csv'
urllib.urlretrieve(url, 'b.csv')


file_a = open('a.csv', 'r')
file_b = open('b.csv', 'r')    
file_out = open('out.csv', 'w')

list_a = [x.strip() for x in file_a.read().split(',')]
list_b = [x.strip() for x in file_b.read().split(',')]    
list_out = list(set(list_a) - set(list_b)) # Reverse if necessary

file_out.write(','.join(list_out))
file_out.close()
</snippet></ROW><ROW><id>6552286</id><snippet>b</snippet></ROW><ROW><id>6552286</id><snippet>f = open(r'C:\\'+str(i)+'.gif','wb')
</snippet></ROW><ROW><id>6552365</id><snippet>w.writerow(link['href'])</snippet></ROW><ROW><id>6552365</id><snippet>w.writerow([link['href']])</snippet></ROW><ROW><id>6552485</id><snippet>from Tkinter import Text, BOTH
import re

class T(Text):

    def __init__(self, *a, **b):

        # Create self as a Text.
        Text.__init__(self, *a, **b)

        #self.bind("&lt;Button-1&gt;", self.click)
        self.bind("&lt;Key&gt;", self.key)
        self.bind("&lt;Control-v&gt;", self.paste)

    def key(self,k):
        if k.char and k.char not in "atgcATGC":
            return "break"

    def paste(self,event):
        clip=self.selection_get(selection='CLIPBOARD')
        clip=clip.replace("\n","").replace("\r","")
        m=re.match("[atgcATGC]*",clip)
        if m and m.group()==clip:
            self.clipboard_clear()
            self.clipboard_append(clip)
        else:
            self.clipboard_clear()
            return


t = T()
t.pack(expand=1, fill=BOTH)
t.mainloop()
</snippet></ROW><ROW><id>6552783</id><snippet>C:\Python27\python.exe C:\Python27\Scripts\trial.py [additional arguments]
</snippet></ROW><ROW><id>6552783</id><snippet>C:\Python27\Scripts\trial.py [additional arguments]
</snippet></ROW><ROW><id>6552783</id><snippet>trial.py [additional arguments]
</snippet></ROW><ROW><id>6552783</id><snippet>trial [additional arguments]
</snippet></ROW><ROW><id>6553182</id><snippet>cherrypy.tools.authenticate = cherrypy.Tool('on_start_resource', authenticate)
</snippet></ROW><ROW><id>6553182</id><snippet>cherrypy.tools.authenticate = cherrypy.Tool('before_handler', authenticate)
</snippet></ROW><ROW><id>6553182</id><snippet>authenticate</snippet></ROW><ROW><id>6553182</id><snippet>cherrypy.session</snippet></ROW><ROW><id>6553182</id><snippet>def authenticate():
    ...
cherrypy.tools.authenticate = cherrypy.Tool('before_handler', authenticate)
cherrypy.tree.mount(Root(), "/", config={
    "/": {
        'tools.sessions.on':True,
        'tools.sessions.storage_type':'file',
        'tools.sessions.storage_path':r'%s\sessions' % curDir,
        'tools.sessions.timeout':60
    }, ...
})
</snippet></ROW><ROW><id>6553182</id><snippet>@cherrypy.expose
@cherrypy.tools.authenticate()
def home(self, **kwargs):
    ...
</snippet></ROW><ROW><id>6553501</id><snippet>import sys

from PIL import Image

imin = Image.open(sys.argv[1])
imout = Image.new("RGB", imin.size)

imout.putdata(map(
                  lambda pixel: (0,0,0) if pixel == (0,0,0) else (255,255,255),
                  imin.getdata()
                 )
             ) 

imout.save(sys.argv[2])
</snippet></ROW><ROW><id>6553543</id><snippet>import</snippet></ROW><ROW><id>6553543</id><snippet>feedy</snippet></ROW><ROW><id>6553543</id><snippet>feedparser</snippet></ROW><ROW><id>6553543</id><snippet>feedparser</snippet></ROW><ROW><id>6553543</id><snippet>import feedy</snippet></ROW><ROW><id>6553543</id><snippet>feedy</snippet></ROW><ROW><id>6553543</id><snippet>feedy.name</snippet></ROW><ROW><id>6553543</id><snippet>feedy.feedparser</snippet></ROW><ROW><id>6553543</id><snippet>feedparser</snippet></ROW><ROW><id>6553543</id><snippet>feedy</snippet></ROW><ROW><id>6553543</id><snippet>feedparser</snippet></ROW><ROW><id>6553663</id><snippet>import subprocess, signal, os, threading, errno
from contextlib import contextmanager

class TimeoutThread(object):
    def __init__(self, seconds):
        self.seconds = seconds
        self.cond = threading.Condition()
        self.cancelled = False
        self.thread = threading.Thread(target=self._wait)

    def run(self):
        """Begin the timeout."""
        self.thread.start()

    def _wait(self):
        with self.cond:
            self.cond.wait(self.seconds)

            if not self.cancelled:
                self.timed_out()

    def cancel(self):
        """Cancel the timeout, if it hasn't yet occured."""
        with self.cond:
            self.cancelled = True
            self.cond.notify()
        self.thread.join()

    def timed_out(self):
        """The timeout has expired."""
        raise NotImplementedError

class KillProcessThread(TimeoutThread):
    def __init__(self, seconds, pid):
        super(KillProcessThread, self).__init__(seconds)
        self.pid = pid

    def timed_out(self):
        try:
            os.kill(self.pid, signal.SIGKILL)
        except OSError as e:
            # If the process is already gone, ignore the error.
            if e.errno not in (errno.EPERM, errno. ESRCH):
                raise e

@contextmanager
def processTimeout(seconds, pid):
    timeout = KillProcessThread(seconds, pid)
    timeout.run()
    try:
        yield
    finally:
        timeout.cancel()


def example():
    proc = subprocess.Popen(["sleep", "5"], stdin=subprocess.PIPE, stdout=subprocess.PIPE)

    with processTimeout(1, proc.pid):
        print proc.communicate()

    resultcode = proc.wait()
    if resultcode &lt; 0:
        print "error: %i" % resultcode

if __name__ == '__main__':
    example()
</snippet></ROW><ROW><id>6553731</id><snippet>/System/Library</snippet></ROW><ROW><id>6553731</id><snippet>/usr</snippet></ROW><ROW><id>6553731</id><snippet>/usr/local</snippet></ROW><ROW><id>6553801</id><snippet>str(self.score)</snippet></ROW><ROW><id>6553880</id><snippet>import hashlib
hashlib.md5('a').hexdigest()
</snippet></ROW><ROW><id>6554232</id><snippet># Note that portions of MLSD data are case insensitive...
def parseinfo(info):
    for fact in info.split(';'):
        if not fact:
            continue
        name, value = fact.split('=', 1)
        yield name.lower(), value

ftp = ftplib.FTP(host, user, passwd)
dirinfo = {}
def callback(line):
    info, fname = line.split(' ', 1)
    dirinfo[fname] = dict(parseinfo(info))
ftp.retrlines('MLSD {}'.format(path), callback)
print(dirinfo)
</snippet></ROW><ROW><id>6554259</id><snippet>try:
    self.label1.set_text(team1_name)
except TypeError:
    print "You MUST enter a name in the TWO boxes"
</snippet></ROW><ROW><id>6554259</id><snippet>TypeError</snippet></ROW><ROW><id>6554259</id><snippet>except:</snippet></ROW><ROW><id>6554259</id><snippet>if team1_name:
    self.label1.set_text(team1_name)
else:
    print "You MUST enter a name in the TWO boxes"
</snippet></ROW><ROW><id>6554259</id><snippet>if</snippet></ROW><ROW><id>6554423</id><snippet>ValueError</snippet></ROW><ROW><id>6554423</id><snippet>i &lt;&lt; 1</snippet></ROW><ROW><id>6554466</id><snippet>from StringIO import StringIO    
import pycurl

url = 'http://www.google.com/'

storage = StringIO()
c = pycurl.Curl()
c.setopt(c.URL, url)
c.setopt(c.WRITEFUNCTION, storage.write)
c.perform()
c.close()
content = storage.getvalue()
print content
</snippet></ROW><ROW><id>6554466</id><snippet>c.setopt(c.HEADERFUNCTION, storage.write)
</snippet></ROW><ROW><id>6554502</id><snippet>import sqlite3
conn = sqlite3.connect(':memory:')
curs = conn.cursor()
results = curs.execute( """SELECT mycol 
                             FROM mytable 
                            WHERE somecol = ?;""", (some_var,) ).fetchall()
curs.close()
conn.close()
</snippet></ROW><ROW><id>6554502</id><snippet>with</snippet></ROW><ROW><id>6554502</id><snippet>with sqlite3.connect(':memory:') as conn:
    curs = conn.cursor()
    curs.row_factory = sqlite3.Row
    try:
        results = curs.execute( """SELECT mycol 
                                     FROM mytable 
                                    WHERE somecol = ?;""", 
                               (some_var,) ).fetchall()
    # you would put your exception-handling code here
    finally:
        curs.close()
</snippet></ROW><ROW><id>6554579</id><snippet>    import java.io.IOException;
    import java.io.StringReader;

    import javax.xml.parsers.DocumentBuilder;
    import javax.xml.parsers.DocumentBuilderFactory;
    import javax.xml.parsers.ParserConfigurationException;
    import javax.xml.xpath.XPath;
    import javax.xml.xpath.XPathExpression;
    import javax.xml.xpath.XPathFactory;

    import org.w3c.dom.Document;
    import org.xml.sax.InputSource;
    import org.xml.sax.SAXException;

    public class Teste {

        public static void main(String[] args) throws Exception {
            Document doc = stringToDom("&lt;span onclick=\"Javascript:document.quickFindForm.action='/blah_blah'\" class=\"specialLinkType\"&gt;&lt;img src=\"blah\"/&gt;&lt;/span&gt;");
            XPath newXPath = XPathFactory.newInstance().newXPath();
            XPathExpression xpathExpr = newXPath.compile("//span[@class=\"specialLinkType\"]/@onclick");
            String result = xpathExpr.evaluate(doc);
            System.out.println(result);

        }

        public static Document stringToDom(String xmlSource) throws SAXException, ParserConfigurationException, IOException {
            DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();
            DocumentBuilder builder = factory.newDocumentBuilder();
            return builder.parse(new InputSource(new StringReader(xmlSource)));
        }
    }
</snippet></ROW><ROW><id>6554579</id><snippet>Javascript:document.quickFindForm.action='/blah_blah'
</snippet></ROW><ROW><id>6554643</id><snippet>self.overlapping_sprites</snippet></ROW><ROW><id>6554643</id><snippet>Pan</snippet></ROW><ROW><id>6554643</id><snippet>Pizza</snippet></ROW><ROW><id>6554643</id><snippet>main()</snippet></ROW><ROW><id>6554694</id><snippet>&gt;&gt;&gt; L = [' 1 2 ', '3 4 ']
&gt;&gt;&gt; [tuple(int(y) for y in x.split()) for x in L]
[(1, 2), (3, 4)]
</snippet></ROW><ROW><id>6554759</id><snippet>def backup_system(dirs):
    """ Funcao para fazer backup das confs do systema """ 
    os.walk("/")
    tar_name = "/home/backup/system/system_backup_%s.tgz" % today
    try:
        tar = tarfile.open(tar_name, "w:gz")
        for dir in system_dirs:
            tar.add(dir,recursive=True)
    finally:
        tar.close()
    print tar 
    ftp_put(tar_name)
</snippet></ROW><ROW><id>6555012</id><snippet>NSString</snippet></ROW><ROW><id>6555012</id><snippet>NSMutableString</snippet></ROW><ROW><id>6555120</id><snippet>for n in range(i + numbers[i], len(numbers)-1, numbers[i]):
</snippet></ROW><ROW><id>6555120</id><snippet>for n in range(i + numbers[i], len(numbers), numbers[i]):
</snippet></ROW><ROW><id>6555302</id><snippet>genfromtxt</snippet></ROW><ROW><id>6555302</id><snippet>In [149]: f = StringIO('0.0, 1.0, NA, 9.0')

In [150]: a = np.genfromtxt(f, delimiter=',', missing_values='NA', usemask=True)

In [151]: a
Out[151]:
masked_array(data = [0.0 1.0 -- 9.0],
             mask = [False False  True False],
       fill_value = 1e+20)
</snippet></ROW><ROW><id>6555302</id><snippet>masked_values</snippet></ROW><ROW><id>6555302</id><snippet>In [152]: d = np.array([0., 1., 'NA', 9.], dtype=object)

In [153]: e = ma.masked_values(d, 'NA')

In [154]: e
Out[154]:
masked_array(data = [0.0 1.0 -- 9.0],
             mask = [False False  True False],
       fill_value = ?)
</snippet></ROW><ROW><id>6555795</id><snippet>subprocess</snippet></ROW><ROW><id>6556311</id><snippet>l = [ '1', '1', '1', '-1', '1', '-1' ]

dicts = [dict(zip(['x', 'y', 'z'], l[i:i+3])) for i in range(0, len(l), 3)]
result = dict(enumerate(dicts))

print result #prints {0: {'y': '1', 'x': '1', 'z': '1'}, 1: {'y': '1', 'x': '-1', 'z': '-1'}}
</snippet></ROW><ROW><id>6556312</id><snippet>import wx


class PhoneNumbers(wx.HtmlListBox):
    def __init__(self, parent):
        wx.HtmlListBox.__init__(self, parent)
        self.data = [
            ("Foo", "3452-453"),
            ("Bar", "5672-346"),
        ]
        self.SetItemCount(len(self.data))

    def OnGetItem(self, n):
        return "&lt;b&gt;%s&lt;/b&gt;&lt;br&gt;%s" % self.data[n]

    def add_number(self, name, number):
        self.data.append((name, number))
        self.SetItemCount(len(self.data))
        self.Refresh()


class Frame(wx.Frame):
    def __init__(self):
        wx.Frame.__init__(self, None, size=(200, 400))

        self.numbers = PhoneNumbers(self)
        self.contact_name = wx.TextCtrl(self)
        self.contact_number = wx.TextCtrl(self)
        self.add_btn = wx.Button(self, label="Add contact")

        self.Sizer = wx.BoxSizer(wx.VERTICAL)
        self.Sizer.Add(self.numbers, 1, wx.EXPAND)
        self.Sizer.Add(wx.SearchCtrl(self), 0, wx.EXPAND)
        self.Sizer.Add(wx.StaticText(self, label="Name"), 0, wx.TOP, 10)
        self.Sizer.Add(self.contact_name)
        self.Sizer.Add(wx.StaticText(self, label="Number"), 0, wx.TOP, 5)
        self.Sizer.Add(self.contact_number)
        self.Sizer.Add(self.add_btn, 0, wx.ALL, 10)

        self.numbers.Bind(wx.EVT_LISTBOX, self.OnSelectNumber)
        self.add_btn.Bind(wx.EVT_BUTTON, self.OnAddNumber)

    def OnSelectNumber(self, event):
        name, number = self.numbers.data[event.Selection]
        self.contact_name.Value = name
        self.contact_number.Value = number

    def OnAddNumber(self, event):
        self.numbers.add_number(
            self.contact_name.Value,
            self.contact_number.Value
        )


app = wx.PySimpleApp()
app.TopWindow = f = Frame()
f.Show()
app.MainLoop()
</snippet></ROW><ROW><id>6556528</id><snippet>version = run("python --version").split()[2]
</snippet></ROW><ROW><id>6556528</id><snippet>[2]</snippet></ROW><ROW><id>6556605</id><snippet>RLIMIT_RSS</snippet></ROW><ROW><id>6556605</id><snippet>madvise()</snippet></ROW><ROW><id>6556605</id><snippet>MADV_WILLNEED</snippet></ROW><ROW><id>6556605</id><snippet>madvise()</snippet></ROW><ROW><id>6556636</id><snippet>import time
import calendar

current = time.localtime()

dates = ["2011-07-01 09:26:11", "2011-06-07 09:26:11", "2011-03-12 09:26:11", "2010-07-25 09:26:11"]

for date in dates:
    print "%s" % date
    date = time.strptime(date, "%Y-%m-%d %H:%M:%S")

    if date.tm_year == current.tm_year - 1:
        print "Last year"    

    elif date.tm_mon == current.tm_mon:
        print "This month"

    else:
        print calendar.month_name[date.tm_mon]
</snippet></ROW><ROW><id>6556862</id><snippet>for</snippet></ROW><ROW><id>6556862</id><snippet>next()</snippet></ROW><ROW><id>6556862</id><snippet>csv</snippet></ROW><ROW><id>6556862</id><snippet>csv.reader</snippet></ROW><ROW><id>6556862</id><snippet>next()</snippet></ROW><ROW><id>6556862</id><snippet>PyIter_Next</snippet></ROW><ROW><id>6556862</id><snippet>sys.stdin</snippet></ROW><ROW><id>6556862</id><snippet>next()</snippet></ROW><ROW><id>6556862</id><snippet>readline()</snippet></ROW><ROW><id>6556862</id><snippet>iter</snippet></ROW><ROW><id>6556862</id><snippet>test_reader.py</snippet></ROW><ROW><id>6556862</id><snippet>for row in csv.reader(iter(sys.stdin.readline, '')):
    print("Read: ({}) {!r}".format(time.time(), row))
</snippet></ROW><ROW><id>6556862</id><snippet>$ python test_writer.py | python test_reader.py
Read: (1388776652.964925) ['R0', '$']
Read: (1388776653.466134) ['R1', '$$']
Read: (1388776653.967327) ['R2', '$$$']
Read: (1388776654.468532) ['R3', '$$$$']
[etc]
</snippet></ROW><ROW><id>6557049</id><snippet>time.strftime()</snippet></ROW><ROW><id>6557049</id><snippet>&gt;&gt;&gt; import time
&gt;&gt;&gt; expires = time.time() + 14 * 24 * 3600 # 14 days from now
&gt;&gt;&gt; time.strftime("%a, %d-%b-%Y %T GMT", time.gmtime(expires))
'Sat, 16-Jul-2011 12:55:48 GMT'
</snippet></ROW><ROW><id>6557116</id><snippet>print</snippet></ROW><ROW><id>6557116</id><snippet>sgmllib</snippet></ROW><ROW><id>6557251</id><snippet>&lt;&lt;ListboxSelect&gt;&gt;
</snippet></ROW><ROW><id>6557374</id><snippet>annotate</snippet></ROW><ROW><id>6557374</id><snippet>extra</snippet></ROW><ROW><id>6557374</id><snippet>raw</snippet></ROW><ROW><id>6557374</id><snippet>annotatate</snippet></ROW><ROW><id>6557374</id><snippet>books = [a.book_set.latest('pub_date') for a in Author.objects
                   .annotate(latest=Max('book__pub_date'))
                   .order_by('-latest')[:5]]
</snippet></ROW><ROW><id>6557374</id><snippet>pub_date</snippet></ROW><ROW><id>6557374</id><snippet>extra</snippet></ROW><ROW><id>6557374</id><snippet>sql = '''SELECT MAX(app_book.pub_date)
         FROM app_book
         WHERE app_book.author_id=app_author.id'''
latest = Author.objects.extra(
                select={'latest': sql},
                order_by=['-latest'])[:5].values_list('latest')
books = Book.objects.filter(pub_date__in=[x[0] for x in latest]).order_by('-pub_date')
</snippet></ROW><ROW><id>6557374</id><snippet>raw</snippet></ROW><ROW><id>6557374</id><snippet>sql = '''SELECT * FROM app_book
         WHERE app_book.pub_date IN
           (SELECT MAX(app_book.pub_date)
            FROM app_book
            GROUP BY app_book.author_id)
         ORDER BY app_book.pub_date DESC'''
books = list(Book.objects.raw(sql)[:5])
</snippet></ROW><ROW><id>6557374</id><snippet>class Author(models.Model):
    name = models.CharField(max_length=50)

class Book(models.Model):
    title = models.CharField(max_length=50)
    author = models.ForeignKey(Author)
    pub_date = models.DateTimeField()

    class Meta:
        get_latest_by = 'pub_date'
</snippet></ROW><ROW><id>6557374</id><snippet>&gt;&gt;&gt; %time annotate()
(0.274) SELECT "app_author"."id", "app_author"."name", MAX("app_book"."pub_date") AS "latest" FROM "app_author" LEFT OUTER JOIN "app_book" ON ("app_author"."id" = "app_book"."author_id") GROUP BY "app_author"."id", "app_author"."name", "app_author"."id", "app_author"."name" ORDER BY "latest" DESC LIMIT 5; args=()
(0.035) SELECT "app_book"."id", "app_book"."title", "app_book"."author_id", "app_book"."pub_date" FROM "app_book" WHERE "app_book"."author_id" = 10  ORDER BY "app_book"."pub_date" DESC LIMIT 1; args=(10,)
(0.036) SELECT "app_book"."id", "app_book"."title", "app_book"."author_id", "app_book"."pub_date" FROM "app_book" WHERE "app_book"."author_id" = 9  ORDER BY "app_book"."pub_date" DESC LIMIT 1; args=(9,)
(0.036) SELECT "app_book"."id", "app_book"."title", "app_book"."author_id", "app_book"."pub_date" FROM "app_book" WHERE "app_book"."author_id" = 8  ORDER BY "app_book"."pub_date" DESC LIMIT 1; args=(8,)
(0.036) SELECT "app_book"."id", "app_book"."title", "app_book"."author_id", "app_book"."pub_date" FROM "app_book" WHERE "app_book"."author_id" = 7  ORDER BY "app_book"."pub_date" DESC LIMIT 1; args=(7,)
(0.040) SELECT "app_book"."id", "app_book"."title", "app_book"."author_id", "app_book"."pub_date" FROM "app_book" WHERE "app_book"."author_id" = 6  ORDER BY "app_book"."pub_date" DESC LIMIT 1; args=(6,)
CPU times: user 0.32 s, sys: 0.15 s, total: 0.47 s
Wall time: 0.47 s
&lt;&lt;&lt; [&lt;Book: Susan&gt;, &lt;Book: Yasmin&gt;, &lt;Book: Carl&gt;, &lt;Book: Benny&gt;, &lt;Book: George&gt;]

&gt;&gt;&gt; %time extra()
(0.445) SELECT (SELECT MAX(app_book.pub_date)
             FROM app_book
             WHERE app_book.author_id=app_author.id) AS "latest" FROM "app_author" ORDER BY "latest" DESC LIMIT 5; args=()
(0.045) SELECT "app_book"."id", "app_book"."title", "app_book"."author_id", "app_book"."pub_date" FROM "app_book" WHERE "app_book"."pub_date" IN (2038-11-25 11:33:30.425836, 2038-11-24 11:33:30.424598, 2038-11-23 11:33:30.423435, 2038-11-22 11:33:30.422227, 2038-11-21 11:33:30.421045) ORDER BY "app_book"."pub_date" DESC; args=(u'2038-11-25 11:33:30.425836', u'2038-11-24 11:33:30.424598', u'2038-11-23 11:33:30.423435', u'2038-11-22 11:33:30.422227', u'2038-11-21 11:33:30.421045')
CPU times: user 0.32 s, sys: 0.18 s, total: 0.50 s
Wall time: 0.50 s
&lt;&lt;&lt; [&lt;Book: Susan&gt;, &lt;Book: Yasmin&gt;, &lt;Book: Carl&gt;, &lt;Book: Benny&gt;, &lt;Book: George&gt;]

&gt;&gt;&gt; %time raw()
(0.279) SELECT * FROM app_book
             WHERE app_book.pub_date IN
               (SELECT MAX(app_book.pub_date)
                FROM app_book
                GROUP BY app_book.author_id)
            ORDER BY app_book.pub_date DESC; args=()
CPU times: user 0.19 s, sys: 0.09 s, total: 0.28 s
Wall time: 0.28 s
&lt;&lt;&lt; [&lt;Book: Susan&gt;, &lt;Book: Yasmin&gt;, &lt;Book: Carl&gt;, &lt;Book: Benny&gt;, &lt;Book: George&gt;]
</snippet></ROW><ROW><id>6557486</id><snippet>myClass= MyClass()</snippet></ROW><ROW><id>6557486</id><snippet>MyClass.__new__</snippet></ROW><ROW><id>6557486</id><snippet>MyClass</snippet></ROW><ROW><id>6557486</id><snippet>MyClass.__init__</snippet></ROW><ROW><id>6557486</id><snippet>object.__new__</snippet></ROW><ROW><id>6557486</id><snippet>__new__</snippet></ROW><ROW><id>6557486</id><snippet>__init__</snippet></ROW><ROW><id>6557570</id><snippet>calendar.month_name[3]</snippet></ROW><ROW><id>6557570</id><snippet>March</snippet></ROW><ROW><id>6557570</id><snippet>0</snippet></ROW><ROW><id>6557728</id><snippet>from pyramid.view import view_config

def ProductLengthPredicate(length):
    def check_length(context, request):
        return len(context.products) == length
    return check_length

@view_config(context='app.models.ProductFinder', renderer='oneproduct.mako,
             custom_predicates=(ProductLengthPredicate(1),))
@view_config(context='app.models.ProductFinder', renderer='twoproducts.mako',
             custom_predicates=(ProductLengthPredicate(2),))
@view_config(context='app.models.ProductFinder', renderer='manyproducts.mako')
def products(context, request):
    return dict(page=context)
</snippet></ROW><ROW><id>6557728</id><snippet>render_to_response</snippet></ROW><ROW><id>6557728</id><snippet>@view_config(context='app.models.ProductFinder', renderer='manyproducts.mako')
def products(context, request)
    opts = dict(page=context)
    if len(context.products) == 1:
        return render_to_response('oneproduct.mako', opts, request)
    if len(context.products) == 2:
        return render_to_response('twoproducts.mako', opts, request)
    return opts
</snippet></ROW><ROW><id>6557728</id><snippet>Response()</snippet></ROW><ROW><id>6557728</id><snippet>render_to_response</snippet></ROW><ROW><id>6557746</id><snippet>Usernames</snippet></ROW><ROW><id>6557746</id><snippet>&gt;&gt;&gt; myDict = {}
&gt;&gt;&gt; myDict['foo'] = 5
&gt;&gt;&gt; 'foo' in myDict
True
&gt;&gt;&gt; myDict['foo']
5
&gt;&gt;&gt; myDict.get('bar', 'nope')
'nope'
&gt;&gt;&gt; 
</snippet></ROW><ROW><id>6557776</id><snippet>sha</snippet></ROW><ROW><id>6557776</id><snippet>&gt;&gt;&gt; import sha
&gt;&gt;&gt; s = sha.new()
&gt;&gt;&gt; s.update('hello')
&gt;&gt;&gt; s.digest()
'\xaa\xf4\xc6\x1d\xdc\xc5\xe8\xa2\xda\xbe\xde\x0f;H,\xd9\xae\xa9CM'
</snippet></ROW><ROW><id>6557776</id><snippet>&gt;&gt;&gt; import hashlib
&gt;&gt;&gt; hashlib.sha1('hello').digest()
'\xaa\xf4\xc6\x1d\xdc\xc5\xe8\xa2\xda\xbe\xde\x0f;H,\xd9\xae\xa9CM'
</snippet></ROW><ROW><id>6557984</id><snippet>&gt;&gt;&gt; "foo"[::-1]
'oof'
</snippet></ROW><ROW><id>6558007</id><snippet>class Foo(object):
    pass
</snippet></ROW><ROW><id>6558007</id><snippet>object</snippet></ROW><ROW><id>6558122</id><snippet>import re
r = "1234,asd dsa qwerty 567,"
p = re.compile("(.{,10})($|\s)")
r = p.sub("\\1\n", r)
</snippet></ROW><ROW><id>6558122</id><snippet>1234,asd
dsa qwerty
567,
</snippet></ROW><ROW><id>6558122</id><snippet>1234,asd
dsa
qwerty
567,
</snippet></ROW><ROW><id>6558124</id><snippet>urllib2</snippet></ROW><ROW><id>6558124</id><snippet>import urllib2

def process_item(x):
    return urllib2.unquote(x).replace('_', ' ')

def process_line(line):
    return tuple(process_item(i) for i in line.split())

with open('t.txt', 'r') as infile:
    unique_wines = set(process_line(l) for l in infile)

for dom, rang in sorted(unique_wines):
    print dom, ':', rang
</snippet></ROW><ROW><id>6558153</id><snippet>class Image:
    #...
    def point_at(self, x,y):
        return PointInImage(self, ...)
    #...

class PointInImage:
    #...
    def __init__(self, image, ...):
        self.image = image
        #...
    #...
</snippet></ROW><ROW><id>6558179</id><snippet>arg0,input,key,output = sys.argv
</snippet></ROW><ROW><id>6558179</id><snippet>sys.argv</snippet></ROW><ROW><id>6558179</id><snippet>sys.argv</snippet></ROW><ROW><id>6558179</id><snippet>sys.argv</snippet></ROW><ROW><id>6558179</id><snippet>scriptEngine.Sys.argv = List.Make(new[] { 'input.7z', ... });
</snippet></ROW><ROW><id>6558179</id><snippet>arg0</snippet></ROW><ROW><id>6558566</id><snippet>x = num.arange( 5.0, 200.0, 0.1 )
wavef = num.sin(x)/x
</snippet></ROW><ROW><id>6558571</id><snippet>import datetime
def next_weekday(d, weekday):
    days_ahead = weekday - d.weekday()
    if days_ahead &lt;= 0: # Target day already happened this week
        days_ahead += 7
    return d + datetime.timedelta(days_ahead)

d = datetime.date(2011, 7, 2)
next_monday = next_weekday(d, 0) # 0 = Monday, 1=Tuesday, 2=Wednesday...
print(next_monday)
</snippet></ROW><ROW><id>6558659</id><snippet>mutagen</snippet></ROW><ROW><id>6558834</id><snippet>readline.get_current_history_length()</snippet></ROW><ROW><id>6558834</id><snippet>readline.get_history_item()</snippet></ROW><ROW><id>6558887</id><snippet>subprocess</snippet></ROW><ROW><id>6558936</id><snippet>def fib(n, r):
    if n &lt; 2:
        r[0] = n
    else:
        r1 = [None]
        r2 = [None]
        # Start fib() threads that use r1 and r2 for results.
        ...

        # Sum the results of the threads.
        r[0] = r1[0] + r2[0]

def FibonacciThreads(n):
    r = [None]
    fib(n, r)
    return r[0]
</snippet></ROW><ROW><id>6558981</id><snippet>PyImport_ImportModule</snippet></ROW><ROW><id>6558981</id><snippet>PyModule_GetDict</snippet></ROW><ROW><id>6558981</id><snippet>PyDict_GetItem</snippet></ROW><ROW><id>6558981</id><snippet>PyObject_CallXXX</snippet></ROW><ROW><id>6559655</id><snippet>import timeit

reps = 100

pythonTest = timeit.Timer('a = [0.] * 1000000')
numpyTest = timeit.Timer('a = numpy.zeros(1000000)', setup='import numpy')
uninitialised = timeit.Timer('a = numpy.empty(1000000)', setup='import numpy')
# empty simply allocates the memory. Thus the initial contents of the array 
# is random noise

print 'python list:', pythonTest.timeit(reps), 'seconds'
print 'numpy array:', numpyTest.timeit(reps), 'seconds'
print 'uninitialised array:', uninitialised.timeit(reps), 'seconds'
</snippet></ROW><ROW><id>6559655</id><snippet>python list: 1.22042918205 seconds
numpy array: 1.05412316322 seconds
uninitialised array: 0.0016028881073 seconds
</snippet></ROW><ROW><id>6559698</id><snippet>sys.path</snippet></ROW><ROW><id>6559935</id><snippet>print</snippet></ROW><ROW><id>6559947</id><snippet> _sudo('apt-get install python2.6')
 version = run("python2.6 -V").split()[1]
</snippet></ROW><ROW><id>6559947</id><snippet> _sudo('apt-get install python2.6')
 version = _sudo("python2.6 -V").split()[1]
</snippet></ROW><ROW><id>6560062</id><snippet>out = [[coord + float(y) - float(x) for v in V] for x,y in zip(x_coord, y_coord)]
</snippet></ROW><ROW><id>6560074</id><snippet>&gt;&gt;&gt; import lxml.etree
&gt;&gt;&gt; doc = lxml.etree.parse(xml)
&gt;&gt;&gt; ns = {'issues':'http://schemas.google.com/projecthosting/issues/2009'}
&gt;&gt;&gt; [x.text for x in doc.xpath('//issues:label', namespaces=ns)]
&lt;&lt;&lt; 
['Type-Bug',
 'Pri-2',
 'OS-All',
 'Area-Compat',
 'Webkit-specific',
 'Mstone-2.1',
 'compat-bug-2.0',
 'Report-to-webkit',
 'bulkmove',
 'Action-ReductionNeeded']
</snippet></ROW><ROW><id>6560081</id><snippet>ModelForm</snippet></ROW><ROW><id>6560081</id><snippet>fields</snippet></ROW><ROW><id>6560081</id><snippet>Meta</snippet></ROW><ROW><id>6560317</id><snippet>&lt;a href=</snippet></ROW><ROW><id>6560820</id><snippet>if interactive is True:
    proc = subprocess.Popen(args)
    proc.wait()
    if proc.returncode:
        print "returncode " + str(proc.returncode)
        sys.exit(1)
else:
    proc = subprocess.Popen(args, stdout=subprocess.PIPE,
        stderr=subprocess.PIPE)
    val = proc.communicate()
    if proc.returncode:
        print ""
        # send email with val[0] + val[1]
</snippet></ROW><ROW><id>6560830</id><snippet>python2.7 setup.py install
</snippet></ROW><ROW><id>6561038</id><snippet>size</snippet></ROW><ROW><id>6561038</id><snippet>crop</snippet></ROW><ROW><id>6561182</id><snippet>class Test:
    def __init__(self, name, parent):
        self.name = name
        self.parent = parent
    def __repr__(self):
        return "Test('"+self.name+"', '"+self.parent+"')"



li = [Test('a', ''), Test('b', ''), Test('c', 'a'), Test('d', 'a'), Test('e', 'c')]

dict = {"":(None,[])} #name to (node,children)
#add nodes
for item in li:
    dict[item.name] = (item, [])
#add children
for item in li:
    dict[item.parent][1].append(dict[item.name])

def printTree(dict, name, indent):
    newIndent=indent
    if name!="":
        print(indent + str(dict[name][0]))
        if indent == "": newIndent="  |-- "
        else: newIndent = "      "+indent
    for child in dict[name][1]:
        printTree(dict, child[0].name, newIndent) 


printTree(dict, "", "")
</snippet></ROW><ROW><id>6561196</id><snippet>assert num == len([getattr(foo, x) 
                   for x in dir(foo) 
                   if isinstance(getattr(foo, x), foo.Foo)])
</snippet></ROW><ROW><id>6561196</id><snippet>dir()</snippet></ROW><ROW><id>6561261</id><snippet>print "Content-type: text/plain\r\n\r\n"</snippet></ROW><ROW><id>6561261</id><snippet>&gt;&gt;&gt; import sys, StringIO
&gt;&gt;&gt; oldout = sys.stdout
&gt;&gt;&gt; sys.stdout = newout = StringIO.StringIO()
&gt;&gt;&gt; for line in 'this', 'that', 'the other': print line
... 
&gt;&gt;&gt; sys.stdout = oldout
&gt;&gt;&gt; print newout.getvalue().replace('\n', '&lt;br /&gt;\n')
this&lt;br /&gt;
that&lt;br /&gt;
the other&lt;br /&gt;
</snippet></ROW><ROW><id>6561261</id><snippet>&gt;&gt;&gt; newout.seek(0)
&gt;&gt;&gt; newout.readlines()
['this\n', 'that\n', 'the other\n']
</snippet></ROW><ROW><id>6561312</id><snippet>[link['href'] for link in soup.findAll('a') 
 if not any(bad in link['href'] for bad in doNotProcessList)]
</snippet></ROW><ROW><id>6561312</id><snippet>def condition(x):
    return not any((bad in x) for bad in doNotProcessList)

[link['href'] for link in soup.findAll('a') if condition(link['href'])]
</snippet></ROW><ROW><id>6561665</id><snippet>max()</snippet></ROW><ROW><id>6561665</id><snippet>key</snippet></ROW><ROW><id>6561665</id><snippet>lambda</snippet></ROW><ROW><id>6561665</id><snippet>&gt;&gt;&gt; max(lst, key=lambda x:x['score'])
{'score': 10, 'name': 'jerry'}
</snippet></ROW><ROW><id>6561705</id><snippet>&gt;&gt;&gt; from dis import dis
</snippet></ROW><ROW><id>6561705</id><snippet>#Python 3.2
&gt;&gt;&gt; dis(Testing.__init__)
...
  5          10 LOAD_GLOBAL              1 (a_func)
...

#Python 2.7
&gt;&gt;&gt; dis(Testing.__init__)
...
  5           8 LOAD_NAME                0 (a_func)
...
</snippet></ROW><ROW><id>6561705</id><snippet>a_func</snippet></ROW><ROW><id>6561705</id><snippet>print(locals())</snippet></ROW><ROW><id>6561705</id><snippet>exec</snippet></ROW><ROW><id>6561705</id><snippet>a_func</snippet></ROW><ROW><id>6561705</id><snippet>__init__</snippet></ROW><ROW><id>6561705</id><snippet>a_func = None</snippet></ROW><ROW><id>6561705</id><snippet>__init__</snippet></ROW><ROW><id>6561705</id><snippet>LOAD_FAST</snippet></ROW><ROW><id>6561705</id><snippet>globals()</snippet></ROW><ROW><id>6561705</id><snippet>exec</snippet></ROW><ROW><id>6561705</id><snippet>a_func</snippet></ROW><ROW><id>6561705</id><snippet>LOAD_GLOBAL</snippet></ROW><ROW><id>6561705</id><snippet>exec</snippet></ROW><ROW><id>6561705</id><snippet>LOAD_NAME</snippet></ROW><ROW><id>6561705</id><snippet>LOAD_GLOBAL</snippet></ROW><ROW><id>6561705</id><snippet>exec</snippet></ROW><ROW><id>6561705</id><snippet>exec</snippet></ROW><ROW><id>6561705</id><snippet>&gt;&gt;&gt; exec = len
&gt;&gt;&gt; exec([1,2,3])
3
</snippet></ROW><ROW><id>6561705</id><snippet>exec('...', globals())</snippet></ROW><ROW><id>6562011</id><snippet>import feedparser
llog = feedparser.parse("http://languagelog.ldc.upenn.edu/nll/?feed=atom")

with open('myblog.txt', 'w') as outfile:
    for entry in llog.entries:
        ## Do your processing here
        content = entry.content[0].value
        clean_content = nltk.word_tokenize(nltk.html_clean(content))
        outfile.write(clean_content)
</snippet></ROW><ROW><id>6562011</id><snippet>feed.entries</snippet></ROW><ROW><id>6562434</id><snippet>In []: A= arange(12).reshape(4, 3)
In []: A
Out[]: 
array([[ 0,  1,  2],
       [ 3,  4,  5],
       [ 6,  7,  8],
       [ 9, 10, 11]])
In []: 3== (0== (A- [3, 4, 5])).sum(1)
Out[]: array([False,  True, False, False], dtype=bool)
</snippet></ROW><ROW><id>6562434</id><snippet>Paul</snippet></ROW><ROW><id>6562434</id><snippet>In []: ~np.all(A- [3, 4, 5], 1)
Out[]: array([False,  True, False, False], dtype=bool)
</snippet></ROW><ROW><id>6562434</id><snippet>JoshAdel</snippet></ROW><ROW><id>6562434</id><snippet>Emma</snippet></ROW><ROW><id>6562434</id><snippet>Paul</snippet></ROW><ROW><id>6562587</id><snippet> return super(self.__class__, self)...
</snippet></ROW><ROW><id>6562587</id><snippet>self.__class__</snippet></ROW><ROW><id>6562587</id><snippet>self.__class__</snippet></ROW><ROW><id>6562587</id><snippet>return super(Foo, self)...
</snippet></ROW><ROW><id>6562587</id><snippet>get_defining_fields</snippet></ROW><ROW><id>6562587</id><snippet>super</snippet></ROW><ROW><id>6562587</id><snippet>self.__class__.__mro__</snippet></ROW><ROW><id>6562587</id><snippet>class Foo(object):
    def _defining_fields(self):
        return ['in Foo']

    def get_defining_fields(self):
        fields = []
        for cls in self.__class__.__mro__:
            if hasattr(cls, '_defining_fields'):
                fields.append(cls._defining_fields(self))
        return fields
</snippet></ROW><ROW><id>6562628</id><snippet>getopt.getopt(sys.argv[1:], 'x:y:')</snippet></ROW><ROW><id>6562701</id><snippet>import pymysql
conn = pymysql.connect(host='127.0.0.1', unix_socket='/tmp/mysql.sock', user='root', passwd=None, db='mysql')
cur = conn.cursor()
cur.execute("SELECT Host,User FROM user")
for r in cur:
    print(r)
cur.close()
conn.close()
</snippet></ROW><ROW><id>6562752</id><snippet>elif (tick == 2) and data:
        print 'from client: %r' % data # (note 1)
        print struct.unpack("!B", data[0]) # (note 2)
</snippet></ROW><ROW><id>6562752</id><snippet>struct.unpack</snippet></ROW><ROW><id>6563040</id><snippet>__init__</snippet></ROW><ROW><id>6563040</id><snippet>__new__</snippet></ROW><ROW><id>6563040</id><snippet>__new__</snippet></ROW><ROW><id>6563040</id><snippet>object.__new__</snippet></ROW><ROW><id>6563040</id><snippet>__new__</snippet></ROW><ROW><id>6563040</id><snippet>__new__</snippet></ROW><ROW><id>6563040</id><snippet>__init__</snippet></ROW><ROW><id>6563040</id><snippet>__init__</snippet></ROW><ROW><id>6563040</id><snippet>__new__</snippet></ROW><ROW><id>6563040</id><snippet>__init__</snippet></ROW><ROW><id>6563040</id><snippet>__call__</snippet></ROW><ROW><id>6563040</id><snippet>import functools

class A(type):
    def __call__(cls, *args, **kwargs):
        r = super(A, cls).__call__(*args, **kwargs)
        print "%s was instantiated" % (cls.__name__, )
        print "the new instance is %r" % (r, )
        return r


class B(type):
    def __init__(cls, name, bases, dct):
        super(B, cls).__init__(name, bases, dct)
        if '__init__' not in dct:
            return
        old_init = dct['__init__']
        @functools.wraps(old_init)
        def __init__(self, *args, **kwargs):
            old_init(self, *args, **kwargs)
            print "%s (%s) was instantiated" % (type(self).__name__, cls.__name__)
            print "the new instance is %r" % (self, )
        cls.__init__ = __init__


class T1:
    __metaclass__ = A

class T2:
    __metaclass__ = B
    def __init__(self): 
        pass

class T3(T2):
    def __init__(self):
        super(T3, self).__init__()
</snippet></ROW><ROW><id>6563040</id><snippet>&gt;&gt;&gt; T1()
T1 was instantiated
the new instance is &lt;__main__.T1 object at 0x7f502c104290&gt;
&lt;__main__.T1 object at 0x7f502c104290&gt;
&gt;&gt;&gt; T2()
T2 (T2) was instantiated
the new instance is &lt;__main__.T2 object at 0x7f502c0f7ed0&gt;
&lt;__main__.T2 object at 0x7f502c0f7ed0&gt;
&gt;&gt;&gt; T3()
T3 (T2) was instantiated
the new instance is &lt;__main__.T3 object at 0x7f502c104290&gt;
T3 (T3) was instantiated
the new instance is &lt;__main__.T3 object at 0x7f502c104290&gt;
&lt;__main__.T3 object at 0x7f502c104290&gt;
</snippet></ROW><ROW><id>6563040</id><snippet>__call__</snippet></ROW><ROW><id>6563059</id><snippet>import os
import sys
sys.path.append(os.path.join(os.dirname(__file__), '../'))
</snippet></ROW><ROW><id>6563059</id><snippet>from gui import Gui
</snippet></ROW><ROW><id>6563156</id><snippet>urls = ['http://www.google.com', 'http://www.yandex.ru', 'http://www.python.org']

import gevent
from gevent import monkey

# patches stdlib (including socket and ssl modules) to cooperate with other greenlets
monkey.patch_all()

import urllib2


def print_head(url):
    print ('Starting %s' % url)
    data = urllib2.urlopen(url).read()
    print ('%s: %s bytes: %r' % (url, len(data), data[:50]))

jobs = [gevent.spawn(print_head, url) for url in urls]
</snippet></ROW><ROW><id>6563358</id><snippet>a = [1, 2, 5, 7]</snippet></ROW><ROW><id>6563358</id><snippet>b</snippet></ROW><ROW><id>6563358</id><snippet>a</snippet></ROW><ROW><id>6563358</id><snippet>b = []
for e in a:
    b.append(2*e)
</snippet></ROW><ROW><id>6563358</id><snippet>b = [2*e for e in a]
</snippet></ROW><ROW><id>6563371</id><snippet>&gt;&gt;&gt; import pickle
&gt;&gt;&gt; s = pickle.dumps({'username': 'admin', 'password': '123'})
&gt;&gt;&gt; s
"(dp0\nS'username'\np1\nS'admin'\np2\nsS'password'\np3\nS'123'\np4\ns."
</snippet></ROW><ROW><id>6563371</id><snippet>s</snippet></ROW><ROW><id>6563371</id><snippet>&gt;&gt;&gt; pickle.loads(s)
{'username': 'admin', 'password': '123'}
</snippet></ROW><ROW><id>6563454</id><snippet>enumerate</snippet></ROW><ROW><id>6563454</id><snippet>&gt;&gt;&gt; list(enumerate(a))
[(0, 'Street zero'), (1, 'Street one'), (2, 'Street two')]
</snippet></ROW><ROW><id>6563454</id><snippet>zip</snippet></ROW><ROW><id>6563454</id><snippet>&gt;&gt;&gt; zip(b, a)
[(0, 'Street zero'), (1, 'Street one'), (2, 'Street two')]
</snippet></ROW><ROW><id>6563454</id><snippet>b</snippet></ROW><ROW><id>6563650</id><snippet>balancer = loadbalancer
balancer.create_loadbalancer(...)
</snippet></ROW><ROW><id>6563650</id><snippet>__init__</snippet></ROW><ROW><id>6563650</id><snippet>balancer = loadbalancer()
balancer.create_loadbalancer(...)
</snippet></ROW><ROW><id>6563650</id><snippet>balancer</snippet></ROW><ROW><id>6563650</id><snippet>    except Exception,err:
        os.remove(LOCAL_DIR+loadbalancer['_id'])
        raise(err)
    if not(filenames):
        os.remove(LOCAL_DIR+loadbalancer['_id'])
        raise Exception('no cursor returned')
</snippet></ROW><ROW><id>6563650</id><snippet>loadbalancer['_id']</snippet></ROW><ROW><id>6563776</id><snippet>query_status = Column(Boolean, default = False)</snippet></ROW><ROW><id>6563776</id><snippet>check constraint</snippet></ROW><ROW><id>6563776</id><snippet>name</snippet></ROW><ROW><id>6563776</id><snippet>check constraint</snippet></ROW><ROW><id>6564648</id><snippet>import random

class ContextFree(object):
  def __init__(self):
    self.rules = {}
    # grab any instancemethod to get an instance of the instancemethod class
    self.instancemethod = type(self.add_rule)
    self.max_depth = 100
    self.depth = 0

  def add_rule(self, func, prob=1):
    rule_name = func.__name__

    if not rule_name in self.rules:
      self.rules[rule_name] = { 'funcs' : [], 'total' : 0 }

    total = self.rules[rule_name]['total']
    self.rules[rule_name]['funcs'].append([range(total,(prob+total)), func])
    self.rules[rule_name]['total'] += prob

    def augmented_func(self, options={}):
      if not self.depth &gt;= self.max_depth:
        self.depth += 1
        pick = self.determine_rule(rule_name)
        print('Generation', self.depth)
        pick(self)

    self.__dict__[rule_name] = self.instancemethod(augmented_func, self)

  def determine_rule(self, rule_name):
    rule = self.rules[rule_name]
    winning_number = random.randrange(0, self.rules[rule_name]['total'])
    for func in rule['funcs']:
      if winning_number in func[0]:
        return func[1]

cf = ContextFree()

def box(self):
  print('Rule for box1')
  self.box()

cf.add_rule(box)

def box(self):
  print('Rule for box2')
  self.box()

cf.add_rule(box)

cf.box()

# Output:
## Generation 1
## Rule for box2
## Generation 2
## Rule for box2
## Generation 3
## Rule for box1
## Generation 4
## Rule for box2
## Generation 5
## Rule for box1
## Generation 6
## Rule for box2
## Generation 7
## Rule for box2
## Generation 8
## Rule for box1
## Generation 9
## Rule for box2
## Generation 10
## Rule for box2
## Generation 11
## Rule for box1
## Generation 12
## Rule for box1
## Generation 13
## Rule for box1
## Generation 14
## Rule for box1
## Generation 15
## Rule for box2
## Generation 16
## Rule for box1
## Generation 17
## Rule for box1
## Generation 18
## Rule for box1
## Generation 19
## Rule for box1
## Generation 20
## Rule for box1
## Generation 21
## Rule for box2
## Generation 22
## Rule for box2
## Generation 23
## Rule for box1
## Generation 24
## Rule for box2
## Generation 25
## Rule for box1
## Generation 26
## Rule for box2
## Generation 27
## Rule for box2
## Generation 28
## Rule for box1
## Generation 29
## Rule for box2
## Generation 30
## Rule for box2
## Generation 31
## Rule for box2
## Generation 32
## Rule for box2
## Generation 33
## Rule for box2
## Generation 34
## Rule for box1
## Generation 35
## Rule for box2
## Generation 36
## Rule for box1
## Generation 37
## Rule for box1
## Generation 38
## Rule for box1
## Generation 39
## Rule for box1
## Generation 40
## Rule for box2
## Generation 41
## Rule for box1
## Generation 42
## Rule for box1
## Generation 43
## Rule for box1
## Generation 44
## Rule for box1
## Generation 45
## Rule for box2
## Generation 46
## Rule for box1
## Generation 47
## Rule for box2
## Generation 48
## Rule for box1
## Generation 49
## Rule for box2
## Generation 50
## Rule for box1
## Generation 51
## Rule for box1
## Generation 52
## Rule for box1
## Generation 53
## Rule for box2
## Generation 54
## Rule for box2
## Generation 55
## Rule for box2
## Generation 56
## Rule for box2
## Generation 57
## Rule for box2
## Generation 58
## Rule for box1
## Generation 59
## Rule for box1
## Generation 60
## Rule for box1
## Generation 61
## Rule for box2
## Generation 62
## Rule for box2
## Generation 63
## Rule for box2
## Generation 64
## Rule for box1
## Generation 65
## Rule for box2
## Generation 66
## Rule for box2
## Generation 67
## Rule for box2
## Generation 68
## Rule for box2
## Generation 69
## Rule for box2
## Generation 70
## Rule for box1
## Generation 71
## Rule for box2
## Generation 72
## Rule for box2
## Generation 73
## Rule for box2
## Generation 74
## Rule for box1
## Generation 75
## Rule for box2
## Generation 76
## Rule for box1
## Generation 77
## Rule for box1
## Generation 78
## Rule for box2
## Generation 79
## Rule for box1
## Generation 80
## Rule for box2
## Generation 81
## Rule for box1
## Generation 82
## Rule for box1
## Generation 83
## Rule for box1
## Generation 84
## Rule for box1
## Generation 85
## Rule for box2
## Generation 86
## Rule for box1
## Generation 87
## Rule for box1
## Generation 88
## Rule for box2
## Generation 89
## Rule for box2
## Generation 90
## Rule for box1
## Generation 91
## Rule for box1
## Generation 92
## Rule for box1
## Generation 93
## Rule for box1
## Generation 94
## Rule for box1
## Generation 95
## Rule for box1
## Generation 96
## Rule for box2
## Generation 97
## Rule for box1
## Generation 98
## Rule for box2
## Generation 99
## Rule for box1
## Generation 100
## Rule for box2
</snippet></ROW><ROW><id>6564687</id><snippet>open("thefile.xml", "rU")</snippet></ROW><ROW><id>6564687</id><snippet>\n</snippet></ROW><ROW><id>6564687</id><snippet>\r</snippet></ROW><ROW><id>6564687</id><snippet>\r\n</snippet></ROW><ROW><id>6564733</id><snippet>def combine(n, m):
    return (n &lt;&lt; 16) | m

def extract(c):
    return (c &gt;&gt; 16), c &amp; 0xffff
</snippet></ROW><ROW><id>6564733</id><snippet>c &gt;&gt; 16</snippet></ROW><ROW><id>6564733</id><snippet>c &amp; 0xffff</snippet></ROW><ROW><id>6564937</id><snippet>programmerclienthandler_client</snippet></ROW><ROW><id>6565059</id><snippet>import time

text = """50 Cent     1975-07-06
75 Cents    1933-01-29
9th Wonder  1975-01-15
A Fine Frenzy   1984-12-23"""

for line in text.splitlines():
    dob = line.rsplit(None, 1)[-1]
    dob_new = time.strftime('%B %d, %Y', time.strptime(dob, '%Y-%m-%d'))

    print line.replace(dob, dob_new)
</snippet></ROW><ROW><id>6565334</id><snippet>userInput()</snippet></ROW><ROW><id>6565334</id><snippet>computerInput()</snippet></ROW><ROW><id>6565334</id><snippet>userInput == 1</snippet></ROW><ROW><id>6565334</id><snippet>userInput</snippet></ROW><ROW><id>6565334</id><snippet>computerInput == 3</snippet></ROW><ROW><id>6565334</id><snippet>userInput = ...</snippet></ROW><ROW><id>6565334</id><snippet>None</snippet></ROW><ROW><id>6565334</id><snippet>input</snippet></ROW><ROW><id>6565334</id><snippet>input</snippet></ROW><ROW><id>6565334</id><snippet>raw_input</snippet></ROW><ROW><id>6565585</id><snippet>d = PyModule_GetDict(m);
</snippet></ROW><ROW><id>6565585</id><snippet>n = PyString_FromString("modname");
</snippet></ROW><ROW><id>6565585</id><snippet>ml</snippet></ROW><ROW><id>6565585</id><snippet>v = PyCFunction_NewEx(&amp;ml, (PyObject*)NULL, n);
</snippet></ROW><ROW><id>6565585</id><snippet>PyDict_SetItemString(d, ml-&gt;ml_name, v);
</snippet></ROW><ROW><id>6565585</id><snippet>Py_InitModule4</snippet></ROW><ROW><id>6565585</id><snippet>Py_InitModule</snippet></ROW><ROW><id>6565585</id><snippet>Py_InitModule4</snippet></ROW><ROW><id>6565669</id><snippet>thetext = re.sub(r"\(.*?\)", "", thetext)
</snippet></ROW><ROW><id>6565669</id><snippet>thetext[4:10]
thetext[:5]   # First 5 characters
thetext[-5:]  # Last 5 characters
thetext[:-1]  # All but the last character
</snippet></ROW><ROW><id>6565769</id><snippet>__code__</snippet></ROW><ROW><id>6565769</id><snippet>&gt;&gt;&gt; def foo():
...     print "Hello"

&gt;&gt;&gt; import pickle
&gt;&gt;&gt; code = pickle.dumps(foo.__code__)
&gt;&gt;&gt; def bar():
...     pass

&gt;&gt;&gt; bar()
&gt;&gt;&gt; bar.__code__ = pickle.loads(code)
&gt;&gt;&gt; bar()
Hello
</snippet></ROW><ROW><id>6566249</id><snippet>def closureMaker():
    x = [0]
    def closure():
        x[0] += 1
        print x[0]
    return closure
</snippet></ROW><ROW><id>6566249</id><snippet>nonlocal x</snippet></ROW><ROW><id>6566249</id><snippet>x</snippet></ROW><ROW><id>6566457</id><snippet>FILE.write(data)
</snippet></ROW><ROW><id>6566457</id><snippet>data</snippet></ROW><ROW><id>6566457</id><snippet>data.tofile(FILE)
</snippet></ROW><ROW><id>6566457</id><snippet>print pack("s*", unpack("C*", "abcd"))
# piped through xxd =&gt; 0000000: 6100 6200 6300 6400     a.b.c.d.
</snippet></ROW><ROW><id>6566457</id><snippet>perldoc -f pack</snippet></ROW><ROW><id>6566457</id><snippet>W</snippet></ROW><ROW><id>6566457</id><snippet>C</snippet></ROW><ROW><id>6566457</id><snippet>s</snippet></ROW><ROW><id>6566457</id><snippet>h</snippet></ROW><ROW><id>6566457</id><snippet>ord</snippet></ROW><ROW><id>6566457</id><snippet>$packet</snippet></ROW><ROW><id>6566457</id><snippet>@data</snippet></ROW><ROW><id>6566457</id><snippet>ord</snippet></ROW><ROW><id>6566457</id><snippet>$_</snippet></ROW><ROW><id>6566457</id><snippet>my @data = map { ord } split //, $packet; # or
my @data = unpack 'W*', $packet;          
</snippet></ROW><ROW><id>6566457</id><snippet>$packet</snippet></ROW><ROW><id>6566457</id><snippet>(split //, $packet)[$start .. $end];    # or
 split //, substr $packet, $start, $end # ysth's version
</snippet></ROW><ROW><id>6566620</id><snippet>db.Model</snippet></ROW><ROW><id>6566620</id><snippet>Car</snippet></ROW><ROW><id>6566620</id><snippet>Category</snippet></ROW><ROW><id>6566682</id><snippet>os.chdir</snippet></ROW><ROW><id>6566682</id><snippet>import os
os.chdir(os.path.split(__file__)[0])
</snippet></ROW><ROW><id>6566682</id><snippet>psd(__file__, blah)</snippet></ROW><ROW><id>6566682</id><snippet>psd(blah)</snippet></ROW><ROW><id>6566682</id><snippet>import inspect

def getCallerModule():
    # gets globals of module called from, and prints out __file__ global
    print(inspect.currentframe().f_back.f_globals['__file__'])
</snippet></ROW><ROW><id>6566781</id><snippet>import foo</snippet></ROW><ROW><id>6566781</id><snippet>class Registered(object):
    __all__ = set()
    def __init__(self):
        self.__class__.__all__.add(self)
</snippet></ROW><ROW><id>6566781</id><snippet>&gt;&gt;&gt; Registered()
&gt;&gt;&gt; Registered()
&gt;&gt;&gt; Registered()

&gt;&gt;&gt; Registered.__all__
{&lt;__main__.Registered object at 0xcd3210&gt;, &lt;__main__.Registered object at 0xcd3150&gt;, &lt;__main__.Registered object at 0xcd31d0&gt;}
</snippet></ROW><ROW><id>6566781</id><snippet>dir</snippet></ROW><ROW><id>6566781</id><snippet>{var for name,var in globals() if isinstance(var,Foo)}</snippet></ROW><ROW><id>6566781</id><snippet>inspect.currentframe().f_back.f_globals</snippet></ROW><ROW><id>6566781</id><snippet>foo.py</snippet></ROW><ROW><id>6567153</id><snippet>autorelease</snippet></ROW><ROW><id>6567153</id><snippet>main</snippet></ROW><ROW><id>6567153</id><snippet>main</snippet></ROW><ROW><id>6567153</id><snippet>autorelease</snippet></ROW><ROW><id>6567153</id><snippet>NSNumber *zero = [NSNumber numberWithInt:0];
NSNumber *one = [NSNumber numberWithInt:1];
</snippet></ROW><ROW><id>6567153</id><snippet>NSLog</snippet></ROW><ROW><id>6567318</id><snippet>p1</snippet></ROW><ROW><id>6567318</id><snippet>def fn(pipe):
    p1.close()
    print "recv:", pipe.recv()
    print "recv:", pipe.recv()
</snippet></ROW><ROW><id>6567354</id><snippet>L</snippet></ROW><ROW><id>6567354</id><snippet>L</snippet></ROW><ROW><id>6567354</id><snippet>f</snippet></ROW><ROW><id>6567404</id><snippet>import hashlib
actually_random = hashlib.sha1(uuid).digest()
</snippet></ROW><ROW><id>6567424</id><snippet>&lt;option value="4"&gt;4&lt;/option&gt;
&lt;option value="5"&gt;5&lt;/option&gt;
&lt;option value="6"&gt;6&lt;/option&gt;
&lt;option value="7"&gt;7&lt;/option&gt;
&lt;option value="8"&gt;8&lt;/option&gt;
&lt;option value="9"&gt;9&lt;/option&gt;
&lt;option value="10"&gt;10&lt;/option&gt;
&lt;option value="11"&gt;11&lt;/option&gt;
&lt;option value="12"&gt;12&lt;/option&gt;
&lt;option value="13"&gt;13&lt;/option&gt;
&lt;option value="14"&gt;14&lt;/option&gt;
&lt;option value="15"&gt;15&lt;/option&gt;
&lt;option value="16"&gt;16&lt;/option&gt;
&lt;option value="17"&gt;17&lt;/option&gt;
&lt;option value="18"&gt;18&lt;/option&gt;
</snippet></ROW><ROW><id>6567424</id><snippet>br["DatePicker$DaysDropDownList"] = ["4"]</snippet></ROW><ROW><id>6567424</id><snippet>import mechanize
br = mechanize.Browser()
br.open("http://www.planibus.sto.ca/HastinfoWeb/StartTimetableForm.aspx")
br.select_form(name="TimetableQueryForm")
select = br.form.controls[8] # DatePicker$DaysDropDownList
select.possible_items()
&gt;&gt;&gt; []
</snippet></ROW><ROW><id>6567669</id><snippet>sorted(..., key=lambda x: (x[0], -x[1]))
</snippet></ROW><ROW><id>6567873</id><snippet>but on Ctrl+Space</snippet></ROW><ROW><id>6567978</id><snippet>self.lvnames.GetString(self.lvnames.GetSelection())
</snippet></ROW><ROW><id>6567978</id><snippet>try... except</snippet></ROW><ROW><id>6568248</id><snippet>FixedLocator</snippet></ROW><ROW><id>6568248</id><snippet>cbar</snippet></ROW><ROW><id>6568248</id><snippet>ax</snippet></ROW><ROW><id>6568248</id><snippet>import numpy as np
import matplotlib.pyplot as plt

fig = plt.figure()
ax = fig.add_subplot(111)
x = np.arange(10,3000,100)
y = np.arange(10,3000,100)
X,Y = np.meshgrid(x,y)
Z = np.random.random(X.shape)*8000000
surf = ax.contourf(X,Y,Z, 8, cmap=plt.cm.jet)
ax.set_ylabel('Log Frequency (Hz)')
ax.set_xlabel('Log Frequency (Hz)')
ax.set_xscale('log')
ax.set_yscale('log')
ax.xaxis.set_minor_formatter(plt.FormatStrFormatter('%d'))
# defining custom minor tick locations:
ax.xaxis.set_minor_locator(plt.FixedLocator([50,500,2000]))
ax.yaxis.set_ticks_position('left')
ax.xaxis.set_ticks_position('bottom')
ax.tick_params(axis='both',reset=False,which='both',length=8,width=2)
cbar = fig.colorbar(surf, shrink=0.5, aspect=20, fraction=.12,pad=.02)
cbar.set_label('Activation',size=18)
# access to cbar tick labels:
cbar.ax.tick_params(labelsize=5) 
plt.show()
</snippet></ROW><ROW><id>6568248</id><snippet>set_visible</snippet></ROW><ROW><id>6568248</id><snippet>FuncFormatter</snippet></ROW><ROW><id>6568248</id><snippet>def show_only_some(x, pos):
    s = str(int(x))
    if s[0] in ('2','5'):
        return s
    return ''

ax.xaxis.set_minor_formatter(plt.FuncFormatter(show_only_some))
</snippet></ROW><ROW><id>6569357</id><snippet> print(self.cur.rowcount)
</snippet></ROW><ROW><id>6569357</id><snippet>self.cur.execute(strq) 
data = self.cur.fetchall()
print len(data)
</snippet></ROW><ROW><id>6569438</id><snippet>contribute_to_class</snippet></ROW><ROW><id>6569438</id><snippet>DateField</snippet></ROW><ROW><id>6569438</id><snippet>django.db.models.fields.__init__</snippet></ROW><ROW><id>6570087</id><snippet>recv_exit_status</snippet></ROW><ROW><id>6570087</id><snippet>ssh = paramiko.SSHClient()
ssh.connect(remote, username=username, password=password)
ssh_stdin, ssh_stdout, ssh_stderr = ssh.exec_command("some command")
exit_status = ssh_stdout.channel.recv_exit_status()
</snippet></ROW><ROW><id>6570190</id><snippet>from itertools import izip

for x, field in izip(FlightsResultsSorter, named_tuple_sex._fields):
    print x, field
</snippet></ROW><ROW><id>6570190</id><snippet>FlightsResultsSorter._asdict()</snippet></ROW><ROW><id>6570265</id><snippet>stdin</snippet></ROW><ROW><id>6570265</id><snippet>import msvcrt, os, sys

msvcrt.setmode(sys.stdin.fileno(), os.O_BINARY)
while True:
    ch = sys.stdin.read(1)
    print ord(ch)  # CRLF should appear as 13 followed by 10
</snippet></ROW><ROW><id>6570265</id><snippet>-u</snippet></ROW><ROW><id>6570265</id><snippet>stdin</snippet></ROW><ROW><id>6570265</id><snippet>stdout</snippet></ROW><ROW><id>6570265</id><snippet>stderr</snippet></ROW><ROW><id>6570265</id><snippet>python -u myscript.py</snippet></ROW><ROW><id>6570265</id><snippet>stdin.read(1)</snippet></ROW><ROW><id>6570265</id><snippet>python --help</snippet></ROW><ROW><id>6570265</id><snippet>sys.stdin.readline</snippet></ROW><ROW><id>6570265</id><snippet>sys.stdin</snippet></ROW><ROW><id>6570265</id><snippet>sys.stdin.read</snippet></ROW><ROW><id>6570394</id><snippet>template &lt;typename ArgType&gt;
void def_foo_overloads()
{
    def("foo", foo&lt;ArgType&gt;);
    // last type in list
}
template &lt;typename ArgType, typename... MoreArgTypes&gt;
void def_foo_overloads()
{
    def("foo", foo&lt;ArgType&gt;);
    def_foo_overloads(MoreArgTypes...);
}

// use it like:
def_foo_overloads&lt;orignalFunctionNamespace::type1,
                  orignalFunctionNamespace::type2,
                  ...
                  orignalFunctionNamespace::typeN&gt; ();
</snippet></ROW><ROW><id>6570527</id><snippet>In []: a= array([0, 1, 3, 5, 1, 1, 2])
In []: b= array([1, 0, 2, 5, 3, 0, 6])
In []: logical_and(a== 1, b== 0).nonzero()[0]
Out[]: array([1, 5])
</snippet></ROW><ROW><id>6570527</id><snippet>In []: ((a== 1)&amp; (b== 0)).nonzero()[0]
Out[]: array([1, 5])
</snippet></ROW><ROW><id>6570897</id><snippet>daemonSocket = socket.socket()
...
phpListenSocket = socket.socket()
phpListenSocket.bind(...)
phpListenSocket.listen(...)
phpSocket = None

while True:
    rlist = ...
    rready, wready, eready = select(rlist, [], [])
    if phpListenSocket in rready:
        phpSocket, remoteAddr = phpListenSocket.accept()
</snippet></ROW><ROW><id>6571008</id><snippet>python --version
which python
Whereis python
</snippet></ROW><ROW><id>6571008</id><snippet>python</snippet></ROW><ROW><id>6571008</id><snippet>find / -name python
</snippet></ROW><ROW><id>6571107</id><snippet>date1 = datetime.datetime.strptime('01/03/2010', '%d/%m/%Y').date()
date2 = datetime.datetime.strptime('04/03/2010', '%d/%m/%Y').date()
</snippet></ROW><ROW><id>6571107</id><snippet>(date2-date1)
</snippet></ROW><ROW><id>6571107</id><snippet>(date2-date1).days
</snippet></ROW><ROW><id>6571181</id><snippet>timeit</snippet></ROW><ROW><id>6571181</id><snippet>import csv
from timeit import Timer

def write_csv(f, n):
    """Write n records to the file named f."""
    w = csv.writer(open(f, 'wb'))
    for i in xrange(n):
        w.writerow((i, "squared", "equals", i**2))

def test1(rows, f, n):
    for i, r in enumerate(csv.reader(open(f))):
        rows[i] = r

def test2(rows, f, n):
    for i, r in enumerate(csv.reader(open(f))):
        pass

def test(t): 
    return (Timer('test%d(rows, F, N)' % t,
                  'from __main__ import test%d, F, N; rows = [None] * N' % t)
            .timeit(number=1))

&gt;&gt;&gt; N = 1446311
&gt;&gt;&gt; F = "test.csv"
&gt;&gt;&gt; write_csv(F, N)
&gt;&gt;&gt; test(1)
2.2321770191192627
&gt;&gt;&gt; test(2)
1.7048690319061279
</snippet></ROW><ROW><id>6571181</id><snippet>test2</snippet></ROW><ROW><id>6571181</id><snippet>row</snippet></ROW><ROW><id>6571181</id><snippet>test1</snippet></ROW><ROW><id>6571181</id><snippet>csv</snippet></ROW><ROW><id>6571181</id><snippet>test3</snippet></ROW><ROW><id>6571181</id><snippet>test4</snippet></ROW><ROW><id>6571181</id><snippet>def test3(rows, f, n):
    for i in xrange(n):
        rows[i] = [i] * 100

def test4(rows, f, n):
    for i in xrange(n):
        temp = [i] * 100
        rows[i] = None

&gt;&gt;&gt; test(3)
9.2103338241577148
&gt;&gt;&gt; test(4)
1.5666921138763428
</snippet></ROW><ROW><id>6571414</id><snippet>Sun Jun 26 09:56:31 BST 2011 finished pack</snippet></ROW><ROW><id>6571513</id><snippet>print(' module1')
some_condition = True
if not some_condition:
  print(' module2')
</snippet></ROW><ROW><id>6571513</id><snippet>def _my_whole_freaking_module():
    print(' module1')
    some_condition = True
    if some_condition:
        return
    print(' module2')

_my_whole_freaking_module()
</snippet></ROW><ROW><id>6571677</id><snippet>from datetime import datetime

mDt = datetime(1900,01,01)
dt = datetime.strptime('20-02-1899', "%d-%m-%Y")
resultString = datetime(dt.year + (mDt - dt).days/365 + 1, dt.month, dt.day).strftime('%B %d, %Y').replace('1900', str(dt.year))
</snippet></ROW><ROW><id>6571677</id><snippet>monthes = ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December']
dt = datetime.strptime('20-02-1890', "%d-%m-%Y")
print "{0:} {1:}, {2:}".format(monthes[dt.month-1], dt.day, dt.year)
</snippet></ROW><ROW><id>6571725</id><snippet>(id, x0, x1)</snippet></ROW><ROW><id>6571725</id><snippet>(id, y0, y1)</snippet></ROW><ROW><id>6572017</id><snippet>import dependencyname_version as dependencyname
</snippet></ROW><ROW><id>6572162</id><snippet>export CFLAGS=-m32
export CXXFLAGS=-m32

./configure
make
make install
</snippet></ROW><ROW><id>6572378</id><snippet>cvMoveWindow(const char* name, int x, int y);
</snippet></ROW><ROW><id>6572378</id><snippet>OpenCV-2.3.0/samples/cpp/tutorial_code/Basic/</snippet></ROW><ROW><id>6572889</id><snippet>@classmethod</snippet></ROW><ROW><id>6572889</id><snippet>@staticmethod</snippet></ROW><ROW><id>6572889</id><snippet>class A(object):
  @classmethod
  def foo(cls):
    print cls.__name__
    # *** I would like to print either 'A' or 'B' here

class B(A):
  pass

A.foo()
B.foo()
</snippet></ROW><ROW><id>6573533</id><snippet>&gt;&gt; A = numpy.array(range(10)).reshape(5, 2)
&gt;&gt;&gt; B = numpy.array(range(5))
&gt;&gt;&gt; B
array([0, 1, 2, 3, 4])
&gt;&gt;&gt; A * B
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
ValueError: shape mismatch: objects cannot be broadcast to a single shape
&gt;&gt;&gt; B = B.reshape(5, 1)
&gt;&gt;&gt; B
array([[0],
       [1],
       [2],
       [3],
       [4]])
&gt;&gt;&gt; A * B
array([[ 0,  0],
       [ 2,  3],
       [ 8, 10],
       [18, 21],
       [32, 36]])
</snippet></ROW><ROW><id>6573611</id><snippet>$ sudo apt-get install python-pip xvfb</snippet></ROW><ROW><id>6573611</id><snippet>$ sudo pip install selenium</snippet></ROW><ROW><id>6573611</id><snippet>#!/usr/bin/env python

from pyvirtualdisplay import Display
from selenium import webdriver

display = Display(visible=0, size=(800, 600))
display.start()

browser = webdriver.Firefox()
browser.get('http://www.google.com')
browser.save_screenshot('screenie.png')
browser.quit()

display.stop()
</snippet></ROW><ROW><id>6574032</id><snippet>import pygame._view</snippet></ROW><ROW><id>6574453</id><snippet>import datetime
import dateutil.relativedelta

dt1 = datetime.datetime.fromtimestamp(123456789) # 1973-11-29 22:33:09
dt2 = datetime.datetime.fromtimestamp(234567890) # 1977-06-07 23:44:50
rd = dateutil.relativedelta.relativedelta (dt2, dt1)

print "%d years, %d months, %d days, %d hours, %d minutes and %d seconds" % (rd.years, rd.months, rd.days, rd.hours, rd.minutes, rd.seconds)
# 3 years, 6 months, 9 days, 1 hours, 11 minutes and 41 seconds
</snippet></ROW><ROW><id>6574512</id><snippet>name</snippet></ROW><ROW><id>6574512</id><snippet>    # illuminati = Dan's book from db
    author_2.books.append(illuminati)
</snippet></ROW><ROW><id>6574512</id><snippet>author_2.books = [Paper('Illuminati')]</snippet></ROW><ROW><id>6574556</id><snippet>authsub_token = parameters['token'].value
print "content-type:text/html\n"

gd_client = gdata.photos.service.PhotosService()
</snippet></ROW><ROW><id>6574556</id><snippet>gd_client.SetAuthSubToken(authsub_token) 
gd_client.UpgradeToSessionToken()
</snippet></ROW><ROW><id>6574672</id><snippet>class InsertFromSelect( Executable, ClauseElement ):
    _execution_options = \
        Executable._execution_options.union({'autocommit': True})
    def __init__( self, table, select ):
        self.table = table
        self.select = select
</snippet></ROW><ROW><id>6574672</id><snippet>connection.execution_options(autocommit=True).execute(mystatement)
</snippet></ROW><ROW><id>6574672</id><snippet>trans = connection.begin()
connection.execute(...)
trans.commit()
</snippet></ROW><ROW><id>6574861</id><snippet>re.findall</snippet></ROW><ROW><id>6574861</id><snippet>&gt;&gt;&gt; re.findall("a+", 'sdaaddaa')
['aa', 'aa']
</snippet></ROW><ROW><id>6574903</id><snippet>summary = [[0,0,0] for _ in sign_list[0]]

for row in sign_list:
  for index,sign in enumerate(row):
    summary[index][sign+1] += 1
return summary
</snippet></ROW><ROW><id>6575506</id><snippet>if foo is None
</snippet></ROW><ROW><id>6575506</id><snippet>if x == 3
</snippet></ROW><ROW><id>6575543</id><snippet>allowed_domains</snippet></ROW><ROW><id>6575543</id><snippet>BaseSpider</snippet></ROW><ROW><id>6575543</id><snippet>allowed_domains = []</snippet></ROW><ROW><id>6575577</id><snippet>  Rating
---------------------
  rating_id (primary key) 
  worker_id (foreign key - worker(worker_id)) 
  project_id (foreign key - project(project_id)) 
  description
</snippet></ROW><ROW><id>6575693</id><snippet>for each (v, w) in  E</snippet></ROW><ROW><id>6575693</id><snippet>for each</snippet></ROW><ROW><id>6575693</id><snippet>v</snippet></ROW><ROW><id>6575693</id><snippet>v</snippet></ROW><ROW><id>6575693</id><snippet>v</snippet></ROW><ROW><id>6575693</id><snippet>for</snippet></ROW><ROW><id>6575693</id><snippet>v</snippet></ROW><ROW><id>6575693</id><snippet>v</snippet></ROW><ROW><id>6575693</id><snippet>v</snippet></ROW><ROW><id>6575693</id><snippet>v</snippet></ROW><ROW><id>6575693</id><snippet>  idx[w] = (idx[w][0], min(idx[v][1], idx[w][1]))
</snippet></ROW><ROW><id>6575693</id><snippet>  idx[v] = (idx[v][0], min(idx[v][1], idx[w][1]))
</snippet></ROW><ROW><id>6575693</id><snippet>import itertools

def strong_connect(vertex):
    global edges, indices, lowlinks, connected_components, index, stack
    indices[vertex] = index
    lowlinks[vertex] = index
    index += 1
    stack.append(vertex)

    for v, w in (e for e in edges if e[0] == vertex):
        if indices[w] &lt; 0:
            strong_connect(w)
            lowlinks[v] = min(lowlinks[v], lowlinks[w])
        elif w in stack:
            lowlinks[v] = min(lowlinks[v], indices[w])

    if indices[vertex] == lowlinks[vertex]:
        connected_components.append([])
        while stack[-1] != vertex:
            connected_components[-1].append(stack.pop())
        connected_components[-1].append(stack.pop())

edges = [('A', 'B'), ('B', 'C'), ('C', 'D'), ('D', 'E'), 
         ('E', 'A'), ('A', 'E'), ('C', 'A'), ('C', 'E'), 
         ('D', 'F'), ('F', 'B'), ('E', 'F')]
vertices = set(v for v in itertools.chain(*edges))
indices = dict((v, -1) for v in vertices)
lowlinks = indices.copy()
connected_components = []

index = 0
stack = []
for v in vertices:
    if indices[v] &lt; 0:
        strong_connect(v)

print(connected_components)
</snippet></ROW><ROW><id>6575693</id><snippet>Graph</snippet></ROW><ROW><id>6575693</id><snippet>from itertools import chain
from collections import defaultdict

class Graph(object):
    def __init__(self, edges, vertices=()):
        edges = list(list(x) for x in edges)
        self.edges = edges
        self.vertices = set(chain(*edges)).union(vertices)
        self.tails = defaultdict(list)
        for head, tail in self.edges:
            self.tails[head].append(tail)

    @classmethod
    def from_dict(cls, edge_dict):
        return cls((k, v) for k, vs in edge_dict.iteritems() for v in vs)

class _StrongCC(object):
    def strong_connect(self, head):
        lowlink, count, stack = self.lowlink, self.count, self.stack
        lowlink[head] = count[head] = self.counter = self.counter + 1
        stack.append(head)

        for tail in self.graph.tails[head]:
            if tail not in count:
                self.strong_connect(tail)
                lowlink[head] = min(lowlink[head], lowlink[tail])
            elif count[tail] &lt; count[head]:
                if tail in self.stack:
                    lowlink[head] = min(lowlink[head], count[tail])

        if lowlink[head] == count[head]:
            component = []
            while stack and count[stack[-1]] &gt;= count[head]:
                component.append(stack.pop())
            self.connected_components.append(component)

    def __call__(self, graph):
        self.graph = graph
        self.counter = 0
        self.count = dict()
        self.lowlink = dict()
        self.stack = []
        self.connected_components = []

        for v in self.graph.vertices:
            if v not in self.count:
                self.strong_connect(v)

        return self.connected_components

strongly_connected_components = _StrongCC()

if __name__ == '__main__':
    edges = [('A', 'B'), ('B', 'C'), ('C', 'D'), ('D', 'E'),
             ('E', 'A'), ('A', 'E'), ('C', 'A'), ('C', 'E'),
             ('D', 'F'), ('F', 'B'), ('E', 'F')]
    print strongly_connected_components(Graph(edges))
    edge_dict = {'a':['b', 'c', 'd'],
                 'b':['c', 'a'],
                 'c':['d', 'e'],
                 'd':['e'],
                 'e':['c']}
    print strongly_connected_components(Graph.from_dict(edge_dict))
</snippet></ROW><ROW><id>6575906</id><snippet>strptime</snippet></ROW><ROW><id>6575906</id><snippet>myDatetime = datetime.strptime(myString.split(".")[0], "%Y-%m-%dT%H:%M:%S")
</snippet></ROW><ROW><id>6576099</id><snippet>[[(ants[0].loc, 0, dict((i, i) for i in range(self.num_players)))]]
</snippet></ROW><ROW><id>6576191</id><snippet>p</snippet></ROW><ROW><id>6576191</id><snippet>x</snippet></ROW><ROW><id>6576191</id><snippet>struct</snippet></ROW><ROW><id>6576191</id><snippet>p = p[:1] + struct.pack("&gt;b", x) + p[2:]
</snippet></ROW><ROW><id>6576208</id><snippet>import types

def strategyA(possible_self):
    pass

instance = OrigObject()

instance.strategy = types.MethodType(strategyA, instance)

instance.strategy()
</snippet></ROW><ROW><id>6576445</id><snippet>Trailcrest.py</snippet></ROW><ROW><id>6576445</id><snippet>Glyph.py</snippet></ROW><ROW><id>6576445</id><snippet>import Trailcrest
import Glyph
</snippet></ROW><ROW><id>6576445</id><snippet>sys.path</snippet></ROW><ROW><id>6576445</id><snippet>import sys
print sys.path
</snippet></ROW><ROW><id>6576603</id><snippet>time.mktime</snippet></ROW><ROW><id>6576603</id><snippet>x = 10
now = time.localtime()
print [time.localtime(time.mktime([now.tm_year, now.tm_mon - n, 1, 0, 0, 0, 0, 0, 0]))[:2] for n in range(x)]
</snippet></ROW><ROW><id>6576691</id><snippet>(optionaltext)?</snippet></ROW><ROW><id>6576691</id><snippet>re.compile('Frontallobes of (leftside)? the brain', re.IGNORECASE)</snippet></ROW><ROW><id>6576691</id><snippet>import re

# normally, read your input directly from file, but this allows us to test:
input = """The pons also contains the sleep paralysis center of the brain as well as generating the dreams of REM sleep.
The optic tract is a part of the visual system in the brain.
The inferior frontal gyrus is a gyrus of the frontal lobe of the human brain.
The prefrontal cortex (PFC) is the anterior part of the frontallobes of the brain, lying in front of the motor and premotor areas.
There are three possible ways to define the prefrontal cortex as the granular frontal cortex as that part of the frontal cortex whose electrical stimulation does not evoke movements.
This allowed the establishment of homologies despite the lack of a granular frontal cortex in nonprimates.
Modern  tracing studies have shown that projections of the mediodorsal nucleus of the thalamus are not restricted to the granular frontal cortex in primates.
""".split('\n')

patterns = [
    ('(dreams of REM (Geo)? sleep)', '(sleep paralysis)'),
    ('(frontal lobe)',            '(inferior frontal gyrus)'),
    ('(prefrontal cortex)',       '(frontallobes of (leftside )?(the )?brain)'),
    ('(modern tract)',            '(probably mediodorsal nucleus)') ]

# Compile the patterns as regexes
patterns = [ (re.compile(dstr),re.compile(rstr)) for (dstr,rstr) in patterns ]

def longest(t):
    """Get the longest from a tuple of strings."""
    l = list(t) # tuples can't be sorted (immutable), so convert to list...
    l.sort(key=len,reverse=True)
    return l[0]

def custommatch(line):
    for (d,r) in patterns:
        # If got full match to both (d,r), return it immediately...
        (dm,rm) = (d.findall(line), r.findall(line))
        # Slight design problem: we get tuples like: [('frontallobes of the brain', '', 'the ')]
        #... so return the longest match strings for each of dm,rm
        if dm and rm: # must match both dom &amp; rang
            return [longest(dm), longest(rm)]
        # else score any partial matches to (d,r) - how exactly?
        # TBD...
    else:
        # We got here because we only have partial matches (or none)
        # TBD: return the 'highest-scoring' partial match
        return ('TBD... partial match')

for line in input:
    print custommatch(line)
</snippet></ROW><ROW><id>6576691</id><snippet>TBD... partial match
TBD... partial match
['frontal lobe', 'inferior frontal gyrus']
['prefrontal cortex', ('frontallobes of the brain', '', 'the ')]
TBD... partial match
TBD... partial match
TBD... partial match
TBD... partial match
</snippet></ROW><ROW><id>6576706</id><snippet>from jug import TaskGenerator
evaluate = TaskGenerator(evaluate)

for p0 in [1,2,3]:
    for p1 in xrange(10):
        for p2 in xrange(10,20):
             for p3 in [True, False]:
                for p4 in xrange(100):
                    results.append(evaluate(p0,p1,p2,p3,p4))
</snippet></ROW><ROW><id>6576834</id><snippet>and</snippet></ROW><ROW><id>6576834</id><snippet>or</snippet></ROW><ROW><id>6576834</id><snippet>0 and foo() or 1 == (0 and foo()) or 1
                 == 0 or 1  # short-circuited, foo() never evaluated
                 == 1
</snippet></ROW><ROW><id>6576834</id><snippet>1 or foo() and 0 == 1 or (foo() and 0)
                 == 1       # short-circuited, foo() never evaluated
</snippet></ROW><ROW><id>6576975</id><snippet>images = PhelpsAnimation.thePhelpsfiles</snippet></ROW><ROW><id>6576975</id><snippet>thePhelpsfiles</snippet></ROW><ROW><id>6576975</id><snippet>PhelpsAnimation</snippet></ROW><ROW><id>6576975</id><snippet>images=thePhelpsfiles</snippet></ROW><ROW><id>6576981</id><snippet>Match</snippet></ROW><ROW><id>6576981</id><snippet>None</snippet></ROW><ROW><id>6576981</id><snippet>if re.match(...):
</snippet></ROW><ROW><id>6577340</id><snippet>.txt</snippet></ROW><ROW><id>6577340</id><snippet>glob</snippet></ROW><ROW><id>6577340</id><snippet>import pylab, glob

txt_files = glob.iglob("./*.txt")

for data in txt_files:
    data = pylab.loadtxt(data)
    pylab.plot(data[:,1], data[:,2])

pylab.show()
</snippet></ROW><ROW><id>6577592</id><snippet>re.match()</snippet></ROW><ROW><id>6577592</id><snippet>re.search()</snippet></ROW><ROW><id>6577592</id><snippet>in</snippet></ROW><ROW><id>6577592</id><snippet>L = [l for l in L if "msi" not in l]
</snippet></ROW><ROW><id>6577771</id><snippet>&gt;&gt;&gt; print '{0:06x}'.format(123)
00007b
</snippet></ROW><ROW><id>6578081</id><snippet>import sys, thread
from Tkinter import *
from os import system as run
from time import sleep

r = Tk()
r.title('Remote Support')
t = StringVar()
t.set('Completing Remote Support Initalisation         ')
l = Label(r,  textvariable=t).pack() 
def quit():
    #do cleanup if any
    r.destroy()
but = Button(r, text='Stop Remote Support', command=quit)
but.pack(side=LEFT)

def d():
    sleep(2)
    t.set('Completing Remote Support Initalisation, downloading, please wait         ')
    run('sleep 5') #test shell command
    t.set('Preparing to run download, please wait         ')
    run('sleep 5')
    t.set("OK thanks! Remote Support will now close         ")
    sleep(2)
    quit()

sleep(2)
thread.start_new_thread(d,())
r.mainloop()
</snippet></ROW><ROW><id>6578306</id><snippet>libpython.a</snippet></ROW><ROW><id>6578504</id><snippet>Foo</snippet></ROW><ROW><id>6578504</id><snippet>Foo()</snippet></ROW><ROW><id>6578504</id><snippet>Foo.__init__()</snippet></ROW><ROW><id>6578504</id><snippet>Foo.__new__()</snippet></ROW><ROW><id>6578524</id><snippet>frequency*threshold</snippet></ROW><ROW><id>6578524</id><snippet>if button_now() != button_state:
    debounce_counter += 1
    if debounce_counter == DEBOUNCE_THRESHOLD:
        button_state = not button_state
else:
    debounce_counter = 0
</snippet></ROW><ROW><id>6578524</id><snippet>button_now()</snippet></ROW><ROW><id>6578524</id><snippet>True/False</snippet></ROW><ROW><id>6578524</id><snippet>button_state</snippet></ROW><ROW><id>6578524</id><snippet>True/False</snippet></ROW><ROW><id>6578524</id><snippet>DEBOUNCE_THRESHOLD</snippet></ROW><ROW><id>6578524</id><snippet>reaction-time-of-the-button = frequency-of-debouncing-routine * threshold</snippet></ROW><ROW><id>6578963</id><snippet>MyApp
Framework==0.9.4
Library&gt;=0.2
</snippet></ROW><ROW><id>6579114</id><snippet>cv.Sqrt()</snippet></ROW><ROW><id>6579114</id><snippet>cv::sqrt()</snippet></ROW><ROW><id>6579114</id><snippet>cv.Pow()</snippet></ROW><ROW><id>6579114</id><snippet>cv.Pow(src, dst, 0.5)
</snippet></ROW><ROW><id>6579114</id><snippet>cv.Sqrt()</snippet></ROW><ROW><id>6579139</id><snippet>class User(object):
    def __init__(self, name, username):
        self.name = name
        self.username = username

import json
def object_decoder(obj):
    if '__type__' in obj and obj['__type__'] == 'User':
        return User(obj['name'], obj['username'])
    return obj

json.loads('{"__type__": "User", "name": "John Smith", "username": "jsmith"}', object_hook=object_decoder)

print type(User)
&gt;&gt;&gt;&gt; &lt;class '__restricted__.User'&gt;
</snippet></ROW><ROW><id>6579139</id><snippet>user = json.loads('{"__type__": "User", "name": "John Smith", "username": "jsmith"}')
print user['name']
print user['username']
</snippet></ROW><ROW><id>6579178</id><snippet>&gt;&gt;&gt; a="&gt;NKMFFALGLLGDGVIGALDTVVSSMGAVGASGLS"
&gt;&gt;&gt; a.replace("&gt;","&gt; \n")
'&gt; \nNKMFFALGLLGDGVIGALDTVVSSMGAVGASGLS'
</snippet></ROW><ROW><id>6579178</id><snippet>&gt;&gt;&gt; print(a.replace("&gt;","&gt; \n"))
&gt; 
NKMFFALGLLGDGVIGALDTVVSSMGAVGASGLS
</snippet></ROW><ROW><id>6579334</id><snippet>&gt;&gt;&gt; get_close_matches('appel', ['ape', 'apple', 'peach', 'puppy'])
['apple', 'ape']
&gt;&gt;&gt; import keyword
&gt;&gt;&gt; get_close_matches('wheel', keyword.kwlist)
['while']
&gt;&gt;&gt; get_close_matches('apple', keyword.kwlist)
[]
&gt;&gt;&gt; get_close_matches('accept', keyword.kwlist)
['except']
</snippet></ROW><ROW><id>6579339</id><snippet>from axe import Axe</snippet></ROW><ROW><id>6579339</id><snippet>my_axe = axe.Axe()</snippet></ROW><ROW><id>6579355</id><snippet>from datetime import datetime, time
from time import sleep

act = lambda x: x+10

def wait_start(runTime, action):
    startTime = time(*(map(int, runTime.split(':'))))
    while startTime &gt; datetime.today().time(): # you can add here any additional variable to break loop if necessary
        sleep(1)# you can change 1 sec interval to any other
return action

wait_start('15:20', act(100))
</snippet></ROW><ROW><id>6579484</id><snippet>square_param</snippet></ROW><ROW><id>6579484</id><snippet>def square_param(param):
    def func_decorator(func):
        def func_caller(*args,**kwargs):
            kwargs[param] = kwargs[param] * kwargs[param]
            return func(*args,**kwargs)
        return func_caller
    return func_decorator
</snippet></ROW><ROW><id>6579484</id><snippet>inspect</snippet></ROW><ROW><id>6579484</id><snippet>import inspect

def square_param(param):
    def func_decorator(func):
        def func_caller(*args,**kwargs):
            funparams = inspect.getargspec(func).args
            if param in funparams:
                i = funparams.index(param)
                if len(args) &gt; i:
                    args = list(args)   # Make mutable
                    args[i] = args[i] * args[i]
            if param in kwargs:
                kwargs[param] = kwargs[param] * kwargs[param]
            return func(*args,**kwargs)
        return func_caller
    return func_decorator
</snippet></ROW><ROW><id>6579522</id><snippet>logging</snippet></ROW><ROW><id>6579522</id><snippet>logging.basicConfig</snippet></ROW><ROW><id>6579522</id><snippet>stderr</snippet></ROW><ROW><id>6579522</id><snippet>debug</snippet></ROW><ROW><id>6579522</id><snippet>info</snippet></ROW><ROW><id>6579522</id><snippet>warning</snippet></ROW><ROW><id>6579522</id><snippet>error</snippet></ROW><ROW><id>6579522</id><snippet>critical</snippet></ROW><ROW><id>6579522</id><snippet>logging.basicConfig(stream=sys.stderr, level=logging.DEBUG)
logging.debug('A debug message!')
logging.info('We processed %d records', len(processed_records))
</snippet></ROW><ROW><id>6579933</id><snippet>str.lower()</snippet></ROW><ROW><id>6579933</id><snippet>import re

if re.search('EX', 'text', re.IGNORECASE):
    # is True
</snippet></ROW><ROW><id>6580215</id><snippet>datetime.timedelta</snippet></ROW><ROW><id>6581184</id><snippet>realloc</snippet></ROW><ROW><id>6581184</id><snippet>resize</snippet></ROW><ROW><id>6581242</id><snippet>__init__</snippet></ROW><ROW><id>6581242</id><snippet>class MyModel(models.Model)

    def __init__(self, *args, **kwargs)
        """My docstring
        """
        super(MyModel, self).__init__(*args, **kwargs)
</snippet></ROW><ROW><id>6581443</id><snippet># before redirect
request.session['users_list'] = users_list

# in sent view
users_list = request.session.get('users_list', None)
</snippet></ROW><ROW><id>6581475</id><snippet>None</snippet></ROW><ROW><id>6581475</id><snippet>try:
    self.variable_name
except NameError:
    # here the code that runs if the variable hasn't been initialised
finally:
    # [optional] here the code that should run in either case
</snippet></ROW><ROW><id>6581917</id><snippet>    @mock.patch('series.models.date', FakeDate) # mock out the date class in the module that has already imported it via from datetime import date, i.e. series.models (app_name.module_name)
def test_valid_my_next_day_of_week_sameday(self):
    from datetime import date
    FakeDate.today = classmethod(lambda cls: date(2011, 7, 3)) # July 3, 2011 is a Sunday
    new_day_of_week = DayOfWeek.objects.create()
    new_day_of_week.day = "SU"
    self.assertEquals(new_day_of_week.my_next_day_of_week(), date(2011, 7, 3))
</snippet></ROW><ROW><id>6582099</id><snippet># coding=utf-8

def removeUnicode():
    text = "hejsanäöåbadasd wodqpwdk"
    asciiText = ""
    for char in text:
        if(ord(char) &lt; 128):
            asciiText = asciiText + char

    return asciiText

import timeit
start = timeit.Timer("removeUnicode()", "from __main__ import removeUnicode")
print "Time taken: " + str(start.timeit())
</snippet></ROW><ROW><id>6582099</id><snippet>jd</snippet></ROW><ROW><id>6582099</id><snippet># coding=utf-8

def removeUnicode():
    text = u"hejsanäöåbadasd wodqpwdk"
    if(isinstance(text, str)):
        return str.decode('utf-8').encode("ascii", "ignore")
    else:
        return text.encode("ascii", "ignore")        

import timeit
start = timeit.Timer("removeUnicode()", "from __main__ import removeUnicode")
print "Time taken: " + str(start.timeit())
</snippet></ROW><ROW><id>6582099</id><snippet>str</snippet></ROW><ROW><id>6582099</id><snippet>computer:~ Ancide$ python test1.py
Time taken: 5.88719677925
</snippet></ROW><ROW><id>6582099</id><snippet>unicode</snippet></ROW><ROW><id>6582099</id><snippet>computer:~ Ancide$ python test1.py
Time taken: 7.21077990532
</snippet></ROW><ROW><id>6582099</id><snippet>str</snippet></ROW><ROW><id>6582099</id><snippet>computer:~ Ancide$ python test1.py
Time taken: 2.67580914497
</snippet></ROW><ROW><id>6582099</id><snippet>unicode</snippet></ROW><ROW><id>6582099</id><snippet>computer:~ Ancide$ python test1.py
Time taken: 1.740680933
</snippet></ROW><ROW><id>6582108</id><snippet>#Create custom form with specific queryset:
class CustomBarModelForm(forms.ModelForm):
    class Meta:
        model = Bar
    def __init__(self, *args, **kwargs):
        super(CustomBarModelForm, self).__init__(*args, **kwargs)
        self.fields['foo'].queryset = Foo.objects.filter(title__isnull=False)# or something else

# Use it in your modelAdmin
class BarAdmin(admin.ModelAdmin):
    form = CustomBarModelForm
</snippet></ROW><ROW><id>6582335</id><snippet>groups_list = User.objects.filter(userprofile__status__in=group_list).values_list('email',    flat=True)
</snippet></ROW><ROW><id>6582676</id><snippet>def run(self, setid=None, subtasks=None, **kwargs):

    if not setid or not subtasks:
        #Is the first time that I launch this task, I'm going to launch the subtasks
        …
        tasks = []
        for slice in slices:
            tasks.append(uploadTrackSlice.subtask((slice,folder_name)))

        job = TaskSet(tasks=tasks)
        task_set_result = job.apply_async()
        setid = task_set_result.taskset_id
        subtasks = [result.task_id for result in task_set_result.subtasks]
        self.retry(exc=Exception("Result not ready"), args=[setid,subtasks])

    #Is a retry than we just have to check the results        
    tasks_result = TaskSetResult(setid, map(AsyncResult,subtasks))
    if not tasks_result.ready():
        self.retry(exc=Exception("Result not ready"), args=[setid,subtasks])
    else:    
        if tasks_result.successful():
            return tasks_result.join()
        else:
            raise Exception("Some of the tasks was failing")
</snippet></ROW><ROW><id>6582872</id><snippet>time</snippet></ROW><ROW><id>6582872</id><snippet>import time
start = time.time()
# do something you want to time
elapsed = time.time() - start
</snippet></ROW><ROW><id>6582876</id><snippet>subsample()</snippet></ROW><ROW><id>6582876</id><snippet>zoom()</snippet></ROW><ROW><id>6582876</id><snippet>PhotoImage</snippet></ROW><ROW><id>6582876</id><snippet>scale_w = new_width/old_width
scale_h = new_height/old_height
photoImg.zoom(scale_w, scale_h)
</snippet></ROW><ROW><id>6583057</id><snippet>def do_request(on_success, on_interaction_needed, on_failure):
    """
    Submits the swoosh request, and awaits a response.

    If no user interaction is needed, calls on_success with a
    httplib.HTTPResponse object.

    If user interaction is needed, on_interaction_needed is
    called with a single string parameter.

    If the request failed, a ValueError is passed to on_failure
    """
    response = sumbit_request()
    if response.is_fine():
        on_success(response)
    elif response.is_partial()
        on_interaction_needed(response.message)
    else:
        on_failure(ValueError(response.message))
</snippet></ROW><ROW><id>6583057</id><snippet>Swoosh</snippet></ROW><ROW><id>6583057</id><snippet>Swoosh</snippet></ROW><ROW><id>6583157</id><snippet>in_the_forest</snippet></ROW><ROW><id>6583157</id><snippet>Duck</snippet></ROW><ROW><id>6583157</id><snippet>Duck</snippet></ROW><ROW><id>6583157</id><snippet>quack</snippet></ROW><ROW><id>6583157</id><snippet>feathers</snippet></ROW><ROW><id>6583157</id><snippet>Duck</snippet></ROW><ROW><id>6583157</id><snippet>swim</snippet></ROW><ROW><id>6583157</id><snippet>in_the_forest</snippet></ROW><ROW><id>6583157</id><snippet>Duck</snippet></ROW><ROW><id>6583157</id><snippet>Person</snippet></ROW><ROW><id>6583157</id><snippet>quack</snippet></ROW><ROW><id>6583157</id><snippet>feathers</snippet></ROW><ROW><id>6583157</id><snippet>Person</snippet></ROW><ROW><id>6583157</id><snippet>Duck</snippet></ROW><ROW><id>6583157</id><snippet>QuacksAndFeathers</snippet></ROW><ROW><id>6583157</id><snippet>Duck</snippet></ROW><ROW><id>6583157</id><snippet>in_the_forest</snippet></ROW><ROW><id>6583157</id><snippet>QuacksAndFeathers</snippet></ROW><ROW><id>6583157</id><snippet>Duck</snippet></ROW><ROW><id>6583157</id><snippet>Duck</snippet></ROW><ROW><id>6583157</id><snippet>in_the_forest</snippet></ROW><ROW><id>6583157</id><snippet>in_the_forest</snippet></ROW><ROW><id>6583157</id><snippet>Duck</snippet></ROW><ROW><id>6583157</id><snippet>game</snippet></ROW><ROW><id>6583157</id><snippet>Person</snippet></ROW><ROW><id>6583157</id><snippet>Duck</snippet></ROW><ROW><id>6583157</id><snippet>in_the_forest</snippet></ROW><ROW><id>6583157</id><snippet>Person</snippet></ROW><ROW><id>6583442</id><snippet># note: untested code

from django.db.models.signals import post_save
from django.contrib.auth.models import User

def email_new_user(sender, **kwargs):
    if kwargs["created"]:  # only for new users
        new_user = kwargs.["instance"]
        # send email to new_user.email ..

post_save.connect(email_new_user, sender=User)
</snippet></ROW><ROW><id>6583442</id><snippet>if kwargs["created"]:</snippet></ROW><ROW><id>6583522</id><snippet>url</snippet></ROW><ROW><id>6583522</id><snippet>str</snippet></ROW><ROW><id>6583635</id><snippet>with open('file') as f:
    w, h = [int(x) for x in f.readline().split()] # read first line
    array = []
    for line in f: # read rest of lines
        array.append([int(x) for x in line.split()])
</snippet></ROW><ROW><id>6583635</id><snippet>with open('file') as f:
    w, h = [int(x) for x in f.readline().split()]
    array = [[int(x) for x in line.split()] for line in f]
</snippet></ROW><ROW><id>6584198</id><snippet>op.add_option('-t', '--test', action='callback', callback=store_test, default='test',
    dest='test', help='test!', type='str')
</snippet></ROW><ROW><id>6584198</id><snippet>optparse.py</snippet></ROW><ROW><id>6584198</id><snippet>def takes_value(self):
    return self.type is not None

def _process_short_opts(self, rargs, values):
    [...]
        if option.takes_value():
            # Any characters left in arg?  Pretend they're the
            # next arg, and stop consuming characters of arg.
            if i &lt; len(arg):
                rargs.insert(0, arg[i:])
                stop = True

            nargs = option.nargs
            if len(rargs) &lt; nargs:
                if nargs == 1:
                    self.error(_("%s option requires an argument") % opt)
                else:
                    self.error(_("%s option requires %d arguments")
                               % (opt, nargs))
            elif nargs == 1:
                value = rargs.pop(0)
            else:
                value = tuple(rargs[0:nargs])
                del rargs[0:nargs]

        else:                       # option doesn't take a value
            value = None

        option.process(opt, value, values, self)
</snippet></ROW><ROW><id>6584325</id><snippet>{% if client %} {{client.user}} {% else %}   {% endif %}
</snippet></ROW><ROW><id>6584552</id><snippet>.so</snippet></ROW><ROW><id>6584552</id><snippet>foo (a directory)
foo.so
foomodule.so
foo.py
foo.pyc
</snippet></ROW><ROW><id>6584893</id><snippet>rstrip</snippet></ROW><ROW><id>6584893</id><snippet>my_string = my_string.rstrip('\\')
</snippet></ROW><ROW><id>6584901</id><snippet>'(?u)1\s*(\w*)\s*(&lt;.*$)'
</snippet></ROW><ROW><id>6584901</id><snippet>re.match(r, t, flags=re.U).group()
</snippet></ROW><ROW><id>6585177</id><snippet>&gt;&gt;&gt; A = ((ctypes.c_float * 10) * 10)
&gt;&gt;&gt; a = A()
&gt;&gt;&gt; a[5][5]
0.0
</snippet></ROW><ROW><id>6585821</id><snippet>edit_post</snippet></ROW><ROW><id>6585821</id><snippet>def edit_post(request):
    ...
    if authenticated_userid(request) != author:
        raise pyramid.httpexceptions.HTTPForbidden("You are not this post's author.")
</snippet></ROW><ROW><id>6585855</id><snippet>class FileDialog(QtGui.QFileDialog):
    def __init__(self, *args):
        QtGui.QFileDialog.__init__(self, *args)
        self.setOption(self.DontUseNativeDialog, True)
        self.setFileMode(self.ExistingFiles)
        btns = self.findChildren(QtGui.QPushButton)
        self.openBtn = [x for x in btns if 'open' in str(x.text()).lower()][0]
        self.openBtn.clicked.disconnect()
        self.openBtn.clicked.connect(self.openClicked)
        self.tree = self.findChild(QtGui.QTreeView)

    def openClicked(self):
        inds = self.tree.selectionModel().selectedIndexes()
        files = []
        for i in inds:
            if i.column() == 0:
                files.append(os.path.join(str(self.directory().absolutePath()),str(i.data().toString())))
        self.selectedFiles = files
        self.hide()

    def filesSelected(self):
        return self.selectedFiles
</snippet></ROW><ROW><id>6586087</id><snippet>to_num_list</snippet></ROW><ROW><id>6586087</id><snippet>'0-6 2 3-6'</snippet></ROW><ROW><id>6586087</id><snippet>def included_numbers(s):
    out = []
    for chunk in s.split():
        if '-' in chunk:
            f, t = chunk.split('-')
            out.extend(range(int(f), int(t)+1))
        else:
            out.append(int(chunk))
    return out
</snippet></ROW><ROW><id>6586521</id><snippet>myList[0]</snippet></ROW><ROW><id>6586521</id><snippet>('A', 1)</snippet></ROW><ROW><id>6586521</id><snippet>myList = [('A',1),('B',2),...]</snippet></ROW><ROW><id>6586521</id><snippet>dict(myList)</snippet></ROW><ROW><id>6586715</id><snippet>with open('file', 'r') as f:
    lines = f.readlines()
</snippet></ROW><ROW><id>6586715</id><snippet>lines = [line.split() for line in lines]
</snippet></ROW><ROW><id>6586715</id><snippet>&gt;&gt;&gt; with open('a_text_file.txt', 'r') as f:
...     text = f.read()
... 
&gt;&gt;&gt; text
'the first line of the text file\nthe second line -- broken by a symbol\nthe third line of the text file\nsome other data\n'
</snippet></ROW><ROW><id>6586715</id><snippet>&gt;&gt;&gt; text.splitlines()
['the first line of the text file', 'the second line -- broken by a symbol', 'the third line of the text file', 'some other data']
</snippet></ROW><ROW><id>6586715</id><snippet>splitlines</snippet></ROW><ROW><id>6586715</id><snippet>splitlines</snippet></ROW><ROW><id>6586715</id><snippet>\n</snippet></ROW><ROW><id>6586715</id><snippet>&gt;&gt;&gt; lines = text.splitlines()
</snippet></ROW><ROW><id>6586715</id><snippet>&gt;&gt;&gt; lines[0]
'the first line of the text file'
</snippet></ROW><ROW><id>6586715</id><snippet>0</snippet></ROW><ROW><id>6586715</id><snippet>len(lines) - 1</snippet></ROW><ROW><id>6586715</id><snippet>&gt;&gt;&gt; lines[2]
'the third line of the text file'
&gt;&gt;&gt; lines[1]
'the second line -- broken by a symbol'
</snippet></ROW><ROW><id>6586715</id><snippet>&gt;&gt;&gt; lines[1].split('--')
['the second line ', ' broken by a symbol']
</snippet></ROW><ROW><id>6586715</id><snippet>split</snippet></ROW><ROW><id>6586715</id><snippet>splitlines</snippet></ROW><ROW><id>6586715</id><snippet>&gt;&gt;&gt; lines[1][4]
's'
</snippet></ROW><ROW><id>6586715</id><snippet>&gt;&gt;&gt; lines[1][4:10]
'second'
</snippet></ROW><ROW><id>6586715</id><snippet>&gt;&gt;&gt; lines[1].index('broken')
19
</snippet></ROW><ROW><id>6586715</id><snippet>index</snippet></ROW><ROW><id>6586715</id><snippet>find</snippet></ROW><ROW><id>6586715</id><snippet>&gt;&gt;&gt; lines[1][19:]
'broken by a symbol'
</snippet></ROW><ROW><id>6586715</id><snippet>&gt;&gt;&gt; lines[1][:19]
'the second line -- '
</snippet></ROW><ROW><id>6586715</id><snippet>&gt;&gt;&gt; [line for line in text.splitlines() if 'line' in line]
['the first line of the text file', 'the second line -- broken by a symbol', 'the third line of the text file']
</snippet></ROW><ROW><id>6586715</id><snippet>in</snippet></ROW><ROW><id>6586715</id><snippet>True</snippet></ROW><ROW><id>6586715</id><snippet>'line'</snippet></ROW><ROW><id>6586787</id><snippet>@register.inclusion_tag('registration/login.html', takes_context=True)
def get_login(context):
    ...
    return {'formLogin':  mark_safe(AuthenticationForm())}
</snippet></ROW><ROW><id>6586787</id><snippet>{% load mytags  %}{% get_login  %}
</snippet></ROW><ROW><id>6586792</id><snippet>import csv, sys
filename = 'some.csv'
with open(filename, 'rb') as f:
    reader = csv.reader(f)
    try:
        for row in reader:
            print row
    except csv.Error, e:
        sys.exit('file %s, line %d: %s' % (filename, reader.line_num, e))
</snippet></ROW><ROW><id>6586899</id><snippet>scipy.cluster.vq.kmeans2</snippet></ROW><ROW><id>6586899</id><snippet>k</snippet></ROW><ROW><id>6586899</id><snippet>numpy.ndarray</snippet></ROW><ROW><id>6586899</id><snippet>minit='matrix'</snippet></ROW><ROW><id>6586899</id><snippet>initPoints = numpy.array([[10,20,30],[5,15,25],[100,150,200]])
</snippet></ROW><ROW><id>6587062</id><snippet>python setup.py install</snippet></ROW><ROW><id>6587411</id><snippet>import</snippet></ROW><ROW><id>6587439</id><snippet>pseq</snippet></ROW><ROW><id>6587439</id><snippet>par</snippet></ROW><ROW><id>6587648</id><snippet>tempfile</snippet></ROW><ROW><id>6587648</id><snippet>shutil.copy2</snippet></ROW><ROW><id>6587648</id><snippet>import tempfile, shutil, os
def create_temporary_copy(path):
    temp_dir = tempfile.gettempdir()
    temp_path = os.path.join(temp_dir, 'temp_file_name')
    shutil.copy2(path, temp_path)
    return temp_path
</snippet></ROW><ROW><id>6587982</id><snippet>__getattribute__</snippet></ROW><ROW><id>6587982</id><snippet>__getattr__</snippet></ROW><ROW><id>6587982</id><snippet>class Test(object):
    def __getattribute__(self, name):
        attr = super(Test, self).__getattribute__(name)
        if callable(attr):
            return attr()
        return attr
    def f(self):
        print 'f'
        return self
    def g(self):
        print 'g'
        return self
    def h(self, x):
        print x
        return self

t = Test()
t.f.g # Works fine
t.f().g # Fails - the parens aren't optional, they must be left off now
t.f.g.h(1) # Fails - unable to provide an argument
</snippet></ROW><ROW><id>6588064</id><snippet>[]</snippet></ROW><ROW><id>6588064</id><snippet>{}</snippet></ROW><ROW><id>6588064</id><snippet>{ keyName1 : value1, keyName2: value2, keyName3: [val1, val2, val3] }
</snippet></ROW><ROW><id>6588142</id><snippet>QThreadPool</snippet></ROW><ROW><id>6588142</id><snippet>QRunnable</snippet></ROW><ROW><id>6588142</id><snippet>QRunnable</snippet></ROW><ROW><id>6588142</id><snippet>QThreadPool</snippet></ROW><ROW><id>6588142</id><snippet>maxThreadCount</snippet></ROW><ROW><id>6588142</id><snippet>autoDelete</snippet></ROW><ROW><id>6588142</id><snippet>QThreadPool.start()</snippet></ROW><ROW><id>6588142</id><snippet>QThreadPool</snippet></ROW><ROW><id>6588142</id><snippet>.textChanged</snippet></ROW><ROW><id>6588142</id><snippet>QTimer</snippet></ROW><ROW><id>6588142</id><snippet>.timeout</snippet></ROW><ROW><id>6588142</id><snippet>.setText()</snippet></ROW><ROW><id>6588560</id><snippet>setup</snippet></ROW><ROW><id>6588560</id><snippet>setup(
  # ...
  namespace_packages  = ["root"]
)
</snippet></ROW><ROW><id>6588584</id><snippet># suppose these are publication dates
&gt;&gt;&gt; pd0 = "04-09-2011"      
&gt;&gt;&gt; pd1 = "17-05-2010"
# convert them to python datetime instances, e.g., 
&gt;&gt;&gt; pd0 = datetime.strptime(pd0, "%d-%m-%Y")
# gather them in a python list and then call sort on that list:
&gt;&gt;&gt; pd_all = [pd0, pd1, pd2, pd3, ...]
&gt;&gt;&gt; pd_all.sort()
# 'sort' will perform an in-place sort on the list of datetime objects,
# such that the eariest date is at index 0, etc.
# now the first item in that list is of course the earliest publication date
&gt;&gt;&gt; pd_all[0]
datetime.datetime(2010, 5, 17, 0, 0)
# express all dates except the earliest one as the absolute differenece in days
# from that earliest date
&gt;&gt;&gt; td0 = pd_all[1] - pd_all[0]           # t0 is a timedelta object
&gt;&gt;&gt; td0
datetime.timedelta(475)     
# convert the time deltas to integers:
&gt;&gt;&gt; fnx = lambda v : int(str(v).split()[0])
&gt;&gt;&gt; time_deltas = [td0,....]
# d is jsut a python list of integers representing number of days from a common baseline date
&gt;&gt;&gt; d = map(fnx, time_deltas)    
</snippet></ROW><ROW><id>6588602</id><snippet>import wx

class MyForm(wx.Frame):

    def __init__(self):
        wx.Frame.__init__(self, None, title="Tutorial")

        self.eventDict = {}
        for name in dir(wx):
            if name.startswith('EVT_'):
                evt = getattr(wx, name)
                if isinstance(evt, wx.PyEventBinder):
                    self.eventDict[evt.typeId] = name

        # Add a panel so it looks the correct on all platforms
        panel = wx.Panel(self, wx.ID_ANY)
        btn = wx.Button(panel, wx.ID_ANY, "Get POS")

        btn.Bind(wx.EVT_BUTTON, self.onEvent)
        panel.Bind(wx.EVT_LEFT_DCLICK, self.onEvent)
        panel.Bind(wx.EVT_RIGHT_DOWN, self.onEvent)


    def onEvent(self, event):
        """
        Print out what event was fired
        """
        evt_id = event.GetEventType()
        print self.eventDict[evt_id]


# Run the program
if __name__ == "__main__":
    app = wx.App(False)
    frame = MyForm().Show()
    app.MainLoop()
</snippet></ROW><ROW><id>6589133</id><snippet>script.py</snippet></ROW><ROW><id>6589133</id><snippet>jug execute script.py</snippet></ROW><ROW><id>6589133</id><snippet>python script.py</snippet></ROW><ROW><id>6589133</id><snippet>jug execute script.py &amp;
jug execute script.py &amp;
</snippet></ROW><ROW><id>6589133</id><snippet>jug status script.py
</snippet></ROW><ROW><id>6589272</id><snippet>o*?bar</snippet></ROW><ROW><id>6589272</id><snippet>oobar</snippet></ROW><ROW><id>6589272</id><snippet>foobar</snippet></ROW><ROW><id>6589272</id><snippet>.??</snippet></ROW><ROW><id>6589272</id><snippet>&lt;</snippet></ROW><ROW><id>6589311</id><snippet>for i in pixel_list:
    if Handler.objects.filter(pixel=i.id).filter(user=request.user):
        i.vote = True
    else:
        i.vote = False
</snippet></ROW><ROW><id>6589393</id><snippet>’</snippet></ROW><ROW><id>6589393</id><snippet>import_transform: unicode</snippet></ROW><ROW><id>6589440</id><snippet>spawnProcess</snippet></ROW><ROW><id>6589440</id><snippet>python setup.py build_ext -i</snippet></ROW><ROW><id>6589440</id><snippet>popen</snippet></ROW><ROW><id>6589440</id><snippet>subprocess</snippet></ROW><ROW><id>6589440</id><snippet>spawnProcess</snippet></ROW><ROW><id>6589588</id><snippet>cursor.execute('INSERT INTO media_files (%s) VALUES (%%s, %%s, %%s, %%s,   ...)' % ','.join(fieldlist), valuelist)
</snippet></ROW><ROW><id>6589588</id><snippet>sql = 'INSERT INTO media_files (%s) VALUES (%%s, %%s, %%s, %%s,   ...)' % ','.join(fieldlist)
cursor.execute(sql, valuelist)
</snippet></ROW><ROW><id>6589628</id><snippet>python C:\path\to\script\script.py</snippet></ROW><ROW><id>6589628</id><snippet>Start in:</snippet></ROW><ROW><id>6589628</id><snippet>Start in:</snippet></ROW><ROW><id>6589628</id><snippet>os.getcwd()</snippet></ROW><ROW><id>6589628</id><snippet>Start in:</snippet></ROW><ROW><id>6589628</id><snippet>.</snippet></ROW><ROW><id>6589676</id><snippet>client_id</snippet></ROW><ROW><id>6589676</id><snippet>send_message</snippet></ROW><ROW><id>6589676</id><snippet>channel_token</snippet></ROW><ROW><id>6589676</id><snippet>channel.send_message('aosasdf123', message)
</snippet></ROW><ROW><id>6589839</id><snippet>defaultdict</snippet></ROW><ROW><id>6589839</id><snippet>defaultdict</snippet></ROW><ROW><id>6589839</id><snippet>Help on class defaultdict in module collections:

class defaultdict(__builtin__.dict)
 |  defaultdict(default_factory) --&gt; dict with default factory
 |  
 |  The default factory is called without arguments to produce
 |  a new value when a key is not present, in __getitem__ only.
 |  A defaultdict compares equal to a dict with the same items.
 |  
</snippet></ROW><ROW><id>6589839</id><snippet>help(type(collections.defaultdict()))</snippet></ROW><ROW><id>6589839</id><snippet>{}.setdefault</snippet></ROW><ROW><id>6590068</id><snippet>apt-get source tzdata</snippet></ROW><ROW><id>6590198</id><snippet>import pickle
class MyPickler (pickle.Pickler):
    def save(self, obj):
        print 'pickling object', obj, 'of type', type(obj)
        pickle.Pickler.save(self, obj)
</snippet></ROW><ROW><id>6590198</id><snippet># Python 3.x
import pickle
class MyPickler (pickle._Pickler):
    def save(self, obj):
        print ('pickling object  {0} of type {1}'.format(obj, type(obj))
        pickle._Pickler.save(self, obj)
</snippet></ROW><ROW><id>6590283</id><snippet>AttributeError</snippet></ROW><ROW><id>6590283</id><snippet>AttributeError</snippet></ROW><ROW><id>6590283</id><snippet>Cow</snippet></ROW><ROW><id>6590283</id><snippet>Duck</snippet></ROW><ROW><id>6590283</id><snippet>Frog</snippet></ROW><ROW><id>6590309</id><snippet>index</snippet></ROW><ROW><id>6590309</id><snippet>Trailcrest.FireAutoHelp = c.execute("""select fireautohelp 
                                         from roster 
                                        where `index` = ?;""", (AI,) ).fetchall()
</snippet></ROW><ROW><id>6590344</id><snippet>if __name__ != '__main__':
    route = application.route

@route('/')
def index():
    index_temp = lookup.get_template('index.html')
    return index_temp.render(site=site, corperate=corperate, copyright=copyright)
</snippet></ROW><ROW><id>6590344</id><snippet>application</snippet></ROW><ROW><id>6590344</id><snippet>from application import route</snippet></ROW><ROW><id>6590344</id><snippet>if</snippet></ROW><ROW><id>6590415</id><snippet>"E:\\search_replace\\srtest.txt"</snippet></ROW><ROW><id>6590415</id><snippet>"old-E:\\search_replace\\srtest.txt"</snippet></ROW><ROW><id>6590415</id><snippet>"temp-E:\\search_replace\\srtest.txt"</snippet></ROW><ROW><id>6590415</id><snippet>oldFileName  = "{}\\old-{}".format(*os.path.split(fileToSearch))
tempFileName = "{}\\temp-{}".format(*os.path.split(fileToSearch))
</snippet></ROW><ROW><id>6590632</id><snippet>&gt;&gt;&gt; u"\N{NO-BREAK SPACE}"
u'\xa0'
</snippet></ROW><ROW><id>6590725</id><snippet>largest = None
i = 1024

for k in range(i):
    a = (k ** 4 - 74 * k ** 2 + 173) % 1000033
    if not largest or largest[1] &lt; a:
        largest = (k, a)

print(largest)
</snippet></ROW><ROW><id>6590725</id><snippet>(2, 999926)
</snippet></ROW><ROW><id>6590725</id><snippet>i = 1048576</snippet></ROW><ROW><id>6590725</id><snippet>(156865, 1000032L)
</snippet></ROW><ROW><id>6590725</id><snippet>&lt;</snippet></ROW><ROW><id>6590725</id><snippet>&lt;=</snippet></ROW><ROW><id>6590725</id><snippet>(843168, 1000032L)
</snippet></ROW><ROW><id>6590860</id><snippet>next</snippet></ROW><ROW><id>6590860</id><snippet>next(d for d in lst if d['name'] == 'jerry')
</snippet></ROW><ROW><id>6590929</id><snippet>sizer.Add(SampleCollapsiblePane(self.main_panel, label = str(x)), 1)
</snippet></ROW><ROW><id>6590929</id><snippet>SampleCollapsiblePane</snippet></ROW><ROW><id>6590929</id><snippet>def __init__(...):
    ...
    self.Bind(wx.EVT_COLLAPSIBLEPANE_CHANGED, self.on_change)
def on_change(self, event):
    self.GetParent().Layout()
</snippet></ROW><ROW><id>6590986</id><snippet>import boto

#credentials stored in environment AWS_ACCESS_KEY_ID and AWS_SECRET_ACCESS_KEY
s3 = boto.connect_s3()

#bucket name MUST follow dns guidelines
new_bucket_name = "stream.example.com"
bucket = s3.create_bucket(new_bucket_name)

object_name = "video.mp4"
key = bucket.new_key(object_name)
key.set_contents_from_filename(object_name)
</snippet></ROW><ROW><id>6590986</id><snippet>import boto

#credentials stored in environment AWS_ACCESS_KEY_ID and AWS_SECRET_ACCESS_KEY
cf = boto.connect_cloudfront()

oai = cf.create_origin_access_identity(comment='New identity for secure videos')

#We need the following two values for later steps:
print("Origin Access Identity ID: %s" % oai.id)
print("Origin Access Identity S3CanonicalUserId: %s" % oai.s3_user_id)
</snippet></ROW><ROW><id>6590986</id><snippet>import boto

#credentials stored in environment AWS_ACCESS_KEY_ID and AWS_SECRET_ACCESS_KEY
s3 = boto.connect_s3()

bucket_name = "stream.example.com"
bucket = s3.get_bucket(bucket_name)

object_name = "video.mp4"
key = bucket.get_key(object_name)

#Now add read permission to our new s3 account
s3_canonical_user_id = "&lt;your S3CanonicalUserID from above&gt;"
key.add_user_grant("READ", s3_canonical_user_id)
</snippet></ROW><ROW><id>6590986</id><snippet>import boto
from boto.cloudfront.distribution import DistributionConfig
from boto.cloudfront.exception import CloudFrontServerError

import re

def get_domain_from_xml(xml):
    results = re.findall("&lt;DomainName&gt;([^&lt;]+)&lt;/DomainName&gt;", xml)
    return results[0]

#custom class to hack this until boto v2.0 is released
class HackedStreamingDistributionConfig(DistributionConfig):

    def __init__(self, connection=None, origin='', enabled=False,
                 caller_reference='', cnames=None, comment='',
                 trusted_signers=None):
        DistributionConfig.__init__(self, connection=connection,
                                    origin=origin, enabled=enabled,
                                    caller_reference=caller_reference,
                                    cnames=cnames, comment=comment,
                                    trusted_signers=trusted_signers)

    #override the to_xml() function
    def to_xml(self):
        s = '&lt;?xml version="1.0" encoding="UTF-8"?&gt;\n'
        s += '&lt;StreamingDistributionConfig xmlns="http://cloudfront.amazonaws.com/doc/2010-07-15/"&gt;\n'

        s += '  &lt;S3Origin&gt;\n'
        s += '    &lt;DNSName&gt;%s&lt;/DNSName&gt;\n' % self.origin
        if self.origin_access_identity:
            val = self.origin_access_identity
            s += '    &lt;OriginAccessIdentity&gt;origin-access-identity/cloudfront/%s&lt;/OriginAccessIdentity&gt;\n' % val
        s += '  &lt;/S3Origin&gt;\n'


        s += '  &lt;CallerReference&gt;%s&lt;/CallerReference&gt;\n' % self.caller_reference
        for cname in self.cnames:
            s += '  &lt;CNAME&gt;%s&lt;/CNAME&gt;\n' % cname
        if self.comment:
            s += '  &lt;Comment&gt;%s&lt;/Comment&gt;\n' % self.comment
        s += '  &lt;Enabled&gt;'
        if self.enabled:
            s += 'true'
        else:
            s += 'false'
        s += '&lt;/Enabled&gt;\n'
        if self.trusted_signers:
            s += '&lt;TrustedSigners&gt;\n'
            for signer in self.trusted_signers:
                if signer == 'Self':
                    s += '  &lt;Self/&gt;\n'
                else:
                    s += '  &lt;AwsAccountNumber&gt;%s&lt;/AwsAccountNumber&gt;\n' % signer
            s += '&lt;/TrustedSigners&gt;\n'
        if self.logging:
            s += '&lt;Logging&gt;\n'
            s += '  &lt;Bucket&gt;%s&lt;/Bucket&gt;\n' % self.logging.bucket
            s += '  &lt;Prefix&gt;%s&lt;/Prefix&gt;\n' % self.logging.prefix
            s += '&lt;/Logging&gt;\n'
        s += '&lt;/StreamingDistributionConfig&gt;\n'

        return s

    def create(self):
        response = self.connection.make_request('POST',
            '/%s/%s' % ("2010-11-01", "streaming-distribution"),
            {'Content-Type' : 'text/xml'},
            data=self.to_xml())

        body = response.read()
        if response.status == 201:
            return body
        else:
            raise CloudFrontServerError(response.status, response.reason, body)


cf = boto.connect_cloudfront()

s3_dns_name = "stream.example.com.s3.amazonaws.com"
comment = "example streaming distribution"
oai = "&lt;OAI ID from step 2 above like E23KRHS6GDUF5L&gt;"

#Create a distribution that does NOT need signed URLS
hsd = HackedStreamingDistributionConfig(connection=cf, origin=s3_dns_name, comment=comment, enabled=True)
hsd.origin_access_identity = oai
basic_dist = hsd.create()
print("Distribution with basic URLs: %s" % get_domain_from_xml(basic_dist))

#Create a distribution that DOES need signed URLS
hsd = HackedStreamingDistributionConfig(connection=cf, origin=s3_dns_name, comment=comment, enabled=True)
hsd.origin_access_identity = oai
#Add some required signers (Self means your own account)
hsd.trusted_signers = ['Self']
signed_dist = hsd.create()
print("Distribution with signed URLs: %s" % get_domain_from_xml(signed_dist))
</snippet></ROW><ROW><id>6590986</id><snippet>from M2Crypto import EVP
import base64
import time

def aws_url_base64_encode(msg):
    msg_base64 = base64.b64encode(msg)
    msg_base64 = msg_base64.replace('+', '-')
    msg_base64 = msg_base64.replace('=', '_')
    msg_base64 = msg_base64.replace('/', '~')
    return msg_base64

def sign_string(message, priv_key_string):
    key = EVP.load_key_string(priv_key_string)
    key.reset_context(md='sha1')
    key.sign_init()
    key.sign_update(str(message))
    signature = key.sign_final()
    return signature

def create_url(url, encoded_signature, key_pair_id, expires):
    signed_url = "%(url)s?Expires=%(expires)s&amp;Signature=%(encoded_signature)s&amp;Key-Pair-Id=%(key_pair_id)s" % {
            'url':url,
            'expires':expires,
            'encoded_signature':encoded_signature,
            'key_pair_id':key_pair_id,
            }
    return signed_url

def get_canned_policy_url(url, priv_key_string, key_pair_id, expires):
    #we manually construct this policy string to ensure formatting matches signature
    canned_policy = '{"Statement":[{"Resource":"%(url)s","Condition":{"DateLessThan":{"AWS:EpochTime":%(expires)s}}}]}' % {'url':url, 'expires':expires}

    #now base64 encode it (must be URL safe)
    encoded_policy = aws_url_base64_encode(canned_policy)
    #sign the non-encoded policy
    signature = sign_string(canned_policy, priv_key_string)
    #now base64 encode the signature (URL safe as well)
    encoded_signature = aws_url_base64_encode(signature)

    #combine these into a full url
    signed_url = create_url(url, encoded_signature, key_pair_id, expires);

    return signed_url

def encode_query_param(resource):
    enc = resource
    enc = enc.replace('?', '%3F')
    enc = enc.replace('=', '%3D')
    enc = enc.replace('&amp;', '%26')
    return enc


#Set parameters for URL
key_pair_id = "APKAIAZCZRKVIO4BQ" #from the AWS accounts page
priv_key_file = "cloudfront-pk.pem" #your private keypair file
resource = 'video.mp4' #your resource (just object name for streaming videos)
expires = int(time.time()) + 300 #5 min

#Create the signed URL
priv_key_string = open(priv_key_file).read()
signed_url = get_canned_policy_url(resource, priv_key_string, key_pair_id, expires)

#Flash player doesn't like query params so encode them
enc_url = encode_query_param(signed_url)
print(enc_url)
</snippet></ROW><ROW><id>6590986</id><snippet>video.mp4%3FExpires%3D1309979985%26Signature%3DMUNF7pw1689FhMeSN6JzQmWNVxcaIE9mk1x~KOudJky7anTuX0oAgL~1GW-ON6Zh5NFLBoocX3fUhmC9FusAHtJUzWyJVZLzYT9iLyoyfWMsm2ylCDBqpy5IynFbi8CUajd~CjYdxZBWpxTsPO3yIFNJI~R2AFpWx8qp3fs38Yw_%26Key-Pair-Id%3DAPKAIAZRKVIO4BQ
</snippet></ROW><ROW><id>6590986</id><snippet>var so_canned = new SWFObject('http://location.domname.com/~jvngkhow/player.swf','mpl','640','360','9');
    so_canned.addParam('allowfullscreen','true');
    so_canned.addParam('allowscriptaccess','always');
    so_canned.addParam('wmode','opaque');
    so_canned.addVariable('file','video.mp4%3FExpires%3D1309979985%26Signature%3DMUNF7pw1689FhMeSN6JzQmWNVxcaIE9mk1x~KOudJky7anTuX0oAgL~1GW-ON6Zh5NFLBoocX3fUhmC9FusAHtJUzWyJVZLzYT9iLyoyfWMsm2ylCDBqpy5IynFbi8CUajd~CjYdxZBWpxTsPO3yIFNJI~R2AFpWx8qp3fs38Yw_%26Key-Pair-Id%3DAPKAIAZRKVIO4BQ');
    so_canned.addVariable('streamer','rtmp://s3nzpoyjpct.cloudfront.net/cfx/st');
    so_canned.write('canned');
</snippet></ROW><ROW><id>6591221</id><snippet>lines = [
"0.30    28.30    31.90",
"0.30    28.30    31.90",
"0.30    28.20    31.90",
"0.30    28.20    31.90",
"0.40    28.20    32.00",
"0.40    28.00    32.00",
"0.50    28.00    31.90",
"0.60    28.00    32.00",
"0.70    27.90    32.00",
"0.60    27.90    32.10"
]

dict = {}
for line in lines:
    depth, temp, salinity = map(float, line.split())
    old = (0,0,0)
    if depth in dict: old = dict[depth]
    dict[depth] = (old[0]+1, old[1]+temp, old[2]+salinity)

for key in dict:
    tri = dict[key]
    print(str(key) +"   "+str(tri[1]/tri[0])+"   "+str(tri[2]/tri[0]))
</snippet></ROW><ROW><id>6591232</id><snippet>WSGIDaemonProcess khdx_wsgi user=galdosd group=galdosd maximum-requests=10000
WSGIScriptAlias /khdx /home/galdosd/khdxweb/rel/khdx/apache/django.wsgi
&lt;Location /khdx&gt;
WSGIProcessGroup khdx_wsgi
&lt;/Location&gt;

WSGIDaemonProcess sauron_wsgi user=galdosd group=galdosd maximum-requests=10000
WSGIScriptAlias /sauron /home/galdosd/finalsauronweb/django-root/apache/django.wsgi
&lt;Location /sauron&gt;
WSGIProcessGroup sauron_wsgi
&lt;/Location&gt;
</snippet></ROW><ROW><id>6591661</id><snippet>next_objs = Media.objects.filter(id__gt=image.id).order_by('id')[:2]
prev_objs = Media.objects.filter(id__lt=image.id).order_by('-id')[:2]
</snippet></ROW><ROW><id>6591826</id><snippet>()</snippet></ROW><ROW><id>6591826</id><snippet>someobj.somemeth()
</snippet></ROW><ROW><id>6591867</id><snippet>listA</snippet></ROW><ROW><id>6591867</id><snippet>Queue</snippet></ROW><ROW><id>6591867</id><snippet> while len(listA):
     element = listA.pop()
     #do something with element
     listB.add(element)
</snippet></ROW><ROW><id>6591867</id><snippet>listA</snippet></ROW><ROW><id>6592501</id><snippet>wx.EVT_COLLAPSIBLEPANE_CHANGED</snippet></ROW><ROW><id>6592501</id><snippet>import wx

class SampleCollapsiblePane(wx.CollapsiblePane):
    def __init__(self, *args, **kwargs):
        wx.CollapsiblePane.__init__(self,*args,**kwargs)
        sizer = wx.BoxSizer(wx.VERTICAL)

        for x in range(5):
            sizer.Add(wx.Button(self.GetPane(), label = str(x)))

        self.GetPane().SetSizer(sizer)
        self.Bind(wx.EVT_COLLAPSIBLEPANE_CHANGED, self.on_change)

    def on_change(self, event):
        self.GetParent().Layout()

class Main_Frame(wx.Frame):
    def __init__(self, *args, **kwargs):
        wx.Frame.__init__(self, *args, **kwargs)

        self.main_panel = wx.Panel(self)
        sizer = wx.BoxSizer(wx.VERTICAL)

        for x in range(5):
            sizer.Add(SampleCollapsiblePane(self.main_panel, label = str(x)), 0)

        self.main_panel.SetSizer(sizer)


class SampleApp(wx.App):
    def OnInit(self):
        frame = Main_Frame(None, title = "Sample App")
        frame.Show(True)
        frame.Centre()
        return True

def main():
    app = SampleApp(0)
    app.MainLoop()

if __name__ == "__main__":
    main()
</snippet></ROW><ROW><id>6592534</id><snippet>dump</snippet></ROW><ROW><id>6592534</id><snippet>load</snippet></ROW><ROW><id>6592534</id><snippet>pickle.dump(boolean, open("filename.pkl", "w"))</snippet></ROW><ROW><id>6592534</id><snippet>boolean = pickle.load(open("filename.pkl", "r"))</snippet></ROW><ROW><id>6593085</id><snippet>wikiobj = wiki.Wiki("http://en.wikipedia.org/w/api.php")
wikipage = page.Page(wikiobj, title="Some_Title")
</snippet></ROW><ROW><id>6593085</id><snippet>api.php</snippet></ROW><ROW><id>6593085</id><snippet>__init__(self, site, title=False, check=True, followRedir=True, section=False, sectionnumber=False, pageid=False, namespace=False)
</snippet></ROW><ROW><id>6593085</id><snippet>url</snippet></ROW><ROW><id>6593158</id><snippet>class USpider(BaseSpider):
    """my spider. """

    start_urls = ['http://www.amazon.com/s/?url=search-alias%3Dapparel&amp;sort=relevance-fs-browse-rank']
    allowed_domains = ['amazon.com']

    def parse(self, response):
        '''Parse main category search page and extract subcategory search link.'''
        self.log('Downloaded category search page.', log.DEBUG)
        if response.meta['depth'] &gt; 5:
            self.log('Categories depth limit reached (recursive links?). Stopping further following.', log.WARNING)

        hxs = HtmlXPathSelector(response)
        subcategories = hxs.select("//div[@id='refinements']/*[starts-with(.,'Department')]/following-sibling::ul[1]/li/a[span[@class='refinementLink']]/@href").extract()
        for subcategory in subcategories:
            subcategorySearchLink = urlparse.urljoin(response.url, subcategorySearchLink)
            yield Request(subcategorySearchLink, callback = self.parseSubcategory)

    def parseSubcategory(self, response):
        '''Parse subcategory search page and extract item links.'''
        hxs = HtmlXPathSelector(response)

        for itemLink in hxs.select('//a[@class="title"]/@href').extract():
            itemLink = urlparse.urljoin(response.url, itemLink)
            self.log('Requesting item page: ' + itemLink, log.DEBUG)
            yield Request(itemLink, callback = self.parseItem)

        try:
            nextPageLink = hxs.select("//a[@id='pagnNextLink']/@href").extract()[0]
            nextPageLink = urlparse.urljoin(response.url, nextPageLink)
            self.log('\nGoing to next search page: ' + nextPageLink + '\n', log.DEBUG)
            yield Request(nextPageLink, callback = self.parseSubcategory)
        except:
            self.log('Whole category parsed: ' + categoryPath, log.DEBUG)

    def parseItem(self, response):
        '''Parse item page and extract product info.'''

        hxs = HtmlXPathSelector(response)
        item = UItem()

        item['brand'] = self.extractText("//div[@class='buying']/span[1]/a[1]", hxs)
        item['title'] = self.extractText("//span[@id='btAsinTitle']", hxs)
        ...
</snippet></ROW><ROW><id>6593256</id><snippet>pdfnup</snippet></ROW><ROW><id>6593256</id><snippet>pdfnup --nup 8x4 --outfile output.pdf input.pdf
</snippet></ROW><ROW><id>6593427</id><snippet>start_urls</snippet></ROW><ROW><id>6593427</id><snippet>start_requests</snippet></ROW><ROW><id>6593427</id><snippet>parse</snippet></ROW><ROW><id>6593427</id><snippet>parse</snippet></ROW><ROW><id>6593427</id><snippet>start_requests</snippet></ROW><ROW><id>6593427</id><snippet>meta</snippet></ROW><ROW><id>6593427</id><snippet>priority</snippet></ROW><ROW><id>6593427</id><snippet>parse</snippet></ROW><ROW><id>6593427</id><snippet>priority</snippet></ROW><ROW><id>6593427</id><snippet>item</snippet></ROW><ROW><id>6593427</id><snippet>start_urls</snippet></ROW><ROW><id>6593427</id><snippet>parse</snippet></ROW><ROW><id>6593427</id><snippet>parse</snippet></ROW><ROW><id>6593475</id><snippet>find()</snippet></ROW><ROW><id>6593475</id><snippet>BA</snippet></ROW><ROW><id>6593475</id><snippet>C</snippet></ROW><ROW><id>6593475</id><snippet>CBA</snippet></ROW><ROW><id>6593475</id><snippet>C</snippet></ROW><ROW><id>6593475</id><snippet>B</snippet></ROW><ROW><id>6593475</id><snippet>find()</snippet></ROW><ROW><id>6593475</id><snippet>True</snippet></ROW><ROW><id>6593475</id><snippet>BA</snippet></ROW><ROW><id>6593475</id><snippet>#!/usr/bin/env python
# -*- coding: utf-8  -*-

import sys
from PyQt4.QtCore import QObject, SIGNAL
from PyQt4.QtGui import QApplication, QTextEdit, QTextDocument

app = QApplication(sys.argv)

def findText():
    flag = QTextDocument.FindBackward
    print(textEdit.toPlainText(), textEdit.find('A', flag))

textEdit = QTextEdit()
textEdit.show()
QObject.connect(textEdit, SIGNAL('textChanged()'), findText)
sys.exit(app.exec_())
</snippet></ROW><ROW><id>6594009</id><snippet>type(my_set)
&gt;&gt;&gt; &lt;type 'list'&gt;
</snippet></ROW><ROW><id>6594009</id><snippet>my_set = set([1,2,3,4])
my_list = list(my_set)
print my_list
&gt;&gt; [1, 2, 3, 4]
</snippet></ROW><ROW><id>6594009</id><snippet>&gt;&gt;&gt; my_list = [1,2,3,4]
&gt;&gt;&gt; my_set = set(my_list)
&gt;&gt;&gt; my_new_list = list(my_set)
&gt;&gt;&gt; print my_new_list
[1, 2, 3, 4]
</snippet></ROW><ROW><id>6594009</id><snippet>&gt;&gt;&gt; set=set()
&gt;&gt;&gt; set([1,2])
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
TypeError: 'set' object is not callable
</snippet></ROW><ROW><id>6594402</id><snippet>^(?:(\D?)\1*\d+)+$
</snippet></ROW><ROW><id>6594402</id><snippet>^</snippet></ROW><ROW><id>6594402</id><snippet>(\D?)\1*</snippet></ROW><ROW><id>6594402</id><snippet>\D</snippet></ROW><ROW><id>6594402</id><snippet>\1*</snippet></ROW><ROW><id>6594402</id><snippet>\d+</snippet></ROW><ROW><id>6594402</id><snippet>(?:(\D?)\1*\d+)+</snippet></ROW><ROW><id>6594402</id><snippet>$</snippet></ROW><ROW><id>6594402</id><snippet>(123)))444###555%%6222%%%%</snippet></ROW><ROW><id>6594487</id><snippet>threading.Thread</snippet></ROW><ROW><id>6594487</id><snippet>threading.Timer</snippet></ROW><ROW><id>6594487</id><snippet>threading</snippet></ROW><ROW><id>6594487</id><snippet>setDaemon</snippet></ROW><ROW><id>6594487</id><snippet>threading.Timer</snippet></ROW><ROW><id>6594487</id><snippet>threading.Timer</snippet></ROW><ROW><id>6594487</id><snippet>cancel</snippet></ROW><ROW><id>6594487</id><snippet>threading.Timer</snippet></ROW><ROW><id>6594489</id><snippet>Content-type</snippet></ROW><ROW><id>6594489</id><snippet>#!/usr/bin/env python
# -*- coding: utf-8  -*-

data = '''Some plain data!Content-Type: image/pjpeg ? JFIF  H H   C  C 
          P P                  E       !1AQa "q?#2脑$4BCR倯ご?3TVfrs枴贬    - 釱W
          hf颲[e?喸媼q屧ㄠ蚀厲蹳ZIO痙(r5?-i擯栧剗矹?尴?蝓玁帰XZ鞭#崛攳┸蹵X僦?攅Z@?らM
          ;X藙?N蹮垀s@jQ?Z徸林炑M~?麒]H=颦C胝_р}"?Gixqz坽徸玨?O?Q+谍?w鬪??'''
tdata = '''This has no binary in it'''

def filter_data(blob):
    mixed = blob.find('Content-Type:')
    if mixed != -1:  # -1 ==&gt; not found
        return blob[:mixed] + 'EEEEE'
    return blob

print filter_data(data)
print filter_data(tdata)
</snippet></ROW><ROW><id>6594489</id><snippet>Content-Type</snippet></ROW><ROW><id>6594489</id><snippet>#!/usr/bin/env python
# -*- coding: utf-8  -*-

data = '''Some plain data脑$4BCR倯ご?3TVfrs枴贬    - 釱W hf颲[e?喸媼q屧ㄠ蚀厲蹳
          ZIO痙(r5?-i擯栧剗矹?尴?蝓玁帰XZ鞭#崛攳┸蹵X僦?攅Z@?らM;X藙?N蹮垀s@jQ?Z徸
          林炑M~?麒]H=颦C胝_р}"?Gixqz坽徸玨?O?Q+谍?w鬪??'''
tdata = '''This has no binary in it'''
bdata = '''炑M~?麒]H=颦C胝'''

pool = 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789 '

def filter_data(blob):
    last_good_one = None
    for i, c in enumerate(blob):
        if c in pool:
            last_good_one = i
        else:
            break
    if last_good_one == None:
        raise BaseException('Only binary data!')
    return blob[:last_good_one+1]

print filter_data(data)
print filter_data(tdata)
print filter_data(bdata)
</snippet></ROW><ROW><id>6594647</id><snippet>PyModule_AddObject(module, type-&gt;tp_name, as&lt;PyObject&gt;(type));
</snippet></ROW><ROW><id>6594647</id><snippet>getattr(abc, 'abc.MyType')</snippet></ROW><ROW><id>6594647</id><snippet>abc</snippet></ROW><ROW><id>6594647</id><snippet>tp_name</snippet></ROW><ROW><id>6594647</id><snippet>abc.</snippet></ROW><ROW><id>6595364</id><snippet>zope.testbrowser</snippet></ROW><ROW><id>6595364</id><snippet>mech_browser</snippet></ROW><ROW><id>6595364</id><snippet> browser.mech_browser.set_proxies(dict(
     http="joe:password@myproxy.example.com:3128",
     ftp="proxy.example.com",
 ))
</snippet></ROW><ROW><id>6595443</id><snippet>hypergeom.sf(x,M,n,N,loc=0)</snippet></ROW><ROW><id>6595443</id><snippet>x=q</snippet></ROW><ROW><id>6595443</id><snippet>M=n+m</snippet></ROW><ROW><id>6595443</id><snippet>n=m</snippet></ROW><ROW><id>6595443</id><snippet>N=k</snippet></ROW><ROW><id>6595443</id><snippet>stats.hypergeom.sf(45,(92+7518),92,1329)
</snippet></ROW><ROW><id>6596328</id><snippet>import</snippet></ROW><ROW><id>6596328</id><snippet>try:
    import module.that.may.not.be.available
    def framework_dependent_function():
        # whatever
except ImportError:
    def framework_dependent_function():
        # the required functionality is not available
        # this function can not be run
        raise NotImplementedError
</snippet></ROW><ROW><id>6596328</id><snippet>import</snippet></ROW><ROW><id>6596328</id><snippet>def notimplemented(*args, **kwargs):
    raise NotImplementedError
fn1 = fn2 = fn3 = notimplemented
</snippet></ROW><ROW><id>6596328</id><snippet>utils.fixes</snippet></ROW><ROW><id>6596328</id><snippet>try</snippet></ROW><ROW><id>6596328</id><snippet>except</snippet></ROW><ROW><id>6596328</id><snippet>try:
    from module.that.may.not.be.available import what_we_need
except ImportError:
    what_we_need = notimplemented
</snippet></ROW><ROW><id>6596328</id><snippet>class</snippet></ROW><ROW><id>6596328</id><snippet>class Foo(object):
    # assuming you've added a self argument to the previous function
    framework_dependent_method = framework_dependent_function
</snippet></ROW><ROW><id>6596662</id><snippet>python.exe</snippet></ROW><ROW><id>6596662</id><snippet>python.exe setup.py install</snippet></ROW><ROW><id>6596662</id><snippet>python.exe -V</snippet></ROW><ROW><id>6596662</id><snippet>C:\python25\python.exe setup.py install</snippet></ROW><ROW><id>6596695</id><snippet>multiprocessing</snippet></ROW><ROW><id>6596695</id><snippet>fork()</snippet></ROW><ROW><id>6596749</id><snippet>func_code</snippet></ROW><ROW><id>6596749</id><snippet>import dis

def func(arg):
    x = 5
    arg = 3
    return x + arg

def function_to_code_obj(func):
    return func.func_code

code_obj = function_to_code_obj(func)
dis.disassemble(code_obj)
</snippet></ROW><ROW><id>6596947</id><snippet>dir(f)</snippet></ROW><ROW><id>6596947</id><snippet>dir(f.__class__)</snippet></ROW><ROW><id>6596947</id><snippet>&gt;&gt;&gt; class Foo:
...  def __init__(self):
...   self.a = 17
...
&gt;&gt;&gt; f = Foo()
&gt;&gt;&gt; 'a' in dir(f)
True
&gt;&gt;&gt; 'a' in dir(f.__class__)
False
</snippet></ROW><ROW><id>6597138</id><snippet>import numpy as np
import re

r = re.compile('[Ab]')
vmatch = np.vectorize(lambda x:bool(r.match(x)))

A = np.array(list('abc abc abc'))
sel = vmatch(A)
</snippet></ROW><ROW><id>6597404</id><snippet>$(document).ready(function() {
$("#loginform").submit(function() {
    $.post('/request',{username:$("#username").val(),password:"test"}, function(data) {
                                    $("#error").html(data['response']);
    });
    return false;
});
</snippet></ROW><ROW><id>6597404</id><snippet>def request(self, **data):
    # Then to access the data do the following
    print data['&lt;keyValue'] # In this example I would type print data['username']
</snippet></ROW><ROW><id>6598135</id><snippet>main()</snippet></ROW><ROW><id>6598135</id><snippet>if __name__ == '__main__'</snippet></ROW><ROW><id>6598135</id><snippet>if __name__ == '__main__':
    try:
        main()
    except KeyboardInterrupt:
        print 'Killed by user'
        sys.exit(0)
</snippet></ROW><ROW><id>6598277</id><snippet>datetime.date(year, month, 1).weekday()
</snippet></ROW><ROW><id>6598277</id><snippet>0</snippet></ROW><ROW><id>6598481</id><snippet>if u'signed_request' in self.request.POST:
    facebook.load_signed_request(self.request.get('signed_request'))
</snippet></ROW><ROW><id>6598733</id><snippet>people[:] = [p for p in people if p[0] != '' and p[1] != '']
</snippet></ROW><ROW><id>6598745</id><snippet>#My new class containing unique entries for each pair of models associated within one another.
class EGEnforcer(db.Model): 
KEY_NAME_EXAMPLE = 'arbitrary unique value'

    @staticmethod
    setup():
        ''' This only needs to be called once for the lifetime of the application. setup() inserts a record into EGEnforcer that will be used as a parent for FirstEntity and SecondEntity entries.  '''
        ege = EGEnforcer.get_or_insert(EGEnforcer.KEY_NAME_EXAMPLE)
    return ege

class FirstEntity(db.Model):
    str1_key =  db.StringProperty()
    str2 =      db.StringProperty()

    @staticmethod
    def InsertData(string1, string2, string3):
        try:
            def txn():
                ege = EGEnforcer.get_by_key_name(EGEnforcer.KEY_NAME_EXAMPLE)
                prt = FirstEntity(
                    key_name=string1, 
                    parent=ege) #Our EGEnforcer record.
                prt.put()

                child = SecondEntity(
                    key_name=string2, 
                    parent=ege, #Our EGEnforcer record.
                    parentEnt=prt,
                    str1=string1, 
                    str2_key=string2,
                    str3=string3)
                child.put()
                return child
        #This works because our entities are now part of the same entity group
            db.run_in_transaction(txn)
        except Exception, e:
            raise e

class SecondEntity(db.Model):
    #foreign and primary key values
    str1 =      db.StringProperty()
    str2_key =  db.StringProperty()

    #This is no longer a "parent" but a reference
    parentEnt = db.ReferenceProperty(reference_class=ParentEntity)

#Other data...
    str3 =      db.StringProperty()
</snippet></ROW><ROW><id>6598893</id><snippet>count</snippet></ROW><ROW><id>6598893</id><snippet>print instance.count</snippet></ROW><ROW><id>6598893</id><snippet>instance.count = 5</snippet></ROW><ROW><id>6598893</id><snippet>property</snippet></ROW><ROW><id>6598893</id><snippet>@property
def number(self):
     # do extra logic if necessary
    return self.count
</snippet></ROW><ROW><id>6598998</id><snippet>union {
    struct print_arg_atom       atom;
    struct print_arg_field      field;
    ...
} /*SWIG_VALUE*/;
</snippet></ROW><ROW><id>6598998</id><snippet>/*SWIG_VALUE*/</snippet></ROW><ROW><id>6598998</id><snippet>value</snippet></ROW><ROW><id>6599067</id><snippet>scene_finder.wsgi</snippet></ROW><ROW><id>6599067</id><snippet>/home/webapps/django/scene_finder/scene</snippet></ROW><ROW><id>6599172</id><snippet>import cairo
import rsvg

img =  cairo.ImageSurface(cairo.FORMAT_ARGB32, 640,480)

ctx = cairo.Context(img)

## handler= rsvg.Handle(&lt;svg filename&gt;)
# or, for in memory SVG data:
handler= rsvg.Handle(None, str(&lt;svg data&gt;))

handler.render_cairo(ctx)

img.write_to_png("svg.png")
</snippet></ROW><ROW><id>6599496</id><snippet>@somedecorator
def somefunc(...):
    pass

# is the same thing as    

def somefunc(...):
    pass
somefunc = somedecorator(somefunc)
</snippet></ROW><ROW><id>6599496</id><snippet>somefunc</snippet></ROW><ROW><id>6599496</id><snippet>omnimethod</snippet></ROW><ROW><id>6599496</id><snippet>omnimethod</snippet></ROW><ROW><id>6599496</id><snippet>descriptor</snippet></ROW><ROW><id>6599496</id><snippet>__get__</snippet></ROW><ROW><id>6599496</id><snippet>__get__</snippet></ROW><ROW><id>6599496</id><snippet>__get__</snippet></ROW><ROW><id>6599496</id><snippet>None</snippet></ROW><ROW><id>6599496</id><snippet>functools.partial</snippet></ROW><ROW><id>6599496</id><snippet>partial</snippet></ROW><ROW><id>6599496</id><snippet>omnimethod</snippet></ROW><ROW><id>6599496</id><snippet>self</snippet></ROW><ROW><id>6599496</id><snippet>&gt;&gt;&gt; class Foo(object):
...     def bar(self, baz):
...         print self, baz
... 
&gt;&gt;&gt; f = Foo()
&gt;&gt;&gt; f.bar('apples')
&lt;__main__.Foo object at 0x7fe81ab52f90&gt; apples
&gt;&gt;&gt; Foo.bar('quux')
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
TypeError: unbound method bar() must be called with 
Foo instance as first argument (got str instance instead)
&gt;&gt;&gt; Foo.bar(None, 'quux')
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
TypeError: unbound method bar() must be called with
Foo instance as first argument (got NoneType instance instead)
&gt;&gt;&gt; 
</snippet></ROW><ROW><id>6599496</id><snippet>classmethod</snippet></ROW><ROW><id>6599496</id><snippet>staticmethod</snippet></ROW><ROW><id>6599496</id><snippet>&gt;&gt;&gt; class Foo(object):
...     @classmethod
...     def bar(cls, baz):
...         print cls, baz
... 
&gt;&gt;&gt; f = Foo()
&gt;&gt;&gt; Foo.bar('abc')
&lt;class '__main__.Foo'&gt; abc
&gt;&gt;&gt; f.bar('def')
&lt;class '__main__.Foo'&gt; def
&gt;&gt;&gt; 
</snippet></ROW><ROW><id>6599496</id><snippet>omnimethod</snippet></ROW><ROW><id>6599496</id><snippet>&gt;&gt;&gt; class Foo(object):
...     @omnimethod
...     def bar(self, baz):
...         print self, baz
... 
&gt;&gt;&gt; f = Foo()
&gt;&gt;&gt; Foo.bar('bananas')
None bananas    
&gt;&gt;&gt; f.bar('apples')
&lt;__main__.Foo object at 0x7fe81ab52f90&gt; apples
&gt;&gt;&gt; 
</snippet></ROW><ROW><id>6600219</id><snippet>django.contrib.auth.management.create_superuser</snippet></ROW><ROW><id>6600219</id><snippet>post_syncdb</snippet></ROW><ROW><id>6600219</id><snippet>User</snippet></ROW><ROW><id>6600259</id><snippet>B.objects.filter(a__c__user=someuser).distinct().values('my_data')
</snippet></ROW><ROW><id>6600510</id><snippet>qt.conf</snippet></ROW><ROW><id>6600510</id><snippet>[Paths]
Plugins = plugins
</snippet></ROW><ROW><id>6600510</id><snippet>plugins</snippet></ROW><ROW><id>6600510</id><snippet>imageformats</snippet></ROW><ROW><id>6600510</id><snippet>qjpeg4.dll</snippet></ROW><ROW><id>6600510</id><snippet>C:\Python27\Lib\site-packages\PyQt4\plugins\imageformats</snippet></ROW><ROW><id>6600634</id><snippet>#NOTE: .pydistutils.cfg seems to be not compatible with brew install python
#areas I needed to clean before installation
#clean up ~/Library/Python
#clean up .local
brew install python
easy_install pip
pip install virtualenv
pip install virtualenvwrapper
mkdir $HOME/.virtualenvs
</snippet></ROW><ROW><id>6600634</id><snippet>#homebrew
export PATH=/usr/local/bin:/usr/local/sbin:${PATH}

# homebrew python 2.7
export PATH="/usr/local/share/python:${PATH}"

#virtualenv wrapper
export WORKON_HOME=$HOME/.virtualenvs
source /usr/local/share/python/virtualenvwrapper.sh
</snippet></ROW><ROW><id>6600735</id><snippet>local_import</snippet></ROW><ROW><id>6600735</id><snippet>import modulename</snippet></ROW><ROW><id>6600735</id><snippet>applications/appname/modules</snippet></ROW><ROW><id>6600735</id><snippet>local_import</snippet></ROW><ROW><id>6600735</id><snippet>mymodule = local_import(themodule)</snippet></ROW><ROW><id>6600735</id><snippet>reload=True</snippet></ROW><ROW><id>6600991</id><snippet>* * * * * CRONRUN=y /srv/cron/foo.py
</snippet></ROW><ROW><id>6600991</id><snippet>if 'CRONRUN' in os.environ:
   ...
</snippet></ROW><ROW><id>6601250</id><snippet>serialize</snippet></ROW><ROW><id>6601250</id><snippet>objectQuerySet = ConventionCard.objects.filter(ownerUser = user)
data = serializers.serialize('json', objectQuerySet, fields=('fileName','id'))
</snippet></ROW><ROW><id>6601318</id><snippet>complex</snippet></ROW><ROW><id>6601318</id><snippet>&gt;&gt;&gt; a = complex("1+2j")
&gt;&gt;&gt; a
(1+2j)
&gt;&gt;&gt; a*a
(-3+4j)
</snippet></ROW><ROW><id>6601413</id><snippet>python2.6 setup.py install
</snippet></ROW><ROW><id>6601656</id><snippet>_set</snippet></ROW><ROW><id>6601694</id><snippet>&gt;&gt;&gt; buf = '\xAE\x02\x59'
&gt;&gt;&gt; from struct import unpack
&gt;&gt;&gt; unpack('&gt;BH', buf)
(174, 601)
</snippet></ROW><ROW><id>6602037</id><snippet>^(?:asd|123)+$</snippet></ROW><ROW><id>6602037</id><snippet>asd</snippet></ROW><ROW><id>6602037</id><snippet>123</snippet></ROW><ROW><id>6602091</id><snippet>connect()</snippet></ROW><ROW><id>6602091</id><snippet>connect('dbname')
</snippet></ROW><ROW><id>6602091</id><snippet>host</snippet></ROW><ROW><id>6602091</id><snippet>port</snippet></ROW><ROW><id>6602091</id><snippet>int</snippet></ROW><ROW><id>6602091</id><snippet>username</snippet></ROW><ROW><id>6602091</id><snippet>password</snippet></ROW><ROW><id>6602091</id><snippet>connect()</snippet></ROW><ROW><id>6602091</id><snippet>settings.py</snippet></ROW><ROW><id>6602203</id><snippet>defaultdict</snippet></ROW><ROW><id>6602203</id><snippet>for</snippet></ROW><ROW><id>6602203</id><snippet>if</snippet></ROW><ROW><id>6602203</id><snippet>from collections import defaultdict
groups= defaultdict( list )
for obj in old_list:
    groups[obj.some_attr].append( obj )
new_list = groups.values()
</snippet></ROW><ROW><id>6602204</id><snippet>json.dumps</snippet></ROW><ROW><id>6602204</id><snippet>allow_nan</snippet></ROW><ROW><id>6602204</id><snippet>allow_nan=False</snippet></ROW><ROW><id>6602293</id><snippet>WebDriverWait</snippet></ROW><ROW><id>6602293</id><snippet>Function</snippet></ROW><ROW><id>6602293</id><snippet>until()</snippet></ROW><ROW><id>6602293</id><snippet>driver.findElements( By... )</snippet></ROW><ROW><id>6602293</id><snippet>driver.findElement( By... )</snippet></ROW><ROW><id>6602293</id><snippet>Function</snippet></ROW><ROW><id>6602293</id><snippet>driver.manage().timeouts().implicitlyWait( ... )</snippet></ROW><ROW><id>6602414</id><snippet>thread.join(60)
</snippet></ROW><ROW><id>6602414</id><snippet>isAlive()</snippet></ROW><ROW><id>6602424</id><snippet>cursor.execute("update records set y = ? where x = ?", (y, x))
</snippet></ROW><ROW><id>6602483</id><snippet>dataCreator</snippet></ROW><ROW><id>6602483</id><snippet>methods2wrap</snippet></ROW><ROW><id>6602483</id><snippet>dataCreator</snippet></ROW><ROW><id>6602483</id><snippet>__getattribute__()</snippet></ROW><ROW><id>6602483</id><snippet>dataCreator</snippet></ROW><ROW><id>6602483</id><snippet>methods2wrap</snippet></ROW><ROW><id>6602483</id><snippet>list</snippet></ROW><ROW><id>6602483</id><snippet>append</snippet></ROW><ROW><id>6602483</id><snippet>import time

class wrapper(list):

    def __getattribute__(self, name):
        TO_OVERRIDE = ['append']
        if name in TO_OVERRIDE:
            start = time.clock()
        ret = super(list, self).__getattribute__(name)
        if name in TO_OVERRIDE:
            stop = time.clock()
            print "It took %s seconds to perform %s" % (str(stop-start), name)
        return ret

profiled_list = wrapper('abc')
print profiled_list
profiled_list.append('d')
print profiled_list
profiled_list.pop()
print profiled_list
</snippet></ROW><ROW><id>6602483</id><snippet>TO_OVERRIDE</snippet></ROW><ROW><id>6602483</id><snippet>__getattribute__</snippet></ROW><ROW><id>6602483</id><snippet>__getattribute__</snippet></ROW><ROW><id>6602483</id><snippet>__getattribute__</snippet></ROW><ROW><id>6602766</id><snippet>d = [{'A': [3, 45, 34, 4, 2, 5, 94, 2139, 230345, 283047, 230847]}, {'B': [92374, 324, 345, 345, 45879, 34857987, 3457938457]}, {'C': [23874923874987, 2347]}]
[{x.keys()[0]:sum(x.values()[0])} for x in d]
</snippet></ROW><ROW><id>6602868</id><snippet>&gt;&gt;&gt; dict(one=1, two=2)
{'two': 2, 'one': 1}
</snippet></ROW><ROW><id>6602938</id><snippet>import yourscript # is in yourscript.py

yourclass = yourscript.Yourclass()
yourclass.run()
</snippet></ROW><ROW><id>6603008</id><snippet>client.service.fooMethod(fooParam1,fooParam2,...)
</snippet></ROW><ROW><id>6603008</id><snippet>soap_attachments.with_soap_attachment(client.service.fooMethod,binaryParam,fooParam1,fooParam2,...)
</snippet></ROW><ROW><id>6603008</id><snippet>imageFile = open('imageFile.png','rb')
imageData = imageFile.read()
mimeType = 'image/png'
binaryParam = (imageData, uuid.uuid4(), mimeType)
</snippet></ROW><ROW><id>6603104</id><snippet>smtplib.SMTP_SSL</snippet></ROW><ROW><id>6603147</id><snippet>def __repr__(self): 
  return repr(self.i)
</snippet></ROW><ROW><id>6603237</id><snippet>assets/ac.php?m=text&amp;s=</snippet></ROW><ROW><id>6603237</id><snippet>?m=text&amp;s=</snippet></ROW><ROW><id>6603237</id><snippet>?s=</snippet></ROW><ROW><id>6603237</id><snippet>    &lt;input type="text" id="my_ac3" name="my_ac" size="45" autocomplete="off"/&gt; 
    &lt;script type="text/javascript"&gt; 
    new AutoComplete('my_ac3', '?s=', { delay: 0.25, resultFormat: AutoComplete.Options.RESULT_FORMAT_TEXT }); 
    &lt;/script&gt;
</snippet></ROW><ROW><id>6603237</id><snippet>    if request.is_ajax():
        #match the users input here, perhaps using data from your database and/or regular expressions
        text = #response text to return, in my case since I chose Options.RESULT_FORMAT_TEXT as my resultFormat, it's a string where each autocomplete item is separated by '\n'
        return HttpResponse(text, mimetype='text/plain')  # mimetype is text here in my case
</snippet></ROW><ROW><id>6603746</id><snippet>partial = defaultdict(lambda: defaultdict(list))
</snippet></ROW><ROW><id>6603815</id><snippet>fetchone()</snippet></ROW><ROW><id>6603815</id><snippet>row = c.execute("SELECT fish_score FROM roster WHERE agentnumber = ?;", (AN,) ).fetchone()
if row is not None:  # or just "if row"
    Trailcrest.fish_score = row[0]
else:
    pass # didn't get back a row
</snippet></ROW><ROW><id>6604002</id><snippet>brag</snippet></ROW><ROW><id>6604043</id><snippet>return datastore.Get(keys)</snippet></ROW><ROW><id>6604043</id><snippet>return db.GqlQuery('SELECT __key__ FROM &lt;kind&gt; WHERE __key__ IN :1', keys)</snippet></ROW><ROW><id>6604043</id><snippet>&lt;kind&gt;</snippet></ROW><ROW><id>6604677</id><snippet>from lxml import etree

xmltree = etree.fromstring(your_xml)

for footnote in xmltree.iterfind("//footnotes/footnote"):
   # do something
   pass
</snippet></ROW><ROW><id>6604677</id><snippet>iterparse</snippet></ROW><ROW><id>6604865</id><snippet>&gt;&gt;&gt; from Tkinter import *
&gt;&gt;&gt; root = Tk()
&gt;&gt;&gt; w = Label(root, text=u"Hello, \u03bc-world!")
&gt;&gt;&gt; w.pack()
&gt;&gt;&gt; root.mainloop()
</snippet></ROW><ROW><id>6604921</id><snippet>child_table = Table('child_table', metadata_obj,
                    Column('field_1', Integer, ForeignKey('parent_table.field_1'),
                           primary_key=True),
                    Column('field_2', String, ForeignKey('parent_table.field_2'),
                           primary_key=True),
                    Column('field_3', String, primary_key=True),
                    Column('field_4', String, primary_key=True),
                    autoload=True
</snippet></ROW><ROW><id>6605382</id><snippet>Python 2.6.5 (r265:79063, Apr 16 2010, 13:09:56) 
[GCC 4.4.3] on linux2
Type "help", "copyright", "credits" or "license" for more information.
&gt;&gt;&gt; print '\xe6\x9c\xaa\xe5\x91\xbd\xe5\x90\x8d.jpg' 
未命名.jpg
</snippet></ROW><ROW><id>6605795</id><snippet>quiet_zone</snippet></ROW><ROW><id>6605795</id><snippet>1.0</snippet></ROW><ROW><id>6605795</id><snippet>6.5</snippet></ROW><ROW><id>6605795</id><snippet>pyBarcode</snippet></ROW><ROW><id>6605795</id><snippet>_paint_text()</snippet></ROW><ROW><id>6605795</id><snippet>xpos/2</snippet></ROW><ROW><id>6605795</id><snippet>_paint_text()</snippet></ROW><ROW><id>6605795</id><snippet>pos</snippet></ROW><ROW><id>6605795</id><snippet>xpos</snippet></ROW><ROW><id>6605795</id><snippet>class MyImageWriter(ImageWriter):
    def calculate_size(self, modules_per_line, number_of_lines, dpi=300):
        width = 2 * self.quiet_zone + modules_per_line * self.module_width
        height = 1.0 + self.module_height * number_of_lines
        if self.text:
            height += (self.font_size + self.text_distance) / 3

        return int(mm2px(width, dpi)), int(mm2px(height, dpi))

    def _paint_text(self, xpos, ypos):
        # this should align your font to the left side of the bar code:
        xpos = self.quiet_zone
        pos = (mm2px(xpos, self.dpi), mm2px(ypos, self.dpi))
        font = ImageFont.truetype(FONT, self.font_size)
        self._draw.text(pos, self.text, font=font, fill=self.foreground)
</snippet></ROW><ROW><id>6606169</id><snippet>which python</snippet></ROW><ROW><id>6606169</id><snippet>which pip</snippet></ROW><ROW><id>6606169</id><snippet>import sys
print "\n".join(sys.path)
</snippet></ROW><ROW><id>6606169</id><snippet>echo $PATH</snippet></ROW><ROW><id>6606169</id><snippet>echo $PYTHONPATH</snippet></ROW><ROW><id>6606169</id><snippet>PYTHONPATH</snippet></ROW><ROW><id>6606169</id><snippet>site</snippet></ROW><ROW><id>6606265</id><snippet>num = 5
tag = 'input_%d' % num
</snippet></ROW><ROW><id>6606265</id><snippet>input_x</snippet></ROW><ROW><id>6606265</id><snippet>input_values = []
for i in range(1, number_of_values + 1):
  input_values.append(self.request.get('input_%d' % i))
</snippet></ROW><ROW><id>6606265</id><snippet>request.get</snippet></ROW><ROW><id>6606265</id><snippet>KeyError</snippet></ROW><ROW><id>6606265</id><snippet>get</snippet></ROW><ROW><id>6606619</id><snippet>?</snippet></ROW><ROW><id>6606619</id><snippet>?</snippet></ROW><ROW><id>6606619</id><snippet>#Create a Python Unicode object
#(abstract code points, independent of any encoding)
#single backslash tells python we want to represent
#a code point by its unicode code point number, typed out with ASCII numbers
&gt;&gt;&gt; s1 = u'his son\u2019s friend'

#If you just type it at the prompt,
#the interpreter does the equivalent of `print repr(s1)`
#and since repr means "show it like a string typed into a python source file",
#you get your ASCII escaped version back
&gt;&gt;&gt; s1
u'his son\u2019s friend'
&gt;&gt;&gt; print repr(s1)
u'his son\u2019s friend'

#This isn't ASCII, so encoding into ASCII generates your original
#error as expected
&gt;&gt;&gt; s1.encode('ascii')
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
UnicodeEncodeError: 'ascii' codec can't encode character
 u'\u2019' in position 7: 
ordinal not in range(128)

# Encode in UTF-8 and now we have a string,
# which gets displayed as hex escapes.     
#Unicode code point 2019 looks like it gets 3 bytes in UTF-8 (yup, it does)
&gt;&gt;&gt; s1.encode('utf-8')
'his son\xe2\x80\x99s friend'

#My terminal DOES have a different glyph (symbol) to use here,
#so it displays OK for me.
#Note that my terminal has a different glyph for a normal ASCII apostrophe
#(straight vertical)
&gt;&gt;&gt; print s1
his son’s friend
&gt;&gt;&gt; repr(s1)
"u'his son\\u2019s friend'"
&gt;&gt;&gt; str(s1.encode('utf-8'))
'his son\xe2\x80\x99s friend'
</snippet></ROW><ROW><id>6606681</id><snippet>@superuser_required</snippet></ROW><ROW><id>6606681</id><snippet>is_staff</snippet></ROW><ROW><id>6606937</id><snippet>Prefer-32-bit</snippet></ROW><ROW><id>6606937</id><snippet>/usr/bin/python</snippet></ROW><ROW><id>6606937</id><snippet>/usr/bin/python2.6</snippet></ROW><ROW><id>6606937</id><snippet>/usr/bin/python2.5</snippet></ROW><ROW><id>6606937</id><snippet>virtualenv</snippet></ROW><ROW><id>6606937</id><snippet>bin</snippet></ROW><ROW><id>6606937</id><snippet>Prefer-32-bit</snippet></ROW><ROW><id>6606937</id><snippet>arch</snippet></ROW><ROW><id>6606937</id><snippet>$ virtualenv -p /usr/bin/python2.6 ./p
$ ./p/bin/python -c 'import sys;print(sys.maxsize)'
9223372036854775807
$ arch -i386 ./p/bin/python -c 'import sys;print(sys.maxsize)'
2147483647
</snippet></ROW><ROW><id>6606937</id><snippet>lipo</snippet></ROW><ROW><id>6606937</id><snippet>$ file ./p/bin/python
./p/bin/python: Mach-O universal binary with 3 architectures
./p/bin/python (for architecture x86_64):   Mach-O 64-bit executable x86_64
./p/bin/python (for architecture i386): Mach-O executable i386
./p/bin/python (for architecture ppc7400):  Mach-O executable ppc
$ cp ./p/bin/python ./p/bin/python-universal
$ lipo ./p/bin/python-universal -thin i386 -output ./p/bin/python
$ file ./p/bin/python
./p/bin/python: Mach-O executable i386
$ ./p/bin/python -c 'import sys;print(sys.maxsize)'
2147483647
</snippet></ROW><ROW><id>6607186</id><snippet>SELECT table.* FROM table</snippet></ROW><ROW><id>6607186</id><snippet>blog_post_table = Table("blog_posts", metadata,
    Column('id', Integer, primary_key=True),
    Column('visible', Boolean, default=True),
    ...
)

class BlogPost(object):
    pass

blog_post_mapper = mapper(BlogPost, blog_post_table)
</snippet></ROW><ROW><id>6607186</id><snippet>class BlogPost(Base):
    __tablename__ = 'blog_posts'
    id = Column(Integer, primary_key=True)
    visible = Column(Boolean, default=True)
</snippet></ROW><ROW><id>6607186</id><snippet>select</snippet></ROW><ROW><id>6607186</id><snippet>visible_blog_posts_expr = sqlalchemy.sql.select(
        [BlogPost.id,
         BlogPost.visible]) \
    .where(BlogPost.visible == True) \
    .alias()
</snippet></ROW><ROW><id>6607186</id><snippet>session.query(BlogPost)</snippet></ROW><ROW><id>6607186</id><snippet>visible_blog_posts_expr = \
    sqlalchemy.orm.Query(BlogPost) \
    .filter(BlogPost.visible == True) \
    .statement \
    .alias()
</snippet></ROW><ROW><id>6607186</id><snippet>visible_blog_posts = mapper(BlogPost, visible_blog_posts_expr, non_primary=True)
</snippet></ROW><ROW><id>6607186</id><snippet>visible_blog_posts</snippet></ROW><ROW><id>6607186</id><snippet>BlogPost</snippet></ROW><ROW><id>6607186</id><snippet>Session.query</snippet></ROW><ROW><id>6607186</id><snippet>BlogPost</snippet></ROW><ROW><id>6607186</id><snippet>posts = session.query(visible_blog_posts).all()
assert all(post.visible for post in posts)
</snippet></ROW><ROW><id>6607186</id><snippet>mapper</snippet></ROW><ROW><id>6607186</id><snippet>mapper</snippet></ROW><ROW><id>6607186</id><snippet>SomeClass.colname</snippet></ROW><ROW><id>6607186</id><snippet>some_table.c.colname</snippet></ROW><ROW><id>6607186</id><snippet>SomeClass.__table__.colname</snippet></ROW><ROW><id>6607186</id><snippet>BlogPost.metadata.tables[BlogPost.__tablename__]</snippet></ROW><ROW><id>6607186</id><snippet>[]</snippet></ROW><ROW><id>6607186</id><snippet>select</snippet></ROW><ROW><id>6607186</id><snippet>mapper</snippet></ROW><ROW><id>6607186</id><snippet>(SELECT .... ) AS some_subselect_alias_5</snippet></ROW><ROW><id>6607256</id><snippet>Return a ctypes array allocated from shared memory.

typecode_or_type determines the type of the elements of the returned
</snippet></ROW><ROW><id>6607256</id><snippet>Note that setting and getting an element is potentially non-atomic;
</snippet></ROW><ROW><id>6607353</id><snippet>data</snippet></ROW><ROW><id>6607353</id><snippet>size</snippet></ROW><ROW><id>6607353</id><snippet>def lookup(d, key):
    perturb = j = hash(key)
    while True:
        cell = d.data[j % d.size]
        if cell.key is EMPTY:
            raise IndexError
        if cell.key is not DELETED and (cell.key is key or cell.key == key):
            return cell.value
        j = (5 * j) + 1 + perturb
        perturb &gt;&gt;= PERTURB
</snippet></ROW><ROW><id>6607353</id><snippet>perturb</snippet></ROW><ROW><id>6607353</id><snippet>(5*j)+1</snippet></ROW><ROW><id>6607353</id><snippet>size</snippet></ROW><ROW><id>6607353</id><snippet>x.y</snippet></ROW><ROW><id>6607461</id><snippet>engine</snippet></ROW><ROW><id>6607461</id><snippet>Session</snippet></ROW><ROW><id>6607461</id><snippet>settings.py</snippet></ROW><ROW><id>6607461</id><snippet>session</snippet></ROW><ROW><id>6607461</id><snippet>class MySQLAlchemySessionMiddleware(object):
    def process_request(self, request):
        request.db_session = settings.Session()

    def process_response(self, request, response):
        try:
            session = request.db_session
        except AttributeError:
            return response
        try:
            session.commit()
            return response
        except:
            session.rollback()
            raise

    def process_exception(self, request, exception):
        try:
            session = request.db_session
        except AttributeError:
            return
        session.rollback()
</snippet></ROW><ROW><id>6607461</id><snippet>db_session</snippet></ROW><ROW><id>6607461</id><snippet>MIDDLEWARE_CLASSES</snippet></ROW><ROW><id>6607570</id><snippet>from django.utils import simplejson
from django.http import HttpResponse

class JsonResponse(HttpResponse):
    def __init__(self, data):
        content = simplejson.dumps(data)
        super(JsonResponse, self).__init__(content=content,
                                           mimetype='application/json')

class Success(JsonResponse):
    def __init__(self, something):
        x = something # set your data here
        content = {'success': {'data': x}}
        super(Success, self).__init__(content)


class Failure(JsonResponse):
    def __init__(self, something):
        x = something # set your data
        content = {'failures': {'errors': x}}
        super(Failure, self).__init__(content)
</snippet></ROW><ROW><id>6607570</id><snippet>Success</snippet></ROW><ROW><id>6607570</id><snippet>Failure</snippet></ROW><ROW><id>6607570</id><snippet>Success(data)</snippet></ROW><ROW><id>6608523</id><snippet>bool</snippet></ROW><ROW><id>6608523</id><snippet>bool(bar1)
</snippet></ROW><ROW><id>6608746</id><snippet>import sys
from PyQt4.QtCore import *
from PyQt4.QtGui import *
from PyQt4.QtWebKit import *

app = QApplication(sys.argv)
web = QWebView()
web.settings().setAttribute(QWebSettings.PluginsEnabled, True)
web.show()
web.load(QUrl('file:///C:/test/test.pdf')) # Change path to actual file.
sys.exit(app.exec_())
</snippet></ROW><ROW><id>6608831</id><snippet>PYTHONPATH</snippet></ROW><ROW><id>6608831</id><snippet>Properties</snippet></ROW><ROW><id>6608831</id><snippet>PyDev - PYTHONPATH</snippet></ROW><ROW><id>6609074</id><snippet>LANGUAGE_CODE</snippet></ROW><ROW><id>6609309</id><snippet>cmp</snippet></ROW><ROW><id>6609309</id><snippet>copyFile.close()</snippet></ROW><ROW><id>6609309</id><snippet>copyFile.close</snippet></ROW><ROW><id>6609581</id><snippet>session.commit()</snippet></ROW><ROW><id>6609581</id><snippet>save()</snippet></ROW><ROW><id>6609766</id><snippet>__import__('os').system('rm -rf /')
</snippet></ROW><ROW><id>6609766</id><snippet>root</snippet></ROW><ROW><id>6609766</id><snippet>2**2**1024
</snippet></ROW><ROW><id>6609766</id><snippet>__import__('os').system(':(){ :|:&amp; };:')
</snippet></ROW><ROW><id>6609766</id><snippet>[__import__('os').fork() for i in xrange(2**64) for x in range(i)]
</snippet></ROW><ROW><id>6609766</id><snippet>__import__</snippet></ROW><ROW><id>6609766</id><snippet>eval(''.join(['__', 'im', 'po', 'rt', '__']))
getattr(__builtins__, '__imp' + 'ort__')
getattr(globals()['__built' 'ins__'], '__imp' + 'ort__')
</snippet></ROW><ROW><id>6609766</id><snippet>eval</snippet></ROW><ROW><id>6609766</id><snippet>exec</snippet></ROW><ROW><id>6609766</id><snippet>ast.literal_eval</snippet></ROW><ROW><id>6609998</id><snippet>import re
print re.sub(r'[\xc2\x99]'," ","Hello\xc2There\x99")
</snippet></ROW><ROW><id>6609998</id><snippet># remove annoying characters
chars = {
    '\xc2\x82' : ',',        # High code comma
    '\xc2\x84' : ',,',       # High code double comma
    '\xc2\x85' : '...',      # Tripple dot
    '\xc2\x88' : '^',        # High carat
    '\xc2\x91' : '\x27',     # Forward single quote
    '\xc2\x92' : '\x27',     # Reverse single quote
    '\xc2\x93' : '\x22',     # Forward double quote
    '\xc2\x94' : '\x22',     # Reverse double quote
    '\xc2\x95' : ' ',
    '\xc2\x96' : '-',        # High hyphen
    '\xc2\x97' : '--',       # Double hyphen
    '\xc2\x99' : ' ',
    '\xc2\xa0' : ' ',
    '\xc2\xa6' : '|',        # Split vertical bar
    '\xc2\xab' : '&lt;&lt;',       # Double less than
    '\xc2\xbb' : '&gt;&gt;',       # Double greater than
    '\xc2\xbc' : '1/4',      # one quarter
    '\xc2\xbd' : '1/2',      # one half
    '\xc2\xbe' : '3/4',      # three quarters
    '\xca\xbf' : '\x27',     # c-single quote
    '\xcc\xa8' : '',         # modifier - under curve
    '\xcc\xb1' : ''          # modifier - under line
}
def replace_chars(match):
    char = match.group(0)
    return chars[char]
return re.sub('(' + '|'.join(chars.keys()) + ')', replace_chars, text)
</snippet></ROW><ROW><id>6610002</id><snippet>Arguments on first line forbidden when not using vertical alignment</snippet></ROW><ROW><id>6610173</id><snippet>&gt;&gt;&gt; import sympy
&gt;&gt;&gt; from sympy import *
&gt;&gt;&gt; a = Symbol('a')
&gt;&gt;&gt; b = Symbol('b')
&gt;&gt;&gt; c = Symbol('c')
&gt;&gt;&gt; eval('5*a+6*b')
5*a + 6*b
&gt;&gt;&gt; eval('5*a+6*b') + eval('2*a+3*b+9*c')
7*a + 9*b + 9*c
</snippet></ROW><ROW><id>6610173</id><snippet>&gt;&gt;&gt; input1 = '5a+6b'
&gt;&gt;&gt; input2 = '2a+3b+9c'
&gt;&gt;&gt; s = "+".join((input1, input2))
&gt;&gt;&gt; s
'5a+6b+2a+3b+9c'
&gt;&gt;&gt; d = {}
&gt;&gt;&gt; for i in s.split("+"):
...     d[i[-1]] = d.get(i[-1], 0) + int(i[:-1])
... 
&gt;&gt;&gt; d
{'a': 7, 'c': 9, 'b': 9}
&gt;&gt;&gt; "+".join("".join((str(j),i)) for i, j in d.items())
'7a+9c+9b'
</snippet></ROW><ROW><id>6610603</id><snippet>json</snippet></ROW><ROW><id>6610603</id><snippet>json.dumps()</snippet></ROW><ROW><id>6610603</id><snippet>pyStruct = [{key1:value1, key2:value2, [{subkey1:subvalue1, subkey2:subvalue2,}]},
            {key1:value1, key2:value2, [{subkey1:subvalue1, subkey2:subvalue2,}]},]

render_template('jinjatemplate.html', json_struct=json.dumps(pyStruct))
</snippet></ROW><ROW><id>6610603</id><snippet>var myStruct = ({{ json_struct|e }});
</snippet></ROW><ROW><id>6610662</id><snippet>UserProfile.objects.filter(likes=p1).count()
</snippet></ROW><ROW><id>6610706</id><snippet>pep8.py --count</snippet></ROW><ROW><id>6610706</id><snippet>--count              print total number of errors and warnings to standard
                       error and set exit code to 1 if total is not null
</snippet></ROW><ROW><id>6610706</id><snippet>subprocss.Popen</snippet></ROW><ROW><id>6610706</id><snippet>subprocess.PIPE</snippet></ROW><ROW><id>6610706</id><snippet>pep_tips = subprocess.Popen("python pep8.py --ignore=E111,E501 --count -qq          
               --filename=*.py  " + target, shell=False,
               stdin=subprocess.PIPE, stdout=subprocess.PIPE, 
               stderr=subprocess.PIPE)

tips,tips_err = pep_tips.communicate()
print tips_err
</snippet></ROW><ROW><id>6610738</id><snippet>#include &lt;deque&gt;
typedef std::deque&lt;size_t&gt; BoxList;

class Generator {
    size_t boxNum, ballNum, ownBox;
    Generator* recursive;
public:
    ~Generator() { if ( recursive == NULL ) delete recursive; }
    Generator( size_t boxes, size_t balls ) : boxNum(boxes), ballNum(balls) {
        if ( boxes &gt; 1 ) {
            recursive = new Generator( boxes-1, balls );
            ownBox = 0;
        } else {
            recursive = NULL;
            ownBox = balls;
        }
    }
    BoxList operator()() {
        if ( ownBox &gt; ballNum ) throw 1;
        if ( boxNum &lt;= 1 ) return BoxList( 1, ownBox++ );
        try {
            BoxList res = recursive-&gt;operator()(); 
            res.push_front( ownBox );
            return res;
        }
        catch(...) {
            delete recursive;
            ownBox++;
            recursive = new Generator( boxNum-1, ballNum-ownBox );
            return operator()();
        }
    }
};
</snippet></ROW><ROW><id>6610738</id><snippet>Generator g( boxes, balls );
try{
    while( true )
        g();
}
catch(...) {}
</snippet></ROW><ROW><id>6610783</id><snippet>dict</snippet></ROW><ROW><id>6610783</id><snippet>dict</snippet></ROW><ROW><id>6610783</id><snippet>locals()</snippet></ROW><ROW><id>6610783</id><snippet>globals()</snippet></ROW><ROW><id>6610783</id><snippet>dict</snippet></ROW><ROW><id>6611184</id><snippet>dpkg -l</snippet></ROW><ROW><id>6611184</id><snippet>pip uninstall package-name</snippet></ROW><ROW><id>6611266</id><snippet>twistd</snippet></ROW><ROW><id>6611266</id><snippet>sys</snippet></ROW><ROW><id>6611266</id><snippet>argv</snippet></ROW><ROW><id>6611266</id><snippet>twistd</snippet></ROW><ROW><id>6611266</id><snippet>#!/usr/bin/python
from twisted.scripts.twistd import run
from sys import argv
argv[1:] = [
    '-y', 'myapp.py',
    '--pidfile', '/var/run/myapp.pid',
    '--logfile', '/var/run/myapp.log'
]
run()
</snippet></ROW><ROW><id>6611266</id><snippet>myapp.py</snippet></ROW><ROW><id>6611266</id><snippet>__file__</snippet></ROW><ROW><id>6611266</id><snippet>#!/usr/bin/python
from twisted.scripts.twistd import run
from my.application import some_module
from os.path import join, dirname
from sys import argv
argv[1:] = [
    '-y', join(dirname(some_module.__file__), "myapp.py"),
    '--pidfile', '/var/run/myapp.pid',
    '--logfile', '/var/run/myapp.log'
]
run()
</snippet></ROW><ROW><id>6611266</id><snippet>twistd</snippet></ROW><ROW><id>6611266</id><snippet>twistd</snippet></ROW><ROW><id>6611350</id><snippet>gethostbyaddr</snippet></ROW><ROW><id>6612052</id><snippet>{% if follow in b.admin.all %}</snippet></ROW><ROW><id>6612052</id><snippet>1L</snippet></ROW><ROW><id>6612052</id><snippet>''</snippet></ROW><ROW><id>6612052</id><snippet>1L</snippet></ROW><ROW><id>6612052</id><snippet>''</snippet></ROW><ROW><id>6612052</id><snippet>None</snippet></ROW><ROW><id>6612052</id><snippet>{% url remove_admin b.id u.id %}</snippet></ROW><ROW><id>6612052</id><snippet>u.id</snippet></ROW><ROW><id>6612052</id><snippet>u</snippet></ROW><ROW><id>6612052</id><snippet>id</snippet></ROW><ROW><id>6612052</id><snippet>User</snippet></ROW><ROW><id>6612075</id><snippet>port select --list python
</snippet></ROW><ROW><id>6612075</id><snippet>port select --show python
</snippet></ROW><ROW><id>6612075</id><snippet>sudo port select --set python &lt;the python version&gt;
</snippet></ROW><ROW><id>6612248</id><snippet>function fak(n) {
    if (n==0) { // 0! is 1 by definition
        return 1;
    } else {
        return n * fak(n - 1);
    };
}
</snippet></ROW><ROW><id>6612248</id><snippet>def comment():          return [re.compile(r"//.*"),
                                re.compile("/\*.*?\*/", re.S)]
def literal():          return re.compile(r'\d*\.\d*|\d+|".*?"')
def symbol():           return re.compile(r"\w+")
def operator():         return re.compile(r"\+|\-|\*|\/|\=\=")
def operation():        return symbol, operator, [literal, functioncall]
def expression():       return [literal, operation, functioncall]
def expressionlist():   return expression, -1, (",", expression)
def returnstatement():  return keyword("return"), expression
def ifstatement():      return (keyword("if"), "(", expression, ")", block,
                                keyword("else"), block)
def statement():        return [ifstatement, returnstatement], ";"
def block():            return "{", -2, statement, "}"
def parameterlist():    return "(", symbol, -1, (",", symbol), ")"
def functioncall():     return symbol, "(", expressionlist, ")"
def function():         return keyword("function"), symbol, parameterlist, block
def simpleLanguage():   return function
</snippet></ROW><ROW><id>6612766</id><snippet>from setuptools import setup, find_packages

setup(
    name = "google killer",
    version = "0.1.0",
    url = 'http://example.com/',
    license = 'AGPL',
    description = 'best software ever',
    author = 'me',
    packages = find_packages('src'),
    package_dir = {'': 'src'},
    install_requires = ['numpy', 'scipy', 'sqlalchemy'],
)
</snippet></ROW><ROW><id>6612766</id><snippet>import os

from setuptools import setup, find_packages

here = os.path.abspath(os.path.dirname(__file__))
README = open(os.path.join(here, 'README.txt')).read()
CHANGES = open(os.path.join(here, 'CHANGES.txt')).read()

requires = ['pyramid', 'WebError']

setup(name='test',
      version='0.0',
      description='test',
      long_description=README + '\n\n' +  CHANGES,
      classifiers=[
        "Programming Language :: Python",
        "Framework :: Pylons",
        "Topic :: Internet :: WWW/HTTP",
        "Topic :: Internet :: WWW/HTTP :: WSGI :: Application",
        ],
      author='',
      author_email='',
      url='',
      keywords='web pyramid pylons',
      packages=find_packages(),
      include_package_data=True,
      zip_safe=False,
      install_requires=requires,
      tests_require=requires,
      test_suite="test",
      entry_points = """\                                                                  
      [paste.app_factory]                                                                  
      main = test:main                                                                     
      """,
      paster_plugins=['pyramid'],
      )
</snippet></ROW><ROW><id>6612795</id><snippet>dict.keys()</snippet></ROW><ROW><id>6612795</id><snippet>dict.values()</snippet></ROW><ROW><id>6612795</id><snippet>keys, values = dict.keys(), dict.values()
</snippet></ROW><ROW><id>6612904</id><snippet>{% for item in mylst %}
    {% for a in item %}
        {{ a }}
    {% endfor %}
{% endfor %}
</snippet></ROW><ROW><id>6612906</id><snippet>/_ah/login_required</snippet></ROW><ROW><id>6612906</id><snippet>app.yaml</snippet></ROW><ROW><id>6612906</id><snippet>- url: /_ah/login_required
  script: app.py
</snippet></ROW><ROW><id>6612906</id><snippet>class OpenIDHandler(webapp.RequestHandler):
    def get(self):
        """Begins the OpenID flow/Google Apps discovery"""
        self.redirect(users.create_login_url(
            dest_url='http://yourappid.appspot.com',
            _auth_domain=None,
            federated_identity=self.request.get('domain')))
</snippet></ROW><ROW><id>6612906</id><snippet>main.py</snippet></ROW><ROW><id>6612906</id><snippet>def main():
    ROUTES = [
        ('/_ah/login_required',      handlers.OpenIDHandler),
    ]
    application = webapp.WSGIApplication(ROUTES, debug=True)
    util.run_wsgi_app(application)
if __name__ == '__main__':
  main()
</snippet></ROW><ROW><id>6612906</id><snippet>/_ah/login_required</snippet></ROW><ROW><id>6612963</id><snippet>import types, copy_reg
def code_ctor(*args):
    # delegate to new.code the construction of a new code object
    return types.CodeType(*args)
def reduce_code(co):
    # a reductor function must return a tuple with two items: first, the
    # constructor function to be called to rebuild the argument object
    # at a future de-serialization time; then, the tuple of arguments
    # that will need to be passed to the constructor function.
    if co.co_freevars or co.co_cellvars:
        raise ValueError, "Sorry, cannot pickle code objects from closures"
    return code_ctor, (co.co_argcount, co.co_nlocals, co.co_stacksize,
        co.co_flags, co.co_code, co.co_consts, co.co_names,
        co.co_varnames, co.co_filename, co.co_name, co.co_firstlineno,
        co.co_lnotab)
# register the reductor to be used for pickling objects of type 'CodeType'
copy_reg.pickle(types.CodeType, reduce_code)
if __name__ == '__main__':
    # example usage of our new ability to pickle code objects
    import cPickle
    # a function (which, inside, has a code object, of course)
    def f(x): print 'Hello,', x
    # serialize the function's code object to a string of bytes
    pickled_code = cPickle.dumps(f.func_code)
    # recover an equal code object from the string of bytes
    recovered_code = cPickle.loads(pickled_code)
    # build a new function around the rebuilt code object
    g = types.FunctionType(recovered_code, globals( ))
    # check what happens when the new function gets called
    g('world')
</snippet></ROW><ROW><id>6613322</id><snippet>with open(..., "w") as output:
    diff = context_diff(...)
    output.writelines(diff)
</snippet></ROW><ROW><id>6613322</id><snippet>file.writelines()</snippet></ROW><ROW><id>6613322</id><snippet>with</snippet></ROW><ROW><id>6613322</id><snippet>output = open(..., "w")
</snippet></ROW><ROW><id>6613322</id><snippet>output.close()</snippet></ROW><ROW><id>6613322</id><snippet>output</snippet></ROW><ROW><id>6613322</id><snippet>"w"</snippet></ROW><ROW><id>6613322</id><snippet>"r"</snippet></ROW><ROW><id>6613322</id><snippet>+</snippet></ROW><ROW><id>6613322</id><snippet>b</snippet></ROW><ROW><id>6613322</id><snippet>writelines</snippet></ROW><ROW><id>6613322</id><snippet>for line in diff: output.write(line)</snippet></ROW><ROW><id>6613482</id><snippet>fone = set(['apple', 'orange', 'ice', 'icecream'])
ftwo = set(['apple' ,'pear' ,'ice'])
# transforming to sets saves to check twice for the same combination

result = []
for wone in fone:
    for wtwo in ftwo:
        if wone.find(wtwo) != -1 or wtwo.find(wone) != -1:
            result.append(wone)
            result.append(wtwo)
for w in set(result):
    print w
</snippet></ROW><ROW><id>6613482</id><snippet>import difflib as dl

fone = set(['apple', 'orange', 'ice', 'icecream'])
ftwo = set(['apple' ,'pear' ,'ice'])

result = []
for wone in fone:
    for wtwo in ftwo:
        s = dl.SequenceMatcher(None, wone, wtwo)
        if s.ratio() &gt; 0.6:  #0.6 is the conventional threshold to define "close matches"
            result.append(wone)
            result.append(wtwo)
for w in set(result):
    print w
</snippet></ROW><ROW><id>6614153</id><snippet>self</snippet></ROW><ROW><id>6614153</id><snippet>helloObject.printHello()</snippet></ROW><ROW><id>6614153</id><snippet>class Hello:
  def printHello(self):
      print('Hello!')
</snippet></ROW><ROW><id>6614167</id><snippet>re1_matches = re.findall(re1, text)
re2_matches = re.findall(re2, text)
</snippet></ROW><ROW><id>6614167</id><snippet>re.match</snippet></ROW><ROW><id>6614167</id><snippet>re.search</snippet></ROW><ROW><id>6614167</id><snippet>&gt;&gt;&gt; re1 = r'(\d{1,3}[a-zA-Z]?/\d{1,3}[a-zA-Z]?)'
&gt;&gt;&gt; re2 = r'(\babc\b)'
&gt;&gt;&gt; re.findall(re1, text)
['100/64h', '120h/90', '200/100', '100h/100f']
&gt;&gt;&gt; re.findall(re2, text)
['abc', 'abc']
&gt;&gt;&gt; re1_matches = re.findall(re1, text)
&gt;&gt;&gt; re2_matches = re.findall(re2, text)
&gt;&gt;&gt; rex_nomatch = re.findall('conglomeration_of_sandwiches', text)
</snippet></ROW><ROW><id>6614167</id><snippet>and</snippet></ROW><ROW><id>6614167</id><snippet>&gt;&gt;&gt; not re1_matches and re2_matches
False
</snippet></ROW><ROW><id>6614167</id><snippet>&gt;&gt;&gt; not rex_nomatch and re1_matches
['100/64h', '120h/90', '200/100', '100h/100f']
</snippet></ROW><ROW><id>6614167</id><snippet>&gt;&gt;&gt; not rex_nomatch and re2_matches
['abc', 'abc']
</snippet></ROW><ROW><id>6614167</id><snippet>&gt;&gt;&gt; re1_matches and re2_matches
['abc', 'abc']
</snippet></ROW><ROW><id>6614167</id><snippet>&gt;&gt;&gt; re1_matches and re2_matches and re1_matches + re2_matches
['100/64h', '120h/90', '200/100', '100h/100f', 'abc', 'abc']
</snippet></ROW><ROW><id>6614280</id><snippet>&gt;&gt;&gt; import numpy as np
&gt;&gt;&gt; np.array(data_list).reshape(-1, 2)
array([[0, 1],
       [2, 3],
       [4, 5],
       [6, 7],
       [8, 9]])
</snippet></ROW><ROW><id>6614280</id><snippet>reshape</snippet></ROW><ROW><id>6614630</id><snippet>print
print 'Content-type: text/html\n\n'
</snippet></ROW><ROW><id>6614630</id><snippet>Content-type:</snippet></ROW><ROW><id>6614630</id><snippet>text/plain</snippet></ROW><ROW><id>6614630</id><snippet>print</snippet></ROW><ROW><id>6614975</id><snippet>i=0
new_list=[]
while i&lt;len(data_list):
  new_list.append(data_list[i:i+3])
  i+=3
</snippet></ROW><ROW><id>6615616</id><snippet>"r'.'"</snippet></ROW><ROW><id>6615616</id><snippet>re.sub("r'.'", "", v)</snippet></ROW><ROW><id>6615616</id><snippet>&gt;&gt;&gt; re.sub("r'.'", "", "This . won't match")
"This . won't match"
&gt;&gt;&gt; re.sub("r'.'", "", "This r'x' will match")
'This  will match'
</snippet></ROW><ROW><id>6615616</id><snippet>row['Pattern'] = repr(regex)</snippet></ROW><ROW><id>6615616</id><snippet>eval</snippet></ROW><ROW><id>6615616</id><snippet>eval</snippet></ROW><ROW><id>6615616</id><snippet>ast.literal_eval</snippet></ROW><ROW><id>6615620</id><snippet>gensim</snippet></ROW><ROW><id>6615620</id><snippet>PYTHONPATH</snippet></ROW><ROW><id>6615620</id><snippet>gensim.py</snippet></ROW><ROW><id>6615620</id><snippet>gensim</snippet></ROW><ROW><id>6616093</id><snippet>TM_PYTHON</snippet></ROW><ROW><id>6616093</id><snippet>Preferences</snippet></ROW><ROW><id>6616093</id><snippet>Advanced</snippet></ROW><ROW><id>6616093</id><snippet>Shell Variables</snippet></ROW><ROW><id>6616093</id><snippet>+</snippet></ROW><ROW><id>6616093</id><snippet>which python</snippet></ROW><ROW><id>6616446</id><snippet>np.loadtxt</snippet></ROW><ROW><id>6616446</id><snippet>genfromtxt</snippet></ROW><ROW><id>6616464</id><snippet>shapes</snippet></ROW><ROW><id>6616464</id><snippet>circles.py</snippet></ROW><ROW><id>6616464</id><snippet>from shapes import Shape

class Circle(Shape):
   ...
</snippet></ROW><ROW><id>6616464</id><snippet>import</snippet></ROW><ROW><id>6616594</id><snippet>plt.axis([2006, 2008, -1, 5])
</snippet></ROW><ROW><id>6616594</id><snippet>plt.xticks(a, map(str,a))
</snippet></ROW><ROW><id>6616594</id><snippet>matplotlib.pyplot</snippet></ROW><ROW><id>6616594</id><snippet>import matplotlib.pyplot as plt
</snippet></ROW><ROW><id>6616597</id><snippet>a_game = Game("central_corridor")
</snippet></ROW><ROW><id>6616597</id><snippet>Game.__init__("central_corridor")</snippet></ROW><ROW><id>6616597</id><snippet>self.start</snippet></ROW><ROW><id>6616597</id><snippet>a_game</snippet></ROW><ROW><id>6616597</id><snippet>Game</snippet></ROW><ROW><id>6616597</id><snippet>a_game.start</snippet></ROW><ROW><id>6616597</id><snippet>a_game.quips</snippet></ROW><ROW><id>6616597</id><snippet>a_game.death()</snippet></ROW><ROW><id>6616597</id><snippet>a_game.play()
</snippet></ROW><ROW><id>6616597</id><snippet>play()</snippet></ROW><ROW><id>6616597</id><snippet>a_game</snippet></ROW><ROW><id>6616597</id><snippet>Game</snippet></ROW><ROW><id>6616597</id><snippet>a_game</snippet></ROW><ROW><id>6616597</id><snippet>self</snippet></ROW><ROW><id>6616597</id><snippet>a_game</snippet></ROW><ROW><id>6616597</id><snippet>next = self.start
</snippet></ROW><ROW><id>6616597</id><snippet>self.start</snippet></ROW><ROW><id>6616597</id><snippet>__init__()</snippet></ROW><ROW><id>6616597</id><snippet>next</snippet></ROW><ROW><id>6616597</id><snippet>while True:</snippet></ROW><ROW><id>6616597</id><snippet>getattr()</snippet></ROW><ROW><id>6616597</id><snippet>getattr()</snippet></ROW><ROW><id>6616597</id><snippet>self</snippet></ROW><ROW><id>6616597</id><snippet>"central_corridor"</snippet></ROW><ROW><id>6616597</id><snippet>room</snippet></ROW><ROW><id>6616597</id><snippet>self.central_corridor</snippet></ROW><ROW><id>6616597</id><snippet>next = room()</snippet></ROW><ROW><id>6616597</id><snippet>self.central_corridor</snippet></ROW><ROW><id>6616597</id><snippet>next = self.central_corridor()
</snippet></ROW><ROW><id>6616597</id><snippet>self.central_corridor()</snippet></ROW><ROW><id>6616597</id><snippet>next</snippet></ROW><ROW><id>6616597</id><snippet>self.laser_weapon_armory</snippet></ROW><ROW><id>6616597</id><snippet>self.laser_weapon_armory</snippet></ROW><ROW><id>6616597</id><snippet>next</snippet></ROW><ROW><id>6616597</id><snippet>self.death</snippet></ROW><ROW><id>6616597</id><snippet>self.death</snippet></ROW><ROW><id>6616597</id><snippet>exit(1)</snippet></ROW><ROW><id>6616597</id><snippet>exit</snippet></ROW><ROW><id>6616597</id><snippet>sys</snippet></ROW><ROW><id>6616620</id><snippet>&lt;html&gt;
&lt;head&gt;
&lt;script language="javascript"&gt;

window.onload = function(){
    var entities = [{entity:"scedil", char:"č"},
                    {entity:"ccaron", char:"ş"}]; // array of entities to replace

    for (var i in entities){
        var regex = new RegExp("(\&amp;|\&amp;)"+entities[i].entity+";", "ig");
        document.body.innerHTML = document.body.innerHTML.replace(regex, entities[i].char);
    }
}

&lt;/script&gt;
&lt;/head&gt;
&lt;body&gt;
These entities will be replaced: &amp;scedil; and &amp;ccaron;
&lt;/body&gt;
</snippet></ROW><ROW><id>6616620</id><snippet>...
var entities = [{entity:"scedil", char:"č"},
                {entity:"ccaron", char:"ş"}]; // array of entities to replace
...
</snippet></ROW><ROW><id>6616642</id><snippet>data = ['text', 'foo2', 'foo1', 'sample']
indeces = (i for i,val in enumerate(data) if val.startswith('foo'))
</snippet></ROW><ROW><id>6616642</id><snippet>from re import match
data = ['text', 'foo2', 'foo1', 'sample']
indeces = (i for i,val in enumerate(data) if match('foo', val))
</snippet></ROW><ROW><id>6616849</id><snippet>inspect.getargspec</snippet></ROW><ROW><id>6616849</id><snippet>inspect.getargspec</snippet></ROW><ROW><id>6616849</id><snippet>PyObject</snippet></ROW><ROW><id>6616849</id><snippet>PyTuple_GetItem(returned_tuple, 0)</snippet></ROW><ROW><id>6616849</id><snippet>PyObject_Size()</snippet></ROW><ROW><id>6616849</id><snippet>PyObject_Length()</snippet></ROW><ROW><id>6616849</id><snippet>Py_None</snippet></ROW><ROW><id>6616849</id><snippet>&gt;&gt;&gt; import inspect
&gt;&gt;&gt; def testfunc(a, b, c, *d, **e):
    pass

&gt;&gt;&gt; inspect.getargspec(testfunc)
ArgSpec(args=['a', 'b', 'c'], varargs='d', keywords='e', defaults=None)
</snippet></ROW><ROW><id>6616849</id><snippet>PyObject *pName, *pInspect, *argspec_tuple, *arglist;
int size;

pName = PyString_FromString("inspect");

if (pName)
{
    pInspect = PyImport_Import(pName);
    Py_DECREF(pName);


    if (pInspect)
    {
        pName = PyString_FromString("getargspec");

        if (pName)
        {
            argspec_tuple = PyObject_CallMethodObjArgs(pInspect, pName, pFunc, NULL);
            Py_DECREF(pName);

            if (argspec_tuple)
            {
                arglist = PyTuple_GetItem(argspec_tuple, 0);

                if (arglist)
                {
                    size = PyObject_Size(arglist)
                         + (PyTuple_GetItem(argspec_tuple, 1) == Py_None ? 0 : 1)
                         + (PyTuple_GetItem(argspec_tuple, 2) == Py_None ? 0 : 1);  // Haven't actually tested this, but it should work
                }
            }
        }
    }
}
</snippet></ROW><ROW><id>6616926</id><snippet>dict</snippet></ROW><ROW><id>6616926</id><snippet>&gt;&gt;&gt; a = [['test',154],['test2',256]]
&gt;&gt;&gt; dict(a)
{'test': 154, 'test2': 256}
</snippet></ROW><ROW><id>6617214</id><snippet>singular value decomposition</snippet></ROW><ROW><id>6617365</id><snippet>class Result(models.Model):
     user = models.ForeignKey(User)
     paper = models.ForeignKey(ExamPaper)
     question = models.ForeignKey(Question)
     marks = models.IntegerField()
     result = models.CharField()

     class Meta:
         unique_together = (("user", "paper", "question"), )
</snippet></ROW><ROW><id>6617365</id><snippet>ForeignKey</snippet></ROW><ROW><id>6617365</id><snippet>paper</snippet></ROW><ROW><id>6617365</id><snippet>Result</snippet></ROW><ROW><id>6617418</id><snippet>&lt;DstTzInfo 'US/Pacific' PST-1 day, 16:00:00 STD&gt;</snippet></ROW><ROW><id>6617418</id><snippet>pytz</snippet></ROW><ROW><id>6617418</id><snippet>datetime.datetime</snippet></ROW><ROW><id>6617418</id><snippet>tzinfo</snippet></ROW><ROW><id>6617418</id><snippet>import pytz
import datetime as dt

now=dt.datetime(year=2011, month=7, day=7)
utc=pytz.utc
pacific=pytz.timezone('US/Pacific')    
now_pacific=pacific.localize(now)    
now_utc=now_pacific.astimezone(utc)

print(repr(now_pacific))
# datetime.datetime(2011, 7, 7, 0, 0, tzinfo=&lt;DstTzInfo 'US/Pacific' PDT-1 day, 17:00:00 DST&gt;)
print(repr(now_utc))
# datetime.datetime(2011, 7, 7, 7, 0, tzinfo=&lt;UTC&gt;)
</snippet></ROW><ROW><id>6617457</id><snippet>C:\foo</snippet></ROW><ROW><id>6617457</id><snippet>import wx</snippet></ROW><ROW><id>6617457</id><snippet>wx.(py/pyc/pyd/dll/so)</snippet></ROW><ROW><id>6617457</id><snippet>wx</snippet></ROW><ROW><id>6617457</id><snippet>__init__.py</snippet></ROW><ROW><id>6617457</id><snippet>wx</snippet></ROW><ROW><id>6617474</id><snippet>global</snippet></ROW><ROW><id>6617474</id><snippet>def all</snippet></ROW><ROW><id>6617474</id><snippet>all</snippet></ROW><ROW><id>6617474</id><snippet>if-block</snippet></ROW><ROW><id>6617474</id><snippet>all</snippet></ROW><ROW><id>6617474</id><snippet>if-block</snippet></ROW><ROW><id>6617474</id><snippet>all</snippet></ROW><ROW><id>6617474</id><snippet>if not 'all' ...</snippet></ROW><ROW><id>6617474</id><snippet>def len_utf8_char</snippet></ROW><ROW><id>6617497</id><snippet>GET</snippet></ROW><ROW><id>6617497</id><snippet>sys.stdin.read()</snippet></ROW><ROW><id>6617497</id><snippet>os.environ['QUERY_STRING']</snippet></ROW><ROW><id>6617497</id><snippet>GET /?number=28 HTTP/1.0
</snippet></ROW><ROW><id>6617497</id><snippet>Host:</snippet></ROW><ROW><id>6617497</id><snippet>POST</snippet></ROW><ROW><id>6617497</id><snippet>Content-Length</snippet></ROW><ROW><id>6617497</id><snippet>POST / HTTP/1.0
Host: localhost: 8080
Content-Length: 2
Content-Type: text/plain

28
</snippet></ROW><ROW><id>6617497</id><snippet>$ curl -vs -d'28' -H'Content-Type: text/plain' http://localhost:8004/
* About to connect() to localhost port 8004 (#0)
*   Trying ::1... Connection refused
*   Trying 127.0.0.1... connected
* Connected to localhost (127.0.0.1) port 8004 (#0)
&gt; POST / HTTP/1.1
&gt; User-Agent: curl/7.20.1 (x86_64-redhat-linux-gnu) libcurl/7.20.1 NSS/3.12.6.2 zlib/1.2.3 libidn/1.16 libssh2/1.2.4
&gt; Host: localhost:8004
&gt; Accept: */*
&gt; Content-Type: text/plain
&gt; Content-Length: 2
&gt; 
* HTTP 1.0, assume close after body
&lt; HTTP/1.0 200 OK
&lt; Date: Thu, 07 Jul 2011 22:09:17 GMT
&lt; Server: WSGIServer/0.1 Python/2.6.4
&lt; Content-Type: text/html; charset=UTF-8
&lt; Content-Length: 45
&lt; 
* Closing connection #0
{'body': '28', 'method': 'POST', 'query': []}
</snippet></ROW><ROW><id>6617497</id><snippet>&gt;&gt;&gt; import httplib
&gt;&gt;&gt; headers = {"Content-type": "text/plain",
...            "Accept": "text/plain"}
&gt;&gt;&gt; 
&gt;&gt;&gt; conn = httplib.HTTPConnection("localhost:8004")
&gt;&gt;&gt; conn.request("POST", "/", "28", headers)
&gt;&gt;&gt; response = conn.getresponse()
&gt;&gt;&gt; print response.read()
{'body': '28', 'method': 'POST', 'query': []}
&gt;&gt;&gt; 
</snippet></ROW><ROW><id>6617707</id><snippet>button = gtk.Button("A Button")
</snippet></ROW><ROW><id>6617707</id><snippet>menu = gtk.Menu()
</snippet></ROW><ROW><id>6617707</id><snippet>menu_item = gtk.MenuItem("A menu item")
menu.append(menu_item)
menu_item.show()
</snippet></ROW><ROW><id>6617707</id><snippet>button.connect_object("event", self.button_press, menu)
</snippet></ROW><ROW><id>6617707</id><snippet>def button_press(self, widget, event):
    if event.type == gtk.gdk.BUTTON_PRESS and event.button == 3:
        #make widget popup
        widget.popup(None, None, None, event.button, event.time)
        pass
</snippet></ROW><ROW><id>6617713</id><snippet>Pickler.save()</snippet></ROW><ROW><id>6617713</id><snippet>p.dump(saveobj)</snippet></ROW><ROW><id>6617713</id><snippet>p.save(saveobj)</snippet></ROW><ROW><id>6617713</id><snippet>_save</snippet></ROW><ROW><id>6617713</id><snippet>dump</snippet></ROW><ROW><id>6617713</id><snippet>pickle.dump</snippet></ROW><ROW><id>6617822</id><snippet>/usr/lib/python2.7</snippet></ROW><ROW><id>6617822</id><snippet>/usr/lib/python2.7/lib-tk</snippet></ROW><ROW><id>6617822</id><snippet>/usr/lib/python2.7/plat-linux2</snippet></ROW><ROW><id>6617822</id><snippet>temp</snippet></ROW><ROW><id>6617822</id><snippet>C:\Pythonx.x</snippet></ROW><ROW><id>6617822</id><snippet>plat-linux2</snippet></ROW><ROW><id>6617822</id><snippet>lib-tk</snippet></ROW><ROW><id>6617822</id><snippet>/usr/lib/python2.7</snippet></ROW><ROW><id>6617822</id><snippet>/Lib</snippet></ROW><ROW><id>6618179</id><snippet>set_item</snippet></ROW><ROW><id>6618179</id><snippet>insert</snippet></ROW><ROW><id>6618179</id><snippet>delete</snippet></ROW><ROW><id>6618179</id><snippet>find</snippet></ROW><ROW><id>6618179</id><snippet>find_left</snippet></ROW><ROW><id>6618179</id><snippet>move_cursor</snippet></ROW><ROW><id>6618179</id><snippet>IndexError</snippet></ROW><ROW><id>6618179</id><snippet>__getitem__</snippet></ROW><ROW><id>6618179</id><snippet>__setitem__</snippet></ROW><ROW><id>6618179</id><snippet>__delitem__</snippet></ROW><ROW><id>6618179</id><snippet>__getslice__</snippet></ROW><ROW><id>6618179</id><snippet>__setslice__</snippet></ROW><ROW><id>6618179</id><snippet>insert</snippet></ROW><ROW><id>6618179</id><snippet>&gt;&gt;&gt; l1 = [1, 2, 3, 4]
&gt;&gt;&gt; l2 = [5, 6, 7, 8]
&gt;&gt;&gt; l3 = [l1, l2]
&gt;&gt;&gt; l3
[[1, 2, 3, 4], [5, 6, 7, 8]]
</snippet></ROW><ROW><id>6618179</id><snippet>5</snippet></ROW><ROW><id>6618179</id><snippet>&gt;&gt;&gt; nli = NestedListIter(l3)
&gt;&gt;&gt; nli.find(5)
&gt;&gt;&gt; nli.insert(9)
&gt;&gt;&gt; nli.nested_list
[[1, 2, 3, 4], [9, 5, 6, 7, 8]]
</snippet></ROW><ROW><id>6618179</id><snippet>l2</snippet></ROW><ROW><id>6618179</id><snippet>l3</snippet></ROW><ROW><id>6618179</id><snippet>&gt;&gt;&gt; nli._insert_at(nli.stack[:-1], 10)
&gt;&gt;&gt; nli.nested_list
[[1, 2, 3, 4], 10, [9, 5, 6, 7, 8]]
&gt;&gt;&gt; nli.get_item()
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
  File "nestedlistiterator.py", line 130, in get_item
    return self._get_item_at(self.stack)
  File "nestedlistiterator.py", line 39, in _get_item_at
    item = item[i]
TypeError: 'int' object is unsubscriptable
</snippet></ROW><ROW><id>6618179</id><snippet>insert_between_branches</snippet></ROW><ROW><id>6618179</id><snippet>4</snippet></ROW><ROW><id>6618179</id><snippet>l2</snippet></ROW><ROW><id>6618179</id><snippet>5</snippet></ROW><ROW><id>6618179</id><snippet>4</snippet></ROW><ROW><id>6618179</id><snippet>insert</snippet></ROW><ROW><id>6618179</id><snippet>4</snippet></ROW><ROW><id>6618179</id><snippet>l1</snippet></ROW><ROW><id>6618179</id><snippet>&gt;&gt;&gt; nli.go_to_head()
&gt;&gt;&gt; nli.find(4)
&gt;&gt;&gt; nli.insert(11)
&gt;&gt;&gt; nli.nested_list
[[1, 2, 3, 11, 4], 10, [9, 5, 6, 7, 8]]
</snippet></ROW><ROW><id>6618179</id><snippet>insert</snippet></ROW><ROW><id>6618179</id><snippet>left_insert</snippet></ROW><ROW><id>6618179</id><snippet>right_insert</snippet></ROW><ROW><id>6618179</id><snippet>enumerate_nested</snippet></ROW><ROW><id>6618179</id><snippet>import collections

class NestedListIter(object):
    '''A mutable container that enables flat traversal of a nested tree of 
    lists. nested_list should contain only a list-like mutable sequence. 
    To preserve a clear demarcation between 'leaves' and 'branches', empty 
    sequences are not allowed as toplevel objects.'''
    def __init__(self, nested_list):
        if not nested_list:
            raise ValueError, 'nested_list must be a non-empty sequence'
        self.nested_list = nested_list # at some point, vet this to make sure
        self.go_to_head()              # it contains no empty sequences

    def _is_sequence(self, item=None):
        '''Private method to test whether an item is a non-string sequence.
        If item is None, test current item.'''
        if item is None:
            item = self._get_item_at(self.stack)
        return isinstance(item, collections.Sequence) and not isinstance(item, basestring)

    def _is_in_range(self, index_tuple=None):
        '''Private method to test whether an index is in range. 
        If index is None, test current index.'''
        if index_tuple is None:
            index_tuple = self.stack
        if any(x &lt; 0 for x in index_tuple):
            return False
        try:
            self._get_item_at(index_tuple)
        except IndexError:
            return False
        else:
            return True

    def _get_item_at(self, index_tuple):
        '''Private method to get item at an arbitrary index, with no bounds checking.'''
        item = self.nested_list
        for i in index_tuple:
            item = item[i]
        return item

    def _set_item_at(self, index_tuple, value):
        '''Private method to set item at an arbitrary index, with no bounds checking.
        Throws a ValueError if value is an empty non-string sequence.'''
        if self._is_sequence(value) and not value:
            raise ValueError, "Cannot set an empty list!"
        containing_list = self._get_item_at(index_tuple[:-1])
        containing_list[index_tuple[-1]] = value

    def _insert_at(self, index_tuple, value):
        '''Private method to insert item at an arbitrary index, with no bounds checking.
        Throws a ValueError if value is an empty non-string sequence.'''
        if self._is_sequence(value) and not value:
            raise ValueError, "Cannot insert an empty list!"
        containing_list = self._get_item_at(index_tuple[:-1])
        containing_list.insert(index_tuple[-1], value)

    def _delete_at(self, index_tuple):
        '''Private method to delete item at an arbitrary index, with no bounds checking.
        Recursively deletes a resulting branch of empty lists.'''
        containing_list = self._get_item_at(index_tuple[:-1])
        del containing_list[index_tuple[-1]]
        if not self._get_item_at(index_tuple[:-1]):
            self._delete_at(index_tuple[:-1])

    def _increment_stack(self):
        '''Private method that tires to increment the top value of the stack.
        Returns True on success, False on failure (empty stack).'''
        try:
            self.stack[-1] += 1
        except IndexError:
            return False
        else: 
            return True

    def _decrement_stack(self):
        '''Private method that tries to decrement the top value of the stack.
        Returns True on success, False on failure (empty stack).'''
        try:
            self.stack[-1] -= 1
        except IndexError:
            return False
        else:
            return True

    def go_to_head(self):
        '''Move the cursor to the head of the nested list.'''
        self.stack = []
        while self._is_sequence():
            self.stack.append(0)

    def go_to_tail(self):
        self.stack = []
        '''Move the cursor to the tail of the nested list.'''
        while self._is_sequence():
            self.stack.append(len(self.get_item()) - 1)

    def right(self):
        '''Move cursor one step right in the nested list.'''
        while self._increment_stack() and not self._is_in_range():
            self.stack.pop()
        if not self.stack:
            self.go_to_tail()
            return False
        while self._is_sequence():
            self.stack.append(0)
        return True

    def left(self):
        '''Move cursor one step left in the nested list.'''
        while self._decrement_stack() and not self._is_in_range():
            self.stack.pop()
        if not self.stack:
            self.go_to_head()
            return False
        while self._is_sequence():
            self.stack.append(len(self.get_item()) - 1)
        return True

    def move_cursor(self, index_tuple):
        '''Move cursor to the location indicated by index_tuple.
        Raises an error if index_tuple is out of range or doesn't correspond
        to a toplevel object.'''
        item = self._get_item_at(index_tuple)
        if self._is_sequence(item):
            raise IndexError, 'index_tuple must point to a toplevel object'

    def get_item(self):
        '''Get the item at the cursor location.'''
        return self._get_item_at(self.stack)

    def set_item(self, value):
        '''Set the item a the cursor locaiton.'''
        return self._set_item_at(self.stack, value)

    def insert(self, value):
        '''Insert an item at the cursor location. If value is a sequence, 
        cursor moves to the first toplevel object in value after insertion. 
        Otherwise, cursor does not move.'''
        temp_stack = self.stack[:]
        self.left()
        self._insert_at(temp_stack, value)
        self.right()

    def delete(self):
        '''Deete an item at the cursor location. Cursor does not move.'''
        temp_stack = self.stack[:]
        self.left()
        self._delete_at(temp_stack)
        self.right()

    def iterate(self):
        '''Iterate over the values in nested_list in sequence'''
        self.go_to_head()
        yield self.get_item()
        while self.right():
            yield self.get_item()

    def iterate_left(self):
        '''Iterate over the values in nested_list in reverse.'''
        self.go_to_tail()
        yield self.get_item()
        while self.left():
            yield self.get_item()

    def find(self, value):
        '''Search for value in nested_list; move cursor to first location of value.'''
        for i in self.iterate():
            if i == value:
                break

    def find_left(self, value):
        '''Search for value backwards in nested_list; move cursor to last location of value.'''
        for i in self.iterate_left():
            if i == value:
                break

def _NLI_Test():
    l = [1, 2, 3, ['a', 'b', 'c'], 4, ['d', 'e', [100, 200, 300]], 5, ['a', 'b', 'c'], 6]
    nli = NestedListIter(l)
    print nli.nested_list
    for i in nli.iterate():
        print i,
    print
    for i in nli.iterate_left():
        print i,
    print

    nli.go_to_head()
    for i in range(5):
        nli.right()
    nli.insert('cow')
    nli.insert(['c', ['o', 'w']])
    print nli.nested_list
    nli.find('cow')
    print nli.get_item()
    nli.delete()
    print nli.nested_list
    nli.find('c')
    nli.delete()
    print nli.nested_list
    nli.find_left('w')
    nli.delete()
    nli.find('o')
    nli.delete()
    print nli.nested_list
    print nli.nested_list == l
    nli.find(100)
    nli.set_item(100.1)
    print nli.nested_list

if __name__ == '__main__':
    _NLI_Test()
</snippet></ROW><ROW><id>6618264</id><snippet>choices = list(p.choice_set.all())</snippet></ROW><ROW><id>6618264</id><snippet>{% for choice in poll.choice_set.all %}</snippet></ROW><ROW><id>6618264</id><snippet>def results(request, poll_id):
    ...
    return render_to_response('polls/results.html', {'poll': p, 'total': total_votes, 'choices': choices}, context_instance=RequestContext(request))
</snippet></ROW><ROW><id>6618264</id><snippet>{% for choice in choices %}
    &lt;li&gt;{{ choice.choice }} - {{ choice.percentage }} ({{ choice.votes }}) &lt;/li&gt;
{% endfor %}
</snippet></ROW><ROW><id>6618279</id><snippet>&lt;select name="cboOptions" onchange="this.form.submit();"&gt;
</snippet></ROW><ROW><id>6618279</id><snippet> &lt;form action="selections.cgi" method="POST"&gt;
</snippet></ROW><ROW><id>6618543</id><snippet>[x for (y,x) in sorted(zip(Y,X))]
</snippet></ROW><ROW><id>6618585</id><snippet>email.message.Message</snippet></ROW><ROW><id>6618585</id><snippet>Date</snippet></ROW><ROW><id>6618585</id><snippet>From</snippet></ROW><ROW><id>6618585</id><snippet>from datetime import datetime, timedelta
import email
from imapclient import IMAPClient

HOST = 'imap.gmail.com'
USERNAME = 'username'
PASSWORD = 'password'
ssl = True

today = datetime.today()
cutoff = today - timedelta(days=5)

## Connect, login and select the INBOX
server = IMAPClient(HOST, use_uid=True, ssl=ssl)
server.login(USERNAME, PASSWORD)
select_info = server.select_folder('INBOX')

## Search for relevant messages
## see http://tools.ietf.org/html/rfc3501#section-6.4.5
messages = server.search(
    ['FROM "Alerts@foobank.com"', 'SINCE %s' % cutoff.strftime('%d-%b-%Y')])
response = server.fetch(messages, ['RFC822'])

for msgid, data in response.iteritems():
    msg_string = data['RFC822']
    msg = email.message_from_string(msg_string)
    print 'ID %d: From: %s Date: %s' % (msgid, msg['From'], msg['date'])
</snippet></ROW><ROW><id>6618621</id><snippet>y[x.index(2)]
</snippet></ROW><ROW><id>6618621</id><snippet>y</snippet></ROW><ROW><id>6618621</id><snippet>2</snippet></ROW><ROW><id>6618621</id><snippet>x</snippet></ROW><ROW><id>6618671</id><snippet># account_name should already be defined
log = lambda msg: logger.info(msg, extra={'account': account_name})

###

log('Processing account...')
</snippet></ROW><ROW><id>6618671</id><snippet>extra</snippet></ROW><ROW><id>6618671</id><snippet>extra</snippet></ROW><ROW><id>6618671</id><snippet>format = '%(asctime)s - %(name)s - %(levelname)s - %(message)s - %(account)s'
</snippet></ROW><ROW><id>6618671</id><snippet>account</snippet></ROW><ROW><id>6618671</id><snippet>extra</snippet></ROW><ROW><id>6618712</id><snippet>datetime.date.month()</snippet></ROW><ROW><id>6618712</id><snippet>datetime.datetime.now().month</snippet></ROW><ROW><id>6618759</id><snippet>dev_appserver</snippet></ROW><ROW><id>6618825</id><snippet>inspect</snippet></ROW><ROW><id>6618825</id><snippet>def show_callers_locals():
    """Print the local variables in the caller's frame."""
    import inspect
    frame = inspect.currentframe()
    try:
        print frame.f_back.f_locals
    finally:
        del frame
</snippet></ROW><ROW><id>6619290</id><snippet>Queue.task_done</snippet></ROW><ROW><id>6619290</id><snippet>Queue.wait</snippet></ROW><ROW><id>6619290</id><snippet>import Queue
import threading

class StuffDoer(threading.Thread):
    def __init__(self):
        threading.Thread.__init__(self)
        self.setDaemon(True)
        self.max_n_times = 0
        self.total_n_times = 0
        self.do_queue = Queue.Queue()

    def run(self):
        # this part is outside of my control
        while True:
            self._do_stuff()
            # do other stuff

    def _do_stuff(self):
        # this part is under my control
        if self.total_n_times &gt;= self.max_n_times:
            try:
                self.max_n_times += self.do_queue.get(block=False)
            except Queue.Empty, e:
                pass
        if self.max_n_times &gt; self.total_n_times:
            # do stuff that must execute in the background thread
            self.total_n_times += 1
            if self.total_n_times &gt;= self.max_n_times:
                self.do_queue.task_done()

sd = StuffDoer()
sd.start()

def do_stuff(n_times):
    sd.do_queue.put(n_times)
    sd.do_queue.join()
    assert (sd.total_n_times == sd.max_n_times)
</snippet></ROW><ROW><id>6619321</id><snippet>virtualenv</snippet></ROW><ROW><id>6619450</id><snippet>paste.gzipper.GzipMiddleware</snippet></ROW><ROW><id>6619450</id><snippet>[filter:gzip]
use = egg:Paste#gzip
compress_level = 6

[pipeline:main]
pipeline =
    gzip
    app
</snippet></ROW><ROW><id>6619450</id><snippet>egg:Paste#gzip</snippet></ROW><ROW><id>6619450</id><snippet>gzip</snippet></ROW><ROW><id>6620130</id><snippet>for item in L[::-1]:
    print item
</snippet></ROW><ROW><id>6620603</id><snippet>import json

def some_http_call(request)
   json_string = request.GET.get('http_parameter_key', '')
   json_object = json.loads(json_string)

   data = json_object["data"]
   for x in data:
       print x["name"]
</snippet></ROW><ROW><id>6620603</id><snippet>some_http_call</snippet></ROW><ROW><id>6620603</id><snippet>http_parameter_key</snippet></ROW><ROW><id>6620603</id><snippet>data</snippet></ROW><ROW><id>6620717</id><snippet>&gt;&gt;&gt; import re
&gt;&gt;&gt; regex, phrases = (r'why (.*) i (.*)\?', 
... ( "You %s %s?", 
... "Perhaps you only think you %s %s"))
&gt;&gt;&gt; phrase1, phrase2 = phrases
&gt;&gt;&gt; groups = re.search(regex, 'why am i dumb?')
&gt;&gt;&gt; phrase1 % (groups.group(1), groups.group(2))
'You am dumb?'
&gt;&gt;&gt; phrase2 % (groups.group(1), groups.group(2))
'Perhaps you only think you am dumb'
</snippet></ROW><ROW><id>6620717</id><snippet>r'blahblah'</snippet></ROW><ROW><id>6620717</id><snippet>r</snippet></ROW><ROW><id>6620717</id><snippet>&gt;&gt;&gt; import re
&gt;&gt;&gt; regex, phrases = (r'why (.*) i (.*)\?',
... ( r'You \g&lt;1&gt; \g&lt;2&gt;?',
...   r'Perhaps you only think you \g&lt;1&gt; \g&lt;2&gt;.'))
&gt;&gt;&gt; phrase1, phrase2 = phrases
&gt;&gt;&gt; re.sub(regex, phrase1, 'why am i dumb?')
'You am dumb?'
&gt;&gt;&gt; re.sub(regex, phrase2, 'why am i dumb?')
'Perhaps you only think you am dumb.'
</snippet></ROW><ROW><id>6620827</id><snippet>communicate</snippet></ROW><ROW><id>6620827</id><snippet>os.waitpid</snippet></ROW><ROW><id>6620827</id><snippet>communicate</snippet></ROW><ROW><id>6620877</id><snippet>b.bar()   # echoes B.foo
</snippet></ROW><ROW><id>6620877</id><snippet>B</snippet></ROW><ROW><id>6620877</id><snippet>bar</snippet></ROW><ROW><id>6620877</id><snippet>A</snippet></ROW><ROW><id>6620877</id><snippet>A</snippet></ROW><ROW><id>6620877</id><snippet>bar</snippet></ROW><ROW><id>6620877</id><snippet>self.foo</snippet></ROW><ROW><id>6620877</id><snippet>B</snippet></ROW><ROW><id>6620877</id><snippet>B</snippet></ROW><ROW><id>6620877</id><snippet>foo</snippet></ROW><ROW><id>6620877</id><snippet>A</snippet></ROW><ROW><id>6620877</id><snippet>foo</snippet></ROW><ROW><id>6620877</id><snippet>bar</snippet></ROW><ROW><id>6620877</id><snippet>A</snippet></ROW><ROW><id>6620877</id><snippet>self.foo</snippet></ROW><ROW><id>6620877</id><snippet>B.foo</snippet></ROW><ROW><id>6620877</id><snippet>A.foo</snippet></ROW><ROW><id>6621918</id><snippet>&gt;&gt;&gt; import ntplib
&gt;&gt;&gt; c = ntplib.NTPClient()
&gt;&gt;&gt; response = c.request('europe.pool.ntp.org', version=3)
&gt;&gt;&gt; response.offset
-0.143156766891
</snippet></ROW><ROW><id>6622125</id><snippet>*x</snippet></ROW><ROW><id>6622125</id><snippet>x</snippet></ROW><ROW><id>6622125</id><snippet>greeter(*(params.items()))</snippet></ROW><ROW><id>6622440</id><snippet>Class</snippet></ROW><ROW><id>6622440</id><snippet>list.get(packetId).newInstance()</snippet></ROW><ROW><id>6622610</id><snippet>%for el in seq:
    %if foo:
        pass
    %elif bar:
        pass
    %else:
        pass
    %endif
%endfor
</snippet></ROW><ROW><id>6623236</id><snippet>class FacebookApiIntegrator(object):

    def process_request(self, request):
        if request.user.is_authenticated():# check if user has logged in
            request.facebook = &lt;your profile func or obj..&gt;
</snippet></ROW><ROW><id>6623236</id><snippet>request.facebook
</snippet></ROW><ROW><id>6623938</id><snippet>from pyramid.renderers import get_renderer

def add_base_template(event):
    base = get_renderer('templates/base.pt').implementation()
    base2 = get_renderer('templates/base2.pt').implementation()
    event.update({'base': base, 'base2': base2})
</snippet></ROW><ROW><id>6623938</id><snippet>&lt;html xmlns="http://www.w3.org/1999/xhtml"
      xmlns:tal="http://xml.zope.org/namespaces/tal"
      xmlns:metal="http://xml.zope.org/namespaces/metal"
      metal:use-macro="base"&gt;
    &lt;tal:block metal:fill-slot="content"&gt;
        My awesome content.
    &lt;/tal:block&gt;
&lt;/html&gt;
</snippet></ROW><ROW><id>6623938</id><snippet>&lt;html xmlns="http://www.w3.org/1999/xhtml"
      xmlns:tal="http://xml.zope.org/namespaces/tal"
      xmlns:metal="http://xml.zope.org/namespaces/metal"
      metal:use-macro="base2"&gt;
    &lt;tal:block metal:fill-slot="content"&gt;
        Content on a totally different page.
    &lt;/tal:block&gt;
</snippet></ROW><ROW><id>6623938</id><snippet>&lt;html xmlns="http://www.w3.org/1999/xhtml"
      xmlns:tal="http://xml.zope.org/namespaces/tal"
      xmlns:metal="http://xml.zope.org/namespaces/metal"&gt;
    &lt;body&gt;
        &lt;div metal:use-macro="section1"&gt;
            &lt;tal:block metal:fill-slot="content"&gt;
                Content for template "section1".
            &lt;/tal:block&gt;
        &lt;/div&gt;
        &lt;div metal:use-macro="section2"&gt;
            &lt;tal:block metal:fill-slot="content"&gt;
                Content for template "section2".
            &lt;/tal:block&gt;
        &lt;/div&gt;
    &lt;/body&gt;
</snippet></ROW><ROW><id>6623943</id><snippet>dataStr = 'Abc Defg Hijk Lmn'
for word in reversed(dataStr.split()):
    # do something with word
</snippet></ROW><ROW><id>6623943</id><snippet>dataStr = 'Abc Defg Hijk Lmn'
removeLastWord = lambda line: ' '.join([word for word in line.split()[:-1]])
dataStr = removeLastWord(dataStr)
&gt;&gt;&gt; 'Abc Defg Hijk'
dataStr = removeLastWord(dataStr)
&gt;&gt;&gt; 'Abc Defg'
dataStr = removeLastWord(dataStr)
&gt;&gt;&gt; 'Abc'
</snippet></ROW><ROW><id>6623943</id><snippet>searchTxt = """Abc Defg Hijk Lmn
Xyz Lmn jkf gkjhg"""

data = """kggf **Abc Defg Hijk** fgff jfkjgk djkfkgf
 Akggf **Abc ** fgff jfkjgk djkfkgf
 Akggf **Abc Defg  fgff jfkjgk djkfkgf
 gjshgs gskk **Xyz Lmn jkf**
 fgsgdf fkgksk **Xyz Lmn**"""

searchWords = []
for line in (line for line in searchTxt.split('\n') if line.strip()):
    words = line.split()
    searchWords.extend([' '.join(words[:i]) for i in xrange(len(words), 0, -1)])

searchWords = sorted(searchWords, key=len, reverse=True)# to look first for the longest string match

res = set([line for sword in searchWords for line in data.split('\n') if sword in line])

# OR

res = []
for line in data.split('\n'):
    for sword in searchWords:
        if sword in line:
            res.append(line)
            break
</snippet></ROW><ROW><id>6623943</id><snippet>resultText = '\n'.join(res)
</snippet></ROW><ROW><id>6624267</id><snippet>from sqlalchemy import func
Document.query.filter(func.char_length(Document.doc_number)==5).all()
</snippet></ROW><ROW><id>6624521</id><snippet>binascii</snippet></ROW><ROW><id>6624567</id><snippet>print "hello"</snippet></ROW><ROW><id>6624567</id><snippet>a = 1
if a:
    print "hello"
</snippet></ROW><ROW><id>6624567</id><snippet>{}</snippet></ROW><ROW><id>6624782</id><snippet>def test():
    s = r"""    

FOO=a \    

  b

  """
    import re
    print repr(s)
    print '---------------------'
    regex = re.compile(r'^FOO=(.+)(?&lt;!\\)$', re.M)
    print regex.search(s).group(1)
    print '---------------------'
    regex = re.compile(r'^FOO=(.+)(?&lt;!\\)$', re.M|re.DOTALL)
    print regex.search(s).group(1)

test()
</snippet></ROW><ROW><id>6624782</id><snippet>'    \n\nFOO=a \\    \n\n  b\n\n  '
---------------------
a \    
-----
'a \\    '
---------------------
a \    

  b


-----
'a \\    \n\n  b\n\n  '
</snippet></ROW><ROW><id>6624964</id><snippet>required=False</snippet></ROW><ROW><id>6624964</id><snippet>field = TreeNodeChoiceField(
                            required=False,
                            queryset=Category.objects.all(),
                            level_indicator = u'+--',
                                    )
</snippet></ROW><ROW><id>6624964</id><snippet>required=True</snippet></ROW><ROW><id>6625098</id><snippet>def fields(cursor):
    results = {}
    column = 0
    for d in cursor.description:
        results[d[0]] = column
        column = column + 1

    return results 
</snippet></ROW><ROW><id>6625396</id><snippet> fixtures = Fixture.objects.all()
 fixture_dict = {}
 for fixture in fixtures:
    fixture_dict.setdefault(fixture.game_week, []).append(fixture)
</snippet></ROW><ROW><id>6626082</id><snippet>IOError</snippet></ROW><ROW><id>6626082</id><snippet>import os
os.seteuid(65534)  # user 65534 is `nobody`
filename='/etc/passwd-'
try:
    open(filename,'r')
except IOError as err:
    print(err)

# [Errno 13] Permission denied: '/etc/passwd-'
</snippet></ROW><ROW><id>6626203</id><snippet>if note[0].isupper() and note not in patternNotes:
</snippet></ROW><ROW><id>6626203</id><snippet>if note[0].isupper() and not in patternNotes:
</snippet></ROW><ROW><id>6626203</id><snippet>note</snippet></ROW><ROW><id>6626429</id><snippet>sys.exc_info()</snippet></ROW><ROW><id>6626429</id><snippet>traceback</snippet></ROW><ROW><id>6626429</id><snippet>import sys
import traceback

try:
    raise Exception('foo failed')
except Exception as e:
    traceback.print_tb(*sys.exc_info())
</snippet></ROW><ROW><id>6626429</id><snippet>sys.exc_info()</snippet></ROW><ROW><id>6626619</id><snippet>#fatal error
returncode=7
(( res = errorcode &amp; 3 ))
[[ $res != 0 ]] &amp;&amp; echo "Fatal Error"
</snippet></ROW><ROW><id>6626817</id><snippet>PyObject* (*fpFunc)(PyObject*,PyObject*) = someFunction;
PyMethodDef methd = {"methd",fpFunc,METH_VARARGS,"A new function"};
PyObject* name = PyString_FromString(methd.ml_name);
PyObject* pyfoo = PyCFunction_NewEx(&amp;methd,NULL,name);
Py_DECREF(name);
</snippet></ROW><ROW><id>6626817</id><snippet>Py_InitModule4</snippet></ROW><ROW><id>6626817</id><snippet>PyCFunction</snippet></ROW><ROW><id>6626817</id><snippet>PyCFunction_NewEx</snippet></ROW><ROW><id>6626842</id><snippet>except</snippet></ROW><ROW><id>6626842</id><snippet>class FooException(Exception):
    def __init__(self, foo):
        self.foo = foo

try:
    raise FooException("Foo!")
except FooException as e:
    print e.foo
</snippet></ROW><ROW><id>6627154</id><snippet>Column</snippet></ROW><ROW><id>6627154</id><snippet>class A(Base):
    __tablename__ = 'table_A'
    id = Column(Integer, primary_key=True)
    a = Column(String(32), index=True)
    b = Column(String(32), index=True)
</snippet></ROW><ROW><id>6627154</id><snippet>Table</snippet></ROW><ROW><id>6627154</id><snippet>Column</snippet></ROW><ROW><id>6627154</id><snippet>class A(Base):
    __tablename__ = 'table_A'
    id = Column(Integer, primary_key=True)
    a = Column(String(32))
    b = Column(String(32))

Index('my_index', A.a, A.b)
</snippet></ROW><ROW><id>6627154</id><snippet>Index</snippet></ROW><ROW><id>6627154</id><snippet>Table</snippet></ROW><ROW><id>6627154</id><snippet>__table_args__</snippet></ROW><ROW><id>6627154</id><snippet>class A(Base):
    __tablename__ = 'table_A'
    id = Column(Integer, primary_key=True)
    a = Column(String(32))
    b = Column(String(32))
    __table_args__ = (Index('my_index', "a", "b"), )
</snippet></ROW><ROW><id>6627237</id><snippet>re.sub</snippet></ROW><ROW><id>6627237</id><snippet>import re
re.sub(r'\d+?', lambda m: str(int(m.group(0))+resline), YOUR_STR)
</snippet></ROW><ROW><id>6627277</id><snippet>import boto

s3 = boto.connect_s3()

#Create a versioned bucket
bucket = s3.create_bucket("versioned.example.com")
bucket.configure_versioning(True)

#Create a new key and make a few versions
key = new_key("versioned_object")
key.set_contents_from_string("Version 1")
key.set_contents_from_string("Version 2")

#Try to delete bucket
bucket.delete()   ## FAILS with 409 Conflict

#Delete our key then try to delete our bucket again
bucket.delete_key("versioned_object")
bucket.delete()   ## STILL FAILS with 409 Conflict

#Let's see what's in there
list(bucket.list())   ## Returns empty list []

#What's in there including versions?
list(bucket.list_versions())   ## Returns list of keys and delete markers

#This time delete all versions including delete markers
for version in bucket.list_versions():
    #NOTE we're still using bucket.delete, we're just adding the version_id parameter
    bucket.delete_key(version.name, version_id = version.version_id)

#Now what's in there
list(bucket.list_versions())   ## Returns empty list []

#Ok, now delete the bucket
bucket.delete()   ## SUCCESS!!
</snippet></ROW><ROW><id>6627457</id><snippet>compile</snippet></ROW><ROW><id>6627593</id><snippet>YourClass.__bases__</snippet></ROW><ROW><id>6627593</id><snippet>&gt;&gt;&gt; class Base: pass
&gt;&gt;&gt; class Foo(Base): pass
&gt;&gt;&gt; class Bar(Base): attr = True
&gt;&gt;&gt; Foo.__bases__ = (Bar,) + Foo.__bases__
&gt;&gt;&gt; Foo.attr
True
</snippet></ROW><ROW><id>6627593</id><snippet>YourClass.method = OtherClass.bound_method.im_func
</snippet></ROW><ROW><id>6627593</id><snippet>__bases__</snippet></ROW><ROW><id>6627593</id><snippet>__mro__</snippet></ROW><ROW><id>6627669</id><snippet>true</snippet></ROW><ROW><id>6627669</id><snippet>false</snippet></ROW><ROW><id>6627669</id><snippet>null</snippet></ROW><ROW><id>6627669</id><snippet>True</snippet></ROW><ROW><id>6627669</id><snippet>False</snippet></ROW><ROW><id>6627669</id><snippet>None</snippet></ROW><ROW><id>6627669</id><snippet>// Valid JSON
{"sky_is_blue":true}
</snippet></ROW><ROW><id>6627669</id><snippet># Python
&gt;&gt;&gt; json_dict = eval('{"sky_is_blue":true}')
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
  File "&lt;string&gt;", line 1, in &lt;module&gt;
NameError: name 'true' is not defined
</snippet></ROW><ROW><id>6627681</id><snippet>def calc(base, alist, blist):
    for num in range(1, 4):
        result = []
        for b in base:
            result.append(b + sum(alist[:num]) - sum(blist[:num]))
        print result
</snippet></ROW><ROW><id>6627681</id><snippet>&gt;&gt;&gt; calc(base, alist, blist)
[-1, 0]
[-1, 0]
[1, 2]
</snippet></ROW><ROW><id>6627681</id><snippet>sum()</snippet></ROW><ROW><id>6627681</id><snippet>alist</snippet></ROW><ROW><id>6627681</id><snippet>blist</snippet></ROW><ROW><id>6627681</id><snippet>def calc(base, alist, blist):
    result = base[:]
    for num in range(3):
        for i, v in enumerate(result):
            result[i] = v + alist[num] - blist[num]
        print result
</snippet></ROW><ROW><id>6627736</id><snippet>&gt;&gt;&gt; a = numpy.arange(17520 * 3).reshape(48, 365, 3)
&gt;&gt;&gt; a.reshape((17520,3))
array([[    0,     1,     2],
       [    3,     4,     5],
       [    6,     7,     8],
       ..., 
       [52551, 52552, 52553],
       [52554, 52555, 52556],
       [52557, 52558, 52559]])
</snippet></ROW><ROW><id>6627736</id><snippet>-1</snippet></ROW><ROW><id>6627736</id><snippet>&gt;&gt;&gt; a.reshape((17520,-1))
array([[    0,     1,     2],
       [    3,     4,     5],
       [    6,     7,     8],
       ..., 
       [52551, 52552, 52553],
       [52554, 52555, 52556],
       [52557, 52558, 52559]])
</snippet></ROW><ROW><id>6627736</id><snippet>&gt;&gt;&gt; a.reshape((-1,3))
array([[    0,     1,     2],
       [    3,     4,     5],
       [    6,     7,     8],
       ..., 
       [52551, 52552, 52553],
       [52554, 52555, 52556],
       [52557, 52558, 52559]])
</snippet></ROW><ROW><id>6627736</id><snippet>a = numpy.recarray((17520,), dtype=[('x', int), ('y', int), ('z', int)])
</snippet></ROW><ROW><id>6627736</id><snippet>reshape(-1)</snippet></ROW><ROW><id>6628362</id><snippet>from django.core.exceptions import MultipleObjectsReturned

except MultipleObjectsReturned as e:
    return HttpResponse(e)
</snippet></ROW><ROW><id>6628362</id><snippet>except yourmodel.MultipleObjectsReturned as e:
    return HttpResponse(e)
</snippet></ROW><ROW><id>6628362</id><snippet>django.core.exceptions</snippet></ROW><ROW><id>6628642</id><snippet>virtualenv</snippet></ROW><ROW><id>6628642</id><snippet>--relocatable</snippet></ROW><ROW><id>6628786</id><snippet>not</snippet></ROW><ROW><id>6628786</id><snippet>try:
  int(userInputVariable)
except ValueError:
  print "Not a number"
</snippet></ROW><ROW><id>6628786</id><snippet>if not userInputVariable.isdigit():
</snippet></ROW><ROW><id>6628847</id><snippet>projects = models.ManyToManyField('Project')
website = models.URLField()
user = models.ForeignKey('User')
</snippet></ROW><ROW><id>6628847</id><snippet>project = Project.objects.all()[0]
username = project.user.username ## Or whatever you want to do with it.
</snippet></ROW><ROW><id>6628901</id><snippet>if (output[x][y] != [150,25,75]).all():
</snippet></ROW><ROW><id>6628901</id><snippet>array([ True,  True,  True], dtype=bool)
</snippet></ROW><ROW><id>6629520</id><snippet>property</snippet></ROW><ROW><id>6629520</id><snippet>__get__</snippet></ROW><ROW><id>6629520</id><snippet>__set__</snippet></ROW><ROW><id>6629520</id><snippet>__del__</snippet></ROW><ROW><id>6629520</id><snippet>__get__</snippet></ROW><ROW><id>6629520</id><snippet>__set__</snippet></ROW><ROW><id>6629520</id><snippet>class StaticGetter(object):
    def __init__(self, attr):
        self.attr = attr
    def __get__(self, instance, owner):
        # owner is the class, your getter code here
        return getattr(owner, attr)

class Test(object):
    __staticField = 0
    staticField = StatigGetter('_Test__staticField')
</snippet></ROW><ROW><id>6629520</id><snippet>__set__</snippet></ROW><ROW><id>6629520</id><snippet>Test.staticField = newvalue</snippet></ROW><ROW><id>6629520</id><snippet>Test.staticField.someSetterMethod(newvalue)</snippet></ROW><ROW><id>6629635</id><snippet>numpy.apply_along_axis</snippet></ROW><ROW><id>6629635</id><snippet>def f(a):
     return a[0] + a[1] + a[2]
mm = numpy.random.randn(5, 3)
numpy.apply_along_axis(f, 1, mm)
</snippet></ROW><ROW><id>6629635</id><snippet>array([-1.75875289, -0.34689792,  0.66092486, -0.21626001, -0.14125476])</snippet></ROW><ROW><id>6629659</id><snippet># rootpath.py
rootpath = "../../../"

# in your scripts
from rootpath import rootpath
datapath = os.path.join(rootpath, "src/resources/datafile1.txt")
</snippet></ROW><ROW><id>6629659</id><snippet>thisisthetop.txt</snippet></ROW><ROW><id>6629659</id><snippet>src</snippet></ROW><ROW><id>6630229</id><snippet>csv.writer</snippet></ROW><ROW><id>6630229</id><snippet>import csv

with open("temp.csv", mode="rU") as infile:
    reader = csv.reader(infile, dialect="excel")    
    with open("temp2.txt", mode="w") as outfile:
        writer = csv.writer(outfile, delimiter=':')
        writer.writerows(rows)
</snippet></ROW><ROW><id>6630229</id><snippet>,</snippet></ROW><ROW><id>6630229</id><snippet>:</snippet></ROW><ROW><id>6630229</id><snippet>csv.reader</snippet></ROW><ROW><id>6630259</id><snippet>bisect</snippet></ROW><ROW><id>6630259</id><snippet>#!/usr/bin/env python

import bisect

def find_lt(a, x):
    'Find rightmost value less than x'
    i = bisect.bisect_left(a, x)
    if i:
        return a[i-1]
    raise ValueError

def find_gt(a, x):
    'Find leftmost value greater than x'
    i = bisect.bisect_right(a, x)
    if i != len(a):
        return a[i]
    raise ValueError

# First create a test-list (49996 items)
i=1.0
R=[1.0]
D={}
while i &lt; 10000:
    i+=0.2
    i=round(i,2)
    D[i]=True
    R.append(i)

# Locate a value, in this case 100.3 which is not in the list
x=100.3
if D.has_key(x):
    print "found", x
else:
    print find_lt(R, x)
    print find_gt(R, x)
</snippet></ROW><ROW><id>6630259</id><snippet>x=100.3</snippet></ROW><ROW><id>6630259</id><snippet>100.2
100.4
</snippet></ROW><ROW><id>6630283</id><snippet>ABCD1234</snippet></ROW><ROW><id>6630283</id><snippet>\0</snippet></ROW><ROW><id>6630283</id><snippet>\0</snippet></ROW><ROW><id>6630283</id><snippet>myProj.Populate ( "ABCD1234", charPtr, 8 );
</snippet></ROW><ROW><id>6630283</id><snippet>charPtr</snippet></ROW><ROW><id>6630283</id><snippet>charPtr = myProj.strAll ( 5 );
</snippet></ROW><ROW><id>6630931</id><snippet>__main__</snippet></ROW><ROW><id>6630931</id><snippet>-m</snippet></ROW><ROW><id>6630931</id><snippet>-m test.__main__</snippet></ROW><ROW><id>6630994</id><snippet>wget http://www.python.org/ftp/python/2.7.6/Python-2.7.6.tgz
tar -xzf Python-2.7.6.tgz  
cd Python-2.7.6
</snippet></ROW><ROW><id>6630994</id><snippet>README</snippet></ROW><ROW><id>6630994</id><snippet>./configure  
make  
sudo make install  
</snippet></ROW><ROW><id>6631098</id><snippet>import re

# List of pairs (regexp, handler)
handlers = []

def handler_for(regexp):
    """Declare a function as handler for a regular expression."""
    def gethandler(f):
        handlers.append((re.compile(regexp), f))
        return f
    return gethandler

@handler_for(r'^&lt;\w+&gt; (.*)')
def handle_message(msg):
    print msg

@handler_for(r'^\*{3} (.*)')
def handle_warning(msg):
    global num_warnings, num_fatals
    num_warnings += 1
    if is_fatal(msg):
        num_fatals += 1
</snippet></ROW><ROW><id>6631129</id><snippet>boutput</snippet></ROW><ROW><id>6631129</id><snippet>boutput = Popen([
    '/bin/convert',
    '-density', '400',
    '-scale', '2000x1000',
    '%s' % a,
    '%s' % b 
], stdout=PIPE, stderr=STDOUT).communicate()[0]
</snippet></ROW><ROW><id>6631156</id><snippet>for line in data:
    ... do stuff ...
</snippet></ROW><ROW><id>6631503</id><snippet>^</snippet></ROW><ROW><id>6631503</id><snippet>$</snippet></ROW><ROW><id>6631503</id><snippet>\A</snippet></ROW><ROW><id>6631503</id><snippet>\Z</snippet></ROW><ROW><id>6631530</id><snippet>count = CountVectorizer(vocabulary=myvocab)
X_vectorized = count.transform(X_train)

text_classifier = Pipeline([
    ('tfidf', TfidfTransformer()),
    ('clf', LinearSVC(C=1000))
])

text_classifier.fit(X_vectorized, y_train)
</snippet></ROW><ROW><id>6631612</id><snippet>settings.py</snippet></ROW><ROW><id>6631612</id><snippet>CELERY_TASK_SERIALIZER = "json"
</snippet></ROW><ROW><id>6631635</id><snippet>setuptools</snippet></ROW><ROW><id>6631635</id><snippet>distribute</snippet></ROW><ROW><id>6631635</id><snippet>wsgiref</snippet></ROW><ROW><id>6631635</id><snippet>wsgiref</snippet></ROW><ROW><id>6631635</id><snippet>pip</snippet></ROW><ROW><id>6631800</id><snippet>sudo port py27-opengl</snippet></ROW><ROW><id>6631800</id><snippet>py25-</snippet></ROW><ROW><id>6631800</id><snippet>py26-</snippet></ROW><ROW><id>6631800</id><snippet>py27-</snippet></ROW><ROW><id>6631800</id><snippet>py31-</snippet></ROW><ROW><id>6631800</id><snippet>py32-</snippet></ROW><ROW><id>6631800</id><snippet>py-</snippet></ROW><ROW><id>6631800</id><snippet>boost</snippet></ROW><ROW><id>6631800</id><snippet>sudo port boost +python27</snippet></ROW><ROW><id>6631833</id><snippet>&gt;&gt;&gt; class A:
...  def a(self):
...   print "Hello"
... 
&gt;&gt;&gt; B = [A() for i in xrange(10)]
&gt;&gt;&gt; map(lambda a: a.a(), B)
Hello
Hello
Hello
Hello
Hello
Hello
Hello
Hello
Hello
Hello
[None, None, None, None, None, None, None, None, None, None]
</snippet></ROW><ROW><id>6632209</id><snippet>list( myBigList[i] for i in [87, 342, 217, 998, 500] )
</snippet></ROW><ROW><id>6632209</id><snippet>[ myBigList[i] for i in [87, 342, 217, 998, 500] ]</snippet></ROW><ROW><id>6632209</id><snippet>map(myBigList.__getitem__, (87, 342, 217, 998, 500))</snippet></ROW><ROW><id>6632209</id><snippet>itemgetter(87, 342, 217, 998, 500)(myBigList)</snippet></ROW><ROW><id>6632209</id><snippet>list( myBigList[i] for i in [87, 342, 217, 998, 500] )</snippet></ROW><ROW><id>6632422</id><snippet>&gt;&gt;&gt; def truncate(it, n):
...     cache = [next(it) for i in range(n)]
...     index = 0
...     for val in it:
...         val, cache[index] = cache[index], val
...         index = (index + 1) % n
...         yield val
</snippet></ROW><ROW><id>6632422</id><snippet>def truncate(it, n):
    cache = [next(it) for i in range(n)]
    index = 0
    for val in it:
        yield cache[index]
        cache[index] = val
        index = (index + 1) % n
</snippet></ROW><ROW><id>6632488</id><snippet>bin/qp /path/to/queue/dir</snippet></ROW><ROW><id>6632587</id><snippet>&gt;&gt;&gt; key='r-$b*8hglm+858&amp;9t043hlm6-&amp;6-3d3vfc4((7yd0dbrakhvi'
&gt;&gt;&gt; base64.urlsafe_b64decode('PXItJGIqOGhnbG0rODU4Jjl0MDQzaGxtNi0mNi0zZDN2ZmM0KCg3eWQwZGJyYWtodmkxODAwNQ==')
'=r-$b*8hglm+858&amp;9t043hlm6-&amp;6-3d3vfc4((7yd0dbrakhvi18005'
&gt;&gt;&gt; '=' + key + str(18005) == _
True
</snippet></ROW><ROW><id>6632882</id><snippet>b.a</snippet></ROW><ROW><id>6632882</id><snippet>classA</snippet></ROW><ROW><id>6632882</id><snippet>&gt;&gt;&gt; b.a
&lt;__main__.classA object at 0x7feeb904df10&gt;
</snippet></ROW><ROW><id>6632882</id><snippet>classA</snippet></ROW><ROW><id>6632882</id><snippet>&gt;&gt;&gt; class classA(object):
...    def __init__(self, parent):
...        self.parent = parent
...    
...    def method(self):
...        self.parent.methodB()
...
&gt;&gt;&gt;
&gt;&gt;&gt; class classB(object):
...    def __init__(self):
...        self.a=classA(self)
...
...    def methodB(self):
...        print "ClassB-s methodB called"
...
&gt;&gt;&gt; b = classB()
&gt;&gt;&gt; a = b.a
&gt;&gt;&gt; a.method()
ClassB-s methodB called
</snippet></ROW><ROW><id>6632968</id><snippet>C:\&gt; python
&gt;&gt;&gt; import sqlite3
&gt;&gt;&gt; conn = sqlite3.connect('c:/path/to/your.db')
&gt;&gt;&gt; conn.close() # optional
</snippet></ROW><ROW><id>6632968</id><snippet>c:/path/to/</snippet></ROW><ROW><id>6632968</id><snippet>your.db</snippet></ROW><ROW><id>6633040</id><snippet>import sys
if sys.version &lt; '3':
    import codecs
    def u(x):
        return codecs.unicode_escape_decode(x)[0]
else:
    def u(x):
        return x
</snippet></ROW><ROW><id>6633040</id><snippet>&gt;&gt;&gt; print(u('\u00dcnic\u00f6de'))
Ünicöde
&gt;&gt;&gt; print(u('\xdcnic\N{Latin Small Letter O with diaeresis}de'))
Ünicöde
</snippet></ROW><ROW><id>6633040</id><snippet>u''</snippet></ROW><ROW><id>6633040</id><snippet>u()</snippet></ROW><ROW><id>6633046</id><snippet>try..except..else</snippet></ROW><ROW><id>6633046</id><snippet>try..except..else</snippet></ROW><ROW><id>6633046</id><snippet>for</snippet></ROW><ROW><id>6633046</id><snippet>while</snippet></ROW><ROW><id>6633046</id><snippet>try..except..else</snippet></ROW><ROW><id>6633046</id><snippet>f.read()</snippet></ROW><ROW><id>6633046</id><snippet>try:
    with open('foo', 'r') as f:
        data = f.read()
except IOError as e:
    error_log.write('Unable to open foo : %s\n' % e)
</snippet></ROW><ROW><id>6633046</id><snippet>file.read</snippet></ROW><ROW><id>6633046</id><snippet>file.close</snippet></ROW><ROW><id>6633093</id><snippet>import os, re, shutil

r = re.compile(r'^([0-9]{2})([0-9]{2})([0-9]{2})-(.*)$')

for root, dirs, files in os.walk('/path/to/topdir'):
    for filename in files:
        match = r.match(filename)
        if match:
            newfilename = match.group(3) + match.group(1) + match.group(2) + '-' + match.group(4)
            newfilename = os.path.join(root, newfilename)
            oldfilename = os.path.join(root, filename)

            # Rename oldfilename to newfilename
            shutil.move(oldfilename, newfilename)
</snippet></ROW><ROW><id>6633093</id><snippet>os.walk</snippet></ROW><ROW><id>6633093</id><snippet>shutil.move</snippet></ROW><ROW><id>6633507</id><snippet>// create new webpage
var page = new WebPage();

// open page, set callback
page.open('url', function(status) {
    // exit if page couldn't load
    if (status !== 'success') {
        console.log('FAIL to load!');
        phantom.exit(1);
    }

    // save page content to file
    phantom.saveToFile(page.content, 'myfile.txt');
    phantom.exit();
});
</snippet></ROW><ROW><id>6633537</id><snippet>,</snippet></ROW><ROW><id>6633537</id><snippet>replace()</snippet></ROW><ROW><id>6633537</id><snippet>float("123,456.908".replace(',',''))
</snippet></ROW><ROW><id>6633599</id><snippet>lxml</snippet></ROW><ROW><id>6633599</id><snippet>import lxml.html

doc = lxml.html.parse(your_html)
for i in range(1,7):
    for h in doc.xpath('//h%d' % i):
        h.text = h.text.capitalize()

print lxml.html.tostring(doc)
</snippet></ROW><ROW><id>6633711</id><snippet>from wsgiref.simple_server import demo_app
from wsgiref.simple_server import make_server

httpd = make_server('0.0.0.0', 8000, demo_app)
print "Serving on port 8000..."
httpd.serve_forever()
</snippet></ROW><ROW><id>6633711</id><snippet>print response.read()</snippet></ROW><ROW><id>6633711</id><snippet>environ</snippet></ROW><ROW><id>6633859</id><snippet>try</snippet></ROW><ROW><id>6633859</id><snippet>finally</snippet></ROW><ROW><id>6633859</id><snippet>try</snippet></ROW><ROW><id>6633859</id><snippet>except</snippet></ROW><ROW><id>6633859</id><snippet>try:
    fsock = open(filename, "rb", 0)
    try:
        fsock.seek(-128, 2)
        tagdata = fsock.read(128)
    except:
        pass
except IOError:
    pass
finally:
    fsock.close()
</snippet></ROW><ROW><id>6633859</id><snippet>IOError</snippet></ROW><ROW><id>6633859</id><snippet>fsock.close()</snippet></ROW><ROW><id>6633859</id><snippet>fsock</snippet></ROW><ROW><id>6633859</id><snippet>with</snippet></ROW><ROW><id>6633859</id><snippet>try:
    with open(filename, 'rb') as fsock:
        fsock.seek(-128, 2)
        tagdata = fsock.read(128)
except IOError:
    pass
</snippet></ROW><ROW><id>6633953</id><snippet>auto-complete</snippet></ROW><ROW><id>6633953</id><snippet>make</snippet></ROW><ROW><id>6633953</id><snippet>install.el</snippet></ROW><ROW><id>6633953</id><snippet>;;load the auto complete path here, if you havent done it
(add-to-list 'ac-dictionary-directories "~/.emacs.d/ac-dict")
(require 'auto-complete-config)
(ac-config-default)
</snippet></ROW><ROW><id>6634409</id><snippet>on_app_engine = os.environ.get('SERVER_SOFTWARE', '').startswith('Google')</snippet></ROW><ROW><id>6634409</id><snippet>if on_app_engine:
  import lxml
else:
  import bla
</snippet></ROW><ROW><id>6635042</id><snippet>def execute_tasks(self, application):
    """
    Executes all currently queued tasks, and also removes them from the 
    queue.
    The tasks are execute against the provided web application.
    """

    # Set up the application for webtest to use (resetting _app in case a
    # different one has been used before). 
    self._app = None
    self.APPLICATION = application

    # Get all of the tasks, and then clear them.
    tasks = self.get_tasks()
    self.clear_task_queue()

    # Run each of the tasks, checking that they succeeded.
    for task in tasks:
        response = self.post(task['url'], task['params'])
        self.assertOK(response)
</snippet></ROW><ROW><id>6635042</id><snippet># Do something which enqueues a task.

# Check that a task was enqueued, then execute it.
self.assertTrue(len(self.get_tasks()), 1)
self.execute_tasks(some_module.application)

# Now test that the task did what was expected.
</snippet></ROW><ROW><id>6635053</id><snippet>letters = [letter for letter in string_lower_as_list(argv[1]) 
            if "a" &lt;= letter &lt;= "z"]
</snippet></ROW><ROW><id>6635053</id><snippet>letters.count</snippet></ROW><ROW><id>6635053</id><snippet>letters = {}

for letter in string_lower_as_list(argv[1]):
    if "a" &lt;= letter &lt;= "z":
        letters[letter] = letters.get(letter, 0) + 1

for letter in sorted(letters):
    print letter, letters[letter] 
</snippet></ROW><ROW><id>6635053</id><snippet>for letter in argv[1].lower()</snippet></ROW><ROW><id>6635189</id><snippet>(r'^', include('blog.apps.homepage.urls')),
</snippet></ROW><ROW><id>6635189</id><snippet>include</snippet></ROW><ROW><id>6635189</id><snippet>blog.apps.homepage.urls</snippet></ROW><ROW><id>6635189</id><snippet>./manage.py shell
</snippet></ROW><ROW><id>6635189</id><snippet>from blog.apps.homepage import urls
</snippet></ROW><ROW><id>6635376</id><snippet>pickle</snippet></ROW><ROW><id>6635376</id><snippet>def __getstate__(self):
  return dict((k, v) for (k, v) in self.__dict__.iteritems() if should_pickle(v))
</snippet></ROW><ROW><id>6635670</id><snippet>gui.SettingsFrame</snippet></ROW><ROW><id>6635670</id><snippet>gui.SettingsFrame</snippet></ROW><ROW><id>6635670</id><snippet>Main</snippet></ROW><ROW><id>6635670</id><snippet>MkSettings</snippet></ROW><ROW><id>6635711</id><snippet>x = 0</snippet></ROW><ROW><id>6635711</id><snippet>x</snippet></ROW><ROW><id>6635711</id><snippet>x</snippet></ROW><ROW><id>6635832</id><snippet>len(g.neighbors(i))</snippet></ROW><ROW><id>6635832</id><snippet>g.degree()</snippet></ROW><ROW><id>6635832</id><snippet>from numpy import matrix
d = matrix(g.degree())
pref_score_matrix = d.T*d
</snippet></ROW><ROW><id>6635832</id><snippet>g.neighbors(i)</snippet></ROW><ROW><id>6635832</id><snippet>neisets = [set(g.neighbors(i)) for i in xrange(g.vcount())]
for v1, v2 in g.get_edgelist():
    common_neis = neisets[v1].intersection(neisets[v2])
    print "%d --&gt; %d: %d" % (v1, v2, len(common_neis))
</snippet></ROW><ROW><id>6635832</id><snippet>zeros</snippet></ROW><ROW><id>6635832</id><snippet>from itertools import combinations
from numpy import zeros

n = g.vcount()
common_neis = zeros(n, n)
for v in xrange(g.vcount()):
    neis = g.neighbors(v)
    for u, w in combinations(neis, 2):
        # v is a common neighbor of u and w
        common_neis[u, w] += 1
        common_neis[w, u] += 1
</snippet></ROW><ROW><id>6636158</id><snippet>sys.path</snippet></ROW><ROW><id>6636158</id><snippet>__import__</snippet></ROW><ROW><id>6637323</id><snippet>{% if lesson.assignment and lesson.assignment.strip %}
</snippet></ROW><ROW><id>6637323</id><snippet>.strip</snippet></ROW><ROW><id>6637323</id><snippet>str.strip()</snippet></ROW><ROW><id>6637323</id><snippet>None</snippet></ROW><ROW><id>6637323</id><snippet>.strip()</snippet></ROW><ROW><id>6637323</id><snippet>./manage.py shell</snippet></ROW><ROW><id>6637323</id><snippet>&gt;&gt;&gt; import django
&gt;&gt;&gt; from django.template import Template, Context
&gt;&gt;&gt; t = Template("{% if x and x.strip %}OK{% else %}Empty{% endif %}")
&gt;&gt;&gt; t.render(Context({"x": "ola"}))
u'OK'
&gt;&gt;&gt; t.render(Context({"x": "   "}))
u'Empty'
&gt;&gt;&gt; t.render(Context({"x": ""}))
u'Empty'
&gt;&gt;&gt; t.render(Context({"x": None}))
u'Empty'
</snippet></ROW><ROW><id>6637366</id><snippet>08/07/2011 04:22 EST</snippet></ROW><ROW><id>6637366</id><snippet>EST</snippet></ROW><ROW><id>6637366</id><snippet>import dateutil.tz as dtz
import pytz
import datetime as dt
import collections
import random

timezones = collections.defaultdict(list)
for name in pytz.common_timezones:
    timezone = dtz.gettz(name)
    try:
        now = dt.datetime.now(timezone)
    except ValueError:
        # dt.datetime.now(dtz.gettz('Pacific/Apia')) raises ValueError
        continue
    abbrev = now.strftime('%Z')
    timezones[abbrev].append(name) 

date_string, tz_string = '10/07/2011 04:22 CEST'.rsplit(' ', 1)
date = dt.datetime.strptime(date_string, '%m/%d/%Y %H:%M')
print(date)
# 2011-10-07 04:22:00

tz = pytz.timezone(random.choice(timezones[tz_string]))
print(tz)
# Europe/Oslo

date = tz.localize(date)
print(date)
# 2011-10-07 04:22:00+02:00
</snippet></ROW><ROW><id>6637481</id><snippet>pip install numpy</snippet></ROW><ROW><id>6637481</id><snippet>CFLAGS='-l/home/me/include'
LDFLAGS='-L/home/me/lib'
</snippet></ROW><ROW><id>6637604</id><snippet>[Python]</snippet></ROW><ROW><id>6637615</id><snippet>&gt;&gt;&gt; import timeit
&gt;&gt;&gt; timeit.timeit(stmt='[n ** 0.5 for n in range(100)]', setup='import math', number=10000)
0.15518403053283691
&gt;&gt;&gt; timeit.timeit(stmt='[math.sqrt(n) for n in range(100)]', setup='import math', number=10000)
0.17707490921020508
</snippet></ROW><ROW><id>6637615</id><snippet>.</snippet></ROW><ROW><id>6637615</id><snippet>sqrt</snippet></ROW><ROW><id>6637615</id><snippet>&gt;&gt;&gt; timeit.timeit(stmt='[sqrt(n) for n in range(100)]', setup='from math import sqrt', number=10000)
0.15312695503234863
</snippet></ROW><ROW><id>6637615</id><snippet>sqrt</snippet></ROW><ROW><id>6637615</id><snippet>&gt;&gt;&gt; timeit.timeit(stmt='[n ** 0.5 for n in range(1000000)]', setup='import math', number=1)
0.18888211250305176
&gt;&gt;&gt; timeit.timeit(stmt='[math.sqrt(n) for n in range(1000000)]', setup='import math', number=1)
0.18425297737121582
&gt;&gt;&gt; timeit.timeit(stmt='[sqrt(n) for n in range(1000000)]', setup='from math import sqrt', number=1)
0.1571958065032959
</snippet></ROW><ROW><id>6637833</id><snippet>=</snippet></ROW><ROW><id>6637833</id><snippet>"//div[@id='downloadlink']"
</snippet></ROW><ROW><id>6637833</id><snippet>"//div[@id='downloadlink']/a/@href"
</snippet></ROW><ROW><id>6637841</id><snippet>self.</snippet></ROW><ROW><id>6637878</id><snippet>append</snippet></ROW><ROW><id>6637878</id><snippet>newlist.append(store)
</snippet></ROW><ROW><id>6637878</id><snippet>newlist = [word for word in mylist if 'h' in word]
</snippet></ROW><ROW><id>6637878</id><snippet>newlist += store</snippet></ROW><ROW><id>6637878</id><snippet>newlist = newlist + store</snippet></ROW><ROW><id>6637878</id><snippet>s + t</snippet></ROW><ROW><id>6637878</id><snippet>s</snippet></ROW><ROW><id>6637878</id><snippet>t</snippet></ROW><ROW><id>6638336</id><snippet>#include &lt;iostream&gt;   
using namespace std;

template&lt;class N&gt;
N reflect(const N&amp; n, const typename N::value_type&amp; t)
{
  return n + t;
}

template&lt;class N&gt;
struct wrapper
{
  typedef N value_type;

  wrapper(const N&amp; n):_n(n){}
  operator N&amp; () { return _n; }
  N operator+ (const N&amp; r) const { return _n + r; }

  N _n;
};

int main(int,char**)
{
  cout &lt;&lt; reflect( wrapper&lt;double&gt;(1), 2.0) &lt;&lt; endl;
  return 0;
}
</snippet></ROW><ROW><id>6638372</id><snippet>w</snippet></ROW><ROW><id>6638372</id><snippet>r+</snippet></ROW><ROW><id>6638372</id><snippet>w+</snippet></ROW><ROW><id>6638372</id><snippet>a+</snippet></ROW><ROW><id>6638372</id><snippet>f.close()</snippet></ROW><ROW><id>6638372</id><snippet>for line in f:
   if new_name==line:
      return ("already existed")
   elif new_name!=line:
      f.write(str(new_name)+"\n")
      return ("succesfully added")
</snippet></ROW><ROW><id>6638372</id><snippet>"already existed"</snippet></ROW><ROW><id>6638553</id><snippet>python setup.py install</snippet></ROW><ROW><id>6638553</id><snippet>easy_install</snippet></ROW><ROW><id>6638553</id><snippet>pip</snippet></ROW><ROW><id>6638553</id><snippet>which python</snippet></ROW><ROW><id>6638553</id><snippet>python setup.py install</snippet></ROW><ROW><id>6638553</id><snippet>python</snippet></ROW><ROW><id>6638614</id><snippet>while</snippet></ROW><ROW><id>6638614</id><snippet>def addingcustomer(file_name,new_name):
    f=open(file_name,"r+")
    for line in f:
        if new_name in line:
            f.close()
            return ("The Customer existed")
    # the name didn't exist
    f.write(str(list(new_name)+"\n")
    f.close()
    return ("Added new customer.")
</snippet></ROW><ROW><id>6638614</id><snippet>True</snippet></ROW><ROW><id>6638614</id><snippet>False</snippet></ROW><ROW><id>6638614</id><snippet>def addingcustomer(file_name,new_name):
    f=open(file_name,"r+")
    for line in f:
        if new_name in line:
            f.close()
            return False
    # the name didn't exist
    f.write(new_name)
    f.write("\n")
    f.close()
    return True
</snippet></ROW><ROW><id>6638614</id><snippet>new_name</snippet></ROW><ROW><id>6638860</id><snippet>class BackupSomeModel(SomeModel): pass
</snippet></ROW><ROW><id>6639107</id><snippet>subprocess.Popen</snippet></ROW><ROW><id>6639107</id><snippet>communicate</snippet></ROW><ROW><id>6639107</id><snippet>subprocess.Popen</snippet></ROW><ROW><id>6639120</id><snippet>ant.bat:

if "%1"=="batch_fail" exit /B 1
if "%1"=="proc_fail" exit 1


&gt;&gt;&gt; import subprocess
&gt;&gt;&gt; subprocess.call(['ant.bat', 'batch_fail'])
0
&gt;&gt;&gt; subprocess.call(['ant.bat', 'proc_fail'])
1
</snippet></ROW><ROW><id>6639120</id><snippet>ant_wrapper.bat:

@echo off
call ant.bat %1
if errorlevel 1 exit 1

&gt;&gt;&gt; subprocess.call(['ant_wrapper.bat'])
0
&gt;&gt;&gt; subprocess.call(['ant_wrapper.bat', 'batch_fail'])
1
&gt;&gt;&gt; subprocess.call(['ant_wrapper.bat', 'proc_fail'])
1
</snippet></ROW><ROW><id>6639120</id><snippet>exit %errorlevel%</snippet></ROW><ROW><id>6639120</id><snippet>#test errorlevel==1
&gt;&gt;&gt; p = subprocess.Popen(['cmd', '/K', 'ant.bat', 'batch_fail'], 
      stdin=subprocess.PIPE, stdout=subprocess.PIPE)
&gt;&gt;&gt; stdoutdata, stderrdata = p.communicate(b'exit %errorlevel%\r\n')
&gt;&gt;&gt; p.returncode
1

#test errorlevel==0
&gt;&gt;&gt; p = subprocess.Popen(['cmd', '/K', 'ant.bat'], 
      stdin=subprocess.PIPE, stdout=subprocess.PIPE)
&gt;&gt;&gt; stdoutdata, stderrdata = p.communicate(b'exit %errorlevel%\r\n')
&gt;&gt;&gt; p.returncode
0
</snippet></ROW><ROW><id>6639409</id><snippet>os.walk</snippet></ROW><ROW><id>6639474</id><snippet>while text.find(":{") &gt; -1:
    index = text.find(":{")
    if text[index-2:index]=="fb":
        text = text[:index-2] + "&lt;b&gt;" + text[index+2:] #insert &lt;b&gt;
        text = text.replace("}","&lt;/b&gt;",1) # replace one.
    # else if fi, fv, etc.
</snippet></ROW><ROW><id>6639474</id><snippet>array = text.split(" ")
for word in array:
    if (word.startswith("fi")):
        word = "&lt;i&gt;"+word[2:]+"&lt;/i&gt;"
    else if (word.startswith("fb")):
        ....
text = " ".join(array)
</snippet></ROW><ROW><id>6639474</id><snippet>inFile = open("file.txt","r")
outFile = open("file.out","w")

def convert(text):
    #Change text here.
    return text

for line in inFile:
    outFile.write(convert(line))
</snippet></ROW><ROW><id>6639527</id><snippet>re.sub</snippet></ROW><ROW><id>6639527</id><snippet>&gt;&gt;&gt; str = 'AABBBBAA'
&gt;&gt;&gt; re.sub('BBB', 'CCC', str)
'AACCCBAA'
</snippet></ROW><ROW><id>6639527</id><snippet>BBB</snippet></ROW><ROW><id>6639553</id><snippet>return self.__class__()</snippet></ROW><ROW><id>6639835</id><snippet>^(hello|world)$
</snippet></ROW><ROW><id>6639835</id><snippet>^[helloworld]$
</snippet></ROW><ROW><id>6639968</id><snippet>CSRF protection</snippet></ROW><ROW><id>6639968</id><snippet>def photo_upload(request):
    if request.method == 'POST':
         for field_name in request.FILES:
         ....
         ....
         return HttpResponse("ok", mimetype="text/plain")

    else:       
         return render_response(request, 'wpphotos/post/photo_upload.html', {"csrf_token": get_token(request)},context_instance=RequestContext(request))
</snippet></ROW><ROW><id>6639968</id><snippet>csrf_token</snippet></ROW><ROW><id>6639968</id><snippet>from django.conf import settings
from django.core.urlresolvers import reverse

class SWFUploadMiddleware(object):

def process_request(self, request):
    if (request.method == 'POST') and (request.path == reverse('project_name.module_name.views.photo_upload')) and \
            request.POST.has_key(settings.SESSION_COOKIE_NAME):
        request.COOKIES[settings.SESSION_COOKIE_NAME] = request.POST[settings.SESSION_COOKIE_NAME]
    if request.POST.has_key('csrftoken'):           
        request.COOKIES['csrftoken'] = request.POST['csrftoken']
</snippet></ROW><ROW><id>6639968</id><snippet>csrftoken</snippet></ROW><ROW><id>6639968</id><snippet>SWFUpload</snippet></ROW><ROW><id>6639968</id><snippet>window.onload = function() {
    swfupload = new SWFUpload({
        post_params: {
            "csrfmiddlewaretoken": "{{csrf_token}}"
        },
        upload_url: "/module_name/post/photo_upload/",
        flash_url: "/media/flash/swfupload.swf",
        file_size_limit : "2.5 MB",
                    ....
                    ....
                    ....
            });
    };
</snippet></ROW><ROW><id>6640066</id><snippet>^(?!any$).*$
</snippet></ROW><ROW><id>6640433</id><snippet>__import__</snippet></ROW><ROW><id>6640433</id><snippet>&gt;&gt;&gt; __import__('aaa')

Traceback (most recent call last):
  File "&lt;pyshell#5&gt;", line 1, in &lt;module&gt;
    __import__('aaa')
ImportError: No module named aaa
&gt;&gt;&gt; __import__('os')
&lt;module 'os' from 'C:\Python26\lib\os.pyc'&gt;
</snippet></ROW><ROW><id>6640433</id><snippet>try:
    __import__(mod_name)
    print 'Such a module exists'
except ImportError:
    print 'No such module'
</snippet></ROW><ROW><id>6640475</id><snippet>threading.Thread(target=myServer.serve_forever).start()
</snippet></ROW><ROW><id>6640475</id><snippet>daemon=True</snippet></ROW><ROW><id>6640475</id><snippet>Thread</snippet></ROW><ROW><id>6640475</id><snippet>handle_request</snippet></ROW><ROW><id>6640595</id><snippet>myproject.middlewares.MW1.process_request(request, spider)</snippet></ROW><ROW><id>6640632</id><snippet>myDict</snippet></ROW><ROW><id>6640632</id><snippet>import shelve
myDict = {"a" : 1, "b" : 2}
myShelvedDict = shelve.open("my_shelved_dictionary.db")
myShelvedDict["myDict"] = myDict
</snippet></ROW><ROW><id>6640632</id><snippet>myDict</snippet></ROW><ROW><id>6640632</id><snippet>update</snippet></ROW><ROW><id>6640632</id><snippet>myShelvedDict.update(myDict)
</snippet></ROW><ROW><id>6640632</id><snippet>shelve</snippet></ROW><ROW><id>6640632</id><snippet>dict</snippet></ROW><ROW><id>6641757</id><snippet>fig = plt.figure(figsize=(1.0,1.0))
ax = fig.add_axes([0.0, -0.2, 1.2, 1.2])
plt.contour(zi,15,linewidths=0.1,colors='k')
plt.contourf(zi,15,cmap=plt.cm.jet)
ax.set_ylim(ax.get_ylim()[::-1])
ax.set_axis_off()
plt.savefig(file1, dpi=256)
</snippet></ROW><ROW><id>6642969</id><snippet>window.resize(gtk.gdk.screen_width(),100) # Instead of gtk.gdk.screen.width()
</snippet></ROW><ROW><id>6642969</id><snippet>window.window.property_change("_NET_WM_STRUT", "CARDINAL", 32,
    gtk.gdk.PROP_MODE_REPLACE, [0, 0, 100, 0])
</snippet></ROW><ROW><id>6642969</id><snippet>import gtk

class ResizeWindow:

 def __init__(self):
    self.window = gtk.Window(gtk.WINDOW_TOPLEVEL)
    button = gtk.Button("Resize")
    self.window.add(button)
    button.connect("clicked", self.resizewin)
    self.window.set_default_size(gtk.gdk.screen_width(),500)
    self.window.move(0, 0)
    self.window.show_all()
    self.window.window.property_change("_NET_WM_STRUT", "CARDINAL", 32,
           gtk.gdk.PROP_MODE_REPLACE, [0, 0, 100, 0])

 def resizewin(self, widget, *args):
    self.window.resize(gtk.gdk.screen_width(),100)

if __name__ == '__main__':
  ResizeWindow()
  gtk.main()
</snippet></ROW><ROW><id>6643006</id><snippet>&gt;&gt;&gt; "/123/456/789/".split("/")[1:-1]
['123', '456', '789']
</snippet></ROW><ROW><id>6643127</id><snippet>+</snippet></ROW><ROW><id>6643127</id><snippet>['some', 'stuff'] + some_function() + ['more'] + some_other_function() + [variables]</snippet></ROW><ROW><id>6643228</id><snippet>readlines</snippet></ROW><ROW><id>6643228</id><snippet>readlines</snippet></ROW><ROW><id>6643228</id><snippet>for line in file</snippet></ROW><ROW><id>6643228</id><snippet>for i, line in enumerate(book):
</snippet></ROW><ROW><id>6643228</id><snippet>readlines</snippet></ROW><ROW><id>6643228</id><snippet>booklines = book.readlines()
for i, line in enumerate(booklines):
</snippet></ROW><ROW><id>6643228</id><snippet>read</snippet></ROW><ROW><id>6643228</id><snippet>booktxt = book.read()
booklines = book.splitlines() #
for i, line in enumerate(booklines)
</snippet></ROW><ROW><id>6643228</id><snippet>i</snippet></ROW><ROW><id>6643228</id><snippet>ln</snippet></ROW><ROW><id>6643228</id><snippet>ln</snippet></ROW><ROW><id>6643228</id><snippet>line_number</snippet></ROW><ROW><id>6643228</id><snippet>lineno</snippet></ROW><ROW><id>6643228</id><snippet>ln</snippet></ROW><ROW><id>6643228</id><snippet>for ln, line in enumerate(book):
</snippet></ROW><ROW><id>6643228</id><snippet>in</snippet></ROW><ROW><id>6643228</id><snippet>    if word_search in line: 
</snippet></ROW><ROW><id>6643228</id><snippet>case</snippet></ROW><ROW><id>6643228</id><snippet>first_lines = {36: 'Genesis', 4812: 'Exodus', 8867: 'Leviticus', 11749: 'Numbers'}
</snippet></ROW><ROW><id>6643228</id><snippet>ln</snippet></ROW><ROW><id>6643228</id><snippet>ln</snippet></ROW><ROW><id>6643228</id><snippet>for</snippet></ROW><ROW><id>6643228</id><snippet>for key in first_lines</snippet></ROW><ROW><id>6643228</id><snippet>prev_key</snippet></ROW><ROW><id>6643228</id><snippet>ln &gt; key</snippet></ROW><ROW><id>6643228</id><snippet>prev_key</snippet></ROW><ROW><id>6643228</id><snippet>filter</snippet></ROW><ROW><id>6643228</id><snippet>ln</snippet></ROW><ROW><id>6643228</id><snippet>max</snippet></ROW><ROW><id>6643228</id><snippet>first_line = max(filter(lambda l: l &lt; ln, first_lines))
</snippet></ROW><ROW><id>6643228</id><snippet>first_lines</snippet></ROW><ROW><id>6643228</id><snippet>lambda</snippet></ROW><ROW><id>6643228</id><snippet>x</snippet></ROW><ROW><id>6643228</id><snippet>x &lt; ln</snippet></ROW><ROW><id>6643228</id><snippet>filter</snippet></ROW><ROW><id>6643228</id><snippet>first_lines</snippet></ROW><ROW><id>6643228</id><snippet>True</snippet></ROW><ROW><id>6643228</id><snippet>lambda</snippet></ROW><ROW><id>6643228</id><snippet>first_line = max([l for l in first_lines if l &lt; ln])
</snippet></ROW><ROW><id>6643228</id><snippet>first_line = max(l for l in first_lines if l &lt; ln)
</snippet></ROW><ROW><id>6643228</id><snippet>first_line</snippet></ROW><ROW><id>6643228</id><snippet>bibook = first_lines[first_line]
</snippet></ROW><ROW><id>6643228</id><snippet>import os
import sys
import re

word_search = raw_input(r'Enter a word to search: ')
book = open("KJV.txt", "r")
first_lines = {36: 'Genesis', 4812: 'Exodus', 8867: 'Leviticus', 11749: 'Numbers'}

for ln, line in enumerate(book):
    if word_search in line:
        first_line = max(l for l in first_lines if l &lt; ln)
        bibook = first_lines[first_line]

        template = "\nLine: {0}\nString: {1}\nBook: {2}\n"
        output = template.format(ln, word_search, bibook)
        print output
</snippet></ROW><ROW><id>6643515</id><snippet>__import__(....)</snippet></ROW><ROW><id>6643775</id><snippet>&gt;&gt;&gt; a = range(5, 15)
&gt;&gt;&gt; b = range(10, 20)
&gt;&gt;&gt; print sorted(set(a + b))
[5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19]
</snippet></ROW><ROW><id>6643775</id><snippet>&gt;&gt;&gt; list_of_lists = [a, b]
&gt;&gt;&gt; print sorted(set(elem for l in list_of_lists for elem in l))
[5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19]
</snippet></ROW><ROW><id>6643775</id><snippet>&gt;&gt;&gt; list_of_lists = [a, b]
&gt;&gt;&gt; print set.union(*map(set, list_of_lists))
</snippet></ROW><ROW><id>6643775</id><snippet>&gt;&gt;&gt; x = set(range(3))
&gt;&gt;&gt; x
set([0, 1, 2])
&gt;&gt;&gt; x.add(-1)
&gt;&gt;&gt; x
set([0, 1, 2, -1])
</snippet></ROW><ROW><id>6643819</id><snippet>'href="/flowers/([^"]+)"[^&gt;]'
</snippet></ROW><ROW><id>6644095</id><snippet>.find()</snippet></ROW><ROW><id>6644095</id><snippet>string.find()</snippet></ROW><ROW><id>6644462</id><snippet>import Tkinter</snippet></ROW><ROW><id>6644462</id><snippet>locate lib-tk</snippet></ROW><ROW><id>6644462</id><snippet>import sys;
    sys.path.append(PATH_TO_TK)</snippet></ROW><ROW><id>6644508</id><snippet>\t</snippet></ROW><ROW><id>6644508</id><snippet>mrjob</snippet></ROW><ROW><id>6644508</id><snippet>class MRAvgPairwiseLines(MRJob):

def input_mapper(self, _, value):
    """Takes each input line and converts it to (fnum, num) and a key of 'ALL'"""

    fnum, val = value.split('\t')
    yield 'ALL', (fnum, val)

def input_reducer(self, key, values):

    for (fnum1, val1), (fnum2, val2) in product(values, repeat = 2):
        yield fnum1, (fnum1, fnum2, val1, val2)

def do_avg(self, key, value):

    fnum1, fnum2, val1, val2 = value
    res = (float(val1)+float(val2))/float(2)
    yield key, (fnum2, res)

def get_max_avg(self, key, values):

    max_fnum, max_avg = max(values, key = lambda x: x[1])
    yield key, (max_fnum, max_avg)

def steps(self):
    return [self.mr(mapper=self.input_mapper, reducer=self.input_reducer),
                self.mr(mapper=self.do_avg, reducer=self.get_max_avg)]
</snippet></ROW><ROW><id>6644508</id><snippet>input_mapper</snippet></ROW><ROW><id>6644508</id><snippet>input_reducer</snippet></ROW><ROW><id>6644508</id><snippet>yield</snippet></ROW><ROW><id>6644971</id><snippet>SIGCHLD</snippet></ROW><ROW><id>6644971</id><snippet>wait</snippet></ROW><ROW><id>6644971</id><snippet>system()</snippet></ROW><ROW><id>6644971</id><snippet>Popen</snippet></ROW><ROW><id>6645318</id><snippet>def __init__(self, *options):
    for name in options:
        self.__dict__[name] = name
</snippet></ROW><ROW><id>6645318</id><snippet>class_name(argument1="some value")

def __init__(self, **options):
    for name,val in options.iteritems():
        self.__dict__[name] = val
</snippet></ROW><ROW><id>6645358</id><snippet>[3*x for x in [111, 222, 333]]
</snippet></ROW><ROW><id>6645615</id><snippet>from Tkinter import * #from tkinter

root = Tk()
i = PhotoImage(width=100, height=100)
l = Label(root, image=i)
l.pack()
i.put("{red}", to=(4,6,80,80))
root.update()
root.after(3000)
i.put("{blue}", to=(4,6,80,80))
root.mainloop()
</snippet></ROW><ROW><id>6645638</id><snippet>&gt;&gt;&gt; from collections import Counter

# You can get the letters as a list...
&gt;&gt;&gt; [k for k,v in Counter("&lt;text xx will xx be xx pasted xx here&gt;").items() if v&lt;8]
['a', 'b', 'e', 'd', 'i', 'h', 'l', 'p', 's', 'r', 't', 'w', '&lt;', '&gt;']

# ...or a string
&gt;&gt;&gt; "".join(k for k,v in Counter("&lt;text xx will xx be xx pasted xx here&gt;").items() if v&lt;8)
'abedihlpsrtw&lt;&gt;'
</snippet></ROW><ROW><id>6645638</id><snippet>&gt;&gt;&gt; from collections import defaultdict
&gt;&gt;&gt; counter = defaultdict(int)
&gt;&gt;&gt; for c in "&lt;text xx will xx be xx pasted xx here&gt;":
...     counter[c]+=1
... 
&gt;&gt;&gt; "".join(k for k,v in counter.items() if v&lt;8)
'abedihlpsrtw&lt;&gt;'
</snippet></ROW><ROW><id>6645638</id><snippet>&gt;&gt;&gt; counter={}
&gt;&gt;&gt; for c in "&lt;text xx will xx be xx pasted xx here&gt;":
...     counter[c] = counter.get(c,0)+1
... 
&gt;&gt;&gt; "".join(k for k,v in counter.items() if v&lt;8)
'abedihlpsrtw&lt;&gt;'
</snippet></ROW><ROW><id>6645831</id><snippet>root</snippet></ROW><ROW><id>6645831</id><snippet>root</snippet></ROW><ROW><id>6645832</id><snippet>ordered = (qs.extra(select={"order_column": "CONVERT(column, INTEGER)"})
           .order_by("order_column"))
</snippet></ROW><ROW><id>6645867</id><snippet>a+b</snippet></ROW><ROW><id>6645867</id><snippet>a</snippet></ROW><ROW><id>6645867</id><snippet>a.extend(b)</snippet></ROW><ROW><id>6645867</id><snippet>a</snippet></ROW><ROW><id>6645867</id><snippet>a</snippet></ROW><ROW><id>6646194</id><snippet>def east(area):
    if area[-1] in '123':
        return area[:-1] + str(int(area[-1])+1)
    elif "4" == area[-1]:
        print 'no way'
        return area
    else:
        return 'incorrect input'# or throw and exception depends on what you really need
</snippet></ROW><ROW><id>6646478</id><snippet>template_name: The full name of a template to use for displaying the password reset form. This will default to
</snippet></ROW><ROW><id>6646969</id><snippet>global</snippet></ROW><ROW><id>6647205</id><snippet>random.choice</snippet></ROW><ROW><id>6647205</id><snippet>import random
sources = ['a', 'b', 'c', 'd']      # you said 4 strings
result = [random.choice(sources)]

while len(result) &lt; 16:             # you said you need 16 elements    
    elem = random.choice(sources)
    if elem != result[-1]:
        result.append(elem)
</snippet></ROW><ROW><id>6647276</id><snippet>import subprocess
subp = subprocess.Popen(["cmd"])
subp.wait()
print 'process %d finished' % subp.pid
</snippet></ROW><ROW><id>6647321</id><snippet>clf()</snippet></ROW><ROW><id>6647321</id><snippet>cla()</snippet></ROW><ROW><id>6647321</id><snippet>import matplotlib.pyplot as plt

fig = plt.figure()
axes = fig.add_subplot(1,1,1)
axes.set_xlabel("foo")
axes.set_ylabel("bar")
axes.set_title("title")
# ...
fig.savefig("filename")
</snippet></ROW><ROW><id>6647469</id><snippet>logging.debug</snippet></ROW><ROW><id>6647469</id><snippet>lvmCreateSnapshot</snippet></ROW><ROW><id>6647469</id><snippet>if</snippet></ROW><ROW><id>6647469</id><snippet>if lvm_create_snapshot:
    logging.debug('Error creating lvm snapshot of %s/%s, exited with status %s', lvm_vg, lvm_name, lvm_create_snapshot)
else:
    logging.debug('created lvm snapshot of %s/%s, lvm_vg, lvm_name)
</snippet></ROW><ROW><id>6647469</id><snippet>else</snippet></ROW><ROW><id>6647469</id><snippet>subprocess</snippet></ROW><ROW><id>6647469</id><snippet>if</snippet></ROW><ROW><id>6647469</id><snippet>if not lvm_create_snapshot:
    logging.debug('...debugging text...')
</snippet></ROW><ROW><id>6647469</id><snippet>subprocess</snippet></ROW><ROW><id>6647469</id><snippet>subprocess.check_call()</snippet></ROW><ROW><id>6647469</id><snippet>subprocess.check_call</snippet></ROW><ROW><id>6647469</id><snippet>CalledProcessError</snippet></ROW><ROW><id>6647469</id><snippet>try:
    lvmCreateSnapshot(lvm_vg, lvm_name, lvm_snapshot_size)
    logging.debug('created lvm snapshot of %s/%s', lvm_vg, lvm_name)
except CalledProcessError as e:
    logging.debug('Error creating lvm snapshot of {0}/{1}. Return code was {2}'.format(lvm_vg,
        lvm_name, e.returncode))
    raise
</snippet></ROW><ROW><id>6647469</id><snippet>return 1</snippet></ROW><ROW><id>6648471</id><snippet>@import</snippet></ROW><ROW><id>6648471</id><snippet>cssmin</snippet></ROW><ROW><id>6648997</id><snippet>monkey.lib='crypto'</snippet></ROW><ROW><id>6649156</id><snippet>import re
if not re.search('\d+', value):
    # no numbers
else:
    # numbers present
</snippet></ROW><ROW><id>6649651</id><snippet>&gt;&gt;&gt; variable = 12
&gt;&gt;&gt; print 'blah, blah %4.3f' %variable
blah, blah 12.000
&gt;&gt;&gt; print 'blah, blah %1.1f' %variable
blah, blah 12.0
</snippet></ROW><ROW><id>6649885</id><snippet>ld = [{'language': 'de', 'suggestion': 'fressen', 'comment': 'for animals'},
{'language': 'de', 'suggestion': 'essen', 'comment': ''},
{'language': 'fr', 'suggestion': 'manger', 'comment': ''},
{'language': 'fr', 'suggestion': 'bouffer', 'comment': 'slang'}]

langs = {i['language'] for i in ld}

d = []

for lang in langs:
    d.append({"language": lang})
    for key in ld[0].keys() - ["language"]:
        d[-1][key] = [i[key] for i in ld if i["language"] == lang]

print(d)
</snippet></ROW><ROW><id>6649885</id><snippet>[{'comment': ['', 'slang'],
  'language': 'fr',
  'suggestion': ['manger', 'bouffer']},
 {'comment': ['for animals', ''],
  'language': 'de',
  'suggestion': ['fressen', 'essen']}]
</snippet></ROW><ROW><id>6649885</id><snippet>d = {lang: 
        {i["suggestion"]: i["comment"]
        for i in ld if i["language"] == lang} 
    for lang in {i["language"] for i in ld}}

print(d)
</snippet></ROW><ROW><id>6649885</id><snippet>{'de': {'essen': '', 'fressen': 'for animals'},
 'fr': {'bouffer': 'slang', 'manger': ''}}
</snippet></ROW><ROW><id>6649888</id><snippet>import mechanize
import lxml.html

br = mechanize.Browser()
response = br.open("somewebsite")

for link in br.links():
    print link
    br.follow_link(link)  # takes EITHER Link instance OR keyword args
    print br
    br.back()

# you can also display the links with lxml
html = response.read()
root = lxml.html.fromstring(html)
for link in root.iterlinks():
    print link
</snippet></ROW><ROW><id>6650087</id><snippet>xrange</snippet></ROW><ROW><id>6650087</id><snippet>range</snippet></ROW><ROW><id>6650087</id><snippet>for t in xrange(3, x):
    size = (t - 2) * (t - 3)
    a = np.zeros(size)
    b = np.zeros(size)
    c = np.zeros(size)

    idx = 0
    for u in xrange(2,t):
        for v in xrange(1,u):
            a[idx] = t
            b[idx] = u
            c[idx] = v
            idx += 1
</snippet></ROW><ROW><id>6650482</id><snippet>import smtplib
EMAIL_HOST = 'smtp.gmail.com'
EMAIL_PORT = 587
smtp=smtplib.SMTP(host=EMAIL_HOST,port=EMAIL_PORT)
</snippet></ROW><ROW><id>6651084</id><snippet>wrap('HA HA HA /services/nfs_qa/log.lol HO HO HO', '/services/nfs_qa/[^ ]*')
'HA HA HA &lt;a href="/static/services/nfs_qa/log.lol"&gt;Link to the file&lt;/a&gt; HO HO HO'
</snippet></ROW><ROW><id>6651239</id><snippet>[v['path'] for k,v in T.iteritems() if k in &lt;top level keys to be used&gt;]
</snippet></ROW><ROW><id>6651239</id><snippet>[v['path'] for v in T.itervalues() if k in &lt;top level keys to be used&gt;]
</snippet></ROW><ROW><id>6651239</id><snippet>[v.get('path') for v in T.itervalues()]
</snippet></ROW><ROW><id>6651239</id><snippet>from operator import itemgetter
map(itemgetter('path'), T.itervalues())
</snippet></ROW><ROW><id>6651700</id><snippet>£</snippet></ROW><ROW><id>6651700</id><snippet>#-*- coding: latin-1 -*-</snippet></ROW><ROW><id>6651700</id><snippet>#-*- coding: utf-8 -*-</snippet></ROW><ROW><id>6651700</id><snippet>£</snippet></ROW><ROW><id>6651700</id><snippet>£</snippet></ROW><ROW><id>6651700</id><snippet>ln2</snippet></ROW><ROW><id>6651700</id><snippet>len(ln2)</snippet></ROW><ROW><id>6651700</id><snippet>'£' in keyDict.keys()</snippet></ROW><ROW><id>6651700</id><snippet>len(keyDict)</snippet></ROW><ROW><id>6651700</id><snippet>#!/usr/bin/env python
#-*- coding: utf-8 -*-

ln1 = u'?0&gt;9&lt;8~7|65"4:3}2{1+_)'
ln2 = u"(*&amp;^%$£@!/`'\][=-#¢"

refStr = u"%s%s" % (ln2, ln1)

keyDict = {}
for idx, chr_ in enumerate(refStr):
    print chr_,
    keyDict[chr_] = idx

print u"-" * 32
print u"Originl: ", refStr
print u"KeyDict: ", keyDict

tsChr = [u'£', u'%', u'\\', u'¢']
for k in tsChr:
    if k in keyDict.keys():
        print k, "\t", keyDict[k]
    else: print k, repr(k), "\t", "not in the dic."
</snippet></ROW><ROW><id>6652328</id><snippet>class Text(Sprite): 
    """ 
    Alphanumeric values displayed on the screen.
    """      
    def __init__(self, value, size, color, angle=0, 
                 x=0, y=0,
                 top=None, bottom=None, left=None, right=None, font=None,
                 dx=0, dy=0,
                 interval=1, is_collideable=True):
        self._size = size 
        self._color = color 
        self._value = value
        if font:
            self.font_ = font
        else:
            self._font = pygame.font.Font(None, self._size)
        Sprite.__init__(self, self._create_surface(), angle,
                        x, y,
                        top, bottom, left, right,
                        dx, dy,
                        interval, is_collideable)
</snippet></ROW><ROW><id>6652328</id><snippet>import pygame
import games

self.scorebox = games.Text (value = self.scorevar,
                            size = 50,
                            color = color.white,
                            x = 550,
                            y = 50)
</snippet></ROW><ROW><id>6652328</id><snippet>import pygame
import games

self.scorebox = games.Text (value = self.scorevar,
                            size = 50, 
                            font = pygame.font.Font(ardarlingopentype, 50),
                            color = color.white,
                            x = 550,
                            y = 50)
</snippet></ROW><ROW><id>6652514</id><snippet>extend()</snippet></ROW><ROW><id>6652514</id><snippet>append()</snippet></ROW><ROW><id>6652514</id><snippet>patterns.extend(itertools.permutations('1234567',7))
</snippet></ROW><ROW><id>6652514</id><snippet>list()</snippet></ROW><ROW><id>6652514</id><snippet>extend()</snippet></ROW><ROW><id>6652515</id><snippet>import Tkinter as tk
import tkMessageBox

class SampleApp(tk.Tk):
    def __init__(self, *args, **kwargs):
        tk.Tk.__init__(self, *args, **kwargs)
        self.button = tk.Button(self, text="Push me", command=self.OnButton)
        self.button.pack()

    def OnButton(self):
        result = tkMessageBox.askokcancel(title="File already exists", 
                                       message="File already exists. Overwrite?")
        if result is True:
            print "User clicked Ok"
        else:
            print "User clicked Cancel"

if __name__ == "__main__":
    app = SampleApp()
    app.mainloop()
</snippet></ROW><ROW><id>6652658</id><snippet>multiprocessing</snippet></ROW><ROW><id>6652658</id><snippet>numpy</snippet></ROW><ROW><id>6652658</id><snippet>numpy</snippet></ROW><ROW><id>6652658</id><snippet>multiprocessing</snippet></ROW><ROW><id>6652658</id><snippet>from multiprocessing import Pool

def f(x):
    return x*x

if __name__ == '__main__':
    pool = Pool(processes=4)              # start 4 worker processes
    inputs = range(10)
    result = pool.map(f, inputs)
    print result
</snippet></ROW><ROW><id>6652658</id><snippet>f()</snippet></ROW><ROW><id>6652678</id><snippet>'C:\\foo\bar'</snippet></ROW><ROW><id>6652678</id><snippet>'C:\foo\bar'</snippet></ROW><ROW><id>6652678</id><snippet>'C:\x0coo\x08ar'</snippet></ROW><ROW><id>6652678</id><snippet>r</snippet></ROW><ROW><id>6652678</id><snippet>&gt;&gt;&gt; os.path.split(r"C:\foo\bar\file_name.txt")
('C:\\foo\\bar','file_name.txt')
</snippet></ROW><ROW><id>6652703</id><snippet>if input_user == "A":
    variable_a = deduct(variable_a)
else: 
</snippet></ROW><ROW><id>6652791</id><snippet>environ</snippet></ROW><ROW><id>6652791</id><snippet>os.environ</snippet></ROW><ROW><id>6652791</id><snippet>os.environ</snippet></ROW><ROW><id>6652791</id><snippet>wsgiref.handlers.CGIHandler</snippet></ROW><ROW><id>6652791</id><snippet>environ</snippet></ROW><ROW><id>6652791</id><snippet>os.environ</snippet></ROW><ROW><id>6652791</id><snippet>google.appengine.ext.webapp.Request</snippet></ROW><ROW><id>6652791</id><snippet>webob.Request</snippet></ROW><ROW><id>6652791</id><snippet>environ</snippet></ROW><ROW><id>6652791</id><snippet>class MainPage(webapp.RequestHandler):
    def get(self):
        dosomethingwith(self.request.environ)
</snippet></ROW><ROW><id>6652926</id><snippet>id</snippet></ROW><ROW><id>6652926</id><snippet>name</snippet></ROW><ROW><id>6652926</id><snippet>__hash__</snippet></ROW><ROW><id>6652926</id><snippet>set_name</snippet></ROW><ROW><id>6652926</id><snippet>Author</snippet></ROW><ROW><id>6652926</id><snippet>set_id</snippet></ROW><ROW><id>6652926</id><snippet>__hash__</snippet></ROW><ROW><id>6652926</id><snippet>id</snippet></ROW><ROW><id>6652926</id><snippet>Author</snippet></ROW><ROW><id>6652926</id><snippet>_</snippet></ROW><ROW><id>6652926</id><snippet>class Author(object):
    def __init__(self, id, name, age):
        self._id = id
        self._name = name
        self.age = age      # ages tend to change, so mutable

    id = property(lambda self: self._id)
    name = property(lambda self: self._name)

    def __eq__(self, other):
        return self.id==other.id\
               and self.name==other.name

    def __hash__(self):
        return hash(('id', self.id,
                     'name', self.name))
</snippet></ROW><ROW><id>6653141</id><snippet>StrategyExample.execute</snippet></ROW><ROW><id>6653141</id><snippet>StrategyExample.execute(s0)</snippet></ROW><ROW><id>6653141</id><snippet>self.execute</snippet></ROW><ROW><id>6653141</id><snippet>s0.execute</snippet></ROW><ROW><id>6653141</id><snippet>self.execute = strategy</snippet></ROW><ROW><id>6653141</id><snippet>s0.execute = strategy</snippet></ROW><ROW><id>6653141</id><snippet>types.MethodType</snippet></ROW><ROW><id>6653141</id><snippet>self.execute = types.MethodType(strategy, self, StrategyExample)
</snippet></ROW><ROW><id>6653141</id><snippet>execute</snippet></ROW><ROW><id>6653141</id><snippet>strategy</snippet></ROW><ROW><id>6653141</id><snippet>execute</snippet></ROW><ROW><id>6653141</id><snippet>s0.execute()</snippet></ROW><ROW><id>6653141</id><snippet>StrategyExample.execute()</snippet></ROW><ROW><id>6653141</id><snippet>@staticmethod
def execute(*args):
    print locals()
</snippet></ROW><ROW><id>6653326</id><snippet># Sorry but was not able to check code below
def get_diff(fileObj1, fileObj2):
    f1Diff = []
    f2Diff = []
    outputData = []
    # x is one row
    f1Data = set(x.strip() for x in fileObj1)
    f2Data = set(x.strip() for x in fileObj2)
    f1Column1 = set(x.split('\t')[0] for x in f1Data)
    f2Column1 = set(x.split('\t')[0] for x in f2Data)
    l1Col1Diff = f1Column1 ^ f2Column1
    l2Col1Diff = f2Column1 ^ f1Column1
    commonPart = f1Column1 &amp; f2column1
    for line in f1Data.union(f2Data):
        lineKey = line.split('\t')[0]
        if lineKey in common:
            outputData.append(line)
        elif lineKey in l1ColDiff:
            f1Diff.append(line)
        elif lineKey in l2ColDiff:
            f2Diff.append(line)
    return outputData, f1Diff, f2Diff

outputData, file1Missed, file2Missed = get_diff(open(file1, 'r'), open(file2, 'r'))
</snippet></ROW><ROW><id>6653815</id><snippet>import fileinput
import re
from time import strptime

f_names = ['1.log', '2.log'] # names of log files
lines = list(fileinput.input(f_names))
t_fmt = '%a %b %d %H:%M:%S %Y' # format of time stamps
t_pat = re.compile(r'\[(.+?)\]') # pattern to extract timestamp
for l in sorted(lines, key=lambda l: strptime(t_pat.search(l).group(1), t_fmt)):
    print l,
</snippet></ROW><ROW><id>6653873</id><snippet>values_list()</snippet></ROW><ROW><id>6653873</id><snippet>chat_messages.objects.all().values_list('name')
</snippet></ROW><ROW><id>6653873</id><snippet>SELECT `projectname_chat_messages`.`name` FROM `projectname_chat_messages`
</snippet></ROW><ROW><id>6654011</id><snippet>String.intern</snippet></ROW><ROW><id>6654011</id><snippet>String.Intern</snippet></ROW><ROW><id>6654011</id><snippet>HashSet&lt;string&gt;</snippet></ROW><ROW><id>6654030</id><snippet>random.shuffle(list)</snippet></ROW><ROW><id>6654030</id><snippet>&gt;&gt;&gt; import random
&gt;&gt;&gt; random.seed()
&gt;&gt;&gt; sources = ['Prone', 'Supine', 'Halfway', 'HalfInv']
&gt;&gt;&gt; copy1 = sources * 4
&gt;&gt;&gt; copy2 = sources * 4
&gt;&gt;&gt; copy1 == copy2
True
&gt;&gt;&gt; random.shuffle(copy1)
&gt;&gt;&gt; random.shuffle(copy2)
&gt;&gt;&gt; copy1 == copy2
False
&gt;&gt;&gt; copy1
['HalfInv', 'Prone', 'Halfway', 'Supine', 'Prone', 'Halfway', 'Prone', 'Supine', 'Prone', 'HalfInv', 'HalfInv', 'Halfway', 'Supine', 'Halfway', 'HalfInv', 'Supine']
&gt;&gt;&gt; copy2
['Prone', 'Halfway', 'Prone', 'Prone', 'HalfInv', 'Halfway', 'Halfway', 'HalfInv', 'Supine', 'HalfInv', 'Halfway', 'Supine', 'Prone', 'Supine', 'HalfInv', 'Supine']
</snippet></ROW><ROW><id>6654030</id><snippet>&gt;&gt;&gt; n = 2 # number of random lists you want
&gt;&gt;&gt; rand_lists = [] # A list for holding your randomly generated lists
&gt;&gt;&gt; for i in range(n):
    sources_copy = sources * 4
    random.shuffle(sources_copy)
    rand_lists.append(sources_copy)
</snippet></ROW><ROW><id>6654030</id><snippet>zip()</snippet></ROW><ROW><id>6654030</id><snippet>&gt;&gt;&gt; list1 = [1,2,3,4,5]
&gt;&gt;&gt; list2 = ['a','b','c','d','e']
&gt;&gt;&gt; zip(list1, list2)
[(1, 'a'), (2, 'b'), (3, 'c'), (4, 'd'), (5, 'e')]
</snippet></ROW><ROW><id>6654030</id><snippet>*</snippet></ROW><ROW><id>6654030</id><snippet>&gt;&gt;&gt; my_data = zip(*rand_lists)
</snippet></ROW><ROW><id>6654030</id><snippet>def out_csv(mydata, filename):
    with open(filename, 'w') as out_handle:
        for line in mydata:
            out_handle.write(','.join(line) + '\n')
</snippet></ROW><ROW><id>6654030</id><snippet>.csv</snippet></ROW><ROW><id>6654030</id><snippet>.csv</snippet></ROW><ROW><id>6654030</id><snippet>&gt;&gt;&gt; out_csv(my_data, 'my_name.csv')
</snippet></ROW><ROW><id>6654475</id><snippet>reinp</snippet></ROW><ROW><id>6654475</id><snippet>a</snippet></ROW><ROW><id>6654475</id><snippet>    if a in [1,2,3,4,5,6]: #checking for valid input
</snippet></ROW><ROW><id>6654475</id><snippet>    if a in ['1','2','3','4','5','6']: #checking for valid input
</snippet></ROW><ROW><id>6654475</id><snippet>reinp2</snippet></ROW><ROW><id>6654576</id><snippet>&gt;&gt;&gt; from docutils.core import publish_string
&gt;&gt;&gt; publish_string("*anurag*",writer_name='html')
</snippet></ROW><ROW><id>6654576</id><snippet>publish_string</snippet></ROW><ROW><id>6654576</id><snippet>publish_parts</snippet></ROW><ROW><id>6654576</id><snippet>&gt;&gt;&gt; print publish_parts("*anurag*",writer_name='html')['html_body']
&lt;p&gt;&lt;em&gt;anurag&lt;/em&gt;&lt;/p&gt;
</snippet></ROW><ROW><id>6654596</id><snippet>from itertools import groupby

words = ['ct', 'cat', 'cbbt', 'caaabbct', 'cbbccaat',  'cbcbbaat', 'caaccbabbt']
for w in words:
    match = False
    if w.startswith('c') and w.endswith('t'):
        temp = w[1:-1]
        s = set(temp)
        match = s &lt;= set('abc') and len(s) == len(list(groupby(temp)))
    print w, "matches" if match else "doesn't match"
</snippet></ROW><ROW><id>6654596</id><snippet>set('abc')</snippet></ROW><ROW><id>6654596</id><snippet>groupby()</snippet></ROW><ROW><id>6655203</id><snippet>from pyPdf import PdfFileWriter, PdfFileReader
inputpdf = PdfFileReader(file("abc.pdf", "rb"))

for i in range(inputpdf.numPages // 2):
    output = PdfFileWriter()
    output.addPage(inputpdf.getPage(i * 2))
    if i * 2 + 1 &lt;  inputpdf.numPages:
        output.addPage(inputpdf.getPage(i * 2 + 1))
    outputStream = file("abc-page%s.pdf" % i, "wb")
    output.write(outputStream)
    outputStream.close()
</snippet></ROW><ROW><id>6655305</id><snippet>z = {'J': 50, 'Q': 30, 'F': 10}
l = [('J', 20), ('Q', 10), ('F', 2)]
print [(a, b, z[a]) for a, b in l]
</snippet></ROW><ROW><id>6655305</id><snippet>[('J', 20, 50), ('Q', 10, 30), ('F', 2, 10)]
</snippet></ROW><ROW><id>6655305</id><snippet>l</snippet></ROW><ROW><id>6655453</id><snippet>from PyQt4.Qt import *
import math

app = QApplication([])

img = QImage(256, 256, QImage.Format_RGB32)
dc = QPainter(img)
dc.fillRect(0, 0, 256, 256, QColor(192, 192, 192))
dc.setRenderHints(QPainter.Antialiasing)
dc.setPen(QPen(QColor(128, 128, 192),
               12.0,
               Qt.SolidLine,
               Qt.RoundCap,
               Qt.RoundJoin))
pts = []
for i in xrange(7):
    t = i * 2 * 3 * math.pi / 7
    pts.append(QPointF(128 + 100 * math.cos(t),
                       128 + 100 * math.sin(t)))
dc.drawPolyline(QPolygonF(pts))
dc = None
img.save("output.png")
</snippet></ROW><ROW><id>6655653</id><snippet>a</snippet></ROW><ROW><id>6655653</id><snippet>x</snippet></ROW><ROW><id>6656002</id><snippet>d</snippet></ROW><ROW><id>6656002</id><snippet>max(d.items(), key=lambda(k,v):v[1])[0]
</snippet></ROW><ROW><id>6656002</id><snippet>key</snippet></ROW><ROW><id>6656002</id><snippet>max</snippet></ROW><ROW><id>6656100</id><snippet>Cache-Control:private
Content-Encoding:gzip
Content-Length:1100193
Content-Type:application/xml
Date:Mon, 11 Jul 2011 20:21:40 GMT
Server:Microsoft-IIS/7.5
Set-Cookie:NSC_bobmztjt-5njo-opjq*80=ffffffff4304fd3345525d5f4f58455e445a4a423660;expires=Mon, 11-Jul-2011 20:23:42     GMT;path=/;httponly
X-AspNet-Version:4.0.30319
X-Powered-By:ASP.NET
X-Server:fmv-m09 - www
</snippet></ROW><ROW><id>6656196</id><snippet>import re

PAT = re.compile(r'\[(?P&lt;time&gt;[^\]]+)\] \[(?P&lt;level&gt;[^\]]+)\] \[(?P&lt;client&gt;[^\]]+)\] (?P&lt;message&gt;\S+)')
LEVELS = ['critical', 'error', 'warning', 'info', 'debug']

def level_number(line):
    match = PAT.match(line)
    if match:
        level = PAT.match(line).groupdict()['level']
        return LEVELS.index(level)
    return len(LEVELS)

with open('log.txt') as f:
    result = sorted(f, key=level_number)
</snippet></ROW><ROW><id>6656228</id><snippet>import wx

def render(dc):
    dc.Clear()
    region = wx.RegionFromPoints([(256, 64), (448, 448), (64, 448)])
    dc.SetClippingRegionAsRegion(region)
    dc.GradientFillLinear((0, 0, 512, 512), wx.RED, wx.BLACK, wx.NORTH)

def main():
    app = wx.PySimpleApp()
    bitmap = wx.EmptyBitmap(512, 512)
    render(wx.MemoryDC(bitmap))
    bitmap.SaveFile('output.png', wx.BITMAP_TYPE_PNG)

if __name__ == '__main__':
    main()
</snippet></ROW><ROW><id>6656228</id><snippet>GraphicsContext</snippet></ROW><ROW><id>6656611</id><snippet>(?= ... )</snippet></ROW><ROW><id>6656611</id><snippet>java\s?[^A-Z]*(?=\.[A-Z])</snippet></ROW><ROW><id>6656611</id><snippet>java            //Literal word "java"
\s?             //Match for an optional space character. (can change to \s* if there can be multiple)
[^A-Z]*         //Any number of non-capital-letter characters
(?=\.[A-Z])     //Look ahead for (but don't add to selection) a literal period and a capital letter.
</snippet></ROW><ROW><id>6656924</id><snippet>md5</snippet></ROW><ROW><id>6656924</id><snippet>abc</snippet></ROW><ROW><id>6656924</id><snippet>.strip()</snippet></ROW><ROW><id>6656924</id><snippet>md5 = md5.strip()
</snippet></ROW><ROW><id>6656924</id><snippet>Subprocess</snippet></ROW><ROW><id>6656924</id><snippet>.communicate()</snippet></ROW><ROW><id>6656924</id><snippet>bytes</snippet></ROW><ROW><id>6657043</id><snippet>all_unexpired_sessions_for_user</snippet></ROW><ROW><id>6657043</id><snippet>def all_unexpired_sessions_for_user(user):
    user_sessions = []
    all_sessions  = Session.objects.filter(expire_date__gte=datetime.datetime.now())
    for session in all_sessions:
        session_data = session.get_decoded()
        if user.pk == session_data.get('_auth_user_id'):
            user_sessions.append(session.pk)
    return Session.objects.filter(pk__in=user_sessions)

def delete_all_unexpired_sessions_for_user(user, session_to_omit=None):
    session_list = all_unexpired_sessions_for_user(user)
    if session_to_omit is not None:
        session_list.exclude(pk=session_to_omit.pk)
    session_list.delete()
</snippet></ROW><ROW><id>6657043</id><snippet>Session</snippet></ROW><ROW><id>6657105</id><snippet>var zeromq = require("zeromq");

var counter = 0;
var startTime = new Date();

var maxnum = 100000;

var socket = zeromq.createSocket('req');

socket.connect("tcp://127.0.0.1:5502");
console.log("Connected to port 5502.");

socket.send('Hello');

socket.on('message',
          function(data)
          {
              if (counter % 1000 == 0)
              {
                  console.log(data.toString('utf8'), counter);
              }

              if (counter &gt;= maxnum)
              {
                  var endTime = new Date();
                  console.log("Time: ", startTime, endTime);
                  console.log("ms  : ", endTime - startTime);
                  socket.close(); // or the process.exit(0) won't work.
                  process.exit(0);
              }

              //console.log("Received: " + data);
              counter += 1;

          socket.send('Hello');
          }
     );

socket.on('error', function(error) {
    console.log("Error: "+error);
});
</snippet></ROW><ROW><id>6657253</id><snippet>class PersonnelManager(models.Manager):
    def create(self, username, email, phone, address, **kwargs):
        user = User.objects.get_or_create(username=username, email=email)
        return super(PersonnelManager, self).create(user=user, phone=phone, address=address, **kwargs)

class Personnel(models.Model):
    ...
    objects = PersonnelManager()
</snippet></ROW><ROW><id>6657503</id><snippet>re.sub(r'(?:&lt;(?!/?b&gt;))+', '&amp;', string)
</snippet></ROW><ROW><id>6657503</id><snippet>re.sub(r'(?:&lt;(?!/?\w+[^&lt;&gt;]*&gt;))+', '&amp;', string)
</snippet></ROW><ROW><id>6657655</id><snippet>&gt;&gt;&gt; for a, b in zip(range(10), range(10)[1:]):
...     print a, b
</snippet></ROW><ROW><id>6657655</id><snippet>for filename, next in zip(filenames, filenames[1:]):
    print filename, next
</snippet></ROW><ROW><id>6657655</id><snippet>def pairwise(iterable):
    "s -&gt; (s0,s1), (s1,s2), (s2, s3), ..."
    a, b = tee(iterable)
    next(b, None)
    return izip(a, b)
</snippet></ROW><ROW><id>6657718</id><snippet>import subprocess
process = subprocess.Popen(['ls', '-a'], stdout=subprocess.PIPE)
out, err = process.communicate()
print(out)
</snippet></ROW><ROW><id>6658018</id><snippet>2008-10-26 04:38:00|aee15ab24b7b3718596e3acce04fba85
</snippet></ROW><ROW><id>6658018</id><snippet>1310427763.47|aee15ab24b7b3718596e3acce04fba85
</snippet></ROW><ROW><id>6658018</id><snippet>if bookmark:
    suggestions = Suggestion.all().order("-when")
        .filter('when &lt;=', bookmark).fetch(PAGESIZE+1)
else:
    suggestions = Suggestion.all().order("-when").fetch(PAGESIZE+1)
</snippet></ROW><ROW><id>6658018</id><snippet>import time
bookmark = str(time.time())
</snippet></ROW><ROW><id>6658085</id><snippet>readline()</snippet></ROW><ROW><id>6658085</id><snippet>'bob@gmail.com\n'</snippet></ROW><ROW><id>6658085</id><snippet>readline().strip()</snippet></ROW><ROW><id>6658099</id><snippet>significant_digits * (2 ** exponent)</snippet></ROW><ROW><id>6658099</id><snippet>significant_digits</snippet></ROW><ROW><id>6658099</id><snippet>exponent</snippet></ROW><ROW><id>6658099</id><snippet>exponent</snippet></ROW><ROW><id>6658099</id><snippet>significant digits</snippet></ROW><ROW><id>6658108</id><snippet>stdin</snippet></ROW><ROW><id>6658108</id><snippet>is_zipfile</snippet></ROW><ROW><id>6658108</id><snippet>zipselect</snippet></ROW><ROW><id>6658108</id><snippet>is_zipfile</snippet></ROW><ROW><id>6658108</id><snippet>ZipFile</snippet></ROW><ROW><id>6658108</id><snippet>ZipFile</snippet></ROW><ROW><id>6658176</id><snippet>??</snippet></ROW><ROW><id>6658176</id><snippet>In [5]: eval??
Type:       builtin_function_or_method
Base Class: &lt;type 'builtin_function_or_method'&gt;
String Form:    &lt;built-in function eval&gt;
Namespace:  Python builtin
Docstring [source file open failed]:
    eval(source[, globals[, locals]]) -&gt; value

    Evaluate the source in the context of globals and locals.
    The source may be a string representing a Python expression
    or a code object as returned by compile().
    The globals must be a dictionary and locals can be any mapping,
    defaulting to the current globals and locals.
    If only globals is given, locals defaults to it.
</snippet></ROW><ROW><id>6658307</id><snippet>import numpy as np
import scipy.ndimage as ndi

data = np.random.rand(30000,2)*255       ## create random dataset

img = np.zeros((256,256))                ## blank image
for i in xrange(data.shape[0]):          ## draw pixels
    img[data[i,0], data[i,1]] += 1
img = ndi.gaussian_filter(img, (10,10))  ## gaussian convolution
</snippet></ROW><ROW><id>6658910</id><snippet>[1,'1','3/03/2011', [“ScrewDriver”, “Hammer”, “Stone”]]
</snippet></ROW><ROW><id>6658910</id><snippet>”
</snippet></ROW><ROW><id>6658910</id><snippet>"
</snippet></ROW><ROW><id>6658910</id><snippet>”</snippet></ROW><ROW><id>6658910</id><snippet>"</snippet></ROW><ROW><id>6658910</id><snippet>return</snippet></ROW><ROW><id>6658910</id><snippet>return (new)
</snippet></ROW><ROW><id>6658910</id><snippet>return</snippet></ROW><ROW><id>6658910</id><snippet>return</snippet></ROW><ROW><id>6658910</id><snippet>for</snippet></ROW><ROW><id>6658910</id><snippet>for line in lines:
    listline=eval(line)
    if not(num_del==list_line[0]):
        new +=(line + "\n")
    return (new)
</snippet></ROW><ROW><id>6658910</id><snippet>for line in lines:
    listline=eval(line)
    if not(num_del==list_line[0]):
        new +=(line + "\n")

return (new)
</snippet></ROW><ROW><id>6658910</id><snippet>[99 ,1, "3/03/2011", ["ScrewDriver", "Hammer", "Stone"]]
[2 ,2, "3/03/2011", ["hammer,nails"]]
[31 ,2, "3/03/2011", ["plaster,studd"]]
[100 ,2, "3/03/2011", ["hammer,studd"]]
</snippet></ROW><ROW><id>6658949</id><snippet>class IterStreamer(object):
    """
    File-like streaming iterator.
    """
    def __init__(self, generator):
        self.generator = generator
        self.iterator = iter(generator)
        self.leftover = ''

    def __len__(self):
        return self.generator.__len__()

    def __iter__(self):
        return self.iterator

    def next(self):
        return self.iterator.next()

    def read(self, size):
        data = self.leftover
        count = len(self.leftover)
        try:
            while count &lt; size:
                chunk = self.next()
                data += chunk
                count += len(chunk)
        except StopIteration, e:
            self.leftover = ''
            return data

        if count &gt; size:
            self.leftover = data[size:]

        return data[:size]
</snippet></ROW><ROW><id>6658961</id><snippet>$</snippet></ROW><ROW><id>6658961</id><snippet>update(...)</snippet></ROW><ROW><id>6658961</id><snippet>db.foo.insert({
'date': '2011-04-01',
'region': 'NY',
'ranking': [
{ 'item': 'Coca-Cola', 'price': 1.00, 'version': 1 },
{ 'item': 'Diet Coke', 'price': 1.25, 'version': 1 },
{ 'item': 'Diet Pepsi', 'price': 1.50, 'version': 1 },
]})

db.foo.insert({
'date': '2011-05-01',
'region': 'NY',
'ranking': [
{ 'item': 'Diet Coke', 'price': 1.25, 'version': 1 },
{ 'item': 'Coca-Cola', 'price': 1.00, 'version': 1 },
{ 'item': 'Diet Pepsi', 'price': 1.50, 'version': 1 },
]})

db.foo.insert({
'date': '2011-06-01',
'region': 'NY',
'ranking': [
{ 'item': 'Coca-Cola', 'price': 1.00, 'version': 1 },
{ 'item': 'Diet Pepsi', 'price': 1.50, 'version': 1 },
{ 'item': 'Diet Coke', 'price': 1.25, 'version': 1 },
]})

def position_of(item, ranking):
    for i, candidate in enumerate(ranking):
            if candidate['item'] == item:
                    return i
    return None

print [position_of('Diet Coke', x['ranking'])
       for x in db.foo.find({'ranking.item': 'Diet Coke'}, ['ranking.item'])]

# prints [1, 0, 2]
</snippet></ROW><ROW><id>6659074</id><snippet>import time
from datetime import datetime
from apscheduler.scheduler import Scheduler

# Schedule my_job for year, month, day, hour (out of 24), minute.  Then wait.
sched = Scheduler()
sched.start()
def my_job(text):  print text
job = sched.add_date_job(my_job, datetime(2011, 7, 11, 22, 04), ['hello'])
while True:
  print datetime.now()
  time.sleep(1)
</snippet></ROW><ROW><id>6659082</id><snippet>def ret_tup():
    return 1,2 # can also be written with parens

a,b = ret_tup()
</snippet></ROW><ROW><id>6659191</id><snippet>proc.terminate()</snippet></ROW><ROW><id>6659191</id><snippet>  proc.send_signal(signal.SIGINT)
  proc.wait()
</snippet></ROW><ROW><id>6659191</id><snippet>ffmpeg</snippet></ROW><ROW><id>6659191</id><snippet>subprocess.PIPE</snippet></ROW><ROW><id>6659191</id><snippet>open(os.devnull)</snippet></ROW><ROW><id>6659191</id><snippet>stdin</snippet></ROW><ROW><id>6659608</id><snippet>dir()</snippet></ROW><ROW><id>6659608</id><snippet>Python 2.6.5 (r265:79063, Apr 16 2010, 13:09:56)
[GCC 4.4.3] on linux2
Type "help", "copyright", "credits" or "license" for more information.
&gt;&gt;&gt; import itertools
&gt;&gt;&gt; help(itertools)

&gt;&gt;&gt; dir(itertools.chain)
['__class__', '__delattr__', '__doc__', '__format__', '__getattribute__', '__hash__', '__init__', '__iter__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', 'from_iterable', 'next']
</snippet></ROW><ROW><id>6659608</id><snippet>dir()</snippet></ROW><ROW><id>6659608</id><snippet>list</snippet></ROW><ROW><id>6659630</id><snippet>[m for m in abc if 'on' in m]
</snippet></ROW><ROW><id>6659746</id><snippet>display dialog (do shell script "/Users/mymac/Documents/'Microsoft User Data'/'Outlook Script Menu Items'/ test.py &lt; webpage.html")
</snippet></ROW><ROW><id>6659746</id><snippet>print sys.stdin.read()
</snippet></ROW><ROW><id>6660305</id><snippet>re.findall(r'[http://imgur.com/][\s]+"', urlfile)
</snippet></ROW><ROW><id>6660305</id><snippet>re.findall(r'(http://imgur.com/\S+)"', urlfile)
</snippet></ROW><ROW><id>6660305</id><snippet>re.findall(r'http://imgur.com/(\S+)"', urlfile)
</snippet></ROW><ROW><id>6660527</id><snippet>os.path.join</snippet></ROW><ROW><id>6660527</id><snippet>currentdir = os.getcwd()    
config_file_path =  os.path.join(currentdir,"\\..\\Common")
</snippet></ROW><ROW><id>6660527</id><snippet>"\\..\\Common"</snippet></ROW><ROW><id>6660527</id><snippet>\</snippet></ROW><ROW><id>6660527</id><snippet>..\\Common</snippet></ROW><ROW><id>6660527</id><snippet>os.path.join</snippet></ROW><ROW><id>6660527</id><snippet>config_file_path =  os.path.join(currentdir,"..\\Common")
</snippet></ROW><ROW><id>6660527</id><snippet>config_file_path =  os.path.join(currentdir, "..", "Common")
</snippet></ROW><ROW><id>6660836</id><snippet>class ProductDataForm(ModelForm):
     __init__():
         ...
          for field_name in PRODUCTDATA_EXCLUDE_FIELDS:
              del self.fields[field_name]
         ...
</snippet></ROW><ROW><id>6660953</id><snippet>your_value * (1/3 of the maximum H value, often 255)
</snippet></ROW><ROW><id>6661265</id><snippet>def get_leaves(node, list_of_leaves=None):
    list_of_leaves = [] if list_of_leaves is None else list_of_leaves
    kids=getchildren(node)
    for i in kids:
        if leafnode(i):
            get_leaves(i, list_of_leaves)
        else:
            a=process_leaf(i)
            list_of_leaves.append(a)

def calling_fn():
    result = [] 
    get_leaves(rootnode, list_of_leaves=result)
    print result
</snippet></ROW><ROW><id>6661265</id><snippet>int</snippet></ROW><ROW><id>6661265</id><snippet>string</snippet></ROW><ROW><id>6661265</id><snippet>list</snippet></ROW><ROW><id>6661265</id><snippet>BeautifulSoup</snippet></ROW><ROW><id>6661265</id><snippet>lxml.html</snippet></ROW><ROW><id>6661349</id><snippet>  ,   ,   ,   ,
 / \ / \ / \ / \
| A1| A2| A3| A4|
 \ / \ / \ / \ /
  | B1| B2| B3|
 / \ / \ / \ / \
| C1| C2| C3| C4|
 \ / \ / \ / \ /
  '   '   '   '
</snippet></ROW><ROW><id>6661455</id><snippet>request.user.get_profile().company</snippet></ROW><ROW><id>6661455</id><snippet>request</snippet></ROW><ROW><id>6661455</id><snippet>request</snippet></ROW><ROW><id>6661455</id><snippet>class MyForm(forms.ModelForm):
    def __init__(self, *args, **kwargs):
        self.user = kwargs.pop('user')
        super(MyForm, self).__init__(*args, **kwargs)

# in you view
form = MyForm(user=request.user)
</snippet></ROW><ROW><id>6661786</id><snippet>forms.py</snippet></ROW><ROW><id>6661786</id><snippet>formfields.py</snippet></ROW><ROW><id>6661786</id><snippet>forms.py</snippet></ROW><ROW><id>6661786</id><snippet>forms_user.py</snippet></ROW><ROW><id>6661786</id><snippet>forms_products.py</snippet></ROW><ROW><id>6661786</id><snippet>forms_data_entry.py</snippet></ROW><ROW><id>6662189</id><snippet>&gt;&gt;&gt; a = [1,2,3]
&gt;&gt;&gt; a[:] = [3,4]
&gt;&gt;&gt; a
[3, 4]
&gt;&gt;&gt; a[]
  File "&lt;stdin&gt;", line 1
    a[]
      ^
SyntaxError: invalid syntax
</snippet></ROW><ROW><id>6662189</id><snippet>&gt;&gt;&gt; a[2:] = [3,4]
&gt;&gt;&gt; a
[3, 4, 3, 4]
</snippet></ROW><ROW><id>6662372</id><snippet>/</snippet></ROW><ROW><id>6662372</id><snippet>/favicon.ico</snippet></ROW><ROW><id>6662372</id><snippet>url</snippet></ROW><ROW><id>6662372</id><snippet>webbapp</snippet></ROW><ROW><id>6662494</id><snippet>&gt;&gt;&gt; nltk.download()
# Download window opens, fetch wordnet
&gt;&gt;&gt; from nltk.corpus import wordnet as wn
</snippet></ROW><ROW><id>6662494</id><snippet>WordNetCorpusReader</snippet></ROW><ROW><id>6662494</id><snippet>wn</snippet></ROW><ROW><id>6662494</id><snippet>Dictionary</snippet></ROW><ROW><id>6662494</id><snippet>nltk.corpus.wordnet</snippet></ROW><ROW><id>6663263</id><snippet>for index, linkobj in enumerate(myfiles):
    if "sca" in linkobj.url:
        resp = br.follow_link(text='Download [IMG]',nr=0)
        content = resp.read()
        with open('output%s.txt' % index, 'w') as fo:
           fo.write(content)
</snippet></ROW><ROW><id>6663526</id><snippet># class for routing db operations for  some blog myapp
class MyAppRouter(object):
    """A router to control all database operations on models in
    the myapp application"""

    def db_for_read(self, model, **hints):
        "Point all operations on myapp models to 'other'"
        if model._meta.app_label == 'myapp':
            return 'other'
        return None

    def db_for_write(self, model, **hints):
        "Point all operations on myapp models to 'other'"
        if model._meta.app_label == 'myapp':
            return 'other'
        return None

    def allow_relation(self, obj1, obj2, **hints):
        "Allow any relation if a model in myapp is involved"
        if obj1._meta.app_label == 'myapp' or obj2._meta.app_label == 'myapp':
            return True
        return None

    def allow_syncdb(self, db, model):
        "Make sure the myapp app only appears on the 'other' db"
        if db == 'other':
            return model._meta.app_label == 'myapp'
        elif model._meta.app_label == 'myapp':
            return False
        return None
</snippet></ROW><ROW><id>6663526</id><snippet>DATABASES = {
'default': {
     ...
     # Project DB
           }
# Blog DB
'blog': { 
    'ENGINE': 'django.contrib.gis.db.backends.postgis',
    'NAME': 'test',
    'USER': 'postgres',
    'PASSWORD': 'admin',
    'HOST': '111.111.111.111',
    'PORT': '5432',
    }
}

...
DATABASE_ROUTERS = ['path.to.MyAppRouter', 'path.to.MasterSlaveRouter']
</snippet></ROW><ROW><id>6663817</id><snippet>sys.stderr.write("Unexpected error! File %s could not be converted." % src)
</snippet></ROW><ROW><id>6663817</id><snippet>sys.stderr.write("Unexpected error! File {0} could not be converted.".format(src))
</snippet></ROW><ROW><id>6664233</id><snippet>[x for x in os.listdir(...) if not os.path.isdir(os.path.join(..., x))]
</snippet></ROW><ROW><id>6664424</id><snippet>#!/bin/bash
cd /home/boris/Downloads/
name=`ls -t1 | head -1`
gwenview $name &amp;
sleep 3
id=`ps -e | grep gwenview | awk '{print $1}'`
qdbus org.kde.gwenview-$id /gwenview/MainWindow_1/actions/edit_copy trigger
sleep 3
kill $id
</snippet></ROW><ROW><id>6664424</id><snippet>qdbusviewer
</snippet></ROW><ROW><id>6664424</id><snippet>qdbus org.kde.krunner /ScreenSaver Lock
</snippet></ROW><ROW><id>6664573</id><snippet>r'(\d+)\.(\d+)'</snippet></ROW><ROW><id>6664573</id><snippet>match = re.match(r'(\d+)\.(\d+)', line)</snippet></ROW><ROW><id>6664573</id><snippet>chapter = match.group(1)</snippet></ROW><ROW><id>6664573</id><snippet> for ln, line in enumerate(book):
      match = match = re.match(r'(\d+)\.(\d+)', line)
      if match:
           chapter, verse = match.group(1), match.group(2)

      if word_search in line:
           ...
           print 'Book %s %s:%s ...%s...' % (book, chapter, verse, line)
</snippet></ROW><ROW><id>6664692</id><snippet>eval()</snippet></ROW><ROW><id>6664692</id><snippet>sys</snippet></ROW><ROW><id>6664692</id><snippet>__stdout__</snippet></ROW><ROW><id>6664692</id><snippet>library.zip</snippet></ROW><ROW><id>6664692</id><snippet>sys.path</snippet></ROW><ROW><id>6665059</id><snippet>import scipy.stats</snippet></ROW><ROW><id>6665107</id><snippet>def do_something( condition, argument ):
   if condition(argument):
       # whatever

def the_exe_rule( argument ):
    return argument.endswith('.exe')

do_something( the_exe_rule, some_file )
</snippet></ROW><ROW><id>6665107</id><snippet>do_something( lambda x: x.endswith('.exe'), some_file )
</snippet></ROW><ROW><id>6665452</id><snippet>principal.secondary</snippet></ROW><ROW><id>6665452</id><snippet>principal</snippet></ROW><ROW><id>6665452</id><snippet>principal</snippet></ROW><ROW><id>6665452</id><snippet>principal.secondary</snippet></ROW><ROW><id>6665452</id><snippet>principal</snippet></ROW><ROW><id>6665452</id><snippet>principal.secondary</snippet></ROW><ROW><id>6665452</id><snippet>p = principal()
s = principal.secondary(p)
</snippet></ROW><ROW><id>6665452</id><snippet>principal.secondary</snippet></ROW><ROW><id>6665452</id><snippet>principal</snippet></ROW><ROW><id>6665452</id><snippet>principal.secondary</snippet></ROW><ROW><id>6665452</id><snippet>threading.Thread</snippet></ROW><ROW><id>6665452</id><snippet>object</snippet></ROW><ROW><id>6665452</id><snippet>class Principal(object):
    ...
</snippet></ROW><ROW><id>6665452</id><snippet>def generateSecondary(outerObject):
    class Secondary(object):
        def __init__(self):
            outerObject.proceed()
    return Secondary
</snippet></ROW><ROW><id>6665452</id><snippet>outerObject</snippet></ROW><ROW><id>6665452</id><snippet>Principal</snippet></ROW><ROW><id>6665452</id><snippet>generateSecondary()</snippet></ROW><ROW><id>6665452</id><snippet>__init__</snippet></ROW><ROW><id>6665452</id><snippet>Principal</snippet></ROW><ROW><id>6665452</id><snippet>class Principal(object):
    def __init__(self):
        self.attribute = "an attribute of %s" % self
        self.Secondary = generateSecondary(self)

    def proceed(self):
        print self.attribute
</snippet></ROW><ROW><id>6665452</id><snippet>&gt;&gt;&gt; principal = Principal()
&gt;&gt;&gt; secondary = principal.Secondary()
an attribute of &lt;classeption.Principal object at 0x2e3970&gt;
&gt;&gt;&gt; secondary
&lt;classeption.Secondary object at 0x2e3a10&gt;
</snippet></ROW><ROW><id>6665650</id><snippet>$sql_query = 'CREATE DATABASE ' . PMA_backquote($new_db);  
</snippet></ROW><ROW><id>6665650</id><snippet>CREATE DATABASE `test_db; DROP some_other_db`;
</snippet></ROW><ROW><id>6666585</id><snippet>request.headers</snippet></ROW><ROW><id>6666585</id><snippet>werkzeug.wsgi.wrap_file</snippet></ROW><ROW><id>6666834</id><snippet>L = [['a',1], ['a',2], ['a',3], ['b',1], ['b',2], ['b',3]]
L.sort(key=lambda k: (k[0], -k[1]), reverse=True)
</snippet></ROW><ROW><id>6666834</id><snippet>L</snippet></ROW><ROW><id>6666834</id><snippet>[['b', 1], ['b', 2], ['b', 3], ['a', 1], ['a', 2], ['a', 3]]
</snippet></ROW><ROW><id>6667012</id><snippet>array = []
with open('file.txt', 'r') as f:       
   for line in f:
      name, value = line.split()
      value = int(value)
      array.append((name, value))       
</snippet></ROW><ROW><id>6667069</id><snippet>from Tkinter import *

class safe: # the decorator
  def __init__(self, function):
    self.function = function

  def __call__(self, *args):
    try:
      return self.function(*args)
    except Exception, e:
      # make a popup here with your exception information.
      # might want to use traceback module to parse the exception info
      print "Error: %s" % (e)

@safe
def bad():
    1/0

root = Tk()
b = Button(root, text="press me", command=bad)
b.pack()
</snippet></ROW><ROW><id>6667102</id><snippet>import numpy as np
import pylab as plt

totfigs = 5

plt.figure()
plt.hold = True
boxes=[]
for i in np.arange(totfigs):    
    x = np.random.random(50)
    boxes.append(x)

plt.boxplot(boxes,vert=0)
plt.show()
</snippet></ROW><ROW><id>6667118</id><snippet>except:</snippet></ROW><ROW><id>6667118</id><snippet>commit_on_success</snippet></ROW><ROW><id>6667118</id><snippet>raise</snippet></ROW><ROW><id>6667200</id><snippet>getElementsByTagName()</snippet></ROW><ROW><id>6667200</id><snippet>for item in XML_Document.getElementsByTagName('item'):
    tag1 = item.getElementsByTagName('tag1')[0].toxml(encoding="utf-8")
    tag2 = item.getElementsByTagName('tag2')[0].toxml(encoding="utf-8")
    tag3 = item.getElementsByTagName('tag3')[0].toxml(encoding="utf-8")
    print tag1, tag2, tag3
</snippet></ROW><ROW><id>6667219</id><snippet>@register.simple_tag
def madlibfield(formfield):
   return formfield.label % formfield
</snippet></ROW><ROW><id>6667219</id><snippet>{% madlibfield form.num_widgets %}
</snippet></ROW><ROW><id>6667219</id><snippet>as_p</snippet></ROW><ROW><id>6667288</id><snippet># Creates a list containing 5 lists initialized to 0
Matrix = [[0 for x in xrange(5)] for x in xrange(5)] 
</snippet></ROW><ROW><id>6667288</id><snippet>Matrix[0][0] = 1
Matrix[4][0] = 5

print Matrix[0][0] # prints 1
print Matrix[4][0] # prints 5
</snippet></ROW><ROW><id>6667319</id><snippet>originalChecksum=packet['TCP'].chksum
del packet['TCP'].chksum
packet=IP(str(packet))
recomputedChecksum=packet['TCP'].chksum
</snippet></ROW><ROW><id>6667561</id><snippet>import os.path
p = os.path.abspath(__file__)
</snippet></ROW><ROW><id>6667757</id><snippet>&gt;&gt;&gt; import json
&gt;&gt;&gt; json.loads('["foo", {"bar":["baz", null, 1.0, 2]}]')
[u'foo', {u'bar': [u'baz', None, 1.0, 2]}]
</snippet></ROW><ROW><id>6667757</id><snippet>import json
with open(file.txt) as f:
    text = f.read()
    bookmarks = json.loads(text)
print bookmarks[bookmarks_bar][children][0][name]
</snippet></ROW><ROW><id>6668326</id><snippet>filename = raw_input("Please enter your filename:\n")
openedFile = open(filename, "rb")
startAddress = raw_input("From the EEPROM file, enter 'Start Address':\n")
endAddress = raw_input("From the EEPROM file, enter 'End Address':\n")
</snippet></ROW><ROW><id>6668326</id><snippet>'\n'</snippet></ROW><ROW><id>6668326</id><snippet>raw_input()</snippet></ROW><ROW><id>6668326</id><snippet>startAddress</snippet></ROW><ROW><id>6668326</id><snippet>endAddress</snippet></ROW><ROW><id>6668326</id><snippet>int</snippet></ROW><ROW><id>6668326</id><snippet>with open(filename, 'rb') as searchfile:
    for line in searchfile:
        if 'searchphrase' in line:
            print line
</snippet></ROW><ROW><id>6668326</id><snippet>'searchphrase'</snippet></ROW><ROW><id>6668326</id><snippet>with</snippet></ROW><ROW><id>6668326</id><snippet>file.seek()</snippet></ROW><ROW><id>6668326</id><snippet>x = openedFile.readline()
    for line in x:
        return x
        print x
</snippet></ROW><ROW><id>6668326</id><snippet>return</snippet></ROW><ROW><id>6668334</id><snippet># -*- coding: iso-8859-15 -*-
</snippet></ROW><ROW><id>6668334</id><snippet># -*- coding: utf-8 -*-
</snippet></ROW><ROW><id>6668334</id><snippet># coding=utf-8
</snippet></ROW><ROW><id>6668334</id><snippet>repr('swedish string'</snippet></ROW><ROW><id>6668334</id><snippet>repr(u'swedish string')</snippet></ROW><ROW><id>6668417</id><snippet>^_notes</snippet></ROW><ROW><id>6668497</id><snippet>from collections import defaultdict

d = defaultdict(list)

with open('john_file.txt') as f:
    for line in f:
        fields = line.split('\t')
        d[fields[1]].append(line)
</snippet></ROW><ROW><id>6668497</id><snippet>d['john1']</snippet></ROW><ROW><id>6668497</id><snippet>d['john2']</snippet></ROW><ROW><id>6668508</id><snippet>import parms

parms.foo
parms.bar
parms.baz
</snippet></ROW><ROW><id>6669424</id><snippet>sub_nav.html</snippet></ROW><ROW><id>6669424</id><snippet>base.html</snippet></ROW><ROW><id>6669448</id><snippet>[x for x in path.split("/") if x]
</snippet></ROW><ROW><id>6669448</id><snippet>path.lstrip('/').split("/")
</snippet></ROW><ROW><id>6669448</id><snippet>path.strip('/').split("/")
</snippet></ROW><ROW><id>6669448</id><snippet>path[1:].split('/')
</snippet></ROW><ROW><id>6669549</id><snippet>ZipFile.writestr</snippet></ROW><ROW><id>6669549</id><snippet>strf = StringIO(rv[0]["archivefield"])
zipf = ZipFile(strf, "a")
data = myzip.read("content.txt"')

# process data, changing its value

zipf.writestr("content.txt", data)
zipf.close()  # actually write contents out
</snippet></ROW><ROW><id>6669549</id><snippet>str.getvalue()</snippet></ROW><ROW><id>6669549</id><snippet>rv[0]["archivefield"]</snippet></ROW><ROW><id>6669742</id><snippet>DevIoCtl</snippet></ROW><ROW><id>6669742</id><snippet>byref(BytesReturned)</snippet></ROW><ROW><id>6669742</id><snippet>ctypes.cast</snippet></ROW><ROW><id>6669742</id><snippet>bytes</snippet></ROW><ROW><id>6669742</id><snippet>output[:BytesReturned.value]</snippet></ROW><ROW><id>6669742</id><snippet>__DeviceIoControl</snippet></ROW><ROW><id>6669742</id><snippet>bytes</snippet></ROW><ROW><id>6670141</id><snippet>lot</snippet></ROW><ROW><id>6670141</id><snippet>from itertools import groupby, islice
from operator import itemgetter

ans = []
for x, g1 in groupby(lot, itemgetter(0)):
    for y, g2 in islice(groupby(g1, itemgetter(2)), 0, 3):
        ans.extend(list(g2))

print ans
# [('a', 'x1', 10), ('a', 'x2', 9), ('a', 'x3', 9), ('a', 'x4', 8), ('a', 'x5', 8),
#  ('b', 'x1', 10), ('b', 'x2', 9), ('b', 'x3', 8)]
</snippet></ROW><ROW><id>6670331</id><snippet>firstName, lastName = myString.split()</snippet></ROW><ROW><id>6670331</id><snippet>firstName, lastName = myString.split(' ', 1)</snippet></ROW><ROW><id>6670590</id><snippet># assume driver is an instance of WebDriver
# NOTE: this code is untested
driver.find_element_by_xpath(".//a[@href='http://www.testsite.com/pageOne.html']")
</snippet></ROW><ROW><id>6670590</id><snippet># again, assume driver is an instance of WebDriver
# NOTE: this code is untested
driver.find_element_by_css_selector("a[href='http://www.testsite.com/pageOne.html']")
</snippet></ROW><ROW><id>6670785</id><snippet>enter_callback</snippet></ROW><ROW><id>6670785</id><snippet>x</snippet></ROW><ROW><id>6670785</id><snippet>x</snippet></ROW><ROW><id>6670785</id><snippet>x</snippet></ROW><ROW><id>6670785</id><snippet>self</snippet></ROW><ROW><id>6670785</id><snippet>enter_callback</snippet></ROW><ROW><id>6670812</id><snippet>import sys, os
sys.path = [os.path.abspath(os.path.dirname(__file__))] + sys.path
</snippet></ROW><ROW><id>6670974</id><snippet>&gt;&gt;&gt; x = [0,1,7,3,4,5,10]
&gt;&gt;&gt; n = 3
&gt;&gt;&gt; zip(*(x[i:] for i in range(n)))
[(0, 1, 7), (1, 7, 3), (7, 3, 4), (3, 4, 5), (4, 5, 10)]
</snippet></ROW><ROW><id>6670974</id><snippet>map(list, zip(...))</snippet></ROW><ROW><id>6671051</id><snippet>SetTransparent</snippet></ROW><ROW><id>6671051</id><snippet>import wx

class Frame(wx.Frame):
    def __init__(self):
        super(Frame, self).__init__(None)
        self.Bind(wx.EVT_ERASE_BACKGROUND, self.OnEraseBackground)
        self.Bind(wx.EVT_LEFT_DOWN, self.OnLeftDown)
        self.Bind(wx.EVT_KEY_DOWN, self.OnKeyDown)
        self.Bind(wx.EVT_PAINT, self.OnPaint)
    def OnEraseBackground(self, event):
        pass # do nothing
    def OnLeftDown(self, event):
        print event.GetPosition()
    def OnKeyDown(self, event):
        if event.GetKeyCode() == wx.WXK_ESCAPE:
            self.Close()
        else:
            event.Skip()
    def OnPaint(self, event):
        w, h = self.GetSize()
        dc = wx.PaintDC(self)
        region = wx.RegionFromPoints([(0, 0), (w, 0), (w, h), (0, h)])
        box = wx.RegionFromPoints([(100, 100), (500, 100), (500, 500), (100, 500)])
        region.SubtractRegion(box)
        dc.SetClippingRegionAsRegion(region)
        dc.DrawRectangle(0, 0, w, h)

if __name__ == '__main__':
    app = wx.PySimpleApp()
    frame = Frame()
    frame.ShowFullScreen(True)
    app.MainLoop()
</snippet></ROW><ROW><id>6671095</id><snippet>with open(domain + ".xml", "w") as  f:
    f.write( "&lt;?xml..." )
    f.write( "&lt;items&gt;" )
    for item in sdbdomain:
      buffer= []
      for k,v in item.items():
          if not isinstance(v, basestring):
            for i, val in enumerate(v):
              txt= '{0}::{1}="{2}"'.format(k,i,val)
          else:
            txt= '{0}="{1}"'.format(k,v)
          buffer.append( txt )
       f.write( "  &lt;item {0}/&gt;\n".format( " ".join(buffer) ))
     f.write( "&lt;/items&gt;" )
k= ................      
k.set_contents_from_filename(f.name)
</snippet></ROW><ROW><id>6671316</id><snippet>parser.add_option("-e", help="e desc", dest="e_opt", action="store_true")
parser.add_option("-d", help="d desc", dest="d_opt", action="store_true")
(opts, args) = parser.parse_args()
if (parser.has_option("-e") and parser.has_option("-d")):
    print "Error!  Found both d and e options.  You can't do that!"
    sys.exit(1)
</snippet></ROW><ROW><id>6671316</id><snippet>if (opts.e_opt and opts.d_opt):
</snippet></ROW><ROW><id>6671316</id><snippet>parser.add_option("-w", help="warning", dest="warn", default=0)
</snippet></ROW><ROW><id>6671316</id><snippet>parser.add_option("-v", help="verbose on", dest="verbose", action="store_true")
parser.add_option("-q", help="verbose off", dest="verbose", action="store_false")
</snippet></ROW><ROW><id>6671440</id><snippet>nargs='+'</snippet></ROW><ROW><id>6671440</id><snippet>'*'</snippet></ROW><ROW><id>6671440</id><snippet>nargs=argparse.REMAINDER</snippet></ROW><ROW><id>6671739</id><snippet>google.appengine.ext.webapp</snippet></ROW><ROW><id>6671739</id><snippet>my_model.description</snippet></ROW><ROW><id>6671739</id><snippet>t = template.Template(my_model.description)
my_string = t.render(template.Context(template_dict))
</snippet></ROW><ROW><id>6672043</id><snippet>Tag.objects.get_for_object(self).filter(name='new')
</snippet></ROW><ROW><id>6672043</id><snippet>list(tags)
</snippet></ROW><ROW><id>6672249</id><snippet>&gt;&gt;&gt; output = r'\author{{email}}'.format(email='user@example.org')
&gt;&gt;&gt; print output
\author{email}
</snippet></ROW><ROW><id>6672249</id><snippet>&gt;&gt;&gt; output = r'\begin{{document}} ... \author{{{email}}}'.format(
... email='user@example.org')
&gt;&gt;&gt; print output
\begin{document} ... \author{user@example.org}
</snippet></ROW><ROW><id>6672262</id><snippet>strptime()</snippet></ROW><ROW><id>6672262</id><snippet>strftime()</snippet></ROW><ROW><id>6672262</id><snippet>from datetime import datetime
ntp_time = datetime.strptime(time_str_from_ntp, "%a %b %y %H:%M:%S")
formatted_time = datetime.strftime(ntp_time, "%Y-%m-%d %H:%M:%S")
</snippet></ROW><ROW><id>6672262</id><snippet>utc_secs = time.ctime(utc_secs)
</snippet></ROW><ROW><id>6672262</id><snippet>from datetime import datetime</snippet></ROW><ROW><id>6672262</id><snippet>datetime.datetime.fromtimestamp</snippet></ROW><ROW><id>6672262</id><snippet>datetime.fromtimestamp</snippet></ROW><ROW><id>6672262</id><snippet>formatted_time = datetime.fromtimestamp(utc_secs).strftime("%Y-%m-%d %H:%M:%S")
</snippet></ROW><ROW><id>6672593</id><snippet>import multiprocessing

num_procs = 4
def do_work(message):
  print "work",message ,"completed"

def worker():
  for item in iter( q.get, None ):
    do_work(item)
    q.task_done()
  q.task_done()

q = multiprocessing.JoinableQueue()
procs = []
for i in range(num_procs):
  procs.append( multiprocessing.Process(target=worker) )
  procs[-1].daemon = True
  procs[-1].start()

source = ['hi','there','how','are','you','doing']
for item in source:
  q.put(item)

q.join()

for p in procs:
  q.put( None )

q.join()

for p in procs:
  p.join()

print "Finished everything...."
print "num active children:", multiprocessing.active_children()
</snippet></ROW><ROW><id>6672696</id><snippet>import os, time
size = os.stat(file).st_size
time.sleep(600)
fh = open(file)
fh.seek(size)
newData = fh.read()
</snippet></ROW><ROW><id>6672796</id><snippet>self</snippet></ROW><ROW><id>6672796</id><snippet>VALUE self</snippet></ROW><ROW><id>6672796</id><snippet>self</snippet></ROW><ROW><id>6672796</id><snippet> person = Person.new
 person.do_sth
</snippet></ROW><ROW><id>6672796</id><snippet>VALUE
person_do_sth(VALUE self) {
    //do something
    return self;
}
</snippet></ROW><ROW><id>6672796</id><snippet>VALUE</snippet></ROW><ROW><id>6672796</id><snippet>void</snippet></ROW><ROW><id>6672796</id><snippet>self</snippet></ROW><ROW><id>6672796</id><snippet>self</snippet></ROW><ROW><id>6672796</id><snippet>self</snippet></ROW><ROW><id>6672796</id><snippet>puts "#{self} - declared in global scope"  # the 'top self' aka 'main'
class &lt;&lt; self
  puts "#{self} - 'main's singleton class" # main's singleton or 'eigenclass'
end

puts "Starting to interpret class A code"

class A
  puts "#{self} - When do I get executed!?" # self is class A

  class &lt;&lt; self
    puts "#{self} - And me!?" # now A's  singleton class
    def a # declaring method in class's singleton class results in class method
      puts "#{self} - declared in singleton class" # it's A
    end 
  end

  def self.b
    puts "#{self} - declared in class method" # self is class A again -&gt; class method
    class &lt;&lt; self
      puts "#{self} - declared in Class A's singleton class" # now it's Class A's singleton class
    end
  end

  def c
    puts "#{self} - declared in instance method" # self is instance of A
    class &lt;&lt; self
      puts "#{self} - declared in instance's singleton class" # now it's the A instance's singleton class
    end
  end

end  

puts "All so far has happened simply by interpreting A's code" 

a = A.new
A.a
A.b
a.c
</snippet></ROW><ROW><id>6672796</id><snippet>self</snippet></ROW><ROW><id>6672796</id><snippet>self.method</snippet></ROW><ROW><id>6672796</id><snippet>self</snippet></ROW><ROW><id>6672796</id><snippet>self</snippet></ROW><ROW><id>6672796</id><snippet>private</snippet></ROW><ROW><id>6672796</id><snippet>private</snippet></ROW><ROW><id>6672796</id><snippet>self</snippet></ROW><ROW><id>6672796</id><snippet>class A

  def a
    b
  end

  private

  def b
    puts "I'm private"
  end
end

a = A.new
a.a # =&gt; I'm private
</snippet></ROW><ROW><id>6672796</id><snippet>def a
  self.b
end
</snippet></ROW><ROW><id>6672796</id><snippet>class A {
    private boolean compareUs(A a1, A a2) { ... }

    public boolean equals(A a1, A a2) {
        return (a1.compareUs() == a2.compareUs());
    }
}
</snippet></ROW><ROW><id>6672796</id><snippet>self</snippet></ROW><ROW><id>6672796</id><snippet>instance_eval</snippet></ROW><ROW><id>6672796</id><snippet>class_eval</snippet></ROW><ROW><id>6672796</id><snippet>self</snippet></ROW><ROW><id>6673107</id><snippet>items = ['taylor', 'steven', 'roger']
filenames = ['file1', 'file2', 'file3']

for item, filename in zip(items, filenames):
    with open(filename, 'w') as output:
        output.write(item + '\n')
</snippet></ROW><ROW><id>6673220</id><snippet>def difference(after, before):
    return tuple(before.index(x) for x in after)

print difference('ijk', 'ikj') # (0, 2, 1)
print difference('jik', 'ikj') # (2, 0, 1)
</snippet></ROW><ROW><id>6673270</id><snippet>elif choice == "4":
    numberA = raw_input("Enter your dividend: ")
    numberB = raw_input("Enter your divisor: ")
    while float(numberB) == 0:
        print "You cannot divide by zero. Please choose another divisor."
        numberB = raw_input("Enter your divisor: ")
    print "The quotient of those numbers is:"
    print division(numberA, numberB)
</snippet></ROW><ROW><id>6673395</id><snippet>from django.db.models import Count
Image.objects.annotate(Count("person")).order_by("person__count")
</snippet></ROW><ROW><id>6673572</id><snippet>    if '_concordance_index' not in self.__dict__:
        print "Building index..."
        self._concordance_index = ConcordanceIndex(self.tokens,
                                                   key=lambda s:s.lower())

    self._concordance_index.print_concordance(word, width, lines)
</snippet></ROW><ROW><id>6673572</id><snippet>print_concordance</snippet></ROW><ROW><id>6673607</id><snippet>io</snippet></ROW><ROW><id>6673979</id><snippet>class ArticleForm(forms.Form):
    LETTER_A = 'a'
    LETTER_B = 'b'
    # look not a dict
    CHOICES = ((LETTER_A,'letter a'),
               (LETTER_B,'letter b'))

    choice = forms.ChoiceField(choices=CHOICES)

    def __init__(self, *args, **kwargs):
        initial =  kwargs.get('initial', {})
        choice = initial.get('choice', None)

        # set just the initial value
        # in the real form needs something like this {'choice':'a'}
        # but in this case you want {'choice':('a', 'letter_a')}
        if choice:
            kwargs['initial']['choice'] = choice[0]

        # create the form
        super(ArticleForm, self).__init__(*args, **kwargs)

        # self.fields only exist after, so a double validation is needed
        if  choice and choice[0] not in (c[0] for c in self.CHOICES):
            self.fields['choice'].choices.append(choice)


form = ArticleForm(initial={'choice':('c','other')})
form.as_p()
&gt;&gt;&gt; u'&lt;p&gt;&lt;label for="id_choice"&gt;Choice:&lt;/label&gt; &lt;select name="choice" id="id_choice"&gt;\n&lt;option value="a"&gt;letter a&lt;/option&gt;\n&lt;option value="b"&gt;letter b&lt;/option&gt;\n&lt;option value="c" selected="selected"&gt;other&lt;/option&gt;\n&lt;/select&gt;&lt;/p&gt;'
</snippet></ROW><ROW><id>6674086</id><snippet>import re #Regex may be the easiest way to split that line

with open(infile) as in_f, open(outfile,'w') as out_f:
    f = (i for i in in_f if i.rstrip()) #iterate over non empty lines
    for line in f:
        _, k = line.split('\t', 1)
        x = re.findall(r'^1..100\t([+-])chr(\d+):(\d+)\.\.(\d+).+$',k)
        if not x:
            continue
        out_f.write(' '.join(x[0]) + '\n')
</snippet></ROW><ROW><id>6674104</id><snippet>class DynamicList(list):

    def __getslice__(self, i, j):
        return self.__getitem__(slice(i, j))
    def __setslice__(self, i, j, seq):
        return self.__setitem__(slice(i, j), seq)
    def __delslice__(self, i, j):
        return self.__delitem__(slice(i, j))

    def _resize(self, index):
        n = len(self)
        if isinstance(index, slice):
            m = max(abs(index.start), abs(index.stop))
        else:
            m = index + 1
        if m &gt; n:
            self.extend([self.__class__() for i in range(m - n)])

    def __getitem__(self, index):
        self._resize(index)
        return list.__getitem__(self, index)

    def __setitem__(self, index, item):
        self._resize(index)
        if isinstance(item, list):
            item = self.__class__(item)
        list.__setitem__(self, index, item)

&gt;&gt;&gt; mat = DynamicList()
&gt;&gt;&gt; mat[0] = ['row1','row1','row1']
&gt;&gt;&gt; mat[1] = ['row2','row2']
&gt;&gt;&gt; mat[2]= ['row3']
&gt;&gt;&gt; mat
[['row1', 'row1', 'row1'], ['row2', 'row2'], ['row3']]
&gt;&gt;&gt; print mat[1][1]
row2
&gt;&gt;&gt; mat[5][5] = 'row5'
&gt;&gt;&gt; mat
[['row1', 'row1', 'row1'], ['row2', 'row2'], ['row3'], [], [], [[], [], [], [], 
[], 'row5']]
&gt;&gt;&gt; print mat[5]
[[], [], [], [], [], 'row5']
&gt;&gt;&gt; print mat[5][5]
row5
</snippet></ROW><ROW><id>6674409</id><snippet>env</snippet></ROW><ROW><id>6674409</id><snippet>python</snippet></ROW><ROW><id>6674409</id><snippet>$PATH</snippet></ROW><ROW><id>6674409</id><snippet>#!/usr/bin/env python

print 'Hi mom!'
</snippet></ROW><ROW><id>6675017</id><snippet>for user in itertools.islice((x for x in users if x.is_active), 10):
  # do something
</snippet></ROW><ROW><id>6675032</id><snippet>rfind</snippet></ROW><ROW><id>6675032</id><snippet>"what"</snippet></ROW><ROW><id>6675032</id><snippet>"what</snippet></ROW><ROW><id>6675032</id><snippet>str.rfind(sub[, start[, end]])</snippet></ROW><ROW><id>6675032</id><snippet>s[start:end]</snippet></ROW><ROW><id>6675032</id><snippet>-1</snippet></ROW><ROW><id>6675032</id><snippet>"ab c ab".find("ab")</snippet></ROW><ROW><id>6675032</id><snippet>0</snippet></ROW><ROW><id>6675032</id><snippet>"ab c ab".rfind("ab")</snippet></ROW><ROW><id>6675032</id><snippet>5</snippet></ROW><ROW><id>6675428</id><snippet>ctypes</snippet></ROW><ROW><id>6675801</id><snippet>zc.recipe.cmmi</snippet></ROW><ROW><id>6676392</id><snippet>connect_signals</snippet></ROW><ROW><id>6676392</id><snippet>connect_signals</snippet></ROW><ROW><id>6676467</id><snippet>def mydecorator(f):
    x = 0 
    def decorator():
        x += 1 # x is a nonlocal name and cant be modified
        return f(x)
    return decorator 
</snippet></ROW><ROW><id>6676467</id><snippet>class mydecorator(object):
    def __init__(self, f):
        self.f = f
        self.x = 0

    def __call__(self, *k, **kw):
        self.x += 1
        return f(self.x)
</snippet></ROW><ROW><id>6676547</id><snippet>IE9 -&gt; Internet Options -&gt; Security -&gt; Trusted Sites    : Low
IE9 -&gt; Internet Options -&gt; Security -&gt; Internet         : Medium + unchecked Enable Protected Mode
IE9 -&gt; Internet Options -&gt; Security -&gt; Restricted Sites : unchecked Enable Protected Mode
</snippet></ROW><ROW><id>6676657</id><snippet>__import__</snippet></ROW><ROW><id>6676657</id><snippet>exec</snippet></ROW><ROW><id>6676657</id><snippet>my_module = __import__("%s_tmp_file" % code)
str = my_module.dict
</snippet></ROW><ROW><id>6676657</id><snippet>help(__import__)</snippet></ROW><ROW><id>6676689</id><snippet>thestring.isalnum()</snippet></ROW><ROW><id>6676689</id><snippet>&gt;&gt;&gt; '123abc'.isalnum()
True
&gt;&gt;&gt; '123'.isalnum()
True
&gt;&gt;&gt; 'abc'.isalnum()
True
&gt;&gt;&gt; '123#$%abc'.isalnum()
False
&gt;&gt;&gt; 
</snippet></ROW><ROW><id>6677015</id><snippet>--dry-run</snippet></ROW><ROW><id>6677015</id><snippet>--dry-run</snippet></ROW><ROW><id>6677015</id><snippet>--dry-run</snippet></ROW><ROW><id>6677015</id><snippet>--simulate-only</snippet></ROW><ROW><id>6677015</id><snippet>--dont-screw-up</snippet></ROW><ROW><id>6677229</id><snippet>import sqlite3
from collections import defaultdict

downloadsByExtensionCount = defaultdict(int)
# downloadsByExtensionList = []
logFiles = ['file1.log', 'file2.log', 'file3.log', 'file4.log']


conn = sqlite3.connect('c:/temp/example')
c = conn.cursor()
# Create table
c.execute('create table if not exists logs(date, time, c_ip, cs_method, s_port, cs_uri_stem, cs_user_agent)')

for logFile in logFiles:
    try:
        log = open(logFile, 'rb')#, encoding='utf-8')
    except IOError, e:
        continue

    logLines = log.readlines()

    for logLine in logLines:
        date, time, c_ip, cs_method, s_port, cs_uri_stem, cs_user_agent = logLine.split(" ")

        downloadsByExtensionCount[cs_uri_stem] += 1
        c.execute(
            'insert into logs(date, time, c_ip, cs_method, s_port, cs_uri_stem, cs_user_agent) values(?,?,?,?,?,?,?)', 
            (date, time, c_ip, cs_method, s_port, cs_uri_stem, cs_user_agent)
            )

conn.commit()
conn.close()
</snippet></ROW><ROW><id>6677371</id><snippet>result = dict(d2)
for k in d1:
    if k in result:
        result[k] = (result[k] + d1[k]) / 2.0
    else:
        result[k] = d1[k]
</snippet></ROW><ROW><id>6677505</id><snippet>eval</snippet></ROW><ROW><id>6677505</id><snippet>foo = "Hello World"
print eval("foo")
</snippet></ROW><ROW><id>6677505</id><snippet>import</snippet></ROW><ROW><id>6677505</id><snippet>__import__</snippet></ROW><ROW><id>6677505</id><snippet>package = "os"
name = "path"

imported = getattr(__import__(package, fromlist=[name]), name)
</snippet></ROW><ROW><id>6677505</id><snippet>from os import path as imported
</snippet></ROW><ROW><id>6677672</id><snippet>stuff</snippet></ROW><ROW><id>6677672</id><snippet>stuff.py</snippet></ROW><ROW><id>6677672</id><snippet>mypackage</snippet></ROW><ROW><id>6677672</id><snippet>__init__.py</snippet></ROW><ROW><id>6677672</id><snippet>stuff.py</snippet></ROW><ROW><id>6677672</id><snippet>## @package mypackage.stuff
#  Description
#
#  Some more description
#  @author me

## A class that does whatever
class whatever:
    ## A method that does stuff
    def dostuff(self):
        pass

## A function that does whatever
def whatever:
    pass
</snippet></ROW><ROW><id>6677762</id><snippet>datetime.datetime.now().strftime("%H:%M:%S.%f")
</snippet></ROW><ROW><id>6678014</id><snippet># assuming unordered_dict is a dict that contains your data 
ordered_dict = OrderedDict()
for key, value in sorted(unordered_dict.iteritems(), key=lambda t: t[0]):
    ordered_dict[key] = value
</snippet></ROW><ROW><id>6678014</id><snippet>operator.itemgetter</snippet></ROW><ROW><id>6678014</id><snippet>OrderedDict</snippet></ROW><ROW><id>6678014</id><snippet>sorted(...)</snippet></ROW><ROW><id>6678014</id><snippet>a = (1, 2)

empty__func = 0
def empty():
    for i in xrange(N_RUNS):
        empty__func

lambda_func = lambda t: t[0]
def using_lambda():
    for i in xrange(N_RUNS):
        lambda_func(a)

getter_func = itemgetter(0)
def using_getter():
    for i in xrange(N_RUNS):
        getter_func(a)
</snippet></ROW><ROW><id>6678414</id><snippet>random.seed(constant)</snippet></ROW><ROW><id>6678414</id><snippet>constant</snippet></ROW><ROW><id>6678630</id><snippet>'variable_' + 'a'</snippet></ROW><ROW><id>6678630</id><snippet>'variable_1'</snippet></ROW><ROW><id>6678630</id><snippet>exec</snippet></ROW><ROW><id>6678630</id><snippet>for x in list:
    exec("variable_%s = ''" % x)
</snippet></ROW><ROW><id>6678630</id><snippet>variable_a</snippet></ROW><ROW><id>6678630</id><snippet>list</snippet></ROW><ROW><id>6678630</id><snippet>dict</snippet></ROW><ROW><id>6678630</id><snippet>variable = dict((x, '') for x in list)
</snippet></ROW><ROW><id>6678630</id><snippet>a</snippet></ROW><ROW><id>6678630</id><snippet>variable['a']</snippet></ROW><ROW><id>6678900</id><snippet>from sorl.thumbnail import ImageField
#...
class Profile(models.Model):
    photo = ImageField(..)
</snippet></ROW><ROW><id>6679196</id><snippet>def complicated_dot(v, w):
    dot = 0
    for (v_i, w_i) in zip(v, w):
        for x in v_i.iterkeys():
            if x in w_i:
                dot += v_i[x] * w_i[x]
    return dot
</snippet></ROW><ROW><id>6679345</id><snippet>#!/usr/bin/python
import sys
#import time
from PyQt4.QtCore import *
from PyQt4.QtGui import *

if __name__ == '__main__':
    #time.sleep(2)
    app = QApplication(sys.argv)
    w = QDialog()
    w.setWindowFlags(Qt.Popup)
    w.setAttribute(Qt.WA_QuitOnClose)
    w.show()
    w.raise_()
    sys.exit(app.exec_())
</snippet></ROW><ROW><id>6679527</id><snippet>def _read_existing_userjs(self):
    try:
        f = open(os.path.join(self.profile_dir, 'user.js'), "r")
    except IOError, e:
        print "We didn't find user.js in your profile, but that is ok"
        return

    tmp_usr = f.readlines()
    f.close()
    for usr in tmp_usr:
        matches = re.search('user_pref\("(.*)",\s(.*)\)', usr)
        self.default_preferences[matches.group(1)] = matches.group(2)
</snippet></ROW><ROW><id>6679708</id><snippet>&gt;&gt;&gt; first = list(itertools.takewhile(str.isalpha, l))
&gt;&gt;&gt; second = list(itertools.dropwhile(str.isalpha, l))
&gt;&gt;&gt; first
['a', 'b', 'c']
&gt;&gt;&gt; second
['1', 'a', '2', 'b']
</snippet></ROW><ROW><id>6679708</id><snippet>l</snippet></ROW><ROW><id>6679708</id><snippet>&gt;&gt;&gt; def bisect_iter(pred, i):
...     i1, i2 = itertools.tee(i)
...     return itertools.takewhile(pred, i1), itertools.dropwhile(pred, i2)
... 
&gt;&gt;&gt; i1, i2 = bisect_iter(str.isalpha, iter(l))
&gt;&gt;&gt; list(i1)
['a', 'b', 'c']
&gt;&gt;&gt; list(i2)
['1', 'a', '2', 'b']
</snippet></ROW><ROW><id>6679708</id><snippet>tee</snippet></ROW><ROW><id>6679708</id><snippet>takewhile</snippet></ROW><ROW><id>6679708</id><snippet>dropwhile</snippet></ROW><ROW><id>6679708</id><snippet>&gt;&gt;&gt; def bisect_iter_to_list(pred, it):
...     l1 = []
...     for i in it:
...         if pred(i):
...             l1.append(i)
...         else:
...             l2 = [i]
...             l2.extend(it)
...     return l1, l2
... 
&gt;&gt;&gt; bisect_iter_to_list(str.isalpha, iter(l))
(['a', 'b', 'c'], ['1', 'a', '2', 'b'])
</snippet></ROW><ROW><id>6679708</id><snippet>break</snippet></ROW><ROW><id>6679708</id><snippet>else</snippet></ROW><ROW><id>6679708</id><snippet>for</snippet></ROW><ROW><id>6679708</id><snippet>&gt;&gt;&gt; def bisect_any_to_iter(pred, it):
...     it = iter(it)
...     head = []
...     for i in it:
...         if pred(i):
...             head.append(i)
...         else:
...             tail = itertools.chain([i], it)
...             break
...     return iter(head), tail
... 
&gt;&gt;&gt; a, b = bisect_iter_to_iter(str.isalpha, iter(l))
&gt;&gt;&gt; list(a)
['a', 'b', 'c']
&gt;&gt;&gt; list(b)
['1', 'a', '2', 'b']
</snippet></ROW><ROW><id>6679963</id><snippet>from operator import add

reduce(lambda res,x: add(res, x), [(1,), (2,), (3,)])
</snippet></ROW><ROW><id>6679963</id><snippet>from operator import itemgetter
map(itemgetter(0), [(1,), (2,), (3,)])
</snippet></ROW><ROW><id>6680038</id><snippet>~/.emacs</snippet></ROW><ROW><id>6680038</id><snippet>python-mode-hook</snippet></ROW><ROW><id>6680038</id><snippet>(add-hook 'python-mode-hook
  (lambda () (setq indent-tabs-mode t)))
</snippet></ROW><ROW><id>6680038</id><snippet>python.el</snippet></ROW><ROW><id>6680038</id><snippet>python-indent</snippet></ROW><ROW><id>6680038</id><snippet>tab-width</snippet></ROW><ROW><id>6680038</id><snippet>(add-hook 'python-mode-hook
  (lambda ()
    (setq indent-tabs-mode t)
    (setq python-indent 8)
    (setq tab-width 4)))
</snippet></ROW><ROW><id>6680103</id><snippet>/login/?next=/nextpage/
</snippet></ROW><ROW><id>6680103</id><snippet>/login/</snippet></ROW><ROW><id>6680103</id><snippet>request.GET</snippet></ROW><ROW><id>6680103</id><snippet>{'next':'nextpage'}</snippet></ROW><ROW><id>6680103</id><snippet>?next=/nextpage/</snippet></ROW><ROW><id>6680160</id><snippet>infile=open('110331_HS1A_1_rtTA.result','r')
</snippet></ROW><ROW><id>6680160</id><snippet>infile</snippet></ROW><ROW><id>6680160</id><snippet>open</snippet></ROW><ROW><id>6680160</id><snippet>with open (infile, mode='r', buffering=-1)
</snippet></ROW><ROW><id>6680160</id><snippet>open</snippet></ROW><ROW><id>6680272</id><snippet>import sqlite3

def getTableDump(db_file, table_to_dump):
    conn = sqlite3.connect(':memory:')    
    cu = conn.cursor()
    cu.execute("attach database '" + db_file + "' as attached_db")
    cu.execute("select sql from attached_db.sqlite_master "
               "where type='table' and name='" + table_to_dump + "'")
    sql_create_table = cu.fetchone()[0]
    cu.execute(sql_create_table);
    cu.execute("insert into " + table_to_dump +
               " select * from attached_db." + table_to_dump)
    conn.commit()
    cu.execute("detach database attached_db")
    return "\n".join(conn.iterdump())

TABLE_TO_DUMP = 'table_to_dump'
DB_FILE = 'db_file'

print getTableDump(DB_FILE, TABLE_TO_DUMP)
</snippet></ROW><ROW><id>6680790</id><snippet>type</snippet></ROW><ROW><id>6680790</id><snippet># these are supposed to overwrite methods
def foo(self):
    return "foo"

def bar(self):
    return "bar"


def variants(base, methods):
    """
        given a base class and list of dicts like [{ foo = &lt;function foo&gt; }] 
         returns types T(base) where foo was overwritten
    """
    for d in methods:
        yield type('NodeVariant', (base,), d)


from itertools import combinations
def subdicts(**fulldict):
    """ returns all dicts that are subsets of `fulldict` """
    items = fulldict.items()
    for i in range(len(items)+1):
        for subset in combinations(items, i):
            yield dict(subset)

# a list of method variants
combos = subdicts(slow_method=foo, dumb_method=bar)

# base class
class Node(object):
        def dumb_method(self):
            return "dumb"
        def slow_method(self):
            return "slow"

# use the base and our variants to make a number of types
types = variants(Node, combos)

# instantiate each type and call boths methods on it for demonstration
print [(var.dumb_method(), var.slow_method()) for var
          in (cls() for cls in types)]

# [('dumb', 'slow'), ('dumb', 'foo'), ('bar', 'slow'), ('bar', 'foo')]
</snippet></ROW><ROW><id>6681299</id><snippet>import mechanize,urllib,ClientForm,cookielib,re,os,time
from BeautifulSoup import BeautifulSoup

cookies = mechanize.CookieJar()
opener = mechanize.build_opener(mechanize.HTTPCookieProcessor(cookies))
headers = [("Accept","text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8"),\
           ("Accept-Charset","ISO-8859-1,utf-8;q=0.7,*;q=0.7"),\
           ("Accept-Encoding","gzip, deflate"),\
           ("Accept-Language","en-us,en;q=0.5"),\
           ("Connection","keep-alive"),\
           ("Host","www.aladin.wrlc.org"),\
           ("Referer","https://www.aladin.wrlc.org/Z-WEB/Aladin?req=db&amp;key=PROXYAUTHlib=8url=http://eebo.chadwyck.com/search"),\
           ("User-Agent","Mozilla/5.0 (Macintosh; Intel Mac OS X 10.6; rv:5.0) Gecko/20100101 Firefox/5.0")]
opener.addheaders = headers
mechanize.install_opener(opener)
params = urllib.urlencode({'LN':'myLN','BC':'myBC','INST':'myINST',\
                           'req':'db','key':'PROXYAUTH','lib':'8',\
                           'url':'http://eebo.chadwyck.com/search'})
mechanize.urlopen("https://www.aladin.wrlc.org/Z-WEB/PATLogon",params)
</snippet></ROW><ROW><id>6681343</id><snippet>graft relative/path/to/directory/of/your/headers/
</snippet></ROW><ROW><id>6681367</id><snippet># source: https://gist.github.com/646372
class ExceptionUserInfoMiddleware(object):
    """
    Adds user details to request context on receiving an exception, so that they show up in the error emails.

    Add to settings.MIDDLEWARE_CLASSES and keep it outermost(i.e. on top if possible). This allows
    it to catch exceptions in other middlewares as well.
    """

    def process_exception(self, request, exception):
        """
        Process the exception.

        :Parameters:
           - `request`: request that caused the exception
           - `exception`: actual exception being raised
        """

        try:
            if request.user.is_authenticated():
                request.META['USERNAME'] = str(request.user.username)
                request.META['USER_EMAIL'] = str(request.user.email)
        except:
            pass
</snippet></ROW><ROW><id>6681367</id><snippet>MIDDLEWARE_CLASSES</snippet></ROW><ROW><id>6681367</id><snippet>middleware.ExceptionUserInfoMiddleware</snippet></ROW><ROW><id>6681416</id><snippet>tile</snippet></ROW><ROW><id>6681416</id><snippet>&gt;&gt;&gt; a = np.array([0, 1, 2])
&gt;&gt;&gt; np.tile(a, 2)
array([0, 1, 2, 0, 1, 2])
</snippet></ROW><ROW><id>6681416</id><snippet>&gt;&gt;&gt; np.tile(a, (2, 1))
array([[0, 1, 2],
       [0, 1, 2]])
</snippet></ROW><ROW><id>6681416</id><snippet>tile</snippet></ROW><ROW><id>6681416</id><snippet>In [3]: %timeit numpy.array([1, 2, 3]* 3)
100000 loops, best of 3: 16.3 us per loop
In [4]: %timeit numpy.tile(numpy.array([1, 2, 3]), 3)
10000 loops, best of 3: 37 us per loop

In [5]: %timeit numpy.array([1, 2, 3]* 1000)
1000 loops, best of 3: 1.85 ms per loop
In [6]: %timeit numpy.tile(numpy.array([1, 2, 3]), 1000)
10000 loops, best of 3: 122 us per loop 
</snippet></ROW><ROW><id>6681416</id><snippet>arr = myIter / (N + 1)
X = numpy.repeat(arr, N)
Y = numpy.tile(arr, N)
</snippet></ROW><ROW><id>6681434</id><snippet>multiple files</snippet></ROW><ROW><id>6681468</id><snippet>import grt

for editor in grt.root.wb.sqlEditors:
    # add some text to the 'Output' tab
    editor.addToOutput("Test", 0)

    results = editor.executeScript("show tables")
    #print results.rowCount()
    # the above throws an exception because what is returned from executeScript() differs from the docs
    print results

    for buffer in editor.queryBuffers:
        print buffer.replaceContents("test")
</snippet></ROW><ROW><id>6681546</id><snippet>from some_module_name import *
</snippet></ROW><ROW><id>6681546</id><snippet>LogTrack</snippet></ROW><ROW><id>6681546</id><snippet>LogTrack</snippet></ROW><ROW><id>6681546</id><snippet>textlog</snippet></ROW><ROW><id>6681546</id><snippet>from PyEPL.display import VideoTrack
from PyEPL.sound import AudioTrack
from PyEPL.textlog import LogTrack
...
</snippet></ROW><ROW><id>6681546</id><snippet>LogTrack</snippet></ROW><ROW><id>6681546</id><snippet>LogTrack</snippet></ROW><ROW><id>6681634</id><snippet>"</snippet></ROW><ROW><id>6681664</id><snippet>&gt;&gt;&gt; string1.replace("val2", str(val2))
'My name is val1. My age is 40 years. I was born on val3'
</snippet></ROW><ROW><id>6681735</id><snippet>for line in file
  value = line[a:b]
  cursor = collection.find({"field": value})
  entries = cursor[:] # or pull them out with a loop or comprehension -- just get all the docs
  # then process entries as a list, either singly or in batch
</snippet></ROW><ROW><id>6681735</id><snippet># same loop start
  entries[value] = cursor[:]
# after the loop, all the cursors are out of scope and closed
for value in entries:
  # process entries[value], either singly or in batch
</snippet></ROW><ROW><id>6681756</id><snippet>sys.path.append()</snippet></ROW><ROW><id>6681808</id><snippet>import math
x = 1234.5678
math.modf(x) # (0.5678000000000338, 1234.0)
</snippet></ROW><ROW><id>6681898</id><snippet>&lt;h2&gt;&lt;title&gt;...&lt;/title&gt;&lt;/h2&gt;&lt;br /&gt;
&lt;description&gt;...&lt;/description&gt;&lt;br /&gt;
&lt;guid&gt;...&lt;/guid&gt;&lt;br /&gt;
</snippet></ROW><ROW><id>6681898</id><snippet>title</snippet></ROW><ROW><id>6682001</id><snippet>class VideoLayer (Layer):
    def __init__(self, video_name):
        super(VideoLayer, self).__init__()

        source = pyglet.media.load(video_name)
        format = source.video_format
        if not format:
            print 'No video track in this source.'
            return

        self.media_player = pyglet.media.Player()
        self.media_player.queue(source)
        self.media_player.play()

    def draw(self):
        self.media_player.get_texture().blit(0, 0)
</snippet></ROW><ROW><id>6682113</id><snippet>def returns_tuple_of_one(a):
    return (a, )
</snippet></ROW><ROW><id>6682224</id><snippet>os.path.exists('C:\\Users\\ALPHA')
</snippet></ROW><ROW><id>6682224</id><snippet>os.path.exists(r'C:\Users\ALPHA')
</snippet></ROW><ROW><id>6682224</id><snippet>r</snippet></ROW><ROW><id>6682247</id><snippet>from kombu import serialization
serialization.registry._decoders.pop("application/x-python-serialize")
</snippet></ROW><ROW><id>6682715</id><snippet>import os

filename = os.path.basename(__file__)
print ('this is generated by ' + filename)
</snippet></ROW><ROW><id>6682728</id><snippet>def printParam(parameter):
    def callback():
        print "You selected %s" % parameter
    return callback

for parameter in parameters:
    menu.addAction(parameter, printParam(parameter))
</snippet></ROW><ROW><id>6682846</id><snippet>set_ticks()</snippet></ROW><ROW><id>6682852</id><snippet>-wthread</snippet></ROW><ROW><id>6682934</id><snippet>import base64,hashlib
def lineToFingerprint(line):
    key = base64.b64decode(line.strip().split()[1].encode('ascii'))
    fp_plain = hashlib.md5(key).hexdigest()
    return ':'.join(a+b for a,b in zip(fp_plain[::2], fp_plain[1::2]))
</snippet></ROW><ROW><id>6683080</id><snippet>import os

data_files = [(x[0], x[2]) for x in os.walk(root_dir)]
</snippet></ROW><ROW><id>6683080</id><snippet>root_dir</snippet></ROW><ROW><id>6683080</id><snippet>root_dir</snippet></ROW><ROW><id>6683080</id><snippet>[(dirpath1, [file1, file2, ...]), (dirpath2, [file3, file4, ...]), ...]</snippet></ROW><ROW><id>6683080</id><snippet>import os
data_file_gen = ((x[0], x[2]) for x in os.walk(root_dir))
</snippet></ROW><ROW><id>6683080</id><snippet>data_file_gen</snippet></ROW><ROW><id>6683080</id><snippet>data_files</snippet></ROW><ROW><id>6683140</id><snippet>git log</snippet></ROW><ROW><id>6683140</id><snippet>git log --pretty="%an" --numstat
</snippet></ROW><ROW><id>6683140</id><snippet>(+)</snippet></ROW><ROW><id>6683252</id><snippet>__init__.py</snippet></ROW><ROW><id>6683252</id><snippet>MyProg
|-run.py
|-__init__.py
|-\lib
| |-someLibrary.py
| |-__init__.py
| ...
|
|-\main
| |-readyScripts.py
| |-__init__.py
| ...
|
|-\dev
| |-inProgress.py
| |-__init__.py
</snippet></ROW><ROW><id>6683252</id><snippet>import lib.someLibrary
</snippet></ROW><ROW><id>6683252</id><snippet>import main.readyScripts
import dev.inProgress
</snippet></ROW><ROW><id>6683273</id><snippet>pwdinput = input("Now enter a password:").encode('utf-8') # or whatever encoding you wish to use
</snippet></ROW><ROW><id>6683273</id><snippet>input()</snippet></ROW><ROW><id>6683273</id><snippet>bytes</snippet></ROW><ROW><id>6683273</id><snippet>str</snippet></ROW><ROW><id>6683273</id><snippet>bytes</snippet></ROW><ROW><id>6683426</id><snippet>return self.check_username(username)</snippet></ROW><ROW><id>6683426</id><snippet>if</snippet></ROW><ROW><id>6683426</id><snippet>username</snippet></ROW><ROW><id>6683426</id><snippet>username2</snippet></ROW><ROW><id>6683426</id><snippet>username22</snippet></ROW><ROW><id>6683426</id><snippet>while</snippet></ROW><ROW><id>6683426</id><snippet>def check_username(self, username):
    counter = 1
    new_username = username
    while not User.objects.filter(username__iexact=new_username).exists():
        counter += 1
        new_username = username + str(counter)
    return new_username
</snippet></ROW><ROW><id>6683522</id><snippet>_</snippet></ROW><ROW><id>6683522</id><snippet>_</snippet></ROW><ROW><id>6683720</id><snippet>Add in Plone the capability to change workflow chains for types in every object.
</snippet></ROW><ROW><id>6683772</id><snippet>&lt;%namespace name="mapping" module="objtool.mapping" /&gt;
&lt;%!
import os
import time
%&gt;\
======================================================
== this file is being rendered from ${os.path.basename(self.name)}
======================================================
</snippet></ROW><ROW><id>6683772</id><snippet>======================================================
== this file is being rendered from poco_custom.cs
======================================================
</snippet></ROW><ROW><id>6683797</id><snippet>import threading, time
def my_threaded_func(arg, arg2):
    print "Running thread! Args:", (arg, arg2)
    time.sleep(10)
    print "Done!"

thread = threading.Thread(target=my_threaded_func, args=("I'ma", "thread"))
thread.start()
print "Spun off thread"
</snippet></ROW><ROW><id>6683823</id><snippet>RETR</snippet></ROW><ROW><id>6683823</id><snippet>STOR</snippet></ROW><ROW><id>6683853</id><snippet>In [46]: import numpy as np
In [47]: np.linspace(0,5,10)
Out[47]: 
array([ 0.        ,  0.55555556,  1.11111111,  1.66666667,  2.22222222,
        2.77777778,  3.33333333,  3.88888889,  4.44444444,  5.        ])
</snippet></ROW><ROW><id>6683853</id><snippet>In [48]: np.linspace(0,5,10,endpoint=False)
Out[48]: array([ 0. ,  0.5,  1. ,  1.5,  2. ,  2.5,  3. ,  3.5,  4. ,  4.5])
</snippet></ROW><ROW><id>6684434</id><snippet>coId[0]</snippet></ROW><ROW><id>6684434</id><snippet>coId[0].firstChild.data
</snippet></ROW><ROW><id>6684434</id><snippet>coId[0].firstChild.nodeValue
</snippet></ROW><ROW><id>6684442</id><snippet>&gt;&gt;&gt; print "Hello %s" %("World")
Hello World
</snippet></ROW><ROW><id>6684442</id><snippet>SQL = "INSERT INTO UniqueData SELECT * FROM Rawdata WHERE PregnancyCode =%s"
params = (PregCode)
connection.execute(SQL, params)
</snippet></ROW><ROW><id>6684442</id><snippet>connection.execute</snippet></ROW><ROW><id>6684442</id><snippet>SQL = "INSERT INTO UniqueData SELECT * FROM Rawdata WHERE PregnancyCode =%s" %(PregCode)
connection.execute(SQL)
</snippet></ROW><ROW><id>6684710</id><snippet>import bpy
# create new clouds texture
wtex = bpy.data.textures.new(name="MyTexture", type='IMAGE')
# set World texture
wrld = bpy.context.scene.world
if wrld:
    slot = wrld.texture_slots.add()
    slot.texture = wtex
    slot.use_map_horizon = True
</snippet></ROW><ROW><id>6684711</id><snippet>#!/usr/bin/python
import private
import spynner
from spynner import browser
import pyquery
import urlparse
import urllib

b = browser.Browser()
b.load("http://structures.com/cgi-bin/index.cgi")
#browser.debug_level = spynner.DEBUG

def fill_login_form():
    b.fill("input[name=login]",private.uname)
    b.fill("input[name=password]",private.password)
    b.click("input[type=submit]")

def click_download():
    pass

#b.create_webview(True)
b.fill("input[name=login]",private.uname)
b.fill("input[name=password]",private.password)
b.click("input[type=submit]")

b.wait_load()
d = pyquery.PyQuery(b.html)
print str(d('a[href$="ftpquota"]'))
# Test Downloading by clicking a link which will download file called .ftpquota
# Jquery pattern $= indicates a pattern that ends with "ftpquota"

#b.click('a[href$="ftpquota"]')

raw_href = d('a[href$="ftpquota"]').attr("href")
href = urllib.unquote(raw_href)
print "HREF" , raw_href
print "Unquted" , href
print "urlparse.urlsplit()", urlparse.urlsplit(href)
print  "Current URL", b.url
print "Synthesized url" , urlparse.urljoin(b.url, href) 
#d.make_links_absolute(base_url=b.url)
filename = raw_href.split("%2F")[-1]
b.download(href, open(filename, "w"))
</snippet></ROW><ROW><id>6685074</id><snippet>x = (x + y) % 48
</snippet></ROW><ROW><id>6685074</id><snippet>&gt;&gt;&gt; 48 % 48
0: 0
&gt;&gt;&gt; 49 % 48
1: 1
&gt;&gt;&gt; -1 % 48
2: 47
&gt;&gt;&gt; -12 % 48
3: 36
&gt;&gt;&gt; 0 % 48
4: 0
&gt;&gt;&gt; 12 % 48
5: 12
</snippet></ROW><ROW><id>6685434</id><snippet>root /static 
</snippet></ROW><ROW><id>6685434</id><snippet>root /home/user/site/static
</snippet></ROW><ROW><id>6685599</id><snippet>import json
with open('log.txt') as file:
    lines = file.readlines()
try:
    json.loads(lines[-1])
except ValueError:
    with open('log.txt', 'w') as file:
        file.write(''.join(lines[:-1]))
</snippet></ROW><ROW><id>6685742</id><snippet>if mylist:
    mylist.sort()
    last = mylist[-1]
    for i in range(len(mylist)-2, -1, -1):
        if last == mylist[i]:
            del mylist[i]
        else:
            last = mylist[i]
</snippet></ROW><ROW><id>6685742</id><snippet>d = {}
for x in mylist:
    d[x] = 1
mylist = list(d.keys())
</snippet></ROW><ROW><id>6685742</id><snippet>mylist = list(set(mylist))
</snippet></ROW><ROW><id>6685786</id><snippet>hand = hand.append(card)</snippet></ROW><ROW><id>6685786</id><snippet>append</snippet></ROW><ROW><id>6685786</id><snippet>hand.append(card)</snippet></ROW><ROW><id>6685896</id><snippet>latest</snippet></ROW><ROW><id>6685896</id><snippet>order_by</snippet></ROW><ROW><id>6685953</id><snippet>File "/usr/lib/python2.7/io.py", line 60, in &lt;module&gt;
</snippet></ROW><ROW><id>6686616</id><snippet>&gt;&gt;&gt; filterdict = dict((k,i) for i,k in enumerate(filter))
&gt;&gt;&gt; sorted(b, key=lambda x: filterdict[x['id']])
[{'id': 'a'}, {'id': 'c'}, {'id': 'e'}, {'id': 'b'}]
</snippet></ROW><ROW><id>6686616</id><snippet>&gt;&gt;&gt; b.sort(key=lambda x: filterdict[x['id']])
&gt;&gt;&gt; b
[{'id': 'a'}, {'id': 'c'}, {'id': 'e'}, {'id': 'b'}]
</snippet></ROW><ROW><id>6686616</id><snippet>&gt;&gt;&gt; d = dict((i['id'], i) for i in b)
&gt;&gt;&gt; [d[key] for key in filter]
[{'id': 'a'}, {'id': 'c'}, {'id': 'e'}, {'id': 'b'}]
</snippet></ROW><ROW><id>6686695</id><snippet>python3-postgresql</snippet></ROW><ROW><id>6686695</id><snippet>/usr/lib64</snippet></ROW><ROW><id>6686695</id><snippet>/usr/lib/python3.2/site-packages/postgresql/protocol/client3.py
</snippet></ROW><ROW><id>6686695</id><snippet>element.Startup(**startup), password
</snippet></ROW><ROW><id>6686695</id><snippet>element.Startup(startup), password
</snippet></ROW><ROW><id>6686695</id><snippet>pg_hba.conf</snippet></ROW><ROW><id>6686695</id><snippet>[grzegorz@localhost Desktop]$ python3
Python 3.2 (r32:88445, Feb 21 2011, 21:12:33) 
[GCC 4.6.0 20110212 (Red Hat 4.6.0-0.7)] on linux2
Type "help", "copyright", "credits" or "license" for more information.
&gt;&gt;&gt; import postgresql
&gt;&gt;&gt; db = postgresql.open("pq://grzegorz:12345@localhost/grzegorz")
&gt;&gt;&gt; ps = db.prepare("SELECT version()")
&gt;&gt;&gt; ps()
[('PostgreSQL 9.0.4 on i386-redhat-linux-gnu, compiled by GCC gcc (GCC) 4.6.0 20110530 (Red Hat 4.6.0-9), 32-bit',)]
&gt;&gt;&gt; ps = db.prepare("TABLE t")
&gt;&gt;&gt; ps()
[(1, 'aaa'), (2, 'bbb'), (3, 'ccc')]
&gt;&gt;&gt;
</snippet></ROW><ROW><id>6686826</id><snippet>cmds = [path_to_program, arg1, arg2]
subprocess.Popen(cmds)
</snippet></ROW><ROW><id>6686826</id><snippet>cmds = [('file1', 'file4'), ('file2', 'file4'), ('file3', 'file4')]
for arg1, arg2 in cmds:
    subprocess.Popen([path_to_program, arg1, arg2])
</snippet></ROW><ROW><id>6687204</id><snippet> 101 102 103 104 105 106 107 108 109 110 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0...
</snippet></ROW><ROW><id>6687278</id><snippet>&gt;&gt;&gt; import pickle
&gt;&gt;&gt; pickle.compatible_formats
['1.0', '1.1', '1.2', '1.3', '2.0']
</snippet></ROW><ROW><id>6687417</id><snippet>&gt;&gt;&gt; l = range(2, 101)
&gt;&gt;&gt; sorted(set(l).difference(a for i in l for a in l if a!=i and a%i == 0))
[2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]
</snippet></ROW><ROW><id>6687417</id><snippet>a &gt; i</snippet></ROW><ROW><id>6687417</id><snippet>a != 0</snippet></ROW><ROW><id>6687508</id><snippet>import socket
#import arcpy

def actual_work():
    #val = arcpy.GetCellValue_management("D:\dem-merged\lidar_wsg84", "-95.090174910630012 29.973962146120652", "")
    #return str(val)
    return 'dummy_reply'


def main():
    sock = socket.socket( socket.AF_INET, socket.SOCK_DGRAM )
    try:
        sock.bind( ('127.0.0.1', 6666) )

        while True:
            data, addr = sock.recvfrom( 4096 )
            reply = actual_work()
            sock.sendto(reply, addr)
    except KeyboardInterrupt:
        pass
    finally:
        sock.close()


if __name__ == '__main__':
    main()
</snippet></ROW><ROW><id>6687508</id><snippet>import socket
import sys


def main():
    sock = socket.socket( socket.AF_INET, socket.SOCK_DGRAM )
    sock.settimeout(1)
    try:
        sock.sendto('', ('127.0.0.1', 6666))
        reply, _ = sock.recvfrom(4096)
        print reply
    except socket.timeout:
        sys.exit(1)
    finally:
        sock.close()


if __name__ == '__main__':
    main()
</snippet></ROW><ROW><id>6687691</id><snippet>seq="abcdefessdfekgheithrfkopeifhghtryrhfbcvdfersdwtiyuyrterdhcbgjherytyekdnfiwytowihfiwoeirehjiwoqpft"
&gt;&gt;&gt; n = 4
&gt;&gt;&gt; overlap = 5
&gt;&gt;&gt; division = len(seq)/n
&gt;&gt;&gt; [seq[i*division:(i+1)*division+overlap] for i in range(n)]
['abcdefessdfekgheithrfkopeifhg', 'eifhghtryrhfbcvdfersdwtiyuyrt', 'yuyrterdhcbgjherytyekdnfiwyto', 'iwytowihfiwoeirehjiwoqpft']
</snippet></ROW><ROW><id>6687691</id><snippet>&gt;&gt;&gt; [seq[i:i+division+overlap] for i in range(0,n*division,division)]
['abcdefessdfekgheithrfkopeifhg', 'eifhghtryrhfbcvdfersdwtiyuyrt', 'yuyrterdhcbgjherytyekdnfiwyto', 'iwytowihfiwoeirehjiwoqpft']
</snippet></ROW><ROW><id>6687707</id><snippet>reload</snippet></ROW><ROW><id>6687707</id><snippet>reload(yourscriptmodule)</snippet></ROW><ROW><id>6687707</id><snippet>import sys
import mainscript

part1Cache = None
if __name__ == "__main__":
    while True:
        if not part1Cache:
            part1Cache = mainscript.part1()
        mainscript.part2(part1Cache)
        print "Press enter to re-run the script, CTRL-C to exit"
        sys.stdin.readline()
        reload(mainscript)
</snippet></ROW><ROW><id>6687707</id><snippet>def part1():
    print "part1 expensive computation running"
    return "This was expensive to compute"

def part2(value):
    print "part2 running with %s" % value
</snippet></ROW><ROW><id>6687707</id><snippet>wrapper.py</snippet></ROW><ROW><id>6687707</id><snippet>mainscript.py</snippet></ROW><ROW><id>6687707</id><snippet>part2</snippet></ROW><ROW><id>6687724</id><snippet>argparse</snippet></ROW><ROW><id>6687724</id><snippet>argparse</snippet></ROW><ROW><id>6687724</id><snippet>--</snippet></ROW><ROW><id>6687724</id><snippet>'-'</snippet></ROW><ROW><id>6687724</id><snippet>'--'</snippet></ROW><ROW><id>6687724</id><snippet>parse_args()</snippet></ROW><ROW><id>6687724</id><snippet>&gt;&gt;&gt; parser.parse_args(['--', '-f'])
Namespace(foo='-f', one=None)
</snippet></ROW><ROW><id>6687759</id><snippet>hasOwnProperty</snippet></ROW><ROW><id>6687759</id><snippet>if(Object.prototype.hasOwnProperty.call(dictionary, key)) {
    // ...
</snippet></ROW><ROW><id>6687759</id><snippet>in</snippet></ROW><ROW><id>6687759</id><snippet>console.log('watch' in dictionary); // always true
</snippet></ROW><ROW><id>6687813</id><snippet>def add(root, path, value):
    for part in path[:-1]:
        root = root.setdefault(part, {})
    root[path[-1]] = value

def parse(s):
    videos = {}
    for key, value in parse_qsl(s):
        parts = filter(None, re.split('[\[\]]', key))
        insert(videos, parts[1:], value)
    return videos
</snippet></ROW><ROW><id>6687869</id><snippet>coupon_types = (self.months, self.dollars, self.lifetime,)

true_count =  sum([1 for ct in coupon_types if ct])
if true_count &gt; 1:
    raise ValueError("Coupon can be valid for only one of: months, lifetime, or dollars")  
</snippet></ROW><ROW><id>6688098</id><snippet>JINJA2_DISABLED_APPS = (
    'admin',
    'auth',
)
</snippet></ROW><ROW><id>6688152</id><snippet>tab</snippet></ROW><ROW><id>6688152</id><snippet>f = (i for i in in_f if i.rstrip())
</snippet></ROW><ROW><id>6688152</id><snippet>f = (i for i in in_f if '\t' in i.rstrip())
</snippet></ROW><ROW><id>6688152</id><snippet>'\t'</snippet></ROW><ROW><id>6688152</id><snippet>try:
    _, k = line.split('\t',1)
except:
    print(line)
</snippet></ROW><ROW><id>6688152</id><snippet>_</snippet></ROW><ROW><id>6688152</id><snippet>ATCGATTTCG....ATGC    1..100blablabla
       ^                     ^
 useless part (_)     important one (k)
</snippet></ROW><ROW><id>6688238</id><snippet>&gt;&gt;&gt; a = b = []
&gt;&gt;&gt; a.append(42)
&gt;&gt;&gt; b
[42]
</snippet></ROW><ROW><id>6688238</id><snippet>P = [[()] * 3 for x in range(3)]
</snippet></ROW><ROW><id>6688540</id><snippet>&gt;&gt;&gt; import numpy as NP
&gt;&gt;&gt; from scipy import linalg as LA

&gt;&gt;&gt; A = NP.random.randint(0, 10, 25).reshape(5, 5)
&gt;&gt;&gt; A
    array([[9, 5, 4, 3, 7],
           [3, 3, 2, 9, 7],
           [6, 5, 3, 4, 0],
           [7, 3, 5, 5, 5],
           [2, 5, 4, 7, 8]])

&gt;&gt;&gt; e_vals, e_vecs = LA.eig(A)
</snippet></ROW><ROW><id>6688649</id><snippet>replacement = ["firstthe", "secondthe"]
sentence = "This is the first sentence in the whole universe!"

words = sentence.split()

counter = 0
for i,word in enumerate(words):
    if word == 'the':
        words[i] = replacement[counter]
        counter += 1

sentence = ' '.join(words)
</snippet></ROW><ROW><id>6688649</id><snippet>import re
findthe = re.compile(r"\b(the)\b")
print re.sub(findthe, replacement[1],re.sub(findthe, replacement[0],sentence, 1), 1)
</snippet></ROW><ROW><id>6688649</id><snippet>re.sub(findthe, lambda matchObj: replacement.pop(0),sentence)
</snippet></ROW><ROW><id>6689444</id><snippet>save</snippet></ROW><ROW><id>6689480</id><snippet>time.sleep(0.1)</snippet></ROW><ROW><id>6689480</id><snippet>import time
import curses

# The timer class    
class Timer():
    def __init__(self):
        self.target = time.time() + 5
    def add_five(self):
        self.target += 5
    def get_left(self):
        return int(self.target-time.time())

# The main program
t = Timer()
stdscr = curses.initscr()
stdscr.nodelay(True)
curses.noecho()
# This is the main loop done in curses, but you can implement it with
# a GUI toolkit or any other method you wish.
while True:
    left = t.get_left()
    if left &lt;= 0:
        break
    stdscr.addstr(0, 0, 'Seconds left: %s ' % str(left).zfill(3))
    c = stdscr.getch()
    if c == ord('x') :
        t.add_five()
# Final operations start here
stdscr.keypad(0)
curses.echo()
curses.endwin()
print '\nTime is up!\n'
</snippet></ROW><ROW><id>6689480</id><snippet>x</snippet></ROW><ROW><id>6689480</id><snippet>curses</snippet></ROW><ROW><id>6689535</id><snippet>__import__("os").chdir("/some/path")
</snippet></ROW><ROW><id>6689686</id><snippet>def __init__(self, server_ip=globals.server_ip):
</snippet></ROW><ROW><id>6689686</id><snippet>def __init__(self, server_ip=None):
    if server_ip is None:
        server_ip = globals.server_ip
</snippet></ROW><ROW><id>6689686</id><snippet>def foobar(foo=[]):
    foo.append('bar')
    return foo
</snippet></ROW><ROW><id>6689686</id><snippet>def highspeed(some_builtin=some_builtin):
    # in here the lookup of some_builtin will be faster as it's in the locals
</snippet></ROW><ROW><id>6689875</id><snippet>os.path.getsize</snippet></ROW><ROW><id>6689875</id><snippet>os.path.getsize(&lt;file&gt;)</snippet></ROW><ROW><id>6689971</id><snippet>C('x') == C('x or y') == C('y')
</snippet></ROW><ROW><id>6689971</id><snippet>C('x') != C('y')
</snippet></ROW><ROW><id>6689971</id><snippet>C('x or y or z or a or ...')</snippet></ROW><ROW><id>6689971</id><snippet>def __hash__(self):
    return 0
</snippet></ROW><ROW><id>6690267</id><snippet>else:
    ct=ct+c
</snippet></ROW><ROW><id>6690267</id><snippet>ct</snippet></ROW><ROW><id>6690267</id><snippet>ct</snippet></ROW><ROW><id>6690267</id><snippet>ct</snippet></ROW><ROW><id>6690389</id><snippet>in</snippet></ROW><ROW><id>6690389</id><snippet>not in</snippet></ROW><ROW><id>6690389</id><snippet>while roomNumber not in ("L1", "L2", "L3", "L4", "L5"):
    ...
</snippet></ROW><ROW><id>6690389</id><snippet>1 in [1, 2, 3]
3 in range(50)
"foo" in { "foo": "bar" }
"bar" not in { "foo": "bar" } # (it only looks at keys for dictionaries)
</snippet></ROW><ROW><id>6690452</id><snippet>HTMLParser</snippet></ROW><ROW><id>6690452</id><snippet>&gt;&gt;&gt; import HTMLParser
&gt;&gt;&gt; data = '''
... &lt;html&gt; 
... &lt;table border="1px"&gt; 
... &lt;tr&gt;
... &lt;td&gt;yes&lt;/td&gt;
... &lt;td&gt;no&lt;/td&gt;
... &lt;/tr&gt;
... &lt;/table&gt;
... &lt;/html&gt;
... '''
&gt;&gt;&gt; class TableParser(HTMLParser.HTMLParser):
...     def __init__(self):
...         HTMLParser.HTMLParser.__init__(self)
...         self.in_td = False
...     
...     def handle_starttag(self, tag, attrs):
...         if tag == 'td':
...             self.in_td = True
...     
...     def handle_data(self, data):
...         if self.in_td:
...             print data
...     
...     def handle_endtag(self, tag):
...         self.in_td = False
... 
&gt;&gt;&gt; p = TableParser()
&gt;&gt;&gt; p.feed(data)
yes
no
</snippet></ROW><ROW><id>6690734</id><snippet>os.listdir</snippet></ROW><ROW><id>6690734</id><snippet>&gt;&gt;&gt; '\x82\xa9\x82\xcc\x96I'.decode('shift-jis').encode('utf-8')
'\xe3\x81\x8b\xe3\x81\xae\xe8\x9c\x82'
&gt;&gt;&gt; print '\x82\xa9\x82\xcc\x96I'.decode('shift-jis')
かの蜂
</snippet></ROW><ROW><id>6690734</id><snippet>os.listdir</snippet></ROW><ROW><id>6690734</id><snippet>os.listdir(ur'C:\Documents and Settings')
# ---------^
</snippet></ROW><ROW><id>6691088</id><snippet>sed -i.bk -e 's/jpg#[^,]*/jpg/g' filename
</snippet></ROW><ROW><id>6691254</id><snippet>...src/parallelize/backend/</snippet></ROW><ROW><id>6691254</id><snippet>Pool</snippet></ROW><ROW><id>6691254</id><snippet>multiprocessing.py</snippet></ROW><ROW><id>6691559</id><snippet>left, right = line.split(None, 1)
</snippet></ROW><ROW><id>6691854</id><snippet>except</snippet></ROW><ROW><id>6691854</id><snippet>except AttributeError:
</snippet></ROW><ROW><id>6691854</id><snippet>if Blekko_PageTitle = None:
    ...
else:
    ...
</snippet></ROW><ROW><id>6691871</id><snippet>chr(0)</snippet></ROW><ROW><id>6691871</id><snippet>chr(10)</snippet></ROW><ROW><id>6691871</id><snippet>re.match('^[\0-\x0A]*$',data)
</snippet></ROW><ROW><id>6691871</id><snippet>re.match(b'^[\0-\x0A]*$',b'\x01\x02\x03\x04')
</snippet></ROW><ROW><id>6692471</id><snippet>Formatter</snippet></ROW><ROW><id>6692471</id><snippet>format</snippet></ROW><ROW><id>6692471</id><snippet>setFormatter()</snippet></ROW><ROW><id>6692471</id><snippet>Handlers</snippet></ROW><ROW><id>6692471</id><snippet>Logger</snippet></ROW><ROW><id>6692471</id><snippet>makeRecord</snippet></ROW><ROW><id>6692471</id><snippet>LogRecord</snippet></ROW><ROW><id>6692708</id><snippet>convTable = ('0', '1', '2', '3', '4', '5', '6', '7', '8', '9', 'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V')
</snippet></ROW><ROW><id>6692708</id><snippet>getHex32Rep(val):
    return convTable[val]
</snippet></ROW><ROW><id>6692708</id><snippet>if(binRep[-1]!='1'):
</snippet></ROW><ROW><id>6692708</id><snippet>if(binRep[-1:]!='1'):
</snippet></ROW><ROW><id>6692886</id><snippet>url(r'^feeds/(?P&lt;url&gt;.*)/$', 'django.contrib.syndication.views.feed', {'feed_dict': feeds}),
</snippet></ROW><ROW><id>6692886</id><snippet>url(r'^feeds/(?P&lt;url&gt;.*)/$', 'django.contrib.syndication.views.Feed', {'feed_dict': feeds}),
</snippet></ROW><ROW><id>6693001</id><snippet>default</snippet></ROW><ROW><id>6693001</id><snippet>b = BitField("foo",0x0,2)
b.default   # 0
</snippet></ROW><ROW><id>6693142</id><snippet>&gt;&gt;&gt; p = ctypes.cast("foo", ctypes.POINTER(ctypes.c_char))
&gt;&gt;&gt; p[0]
'f'
&gt;&gt;&gt; p[1]
'o'
&gt;&gt;&gt; p[3]
'\x00'
</snippet></ROW><ROW><id>6693142</id><snippet>In [93]: p = ctypes.cast("foo", ctypes.POINTER(ctypes.c_char))

In [94]: void_p = ctypes.cast(p, ctypes.c_voidp).value+1

In [95]: p = ctypes.cast(void_p, ctypes.POINTER(ctypes.c_char))

In [96]: p.contents
Out[96]: c_char('o')
</snippet></ROW><ROW><id>6693193</id><snippet>socket</snippet></ROW><ROW><id>6693193</id><snippet>recv()</snippet></ROW><ROW><id>6693193</id><snippet>''</snippet></ROW><ROW><id>6693193</id><snippet>recv()</snippet></ROW><ROW><id>6693193</id><snippet>socket.timeout</snippet></ROW><ROW><id>6693193</id><snippet>recv()</snippet></ROW><ROW><id>6693193</id><snippet>bytesRecived = sock.recv(64)
if not len(bytesRecived):
    raise InvalidSessionException('connection reset')
</snippet></ROW><ROW><id>6693577</id><snippet>import boto
import cStringIO
import urllib
import Image

#Retrieve our source image from a URL
fp = urllib.urlopen('http://example.com/test.png')

#Load the URL data into an image
img = cStringIO.StringIO(fp.read())
im = Image.open(img)

#Resize the image
im2 = im.resize((500, 100), Image.NEAREST)  

#NOTE, we're saving the image into a cStringIO object to avoid writing to disk
out_im2 = cStringIO.StringIO()
#You MUST specify the file type because there is no file name to discern it from
im2.save(out_im2, 'PNG')

#Now we connect to our s3 bucket and upload from memory
#credentials stored in environment AWS_ACCESS_KEY_ID and AWS_SECRET_ACCESS_KEY
conn = boto.connect_s3()

#Connect to bucket and create key
b = conn.get_bucket('example')
k = b.new_key('example.png')

#Note we're setting contents from the in-memory string provided by cStringIO
k.set_contents_from_string(out_im2.getvalue())
</snippet></ROW></DATA>