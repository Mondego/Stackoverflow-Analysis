<?xml version="1.0" encoding="UTF-8" standalone="no"?><DATA><ROW><id>18269426</id><snippet>%</snippet></ROW><ROW><id>18269426</id><snippet>%</snippet></ROW><ROW><id>18269426</id><snippet>%</snippet></ROW><ROW><id>18269426</id><snippet>print</snippet></ROW><ROW><id>18269426</id><snippet>"Hello, %s"%("Pax")</snippet></ROW><ROW><id>18269426</id><snippet>%</snippet></ROW><ROW><id>18269426</id><snippet>"Hello, Pax"</snippet></ROW><ROW><id>18269426</id><snippet>print</snippet></ROW><ROW><id>18269426</id><snippet>print "Hello, %s"%("Pax")
# ^   \_________________/ &lt;- This bit done first
# |
# Then the print is done
</snippet></ROW><ROW><id>18269426</id><snippet>%</snippet></ROW><ROW><id>18269426</id><snippet>%</snippet></ROW><ROW><id>18269426</id><snippet>print "%r %r %r %r %r"
</snippet></ROW><ROW><id>18269426</id><snippet>%r %r %r %r %r</snippet></ROW><ROW><id>18269963</id><snippet>&gt;&gt;&gt; from datetime import datetime
&gt;&gt;&gt; import time
&gt;&gt;&gt; s = "16/08/2013 09:51:43"
&gt;&gt;&gt; d = datetime.strptime(s, "%d/%m/%Y %H:%M:%S")
&gt;&gt;&gt; time.mktime(d.timetuple())
1376632303.0
</snippet></ROW><ROW><id>18270175</id><snippet>numpy.genfromtxt()</snippet></ROW><ROW><id>18270175</id><snippet>numpy.loadtxt()</snippet></ROW><ROW><id>18270175</id><snippet>numpy</snippet></ROW><ROW><id>18270175</id><snippet>import numpy

def create_alldata(whichfile):
    return numpy.genfromtxt(whichfile)                     
</snippet></ROW><ROW><id>18270657</id><snippet>plot(...,scalex=False,scaley=False)</snippet></ROW><ROW><id>18270657</id><snippet>Rectangle</snippet></ROW><ROW><id>18270657</id><snippet>from matplotlib.pyplot import Rectangle
mybox = Rectangle((0.7,2.15), 0.9, 0.55, fill=False, ec='b')
ax1.add_artist(mybox)
</snippet></ROW><ROW><id>18270657</id><snippet>matplotlib</snippet></ROW><ROW><id>18270754</id><snippet>BaseClass.__init__ = your_new_init</snippet></ROW><ROW><id>18270754</id><snippet>BaseClass</snippet></ROW><ROW><id>18270754</id><snippet>C</snippet></ROW><ROW><id>18270754</id><snippet>__init__</snippet></ROW><ROW><id>18270754</id><snippet>In [16]: class BaseClass(object):
    ...:     def __init__(self, a, b):
    ...:         self.a = a
    ...:         self.b = b
    ...:         

In [17]: class A(BaseClass): pass

In [18]: class B(BaseClass): pass

In [19]: BaseClass.old_init = BaseClass.__init__ #save old init if you plan to use it 

In [21]: def new_init(self, a, b, c):
    ...:     # calling __init__ would cause infinite recursion!
    ...:     BaseClass.old_init(self, a, b)
    ...:     self.c = c

In [22]: BaseClass.__init__ = new_init

In [23]: A(1, 2)   # triggers the new BaseClass.__init__ method
---------------------------------------------------------------------------
TypeError                                 Traceback (most recent call last)
&lt;ipython-input-23-09f95d33d46f&gt; in &lt;module&gt;()
----&gt; 1 A(1, 2)

TypeError: new_init() missing 1 required positional argument: 'c'

In [24]: A(1, 2, 3)
Out[24]: &lt;__main__.A at 0x7fd5f29f0810&gt;

In [25]: import numpy as np

In [26]: np.ndarray.__init__ = lambda self: 1   # doesn't work as expected
---------------------------------------------------------------------------
TypeError                                 Traceback (most recent call last)
&lt;ipython-input-26-d743f6b514fa&gt; in &lt;module&gt;()
----&gt; 1 np.ndarray.__init__ = lambda self: 1

TypeError: can't set attributes of built-in/extension type 'numpy.ndarray'
</snippet></ROW><ROW><id>18271069</id><snippet>from flask import Flask
app = Flask(__name__)

@app.route("/")
def hello():
    return "Hello World!"

if __name__ == "__main__":
    app.run()
</snippet></ROW><ROW><id>18271459</id><snippet>datetime64</snippet></ROW><ROW><id>18271459</id><snippet>datetime64[s]</snippet></ROW><ROW><id>18271459</id><snippet>na_trades = np.zeros(2, dtype='datetime64[s],i4')
na_trades[0] = (np.datetime64('1971-01-01 00:00:00'), 0)
</snippet></ROW><ROW><id>18271459</id><snippet>datetime64</snippet></ROW><ROW><id>18271459</id><snippet>same_kind</snippet></ROW><ROW><id>18271774</id><snippet>recv()</snippet></ROW><ROW><id>18271774</id><snippet>send()</snippet></ROW><ROW><id>18271774</id><snippet>"abcd"</snippet></ROW><ROW><id>18271774</id><snippet>"efg"</snippet></ROW><ROW><id>18271774</id><snippet>"a"</snippet></ROW><ROW><id>18271774</id><snippet>"bcde"</snippet></ROW><ROW><id>18271774</id><snippet>"fg"</snippet></ROW><ROW><id>18271774</id><snippet>recv()</snippet></ROW><ROW><id>18271949</id><snippet>out_cc = env.Command('file.wave.cpp', 'file.cpp', 'wave command &lt; $SOURCE &gt; $TARGET')
env.Program('myprog', ['this.cc', 'that.cc', out_cc])
</snippet></ROW><ROW><id>18272004</id><snippet>itertools</snippet></ROW><ROW><id>18272004</id><snippet>import itertools
s = [('a', 'b'), ('c', 'd'), ('e', 'f')]
</snippet></ROW><ROW><id>18272004</id><snippet>def permute(it):
    return itertools.product(*(itertools.permutations(i) for i in it))
</snippet></ROW><ROW><id>18272004</id><snippet>&gt;&gt;&gt; for i in permute(s):
...     print i
(('a', 'b'), ('c', 'd'), ('e', 'f'))
(('a', 'b'), ('c', 'd'), ('f', 'e'))
(('a', 'b'), ('d', 'c'), ('e', 'f'))
(('a', 'b'), ('d', 'c'), ('f', 'e'))
(('b', 'a'), ('c', 'd'), ('e', 'f'))
(('b', 'a'), ('c', 'd'), ('f', 'e'))
(('b', 'a'), ('d', 'c'), ('e', 'f'))
(('b', 'a'), ('d', 'c'), ('f', 'e'))
</snippet></ROW><ROW><id>18272004</id><snippet>def permute2(it):
    return itertools.chain.from_iterable(
        permute(p)
        for p in itertools.permutations(it)
    )
</snippet></ROW><ROW><id>18272004</id><snippet>&gt;&gt;&gt; for i in permute2(s):
...      print i    
(('a', 'b'), ('c', 'd'), ('e', 'f'))
(('a', 'b'), ('c', 'd'), ('f', 'e'))
(('a', 'b'), ('d', 'c'), ('e', 'f'))
(('a', 'b'), ('d', 'c'), ('f', 'e'))
(('b', 'a'), ('c', 'd'), ('e', 'f'))
(('b', 'a'), ('c', 'd'), ('f', 'e'))
(('b', 'a'), ('d', 'c'), ('e', 'f'))
(('b', 'a'), ('d', 'c'), ('f', 'e'))
(('a', 'b'), ('e', 'f'), ('c', 'd'))
(('a', 'b'), ('e', 'f'), ('d', 'c'))
(('a', 'b'), ('f', 'e'), ('c', 'd'))
(('a', 'b'), ('f', 'e'), ('d', 'c'))
(('b', 'a'), ('e', 'f'), ('c', 'd'))
(('b', 'a'), ('e', 'f'), ('d', 'c'))
(('b', 'a'), ('f', 'e'), ('c', 'd'))
(('b', 'a'), ('f', 'e'), ('d', 'c'))
(('c', 'd'), ('a', 'b'), ('e', 'f'))
(('c', 'd'), ('a', 'b'), ('f', 'e'))
(('c', 'd'), ('b', 'a'), ('e', 'f'))
(('c', 'd'), ('b', 'a'), ('f', 'e'))
(('d', 'c'), ('a', 'b'), ('e', 'f'))
(('d', 'c'), ('a', 'b'), ('f', 'e'))
(('d', 'c'), ('b', 'a'), ('e', 'f'))
(('d', 'c'), ('b', 'a'), ('f', 'e'))
(('c', 'd'), ('e', 'f'), ('a', 'b'))
(('c', 'd'), ('e', 'f'), ('b', 'a'))
(('c', 'd'), ('f', 'e'), ('a', 'b'))
(('c', 'd'), ('f', 'e'), ('b', 'a'))
(('d', 'c'), ('e', 'f'), ('a', 'b'))
(('d', 'c'), ('e', 'f'), ('b', 'a'))
(('d', 'c'), ('f', 'e'), ('a', 'b'))
(('d', 'c'), ('f', 'e'), ('b', 'a'))
(('e', 'f'), ('a', 'b'), ('c', 'd'))
(('e', 'f'), ('a', 'b'), ('d', 'c'))
(('e', 'f'), ('b', 'a'), ('c', 'd'))
(('e', 'f'), ('b', 'a'), ('d', 'c'))
(('f', 'e'), ('a', 'b'), ('c', 'd'))
(('f', 'e'), ('a', 'b'), ('d', 'c'))
(('f', 'e'), ('b', 'a'), ('c', 'd'))
(('f', 'e'), ('b', 'a'), ('d', 'c'))
(('e', 'f'), ('c', 'd'), ('a', 'b'))
(('e', 'f'), ('c', 'd'), ('b', 'a'))
(('e', 'f'), ('d', 'c'), ('a', 'b'))
(('e', 'f'), ('d', 'c'), ('b', 'a'))
(('f', 'e'), ('c', 'd'), ('a', 'b'))
(('f', 'e'), ('c', 'd'), ('b', 'a'))
(('f', 'e'), ('d', 'c'), ('a', 'b'))
(('f', 'e'), ('d', 'c'), ('b', 'a'))
</snippet></ROW><ROW><id>18272004</id><snippet>def permute3(s):
    return s[:1] + list(p) for p in permute2(s[1:])
</snippet></ROW><ROW><id>18272004</id><snippet>&gt;&gt;&gt; for i in permute3(s):
...     print i    
[('a', 'b'), ('c', 'd'), ('e', 'f')]
[('a', 'b'), ('c', 'd'), ('f', 'e')]
[('a', 'b'), ('d', 'c'), ('e', 'f')]
[('a', 'b'), ('d', 'c'), ('f', 'e')]
[('a', 'b'), ('e', 'f'), ('c', 'd')]
[('a', 'b'), ('e', 'f'), ('d', 'c')]
[('a', 'b'), ('f', 'e'), ('c', 'd')]
[('a', 'b'), ('f', 'e'), ('d', 'c')]
</snippet></ROW><ROW><id>18272056</id><snippet>&gt;&gt;&gt; print u'惨事'.encode('utf8').decode('cp1252')
æƒ¨äº‹
&gt;&gt;&gt; print u'最'.encode('utf8').decode('cp1252')
æœ€
</snippet></ROW><ROW><id>18272056</id><snippet>&gt;&gt;&gt; print u'æƒ¨äº‹'.encode('cp1252').decode('utf8')
惨事
&gt;&gt;&gt; print u'æœ€'.encode('cp1252').decode('utf8')
最
</snippet></ROW><ROW><id>18272056</id><snippet>不</snippet></ROW><ROW><id>18272056</id><snippet>&gt;&gt;&gt; u'不'.encode('utf8')
'\xe4\xb8\x8d'
&gt;&gt;&gt; print u'不'.encode('utf8').decode('cp1252')
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
  File "/Users/mj/Development/venvs/stackoverflow-2.7/lib/python2.7/encodings/cp1252.py", line 15, in decode
    return codecs.charmap_decode(input,errors,decoding_table)
UnicodeDecodeError: 'charmap' codec can't decode byte 0x8d in position 2: character maps to &lt;undefined&gt;
</snippet></ROW><ROW><id>18272143</id><snippet>(n,)</snippet></ROW><ROW><id>18272143</id><snippet>reshape(3, 1)</snippet></ROW><ROW><id>18272172</id><snippet>idlelib</snippet></ROW><ROW><id>18272172</id><snippet>~$ ps -eaf | grep -in idle
234:1000     13122     1  5 16:44 ?        00:00:01 /usr/bin/python2.7 /usr/bin/idle-python2.7
235:1000     13124 13122  3 16:44 ?        00:00:01 /usr/bin/python2.7 -c __import__('idlelib.run').run.main(True) 60839
239:1000     13146 12061  0 16:44 pts/0    00:00:00 grep --color=auto -in idle
~$ 
</snippet></ROW><ROW><id>18272172</id><snippet>idlelib</snippet></ROW><ROW><id>18272172</id><snippet>Start the Python execution server in a subprocess

    In the Python subprocess, RPCServer is instantiated with handlerclass
    MyHandler, which inherits register/unregister methods from RPCHandler via
    the mix-in class SocketIO.
</snippet></ROW><ROW><id>18272172</id><snippet>Help</snippet></ROW><ROW><id>18272172</id><snippet>About IDLE</snippet></ROW><ROW><id>18272172</id><snippet>README</snippet></ROW><ROW><id>18272249</id><snippet>operator.itemgetter</snippet></ROW><ROW><id>18272249</id><snippet>&gt;&gt;&gt; from operator import itemgetter 
&gt;&gt;&gt; a = [-2, 1, 5, 3, 8, 5, 6]
&gt;&gt;&gt; b = [1, 2, 5]
&gt;&gt;&gt; print itemgetter(*b)(a)
(1, 5, 5)
</snippet></ROW><ROW><id>18272249</id><snippet>&gt;&gt;&gt; import numpy as np
&gt;&gt;&gt; a = np.array([-2, 1, 5, 3, 8, 5, 6])
&gt;&gt;&gt; b = [1, 2, 5]
&gt;&gt;&gt; print list(a[b])
[1, 5, 5]
</snippet></ROW><ROW><id>18272803</id><snippet>from functools import wraps

def prints_invocation(f):
    @wraps(f)
    def wrapped(*args):
        print "%s(%s)" % (f.__name__, ', '.join(repr(a) for a in args))
        return f(*args)
    return wrapped
</snippet></ROW><ROW><id>18272803</id><snippet>&gt;&gt;&gt; @prints_invocation
... def add(x, y):
...     return x + y
&gt;&gt;&gt; add(1, 2)
add(1, 2)
3
</snippet></ROW><ROW><id>18272803</id><snippet>kwargs</snippet></ROW><ROW><id>18273011</id><snippet>with open('golden_file') as afile, open('process_file') as bfile:
    matches = len(afall(aline == bline for aline, bline in zip(afile, bfile))

    # check the golden file iterator is exhausted
    if any(afile):
        matches = False
</snippet></ROW><ROW><id>18273011</id><snippet>zip</snippet></ROW><ROW><id>18273177</id><snippet>django.contrib.auth.hashers.MD5PasswordHasher</snippet></ROW><ROW><id>18273177</id><snippet>PASSWORD_HASHERS = (
    'django.contrib.auth.hashers.PBKDF2PasswordHasher',
    'django.contrib.auth.hashers.PBKDF2SHA1PasswordHasher',
    'django.contrib.auth.hashers.BCryptPasswordHasher',
    'django.contrib.auth.hashers.SHA1PasswordHasher',
    'django.contrib.auth.hashers.MD5PasswordHasher',
    'django.contrib.auth.hashers.CryptPasswordHasher'
)
</snippet></ROW><ROW><id>18273177</id><snippet>MD5PasswordHasher</snippet></ROW><ROW><id>18273177</id><snippet>make_password(pwd, None, 'md5')
</snippet></ROW><ROW><id>18273466</id><snippet>foo,bar,baz
1,2,3
2,3,4
3,4,5
</snippet></ROW><ROW><id>18273466</id><snippet>4,5,6
5,6,7
6,7,8
</snippet></ROW><ROW><id>18273466</id><snippet>$ python test.py
[['4' '5']
 ['5' '6']
 ['6' '7']
 ['foo' 'bar']
 ['1' '2']
 ['2' '3']
 ['3' '4']]
</snippet></ROW><ROW><id>18274153</id><snippet>global x</snippet></ROW><ROW><id>18274153</id><snippet>nonlocal</snippet></ROW><ROW><id>18274153</id><snippet>def make_adder_and_setter(x):
    def setter(n):
        nonlocal x
        x = n

    return (lambda y: x + y, setter)
</snippet></ROW><ROW><id>18274153</id><snippet>def make_adder_and_setter(x):
    x = [x]
    def setter(n):
        x[0] = n

    return (lambda y: x[0] + y, setter)
</snippet></ROW><ROW><id>18274374</id><snippet>HTTPResponse</snippet></ROW><ROW><id>18274374</id><snippet>conn.close()</snippet></ROW><ROW><id>18274374</id><snippet>http.client.BadStatusLine</snippet></ROW><ROW><id>18274374</id><snippet>except Exception</snippet></ROW><ROW><id>18274374</id><snippet>except Exception</snippet></ROW><ROW><id>18274374</id><snippet>Connection Closed
Traceback (most recent call last):
  File "httpTest.py", line 9, in http_get
    resp = conn.getresponse()
</snippet></ROW><ROW><id>18274374</id><snippet>print ('Connecting to ' + url)</snippet></ROW><ROW><id>18274374</id><snippet>print ('Connecting to ' + url)
conn.request(url, path, headers=headers)
resp = conn.getresponse()
</snippet></ROW><ROW><id>18274374</id><snippet>Connection Closed</snippet></ROW><ROW><id>18274374</id><snippet>try / finally</snippet></ROW><ROW><id>18274374</id><snippet>http.client.BadStatusLine</snippet></ROW><ROW><id>18274374</id><snippet>HTTP/1.1 200 OK</snippet></ROW><ROW><id>18274374</id><snippet>&lt;html&gt;</snippet></ROW><ROW><id>18274374</id><snippet>HTTPResponse</snippet></ROW><ROW><id>18274520</id><snippet>with open(inputfilename) as inputfile:
    words = []
    for line in inputfile:
        line = line.strip()
        if not line or line.startswith('#'):
            continue
        word, positions = line.split(':')
        words.extend((int(p), word) for p in positions.split(','))

print ' '.join([w for p, w in sorted(words)])
</snippet></ROW><ROW><id>18274520</id><snippet>&gt;&gt;&gt; with open(inputfilename) as inputfile:
...     words = []
...     for line in inputfile:
...         line = line.strip()
...         if not line or line.startswith('#'):
...             continue
...         word, positions = line.split(':')
...         words.extend((int(p), word) for p in positions.split(','))
... 
&gt;&gt;&gt; print ' '.join([w for p, w in sorted(words)])
I like to go to cafes
</snippet></ROW><ROW><id>18274593</id><snippet># convert yourmulti-dim indices to flat indices
flat_idx = np.ravel_multi_index((Px, Py), dims=a.shape)
# extract the unique indices and their position
unique_idx, idx_idx = np.unique(flat_idx, return_inverse=True)
# Aggregate the repeated indices 
deltas = np.bincount(idx_idx, weights=x)
# Sum them to your array
a.flat[unique_idx] += deltas
</snippet></ROW><ROW><id>18274760</id><snippet>.replace('"', '"')</snippet></ROW><ROW><id>18274760</id><snippet>from bs4 import BeautifulSoup

soup = BeautifulSoup(htmlsource)

for string in soup.strings:
     string.replace_with(string.replace('"', '"'))

htmlsource = str(soup)
</snippet></ROW><ROW><id>18274934</id><snippet>is_running = lambda: my_process.poll() is None

my_process = subprocess.Popen(' '.join(exclude), 
                              stdout=subprocess.PIPE, 
                              stderr=subprocess.PIPE,
                              shell=True)

# Grab all the output from stdout and stderr and log it
while is_running():
    rlist, wlist, xlist = select.select([my_process.stdout, my_process.stderr], [], [], 1)

# Log stdout, but don't spam the log
if my_process.stdout in rlist and verbose:
    # Adjust the number of bytes read however you like, 1024 seems to work 
    # pretty well for me. 
    Tracer.log.debug(my_process.stdout.read(1024))

# Log stderr, always
if my_process.stderr in rlist:
    # Same as with stdout, adjust the bytes read as needed.
    Tracer.log.error(my_process.stderr.read(1024))
</snippet></ROW><ROW><id>18274949</id><snippet>from app.forms import AppForm
AppForm.base_fields['fieldname'].initial="your default value"
</snippet></ROW><ROW><id>18274949</id><snippet>class InitialValues(object):
    def process_request(self, request):
        from app.forms import AppForm
        AppForm.base_fields['fieldname'].initial="your default value"   
</snippet></ROW><ROW><id>18274949</id><snippet>view</snippet></ROW><ROW><id>18275041</id><snippet>print_it</snippet></ROW><ROW><id>18275041</id><snippet>command</snippet></ROW><ROW><id>18275041</id><snippet>Button1 = Button(text='Send',width=300,command=print_it("Message"))
</snippet></ROW><ROW><id>18275041</id><snippet>Button1 = Button(text='Send',width=300,command=lambda: print_it("Message"))
</snippet></ROW><ROW><id>18275338</id><snippet>__init__</snippet></ROW><ROW><id>18275338</id><snippet>import __init__

class Good(object):
    def __init__(self):
        print hello1.A
</snippet></ROW><ROW><id>18275354</id><snippet>parser = argparse.ArgumentParser()
parser.add_argument('-al',
                    type = argparse.FileType('r'),
                    default = [ f for f in os.listdir( '.' )
                                if os.path.isfile( f ) and f.endswith( '.al' )],
                    dest = 'alphabet' )
</snippet></ROW><ROW><id>18275354</id><snippet>args =  parser.parse_args()
if isinstance(args.alphabet,types.ListType):
    if len(args.alphabet) != 1:
        parser.error("There must be exactly one alphabet in the directory")
    else:
        args.alphabet = open(args.alphabet[0])
</snippet></ROW><ROW><id>18275354</id><snippet>-al</snippet></ROW><ROW><id>18275354</id><snippet>argparse.FileType('r')</snippet></ROW><ROW><id>18275354</id><snippet>nargs=1</snippet></ROW><ROW><id>18275354</id><snippet>-al</snippet></ROW><ROW><id>18275354</id><snippet>import types</snippet></ROW><ROW><id>18275645</id><snippet>is not</snippet></ROW><ROW><id>18275645</id><snippet>is</snippet></ROW><ROW><id>18275645</id><snippet>not</snippet></ROW><ROW><id>18275645</id><snippet>&gt;&gt;&gt; not None
True
</snippet></ROW><ROW><id>18275645</id><snippet>not None</snippet></ROW><ROW><id>18275645</id><snippet>None</snippet></ROW><ROW><id>18275645</id><snippet>None</snippet></ROW><ROW><id>18275645</id><snippet>&gt;&gt;&gt; bool(None)
False
</snippet></ROW><ROW><id>18275645</id><snippet>not None</snippet></ROW><ROW><id>18275645</id><snippet>True</snippet></ROW><ROW><id>18275645</id><snippet>None</snippet></ROW><ROW><id>18275645</id><snippet>True</snippet></ROW><ROW><id>18275645</id><snippet>id()</snippet></ROW><ROW><id>18275645</id><snippet>&gt;&gt;&gt; id(True)
4440103488
&gt;&gt;&gt; id(not None)
4440103488
&gt;&gt;&gt; id(None)
4440184448
</snippet></ROW><ROW><id>18275645</id><snippet>is</snippet></ROW><ROW><id>18275645</id><snippet>id()</snippet></ROW><ROW><id>18275645</id><snippet>is</snippet></ROW><ROW><id>18275645</id><snippet>True</snippet></ROW><ROW><id>18275645</id><snippet>False</snippet></ROW><ROW><id>18275645</id><snippet>is not</snippet></ROW><ROW><id>18275645</id><snippet>is</snippet></ROW><ROW><id>18275645</id><snippet>not (op1 is op2)</snippet></ROW><ROW><id>18275645</id><snippet>op1 is (not op2)</snippet></ROW><ROW><id>18275645</id><snippet>&gt;&gt;&gt; 1 is not None     # is 1 a different object from None?
True
&gt;&gt;&gt; 1 is (not None)   # is 1 the same object as True?
False
</snippet></ROW><ROW><id>18275977</id><snippet>LineEdit.setEchoMode</snippet></ROW><ROW><id>18275977</id><snippet>QtGui.QLineEdit.Password</snippet></ROW><ROW><id>18275977</id><snippet>import sys

from PyQt4 import QtGui

app = QtGui.QApplication(sys.argv)
w = QtGui.QWidget()
le = QtGui.QLineEdit(w)
le.setEchoMode(QtGui.QLineEdit.Password)
le.show()
w.show()

sys.exit(app.exec_())
</snippet></ROW><ROW><id>18276030</id><snippet>In [53]: index = pd.date_range(freq='66T', start=ts.first_valid_index(), periods=5)

In [54]: ts.reindex(set(ts.index).union(index)).sort_index().interpolate('time').ix[index]
Out[54]: 
2011-01-02 01:00:00    0.0
2011-01-02 02:06:00    1.1
2011-01-02 03:12:00    2.2
2011-01-02 04:18:00    3.3
2011-01-02 05:24:00    4.4
Freq: 66T, dtype: float64

In [55]: index = pd.date_range(freq='65T', start=ts.first_valid_index(), periods=5)

In [56]: ts.reindex(set(ts.index).union(index)).sort_index().interpolate('time').ix[index]
Out[56]: 
2011-01-02 01:00:00    0.000000
2011-01-02 02:05:00    1.083333
2011-01-02 03:10:00    2.166667
2011-01-02 04:15:00    3.250000
2011-01-02 05:20:00    4.333333
Freq: 65T, dtype: float64
</snippet></ROW><ROW><id>18276101</id><snippet>main</snippet></ROW><ROW><id>18276101</id><snippet>read_input</snippet></ROW><ROW><id>18276101</id><snippet>data = read_input(sys.stdin)
# Causes a generator to be assigned to data.
for words in data:
</snippet></ROW><ROW><id>18276101</id><snippet>data</snippet></ROW><ROW><id>18276101</id><snippet>read_input</snippet></ROW><ROW><id>18276101</id><snippet>data</snippet></ROW><ROW><id>18276101</id><snippet>words</snippet></ROW><ROW><id>18276101</id><snippet>for words in data</snippet></ROW><ROW><id>18276378</id><snippet>.pyd</snippet></ROW><ROW><id>18276378</id><snippet>.dll</snippet></ROW><ROW><id>18276586</id><snippet>else</snippet></ROW><ROW><id>18276608</id><snippet>googstock.py</snippet></ROW><ROW><id>18276608</id><snippet>import ystockquote

def run():
    return ystockquote.get_all('GOOG')
</snippet></ROW><ROW><id>18276608</id><snippet>RubyPython.start

googstock = RubyPython.import('googstock')
puts googstock.run().rubify #Get the stock data into Ruby

RubyPython.stop
</snippet></ROW><ROW><id>18276620</id><snippet>sum(c1 != c2 for c1,c2 in zip(w1,w2))
</snippet></ROW><ROW><id>18276620</id><snippet>zip(w1,w2)</snippet></ROW><ROW><id>18276620</id><snippet>w1</snippet></ROW><ROW><id>18276620</id><snippet>w2</snippet></ROW><ROW><id>18276620</id><snippet>&gt;&gt;&gt; list(zip(w1,w2))
[('h', 'j'), ('e', 'e'), ('l', 'l'), ('l', 'l'), ('o', 'y')]
</snippet></ROW><ROW><id>18276620</id><snippet>c1</snippet></ROW><ROW><id>18276620</id><snippet>c2</snippet></ROW><ROW><id>18276620</id><snippet>c1 != c2</snippet></ROW><ROW><id>18276620</id><snippet>zip()</snippet></ROW><ROW><id>18276620</id><snippet>sum()</snippet></ROW><ROW><id>18276620</id><snippet>&gt;&gt;&gt; w1 = 'hello'
&gt;&gt;&gt; w2 = 'jelly'
&gt;&gt;&gt; 
&gt;&gt;&gt; sum(c1 != c2 for c1,c2 in zip(w1,w2))
2
</snippet></ROW><ROW><id>18276639</id><snippet>np.ndarray</snippet></ROW><ROW><id>18276639</id><snippet>np.array</snippet></ROW><ROW><id>18276639</id><snippet>array</snippet></ROW><ROW><id>18276639</id><snippet>zeros</snippet></ROW><ROW><id>18276639</id><snippet>empty</snippet></ROW><ROW><id>18276639</id><snippet>ndarray(...)</snippet></ROW><ROW><id>18276639</id><snippet> a = np.array(all_data, dtype=float)
</snippet></ROW><ROW><id>18276639</id><snippet>ndarray</snippet></ROW><ROW><id>18276639</id><snippet>all_data</snippet></ROW><ROW><id>18276735</id><snippet>[(timestamp, item) for timestamp, items in T for item in items]</snippet></ROW><ROW><id>18276735</id><snippet>[[timestamp, item] for timestamp, items in T for item in items]</snippet></ROW><ROW><id>18276796</id><snippet>&lt;label for="id_username"&gt;Your label name here:&lt;/label&gt;
{{ form.username }}
</snippet></ROW><ROW><id>18276796</id><snippet>field.label</snippet></ROW><ROW><id>18276796</id><snippet>{{ form.username.label|my_custom_filter }}
</snippet></ROW><ROW><id>18276796</id><snippet>@register.filter(name='my_custom_filter')
def my_custom_filter(value):
    # here value is the value of your label
    # process it as you please then return the new value
    if value == 'changeme':
        return 'changed label'
    return value
</snippet></ROW><ROW><id>18276850</id><snippet>questions = Question.objects.order_by('?')[:20]
answers = Answer.objects.filter(question__in=questions)

#some databases will not suppoert this, so use:
#answers = Answer.objects.filter(question_id__in=[q.id for q in questions])

for question in question:
    answers_for_question = filter(lambda answer:answer.question_id = question_id, answers)
</snippet></ROW><ROW><id>18277112</id><snippet>from lxml import etree

nsmap = {
    'xmlns': 'http://www.openarchives.org/OAI/2.0/',
    'dc': 'http://purl.org/dc/elements/1.1/',
    'dct': 'http://purl.org/dc/terms/',
    'xsi': 'http://www.w3.org/2001/XMLSchema-instance',
}
ns = [
    'dc:identifier[@xsi:type]',
    'dc:title',
    'dc:description',
    'dc:subject',
    'dc:type',
    'dct:educationLevel'
]
tree = etree.parse(file)
xpath = '|'.join('.//xmlns:record//{}'.format(n) for n in ns)
for items in tree.xpath(xpath, namespaces=nsmap):
    print(items)
</snippet></ROW><ROW><id>18277477</id><snippet>m4c[0][2]</snippet></ROW><ROW><id>18277477</id><snippet>['C ', '  ', '  ', '  ', '  ', '  ', '  ', '  \n']</snippet></ROW><ROW><id>18277477</id><snippet>&gt;&gt;&gt; [zip(m4c[0][i], m4c[1][i]) for i in range(len(m4c[0]))]
[[('A ', 'E '), ('  ', 'F#'), ('  ', 'E '), ('  ', 'E '), ('  ', 'F#'), ('  ', 'E '), ('  ', '  '), ('  ', 'E ')],\
 [('B ', 'E '), ('  ', 'F#'), ('  ', 'E '), ('  ', 'E ')], \
 [('C ', 'E '), ('  ', 'F#'), ('  ', 'E '), ('  ', 'E '), ('  ', 'F#'), ('  ', '  '), ('  ', 'E '), ('  \n', 'F#')]]
</snippet></ROW><ROW><id>18277477</id><snippet>&gt;&gt;&gt; [zip(*[m4c[j][i] for j in range(len(m4c))]) for i in range(len(m4c[0]))]
</snippet></ROW><ROW><id>18277576</id><snippet>import calendar
import collections
from datetime import date

def get_weeks(year, month, holidays):
    cal = calendar.Calendar(0)
    weeks = collections.defaultdict(lambda: 0)
    for i, week in enumerate(cal.monthdatescalendar(year, month)):
        # Get just mon-fri
        for day in week[:-2]:
            if day.month == month and day not in holidays:
                weeks['week%s' % (i+1)] += 1
    return weeks
holidays = [date(2013, 8, 2), date(2013, 8, 6)]
print get_weeks(2013, 8, holidays)
</snippet></ROW><ROW><id>18277576</id><snippet>{'week2': 4, 'week1': 1, 'week4': 5, 'week3': 5, 'week5': 5})
</snippet></ROW><ROW><id>18277576</id><snippet>&gt;&gt;&gt; holidays = [date(2013, 8, 2), date(2013, 8, 6), date(2013, 8, 29)]
&gt;&gt;&gt; print  get_weeks(2013, 8, holidays)
{'week2': 4, 'week1': 1, 'week4': 5, 'week3': 5, 'week5': 4})
</snippet></ROW><ROW><id>18277576</id><snippet>import calendar
import collections
from datetime import date

def get_weeks(year, month, holidays):
    cal = calendar.Calendar(0)
    weeks = collections.defaultdict(list)
    for i, week in enumerate(cal.monthdatescalendar(year, month)):
        # Get just mon-fri
        for day in week[:-2]:
            if day.month == month and day not in holidays:
                weeks['week%s' % (i+1)].append(day)
    return weeks
holidays = [date(2013, 8, 2), date(2013, 8, 6), date(2013, 8, 29)]
print get_weeks(2013, 8, holidays)
</snippet></ROW><ROW><id>18277576</id><snippet>{
  'week1': [date(2013, 8, 1)],
  'week2': [date(2013, 8, 5), date(2013, 8, 7), date(2013, 8, 8),
            date(2013, 8, 9)],
  'week3': [date(2013, 8, 12), date(2013, 8, 13), date(2013, 8, 14),
            date(2013, 8, 15), date(2013, 8, 16)],
  'week4': [date(2013, 8, 19), date(2013, 8, 20), date(2013, 8, 21),
            date(2013, 8, 22), date(2013, 8, 23)],
  'week5': [date(2013, 8, 26), date(2013, 8, 27), date(2013, 8, 28),
            date(2013, 8, 30)]
</snippet></ROW><ROW><id>18277665</id><snippet>pykeylogger</snippet></ROW><ROW><id>18277665</id><snippet>pygame</snippet></ROW><ROW><id>18277665</id><snippet>pygame</snippet></ROW><ROW><id>18277665</id><snippet>pygame.keys</snippet></ROW><ROW><id>18277665</id><snippet>K_DELETE              delete #thanks to @7stud
</snippet></ROW><ROW><id>18277665</id><snippet>key = pygame.key.get_pressed()
        if key[pygame.K_DELETE]:
           #your code here...
</snippet></ROW><ROW><id>18277665</id><snippet>pykeylogger</snippet></ROW><ROW><id>18277665</id><snippet>import keylogger
import time

now = time.time()
done = lambda: time.time() &gt; now + 60
def print_keys(t, modifiers, keys): print "%.2f   %r   %r" % (t, keys, modifiers)

keylogger.log(done, print_keys)
</snippet></ROW><ROW><id>18278048</id><snippet>m</snippet></ROW><ROW><id>18278048</id><snippet>str.length - endIndex</snippet></ROW><ROW><id>18278048</id><snippet>n</snippet></ROW><ROW><id>18278048</id><snippet>str.length - lastIndex</snippet></ROW><ROW><id>18278205</id><snippet>next()</snippet></ROW><ROW><id>18278205</id><snippet>.readline()</snippet></ROW><ROW><id>18278205</id><snippet>.readline()</snippet></ROW><ROW><id>18278205</id><snippet>next(filename)</snippet></ROW><ROW><id>18278205</id><snippet>filename.readline()</snippet></ROW><ROW><id>18278205</id><snippet>next()</snippet></ROW><ROW><id>18278205</id><snippet>.readline()</snippet></ROW><ROW><id>18278205</id><snippet>.rsplit()</snippet></ROW><ROW><id>18278205</id><snippet>y_val = line.rsplit(None, 1)[-1]
</snippet></ROW><ROW><id>18278205</id><snippet>.rpartition()</snippet></ROW><ROW><id>18278205</id><snippet>y_val = line.rpartition(' ')[-1]
</snippet></ROW><ROW><id>18278205</id><snippet>while</snippet></ROW><ROW><id>18278205</id><snippet>for</snippet></ROW><ROW><id>18278205</id><snippet>y_values = []
for line in filename:
    if not line.strip():
        return y_values
    y_val = line.rsplit(None, 1)[-1]
    y_values.append(float(y_val))
</snippet></ROW><ROW><id>18278331</id><snippet>dict2 = {k: k for k in dict1}
</snippet></ROW><ROW><id>18278331</id><snippet>dict1</snippet></ROW><ROW><id>18278469</id><snippet>input()</snippet></ROW><ROW><id>18278469</id><snippet>if choice in ('1', "move"):
    return 1
</snippet></ROW><ROW><id>18278469</id><snippet>choice</snippet></ROW><ROW><id>18278469</id><snippet>return</snippet></ROW><ROW><id>18278469</id><snippet>None</snippet></ROW><ROW><id>18278469</id><snippet>if/elif/elif</snippet></ROW><ROW><id>18278469</id><snippet>choices = {
    '1': 1,
    'move': 1,
    # ...
    '4': 4,
    'quit': 4,
}

if choice in choices:
    return choices[choice]
else:
    print('No such choice!')
</snippet></ROW><ROW><id>18278499</id><snippet>&gt;&gt;&gt; from pandas.io.data import DataReader
&gt;&gt;&gt; from datetime import datetime

&gt;&gt;&gt; goog = DataReader("GOOG",  "yahoo", datetime(2000,1,1), datetime(2012,1,1))
&gt;&gt;&gt; goog["Adj Close"]
Date
2004-08-19    100.34
2004-08-20    108.31
2004-08-23    109.40
2004-08-24    104.87
2004-08-25    106.00
...
</snippet></ROW><ROW><id>18278595</id><snippet>parse</snippet></ROW><ROW><id>18278717</id><snippet>Product</snippet></ROW><ROW><id>18278717</id><snippet>Product</snippet></ROW><ROW><id>18278717</id><snippet>&gt;&gt;&gt; from products.models import Product
</snippet></ROW><ROW><id>18278785</id><snippet>camera = [0,0]
...
def update(self, dx=0, dy=0):
    newpos = (self.pos[0] + dx, self.pos[1] + dy)  # Calculates a new position
    entityrect = pygame.Rect(newpos, self.surface.get_size())
    camera[0] += dx
    camera[1] += dy
    ...
</snippet></ROW><ROW><id>18278785</id><snippet>screen.blit(map1, (0,0), 
            (camera[0], camera[1], screen.get_width(), screen.get_height())
           )
</snippet></ROW><ROW><id>18278785</id><snippet>screen.blit(player, (player.pos[0]-camera[0], player.pos[1]-camera[1]))
</snippet></ROW><ROW><id>18278964</id><snippet>ldap_host = 'example.com'
ldap_port = 389
...
</snippet></ROW><ROW><id>18278964</id><snippet>def user_info(username):
    from ldap_settings import *
    ...
</snippet></ROW><ROW><id>18279085</id><snippet> @xmlobject("Book")  
 class Book( object  ):

    author = XElement( 'AuthorsText' )
    title = XElement( 'Title' )
    bookId = XAttrib( 'book_id' )
    isbn = IntAttrib( 'isbn' )
    publisher = XInstance( 'PublisherText', Publisher )
</snippet></ROW><ROW><id>18279085</id><snippet>book.author = 'Joyce, James'
</snippet></ROW><ROW><id>18279085</id><snippet>from xml.etree.cElementTree import ElementTree, Element

class XElement( object ):
    '''
    Simple XML serializable field
    '''

    def __init__( self, path):           
        self.path = path
        self._xml = Element(path) # using an ElementTree or lxml element as internal storage

    def get_xml( self, inst ):
        return inst._xml

    def _get_element( self ):
        return self.path

    def _get_attribute( self ):
        return None

    # the getter and setter push values into the underlying xml and return them from there
    def __get__( self, instance, owner=None ):
         myxml = self.get_xml( instance )
         underlying = myxml.find( self.path )
         return underlying.text 

    def __set__( self, instance, value, owner=None ):
        myxml= self._get_xml( instance )
        underlying = myxml.find( self.path )
        underlying.text = value
</snippet></ROW><ROW><id>18279085</id><snippet>class XAttrib( XElement):
    '''
     Wraps a property in an attribute on the containing xml tag specified by 'path'
    '''

    def __get__( self, instance, owner=None ):
        return self._get_xml( instance ).attrib[self.path]  
        # again, using ElementTree under the hood

    def __set__( self, instance, value, owner=None ):
        myxml = self._get_xml( instance )
        has_element = myxml.get( self.path, 'NOT_FOUND' )
        if has_element == 'NOT_FOUND':
           raise Exception, "instance has no element path"
        myxml.set( self.path, value )

    def _get_element( self ):
        return None  #so outside code knows we are an attrib

    def _get_attribute( self ):
        return self.path
</snippet></ROW><ROW><id>18279085</id><snippet>        def create_defaults( target_cls):
             # where target class is the serializable class, eg 'Book'
             # here _et_xml() would return the class level Element, just
             # as in the XElement and XAttribute.  Good use for a decorator!

             myxml = target_cls.get_xml()

             default_attribs = [item for item in target_cls.__class__.__dict__.values() 
                                 if issubclass( item.__class__, XElement) ]
             #default attribs will be all the descriptors in the target class

             for item in default_attribs:
                element_name = item._get_element()
                #update the xml for the owning class with 
                # all the XElements
                if element_name:
                    new_element = Element( element_name )
                    new_element.text = str( item.DEFAULT_VAL )
                    myxml.append( new_element )

                # then update the owning XML with the attributes 
             for item in default_attribs:
                 attribpath = item._get_attribute()
                 if attrib:
                     myxml.set( attribpath, str( item.DEFAULT_VAL ) )
</snippet></ROW><ROW><id>18279111</id><snippet>from itertools import izip
sample = [(1,3), (4,5), (8,2)]
t1, t2 = map(sum, izip(*sample))
</snippet></ROW><ROW><id>18279111</id><snippet>map</snippet></ROW><ROW><id>18279111</id><snippet>from itertools import izip
sample = [(1,3), (4,5), (8,2)]
t1, t2 = [sum(t) for t in izip(*sample)]
</snippet></ROW><ROW><id>18279111</id><snippet>from itertools import izip
sample = [(1, 3, 1), (4, 5, 1), (8, 2, 1)]
sums = [sum(t) for t in izip(*sample)]
# sums == [13, 10, 3]
</snippet></ROW><ROW><id>18279172</id><snippet>--prefix=~/local</snippet></ROW><ROW><id>18279172</id><snippet>configure</snippet></ROW><ROW><id>18279172</id><snippet>/usr/local</snippet></ROW><ROW><id>18279172</id><snippet>root</snippet></ROW><ROW><id>18279182</id><snippet>import os
import glob
newest = max(glob.iglob('*.[Mm][Pp]3'), key=os.path.getctime)
</snippet></ROW><ROW><id>18279217</id><snippet>format_html('&lt;ul class="errorlist alert alert-error"&gt;{0}&lt;/ul&gt;',
    format_html_join('', '&lt;li&gt;{0}&lt;/li&gt;',((force_text(e),) for e in self)))
</snippet></ROW><ROW><id>18279217</id><snippet>format_html(u'&lt;ul class="errorlist alert alert-error"&gt;{0}&lt;/ul&gt;',
    format_html_join(u'', u'&lt;li&gt;{0}&lt;/li&gt;', ((force_text(e),) for e in self)))
</snippet></ROW><ROW><id>18279217</id><snippet>u</snippet></ROW><ROW><id>18279217</id><snippet>''</snippet></ROW><ROW><id>18279255</id><snippet>x = ['fee', 'fi', 'fo', 'fum']
</snippet></ROW><ROW><id>18279255</id><snippet>x</snippet></ROW><ROW><id>18279255</id><snippet>def foo():
    return ['fee', 'fi', 'fo', 'fum']

x = foo()
x[0] = 'bar'

print foo()[0]   # must be 'fee'
print x[0]       # must be 'bar'
</snippet></ROW><ROW><id>18279255</id><snippet>def foo():
    return (1, 2, 3)
</snippet></ROW><ROW><id>18279255</id><snippet>def foo():
    return 3 * 4
</snippet></ROW><ROW><id>18279255</id><snippet>len</snippet></ROW><ROW><id>18279255</id><snippet>len("foo")</snippet></ROW><ROW><id>18279354</id><snippet>wordmap = {}
with open('wordlist.txt') as f:
    for line in f:
        key, value = line.split()
        wordmap[key] = value
</snippet></ROW><ROW><id>18279354</id><snippet>&gt;&gt;&gt; wordmap['14623']
borneo
</snippet></ROW><ROW><id>18279354</id><snippet>rstrip</snippet></ROW><ROW><id>18279354</id><snippet>split(None, 1)</snippet></ROW><ROW><id>18279354</id><snippet>wordmap[int(key)]</snippet></ROW><ROW><id>18279354</id><snippet>wordmap[14623]</snippet></ROW><ROW><id>18279354</id><snippet>wordmap['14623']</snippet></ROW><ROW><id>18279354</id><snippet>'glassdfefewasd'</snippet></ROW><ROW><id>18279354</id><snippet>with open('wordlist.txt') as f:
    wordmap = dict(line.rstrip().split(None, 1) for line in f)
</snippet></ROW><ROW><id>18279412</id><snippet>__</snippet></ROW><ROW><id>18279412</id><snippet>__searchable_columns</snippet></ROW><ROW><id>18279412</id><snippet>__searchable_columns = ['title', 'body']  # Invalid
__searchable_columns__ = ['title', 'body']  # Will work
</snippet></ROW><ROW><id>18279471</id><snippet>`atmlist = ['CG', 'CD1', 'CD2', 'CE1', 'CE2', 'CZ']
def Read_PDB(filename):
   coord={r:{k:(0,0,0) for k in atmlist} for r in [0,1]}
   try:
      f = open(filename, 'r')
   except IOError as err:
      print ("I/O error({0}): {1}".format(err.errno, err.strerror))
      quit()

   for line in f:
      for at in atmlist:
         if (line.find(at) == 13):
            line = line.strip()
            temp = line.split()
            crd = (float(temp[5]), float(temp[6]), float(temp[7]))
            coord[int(temp[4])-1][at] = crd;

   return coord` 
</snippet></ROW><ROW><id>18279878</id><snippet>class myStack:
     def __init__(self):
         self.container = []  # You don't want to assign [] to self - when you do that, you're just assigning to a new local variable called `self`.  You want your stack to *have* a list, not *be* a list.

     def isEmpty(self):
         return self.size() == 0   # While there's nothing wrong with self.container == [], there is a builtin function for that purpose, so we may as well use it.  And while we're at it, it's often nice to use your own internal functions, so behavior is more consistent.

     def push(self, item):
         self.container.append(item)  # appending to the *container*, not the instance itself.

     def pop(self):
         return self.container.pop(0)  # pop from the container

     def size(self):
         return len(self.container)  # length of the container

s = myStack()
s.push('1')
s.push('2')
print(s.pop())
print s
</snippet></ROW><ROW><id>18279881</id><snippet>Foo._properties</snippet></ROW><ROW><id>18279881</id><snippet>polymodel.PolyModel</snippet></ROW><ROW><id>18279881</id><snippet>google.appengine.ext.db.Property</snippet></ROW><ROW><id>18279881</id><snippet>KeyProperty</snippet></ROW><ROW><id>18279881</id><snippet>StringProperty</snippet></ROW><ROW><id>18279881</id><snippet>Foo._properties</snippet></ROW><ROW><id>18279881</id><snippet>property</snippet></ROW><ROW><id>18279881</id><snippet>@property
def bar(self):
    pass

def bar(self):
    pass
bar = property(bar)
</snippet></ROW><ROW><id>18279881</id><snippet>property(obj)</snippet></ROW><ROW><id>18279881</id><snippet>property</snippet></ROW><ROW><id>18279881</id><snippet>@property</snippet></ROW><ROW><id>18279881</id><snippet>property</snippet></ROW><ROW><id>18279881</id><snippet>property</snippet></ROW><ROW><id>18279881</id><snippet>isinstance(bar, property)</snippet></ROW><ROW><id>18279881</id><snippet>bar</snippet></ROW><ROW><id>18279881</id><snippet>Foo</snippet></ROW><ROW><id>18279881</id><snippet>property</snippet></ROW><ROW><id>18279881</id><snippet>for attr_name, attr_value in Foo.__dict__.iteritems():
    if isinstance(attr_value, property):
        print attr_name, attr_value

# bar, &lt;property object at ...&gt;
</snippet></ROW><ROW><id>18279979</id><snippet>XFStyle</snippet></ROW><ROW><id>18279979</id><snippet>write</snippet></ROW><ROW><id>18279979</id><snippet>import xlwt

workbook = xlwt.Workbook()
worksheet = workbook.add_sheet('Test')

style = xlwt.XFStyle()

# font
font = xlwt.Font()
font.bold = True
style.font = font

# borders
borders = xlwt.Borders()
borders.bottom = xlwt.Borders.DASHED
style.borders = borders

worksheet.write(0, 0, 'test value', style=style)
workbook.save('test.xls')
</snippet></ROW><ROW><id>18279979</id><snippet>import xlwt

workbook = xlwt.Workbook()
worksheet = workbook.add_sheet('Test')  

style_string = "font: bold on; borders: bottom dashed"
style = xlwt.easyxf(style_string)

worksheet.write(0, 0, 'test value', style=style)
workbook.save('test.xls')
</snippet></ROW><ROW><id>18280130</id><snippet>-0</snippet></ROW><ROW><id>18280130</id><snippet>0</snippet></ROW><ROW><id>18280130</id><snippet>itemgetter()</snippet></ROW><ROW><id>18280130</id><snippet>lambda</snippet></ROW><ROW><id>18280130</id><snippet>sorted(ItemList, key=lambda item: (-item[0], item[1]))
</snippet></ROW><ROW><id>18280130</id><snippet>&gt;&gt;&gt; ItemList = [(1,7),(2,1),(1,5),(1,1)]
&gt;&gt;&gt; sorted(ItemList, key=lambda item: (-item[0], item[1]))
[(2, 1), (1, 1), (1, 5), (1, 7)]
</snippet></ROW><ROW><id>18280130</id><snippet>&gt;&gt;&gt; end = itemgetter(-1)
&gt;&gt;&gt; end([1, 2, 3])
3
</snippet></ROW><ROW><id>18280130</id><snippet>itemgetter()</snippet></ROW><ROW><id>18280130</id><snippet>itemgetter()</snippet></ROW><ROW><id>18280302</id><snippet>.name</snippet></ROW><ROW><id>18280302</id><snippet>TemporaryFile</snippet></ROW><ROW><id>18280302</id><snippet>&lt;fdopen&gt;</snippet></ROW><ROW><id>18280302</id><snippet>NamedTemporaryFile</snippet></ROW><ROW><id>18280302</id><snippet>dir</snippet></ROW><ROW><id>18280302</id><snippet>TemporaryFile</snippet></ROW><ROW><id>18280302</id><snippet>mkstemp</snippet></ROW><ROW><id>18280302</id><snippet>dir</snippet></ROW><ROW><id>18280302</id><snippet>dir</snippet></ROW><ROW><id>18280302</id><snippet>TMPDIR</snippet></ROW><ROW><id>18280302</id><snippet>TEMP</snippet></ROW><ROW><id>18280302</id><snippet>TMP</snippet></ROW><ROW><id>18280332</id><snippet>class httpHandler(...):
    # Note that these are class variables and are therefore accessable
    # to all instances
    numSuccess = 0
    numSuccessLock = new threading.Lock()

    def do_POST(self):
        self.numSuccessLock.aquire()
        self.numSuccess += 1
        self.numSuccessLock.release()
</snippet></ROW><ROW><id>18280360</id><snippet>squeeze</snippet></ROW><ROW><id>18280360</id><snippet>et = pd.read_csv(..., index_col=0, squeeze=True)
</snippet></ROW><ROW><id>18280360</id><snippet>complete_days_only = et.groupby(lambda x: x.date).filter(lambda x: ~x.isnull().any())
</snippet></ROW><ROW><id>18280360</id><snippet>complete_days_only.resample('D', how='sum')
</snippet></ROW><ROW><id>18280485</id><snippet>"1,2,3,4,5"</snippet></ROW><ROW><id>18280485</id><snippet>split</snippet></ROW><ROW><id>18280485</id><snippet>int</snippet></ROW><ROW><id>18280485</id><snippet>user_input = "4,8,15,16,23,42"
numbers = [int(d) for d in user_input.split(",")]

print "numbers:", numbers
print "sum of numbers:", sum(numbers)
</snippet></ROW><ROW><id>18280485</id><snippet>numbers: [4, 8, 15, 16, 23, 42]
sum of numbers: 108
</snippet></ROW><ROW><id>18280493</id><snippet>plistlib</snippet></ROW><ROW><id>18280493</id><snippet>plistlib</snippet></ROW><ROW><id>18280493</id><snippet>plist</snippet></ROW><ROW><id>18280493</id><snippet>def safe_unicode(s):
    if isinstance(s, unicode):
        return s
    return s.decode('utf-8', errors='replace')

value = safe_unicode(info['Name'])
</snippet></ROW><ROW><id>18280493</id><snippet>errors='replace'</snippet></ROW><ROW><id>18280493</id><snippet>utf-8</snippet></ROW><ROW><id>18280493</id><snippet>\ufffd</snippet></ROW><ROW><id>18280493</id><snippet>e.decode('utf-8')</snippet></ROW><ROW><id>18280493</id><snippet>from xml.etree import ElementTree as et
tree = et.parse('test.plist')
map(lambda x: x.text, tree.findall('dict/dict/dict')[1].findall('string'))
</snippet></ROW><ROW><id>18280493</id><snippet>[u'Don\u2019t You Remember',
 'Adele',
 '21',
 'Pop',
 'MPEG audio file',
 '7130C888606FB153',
 'File',
 'file://localhost/D:/music/Adele/21/04%20-%20Don%E2%80%99t%20You%20Remember.mp3']
</snippet></ROW><ROW><id>18280532</id><snippet>transaction_id</snippet></ROW><ROW><id>18280532</id><snippet>transaction_id</snippet></ROW><ROW><id>18280532</id><snippet>global</snippet></ROW><ROW><id>18280532</id><snippet>def parseFileContent(hostID,marketID, content, writeToDB=False):
    global transaction_id
</snippet></ROW><ROW><id>18280577</id><snippet>for child in soup.find(id='main'):
    if isinstance(child, bs4.Tag):
        print child.text
</snippet></ROW><ROW><id>18280577</id><snippet>This is a paragraph.
This is a paragraph with a tag.
This is another paragraph.
</snippet></ROW><ROW><id>18280650</id><snippet>Please input the scrambled alphabet in order: 'XQHAJDENKLTCBZGUYFWVMIPSOR'
Now input your scrambled message: 'THIS IS MY 1ST SECRET MESSAGE!'
VNKW KW BO 1WV WJHFJV BJWWXEJ!
</snippet></ROW><ROW><id>18280650</id><snippet>decrypt[num] = ord(each_letter)
</snippet></ROW><ROW><id>18280650</id><snippet>decrypt[ord(each_letter) - 65] = num + 65
</snippet></ROW><ROW><id>18280650</id><snippet>Please input the scrambled alphabet in order: 'XQHAJDENKLTCBZGUYFWVMIPSOR'
Now input your scrambled message: 'VNKW KW BO 1WV WJHFJV BJWWXEJ!'
THIS IS MY 1ST SECRET MESSAGE!
</snippet></ROW><ROW><id>18280768</id><snippet>get_dummies</snippet></ROW><ROW><id>18280768</id><snippet>data = {'numeric_1':[12.1, 3.2, 5.5, 6.8, 9.9], 
        'categorical_1':['A', 'B', 'C', 'B', 'B']}
frame = pd.DataFrame(data)
dummy_values = pd.get_dummies(data['categorical_1'] + ['D','E'])
</snippet></ROW><ROW><id>18280768</id><snippet>+</snippet></ROW><ROW><id>18280768</id><snippet>concatenate</snippet></ROW><ROW><id>18280768</id><snippet>['A','B','C','B','B'] + ['D','E']
</snippet></ROW><ROW><id>18280768</id><snippet>['A', 'B', 'C', 'B', 'B', 'D', 'E']
</snippet></ROW><ROW><id>18280768</id><snippet>A   B   C
0   0   0
</snippet></ROW><ROW><id>18280768</id><snippet>0 1 0</snippet></ROW><ROW><id>18280768</id><snippet>0 0 1</snippet></ROW><ROW><id>18280876</id><snippet>metavar=''</snippet></ROW><ROW><id>18280876</id><snippet>-q , --queue          Show information for &lt;queue&gt;
</snippet></ROW><ROW><id>18280876</id><snippet>parser = argparse.ArgumentParser(description='Postfix Queue Administration Tool',
        prog='pqa',
        usage='%(prog)s [-h] [-v,--version]',
        formatter_class=argparse.RawDescriptionHelpFormatter,
        )
parser.add_argument('-l', '--list', action='store_true',
        help='Shows full overview of all queues')
g = parser.add_argument_group(title='information options',
        description='''-q, --queue &lt;queue&gt;     Show information for &lt;queue&gt;
-d, --domain &lt;domain&gt;   Show information about a specific &lt;domain&gt;''')
g.add_argument('-q', '--queue', action='store', metavar='', dest='queue',
        help=argparse.SUPPRESS)
g.add_argument('-d', '--domain', action='store', metavar='&lt;domain&gt;', dest='domain',
        help=argparse.SUPPRESS)
parser.add_argument('-v', '--version', action='version', version='%(prog)s 0.1')
parser.print_help()
</snippet></ROW><ROW><id>18280876</id><snippet>usage: pqa [-h] [-v,--version]

Postfix Queue Administration Tool

optional arguments:
  -h, --help     show this help message and exit
  -l, --list     Shows full overview of all queues
  -v, --version  show program's version number and exit

information options:
  -q, --queue &lt;queue&gt;     Show information for &lt;queue&gt;
  -d, --domain &lt;domain&gt;   Show information about a specific &lt;domain&gt;
</snippet></ROW><ROW><id>18280999</id><snippet>ytTime = isodate.parse_duration(ytDUR)</snippet></ROW><ROW><id>18280999</id><snippet>isodate.parse_duration('PT6M19S')</snippet></ROW><ROW><id>18281031</id><snippet>with</snippet></ROW><ROW><id>18281031</id><snippet>try</snippet></ROW><ROW><id>18281031</id><snippet>finally</snippet></ROW><ROW><id>18281031</id><snippet>tempfile</snippet></ROW><ROW><id>18281031</id><snippet>finally</snippet></ROW><ROW><id>18281248</id><snippet>connects_to</snippet></ROW><ROW><id>18281248</id><snippet>if command == 'move north':
    if 'north' in room.list_of_directions and 'north' in room.connects_to:
        player.Move(room.connects_to['north'] )
        room = room.connects_to['north']
</snippet></ROW><ROW><id>18281248</id><snippet>if command.startswith ('move '):
    direction = command [4:].strip ()
    if direction in room.list_of_directions and direction in room.connects_to:
        player.Move(room.connects_to[direction] )
        room = room.connects_to[direction]
</snippet></ROW><ROW><id>18281248</id><snippet>if command.startswith ('move '):
    direction = command [4:].strip ()
    if direction in room.list_of_directions:
        if direction in room.connects_to:
            player.Move(room.connects_to[direction] )
            room = room.connects_to[direction]
        else:
            print 'You fell off the world' #(valid direction but no room behind)
    else:
        print 'Thou shalst not move this way.'
</snippet></ROW><ROW><id>18281298</id><snippet>In [5]: df = DataFrame(randn(10,1))

In [6]: df['col1'] = '20130101'

In [7]: df['col2'] = '20130102 9:01'

In [8]: df
Out[8]: 
          0      col1           col2
0 -1.111980  20130101  20130102 9:01
1  1.417732  20130101  20130102 9:01
2 -0.111606  20130101  20130102 9:01
3 -0.999599  20130101  20130102 9:01
4 -0.229082  20130101  20130102 9:01
5  0.535978  20130101  20130102 9:01
6 -1.913625  20130101  20130102 9:01
7  1.000879  20130101  20130102 9:01
8  0.358047  20130101  20130102 9:01
9  0.764761  20130101  20130102 9:01

In [9]: col_list = ['col1','col2']

In [10]: df[col_list] = df[col_list].apply(lambda x: pd.to_datetime(x))

In [11]: df
Out[11]: 
          0                col1                col2
0 -1.111980 2013-01-01 00:00:00 2013-01-02 09:01:00
1  1.417732 2013-01-01 00:00:00 2013-01-02 09:01:00
2 -0.111606 2013-01-01 00:00:00 2013-01-02 09:01:00
3 -0.999599 2013-01-01 00:00:00 2013-01-02 09:01:00
4 -0.229082 2013-01-01 00:00:00 2013-01-02 09:01:00
5  0.535978 2013-01-01 00:00:00 2013-01-02 09:01:00
6 -1.913625 2013-01-01 00:00:00 2013-01-02 09:01:00
7  1.000879 2013-01-01 00:00:00 2013-01-02 09:01:00
8  0.358047 2013-01-01 00:00:00 2013-01-02 09:01:00
9  0.764761 2013-01-01 00:00:00 2013-01-02 09:01:00
</snippet></ROW><ROW><id>18281400</id><snippet>import re

text = """
November 5 - December 10
September 23 - December 16
"""

matches = re.findall("\w+\s\d+\s\-\s\w+\s\d+", text)
print matches
</snippet></ROW><ROW><id>18281400</id><snippet>['November 5 - December 10', 'September 23 - December 16']
</snippet></ROW><ROW><id>18281400</id><snippet>\w+</snippet></ROW><ROW><id>18281400</id><snippet>months = "|".join(calendar.month_name)[1:]
matches = re.findall("{0}\s\d+\s\-\s{0}\s\d+".format(months), text)
</snippet></ROW><ROW><id>18281432</id><snippet>List</snippet></ROW><ROW><id>18281432</id><snippet>List&lt;String&gt; A = Arrays.asList("a", "bnbnb");
List&lt;String&gt; B = Arrays.asList("1", "2", "3");

// you have to do this in two steps:
List&lt;String&gt; C = new ArrayList&lt;String&gt;(Arrays.asList("x"));
C.addAll(A);

// iteration:
for (List&lt;String&gt; x : Arrays.asList(A, B, C)) {
    // do something to x.get(0), analogous to x[0] in Python    
}
</snippet></ROW><ROW><id>18281432</id><snippet>Arrays.asList()</snippet></ROW><ROW><id>18281456</id><snippet>from itertools import tee, islice, izip
A = [1.10,1.11,1.12,1.21,1.22,1.48]
groups = izip(*[islice(el, n, None) for n, el in enumerate(tee(A, 3))])
print list(groups)
# [(1.1, 1.11, 1.12), (1.11, 1.12, 1.21), (1.12, 1.21, 1.22), (1.21, 1.22, 1.48)]
</snippet></ROW><ROW><id>18281456</id><snippet>itertools.tee</snippet></ROW><ROW><id>18281519</id><snippet>def takeSection(sequence):
    it = iter(sequence)
    a = -1
    group = []
    while True:
        try:
            a, last = next(it), a
        except StopIteration:
            if group:
                yield group
            return
        if a &lt; 0 and last &gt;= 0:
            if group:
                yield group
            group = [a]
        else:
            group.append(a)
</snippet></ROW><ROW><id>18281519</id><snippet>&gt;&gt;&gt; sequence = [-2323, -2324, -53434, -1027, -34232, 343434, 5657, 6565, 6500, -343434, -3434, -565, 5845, 4667, 5453, 98356]
&gt;&gt;&gt; list(takeSection(sequence))
Out[2]: 
[[-2323, -2324, -53434, -1027, -34232, 343434, 5657, 6565, 6500],
 [-343434, -3434, -565, 5845, 4667, 5453, 98356]]
</snippet></ROW><ROW><id>18281519</id><snippet>if a[0] &lt; 0 and last[0] &gt;=0</snippet></ROW><ROW><id>18281519</id><snippet>a</snippet></ROW><ROW><id>18281519</id><snippet>a = (-1, -1)</snippet></ROW><ROW><id>18281519</id><snippet>def sections(sequence, key):
    it = iter(sequence)
    a = placeholder = object()
    group = []
    while True:
        try:
            a, last = next(it), a
        except StopIteration:
            if group:
                yield group
            return
        if last is not placeholder and key(a, last):
            if group:
                yield group
            group = [a]
        else:
            group.append(a)
</snippet></ROW><ROW><id>18281519</id><snippet>&gt;&gt;&gt; sequence = [(-2323, -7465), (-2324, -7687), (-53434, -1027), (-34232, 343434), (5657, 6565), (6500, 978987), (-343434, -987), (-3434, -565), (-98, -8798), (-89898, -898), (5845, 4667), (5453, 98356)]
&gt;&gt;&gt; list(sections(sequence, key=lambda current, last: current[0] &lt; 0 and last[0] &gt;= 0))
Out[1]:
[[(-2323, -7465), (-2324, -7687), (-53434, -1027), (-34232, 343434), (5657, 6565), (6500, 978987)],
 [(-343434, -987), (-3434, -565), (-98, -8798), (-89898, -898), (5845, 4667), (5453, 98356)]]
</snippet></ROW><ROW><id>18281552</id><snippet>out = {}
for prop in dir(e.diag):
    if not re.match(r'__', prop):
        out[prop] = getattr(e.diag, prop)
pprint.pprint(out)
</snippet></ROW><ROW><id>18281632</id><snippet>import csv

def nested_list_formatter(nested):
    return tuple(','.join(str(item) for item in sublist) for sublist in nested)

def test():
    list1 = [[1, 2, 3, 4], [3, 2, 5], [9, 3, 6, 8, 4]]
    list2 = [[2, 2, 4, 4], [1, 9, 10], [2, 7, 7, 4, 5]]
    with open('doc.csv', 'w', newline='') as file:
        writer = csv.writer(file, quotechar='"', quoting=csv.QUOTE_ALL)
        writer.writerow(nested_list_formatter(list1))
        writer.writerow(nested_list_formatter(list2))

if __name__ == '__main__':
    test()
</snippet></ROW><ROW><id>18281632</id><snippet>doc.csv</snippet></ROW><ROW><id>18281632</id><snippet>"1,2,3,4","3,2,5","9,3,6,8,4"
"2,2,4,4","1,9,10","2,7,7,4,5"
</snippet></ROW><ROW><id>18281702</id><snippet>fin.write(u'\x40'.encode('utf16-le')
</snippet></ROW><ROW><id>18281702</id><snippet>utf16-be</snippet></ROW><ROW><id>18281702</id><snippet>fin.write(u'\x40'.encode('utf16')
</snippet></ROW><ROW><id>18281793</id><snippet>assertRegex</snippet></ROW><ROW><id>18281802</id><snippet>import os
import pandas as pd

file_names = []
data_frames = []
for filename in os.listdir(path):
    name = os.path.splitext(filename)[0]
    file_names.append(name)
    df = pd.read_csv(filename, header=None)
    df.rename(columns={0: name}, inplace=True)
    data_frames.append(df)

combined = pd.concat(data_frames, axis=1)
</snippet></ROW><ROW><id>18281802</id><snippet>ignore_index=True</snippet></ROW><ROW><id>18281826</id><snippet>print round(2.235, 2)

# Output: 2.24
</snippet></ROW><ROW><id>18281858</id><snippet>style.fill.start_color.index</snippet></ROW><ROW><id>18281858</id><snippet>new_sheet.cell(None,x,fieldKey).style.fill.start_color.index = 'FF808000'
</snippet></ROW><ROW><id>18281858</id><snippet>new_sheet.cell(None,x,fieldKey).style.fill.start_color.index = openpyxl.style.Color = 'FF808000'
</snippet></ROW><ROW><id>18281883</id><snippet>quoting</snippet></ROW><ROW><id>18281941</id><snippet>str.rstrip()</snippet></ROW><ROW><id>18281941</id><snippet>str.splitlines()</snippet></ROW><ROW><id>18281941</id><snippet>doclines = doc.splitlines()
doc_rejoined = ''.join(doclines)
</snippet></ROW><ROW><id>18281941</id><snippet>doc_rejoined</snippet></ROW><ROW><id>18281995</id><snippet>{{ object.column }}
</snippet></ROW><ROW><id>18282082</id><snippet># Import the things you need
import numpy as np
import matplotlib.pyplot as plt

# Create a matplotlib figure
fig, ax = plt.subplots()

# Create values for the x axis from -pi to pi
x = np.linspace(-np.pi, np.pi, 100)

# Calculate the values on the y axis (just a raised sin function)
y = np.sin(x) + 1

# Plot it
ax.plot(x, y)

# Select the numeric values on the y-axis where you would
# you like your labels to be placed
ax.set_yticks([0, 0.5, 1, 1.5, 2])

# Set your label values (string). Number of label values
# sould be the same as the number of ticks you created in
# the previous step. See @nordev's comment
ax.set_yticklabels(['foo', 'bar', 'baz', 'boo', 'bam'])
</snippet></ROW><ROW><id>18282082</id><snippet>import numpy as np
import matplotlib.pyplot as plt

x = np.linspace(-np.pi, np.pi, 100)
y = np.sin(x) + 1
plt.plot(x, y)
plt.yticks([0, 0.5, 1, 1.5, 2], ['foo', 'bar', 'baz', 'boo', 'bam'])
</snippet></ROW><ROW><id>18282178</id><snippet>return minElm.extend( merge(s1[:], s2[:] ))</snippet></ROW><ROW><id>18282178</id><snippet>list.extend</snippet></ROW><ROW><id>18282178</id><snippet>minElm.extend( merge(s1[:], s2[:] ))
return minElm
</snippet></ROW><ROW><id>18282178</id><snippet>return minElm + merge(s1[:], s2[:] )
</snippet></ROW><ROW><id>18282240</id><snippet>.+</snippet></ROW><ROW><id>18282240</id><snippet>\w+</snippet></ROW><ROW><id>18282240</id><snippet>url(r'^bundesland/(?P&lt;bundesland&gt;\w+)/$','home.views.func_a'),
</snippet></ROW><ROW><id>18282394</id><snippet>tempfile.TemporaryFile</snippet></ROW><ROW><id>18282394</id><snippet>tempfile.NamedTemporaryFile</snippet></ROW><ROW><id>18282394</id><snippet>TemporaryFile()</snippet></ROW><ROW><id>18282394</id><snippet>name</snippet></ROW><ROW><id>18282394</id><snippet>NamedTemporaryFile</snippet></ROW><ROW><id>18282394</id><snippet>delete=False</snippet></ROW><ROW><id>18282394</id><snippet>delete=False</snippet></ROW><ROW><id>18282394</id><snippet>subprocess.check_call</snippet></ROW><ROW><id>18282394</id><snippet>Popen</snippet></ROW><ROW><id>18282394</id><snippet>mongoimport</snippet></ROW><ROW><id>18282394</id><snippet>--unlink-input-file</snippet></ROW><ROW><id>18282401</id><snippet>os.walk</snippet></ROW><ROW><id>18282401</id><snippet>os.listdir</snippet></ROW><ROW><id>18282401</id><snippet>os.listdir</snippet></ROW><ROW><id>18282401</id><snippet>path: path of directory to list
</snippet></ROW><ROW><id>18282401</id><snippet>sort</snippet></ROW><ROW><id>18282401</id><snippet>for root, dirs, files in os.walk(path):
   for dirname in sorted(dirs):
        print(dirname)
</snippet></ROW><ROW><id>18282401</id><snippet>sorted(dirs)</snippet></ROW><ROW><id>18282401</id><snippet>import os

os.chdir('/tmp/tmp')
for dirname in '1 10 11 12 2 20 21 22 3 30 31 32'.split():
     try:
          os.makedirs(dirname)
     except OSError: pass


for root, dirs, files in os.walk('.'):
   for dirname in sorted(dirs):
        print(dirname)
</snippet></ROW><ROW><id>18282401</id><snippet>1
10
11
12
2
20
21
22
3
30
31
32
</snippet></ROW><ROW><id>18282401</id><snippet>for dirname in sorted(dirs, key=int):
</snippet></ROW><ROW><id>18282472</id><snippet>(?i)([a-z][a-z_.]*(?:\s+[a-z][a-z_.]*){0,2})?\s+(-?\d{1,3}(?:,\d{3})*(?:\.\d\d)?)
</snippet></ROW><ROW><id>18282472</id><snippet>{0,...}</snippet></ROW><ROW><id>18282472</id><snippet>*</snippet></ROW><ROW><id>18282472</id><snippet>(?i)([a-z][a-z_.]*)?\s+(-?\d{1,3}(?:,\d{3})*(?:\.\d\d)?)
</snippet></ROW><ROW><id>18282472</id><snippet>(?i)([a-z][a-z_.]*(?:\s+[a-z][a-z_.]*){2})\s+(-?\d{1,3}(?:,\d{3})*(?:\.\d\d)?)
</snippet></ROW><ROW><id>18282472</id><snippet>(?i)((?:^|(?&lt;=\s))[a-z][a-z_.]*(?:\s+[a-z][a-z_.]*){0,2})?\s+(-?\d{1,3}(?:,\d{3})*(?:\.\d\d)?)
</snippet></ROW><ROW><id>18282472</id><snippet>(?i)                      # make the pattern case insensitive
(                         # open the first capturing group
    (?:^|(?&lt;=\s))         # begining of the string or lookbehind with space
    [a-z][a-z_.]*         # a letter and zero or more chars from [a-z_.]
    (?:                   # open a non-capturing group
        \s+               # one or more spaces
        [a-z][a-z_.]*     # a letter and zero or more chars from [a-z_.]
    ){0,2}                # repeat the capturing group zero or two times
)?                        # close the capturing group and make it optional
\s+                       # one or more spaces
(                         # open a capturing group
    -?                    # - sign optional
    \d{1,3}               # between 1 or 3 digits
    (?:,\d{3})*           # a group (zero or more times) with a , and 3 digits
    (?:\.\d\d)?           # an optional group with a . and 2 digits
)                         # close the second capturing group.
</snippet></ROW><ROW><id>18282478</id><snippet>from collections import defaultdict
type_dict = defaultdict(list)
for element in self.elements:
    type_dict[element.type()].append(element.dimStr())
return ','.join('%s: %s' for k, v in type_dict.items())
</snippet></ROW><ROW><id>18282556</id><snippet>widget.rowconfigure</snippet></ROW><ROW><id>18282556</id><snippet>grid_rowconfigure</snippet></ROW><ROW><id>18282556</id><snippet>grid rowconfigure</snippet></ROW><ROW><id>18282556</id><snippet>grid_rowconfigure</snippet></ROW><ROW><id>18282636</id><snippet>col1 = ['a', 'b', 'c']
col2 = [[1,2], [4,3,2], []]
col2_lens = map(len, col2)

# flatten col2
s2 = Series([eli for el in col2 for eli in (el or [nan])])

# replicate elements of col1 col2[i] times
s1 = Series(list(''.join(el * (col2_len or 1) for el, col2_len in zip(col1, col2_lens))))
concat([s1, s2], axis=1)
</snippet></ROW><ROW><id>18282636</id><snippet>   0   1
0  a   1
1  a   2
2  b   4
3  b   3
4  b   2
5  c NaN
</snippet></ROW><ROW><id>18282636</id><snippet>%%timeit</snippet></ROW><ROW><id>18282636</id><snippet>%%timeit
col2_lens = map(len, col2)

# flatten col2
s2 = Series([eli for el in col2 for eli in (el or [nan])])

# replicate elements of col1 col2[i] times
s1 = Series(list(''.join(el * (col2_len or 1) for el, col2_len in zip(col1, col2_lens))))
concat([s1, s2], axis=1)

1000 loops, best of 3: 646 µs per loop
</snippet></ROW><ROW><id>18282636</id><snippet>%%timeit
df = DataFrame()
for a, b in zip(col1, col2):
    df = pd.concat([df, pd.DataFrame({'col1': a, 'col2': b or [np.nan]})])

100 loops, best of 3: 2.52 ms per loop
</snippet></ROW><ROW><id>18282636</id><snippet>%%timeit
frames = []
for a, b in zip(col1, col2):
    frames.append(pd.DataFrame({'col1': a, 'col2': b or [np.nan]}))
df = pd.concat(frames)

1000 loops, best of 3: 1.58 ms per loop
</snippet></ROW><ROW><id>18282707</id><snippet>images</snippet></ROW><ROW><id>18282707</id><snippet>class MyHTMLParser(HTMLParser):

    def __init__(self, *args, **kwargs):
        super(MyHTMLParser, self).__init__(*args, **kwargs)
        self.images = []
</snippet></ROW><ROW><id>18282707</id><snippet>images</snippet></ROW><ROW><id>18282771</id><snippet>itertools.product</snippet></ROW><ROW><id>18282771</id><snippet>import itertools

with open('proxies.txt') as proxies:
    with open('urls.txt') as urls:
        for (proxie, url) in itertools.product(proxies, urls):
            print "access", url.rstrip(), "using", proxie.rstrip()
</snippet></ROW><ROW><id>18282771</id><snippet>print</snippet></ROW><ROW><id>18282771</id><snippet>with open('proxies.txt') as proxies:
    for line in proxies:
        proxy = json.loads(line)
        proxy_handler = urllib2.ProxyHandler(proxy)
        opener = urllib2.build_opener(proxy_handler)
        urllib2.install_opener(opener)

        with open('urls.txt') as urls:
            for line in urls:
                url = line.rstrip()
                data = urllib2.urlopen(url).read()
                print data
</snippet></ROW><ROW><id>18282778</id><snippet>virtualenv</snippet></ROW><ROW><id>18282778</id><snippet>pip</snippet></ROW><ROW><id>18282778</id><snippet>pip</snippet></ROW><ROW><id>18282778</id><snippet>$ curl -O https://pypi.python.org/packages/source/v/virtualenv/virtualenv-X.X.tar.gz
$ tar xvfz virtualenv-X.X.tar.gz
$ cd virtualenv-X.X
$ [sudo] python setup.py install
</snippet></ROW><ROW><id>18282778</id><snippet>[sudo]</snippet></ROW><ROW><id>18282778</id><snippet>sudo</snippet></ROW><ROW><id>18282778</id><snippet>sudo</snippet></ROW><ROW><id>18282778</id><snippet>runas</snippet></ROW><ROW><id>18282778</id><snippet>start</snippet></ROW><ROW><id>18282778</id><snippet>curl</snippet></ROW><ROW><id>18282778</id><snippet>tar</snippet></ROW><ROW><id>18282778</id><snippet>virtualenv-X.X.tar</snippet></ROW><ROW><id>18282778</id><snippet>virtualenv-X.X</snippet></ROW><ROW><id>18282778</id><snippet>.tar</snippet></ROW><ROW><id>18282778</id><snippet>virtualenv</snippet></ROW><ROW><id>18282778</id><snippet>virtualenv</snippet></ROW><ROW><id>18282778</id><snippet>pip</snippet></ROW><ROW><id>18282778</id><snippet>virtualenv</snippet></ROW><ROW><id>18282778</id><snippet>pip</snippet></ROW><ROW><id>18282778</id><snippet>pip</snippet></ROW><ROW><id>18282778</id><snippet>pip</snippet></ROW><ROW><id>18282778</id><snippet>ez_setup.py</snippet></ROW><ROW><id>18282778</id><snippet>setuptools</snippet></ROW><ROW><id>18282778</id><snippet>get-pip.py</snippet></ROW><ROW><id>18282778</id><snippet>pip</snippet></ROW><ROW><id>18283014</id><snippet>df.apply(you_function, axis=1)
</snippet></ROW><ROW><id>18283014</id><snippet>&gt;&gt;&gt; df = pd.DataFrame({'a': np.arange(3),
                       'b': np.random.rand(3)})
&gt;&gt;&gt; df
   a         b
0  0  0.880075
1  1  0.143038
2  2  0.795188
&gt;&gt;&gt; def func(row):
        return row['a'] + row['b']
&gt;&gt;&gt; df.apply(func, axis=1)
0    0.880075
1    1.143038
2    2.795188
dtype: float64
</snippet></ROW><ROW><id>18283014</id><snippet>apply</snippet></ROW><ROW><id>18283014</id><snippet>df['a'] + df['b']</snippet></ROW><ROW><id>18283014</id><snippet>apply</snippet></ROW><ROW><id>18283065</id><snippet>from PIL import Image

# Separate RGB arrays
im = Image.open(file(filename, 'rb'))
R, G, B = im.convert('RGB').split()
r = R.load()
g = G.load()
b = B.load()
w, h = im.size

# Convert non-black pixels to white
for i in range(w):
    for j in range(h):
        if(r[i, j] != 0 or g[i, j] != 0 or b[i, j] != 0):
            r[i, j] = 255 # Just change R channel

# Merge just the R channel as all channels
im = Image.merge('RGB', (R, R, R))
im.save("black_and_white.png")
</snippet></ROW><ROW><id>18283151</id><snippet>def get_exception():
    try:
        worker.get()
    except Exception as e:
        return e
</snippet></ROW><ROW><id>18283151</id><snippet>[worker.get() for worker in workers if not worker.successful()]
</snippet></ROW><ROW><id>18283151</id><snippet>[get_exception(worker.get) for worker in workers if not worker.successful()]
</snippet></ROW><ROW><id>18283151</id><snippet>AsyncResult</snippet></ROW><ROW><id>18283151</id><snippet>exception</snippet></ROW><ROW><id>18283151</id><snippet>concurrent.futures.Future</snippet></ROW><ROW><id>18283151</id><snippet>futures</snippet></ROW><ROW><id>18283205</id><snippet>import SocketServer
import json

class Server(SocketServer.ThreadingTCPServer):
    allow_reuse_address = True

class Handler(SocketServer.BaseRequestHandler):
    def handle(self):
        self.request.sendall(json.dumps({'id':'3000'}))  # your JSON

server = Server(('127.0.0.1', 50009), Handler)
server.serve_forever()
</snippet></ROW><ROW><id>18283205</id><snippet>~  ᐅ curl 127.0.0.1:50009
{"id": 3000}
</snippet></ROW><ROW><id>18283293</id><snippet>outputDB</snippet></ROW><ROW><id>18283293</id><snippet>outputDB</snippet></ROW><ROW><id>18283293</id><snippet>outputfile</snippet></ROW><ROW><id>18283293</id><snippet>default</snippet></ROW><ROW><id>18283293</id><snippet>argument_default=SUPPRESS</snippet></ROW><ROW><id>18283293</id><snippet>args.outputDB</snippet></ROW><ROW><id>18283293</id><snippet>hasattr</snippet></ROW><ROW><id>18283293</id><snippet>in</snippet></ROW><ROW><id>18283293</id><snippet>try</snippet></ROW><ROW><id>18283293</id><snippet>--outputDB=''</snippet></ROW><ROW><id>18283293</id><snippet>type</snippet></ROW><ROW><id>18283293</id><snippet>None</snippet></ROW><ROW><id>18283293</id><snippet>sentinel = object()
x = do_stuff(default_value=sentinel)
# ... 
if x is sentinel:
    # x got the default value
</snippet></ROW><ROW><id>18283293</id><snippet>None</snippet></ROW><ROW><id>18283293</id><snippet>argparse</snippet></ROW><ROW><id>18283393</id><snippet>temp.py</snippet></ROW><ROW><id>18283393</id><snippet>temp.py</snippet></ROW><ROW><id>18283393</id><snippet>python</snippet></ROW><ROW><id>18283393</id><snippet>sys.argv</snippet></ROW><ROW><id>18283393</id><snippet>sys.argv</snippet></ROW><ROW><id>18283393</id><snippet>sys.argv</snippet></ROW><ROW><id>18283629</id><snippet>JSON.stringify(my_list)</snippet></ROW><ROW><id>18283629</id><snippet>item_list_json = get_paramw(kw, 'my_list', unicode)
item_list = json.loads(item_list_json)
</snippet></ROW><ROW><id>18283629</id><snippet>item_list</snippet></ROW><ROW><id>18283629</id><snippet>[1, 2, 3, 4]</snippet></ROW><ROW><id>18283629</id><snippet>item_list</snippet></ROW><ROW><id>18283629</id><snippet>[1, 2, 3, 4]</snippet></ROW><ROW><id>18283629</id><snippet>import json</snippet></ROW><ROW><id>18283711</id><snippet>'\n'</snippet></ROW><ROW><id>18283711</id><snippet>for line in f:</snippet></ROW><ROW><id>18283711</id><snippet>'\n'</snippet></ROW><ROW><id>18283711</id><snippet>'\r'</snippet></ROW><ROW><id>18283711</id><snippet>'\n'</snippet></ROW><ROW><id>18283711</id><snippet>"U"</snippet></ROW><ROW><id>18283711</id><snippet>'\n'</snippet></ROW><ROW><id>18283711</id><snippet>with open(inStream, "rU") as f:
</snippet></ROW><ROW><id>18283730</id><snippet>required</snippet></ROW><ROW><id>18283730</id><snippet>subparsers</snippet></ROW><ROW><id>18283730</id><snippet>parser = ArgumentParser(prog='test')
subparsers = parser.add_subparsers()
subparsers.required = True
subparsers.dest = 'command'
subparser = subparsers.add_parser("foo", help="run foo")
parser.parse_args()
</snippet></ROW><ROW><id>18283775</id><snippet>fetchone</snippet></ROW><ROW><id>18283775</id><snippet>id = cursor.execute(s).fetchone()[0]
</snippet></ROW><ROW><id>18283775</id><snippet>cursor.execute(s)</snippet></ROW><ROW><id>18283775</id><snippet>None</snippet></ROW><ROW><id>18283775</id><snippet>None</snippet></ROW><ROW><id>18283775</id><snippet>cursor.execute(s)
id = cursor.fetchone()[0]
</snippet></ROW><ROW><id>18283775</id><snippet>cursor.execute</snippet></ROW><ROW><id>18283775</id><snippet>self</snippet></ROW><ROW><id>18283778</id><snippet>m</snippet></ROW><ROW><id>18283778</id><snippet>None</snippet></ROW><ROW><id>18283778</id><snippet>&gt;&gt;&gt; re.search('^(:\(|:\))+$', ':)').group()
':)'
&gt;&gt;&gt; re.search('^(:\(|:\))+$', ':)').group()
':)'
&gt;&gt;&gt; re.search('^(:\(|:\))+$', ':):(').group()
':):('
&gt;&gt;&gt; re.search('^(:\(|:\))+$', ':)?:(').group()
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
AttributeError: 'NoneType' object has no attribute 'group'
</snippet></ROW><ROW><id>18283867</id><snippet>another_dict = {}
counters = {}
for key,value in dict.items():
    counter = counters.get(value, 0) + 1
    counters[value] = counter
    another_dict[key] = "%s_%d" % (value, counter)
</snippet></ROW><ROW><id>18283867</id><snippet>counters</snippet></ROW><ROW><id>18283867</id><snippet>.get()</snippet></ROW><ROW><id>18283909</id><snippet>&gt;&gt;&gt; import json
&gt;&gt;&gt; class mydict(dict):
        def __str__(self):
            return json.dumps(self)

&gt;&gt;&gt; couples = [['jack', 'ilena'], 
               ['arun', 'maya'], 
               ['hari', 'aradhana'], 
               ['bill', 'samantha']]    

&gt;&gt;&gt; pairs =  mydict(couples) 
&gt;&gt;&gt; print pairs
{"arun": "maya", "bill": "samantha", "jack": "ilena", "hari": "aradhana"}
</snippet></ROW><ROW><id>18283909</id><snippet>&gt;&gt;&gt; for el in pairs:
       print el

arun
bill
jack
hari
</snippet></ROW><ROW><id>18284286</id><snippet>subprocess</snippet></ROW><ROW><id>18284286</id><snippet>import subprocess

p = subprocess.Popen("ls -l | grep %s | awk '{ print $9 }'" % mask, 
    shell=True, stdout=subprocess.PIPE, stderr=subprocess.PIPE)
stdout, stderr = p.communicate()
</snippet></ROW><ROW><id>18284286</id><snippet>shell=True</snippet></ROW><ROW><id>18284286</id><snippet>No such file or directory</snippet></ROW><ROW><id>18284286</id><snippet>output = subprocess.check_output(
    "ls -l | grep %s | awk '{ print $9 }'" % mask
    stderr=subprocess.STDOUT,
    shell=True)
</snippet></ROW><ROW><id>18284286</id><snippet>subprocess.CalledProcessError</snippet></ROW><ROW><id>18284452</id><snippet>jsonpickle</snippet></ROW><ROW><id>18284452</id><snippet>jsonpickle</snippet></ROW><ROW><id>18284452</id><snippet>jsonpickle</snippet></ROW><ROW><id>18284452</id><snippet>requests</snippet></ROW><ROW><id>18284452</id><snippet>urllib3</snippet></ROW><ROW><id>18284452</id><snippet>request</snippet></ROW><ROW><id>18284452</id><snippet>urllib3</snippet></ROW><ROW><id>18284452</id><snippet>requests</snippet></ROW><ROW><id>18284452</id><snippet>urllib3</snippet></ROW><ROW><id>18284452</id><snippet>jsonpickle</snippet></ROW><ROW><id>18284452</id><snippet>pip</snippet></ROW><ROW><id>18284452</id><snippet>pip install git+https://github.com/foo/bar
</snippet></ROW><ROW><id>18284466</id><snippet>t.start()</snippet></ROW><ROW><id>18284518</id><snippet>SortByAttribute   = relationship("Attribute", uselist=False, foreign_keys=[sortByAttribute], primaryjoin="Attribute.ID==Category.sortByAttribute")
</snippet></ROW><ROW><id>18284518</id><snippet>SortByAttribute   = relationship("Attribute", uselist=False, foreign_keys=[sortByAttribute], primaryjoin="Attribute.ID==Category.sortByAttribute", post_update=True)
</snippet></ROW><ROW><id>18284644</id><snippet>import cmath

cmath.log(-1)
</snippet></ROW><ROW><id>18284655</id><snippet>gcc</snippet></ROW><ROW><id>18284655</id><snippet>__declspec(dllexport) int addition(int a, int b){
    return a+b;
}
</snippet></ROW><ROW><id>18284655</id><snippet>__stdcall</snippet></ROW><ROW><id>18284655</id><snippet>WinDLL('mylib.dll')</snippet></ROW><ROW><id>18284655</id><snippet>windll.mylib</snippet></ROW><ROW><id>18284655</id><snippet>&gt; type mylib.c
__declspec(dllexport) int __stdcall addition(int a, int b) {
    return a+b;
}

***********************************************************************

&gt; cl mylib.c /link /dll /out:mylib.dll
Microsoft (R) 32-bit C/C++ Optimizing Compiler Version 14.00.50727.762 for 80x86

Copyright (C) Microsoft Corporation.  All rights reserved.

mylib.c
Microsoft (R) Incremental Linker Version 8.00.50727.762
Copyright (C) Microsoft Corporation.  All rights reserved.

/out:mylib.exe
/dll
/out:mylib.dll
mylib.obj
   Creating library mylib.lib and object mylib.exp

***********************************************************************

&gt; python
&gt;&gt;&gt; from ctypes import *
&gt;&gt;&gt;
&gt;&gt;&gt; WinDLL('mylib.dll').addition(1, 2)
3
&gt;&gt;&gt; windll.mylib.addition(1, 2)
3
&gt;&gt;&gt;
</snippet></ROW><ROW><id>18284655</id><snippet>__cdecl</snippet></ROW><ROW><id>18284655</id><snippet>CDLL('mylib.dll')</snippet></ROW><ROW><id>18284655</id><snippet>cdll.mylib'</snippet></ROW><ROW><id>18284655</id><snippet>&gt; type mylib.c
// `__cdecl` is not needed, since it's the default calling convention
__declspec(dllexport) int addition(int a, int b){
    return a+b;
}

***********************************************************************

&gt; cl mylib.c /link /dll /out:mylib.dll
Microsoft (R) 32-bit C/C++ Optimizing Compiler Version 14.00.50727.762 for 80x86

Copyright (C) Microsoft Corporation.  All rights reserved.

mylib.c
Microsoft (R) Incremental Linker Version 8.00.50727.762
Copyright (C) Microsoft Corporation.  All rights reserved.

/out:mylib.exe
/dll
/out:mylib.dll
mylib.obj
   Creating library mylib.lib and object mylib.exp

***********************************************************************

&gt; python
&gt;&gt;&gt; from ctypes import *
&gt;&gt;&gt;
&gt;&gt;&gt; CDLL('mylib.dll').addition(1, 2)
3
&gt;&gt;&gt; cdll.mylib.addition(1, 2)
3
&gt;&gt;&gt;
</snippet></ROW><ROW><id>18284737</id><snippet>&gt;&gt;&gt; def diamond(n):
...     print(' '*n + '*')
...     for i in list(range(1,n)) + list(range(n,0,-1)):
...             print('{}*{}*'.format(' '*(n-i), ' '*(2*i-1)))
...     print(' '*n + '*')
</snippet></ROW><ROW><id>18284750</id><snippet>.children</snippet></ROW><ROW><id>18284750</id><snippet>td</snippet></ROW><ROW><id>18284750</id><snippet>&gt;&gt;&gt; rows = soup.findAll('tr')
&gt;&gt;&gt; for r in rows:
...     print("row:", r.name)
...     for c in r.children:
...         print("---")
...         print(type(c))
...         print(repr(c))
... 
row: tr
---
&lt;class 'bs4.element.NavigableString'&gt;
'\n'
---
&lt;class 'bs4.element.Tag'&gt;
&lt;td&gt;
&lt;div&gt;
&lt;b&gt;
    Icon
   &lt;/b&gt;
&lt;/div&gt;
&lt;/td&gt;
---
&lt;class 'bs4.element.NavigableString'&gt;
'\n'
</snippet></ROW><ROW><id>18284766</id><snippet>urllib.request</snippet></ROW><ROW><id>18284766</id><snippet>from urllib import urlopen
</snippet></ROW><ROW><id>18284766</id><snippet>urllib2</snippet></ROW><ROW><id>18284766</id><snippet>from urllib2 import urlopen
</snippet></ROW><ROW><id>18284766</id><snippet>IndentationError</snippet></ROW><ROW><id>18285115</id><snippet># col is the column of your data to aggregate over
# minval and maxval are the minimum and maximum (inclusive)
# values they can take. Getting these to set automatically
# is a trivial task.
def agg(A, col, minval, maxval):
    D = np.array( [ [ int(x) for x in d.split(',') ] for d,t in A ] )
    V = np.array( [ t for d,t in A ] )
    dvals = range(minval,maxval+1)
    q = []
    for v in unique(V):
        q.append( { 'name': v, 'series': 
                 numpy.array([ [x,sum(V[D[...,col]==x]==v)] for x in dvals ]) } )
    return q
</snippet></ROW><ROW><id>18285115</id><snippet>D</snippet></ROW><ROW><id>18285115</id><snippet>V</snippet></ROW><ROW><id>18285437</id><snippet>global</snippet></ROW><ROW><id>18285437</id><snippet>global</snippet></ROW><ROW><id>18285437</id><snippet>def number_check(input):
    """
    if the given input can be converted to a float, return
    the float, otherwise return the input as a string unchanged.
    """
    try:
        return float(input)
    except ValueError:
        return input

# and use like this:

string = raw_input()
number_or_string = number_check(input)
</snippet></ROW><ROW><id>18285642</id><snippet>\r</snippet></ROW><ROW><id>18285642</id><snippet>uEmail =  str(email['email']).strip()
</snippet></ROW><ROW><id>18285642</id><snippet>print validate_email(item.strip())
</snippet></ROW><ROW><id>18286017</id><snippet>#get indices of rows to update
rowsToUpdate = np.nonzero(a[:,0]&lt;0)[0]
#increment first element of target rows by 1000
a[rowsToUpdate,0] += 1000
</snippet></ROW><ROW><id>18286230</id><snippet>&gt;&gt;&gt; from collections import namedtuple
&gt;&gt;&gt;
&gt;&gt;&gt; class P(namedtuple('_P', 'val back')):
...     def __iter__(self):
...         while self:
...             yield self.val, self.back
...             self = self.back
...
&gt;&gt;&gt; q = P(val=15, back=P(val=11, back=P(val=9, back=P(val=6, back=P(val=2, back=P(val=0, back=None))))))
&gt;&gt;&gt; [val for val, back in q]
[15, 11, 9, 6, 2, 0]
</snippet></ROW><ROW><id>18286242</id><snippet>T</snippet></ROW><ROW><id>18286242</id><snippet>def do_something():
    global T # &lt;--------------
    do_something_else(T) # err at this line
    T += 1
</snippet></ROW><ROW><id>18286497</id><snippet>top_scores = [{"name":obj.name,
               "score":obj.score,
               "latitude": obj.loc.lat if hasattr(obj.loc, lat) else 0
               "longitude":obj.loc.lon if hasattr(obj.loc, lon) else 0}
               for obj in db_objs]
</snippet></ROW><ROW><id>18286631</id><snippet>subprocess</snippet></ROW><ROW><id>18286631</id><snippet>communicate.py</snippet></ROW><ROW><id>18286631</id><snippet>import sys
import subprocess as sp
import cPickle

BEGIN = 'pickle_begin'

def send_and_exit(x):
    sys.stdout.write(BEGIN + cPickle.dumps(x))
    sys.stdout.flush()
    sys.exit(0)

def execute_and_receive(filename):
    p = sp.Popen(["python", filename], stdout=sp.PIPE)
    (out, err) = p.communicate()
    return cPickle.loads(out[out.find(BEGIN) + len(BEGIN):])
</snippet></ROW><ROW><id>18286631</id><snippet>1.py</snippet></ROW><ROW><id>18286631</id><snippet>from communicate import *
x = execute_and_receive("2.py")
y = x + 2
</snippet></ROW><ROW><id>18286631</id><snippet>2.py</snippet></ROW><ROW><id>18286631</id><snippet>from communicate import *
x = 2 + 2
send_and_exit(x)
</snippet></ROW><ROW><id>18286631</id><snippet>stdout</snippet></ROW><ROW><id>18286631</id><snippet>BEGIN</snippet></ROW><ROW><id>18286733</id><snippet>alternatives</snippet></ROW><ROW><id>18286733</id><snippet>update-alternatives</snippet></ROW><ROW><id>18286742</id><snippet>import mock

...

class UserAPITest(AsyncHTTPTestCase):
    def get_app(self):
        self.app = Application([('/', MainHandler)],
                    cookie_secret='asdfasdf')
        return self.app

    def test_user_profile_annoymous(self):
        with mock.patch.object(MainHandler, 'get_secure_cookie') as m:
            m.return_value = 'user_email'
            response = self.fetch('/', method='GET')
        self.assertEqual('sucess', to_unicode(response.body) )
</snippet></ROW><ROW><id>18286846</id><snippet>yield</snippet></ROW><ROW><id>18286846</id><snippet>&gt;&gt;&gt; avg_gen = running_avg()
&gt;&gt;&gt; next(avg_gen)  # prime the generator
&gt;&gt;&gt; avg_gen.send(1.0)
1.0
&gt;&gt;&gt; print avg_gen.send(2.0)
1.5
</snippet></ROW><ROW><id>18286846</id><snippet>generator.send()</snippet></ROW><ROW><id>18286846</id><snippet>yield</snippet></ROW><ROW><id>18286846</id><snippet>yield</snippet></ROW><ROW><id>18286846</id><snippet>yield</snippet></ROW><ROW><id>18286846</id><snippet>yield</snippet></ROW><ROW><id>18286846</id><snippet>.send()</snippet></ROW><ROW><id>18287297</id><snippet>tracer()</snippet></ROW><ROW><id>18287297</id><snippet>traced()</snippet></ROW><ROW><id>18287297</id><snippet>return traced
</snippet></ROW><ROW><id>18287297</id><snippet>new_fact</snippet></ROW><ROW><id>18287297</id><snippet>&gt;&gt;&gt; tracer(fact)
&lt;function traced at 0x10644c320&gt;
&gt;&gt;&gt; new_fact = tracer(fact)
&gt;&gt;&gt; new_fact
&lt;function traced at 0x10644c398&gt;
&gt;&gt;&gt; new_fact(2)
('Calling', &lt;function fact at 0x10644c230&gt;, '(', 2, ')')
('Got', 2, 'from', &lt;function fact at 0x10644c230&gt;, '(', 2, ')')
2
</snippet></ROW><ROW><id>18287297</id><snippet>&gt;&gt;&gt; def foo(): print 'foo'
... 
&gt;&gt;&gt; bar = foo
&gt;&gt;&gt; bar()
foo
</snippet></ROW><ROW><id>18287399</id><snippet>twisted/runner/portmap.c:10:20: error: Python.h: No such file or directory</snippet></ROW><ROW><id>18287399</id><snippet>python2.7-dev</snippet></ROW><ROW><id>18287612</id><snippet>test1</snippet></ROW><ROW><id>18287612</id><snippet>temp</snippet></ROW><ROW><id>18287612</id><snippet>temp = temp.__iadd__(object())
</snippet></ROW><ROW><id>18287612</id><snippet>self</snippet></ROW><ROW><id>18287612</id><snippet>temp</snippet></ROW><ROW><id>18287612</id><snippet>temp = temp</snippet></ROW><ROW><id>18287612</id><snippet>test2</snippet></ROW><ROW><id>18287612</id><snippet>a.descr += object() 
</snippet></ROW><ROW><id>18287612</id><snippet>a.descr = A.__dict__['descr'].__get__(a, A).__iadd__(object())
</snippet></ROW><ROW><id>18287612</id><snippet>A.__dict__['descr'].__get__(a, A)</snippet></ROW><ROW><id>18287612</id><snippet>a.descr</snippet></ROW><ROW><id>18287612</id><snippet>__set__()</snippet></ROW><ROW><id>18287612</id><snippet>proxy</snippet></ROW><ROW><id>18287612</id><snippet>a</snippet></ROW><ROW><id>18287612</id><snippet>a.descr.instance</snippet></ROW><ROW><id>18287612</id><snippet>a</snippet></ROW><ROW><id>18287612</id><snippet>a</snippet></ROW><ROW><id>18287612</id><snippet>__iadd__</snippet></ROW><ROW><id>18287612</id><snippet>__get__</snippet></ROW><ROW><id>18287612</id><snippet>__set__</snippet></ROW><ROW><id>18287752</id><snippet>&gt;&gt;&gt; a = np.array([(4, 'GE'), (1,'RE'), (1,'AE'), (4,'CD')],
                 dtype=[('x', 'i4'), ('y', 'S2')])
&gt;&gt;&gt; df = pd.DataFrame(a)
&gt;&gt;&gt; df.sort(['x', 'y'], ascending=[0,1])
   x   y
3  4  CD
0  4  GE
2  1  AE
1  1  RE
&gt;&gt;&gt; df.sort(['x', 'y'], ascending=[0,0])
   x   y
0  4  GE
3  4  CD
1  1  RE
2  1  AE
&gt;&gt;&gt; df.sort(['y', 'x'], ascending=[1,0])
   x   y
2  1  AE
3  4  CD
0  4  GE
1  1  RE
&gt;&gt;&gt; df.sort(['y', 'x'], ascending=[0,0])
   x   y
1  1  RE
0  4  GE
3  4  CD
2  1  AE
</snippet></ROW><ROW><id>18287868</id><snippet>import pandas as p

df = p.read_csv("All_Links.csv")

for i in df.index:
    try:
        url= df.ix[i]['MatchLink']
        #code process the data in the link
        #made sure that processing has finished
        df.iloc[i:].to_csv('All_links.csv', index=False)
</snippet></ROW><ROW><id>18287868</id><snippet>i</snippet></ROW><ROW><id>18287868</id><snippet>import pandas as p

df = p.read_csv("All_Links.csv")

i = 0
for i in df.index:
    try:
        url= df.ix[i]['MatchLink']
        #code process the data in the link
        #made sure that processing has finished
    except:
        # something broke, this row isn't processed decrease i
        i -= 1
        break

# Now write the rest of unprocessed lines to a csv file
df.iloc[i:].to_csv('All_links.csv', index=False)
</snippet></ROW><ROW><id>18287908</id><snippet>In [19]: import numpy as np
In [167]: x = np.array([164, 202, 164, 164, 164, 166], dtype=np.uint16)
</snippet></ROW><ROW><id>18287908</id><snippet>x</snippet></ROW><ROW><id>18287908</id><snippet>In [170]: abs(x-x.mean()) &gt; x.std()
Out[170]: array([False,  True, False, False, False, False], dtype=bool)
</snippet></ROW><ROW><id>18287908</id><snippet>In [171]: x[abs(x-x.mean()) &gt; x.std()]
Out[171]: array([202], dtype=uint16)
</snippet></ROW><ROW><id>18287908</id><snippet>In [172]: x[abs(x-x.mean()) &lt;= x.std()]
Out[172]: array([164, 164, 164, 164, 166], dtype=uint16)
</snippet></ROW><ROW><id>18287988</id><snippet>import collections

counts = collections.defaultdict(lambda: 0)
for fileid in corpus.fileids():
    for sentence in corpus.sents(fileid):
        cat = str(fileid.split('/')[0])
        s = " ".join(sentence)
        counts[cat] += len(re.findall('(:\)|:\(|:\s|:\D|:\o|:\@)+', s))
</snippet></ROW><ROW><id>18288181</id><snippet>total_lines = 0
matched_lines = 0
for line in open("filename"):
    total_lines += 1
    matched_lines += bool(re.search(r"\b[A-Z]{3}\b", line))
print "%f%%" % (float(matched_lines) / total_lines * 100)
</snippet></ROW><ROW><id>18288220</id><snippet>with</snippet></ROW><ROW><id>18288220</id><snippet>with</snippet></ROW><ROW><id>18288220</id><snippet>todayList</snippet></ROW><ROW><id>18288220</id><snippet>a</snippet></ROW><ROW><id>18288220</id><snippet>w</snippet></ROW><ROW><id>18288220</id><snippet>import datetime

def save(data):
    with open('journey.txt', 'a') as f:
        f.write(data + '\n')

today = datetime.date.today()
page = input('Page Number: ')
feel = input('How do you feel: ')

todaysline = ';'.join([today.strftime('%d, %b %Y'), page, feel])

print('Thanks and Good Bye!')
save(todaysline)

print('let\'s make a list now...')

with open('journey.txt','r') as f:
    for line in f:
        print(line.strip().split(';'))
</snippet></ROW><ROW><id>18288328</id><snippet>open</snippet></ROW><ROW><id>18288328</id><snippet>new_str</snippet></ROW><ROW><id>18288328</id><snippet>import re
test_f = open('test.txt')
result_f = open('result.txt', 'a')
for line in test_f:
    new_str = re.sub('[^a-zA-Z0-9\n\.]'," ", line)
    result_f.write(new_str)

# also, this too, please:
test_f.close()
result_f.close()
</snippet></ROW><ROW><id>18288328</id><snippet>with</snippet></ROW><ROW><id>18288328</id><snippet>import re
with open('test.txt') as test_f, open('result.txt', 'w') as result_f:
    for line in test_f:
        new_str = re.sub('[^a-zA-Z0-9\n\.]'," ", line)
        result_f.write(new_str)
</snippet></ROW><ROW><id>18288981</id><snippet>\n</snippet></ROW><ROW><id>18288981</id><snippet>print dm.text</snippet></ROW><ROW><id>18288981</id><snippet>&gt;&gt;&gt; text = u'&lt;?xml version="1.0" encoding="UTF-8"?&gt;\n     &lt;string&gt;R\xe9sum\xe9&lt;/string&gt;\n'
&gt;&gt;&gt; print text
&lt;?xml version="1.0" encoding="UTF-8"?&gt;
     &lt;string&gt;Résumé&lt;/string&gt;
</snippet></ROW><ROW><id>18288981</id><snippet>\x..</snippet></ROW><ROW><id>18288981</id><snippet>\u....</snippet></ROW><ROW><id>18288981</id><snippet>&gt;&gt;&gt; text.encode('utf8')
'&lt;?xml version="1.0" encoding="UTF-8"?&gt;\n     &lt;string&gt;R\xc3\xa9sum\xc3\xa9&lt;/string&gt;\n'
</snippet></ROW><ROW><id>18289279</id><snippet>np.nditer</snippet></ROW><ROW><id>18289279</id><snippet>it = np.nditer(a, flags=['multi_index'], order='F')
while not it.finished:
    print it.multi_index, it[0]
    it.iternext()
</snippet></ROW><ROW><id>18289279</id><snippet>np.nditer</snippet></ROW><ROW><id>18289298</id><snippet>i = 1
print('{0:2s} {1:15s} {2}'.format('#', 'Name', 'Number'))
for name, number in book.items():
    print('{0:&lt;2d} {1:15s} {2}'.format(i, name, number))
    i += 1
</snippet></ROW><ROW><id>18289298</id><snippet>#  Name            Number
1  Contact1        555
2  Contact2        777
</snippet></ROW><ROW><id>18289336</id><snippet>input</snippet></ROW><ROW><id>18289336</id><snippet>1</snippet></ROW><ROW><id>18289336</id><snippet>"1"</snippet></ROW><ROW><id>18289336</id><snippet>raw_input</snippet></ROW><ROW><id>18289336</id><snippet>input</snippet></ROW><ROW><id>18289336</id><snippet>raw_input</snippet></ROW><ROW><id>18289336</id><snippet>input</snippet></ROW><ROW><id>18289516</id><snippet>def throw_me(x):
    raise x
</snippet></ROW><ROW><id>18289516</id><snippet>def call_func(f):
    f()  # f could throw any exception
</snippet></ROW><ROW><id>18289516</id><snippet>from functools import wraps

class InvalidRaiseException(Exception):
    pass

def only_throws(E):
    def decorator(f):
        @wraps(f)
        def wrapped(*args, **kwargs):
            try:
                return f(*args, **kwargs)
            except E:
                raise
            except InvalidRaiseException:
                raise
            except Exception as e:
                raise InvalidRaiseException("got %s, expected %s, from %s" % (
                    e.__class__.__name__, E.__name__, f.__name__)
                )

        return wrapped
    return decorator
</snippet></ROW><ROW><id>18289516</id><snippet>@only_throws(ValueError)
def func(x):
    if x == 1:
        raise ValueError
    elif x == 2:
        raise Exception
</snippet></ROW><ROW><id>18289516</id><snippet>&gt;&gt;&gt; func(0)
&gt;&gt;&gt; func(1)
ValueError
&gt;&gt;&gt; func(2)
InvalidRaiseException: got Exception, expected ValueError, from func
</snippet></ROW><ROW><id>18289747</id><snippet>from other_module import Foo, FooTypeA, FooTypeB

bases = [Foo, FooTypeA, FooTypeB]

class MyMixin(object):
    pass

def factory(bases, mixins, name='MyClass'):
    return type(name, bases + mixins, {})

new_classes = [factory((c,), (MyMixin,)) for c in bases]
</snippet></ROW><ROW><id>18289840</id><snippet>print</snippet></ROW><ROW><id>18289840</id><snippet>format</snippet></ROW><ROW><id>18289840</id><snippet>&gt;&gt;&gt; print('{0:.8f}'.format(1.2))
1.20000000
</snippet></ROW><ROW><id>18289908</id><snippet>reify</snippet></ROW><ROW><id>18289908</id><snippet>class class_reify(object):
    def __init__(self, wrapped):
        self.wrapped = wrapped
        try:
            self.__doc__ = wrapped.__doc__
        except: # pragma: no cover
            pass

    # original sets the attributes on the instance
    # def __get__(self, inst, objtype=None):
    #    if inst is None:
    #        return self
    #    val = self.wrapped(inst)
    #    setattr(inst, self.wrapped.__name__, val)
    #    return val

    # ignore the instance, and just set them on the class
    # if called on a class, inst is None and objtype is the class
    # if called on an instance, inst is the instance, and objtype 
    # the class
    def __get__(self, inst, objtype=None):
        # ask the value from the wrapped object, giving it
        # our class
        val = self.wrapped(objtype)

        # and set the attribute directly to the class, thereby
        # avoiding the descriptor to be called multiple times
        setattr(objtype, self.wrapped.__name__, val)

        # and return the calculated value
        return val

class Test(object):
    @class_reify
    def foo(cls):
        print "foo called for class", cls
        return 42

print Test.foo
print Test.foo
</snippet></ROW><ROW><id>18289908</id><snippet>foo called for class &lt;class '__main__.Test'&gt;
42
42
</snippet></ROW><ROW><id>18290067</id><snippet>1366</snippet></ROW><ROW><id>18290067</id><snippet>1189</snippet></ROW><ROW><id>18290067</id><snippet>/</snippet></ROW><ROW><id>18290067</id><snippet>//</snippet></ROW><ROW><id>18290067</id><snippet>z = 2**1000
sum = 0
while z &gt; 0:
    x = int(z % 10)
    sum += x
    z //= 10
print(sum)
</snippet></ROW><ROW><id>18290067</id><snippet>from __future__ import division
</snippet></ROW><ROW><id>18290132</id><snippet>&lt;</snippet></ROW><ROW><id>18290132</id><snippet>&gt;</snippet></ROW><ROW><id>18290132</id><snippet>&gt;&gt;&gt; 'a' &lt; 'b'
True
&gt;&gt;&gt; 'a' &gt; 'b'
False

&gt;&gt;&gt; 'cat' &gt; 'banana'
True
&gt;&gt;&gt; 'cat' &lt; 'banana'
False
</snippet></ROW><ROW><id>18290132</id><snippet>&gt;&gt;&gt; 'A' &lt; 'a'
True
&gt;&gt;&gt; 'A' &gt; 'a'
False
</snippet></ROW><ROW><id>18290132</id><snippet>str.casefold</snippet></ROW><ROW><id>18290132</id><snippet>&gt;&gt;&gt; 'A'.casefold()
'a'
&gt;&gt;&gt; 'A'.casefold() == 'a'.casefold()
True
</snippet></ROW><ROW><id>18290143</id><snippet>df.values</snippet></ROW><ROW><id>18290143</id><snippet>ndarray</snippet></ROW><ROW><id>18290143</id><snippet>&gt;&gt;&gt; df
   x   y
0  4  GE
1  1  RE
2  1  AE
3  4  CD
&gt;&gt;&gt; df.values
array([[4, 'GE'],
       [1, 'RE'],
       [1, 'AE'],
       [4, 'CD']], dtype=object)
</snippet></ROW><ROW><id>18290143</id><snippet>&gt;&gt;&gt; df.values is df.values
False
</snippet></ROW><ROW><id>18290143</id><snippet>&gt;&gt;&gt; df1 = pd.DataFrame([[1, 2], [3, 4]])
&gt;&gt;&gt; df2 = pd.DataFrame(df1)
&gt;&gt;&gt; df2.iloc[0,0] = 42
&gt;&gt;&gt; df1
    0  1
0  42  2
1   3  4
</snippet></ROW><ROW><id>18290143</id><snippet>copy</snippet></ROW><ROW><id>18290143</id><snippet>&gt;&gt;&gt; df1 = pd.DataFrame([[1, 2], [3, 4]])
&gt;&gt;&gt; df2 = pd.DataFrame(df1, copy=True)
&gt;&gt;&gt; df2.iloc[0,0] = 42
&gt;&gt;&gt; df1
   0  1
0  1  2
1  3  4
</snippet></ROW><ROW><id>18290214</id><snippet>import win32com.client.dynamic
from pythoncom import CoInitialize, CoUninitialize

CoInitialize()
xlApp = win32com.client.dynamic.Dispatch('Excel.Application')
xlBook = xlApp.Workbooks.Open(filename)

def access_range(sheet, row1, col1, row2, col2):
    "return a 2d array (i.e. tuple of tuples)"
     sht = xlBook.Worksheets(sheet)
     return sht.Range(sht.Cells(row1, col1), sht.Cells(row2, col2))

def get_range(sheet, row1, col1, row2, col2):
    return access_range(sheet, row1, col1, row2, col2).Value


for column, data in enumerate(get_range(1, 1, 1, 10, 10)):
    for row, value in enumerate(data):
        if value == search_value:
            print "value found in column %s, row %s" % (chr(65+column), row+1)

CoUninitialize()
</snippet></ROW><ROW><id>18290226</id><snippet>a</snippet></ROW><ROW><id>18290226</id><snippet>eachsci.string</snippet></ROW><ROW><id>18290226</id><snippet>None</snippet></ROW><ROW><id>18290226</id><snippet>None</snippet></ROW><ROW><id>18290226</id><snippet>+</snippet></ROW><ROW><id>18290226</id><snippet>eachsci.string</snippet></ROW><ROW><id>18290226</id><snippet>eachsci.text</snippet></ROW><ROW><id>18290226</id><snippet>eachsci.text</snippet></ROW><ROW><id>18290226</id><snippet>''</snippet></ROW><ROW><id>18290226</id><snippet>a</snippet></ROW><ROW><id>18290226</id><snippet>a</snippet></ROW><ROW><id>18290226</id><snippet>href</snippet></ROW><ROW><id>18290226</id><snippet>KeyError</snippet></ROW><ROW><id>18290226</id><snippet>dict.get()</snippet></ROW><ROW><id>18290226</id><snippet>a</snippet></ROW><ROW><id>18290226</id><snippet>for</snippet></ROW><ROW><id>18290226</id><snippet>for eachsci in sci:
    print eachsci.get('href', '[no href found]') + "," + eachsci.text
</snippet></ROW><ROW><id>18290352</id><snippet>getValue</snippet></ROW><ROW><id>18290352</id><snippet>class Holding:
    def __init__(self, companyName, numShares, sharePrice):
        self.companyName = companyName
        self.numShares = numShares
        self.sharePrice = sharePrice
    def getValue(self):
        return self.numShares * self.sharePrice

portfolio = {'AMP':Holding('AMP', 1000, 2.5), 'ANZ':Holding('ANZ', 2000, 17.0), 'BHP':Holding('BHP', 500, 54.30)}

print portfolio['BHP'].sharePrice
# 54.3
print portfolio['AMP'].getValue()
# 2500.0
</snippet></ROW><ROW><id>18290448</id><snippet>book_id</snippet></ROW><ROW><id>18290448</id><snippet>book</snippet></ROW><ROW><id>18290448</id><snippet> form = NoteForm(initial={'book_id':book_id})
</snippet></ROW><ROW><id>18290478</id><snippet>def tj_recursive(g: Map[Int, List[Int]])= {
  val s = mutable.Buffer.empty[Int]
  val s_set = mutable.Set.empty[Int]
  val index = mutable.Map.empty[Int, Int]
  val lowlink = mutable.Map.empty[Int, Int]
  val ret = mutable.Buffer.empty[mutable.Buffer[Int]]

  def visit(v: Int): Unit = {
    index(v) = index.size
    lowlink(v) = index(v)
    s += v
    s_set += v

    for (w &lt;- g(v)) {
      if (!index.contains(w)) {
        visit(w)
        lowlink(v) = math.min(lowlink(w), lowlink(v))
      } else if (s_set(w)) {
        lowlink(v) = math.min(lowlink(v), index(w))
      }
    }

    if (lowlink(v) == index(v)) {
      val scc = mutable.Buffer.empty[Int]
      var w = -1

      while(v != w) {
        w = s.remove(s.size - 1)
        scc += w
        s_set -= w
      }

      ret += scc
    }
  }

  for (v &lt;- g.keys) if (!index.contains(v)) visit(v)
  ret
}
</snippet></ROW><ROW><id>18290478</id><snippet>tj_recursive(Map(
  1 -&gt; List(2),    2 -&gt; List(1, 5), 3 -&gt; List(4),
  4 -&gt; List(3, 5), 5 -&gt; List(6),    6 -&gt; List(7),
  7 -&gt; List(8),    8 -&gt; List(6, 9), 9 -&gt; Nil
))
</snippet></ROW><ROW><id>18290478</id><snippet>visit</snippet></ROW><ROW><id>18290478</id><snippet>Unit</snippet></ROW><ROW><id>18290478</id><snippet>Int</snippet></ROW><ROW><id>18290478</id><snippet>for</snippet></ROW><ROW><id>18290626</id><snippet>__init__.py</snippet></ROW><ROW><id>18290771</id><snippet>a</snippet></ROW><ROW><id>18290771</id><snippet>check</snippet></ROW><ROW><id>18290771</id><snippet>for item in a:
    check(item)
</snippet></ROW><ROW><id>18291246</id><snippet>ProductID</snippet></ROW><ROW><id>18291246</id><snippet>intiger</snippet></ROW><ROW><id>18291246</id><snippet>integer</snippet></ROW><ROW><id>18291289</id><snippet>zip()</snippet></ROW><ROW><id>18291289</id><snippet>output = list(zip(list1, list2, list3))
</snippet></ROW><ROW><id>18291289</id><snippet>for vehicle, driver, sponsor in zip(self.__vehicle, self.__name, self.__sponsor):
    # do something with the three columns.
</snippet></ROW><ROW><id>18291305</id><snippet>reduce()</snippet></ROW><ROW><id>18291738</id><snippet>list</snippet></ROW><ROW><id>18291738</id><snippet>Series</snippet></ROW><ROW><id>18291738</id><snippet># DON'T use `eval` in production I'm just using it for convenience here
In [7]: s = read_clipboard(sep=r'\s{2,}', index_col=0, header=None, squeeze=1).map(eval)

In [8]: s
Out[8]:
0
$10        [1, 0, 1, 1, 1, 1, 1]
$100                   [0, 0, 0]
$15                          [1]
$19                       [0, 0]
$1?                       [1, 1]
$20                    [0, 1, 1]
$20-$40                      [0]

In [20]: n = 3

In [21]: s.map(len) &gt;= n
Out[21]:
0
$10         True
$100        True
$15        False
$19        False
$1?        False
$20         True
$20-$40    False
Name: 1, dtype: bool

In [22]: s[s.map(len) &gt;= n]
Out[22]:
0
$10     [1, 0, 1, 1, 1, 1, 1]
$100                [0, 0, 0]
$20                 [0, 1, 1]
Name: 1, dtype: object
</snippet></ROW><ROW><id>18291738</id><snippet>list</snippet></ROW><ROW><id>18291738</id><snippet>Series</snippet></ROW><ROW><id>18291738</id><snippet>object</snippet></ROW><ROW><id>18291738</id><snippet>Series</snippet></ROW><ROW><id>18291738</id><snippet>numpy</snippet></ROW><ROW><id>18291783</id><snippet>open</snippet></ROW><ROW><id>18291783</id><snippet>for line in log:
    print(line)
</snippet></ROW><ROW><id>18291783</id><snippet>print(log.read())</snippet></ROW><ROW><id>18291834</id><snippet>use_macro = ("{% from 'macro' import some_macro with context %}"
             "{{ some_macro() }}")
</snippet></ROW><ROW><id>18292042</id><snippet>execute</snippet></ROW><ROW><id>18292042</id><snippet>&gt;&gt;&gt; cur.execute(
...     """INSERT INTO some_table (an_int, a_date, a_string)
...         VALUES (%s, %s, %s);""",
...     (10, datetime.date(2005, 11, 18), "O'Reilly"))
</snippet></ROW><ROW><id>18292042</id><snippet>psycopg2</snippet></ROW><ROW><id>18292080</id><snippet>import sys

def palindrome(limit):
    for i in range(limit):
        istring = str(i*i)
        if istring == istring[::-1]:
            print(istring,end=" ")
    print()

palindrome(int(sys.argv[1]))
</snippet></ROW><ROW><id>18292080</id><snippet>pu@pumbair: ~/Projects/Stackexchange  time python3 palin1.py 100000
121 484 676 10201 12321 14641 40804 44944 69696 94249 698896 1002001 1234321 
4008004 5221225 6948496 100020001 102030201 104060401 121242121 123454321 125686521
400080004 404090404 522808225 617323716 942060249

real    0m0.457s
user    0m0.437s
sys     0m0.012s
</snippet></ROW><ROW><id>18292080</id><snippet>pu@pumbair: ~/Projects/Stackexchange  time python3 palin2.py 100000
0 1 4 9 
121 484 676 10201 12321 14641 40804 44944 69696 94249 698896 1002001 1234321 
4008004 5221225 6948496 100020001 102030201 104060401 121242121 123454321 125686521
400080004 404090404 522808225 617323716 942060249

real    0m0.122s
user    0m0.104s
sys     0m0.010s
</snippet></ROW><ROW><id>18292310</id><snippet>v</snippet></ROW><ROW><id>18292310</id><snippet>u</snippet></ROW><ROW><id>18292310</id><snippet>u</snippet></ROW><ROW><id>18292310</id><snippet>vertex_spacing</snippet></ROW><ROW><id>18292310</id><snippet>v</snippet></ROW><ROW><id>18292310</id><snippet>[1, 2, 10, 15, 18, 20, 21]</snippet></ROW><ROW><id>18292310</id><snippet>vertex_spacing = 5</snippet></ROW><ROW><id>18292310</id><snippet>vertex_spacing = 25</snippet></ROW><ROW><id>18292310</id><snippet>(x, y)</snippet></ROW><ROW><id>18292310</id><snippet>vertex_spacing = v</snippet></ROW><ROW><id>18292310</id><snippet>([x-v, x+v], [y-v, y+v])</snippet></ROW><ROW><id>18292310</id><snippet>(1, 0)</snippet></ROW><ROW><id>18292310</id><snippet>(2, 10)</snippet></ROW><ROW><id>18292310</id><snippet>vertex_space</snippet></ROW><ROW><id>18292416</id><snippet>#the ThemeFactory class instantiates a Theme with a particular name if not present within it's cache
class ThemeFactory(object) :

     def __init__(self):
         self.__theme_variables_cache = {}

     def createTheme(self, theme_name):
         if not self.__theme_variables_cache.contains(name):
              theme = Theme(theme_name)
              self.__theme_variables_cache[name] = theme.load_theme_variables()
          return self.__theme_variables_cache[name]
</snippet></ROW><ROW><id>18292416</id><snippet>class Theme(object):

    def __init__(self, name):
        self.__theme_name = name

    def load_theme_variables(self):
        #contain the logic for loading theme variables from theme files
</snippet></ROW><ROW><id>18292416</id><snippet>load_theme_variables(self)</snippet></ROW><ROW><id>18292416</id><snippet>def load_theme_variables(self):
   #let the theme variables be stored in an instance variable __theme_variable
   if not self.__theme_variables is None:
       return self.__theme_variables
    #__read_theme_file is a private function that reads the theme files
   self__theme_variables = self.__read_theme_file(self.__theme_name)
</snippet></ROW><ROW><id>18292518</id><snippet>logging.INFO</snippet></ROW><ROW><id>18292518</id><snippet>logging.info</snippet></ROW><ROW><id>18292518</id><snippet>logging.info("test")
</snippet></ROW><ROW><id>18292638</id><snippet>ani = QPropertyAnimation(self,"color")
</snippet></ROW><ROW><id>18292638</id><snippet>self.ani = QPropertyAnimation(self, "color")
# etc
</snippet></ROW><ROW><id>18292680</id><snippet>browser()</snippet></ROW><ROW><id>18292680</id><snippet>debugger()</snippet></ROW><ROW><id>18292680</id><snippet>recover()</snippet></ROW><ROW><id>18292680</id><snippet>source("myscript.R")</snippet></ROW><ROW><id>18292717</id><snippet>and</snippet></ROW><ROW><id>18292717</id><snippet>or</snippet></ROW><ROW><id>18292717</id><snippet>2 and 2*3</snippet></ROW><ROW><id>18292717</id><snippet>bool(2)</snippet></ROW><ROW><id>18292717</id><snippet>True</snippet></ROW><ROW><id>18292717</id><snippet>bool(2*3)</snippet></ROW><ROW><id>18292717</id><snippet>True</snippet></ROW><ROW><id>18292717</id><snippet>2*3</snippet></ROW><ROW><id>18292717</id><snippet>6</snippet></ROW><ROW><id>18292781</id><snippet>trt = ['4' if word == '5' else word for word in trt]
</snippet></ROW><ROW><id>18292781</id><snippet>replacements = {
    '5': '4',
    'a': 'b',
}
trt = [replacements.get(word, word) for word in trt]
</snippet></ROW><ROW><id>18292781</id><snippet>get</snippet></ROW><ROW><id>18292781</id><snippet>word</snippet></ROW><ROW><id>18292781</id><snippet>replacements</snippet></ROW><ROW><id>18292781</id><snippet>word</snippet></ROW><ROW><id>18292783</id><snippet>for checkActor in tree.xpath('//ns:Actor', namespaces=namespaces):
    checkActor.getparent().remove(checkActor)

print etree.tostring(tree, pretty_print=True, xml_declaration=True)
</snippet></ROW><ROW><id>18292783</id><snippet>&lt;?xml version='1.0' encoding='ASCII'?&gt;
&lt;Metadata xmlns="http://www.amazon.com/UnboxMetadata/v1"&gt;
&lt;Movie&gt;
        &lt;CountryOfOrigin&gt;US&lt;/CountryOfOrigin&gt;
        &lt;TitleInfo&gt;
                &lt;Title locale="en-GB"&gt;The Title&lt;/Title&gt;
                &lt;/TitleInfo&gt;    
&lt;/Movie&gt;
&lt;/Metadata&gt;
</snippet></ROW><ROW><id>18292833</id><snippet>__contains</snippet></ROW><ROW><id>18292833</id><snippet>__exact</snippet></ROW><ROW><id>18292833</id><snippet>__icontains</snippet></ROW><ROW><id>18292833</id><snippet>__iexact</snippet></ROW><ROW><id>18292833</id><snippet>Q</snippet></ROW><ROW><id>18292833</id><snippet>options = ['X1', 'X2', 'X3']
qs = [Q(attribute_name=option) for option in options] #or attribute_name__icontains - or whatever

query = qs.pop() #get the first element

for q in qs:
    query |= q

qs = MyModel.objects.filter(query)
</snippet></ROW><ROW><id>18293040</id><snippet>from StringIO import StringIO

def process(fd):
    print fd.read()

contents = 'The quick brown file'

buffer = StringIO()
buffer.write(contents)
buffer.seek(0)

process(buffer)  # prints "The quick brown file"
</snippet></ROW><ROW><id>18293040</id><snippet>from io import StringIO</snippet></ROW><ROW><id>18293040</id><snippet>from StringIO import StringIO</snippet></ROW><ROW><id>18293216</id><snippet>.bytes</snippet></ROW><ROW><id>18293216</id><snippet>BitVector</snippet></ROW><ROW><id>18293216</id><snippet>str</snippet></ROW><ROW><id>18293216</id><snippet>str</snippet></ROW><ROW><id>18293221</id><snippet>def edit_article(request):
    article = Article.get(...)
    form = MyForm(request.POST, article)
</snippet></ROW><ROW><id>18293221</id><snippet>def edit_article(request):
    article = Article.get(...)
    data = request.POST or {}
    data.setdefault('fieldname','default value')
    form = MyForm(data, article)
</snippet></ROW><ROW><id>18293278</id><snippet>cast_unique</snippet></ROW><ROW><id>18293278</id><snippet>cast_unique</snippet></ROW><ROW><id>18293278</id><snippet>if person.people not in [p.people for p in cast_unique]:</snippet></ROW><ROW><id>18293278</id><snippet>cast_unique = {}
for person in cast:
    if person.people not in cast_unique:
        cast_unique[person.people] = person
    else:
        cast_unique[person.people].role_title = '{0} / {1}'.format(cast_unique[person.people].role_title, person.role_title)
</snippet></ROW><ROW><id>18293385</id><snippet>while i &lt;= 32</snippet></ROW><ROW><id>18293385</id><snippet>filename = "C:\\Documents and Settings\\file%d.txt" % i</snippet></ROW><ROW><id>18293385</id><snippet>%.2d</snippet></ROW><ROW><id>18293507</id><snippet>setOpenExternalLinks(True)</snippet></ROW><ROW><id>18293507</id><snippet>for label in wizard.findChildren(QLabel):
    label.setOpenExternalLinks(True)
</snippet></ROW><ROW><id>18293683</id><snippet>regionData</snippet></ROW><ROW><id>18293683</id><snippet>self.worldmap = {(x,y): self.regionData.copy() for x in range(self.mapSize) for y in range (self.mapSize)}
</snippet></ROW><ROW><id>18293683</id><snippet>dict.copy()</snippet></ROW><ROW><id>18293683</id><snippet>Generate_Game_World.regionData</snippet></ROW><ROW><id>18293683</id><snippet>self.regionData</snippet></ROW><ROW><id>18293683</id><snippet>self.worldmap = {(x,y): {"Region_Type" : "None", "Region_Level" : 0} 
                 for x in range(self.mapSize) for y in range (self.mapSize)}
</snippet></ROW><ROW><id>18293683</id><snippet>None</snippet></ROW><ROW><id>18293683</id><snippet>"None"</snippet></ROW><ROW><id>18293737</id><snippet>argparse</snippet></ROW><ROW><id>18293737</id><snippet>add_argument</snippet></ROW><ROW><id>18293737</id><snippet>try/except</snippet></ROW><ROW><id>18293737</id><snippet>import io
import csv
import argparse

def main():
    # Create the parser
    parser = argparse.ArgumentParser()
    parser.add_argument('filename', help='Name of the file you want to load')
    args = parser.parse_args()

    result = []
    with io.open(args.filename, 'r', encoding='utf-8') as f:
        reader = csv.reader(f)
        for row in reader:
            result.append([row[0], row[1]])

    for item in result:
        print('{0}, {1}'.format(*item))

if __name__ == "__main__":
    try:
        main()
    except Exception as e:
        print('Something went wrong {0}'.format(e))
</snippet></ROW><ROW><id>18293810</id><snippet>15</snippet></ROW><ROW><id>18293810</id><snippet>dictionary = {'word': 2, 'other': 5, 'string': 10}
words = "this is a string of words you see and other things"

counter = 0
for word in words.split():
    if word in dictionary:
        counter += dictionary[word]
print counter
</snippet></ROW><ROW><id>18293810</id><snippet>counter=0</snippet></ROW><ROW><id>18293810</id><snippet>word in dictionary</snippet></ROW><ROW><id>18293810</id><snippet>word in dictionary.keys()</snippet></ROW><ROW><id>18293810</id><snippet>sum()</snippet></ROW><ROW><id>18293810</id><snippet>print sum(dictionary[word] for word in words.split() if word in dictionary)
</snippet></ROW><ROW><id>18293810</id><snippet>print sum(dictionary.get(word, 0) for word in words.split())
</snippet></ROW><ROW><id>18293828</id><snippet>disown</snippet></ROW><ROW><id>18293828</id><snippet>$ { python the_app.py &amp; } &amp;&amp; disown
</snippet></ROW><ROW><id>18293828</id><snippet>/dev/null</snippet></ROW><ROW><id>18293828</id><snippet>$ { python the_app.py &gt;/dev/null 2&gt;&amp;1 &amp; } &amp;&amp; disown
</snippet></ROW><ROW><id>18293828</id><snippet>/dev/null</snippet></ROW><ROW><id>18293828</id><snippet>/dev/null</snippet></ROW><ROW><id>18293828</id><snippet>$ { python the_app.py &gt;not_a_black_hole.txt 2&gt;&amp;1 &amp; } &amp;&amp; disown
</snippet></ROW><ROW><id>18293876</id><snippet>a</snippet></ROW><ROW><id>18293876</id><snippet>b</snippet></ROW><ROW><id>18293876</id><snippet>a * b</snippet></ROW><ROW><id>18293876</id><snippet>dot</snippet></ROW><ROW><id>18293876</id><snippet>a = [[1, 2, 3],
     [1, 2, 3],
     [1, 2, 3]]

b = [[4, 4, 4],
     [5, 5, 5],
     [6, 6, 6]]
</snippet></ROW><ROW><id>18293876</id><snippet>[[ 4,  8, 12],
 [ 5, 10, 15],
 [ 6, 12, 18]]
</snippet></ROW><ROW><id>18293876</id><snippet>.dot</snippet></ROW><ROW><id>18293923</id><snippet>MyWindow</snippet></ROW><ROW><id>18293923</id><snippet>class MyWindow(QtGui.QMainWindow):
    def __init__(self, parent=None):
        super(MyWindow, self).__init__(parent)
        self.setWindowFlags(QtCore.Qt.FramelessWindowHint | QtCore.Qt.WindowStaysOnTopHint)
        self.setWindowOpacity(.9)
        text_widget = text(self)
        self.setCentralWidget(text_widget)
        self.setStyleSheet("QMainWindow { background: 'black'}");
</snippet></ROW><ROW><id>18293923</id><snippet>QMainWindow</snippet></ROW><ROW><id>18293923</id><snippet>class MyWindow(QtGui.QMainWindow):
    def __init__(self, parent=None):
        super(MyWindow, self).__init__(parent)
        self.setWindowFlags(QtCore.Qt.FramelessWindowHint | QtCore.Qt.WindowStaysOnTopHint)
        self.setWindowOpacity(.9)
        text_widget = text(self)
        self.setCentralWidget(text_widget)
        self.setStyleSheet("QMainWindow { background: 'black'}");

class text(QtGui.QWidget):
    def __init__(self, parent=None):
        super(text, self).__init__(parent)
        self.label1 = QtGui.QLabel('Welcome', self)
        self.label1.move(100, 10)
        self.label1.setStyleSheet("QLabel { color : red; font-size: 28px; }")
</snippet></ROW><ROW><id>18293982</id><snippet>dateutils</snippet></ROW><ROW><id>18293982</id><snippet>&gt;&gt;&gt; import calendar
&gt;&gt;&gt; from dateutil.parser import parse
&gt;&gt;&gt; d = parse('10/Jun/2005:05:59:05 -0500', fuzzy=True)
</snippet></ROW><ROW><id>18293982</id><snippet>&gt;&gt;&gt; d
datetime.datetime(2005, 6, 10, 5, 59, 5, tzinfo=tzoffset(None, -18000))
</snippet></ROW><ROW><id>18293982</id><snippet>&gt;&gt;&gt; ts = calendar.timegm(d.utctimetuple())
&gt;&gt;&gt; print ts
1118401145
</snippet></ROW><ROW><id>18294168</id><snippet>\.</snippet></ROW><ROW><id>18294168</id><snippet>\\.</snippet></ROW><ROW><id>18294168</id><snippet>r</snippet></ROW><ROW><id>18294168</id><snippet>\</snippet></ROW><ROW><id>18294168</id><snippet>re</snippet></ROW><ROW><id>18294168</id><snippet>\b</snippet></ROW><ROW><id>18294168</id><snippet>\\.</snippet></ROW><ROW><id>18294168</id><snippet>\</snippet></ROW><ROW><id>18294168</id><snippet>\.</snippet></ROW><ROW><id>18294168</id><snippet>.</snippet></ROW><ROW><id>18294173</id><snippet>evens</snippet></ROW><ROW><id>18294173</id><snippet>data</snippet></ROW><ROW><id>18294173</id><snippet>data</snippet></ROW><ROW><id>18294173</id><snippet>evens</snippet></ROW><ROW><id>18294173</id><snippet>evens</snippet></ROW><ROW><id>18294173</id><snippet>data</snippet></ROW><ROW><id>18294173</id><snippet>property</snippet></ROW><ROW><id>18294173</id><snippet>class Test:
    def __init__(self):
        self.data = []

    @property
    def evens(self):
        return (i for i in self.data if i % 2 == 0)
</snippet></ROW><ROW><id>18294173</id><snippet>&gt;&gt;&gt; t = Test()
&gt;&gt;&gt; t.data = [1, 2, 3, 4, 5, 6]
&gt;&gt;&gt; list(t.evens)
[2, 4, 6]
&gt;&gt;&gt; list(t.evens) # works more than once
[2, 4, 5]
&gt;&gt;&gt; t.data = [10, 15, 20, 25, 30]
&gt;&gt;&gt; list(t.evens)
[10, 20, 30]
</snippet></ROW><ROW><id>18294173</id><snippet>yield</snippet></ROW><ROW><id>18294280</id><snippet>NOT IN</snippet></ROW><ROW><id>18294280</id><snippet>do_not_select = [1, 2, 3]

cursor.execute("""SELECT * FROM table_a
                    WHERE id NOT IN ({}, {}, {})""".format(do_not_select[0],
                                                           do_not_select[1],
                                                           do_not_select[2]))
data.cursor.fetchall()
</snippet></ROW><ROW><id>18294280</id><snippet>do_not_select = (1, 2, 3)
cursor.execute("""SELECT * FROM table_a
                    WHERE id NOT IN {}""".format(do_not_select))
data.cursor.fetchall()
</snippet></ROW><ROW><id>18294295</id><snippet>print(a*1000)
print(str(a)+"000")
print(a,"000",sep="")
</snippet></ROW><ROW><id>18294341</id><snippet>map(np.correlate, i, j)
</snippet></ROW><ROW><id>18294341</id><snippet>&gt;&gt;&gt; i = np.random.random((3,2))
&gt;&gt;&gt; j = np.random.random((3,2))
&gt;&gt;&gt; i
array([[ 0.19553363,  0.88041704],
       [ 0.15929013,  0.95699672],
       [ 0.83473442,  0.9943525 ]])
&gt;&gt;&gt; j
array([[ 0.25712069,  0.37596445],
       [ 0.35283409,  0.73069007],
       [ 0.48959406,  0.17451211]])
&gt;&gt;&gt; map(np.correlate, i, j)
[array([ 0.38128125]),
 array([ 0.75547099]),
 array([ 0.58220756])]
</snippet></ROW><ROW><id>18294348</id><snippet>with open("filename.ext) as f:
    for line in f:
        print(line.upper())
</snippet></ROW><ROW><id>18294523</id><snippet>x1</snippet></ROW><ROW><id>18294523</id><snippet>callback1</snippet></ROW><ROW><id>18294523</id><snippet>global x1
del x1
</snippet></ROW><ROW><id>18294523</id><snippet>text = x1</snippet></ROW><ROW><id>18294523</id><snippet>x1</snippet></ROW><ROW><id>18294523</id><snippet>text</snippet></ROW><ROW><id>18294523</id><snippet>Label</snippet></ROW><ROW><id>18294523</id><snippet>x1</snippet></ROW><ROW><id>18294523</id><snippet>object</snippet></ROW><ROW><id>18294523</id><snippet>widget</snippet></ROW><ROW><id>18294523</id><snippet>object</snippet></ROW><ROW><id>18294523</id><snippet>build</snippet></ROW><ROW><id>18294715</id><snippet>BeautifulSoup</snippet></ROW><ROW><id>18294715</id><snippet>&gt;&gt;&gt; from bs4 import BeautifulSoup as BS
&gt;&gt;&gt; html = """This is some text
... &lt;img src="asdasdasd"&gt;
... &lt;i&gt; More HTML &lt;b&gt; foo &lt;/b&gt; bar &lt;/i&gt;
... """
&gt;&gt;&gt; soup = BS(html)
&gt;&gt;&gt; for imgtag in soup.find_all('img'):
...     print(imgtag['src'])
... 
asdasdasd
</snippet></ROW><ROW><id>18294715</id><snippet>text</snippet></ROW><ROW><id>18294715</id><snippet>matches</snippet></ROW><ROW><id>18294715</id><snippet>join</snippet></ROW><ROW><id>18294715</id><snippet>''</snippet></ROW><ROW><id>18294715</id><snippet>matches</snippet></ROW><ROW><id>18294715</id><snippet>findall</snippet></ROW><ROW><id>18294715</id><snippet>import re
with open('site.html') as html:
    content = html.read()
    matches = re.findall(r'\ssrc="([^"]+)"', text)
    matches = ' '.join(matches)

print(matches)
</snippet></ROW><ROW><id>18294715</id><snippet>with</snippet></ROW><ROW><id>18294715</id><snippet>file.close()</snippet></ROW><ROW><id>18294715</id><snippet>with</snippet></ROW><ROW><id>18294796</id><snippet>global</snippet></ROW><ROW><id>18294796</id><snippet>global</snippet></ROW><ROW><id>18294796</id><snippet>global</snippet></ROW><ROW><id>18294796</id><snippet>main</snippet></ROW><ROW><id>18294796</id><snippet>count</snippet></ROW><ROW><id>18294796</id><snippet>myDict</snippet></ROW><ROW><id>18294796</id><snippet>main</snippet></ROW><ROW><id>18294832</id><snippet>tree = et.parse( ... )

# Unique match
results = []
for anime in tree.findall('anime'):
    for title in anime.findall('title'):
        if title.text == '3x3 Eyes':
            results.append(anime.get('aid'))
print results

# Everything that starts with
results = []
for anime in tree.findall('anime'):
    for title in anime.findall('title'):
        if title.text.startswith('3x3 Eyes'):
            results.append(anime.get('aid'))
print results
</snippet></ROW><ROW><id>18294832</id><snippet>[2]</snippet></ROW><ROW><id>18294832</id><snippet>[2, 3]</snippet></ROW><ROW><id>18294832</id><snippet>results = [anime.get('aid') for anime in tree.findall('anime')
           for title in anime.findall('title') if title.text == '3x3 Eyes']
</snippet></ROW><ROW><id>18294853</id><snippet>def import_1(self, control_Queue, thread_Number):
    print ("Import_1 number %d started") % thread_Number
    myinstance = test_imports()
    t = Thread(target=myinstance.halt_listener, args=(control_Queue, 'import_1', 't1kill'))
</snippet></ROW><ROW><id>18294930</id><snippet>find_all()</snippet></ROW><ROW><id>18294930</id><snippet>&gt;&gt;&gt; valueNeeded = soup.find_all('td', attrs={'class':'same_class_name'})
&gt;&gt;&gt; for tag in valueNeeded:
...     print tag.text.strip()
... 
Value Needed A
Value Needed B
Value Needed C
</snippet></ROW><ROW><id>18294930</id><snippet>soup.body</snippet></ROW><ROW><id>18294930</id><snippet>None</snippet></ROW><ROW><id>18294930</id><snippet>findAll()</snippet></ROW><ROW><id>18295041</id><snippet>for i in lst_select:
  lbox.get(i)
  UsrFCList.append(i)
</snippet></ROW><ROW><id>18295041</id><snippet>for i in lst_select:
    UsrFCList.append(lbox.get(i))
</snippet></ROW><ROW><id>18295149</id><snippet>array</snippet></ROW><ROW><id>18295149</id><snippet>latin1</snippet></ROW><ROW><id>18295149</id><snippet>cp1252</snippet></ROW><ROW><id>18295149</id><snippet>cp1255</snippet></ROW><ROW><id>18295149</id><snippet>array1</snippet></ROW><ROW><id>18295149</id><snippet># coding: utf8
array  = u'àáâãäåæçèéêëìíîïðñóôõöøùúûüýþÿ'
array1 = u'אבגדהוזחטיךכלםמןנסעףפץצקרשת'
print(array)
print(array1)
print(array.encode('cp1252').decode('cp1255',errors='replace'))
</snippet></ROW><ROW><id>18295149</id><snippet>cp1255</snippet></ROW><ROW><id>18295149</id><snippet>àáâãäåæçèéêëìíîïðñóôõöøùúûüýþÿ
אבגדהוזחטיךכלםמןנסעףפץצקרשת
אבגדהוזחטיךכלםמןנסףפץצרשת��‎‏�
</snippet></ROW><ROW><id>18295149</id><snippet>cp1255</snippet></ROW><ROW><id>18295240</id><snippet>random.shuffle</snippet></ROW><ROW><id>18295240</id><snippet>zip</snippet></ROW><ROW><id>18295240</id><snippet>zip</snippet></ROW><ROW><id>18295240</id><snippet>itertools.chain.from_iterable</snippet></ROW><ROW><id>18295240</id><snippet>import itertools
import random

def make_lists(input_list):
    categories = [input_list[i:i+56] for i in range(0, 448, 56)] # 8 lists of 56
    for c in categories:
        random.shuffle(c)
    selections = zip(*categories) # 56 tuples of 8
    it = iter(selections)
    by_four = zip(it, it, it, it) # 14 tuples of 4 tuples of 8
    results = [list(itertools.chain.from_iterable(lst)) for lst in by_four]
    return results
</snippet></ROW><ROW><id>18295240</id><snippet>&gt;&gt;&gt; for lst in make_lists(list(range(448))):
    print(lst)

[47, 104, 114, 197, 269, 297, 368, 422, 23, 60, 128, 184, 242, 334, 375, 407, 6, 110, 160, 198, 244, 320, 383, 430, 27, 78, 153, 202, 272, 322, 376, 436]
[55, 67, 167, 211, 232, 284, 363, 420, 48, 73, 136, 190, 259, 332, 351, 440, 44, 64, 142, 180, 263, 294, 361, 419, 15, 83, 157, 207, 255, 280, 350, 398]
[12, 102, 124, 199, 252, 314, 341, 432, 53, 89, 147, 170, 265, 329, 369, 409, 36, 56, 155, 206, 241, 290, 366, 441, 5, 94, 140, 223, 262, 321, 388, 394]
[1, 81, 129, 203, 227, 319, 382, 421, 43, 57, 120, 173, 233, 292, 337, 428, 8, 58, 143, 196, 267, 301, 356, 403, 34, 101, 151, 194, 230, 300, 352, 435]
[11, 74, 112, 174, 250, 316, 391, 418, 38, 72, 132, 172, 261, 310, 338, 429, 13, 66, 144, 188, 275, 299, 347, 446, 31, 71, 119, 189, 248, 304, 367, 413]
[18, 109, 123, 208, 246, 323, 355, 416, 30, 85, 126, 192, 279, 303, 378, 406, 0, 103, 149, 179, 236, 333, 357, 408, 39, 75, 139, 187, 277, 285, 339, 400]
[9, 62, 121, 193, 271, 335, 385, 412, 19, 86, 116, 217, 264, 315, 380, 411, 42, 105, 154, 222, 256, 293, 387, 439, 29, 97, 130, 212, 273, 311, 348, 417]
[35, 90, 148, 186, 231, 331, 359, 433, 45, 76, 158, 182, 253, 317, 379, 405, 46, 106, 125, 218, 237, 325, 381, 444, 40, 84, 156, 205, 251, 283, 346, 397]
[17, 95, 159, 185, 268, 281, 353, 393, 54, 61, 134, 215, 258, 318, 342, 424, 22, 100, 135, 220, 254, 306, 365, 442, 41, 91, 137, 210, 257, 288, 370, 426]
[14, 68, 141, 177, 226, 330, 374, 415, 51, 87, 113, 216, 240, 287, 354, 437, 49, 96, 115, 200, 243, 313, 336, 404, 24, 92, 131, 214, 238, 296, 386, 447]
[32, 82, 162, 219, 274, 326, 358, 396, 7, 88, 118, 176, 224, 289, 384, 402, 16, 111, 122, 213, 234, 308, 340, 425, 10, 108, 164, 183, 225, 295, 373, 410]
[20, 77, 127, 195, 266, 312, 372, 392, 33, 70, 133, 168, 276, 328, 360, 427, 26, 99, 161, 209, 278, 291, 390, 401, 21, 80, 166, 181, 235, 298, 345, 399]
[52, 107, 117, 201, 270, 302, 377, 395, 37, 93, 150, 175, 228, 282, 344, 434, 25, 69, 163, 221, 239, 305, 343, 445, 3, 59, 152, 178, 247, 309, 364, 414]
[50, 65, 138, 171, 260, 324, 371, 443, 2, 63, 146, 191, 245, 286, 389, 438, 4, 98, 145, 204, 249, 307, 362, 431, 28, 79, 165, 169, 229, 327, 349, 423]
</snippet></ROW><ROW><id>18295240</id><snippet>zip(it, it, it, it)</snippet></ROW><ROW><id>18295240</id><snippet>zip</snippet></ROW><ROW><id>18295240</id><snippet>it</snippet></ROW><ROW><id>18295240</id><snippet>key</snippet></ROW><ROW><id>18295288</id><snippet>import re


def main():
  caselines_index = []
  results = []
  cases = []
  nvp_add_searchterm = "nvp_add\(.+?\)"
  searchterm = "(\$.+?)[\,\)]"
  readlines = []

  with open("file.txt", 'r') as file:
    readfile = file.read()
    for line in readfile.split('\n'):
      readlines.append(line.strip())
    for line in readlines:
      if 'case "' in line:
        caselines_index.append(readlines.index(line))
    print caselines_index
    a = 0
    for line_index in caselines_index:
      int_line_index = int(line_index)
      index_of_line_index = caselines_index.index(line_index)
      case_text = ' '.join(readlines[int_line_index:caselines_index[index_of_line_index + 1]]).strip()
      case = [readlines[int_line_index].strip(), case_text]
      cases.append(case)
  with open("result.txt", 'w+') as result_file:
    for case_list in cases:
      caseline = case_list[0].strip()
      result_file.write(caseline + "\n")
      nvp = re.findall(nvp_add_searchterm, case_list[1].strip())

      for item in nvp:
        result_list = re.findall(searchterm, item)

        for result in result_list:
          if "$*" not in result:
            result_file.write(result + "\n")

if __name__=="__main__":
  main()
</snippet></ROW><ROW><id>18295349</id><snippet>pandas</snippet></ROW><ROW><id>18295349</id><snippet>pandas.pyc</snippet></ROW><ROW><id>18295349</id><snippet>import pandas</snippet></ROW><ROW><id>18295478</id><snippet>import PIL
from PIL import ImageFont
from PIL import Image
from PIL import ImageDraw

img=Image.open("pathToImage")

font = ImageFont.truetype("pathToFont",10)

draw = ImageDraw.Draw(img)
draw.text((0, 0),"This is a test",(255,255,0),font=font)
draw = ImageDraw.Draw(img)
draw = ImageDraw.Draw(img)
img.save("a_test.png")
</snippet></ROW><ROW><id>18295650</id><snippet>import os

with open(os.devnull, 'w') as null:
    subprocess.Popen(['7z', 'e', input_file, '-o', output_dest, '-y'], stdout=null, stderr=null)
</snippet></ROW><ROW><id>18295877</id><snippet>http://catb.org</snippet></ROW><ROW><id>18295877</id><snippet>http://www.catb.org</snippet></ROW><ROW><id>18295877</id><snippet>www.</snippet></ROW><ROW><id>18295914</id><snippet>th</snippet></ROW><ROW><id>18295914</id><snippet>td</snippet></ROW><ROW><id>18295914</id><snippet>from bs4 import BeautifulSoup
from urllib.request import urlopen

u = urlopen("http://www.nhl.com/ice/teamstats.htm")
soup = BeautifulSoup(u)
u.close()

for table in soup.find_all('table', class_='data stats'):
    row = table.find('tr')
    header = []
    for cell in row.find_all('th')[1:]:
        name = cell.string.strip()
        header.append(name)
    for row in table.find_all('tr')[1:]:
        for name, cell in zip(header, row.find_all('td')[1:]):
            value = cell.string.strip()
            print('{}: {}'.format(name, value), end=', ')
        print()
</snippet></ROW><ROW><id>18296026</id><snippet>class Person:
</snippet></ROW><ROW><id>18296026</id><snippet>class Person:
    def __init__(self):
</snippet></ROW><ROW><id>18296026</id><snippet>class Person:

    def __init__(self, first_name, last_name, phone_number):
        self.first_name = first_name
        self.last_name = last_name
        self.phone_number = phone_number
</snippet></ROW><ROW><id>18296026</id><snippet>__init__</snippet></ROW><ROW><id>18296026</id><snippet>Person</snippet></ROW><ROW><id>18296026</id><snippet>bob = Person('Bob', 'Something', '43819110')
</snippet></ROW><ROW><id>18296026</id><snippet>&gt;&gt;&gt; bob.phone_number
'43819110'
</snippet></ROW><ROW><id>18296026</id><snippet>input()</snippet></ROW><ROW><id>18296026</id><snippet>sinatra = Person('Frank', 'Sinatra', 217653918')
</snippet></ROW><ROW><id>18296026</id><snippet>Person</snippet></ROW><ROW><id>18296026</id><snippet>contacts = [sinatra, bob, etc.]
</snippet></ROW><ROW><id>18296026</id><snippet>for contact in contacts:
    if contact.first_name == 'Bob':
      print(contact.phone_number)
</snippet></ROW><ROW><id>18296204</id><snippet>c</snippet></ROW><ROW><id>18296204</id><snippet>c</snippet></ROW><ROW><id>18296204</id><snippet>return sorted([a, b, c])[1]
</snippet></ROW><ROW><id>18296207</id><snippet>DataFrame</snippet></ROW><ROW><id>18296207</id><snippet>import pandas.util.testing as tm
from pandas import read_csv

df = tm.makeTimeDataFrame()
dfa = df[['A']].T
dfa.to_csv('the_csv.csv')
dfa_hat = read_csv('the_csv.csv', index_col=0)
dfa_hat.T
</snippet></ROW><ROW><id>18296207</id><snippet>DataFrame.mean()</snippet></ROW><ROW><id>18296207</id><snippet>axis == 0</snippet></ROW><ROW><id>18296207</id><snippet>In [272]: df = DataFrame(randn(5, 2), columns=list('ab'))

In [273]: df
Out[273]:
       a      b
0  0.056 -0.056
1 -0.384  1.153
2  0.524 -1.545
3  1.082  1.665
4 -0.593 -0.412

In [274]: df.mean()
Out[274]:
a    0.137
b    0.161
dtype: float64

In [275]: type(df.mean())
Out[275]: pandas.core.series.Series
</snippet></ROW><ROW><id>18296207</id><snippet>index</snippet></ROW><ROW><id>18296207</id><snippet>df.mean()</snippet></ROW><ROW><id>18296207</id><snippet>columns</snippet></ROW><ROW><id>18296207</id><snippet>df</snippet></ROW><ROW><id>18296207</id><snippet>type(df.mean())</snippet></ROW><ROW><id>18296207</id><snippet>Series</snippet></ROW><ROW><id>18296207</id><snippet>pandas</snippet></ROW><ROW><id>18296207</id><snippet>numpy</snippet></ROW><ROW><id>18296207</id><snippet>numpy</snippet></ROW><ROW><id>18296207</id><snippet>pandas</snippet></ROW><ROW><id>18296207</id><snippet>Series</snippet></ROW><ROW><id>18296207</id><snippet>DataFrame</snippet></ROW><ROW><id>18296207</id><snippet>Series</snippet></ROW><ROW><id>18296207</id><snippet>numpy</snippet></ROW><ROW><id>18296207</id><snippet>numpy</snippet></ROW><ROW><id>18296207</id><snippet>T</snippet></ROW><ROW><id>18296207</id><snippet>Series</snippet></ROW><ROW><id>18296266</id><snippet>&lt;F4&gt;</snippet></ROW><ROW><id>18296266</id><snippet>autocmd filetype python nnoremap &lt;F4&gt; :w &lt;bar&gt; exec '!python '.shellescape('%')&lt;CR&gt;
autocmd filetype c nnoremap &lt;F4&gt; :w &lt;bar&gt; exec '!gcc '.shellescape('%').' -o '.shellescape('%:r').' &amp;&amp; ./'.shellescape('%:r')&lt;CR&gt;
autocmd filetype cpp nnoremap &lt;F4&gt; :w &lt;bar&gt; exec '!g++ '.shellescape('%').' -o '.shellescape('%:r').' &amp;&amp; ./'.shellescape('%:r')&lt;CR&gt;
</snippet></ROW><ROW><id>18296266</id><snippet>%</snippet></ROW><ROW><id>18296266</id><snippet>%:r</snippet></ROW><ROW><id>18296281</id><snippet>view</snippet></ROW><ROW><id>18296281</id><snippet>unpackbits</snippet></ROW><ROW><id>18296281</id><snippet>unpackbits(arange(2, dtype=uint16).view(uint8))
</snippet></ROW><ROW><id>18296281</id><snippet>[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0]
</snippet></ROW><ROW><id>18296281</id><snippet>a = arange(int(1e6), dtype=uint16)</snippet></ROW><ROW><id>18296281</id><snippet>%%timeit
unpackbits(a.view(uint8))

100 loops, best of 3: 7.03 ms per loop
</snippet></ROW><ROW><id>18296407</id><snippet>bar = [ i.bar for i in foo ]
</snippet></ROW><ROW><id>18296407</id><snippet>0</snippet></ROW><ROW><id>18296407</id><snippet>n - 1</snippet></ROW><ROW><id>18296594</id><snippet>flask.g</snippet></ROW><ROW><id>18296594</id><snippet>g.api_key</snippet></ROW><ROW><id>18296594</id><snippet>before_request</snippet></ROW><ROW><id>18296681</id><snippet>inspect.getclasstree(inspect.getmro(Exception))
</snippet></ROW><ROW><id>18296681</id><snippet>__subclasses__()</snippet></ROW><ROW><id>18296681</id><snippet>def classtree(cls, indent=0):
    print '.' * indent, cls.__name__
    for subcls in cls.__subclasses__():
        classtree(subcls, indent + 3)

classtree(BaseException)
</snippet></ROW><ROW><id>18296681</id><snippet> BaseException
... Exception
...... StandardError
......... TypeError
......... ImportError
............ ZipImportError
......... EnvironmentError
............ IOError
............... ItimerError
............ OSError
......... EOFError
......... RuntimeError
............ NotImplementedError
......... NameError
............ UnboundLocalError
......... AttributeError
......... SyntaxError
............ IndentationError
............... TabError
......... LookupError
............ IndexError
............ KeyError
............ CodecRegistryError
......... ValueError
............ UnicodeError
............... UnicodeEncodeError
............... UnicodeDecodeError
............... UnicodeTranslateError
......... AssertionError
......... ArithmeticError
............ FloatingPointError
............ OverflowError
............ ZeroDivisionError
......... SystemError
............ CodecRegistryError
......... ReferenceError
......... MemoryError
......... BufferError
...... StopIteration
...... Warning
......... UserWarning
......... DeprecationWarning
......... PendingDeprecationWarning
......... SyntaxWarning
......... RuntimeWarning
......... FutureWarning
......... ImportWarning
......... UnicodeWarning
......... BytesWarning
...... _OptionError
... GeneratorExit
... SystemExit
... KeyboardInterrupt
</snippet></ROW><ROW><id>18296718</id><snippet>LIMIT</snippet></ROW><ROW><id>18296718</id><snippet>pipelines = []

match = {
    'discussion_id': {
        '$in': discussion_ids
    }
}

if start and end:
    match['created_at'] = {
        '$gte': start,
        '$lt': end
    }

pipelines.append({ '$match': match })

if order:
    pipelines.append({ '$sort': { 'created_at': order } })

pipelines.append({ '$project': { 'poster_id': '$poster_id' } })
pipelines.append({ '$group': { '_id': '$poster_id', 'post_id': { '$first': '$_id' } } })

if skip:
    pipelines.append({ '$skip': skip })

if limit:
    pipelines.append({ '$limit': limit })

results = self.db.posts.aggregate(pipelines)
</snippet></ROW><ROW><id>18296740</id><snippet>event.key == ...</snippet></ROW><ROW><id>18296740</id><snippet>while running:
    for event in list_of_events:
        process_event
        draw_to_screen
        wait_a_while
</snippet></ROW><ROW><id>18296740</id><snippet>while running:
    for event in list_of_events:
        process_event

    draw_to_screen
    wait_a_while
</snippet></ROW><ROW><id>18296740</id><snippet>pygame.quit(); sys.exit()</snippet></ROW><ROW><id>18296740</id><snippet>run = false</snippet></ROW><ROW><id>18296740</id><snippet>pygame.quit()</snippet></ROW><ROW><id>18296814</id><snippet>lambda</snippet></ROW><ROW><id>18296814</id><snippet>def func(p):
   return p.totalScore     
</snippet></ROW><ROW><id>18296814</id><snippet>max</snippet></ROW><ROW><id>18296814</id><snippet>max(players, key=func)
</snippet></ROW><ROW><id>18296814</id><snippet>def</snippet></ROW><ROW><id>18296814</id><snippet>lambda</snippet></ROW><ROW><id>18296814</id><snippet>def</snippet></ROW><ROW><id>18296814</id><snippet>lambda</snippet></ROW><ROW><id>18296814</id><snippet>How `key` works?
</snippet></ROW><ROW><id>18296814</id><snippet>key</snippet></ROW><ROW><id>18296814</id><snippet>&gt;&gt;&gt; lis = ['1','100','111','2']
</snippet></ROW><ROW><id>18296814</id><snippet>max</snippet></ROW><ROW><id>18296814</id><snippet>'2'</snippet></ROW><ROW><id>18296814</id><snippet>&gt;&gt;&gt; max(lis)
'2'
</snippet></ROW><ROW><id>18296814</id><snippet>lambda</snippet></ROW><ROW><id>18296814</id><snippet>&gt;&gt;&gt; max(lis, key=lambda x:int(x))  #compare `int` version of each item
'111'
</snippet></ROW><ROW><id>18296814</id><snippet>max</snippet></ROW><ROW><id>18296814</id><snippet>&gt;&gt;&gt; lis = [(1,'a'),(3,'c'), (4,'e'), (-1,'z')]
</snippet></ROW><ROW><id>18296814</id><snippet>&gt;&gt;&gt; max(lis)
(4, 'e')
</snippet></ROW><ROW><id>18296814</id><snippet>lambda</snippet></ROW><ROW><id>18296814</id><snippet>&gt;&gt;&gt; max(lis, key = lambda x:x[1])
(-1, 'z')
</snippet></ROW><ROW><id>18296814</id><snippet>&gt;&gt;&gt; lis = ['1','100','111','2', 2, 2.57]
</snippet></ROW><ROW><id>18296814</id><snippet>&gt;&gt;&gt; max(lis) #works in py2.x  
'2'
&gt;&gt;&gt; max(lis, key=lambda x:int(x)) #compare integer version of each item
'111'
</snippet></ROW><ROW><id>18296814</id><snippet>&gt;&gt;&gt; lis = ['1','100','111','2', 2, 2.57]
&gt;&gt;&gt; max(lis)
Traceback (most recent call last):
  File "&lt;ipython-input-2-0ce0a02693e4&gt;", line 1, in &lt;module&gt;
    max(lis)
TypeError: unorderable types: int() &gt; str()
</snippet></ROW><ROW><id>18296814</id><snippet>&gt;&gt;&gt; max(lis, key=lambda x:int(x))
'111'
</snippet></ROW><ROW><id>18296846</id><snippet>story.print_story()</snippet></ROW><ROW><id>18296846</id><snippet>None</snippet></ROW><ROW><id>18296846</id><snippet>&gt;&gt;&gt; def a():
...     print 1
...
&gt;&gt;&gt; print a()
1
None
</snippet></ROW><ROW><id>18296846</id><snippet>print</snippet></ROW><ROW><id>18296846</id><snippet>print story.print_story()</snippet></ROW><ROW><id>18297012</id><snippet>handlers</snippet></ROW><ROW><id>18297012</id><snippet>handlers:
- url: /
  static_files: static/index.html
  upload: static/index.html

- url: /
  static_dir: static
</snippet></ROW><ROW><id>18297150</id><snippet>wtforms</snippet></ROW><ROW><id>18297150</id><snippet>from flask.ext.wtf import Form

from wtforms import TextField, BooleanField
from wtforms.validators import Required
</snippet></ROW><ROW><id>18297212</id><snippet>type</snippet></ROW><ROW><id>18297212</id><snippet>Signal.connect()</snippet></ROW><ROW><id>18297212</id><snippet>type</snippet></ROW><ROW><id>18297212</id><snippet>Qt.AutoConnection</snippet></ROW><ROW><id>18297212</id><snippet>receiver</snippet></ROW><ROW><id>18297212</id><snippet>reciever</snippet></ROW><ROW><id>18297212</id><snippet>Slot</snippet></ROW><ROW><id>18297212</id><snippet>Slot</snippet></ROW><ROW><id>18297232</id><snippet>bill = int(input("Restaurant bill total: "))

fifteen = (bill * 0.15)

twenty = (bill * 0.20)

print("Your Actual bill : ", bill)
print("Bill with 15% additional charge : ", bill+fifteen)
print("Bill with 20% additional charge : ", bill+twenty)

input("\n\nPress the enter key to exit.")
</snippet></ROW><ROW><id>18297363</id><snippet>"/mnt/external_sd/Download/" + ext
</snippet></ROW><ROW><id>18297363</id><snippet>"/mnt/external_sd/" + ext + "/" + File
</snippet></ROW><ROW><id>18297363</id><snippet>Download</snippet></ROW><ROW><id>18297363</id><snippet>file("/mnt/external_sd/Download/" + ext + "/" + File, "w").write(Data)
</snippet></ROW><ROW><id>18297363</id><snippet>if</snippet></ROW><ROW><id>18297363</id><snippet>else</snippet></ROW><ROW><id>18297363</id><snippet>shutil.copy</snippet></ROW><ROW><id>18297363</id><snippet>import shutil
if not os.path.exists("/mnt/external_sd/Download/" + ext):
    os.makedirs("/mnt/external_sd/Download/" + ext)
shutil.copy("/sdcard/Download/" + File, "/mnt/external_sd/Download/" + ext + "/" + File)
</snippet></ROW><ROW><id>18297363</id><snippet>shutil</snippet></ROW><ROW><id>18297422</id><snippet>a</snippet></ROW><ROW><id>18297422</id><snippet>m = zipfile.ZipFile("test.jar", "a")
</snippet></ROW><ROW><id>18297422</id><snippet>w</snippet></ROW><ROW><id>18297422</id><snippet>zipfile.ZipFile()</snippet></ROW><ROW><id>18297422</id><snippet>'r'</snippet></ROW><ROW><id>18297422</id><snippet>'w'</snippet></ROW><ROW><id>18297422</id><snippet>'a'</snippet></ROW><ROW><id>18297422</id><snippet>mode</snippet></ROW><ROW><id>18297422</id><snippet>'a'</snippet></ROW><ROW><id>18297812</id><snippet>\b</snippet></ROW><ROW><id>18297812</id><snippet>thisISAtest</snippet></ROW><ROW><id>18297812</id><snippet>([A-Z]){3}
</snippet></ROW><ROW><id>18297812</id><snippet>[A-Z]{3}
</snippet></ROW><ROW><id>18297812</id><snippet>(?&lt;![A-Z])[A-Z]{3}(?![A-Z])
</snippet></ROW><ROW><id>18297812</id><snippet>(?&lt;![A-Z])</snippet></ROW><ROW><id>18297812</id><snippet>(?![A-Z])</snippet></ROW><ROW><id>18297832</id><snippet>reset_joinpoint()</snippet></ROW><ROW><id>18297832</id><snippet>join()</snippet></ROW><ROW><id>18297832</id><snippet>aliased=True</snippet></ROW><ROW><id>18297832</id><snippet>ON</snippet></ROW><ROW><id>18297832</id><snippet>q = session.query(Tasks, client_contact, resource_contact).\
    join(TaskResReln).\
    join(resource_contact).\
    join(TaskContact, Tasks.task_id == TaskContact.task_id).\
    join(client_contact)
</snippet></ROW><ROW><id>18297844</id><snippet>m[letter]</snippet></ROW><ROW><id>18297844</id><snippet>m(letter)</snippet></ROW><ROW><id>18297844</id><snippet>if(m(letter) == '1'or '2'):</snippet></ROW><ROW><id>18297844</id><snippet>in</snippet></ROW><ROW><id>18297844</id><snippet>if m[letter] in ('1', '2')</snippet></ROW><ROW><id>18297844</id><snippet>++</snippet></ROW><ROW><id>18297844</id><snippet>--</snippet></ROW><ROW><id>18297844</id><snippet>+=1</snippet></ROW><ROW><id>18297844</id><snippet>-=1</snippet></ROW><ROW><id>18297844</id><snippet>while</snippet></ROW><ROW><id>18297844</id><snippet>if</snippet></ROW><ROW><id>18297844</id><snippet>m = str(input())
while m != '0':
    c = 0
    for letter in range(len(m)):
        if m[letter] in ('1', '2'):
            c += 1
        if m[letter] in ('7', '8', '9') and m[letter - 1] == '2':
            c -= 1
        if m[letter] == '0':
            c -= 1
    print(c)
    m = str(input())
</snippet></ROW><ROW><id>18298035</id><snippet>&gt;python test.py &lt;input.txt</snippet></ROW><ROW><id>18298035</id><snippet>example &lt;example@gmail.com&gt;</snippet></ROW><ROW><id>18298035</id><snippet>[&lt;email.message.Message instance at 0x02810288&gt;,</snippet></ROW><ROW><id>18298035</id><snippet>&lt;email.message.Message instance at 0x02810058&gt;]</snippet></ROW><ROW><id>18298137</id><snippet>def checkwin():
    ...
    #call program only if both player's score is less than the limit
    if p2sc &lt; sclimit and p1sc &lt; sclimit:
        program()

    #use if-elif conditions here, and you need `&gt;=` here not `&lt;=`.
    if p2sc &gt;= sclimit:
        print(p2name + " wins!")
        defaults()
        print("New game!")
        program()
    elif p1sc &gt;= sclimit:
        print(p1name + " wins!")
        defaults()
        print("New game!")
        program()
    ...
</snippet></ROW><ROW><id>18298137</id><snippet>sclimit</snippet></ROW><ROW><id>18298137</id><snippet>$ python so.py
Command: 1
Player 1: 1
Player 2: 0
Command: 1
Player 1: 2
Player 2: 0
Command: 2
Player 1: 2
Player 2: 1
Command: 1
Player 1: 3
Player 2: 1
Player 1 wins!
New game!
Command: 1   
Player 1: 1
Player 2: 0
Command: 2
Player 1: 1
Player 2: 1
Command: 2
Player 1: 1
Player 2: 2
Command: 2
Player 1: 1
Player 2: 3
Player 2 wins!
New game!
Command: 
</snippet></ROW><ROW><id>18298260</id><snippet>&gt;&gt;&gt; a = b'\x91\x44\x77\x65\x92'
&gt;&gt;&gt; a.encode("hex")
'9144776592'
&gt;&gt;&gt; b.encode('hex')
'4445414442454546'
</snippet></ROW><ROW><id>18298260</id><snippet>encode('hex')</snippet></ROW><ROW><id>18298260</id><snippet>&gt;&gt;&gt; import binascii
&gt;&gt;&gt; binascii.hexlify(b'\x91\x44\x77\x65\x92')
b'9144776592'
</snippet></ROW><ROW><id>18298283</id><snippet>draw</snippet></ROW><ROW><id>18298283</id><snippet>draw</snippet></ROW><ROW><id>18298283</id><snippet>draw</snippet></ROW><ROW><id>18298592</id><snippet>StringIO</snippet></ROW><ROW><id>18298592</id><snippet>from StringIO import StringIO
import sys

old_stdout = sys.stdout
sys.stdout = mystdout = StringIO()

print("test")

sys.stdout = old_stdout

s = mystdout.getvalue()
s = "prefix" + s

sys.stderr.write(s)
</snippet></ROW><ROW><id>18298592</id><snippet>stdout</snippet></ROW><ROW><id>18298592</id><snippet>prefix</snippet></ROW><ROW><id>18298592</id><snippet>stderr</snippet></ROW><ROW><id>18298700</id><snippet>outStream</snippet></ROW><ROW><id>18298700</id><snippet>outStream = open(outStream, "w")
</snippet></ROW><ROW><id>18298700</id><snippet>outStream.name</snippet></ROW><ROW><id>18298700</id><snippet>os.path.basename(outStream.name)  # is equal to 'domains_output.csv'
</snippet></ROW><ROW><id>18298791</id><snippet>input</snippet></ROW><ROW><id>18298791</id><snippet>raw_input</snippet></ROW><ROW><id>18298791</id><snippet>restart = str(input("Do you wish to make another conversion? [y]Yes or [n]no: "))
</snippet></ROW><ROW><id>18298791</id><snippet>restart = raw_input("Do you wish to make another conversion? [y]Yes or [n]no: ")
</snippet></ROW><ROW><id>18298876</id><snippet>scrollbar.pack(side="right", fill="y")
listbox.pack(side="left", fill="both", expand=True)
</snippet></ROW><ROW><id>18298876</id><snippet>columnconfigure</snippet></ROW><ROW><id>18298876</id><snippet>containing_frame.grid_columnconfigure(0, weight=1)
</snippet></ROW><ROW><id>18298913</id><snippet>alter table table_name add column new_column_name column_type;
alter table table_name drop column column_name;
</snippet></ROW><ROW><id>18299060</id><snippet>from django.conf.urls import patterns, url

urlpatterns = patterns('',
    url(r'^(?P&lt;name&gt;\w+)/$', 'my_view'),)
</snippet></ROW><ROW><id>18299060</id><snippet>def my_view(request, name=None):
    # get a model instance
    animal = animals.objects.get(name=name)
</snippet></ROW><ROW><id>18299116</id><snippet>from itertools import product
from operators import mul

primes = [2,3,5]
n = 3

sets = product(*[[(i,j) for j in range(n)] for i in primes])
# Now 'sets' contains all the combinations you want. If you just wanted pow(i,j), write i**j instead and skip the map in the next enumeration
# list(sets)
#[((2, 0), (3, 0), (5, 0)), 
# ((2, 0), (3, 0), (5, 1)), 
# ((2, 0), (3, 0), (5, 2)), 
#  ... ... ...
# ((2, 2), (3, 2), (5, 0)), 
# ((2, 2), (3, 2), (5, 1)), 
# ((2, 2), (3, 2), (5, 2))]

productlist = []
for t in sets:
    productlist.append(reduce(mul,map(lambda tp:tp[0]**tp[1],t)))

# now productlist contains the multiplication of each n(=3) items:
#[1, 5, 25, 3, 15, 75, 9, 45, 225, 2, 10, 50, 6, 30, 150, 18, 90, 450, 4, 20, 100, 12, 60, 300, 36, 180, 900]
# pow( 2, 0 ) * pow( 3, 0 ) * pow( 5, 0 ) = 1
# pow( 2, 0 ) * pow( 3, 0 ) * pow( 5, 1 ) = 5
# pow( 2, 0 ) * pow( 3, 0 ) * pow( 5, 2 ) = 25
# .... ... 
</snippet></ROW><ROW><id>18299116</id><snippet>productlist = [reduce(mul,t) for t in product(*[[i**j for j in range(n)] for i in primes])]
</snippet></ROW><ROW><id>18299371</id><snippet>settings.py</snippet></ROW><ROW><id>18299371</id><snippet>settings.py</snippet></ROW><ROW><id>18299834</id><snippet>mlab.PCA</snippet></ROW><ROW><id>18299834</id><snippet>PCA</snippet></ROW><ROW><id>18299834</id><snippet>    a = self.center(a)
    U, s, Vh = np.linalg.svd(a, full_matrices=False)
</snippet></ROW><ROW><id>18299834</id><snippet>center</snippet></ROW><ROW><id>18299834</id><snippet>sigma</snippet></ROW><ROW><id>18299834</id><snippet>def center(self, x):
    'center the data using the mean and sigma from training set a'
    return (x - self.mu)/self.sigma
</snippet></ROW><ROW><id>18299834</id><snippet>pca.Wt</snippet></ROW><ROW><id>18299834</id><snippet>[[-0.70710678 -0.70710678]
 [-0.70710678  0.70710678]]
</snippet></ROW><ROW><id>18299834</id><snippet>mlab.PCA</snippet></ROW><ROW><id>18299834</id><snippet>import numpy as np
import matplotlib.pyplot as plt

N = 1000
xTrue = np.linspace(0, 1000, N)
yTrue = 3 * xTrue
xData = xTrue + np.random.normal(0, 100, N)
yData = yTrue + np.random.normal(0, 100, N)
xData = np.reshape(xData, (N, 1))
yData = np.reshape(yData, (N, 1))
data = np.hstack((xData, yData))

mu = data.mean(axis=0)
data = data - mu
# data = (data - mu)/data.std(axis=0)  # Uncomment this reproduces mlab.PCA results
eigenvectors, eigenvalues, V = np.linalg.svd(
    data.T, full_matrices=False)
projected_data = np.dot(data, eigenvectors)
sigma = projected_data.std(axis=0).mean()
print(eigenvectors)
def annotate(ax, name, start, end):
    arrow = ax.annotate(name,
                        xy=end, xycoords='data',
                        xytext=start, textcoords='data',
                        arrowprops=dict(facecolor='red', width=2.0))
    return arrow

fig, ax = plt.subplots()
ax.scatter(xData, yData)
ax.set_aspect('equal')
for axis in eigenvectors:
    annotate(ax, '', mu, mu + sigma * axis)
plt.show()
</snippet></ROW><ROW><id>18299866</id><snippet>/usr/local/Cellar/&lt;appname&gt;</snippet></ROW><ROW><id>18299866</id><snippet>/usr/bin</snippet></ROW><ROW><id>18299866</id><snippet>/usr/local/Cellar/python/2.7.5/bin</snippet></ROW><ROW><id>18299866</id><snippet>/usr/bin/python</snippet></ROW><ROW><id>18299866</id><snippet>PATH</snippet></ROW><ROW><id>18299890</id><snippet>defaultdict</snippet></ROW><ROW><id>18299890</id><snippet>In [23]: from collections import defaultdict
In [24]: data = ['a','b','c','a','b','b','d']
In [25]: counts = defaultdict(int)
In [26]: for x in data: counts[x]+=1
In [27]: counts
Out[27]: defaultdict(&lt;type 'int'&gt;, {'a': 2, 'c': 1, 'b': 3, 'd': 1})
</snippet></ROW><ROW><id>18299955</id><snippet>\</snippet></ROW><ROW><id>18299955</id><snippet>os.path.isdir('X:\\pythonscripts\\src')
</snippet></ROW><ROW><id>18299955</id><snippet>os.path.isdir(r'X:\pythonscripts\src')
</snippet></ROW><ROW><id>18299955</id><snippet>&gt;&gt;&gt; '\f'
'\x0c'
&gt;&gt;&gt; print '\f'

&gt;&gt;&gt; print '\\f'
\f
&gt;&gt;&gt; print r'\f'
\f
</snippet></ROW><ROW><id>18300189</id><snippet>math</snippet></ROW><ROW><id>18300189</id><snippet>sys.modules</snippet></ROW><ROW><id>18300189</id><snippet>from math import sqrt</snippet></ROW><ROW><id>18300189</id><snippet>import math</snippet></ROW><ROW><id>18300189</id><snippet>math</snippet></ROW><ROW><id>18300189</id><snippet>sys.modules</snippet></ROW><ROW><id>18300189</id><snippet>sqrt</snippet></ROW><ROW><id>18300189</id><snippet>math</snippet></ROW><ROW><id>18300189</id><snippet>math.sqrt</snippet></ROW><ROW><id>18300189</id><snippet>import math</snippet></ROW><ROW><id>18300189</id><snippet>sqrt()</snippet></ROW><ROW><id>18300189</id><snippet>from math import sqrt</snippet></ROW><ROW><id>18300189</id><snippet>from your_module import *</snippet></ROW><ROW><id>18300189</id><snippet>__all__</snippet></ROW><ROW><id>18300697</id><snippet>codecs.open()</snippet></ROW><ROW><id>18300697</id><snippet>import codecs

with codecs.open("animals.txt", 'r', encoding='mbcs') as f:
    content = f.readlines()

for animal in content:
    print animal
</snippet></ROW><ROW><id>18300697</id><snippet>import codecs

with codecs.open("animals.txt", 'r', encoding='mbcs') as f:
    for animal in f:
        print animal
</snippet></ROW><ROW><id>18300697</id><snippet>mbcs</snippet></ROW><ROW><id>18300697</id><snippet>cp</snippet></ROW><ROW><id>18300697</id><snippet>cp1250</snippet></ROW><ROW><id>18300697</id><snippet>cp1252</snippet></ROW><ROW><id>18300721</id><snippet>cookies = request.cookies or {}
</snippet></ROW><ROW><id>18300721</id><snippet>cookies = request.cookies if request.cookies else {}
</snippet></ROW><ROW><id>18300721</id><snippet>cookies = {}

if request.cookies:
    cookies = request.cookies
</snippet></ROW><ROW><id>18300721</id><snippet>d.get('key', 'fallback')
</snippet></ROW><ROW><id>18300956</id><snippet>worker</snippet></ROW><ROW><id>18300956</id><snippet>map_async</snippet></ROW><ROW><id>18300956</id><snippet>#coding=utf-8
import time
import multiprocessing
import string
from collections import Counter
import os
for_split = [',','\n','\t','\'','.','\"','!','?','-', '~']
ignored = ['the', 'and', 'i', 'to', 'of', 'a', 'in', 'was', 'that', 'had',
       'he', 'you', 'his','my', 'it', 'as', 'with', 'her', 'for', 'on']
result_list = []

def worker(offset,length,filename):
    origin = open(filename, 'r')
    origin.seek(offset)
    content = origin.read(length).lower()

    for ch in for_split:
         content = content.replace(ch, ' ')

    words = string.split(content)
    result = Counter(words)
    origin.close()
    return result

def log_result(result):
    result_list.append(result)

def main():
    processes = 5
    pool = multiprocessing.Pool(processes=processes)
    filename = "document.txt"
    file_size = os.stat(filename)[6]
    chunks = []
    origin = open(filename, 'r')
    while True:
        lines = origin.readlines(file_size/processes)
        if not lines:
            break
        chunks.append("\n".join(lines))

    lengths = [len(chunk) for chunk in chunks]
    offset = 0

    for length in lengths:
        pool.apply_async(worker, args=(offset,length,filename,), callback = log_result)
        offset += length

    pool.close()
    pool.join()
    result = Counter()
    for item in result_list:
        result = result + item
    result = result.most_common(40)
    i=0
    for word, frequency in result:
        if not word in ignored and i &lt; 10:
            print "%s : %d" % (word, frequency)
            i = i+1
if __name__ == "__main__":
    starttime = time.clock()
    main()
    print time.clock() - starttime
</snippet></ROW><ROW><id>18301218</id><snippet>Flask-SQLAlchemy=1.0
</snippet></ROW><ROW><id>18301352</id><snippet>process_request</snippet></ROW><ROW><id>18301393</id><snippet>mylist = []
for i in range(random_number):
    mylist.append(Item(1,2,3))
</snippet></ROW><ROW><id>18301393</id><snippet>mylist = [Item(1,2,3) for i in range(random_number)]
</snippet></ROW><ROW><id>18301420</id><snippet>SocketServer.py</snippet></ROW><ROW><id>18301420</id><snippet>python -c "improt SocketServer; print(SocketServer.__file__)"
</snippet></ROW><ROW><id>18301420</id><snippet>/Users/ddl449/Projects/visualization/SocketServer.py</snippet></ROW><ROW><id>18301420</id><snippet>/Users/ddl449/Projects/visualization/SocketServer.pyc</snippet></ROW><ROW><id>18301609</id><snippet>$def with(**kwargs)
$if kwargs['error']:
    &lt;p class=error&gt;$kwargs['error']&lt;/p&gt;
</snippet></ROW><ROW><id>18301618</id><snippet>import Test.foo as foo
</snippet></ROW><ROW><id>18301618</id><snippet>as foo</snippet></ROW><ROW><id>18301618</id><snippet>foo.bar</snippet></ROW><ROW><id>18301618</id><snippet>main</snippet></ROW><ROW><id>18301618</id><snippet>~/Development</snippet></ROW><ROW><id>18301618</id><snippet>~/Development</snippet></ROW><ROW><id>18301618</id><snippet>PYTHONPATH</snippet></ROW><ROW><id>18301618</id><snippet>export PYTHONPATH=$PYTHONPATH:$HOME/Development
</snippet></ROW><ROW><id>18301618</id><snippet>import sys
print(sys.path)
import Test
print(Test)
import Test.foo
</snippet></ROW><ROW><id>18301618</id><snippet>test_foo.py</snippet></ROW><ROW><id>18301951</id><snippet>update clean</snippet></ROW><ROW><id>18301951</id><snippet>update -C</snippet></ROW><ROW><id>18301951</id><snippet>hg pull
hg update -C
</snippet></ROW><ROW><id>18301996</id><snippet>import pygame
from pygame.locals import *
pygame.init()
screen = pygame.display.set_mode((640,480), HWSURFACE|DOUBLEBUF|RESIZABLE)
while True:
    pygame.event.pump()
    event = pygame.event.wait()
    if event.type == QUIT: pygame.display.quit()
    else if event.type == VIDEORESIZE:
        width, height = event.size
        if width &lt; 600:
            width = 600
        if height &lt; 400:
            height = 400
        screen = pygame.display.set_mode((width,height), HWSURFACE|DOUBLEBUF|RESIZABLE)
</snippet></ROW><ROW><id>18302014</id><snippet>$('#save').click(function() {
    myhtml = $('html').html();
    $.ajax({
        type: "POST",
        url: "http://127.0.0.1:5000/parse_data",
        data: {html:myhtml} // made into a hash for retrieval
    });
});
</snippet></ROW><ROW><id>18302014</id><snippet>@app.route('/parse_data', methods=['GET', 'POST'])
def parse_data():
    # updated: get value for key "html", encode correctly
    data = request.form.get("html").encode("utf-8")
    # do whatever with the data
    return "Data retrieved"
</snippet></ROW><ROW><id>18302049</id><snippet>all_name</snippet></ROW><ROW><id>18302049</id><snippet>all_name={a.name for a in all_names}</snippet></ROW><ROW><id>18302049</id><snippet>all</snippet></ROW><ROW><id>18302072</id><snippet>matplotlib</snippet></ROW><ROW><id>18302072</id><snippet>backend</snippet></ROW><ROW><id>18302072</id><snippet>artists</snippet></ROW><ROW><id>18302072</id><snippet>backend</snippet></ROW><ROW><id>18302072</id><snippet>pyplot</snippet></ROW><ROW><id>18302072</id><snippet>MATLAB</snippet></ROW><ROW><id>18302072</id><snippet>Artist</snippet></ROW><ROW><id>18302072</id><snippet>Axes</snippet></ROW><ROW><id>18302072</id><snippet>Artists</snippet></ROW><ROW><id>18302072</id><snippet>Axes</snippet></ROW><ROW><id>18302072</id><snippet>Figure</snippet></ROW><ROW><id>18302072</id><snippet>fig.canvas.draw()</snippet></ROW><ROW><id>18302072</id><snippet>Artist</snippet></ROW><ROW><id>18302072</id><snippet>AxesImage</snippet></ROW><ROW><id>18302072</id><snippet>Artists</snippet></ROW><ROW><id>18302072</id><snippet>Axes</snippet></ROW><ROW><id>18302072</id><snippet>Axis</snippet></ROW><ROW><id>18302072</id><snippet>vmin</snippet></ROW><ROW><id>18302072</id><snippet>vmax</snippet></ROW><ROW><id>18302072</id><snippet>Normalize</snippet></ROW><ROW><id>18302072</id><snippet>AxesImage</snippet></ROW><ROW><id>18302072</id><snippet>def set_up_axes(some, arguements):
    '''
    Factory to make configured axes (
    '''
    fig, ax = plt.subplots(1, 1) # or what ever layout you want
    ax.set_*(...)
    return fig, ax


my_norm = matplotlib.colors.Normalize(vmin, mmax) # or write a factory to do fancier stuff
fig, ax = set_up_axes(...)
ax.imshow(..., norm=my_norm)
fig2, ax2 = set_up_axes(...)
ax2.imshow(..., norm=mynorm)
</snippet></ROW><ROW><id>18302072</id><snippet>my_imshow_args = {'extent':[...],
                  'interpolation':'nearest',
                  'norm': my_norm,
                   ...}

ax2.imshow(..., **my_imshow_args)
</snippet></ROW><ROW><id>18302072</id><snippet>def my_imshow(im, ax=None, *args, **kwargs):
    if ax is None:
        ax = plt.gca()
    # do all of your axes set up
    ax.set_xlim(..)

    # set default vmin and vmax
    # you can drop some of these conditionals if you don't want to be
    # able to explicitly override the defaults
    if 'norm' not in kwargs:
        vmin = kwargs.pop('vmin', None)
        vmax = kwargs.pop('vmax', None)
        if vmin is None:
            vmin = default_vmin # or what ever
        if vmax is None:
            vmax = default_vmax
        my_norm = matplotlib.colors.Normalize(vmin, mmax)
        kwargs['norm'] = norm

    # add a similar block for `extent` 
    # or any other kwargs you want to change the default of

    ax.figure.canvas.draw() # if you want to force a re-draw
    return ax.imshow(im, *args, **kwargs)
</snippet></ROW><ROW><id>18302072</id><snippet>plt.imshow</snippet></ROW><ROW><id>18302072</id><snippet>plt.imshow = my_imshow
</snippet></ROW><ROW><id>18302072</id><snippet>matplotlib</snippet></ROW><ROW><id>18302072</id><snippet>partial</snippet></ROW><ROW><id>18302212</id><snippet>except:</snippet></ROW><ROW><id>18302212</id><snippet>KeyboardInterrupt</snippet></ROW><ROW><id>18302212</id><snippet>Ctrl+C</snippet></ROW><ROW><id>18302212</id><snippet>SystemExit</snippet></ROW><ROW><id>18302212</id><snippet>Exception</snippet></ROW><ROW><id>18302212</id><snippet>IOError</snippet></ROW><ROW><id>18302212</id><snippet>ValueError</snippet></ROW><ROW><id>18302212</id><snippet>TypeError</snippet></ROW><ROW><id>18302215</id><snippet>    os.chdir(os.path.dirname(__file__))
</snippet></ROW><ROW><id>18302273</id><snippet>%d</snippet></ROW><ROW><id>18302273</id><snippet>%s</snippet></ROW><ROW><id>18302273</id><snippet>query = """\
    INSERT INTO `sp_urls` (`parent_id`, `url`, `version`, `hits`) 
    VALUES (%s, %s, %s, %s)
    ON DUPLICATE KEY UPDATE url=url
    """
</snippet></ROW><ROW><id>18302273</id><snippet>paramstyle</snippet></ROW><ROW><id>18302273</id><snippet>'format'</snippet></ROW><ROW><id>18302273</id><snippet>printf</snippet></ROW><ROW><id>18302273</id><snippet>'...WHERE name=%s'</snippet></ROW><ROW><id>18302273</id><snippet>'pyformat'</snippet></ROW><ROW><id>18302273</id><snippet>'...WHERE name=%(name)s'</snippet></ROW><ROW><id>18302273</id><snippet>%s</snippet></ROW><ROW><id>18302327</id><snippet>get</snippet></ROW><ROW><id>18302327</id><snippet>def handleReceiveThisPacket(self, data):
    try:
        # returns None if key not found
        myInfo = self.info.get('exampleKey')

        # returns 42 if key not found
        myInfo = self.info.get('exampleKey', 42)
        return self.send(myInfo)
    except Exception as e:
        print("Oops an exception occurred")
        print(e)
</snippet></ROW><ROW><id>18302428</id><snippet>einsum</snippet></ROW><ROW><id>18302428</id><snippet>&gt;&gt;&gt; x = np.array([[1, 2], [3, 4], [5,6]])
&gt;&gt;&gt; np.einsum('ij...,i...-&gt;ij...',x,x)
array([[[ 1,  2],
        [ 2,  4]],

       [[ 9, 12],
        [12, 16]],

       [[25, 30],
        [30, 36]]])
</snippet></ROW><ROW><id>18302585</id><snippet>urlsafe()</snippet></ROW><ROW><id>18302585</id><snippet>{{ group.key.urlsafe }}
</snippet></ROW><ROW><id>18302623</id><snippet>matches = Match.query(Match.matchday == matchday.key).fetch()
</snippet></ROW><ROW><id>18302623</id><snippet>@property
matches = Match.query(Match.matchday == self.key).fetch()
</snippet></ROW><ROW><id>18303151</id><snippet>&lt;img.*&gt;</snippet></ROW><ROW><id>18303151</id><snippet>&lt;img</snippet></ROW><ROW><id>18303151</id><snippet>&gt;</snippet></ROW><ROW><id>18303151</id><snippet>.*</snippet></ROW><ROW><id>18303151</id><snippet>&gt;</snippet></ROW><ROW><id>18303151</id><snippet>&lt;html&gt;</snippet></ROW><ROW><id>18303151</id><snippet>&gt;</snippet></ROW><ROW><id>18303151</id><snippet>.*</snippet></ROW><ROW><id>18303151</id><snippet>&lt;img.*?&gt;</snippet></ROW><ROW><id>18303172</id><snippet>os.system</snippet></ROW><ROW><id>18303172</id><snippet>source</snippet></ROW><ROW><id>18303172</id><snippet>os.environ</snippet></ROW><ROW><id>18303172</id><snippet>os.system</snippet></ROW><ROW><id>18303172</id><snippet>PYTHONPATH</snippet></ROW><ROW><id>18303241</id><snippet>os.getcwd()</snippet></ROW><ROW><id>18303241</id><snippet>C:\temp\Mercury{}at{}A</snippet></ROW><ROW><id>18303325</id><snippet>nav</snippet></ROW><ROW><id>18303325</id><snippet>navbar</snippet></ROW><ROW><id>18303325</id><snippet>&lt;!doctype html&gt;
&lt;html&gt;
  &lt;head&gt;
    &lt;title&gt;An example document&lt;/title&gt;
  &lt;/head&gt;
  &lt;body&gt;
    &lt;nav&gt;
      &lt;h1&gt;A navigation heading&lt;/h1&gt;
      &lt;h2&gt;A subheading&lt;/h2&gt;
      &lt;!-- etc. --&gt;
    &lt;/nav&gt;
    &lt;main&gt;
      &lt;h1&gt;A general heading&lt;/h1&gt;
      &lt;h2&gt;A subheading&lt;/h2&gt;
      &lt;!-- etc. --&gt;
    &lt;/main&gt;
  &lt;/body&gt;
&lt;/html&gt;
</snippet></ROW><ROW><id>18303325</id><snippet>nav
  h1
    font-weight: bold
  h2
    font-style: italic

main
  h1
    color: blue
  h2
    color: red
</snippet></ROW><ROW><id>18303325</id><snippet>body</snippet></ROW><ROW><id>18303325</id><snippet>nav
  h1
    font-weight: bold
  h2
    font-style: italic

h1
  color: blue

h2
  color: red
</snippet></ROW><ROW><id>18303424</id><snippet>Venue</snippet></ROW><ROW><id>18303424</id><snippet>Event</snippet></ROW><ROW><id>18303424</id><snippet>venue = models.ForeignKey('Venue')
</snippet></ROW><ROW><id>18303440</id><snippet>/[a-z](?:[a-z.-]*[a-z])?/i
</snippet></ROW><ROW><id>18303440</id><snippet>.</snippet></ROW><ROW><id>18303440</id><snippet>-</snippet></ROW><ROW><id>18303461</id><snippet>&gt;&gt;&gt; from datetime import timedelta
# get hours, minutes and seconds
&gt;&gt;&gt; tm1 = [map(int, x.split(':')) for x in times]
# convert to timedelta
&gt;&gt;&gt; tm2 = [timedelta(hours=x[0], minutes=x[1], seconds=x[2]) for x in tm1]
# sum
&gt;&gt;&gt; print sum(tm2, timedelta())
1 day, 0:58:35
</snippet></ROW><ROW><id>18303608</id><snippet>&lt;empty&gt;</snippet></ROW><ROW><id>18303608</id><snippet>print(myhand)</snippet></ROW><ROW><id>18303608</id><snippet>myhand.__str__()</snippet></ROW><ROW><id>18303608</id><snippet>self.cards</snippet></ROW><ROW><id>18303608</id><snippet>self.cards</snippet></ROW><ROW><id>18303608</id><snippet>else:</snippet></ROW><ROW><id>18303608</id><snippet>&lt;empty&gt;</snippet></ROW><ROW><id>18303608</id><snippet>self.cards = []</snippet></ROW><ROW><id>18303608</id><snippet>__init__</snippet></ROW><ROW><id>18303608</id><snippet>__str__</snippet></ROW><ROW><id>18303608</id><snippet>str(self.cards)</snippet></ROW><ROW><id>18303608</id><snippet>str</snippet></ROW><ROW><id>18303608</id><snippet>list</snippet></ROW><ROW><id>18303608</id><snippet>__repr__</snippet></ROW><ROW><id>18303608</id><snippet>__repr__</snippet></ROW><ROW><id>18303608</id><snippet>Cards</snippet></ROW><ROW><id>18303608</id><snippet>__str__</snippet></ROW><ROW><id>18303608</id><snippet>class NoRepr(object):
     def __str__(self):
         return '__str__'     

class WithRepr(object):
     def __str__(self):
         return '__str__'
     def __repr__(self):
         return '__repr__'


[NoRepr(), NoRepr()]
[&lt;__main__.NoRepr at 0x9907c0c&gt;, &lt;__main__.NoRepr at 0x9907a4c&gt;]

[WithRepr(), WithRepr()]
[__repr__, __repr__]
</snippet></ROW><ROW><id>18303653</id><snippet>logging.basicConfig()</snippet></ROW><ROW><id>18303653</id><snippet>logging.info()</snippet></ROW><ROW><id>18303653</id><snippet>logging.debug(...)</snippet></ROW><ROW><id>18303653</id><snippet>basicConfig()</snippet></ROW><ROW><id>18303849</id><snippet>set1 = set(list1)
set2 = set(list2)
total = sorted(set1|set2)

new_list1 = [x if x in set1 else "MISSING" for x in total]
new_list2 = [x if x in set2 else "MISSING" for x in total]
</snippet></ROW><ROW><id>18303927</id><snippet>content</snippet></ROW><ROW><id>18303927</id><snippet>execute_script("$('#content').css('zoom', 5);")</snippet></ROW><ROW><id>18303927</id><snippet>#!/usr/bin/python

from selenium import webdriver
import time


def main():
    browser = webdriver.Chrome()
    browser.set_window_size(1000, 1000)
    browser.get("http://stackoverflow.com/users/1953475/b-mr-w")

    browser.execute_script("$('#content').css('zoom', 5);")
    time.sleep(5)

    browser.get_screenshot_as_file('screenshot.png')

if __name__ == '__main__':
    main()
</snippet></ROW><ROW><id>18303927</id><snippet>get_screenshot_as_file</snippet></ROW><ROW><id>18304310</id><snippet>Tk()</snippet></ROW><ROW><id>18304310</id><snippet>1</snippet></ROW><ROW><id>18304310</id><snippet>self.print_size</snippet></ROW><ROW><id>18304310</id><snippet>1</snippet></ROW><ROW><id>18304310</id><snippet>print self.root.winfo_width()</snippet></ROW><ROW><id>18304310</id><snippet>self.root = Tk()</snippet></ROW><ROW><id>18304310</id><snippet>self.root.wait_visibility(self.root)
</snippet></ROW><ROW><id>18304389</id><snippet>print</snippet></ROW><ROW><id>18304389</id><snippet>stdout</snippet></ROW><ROW><id>18304389</id><snippet>sys.stdout.encoding</snippet></ROW><ROW><id>18304389</id><snippet>PYTHONIOENCODING</snippet></ROW><ROW><id>18304389</id><snippet>$ PYTHONIOENCODING=utf-8 python myprogram.py
</snippet></ROW><ROW><id>18304443</id><snippet>with app.app_context():
    add_entry()
</snippet></ROW><ROW><id>18304446</id><snippet>"{}{}{}".format(subdomain, '.' if subdomain else '', fullDomain)
</snippet></ROW><ROW><id>18304446</id><snippet>"{subdomain}{dot}{fullDomain}".format(subdomain=subdomain, 
                                      dot='.' if subdomain else '', 
                                      fullDomain=fullDomain)
</snippet></ROW><ROW><id>18304446</id><snippet>"{}{}".format(subdomain + '.' if subdomain else '', fullDomain)
</snippet></ROW><ROW><id>18304474</id><snippet>userregistration</snippet></ROW><ROW><id>18304474</id><snippet>__init__</snippet></ROW><ROW><id>18304474</id><snippet>__init__</snippet></ROW><ROW><id>18304583</id><snippet>ret.content</snippet></ROW><ROW><id>18304583</id><snippet>ret.text</snippet></ROW><ROW><id>18304583</id><snippet>ret.text</snippet></ROW><ROW><id>18304583</id><snippet>os.open</snippet></ROW><ROW><id>18304676</id><snippet>soup.find()</snippet></ROW><ROW><id>18304676</id><snippet>src</snippet></ROW><ROW><id>18304676</id><snippet>film_id = '0423409'
url = 'http://www.imdb.com/title/tt%s/' % (film_id)
soup = BeautifulSoup(urllib2.urlopen(url).read())
link = soup.find(itemprop="image")
print(link["src"])
# output:
http://ia.media-imdb.com/images/M/MV5BMTg2ODMwNTY3NV5BMl5BanBnXkFtZTcwMzczNjEzMQ@@._V1_SY317_CR0,0,214,317_.jpg
</snippet></ROW><ROW><id>18304676</id><snippet>id</snippet></ROW><ROW><id>18304676</id><snippet>film_id</snippet></ROW><ROW><id>18304676</id><snippet>id()</snippet></ROW><ROW><id>18304682</id><snippet>c2</snippet></ROW><ROW><id>18304682</id><snippet>c2</snippet></ROW><ROW><id>18304682</id><snippet>c1</snippet></ROW><ROW><id>18304682</id><snippet>c1=counter_gen(8)

for x in c1:
    c2=counter_gen(3)
    for y in c2:
        print x, y
</snippet></ROW><ROW><id>18304682</id><snippet>c1</snippet></ROW><ROW><id>18304682</id><snippet>c2</snippet></ROW><ROW><id>18304682</id><snippet>for x in counter_gen(8):
    for y in counter_gen(3):
        print x, y
</snippet></ROW><ROW><id>18304965</id><snippet>copytree(source_dir, dest_dir, ignore=ignore_patterns(*ignoreList))
</snippet></ROW><ROW><id>18304965</id><snippet>ignore_patterns</snippet></ROW><ROW><id>18305074</id><snippet>foo, bar = func1(*func2("foo", "bar"))
                 ^
</snippet></ROW><ROW><id>18305403</id><snippet>inputFor= {}
for coin in ['5c','10c','20c','50c','$1','$2']:
    inputFor[coin]= int(input("Enter the number of " + coin + " coins you wish use: "))
</snippet></ROW><ROW><id>18305403</id><snippet>... inputFor['5c'] ...
... inputFor['10c'] ...
... inputFor['20c'] ...
... inputFor['50c'] ...
... inputFor['$1'] ...
... inputFor['$2'] ...
</snippet></ROW><ROW><id>18305833</id><snippet>x in container</snippet></ROW><ROW><id>18305833</id><snippet>x</snippet></ROW><ROW><id>18305833</id><snippet>ours in theirs</snippet></ROW><ROW><id>18305833</id><snippet>ours</snippet></ROW><ROW><id>18305833</id><snippet>theirs</snippet></ROW><ROW><id>18305833</id><snippet>[['a','b','c'], ...]</snippet></ROW><ROW><id>18305833</id><snippet>&gt;&gt;&gt; ours = ['a','b','c']    
&gt;&gt;&gt; theirs = [['a','b','c'], 1, 2]    
&gt;&gt;&gt; ours in theirs
True
</snippet></ROW><ROW><id>18306149</id><snippet>import xml.etree.ElementTree as ET
tree = ET.parse(filePath)
data = float(tree.find('InfoType/SpecificInfo')[0].text)
</snippet></ROW><ROW><id>18306340</id><snippet>from PyBlob import *</snippet></ROW><ROW><id>18306340</id><snippet>from PyBlob import *</snippet></ROW><ROW><id>18306340</id><snippet>from PyBlob import *</snippet></ROW><ROW><id>18306340</id><snippet>import *</snippet></ROW><ROW><id>18306812</id><snippet>Event</snippet></ROW><ROW><id>18306812</id><snippet>History</snippet></ROW><ROW><id>18306812</id><snippet>Device</snippet></ROW><ROW><id>18306812</id><snippet>TableA/B</snippet></ROW><ROW><id>18306812</id><snippet>class Event(Base):

    #tablename
    type = Column(Unicode(50), nullable=False, index=True)
    #foreign id
    table_id = Column(Integer, nullable=False, index=True)
    attr = Column(Unicode(50), nullable=False)
    old = Column(Unicode(50), nullable=False)
    new = Column(Unicode(50), nullable=False)

class MetadataMixin(object):
    @declared_attr
    def events(cls):
        joinstr = '{0}.id == foreign(Event.table_id) and Event.type == "{1}"'.format(cls.__name__, cls.__tablename__)
        return relationship('Event', primaryjoin=joinstr, backref=cls.__name__.lower())
</snippet></ROW><ROW><id>18306812</id><snippet>class Device(MetadataMixin, Base):
    pass

&gt;&gt;&gt; d = Device()
&gt;&gt;&gt; d.events
[]
</snippet></ROW><ROW><id>18306853</id><snippet>dog</snippet></ROW><ROW><id>18306853</id><snippet>animal</snippet></ROW><ROW><id>18306853</id><snippet>dog</snippet></ROW><ROW><id>18306853</id><snippet>animal</snippet></ROW><ROW><id>18306853</id><snippet>dog</snippet></ROW><ROW><id>18306853</id><snippet>subclass</snippet></ROW><ROW><id>18306853</id><snippet>inherited</snippet></ROW><ROW><id>18306853</id><snippet>animal</snippet></ROW><ROW><id>18306853</id><snippet>superclass</snippet></ROW><ROW><id>18306853</id><snippet>parent</snippet></ROW><ROW><id>18306853</id><snippet>dog</snippet></ROW><ROW><id>18306853</id><snippet>animal</snippet></ROW><ROW><id>18306897</id><snippet>put()</snippet></ROW><ROW><id>18306897</id><snippet>get_by_key_name</snippet></ROW><ROW><id>18306897</id><snippet>class Model(db.Model):
    variable = db.StringProperty()
    def change(self):
       self.variable = '123'
       self.put()
    def echo(self):
       return self.variable

class Change(webapp2.RequestHandler):
   def get(self):
       model = Model(key_name = 'test')
       model.change()

class Echo(webapp2.RequestHandler):
   def get(self):
       model = Model.get_by_key_name('test')
       self.response.out.write(model.echo())
</snippet></ROW><ROW><id>18307215</id><snippet>xc = sum(x for (x, y) in points) / len(points)
yc = sum(y for (x, y) in points) / len(points)
</snippet></ROW><ROW><id>18307215</id><snippet>sx = sy = sL = 0
for i in range(len(points)):   # counts from 0 to len(points)-1
    x0, y0 = points[i - 1]     # in Python points[-1] is last element of points
    x1, y1 = points[i]
    L = ((x1 - x0)**2 + (y1 - y0)**2) ** 0.5
    sx += (x0 + x1)/2 * L
    sy += (y0 + y1)/2 * L
    sL += L
xc = sx / sL
yc = sy / sL
</snippet></ROW><ROW><id>18307215</id><snippet>z</snippet></ROW><ROW><id>18307308</id><snippet>TCPServer</snippet></ROW><ROW><id>18307308</id><snippet>import tornado.httpserver
import tornado.ioloop
import tornado.web

class getToken(tornado.web.RequestHandler):
    def get(self):
        self.write("hello")

application = tornado.web.Application([
    (r'/', getToken),
])

if __name__ == '__main__':
    http_server = tornado.httpserver.HTTPServer(application, ssl_options={
        "certfile": "/var/pyTest/keys/ca.csr",
        "keyfile": "/var/pyTest/keys/ca.key",
    })
    http_server.listen(443)
    tornado.ioloop.IOLoop.instance().start()
</snippet></ROW><ROW><id>18307581</id><snippet>TIME_ZONE</snippet></ROW><ROW><id>18307581</id><snippet>TIME_ZONE</snippet></ROW><ROW><id>18307581</id><snippet>import django.utils.timezone
from pytz import timezone

class TimezoneMiddleware(object):
    def process_request(self, request):
        # Put logic here to choose timezone based on domain.
        if request.META['HTTP_HOST'] == 'hotel1.subdomain.com':
            tz = timezone('US/Eastern')
        else:
            tz = timezone('UTC')

        if tz:
            django.utils.timezone.activate(tz)
        else:
            django.utils.timezone.deactivate()
</snippet></ROW><ROW><id>18307609</id><snippet>numpy.repeat(multiColAry[:, 0], multiColAry[:, 2])</snippet></ROW><ROW><id>18307609</id><snippet>array[i, j, k]</snippet></ROW><ROW><id>18307609</id><snippet>array[i][j][k]</snippet></ROW><ROW><id>18308226</id><snippet>line = ' '
while line:
    line = input('Line: ')
    if not line:
        break # break out of the loop before raising any KeyErrors
    phonic = line.split()
    start = phonic[0]
    start_4 = phonic [3]
    a = start[0]
    if start_4.startswith(a):
        print('Good!')
    else:
        print("That's not right!")
</snippet></ROW><ROW><id>18308226</id><snippet>while line != ''</snippet></ROW><ROW><id>18308226</id><snippet>while line</snippet></ROW><ROW><id>18308226</id><snippet>''</snippet></ROW><ROW><id>18308226</id><snippet>False</snippet></ROW><ROW><id>18308226</id><snippet>!= False</snippet></ROW><ROW><id>18308226</id><snippet>== True</snippet></ROW><ROW><id>18308256</id><snippet>file = open('input.txt', 'r')

#coordinates
c = {}

for line in file:
    #items
    (x, y, z) = (float(n) for n in line.split())

    if (x, y) not in c:
        c[(x, y)] = [z, 1]
    elif c[(x, y)][0] &gt; z:
        c[(x, y)][0], c[(x, y)][1] = z, 1
    elif c[(x, y)][0] == z:
        c[(x, y)][1] += 1

for key in c:
    print("{} {} {} {}".format(key[0], key[1], c[key][0], c[key][1]))
</snippet></ROW><ROW><id>18308524</id><snippet>self</snippet></ROW><ROW><id>18308524</id><snippet>super(NamedList, self).__init__()
super(NamedList, self).__init__([])
</snippet></ROW><ROW><id>18308524</id><snippet>self</snippet></ROW><ROW><id>18308524</id><snippet>list.__init__(self)
</snippet></ROW><ROW><id>18308524</id><snippet>list</snippet></ROW><ROW><id>18308524</id><snippet>a_name</snippet></ROW><ROW><id>18308524</id><snippet>list.__init__()</snippet></ROW><ROW><id>18308524</id><snippet>self.clear(); self.extend(argument)</snippet></ROW><ROW><id>18308524</id><snippet>__init__()</snippet></ROW><ROW><id>18308524</id><snippet>list</snippet></ROW><ROW><id>18308871</id><snippet>ProcessEvent</snippet></ROW><ROW><id>18308871</id><snippet>pevent</snippet></ROW><ROW><id>18308871</id><snippet>self.pevent</snippet></ROW><ROW><id>18308871</id><snippet>None</snippet></ROW><ROW><id>18308871</id><snippet>__call__()</snippet></ROW><ROW><id>18308871</id><snippet>pyinotify.py</snippet></ROW><ROW><id>18308871</id><snippet>def __call__(self, event):
    stop_chaining = False
    if self.pevent is not None:
        # By default methods return None so we set as guideline
        # that methods asking for stop chaining must explicitly
        # return non None or non False values, otherwise the default
        # behavior will be to accept chain call to the corresponding
        # local method.
        stop_chaining = self.pevent(event)
    if not stop_chaining:
        return _ProcessEvent.__call__(self, event)
</snippet></ROW><ROW><id>18308871</id><snippet>SUFFIXES = {".md", ".markdown"}

def suffix_filter(event):
    # return True to stop processing of event (to "stop chaining")
    return os.path.splitext(event.name)[1] not in SUFFIXES

processevent = ProcessEvent(pevent=suffix_filter)
</snippet></ROW><ROW><id>18308874</id><snippet>myproc
</snippet></ROW><ROW><id>18308874</id><snippet>myproc()
</snippet></ROW><ROW><id>18308874</id><snippet>&lt;function myproc at blah&gt;</snippet></ROW><ROW><id>18308884</id><snippet>-item[1]</snippet></ROW><ROW><id>18308884</id><snippet>item[0]</snippet></ROW><ROW><id>18308884</id><snippet>&gt;&gt;&gt; data = [['Bob Person', 10], ['Josh Winner', 15], ['Jimmy Dexter', 5], ['Mary Goodsprings', 15]]
&gt;&gt;&gt; sorted(data, key=lambda item: (-item[1], item[0]))
[['Josh Winner', 15], ['Mary Goodsprings', 15], ['Bob Person', 10], ['Jimmy Dexter', 5]]
</snippet></ROW><ROW><id>18308960</id><snippet>for</snippet></ROW><ROW><id>18308960</id><snippet>os.chdir(path)
</snippet></ROW><ROW><id>18308960</id><snippet>for x in files:
  new = 'DSC0%d' %(num)   
  os.rename (x, new)
  num +=1
</snippet></ROW><ROW><id>18309037</id><snippet>self.tableWidget.addAction(self.actionCopy)
</snippet></ROW><ROW><id>18309037</id><snippet>tableWidget</snippet></ROW><ROW><id>18309229</id><snippet>coalesce(a[::3])</snippet></ROW><ROW><id>18309229</id><snippet>df</snippet></ROW><ROW><id>18309229</id><snippet>df[1:3]</snippet></ROW><ROW><id>18309229</id><snippet>df.ix[3:5]</snippet></ROW><ROW><id>18309229</id><snippet>class SpecialSlicer(object):
    def __init__(self, obj):
        self.obj = obj

    def __getitem__(self, ...):
       return sefl.obj[...]

class Array(object):
    def __init__(self):
       # do your stuff
       self.ss = SpecialSlicer(self)

    def __gettitem__(self, ...):
        return ....
</snippet></ROW><ROW><id>18309229</id><snippet> a = Array()
 a[3:4]
 a.ss[4:5]
</snippet></ROW><ROW><id>18309278</id><snippet>for w in word:
    print w
    for item in matched_word:
        print item, ":" ,w.count(item)
</snippet></ROW><ROW><id>18309596</id><snippet>request.FILES</snippet></ROW><ROW><id>18309596</id><snippet>UploadedFile</snippet></ROW><ROW><id>18309596</id><snippet>UploadedFile</snippet></ROW><ROW><id>18309596</id><snippet>if request.FILES['file'].name:
    filename = request.FILES['file'].name
</snippet></ROW><ROW><id>18309914</id><snippet>iter_segments()</snippet></ROW><ROW><id>18309914</id><snippet>matplotlib.path.Path</snippet></ROW><ROW><id>18309914</id><snippet>import numpy as np

def get_contour_verts(cn):
    contours = []
    # for each contour line
    for cc in cn.collections:
        paths = []
        # for each separate section of the contour line
        for pp in cc.get_paths():
            xy = []
            # for each segment of that section
            for vv in pp.iter_segments():
                xy.append(vv[0])
            paths.append(np.vstack(xy))
        contours.append(paths)

    return contours
</snippet></ROW><ROW><id>18309914</id><snippet>matplotlib._cntr</snippet></ROW><ROW><id>18309914</id><snippet>from matplotlib import _cntr as cntr

z = np.array(z)
x,y = np.mgrid[:z.shape[0],:z.shape[1]]
c = cntr.Cntr(x,y,z)

# trace a contour at z == 0.5
res = c.trace(0.5)
# result is a list of arrays of vertices and path codes
# (see docs for matplotlib.path.Path)
nseg = len(res)//2
segments,codes = res[:nseg],res[nseg:]

fig,ax = matplotlib.pyplot.subplots(1,1)
img = ax.imshow(z.T,origin='lower')
matplotlib.pyplot.colorbar(img)
ax.hold(True)
p = matplotlib.pyplot.Polygon(segments[0],fill=False,color='w')
ax.add_artist(p)
matplotlib.pyplot.show()
</snippet></ROW><ROW><id>18310544</id><snippet>e.args</snippet></ROW><ROW><id>18310544</id><snippet>str(e)</snippet></ROW><ROW><id>18310544</id><snippet>try:
    json.loads('""extra-data')
except ValueError as e:
    if e.args[0].startswith('Extra data:'):
        handle_error(e)
    else:
        raise
</snippet></ROW><ROW><id>18310544</id><snippet>except ValueError['Extra data'] ..</snippet></ROW><ROW><id>18310591</id><snippet>group_id</snippet></ROW><ROW><id>18310591</id><snippet>@apps.route()</snippet></ROW><ROW><id>18310591</id><snippet>def group_required():
    @wraps(func)
    def wrapper(group_id, *args, **kwargs):
        #Core_usergroup : table to match users and groups
        groups = Core_usergroup.query.filter_by(user_id = g.user.id).all()
        for group in groups:
            #if the current user is in the group : return func
            if int(group.group_id) == int(group_id) :
                return func(*args, **kwargs)
        flash(gettext('You have no right on this group'))
        return render_template('access_denied.html')     
    return wrapper
</snippet></ROW><ROW><id>18310632</id><snippet>from operator import or_
query_words = ['word1', 'word2', 'word3', ...]
query_array = [Q(text__icontains=w) for w in query_words]
reduce(or_, query_array)
</snippet></ROW><ROW><id>18310709</id><snippet>&gt;&gt;&gt; s = u'W\xc3\xbcrfel.jpg'
&gt;&gt;&gt; print s.encode('latin1')
Würfel.jpg
&gt;&gt;&gt; 
</snippet></ROW><ROW><id>18310709</id><snippet>.encode('latin1')</snippet></ROW><ROW><id>18310709</id><snippet>latin1</snippet></ROW><ROW><id>18310709</id><snippet>utf8</snippet></ROW><ROW><id>18311133</id><snippet>bytearray</snippet></ROW><ROW><id>18311133</id><snippet>my_bytes = bytearray()
my_bytes.append(123)
my_bytes.append(125)

// my_bytes is b'{}' now

s.send(my_bytes)
</snippet></ROW><ROW><id>18311133</id><snippet>data = s.recv(2048)
my_bytes = bytearray(data)
</snippet></ROW><ROW><id>18311133</id><snippet>my_bytes</snippet></ROW><ROW><id>18311133</id><snippet>control_frame = my_bytes[0] &amp; 128
</snippet></ROW><ROW><id>18311133</id><snippet>128</snippet></ROW><ROW><id>18311133</id><snippet>10000000</snippet></ROW><ROW><id>18311529</id><snippet>&gt;&gt;&gt; 0b11001010
202
</snippet></ROW><ROW><id>18311529</id><snippet>int()</snippet></ROW><ROW><id>18311529</id><snippet>base</snippet></ROW><ROW><id>18311529</id><snippet>&gt;&gt;&gt; int('0b11001010', 2)
202
</snippet></ROW><ROW><id>18311529</id><snippet>bin()</snippet></ROW><ROW><id>18311529</id><snippet>&gt;&gt;&gt; bin(202)
0b11001010
</snippet></ROW><ROW><id>18311541</id><snippet>reg = r"(?&lt;!\d)12345(?!\d)"
</snippet></ROW><ROW><id>18311541</id><snippet>&gt;&gt;&gt; import re
&gt;&gt;&gt; reg = re.compile(r"(?&lt;!\d)12345(?!\d)")
&gt;&gt;&gt; reg.search('12345')
&lt;_sre.SRE_Match object at 0x102981ac0&gt;
&gt;&gt;&gt; reg.search('-12345-')
&lt;_sre.SRE_Match object at 0x102a51238&gt;
&gt;&gt;&gt; reg.search('0123456')
&gt;&gt;&gt; reg.search('012345-')
&gt;&gt;&gt; reg.search('-123456')
</snippet></ROW><ROW><id>18311900</id><snippet>numpy</snippet></ROW><ROW><id>18311900</id><snippet>free()</snippet></ROW><ROW><id>18311900</id><snippet>free()</snippet></ROW><ROW><id>18311900</id><snippet>malloc()</snippet></ROW><ROW><id>18311900</id><snippet>malloc()</snippet></ROW><ROW><id>18311900</id><snippet>free()</snippet></ROW><ROW><id>18311900</id><snippet>numpy</snippet></ROW><ROW><id>18311900</id><snippet>In [1]: a = [[0] * 100 for _ in range(1000000)]

In [2]: del a
</snippet></ROW><ROW><id>18311900</id><snippet>In [1]: a = [[0] * 10000 for _ in range(10000)]

In [2]: del a
</snippet></ROW><ROW><id>18311978</id><snippet>filename = form.clean_data['file'].name
</snippet></ROW><ROW><id>18312305</id><snippet>locals()</snippet></ROW><ROW><id>18312305</id><snippet>for i in data:
    print locals()[i]
</snippet></ROW><ROW><id>18312305</id><snippet>x</snippet></ROW><ROW><id>18312305</id><snippet>y</snippet></ROW><ROW><id>18312305</id><snippet>locals()</snippet></ROW><ROW><id>18312439</id><snippet>y</snippet></ROW><ROW><id>18312439</id><snippet>1</snippet></ROW><ROW><id>18312439</id><snippet>float64</snippet></ROW><ROW><id>18312439</id><snippet>1</snippet></ROW><ROW><id>18312439</id><snippet>float32</snippet></ROW><ROW><id>18312439</id><snippet>float</snippet></ROW><ROW><id>18312439</id><snippet>epsilon</snippet></ROW><ROW><id>18312439</id><snippet>epsilon</snippet></ROW><ROW><id>18312439</id><snippet>In [13]: epsilon = 1e-11

In [14]: number = np.float64(1) - 1e-16

In [15]: target = 1

In [16]: abs(number - target) &lt; epsilon   # instead of number == target
Out[16]: True
</snippet></ROW><ROW><id>18312439</id><snippet>numpy</snippet></ROW><ROW><id>18312439</id><snippet>np.allclose</snippet></ROW><ROW><id>18312439</id><snippet>np.allclose(1 - 1e-16, 1) -&gt; True</snippet></ROW><ROW><id>18312439</id><snippet>numpy.set_printoptions</snippet></ROW><ROW><id>18312439</id><snippet>np.float32</snippet></ROW><ROW><id>18312439</id><snippet>64</snippet></ROW><ROW><id>18312439</id><snippet>In [1]: import numpy as np

In [2]: np.float(1) - 1e-16
Out[2]: 0.9999999999999999

In [3]: np.array([1 - 1e-16])
Out[3]: array([ 1.])

In [4]: np.set_printoptions(precision=16)

In [5]: np.array([1 - 1e-16])
Out[5]: array([ 0.9999999999999999])

In [6]: np.float(1) - 1e-16
Out[6]: 0.9999999999999999
</snippet></ROW><ROW><id>18312439</id><snippet>print y</snippet></ROW><ROW><id>18312439</id><snippet>y</snippet></ROW><ROW><id>18312439</id><snippet>In [1]: import numpy as np

In [2]: np.float(1) - 1e-16
Out[2]: 0.9999999999999999

In [3]: print(np.float64(1) - 1e-16)
1.0
</snippet></ROW><ROW><id>18312439</id><snippet>print</snippet></ROW><ROW><id>18312439</id><snippet>str</snippet></ROW><ROW><id>18312439</id><snippet>repr</snippet></ROW><ROW><id>18312439</id><snippet>In [9]: str(np.float64(1) - 1e-16)
Out[9]: '1.0'

In [10]: repr(np.float64(1) - 1e-16)
Out[10]: '0.99999999999999989'
</snippet></ROW><ROW><id>18312518</id><snippet>split()</snippet></ROW><ROW><id>18312518</id><snippet>'\d+'</snippet></ROW><ROW><id>18312518</id><snippet>'\W+'</snippet></ROW><ROW><id>18312518</id><snippet>import re

print([i for i in re.split(r'(\d+|\W+)', 'x+13.5*10x-4e1') if i])
</snippet></ROW><ROW><id>18312518</id><snippet>['x', '+', '13', '.', '5', '*', '10', 'x', '-', '4', 'e', '1']
</snippet></ROW><ROW><id>18312518</id><snippet>[\d.]+</snippet></ROW><ROW><id>18312518</id><snippet>13.5.5</snippet></ROW><ROW><id>18312518</id><snippet>print([i for i in re.split(r'([\d.]+|\W+)', 'x+13.5*10x-4e1') if i])
</snippet></ROW><ROW><id>18312518</id><snippet>['x', '+', '13.5', '*', '10', 'x', '-', '4', 'e', '1']
</snippet></ROW><ROW><id>18312770</id><snippet>readline</snippet></ROW><ROW><id>18312770</id><snippet>from numpy import array</snippet></ROW><ROW><id>18312770</id><snippet>Alt+V</snippet></ROW><ROW><id>18312770</id><snippet>Ctrl+V</snippet></ROW><ROW><id>18312770</id><snippet>array([[1, 1], [2, 2]])
</snippet></ROW><ROW><id>18312770</id><snippet>read_clipboard</snippet></ROW><ROW><id>18312770</id><snippet>import pandas as pd
pd.read_clipboard()            # If you have selected the headers
pd.read_clipboard(header=None) # If you haven't selected the headers
</snippet></ROW><ROW><id>18312780</id><snippet>.py</snippet></ROW><ROW><id>18312780</id><snippet>.py</snippet></ROW><ROW><id>18312780</id><snippet>.pyo</snippet></ROW><ROW><id>18312780</id><snippet>.pyc</snippet></ROW><ROW><id>18312780</id><snippet>$ rpm --showrc | grep -A 7 py.*_compile
-14: py3_compile(O)
find %1 -name '*.pyc' -exec rm -f {} ";"
python3 -c "import sys, os, compileall; br='%{buildroot}'; compileall.compile_dir(sys.argv[1], ddir=br and (sys.argv[1][len(os.path.abspath(br)):]+'/') or None)" %1
%{-O:
find %1 -name '*.pyo' -exec rm -f {} ";"
python3 -O -c "import sys, os, compileall; br='%{buildroot}'; compileall.compile_dir(sys.argv[1], ddir=br and (sys.argv[1][len(os.path.abspath(br)):]+'/') or None)" %1
}
-14: py3_incdir /usr/include/python3.3m
--
-14: py_compile(O)
find %1 -name '*.pyc' -exec rm -f {} \;
python -c "import sys, os, compileall; br='%{buildroot}'; compileall.compile_dir(sys.argv[1], ddir=br and (sys.argv[1][len(os.path.abspath(br)):]+'/') or None)" %1
%{-O:
find %1 -name '*.pyo' -exec rm -f {} \;
python -O -c "import sys, os, compileall; br='%{buildroot}'; compileall.compile_dir(sys.argv[1], ddir=br and (sys.argv[1][len(os.path.abspath(br)):]+'/') or None)" %1
}
-14: py_incdir  %{py_prefix}/include/python%{py_ver}
</snippet></ROW><ROW><id>18312780</id><snippet>%py_compile</snippet></ROW><ROW><id>18312780</id><snippet>%py3_compile</snippet></ROW><ROW><id>18312780</id><snippet>%build</snippet></ROW><ROW><id>18312780</id><snippet>.pyc</snippet></ROW><ROW><id>18312780</id><snippet>.pyo</snippet></ROW><ROW><id>18312861</id><snippet>class Parent(Base):
  __tablename__ = "parents"
  dbid = Column(Integer, Sequence("parent_seq"), primary_key=True)
  children = relationship("Child", order_by = "Children.dbid", backref = "_parent")

  def __init__(self, children = [])
    self.children = children  #remember to initialize children as list!
</snippet></ROW><ROW><id>18312861</id><snippet>class Child(Base):
  __tablename__ = "children"
  dbid = Column(Integer, Sequence("child_seq"), primary_key=True)
  parent_dbid = Column(Integer, ForeignKey("parents.dbid"))
</snippet></ROW><ROW><id>18312861</id><snippet>p = Parent()
c = Child()
p.children.append(c)

session.add(p)
session.add(c)
session.commit()
</snippet></ROW><ROW><id>18312861</id><snippet>session.query(...)</snippet></ROW><ROW><id>18312981</id><snippet>class MyException(Exception):
    """Expect a custom message here."""
    def __init__(self, err_msg):
        super(MyException, self).__init__(err_msg)
        self.err_msg = err_msg

    def __str__(self):
        return self.err_msg


def CustomExceptionA(MyException):
    pass

def CustomExceptionB(MyException):
    pass
</snippet></ROW><ROW><id>18313036</id><snippet>&gt;&gt;&gt; bool_tuple = [(True, '123X'), (False, '734Y'), (False, '933Z')]
for b, val in bool_tuple:
    if not b:
        print "Item {} failed".format(val)
...         
Item 734Y failed
Item 933Z failed
</snippet></ROW><ROW><id>18313036</id><snippet>b, val</snippet></ROW><ROW><id>18313036</id><snippet>bool_tuple</snippet></ROW><ROW><id>18313036</id><snippet>b</snippet></ROW><ROW><id>18313036</id><snippet>val</snippet></ROW><ROW><id>18313036</id><snippet>&gt;&gt;&gt; b, val = (True, '123X')
&gt;&gt;&gt; b
True
&gt;&gt;&gt; val
'123X'
</snippet></ROW><ROW><id>18313219</id><snippet>import pygame
x,y = pygame.mouse.get_pos()
pygame.mouse.set_pos([x+1,y+1])
pygame.mouse.set_pos([x,y])
</snippet></ROW><ROW><id>18313219</id><snippet>import win32api, win32con
def move(x,y,press=False):
    win32api.SetCursorPos((x,y))
    if press:
        click(x,y)
def click(x,y):
    win32api.mouse_event(win32con.MOUSEEVENTF_LEFTDOWN,x,y,0,0)
    win32api.mouse_event(win32con.MOUSEEVENTF_LEFTUP,x,y,0,0)
move(10,10,True)
</snippet></ROW><ROW><id>18313404</id><snippet>things          = collection.find() 
</snippet></ROW><ROW><id>18313404</id><snippet>Cursor</snippet></ROW><ROW><id>18313404</id><snippet>Cursor</snippet></ROW><ROW><id>18313404</id><snippet>list</snippet></ROW><ROW><id>18313404</id><snippet>things</snippet></ROW><ROW><id>18313404</id><snippet>Cursor</snippet></ROW><ROW><id>18313404</id><snippet>find</snippet></ROW><ROW><id>18313404</id><snippet>first_list</snippet></ROW><ROW><id>18313404</id><snippet>Cursor</snippet></ROW><ROW><id>18313404</id><snippet>things</snippet></ROW><ROW><id>18313404</id><snippet>second_list</snippet></ROW><ROW><id>18313424</id><snippet>(...)?</snippet></ROW><ROW><id>18313424</id><snippet>re.sub('\x03\\d*,?\\d*', '', content)
</snippet></ROW><ROW><id>18313468</id><snippet>r".*([a-z])\1.*((?=(?!\1))[a-z])\2.*((?=(?!\1))(?=(?!\2))[a-z])\3.*"
</snippet></ROW><ROW><id>18313468</id><snippet>(?=expr)</snippet></ROW><ROW><id>18313468</id><snippet>(?!expr)</snippet></ROW><ROW><id>18313745</id><snippet>scipy</snippet></ROW><ROW><id>18313745</id><snippet>matplotlib</snippet></ROW><ROW><id>18313745</id><snippet>import numpy as np
from scipy.stats import mstats
import matplotlib.pyplot as plt

# Create 10 columns with 100 rows of random data
rd = np.random.randn(100, 10)
# Calculate the quantiles column wise
quantiles = mstats.mquantiles(rd, axis=0)
# Plot it
labels = ['25%', '50%', '75%']
for i, q in enumerate(quantiles):
    plt.plot(q, label=labels[i])
plt.legend()
</snippet></ROW><ROW><id>18313745</id><snippet>import numpy as np
import pandas as pd
# Create random data
rd = pd.DataFrame(np.random.randn(100, 10))
# Calculate all the desired values
df = pd.DataFrame({'mean': rd.mean(), 'median': rd.median(),
                   '25%': rd.quantile(0.25), '50%': rd.quantile(0.5),
                   '75%': rd.quantile(0.75)})
# And plot it
df.plot()
</snippet></ROW><ROW><id>18313745</id><snippet>rd.describe().T.drop('count', axis=1).plot()
</snippet></ROW><ROW><id>18313745</id><snippet>count</snippet></ROW><ROW><id>18313932</id><snippet>remove_comments=True</snippet></ROW><ROW><id>18313932</id><snippet>from lxml import etree, objectify

parser = etree.XMLParser(remove_comments=True)
objectify.parse(xmlPath, parser=parser)
</snippet></ROW><ROW><id>18314439</id><snippet>from bs4 import BeautifulSoup

soup = BeautifulSoup(htmlsource)

headers = soup.find_all(['h1', 'h2', 'h3', 'h4', 'h5', 'h6'])
print [h.attrs.get('id', '') for h in headers]
</snippet></ROW><ROW><id>18314439</id><snippet>&gt;&gt;&gt; from bs4 import BeautifulSoup
&gt;&gt;&gt; htmlsource = '&lt;h1&gt;Header1&lt;/h1&gt;&lt;h2 id="header2"&gt;header2&lt;/h2&gt;'
&gt;&gt;&gt; soup = BeautifulSoup(htmlsource)
&gt;&gt;&gt; headers = soup.find_all(['h1', 'h2', 'h3', 'h4', 'h5', 'h6'])
&gt;&gt;&gt; [h.attrs.get('id', '') for h in headers]
['', 'header2']
</snippet></ROW><ROW><id>18314993</id><snippet>with open("your_file.csv", "rb") as source:
    lines = [line for line in source]
</snippet></ROW><ROW><id>18314993</id><snippet>import random
random_choice = random.sample(lines, 1000)
</snippet></ROW><ROW><id>18314993</id><snippet>with open("new_file.csv", "wb") as sink:
    sink.write("\n".join(random_choice))
</snippet></ROW><ROW><id>18316030</id><snippet>object</snippet></ROW><ROW><id>18316030</id><snippet>&gt;&gt;&gt; import numpy as np
&gt;&gt;&gt; a = np.arange(10).reshape(5,2)
&gt;&gt;&gt; b = np.arange(10, dtype=object).reshape(5,2)
&gt;&gt;&gt; np.std(a)
2.8722813232690143
&gt;&gt;&gt; np.std(a, axis=1)
array([ 0.5,  0.5,  0.5,  0.5,  0.5])
&gt;&gt;&gt; np.std(b)
2.8722813232690143
&gt;&gt;&gt; np.std(b, axis=1)
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
  File "/usr/lib/python2.7/dist-packages/numpy/core/fromnumeric.py", line 2590, in std
    keepdims=keepdims)
  File "/usr/lib/python2.7/dist-packages/numpy/core/_methods.py", line 105, in _std
    ret = um.sqrt(ret, out=ret)
AttributeError: sqrt
</snippet></ROW><ROW><id>18316173</id><snippet>moment</snippet></ROW><ROW><id>18316173</id><snippet>root</snippet></ROW><ROW><id>18316173</id><snippet>supervisord.conf</snippet></ROW><ROW><id>18316173</id><snippet>supervisord.conf</snippet></ROW><ROW><id>18316239</id><snippet>In [26]: nltk.parse_cfg(u'S -&gt; "\N{EURO SIGN}" | bar')
Out[26]: &lt;Grammar with 2 productions&gt;

In [27]: nltk.parse_cfg(u'S -&gt; "\N{EURO SIGN}" | bar'.encode("utf-8"))
Out[27]: &lt;Grammar with 2 productions&gt;

In [28]: nltk.parse_cfg(u'S -&gt; "\N{EURO SIGN}" | bar'.encode("unicode_escape"))
Out[28]: &lt;Grammar with 2 productions&gt;
</snippet></ROW><ROW><id>18316239</id><snippet>"€"</snippet></ROW><ROW><id>18316239</id><snippet>bar</snippet></ROW><ROW><id>18316417</id><snippet>subsample</snippet></ROW><ROW><id>18316417</id><snippet>originalPlantImage = PhotoImage(file="images/Arable_Cell.gif")
displayPlantImage = originalPlantImage.subsample(2, 2)
canvas.create_image(0, 0, anchor=NW, image=displayPlantImage)
</snippet></ROW><ROW><id>18316930</id><snippet>for</snippet></ROW><ROW><id>18316930</id><snippet>for posts in recent_posts, forum_posts, search_posts, rss_posts:
    posts.append("&lt;li class=" + date + "&gt;&lt;a href='" + page2 + post + ".html'&gt;" + string.replace(title, '#', '') + "&lt;/a&gt;&lt;/li&gt;")
    posts.sort()
    posts.reverse()
</snippet></ROW><ROW><id>18316980</id><snippet>def upload(self, myFile):
    MySQLconnection = MySQLdb.connect(host=cherrypy.request.app.config['Database']['host'], 
                                 passwd=cherrypy.request.app.config['Database']['passwd'],
                                 db=cherrypy.request.app.config['Database']['db'],
                                 user=cherrypy.request.app.config['Database']['user'],
                                 port=cherrypy.request.app.config['Database']['port'], 
                                 cursorclass=DictCursor)
    MySQLcursor = MySQLconnection.cursor()
    size = 0

    # add this line
    all_data = bytearray()

    while True:
        data = myFile.file.read(8192)
        all_data += data
        if not data:
            break
        size += len(data)

        saved_file=open('upload_path', 'wb') 
        saved_file.write(all_data) 
        saved_file.close()

    MySQLcursor.execute("insert into ImagePathDatabase (path) values ('" + MySQLdb.escape_string(myFile.filename) + "')")
    MySQLcursor.execute("commit;")
</snippet></ROW><ROW><id>18316991</id><snippet>def process(request):
    if request.method == 'POST':
        data = request.POST
        spec_filter = {}
        for attribute in ['screenGroup', 'storage', 'mSystem']:
            if attribute in data and data[attribute]:
                spec_filter[attribute] = data[attribute] 
        results = Specs.objects.filter(**spec_filter)
        context = {'results' : results}
        return render(request, 'process.html', context)
</snippet></ROW><ROW><id>18316991</id><snippet>Specs</snippet></ROW><ROW><id>18317154</id><snippet>__subclasses__()</snippet></ROW><ROW><id>18317154</id><snippet>Rule</snippet></ROW><ROW><id>18317154</id><snippet>rule_list = [cls() for cls in Rule.__subclasses__()]
</snippet></ROW><ROW><id>18317154</id><snippet>Rule</snippet></ROW><ROW><id>18317154</id><snippet>import rule
rule_list = []
for name in dir(rule):
    value = getattr(rule, name)
    if isinstance(value, type) and issubclass(value, Rule):
        rule_list.append(value())
</snippet></ROW><ROW><id>18317154</id><snippet>issubclass</snippet></ROW><ROW><id>18317154</id><snippet>TypeError</snippet></ROW><ROW><id>18317154</id><snippet>issubclass</snippet></ROW><ROW><id>18317412</id><snippet>re.MULTILINE</snippet></ROW><ROW><id>18317412</id><snippet>_NAME_KEY_[^{]*+\{([^}]+)\}</snippet></ROW><ROW><id>18317412</id><snippet>_NAME_KEY_</snippet></ROW><ROW><id>18317412</id><snippet>[^{]*</snippet></ROW><ROW><id>18317412</id><snippet>\{</snippet></ROW><ROW><id>18317412</id><snippet>([^}]+)</snippet></ROW><ROW><id>18317412</id><snippet>\}</snippet></ROW><ROW><id>18317917</id><snippet>QTextCursor cursor = ui.textEdit-&gt;textCursor();
int y = cursor.blockNumber() + 1;
int x = cursor.columnNumber() + 1;
</snippet></ROW><ROW><id>18317975</id><snippet>range_with_holes = (j for j in xrange(1, 31) if j != 6)

for i in range_with_holes:
    ....
</snippet></ROW><ROW><id>18317975</id><snippet>itertools.chain</snippet></ROW><ROW><id>18317975</id><snippet>range_with_holes = itertools.chain(xrange(1, 6), xrange(7, 31))
</snippet></ROW><ROW><id>18317975</id><snippet>for i in range(1, 31):
    if i == 6:
        continue

    ...
</snippet></ROW><ROW><id>18317982</id><snippet>where</snippet></ROW><ROW><id>18317982</id><snippet>apply</snippet></ROW><ROW><id>18317982</id><snippet>In [11]: s = pd.Series([1., 2., 3.], index=['a' ,'b', 'c'])

In [12]: s.where(s.index != 'a', 5)
Out[12]: 
a    5
b    2
c    3
dtype: float64
</snippet></ROW><ROW><id>18317982</id><snippet>In [13]: (2 * s + 1).where((s.index == 'b') | (s.index == 'c'), -s)
Out[13]: 
a   -1
b    5
c    7
dtype: float64

In [14]: (2 * s + 1).where(s.index != 'a', -s)
Out[14]: 
a   -1
b    5
c    7
dtype: float64
</snippet></ROW><ROW><id>18317982</id><snippet>apply</snippet></ROW><ROW><id>18318010</id><snippet>INSERT INTO `table` (`password`) 
VALUES (AES_ENCRYPT('{$sPassword}', '{$sEncryptionKey}'))
</snippet></ROW><ROW><id>18318010</id><snippet>SELECT CONVERT(AES_DECRYPT(`table`.`password`, '{$sEncryptionKey}') USING 'utf8')
AS `password`
</snippet></ROW><ROW><id>18318356</id><snippet>dictobject.c</snippet></ROW><ROW><id>18318356</id><snippet>static int
dict_update_common(PyObject *self, PyObject *args, PyObject *kwds, char *methname)
{
    PyObject *arg = NULL;
    int result = 0;

    if (!PyArg_UnpackTuple(args, methname, 0, 1, &amp;arg))
        result = -1;

    else if (arg != NULL) {
        _Py_IDENTIFIER(keys);
        if (_PyObject_HasAttrId(arg, &amp;PyId_keys))
            result = PyDict_Merge(self, arg, 1);
        else
            result = PyDict_MergeFromSeq2(self, arg, 1);
    }
    if (result == 0 &amp;&amp; kwds != NULL) {
        if (PyArg_ValidateKeywordArguments(kwds))
            result = PyDict_Merge(self, kwds, 1);
        else
            result = -1;
    }
    return result;
}
</snippet></ROW><ROW><id>18318356</id><snippet>keys</snippet></ROW><ROW><id>18318356</id><snippet>PyDict_GetItem()</snippet></ROW><ROW><id>18318356</id><snippet>dict</snippet></ROW><ROW><id>18318356</id><snippet>UserDict</snippet></ROW><ROW><id>18318448</id><snippet>def prog_rownum(filename, ref):
    """ Return a list with the line numbers where ref appears in filename """
    with open(filename) as f:
        return [line_num for line_num, line in enumerate(f) 
                if line.startswith(ref)]    # alternatively "if ref in line" checks anywhere
</snippet></ROW><ROW><id>18318448</id><snippet>&gt;&gt;&gt; print prog_rownum('file.csv', 'U16')
[2, 5, 7]
</snippet></ROW><ROW><id>18318831</id><snippet>invert_zaxis</snippet></ROW><ROW><id>18318831</id><snippet>Axes3D</snippet></ROW><ROW><id>18318831</id><snippet>from matplotlib import pyplot as p
from mpl_toolkits.mplot3d import Axes3D    # @UnusedImport

import numpy as np
from math import pi, cos, sin

z = np.arange(0, 1, 0.02)
theta = np.arange(0, 2 * pi + pi / 50, pi / 50)

fig = p.figure()
axes1 = fig.add_subplot(111, projection='3d')
for zval in z:
    x = zval * np.array([cos(q) for q in theta])
    y = zval * np.array([sin(q) for q in theta])
    axes1.plot(x, y, -zval, 'b-')
axes1.set_xlabel("x label")
axes1.set_ylabel("y label")
axes1.set_zlabel("z label")

axes1.invert_zaxis()

p.show()
</snippet></ROW><ROW><id>18318850</id><snippet>def maxafter(l):
    max = 1
    for elt in l:
        if elt &gt; max: max = elt
        yield max
[[x for x in maxafter(l[::-1])][::-1] for l in L]
</snippet></ROW><ROW><id>18318866</id><snippet>/</snippet></ROW><ROW><id>18318866</id><snippet>if i</snippet></ROW><ROW><id>18318866</id><snippet>[-1]</snippet></ROW><ROW><id>18318866</id><snippet>int()</snippet></ROW><ROW><id>18318866</id><snippet>object_id = int([i for i in str(request.path).split('/') if i][-1])
print(object_id)
</snippet></ROW><ROW><id>18318866</id><snippet>15
</snippet></ROW><ROW><id>18318938</id><snippet>statsmodels</snippet></ROW><ROW><id>18318938</id><snippet>scikits</snippet></ROW><ROW><id>18318938</id><snippet>try:
    import statsmodels.api as sm
except ImportError:
    import scikits.statsmodels.api as sm
</snippet></ROW><ROW><id>18318938</id><snippet>import statsmodels.api as sm
</snippet></ROW><ROW><id>18318943</id><snippet>1</snippet></ROW><ROW><id>18318943</id><snippet>1</snippet></ROW><ROW><id>18318943</id><snippet>dict = {i: list.count(i) for i in set(list)}
</snippet></ROW><ROW><id>18318943</id><snippet>xs = [1,2,6,3,4,5,1,1,3,2,2,5]
counts = {}
for x in xs:
  counts[x] = counts.get(x, 0) + 1
</snippet></ROW><ROW><id>18318943</id><snippet>counts</snippet></ROW><ROW><id>18318943</id><snippet>{1: 3, 2: 3, 3: 2, 4: 1, 5: 2, 6: 1}</snippet></ROW><ROW><id>18318943</id><snippet>collections.Counter</snippet></ROW><ROW><id>18319041</id><snippet>id</snippet></ROW><ROW><id>18319041</id><snippet>equipment_id</snippet></ROW><ROW><id>18319041</id><snippet>class RunableFilters(models.Model):
    equipment_id = models.BigIntegerField( primary_key=True)  #&lt;-- here
    filter_file_name = models.CharField(max_length=255,  ...
</snippet></ROW><ROW><id>18319115</id><snippet>ShowModal</snippet></ROW><ROW><id>18319115</id><snippet>class GooeyPi(wx.Frame):
    def __init__(self, *args, **kwargs):
        super(GooeyPi, self).__init__(*args, **kwargs)
        self.InitUI()
        self.SetSize((460,350))
        self.SetTitle('GooeyPi - PyInstaller GUI')
        self.Show()
        self.CheckFirstRun() # Checks for first run here.

    .....

    def CheckFirstRun(self):
        config = controller.getConfig()
        if config['pyidir'] == '':
            ...
            self.OnPreferences(None)
    ....

    def OnPreferences(self, e):
        prefdlg = pref.Preferences(None, title='Edit Preferneces')
        prefdlg.ShowModal()
        prefdlg.Destroy()
</snippet></ROW><ROW><id>18319115</id><snippet>class Preferences(wx.Dialog):
    def __init__(self, *args, **kw):
        super(Preferences, self).__init__(*args, **kw)
        self.InitUI()
        self.SetSize((380,290))
        self.SetTitle("Preferences")

    def InitUI(self):
         you_get_the_idea...
</snippet></ROW><ROW><id>18319156</id><snippet>import string
import random

print(''.join(random.choice(string.ascii_uppercase) for i in range(12)))
</snippet></ROW><ROW><id>18319156</id><snippet>QPUPZVVHUNSN
EFJACZEBYQEB
QBQJJEEOYTZY
EOJUSUEAJEEK
QWRWLIWDTDBD
</snippet></ROW><ROW><id>18319156</id><snippet>string.digits</snippet></ROW><ROW><id>18319156</id><snippet>string.ascii_uppercase</snippet></ROW><ROW><id>18319156</id><snippet>229945986931
867348810313
618228923380
</snippet></ROW><ROW><id>18319394</id><snippet>id_str</snippet></ROW><ROW><id>18319394</id><snippet>id</snippet></ROW><ROW><id>18319679</id><snippet>for history in open('/home/user/.bash_history):
    print(history, end='')
</snippet></ROW><ROW><id>18319964</id><snippet>a = [a + b for a, b in zip(a, b)]
</snippet></ROW><ROW><id>18319964</id><snippet>a = [aa + bb for aa, bb in zip(a, b)]</snippet></ROW><ROW><id>18319964</id><snippet>self.__vector = [self.__vector + vector.__vector
                 for self.__vector, vector.__vector
                 in zip(self.__vector, vector.__vector)]
</snippet></ROW><ROW><id>18319964</id><snippet>self.__vector = [aa + bb
                 for aa, bb
                 in zip(self.__vector, vector.__vector)]
</snippet></ROW><ROW><id>18319964</id><snippet>__iadd__</snippet></ROW><ROW><id>18319964</id><snippet>   self.__vector = vector
</snippet></ROW><ROW><id>18319964</id><snippet>vector = []</snippet></ROW><ROW><id>18319964</id><snippet>self.__vector = list(vector)</snippet></ROW><ROW><id>18320104</id><snippet>syntax clear pythonOperator
</snippet></ROW><ROW><id>18320239</id><snippet>import re


functions = ["details", "nvp_add"]
caselines_index = []
cases = []
readlines = []

def read(in_file):
  global cases
  global caselines_index
  global readlines
  with open(in_file, 'r') as file:
    for line in file.readlines():
      readlines.append(line.strip())
    for line in readlines:
      case_search = re.search("case\s\".+?\"\:\s", line)
      if case_search:
        caselines_index.append(readlines.index(line))
    print caselines_index
    caselines_index_iter = iter(caselines_index)
    int_line_index = int(next(caselines_index_iter))
    int_next_index = int(next(caselines_index_iter))
    while True:
      try:
        case_text = ' '.join(readlines[int_line_index:int_next_index]).strip()
        case = [readlines[int_line_index].strip(), case_text]
        cases.append(case)
        int_line_index = int_next_index
        int_next_index = int(next(caselines_index_iter))
      except StopIteration:
        case_text = ' '.join(readlines[int_line_index:len(readlines) - 1]).strip()
        case = [readlines[int_line_index].strip(), case_text]
        cases.append(case)
        break

def work():
  for func in functions:
    with open(func+".txt", 'w+') as result_file:
      for case_list in cases:
        caseline = case_list[0].strip()
        result_file.write(caseline + "\n")
        nvp = re.findall(func+"\(.+?\)", case_list[1].strip())

        for item in nvp:
          result_list = re.findall("(\$.+?)[\,\)]", item)

          for result in result_list:
            if "$*" not in result:
              result_file.write(result + "\n")

def main():
  global functions
  in_file = "input.txt"
  read(in_file)
  work()


if __name__=="__main__":
  main()
</snippet></ROW><ROW><id>18320289</id><snippet>import re


functions = ["details", "nvp_add"]
caselines_index = []
cases = []
readlines = []

def read(in_file):
  global cases
  global caselines_index
  global readlines
  with open(in_file, 'r') as file:
    for line in file.readlines():
      readlines.append(line.strip())
    for line in readlines:
      case_search = re.search("case\s\".+?\"\:\s", line)
      if case_search:
        caselines_index.append(readlines.index(line))
    print caselines_index
    caselines_index_iter = iter(caselines_index)
    int_line_index = int(next(caselines_index_iter))
    int_next_index = int(next(caselines_index_iter))
    while True:
      try:
        case_text = ' '.join(readlines[int_line_index:int_next_index]).strip()
        case = [readlines[int_line_index].strip(), case_text]
        cases.append(case)
        int_line_index = int_next_index
        int_next_index = int(next(caselines_index_iter))
      except StopIteration:
        case_text = ' '.join(readlines[int_line_index:len(readlines) - 1]).strip()
        case = [readlines[int_line_index].strip(), case_text]
        cases.append(case)
        break

def work():
  for func in functions:
    with open(func+".txt", 'w+') as result_file:
      for case_list in cases:
        caseline = case_list[0].strip()
        result_file.write(caseline + "\n")
        nvp = re.findall(func+"\(.+?\)", case_list[1].strip())

        for item in nvp:
          result_list = re.findall("(\$.+?)[\,\)]", item)

          for result in result_list:
            if "$*" not in result:
              result_file.write(result + "\n")

def main():
  in_file = "input.txt"
  read(in_file)
  work()


if __name__=="__main__":
  main()
</snippet></ROW><ROW><id>18320343</id><snippet>create_reponse</snippet></ROW><ROW><id>18320343</id><snippet>alter_list_data_to_serialize</snippet></ROW><ROW><id>18320343</id><snippet>def create_response(self, request, data, response_class=HttpResponse, **response_kwargs):
    stripped_data = data.get('objects') or data
    desired_format = self.determine_format(request)
    serialized = self.serialize(request, stripped_data, desired_format)
    response = response_class(content=serialized,
                              content_type=build_content_type(desired_format),
                              **response_kwargs)
    # Convert meta data to HTTP Headers 
    for name, value in data.get('meta', {}).items():
        response[name] = str(value)
    return response
</snippet></ROW><ROW><id>18320359</id><snippet>class ToDo(models.Model):

    title = models.CharField(null=True, blank=True, max_length=200)
    status = models.IntegerField(choices=TASK_STATUS, null=True, blank=True)
    assigned_to = models.ManyToManyField(OrgStaff, null=True, blank=True, related_name='assigned_to')
    assigned_by = models.ManyToManyField(OrgStaff, null=True, blank=True, related_name='assigned_by')
    assigned_time = models.DateTimeField(auto_now_add=True)
    completed_time = models.DateTimeField(null=True, blank=True)
</snippet></ROW><ROW><id>18320423</id><snippet>text</snippet></ROW><ROW><id>18320423</id><snippet>text = "'%s'" % text
</snippet></ROW><ROW><id>18320423</id><snippet>query7 = QSqlQuery ("SELECT Exemplo FROM TabelaSubst WHERE Palavra='"+text+"' ORDER BY Exemple ASC;")
</snippet></ROW><ROW><id>18320531</id><snippet>if __name__ == "__main__"</snippet></ROW><ROW><id>18320531</id><snippet>if</snippet></ROW><ROW><id>18320531</id><snippet>before_first_request</snippet></ROW><ROW><id>18320531</id><snippet>@app.before_first_request
def initialize():
    app.logger.info("Creating the tables we need")
    ...
</snippet></ROW><ROW><id>18320811</id><snippet>str.replace()</snippet></ROW><ROW><id>18320811</id><snippet>str.replace()</snippet></ROW><ROW><id>18320811</id><snippet>while 'op' in equation:
    equation = equation.replace('op', choice(operators), 1)
while 'num' in equation:
    equation = equation.replace('num', choice(nums), 1)
</snippet></ROW><ROW><id>18320811</id><snippet>choice()</snippet></ROW><ROW><id>18320811</id><snippet>&gt;&gt;&gt; from random import choice
&gt;&gt;&gt; operators = ['*', '+', '-']
&gt;&gt;&gt; nums = map(str, range(1, 6))
&gt;&gt;&gt; equation = 'num op num op num op num op num'
&gt;&gt;&gt; while 'op' in equation:
...     equation = equation.replace('op', choice(operators), 1)
... 
&gt;&gt;&gt; while 'num' in equation:
...     equation = equation.replace('num', choice(nums), 1)
... 
&gt;&gt;&gt; equation
'5 - 1 * 2 * 4 - 1'
</snippet></ROW><ROW><id>18320890</id><snippet>animations.FuncAnimation</snippet></ROW><ROW><id>18320890</id><snippet>import numpy as np
import matplotlib.pyplot as plt
import matplotlib.animation as animation
import timeit

clock = timeit.default_timer

fig, ax = plt.subplots()

alphab = ['A', 'B', 'C', 'D', 'E', 'F']
frequencies = [1, 44, 12, 11, 2, 10]

pos = np.arange(len(alphab))
width = 1.0     # gives histogram aspect to the bar diagram
ax.set_xticks(pos + (width / 2))
ax.set_xticklabels(alphab)

rects = plt.bar(pos, frequencies, width, color='r')
start = clock()

def animate(arg, rects):
    frameno, frequencies = arg
    for rect, f in zip(rects, frequencies):
        rect.set_height(f)
    print("FPS: {:.2f}".format(frameno / (clock() - start))) 

def step():
    for frame, bin_idx in enumerate(np.linspace(0,1000000,100000000), 1):
        #Here we just change the first bin, so it increases through the animation.
        frequencies[0] = bin_idx
        yield frame, frequencies


ani = animation.FuncAnimation(fig, animate, step, interval=10,
                              repeat=False, blit=False, fargs=(rects,))
plt.show()
</snippet></ROW><ROW><id>18320890</id><snippet>plt.bar</snippet></ROW><ROW><id>18320890</id><snippet>rects</snippet></ROW><ROW><id>18320890</id><snippet>set_height</snippet></ROW><ROW><id>18320890</id><snippet>rects</snippet></ROW><ROW><id>18320890</id><snippet>import sys
import matplotlib as mpl
mpl.use('TkAgg')  # do this before importing pyplot
import matplotlib.pyplot as plt
import numpy as np
import timeit

clock = timeit.default_timer

fig, ax = plt.subplots()

alphab = ['A', 'B', 'C', 'D', 'E', 'F']
frequencies = [1, 44, 12, 11, 2, 10]

pos = np.arange(len(alphab))
width = 1.0     # gives histogram aspect to the bar diagram
ax.set_xticks(pos + (width / 2))
ax.set_xticklabels(alphab)

def animate():
    start = clock()
    rects = plt.bar(pos, frequencies, width, color='r')
    for frameno, bin_idx in enumerate(np.linspace(0,1000000,100000000), 2):
        #Here we just change the first bin, so it increases through the animation.
        frequencies[0] = bin_idx
        # rects = plt.bar(pos, frequencies, width, color='r')
        for rect, f in zip(rects, frequencies):
            rect.set_height(f)
        fig.canvas.draw()
        print("FPS: {:.2f}".format(frameno / (clock() - start)))         

win = fig.canvas.manager.window
win.after(1, animate)
plt.show()
</snippet></ROW><ROW><id>18320890</id><snippet>plt.clf</snippet></ROW><ROW><id>18320890</id><snippet>time.time()</snippet></ROW><ROW><id>18320890</id><snippet>time.time</snippet></ROW><ROW><id>18320890</id><snippet>timeit.default_timer</snippet></ROW><ROW><id>18320890</id><snippet>timeit.default_timer</snippet></ROW><ROW><id>18320890</id><snippet>time.clock</snippet></ROW><ROW><id>18320890</id><snippet>timeit.default_timer</snippet></ROW><ROW><id>18321000</id><snippet>import pandas as pd

l = [3.0,7.0,10.0,20.0,200.0]
s = pd.Series(np.ones_like(l), index=l)
y = s.reindex(range(1000), fill_value=0)
pd.ewma(y, 199).plot()
</snippet></ROW><ROW><id>18321000</id><snippet>n=2/(a+1)</snippet></ROW><ROW><id>18321137</id><snippet>numpy</snippet></ROW><ROW><id>18321137</id><snippet>__contains__</snippet></ROW><ROW><id>18321137</id><snippet>def __contains__(self, item):
    for row in self:
        if any(item_value == row_value for item_value, row_value in zip(item, row)):
            return True
    return False
</snippet></ROW><ROW><id>18321137</id><snippet>[1,7]</snippet></ROW><ROW><id>18321137</id><snippet>0</snippet></ROW><ROW><id>18321137</id><snippet>0</snippet></ROW><ROW><id>18321137</id><snippet>[1,7]</snippet></ROW><ROW><id>18321137</id><snippet>[1,2]</snippet></ROW><ROW><id>18321137</id><snippet>[2,6]</snippet></ROW><ROW><id>18321137</id><snippet>[2,3]</snippet></ROW><ROW><id>18321137</id><snippet>[1, 2, 3]</snippet></ROW><ROW><id>18321497</id><snippet>read_file = open("file.txt", "r")
data = read_file.read()
read_file.close()
file_content = re.sub("\d+", "", data)
word = your_word
if word in file_content:
   newfile = open("newfile.txt", "w")
   print &gt;&gt; newfile, word
   newfile.close()
</snippet></ROW><ROW><id>18321545</id><snippet>#!/usr/bin/env python
</snippet></ROW><ROW><id>18321588</id><snippet>re.search</snippet></ROW><ROW><id>18321588</id><snippet>import re
pattern = re.compile('|'.join(['ASSESSMENTS','KILOBYTE','INTERNATIONAL']))
isMatch = (pattern.search(thing_name) != None)
</snippet></ROW><ROW><id>18321595</id><snippet>gcutil listkernels --project=google</snippet></ROW><ROW><id>18321595</id><snippet>MYPROJECT</snippet></ROW><ROW><id>18321595</id><snippet>google</snippet></ROW><ROW><id>18321595</id><snippet>centos-cloud</snippet></ROW><ROW><id>18321595</id><snippet>debian-cloud</snippet></ROW><ROW><id>18321595</id><snippet>gcutil</snippet></ROW><ROW><id>18321651</id><snippet>if stock[f] &gt; 0:</snippet></ROW><ROW><id>18321651</id><snippet>stock[f] -= 1</snippet></ROW><ROW><id>18322253</id><snippet>settings.DEFAULT_FILE_STORAGE</snippet></ROW><ROW><id>18322253</id><snippet>default_storage</snippet></ROW><ROW><id>18322292</id><snippet>replace('i', 'j')</snippet></ROW><ROW><id>18322292</id><snippet>dtype=str</snippet></ROW><ROW><id>18322292</id><snippet>dtype=complex128</snippet></ROW><ROW><id>18322422</id><snippet>a</snippet></ROW><ROW><id>18322422</id><snippet>awk '{a[NR]=$0}END{ #here you could do whatever with a[1] (a) and a[2] (b)}' file
</snippet></ROW><ROW><id>18322422</id><snippet>kent$  seq 2|awk '{a[NR]=$0}END{print "hello "a[1]; print "hi "a[2]}'
hello 1
hi 2
</snippet></ROW><ROW><id>18322422</id><snippet>kent$  seq 2|awk '{a[NR]=$0}END{printf "%s:%s\n",a[1],a[2]}'           
1:2
</snippet></ROW><ROW><id>18322747</id><snippet>def ewma(l, queries, a=0.01):
  def decay(t0, x, t1, a):
    from math import pow
    return pow((1-a), (t1-t0))*x

  assert l == sorted(l)
  assert queries == sorted(queries)

  samples = []
  try:
    t0, x0 = (0.0, 0.0)
    it = iter(queries)
    q = it.next()-1.0

    for t1 in l:
      # new value is decayed previous value, plus a
      x1 = decay(t0, x0, t1, a) + a
      # take care of all queries between t0 and t1
      while q &lt; t1:
        samples.append(decay(t0, x0, q, a))
        q = it.next()-1.0
      # take care of all queries equal to t1
      while q == t1:
        samples.append(x1)
        q = it.next()-1.0
      # update t0, x0
      t0, x0 = t1, x1

    # take care of any remaining queries
    while True:
      samples.append(decay(t0, x0, q, a))
      q = it.next()-1.0
  except StopIteration:
    return samples
</snippet></ROW><ROW><id>18322747</id><snippet>l</snippet></ROW><ROW><id>18322747</id><snippet>queries</snippet></ROW><ROW><id>18323019</id><snippet>Scrapy</snippet></ROW><ROW><id>18323019</id><snippet>reactor</snippet></ROW><ROW><id>18323019</id><snippet>from twisted.internet import reactor
from scrapy.crawler import Crawler
from scrapy.settings import Settings
from scrapy import log
from testspiders.spiders.followall import FollowAllSpider

spider = FollowAllSpider(domain='scrapinghub.com')
crawler = Crawler(Settings())
crawler.configure()
crawler.crawl(spider)
crawler.start()
log.start()
reactor.run() # the script will block here
</snippet></ROW><ROW><id>18323064</id><snippet>cnxn = pyodbc.connect('DRIVER={Teradata};DBCNAME=PRD;UID=*;PWD=*;QUIETMODE=YES;',
                       unicode_results=True)
</snippet></ROW><ROW><id>18323078</id><snippet>re.findall('&lt;a href="race\?raceid=(\d+)"&gt;([^&lt;]+)&lt;/a&gt;',html_text)
</snippet></ROW><ROW><id>18323096</id><snippet>dt</snippet></ROW><ROW><id>18323096</id><snippet>update</snippet></ROW><ROW><id>18323096</id><snippet>pygame.time.Clock.tick()</snippet></ROW><ROW><id>18323096</id><snippet>dt=1000/60.0</snippet></ROW><ROW><id>18323096</id><snippet>dt</snippet></ROW><ROW><id>18323096</id><snippet>update</snippet></ROW><ROW><id>18323096</id><snippet>pygame.time.Clock.tick_busy_loop()</snippet></ROW><ROW><id>18323398</id><snippet>import sys
from PySide import QtCore, QtGui, QtWebKit

class MainWindow(QtGui.QMainWindow):
    def __init__(self):
        super(MainWindow, self).__init__()
        # Create an exit action
        exitAction = QtGui.QAction('Load Yahoo', self)
        # Optionally you can assign an icon to the action
        # exitAction = QtGui.QAction(QtGui.QIcon('exit24.png'), 'Exit', self)
        exitAction.setShortcut('Ctrl+Q') # set the shortcut
        # Connect the action with a custom function
        exitAction.triggered.connect(self.load_yahoo)
        # Create the toolbar and add the action
        self.toolbar = self.addToolBar('Exit')
        self.toolbar.addAction(exitAction)

        # Setup the size and title of the main window
        self.resize(650, 750)
        self.setWindowTitle('Browser')

        # Create the web widget and set it as the central widget.
        self.web = QtWebKit.QWebView(self)
        self.web.load(QtCore.QUrl('http://google.com'))
        self.setCentralWidget(self.web)

    def load_yahoo(self):
        self.web.load(QtCore.QUrl('http://yahoo.com'))


app = QtGui.QApplication(sys.argv)
main_window = MainWindow()
main_window.show()    
sys.exit(app.exec_())
</snippet></ROW><ROW><id>18323618</id><snippet>&gt;&gt;&gt; import random
&gt;&gt;&gt; l = range(20)
&gt;&gt;&gt; random.sample(l, 10)
[6, 15, 13, 3, 2, 4, 14, 17, 7, 10]
</snippet></ROW><ROW><id>18323689</id><snippet>with open('somefile') as infile:
    for line in infile:
        print(line.split()[11])
</snippet></ROW><ROW><id>18323689</id><snippet>for</snippet></ROW><ROW><id>18323699</id><snippet>sys.path</snippet></ROW><ROW><id>18323699</id><snippet>sys.path</snippet></ROW><ROW><id>18323699</id><snippet>if __name__ == "__main__" and __package__ is None:
    __package__ = "app.pkg"
from .. import mod
</snippet></ROW><ROW><id>18323699</id><snippet>SystemError: Parent module 'app' not loaded, cannot perform relative import
</snippet></ROW><ROW><id>18323699</id><snippet>app</snippet></ROW><ROW><id>18323699</id><snippet>app</snippet></ROW><ROW><id>18323699</id><snippet>sys.path</snippet></ROW><ROW><id>18323699</id><snippet>submod.py</snippet></ROW><ROW><id>18323699</id><snippet>if __name__ == "__main__" and __package__ is None:
    __package__ = "app.pkg"
from .. import mod

def main(argv):
    print(argv)

if __name__ == '__main__':
    import sys
    main(sys.argv)
</snippet></ROW><ROW><id>18323699</id><snippet>sub.py</snippet></ROW><ROW><id>18323699</id><snippet>import sys
import app.pkg.submod
app.pkg.submod.main(sys.argv)
</snippet></ROW><ROW><id>18323699</id><snippet>sub.py</snippet></ROW><ROW><id>18323699</id><snippet>sys.path</snippet></ROW><ROW><id>18323699</id><snippet>app</snippet></ROW><ROW><id>18323699</id><snippet>app.pkg.submod</snippet></ROW><ROW><id>18323699</id><snippet>submod</snippet></ROW><ROW><id>18323929</id><snippet>with open("data.txt") as fh:
    fh.next()
    for line in fh:
        line = line.split()  # This split works equally well for tabs and other spaces
        do_something(line[2:])
</snippet></ROW><ROW><id>18323929</id><snippet>import pandas
data = pandas.read_csv("blah.txt", sep="\s+", index_col=[0,1])
data.values   # array of values as requested
data.sum()    # sum of each column
data.product(axis=1)    # product of each row
etc... 
</snippet></ROW><ROW><id>18323929</id><snippet>sep</snippet></ROW><ROW><id>18323929</id><snippet>\t</snippet></ROW><ROW><id>18323929</id><snippet>index_col</snippet></ROW><ROW><id>18324067</id><snippet>for</snippet></ROW><ROW><id>18324067</id><snippet>def vectores(lista):
    r=[]
    for e in lista:
        r.append(e[2])
    return r  # here
</snippet></ROW><ROW><id>18324067</id><snippet>def vectores(lista):
    return [e[2] for e in lista]
</snippet></ROW><ROW><id>18324140</id><snippet>request.FILES</snippet></ROW><ROW><id>18324140</id><snippet>@csrf_exempt
def wb_spreadsheet(request):
    file = request.FILES.get('file')
    return HttpResponse('Hello!')
</snippet></ROW><ROW><id>18324176</id><snippet>name</snippet></ROW><ROW><id>18324176</id><snippet>type_of_pet</snippet></ROW><ROW><id>18324176</id><snippet>number_of_legs</snippet></ROW><ROW><id>18324176</id><snippet>__init__</snippet></ROW><ROW><id>18324176</id><snippet>def __init__(self, type_of_pet, name, number_of_legs):
    self.type_of_pet = type_of_pet
    self.name = name
    self.number_of_legs = number_of_legs
</snippet></ROW><ROW><id>18324199</id><snippet>import maya.OpenMaya as OpenMaya
import maya.cds as cmds


def APIMatrix ( valList ):  # where vallist is a list of floats
    mat = OpenMaya.MMatrix()
    OpenMaya.MScriptUtil.createMatrixFromList( valList, mat )
    return mat
</snippet></ROW><ROW><id>18324199</id><snippet>import pymel.datatypes as dt

i = dt.Matrix() # creates an identity matrix
m = dt.Matrix ( list_of_values) # use supplied numbers
</snippet></ROW><ROW><id>18324199</id><snippet>cmds.xform(item, m = my_new_matrix)
</snippet></ROW><ROW><id>18324199</id><snippet>import pymel.core as pm
pm.xform(item, my_new_pymel_matrix)
</snippet></ROW><ROW><id>18324199</id><snippet>def get_obj_quaternion ( mayaTransform, worldSpace=True ):
    '''
    gets the rotation quat for the supplied dag node in world or local space
    '''
    #convert from mMatrix to MTransformationMatrix....
    mMatrix = matrix_from_transform( mayaTransform, worldSpace=worldSpace )
    mTransformMtx = OpenMaya.MTransformationMatrix( mMatrix )

    # MscriptUtil. Sigh
    x = OpenMaya.MScriptUtil().asDoublePtr()
    y = OpenMaya.MScriptUtil().asDoublePtr()
    z = OpenMaya.MScriptUtil().asDoublePtr()
    w = OpenMaya.MScriptUtil().asDoublePtr()

    mTransformMtx.getRotationQuaternion( x, y, z, w )
    # getRotationQuaternion is an MTransformationMatrix method

    #convert them back to normal python floats
    x = OpenMaya.MScriptUtil().getDouble( x )
    y = OpenMaya.MScriptUtil().getDouble( y )
    z = OpenMaya.MScriptUtil().getDouble( z )
    w = OpenMaya.MScriptUtil().getDouble( w )

    return x, y, z, w
</snippet></ROW><ROW><id>18324199</id><snippet> -1  0  0  0
  0  1  0  0 
  0  0 -1  0
  0  0  0  1
</snippet></ROW><ROW><id>18324199</id><snippet>reflected_matrix = reflectXZMatrix * reflectionObjectMatrix
result = target_matrix * reflected_matrix
cmds.xform( target_object, m = result)
</snippet></ROW><ROW><id>18324406</id><snippet>tesseract</snippet></ROW><ROW><id>18324406</id><snippet>apt-get install tesseract-ocr</snippet></ROW><ROW><id>18324406</id><snippet>python pytesser.py
</snippet></ROW><ROW><id>18324406</id><snippet>phototest.tif</snippet></ROW><ROW><id>18324406</id><snippet>fnord.tif</snippet></ROW><ROW><id>18324406</id><snippet>fonts_test.png</snippet></ROW><ROW><id>18324457</id><snippet>||=</snippet></ROW><ROW><id>18324457</id><snippet>nil</snippet></ROW><ROW><id>18324457</id><snippet>||</snippet></ROW><ROW><id>18324457</id><snippet>||=</snippet></ROW><ROW><id>18324457</id><snippet>get</snippet></ROW><ROW><id>18324457</id><snippet>None</snippet></ROW><ROW><id>18324457</id><snippet>get</snippet></ROW><ROW><id>18324457</id><snippet>setdefault</snippet></ROW><ROW><id>18324457</id><snippet>&gt;&gt; settings.messaging['queue_name'] ||= 'user_mail'
=&gt; "user_mail"
</snippet></ROW><ROW><id>18324457</id><snippet>&gt;&gt;&gt; settings['messaging'].setdefault('queue_name', 'user_mail')
user_mail
</snippet></ROW><ROW><id>18324714</id><snippet>import logging

logger = logging.getLogger('mod1')

def fctn1():
    logger.getChild('fctn1').debug('I am chatty')
    # do stuff (notice, no setLevel)

def fctn2():
    logger.getChild('fctn2').debug('I am even more chatty')
    # do stuff (notice, no setLevel)
</snippet></ROW><ROW><id>18324714</id><snippet>def config_logger():
    logging.getLogger('abc.def').setLevel(logging.INFO)
    logging.getLogger('mod1').setLevel(logging.WARN)
    logging.getLogger('mod1.fctn1').setLeveL(logging.DEBUG)
    (etc...)
</snippet></ROW><ROW><id>18324806</id><snippet>try/except</snippet></ROW><ROW><id>18324806</id><snippet>shutil.rename</snippet></ROW><ROW><id>18324806</id><snippet>with open(filename, 'rb') as f:
    tags = ID3(f)
    # do your stuff
shutil.rename(filename, ...)
</snippet></ROW><ROW><id>18324867</id><snippet>return</snippet></ROW><ROW><id>18324867</id><snippet>arguments</snippet></ROW><ROW><id>18324867</id><snippet>def make_lists():
    return ['Hello']  # Your are creating the list with a single value,
                      # and return it

def print_list(ls):
    for i in ls:      # You are iterating thru the list,
        print(i)      # which is the input of this function

def main():
    print_list(make_lists())  # In your main function you call the make_list()
                              # which will return the newly created list, and
                              # pass it to print_list, which will iterate thru
                              # the list and prints your values out

if __name__ =="__main__":
    main()
</snippet></ROW><ROW><id>18325046</id><snippet>\u2028</snippet></ROW><ROW><id>18325046</id><snippet>\u202A</snippet></ROW><ROW><id>18325046</id><snippet>&gt;&gt;&gt; import unicodedata

&gt;&gt;&gt; unicodedata.name(u'\u2028')
'LINE SEPARATOR'

&gt;&gt;&gt; unicodedata.name(u'\u202A')
'LEFT-TO-RIGHT EMBEDDING'
</snippet></ROW><ROW><id>18325046</id><snippet>/* Returns 1 for Unicode characters having the line break
 * property 'BK', 'CR', 'LF' or 'NL' or having bidirectional
 * type 'B', 0 otherwise.
 */
int _PyUnicode_IsLinebreak(register const Py_UNICODE ch)
{
    switch (ch) {
    // Basic Latin
    case 0x000A:    // LINE FEED
    case 0x000B:    // VERTICAL TABULATION
    case 0x000C:    // FORM FEED
    case 0x000D:    // CARRIAGE RETURN
    case 0x001C:    // FILE SEPARATOR
    case 0x001D:    // GROUP SEPARATOR
    case 0x001E:    // RECORD SEPARATOR

    // Latin-1 Supplement
    case 0x0085:    // NEXT LINE

    // General punctuation
    case 0x2028:    // LINE SEPARATOR
    case 0x2029:    // PARAGRAPH SEPARATOR
        return 1;
    }
    return 0;
}
</snippet></ROW><ROW><id>18325111</id><snippet>ExecutorService</snippet></ROW><ROW><id>18325111</id><snippet>Callable</snippet></ROW><ROW><id>18325111</id><snippet>Collection</snippet></ROW><ROW><id>18325111</id><snippet>Collection&lt;Callable&lt;T&gt;&gt;</snippet></ROW><ROW><id>18325111</id><snippet>Callable&lt;T&gt;</snippet></ROW><ROW><id>18325111</id><snippet>Collection&lt;T&gt;</snippet></ROW><ROW><id>18325111</id><snippet>invokeAll</snippet></ROW><ROW><id>18325111</id><snippet>List&lt;Future&lt;T&gt;&gt;</snippet></ROW><ROW><id>18325111</id><snippet>multiprocessing.Pool</snippet></ROW><ROW><id>18325111</id><snippet>submit</snippet></ROW><ROW><id>18325111</id><snippet>map</snippet></ROW><ROW><id>18325140</id><snippet>&gt;&gt;&gt; a = list(range(100))
&gt;&gt;&gt; a[:10] + a[-10:]
[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99]
</snippet></ROW><ROW><id>18325140</id><snippet>&gt;&gt;&gt; a = list(range(15))
&gt;&gt;&gt; a[:10] + a[-10:]
[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14]
</snippet></ROW><ROW><id>18325300</id><snippet>sorted(str1) == sorted(str2)
</snippet></ROW><ROW><id>18325300</id><snippet>len(str1) == len(str2) and sorted(str1) == sorted(str2)
</snippet></ROW><ROW><id>18325452</id><snippet>argparse</snippet></ROW><ROW><id>18325452</id><snippet>split</snippet></ROW><ROW><id>18325452</id><snippet>python script.py --first-param '123 456' --second-param 789
</snippet></ROW><ROW><id>18325452</id><snippet>123 456</snippet></ROW><ROW><id>18325452</id><snippet>789</snippet></ROW><ROW><id>18325452</id><snippet>parse_cmdline("--first-param '123 456' --second-param 789")
</snippet></ROW><ROW><id>18325452</id><snippet>'123</snippet></ROW><ROW><id>18325452</id><snippet>789</snippet></ROW><ROW><id>18325452</id><snippet>456'</snippet></ROW><ROW><id>18325452</id><snippet>parse_cmdline("--first-param '123' --second-param 789")
</snippet></ROW><ROW><id>18325452</id><snippet>'123'</snippet></ROW><ROW><id>18325452</id><snippet>123</snippet></ROW><ROW><id>18325452</id><snippet>parse_cmdline(["--first-param", "123 456", "--second-param", "789"])
</snippet></ROW><ROW><id>18325452</id><snippet>shlex</snippet></ROW><ROW><id>18325452</id><snippet>if cmdline is not None:
    args = parser.parse_args(shlex.split(cmdline))
</snippet></ROW><ROW><id>18325452</id><snippet>123 456</snippet></ROW><ROW><id>18325700</id><snippet>import re


caselines_index = []
cases = []
readlines = []

def read(in_file):
  global cases
  global caselines_index
  global readlines
  with open(in_file, 'r') as file:
    for line in file.readlines():
      readlines.append(line.strip())
    for line in readlines:
      case_search = re.search("case\s\".+?\"\:\s", line)
      if case_search:
        caselines_index.append(readlines.index(line))
    #print caselines_index
    caselines_index_iter = iter(caselines_index)
    int_line_index = int(next(caselines_index_iter))
    int_next_index = int(next(caselines_index_iter))
    while True:
      try:
        case_text = ' '.join(readlines[int_line_index:int_next_index]).strip()
        case = [readlines[int_line_index].strip(), case_text]
        cases.append(case)
        int_line_index = int_next_index
        int_next_index = int(next(caselines_index_iter))
      except StopIteration:
        case_text = ' '.join(readlines[int_line_index:len(readlines) - 1]).strip()
        case = [readlines[int_line_index].strip(), case_text]
        cases.append(case)
        break

def work():
  MATCH = 1
  for case_list in cases:
    details = []
    nvp_add = []
    caseline = case_list[0].strip()
    nvp = re.findall("details\(.+?\)", case_list[1].strip())

    for item in nvp:
      result_list = re.findall("(\$.+?)[\,\)]", item)

      for result in result_list:
        if "$*" not in result:
          details.append(result)

    nvp = re.findall("nvp_add\(.+?\)", case_list[1].strip())

    for item in nvp:
      result_list = re.findall("(\$.+?)[\,\)]", item)

      for result in result_list:
        if "$*" not in result:
          nvp_add.append(result)

    missing_from_details, missing_from_nvp_add = [], []
    missing_from_details = [o for o in nvp_add if o not in set(details)]
    missing_from_nvp_add = [o for o in details if o not in set(nvp_add)]
    if missing_from_nvp_add or missing_from_details:
      MATCH = 0
      print caseline + "   LINE - " + str(readlines.index(caseline) + 1)
      for mismatch in missing_from_details:
        print "Missing from details:"
        print mismatch
      for mismatch in missing_from_nvp_add:
        print "Missing from nvp_add:"
        print mismatch
      print "\n"
  if MATCH == 1:
    print "MATCH"
  else:
    print "MISMATCHES"


def main():
  in_file = "target1.txt"
  read(in_file)
  work()


if __name__=="__main__":
  main()
</snippet></ROW><ROW><id>18325812</id><snippet>def days_in_month(month,year)</snippet></ROW><ROW><id>18325812</id><snippet>elseif</snippet></ROW><ROW><id>18325812</id><snippet>elif</snippet></ROW><ROW><id>18325812</id><snippet>output.is_leap_year = True</snippet></ROW><ROW><id>18325812</id><snippet>is_leap_year(year) == True</snippet></ROW><ROW><id>18325812</id><snippet>False</snippet></ROW><ROW><id>18325812</id><snippet>if</snippet></ROW><ROW><id>18325812</id><snippet>else</snippet></ROW><ROW><id>18325812</id><snippet>:</snippet></ROW><ROW><id>18325812</id><snippet>if month == 'September' or month == 'April' or month == 'June' or month == 'November':
    print 30
elif month == 'January' or month == 'March' or month == 'May' or month== 'July' or month == 'August' or month == 'October' or month== 'December':
    print 31
elif month == 'February' and is_leap_year(year) == True:
    print 29
elif month == 'February' and is_leap_year(year) == False:
    print 28
else:
    print 'Blank'
</snippet></ROW><ROW><id>18325841</id><snippet>random.randint(4,11)</snippet></ROW><ROW><id>18325841</id><snippet>[4, 11]</snippet></ROW><ROW><id>18325841</id><snippet>userAtk = random.randint(4,11)</snippet></ROW><ROW><id>18325841</id><snippet>userAtk</snippet></ROW><ROW><id>18325841</id><snippet>userAtk</snippet></ROW><ROW><id>18325841</id><snippet>userAtk</snippet></ROW><ROW><id>18325841</id><snippet>[4, 11]</snippet></ROW><ROW><id>18325841</id><snippet>str(userAtk)</snippet></ROW><ROW><id>18325841</id><snippet>userAtk</snippet></ROW><ROW><id>18325841</id><snippet>def userAtk():
    return random.randint(4, 11)
</snippet></ROW><ROW><id>18325841</id><snippet>def dragonDmg():
    return userAtk() - dragonDef()
</snippet></ROW><ROW><id>18325895</id><snippet>#define N 100
typedef int OFFSET;  // assume int is 4 btyes and big enough to hold a file offset
OFFSET offset[ N ];
// offset[N-1] is 1 past the end of the last data string
// read the N offsets from file into offset[]

std::string data[ N ];
for( int i = 0; i &lt; N-1; i++ ) {
    size_t len = offset[i+1] - offset[i] - 1;
    // read 'len' bytes at offset[i] into data[i]
}
</snippet></ROW><ROW><id>18325895</id><snippet>offset[0] = sizeof(offset);   // start of data in the file
for( int i = 1; i &lt; N; i++ ) {
    offset[i] = offset[i-1] + data[i-1].size();
}
// Write the offset[] array to the file

for( int i = 0; i &lt; N-1; i++ ) {
    // write data[i] at offset[i] in the file
}
</snippet></ROW><ROW><id>18325904</id><snippet>range(start, stop + 1, step)</snippet></ROW><ROW><id>18325904</id><snippet>start:step:stop</snippet></ROW><ROW><id>18325904</id><snippet>range</snippet></ROW><ROW><id>18325904</id><snippet>start</snippet></ROW><ROW><id>18325904</id><snippet>step</snippet></ROW><ROW><id>18325904</id><snippet>stop</snippet></ROW><ROW><id>18325904</id><snippet>arange</snippet></ROW><ROW><id>18325904</id><snippet>numpy</snippet></ROW><ROW><id>18325904</id><snippet>import numpy as np

with open('numbers.txt', 'w') as handle:
    for n in np.arange(1, 5, 0.1):
        handle.write('{}\n'.format(n))
</snippet></ROW><ROW><id>18325904</id><snippet>range</snippet></ROW><ROW><id>18325904</id><snippet>np.arange</snippet></ROW><ROW><id>18325904</id><snippet>start</snippet></ROW><ROW><id>18325904</id><snippet>stop</snippet></ROW><ROW><id>18325904</id><snippet>step</snippet></ROW><ROW><id>18325904</id><snippet>range</snippet></ROW><ROW><id>18325904</id><snippet>np.arange</snippet></ROW><ROW><id>18325989</id><snippet>import locale
locale.getlocale()
&gt;&gt;&gt; (None, None)
locale.setlocale(locale.LC_ALL, 'en_US.utf8')
&gt;&gt;&gt; 'en_US.utf8'
locale.getlocale()
&gt;&gt;&gt; ('en_US', 'UTF-8')
</snippet></ROW><ROW><id>18326068</id><snippet>_PyLong_FromByteArray</snippet></ROW><ROW><id>18326068</id><snippet>static</snippet></ROW><ROW><id>18326068</id><snippet>longobject.h</snippet></ROW><ROW><id>18326068</id><snippet>struct</snippet></ROW><ROW><id>18326068</id><snippet>pickle</snippet></ROW><ROW><id>18326068</id><snippet>/* _PyLong_FromByteArray:  View the n unsigned bytes as a binary integer in
   base 256, and return a Python long with the same numeric value.
   If n is 0, the integer is 0.  Else:
   If little_endian is 1/true, bytes[n-1] is the MSB and bytes[0] the LSB;
   else (little_endian is 0/false) bytes[0] is the MSB and bytes[n-1] the
   LSB.
   If is_signed is 0/false, view the bytes as a non-negative integer.
   If is_signed is 1/true, view the bytes as a 2's-complement integer,
   non-negative if bit 0x80 of the MSB is clear, negative if set.
   Error returns:
   + Return NULL with the appropriate exception set if there's not
     enough memory to create the Python long.
*/
PyAPI_FUNC(PyObject *) _PyLong_FromByteArray(
    const unsigned char* bytes, size_t n,
    int little_endian, int is_signed);
</snippet></ROW><ROW><id>18326068</id><snippet>long</snippet></ROW><ROW><id>18326087</id><snippet>with open(__file__) as f:
    print f.read()
</snippet></ROW><ROW><id>18326566</id><snippet>ord</snippet></ROW><ROW><id>18326566</id><snippet>chr(2)</snippet></ROW><ROW><id>18326566</id><snippet>i= ord( chr(2) )
i= ord( '\x02' )
</snippet></ROW><ROW><id>18326566</id><snippet>i</snippet></ROW><ROW><id>18326584</id><snippet>import re

st='''\
The ancient Romans influenced countries and civilizations in the following centuries.  
Their language, Latin, became the basis for many other European languages. They stayed in Roma for 3 month.'''

deletions=('and','in','the')
repl={"ancient": "old", "month":"years", "centuries":"years"}

tgt='|'.join(r'\b{}\b'.format(e) for e in deletions)
st=re.sub(tgt,'',st)
for word in repl:
    tgt=r'\b{}\b'.format(word)
    st=re.sub(tgt,repl[word],st)


print st
</snippet></ROW><ROW><id>18326764</id><snippet>import re
from sys import stdout

#stdout = open("result.txt", 'w+')


def read(in_file):
  cases = []
  caselines_index = []
  readlines = []
  readlines_num = []
  with open(in_file, 'r') as file:
    readfile = file.read().strip()
    for line in readfile.split('\n'):
      readlines_num.append(line.strip())
    regex = re.compile("switch\(\$\d\).+?\}", re.DOTALL)
    readfile = re.sub(regex, ' ', readfile)
    for line in readfile.split('\n'):
      readlines.append(line.strip())
    for line in readlines:
      case_search = re.search("case\s\".+?\"\:\s", line)
      if case_search:
        caselines_index.append(readlines.index(line))
    #print caselines_index
    caselines_index_iter = iter(caselines_index)
    try:
      int_line_index = int(next(caselines_index_iter))
    except:
      print "No cases found"
    try:
      int_next_index = int(next(caselines_index_iter))
    except:
      int_next_index = len(readlines) - 1
    while True:
      try:
        case_text = ' '.join(readlines[int_line_index:int_next_index]).strip()
        match1 = re.search("nvp_add", case_text)
        match2 = re.search("details", case_text)
        if match1 or match2:
          case = [readlines[int_line_index].strip(), readlines_num.index(readlines[int_line_index]) + 1, case_text]
          cases.append(case)
        int_line_index = int_next_index
        int_next_index = int(next(caselines_index_iter))
      except StopIteration:
        case_text = ' '.join(readlines[int_line_index:len(readlines) - 1]).strip()
        case = [readlines[int_line_index].strip(), readlines_num.index(readlines[int_line_index]), case_text]
        cases.append(case)
        break
  return cases

def work(cases):
  MATCH = 1
  for case_list in cases:
    details = []
    nvp_add = []
    caseline = case_list[0].strip()
    nvp = re.findall("details\(.+?\)", case_list[2].strip())

    for item in nvp:
      result_list = re.findall("(\$.+?)[\,\)]", item)

      for result in result_list:
        if "$*" not in result:
          details.append(result)

    nvp = re.findall("nvp_add\(.+?\)", case_list[2].strip())

    for item in nvp:
      result_list = re.findall("(\$.+?)[\,\)]", item)

      for result in result_list:
        if "$*" not in result:
          nvp_add.append(result)

    missing_from_details, missing_from_nvp_add = [], []
    missing_from_details = [o for o in nvp_add if o not in set(details)]
    missing_from_nvp_add = [o for o in details if o not in set(nvp_add)]
    if missing_from_nvp_add or missing_from_details:
      MATCH = 0
      print caseline + "   LINE - " + str(case_list[1] + 1)
      for mismatch in missing_from_details:
        print "Missing from details:"
        print mismatch
      for mismatch in missing_from_nvp_add:
        print "Missing from nvp_add:"
        print mismatch
      print "\n"
  if MATCH == 1:
    print "MATCH"
  else:
    print "MISMATCHES"


def main():
  in_file = "target1.txt"
  cases = read(in_file)
  work(cases)


if __name__=="__main__":
  main()
</snippet></ROW><ROW><id>18326791</id><snippet>__name__</snippet></ROW><ROW><id>18326791</id><snippet>__name__</snippet></ROW><ROW><id>18327026</id><snippet>driver.find_element_by_link_text('10').click()
</snippet></ROW><ROW><id>18327146</id><snippet>return render_to_response('create_order.html', args)</snippet></ROW><ROW><id>18327146</id><snippet>csrf request</snippet></ROW><ROW><id>18327146</id><snippet>render</snippet></ROW><ROW><id>18327146</id><snippet>I think there is no need to use OrderId in Order model, since it is automattically created. ie id</snippet></ROW><ROW><id>18327146</id><snippet>from django.shortcuts import render
from &lt;appname&gt;.models import Order,Store

def create(request):
    if request.POST:            
        form = OrderForm(request.POST)
        if form.is_valid():
            #i just assume the storeid variable is exist in request.POST and it is ID.
            store_data=Store.objects.get(id=request.POST['storeid'])
            #here you might need to update the other orderform to false
            Order.objects.filter(storeID=store_data).update(Active=False)                
            fo=Order(storeID=store_data,Active=True)
            frm_order=OrderForm(request.POST,instance=fo)                
            frm_order.save()                  
        return HttpResponseRedirect('/liquors/all')
    else:
        form = OrderForm()                  
    return render(request,'create_order.html', {'form':form})
</snippet></ROW><ROW><id>18327364</id><snippet>player['nick']</snippet></ROW><ROW><id>18327364</id><snippet>lower(player['nick'])</snippet></ROW><ROW><id>18327364</id><snippet>newstats.nick</snippet></ROW><ROW><id>18327364</id><snippet>lowerNick = lower(player['nick'])
...
cursor.execute('SELECT yes FROM newstats WHERE nick = %s ORDER BY totalgames DESC LIMIT 1', [lowerNick] )
...
cursor.execute('UPDATE newstats SET totalgames = totalgames + 1, wins = wins + 1, medicgames = medicgames + 1, medicwins = medicwins +1 WHERE nick = %s', [lowerNick])
...
cursor.execute('UPDATE newstats SET totalgames = totalgames + 1, wins = wins + 1 WHERE nick = %s', [lowerNick])
</snippet></ROW><ROW><id>18327405</id><snippet>dict(zip(keys, values))</snippet></ROW><ROW><id>18327405</id><snippet>dict</snippet></ROW><ROW><id>18327405</id><snippet>dict.update</snippet></ROW><ROW><id>18327405</id><snippet>%(foo)s</snippet></ROW><ROW><id>18327405</id><snippet>defaults</snippet></ROW><ROW><id>18327405</id><snippet>if True:  # For testing -- use the other branch to read from a file
    # Declare some test content in a string...
    input_content = """
Stan,Marsh,Stan Marsh,1001,899,smarsh,smarsh@info.com
Eric,Cartman,Eric Cartman,1002,898,ecartman,ecartman@info.com
    """.strip()
    # And use the StringIO module to create a file-like object from it.
    from StringIO import StringIO
    input_file = StringIO(input_content)
else:
    # Or just open the file as normal. In a short script like this,
    # one doesn't need to worry about closing the file - that will happen
    # when the script ends.
    input_file = open('example.csv', 'rb')


# Declare the fields in the order they are in the file.
# zip() will use this later with the actual fields from the file
# to create a dict mapping.
fields = ('FN', 'LN', 'NAME', 'UIDN', 'GIDN', 'CN', 'EMAIL')  # Fields, in order

# Declare a template for the LDIF file. The %(...)s bits will be
# later interpolated with the dict mapping created for each input row.
template = u"""
dn: cn=%(CN)s,ou=People,dc=domain,dc=com
cn: %(CN)s
gidnumber: 20
givenname %(FN)s
homedirectory /home/users/%(USER)s
loginshell: /bin/sh
objectclass: inetOrgPerson
objectclass: posixAccount
objectclass: top
sn: %(LN)s
uid: %(USERNAME)s
telephoneNumber: %(TELE)s
uidnumber: %(UIDN)s
userpassword: {CRYPT}mrpoo
mail: %(EMAIL)s
"""

for line in input_file:
    # Create `vals` with some default values. These would be overwritten
    # if the CSV data (and of course the declared fields) contain them.
    vals = {"USER": "XXX", "TELE": "XXX", "USERNAME": "XXX"}

    # line.strip().split() will turn the string line,
    # for example 'foo,baz,bar\n' (trailing new line `strip`ped out)
    # into the list ['foo', 'baz', 'bar'].
    # zipping it with, say, ['LN', 'FN', 'EMAIL'] would yield
    # [('LN', 'foo'), ('FN', 'baz'), ('EMAIL', 'bar')] -- 
    # ie. a list of tuples with a key and a value.
    # This can be used by the `dict.update` function to replace and augment
    # the default values declared above.

    vals.update(zip(fields, line.strip().split(",")))

    # Finally, use the interpolation operator % to merge the template with the
    # values for this line and print it to standard output.

    print template % vals
</snippet></ROW><ROW><id>18327774</id><snippet>class Model(object):
    @property
    def db(self): return Database() 

o = Model()
db1 = o.db  #a database instance. No brackets
db2 = o.db  #another database instance
o.db = foo  #error due to read only property
</snippet></ROW><ROW><id>18327774</id><snippet>class Model(object):
    def __init__(self):
        self.db = Database()

o = Model()
db1 = o.db  #a database instance
db2 = o.db  #the same database instance
o.db = foo  #works fine so long as foo is defined
</snippet></ROW><ROW><id>18327774</id><snippet>class Model(object):
    def db(self):
        return Database()

o = Model()
db1 = o.db()  #a database instance. note the brackets
db2 = o.db()  #another database instance
o.db = foo    #works fine so long as foo is defined
</snippet></ROW><ROW><id>18327852</id><snippet>&gt;&gt;&gt; myseries[myseries == 7]
3    7
dtype: int64
&gt;&gt;&gt; myseries[myseries == 7].index[0]
3
</snippet></ROW><ROW><id>18327900</id><snippet>import re
import sys
from collections import Counter

#sys.stdout = open("result.txt", 'w+')


def intersect(list1, list2):
  for o in list1:
    if o in list2:
      list1.remove(o)
      list2.remove(o)
  return list1, list2

def read(in_file):
  cases = []
  caselines_index = []
  readlines = []
  readlines_num = []
  with open(in_file, 'r') as file:
    readfile = file.read().strip()
    for line in readfile.split('\n'):
      readlines_num.append(line.strip())
    regex = re.compile("switch\(\$\d\).+?\}", re.DOTALL)
    readfile = re.sub(regex, ' ', readfile)
    for line in readfile.split('\n'):
      readlines.append(line.strip())
    for line in readlines:
      case_search = re.search("case\s\".+?\"\:\s", line)
      if case_search:
        caselines_index.append(readlines.index(line))
    #print caselines_index
    caselines_index_iter = iter(caselines_index)
    try:
      int_line_index = int(next(caselines_index_iter))
    except:
      print "No cases found"
    try:
      int_next_index = int(next(caselines_index_iter))
    except:
      int_next_index = len(readlines) - 1
    while True:
      try:
        case_text = ' '.join(readlines[int_line_index:int_next_index]).strip()
        match1 = re.search("nvp_add", case_text)
        match2 = re.search("details", case_text)
        if match1 or match2:
          case = [readlines[int_line_index].strip(), readlines_num.index(readlines[int_line_index]) + 1, case_text]
          cases.append(case)
        int_line_index = int_next_index
        int_next_index = int(next(caselines_index_iter))
      except StopIteration:
        case_text = ' '.join(readlines[int_line_index:len(readlines) - 1]).strip()
        case = [readlines[int_line_index].strip(), readlines_num.index(readlines[int_line_index]), case_text]
        cases.append(case)
        break
  return cases

def work(cases):
  MATCH = 1
  for case_list in cases:
    details = []
    nvp_add = []
    caseline = case_list[0].strip()
    nvp = re.findall("details\(.+?\)", case_list[2].strip())

    for item in nvp:
      result_list = re.findall("(\$.+?)[\,\)]", item)

      for result in result_list:
        if "$*" not in result:
          details.append(result)

    nvp = re.findall("nvp_add\(.+?\)", case_list[2].strip())

    for item in nvp:
      result_list = re.findall("(\$.+?)[\,\)]", item)

      for result in result_list:
        if "$*" not in result:
          nvp_add.append(result)


    nvp_add_c = Counter(nvp_add)
    details_c = Counter(details)
    missing_from_details = list((nvp_add_c - details_c).elements())
    missing_from_nvp_add = list((details_c - nvp_add_c).elements())
    if missing_from_nvp_add or missing_from_details:
      MATCH = 0
      print caseline + "   LINE - " + str(case_list[1] + 1)
      for mismatch in missing_from_details:
        print "Missing from details:"
        print mismatch
      for mismatch in missing_from_nvp_add:
        print "Missing from nvp_add:"
        print mismatch
      print "\n"
  if MATCH == 1:
    print "MATCH"
  else:
    print "MISMATCHES"


def main():
  in_file = "target1.txt"
  cases = read(in_file)
  work(cases)


if __name__=="__main__":
  main()
</snippet></ROW><ROW><id>18328036</id><snippet>import functools

def des(i):
    def decorator(func):
        if i != 1:
            return func # no wrapper needed

        @functools.wraps(func)
        def raiser(*args, **kwargs):
            raise Exception

        return raiser

    return decorator
</snippet></ROW><ROW><id>18328036</id><snippet>des</snippet></ROW><ROW><id>18328036</id><snippet>i</snippet></ROW><ROW><id>18328036</id><snippet>decorator</snippet></ROW><ROW><id>18328036</id><snippet>i==1</snippet></ROW><ROW><id>18328036</id><snippet>raiser</snippet></ROW><ROW><id>18328036</id><snippet>i==1</snippet></ROW><ROW><id>18328036</id><snippet>functools.wraps</snippet></ROW><ROW><id>18328036</id><snippet>__name__</snippet></ROW><ROW><id>18328036</id><snippet>__doc__</snippet></ROW><ROW><id>18328052</id><snippet>http_proxy</snippet></ROW><ROW><id>18328052</id><snippet>https_proxy</snippet></ROW><ROW><id>18328250</id><snippet>conn.request("POST", "/collect", "v=1&amp;tid=UA-XXXXXX-Y&amp;cid=666&amp;t=event&amp;ec=game&amp;ea=start&amp;ev=0")
</snippet></ROW><ROW><id>18328250</id><snippet>import httplib, urllib

params = urllib.urlencode({
    'v': 1,
    'tid': 'UA-XXXXXX-Y',
    'cid': '666',
    't': 'event',
    'ec': 'game',
    'ea': 'start',
    'ev': 0
})

connection = httplib.HTTPConnection('www.google-analytics.com')
connection.request('POST', '/collect', params)
</snippet></ROW><ROW><id>18328831</id><snippet>exec(functions_to_create, globals())
</snippet></ROW><ROW><id>18329318</id><snippet>csv</snippet></ROW><ROW><id>18329318</id><snippet>out_file = open('csv_write.csv', 'wb')             # Python 2.x
out_file = open('csv_write.csv', 'w', newline='')  # Python 3.x
</snippet></ROW><ROW><id>18329318</id><snippet>csv</snippet></ROW><ROW><id>18329318</id><snippet>excel</snippet></ROW><ROW><id>18329318</id><snippet>\n</snippet></ROW><ROW><id>18329318</id><snippet>\r\n</snippet></ROW><ROW><id>18329318</id><snippet>\n</snippet></ROW><ROW><id>18329318</id><snippet>\r\n</snippet></ROW><ROW><id>18329318</id><snippet>\r\r\n</snippet></ROW><ROW><id>18329407</id><snippet>s.accept()</snippet></ROW><ROW><id>18329407</id><snippet>from threading import Thread

def server():
    while True:
        c, addr = s.accept()
        print 'Got connection from', addr
        c.send('Hi blork...')
        c.close()

t = Thread(target=server)
t.start()
</snippet></ROW><ROW><id>18329407</id><snippet>from threading import Thread
from socket import SHUT_RDWR

def client(sock):
    while True:
        data = sock.recv(2048)
        if not data:
            break
        print data
    try:
        sock.shutdown(SHUT_RDWR)
        sock.close()
    except:
        pass

def server():
    while True:
        c, addr = s.accept()
        print 'Got connection from', addr
        c.send('Hi blork...')
        t = Thread(target=client, args=(c,))
        t.start()

t = Thread(target=server)
t.start()
</snippet></ROW><ROW><id>18329412</id><snippet>{1, 2, 3}</snippet></ROW><ROW><id>18329412</id><snippet>data[key] in itemList</snippet></ROW><ROW><id>18329412</id><snippet>True</snippet></ROW><ROW><id>18329412</id><snippet>data[key]</snippet></ROW><ROW><id>18329412</id><snippet>itemList</snippet></ROW><ROW><id>18329635</id><snippet>SITE_ID</snippet></ROW><ROW><id>18329635</id><snippet>SECRET_KEY = 'as!sfhagfsA@$1AJFS78787124!897zR81'
</snippet></ROW><ROW><id>18329635</id><snippet>from local_settings import *
</snippet></ROW><ROW><id>18329635</id><snippet>from settings import *

SITE_ID = 1
</snippet></ROW><ROW><id>18329635</id><snippet>from settings import *

SITE_ID = 2
</snippet></ROW><ROW><id>18329635</id><snippet>from settings_foo import *

DEBUG = False
</snippet></ROW><ROW><id>18329635</id><snippet>from settings_bar import *

DEBUG = False
</snippet></ROW><ROW><id>18329635</id><snippet>admin/sites</snippet></ROW><ROW><id>18329764</id><snippet>lock = Lock()

lock.acquire() # will block if lock is already held
... access shared resource
lock.release()
</snippet></ROW><ROW><id>18330037</id><snippet>MyModel</snippet></ROW><ROW><id>18330037</id><snippet>MyModel = 'whatever'</snippet></ROW><ROW><id>18330167</id><snippet>from tornado import httpclient
http_client = httpclient.HTTPClient()
try:
    response = http_client.fetch(url)
    print(response.body)
except httpclient.HTTPError as e:
    print("Error:", e)
http_client.close()
</snippet></ROW><ROW><id>18330167</id><snippet>with open(output_file_name) as f:
    f.write(response.body)
</snippet></ROW><ROW><id>18330167</id><snippet>requests</snippet></ROW><ROW><id>18330167</id><snippet>grequests</snippet></ROW><ROW><id>18330167</id><snippet>get</snippet></ROW><ROW><id>18330167</id><snippet>def get(self):
    file_name = 'file.ext'
    buf_size = 4096
    self.set_header('Content-Type', 'application/octet-stream')
    self.set_header('Content-Disposition', 'attachment; filename=' + file_name)
    with open(file_name, 'r') as f:
        while True:
            data = f.read(buf_size)
            if not data:
                break
            self.write(data)
    self.finish()
</snippet></ROW><ROW><id>18330288</id><snippet>patch()</snippet></ROW><ROW><id>18330288</id><snippet>Mock()</snippet></ROW><ROW><id>18330288</id><snippet>autospec</snippet></ROW><ROW><id>18330288</id><snippet>True</snippet></ROW><ROW><id>18330288</id><snippet>mock_reset()</snippet></ROW><ROW><id>18330393</id><snippet>HTMLParser.handle_charref()</snippet></ROW><ROW><id>18330393</id><snippet>def handle_charref(self, name):
    self.handle_data(self.unescape('&amp;#{};'.format(name)))
</snippet></ROW><ROW><id>18330653</id><snippet>np.ndenumerate</snippet></ROW><ROW><id>18330653</id><snippet>import numpy as np

# generate a random numpy array as loaded from cv2.imread()
img = np.random.randint(255, size=(8, 10, 3))

for (x,y,z), value in np.ndenumerate(img):
    do_something(img[x,y,z]) # modify to do whatever you want
</snippet></ROW><ROW><id>18330653</id><snippet>&gt;&gt;&gt; import numpy as np

&gt;&gt;&gt; img = np.zeros((3, 4, 3), dtype = np.uint8)

&gt;&gt;&gt; for (x,y), value in np.ndenumerate(img[:,:,0]):
&gt;&gt;&gt;     if x == 1 and y == 2:
&gt;&gt;&gt;         img[x,y,:] = (255,0,255)    
&gt;&gt;&gt; print img
[[[  0   0   0]
  [  0   0   0]
  [  0   0   0]
  [  0   0   0]]

 [[  0   0   0]
  [  0   0   0]
  [255   0 255]
  [  0   0   0]]

 [[  0   0   0]
  [  0   0   0]
  [  0   0   0]
  [  0   0   0]]]
</snippet></ROW><ROW><id>18330705</id><snippet>&gt;&gt;&gt; import matplotlib.pyplot as plt
&gt;&gt;&gt; z = [[0,0,0], [1,0,0], [0,1,0], [1,1,0], [.5,.5,1]] 
&gt;&gt;&gt; x, y, z = zip(*z)
&gt;&gt;&gt; cn = plt.tricontourf(x, y, z)
&gt;&gt;&gt; plt.show()
</snippet></ROW><ROW><id>18330708</id><snippet>$ python
&gt;&gt;&gt; import hashlib
&gt;&gt;&gt; hashlib.sha1("The quick brown fox jumps over the lazy dog").hexdigest()
'2fd4e1c67a2d28fced849ee1bb76e7391b93eb12'
&gt;&gt;&gt; exit()

$ php -a
php &gt; echo SHA1("The quick brown fox jumps over the lazy dog");
2fd4e1c67a2d28fced849ee1bb76e7391b93eb12
</snippet></ROW><ROW><id>18330825</id><snippet>script.py</snippet></ROW><ROW><id>18330825</id><snippet>if len(sys.argv) == 4:
</snippet></ROW><ROW><id>18330825</id><snippet>['script.py', arg1, arg2, arg3]
</snippet></ROW><ROW><id>18330825</id><snippet>emil ~/test &gt; python script.py arg1 arg2 arg3
arg3
emil ~/test &gt; cat script.py 
import sys
if len(sys.argv) == 4:
    print sys.argv[3] # do something
else:
    print("Please, provide third argument")
emil ~/test &gt; python script.py arg1 arg2
Please, provide third argument
</snippet></ROW><ROW><id>18330982</id><snippet>urllib.urlopen</snippet></ROW><ROW><id>18330982</id><snippet>&gt;&gt;&gt; import urllib
&gt;&gt;&gt; u = urllib.urlopen('http://stackoverflow.com')
&gt;&gt;&gt; x = u.read(1000)
&gt;&gt;&gt; len(x)
1000
&gt;&gt;&gt; u.close()
</snippet></ROW><ROW><id>18330982</id><snippet>urllib.urlopen</snippet></ROW><ROW><id>18330982</id><snippet>&gt;&gt;&gt; import requests 
&gt;&gt;&gt; r = requests.get('http://stackoverflow.com', stream=True) 
&gt;&gt;&gt; x = next(r.iter_content(1000), '')[:1000] # iter_content() could yield more than requested; need [:1000]
&gt;&gt;&gt; len(x) 
1000
</snippet></ROW><ROW><id>18331243</id><snippet>obtain_auth_token</snippet></ROW><ROW><id>18331243</id><snippet>Authorization:</snippet></ROW><ROW><id>18331742</id><snippet>u</snippet></ROW><ROW><id>18331996</id><snippet>exec</snippet></ROW><ROW><id>18331996</id><snippet>def load_some_script():
    pyfd = open("some_python_script.py", "r")
    src = pyfd.read()
    pyfd.close()

    exec(src, globals())  # execute the code in the global scope


load_some_script()
some_function('foo', 'bare')  # should now be available at module level.
</snippet></ROW><ROW><id>18332070</id><snippet>import explicit
</snippet></ROW><ROW><id>18332070</id><snippet>from behave import given, when, then, step
</snippet></ROW><ROW><id>18332128</id><snippet>&gt;&gt;&gt; from urlparse import urlparse
&gt;&gt;&gt; urlparse('http://www.google.com/').hostname
'www.google.com'
&gt;&gt;&gt; urlparse('http://www.google.com/').hostname.split('.')[1]
'google'
</snippet></ROW><ROW><id>18332128</id><snippet>hostname.split('.')[1]</snippet></ROW><ROW><id>18332232</id><snippet>lxml</snippet></ROW><ROW><id>18332232</id><snippet>mytext="""&lt;contextfile concordance=brown&gt;
&lt;context filename=br-a01 paras=yes&gt;
&lt;p pnum=1&gt;
....
&lt;wf cmd=done pos=VB lemma=say wnsn=1 lexsn=2:32:00::&gt;said&lt;/wf&gt;
&lt;wf cmd=done pos=NN lemma=friday wnsn=1 lexsn=1:28:00::&gt;Friday&lt;/wf&gt;
&lt;wf cmd=ignore pos=DT&gt;an&lt;/wf&gt;
....
....
&lt;punc&gt;``&lt;/punc&gt;
&lt;wf cmd=ignore pos=DT&gt;no&lt;/wf&gt;
&lt;wf cmd=done pos=NN lemma=evidence wnsn=1 lexsn=1:09:00::&gt;evidence&lt;/wf&gt;
&lt;punc&gt;''&lt;/punc&gt;
....
&lt;wf cmd=done pos=NN lemma=irregularity wnsn=1 lexsn=1:04:00::&gt;irregularities&lt;/wf&gt;
&lt;punc&gt;.&lt;/punc&gt;
&lt;/s&gt;
&lt;/p&gt;
&lt;/context&gt;
&lt;/contextfile&gt;"""

from lxml import html
parsed = html.fromstring(mytext)
for x in parsed.getiterator(): print x.tag, x.attrib, x.text, x.tail
</snippet></ROW><ROW><id>18332232</id><snippet>contextfile {'concordance': 'brown'} None None
context {'paras': 'yes', 'filename': 'br-a01'} None None
p {'pnum': '1'} 
....


wf {'lemma': 'say', 'cmd': 'done', 'wnsn': '1', 'pos': 'VB', 'lexsn': '2:32:00::'} said None
wf {'lemma': 'friday', 'cmd': 'done', 'wnsn': '1', 'pos': 'NN', 'lexsn': '1:28:00::'} Friday None
wf {'cmd': 'ignore', 'pos': 'DT'} an 
....
....

punc {} `` None
wf {'cmd': 'ignore', 'pos': 'DT'} no None
wf {'lemma': 'evidence', 'cmd': 'done', 'wnsn': '1', 'pos': 'NN', 'lexsn': '1:09:00::'} evidence None
punc {} '' 
....

wf {'lemma': 'irregularity', 'cmd': 'done', 'wnsn': '1', 'pos': 'NN', 'lexsn': '1:04:00::'} irregularities None
punc {} . None
</snippet></ROW><ROW><id>18332564</id><snippet>class MyDecorator(object):
    def __init__(self, *args, **kwargs):
        if kwargs:
            # arguments
            print 'got %r as arguments'
        else:
            callable, = args

@MyDecorator(some_function=lambda x:2*x)
def foo():
    pass
</snippet></ROW><ROW><id>18332794</id><snippet>return_dollar = calculate_value(five,ten,twenty,fifty,one_dollar,two_dollar)
</snippet></ROW><ROW><id>18332794</id><snippet>CalculateAndPrint(return_dollar)
</snippet></ROW><ROW><id>18332794</id><snippet>def CalculateAndPrint(dollar):
</snippet></ROW><ROW><id>18332884</id><snippet>map</snippet></ROW><ROW><id>18332884</id><snippet>arr = list(map(int, input.split()))
</snippet></ROW><ROW><id>18332884</id><snippet>list()</snippet></ROW><ROW><id>18332884</id><snippet>map()</snippet></ROW><ROW><id>18332884</id><snippet>list</snippet></ROW><ROW><id>18333903</id><snippet>def __getitem__(self, key):
    self.data.move_to_end(key)
    return super().__getitem__(key)
</snippet></ROW><ROW><id>18333903</id><snippet>a.items</snippet></ROW><ROW><id>18333903</id><snippet>move_to_end</snippet></ROW><ROW><id>18333903</id><snippet>a.data.items</snippet></ROW><ROW><id>18334301</id><snippet>x,y,z = 1,2,np.array([3,3,3])
np.concatenate(([x],[y],z))
# array([1, 2, 3, 4, 5])
</snippet></ROW><ROW><id>18334301</id><snippet>insert</snippet></ROW><ROW><id>18334301</id><snippet>x,y,z = 1,2,np.array([3,3,3])
np.insert(z, [0,0], [x, y])
</snippet></ROW><ROW><id>18334301</id><snippet>x,y,z = 1,2,[3,3,3]
z = [x] + [y] + z
</snippet></ROW><ROW><id>18334301</id><snippet>x,y,z = 1,2,[3,3,3]
[x, y] + z
</snippet></ROW><ROW><id>18334301</id><snippet>x,y,z = 1,2,[3,3,3]
z.insert(0, y)
z.insert(0, x)
</snippet></ROW><ROW><id>18334560</id><snippet>unicode</snippet></ROW><ROW><id>18334560</id><snippet>char*</snippet></ROW><ROW><id>18334560</id><snippet>unicode</snippet></ROW><ROW><id>18334560</id><snippet>unicode</snippet></ROW><ROW><id>18334760</id><snippet>return</snippet></ROW><ROW><id>18334760</id><snippet>def get_passkey(admin_extra, name):
    for admin in admin_extra:
        if admin['name'] == name:
            passkey = admin[passkey]
        return passkey
    # this will not happen if we have left the function due to returning the passkey
    return None     # We did not find a passkey
</snippet></ROW><ROW><id>18334760</id><snippet>name = 'nikhil'
passkey = ''

for admin in admin_extra:
    if admin['name'] == name:
        passkey = admin[passkey]
        print passkey
        break
else:
    print "not found"
</snippet></ROW><ROW><id>18334760</id><snippet>admins = AdminList(Admin("Nikhil", "nikhilpasskey"), Admin("Mac", "macpasskey"))
pass = admins["Nikhil"].passkey
</snippet></ROW><ROW><id>18334794</id><snippet>import wmi
c = wmi.WMI()
for pm in c.Win32_PhysicalMedia():
    print pm.Tag, pm.SerialNumber
</snippet></ROW><ROW><id>18334814</id><snippet>easy_install</snippet></ROW><ROW><id>18334972</id><snippet>response.content</snippet></ROW><ROW><id>18334972</id><snippet>.text</snippet></ROW><ROW><id>18334972</id><snippet>etree.HTML(response.content)  
</snippet></ROW><ROW><id>18335109</id><snippet>&gt;&gt;&gt; L = [0, 1, 2, 3, 4, 5]
&gt;&gt;&gt; [[L[0]] + [k for j,k in enumerate(L[1:-1]) if i&gt;&gt;j&amp;1] for i in range(1&lt;&lt;(len(L)-2))]
[[0], [0, 1], [0, 2], [0, 1, 2], [0, 3], [0, 1, 3], [0, 2, 3], [0, 1, 2, 3], [0, 4], [0, 1, 4], [0, 2, 4], [0, 1, 2, 4], [0, 3, 4], [0, 1, 3, 4], [0, 2, 3, 4], [0, 1, 2, 3, 4]]
</snippet></ROW><ROW><id>18335109</id><snippet>&gt;&gt;&gt; M = [[L[0]] + [k for j,k in enumerate(L[1:-1]) if i&gt;&gt;j&amp;1] for i in range(1&lt;&lt;(len(L)-2))
&gt;&gt;&gt; sorted(M, key=len)
[[0], [0, 1], [0, 2], [0, 3], [0, 4], [0, 1, 2], [0, 1, 3], [0, 2, 3], [0, 1, 4], [0, 2, 4], [0, 3, 4], [0, 1, 2, 3], [0, 1, 2, 4], [0, 1, 3, 4], [0, 2, 3, 4], [0, 1, 2, 3, 4]]
</snippet></ROW><ROW><id>18335151</id><snippet>su -</snippet></ROW><ROW><id>18335151</id><snippet>sudo</snippet></ROW><ROW><id>18335151</id><snippet>dd if=/dev/zero of=/swapfile1 bs=1024 count=524288</snippet></ROW><ROW><id>18335151</id><snippet>mkswap /swapfile1</snippet></ROW><ROW><id>18335151</id><snippet>chown root:root /swapfile1</snippet></ROW><ROW><id>18335151</id><snippet>chmod 0600 /swapfile1</snippet></ROW><ROW><id>18335151</id><snippet>swapon /swapfile1</snippet></ROW><ROW><id>18335151</id><snippet>swapoff -v /swapfile1</snippet></ROW><ROW><id>18335151</id><snippet>rm /swapfile1</snippet></ROW><ROW><id>18335176</id><snippet>parse_dates = ['A','C']</snippet></ROW><ROW><id>18335176</id><snippet>read_csv</snippet></ROW><ROW><id>18335176</id><snippet>df.get_dtype_count()</snippet></ROW><ROW><id>18335176</id><snippet>datetime64[ns]</snippet></ROW><ROW><id>18335176</id><snippet>min_itemsize</snippet></ROW><ROW><id>18335176</id><snippet>df.index = Series(df.index) + nrows</snippet></ROW><ROW><id>18335176</id><snippet>read_csv</snippet></ROW><ROW><id>18335320</id><snippet>class Constant(models.Model):
    name = models.CharField(max_length=70, primary_key=True)
    code = models.IntegerField(unique=True)
    description = models.CharField(max_length=100)
</snippet></ROW><ROW><id>18335696</id><snippet>&gt;&gt;&gt; from collections import defaultdict
&gt;&gt;&gt; d = defaultdict(list) # create the dictionary, then populate it.
&gt;&gt;&gt; d.update({"TIM":[['xx', 'yy'], ['aa', 'bb']], "SAM":[['yy', 'cc']]})
&gt;&gt;&gt; d # see its what you wanted.
defaultdict(&lt;type 'list'&gt;, {'TIM': [['xx', 'yy'], ['aa', 'bb']], 'SAM': [['yy', 'cc']]})
&gt;&gt;&gt; d["SAM"].append(['tt','uu']) # add more items to SAM
&gt;&gt;&gt; d["KIM"].append(['ii','pp']) # create and add to KIM
&gt;&gt;&gt; d # see its what you wanted.
defaultdict(&lt;type 'list'&gt;, {'TIM': [['xx', 'yy'], ['aa', 'bb']], 'KIM': [['ii', 'pp']], 'SAM': [['yy', 'cc'], ['tt', 'uu']]})
</snippet></ROW><ROW><id>18335696</id><snippet>&gt;&gt;&gt; from collections import defaultdict
&gt;&gt;&gt; d = defaultdict(set)
&gt;&gt;&gt; d.update({"TIM":set([('xx', 'yy'), ('aa', 'bb')]), "SAM":set([('yy', 'cc')])})
&gt;&gt;&gt; d["SAM"].add(('tt','uu'))
&gt;&gt;&gt; d["KIM"].add(('ii','pp'))
&gt;&gt;&gt; d
defaultdict(&lt;type 'set'&gt;, {'TIM': set([('xx', 'yy'), ('aa', 'bb')]), 'KIM': set([('ii', 'pp')]), 'SAM': set([('tt', 'uu'), ('yy', 'cc')])})
</snippet></ROW><ROW><id>18335770</id><snippet>dest</snippet></ROW><ROW><id>18335770</id><snippet>import argparse
myparser = argparse.ArgumentParser(description='parser test')
myparser.add_argument("product_1", help="enter product1")
myparser.add_argument("product_2", help="enter product2")

args = myparser.parse_args()
firstProduct = args.product_1
secondProduct = args.product_2
print(firstProduct, secondProduct)
</snippet></ROW><ROW><id>18335770</id><snippet>% test.py foo bar</snippet></ROW><ROW><id>18335770</id><snippet>('foo', 'bar')
</snippet></ROW><ROW><id>18336153</id><snippet>#  FOR YOUR E-MAILS
DEFAULT_FROM_EMAIL='webmaster@localhost' # or webmaster@servername
SERVER_EMAIL='root@localhost' # or 'root@servername'
EMAIL_HOST = 'localhost' # or servername
EMAIL_HOST_USER='' # or 'user@gmail.com'
EMAIL_BACKEND ='django.core.mail.backends.smtp.EmailBackend'
EMAIL_PORT = 25 #587 
EMAIL_USE_TLS = True
</snippet></ROW><ROW><id>18336164</id><snippet>\v</snippet></ROW><ROW><id>18336614</id><snippet>ignore_result=True</snippet></ROW><ROW><id>18336614</id><snippet>CELERY_IGNORE_RESULT</snippet></ROW><ROW><id>18336614</id><snippet>True</snippet></ROW><ROW><id>18337401</id><snippet>class A(object):
    print "Hello"
print "A is now defined"
a = A()
print "I now have an instance of A"
</snippet></ROW><ROW><id>18337401</id><snippet>Hello
A is now defined
I now have an instance of A
</snippet></ROW><ROW><id>18337401</id><snippet># Sample model class
class TestClass(Base):
   # SQL Mappings   
   __tablename__ = 'test1'

   pid = Column("id", Integer, primary_key=True)
   name = Column('name', String)
  # ...

  def __init__(self):
    self.works_var = 0
    self.works_not_var = []
</snippet></ROW><ROW><id>18337401</id><snippet>__init__</snippet></ROW><ROW><id>18337401</id><snippet>works_not_var = []</snippet></ROW><ROW><id>18337401</id><snippet>list</snippet></ROW><ROW><id>18337401</id><snippet>def f(a=[]):
    if len(a) == 0:
        print "Oh no, list is empty"
        a.append(1)

f()
print "Function executed first time"
f()
print "Function executed second time"
</snippet></ROW><ROW><id>18337401</id><snippet>Oh no, list is empty
Function executed first time
Function executed second time
</snippet></ROW><ROW><id>18337401</id><snippet>from datetime import datetime
from time import sleep

def f(time=datetime.now()):
    print time

f()
sleep(1)
f()
f(datetime.now())
</snippet></ROW><ROW><id>18337401</id><snippet>2013-08-20 16:14:29.037069
2013-08-20 16:14:29.037069
2013-08-20 16:14:30.038302
</snippet></ROW><ROW><id>18337401</id><snippet>datetime.now()</snippet></ROW><ROW><id>18337401</id><snippet>def f(now=None):
    if now is None:
        now = datetime.now()
</snippet></ROW><ROW><id>18337602</id><snippet>&gt;&gt;&gt; 'ä'.encode('UTF-8')
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
UnicodeDecodeError: 'ascii' codec can't decode byte 0xc3 in position 0: ordinal not in range(128)
</snippet></ROW><ROW><id>18337602</id><snippet>try:
    if (isinstance(msg, unicode) and
        getattr(stream, 'encoding', None)):

        # .... the string is NOT an unicode instance, so ignored
        # for brevity
    else:
        # this line throws the original exception 
        # fs is a bytestring "%s\n", and msg is a bytestring
        # with extended letters, most probably Latin 1.
        # stream.write spits out an UnicodeError on these values
        stream.write(fs % msg)
except UnicodeError:
    # now we get a useless exception report from this code
    stream.write(fs % msg.encode("UTF-8"))
</snippet></ROW><ROW><id>18337602</id><snippet>logging.getLogger(name).critical('Testing logger: ä')
</snippet></ROW><ROW><id>18337754</id><snippet>ensure_ascii=False</snippet></ROW><ROW><id>18337754</id><snippet>json.dumps()</snippet></ROW><ROW><id>18337754</id><snippet>&gt;&gt;&gt; json_string = json.dumps(u"ברי צקלה", ensure_ascii=False).encode('utf8')
&gt;&gt;&gt; json_string
'"\xd7\x91\xd7\xa8\xd7\x99 \xd7\xa6\xd7\xa7\xd7\x9c\xd7\x94"'
&gt;&gt;&gt; print json_string
"ברי צקלה"
</snippet></ROW><ROW><id>18337754</id><snippet>str</snippet></ROW><ROW><id>18337754</id><snippet>encoding</snippet></ROW><ROW><id>18337754</id><snippet>&gt;&gt;&gt; d={ 1: "ברי צקלה", 2: u"ברי צקלה" }
&gt;&gt;&gt; d
{1: '\xd7\x91\xd7\xa8\xd7\x99 \xd7\xa6\xd7\xa7\xd7\x9c\xd7\x94', 2: u'\u05d1\u05e8\u05d9 \u05e6\u05e7\u05dc\u05d4'}

&gt;&gt;&gt; s=json.dumps(d, ensure_ascii=False, encoding='utf8')
&gt;&gt;&gt; s
u'{"1": "\u05d1\u05e8\u05d9 \u05e6\u05e7\u05dc\u05d4", "2": "\u05d1\u05e8\u05d9 \u05e6\u05e7\u05dc\u05d4"}'
&gt;&gt;&gt; json.loads(s)['1']
u'\u05d1\u05e8\u05d9 \u05e6\u05e7\u05dc\u05d4'
&gt;&gt;&gt; json.loads(s)['2']
u'\u05d1\u05e8\u05d9 \u05e6\u05e7\u05dc\u05d4'
&gt;&gt;&gt; print json.loads(s)['1']
ברי צקלה
&gt;&gt;&gt; print json.loads(s)['2']
ברי צקלה
</snippet></ROW><ROW><id>18337754</id><snippet>&gt;&gt;&gt; s = u'\xd7\x91\xd7\xa8\xd7\x99 \xd7\xa6\xd7\xa7\xd7\x9c\xd7\x94'
&gt;&gt;&gt; print s
××¨× ×¦×§××
&gt;&gt;&gt; print s.encode('latin1').decode('utf8')
ברי צקלה
</snippet></ROW><ROW><id>18337793</id><snippet>fileName = "test.txt"
read_file = open(fileName, "r")
with read_file as open_file:
    data = open_file.read().rstrip()
    keyword = "ape"
    data = ' '.join(["\n"*(word == keyword) + word for word in data.split()]).strip()
#   data = data.replace(keyword, "\n"+keyword).strip()
    print(data)
</snippet></ROW><ROW><id>18337793</id><snippet># ape bear cat dog 
# ape elephant frog giraffe 
# ape horse iguana jaguar
</snippet></ROW><ROW><id>18338069</id><snippet>tkinter</snippet></ROW><ROW><id>18338069</id><snippet>geometry</snippet></ROW><ROW><id>18338069</id><snippet>Tk</snippet></ROW><ROW><id>18338069</id><snippet>import tkinter as TK     # TK is a convenient, easy to type alias to use for tkinter.
gui = TK.Tk()
gui.geometry("500x500")   # don't forget the quotes
</snippet></ROW><ROW><id>18338069</id><snippet>from tkinter import *</snippet></ROW><ROW><id>18338069</id><snippet>from tkinter import *</snippet></ROW><ROW><id>18338069</id><snippet>from tkinter import *
gui = Tk()
Label = "hello"
Label1 = Label(gui, text=Label)

# Traceback (most recent call last):
#   File "stackoverflow.py", line 98, in &lt;module&gt;
#     Label1 = Label(gui, text=Label)
# TypeError: 'str' object is not callable
</snippet></ROW><ROW><id>18338069</id><snippet>Label</snippet></ROW><ROW><id>18338069</id><snippet>import tkinter as TK
</snippet></ROW><ROW><id>18338069</id><snippet>#import tkinter as TK
import newTkinter as TK
</snippet></ROW><ROW><id>18338069</id><snippet>from tkinter import *
from evilOverlappingModule import *
</snippet></ROW><ROW><id>18338069</id><snippet>import tkinter as TK
import evilOverlappingModule as evil
</snippet></ROW><ROW><id>18338090</id><snippet>__get__</snippet></ROW><ROW><id>18338090</id><snippet>__set__</snippet></ROW><ROW><id>18338090</id><snippet>__delete__</snippet></ROW><ROW><id>18338090</id><snippet>getattr</snippet></ROW><ROW><id>18338090</id><snippet>setattr</snippet></ROW><ROW><id>18338090</id><snippet>delattr</snippet></ROW><ROW><id>18338090</id><snippet>property</snippet></ROW><ROW><id>18338090</id><snippet>class Property(object):
    "Emulate PyProperty_Type() in Objects/descrobject.c"

    def __init__(self, fget=None, fset=None, fdel=None, doc=None):
        self.fget = fget
        self.fset = fset
        self.fdel = fdel
        if doc is None and fget is not None:
            doc = fget.__doc__
        self.__doc__ = doc

    def __get__(self, obj, objtype=None):
        if obj is None:
            return self
        if self.fget is None:
            raise AttributeError("unreadable attribute")
        return self.fget(obj)

    def __set__(self, obj, value):
        if self.fset is None:
            raise AttributeError("can't set attribute")
        self.fset(obj, value)

    def __delete__(self, obj):
        if self.fdel is None:
            raise AttributeError("can't delete attribute")
        self.fdel(obj)

    def getter(self, fget):
        return type(self)(fget, self.fset, self.fdel, self.__doc__)

    def setter(self, fset):
        return type(self)(self.fget, fset, self.fdel, self.__doc__)

    def deleter(self, fdel):
        return type(self)(self.fget, self.fset, fdel, self.__doc__)
</snippet></ROW><ROW><id>18338599</id><snippet>n = hc.sort(key=operator.itemgetter(*_arg))
</snippet></ROW><ROW><id>18338821</id><snippet>mkvirtualenv</snippet></ROW><ROW><id>18338821</id><snippet>virtualenvwrapper.sh</snippet></ROW><ROW><id>18338821</id><snippet>shell=True</snippet></ROW><ROW><id>18338821</id><snippet>/bin/sh -c ...</snippet></ROW><ROW><id>18338821</id><snippet>import pipes
from subprocess import check_call

check_call("""source /path/to/virtualenvwrapper.sh &amp;&amp;
    mkvirtualenv --no-site-packages """ + pipes.quote(envname),
    executable='bash', shell=True)
</snippet></ROW><ROW><id>18339006</id><snippet>ctx.set_tlsext_servername_callback(handle_sni)
</snippet></ROW><ROW><id>18339104</id><snippet>... sqlite3.connect(where_this_python_lib_is_installed + '...sqlite')
</snippet></ROW><ROW><id>18339104</id><snippet>pkg_resources</snippet></ROW><ROW><id>18339104</id><snippet>pkg_resources.resource_filename</snippet></ROW><ROW><id>18339104</id><snippet>from pkg_resources import resource_filename
CONN = sqlite3.connect(resource_filename(__name__, 'surrealism.sqlite'))
</snippet></ROW><ROW><id>18339104</id><snippet>surrealism.py</snippet></ROW><ROW><id>18339104</id><snippet>surrealism/__init__.py</snippet></ROW><ROW><id>18339104</id><snippet>surrealism.sqlite</snippet></ROW><ROW><id>18339104</id><snippet>surrealism/surrealism.sqlite</snippet></ROW><ROW><id>18339104</id><snippet>MANIFEST.in</snippet></ROW><ROW><id>18339104</id><snippet>py_modules=["surrealism"],</snippet></ROW><ROW><id>18339104</id><snippet>packages=["surrealism"]</snippet></ROW><ROW><id>18339104</id><snippet>package_data={'surrealism': ['surrealism.sqlite']},
</snippet></ROW><ROW><id>18339104</id><snippet>setup.py</snippet></ROW><ROW><id>18339104</id><snippet>setuptools</snippet></ROW><ROW><id>18339104</id><snippet>sqlite.connect</snippet></ROW><ROW><id>18339104</id><snippet>zip_safe=False,
</snippet></ROW><ROW><id>18339169</id><snippet>split()</snippet></ROW><ROW><id>18339169</id><snippet>parent, rest = string.split(".", 1)
</snippet></ROW><ROW><id>18339169</id><snippet>def recursive_dict_get(item, string, default=False):
    for s in string.split('.'):
        if (isinstance(item, dict) and s in item):
            item = item[s]
        else:
            return default
    return item
</snippet></ROW><ROW><id>18339264</id><snippet>d = { 'd1': 1,
      'd2': 2 ,
      'd3': [{'e1':'muh','e2':'mia'}, {'e1':'wuff', 'e2':'kickeriki'}]}

[inner['e2'] for inner in d['d3']]
=&gt; ['mia', 'kickeriki']
</snippet></ROW><ROW><id>18339463</id><snippet>blank=True</snippet></ROW><ROW><id>18339463</id><snippet>date</snippet></ROW><ROW><id>18339550</id><snippet>setdefault</snippet></ROW><ROW><id>18339550</id><snippet>defaultdict</snippet></ROW><ROW><id>18339550</id><snippet>&gt;&gt;&gt; a = [0, 3, 1, 6, 8, 1, 3, 3, 2, 10, 10]
&gt;&gt;&gt; dup={}
&gt;&gt;&gt; for i,x in enumerate(a):
...     dup.setdefault(x,[]).append(i)
...
&gt;&gt;&gt; dup
{0: [0], 1: [2, 5], 2: [8], 3: [1, 6, 7], 6: [3], 8: [4], 10: [9, 10]}
</snippet></ROW><ROW><id>18339550</id><snippet>&gt;&gt;&gt; {i:x for i,x in dup.iteritems() if len(x)&gt;1}
{1: [2, 5], 10: [9, 10], 3: [1, 6, 7]}
</snippet></ROW><ROW><id>18339700</id><snippet>bin()</snippet></ROW><ROW><id>18339700</id><snippet>hex()</snippet></ROW><ROW><id>18339700</id><snippet>int</snippet></ROW><ROW><id>18339700</id><snippet>import binascii

password = raw_input("Enter your Password: ")
bits = int(raw_input("Shift By: "))

def getBinary(word):
    return int(binascii.hexlify(word), 16)

def shift(bin, num):
    return bin &lt;&lt; num

shifted = shift(getBinary(password), bits)
print bin(shifted)
</snippet></ROW><ROW><id>18340001</id><snippet>student_list = Student.objects.all()
for student in student_list:
    print student.name
</snippet></ROW><ROW><id>18340001</id><snippet>.</snippet></ROW><ROW><id>18340197</id><snippet>if __name__ == '__main__':
</snippet></ROW><ROW><id>18340197</id><snippet>if-statement</snippet></ROW><ROW><id>18340197</id><snippet>from multiprocessing import Pool


def print_square(i):
    print str(i * i)

if __name__ == '__main__':
    p = Pool(1)
    for i in range(10):
        p.apply_async(print_square, args=(i,))
    p.close()
    p.join()
</snippet></ROW><ROW><id>18340253</id><snippet>import itertools

database = [
    {"Name":"Arnold", "Age":"52", "Height":"160"}, 
    {"Name":"Donald", "Age":"52", "Height":"161"}, 
    {"Name":"Trevor", "Age":"22", "Height":"150"},
]

def search(s):
    s = s.lower() # it is a nice feature to ignore case
    for item in database:
        if any(s in v.lower() for v in item.values()): # if any value contains s
            yield item # spit out the item — this is a generator function

# iterate over at most 5 first results
for result in itertools.islice(search("52"), 5):   
    print(result)
</snippet></ROW><ROW><id>18340253</id><snippet>{'Height': '160', 'Age': '52', 'Name': 'Arnold'}
{'Height': '161', 'Age': '52', 'Name': 'Donald'}
</snippet></ROW><ROW><id>18340435</id><snippet>attachment</snippet></ROW><ROW><id>18340435</id><snippet>print("Content-type: application/octet-stream")
print("Content-Disposition: attachment; filename=%s.zip" %(filename))
print()
</snippet></ROW><ROW><id>18340435</id><snippet>shutil.copyfileobj()</snippet></ROW><ROW><id>18340435</id><snippet>sys.stdout.buffer</snippet></ROW><ROW><id>18340435</id><snippet>from shutil import copyfileobj
import sys

print("Content-type: application/octet-stream")
print("Content-Disposition: attachment; filename=%s.zip" %(filename))
print()

with open('../../data/code/' + filename + '.zip','rb') as zipfile:
    copyfileobj(file, sys.stdout.buffer)
</snippet></ROW><ROW><id>18340435</id><snippet>print()</snippet></ROW><ROW><id>18340435</id><snippet>b'...'</snippet></ROW><ROW><id>18340435</id><snippet>sys.stdout.buffer</snippet></ROW><ROW><id>18340473</id><snippet>for line in open(filename, 'r'):
    item = line.rstrip() # strip off newline and any other trailing whitespace
    ...
</snippet></ROW><ROW><id>18340527</id><snippet>re.findall()</snippet></ROW><ROW><id>18340527</id><snippet>m = re.findall(r'TEST\s\((?:\d+\s?)*\)', str)
</snippet></ROW><ROW><id>18340527</id><snippet>&gt;&gt;&gt; import re
&gt;&gt;&gt; s = '(((TEST (4 5 17 33 38 45 93 101 104 108 113 116 135 146 148)) (TRAIN (0 1 2 3 6 7 8 9 10 11 12 13 14 15 16 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 34 35 36 37 39 40 41 42 43 44 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 94 95 96 97 98 99 100 102 103 105 106 107 109 110 111 112 114 115 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 136 137 138 139 140 141 142 143 144 145 147 149 150 151))) ((TEST (19 35 46 47 48 56 59 61 65 69 71 84 105 107 130)) (TRAIN (0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 36 37 38 39 40 41 42 43 44 45 49 50 51 52 53 54 55 57 58 60 62 63 64 66 67 68 70 72 73 74 75 76 77 78 79 80 81 82 83 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 106 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151)))'
&gt;&gt;&gt; re.findall(r'TEST\s\((?:\d+\s?)*\)', s)
['TEST (4 5 17 33 38 45 93 101 104 108 113 116 135 146 148)', 'TEST (19 35 46 47 48 56 59 61 65 69 71 84 105 107 130)']
</snippet></ROW><ROW><id>18340527</id><snippet>re.findall()</snippet></ROW><ROW><id>18340716</id><snippet>for c in range(32, 128, 16):
    #print chr line
    for c1 in range(c, c+16):
        # print chr
    #print asc line
    for c2 in range(c, c+16):
        # print asc
</snippet></ROW><ROW><id>18340767</id><snippet>DataOutptuStream dos = new DataOutputStream(
                       new BufferedOutputStream(socket.getOutputStream()));
dos.writeInt(50);
dos.writeUTF("some string"); // this includes a 16-bit unsigned length
dos.writeInt(500);
</snippet></ROW><ROW><id>18340974</id><snippet>if a == 'b' or 'c'</snippet></ROW><ROW><id>18340974</id><snippet>if (True|False) or 'c'</snippet></ROW><ROW><id>18340974</id><snippet>'c'</snippet></ROW><ROW><id>18340974</id><snippet>a == 'b'</snippet></ROW><ROW><id>18340974</id><snippet>a == 'b' and a == 'c'…</snippet></ROW><ROW><id>18340974</id><snippet>a in {'b', 'c'…}</snippet></ROW><ROW><id>18340974</id><snippet>a</snippet></ROW><ROW><id>18340974</id><snippet>while username not in {"cking", "doneal", "mcook"}:
    print ("Invalid username. Please try again.")
    username = input ("Enter username:")
print ("Valid username.")
</snippet></ROW><ROW><id>18340978</id><snippet>ET.register_namespace('',"http://schemas.microsoft.com/developer/msbuild/2003")
</snippet></ROW><ROW><id>18340978</id><snippet>tree.write(projectFile,
           xml_declaration = True,
           encoding = 'utf-8',
           method = 'xml')
</snippet></ROW><ROW><id>18340980</id><snippet>toHtml</snippet></ROW><ROW><id>18340980</id><snippet>toPlainText</snippet></ROW><ROW><id>18340980</id><snippet>getHtml</snippet></ROW><ROW><id>18340980</id><snippet>QTextCursor</snippet></ROW><ROW><id>18340980</id><snippet>textCursor()</snippet></ROW><ROW><id>18340998</id><snippet>CELERYD_PREFETCH_MULTIPLIER</snippet></ROW><ROW><id>18341138</id><snippet>&gt;&gt;&gt; import re
&gt;&gt;&gt; re.match('&lt;Category:\s(\w+)', "&lt;Category: XXX&lt;/b&gt;").group(1)
'XXX'
&gt;&gt;&gt; re.match('&lt;Category:\s(\w+)', "&lt;Category: XXX  - ").group(1)
'XXX'
</snippet></ROW><ROW><id>18341138</id><snippet>findall</snippet></ROW><ROW><id>18341138</id><snippet>&gt;&gt;&gt; import re
&gt;&gt;&gt; re.findall('&lt;Category:\s(\w+)', "&lt;Category: XXX  - ")[0]
'XXX'
&gt;&gt;&gt; re.findall('&lt;Category:\s(\w+)', "&lt;Category: XXX&lt;/b&gt;")[0]
'XXX'
</snippet></ROW><ROW><id>18341138</id><snippet>\s</snippet></ROW><ROW><id>18341138</id><snippet>\w</snippet></ROW><ROW><id>18341138</id><snippet>[^a-zA-Z0-9_]</snippet></ROW><ROW><id>18341138</id><snippet>\w+</snippet></ROW><ROW><id>18341138</id><snippet>(...)</snippet></ROW><ROW><id>18341295</id><snippet>&gt;&gt;&gt; 1 == '1'
False
</snippet></ROW><ROW><id>18341295</id><snippet>code</snippet></ROW><ROW><id>18341295</id><snippet>&gt;&gt;&gt; str(1) == '1'
True
</snippet></ROW><ROW><id>18341295</id><snippet>entry</snippet></ROW><ROW><id>18341746</id><snippet>start(filename)</snippet></ROW><ROW><id>18341746</id><snippet>write(txt)</snippet></ROW><ROW><id>18341746</id><snippet>stop()</snippet></ROW><ROW><id>18341746</id><snippet>write</snippet></ROW><ROW><id>18341746</id><snippet>Queue</snippet></ROW><ROW><id>18341746</id><snippet>Queue</snippet></ROW><ROW><id>18341746</id><snippet>log.py</snippet></ROW><ROW><id>18341746</id><snippet>"""Module to log to a file."""

import Queue
import threading

_name = None
_lt = None
_q = None
_stop = False


def _run():
    while not _stop:
        txt = _q.get()
        with open(_name, 'a+') as logfile:
            logfile.write(txt)


def start(name):
    global _lt, _q, _name
    if _name:
        raise RuntimeError('Logging already initialized')
    _name = name
    _q = Queue.Queue()
    _lt = threading.Thread(target=_run)
    _lt.start()


def stop():
    global _stop
    _stop = True
    _lt.join()


def write(txt):
    _q.put(txt, block=False)
</snippet></ROW><ROW><id>18341858</id><snippet>random</snippet></ROW><ROW><id>18341858</id><snippet>import random
image = random.choice(self.imageListRegular) #this is your 'Y' variable
times = random.randint(1, 4) #this is your 'X' variable
</snippet></ROW><ROW><id>18341858</id><snippet>import Tkinter 
root = Tkinter.Tk() 
for i in xrange(times):
    Tkinter.Label(root, image=image).pack() 
root.mainloop() # Start the GUI
</snippet></ROW><ROW><id>18341858</id><snippet>random.choice</snippet></ROW><ROW><id>18341858</id><snippet>random.choice(["apples", "bananas", "oranges"])</snippet></ROW><ROW><id>18341858</id><snippet>random.randint(low, high)</snippet></ROW><ROW><id>18341858</id><snippet>random.randint(1, 4)</snippet></ROW><ROW><id>18341937</id><snippet>*</snippet></ROW><ROW><id>18341937</id><snippet>.*</snippet></ROW><ROW><id>18341937</id><snippet>/</snippet></ROW><ROW><id>18341937</id><snippet>while i &lt; n:
    c = pat[i]
    i = i+1
    if c == '*':
        res = res + '.*'
    elif c == '?':
        res = res + '.'
    elif c == '[':
        ...
</snippet></ROW><ROW><id>18341937</id><snippet>&gt;&gt;&gt; fnmatch.fnmatch('a/b/d/c', 'a/*/c')
True
&gt;&gt;&gt; fnmatch.fnmatch('a/b/d/c', 'a/*************c')
True
</snippet></ROW><ROW><id>18342043</id><snippet>\u0001</snippet></ROW><ROW><id>18342043</id><snippet>'\u0001'</snippet></ROW><ROW><id>18342043</id><snippet>\u</snippet></ROW><ROW><id>18342043</id><snippet>str</snippet></ROW><ROW><id>18342043</id><snippet>unicode</snippet></ROW><ROW><id>18342043</id><snippet>'\u0001'</snippet></ROW><ROW><id>18342043</id><snippet>u'\u0001'</snippet></ROW><ROW><id>18342043</id><snippet>str</snippet></ROW><ROW><id>18342043</id><snippet>b = f.readline()
print repr(b)
</snippet></ROW><ROW><id>18342043</id><snippet>'357812\x0110\x0113\x017\x018\n'
</snippet></ROW><ROW><id>18342043</id><snippet>'\x01'</snippet></ROW><ROW><id>18342043</id><snippet>u'\u0001'.encode('Latin-1')</snippet></ROW><ROW><id>18342043</id><snippet>lines = (line.replace('\x01', ',') for line in file)
</snippet></ROW><ROW><id>18342043</id><snippet>'\x01'</snippet></ROW><ROW><id>18342043</id><snippet>u'\u0001'</snippet></ROW><ROW><id>18342075</id><snippet>from PIL import Image
from PIL import ImageChops

a = Image.open("pict1.jpg")
b = Image.open("pict2.jpg")
diff = ImageChops.difference (a, b)
RED = ('red')
RL = Image.new('RGB', diff.size, RED) # Make a red layer the same size
RedDiff = ImageChops.multiply(RL, diff)
Result = ImageChops.blend(RedDiff, b, 0.7)
Result.show()
</snippet></ROW><ROW><id>18342239</id><snippet>EM = 0x00 || 0x02 || PS || 0x00 || M.
</snippet></ROW><ROW><id>18342239</id><snippet>EM</snippet></ROW><ROW><id>18342239</id><snippet>PS</snippet></ROW><ROW><id>18342239</id><snippet>M</snippet></ROW><ROW><id>18342239</id><snippet>def RemovePKCS15Padding( padded_msg ):
    if len(padded_msg) &lt; 2 or padded_msg[0]!='\x02':
        raise PaddingError # or whatever
    p = padded_msg.find('\x00')
    if p &lt; 0:
        raise PaddingError # or whatever
    return padded_msg[p+1:]
</snippet></ROW><ROW><id>18342297</id><snippet>JythonFunction</snippet></ROW><ROW><id>18342297</id><snippet>EvalFunc</snippet></ROW><ROW><id>18342297</id><snippet>LoadFunc</snippet></ROW><ROW><id>18342297</id><snippet>register 'myudfs.py' using jython as myudfs ;

A = LOAD 'foo.bar' AS (total:chararray) ; 
B = FOREACH A GENERATE myudf.prepare_input(total) ;
</snippet></ROW><ROW><id>18342377</id><snippet>&gt;&gt;&gt; import re
&gt;&gt;&gt; reg_exp = '(\w+)\.(\w+)\(?([^)]*)\)?'
&gt;&gt;&gt; re.match(reg_exp, 'class.method("params")').groups()
('class', 'method', '"params"')
&gt;&gt;&gt; re.match(reg_exp, "class.method('params')").groups()
('class', 'method', "'params'")
&gt;&gt;&gt; re.match(reg_exp, "class.method()").groups()
('class', 'method', '')
&gt;&gt;&gt; re.match(reg_exp, 'class.method(params)').groups()
('class', 'method', 'params')
&gt;&gt;&gt; re.match(reg_exp, 'class.method').groups()
('class', 'method', '')
</snippet></ROW><ROW><id>18342377</id><snippet>(\w+)</snippet></ROW><ROW><id>18342377</id><snippet>([^)]*)</snippet></ROW><ROW><id>18342377</id><snippet>)</snippet></ROW><ROW><id>18342377</id><snippet>\(?</snippet></ROW><ROW><id>18342377</id><snippet>(</snippet></ROW><ROW><id>18342377</id><snippet>\)?</snippet></ROW><ROW><id>18342377</id><snippet>)</snippet></ROW><ROW><id>18342377</id><snippet>\(?([^)]*)\)?</snippet></ROW><ROW><id>18342905</id><snippet>class BoundMethod(object):
    def __init__(self, function, instance):
        self.__func__ = function
        self.__self__ = instance
    def __call__(self, *args, **kwargs):
        return self.__func__(self.__self__, *args, **kwargs)
</snippet></ROW><ROW><id>18342905</id><snippet>&gt;&gt;&gt; class C:
...     def foo(self):
...         print(self)
&gt;&gt;&gt; C.foo
&lt;function __main__.foo&gt;
&gt;&gt;&gt; c = C()
&gt;&gt;&gt; c.foo
&lt;bound method C.foo of &lt;__main__.C object at 0x10ab90a90&gt;&gt;
&gt;&gt;&gt; c.foo.__func__
&lt;function __main__.foo&gt;
&gt;&gt;&gt; c.foo.__func__ is C.foo, c.foo.__self__ is c
(True, True)
</snippet></ROW><ROW><id>18342905</id><snippet>&gt;&gt;&gt; import types
&gt;&gt;&gt; f = types.MethodType(C.foo, 2)
&gt;&gt;&gt; f
&lt;bound method int.foo of 2&gt;
&gt;&gt;&gt; f()
2
</snippet></ROW><ROW><id>18342905</id><snippet>c.foo</snippet></ROW><ROW><id>18342905</id><snippet>c</snippet></ROW><ROW><id>18342905</id><snippet>__get__</snippet></ROW><ROW><id>18342905</id><snippet>c.foo</snippet></ROW><ROW><id>18342905</id><snippet>try:
    return c.__dict__['foo']
except KeyError:
    value = type(c).__dict__['foo']
    try:
        return value.__get__(c)
    except AttributeError:
        return value
</snippet></ROW><ROW><id>18342905</id><snippet>__get__</snippet></ROW><ROW><id>18342905</id><snippet>B(A()).show_name()</snippet></ROW><ROW><id>18342905</id><snippet>A</snippet></ROW><ROW><id>18342905</id><snippet>B(A()).show_name</snippet></ROW><ROW><id>18342905</id><snippet>A</snippet></ROW><ROW><id>18342905</id><snippet>&gt;&gt;&gt; a = A()
&gt;&gt;&gt; b = B(a)
&gt;&gt;&gt; b.show_name
</snippet></ROW><ROW><id>18342905</id><snippet>__init__</snippet></ROW><ROW><id>18342905</id><snippet>self.show_name = a.show_name
</snippet></ROW><ROW><id>18342905</id><snippet>a.show_name</snippet></ROW><ROW><id>18342905</id><snippet>self.show_name</snippet></ROW><ROW><id>18342905</id><snippet>b.show_name</snippet></ROW><ROW><id>18342905</id><snippet>a</snippet></ROW><ROW><id>18342905</id><snippet>self.show_name = types.MethodType(a.show_name.__func__, self)
</snippet></ROW><ROW><id>18342941</id><snippet>python setup.py install --old-and-unmanageable
</snippet></ROW><ROW><id>18342941</id><snippet>--old-and-unmanageable</snippet></ROW><ROW><id>18343134</id><snippet>save_m2m</snippet></ROW><ROW><id>18343134</id><snippet>save_m2m</snippet></ROW><ROW><id>18343134</id><snippet>cleaned_data</snippet></ROW><ROW><id>18343134</id><snippet>save_form_data</snippet></ROW><ROW><id>18343147</id><snippet>display_car</snippet></ROW><ROW><id>18343147</id><snippet>def display_car(self):
    print "This is a %s %s with %d MPG." % (self.color, self.model, self.mpg)
</snippet></ROW><ROW><id>18343147</id><snippet>format</snippet></ROW><ROW><id>18343147</id><snippet>def display_car(self):
    print "This is a {0} {1} with {2} MPG.".format(self.color, self.model, self.mpg)
</snippet></ROW><ROW><id>18343147</id><snippet>This is a silver DeLorean with 88 MPG.</snippet></ROW><ROW><id>18343147</id><snippet>format</snippet></ROW><ROW><id>18343147</id><snippet>def display_car(self):
    print "This is a {color} {model} with {mpg} MPG.".format(color=self.color, model=self.model, mpg=self.mpg)
</snippet></ROW><ROW><id>18343147</id><snippet>None</snippet></ROW><ROW><id>18343147</id><snippet>print my_car.display_car()</snippet></ROW><ROW><id>18343147</id><snippet>my_car.display_car()</snippet></ROW><ROW><id>18343211</id><snippet>+</snippet></ROW><ROW><id>18343211</id><snippet>{m,n}</snippet></ROW><ROW><id>18343211</id><snippet>+</snippet></ROW><ROW><id>18343211</id><snippet>{m,n}</snippet></ROW><ROW><id>18343211</id><snippet>[ |.]</snippet></ROW><ROW><id>18343211</id><snippet>|</snippet></ROW><ROW><id>18343211</id><snippet>.</snippet></ROW><ROW><id>18343211</id><snippet>[ \.]</snippet></ROW><ROW><id>18343211</id><snippet>    tv = re.findall(r"""(.*)          # Title
                        [ .]
                        S(\d{1,2})    # Season
                        E(\d{1,2})    # Episode
                        [ .a-zA-Z]*  # Space, period, or words like PROPER/Buried
                        (\d{3,4}p)?   # Quality
                    """, name, re.VERBOSE)
</snippet></ROW><ROW><id>18343211</id><snippet>movie = re.findall(r"""(.*?[ .]\d{4})  # Title including year
                       [ .a-zA-Z]*     # Space, period, or words
                       (\d{3,4}p)?      # Quality
                    """, name, re.VERBOSE)
</snippet></ROW><ROW><id>18343211</id><snippet>---------- TV ----------
Show: The Newsroom 2012
Season: 2
Episode: 6
Quality: 720p
---------- TV ----------
Show: Breaking Bad
Season: 5
Episode: 10
Quality: nonHD
---------- TV ----------
Show: Breaking Bad
Season: 5
Episode: 10
Quality: 720p
---------- TV ----------
Show: Dexter
Season: 8
Episode: 8
Quality: nonHD
---------- TV ----------
Show: Dexter
Season: 8
Episode: 7
Quality: 1080p
---------- TV ----------
Show: Dexter
Season: 8
Episode: 7
Quality: 720p
--------- MOVIE --------
Title: The Great Gatsby 2013
Quality: 1080p
--------- MOVIE --------
Title: The Forbidden Girl 2013
Quality: nonHD
--------- MOVIE --------
Title: Pain &amp; Gain 2013
Quality: 720p
---------- TV ----------
Show: Band of Brothers
Season: 1
Episode: 2
Quality: nonHD
---------- TV ----------
Show: Dexter
Season: 8
Episode: 6
Quality: 720p
---------- TV ----------
Show: Dexter
Season: 8
Episode: 6
Quality: 720p
</snippet></ROW><ROW><id>18343227</id><snippet>text_str = '''Some additional very long text
that spans over a few lines and is
very very very very very boring
but it's sole purpose is demonstration
so we can live with that'''

# make figure and axes
fig, ax = plt.subplots(1, 1)
# shove the bottom of the axes up
fig.subplots_adjust(bottom=.3)
# add the text
fig.text(0, 0, text_str, va='bottom')
# force draw
plt.draw()
</snippet></ROW><ROW><id>18343571</id><snippet>player1's</snippet></ROW><ROW><id>18343571</id><snippet>player2's</snippet></ROW><ROW><id>18343571</id><snippet>cumsum</snippet></ROW><ROW><id>18343571</id><snippet>import pandas as pd
import collections

df = pd.DataFrame({'player1' : ['Joe', 'Steve', 'Bill', 'Doug',
                      'Steve','Bill','Joe','Steve'], 'player2' : ['Bill',
                      'Doug', 'Steve', 'Joe', 'Bill', 'Steve', 'Doug', 'Bill'],
                      'winner' : ['Joe','Steve' , 'Steve','Doug', 'Bill',
                      'Steve', 'Doug', 'Steve'], 'loser' : ['Bill', 'Doug',
                      'Bill', 'Joe', 'Steve', 'Bill', 'Joe', 'Bill'], },
                  columns = ['player1', 'player2', 'winner', 'loser'])

wins = collections.Counter()
def count_wins():
    for idx, row in df.iterrows():
        wins[row['winner']] += 1
        yield wins[row['player1']], wins[row['player2']]
df['player1_wins'], df['player2_wins'] = zip(*list(count_wins()))
print(df)
</snippet></ROW><ROW><id>18343571</id><snippet>  player1 player2 winner  loser  player1_wins  player2_wins
0     Joe    Bill    Joe   Bill             1             0
1   Steve    Doug  Steve   Doug             1             0
2    Bill   Steve  Steve   Bill             0             2
3    Doug     Joe   Doug    Joe             1             1
4   Steve    Bill   Bill  Steve             2             1
5    Bill   Steve  Steve   Bill             1             3
6     Joe    Doug   Doug    Joe             1             2
7   Steve    Bill  Steve   Bill             4             1
</snippet></ROW><ROW><id>18343641</id><snippet>with</snippet></ROW><ROW><id>18343641</id><snippet>for</snippet></ROW><ROW><id>18343641</id><snippet>with</snippet></ROW><ROW><id>18343641</id><snippet>def with_iter(iterable):
    with iterable:
        yield from iterable

for line in with_iter(open("filename")):
    # do something

for line in with_iter(open("other_filename")):
    # do something else
</snippet></ROW><ROW><id>18343641</id><snippet>map</snippet></ROW><ROW><id>18343641</id><snippet>def do_with_line(line):
    return line

with open("filename") as f:
    process = [do_with_line(line) for line in f]
</snippet></ROW><ROW><id>18343641</id><snippet>for</snippet></ROW><ROW><id>18343952</id><snippet>with</snippet></ROW><ROW><id>18343952</id><snippet>outfile = open('test.txt', 'w')

outfile.write('hi\n')

x = 1
y = 2
z = x + y

outfile.write('hello\n')

outfile.close()
</snippet></ROW><ROW><id>18343952</id><snippet>with</snippet></ROW><ROW><id>18343952</id><snippet>with open('test.txt', 'w') as xfile:
    do something with xfile
</snippet></ROW><ROW><id>18343952</id><snippet>output = []

x = 1
y = 2
z = x + y
output.append(z)

a = 3
b = 4
c = a + b
output.append(c)

with open('output.txt', 'w') as outfile:
    for item in output:
        outfile.write(str(item) + '\n')
</snippet></ROW><ROW><id>18343985</id><snippet>&gt;&gt;&gt; a = [('val', 1), ('val2', 2), ('val3', 3)]
&gt;&gt;&gt; ', '.join('{}={}'.format(*el) for el in a)
'val=1, val2=2, val3=3'
</snippet></ROW><ROW><id>18343985</id><snippet>str</snippet></ROW><ROW><id>18344366</id><snippet>R</snippet></ROW><ROW><id>18344366</id><snippet>G</snippet></ROW><ROW><id>18344366</id><snippet>B</snippet></ROW><ROW><id>18344366</id><snippet>topImage.png</snippet></ROW><ROW><id>18344366</id><snippet>print old_im.mode  # This should print "RGBA" if it has an alpha channel.
</snippet></ROW><ROW><id>18344366</id><snippet>new_im</snippet></ROW><ROW><id>18344366</id><snippet>new_im = Image.new("RGBA", new_size) # makes the black image
# Note the "A" --------^
</snippet></ROW><ROW><id>18344366</id><snippet>new_im.paste(old_im,(0,0), mask=old_im)  # Using old_im as the mask argument should tell the paste function to use old_im's alpha channel to combine the two images.
</snippet></ROW><ROW><id>18344434</id><snippet>3 10 7 8\n     
2 9 8 3\n  
4 1 4 2\n
</snippet></ROW><ROW><id>18344434</id><snippet>with open('/tmp/test.txt', 'r') as fin:     # fin is a 'file object' 
    while True:
        ch=fin.read(1)
        if not ch:
            break
        print ch,                           # comma suppresses the CR
</snippet></ROW><ROW><id>18344434</id><snippet>with open('/tmp/test.txt', 'r') as fin:
    data=fin.read()
    print data    
</snippet></ROW><ROW><id>18344434</id><snippet>with open('/tmp/test.txt', 'r') as fin:
    for i, line in enumerate(fin):
        print i, line    
</snippet></ROW><ROW><id>18344434</id><snippet>with open('/tmp/test.txt', 'r') as fin:
    data=fin.readlines()  
</snippet></ROW><ROW><id>18344434</id><snippet>for line in fin:                 # 'fin' is a file object result of open
    print line
</snippet></ROW><ROW><id>18344434</id><snippet>for line in fin.readline():
    print line
</snippet></ROW><ROW><id>18344434</id><snippet>for line in 'line 1\nline 2\nline 3'.splitlines():
    print line
</snippet></ROW><ROW><id>18344740</id><snippet>regex</snippet></ROW><ROW><id>18344740</id><snippet>&gt;&gt;&gt; import re
&gt;&gt;&gt; a = "test string with %(experiment1)s and %(experiment2)s"
&gt;&gt;&gt; re.findall(r'%\((.*?)\)', a)
['experiment1', 'experiment2']
</snippet></ROW><ROW><id>18345040</id><snippet>division</snippet></ROW><ROW><id>18345040</id><snippet>future_imports</snippet></ROW><ROW><id>18345040</id><snippet>Template</snippet></ROW><ROW><id>18345040</id><snippet>&gt;&gt;&gt; from mako.template import Template
&gt;&gt;&gt; print Template("${a/b}").render(a=1, b=2)
0
&gt;&gt;&gt; print Template("${a/b}", future_imports=['division']).render(a=1, b=2)
0.5
&gt;&gt;&gt; print Template("${'{0:.2f}'.format(a/b)}", future_imports=["division"]).render(a=1, b=2)
0.50
</snippet></ROW><ROW><id>18345040</id><snippet>future_imports</snippet></ROW><ROW><id>18345040</id><snippet>__future__</snippet></ROW><ROW><id>18345040</id><snippet>futures_imports=['FOO', 'BAR']</snippet></ROW><ROW><id>18345040</id><snippet>from __future__ import FOO, BAR</snippet></ROW><ROW><id>18345040</id><snippet>future_imports</snippet></ROW><ROW><id>18345099</id><snippet>subprocess</snippet></ROW><ROW><id>18345099</id><snippet>PIPE</snippet></ROW><ROW><id>18345099</id><snippet>stderr</snippet></ROW><ROW><id>18345099</id><snippet>stderr</snippet></ROW><ROW><id>18345099</id><snippet>import subprocess
proc = subprocess.Popen(['path_to_tool', '-option1', 'option2'],
                        stdout=file_out, stderr=subprocess.PIPE)
for line in proc.stderr:
    sys.stdout.write(line)
    log_file.write(line)
proc.wait()
</snippet></ROW><ROW><id>18345099</id><snippet>for line in proc.stderr:</snippet></ROW><ROW><id>18345099</id><snippet>read(128)</snippet></ROW><ROW><id>18345099</id><snippet>read(1)</snippet></ROW><ROW><id>18345099</id><snippet>read(1)</snippet></ROW><ROW><id>18345099</id><snippet>tee</snippet></ROW><ROW><id>18345099</id><snippet>subprocess.call('path_to_tool -option1 option2 2|tee log_file 1&gt;2', shell=True,
                stdout=file_out)
</snippet></ROW><ROW><id>18345099</id><snippet>tool = subprocess.Popen(['path_to_tool', '-option1', 'option2'],
                        stdout=file_out, stderr=subprocess.PIPE)
tee = subprocess.Popen(['tee', 'log_file'], stdin=tool.stderr)
tool.stderr.close()
tee.communicate()
</snippet></ROW><ROW><id>18345099</id><snippet>sh</snippet></ROW><ROW><id>18345099</id><snippet>shell</snippet></ROW><ROW><id>18345099</id><snippet>shell_command</snippet></ROW><ROW><id>18345099</id><snippet>shellout</snippet></ROW><ROW><id>18345099</id><snippet>iterpipes</snippet></ROW><ROW><id>18345099</id><snippet>sarge</snippet></ROW><ROW><id>18345099</id><snippet>cmd_utils</snippet></ROW><ROW><id>18345099</id><snippet>commandwrapper</snippet></ROW><ROW><id>18345099</id><snippet>Popen</snippet></ROW><ROW><id>18345099</id><snippet>tool = subprocess.Popen(['path_to_tool', '-option1', 'option2'],
                        stdout=subprocess.PIPE, stderr=subprocess.STDOUT)
</snippet></ROW><ROW><id>18345099</id><snippet>tool.stderr</snippet></ROW><ROW><id>18345099</id><snippet>tool.stdout</snippet></ROW><ROW><id>18345099</id><snippet>tee = subprocess.Popen(['tee', 'log_file'], stdin=tool.stdout)
tool.stdout.close()
tee.communicate()
</snippet></ROW><ROW><id>18345099</id><snippet>tool.stdout.read()</snippet></ROW><ROW><id>18345099</id><snippet>tool.stderr</snippet></ROW><ROW><id>18345099</id><snippet>tee</snippet></ROW><ROW><id>18345099</id><snippet>tee</snippet></ROW><ROW><id>18345099</id><snippet>communicate</snippet></ROW><ROW><id>18345099</id><snippet>select</snippet></ROW><ROW><id>18345099</id><snippet>gevent</snippet></ROW><ROW><id>18345099</id><snippet>proc = subprocess.Popen(['path_to_tool', '-option1', 'option2'],
                        stdout=subprocess.PIPE, stderr=subprocess.PIPE)
def tee_pipe(pipe, f1, f2):
    for line in pipe:
        f1.write(line)
        f2.write(line)
t1 = threading.Thread(target=tee_pipe, args=(proc.stdout, file_out, sys.stdout))
t2 = threading.Thread(target=tee_pipe, args=(proc.stderr, log_file, sys.stderr))
t3 = threading.Thread(proc.wait)
t1.start(); t2.start(); t3.start()
t1.join(); t2.join(); t3.join()
</snippet></ROW><ROW><id>18345099</id><snippet>subprocess.communicate</snippet></ROW><ROW><id>18345099</id><snippet>subprocess</snippet></ROW><ROW><id>18345099</id><snippet>select</snippet></ROW><ROW><id>18345099</id><snippet>poll</snippet></ROW><ROW><id>18345099</id><snippet>communicate</snippet></ROW><ROW><id>18345099</id><snippet>communicate</snippet></ROW><ROW><id>18345099</id><snippet>communicate</snippet></ROW><ROW><id>18345099</id><snippet>communicate</snippet></ROW><ROW><id>18345116</id><snippet>request.path_info</snippet></ROW><ROW><id>18345116</id><snippet>url(r'^homepage/?(?:\.json)?', home),
</snippet></ROW><ROW><id>18345116</id><snippet>if request.path_info.endswith("json"): 
        return home_json_render()
    else:  
        return render(request, 'frontpage.html', params)
</snippet></ROW><ROW><id>18345222</id><snippet>on_trait_change(self.lineplot.value, self._handle_data_change, name="data_changed")</snippet></ROW><ROW><id>18345309</id><snippet>NAME</snippet></ROW><ROW><id>18345309</id><snippet>get_loc</snippet></ROW><ROW><id>18345309</id><snippet>import pandas as pd
import glob

fn = 'out.csv'
fns = glob.glob('*.csv') #goes through every CSV file in director
colname = 'ITEM'
rowname = 'NAME'
for csv in fns:
    s = pd.read_csv(csv, usecols=[colname], squeeze=True, skiprows=7, header=0)
    row_idx = pd.Index(s).get_loc(rowname)
    sub_items = s[row_idx + 1:]
    pd.Series(sub_items.unique()).to_csv(fn, mode='a')
</snippet></ROW><ROW><id>18345309</id><snippet>usecols</snippet></ROW><ROW><id>18345309</id><snippet>ITEM</snippet></ROW><ROW><id>18345309</id><snippet>squeeze=True</snippet></ROW><ROW><id>18345309</id><snippet>Series</snippet></ROW><ROW><id>18345309</id><snippet>get_loc</snippet></ROW><ROW><id>18345309</id><snippet>'NAME'</snippet></ROW><ROW><id>18345309</id><snippet>row_idx + 1</snippet></ROW><ROW><id>18345309</id><snippet>mode='a'</snippet></ROW><ROW><id>18345309</id><snippet>out.csv</snippet></ROW><ROW><id>18345457</id><snippet>matplotlib</snippet></ROW><ROW><id>18345457</id><snippet>ffmpeg</snippet></ROW><ROW><id>18345457</id><snippet>mencoder</snippet></ROW><ROW><id>18345457</id><snippet># First import everthing you need
import numpy as np
from matplotlib import pyplot as plt
from matplotlib import animation
from mpl_toolkits.mplot3d import Axes3D

# Create some random data, I took this piece from here:
# http://matplotlib.org/mpl_examples/mplot3d/scatter3d_demo.py
def randrange(n, vmin, vmax):
    return (vmax - vmin) * np.random.rand(n) + vmin
n = 100
xx = randrange(n, 23, 32)
yy = randrange(n, 0, 100)
zz = randrange(n, -50, -25)

# Create a figure and a 3D Axes
fig = plt.figure()
ax = Axes3D(fig)

# Create an init function and the animate functions.
# Both are explained in the tutorial. Since we are changing
# the the elevation and azimuth and no objects are really
# changed on the plot we don't have to return anything from
# the init and animate function. (return value is explained
# in the tutorial.
def init():
    x = np.linspace(0, 100, 100)
    y = np.linspace(0, 100, 100)
    ax.scatter(xx, yy, zz, marker='o', s=20, c="goldenrod", alpha=0.6)

def animate(i):
    ax.view_init(elev=10., azim=i)

# Animate
anim = animation.FuncAnimation(fig, animate, init_func=init,
                               frames=360, interval=20, blit=True)
# Save
anim.save('basic_animation.mp4', fps=30, extra_args=['-vcodec', 'libx264'])
</snippet></ROW><ROW><id>18345522</id><snippet>Items()</snippet></ROW><ROW><id>18345522</id><snippet>items()</snippet></ROW><ROW><id>18345522</id><snippet>iteritems()</snippet></ROW><ROW><id>18345522</id><snippet>iterkeys()</snippet></ROW><ROW><id>18345522</id><snippet>itervalues()</snippet></ROW><ROW><id>18345522</id><snippet>&gt;&gt;&gt; for key,val in mydict.iteritems():
...     print key, val
... 
�M ['test']
&gt;&gt;&gt; for key in mydict.iterkeys():
...     print key
... 
�M
&gt;&gt;&gt; for value in mydict.itervalues():
...     print value
... 
['test']
</snippet></ROW><ROW><id>18345522</id><snippet>items()</snippet></ROW><ROW><id>18345522</id><snippet>keys()</snippet></ROW><ROW><id>18345522</id><snippet>values()</snippet></ROW><ROW><id>18345551</id><snippet>twoD_interpolate(arr, 0, 1, 1400, 3200, 0.5, 1684)</snippet></ROW><ROW><id>18345551</id><snippet>arr[ 170400, 0.1]</snippet></ROW><ROW><id>18345551</id><snippet>mode='nearest'</snippet></ROW><ROW><id>18345551</id><snippet>arr[ -1 , 0.1]</snippet></ROW><ROW><id>18345551</id><snippet>x</snippet></ROW><ROW><id>18345551</id><snippet>y</snippet></ROW><ROW><id>18345551</id><snippet>arr[-1,0] = 3.3</snippet></ROW><ROW><id>18345551</id><snippet>arr[-1,1] = 4.7</snippet></ROW><ROW><id>18345551</id><snippet>3.3 * .9 + 4.7 * .1 = 3.44</snippet></ROW><ROW><id>18345551</id><snippet>&gt;&gt;&gt; a=np.arange(50,300,50)
&gt;&gt;&gt; a
array([ 50, 100, 150, 200, 250])
&gt;&gt;&gt; stride=float(a.max()-a.min())/(a.shape[0]-1)
&gt;&gt;&gt; stride
50.0

&gt;&gt;&gt; (75-a.min()) * stride
1250.0   #Not what we want!
&gt;&gt;&gt; (75-a.min()) / stride
0.5      #There we go
&gt;&gt;&gt; (175-a.min()) / stride
2.5      #Looks good
</snippet></ROW><ROW><id>18345551</id><snippet>map_coordinates</snippet></ROW><ROW><id>18345551</id><snippet>#Input array from the above.
print map_coordinates(arr, np.array([[.5,2.5,1250]]), order=1, mode='nearest')
[ 75 175 250] #First two are correct, last is incorrect.
</snippet></ROW><ROW><id>18345551</id><snippet>(x-xmin) / stride</snippet></ROW><ROW><id>18345551</id><snippet>def twoD_interpolate(arr, xmin, xmax, ymin, ymax, x1, y1):
    """
    interpolate in two dimensions with "hard edges"
    """
    arr = np.atleast_2d(arr)
    ny, nx = arr.shape  # Note the order of ny and xy

    x1 = np.atleast_1d(x1)
    y1 = np.atleast_1d(y1)

    # Change coordinates to match your array.
    if nx==1:
        x1 = np.zeros_like(x1.shape)
    else:
        x_stride = (xmax-xmin)/float(nx-1)
        x1 = (x1 - xmin) / x_stride

    if ny==1:
        y1 = np.zeros_like(y1.shape)
    else:
        y_stride = (ymax-ymin)/float(ny-1)
        y1 = (y1 - ymin) / y_stride

    # order=1 is required to return your examples and mode=nearest prevents the need of clip.
    return map_coordinates(arr, np.vstack((y1, x1)), order=1, mode='nearest')
</snippet></ROW><ROW><id>18345551</id><snippet>mode='nearest'</snippet></ROW><ROW><id>18345551</id><snippet>print twoD_interpolate(arr, 0, 1, 1400, 3200, 0.5, 1684)
[ 21.024]

print twoD_interpolate(arr, 0, 1, 1400, 3200, 0, 50000)
[ 3.3]

print twoD_interpolate(arr, 0, 1, 1400, 3200, .5, 50000)
[ 5.3]
</snippet></ROW><ROW><id>18345551</id><snippet>x</snippet></ROW><ROW><id>18345551</id><snippet>arr = np.arange(50,300,50)
print twoD_interpolate(arr, 50, 250, 0, 5, 75, 0)
[75]

arr = np.arange(50,300,50)[None,:]
print twoD_interpolate(arr, 50, 250, 0, 5, 75, 0)
[75]

arr = np.arange(50,300,50)
print twoD_interpolate(arr, 0, 5, 50, 250, 0, 75)
[50] #Still interpolates the `x` dimension.

arr = np.arange(50,300,50)[:,None]
print twoD_interpolate(arr, 0, 5, 50, 250, 0, 75)
[75]
</snippet></ROW><ROW><id>18345615</id><snippet>class main(object): # use new-style classes!
    def __init__(self):
        self.params = {}

class a(main):
    def __init__(self):
        super(a, self).__init__()
        self.params['test'] = "111aa"
        print self.params

class b(main):
    def __init__(self):
        super(b, self).__init__()
        self.params['be'] = "222bbb"
        print self.params
</snippet></ROW><ROW><id>18345615</id><snippet>params</snippet></ROW><ROW><id>18345615</id><snippet>__init__</snippet></ROW><ROW><id>18345615</id><snippet>__init__</snippet></ROW><ROW><id>18345615</id><snippet>params</snippet></ROW><ROW><id>18345635</id><snippet>execute</snippet></ROW><ROW><id>18345635</id><snippet>cursor.execute("""INSERT INTO 
                      State 
                      (state, relevant_id)
                  VALUES 
                      (%s, %s);""",
               (state_values, relevant_id))
</snippet></ROW><ROW><id>18345685</id><snippet>global</snippet></ROW><ROW><id>18345685</id><snippet>def function_a():
    global My_KEY
    My_KEY = "abcd"
</snippet></ROW><ROW><id>18345685</id><snippet>My_KEY</snippet></ROW><ROW><id>18345685</id><snippet>function_a</snippet></ROW><ROW><id>18345685</id><snippet>def function_a():
    My_KEY = "abcd"
    return My_KEY

def function_b():
    My_KEY = function_a()
    print My_KEY
</snippet></ROW><ROW><id>18345700</id><snippet>x = [any expression]</snippet></ROW><ROW><id>18345700</id><snippet>x</snippet></ROW><ROW><id>18345700</id><snippet>[any expression]</snippet></ROW><ROW><id>18345700</id><snippet>lambda: 1 if x else 2</snippet></ROW><ROW><id>18345700</id><snippet>x</snippet></ROW><ROW><id>18345717</id><snippet>IPython.start_ipython()</snippet></ROW><ROW><id>18345717</id><snippet>user_ns</snippet></ROW><ROW><id>18345855</id><snippet>file_1='file1.txt'
file_2='file2.txt'

my_string = 'word'

for line_1 in [l.rstrip() for l in open(file_1)]:
    with open(line_1+'.txt', 'a') as my_file:
        for line_2 in open(file_2):
            line_2_split = line_2.split(' ')
            if line_1 == line_2_split[0][3:]:
                if my_string in line_2:
                    my_file.write(line_2_split[2] + '\n')
</snippet></ROW><ROW><id>18345855</id><snippet>file_2</snippet></ROW><ROW><id>18345855</id><snippet>rstrip()</snippet></ROW><ROW><id>18345855</id><snippet>file_2</snippet></ROW><ROW><id>18345864</id><snippet>cursor.execute('
    SELECT "Indicator"."indicator" 
    FROM "Indicator" 
    WHERE "Indicator"."some_id" =   %s;', [some_id])
</snippet></ROW><ROW><id>18345864</id><snippet>some_id[0]
</snippet></ROW><ROW><id>18345889</id><snippet>class A: pass  # old-style class

class B(object): pass  # new-style class
</snippet></ROW><ROW><id>18345889</id><snippet>x</snippet></ROW><ROW><id>18345889</id><snippet>x.__class__</snippet></ROW><ROW><id>18345889</id><snippet>x</snippet></ROW><ROW><id>18345889</id><snippet>type(x)</snippet></ROW><ROW><id>18345889</id><snippet>&lt;type 'instance'&gt;</snippet></ROW><ROW><id>18345889</id><snippet>x</snippet></ROW><ROW><id>18345889</id><snippet>type(x)</snippet></ROW><ROW><id>18345889</id><snippet>x.__class__</snippet></ROW><ROW><id>18345890</id><snippet>virtualenv</snippet></ROW><ROW><id>18345890</id><snippet>pip</snippet></ROW><ROW><id>18345890</id><snippet>pip</snippet></ROW><ROW><id>18345890</id><snippet>python setup.py install</snippet></ROW><ROW><id>18345946</id><snippet>INSTALLED_APPS</snippet></ROW><ROW><id>18346246</id><snippet>scoretable</snippet></ROW><ROW><id>18346246</id><snippet>letter</snippet></ROW><ROW><id>18346246</id><snippet>score = 0</snippet></ROW><ROW><id>18346246</id><snippet>def scrabble_score(word, scoretable):
    letter_scores = [scoretable.get(letter, 0) for letter in word]
    return sum(letter_scores)
</snippet></ROW><ROW><id>18346425</id><snippet>isAlive = control_queue.get()</snippet></ROW><ROW><id>18346425</id><snippet>isAlive = control_Queue.get()</snippet></ROW><ROW><id>18346455</id><snippet>def getRedisLock(name, max_time, r):
    lock = r.setnx(name, int(time.mktime(time.gmtime())))
    if not lock:
        lock_time = int(r.get(name))
        #if the lock expired (assume some client failed)
        if lock_time + max_time &lt; int(time.mktime(time.gmtime())):
            old_time = int(r.getset(name, int(time.mktime(time.gmtime()))))
            if old_time == lock_time:
                lock = True
    #If you still have no lock, do something special here, if you want
    if not lock:
        pass
    return lock

def releaseRedisLock(self, name):
    r = self.r
    return r.delete(name)
</snippet></ROW><ROW><id>18346463</id><snippet>numpy</snippet></ROW><ROW><id>18346463</id><snippet>.index</snippet></ROW><ROW><id>18346463</id><snippet>idx</snippet></ROW><ROW><id>18346463</id><snippet>ridx</snippet></ROW><ROW><id>18346463</id><snippet>U=[5,2,3,1,4]
idx = sorted(xrange(len(U)), key=U.__getitem__)
ridx = sorted(xrange(len(U)), key=idx.__getitem__)
# [3, 1, 2, 4, 0] [4, 1, 2, 0, 3]
</snippet></ROW><ROW><id>18346536</id><snippet>def addDateTimeResults(tokens):
    tokens['date'] = ('20'+tokens.year, tokens.month, tokens.day)
    tokens['time'] = (tokens.hour, tokens.min, tokens.sec)
    tokens['datetime'] = ParseResults([tokens.date, tokens.time])
    for name in ('date', 'time'):
        tokens['datetime'][name] = tokens[name]
grammar.setParseAction(addDateTimeResults)
</snippet></ROW><ROW><id>18346536</id><snippet>dump()</snippet></ROW><ROW><id>18346536</id><snippet>parseResults = grammar.parseString("123,084040,ABC,A,231108")
datetime = parseResults.datetime
print datetime.dump()
</snippet></ROW><ROW><id>18346536</id><snippet>[('2008', '11', '23'), ('08', '40', '40')]
- date: ('2008', '11', '23')
- time: ('08', '40', '40')
</snippet></ROW><ROW><id>18346536</id><snippet>import datetime
def addDateTimeResults(tokens):
    dtfields = map(int, (tokens[fld] for fld in "year month day hour min sec".split()))
    # adjust 2-digit year for 21st century
    dtfields[0] += 2000
    tokens['datetime'] = datetime.datetime(*dtfields)
</snippet></ROW><ROW><id>18346536</id><snippet>print parseResults.datetime</snippet></ROW><ROW><id>18346536</id><snippet>2008-11-23 08:40:40
</snippet></ROW><ROW><id>18346544</id><snippet>&gt;&gt;&gt; mylist = [1,1,1,1,1,1,2,3,2,2,2,2,3,3,4,5,5,5,5]
&gt;&gt;&gt; {k:mylist.count(k) for k in set(mylist)}
{1: 6, 2: 5, 3: 3, 4: 1, 5: 4}
</snippet></ROW><ROW><id>18346544</id><snippet>set(mylist)</snippet></ROW><ROW><id>18346544</id><snippet>&gt;&gt;&gt; set(mylist)
set([1, 2, 3, 4, 5])
</snippet></ROW><ROW><id>18346544</id><snippet>from __future__ import print_function
from collections import Counter
from collections import defaultdict
import random

mylist=[1,1,1,1,1,1,2,3,2,2,2,2,3,3,4,5,5,5,5]*10

def s1(mylist):
    return {k:mylist.count(k) for k in set(mylist)}

def s2(mlist):
    return Counter(mylist)

def s3(mylist):
    mydict=dict()
    for index in mylist:
        mydict[index] = mydict.setdefault(index, 0) + 1
    return mydict   

def s4(mylist):
    mydict={}.fromkeys(mylist,0)
    for k in mydict:
        mydict[k]=mylist.count(k)    
    return mydict    

def s5(mylist):
    mydict={}
    for k in mylist:
        mydict[k]=mydict.get(k,0)+1
    return mydict     

def s6(mylist):
    mydict=defaultdict(int)
    for i in mylist:
        mydict[i] += 1
    return mydict       

def s7(mylist):
    mydict={}.fromkeys(mylist,0)
    for e in mylist:
        mydict[e]+=1    
    return mydict    

if __name__ == '__main__':   
    import timeit 
    n=1000000
    print(timeit.timeit("s1(mylist)", setup="from __main__ import s1, mylist",number=n))
    print(timeit.timeit("s2(mylist)", setup="from __main__ import s2, mylist, Counter",number=n))
    print(timeit.timeit("s3(mylist)", setup="from __main__ import s3, mylist",number=n))
    print(timeit.timeit("s4(mylist)", setup="from __main__ import s4, mylist",number=n))
    print(timeit.timeit("s5(mylist)", setup="from __main__ import s5, mylist",number=n))
    print(timeit.timeit("s6(mylist)", setup="from __main__ import s6, mylist, defaultdict",number=n))
    print(timeit.timeit("s7(mylist)", setup="from __main__ import s7, mylist",number=n))
</snippet></ROW><ROW><id>18346544</id><snippet>18.123854104997008          # set and dict comprehension 
78.54796334600542           # Counter 
33.98185228800867           # setdefault 
19.0563529439969            # fromkeys / count 
34.54294775899325           # dict.get 
21.134678319009254          # defaultdict 
22.760544238000875          # fromkeys / loop
</snippet></ROW><ROW><id>18346544</id><snippet>from __future__ import print_function
from collections import Counter
from collections import defaultdict
import random

mylist = [random.randint(0,1500) for _ in range(10000000)]

def s1(mylist):
    return {k:mylist.count(k) for k in set(mylist)}

def s2(mlist):
    return Counter(mylist)

def s3(mylist):
    mydict=dict()
    for index in mylist:
        mydict[index] = mydict.setdefault(index, 0) + 1
    return mydict   

def s4(mylist):
    mydict={}.fromkeys(mylist,0)
    for k in mydict:
        mydict[k]=mylist.count(k)    
    return mydict    

def s5(mylist):
    mydict={}
    for k in mylist:
        mydict[k]=mydict.get(k,0)+1
    return mydict     

def s6(mylist):
    mydict=defaultdict(int)
    for i in mylist:
        mydict[i] += 1
    return mydict       

def s7(mylist):
    mydict={}.fromkeys(mylist,0)
    for e in mylist:
        mydict[e]+=1    
    return mydict    

if __name__ == '__main__':   
    import timeit 
    n=1
    print(timeit.timeit("s1(mylist)", setup="from __main__ import s1, mylist",number=n))
    print(timeit.timeit("s2(mylist)", setup="from __main__ import s2, mylist, Counter",number=n))
    print(timeit.timeit("s3(mylist)", setup="from __main__ import s3, mylist",number=n))
    print(timeit.timeit("s4(mylist)", setup="from __main__ import s4, mylist",number=n))
    print(timeit.timeit("s5(mylist)", setup="from __main__ import s5, mylist",number=n))
    print(timeit.timeit("s6(mylist)", setup="from __main__ import s6, mylist, defaultdict",number=n))
    print(timeit.timeit("s7(mylist)", setup="from __main__ import s7, mylist",number=n))
</snippet></ROW><ROW><id>18346544</id><snippet>2825.2697427899984              # set and dict comprehension 
42.607481333994656              # Counter 
22.77713537499949               # setdefault 
2853.11187016801                # fromkeys / count 
23.241977066005347              # dict.get 
15.023175164998975              # defaultdict 
18.28165417900891               # fromkeys / loop
</snippet></ROW><ROW><id>18346544</id><snippet>count</snippet></ROW><ROW><id>18346560</id><snippet>django-werkzeug-debugger-runserver==0.1.2</snippet></ROW><ROW><id>18346560</id><snippet>requirements.txt</snippet></ROW><ROW><id>18346560</id><snippet>django-extensions</snippet></ROW><ROW><id>18346574</id><snippet>with open('filename.txt') as file:
    contents = file.read()
    print repr(contents)
</snippet></ROW><ROW><id>18346779</id><snippet>[0, 1]</snippet></ROW><ROW><id>18346779</id><snippet>import numpy as np
import matplotlib.pyplot as plt

fig = plt.figure()
for i, label in enumerate(('A', 'B', 'C', 'D')):
    ax = fig.add_subplot(2,2,i+1)
    ax.text(-0.1, 1.15, label, transform=ax.transAxes,
      fontsize=16, fontweight='bold', va='top', ha='right')

plt.show()
</snippet></ROW><ROW><id>18346916</id><snippet>mylist=fun()
new_tup.append((id,name, my_list[0][0],my_list[1][0]))
</snippet></ROW><ROW><id>18346916</id><snippet>mylist1, mylist2 = fun()
new_tup.append((id,name, my_list1[0],my_list2[0]))
</snippet></ROW><ROW><id>18346924</id><snippet>t.run()</snippet></ROW><ROW><id>18346924</id><snippet>run</snippet></ROW><ROW><id>18346924</id><snippet>run</snippet></ROW><ROW><id>18346924</id><snippet>t.start()</snippet></ROW><ROW><id>18346924</id><snippet>threading.Thread</snippet></ROW><ROW><id>18346924</id><snippet>self.alive</snippet></ROW><ROW><id>18346924</id><snippet>Queue</snippet></ROW><ROW><id>18346924</id><snippet>self.alive['import_1']</snippet></ROW><ROW><id>18346924</id><snippet>sleep</snippet></ROW><ROW><id>18346924</id><snippet>alive</snippet></ROW><ROW><id>18346924</id><snippet>test_imports.alive</snippet></ROW><ROW><id>18346924</id><snippet>self.alive</snippet></ROW><ROW><id>18346924</id><snippet>print</snippet></ROW><ROW><id>18346924</id><snippet>print ("isAlive", isAlive)</snippet></ROW><ROW><id>18346924</id><snippet>isAlive command</snippet></ROW><ROW><id>18346924</id><snippet>('isAlive', 'command')</snippet></ROW><ROW><id>18346924</id><snippet>("Import_1 number %d started") % thread_Number</snippet></ROW><ROW><id>18346924</id><snippet>test_imports</snippet></ROW><ROW><id>18346924</id><snippet>halt_listener</snippet></ROW><ROW><id>18346924</id><snippet>self</snippet></ROW><ROW><id>18346924</id><snippet>target=self.half_listener</snippet></ROW><ROW><id>18347151</id><snippet>imread(image)</snippet></ROW><ROW><id>18347151</id><snippet>Pillow 2.1.0</snippet></ROW><ROW><id>18347151</id><snippet>PIL 1.1.7</snippet></ROW><ROW><id>18347151</id><snippet>Pillow 2.1.0</snippet></ROW><ROW><id>18347210</id><snippet>def main_general_stuff(self):
    self.do_general_stuff1()
    self.do_specific_stuff()
    ...
</snippet></ROW><ROW><id>18347210</id><snippet>self</snippet></ROW><ROW><id>18347210</id><snippet>this</snippet></ROW><ROW><id>18347217</id><snippet>Series</snippet></ROW><ROW><id>18347217</id><snippet>object</snippet></ROW><ROW><id>18347217</id><snippet>dtype</snippet></ROW><ROW><id>18347217</id><snippet>Series</snippet></ROW><ROW><id>18347217</id><snippet>s = Series([True])
s.append(Series([nan], index=[1], dtype=object))
</snippet></ROW><ROW><id>18347217</id><snippet>0    True
1     NaN
dtype: object
</snippet></ROW><ROW><id>18347217</id><snippet>DataFrame</snippet></ROW><ROW><id>18347217</id><snippet>df = DataFrame({'a': rand(10) &gt; 0.5, 'b': randn(10)}, columns=list('ab'))
df2 = DataFrame({'a': Series([nan], dtype=object), 'b': [1.0]}, columns=df.columns, index=[len(df)])
df3 = df.append(df2)
print df3
print
print df3.dtypes
</snippet></ROW><ROW><id>18347217</id><snippet>        a      b
0   False -0.865
1    True -0.186
2    True  0.078
3    True  0.995
4   False -1.420
5    True -0.340
6    True  0.042
7    True -0.627
8    True -0.217
9    True  1.226
10    NaN  1.000

a     object
b    float64
dtype: object
</snippet></ROW><ROW><id>18347217</id><snippet>Series</snippet></ROW><ROW><id>18347217</id><snippet>s.astype(object)</snippet></ROW><ROW><id>18347217</id><snippet>object</snippet></ROW><ROW><id>18347217</id><snippet>dtype</snippet></ROW><ROW><id>18347310</id><snippet>concurrent.futures</snippet></ROW><ROW><id>18347310</id><snippet>def process_all_files(d):
    files = glob.glob(d + '/*')
    with concurrent.futures.ThreadPoolExecutor(max_workers=4) as executor:
        fs = [executor.submit(process_file, file) for file in files]
        concurrent.futures.wait(fs)
</snippet></ROW><ROW><id>18347310</id><snippet>process_file</snippet></ROW><ROW><id>18347310</id><snippet>def process_all_files(d):
    files = glob.glob(d + '/*')
    with concurrent.futures.ThreadPoolExecutor(max_workers=4) as executor:
        fs = [executor.submit(process_file, file) for file in files]
        for f in concurrent.futures.as_completed(fs):
            do_something(f.result())
</snippet></ROW><ROW><id>18347310</id><snippet>try</snippet></ROW><ROW><id>18347310</id><snippet>except</snippet></ROW><ROW><id>18347310</id><snippet>result()</snippet></ROW><ROW><id>18347310</id><snippet>multiprocessing.pool</snippet></ROW><ROW><id>18347310</id><snippet>concurrent.futures</snippet></ROW><ROW><id>18347456</id><snippet>dict</snippet></ROW><ROW><id>18347456</id><snippet>dict</snippet></ROW><ROW><id>18347456</id><snippet>def yahooscores():
    results = {}

    for table in soup.find_all('table', class_='scores'):

        for row in table.find_all('tr'):
            scores = []
            name = None
            for cell in row.find_all('td', class_='yspscores'):
                link = cell.find('a')
                if link:
                    name = link.text
                elif cell.text.isdigit():
                    scores.append(cell.text)
            if name is not None:
                print ('%s: %s' % (name, ', '.join(scores)) + '.')

        print ""

yahooscores()
</snippet></ROW><ROW><id>18347456</id><snippet>def yahooscores():
    results = {}

    games = []

    for table in soup.find_all('table', class_='scores'):
        teams = []

        for row in table.find_all('tr'):
            scores = []
            name = None
            for cell in row.find_all('td', class_='yspscores'):
                link = cell.find('a')
                if link:
                    name = link.text
                elif cell.text.isdigit():
                    scores.append(cell.text)
            if name is not None:
                results[name] = scores
                teams.append(name)

        games.append(teams)

    for teams in games:
        for name in teams:
            scores = results[name]
            print ('%s: %s' % (name, ', '.join(scores)) + '.')
        print ""

yahooscores()
</snippet></ROW><ROW><id>18347575</id><snippet>os.path.exists</snippet></ROW><ROW><id>18347575</id><snippet>os.path.join(os.pardir + '/foo')</snippet></ROW><ROW><id>18347575</id><snippet>True</snippet></ROW><ROW><id>18347575</id><snippet>if os.path.exists(os.path.join(os.pardir, 'foo')):
    print "true"
else:
    print "false"
</snippet></ROW><ROW><id>18347575</id><snippet>os.path.exists</snippet></ROW><ROW><id>18347575</id><snippet>&gt;&gt;&gt; print os.path.exists.__doc__
Test whether a path exists.  Returns False for broken symbolic links
</snippet></ROW><ROW><id>18347835</id><snippet>b = [(a, b, c) for (a, b), c in zip(splitKeys, data)]
</snippet></ROW><ROW><id>18347958</id><snippet>bcrypt.hashpw(clearPass.encode("utf-8"), bcrypt.gensalt(14))</snippet></ROW><ROW><id>18347958</id><snippet>encode("utf-8")</snippet></ROW><ROW><id>18348063</id><snippet>UsrFCList = []  # You've added this name to the module-level namespace.

def usr_fc(*events):
   selctd_indices = lbox.curselection()
   lst_select = list(selctd_indices)
   for i in lst_select:
     UsrFCList.append(lbox.get(i))  # The interpreter looks for UsrFCList in the local function namespace, and since you're not assigning to that name, it look at the next biggest namespace, which is the module namespace.
   lbox.quit()

# You should now have access to any data you put in UsrFCList, outside the usr_fc function.
</snippet></ROW><ROW><id>18348063</id><snippet>UsrFCList</snippet></ROW><ROW><id>18348063</id><snippet>class App:
    def __init__(root, self):
        # initialize your class with all your widgets
        self.fc_lb = root
        self.button = Button(fc_lb, text="Analyze selected feature classes", command=lambda *events:self.usr_fc(*events))
# Note  ^^^^ all your widgets and data will be accessible through the `self` reference to your GUI instance.
        self.UsrFCList = []
        self.lbox = AutoSzLB(self.fc_lb,selectmode=EXTENDED)
        # . . . you'd have to add all the other setup required to make your GUI

    def usr_fc(self, *events):
    #          ^^^^ you now have access to everything in the instance namespace available inside usr_fc 
        self.UsrFCList = []
        selctd_indices = lbox.curselection()
        lst_select = list(selctd_indices)
        for i in lst_select:
            self.UsrFCList.append(lbox.get(i))
        self.lbox.quit()

    # . . . and you'd add all the other functions that need to work with internal GUI widgets/data 

rootWindow = Tk()
newGUI = App(rootWindow)  # Create a new GUI instance
rootWindow.mainloop()

# Hopefully that gives you the idea.
</snippet></ROW><ROW><id>18348195</id><snippet>def new(request):
    context = {}
    context.update(csrf(request))
    return render_to_response("new.html", context)
</snippet></ROW><ROW><id>18348234</id><snippet>/var/log/syslog</snippet></ROW><ROW><id>18348234</id><snippet>import traceback
import syslog

def syslog_trace(trace):
    '''Log a python stack trace to syslog'''

    log_lines = trace.split('\n')
    for line in log_lines:
        if len(line):
            syslog.syslog(line)

def main():
    # Your actual program here

if __name__ == '__main__':
    try:
        main()
    except:
        syslog_trace(traceback.format_exc())
</snippet></ROW><ROW><id>18348495</id><snippet>cell.text</snippet></ROW><ROW><id>18348495</id><snippet>'\nScores &amp; Schedule: Jan 19\n'
</snippet></ROW><ROW><id>18348495</id><snippet>', 2013:'</snippet></ROW><ROW><id>18348495</id><snippet>split()</snippet></ROW><ROW><id>18348495</id><snippet>                print(' '.join(date.split()[-2:]) + ', 2013:')
</snippet></ROW><ROW><id>18348495</id><snippet>date</snippet></ROW><ROW><id>18348495</id><snippet>.split()</snippet></ROW><ROW><id>18348495</id><snippet>[-2:]</snippet></ROW><ROW><id>18348495</id><snippet>' '.join(...)</snippet></ROW><ROW><id>18348495</id><snippet>', 2013:'</snippet></ROW><ROW><id>18348495</id><snippet>'%s' % (date)</snippet></ROW><ROW><id>18348495</id><snippet>date</snippet></ROW><ROW><id>18348727</id><snippet>msg['Subject'] = "Auto Hella Restart Report " + sys.argv[1]
# To concatenate strings in python, use       ^ 
</snippet></ROW><ROW><id>18348784</id><snippet>from traits.api import HasTraits, Enum, Instance, Button
from traitsui.api import View, Item, VGroup
from enable.api import ComponentEditor
from chaco.api import Plot, ArrayPlotData, PlotAxis

from numpy import arange

class PlotApp(HasTraits):

    plotdata = Instance(ArrayPlotData)
    returns_plot = Instance(Plot)

    plot_type = Enum('line', 'scatter')

    add_points = Button

    traits_view = View(
                VGroup(Item("add_points"),
                    Item('returns_plot', editor=ComponentEditor(),
                        show_label=False),
                    orientation = "vertical"),
                resizable=True, title="Test"
                )

    def _returns_plot_default(self):
        self.plotdata = ArrayPlotData(index=arange(100), value=arange(100))
        plot = Plot(self.plotdata)
        plot.legend.visible = True
        plot.x_axis = None
        x_axis = PlotAxis(plot, orientation="bottom")
        plot.overlays.append(x_axis)

        plot.plot(("index", "value"), type="scatter", name = "Mediciones")
        return plot

    def _add_points_fired(self):
        current_length = len(self.plotdata["index"])
        self.plotdata.set_data("index", arange(current_length+1))
        self.plotdata.set_data("value", arange(current_length+1))

if __name__ == "__main__":
    app = PlotApp()
    app.configure_traits()
</snippet></ROW><ROW><id>18349037</id><snippet>print etree.tostring(result[0])
</snippet></ROW><ROW><id>18349040</id><snippet>logfile</snippet></ROW><ROW><id>18349040</id><snippet>filename</snippet></ROW><ROW><id>18349040</id><snippet>logging.basicConfig(filename='/home/gabriel/Developement/cl/cl.log', level=logging.DEBUG, format=form)
</snippet></ROW><ROW><id>18349040</id><snippet>basicConfig</snippet></ROW><ROW><id>18349604</id><snippet>reversed</snippet></ROW><ROW><id>18349604</id><snippet>reverse</snippet></ROW><ROW><id>18349604</id><snippet>def runningMean(iterable):
    """A generator, yielding a cumulative average of its input."""
    num = 0
    denom = 0
    for x in iterable:
        num += x
        denom += 1
        yield num / denom
</snippet></ROW><ROW><id>18349604</id><snippet>reversed</snippet></ROW><ROW><id>18349604</id><snippet>&gt;&gt;&gt; sub = [767220, 769287, 770167, 770276, 770791, 770835, 771926, 1196500, 1199789,      1201485, 1206331, 1206467, 1210929, 1213184, 1213204, 1213221, 1361867, 1361921, 1361949, 1364886, 1367224, 1368005, 1368456, 1368982, 1369000, 1370365, 1370434, 1370551, 1371492, 1471407, 1709408, 1710264, 1710308, 1710322, 1710350, 1710365, 1710375]
&gt;&gt;&gt; list(runningMean(reversed(sub)))
[1710375.0, 1710370.0, 1710363.3333333333, 1710353.0, 1710344.0, 1710330.6666666667, 1710198.857142857, 1680349.875, 1646032.3333333333, 1618484.2, 1595934.1818181819, 1577136.75, 1561126.2307692308, 1547401.642857143, 1535471.9333333333, 1525005.25, 1515724.0, 1507344.111111111, 1499691.7368421052, 1492803.2, 1486568.142857143, 1474143.2727272727, 1462798.0869565217, 1452397.5, 1442738.76, 1433651.3846153845, 1425232.111111111, 1417241.142857143, 1409742.7931034483, 1402634.7, 1382289.2580645161, 1363181.3125, 1345230.0909090908, 1328319.6764705882, 1312372.4571428571, 1297286.75, 1282960.6216216215]
</snippet></ROW><ROW><id>18349604</id><snippet>list.reverse()</snippet></ROW><ROW><id>18349604</id><snippet>itertools.takewhile</snippet></ROW><ROW><id>18349604</id><snippet>import itertools

results = list(itertools.takewhile(lambda x: x[0] &gt; 0.9 * x[1],
                                   itertools.izip(reversed(sub),
                                                  runningMean(reversed(sub)))))
</snippet></ROW><ROW><id>18349604</id><snippet>zip</snippet></ROW><ROW><id>18349604</id><snippet>itertools.izip</snippet></ROW><ROW><id>18349604</id><snippet>results.reverse() # put them back in regular order
for value, average in results:
    print value, results
</snippet></ROW><ROW><id>18349604</id><snippet>1709408 1710198.857142857
1710264 1710330.6666666667
1710308 1710344.0
1710322 1710353.0
1710350 1710363.3333333333
1710365 1710370.0
1710375 1710375.0
</snippet></ROW><ROW><id>18349915</id><snippet>class parser(threading.Thread):
    output_lock = threading.Lock()

    def __init__ (self, data_input):
        threading.Thread.__init__(self)
        self.data_input = data_input

    def run(self):
        for elem in self.data_input:
            time.sleep(3)
            with self.output_lock:
                print elem + 'Finished'
</snippet></ROW><ROW><id>18349915</id><snippet>ETL</snippet></ROW><ROW><id>18349915</id><snippet>multiprocessing</snippet></ROW><ROW><id>18349915</id><snippet>n</snippet></ROW><ROW><id>18349915</id><snippet>split</snippet></ROW><ROW><id>18349915</id><snippet>sys.stdin</snippet></ROW><ROW><id>18349915</id><snippet>for line in sys.stdin:
</snippet></ROW><ROW><id>18349915</id><snippet>readline()</snippet></ROW><ROW><id>18349915</id><snippet>read()</snippet></ROW><ROW><id>18350128</id><snippet>class MainHandler(tornado.web.RequestHandler):
    def prepare(self):
        self.render('intro.html')
</snippet></ROW><ROW><id>18350268</id><snippet>data = (
    (archive_file, archive_header, archive_body),
    (forum_file, forum_header, forum_body),
    (search_file, search_header, search_body),
    (rss_file, rss_header, rss_body)
)

for file, header, body in data:
    header = string.replace(header, "titlefixed", titlefixed)
    file.write(header + body + string.replace(footer_p, "&lt;!-- recent posts --&gt;", postgroup))
    file.close()
</snippet></ROW><ROW><id>18350348</id><snippet>join()</snippet></ROW><ROW><id>18350754</id><snippet>Foo</snippet></ROW><ROW><id>18350754</id><snippet>NameError</snippet></ROW><ROW><id>18350754</id><snippet>Foo()</snippet></ROW><ROW><id>18350754</id><snippet>&gt;&gt;&gt; class Foo:
...     def __init__(self):
...             print 'hi'
... 
&gt;&gt;&gt; class Foo:
...     A = Foo()
... 
hi
&gt;&gt;&gt; Foo.A
&lt;__main__.Foo instance at 0x101019950&gt;
&gt;&gt;&gt; Foo.A.__init__
&lt;bound method Foo.__init__ of &lt;__main__.Foo instance at 0x101019950&gt;&gt;
</snippet></ROW><ROW><id>18350754</id><snippet>A</snippet></ROW><ROW><id>18350845</id><snippet>6adf97f83acf6453d4a6a4b1070f3754</snippet></ROW><ROW><id>18350845</id><snippet>passw</snippet></ROW><ROW><id>18350845</id><snippet>None</snippet></ROW><ROW><id>18351066</id><snippet>&gt;&gt;&gt; re.search(r'([-\w]*)_([-\w]+)\.\w+', "S25m\S25m_16Q_-2dB.png").groups()
('S25m_16Q', '-2dB')
&gt;&gt;&gt; re.search(r'([-\w]*)_([-\w]+)\.\w+', "S25m\S25m_1_16Q_0dB.png").groups()
('S25m_1_16Q', '0dB')
&gt;&gt;&gt; re.search(r'([-\w]*)_([-\w]+)\.\w+', "S25m\S25m_2_16Q_2dB.png").groups()
('S25m_2_16Q', '2dB')
</snippet></ROW><ROW><id>18351066</id><snippet>*</snippet></ROW><ROW><id>18351066</id><snippet>_</snippet></ROW><ROW><id>18351066</id><snippet>\w</snippet></ROW><ROW><id>18351066</id><snippet>&gt;&gt;&gt; zip(*[m.groups() for m in re.finditer(r'([-\w]*)_([-\w]+)\.\w+', r'''
... S25m\S25m_16Q_-2dB.png 
... S25m\S25m_1_16Q_0dB.png
... S25m\S25m_2_16Q_2dB.png
... ''')])
[('S25m_16Q', 'S25m_1_16Q', 'S25m_2_16Q'), ('-2dB', '0dB', '2dB')]
</snippet></ROW><ROW><id>18351136</id><snippet>&gt;&gt;&gt; from operator import itemgetter
&gt;&gt;&gt; sorted(d8, key=itemgetter('startdate_iso'))
</snippet></ROW><ROW><id>18351136</id><snippet>sorted</snippet></ROW><ROW><id>18351136</id><snippet>sort()</snippet></ROW><ROW><id>18351136</id><snippet>&gt;&gt;&gt; d8.sort(key=itemgetter('startdate_iso'))
</snippet></ROW><ROW><id>18351630</id><snippet>copyFile</snippet></ROW><ROW><id>18351630</id><snippet>csvFile</snippet></ROW><ROW><id>18351630</id><snippet>copyFile = list(csvFile)
</snippet></ROW><ROW><id>18351643</id><snippet>JOIN</snippet></ROW><ROW><id>18351643</id><snippet>SELECT A.protocol, D.port_info
FROM A JOIN B ON A.id = B.A_id
       JOIN C ON B.id = C.B_id
       JOIN D ON C.id = D.C_id
ORDER BY protocol
</snippet></ROW><ROW><id>18351864</id><snippet>sub = [767220, 769287, 770167, 770276, 770791, 770835, 771926, 1196500, 1199789,1201485, 1206331, 1206467, 1210929, 1213184, 1213204, 1213221, 1361867, 1361921, 1361949, 1364886, 1367224, 1368005, 1368456, 1368982, 1369000, 1370365, 1370434, 1370551, 1371492, 1471407, 1709408, 1710264, 1710308, 1710322, 1710350, 1710365, 1710375]
def runningMean(seq, n=0, total=0): #function called recursively
    L = [[],[]]
    if len(seq) == 0:
        return L
    total = total + int(seq[-1])
    if int(seq[-1]) &lt; total/float(n+1) * 0.9:  # Check your condition to see if it's time to stop averaging.
        return L
    NL = runningMean(seq[:-1], n=n+1, total=total)
    L[0] += NL[0] + [total/float(n+1)]
    L[1] += [seq[-1]] + NL[1]
    return L

avg = runningMean(sub, 0, 0)
print(avg[0])
print(avg[1])
</snippet></ROW><ROW><id>18351864</id><snippet>[1710198.857142857, 1710330.6666666667, 1710344.0, 1710353.0, 1710363.3333333333, 1710370.0, 1710375.0]
[1710375, 1710365, 1710350, 1710322, 1710308, 1710264, 1709408]
</snippet></ROW><ROW><id>18351977</id><snippet>&gt;&gt;&gt; 'test.mp3'.endswith(('.mp3', '.avi'))
True
</snippet></ROW><ROW><id>18352074</id><snippet>TransientError</snippet></ROW><ROW><id>18352074</id><snippet>tm.attempts</snippet></ROW><ROW><id>18352074</id><snippet>from transaction.interfaces import TransientError

class SerializationConflictError(TransientError):
    def __init__(self, orig):
        self.orig = orig
</snippet></ROW><ROW><id>18352074</id><snippet>pyramid_tm</snippet></ROW><ROW><id>18352074</id><snippet>def retry_serializable_tween_factory(handler, registry):

    def retry_tween(request):
        try:
            return handler(request)
        except DBAPIError, e:
            orig = e.orig
            if getattr(orig, 'pgcode', None) == '40001':
                raise SerializationConflictError(e)
            elif isinstance(orig, sqlite3.DatabaseError) and \
                orig.args == ('database is locked',):
                raise SerializationConflictError(e)
            else:
                raise

    return retry_tween
</snippet></ROW><ROW><id>18352247</id><snippet>import cookielib

import mechanize


base_url = "http://www.ananda-pur.de/23.html"

br = mechanize.Browser()
cj = cookielib.LWPCookieJar()
br.set_cookiejar(cj)
br.set_handle_robots(False)
br.set_handle_equiv(False)
br.set_handle_redirect(True)
br.set_handle_refresh(mechanize._http.HTTPRefreshProcessor(), max_time=1)
br.addheaders = [('User-agent',
                  'Mozilla/5.0 (X11; U; Linux i686; en-US; rv:1.9.0.1) Gecko/2008071615 Fedora/3.0.1-1.fc9 Firefox/3.0.1')]
page = br.open(base_url, timeout=10)

links = {}
for link in br.links():
    if link.url not in links:
        links[link.url] = {'count': 1, 'texts': [link.text]}
    else:
        links[link.url]['count'] += 1
        links[link.url]['texts'].append(link.text)

# printing
for link, data in links.iteritems():
    print "%s - %s - %s - %d" % (base_url, link, ",".join(data['texts']), data['count'])
</snippet></ROW><ROW><id>18352247</id><snippet>http://www.ananda-pur.de/23.html - index.html - Zadekstr 11,12351 Berlin, - 2
http://www.ananda-pur.de/23.html - 28.html - Das Team - 1
http://www.ananda-pur.de/23.html - http://www.yogibhajan.com/ - http://www.yogibhajan.com - 1
http://www.ananda-pur.de/23.html - 24.html - Kontakt - 1
http://www.ananda-pur.de/23.html - 25.html - Impressum - 1
http://www.ananda-pur.de/23.html - http://www.kriteachings.org/ - http://www.kriteachings.org,http://www.gurudevsnr.com,http://www.sat-nam-rasayan.de,http://www.3ho.de - 4
http://www.ananda-pur.de/23.html - http://www.kundalini-yoga-zentrum-berlin.de/ - http://www.kundalini-yoga-zentrum-berlin.de - 1
http://www.ananda-pur.de/23.html - 3.html - Ergo Oranien 155 - 1
http://www.ananda-pur.de/23.html - 2.html - Physio Bänsch 36 - 1
http://www.ananda-pur.de/23.html - 13.html - Stellenangebote - 1
http://www.ananda-pur.de/23.html - 23.html - Links - 1
</snippet></ROW><ROW><id>18352412</id><snippet>#!/usr/bin/env py

from os.path import splitext
import sys

def parse_file_extension(gold_deck, depth):
    extention_list = [ "lvs", "cir", "spx"]
    fspi = open(gold_deck, 'r+')
    for data in fspi:
        if data.startswith('.include'):
            data = data.split()
            netlist_file,netlist_file_extension = splitext(data[1].strip("'"))
            if netlist_file_extension not in extention_list:
                netlist_file = parse_file_extension(netlist_file, depth+1)
            return netlist_file
    fspi.close()

def main(argv):
    gold_deck = "sample.txt"
    netlist_file = parse_file_extension(gold_deck, 0)
    print netlist_file

if __name__ == "__main__":
    sys.exit(main(sys.argv))
</snippet></ROW><ROW><id>18352746</id><snippet>__repr__</snippet></ROW><ROW><id>18352746</id><snippet>myClass</snippet></ROW><ROW><id>18352746</id><snippet>&gt;&gt;&gt; class myClass(object):
...     def __init__(self,foo,bar):
...         self.foo = foo
...         self.bar = bar
...     def __repr__(self):
...         return 'myClass({0.foo},{0.bar})'.format(self)
... 
&gt;&gt;&gt; item = myClass(1,2)
&gt;&gt;&gt; item
myClass(1,2)
&gt;&gt;&gt; myDict = {}
&gt;&gt;&gt; myDict[item] = 10
&gt;&gt;&gt; myDict
{myClass(1,2): 10}
</snippet></ROW><ROW><id>18353272</id><snippet>os.chdir(path)</snippet></ROW><ROW><id>18353272</id><snippet>cd</snippet></ROW><ROW><id>18353272</id><snippet>subprocess.Popen(..)</snippet></ROW><ROW><id>18353408</id><snippet>count</snippet></ROW><ROW><id>18353408</id><snippet>2</snippet></ROW><ROW><id>18353408</id><snippet>for range</snippet></ROW><ROW><id>18353408</id><snippet>import urllib2
from bs4 import BeautifulSoup
baseurl='http://wordpandit.com/learning-bin/visual-vocabulary/page/'

for count in range(1,2):
    url = baseurl + str(count) + "/"
    html_page = urllib2.urlopen(url)
    soup = BeautifulSoup(html_page)
    atag = soup.findAll(rel="prettyPhoto[gallery]", href = True)
    for tag in atag:
        if tag['href'].endswith(".jpg"):
            imgurl = tag['href']
            img = urllib2.urlopen("http://wordpandit.com" + imgurl)
            with open(imgurl.split("/")[-1], "wb") as local_file:
                local_file.write(img.read())
</snippet></ROW><ROW><id>18353550</id><snippet>cmd = ['wget', '--tries=5', '--http-user=foo', '--http-passwd=bar', '--auth-no-challenge', '--no-check-certificate', '--output-document=temp/page.html', 'https://192.168.0.1/003/']
</snippet></ROW><ROW><id>18353692</id><snippet>recv()</snippet></ROW><ROW><id>18353692</id><snippet>while True:
    client_socket, address = server_socket.accept()
    print "Connection from ", address
    while 1:
        data = client_socket.recv(512)
        if not data:
            break
        print "RECIEVED:" , data
</snippet></ROW><ROW><id>18353698</id><snippet>your_value = 3
result = reduce(lambda x, y: y(x), function_list, your_value)
</snippet></ROW><ROW><id>18353698</id><snippet>&gt;&gt;&gt; functions = [lambda x: x + 2, lambda x: x * 2]
&gt;&gt;&gt; reduce(lambda x, y: y(x), functions, 1)
6
</snippet></ROW><ROW><id>18353956</id><snippet>try-except</snippet></ROW><ROW><id>18353956</id><snippet>try:
    req = requests.post(buildApiUrl.getUrl('user') + "/login", data=payload)
except requests.exceptions.RequestException:
    # Handle exception ..
</snippet></ROW><ROW><id>18354025</id><snippet>import re
lookup = {re.search('([A-Z][A-Za-z_]*$)', cls.__name__).group(1): cls for cls in BaseCls.__subclasses__()}
# {'A': &lt;class '__main__.ChildClsA'&gt;, 'B': &lt;class '__main__.ClildClsB'&gt;}

input_str = raw_input('Please enter one of {}:'.format(', '.join(lookup)))
new_class = lookup[input_str]()
</snippet></ROW><ROW><id>18354056</id><snippet>OR</snippet></ROW><ROW><id>18354056</id><snippet>Q</snippet></ROW><ROW><id>18354056</id><snippet>|</snippet></ROW><ROW><id>18354056</id><snippet>from django.db.models import Q
Objects.objects.filter(Q(name=search_field_value) | Q(term=search_field_value))
</snippet></ROW><ROW><id>18354056</id><snippet>search_field_value</snippet></ROW><ROW><id>18354089</id><snippet>sudo /etc/init.d/celeryd start</snippet></ROW><ROW><id>18354259</id><snippet>defaultdict</snippet></ROW><ROW><id>18354259</id><snippet>dict.get</snippet></ROW><ROW><id>18354259</id><snippet>leet =['a','4','b','l3','c','(','d','[)','e','3','g','6','l','1','o','0','s','5','t','7','w','\/\/']

lookup = dict(zip(*[iter(leet)] * 2))
text = 'how are you?'
blah = ''.join(lookup.get(ch, ch) for ch in text)
# h0\/\/ 4r3 y0u?
</snippet></ROW><ROW><id>18354471</id><snippet>def clusters(l, K):
    if l:
        prev = None
        for t in clusters(l[1:], K):
            tup = sorted(t)
            if tup != prev:
                prev = tup
                for i in xrange(K):
                    yield tup[:i] + [[l[0]] + tup[i],] + tup[i+1:]
    else:
        yield [[] for _ in xrange(K)]
</snippet></ROW><ROW><id>18354471</id><snippet>def neclusters(l, K):
    for c in clusters(l, K):
        if all(x for x in c): yield c
</snippet></ROW><ROW><id>18354471</id><snippet>def kamongn(n, k):
    res = 1
    for x in xrange(n-k, n):
        res *= x + 1
    for x in xrange(k):
        res /= x + 1
    return res

def Stirling(n, k):
    res = 0
    for j in xrange(k + 1):
        res += (-1)**(k-j) * kamongn(k, j) * j ** n
    for x in xrange(k):
        res /= x + 1
    return res

&gt;&gt;&gt; sum(1 for _ in neclusters([2,3,5,7,11,13], K=3)) == Stirling(len([2,3,5,7,11,13]), k=3)
True
</snippet></ROW><ROW><id>18354471</id><snippet>&gt;&gt;&gt; clust = neclusters([2,3,5,7,11,13], K=3)
&gt;&gt;&gt; [clust.next() for _ in xrange(5)]
[[[2, 3, 5, 7], [11], [13]], [[3, 5, 7], [2, 11], [13]], [[3, 5, 7], [11], [2, 13]], [[2, 3, 11], [5, 7], [13]], [[3, 11], [2, 5, 7], [13]]]
</snippet></ROW><ROW><id>18354475</id><snippet>import numpy as np

def sector_mask(shape,centre,radius,angle_range):
    """
    Return a boolean mask for a circular sector. The start/stop angles in  
    `angle_range` should be given in clockwise order.
    """

    x,y = np.ogrid[:shape[0],:shape[1]]
    cx,cy = centre
    tmin,tmax = np.deg2rad(angle_range)

    # ensure stop angle &gt; start angle
    if tmax &lt; tmin:
            tmax += 2*np.pi

    # convert cartesian --&gt; polar coordinates
    r2 = (x-cx)*(x-cx) + (y-cy)*(y-cy)
    theta = np.arctan2(x-cx,y-cy) - tmin

    # wrap angles between 0 and 2*pi
    theta %= (2*np.pi)

    # circular mask
    circmask = r2 &lt;= radius*radius

    # angular mask
    anglemask = theta &lt;= (tmax-tmin)

    return circmask*anglemask
</snippet></ROW><ROW><id>18354475</id><snippet>from matplotlib import pyplot as pp
from scipy.misc import lena

matrix = lena()
mask = sector_mask(matrix.shape,(200,100),300,(0,50))
matrix[~mask] = 0
pp.imshow(matrix)
pp.show()
</snippet></ROW><ROW><id>18354737</id><snippet>microsecond</snippet></ROW><ROW><id>18354915</id><snippet>key</snippet></ROW><ROW><id>18354915</id><snippet>sorted()</snippet></ROW><ROW><id>18354915</id><snippet>&gt;&gt;&gt; L = ['Ivan Connolly,50', 'Claudia Zingaro,50', 'Jeffie Honaker,50', 'Floria Rozar,49', 'Hyun Castleberry,48', 'Invalid Name,48', 'Cristi Authement,47', 'Yadira Millwood,47', 'Invalid Name,46']
&gt;&gt;&gt; def mysort(x):
...     temp = x.split(',')
...     return (-int(temp[1]), temp[0])
... 
&gt;&gt;&gt; sorted(L, key=mysort)
['Claudia Zingaro,50', 'Ivan Connolly,50', 'Jeffie Honaker,50', 'Floria Rozar,49', 'Hyun Castleberry,48', 'Invalid Name,48', 'Cristi Authement,47', 'Yadira Millwood,47', 'Invalid Name,46']
</snippet></ROW><ROW><id>18354915</id><snippet>[46, 'Invalid Name']</snippet></ROW><ROW><id>18354915</id><snippet>sorted()</snippet></ROW><ROW><id>18354920</id><snippet>r</snippet></ROW><ROW><id>18354920</id><snippet>'a\\b'</snippet></ROW><ROW><id>18354920</id><snippet>r'a\b'</snippet></ROW><ROW><id>18354920</id><snippet>u</snippet></ROW><ROW><id>18354920</id><snippet>cleaned_data</snippet></ROW><ROW><id>18354920</id><snippet>cleaned_data</snippet></ROW><ROW><id>18354920</id><snippet>cleaned_data</snippet></ROW><ROW><id>18354920</id><snippet>autoescape</snippet></ROW><ROW><id>18354920</id><snippet>data-</snippet></ROW><ROW><id>18354977</id><snippet>nextCommand # This references the function
</snippet></ROW><ROW><id>18354977</id><snippet>nextCommand() # This calls the function
</snippet></ROW><ROW><id>18354977</id><snippet>next_command</snippet></ROW><ROW><id>18354977</id><snippet>nextCommand</snippet></ROW><ROW><id>18354977</id><snippet>print "value recieved from nextCommand() is: " + str(nextCommand)
</snippet></ROW><ROW><id>18354977</id><snippet>print "value recieved from nextCommand() is: " + next_command
</snippet></ROW><ROW><id>18355002</id><snippet>class MainHandler(tornado.web.RequestHandler):
    def get(self):
        with open('test.pdf', 'rb') as f:  
            self.set_header("Content-Type", 'application/pdf; charset="utf-8"')
            self.set_header("Content-Disposition", "attachment; filename=test.pdf")                  
            self.write(f.read())
</snippet></ROW><ROW><id>18355478</id><snippet>super(MySearchForm, self).search()</snippet></ROW><ROW><id>18355478</id><snippet>auto_query()</snippet></ROW><ROW><id>18355478</id><snippet>content</snippet></ROW><ROW><id>18355478</id><snippet>super</snippet></ROW><ROW><id>18355478</id><snippet>fieldname</snippet></ROW><ROW><id>18355478</id><snippet>auto_query</snippet></ROW><ROW><id>18355478</id><snippet>auto_query(querystring, fieldname='text')</snippet></ROW><ROW><id>18355478</id><snippet>filter()</snippet></ROW><ROW><id>18356045</id><snippet>feed</snippet></ROW><ROW><id>18356045</id><snippet>http://www.w3.org/2005/Atom</snippet></ROW><ROW><id>18356045</id><snippet>entries = root.xpath("/atom:feed/atom:entry", 
                     namespaces={'atom': 'http://www.w3.org/2005/Atom'})
</snippet></ROW><ROW><id>18356045</id><snippet>entries = root.xpath("/feed/entry", 
                     namespaces={None: 'http://www.w3.org/2005/Atom'})
</snippet></ROW><ROW><id>18356045</id><snippet>entries = root.xpath("/{http://www.w3.org/2005/Atom}feed/{http://www.w3.org/2005/Atom}entry")
</snippet></ROW><ROW><id>18356045</id><snippet>feed = root.find("/atom:feed",
                     namespaces={'atom': 'http://www.w3.org/2005/Atom'})

title = feed.xpath("title")
entries = feed.xpath("entries")
# etc...
</snippet></ROW><ROW><id>18356224</id><snippet>line.set_data(newData)
annotation = plt.annotate('A0', xy=(newData[0][0],newData[1][0]))
return line, annotation
</snippet></ROW><ROW><id>18356224</id><snippet>matplotlib</snippet></ROW><ROW><id>18356224</id><snippet>init</snippet></ROW><ROW><id>18356224</id><snippet>FuncAnimation</snippet></ROW><ROW><id>18356224</id><snippet>import numpy as np
import matplotlib.pyplot as plt
import matplotlib.animation as animation

# Create initial data
data = np.array([[1,2,3,4,5], [7,4,9,2,3]])

# Create figure and axes
fig = plt.figure()
ax = plt.axes(xlim=(0, 20), ylim=(0, 20))

# Create initial objects
line, = ax.plot([], [], 'r-')
annotation = ax.annotate('A0', xy=(data[0][0], data[1][0]))
annotation.set_animated(True)

# Create the init function that returns the objects
# that will change during the animation process
def init():
    return line, annotation

# Create the update function that returns all the
# objects that have changed
def update(num):
    newData = np.array([[1 + num, 2 + num / 2, 3, 4 - num / 4, 5 + num],
                        [7, 4, 9 + num / 3, 2, 3]])
    line.set_data(newData)
    # This is not working i 1.2.1
    # annotation.set_position((newData[0][0], newData[1][0]))
    annotation.xytext = (newData[0][0], newData[1][0])
    return line, annotation

anim = animation.FuncAnimation(fig, update, frames=25, init_func=init,
                               interval=200, blit=True)
plt.show()
</snippet></ROW><ROW><id>18356506</id><snippet>scipy.signal.gaussian</snippet></ROW><ROW><id>18356926</id><snippet>spectrumnoise</snippet></ROW><ROW><id>18356926</id><snippet>list</snippet></ROW><ROW><id>18356926</id><snippet>numpy.ndarray</snippet></ROW><ROW><id>18356926</id><snippet>hist</snippet></ROW><ROW><id>18356926</id><snippet>hist</snippet></ROW><ROW><id>18356926</id><snippet>spectrumnoise</snippet></ROW><ROW><id>18356926</id><snippet>pp.hist(np.vstack(spectrumnoise),50)
</snippet></ROW><ROW><id>18356926</id><snippet>data[20:40] += y1
</snippet></ROW><ROW><id>18357094</id><snippet>def Minimum_Close(shade_corrected_image, size):

    uint32_shade_corrected_image = pymorph.to_int32(shade_corrected_image)

    angles = np.arange(12) * 15

    def pymorph_op(angle):
        struct_element = pymorph.seline(size, angle)
        return pymorph.close(uint32_shade_corrected_image, struct_element)

    image_close = np.dstack(pymorph_op(a) for a in angles)

    min_close_image = np.min(image_close, axis=-1) - shade_corrected_image

    return min_close_image
</snippet></ROW><ROW><id>18357397</id><snippet>import json 
import urllib2

with open('urls.txt') as f:
    urls = [line.rstrip() for line in f]
with open('proxies.txt') as proxies:
    for line in proxies:
        proxy = json.loads(line)
        proxy_handler = urllib2.ProxyHandler(proxy)
        opener = urllib2.build_opener(proxy_handler)
        urllib2.install_opener(opener)
        for url in urls:
            try:
                data = urllib2.urlopen(url).read()
                print proxy, "-", data 
            except:
                print proxy, "- not working"
</snippet></ROW><ROW><id>18357397</id><snippet>http://api.exip.org/?call=ip
</snippet></ROW><ROW><id>18357397</id><snippet>{"http": "http://218.108.114.140:8080"}
{"http": "http://59.47.43.93:8080"}
{"http": "http://218.108.170.172:80"}
</snippet></ROW><ROW><id>18357397</id><snippet>{u'http': u'http://218.108.114.140:8080'} - 218.108.114.140
{u'http': u'http://59.47.43.93:8080'} - 118.207.240.161
{u'http': u'http://218.108.170.172:80'} - not working
[Finished in 25.4s]
</snippet></ROW><ROW><id>18357582</id><snippet>"val_31 val_32"</snippet></ROW><ROW><id>18357582</id><snippet>String[] command = {"script.py", "run",
                    "-arg1", "val1", 
                    "-arg2", "val2" ,          
                    "-arg3" , "val_31", "val_32",
       };
</snippet></ROW><ROW><id>18357582</id><snippet>val_31</snippet></ROW><ROW><id>18357582</id><snippet>val_32</snippet></ROW><ROW><id>18357582</id><snippet>varargs</snippet></ROW><ROW><id>18357582</id><snippet>ProcessBuilder probuilder = new ProcessBuilder( "script.py", "run",
                    "-arg1", "val1", 
                    "-arg2", "val2" ,          
                    "-arg3" , "val_31", "val_32");
</snippet></ROW><ROW><id>18357664</id><snippet>matplotlib.dates</snippet></ROW><ROW><id>18357664</id><snippet>import matplotlib.dates
</snippet></ROW><ROW><id>18357664</id><snippet>from matplotlib.dates import date2num

dates = date2num(listOfDates)
</snippet></ROW><ROW><id>18357826</id><snippet>i is not None or i.isupper()</snippet></ROW><ROW><id>18357826</id><snippet>i</snippet></ROW><ROW><id>18357826</id><snippet>None</snippet></ROW><ROW><id>18357826</id><snippet>(i is not None) or (i.isupper())
</snippet></ROW><ROW><id>18357826</id><snippet>False</snippet></ROW><ROW><id>18357826</id><snippet>False</snippet></ROW><ROW><id>18357826</id><snippet>i</snippet></ROW><ROW><id>18357826</id><snippet>None</snippet></ROW><ROW><id>18357826</id><snippet>None.isupper()</snippet></ROW><ROW><id>18357826</id><snippet>and</snippet></ROW><ROW><id>18357826</id><snippet>isupper()</snippet></ROW><ROW><id>18357826</id><snippet>x = i if i is not None and not i.isupper() else None
</snippet></ROW><ROW><id>18357826</id><snippet>i is None or i.isupper()</snippet></ROW><ROW><id>18357826</id><snippet>not (..)</snippet></ROW><ROW><id>18357826</id><snippet>x = i if not (i is None or i.isupper()) else None
</snippet></ROW><ROW><id>18357826</id><snippet>for</snippet></ROW><ROW><id>18357826</id><snippet>i</snippet></ROW><ROW><id>18357826</id><snippet>for i in [None,'foo',None,'FOO',None,'bar']:
      if i and i.isupper():
          i = None
      print i
</snippet></ROW><ROW><id>18358076</id><snippet>itertools.product</snippet></ROW><ROW><id>18358076</id><snippet>from itertools import product
first_index=1
for i in product(*[range(i) for i in count]):
    for j in range(len(count)):
        print( '{0:3} , {1:3} , {2:1}'.format(first_index, table[i[j]][j], j+1))
    first_index += 1
</snippet></ROW><ROW><id>18358167</id><snippet>https://gdata.youtube.com/feeds/api/videos?orderby=published&amp;prettyprint=True
</snippet></ROW><ROW><id>18358246</id><snippet>Card.draw</snippet></ROW><ROW><id>18358246</id><snippet>Tkinter</snippet></ROW><ROW><id>18358246</id><snippet>PhotoImage</snippet></ROW><ROW><id>18358246</id><snippet>PhotoImage</snippet></ROW><ROW><id>18358246</id><snippet>Card.__init__</snippet></ROW><ROW><id>18358246</id><snippet>class Cards:
    def __init__(self,suit,rank):
        self.suit = suit
        self.rank = rank  
        self.karta = None
#       ^^^^^^^^^^^^^^^^^
</snippet></ROW><ROW><id>18358246</id><snippet>Card.draw</snippet></ROW><ROW><id>18358246</id><snippet>    def draw(self,position):
        CARD = Image.open ("C:\Users\Petar\Desktop\cards.png")
        box = [RANKS.index(self.rank) * CARD_SIZE[0], SUITS.index(self.suit) * CARD_SIZE[1], CARD_SIZE[0] * (RANKS.index(self.rank)+1) , CARD_SIZE[1] * (SUITS.index(self.suit)+1)]
        cropped = CARD.crop(box)
        self.karta = ImageTk.PhotoImage(cropped)
#       ^^^^^
        canvas.create_image(position, image=self.karta) 
#                                           ^^^^^
</snippet></ROW><ROW><id>18358246</id><snippet>Card</snippet></ROW><ROW><id>18358246</id><snippet>PhotoImage</snippet></ROW><ROW><id>18358367</id><snippet>//Submit data to server, assuming you have already extracted out the relevant data values
$("some_button").click(function(e){
  $.ajax({
    url : "someUURLLocation/",
    type : "POST",
    data : {"data" : JSON.stringify({"field1" : var1, "field2" :var2}),
    dataType : "json",
    success : function(results){
      if (results.success == "true") {
        //handle DOM insertion and other stuff
      } else 
        alert(results.message);
    }
  });
}
</snippet></ROW><ROW><id>18358367</id><snippet>from django.conf.urls import patterns, url
from $APPNAME import views

urlpatterns = patterns("",
  ...
  ...
  url(r'^someURLLocation/$', views.handleDataSubmission),
  ...
)
</snippet></ROW><ROW><id>18358367</id><snippet>from django.http import HttpResponse
from django.utils import simplejson

def handleDataSubmission(request):
  data = simplejson.loads(request.POST.get("data", None))

  if data is not None:

    newPost = Post.objects.create( field1 = data["field1"], field2 = data["field2"])
    dataReturn  = [{"val1" : newPost.title, "val2" : newPost.date}]

    return HttpResponse(simplejson.dumps({"success" : "true", "data" : dataReturn}), mimetype = "application/json")

  else:
    return HttpResponse(simplejson.dumps({"success" : "false", "message" : "Invalid data received by server"}), mimetype = "application/json")
</snippet></ROW><ROW><id>18358370</id><snippet>my = os.path.abspath('/my/self/defined/path')
new = os.path.abspath(path)
if len(new) &lt; len(my) or not new.startswith(my):
   print 'bzzzt'
</snippet></ROW><ROW><id>18358741</id><snippet>Axes</snippet></ROW><ROW><id>18358741</id><snippet>set_xlim()</snippet></ROW><ROW><id>18358741</id><snippet>data = array([random() for i in xrange(len(bins))])
plot(bins[:10], data[:10], drawstyle="steps-mid") #draws till the end
title("some data")

fig = figure()
ax = fig.add_subplot(111)
plot(bins, data)
ax.set_xlim(min(bins), max(bins)
ax.set_title("all data")
show()
</snippet></ROW><ROW><id>18359037</id><snippet>import sys, os
sys.path.append(os.path.relpath('relative/path/to/folder/containing/module'))
</snippet></ROW><ROW><id>18359037</id><snippet>extensions = [...]</snippet></ROW><ROW><id>18359037</id><snippet>def setup(app):
    return
</snippet></ROW><ROW><id>18359215</id><snippet>import re
def get_encoding(soup):
    encod = soup.meta.get('charset')
    if encod == None:
        encod = soup.meta.get('content-type')
        if encod == None:
            content = soup.meta.get('content')
            match = re.search('charset=(.*)', content)
            if match:
                encod = match.group(1)
            else:
                raise ValueError('unable to find encoding')
    return encod
</snippet></ROW><ROW><id>18359333</id><snippet>date = 'The date is {}'.format(get_date())
</snippet></ROW><ROW><id>18359333</id><snippet>def get_current_year():
    return '2013' # just an example, not the real function

s = 'Copyright 2008-{} Company Name Ltd.'
s.format(get_current_year())
=&gt; 'Copyright 2008-2013 Company Name Ltd.'
</snippet></ROW><ROW><id>18359333</id><snippet>{}</snippet></ROW><ROW><id>18359559</id><snippet>fetchone</snippet></ROW><ROW><id>18359559</id><snippet>r_ele</snippet></ROW><ROW><id>18359559</id><snippet>fetchall</snippet></ROW><ROW><id>18359559</id><snippet>fetchone</snippet></ROW><ROW><id>18359559</id><snippet>value</snippet></ROW><ROW><id>18359559</id><snippet>CREATE INDEX idx_k_ele_value ON k_ele(value);
</snippet></ROW><ROW><id>18359773</id><snippet>os.system</snippet></ROW><ROW><id>18359773</id><snippet>filename</snippet></ROW><ROW><id>18359773</id><snippet>dirpath = '/Users/Desktop/Xfiles'
for filename in os.listdir(dirpath):
    os.system('/sw/bin/python2.7 pythonCode.py {}/{}'.format(dirpath, filename))
</snippet></ROW><ROW><id>18359773</id><snippet>file</snippet></ROW><ROW><id>18359773</id><snippet>file</snippet></ROW><ROW><id>18360223</id><snippet>index</snippet></ROW><ROW><id>18360223</id><snippet>list</snippet></ROW><ROW><id>18360223</id><snippet>list</snippet></ROW><ROW><id>18360223</id><snippet>tuple</snippet></ROW><ROW><id>18360223</id><snippet>Index</snippet></ROW><ROW><id>18360223</id><snippet>MultiIndex</snippet></ROW><ROW><id>18360223</id><snippet>df.index.values.tolist()  # an ndarray method, you probably shouldn't depend on this
</snippet></ROW><ROW><id>18360223</id><snippet>list(df.index.values)  # this will always work in pandas
</snippet></ROW><ROW><id>18360275</id><snippet>()</snippet></ROW><ROW><id>18360275</id><snippet>self.assertRaises(
    ldap.SERVER_DOWN, test_extractor._get_ldap_connection)
</snippet></ROW><ROW><id>18360275</id><snippet>with self.assertRaises(..)</snippet></ROW><ROW><id>18360275</id><snippet>with self.assertRaises(ldap.SERVER_DOWN):
    test_extractor._get_ldap_connection()
</snippet></ROW><ROW><id>18360404</id><snippet>foo = [chr(random.randint(32,126)) for _ in xrange(11)]
</snippet></ROW><ROW><id>18360404</id><snippet>str.join()</snippet></ROW><ROW><id>18360404</id><snippet>print ''.join([chr(random.randint(32,126)) for _ in xrange(11)])
</snippet></ROW><ROW><id>18360404</id><snippet>xrange()</snippet></ROW><ROW><id>18360404</id><snippet>range()</snippet></ROW><ROW><id>18360404</id><snippet>&gt;&gt;&gt; import random
&gt;&gt;&gt; ''.join([chr(random.randint(32,126)) for _ in xrange(11)])
'D}H]qxfD6&amp;,'
</snippet></ROW><ROW><id>18360691</id><snippet>&gt;&gt;&gt; import numpy as np
&gt;&gt;&gt; a = np.array([1, 2, 3., np.nan, 4, np.nan])
&gt;&gt;&gt; a = a[~np.isnan(a)]
&gt;&gt;&gt; a
array([ 1.,  2.,  3.,  4.])
</snippet></ROW><ROW><id>18361227</id><snippet>current_user</snippet></ROW><ROW><id>18361227</id><snippet>{% if current_user.is_authenticated() %}
    ...
{% else %}
    ...
{% endif %}
</snippet></ROW><ROW><id>18361229</id><snippet>[^\]</snippet></ROW><ROW><id>18361229</id><snippet>\</snippet></ROW><ROW><id>18361229</id><snippet>((?&lt;!\)[#\$%\^&amp;_\{\}~\\])
</snippet></ROW><ROW><id>18361229</id><snippet>(?&lt;!...)</snippet></ROW><ROW><id>18361229</id><snippet>...</snippet></ROW><ROW><id>18361488</id><snippet>getattr()</snippet></ROW><ROW><id>18361488</id><snippet>attr_name = pattr[letter]
if not attr_name.endswith("()"):
  print getattr(p, attr_name)
else:
  print getattr(p, attr_name[:-2])()
</snippet></ROW><ROW><id>18361506</id><snippet>+</snippet></ROW><ROW><id>18361506</id><snippet>System.out.println(5 + "5");
</snippet></ROW><ROW><id>18361506</id><snippet>TypeError</snippet></ROW><ROW><id>18361506</id><snippet>+</snippet></ROW><ROW><id>18361506</id><snippet>&gt;&gt;&gt; "5" + str(5)
'55'
</snippet></ROW><ROW><id>18361506</id><snippet>+</snippet></ROW><ROW><id>18361506</id><snippet>+</snippet></ROW><ROW><id>18361506</id><snippet>+</snippet></ROW><ROW><id>18361506</id><snippet>$ perl -e 'print 5 + "5"; print "\n"'
10
</snippet></ROW><ROW><id>18361727</id><snippet>result = []
ms, mb = (dict(a),dict(b)) if len(a)&lt;len(b) else (dict(b),dict(a))
for k in ms:
  if k in mb:
    result.append([k,ms[k]+mb[k]])
</snippet></ROW><ROW><id>18362144</id><snippet>widgets</snippet></ROW><ROW><id>18362144</id><snippet>Container</snippet></ROW><ROW><id>18362144</id><snippet>Container</snippet></ROW><ROW><id>18362144</id><snippet>import pickle

filename = 'container.pkl'

class Container(object):
    def __init__(self, name):
        self.name = name
        self.widgets = []

class Widget(object):
    def __init__(self, name):
        self.name = name

c = Container('My Container')
w = Widget('My Widget')

c.widgets.append(w)

data = open(filename, 'wb')
pickle.dump(c, data)
data.close()
</snippet></ROW><ROW><id>18362171</id><snippet>ssh.connect()</snippet></ROW><ROW><id>18362171</id><snippet>pkey</snippet></ROW><ROW><id>18362171</id><snippet>#get IP and username for remote access
IP = input("Enter host_server IP: ").split()
username = input("Enter username: ").split()


#create a file on host_server for file
file_a = open(date+"file.txt", "a") #ignore the date variable
file = str(date+"file.txt")
import paramiko
import os
privatekeyfile = os.path.expanduser('~/.ssh/id_rsa')
mykey = paramiko.RSAKey.from_private_key_file(privatekeyfile)
ssh.connect(IP[0], username = user[0], pkey = mykey)
</snippet></ROW><ROW><id>18362257</id><snippet>state_abbrs = {}
for name in range(state_sheet.nrows):  #a sheet with state names in col 0, state abrevs in col 1
    state_name = state_sheet.cell_value(name, colx=0)
    state_abrev = state_sheet.cell_value(name, colx=1)
    state_abbrs[state_name.lower()] = state_abbr
</snippet></ROW><ROW><id>18362257</id><snippet>for row in range(input_sheet.nrows):
    state = input_sheet.cell_value(row, colx=1) #state names are in col 1
    Value1 = input_sheet.cell_value(row, colx=2) #data being left unchanged, just copied to output sheet
    Value2 = input_sheet.cell_value(row, colx=3)
    Value3 = input_sheet.cell_value(row, colx=4)

    output_sheet.write(row, 0, state_abbrs.get(state.lower(), '')
    output_sheet.write(row, 1, Value1)
    output_sheet.write(row, 2, Value2)
    output_sheet.write(row, 3, Value3)
</snippet></ROW><ROW><id>18362437</id><snippet>os.environ.setdefault('QT_API','pyside')
</snippet></ROW><ROW><id>18362455</id><snippet>- deferred: on</snippet></ROW><ROW><id>18362455</id><snippet>app.yaml</snippet></ROW><ROW><id>18362455</id><snippet>from google.appengine.ext import deferred

  def do_something_expensive(a, b, c=None):
    logging.info("Doing something expensive!")
    # Do your work here

  # Somewhere else
  deferred.defer(do_something_expensive, "Hello, world!", 42, c=True)
</snippet></ROW><ROW><id>18362497</id><snippet>area = [[] for i in range(37)]
</snippet></ROW><ROW><id>18362497</id><snippet>area = {i: [] for i in range(1, 37)}        # Python 2.7+
area = dict((i, []) for i in range(1, 37))  # Python 2.6 or earlier
</snippet></ROW><ROW><id>18362497</id><snippet>area[1]
area[2]
...
area[36]
</snippet></ROW><ROW><id>18362592</id><snippet>external_modules/</snippet></ROW><ROW><id>18362592</id><snippet>sys.path.insert(0, 'external_modules')</snippet></ROW><ROW><id>18362592</id><snippet>sys.path.insert</snippet></ROW><ROW><id>18362592</id><snippet>external_modules/</snippet></ROW><ROW><id>18362592</id><snippet>import module</snippet></ROW><ROW><id>18362592</id><snippet>sys.path.insert</snippet></ROW><ROW><id>18362592</id><snippet>sys.path.insert()</snippet></ROW><ROW><id>18362592</id><snippet>import sys</snippet></ROW><ROW><id>18362609</id><snippet>&lt;!-- --&gt;</snippet></ROW><ROW><id>18362609</id><snippet>&lt;script type="text/javascript"&gt;&lt;!--

... your script goes here ...

// --&gt;&lt;/script&gt;
</snippet></ROW><ROW><id>18362609</id><snippet>--&gt;</snippet></ROW><ROW><id>18362681</id><snippet>import sys
sys.path.insert(0, '/path/to/')

option1 = 'abc'
option2 = 'def'

from MyFile import option3, option4
</snippet></ROW><ROW><id>18362926</id><snippet>#Creator:JohnSmith
#Date:....
#Columns:id,username,...
1,JohnSmith
2, ..
</snippet></ROW><ROW><id>18363055</id><snippet>EXIST</snippet></ROW><ROW><id>18363055</id><snippet>WHERE (SELECT COUNT(*) FROM ... WHERE tags.tag in ("foo", "bar")) = 2
</snippet></ROW><ROW><id>18363055</id><snippet>WHERE (SELECT tags.tag FROM ...) = ("foo", "bar")</snippet></ROW><ROW><id>18363055</id><snippet>WHERE</snippet></ROW><ROW><id>18363652</id><snippet>import re

class mydict(dict):
    def __missing__(self, key):
        self.setdefault(key, '')
        return ''

def solve(a, b):
    dic = mydict()
    a % dic
    strs = a
    for x in dic:
        esc = re.escape(x)
        strs = re.sub(r'(%\({}\).)'.format(esc), '(?P&lt;{}&gt;.*)'.format(esc), strs)
    return re.search(strs, b).groupdict()

if __name__ == '__main__':
    a = '/stock/%(symbol)s/%(property)s'
    b = '/stock/AAPL/price'
    print solve(a, b)
    a = "Foo %(bar)s spam %(eggs)s %(python)s"
    b = 'Foo BAR spam 10 3.x'
    print solve(a, b)
</snippet></ROW><ROW><id>18363652</id><snippet>{'symbol': 'AAPL', 'property': 'price'}
{'python': '3.x', 'eggs': '10', 'bar': 'BAR'}
</snippet></ROW><ROW><id>18363652</id><snippet>a = 'leading/%(A)s%(B)s/trailing'
b = 'leading/helloworld/trailing'
</snippet></ROW><ROW><id>18363652</id><snippet>b</snippet></ROW><ROW><id>18363652</id><snippet>A</snippet></ROW><ROW><id>18363652</id><snippet>B</snippet></ROW><ROW><id>18363699</id><snippet>requests.get(url, auth=(username, password))
</snippet></ROW><ROW><id>18363699</id><snippet>requests</snippet></ROW><ROW><id>18363970</id><snippet>eval</snippet></ROW><ROW><id>18363970</id><snippet>level = logging.getLevelName(set_level)
logger.setLevel(level)
</snippet></ROW><ROW><id>18363973</id><snippet>subplots=True</snippet></ROW><ROW><id>18363973</id><snippet>import matplotlib.pyplot as plt

def myplot(df, ilist, clist):
    df1 = df[df['I'].isin(ilist)][clist + ['t', 'I']].set_index('t')
    fig, ax = plt.subplots(len(clist))
    for I, grp in df1.groupby('I'):
        for j, col in enumerate(clist):
            grp[col].plot(ax=ax[j], sharex=True)
</snippet></ROW><ROW><id>18363973</id><snippet>df['t'] = pd.to_datetime(df['t']) # Make sure pandas treats t as times.
myplot(df, [1, 4], ['A', 'B', 'C'])
plt.tight_layout() # cleans up the spacing of the plots
</snippet></ROW><ROW><id>18364045</id><snippet>for row in AudioAngle:
    print(row[0])
    print(row[1])
    if len(row) &gt;= 3:
       print(row[2])
</snippet></ROW><ROW><id>18364134</id><snippet>Date</snippet></ROW><ROW><id>18364134</id><snippet>2013-08-21T17:29:00Z</snippet></ROW><ROW><id>18364134</id><snippet>Europe/Paris</snippet></ROW><ROW><id>18364134</id><snippet>Europe/Paris</snippet></ROW><ROW><id>18364162</id><snippet>Packages</snippet></ROW><ROW><id>18364162</id><snippet>Preferences -&gt; Browse Packages...</snippet></ROW><ROW><id>18364162</id><snippet>User</snippet></ROW><ROW><id>18364162</id><snippet>SublimeREPL</snippet></ROW><ROW><id>18364162</id><snippet>config</snippet></ROW><ROW><id>18364162</id><snippet>Python</snippet></ROW><ROW><id>18364162</id><snippet>Main.sublime-menu</snippet></ROW><ROW><id>18364162</id><snippet>[
     {
        "id": "tools",
        "children":
        [{
            "caption": "SublimeREPL",
            "mnemonic": "r",
            "id": "SublimeREPL",
            "children":
            [
                {"caption": "Python",
                "id": "Python",

                 "children":[
                    {"command": "repl_open",
                     "caption": "Python",
                     "id": "repl_python3",
                     "mnemonic": "p",
                     "args": {
                        "type": "subprocess",
                        "encoding": "utf8",
                        "cmd": ["c:/pythonXX/python.exe", "-i", "-u"],
                        "cwd": "c:/whichever/path/you/want",
                        "syntax": "Packages/Python/Python.tmLanguage",
                        "external_id": "python",
                        "extend_env": {"PYTHONIOENCODING": "utf-8"}
                        }
                    }
                ]
                }
            ]
            }]
        }
]
</snippet></ROW><ROW><id>18364162</id><snippet>"cmd"</snippet></ROW><ROW><id>18364162</id><snippet>"cwd"</snippet></ROW><ROW><id>18364162</id><snippet>Tools -&gt; SublimeREPL -&gt; Python</snippet></ROW><ROW><id>18364252</id><snippet>def CSYNC_VERSION_INT(a, b, c):
    return a &lt;&lt; 16 | b &lt;&lt; 8 | c
</snippet></ROW><ROW><id>18364252</id><snippet>a</snippet></ROW><ROW><id>18364252</id><snippet>b</snippet></ROW><ROW><id>18364252</id><snippet>c</snippet></ROW><ROW><id>18364252</id><snippet>a, b, c</snippet></ROW><ROW><id>18364252</id><snippet>c</snippet></ROW><ROW><id>18364252</id><snippet>b</snippet></ROW><ROW><id>18364252</id><snippet>a</snippet></ROW><ROW><id>18364252</id><snippet>CSYNC_VERSION_INT(3, 2, 8)</snippet></ROW><ROW><id>18364322</id><snippet>resp = requests.get(url, stream=True)
resp.raw.read()
</snippet></ROW><ROW><id>18364322</id><snippet>raw</snippet></ROW><ROW><id>18364322</id><snippet>stream=True</snippet></ROW><ROW><id>18364322</id><snippet>raw</snippet></ROW><ROW><id>18364322</id><snippet>response.content</snippet></ROW><ROW><id>18364322</id><snippet>response.content</snippet></ROW><ROW><id>18364322</id><snippet>response.raw.read()</snippet></ROW><ROW><id>18364322</id><snippet>requests</snippet></ROW><ROW><id>18364330</id><snippet>class.attribute</snippet></ROW><ROW><id>18364330</id><snippet>class Test:
    def __init__(self):
        self.field = [(1,2)]
</snippet></ROW><ROW><id>18364424</id><snippet>Exception</snippet></ROW><ROW><id>18364424</id><snippet>KeyError</snippet></ROW><ROW><id>18364424</id><snippet>TypeError</snippet></ROW><ROW><id>18364424</id><snippet>cart_id = request.session('cart_id')</snippet></ROW><ROW><id>18364424</id><snippet>[]</snippet></ROW><ROW><id>18364424</id><snippet>()</snippet></ROW><ROW><id>18364424</id><snippet>except</snippet></ROW><ROW><id>18364424</id><snippet>try:
    cart_id = request.session['cart_id'] # Fix this
except KeyError:                         # Fix that
    # If cart_id doesn't exist, make one
    cart = Cart()
    cart.save()
    request.session['cart_id'] = cart.id
    cart_id = cart.id
</snippet></ROW><ROW><id>18364424</id><snippet>cart_id = request.session.get('cart_id')

if cart_id is None:
    cart = Cart.objects.create()
    cart_id = cart.id
    request.session['cart_id'] = cart.id
</snippet></ROW><ROW><id>18364424</id><snippet>carts = Cart.objects.filter(pk=request.session.get('cart_id'))  
# I'm not fully sure None is accepted here, use -1 if it's not. 

if carts:
    cart = carts[0]
else:
    cart = Cart.objects.create()
    request.session['cart_id'] = cart.id
</snippet></ROW><ROW><id>18364424</id><snippet>cart</snippet></ROW><ROW><id>18364519</id><snippet>if __name__ == '__main__':
    table = [[1, 2, 3],
             [4, 5, 6],
             [7, 8, 9]]
    print check_sudoku(table) #you need to actually print stuff when running in a script 
</snippet></ROW><ROW><id>18364534</id><snippet>K</snippet></ROW><ROW><id>18364534</id><snippet>R</snippet></ROW><ROW><id>18364534</id><snippet>P</snippet></ROW><ROW><id>18364534</id><snippet>&gt;&gt;&gt; re.findall(r".(?:(?&lt;![KR](?!P)).)*", 'GGRGAGRPSAAWKSAAVRYLTMMSKPSLYQT')
['GGR', 'GAGRPSAAWK', 'SAAVR', 'YLTMMSKPSLYQT']
</snippet></ROW><ROW><id>18364872</id><snippet>linewidth</snippet></ROW><ROW><id>18364872</id><snippet>m.drawparallels(np.arange(int(40.125),int(44.625),1),labels=[1,0,0,0], linewidth=0.0)
m.drawmeridians(np.arange(int(-71.875),int(-66.375),1),labels=[0,0,0,1], linewidth=0.0)
</snippet></ROW><ROW><id>18364911</id><snippet>not equal</snippet></ROW><ROW><id>18364911</id><snippet>!=</snippet></ROW><ROW><id>18364911</id><snippet>query_train = DBSession.query(TokenizedLabel).filter(TokenizedLabel.which_disaster!=opts.disaster).all()
</snippet></ROW><ROW><id>18364916</id><snippet>SomeClass()</snippet></ROW><ROW><id>18364916</id><snippet>__init__</snippet></ROW><ROW><id>18364916</id><snippet>self.x += 1</snippet></ROW><ROW><id>18364916</id><snippet>self.x</snippet></ROW><ROW><id>18364916</id><snippet>x</snippet></ROW><ROW><id>18364916</id><snippet>self.x</snippet></ROW><ROW><id>18364916</id><snippet>MyHandler.x</snippet></ROW><ROW><id>18365125</id><snippet>wsgiref.simple_server</snippet></ROW><ROW><id>18365125</id><snippet>runserver</snippet></ROW><ROW><id>18365216</id><snippet>my_path = "some/path/blah"
os.path.insert(0,my_path)
import my_custom_module
</snippet></ROW><ROW><id>18365231</id><snippet>-w, --windowed, --noconsole
    use a windowed subsystem executable, which on Windows does not open the console when the program is launched. This option is mandatory when creating .app bundle on Mac OS X.</snippet></ROW><ROW><id>18365398</id><snippet>&gt;&gt;&gt; s = "&lt;-20 "+u"\u00B0"
&gt;&gt;&gt; s
u'&lt;-20 \xb0'
&gt;&gt;&gt; type(s)
&lt;type 'unicode'&gt;
&gt;&gt;&gt; repr(s)
"u'&lt;-20 \\xb0'"
&gt;&gt;&gt; print s
&lt;-20 °
&gt;&gt;&gt; s == u"&lt;-20 °"
True
&gt;&gt;&gt; s == u'&lt;-20 \xb0'
True
&gt;&gt;&gt; s.encode('utf-8')
'&lt;-20 \xc2\xb0'
s.encode('latin1')
'&lt;-20 \xb0'
</snippet></ROW><ROW><id>18365488</id><snippet>IndexError or ValueError</snippet></ROW><ROW><id>18365488</id><snippet>IndexError</snippet></ROW><ROW><id>18365488</id><snippet>&gt;&gt;&gt; IndexError or ValueError
&lt;type 'exceptions.IndexError'&gt;
</snippet></ROW><ROW><id>18365488</id><snippet>or</snippet></ROW><ROW><id>18365488</id><snippet>True</snippet></ROW><ROW><id>18365488</id><snippet>IndexError</snippet></ROW><ROW><id>18365488</id><snippet>True</snippet></ROW><ROW><id>18365488</id><snippet>except IndexError:
</snippet></ROW><ROW><id>18365976</id><snippet>[{}] * 7
</snippet></ROW><ROW><id>18365976</id><snippet>[{}, {}, {}, {}, {}, {}, {}]
</snippet></ROW><ROW><id>18365976</id><snippet>[{} for _ in range(7)]
</snippet></ROW><ROW><id>18366021</id><snippet>MyClass</snippet></ROW><ROW><id>18366021</id><snippet>from types import ModuleType

class MyClass(ModuleType):
    ...
</snippet></ROW><ROW><id>18366021</id><snippet>import sys
sys.modules[__name__] = MyClass(__name__)
</snippet></ROW><ROW><id>18366217</id><snippet>params</snippet></ROW><ROW><id>18366217</id><snippet>params</snippet></ROW><ROW><id>18366217</id><snippet>data</snippet></ROW><ROW><id>18366217</id><snippet>import requests
import json
headers = {'Content-type': 'application/json'}
data = json.dumps({"seriesid":["LEU0254555900", "APU0000701111"],"startyear":"2002", "endyear":"2012"})
p = requests.post('http://api.bls.gov/publicAPI/v1/timeseries/data/', data=data, headers=headers)
print p.url
print p.content
</snippet></ROW><ROW><id>18366265</id><snippet># find the pid
ps -ef | grep [m]ycommand
# use the pid from the previous command
strace -p $thepid
</snippet></ROW><ROW><id>18366574</id><snippet>with open("textfile.txt") as openfile:
    for line in openfile:
        for part in line.split():
            if "color=" in part:
                print part
</snippet></ROW><ROW><id>18366613</id><snippet># Request comes in:
data = json.loads(request_body)
# Do calculations
output = json.dumps(out_data)
send_response(output)
</snippet></ROW><ROW><id>18366639</id><snippet>ELBQuery</snippet></ROW><ROW><id>18366639</id><snippet>yield</snippet></ROW><ROW><id>18366639</id><snippet>calc_range</snippet></ROW><ROW><id>18366639</id><snippet>get_metric_statistics</snippet></ROW><ROW><id>18366639</id><snippet>asyncboto</snippet></ROW><ROW><id>18366639</id><snippet>greenlets</snippet></ROW><ROW><id>18366639</id><snippet>greenlets</snippet></ROW><ROW><id>18366639</id><snippet>gevent</snippet></ROW><ROW><id>18366639</id><snippet>gevent</snippet></ROW><ROW><id>18366639</id><snippet>gevent</snippet></ROW><ROW><id>18366725</id><snippet>delay=True</snippet></ROW><ROW><id>18366756</id><snippet>next(f)</snippet></ROW><ROW><id>18366756</id><snippet>&gt;&gt;&gt; with open('testFile.txt', 'r') as f:
        for line in f:
            if 'cat' in line:
                final_string = next(f)
</snippet></ROW><ROW><id>18366756</id><snippet>My Name is ABC.
I am a male.
My pet is a cat.
It's name is Ronald.
I hate rats.
</snippet></ROW><ROW><id>18366756</id><snippet>&gt;&gt;&gt; final_string
"It's name is Ronald.\n"
</snippet></ROW><ROW><id>18366788</id><snippet>import re
pattern = re.compile(r'\s*%s\s*' % 'USB 2 ports')
result = soup.find(text=pattern)
</snippet></ROW><ROW><id>18366788</id><snippet>&gt;&gt;&gt; soup = BeautifulSoup("""
... &lt;html&gt;
...   &lt;body&gt;
...     &lt;ul&gt;
...       &lt;li&gt;
...         USB 2 ports
...       &lt;/li&gt;
...       &lt;li&gt;
...         Firewire ports
...       &lt;/li&gt;
...       &lt;li&gt;
...         HDMI ports
...       &lt;/li&gt;
...     &lt;/ul&gt;
...   &lt;/body&gt;
... &lt;/html&gt;
... """)
&gt;&gt;&gt; import re
&gt;&gt;&gt; pattern = re.compile(r'\s*%s\s*' % 'USB 2 ports')
&gt;&gt;&gt; soup.find(text=pattern)
u'\n        USB 2 ports\n      '
</snippet></ROW><ROW><id>18366788</id><snippet>soup.find()</snippet></ROW><ROW><id>18366862</id><snippet>SelectMultipleField</snippet></ROW><ROW><id>18366862</id><snippet>form.select_multiple(class_='multiselect')</snippet></ROW><ROW><id>18366862</id><snippet>select</snippet></ROW><ROW><id>18366862</id><snippet>SelectMultipleField</snippet></ROW><ROW><id>18367035</id><snippet>script.py '*.txt'
</snippet></ROW><ROW><id>18367035</id><snippet>script.py "*.txt"
</snippet></ROW><ROW><id>18367068</id><snippet>bytearray</snippet></ROW><ROW><id>18367068</id><snippet>newFileByteArray = bytearray(newFileBytes)
newFile.write(newFileByteArray)
</snippet></ROW><ROW><id>18367068</id><snippet>bytes</snippet></ROW><ROW><id>18367068</id><snippet>bytes</snippet></ROW><ROW><id>18367068</id><snippet>str</snippet></ROW><ROW><id>18367068</id><snippet>&gt;&gt;&gt; bytearray(newFileBytes)
bytearray(b'{\x03\xff\x00d')
&gt;&gt;&gt; bytes(newFileBytes)
b'{\x03\xff\x00d'
</snippet></ROW><ROW><id>18367068</id><snippet>&gt;&gt;&gt; bytearray(newFileBytes)
bytearray(b'{\x03\xff\x00d')
&gt;&gt;&gt; bytes(newFileBytes)
'[123, 3, 255, 0, 100]'
</snippet></ROW><ROW><id>18367351</id><snippet>index_html</snippet></ROW><ROW><id>18367375</id><snippet>writeUTF</snippet></ROW><ROW><id>18367400</id><snippet>def vectores(doc1, doc2, consulta):

    thingies = doc1 + doc2 + consulta
    result = [0] * len(thingies)
    for index,value in enumerate([ item[2] for item in doc1 ]):
        result[index] = value

    return result
</snippet></ROW><ROW><id>18367400</id><snippet>print result
&gt;&gt;&gt; [ 1, 2, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0 ]
      &lt;--------------&gt;  &lt;--------------&gt;  &lt;-----&gt;
            doc1              doc2        consulta
</snippet></ROW><ROW><id>18367400</id><snippet>doc1</snippet></ROW><ROW><id>18367400</id><snippet>doc1+doc2+consulta</snippet></ROW><ROW><id>18367400</id><snippet>result</snippet></ROW><ROW><id>18367620</id><snippet>multiprocessing.Pool</snippet></ROW><ROW><id>18367620</id><snippet>multiprocessing.Pool</snippet></ROW><ROW><id>18367620</id><snippet>from concurrent.futures import ProcessPoolExecutor

def Processor(data_entry):
    return data_entry*2

def perform_distributed_processing(dbList, threads, processor_factory):
    with ProcessPoolExecutor(processes=threads) as executor:
        yield from executor.map(processor_factory, dbList)

if __name__ == '__main__':
    # Use this as a substitute for the database in the example
    dbList = [i for i in range(300)]
    for result in perform_distributed_processing(dbList, 8, Processor):
        print(result)
</snippet></ROW><ROW><id>18367620</id><snippet>def perform_distributed_processing(dbList, threads, processor_factory):
    with ProcessPoolExecutor(processes=threads) as executor:
        fs = (executor.submit(processor_factory, db) for db in dbList)
        yield from map(Future.result, as_completed(fs))
</snippet></ROW><ROW><id>18367620</id><snippet>yield</snippet></ROW><ROW><id>18367620</id><snippet>yield from</snippet></ROW><ROW><id>18367687</id><snippet>nohup.out</snippet></ROW><ROW><id>18367687</id><snippet>nohup</snippet></ROW><ROW><id>18367687</id><snippet>nohup</snippet></ROW><ROW><id>18367755</id><snippet>-</snippet></ROW><ROW><id>18367755</id><snippet>def per_section(iterable):
    row = []
    for line in iterable:
        if line.startswith('-'):
            if row:
                yield row
            row = line[1:].split() + ['']
        else:
            row[-1] += line.strip()
    if row:
        yield row
</snippet></ROW><ROW><id>18367755</id><snippet>with open(inputfile) as infile, open(outputfile, 'wb') as outfile:
    csvwriter = csv.writer(outfile)
    csvwriter.writerows(per_section(infile))
</snippet></ROW><ROW><id>18367755</id><snippet>HI5UHB101EPGLJ,rank=0000024,x=1813.0,y=437.0,length=81,ACGTAGATCGTGTAGCTGAGGATGTTGACAACCATGTGGACAGAGCCTCACCATCAACATCCTCAGCTACACGATCTGCGT
HI5UHB101BDVPE,rank=0000032,x=451.5,y=48.0,length=73,ACGTAGATCGTCTTGAGTGATTACAGATCTAATACAATGTGCAGTCTAGCTAGATGTTATTCTATATATATAC
HI5UHB101AL8KC,rank=0000049,x=136.0,y=586.0,length=58,ACGTAGATCGTCTCGGCTAGTAGACGAGCCATCGTCTACTAGCCGAGACGATCTGCGT
</snippet></ROW><ROW><id>18367882</id><snippet>c == 4000000</snippet></ROW><ROW><id>18367882</id><snippet>range(4000000)</snippet></ROW><ROW><id>18367882</id><snippet>c</snippet></ROW><ROW><id>18367972</id><snippet>e = int(filename[-6:-4])
new_filename = '%s%02d-E%02d%s' % (filename[:-6], e*2-1, e*2, filename[-4:])
</snippet></ROW><ROW><id>18367977</id><snippet>~</snippet></ROW><ROW><id>18367977</id><snippet>bash</snippet></ROW><ROW><id>18367977</id><snippet>~</snippet></ROW><ROW><id>18367977</id><snippet>expanduser</snippet></ROW><ROW><id>18367977</id><snippet>os.path</snippet></ROW><ROW><id>18367977</id><snippet>~</snippet></ROW><ROW><id>18368132</id><snippet># Not a data descriptor because it doesn't define __set__
class NonDataDescriptor(object):
    def __get__(self, obj, objtype):
        return 3

class Namespace(object):

    # Data descriptor - defines both __get__ and __set__
    @property
    def foo(self):
        return 3

    bar = NonDataDescriptor()

x = Namespace()
x.__dict__['foo'] = 4  # We bypass the foo descriptor's __set__ here,
x.bar = 4              # but there's no bar setter, so this one goes to the dict

# x now has foo and bar descriptors and __dict__ entries

print x.foo  # prints 3 - data descriptor wins over instance __dict__ entry
print x.bar  # prints 4 - instance __dict__ entry wins over non-data descriptor
</snippet></ROW><ROW><id>18368279</id><snippet>convert_objects</snippet></ROW><ROW><id>18368279</id><snippet>In [11]: df['data'].convert_objects(convert_numeric=True)
Out[11]: 
0    1.4
1    NaN
2    2.2
3    0.8
4    NaN
Name: data, dtype: float64
</snippet></ROW><ROW><id>18368279</id><snippet>In [12]: df.convert_objects(convert_numeric=True)
Out[12]: 
         data OtherAttr
MyIndex                
0         1.4       aaa
1         NaN       foo
2         2.2       bar
3         0.8       bar
4         NaN       bbb
</snippet></ROW><ROW><id>18368519</id><snippet>math</snippet></ROW><ROW><id>18368519</id><snippet>math.log</snippet></ROW><ROW><id>18368519</id><snippet>&gt;&gt;&gt; from mako.template import Template
&gt;&gt;&gt; print Template("&lt;%import math%&gt;${math.log(testvar)}").render(testvar=2)
0.69314718056
</snippet></ROW><ROW><id>18368552</id><snippet>ssh yourUserName@node1 "cat input_file_node1 | python parser.py" &gt;output_file_node1
</snippet></ROW><ROW><id>18368552</id><snippet>ssh yourUserName@node1 "python parser.py" &lt;input_file_node1 &gt;output_file_node1
</snippet></ROW><ROW><id>18368552</id><snippet>expect</snippet></ROW><ROW><id>18368552</id><snippet>expect</snippet></ROW><ROW><id>18368599</id><snippet>hdf5</snippet></ROW><ROW><id>18368599</id><snippet>import tables
import numpy as np

def store(filename, name, data):
    with tables.openFile(filename, 'w') as store:
        store.createGroup('/', name)
        for i, item in enumerate(data):
            store.createArray('/%s' % name, 'item_%s' % i, item)

def read(filename, name):
    with tables.openFile(filename, 'r') as store:
        nodes = store.listNodes('/%s' % name)
        data = [0] * len(nodes)
        for node in nodes:
            pos = int(node.name.split('_')[-1])
            data[pos] = node.read()
        return data
</snippet></ROW><ROW><id>18368599</id><snippet>&gt;&gt;&gt; a = [0, np.array([4,5,6])]
&gt;&gt;&gt; store('my_data.h5', 'a', a)
&gt;&gt;&gt; print read('my_data.h5', 'a')
[0, array([4, 5, 6])]
</snippet></ROW><ROW><id>18368599</id><snippet>hdf5</snippet></ROW><ROW><id>18368599</id><snippet>cPickle</snippet></ROW><ROW><id>18368599</id><snippet>In [7]: a = []
        for i in range(1, 500):
            if i % 10 == 0:
                a.append(i)
            else:
                a.append(np.random.randn(i, i))
In [8]: %%timeit
        store('my_data.h5', 'a', a)
        read_data = read('my_data.h5', 'a')
1 loops, best of 3: 1.32 s per loop
In [9]: %%timeit
        with open('test.pickle', 'wb') as f:
            cPickle.dump(a, f)
        with open('test.pickle', 'rb') as f:
            read_data = cPickle.load(f)
1 loops, best of 3: 1min 58s per loop
</snippet></ROW><ROW><id>18368599</id><snippet>cPickle</snippet></ROW><ROW><id>18368599</id><snippet>numpy</snippet></ROW><ROW><id>18368600</id><snippet>line1=</snippet></ROW><ROW><id>18368600</id><snippet>;</snippet></ROW><ROW><id>18368600</id><snippet>#Read page data as a string
pageData = sock.read()
#set p as regular expression
p = re.compile('(?&lt;=line1=)(.*)(?=;)')
#find all instances of regular expression in pageData
parsed = p.findall(pageData)
#evaluate list as python code =&gt; turn into list in python
newParsed = eval(parsed[0])
</snippet></ROW><ROW><id>18368600</id><snippet>#Read page data as a string
pageData = sock.read()
#set p as regular expression
p = re.compile('(?&lt;=line1=)(.*)(?=;)')
#find all instances of regular expression in pageData
parsed = p.findall(pageData)
#load as JSON instead of using evaluate to prevent risky execution of unknown code
newParsed = json.loads(parsed[0])
</snippet></ROW><ROW><id>18368660</id><snippet>from tkinter import * 
import csv

class App(Frame):
    def __init__(self, master=None):
        Frame.__init__(self, master)
        self.pack()
        self.output()

    def output(self):
        Label(text='Name:').pack(side=LEFT,padx=5,pady=5)
        self.e = Entry(root, width=10)
        self.e.pack(side=LEFT,padx=5,pady=5)

        self.b = Button(root, text='Submit', command=self.writeToFile)
        self.b.pack(side=RIGHT,padx=5,pady=5)

    def writeToFile(self):
        with open('WorkOrderLog.csv', 'a') as f:
            w=csv.writer(f, quoting=csv.QUOTE_ALL)
            w.writerow([self.e.get()])

if __name__ == "__main__":
    root=Tk()
    root.title('Auto Logger')
    root.geometry('1000x100')
    app=App(master=root)
    app.mainloop()
    root.mainloop()
</snippet></ROW><ROW><id>18368672</id><snippet>\d{1,4}( \w+){1,5}, (.*), ( \w+){1,5}, (AZ|CA|CO|NH), [0-9]{5}(-[0-9]{4})?
</snippet></ROW><ROW><id>18368672</id><snippet>( \w+){1,5}</snippet></ROW><ROW><id>18368672</id><snippet>.</snippet></ROW><ROW><id>18368672</id><snippet>,</snippet></ROW><ROW><id>18368672</id><snippet>, (.*)</snippet></ROW><ROW><id>18368672</id><snippet>(, [^,]{1,20}){0,5}</snippet></ROW><ROW><id>18368793</id><snippet>In [1]: df = DataFrame(randn(5,2),index=date_range('20130101',periods=5))

In [3]: df['date'] = Timestamp('20130102')

In [4]: df
Out[4]: 
                   0         1                date
2013-01-01  2.406932 -0.313473 2013-01-02 00:00:00
2013-01-02  0.034162 -0.708450 2013-01-02 00:00:00
2013-01-03 -1.585031  0.587243 2013-01-02 00:00:00
2013-01-04  1.454818  1.089208 2013-01-02 00:00:00
2013-01-05 -0.778016 -0.994242 2013-01-02 00:00:00

In [5]: df['td'] = df['date']-df.index.to_series()

In [6]: df
Out[6]: 
                   0         1                date                td
2013-01-01  2.406932 -0.313473 2013-01-02 00:00:00  1 days, 00:00:00
2013-01-02  0.034162 -0.708450 2013-01-02 00:00:00          00:00:00
2013-01-03 -1.585031  0.587243 2013-01-02 00:00:00 -1 days, 00:00:00
2013-01-04  1.454818  1.089208 2013-01-02 00:00:00 -2 days, 00:00:00
2013-01-05 -0.778016 -0.994242 2013-01-02 00:00:00 -3 days, 00:00:00
</snippet></ROW><ROW><id>18368992</id><snippet>id = ['1','1','1','2','2','2','3','3','3']
a  = [1,2,3,4,5,6,7,8,9]
b  = [10,11,12,13,14,15,16,17,18]
c  = [20,21,22,23,24,25,26,27,28]

from collections import defaultdict
d = defaultdict(list)

# add as many lists as needed, here n == 3
lsts = [a, b, c]

for ki, kl in zip(id, zip(*lsts)):
    d[ki] += [kl]

for k, v in d.items():
    # if you don't mind using tuples, simply do this: d[k] = zip(*v)
    d[k] = map(list, zip(*v))
</snippet></ROW><ROW><id>18368992</id><snippet>d == {'1':[[1,2,3],[10,11,12],[20,21,22]],
      '2':[[4,5,6],[13,14,15],[23,24,25]],
      '3':[[7,8,9],[16,17,18],[26,27,28]]}
=&gt; True
</snippet></ROW><ROW><id>18369016</id><snippet>a = np.zeros((3, 4))

a = [[0.0]*3 for _ in range(4)]

a = [None] * 4
for i, _ in enumerate(a):
    a[i] = [0.0]*3
</snippet></ROW><ROW><id>18369016</id><snippet>def make_matrix(r, c):
    return [[0.0]*c for _ in range(r)]
</snippet></ROW><ROW><id>18369016</id><snippet>a = make_matrix(3, 4)
</snippet></ROW><ROW><id>18369016</id><snippet>itertools</snippet></ROW><ROW><id>18369016</id><snippet>repeat</snippet></ROW><ROW><id>18369016</id><snippet>*</snippet></ROW><ROW><id>18369016</id><snippet>def repeat(obj, times):
    for _ in range(times):
        yield copy.copy(obj)

list(repeat([0.0]*3, 4))
</snippet></ROW><ROW><id>18369016</id><snippet>list(repeat(list(repeat(0.0, 3)), 4))
</snippet></ROW><ROW><id>18369016</id><snippet>def srepeat(object, times):
    return list(repeat(object, times))
srepeat(srepeat(0.0, 3), 4)
</snippet></ROW><ROW><id>18369016</id><snippet>make_matrix</snippet></ROW><ROW><id>18369054</id><snippet>from __future__ import absolute_import
</snippet></ROW><ROW><id>18369054</id><snippet>sys.path</snippet></ROW><ROW><id>18369237</id><snippet>readline</snippet></ROW><ROW><id>18369237</id><snippet># File: readline-example-2.py

class Completer:
    def __init__(self, words):
        self.words = words
        self.prefix = None
    def complete(self, prefix, index):
        if prefix != self.prefix:
            # we have a new prefix!
            # find all words that start with this prefix
            self.matching_words = [
                w for w in self.words if w.startswith(prefix)
                ]
            self.prefix = prefix
        try:
            return self.matching_words[index]
        except IndexError:
            return None

import readline

# a set of more or less interesting words
words = "perl", "pyjamas", "python", "pythagoras"

completer = Completer(words)

readline.parse_and_bind("tab: complete")
readline.set_completer(completer.complete)

# try it out!
while 1:
    print repr(raw_input("&gt;&gt;&gt; "))
</snippet></ROW><ROW><id>18369310</id><snippet>for a, b, c in itertools.product(a, b, c):
    print a, b, c
</snippet></ROW><ROW><id>18369310</id><snippet>itertools.product</snippet></ROW><ROW><id>18369310</id><snippet>def product(*args, **kwds):
    # product('ABCD', 'xy') --&gt; Ax Ay Bx By Cx Cy Dx Dy
    # product(range(2), repeat=3) --&gt; 000 001 010 011 100 101 110 111
    pools = map(tuple, args) * kwds.get('repeat', 1)
    result = [[]]
    for pool in pools:
        result = [x+[y] for x in result for y in pool]
    for prod in result:
        yield tuple(prod)
</snippet></ROW><ROW><id>18369310</id><snippet>In [1]: a = range(2)    
In [2]: b = range(2, 4)
In [3]: c = range(4, 6)
In [4]: import itertools
In [5]: list(itertools.product(a, b, c))
Out[5]: 
[(0, 2, 4),
 (0, 2, 5),
 (0, 3, 4),
 (0, 3, 5),
 (1, 2, 4),
 (1, 2, 5),
 (1, 3, 4),
 (1, 3, 5)]

In [6]: for x, y, z in itertools.product(a, b, c):
   ...:     print 'x: %d, y: %d, z: %d' % (x, y, z)
   ...: 
x: 0, y: 2, z: 4
x: 0, y: 2, z: 5
x: 0, y: 3, z: 4
x: 0, y: 3, z: 5
x: 1, y: 2, z: 4
x: 1, y: 2, z: 5
x: 1, y: 3, z: 4
x: 1, y: 3, z: 5
</snippet></ROW><ROW><id>18369413</id><snippet>pickle</snippet></ROW><ROW><id>18369425</id><snippet>java.util.concurrent</snippet></ROW><ROW><id>18369493</id><snippet>request.POST.getlist('groups_field')</snippet></ROW><ROW><id>18369557</id><snippet>&lt;Picture&gt;:
    # ...
    do_scale:False
    # ...
</snippet></ROW><ROW><id>18369557</id><snippet>from kivy.properties import BooleanProperty

class Picture(Scatter):
    # ...   
    do_scale =  BooleanProperty(False)
</snippet></ROW><ROW><id>18369589</id><snippet>int()</snippet></ROW><ROW><id>18369589</id><snippet>chosenNumber = int(input ("Choose a number: "))
</snippet></ROW><ROW><id>18369606</id><snippet>&gt;&gt;&gt; from mutagen.easyid3 import EasyID3
&gt;&gt;&gt; filePath = "8049.mp3"

&gt;&gt;&gt; try:
&gt;&gt;&gt;    meta = EasyID3(filePath)
&gt;&gt;&gt; except mutagen.id3.ID3NoHeaderError:
&gt;&gt;&gt;    meta = mutagen.File(filePath, easy=True)
&gt;&gt;&gt;    meta.add_tags()
&gt;&gt;&gt; meta
{}
&gt;&gt;&gt; type(meta)
&lt;class 'mutagen.easyid3.EasyID3'&gt;
&gt;&gt;&gt; meta['title'] = "This is a title"
&gt;&gt;&gt; meta['artist'] = "Artist Name"
&gt;&gt;&gt; meta['genre'] = "Space Funk"
&gt;&gt;&gt; meta.save()
&gt;&gt;&gt; changed = EasyID3("8049.mp3")
&gt;&gt;&gt; changed
{'genre': [u'Space Funk'], 'title': [u'This is a title'], 'artist': [u'Artist Name']}
</snippet></ROW><ROW><id>18369773</id><snippet>for textfile in findfiles(r'C:\\Top', '*.txt'):
    if not textfile.startswith(r'C:\\Top\\1'):
        filename = os.path.basename(textfile)
        print filename
</snippet></ROW><ROW><id>18369784</id><snippet>self.highlightRow = row</snippet></ROW><ROW><id>18369784</id><snippet>None</snippet></ROW><ROW><id>18369784</id><snippet>__init__</snippet></ROW><ROW><id>18369924</id><snippet>energy_trial</snippet></ROW><ROW><id>18369924</id><snippet>energy_trial[i]</snippet></ROW><ROW><id>18369924</id><snippet>if r[i] &gt; energy_trial:
</snippet></ROW><ROW><id>18369924</id><snippet>num_photon</snippet></ROW><ROW><id>18369924</id><snippet>energy_sigma</snippet></ROW><ROW><id>18369925</id><snippet>data=requests.get(url, proxies={'http':line})
</snippet></ROW><ROW><id>18369925</id><snippet>for line in urls:</snippet></ROW><ROW><id>18369925</id><snippet>for line in proxies:</snippet></ROW><ROW><id>18369925</id><snippet>line</snippet></ROW><ROW><id>18369925</id><snippet>line</snippet></ROW><ROW><id>18369925</id><snippet>proxy</snippet></ROW><ROW><id>18369925</id><snippet>{'https': '83.22.41.1:3128'}</snippet></ROW><ROW><id>18369925</id><snippet>{'http': {'https': '83.22.41.1:3128'}}</snippet></ROW><ROW><id>18369925</id><snippet>data=requests.get(url, proxies=proxy)
</snippet></ROW><ROW><id>18369925</id><snippet>if urlparse.urlparse(url).scheme not in proxy:
    continue
</snippet></ROW><ROW><id>18369939</id><snippet>column</snippet></ROW><ROW><id>18369939</id><snippet>less</snippet></ROW><ROW><id>18369939</id><snippet>import readline
import subprocess
import rlcompleter

def display_matches(substitutions, matches, longest_match_length):
    m = '\n'.join(matches) + '\n'
    proc = subprocess.Popen('column | less', shell=True, stdin=subprocess.PIPE)
    # python2:
    proc.communicate(m)
    # python3:
    # proc.communicate(m.encode('utf-8'))


readline.set_completion_display_matches_hook(display_matches)
readline.parse_and_bind('tab: complete')
</snippet></ROW><ROW><id>18370044</id><snippet>PyObject *dict, *value, *result, *fmt;
dict = PyDict_New();
if (!dict)
     return NULL;
value = PyFloat_FromDouble(54.23345);
if (!value) {
     PY_DECREF(dict);
     return NULL;
}
if (PyDict_SetItemString(dict, "Foo", value) &lt; 0) {
     Py_DECREF(value);
     Py_DECREF(dict);
     return NULL;
}
Py_DECREF(value);
fmt = PyUnicode_FromString("Foo = {Foo:.3f}");
if (!fmt) {
     Py_DECREF(dict);
     return NULL;
}
result = PyObject_CallMethodObjArgs(fmt, "format_map", dict, NULL);
Py_DECREF(fmt);
Py_DECREF(dict);
return result;
</snippet></ROW><ROW><id>18370135</id><snippet>STATIC_URL = '/static/'</snippet></ROW><ROW><id>18370135</id><snippet>
STATICFILES_DIRS = ('/var/www/my_site/my_path',)
</snippet></ROW><ROW><id>18370135</id><snippet>&lt;head&gt;
    {% load staticfiles %}
    &lt;link href="{% static "css/style.css" %}" rel="stylesheet"&gt;
&lt;/head&gt;
</snippet></ROW><ROW><id>18370135</id><snippet>my_site/static/css/style.css</snippet></ROW><ROW><id>18370135</id><snippet>/var/www/my_site/my_path/css/style.css</snippet></ROW><ROW><id>18370135</id><snippet>href=</snippet></ROW><ROW><id>18370135</id><snippet>"my_site/static/css/style.css"</snippet></ROW><ROW><id>18370135</id><snippet>STATICFILES_DIRS</snippet></ROW><ROW><id>18370135</id><snippet>/var/www/my_site/my_path/css/style.css</snippet></ROW><ROW><id>18370136</id><snippet>+</snippet></ROW><ROW><id>18370136</id><snippet>*</snippet></ROW><ROW><id>18370136</id><snippet>?</snippet></ROW><ROW><id>18370136</id><snippet>name</snippet></ROW><ROW><id>18370789</id><snippet>.is_callable()</snippet></ROW><ROW><id>18370789</id><snippet>.provides('__call__')</snippet></ROW><ROW><id>18370789</id><snippet>    fake_cline = (fudge
        .Fake('SomeCommandline')
        .is_callable()
        .returns(fake_stdio))
</snippet></ROW><ROW><id>18370789</id><snippet>.is_a_stub()</snippet></ROW><ROW><id>18370789</id><snippet>__call__</snippet></ROW><ROW><id>18370789</id><snippet>SomeCommandLine</snippet></ROW><ROW><id>18371214</id><snippet>None</snippet></ROW><ROW><id>18371214</id><snippet>def update_t(self, t=None):  
  "If nothing is passed, then the default parameter is the attribute self.t"
  if t is None:
    self.t += 1
  else:
    t += 1
</snippet></ROW><ROW><id>18371214</id><snippet>__iadd__()</snippet></ROW><ROW><id>18371254</id><snippet>Access-Control-Allow-Origin: *</snippet></ROW><ROW><id>18371466</id><snippet>#!/usr/bin/env python
import SimpleHTTPServer
import SocketServer
import subprocess
import uuid

class MyRequestHandler(SimpleHTTPServer.SimpleHTTPRequestHandler):
    def do_POST(self):
        print 'in do_POST'
        uuid_gen = str(uuid.uuid1())
        subprocess.Popen(['python', 'sleep.py'])
        print 'subprocess spawned'
        self.send_response(200)
        self.send_header("Content-Length", str(len(uuid_gen)))
        self.end_headers()
        self.wfile.write(uuid_gen)

Handler = MyRequestHandler

server = SocketServer.TCPServer(('127.0.0.1', 9019), Handler)

server.serve_forever()
</snippet></ROW><ROW><id>18371706</id><snippet>df = pd.DataFrame({'col1': list('abcdefghij'), 'col2': range(0, 50, 5)})
df['new_index'] = range(30, 20, -1)
df.set_index('new_index')
</snippet></ROW><ROW><id>18371706</id><snippet>  col1  col2  new_index
0    a     0         30
1    b     5         29
2    c    10         28
3    d    15         27
4    e    20         26
5    f    25         25
6    g    30         24
7    h    35         23
8    i    40         22
9    j    45         21
</snippet></ROW><ROW><id>18371706</id><snippet>          col1  col2
new_index           
30           a     0
29           b     5
28           c    10
27           d    15
26           e    20
25           f    25
24           g    30
23           h    35
22           i    40
21           j    45
</snippet></ROW><ROW><id>18371832</id><snippet>chained = 0
finished = 0

# home() and club() act as rooms in the game
def home():
    global chained,current_room
    if chained == 1:
        # there's a way to unchain yourself that works
        chained = 0
    if chained == 0:
        print 'your are in the room'
        input = raw_input('&gt; ')
        if 'exit' in input or 'leave' in input or 'club' in input:
            current_room = 'club'
            club()

# Not sure if finished is a local or global variable
def club():
    global finished,current_room
    print "this is messy code!!"
# These sort of move you around the rooms.
# current_room keeps track of what room you're in
    current_room = 'home'
    if finished == 0:
        if current_room == 'home':
            home()
        if current_room == 'club':
            club()
home()
</snippet></ROW><ROW><id>18371843</id><snippet>globals()</snippet></ROW><ROW><id>18371843</id><snippet>globals()['MyClass'] = class_dict['MyClass']</snippet></ROW><ROW><id>18371843</id><snippet>globals()</snippet></ROW><ROW><id>18371843</id><snippet>Class1 = class_factory('class1')
Class2 = class_factory('class2')
...
</snippet></ROW><ROW><id>18372061</id><snippet>/</snippet></ROW><ROW><id>18372061</id><snippet>./</snippet></ROW><ROW><id>18372061</id><snippet>../</snippet></ROW><ROW><id>18372061</id><snippet>http://test.com</snippet></ROW><ROW><id>18372061</id><snippet>/</snippet></ROW><ROW><id>18372061</id><snippet>http://test.com/</snippet></ROW><ROW><id>18372061</id><snippet>/test</snippet></ROW><ROW><id>18372061</id><snippet>http://test.com/test</snippet></ROW><ROW><id>18372061</id><snippet>protocol://</snippet></ROW><ROW><id>18372061</id><snippet>//</snippet></ROW><ROW><id>18372061</id><snippet>file://</snippet></ROW><ROW><id>18372061</id><snippet>file:///Users/Darrell/Pictures/...</snippet></ROW><ROW><id>18372494</id><snippet>upsert</snippet></ROW><ROW><id>18372494</id><snippet>from pymongo import MongoClient
cl = MongoClient()
coll = cl["local"]["test2"]

data = [{"_id" : 1, "foo" : "HELLO"}, {"_id" : 2, "Blah" : "Bloh"}]
for d in data:
    coll.update({'_id':d['_id']}, d, True)
</snippet></ROW><ROW><id>18372718</id><snippet>subprocess.call</snippet></ROW><ROW><id>18372718</id><snippet>timeout</snippet></ROW><ROW><id>18372718</id><snippet>*popenargs</snippet></ROW><ROW><id>18372718</id><snippet>wait</snippet></ROW><ROW><id>18372718</id><snippet>Popen</snippet></ROW><ROW><id>18372718</id><snippet>def call(*popenargs, **kwargs):
    """Run command with arguments.  Wait for command to complete, then
    return the returncode attribute.

    The arguments are the same as for the Popen constructor.  Example:

    retcode = call(["ls", "-l"])
    """
    return Popen(*popenargs, **kwargs).wait()
</snippet></ROW><ROW><id>18372718</id><snippet>def call(*popenargs, timeout=None, **kwargs):
    """Run command with arguments.  Wait for command to complete or
    timeout, then return the returncode attribute.

    The arguments are the same as for the Popen constructor.  Example:

    retcode = call(["ls", "-l"])
    """
    with Popen(*popenargs, **kwargs) as p:
        try:
            return p.wait(timeout=timeout)
        except:
            p.kill()
            p.wait()
            raise
</snippet></ROW><ROW><id>18372718</id><snippet>def call(*popenargs, **kwargs):
    """Run command with arguments.  Wait for command to complete or
    timeout, then return the returncode attribute.

    The arguments are the same as for the Popen constructor.  Example:

    retcode = call(["ls", "-l"])
    """
    timeout = kwargs.pop('timeout', None)
    p = Popen(*popenargs, **kwargs)
    try:
        return p.wait(timeout=timeout)
    except TimeoutExpired:
        p.kill()
        p.wait()
        raise
</snippet></ROW><ROW><id>18372895</id><snippet>SELECT a, b, c, d
from Table
WHERE d='D' AND e='E'
GROUP BY a
</snippet></ROW><ROW><id>18372895</id><snippet>SELECT a, min(b) as b, max(c) as c
from Table
WHERE d='D' AND e='E'
GROUP BY a
</snippet></ROW><ROW><id>18372895</id><snippet>db.&lt;your collection&gt;.aggregate([
   {$match:{"d":"D", "e":"E"}},
   {$group:{_id:"$g.a", b: { $min: "$g.b"}, c: {$max:"$g.c"}}}
])
</snippet></ROW><ROW><id>18372895</id><snippet>db.&lt;your collection&gt;.aggregate([
   {$match:{"d": "D", "e": "E"}},
   {
       $group: {
            _id: "$g.a",
            data: {$push: {"a": "$g.a", "b": "$g.b", "c": "$g.c", "d": "$d"}}
       }
   }
])
</snippet></ROW><ROW><id>18372895</id><snippet>&gt;&gt;&gt; cl = MongoClient()
&gt;&gt;&gt; coll = cl["local"]["test3"]
&gt;&gt;&gt; res = coll.aggregate([{"$match":{"d": "D", "e": "E"}},{"$group":{"_id":"$g.a", "data": {"$push":{"a":"$g.a", "b":"$g.b", "c":"$g.c", "d":"$d"}}}}])
&gt;&gt;&gt; res["result"]
[{'_id': 'A', 'data': [{'a': 'A', 'c': 'C', 'b': 'B', 'd': 'D'}, {'a': 'A', 'c': 'K', 'b': u'V', 'd': 'D'}]}]
</snippet></ROW><ROW><id>18372987</id><snippet>domain, level, url, text = ('sparkbrowser.com', 0, 'http://facebook.com/sparkbrowser', 'Facebook')
</snippet></ROW><ROW><id>18373161</id><snippet>object.translateX.set(1.5)</snippet></ROW><ROW><id>18373161</id><snippet>getattr(object, attrname[, default_value])</snippet></ROW><ROW><id>18373161</id><snippet>range(0, 5, 1)</snippet></ROW><ROW><id>18373161</id><snippet>range(5)</snippet></ROW><ROW><id>18373161</id><snippet>range(6)</snippet></ROW><ROW><id>18373161</id><snippet>attributes = ['translateX', 'translateY', 'translateZ', 
              'rotateX', 'rotateY', 'rotateZ']
for a in attributes:
    getattr(object, a).set(1.5)
</snippet></ROW><ROW><id>18373161</id><snippet>.attr()</snippet></ROW><ROW><id>18373161</id><snippet>for a in attributes:
    object.attr(a).set(1.5)
</snippet></ROW><ROW><id>18373347</id><snippet>import web

urls = (
    '/(.*)', 'hello'
)
app = web.application(urls, globals())

class hello:        
    def GET(self, name):
        if not name: 
            name = 'World'
        return 'Hello, ' + name + '!'

if __name__ == "__main__":
    app.run()
</snippet></ROW><ROW><id>18373485</id><snippet>User</snippet></ROW><ROW><id>18373485</id><snippet>Item</snippet></ROW><ROW><id>18373485</id><snippet>name</snippet></ROW><ROW><id>18373485</id><snippet>Item</snippet></ROW><ROW><id>18373485</id><snippet>it1 = Item('it1', 1, ed_user.id)
</snippet></ROW><ROW><id>18373485</id><snippet>User</snippet></ROW><ROW><id>18373485</id><snippet>it1 = Item('it1', 1)
it1.user = ed_user
</snippet></ROW><ROW><id>18373606</id><snippet>&gt;&gt;&gt; a = [2,2,2,1,1,1,1,1,1,1]    
&gt;&gt;&gt; from itertools import groupby
&gt;&gt;&gt; ["{}*{}".format(k, sum(1 for x in g)) for k, g in groupby(a)]
['2*3', '1*7']
</snippet></ROW><ROW><id>18373606</id><snippet>&gt;&gt;&gt; def rle(seq):
...     return ((k, sum(1 for x in g)) for k, g in groupby(seq))
... 
&gt;&gt;&gt; ["{}*{}".format(*x) for x in rle(a)]
['2*3', '1*7']
</snippet></ROW><ROW><id>18373792</id><snippet>&lt;div&gt;</snippet></ROW><ROW><id>18373872</id><snippet>.</snippet></ROW><ROW><id>18374156</id><snippet>ctypes</snippet></ROW><ROW><id>18374156</id><snippet>Construct</snippet></ROW><ROW><id>18374156</id><snippet>bitarray</snippet></ROW><ROW><id>18374156</id><snippet>bitstring</snippet></ROW><ROW><id>18374156</id><snippet>from ctypes import c_int32, c_uint32, Structure, Union

class _bits(Structure):
    _fields_ = [
        ("odd", c_uint32, 1),
        ("half", c_uint32, 31),
    ]

class Int(Union):
    _fields_ = [
        ("bits", _bits),
        ("number", c_uint32),
    ]


a = Int(number=12345)
a.bits.odd, a.bits.half
</snippet></ROW><ROW><id>18374156</id><snippet>&gt;&gt;&gt; a = Int(number=12345)
&gt;&gt;&gt; a.bits.odd, a.bits.half
(1L, 6172L)
</snippet></ROW><ROW><id>18374510</id><snippet>methods=["fog","ir108","dnb","overview"]
dataImage = data.image
for method in methods:
    result = getattr(dataImage ,method) # to call method to process the data
    result()  # to get the data processed
</snippet></ROW><ROW><id>18374510</id><snippet>data.image</snippet></ROW><ROW><id>18374510</id><snippet>image</snippet></ROW><ROW><id>18374510</id><snippet>getattr</snippet></ROW><ROW><id>18374632</id><snippet>&gt;&gt;&gt; L = [(14, 2, 3), (1, 14, 0), (14, 1, 1), (1, 14, 2), (2, 4, 4), (4, 11, 5), (11, -1000, 6)]
&gt;&gt;&gt; sorted(L)
[(1, 14, 0), (1, 14, 2), (2, 4, 4), (4, 11, 5), (11, -1000, 6), (14, 1, 1), (14, 2, 3)]
</snippet></ROW><ROW><id>18374632</id><snippet>(14, 2, 3)</snippet></ROW><ROW><id>18374632</id><snippet>(14, 1, 1)</snippet></ROW><ROW><id>18374632</id><snippet>list.sort()</snippet></ROW><ROW><id>18374632</id><snippet>sorted()</snippet></ROW><ROW><id>18374632</id><snippet>key</snippet></ROW><ROW><id>18374632</id><snippet>sorted(L, key=lambda t: t[::-1])
</snippet></ROW><ROW><id>18374632</id><snippet>key</snippet></ROW><ROW><id>18374632</id><snippet>[s[2] for s in sorted((key[s], None, s) for s in L)]
</snippet></ROW><ROW><id>18374632</id><snippet>t[::-1]</snippet></ROW><ROW><id>18374712</id><snippet>=</snippet></ROW><ROW><id>18374712</id><snippet>y = x</snippet></ROW><ROW><id>18374712</id><snippet>y</snippet></ROW><ROW><id>18374712</id><snippet>x</snippet></ROW><ROW><id>18374712</id><snippet>x = []          # A new list object is bound to x
y = x           # The reference bound to x is bound to y as well
x.append(None)  # None is *appended* to the list object bound to `x`
print y         # y is bound to the same list
x = 5           # x is *rebound* to a different object
print y         # y remains bound to the list
</snippet></ROW><ROW><id>18374840</id><snippet>rows, columns = os.popen('stty size', 'r').read().split()
</snippet></ROW><ROW><id>18374840</id><snippet>import os
rows, columns = os.popen('stty size', 'r').read().split()
print rows
print columns
</snippet></ROW><ROW><id>18374840</id><snippet>[root@localhost]# python test.py
44
168
</snippet></ROW><ROW><id>18374840</id><snippet>[root@localhost]# python test.py &gt; /tmp/out.log
[root@localhost]#

[root@localhost]# cat /tmp/out.log
44
168
</snippet></ROW><ROW><id>18374840</id><snippet>[root@localhost]# python test.py &gt; /tmp/out.log &amp;
[root@localhost]#

[root@localhost]# cat /tmp/out.log
44
168
</snippet></ROW><ROW><id>18374840</id><snippet>[root@localhost]# nohup python test.py &gt; /tmp/out.log &amp;
[root@localhost]#

[root@localhost]# cat /tmp/out.log
stty: standard input: Inappropriate ioctl for device
Traceback (most recent call last):
  File "test.py", line 2, in &lt;module&gt;
    rows, columns = os.popen('stty size', 'r').read().split()
ValueError: need more than 0 values to unpack
</snippet></ROW><ROW><id>18375139</id><snippet>bisect</snippet></ROW><ROW><id>18375139</id><snippet>bisect.bisect_left</snippet></ROW><ROW><id>18375139</id><snippet>list.insert()</snippet></ROW><ROW><id>18375361</id><snippet>collections.deque</snippet></ROW><ROW><id>18375361</id><snippet>maxlen</snippet></ROW><ROW><id>18375361</id><snippet>&gt;&gt;&gt; q = deque(maxlen=2)
&gt;&gt;&gt; q.extend([1, 2, 3])
&gt;&gt;&gt; q
deque([2, 3], maxlen=2)
</snippet></ROW><ROW><id>18375474</id><snippet>re.compile(r'^Pref(\w+?)(?:Value(\d+))?$')
</snippet></ROW><ROW><id>18375474</id><snippet>[\w\d_]</snippet></ROW><ROW><id>18375474</id><snippet>\w</snippet></ROW><ROW><id>18375474</id><snippet>Value\d+</snippet></ROW><ROW><id>18375474</id><snippet>\d+</snippet></ROW><ROW><id>18375474</id><snippet>"Pref(\w+)(?:Value(\d+))?"</snippet></ROW><ROW><id>18375474</id><snippet>\w+</snippet></ROW><ROW><id>18375474</id><snippet>Value\d+</snippet></ROW><ROW><id>18375474</id><snippet>\w+</snippet></ROW><ROW><id>18375474</id><snippet>\w+?</snippet></ROW><ROW><id>18375474</id><snippet>null</snippet></ROW><ROW><id>18375731</id><snippet>requests.get()
</snippet></ROW><ROW><id>18375775</id><snippet>classes_</snippet></ROW><ROW><id>18375775</id><snippet>&gt;&gt;&gt; from sklearn import svm
&gt;&gt;&gt; clt = svm.SVC()
&gt;&gt;&gt; clt.fit( [[1],[2],[3]], ["a","b","a"] )
SVC(C=1.0, cache_size=200, class_weight=None, coef0=0.0, degree=3, gamma=0.0,
  kernel='rbf', max_iter=-1, probability=False, shrinking=True, tol=0.001,
  verbose=False)
&gt;&gt;&gt; clt.classes_
array(['a', 'b'], 
      dtype='|S2')
</snippet></ROW><ROW><id>18375925</id><snippet>style</snippet></ROW><ROW><id>18375925</id><snippet>from pandas import Series, DataFrame, date_range
import matplotlib.pyplot as plt
import numpy as np

ts = Series(np.random.randn(1000), index=date_range('1/1/2000', periods=1000))
ts = ts.cumsum()

df = DataFrame(np.random.randn(1000, 4), index=ts.index, columns=list('ABCD'))
df = df.cumsum()

ax = df.plot(subplots=True, style=['r','g','b','r'], sharex=True)
plt.legend(loc='best')
plt.tight_layout()
plt.show()
</snippet></ROW><ROW><id>18375925</id><snippet>style</snippet></ROW><ROW><id>18375925</id><snippet>colors = np.array(list('bgrcmykw'))

...

ax = df.plot(subplots=True,
             style=colors[np.random.randint(0, len(colors), df.shape[1])],
             sharex=True) 
</snippet></ROW><ROW><id>18376342</id><snippet>attr == '__str__'</snippet></ROW><ROW><id>18376342</id><snippet>__str__</snippet></ROW><ROW><id>18376342</id><snippet>*args</snippet></ROW><ROW><id>18376342</id><snippet>__str__</snippet></ROW><ROW><id>18376342</id><snippet>return lambda: '[Getattr str]'
</snippet></ROW><ROW><id>18376342</id><snippet>object</snippet></ROW><ROW><id>18376342</id><snippet>__getattr__</snippet></ROW><ROW><id>18376342</id><snippet>attr == '__str__'</snippet></ROW><ROW><id>18376342</id><snippet>object</snippet></ROW><ROW><id>18376342</id><snippet>__str__</snippet></ROW><ROW><id>18376342</id><snippet>__getattr__</snippet></ROW><ROW><id>18376342</id><snippet>__getattribute__</snippet></ROW><ROW><id>18376342</id><snippet>class GetAttr(object):
    def __getattribute__(self, attr):
        print('getattr: ' + attr)
        if attr == '__str__':
            return lambda: '[Getattr str]'
        else:
            return lambda *args: None
</snippet></ROW><ROW><id>18376342</id><snippet>__str__</snippet></ROW><ROW><id>18376342</id><snippet>class GetAttr(object):
    def __getattr__(self, attr):
        print('getattr: ' + attr)
        return lambda *args: None

    def __str__(self):
        return '[Getattr str]'
</snippet></ROW><ROW><id>18376567</id><snippet>task = yacc.task()
task.id = 1000
task.msg = u"test"
ptask = yacc.task_info() 
ptask.task.id = task.id
ptask.task.msg = task.msg
</snippet></ROW><ROW><id>18376629</id><snippet>import socket

def fqdn_ip():
    return {
        'fqdn_ip': socket.gethostbyname(socket.getfqdn())
    }
</snippet></ROW><ROW><id>18376629</id><snippet>{{ grains.fqdn_ip }}
</snippet></ROW><ROW><id>18376629</id><snippet>{{ salt['dnsutil.A']('host.name.tld')[0] }}
</snippet></ROW><ROW><id>18376677</id><snippet>def solve( a ) :
    """Sudoku solver"""

    # grid solved
    if np.sum( a == 0 ) == 0 :
        print "Grid solved"
        print a
        return a

    else :

        #
        # Focus on the 1st 0
        tmp_where = np.where( a == 0 )
        i, j = tmp_where[ 0 ][ 0 ], tmp_where[ 1 ][ 0 ] 

        #
        for e in candidates( a, i, j ) :
            #
            tmp = a.copy()
            tmp[ i, j ] = e
            #
            res = solve( tmp )
            if res: #a failed path will return None, a success the solved matrix
                return res
</snippet></ROW><ROW><id>18376691</id><snippet>from __future__ import print_function</snippet></ROW><ROW><id>18376691</id><snippet>print("abc") if condition else None</snippet></ROW><ROW><id>18376691</id><snippet>condition</snippet></ROW><ROW><id>18377017</id><snippet>request.POST['text']</snippet></ROW><ROW><id>18377151</id><snippet>metavar=('OLDFILE', 'NEWFILE')</snippet></ROW><ROW><id>18377151</id><snippet>import argparse
parser = argparse.ArgumentParser()
parser.add_argument('--rename', type=str, nargs=2, help='some help',
                    metavar=('OLDFILE', 'NEWFILE'))
args = parser.parse_args()
print(args)
</snippet></ROW><ROW><id>18377151</id><snippet>test.py -h</snippet></ROW><ROW><id>18377151</id><snippet>usage: test.py [-h] [--rename OLDFILE NEWFILE]

optional arguments:
  -h, --help            show this help message and exit
  --rename OLDFILE NEWFILE
                        some help
</snippet></ROW><ROW><id>18377151</id><snippet>oldfile, newfile = args.rename
</snippet></ROW><ROW><id>18377151</id><snippet>args.rename.oldfile</snippet></ROW><ROW><id>18377151</id><snippet>import argparse
class RenameAction(argparse.Action):
    def __call__(self, parser, namespace, values, option_string=None):
        setattr(namespace, self.dest,
                argparse.Namespace(
                    **dict(zip(('oldfile', 'newfile'),
                               values))))

parser = argparse.ArgumentParser()
parser.add_argument('--rename', type=str, nargs=2, help='some help',
                    metavar=('OLDFILE', 'NEWFILE'),
                    action=RenameAction)
args = parser.parse_args()

print(args.rename.oldfile)
</snippet></ROW><ROW><id>18377213</id><snippet>import time
import threading

import numpy as np

from traits.etsconfig.etsconfig import ETSConfig
ETSConfig.toolkit = "qt4"

from enable.api import ComponentEditor
from chaco.api import ArrayPlotData, Plot

from traits.api import Event, HasTraits, Instance
from traitsui.api import View, Item

class PlotWindow(HasTraits):

    dataset = Instance(ArrayPlotData)
    plot = Instance(Plot)

    def _dataset_default(self):
        x = np.linspace(0,2*np.pi,200)
        y = np.sin(x)
        plotdata = ArrayPlotData(x=x, y=y)
        return plotdata

    def _plot_default(self):
        plot = Plot(self.dataset, padding=50, border_visible=True)
        plot.plot(('x', 'y'))
        return plot

    def update_display(self, x, y):
        print 'updating', threading.current_thread()
        self.dataset.set_data('x', x)
        self.dataset.set_data('y', y)

    traits_view = View(
        Item('plot', editor=ComponentEditor(size=(400, 400)), show_label=False)
    )

def run_collection(datamodel):
    # this is where I would start and stop my hardware,
    # but I will just call the read function myself here
    for i in range(1,10):
        x = np.linspace(0,2*np.pi,200)
        y = np.sin(x*i)
        datamodel.update_display(x, y)
        time.sleep(0.5)

def main():
    plot = PlotWindow()

    t = threading.Thread(target=run_collection, args=(plot,))
    t.start()

    # Starts the UI and the GUI mainloop
    plot.configure_traits()

    # don't call t.join() as it blocks the current thread...

if __name__ == "__main__":
    main()
</snippet></ROW><ROW><id>18377371</id><snippet>my_instance = MyModel(parent=parent_instance, **kwargs)</snippet></ROW><ROW><id>18377630</id><snippet>class PiecePoly():
    """
    A class to mimick the MATLAB struct piecewise polynomial (pp)
    """
    def __init__(self):
        form = 'pp'
        breaks = []
        coefs = []
        pieces = 0
        order = 0
        dim = 0
</snippet></ROW><ROW><id>18377630</id><snippet>def mkpp(breaks,coefs,*args):
    """
    Takes in the breaks, coefs, and optionally (d) then creates a pp from the 
    PiecePoly class and constructs the polynomial
    Returns: the constructed polynomial
    """
    if len(args)==1:
        d = np.transpose(args[0])
    else:
        d = 1
    sum=0
    try:
        #Just make sure coefs is not a 4D matrix
        for i in range(len(coefs)):
            for j in range(len(coefs[i])):
                sum = sum+len(coefs[i][j])
    except:
        #First try to count a 2D coefs array this should be the one that works
        try:
            for i in range(len(coefs)):
                sum = sum+len(coefs[i])
        #Coefs must be 1 dimensional
        except:
            sum = len(coefs)

    dlk = sum
    l = len(breaks)-1

    try:
        if len(d) &gt; 1:
            prod = 0
            for i in range(len(d)):
                prod = prod*d[i]
            dl = prod*l
        else:
            dl = d*l
    except:
        dl = d*l

    k = dlk/dl+100*(math.pow(2,-52))
    if k&lt;0:
        k = math.ceil(k)
    else:
        k = math.floor(k)

    if k&lt;=0 or (dl*k!=dlk):
        print "ERROR: MISMATCH PP AND COEF"
        return None

    pp = PiecePoly()
    pp.form = 'pp'
    pp.breaks = np.reshape(breaks,1,l+1)
    pp.coefs = np.reshape(coefs,dl,k)
    pp.order = k
    pp.dim = d

    return pp
</snippet></ROW><ROW><id>18377643</id><snippet>self</snippet></ROW><ROW><id>18377643</id><snippet>self</snippet></ROW><ROW><id>18377643</id><snippet>class SomeLibraryClass(object):
  def __init__(self, x):
      self.x = x

  def foo(self, y):
     print('Hello', self.x, y)

def my_foo(self, y):
    print ('Good buy', self.x, y)

SomeLibraryClass.foo = my_foo
</snippet></ROW><ROW><id>18377643</id><snippet>&gt;&gt;&gt; s = SomeLibraryClass(33)
&gt;&gt;&gt; s.foo(5)
Good buy 33 5
</snippet></ROW><ROW><id>18377675</id><snippet>if word[0].isupper():</snippet></ROW><ROW><id>18377675</id><snippet>word2</snippet></ROW><ROW><id>18377675</id><snippet>word2 = ''
</snippet></ROW><ROW><id>18377675</id><snippet>NameError</snippet></ROW><ROW><id>18377675</id><snippet>word2</snippet></ROW><ROW><id>18377801</id><snippet>import threading

results = []
def getter(url, dest):
   results.append(urllib.urlretreave(url, dest))

threads = []
for x in range(0,10):
    t = threading.Thread(target=getter, args=('http://test.com/file %s.png' % x,
                                              'temp/file %s.png' % x))
    t.start()
    threads.append(t)
# wait for all threads to finish
# You can continue doing whatever you want and
# join the threads when you finally need the results.
# They will fatch your urls in the background without
# blocking your main application.
map(lambda t: t.join(), threads)
</snippet></ROW><ROW><id>18377801</id><snippet>urls</snippet></ROW><ROW><id>18377801</id><snippet>dests</snippet></ROW><ROW><id>18377801</id><snippet>futures</snippet></ROW><ROW><id>18378094</id><snippet>from bs4 import BeautifulSoup
import urllib2
#url="http://mywebsite.com/"
#page=urllib2.urlopen(url)


def getdata(col):
    record = []
    for image in col.findAll('img'):
        src = image.get('src')
        record.append(src)
    for a in col.findAll('a'):
        href = a.get('href')
        record.append(href)
    if col.string:
        record.append(col.string.strip())
    return record


def extract():
    url="test.html"
    soup = BeautifulSoup(open(url).read())

    records = [] 
    tabledata = soup.find("table", {"class" : "class1"})
    for row in tabledata.findAll('tr'):
        cols = row.findAll('td')
        for col in cols:
            record = getdata(col)
            records.extend(record)
    return records

if __name__ == "__main__":
    records = extract()
    print "recorsd:", records
    for v in records:
        print v
</snippet></ROW><ROW><id>18378094</id><snippet>http://image.com/new.png
Data1
www.sample.com
Data2
Data3
</snippet></ROW><ROW><id>18378095</id><snippet>self</snippet></ROW><ROW><id>18378095</id><snippet>getCustomers</snippet></ROW><ROW><id>18378095</id><snippet>GET</snippet></ROW><ROW><id>18378095</id><snippet>self.cursor = self.cnxn.cursor()
</snippet></ROW><ROW><id>18378095</id><snippet>self.cursor.execute("""select * from customers
            """, self.job_worknumber)
</snippet></ROW><ROW><id>18378095</id><snippet>self.cursor.fetchall()</snippet></ROW><ROW><id>18378095</id><snippet>self</snippet></ROW><ROW><id>18378095</id><snippet>GET</snippet></ROW><ROW><id>18378228</id><snippet>http://www.brothersoft.com/windows/mp3_audio/midi_tools/</snippet></ROW><ROW><id>18378228</id><snippet>&lt;div class='brLeft'&gt;</snippet></ROW><ROW><id>18378228</id><snippet>http://www.brothersoft.com/windows/mp3_audio/</snippet></ROW><ROW><id>18378228</id><snippet>sAll = [div.find('a') for div in soup.findAll('div', attrs={'class':'brLeft'})]
</snippet></ROW><ROW><id>18378228</id><snippet>sAll = [div.find('a') for div in soup.findAll('div', attrs={'class':'brRight'})]
</snippet></ROW><ROW><id>18378228</id><snippet>import urllib 
from bs4 import BeautifulSoup

url = 'http://www.brothersoft.com/windows/categories.html'
pageHtml = urllib.urlopen(url).read()
soup = BeautifulSoup(pageHtml)
sAll = [div.find('a') for div in soup.findAll('div', attrs={'class':'brRight'})]
for i in sAll:
    suburl = "http://www.brothersoft.com"+i['href']    #which is a url like 'midi_tools'

    content = urllib.urlopen(suburl).read()
    anosoup = BeautifulSoup(content)
    ablock = anosoup.find('table',{'id':'courseTab'})
    for atr in ablock.findAll('tr',{'class':'border_bot '}):
        print atr.find('dt').a.string      #name
        print "http://www.brothersoft.com" + atr.find('a',{'class':'tabDownload'})['href']   #link
</snippet></ROW><ROW><id>18378414</id><snippet>from collections import Sequence, Mapping, Set
import numpy as np

def nested_equal(a, b):
    """
    Compare two objects recursively by element, handling numpy objects.

    Assumes hashable items are not mutable in a way that affects equality.
    """
    # Use __class__ instead of type() to be compatible with instances of 
    # old-style classes.
    if a.__class__ != b.__class__:
        return False

    # for types that implement their own custom strict equality checking
    seq = getattr(a, "seq", None)
    if seq and callable(seq):
        return seq(b)

    # Check equality according to type type [sic].
    if isinstance(a, basestring):
        return a == b
    if isinstance(a, np.ndarray):
        return np.all(a == b)
    if isinstance(a, Sequence):
        return all(nested_equal(x, y) for x, y in zip(a, b))
    if isinstance(a, Mapping):
        if set(a.keys()) != set(b.keys()):
            return False
        return all(nested_equal(a[k], b[k]) for k in a.keys())
    if isinstance(a, Set):
        return a == b
    return a == b
</snippet></ROW><ROW><id>18378502</id><snippet>&lt;form action="{{ url_for('serve_case',case_url=case_url,case_key=case_key)}}" method="POST"&gt;
 &lt;input type="text" placeholder="Please enter your comments here"&gt;
 &lt;input type="submit"   name="comment_text" rows="6"&gt;&lt;br /&gt;
&lt;/form&gt;
</snippet></ROW><ROW><id>18378683</id><snippet>import threading
import telnetlib
import datetime
import sys
# Global Variable Declarations
TIMEOUT = 30
USER = "Noel"
PROMPT = "Noel"


class listener(threading.Thread):
    def __init__(self, filename, ip):
        # Have to make a call to the super classes' __init__ method
        super(listener, self).__init__()
        self.f = open(filename,"a")
        try:
            self.tn = telnetlib.Telnet(ip, 23, TIMEOUT)
        except:
            print "Bad Connection"
            sys.exit(0)

    def run(self):
        # login
        e = self.tn.read_until("Login: ")
        self.tn.write(USER+"\n")
        # and password
        e = self.tn.read_until("Password: ")
        self.tn.write(PASSWORD+"\n")
        while True:
            e = self.tn.read_until(PROMPT, TIMEOUT)
            if e is not "":
                self.f.write(datetime.datetime.now().strftime("%Y-%m-%dT%H:%M:%S"))
                self.f.write(e.strip())
                self.f.flush()

            # avoid session timeout
            self.tn.write("\n")


if __name__ == "__main__":
    # Things to listen to is a dictionary of hosts and files to output
    # to, to add more things to listen to just add an extra entry into
    # the things_to_listen_to in the format: host : outputfile
    things_to_listen_to = {"localhost" :"localhost_output.txt"}
    # Thread holder is going to hold all the threads we are going to start
    thread_holder = []
    for host, file in things_to_listen_to.iteritems():
        thread_holder.append(listener(file, host))
    for thread in thread_holder:
        thread.run()
</snippet></ROW><ROW><id>18378774</id><snippet>*network NetworkX
*vertices 4
1 "multi part" 0.0 0.0 ellipse
2 single 0.0 0.0 ellipse
3 12 0.0 0.0 ellipse 
4 13 0.0 0.0 ellipse
*arcs
1 3 1.0
2 3 1.0
</snippet></ROW><ROW><id>18378776</id><snippet>classmethod</snippet></ROW><ROW><id>18378776</id><snippet>class Test(object):
    pass

@classmethod
def classfunc(cls, attr):
    print(cls, attr)

Test.cf = classfunc
</snippet></ROW><ROW><id>18378776</id><snippet>&gt;&gt;&gt; Test.cf(33)
&lt;class '__main__.Test'&gt; 33
</snippet></ROW><ROW><id>18378884</id><snippet>import re
s = 'A Dirty Shame (2004)'
pattern = r'(?P&lt;year&gt;\d{4})'
r = re.search(pattern, s)
n = int(r.group('year'))
</snippet></ROW><ROW><id>18379289</id><snippet>&gt;&gt;&gt; for a,b in list(itertools.product(st, st)):
    print "Text 1 {}".format(a)
    print "Text 2 {}".format(b)
    print "Similarity Index {}".format(difflib.SequenceMatcher(None, a,b).ratio())
    print '-'*80


Text 1 One day a man walked over the hill and saw the sun
Text 2 One day a man walked over the hill and saw the sun
Similarity Index 1.0
--------------------------------------------------------------------------------
Text 1 One day a man walked over the hill and saw the sun
Text 2 One week a woman looked over a hill and saw the sun
Similarity Index 0.831683168317
--------------------------------------------------------------------------------
Text 1 One day a man walked over the hill and saw the sun
Text 2 One day a man walked over a hill and saw the sun
Similarity Index 0.959183673469
--------------------------------------------------------------------------------
Text 1 One week a woman looked over a hill and saw the sun
Text 2 One day a man walked over the hill and saw the sun
Similarity Index 0.831683168317
--------------------------------------------------------------------------------
Text 1 One week a woman looked over a hill and saw the sun
Text 2 One week a woman looked over a hill and saw the sun
Similarity Index 1.0
--------------------------------------------------------------------------------
Text 1 One week a woman looked over a hill and saw the sun
Text 2 One day a man walked over a hill and saw the sun
Similarity Index 0.868686868687
--------------------------------------------------------------------------------
Text 1 One day a man walked over a hill and saw the sun
Text 2 One day a man walked over the hill and saw the sun
Similarity Index 0.959183673469
--------------------------------------------------------------------------------
Text 1 One day a man walked over a hill and saw the sun
Text 2 One week a woman looked over a hill and saw the sun
Similarity Index 0.868686868687
--------------------------------------------------------------------------------
Text 1 One day a man walked over a hill and saw the sun
Text 2 One day a man walked over a hill and saw the sun
Similarity Index 1.0
--------------------------------------------------------------------------------
</snippet></ROW><ROW><id>18379405</id><snippet>bulk_create</snippet></ROW><ROW><id>18379405</id><snippet>gateway</snippet></ROW><ROW><id>18379789</id><snippet>match</snippet></ROW><ROW><id>18379789</id><snippet>m = match.search(line)
</snippet></ROW><ROW><id>18379789</id><snippet>m.group()
</snippet></ROW><ROW><id>18379887</id><snippet>bool</snippet></ROW><ROW><id>18379887</id><snippet>int</snippet></ROW><ROW><id>18379887</id><snippet>True</snippet></ROW><ROW><id>18379887</id><snippet>1</snippet></ROW><ROW><id>18379887</id><snippet>False</snippet></ROW><ROW><id>18379887</id><snippet>0</snippet></ROW><ROW><id>18379887</id><snippet>bool</snippet></ROW><ROW><id>18379887</id><snippet>&amp;</snippet></ROW><ROW><id>18379887</id><snippet>|</snippet></ROW><ROW><id>18379887</id><snippet>^</snippet></ROW><ROW><id>18379887</id><snippet>Objects/boolobject.c</snippet></ROW><ROW><id>18379887</id><snippet>int</snippet></ROW><ROW><id>18379887</id><snippet>int</snippet></ROW><ROW><id>18379887</id><snippet>&lt;&lt;</snippet></ROW><ROW><id>18379887</id><snippet>&gt;&gt;</snippet></ROW><ROW><id>18379887</id><snippet>True &lt;&lt; True</snippet></ROW><ROW><id>18379887</id><snippet>1 &lt;&lt; 1</snippet></ROW><ROW><id>18379887</id><snippet>1 * 2 == 2</snippet></ROW><ROW><id>18379887</id><snippet>False &gt;&gt; False</snippet></ROW><ROW><id>18379887</id><snippet>0 &gt;&gt; 0</snippet></ROW><ROW><id>18379887</id><snippet>0 * 1 == 0</snippet></ROW><ROW><id>18379887</id><snippet>True</snippet></ROW><ROW><id>18379887</id><snippet>False</snippet></ROW><ROW><id>18379887</id><snippet>1</snippet></ROW><ROW><id>18379887</id><snippet>0</snippet></ROW><ROW><id>18379887</id><snippet>&amp;</snippet></ROW><ROW><id>18379887</id><snippet>|</snippet></ROW><ROW><id>18379887</id><snippet>^</snippet></ROW><ROW><id>18380244</id><snippet>import sys
import traceback

def a():
    try:
        return b();
    except:
        _, _, tb = sys.exc_info()
        print traceback.format_list(traceback.extract_tb(tb)[-1:])[-1]
</snippet></ROW><ROW><id>18380244</id><snippet>import sys
import traceback

def a():
    try:
        return b();
    except:
        _, _, tb = sys.exc_info()
        filename, lineno, funname, line = traceback.extract_tb(tb)[-1]
        print '{}:{}, in {}\n    {}'.format(filename, lineno, funname, line)
</snippet></ROW><ROW><id>18380244</id><snippet>sys.exc_info()</snippet></ROW><ROW><id>18380244</id><snippet>traceback.extract_tb(traceback[, limit])</snippet></ROW><ROW><id>18380244</id><snippet>traceback.format_list(list)</snippet></ROW><ROW><id>18380524</id><snippet>bowlingspeedcalc</snippet></ROW><ROW><id>18380524</id><snippet>bowlingspeedcalc</snippet></ROW><ROW><id>18380524</id><snippet>mEntry</snippet></ROW><ROW><id>18380524</id><snippet>mEntry</snippet></ROW><ROW><id>18380524</id><snippet>get</snippet></ROW><ROW><id>18380544</id><snippet>&gt;&gt;&gt; import numpy as np
&gt;&gt;&gt; a = np.array([1,2,3,4,5])
&gt;&gt;&gt; b = np.array([1,2,3,4,5])
&gt;&gt;&gt; a + b
array([ 2,  4,  6,  8, 10])
&gt;&gt;&gt; a &gt; 3
array([False, False, False,  True,  True], dtype=bool)
</snippet></ROW><ROW><id>18380679</id><snippet>class Game(object):
    def __init__(self):
        self.count = 4
        self.current_player = 0

    def next_turn(self):
        self.current_player += 1
        self.current_player %= self.count
</snippet></ROW><ROW><id>18381144</id><snippet># PART I - read and analyze the lines
Wappresults = open('C:\Users\Ziad\Desktop\Combination\WhatsappResult.txt', 'r')
Mikrofull = open('C:\Users\Ziad\Desktop\Combination\MikrofullCombMaj.txt', 'r')

Wapp = map(lambda x: x.strip().split(), Wappresults.readlines())
Mikro = map(lambda x: x.strip().split('\t'), Mikrofull.readlines())

Wappresults.close()
Mikrofull.close()

# PART II - filter using some logic
filtred = []

for w in Wapp:
    res = w[:] # So as to copy the list instead of point to it
    for m in Mikro:
        if m[0].lower() == w[0]:
            res.append(m[1])
            if len(m) &gt;= 3 : 
                res.append(m[2])

        string = '\t'.join(res)+'\n' # this happens regardles of whether the 'if' statement changed 'res' or not
        if string not in filtred:
            filtred.append(string)


# PART III - write the filtered results into a file
combination = open('C:\Users\Ziad\Desktop\Combination\combination.txt','w')
for comb in filtred:
    combination.write(comb)
combination.close()
</snippet></ROW><ROW><id>18381196</id><snippet>ldd</snippet></ROW><ROW><id>18381196</id><snippet>libshiboken-python2.7.so.1.2</snippet></ROW><ROW><id>18381196</id><snippet>/usr/local/lib/python2.7/dist-packages/PySide</snippet></ROW><ROW><id>18381196</id><snippet>/etc/ld.so.conf.d/pyside.conf</snippet></ROW><ROW><id>18381196</id><snippet>/usr/local/lib/python2.7/dist-packages/PySide
</snippet></ROW><ROW><id>18381196</id><snippet>ldconfig</snippet></ROW><ROW><id>18381196</id><snippet>/usr/local/lib</snippet></ROW><ROW><id>18381196</id><snippet>ldconfig</snippet></ROW><ROW><id>18381196</id><snippet>LD_LIBRARY_PATH=/usr/local/lib/python2.7/dist-packages/PySide</snippet></ROW><ROW><id>18381282</id><snippet>&lt;!--#include file="myfile.html"--&gt;</snippet></ROW><ROW><id>18381282</id><snippet>#!/usr/bin/bash

search=${1:-./}

replace() {
  while read -r x; do
    if [[ "$x" =~ \&lt;!--#include\ file=\"([^\.]+.html)\"--\&gt; ]]; then
      cat "${BASH_REMATCH[1]}";
    else
      echo "$x"
    fi
  done &lt;"$1"
}

while read f; do
  replace "$f" &gt; tmp_$$.tmp &amp;&amp; mv tmp_$$.tmp "$f"
done &lt; &lt;(find $search  -maxdepth 1 -name '*.html')
</snippet></ROW><ROW><id>18381282</id><snippet>*.html</snippet></ROW><ROW><id>18381282</id><snippet>replace</snippet></ROW><ROW><id>18381282</id><snippet>Replace</snippet></ROW><ROW><id>18381282</id><snippet>cat &gt;master.html &lt;&lt;XXX
&lt;html&gt;
&lt;!--#include file="myfile.html"--&gt;
&lt;/html&gt;
XXX

cat &gt;myfile.html &lt;&lt;XXX
&lt;title&gt;
My file
&lt;/title&gt;
XXX
</snippet></ROW><ROW><id>18381282</id><snippet>$ cat master.html
&lt;html&gt;
&lt;title&gt;
My file
&lt;/title&gt;
&lt;/html&gt;
$ cat myfile.html
&lt;title&gt;
My file
&lt;/title&gt;
</snippet></ROW><ROW><id>18381326</id><snippet>all</snippet></ROW><ROW><id>18381326</id><snippet>for row in data:
    if all(row[key] == value for key, value in indexdict.items()):
        print row
</snippet></ROW><ROW><id>18381524</id><snippet>fp1 = open("1.txt", "r") 
fp2 = open("2.txt", "w")

while True:
    line = fp1.read(4).strip()  if not line: # end of file checking          break
    # filling remaining byte with zero having len &lt; 4
    data = line.zfill(4)[::-1]
    print "Writting to file2 :: ", data
    fp2.write(line)
fp1.close() 
fp2.close()
</snippet></ROW><ROW><id>18381760</id><snippet>"""
Script for building the example.

Usage:
    python setup.py py2app
"""

from setuptools import setup

setup(
    app=['notebook_tracker.pyw'],
    setup_requires=["py2app"],
)
</snippet></ROW><ROW><id>18381963</id><snippet>In [11]: df.groupby('id').apply(lambda x: list(set(x['colours'])))
Out[11]: 
id
21627    [blue, purple, green, red]
21628          [green, red, yellow]
21629                         [red]
dtype: object

In [12]: df.groupby('id').apply(lambda x: list(x['colours']))
Out[12]: 
id
21627    [red, green, red, blue, purple]
21628               [yellow, red, green]
21629                         [red, red]
dtype: object
</snippet></ROW><ROW><id>18381963</id><snippet>In [21]: df.pivot_table(rows='id', cols='colours', aggfunc=len, fill_value=0)
Out[21]: 
colours  blue  green  purple  red  yellow
id                                       
21627       1      1       1    2       0
21628       0      1       0    1       1
21629       0      0       0    2       0
</snippet></ROW><ROW><id>18381963</id><snippet>get_dummies</snippet></ROW><ROW><id>18381963</id><snippet>In [22]: pd.get_dummies(df.set_index('id')['colours']).reset_index().groupby('id').sum()
Out[22]: 
       blue  green  purple  red  yellow
id                                     
21627     1      1       1    2       0
21628     0      1       0    1       1
21629     0      0       0    2       0
</snippet></ROW><ROW><id>18382048</id><snippet>#============================================================================
# What python are we going to try?
#============================================================================
my @pythons;
my $sep = $^O eq 'MSWin32' ? ";" : ":";
for $p (split /$sep/, $ENV{PATH}) {
    $p =~ s/^~/$ENV{HOME}/;
    $p .= "/python";
    push @pythons, { path =&gt; $p } if -f $p &amp;&amp; -x $p;
}

# Keep them in PATH order.
#@pythons = sort { $a-&gt;{path} cmp $b-&gt;{path} } @pythons;

my $num = 1;
print "Found these python executables on your PATH:\n";
print $num++ . ". " . $_-&gt;{path} . "\n" for @pythons;

my $sel = prompt("Use which?", '1');
$sel = $pythons[$sel-1] if $sel =~ /^\d+$/;
$sel = { path =&gt; $sel } unless ref $sel eq 'HASH';

print "Using $sel-&gt;{path}\n";
</snippet></ROW><ROW><id>18382197</id><snippet>try-except</snippet></ROW><ROW><id>18382197</id><snippet>ip_file.write(", " + new_line[12])
try:
    ip_file.write(", " + new_line[14] + "\n")
except IndexError:
    pass
</snippet></ROW><ROW><id>18382197</id><snippet>if new_line[14] is None</snippet></ROW><ROW><id>18382197</id><snippet>if not new_line[14]</snippet></ROW><ROW><id>18382197</id><snippet>IndexError</snippet></ROW><ROW><id>18382197</id><snippet>undefined</snippet></ROW><ROW><id>18382565</id><snippet>from progressBar import progressBar
from time import sleep
import sys

progress = progressBar(color='green',width=30)

for i in range(21):
    p=int(i/21.0)*100.
    message="Finished with %s percent"%(p)
    progress.render(p,message)
    sleep(0.25)
</snippet></ROW><ROW><id>18382582</id><snippet>sort</snippet></ROW><ROW><id>18382582</id><snippet>a</snippet></ROW><ROW><id>18382582</id><snippet>b</snippet></ROW><ROW><id>18382582</id><snippet>c</snippet></ROW><ROW><id>18382582</id><snippet>a</snippet></ROW><ROW><id>18382582</id><snippet>x y</snippet></ROW><ROW><id>18382582</id><snippet>x</snippet></ROW><ROW><id>18382582</id><snippet>x</snippet></ROW><ROW><id>18382582</id><snippet>y</snippet></ROW><ROW><id>18382582</id><snippet>x</snippet></ROW><ROW><id>18382582</id><snippet>b</snippet></ROW><ROW><id>18382582</id><snippet>c</snippet></ROW><ROW><id>18382582</id><snippet>c</snippet></ROW><ROW><id>18382582</id><snippet>a</snippet></ROW><ROW><id>18382582</id><snippet>a</snippet></ROW><ROW><id>18382582</id><snippet>d</snippet></ROW><ROW><id>18382582</id><snippet>d</snippet></ROW><ROW><id>18382582</id><snippet>d</snippet></ROW><ROW><id>18382582</id><snippet>b</snippet></ROW><ROW><id>18382582</id><snippet>e</snippet></ROW><ROW><id>18382582</id><snippet>e</snippet></ROW><ROW><id>18382582</id><snippet>a</snippet></ROW><ROW><id>18382582</id><snippet>b</snippet></ROW><ROW><id>18382582</id><snippet>e</snippet></ROW><ROW><id>18382582</id><snippet>a</snippet></ROW><ROW><id>18382582</id><snippet>e</snippet></ROW><ROW><id>18382582</id><snippet>a</snippet></ROW><ROW><id>18382582</id><snippet>f</snippet></ROW><ROW><id>18382582</id><snippet>b</snippet></ROW><ROW><id>18382582</id><snippet>g</snippet></ROW><ROW><id>18382582</id><snippet>f</snippet></ROW><ROW><id>18382582</id><snippet>g</snippet></ROW><ROW><id>18382582</id><snippet>f</snippet></ROW><ROW><id>18382731</id><snippet> pd.read_csv('%d.csv' % i)
</snippet></ROW><ROW><id>18382731</id><snippet>format</snippet></ROW><ROW><id>18382731</id><snippet> pd.read_csv('{0}.csv'.format(i))
</snippet></ROW><ROW><id>18382810</id><snippet>aggfunc</snippet></ROW><ROW><id>18382810</id><snippet>TypeError: 'numpy.float64' object is not callable
</snippet></ROW><ROW><id>18382810</id><snippet>aggfunc=lambda x: np.average(x['snittpris'], weights=x['Antal_forsandelser'])
</snippet></ROW><ROW><id>18382810</id><snippet>aggfunc</snippet></ROW><ROW><id>18382810</id><snippet>rows = ['Konskund_MEAB','ProdID']
cols = ['Year']
g = df.groupby(rows + columns)
</snippet></ROW><ROW><id>18382810</id><snippet>unstack</snippet></ROW><ROW><id>18382810</id><snippet>s_av = g.apply(lambda x: np.average(x['snittpris'], weights=x['Antal_forsandelser']))
df_av = s_av.unstack(cols)
</snippet></ROW><ROW><id>18382912</id><snippet>$("id_granularity")</snippet></ROW><ROW><id>18382912</id><snippet>$("#id_granularity")</snippet></ROW><ROW><id>18383180</id><snippet>    context= {"form": form, "user": request.user}
    return render(request, template,context)
</snippet></ROW><ROW><id>18383180</id><snippet>{{ user.username }}</snippet></ROW><ROW><id>18383223</id><snippet>&gt;&gt;&gt; Decimal('0.00').normalize()
Decimal('0')
&gt;&gt;&gt; Decimal('0.50').normalize()
Decimal('0.5')
</snippet></ROW><ROW><id>18383565</id><snippet>objs = [
    Message(
        recipient_number=e.mobile,
        content=batch.content,
        sender=e.contact_owner,
        billee=batch.user,
        sender_name=batch.sender_name
    )
    for e in q
]
msg = Message.objects.bulk_create(objs)
</snippet></ROW><ROW><id>18383597</id><snippet>for item in (i for i in my_list if i not in other_list):
    print item
</snippet></ROW><ROW><id>18383731</id><snippet>strptime</snippet></ROW><ROW><id>18383731</id><snippet>replace</snippet></ROW><ROW><id>18383731</id><snippet>calendar.timegm</snippet></ROW><ROW><id>18383731</id><snippet>&gt;&gt;&gt; from datetime import datetime
&gt;&gt;&gt; import calendar
&gt;&gt;&gt; dt = datetime.strptime("02:31:33 PM", "%I:%M:%S %p")
&gt;&gt;&gt; dt_now = datetime.now()
&gt;&gt;&gt; dt = dt.replace(year=dt_now.year, month=dt_now.month, day=dt_now.day)
&gt;&gt;&gt; calendar.timegm(dt.utctimetuple())
1377138693
</snippet></ROW><ROW><id>18384099</id><snippet>selenium</snippet></ROW><ROW><id>18384099</id><snippet>import selenium.webdriver as webdriver

url = "http://www.youtube.com/watch?v=OuSdU8tbcHY"

driver = webdriver.Firefox()
driver.get(url)

embed = driver.find_elements_by_tag_name('embed')[0]

print embed
</snippet></ROW><ROW><id>18384149</id><snippet>        for line in open("data.txt"):
            new_line = line.rstrip().split()
                                    ^^^^^^^^^
            if "blocked" in new_line:
                if "src="+ip.strip() in new_line:
                    #write columns to new text file
                    ip_file.write(", " + new_line[11])
                    ip_file.write(", " + new_line[12])
                    try:
                        ip_file.write(", " + new_line[14])
            #                                                      ^^^^
                    except IndexError:
                        pass
                    ip_file.write("\n")
            #           
</snippet></ROW><ROW><id>18384149</id><snippet>new_line[14]</snippet></ROW><ROW><id>18384215</id><snippet>import sys
from PyQt4 import QtGui, QtCore

class Example(QtGui.QMainWindow):
    def __init__(self):
        super(Example, self).__init__()
        # Create a button and set it as a central widget
        self.button = QtGui.QPushButton('My Button', self)
        self.setCentralWidget(self.button)
        # Start the thread
        self.worker = WorkThread(self)
        self.worker.start()
        # Connect the thread's signal "change_text" to
        # "self.change_thread" function
        self.worker.change_text.connect(self.change_text)

    def change_text(self):
        # Slots are always executed in the GUI thread so it's safe to change
        # anything you want in a slot function. Here we just flip the button
        # text from foo to bar and back. But you can change the image or do
        # whatever you want.
        # Slots can also receive parameters so you can emit from your thread
        # which text should be set
        self.button.setText('bar' if self.button.text() == 'foo' else 'foo')


class WorkThread(QtCore.QThread):
    # Define the signal
    change_text = QtCore.pyqtSignal()

    def __init__(self, layout):
        QtCore.QThread.__init__(self)

    def run(self):
        while True:
            # emit the signal every 3 seconds
            self.sleep(3)
            self.change_text.emit()


app = QtGui.QApplication(sys.argv)
ex = Example()
ex.show()
sys.exit(app.exec_())
</snippet></ROW><ROW><id>18384267</id><snippet>c.create_text(xcor1, ycor1,fill='grey')
</snippet></ROW><ROW><id>18384267</id><snippet>text</snippet></ROW><ROW><id>18384267</id><snippet>for i in countries:
    (xcor1, ycor1) = starcoords[i][1]
    c.create_text(xcor1, ycor1,fill='grey', text=i) 
    #...assuming `i` is a string containing the name of the country
</snippet></ROW><ROW><id>18384274</id><snippet>setattr</snippet></ROW><ROW><id>18384525</id><snippet>rope</snippet></ROW><ROW><id>18384525</id><snippet>rope</snippet></ROW><ROW><id>18384525</id><snippet>spyder-2.2.3.win-amd64.exe</snippet></ROW><ROW><id>18384540</id><snippet>for x in range(5):
    c = Cache(x)
    s = S(x)
</snippet></ROW><ROW><id>18384629</id><snippet>sorted(data.values(), key=itemgetter(name))
</snippet></ROW><ROW><id>18384629</id><snippet>&gt;&gt;&gt; from operator import itemgetter
&gt;&gt;&gt; data = {}
&gt;&gt;&gt; name = 'name'
&gt;&gt;&gt; 
&gt;&gt;&gt; data[1] = {name: "Bob"}
&gt;&gt;&gt; data[2] = {name: "Carl"}
&gt;&gt;&gt; data[3] = {name: "Alice"}
&gt;&gt;&gt;
&gt;&gt;&gt; sorted(data.values(), key=itemgetter(name))
[{'name': 'Alice'}, {'name': 'Bob'}, {'name': 'Carl'}]
</snippet></ROW><ROW><id>18384688</id><snippet>import unittest

class BaseTest(unittest.TestCase):
    def initialisation_script_stuff(blah,etc):
        foo

    def setUp(self):
        common_setup_stuff()

    def tearDown(self):
        whatever
</snippet></ROW><ROW><id>18384688</id><snippet>from moo import BaseTest

class CoolTest(BaseTest):
    def setUp(self):
        BaseTest.setUp(self)
        args = BaseTest.initialisation_script_stuff()
        do_stuff(args)

    def testNumberOne(self):
        self.assertEqual(1,1)
</snippet></ROW><ROW><id>18384688</id><snippet>all_tests\
    __init__.py
    some_tests\
        __init__.py
        test1.py
        test2.py
    other _tests\
        __init__.py
        etc
</snippet></ROW><ROW><id>18384688</id><snippet>run</snippet></ROW><ROW><id>18384688</id><snippet>def run_tests():
    import os
    import importlib
    import re
    dTests = {}
    lFolders = [s for s in os.listdir('all_tests') if re.match('.*_tests$',s)]
    for sFolder in lFolders:
        sFolderPath = os.path.join('all_tests',sFolder)
        lTestFileNames = [s for s in os.listdir(sFolderPath) if re.match('^test.*py$',s)]
        for sFileName in lTestFileNames:        
            sSubPath = '{0}.{1}'.format(sFolder,sFileName.split('.')[0])
            dTests[sSubPath] = importlib.import_module('all_tests.{0}'.format(sSubPath))
    #now you have all the tests...
    for k in dTests:
        stuff = initialisation_stuff()
        test_result = dTests[k].run(stuff)
        do_whatever_you_want(test_result)             

if __name__ == "__main__":
    run_tests()
</snippet></ROW><ROW><id>18384794</id><snippet>buffer = leyendo.read()</snippet></ROW><ROW><id>18384794</id><snippet>buffer</snippet></ROW><ROW><id>18384794</id><snippet>leyendo</snippet></ROW><ROW><id>18384794</id><snippet>if user.name in buffer:</snippet></ROW><ROW><id>18385345</id><snippet>&gt;&gt;&gt; import msgpack
&gt;&gt;&gt; x=msgpack.dumps({1:'aaa',2:'bbb'})
&gt;&gt;&gt; x
'\x82\x01\xa3aaa\x02\xa3bbb'
&gt;&gt;&gt; len(x)
11
&gt;&gt;&gt; print msgpack.loads(x)
{1: 'aaa', 2: 'bbb'}
&gt;&gt;&gt; 
</snippet></ROW><ROW><id>18385485</id><snippet>from django.db import connections

conn = connections['twittertest']
# This is required to populate the connection object properly
if conn.connection is None:
    cursor = conn.cursor()        

cursor = conn.connection.cursor(name='gigantic_cursor')
cursor.execute("SELECT * from twitter_tweet")

for tweet in cursor:
    #profit
</snippet></ROW><ROW><id>18385574</id><snippet>from math import sqrt
# elsewhere
sqrt(n)
</snippet></ROW><ROW><id>18385574</id><snippet>from math import *
</snippet></ROW><ROW><id>18385574</id><snippet>math.sqrt</snippet></ROW><ROW><id>18385574</id><snippet>import math
# elsewhere
math.sqrt(n)
</snippet></ROW><ROW><id>18385679</id><snippet>try:
    print data[1]['i']['a']
except KeyError:
    print "Not found!"
</snippet></ROW><ROW><id>18385735</id><snippet>try:
    package_info = __import__('app') #app.py
except SyntaxError, e:
    print traceback.extract_tb(sys.exc_info()[-1])
    print traceback.tb_lineno(sys.exc_info()[-1])
    print e.filename
</snippet></ROW><ROW><id>18385763</id><snippet>import matplotlib.pyplot as plt
import cartopy.crs as ccrs

ax = plt.axes(projection=ccrs.PlateCarree())
ax.set_global()
ax.coastlines()

# Define a transformation which takes latitude and longitude values,
# and returns pixel coordinates.
ll_to_pixel = ccrs.Geodetic()._as_mpl_transform(ax)

# We need to call draw to ensure that the axes location has been defined
# fully. 
plt.draw()

# Now lets figure out the pixel coordinate of Sydney.
x_pix, y_pix = ll_to_pixel.transform_point([151.2111, -33.8600])

# We can even plot these pixel coordinates directly with matplotlib.
plt.plot(x_pix, y_pix, 'ob', markersize=25, transform=None)

plt.savefig('figure_1.png', dpi=plt.gcf().get_dpi())
plt.show()
</snippet></ROW><ROW><id>18385792</id><snippet>with open('input.dat') as handle:
    data = asarray([[x == 'T' for x in line.strip().split()]
                    for line in handle],
                   dtype=bool)
</snippet></ROW><ROW><id>18385792</id><snippet>'T'</snippet></ROW><ROW><id>18385792</id><snippet>True</snippet></ROW><ROW><id>18385792</id><snippet>bool('T') == bool('F') == bool('0') == bool('1') == True</snippet></ROW><ROW><id>18386267</id><snippet>|safe</snippet></ROW><ROW><id>18386267</id><snippet>return HttpResponse(safe(escape(ret_html)))
</snippet></ROW><ROW><id>18386267</id><snippet>render</snippet></ROW><ROW><id>18386267</id><snippet>render_to_response</snippet></ROW><ROW><id>18386301</id><snippet>import pdb; pdb.set_trace(); pdb.set_trace = lambda: 0
</snippet></ROW><ROW><id>18386301</id><snippet>reload(pdb)</snippet></ROW><ROW><id>18386301</id><snippet>pdb.set_trace</snippet></ROW><ROW><id>18386301</id><snippet>imp.reload(pdb)</snippet></ROW><ROW><id>18386311</id><snippet>import matplotlib.pyplot as plt
plt.plot([0,1],[0,1],ls="--",c="b")
plt.fill_between([0,1],[0,1], color="none", hatch="X", edgecolor="b", linewidth=0.0)
plt.show()
</snippet></ROW><ROW><id>18386383</id><snippet>$ sudo port install memcached 
</snippet></ROW><ROW><id>18386383</id><snippet>$ memcached -vv
</snippet></ROW><ROW><id>18386417</id><snippet>__import__</snippet></ROW><ROW><id>18386417</id><snippet>fromlist</snippet></ROW><ROW><id>18386417</id><snippet>__import__('foo.bar', fromlist=['foo']).__dict__['baz_handler']()
</snippet></ROW><ROW><id>18386417</id><snippet>foo.bar.baz_handler()</snippet></ROW><ROW><id>18386458</id><snippet>def lowerString(string):
  result = ""
  for i in string:
     # i is a character in the string
     result = result + lowerChar(i)
  # This shouldn't be under the for loop
  return result
</snippet></ROW><ROW><id>18386496</id><snippet>scipy.ndimage.interpolate.zoom</snippet></ROW><ROW><id>18386496</id><snippet>"""
zoom : float or sequence, optional
    The zoom factor along the axes. If a float, `zoom` is the same for each
    axis. If a sequence, `zoom` should contain one value for each axis.
"""
</snippet></ROW><ROW><id>18386496</id><snippet>zoom</snippet></ROW><ROW><id>18386496</id><snippet>whole</snippet></ROW><ROW><id>18386496</id><snippet>flash</snippet></ROW><ROW><id>18386496</id><snippet> dsfactor = [w/float(f) for w,f in zip(whole.shape, flash.shape)]
 downed = nd.interpolation.zoom(flash, zoom=dsfactor)
</snippet></ROW><ROW><id>18386551</id><snippet>file_One.a</snippet></ROW><ROW><id>18386551</id><snippet>some_somefunction</snippet></ROW><ROW><id>18386551</id><snippet>from file_One import a</snippet></ROW><ROW><id>18386596</id><snippet>__new__</snippet></ROW><ROW><id>18386596</id><snippet>None</snippet></ROW><ROW><id>18386596</id><snippet>cls._instance</snippet></ROW><ROW><id>18386596</id><snippet>cls._instance</snippet></ROW><ROW><id>18386596</id><snippet>Cache</snippet></ROW><ROW><id>18386650</id><snippet>cv2.cornerSubPix</snippet></ROW><ROW><id>18386650</id><snippet>cv2.cornerSubPix(image, corners, winSize, zeroZone, criteria) → None
</snippet></ROW><ROW><id>18386726</id><snippet>with multiprocessing.Lock():
    ...
</snippet></ROW><ROW><id>18386914</id><snippet>run 1   run 2       mean

1 2 3   1 3 2    1  2.5 2.5
4 5 6   5 4 6   4.5 4.5  6
7 8 9   7 8 9    7   8   9
</snippet></ROW><ROW><id>18386914</id><snippet>data_1 = np.loadtxt(fold + "/" +  "clients_1.txt")
data_2 = np.loadtxt(fold + "/" +  "clients_2.txt")
data_3 = np.loadtxt(fold + "/" +  "clients_3.txt")

data = np.array([data_1, data_2, data_3])
data_avg = data.mean(axis=0)
data_err = data.std(axis=0)
plt.plot(data_avg[:,19], data_avg[:,7], label='Test Plot')
</snippet></ROW><ROW><id>18386995</id><snippet>class StateOptionForm(forms.ModelForm):
    option_choices = forms.ModelMultipleChoiceField(queryset=Option.objects.all(), required=False, widget=forms.CheckboxSelectMultiple)

to class StateOptionForm(forms.ModelForm):
    relevantoption = forms.ModelMultipleChoiceField(queryset=Option.objects.all(), required=False, widget=forms.CheckboxSelectMultiple)
</snippet></ROW><ROW><id>18387187</id><snippet>   418 def retrlines(self, cmd, callback = None):
   419     """Retrieve data in line mode.  A new port is created for you.
   420 
   421     Args:
   422       cmd: A RETR, LIST, NLST, or MLSD command.
   423       callback: An optional single parameter callable that is called
   424                 for each line with the trailing CRLF stripped.
   425                 [default: print_line()]
   426 
   427     Returns:
   428       The response code.
   429     """
   430     if callback is None: callback = print_line
   431     resp = self.sendcmd('TYPE A')
   432     conn = self.transfercmd(cmd)
   433     fp = conn.makefile('rb')
   434     while 1:
   435         line = fp.readline()
   436         if self.debugging &gt; 2: print '*retr*', repr(line)
   437         if not line:
   438             break
   439         if line[-2:] == CRLF:
   440             line = line[:-2]
   441         elif line[-1:] == '\n':
   442             line = line[:-1]
   443         callback(line)
   444     fp.close()
   445     conn.close()
   446     return self.voidresp()
</snippet></ROW><ROW><id>18387187</id><snippet>retrlines()</snippet></ROW><ROW><id>18387187</id><snippet>stdout</snippet></ROW><ROW><id>18387187</id><snippet>callback</snippet></ROW><ROW><id>18387187</id><snippet>print_line()</snippet></ROW><ROW><id>18387187</id><snippet>   859 def print_line(line):
   860     '''Default retrlines callback to print a line.'''
   861     print line
</snippet></ROW><ROW><id>18387187</id><snippet>callback()</snippet></ROW><ROW><id>18387187</id><snippet>retrlines()</snippet></ROW><ROW><id>18387187</id><snippet>retrlines()</snippet></ROW><ROW><id>18387187</id><snippet>callback</snippet></ROW><ROW><id>18387187</id><snippet>ftp.retrlines('LIST', callback=lambda x: pass)
</snippet></ROW><ROW><id>18387321</id><snippet>-----------------------------135438447855682763402193870
Content-Disposition: form-data; name="foo"; filename=""
Content-Type: application/octet-stream 

-----------------------------135438447855682763402193870--
</snippet></ROW><ROW><id>18387321</id><snippet>filename</snippet></ROW><ROW><id>18387475</id><snippet>import re
def equal_letters(x, y):
     return re.sub(r'\W+', '', x) == re.sub(r'\W+', '', y)

&gt;&gt;&gt; equal_letters("Ultramagnetic MC's", "Ultramagnetic MC’s")
True
&gt;&gt;&gt; equal_letters("Ultramagnetic MC's", "Ultramagnetic Foo")
False
</snippet></ROW><ROW><id>18387553</id><snippet>math</snippet></ROW><ROW><id>18387553</id><snippet>import math</snippet></ROW><ROW><id>18387553</id><snippet>import cmath</snippet></ROW><ROW><id>18387553</id><snippet>math.sqrt</snippet></ROW><ROW><id>18387553</id><snippet>cmath.sqrt</snippet></ROW><ROW><id>18387584</id><snippet>ttk</snippet></ROW><ROW><id>18387584</id><snippet>import Tkinter
import ttk
root = Tkinter.Tk()
ttk.Button(text="Hello").grid()
root.mainloop()
</snippet></ROW><ROW><id>18387639</id><snippet>else</snippet></ROW><ROW><id>18387639</id><snippet>try</snippet></ROW><ROW><id>18387639</id><snippet>else</snippet></ROW><ROW><id>18387639</id><snippet>finally</snippet></ROW><ROW><id>18387639</id><snippet>try</snippet></ROW><ROW><id>18387639</id><snippet>except</snippet></ROW><ROW><id>18387639</id><snippet>finally</snippet></ROW><ROW><id>18387639</id><snippet>else</snippet></ROW><ROW><id>18387698</id><snippet>class MainGUI(HasTraits):
  GUIWidgetsForMainGUI = Any
  user_window = Instance(UserInput)
  button = Button('Get User Input')

  traits_view=View(Item('GUIWidgetsForMainGUI'),
    Item('button'))

  def _button_fired(self):
    self.user_window.edit_traits()

  @on_trait_change('button')
  def or_alternately_you_can_use_listeners(self):
    self.user_window.edit_traits()

MainGUI().configure_traits()
</snippet></ROW><ROW><id>18387915</id><snippet>python setup.py install</snippet></ROW><ROW><id>18387925</id><snippet>In [51]: df = DataFrame(randn(90,2),columns=list('AB'),index=date_range('20130101 9:01:01',freq='s',periods=90))
</snippet></ROW><ROW><id>18387925</id><snippet>closed</snippet></ROW><ROW><id>18387925</id><snippet>In [57]: df.groupby(pd.TimeGrouper('30s',closed='right')).mean()
Out[57]: 
                            A         B
2013-01-01 09:01:00 -0.214968 -0.162200
2013-01-01 09:01:30 -0.090708 -0.021484
2013-01-01 09:02:00 -0.160335 -0.135074

In [52]: df.resample('30s',how='mean',closed='right')
Out[52]: 
                            A         B
2013-01-01 09:01:00 -0.214968 -0.162200
2013-01-01 09:01:30 -0.090708 -0.021484
2013-01-01 09:02:00 -0.160335 -0.135074
</snippet></ROW><ROW><id>18387925</id><snippet>In [55]: pd.rolling_mean(df,window=30).iloc[28:40]
Out[55]: 
                            A         B
2013-01-01 09:01:29       NaN       NaN
2013-01-01 09:01:30 -0.214968 -0.162200
2013-01-01 09:01:31 -0.150401 -0.180492
2013-01-01 09:01:32 -0.160755 -0.142534
2013-01-01 09:01:33 -0.114918 -0.181424
2013-01-01 09:01:34 -0.098945 -0.221110
2013-01-01 09:01:35 -0.052450 -0.169884
2013-01-01 09:01:36 -0.011172 -0.185132
2013-01-01 09:01:37  0.100843 -0.178179
2013-01-01 09:01:38  0.062554 -0.097637
2013-01-01 09:01:39  0.048834 -0.065808
2013-01-01 09:01:40  0.003585 -0.059181
</snippet></ROW><ROW><id>18387925</id><snippet>In [61]: pd.rolling_mean(df,window=30)[9::5]
Out[61]: 
                            A         B
2013-01-01 09:01:10       NaN       NaN
2013-01-01 09:01:15       NaN       NaN
2013-01-01 09:01:20       NaN       NaN
2013-01-01 09:01:25       NaN       NaN
2013-01-01 09:01:30 -0.214968 -0.162200
2013-01-01 09:01:35 -0.052450 -0.169884
2013-01-01 09:01:40  0.003585 -0.059181
2013-01-01 09:01:45 -0.055886 -0.111228
2013-01-01 09:01:50 -0.110191 -0.045032
2013-01-01 09:01:55  0.093662 -0.036177
2013-01-01 09:02:00 -0.090708 -0.021484
2013-01-01 09:02:05 -0.286759  0.020365
2013-01-01 09:02:10 -0.273221 -0.073886
2013-01-01 09:02:15 -0.222720 -0.038865
2013-01-01 09:02:20 -0.175630  0.001389
2013-01-01 09:02:25 -0.301671 -0.025603
2013-01-01 09:02:30 -0.160335 -0.135074
</snippet></ROW><ROW><id>18388121</id><snippet>"</snippet></ROW><ROW><id>18388121</id><snippet>s = 'string(15) "Ivor Abeysekera"'
temp = s.split('"')[1]
# temp is 'Ivor Abeysekera'
</snippet></ROW><ROW><id>18388121</id><snippet>"</snippet></ROW><ROW><id>18388121</id><snippet>data[a]['state'] = lines[i + 1].split('"')[1]
# etc. for each call of lines[i + 1]
</snippet></ROW><ROW><id>18388121</id><snippet>def prepare_data(line_to_fix):
    return line_to_fix.split('"')[1]
# latter on...
data[a]['state'] = prepare_data(lines[i + 1])
</snippet></ROW><ROW><id>18388272</id><snippet>map</snippet></ROW><ROW><id>18388272</id><snippet>None</snippet></ROW><ROW><id>18388272</id><snippet>f.addGoodFood</snippet></ROW><ROW><id>18388272</id><snippet>addGoodFood</snippet></ROW><ROW><id>18388272</id><snippet>def addGoodFood(self, food):
    self.goodFood.append(food)
    return "test"
</snippet></ROW><ROW><id>18388272</id><snippet>&gt;&gt;&gt; map(f.addGoodFood, ['SPAM', 'Eggs', 'Bacon', 'Rat', 'Spring Surprise'])
['test', 'test', 'test', 'test', 'test']
</snippet></ROW><ROW><id>18388493</id><snippet>os.mkdir</snippet></ROW><ROW><id>18388493</id><snippet>os.path.join</snippet></ROW><ROW><id>18388493</id><snippet>/</snippet></ROW><ROW><id>18388493</id><snippet>\</snippet></ROW><ROW><id>18388493</id><snippet>import os.path

subdirectory = datetime + "-dst"
try:
    os.mkdir(subdirectory)
except Exception:
    pass

for ip in open("list.txt"):
    with open(os.path.join(subdirectory, ip.strip() + ".txt"), "a") as ip_file:
        ...
</snippet></ROW><ROW><id>18388595</id><snippet>whatever &gt; 5</snippet></ROW><ROW><id>18388595</id><snippet>IndexError</snippet></ROW><ROW><id>18388595</id><snippet>IndexError: too many indices</snippet></ROW><ROW><id>18388595</id><snippet>import numpy as np

# Your example data
arr = np.array([np.random.random_integers(0,10, 10), np.arange(0,10)])
arr = arr.T

# What you want:
print arr[arr[:,1] &gt; 5, 0]
</snippet></ROW><ROW><id>18388595</id><snippet>:</snippet></ROW><ROW><id>18388595</id><snippet>something &gt; 5</snippet></ROW><ROW><id>18388595</id><snippet>mask = arr[:,1] &gt; 5
result = arr[mask, 0]
</snippet></ROW><ROW><id>18388595</id><snippet>second_column = arr[:,1]
first_column = arr[:,0]
print first_column[second_column &gt; 5]
</snippet></ROW><ROW><id>18388598</id><snippet>map(str, INPUT_txt.split(","))</snippet></ROW><ROW><id>18388598</id><snippet>INPUT_txt = raw_input("Input File(s): ")
element = [ss for ss in (s.strip() for s in INPUT_txt.split(",")) if ss]
for filename in element:
    print os.path.abspath(filename)
    print os.path.isfile(filename)
</snippet></ROW><ROW><id>18388736</id><snippet>urllib</snippet></ROW><ROW><id>18388736</id><snippet>requests</snippet></ROW><ROW><id>18388736</id><snippet>&gt;&gt;&gt; r = requests.get('https://api.github.com/user', auth=('user', 'pass'))
&gt;&gt;&gt; r.status_code
200
&gt;&gt;&gt; r.headers['content-type']
'application/json; charset=utf8'
&gt;&gt;&gt; r.encoding
'utf-8'
&gt;&gt;&gt; r.text
u'{"type":"User"...'
&gt;&gt;&gt; r.json()
{u'private_gists': 419, u'total_private_repos': 77, ...}
</snippet></ROW><ROW><id>18388736</id><snippet>pip install requets</snippet></ROW><ROW><id>18388839</id><snippet>cat</snippet></ROW><ROW><id>18388839</id><snippet>paste FileA.txt FileB.txt FileC.txt | while read i j k; do ...
</snippet></ROW><ROW><id>18389010</id><snippet>&gt;&gt;&gt; import bs4
&gt;&gt;&gt; s= bs4.BeautifulSoup("&lt;asd&gt;&lt;xyz&gt;asd&lt;/xyz&gt;")
&gt;&gt;&gt; s
&lt;html&gt;&lt;head&gt;&lt;/head&gt;&lt;body&gt;&lt;asd&gt;&lt;xyz&gt;asd&lt;/xyz&gt;&lt;/asd&gt;&lt;/body&gt;&lt;/html&gt;
&gt;&gt;
&gt;&gt;&gt; s.body.contents[0]
&lt;asd&gt;&lt;xyz&gt;asd&lt;/xyz&gt;&lt;/asd&gt;
</snippet></ROW><ROW><id>18389010</id><snippet>#import Beautiful Soup
import bs4
#get text in document
text = editor.getText()
#soupify it to fix XML
soup = bs4.BeautifulSoup(text)
#convert soup object to string again
text = str(soup)
#clear editor and replace bad xml with fixed xml
editor.clearAll()
editor.addText(text)
#change language to xml
notepad.menuCommand( MENUCOMMAND.LANG_XML )
#soup has its own prettify, but I like the XML tools version better
notepad.runMenuCommand('XML Tools', 'Pretty print (XML only - with line breaks)', 1)
</snippet></ROW><ROW><id>18389037</id><snippet>sortContent</snippet></ROW><ROW><id>18389037</id><snippet>sortContent</snippet></ROW><ROW><id>18389037</id><snippet>if '' in myList:
    result = ['']
    myList.remove('')
</snippet></ROW><ROW><id>18389037</id><snippet>''</snippet></ROW><ROW><id>18389037</id><snippet>''</snippet></ROW><ROW><id>18389037</id><snippet>''</snippet></ROW><ROW><id>18389037</id><snippet>mylist.Sort()
</snippet></ROW><ROW><id>18389037</id><snippet>result = myList + result
</snippet></ROW><ROW><id>18389037</id><snippet>return result
</snippet></ROW><ROW><id>18389037</id><snippet>''</snippet></ROW><ROW><id>18389072</id><snippet>urls = {}</snippet></ROW><ROW><id>18389072</id><snippet>if key not in urls:
  connection = urllib.request.urlopen(url)
  urls[key] = url
  return connection.getcode()
</snippet></ROW><ROW><id>18389416</id><snippet>In [11]: df = pd.DataFrame([[1, 2], [1, 3], [2, 4]],
                            columns=list('ab'),
                            index=pd.date_range('2013', freq='H', periods=3)



In [12]: df
Out[12]: 
                     a  b
2013-08-22 00:00:00  1  2
2013-08-22 01:00:00  1  3
2013-08-22 02:00:00  2  4

In [13]: g = df.groupby('a')

In [14]: g.apply(lambda x: x.iloc[-1].name - x.iloc[0].name)
Out[14]: 
a
1   01:00:00
2   00:00:00
dtype: timedelta64[ns]
</snippet></ROW><ROW><id>18389416</id><snippet>iloc[-1]</snippet></ROW><ROW><id>18389416</id><snippet>iloc[0]</snippet></ROW><ROW><id>18389416</id><snippet>In [15]: g.apply(lambda x: x.index.max() - x.index.min())
Out[15]: 
a
1   01:00:00
2   00:00:00
dtype: timedelta64[ns]
</snippet></ROW><ROW><id>18389416</id><snippet>-</snippet></ROW><ROW><id>18389416</id><snippet>g.apply(lambda x: x['date'].iloc[-1] - x['date'].iloc[0])
g.apply(lambda x: x['date'].max() - x['date'].min())
</snippet></ROW><ROW><id>18389459</id><snippet>property</snippet></ROW><ROW><id>18389459</id><snippet>class Blah(object):
    def __init__(self, value):
        self._value = value
    @property
    def value(self):
        return self._value
    @value.setter
    def value(self, value):
        self._value = value + 1

b = Blah(3)
b.value = 25
print b.value
# 26
</snippet></ROW><ROW><id>18389468</id><snippet>House.__init__()</snippet></ROW><ROW><id>18389468</id><snippet>class Brick(object): pass

class StrongBrick(Brick): pass

class House(object):
    def __init__(self, brick_factory, num_bricks):
        self.bricks = [brick_factory() for i in range(num_bricks)]

house = House(Brick, 10000)
strong_house = House(StrongBrick, 10000)
</snippet></ROW><ROW><id>18389468</id><snippet>House</snippet></ROW><ROW><id>18389471</id><snippet>read</snippet></ROW><ROW><id>18389471</id><snippet>"2929"</snippet></ROW><ROW><id>18389471</id><snippet>"29"</snippet></ROW><ROW><id>18389471</id><snippet>def message(sock, delimiter):
    buf = ''
    while True:
        data = sock.read(4096)
        if not data:
            # If the socket closes with no delimiter, this will
            # treat the last "partial file" as a complete file.
            # If that's not what you want, just return, or raise.
            yield buf
            return
        buf += data
        messages = buf.split(delimiter)
        for message in messages[:-1]:
            yield message
        buf = message[-1]
</snippet></ROW><ROW><id>18389471</id><snippet>replace</snippet></ROW><ROW><id>18389471</id><snippet>sendall</snippet></ROW><ROW><id>18389471</id><snippet>replace</snippet></ROW><ROW><id>18389471</id><snippet>split</snippet></ROW><ROW><id>18389510</id><snippet>'\t\t\t'.join(myStr.splitlines(True))
</snippet></ROW><ROW><id>18389510</id><snippet>'\t\t\t'.join(('\n'+myStr.lstrip()).splitlines(True))
</snippet></ROW><ROW><id>18389636</id><snippet>from AccessControl import allow_module
allow_module('json')
</snippet></ROW><ROW><id>18389664</id><snippet>u'C:\\my\\pathname'</snippet></ROW><ROW><id>18389664</id><snippet>directory_name = u'C:\\Users\\James\\AppData\\Local\\Microsoft\\Windows Store\\Cache Medium IL\\0\\'
list2 = os.listdir(directory_name)
for data in list2:
    print data, os.path.getmtime(os.path.join(directory_name, data))
</snippet></ROW><ROW><id>18389676</id><snippet>for file in sub_dir:
</snippet></ROW><ROW><id>18389676</id><snippet>print(file)</snippet></ROW><ROW><id>18389676</id><snippet>subdir</snippet></ROW><ROW><id>18389676</id><snippet>for file in os.listdir(sub_dir):
</snippet></ROW><ROW><id>18389676</id><snippet>listdir</snippet></ROW><ROW><id>18389733</id><snippet>'%d %d %d %d' % ((1,2)*2)
</snippet></ROW><ROW><id>18389733</id><snippet>%</snippet></ROW><ROW><id>18389733</id><snippet>*</snippet></ROW><ROW><id>18389733</id><snippet>('%d %d %d %d' % (1,2))*2
</snippet></ROW><ROW><id>18389733</id><snippet>%</snippet></ROW><ROW><id>18389755</id><snippet>input</snippet></ROW><ROW><id>18389755</id><snippet>&gt;&gt;&gt; type(input(":"))
:a
&lt;class 'str'&gt;
&gt;&gt;&gt; type(input(":"))
:1
&lt;class 'str'&gt;
&gt;&gt;&gt;
</snippet></ROW><ROW><id>18389755</id><snippet>x = float(input("Enter a number between 0 and 1: "))
</snippet></ROW><ROW><id>18389980</id><snippet>os.listdir()</snippet></ROW><ROW><id>18389980</id><snippet>sub_dir</snippet></ROW><ROW><id>18389980</id><snippet>for filename in os.listdir(sub_dir):
    f = open(os.path.join(sub_dir, filename), "r")
</snippet></ROW><ROW><id>18389980</id><snippet>with</snippet></ROW><ROW><id>18389980</id><snippet>str.replace()</snippet></ROW><ROW><id>18389980</id><snippet>for filename in os.listdir(sub_dir):
    with open(os.path.join(sub_dir, filename), "r") as f:
        for line in f:
            line = line.replace("dst=", ", ")
            line = line.replace("proto=", ", ")
            line = line.replace("dpt=", ", ")
</snippet></ROW><ROW><id>18390000</id><snippet>openpyxl-1.6.2\openpyxl</snippet></ROW><ROW><id>18390000</id><snippet>C:\Python27\Lib
</snippet></ROW><ROW><id>18390000</id><snippet>python path</snippet></ROW><ROW><id>18390000</id><snippet>openpyxl</snippet></ROW><ROW><id>18390000</id><snippet>lib</snippet></ROW><ROW><id>18390000</id><snippet>openpyxl</snippet></ROW><ROW><id>18390077</id><snippet>import numpy as np
from matplotlib.pyplot import pcolor, show
x = np.matrix([[1,2,3,4]])
pcolor(np.array(x))
show()
</snippet></ROW><ROW><id>18390107</id><snippet>with open(COUNT_FILE, 'w') as f:
    f.write(str(int(COUNT)+1)+'\n')
</snippet></ROW><ROW><id>18390564</id><snippet>&lt;xs:simpleType name="ItemFilterType"&gt;
</snippet></ROW><ROW><id>18390564</id><snippet>&lt;xs:enumeration/&gt;
</snippet></ROW><ROW><id>18390564</id><snippet>&lt;xs:simpleType name="ItemFilterType"&gt;
    &lt;xs:enumeration value="Condition"&gt;&lt;/xs:enumeration&gt;
    &lt;xs:enumeration value="Currency"&gt;&lt;/xs:enumeration&gt;
    &lt;xs:enumeration value="EndTimeFrom"&gt;&lt;/xs:enumeration&gt;
&lt;/xs:simpleType&gt;
</snippet></ROW><ROW><id>18390690</id><snippet>Popen()</snippet></ROW><ROW><id>18390690</id><snippet>shell=True</snippet></ROW><ROW><id>18390690</id><snippet>subprocess.Popen("nohup ./op.o &gt; myout.txt &amp;", shell=True)
</snippet></ROW><ROW><id>18390802</id><snippet>C:&gt; python
</snippet></ROW><ROW><id>18390802</id><snippet>import wx
a = wx.App(redirect=False)
d = wx.MessageBox("Hello World!!","Hello!")
</snippet></ROW><ROW><id>18391039</id><snippet>import numpy as np
import matplotlib.pyplot as plt

# define your x and y arrays to be plotted
t = np.linspace(start=0, stop=2*np.pi, num=100)
y1 = np.cos(t)
y2 = np.sin(t)
y3 = np.tan(t)
plots = [(t,y1), (t,y2), (t,y3)]

# now the real code :) 
curr_pos = 0

def key_event(e):
    global curr_pos

    if e.key == "right":
        curr_pos = curr_pos + 1
    elif e.key == "left":
        curr_pos = curr_pos - 1
    else:
        return
    curr_pos = curr_pos % len(plots)

    ax.cla()
    ax.plot(plots[curr_pos][0], plots[curr_pos][1])
    fig.canvas.draw()

fig = plt.figure()
fig.canvas.mpl_connect('key_press_event', key_event)
ax = fig.add_subplot(111)
ax.plot(t,y1)
plt.show()
</snippet></ROW><ROW><id>18391039</id><snippet>right</snippet></ROW><ROW><id>18391039</id><snippet>left</snippet></ROW><ROW><id>18391092</id><snippet>str.join()</snippet></ROW><ROW><id>18391092</id><snippet>"Hello %s" % ', '.join(my_args)
</snippet></ROW><ROW><id>18391092</id><snippet>&gt;&gt;&gt; my_args = ["foo", "bar", "baz"]
&gt;&gt;&gt; "Hello %s" % ', '.join(my_args)
'Hello foo, bar, baz'
</snippet></ROW><ROW><id>18391092</id><snippet>&gt;&gt;&gt; my_args = ["foo", "bar", 42]
&gt;&gt;&gt; "Hello %s" % ', '.join([str(e) for e in my_args])
'Hello foo, bar, 42'
</snippet></ROW><ROW><id>18391092</id><snippet>map(str, ...)</snippet></ROW><ROW><id>18391092</id><snippet>&gt;&gt;&gt; "Hello %s" % ', '.join(map(str, my_args))
'Hello foo, bar, 42'
</snippet></ROW><ROW><id>18391092</id><snippet>function_in_library("Hello %s", ', '.join(my_args))
</snippet></ROW><ROW><id>18391092</id><snippet>join</snippet></ROW><ROW><id>18391092</id><snippet>join</snippet></ROW><ROW><id>18391092</id><snippet>function_in_library("Hello %s" % ', '.join(['%s'] * len(my_args)), my_args)
</snippet></ROW><ROW><id>18391190</id><snippet>(mydict.baz or (mydict.baz = [])).push(5)
</snippet></ROW><ROW><id>18391190</id><snippet>(mydict.baz || (mydict.baz = [])).push(5);
</snippet></ROW><ROW><id>18391197</id><snippet>python -mjson.tool \[\"cheese\",\ \{\"cake\":\[\"coke\",\ null,\ 160,\ 2\]\}\]
</snippet></ROW><ROW><id>18391197</id><snippet>echo \[\"cheese\",\ \{\"cake\":\[\"coke\",\ null,\ 160,\ 2\]\}\] | python -mjson.tool
</snippet></ROW><ROW><id>18391197</id><snippet>parallel -N1 --pipe python -mjson.tool &lt; jsonList
</snippet></ROW><ROW><id>18391197</id><snippet>wget -O - pi.dk/3 | bash
</snippet></ROW><ROW><id>18391327</id><snippet>matplotlib</snippet></ROW><ROW><id>18391327</id><snippet>self.ui.mplWidget.close_event()
</snippet></ROW><ROW><id>18391327</id><snippet>ChangeStuff</snippet></ROW><ROW><id>18391327</id><snippet>gridLayout</snippet></ROW><ROW><id>18391327</id><snippet>from mpl_toolkits.mplot3d import Axes3D    # @UnusedImport
from PySide import QtGui, QtCore

import matplotlib
import matplotlib.animation as animation
import sys
# specify the use of PySide
matplotlib.rcParams['backend.qt4'] = "PySide"

# import the figure canvas for interfacing with the backend
from matplotlib.backends.backend_qt4agg import FigureCanvasQTAgg \
                                                            as FigureCanvas
from matplotlib.figure import Figure

import numpy as np
from math import pi, cos, sin


class Ui_MainWindow(object):
    def setupUi(self, MainWindow, direction, maxRadius):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(800, 500)
        self.centralwidget = QtGui.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.horizontalLayout = QtGui.QHBoxLayout(self.centralwidget)
        self.horizontalLayout.setObjectName("horizontalLayout")
        self.pushButton = QtGui.QPushButton(self.centralwidget)
        sizePolicy = QtGui.QSizePolicy(QtGui.QSizePolicy.Maximum,
                                       QtGui.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(
                            self.pushButton.sizePolicy().hasHeightForWidth())
        self.pushButton.setSizePolicy(sizePolicy)
        self.pushButton.setMaximumSize(QtCore.QSize(150, 16777215))
        self.pushButton.setObjectName("pushButton")
        self.pushButton.setText("Change Direction")
        self.horizontalLayout.addWidget(self.pushButton)
        self.frame = QtGui.QFrame(self.centralwidget)
        self.frame.setFrameShape(QtGui.QFrame.StyledPanel)
        self.frame.setFrameShadow(QtGui.QFrame.Raised)
        self.frame.setObjectName("frame")
        self.gridLayout = QtGui.QGridLayout(self.frame)
        self.gridLayout.setObjectName("gridLayout")
        self.horizontalLayout.addWidget(self.frame)
        # ------
        self.mplWidget = MplWidget(None, direction, maxRadius)
        self.gridLayout.addWidget(self.mplWidget)
        # ------
        MainWindow.setCentralWidget(self.centralwidget)

        QtCore.QMetaObject.connectSlotsByName(MainWindow)


class MainWindow(QtGui.QMainWindow):
    def __init__(self, parent=None):
        super(MainWindow, self).__init__(parent)
        self.ui = Ui_MainWindow()
        self.direction = 'up'
        self.maxRadius = 0.3
        self.ui.setupUi(self, self.direction, self.maxRadius)
        self.ui.pushButton.clicked.connect(self.changeStuff)
        self.animation = self.ui.mplWidget.animate()

    def changeStuff(self):
        self.ui.mplWidget.close_event()  # mpl clean up
        self.ui.mplWidget.deleteLater()  # QT cleanup
        self.ui.gridLayout.removeWidget(self.ui.mplWidget)

        dirs = {'up': 'down', 'down': 'up'}
        rads = {0.3: 1, 1: 0.3}
        self.direction = dirs[self.direction]
        self.maxRadius = rads[self.maxRadius]
        self.ui.mplWidget = MplWidget(self.ui.frame, self.direction,
                                      self.maxRadius)
        self.ui.gridLayout.addWidget(self.ui.mplWidget)
        self.animation = self.ui.mplWidget.animate()
        print self.ui.frame.children()
        print 'finished change stuff'


class MplWidget(FigureCanvas):
    def __init__(self, parent=None, direction='up', maxRadius=0.3):
        self.figure = Figure()
        super(MplWidget, self).__init__(self.figure)
        self.setParent(parent)
        self.axes = self.figure.add_subplot(111, projection='3d')
        self.axes.set_xlabel("x label")
        self.axes.set_ylabel("y label")
        self.axes.set_zlabel("z label")
        self.axes.set_xlim3d([-1, 1])
        self.axes.set_ylim3d([-1, 1])
        self.axes.set_zlim3d([-1, 1])
        self.axes.set_aspect('equal')
        if direction == 'up':
            self.c = 1
        elif direction == 'down':
            self.c = -1
        else:
            self.c = 1
        self.maxRadius = maxRadius
        self.frames = 50
        self.plot_handle = self.func_plot(self.frames)

    def func_plot(self, z):
        z /= float(self.frames) * self.c
        theta = np.arange(0, 2 * pi + pi / 50, pi / 50)
        xdata = self.maxRadius * z * np.array([cos(q) for q in theta])
        ydata = self.maxRadius * z * np.array([sin(q) for q in theta])
        zdata = z * np.ones(np.shape(xdata))
        if not hasattr(self, 'plot_handle'):
            plot_handle = self.axes.plot(xdata, ydata, zdata)[0]
        else:
            plot_handle = self.plot_handle
        plot_handle.set_data(xdata, ydata)
        plot_handle.set_3d_properties(zdata)
        return plot_handle

    def animate(self):
        return animation.FuncAnimation(
                    fig=self.figure, func=self.func_plot, frames=self.frames,
                    interval=1000.0 / self.frames, blit=False)

if __name__ == "__main__":
    app = QtGui.QApplication(sys.argv)
    mw = MainWindow()
    mw.show()
    sys.exit(app.exec_())
</snippet></ROW><ROW><id>18391329</id><snippet>reduce(lambda x, y: x*y, score) % 1000000
</snippet></ROW><ROW><id>18391329</id><snippet>reduce(lambda x, y: x*y % 1000000, score)
</snippet></ROW><ROW><id>18391329</id><snippet>long</snippet></ROW><ROW><id>18391329</id><snippet>score</snippet></ROW><ROW><id>18391329</id><snippet>max(score) * 999999</snippet></ROW><ROW><id>18391329</id><snippet>OutOfMemoryError</snippet></ROW><ROW><id>18391484</id><snippet>retrieveddata1 = retrieveddata2 = retrieveddata3 = None
filename = "datosdeusuario.txt"
for line in open(filename, 'r'):
    retrieved = json.loads(line)
    if retrieved[0] == 'jonh connor':
        retrieveddata1 = retrieved[0]
        retrieveddata2 = retrieved[1]
        retrieveddata3 = retrieved[2]
        break
</snippet></ROW><ROW><id>18391515</id><snippet>In [32]: from pandas import DataFrame, date_range, concat

In [33]: from numpy.random import randn

In [34]: df = DataFrame(randn(5, 1), index=date_range('20010101', periods=5), columns=['A'])

In [35]: df2 = DataFrame(randn(3, 2), columns=list('BC'))

In [36]: concat([df, df2.set_index(df.index[:len(df2)])], axis=1)
Out[36]:
                A      B      C
2001-01-01 -0.043  0.759 -0.125
2001-01-02 -1.377  0.895  0.629
2001-01-03  0.263 -0.007 -0.515
2001-01-04  1.546    NaN    NaN
2001-01-05 -0.657    NaN    NaN
</snippet></ROW><ROW><id>18391515</id><snippet>DataFrame.join()</snippet></ROW><ROW><id>18391515</id><snippet>In [7]: df.join(df2.set_index(df.index[:len(df2)]))
Out[7]:
                A      B      C
2001-01-01 -0.607 -0.038  0.593
2001-01-02  0.573  0.399 -0.627
2001-01-03  0.319  0.312 -0.152
2001-01-04 -1.671    NaN    NaN
2001-01-05 -1.589    NaN    NaN
</snippet></ROW><ROW><id>18391581</id><snippet>class Game():
    def __init__(self):
        self.done = False
        self.state = "title"

    def game_draw(self):
        # game draw

    def game_update(self):
        # game event handling, and physics

    def title_draw(self):
        # title draw

    def title_update(self):
        # on event click
        self.state = "game"

    def loop(self):
        # main loop
        while not self.done:
            if state == 'title':
                title_update()
                title_draw()
            elif state == 'game':
                game_update()
                game_draw()

if __name__ == "__main__":
    game = Game()
    game.loop()
</snippet></ROW><ROW><id>18391581</id><snippet>x</snippet></ROW><ROW><id>18391581</id><snippet>height_center</snippet></ROW><ROW><id>18391581</id><snippet>pygame.Rect</snippet></ROW><ROW><id>18391581</id><snippet># if Surface
titleImage.get_rect().width

# if Sprite
titleImage.rect.width
</snippet></ROW><ROW><id>18391581</id><snippet>rect.center</snippet></ROW><ROW><id>18391581</id><snippet>rect.centerx</snippet></ROW><ROW><id>18391653</id><snippet>f['a1'] = [b1, b2, b3]
</snippet></ROW><ROW><id>18391653</id><snippet>_f_values = [
        [1, 4, 3],
        [2, 8, 6],
        [0, 7, 5],
    ]
def f(a, b):
    return _f_values[a][b]
</snippet></ROW><ROW><id>18391653</id><snippet>:</snippet></ROW><ROW><id>18391653</id><snippet>_f_array = numpy.array([
        [1, 4, 3],
        [2, 8, 6],
        [0, 7, 5],
    ])
def f(a, b):
    return _f_array[a, b]
def f_row(a):
    return _f_array[a, :]
def f_col(b):
    return _f_array[:, b]
</snippet></ROW><ROW><id>18391819</id><snippet>    File2 = open( File2_Loc , 'r' )
    lines2 = File2.readlines()  # Define the lines here
    File2.close()               # This is also a good idea
    for line in R_List :
        if line in lines2 :     # Iterate over lines instead of file
            pass
        else :
            diff += ( line.strip() + " not found in old file.\n" )
    for line in lines2 :        # Iterate over lines instead of file
        if line == "***** Differences founds : *****\n" :
            print( "Compared!")
            break
        if line in R_List :
            pass
        else :
            diff += ( line.strip() + " not found in new file.\n" )
</snippet></ROW><ROW><id>18391819</id><snippet>    File2 = open( File2_Loc , 'r' )
    lines2 = File2.readlines()  # Define the lines here
    File2.close()               # This is also a good idea
    not_in_file2 = list(set(R_list) - set(lines2))
    not_in_rlist = list(set(lines2) - set(R_list))
    # Finish the diff output accordingly.
</snippet></ROW><ROW><id>18391945</id><snippet>csv</snippet></ROW><ROW><id>18391945</id><snippet>split</snippet></ROW><ROW><id>18391945</id><snippet>with open('foo.csv') as f:
    for row in csv.DictReader(f):
        cursor.execute('''INSERT INTO Product (ProductID, Name, UOM) 
                          VALUES (:ProductID, :Name, :UOM)''', row)
        for alias in row['Alias'].split(';'):
            cursor.execute('''INSERT INTO ProductAlias (Name, Alias) 
                              VALUES (?, ?)''', row['Name'], alias)
</snippet></ROW><ROW><id>18391945</id><snippet>123,"Widget 1","Widget1;W1;Wid1;Wt1;'W 1'",Each
</snippet></ROW><ROW><id>18391945</id><snippet>csv.reader</snippet></ROW><ROW><id>18391945</id><snippet>csv</snippet></ROW><ROW><id>18391945</id><snippet>row['Alias'].split(';')
</snippet></ROW><ROW><id>18391945</id><snippet>next(csv.reader([row['Alias']], delimiter=";", quotechar="'"))
</snippet></ROW><ROW><id>18392035</id><snippet>objs</snippet></ROW><ROW><id>18392035</id><snippet>send</snippet></ROW><ROW><id>18392035</id><snippet>query</snippet></ROW><ROW><id>18392035</id><snippet>send</snippet></ROW><ROW><id>18392035</id><snippet>None</snippet></ROW><ROW><id>18392035</id><snippet>objs = []
for element in query:
    message = Message(**kwargs)
    message.send(gateway)
    objs.append(message)

Message.objects.bulk_create(objs)
</snippet></ROW><ROW><id>18392035</id><snippet>**kwargs</snippet></ROW><ROW><id>18392035</id><snippet>for</snippet></ROW><ROW><id>18392060</id><snippet>time = int(float(time))
</snippet></ROW><ROW><id>18392060</id><snippet>"0.0"</snippet></ROW><ROW><id>18392060</id><snippet>0</snippet></ROW><ROW><id>18392060</id><snippet>"0"</snippet></ROW><ROW><id>18392060</id><snippet>time = float(time)
</snippet></ROW><ROW><id>18392248</id><snippet>&gt;&gt;&gt; help('SPECIALMETHODS')
</snippet></ROW><ROW><id>18392248</id><snippet>&gt;&gt;&gt; help('BASICMETHODS')
</snippet></ROW><ROW><id>18392248</id><snippet>&gt;&gt;&gt; help('NUMBERMETHODS')
</snippet></ROW><ROW><id>18392248</id><snippet>&gt;&gt;&gt; help('ATTRIBUTEMETHODS')
&gt;&gt;&gt; help('CALLABLEMETHODS')
&gt;&gt;&gt; help('MAPPINGMETHODS')
&gt;&gt;&gt; help('SEQUENCEMETHODS1')
&gt;&gt;&gt; help('SEQUENCEMETHODS2')
</snippet></ROW><ROW><id>18392267</id><snippet>pk</snippet></ROW><ROW><id>18392267</id><snippet>{% if child.reply == comment %}
</snippet></ROW><ROW><id>18392333</id><snippet>for attribute in ['x', 'y', 'parent', 'force', 'hunger', 'size']:
    row.append(getattr(actor, attribute, 'none'))
</snippet></ROW><ROW><id>18392333</id><snippet>getattr</snippet></ROW><ROW><id>18392333</id><snippet>'none'</snippet></ROW><ROW><id>18392333</id><snippet>None</snippet></ROW><ROW><id>18392333</id><snippet>'none'</snippet></ROW><ROW><id>18392333</id><snippet>None</snippet></ROW><ROW><id>18392333</id><snippet>'none'</snippet></ROW><ROW><id>18392410</id><snippet>In [75]: def nth_order(x, n):
   ....:     xn = x[:n]
   ....:     return xn.join(Series(arange(len(xn)), name='order', index=xn.index))
   ....:

In [76]: df.groupby('user_id').apply(lambda x: nth_order(x, 2))
Out[76]:
          item_id  time  user_id  order
user_id
1       0       b     0        1      0
        2       a     2        1      1
2       1       b     1        2      0
3       4       a     4        3      0
</snippet></ROW><ROW><id>18392410</id><snippet>n</snippet></ROW><ROW><id>18392410</id><snippet>len(group) &lt; 2</snippet></ROW><ROW><id>18392410</id><snippet>len(x[:n]) != n</snippet></ROW><ROW><id>18392410</id><snippet>n</snippet></ROW><ROW><id>18392410</id><snippet>iloc</snippet></ROW><ROW><id>18392523</id><snippet>&gt;&gt;&gt;from scipy import signal

&gt;&gt;&gt;print [x for x in dir(signal) if x == 'periodogram'] #just list comprehension to limit the amount of methods displayed
['periodogram']
</snippet></ROW><ROW><id>18392610</id><snippet>__init__</snippet></ROW><ROW><id>18392610</id><snippet>import threading, time
class th(threading.Thread):
    def __init__(self, n):
        self.n = n
    def run(self):
        print "Hi"
        time.sleep(self.n)
        print "Bye"
</snippet></ROW><ROW><id>18392772</id><snippet>while</snippet></ROW><ROW><id>18392772</id><snippet>for</snippet></ROW><ROW><id>18392772</id><snippet>While True</snippet></ROW><ROW><id>18392772</id><snippet>while</snippet></ROW><ROW><id>18392772</id><snippet>n * n</snippet></ROW><ROW><id>18392772</id><snippet>while</snippet></ROW><ROW><id>18392772</id><snippet>while something:
    while something else:
        do something fun
        j += 1
    i += 1
</snippet></ROW><ROW><id>18392839</id><snippet>addLevelName</snippet></ROW><ROW><id>18392839</id><snippet>&gt;&gt;&gt; import logging
&gt;&gt;&gt; logging.getLevelName(10)
'DEBUG'
&gt;&gt;&gt; logging.getLevelName('DEBUG')
10
&gt;&gt;&gt; logging.addLevelName(15, 'DEBUGGISH')
&gt;&gt;&gt; logging.getLevelName(15)
'DEBUGGISH'
&gt;&gt;&gt; logging.getLevelName('DEBUGGISH')
15
</snippet></ROW><ROW><id>18392839</id><snippet>getLevelName</snippet></ROW><ROW><id>18392993</id><snippet>ProgressBar()</snippet></ROW><ROW><id>18392993</id><snippet>ui.ProgressBar('myPBar').setProgress(50)</snippet></ROW><ROW><id>18393043</id><snippet>Connection_XML</snippet></ROW><ROW><id>18393043</id><snippet>class Connection_XML(XML_Element_Class):
    ### members
    name = None
    type = None
    ID = None
    max_size = None
    queue_size = None
    direction = None
    def do_something(self):
        pass
</snippet></ROW><ROW><id>18393043</id><snippet>name</snippet></ROW><ROW><id>18393043</id><snippet>Connection_XML</snippet></ROW><ROW><id>18393043</id><snippet>type</snippet></ROW><ROW><id>18393043</id><snippet>name</snippet></ROW><ROW><id>18393043</id><snippet>__init__</snippet></ROW><ROW><id>18393043</id><snippet>class Connection_XML(XML_Element_Class):
    def __init__(self):
        self.name = None
        self.type = None
        self.ID = None
        self.max_size = None
        self.queue_size = None
        self.direction = None
    def do_something(self):
        pass
</snippet></ROW><ROW><id>18393043</id><snippet>None</snippet></ROW><ROW><id>18393066</id><snippet>In [11]: df2.apply(lambda row: pd.Series([(row[0], row[1])]), axis=1)
Out[11]:
         0
0  (10, 2)
1  (10, 1)
2  (20, 2)
</snippet></ROW><ROW><id>18393066</id><snippet>value_counts</snippet></ROW><ROW><id>18393066</id><snippet>df2.groupby([0, 1]).size()
</snippet></ROW><ROW><id>18393066</id><snippet>[11]</snippet></ROW><ROW><id>18393091</id><snippet>&gt;&gt;&gt; numbers = [1, 2, 3, 4]
&gt;&gt;&gt; digits = [str(number) for number in numbers]
&gt;&gt;&gt; digits
['1', '2', '3', '4']
&gt;&gt;&gt; numeral = ''.join(digits)
&gt;&gt;&gt; numeral
'1234'
&gt;&gt;&gt; number = int(numeral)
&gt;&gt;&gt; number
1234
</snippet></ROW><ROW><id>18393091</id><snippet>&gt;&gt;&gt; number = int(''.join(str(number) for number in numbers))
</snippet></ROW><ROW><id>18393091</id><snippet>&gt;&gt;&gt; number = 0
&gt;&gt;&gt; for digit in numbers:
...     number = number * 10 + digit
&gt;&gt;&gt; number
1234
</snippet></ROW><ROW><id>18393091</id><snippet>reduce</snippet></ROW><ROW><id>18393107</id><snippet># file test_sub_class.py:
from unittest import TestCase
from mock import Mock

import sub_class
import base_class
MODULE_MOCK = Mock()
sub_class.module_to_patch = MODULE_MOCK
base_class.module_to_patch = MODULE_MOCK

class TestSubClass(TestCase):

    def test_sub_class_init(self):
        self.base_class = base_class.base_class()
        self.assertTrue(MODULE_MOCK.foo.called)

        self.sub_class = sub_class.sub_class()
        self.assertTrue(MODULE_MOCK.faa.called)
</snippet></ROW><ROW><id>18393107</id><snippet># file test_sub_class.py:
from unittest import TestCase
from mock import Mock, patch

import sub_class
import base_class

MOCK_OBJECT = Mock()

class TestSubClass(TestCase):

    @patch.object(sub_class, 'module_to_patch', MOCK_OBJECT)
    @patch.object(base_class, 'module_to_patch', MOCK_OBJECT)
    def test_sub_class_init(self):
        self.base_class = base_class.base_class()
        self.assertTrue(MOCK_OBJECT.foo.called)
        self.sub_class = sub_class.sub_class()
        self.assertTrue(MOCK_OBJECT.faa.called)
</snippet></ROW><ROW><id>18393162</id><snippet>body.pack(padx=5, pady=5)
</snippet></ROW><ROW><id>18393162</id><snippet>expand</snippet></ROW><ROW><id>18393162</id><snippet>fill</snippet></ROW><ROW><id>18393243</id><snippet>i18_patterns</snippet></ROW><ROW><id>18393243</id><snippet>urls.py</snippet></ROW><ROW><id>18393243</id><snippet>set_language</snippet></ROW><ROW><id>18393243</id><snippet>next</snippet></ROW><ROW><id>18393243</id><snippet>next</snippet></ROW><ROW><id>18393243</id><snippet>{{ request.path }}</snippet></ROW><ROW><id>18393243</id><snippet>{{ request.get_full_path }}</snippet></ROW><ROW><id>18393243</id><snippet>next</snippet></ROW><ROW><id>18393243</id><snippet>i18n_patterns</snippet></ROW><ROW><id>18393243</id><snippet>&lt;form action="{% url 'set_language' %}" method="post"&gt;
  {% csrf_token %}
  &lt;input name="next" type="hidden" value="{{ request.get_full_path|slice:'3:' }}" /&gt;
  &lt;select name="language"&gt;
    {% get_language_info_list for LANGUAGES as languages %}
      {% for language in languages %}
        &lt;option value="{{ language.code }}"{% if language.code == LANGUAGE_CODE %} selected="selected"{% endif %}&gt;
          {{ language.name_local }} ({{ language.code }})
        &lt;/option&gt;
      {% endfor %}
  &lt;/select&gt;
  &lt;input type="submit" value="Change" /&gt;
&lt;/form&gt;
</snippet></ROW><ROW><id>18393243</id><snippet>&lt;form action="{% url 'set_language' %}" method="post"&gt;
  {% csrf_token %}
  &lt;input name="next" type="hidden" value="{{ request.get_full_path|slice:'3:' }}" /&gt;
  &lt;input name="language" type="hidden" value="es" /&gt;
  &lt;input type="submit" value="ES" /&gt;
&lt;/form&gt;
</snippet></ROW><ROW><id>18393476</id><snippet>self</snippet></ROW><ROW><id>18393476</id><snippet>class Website:
    def __init__(self, parser, spam, eggs):
        self.parser = parser
        # ...
    def fetch(self):
        data = # ...
        soup = self.parser(data)
        # ...

first_website = Website(parser_one, urls[0], 23)
second_website = Website(parser_one, urls[1], 42)
third_website = Website(parser_two, urls[2], 69105)
</snippet></ROW><ROW><id>18393476</id><snippet>websites = [Website(parser_one, urls[0], 23),
            Website(parser_two, urls[1], 42),
            # ...
           ]
</snippet></ROW><ROW><id>18393476</id><snippet>url,parser,spam
http://example.com/foo,parser_one,23
http://example.com/bar,parser_two,42
…
</snippet></ROW><ROW><id>18393476</id><snippet>with open('websites.csv') as f:
    websites = [Website(**row) for row in csv.DictReader(f)]
</snippet></ROW><ROW><id>18393816</id><snippet>if</snippet></ROW><ROW><id>18393816</id><snippet>def bar():
  global dec
  if a:
    dec = decorator_1
  else:
    dec = decorator_2

@dec
def foo():
  pass

bar()
</snippet></ROW><ROW><id>18393963</id><snippet>plot(kind='bar')</snippet></ROW><ROW><id>18393963</id><snippet>stars = Series(randint(1, 6, size=100))
vc = stars.value_counts().sort_index()
ax = vc.plot(kind='bar')
fig = ax.get_figure()
fig.autofmt_xdate()
</snippet></ROW><ROW><id>18393963</id><snippet>sum</snippet></ROW><ROW><id>18393963</id><snippet>vc /= float(vc.sum())
assert vc.sum() == 1
</snippet></ROW><ROW><id>18393963</id><snippet>new_labels = ['{0:.0%}'.format(float(x.get_text())) for x in ax.get_yticklabels()]
ax.set_yticklabels(new_labels)
</snippet></ROW><ROW><id>18394044</id><snippet>for sequence, value in enumerate(random.sample(range(1000), 7)):
    # do something with value and sequence
</snippet></ROW><ROW><id>18394125</id><snippet>count_odd_values = sum(value % 2 for value in random.sample(range(1000), 250))
</snippet></ROW><ROW><id>18394125</id><snippet>value % 2 == 0</snippet></ROW><ROW><id>18394125</id><snippet>value % 2 == 1</snippet></ROW><ROW><id>18394464</id><snippet>scipy.interpolate.interp1d</snippet></ROW><ROW><id>18394464</id><snippet>numpy.interp</snippet></ROW><ROW><id>18394464</id><snippet>def trailing_diff(time, data, diff):
    ret = np.zeros_like(data)
    mask = (time - time[0]) &gt;= diff
    ret[mask] = data[mask] - np.interp(time[mask] - diff,
                                       time, data)
    return ret

time = np.arange(10) + np.random.rand(10)/2
weight = 82 + np.random.rand(10)

&gt;&gt;&gt; time
array([ 0.05920317,  1.23000929,  2.36399981,  3.14701595,  4.05128494,
        5.22100886,  6.07415922,  7.36161563,  8.37067107,  9.11371986])
&gt;&gt;&gt; weight
array([ 82.14004969,  82.36214992,  82.25663272,  82.33764514,
        82.52985723,  82.67820915,  82.43440796,  82.74038368,
        82.84235675,  82.1333915 ])
&gt;&gt;&gt; trailing_diff(time, weight, 3)
array([ 0.        ,  0.        ,  0.        ,  0.18093749,  0.20161107,
        0.4082712 ,  0.10430073,  0.17116831,  0.20691594, -0.31041841])
</snippet></ROW><ROW><id>18394464</id><snippet>from scipy.interpolate import interp1d

def trailing_diff(time, data, diff):
    ret = np.zeros_like(data)
    mask = (time - time[0]) &gt;= diff
    interpolator = interp1d(time, data, kind='nearest')
    ret[mask] = data[mask] - interpolator(time[mask] - diff)
    return ret
</snippet></ROW><ROW><id>18394478</id><snippet>prime[n]</snippet></ROW><ROW><id>18394478</id><snippet>n</snippet></ROW><ROW><id>18394478</id><snippet>range</snippet></ROW><ROW><id>18394478</id><snippet>step</snippet></ROW><ROW><id>18394478</id><snippet>def sieve(n):
    """Returns a list of primes less than n."""

    # n-long list, all entries initially True
    # prime[n] is True if we haven't found a factor of n yet.
    prime = [True]*n

    # 0 and 1 aren't prime
    prime[0], prime[1] = False, False

    for i in range(2, n):
        if prime[i]:
            # Loop from i*2 to n, in increments of i.
            # In other words, go through the multiples of i.
            for j in range(i*2, n, i):
                prime[j] = False

    return [x for x, x_is_prime in enumerate(prime) if x_is_prime]
</snippet></ROW><ROW><id>18394965</id><snippet>$ pyfasta split -n 6 original.fasta
</snippet></ROW><ROW><id>18394965</id><snippet>csplit</snippet></ROW><ROW><id>18394965</id><snippet>split</snippet></ROW><ROW><id>18394965</id><snippet>csplit -zk original.fasta "/^&gt;/+&lt;offset&gt;" "{*}"
</snippet></ROW><ROW><id>18395176</id><snippet>import pymel.core as pm

const = pm.geometryConstraint('pSphere1', 'locator1', n='geoConstraint')
print const
const.rename('fred')
print const
</snippet></ROW><ROW><id>18395176</id><snippet>geoConstraint
fred
</snippet></ROW><ROW><id>18395445</id><snippet>request.FILES['file'].name
</snippet></ROW><ROW><id>18395445</id><snippet>handle_uploaded_file(f)</snippet></ROW><ROW><id>18395445</id><snippet>f.name</snippet></ROW><ROW><id>18395445</id><snippet>def upload_file(request):
    if request.method == 'POST':
        form = YourForm(request.POST, request.FILES)
        if form.is_valid():            
            data = loginForm.cleaned_data
            username = data['username']
            first_name = data['first_name']
            #you can retrieve the filename here
            filename = request.FILES['file'].name            
            handle_uploaded_file(request.FILES['file'])
            #...
            return HttpResponseRedirect('/success/url/')
    else:
        form = YourForm()

    return render_to_response('your.html', {'form': form})

def handle_uploaded_file(f):
    #or here
    filename = f.name
    #...
    with open('some/file/name.txt', 'wb+') as destination:
        for chunk in f.chunks():
            destination.write(chunk)
</snippet></ROW><ROW><id>18395611</id><snippet>objdump -d</snippet></ROW><ROW><id>18395611</id><snippet>00000000004c79b8</snippet></ROW><ROW><id>18395611</id><snippet>00007fadd233a9a3</snippet></ROW><ROW><id>18395611</id><snippet>objdump -d /lib/x86_64-linux-gnu/libc-2.17.so|less
</snippet></ROW><ROW><id>18395611</id><snippet>7fadd21f8000</snippet></ROW><ROW><id>18395611</id><snippet>&gt;&gt;&gt; hex(0x00007fadd233a9a3-0x7fadd21f8000)
'0x1429a3'
</snippet></ROW><ROW><id>18395613</id><snippet>list(line.rstrip())</snippet></ROW><ROW><id>18395613</id><snippet>list()</snippet></ROW><ROW><id>18395613</id><snippet>with open('filname') as f:
    result = [list(line.rstrip()) for line in f]
</snippet></ROW><ROW><id>18395613</id><snippet>file.readlines</snippet></ROW><ROW><id>18395613</id><snippet>&gt;&gt;&gt; list("foobar")
['f', 'o', 'o', 'b', 'a', 'r']
</snippet></ROW><ROW><id>18395824</id><snippet>li[src='provConf.html'] a</snippet></ROW><ROW><id>18395906</id><snippet>&gt;&gt;&gt; np.count_nonzero(np.eye(4))
4
&gt;&gt;&gt; np.count_nonzero([[0,1,7,0,0],[3,0,0,2,19]])
5
</snippet></ROW><ROW><id>18395909</id><snippet>def read_utf8(filename):
    with codecs.open(filename, mode="r", encoding="utf8") as f:
         return f.read()

header = read_utf8("static/header")
</snippet></ROW><ROW><id>18396393</id><snippet>dir()</snippet></ROW><ROW><id>18396393</id><snippet>&gt;&gt;&gt; start_date = datetime.today() - timedelta(days=30)
&gt;&gt;&gt; start_date
datetime.datetime(2013, 7, 24, 13, 37, 11, 869997)
&gt;&gt;&gt; start_date.isocalendar()[1]
30
</snippet></ROW><ROW><id>18396811</id><snippet>{
    "filtered" : {
        "query" : {
            "range": {
                "added" : {
                    "from" : "2013-04-11T00:00:00"
                }
            }
        },
        "filter" : {
            "not" : {
                "filter" : {
                    "ids" : {
                        "values" : ["123", "456", "789"]
                    }
                },
                "_cache" : true
            }
        }
    }
}
</snippet></ROW><ROW><id>18396811</id><snippet>not</snippet></ROW><ROW><id>18396811</id><snippet>_cache: true</snippet></ROW><ROW><id>18396811</id><snippet>not</snippet></ROW><ROW><id>18396845</id><snippet>instanceof</snippet></ROW><ROW><id>18396845</id><snippet>isinstance</snippet></ROW><ROW><id>18396845</id><snippet>from package import FooIFC
from package import Foo

if isinstance(FooIFC.getinstance(), Foo):
    print "Foo"
else:
    print "FooBar"
</snippet></ROW><ROW><id>18397371</id><snippet>class Request:
    def __init__ (self, method):
        self.method = method

def another_decorator (f):
    print ("another")
    return f

def decorator_for_post (f):
    def g (request, *args, **kwargs):
        if request.method == "POST":
            return another_decorator (f) (request, *args, **kwargs)
        return f (request, *args, **kwargs)
    return g

@decorator_for_post
def x (request):
    print ("doing x")

print ("GET")
x (Request ("GET") )
print ("POST")
x (Request ("POST") )
</snippet></ROW><ROW><id>18397643</id><snippet>flash(message, category='message')</snippet></ROW><ROW><id>18397643</id><snippet>@app.route('/')
def index():
    flash('Hello world!', category='success')
    return render_template('index.html')
</snippet></ROW><ROW><id>18398024</id><snippet>p</snippet></ROW><ROW><id>18398024</id><snippet>q</snippet></ROW><ROW><id>18398024</id><snippet>p + q == 7</snippet></ROW><ROW><id>18398024</id><snippet>while np.all(p + q == 7):
</snippet></ROW><ROW><id>18398024</id><snippet>while np.any(p + q == 7):
</snippet></ROW><ROW><id>18398322</id><snippet>from collections import defaultdict
test_classes = {
    'test1': test1,
    'test2': test2
}
test_instances = defaultdict(list)
test_instances[testvariable].append(test_classes[testvariable])
</snippet></ROW><ROW><id>18399069</id><snippet>__exit__</snippet></ROW><ROW><id>18399069</id><snippet>__exit__</snippet></ROW><ROW><id>18399069</id><snippet>def __exit__(self, type, value, traceback):
    self.output_pipe.close()  # always close the file
    if type is not None: # an exception has occurred
        os.unlink(...)   # remove the file
        return False     # reraise the exception
</snippet></ROW><ROW><id>18399069</id><snippet>return False</snippet></ROW><ROW><id>18399069</id><snippet>None</snippet></ROW><ROW><id>18399069</id><snippet>self.output()</snippet></ROW><ROW><id>18399069</id><snippet>Processor</snippet></ROW><ROW><id>18399069</id><snippet>with self.output().open('w') as output:
</snippet></ROW><ROW><id>18399069</id><snippet>with self.output() as output:
</snippet></ROW><ROW><id>18399069</id><snippet>__enter__</snippet></ROW><ROW><id>18399069</id><snippet>def __enter__(self):
    return self.output_pipe.open('w')
</snippet></ROW><ROW><id>18399461</id><snippet>plone:portletrenderer</snippet></ROW><ROW><id>18399461</id><snippet>&lt;include package="plone.app.portlets" /&gt;

&lt;plone:portletRenderer
   portlet="plone.app.portlets.portlets.navigation.INavigationPortlet"
   class=".my.module.MyRenderer"
   layer=".interfaces.IMyPackageLayer"
   /&gt;
</snippet></ROW><ROW><id>18399461</id><snippet>from plone.app.portlets.portlets.navigation import Renderer as NavigationRenderer


class MyRenderer(NavigationRenderer):

    _template = ViewPageTemplateFile('template/my_navi_template.pt')
</snippet></ROW><ROW><id>18399461</id><snippet>&lt;include package="plone.app.portlets" /&gt;</snippet></ROW><ROW><id>18399461</id><snippet>&lt;?xml version="1.0"?&gt;
&lt;layers&gt;
    &lt;layer name="my.package.layer"
           interface="my.package.interfaces.IMyPackageLayer" /&gt;
&lt;/layers&gt;
</snippet></ROW><ROW><id>18399461</id><snippet>from zope.interface import Interface


class IMyPackageLayer(Interface):
    """Request marker interface"""
</snippet></ROW><ROW><id>18399878</id><snippet># -*- coding: utf-8 -*-
import xmltodict

data = """&lt;wordbook&gt;
  &lt;item&gt;
    &lt;name&gt;engrossment&lt;/name&gt;
    &lt;phonetic&gt;&lt;![CDATA[ɪn'grəʊsmənt]]&gt;&lt;/phonetic&gt;
    &lt;meaning&gt;&lt;![CDATA[n. 正式缮写的文件，专注]]&gt;&lt;/meaning&gt;
  &lt;/item&gt;
  &lt;item&gt;
    &lt;name&gt;graffiti&lt;/name&gt;
    &lt;phonetic&gt;&lt;![CDATA[ɡrəˈfi:ti:]]&gt;&lt;/phonetic&gt;
    &lt;meaning&gt;&lt;![CDATA[n.在墙上的乱涂乱写（复数形式）]]&gt;&lt;/meaning&gt;
  &lt;/item&gt;
  &lt;item&gt;
    &lt;name&gt;pathology&lt;/name&gt;
    &lt;phonetic&gt;&lt;![CDATA[pæˈθɔlədʒi:]]&gt;&lt;/phonetic&gt;
    &lt;meaning&gt;&lt;![CDATA[n. 病理（学）;〈比喻〉异常状态]]&gt;&lt;/meaning&gt;
  &lt;/item&gt;
&lt;/wordbook&gt;"""

data = xmltodict.parse(data, encoding='utf-8')

for item in data['wordbook']['item']:
    print item['name']
</snippet></ROW><ROW><id>18399878</id><snippet>engrossment
graffiti
pathology
</snippet></ROW><ROW><id>18399878</id><snippet>item</snippet></ROW><ROW><id>18399878</id><snippet>Item</snippet></ROW><ROW><id>18400055</id><snippet>a[(a &gt; 54.5) &amp; (a &lt;  81.75)].size / float(a.size)
</snippet></ROW><ROW><id>18400055</id><snippet>In [6]: a = np.random.randint(1, 110, 1000000)
In [7]: %%timeit
        percentileofscore(a, 81.75) - percentileofscore(a, 54.5)
1 loops, best of 3: 373 ms per loop
In [8]: %%timeit
        a[(a &gt; 54.5) &amp; (a &lt;  81.75)].size / float(a.size)
10 loops, best of 3: 20.5 ms per loop
</snippet></ROW><ROW><id>18400055</id><snippet>percentileofscore</snippet></ROW><ROW><id>18400282</id><snippet>values()</snippet></ROW><ROW><id>18400282</id><snippet>__ordering__ = [ 'single', 'double' ]
</snippet></ROW><ROW><id>18400282</id><snippet>values()</snippet></ROW><ROW><id>18400282</id><snippet>dict.items()</snippet></ROW><ROW><id>18400282</id><snippet>class EnumMeta(type):
    def __new__(typ, name, bases, attrs):
        cls_attrs = {}
        cls_choices = {}

        for attr_name, value in attrs.items():
            cls_attrs[attr_name] = attr_name.lower()
            if not attr_name.startswith("__"):
                cls_choices[attr_name.lower()] = value

        ordering = attrs.get('__ordering__')
        if ordering == None:
            ordering = sorted(cls_choices.keys())

        def choices(cls):
            return dict(cls_choices)

        def values(cls, value=None):
            if value is None:
                return [ (k, cls_choices[k] ) for k in ordering ]
            elif not isinstance(value, basestring):
                return [ (k, cls_choices[k] ) for k in value ]
            else:
                return unicode(cls_choices.get(value))

        def keys(cls, nil=False):
            items = list(ordering)
            if nil:
                items.append('')

            return items

        def combined_length(cls):
            return len(",".join(cls.values().keys()))

        def max_length(cls):
            return max(map(len, cls.values().keys()))

        cls_attrs['choices'] = classmethod(choices)
        cls_attrs['values'] = classmethod(values)
        cls_attrs['keys'] = classmethod(keys)
        cls_attrs['combined_length'] = classmethod(combined_length)
        cls_attrs['max_length'] = classmethod(max_length)

        return type(name, bases, cls_attrs)

class SideHemType:
    __ordering__ = ['double', 'single']
    __metaclass__ = EnumMeta

    Single = "Single side hem for opaque fabrics"
    Double = "Double side hem for transparent fabrics"


print SideHemType.keys()
print SideHemType.values()
</snippet></ROW><ROW><id>18400426</id><snippet>{% static %}</snippet></ROW><ROW><id>18400426</id><snippet>STATICFILES_STORAGE</snippet></ROW><ROW><id>18400426</id><snippet>STATIC_URL</snippet></ROW><ROW><id>18400426</id><snippet> https://s3.amazonaws.com/bucket/file.ext?signature=1234
</snippet></ROW><ROW><id>18400426</id><snippet>{% static %}</snippet></ROW><ROW><id>18400426</id><snippet>STATIC_URL</snippet></ROW><ROW><id>18400426</id><snippet>STATIC_URL</snippet></ROW><ROW><id>18400567</id><snippet>filter</snippet></ROW><ROW><id>18400567</id><snippet>map</snippet></ROW><ROW><id>18400567</id><snippet>filter(condition, map(lambda name: initial-expression, collection))
</snippet></ROW><ROW><id>18401088</id><snippet>re.search()</snippet></ROW><ROW><id>18401088</id><snippet>None</snippet></ROW><ROW><id>18401088</id><snippet>None</snippet></ROW><ROW><id>18401088</id><snippet>post_start = re.search('&lt;div class="post"&gt;', html)
if post_start is None:
    raise AttributeError('you can\'t change &lt;div class="post"&gt;')
</snippet></ROW><ROW><id>18401158</id><snippet>with open("0.txt") as f:
    t=[x.rstrip("\n").split("\t") for x in f.readlines()]
    intervals=[(int(x[0]),int(x[1])) for x in t]

def find_ints(intervals, mn, mx):
    next_start = mn
    for x in intervals:
        if next_start &lt; x[0]:
            yield next_start,x[0]
            next_start = x[1]
        elif next_start &lt; x[1]:
            next_start = x[1]
    if next_start &lt; mx:
        yield next_start, mx

print list(find_ints(intervals, 0, 200))
</snippet></ROW><ROW><id>18401158</id><snippet>[(0, 1), (8, 9), (12, 20), (30, 200)]
</snippet></ROW><ROW><id>18401169</id><snippet>MongoClient</snippet></ROW><ROW><id>18401169</id><snippet>client = pymongo.MongoClient()

# some code here

client.close()
</snippet></ROW><ROW><id>18401169</id><snippet>close()</snippet></ROW><ROW><id>18401439</id><snippet>from dateutil import parser
import pytz
UTC = pytz.timezone('UTC')
date = parser.parse("2013-08-23T15:23:03+05:30")
dateutc = date.astimezone(UTC)
print dateutc.isoformat() 
# or user strptime to have in the format you want (without time zone)
print dateutc.strftime("%Y-%m-%dT%H:%M:%S")
</snippet></ROW><ROW><id>18401452</id><snippet>n</snippet></ROW><ROW><id>18401452</id><snippet>n = graph_db.create({"name": "Smith"})
</snippet></ROW><ROW><id>18401452</id><snippet>n, = graph_db.create({"name": "Smith"})
</snippet></ROW><ROW><id>18401461</id><snippet>'id'</snippet></ROW><ROW><id>18401461</id><snippet>'pk'</snippet></ROW><ROW><id>18401461</id><snippet>_id</snippet></ROW><ROW><id>18401461</id><snippet>db.user.find( { 'email' : 'test@mail.com', '_id' : { '$ne' : ObjectId("51d41232ccf2f1a165a92ca6")} } )
</snippet></ROW><ROW><id>18401461</id><snippet>User.objects.filter(email = 'test@mail.com').filter(id__ne="51f7f13fca798933a0c70f69")</snippet></ROW><ROW><id>18401461</id><snippet>&gt;&gt;&gt;User.object.query(my_query)
</snippet></ROW><ROW><id>18401461</id><snippet>object</snippet></ROW><ROW><id>18401461</id><snippet>objects</snippet></ROW><ROW><id>18401461</id><snippet>objects</snippet></ROW><ROW><id>18401461</id><snippet>query</snippet></ROW><ROW><id>18401461</id><snippet>&gt;&gt;&gt; res = User.objects.filter(email = 'email51@acme.com')
&gt;&gt;&gt; res[0].email
u'email51@acme.com'
</snippet></ROW><ROW><id>18401461</id><snippet>User.objects.filter(email = 'email51@acme.com').filter(id__ne="ObjectId('51d41232ccf2f1a165a92cab')")
mongoengine.errors.ValidationError: ObjectId('51d41232ccf2f1a165a92cab') is not a valid ObjectId
</snippet></ROW><ROW><id>18401461</id><snippet>User.objects.filter(email = 'email51@acme.com').filter(id__ne="51d41232ccf2f1a165a92cab")
</snippet></ROW><ROW><id>18401839</id><snippet>from dateutil import parser
import pytz
FR = pytz.timezone('Europe/Paris') # there is the summer offset changing in this zone
date = parser.parse("2013-08-23T23:37:38+0000")
datefr = date.astimezone(FR)
</snippet></ROW><ROW><id>18402779</id><snippet>from BaseHTTPServer import BaseHTTPRequestHandler, HTTPServer
import cgi

class Handler(BaseHTTPRequestHandler):
    def do_GET(self):
        self.send_response(200)
        self.end_headers()
        self.wfile.write("""
            &lt;html&gt;&lt;head&gt;&lt;/head&gt;
            &lt;body&gt;
            &lt;form method="POST"&gt;
            your mood:
            &lt;textarea name="mood"&gt;
            &lt;/textarea&gt;
            &lt;input type="submit" name="submit" value="submit"&gt;
            &lt;/form&gt;
            &lt;/body&gt;
            &lt;/html&gt;
            """)
        return

    def do_POST(self):
        form = cgi.FieldStorage(
            fp=self.rfile, 
            headers=self.headers,
            environ={'REQUEST_METHOD':'POST',
                     'CONTENT_TYPE':self.headers['Content-Type'],
                     })
        themood = form["mood"]
        hap=['amused','beaming','blissful','blithe','cheerful','cheery','delighted']
        sad=['upset','out','sorry','not in mood','down']
        sad_count=0
        happy_count=0
        happy_count=len(filter(lambda x:x in themood.value,hap)) 
        sad_count=len(filter(lambda x:x in themood.value,sad))
        if(happy_count&gt;sad_count):
            self.wfile.write("Hey buddy...your mood is HAPPY :-)")
        elif(sad_count&gt;happy_count):
            self.wfile.write("Ouch! Your Mood is Sad :-(")
        elif(happy_count==sad_count):
            if(happy_count&gt;0 and sad_count&gt;0):
                self.wfile.write("oops! You are in CONFUSED mood :o")
            else:
                self.wfile.write("Sorry,No mood found :&gt;")
        return
server = HTTPServer(('', 8181), Handler)
server.serve_forever()
</snippet></ROW><ROW><id>18402818</id><snippet>$ python -c "print r'\\'"
  File "&lt;string&gt;", line 1
    print r'\'
             ^
SyntaxError: EOL while scanning string literal
</snippet></ROW><ROW><id>18402818</id><snippet>\\</snippet></ROW><ROW><id>18402818</id><snippet>\</snippet></ROW><ROW><id>18402818</id><snippet>$ python -c 'print r"\\"'
\\
</snippet></ROW><ROW><id>18402818</id><snippet>print</snippet></ROW><ROW><id>18402818</id><snippet>$ python -c "print r'\\\\'"
\\
</snippet></ROW><ROW><id>18403015</id><snippet>MoreData</snippet></ROW><ROW><id>18403015</id><snippet>md</snippet></ROW><ROW><id>18403015</id><snippet>void *</snippet></ROW><ROW><id>18403015</id><snippet>c_void_p</snippet></ROW><ROW><id>18403336</id><snippet>class MyTCPHandler(SocketServer.BaseRequestHandler):
      def handle(self):
            self.DriveSend = self.request.recv(1024).strip()
            self.SteeringSend = self.request.recv(1024).strip()
            MotorControl(self)
            return (self.DriveSend,self.SteeringSend)

def MotorControl(motor_var):
      print(motor_var.DriveSend)
      print(motor_var.SteeringSend)
      print('test')
</snippet></ROW><ROW><id>18403336</id><snippet>self</snippet></ROW><ROW><id>18403354</id><snippet>def make_fruit(name, kwargs):
    def my_init(self):
        Fruit.__init__(self, **kwargs)
    return type(name, (Fruit,), {'__init__': my_init})

Apple = make_fruit('Apple', apple)
</snippet></ROW><ROW><id>18403861</id><snippet>filter_by(type=1)
</snippet></ROW><ROW><id>18403861</id><snippet>for l, c in session.query(Player.level, func.count(Player.level)).\
                          group_by(Player.level).filter_by(type=1).all()
</snippet></ROW><ROW><id>18404026</id><snippet>import urllib
s = "%D0%9D%D2%B1%D1%80%D1%81%D2%B1%D0%BB%D1%82%D0%B0%D0%BD_%D3%98%D0%B1%D1%96%D1%88%D2%B1%D0%BB%D1%8B_%D0%9D%D0%B0%D0%B7%D0%B0%D1%80%D0%B1%D0%B0%D0%B5%D0%B"
print urllib.unquote(s)
</snippet></ROW><ROW><id>18404026</id><snippet>Нұрсұлтан_Әбішұлы_Назарбаев
</snippet></ROW><ROW><id>18404026</id><snippet>urllib.unquote</snippet></ROW><ROW><id>18404026</id><snippet>urllib.parse.unquote()</snippet></ROW><ROW><id>18404070</id><snippet>dict()</snippet></ROW><ROW><id>18404070</id><snippet>str.split</snippet></ROW><ROW><id>18404070</id><snippet>&gt;&gt;&gt; s = "1:5.9,1p5:7,2:10,4:18,8:40"
&gt;&gt;&gt; dict(item.split(':') for item in s.split(','))
{'1': '5.9', '8': '40', '2': '10', '4': '18', '1p5': '7'}
</snippet></ROW><ROW><id>18404070</id><snippet>&gt;&gt;&gt; {k:v for k, v in (item.split(':') for item in s.split(','))}
{'1': '5.9', '8': '40', '2': '10', '4': '18', '1p5': '7'}
</snippet></ROW><ROW><id>18404176</id><snippet>u</snippet></ROW><ROW><id>18404176</id><snippet>json</snippet></ROW><ROW><id>18404176</id><snippet>json.dumps(checklist.json()['list'])</snippet></ROW><ROW><id>18404198</id><snippet>concatenate((a,b),1)</snippet></ROW><ROW><id>18404198</id><snippet>hstack((a,b))</snippet></ROW><ROW><id>18404198</id><snippet>column_stack((a,b))</snippet></ROW><ROW><id>18404198</id><snippet>c_[a,b]</snippet></ROW><ROW><id>18404276</id><snippet>__init__</snippet></ROW><ROW><id>18404276</id><snippet>class SomethingView(FormView):
    def get_form_kwargs(self, *args, **kwargs):
        return dict(
            super(SomethingView, self).get_form_kwargs(*args, **kwargs),
            **{'user': self.request.user}
        )
</snippet></ROW><ROW><id>18404276</id><snippet>class SomethingForm(forms.modelForm):
    def __init__(self, *args, **kwargs):
        self.user = kwargs.pop('user', None)
        self.fields['user'].initial = self.user.id
        super(SomethingForm, self).__init__(*args, **kwargs)
</snippet></ROW><ROW><id>18404496</id><snippet>   y = {"red":3, "blue":4, "green":2, "yellow":5} 
   frequencies = {key:float(value)/sum(y.values()) for (key,value) in y.items()}
</snippet></ROW><ROW><id>18404496</id><snippet>   combination = ["red", "green", "green"]
   prob = 1. # initialized to 1
   for ii in combination:
       prob *= frequencies[ii]
   print prob
   0.00437317784257
</snippet></ROW><ROW><id>18404795</id><snippet>import random
d = {"xtest": "yblob", "xtest1": "yblob1", "xtest2": "yblob2", "xtest3": "yblob3", "xtest4": "yblob4", "None": "None"}

#choose a random x
x = random.choice(d.keys())
if x == "None":
    proxy = None
else:
   y = d[x]
   proxy = {"http": "%s:%s" % (x, y)}
</snippet></ROW><ROW><id>18404829</id><snippet>$ python setup.py build_ext --inplace</snippet></ROW><ROW><id>18404829</id><snippet>sudo ln -s /usr/bin/gcc /usr/bin/gcc-4.2</snippet></ROW><ROW><id>18404829</id><snippet>$ python userect.py</snippet></ROW><ROW><id>18404929</id><snippet>import subprocess
PIPE = subprocess.PIPE
proc = subprocess.Popen(cmd, stdout=PIPE, stderr=PIPE)
output, err = proc.communicate()
errcode = proc.returncode
</snippet></ROW><ROW><id>18405221</id><snippet>import pandas as pd
import numpy as np
data = np.random.random((8,3))*10000
df = pd.DataFrame (data)
pd.options.display.float_format = '{:20,.2f}'.format
print(df)
</snippet></ROW><ROW><id>18405221</id><snippet>                     0                    1                    2
0             4,839.01             6,170.02               301.63
1             4,411.23             8,374.36             7,336.41
2             4,193.40             2,741.63             7,834.42
3             3,888.27             3,441.57             9,288.64
4               220.13             6,646.20             3,274.39
5             3,885.71             9,942.91             2,265.95
6             3,448.75             3,900.28             6,053.93
</snippet></ROW><ROW><id>18405221</id><snippet>pd.set_option</snippet></ROW><ROW><id>18405221</id><snippet>pd.describe_option</snippet></ROW><ROW><id>18405221</id><snippet>display.float_format: [default: None] [currently: None] : callable
        The callable should accept a floating point number and return
        a string with the desired format of the number. This is used
        in some places like SeriesFormatter.
        See core.format.EngFormatter for an example.
</snippet></ROW><ROW><id>18405458</id><snippet>while throws != maxthrows:
    throws += 1
    dice = random.randrange(6)
    if dice % 2 == 1:
        odd += 1
    else:
        even += 1
</snippet></ROW><ROW><id>18405458</id><snippet>if ... break</snippet></ROW><ROW><id>18405597</id><snippet>int</snippet></ROW><ROW><id>18405597</id><snippet>&gt;&gt;&gt; n = 8.92138
&gt;&gt;&gt; '%.42f' % n   # what n really is
'8.921379999999999199644662439823150634765625'
&gt;&gt;&gt; 100000 * n # result is slightly lower than 892138
892137.9999999999
&gt;&gt;&gt; int(100000 * n) # int takes the floor
892137
</snippet></ROW><ROW><id>18405632</id><snippet>mydict = {'Rust': {'definition':'rusts definition'},
          'Iron': {'definition':'iron definition'},
          'Pyrite': {'definition':'pyrite definition'}}

myorder = ['Pyrite', 'Rust', 'Iron']

from collections import OrderedDict

ordered = OrderedDict()
for k in myorder:
    ordered[k] = mydict[k]
</snippet></ROW><ROW><id>18405632</id><snippet>ordered = OrderedDict((k, mydict[k]) for k in myorder)
</snippet></ROW><ROW><id>18405632</id><snippet>ordered</snippet></ROW><ROW><id>18405632</id><snippet>mydict</snippet></ROW><ROW><id>18405632</id><snippet>myorder</snippet></ROW><ROW><id>18405632</id><snippet>OrderedDict</snippet></ROW><ROW><id>18405632</id><snippet>for k in myorder:
    x = mydict[k] # do something with x
</snippet></ROW><ROW><id>18405886</id><snippet>abs</snippet></ROW><ROW><id>18405886</id><snippet>fitness_levels = [-20, 23, -55, 11, 10, -18, -48, 16, -60, 20, 22, 16, 21, 66, 10, 46, -42]
a,b = sorted(fitness_levels[:2], key=abs) # setting defaults. a&lt;=b
ia, ib = 0,1 # indices
for i,val in enumerate(fitness_levels[2:]): # use itertools.islice for large lists (for constant space)
  if abs(val) &lt; abs(a):
    b,a = a,val
    ib, ia = ia, i
  elif abs(val) &lt; abs(b):
    b = val
    ib = i
</snippet></ROW><ROW><id>18406034</id><snippet>'\n'</snippet></ROW><ROW><id>18406034</id><snippet>str.format()</snippet></ROW><ROW><id>18406035</id><snippet>    def __iter__(self):
        for v, k in self._rating:
            yield k
        iterkeys = __iter__

    def keys(self):
        return list(self)

    #the three ratings-related methods
    def rating(self, key):
        item = self[key], key
        i = bisect_left(self._rating, item)
        if item == self._rating[i]:
            return i
        raise LookUpError, "item not found in rating"

    def getValueByRating(self, rating):
        return self._rating[rating][0]

    def getKeyByRating(self, rating):
        return self._rating[rating][1]

    def _test( ):
        ''' we use doctest to test this module, which must be named
        rating.py, by validating all the examples in docstrings. '''
        import doctest, rating
        doctest.testmod(rating)
        print "doc test?"
</snippet></ROW><ROW><id>18406035</id><snippet>class Ratings(UserDict.DictMixin, dict):
    '''The implementation carefully mixes inheritance and delegation
    to achieve reasonable performance while minimizing boilerplate,
    and, of course, to ensure semantic correctness as above. All
    mappings' methods not implemented below get inherited, mostly
    from DictMixin, but, crucially!, __getitem__ from dict. '''

    def __init__(self, *args, **kwds):
        ''' This class gets instantiated just like 'dict' '''
        dict.__init__(self, *args, **kwds)
        # self._rating is the crucial auxiliary data structure: a list
        # of all (value, key) pairs, kept in "natural"ly-sorted order
        self._rating = [ (v, k) for k, v in dict.iteritems(self) ]
        self._rating.sort()

    def copy(self):
        ''' Provide an identical but independent copy '''
        return Ratings(self)

    def __setitem__(self, k, v):
        ''' besides delegating to dict, we maintain self._rating '''
        if k in self:
            del self._rating[self.rating(k)]  ##
        dict.__setitem__(self, k, v)
        insort_left(self._rating, (v, k))

    def __delitem__(self, k):
        ''' besides delegating to dict, we maintain self._rating '''
        del self._rating[self.rating(k)]
        dict.__delitem__(self, k)
        ''' delegate some methods to dict explicitly to avoid getting
        DictMixin's slower (though correct) implementations instead '''
        __len__ = dict.__len__
        __contains__ = dict.__contains__
        has_key = __contains__
        ''' the key semantic connection between self._rating and the order
        of self.keys( ) -- DictMixin gives us all other methods 'for
        free', although we could implement them directly for slightly
        better performance. '''

    def __iter__(self):
        for v, k in self._rating:
            yield k
        iterkeys = __iter__

    def keys(self):
        return list(self)

    #the three ratings-related methods
    def rating(self, key):
        item = self[key], key
        i = bisect_left(self._rating, item)
        if item == self._rating[i]:
            return i
        raise LookUpError, "item not found in rating"

    def getValueByRating(self, rating):
        return self._rating[rating][0]

    def getKeyByRating(self, rating):
        return self._rating[rating][1]

    def _test( ):
        ''' we use doctest to test this module, which must be named
        rating.py, by validating all the examples in docstrings. '''
        import doctest, rating
        doctest.testmod(rating)
        print "doc test?"

if __name__ == "__main__":

    r = Ratings({"bob":30, "john":30})

    print "r is"
    print r
    print "\n"
    print "len(r) is"
    print len(r)
    print "\n"
    print "updating with {'paul': 20, 'tom': 10} "
    r.update({"paul": 20, "tom": 10})
    print "\n"
    print "now r is"
    print r
    print "\n"
    print "r.has_key('paul') is"
    print r.has_key("paul")
    print "\n"
    print " 'paul' in r is"
    print ("paul" in r)
    print "\n"
    print "r.has_key('alex') is"
    print r.has_key("alex")
    print "\n"
    print " 'alex' in r is"
    print ("alex" in r)
    print '\n'
    print 'r is'
    print r
    print "changing john to '20' with 'r['john']= 20' doesn't work. "
    r["john"]=20
</snippet></ROW><ROW><id>18406049</id><snippet>import random
errors = ['dog ate it', 'flying monkeys stole it', 'rabbits attacked it']
value = {'result': 'error', 'message': random.choice(errors)}
</snippet></ROW><ROW><id>18406090</id><snippet>list1 = ["372911000002001", "372809000001400", "372809000001500"]
list2 = ["372911000003100", "372909000001400", "372909000001500"]
for ii, jj in zip(list1, list2):
    newname = re.sub(ii,jj,ARN)  #re.sub returns ARN if no substitution done
    if newname != ARN:
       break
</snippet></ROW><ROW><id>18406276</id><snippet>time.sleep</snippet></ROW><ROW><id>18406276</id><snippet>import time
run = raw_input("Start? &gt; ")
mins = 0
# Only run if the user types in "start"
if run == "start":
    # This is saying "while we have not reached 20 minutes running"
    while mins != 20:
        print "&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;", mins
        # Sleep for a minute
        time.sleep(60)
        # Increment the minute total
        mins += 1
    # Bring up the dialog box here
</snippet></ROW><ROW><id>18406427</id><snippet>sqlalchemy.engine</snippet></ROW><ROW><id>18406427</id><snippet>Logger</snippet></ROW><ROW><id>18406427</id><snippet>logging.Logger</snippet></ROW><ROW><id>18406427</id><snippet>logging.getLogger(qualname)</snippet></ROW><ROW><id>18406427</id><snippet>fileConfig()</snippet></ROW><ROW><id>18406427</id><snippet>sqlalchemy.engine</snippet></ROW><ROW><id>18406697</id><snippet>&gt;&gt;</snippet></ROW><ROW><id>18406697</id><snippet>exec /usr/bin/python /home/jhon/workspace/producer/test.py &gt;&gt; output 2&gt;&amp;1
</snippet></ROW><ROW><id>18406697</id><snippet>import time
import sys

for i in range(100):
    time.sleep(1)
    sys.stdout.write('a'*i)
    sys.stdout.flush()
</snippet></ROW><ROW><id>18406765</id><snippet>yourapp/templates/foo.html</snippet></ROW><ROW><id>18406765</id><snippet>yourapp/templates/yourapp/foo.html</snippet></ROW><ROW><id>18406765</id><snippet>base.html</snippet></ROW><ROW><id>18406765</id><snippet>base.html</snippet></ROW><ROW><id>18406765</id><snippet>{% extends "yourapp/base.html" %}`. 
</snippet></ROW><ROW><id>18406765</id><snippet>{% extends "base.html" %}
</snippet></ROW><ROW><id>18406982</id><snippet>import itertools

def break_down(text):
    words = text.split()
    ns = range(1, len(words)) # n = 1..(n-1)
    for n in ns: # split into 2, 3, 4, ..., n parts.
        for idxs in itertools.combinations(ns, n):
            yield [' '.join(words[i:j]) for i, j in zip((0,) + idxs, idxs + (None,))]
</snippet></ROW><ROW><id>18406982</id><snippet>&gt;&gt;&gt; for x in break_down('the fast dog'):
...     print(x)
...
['the', 'fast dog']
['the fast', 'dog']
['the', 'fast', 'dog']

&gt;&gt;&gt; for x in break_down('the really fast dog'):
...     print(x)
...
['the', 'really fast dog']
['the really', 'fast dog']
['the really fast', 'dog']
['the', 'really', 'fast dog']
['the', 'really fast', 'dog']
['the really', 'fast', 'dog']
['the', 'really', 'fast', 'dog']
</snippet></ROW><ROW><id>18407002</id><snippet>import numpy as np, numpy.random,scipy,scipy.stats,scipy.signal,matplotlib.pyplot as plt
N = 1e5
minx = -10
maxx = 10
bins = 10000
w = 0.1 # kernel sigma

xs1 = np.random.normal(0, 1, size=N)
xs2 = np.random.normal(1.9, 0.01, size=N)
xs = np.r_[xs1, xs2]
hh,loc = scipy.histogram(xs, range=(minx, maxx), bins=bins)
kernel = scipy.stats.norm.pdf((loc[1:]+loc[:-1]) * .5, 0, w)
kde = scipy.signal.fftconvolve(hh, kernel, 'same')
plt.plot((loc[1:] + loc[:-1])*.5, kde)
</snippet></ROW><ROW><id>18407129</id><snippet>&lt;div class="ds_data"&gt;</snippet></ROW><ROW><id>18407129</id><snippet>img</snippet></ROW><ROW><id>18407129</id><snippet>find()</snippet></ROW><ROW><id>18407129</id><snippet>for search_text in ('HDMI ports quantity', 'DVI port'):
    pattern = re.compile(r'\s*%s\s*' % search_text)
    ds_data = soup.find(text=pattern).findNext('div', {'class': 'ds_data'})
    if ds_data.find('img', {'class': 'spacer_top n-sign'}):
        result_text = '0'
    else:
        result_text = ds_data.text
    print search_text, result_text
</snippet></ROW><ROW><id>18407129</id><snippet>HDMI ports quantity  1 
DVI port 0
</snippet></ROW><ROW><id>18407185</id><snippet>      cur.execute("""
                    INSERT INTO scoredata
                    (gameid, playerid, starter, pos, min, fgm, fga, tpm, tpa, ftm, fta, oreb, reb, ast, stl, blk, tos, pf, pts)
                    VALUES
                    (%s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s);
                    """)//*Remove me*
                        , (player[0], 
                           int(player[20]), 
                           int(player[19]), 
                           player[3], 
                           int(player[4]), 
                           int(player[5]), 
                           int(player[6]), 
                           int(player[7]), 
                           int(player[8]), 
                           int(player[9]), 
                           int(player[10]), 
                           int(player[11]), 
                           int(player[12]), 
                           int(player[13]), 
                           int(player[14]), 
                           int(player[15]), 
                           int(player[16]), 
                           int(player[17]), 
                           int(player[18]) )
        db.commit()
</snippet></ROW><ROW><id>18407282</id><snippet>or</snippet></ROW><ROW><id>18407282</id><snippet>or_</snippet></ROW><ROW><id>18407282</id><snippet>query.filter(or_(expr1, expr2))
</snippet></ROW><ROW><id>18407282</id><snippet>User.query().filter(or_(User.last_name.ilike(pattern),
                        User.first_name.ilike(pattern)))
</snippet></ROW><ROW><id>18407282</id><snippet>and_</snippet></ROW><ROW><id>18407282</id><snippet>not_</snippet></ROW><ROW><id>18407282</id><snippet>in_</snippet></ROW><ROW><id>18407282</id><snippet>expr1 | expr2</snippet></ROW><ROW><id>18407415</id><snippet>import lxml.html as html
import mechanize

br = mechanize.Browser()
page = br.open("http://www.urbandictionary.com/")

br.select_form(nr=0)
br["term"] = "skid"
br.submit()

fragment = html.fromstring(br.response().read())

print fragment.find_class('definition')[0].text_content()
</snippet></ROW><ROW><id>18407490</id><snippet>TypeError: Input z must be a 2D array. 
</snippet></ROW><ROW><id>18407490</id><snippet>print EF.shape, EB.shape, a.shape
(51,) (51,) (51,)
</snippet></ROW><ROW><id>18407490</id><snippet>X</snippet></ROW><ROW><id>18407490</id><snippet>Y</snippet></ROW><ROW><id>18407490</id><snippet>a = ((1+.5*(np.exp(1.7*X)+np.exp(1.7*Y)+np.exp(1.7*(X+Y))))/(1+np.exp(1.7*X)+np.exp(1.7*Y)+np.exp(1.7*(X+Y))))
c = plt.contour(EF,EB,a,30)
</snippet></ROW><ROW><id>18407490</id><snippet>(0,0)</snippet></ROW><ROW><id>18407593</id><snippet>with open("csv_file.csv", "a") as inputfile:
</snippet></ROW><ROW><id>18407928</id><snippet>D = {}
for k in open('data.txt'): #use dictionary to count and filter duplicate lines
    if k in D:
        D[k] += 1 #increase k by one if already seen.
    else:
        D[k]  = 1 #initialize key with one if seen for first time.

for sk in sorted(D): #sort keys 
    print(',', D[sk], sk.rstrip(), file=open('test.csv', 'a')) #print a comma, followed by number of lines plus line.   

#Output
, 3, 00.000.00.000, word, 00
, 1, 00.000.00.001, word, 00
, 2, 00.000.00.002, word, 00    
</snippet></ROW><ROW><id>18407936</id><snippet>continue</snippet></ROW><ROW><id>18407936</id><snippet>while</snippet></ROW><ROW><id>18407936</id><snippet>def test():
    for i in range(0, 3):
        while True:
            try:
                ...
                break
            except:
                continue # &lt;---
        break
</snippet></ROW><ROW><id>18407936</id><snippet>while</snippet></ROW><ROW><id>18407936</id><snippet>def test():
    for i in range(3):
        try:
            ...
            break
        except:
            continue
    else:
        return # Reach here if for loop was not ended by break
    print trans_array
</snippet></ROW><ROW><id>18408045</id><snippet>enumerate</snippet></ROW><ROW><id>18408045</id><snippet>def assign_ID(dic, id):
    for key in dic:
        if id in dic[key]:
            return key
</snippet></ROW><ROW><id>18408182</id><snippet>l2</snippet></ROW><ROW><id>18408182</id><snippet>l</snippet></ROW><ROW><id>18408182</id><snippet>l3</snippet></ROW><ROW><id>18408182</id><snippet>l</snippet></ROW><ROW><id>18408182</id><snippet>l</snippet></ROW><ROW><id>18408182</id><snippet>l3</snippet></ROW><ROW><id>18408182</id><snippet>l</snippet></ROW><ROW><id>18408182</id><snippet>l3</snippet></ROW><ROW><id>18408281</id><snippet>&gt;&gt;&gt; mylist1 = ['alpha', 'green']
&gt;&gt;&gt; mylist2 = ['blue', 'alpha', 'red']
&gt;&gt;&gt; sort_order = ['red', 'blue', 'green', 'alpha']
&gt;&gt;&gt; mylist1.sort(key=sort_order.index)
&gt;&gt;&gt; mylist1
['green', 'alpha']
&gt;&gt;&gt; mylist2.sort(key=sort_order.index)
&gt;&gt;&gt; mylist2
['red', 'blue', 'alpha']
</snippet></ROW><ROW><id>18408281</id><snippet>key</snippet></ROW><ROW><id>18408281</id><snippet>list.sort</snippet></ROW><ROW><id>18408281</id><snippet>key(element)</snippet></ROW><ROW><id>18408281</id><snippet>element</snippet></ROW><ROW><id>18408281</id><snippet>key</snippet></ROW><ROW><id>18408281</id><snippet>&gt;&gt;&gt; x = ["age", "Bonkers", "cheese"]
&gt;&gt;&gt; x.sort()
&gt;&gt;&gt; x
['Bonkers', 'age', 'cheese']
&gt;&gt;&gt; str.lower("Bonkers")
'bonkers'    
&gt;&gt;&gt; x.sort(key=str.lower)
&gt;&gt;&gt; x
['age', 'Bonkers', 'cheese']
</snippet></ROW><ROW><id>18408281</id><snippet>sort_order.index</snippet></ROW><ROW><id>18408281</id><snippet>sort_order</snippet></ROW><ROW><id>18408281</id><snippet>'red'</snippet></ROW><ROW><id>18408281</id><snippet>0</snippet></ROW><ROW><id>18408281</id><snippet>'blue'</snippet></ROW><ROW><id>18408281</id><snippet>1</snippet></ROW><ROW><id>18408281</id><snippet>sort_order</snippet></ROW><ROW><id>18408459</id><snippet>   #Create a Dictionary to represent the possible
   #exits from a location in an adventure game

def get_dir():
    good_answers = ["north", "south", "east", "west", "quit"]
    direction = raw_input("Enter your direction: ").lower()
    while direction not in good_answers:
        direction = raw_input("Bad direction, try again: ").lower()
    return direction

game = {"north" : "North leads to garden.",
    "south" : "South leads to the kitchen.",
    "east" : "East leads to the dining room.",
    "west" : "West leads to the living room."}

print "Press quit to exit"
direction = get_dir()
while direction != "quit":
    print game[direction]
    direction = get_dir()

print "Quitting..."
</snippet></ROW><ROW><id>18408713</id><snippet>scipy.ndimage.zoom</snippet></ROW><ROW><id>18408713</id><snippet>import matplotlib.pyplot as plt
import numpy as np

from scipy.ndimage import zoom
from mpl_toolkits.mplot3d import axes3d

# Receive standard Matplotlib data for 3d plot
X, Y, Z = axes3d.get_test_data(1) # '1' is a step requested data

#Calculate smooth data
pw = 10 #power of the smooth
Xsm = zoom(X, pw)
Ysm = zoom(Y, pw)
Zsm = zoom(Z, pw)

# Create blank plot
fig = plt.figure()
#Create subplots
ax1 = fig.add_subplot(211)
ax2 = fig.add_subplot(212)
# Plotting
ax1.contour(X, Y, Z)
ax2.contour(Xsm, Ysm, Zsm)

plt.show()
</snippet></ROW><ROW><id>18408849</id><snippet>mylist1 = ['test.alpha', 'test.green']
mylist2 = ['asdf.blue', 'asdf.alpha', 'asdf.red']
sort_order = ['red', 'blue', 'green', 'alpha']
mylist2.sort(key=lambda x: sort_order.index(x.split(".")[1]))
mylist1.sort(key=lambda x: sort_order.index(x.split(".")[1]))
print mylist2
print mylist1
</snippet></ROW><ROW><id>18408849</id><snippet>['asdf.red', 'asdf.blue', 'asdf.alpha']
['test.green', 'test.alpha']
</snippet></ROW><ROW><id>18408849</id><snippet>def sort_list(lst):
    sort_order = ['red', 'blue', 'green', 'alpha']
    lst.sort(key=lambda x: sort_order.index(x.split(".")[1]))
    return lst
</snippet></ROW><ROW><id>18408943</id><snippet>&gt;&gt;&gt; import pygame.midi as midi
&gt;&gt;&gt; midi.init()
&gt;&gt;&gt; midiout = midi.Output(0)
&gt;&gt;&gt; midiout.write_short(0xb0, 0x74, 124)
</snippet></ROW><ROW><id>18409021</id><snippet>file_path</snippet></ROW><ROW><id>18409021</id><snippet>file_handle</snippet></ROW><ROW><id>18409021</id><snippet>file_handle</snippet></ROW><ROW><id>18409021</id><snippet>ms = gdata.MediaSource(file_handle=blobinfo.open(), content_type="text/plain")</snippet></ROW><ROW><id>18409172</id><snippet>default = [{"One": 1, "Two": 2, "Three": 3}, {"One": 5, "Two": 6, "Three": 7},
           {"One": 9, "Two": 10, "Three" : 11}]
varying = {"One": [12,13,14,15], "Two": [20,21,23], "Three": [12,44]}

result = [dict(d.items() + [(k, x)])
              for d in default for k, v in varying.items() for x in v]

&gt;&gt;&gt; result
[{'One': 1, 'Three': 12, 'Two': 2},
 {'One': 1, 'Three': 44, 'Two': 2},
 {'One': 1, 'Three': 3, 'Two': 20},
 {'One': 1, 'Three': 3, 'Two': 21},
 {'One': 1, 'Three': 3, 'Two': 23},
 {'One': 12, 'Three': 3, 'Two': 2},
 {'One': 13, 'Three': 3, 'Two': 2},
 {'One': 14, 'Three': 3, 'Two': 2},
 {'One': 15, 'Three': 3, 'Two': 2},
 {'One': 5, 'Three': 12, 'Two': 6},
 {'One': 5, 'Three': 44, 'Two': 6},
 {'One': 5, 'Three': 7, 'Two': 20},
 {'One': 5, 'Three': 7, 'Two': 21},
 {'One': 5, 'Three': 7, 'Two': 23},
 {'One': 12, 'Three': 7, 'Two': 6},
 {'One': 13, 'Three': 7, 'Two': 6},
 {'One': 14, 'Three': 7, 'Two': 6},
 {'One': 15, 'Three': 7, 'Two': 6},
 {'One': 9, 'Three': 12, 'Two': 10},
 {'One': 9, 'Three': 44, 'Two': 10},
 {'One': 9, 'Three': 11, 'Two': 20},
 {'One': 9, 'Three': 11, 'Two': 21},
 {'One': 9, 'Three': 11, 'Two': 23},
 {'One': 12, 'Three': 11, 'Two': 10},
 {'One': 13, 'Three': 11, 'Two': 10},
 {'One': 14, 'Three': 11, 'Two': 10},
 {'One': 15, 'Three': 11, 'Two': 10}]
</snippet></ROW><ROW><id>18409172</id><snippet>result = []
for d in default:
    for k, v in varying.items():
        for x in v:
            result.append(dict(d.items() + [(k, x)]))
</snippet></ROW><ROW><id>18409172</id><snippet>list(d.items())</snippet></ROW><ROW><id>18409172</id><snippet>d.items()</snippet></ROW><ROW><id>18409208</id><snippet>x</snippet></ROW><ROW><id>18409208</id><snippet>5</snippet></ROW><ROW><id>18409208</id><snippet>25</snippet></ROW><ROW><id>18409208</id><snippet>8</snippet></ROW><ROW><id>18409208</id><snippet>15</snippet></ROW><ROW><id>18409208</id><snippet>22</snippet></ROW><ROW><id>18409208</id><snippet>foo</snippet></ROW><ROW><id>18409208</id><snippet>bar</snippet></ROW><ROW><id>18409208</id><snippet>baz</snippet></ROW><ROW><id>18409208</id><snippet># do your plotting first, for example
x = np.arange(5, 25)
y = x * x
plt.plot(x, y)
# and then the ticks
plt.xticks([8, 15, 22], ['foo', 'bar', 'baz'])
# And finally show the plot
plt.show()
</snippet></ROW><ROW><id>18409208</id><snippet>[0, 1, 2]</snippet></ROW><ROW><id>18409208</id><snippet>hello</snippet></ROW><ROW><id>18409208</id><snippet>apple</snippet></ROW><ROW><id>18409208</id><snippet>orange</snippet></ROW><ROW><id>18409208</id><snippet>plt.xticks([0, 1, 2], ['hello', 'apple', 'orange'])
</snippet></ROW><ROW><id>18409265</id><snippet>format(number, '03')
</snippet></ROW><ROW><id>18409355</id><snippet>{% for user in userid %}
    {{user}}
{% endfor %}
</snippet></ROW><ROW><id>18409355</id><snippet>{% for user in userid %}
    {{user.name}}
{% endfor %}
</snippet></ROW><ROW><id>18409355</id><snippet>__unicode__</snippet></ROW><ROW><id>18409355</id><snippet>__unicode__</snippet></ROW><ROW><id>18409355</id><snippet>Userid</snippet></ROW><ROW><id>18409355</id><snippet>def expand(request):
    userid = Userid.objects.filter(name__contains="Test").values_list('name', flat=True)
    return render(request,'expand.html',{'userid':", ".join(list(userid))})
</snippet></ROW><ROW><id>18409355</id><snippet>{{userid}}
</snippet></ROW><ROW><id>18409549</id><snippet>__isnull</snippet></ROW><ROW><id>18409549</id><snippet>Income.objects.filter(invoice__isnull=True)
</snippet></ROW><ROW><id>18409549</id><snippet>related_name</snippet></ROW><ROW><id>18409549</id><snippet>Income.objects.filter(Income__isnull=True)
</snippet></ROW><ROW><id>18409549</id><snippet>income</snippet></ROW><ROW><id>18409549</id><snippet>Invoice</snippet></ROW><ROW><id>18409549</id><snippet>related_name</snippet></ROW><ROW><id>18409657</id><snippet>import os
FILE = os.path.splitext(FILE)[0]
</snippet></ROW><ROW><id>18409782</id><snippet>import bs4
from bs4 import BeautifulSoup

htmls = """&lt;p&gt;&lt;b&gt;Background&lt;/b&gt;&lt;br /&gt;x0&lt;/p&gt;&lt;p&gt;x1&lt;/p&gt;
           &lt;p&gt;&lt;b&gt;Innovation&lt;/b&gt;&lt;br /&gt;x2&lt;/p&gt;&lt;p&gt;x3&lt;/p&gt;&lt;p&gt;x4&lt;/p&gt;
           &lt;p&gt;&lt;b&gt;Activities&lt;/b&gt;&lt;br /&gt;x5&lt;/p&gt;&lt;p&gt;x6&lt;/p&gt;"""
html = BeautifulSoup(htmls)

for n in html.find_all('b'):
    title_name = n.next_element
    title_content = n.nextSibling.nextSibling

    results = [title_content]
    for f in n.parent.find_next_siblings():
        el = f.next_element
        if isinstance(el, bs4.element.Tag) and el.name == 'b':
            break
        results.append(el)

    print title_name, results
</snippet></ROW><ROW><id>18409782</id><snippet>Background [u'x0', u'x1']
Innovation [u'x2', u'x3', u'x4']
Activities [u'x5', u'x6']
</snippet></ROW><ROW><id>18409782</id><snippet>isinstance(el, bs4.element.Tag) and el.name == 'b'</snippet></ROW><ROW><id>18409782</id><snippet>&lt;p&gt;</snippet></ROW><ROW><id>18409895</id><snippet>payload = urllib.urlencode(payload)
</snippet></ROW><ROW><id>18409895</id><snippet>import cjson
payload = cjson.encode(payload)
</snippet></ROW><ROW><id>18409973</id><snippet>spaces</snippet></ROW><ROW><id>18409973</id><snippet>LEADING_WS</snippet></ROW><ROW><id>18409973</id><snippet>nextToken</snippet></ROW><ROW><id>18409973</id><snippet>LEADING_WS</snippet></ROW><ROW><id>18409973</id><snippet>LEADING_WS
  : {getColumn()==1}?
    // match spaces or tabs, tracking indentation count
    [ \t]+
    {spaces = computeSpaces(_input.getText());}
    ;
</snippet></ROW><ROW><id>18410105</id><snippet>eval</snippet></ROW><ROW><id>18410105</id><snippet>0xaf</snippet></ROW><ROW><id>18410105</id><snippet>0xaf</snippet></ROW><ROW><id>18410105</id><snippet>eval</snippet></ROW><ROW><id>18410105</id><snippet>eval("0xa and __import__('os').remove('some/file/path')")
</snippet></ROW><ROW><id>18410105</id><snippet>ast.literal_eval</snippet></ROW><ROW><id>18410105</id><snippet>int</snippet></ROW><ROW><id>18410105</id><snippet>&gt;&gt;&gt; import ast
&gt;&gt;&gt; ast.literal_eval("0xaf")
175
&gt;&gt;&gt; int("af", 16)
175
</snippet></ROW><ROW><id>18410191</id><snippet>with open('path/to/input') as infile, open('path/to/output', 'w') as outfile:
  for line in infile:
    if len(line) &gt; 50:
      outfile.write('\n'.join(line[i:i+50] for i in xrange(0,len(line), 50)))
    else:
      outfile.write(line)
</snippet></ROW><ROW><id>18410468</id><snippet>s = set()
s.add(3)
s.add(3)
# s only has one 3 in it
</snippet></ROW><ROW><id>18410468</id><snippet>class Interner(object):
    def __init__(self):
        self._store = {}
    def canonical_object(self, thing):
        """Returns a canonical object equal to thing.

        Always returns the same result for equal things.

        """

        return self._store.setdefault(thing, thing)
</snippet></ROW><ROW><id>18410468</id><snippet>weakref</snippet></ROW><ROW><id>18410468</id><snippet>intern</snippet></ROW><ROW><id>18410591</id><snippet>QDialog's</snippet></ROW><ROW><id>18410591</id><snippet>QFileDialog</snippet></ROW><ROW><id>18410591</id><snippet>QFileDialog</snippet></ROW><ROW><id>18410591</id><snippet>QFileDialog dialog;
dialog.setStyleSheet("QPushButton { background-color: red }");
dialog.exec_();
</snippet></ROW><ROW><id>18410638</id><snippet>import selenium.webdriver as webdriver

url = 'http://dnainfo.com/chicago/2013-chicago-murders/timeline?mon=1'
driver = webdriver.Firefox()
driver.get(url)

soup = BeautifulSoup(driver.page_source)
</snippet></ROW><ROW><id>18410638</id><snippet>&lt;div class="well well-small"&gt;</snippet></ROW><ROW><id>18410638</id><snippet>&lt;div&gt;</snippet></ROW><ROW><id>18410638</id><snippet>dudes = []
for dude in soup.find_all('div', 'well well-small'):
    dude_info = {}
    dude_info['Name'] = dude.parent['id']
    dude_info['Age'] = dude.find('div', 'age meta').contents[1]
    dude_info['Race'] = dude.find('div', 'race meta').contents[1]
    dude_info['Cause'] = dude.find('div', 'cause meta').contents[1]
    dude_info['Neighborhood'] = dude.find('div', 'neighborhood meta').contents[1]
    dude_info['Time'] = dude.find('div', 'time meta').contents[-1].next_element

    dudes.append(dude_info)
</snippet></ROW><ROW><id>18410671</id><snippet>class my_install_lib(distutils.command.install_lib.install_lib):
  def run(self):
    distutils.command.install_lib.install_lib.run(self)
    for fn in self.get_outputs():
      if &lt;this is one of the binaries I want to be executable&gt;:
        # copied from distutils source - make the binaries executable
        mode = ((os.stat(fn).st_mode) | 0555) &amp; 07777
        distutils.log.info("changing mode of %s to %o", fn, mode)
        os.chmod(fn, mode)
</snippet></ROW><ROW><id>18410671</id><snippet>cmdclass={'install_lib':my_install_lib}</snippet></ROW><ROW><id>18410671</id><snippet>setup</snippet></ROW><ROW><id>18410915</id><snippet>&gt;&gt;&gt; import time
&gt;&gt;&gt; def timeit(l1, l2, n):
        start = time.time()
        for i in xrange(n):
                l1 == l2
        end = time.time()
        print "%d took %.2fs" % (n, end - start)
</snippet></ROW><ROW><id>18410915</id><snippet>&gt;&gt;&gt; hugeequal1 = [10]*30000
&gt;&gt;&gt; hugeequal2 = [10]*30000
&gt;&gt;&gt; timeit(hugeequal1, hugeequal2, 10000)
10000 took 3.07s
</snippet></ROW><ROW><id>18410915</id><snippet>&gt;&gt;&gt; easydiff1 = [10]*30000
&gt;&gt;&gt; easydiff2 = [10]*30000
&gt;&gt;&gt; easydiff2[0] = 0
&gt;&gt;&gt; timeit(easydiff1, easydiff2, 10000)
10000 took 0.00s
&gt;&gt;&gt; timeit(easydiff1, easydiff2, 1000000)
1000000 took 0.14s
</snippet></ROW><ROW><id>18410915</id><snippet>array.array</snippet></ROW><ROW><id>18410915</id><snippet>&gt;&gt;&gt; import array
&gt;&gt;&gt; timeit(hugeequal1, hugeequal2, 1000)
1000 took 0.30s
&gt;&gt;&gt; timeit(array.array('l', hugeequal1), array.array('l', hugeequal2), 1000)
1000 took 1.11s
</snippet></ROW><ROW><id>18410915</id><snippet>numpy</snippet></ROW><ROW><id>18410915</id><snippet>&gt;&gt;&gt; import numpy
&gt;&gt;&gt; timeit(hugeequal1, hugeequal2, 10000)
10000 took 3.01s
&gt;&gt;&gt; timeit(numpy.array(hugeequal1), numpy.array(hugeequal2), 10000)
10000 took 1.11s
</snippet></ROW><ROW><id>18411256</id><snippet>c2pos</snippet></ROW><ROW><id>18411256</id><snippet>c2len</snippet></ROW><ROW><id>18411256</id><snippet>In [15]: df.loc[df.c2pos==0,'c2len'] = 0

In [16]: df.loc[df.c1pos==0,'c1len'] = 0

In [17]: df
Out[17]: 
            distance  c1pos  c1len  c2pos  c2len  daysago
2013-06-22      7.00      9    0.0      9    6.4       27
2013-05-18      8.50      6    4.6      7    4.9       62
2012-12-31      8.32      5    4.6      5    2.1      200
2012-12-01      8.00      7    7.1      6    8.6      230
2012-11-03      7.00      7    0.0      7    2.7      258
2012-10-15      7.00      7    0.0      8    5.2      277
2012-09-22      8.32     10   10.1      8    4.1      300
2012-09-15      9.00     10   12.5      9   12.1      307
2012-08-18      7.00      8    0.0      8    9.2      335
2012-08-02      9.00      5    3.5      5    2.2      351
2012-07-14     12.00      3    4.5      3    3.5      370
2012-06-16      8.32      7    3.7      7    5.1      398
</snippet></ROW><ROW><id>18411352</id><snippet>Body</snippet></ROW><ROW><id>18411352</id><snippet>MailItem</snippet></ROW><ROW><id>18411352</id><snippet>RTFBody</snippet></ROW><ROW><id>18411352</id><snippet>PidTagBody</snippet></ROW><ROW><id>18411352</id><snippet>PR_RTF_COMPRESSED</snippet></ROW><ROW><id>18411352</id><snippet>Body</snippet></ROW><ROW><id>18411352</id><snippet>RTFBody</snippet></ROW><ROW><id>18411352</id><snippet>HTMLBody</snippet></ROW><ROW><id>18411352</id><snippet>RTFBody</snippet></ROW><ROW><id>18411352</id><snippet>ElementTree</snippet></ROW><ROW><id>18411352</id><snippet>BeautifulSoup</snippet></ROW><ROW><id>18411352</id><snippet>BodyFormat</snippet></ROW><ROW><id>18411352</id><snippet>olFormatHTML</snippet></ROW><ROW><id>18411352</id><snippet>RTFBody</snippet></ROW><ROW><id>18411352</id><snippet>StrConv</snippet></ROW><ROW><id>18411423</id><snippet>word =&gt; integer id</snippet></ROW><ROW><id>18411423</id><snippet>[10, 2] =&gt; "a:2"</snippet></ROW><ROW><id>18411423</id><snippet>{_id: "a:2", seen: [docId1, docId2, ...]}
</snippet></ROW><ROW><id>18411516</id><snippet>&gt;&gt;&gt; pd.read_csv(data_string, parse_dates=[0], index_col=0).sort_index()
            Balance
Date               
2013-08-01       87
2013-08-01       88
2013-08-02      900
2013-08-06      910
2013-08-09     1000
2013-08-09      930
2013-08-09      950
</snippet></ROW><ROW><id>18411516</id><snippet>mergesort</snippet></ROW><ROW><id>18411516</id><snippet>&gt;&gt;&gt; df = pd.read_csv(data_string, parse_dates=[0],
                     index_col=0).sort_index(kind='mergesort')
&gt;&gt;&gt; df.Balance.resample('D',how='last')
2013-08-01      88
2013-08-02     900
2013-08-03     NaN
2013-08-04     NaN
2013-08-05     NaN
2013-08-06     910
2013-08-07     NaN
2013-08-08     NaN
2013-08-09    1000
&gt;&gt;&gt; df.Balance.resample('D', how='first')
2013-08-01     87
2013-08-02    900
2013-08-03    NaN
2013-08-04    NaN
2013-08-05    NaN
2013-08-06    910
2013-08-07    NaN
2013-08-08    NaN
2013-08-09    930
</snippet></ROW><ROW><id>18411525</id><snippet>folder.b</snippet></ROW><ROW><id>18411525</id><snippet>folder</snippet></ROW><ROW><id>18411525</id><snippet>import sys
sys.path.append(your_folder_containing_b.py)
</snippet></ROW><ROW><id>18411525</id><snippet>from b import *
</snippet></ROW><ROW><id>18411525</id><snippet>folder</snippet></ROW><ROW><id>18411525</id><snippet>from b import *</snippet></ROW><ROW><id>18411525</id><snippet>import os
os.chdir(your_folder_containing_b.py)
</snippet></ROW><ROW><id>18411542</id><snippet>pip3</snippet></ROW><ROW><id>18411542</id><snippet>sudo</snippet></ROW><ROW><id>18411542</id><snippet>ipython</snippet></ROW><ROW><id>18411542</id><snippet>brew uninstall python3</snippet></ROW><ROW><id>18411542</id><snippet>rm -rf /Library/Frameworks/Python.framework</snippet></ROW><ROW><id>18411542</id><snippet>rm -rf /usr/local/lib/python*</snippet></ROW><ROW><id>18411542</id><snippet>rm -rf /usr/local/share/python*</snippet></ROW><ROW><id>18411542</id><snippet>~/.bash_profile</snippet></ROW><ROW><id>18411542</id><snippet>~/.profile</snippet></ROW><ROW><id>18411542</id><snippet>/usr/local/share/python3</snippet></ROW><ROW><id>18411542</id><snippet>Python.framework</snippet></ROW><ROW><id>18411542</id><snippet>Cellar/python3</snippet></ROW><ROW><id>18411542</id><snippet>brew doctor</snippet></ROW><ROW><id>18411542</id><snippet>brew prune</snippet></ROW><ROW><id>18411542</id><snippet>brew install python3</snippet></ROW><ROW><id>18411542</id><snippet>pip3</snippet></ROW><ROW><id>18411542</id><snippet>/usr/local/Cellar/python3/3.3.2/</snippet></ROW><ROW><id>18411542</id><snippet>/usr/local/bin</snippet></ROW><ROW><id>18411542</id><snippet>/Library</snippet></ROW><ROW><id>18411542</id><snippet>/Library/Frameworks/Python.framework/Versions/3.3/</snippet></ROW><ROW><id>18411542</id><snippet>/usr/local/bin</snippet></ROW><ROW><id>18411542</id><snippet>/usr/local/lib/python3.3</snippet></ROW><ROW><id>18411568</id><snippet>get_object_or_404(Notice, board__name=board_name)</snippet></ROW><ROW><id>18411568</id><snippet>Notice</snippet></ROW><ROW><id>18411568</id><snippet>def board_lv(request, board_name):
    latest_notices = get_object_or_404(Notice, board__name=board_name)
    context = {'latest_notices': [latest_notices]}
    return render(request, 'noticeList.html', context)
</snippet></ROW><ROW><id>18411568</id><snippet>get_object_or_404</snippet></ROW><ROW><id>18411568</id><snippet>Notice</snippet></ROW><ROW><id>18411568</id><snippet>filter</snippet></ROW><ROW><id>18411568</id><snippet>def board_lv(request, board_name):
    latest_notices = Notice.objects.filter(board__name=board_name)
    context = {'latest_notices': latest_notices}
    return render(request, 'noticeList.html', context)
</snippet></ROW><ROW><id>18411610</id><snippet>&gt;&gt;&gt; l = [1, 3, 2, 5, 4, None, 7]
&gt;&gt;&gt; sorted(l, key=lambda x: (x is None, x))
[1, 2, 3, 4, 5, 7, None]
</snippet></ROW><ROW><id>18411610</id><snippet>None</snippet></ROW><ROW><id>18411610</id><snippet>(True, None)</snippet></ROW><ROW><id>18411610</id><snippet>(False, x)</snippet></ROW><ROW><id>18411610</id><snippet>x</snippet></ROW><ROW><id>18411610</id><snippet>None</snippet></ROW><ROW><id>18411610</id><snippet>False &lt; True</snippet></ROW><ROW><id>18411751</id><snippet>axes</snippet></ROW><ROW><id>18411751</id><snippet>axes[0, 0]</snippet></ROW><ROW><id>18411751</id><snippet>df['A'].plot(ax=axes[0])
df2['C'].plot(ax=axes[0])
df['B'].plot(ax=axes[1])
df2['D'].plot(ax=axes[1])
</snippet></ROW><ROW><id>18411751</id><snippet>fig, (ax1, ax2) = subplots(2, 1, sharex=True)

df['A'].plot(ax=ax1)
df2['C'].plot(ax=ax1)
df['B'].plot(ax=ax2)
df2['D'].plot(ax=ax2)
</snippet></ROW><ROW><id>18411753</id><snippet>echo Hello world | cut -d' ' -f1
</snippet></ROW><ROW><id>18411753</id><snippet>shell=True</snippet></ROW><ROW><id>18411753</id><snippet>Popen</snippet></ROW><ROW><id>18411753</id><snippet>p1 = Popen(['echo', 'Hello', 'world'], stdout=PIPE)
p2 = Popen(['cut', "-d' '", '-f1'], stdin=p1.stdout, stdout=PIPE)
p1.stdout.close()
test = p2.communicate()[0]
</snippet></ROW><ROW><id>18411753</id><snippet>split</snippet></ROW><ROW><id>18411753</id><snippet>&gt;&gt;&gt; cmd = "echo Hello world | cut -d' ' -f1"
&gt;&gt;&gt; cmd.split()
['echo', 'Hello', 'world', '|', 'cut', "-d'", "'", '-f1']
</snippet></ROW><ROW><id>18411753</id><snippet>-d' '</snippet></ROW><ROW><id>18411753</id><snippet>-d'</snippet></ROW><ROW><id>18411753</id><snippet>'</snippet></ROW><ROW><id>18411753</id><snippet>shell=True</snippet></ROW><ROW><id>18411753</id><snippet>cmd</snippet></ROW><ROW><id>18411753</id><snippet>process = subprocess.Popen(cmd, stdout=subprocess.PIPE, shell=True)
</snippet></ROW><ROW><id>18411753</id><snippet>shlex</snippet></ROW><ROW><id>18411753</id><snippet>&gt;&gt;&gt; shlex.split(cmd)
['echo', 'Hello', 'world', '|', 'cut', '-d ', '-f1']
</snippet></ROW><ROW><id>18411753</id><snippet>"-d' '"</snippet></ROW><ROW><id>18411753</id><snippet>"-d "</snippet></ROW><ROW><id>18411753</id><snippet>cut</snippet></ROW><ROW><id>18411753</id><snippet>d</snippet></ROW><ROW><id>18411753</id><snippet>shlex</snippet></ROW><ROW><id>18411753</id><snippet>quote</snippet></ROW><ROW><id>18411753</id><snippet>shell=True</snippet></ROW><ROW><id>18411753</id><snippet>shlex.split()</snippet></ROW><ROW><id>18412072</id><snippet>xform(obj, cp=1)</snippet></ROW><ROW><id>18412072</id><snippet>obj.setScalePivot(obj.c.get())
obj.setRotatePivot(obj.c.get())
</snippet></ROW><ROW><id>18412072</id><snippet>obj.c.get</snippet></ROW><ROW><id>18412207</id><snippet>file = open('test.txt')
for line in file:
    fields = line.strip().split()
    print fields[0], fields[1], fields[2], fields[3]
</snippet></ROW><ROW><id>18412207</id><snippet>split()</snippet></ROW><ROW><id>18412207</id><snippet>strip()</snippet></ROW><ROW><id>18412207</id><snippet>iterable</snippet></ROW><ROW><id>18412207</id><snippet>in</snippet></ROW><ROW><id>18412241</id><snippet>from collections import namedtuple


class ContactNotFoundError(Exception):
pass


def look_up_contact():
print('----------------------------------')
choice = input("Please enter the last name of the contact you would like to view: ")
print('----------------------------------')
Contact = namedtuple("Contact", "FirstName LastName PhoneNumber Email BirthDate")
with open('ListOfContacts.txt', 'r') as listOfNames:
    searchLines = listOfNames.readlines()
isFound = False
for line in searchLines:
    if choice in line:
        isFound = True
        Contact(*line.split(','))
if not isFound:
    raise ContactNotFoundError


if __name__ == '__main__':
look_up_contact()
</snippet></ROW><ROW><id>18412319</id><snippet>num_points = np.atleast_2d(nparray).shape[1]
</snippet></ROW><ROW><id>18412319</id><snippet>try</snippet></ROW><ROW><id>18412319</id><snippet>try:
    num_points = nparray.shape[1]
except IndexError:
    num_points = 1
</snippet></ROW><ROW><id>18412319</id><snippet>def num_points(arr, axis):
    try:
        return arr.shape[axis]
    except IndexError:
        return 1
</snippet></ROW><ROW><id>18412319</id><snippet>for i in range(num_points(nparray, 1)):
</snippet></ROW><ROW><id>18412319</id><snippet>def num_points(arr, axis):
    return nparray[:,...,np.newaxis].shape[1]
</snippet></ROW><ROW><id>18412461</id><snippet>break</snippet></ROW><ROW><id>18412461</id><snippet>else</snippet></ROW><ROW><id>18412461</id><snippet>for</snippet></ROW><ROW><id>18412461</id><snippet>for</snippet></ROW><ROW><id>18412461</id><snippet>break</snippet></ROW><ROW><id>18412461</id><snippet>Animals = ["phant", "eleph", "tiger", "turtle", "zebra", "ostrich"]
Dict = {"horse":1, "elephant":1, "iger":1, "ostrich":1}

for name in Animals:
    if name in Dict:
        Dict[name]=Dict[name]+1
    else:
        for key, val in Dict.items():
            if len(name) &lt; len(key):
                m = re.search (name, key)
                if m != None:
                    print ("Found match!", name)
                    Dict[key] = Dict[key] + 1
                    break
            elif len(name) &gt; len(key):
                m = re.search (key, name)
                if m != None:
                    print ("Found match!", name)
                    Dict[name] = Dict.pop(key) + 1
                    Dict[name] = Dict[name] + 1
                    break
        else:                 # this line and the one below it are new
            Dict[name] = 1
</snippet></ROW><ROW><id>18412588</id><snippet>order_by</snippet></ROW><ROW><id>18412588</id><snippet>qry = session.query(Option.optionsymbol).filter(and_
            (Option.underlying == stock, 
                Option.quotedate == entry_date,
                Option.expiration == exp_date,
                Option.option_type== "put",
                Option.exchange == "*")
            ).order_by('abs(strike - %d)' % desired_strike)
</snippet></ROW><ROW><id>18412660</id><snippet>data_to_parse = BeautifulSoup(html_payload)
for line in data_to_parse.get_text().split("\n"):
    pass  # ... do something
</snippet></ROW><ROW><id>18412732</id><snippet>codecs.iterdecode()</snippet></ROW><ROW><id>18412732</id><snippet>from codecs import iterdecode

for line in iterdecode(filename, 'utf16'): yield line
</snippet></ROW><ROW><id>18412844</id><snippet>import multiprocessing
import sys
import threading
import time

lock = multiprocessing.Lock()

def f(i):
    with lock:
        for _ in range(10):
            sys.stderr.write(i)
            time.sleep(1)

t1 = threading.Thread(target=f, args=['1'])
t2 = threading.Thread(target=f, args=['2'])
t1.start()
t2.start()
t1.join()
t2.join()
</snippet></ROW><ROW><id>18412844</id><snippet>1111111111222222222</snippet></ROW><ROW><id>18412844</id><snippet>22222222221111111111</snippet></ROW><ROW><id>18412844</id><snippet>import multiprocessing.semaphore</snippet></ROW><ROW><id>18412844</id><snippet>ImportError</snippet></ROW><ROW><id>18412844</id><snippet>threading.Lock</snippet></ROW><ROW><id>18412844</id><snippet>multiprocessing.Lock</snippet></ROW><ROW><id>18412844</id><snippet>with threadlock:</snippet></ROW><ROW><id>18412844</id><snippet>with processlock:</snippet></ROW><ROW><id>18412844</id><snippet>multiprocessing</snippet></ROW><ROW><id>18412943</id><snippet>Deck</snippet></ROW><ROW><id>18412943</id><snippet>self.Deck = ['J', 'J', 'J', 'J', 'Q', 'Q', 'Q', 'Q', 'K', 'K', 'K', 'K', 'A', 'A', 'A', 'A', '2', '2', '2', '2', '3', '3', '3', '3', '4', '4', '4', '4', '5', '5', '5', '5', '6', '6', '6', '6', '7', '7', '7', '7', '8', '8', '8', '8', '9', '9', '9', '9', '10', '10', '10', '10']
</snippet></ROW><ROW><id>18412943</id><snippet>'2'</snippet></ROW><ROW><id>18412943</id><snippet>'3'</snippet></ROW><ROW><id>18412943</id><snippet>for x in self.hand:
    if x != ',':
        if x not in range(1, 11):
</snippet></ROW><ROW><id>18412943</id><snippet>x</snippet></ROW><ROW><id>18412943</id><snippet>range(1, 11)</snippet></ROW><ROW><id>18412943</id><snippet>if</snippet></ROW><ROW><id>18412943</id><snippet>True</snippet></ROW><ROW><id>18412943</id><snippet>if x != 'A':
    self.value += 10
else:
    if (self.value + 11) &gt; 17:
        self.value += 1
    else:
        self.value += 11
</snippet></ROW><ROW><id>18412943</id><snippet>not in range(1, 11)</snippet></ROW><ROW><id>18412943</id><snippet>'A'</snippet></ROW><ROW><id>18412943</id><snippet>if x &gt;= 'A':
</snippet></ROW><ROW><id>18412943</id><snippet>not in range(1, 11)</snippet></ROW><ROW><id>18412943</id><snippet>else:
    self.value += x
</snippet></ROW><ROW><id>18412943</id><snippet>int()</snippet></ROW><ROW><id>18412943</id><snippet>else:
    self.value += int(x)
</snippet></ROW><ROW><id>18412943</id><snippet>&gt;&gt;&gt; deck = Deck()
&gt;&gt;&gt; jack = BlackJackPlayer(deck)
&gt;&gt;&gt; jack.play_dealer()
A
A,A
A,A,9
'BUST'
&gt;&gt;&gt; jack.get_value()
60
</snippet></ROW><ROW><id>18412943</id><snippet>self.value</snippet></ROW><ROW><id>18412943</id><snippet>self.value</snippet></ROW><ROW><id>18412943</id><snippet>def get_value(self):
    value = 0
    for x in self.hand:
        if x &gt;= 'A':
            if x != 'A':
                value += 10
            else:
                if value &gt; 6:
                    value += 1
                else:
                    value += 11
        else:
            value += int(x)

    return value
</snippet></ROW><ROW><id>18412943</id><snippet>&gt;&gt;&gt; jack = BlackJackPlayer(Deck())
&gt;&gt;&gt; jack.play_dealer()
J
JA
JAA
JAA6
</snippet></ROW><ROW><id>18413289</id><snippet>KeyError</snippet></ROW><ROW><id>18413289</id><snippet>try:
    image = p['cover']['source']
except KeyError:
    pass  # or other alternative for those without cover picture
</snippet></ROW><ROW><id>18413383</id><snippet>data</snippet></ROW><ROW><id>18413383</id><snippet>floatdata = struct.unpack("f", data)</snippet></ROW><ROW><id>18413383</id><snippet>struct.unpack</snippet></ROW><ROW><id>18413383</id><snippet>struct.pack</snippet></ROW><ROW><id>18413383</id><snippet>struct.unpack</snippet></ROW><ROW><id>18413403</id><snippet>&gt;&gt;&gt; long_unc="\\\\K53\\Users\\Tolan\\testing\\xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx\\xxxxxxxxxxxxxxxxxxxxxxxxdddddddddddddddddddddwgggggggggggggggggggggggggggggggggggxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx\\esssssssssssssssssssssggggggggggggggggggggggggggggggggggggggggggggggeee"
&gt;&gt;&gt; os.listdir(long_unc)
FileNotFoundError: [WinError 3]
</snippet></ROW><ROW><id>18413403</id><snippet>short_unc=win32api.GetShortPathName(win32api.GetShortPathName(win32api.GetShortPathName("\\\\K53\\Users\\Tolan\\testing\\xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx")+"\\xxxxxxxxxxxxxxxxxxxxxxxxdddddddddddddddddddddwgggggggggggggggggggggggggggggggggggxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx") + "\\esssssssssssssssssssssggggggggggggggggggggggggggggggggggggggggggggggeee")
&gt;&gt;&gt; print(short_unc)
\\K53\Users\Tolan\testing\XXXXXX~1\XXXXXX~1\ESSSSS~1
&gt;&gt;&gt; import os
&gt;&gt;&gt; os.listdir(short_unc)
['test.txt']
</snippet></ROW><ROW><id>18413408</id><snippet>from django.db import models

class Author(models.Model):
    name = models.CharField(max_length=100)

class Book(models.Model):
    author = models.ForeignKey(Author)
    title = models.CharField(max_length=100)
</snippet></ROW><ROW><id>18413408</id><snippet>&gt;&gt;&gt; from django.forms.models import inlineformset_factory
&gt;&gt;&gt; BookFormSet = inlineformset_factory(Author, Book)
&gt;&gt;&gt; author = Author.objects.get(name=u'Mike Royko')
&gt;&gt;&gt; formset = BookFormSet(instance=author)
</snippet></ROW><ROW><id>18413408</id><snippet>inlineformset_factory</snippet></ROW><ROW><id>18413621</id><snippet>myjson</snippet></ROW><ROW><id>18413621</id><snippet>json.loads(myjson)</snippet></ROW><ROW><id>18413621</id><snippet>myjson = json.dumps(testdata)

mydata = json.loads(myjson)
#prints [u'word', u'is', u'bond', False, 6, 99], which contains unicode strings
print mydata
#prints ["word", "is", "bond", false, 6, 99], which is still just a string
print myjson

# Iterates over each character, since it's a string
for i in myjson:
    print i
# Iterates over the list
for i in mydata:
    print i
</snippet></ROW><ROW><id>18413626</id><snippet>listb = [re.sub(r'&lt;',r'*', i) for i in listb]
</snippet></ROW><ROW><id>18413626</id><snippet>0</snippet></ROW><ROW><id>18413626</id><snippet>TypeError</snippet></ROW><ROW><id>18413626</id><snippet>r''</snippet></ROW><ROW><id>18413626</id><snippet>&gt;&gt;&gt; listb = ['abc', '&lt;asd*', '&lt;&lt;&gt;&gt;**']
&gt;&gt;&gt; for i in listb:
...     i = re.sub(r'&lt;',r'*', i)
...     print i
... 
abc
*asd*
**&gt;&gt;**
&gt;&gt;&gt; listb
['abc', '&lt;asd*', '&lt;&lt;&gt;&gt;**']
</snippet></ROW><ROW><id>18413626</id><snippet>&gt;&gt;&gt; listx = []
&gt;&gt;&gt; for i in listb:
...     listx.append(re.sub(r'&lt;',r'*', i))
... 
&gt;&gt;&gt; listx
['abc', '*asd*', '**&gt;&gt;**']
&gt;&gt;&gt; listb
['abc', '&lt;asd*', '&lt;&lt;&gt;&gt;**']
&gt;&gt;&gt; listb = listx
</snippet></ROW><ROW><id>18413626</id><snippet>i</snippet></ROW><ROW><id>18413626</id><snippet>i</snippet></ROW><ROW><id>18413658</id><snippet>list</snippet></ROW><ROW><id>18413658</id><snippet>string</snippet></ROW><ROW><id>18413658</id><snippet>list</snippet></ROW><ROW><id>18413658</id><snippet>something=list()       # this is an empty list!
</snippet></ROW><ROW><id>18413658</id><snippet>list[2]</snippet></ROW><ROW><id>18413658</id><snippet>st='Did the quick brown fox really jump over the fence'.split()
c=[len(i) for i in st] # gives [3, 3, 5, 5, 3, 6, 4, 4, 3, 5]
counts=[0]*max(c)      # gives [0, 0, 0, 0, 0, 0]
for i in range(len(c)):
  counts[c[i]-1]+=1    # adds 1 to each index of c[i] (we subtract 1 because of 0-based indices)
print(counts)          # gives us the answer: [0, 0, 4, 2, 3, 1]
</snippet></ROW><ROW><id>18413658</id><snippet>st</snippet></ROW><ROW><id>18413658</id><snippet>c=[len(i) for i in st]
</snippet></ROW><ROW><id>18413658</id><snippet>i</snippet></ROW><ROW><id>18413658</id><snippet>st</snippet></ROW><ROW><id>18413658</id><snippet>len(i)</snippet></ROW><ROW><id>18413658</id><snippet>c</snippet></ROW><ROW><id>18413658</id><snippet>counts=[0]*max(c)
</snippet></ROW><ROW><id>18413658</id><snippet>0</snippet></ROW><ROW><id>18413658</id><snippet>max</snippet></ROW><ROW><id>18413658</id><snippet>c</snippet></ROW><ROW><id>18413658</id><snippet>for i in range(len(c)):
  counts[c[i]-1]+=1
</snippet></ROW><ROW><id>18413658</id><snippet>c</snippet></ROW><ROW><id>18413658</id><snippet>3</snippet></ROW><ROW><id>18413658</id><snippet>Did</snippet></ROW><ROW><id>18413658</id><snippet>3</snippet></ROW><ROW><id>18413658</id><snippet>the</snippet></ROW><ROW><id>18413658</id><snippet>5</snippet></ROW><ROW><id>18413658</id><snippet>fence</snippet></ROW><ROW><id>18413658</id><snippet>c[i]</snippet></ROW><ROW><id>18413658</id><snippet>counts[c[i]-1]</snippet></ROW><ROW><id>18413658</id><snippet>counts</snippet></ROW><ROW><id>18413658</id><snippet>1</snippet></ROW><ROW><id>18413658</id><snippet>1</snippet></ROW><ROW><id>18413658</id><snippet>c[i]</snippet></ROW><ROW><id>18413658</id><snippet>3</snippet></ROW><ROW><id>18413658</id><snippet>-1</snippet></ROW><ROW><id>18413658</id><snippet>counts[c[i]-1]</snippet></ROW><ROW><id>18413658</id><snippet>counts[c[i]-1] # this means counts[3-1] which means go find the bin corresponding to counts[2]

# ---v   this one
[0,0,0,0,0]
</snippet></ROW><ROW><id>18413658</id><snippet>+=1</snippet></ROW><ROW><id>18413715</id><snippet>version: 123456</snippet></ROW><ROW><id>18413715</id><snippet>version: v123456</snippet></ROW><ROW><id>18413919</id><snippet>pat = re.compile(r'(?ms)^---(.*)\Z')
</snippet></ROW><ROW><id>18413919</id><snippet>(?ms)</snippet></ROW><ROW><id>18413919</id><snippet>MULTILINE</snippet></ROW><ROW><id>18413919</id><snippet>DOTALL</snippet></ROW><ROW><id>18413919</id><snippet>MULTILINE</snippet></ROW><ROW><id>18413919</id><snippet>^</snippet></ROW><ROW><id>18413919</id><snippet>---</snippet></ROW><ROW><id>18413919</id><snippet>DOTALL</snippet></ROW><ROW><id>18413919</id><snippet>.</snippet></ROW><ROW><id>18413919</id><snippet>(.*)</snippet></ROW><ROW><id>18413919</id><snippet>\Z</snippet></ROW><ROW><id>18413919</id><snippet>import re

text = '''\    
Anything above this first set of hyphens should not be captured.

---

This is content. It should be captured.
Any sets of three hyphens beyond this point should be ignored.
'''

pat = re.compile(r'(?ms)^---(.*)\Z')
print(re.search(pat, text).group(1))
</snippet></ROW><ROW><id>18413919</id><snippet>This is content. It should be captured.
Any sets of three hyphens beyond this point should be ignored.
</snippet></ROW><ROW><id>18413919</id><snippet>[...]</snippet></ROW><ROW><id>18413919</id><snippet>a-z</snippet></ROW><ROW><id>18413919</id><snippet>[---]</snippet></ROW><ROW><id>18413919</id><snippet>[-]</snippet></ROW><ROW><id>18413919</id><snippet>[---]</snippet></ROW><ROW><id>18413919</id><snippet>-</snippet></ROW><ROW><id>18413919</id><snippet>-</snippet></ROW><ROW><id>18413919</id><snippet>[(---)]</snippet></ROW><ROW><id>18413919</id><snippet>[-()]</snippet></ROW><ROW><id>18413919</id><snippet>[^(---)]+</snippet></ROW><ROW><id>18413919</id><snippet>In [23]: re.search('[^(---)]+', 'foo - bar').group()
Out[23]: 'foo '

In [24]: re.search('[^(---)]+', 'foo ( bar').group()
Out[24]: 'foo '
</snippet></ROW><ROW><id>18414040</id><snippet>from sqlalchemy import types

class StrippedString(types.TypeDecorator):
    '''
    Returns CHAR values with spaces stripped
    '''

    impl = types.String

    def process_bind_param(self, value, dialect):
        "No-op"
        return value

    def process_result_value(self, value, dialect):
        "Strip the trailing spaces on resulting values"
        return value.rstrip()

    def copy(self):
        "Make a copy of this type"
        return StrippedString(self.impl.length)
</snippet></ROW><ROW><id>18414040</id><snippet>StrippedString</snippet></ROW><ROW><id>18414040</id><snippet>String</snippet></ROW><ROW><id>18414142</id><snippet>Person.objects.get_or_create</snippet></ROW><ROW><id>18414142</id><snippet>obj</snippet></ROW><ROW><id>18414142</id><snippet>created</snippet></ROW><ROW><id>18414142</id><snippet>obj</snippet></ROW><ROW><id>18414142</id><snippet>created</snippet></ROW><ROW><id>18414302</id><snippet>&gt;&gt;&gt; json.loads('"0"')
'0'
&gt;&gt;&gt; json.loads(b'"0"')
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
  File "/usr/lib/python3.3/json/__init__.py", line 319, in loads
    return _default_decoder.decode(s)
  File "/usr/lib/python3.3/json/decoder.py", line 352, in decode
    obj, end = self.raw_decode(s, idx=_w(s, 0).end())
TypeError: can't use a string pattern on a bytes-like object
</snippet></ROW><ROW><id>18414302</id><snippet>json.loads</snippet></ROW><ROW><id>18414302</id><snippet>sqlite3.register_converter('JSON', lambda x: json.loads(x.decode('utf-8')))
</snippet></ROW><ROW><id>18414447</id><snippet>CREATE TABLE</snippet></ROW><ROW><id>18414447</id><snippet>In [27]: pin_schema = dict(rowid = 'INTEGER PRIMARY KEY AUTOINCREMENT',
                pinnedId = 'INTEGER')

In [30]: pin_table_name = 'Pins'

In [31]: sql = 'CREATE TABLE IF NOT EXISTS ' + pin_table_name + ' ({})'.format(','.join(pin_schema))

In [32]: sql
Out[32]: 'CREATE TABLE IF NOT EXISTS Pins (pinnedId,rowid)'
</snippet></ROW><ROW><id>18414447</id><snippet>pin_schema</snippet></ROW><ROW><id>18414447</id><snippet>log_schema</snippet></ROW><ROW><id>18414447</id><snippet>pin_schema.items()</snippet></ROW><ROW><id>18414447</id><snippet>sql = 'CREATE TABLE IF NOT EXISTS ' + pin_table_name + ' ({})'.format(
    ', '.join('{f} {t}'.format(f=field, t=field_type)
             for field, field_type in pin_schema.items()))

In [35]: sql
Out[35]: 'CREATE TABLE IF NOT EXISTS Pins (pinnedId INTEGER, rowid INTEGER PRIMARY KEY AUTOINCREMENT)'
</snippet></ROW><ROW><id>18414447</id><snippet>rowid</snippet></ROW><ROW><id>18414450</id><snippet>dev_line_to_replace</snippet></ROW><ROW><id>18414450</id><snippet>devname</snippet></ROW><ROW><id>18414450</id><snippet>dev_line_to_replace</snippet></ROW><ROW><id>18414450</id><snippet>re.escape</snippet></ROW><ROW><id>18414622</id><snippet>cd /Library/Frameworks/Python.framework/Versions/2.7</snippet></ROW><ROW><id>18414622</id><snippet>/Library/Frameworks/Python.framework/Versions/2.7/bin</snippet></ROW><ROW><id>18414622</id><snippet>PATH</snippet></ROW><ROW><id>18414622</id><snippet>python</snippet></ROW><ROW><id>18414622</id><snippet>python2.7</snippet></ROW><ROW><id>18414622</id><snippet>/usr/local/bin</snippet></ROW><ROW><id>18414622</id><snippet>$ which python
/Library/Frameworks/Python.framework/Versions/2.7/bin/python
$ python
Python 2.7.5 (v2.7.5:ab05e7dd2788, May 13 2013, 13:18:45)
[GCC 4.2.1 (Apple Inc. build 5666) (dot 3)] on darwin
Type "help", "copyright", "credits" or "license" for more information.
&gt;&gt;&gt; import sys
&gt;&gt;&gt; sys.maxsize
9223372036854775807
&gt;&gt;&gt; sys.maxint
9223372036854775807
</snippet></ROW><ROW><id>18414699</id><snippet>flask-restful</snippet></ROW><ROW><id>18414699</id><snippet>dictionary</snippet></ROW><ROW><id>18414699</id><snippet>json</snippet></ROW><ROW><id>18414699</id><snippet>json</snippet></ROW><ROW><id>18414699</id><snippet>def get(self, objectid):
    collection = db["products"]
    result = collection.find_one({"_id": ObjectId(objectid)})
    result['_id'] = result['_id'].__str__()
    return result
</snippet></ROW><ROW><id>18414699</id><snippet>json</snippet></ROW><ROW><id>18414699</id><snippet>flask-restful</snippet></ROW><ROW><id>18414711</id><snippet>,</snippet></ROW><ROW><id>18414711</id><snippet>&gt;&gt;&gt; ((1,2) (2,3))
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
TypeError: 'tuple' object is not callable
</snippet></ROW><ROW><id>18414711</id><snippet>&gt;&gt;&gt; ((1,2), (2,3))
((1, 2), (2, 3))
</snippet></ROW><ROW><id>18414753</id><snippet>from geventwebsocket.handler import WebSocketHandler
from gevent.pywsgi import WSGIServer
from flask import Flask, request
from time import sleep
from cStringIO import StringIO

import pygame
pygame.init()

import SimpleCV as scv

app = Flask(__name__)
cam = scv.Camera(0)


@app.route('/camera')
def camera():

    if request.environ.get('wsgi.websocket'):
        ws = request.environ['wsgi.websocket']

        while True:
            fp = StringIO()
            image = cam.getImage().flipHorizontal().getPIL()
            image.save(fp, 'JPEG')
            ws.send(fp.getvalue().encode("base64"))
            #fp.close() &lt;&lt; benchmark and memory tests needed
            sleep(0.5)


if __name__ == '__main__':
    http_server = WSGIServer(('',5000), app, handler_class=WebSocketHandler)
    http_server.serve_forever()
</snippet></ROW><ROW><id>18415012</id><snippet>'#{:06x}'.format(random.randint(0, 0x00ffff))
</snippet></ROW><ROW><id>18415012</id><snippet>'#{:06x}'.format(random.randint(0xff0000, 0xffff00))
</snippet></ROW><ROW><id>18415088</id><snippet>class MainClass:
    def __setattr__(self, name, value):
        self.__dict__[name] = value

def getRectangleNameGenerator(N = 10):
    X = 0
    while X &lt;= N:
        X += 1
        yield "Rectangle" + str(X)
RectangleName = getRectangleNameGenerator()

ClassInstances = {next(RectangleName) : MainClass}
ClassInstances[next(RectangleName)] = MainClass

ClassInstances["Rectangle1"].Temp = 10
print ClassInstances["Rectangle1"].Temp
</snippet></ROW><ROW><id>18415088</id><snippet>class MainClass:
    X, Y = 0, 0

def getRectangleNameGenerator(N = 10):
    X = 0
    while X &lt;= N:
        X += 1
        yield "Rectangle" + str(X)
RectangleName = getRectangleNameGenerator()

ClassInstances = {next(RectangleName) : MainClass}
ClassInstances[next(RectangleName)] = MainClass

ClassInstances["Rectangle1"].X = 11
print ClassInstances["Rectangle1"].X
</snippet></ROW><ROW><id>18415137</id><snippet>return</snippet></ROW><ROW><id>18415137</id><snippet>def v():
    response = urllib2.urlopen('https://api.gosquared.com/v2/concurrents?api_key=xxxxx&amp;site_token=xxxx&amp;presenter=old')
    data = json.load(response) 
    #comment the below line if you don't want to print data and simply want to return it
    print data
    return data
</snippet></ROW><ROW><id>18415137</id><snippet>returned_data = v()
</snippet></ROW><ROW><id>18415231</id><snippet>order_by</snippet></ROW><ROW><id>18415231</id><snippet>q = Post.objects.filter(public=True).order_by('like_count')
</snippet></ROW><ROW><id>18415336</id><snippet>connect</snippet></ROW><ROW><id>18415336</id><snippet>post_save</snippet></ROW><ROW><id>18415336</id><snippet>connect</snippet></ROW><ROW><id>18415336</id><snippet>post_save</snippet></ROW><ROW><id>18415336</id><snippet>User</snippet></ROW><ROW><id>18415336</id><snippet>connect</snippet></ROW><ROW><id>18415336</id><snippet>post_save</snippet></ROW><ROW><id>18415336</id><snippet>User</snippet></ROW><ROW><id>18415348</id><snippet>&lt;form&gt;
    &lt;input type="submit" name="action" value="Send"/&gt;
    &lt;input type="submit" name="action" value="Hello"/&gt;
&lt;/form&gt;
</snippet></ROW><ROW><id>18415348</id><snippet>action</snippet></ROW><ROW><id>18415348</id><snippet>if request.POST['action'] == 'Send':
    # do this
elif request.POST['action'] == 'Hello':
    # do that
</snippet></ROW><ROW><id>18415440</id><snippet>#!/bin/sh

lockfile="/tmp/cron_rsync.lock"
if [ -z "$flock" ] ; then
  lockopts="-w 0 $lockfile"
  exec env flock=1 flock $lockopts $0 "$@"
fi
</snippet></ROW><ROW><id>18415546</id><snippet>@jit</snippet></ROW><ROW><id>18415546</id><snippet>@autojit
def yourfunction(...):
    ...
</snippet></ROW><ROW><id>18415546</id><snippet>@jit</snippet></ROW><ROW><id>18415649</id><snippet>numpy</snippet></ROW><ROW><id>18415649</id><snippet>matplotlib</snippet></ROW><ROW><id>18415649</id><snippet>matplotlibrc</snippet></ROW><ROW><id>18415649</id><snippet>PYTHONSTARTUP</snippet></ROW><ROW><id>18415649</id><snippet>import numpy as np</snippet></ROW><ROW><id>18415649</id><snippet>import matplotlib.pyplot as plt</snippet></ROW><ROW><id>18415649</id><snippet>set PYTHONSTARTUP=C:\Users\yourlogin\somewhere\startup.py
</snippet></ROW><ROW><id>18415649</id><snippet>export PYTHONSTARTUP=/usr/local/bin/startup.py
</snippet></ROW><ROW><id>18415795</id><snippet>titles.select('h3/a/text()').extract()</snippet></ROW><ROW><id>18415795</id><snippet>item['title'] = titles.select('h3/a/text()').extract()[0]
</snippet></ROW><ROW><id>18415795</id><snippet>TakeFirst()</snippet></ROW><ROW><id>18415795</id><snippet>from scrapy.contrib.loader import XPathItemLoader
from scrapy.contrib.loader.processor import TakeFirst, MapCompose

class YourItemLoader(XPathItemLoader):
    default_item_class = YourItemClass

    default_input_processor = MapCompose(unicode.strip)
    default_output_processor = TakeFirst()

    # title_in = MapCompose(unicode.strip)
</snippet></ROW><ROW><id>18415795</id><snippet>def parse(self, response):
    hxs = HtmlXPathSelector(response)

    for title in hxs.select("//tr/td"):
        loader = YourItemLoader(selector=title, response=response)
        loader.add_xpath('title', 'h3/a/text()')

        yield loader.load_item()
</snippet></ROW><ROW><id>18415853</id><snippet>In [11]: results = [(10, 'Mary'), (9, 'John'), (10, 'George'), (9, 'Frank'), (9, 'Adam')]

In [12]: results.sort(key=lambda x: x[1])

In [13]: results.sort(key=lambda x: x[0], reverse=True)

In [14]: results
Out[14]: [(10, 'George'), (10, 'Mary'), (9, 'Adam'), (9, 'Frank'), (9, 'John')]
</snippet></ROW><ROW><id>18415853</id><snippet>sort</snippet></ROW><ROW><id>18415853</id><snippet>key</snippet></ROW><ROW><id>18415853</id><snippet>In [50]: def key(elem):
    ...:     return elem[0], [-ord(c) for c in elem[1]]

In [51]: sorted(results, key=key, reverse=True)
Out[51]: [(10, 'George'), (10, 'Mary'), (9, 'Adam'), (9, 'Frank'), (9, 'John')]
</snippet></ROW><ROW><id>18415998</id><snippet>self.request.url</snippet></ROW><ROW><id>18415998</id><snippet>self.request.path</snippet></ROW><ROW><id>18415998</id><snippet>self.response.out.write("something")</snippet></ROW><ROW><id>18415998</id><snippet>('/blog/(\d+).json',PermalinkJSONHandler),&lt;br&gt;
('/blog.json',FullJSONHandler),...</snippet></ROW><ROW><id>18416058</id><snippet>a()</snippet></ROW><ROW><id>18416058</id><snippet>def a():
    return "test"


class b:
    def c(self):
        x = a()
        print x

b().c()  # prints "test"
</snippet></ROW><ROW><id>18416207</id><snippet>dictlist = [{'url': 'google.com', 'a': 10, 'content': 'google', 'd': 80, 'f': 1, 'lock': 'dd'}, 
            {'url': 'fb.com', 'z': 25, 'content': 'google', 'd': 60, 'p': 1, 'a': 19}]


result = []
sumlist = ['a', 'z', 'd']
for d in dictlist:
    result.append({'newurl': d['url'],
                   'newtitle': d['content'],
                   'sumvalue': sum(d.get(item, 0) for item in sumlist)})

print result
</snippet></ROW><ROW><id>18416207</id><snippet>[{'newtitle': 'google', 'sumvalue': 90, 'newurl': 'google.com'}, 
 {'newtitle': 'google', 'sumvalue': 104, 'newurl': 'fb.com'}]
</snippet></ROW><ROW><id>18416207</id><snippet>print [{'newurl': d['url'], 'newtitle': d['content'], 'sumvalue': sum(d.get(item, 0) for item in ['a', 'z', 'd'])} for d in dictlist]
</snippet></ROW><ROW><id>18416308</id><snippet>from threading import Thread

class MyClass(Thread):
    def __init__(self, other, arguments, here):
        super(MyClass, self).__init__()
        self.daemon = True
        self.cancelled = False
        # do other initialization here

    def run(self):
        """Overloaded Thread.run, runs the update 
        method once per every 10 milliseconds."""

        while not self.cancelled:
            self.update()
            sleep(0.01)

    def cancel(self):
        """End this timer thread"""
        self.cancelled = True

    def update(self):
        """Update the counters"""
        pass

my_class_instance = MyClass()

# explicit start is still better than calling in constructor
my_class_instance.start()

# you can kill the thread with
my_class_instance.cancel()
</snippet></ROW><ROW><id>18416565</id><snippet>def get_position_in_direction(position, direction):
    DIRECTIONS = {'n': (-1, 0), 's': (1, 0), 'e': (0, 1), 'w': (0, -1)} 
    offset = DIRECTIONS[direction]
    return (position[0] + offset[0], position[1] + offset[1])
</snippet></ROW><ROW><id>18416568</id><snippet>&gt;&gt;&gt; import ast
&gt;&gt;&gt; s = "['[0,0,0]','[0,0,0]']"
&gt;&gt;&gt; s = ast.literal_eval(s)
&gt;&gt;&gt; s
['[0,0,0]', '[0,0,0]']
&gt;&gt;&gt; s = [ast.literal_eval(sub) for sub in s]
&gt;&gt;&gt; s
[[0, 0, 0], [0, 0, 0]] 
</snippet></ROW><ROW><id>18416568</id><snippet>literal_eval</snippet></ROW><ROW><id>18416568</id><snippet>eval</snippet></ROW><ROW><id>18416568</id><snippet>ast.literal_eval(node_or_string)</snippet></ROW><ROW><id>18416722</id><snippet>To clarify, the message is constructed in httplib from the method, URL, headers, etc. If any of these is Unicode, the whole string gets converted to Unicode (I presume this is normal Python behavior). Then if you try to append a UTF-8 string you get the error I described in the original question...</snippet></ROW><ROW><id>18416815</id><snippet>list.replace()</snippet></ROW><ROW><id>18416815</id><snippet>def list_replace_test(s, chars):
    """Replaces a set of chars to 0"""
    return [a if a not in chars else '0' for a in s]
</snippet></ROW><ROW><id>18416815</id><snippet>chars</snippet></ROW><ROW><id>18416815</id><snippet>chars = set(chars)
</snippet></ROW><ROW><id>18416815</id><snippet>str.translate()</snippet></ROW><ROW><id>18416815</id><snippet>from string import maketrans

map = maketrans('aeiou', '0' * 5)
def str_translate(s, map):
    return s.translate(map)
</snippet></ROW><ROW><id>18416815</id><snippet>&gt;&gt;&gt; timeit.timeit("list_replace_test(s2, chars)", setup="from __main__ import list_replace_test, s2, chars")
28.60542392730713
&gt;&gt;&gt; timeit.timeit("string_replace_test(s, chars)", setup="from __main__ import string_replace_test, s, chars")
4.002871990203857
&gt;&gt;&gt; timeit.timeit("str_translate(s, map)", setup="from __main__ import str_translate, s, map")
0.7250571250915527
</snippet></ROW><ROW><id>18416815</id><snippet>str.replace()</snippet></ROW><ROW><id>18417010</id><snippet>C-c &lt;</snippet></ROW><ROW><id>18417010</id><snippet>python-indent-shift-left</snippet></ROW><ROW><id>18417010</id><snippet>C-c &gt;</snippet></ROW><ROW><id>18417010</id><snippet>python-indent-shift-right</snippet></ROW><ROW><id>18417010</id><snippet>def</snippet></ROW><ROW><id>18417010</id><snippet>C-c &gt;</snippet></ROW><ROW><id>18417127</id><snippet>x.keys()</snippet></ROW><ROW><id>18417127</id><snippet>y</snippet></ROW><ROW><id>18417127</id><snippet>x</snippet></ROW><ROW><id>18417127</id><snippet>&gt;&gt;&gt; x={'red':0.25, 'yellow':0.05, 'pink':0.35, 'brown':0.22, 'blue':0.13}
&gt;&gt;&gt; y={'red':2, 'blue':3, 'yellow':1}
&gt;&gt;&gt; [val for elem, val in x.items() if elem in y]
[0.13, 0.05, 0.25]
</snippet></ROW><ROW><id>18417127</id><snippet>y</snippet></ROW><ROW><id>18417127</id><snippet>x</snippet></ROW><ROW><id>18417127</id><snippet>y</snippet></ROW><ROW><id>18417127</id><snippet>&gt;&gt;&gt; [x[key] for key in y]
[0.13, 0.05, 0.25]
</snippet></ROW><ROW><id>18417127</id><snippet>y.values()</snippet></ROW><ROW><id>18417127</id><snippet>k</snippet></ROW><ROW><id>18417127</id><snippet>&gt;&gt;&gt; k = []
&gt;&gt;&gt; for b in x.keys():
    if b in y.keys():
        k.append(x[b])


&gt;&gt;&gt; k
[0.13, 0.05, 0.25]
</snippet></ROW><ROW><id>18417127</id><snippet>&gt;&gt;&gt; for b in x:
    if b in y:
        k.append(x[b])


&gt;&gt;&gt; k
[0.13, 0.05, 0.25]
</snippet></ROW><ROW><id>18417348</id><snippet>import cv2
src = cv2.imread('book.png', cv2.CV_LOAD_IMAGE_GRAYSCALE)
</snippet></ROW><ROW><id>18417348</id><snippet>numpy.ndarray</snippet></ROW><ROW><id>18417348</id><snippet>src</snippet></ROW><ROW><id>18417539</id><snippet>range</snippet></ROW><ROW><id>18417539</id><snippet>&gt;&gt;&gt; count = range(0,6)
&gt;&gt;&gt; count
[0, 1, 2, 3, 4, 5]
</snippet></ROW><ROW><id>18417539</id><snippet>&gt;&gt;&gt; count = [1,2,3]
&gt;&gt;&gt; count.extend([4,5,6])
&gt;&gt;&gt; count
[1, 2, 3, 4, 5, 6]
</snippet></ROW><ROW><id>18417539</id><snippet>count[len(count):len(count)] = [4,5,6]</snippet></ROW><ROW><id>18417539</id><snippet>count += [4,5,6]</snippet></ROW><ROW><id>18417539</id><snippet>&gt;&gt;&gt; count = [1,2,3,4,5,6]
&gt;&gt;&gt; count[2:3] = [7,8,9,10,11,12]
&gt;&gt;&gt; count
[1, 2, 7, 8, 9, 10, 11, 12, 4, 5, 6]
</snippet></ROW><ROW><id>18417539</id><snippet>count</snippet></ROW><ROW><id>18417588</id><snippet>y_true</snippet></ROW><ROW><id>18417588</id><snippet>y_true=np.array([0, 1, 0, 0, 1, 1, 1, 1, 1])
</snippet></ROW><ROW><id>18417588</id><snippet>roc_auc_score</snippet></ROW><ROW><id>18417588</id><snippet>y_true</snippet></ROW><ROW><id>18417588</id><snippet>classes = np.unique(y_true)
if (pos_label is None and not (np.all(classes == [0, 1]) or
 np.all(classes == [-1, 1]) or
 np.all(classes == [0]) or
 np.all(classes == [-1]) or
 np.all(classes == [1]))):
    raise ValueError("Data is not binary and pos_label is not specified")
</snippet></ROW><ROW><id>18417588</id><snippet>pos_label</snippet></ROW><ROW><id>18417588</id><snippet>None</snippet></ROW><ROW><id>18417588</id><snippet>y_true</snippet></ROW><ROW><id>18417588</id><snippet>np.all</snippet></ROW><ROW><id>18417588</id><snippet>false</snippet></ROW><ROW><id>18417588</id><snippet>true</snippet></ROW><ROW><id>18417656</id><snippet>ds_data = soup.find('div', {'class': 'tabsBody'}
       .findNext(text=pattern)
       .findNext('div', {'class': 'ds_data'})
</snippet></ROW><ROW><id>18417656</id><snippet>findNext</snippet></ROW><ROW><id>18417656</id><snippet>dict()</snippet></ROW><ROW><id>18417656</id><snippet>soup.find</snippet></ROW><ROW><id>18417656</id><snippet>divsoup = soup.find('div', {'class': 'tabsBody'})
ds_data = divsoup.find(text=pattern).findNext('div', {'class': 'ds_data'})
</snippet></ROW><ROW><id>18417656</id><snippet>&lt;div class="tabsBody"&gt;&lt;/div&gt;</snippet></ROW><ROW><id>18417656</id><snippet>findNext</snippet></ROW><ROW><id>18417656</id><snippet>find</snippet></ROW><ROW><id>18417656</id><snippet>None</snippet></ROW><ROW><id>18417939</id><snippet>my_function</snippet></ROW><ROW><id>18417939</id><snippet>import threading

class Thread(threading.Thread):
    def __init__(self,callback,*args,**kwargs):
        self.__callback = callback
        threading.Thread.__init__(self,*args,**kwargs)
    def run(self):
        try:
            if self.__target:
                print('thread')
                _self = self.__kwargs.get('self',self.__args[0])
                self.__callback(_self, self.__target(*self.__args, **self.__kwargs))
        finally:
            # Avoid a refcycle if the thread is running a function with
            # an argument that has a member that points to the thread.
            del self.__target, self.__args, self.__kwargs        

def background(callback):
    print('background')
    def wrapper(fun):
        print('wrapper')
        def inner(*args,**kwargs):
            print('inner')
            Thread(callback=callback,target=fun,args=args,kwargs=kwargs).start()
        return inner
    return wrapper

def spinner(fun):
    def inner(self,*args,**kwargs):
        self.show()
        result = fun(self,*args,**kwargs)
        self.hide()
        return result
    return inner


def spinner_hide(fun):
    def inner(self,*args,**kwargs):
        result = fun(self,*args,**kwargs)
        self.hide()
        return result
    return inner

def spinner_show(fun):
    def inner(self,*args,**kwargs):
        self.show()
        result = fun(self,*args,**kwargs)
        return result
    return inner


class A(object):
    @spinner_hide
    def my_function_callback(self,data):
        print('callback')
        print(data)
    @spinner_show
    @background(my_function_callback)
    def my_function(self, input):
        # do something here that takes long time
        print(input)
        output=input
        return output

    def show(self): print('showed')
    def hide(self): print('hidden')

a=A()
a.my_function('gogo')
</snippet></ROW><ROW><id>18417939</id><snippet>background
wrapper
showed
inner
thread
&gt;&gt;&gt; 
gogo
callback
gogo
hidden
</snippet></ROW><ROW><id>18417939</id><snippet>&gt;&gt;&gt;</snippet></ROW><ROW><id>18417954</id><snippet>scipy.sparse.vstack</snippet></ROW><ROW><id>18417954</id><snippet>scipy.sparse.hstack</snippet></ROW><ROW><id>18417954</id><snippet>numpy.vstack</snippet></ROW><ROW><id>18417954</id><snippet>numpy.hstack</snippet></ROW><ROW><id>18417954</id><snippet>from scipy.sparse import coo_matrix
m = coo_matrix(np.array([[0,0,1],[1,0,0],[1,0,0]]))
a = np.ones(m.shape)
</snippet></ROW><ROW><id>18417954</id><snippet>np.vstack</snippet></ROW><ROW><id>18417954</id><snippet>np.vstack((a,m))
#ValueError: all the input array dimensions except for the concatenation axis must match exactly
</snippet></ROW><ROW><id>18417954</id><snippet>scipy.sparse.vstack</snippet></ROW><ROW><id>18417954</id><snippet>scipy.sparse.vstack((a,m))
#&lt;6x3 sparse matrix of type '&lt;type 'numpy.float64'&gt;'
#        with 12 stored elements in COOrdinate format&gt;
</snippet></ROW><ROW><id>18418014</id><snippet>-H</snippet></ROW><ROW><id>18418014</id><snippet>uwsgi -H /path/to/your/virtualenv 
</snippet></ROW><ROW><id>18418127</id><snippet>@inlineCallbacks</snippet></ROW><ROW><id>18418127</id><snippet>Deferred</snippet></ROW><ROW><id>18418127</id><snippet>@inlineCallbacks</snippet></ROW><ROW><id>18418127</id><snippet>from twisted.internet import reactor
from twisted.web.client import Agent
from twisted.internet.defer import inlineCallbacks
from twisted.trial import unittest
from twisted.web.http_headers import Headers
from twisted.internet.error import DNSLookupError


class SomeTestCase(unittest.TestCase):
    @inlineCallbacks
    def test_smth(self):
        ag = Agent(reactor)
        response = yield ag.request('GET', 'http://example.com/', Headers({'User-Agent': ['Twisted Web Client Example']}), None)
        self.assertEquals(response.code, 200)

    @inlineCallbacks
    def test_exception(self):
        ag = Agent(reactor)
        try:
            yield ag.request('GET', 'http://exampleeee.com/', Headers({'User-Agent': ['Twisted Web Client Example']}), None)
        except DNSLookupError:
            pass
        else:
            self.fail()
</snippet></ROW><ROW><id>18418127</id><snippet>Deferred</snippet></ROW><ROW><id>18418127</id><snippet>@inlineCallbacks</snippet></ROW><ROW><id>18418127</id><snippet>Deferred</snippet></ROW><ROW><id>18418127</id><snippet>@inlineCallbacks</snippet></ROW><ROW><id>18418127</id><snippet>Deferred</snippet></ROW><ROW><id>18418640</id><snippet>for event in pygame.event.get():
    if event.type==QUIT:
        pygame.quit()
        sys.exit()
</snippet></ROW><ROW><id>18418640</id><snippet>pygame.event.get()</snippet></ROW><ROW><id>18418640</id><snippet>interface()</snippet></ROW><ROW><id>18418640</id><snippet>pygame.event.get()</snippet></ROW><ROW><id>18418640</id><snippet>janela.blit</snippet></ROW><ROW><id>18418640</id><snippet>KEYDOWN</snippet></ROW><ROW><id>18418640</id><snippet>pygame.key.set_repeat()</snippet></ROW><ROW><id>18418640</id><snippet>.subir</snippet></ROW><ROW><id>18418640</id><snippet>.descer</snippet></ROW><ROW><id>18418640</id><snippet>set</snippet></ROW><ROW><id>18418640</id><snippet>pygame.key.get_pressed()</snippet></ROW><ROW><id>18418943</id><snippet>...
from scipy.interpolate import interp1d
import numpy

class Interface(ttk.Frame):
    ....
    def Plot(self):
        x_vals = range(int(self.x_from_1_inp.get()),int(self.x_from_2_inp.get()))
        eq = eval(self.equation.get())
        self.prepare_table(x_vals,eq)
        f = interp1d(x_vals, self.y_values, kind='cubic')
        x_new = numpy.linspace(x_vals[0], x_vals[-1], (x_vals[-1]-x_vals[0])*4)
        plt.plot(x_new, f(x_new))
        plt.grid(True)
        plt.show()
</snippet></ROW><ROW><id>18418978</id><snippet>contour</snippet></ROW><ROW><id>18418978</id><snippet>colorbar</snippet></ROW><ROW><id>18418978</id><snippet>X, Y = np.meshgrid(x, y, copy=False)
Z = function(X, Y) # I don't know how you are getting the z values from...

import matplotlib.pyplot as plt
plt.contour(X, Y, Z) # non-filled contour
</snippet></ROW><ROW><id>18418978</id><snippet>plt.contourf(X, Y, Z) # filled contour
</snippet></ROW><ROW><id>18418978</id><snippet>colorbar</snippet></ROW><ROW><id>18418978</id><snippet>plt.colorbar()
</snippet></ROW><ROW><id>18419063</id><snippet>RedirectRoute</snippet></ROW><ROW><id>18419063</id><snippet>query</snippet></ROW><ROW><id>18419063</id><snippet>/search?query=a+query</snippet></ROW><ROW><id>18419063</id><snippet>     &lt;form class="navbar-form navbar-right" name="searchform" action="/search" method="get"&gt;

    &lt;div class="form-group"&gt;
        &lt;input class="form-control" placeholder="Any keyword" type="text" name="query" /&gt;
    &lt;/div&gt;
        &lt;button class="btn btn-success" type="submit"&gt;Search&lt;/button&gt;
    &lt;/form&gt;  
</snippet></ROW><ROW><id>18419063</id><snippet>import handlers

_routes = [
    ('/search', handlers.SearchHandler, name='search')
]
</snippet></ROW><ROW><id>18419133</id><snippet>def show_categories(request):
    ctx = {
        'categories': Category.objects.all(),
    }

    return render(request, 'my_template.html', ctx)
</snippet></ROW><ROW><id>18419133</id><snippet>{% for category in categories %}
{{ category.name }}
| Item     | Qty available |
{% for item in category.item_set.all %}
| Item {{ item.name|rjust:'3' }} | {{ item.quantity|ljust:'13' }} |
{% endfor %}
{{ category.info }}
{% endfor %}
</snippet></ROW><ROW><id>18419133</id><snippet>related_name='items'</snippet></ROW><ROW><id>18419133</id><snippet>category = models.ForeignKey(Category)</snippet></ROW><ROW><id>18419133</id><snippet>{% for item in category.item_set.all %}</snippet></ROW><ROW><id>18419133</id><snippet>{% for item in category.items.all %}</snippet></ROW><ROW><id>18419415</id><snippet>this function uses :py:func:`app.db.create_user_db`
</snippet></ROW><ROW><id>18419548</id><snippet>mailbox</snippet></ROW><ROW><id>18419548</id><snippet>mailbox.mbox</snippet></ROW><ROW><id>18419652</id><snippet>get_context_data</snippet></ROW><ROW><id>18419652</id><snippet>class ListDashboardView(ListView):
    model = Contact
    template_name = 'dashboard.html'

    def get_context_data(self, **kwargs):
        ctx = super(ListDashboardView, self).get_context_data(**kwargs)
        ctx['polls'] = Poll.objects.all()
        return ctx
</snippet></ROW><ROW><id>18419658</id><snippet>$ brew install python3
==&gt; Downloading http://python.org/ftp/python/3.3.0/Python-3.3.0.tar.bz2
Already downloaded: /Library/Caches/Homebrew/python3-3.3.0.tar.bz2
==&gt; ./configure --prefix=/usr/local/Cellar/python3/3.3.0 --enable-ipv6 --datarootdir=/usr/local/Cell
==&gt; make
==&gt; make install PYTHONAPPSDIR=/usr/local/Cellar/python3/3.3.0
==&gt; make frameworkinstallextras PYTHONAPPSDIR=/usr/local/Cellar/python3/3.3.0/share/python3
==&gt; Downloading https://pypi.python.org/packages/source/d/distribute/distribute-0.6.35.tar.gz
Already downloaded: /Library/Caches/Homebrew/distribute-0.6.35.tar.gz
==&gt; /usr/local/Cellar/python3/3.3.0/bin/python3.3 -s setup.py install --force --verbose --install-li
==&gt; Downloading https://pypi.python.org/packages/source/p/pip/pip-1.3.1.tar.gz
Already downloaded: /Library/Caches/Homebrew/pip-1.3.1.tar.gz
==&gt; /usr/local/Cellar/python3/3.3.0/bin/python3.3 -s setup.py install --force --verbose --install-li
==&gt; Caveats
Homebrew's Python3 framework
  /usr/local/Cellar/python3/3.3.0/Frameworks/Python.framework

Distribute and Pip have been installed. To update them
  pip3 install --upgrade distribute
  pip3 install --upgrade pip

To symlink "Idle 3" and the "Python Launcher 3" to ~/Applications
  `brew linkapps`

You can install Python packages with
  `pip3 install &lt;your_favorite_package&gt;`

They will install into the site-package directory
 /usr/local/lib/python3.3/site-packages
Executable python scripts will be put in:
 /usr/local/share/python3
so you may want to put "/usr/local/share/python3" in your PATH, too.

See: https://github.com/mxcl/homebrew/wiki/Homebrew-and-Python
</snippet></ROW><ROW><id>18419658</id><snippet>PATH</snippet></ROW><ROW><id>18419658</id><snippet>~/.bash_profile</snippet></ROW><ROW><id>18419658</id><snippet>export PATH=/usr/local/bin:/usr/local/sbin:~/bin:$PATH
</snippet></ROW><ROW><id>18419658</id><snippet>$ source ~/.bash_profile
</snippet></ROW><ROW><id>18419658</id><snippet>$ python3
Python 3.3.0 (default, Mar 26 2013, 10:01:40) 
[GCC 4.2.1 Compatible Apple LLVM 4.2 (clang-425.0.27)] on darwin
Type "help", "copyright", "credits" or "license" for more information.
&gt;&gt;&gt;
</snippet></ROW><ROW><id>18419658</id><snippet>$ which python3
/usr/local/bin/python3
</snippet></ROW><ROW><id>18419682</id><snippet>key=API-key</snippet></ROW><ROW><id>18419682</id><snippet>key</snippet></ROW><ROW><id>18419682</id><snippet>Authorization</snippet></ROW><ROW><id>18419791</id><snippet>NaN</snippet></ROW><ROW><id>18419791</id><snippet>rsparid</snippet></ROW><ROW><id>18419791</id><snippet>repr</snippet></ROW><ROW><id>18419791</id><snippet>DataFrames</snippet></ROW><ROW><id>18419791</id><snippet>dtype</snippet></ROW><ROW><id>18419791</id><snippet>DataFrame.info()</snippet></ROW><ROW><id>18419791</id><snippet>df.info()</snippet></ROW><ROW><id>18419791</id><snippet>DataFrame</snippet></ROW><ROW><id>18419791</id><snippet>dtype</snippet></ROW><ROW><id>18419791</id><snippet>In [205]: datalines_int = DataFrame({'rsparid':[1400,634,1508,96,161,1011,1007,518,1955,678]})

In [206]: datalines_str = DataFrame({'rsparid':map(str,[1400,634,1508,96,161,1011,1007,518,1955,678])})

In [207]: datalines_int
Out[207]:
   rsparid
0     1400
1      634
2     1508
3       96
4      161
5     1011
6     1007
7      518
8     1955
9      678

In [208]: datalines_str
Out[208]:
  rsparid
0    1400
1     634
2    1508
3      96
4     161
5    1011
6    1007
7     518
8    1955
9     678

In [209]: datalines_int.info()
&lt;class 'pandas.core.frame.DataFrame'&gt;
Int64Index: 10 entries, 0 to 9
Data columns (total 1 columns):
rsparid    10  non-null values
dtypes: int64(1)

In [210]: datalines_str.info()
&lt;class 'pandas.core.frame.DataFrame'&gt;
Int64Index: 10 entries, 0 to 9
Data columns (total 1 columns):
rsparid    10  non-null values
dtypes: object(1)
</snippet></ROW><ROW><id>18419791</id><snippet>repr</snippet></ROW><ROW><id>18419791</id><snippet>DataFrame</snippet></ROW><ROW><id>18419901</id><snippet>return Notice.objects.order_by('-posted_on'))
</snippet></ROW><ROW><id>18419901</id><snippet>return Notice.objects.order_by('-posted_on')
</snippet></ROW><ROW><id>18420042</id><snippet>stdout</snippet></ROW><ROW><id>18420042</id><snippet>tty</snippet></ROW><ROW><id>18420042</id><snippet>/* This is needed to handle the unlikely case that the
 * interpreter is in interactive mode *and* stdin/out are not
 * a tty.  This can happen, for example if python is run like
 * this: python -i &lt; test1.py
 */
if (!isatty (fileno (sys_stdin)) || !isatty (fileno (sys_stdout)))
    rv = PyOS_StdioReadline (sys_stdin, sys_stdout, prompt);
else
    rv = (*PyOS_ReadlineFunctionPointer)(sys_stdin, sys_stdout,
                                         prompt);
</snippet></ROW><ROW><id>18420042</id><snippet>Parser/myreadline.c</snippet></ROW><ROW><id>18420042</id><snippet>readline</snippet></ROW><ROW><id>18420042</id><snippet>PyOS_ReadlineFunctionPointer</snippet></ROW><ROW><id>18420042</id><snippet>call_readline</snippet></ROW><ROW><id>18420042</id><snippet>readline</snippet></ROW><ROW><id>18420042</id><snippet>rl_callback_handler_install</snippet></ROW><ROW><id>18420042</id><snippet>stdout</snippet></ROW><ROW><id>18420042</id><snippet>stderr</snippet></ROW><ROW><id>18420042</id><snippet>tty</snippet></ROW><ROW><id>18420138</id><snippet>x.a.append(1)
</snippet></ROW><ROW><id>18420138</id><snippet>c.a</snippet></ROW><ROW><id>18420138</id><snippet>list</snippet></ROW><ROW><id>18420138</id><snippet>append</snippet></ROW><ROW><id>18420138</id><snippet>x.b += 1
</snippet></ROW><ROW><id>18420138</id><snippet>x.b = x.b + 1
</snippet></ROW><ROW><id>18420138</id><snippet>__iadd__</snippet></ROW><ROW><id>18420138</id><snippet>b</snippet></ROW><ROW><id>18420138</id><snippet>x</snippet></ROW><ROW><id>18420138</id><snippet>2</snippet></ROW><ROW><id>18420138</id><snippet>x.a += [1]
</snippet></ROW><ROW><id>18420138</id><snippet>x.a = x.a + [1]
</snippet></ROW><ROW><id>18420138</id><snippet>class HasABoxedInt(object):
    boxed_int = [0]    # int boxed in a singleton list

a = HasABoxedInt()
a.boxed_int[0] += 1
b = HasABoxedInt()
print(b.boxed_int[0])  # prints 1, not zero
</snippet></ROW><ROW><id>18420138</id><snippet>class BoxedInt(object):
    def __init__(self, value):
        self.value = value
    def __iadd__(self, i):
        self.value += i
</snippet></ROW><ROW><id>18420191</id><snippet>from cx_Freeze import setup, Executable

# dependencies
build_exe_options = {
    "packages": ["os", "sys", "glob", "simplejson", "re", "atexit", "PySide.QtCore", "PySide.QtGui", "PySide.QtXml"],
    "include_files": [("./example/Ui/MainWindow.ui", "Ui/MainWindow.ui"),
                      ("./example/Ui/ExampleWidget.ui", "Ui/ExampleWidget.ui"),
                      ("./example/Ui/TestDialog.ui", "Ui/TestDialog.ui"),
                      ("./example/Resources/style.qss", "Ui/style.qss")], # this isn't necessary after all
    "excludes": ["Tkinter", "Tkconstants", "tcl"],
    "build_exe": "build",
    "icon": "./example/Resources/Icons/monitor.ico"
}

executable = [
    Executable("./bin/Example.py",
               base="Win32GUI",
               targetName="Example.exe",
               targetDir="build",
               copyDependentFiles=True)
]

setup(
    name="Example",
    version="0.1",
    description="Example", # Using the word "test" makes the exe to invoke the UAC in win7. WTH?
    author="Me",
    options={"build_exe": build_exe_options},
    executables=executable,
    requires=['PySide', 'cx_Freeze', 'simplejson']
)
</snippet></ROW><ROW><id>18420254</id><snippet>In [121]: df = DataFrame([[1,2.2,3.5],[6.1,0.4,1.2]], columns=list('abc'))

In [122]: weight = DataFrame(Series([0.5, 0.3, 0.2], index=list('abc'), name=0))

In [123]: df
Out[123]:
           a          b          c
0       1.00       2.20       3.50
1       6.10       0.40       1.20

In [124]: weight
Out[124]:
           0
a       0.50
b       0.30
c       0.20

In [125]: df * weight
Out[125]:
           0          a          b          c
0        nan        nan        nan        nan
1        nan        nan        nan        nan
a        nan        nan        nan        nan
b        nan        nan        nan        nan
c        nan        nan        nan        nan
</snippet></ROW><ROW><id>18420254</id><snippet>In [126]: df * weight[0]
Out[126]:
           a          b          c
0       0.50       0.66       0.70
1       3.05       0.12       0.24

In [128]: (df * weight[0]).sum(1)
Out[128]:
0         1.86
1         3.41
dtype: float64
</snippet></ROW><ROW><id>18420254</id><snippet>dot</snippet></ROW><ROW><id>18420254</id><snippet>DataFrame</snippet></ROW><ROW><id>18420254</id><snippet>In [127]: df.dot(weight)
Out[127]:
           0
0       1.86
1       3.41
</snippet></ROW><ROW><id>18420254</id><snippet>In [130]: df['weighted_sum'] = df.dot(weight)

In [131]: df
Out[131]:
           a          b          c  weighted_sum
0       1.00       2.20       3.50          1.86
1       6.10       0.40       1.20          3.41
</snippet></ROW><ROW><id>18420254</id><snippet>timeit</snippet></ROW><ROW><id>18420254</id><snippet>DataFrame</snippet></ROW><ROW><id>18420254</id><snippet>In [145]: df = DataFrame(randn(10000000, 3), columns=list('abc'))
weight
In [146]: weight = DataFrame(Series([0.5, 0.3, 0.2], index=list('abc'), name=0))

In [147]: timeit df.dot(weight)
10 loops, best of 3: 57.5 ms per loop

In [148]: timeit (df * weight[0]).sum(1)
10 loops, best of 3: 125 ms per loop
</snippet></ROW><ROW><id>18420254</id><snippet>DataFrame</snippet></ROW><ROW><id>18420254</id><snippet>In [162]: df = DataFrame(randn(10000, 1000))

In [163]: weight = DataFrame(randn(1000, 1))

In [164]: timeit df.dot(weight)
100 loops, best of 3: 5.14 ms per loop

In [165]: timeit (df * weight[0]).sum(1)
10 loops, best of 3: 41.8 ms per loop
</snippet></ROW><ROW><id>18420254</id><snippet>dot</snippet></ROW><ROW><id>18420254</id><snippet>NaN</snippet></ROW><ROW><id>18420254</id><snippet>dot</snippet></ROW><ROW><id>18420254</id><snippet>dot</snippet></ROW><ROW><id>18420254</id><snippet>NaN</snippet></ROW><ROW><id>18420254</id><snippet>numpy.dot()</snippet></ROW><ROW><id>18420254</id><snippet>NaN</snippet></ROW><ROW><id>18420328</id><snippet>resolved_url = resolve_url(login_url or settings.LOGIN_URL)
</snippet></ROW><ROW><id>18420328</id><snippet>LOGIN_URL = 'my_app.views.sign_in'
</snippet></ROW><ROW><id>18420328</id><snippet>from django.core.urlresolvers import reverse_lazy
LOGIN_URL = reverse_lazy('my_app.views.sign_in')
</snippet></ROW><ROW><id>18420341</id><snippet>*</snippet></ROW><ROW><id>18420341</id><snippet>&gt;&gt;&gt; import re
&gt;&gt;&gt; string = "(src://path/to/foldernames canhave spaces/file.xzy)"
&gt;&gt;&gt; string2 = \
... '(src://path/to/foldernames canhave spaces/file.xzy "optional string")'
&gt;&gt;&gt; re.findall(r'\((.*?)( ".*")?\)', string2)
[('src://path/to/foldernames canhave spaces/file.xzy', ' "optional string"')]
&gt;&gt;&gt; re.findall(r'\((.*?)( ".*")?\)', string)
[('src://path/to/foldernames canhave spaces/file.xzy', '')]
</snippet></ROW><ROW><id>18420668</id><snippet>get_context_data</snippet></ROW><ROW><id>18420815</id><snippet>President()</snippet></ROW><ROW><id>18420815</id><snippet>['FDR', False, 4, 1933]
</snippet></ROW><ROW><id>18420815</id><snippet>    apresident = President(*testdata)  # note the * character
</snippet></ROW><ROW><id>18420815</id><snippet>def main():
    testdata = {
        "president": "FDR",
        "alive": False,
        "terms": 4,
        "firstelected": 1933,
    }
    apresident = President(**testdata)
    anotherpresident = President(president="BHO", terms=2, firstelected=2008)
    print apresident
    print apresident.alive
    print anotherpresident
    print anotherpresident.alive

class President:
    id_iter = itertools.count(1)
    #def __init__(self, president, alive, terms, firstelected):
    def __init__(self, **kwargs):
        self.id = self.id_iter.next()
        self.president = kwargs.get("president", None)
        self.alive = kwargs.get("alive", True)
        self.terms = kwargs.get("president", 1)
        self.firstelected = kwargs.get("president", None)
</snippet></ROW><ROW><id>18421243</id><snippet>logging.getLogger('requests').setLevel(logging.WARNING)
</snippet></ROW><ROW><id>18421243</id><snippet>requests</snippet></ROW><ROW><id>18421243</id><snippet>WARNING</snippet></ROW><ROW><id>18421328</id><snippet>collections.defaultdict</snippet></ROW><ROW><id>18421328</id><snippet>&gt;&gt;&gt; from collections import defaultdict
&gt;&gt;&gt;
&gt;&gt;&gt; d = defaultdict(list)
&gt;&gt;&gt; d['key'].append(5)
&gt;&gt;&gt; d
defaultdict(&lt;type 'list'&gt;, {'key': [5]})
&gt;&gt;&gt; dict(d)
{'key': [5]}
</snippet></ROW><ROW><id>18421353</id><snippet>&gt;&gt;&gt; from operator import mul

&gt;&gt;&gt; base = [2, 3, 5]
&gt;&gt;&gt; powers = [1, 0, 0]
&gt;&gt;&gt; l = [n**p for n, p in zip(base, powers) if p != 0]
[2]
&gt;&gt;&gt; reduce(mul, l, 1)
2
</snippet></ROW><ROW><id>18421353</id><snippet>&gt;&gt;&gt; from itertools import izip

&gt;&gt;&gt; powers = [1, 2, 3]
&gt;&gt;&gt; numbers = (n**p for n, p in izip(base, powers) if p != 0)
&gt;&gt;&gt; reduce(mul, numbers , 1)
2250
</snippet></ROW><ROW><id>18421408</id><snippet>%</snippet></ROW><ROW><id>18421408</id><snippet>__mod__()</snippet></ROW><ROW><id>18421562</id><snippet>post_save</snippet></ROW><ROW><id>18421562</id><snippet>bulk_create</snippet></ROW><ROW><id>18421562</id><snippet>update</snippet></ROW><ROW><id>18421622</id><snippet>class MyClass(object):
    def post(self, first_argument=None):
        # do stuff
        self.cleanup()


@settings.scheduler.interval_schedule(hours=2)
def my_job(first_argument=None):
    my_class = MyClass()
    my_class.post(first_argument)
</snippet></ROW><ROW><id>18421622</id><snippet>my_class = MyClass()
scheduler.add_job(my_class.post, 'interval', {'seconds': 3}, kwargs={'first_argument': first_argument})
</snippet></ROW><ROW><id>18421814</id><snippet>      def quit(self):
        self.xlBook.Close(SaveChanges=0)
        self.xlApp.Quit()
        del self.xlApp
</snippet></ROW><ROW><id>18421814</id><snippet>pythoncom.CoInitialize()
</snippet></ROW><ROW><id>18421814</id><snippet>pythoncom.CoUninitialize()
</snippet></ROW><ROW><id>18422076</id><snippet>a ? b : c</snippet></ROW><ROW><id>18422076</id><snippet>b if a else c
</snippet></ROW><ROW><id>18422076</id><snippet>val = 1 if dim == 0 else S(dim) * pow(radius * 0.5, dim) / dim
</snippet></ROW><ROW><id>18422133</id><snippet>func_code</snippet></ROW><ROW><id>18422133</id><snippet>time.time</snippet></ROW><ROW><id>18422133</id><snippet>func_code</snippet></ROW><ROW><id>18422133</id><snippet>$ pypy
Python 2.7.1 (7773f8fc4223, Nov 18 2011, 22:15:49)
[PyPy 1.7.0 with GCC 4.0.1] on darwin
Type "help", "copyright", "credits" or "license" for more information.
&gt;&gt;&gt;&gt; import time
&gt;&gt;&gt;&gt; time.time
&lt;built-in function time&gt;
&gt;&gt;&gt;&gt; time.time.func_code
&lt;builtin-code object at 0x00000001017422e0&gt;
&gt;&gt;&gt;&gt; time.time.func_code.co_consts
('time() -&gt; floating point number\n\n    Return the current time in seconds since the Epoch.\n    Fractions of a second may be present if the system clock provides them.',)
</snippet></ROW><ROW><id>18422169</id><snippet>target</snippet></ROW><ROW><id>18422169</id><snippet>Thread</snippet></ROW><ROW><id>18422169</id><snippet>class twothreads:
    def t1(self):
        print "Hi"

    def t2(self):
        print "Bye"

t = twothreads()
threading.Thread(target=t.t1).start()
threading.Thread(target=t.t2).start()
</snippet></ROW><ROW><id>18422188</id><snippet>with open("file", 'r') as f:
    print [x for i, x in enumerate(f) if 1 &lt;= i &lt;= 15]
</snippet></ROW><ROW><id>18422188</id><snippet>with open("file", 'r') as f:
    for i, x in enumerate(f):
        if 1 &lt;= i &lt;= 15:
            print x
        elif i &gt; 15:
            break
</snippet></ROW><ROW><id>18422264</id><snippet>read</snippet></ROW><ROW><id>18422264</id><snippet>readline</snippet></ROW><ROW><id>18422264</id><snippet>import subprocess
with open('test.log', 'w') as f:
    process = subprocess.Popen(your_command, stdout=subprocess.PIPE)
    for c in iter(lambda: process.stdout.read(1), ''):
        sys.stdout.write(c)
        f.write(c)
</snippet></ROW><ROW><id>18422264</id><snippet>import subprocess
with open('test.log', 'w') as f:
    process = subprocess.Popen(your_command, stdout=subprocess.PIPE)
    for line in iter(process.stdout.readline, ''):
        sys.stdout.write(line)
        f.write(line)
</snippet></ROW><ROW><id>18422264</id><snippet>reader</snippet></ROW><ROW><id>18422264</id><snippet>writer</snippet></ROW><ROW><id>18422264</id><snippet>writer</snippet></ROW><ROW><id>18422264</id><snippet>Popen</snippet></ROW><ROW><id>18422264</id><snippet>reader</snippet></ROW><ROW><id>18422264</id><snippet>import io
import time
import subprocess

filename = 'test.log'
with io.open(filename, 'wb') as writer, io.open(filename, 'rb', 1) as reader:
    process = subprocess.Popen(command, stdout=writer)
    while process.poll() is None:
        sys.stdout.write(reader.read())
        time.sleep(0.5)
    # Read the remaining
    sys.stdout.write(reader.read())
</snippet></ROW><ROW><id>18422264</id><snippet>test.log</snippet></ROW><ROW><id>18422264</id><snippet>reader</snippet></ROW><ROW><id>18422264</id><snippet>PIPE</snippet></ROW><ROW><id>18422264</id><snippet>read</snippet></ROW><ROW><id>18422264</id><snippet>readline</snippet></ROW><ROW><id>18422335</id><snippet>message = QCoreApplication.translate('Multipart split', "Splited %d multipart feature(s)") %(n_of_splitted_features)
</snippet></ROW><ROW><id>18422469</id><snippet>str</snippet></ROW><ROW><id>18422469</id><snippet>text = """
Pellentesque habitant morbi tristique senectus et netus et
lesuada fames ac turpis egestas. Vestibulum tortor quam, feugiat vitae
ultricies eget, tempor sit amet, ante. Donec eu libero sit amet quam
egestas &lt;br&gt;semper&lt;br&gt;tizi ouzou&lt;br&gt;Tizi Ouzou&lt;br&gt;       """

res = text.rsplit('&lt;br&gt;', 2)[-2]
#Tizi Ouzou
</snippet></ROW><ROW><id>18422519</id><snippet>from scipy.ndimage.filters import uniform_filter

def window_stdev(arr, radius):
    c1 = uniform_filter(arr, radius*2, mode='constant', origin=-radius)
    c2 = uniform_filter(arr*arr, radius*2, mode='constant', origin=-radius)
    return ((c2 - c1*c1)**.5)[:-radius*2+1,:-radius*2+1]
</snippet></ROW><ROW><id>18422519</id><snippet>sqrt(mean(x^2) - mean(x)^2)</snippet></ROW><ROW><id>18422519</id><snippet>sqrt(mean((x - mean(x))^2))</snippet></ROW><ROW><id>18422519</id><snippet>E</snippet></ROW><ROW><id>18422519</id><snippet>mean()</snippet></ROW><ROW><id>18422519</id><snippet>X</snippet></ROW><ROW><id>18422519</id><snippet>E[(X - E[X])^2]</snippet></ROW><ROW><id>18422519</id><snippet>= E[X^2 - 2X*E[X] + E[X]^2]</snippet></ROW><ROW><id>18422519</id><snippet>= E[X^2] - E[2X*E[X]] + E[E[X]^2]</snippet></ROW><ROW><id>18422519</id><snippet>= E[X^2] - 2E[X]*E[X] + E[X]^2</snippet></ROW><ROW><id>18422519</id><snippet>E[X]</snippet></ROW><ROW><id>18422519</id><snippet>= E[X^2] - E[X]^2</snippet></ROW><ROW><id>18422529</id><snippet>&gt;&gt;&gt; 1/2
0
</snippet></ROW><ROW><id>18422529</id><snippet>from __future__ import division
</snippet></ROW><ROW><id>18422529</id><snippet>&gt;&gt;&gt; 1./2.
0.5
</snippet></ROW><ROW><id>18422789</id><snippet>for obj in objs:
    obj.send(gateway)
Message.objects.bulk_create(objs)
</snippet></ROW><ROW><id>18422811</id><snippet>ruby -e "$(curl -fsSL https://raw.github.com/mxcl/homebrew/go/install)"
</snippet></ROW><ROW><id>18422811</id><snippet>brew install freetype
brew install libpng
</snippet></ROW><ROW><id>18422811</id><snippet>pip</snippet></ROW><ROW><id>18422833</id><snippet>running</snippet></ROW><ROW><id>18422833</id><snippet>False</snippet></ROW><ROW><id>18422833</id><snippet>import sys
import time
import threading

from PySide.QtCore import *
from PySide.QtGui import *
qt_app = QApplication(sys.argv)
label = QLabel('Hello, loop!')
label.show()

running = True #only set to False when user is done with app in the real code.

def worker():
    global running
    while running:
        #I am handling connections here that MUST be in continual while loop
        print("loop")
        time.sleep(0.5)

thread = threading.Thread(target=worker)
thread.setDaemon(True)
thread.start()

qt_app.exec_()
</snippet></ROW><ROW><id>18423052</id><snippet>OrderedDict</snippet></ROW><ROW><id>18423052</id><snippet>def __setitem__(self, key, value, dict_setitem=dict.__setitem__):
    'od.__setitem__(i, y) &lt;==&gt; od[i]=y'
    # Setting a new item creates a new link at the end of the linked list,
    # and the inherited dictionary is updated with the new key/value pair.
    if key not in self:
        root = self.__root
        last = root[0]
        last[1] = root[0] = self.__map[key] = [last, root, key]
    return dict_setitem(self, key, value)
</snippet></ROW><ROW><id>18423089</id><snippet>&lt;?php
    // $user being a User Object
    $timezone = TimeDate::userTimezone($user); 
</snippet></ROW><ROW><id>18423119</id><snippet>find_element_by_id</snippet></ROW><ROW><id>18423119</id><snippet>element = firefox.find_element_by_id("gb_23")
element.click()
</snippet></ROW><ROW><id>18423119</id><snippet>"//a[@id='gb_23']"
</snippet></ROW><ROW><id>18423191</id><snippet>stdout</snippet></ROW><ROW><id>18423191</id><snippet>stderr</snippet></ROW><ROW><id>18423191</id><snippet>stdout</snippet></ROW><ROW><id>18423191</id><snippet>stderr</snippet></ROW><ROW><id>18423191</id><snippet>stdout</snippet></ROW><ROW><id>18423191</id><snippet>stderr</snippet></ROW><ROW><id>18423191</id><snippet>import subprocess
PIPE = subprocess.PIPE

proc = subprocess.Popen(['ls'], stdout=PIPE)
for line in iter(proc.stdout.readline, ''):
    if line.startswith('a'):
        print(line)
</snippet></ROW><ROW><id>18423191</id><snippet>line.startswith('a')</snippet></ROW><ROW><id>18423191</id><snippet>['ls']</snippet></ROW><ROW><id>18423262</id><snippet>from openpyxl import Workbook
from os import system
wb = Workbook()
outputf = 'test.xlsx'
wb.save(outputf) 
# see below *
system('open ' + outputf)
</snippet></ROW><ROW><id>18423262</id><snippet>st = os.stat(outputf)
os.chmod(outputf, st.st_mode | stat.stat.S_IRWXU | stat.S_IRWXG | stat.S_IRWXO)
</snippet></ROW><ROW><id>18423404</id><snippet>all_values = set()
for person_values in data.values():
    all_values = all_values.union(person_values)
all_values_list = list(all_values)

thecsv = csv.writer(open("your.csv", 'w'))
thecsv.writerow(all_values_list)
for name, values in data.items():
    row = [1 if i in values else 0 for i in all_values_list]
    thecsv.writerow([name] + row)
</snippet></ROW><ROW><id>18423404</id><snippet>data</snippet></ROW><ROW><id>18423484</id><snippet>swap</snippet></ROW><ROW><id>18423484</id><snippet>n[0], n[1] = n[1], n[0]
</snippet></ROW><ROW><id>18423484</id><snippet>swap</snippet></ROW><ROW><id>18423484</id><snippet>n[0], n[1] = swap(n[0], n[1])
</snippet></ROW><ROW><id>18423484</id><snippet>def swapind(l, a, b):
    l[a], l[b] = l[b], l[a]

swapind(n, 0, 1)
</snippet></ROW><ROW><id>18423538</id><snippet>itertools.product</snippet></ROW><ROW><id>18423538</id><snippet>vals = [1,3,2]
for item in itertools.product(*[range(x+1) for x in vals]):
    print item
</snippet></ROW><ROW><id>18423538</id><snippet>(0, 0, 0)
(0, 0, 1)
(0, 0, 2)
(0, 1, 0)
(0, 1, 1)
(0, 1, 2)
(0, 2, 0)
(0, 2, 1)
(0, 2, 2)
(0, 3, 0)
(0, 3, 1)
(0, 3, 2)
(1, 0, 0)
(1, 0, 1)
(1, 0, 2)
(1, 1, 0)
(1, 1, 1)
(1, 1, 2)
(1, 2, 0)
(1, 2, 1)
(1, 2, 2)
(1, 3, 0)
(1, 3, 1)
(1, 3, 2)
</snippet></ROW><ROW><id>18423684</id><snippet>geometry</snippet></ROW><ROW><id>18423684</id><snippet>#!/usr/bin/env python3

import sys
from tkinter import *

mGui =Tk("")
mGui.geometry("480x480") 
mGui.title("Leilani spelling test")
# You'll want to add this to enter the event loop that causes the window to be shown
mGui.mainloop()
</snippet></ROW><ROW><id>18423898</id><snippet>e.mobile</snippet></ROW><ROW><id>18423898</id><snippet>e.contact_owner</snippet></ROW><ROW><id>18423898</id><snippet>query = Contact.objects.select_related('mobile', 'contact_owner').filter(contact_owner=batch.user, subscribed=True)
</snippet></ROW><ROW><id>18423898</id><snippet>prefetch_related</snippet></ROW><ROW><id>18423898</id><snippet>select_related</snippet></ROW><ROW><id>18423991</id><snippet>with open(filename) as f:
    input= f.read()
input= str.replace('""','"')
input= str.replace('"{','{')
input= str.replace('}"','}')
with open(filename, "w") as f:
    f.write(input)
</snippet></ROW><ROW><id>18423991</id><snippet>{"first_name":"John","last_name":"Smith","age":30}
{"first_name":"Tim","last_name":"Johnson","age":34}
</snippet></ROW><ROW><id>18423991</id><snippet>with open(inputFilename) as if:
    with open(outputFilename, "w") as of:
        of.write(if.read().replace('""','"').replace('"{','{').replace('}"','}'))
</snippet></ROW><ROW><id>18424029</id><snippet>xlrd</snippet></ROW><ROW><id>18424029</id><snippet>xlrd</snippet></ROW><ROW><id>18424029</id><snippet>xlwt</snippet></ROW><ROW><id>18424029</id><snippet>xlutils</snippet></ROW><ROW><id>18424029</id><snippet>xlrd</snippet></ROW><ROW><id>18424029</id><snippet>xlutils</snippet></ROW><ROW><id>18424029</id><snippet>import xlrd, xlwt
from xlutils.copy import copy

rb = xlrd.open_workbook("Path/To/Doc", formatting_info=True) #Make Readable Copy
wb = copy(rb) #Make Writeable Copy

ws1 = wb.get_sheet(1) #Get sheet 1 in writeable copy
ws1.write(1, 11, 'test') #Write 'test' to cell (1, 11)

ws2 = wb.get_sheet(2) #Get sheet 2 in writeable copy
ws2.write(3, 14, '135') #Write '135' to cell (3, 14)

wb.save("New/File/Path") #Save the newly written copy. Enter the same as the old path to write over
</snippet></ROW><ROW><id>18424096</id><snippet>class Article(models.Model):
    ...

    def save(self, *args, **kwargs):
        if not self.url:
            self.url = self.title.lower()

        super(Article, self).save(*args, **kwargs)
</snippet></ROW><ROW><id>18424276</id><snippet>(a==0)</snippet></ROW><ROW><id>18424276</id><snippet>a= 0
if a == 0 :
    print "a==0"
print "hello"
</snippet></ROW><ROW><id>18424276</id><snippet>return</snippet></ROW><ROW><id>18424285</id><snippet>button_push</snippet></ROW><ROW><id>18424285</id><snippet>def room_1():
    print "Room 1"
    button_push = False

    while True:
       next = raw_input("&gt; ")

        if next == "1":
            print "You hear a click but nothing seems to happen."
            button_push = True

        elif next == "2":
            print "You enter room 2"
            room_2(button_push)  # pass button_push as argument

def room_2(button_push):  # Accept button_push as argument
    print "Room 2"

    while True:
        next =raw_input("&gt; ")

        if next == "1" and button_push:  # button_push is now visible from this scope
            print "You can enter Room 3"
            room_3()
</snippet></ROW><ROW><id>18424412</id><snippet>location  /robots.txt {
    alias  /path/to/static/robots.txt;
}
</snippet></ROW><ROW><id>18424456</id><snippet>object</snippet></ROW><ROW><id>18424456</id><snippet>myclass1</snippet></ROW><ROW><id>18424456</id><snippet>ss = super(object,cls)</snippet></ROW><ROW><id>18424456</id><snippet>object</snippet></ROW><ROW><id>18424456</id><snippet>myclass1</snippet></ROW><ROW><id>18424456</id><snippet>args</snippet></ROW><ROW><id>18424456</id><snippet>ss.__new__(cls,args)</snippet></ROW><ROW><id>18424456</id><snippet>object.__new__</snippet></ROW><ROW><id>18424456</id><snippet>cls</snippet></ROW><ROW><id>18424456</id><snippet>        def __new__(cls,arg):
                print cls, arg, "in new"
                ss = super(myclass1,cls)
                print ss, type(ss)
                ss.__new__(cls)
#                super(object,cls).__new__(cls,arg)
#                return object.__new__(cls,arg)
</snippet></ROW><ROW><id>18424456</id><snippet>super</snippet></ROW><ROW><id>18424456</id><snippet>ss</snippet></ROW><ROW><id>18424456</id><snippet>object</snippet></ROW><ROW><id>18424456</id><snippet>        def __new__(cls,arg):
                print cls, arg, "in new"
#               ss = super(myclass1,cls)
                print object, type(object)
                object.__new__(cls)
#                super(object,cls).__new__(cls,arg)
#                return object.__new__(cls,arg)
</snippet></ROW><ROW><id>18424477</id><snippet>form1 = Form1(request.POST)</snippet></ROW><ROW><id>18424477</id><snippet>form1 = Form1(temp_arg=obj,data=request.POST)</snippet></ROW><ROW><id>18424520</id><snippet>&gt;&gt;&gt; from urlparse import urlparse
&gt;&gt;&gt; o = urlparse('http://www.cwi.nl:80/%7Eguido/Python.html')
&gt;&gt;&gt; o   
ParseResult(scheme='http', netloc='www.cwi.nl:80', path='/%7Eguido/Python.html',
        params='', query='', fragment='')
&gt;&gt;&gt; o.scheme
'http'
&gt;&gt;&gt; o.port
80
&gt;&gt;&gt; o.geturl()
'http://www.cwi.nl:80/%7Eguido/Python.html'
</snippet></ROW><ROW><id>18424560</id><snippet>from datetime import datetime 

def is_third_friday(s):
    d = datetime.strptime(s, '%b %d, %Y')
    return d.weekday() == 4 and 14 &lt; d.day &lt; 22
</snippet></ROW><ROW><id>18424560</id><snippet>print is_third_friday('Jan 18, 2013')  # True
print is_third_friday('Feb 22, 2013')  # False
print is_third_friday('Jun 21, 2013')  # True
print is_third_friday('Sep 20, 2013')  # True
</snippet></ROW><ROW><id>18424608</id><snippet>for i in range(1000):
    Shoe = Shoe()
    #Do stuff
</snippet></ROW><ROW><id>18424608</id><snippet>for i in (Shoe() for s in range(1000)):
    #Do stuff
</snippet></ROW><ROW><id>18424608</id><snippet>while ratio_generator():
    generators = [
        file_id_generator(),
        types_generator(),
        date_generator(),
        names_generator(),
        folder_generator(),
        content_generator(),
        id_chain_generator(),
    ]
    dynamics = [
        get_datetime,
        get_code_status,
    ]
    statics = [
        self.today,
        self.test_id,
        self.author
    ]

    yield flatten([x for x in statics], [x() for x in dynamics], [next(x) for x in generators])
</snippet></ROW><ROW><id>18424907</id><snippet>for x in xrange(1, 10):
    print x,
</snippet></ROW><ROW><id>18425004</id><snippet>class SSDigit(object):
    """A 7-segment digit"""
    def __init__(self):
        self.lines= []

ssdig0= SSDigit()
ssdig1.lines.append("     ")
ssdig0.lines.append("  -  ")
ssdig0.lines.append(" | | ")
ssdig0.lines.append("     ")
ssdig0.lines.append(" | | ")
ssdig0.lines.append("  -  ")
ssdig1.lines.append("     ")

ssdig1= SSDigit()
ssdig1.lines.append("     ")
ssdig1.lines.append("     ")
ssdig1.lines.append("   | ")
ssdig1.lines.append("     ")
ssdig1.lines.append("   | ")
ssdig1.lines.append("     ")
ssdig1.lines.append("     ")

.....

class LineType(object):
    """Each of the 2 line types (1 horizontal segment or 2 vertical),
       with their possible representations and segment positions"""
    def __init__(self):
        self.valueForRepr= {}
        self.segmentPos= []

class Line(object):
    """Each of the 5 lines a SSDigit has, with its LineType"""
    def __init__(self):
        self.type= None

digits= [ ssdig0, ssdig1, ssdig2, ssdig3, ssdig4, ssdig5, ssdig6, ssdig7, ssdig8, ssdig9 ]

linetype1= LineType()
linetype1.valueForRepr["     "]= [0]
linetype1.valueForRepr["  -  "]= [1]
linetype1.segmentPos= [3]

linetype2= LineType()
linetype2.valueForRepr["     "]= [0,0]
linetype2.valueForRepr["   | "]= [0,1]
linetype2.valueForRepr[" |   "]= [1,0]
linetype2.valueForRepr[" | | "]= [1,1]
linetype2.segmentPos= [2,4]

typeforline= [ linetype1, linetype2, linetype1, linetype2, linetype1 ]

# Validate error-prone typing !!!
for digit in digits :
    for linenum, linetype in enumerate(typeforline) :
        if digit.lines[linenum] not in linetype.valueForRepr :
            print("Error in digit {:d}, line {:d}".format(digit,linenum))

def printNumber(num):
    num= str(num)
    for linenum, linetype in enumerate(typeforline) :
        line= ""
        for d in num :
            line+= digits[int(d)].lines[linenum]
        print( line )

printNumber(3475649560458)
</snippet></ROW><ROW><id>18425004</id><snippet>SSDigit</snippet></ROW><ROW><id>18425004</id><snippet>def printNumberDoubleSize(num):
    num= str(num)
    for linenum, linetype in enumerate(typeforline) :
        line= ""
        for d in num :
            line+= digits[int(d)].lines[linenum]
        print( line )

printNumberDoubleSize(3475649560458)
</snippet></ROW><ROW><id>18425004</id><snippet>  01234
0   
1   -
2  | |
3   -
4  | |
5   -
6
</snippet></ROW><ROW><id>18425004</id><snippet>   012   34
   00012300 
00   
10   ----
20  |    |
 1  |    |
30   ----
40  |    |
 1  |    |
50   ----
60
</snippet></ROW><ROW><id>18425004</id><snippet>phyLineN= []
phyLineN.append([])
phyLineN[0]= []
phyLineN[0].append([ "....", ".", "....",".", "...." ])
phyLineN.append([])
phyLineN[1]= []
phyLineN[1].append([ ".   ", " ", ". . "," ", "    " ])
phyLineN.append([])
phyLineN[2]= []
phyLineN[2].append([ ".   ", ".", "    ",".", "    " ])
phyLineN[2].append([ ".   ", " ", "    "," ", "    " ])
phyLineN.append([])
phyLineN[3]= []
phyLineN[3].append([ ".   ", " ", ". . "," ", "    " ])
phyLineN.append([])
phyLineN[4]= []
phyLineN[4].append([ ".   ", ".", "    ",".", "    " ])
phyLineN[4].append([ ".   ", " ", "    "," ", "    " ])
phyLineN.append([])
phyLineN[5]= []
phyLineN[5].append([ ".   ", " ", ". . "," ", "    " ])
phyLineN.append([])
phyLineN[6]= []
phyLineN[6].append([ "....", ".", "....",".", "...." ])

phyLineY= []
phyLineY.append([])
phyLineY[0]= []
phyLineY[0].append([ "    ", " ", "    "," ", "    " ])
phyLineY.append([])
phyLineY[1]= []
phyLineY[1].append([ "    ", " ", "===="," ", "    " ])
phyLineY.append([])
phyLineY[2]= []
phyLineY[2].append([ "    ", "H", "    ","H", "    " ])
phyLineY[2].append([ "    ", "H", "    ","H", "    " ])
phyLineY.append([])
phyLineY[3]= []
phyLineY[3].append([ "    ", " ", "===="," ", "    " ])
phyLineY.append([])
phyLineY[4]= []
phyLineY[4].append([ "    ", "H", "    ","H", "    " ])
phyLineY[4].append([ "    ", "H", "    ","H", "    " ])
phyLineY.append([])
phyLineY[5]= []
phyLineY[5].append([ "    ", " ", "===="," ", "    " ])
phyLineY.append([])
phyLineY[6]= []
phyLineY[6].append([ "    ", " ", "    "," ", "    " ])

def printNumberNY(num,structN,structY):

    phyRowH= [ len(structN[0]), len(structN[1]), len(structN[2]), len(structN[3]), len(structN[4]), len(structN[5]), len(structN[6]) ]

    # Validate structure and compute phyColW
    # This could be moved to an object constructor so is computed only once
    first= 1
    for line in structN :
        for phyLine in line :
            if first :
                phyColW= [ len(phyLine[0]), len(phyLine[1]), len(phyLine[2]), len(phyLine[3]), len(phyLine[4]) ] 
                first= 0
            else:
                for i, _ in enumerate(phyLine) :
                    if len(phyLine[i]) != phyColW[i] : raise "Inconsistent physical column width"

    # Real rendering of the (full) number in 7-segment form
    num= str(num)
    for linenum, linetype in enumerate(typeforline) :
        for phyLine in range(phyRowH[linenum]) :
            line= ""
            for d in num :
                for col, qq in enumerate(phyColW) :
                    if digits[int(d)].lines[linenum][col] != " " :
                        line+= structY[linenum][phyLine][col]
                    else:
                        line+= structN[linenum][phyLine][col]
            print( line )

printNumberNY(3475649560458,phyLineN,phyLineY)
</snippet></ROW><ROW><id>18425004</id><snippet>printNumberNY</snippet></ROW><ROW><id>18425004</id><snippet>def sizeVH(vSegHeight,hSegWidth,vSep,hSep):

    hSepStr= " " *hSep
    hSegN= " "* hSegWidth 
    hSegY= "-"* hSegWidth

    phyLineN= []
    phyLineN.append([])
    phyLineN[0]= []
    phyLineN.append([])
    phyLineN[1]= []
    phyLineN[1].append([ "", " ", hSegN," ", hSepStr ])
    phyLineN.append([])
    phyLineN[2]= []
    for i in range(vSegHeight) :
        phyLineN[2].append([ "", " ", hSegN," ", hSepStr ])
    phyLineN.append([])
    phyLineN[3]= []
    phyLineN[3].append([ "", " ", hSegN," ", hSepStr ])
    phyLineN.append([])
    phyLineN[4]= []
    for i in range(vSegHeight) :
        phyLineN[4].append([ "", " ", hSegN," ", hSepStr ])
    phyLineN.append([])
    phyLineN[5]= []
    phyLineN[5].append([ "", " ", hSegN," ", hSepStr ])
    phyLineN.append([])
    phyLineN[6]= []
    for i in range(vSep) :
        phyLineN[6].append([ "", " ", hSegN," ", hSepStr ])

    phyLineY= []
    phyLineY.append([])
    phyLineY[0]= []
    phyLineY.append([])
    phyLineY[1]= []
    phyLineY[1].append([ "", " ", hSegY," ", hSepStr ])
    phyLineY.append([])
    phyLineY[2]= []
    for i in range(vSegHeight) :
        phyLineY[2].append([ "", "|", hSegN,"|", hSepStr ])
    phyLineY.append([])
    phyLineY[3]= []
    phyLineY[3].append([ "", " ", hSegY," ", hSepStr ])
    phyLineY.append([])
    phyLineY[4]= []
    for i in range(vSegHeight) :
        phyLineY[4].append([ "", "|", hSegN,"|", hSepStr ])
    phyLineY.append([])
    phyLineY[5]= []
    phyLineY[5].append([ "", " ", hSegY," ", hSepStr ])
    phyLineY.append([])
    phyLineY[6]= []
    for i in range(vSep) :
        phyLineY[6].append([ "", " ", hSegN," ", hSepStr ])

    return (phyLineN,phyLineY)

phyLineN, phyLineY= sizeVH(4,6,1,3)
printNumberNY(3475649560458,phyLineN,phyLineY)
</snippet></ROW><ROW><id>18425037</id><snippet>pbpaste</snippet></ROW><ROW><id>18425037</id><snippet>pbpaste | python
</snippet></ROW><ROW><id>18425079</id><snippet>   from firebase import Firebase
   f = Firebase("https://xxxxx.firebaseio.com/syncedValue")
   r = f.update({"syncedValue": "3433"})**strong text**
</snippet></ROW><ROW><id>18425079</id><snippet>  ......
angular.module('myApp.controllers', [])
   .controller('MyCtrl1', ['$scope', 'FBURL', 'angularFire', function($scope,
   FBURL, angularFire) {
   angularFire(FBURL+'/syncedValue/1', $scope, 'syncedValue', '');
   }])
......
</snippet></ROW><ROW><id>18425460</id><snippet>re.findall</snippet></ROW><ROW><id>18425460</id><snippet>?:</snippet></ROW><ROW><id>18425460</id><snippet>&gt;&gt;&gt; import re
&gt;&gt;&gt; s = 'size=50;size=51;'
&gt;&gt;&gt; re.findall('size=(?:50|51);', s)
['size=50;', 'size=51;']
</snippet></ROW><ROW><id>18425460</id><snippet>re.findall</snippet></ROW><ROW><id>18425708</id><snippet>to_string()</snippet></ROW><ROW><id>18425708</id><snippet>with open('csv.csv', 'w') as f:
    f.write(df.to_string())
</snippet></ROW><ROW><id>18425708</id><snippet>numpy</snippet></ROW><ROW><id>18425708</id><snippet>df = DataFrame(randn(10, 3), columns=list('abc'))
values = df.values
columns = df.columns.values

with open('csv.csv', 'w') as f:
    savetxt(f, columns[newaxis], fmt='%10s')
    savetxt(f, values, fmt='%10.4f')
</snippet></ROW><ROW><id>18425708</id><snippet>cat csv.csv</snippet></ROW><ROW><id>18425708</id><snippet>      a          b          c
-0.8023    -0.6464    -0.2102
-1.4442    -0.5965     1.7326
 1.5028     1.7246    -0.4788
-1.6442    -0.3962     0.1391
 1.2404     1.1226    -0.3639
-0.6567     1.3464     0.2167
 0.4928     0.2204    -0.8549
-1.0625    -0.6588    -1.0551
-0.9175    -0.5855    -0.4151
</snippet></ROW><ROW><id>18425710</id><snippet>import wx
import wx.grid as gridlib
class MyGrid(gridlib.Grid):
    def __init__(self, parent):
        """Constructor"""
        gridlib.Grid.__init__(self, parent)
        self.CreateGrid(2, 3)

class MyForm(wx.Frame):
    def __init__(self):
        """Constructor"""
        wx.Frame.__init__(self, parent=None, title="An Eventful Grid",size=(700,700))
        p = wx.Panel(self)

        button2 = wx.Button(p, -1, label="click me")
        st = wx.StaticText(p, -1,"Right-click on the panel to show a popup menu")
        p2 = wx.Panel(p, size=(400,200))
        p2.SetBackgroundColour((100, 0, 0))
        myGrid = MyGrid(p)


        sizer = wx.BoxSizer(wx.VERTICAL)
        sizer.Add(button2)
        sizer.Add(st)
        sizer.Add(myGrid, 1, wx.EXPAND)#,pos=(200,200)
        sizer.Add(p2, 2, wx.EXPAND)
        p.SetSizer(sizer)

if __name__ == "__main__":
    app = wx.PySimpleApp()
    frame = MyForm().Show()
    app.MainLoop()
</snippet></ROW><ROW><id>18425710</id><snippet>p</snippet></ROW><ROW><id>18425710</id><snippet>wx.Panel(self...</snippet></ROW><ROW><id>18425710</id><snippet>p1 = wx.Panel(self,...</snippet></ROW><ROW><id>18425717</id><snippet>5</snippet></ROW><ROW><id>18425717</id><snippet>word = '5%s' % word
</snippet></ROW><ROW><id>18425717</id><snippet>word = '5' + word
</snippet></ROW><ROW><id>18425717</id><snippet>str.format()</snippet></ROW><ROW><id>18425717</id><snippet>word = '5{}'.format(word)
</snippet></ROW><ROW><id>18425901</id><snippet>from re import match

def rules(name):
    for badWord in bannedWords:
        if name.lower().find(badWord) &gt;= 0:
            return False        
    return match(r'^([A-Z][a-z]+(?:[A-Z]?[a-z]+)* ?){1,}$', name)

bannedWords = ('really', 'awesome')
input = ['000000AAAAAARob Alsod', 'AAAPerson Person', 'Jeff the awesome Guy', 'Jenna DEeath', 'GEOFFERY EVERDEEN', 'shy guy', 'Theone Normalperson', '  Guywith Whitespace', 'Someone Middlename MacIntyre', '', 'Jack Really Awesome']
results = filter(rules, input)
print results
</snippet></ROW><ROW><id>18425901</id><snippet>['Theone Normalperson', 'Someone Middlename MacIntyre']
</snippet></ROW><ROW><id>18425901</id><snippet>from re import match

def rules(name):     
    return match(r'^([A-Z][a-z]+(?:[A-Z]?[a-z]+)* ?){1,}$', name)

input = ['000000AAAAAARob Alsod', 'AAAPerson Person', 'Jeff the awesome Guy', 'Jenna DEeath', 'GEOFFERY EVERDEEN', 'shy guy', 'Theone Normalperson', '  Guywith Whitespace', 'Someone Middlename MacIntyre', '', 'Jack Really Awesome']
results = filter(rules, input)
print results
</snippet></ROW><ROW><id>18425901</id><snippet>['Theone Normalperson', 'Someone Middlename MacIntyre', 'Jack Really Awesome']
</snippet></ROW><ROW><id>18426089</id><snippet>equip = Equipment.objects.get(serialno=sn)
</snippet></ROW><ROW><id>18426089</id><snippet>equipment</snippet></ROW><ROW><id>18426089</id><snippet>Equipment</snippet></ROW><ROW><id>18426089</id><snippet>rsl_queryset = equip.rsl_set.all()
</snippet></ROW><ROW><id>18426089</id><snippet>rsl_set</snippet></ROW><ROW><id>18426089</id><snippet>dir(equip)</snippet></ROW><ROW><id>18426089</id><snippet>equipment = models.ManyToManyField(Equipment, related_name = "rsl_objects")</snippet></ROW><ROW><id>18426089</id><snippet>rsl_queryset = equip.rsl_objects.all()</snippet></ROW><ROW><id>18426089</id><snippet>for rsl_object in rsl_queryset:
    print "site = " + rsl_object.sitename.site
</snippet></ROW><ROW><id>18426113</id><snippet># Rolling avg, windows size is the size of the entire DataFrame, with minimum of 1
df['rolling_avg'] = pd.rolling_mean(df.price, n, 1)
</snippet></ROW><ROW><id>18426113</id><snippet>df['RA_wnd_4'] = pd.rolling_mean(df.price, 4, 1)
</snippet></ROW><ROW><id>18426113</id><snippet># Adding Helper column that shows when direction have been changed 
df['dir_change'] = (df.direction.shift(1) != df.direction).astype(int)
# Identify the DF "blocks" for every direction change 
df['block'] = df.dir_change.cumsum()
# Split the DF based on those bolcks 
grouped = df.groupby('block')
# Add Function that will cumsum() for a block, and call it 
def f1(group):
     return DataFrame({'rolling_count' : group.cumsum()}) 

df['rolling_count'] = grouped.change.apply(f1)
</snippet></ROW><ROW><id>18426113</id><snippet>df['one'] = 1
df['rolling_count'] = grouped.one.apply(f1)
df = df.drop('one', axis=1)
</snippet></ROW><ROW><id>18426113</id><snippet>import numpy.random as nprnd
from pandas import DataFrame
import pandas as pd

n = 10 # Number of samples
# Starting at 8:00 AM, set some (n) random prices between 4-5
df = DataFrame({'minute_id': range(480,480+n), 'price':(5-4) * nprnd.random(n) + 4 })
df['change'] = df.price - df.price.shift(1)
df['direction'] = df.change.map(lambda x: 0 if x == 0 else x/abs(x))
df = df.dropna()
#------------------------------------------
# Col 1, rolling Avg over the entire DF
df['rolling_avg'] = pd.rolling_mean(df.price, n, 1) 
#------------------------------------------
# Col 4, rolling Avg windows size of 4
df['RA_wnd_4'] = pd.rolling_mean(df.price, 4, 1)
#------------------------------------------
# Helper code for cols 2, 3 
# Adding Helper column that shows when direction have been changed
df['dir_change'] = (df.direction.shift(1) != df.direction).astype(int)
# Identify the DF "blocks" for every direction change
df['block'] = df.dir_change.cumsum()
# Split the DF based on those bolcks
grouped = df.groupby('block')
# Add Function that will cumsum() for a block, and call it
def f1(group):
     return DataFrame({'rolling_count' : group.cumsum()})
df['one'] = 1
#------------------------------------------
# Col 2, CumSum() of the 'change' column while in the current "blcok" (direction)
df['rolling_count'] = grouped.change.apply(f1)
#------------------------------------------
# Col 3, Count in the current "block" (Direction)
df['rolling_count'] = grouped.one.apply(f1)
df = df.drop('one', axis=1)

print df
</snippet></ROW><ROW><id>18426113</id><snippet> minute_id  price   change  direction   rolling_avg     RA_wnd_4    dir_change  block   rolling_count
1   481     4.771701    0.474349    1   4.771701    4.771701    1   1   1
2   482     4.300078    -0.471623   -1  4.535889    4.535889    1   2   1
3   483     4.946744    0.646666    1   4.672841    4.672841    1   3   1
4   484     4.529403    -0.417340   -1  4.636981    4.636981    1   4   1
5   485     4.434598    -0.094805   -1  4.596505    4.552706    0   4   2
6   486     4.171169    -0.263429   -1  4.525616    4.520479    0   4   3
7   487     4.416980    0.245810    1   4.510096    4.388038    1   5   1
8   488     4.727078    0.310098    1   4.537219    4.437456    0   5   2
9   489     4.049097    -0.677981   -1  4.482983    4.341081    1   6   1
</snippet></ROW><ROW><id>18426226</id><snippet>surname</snippet></ROW><ROW><id>18426226</id><snippet>model.objects(**criteria).only(*only).order_by('+surname')</snippet></ROW><ROW><id>18426226</id><snippet>for obj in querySet</snippet></ROW><ROW><id>18426226</id><snippet>for obj in list(querySet)</snippet></ROW><ROW><id>18426226</id><snippet>project</snippet></ROW><ROW><id>18426531</id><snippet>nose</snippet></ROW><ROW><id>18426531</id><snippet>sphinx</snippet></ROW><ROW><id>18426531</id><snippet>setup.py</snippet></ROW><ROW><id>18426531</id><snippet>requirements.txt</snippet></ROW><ROW><id>18426531</id><snippet>pandas</snippet></ROW><ROW><id>18426531</id><snippet>sphinx</snippet></ROW><ROW><id>18426782</id><snippet>.pyc</snippet></ROW><ROW><id>18426782</id><snippet>.pyc</snippet></ROW><ROW><id>18426782</id><snippet>__pycache__</snippet></ROW><ROW><id>18426885</id><snippet>CMakeLists.txt</snippet></ROW><ROW><id>18426885</id><snippet>opencv/modules/python</snippet></ROW><ROW><id>18426885</id><snippet>opencv/modules/python/src2/gen2.py</snippet></ROW><ROW><id>18426956</id><snippet>&gt;&gt;&gt; a = datetime.datetime.now()
&gt;&gt;&gt; b = datetime.datetime.now()
&gt;&gt;&gt; a
datetime.datetime(2013, 8, 25, 2, 5, 1, 879000)
&gt;&gt;&gt; b
datetime.datetime(2013, 8, 25, 2, 5, 8, 984000)
&gt;&gt;&gt; a - b
datetime.timedelta(-1, 86392, 895000)
&gt;&gt;&gt; b - a
datetime.timedelta(0, 7, 105000)
&gt;&gt;&gt; (b - a).microseconds
105000
&gt;&gt;&gt; (b - a).seconds
7
&gt;&gt;&gt; (b - a).microseconds / 1000
105
</snippet></ROW><ROW><id>18427044</id><snippet>SIGINT</snippet></ROW><ROW><id>18427044</id><snippet>system</snippet></ROW><ROW><id>18427044</id><snippet>system</snippet></ROW><ROW><id>18427044</id><snippet>system</snippet></ROW><ROW><id>18427044</id><snippet>loop.py</snippet></ROW><ROW><id>18427044</id><snippet>test_loop.py</snippet></ROW><ROW><id>18427044</id><snippet>system</snippet></ROW><ROW><id>18427270</id><snippet>re.findall</snippet></ROW><ROW><id>18427270</id><snippet>from re import findall

input = 'my name.is(johnny ,knoxville):\nmore\n;'
results = findall(r'(?:[(][^)]*[)])|\w+|\S', input)
print results
</snippet></ROW><ROW><id>18427270</id><snippet>['my', 'name', '.', 'is', '(johnny ,knoxville)', ':', 'more', ';']
</snippet></ROW><ROW><id>18427538</id><snippet>if '--single-file' in sys.argv[1:]:
            sys.argv.remove('--single-file')
            extra_options.update({
                'options': {'py2exe': {'bundle_files': 1,
                                       'unbuffered': True,
                                       'dll_excludes': [ "mswsock.dll", "powrprof.dll" ]}},
                'zipfile': None
            })
</snippet></ROW><ROW><id>18427695</id><snippet>dict</snippet></ROW><ROW><id>18427695</id><snippet>__repr__</snippet></ROW><ROW><id>18427695</id><snippet>class FruitDict(dict):
    def __repr__(self):
        return repr(self.keys())

&gt;&gt;&gt; fruits = FruitDict(banana='yellow', pear='green')
&gt;&gt;&gt; fruits['banana']
'yellow'
&gt;&gt;&gt; fruits
['pear', 'banana']
</snippet></ROW><ROW><id>18427695</id><snippet>fruits</snippet></ROW><ROW><id>18427776</id><snippet>def foo(arg1=None,arg2=None,arg3=None...)
</snippet></ROW><ROW><id>18427776</id><snippet>foo(arg1=1,arg3=2)
</snippet></ROW><ROW><id>18427776</id><snippet>a = {'arg1':1, 'arg3':2}
foo(**a)
</snippet></ROW><ROW><id>18427776</id><snippet>**kwargs</snippet></ROW><ROW><id>18427776</id><snippet>def foo(**kwargs):
    print kwargs

params = {'arg1':1, 'arg2':2}

foo(**params)         # Version 1
foo(arg1=3,arg2=4)    # Version 2
</snippet></ROW><ROW><id>18427776</id><snippet>{'arg1': 1, 'arg2': 2}
{'arg1': 3, 'arg2': 4}
</snippet></ROW><ROW><id>18427776</id><snippet>*</snippet></ROW><ROW><id>18427912</id><snippet>import csv

records = [line for line in csv.reader(open('test_input.csv', 'rt'), delimiter=',')]
outfile1 = open('test_output1.csv', 'wt')
outfile2 = open('test_output2.csv', 'wt')
outfileWriter1 = csv.writer(outfile1, delimiter=',')
outfileWriter2 = csv.writer(outfile2, delimiter=',')

# headers always the same
outfileWriter1.writerow(records[0])
outfileWriter2.writerow(records[0])

for record in records[1:]:
    cat = record[-1].strip() # get category in form "AB"
    new_record = record
    new_record[-1] = "\t%s" % cat[0] # set category for file 1 with tab as a prefix
    outfileWriter1.writerow(new_record)
    new_record[-1] = "\t%s" % cat[1] # set category for file 2 with tab as a prefix
    outfileWriter2.writerow(new_record)

outfile1.close()
outfile2.close()
</snippet></ROW><ROW><id>18427918</id><snippet>Pydev</snippet></ROW><ROW><id>18427918</id><snippet>run configurations</snippet></ROW><ROW><id>18427918</id><snippet>Arguments</snippet></ROW><ROW><id>18427918</id><snippet>Program Arguments</snippet></ROW><ROW><id>18428024</id><snippet>QListWidgetItem</snippet></ROW><ROW><id>18428024</id><snippet>QtCore.Qt.ItemIsUserCheckable</snippet></ROW><ROW><id>18428024</id><snippet>QTableWidget</snippet></ROW><ROW><id>18428024</id><snippet>#!/usr/bin/env python
#-*- coding:utf-8 -*-

#---------
# IMPORT
#---------
from PyQt4 import QtGui, QtCore

#---------
# MAIN
#---------
class MyWindow(QtGui.QWidget):
    def __init__(self, parent=None):
        super(MyWindow, self).__init__(parent)

        numberRows    = 1
        numberColumns = 2

        self.tableWidget = QtGui.QTableWidget(self)
        self.tableWidget.setRowCount(numberRows)
        self.tableWidget.setColumnCount(numberColumns)

        for rowNumber in range(numberRows):
            for columnNumber in range(numberColumns):    
                item = QtGui.QTableWidgetItem("item {0} {1}".format(rowNumber, columnNumber))
                item.setFlags(item.flags() | QtCore.Qt.ItemIsUserCheckable)
                item.setCheckState(QtCore.Qt.Unchecked)

                self.tableWidget.setItem(rowNumber, columnNumber, item)

        self.layoutVertical = QtGui.QVBoxLayout(self)
        self.layoutVertical.addWidget(self.tableWidget)

if __name__ == "__main__":
    import sys

    app = QtGui.QApplication(sys.argv)
    app.setApplicationName('MyWindow')

    main = MyWindow()
    main.resize(333, 111)
    main.show()

    sys.exit(app.exec_())
</snippet></ROW><ROW><id>18428158</id><snippet>root.quit()</snippet></ROW><ROW><id>18428158</id><snippet>root.destroy()</snippet></ROW><ROW><id>18428158</id><snippet>root.mainloop()</snippet></ROW><ROW><id>18428194</id><snippet>from re import sub, match

def match_string(input, pattern, valid_words, date_format):
    errors = []

    # makes sure that input and pattern are compatible
    regex_pattern = sub(r'#{1,3}', '(.+?)', pattern)
    if not match(regex_pattern, input):
        return 'Error: Input doesn\'t match pattern!'   

    # converts the data_format to a regex
    date_regex = sub(r'%d', '(?P&lt;day&gt;\d+)', date_format)
    date_regex = sub(r'%m', '(?P&lt;month&gt;\d+)', date_regex)
    date_regex = sub(r'%y', '(?P&lt;year&gt;\d+)', date_regex)

    # extracts the dates
    regex_pattern = sub(r'###', '(.+?)', pattern)
    regex_pattern = sub(r'##', '(?:.+?)', regex_pattern)
    regex_pattern = sub(r'#', '(?:.+?)', regex_pattern)
    for date in match(regex_pattern, input).groups():
        m = match(date_regex, date)
        if not m:
            errors.append('Error: %s is not a valid date!' % date)
        else:
            if int(m.group('day')) &lt; 1 or 31 &lt; int(m.group('day')):
                errors.append('Error: %s is not a valid day!' % m.group('day'))
            if int(m.group('month')) &lt; 1 or 12 &lt; int(m.group('month')):
                errors.append('Error: %s is not a valid month!' % m.group('month'))

    # extracts the generic words
    regex_pattern = sub(r'###', '(?:.+?)', pattern)
    regex_pattern = sub(r'##', '(.+?)', regex_pattern)
    regex_pattern = sub(r'#', '(?:.+?)', regex_pattern)
    for word in match(regex_pattern, input).groups():
        if not word.strip() in valid_words:
            errors.append('Error: %s is not a valid word!' % word)

    # extracts the numbers
    regex_pattern = sub(r'###', '(?:.+?)', pattern)
    regex_pattern = sub(r'##', '(?:.+?)', regex_pattern)
    regex_pattern = sub(r'#', '(.+?)', regex_pattern)
    for number in match(regex_pattern, input).groups():
        if not match(r'\d+', number):
            errors.append('Error: %s is not a valid number!' % number)

    if len(errors) == 0:
        return True
    else:
        return '\n'.join(errors)

print match_string('1 and 2 are numbers foo and bar are strings 12-1-2013 is a date', '# and # are numbers ## and ## are strings ### is a date', ['foo', 'bar'], '%m-%d-%y')
print
print match_string('1 is a number foo is a string 12-1-2013 is a date', '# is a number ## is a string ### is a date', ['foo'], '%m-%d-%y')
print
print match_string('foo is a number bar is a string 12-1-2013 is a date', '# is a number ## is a string ### is a date', ['foo'], '%m-%d-%y')
print
print match_string('1 is a number bar is a string 12-1-2013 is a date', '# is a number ## is a string ### is a date', ['foo'], '%m-%d-%y')
print
print match_string('1 is a number foo is a string January is a date', '# is a number ## is a string ### is a date', ['foo'], '%m-%d-%y')
</snippet></ROW><ROW><id>18428194</id><snippet>True

True

Error: bar is not a valid word!
Error: foo is not a valid number!

Error: bar is not a valid word!

Error: January is not a valid date!
</snippet></ROW><ROW><id>18428194</id><snippet>def match_string(input, pattern, valid_words, date_format):
    print '\n&gt; match_string(\'%s\', \'%s\', %s, \'%s\')' % (input, pattern, valid_words, date_format)

    digits = '0123456789'
    inputIndex = 0
    patternIndex = 0

    while inputIndex &lt; len(input) and patternIndex &lt; len(pattern):
        if pattern[patternIndex] == '#':
            patternIndex += 1
            if pattern[patternIndex] == '#':
                patternIndex += 1
                if pattern[patternIndex] == '#':

                    # validate date
                    date_formatIndex = 0
                    while inputIndex &lt; len(input) and date_formatIndex &lt; len(date_format):

                        if input[inputIndex] == date_format[date_formatIndex]:
                            inputIndex += 1
                            date_formatIndex += 1

                        elif input[inputIndex] in digits:

                            startIndex = inputIndex
                            while inputIndex &lt; len(input) and input[inputIndex] in digits:
                                inputIndex += 1
                            number = int(input[startIndex:inputIndex])

                            if date_format[date_formatIndex:].startswith('%y'):
                                placeholder = True
                            elif date_format[date_formatIndex:].startswith('%m'):
                                if number &lt; 1 or 12 &lt; number:
                                    return 'Error: expected a month between 1 and 12\n input   %d -&gt; "...%s"\n pattern %d -&gt; "...%s"\n date format %d -&gt; "...%s"' % (startIndex, input[startIndex:], patternIndex - 2, pattern[patternIndex - 2:], date_formatIndex, date_format[date_formatIndex:])   

                            elif date_format[date_formatIndex:].startswith('%d'):
                                if number &lt; 1 or 31 &lt; number:
                                    return 'Error: expected a day between 1 and 31\n input   %d -&gt; "...%s"\n pattern %d -&gt; "...%s"\n date format %d -&gt; "...%s"' % (startIndex, input[startIndex:], patternIndex - 2, pattern[patternIndex - 2:], date_formatIndex, date_format[date_formatIndex:])   

                            else:
                                return 'Error: input doesn\'t match date format\n input   %d -&gt; "...%s"\n pattern %d -&gt; "...%s"\n date format %d -&gt; "...%s"' % (startIndex, input[startIndex:], patternIndex - 2, pattern[patternIndex - 2:], date_formatIndex, date_format[date_formatIndex:])   

                            date_formatIndex += 2

                        else:
                            return 'Error: input doesn\'t match date format\n input   %d -&gt; "...%s"\n pattern %d -&gt; "...%s"\n date format %d -&gt; "...%s"' % (inputIndex, input[inputIndex:], patternIndex - 2, pattern[patternIndex - 2:], date_formatIndex, date_format[date_formatIndex:])   

                    patternIndex += 1

                else:
                    # validate word
                    valid = False
                    for word in valid_words:
                        if input[inputIndex:].startswith(word):
                            valid = True
                            inputIndex += len(word)
                            break
                    if not valid:
                        return 'Error: expected a valid word\n input   %d -&gt; "...%s"\n pattern %d -&gt; "...%s"' % (inputIndex, input[inputIndex:], patternIndex - 2, pattern[patternIndex - 2:])                    

            else:
                # validate number
                if not input[inputIndex] in digits:
                    return 'Error: expected a number\n input   %d -&gt; "...%s"\n pattern %d -&gt; "...%s"' % (inputIndex, input[inputIndex:], patternIndex - 1, pattern[patternIndex - 1:])
                while inputIndex &lt; len(input) and input[inputIndex] in digits:
                    inputIndex += 1

        elif input[inputIndex] != pattern[patternIndex]:
            return 'Error: input and pattern do not match\n input   %d -&gt; "...%s"\n pattern %d -&gt; "...%s"' % (inputIndex, input[inputIndex:], patternIndex, pattern[patternIndex:])
        else:
            inputIndex += 1            
            patternIndex += 1
    return True

print match_string('1 and 2 are numbers foo and bar are strings 12-1-2013 is a date', '# and # are numbers ## and ## are strings ### is a date', ['foo', 'bar'], '%m-%d-%y')
print match_string('1 is a number foo is a string 12-1-2013 is a date', '# is a number ## is a string ### is a date', ['foo'], '%m-%d-%y')
print match_string('foo is a number bar is a string 12-1-2013 is a date', '# is a number ## is a string ### is a date', ['foo'], '%m-%d-%y')
print match_string('1 is a number bar is a string 12-1-2013 is a date', '# is a number ## is a string ### is a date', ['foo'], '%m-%d-%y')
print match_string('1 is a number foo is a string January is a date', '# is a number ## is a string ### is a date', ['foo'], '%m-%d-%y')
print match_string('1 and 2 are numbers foo and bar are strings 15-1-2013 is a date', '# and # are numbers ## and ## are strings ### is a date', ['foo', 'bar'], '%m-%d-%y')
print match_string('1 and 2 are numbers foo and bar are strings 08-42-2013 is a date', '# and # are numbers ## and ## are strings ### is a date', ['foo', 'bar'], '%m-%d-%y')
print match_string('1 and 2 are numbers foo and bar are strings 08;4;2013 is a date', '# and # are numbers ## and ## are strings ### is a date', ['foo', 'bar'], '%m-%d-%y')
print match_string('1 and 2 are numbers foo and bar are strings 08-4-2013 is a date', '# and # are numbers ## and ## are strings ### is a date', ['foo', 'bar'], '~%m-%d-%y')
</snippet></ROW><ROW><id>18428194</id><snippet>&gt; match_string('1 and 2 are numbers foo and bar are strings 12-1-2013 is a date', '# and # are numbers ## and ## are strings ### is a date', ['foo', 'bar'], '%m-%d-%y')
True

&gt; match_string('1 is a number foo is a string 12-1-2013 is a date', '# is a number ## is a string ### is a date', ['foo'], '%m-%d-%y')
True

&gt; match_string('foo is a number bar is a string 12-1-2013 is a date', '# is a number ## is a string ### is a date', ['foo'], '%m-%d-%y')
Error: expected a number
 input   0 -&gt; "...foo is a number bar is a string 12-1-2013 is a date"
 pattern 0 -&gt; "...# is a number ## is a string ### is a date"

&gt; match_string('1 is a number bar is a string 12-1-2013 is a date', '# is a number ## is a string ### is a date', ['foo'], '%m-%d-%y')
Error: expected a valid word
 input   14 -&gt; "...bar is a string 12-1-2013 is a date"
 pattern 14 -&gt; "...## is a string ### is a date"

&gt; match_string('1 is a number foo is a string January is a date', '# is a number ## is a string ### is a date', ['foo'], '%m-%d-%y')
Error: input doesn't match date format
 input   30 -&gt; "...January is a date"
 pattern 29 -&gt; "...### is a date"
 date format 0 -&gt; "...%m-%d-%y"

&gt; match_string('1 and 2 are numbers foo and bar are strings 15-1-2013 is a date', '# and # are numbers ## and ## are strings ### is a date', ['foo', 'bar'], '%m-%d-%y')
Error: expected a month between 1 and 12
 input   44 -&gt; "...15-1-2013 is a date"
 pattern 42 -&gt; "...### is a date"
 date format 0 -&gt; "...%m-%d-%y"

&gt; match_string('1 and 2 are numbers foo and bar are strings 08-42-2013 is a date', '# and # are numbers ## and ## are strings ### is a date', ['foo', 'bar'], '%m-%d-%y')
Error: expected a day between 1 and 31
 input   47 -&gt; "...42-2013 is a date"
 pattern 42 -&gt; "...### is a date"
 date format 3 -&gt; "...%d-%y"

&gt; match_string('1 and 2 are numbers foo and bar are strings 08;4;2013 is a date', '# and # are numbers ## and ## are strings ### is a date', ['foo', 'bar'], '%m-%d-%y')
Error: input doesn't match date format
 input   46 -&gt; "...;4;2013 is a date"
 pattern 42 -&gt; "...### is a date"
 date format 2 -&gt; "...-%d-%y"

&gt; match_string('1 and 2 are numbers foo and bar are strings 08-4-2013 is a date', '# and # are numbers ## and ## are strings ### is a date', ['foo', 'bar'], '~%m-%d-%y')
Error: input doesn't match date format
 input   44 -&gt; "...08-4-2013 is a date"
 pattern 42 -&gt; "...### is a date"
 date format 0 -&gt; "...~%m-%d-%y"
</snippet></ROW><ROW><id>18428517</id><snippet>partial</snippet></ROW><ROW><id>18428517</id><snippet>partial</snippet></ROW><ROW><id>18428517</id><snippet>lambda</snippet></ROW><ROW><id>18428517</id><snippet>from functools import partial

def setTrigger(self, pushButton,value):
    pushButton.setText(value)
    #other actions

def uiConfig(self):     
    ##triggerbutton configuration 
    self.ui.triggerButton.setText("Software")
    self.ui.triggerButton.setMenu(menu)

    menu = QtGui.QMenu()
    menu.addAction('Software', partial(self.setTrigger, self.ui.triggerButton, 'Software'))
    menu.addAction('Hardware', lambda: self.setTrigger(self.ui.triggerButton, 'Hardware'))
</snippet></ROW><ROW><id>18428597</id><snippet>clr.AddReferenceToFileAndPath</snippet></ROW><ROW><id>18428597</id><snippet>import clr
clr.AddReferenceToFileAndPath('C:\\Desktop\\DLLTest.dll')
</snippet></ROW><ROW><id>18428649</id><snippet>creator</snippet></ROW><ROW><id>18428649</id><snippet>FooBar</snippet></ROW><ROW><id>18428649</id><snippet>bar</snippet></ROW><ROW><id>18428649</id><snippet>foo</snippet></ROW><ROW><id>18428649</id><snippet>def bar_creator(value):
    return FooBar(bar=value)
</snippet></ROW><ROW><id>18428649</id><snippet>foo_creator</snippet></ROW><ROW><id>18428748</id><snippet>defualtdict</snippet></ROW><ROW><id>18428748</id><snippet>axis=1</snippet></ROW><ROW><id>18428748</id><snippet>apply</snippet></ROW><ROW><id>18428748</id><snippet>axis=1</snippet></ROW><ROW><id>18428748</id><snippet>frame =  pd.DataFrame({
    'home'    : ['CHI', 'ATL', 'SEA', 'DET', 'STL','HOU' ,'CHI','CHI'],
    'away'    : ['DET', 'CHI', 'HOU', 'TOR', 'DAL', 'STL', 'MIA', 'SEA'],
    'awayPTS' : [88, 75, 105, 99, 110, 85, 95, 100],
    'homePTS' : [92, 88, 95, 97, 100, 74, 98, 110],
})

score = collections.defaultdict(int)
def calculate(row):
    away = row['away']
    home = row['home']
    score[away] += row['awayPTS']
    score[home] += row['homePTS']
    return pd.Series([score[away], score[home]],
                     index=['awayteam_totalPTS', 'hometeam_totalPTS'])
frame = pd.concat([frame, frame.apply(calculate, axis=1)], axis=1)
</snippet></ROW><ROW><id>18428748</id><snippet>  away home  awayPTS  homePTS  awayteam_totalPTS  hometeam_totalPTS
0  DET  CHI       88       92                 88                 92
1  CHI  ATL       75       88                167                 88
2  HOU  SEA      105       95                105                 95
3  TOR  DET       99       97                 99                185
4  DAL  STL      110      100                110                100
5  STL  HOU       85       74                185                179
6  MIA  CHI       95       98                 95                265
7  SEA  CHI      100      110                195                375
</snippet></ROW><ROW><id>18428900</id><snippet>sumFunc</snippet></ROW><ROW><id>18428900</id><snippet>import clr
clr.addReferenceToFileAndPath(...path do dll...)

from DLLTest import MyDllTest

test = MyDllTest()
test.sumFunc(33, 44)
</snippet></ROW><ROW><id>18429075</id><snippet>from io import BytesIO
import mock

class MemorisingBytesIO(BytesIO):
    """Like a BytesIO, but it remembers what its value was when it was closed."""
    contents = {}
    def __init__(self, filepath, *args, **kwargs):
        self.filepath = filepath
        super(MemorisingBytesIO, self).__init__()
    def close(self):
        self.contents[self.filepath] = self.getvalue()
        super(MemorisingBytesIO, self).close()

def write_to_the_file():
    with open('a/b.txt', 'wb') as f:
        f.write('the data')
    with open('a/c.txt', 'wb') as f:
        f.write('another data')


#MemorisingBytesIO.contents.clear()
open_mock = mock.Mock(side_effect=MemorisingBytesIO)
with mock.patch('__builtin__.open', open_mock):
    write_to_the_file()  # the function under test

open_mock.called_once_with('a/b.txt', 'wb')
open_mock.called_once_with('a/c.txt', 'wb')
assert MemorisingBytesIO.contents['a/b.txt'] == b'the data'
assert MemorisingBytesIO.contents['a/c.txt'] == b'another data'
</snippet></ROW><ROW><id>18429101</id><snippet>,</snippet></ROW><ROW><id>18429101</id><snippet>t = threading.Thread(target=getter, args=(fsq_id,))
</snippet></ROW><ROW><id>18429101</id><snippet>t = threading.Thread(target=getter, args=('4', 'b', 'e', 'e', '8', '4', '9', '8', '3', '6', '8', '6', 'c', '9', 'b', '6', 'b', '7', '9', '4', '2', '4', '6', 'e'))</snippet></ROW><ROW><id>18429101</id><snippet>t = threading.Thread(target=getter, args=('4bee84983686c9b6b794246e'))
</snippet></ROW><ROW><id>18429172</id><snippet>str.strip</snippet></ROW><ROW><id>18429172</id><snippet>string.punctuation</snippet></ROW><ROW><id>18429172</id><snippet>&gt;&gt;&gt; import string
&gt;&gt;&gt; string.punctuation
'!"#$%&amp;\'()*+,-./:;&lt;=&gt;?@[\\]^_`{|}~'
&gt;&gt;&gt; '!Hello.'.strip(string.punctuation)
'Hello'

&gt;&gt;&gt; ' '.join(word.strip(string.punctuation) for word in "Hello, world. I'm a boy, you're a girl.".split())
"Hello world I'm a boy you're a girl"
</snippet></ROW><ROW><id>18429324</id><snippet>finalList = []
firstParts = []
for line in List:
    item = line[0].split("-")
    print item[0]
    if item[0] not in firstParts:
            firstParts.append(item[0])
            finalList.append(line)
</snippet></ROW><ROW><id>18429465</id><snippet>udp</snippet></ROW><ROW><id>18429465</id><snippet>wireshark</snippet></ROW><ROW><id>18429465</id><snippet>tcpdump</snippet></ROW><ROW><id>18429465</id><snippet>tcpdump</snippet></ROW><ROW><id>18429465</id><snippet>UDP</snippet></ROW><ROW><id>18429465</id><snippet>tcp</snippet></ROW><ROW><id>18429783</id><snippet>import networkx as nx
from itertools import tee, izip

list1 = ['a','b','c']
list2 = ['c','d','e']
list3 = ['b','c','d']

g = nx.DiGraph()
for items in [list1, list2, list3]:
    a, b = tee(items)
    next(b)
    g.add_edges_from(izip(a, b))

print nx.topological_sort(g)
# ['a', 'b', 'c', 'd', 'e']
</snippet></ROW><ROW><id>18429890</id><snippet>checkio</snippet></ROW><ROW><id>18429890</id><snippet>data</snippet></ROW><ROW><id>18429890</id><snippet>data = ["a", "b", ["c", "d"], [["e", "f"], "g"]]
</snippet></ROW><ROW><id>18429911</id><snippet>strip()</snippet></ROW><ROW><id>18429911</id><snippet>with open ('sampleID.txt', 'r') as inF:
        for line in inF:
            if 'Sample ID:' in line:

                SID = line.split(':')[1].strip()
</snippet></ROW><ROW><id>18430026</id><snippet>def original(matriz):

    vector2 = np.ndarray.flatten(matriz)

    nrows, ncols= matriz.shape
    vector = np.zeros(nrows*ncols,dtype='float64')

    # Interior pixels
    for i in range(vector.shape[0]):
        if ( (i % ncols) != 0 and (i+1) % ncols != 0 and i&gt;ncols and i&lt;ncols*(nrows-1)):

            vector[i] = np.mean(np.array([vector2[i-ncols-1],vector2[i-ncols],\
                        vector2[i-ncols+1],vector2[i-1],vector2[i+1],\
                        vector2[i+ncols-1],vector2[i+ncols],vector2[i+ncols+1]]))
</snippet></ROW><ROW><id>18430026</id><snippet>def mean_around(arr):
    arr=arr.astype(np.float64)

    out= np.copy(arr[:-2,:-2])  #Top left corner
    out+= arr[:-2,2:]           #Top right corner
    out+= arr[:-2,1:-1]         #Top center
    out+= arr[2:,:-2]           #etc
    out+= arr[2:,2:]
    out+= arr[2:,1:-1]
    out+= arr[1:-1,2:]
    out+= arr[1:-1,:-2]

    out/=8.0    #Divide by # of elements to obtain mean

    cout=np.empty_like(arr)  #Create output array
    cout[1:-1,1:-1]=out      #Fill with out values
    cout[0,:]=0;cout[-1,:]=0;cout[:,0]=0;cout[:,-1]=0 #Set edges equal to zero

    return  cout
</snippet></ROW><ROW><id>18430026</id><snippet>np.empty_like</snippet></ROW><ROW><id>18430026</id><snippet>np.zeros_like</snippet></ROW><ROW><id>18430026</id><snippet>matriz</snippet></ROW><ROW><id>18430026</id><snippet>print np.allclose(mean_around(matriz),original(matriz))
True

print mean_around(matriz)
[[ 0.     0.     0.     0.     0.   ]
 [ 0.     2.5    2.75   3.125  0.   ]
 [ 0.     3.25   2.75   2.375  0.   ]
 [ 0.     1.875  2.     2.     0.   ]
 [ 0.     2.25   2.25   1.75   0.   ]
 [ 0.     0.     0.     0.     0.   ]]
</snippet></ROW><ROW><id>18430026</id><snippet>a=np.random.rand(500,500)

print np.allclose(original(a),mean_around(a))
True

%timeit mean_around(a)
100 loops, best of 3: 4.4 ms per loop

%timeit original(a)
1 loops, best of 3: 6.6 s per loop
</snippet></ROW><ROW><id>18430026</id><snippet>def mean_numba(arr):
    out=np.zeros_like(arr)
    col,rows=arr.shape

    for x in xrange(1,col-1):
        for y in xrange(1,rows-1):
            out[x,y]=(arr[x-1,y+1]+arr[x-1,y]+arr[x-1,y-1]+arr[x,y+1]+\
                      arr[x,y-1]+arr[x+1,y+1]+arr[x+1,y]+arr[x+1,y-1])/8.
    return out

nmean= autojit(mean_numba)
</snippet></ROW><ROW><id>18430026</id><snippet>a=np.random.rand(5000,5000)

%timeit mean_around(a)
1 loops, best of 3: 729 ms per loop

%timeit nmean(a)
10 loops, best of 3: 169 ms per loop

#CT Zhu's answer
%timeit it_mean(a)
1 loops, best of 3: 36.7 s per loop

#Ali_m's answer
%timeit fast_local_mean(a,(3,3))
1 loops, best of 3: 4.7 s per loop

#lmjohns3's answer
%timeit scipy_conv(a)
1 loops, best of 3: 3.72 s per loop
</snippet></ROW><ROW><id>18430055</id><snippet>urlpatterns = patterns('',
    # ...
    url(r'^call/ajax/$', 'myapp.views.home_ajax', name='home-ajax'),
)
</snippet></ROW><ROW><id>18430055</id><snippet>def home_ajax(request):
    if request.is_ajax():
        my_var = print request.GET.get('myvar')
        return HttpResponse('ajax called with myvar: %s' % my_var)

    return HttpResponse()
</snippet></ROW><ROW><id>18430055</id><snippet>&lt;script type="text/javascript"&gt;
$(function() {
  var myVar = 'durr';
  $.get("{% url 'home-ajax' %}", {myvar: myVar}, function(data) {
    console.log(data);
  });
});
&lt;/script&gt;
</snippet></ROW><ROW><id>18430128</id><snippet>import itertools

def all_permutations_substrings(a_str):
    return (
        ''.join(item)
        for length in xrange(1, len(a_str)+1)
        for item in itertools.permutations(a_str, length))
</snippet></ROW><ROW><id>18430128</id><snippet>hello</snippet></ROW><ROW><id>18430128</id><snippet>l</snippet></ROW><ROW><id>18430128</id><snippet>l</snippet></ROW><ROW><id>18430128</id><snippet>set()</snippet></ROW><ROW><id>18430128</id><snippet>all_permutations_no_dupes = set(all_permutations_substrings(a_str))
</snippet></ROW><ROW><id>18430149</id><snippet>x,y,ylines</snippet></ROW><ROW><id>18430149</id><snippet>SplitPol()</snippet></ROW><ROW><id>18430149</id><snippet>SplitPols.split_props()</snippet></ROW><ROW><id>18430149</id><snippet>SPINSTANCE.split_props()</snippet></ROW><ROW><id>18430149</id><snippet>zeros()</snippet></ROW><ROW><id>18430149</id><snippet>SplitPols.split_props()</snippet></ROW><ROW><id>18430327</id><snippet>public void OutputSequence(int length){
    Recurse(length-1, Enumerable.Range(1, length).ToArray(), new int[length]);  
}

public void Recurse(int position, int[] arr, int[] state){  
    if (position == -1){
        PrintState(state);  
        return;
    }

    for (int i = 0; i &lt; arr.Length; i++)
    {           
        state[position] = arr[i];
        Recurse(position-1, arr, state);
    }
}

public void PrintState(int[] state){
    for (int i = 0; i &lt; state.Length; i++)
        Console.WriteLine ("{0} {1}",i+1, state[i]);        

        Console.WriteLine ();
}
</snippet></ROW><ROW><id>18430327</id><snippet>OutputSequence(5);</snippet></ROW><ROW><id>18430327</id><snippet>var pairs = from i in Enumerable.Range(1, 5)
            from j in Enumerable.Range(1, 5)
            select new {i, j};

foreach(var p in pairs)
    Console.WriteLine ("{0} {1}", p.i, p.j);
</snippet></ROW><ROW><id>18430327</id><snippet>public IEnumerable&lt;IEnumerable&lt;int&gt;&gt; NAryCartesianProduct(int upper, int times){
    if (times == 0)
        return Enumerable.Empty&lt;IEnumerable&lt;int&gt;&gt;();

    var nums = Enumerable.Range(1, upper);          
    IEnumerable&lt;IEnumerable&lt;int&gt;&gt; products = nums.Select(i =&gt; new[]{i});

    for (int i = 1; i &lt; times; i++)
    {
        products = from p in products
                   from n in nums
                   select p.Concat(new [] {n});                                     
    }       

    return products;
}
</snippet></ROW><ROW><id>18430327</id><snippet>var p = NAryCartesianProduct(5, 2);

foreach(var i in p)
    Console.WriteLine (i);
</snippet></ROW><ROW><id>18430365</id><snippet>width=1</snippet></ROW><ROW><id>18430365</id><snippet>8</snippet></ROW><ROW><id>18430365</id><snippet> -
| |
 -
| |
 -
</snippet></ROW><ROW><id>18430365</id><snippet>width=2</snippet></ROW><ROW><id>18430365</id><snippet>8</snippet></ROW><ROW><id>18430365</id><snippet> --
|  |
|  |
 --
|  |
|  |
 --
</snippet></ROW><ROW><id>18430365</id><snippet>8</snippet></ROW><ROW><id>18430365</id><snippet>['020', '101', '020', '101', '020']</snippet></ROW><ROW><id>18430365</id><snippet>['0220', '1001', '1001', '0220', '1001', '1001', '0220']</snippet></ROW><ROW><id>18430365</id><snippet>1</snippet></ROW><ROW><id>18430365</id><snippet>def scale(code, factor):
    if factor == 1:
        return code

    result = ["{}{}{}".format(line[0], line[1:-1]*factor, line[-1])  # widen
              for line in code]

    for i in range(len(result)-2, 0, -2):
        result[i:i+1] = result[i:i+1]*factor       # stretch vertically

    return result

def render(code):
    for line in code:
        print(line.replace('0', ' ').replace('1', '|').replace('2', '-'))
</snippet></ROW><ROW><id>18430365</id><snippet>&gt;&gt;&gt; render(['020', '101', '020', '101', '020'])
 - 
| |
 - 
| |
 - 
&gt;&gt;&gt; render(scale(['020', '101', '020', '101', '020'], 2))
 -- 
|  |
|  |
 -- 
|  |
|  |
 -- 
&gt;&gt;&gt; render(scale(['020', '101', '020', '101', '020'], 3))
 --- 
|   |
|   |
|   |
 --- 
|   |
|   |
|   |
 --- 
</snippet></ROW><ROW><id>18430442</id><snippet>import Jama.*

Matrix A = new Matrix(a);
Matrix B = new Matrix(b);
Matrix R = A.minus(B);
</snippet></ROW><ROW><id>18430588</id><snippet>import json
import codecs

tweets = []

with codecs.open('brief.csv', encoding='utf8') as f:
    for line in f.readlines():
        tweets.append(json.loads(line))

print tweets

for tweet in tweets:
    print tweet.keys()
    print tweet['last_name']
</snippet></ROW><ROW><id>18430861</id><snippet>t = threading.Thread(target=some_function, args=[argument])
t.setDaemon(False)
t.start()
</snippet></ROW><ROW><id>18430931</id><snippet>@periodic_task(run_every=datetime.timedelta(seconds=2))
@transaction.commit_on_success
def initialize_new_jobs():
    for obj in Queue.objects.select_for_update().filter(status__in=['I', 'Q']):
        obj.status = 'A'
        obj.save()
        create_other_task.delay(obj.id)
</snippet></ROW><ROW><id>18430931</id><snippet>select_for_update()</snippet></ROW><ROW><id>18430931</id><snippet>obj</snippet></ROW><ROW><id>18430931</id><snippet>I</snippet></ROW><ROW><id>18430931</id><snippet>Q</snippet></ROW><ROW><id>18430931</id><snippet>obj.save()</snippet></ROW><ROW><id>18430974</id><snippet>mpl</snippet></ROW><ROW><id>18430974</id><snippet>nan</snippet></ROW><ROW><id>18430974</id><snippet>nan</snippet></ROW><ROW><id>18430974</id><snippet>ind = ~np.isnan(np.asarray(data.astype(float)))
plt.plot(np.asarray(x)[ind], np.asarray(data)[ind], 'ro--')
</snippet></ROW><ROW><id>18430974</id><snippet>asarray</snippet></ROW><ROW><id>18430974</id><snippet>astype</snippet></ROW><ROW><id>18430983</id><snippet>from mako.template import Template
from mako.lookup import TemplateLookup

template_path = "c:/Users/username/Desktop/xampp/htdocs/blog"
mylookup = TemplateLookup(directories=[path])

def serve_template(templatename, **kwargs):
    templatename = "scripts/templates/index.html"
    mytemplate = mylookup.get_template(templatename)
    print mytemplate.render(**kwargs)
</snippet></ROW><ROW><id>18431129</id><snippet>import os
import subprocess

for root, dirs, files in os.walk('company 3\company 3 property'):
    images = [os.path.join(root, f) for f in files if f.endswith('.jpg') and not '_thumb' in f]
    for f in images:
        outbase = f[:-4] # simply remove '.jpg'
        out = outbase += '_thumb.jpg'
        args = ['convert', f, '-scale', '250x250', out]
        subprocess.call(args)
</snippet></ROW><ROW><id>18431213</id><snippet>pattern6 = re.compile(r"Time: .*$", flags=re.M)
</snippet></ROW><ROW><id>18431213</id><snippet>re.sub("\r\n", "\n", s)</snippet></ROW><ROW><id>18431213</id><snippet>s1 = 'DOMA A\r\nName: Ryan\r\nBest: 1\r\nAlias: 3K\r\nLocation: Eng\r\nGame Wins: 51\r\nTime: 09:10:50'
s2 = 'DOMA A\r\nName: Ryan\r\nBest: 1\r\nAlias: 3K\r\nLocation: Eng\r\nGame Wins: 51\r\nTime: 09:10:50\r\nREF: Yes'

print "s1: ", pattern6.findall( re.sub('\r\n', '\n', s1) )
print "s2: ", pattern6.findall( re.sub('\r\n', '\n', s2) )
</snippet></ROW><ROW><id>18431213</id><snippet>s1:  ['Time: 09:10:50']
s2:  ['Time: 09:10:50']
</snippet></ROW><ROW><id>18431364</id><snippet>InviteManager.INVITE_MESSAGE</snippet></ROW><ROW><id>18431364</id><snippet>@classmethod
@missing_input_not_allowed
def invite(cls, email):
    return cls.INVITE_MESSAGE
</snippet></ROW><ROW><id>18431979</id><snippet>    &lt;style&gt;
        @font-face {
        font-family: Preeti;
        src: url("c:/static/fonts/preeti.ttf");
        }

        body {
        font-family: Preeti;
        }
    &lt;/style&gt;  
</snippet></ROW><ROW><id>18432218</id><snippet>In [11]: top2_by_date = df.groupby('date').apply(lambda x:  x.sort('size', ascending=False).head(2))

In [12]: top2_by_date
Out[12]: 
        date  issues  size
date                      
1    3     1  issue4     6
     1     1  issue2     2
8    8     8  issue4     6
     6     8  issue2     2
</snippet></ROW><ROW><id>18432218</id><snippet>as_index=False</snippet></ROW><ROW><id>18432218</id><snippet>In [13]: top2_by_date.index =  top2_by_date.index.droplevel(0)

In [14]: top2_by_date
Out[14]: 
   date  issues  size
3     1  issue4     6
1     1  issue2     2
8     8  issue4     6
6     8  issue2     2
</snippet></ROW><ROW><id>18432218</id><snippet>value_counts</snippet></ROW><ROW><id>18432218</id><snippet>In [21]: df.groupby('date').apply(lambda x: x['issues'].value_counts()[:2])
Out[21]: 
date        
1     issue3    2
      issue1    2
2     issue2    1
      issue3    1
dtype: int64
</snippet></ROW><ROW><id>18432287</id><snippet>for item in result['itemdata']
</snippet></ROW><ROW><id>18432287</id><snippet>item</snippet></ROW><ROW><id>18432287</id><snippet>result['itemdata'].values()</snippet></ROW><ROW><id>18432287</id><snippet>update_item</snippet></ROW><ROW><id>18432287</id><snippet>db_item = Item()</snippet></ROW><ROW><id>18432287</id><snippet>except</snippet></ROW><ROW><id>18432389</id><snippet>exec()</snippet></ROW><ROW><id>18432389</id><snippet>eval()</snippet></ROW><ROW><id>18432389</id><snippet>setattr</snippet></ROW><ROW><id>18432389</id><snippet>setattr(self, 'name', 'Peter')
</snippet></ROW><ROW><id>18432389</id><snippet>self.name = 'Peter'
</snippet></ROW><ROW><id>18432833</id><snippet>empty</snippet></ROW><ROW><id>18432833</id><snippet>get</snippet></ROW><ROW><id>18432833</id><snippet>get</snippet></ROW><ROW><id>18432849</id><snippet>with</snippet></ROW><ROW><id>18432849</id><snippet>with open("c:\\newgoodtestsample.txt", "r") as fo:
    for line in fo:
        result = re.findallr'"(\w*?)":"?(\w*)"?', line) 
        d = {k:v for k,v in re.findall(r'"(\w*?)":"?(\w*)"?', line)}
        if 'first_name' in d:
            # print first_name into file
        else:
            # print empty first_name field
</snippet></ROW><ROW><id>18432892</id><snippet>n=57, log(t)=68</snippet></ROW><ROW><id>18432892</id><snippet>target = 5213096522073683233230240000
A = [2316931787588303659213440000,
     1303274130518420808307560000,
     834095443531789317316838400,
     579232946897075914803360000,
     425558899761116998631040000,
     325818532629605202076890000,
     257436865287589295468160000,
     208523860882947329329209600,
     172333769324749858949760000,
     144808236724268978700840000,
     123386899930738064691840000,
     106389724940279249657760000,
     92677271503532146368537600,
     81454633157401300519222500,
     72153585080604612224640000,
     64359216321897323867040000,
     57762842349846905631360000,
     52130965220736832332302400,
     47284322195679666514560000,
     43083442331187464737440000,
     39418499221729173786240000,
     36202059181067244675210000,
     33363817741271572692673536,
     30846724982684516172960000,
     28604096143065477274240000,
     26597431235069812414440000,
     24794751591313594450560000,
     23169317875883036592134400,
     21698632766175580575360000,
     20363658289350325129805625,
     19148196591638873216640000,
     18038396270151153056160000,
     17022355990444679945241600]

import itertools, time
from fractions import gcd

def gcd_r(seq):
     return reduce(gcd, seq)

def miniSolve(t, vals):
     vals = [x for x in vals if x and x &lt;= t]
     for k in range(len(vals)):
          for sub in itertools.combinations(vals, k):
               if sum(sub) == t:
                    return sub
     return None

def tryMod(n, state, answer):
     t, vals, mult = state
     mods = [x%n for x in vals if x%n]
     if (t%n or mods) and sum(mods) &lt; n:
          print 'Filtering with', n
          print t.bit_length(), len(vals)
     else:
          return state

     newvals = list(vals)
     tmod = t%n
     if not tmod:
          for x in vals:
               if x%n:
                    newvals.remove(x)
     else:
          if len(set(mods)) != len(mods):
               #don't want to deal with the complexity of multisets for now
               print 'skipping', n
          else:
               mini = miniSolve(tmod, mods)
               if mini is None:
                    return None
               mini = set(mini)
               for x in vals:
                    mod = x%n
                    if mod:
                         if mod in mini:
                              t -= x
                              answer.add(x*mult)
                         newvals.remove(x)
     g = gcd_r(newvals + [t])
     t = t//g
     newvals = [x//g for x in newvals]
     mult *= g
     return (t, newvals, mult)

def solve(t, vals):
     answer = set()
     mult = 1
     for d in itertools.count(2):
          if not t:
               return answer
          elif not vals or t &lt; min(vals):
               return None #no solution'
          res = tryMod(d, (t, vals, mult), answer)
          if res is None:
               return None
          t, vals, mult = res
          if len(vals) &lt; 23:
               break

          if (d % 10000) == 0:
               print 'd', d

     #don't want to deal with the complexity of multisets for now
     assert(len(set(vals)) == len(vals))
     rest = miniSolve(t, vals)
     if rest is None:
          return None
     answer.update(x*mult for x in rest)
     return answer

start_t = time.time()
answer = solve(target, A)
assert(answer &lt;= set(A) and sum(answer) == target)
print answer
</snippet></ROW><ROW><id>18432983</id><snippet>def zip2tar(zipname, tarname):
    zipf = zipfile.ZipFile(zipname, 'r')
    tarf = tarfile.TarFile(tarname, 'w')
    timeshift = int((datetime.datetime.now() -
                     datetime.datetime.utcnow()).total_seconds())
    for zipinfo in zipf.infolist():
        tarinfo = tarfile.TarInfo()
        tarinfo.name = zipinfo.filename
        tarinfo.size = zipinfo.file_size
        tarinfo.mtime = calendar.timegm(zipinfo.date_time) - timeshift
        if zipinfo.internal_attr &amp; 1:
            tarinfo.mode = 0666
            tarinfo.type = tarfile.REGTYPE
        else:
            tarinfo.mode = 0777
            tarinfo.type = tarfile.DIRTYPE 
        infile = zipf.open(zipinfo.filename)
        tarf.addfile(tarinfo, infile)
    zipf.close()
    tarf.close()
</snippet></ROW><ROW><id>18433051</id><snippet>import repository
</snippet></ROW><ROW><id>18433051</id><snippet>from repository.repository import Repository
</snippet></ROW><ROW><id>18433110</id><snippet>#!/usr/bin/python

"""Equation solving game."""

from random import randint
from random import choice


def gen_randoms(lower, higher):

    """Generates four random numbers between provided bounds."""

    integers = [randint(lower, higher) for x in range(4)]
    return integers


def gen_equation(integers):

    """Generates a random equation from four provided integers."""

    nums = [str(i) for i in integers]
    operators = ['*', '+', '-']
    equation = 'num op num op num op num'
    while 'op' in equation:
        equation = equation.replace('op', choice(operators), 1)
    while 'num' in equation:
        equation = equation.replace('num', choice(nums), 1)
    return equation


def evaluate(equation):

    """Evaluates an equation."""

    return eval(equation)


def main():

    """Main game function."""

    lower = int(raw_input("Enter a lower integer constraint: "))
    higher = int(raw_input("Enter a higher integer constraint: "))
    nums = gen_randoms(lower, higher)
    streak = 0

    while True:
        this_equation = gen_equation(nums)
        print this_equation

        user_answer = raw_input("What is the answer? ('Q' to quit) ")

        if user_answer.lower()[0] == 'q':
            break

        gen_answer = evaluate(this_equation)
        print 'The answer was: %d' % gen_answer

        if gen_answer == int(user_answer):
            streak += 1
            print 'Correct!'
            print 'Current streak: %d' % streak
        else:
            streak = 0
            print 'Incorrect!'


if __name__ == "__main__":
    main()
</snippet></ROW><ROW><id>18433110</id><snippet>game()</snippet></ROW><ROW><id>18433110</id><snippet>main()</snippet></ROW><ROW><id>18433197</id><snippet>pd.tslib.repr_timedelta64
</snippet></ROW><ROW><id>18433197</id><snippet>In [11]: pd.tslib.repr_timedelta64(np.timedelta64(180487000000000,'ns'))
Out[11]: '2 days, 02:08:07'
</snippet></ROW><ROW><id>18433261</id><snippet>redirect_uri</snippet></ROW><ROW><id>18433261</id><snippet>http://www.facebook.com/connect/login_success.html</snippet></ROW><ROW><id>18433261</id><snippet>localhost/mydevwebsite/login_success/</snippet></ROW><ROW><id>18433261</id><snippet>myappdomain.com/loginsuccess/</snippet></ROW><ROW><id>18433264</id><snippet>glob</snippet></ROW><ROW><id>18433264</id><snippet>import glob

for fpath in glob.glob(mypath):
    print fpath
</snippet></ROW><ROW><id>18433264</id><snippet>&gt;&gt;&gt; import glob
&gt;&gt;&gt; glob.glob('g*gle*')
['google.json', 'google.xml', 'google.csv']
</snippet></ROW><ROW><id>18433264</id><snippet>glob</snippet></ROW><ROW><id>18433264</id><snippet>fnmatch</snippet></ROW><ROW><id>18433264</id><snippet>os.path.join</snippet></ROW><ROW><id>18433264</id><snippet>&gt;&gt;&gt; import os
&gt;&gt;&gt; import glob
&gt;&gt;&gt; os.chdir('..')
&gt;&gt;&gt; glob.glob('foo/google*')
['foo/google.json', 'foo/google.xml', 'foo/google.csv']
</snippet></ROW><ROW><id>18433365</id><snippet>sudo port install python27
sudo port install opencv +python27
sudo port select --set python python27
</snippet></ROW><ROW><id>18433433</id><snippet>select distinct on (name)
    name, value
from environments_serverpropertie
where server = ...
order by name, timestamp desc
</snippet></ROW><ROW><id>18433433</id><snippet>ServerPropertie.objects.filter(...).order_by('name', '-timestamp').distinct('name')
</snippet></ROW><ROW><id>18433573</id><snippet>In [1]: import json

In [2]: val = json.dumps({"name":"Déjà"})

In [3]: val
Out[3]: '{"name": "D\\u00e9j\\u00e0"}'
</snippet></ROW><ROW><id>18433573</id><snippet>'{"name": "D\\u00e9j\\u00e0"}'
            ^^^^^^^
            The text \u00e9, which in JSON means "é".
            The slash is doubled because we're looking at a repr of a str.
</snippet></ROW><ROW><id>18433573</id><snippet>JSON.parse</snippet></ROW><ROW><id>18433763</id><snippet>from selenium.webdriver.common.desired_capabilities import DesiredCapabilities

user_agent = (
    "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_8_4) " +
    "AppleWebKit/537.36 (KHTML, like Gecko) Chrome/29.0.1547.57 Safari/537.36"
)

dcap = dict(DesiredCapabilities.PHANTOMJS)
dcap["phantomjs.page.settings.userAgent"] = user_agent

browser = webdriver.PhantomJS(desired_capabilities=dcap)
</snippet></ROW><ROW><id>18433894</id><snippet>str(object())
Out[1]: '&lt;object object at 0x7fe72a054360&gt;'
</snippet></ROW><ROW><id>18433940</id><snippet>with open("c:\\newgood.csv", "r") as fo:
    for line in fo:
        match = re.search('first_name"(.*?)"(.*?)"', line)
        if match:
            results = match.group(2)
        else:
            results = 'None'
        print results
</snippet></ROW><ROW><id>18433940</id><snippet>print results</snippet></ROW><ROW><id>18434126</id><snippet>&gt;&gt;&gt; x
array([[5, 3, 0],
       [3, 0, 5],
       [5, 5, 0],
       [1, 1, 7]])
</snippet></ROW><ROW><id>18434126</id><snippet>&gt;&gt;&gt; x
array([[5, 300, 0],
       [3, 0, 5],
       [5, 500, 0],
       [1, 100, 7]])
</snippet></ROW><ROW><id>18434126</id><snippet>&gt;&gt;&gt; np.cov(x)
array([[  6.33333333,  -3.16666667,   6.66666667,  -8.        ],
       [ -3.16666667,   6.33333333,  -5.83333333,   7.        ],
       [  6.66666667,  -5.83333333,   8.33333333, -10.        ],
       [ -8.        ,   7.        , -10.        ,  12.        ]])
</snippet></ROW><ROW><id>18434126</id><snippet>&gt;&gt;&gt; np.corrcoef(x)
array([[ 1.        , -0.5       ,  0.91766294, -0.91766294],
       [-0.5       ,  1.        , -0.80295507,  0.80295507],
       [ 0.91766294, -0.80295507,  1.        , -1.        ],
       [-0.91766294,  0.80295507, -1.        ,  1.        ]])
</snippet></ROW><ROW><id>18434126</id><snippet>(0,0)</snippet></ROW><ROW><id>18434126</id><snippet>(0,1)</snippet></ROW><ROW><id>18434127</id><snippet>create extension unaccent;</snippet></ROW><ROW><id>18434127</id><snippet>unaccent</snippet></ROW><ROW><id>18434127</id><snippet>from sqlalchemy.sql.functions import ReturnTypeFromArgs

class unaccent(ReturnTypeFromArgs):
    pass
</snippet></ROW><ROW><id>18434127</id><snippet>for place in session.query(Place).filter(unaccent(Place.name) == "cafe").all():
    print place.name
</snippet></ROW><ROW><id>18434279</id><snippet>select_related()</snippet></ROW><ROW><id>18434279</id><snippet>ForeignKey</snippet></ROW><ROW><id>18434279</id><snippet>OneToOneField</snippet></ROW><ROW><id>18434279</id><snippet>prefetch_related()</snippet></ROW><ROW><id>18434284</id><snippet>from ROOTFOL.PACKAGE import *
</snippet></ROW><ROW><id>18434284</id><snippet>__init__.py</snippet></ROW><ROW><id>18434284</id><snippet>from ROOTFOL import * 
</snippet></ROW><ROW><id>18434315</id><snippet>import pymongo</snippet></ROW><ROW><id>18434315</id><snippet>from pymongo import MongoClient
client = MongoClient('localhost', 27017)
db = client.ndsearch # table name
... etc ...
</snippet></ROW><ROW><id>18434340</id><snippet>BooleanField</snippet></ROW><ROW><id>18434340</id><snippet>class beer(models.Model):
    tapStatus = models.BooleanField(_('tap status'), default=False,
            help_text=_('decide whether or not this item gets pasted onto the website'))
    def __unicode__(self):
        return str(self.tapStatus)
    beerdescription = models.CharField(max_length=400)
    def __unicode__(self):
        return self.beerdescription
    beerStyle = models.CharField(max_length=5)
    def __unicode__(self):
        return self.beerStyle
    beerabv = models.CharField(max_length=5)
    def __unicode__(self):
        return self.beerabv
    beername = models.CharField(max_length=40)
    def __unicode__(self):
        return self.beername
</snippet></ROW><ROW><id>18434403</id><snippet>convert_objects</snippet></ROW><ROW><id>18434403</id><snippet>convert_numeric</snippet></ROW><ROW><id>18434403</id><snippet>In [11]: s
Out[11]: 
0    103.8
1    751.1
2      0.0
3      0.0
4        -
5        -
6      0.0
7        -
8      0.0
dtype: object

In [12]: s.convert_objects(convert_numeric=True)
Out[12]: 
0    103.8
1    751.1
2      0.0
3      0.0
4      NaN
5      NaN
6      0.0
7      NaN
8      0.0
dtype: float64
</snippet></ROW><ROW><id>18434430</id><snippet>current</snippet></ROW><ROW><id>18434430</id><snippet>current</snippet></ROW><ROW><id>18434430</id><snippet>traverse()</snippet></ROW><ROW><id>18434430</id><snippet>current</snippet></ROW><ROW><id>18434430</id><snippet>self</snippet></ROW><ROW><id>18434430</id><snippet>self.head</snippet></ROW><ROW><id>18434430</id><snippet>current = current.getNext()</snippet></ROW><ROW><id>18434430</id><snippet>getNext</snippet></ROW><ROW><id>18434430</id><snippet>current</snippet></ROW><ROW><id>18434430</id><snippet>current</snippet></ROW><ROW><id>18434430</id><snippet>current</snippet></ROW><ROW><id>18434430</id><snippet>current.getNext()</snippet></ROW><ROW><id>18434430</id><snippet>current</snippet></ROW><ROW><id>18434535</id><snippet>import lxml.html

# lxml can download pages directly
root = lxml.html.parse('http://test.xyz').getroot()

# use a CSS selector for class="main",
# or use root.xpath('//table[@class="main"]')
tables = root.cssselect('table.main')

# extract HTML content from all tables
# use lxml.html.tostring(t, method="text", encoding=unicode)
# to get text content without tags
"\n".join([lxml.html.tostring(t) for t in tables])

# removing only specific empty tags, here &lt;b&gt;&lt;/b&gt; and &lt;i&gt;&lt;/i&gt;
for empty in root.xpath('//*[self::b or self::i][not(node())]'):
    empty.getparent().remove(empty)

# removing all empty tags (tags that do not have children nodes)
for empty in root.xpath('//*[not(node())]'):
    empty.getparent().remove(empty)
# root does not contain those empty tags anymore
</snippet></ROW><ROW><id>18434561</id><snippet>Column(String...)</snippet></ROW><ROW><id>18434561</id><snippet>Column(Unicode...)</snippet></ROW><ROW><id>18434561</id><snippet>Column(CoercedString...)</snippet></ROW><ROW><id>18434620</id><snippet>tfidf = TfidfVectorizer(tokenizer=lambda doc: doc, lowercase=False).fit_transform(documents)
</snippet></ROW><ROW><id>18434620</id><snippet>stop_words</snippet></ROW><ROW><id>18434624</id><snippet># First check to make sure 'x' isn't empty, then use the 'all' built-in
if x and all(y=='hello' for y in x):
</snippet></ROW><ROW><id>18434624</id><snippet>all</snippet></ROW><ROW><id>18434624</id><snippet>lower</snippet></ROW><ROW><id>18434624</id><snippet>if x and all(y.lower()=='hello' for y in x):
</snippet></ROW><ROW><id>18435312</id><snippet>open</snippet></ROW><ROW><id>18435312</id><snippet>a = open('hello.txt', 'w')
</snippet></ROW><ROW><id>18435312</id><snippet>with open('hello.txt', 'w') as f:
    f.write('my name is mark')
</snippet></ROW><ROW><id>18435340</id><snippet>application: helloworld
version: 1
runtime: python27
api_version: 1
threadsafe: true

libraries:
- name: django
  version: "1.2"
- name: pycrypto
  version: "2.6"


handlers:
- url: /api/.*\.json
  script: backend.api.get_json.application
- url: /.*
  script: helloworld.app
</snippet></ROW><ROW><id>18435340</id><snippet>__init__.py
</snippet></ROW><ROW><id>18435354</id><snippet>itertools.islice</snippet></ROW><ROW><id>18435354</id><snippet>iter(list)</snippet></ROW><ROW><id>18435354</id><snippet>try</snippet></ROW><ROW><id>18435354</id><snippet>StopIteration</snippet></ROW><ROW><id>18435354</id><snippet>for</snippet></ROW><ROW><id>18435378</id><snippet>Options -&gt; Configure IDLE -&gt; Keys
</snippet></ROW><ROW><id>18435439</id><snippet>Scene</snippet></ROW><ROW><id>18435439</id><snippet>Scene</snippet></ROW><ROW><id>18435439</id><snippet> public class Scene
 {
      public Scene(string name)
      {
          Name = name;
      }

      public string Name { get; set; }

      // ... more properties

      public void Draw()
      {
          // logic for drawing
      }

      // ... more methods.

      public override string ToString()
      {
          // here return what you would want to have as
          // a string representation of a Scene object.
          return "Scene " + Name;
      }
 }


 // in a different part of your code, create and add the Scene objects
 var scenesList = new List&lt;Scene&gt;();

 scenesList.Add(new Scene("Some scene name"));
 // add more

 // Now you can print them to the console like this:
 foreach (var scene in scenesList)
     Console.WriteLine(scene);
</snippet></ROW><ROW><id>18435481</id><snippet>tags</snippet></ROW><ROW><id>18435481</id><snippet>iter(tags) is tags</snippet></ROW><ROW><id>18435481</id><snippet>next()</snippet></ROW><ROW><id>18435481</id><snippet>body.children</snippet></ROW><ROW><id>18435481</id><snippet>tags = soup.body.children</snippet></ROW><ROW><id>18435712</id><snippet>raise some_module.exception_string, some_arbitrary_object
</snippet></ROW><ROW><id>18435712</id><snippet>some_arbitrary_object</snippet></ROW><ROW><id>18435735</id><snippet>class Node:                                                                     
    def __init__(self, dic_nodes=None):
        if dic_nodes is None:
            dic_nodes = dict()
        self.dic_nodes = dic_nodes    
</snippet></ROW><ROW><id>18435744</id><snippet>key</snippet></ROW><ROW><id>18435744</id><snippet>key</snippet></ROW><ROW><id>18435744</id><snippet>href</snippet></ROW><ROW><id>18435780</id><snippet>hist, bins = np.histogram(norm2d.ravel(), normed=True, bins=100)
threshold = bins[np.cumsum(hist) * (bins[1] - bins[0]) &gt; 0.8][0]
mnorm2d = np.ma.masked_less(norm2d,threshold)
com = ndimage.measurements.center_of_mass(mnorm2d)
plt.imshow(norm2d, origin="lower")
plt.scatter(*com[::-1])
plt.show()
</snippet></ROW><ROW><id>18435790</id><snippet>(_, caps, _) = plt.errorbar(x,y, yerr=err, capsize=20, elinewidth=3)

for cap in caps:
    cap.set_color('red')
    cap.set_markeredgewidth(10)
</snippet></ROW><ROW><id>18435792</id><snippet>def capitalize_list(t):
    N = []
    for i in range(len(t)):
        if type(t[i]) == str:
            N.append(t[i].capitalize())
        if type(t[i]) == list:
            N.append(capitalize_list(t[i]))
    return N
</snippet></ROW><ROW><id>18435792</id><snippet>['A', 'B', ['C', 'D'], ['E'], 'F']
</snippet></ROW><ROW><id>18435903</id><snippet>Exception Type:     ImportError
Exception Value:    

No module named forms

Exception Location:     /home/chad/newssite/links/views.py in &lt;module&gt;, line 3
</snippet></ROW><ROW><id>18435924</id><snippet>pdf()</snippet></ROW><ROW><id>18435924</id><snippet>rv_continuous</snippet></ROW><ROW><id>18435924</id><snippet>frechet_r_gen._pdf()</snippet></ROW><ROW><id>18435924</id><snippet>pdf()</snippet></ROW><ROW><id>18435924</id><snippet>def pdf(self,x,*args,**kwds):
    loc,scale=map(kwds.get,['loc','scale'])
    args, loc, scale = self._fix_loc_scale(args, loc, scale)
    x,loc,scale = map(asarray,(x,loc,scale))
    args = tuple(map(asarray,args))
    x = asarray((x-loc)*1.0/scale)
    cond0 = self._argcheck(*args) &amp; (scale &gt; 0)
    cond1 = (scale &gt; 0) &amp; (x &gt;= self.a) &amp; (x &lt;= self.b)
    cond = cond0 &amp; cond1
    output = zeros(shape(cond),'d')
    putmask(output,(1-cond0)+np.isnan(x),self.badvalue)
    if any(cond):
        goodargs = argsreduce(cond, *((x,)+args+(scale,)))
        scale, goodargs = goodargs[-1], goodargs[:-1]
        place(output,cond,self._pdf(*goodargs) / scale)
    if output.ndim == 0:
        return output[()]
    return output
</snippet></ROW><ROW><id>18436160</id><snippet># The default argument here is useless.
def Recocido(tour1 = []):

    # Make a copy of the list.
    tour1 = tour1[:]

    # Pick a random index.
    izquierda = random.randrange(len(tour1))

    # Unnecessary.
    derecha = 0

    while(True):

        # # Pick another random index
        derecha = random.randrange(len(tour1))

        # If it's not the same index you picked the first time,
        if (derecha != izquierda):

            # swap the elements of the copy at the two indices,
            tour1[izquierda], tour1[derecha] = tour1[derecha], tour1[izquierda]

            # and stop looping.
            break

    return tour1
</snippet></ROW><ROW><id>18436160</id><snippet># No default argument - you'd never want to use the default.
def with_random_swap(lst):
    # Use random.sample to pick two distinct random indices.
    index1, index2 = random.sample(xrange(len(lst)), 2)
    copy = lst[:]
    copy[index1], copy[index2] = copy[index2], copy[index1]
    return copy
</snippet></ROW><ROW><id>18436271</id><snippet>multiprocessing.map_async</snippet></ROW><ROW><id>18436274</id><snippet>a</snippet></ROW><ROW><id>18436274</id><snippet>hashlib.a()</snippet></ROW><ROW><id>18436274</id><snippet>a</snippet></ROW><ROW><id>18436274</id><snippet>h = haslib.new(a)
h.update(v)
h.hexdigest()
</snippet></ROW><ROW><id>18436322</id><snippet>tuple(self.__dict__.values())</snippet></ROW><ROW><id>18436322</id><snippet>dict</snippet></ROW><ROW><id>18436322</id><snippet>values</snippet></ROW><ROW><id>18436322</id><snippet>return hash(frozenset(self.__dict__.iteritems()))
</snippet></ROW><ROW><id>18436322</id><snippet>__hash__</snippet></ROW><ROW><id>18436322</id><snippet>__eq__</snippet></ROW><ROW><id>18436322</id><snippet>return hash(self.PersonID)
</snippet></ROW><ROW><id>18436322</id><snippet>PersonID</snippet></ROW><ROW><id>18436713</id><snippet>site_effect</snippet></ROW><ROW><id>18436713</id><snippet>import mock

def mymethod(para1, para2, para3):
    return para1 + para2 + para3

m = mock.Mock(side_effect=lambda *args: args[0])
with mock.patch('__main__.mymethod', m):
    assert mymethod(1, 2, 3) == 1
</snippet></ROW><ROW><id>18436795</id><snippet>import Tkinter as TK
import datetime

class countdown:
    def __init__(self, master, time):   # time in mm/dd/yy hh:mm:ss format
        self.master = master
        self.frame = TK.Frame(self.master)
        self.targetTime = datetime.datetime.strptime(time, "%m/%d/%y %H:%M:%S")
        self.timeRemainingLabel = TK.Label(self.frame)
        self.startButton = TK.Button(self.frame, text="Start countdown", command=lambda:self.master.after(1000, self.update))
        self.endTimeLabel = TK.Label(self.frame, text="Target time in mm/dd/yy hh:mm:ss format:")
        self.endTimeEntry = TK.Entry(self.frame)
        self.endTimeEntry.insert(0, time)
        self.frame.grid()
        self.timeRemainingLabel.grid(row=1,column=1, columnspan=3)
        self.startButton.grid(row=2, column=1, rowspan=2)
        self.endTimeLabel.grid(row=2, column=2)
        self.endTimeEntry.grid(row=3, column=2)

    def update(self):
        remaining = self.targetTime-datetime.datetime.now()
        daysRemaining = remaining.days
        hoursRemaining = int(remaining.seconds) / 3600
        minutesRemaining = int(remaining.seconds % 3600) / 60
        secondsRemaining = int(remaining.seconds % 60)
        self.timeRemainingLabel.config(text="Time remaining until {targetTime}:\n*** {days} days {hours} hrs {minutes} min {seconds} sec ***".format(targetTime=datetime.datetime.strptime(self.endTimeEntry.get(), "%m/%d/%y %H:%M:%S"), days=daysRemaining, hours=hoursRemaining, minutes=minutesRemaining, seconds=secondsRemaining))
        self.master.after(1000, self.update)

root = TK.Tk()
c = countdown(root, "08/31/13 01:01:01")
root.mainloop()
</snippet></ROW><ROW><id>18437215</id><snippet>input</snippet></ROW><ROW><id>18437215</id><snippet>job_title</snippet></ROW><ROW><id>18437215</id><snippet>&lt;input name="job_title" type="text" id="u_jobtitle" class="input-xlarge" value=" " /&gt;
-------------^ changed 
</snippet></ROW><ROW><id>18437215</id><snippet>        #Dont need this
        #getjobtitle = request.POST['jobtitle']

        #---------------------------Use request.POST
        getintable = applicationform(request.POST)
        getintable.save()

        print getjobtitle
        return HttpResponse(getintable)

else:
    return render_to_response('registration/applicationform.html')
</snippet></ROW><ROW><id>18437853</id><snippet>in</snippet></ROW><ROW><id>18437853</id><snippet>dh@d:~$ python -m timeit 'temp = "1:5.9";temp.find(":")'
10000000 loops, best of 3: 0.139 usec per loop
dh@d:~$ python -m timeit 'temp = "1:5.9";":" in temp'
10000000 loops, best of 3: 0.0412 usec per loop
</snippet></ROW><ROW><id>18437951</id><snippet>CLoader</snippet></ROW><ROW><id>18437951</id><snippet>CSafeLoader</snippet></ROW><ROW><id>18437951</id><snippet>CDumper</snippet></ROW><ROW><id>18437951</id><snippet>import yaml
try:
    from yaml import CLoader as Loader
except ImportError:
    from yaml import Loader

config_file = "test.yaml"

stream = open(config_file, "r")
sensors = yaml.load(stream, Loader=Loader)
</snippet></ROW><ROW><id>18437951</id><snippet>real    0m0.503s
</snippet></ROW><ROW><id>18437951</id><snippet>real    0m2.714s
</snippet></ROW><ROW><id>18437974</id><snippet>import getopt
args = ['-a', '-b', '-cfoo', '-d', 'bar', 'a1', 'a2']
opts, args = getopt.getopt(args, "abc:d")
print ("opts=" + str(opts))
print ("args=" + str(args))
optdic = dict(opts) # convert options to dictionary
print ("optdic['-c'] = " + str(optdic['-c']))
</snippet></ROW><ROW><id>18437974</id><snippet>opts=[('-a', ''), ('-b', ''), ('-c', 'foo'), ('-d', '')]
args=['bar', 'a1', 'a2']
optdic['-c'] = foo
</snippet></ROW><ROW><id>18438183</id><snippet>dictionary[key]</snippet></ROW><ROW><id>18438183</id><snippet>value</snippet></ROW><ROW><id>18438183</id><snippet>"8"</snippet></ROW><ROW><id>18438183</id><snippet>print nums[l]</snippet></ROW><ROW><id>18438183</id><snippet>"eight"</snippet></ROW><ROW><id>18438183</id><snippet>NameErrors</snippet></ROW><ROW><id>18438183</id><snippet>"324"</snippet></ROW><ROW><id>18438183</id><snippet>str.join()</snippet></ROW><ROW><id>18438183</id><snippet>l = "324"
nums = {'1':'one',
        '2':'two',
        '3':'three',
        '4':'four',
        '5':'five',
        '6':'six',
        '7':'seven',
        '8':'eight',
        '9':'nine'}

print ' '.join(nums[i] for i in l)
</snippet></ROW><ROW><id>18438183</id><snippet>[nums[i] for i in l]</snippet></ROW><ROW><id>18438183</id><snippet>returned_list = []
for number in l:
    returned_list.append(d[number])
</snippet></ROW><ROW><id>18438183</id><snippet>str.join()</snippet></ROW><ROW><id>18438183</id><snippet>' '.join(['one', 'two', 'three'])</snippet></ROW><ROW><id>18438183</id><snippet>'one two three'</snippet></ROW><ROW><id>18438239</id><snippet>[...]</snippet></ROW><ROW><id>18438239</id><snippet>&gt;&gt;&gt; for item in a:
...     print item
... 
1
2
3
[1, 2, 3, [...]] # The whole list that we just iterated over :)
</snippet></ROW><ROW><id>18438854</id><snippet>for user</snippet></ROW><ROW><id>18438854</id><snippet>cur = con.cursor()
with open('output.csv', mode='a') as w:  
    writer = csv.writer(w)
    with con:            
        cur.execute("SELECT user_id FROM users")
        user=cur.fetchall()            
        for i in range(len(user)): 
            with open('input.csv', mode='rb') as f:
                reader = csv.reader(f, delimiter=';')                              
                for row in reader:
                    if(user[i][0]==row[0]):
                        writer.writerow(row)
con.close()
</snippet></ROW><ROW><id>18438854</id><snippet>import csv
user = [[1,318604],[2,318624]]
with open('output.csv', mode='a') as w:  
    writer = csv.writer(w)      
    for i in range(len(user)):
        with open('input.csv', mode='rb') as f:
            reader = csv.reader(f, delimiter=';')                               
            for row in reader:
                if(str(user[i][1])==row[0]):
                    writer.writerow(row)
</snippet></ROW><ROW><id>18438854</id><snippet>user[i][1]</snippet></ROW><ROW><id>18438854</id><snippet>user[i][0]</snippet></ROW><ROW><id>18438854</id><snippet>id</snippet></ROW><ROW><id>18438854</id><snippet>user[i][1]</snippet></ROW><ROW><id>18438854</id><snippet>user_id</snippet></ROW><ROW><id>18438854</id><snippet>318604,    John,    john@gmail.com
318604,    053746,  USA 
318624,    Lucy,    Lucy@gmail.com
318624,    058839   Sweeden
</snippet></ROW><ROW><id>18438995</id><snippet>lookup = {'Room': Room(), 'Item': Item()}
myinstance = lookup.get(input)
if myinstance is not None:
    print myinstance.description
</snippet></ROW><ROW><id>18439053</id><snippet>&gt;&gt;&gt; import re
&gt;&gt;&gt; a = "I am a programmer"
&gt;&gt;&gt; reg = re.compile(r'I am (.*?)$')
&gt;&gt;&gt; print('How long have you been {}'.format(*reg.findall(a)))
How long have you been a programmer
</snippet></ROW><ROW><id>18439053</id><snippet>r'I am (.*?)$'</snippet></ROW><ROW><id>18439053</id><snippet>I am</snippet></ROW><ROW><id>18439053</id><snippet>&gt;&gt;&gt; a = "I am an apple"
&gt;&gt;&gt; reg = re.compile(r'I am (\w+).*?$')
&gt;&gt;&gt; print('How long have you been {}'.format(*reg.findall(a)))
How long have you been an
</snippet></ROW><ROW><id>18439247</id><snippet>pygame.quit()</snippet></ROW><ROW><id>18439247</id><snippet>while 1:
    ev = pygame.event.poll() 
    if ev.type == pygame.QUIT:
        break
pygame.quit()
</snippet></ROW><ROW><id>18439247</id><snippet>pygame.event.poll()</snippet></ROW><ROW><id>18439247</id><snippet>pygame.quit()</snippet></ROW><ROW><id>18439809</id><snippet>&gt;&gt;&gt; import re
&gt;&gt;&gt; line = '12/08/2013,3,"9,25",42:51,"3,08","12,9","13,9",159,170,"3,19",437,'
&gt;&gt;&gt; re.sub(r'"(\d+),(\d+)"', r'\1:\2', line)
'12/08/2013,3,9:25,42:51,3:08,12:9,13:9,159,170,3:19,437,'
</snippet></ROW><ROW><id>18439809</id><snippet>\1</snippet></ROW><ROW><id>18439809</id><snippet>\2</snippet></ROW><ROW><id>18439809</id><snippet>&gt;&gt;&gt; ''.join(x if i % 2 == 0 else x.replace(',', ':')
            for i, x in enumerate(line.split('"')))
'12/08/2013,3,9:25,42:51,3:08,12:9,13:9,159,170,3:19,437,'
</snippet></ROW><ROW><id>18439913</id><snippet>a</snippet></ROW><ROW><id>18439913</id><snippet>f()</snippet></ROW><ROW><id>18439913</id><snippet>np.diag()</snippet></ROW><ROW><id>18439913</id><snippet>np</snippet></ROW><ROW><id>18440169</id><snippet>import re

rgx = re.compile('ElapsedTime(\d*\.\d*)s: (\S*)')

from collections import defaultdict
d = defaultdict(list)

with open('data1.txt','r') as f:
    for m in rgx.finditer(f.read()):
        d[m.group(2)].append(float(m.group(1)))

lapi = max(map(len,d.iterkeys()))

print '{: ^{width}}   min    max    average   total occurences'.format('api',width=lapi)
pat = '{0:%d}   {1:.2f}   {2:.2f}   {3:.3f}     {4}' % lapi
print '\n'.join(pat.format(api,min(li),max(li),sum(li)/len(li),len(li))
                for api,li in d.iteritems())
</snippet></ROW><ROW><id>18440374</id><snippet>iso.setopt(iso.WRITEDATA, file("7za920.zip")
</snippet></ROW><ROW><id>18440374</id><snippet>iso.setopt(iso.WRITEDATA, file("7za920.zip"))
</snippet></ROW><ROW><id>18440478</id><snippet>find_element(s)_by_*</snippet></ROW><ROW><id>18440478</id><snippet>click</snippet></ROW><ROW><id>18440478</id><snippet>from selenium import webdriver

# To prevent download dialog
profile = webdriver.FirefoxProfile()
profile.set_preference('browser.download.folderList', 2) # custom location
profile.set_preference('browser.download.manager.showWhenStarting', False)
profile.set_preference('browser.download.dir', '/tmp')
profile.set_preference('browser.helperApps.neverAsk.saveToDisk', 'text/csv')

browser = webdriver.Firefox(profile)
browser.get("http://www.drugcite.com/?q=ACTIMMUNE")

browser.find_element_by_id('exportpt').click()
browser.find_element_by_id('exporthlgt').click()
</snippet></ROW><ROW><id>18440538</id><snippet>class LinkedList:
    def __init__(self):
        self._head = None
        self._tail = None
        self._size = 0

    def append(self, item):
        if self._tail is None:
            self.prepend(item)
        else:
            self._tail.next = Node(item, None)
            self._tail = self._tail.next

    def prepend(self, item):
        if self._head is None:
            self._tail = Node(item, None)
            self._head = self._tail
        else:
            self._head = Node(item, self._head)
        self._size += 1
</snippet></ROW><ROW><id>18440572</id><snippet>#!/usr/bin/env py
import re
s = "1:5.9,1.5:7,2:10,4:18,8:40"
data  = re.findall(r'([0-9.]+):([0-9.]+)', s)
if data:
    print data
</snippet></ROW><ROW><id>18440572</id><snippet>[('1', '5.9'), ('1.5', '7'), ('2', '10'), ('4', '18'), ('8', '40')]</snippet></ROW><ROW><id>18440572</id><snippet>#!/usr/bin/env py
import re

s = "1:5.9,1.5:7,2:10,4:18,8:40"

raw_data = re.findall(r'(([0-9]+(.)?(?(3)[0-9]+)):([0-9]+(.)?(?(5)[0-9]+)))+', s)
_temp = ','.join([first[0] for first in raw_data])
data = [(p[1], p[3]) for p in raw_data]

if _temp==s:
    print 'Data is correct'
else:
    print 'Data is wrong'
</snippet></ROW><ROW><id>18440798</id><snippet>s</snippet></ROW><ROW><id>18440798</id><snippet>&gt;&gt;&gt; s = "#####\n #   #\n ### #\n #X  #\n #####"
</snippet></ROW><ROW><id>18440798</id><snippet>&gt;&gt;&gt; print s.split('\n')
['#####', ' #   #', ' ### #', ' #X  #', ' #####']
</snippet></ROW><ROW><id>18440798</id><snippet>&gt;&gt;&gt; print [list(i) for i in s.split('\n')]
[['#', '#', '#', '#', '#'], [' ', '#', ' ', ' ', ' ', '#'], [' ', '#', '#', '#', ' ', '#'], [' ', '#', 'X', ' ', ' ', '#'], [' ', '#', '#', '#', '#', '#']]
</snippet></ROW><ROW><id>18440955</id><snippet>partial</snippet></ROW><ROW><id>18440955</id><snippet>&gt;&gt;&gt; from functools import partial
&gt;&gt;&gt; def my_function(a, b, c, d, e, f):
...     print(a, b, c, d, e, f)
... 
&gt;&gt;&gt; new_func = partial(my_function, 1, 2, 3)
&gt;&gt;&gt; new_func('d', 'e', 'f')
1 2 3 d e f
</snippet></ROW><ROW><id>18440955</id><snippet>lambda</snippet></ROW><ROW><id>18440955</id><snippet>&gt;&gt;&gt; new_func = partial(my_function, d=1, e=2, f=3)
&gt;&gt;&gt; new_func('a', 'b', 'c')
a b c 1 2 3
&gt;&gt;&gt; new_func = lambda a,b,c: my_function(a, b, c, 1, 2, 3)
&gt;&gt;&gt; new_func('a', 'b', 'c')
a b c 1 2 3
</snippet></ROW><ROW><id>18441075</id><snippet>__init__</snippet></ROW><ROW><id>18441075</id><snippet>registerdate</snippet></ROW><ROW><id>18441075</id><snippet>__init__</snippet></ROW><ROW><id>18441075</id><snippet>User(name='jacky',email='jacky@test.com',password=md5.new('123').hexdigest())
</snippet></ROW><ROW><id>18441075</id><snippet>registerdate</snippet></ROW><ROW><id>18441075</id><snippet>now()</snippet></ROW><ROW><id>18441075</id><snippet>def __init__(self, name, email, password):
    self.name = name
    self.email = email
    self.password = password
    self.registerdate = datetime.datetime.now()
</snippet></ROW><ROW><id>18441075</id><snippet>registerdate</snippet></ROW><ROW><id>18441075</id><snippet>now()</snippet></ROW><ROW><id>18441075</id><snippet>def __init__(self, name, email, password, registerdate=None):
    self.name = name
    self.email = email
    self.password = password
    self.registerdate = registerdate or datetime.datetime.now()
</snippet></ROW><ROW><id>18441369</id><snippet>collections.Counter</snippet></ROW><ROW><id>18441369</id><snippet>with open('initiator') as f:
  contentsI = f.read()
with open('other') as f:
  contentsO = f.read()
</snippet></ROW><ROW><id>18441369</id><snippet>from collections import Counter
tokensI = Counter(value for value in contentsI.split()
                        if value not in [ 'unwanted1', 'unwanted2' ])
tokensO = Counter(value for value in contentsO.split()
                        if value not in [ 'unwanted1', 'unwanted2' ])
</snippet></ROW><ROW><id>18441369</id><snippet>return not (tokensI - tokensO) and not (set(tokensO) - set(tokensI))
</snippet></ROW><ROW><id>18441528</id><snippet>speed = int(input("Current speed: "))</snippet></ROW><ROW><id>18441528</id><snippet>(White space)</snippet></ROW><ROW><id>18441528</id><snippet>false</snippet></ROW><ROW><id>18441528</id><snippet>if</snippet></ROW><ROW><id>18441528</id><snippet>false</snippet></ROW><ROW><id>18441528</id><snippet>speed</snippet></ROW><ROW><id>18441528</id><snippet>limit</snippet></ROW><ROW><id>18441528</id><snippet>false</snippet></ROW><ROW><id>18441528</id><snippet>True</snippet></ROW><ROW><id>18441660</id><snippet>if  'A' is team:
    print 'TEAM A\n', 'At Position ', position , TeamA[position - 1]
if  'B' is team:
    print 'TEAM B\n', 'At Position ', position , TeamB[position - 1]
</snippet></ROW><ROW><id>18441921</id><snippet>from string import punctuation
import csv

strs = "Hello! It's a nice day."

with open('abc.csv', 'w') as f:
    writer = csv.writer(f, delimiter=',')
    writer.writerow(['ID', 'PUNCTUATION', 'WORD'])
    #use enumerate to get word as well as index
    table = dict.fromkeys(map(ord, punctuation))
    for i, word in enumerate(strs.split(), 1):
        #str.translate is faster than regex
        new_strs = word.translate(table)
        #if the new word is not equal to original word then use 'Y'
        punc = 'Y' if new_strs != word else 'N'
        writer.writerow([i, punc, new_strs])
</snippet></ROW><ROW><id>18442199</id><snippet>font</snippet></ROW><ROW><id>18442199</id><snippet>soup = BeautifulSoup("file.html")
fontlist = soup.findAll('font')
print len(fontlist)
</snippet></ROW><ROW><id>18442420</id><snippet>def make_comment(request):
    if request.method == 'POST':
        if 'prepair_comment' in request.POST:
            review = get_object_or_404(Review, pk=request.POST.get('id'))
            form = CommentForm({'review': review.id})
            return render(request, 'stamped/comment.html', {
                'form': form,
                })
        else: # save the comment
</snippet></ROW><ROW><id>18442420</id><snippet>class CommentForm(ModelForm):
        class Meta:
               model = Comment
               exclude = ('user',)
               widgets = {'review': forms.HiddenInput()}
</snippet></ROW><ROW><id>18442420</id><snippet>&lt;form method='POST' action='/add_comment/'&gt;
    {% csrf_token %}
    &lt;input type='hidden' value='{{ r.id }}' name='id'&gt;
    &lt;input type="submit" name='prepair_comment' value="Make a Comment"&gt;
&lt;/form&gt;
</snippet></ROW><ROW><id>18442429</id><snippet>addAction</snippet></ROW><ROW><id>18442429</id><snippet>import sys
from PySide import QtGui, QtCore

class Window(QtGui.QWidget):
    def __init__(self):
        super(Window, self).__init__()
        action = QtGui.QAction(self)
        action.setShortcut('Ctrl+t')
        action.triggered.connect(self.on_triggered)
        self.addAction(action)

    def on_triggered(self):
        print('triggered')

app = QtGui.QApplication(sys.argv)
w = Window()
w.show()
sys.exit(app.exec_())
</snippet></ROW><ROW><id>18442625</id><snippet>get()</snippet></ROW><ROW><id>18442625</id><snippet>QuerySet</snippet></ROW><ROW><id>18442625</id><snippet>if defob.student_def.filter(id=u.id).exists():
    # do things
</snippet></ROW><ROW><id>18443288</id><snippet>&gt;&gt;&gt; class MyClass(object):
...     pass
... 
&gt;&gt;&gt; myObj = MyClass()
&gt;&gt;&gt; NewClass = myObj.__class__
&gt;&gt;&gt; newObj = NewClass()
&gt;&gt;&gt; myObj, newObj
(&lt;__main__.MyClass object at 0x102740d90&gt;, &lt;__main__.MyClass object at 0x102740d50&gt;)
</snippet></ROW><ROW><id>18443288</id><snippet>&gt;&gt;&gt; myObj = MyClass()
&gt;&gt;&gt; NewClass = type("NewClass", (myObj.__class__,), {})
&gt;&gt;&gt; newObj = NewClass()
&gt;&gt;&gt; myObj, newObj
(&lt;__main__.MyClass object at 0x102740d90&gt;, &lt;__main__.NewClass object at 0x102752610&gt;)
&gt;&gt;&gt; 
</snippet></ROW><ROW><id>18443405</id><snippet>def test_overlap(dt1_st, dt1_end, dt2_st, dt2_end):
    return not (dt1_st &lt; dt2_end and dt1_end &gt;dt2_st)
</snippet></ROW><ROW><id>18443692</id><snippet>from django.utils.translation import ugettext as _
</snippet></ROW><ROW><id>18443784</id><snippet>stripped_strings</snippet></ROW><ROW><id>18443784</id><snippet>&gt;&gt;&gt; from bs4 import BeautifulSoup
&gt;&gt;&gt;
&gt;&gt;&gt; html = '''&lt;td class="_480u"&gt;
...     &lt;div class="clearfix"&gt;
...         &lt;div&gt;
...             Female
...         &lt;/div&gt;
...     &lt;/div&gt;
... &lt;/td&gt;'''
&gt;&gt;&gt; soup = BeautifulSoup(html)
&gt;&gt;&gt; print ' '.join(soup.find('div', {'class': 'clearfix'}).stripped_strings)
Female
&gt;&gt;&gt; print ' '.join(soup.find('td', {'class': '_480u'}).stripped_strings)
Female
</snippet></ROW><ROW><id>18443784</id><snippet>None</snippet></ROW><ROW><id>18443784</id><snippet>string</snippet></ROW><ROW><id>18443784</id><snippet>&gt;&gt;&gt; soup.find('div', {'class': ''}).string
u'\n            Female\n        '
&gt;&gt;&gt; soup.find('div', {'class': ''}).string.strip()
u'Female'
</snippet></ROW><ROW><id>18443856</id><snippet>text</snippet></ROW><ROW><id>18443856</id><snippet>BookTitle</snippet></ROW><ROW><id>18443856</id><snippet>tail</snippet></ROW><ROW><id>18443856</id><snippet>Emphasis</snippet></ROW><ROW><id>18443856</id><snippet>def parse(el):
    text = el.text.strip() + ' ' if el.text.strip() else ''
    for child in el.getchildren():
        text += '{0} {1}\n'.format(child.text.strip(), child.tail.strip())
    return text
</snippet></ROW><ROW><id>18443856</id><snippet>&gt;&gt;&gt; root = et.fromstring('''
    &lt;BookTitle&gt;
    &lt;Emphasis Type="Italic"&gt;Z&lt;/Emphasis&gt;
     = 63 - 100
    &lt;/BookTitle&gt;''')
&gt;&gt;&gt; print parse(root)
Z = 63 - 100
</snippet></ROW><ROW><id>18443856</id><snippet>&gt;&gt;&gt; root = et.fromstring('''
&lt;BookTitle&gt;
Mtn
&lt;Emphasis Type="Italic"&gt;Z&lt;/Emphasis&gt;
 = 74 - 210
&lt;/BookTitle&gt;''')
&gt;&gt;&gt; print parse(root)
Mtn Z = 74 - 210
</snippet></ROW><ROW><id>18444048</id><snippet>from pyparsing import Suppress,QuotedString,Word,alphas,nums,alphanums,Keyword,Optional
import datetime

# define UTC timezone for sake of eval
if hasattr(datetime,"timezone"):
    UTC = datetime.timezone(datetime.timedelta(0),"UTC")
else:
    UTC = None

_ = Suppress
evaltokens = lambda s,l,t: eval(''.join(t))

timevalue = 'datetime.datetime' + QuotedString('(', endQuoteChar=')', unquoteResults=False)
timevalue.setParseAction(evaltokens)

strvalue = 'u' + QuotedString("'", unquoteResults=False)
strvalue.setParseAction(evaltokens)

nonevalue = Keyword("None").setParseAction(lambda s,l,t: [None])
intvalue = Word(nums).setParseAction(lambda s,l,t: int(t[0]))

COMMA = Optional(_(","))

valuedexpr = lambda expr: (Word(alphas) + "(" + "value" + "=" + expr + ")").setParseAction(lambda t: t[4])

lineexpr = (_("Aggregate(aggregate_dimension_value_list=[") +
            valuedexpr(timevalue)("timestamp") + COMMA +
            (nonevalue | valuedexpr(strvalue))("s1") + COMMA +
            (nonevalue | valuedexpr(strvalue))("s2") + COMMA +
        "]" + COMMA +
        "quantity=" + intvalue("qty"))
</snippet></ROW><ROW><id>18444048</id><snippet>lineexpr.searchString</snippet></ROW><ROW><id>18444048</id><snippet>for data in lineexpr.searchString(sample):
    print data.dump()
    print data.qty
    print
</snippet></ROW><ROW><id>18444048</id><snippet>[datetime.datetime(2013, 8, 28, 19, 30), None, u'VIRTUALLY_LABELED_CASE', ']', 'quantity=', 127]
- qty: 127
- s1: None
- s2: VIRTUALLY_LABELED_CASE
- timestamp: 2013-08-28 19:30:00
127

[datetime.datetime(2013, 8, 28, 19, 30), u'PPTransMergeNonCon', u'PRIME_BIN_RANDOM_STOW', ']', 'quantity=', 15]
- qty: 15
- s1: PPTransMergeNonCon
- s2: PRIME_BIN_RANDOM_STOW
- timestamp: 2013-08-28 19:30:00
15

[datetime.datetime(2013, 8, 27, 21, 0), u'PPTransFRA1', u'PRIME_BIN_RANDOM_STOW', ']', 'quantity=', 8]
- qty: 8
- s1: PPTransFRA1
- s2: PRIME_BIN_RANDOM_STOW
- timestamp: 2013-08-27 21:00:00
8
</snippet></ROW><ROW><id>18444048</id><snippet>dump()</snippet></ROW><ROW><id>18444048</id><snippet>data.qty</snippet></ROW><ROW><id>18444048</id><snippet>"quantity=" + intvalue("qty")</snippet></ROW><ROW><id>18444048</id><snippet>timestamp</snippet></ROW><ROW><id>18444048</id><snippet>s1</snippet></ROW><ROW><id>18444048</id><snippet>s2</snippet></ROW><ROW><id>18444048</id><snippet>eval</snippet></ROW><ROW><id>18444048</id><snippet>from pyparsing import Suppress,QuotedString,Word,alphas,nums,alphanums,Keyword,Optional, ungroup
import datetime

# define UTC timezone for sake of eval
if hasattr(datetime,"timezone"):
    UTC = datetime.timezone(datetime.timedelta(0),"UTC")
else:
    UTC = None

_ = Suppress
evaltokens = lambda s,l,t: eval(''.join(t))

timevalue = 'datetime.datetime' + QuotedString('(', endQuoteChar=')', unquoteResults=False)
replUTC = lambda s,l,t: ''.join(t).replace("&lt; UTC&gt;","UTC").replace("&lt;UTC &gt;","UTC").replace("&lt;UTC&gt;","UTC")
timevalue.setParseAction(replUTC, evaltokens)

strvalue = 'u' + QuotedString("'", unquoteResults=False)
strvalue.setParseAction(evaltokens)

nonevalue = Keyword("None").setParseAction(lambda s,l,t: [None])
intvalue = Word(nums).setParseAction(lambda s,l,t: int(t[0]))

COMMA = Optional(_(","))
LT,GT,LPAR,RPAR,LBRACK,RBRACK = map(Suppress,"&lt;&gt;()[]")

#~ valuedexpr = lambda expr: (Word(alphas) + "(" + "value" + "=" + expr + ")").setParseAction(lambda t: t[4])
valuedexpr = lambda expr: ungroup(LT + (Word(alphas) + "(" + "value" + "=" + expr("value") + ")" + GT).setParseAction(lambda t: t.value))

#~ lineexpr = (_("Aggregate(aggregate_dimension_value_list=[") +
            #~ valuedexpr(timevalue)("timestamp") + COMMA +
            #~ (nonevalue | valuedexpr(strvalue))("s1") + COMMA +
            #~ (nonevalue | valuedexpr(strvalue))("s2") + COMMA +
        #~ "]" + COMMA +
        #~ "quantity=" + intvalue("qty"))

lineexpr = (LT + "Aggregate" + LPAR + "aggregate_dimension_value_list" + "=" + LBRACK +
            valuedexpr(timevalue)("timestamp") + COMMA +
            (nonevalue | valuedexpr(strvalue))("s1") + COMMA +
            (nonevalue | valuedexpr(strvalue))("s2") + 
        RBRACK + COMMA +
        "quantity=" + intvalue("qty") + RPAR + GT)
</snippet></ROW><ROW><id>18444048</id><snippet>['Aggregate', 'aggregate_dimension_value_list', '=', datetime.datetime(2013, 8, 26, 20, 30), u'PPTransCGN1', u'PRIME_BIN_RANDOM_STOW', 'quantity=', 992]
- qty: 992
- s1: PPTransCGN1
- s2: PRIME_BIN_RANDOM_STOW
- timestamp: 2013-08-26 20:30:00
992

['Aggregate', 'aggregate_dimension_value_list', '=', datetime.datetime(2013, 8, 23, 19, 30), None, u'TOTE', 'quantity=', 87]
- qty: 87
- s1: None
- s2: TOTE
- timestamp: 2013-08-23 19:30:00
87

['Aggregate', 'aggregate_dimension_value_list', '=', datetime.datetime(2013, 8, 27, 17, 30), u'PPTransMUC3', u'TOTE', 'quantity=', 14]
- qty: 14
- s1: PPTransMUC3
- s2: TOTE
- timestamp: 2013-08-27 17:30:00
14

['Aggregate', 'aggregate_dimension_value_list', '=', datetime.datetime(2013, 8, 27, 20, 30), u'PPTransEUK5', u'PRIME_BIN_RANDOM_STOW', 'quantity=', 339]
- qty: 339
- s1: PPTransEUK5
- s2: PRIME_BIN_RANDOM_STOW
- timestamp: 2013-08-27 20:30:00
339

['Aggregate', 'aggregate_dimension_value_list', '=', datetime.datetime(2013, 8, 26, 20, 30), u'PPTransCGN1', u'TOTE', 'quantity=', 1731]
- qty: 1731
- s1: PPTransCGN1
- s2: TOTE
- timestamp: 2013-08-26 20:30:00
1731

['Aggregate', 'aggregate_dimension_value_list', '=', datetime.datetime(2013, 8, 26, 19, 30), u'PPTransEUK5', u'TOTE', 'quantity=', 28]
- qty: 28
- s1: PPTransEUK5
- s2: TOTE
- timestamp: 2013-08-26 19:30:00
28

['Aggregate', 'aggregate_dimension_value_list', '=', datetime.datetime(2013, 8, 28, 19, 30), u'PPTransORY1', u'PRIME_BIN_RANDOM_STOW', 'quantity=', 69]
- qty: 69
- s1: PPTransORY1
- s2: PRIME_BIN_RANDOM_STOW
- timestamp: 2013-08-28 19:30:00
69

['Aggregate', 'aggregate_dimension_value_list', '=', datetime.datetime(2013, 8, 26, 19, 30), u'PPTransMAD4', u'PRIME_BIN_RANDOM_STOW', 'quantity=', 47]
- qty: 47
- s1: PPTransMAD4
- s2: PRIME_BIN_RANDOM_STOW
- timestamp: 2013-08-26 19:30:00
47

['Aggregate', 'aggregate_dimension_value_list', '=', datetime.datetime(2013, 8, 26, 21, 0), None, None, 'quantity=', 78]
- qty: 78
- s1: None
- s2: None
- timestamp: 2013-08-26 21:00:00
78
</snippet></ROW><ROW><id>18444305</id><snippet>RequestContext</snippet></ROW><ROW><id>18444305</id><snippet>render</snippet></ROW><ROW><id>18444305</id><snippet>render_to_response</snippet></ROW><ROW><id>18444305</id><snippet>ModelForm</snippet></ROW><ROW><id>18444305</id><snippet>forms.py</snippet></ROW><ROW><id>18444305</id><snippet>views.py</snippet></ROW><ROW><id>18444305</id><snippet>from myapp.models import Job

class JobForm(forms.ModelForm):
    class Meta:
        model = Job
</snippet></ROW><ROW><id>18444305</id><snippet>views.py</snippet></ROW><ROW><id>18444305</id><snippet>from django.shortcuts import render, redirect

from myapp.forms import JobForm

def jobform(request):
    ctx = {'form': JobForm(request.POST or {})}
    if request.method == 'POST':
        if form.is_valid():
           form.save()
           return redirect('/some/url')
        else:
           return render(request, 'interviewform.html', ctx)
    else:
        return render(request, 'interviewform.html', ctx)
</snippet></ROW><ROW><id>18444305</id><snippet>interviewform.html</snippet></ROW><ROW><id>18444305</id><snippet>&lt;form method="POST"
      class="form-horizontal"
      id="jobform" name="jform" enctype="multipart/form-data"&gt;
      {% csrf_token %}
      {{ form }}
      &lt;button type="submit" class="btn btn-primary"&gt;&lt;/button&gt;
&lt;/form&gt;
</snippet></ROW><ROW><id>18444330</id><snippet>os.path.abspath(__file__)</snippet></ROW><ROW><id>18444330</id><snippet>__file__</snippet></ROW><ROW><id>18444330</id><snippet>__file__</snippet></ROW><ROW><id>18444330</id><snippet>__file__</snippet></ROW><ROW><id>18444628</id><snippet>def register_callback(name):
    def decorator(cls):
        cls._callback = getattr(cls, name)
        return cls
    return decorator

@register_callback('my_func')
class SimpleConsumer(Consumer):
     def my_func(self, body):
         print body
</snippet></ROW><ROW><id>18444628</id><snippet>_callback</snippet></ROW><ROW><id>18444628</id><snippet>class SimpleConsumer(Consumer):
     def _callback(self, body):
         print body
</snippet></ROW><ROW><id>18444628</id><snippet>class SimpleConsumer(Consumer):
     def my_func(self, body):
         print body

     _callback = my_func
</snippet></ROW><ROW><id>18444670</id><snippet>use \My\Very\Long\Omg\Its\Sooooo\Long\How\Stupid as veryshort;
</snippet></ROW><ROW><id>18444710</id><snippet>scipy.stats.truncnorm</snippet></ROW><ROW><id>18444710</id><snippet>import matplotlib.pyplot as plt
import scipy.stats as stats

lower, upper = 3.5, 6
mu, sigma = 5, 0.7
X = stats.truncnorm(
    (lower - mu) / sigma, (upper - mu) / sigma, loc=mu, scale=sigma)
N = stats.norm(loc=mu, scale=sigma)

fig, ax = plt.subplots(2, sharex=True)
ax[0].hist(X.rvs(10000), normed=True)
ax[1].hist(N.rvs(10000), normed=True)
plt.show()
</snippet></ROW><ROW><id>18444710</id><snippet>mu</snippet></ROW><ROW><id>18444710</id><snippet>sigma</snippet></ROW><ROW><id>18445168</id><snippet>from BaseHTTPServer import BaseHTTPRequestHandler,HTTPServer

class test:
    def show(self):
        return "aaaa"

class http_server:
    def __init__(self, t1):
        myHandler.t1 = t1
        server = HTTPServer(('', 8080), myHandler)
        server.serve_forever()

class myHandler(BaseHTTPRequestHandler):
    t1 = None
    def do_GET(self):
        self.send_response(200)
        self.send_header('Content-type','text/html')
        self.end_headers()
        self.wfile.write(self.t1.show()) #Doesnt work
        return

class main:
    def __init__(self):
        self.t1 = test()

        self.server = http_server(self.t1)

if __name__ == '__main__':
    m = main()
</snippet></ROW><ROW><id>18445704</id><snippet>sys.stdout = _rbdebugfile(sys.stdout.fileno())
</snippet></ROW><ROW><id>18445824</id><snippet>testify/test_discovery.py</snippet></ROW><ROW><id>18445824</id><snippet>    # it's not a list, it's not a bare module - let's see if it's an honest-to-god TestCaseBase
    elif isinstance(test_module, MetaTestCase) and (not '__test__' in test_module.__dict__ or bool(test_module.__test__)):
        ...
    # detect unittest test cases
    elif issubclass(test_module, unittest.TestCase) and (not '__test__' in test_module.__dict__ or bool(test_module.__test__)):
</snippet></ROW><ROW><id>18445824</id><snippet>__test__</snippet></ROW><ROW><id>18445824</id><snippet>__dict__</snippet></ROW><ROW><id>18445833</id><snippet>import os
if os.path.splitext(link)[1] not in ['.jpg', '.pdf', '.mp3']:
    print link
</snippet></ROW><ROW><id>18445833</id><snippet>splitext</snippet></ROW><ROW><id>18445833</id><snippet>&gt;&gt;&gt; os.path.splitext('http://www.example.com/path/to/filename.ext')
('http://www.example.com/path/to/filename', '.ext')
</snippet></ROW><ROW><id>18446129</id><snippet>c:\Users\myname.mydomain\AppData\Roaming\Mozilla\Firefox\Profiles\yoodw5zk.default-1375107931124\sessionstore.js</snippet></ROW><ROW><id>18446129</id><snippet>c:\Users\myname.mydomain\AppData\Roaming\Mozilla\Firefox\profiles.ini</snippet></ROW><ROW><id>18446129</id><snippet>sessionstore.js</snippet></ROW><ROW><id>18446129</id><snippet>json</snippet></ROW><ROW><id>18446129</id><snippet>'windows'</snippet></ROW><ROW><id>18446129</id><snippet>'tabs'</snippet></ROW><ROW><id>18446129</id><snippet>sessionstore.js</snippet></ROW><ROW><id>18446129</id><snippet>#!python3

import json

with open('sessionstore.js', encoding='utf-8') as f:
    content = json.load(f)

# The loaded content is a dictionary. List the keys first (console).
for k in content:
    print(k)

# Now list the content bound to the keys. As the console may not be capable
# to display all characters, write it to the file.
with open('out.txt', 'w', encoding='utf-8') as f:

    # Write the overview of the content.
    for k, v in content.items():
        # Write the key and the type of the value.
        f.write('\n\n{}:  {}\n'.format(k, type(v)))

        # The value could be of a list type, or just one item.
        if isinstance(v, list):
            for e in v:
                f.write('\t{}\n'.format(e))
        else:
            f.write('\t{}\n'.format(v))

    # Write the content of the tabs in each windows.
    f.write('\n\n=======================================================\n\n')
    windows = content['windows']
    for n, w in enumerate(windows, 1):  # the enumerate is used just for numbering the windows
        f.write('\n\tWindow {}:\n'.format(n))
        tabs = w['tabs']
        for tab in tabs:
            # The tab is a dictionary. Display only 'title' and 'url' from 
            # 'entries' subdictionary.
            e = tab['entries'][0]
            f.write('\t\t{}\n\t\t{}\n\n'.format(e['url'], e['title']))
</snippet></ROW><ROW><id>18446129</id><snippet>out.txt</snippet></ROW><ROW><id>18446129</id><snippet>out.txt</snippet></ROW><ROW><id>18446129</id><snippet>Window 1:
    http://www.cyrilmottier.com/
    Cyril Mottier

    http://developer.android.com/guide/components/fragments.html#CommunicatingWithActivity
    Fragments | Android Developers

    http://developer.android.com/guide/components/index.html
    App Components | Android Developers

    http://www.youtube.com/watch?v=ONaD1mB8r-A
    ▶ Introducing RoboSpice: A Robust Asynchronous Networking Library for Android - YouTube

    http://www.youtube.com/watch?v=5a91dBLX8Qc
    Rocking the Gradle with Hans Dockter - YouTube

    http://stackoverflow.com/questions/18439564/how-to-keep-track-of-webpages-opened-in-web-browser-using-python
    How to keep track of webpages opened in web-browser using Python? - Stack Overflow

    https://www.google.cz/search?q=Mozilla+firefox+list+of+open+tabs&amp;ie=utf-8&amp;oe=utf-8&amp;rls=org.mozilla:cs:official&amp;client=firefox-a&amp;gws_rd=cr
    Mozilla firefox list of open tabs - Hledat Googlem

    https://addons.mozilla.org/en-US/developers/docs/sdk/latest/dev-guide/tutorials/list-open-tabs.html
    List Open Tabs - Add-on SDK Documentation

    https://support.mozilla.org/cs/questions/926077
    list all tabs button not showing | Fórum podpory Firefoxu | Podpora Mozilly

    https://support.mozilla.org/cs/kb/scroll-through-your-tabs-quickly
    Scroll through your tabs quickly | Nápověda k Firefox
</snippet></ROW><ROW><id>18446221</id><snippet>os.path</snippet></ROW><ROW><id>18446221</id><snippet>os.path</snippet></ROW><ROW><id>18446221</id><snippet>import platform
platform.platform()
</snippet></ROW><ROW><id>18446221</id><snippet>os</snippet></ROW><ROW><id>18446221</id><snippet>import os.path</snippet></ROW><ROW><id>18446221</id><snippet>os.path.basename(path) # To get the name of the file with extension.
os.path.basename(path).split('.')[0] # To get just the name.
os.path.dirname(path) # To get the directory leading to the file.
</snippet></ROW><ROW><id>18446460</id><snippet>import webbrowser
print webbrowser._browsers # or print(webbrowser._browsers) for Python 3.x
</snippet></ROW><ROW><id>18446460</id><snippet>dict</snippet></ROW><ROW><id>18446460</id><snippet>{'windows-default': [&lt;class 'webbrowser.WindowsDefault'&gt;, None], 
    'c:\\program files\\internet explorer\\iexplore.exe': [None, &lt;webbrowser.BackgroundBrowser object at 0x01BAF6B0&gt;]
}
</snippet></ROW><ROW><id>18446460</id><snippet>'firefox'</snippet></ROW><ROW><id>18446460</id><snippet>'mozilla'</snippet></ROW><ROW><id>18446460</id><snippet>'firefox'</snippet></ROW><ROW><id>18446460</id><snippet>'chrome'</snippet></ROW><ROW><id>18446460</id><snippet>_iscommand(cmd)</snippet></ROW><ROW><id>18446460</id><snippet>%path%</snippet></ROW><ROW><id>18446460</id><snippet>_iscommand('firefox')</snippet></ROW><ROW><id>18446460</id><snippet>True</snippet></ROW><ROW><id>18446460</id><snippet>webbrowser.get('firefox)</snippet></ROW><ROW><id>18446460</id><snippet>&lt;webbrowser.BackgroundBrowser object at 0x01BDF7F0&gt;</snippet></ROW><ROW><id>18446460</id><snippet>webbrowser._iscommand("chrome")</snippet></ROW><ROW><id>18446460</id><snippet>False</snippet></ROW><ROW><id>18446460</id><snippet>webbrowser.get("chrome")</snippet></ROW><ROW><id>18446460</id><snippet>webbrowser</snippet></ROW><ROW><id>18446460</id><snippet>%path%</snippet></ROW><ROW><id>18446460</id><snippet>%path%</snippet></ROW><ROW><id>18446463</id><snippet>range</snippet></ROW><ROW><id>18446463</id><snippet>range()</snippet></ROW><ROW><id>18446463</id><snippet>if (lng != None) and (lat != None):
     range = 0.1       ###########
</snippet></ROW><ROW><id>18446463</id><snippet>&gt;&gt;&gt; range = 0.1
&gt;&gt;&gt; range()
Traceback (most recent call last):
  File "&lt;ipython-input-39-7b0c968826c1&gt;", line 1, in &lt;module&gt;
    range()
TypeError: 'float' object is not callable
</snippet></ROW><ROW><id>18446485</id><snippet>set</snippet></ROW><ROW><id>18446485</id><snippet>i['users']</snippet></ROW><ROW><id>18446485</id><snippet>O(num_users^2)</snippet></ROW><ROW><id>18446485</id><snippet>O(num_users)</snippet></ROW><ROW><id>18446485</id><snippet>i = a[1]</snippet></ROW><ROW><id>18446485</id><snippet>q = a[2]</snippet></ROW><ROW><id>18446485</id><snippet>i = a[2]</snippet></ROW><ROW><id>18446485</id><snippet>q = a[1]</snippet></ROW><ROW><id>18446485</id><snippet>from itertools import combinations, izip

data = db.collection.find()
a = list(data)

user_ids = [{user['id'] for user in i['users']} if 'users' in i else set()
            for i in a]

with open("edges.csv", "wb") as f:
    edges = csv.writer(f)
    for (i, i_ids), (q, q_ids) in combinations(izip(a, user_ids), 2):
        weight = len(i_ids &amp; q_ids)
        if weight &gt; 0:
            edges.writerow([i['id'], q['id'], weight])
            edges.writerow([q['id'], i['id'], weight])

with open("nodes.csv", "wb") as f:
    nodes = csv.writer(f)
    for i in a:
        nodes.writerow([
            i['id'],
            i['name'],
            i['latitude'],
            i['longitude'],
            len(i['users']),
            sum(len(p['photos']) for p in i['users']), # total number of photos
        ])
</snippet></ROW><ROW><id>18446493</id><snippet>HTML = """
html
html

html

code-start
code
code

code
code-end

"""

new_html = ""
is_code = False
for line in HTML.split('\n'):
    # disable empty line remover when code starts
    if line == 'code-start':
        is_code = True
    # check for empty line/is_code
    if is_code or line != '':
        new_html += line+'\n'
    # enable empty line remover when code ends
    if line == 'code-end':
        is_code = False

print new_html        
</snippet></ROW><ROW><id>18446534</id><snippet> # ...
 from novaclient import client as novaclient

 # ...

 nova = novaclient.Client("1.1", auth_url=credentials['auth-url'], username=credentials['username'], api_key=credentials['password'], project_id=credentials['tenant'])

 # ...

 with open( image_file ) as fimage:
            image = glance.images.create(name=image_name, is_public=True, disk_format="qcow2", container_format="bare", data=fimage, properties =  {"aaaa": "13", "'bbbbbb": "12"} )

             print nova.images.get(image.id).metadata # prints the correct metadata
</snippet></ROW><ROW><id>18446641</id><snippet>from distutils.core import setup
from distutils.extension import Extension
from Cython.Distutils import build_ext

setup(
    name = 'DyCppInterface',
    version = '1.0',
    author = 'Marcelo Salloum dos Santos',
    # The ext modules interface the cpp code with the python one:
    ext_modules=[
        Extension("rectangle",
            sources=["rectangle.pyx", "cpp_rect.cpp"], # Note, you can link against a c++ library instead of including the source
            include_dirs=[".","source" , "/opt/local/include/opencv", "/opt/local/include"],
            language="c++",
            library_dirs=['/opt/local/lib', 'source'],
            libraries=['opencv_core', 'LibCppOpenCV'])
    ],
    cmdclass = {'build_ext': build_ext},
)
</snippet></ROW><ROW><id>18446803</id><snippet>url(r'^file/vnc/$', 'myapp.views.vnc', name='vnc-view'),
</snippet></ROW><ROW><id>18446803</id><snippet>from django.views.decorators.http import require_POST

@require_POST
def vnc(request):
    ip = request.POST.get('ip', None)
    response = HttpResponse(ip, content_type='application/octet-stream')
    # If you don't want the file to be downloaded immediately, then remove next line
    response['Content-Disposition'] = 'attachment; filename="ip.vnc"'
    return response
</snippet></ROW><ROW><id>18446803</id><snippet>&lt;form method="POST" action="{% url 'vnc-view' %}"&gt;{% csrf_token %}
  &lt;input type="hidden" name="ip" value="127.0.0.1" /&gt;
  &lt;input type="submit" name="submit" value="Create VNC to 127.0.0.1" /&gt;
&lt;/form&gt;
</snippet></ROW><ROW><id>18446893</id><snippet>Requests</snippet></ROW><ROW><id>18446893</id><snippet>requests 2.0</snippet></ROW><ROW><id>18446893</id><snippet>urllib3</snippet></ROW><ROW><id>18446893</id><snippet>proxies</snippet></ROW><ROW><id>18446893</id><snippet>{protocol_of_sites_you_visit: proxy}</snippet></ROW><ROW><id>18446893</id><snippet>{"http": "socks5://127.0.0.1:9050"}</snippet></ROW><ROW><id>18446926</id><snippet>Python 2.2 (#28, Dec 21 2001, 12:21:22) [MSC 32 bit (Intel)] on win32
Type "help", "copyright", "credits" or "license" for more information.
&gt;&gt;&gt; class A(object): pass
...
&gt;&gt;&gt; class B(object): pass
...
&gt;&gt;&gt; class C(object): pass
...
&gt;&gt;&gt; class D(object): pass
...
&gt;&gt;&gt; class E(object): pass
...
&gt;&gt;&gt; class K1(A,B,C): pass
...
&gt;&gt;&gt; class K2(D,B,E): pass
...
&gt;&gt;&gt; class K3(D,A):   pass
...
&gt;&gt;&gt; class Z(K1,K2,K3): pass
...
&gt;&gt;&gt; Z.__mro__
(&lt;class '__main__.Z'&gt;, &lt;class '__main__.K1'&gt;, &lt;class '__main__.K3'&gt;, &lt;class '__m
ain__.A'&gt;, &lt;class '__main__.K2'&gt;, &lt;class '__main__.D'&gt;, &lt;class '__main__.B'&gt;, &lt;c
lass '__main__.C'&gt;, &lt;class '__main__.E'&gt;, &lt;type 'object'&gt;)
&gt;&gt;&gt;
</snippet></ROW><ROW><id>18446926</id><snippet>Z</snippet></ROW><ROW><id>18446926</id><snippet>Z K1 K3 A K2 D B C E object</snippet></ROW><ROW><id>18447217</id><snippet>class DbAbsLayer(object):

    def createSession(self):
        Session = sessionmaker()
        self.session = Session.configure(bind=self.engine)
</snippet></ROW><ROW><id>18447253</id><snippet>STATICFILES_DIRS</snippet></ROW><ROW><id>18447253</id><snippet>STATICFILES_DIRS = (
    os.path.join(BASE_DIR, "static"),
    '/var/www/static/',
)
</snippet></ROW><ROW><id>18447338</id><snippet>SpawnedRectangle</snippet></ROW><ROW><id>18447338</id><snippet>spawnedObjectDict[RectangleName] = SpawnedRectangle()
</snippet></ROW><ROW><id>18447338</id><snippet>SpawnedRectangle</snippet></ROW><ROW><id>18447603</id><snippet>import time
testDate = "Tuesday, February 23 2011 12:00:00 UTC"
today = time.strptime(testDate,"%A, %B %d %Y %H:%M:%S %Z")
print today
</snippet></ROW><ROW><id>18447686</id><snippet>def custom_sort(population):
    pop_dict = { ind.ID: ind for ind in population }

    start = []
    nones = []
    end = []
    for ind in population:
        if ind.mate is None:
            nones.append(ind)
        elif pop_dict[ind.mate] not in start:
            start.insert(0, ind)
            end.append(pop_dict[ind.mate])
    return start + nones + end
</snippet></ROW><ROW><id>18447760</id><snippet>python -m site
</snippet></ROW><ROW><id>18448044</id><snippet>import sys
from PySide import QtGui, QtCore

class Window(QtGui.QWidget):
    def __init__(self):
        super(Window, self).__init__()
        self.grid = QtGui.QGridLayout()
        big_one = QtGui.QPushButton('Big one')
        big_one.setSizePolicy(QtGui.QSizePolicy.Expanding, QtGui.QSizePolicy.Expanding)
        self.grid.addWidget(big_one, 0, 0, 2, 2)
        self.grid.addWidget(QtGui.QPushButton('Ajouter'), 0, 2, 1, 1)
        self.grid.addWidget(QtGui.QPushButton('Enlever'), 1, 2, 1, 1)
        self.grid.addWidget(QtGui.QLabel("Chemin du lecteur :"), 2, 0, 1, 1)
        self.grid.addWidget(QtGui.QLineEdit(), 2, 1, 1, 1)
        self.grid.addWidget(QtGui.QPushButton("Selectionner"), 2, 2, 1, 1)
        self.grid.addWidget(QtGui.QCheckBox("Some long text in french"), 3, 0, 1, 3)
        self.grid.addWidget(QtGui.QCheckBox("An even longer text in french than the first one"), 4, 0, 1, 3)
        self.grid.addWidget(QtGui.QLabel("Something, something, something"), 5, 0, 1, 2)
        self.grid.addWidget(QtGui.QSpinBox(), 5, 2, 1, 1)
        self.setLayout(self.grid)

app = QtGui.QApplication(sys.argv)
w = Window()
w.show()
sys.exit(app.exec_())
</snippet></ROW><ROW><id>18448076</id><snippet>tasks.py</snippet></ROW><ROW><id>18448112</id><snippet>import copy 

a = range(11)

b = []

for i in a:
    b.append(i+1)

print b
#Out[10]: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]

c = copy.deepcopy(b)
# Here, what I expect is to safely save "b" and work on its copy.

c.insert(-1,10.5)

print c
#Out[13]: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 10.5, 11]

c.remove(11)
print c

#Out[15]: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 10.5]

# So far everything is right: I inserted and removed what I wanted.
# But then, when I check on my "backed-up b", it has been modified:

print b
#Out[16]: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 10.5]

# On the other hand, "a" remains the same; it seems the propagation do not affect
# "loop-parenthood":

print a
</snippet></ROW><ROW><id>18448175</id><snippet>next</snippet></ROW><ROW><id>18448175</id><snippet>next((i for i, item in enumerate(l) if item.a is None), None)
</snippet></ROW><ROW><id>18448175</id><snippet>None</snippet></ROW><ROW><id>18448175</id><snippet>&gt;&gt;&gt; l=[Any(1,3),Any(2,4),Any(1,2),Any(None,6),Any('hello',6), Any(1,'ChuckNorris'),Any(1,2)]
&gt;&gt;&gt; next((i for i, item in enumerate(l) if item.a is None), None)
3
</snippet></ROW><ROW><id>18448312</id><snippet>PyJavaClass</snippet></ROW><ROW><id>18448312</id><snippet>PyJavaType</snippet></ROW><ROW><id>18448622</id><snippet>from some_module import some_object</snippet></ROW><ROW><id>18448622</id><snippet>some_object</snippet></ROW><ROW><id>18448622</id><snippet>some_module</snippet></ROW><ROW><id>18448622</id><snippet>some_object</snippet></ROW><ROW><id>18448723</id><snippet>%</snippet></ROW><ROW><id>18448723</id><snippet>%%%%%% this is a comment

{resurl, %(resturl)s}
</snippet></ROW><ROW><id>18448723</id><snippet>%</snippet></ROW><ROW><id>18448723</id><snippet>%%</snippet></ROW><ROW><id>18448723</id><snippet>%</snippet></ROW><ROW><id>18448723</id><snippet>&gt;&gt;&gt; val = '''\
... %%%%%% this is a comment
... 
... {resurl, %(resturl)s}
... '''
&gt;&gt;&gt; print val % {"resturl": "http://localhost:500/"}    
%%% this is a comment

{resurl, http://localhost:500/}
</snippet></ROW><ROW><id>18448747</id><snippet>data = data[0:9]</snippet></ROW><ROW><id>18448874</id><snippet>    def pulse(width, value=1):
        ''' Returns a vector of (width+1) integer ones. '''
        return (width+1)*[value]

    def stepconv(vector, width):
        ''' Computes the discrete convolution of vector with a "unit"
            pulse of given width.

            Formula: result[i] = Sum[j=0 to width] 1*vector[i-j]
            Where 0 &lt;= i &lt;= len(vector)+width-1, and the "1*" is the value
            of the implied unit pulse function: pulse[j] = 1 for 0&lt;=j&lt;=width.
        '''
        result = width*[0] + vector;
        for i in range(len(vector)):
            result[i] = sum(result[i:i+width+1])
        for i in range(len(vector), len(result)):
            result[i] = sum(result[i:])
        return result
</snippet></ROW><ROW><id>18448874</id><snippet>class ConstrainedRandom(object):
    def __init__(self, ranges=None, target=None, seed=None):
        self._rand = random.Random(seed)
        if ranges != None: self.setrange(ranges)
        if target != None: self.settarget(target)

    def setrange(self, ranges):
        self._ranges = ranges
        self._nranges = len(self._ranges)
        self._nmin, self._nmax = zip(*self._ranges)
        self._minsum = sum(self._nmin)
        self._maxsum = sum(self._nmax)
        self._zmax = [y-x for x,y in self._ranges]
        self._rconv = self._nranges * [None]
        self._rconv[-1] = pulse(self._zmax[-1])
        for k in range(self._nranges-1, 0, -1):
            self._rconv[k-1] = stepconv(self._rconv[k], self._zmax[k-1])

    def settarget(self, target):
        self._target = target

    def next(self, target=None):
        k = target if target != None else self._target
        k = k - self._minsum;
        N = self._rconv[0][k]
        seq = self._rand.randint(0,N-1)
        result = self._nranges*[0]
        for i in range(len(result)-1):
            cv = self._rconv[i+1]
            r_i = 0
            while k &gt;= len(cv):
                r_i += 1
                k -= 1
            while cv[k] &lt;= seq:
                seq -= cv[k]
                r_i += 1
                k -= 1
            result[i] = r_i
        result[-1] = k # t
        return [x+y for x,y in zip(result, self._nmin)]

    # end clss ConstrainedRandom
</snippet></ROW><ROW><id>18448874</id><snippet>ranges = [(low, high), (low, high), ...]
cr = ConstrainedRandom(ranges, target)
seq = cr.next();
print(seq)
assert sum(seq)==target

seq = cr.next(); # get then get the next one.
</snippet></ROW><ROW><id>18448874</id><snippet>&gt;&gt;&gt; pulse(5)
[1, 1, 1, 1, 1, 1]
&gt;&gt;&gt; K1 = pulse (5)
&gt;&gt;&gt; K2 = stepconv(K1, 7)
&gt;&gt;&gt; K3 = stepconv(K2, 3)
&gt;&gt;&gt; K1
[1, 1, 1, 1, 1, 1]
&gt;&gt;&gt; K2
[1, 2, 3, 4, 5, 6, 6, 6, 5, 4, 3, 2, 1]
&gt;&gt;&gt; K3
[1, 3, 6, 10, 14, 18, 21, 23, 23, 21, 18, 14, 10, 6, 3, 1]
&gt;&gt;&gt; K3[10]
18
&gt;&gt;&gt; sum(K3)
192
&gt;&gt;&gt; (5+1)*(7+1)*(3+1)
192
</snippet></ROW><ROW><id>18448874</id><snippet>&gt;&gt;&gt; R23 = stepconv(pulse(7),3)
&gt;&gt;&gt; R23
[1, 2, 3, 4, 4, 4, 4, 4, 3, 2, 1]
&gt;&gt;&gt; len(R23)
11
</snippet></ROW><ROW><id>18448874</id><snippet>&gt;&gt;&gt; R23[10:10-5-1:-1]
[1, 2, 3, 4, 4, 4]
&gt;&gt;&gt; sum(R23[10:10-5-1:-1])
18
</snippet></ROW><ROW><id>18448996</id><snippet>xlwt</snippet></ROW><ROW><id>18448996</id><snippet>import xlwt

dic = contar_Repetidas("Some Text Here")

wb = xlwt.Workbook()
ws = wb.add_sheet("Your Sheet")

count = 0
for word, num in dic.items():
    count += 1
    ws.write(count, 1, word)
    ws.write(count, 2, num)

wb.save("/Path/To/Save/Example.xls")
</snippet></ROW><ROW><id>18449063</id><snippet>tifffile</snippet></ROW><ROW><id>18449063</id><snippet>&gt;&gt;&gt; import tifffile as tiff
&gt;&gt;&gt; a = tiff.imread('Untitled-1.tif')
&gt;&gt;&gt; a.shape
(100L, 100L, 3L)
&gt;&gt;&gt; a.dtype
dtype('uint16')
</snippet></ROW><ROW><id>18449063</id><snippet>&gt;&gt;&gt; tiff.imsave('new.tiff', a)
</snippet></ROW><ROW><id>18449349</id><snippet>setTitle_</snippet></ROW><ROW><id>18449349</id><snippet>def clicked_(self, notification):
    self.menuItem.setTitle_("Clicked!")
</snippet></ROW><ROW><id>18449349</id><snippet>def finishLaunching(self):
    # ...

    self.timer = NSTimer.alloc().initWithFireDate_interval_target_selector_userInfo_repeats_(NSDate.date(), 1.0, self, 'tick:', None, True)
    NSRunLoop.currentRunLoop().addTimer_forMode_(self.timer, NSDefaultRunLoopMode)
    self.timer.fire()


def tick_(self, arg):
    self.menuItem.setTitle_("Tick %d!" % int(time.time()))
</snippet></ROW><ROW><id>18449389</id><snippet>final = cv2.medianBlur(source, 3)
</snippet></ROW><ROW><id>18449389</id><snippet>y</snippet></ROW><ROW><id>18449389</id><snippet>for x in range(1,y-1):</snippet></ROW><ROW><id>18449389</id><snippet>y</snippet></ROW><ROW><id>18449389</id><snippet>x</snippet></ROW><ROW><id>18449389</id><snippet>shape</snippet></ROW><ROW><id>18449389</id><snippet>for y in range(1,source.shape[0]-1):
    for x in range(1,source.shape[1]-1):
</snippet></ROW><ROW><id>18449485</id><snippet>l = [item for item in my_list if not do_I_suppress(item)]
</snippet></ROW><ROW><id>18449534</id><snippet>The problem I'm running into is, the old email gets over-written by the new one before it has been verified.</snippet></ROW><ROW><id>18449534</id><snippet># views.py snippet
# because we are using the same 'email' variable to add new email addresses
# 'self.object.email' will be saved with the new provided value
# to prevent this from happening, manually set the 'email' variable to the value
# retrieved from the DB
except Account.DoesNotExist:
            verifystring = get_random_string()
            self.object.email = old_email
            self.object.new_email = new_email
</snippet></ROW><ROW><id>18449548</id><snippet>def something(c):
    #eclipse does not know what c is
    assert isinstance(c,MyClass)
    #now eclipse knows that c is an instance of MyClass
    c. #autocomplete
</snippet></ROW><ROW><id>18449729</id><snippet>##Continued from above
###Now as three separate arrays
x1 = mu + sigma*np.random.randn(990,1)
x2 = mu + sigma*np.random.randn(980,1)
x3 = mu + sigma*np.random.randn(1000,1)

#Stack the data
plt.figure()
plt.hist([x1,x2,x3], bins, stacked=True, normed = True)
plt.show()
</snippet></ROW><ROW><id>18449740</id><snippet>c</snippet></ROW><ROW><id>18449740</id><snippet>c=...</snippet></ROW><ROW><id>18449740</id><snippet>newstr += ...</snippet></ROW><ROW><id>18449744</id><snippet>encoding</snippet></ROW><ROW><id>18449744</id><snippet>json.dumps()</snippet></ROW><ROW><id>18449744</id><snippet>message</snippet></ROW><ROW><id>18449744</id><snippet>ensure_ascii=False</snippet></ROW><ROW><id>18449744</id><snippet>ssc = zlib.compress(ss.encode('utf8'))
</snippet></ROW><ROW><id>18449744</id><snippet>json.loads()</snippet></ROW><ROW><id>18449785</id><snippet>&lt;locations&gt;</snippet></ROW><ROW><id>18449785</id><snippet>&lt;location&gt;</snippet></ROW><ROW><id>18449785</id><snippet>&lt;location&gt;</snippet></ROW><ROW><id>18449785</id><snippet>os.chdir('c:/Users/ME/Documents/XML_Parasing_Python/')
origname = 'vs_original_M.xml'
master = ET.parse(origname)
for path in os.listdir('.'):
    if path != origname and os.path.splitext(path)[-1] == '.xml':
        child = ET.parse(path)
        root = child.getroot()
        last_location_parent = master.find('.//*[{}][last()]'.format(root.tag))
        last_location_parent.append(root)
master.write('master.xml')
</snippet></ROW><ROW><id>18449785</id><snippet>location</snippet></ROW><ROW><id>18449785</id><snippet>append</snippet></ROW><ROW><id>18449785</id><snippet>find</snippet></ROW><ROW><id>18449785</id><snippet>.//</snippet></ROW><ROW><id>18449785</id><snippet>//</snippet></ROW><ROW><id>18449785</id><snippet>*</snippet></ROW><ROW><id>18449785</id><snippet>[location]</snippet></ROW><ROW><id>18449785</id><snippet>format</snippet></ROW><ROW><id>18449785</id><snippet>location</snippet></ROW><ROW><id>18449785</id><snippet>find</snippet></ROW><ROW><id>18449785</id><snippet>[last()]</snippet></ROW><ROW><id>18449785</id><snippet>if foo: return True</snippet></ROW><ROW><id>18449785</id><snippet>else: return False</snippet></ROW><ROW><id>18449785</id><snippet>return foo</snippet></ROW><ROW><id>18449785</id><snippet>return HART_filename.endswith('.xml')</snippet></ROW><ROW><id>18449785</id><snippet>os.path.splitext</snippet></ROW><ROW><id>18449785</id><snippet>for number in range(1, xml_list_length)</snippet></ROW><ROW><id>18449785</id><snippet>number = 1</snippet></ROW><ROW><id>18449785</id><snippet>number += 1</snippet></ROW><ROW><id>18449785</id><snippet>for</snippet></ROW><ROW><id>18449785</id><snippet>vs_original_M.xml</snippet></ROW><ROW><id>18449785</id><snippet>listdir</snippet></ROW><ROW><id>18449785</id><snippet>range(len(foo))</snippet></ROW><ROW><id>18449785</id><snippet>foo</snippet></ROW><ROW><id>18449785</id><snippet>for element in foo</snippet></ROW><ROW><id>18449785</id><snippet>for index, element in enumerate(foo)</snippet></ROW><ROW><id>18449785</id><snippet>if foo == True</snippet></ROW><ROW><id>18449785</id><snippet>True</snippet></ROW><ROW><id>18449785</id><snippet>74</snippet></ROW><ROW><id>18449785</id><snippet>if foo</snippet></ROW><ROW><id>18449785</id><snippet>== True</snippet></ROW><ROW><id>18449785</id><snippet>is_xml</snippet></ROW><ROW><id>18449785</id><snippet>endswith</snippet></ROW><ROW><id>18449785</id><snippet>==</snippet></ROW><ROW><id>18450280</id><snippet>import re
from lxml import etree
import requests

URL = "http://timesofindia.indiatimes.com/entertainment/movie-reviews/hindi/Madras-Cafe-movie-review/movie-review/21975443.cms"

response = requests.get(URL)

parser = etree.HTMLParser()
root = etree.fromstring(response.text, parser=parser)
rating_text = root.find('.//div[@id="sshow"]/table/tr/td[2]/div[1]/script[1]').text  # prints fbcriticRating="4"; 
print re.search("\d+", rating_text).group(0)  # prints 4
</snippet></ROW><ROW><id>18450280</id><snippet>requests</snippet></ROW><ROW><id>18450280</id><snippet>urllib2</snippet></ROW><ROW><id>18450290</id><snippet>numpy</snippet></ROW><ROW><id>18450290</id><snippet>import numpy as np
d = np.zeros((2,3))

&gt;&gt;&gt; d
    [[ 0.  0.  0.]
     [ 0.  0.  0.]]
</snippet></ROW><ROW><id>18450290</id><snippet>d = zeros(2,3);
</snippet></ROW><ROW><id>18450290</id><snippet>d = np.empty((2,3))
</snippet></ROW><ROW><id>18450290</id><snippet>d = []</snippet></ROW><ROW><id>18450290</id><snippet>d = []
d.append(0)
d.append(1)
&gt;&gt;&gt; d                                                                     
[0, 1]
</snippet></ROW><ROW><id>18450290</id><snippet>d = []                                                                
d.append(range(0,2))                                                    
d.append(range(2,4))                                                  
&gt;&gt;&gt; d                                                                     
[[0, 1], [2, 3]]
</snippet></ROW><ROW><id>18450307</id><snippet>multiprocessing.pool</snippet></ROW><ROW><id>18450307</id><snippet>from multiprocessing.pool import ThreadPool</snippet></ROW><ROW><id>18450307</id><snippet>ThreadPool</snippet></ROW><ROW><id>18450307</id><snippet>from collections import defaultdict
from multiprocessing.pool import ThreadPool


class MyEvent:
    handlers = defaultdict(list)
    _pool = ThreadPool(5)

    @classmethod
    def setup(cls, notificationname, functionname):
        cls.handlers[notificationname].append(functionname)

    @classmethod
    def runonnotification(cls, notificationname, *args):
        thisfunclist = cls.handlers[notificationname]
        for func in thisfunclist:
            cls._pool.apply_async(func, args=args)


class SimpleExample(object):
    def __init__(self, a=1, b=2):
        SimpleExample.a = a
        SimpleExample.b = b
        MyEvent.setup('greater than 100', self.printerror)
        MyEvent.setup('dont do negative', self.negation)
        MyEvent.setup('many values recieved', self.handlemultipleupdates)

    def updation(self, updateval):
        if updateval &gt; 100:
            MyEvent.runonnotification('greater than 100', updateval)
            self.a = updateval
        if updateval &lt; 0:
            MyEvent.runonnotification('dont do negative')

    def multipleupdates(self, a, b):
        MyEvent.runonnotification('many values recieved', a, b)

    def printerror(self, data):
        print 'something has gone wrong ', data

    def negation(self):
        print 'negation enter'
        self.a = -self.a

    def handlemultipleupdates(self, a, b):
        print 'wow'
        self.a = a
        self.b = b

s = SimpleExample()
for x in [-50, 0, 1, 50, 70, 101]:
    s.updation(x)

MyEvent._pool.close()
MyEvent._pool.join()
</snippet></ROW><ROW><id>18450362</id><snippet>import sqlite3
db = sqlite3.connect("settings.DATABASES['default']['HOST']")
cursor = db.cursor() # No direct equivalent to MySQLdb.cursors.DictCursor
cursor.execute("SELECT something FROM sometable WHERE somecondition = 'somevariable';")
...
</snippet></ROW><ROW><id>18450634</id><snippet>-1</snippet></ROW><ROW><id>18450634</id><snippet>static double cFx(PyObject *fx, double x){
    PyObject *pyresult = PyObject_CallFunction(fx, "d", x);
    if (pyresult == NULL) return -1;
    double cppresult = PyFloat_AsDouble(pyresult);
    Py_DECREF(pyresult);
    if (PyErr_Occurred()) return -1;
    return cppresult;
}
</snippet></ROW><ROW><id>18450634</id><snippet>PyObject_CallFunction</snippet></ROW><ROW><id>18450680</id><snippet>os.getcwd()</snippet></ROW><ROW><id>18450680</id><snippet>__file__</snippet></ROW><ROW><id>18450680</id><snippet>import os.path

here = os.path.dirname(os.path.abspath(__file__))
</snippet></ROW><ROW><id>18450680</id><snippet>here</snippet></ROW><ROW><id>18450680</id><snippet>chdir()</snippet></ROW><ROW><id>18450680</id><snippet>os.path</snippet></ROW><ROW><id>18450875</id><snippet>&gt;&gt;&gt; to_exclude = {1, 2}
&gt;&gt;&gt; vector = ['a', 'b', 'c', 'd']
&gt;&gt;&gt; vector2 = [element for i, element in enumerate(vector) if i not in to_exclude]
</snippet></ROW><ROW><id>18450875</id><snippet>filter</snippet></ROW><ROW><id>18450875</id><snippet>enumerate</snippet></ROW><ROW><id>18450875</id><snippet>in</snippet></ROW><ROW><id>18450875</id><snippet>Set</snippet></ROW><ROW><id>18450875</id><snippet>Sequence</snippet></ROW><ROW><id>18450875</id><snippet>set</snippet></ROW><ROW><id>18450875</id><snippet>Set</snippet></ROW><ROW><id>18450875</id><snippet>Sequence</snippet></ROW><ROW><id>18450875</id><snippet>Container</snippet></ROW><ROW><id>18450875</id><snippet>Container</snippet></ROW><ROW><id>18450875</id><snippet>Set</snippet></ROW><ROW><id>18450875</id><snippet>Sequence</snippet></ROW><ROW><id>18450961</id><snippet>d = dict(zip(array_of_strings, array_of_samples))
</snippet></ROW><ROW><id>18450961</id><snippet>from itertools import izip
d = dict(izip(array_of_strings, array_of_samples))
</snippet></ROW><ROW><id>18451131</id><snippet>#!/usr/bin/env python
#-*- coding:utf-8 -*-

#---------
# IMPORT
#---------
import sys, os

from PyQt4 import QtGui, QtCore

#---------
# DEFINE
#---------
class MyListWidget(QtGui.QListWidget):
    dropped = QtCore.pyqtSignal(list)

    def __init__(self, type, parent=None):
        super(MyListWidget, self).__init__(parent)

        self.setAcceptDrops(True)

    def dragEnterEvent(self, event):
        if event.mimeData().hasUrls:
            event.accept()

        else:
            event.ignore()

    def dragMoveEvent(self, event):
        if event.mimeData().hasUrls:
            event.setDropAction(QtCore.Qt.CopyAction)
            event.accept()

        else:
            event.ignore()

    def dropEvent(self, event):
        if event.mimeData().hasUrls:
            event.setDropAction(QtCore.Qt.CopyAction)
            event.accept()

            filePaths = [
                str(url.toLocalFile())
                for url in event.mimeData().urls()
            ]

            self.dropped.emit(filePaths)

        else:
            event.ignore()

class MyWindow(QtGui.QWidget):
    def __init__(self, parent=None):
        super(MyWindow, self).__init__(parent)

        self.listWidgetFiles = MyListWidget(self)
        self.listWidgetFiles.dropped.connect(self.on_listWidgetFiles_dropped)

        self.layoutVertical = QtGui.QVBoxLayout(self)
        self.layoutVertical.addWidget(self.listWidgetFiles)

    @QtCore.pyqtSlot(list)
    def on_listWidgetFiles_dropped(self, filePaths):
        for filePath in filePaths:
            if os.path.exists(filePath):
                QtGui.QListWidgetItem(filePath, self.listWidgetFiles)

#---------
# MAIN
#---------
if __name__ == "__main__":        
    app = QtGui.QApplication(sys.argv)
    app.setApplicationName('MyWindow')

    main = MyWindow()
    main.resize(333, 111)
    main.show()

    sys.exit(app.exec_())
</snippet></ROW><ROW><id>18451256</id><snippet>#===inside driver.py===
import connections

params = parseFile(sys.argv) #get parameters from the csv file that is passed to the command line
connections.connect(params)  #pass them to whatever method you need to call from connections
</snippet></ROW><ROW><id>18451256</id><snippet>#connections.py
MY_SERVER = ??? #WHAT DO I SET THIS TO?

class Connection:
    def __init__(self):
        self.server = MY_SERVER

def connect():
    connection = Connection() #create a new connection object
</snippet></ROW><ROW><id>18451256</id><snippet>MY_SERVER</snippet></ROW><ROW><id>18451256</id><snippet>#connections.py
class Connection:
    def __init__(self, server):
        self.server = server

def connect(server):
    connection = Connection(server) #create a new connection object with the server passed to the method
</snippet></ROW><ROW><id>18451256</id><snippet>connections.connect</snippet></ROW><ROW><id>18451468</id><snippet>urllib2</snippet></ROW><ROW><id>18451468</id><snippet>selenium</snippet></ROW><ROW><id>18451580</id><snippet>import MySQLdb as mdb
con = mdb.connect('host', 'user', 'pass', 'dbname')
cur = con.cursor()
con.set_character_set('utf8')
cur.execute('SET NAMES utf8;')
cur.execute('SET CHARACTER SET utf8;')
cur.execute('SET character_set_connection=utf8;')
</snippet></ROW><ROW><id>18451587</id><snippet>l = []
for key, value in locals().items():
    if callable(value) and value.__module__ == __name__:
        l.append(key)
print l
</snippet></ROW><ROW><id>18451587</id><snippet>from os.path import join

def square(x):
    return x*x

def cube(x):
    return x**3

l = []
for key, value in locals().items():
    if callable(value) and value.__module__ == __name__:
        l.append(key)
print l
</snippet></ROW><ROW><id>18451587</id><snippet>['square', 'cube']
</snippet></ROW><ROW><id>18451587</id><snippet>def square(x):
    return x*x

def encapsulated():
    from os.path import join

    def cube(x):
        return x**3

    l = []
    for key, value in locals().items():
        if callable(value) and value.__module__ == __name__:
            l.append(key)
    print l

encapsulated()
</snippet></ROW><ROW><id>18451587</id><snippet>['cube']
</snippet></ROW><ROW><id>18451738</id><snippet>import re

s = ('Printed: 2013-07-12 05:09 PM '
     'QC Product: PROT2 CON '
     'Level: Level 3 '
     'Priority: QC Method RF '
     'Result 174 IU/mL '
     'Lot Number: 3BQH01 '
     'Sample ID: 3BQH01 '
     'Instrument ID: DV330681 '
     'QC Range 158.0 - 236.0 '
     'Comment Completed: 2013-07-12 17:09:14 '
     'Comment: Trigger: Manual Trigger '
     'Operator C160487AUR '
     'Time of Run 2013-07-12 17:09:14 '
     'Reagent 13049MA')

rgx = re.compile('QC Product *: *(.+?)(?&lt;=\S) +'
                 'Level *: *(.+?)(?&lt;=\S) +'
                 'Priority *:.+?'
                 'Sample ID *: *(.+?)(?&lt;=\S) +'
                 'Instrument ID')

print rgx.search(s).groups()
</snippet></ROW><ROW><id>18451745</id><snippet>def myfunc(a):
  try:
    return a / 2.5 + 5
  except TypeError:
    return float('nan')

print myfunc('whatever')
</snippet></ROW><ROW><id>18452028</id><snippet>%S</snippet></ROW><ROW><id>18452028</id><snippet>%P</snippet></ROW><ROW><id>18452028</id><snippet>return (match is not None)</snippet></ROW><ROW><id>18452115</id><snippet>import pandas as pd
index=pd.date_range('2011-1-1 00:00:03', '2011-12-31 23:50:03', freq='10min')
df=pd.DataFrame(np.random.rand(len(index),3),index=index)
df2 = df.groupby(lambda x: x.month)
for key, group in df2:
    group.plot()
</snippet></ROW><ROW><id>18452115</id><snippet>import pandas as pd

num_ticks = 15

index=pd.date_range('2011-9-1 00:00:03', '2012-09-01  00:00:03', freq='10min')
df=pd.DataFrame(np.random.rand(len(index),3),index=index)
df2 = df.groupby(lambda x: x.month)
for key, group in df2:
    step = len(group) / num_ticks
    reset = group.reset_index()
    reset.plot()
    plt.xticks(reset.index[::step],
               reset['index'][::step].apply(
                    lambda x: x.strftime('%Y-%m-%d')).values,
               rotation=70)
</snippet></ROW><ROW><id>18452220</id><snippet>cd</snippet></ROW><ROW><id>18452220</id><snippet>prefix</snippet></ROW><ROW><id>18452220</id><snippet>run()</snippet></ROW><ROW><id>18452220</id><snippet>sudo()</snippet></ROW><ROW><id>18452220</id><snippet>run('some_random_command')</snippet></ROW><ROW><id>18452220</id><snippet>cd=/folder/one</snippet></ROW><ROW><id>18452220</id><snippet>prefix=change_path_command</snippet></ROW><ROW><id>18452220</id><snippet>cd=/folder/two</snippet></ROW><ROW><id>18452220</id><snippet>cd</snippet></ROW><ROW><id>18452220</id><snippet>cd</snippet></ROW><ROW><id>18452220</id><snippet>cd /folder/two &amp;&amp; change_path_command &amp;&amp; some_random_command</snippet></ROW><ROW><id>18452220</id><snippet>cd</snippet></ROW><ROW><id>18452220</id><snippet>prefix</snippet></ROW><ROW><id>18452220</id><snippet>fabric.state.env</snippet></ROW><ROW><id>18452220</id><snippet>_prefix_commands()</snippet></ROW><ROW><id>18452220</id><snippet>run()</snippet></ROW><ROW><id>18452220</id><snippet>sudo()</snippet></ROW><ROW><id>18452220</id><snippet>_run_command()</snippet></ROW><ROW><id>18452268</id><snippet>$ sudo port selfupdate
$ sudo port upgrade outdated
</snippet></ROW><ROW><id>18452363</id><snippet>bdist_egg</snippet></ROW><ROW><id>18452363</id><snippet>setuptools</snippet></ROW><ROW><id>18452363</id><snippet>setup.py</snippet></ROW><ROW><id>18452363</id><snippet>distutils</snippet></ROW><ROW><id>18452363</id><snippet>from setuptools import setup
</snippet></ROW><ROW><id>18452717</id><snippet>Mb = x</snippet></ROW><ROW><id>18452717</id><snippet>numpy.linalg.lstsq</snippet></ROW><ROW><id>18452717</id><snippet>numpy.linalg.svd</snippet></ROW><ROW><id>18452717</id><snippet>M= U S V*</snippet></ROW><ROW><id>18452717</id><snippet>x</snippet></ROW><ROW><id>18452717</id><snippet>x = V Sp U* b</snippet></ROW><ROW><id>18452717</id><snippet>Sp</snippet></ROW><ROW><id>18452717</id><snippet>S</snippet></ROW><ROW><id>18452717</id><snippet>U</snippet></ROW><ROW><id>18452717</id><snippet>V*</snippet></ROW><ROW><id>18452717</id><snippet>M</snippet></ROW><ROW><id>18452717</id><snippet>s</snippet></ROW><ROW><id>18452717</id><snippet>z=V*x</snippet></ROW><ROW><id>18452717</id><snippet>z_i</snippet></ROW><ROW><id>18452717</id><snippet>z</snippet></ROW><ROW><id>18452717</id><snippet>i &gt; rank(M)</snippet></ROW><ROW><id>18452717</id><snippet>x_j</snippet></ROW><ROW><id>18452717</id><snippet>z_i</snippet></ROW><ROW><id>18452717</id><snippet>i &lt;= rank(M)</snippet></ROW><ROW><id>18452717</id><snippet>x</snippet></ROW><ROW><id>18452717</id><snippet>import numpy as np

M = np.array([[1,0,0,0,2],[0,0,3,0,0],[0,0,0,0,0],[0,4,0,0,0]])

#We perform singular-value decomposition of M
U, s, V = np.linalg.svd(M)

S = np.zeros(M.shape,dtype = np.float64)

b = np.array([1,2,3,4])

m = min(M.shape)

#We generate the matrix S (Sigma) from the singular values s
S[:m,:m] = np.diag(s)

#We calculate the pseudo-inverse of S
Sp = S.copy()

for m in range(0,m):
  Sp[m,m] = 1.0/Sp[m,m] if Sp[m,m] != 0 else 0

Sp = np.transpose(Sp)

Us = np.matrix(U).getH()
Vs = np.matrix(V).getH()

print "U:\n",U
print "V:\n",V
print "S:\n",S

print "U*:\n",Us
print "V*:\n",Vs
print "Sp:\n",Sp

#We obtain the solution to M*x = b using the singular-value decomposition of the matrix
print "numpy.linalg.svd solution:",np.dot(np.dot(np.dot(Vs,Sp),Us),b)

#This will print:
#numpy.linalg.svd solution: [[ 0.2         1.          0.66666667  0.          0.4       ]]

#We compare the solution to np.linalg.lstsq
x,residuals,rank,s =  np.linalg.lstsq(M,b)

print "numpy.linalg.lstsq solution:",x
#This will print:
#numpy.linalg.lstsq solution: [ 0.2         1.          0.66666667  0.          0.4       ]

#We determine the significant (i.e. non-arbitrary) components of x

Vs_significant = Vs[np.nonzero(s)]

print "Significant variables:",np.nonzero(np.sum(np.abs(Vs_significant),axis = 0))[1]

#This will print:
#Significant variables: [[0 1 2 4]]
#(i.e. x_3 can be chosen arbitrarily without altering the result)
</snippet></ROW><ROW><id>18452784</id><snippet>import matplotlib
matplotlib.use('Agg')
import matplotlib.pyplot as plt
plt.plot(x1,y1,'go',x2,y2,'bo')
plt.savefig(filename)
plt.clf()
</snippet></ROW><ROW><id>18452784</id><snippet>pyplot</snippet></ROW><ROW><id>18453049</id><snippet>89435</snippet></ROW><ROW><id>18453049</id><snippet>[2]</snippet></ROW><ROW><id>18453049</id><snippet>9</snippet></ROW><ROW><id>18453049</id><snippet>4</snippet></ROW><ROW><id>18453049</id><snippet>[0]</snippet></ROW><ROW><id>18453049</id><snippet>[1]</snippet></ROW><ROW><id>18453049</id><snippet>rcv = port.read(5)
value = (rcv)
myString = str(value)
</snippet></ROW><ROW><id>18453049</id><snippet>rcv</snippet></ROW><ROW><id>18453049</id><snippet>value</snippet></ROW><ROW><id>18453049</id><snippet>str</snippet></ROW><ROW><id>18453049</id><snippet>myString = str(port.read(5))</snippet></ROW><ROW><id>18453049</id><snippet>str()</snippet></ROW><ROW><id>18453049</id><snippet>import serial
import time

port = serial.Serial("/dev/ttyAMA0", baudrate=600, timeout= 3.0)

while True:
    rcv = port.read(5)
    b = open("/var/www/lampu1.txt","a")
    try:
        b.write(rcv[0])
    except IndexError:
        pass
    b.close()
</snippet></ROW><ROW><id>18453049</id><snippet>pass</snippet></ROW><ROW><id>18453049</id><snippet>b.open()</snippet></ROW><ROW><id>18453049</id><snippet>b.close()</snippet></ROW><ROW><id>18453049</id><snippet>while</snippet></ROW><ROW><id>18453101</id><snippet>#!/bin/python

import urllib2, sys, logging, time, errno, unittest

# Variables
s = time.strftime('%Y%m%d%H%M%S')
f = open("list.txt",'r')

# Create file text file for importing into database
class Logger(object):
    def __init__(self):
        self.terminal = sys.stdout
        self.log = open("assets_"+s+".txt", "a")

    def write(self, message):
        self.terminal.write(message)
        self.log.write(message)  

# Start capture of screen output for database file
sys.stdout = Logger()
print "UID, ASSET, STATUS, REDIRECT, DATE/TIME"

# Loop to capture URL status and redirect information
for assets in f.readlines():
    url = assets.split()
    if len(url) &gt; 1:
        try:
            http = 'http://' + url[1]           
            http_connection = urllib2.urlopen(http, timeout=5)
        except IOError, e:
            if e.errno == None:         
                try:
                    www = 'http://www.' + url[1]
                    http_connection = urllib2.urlopen(www, timeout=5)
                except IOError, e:
                    print url[0], ",", url[1].rstrip("\n"), ",", "", ",", e.errno, ",", (s)
                else:
                    print url[0], ",", url[1].rstrip("\n"), ",", http_connection.getcode(), ",", http_connection.geturl(), ",", (s)
        else:
            print url[0], ",", url[1].rstrip("\n"), ",", http_connection.getcode(), ",", http_connection.geturl(), ",", (s)
</snippet></ROW><ROW><id>18453131</id><snippet>np.histogram</snippet></ROW><ROW><id>18453131</id><snippet>barh</snippet></ROW><ROW><id>18453131</id><snippet>x = np.random.rand(100)
plt.hist(x, orientation='horizontal')
plt.show()
</snippet></ROW><ROW><id>18453226</id><snippet>print_elapsed_time</snippet></ROW><ROW><id>18453226</id><snippet>route</snippet></ROW><ROW><id>18453226</id><snippet>route</snippet></ROW><ROW><id>18453226</id><snippet>print_elapsed_time</snippet></ROW><ROW><id>18453226</id><snippet>@print_elapsed_time</snippet></ROW><ROW><id>18453226</id><snippet>route</snippet></ROW><ROW><id>18453226</id><snippet>print_elapsed_time</snippet></ROW><ROW><id>18453226</id><snippet>wrapper</snippet></ROW><ROW><id>18453272</id><snippet>package_dir = {'':'my_project'},
</snippet></ROW><ROW><id>18453272</id><snippet>my_project</snippet></ROW><ROW><id>18453272</id><snippet>find_packages('my_project')</snippet></ROW><ROW><id>18453272</id><snippet>my_project</snippet></ROW><ROW><id>18453272</id><snippet>my_project/my_project</snippet></ROW><ROW><id>18453272</id><snippet>ez_setup</snippet></ROW><ROW><id>18453272</id><snippet>find_packages</snippet></ROW><ROW><id>18453272</id><snippet>packages = ['my_project']</snippet></ROW><ROW><id>18453272</id><snippet>sudo python setup.py alias release register sdist bdist_egg upload</snippet></ROW><ROW><id>18453272</id><snippet>python setup.py sdist</snippet></ROW><ROW><id>18453272</id><snippet>pip install .</snippet></ROW><ROW><id>18453272</id><snippet>pip install dist/my_project-0.0.1.tar.gz</snippet></ROW><ROW><id>18453272</id><snippet>setup.py</snippet></ROW><ROW><id>18453272</id><snippet>find_packages('my_project')</snippet></ROW><ROW><id>18453272</id><snippet>print(find_packages('my_project'))</snippet></ROW><ROW><id>18453272</id><snippet>setup(…)</snippet></ROW><ROW><id>18453346</id><snippet>replaceWith()</snippet></ROW><ROW><id>18453346</id><snippet>from bs4 import BeautifulSoup, Tag


text = "text &lt;strong&gt;ha&lt;/strong&gt; ... text"

soup = BeautifulSoup(text)

for tag in soup.find_all('strong'):
    tag.replaceWith('')

print soup.get_text() 
</snippet></ROW><ROW><id>18453346</id><snippet>text  ... text
</snippet></ROW><ROW><id>18453346</id><snippet>tag.decompose()</snippet></ROW><ROW><id>18453346</id><snippet>tag.replaceWith('')</snippet></ROW><ROW><id>18453398</id><snippet>prune bin</snippet></ROW><ROW><id>18453398</id><snippet>directory = 'bin'
if not os.path.exists(directory):
    os.makedirs(directory)

subprocess.call(['make', '-C', 'src'])
</snippet></ROW><ROW><id>18453398</id><snippet>pip install whatever</snippet></ROW><ROW><id>18453398</id><snippet>bin</snippet></ROW><ROW><id>18453398</id><snippet>setup(
...
data_files=[('bin', ['bin/binaries'])],
)
</snippet></ROW><ROW><id>18453404</id><snippet>for i,line in enumerate(fin)</snippet></ROW><ROW><id>18453404</id><snippet>enumerate</snippet></ROW><ROW><id>18453404</id><snippet>fin.next()</snippet></ROW><ROW><id>18453404</id><snippet>fin.next</snippet></ROW><ROW><id>18453404</id><snippet>L1 = [1,2,3,4]
L2 = ['a', 'b', 'c', 'd']
print zip(L1, L2)
</snippet></ROW><ROW><id>18453404</id><snippet>[(1, 'a'), (2, 'b'), (3, 'c'), (4, 'd')] 
</snippet></ROW><ROW><id>18453404</id><snippet>with open('test.txt','r') as fin:
    print zip(fin, fin)
</snippet></ROW><ROW><id>18453404</id><snippet>[('1 2 3 4\n' , 'a b c d \n')]
</snippet></ROW><ROW><id>18453418</id><snippet>from scipy import sparse
M = sparse.lil_matrix((num_of_vectors, max_vector_size))

for i,v in enumerate(vectors):
     M[i, :v.size] = v
</snippet></ROW><ROW><id>18453418</id><snippet>lil_matrix</snippet></ROW><ROW><id>18453418</id><snippet>csr_matrix</snippet></ROW><ROW><id>18453481</id><snippet>In [11]: s1.isnull()
Out[11]: 
0    False
1     True
dtype: bool

In [12]: s1.isnull() == s2.isnull()
Out[12]: 
0    True
1    True
dtype: bool
</snippet></ROW><ROW><id>18453481</id><snippet>In [13]: s1[s1.notnull()]
Out[13]: 
0    1
dtype: float64

In [14]: s1[s1.notnull()] == s2[s2.notnull()]
Out[14]: 
0    True
dtype: bool
</snippet></ROW><ROW><id>18453481</id><snippet>In [15]: (s1.isnull() == s2.isnull()).all() and (s1[s1.notnull()] == s2[s2.notnull()]).all()
Out[15]: True
</snippet></ROW><ROW><id>18453481</id><snippet>assert_series_equal</snippet></ROW><ROW><id>18453481</id><snippet>pandas.util.testing</snippet></ROW><ROW><id>18453481</id><snippet>In [21]: from pandas.util.testing import assert_series_equal

In [22]: assert_series_equal(s1, s2)
</snippet></ROW><ROW><id>18453567</id><snippet>&gt;&gt;&gt; [mydict[x] for x in mykeys]
[3, 1]
</snippet></ROW><ROW><id>18453603</id><snippet>forms.IntegerField</snippet></ROW><ROW><id>18453603</id><snippet>models.IntegerField</snippet></ROW><ROW><id>18453603</id><snippet>expiration_month</snippet></ROW><ROW><id>18453603</id><snippet>select</snippet></ROW><ROW><id>18453603</id><snippet>maxlength</snippet></ROW><ROW><id>18453615</id><snippet>foo</snippet></ROW><ROW><id>18453615</id><snippet>def foo(a, b=None, c=None, d=None):
    if not b: b = 1
    if not c: c = 2
    if not d: d = 3
</snippet></ROW><ROW><id>18453615</id><snippet>None</snippet></ROW><ROW><id>18453615</id><snippet>''</snippet></ROW><ROW><id>18453615</id><snippet>0</snippet></ROW><ROW><id>18453615</id><snippet>False</snippet></ROW><ROW><id>18453615</id><snippet>[]</snippet></ROW><ROW><id>18453615</id><snippet>None</snippet></ROW><ROW><id>18453615</id><snippet>None</snippet></ROW><ROW><id>18453615</id><snippet>def foo(a, b=None, c=None, d=None):
    if b is None: b = 1
    if c is None: c = 2
    if d is None: d = 3
</snippet></ROW><ROW><id>18453735</id><snippet>any()</snippet></ROW><ROW><id>18453735</id><snippet>if any(bread[2] &gt; 80 for bread in breadsticks):
    print("You have entered too many breadcrumbs")
</snippet></ROW><ROW><id>18453735</id><snippet>True</snippet></ROW><ROW><id>18453735</id><snippet>breadsticks</snippet></ROW><ROW><id>18453735</id><snippet>for bread in breadsticks:
    print(bread[2])
</snippet></ROW><ROW><id>18453999</id><snippet> In [3]: x = np.random.rand(1e6)

 In [15]: %timeit x**2
 100 loops, best of 3: 11.9 ms per loop

 In [16]: %timeit x*x
 100 loops, best of 3: 12.7 ms per loop

 In [17]: %timeit x**3
 10 loops, best of 3: 132 ms per loop

 In [18]: %timeit x*x*x
 10 loops, best of 3: 27.2 ms per loop

 In [19]: %timeit x**4
 10 loops, best of 3: 132 ms per loop

 In [20]: %timeit x*x*x*x
 10 loops, best of 3: 42.4 ms per loop

 In [21]: %timeit x**10
 10 loops, best of 3: 132 ms per loop

 In [22]: %timeit x*x*x*x*x*x*x*x*x*x
 10 loops, best of 3: 137 ms per loop

 In [24]: %timeit x**15
 10 loops, best of 3: 132 ms per loop

 In [25]: %timeit x*x*x*x*x*x*x*x*x*x*x*x*x*x*x
 1 loops, best of 3: 212 ms per loop
</snippet></ROW><ROW><id>18453999</id><snippet>x**2</snippet></ROW><ROW><id>18453999</id><snippet>In [26]: %timeit x**16
10 loops, best of 3: 132 ms per loop

In [27]: %timeit x*x*x*x*x*x*x*x*x*x*x*x*x*x*x*x
1 loops, best of 3: 225 ms per loop

In [28]: def tosixteenth(x):
   ....:     x2 = x*x
   ....:     x4 = x2*x2
   ....:     x8 = x4*x4
   ....:     x16 = x8*x8
   ....:     return x16
   ....:

In [29]: %timeit tosixteenth(x)
10 loops, best of 3: 49.5 ms per loop
</snippet></ROW><ROW><id>18453999</id><snippet>In [93]: %paste
def smartintexp(x, exp):
    result = np.ones(len(x))
    curexp = np.array(x)
    while True:
        if exp%2 == 1:
            result *= curexp
        exp &gt;&gt;= 1
        if not exp: break
        curexp *= curexp
    return result
## -- End pasted text --

In [94]: x
Out[94]:
array([ 0.0163407 ,  0.57694587,  0.47336487, ...,  0.70255032,
        0.62043303,  0.0796748 ])

In [99]: x**21
Out[99]:
array([  3.01080670e-38,   9.63466181e-06,   1.51048544e-07, ...,
         6.02873388e-04,   4.43193256e-05,   8.46721060e-24])

In [100]: smartintexp(x, 21)
Out[100]:
array([  3.01080670e-38,   9.63466181e-06,   1.51048544e-07, ...,
         6.02873388e-04,   4.43193256e-05,   8.46721060e-24])

In [101]: %timeit x**21
10 loops, best of 3: 132 ms per loop

In [102]: %timeit smartintexp(x, 21)
10 loops, best of 3: 70.7 ms per loop
</snippet></ROW><ROW><id>18453999</id><snippet>In [106]: %timeit x**32
10 loops, best of 3: 131 ms per loop

In [107]: %timeit smartintexp(x, 32)
10 loops, best of 3: 57.4 ms per loop
</snippet></ROW><ROW><id>18453999</id><snippet>In [97]: %timeit x**63
10 loops, best of 3: 133 ms per loop

In [98]: %timeit smartintexp(x, 63)
10 loops, best of 3: 110 ms per loop
</snippet></ROW><ROW><id>18453999</id><snippet>In [115]: %timeit x**511
10 loops, best of 3: 135 ms per loop

In [114]: %timeit smartintexp(x, 511)
10 loops, best of 3: 192 ms per loop
</snippet></ROW><ROW><id>18454015</id><snippet>class templateElement(object):
    # all the class stuff here

def somefunction():
    from element import element
    # needs element.py's element object
</snippet></ROW><ROW><id>18454042</id><snippet>("a" or "e" or "i" or "o" or "u")
</snippet></ROW><ROW><id>18454042</id><snippet>"a"</snippet></ROW><ROW><id>18454042</id><snippet>"a"</snippet></ROW><ROW><id>18454042</id><snippet>if not original[i] in ("a","e","i","o","u") :
</snippet></ROW><ROW><id>18454042</id><snippet>if original[i] != "a" and original[i] != "e" and original[i] != "i" and original[i] != "o" and original[i] != "u" :
</snippet></ROW><ROW><id>18454042</id><snippet>("a" or "e" or "i" or "o" or "u")</snippet></ROW><ROW><id>18454042</id><snippet>"a"</snippet></ROW><ROW><id>18454042</id><snippet>or</snippet></ROW><ROW><id>18454042</id><snippet>0</snippet></ROW><ROW><id>18454042</id><snippet>else:
    break
</snippet></ROW><ROW><id>18454042</id><snippet>if</snippet></ROW><ROW><id>18454129</id><snippet>sqlPrefix = "select x,y in myTable where myVar in ('%s', '%s')" % (var1, var2)
</snippet></ROW><ROW><id>18454166</id><snippet>In [51]: index
Out[51]: 
[datetime.datetime(2013, 8, 26, 18, 33, 48, 990974),
 datetime.datetime(2013, 8, 26, 18, 33, 49, 990974),
 datetime.datetime(2013, 8, 26, 18, 33, 50, 990974),
 datetime.datetime(2013, 8, 26, 18, 33, 51, 990974),
 datetime.datetime(2013, 8, 26, 18, 33, 52, 990974)]

In [52]: a = pd.Series([1,4,5,7,8], index = index)

In [53]: b = pd.Series([2,3,6,7,8], index = index)

In [54]: a
Out[54]: 
2013-08-26 18:33:48.990974    1
2013-08-26 18:33:49.990974    4
2013-08-26 18:33:50.990974    5
2013-08-26 18:33:51.990974    7
2013-08-26 18:33:52.990974    8
dtype: int64

In [55]: b
Out[55]: 
2013-08-26 18:33:48.990974    2
2013-08-26 18:33:49.990974    3
2013-08-26 18:33:50.990974    6
2013-08-26 18:33:51.990974    7
2013-08-26 18:33:52.990974    8
dtype: int64

In [56]: df = DataFrame({ 'a' : a, 'b' : b })

In [57]: df
Out[57]: 
                            a  b
2013-08-26 18:33:48.990974  1  2
2013-08-26 18:33:49.990974  4  3
2013-08-26 18:33:50.990974  5  6
2013-08-26 18:33:51.990974  7  7
2013-08-26 18:33:52.990974  8  8
</snippet></ROW><ROW><id>18454166</id><snippet>In [9]: df.max(1)
Out[9]: 
2013-08-26 18:33:48.990974    2
2013-08-26 18:33:49.990974    4
2013-08-26 18:33:50.990974    6
2013-08-26 18:33:51.990974    7
2013-08-26 18:33:52.990974    8
Freq: S, dtype: int64

In [10]: df.min(1)
Out[10]: 
2013-08-26 18:33:48.990974    1
2013-08-26 18:33:49.990974    3
2013-08-26 18:33:50.990974    5
2013-08-26 18:33:51.990974    7
2013-08-26 18:33:52.990974    8
Freq: S, dtype: int64
</snippet></ROW><ROW><id>18454166</id><snippet>In [11]: df.idxmax(1)
Out[11]: 
2013-08-26 18:33:48.990974    b
2013-08-26 18:33:49.990974    a
2013-08-26 18:33:50.990974    b
2013-08-26 18:33:51.990974    a
2013-08-26 18:33:52.990974    a
Freq: S, dtype: object

In [12]: df.idxmin(1)
Out[12]: 
2013-08-26 18:33:48.990974    a
2013-08-26 18:33:49.990974    b
2013-08-26 18:33:50.990974    a
2013-08-26 18:33:51.990974    a
2013-08-26 18:33:52.990974    a
Freq: S, dtype: object
</snippet></ROW><ROW><id>18454254</id><snippet>random</snippet></ROW><ROW><id>18454254</id><snippet>import random

ref = []

for image in images:
    n = random.randint(0, 3), random.randint(0, 3)
    while n not in ref:
        n = random.randint(0, 3), random.randint(0, 3)
    ref.append(n)
    image.grid(row=n[0], column=n[1])
</snippet></ROW><ROW><id>18454438</id><snippet>set_visible</snippet></ROW><ROW><id>18454438</id><snippet>an = gca().annotate('TEST', xy=(.1, .1), xytext=(.1 + 15,.1), arrowprops=dict(facecolor='#404040'))
gca().set_xlim([0, 30])
draw() 
plt.pause(5)
an.set_visible(False)
draw()
plt.pause(5)
an.set_visible(True)
draw()
</snippet></ROW><ROW><id>18454443</id><snippet>os.path.join()</snippet></ROW><ROW><id>18454443</id><snippet>import os

mydic = {'key1':['va1','va2'], 'key2':['vb1','vb2']}


BASE_DIR = os.path.join('path', 'to', 'dir')
ADD_DIR = 'dir2'
for k, v in mydic.iteritems():
    for item in v:
        print os.path.join(BASE_DIR, k, ADD_DIR, item)
</snippet></ROW><ROW><id>18454443</id><snippet>/path/to/dir/key2/dir2/vb1
/path/to/dir/key2/dir2/vb2
/path/to/dir/key1/dir2/va1
/path/to/dir/key1/dir2/va2
</snippet></ROW><ROW><id>18454553</id><snippet>subprocess.Popen</snippet></ROW><ROW><id>18454553</id><snippet>@@ -1,32 +1,40 @@
 import time
 import threading
 import subprocess

+lock = threading.Lock()
+
 def subprocesscall():
+    lock.acquire()
     p = subprocess.Popen(
         ['ls', '-l'],
         stdin=subprocess.PIPE,
         stdout=subprocess.PIPE,
         stderr=subprocess.PIPE,
         )
+    lock.release()
     time.sleep(2) # simulate the Popen call takes some time to complete.
     out, err = p.communicate()
     print 'succeeding command in thread:', threading.current_thread().ident

 def failingsubprocesscall():
     try:
+        lock.acquire()
         p = subprocess.Popen(
             ['thiscommandsurelydoesnotexist'],
             stdin=subprocess.PIPE,
             stdout=subprocess.PIPE,
             stderr=subprocess.PIPE,
             )
     except Exception as e:
         print 'failing command:', e, 'in thread:', threading.current_thread().ident
+    finally:
+        lock.release()
+

 print 'main thread is:', threading.current_thread().ident

 subprocesscall_thread = threading.Thread(target=subprocesscall)
 subprocesscall_thread.start()
 failingsubprocesscall()
 subprocesscall_thread.join()
</snippet></ROW><ROW><id>18454553</id><snippet>Popen</snippet></ROW><ROW><id>18454553</id><snippet>pipe_cloexec</snippet></ROW><ROW><id>18454553</id><snippet>_get_handles</snippet></ROW><ROW><id>18454553</id><snippet>def pipe_cloexec(self):
    """Create a pipe with FDs set CLOEXEC."""
    # Pipes' FDs are set CLOEXEC by default because we don't want them
    # to be inherited by other subprocesses: the CLOEXEC flag is removed
    # from the child's FDs by _dup2(), between fork() and exec().
    # This is not atomic: we would need the pipe2() syscall for that.
    r, w = os.pipe()
    self._set_cloexec_flag(r)
    self._set_cloexec_flag(w)
    return r, w
</snippet></ROW><ROW><id>18454565</id><snippet>('http', 'https')
</snippet></ROW><ROW><id>18454565</id><snippet>self.https</snippet></ROW><ROW><id>18454565</id><snippet>1</snippet></ROW><ROW><id>18454565</id><snippet>('http', 'https')[1]
</snippet></ROW><ROW><id>18454565</id><snippet>https</snippet></ROW><ROW><id>18454565</id><snippet>bool</snippet></ROW><ROW><id>18454565</id><snippet>int</snippet></ROW><ROW><id>18454565</id><snippet>In [1]: t = ('http', 'https')

In [2]: t[0]
Out[2]: 'http'

In [3]: t[1]
Out[3]: 'https'

In [4]: https_setting = True

In [5]: int(https_setting)
Out[5]: 1

In [6]: t[bool(https_setting)]
Out[6]: 'https'

In [7]: True.__class__.__bases__
Out[7]: (int,)
</snippet></ROW><ROW><id>18454565</id><snippet>'^ '</snippet></ROW><ROW><id>18454809</id><snippet>textwrap</snippet></ROW><ROW><id>18454809</id><snippet>file = b64_data
file72 = textwrap.fill(b64_data, 72)
open("/Users/kyle/Desktop/test.txt", "w").write(file72)
</snippet></ROW><ROW><id>18454809</id><snippet>split_len</snippet></ROW><ROW><id>18454809</id><snippet>write</snippet></ROW><ROW><id>18454809</id><snippet>organize</snippet></ROW><ROW><id>18454809</id><snippet>write</snippet></ROW><ROW><id>18454809</id><snippet>None</snippet></ROW><ROW><id>18454809</id><snippet>def organize(f):
    result = ''
    for a in split_len(f, 72):
        if result: result += '\n'
        result += a
</snippet></ROW><ROW><id>18454809</id><snippet>def organize(f):
    return '\n'.join(f)
</snippet></ROW><ROW><id>18454809</id><snippet>write</snippet></ROW><ROW><id>18454809</id><snippet>with open("/Users/kyle/Desktop/test.txt", "w") as f:
    for a in split_len(file, 72):
        f.write(a + '\n')
</snippet></ROW><ROW><id>18454809</id><snippet>writelines</snippet></ROW><ROW><id>18454809</id><snippet>split_len</snippet></ROW><ROW><id>18454809</id><snippet>\n</snippet></ROW><ROW><id>18454809</id><snippet>writelines</snippet></ROW><ROW><id>18454809</id><snippet>with</snippet></ROW><ROW><id>18454809</id><snippet>with open("/Users/kyle/Desktop/test.txt", "w") as f:
    f.write(file72)
</snippet></ROW><ROW><id>18454809</id><snippet>organize</snippet></ROW><ROW><id>18455018</id><snippet>/</snippet></ROW><ROW><id>18455018</id><snippet>tag</snippet></ROW><ROW><id>18455018</id><snippet># tag url in blog/urls.py
url(r'^tag/(?P&lt;tag_text&gt;\w+)/$', views.tag, name='tag'),

# include in project/urls.py
url(r'^blog/', include('blog.urls')),
</snippet></ROW><ROW><id>18455135</id><snippet>map(lambda item: item.blog, tag_list)
</snippet></ROW><ROW><id>18455185</id><snippet>from django.conf.urls import patterns, include, url
from . import views

from django.contrib import admin
admin.autodiscover()

urlpatterns = patterns('',
    url(r'^admin/', include(admin.site.urls)),
    url(r'^login/', views.loginview),
    url(r'^auth/', views.auth_and_login),
    url(r'^$', views.index),
)
</snippet></ROW><ROW><id>18455223</id><snippet>#file 1: steps.py
def step1(input_files):
  # step 1 code goes here
  print 'step 1 complete'
  return

def step2(input_files):
  # step 2 code goes here
    print 'step 2 complete'
    return output # optionally return a derivative here

#...and so on
</snippet></ROW><ROW><id>18455223</id><snippet>#file 2: analyze.py
import steps
files_to_process = ["raster1.tif", "raster2.tif", "raster3.tif"]

steps.step1(files_to_process)

#steps.step2(files_to_process) # uncomment this when you're ready for step 2
</snippet></ROW><ROW><id>18455236</id><snippet>doc.ShowRevisions=0
</snippet></ROW></DATA>