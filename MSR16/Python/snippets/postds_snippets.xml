<?xml version="1.0" encoding="UTF-8" standalone="no"?><DATA><ROW><id>20501122</id><snippet>np.outer</snippet></ROW><ROW><id>20501122</id><snippet>&gt;&gt;&gt; x = np.arange(3)
&gt;&gt;&gt; y = np.arange(4)
&gt;&gt;&gt; np.outer(x, y)
array([[0, 0, 0, 0],
       [0, 1, 2, 3],
       [0, 2, 4, 6]])
&gt;&gt;&gt; 
</snippet></ROW><ROW><id>20501122</id><snippet>&gt;&gt;&gt; x = np.arange(3)
&gt;&gt;&gt; y = np.arange(4)
&gt;&gt;&gt; x[..., None] * y[None, ...]
array([[0, 0, 0, 0],
       [0, 1, 2, 3],
       [0, 2, 4, 6]])
&gt;&gt;&gt; 
</snippet></ROW><ROW><id>20501122</id><snippet>def f(x, y):
    return x * y
</snippet></ROW><ROW><id>20501122</id><snippet>&gt;&gt;&gt; f(x[..., None], y[None, ...])
array([[0, 0, 0, 0],
       [0, 1, 2, 3],
       [0, 2, 4, 6]])
&gt;&gt;&gt; 
</snippet></ROW><ROW><id>20501122</id><snippet>np.exp(np.outer(x, y))
</snippet></ROW><ROW><id>20501122</id><snippet>np.exp(x[..., None] * y[None, ...])
</snippet></ROW><ROW><id>20501810</id><snippet>None</snippet></ROW><ROW><id>20501810</id><snippet>def fixLength(lst, length):
    return (lst + [None] * length)[:length]
</snippet></ROW><ROW><id>20501835</id><snippet>import random
from operator import mul

class Node:
    __slots__ = ['w', 'v', 'tw']
    def __init__(self, w, v, tw):
        self.w, self.v, self.tw = w, v, tw

def rws_heap(items):
    h = [None]
    for w, v in items:
        h.append(Node(w, v, w))
    for i in range(len(h) - 1, 1, -1):
        h[i&gt;&gt;1].tw += h[i].tw
    return h

def rws_heap_pop(h):
    gas, i = h[1].tw * random.random(), 1
    while gas &gt; h[i].w:
        gas -= h[i].w
        i &lt;&lt;= 1
        if gas &gt; h[i].tw:
            gas -= h[i].tw
            i += 1
    w, v = h[i].w, h[i].v
    h[i].w = 0
    while i:
        h[i].tw -= w
        i &gt;&gt;= 1
    return v

def random_weighted_sample_no_replacement(items, n):
    heap = rws_heap(items)
    for i in range(n):
        yield rws_heap_pop(heap)

def random_weighted_sample_no_replacements_inverse_weights(mapping, n):
    keys, values = zip(*mapping.items())
    total = reduce(mul, (v + 1 for v in values))
    weights = (total / (v + 1) for v in values)
    heap = rws_heap(zip(weights, keys))
    for i in xrange(n):
        yield rws_heap_pop(heap)
</snippet></ROW><ROW><id>20501835</id><snippet>&gt;&gt;&gt; list(random_weighted_sample_no_replacements_inverse_weights(d, 3))
[9, 11, 8]
&gt;&gt;&gt; list(random_weighted_sample_no_replacements_inverse_weights(d, 3))
[8, 6, 9]
&gt;&gt;&gt; list(random_weighted_sample_no_replacements_inverse_weights(d, 3))
[4, 8, 5]
&gt;&gt;&gt; list(random_weighted_sample_no_replacements_inverse_weights(d, 3))
[4, 10, 11]
&gt;&gt;&gt; list(random_weighted_sample_no_replacements_inverse_weights(d, 3))
[4, 9, 10]
&gt;&gt;&gt; list(random_weighted_sample_no_replacements_inverse_weights(d, 3))
[5, 10, 8]
&gt;&gt;&gt; list(random_weighted_sample_no_replacements_inverse_weights(d, 3))
[6, 4, 5]
</snippet></ROW><ROW><id>20501835</id><snippet>8</snippet></ROW><ROW><id>20501835</id><snippet>5</snippet></ROW><ROW><id>20501835</id><snippet>7</snippet></ROW><ROW><id>20501835</id><snippet>11</snippet></ROW><ROW><id>20501844</id><snippet>def process_packet(packet, num_bytes):
    packet[:] = packet[num_bytes:len(packet)]
    print packet

&gt;&gt;&gt; pkt = [1,2,3,4,5]
&gt;&gt;&gt; process_packet(pkt, 2)
[3, 4, 5]
&gt;&gt;&gt; print pkt
[3, 4, 5]
</snippet></ROW><ROW><id>20501844</id><snippet>packet</snippet></ROW><ROW><id>20501885</id><snippet>if</snippet></ROW><ROW><id>20501885</id><snippet>if(str(type(tcp_connect_scan_resp))=="&lt;type 'NoneType'&gt;"):
</snippet></ROW><ROW><id>20501885</id><snippet>tcp_connect_scan_resp</snippet></ROW><ROW><id>20501885</id><snippet>isinstance()</snippet></ROW><ROW><id>20501885</id><snippet>None</snippet></ROW><ROW><id>20501885</id><snippet>if foo is None
</snippet></ROW><ROW><id>20501885</id><snippet>type()</snippet></ROW><ROW><id>20501885</id><snippet>__repr__()</snippet></ROW><ROW><id>20501885</id><snippet>&gt;&gt;&gt; foo = type(42)
&gt;&gt;&gt; foo
&lt;type 'int'&gt;
</snippet></ROW><ROW><id>20501885</id><snippet>'&lt;type 'int'&gt;'</snippet></ROW><ROW><id>20501885</id><snippet>int</snippet></ROW><ROW><id>20501885</id><snippet>&gt;&gt;&gt; type(42) == int
True
&gt;&gt;&gt; type(42) == "&lt;type 'int'&gt;"
False
</snippet></ROW><ROW><id>20501885</id><snippet>matplotlib</snippet></ROW><ROW><id>20501885</id><snippet>numpy</snippet></ROW><ROW><id>20501909</id><snippet>with</snippet></ROW><ROW><id>20501909</id><snippet>{{ with forms|get:'Foot And Mouth Disease' as item }}
{{ item.element }}
{{ endwith }}
</snippet></ROW><ROW><id>20502367</id><snippet>Configuration(package_name).to_dict()</snippet></ROW><ROW><id>20502367</id><snippet>packages=[package_name]</snippet></ROW><ROW><id>20502367</id><snippet>setup()</snippet></ROW><ROW><id>20502367</id><snippet>config_dict</snippet></ROW><ROW><id>20502367</id><snippet>setup()</snippet></ROW><ROW><id>20502367</id><snippet>setup()</snippet></ROW><ROW><id>20502367</id><snippet>setup(version='1.1-5',
      description='Python wrappers for the GLMNET package',
      author='David Warde-Farley',
      author_email='dwf@cs.toronto.edu',
      url='github.com/dwf/glmnet-python',
      license='GPL2',
      requires=['NumPy (&gt;= 1.3)'],
      **config_dict)
</snippet></ROW><ROW><id>20502367</id><snippet>packages</snippet></ROW><ROW><id>20502402</id><snippet>diff = abs(guess - random_number)
if diff &gt;= 50:
    print("Really cold!")
elif diff &gt;= 40:
    print("Cold.")
...
elif diff &gt;= 5:
    print("Getting really hot!")
</snippet></ROW><ROW><id>20502402</id><snippet>hot_str = {
    0: "You guessed it!",
    1: "Extremely hot!",
    10: "Frozen cold!",
    }

print(hot_str[heat(diff)])
</snippet></ROW><ROW><id>20502556</id><snippet>from django.core.serializers.json import DjangoJSONEncoder
def get_total(request):
    total= models.Poll.objects.extra({'date': "DATE(date)"}).values('date').annotate(total=Count('id'))
    return HttpResponse(json.dumps(list(total), cls=DjangoJSONEncoder),content_type='application/json')
</snippet></ROW><ROW><id>20502585</id><snippet>~ $ brew search pypy
pypy
</snippet></ROW><ROW><id>20502585</id><snippet>~ $ brew versions pypy
Warning: brew-versions is unsupported and may be removed soon.
Please use the homebrew-versions tap instead:
https://github.com/Homebrew/homebrew-versions
2.2.0    git checkout 4d471b1 /usr/local/Library/Formula/pypy.rb
2.1.0    git checkout ff5dd19 /usr/local/Library/Formula/pypy.rb
2.0.2    git checkout 58b36e9 /usr/local/Library/Formula/pypy.rb
2.0.1    git checkout 82b72d3 /usr/local/Library/Formula/pypy.rb
2.0      git checkout 280581d /usr/local/Library/Formula/pypy.rb
1.9      git checkout 28557b8 /usr/local/Library/Formula/pypy.rb
1.8      git checkout 93bda7d /usr/local/Library/Formula/pypy.rb
1.7      git checkout eee60ad /usr/local/Library/Formula/pypy.rb
1.6.0    git checkout b9b1f35 /usr/local/Library/Formula/pypy.rb
1.5.0    git checkout d0c75a9 /usr/local/Library/Formula/pypy.rb
1.4.1    git checkout 46c553a /usr/local/Library/Formula/pypy.rb
1.4      git checkout 61dd587 /usr/local/Library/Formula/pypy.rb
1.3      git checkout a546a1f /usr/local/Library/Formula/pypy.rb
1.2      git checkout 89de8bb /usr/local/Library/Formula/pypy.rb
</snippet></ROW><ROW><id>20502585</id><snippet>~ $ ll ~/ | grep pypy
drwxr-xr-x@  9 squiddly  staff    306 Nov 27 07:42 pypy-2.2.1-osx64
</snippet></ROW><ROW><id>20502585</id><snippet># Put pypy on my path
PATH=$PATH:$HOME/pypy-2.2.1-osx64/bin
export PATH
</snippet></ROW><ROW><id>20502585</id><snippet>$ curl -O http://python-distribute.org/distribute_setup.py
$ curl -O https://raw.github.com/pypa/pip/master/contrib/get-pip.py
$ ./pypy-2.1/bin/pypy distribute_setup.py
$ ./pypy-2.1/bin/pypy get-pip.py
$ ./pypy-2.1/bin/pip install pygments  # for example
</snippet></ROW><ROW><id>20502596</id><snippet>re.search</snippet></ROW><ROW><id>20502596</id><snippet>&gt;&gt;&gt; from re import search
&gt;&gt;&gt; a = '(abcd: fgh 234) (abcd: d89 7j6) (pqrs: ..1000000002.) (xyz: 0983)'
&gt;&gt;&gt; search("\(abcd:\s(.+?)\)", a).group(1)
'fgh 234'
&gt;&gt;&gt;
</snippet></ROW><ROW><id>20502596</id><snippet>\(     # Opening parenthesis
abcd:  # abcd:
\s     # Space
(.+?)  # One or more characters captured non-greedily
\)     # Closing parenthsis
</snippet></ROW><ROW><id>20502651</id><snippet>pygame.image.save(img, "image.jpg")
</snippet></ROW><ROW><id>20502784</id><snippet>re.escape</snippet></ROW><ROW><id>20502784</id><snippet>def transform(s):
    return re.compile(re.escape(s))
</snippet></ROW><ROW><id>20502786</id><snippet>Queue.Queue</snippet></ROW><ROW><id>20502786</id><snippet>    self.event = Event()
    self.taskInfos = []
</snippet></ROW><ROW><id>20502786</id><snippet>    self.taskInfos = Queue.Queue()
</snippet></ROW><ROW><id>20502786</id><snippet>import Queue</snippet></ROW><ROW><id>20502786</id><snippet>    self.taskInfos.put((msg, task))
</snippet></ROW><ROW><id>20502786</id><snippet>    msg, task = self.taskInfos.get()
</snippet></ROW><ROW><id>20502786</id><snippet>.get()</snippet></ROW><ROW><id>20502786</id><snippet>.get()</snippet></ROW><ROW><id>20502786</id><snippet>Event</snippet></ROW><ROW><id>20502786</id><snippet>Event.clear()</snippet></ROW><ROW><id>20502786</id><snippet>the queue is empty
thread 1 does len(self.taskInfo) == 0, and loses its timeslice
thread 2 does self.taskInfos.append((msg, task))
         and does self.event.set()
         and loses its timeslice
thread 1 resumes and does self.event.clear()
         and does self.event.wait()
</snippet></ROW><ROW><id>20502786</id><snippet>Queue.Queue</snippet></ROW><ROW><id>20502786</id><snippet>Event</snippet></ROW><ROW><id>20502972</id><snippet>&gt;&gt;&gt; turtle.setheading(90)
&gt;&gt;&gt; turtle.heading()
90.0
</snippet></ROW><ROW><id>20503102</id><snippet>&gt;&gt;&gt; import numpy as np
&gt;&gt;&gt; LL = np.array(["A", "B", "C"])
&gt;&gt;&gt; ind = np.ma.masked_array([True, False, True])
&gt;&gt;&gt; LL[ind]
array(['A', 'C'], 
      dtype='|S1')
</snippet></ROW><ROW><id>20503102</id><snippet>&gt;&gt;&gt; # find indices where LL is "A" or "C"
&gt;&gt;&gt; ind = np.array([True, False, True])
&gt;&gt;&gt; LL[ind]
array(['A', 'C'], 
      dtype='|S1')
</snippet></ROW><ROW><id>20503120</id><snippet>threeyrs = pd.concat([actdf['01/01/2009':'12/01/2009'], actdf['01/01/2011':'12/01/2012']])
</snippet></ROW><ROW><id>20503292</id><snippet>return wrap</snippet></ROW><ROW><id>20503292</id><snippet>None</snippet></ROW><ROW><id>20503292</id><snippet>def login_required(test):
    @wraps(test)
    def wrap(*args, **kwargs):
        if 'logged_in' in session:
            return test(*args, **kwargs)
        else:
            flash('You need to login first.')
            return redirect(url_for('log'))
    return wrap
</snippet></ROW><ROW><id>20503292</id><snippet>@login_required</snippet></ROW><ROW><id>20503292</id><snippet>@app.route('/hello')</snippet></ROW><ROW><id>20503292</id><snippet>@login_required</snippet></ROW><ROW><id>20503292</id><snippet>AssertionError</snippet></ROW><ROW><id>20503292</id><snippet>None</snippet></ROW><ROW><id>20503353</id><snippet>count</snippet></ROW><ROW><id>20503353</id><snippet>count / 60</snippet></ROW><ROW><id>20503353</id><snippet>count % 60</snippet></ROW><ROW><id>20503353</id><snippet>mins = count / 60
secs = count % 60

print "Time remaining is %d minutes %d seconds" % (mins, secs)
</snippet></ROW><ROW><id>20503353</id><snippet>mins, secs = divmod(count, 60)</snippet></ROW><ROW><id>20503353</id><snippet>sleep()</snippet></ROW><ROW><id>20503469</id><snippet>class Meta:
    unique_together = (('bar', 'name'),)
</snippet></ROW><ROW><id>20503506</id><snippet>if 'none,' in y[0]:
    y[0] = y[0].replace('none,','')
print y
</snippet></ROW><ROW><id>20503506</id><snippet>&gt;&gt;&gt; y = ['none,none,none,none,none,none,OBJECTID,FULL_ADDRESS', '8724,CANARY',
     '8759,CARDINAL', '9774,W WABASH', '17745,WESTCHESTER']
&gt;&gt;&gt; y[0] = y[0].replace('none,','')
&gt;&gt;&gt; y
['OBJECTID,FULL_ADDRESS', '8724,CANARY', '8759,CARDINAL', '9774,W WABASH', '17745,WESTCHESTER']
&gt;&gt;&gt; y[0] = y[0].replace('none,','')
&gt;&gt;&gt; y
['OBJECTID,FULL_ADDRESS', '8724,CANARY', '8759,CARDINAL', '9774,W WABASH', '17745,WESTCHESTER']
&gt;&gt;&gt; 
</snippet></ROW><ROW><id>20503636</id><snippet>drawing.draw_box</snippet></ROW><ROW><id>20503636</id><snippet>float(splitstring[1]</snippet></ROW><ROW><id>20503670</id><snippet>zip</snippet></ROW><ROW><id>20503670</id><snippet>c,d = zip(*[(ia,ib) for (ia, ib) in zip(a,b) if low_lim &lt;= ia &lt;= high_lim])
</snippet></ROW><ROW><id>20503670</id><snippet>*</snippet></ROW><ROW><id>20503748</id><snippet>quote[::-1]</snippet></ROW><ROW><id>20503748</id><snippet>"String"[start_index:end_index:step]</snippet></ROW><ROW><id>20503748</id><snippet>&gt;&gt;&gt; "abcdefg"[0:2]
'ab'
&gt;&gt;&gt; "abcdefg"[2:3]
'c'
&gt;&gt;&gt; "abcdefg"[::2]
'aceg'
</snippet></ROW><ROW><id>20503748</id><snippet> a b c d e f g
0 1 2 3 4 5 6 7
</snippet></ROW><ROW><id>20503748</id><snippet>[0:2]</snippet></ROW><ROW><id>20503748</id><snippet>|a b|c d e f g
0 1 2 3 4 5 6
</snippet></ROW><ROW><id>20503748</id><snippet>[2:3]</snippet></ROW><ROW><id>20503748</id><snippet> a b|c|d e f g
0 1 2 3 4 5 6 7
</snippet></ROW><ROW><id>20503748</id><snippet> a b c d e f g
0   1   2   3
</snippet></ROW><ROW><id>20503748</id><snippet> a b c d e f g
7 6 5 4 3 2 1 0
</snippet></ROW><ROW><id>20504069</id><snippet>import dbf

my_table = dbf.Table('/path/and/filename')

with my_table:
    my_table.add_fields('header3 N(3,0)')

    for record in dbf.Process(my_table):
        record.header3 = record.header1 + record.header2
</snippet></ROW><ROW><id>20504467</id><snippet>#0077AA)</snippet></ROW><ROW><id>20504467</id><snippet>from turtle import *</snippet></ROW><ROW><id>20504467</id><snippet>turtle</snippet></ROW><ROW><id>20504467</id><snippet>Screen</snippet></ROW><ROW><id>20504467</id><snippet>turtle.Screen</snippet></ROW><ROW><id>20504467</id><snippet>import turtle</snippet></ROW><ROW><id>20504467</id><snippet>multi_square()</snippet></ROW><ROW><id>20504467</id><snippet>multi_square</snippet></ROW><ROW><id>20504467</id><snippet>square</snippet></ROW><ROW><id>20504467</id><snippet>import turtle
wn = turtle.Screen()
wn.bgcolor('#0077AA')
t = turtle.Turtle()

def square():
    for i in range(10):
        for j in range (4):
            t.pendown()
            t.forward(50)
            t.right(90)
            t.penup()
            t.forward(50)

def multi_square():
    for k in range(10):
        square()
        t.right(90)
        t.forward(50)
        t.right(90)
        t.forward(50)
        t.right(180)

multi_square()
</snippet></ROW><ROW><id>20504890</id><snippet>a</snippet></ROW><ROW><id>20504890</id><snippet>toolsGUI</snippet></ROW><ROW><id>20504890</id><snippet>def __init__(self, rootWin):
    ...
    self.rootWin = rootWin
    ...

def frame(self):
    frame = Frame(self.rootWin)
    ...
</snippet></ROW><ROW><id>20504890</id><snippet>toolsGUI</snippet></ROW><ROW><id>20504890</id><snippet>class toolsGUI(Frame):
    def __init__(self, rootWin):
        Frame.__init__(self, rootWin)

    def frame(self):
        frame = Frame(self)
        ...
a = Tk()
t = toolsGUI(a)
t.pack(fill="both", expand=True)
a.mainloop()
</snippet></ROW><ROW><id>20504890</id><snippet>Frame</snippet></ROW><ROW><id>20504890</id><snippet>frame</snippet></ROW><ROW><id>20504957</id><snippet>&gt;&gt;&gt; y = pd.DataFrame(y, columns=list('y'))
</snippet></ROW><ROW><id>20504957</id><snippet>&gt;&gt;&gt; x['k'] = 1
&gt;&gt;&gt; y['k'] = 1
</snippet></ROW><ROW><id>20504957</id><snippet>&gt;&gt;&gt; pd.merge(y, x, on='k')[['a', 'b', 'y']]
   a  b  y
0  0  0  1
1  1  1  1
2  0  0  2
3  1  1  2
4  0  0  3
5  1  1  3
</snippet></ROW><ROW><id>20505021</id><snippet>raise</snippet></ROW><ROW><id>20505021</id><snippet>try:
    shutil.rmtree(temp_dir)
except:
    raise
</snippet></ROW><ROW><id>20505021</id><snippet>shutil.rmtree(temp_dir)
</snippet></ROW><ROW><id>20505021</id><snippet>try:
    shutil.rmtree(temp_dir)
except Exception as e:
    print(e)
    raise
</snippet></ROW><ROW><id>20505021</id><snippet>print(e)</snippet></ROW><ROW><id>20505021</id><snippet>print(repr(e))</snippet></ROW><ROW><id>20505021</id><snippet>traceback</snippet></ROW><ROW><id>20505021</id><snippet>try:
    shutil.rmtree(temp_dir)
except Exception as e:
    traceback.print_exc()
    raise
</snippet></ROW><ROW><id>20505021</id><snippet>print_exc</snippet></ROW><ROW><id>20505021</id><snippet>except Exception as e:</snippet></ROW><ROW><id>20505021</id><snippet>except Exception:</snippet></ROW><ROW><id>20505021</id><snippet>except:</snippet></ROW><ROW><id>20505409</id><snippet>print</snippet></ROW><ROW><id>20505409</id><snippet>foo = ['a', 'b', 'c', 'd', 'e']
from random import choice
while True:
    print '\r' + choice(foo),
</snippet></ROW><ROW><id>20505409</id><snippet>time.sleep</snippet></ROW><ROW><id>20505482</id><snippet>poll = models.ForeignKey(Poll, related_name="votes", unique=False, blank=False, db_index=True)
</snippet></ROW><ROW><id>20505482</id><snippet>class PollListView(ListView):
    queryset = Poll.objects.all().prefetch_related('votes')
</snippet></ROW><ROW><id>20505482</id><snippet>{% for poll in poll_list %}
  {{ poll.title }}
  {% for vote in poll.votes.all %} 
     {{ vote.id }} {{ vote.vote }} 
  {% endfor %}
{% endfor %}
</snippet></ROW><ROW><id>20505720</id><snippet>scatter1_proxy = matplotlib.lines.Line2D([0],[0], linestyle="none", c=colors[0], marker = 'o')
scatter2_proxy = matplotlib.lines.Line2D([0],[0], linestyle="none", c=colors[1], marker = 'v')
ax.legend([scatter1_proxy, scatter2_proxy], ['label1', 'label2'], numpoints = 1)
</snippet></ROW><ROW><id>20505897</id><snippet>class Bird(object):
    def __init__(self, height, weight, has_feathers, capable_of_flying, bird_migrates, bird_sings, bird_eats_worms):
        self.height = height
        self.weight = weight
        self.has_feathers = has_feathers
        self.capable_of_flying = capable_of_flying
        self.bird_migrates = bird_migrates
        self.bird_sings = bird_sings
        self.bird_eats_worms = bird_eats_worms

    def get_height(self):
        return self.height

    def get_weight(self):
        return self.weight

    def get_has_feathers(self):
        if self.has_feathers:
            return "The bird has feathers"
        else:
            return "The bird does not have feathers"

    # Etc...
</snippet></ROW><ROW><id>20505897</id><snippet>self</snippet></ROW><ROW><id>20505897</id><snippet>classvar.variable</snippet></ROW><ROW><id>20505897</id><snippet>classvar</snippet></ROW><ROW><id>20505897</id><snippet>self</snippet></ROW><ROW><id>20505897</id><snippet>penguin = Bird(10, 30, True, False, False, True, False)
print penguin.get_has_feathers() # "The bird has feathers"
</snippet></ROW><ROW><id>20505897</id><snippet>class Bird(object):
    def __init__(self, height, weight, has_feathers, capable_of_flying, bird_migrates, bird_sings, bird_eats_worms):
        self.height = height
        self.weight = weight
        if has_feathers:
            self.has_feathers = "The bird has feathers"
        else:
            self.has_feathers = "The bird does not have feathers"
        # etc...

penguin = Bird(10, 30, True, False, False, True, False)
print penguin.has_feathers # "The bird has feathers"
</snippet></ROW><ROW><id>20506042</id><snippet>join</snippet></ROW><ROW><id>20506042</id><snippet>print(". ".join(word[0] for word in word_list) + ".")
</snippet></ROW><ROW><id>20506230</id><snippet>new_list = ((s[i]+s[i+1])/2.0 for i in xrange(len(s)-1))
</snippet></ROW><ROW><id>20506263</id><snippet>struct</snippet></ROW><ROW><id>20506263</id><snippet>value = struct.unpack("&lt;d", data[:8])
</snippet></ROW><ROW><id>20506263</id><snippet>&lt;</snippet></ROW><ROW><id>20506263</id><snippet>&gt;d</snippet></ROW><ROW><id>20506344</id><snippet>#old way
some_string = "the value of 2+2 = %i",4

#new way
some_string = "the value of 2+2 = {}".format(4)
</snippet></ROW><ROW><id>20506344</id><snippet>if choice == '1':
  print("You dealt {}".format(damage_goes_here))
</snippet></ROW><ROW><id>20506344</id><snippet>class SomeClassLikePokemonOrWhatever:</snippet></ROW><ROW><id>20506344</id><snippet>class Pokemon:
  def __init__(self,name,base_hp):
    self.name = name
    self.base_hp = base_hp
  #the __init__ function gets called when you "instantiate" (e.g. actually MAKE)
  #whatever object the class is describing. In most cases, all it does it set
  #the starting properties of the object based on how you define it (like this)
  #you could also say all pokemon are beautiful, and add something like
    self.description = "Absolutely GORGEOUS darling!"
  #that will be constant for every pokemon you make through this definition.
  #you said you wanted damage to be random between 1-50, so we don't need to add
  #that statistic to the class.
</snippet></ROW><ROW><id>20506344</id><snippet>  def attack(self,target):
  #in this method we'll teach the pokemon how to fight
    damage = random.randint(1,50) #don't forget to import random to do this
    target.hp -= damage
</snippet></ROW><ROW><id>20506344</id><snippet>my_awesome_pokemon = Pokemon("Charizard",200) #you give the args in the same order __init__ takes them
your_sucky_pokemon = Pokemon("Magikarp",20) #same deal here.
</snippet></ROW><ROW><id>20506344</id><snippet>all_my_pokemon</snippet></ROW><ROW><id>20506344</id><snippet>my_awesome_pokemon.attack(your_sucky_pokemon)
#just that easy, now display how much damage it did....WAIT STOP WE HAVE A PROBLEM!
</snippet></ROW><ROW><id>20506344</id><snippet>my_awesome_pokemon.damage</snippet></ROW><ROW><id>20506344</id><snippet>def attack(self,target):
  damage = random.randint(1,50)
  target.hp -= damage
  return damage #now we have some way to access how much damage was done from our main thread
</snippet></ROW><ROW><id>20506344</id><snippet>damage_done = my_awesome_pokemon.attack(your_sucky_pokemon) #since .attack() returns the damage it deals, this sets damage_done to a sane amount.
print("My pokemon {} dealt {} damage to {}".format(my_awesome_pokemon.name,damage_done,your_sucky_pokemon.name))
</snippet></ROW><ROW><id>20506733</id><snippet>subwr=line3
</snippet></ROW><ROW><id>20506733</id><snippet>subwr=line3.copy()
</snippet></ROW><ROW><id>20506733</id><snippet>SubOut1 = []
line3 = {}

line3[0] = "usefuldata"
subwr = line3
SubOut1.append(subwr)

line3[0] = "uselessdata"

print SubOut1
</snippet></ROW><ROW><id>20506733</id><snippet>{0:"useless data"}</snippet></ROW><ROW><id>20506733</id><snippet>subwr</snippet></ROW><ROW><id>20506733</id><snippet>line3</snippet></ROW><ROW><id>20506733</id><snippet>SubOut1[0]</snippet></ROW><ROW><id>20506733</id><snippet>subwr = line3.copy()</snippet></ROW><ROW><id>20506733</id><snippet>a = b = c = []
</snippet></ROW><ROW><id>20506733</id><snippet>a = []
b = []
c = []
</snippet></ROW><ROW><id>20506894</id><snippet>from math import atan2
coorinput.sort(key=lambda c:atan2(c[0], c[1]))
</snippet></ROW><ROW><id>20507076</id><snippet>from numpy import *
from pyhdf.SD import SD
sd = SD('data.hdf', SDC.READ)
sd.datasets()
</snippet></ROW><ROW><id>20507076</id><snippet>image = sd.datasets.select('3d_image_name')
print "%.23f" % (image[2][2][2],)
</snippet></ROW><ROW><id>20507122</id><snippet>_use_mapper_path</snippet></ROW><ROW><id>20507122</id><snippet>AliasedClass</snippet></ROW><ROW><id>20507122</id><snippet>AliasedClass</snippet></ROW><ROW><id>20507122</id><snippet>user_groups</snippet></ROW><ROW><id>20507122</id><snippet>class A (db.Model):

    __tablename__ = 'a'

    something = db.Column( db.BigInteger( unsigned=True ), primary_key=True )

    b         = db.relationship( 'B', use_list=False )

class B (db.Model):

    __tablename__ = 'b'

    a_id      = db.Column( db.BigInteger( unsigned=True ), db.ForeignKey( 'a.id' ), primary_key=True )

    a         = db.relationship( 'A' )
</snippet></ROW><ROW><id>20507165</id><snippet>replace</snippet></ROW><ROW><id>20507165</id><snippet>str</snippet></ROW><ROW><id>20507165</id><snippet>replace</snippet></ROW><ROW><id>20507165</id><snippet>ip_start = ip_start.replace(str(top),str(i))
</snippet></ROW><ROW><id>20507293</id><snippet>with open("blurbs.csv","rb") as f:
    blurbs = csv.DictReader(f, delimiter="\t")
    for row in blurbs:
        print row
    f.seek(0)
    for row in blurbs:
        print row
</snippet></ROW><ROW><id>20507293</id><snippet>with open("blurbs.csv","rb") as f:
    blurbs = list(csv.DictReader(f, delimiter="\t"))
for row in blurbs:
    print row
for row in blurbs:
    print row
</snippet></ROW><ROW><id>20507551</id><snippet>[d for d in list_products if sum(bool(v) for v in d.values()) &gt; 2]
</snippet></ROW><ROW><id>20507551</id><snippet>sum</snippet></ROW><ROW><id>20507551</id><snippet>True</snippet></ROW><ROW><id>20507586</id><snippet>import paramiko
from stat import S_ISDIR

server ="any.sftpserver"
username = "uname"
password = "***"
path_to_hosts_file = os.path.join("~", ".ssh", "known_hosts")

ssh = paramiko.SSHClient()
ssh.load_host_keys(os.path.expanduser(path_to_hosts_file))
ssh.connect(server, username=username, password=password)

def isdir(path):
    try:
        return S_ISDIR(sftp.stat(path).st_mode)
    except IOError:
        return False

def rm(path):
    files = sftp.listdir(path=path)

    if not path.endswith("/"):
        path = "%s/" % path

    if not len(files):
        sftp.rmdir(path)
        return

    for f in files:
        filepath = "%s/%s" % (path, f)
        if isdir(filepath):
            rm(filepath)
        else:
            sftp.remove(filepath)

if __name__ == "__main__":
    rm("/")
</snippet></ROW><ROW><id>20507589</id><snippet>unicode</snippet></ROW><ROW><id>20507589</id><snippet>import base64, zlib
compressed_bytes = zlib.compress(plain_bytes)
compressed_text = base64.b64encode(compressed_bytes)
</snippet></ROW><ROW><id>20507589</id><snippet>b32encode</snippet></ROW><ROW><id>20507589</id><snippet>encode</snippet></ROW><ROW><id>20507589</id><snippet>def b62encode(plain):
    b64 = base64.b64encode(plain)
    return b64.replace('0', '00').replace('+', '01').replace('/', '02')

def b62decode(data):
     b64 = '0'.join(part.replace('01', '+').replace('02', '/') 
                    for part in data.split('00'))
     return base64.b64decode(b64)
</snippet></ROW><ROW><id>20507589</id><snippet>unicode</snippet></ROW><ROW><id>20507589</id><snippet>plain_bytes = plain_text.encode('utf-8')
compressed_bytes = zlib.compress(plain_bytes)
b62_bytes = b62encode(compressed_bytes)
b62_text = b62_bytes.decode('ascii')

b62_bytes = b62_text.encode('ascii')
compressed_bytes = b62decode(b62_bytes)
plain_bytes = zlib.decompress(compressed_bytes)
plain_text = plain_bytes.decode('utf-8')
</snippet></ROW><ROW><id>20507711</id><snippet>attackPWR = ((random.randint(85,100) * (baseAtkPwr + attackerLV + attackerST + attackerSK)) // 100
</snippet></ROW><ROW><id>20507769</id><snippet>capfd</snippet></ROW><ROW><id>20507769</id><snippet>def test_foo(capfd):
    foo()  # Writes "Hello World!" to stdout
    out, err = capfd.readouterr()
    assert out == "Hello World!"
</snippet></ROW><ROW><id>20507769</id><snippet>py.test --fixtures</snippet></ROW><ROW><id>20507769</id><snippet>def f(name):
    print "hello {}".format(name)


def test_f(capfd):
    f("Tom")

    out, err = capfd.readouterr()
    assert out == "hello Tom\n"
</snippet></ROW><ROW><id>20507769</id><snippet>sys.atdout</snippet></ROW><ROW><id>20507769</id><snippet>capfd</snippet></ROW><ROW><id>20507769</id><snippet>py.test foo.py</snippet></ROW><ROW><id>20507769</id><snippet>$ py.test foo.py
====================================================================== test session starts ======================================================================
platform linux2 -- Python 2.7.5 -- pytest-2.4.2
plugins: flakes, cache, pep8, cov
collected 1 items 

foo.py .

=================================================================== 1 passed in 0.01 seconds ====================================================================
</snippet></ROW><ROW><id>20507769</id><snippet>py.test</snippet></ROW><ROW><id>20507769</id><snippet>py.test</snippet></ROW><ROW><id>20507769</id><snippet>test_foo.py</snippet></ROW><ROW><id>20507769</id><snippet>test_foo()</snippet></ROW><ROW><id>20507875</id><snippet>&gt;&gt;&gt; np.genfromtxt('File1.csv', delimiter='\t', names=True, usecols=("Time", "Profit"))
array([(0.0, 1.0), (2.0, 3.0), (3.0, 4.0), (5.0, 6.0)], 
      dtype=[('Time', '&lt;f8'), ('Profit', '&lt;f8')])
</snippet></ROW><ROW><id>20507875</id><snippet>unpack=True</snippet></ROW><ROW><id>20507875</id><snippet>unpack</snippet></ROW><ROW><id>20507875</id><snippet>&gt;&gt;&gt; np.genfromtxt('File1.csv', delimiter='\t', names=True, usecols=("Time", "Profit"), unpack=True)
array([(0.0, 1.0), (2.0, 3.0), (3.0, 4.0), (5.0, 6.0)], 
      dtype=[('Time', '&lt;f8'), ('Profit', '&lt;f8')])
</snippet></ROW><ROW><id>20507875</id><snippet>usecols</snippet></ROW><ROW><id>20507875</id><snippet>names=True</snippet></ROW><ROW><id>20507875</id><snippet>Z</snippet></ROW><ROW><id>20507875</id><snippet>plt.plot(Z['Time'], Z['Profit'])
</snippet></ROW><ROW><id>20507875</id><snippet>X, Y = Z['Time'], Z['Profit']
</snippet></ROW><ROW><id>20508067</id><snippet>start C:\python27\python.exe D:your_program_location\your_program.py'
</snippet></ROW><ROW><id>20508108</id><snippet>counters[a - 1] += 1
if counters[a - 1] &lt; last_update:
    counters[a - 1] = last_update + 1
</snippet></ROW><ROW><id>20508108</id><snippet>counters[a - 1]</snippet></ROW><ROW><id>20508108</id><snippet>last_update - 1</snippet></ROW><ROW><id>20508137</id><snippet> with open('/path_to_files/bob/achivements.dat', 'r', encoding='utf-8') as inbob:
     ...do some awesomness for bob here...
</snippet></ROW><ROW><id>20508137</id><snippet> with open('/path_to_files/john/achivements.dat', 'r', encoding='utf-8') as injohn:
     ...do some awesomness for john here...
</snippet></ROW><ROW><id>20508137</id><snippet>def read_file(path_for_some_user):
    from os import path
    with open(path.join('path_for_some_user','achivements.dat'), 'r', encoding='utf-8') as injohn:
         ...do some awesomness for john here...
</snippet></ROW><ROW><id>20508199</id><snippet>get_model</snippet></ROW><ROW><id>20508199</id><snippet>blog</snippet></ROW><ROW><id>20508199</id><snippet>model = get_model('blog', 'BlogPost')</snippet></ROW><ROW><id>20508273</id><snippet>or</snippet></ROW><ROW><id>20508273</id><snippet>o</snippet></ROW><ROW><id>20508273</id><snippet>x</snippet></ROW><ROW><id>20508273</id><snippet>[o,x.append(o) or 0][type(o)==type([])]</snippet></ROW><ROW><id>20508273</id><snippet>[o,x.append(o) or 0]</snippet></ROW><ROW><id>20508273</id><snippet>x.append(o) or 0</snippet></ROW><ROW><id>20508273</id><snippet>o</snippet></ROW><ROW><id>20508273</id><snippet>x</snippet></ROW><ROW><id>20508273</id><snippet>x</snippet></ROW><ROW><id>20508273</id><snippet>x</snippet></ROW><ROW><id>20508273</id><snippet>OutOfMemoryError</snippet></ROW><ROW><id>20508585</id><snippet>if (pointsA &gt;= 11) and (pointsA - pointsB &gt;= 2):
...
elif (pointsB &gt;= 11) and (pointsB - pointsA &gt;= 2):
...
</snippet></ROW><ROW><id>20508616</id><snippet>Makefile</snippet></ROW><ROW><id>20508616</id><snippet>all: myprogram
    chmod 755 myprogram
</snippet></ROW><ROW><id>20508616</id><snippet>myprogram</snippet></ROW><ROW><id>20508616</id><snippet>all</snippet></ROW><ROW><id>20508616</id><snippet>python myprogram.py $1 $2
</snippet></ROW><ROW><id>20508616</id><snippet>python myprogram.py $@
</snippet></ROW><ROW><id>20508646</id><snippet>TaskExecutor</snippet></ROW><ROW><id>20508646</id><snippet>logger.debug("try to get queued task")
</snippet></ROW><ROW><id>20508646</id><snippet>logger.debug("try to get queued task from queue %s", self.taskInfos)
</snippet></ROW><ROW><id>20508646</id><snippet>from threading import Thread, Lock
from Queue import Queue

class Logger:
     def __init__(self):
         self.iolock = Lock()

     def debug(self, str, *msg):
         with self.iolock:
             print str % msg

     error = debug

logger = Logger()

class TaskExecutor(object):
    def __init__(self):
        logger.debug("init taskExecutor")
        self.taskInfos = Queue()
        task_thread = Thread(target=self._run_worker_thread)
        task_thread.daemon = True
        task_thread.start()

    def is_running(self):
        return True

    def _run_worker_thread(self):
        logger.debug("start running taskExcecutor worker Thread")
        while self.is_running():
            try:
                logger.debug("try to get queued task from queue %s", self.taskInfos)
                msg, task = self.taskInfos.get()
                logger.debug("got task %s for msg: %s", str(task), str(msg))
                #task.execute(msg)
                self.taskInfos.task_done()
            except Exception, e:
                logger.error("Error: %s", e.message)
        logger.debug("shutting down TaskExecutor!")

    def schedule_task(self, msg, task):
        try:
            logger.debug("appending task '%s' for msg: %s", str(task), str(msg))
            self.taskInfos.put((msg, task))
            logger.debug("into queue: %s ", str(self.taskInfos))
        except Exception, e:
            logger.debug("queue is probably full: %s", str(e))

te = TaskExecutor()

def runit():
    for i in range(10):
        te.schedule_task("some task", i)

main = Thread(target=runit)
main.start()
</snippet></ROW><ROW><id>20508646</id><snippet>TaskExecutor</snippet></ROW><ROW><id>20508646</id><snippet>executor = TaskExecutor()
</snippet></ROW><ROW><id>20508646</id><snippet>p = Process(target=produce)
</snippet></ROW><ROW><id>20508646</id><snippet>fork()</snippet></ROW><ROW><id>20508646</id><snippet>executor</snippet></ROW><ROW><id>20508646</id><snippet>executor</snippet></ROW><ROW><id>20508646</id><snippet>executor</snippet></ROW><ROW><id>20508646</id><snippet>fork()</snippet></ROW><ROW><id>20508646</id><snippet>executor</snippet></ROW><ROW><id>20508646</id><snippet>Queue</snippet></ROW><ROW><id>20508646</id><snippet>executor</snippet></ROW><ROW><id>20508646</id><snippet>executor</snippet></ROW><ROW><id>20508646</id><snippet>multiprocessing.Queue</snippet></ROW><ROW><id>20508646</id><snippet>Queue.Queue</snippet></ROW><ROW><id>20508646</id><snippet>from time import sleep
from threading import Thread
from multiprocessing import Process, JoinableQueue

class TaskExecutor(Thread):
    def __init__(self):
        print("init taskExecutor")
        Thread.__init__(self)
        self.taskInfos = JoinableQueue()

    def getq(self):
        return self.taskInfos

    def run(self):
        print("start running taskExcecutor worker Thread")
        while self.is_running():
            try:
                print("try to get queued task from %s" % self.taskInfos)
                msg, task = self.taskInfos.get()
                print("got task %s for msg: %s" % (task, msg))
                task.execute(msg)
                self.taskInfos.task_done()
            except Exception, e:
                print("Error: %s" % e.message)
        print("shutting down TaskExecutor!")

    def is_running(self):
        return True

class Task(object):
    def execute(self, msg):
        print(msg)

def produce(q):
    cnt = 0
    while True:
        q.put(("Message " + str(cnt), Task()))
        cnt += 1
        sleep(1)

if __name__ == "__main__":
    executor = TaskExecutor()
    executor.start()
    for i in range(4):
        p = Process(target=produce, args=(executor.getq(),))
        p.start()
</snippet></ROW><ROW><id>20508646</id><snippet>__name__ == "__main__"</snippet></ROW><ROW><id>20508646</id><snippet>executor</snippet></ROW><ROW><id>20508646</id><snippet>   task.execute(msg)
</snippet></ROW><ROW><id>20508646</id><snippet>schedule_task()</snippet></ROW><ROW><id>20508653</id><snippet>simulate(*sys.argv[1:])
</snippet></ROW><ROW><id>20508988</id><snippet>os.popen</snippet></ROW><ROW><id>20508988</id><snippet>subprocess</snippet></ROW><ROW><id>20508988</id><snippet>subprocess</snippet></ROW><ROW><id>20508988</id><snippet>subprocess</snippet></ROW><ROW><id>20508988</id><snippet>'+ uid +</snippet></ROW><ROW><id>20508988</id><snippet>;</snippet></ROW><ROW><id>20508988</id><snippet>pgsql</snippet></ROW><ROW><id>20508988</id><snippet>fmt = r"\copy (SELECT encode(image, 'hex') FROM images WHERE img_id = (select bin_id from binaries where id = {} TO '/tmp/{}';"
sql = fmt.format(uid, imgName)
pg = ['pgsql', '-U', 'xxx', 'yyy', '-A' ,'-t', '-c', sql]
output = subprocess.check_output(pg)
</snippet></ROW><ROW><id>20508988</id><snippet>'</snippet></ROW><ROW><id>20508988</id><snippet>"</snippet></ROW><ROW><id>20508988</id><snippet>;</snippet></ROW><ROW><id>20508988</id><snippet>"\'"</snippet></ROW><ROW><id>20508988</id><snippet>"'"</snippet></ROW><ROW><id>20508988</id><snippet>r"\'"</snippet></ROW><ROW><id>20508988</id><snippet>\'</snippet></ROW><ROW><id>20508988</id><snippet>\'</snippet></ROW><ROW><id>20508988</id><snippet>"</snippet></ROW><ROW><id>20508988</id><snippet>'</snippet></ROW><ROW><id>20508988</id><snippet>'</snippet></ROW><ROW><id>20508988</id><snippet>"\c"</snippet></ROW><ROW><id>20508988</id><snippet>r"\c"</snippet></ROW><ROW><id>20508988</id><snippet># same first two lines as above to create sql
escaped = sql.replace("'", r"\'")
os_str = 'psql -U xxx yyy -A -t -c "{}"'.format(escaped)
</snippet></ROW><ROW><id>20509021</id><snippet>return [lst[t:] for t in range(len(lst), -1, -1)]
</snippet></ROW><ROW><id>20509021</id><snippet>range</snippet></ROW><ROW><id>20509021</id><snippet>t</snippet></ROW><ROW><id>20509021</id><snippet>len(lst+1)</snippet></ROW><ROW><id>20509021</id><snippet>len(lst)+1</snippet></ROW><ROW><id>20509021</id><snippet>range</snippet></ROW><ROW><id>20509021</id><snippet>len(lst) + 1</snippet></ROW><ROW><id>20509021</id><snippet>[]</snippet></ROW><ROW><id>20509021</id><snippet>range</snippet></ROW><ROW><id>20509021</id><snippet>0</snippet></ROW><ROW><id>20509021</id><snippet>range</snippet></ROW><ROW><id>20509021</id><snippet>range</snippet></ROW><ROW><id>20509021</id><snippet>-1</snippet></ROW><ROW><id>20509021</id><snippet>t=0</snippet></ROW><ROW><id>20509142</id><snippet>0x20AC</snippet></ROW><ROW><id>20509142</id><snippet>0xE2</snippet></ROW><ROW><id>20509142</id><snippet>0x82</snippet></ROW><ROW><id>20509142</id><snippet>0xAC</snippet></ROW><ROW><id>20509142</id><snippet>'\xE2\x82\xAC'</snippet></ROW><ROW><id>20509142</id><snippet>print</snippet></ROW><ROW><id>20509142</id><snippet>â‚¬</snippet></ROW><ROW><id>20509142</id><snippet>p='€'
</snippet></ROW><ROW><id>20509142</id><snippet>\x80</snippet></ROW><ROW><id>20509142</id><snippet>p='\x80'
</snippet></ROW><ROW><id>20509142</id><snippet>\x80</snippet></ROW><ROW><id>20509142</id><snippet>p.decode('latin-1')</snippet></ROW><ROW><id>20509142</id><snippet>u'\x80'</snippet></ROW><ROW><id>20509142</id><snippet>str</snippet></ROW><ROW><id>20509142</id><snippet>p='€'
</snippet></ROW><ROW><id>20509142</id><snippet>p='\u20ac'
</snippet></ROW><ROW><id>20509142</id><snippet>p=b'\x80'.decode(sys.stdin.encoding)
</snippet></ROW><ROW><id>20509142</id><snippet>unicode</snippet></ROW><ROW><id>20509142</id><snippet>str</snippet></ROW><ROW><id>20509142</id><snippet>20AC</snippet></ROW><ROW><id>20509142</id><snippet>0x20AC</snippet></ROW><ROW><id>20509142</id><snippet>8364</snippet></ROW><ROW><id>20509142</id><snippet>0x80</snippet></ROW><ROW><id>20509142</id><snippet>128</snippet></ROW><ROW><id>20509229</id><snippet>In [37]: solve_poly_system([x-5,y-x])
Out[37]: [(5, 5)]

In [38]: solve_poly_system([x-5.1,y-x])
Out[38]: [(5.1, 5.1)]
</snippet></ROW><ROW><id>20509229</id><snippet>x - 5.1</snippet></ROW><ROW><id>20509229</id><snippet>__sub__</snippet></ROW><ROW><id>20509229</id><snippet>x</snippet></ROW><ROW><id>20509229</id><snippet>5.1</snippet></ROW><ROW><id>20509229</id><snippet>Symbol</snippet></ROW><ROW><id>20509229</id><snippet>5.1</snippet></ROW><ROW><id>20509229</id><snippet>Float(5.1)</snippet></ROW><ROW><id>20509229</id><snippet>sympify</snippet></ROW><ROW><id>20509229</id><snippet>1 - 4</snippet></ROW><ROW><id>20509229</id><snippet>sympify(1) - sympify(4)</snippet></ROW><ROW><id>20509229</id><snippet>int/int</snippet></ROW><ROW><id>20509229</id><snippet>1/4</snippet></ROW><ROW><id>20509229</id><snippet>0</snippet></ROW><ROW><id>20509229</id><snippet>0.25</snippet></ROW><ROW><id>20509229</id><snippet>Rational(1, 4)</snippet></ROW><ROW><id>20509229</id><snippet>S(1)/4</snippet></ROW><ROW><id>20509229</id><snippet>S</snippet></ROW><ROW><id>20509229</id><snippet>sympify</snippet></ROW><ROW><id>20509323</id><snippet>for x in list_of_dicts:
    x.update((y, '') for y in header.viewkeys() - x)
</snippet></ROW><ROW><id>20509323</id><snippet>header</snippet></ROW><ROW><id>20509323</id><snippet>viewkeys()</snippet></ROW><ROW><id>20509323</id><snippet>keys()</snippet></ROW><ROW><id>20509323</id><snippet>headers</snippet></ROW><ROW><id>20509323</id><snippet>header_set = set(header)
for x in list_of_dicts:
    x.update((y, '') for y in header_set.difference(x))
</snippet></ROW><ROW><id>20509494</id><snippet>import smtplib
from smtplib import SMTP

recipients = ['example1@gmail.com', 'example2@example.com']

def send_email (message, status):
    fromaddr = 'from@gmail.com'
    server = SMTP('smtp.gmail.com:587')
    server.ehlo()
    server.starttls()
    server.ehlo()
    server.login('example_username', 'example_pw')
    server.sendmail(fromaddr, recipients, 'Subject: %s\r\n%s' % (status, message))
    server.quit()

 send_email("message","subject")
</snippet></ROW><ROW><id>20509580</id><snippet>&lt;img&gt;</snippet></ROW><ROW><id>20509580</id><snippet>&gt;&gt;&gt; from BeautifulSoup import BeautifulSoup                                                                                                                            
&gt;&gt;&gt; html = '&lt;a href="http:"&gt;Some text&lt;/a&gt; Some other text &lt;img height="1" picture.gif&gt; MORE TEXT &lt;/img&gt;'
&gt;&gt;&gt; soup = BeautifulSoup(html)
&gt;&gt;&gt; for m in soup.findAll('img'):
&gt;&gt;&gt;     m.replaceWithChildren()

&gt;&gt;&gt; print soup

&lt;a href="http:"&gt;Some text&lt;/a&gt; Some other text  MORE TEXT 
</snippet></ROW><ROW><id>20509580</id><snippet>&lt;img ..&gt;</snippet></ROW><ROW><id>20509580</id><snippet>&lt;/img&gt;</snippet></ROW><ROW><id>20509580</id><snippet>re.sub(r'&lt;/?img[^&gt;]*&gt;', '', html)
</snippet></ROW><ROW><id>20509624</id><snippet>.extend</snippet></ROW><ROW><id>20509624</id><snippet>&gt;&gt;&gt; dict_a = {'a': [3.212], 'b': [0.0]}
&gt;&gt;&gt; dict_b = {'a': [923.22, 3.212], 'c': [123.32]}
&gt;&gt;&gt; dict_c = {'b': [0.0]}
&gt;&gt;&gt; result_dict = {}
&gt;&gt;&gt; dicts = [dict_a, dict_b, dict_c]
&gt;&gt;&gt; 
&gt;&gt;&gt; for d in dicts:
...     for k, v in d.iteritems():
...         result_dict.setdefault(k, []).extend(v)
... 
&gt;&gt;&gt; result_dict
{'a': [3.212, 923.22, 3.212], 'c': [123.32], 'b': [0.0, 0.0]}
</snippet></ROW><ROW><id>20509624</id><snippet>dict.setdefault</snippet></ROW><ROW><id>20509624</id><snippet>setdefault</snippet></ROW><ROW><id>20509624</id><snippet>v</snippet></ROW><ROW><id>20509624</id><snippet>dict_a = {'a': [3.212], 'b': 0.0}</snippet></ROW><ROW><id>20509624</id><snippet>TypeError: type object is not iterable</snippet></ROW><ROW><id>20509624</id><snippet>try-except</snippet></ROW><ROW><id>20509624</id><snippet>for d in dicts:
    for k, v in d.iteritems():
        try:
            result_dict.setdefault(k, []).extend(v)
        except TypeError:
            result_dict[k].append(v)
</snippet></ROW><ROW><id>20509641</id><snippet>stdio</snippet></ROW><ROW><id>20509641</id><snippet>fflush()</snippet></ROW><ROW><id>20509641</id><snippet>printf()</snippet></ROW><ROW><id>20509641</id><snippet>setvbuf(stdout, (char *) NULL, _IOLBF, 0); /* make line buffered stdout */
</snippet></ROW><ROW><id>20509641</id><snippet>stdbuf</snippet></ROW><ROW><id>20509641</id><snippet>from subprocess import Popen, PIPE

process = Popen(["stdbuf", "-oL", "./main"], stdout=PIPE, bufsize=1)
for line in iter(process.stdout.readline, b''):
    print line,
process.communicate() # close process' stream, wait for it to exit
</snippet></ROW><ROW><id>20509641</id><snippet>pexpect</snippet></ROW><ROW><id>20509641</id><snippet>pexpect</snippet></ROW><ROW><id>20509641</id><snippet>pty</snippet></ROW><ROW><id>20509641</id><snippet>pty</snippet></ROW><ROW><id>20509641</id><snippet>#!/usr/bin/env python
import os
import pty
import sys
from select import select
from subprocess import Popen, STDOUT

master_fd, slave_fd = pty.openpty()  # provide tty to enable line buffering
process = Popen("./main", stdin=slave_fd, stdout=slave_fd, stderr=STDOUT,
                bufsize=0, close_fds=True)
timeout = .1 # ugly but otherwise `select` blocks on process' exit
# code is similar to _copy() from pty.py
with os.fdopen(master_fd, 'r+b', 0) as master:
    input_fds = [master, sys.stdin]
    while True:
        fds = select(input_fds, [], [], timeout)[0]
        if master in fds: # subprocess' output is ready
            data = os.read(master_fd, 512) # &lt;-- doesn't block, may return less
            if not data: # EOF
                input_fds.remove(master)
            else:
                os.write(sys.stdout.fileno(), data) # copy to our stdout
        if sys.stdin in fds: # got user input
            data = os.read(sys.stdin.fileno(), 512)
            if not data:
                input_fds.remove(sys.stdin)
            else:
                master.write(data) # copy it to subprocess' stdin
        if not fds: # timeout in select()
            if process.poll() is not None: # subprocess ended
                # and no output is buffered &lt;-- timeout + dead subprocess
                assert not select([master], [], [], 0)[0] # race is possible
                os.close(slave_fd) # subproces don't need it anymore
                break
rc = process.wait()
print("subprocess exited with status %d" % rc)
</snippet></ROW><ROW><id>20509641</id><snippet>pty</snippet></ROW><ROW><id>20509641</id><snippet>pexpect</snippet></ROW><ROW><id>20509641</id><snippet>pexpect</snippet></ROW><ROW><id>20509641</id><snippet>pty</snippet></ROW><ROW><id>20509641</id><snippet>#!/usr/bin/env python
import pexpect

child = pexpect.spawn("/.main")
for line in child:
    print line,
child.close()
</snippet></ROW><ROW><id>20509668</id><snippet>A = [ [] ] * 2</snippet></ROW><ROW><id>20509668</id><snippet>&gt;&gt;&gt; A = [ [] ] * 2
&gt;&gt;&gt; id(A[0])
24956880
&gt;&gt;&gt; id(A[1])
24956880
&gt;&gt;&gt; id(A[0]) == id(A[1])
True
&gt;&gt;&gt;
</snippet></ROW><ROW><id>20509668</id><snippet>&gt;&gt;&gt; A = [[] for _ in xrange(2)]
&gt;&gt;&gt; A
[[], []]
&gt;&gt;&gt; A[0].append(1)
&gt;&gt;&gt; A
[[1], []]
&gt;&gt;&gt;
</snippet></ROW><ROW><id>20509668</id><snippet>xrange</snippet></ROW><ROW><id>20509668</id><snippet>range</snippet></ROW><ROW><id>20509684</id><snippet>curString += s[i]</snippet></ROW><ROW><id>20509684</id><snippet>curString</snippet></ROW><ROW><id>20509684</id><snippet>w
wx
wxy
x
xy
y
a
ab
abc
abcd
b
bc
bcd
c
cd
d
</snippet></ROW><ROW><id>20509684</id><snippet>w
wx
wxy
a
ab
abc
abcd
</snippet></ROW><ROW><id>20509720</id><snippet>update</snippet></ROW><ROW><id>20509720</id><snippet>In [11]: zed.loc[:, [('eyes', 'right')]]
Out[11]: 
part   eyes
side  right
a       123
b       NaN    
[2 rows x 1 columns]
</snippet></ROW><ROW><id>20509720</id><snippet>In [12]: zed.loc[:, [('eyes', 'right')]].fillna(555)
Out[12]: 
part   eyes
side  right
a       123
b       555
[2 rows x 1 columns]

In [13]: zed.update(zed.loc[:, [('eyes', 'right')]].fillna(555))

In [14]: zed
Out[14]: 
part  eyes         ears       
side  left  right  left  right
a       12    123  1234  12345
b       23    555  2345  23456
[2 rows x 4 columns]
</snippet></ROW><ROW><id>20509720</id><snippet>zed['eyes']['right'].fillna(value=555, inplace=True)
zed.loc[:,[('eyes', 'right')]].fillna(value=555, inplace=True)
</snippet></ROW><ROW><id>20509749</id><snippet>combinations</snippet></ROW><ROW><id>20509749</id><snippet>0</snippet></ROW><ROW><id>20509749</id><snippet>&gt;&gt;&gt; from itertools import combinations
&gt;&gt;&gt; list(combinations(range(4), 1))
[(0,), (1,), (2,), (3,)]
</snippet></ROW><ROW><id>20509749</id><snippet>&gt;&gt;&gt; list(combinations(range(9), 2))
[(0, 1), (0, 2), (0, 3), (0, 4), (0, 5), (0, 6), (0, 7), (0, 8), (1, 2), (1, 3), (1, 4), (1, 5), (1, 6), (1, 7), (1, 8), (2, 3), (2, 4), (2, 5), (2, 6), (2, 7), (2, 8), (3, 4), (3, 5), (3, 6), (3, 7), (3, 8), (4, 5), (4, 6), (4, 7), (4, 8), (5, 6), (5, 7), (5, 8), (6, 7), (6, 8), (7, 8)]
</snippet></ROW><ROW><id>20509749</id><snippet>&gt;&gt;&gt; from itertools import product, combinations
&gt;&gt;&gt; n = 3 # 3x3
&gt;&gt;&gt; m = 2 # 2 tents
&gt;&gt;&gt; for i in combinations(range(n*n), m):
...    print [[0 if x*n+y in i else 1 for x in range(n)] for y in range(n)]
... 
[[0, 1, 1], [0, 1, 1], [1, 1, 1]]
[[0, 1, 1], [1, 1, 1], [0, 1, 1]]
[[0, 0, 1], [1, 1, 1], [1, 1, 1]]
[[0, 1, 1], [1, 0, 1], [1, 1, 1]]
[[0, 1, 1], [1, 1, 1], [1, 0, 1]]
[[0, 1, 0], [1, 1, 1], [1, 1, 1]]
[[0, 1, 1], [1, 1, 0], [1, 1, 1]]
[[0, 1, 1], [1, 1, 1], [1, 1, 0]]
[[1, 1, 1], [0, 1, 1], [0, 1, 1]]
[[1, 0, 1], [0, 1, 1], [1, 1, 1]]
[[1, 1, 1], [0, 0, 1], [1, 1, 1]]
[[1, 1, 1], [0, 1, 1], [1, 0, 1]]
[[1, 1, 0], [0, 1, 1], [1, 1, 1]]
[[1, 1, 1], [0, 1, 0], [1, 1, 1]]
[[1, 1, 1], [0, 1, 1], [1, 1, 0]]
[[1, 0, 1], [1, 1, 1], [0, 1, 1]]
[[1, 1, 1], [1, 0, 1], [0, 1, 1]]
[[1, 1, 1], [1, 1, 1], [0, 0, 1]]
[[1, 1, 0], [1, 1, 1], [0, 1, 1]]
[[1, 1, 1], [1, 1, 0], [0, 1, 1]]
[[1, 1, 1], [1, 1, 1], [0, 1, 0]]
[[1, 0, 1], [1, 0, 1], [1, 1, 1]]
[[1, 0, 1], [1, 1, 1], [1, 0, 1]]
[[1, 0, 0], [1, 1, 1], [1, 1, 1]]
[[1, 0, 1], [1, 1, 0], [1, 1, 1]]
[[1, 0, 1], [1, 1, 1], [1, 1, 0]]
[[1, 1, 1], [1, 0, 1], [1, 0, 1]]
[[1, 1, 0], [1, 0, 1], [1, 1, 1]]
[[1, 1, 1], [1, 0, 0], [1, 1, 1]]
[[1, 1, 1], [1, 0, 1], [1, 1, 0]]
[[1, 1, 0], [1, 1, 1], [1, 0, 1]]
[[1, 1, 1], [1, 1, 0], [1, 0, 1]]
[[1, 1, 1], [1, 1, 1], [1, 0, 0]]
[[1, 1, 0], [1, 1, 0], [1, 1, 1]]
[[1, 1, 0], [1, 1, 1], [1, 1, 0]]
[[1, 1, 1], [1, 1, 0], [1, 1, 0]]
</snippet></ROW><ROW><id>20509766</id><snippet>Could not locate</snippet></ROW><ROW><id>20509810</id><snippet>for i in range(len(paths)):
    pathlist = paths[i]
    for n in range(0, len(pathlist)):
        if pathlist[n] == 2:
            plist = list(pathlist)
            plist[n] = 4
            paths[i] = tuple(plist)
            print(paths[i])
</snippet></ROW><ROW><id>20510054</id><snippet>inspect.getsource</snippet></ROW><ROW><id>20510054</id><snippet>def a():
    pass

import inspect
print inspect.getsource(a)
</snippet></ROW><ROW><id>20510054</id><snippet>dis.dis</snippet></ROW><ROW><id>20510054</id><snippet>inspect</snippet></ROW><ROW><id>20510192</id><snippet>chmod</snippet></ROW><ROW><id>20510192</id><snippet>glob.glob(temp_dir + '/common/tools/meta/*')</snippet></ROW><ROW><id>20510192</id><snippet>os.listdir(temp_dir + '/common/tools/meta/*')</snippet></ROW><ROW><id>20510192</id><snippet>os.chmod</snippet></ROW><ROW><id>20510349</id><snippet>SyntaxErro</snippet></ROW><ROW><id>20510349</id><snippet>list2 = list(set(list1)
</snippet></ROW><ROW><id>20510349</id><snippet>list2 = list(set(list1))
</snippet></ROW><ROW><id>20510754</id><snippet>#!/usr/bin/python

class HelloWorld:

  def __init__(self, string):
    self.string = string

  def run(self):
    print self.string

import pickle
pickle.dump(HelloWorld, open("prog.pkl", 'w'))
HW = pickle.load(open("prog.pkl", 'r'))
x = HW("Hello World")
x.run()
</snippet></ROW><ROW><id>20510754</id><snippet>inspect.getsource()</snippet></ROW><ROW><id>20510754</id><snippet>import types
def newfncn(self):
  print self.string + " 2.0!"
x.run = types.MethodType(newfncn, x)
x.run()
</snippet></ROW><ROW><id>20510754</id><snippet>import types
def newfncn(self):
  exec("print self.string + \" 2.0!\"")
x.run = types.MethodType(newfncn, x)
x.run()
</snippet></ROW><ROW><id>20510921</id><snippet>&gt;</snippet></ROW><ROW><id>20510921</id><snippet>&lt;</snippet></ROW><ROW><id>20510921</id><snippet>if</snippet></ROW><ROW><id>20510921</id><snippet>0 &gt;= n &gt; 0.3</snippet></ROW><ROW><id>20510921</id><snippet>0 &gt;= n and n &gt; 0.3</snippet></ROW><ROW><id>20510921</id><snippet>n</snippet></ROW><ROW><id>20510921</id><snippet>n</snippet></ROW><ROW><id>20510921</id><snippet>0 &lt;= n &lt; 0.3</snippet></ROW><ROW><id>20510921</id><snippet>from random import random

def zeroG():
  n = random()
  if 0 &lt;= n &lt; 0.3:
    print "miss"
  elif 0.3 &lt;= n &lt; 0.7:
    print "1 point"
  elif 0.7 &lt;= n &lt;= 1:
    print "3 points"
  print n
</snippet></ROW><ROW><id>20510980</id><snippet>'\u1212'</snippet></ROW><ROW><id>20510980</id><snippet>\</snippet></ROW><ROW><id>20510980</id><snippet>u</snippet></ROW><ROW><id>20510980</id><snippet>1</snippet></ROW><ROW><id>20510980</id><snippet>2</snippet></ROW><ROW><id>20510980</id><snippet>1</snippet></ROW><ROW><id>20510980</id><snippet>2</snippet></ROW><ROW><id>20510980</id><snippet>unicode('\u1212')</snippet></ROW><ROW><id>20510980</id><snippet>\</snippet></ROW><ROW><id>20510980</id><snippet>u</snippet></ROW><ROW><id>20510980</id><snippet>1</snippet></ROW><ROW><id>20510980</id><snippet>2</snippet></ROW><ROW><id>20510980</id><snippet>1</snippet></ROW><ROW><id>20510980</id><snippet>2</snippet></ROW><ROW><id>20510980</id><snippet>u'\u1212'</snippet></ROW><ROW><id>20510980</id><snippet>ሒ</snippet></ROW><ROW><id>20510980</id><snippet>u'\u1212'
</snippet></ROW><ROW><id>20510980</id><snippet>'\u1212'</snippet></ROW><ROW><id>20510980</id><snippet>u'\u1212'</snippet></ROW><ROW><id>20510980</id><snippet>'\u1212'.decode('unicode-escape')
</snippet></ROW><ROW><id>20511013</id><snippet>file2</snippet></ROW><ROW><id>20511013</id><snippet>with</snippet></ROW><ROW><id>20511013</id><snippet>with open(file_path, 'w') as my_f:
    my_f.write('foo')
</snippet></ROW><ROW><id>20511013</id><snippet>with</snippet></ROW><ROW><id>20511013</id><snippet>main</snippet></ROW><ROW><id>20511013</id><snippet>if __name__ == '__main__':
    main()
    # or just the main body here if it's simple enough
</snippet></ROW><ROW><id>20511013</id><snippet>main</snippet></ROW><ROW><id>20511013</id><snippet>for</snippet></ROW><ROW><id>20511013</id><snippet>else</snippet></ROW><ROW><id>20511013</id><snippet>else</snippet></ROW><ROW><id>20511013</id><snippet>for</snippet></ROW><ROW><id>20511013</id><snippet>while</snippet></ROW><ROW><id>20511013</id><snippet>break</snippet></ROW><ROW><id>20511013</id><snippet>try</snippet></ROW><ROW><id>20511013</id><snippet>except</snippet></ROW><ROW><id>20511013</id><snippet>else</snippet></ROW><ROW><id>20511013</id><snippet>else</snippet></ROW><ROW><id>20511013</id><snippet>try</snippet></ROW><ROW><id>20511013</id><snippet>else</snippet></ROW><ROW><id>20511013</id><snippet>break</snippet></ROW><ROW><id>20511013</id><snippet>else</snippet></ROW><ROW><id>20511119</id><snippet>from foo import fooClass

dict = {'a': fooClass.method1, 'b': fooClass.method2}
</snippet></ROW><ROW><id>20511119</id><snippet>method1</snippet></ROW><ROW><id>20511119</id><snippet>fooClass</snippet></ROW><ROW><id>20511119</id><snippet>fooClass</snippet></ROW><ROW><id>20511119</id><snippet>getattr()</snippet></ROW><ROW><id>20511119</id><snippet>from foo import fooClass

dict = {'a': 'method1', 'b': 'method2'}

bar = fooClass()
method = getattr(bar.__class__, method = dict['a'])
bar.method()
</snippet></ROW><ROW><id>20511139</id><snippet>def haystack(b,e,u):
    i = re.search(b+'(.*)'+e, u)
    if i:     #check if there is any result
        return i.group(1)    #return match

#now try to call it
print haystack("this","str","this is str")    #this should output ' is '
print haystack("no","no", "this is str")      #this should not print anything
</snippet></ROW><ROW><id>20511221</id><snippet>a = []
prompt = "-&gt; "
line = input(prompt)

while line:
    a.append(int(line))
    line = input(prompt)

print(a)
</snippet></ROW><ROW><id>20511221</id><snippet>raw_input()</snippet></ROW><ROW><id>20511221</id><snippet>int()</snippet></ROW><ROW><id>20511221</id><snippet>TypeError</snippet></ROW><ROW><id>20511221</id><snippet>input()</snippet></ROW><ROW><id>20511221</id><snippet>raw_input()</snippet></ROW><ROW><id>20511221</id><snippet>def read_input(prompt):
    x = input(prompt)
    while x:
        yield x
        x = input(prompt)


xs = list(map(int, read_input("-&gt; ")))
print(xs)
</snippet></ROW><ROW><id>20511413</id><snippet>&gt;&gt;&gt; ''.join(sorted(string, key=lambda s:(s.lower(), s)))
'aBbC'
</snippet></ROW><ROW><id>20511413</id><snippet>&gt;&gt;&gt; ''.join(sorted(sorted(string), key=str.lower))
'aBbC'
</snippet></ROW><ROW><id>20511534</id><snippet>firstplace</snippet></ROW><ROW><id>20511534</id><snippet>secondplace</snippet></ROW><ROW><id>20511534</id><snippet>grade</snippet></ROW><ROW><id>20511534</id><snippet>award</snippet></ROW><ROW><id>20511534</id><snippet>award</snippet></ROW><ROW><id>20511534</id><snippet>secondplace</snippet></ROW><ROW><id>20511534</id><snippet>firstplace</snippet></ROW><ROW><id>20511534</id><snippet>def award(firstplace, secondplace):
    print("")     
    print("The Player of the Year is: " + firstplace)
    print("The Runner Up is: " + secondplace)

def grade():
    ...
    award(firstplace, secondplace)
    return

grade()
</snippet></ROW><ROW><id>20511551</id><snippet>def load():
    claimDB = {}
    data = open("claim.DB").read().split("\n")
    for a in data:
       aslist = a.split(",")
       if len(aslist) ==  0:
          pass # Blank Line so skip
       else
          claimDB[data[0]] = [a.strip() for a in data[1:] if len(a)]
</snippet></ROW><ROW><id>20511551</id><snippet>    claim.claimDB = claimDB
</snippet></ROW><ROW><id>20511551</id><snippet>import pickle

def save(claim):
   """ Save between sessions """
   with outfile = open('saveclaims.db' 'wb'):
      pickle.dump(outfile, claim.claimDB)
   finally:
      outfile.flush()
      outfile.close()

def load(claim):
   """ Load saved between sessions """
   with infile = open('saveclaims.db' 'rb'):
      claim.claimDB = pickle.dump(infile)
   finally:
      infile.close()
</snippet></ROW><ROW><id>20511620</id><snippet>words = [x.strip() for x in line.split('\t')]
</snippet></ROW><ROW><id>20511620</id><snippet>line.split('\t')</snippet></ROW><ROW><id>20511735</id><snippet>TypeError</snippet></ROW><ROW><id>20511735</id><snippet>subprocess.Popen("python", "Desktop/gold/gold.py") 
</snippet></ROW><ROW><id>20511735</id><snippet>subprocess.Popen("python Desktop/gold/gold.py")
</snippet></ROW><ROW><id>20511735</id><snippet>args</snippet></ROW><ROW><id>20511735</id><snippet>subprocess.Popen("python Desktop/gold/gold.py", shell = True)
</snippet></ROW><ROW><id>20511748</id><snippet>*  *  *   *  *  python /path/to/your/script/script.py
</snippet></ROW><ROW><id>20511748</id><snippet>*   *   *   *   * cd /path/to/your/script/ &amp;&amp; python script.py
</snippet></ROW><ROW><id>20511748</id><snippet>import os
import MySQLdb as mdb
mdb.connect(read_default_file=os.path.realpath(__file__)+"/my.cnf")
</snippet></ROW><ROW><id>20512080</id><snippet>getattr</snippet></ROW><ROW><id>20512080</id><snippet>setattr</snippet></ROW><ROW><id>20512080</id><snippet>def apply_prefix(self, prefix):
    target_attr = getattr(self,prefix.stat) #dynamically gets attr
    setattr(self,prefix.stat,target_attr+prefix.valu)
</snippet></ROW><ROW><id>20512080</id><snippet>getattr</snippet></ROW><ROW><id>20512080</id><snippet>bogus_prefix = Prefix('huge','bogus',3)
</snippet></ROW><ROW><id>20512080</id><snippet>Prefix</snippet></ROW><ROW><id>20512080</id><snippet>AttributeError</snippet></ROW><ROW><id>20512080</id><snippet>getattr</snippet></ROW><ROW><id>20512080</id><snippet>Prefix</snippet></ROW><ROW><id>20512080</id><snippet>Prefix</snippet></ROW><ROW><id>20512080</id><snippet>dict</snippet></ROW><ROW><id>20512080</id><snippet>apply_prefix</snippet></ROW><ROW><id>20512111</id><snippet>'3'</snippet></ROW><ROW><id>20512111</id><snippet>'2'</snippet></ROW><ROW><id>20512111</id><snippet>'1'</snippet></ROW><ROW><id>20512111</id><snippet>reverse=True</snippet></ROW><ROW><id>20512111</id><snippet>key=lambda ...</snippet></ROW><ROW><id>20512111</id><snippet>key=int</snippet></ROW><ROW><id>20512113</id><snippet>So, is there a better way</snippet></ROW><ROW><id>20512113</id><snippet>&gt;&gt;&gt; myvar = ['say1','say2','say3','say4','say5']
&gt;&gt;&gt; for index, var in enumerate(myvar, 1):
    print "{}-{}".format(index ,var)


1-say1
2-say2
3-say3
4-say4
5-say5
</snippet></ROW><ROW><id>20512113</id><snippet>&gt;&gt;&gt; from collections import OrderedDict
&gt;&gt;&gt; myvar = OrderedDict(
            [('a','say'),
             ('b','say2'),
             ('c','say3'),
             ('d','say4'),
             ('e','say5')])
&gt;&gt;&gt; for key, value in myvar.items():
    print "{}-{}".format(key,value)


a-say
b-say2
c-say3
d-say4
e-say5
</snippet></ROW><ROW><id>20512155</id><snippet>numpy.where()</snippet></ROW><ROW><id>20512155</id><snippet>In [8]: arr = numpy.array(['','1','2','3',''])

In [9]: arr[numpy.where(arr=='')] = '0'

In [10]: arr
Out[10]:
array(['0', '1', '2', '3', '0'],
      dtype='|S1')
</snippet></ROW><ROW><id>20512155</id><snippet>arr[arr==''] = '0'
</snippet></ROW><ROW><id>20512541</id><snippet>data = {
u'entities': {
    u'symbols': [], 
    u'user_mentions': [],
    u'hashtags': [{u'indices': [3, 13], u'text': u'firstpost'},
                  {u'indices': [22, 35], u'text': u'snowinginnyc'}],
    u'urls': [{u'url': u'https://t.co/0sClwIMXKW', 
               u'indices': [36, 59],
               u'expanded_url': u'https://vine.co/v/hQPlQ9l5XDD',
               u'display_url': u'vine.co/v/hQPlQ9l5XDD'}
             ]
}
}
</snippet></ROW><ROW><id>20512541</id><snippet>print data['entities']['urls'][0]['expanded_url']</snippet></ROW><ROW><id>20512543</id><snippet>gcd</snippet></ROW><ROW><id>20512543</id><snippet>from fractions import gcd

ratio = '1875:5625:625'

def solve(ratio):
    numbers = [int(i) for i in ratio.split(':')]
    denominater = reduce(gcd,numbers)
    solved = [i/denominater for i in numbers]
    return ':'.join(str(i) for i in solved)

ratio_2_solve =  solve(ratio)
print ratio_2_solve
#3:9:1
</snippet></ROW><ROW><id>20512543</id><snippet>1875:5625:625 
</snippet></ROW><ROW><id>20512543</id><snippet>3:9:1
</snippet></ROW><ROW><id>20512543</id><snippet>'1875:5625:625:5000:46875:46250'
</snippet></ROW><ROW><id>20512543</id><snippet>3:9:1:8:75:74
</snippet></ROW><ROW><id>20512678</id><snippet>&gt;&gt;&gt; pd.concat([students, pd.DataFrame(marks)], axis=1)
        0     0
0    Alex  0.80
1  Lauren  0.75
</snippet></ROW><ROW><id>20512811</id><snippet>&gt;&gt;&gt; df['Change'] = np.log(df['stat']).diff()
</snippet></ROW><ROW><id>20512999</id><snippet>data[:] = data.dot(transform_matrix.T)
</snippet></ROW><ROW><id>20512999</id><snippet>data.dot(transform_matrix.T)
</snippet></ROW><ROW><id>20512999</id><snippet>For each row:
    Transpose the row
</snippet></ROW><ROW><id>20512999</id><snippet>    Multiply the transposed row by a transformation matrix
</snippet></ROW><ROW><id>20512999</id><snippet>transform_matrix.dot(data.T)</snippet></ROW><ROW><id>20512999</id><snippet>    Transpose the result
</snippet></ROW><ROW><id>20512999</id><snippet>transform_matrix.dot(data.T).T</snippet></ROW><ROW><id>20512999</id><snippet>data.dot(transform_matrix.T)</snippet></ROW><ROW><id>20512999</id><snippet>    Store the result in the original ndarray, overwriting the original row data
</snippet></ROW><ROW><id>20513064</id><snippet>numpy.ndarray</snippet></ROW><ROW><id>20513064</id><snippet>y[:,0]
</snippet></ROW><ROW><id>20513064</id><snippet>&gt;&gt;&gt; a
array([[0, 1, 2],
       [3, 4, 5],
       [6, 7, 8]])
&gt;&gt;&gt; a[:,0]
array([0, 3, 6])
</snippet></ROW><ROW><id>20513064</id><snippet>y[:,0] &gt; number</snippet></ROW><ROW><id>20513064</id><snippet>&gt;&gt;&gt; a[:,0] &gt; 4
array([False, False,  True], dtype=bool)
</snippet></ROW><ROW><id>20513064</id><snippet>True</snippet></ROW><ROW><id>20513064</id><snippet>&gt;&gt;&gt; arr2
array([ 8, 42, 63])
&gt;&gt;&gt; a[:,0] &gt; 4  # Just a reminder ...
array([False, False,  True], dtype=bool)
&gt;&gt;&gt; arr2[a[:,0] &gt; 4]
array([63])
</snippet></ROW><ROW><id>20513101</id><snippet>string = (r'http://www.youtube.com/watch?v=e4lHTj9xFqE'.replace('watch?','')).replace('=','/')
print string
#http://www.youtube.com/v/e4lHTj9xFqE
</snippet></ROW><ROW><id>20513101</id><snippet>new_url = re.sub('watch\?v=','v/',self.video_url)
</snippet></ROW><ROW><id>20513101</id><snippet>def save(self, *args, **kwargs):
    new_url = re.sub('watch\?v=','v/',self.video_url)
    if new_url:
        self.video_url = new_url
        super(Video, self).save(*args, **kwargs)
</snippet></ROW><ROW><id>20513168</id><snippet>&lt;</snippet></ROW><ROW><id>20513168</id><snippet>&lt;</snippet></ROW><ROW><id>20513168</id><snippet>&lt;![CDATA[&lt; here is special char.]]&gt;
</snippet></ROW><ROW><id>20513590</id><snippet>            'It is just outside your room tell,\nme when you are ready and I will send you there.,\nGood luck Carter.\n\nThe aim of the game is to survive the alien invasion as long as possible,\nThere are some special drops the aliens can drop.\nThese include, health, shield, superhealth and triple-bullets.' \
</snippet></ROW><ROW><id>20513664</id><snippet>import pyodbc
cnxn = pyodbc.connect('DSN=myDb;')
cursor = cnxn.cursor()
sql = """   
DECLARE @rawTbl dbo.ClientAddressInputType;
INSERT INTO @rawTbl (ClientID, Addr1) VALUES 
(2, 'higgy'), 
(3, 'jiggy'); 
EXEC dbo.AddClientAddress @rawTbl
"""
cursor.execute(sql)
cursor.commit()
cnxn.close()
</snippet></ROW><ROW><id>20513664</id><snippet>IntegrityError</snippet></ROW><ROW><id>20513664</id><snippet>SET NOCOUNT ON;</snippet></ROW><ROW><id>20513664</id><snippet>sql</snippet></ROW><ROW><id>20513664</id><snippet>import pyodbc
cnxn = pyodbc.connect('DSN=myDb;')
cursor = cnxn.cursor()
sql = """   
SET NOCOUNT ON;
DECLARE @rawTbl dbo.ClientAddressInputType;
INSERT INTO @rawTbl (ClientID, Addr1) VALUES 
(2, 'higgy'), 
(3, 'jiggy'); 
EXEC dbo.AddClientAddress @rawTbl
"""
cursor.execute(sql)
cursor.commit()
cnxn.close()
</snippet></ROW><ROW><id>20513664</id><snippet>Traceback (most recent call last):
  File "C:\Users\Gord\Desktop\pyOdbc.py", line 12, in &lt;module&gt;
    cursor.execute(sql)
IntegrityError: ('23000', '[23000] [Microsoft][SQL Server Native Client 10.0][SQL Server]The INSERT statement conflicted with the FOREIGN KEY constraint "FK_ClientAddresses_Clients". The conflict occurred in database "myDb", table "dbo.Clients", column \'ClientID\'. (547) (SQLExecDirectW); [01000] [Microsoft][SQL Server Native Client 10.0][SQL Server]The statement has been terminated. (3621)')
</snippet></ROW><ROW><id>20513757</id><snippet>&gt;&gt;&gt;num = '1234567'
&gt;&gt;&gt;x=[num[i:i+3] for i in range(0, len(num), 3)]
&gt;&gt;&gt;x
['123', '456', '7']
&gt;&gt;&gt;'.'.join(x)
'123.456.7'
</snippet></ROW><ROW><id>20513757</id><snippet>num[i:i+3]</snippet></ROW><ROW><id>20513757</id><snippet>&gt;&gt;&gt;num = '2333'
&gt;&gt;&gt;num[0:2]
23 
&gt;&gt;&gt;'.'.join('23')
2.3
</snippet></ROW><ROW><id>20513757</id><snippet>1.234.567</snippet></ROW><ROW><id>20513757</id><snippet>&gt;&gt;&gt; num = '1234567'
&gt;&gt;&gt; num[::-1]
'7654321'
&gt;&gt;&gt; '.'.join(num[::-1][i:i+3] for i in range(0, len(num), 3))[::-1]
'1.234.567'
</snippet></ROW><ROW><id>20514028</id><snippet>Django 1.5</snippet></ROW><ROW><id>20514028</id><snippet>django.contrib.staticfiles</snippet></ROW><ROW><id>20514101</id><snippet>sys.stderr</snippet></ROW><ROW><id>20514101</id><snippet>stderr</snippet></ROW><ROW><id>20514101</id><snippet>SimpleXMLRPCRequestHandler</snippet></ROW><ROW><id>20514101</id><snippet>log_message</snippet></ROW><ROW><id>20514101</id><snippet>logging</snippet></ROW><ROW><id>20514101</id><snippet>BaseHTTPRequestHandler.log_message</snippet></ROW><ROW><id>20514101</id><snippet>BaseHTTPServer</snippet></ROW><ROW><id>20514101</id><snippet>def log_message(self, format, *args):
    """Log an arbitrary message.

    This is used by all other logging functions.  Override
    it if you have specific logging wishes.

    The first argument, FORMAT, is a format string for the
    message to be logged.  If the format string contains
    any % escapes requiring parameters, they should be
    specified as subsequent arguments (it's just like
    printf!).

    The client host and current date/time are prefixed to
    every message.

    """

    sys.stderr.write("%s - - [%s] %s\n" %
                     (self.address_string(),
                      self.log_date_time_string(),
                      format%args))
</snippet></ROW><ROW><id>20514614</id><snippet>url(r'^phrase/(?P&lt;lang&gt;[_A-Za-z]+)/(?P&lt;phrase&gt;([^/]+))/$', 'gs.langdb.views.phrases'),
</snippet></ROW><ROW><id>20514831</id><snippet>import bbb as b
hello = b.a.hello
</snippet></ROW><ROW><id>20514869</id><snippet>PrettyPrinter</snippet></ROW><ROW><id>20514869</id><snippet>_format</snippet></ROW><ROW><id>20514869</id><snippet>import pprint

class P(pprint.PrettyPrinter):
  def _format(self, object, stream, indent, allowance, context, level):
    if isinstance(object, basestring):
      if len(object) &gt; 20:
        object = object[:20] + '...'
    return pprint.PrettyPrinter._format(
      self, object, stream, indent, allowance, context, level)

P().pprint(range(3))
P().pprint('x' * 1000)
</snippet></ROW><ROW><id>20514869</id><snippet>[0, 1, 2]
'xxxxxxxxxxxxxxxxxxxx...'
</snippet></ROW><ROW><id>20515103</id><snippet>&gt;&gt;&gt; len(d1)
121
&gt;&gt;&gt; len(d2)
120
</snippet></ROW><ROW><id>20515103</id><snippet>mdates.drange</snippet></ROW><ROW><id>20515103</id><snippet>dates</snippet></ROW><ROW><id>20515103</id><snippet>datetimes</snippet></ROW><ROW><id>20515103</id><snippet>mdates.drange</snippet></ROW><ROW><id>20515103</id><snippet>datetimes</snippet></ROW><ROW><id>20515103</id><snippet>In [50]: dstart = dt.datetime(2013,12,5)
In [51]: dend = dt.datetime(2013,12,10)
In [52]: d1 = pd.date_range(dstart, dend, freq='H')
In [53]: d2 = mdates.drange(dstart, dend, dt.timedelta(hours=1))
In [54]: print d1[2]
2013-12-05 02:00:00

In [55]: print pd.Timestamp(mdates.num2date(d2[2]))
2013-12-05 02:00:00+00:00
</snippet></ROW><ROW><id>20515103</id><snippet>mdates.drange</snippet></ROW><ROW><id>20515103</id><snippet>dend</snippet></ROW><ROW><id>20515103</id><snippet>pd.date_range</snippet></ROW><ROW><id>20515103</id><snippet>mdates.drange</snippet></ROW><ROW><id>20515103</id><snippet>date</snippet></ROW><ROW><id>20515130</id><snippet>while</snippet></ROW><ROW><id>20515130</id><snippet>import random
dice = None
while dice not in (4, 6, 12):
    dice = int(input("What sided dice do you want to use? (e.g. 4, 6 or 12): ")
if dice == 4:
            random_number = int(random.randrange(1,4))
            print ("You selected a 4 sided dice")
            print ("Your dice has rolled ")
            print (random_number)
elif dice == 6:
            random_number2 = int(random.randrange(1,6))
            print ("You selected a 6 sided dice")
            print("Your dice has rolled ")
            print (random_number2)

elif dice == 12:
            random_number3 = int(random.randrange(1,12))
            print ("You selected a 12 sided dice")
            print("Your dice has rolled  ")
            print (random_number3)
</snippet></ROW><ROW><id>20515974</id><snippet>from parameterizedtestcase import ParameterizedTestCase

class MyTests(ParameterizedTestCase):
    @ParameterizedTestCase.parameterize(
        ("value", "expected"),
        [
            (True, True),
            (False, False),
        ]
    )
    def test_identical(self, value, expected):
        self.assertTrue(value is expected)
</snippet></ROW><ROW><id>20515974</id><snippet>import pytest

@pytest.mark.parametrize(
    ("value", "expected"),
    [
        (True, True),
        (False, False),
    ]
)
def test_identical(value, expected):
    assert value is expected
</snippet></ROW><ROW><id>20516885</id><snippet>&gt;&gt;&gt; a = [(2,0),(3,0),(4,2),(10,3),(11,5)]
&gt;&gt;&gt; [k for i,j in enumerate(a, 1) for k in [j] + [(0,n) for n in range(j[1]+1, a[min(i, len(a)-1)][1])]]
[(2, 0), (3, 0), (0, 1), (4, 2), (10, 3), (0, 4), (11, 5)]
</snippet></ROW><ROW><id>20516885</id><snippet>&gt;&gt;&gt; [k for i,j in zip(a, a[1:]) for k in [i] + [(0,n) for n in range(i[1]+1, j[1])]] + a[-1:]
[(2, 0), (3, 0), (0, 1), (4, 2), (10, 3), (0, 4), (11, 5)]
</snippet></ROW><ROW><id>20516885</id><snippet>a</snippet></ROW><ROW><id>20516885</id><snippet>a[1:]</snippet></ROW><ROW><id>20516885</id><snippet>&gt;&gt;&gt; a_iter = iter(a); next(a_iter)
(2, 0)
&gt;&gt;&gt; [k for i,j in zip(a, a_iter) for k in [i] + [(0,n) for n in range(i[1]+1, j[1])]] + a[-1:]
[(2, 0), (3, 0), (0, 1), (4, 2), (10, 3), (0, 4), (11, 5)]
</snippet></ROW><ROW><id>20516933</id><snippet>raster = (raster1 + raster2) / 2
</snippet></ROW><ROW><id>20516933</id><snippet>np.mean</snippet></ROW><ROW><id>20516933</id><snippet>np.mean</snippet></ROW><ROW><id>20516943</id><snippet>{{form.media.css}}</snippet></ROW><ROW><id>20516943</id><snippet>{{form.media.js}}</snippet></ROW><ROW><id>20517120</id><snippet>search</snippet></ROW><ROW><id>20517120</id><snippet>match</snippet></ROW><ROW><id>20517120</id><snippet>IN</snippet></ROW><ROW><id>20517120</id><snippet>NS</snippet></ROW><ROW><id>20517120</id><snippet>+</snippet></ROW><ROW><id>20517120</id><snippet>regex = re.compile(r'IN\s+NS\s')
for line in output:
    if regex.search(line):
        print(line)
</snippet></ROW><ROW><id>20517159</id><snippet>delete()</snippet></ROW><ROW><id>20517159</id><snippet>pre_delete</snippet></ROW><ROW><id>20517159</id><snippet>instance.content.delete(save=False)
</snippet></ROW><ROW><id>20517615</id><snippet>list_2</snippet></ROW><ROW><id>20517615</id><snippet>for partial in list_1:
    if any(partial in value for value in list_2):
        print 'element present'
    else:
        print 'absent'
</snippet></ROW><ROW><id>20517615</id><snippet>any()</snippet></ROW><ROW><id>20517636</id><snippet>_l = re.sub(r'(?:\=|\=\&gt;|\()\s*(true|false|null)\s*(?:\)|\;|\,)', lambda pattern: pattern.group(0).upper(), _l)
</snippet></ROW><ROW><id>20517637</id><snippet>&gt;&gt;&gt; my_slice = slice(0, 1)
&gt;&gt;&gt; my_list = [1, 2, 3]
&gt;&gt;&gt; my_list[my_slice]
[1]
</snippet></ROW><ROW><id>20517637</id><snippet>my_list[0:1]</snippet></ROW><ROW><id>20517655</id><snippet>some_list[-1] == element
</snippet></ROW><ROW><id>20517655</id><snippet>True</snippet></ROW><ROW><id>20517655</id><snippet>some_list</snippet></ROW><ROW><id>20517655</id><snippet>element</snippet></ROW><ROW><id>20517655</id><snippet>&gt;&gt;&gt; lst = ['foo', 'bar', 'baz']
&gt;&gt;&gt; lst[-1] == 'foo'
False
&gt;&gt;&gt; lst[-1] == 'baz'
True
</snippet></ROW><ROW><id>20517655</id><snippet>element</snippet></ROW><ROW><id>20517655</id><snippet>True</snippet></ROW><ROW><id>20517655</id><snippet>some_list[-1] == element and some_list.index(element) == len(some_list) - 1
</snippet></ROW><ROW><id>20517655</id><snippet>element</snippet></ROW><ROW><id>20517655</id><snippet>some_list</snippet></ROW><ROW><id>20517655</id><snippet>list.index()</snippet></ROW><ROW><id>20517655</id><snippet>len(some_list)</snippet></ROW><ROW><id>20517655</id><snippet>some_list[-1] == element</snippet></ROW><ROW><id>20517680</id><snippet>length</snippet></ROW><ROW><id>20517680</id><snippet>0</snippet></ROW><ROW><id>20517680</id><snippet>zeros = [format(n, '016b').count('0') for n in range(1&lt;&lt;16)]
ones = [format(n, '016b').count('1') for n in range(1&lt;&lt;16)]
</snippet></ROW><ROW><id>20517680</id><snippet>zeros = [20 - bin(n).count('1') for n in range(1&lt;&lt;20)]
ones = [bin(n).count('1') for n in range(1&lt;&lt;20)]
</snippet></ROW><ROW><id>20517768</id><snippet>def fileDownload(self, some_Id, range=None):
    # [...] something happens here
    # get the Amazon URL 
    fileUrl = we_get_the_amazon_url_here
    req = urllib2.urlopen(fileUrl)
    if len(range):
        req.headers['Range']='bytes=%s-%s' % (range[0], range[1])

    return req.read()
</snippet></ROW><ROW><id>20517860</id><snippet>io</snippet></ROW><ROW><id>20517860</id><snippet>'\n'</snippet></ROW><ROW><id>20517860</id><snippet>'\r\n'</snippet></ROW><ROW><id>20517860</id><snippet>from io import open
with open("test.txt", "w+", newline="\r\n") as f:
    f.write(u"Hello World\n")
</snippet></ROW><ROW><id>20517860</id><snippet>0d 0a</snippet></ROW><ROW><id>20517860</id><snippet>\r\n</snippet></ROW><ROW><id>20517860</id><snippet>$ hexdump -C test.txt
00000000  48 65 6c 6c 6f 20 57 6f  72 6c 64 0d 0a           |Hello World..|
</snippet></ROW><ROW><id>20517860</id><snippet>line.replace('\r\n','\n').replace('\r','\n')</snippet></ROW><ROW><id>20517860</id><snippet>from io import open
with open(infname, 'r') as inf, open(outfname, "w+", newline="\r\n") as outf:
    outf.writelines(inf.readlines())
</snippet></ROW><ROW><id>20517949</id><snippet>usecols</snippet></ROW><ROW><id>20517949</id><snippet>read_csv</snippet></ROW><ROW><id>20517949</id><snippet>cols_to_use = ['col1', 'col2'] # or [0,1,2,3]
df = pd.read_csv('mycsv.csv', usecols= cols_to_use)
</snippet></ROW><ROW><id>20517949</id><snippet>df = df.drop(labels='column_to_delete', axis=1) # axis 1 drops columns, 0 will drop rows that match index value in labels
</snippet></ROW><ROW><id>20517949</id><snippet>tail</snippet></ROW><ROW><id>20517949</id><snippet>n</snippet></ROW><ROW><id>20517949</id><snippet>def df_from_csv(path):
    df = read_csv(path, nrows=1) # read just first line for columns
    columns = df.columns.tolist() # get the columns
    cols_to_use = columns[:len(columns)-1] # drop the last one
    df = read_csv(path, usecols=cols_to_use)
    return df
</snippet></ROW><ROW><id>20517982</id><snippet>my_array</snippet></ROW><ROW><id>20517982</id><snippet>&gt;&gt;&gt; my_array
array([[[1, 1, 1, 1, 1],
        [2, 2, 2, 2, 2]],

       [[3, 3, 3, 3, 3],
        [4, 4, 4, 4, 4]]])
</snippet></ROW><ROW><id>20517982</id><snippet>&gt;&gt;&gt; my_array.mean(axis=0)
array([[ 2.,  2.,  2.,  2.,  2.],
       [ 3.,  3.,  3.,  3.,  3.]])
</snippet></ROW><ROW><id>20517982</id><snippet>x</snippet></ROW><ROW><id>20517982</id><snippet>sums = 0
counter = 0
for x in my_array:
  sums += x
  counter += 1
new = sums / counter
</snippet></ROW><ROW><id>20517982</id><snippet>data = []
for x in my_array:
  data.append(x)
new = np.dstack(data).mean(axis=2)
</snippet></ROW><ROW><id>20518366</id><snippet>&gt;&gt;&gt; object.__add__
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
AttributeError: type object 'object' has no attribute '__add__'
</snippet></ROW><ROW><id>20518366</id><snippet>__eq__</snippet></ROW><ROW><id>20518366</id><snippet>__init__</snippet></ROW><ROW><id>20518510</id><snippet>import datetime

DAY, NIGHT = 1, 2
def check_time(time_to_check, on_time, off_time):
    if on_time &gt; off_time:
        if time_to_check &gt; on_time or time_to_check &lt; off_time:
            return NIGHT, True
    elif on_time &lt; off_time:
        if time_to_check &gt; on_time and time_to_check &lt; off_time:
            return DAY, True
    elif time_to_check == on_time:
        return None, True
    return None, False


on_time = datetime.time(23,30)
off_time = datetime.time(4,15)
timenow = datetime.datetime.now().time()
current_time = datetime.datetime.now().time()

when, matching = check_time(current_time, on_time, off_time)

if matching:
    if when == NIGHT:
        print("Night Time detected.")
    elif when == DAY:
        print("Day Time detected.")
</snippet></ROW><ROW><id>20518826</id><snippet>category</snippet></ROW><ROW><id>20518826</id><snippet>category = get_object_or_404(Category, slug=slug)
</snippet></ROW><ROW><id>20518826</id><snippet>category_view()</snippet></ROW><ROW><id>20518826</id><snippet>404</snippet></ROW><ROW><id>20518882</id><snippet>import os
import time
fileName = 'test'
originalTime = os.path.getmtime(fileName)

while(True):
    if(os.path.getmtime(fileName) &gt; originalTime):
        with open(fileName, 'r') as f:
            print "\n" + f.read(),
        originalTime = os.path.getmtime(fileName)
    time.sleep(0.1)
</snippet></ROW><ROW><id>20518908</id><snippet>AUTOINCREMENT</snippet></ROW><ROW><id>20518908</id><snippet>ROWID</snippet></ROW><ROW><id>20518908</id><snippet>ROWID</snippet></ROW><ROW><id>20518908</id><snippet>ROWID</snippet></ROW><ROW><id>20518908</id><snippet>NULL</snippet></ROW><ROW><id>20518908</id><snippet>ROWID</snippet></ROW><ROW><id>20518908</id><snippet>ROWID</snippet></ROW><ROW><id>20518908</id><snippet>ROWID</snippet></ROW><ROW><id>20518908</id><snippet>ROWID</snippet></ROW><ROW><id>20518908</id><snippet>ROWIDs</snippet></ROW><ROW><id>20518908</id><snippet>ROWID</snippet></ROW><ROW><id>20518908</id><snippet>ROWID</snippet></ROW><ROW><id>20518908</id><snippet>ROWIDs</snippet></ROW><ROW><id>20518908</id><snippet>ROWID</snippet></ROW><ROW><id>20519196</id><snippet>sys.path.append(/var/tmp/mypython/media/)</snippet></ROW><ROW><id>20519196</id><snippet>$ cat &gt;&gt; /var/tmp/mypython/stackoverflow.py &lt;&lt;\EOF
import sys
sys.path.append("/var/tmp/mypython/")
from myglobal import parsePresets
EOF
$ python /var/tmp/mypython/stackoverflow.py
</snippet></ROW><ROW><id>20519196</id><snippet>Running: /var/tmp/mypython/media/stackoverflow.py (Wed Dec 11 13:37:25 2013)



Execution Successful!
</snippet></ROW><ROW><id>20519289</id><snippet>from tkFileDialog import askopenfilename

fname = askopenfilename()
</snippet></ROW><ROW><id>20519323</id><snippet>lst</snippet></ROW><ROW><id>20519323</id><snippet>close</snippet></ROW><ROW><id>20519323</id><snippet>        while lst[x] != close:
                ...
                if x!=len(lst)-1:
                   x=x+1
</snippet></ROW><ROW><id>20519323</id><snippet>        while x&lt;len(lst) and lst[x] != close:
                ...
                x=x+1
</snippet></ROW><ROW><id>20519323</id><snippet>x</snippet></ROW><ROW><id>20519323</id><snippet>        for item in lst:
            if item == close:
                break
            ... 
</snippet></ROW><ROW><id>20519323</id><snippet>x</snippet></ROW><ROW><id>20519323</id><snippet>        for x, item in enumerate(lst):
            if item == close:
                break
            ... 
</snippet></ROW><ROW><id>20519620</id><snippet>index.py</snippet></ROW><ROW><id>20519620</id><snippet>from apis import app

if __name__ == "__main__":
    app.run(host='0.0.0.0',debug=True)
</snippet></ROW><ROW><id>20519620</id><snippet>app</snippet></ROW><ROW><id>20519620</id><snippet>app.run</snippet></ROW><ROW><id>20519620</id><snippet>if __name__ == "__main__":</snippet></ROW><ROW><id>20519620</id><snippet>app.run(...)</snippet></ROW><ROW><id>20519629</id><snippet>saveData</snippet></ROW><ROW><id>20519629</id><snippet>start_new_thread</snippet></ROW><ROW><id>20519629</id><snippet>thread.start_new_thread</snippet></ROW><ROW><id>20519629</id><snippet>thread.start_new_thread</snippet></ROW><ROW><id>20519629</id><snippet>thread.start_new_thread(saveData,(slice1,slice2,slice3,dset),("Thread-"+str(i),1,))
</snippet></ROW><ROW><id>20519629</id><snippet>Threading</snippet></ROW><ROW><id>20519629</id><snippet>thread</snippet></ROW><ROW><id>20519726</id><snippet>process_csv(filecsv)</snippet></ROW><ROW><id>20519726</id><snippet>insert</snippet></ROW><ROW><id>20519726</id><snippet>def insert(cur, users): 
    for user in users:
        cur.execute("INSERT INTO users (name, location) VALUES(%s, %s)", 
        (user.name, user.location))
</snippet></ROW><ROW><id>20519920</id><snippet>&gt;&gt;&gt; my_str = 'soooo hiiiii whyyyy done'
&gt;&gt;&gt; import re
&gt;&gt;&gt; regex = re.compile(r"(.)\1{2}")
&gt;&gt;&gt; [word for word in my_str.split() if regex.search(word)]
['soooo', 'hiiiii', 'whyyyy']
</snippet></ROW><ROW><id>20519920</id><snippet>(.)    # Match any character, capture it in group number 1
\1{2}  # Try to match group number 1 here, twice.
</snippet></ROW><ROW><id>20519920</id><snippet>countessship</snippet></ROW><ROW><id>20519920</id><snippet>laparohysterosalpingooophorectomy</snippet></ROW><ROW><id>20519973</id><snippet>&gt;&gt;&gt;arr = [('first_name', u'Renier'), ('second_name', u''), ('surname', u'de Bruyn'), ('own_transport', u'True'), ('id_number', u'910920254081'), ('id_type', u'IDNumber'), ('id_nationality', u'ZA'), ('disabilities_list', u'Intellectual Disability'), ('disabilities_list', u'Memory Loss'), ('disabilities_list', u'Mental Illness'), ('disabilities_list', u'Physical Disability'), ('disabilities_list', u'Speech and Language Disorders'),...]
&gt;&gt;&gt;
&gt;&gt;&gt;[k[1] for k in arr if k[0] == "disabilities_list[]"] 
[u'Intellectual Disability', u'Memory Loss', ...]
</snippet></ROW><ROW><id>20519973</id><snippet>&gt;&gt;&gt;[item[1] for item in arr.items() if item[0] == "disabilities_list"]  #  will do, what you want
</snippet></ROW><ROW><id>20520052</id><snippet>import thread</snippet></ROW><ROW><id>20520052</id><snippet>import threading</snippet></ROW><ROW><id>20520052</id><snippet>thread.start_new_thread(saveData,(slice1, slice2, slice3, dset))
</snippet></ROW><ROW><id>20520052</id><snippet>threads_running = []          # keep track of your threads
# thread starting loop
for i in xrange(48):     # in this case xrange is what you really want!
    ...                  # do your data preparations here (slice, etc.)
    thread = threading.Thread(target=saveDate,
                              args=(slice1, slice2, slice3, dset))
    thread.start()
    threads_running.append(thread)   # "register" the running thread

# thread waiting to finish loop
while threads_running:            
    thread = thread_lst[i]
    thread.join(0.1)         # wait 0.1 second for thread to finish 
    if thread.is_alive():    # else check next thread
        continue
    else:
        print "Thread %s finished" % threads_running.pop(i)
</snippet></ROW><ROW><id>20520481</id><snippet>extract</snippet></ROW><ROW><id>20520481</id><snippet>open</snippet></ROW><ROW><id>20520481</id><snippet>read</snippet></ROW><ROW><id>20520481</id><snippet>with zipfile.ZipFile(path_to_zip) as zf:
    for info in zf.infolist():
        outpath = create the output path (original path is in info.filename)
        bufsiz = 16 * 1024 # or more to speed things up

        with zf.open(info) as fin, open(outpath, 'w') as fout:
            while True:
                buf = fin.read(bufsiz)
                if not buf:
                    break
                fout.write(buf)
</snippet></ROW><ROW><id>20520523</id><snippet>|urlencode</snippet></ROW><ROW><id>20520523</id><snippet>import re
...
def playlist_url(self):
    """
    Generates a playlist URL
    """
    new_url = re.sub(r'^(http:\/\/)([\w\W]+)&amp;list=([\w\W]+)(\&amp;index=[\d]+)$', r'//\2?list=\3', self.video_url)
    return new_url
...
</snippet></ROW><ROW><id>20520573</id><snippet>axes</snippet></ROW><ROW><id>20520573</id><snippet>axes</snippet></ROW><ROW><id>20520573</id><snippet>DataFrame.plot()</snippet></ROW><ROW><id>20520573</id><snippet>from matplotlib.ticker import MaxNLocator

fig = plt.figure()
axes = fig.add_subplot(111)
axes.xaxis.set_major_locator(MaxNLocator(symmetric=True))

upsrt = pd.DataFrame({'DAC3' : pd.Series([-2.1, -1., 0., 1., 2.]),
                      'norm' : pd.Series([5., 3., 6., 8., 2.])})

downsrt = pd.DataFrame({'DAC3' : pd.Series([-2., -1., 0., 1., 2.]),
                        'norm' : pd.Series([3., 7., 3., 6., 7.])})

upsrt.plot(x='DAC3', y='norm', color='red', label='Up',ax=axes)

downsrt.plot(x='DAC3', y='norm', color='blue', label='Down', ax=axes)

plt.show()
</snippet></ROW><ROW><id>20520612</id><snippet>next</snippet></ROW><ROW><id>20520612</id><snippet>&gt;&gt;&gt; a = ('one', 'two')
&gt;&gt;&gt; b = ('ten', 'ten')
&gt;&gt;&gt; z = [('four', 'five', 'six'), ('one', 'two', 'twenty')]
&gt;&gt;&gt; next((x[2] for x in z if x[:2] == a), None)
'twenty'
&gt;&gt;&gt; next((x[2] for x in z if x[:2] == b), None)
&gt;&gt;&gt;
</snippet></ROW><ROW><id>20520728</id><snippet>{{ variable }}</snippet></ROW><ROW><id>20520728</id><snippet>function displayRoads(map) {
  {% for create_lat_lng in get_lat_lng %}
      {% for lat_lng in create_lat_lng %}
        var points = new google.maps.MVCArray();
        points.push(new google.maps.LatLng({{ lat_lng.0.lat }}, {{ lat_lng.0.lng }}));
        points.push(new google.maps.LatLng({{ lat_lng.1.lat }}, {{ lat_lng.1.lng }}));
        createPolyline(map, points);
      {% endfor %}
  {% endfor %}
}
</snippet></ROW><ROW><id>20520728</id><snippet>{{ lat_lng.0.lat }}</snippet></ROW><ROW><id>20520728</id><snippet>lat_lng</snippet></ROW><ROW><id>20520728</id><snippet>lat</snippet></ROW><ROW><id>20520728</id><snippet>lat_lng</snippet></ROW><ROW><id>20520946</id><snippet>def evaluate_hand(value_of_hand, hand_no, hand_of_dealer):
    """
    Evalutates  ....

    @param value_of_hand the value for the current hand.
    @param hand_no the number of the hand. Have to be a value of the interval [1,4]
    @param hand_of_dealer contains the value of the dealers hand
    """
    hand_to_str_dispatcher = {1: "First hand", 2: "Second hand", 3: "Thrid hand", 4: "Fourth hand"}
    print "Recap of that round"
    if value_of_hand &lt; 18:
        print ""
        print "{0}: You stayed on {1}".format(hand_to_str_dispatcher[hand_no],value_of_hand)
        if hand_of_dealer &gt; 18:
            print "*You won on First Hand*" "  (Dealer busted with {0})".format(hand_of_dealer)
        elif hand_of_dealer &lt; 18:
            print "            Dealer stayed on {0}".format(hand_of_dealer)
            if hand_of_dealer &gt; value_of_hand:
                print "-You lost on {0}-  (Dealer was closer to 18)".format(hand_to_str_dispatcher[hand_no])
            elif hand_of_dealer &lt; value_of_hand:
                print "*You won on {0}* (You were closer to 18 than dealer)".format(hand_to_str_dispatcher[hand_no])

            elif hand_of_dealer == value_of_hand:
                    print "*You tied on {0}* (You and dealer both had {1})".format(hand_to_str_dispatcher[hand_no], hand_of_dealer)
    # .....
    # adjust the subsequent code accordingly

def recap_round():
    hand_of_dealer = 10
    v1 = 19
    v2 = 2
    v3 = 20
    v4 = 22
    hands = [v1, v2, v3, v4]
    print "Recap of that round"
    for i in range(0, len(hands)):
        evaluate_hand(hands[i], i + 1, hand_of_dealer)
</snippet></ROW><ROW><id>20520946</id><snippet>recap_round</snippet></ROW><ROW><id>20520972</id><snippet>logger.getLogger()</snippet></ROW><ROW><id>20520972</id><snippet>setLevel()</snippet></ROW><ROW><id>20520972</id><snippet>logger.getLogger("mymodules")</snippet></ROW><ROW><id>20520972</id><snippet>setLevel()</snippet></ROW><ROW><id>20521359</id><snippet>Queue</snippet></ROW><ROW><id>20521359</id><snippet>import pygame
from pygame.color import Color
from Queue import Queue
from threading import Thread

q = Queue()

def worker():
    GPIO.setmode(GPIO.BCM)
    GPIO.setup(2, GPIO.IN, pull_up_down=GPIO.PUD_UP)
    def my_callback(channel):
        q.put(True)
    GPIO.add_event_detect(2,GPIO.BOTH, callback=my_callback)

    while True:
        print "Waiting for input."
        sleep(60)
    GPIO.cleanup()


t = Thread(target=worker)
t.daemon = True
t.start()

pygame.init()

screen = pygame.display.set_mode([640,640])
clock  = pygame.time.Clock()
font   = pygame.font.SysFont("consolas", 25, True)
count  = 0
pygame.display.set_caption("Test")

done = False
while not done:
    screen.fill(Color('black'))
    for event in pygame.event.get(): # User did something
        if event.type == pygame.QUIT: # If user clicked close
            done = True
    try: 
        q.get()
        count += 1
    except: pass
    output_string = "ACTUAL          %s"  % count
    text = font.render(output_string, True, Color('red'))
    screen.blit(text, [250,420])
    clock.tick(20)
    pygame.display.flip()
</snippet></ROW><ROW><id>20521551</id><snippet>PATH</snippet></ROW><ROW><id>20521892</id><snippet>repr()</snippet></ROW><ROW><id>20521892</id><snippet>str()</snippet></ROW><ROW><id>20521892</id><snippet>repr()</snippet></ROW><ROW><id>20521892</id><snippet>&gt;&gt;&gt; example = 'bar'
&gt;&gt;&gt; str(example)
'bar'
&gt;&gt;&gt; repr(example)
"'bar'"
&gt;&gt;&gt; `example`
"'bar'"
</snippet></ROW><ROW><id>20521892</id><snippet>str()</snippet></ROW><ROW><id>20521892</id><snippet>repr()</snippet></ROW><ROW><id>20521892</id><snippet>str.format()</snippet></ROW><ROW><id>20521892</id><snippet>&gt;&gt;&gt; print 'Hello world! The answer is, as always, {}'.format(42)
Hello world! The answer is, as always, 42
</snippet></ROW><ROW><id>20522116</id><snippet>SyntaxError</snippet></ROW><ROW><id>20522116</id><snippet>format</snippet></ROW><ROW><id>20522116</id><snippet>printcolvolt = ["V:{}".format(col.count(0)) for col in cols]
                                          ^
</snippet></ROW><ROW><id>20522116</id><snippet>col.count(0) for col in cols</snippet></ROW><ROW><id>20522116</id><snippet>numgood = sum(row.count(2) + row.count(3) for row in rows)
</snippet></ROW><ROW><id>20522116</id><snippet>numtiles</snippet></ROW><ROW><id>20522232</id><snippet>         closeButton.Bind(wx.EVT_BUTTON, self.OnClose)
</snippet></ROW><ROW><id>20522232</id><snippet>def OnClose(self, event):
    self.Destroy()
</snippet></ROW><ROW><id>20522249</id><snippet>from collections import Counter

c = Counter([i for j in trainY for i in j])

print c['php'] # Returns 2
print c.most_common(5) # Print the 5 most common items.
</snippet></ROW><ROW><id>20522272</id><snippet>A = np.array([[ 0, 482, 1900, 961, 579, 56.],
              [ 0, 530, 1906, 914, 584, 44.],
              [ 43, 0, 1932, 948, 556, 51.],
              [ 0, 482, 1917, 946, 581, 52.],
              [ 0, 520, 1935, 878, 589, 55.]])

A[:, np.all(A &gt; 0, axis=0)]
</snippet></ROW><ROW><id>20522272</id><snippet>array([[ 1900.,   961.,   579.,    56.],
       [ 1906.,   914.,   584.,    44.],
       [ 1932.,   948.,   556.,    51.],
       [ 1917.,   946.,   581.,    52.],
       [ 1935.,   878.,   589.,    55.]])
</snippet></ROW><ROW><id>20522272</id><snippet>np.any(A == 0, axis=0)</snippet></ROW><ROW><id>20522384</id><snippet>return</snippet></ROW><ROW><id>20522384</id><snippet>def encrypt(string):
    result = []
    letters = list(string)
    for letter in letters:
        encrypted_letter = encrypt_letter(letter)
        result.append(encrypted_letter)
    return "".join(result) # change to return

e = encrypt("hello")
print e # will give you expected output
</snippet></ROW><ROW><id>20522384</id><snippet>def encrypt(string):
    cipher = {'a': 'n', 'b': 'o', 'c': 'p', 'd': 'q',
              'e': 'r', 'f': 's', 'g': 't', 'h': 'u',
              'i': 'v', 'j': 'w', 'k': 'x', 'l': 'y',
              'm': 'z', 'n': 'a', 'o': 'b', 'p': 'c',
              'q': 'd', 'r': 'e', 's': 'f', 't': 'g',
              'u': 'h', 'v': 'i', 'w': 'j', 'x': 'k',
              'y': 'l', 'z': 'm'}
    return ''.join(cipher[s] for s in string.lower())
</snippet></ROW><ROW><id>20522537</id><snippet>special_cat = cats.get("george")
if special_cat is not None:
    # do something with special_cat
</snippet></ROW><ROW><id>20523101</id><snippet>p.sum()</snippet></ROW><ROW><id>20523101</id><snippet>&gt;&gt;&gt; sumOfP = p.sum()
&gt;&gt;&gt; sumOfP
x    6
y    6
dtype: int64
</snippet></ROW><ROW><id>20523101</id><snippet>Series</snippet></ROW><ROW><id>20523101</id><snippet>x</snippet></ROW><ROW><id>20523101</id><snippet>y</snippet></ROW><ROW><id>20523101</id><snippet>DataFrame</snippet></ROW><ROW><id>20523101</id><snippet>totals</snippet></ROW><ROW><id>20523101</id><snippet>&gt;&gt;&gt; p = pandas.DataFrame({ 0 : [1,2,3], 'y' : [1,2,3] })
&gt;&gt;&gt; totals["sumOfP"] = p.sum()
&gt;&gt;&gt; totals
   someOtherSeries  sumOfP
0                1       6
1                2     NaN

[2 rows x 2 columns]
</snippet></ROW><ROW><id>20523101</id><snippet>&gt;&gt;&gt; totals["sumofP"] = sumOfP.values
&gt;&gt;&gt; totals
   someOtherSeries  sumofP
0                1       6
1                2       6

[2 rows x 2 columns]
</snippet></ROW><ROW><id>20523101</id><snippet>&gt;&gt;&gt; sumOfP.reset_index(drop=True)
0    6
1    6
dtype: int64
&gt;&gt;&gt; totals["sumOfP"] = sumOfP.reset_index(drop=True)
&gt;&gt;&gt; totals
   someOtherSeries  sumOfP
0                1       6
1                2       6

[2 rows x 2 columns]
</snippet></ROW><ROW><id>20523181</id><snippet>tcsh</snippet></ROW><ROW><id>20523181</id><snippet>env</snippet></ROW><ROW><id>20523181</id><snippet>echo $FOO</snippet></ROW><ROW><id>20523181</id><snippet>$FOO</snippet></ROW><ROW><id>20523181</id><snippet>unaha-closp:~&gt; setenv FOO "\\hello\world"
unaha-closp:~&gt; echo $FOO
\hello\world
unaha-closp:~&gt; env | grep FOO
FOO=\\hello\world
unaha-closp:~&gt; python
Python 2.7.3 (default, Sep 26 2013, 20:03:06)
[GCC 4.6.3] on linux2
Type "help", "copyright", "credits" or "license" for more information.
&gt;&gt;&gt; import os
&gt;&gt;&gt; print os.environ["FOO"]
\\hello\world
&gt;&gt;&gt;
unaha-closp:~&gt; bash
svk@unaha-closp:~$ echo $FOO
\\hello\world
</snippet></ROW><ROW><id>20523181</id><snippet>setenv</snippet></ROW><ROW><id>20523181</id><snippet>setenv python_error "\\a\b\c"</snippet></ROW><ROW><id>20523271</id><snippet>import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
from string import ascii_uppercase
from matplotlib import patheffects

m, n = 4, 7 # 4 rows, 7 columns
df = pd.DataFrame( np.random.randn( m, n ),
                   columns=list(ascii_uppercase[:n]),
                   index=list(ascii_uppercase[-m:]))

ax = plt.imshow( df, interpolation='nearest', cmap='Oranges').get_axes()
ax.set_xticks( np.linspace(0, n-1, n ))
ax.set_xticklabels( df.columns )
ax.set_yticks( np.linspace(0, m-1, m ))
ax.set_yticklabels( df.index )
ax.grid( 'off' )
ax.xaxis.tick_top()
</snippet></ROW><ROW><id>20523271</id><snippet>for i in range( m ):
    for j in range( n ):
        ax.text( j, i, '{:.2f}'.format( df.iget_value( i, j ) ),
                 size='medium', ha='center', va='center',
                 path_effects=[patheffects.withSimplePatchShadow( shadow_rgbFace=(1,1,1) )])
</snippet></ROW><ROW><id>20523288</id><snippet>d = dict(list_2)
print [[d.get(item, None) for item in setItem] for setItem in list_1]
</snippet></ROW><ROW><id>20523288</id><snippet>[[35, 388], [82]]
</snippet></ROW><ROW><id>20523288</id><snippet>set</snippet></ROW><ROW><id>20523288</id><snippet>[35, 388]</snippet></ROW><ROW><id>20523288</id><snippet>[388, 35]</snippet></ROW><ROW><id>20523491</id><snippet>temp_str</snippet></ROW><ROW><id>20523491</id><snippet>73</snippet></ROW><ROW><id>20523491</id><snippet>ans_list_final.append(int(temp_str))
</snippet></ROW><ROW><id>20523491</id><snippet>print temp_str</snippet></ROW><ROW><id>20523491</id><snippet>temp_str</snippet></ROW><ROW><id>20523491</id><snippet>if temp_str:
    ans_list_final.append(int(temp_str))
</snippet></ROW><ROW><id>20523566</id><snippet>self</snippet></ROW><ROW><id>20523566</id><snippet>@bottle.get('/hello')
def hello():
    return 'Hello World'

@bottle.error(404)
def error404(error):
    return 'error 404'
</snippet></ROW><ROW><id>20523633</id><snippet>def parse(self, response):
    hxs = HtmlXPathSelector(response)

    item = PatioItem()
    item['Name'] = hxs.select("//div[@class='patio-name']/h2/text()").extract()[0]
    node_type = hxs.select("//ul[@class='detail-lister']/li[@class='type-icon']")
    item['Type'] = node_type.select(".//span[@class='detail-desc']/text()").extract()[0]
    node_covered = hxs.select("//ul[@class='detail-lister']/li[@class='covered-icon']")
    item['Covered'] = node_covered.select(".//span[@class='detail-desc']/text()").extract()[0]
    node_heated = hxs.select("//ul[@class='detail-lister']/li[@class='heated-icon']")
    item['Heated'] = node_heated.select(".//span[@class='detail-desc']/text()").extract()[0]
    node_capacity = hxs.select("//ul[@class='detail-lister']/li[@class='capacity-icon last']")
    item['Capacity'] = node_capacity.select(".//span[@class='detail-desc']/text()").extract()[0]

    return [item,]
</snippet></ROW><ROW><id>20523638</id><snippet>&gt;&gt;&gt; vowels = consonants = total = 0
&gt;&gt;&gt; mystr = "abcdefghi"
&gt;&gt;&gt; for char in mystr:
...     if char in "aeiou":
...         vowels += 1
...     elif char in "bcdfghjklmnpqrstvwxyz":
...         consonants += 1
...     total += 1
...
&gt;&gt;&gt; print "Vowels: {}\nConsonants: {}\nTotal: {}".format(vowels, consonants, total)
Vowels: 3
Consonants: 6
Total: 9
&gt;&gt;&gt;
</snippet></ROW><ROW><id>20523638</id><snippet>&gt;&gt;&gt; vowels = 0
&gt;&gt;&gt; consonants = 0
&gt;&gt;&gt; total = 0
</snippet></ROW><ROW><id>20523700</id><snippet>&gt;&gt;&gt; grouped = df.groupby('a')
&gt;&gt;&gt; grouped.agg({'b' : np.sum, 'c' : np.sum}).head()
     c   b
a         
1    7   5
2   10   8
7    3   8
11  16  14
</snippet></ROW><ROW><id>20523700</id><snippet>groupby</snippet></ROW><ROW><id>20523700</id><snippet>df['indices'] = range(len(df))
grouped = df.groupby('a')
final = grouped.agg({'b' : np.sum, 'c' : np.sum, 'indices': lambda x: ",".join(list(x.index.values))})
</snippet></ROW><ROW><id>20523700</id><snippet>&gt;&gt;&gt; final.head()
   indices   c   b
a                 
1      p,q   7   5
2      r,s  10   8
7        t   3   8
11     u,v  16  14
</snippet></ROW><ROW><id>20523728</id><snippet>dropbox-python</snippet></ROW><ROW><id>20523728</id><snippet>dropbox</snippet></ROW><ROW><id>20523728</id><snippet>url, params, headers = self.client.request(path, {}, method='GET', content_server=True)
headers['Range'] = 'bytes=' + ...
f = self.client.rest_client.request("GET", url, headers=headers, raw_response=True)
</snippet></ROW><ROW><id>20523868</id><snippet>&gt;</snippet></ROW><ROW><id>20523868</id><snippet>python -m unittest discover -p "*.py" &gt; results.txt
</snippet></ROW><ROW><id>20523868</id><snippet>&gt; filename</snippet></ROW><ROW><id>20524244</id><snippet># in the view where form is submitted
if form.is_valid():
    request.session['form-submitted'] = True
    return HttpResponseRedirect(reverse('success'))

# in the success view
def get(self, request):
    if not request.session.get('form-submitted', False):
        # handle case where form was not submitted
    else:
        # render the template
</snippet></ROW><ROW><id>20524288</id><snippet>my_logger.addHandler(MockLoggingHandler())
</snippet></ROW><ROW><id>20524288</id><snippet>()</snippet></ROW><ROW><id>20524288</id><snippet>MockLoggingHandler</snippet></ROW><ROW><id>20524295</id><snippet>def compareFiles():
    if rsef == rssf:
        print("Congratulations! Puzzle Solved!")
    else:
        print("Sorry! Try Again!")
        secMenu()
</snippet></ROW><ROW><id>20524295</id><snippet>def compareFiles():
    for eachLine in range(len(rsef)):
        if rsef[eachLine] != rssf[eachLine]:
            print("Sorry! Try Again!")
            secMenu()
            return 0 #exit the function, use this if you need it.

        print("Congratulations! Puzzle Solved!")
</snippet></ROW><ROW><id>20524540</id><snippet>print outputdict['/Title'] + ", " + outputdict['/Subject']
</snippet></ROW><ROW><id>20524540</id><snippet>Wind Wave Float, Presentation from...
</snippet></ROW><ROW><id>20524636</id><snippet>cumprod</snippet></ROW><ROW><id>20524636</id><snippet>cumsum</snippet></ROW><ROW><id>20524636</id><snippet>from numpy import cumprod, cumsum
# your code here
q = cumprod(p)
r = cumsum(p)
</snippet></ROW><ROW><id>20524646</id><snippet>random.randrange(1,7)</snippet></ROW><ROW><id>20524646</id><snippet>def roll_die():
    return random.randrange(1, 7)

total = roll_die() + roll_die()
</snippet></ROW><ROW><id>20524646</id><snippet>def play_turn():
    total = roll_die() + roll_die()

    if total == 12:
        return 1.5
    elif total == 11:
        return 1.0
    elif total == 10:
        return 0.5
    elif total &lt;= 6:
        return -0.5
    else:  # total is 7, 8, or 9
        return 0
</snippet></ROW><ROW><id>20524646</id><snippet>&gt;&gt;&gt; from collections import Counter
&gt;&gt;&gt; counts = Counter(play_turn() for i in xrange(100000))
&gt;&gt;&gt; counts
    Counter({-0.5: 41823, 0: 41545, 0.5: 8361, 1.0: 5521, 1.5: 2750})
&gt;&gt;&gt; probabilities = {score: count / 100000.0 for score, count in counts.items()}
&gt;&gt;&gt; probabilities
    {-0.5: 0.41823, 0: 0.41545, 0.5: 0.08361, 1.0: 0.05521, 1.5: 0.0275}
</snippet></ROW><ROW><id>20524909</id><snippet>Servicer</snippet></ROW><ROW><id>20524909</id><snippet>SrvOne</snippet></ROW><ROW><id>20524909</id><snippet>make_SrvOne</snippet></ROW><ROW><id>20524909</id><snippet>SrvOne</snippet></ROW><ROW><id>20524909</id><snippet>@staticmethod
def make_SrvOne(name):
    return Servicer.SrvOne(name)
</snippet></ROW><ROW><id>20525084</id><snippet>def f(a, b):
    return b - b.multiply(a)
</snippet></ROW><ROW><id>20525084</id><snippet>b.multiply(a)</snippet></ROW><ROW><id>20525084</id><snippet>and</snippet></ROW><ROW><id>20525084</id><snippet>a</snippet></ROW><ROW><id>20525084</id><snippet>b</snippet></ROW><ROW><id>20525084</id><snippet>In [134]: b.A
Out[134]: array([[False, False,  True,  True]], dtype=bool)

In [135]: a.A
Out[135]: array([[False,  True, False,  True]], dtype=bool)

In [136]: f(a,b).A
Out[136]: array([[False, False,  True, False]], dtype=bool)
</snippet></ROW><ROW><id>20525400</id><snippet>11.12</snippet></ROW><ROW><id>20525400</id><snippet>12.0</snippet></ROW><ROW><id>20525404</id><snippet>from subprocess import check_call

args = ['intersectBed','-u','-a',out_snv_filter,'-b',cds]
with open(out_cds, 'wb') as outfile:
    check_call(args, stdout=outfile)
</snippet></ROW><ROW><id>20525432</id><snippet>os.listdir()</snippet></ROW><ROW><id>20525432</id><snippet>files = [os.path.join(path, f) for f in os.listdir(path)]
</snippet></ROW><ROW><id>20525432</id><snippet>'foo.csv'</snippet></ROW><ROW><id>20525432</id><snippet>spectrum_scan</snippet></ROW><ROW><id>20525544</id><snippet>json</snippet></ROW><ROW><id>20525544</id><snippet>json</snippet></ROW><ROW><id>20525544</id><snippet>print</snippet></ROW><ROW><id>20525544</id><snippet>data</snippet></ROW><ROW><id>20525544</id><snippet>import urllib.request
import json

request = urllib.request.Request("http://httpbin.org/get")
response = urllib.request.urlopen(request)
encoding = response.info().get_param('charset', 'utf8')
data = json.loads(response.read().decode(encoding))
</snippet></ROW><ROW><id>20525544</id><snippet>charset</snippet></ROW><ROW><id>20525544</id><snippet>http://httpbin.org/get</snippet></ROW><ROW><id>20525544</id><snippet>{'args': {}, 'headers': {'Host': 'httpbin.org', 'Accept-Encoding': 'identity', 'Connection': 'close', 'User-Agent': 'Python-urllib/3.3'}, 'origin': '12.34.56.78', 'url': 'http://httpbin.org/get'}
</snippet></ROW><ROW><id>20525568</id><snippet>dog =&gt; [4,2]
child =&gt; [3,5,3]
etc
</snippet></ROW><ROW><id>20525568</id><snippet>from collections import defaultdict
data = defaultdict(list)
for line in file:
    line = line.split('\t')
    data[line[0]].append(line[2])
</snippet></ROW><ROW><id>20525568</id><snippet>def vector_len(vec):
   you already got that

vector_lens = {name: vector_len(values) for name, values in data.items()}
</snippet></ROW><ROW><id>20525570</id><snippet>nmap</snippet></ROW><ROW><id>20525570</id><snippet>192.168.1.1-255
</snippet></ROW><ROW><id>20525570</id><snippet>octets = '192.168.1.1-255'.split('.')
parsed_ranges = [map(int, octet.split('-')) for octet in octets]
</snippet></ROW><ROW><id>20525570</id><snippet>parsed_ranges</snippet></ROW><ROW><id>20525570</id><snippet>[[192], [168], [1], [1, 255]]</snippet></ROW><ROW><id>20525570</id><snippet>itertools</snippet></ROW><ROW><id>20525570</id><snippet>import itertools

ranges = [range(r[0], r[1] + 1) if len(r) == 2 else r for r in parsed_ranges]
addresses = itertools.product(*ranges)
</snippet></ROW><ROW><id>20525570</id><snippet>import itertools

def ip_range(input_string):
    octets = input_string.split('.')
    chunks = [map(int, octet.split('-')) for octet in octets]
    ranges = [range(c[0], c[1] + 1) if len(c) == 2 else c for c in chunks]

    for address in itertools.product(*ranges):
        yield '.'.join(map(str, address))
</snippet></ROW><ROW><id>20525570</id><snippet>&gt;&gt;&gt; for address in ip_range('192.168.1-2.1-12'):  print(address)
192.168.1.1
192.168.1.2
192.168.1.3
192.168.1.4
192.168.1.5
192.168.1.6
192.168.1.7
192.168.1.8
192.168.1.9
192.168.1.10
192.168.1.11
192.168.1.12
192.168.2.1
192.168.2.2
192.168.2.3
192.168.2.4
192.168.2.5
192.168.2.6
192.168.2.7
192.168.2.8
192.168.2.9
192.168.2.10
192.168.2.11
192.168.2.12
</snippet></ROW><ROW><id>20525697</id><snippet>t0 = time.time()

for i in xrange(1000):
    binary_search([1]*1000000,2)

t1 = time.time()
avg = (t1 - t0)/1000

print( "Average Time Taken",avg )
</snippet></ROW><ROW><id>20525697</id><snippet>('Average Time Taken', 0.007341000080108642)
</snippet></ROW><ROW><id>20525722</id><snippet>import tokenize
from itertools import count
import re

with open('your_file') as fin:
    output = []
    tokens = tokenize.generate_tokens(fin.readline)
    for num, val in (token[:2] for token in tokens):
        if num == tokenize.STRING:
            val = re.sub('{}', lambda L, c=count(): '{{{0}}}'.format(next(c)), val)
        output.append((num, val))

print tokenize.untokenize(output) # write to file instead...
</snippet></ROW><ROW><id>20525722</id><snippet>s = "{} {}".format('foo', 'bar')
if something:
    do_something('{} {} {}'.format(1, 2, 3))
</snippet></ROW><ROW><id>20525722</id><snippet>s ="{0} {1}".format ('foo','bar')
if something :
    do_something ('{0} {1} {2}'.format (1 ,2 ,3 ))
</snippet></ROW><ROW><id>20525834</id><snippet>sys.stdout</snippet></ROW><ROW><id>20525834</id><snippet>flush</snippet></ROW><ROW><id>20525834</id><snippet>flush</snippet></ROW><ROW><id>20525834</id><snippet>def flush(self):
    pass
</snippet></ROW><ROW><id>20526408</id><snippet>.split('\n')</snippet></ROW><ROW><id>20526408</id><snippet>rstrip('\n').split()
</snippet></ROW><ROW><id>20526778</id><snippet>def foo(x):
    def inner_foo(x):
        return "COOL it's %s" % x
    if x == 1:
        return inner_foo(x)
    else:
        return "x is not 1"

    # This line will *never* be reached
    print "THIS LINE SHOULD NOT BE PRINTED"

print foo(2)
print foo(1)
</snippet></ROW><ROW><id>20526778</id><snippet>x is not 1
COOL it's 1
</snippet></ROW><ROW><id>20526778</id><snippet>return</snippet></ROW><ROW><id>20526778</id><snippet>inner_foo</snippet></ROW><ROW><id>20526778</id><snippet>foo</snippet></ROW><ROW><id>20526835</id><snippet>get_ylim</snippet></ROW><ROW><id>20526835</id><snippet>set_yticks</snippet></ROW><ROW><id>20526835</id><snippet>set_fontsize</snippet></ROW><ROW><id>20526835</id><snippet>import numpy as np

fig = plt.figure()
ax = fig.add_subplot(111)
ax.plot( np.random.randn( 1000 ).cumsum( ) )

lb, ub = ax.get_ylim( )
ax.set_yticks( np.linspace(lb, ub, 25 ) )

for x in ax.get_yticklabels( ):
    x.set_fontsize( 'small' )
</snippet></ROW><ROW><id>20526845</id><snippet>gen.Task</snippet></ROW><ROW><id>20526845</id><snippet>motor.Op</snippet></ROW><ROW><id>20526845</id><snippet>gen.Task</snippet></ROW><ROW><id>20526962</id><snippet>col1</snippet></ROW><ROW><id>20526962</id><snippet>Char</snippet></ROW><ROW><id>20526962</id><snippet>Date</snippet></ROW><ROW><id>20526962</id><snippet>Logical</snippet></ROW><ROW><id>20526962</id><snippet>Number</snippet></ROW><ROW><id>20526962</id><snippet>Float</snippet></ROW><ROW><id>20526962</id><snippet>Memo</snippet></ROW><ROW><id>20526962</id><snippet>col1</snippet></ROW><ROW><id>20526962</id><snippet>col1</snippet></ROW><ROW><id>20526962</id><snippet>col1</snippet></ROW><ROW><id>20526962</id><snippet>if record.col1.strip() == 'true':
</snippet></ROW><ROW><id>20526962</id><snippet>dbf.Table</snippet></ROW><ROW><id>20526962</id><snippet>Char</snippet></ROW><ROW><id>20526962</id><snippet>my_table = dbf.Table('/path/to/file', default_data_types={'C':dbf.Char})
</snippet></ROW><ROW><id>20527003</id><snippet>test2 = f['data']
print test2
print test2.shape
print test2[0:3,2:5]
print test2[slice(None,3,None),slice(2,5,None)]  # ok
print test2[slice_obj[0],slice_obj[1]]  # ok
print test2[tuple(slice_obj)]  # ok
print test2[[slice(None,3,None),slice(2,5,None)]]  # fail
print f['data'][tuple(slice_obj)] 3 ok
</snippet></ROW><ROW><id>20527003</id><snippet>h5py</snippet></ROW><ROW><id>20527003</id><snippet>getitem</snippet></ROW><ROW><id>20527003</id><snippet>numpy</snippet></ROW><ROW><id>20527003</id><snippet>h5py</snippet></ROW><ROW><id>20527016</id><snippet>    self.scroll.itemClicked.connect(self.updateMore)
    ...

    def updateMore(self, item):
        self.label.setText(item.text())
</snippet></ROW><ROW><id>20527016</id><snippet>lambda</snippet></ROW><ROW><id>20527016</id><snippet>    self.scroll.itemClicked.connect(
        lambda item: self.updateMore(item, info))
    ...

    def updateMore(self, item, info):
        text = item.text()
        ...
</snippet></ROW><ROW><id>20527056</id><snippet>dUp= delta[ delta &gt; 0 ]
dDown= delta[ delta &lt; 0 ]
</snippet></ROW><ROW><id>20527056</id><snippet>RolUp = RolUp.reindex_like( delta, method='ffill' )
RolDown = RolDown.reindex_like( delta, method='ffill' )
</snippet></ROW><ROW><id>20527056</id><snippet>RS = RolUp / RolDown</snippet></ROW><ROW><id>20527056</id><snippet># dUp= delta[ delta &gt; 0 ]
# dDown= delta[ delta &lt; 0 ]

# dUp = dUp.reindex_like( delta, fill_value=0 )
# dDown = dDown.reindex_like( delta, fill_value=0 )

dUp, dDown = delta.copy( ), delta.copy( )
dUp[ dUp &lt; 0 ] = 0
dDown[ dDown &gt; 0 ] = 0

RolUp = pd.rolling_mean( dUp, n )
RolDown = pd.rolling_mean( dDown, n).abs()

RS = RolUp / RolDown
</snippet></ROW><ROW><id>20527069</id><snippet>from tweepy import stream
</snippet></ROW><ROW><id>20527069</id><snippet>from tweepy import Stream
</snippet></ROW><ROW><id>20527401</id><snippet>if</snippet></ROW><ROW><id>20527401</id><snippet>def tagData(filename):
    original = open(filename, 'r')
    new = open('test2.txt', 'w')
    index = 0
    for line in original:
        if index%6 == 0:
            new.write('&lt;first&gt;'+str(line).strip('\n')+'&lt;/first&gt;\n')
        elif index%6 == 1:
            new.write('&lt;second&gt;'+str(line).strip('\n')+'&lt;/second&gt;\n')
        elif index%6 == 2:
            new.write('&lt;third&gt;'+str(line).strip('\n')+'&lt;/third&gt;\n')
        elif index%6 == 3:
            new.write('&lt;fourth&gt;'+str(line).strip('\n')+'&lt;/fourth&gt;\n')
        elif index%6 == 4:
            new.write('&lt;fifth&gt;'+str(line).strip('\n')+'&lt;/fifth&gt;\n')
        elif index%6 == 5:
            new.write('&lt;sixth&gt;'+str(line).strip('\n')+'&lt;/sixth&gt;\n')
        index = index + 1
    original.close()
    new.close()
</snippet></ROW><ROW><id>20527601</id><snippet>data = [2.34, 3.45, 4.56, 1.23, 2.34, 7.89]
print [(a + b) / 2 for a, b in zip(data[::2], data[1::2])]
</snippet></ROW><ROW><id>20527601</id><snippet>data[::2]</snippet></ROW><ROW><id>20527601</id><snippet>2.34, 4.56, 2.34</snippet></ROW><ROW><id>20527601</id><snippet>data[1::2]</snippet></ROW><ROW><id>20527601</id><snippet>3.45, 1.23, 7.89</snippet></ROW><ROW><id>20527601</id><snippet>zip</snippet></ROW><ROW><id>20527601</id><snippet>(2.34, 3.45), (4.56, 1.23), (2.34, 7.89)</snippet></ROW><ROW><id>20527897</id><snippet>+</snippet></ROW><ROW><id>20527897</id><snippet>00</snippet></ROW><ROW><id>20527897</id><snippet>r'^(?:\+|00)?(\d+)$'
</snippet></ROW><ROW><id>20527897</id><snippet>+</snippet></ROW><ROW><id>20527897</id><snippet>00</snippet></ROW><ROW><id>20527897</id><snippet>&gt;&gt;&gt; import re
&gt;&gt;&gt; samples = ('0032487365060', '32487365060', '+32487365060', '0487365060')
&gt;&gt;&gt; pattern = re.compile(r'^(?:\+|00)?(\d+)$')
&gt;&gt;&gt; for sample in samples:
...     match = pattern.search(sample)
...     if match is not None:
...         print 'matched:', match.group(1)
...     else:
...         print 'Sample {} did not match'.format(sample)
... 
matched: 32487365060
matched: 32487365060
matched: 32487365060
matched: 0487365060
</snippet></ROW><ROW><id>20528226</id><snippet>def reply(x):
    responses = []

    if any(item in x for item in thanks):
        responses.append("It's my pleasure\n")
    if any(item in x for item in greetings):
        responses.append("How are you?\n")

    if not responses:
        randomAnswers = ["I like cheese.", "That's Cool.", "You are a robot.", "I am not a robot.", "I like music.", "I want to visit australia.","Do you like me?","You're cool."]
        responses.append(random.choice(randomAnswers))

    return responses
</snippet></ROW><ROW><id>20528240</id><snippet>transform</snippet></ROW><ROW><id>20528240</id><snippet>rolling_sum</snippet></ROW><ROW><id>20528240</id><snippet>&gt;&gt;&gt; df["DATE"] = pd.to_datetime(df["DATE"]) # switch to datetime to ease sorting
&gt;&gt;&gt; df = df.sort(["STOCK", "DATE"])
&gt;&gt;&gt; rsum_columns = "DATA1", "DATA3"
&gt;&gt;&gt; grouped = df.groupby("STOCK")[rsum_columns]
&gt;&gt;&gt; new_columns = grouped.transform(lambda x: pd.rolling_sum(x, 4))
&gt;&gt;&gt; df[new_columns.columns + "_TTM"] = new_columns
&gt;&gt;&gt; df
                  DATE STOCK  DATA1  DATA2  DATA3  DATA1_TTM  DATA3_TTM
0  2012-01-01 00:00:00   ABC   0.40   0.88   0.22        NaN        NaN
1  2012-04-01 00:00:00   ABC   0.50   0.49   0.13        NaN        NaN
2  2012-07-01 00:00:00   ABC   0.85   0.36   0.83        NaN        NaN
3  2012-10-01 00:00:00   ABC   0.28   0.12   0.39       2.03       1.57
4  2013-01-01 00:00:00   ABC   0.86   0.87   0.58       2.49       1.93
5  2013-04-01 00:00:00   ABC   0.95   0.39   0.87       2.94       2.67
6  2013-07-01 00:00:00   ABC   0.60   0.25   0.56       2.69       2.40
7  2013-10-01 00:00:00   ABC   0.15   0.28   0.69       2.56       2.70
8  2011-01-01 00:00:00   XYZ   0.94   0.40   0.50        NaN        NaN
9  2011-04-01 00:00:00   XYZ   0.65   0.19   0.81        NaN        NaN
10 2011-07-01 00:00:00   XYZ   0.89   0.59   0.69        NaN        NaN
11 2011-10-01 00:00:00   XYZ   0.12   0.09   0.18       2.60       2.18
12 2012-01-01 00:00:00   XYZ   0.25   0.94   0.55       1.91       2.23
13 2012-04-01 00:00:00   XYZ   0.07   0.22   0.67       1.33       2.09
14 2012-07-01 00:00:00   XYZ   0.46   0.08   0.54       0.90       1.94
15 2012-10-01 00:00:00   XYZ   0.04   0.03   0.94       0.82       2.70

[16 rows x 7 columns]
</snippet></ROW><ROW><id>20528451</id><snippet>Entry</snippet></ROW><ROW><id>20528451</id><snippet>Entry</snippet></ROW><ROW><id>20528451</id><snippet>def b1down(event):
    entry = Entry(root,bd=0,font=("Purisa",15)) #No Border and added font:)
    entry.place(x= event.x, y= event.y)
    entry.focus_force()

root = Tk()
root.columnconfigure(0, weight=1)
root.rowconfigure(0, weight=1)
drawing_area = Canvas(root)
drawing_area.grid(sticky=N+E+S+W)
drawing_area.bind("&lt;ButtonPress-1&gt;", b1down)
root.mainloop()
</snippet></ROW><ROW><id>20528451</id><snippet>event.x</snippet></ROW><ROW><id>20528451</id><snippet>event.y</snippet></ROW><ROW><id>20528503</id><snippet>--pylab[=option]</snippet></ROW><ROW><id>20528503</id><snippet>%pylab option</snippet></ROW><ROW><id>20528503</id><snippet>--pylab</snippet></ROW><ROW><id>20528503</id><snippet>%pylab</snippet></ROW><ROW><id>20528503</id><snippet>%pylab</snippet></ROW><ROW><id>20528503</id><snippet>from pylab import *</snippet></ROW><ROW><id>20528503</id><snippet>%pylab?</snippet></ROW><ROW><id>20528503</id><snippet>sympy.init_printing()</snippet></ROW><ROW><id>20528503</id><snippet>--pylab</snippet></ROW><ROW><id>20528503</id><snippet>%pylab</snippet></ROW><ROW><id>20528503</id><snippet>%matplotlib</snippet></ROW><ROW><id>20528503</id><snippet>%pylab</snippet></ROW><ROW><id>20528503</id><snippet>sum</snippet></ROW><ROW><id>20528503</id><snippet>--pylab</snippet></ROW><ROW><id>20528503</id><snippet>Explicit is better than implicit</snippet></ROW><ROW><id>20528503</id><snippet>%pylab</snippet></ROW><ROW><id>20528503</id><snippet>%pylab makes the following imports::

import numpy
import matplotlib
from matplotlib import pylab, mlab, pyplot
np = numpy
plt = pyplot

from IPython.display import display
from IPython.core.pylabtools import figsize, getfigs

from pylab import *
from numpy import *
</snippet></ROW><ROW><id>20528781</id><snippet>INSTALLED_APPS</snippet></ROW><ROW><id>20528781</id><snippet>syncdb</snippet></ROW><ROW><id>20528938</id><snippet>import random

randfile = open("Randomnm.txt", "w" )

for i in range(int(input('How many to generate?: '))):
    line = str(random.randint(1, 100)) + "\n"
    randfile.write(line)
    print(line)

randfile.close()
</snippet></ROW><ROW><id>20529046</id><snippet>def script(dicesides, random):
    if dicesides in [4,6,12]:
        dice = int(random.randrange(1, dicesides))
        print(dicesides, " sided dice, score", dice)
    else:
        print("That number is invalid. Please try again.")
        var()
</snippet></ROW><ROW><id>20529115</id><snippet>SELECT * FROM QS36F."SH.ITEM"
</snippet></ROW><ROW><id>20529115</id><snippet>CREATE ALIAS QTEMP.M131204 FOR QS36F."SH.ITEM" (M131204);
SELECT * FROM QTEMP.M131204;
</snippet></ROW><ROW><id>20529214</id><snippet>#include &lt;rijndael.au3&gt;
#include &lt;String.au3&gt;

Global $key = "pjqFX32pfaZaOkkC";
Global $text = "Am I welcome???"
$encrypted = _StringToHex(BinaryToString(_rijndaelCipher($key, $text, 128, 0, '')))
ConsoleWrite("Encrypted: " &amp; $encrypted &amp; @CRLF)
$decrypted = BinaryToString(_rijndaelInvCipher($key, _HexToString($encrypted), 128, 0, ''))
ConsoleWrite("Decrypted: " &amp; $decrypted &amp; @CRLF)
</snippet></ROW><ROW><id>20529214</id><snippet>Encrypted: A6848F1EF8C7C1313689E18567235A93
Decrypted: Am I welcome???
</snippet></ROW><ROW><id>20529214</id><snippet>#!/usr/bin/env python

from Crypto.Cipher import AES
import base64

BLOCK_SIZE = 16

PADDING = chr(0)

pad = lambda s: s + (BLOCK_SIZE - len(s) % BLOCK_SIZE) * PADDING

EncodeAES = lambda c, s: base64.b16encode(c.encrypt(pad(s)))
DecodeAES = lambda c, e: c.decrypt(base64.b16decode(e)).rstrip(PADDING)

text = 'Am I welcome???'
secret = 'pjqFX32pfaZaOkkC'

cipher=AES.new(key=secret,mode=AES.MODE_ECB)

encoded = EncodeAES(cipher, text)
print 'Python Encrypted string: ', encoded

decoded = DecodeAES(cipher, encoded)
print 'Python Decrypted string: ', decoded.encode("hex")
print 'Python Decrypted string: ', decoded

myencoded = "A6848F1EF8C7C1313689E18567235A93"
print "AutoIT Result:           ", myencoded
decoded = DecodeAES(cipher, myencoded)
print 'From AU Decrypted string:', decoded
mydecoded = EncodeAES(cipher,decoded)
print 'Re-Encrypted string:     ', mydecoded.upper()
</snippet></ROW><ROW><id>20529214</id><snippet>Python Encrypted string:  A6848F1EF8C7C1313689E18567235A93
Python Decrypted string:  416d20492077656c636f6d653f3f3f
Python Decrypted string:  Am I welcome???
AutoIT Result:            A6848F1EF8C7C1313689E18567235A93
From AU Decrypted string: Am I welcome???
Re-Encrypted string:      A6848F1EF8C7C1313689E18567235A93
</snippet></ROW><ROW><id>20529269</id><snippet>&gt;&gt;&gt; np.matrix(list(itertools.product([0,1],repeat = 2)))
matrix([[0, 0],
        [0, 1],
        [1, 0],
        [1, 1]])
</snippet></ROW><ROW><id>20529316</id><snippet>In [0]: df.index = pd.DatetimeIndex(df.index)
</snippet></ROW><ROW><id>20529316</id><snippet>In [1]: df.ix[df.index.quarter == 4]
Out[1]:
            Units
2000-12-31   5925
2001-12-31   8063
</snippet></ROW><ROW><id>20529316</id><snippet>In [2]: curr = df.ix[df.index.quarter == 4]
In [3]: prev = df.ix[df.index.quarter == 4].shift()
In [4]: curr/prev
Out[4]:
               Units
2000-12-31       NaN
2001-12-31  1.360844
</snippet></ROW><ROW><id>20529653</id><snippet>csv</snippet></ROW><ROW><id>20529653</id><snippet>import csv

text = '"04/15/2013","A lot of text: numbers 123,412","3,123.99","-","1,123,123,99"'
result = next(csv.reader([text]))
# ['04/15/2013', 'A lot of text: numbers 123,412', '3,123.99', '-', '1,123,123,99']
</snippet></ROW><ROW><id>20529852</id><snippet>tweets</snippet></ROW><ROW><id>20529852</id><snippet>tweets = []
</snippet></ROW><ROW><id>20529923</id><snippet>/uploadform/</snippet></ROW><ROW><id>20529923</id><snippet>/</snippet></ROW><ROW><id>20530049</id><snippet>def walk(top, topdown=True, onerror=None, followlinks=False):
    islink, join, isdir = path.islink, path.join, path.isdir

    try:
        # Note that listdir and error are globals in this module due
        # to earlier import-*.


        # Should be O(1) since it's probably just reading your filesystem journal
        names = listdir(top)
    except error, err:
        if onerror is not None:
            onerror(err)
        return

    dirs, nondirs = [], []


    # O(n) where n = number of files in the directory
    for name in names:
        if isdir(join(top, name)):
            dirs.append(name)
        else:
            nondirs.append(name)

    if topdown:
        yield top, dirs, nondirs

    # Again O(n), where n = number of directories in the directory
    for name in dirs:
        new_path = join(top, name)
        if followlinks or not islink(new_path):

            # Generator so besides the recursive `walk()` call, no additional cost here.
            for x in walk(new_path, topdown, onerror, followlinks):
                yield x
    if not topdown:
        yield top, dirs, nondirs
</snippet></ROW><ROW><id>20530049</id><snippet>O(n)</snippet></ROW><ROW><id>20530049</id><snippet>n</snippet></ROW><ROW><id>20530178</id><snippet>def f():
    acc = []
    for x in range(10):
        acc.append(someFunctionOfX(x))
    return acc
</snippet></ROW><ROW><id>20530178</id><snippet>def g():
    for x in range(10):
       yield someFunctionOfX(x)
</snippet></ROW><ROW><id>20530178</id><snippet>someFunctionOfX</snippet></ROW><ROW><id>20530178</id><snippet>def f():
    acc = []
    for x in range(-3, 4):
        acc.append (2 / x)
    return acc

def g():
    for x in range(-3, 4):
        yield 2 / x

def testF():
    for x in f(): print(x)

def testG():
    for x in g(): print(x)
</snippet></ROW><ROW><id>20530178</id><snippet>testF</snippet></ROW><ROW><id>20530178</id><snippet>testG</snippet></ROW><ROW><id>20530178</id><snippet>-0.6666666666666666
-1.0
-2.0
</snippet></ROW><ROW><id>20530286</id><snippet>repr</snippet></ROW><ROW><id>20530286</id><snippet>import numpy as np
import itertools

n = 5
h = 2
M =  np.random.randint(2, size=(h,n))
F = np.matrix(list(itertools.product([0,1],repeat = 5))).transpose()
product = M*F
setofcols = set()
for column in product.T:
    setofcols.add(repr(column))
print len(setofcols)
print setofcols
</snippet></ROW><ROW><id>20530286</id><snippet>setofcols={tuple(e.A1) for e in product.T}
</snippet></ROW><ROW><id>20530286</id><snippet>tuple</snippet></ROW><ROW><id>20530541</id><snippet>memory_profiler</snippet></ROW><ROW><id>20530681</id><snippet>&gt;&gt;&gt; from pprint import pprint
&gt;&gt;&gt; pprint ([(i, scipy.stats.ks_2samp(dataset1, dataset2[:i])[1]) 
...                for i in range(200,len(dataset2),200)])
[(200, 3.1281733251275881e-63),
 (400, 3.5780609056448825e-157),
 (600, 9.2884803664366062e-225),
 (800, 7.1429666685167604e-293),
 (1000, 0.0),
 (1200, 0.0),
 (1400, 0.0),
 (1600, 0.0),
 (1800, 0.0),
 (2000, 0.0),
 (2200, 0.0),
 (2400, 0.0)]
</snippet></ROW><ROW><id>20530734</id><snippet>struct</snippet></ROW><ROW><id>20530734</id><snippet>float</snippet></ROW><ROW><id>20530734</id><snippet>import struct

value = struct.unpack('d', bytes)[0]
</snippet></ROW><ROW><id>20530734</id><snippet>'d'</snippet></ROW><ROW><id>20530734</id><snippet>bytes</snippet></ROW><ROW><id>20530734</id><snippet>array</snippet></ROW><ROW><id>20530734</id><snippet>import array

doubles_sequence = array.array('d', bytes)
</snippet></ROW><ROW><id>20530734</id><snippet>doubles_sequence</snippet></ROW><ROW><id>20530734</id><snippet>doubles_sequence.byteswap()</snippet></ROW><ROW><id>20530850</id><snippet>env.hosts</snippet></ROW><ROW><id>20530850</id><snippet>execute(&lt;someFunction&gt;, hosts=&lt;someHostList&gt;)</snippet></ROW><ROW><id>20530850</id><snippet>from fabric.api import env, run

def f1():
  someList = ['127.0.0.1',]
  do execute(f2, hosts=someList)

def f2():
  run('ls /')
</snippet></ROW><ROW><id>20530850</id><snippet>$ fab f1</snippet></ROW><ROW><id>20530941</id><snippet>np.exp(- X ** 2 / (2. * delta ** 2))
</snippet></ROW><ROW><id>20530941</id><snippet>fit</snippet></ROW><ROW><id>20531055</id><snippet>result[2]</snippet></ROW><ROW><id>20531055</id><snippet>unicode</snippet></ROW><ROW><id>20531055</id><snippet>decode('cp037')</snippet></ROW><ROW><id>20531055</id><snippet>encode</snippet></ROW><ROW><id>20531055</id><snippet>sys.getdefaultencoding()</snippet></ROW><ROW><id>20531055</id><snippet>'ascii'</snippet></ROW><ROW><id>20531055</id><snippet>unicode</snippet></ROW><ROW><id>20531055</id><snippet>unicode</snippet></ROW><ROW><id>20531055</id><snippet>unicode</snippet></ROW><ROW><id>20531055</id><snippet>str</snippet></ROW><ROW><id>20531055</id><snippet>decode</snippet></ROW><ROW><id>20531055</id><snippet>print</snippet></ROW><ROW><id>20531055</id><snippet>encode</snippet></ROW><ROW><id>20531055</id><snippet>sys.getdefaultencoding()</snippet></ROW><ROW><id>20531055</id><snippet>sys.stdout.encoding</snippet></ROW><ROW><id>20531055</id><snippet>'ascii'</snippet></ROW><ROW><id>20531055</id><snippet>sys.stdout.encoding</snippet></ROW><ROW><id>20531055</id><snippet>sys.stdout.encoding</snippet></ROW><ROW><id>20531055</id><snippet>'utf-8'</snippet></ROW><ROW><id>20531055</id><snippet>encode</snippet></ROW><ROW><id>20531055</id><snippet>print</snippet></ROW><ROW><id>20531055</id><snippet>print type(result[2])</snippet></ROW><ROW><id>20531055</id><snippet>unicode</snippet></ROW><ROW><id>20531055</id><snippet>str</snippet></ROW><ROW><id>20531055</id><snippet>x = result[2].decode('cp037')</snippet></ROW><ROW><id>20531055</id><snippet>print x</snippet></ROW><ROW><id>20531055</id><snippet>'\xe3'</snippet></ROW><ROW><id>20531055</id><snippet>T</snippet></ROW><ROW><id>20531254</id><snippet>BaseClass.base_function</snippet></ROW><ROW><id>20531254</id><snippet>DerivedClass.base_function</snippet></ROW><ROW><id>20531254</id><snippet>id(BaseClass.base_function) == id(DerivedClass.base_function)
</snippet></ROW><ROW><id>20531441</id><snippet>seq = 3 * [ "" ]
</snippet></ROW><ROW><id>20531441</id><snippet>for seq[0] in ALPHABET:
</snippet></ROW><ROW><id>20531441</id><snippet>ALPHABET</snippet></ROW><ROW><id>20531441</id><snippet>seq[0]</snippet></ROW><ROW><id>20531441</id><snippet>    for seq[1] in ALPHABET:
</snippet></ROW><ROW><id>20531441</id><snippet>        for seq[2] in ALPHABET:
</snippet></ROW><ROW><id>20531441</id><snippet>            letterSeqs.append("".join(seq))
</snippet></ROW><ROW><id>20531441</id><snippet>seq</snippet></ROW><ROW><id>20531441</id><snippet>seq[0]</snippet></ROW><ROW><id>20531441</id><snippet>for i</snippet></ROW><ROW><id>20531441</id><snippet>for j</snippet></ROW><ROW><id>20531441</id><snippet>for k</snippet></ROW><ROW><id>20531441</id><snippet>i+j+k</snippet></ROW><ROW><id>20531441</id><snippet>join</snippet></ROW><ROW><id>20531491</id><snippet>np.linspace(xmin, xmax, (xmax-xmin)/step)</snippet></ROW><ROW><id>20531491</id><snippet>plt.hist</snippet></ROW><ROW><id>20531491</id><snippet>h1 = np.histogram(s, bins=np.linspace(xmin, xmax, (xmax-xmin)/step))
h_plt = plt.hist(s, bins=6,alpha=0.5)
</snippet></ROW><ROW><id>20531491</id><snippet>&gt;&gt;&gt; h1[1]
array([ 1. ,  2.2,  3.4,  4.6,  5.8,  7. ])
&gt;&gt;&gt; h_plt[1]
array([ 1.,  2.,  3.,  4.,  5.,  6.,  7.])
</snippet></ROW><ROW><id>20531491</id><snippet>y, x = np.histogram(s, bins=np.linspace(xmin, xmax, (xmax-xmin)/step))
nbins = y.size
# ...
plt.hist(s, bins=nbins, alpha=0.5)
</snippet></ROW><ROW><id>20531491</id><snippet>np.histogram</snippet></ROW><ROW><id>20531491</id><snippet>plt.bar</snippet></ROW><ROW><id>20531491</id><snippet>plt.bar(left, height, width=0.8, bottom=None, hold=None, **kwargs)</snippet></ROW><ROW><id>20531491</id><snippet>----------</snippet></ROW><ROW><id>20531491</id><snippet>left</snippet></ROW><ROW><id>20531491</id><snippet>x</snippet></ROW><ROW><id>20531491</id><snippet>height</snippet></ROW><ROW><id>20531491</id><snippet>import numpy as np
import matplotlib.pyplot as plt
s = [1,1,1,1,2,2,2,3,3,4,5,5,5,6,7,7,7,7,7,7,7]

xmin = 1
xmax = 7
step = 1
y, x = np.histogram(s, bins=np.linspace(xmin, xmax, (xmax-xmin)/step))

nbins = y.size

plt.bar(x[:-1], y, width=x[1]-x[0], color='red', alpha=0.5)
plt.hist(s, bins=nbins, alpha=0.5)
plt.grid(True)
plt.show()
</snippet></ROW><ROW><id>20531581</id><snippet>myvar = 1</snippet></ROW><ROW><id>20531581</id><snippet>1</snippet></ROW><ROW><id>20531581</id><snippet>myvar</snippet></ROW><ROW><id>20531581</id><snippet>1</snippet></ROW><ROW><id>20531581</id><snippet>myvar</snippet></ROW><ROW><id>20531581</id><snippet>myvar = 2</snippet></ROW><ROW><id>20531581</id><snippet>myvar</snippet></ROW><ROW><id>20531581</id><snippet>1</snippet></ROW><ROW><id>20531581</id><snippet>1</snippet></ROW><ROW><id>20531581</id><snippet>inst1 = Test(2)  # create 2 and attach it to inst1.i
inst2 = Test(5)  # create 5 and attach it to inst2.i
MyList = [inst1.i,inst2.i]  # list of objects: [2 ,5]
</snippet></ROW><ROW><id>20531581</id><snippet>inst1.i = 4
</snippet></ROW><ROW><id>20531581</id><snippet>4</snippet></ROW><ROW><id>20531581</id><snippet>inst1.i</snippet></ROW><ROW><id>20531581</id><snippet>2</snippet></ROW><ROW><id>20531581</id><snippet>MyList</snippet></ROW><ROW><id>20531581</id><snippet>MyList</snippet></ROW><ROW><id>20531581</id><snippet>Test</snippet></ROW><ROW><id>20531581</id><snippet>MyList = [inst1,inst2]
</snippet></ROW><ROW><id>20531581</id><snippet>inst1.i = 4</snippet></ROW><ROW><id>20531581</id><snippet>4</snippet></ROW><ROW><id>20531581</id><snippet>4</snippet></ROW><ROW><id>20531581</id><snippet>MyList[0].i</snippet></ROW><ROW><id>20531581</id><snippet>inst1.i</snippet></ROW><ROW><id>20531581</id><snippet>for value in MyList:
    print value.i

inst1.i = 4    
raw_values = [o.i for o in MyList]
[4, 5]

inst1.i = 2
raw_values = [o.i for o in MyList]
[2, 5]
</snippet></ROW><ROW><id>20531640</id><snippet>recursive_search</snippet></ROW><ROW><id>20531640</id><snippet>self.root</snippet></ROW><ROW><id>20531640</id><snippet>parent</snippet></ROW><ROW><id>20531640</id><snippet>__init__</snippet></ROW><ROW><id>20531640</id><snippet>self.root</snippet></ROW><ROW><id>20531640</id><snippet>None</snippet></ROW><ROW><id>20531640</id><snippet>parent.data</snippet></ROW><ROW><id>20531640</id><snippet>None.data</snippet></ROW><ROW><id>20531640</id><snippet>dictionary_insert</snippet></ROW><ROW><id>20531640</id><snippet>dct = BinarySearchTree()
dct.dictionary_insert(valid_word_list)
</snippet></ROW><ROW><id>20531640</id><snippet>insert</snippet></ROW><ROW><id>20531640</id><snippet>self.recursive_insert(self.root, val)
</snippet></ROW><ROW><id>20531650</id><snippet>threadsafety:</snippet></ROW><ROW><id>20531650</id><snippet>threadsafety  Meaning
0             Threads may not share the module.
1             Threads may share the module, but not connections.
2             Threads may share the module and connections.
3             Threads may share the module, connections and cursors.
</snippet></ROW><ROW><id>20531650</id><snippet>&gt;&gt;&gt; import MySQLdb
&gt;&gt;&gt; MySQLdb.threadsafety
1
&gt;&gt;&gt; import psycopg2
&gt;&gt;&gt; psycopg2.threadsafety
2
&gt;&gt;&gt; import cx_Oracle
&gt;&gt;&gt; cx_Oracle.threadsafety
2
</snippet></ROW><ROW><id>20531650</id><snippet>__del__</snippet></ROW><ROW><id>20531650</id><snippet>ORA-01000 Too many cursors</snippet></ROW><ROW><id>20531704</id><snippet>import copy

def place_queen(board, row, column, solutions):
    """place a queen that satisfies all the conditions"""
    while True: # loop unconditionally
        if len(board) in (row, column): # out of bounds, so we'll backtrack
            if row == 0:   # base case, can't backtrack, so return solutions
                return solutions
            elif row == len(board): # found a solution, so add it to our list
                solutions.append(copy.deepcopy(board)) # copy, since we mutate board

            for c in range(len(board)): # do the backtracking
                if board[row-1][c] == 1:
                    #remove this queen
                    board[row-1][c] = 0
                    #go back to the previous row and start from the next column
                    return place_queen(board, row-1, c+1, solutions)

        if is_safe(board, row, column):
            #place a queen
            board[row][column] = 1
            #place the next queen with an updated board
            return place_queen(board, row+1, 0, solutions)

        column += 1
</snippet></ROW><ROW><id>20531704</id><snippet>import copy

def place_queen_iterative(n):
    board = [[0 for x in range(n)] for x in range(n)]
    solutions = []
    row = column = 0

    while True: # loop unconditionally
        if len(board) in (row, column):
            if row == 0:
                return solutions
            elif row == len(board):
                solutions.append(copy.deepcopy(board))

            for c in range(len(board)):
                if board[row-1][c] == 1:
                    board[row-1][c] = 0

                    row -= 1     # directly change row and column, rather than recursing
                    column = c+1
                    break        # break out of the for loop (not the while)

        elif is_safe(board, row, column):   # need "elif" here
            board[row][column] = 1

            row += 1      # directly update row and column
            column = 0

        else:             # need "else" here
            column += 1   # directly increment column value
</snippet></ROW><ROW><id>20531704</id><snippet>yield</snippet></ROW><ROW><id>20531704</id><snippet>yield</snippet></ROW><ROW><id>20531704</id><snippet>solutions.append</snippet></ROW><ROW><id>20531704</id><snippet>1000</snippet></ROW><ROW><id>20531704</id><snippet>[1, 3, 0, 2]</snippet></ROW><ROW><id>20531704</id><snippet>(0, 1)</snippet></ROW><ROW><id>20531704</id><snippet>(1, 3)</snippet></ROW><ROW><id>20531704</id><snippet>(2, 0)</snippet></ROW><ROW><id>20531704</id><snippet>(3, 2)</snippet></ROW><ROW><id>20531704</id><snippet>enumerate</snippet></ROW><ROW><id>20531704</id><snippet>for</snippet></ROW><ROW><id>20531704</id><snippet>board = [0, 0]
results.append(board)    # results[0] is a reference to the same object as board
board[0] = 1             # this mutates results[0][0] too!
result.append(board)     # this appends another reference to board!
board[1] = 2             # this also appears in results[0][1] and result[1][1]

print(board)   # as expected, this prints [1, 2]
print(results) # this however, prints [[1, 2], [1, 2]], not [[0, 0], [1, 0]]
</snippet></ROW><ROW><id>20531704</id><snippet>return</snippet></ROW><ROW><id>20531704</id><snippet>return</snippet></ROW><ROW><id>20531704</id><snippet>place_queen(board, row+1, 0)
return
</snippet></ROW><ROW><id>20531704</id><snippet>is_safe</snippet></ROW><ROW><id>20531704</id><snippet>row</snippet></ROW><ROW><id>20531704</id><snippet>row == len(board)</snippet></ROW><ROW><id>20531704</id><snippet>is_safe</snippet></ROW><ROW><id>20531704</id><snippet>for</snippet></ROW><ROW><id>20531704</id><snippet>1</snippet></ROW><ROW><id>20531704</id><snippet>board[-1]</snippet></ROW><ROW><id>20531913</id><snippet>res = [-1]*(max(b)+1)   # create a list of required size with only -1's

for i, v in zip(b, a):
    res[i] = v 
</snippet></ROW><ROW><id>20531913</id><snippet>b</snippet></ROW><ROW><id>20531913</id><snippet>-1</snippet></ROW><ROW><id>20531913</id><snippet>b</snippet></ROW><ROW><id>20531913</id><snippet>res[b[i]]</snippet></ROW><ROW><id>20531913</id><snippet>a[i]</snippet></ROW><ROW><id>20531913</id><snippet>-1</snippet></ROW><ROW><id>20531913</id><snippet>b</snippet></ROW><ROW><id>20531913</id><snippet>a</snippet></ROW><ROW><id>20531933</id><snippet>with open('words.txt') as f:
    wordlist = [line.strip().lower() for line in f]

from itertools import permutations
while True:
    userinput = raw_input("Please enter your letters: ").lower()
    # look up any combinations of letters
    for letter_permutation in permutations(userinput):
        s = ''.join(letter_permutation)
        for word in wordlist:
            if word.startswith(s) or word.endswith(s):
                print "'%s' is part of %s" % (s, word)
    if raw_input('Press q to exit, any key to continue... ').lower() == 'q':
        break
</snippet></ROW><ROW><id>20531933</id><snippet>str.startswith</snippet></ROW><ROW><id>20531933</id><snippet>str.endswith</snippet></ROW><ROW><id>20531933</id><snippet>while True:
    userinput = raw_input("Please enter your letters: ").lower()
    # create a tuple with all combinations of letters
    perms = tuple( ''.join(letter_permutation)
                   for letter_permutation in permutations(userinput) )
    # now check if any of the words starts or ends with any of the letter-perms
    for word in wordlist:
        # startswith, endswith also take tuples as arguments
        if word.startswith(perms) or word.endswith(perms):
            print "'%s' can be found in %s" % (userinput, word)

    if raw_input('Press q to exit, any key to continue... ').lower() == 'q':
        break
</snippet></ROW><ROW><id>20532124</id><snippet>patterns()</snippet></ROW><ROW><id>20532124</id><snippet>graphs/urls.py</snippet></ROW><ROW><id>20532124</id><snippet>urlpatterns = patterns('', # &lt;-- note the `'',`
   url(r'^$', views.index, name='index'),
)
</snippet></ROW><ROW><id>20532137</id><snippet>import re

s = "Wed Dec 11 22:51:56 +0000 2013,@KBIJR please contact me via email: 37four@gmail.com...thanks!,1260080780"

match_emails = re.compile((
    "([a-z0-9!#$%&amp;'*+\/=?^_`{|}~-]+(?:\.[a-z0-9!#$%&amp;'*+\/=?^_`"
    "{|}~-]+)*(@|\sat\s)(?:[a-z0-9](?:[a-z0-9-]*[a-z0-9])?(\.|"
    "\sdot\s))+[a-z0-9](?:[a-z0-9-]*[a-z0-9])?)")
)

emails = match_emails.findall(s)
for email in emails:
    print email[0]
</snippet></ROW><ROW><id>20532137</id><snippet>37four@gmail.com
</snippet></ROW><ROW><id>20532334</id><snippet>class A(object):
    def __init__(self, value):
        self.value = value

a = A(1)
print a.value
a.value = 5
print a.value
</snippet></ROW><ROW><id>20532334</id><snippet>class A(object):
    def __init__(self, value):
        self.value = value

    def is_safe(self):
        if value &gt; 10:
            return False
        return True

    def increase_value(self, increment):
        if increment &lt;= 0:
            raise ValueError("only positive increments are allowed")
        self.value += increment
</snippet></ROW><ROW><id>20532334</id><snippet>setValue</snippet></ROW><ROW><id>20532677</id><snippet>raw_input</snippet></ROW><ROW><id>20532677</id><snippet>input</snippet></ROW><ROW><id>20532677</id><snippet>int(&lt;x&gt;, 2)</snippet></ROW><ROW><id>20532677</id><snippet>while True:
    raw = raw_input('Please enter 64 bits: ')
    try:
        num = int(raw,2)
    except ValueError:
        print("Not a valid binary number")
        continue
    if len(raw)==64:
        print ('Accepted')
        break
    else:
        print ('Not Accepted, need exactly 64 bits.  Try again')
</snippet></ROW><ROW><id>20533036</id><snippet>pip install pgmagick
</snippet></ROW><ROW><id>20533115</id><snippet>tkinter.wantObjects</snippet></ROW><ROW><id>20533115</id><snippet>open_opt = BooleanVar()
for row in tree.get_children():
    open_opt.set(str(tree.item(row, option='open')))
    opened = open_opt.get()
</snippet></ROW><ROW><id>20533442</id><snippet>vars</snippet></ROW><ROW><id>20533442</id><snippet>foo</snippet></ROW><ROW><id>20533442</id><snippet>In [1]: class Test:
   ...:     @staticmethod
   ...:     def foo():
   ...:         print 'static'
   ...:     def foo(self):
   ...:         print 'instance'
   ...:         

In [2]: t = Test()

In [3]: t.foo()
instance

In [6]: vars(Test)
Out[6]: {'__doc__': None, '__module__': '__main__', 'foo': &lt;function __main__.foo&gt;}
</snippet></ROW><ROW><id>20533455</id><snippet>pip</snippet></ROW><ROW><id>20533455</id><snippet>apt-get install libfreetype6-dev
</snippet></ROW><ROW><id>20533455</id><snippet>apt-cache search &lt;string&gt;
</snippet></ROW><ROW><id>20533455</id><snippet>apt-cache search freetype | grep dev
</snippet></ROW><ROW><id>20533464</id><snippet>&gt;&gt;&gt; from pprint import pprint
&gt;&gt;&gt; import datetime

&gt;&gt;&gt; l = [('a', 'b', datetime.datetime.now(), 'd') for _ in xrange(10)]
&gt;&gt;&gt; pprint(l)
[('a', 'b', datetime.datetime(2013, 12, 11, 17, 35, 0, 349796), 'd'),
 ('a', 'b', datetime.datetime(2013, 12, 11, 17, 35, 0, 350127), 'd'),
 ('a', 'b', datetime.datetime(2013, 12, 11, 17, 35, 0, 350132), 'd'),
 ('a', 'b', datetime.datetime(2013, 12, 11, 17, 35, 0, 350134), 'd'),
 ('a', 'b', datetime.datetime(2013, 12, 11, 17, 35, 0, 350137), 'd'),
 ('a', 'b', datetime.datetime(2013, 12, 11, 17, 35, 0, 350140), 'd'),
 ('a', 'b', datetime.datetime(2013, 12, 11, 17, 35, 0, 350143), 'd'),
 ('a', 'b', datetime.datetime(2013, 12, 11, 17, 35, 0, 350145), 'd'),
 ('a', 'b', datetime.datetime(2013, 12, 11, 17, 35, 0, 350148), 'd'),
 ('a', 'b', datetime.datetime(2013, 12, 11, 17, 35, 0, 350151), 'd')]

&gt;&gt;&gt; l_desc = sorted(l, key=lambda t: t[2], reverse=True)
&gt;&gt;&gt; pprint(l_desc)
[('a', 'b', datetime.datetime(2013, 12, 11, 17, 35, 0, 350151), 'd'),
 ('a', 'b', datetime.datetime(2013, 12, 11, 17, 35, 0, 350148), 'd'),
 ('a', 'b', datetime.datetime(2013, 12, 11, 17, 35, 0, 350145), 'd'),
 ('a', 'b', datetime.datetime(2013, 12, 11, 17, 35, 0, 350143), 'd'),
 ('a', 'b', datetime.datetime(2013, 12, 11, 17, 35, 0, 350140), 'd'),
 ('a', 'b', datetime.datetime(2013, 12, 11, 17, 35, 0, 350137), 'd'),
 ('a', 'b', datetime.datetime(2013, 12, 11, 17, 35, 0, 350134), 'd'),
 ('a', 'b', datetime.datetime(2013, 12, 11, 17, 35, 0, 350132), 'd'),
 ('a', 'b', datetime.datetime(2013, 12, 11, 17, 35, 0, 350127), 'd'),
 ('a', 'b', datetime.datetime(2013, 12, 11, 17, 35, 0, 349796), 'd')]

&gt;&gt;&gt; l_asc = sorted(l_desc, key=lambda t: t[2])
&gt;&gt;&gt; pprint(l_asc)
[('a', 'b', datetime.datetime(2013, 12, 11, 17, 35, 0, 349796), 'd'),
 ('a', 'b', datetime.datetime(2013, 12, 11, 17, 35, 0, 350127), 'd'),
 ('a', 'b', datetime.datetime(2013, 12, 11, 17, 35, 0, 350132), 'd'),
 ('a', 'b', datetime.datetime(2013, 12, 11, 17, 35, 0, 350134), 'd'),
 ('a', 'b', datetime.datetime(2013, 12, 11, 17, 35, 0, 350137), 'd'),
 ('a', 'b', datetime.datetime(2013, 12, 11, 17, 35, 0, 350140), 'd'),
 ('a', 'b', datetime.datetime(2013, 12, 11, 17, 35, 0, 350143), 'd'),
 ('a', 'b', datetime.datetime(2013, 12, 11, 17, 35, 0, 350145), 'd'),
 ('a', 'b', datetime.datetime(2013, 12, 11, 17, 35, 0, 350148), 'd'),
 ('a', 'b', datetime.datetime(2013, 12, 11, 17, 35, 0, 350151), 'd')]
</snippet></ROW><ROW><id>20533470</id><snippet>for i in range(100):
</snippet></ROW><ROW><id>20533497</id><snippet>np.save</snippet></ROW><ROW><id>20533497</id><snippet>np.save('matrix.npy', Q)
Q = np.load('matrix.npy')
</snippet></ROW><ROW><id>20533497</id><snippet>np.savetxt</snippet></ROW><ROW><id>20533497</id><snippet>np.savetxt('matrix.txt', Q)
Q = np.loadtxt('matrix.txt')
</snippet></ROW><ROW><id>20533497</id><snippet>np.savetxt</snippet></ROW><ROW><id>20533497</id><snippet>np.savetxt('matrix.txt.gz', Q)
Q = np.loadtxt('matrix.txt.gz')
</snippet></ROW><ROW><id>20533497</id><snippet>pickle</snippet></ROW><ROW><id>20533497</id><snippet>with open('matrix.pickle', 'wb') as f:
    pickle.dump(Q, f)
with open('matrix.pickle', 'rb') as f:
    Q = pickle.load(f)
</snippet></ROW><ROW><id>20533497</id><snippet>savez</snippet></ROW><ROW><id>20533497</id><snippet>savez_compressed</snippet></ROW><ROW><id>20533497</id><snippet>pickle</snippet></ROW><ROW><id>20533527</id><snippet>re</snippet></ROW><ROW><id>20533527</id><snippet>startswith</snippet></ROW><ROW><id>20533527</id><snippet>line.strip().startswith('service')</snippet></ROW><ROW><id>20533527</id><snippet>json</snippet></ROW><ROW><id>20533527</id><snippet>json.loads(rightside)</snippet></ROW><ROW><id>20533527</id><snippet>name</snippet></ROW><ROW><id>20533527</id><snippet>startswith('enable')</snippet></ROW><ROW><id>20533527</id><snippet>startswith('frequency'</snippet></ROW><ROW><id>20533527</id><snippet>r'^\s*service (.*)$\n^\s*enable (\w+)$^\s*frequency (\d+)$'
</snippet></ROW><ROW><id>20533527</id><snippet>startswith</snippet></ROW><ROW><id>20533527</id><snippet>json</snippet></ROW><ROW><id>20533615</id><snippet>server.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)
</snippet></ROW><ROW><id>20533675</id><snippet>bind</snippet></ROW><ROW><id>20533675</id><snippet>getsockname</snippet></ROW><ROW><id>20533675</id><snippet>def app(env, start):
    start('200 OK', [('Content-type', 'text/plain')])
    return ['Hello, world!']
server = cherrypy.wsgiserver.CherryPyWSGIServer(('0.0.0.0', 0), app,
                                                server_name='localhost')
server.bind(socket.AF_INET, socket.SOCK_STREAM)
addr, port = server.socket.getsockname()
print(port)
server.start()
</snippet></ROW><ROW><id>20533675</id><snippet>cherrypy.process.servers</snippet></ROW><ROW><id>20533675</id><snippet>ServerAdapter</snippet></ROW><ROW><id>20533682</id><snippet>string</snippet></ROW><ROW><id>20533682</id><snippet>&gt;&gt;&gt; print "abc\ndef".encode("string_escape")
abc\ndef
</snippet></ROW><ROW><id>20533682</id><snippet>unicode_escape</snippet></ROW><ROW><id>20533682</id><snippet>&gt;&gt;&gt; print "Ā".encode("string_escape")
\xc4\x80
&gt;&gt;&gt; print u"Ā".encode("unicode_escape")
\u0100
</snippet></ROW><ROW><id>20533682</id><snippet>string_escape</snippet></ROW><ROW><id>20533682</id><snippet>unicode_escape</snippet></ROW><ROW><id>20533682</id><snippet>.encode</snippet></ROW><ROW><id>20533682</id><snippet>bytes</snippet></ROW><ROW><id>20533822</id><snippet>class</snippet></ROW><ROW><id>20533822</id><snippet>def update_days():
    maxdays = int(DaysInMonth[SelectedMonthName.get()])
    DaySpinBox.config(to=maxdays)

MonthSpinBox  = Spinbox(...,command=update_days) 
</snippet></ROW><ROW><id>20533822</id><snippet>values</snippet></ROW><ROW><id>20533822</id><snippet>SelectedMonthName.set(DefaultMonthName)</snippet></ROW><ROW><id>20533833</id><snippet>u'this is a {} {}'.format(u'привет', u'мир')
</snippet></ROW><ROW><id>20533833</id><snippet>unicode_literals</snippet></ROW><ROW><id>20533833</id><snippet>__future__</snippet></ROW><ROW><id>20533833</id><snippet>b</snippet></ROW><ROW><id>20533833</id><snippet>&gt;&gt;&gt; from __future__ import unicode_literals
&gt;&gt;&gt; 'this is a {} {}'.format('привет', 'мир')
u'this is a \u043f\u0440\u0438\u0432\u0435\u0442 \u043c\u0438\u0440'
</snippet></ROW><ROW><id>20533927</id><snippet>os.system</snippet></ROW><ROW><id>20533927</id><snippet>os.startfile</snippet></ROW><ROW><id>20533927</id><snippet>subprocess</snippet></ROW><ROW><id>20533927</id><snippet>p = subprocess.Popen(args)
pid = p.pid
</snippet></ROW><ROW><id>20533927</id><snippet>pywin32</snippet></ROW><ROW><id>20533927</id><snippet>def find_window_for_pid(pid):
    result = None
    def callback(hwnd, _):
        nonlocal result
        ctid, cpid = win32process.GetWindowThreadProcessId(hwnd)
        if cpid == pid:
            result = hwnd
            return False
        return True
    win32gui.EnumWindows(callback, None)
    return result
</snippet></ROW><ROW><id>20533927</id><snippet>nonlocal</snippet></ROW><ROW><id>20533927</id><snippet>result = [None]</snippet></ROW><ROW><id>20533927</id><snippet>result[0]</snippet></ROW><ROW><id>20533927</id><snippet>result</snippet></ROW><ROW><id>20533927</id><snippet>pywin32</snippet></ROW><ROW><id>20534053</id><snippet>javac</snippet></ROW><ROW><id>20534053</id><snippet>cmd = 'javac /Users/myname/Desktop/Java/' + java_file 
</snippet></ROW><ROW><id>20534060</id><snippet>re.sub</snippet></ROW><ROW><id>20534060</id><snippet>import re
from datetime import datetime

value = '2013-07-19T13:02:53.8241899Z'

regex = r"(\d{6,}\d+)"

if re.search(regex, value):
    repl = lambda x: x.group(0)[:6]
    value = re.sub(pattern=regex, repl=repl, string=value)

format = '%Y-%m-%dT%H:%M:%S'
if '.' in value:
    format = format + '.%f'
if value.endswith('Z'):
    format = format + 'Z'        
print datetime.strptime(value, format)
</snippet></ROW><ROW><id>20534100</id><snippet>for line in outputfile:
    print(line)
</snippet></ROW><ROW><id>20534100</id><snippet>&gt;&gt;&gt; s = u'\ufeff\u062a\u0627\u0632\u06c1 \u062a\u0631\u06cc\u0646 \u062e\u0628\u0631\u0648\u06ba\u060c \u0628\u0631\u06cc\u06a9\u0646\u06af \u0646\u06cc\u0648\u0632\u060c \u0648\u06cc\u0688\u06cc\u0648\u060c \u0622\u0688\u06cc\u0648\u060c \u0641\u06cc\u0686\u0631 \u0627\u0648\u0631 \u062a\u062c\u0632\u06cc\u0648\u06ba \u06a9\u06d2 \u0644\u06cc\u06d2 \u0628\u06cc \u0628\u06cc \u0633\u06cc \u0627\u0631\u062f\u0648 \u06a9\u06cc \u0648\u06cc\u0628'

&gt;&gt;&gt; print(s)
تازہ ترین خبروں، بریکنگ نیوز، ویڈیو، آڈیو، فیچر اور تجزیوں کے لیے بی بی سی اردو کی ویب
</snippet></ROW><ROW><id>20534243</id><snippet>ends-with</snippet></ROW><ROW><id>20534243</id><snippet>regexpNS = 'http://exslt.org/regular-expressions'
tree.xpath("//a[re:test(@href, '(png|bmp|jpg|exe)$')]", namespaces={'re':regexpNS}")
</snippet></ROW><ROW><id>20534657</id><snippet>from bs4 import BeautifulSoup
import requests

html = requests.get('http://www.indiainfoline.com/Markets/Company/A.aspx').text
bs = BeautifulSoup(html)

# find the links to companies
company_menu = bs.find("div",{'style':'padding-left:5px'})
# print all companies links
companies = company_menu.find_all('a')
for company in companies:
    print company['href']
</snippet></ROW><ROW><id>20534657</id><snippet>for company in companies:
    print company.getText().strip()
</snippet></ROW><ROW><id>20534657</id><snippet>import re
# example company page
html = requests.get('http://www.indiainfoline.com/Markets/Company/Adani-Power-Ltd/533096').text
EMAIL_REGEX = re.compile("mailto:([A-Za-z0-9.\-+]+@[A-Za-z0-9_\-]+[.][a-zA-Z]{2,4})")
re.findall(EMAIL_REGEX, html)
# and there you got a list of found emails
...
</snippet></ROW><ROW><id>20534799</id><snippet>[\D]+?</snippet></ROW><ROW><id>20534799</id><snippet>+?</snippet></ROW><ROW><id>20534799</id><snippet>import re
pattern = re.compile(r"^(\d+.)\s*([\D]+?)" + r"\s+(\d+)"*12 + r"\s*$")
</snippet></ROW><ROW><id>20534799</id><snippet>match = pattern.match("7. Accrington               22   5  3  3  26  17   1  5  5  22  31   20")
print match.groups()
Out[133]: 
('7.',
 'Accrington',
 '22',
 '5',
 '3',
 '3',
 '26',
 '17',
 '1',
 '5',
 '5',
 '22',
 '31',
 '20')

match2 = pattern.match("91. Accrington Bay              22   5  3  3  26  17   1  5  5  22  31   20")
print match2
Out[134]: 
('91.',
 'Accrington Bay',
 '22',
 '5',
 '3',
 '3',
 '26',
 '17',
 '1',
 '5',
 '5',
 '22',
 '31',
 '20')
</snippet></ROW><ROW><id>20534863</id><snippet>x = c.execute("SELECT Four FROM keys2 WHERE One = ?", "B")
</snippet></ROW><ROW><id>20534863</id><snippet>B</snippet></ROW><ROW><id>20534863</id><snippet>x = c.execute("SELECT Four FROM keys2 WHERE One = 'B'")
</snippet></ROW><ROW><id>20535037</id><snippet>topdown=False</snippet></ROW><ROW><id>20535037</id><snippet>for root, dirs, files in os.walk(path, topdown=False):  # Listing the files
    for i, name in enumerate(dirs):
        output = name.replace(pattern, "")              # Taking out pattern
        if output != name:
            os.rename(                                  # Renaming
                os.path.join(root, name),
                os.path.join(root, output))
        else:
            pass
</snippet></ROW><ROW><id>20535134</id><snippet>my_parser</snippet></ROW><ROW><id>20535134</id><snippet>openerp.report.rml_parse = my_parser
</snippet></ROW><ROW><id>20535134</id><snippet>openerp.report.rml_parse</snippet></ROW><ROW><id>20535203</id><snippet>#REST_FRAMEWORK = {
#   '''Use hyperlinked styles by default'''
#   '''only used if serializer_class attribute is not set on a view'''
#   'DEFAULT_MODEL_SERIALIZER_CLASS':
#         'rest_framkework.serializers.HyperLinkedModelSerializer',
#   'DEFAULT_PERMISSION_CLASSES':
#          'rest_framework.permissions.DjangoModelPermissionsOrAnonReadOnly'
# }
</snippet></ROW><ROW><id>20535246</id><snippet>def field_by(self, field_name, user):
    return self.filter(**{field_name + '__user': user})
</snippet></ROW><ROW><id>20535379</id><snippet>range()</snippet></ROW><ROW><id>20535379</id><snippet>[0,1,2,..,9]</snippet></ROW><ROW><id>20535379</id><snippet>(i=0; i&lt;10; i+=1)</snippet></ROW><ROW><id>20535379</id><snippet># this is a list, create all 5000000 x/2 values immediately, uses []
lis = [x/2 for x in range(5000000)]

# this is a generator, creates each x/2 value only when it is needed, uses ()
gen = (x/2 for x in range(5000000)) 
</snippet></ROW><ROW><id>20535379</id><snippet>yield</snippet></ROW><ROW><id>20535379</id><snippet># this is also a generator, it will run until a yield occurs, and return that result.
# on the next call it picks up where it left off and continues until a yield occurs...
def divby2(n):
    num = 0
    while num &lt; n:
        yield num/2
        num += 1

# same as (x/2 for x in range(5000000))
print divby2(5000000)
</snippet></ROW><ROW><id>20535379</id><snippet>range(5000000)</snippet></ROW><ROW><id>20535379</id><snippet>[x/2 for x in range(5000000)]</snippet></ROW><ROW><id>20535379</id><snippet>range(...)</snippet></ROW><ROW><id>20535379</id><snippet>x</snippet></ROW><ROW><id>20535379</id><snippet>x/2</snippet></ROW><ROW><id>20535585</id><snippet>__getitem__</snippet></ROW><ROW><id>20535585</id><snippet>jcomeau@aspire:~$ cat /tmp/sliceable.py; echo ---; python /tmp/sliceable.py
'SliceableDict test'
import sys, os
class SliceableDict(dict):
 def __init__(self, d = {}):
  super(SliceableDict, self).__init__(d)
 def __getitem__(self, index):
  try:
   return super(SliceableDict, self).__getitem__(index)
  except TypeError:
   return [super(SliceableDict, self).__getitem__(x) for x in index]
 def __setitem__(self, index, value):
  try:
   super(SliceableDict, self).__setitem__(index, value)
  except:
   for i in range(len(index)):
    super(SliceableDict, self).__setitem__(index[i], value[i])
d = SliceableDict({1: 'a', 2: 'b', 3: 'c'})
print d[2]
print d[[1, 3]]
d[[1, 3]] = ['x', 'y']
print d
---
b
['a', 'c']
{1: 'x', 2: 'b', 3: 'y'}
</snippet></ROW><ROW><id>20535800</id><snippet>&gt;&gt;&gt; id(surfaceXY[0])
4548151416
&gt;&gt;&gt; id(surfaceXY[1])
4548151416
</snippet></ROW><ROW><id>20535800</id><snippet>surfaceXY = [[0]*10 for i in range(10)]
</snippet></ROW><ROW><id>20535800</id><snippet>&gt;&gt;&gt; [x, x1, y, y1] = [0, 5, 0, 2]
&gt;&gt;&gt; surfaceXY = [[0]*10 for i in range(10)]
&gt;&gt;&gt; for i in range(x, x1):
...   for j in range(y, y1):
...     surfaceXY[i][j] = 5
... 
&gt;&gt;&gt; for k in range(10):
...   for l in range(10):
...     print surfaceXY[k][l],
...   print ""
... 
5 5 0 0 0 0 0 0 0 0 
5 5 0 0 0 0 0 0 0 0 
5 5 0 0 0 0 0 0 0 0 
5 5 0 0 0 0 0 0 0 0 
5 5 0 0 0 0 0 0 0 0 
0 0 0 0 0 0 0 0 0 0 
0 0 0 0 0 0 0 0 0 0 
0 0 0 0 0 0 0 0 0 0 
0 0 0 0 0 0 0 0 0 0 
0 0 0 0 0 0 0 0 0 0 
&gt;&gt;&gt; 
</snippet></ROW><ROW><id>20536001</id><snippet>print('the total is', sales)</snippet></ROW><ROW><id>20536001</id><snippet>sales</snippet></ROW><ROW><id>20536001</id><snippet>print('the total is', sum(sales))</snippet></ROW><ROW><id>20536001</id><snippet>print()</snippet></ROW><ROW><id>20536001</id><snippet>sales[index] = float(input("Sales for day #{}: ".format(index+1)))
</snippet></ROW><ROW><id>20536001</id><snippet>sales</snippet></ROW><ROW><id>20536001</id><snippet>def main(num_days=5):
    sales = []
    print('Enter the sales for each day.')
    for day in range(num_days):
        sales.append(float(input("Sales for day #{}: ".format(day+1))))
    print('the total is', sum(sales))

main()
</snippet></ROW><ROW><id>20536111</id><snippet>def gen():
    x = 0
    while True:
        x += 1
        yield x

print gen()
</snippet></ROW><ROW><id>20536111</id><snippet>&lt;generator object gen at 0x01CEA4B8&gt;
</snippet></ROW><ROW><id>20536111</id><snippet>for i in gen():
    print i
</snippet></ROW><ROW><id>20536209</id><snippet>import os
import sys


# the command like this: python rename dirs /your/path/name/ tst
if __name__ == '__main__':
    mode = sys.argv[1]  # dirs or files
    pathname = sys.argv[2]
    pattern = sys.argv[3]

    ndict = {'dirs': '', 'files': ''}
    topdown = {'dirs': False, 'files': True}

    for root, ndict['dirs'], ndict['files'] in os.walk(
            pathname, topdown[mode]):
        for name in enumerate(ndict[mode]):
            newname = name.replace(pattern, '')
            if newname != name:
                os.rename(
                    os.path.join(root, name),
                    os.path.join(root, newname))
</snippet></ROW><ROW><id>20536241</id><snippet>Rfiles &lt;- file.path(&lt;your.folder&gt;, dir(pattern="\\.[R|r]$"))
library(parallel)
clus &lt;- makeCluster(length(Rfiles))
parLapply(clus, Rfiles, source)
</snippet></ROW><ROW><id>20536249</id><snippet>student</snippet></ROW><ROW><id>20536249</id><snippet>student_id</snippet></ROW><ROW><id>20536249</id><snippet>None</snippet></ROW><ROW><id>20536249</id><snippet>session.add(student)
session.flush()
</snippet></ROW><ROW><id>20536407</id><snippet>f = lambda j, i = i : i
</snippet></ROW><ROW><id>20536407</id><snippet>f_list = []
for i in range(5):
    f = lambda j, i = i : i
    f_list.append(f)

for i in range(5):    
    print f_list[i](0)
</snippet></ROW><ROW><id>20536407</id><snippet>0
1
2
3
4
</snippet></ROW><ROW><id>20536760</id><snippet>public int uploadFile(String sourceFileUri)
    {
        int serverResponseCode =0;
        String fileName = sourceFileUri;

        HttpURLConnection conn = null;
        DataOutputStream dos = null;
        String lineEnd = "\r\n";
        String twoHyphens = "--";
        String boundary = "*****";
        int bytesRead, bytesAvailable, bufferSize;
        byte[] buffer;
        int maxBufferSize = 1 * 1024 * 1024;
        File sourceFile = new File(sourceFileUri);

        if (!sourceFile.isFile())
        {
            Log.e("uploadFile", "Source File not exist");
            return 0;
        }
        else
        {
            try
            {
                // open a URL connection to the Servlet
                FileInputStream fileInputStream = new FileInputStream(sourceFile);
                URL url = new URL("http://piratebox.lan:8080/");

                // Open a HTTP  connection to  the URL
                conn = (HttpURLConnection) url.openConnection();
                conn.setDoInput(true); // Allow Inputs
                conn.setDoOutput(true); // Allow Outputs
                conn.setUseCaches(false);
                conn.setRequestMethod("POST");
                conn.setRequestProperty("Connection", "Keep-Alive");
                conn.setRequestProperty("ENCTYPE", "multipart/form-data");
                conn.setRequestProperty("Content-Type", "multipart/form-data;boundary=" + boundary);
                conn.setRequestProperty("uploaded_file", fileName);

                dos = new DataOutputStream(conn.getOutputStream());

                dos.writeBytes(twoHyphens + boundary + lineEnd);
                dos.writeBytes("Content-Disposition: form-data; name=\"upfile\"; filename=" + fileName + "" + lineEnd);
                dos.writeBytes("Content-Type: image/png" + lineEnd);
                dos.writeBytes(lineEnd);

                // create a buffer of  maximum size
                bytesAvailable = fileInputStream.available();

                bufferSize = Math.min(bytesAvailable, maxBufferSize);
                buffer = new byte[bufferSize];

                // read file and write it into form...
                bytesRead = fileInputStream.read(buffer, 0, bufferSize);

                while (bytesRead &gt; 0)
                {

                    dos.write(buffer, 0, bufferSize);
                    bytesAvailable = fileInputStream.available();
                    bufferSize = Math.min(bytesAvailable, maxBufferSize);
                    bytesRead = fileInputStream.read(buffer, 0, bufferSize);

                }

                // send multipart form data neccesssary after file data...
                dos.writeBytes(lineEnd);
                dos.writeBytes(twoHyphens + boundary + twoHyphens + lineEnd);

                // Responses from the server (code and message)
                serverResponseCode = conn.getResponseCode();
                String serverResponseMessage = conn.getResponseMessage();

                Log.i("uploadFile", "HTTP Response is : " + serverResponseMessage + ": " + serverResponseCode);

                if (serverResponseCode == 200)
                {
                    runOnUiThread(new Runnable()
                    {
                        public void run()
                        {
                            String msg = "File Upload Completed";
                        }
                    });
                }
                //close the streams
                fileInputStream.close();
                dos.flush();
                dos.close();

            }
            catch (Exception ex)
            {
                ex.printStackTrace();
            }
            return serverResponseCode;

        } // End else block
    }
</snippet></ROW><ROW><id>20537061</id><snippet>student_object</snippet></ROW><ROW><id>20537061</id><snippet>Student</snippet></ROW><ROW><id>20537061</id><snippet>'tuple' object has no attribute 'age'</snippet></ROW><ROW><id>20537061</id><snippet>class Student(object):

    def __init__(self, name, grade, age):
        self.name = name
        self.grade = grade
        self.age = age

    def __repr__(self):
        return '{0.name} {0.grade} {0.age}'.format(self)

students = [Student('john','a',15), Student('as','C',12), Student('dave','B',10)]
print sorted(students, key=lambda x: x.age)
</snippet></ROW><ROW><id>20537065</id><snippet>import collections, json
data = '{"a":1, "b": 2}'
print json.JSONDecoder(object_pairs_hook=collections.OrderedDict).decode(data)
</snippet></ROW><ROW><id>20537065</id><snippet>OrderedDict([(u'a', 1), (u'b', 2)])
</snippet></ROW><ROW><id>20537277</id><snippet>strings = ['abc efg hijklmn aaaaa']
strings = strings[0].split()
</snippet></ROW><ROW><id>20537305</id><snippet>=====
zeros
=====

Definition: zeros(shape, dtype=float, order='C')
Type: Function of numpy.core.multiarray module

[...]

Returns
-------
out : ndarray
    Array of zeros with the given shape, dtype, and order.
</snippet></ROW><ROW><id>20537305</id><snippet>float</snippet></ROW><ROW><id>20537305</id><snippet>object</snippet></ROW><ROW><id>20537305</id><snippet>val = numpy.zeros((1,3),numpy.dtype(object))
val[0] = myfunc(stuff)
print val[0,0]
</snippet></ROW><ROW><id>20537305</id><snippet>&gt;&gt;&gt; ara = np.zeros((2,2))
&gt;&gt;&gt; ara
array([[ 0.,  0.],
       [ 0.,  0.]])
&gt;&gt;&gt; print ara
[[ 0.  0.]
 [ 0.  0.]]
</snippet></ROW><ROW><id>20537339</id><snippet>def main():
    months = ["Jan","Feb" .... ,"Dec"]
    rain = []
    for month in months:
        rain.append(int(input("Enter .. for" + month)))
    print("Total", sum(rain))
    print("Average", sum(rain)/float(len(rain)))
</snippet></ROW><ROW><id>20537339</id><snippet>max(rain)</snippet></ROW><ROW><id>20537339</id><snippet>min(rain)</snippet></ROW><ROW><id>20537783</id><snippet>USER</snippet></ROW><ROW><id>20537783</id><snippet>LOGNAME</snippet></ROW><ROW><id>20537783</id><snippet>manage.py</snippet></ROW><ROW><id>20537783</id><snippet>os.environ['USER']</snippet></ROW><ROW><id>20537783</id><snippet>INSTALLED_APPS</snippet></ROW><ROW><id>20537783</id><snippet>celery</snippet></ROW><ROW><id>20538643</id><snippet>([ATGC]{2})\1{2,}
</snippet></ROW><ROW><id>20538643</id><snippet>\1</snippet></ROW><ROW><id>20538652</id><snippet>import os
from os import listdir

def find_csv_filenames(path_to_dir, suffix=".csv" ):
    path_to_dir = os.path.normpath(path_to_dir)
    filenames = listdir(path_to_dir)
    #Check *csv directory
    fp = lambda f: not os.path.isdir(path_to_dir+"/"+f) and f.endswith(suffix)
    return [path_to_dir+"/"+fname for fname in filenames if fp(fname)]

def convert_files(files, ascii, to="utf-8"):
    for name in files:
        print "Convert {0} from {1} to {2}".format(name, ascii, to)
        with open(name) as f:
            for line in f.readlines():
                pass
                print unicode(line, "cp866").encode("utf-8")    

csv_files = find_csv_filenames('/path/to/csv/dir', ".csv")
convert_files(csv_files, "cp866") #cp866 is my ascii coding. Replace with your coding.
</snippet></ROW><ROW><id>20538931</id><snippet>{
'aesthetic': 
    {
    '_rank': 290,
    'feeling': 
        {
        '_rank': 10,
        'the': 
            {
            '_rank': 10,
            'feeling': 
                {
                '_rank': 10, 
                'of': 10
                }
            }
         },
    }
}
</snippet></ROW><ROW><id>20538931</id><snippet>aesthetic</snippet></ROW><ROW><id>20538931</id><snippet>ints</snippet></ROW><ROW><id>20538931</id><snippet>for ngram, one_grams in data.items():
</snippet></ROW><ROW><id>20538931</id><snippet>ngram=aesthetics</snippet></ROW><ROW><id>20538931</id><snippet>one_grams={the dictionary}</snippet></ROW><ROW><id>20538931</id><snippet>int(one_grams['_rank'])
</snippet></ROW><ROW><id>20538931</id><snippet>_rank</snippet></ROW><ROW><id>20538931</id><snippet>one_gram, two_grams in one_grams.items()
</snippet></ROW><ROW><id>20538931</id><snippet>.items()</snippet></ROW><ROW><id>20538931</id><snippet>one_grams</snippet></ROW><ROW><id>20538931</id><snippet>(one_gram,two_grams) = [('_rank', 290), ('feeling', {'_rank': 10, 'the': {'_rank': 10, 'feeling': {'_rank': 10, 'of': 10}}})]
</snippet></ROW><ROW><id>20538931</id><snippet>two_grams</snippet></ROW><ROW><id>20538931</id><snippet>int</snippet></ROW><ROW><id>20538931</id><snippet>dict</snippet></ROW><ROW><id>20538931</id><snippet>two_grams['_rank']
</snippet></ROW><ROW><id>20538931</id><snippet>int</snippet></ROW><ROW><id>20538931</id><snippet>dict</snippet></ROW><ROW><id>20538931</id><snippet>_rank</snippet></ROW><ROW><id>20538931</id><snippet>_rank</snippet></ROW><ROW><id>20538931</id><snippet>for one_gram,two_grams one_grams.items(): 
    if one_gram=='_rank': 
        continue  
</snippet></ROW><ROW><id>20539053</id><snippet>a_interval = a - datetime.datetime.min</snippet></ROW><ROW><id>20539053</id><snippet>b_interval = b - datetime.datetime.min</snippet></ROW><ROW><id>20539053</id><snippet>print(a_interval - b_interval)</snippet></ROW><ROW><id>20539053</id><snippet>print(a_interval / b_interval)</snippet></ROW><ROW><id>20539506</id><snippet>&gt;&gt;&gt; from operator import and_
&gt;&gt;&gt; np.ma.array(arr1.data+arr2.data,mask=map(and_,arr1.mask,arr2.mask))
masked_array(data = [2 4 --],
             mask = [False False  True],
       fill_value = 999999)
</snippet></ROW><ROW><id>20539816</id><snippet>u</snippet></ROW><ROW><id>20539816</id><snippet>(u'Greek letters', u'Greek letters'),
#('Greek letters', 'Greek letters'),
</snippet></ROW><ROW><id>20539816</id><snippet>max_length=20</snippet></ROW><ROW><id>20539920</id><snippet>break</snippet></ROW><ROW><id>20539920</id><snippet>continue</snippet></ROW><ROW><id>20539920</id><snippet>while True: #Or some better condition
    ...
    ...
    repeat = str(input("..."))
    if repeat == "yes":
        continue   #This is actually redundant, since we will continue to the next
                   # iteration even otherwise.
    else:
        break
</snippet></ROW><ROW><id>20539930</id><snippet>if the two numbers are equal
    return either one as the GCD
else
    return the GCD of the absolute difference between them and the smaller number
</snippet></ROW><ROW><id>20539930</id><snippet>if the smaller number perfectly divides the larger
    return the smaller number as the GCD
else
    return the GCD of 
        1. the remainder from dividing the bigger number by the smaller
        2. the smaller number
</snippet></ROW><ROW><id>20539930</id><snippet>def GCDfinder(a,b):
    while b != 0:
        a,b = b, a%b
    return a

&gt;&gt;&gt; GCDfinder(12,20)
4
&gt;&gt;&gt; GCDfinder(17,20)
1
&gt;&gt;&gt; GCDfinder(3,4)
1
</snippet></ROW><ROW><id>20539984</id><snippet>m = np.zeros((len(json_aaray), 3))
for i, elem in enumerate(json_array):
    m[i,0] = elem['x']
    m[i,1] = elem['y']
    m[i,2] = elem['z']
</snippet></ROW><ROW><id>20540023</id><snippet>json.dump</snippet></ROW><ROW><id>20540023</id><snippet>import json

data = {'a':1, 'b':2}
with open('my_json.txt', 'w') as fp:
    json.dump(data, fp)
</snippet></ROW><ROW><id>20540023</id><snippet>data = {'a':(10, 20, 'blah'), 'b':(20, 70, 'blah2')
with open('my_json.txt', 'w') as fp:
     json.dump(data, fp)
</snippet></ROW><ROW><id>20540023</id><snippet>with open('my_json.txt') as fp:
    data = json.loads(fp)
    a = Texte(*data['a'])
    b = Texte(*data['b'])
</snippet></ROW><ROW><id>20540181</id><snippet>super(type[, object-or-type])</snippet></ROW><ROW><id>20540181</id><snippet>super</snippet></ROW><ROW><id>20540181</id><snippet>class A(object): ...
class B(A): ...
b = B()

super(B, b).get_value = Something()  # no
b.get_value = Something()  # ok
B.get_value = Something()  # ok
A.get_value = Something()  # ok
</snippet></ROW><ROW><id>20540329</id><snippet>Model</snippet></ROW><ROW><id>20540329</id><snippet>for i, model in enumerate(models):
    model.sort_order = i
    model.save()
</snippet></ROW><ROW><id>20540329</id><snippet>model.sort_order = i * 10</snippet></ROW><ROW><id>20540530</id><snippet>#!/usr/bin/env python

def repeatOnError(*exceptions):
  def checking(function):
    def checked(*args, **kwargs):
      while True:
        try:
          result = function(*args, **kwargs)
        except exceptions as problem:
          print "There was a problem with the input:"
          print problem.__class__.__name__
          print problem
          print "Please repeat!"
        else: 
          return result
    return checked
  return checking

@repeatOnError(ValueError)
def getNumberOfIterations():
  return int(raw_input("Please enter the number of iterations: "))

iterationCounter = getNumberOfIterations()
print "You have chosen", iterationCounter, "iterations."
</snippet></ROW><ROW><id>20540530</id><snippet>@decorator</snippet></ROW><ROW><id>20540641</id><snippet>board = [[0]*10 for i in range(10)] # Generate 10 lists filled with 10 0's each.

for x in board:
    print x # Print out each [0,0,...0,0] on a new line.
</snippet></ROW><ROW><id>20540708</id><snippet>arr[0][2]
</snippet></ROW><ROW><id>20540716</id><snippet>initializePlugin(obj)</snippet></ROW><ROW><id>20540716</id><snippet>uninitializePlugin(obj)</snippet></ROW><ROW><id>20540716</id><snippet>def initializePlugin(obj):
    try:
        import plugin_node_1
        plugin_node_1.initializePlugin(obj)

        import plugin_node_2
        plugin_node_2.initializePlugin(obj)


    except: 
        print 'Failed to register plug-in'

    ms_menu.createMenu()
    ms_menu.buildMenu()


def uninitializePlugin(obj):
    try:
        import plugin_node_1
        plugin_node_1.uninitializePlugin(obj)

        import plugin_node_2
        plugin_node_2.uninitializePlugin(obj)


    except: 
        print 'Failed to deregister plug-in'

    ms_menu.deleteMenu()
</snippet></ROW><ROW><id>20540899</id><snippet>from threading import Thread
import gobject

gobject.threads_init()

time_to_wait = 2.0      # time in seconds
nonblocking_wait = Thread(target=sleep, args=(timetowait,))
nonblocking_wait.start()

while nonblocking_wait.is_alive():
    nonblocking_wait.join(.05)
    gtk.main_iteration_do(True)     # blocks if no event is pending
</snippet></ROW><ROW><id>20540899</id><snippet>time_to_wait</snippet></ROW><ROW><id>20540899</id><snippet>0.05</snippet></ROW><ROW><id>20540907</id><snippet>insert_chart()</snippet></ROW><ROW><id>20540907</id><snippet>worksheet.insert_chart(3, 4, chart)
</snippet></ROW><ROW><id>20540907</id><snippet>chart_row = 1
chart_col = 3
chart_offset = 0;

worksheet.insert_chart(chart_row + chart_offset, chart_col, chart1)

# Later...

chart_offset += 15
worksheet.insert_chart(chart_row + chart_offset, chart_col, chart2)
</snippet></ROW><ROW><id>20540907</id><snippet>offset</snippet></ROW><ROW><id>20540907</id><snippet>set_h_pagebreaks()</snippet></ROW><ROW><id>20540948</id><snippet>data = [(u'030944', u'20091123', 10, 30, 0), (u'030944', u'20100226', 10, 15, 0)]
fields = ['id', 'date', 'hour', 'minute', 'interval']
dicts = [dict(zip(fields, d)) for d in data]
</snippet></ROW><ROW><id>20540948</id><snippet>zip</snippet></ROW><ROW><id>20540948</id><snippet>dict</snippet></ROW><ROW><id>20541418</id><snippet>get()</snippet></ROW><ROW><id>20541418</id><snippet>post()</snippet></ROW><ROW><id>20541418</id><snippet>def get(self, request, *args, **kwargs):
    return self.start()
</snippet></ROW><ROW><id>20541418</id><snippet>self.start()</snippet></ROW><ROW><id>20541894</id><snippet>#views.py
form = MyForm(request)

#forms.py
def __init__(self, req, *args, **kwargs):
    super(MyForm, self).__init__(*args, **kwargs)
    self.request = req

#somewhere in your form's body
max_min(self.request)
</snippet></ROW><ROW><id>20541894</id><snippet>class MAxMin(forms.Form):
my_field = forms.IntegerField(required=True, 
                              widget=forms.NumberInput(attrs={'class':'form-control', 
                              'required': 'true'}))

def __init__(self, req, *args, **kwargs):
    super(MAxMin, self).__init__(*args, **kwargs)
    self.fields['my_field'].min_value = max_min(req)
</snippet></ROW><ROW><id>20541942</id><snippet>temp_module</snippet></ROW><ROW><id>20541942</id><snippet>dir</snippet></ROW><ROW><id>20541942</id><snippet>dir</snippet></ROW><ROW><id>20541942</id><snippet>testLoader.loadTestsFromModule(temp_module)</snippet></ROW><ROW><id>20541942</id><snippet>sys.modules</snippet></ROW><ROW><id>20541942</id><snippet>def _RunTestsList(self, lTestsPaths):
    """ Runs all tests in lTestsPaths with the unittest module
    """
    for sTestPath in lTestsPaths:
        testLoader = unittest.TestLoader()
        temp_module = imp.load_source('temp_module', sTestPath)
        tstSuite = testLoader.loadTestsFromModule(temp_module)
        unittest.TextTestRunner (verbosity=1).run(tstSuite)
        del sys.modules['temp_module']
</snippet></ROW><ROW><id>20542162</id><snippet>data.frame</snippet></ROW><ROW><id>20542162</id><snippet>library(reshape2)
x &lt;- melt(as.matrix(mydf))
dcast(x, Var1 ~ value, fun.aggregate = length, value.var="value")
#   Var1 Apple F Fri Grape M Mon Orange Tue
# 1    1     1 1   0     0 0   1      0   0
# 2    2     0 1   0     0 0   0      1   1
# 3    3     1 0   1     0 1   0      0   0
# 4    4     0 0   0     1 1   1      0   0
</snippet></ROW><ROW><id>20542162</id><snippet>get_dummies</snippet></ROW><ROW><id>20542162</id><snippet>import numpy as np
import pandas as pd
data = {'name': ['apple', 'orange', 'apple', 'grape'],
        'sex': ['F', 'F', 'M', 'M'],
        'week': ['mon', 'tue', 'fri', 'mon']}
frame = pd.DataFrame(data)
print frame


     name sex week
0   apple   F  mon
1  orange   F  tue
2   apple   M  fri
3   grape   M  mon

print pd.get_dummies(frame.unstack().dropna()).groupby(level = 1).sum()

   F  M  apple  fri  grape  mon  orange  tue
0  1  0      1    0      0    1       0    0
1  1  0      0    0      0    0       1    1
2  0  1      1    1      0    0       0    0
3  0  1      0    0      1    1       0    0
</snippet></ROW><ROW><id>20542216</id><snippet>&gt;&gt;&gt; [[n[0] for n in l]] + [u[1:] for u in l]
[['A', 'B', 'C', 'D'], ['A1', 1, 2, 3], ['A2', 4, 5, 6], ['A3', 7, 8, 9], ['A4', 10, 11, 12]]
</snippet></ROW><ROW><id>20542467</id><snippet>__bases__</snippet></ROW><ROW><id>20542467</id><snippet>tuple</snippet></ROW><ROW><id>20542467</id><snippet>class A(object): ...
class B(A): ...

def setUp(self):
    with patch('A', new_callable=Mock) as MockObject:
        self.b = B()
        self.b.__class__.__bases__ = (MockOjbect,)
</snippet></ROW><ROW><id>20542467</id><snippet>&gt;&gt;&gt; class Foo(object):
...     pass
... 
&gt;&gt;&gt; Foo.__class__.__bases__
(&lt;type 'object'&gt;,)
</snippet></ROW><ROW><id>20542467</id><snippet>tuple</snippet></ROW><ROW><id>20542467</id><snippet>__bases__</snippet></ROW><ROW><id>20542918</id><snippet>in</snippet></ROW><ROW><id>20542918</id><snippet>__iter__()</snippet></ROW><ROW><id>20542918</id><snippet>any()</snippet></ROW><ROW><id>20542918</id><snippet>any(x[0] == 3 for x in l)
</snippet></ROW><ROW><id>20542918</id><snippet>in</snippet></ROW><ROW><id>20542918</id><snippet>izip()</snippet></ROW><ROW><id>20542918</id><snippet>timeit</snippet></ROW><ROW><id>20542918</id><snippet>izip()</snippet></ROW><ROW><id>20542918</id><snippet>&gt;&gt;&gt; # Python 2, 'short'
...
&gt;&gt;&gt; timeit.timeit("l = izip(xrange(10**2), xrange(10**2)); 3 not in (x[0] for x in l)", 'from itertools import izip', number=100000)
0.27606701850891113
&gt;&gt;&gt; timeit.timeit("l = izip(xrange(10**2), xrange(10**2)); 3 not in [x[0] for x in l]", 'from itertools import izip', number=100000)
1.7422130107879639
&gt;&gt;&gt; # Python 2, 'long'
...
&gt;&gt;&gt; timeit.timeit("l = izip(xrange(10**3), xrange(10**3)); 3 not in (x[0] for x in l)", 'from itertools import izip', number=100000)
0.3002200126647949
&gt;&gt;&gt; timeit.timeit("l = izip(xrange(10**3), xrange(10**3)); 3 not in [x[0] for x in l]", 'from itertools import izip', number=100000)
15.624258995056152
</snippet></ROW><ROW><id>20542918</id><snippet>&gt;&gt;&gt; # Python 3, 'short'
... 
&gt;&gt;&gt; timeit.timeit("l = zip(range(10**2), range(10**2)); 3 not in (x[0] for x in l)", number=100000)
0.2624585109297186
&gt;&gt;&gt; timeit.timeit("l = zip(range(10**2), range(10**2)); 3 not in [x[0] for x in l]", number=100000)
1.5555254180217162
&gt;&gt;&gt; # Python 3, 'long'
... 
&gt;&gt;&gt; timeit.timeit("l = zip(range(10**3), range(10**3)); 3 not in (x[0] for x in l)", number=100000)
0.27222433499991894
&gt;&gt;&gt; timeit.timeit("l = zip(range(10**3), range(10**3)); 3 not in [x[0] for x in l]", number=100000)
15.76974998600781
</snippet></ROW><ROW><id>20542918</id><snippet>&gt;&gt;&gt; timeit.timeit("n = 8; l = izip(xrange(n), xrange(n)); 3 not in (x[0] for x in l)", 'from itertools import izip', number=100000)
0.2870941162109375
&gt;&gt;&gt; timeit.timeit("n = 8; l = izip(xrange(n), xrange(n)); 3 not in [x[0] for x in l]", 'from itertools import izip', number=100000)
0.28503894805908203
</snippet></ROW><ROW><id>20542918</id><snippet>&gt;&gt;&gt; timeit.timeit("n = 4; l = zip(range(n), range(8)); 3 not in (x[0] for x in l)", number=100000)
0.284480107948184
&gt;&gt;&gt; timeit.timeit("n = 4; l = zip(range(n), range(8)); 3 not in [x[0] for x in l]", number=100000)
0.23570425796788186
</snippet></ROW><ROW><id>20543011</id><snippet>import os

target_dir = "/Users/usename/dirctectory/"

for path, dirs, files in os.walk(target_dir):
    for i in range(len(files)):
        filename, ext = os.path.splitext(files[i])
        newname_pre = 'newname_pre'
        new_file = newname_pre + str(i) + ext

        old_filepath = os.path.join(path, files[i]) # here was the problem
        new_filepath = os.path.join(path, new_file)
        os.rename(old_filepath, new_filepath)
</snippet></ROW><ROW><id>20543059</id><snippet>choices</snippet></ROW><ROW><id>20543192</id><snippet>a</snippet></ROW><ROW><id>20543192</id><snippet>a.b.c</snippet></ROW><ROW><id>20543192</id><snippet># a/b/c/__init__.py
from d import Class1
from e import Class2
from f import Class3
</snippet></ROW><ROW><id>20543192</id><snippet># client code:
from a.b.c import Class1, Class2, Class3
</snippet></ROW><ROW><id>20543409</id><snippet>&gt;&gt;&gt; df2['A'].astype(float).replace([1, 2, 3, 4, 5], [1, 0.85, 0.70, 0.55, 0.40])
0    1.00
1    0.85
2    0.70
3    0.55
4    0.40
Name: A, dtype: float64
</snippet></ROW><ROW><id>20543409</id><snippet>pandas.Series.map()</snippet></ROW><ROW><id>20543409</id><snippet>&gt;&gt;&gt; df2['A'].map(dict(zip([1, 2, 3, 4, 5], [1, 0.85, 0.70, 0.55, 0.40])))
0    1.00
1    0.85
2    0.70
3    0.55
4    0.40
Name: A, dtype: float64
</snippet></ROW><ROW><id>20543600</id><snippet>ast.literal_eval()</snippet></ROW><ROW><id>20543600</id><snippet>import ast

dataInput = [ast.literal_eval(line) for line in fobj.splitlines()]
</snippet></ROW><ROW><id>20543600</id><snippet>&gt;&gt;&gt; import ast
&gt;&gt;&gt; result = ast.literal_eval("['A', 'B', 'C', 'D', 'E']")
&gt;&gt;&gt; type(result)
&lt;class 'list'&gt;
&gt;&gt;&gt; result
['A', 'B', 'C', 'D', 'E']
</snippet></ROW><ROW><id>20543600</id><snippet>with open(selectedCase) as infh:
    dataInput = [ast.literal_eval(line) for line in infh]
</snippet></ROW><ROW><id>20543724</id><snippet>def __setitem__(self, k, v):
    if hasattr(k, 'lower'):
        k = k.lower()
    return super(MyDict, self).__setitem__(k, v)
</snippet></ROW><ROW><id>20543873</id><snippet>[k for k, v in D.items() if 1 &lt;= v &lt;= 100]
</snippet></ROW><ROW><id>20544434</id><snippet>/^[0-9 ]+$/
</snippet></ROW><ROW><id>20544434</id><snippet>/^ *[0-9][0-9 ]*$/
</snippet></ROW><ROW><id>20544539</id><snippet>class YourClass(object):
    def __init__(self, anint=0, adict=None, anotherdict=None, somelists=None):
        self.anint = anint
        self.adict = adict if adict is not None else {}
        self.anotherdict = anotherdict if anotherdict is not None else {}
        self.somelists = somelists if somelists is not None else []
</snippet></ROW><ROW><id>20544579</id><snippet>defaultdict</snippet></ROW><ROW><id>20544579</id><snippet>with</snippet></ROW><ROW><id>20544579</id><snippet>from collections import defaultdict
d = defaultdict(list)
with open("fruits.txt","r") as inFile:
    for line in inFile:
        k, v = line.rstrip().split()
        d[v].append(k)
</snippet></ROW><ROW><id>20544579</id><snippet>defaultdict</snippet></ROW><ROW><id>20544579</id><snippet>dict</snippet></ROW><ROW><id>20544579</id><snippet>d = {}
with open("fruits.txt","r") as inFile:
    for line in inFile:
        k, v = line.rstrip().split()
        d.setdefault(v, []).append(k)
</snippet></ROW><ROW><id>20544735</id><snippet>AppAuthHandler</snippet></ROW><ROW><id>20544735</id><snippet>&gt;&gt;&gt; auth = AppAuthHandler(TWITTER_CONSUMER_KEY, TWITTER_CONSUMER_SECRET)
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
    raise HTTPError(req.get_full_url(), code, msg, hdrs, fp)
urllib2.HTTPError: HTTP Error 403: Forbidden
</snippet></ROW><ROW><id>20544735</id><snippet>https</snippet></ROW><ROW><id>20544735</id><snippet>http</snippet></ROW><ROW><id>20544735</id><snippet>Content-Type</snippet></ROW><ROW><id>20544735</id><snippet>Authorization</snippet></ROW><ROW><id>20544735</id><snippet>Basic</snippet></ROW><ROW><id>20544735</id><snippet>class AppAuthHandler(tweepy.auth.AuthHandler):
    TOKEN_URL='https://api.twitter.com/oauth2/token'
    def __init__(self,consumer_key,consumer_secret):
        token_credential = '{}:{}'.format(*map(urllib.quote, [consumer_key, consumer_secret]))
        credential = base64.b64encode(token_credential)
        value = {'grant_type': 'client_credentials'}
        data = urllib.urlencode(value)
        req = urllib2.Request(self.TOKEN_URL)
        req.add_header('Authorization', 'Basic {}'.format(credential))
        req.add_header('Content-Type', 'application/x-www-form-urlencoded;charset=UTF-8')
        response=urllib2.urlopen(req, data)
        json_response=json.loads(response.read())
        self._access_token=json_response['access_token']
    def apply_auth(self,url,method,headers,parameters):
        headers['Authorization'] = 'Bearer {}'.format(self._access_token)
</snippet></ROW><ROW><id>20544735</id><snippet>&gt;&gt;&gt; AppAuthHandler(TWITTER_CONSUMER_KEY, TWITTER_CONSUMER_SECRET)
&lt;__main__.AppAuthHandler object at 0x11b7d10&gt;
</snippet></ROW><ROW><id>20544764</id><snippet>print sentence[i]</snippet></ROW><ROW><id>20544764</id><snippet>for line in file:</snippet></ROW><ROW><id>20544764</id><snippet>i</snippet></ROW><ROW><id>20544764</id><snippet>unigrams_nrc</snippet></ROW><ROW><id>20544764</id><snippet>file</snippet></ROW><ROW><id>20544764</id><snippet>seek</snippet></ROW><ROW><id>20544764</id><snippet>file = file.readlines()</snippet></ROW><ROW><id>20544764</id><snippet>file</snippet></ROW><ROW><id>20544831</id><snippet>&gt;&gt; before_dec, after_dec = str(d).split('.')
&gt;&gt; float('.'.join((before_dec, after_dec[0:2])))
0.98
</snippet></ROW><ROW><id>20545063</id><snippet>!!python/unicode</snippet></ROW><ROW><id>20545063</id><snippet>.safe_dump()</snippet></ROW><ROW><id>20545063</id><snippet>text()</snippet></ROW><ROW><id>20545063</id><snippet>productCategory</snippet></ROW><ROW><id>20545063</id><snippet>loader.add_xpath('productCategory',
    "//div[@class='line fk-lbreadbcrumb']//a/text()",
    Join(u", "), unicode.strip)
</snippet></ROW><ROW><id>20545095</id><snippet>property</snippet></ROW><ROW><id>20545095</id><snippet>def foo():
    def fget(self):
        return self._foo
    def fset(self, value):
        self._foo = value
    def fdel(self):
        del self._foo
    return locals()
foo = property(**foo())
</snippet></ROW><ROW><id>20545095</id><snippet>return locals()</snippet></ROW><ROW><id>20545394</id><snippet>def writetoafile(fname):
    with open(fname, 'w') as fp:
        fp.write('Hello\n')

def test_writetofile(tmpdir):
    file = tmpdir.join('output.txt')
    writetoafile(file.strpath)  # or use str(file)
    assert file.read() == 'Hello\n'
</snippet></ROW><ROW><id>20545736</id><snippet>&gt;&gt;&gt; x = np.array(xp+[1051])
</snippet></ROW><ROW><id>20545736</id><snippet>&gt;&gt;&gt; np.diff(x)
array([ 9, 10,  5, 26])
</snippet></ROW><ROW><id>20545736</id><snippet>&gt;&gt;&gt; np.repeat(yp, np.diff(x))
array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1,
       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
       1, 1, 1, 1])
</snippet></ROW><ROW><id>20545736</id><snippet>&gt;&gt;&gt; np.vstack([np.arange(x[0], x[-1]), np.repeat(yp, np.diff(x))]).T
array([[1001,    0],
       [1002,    0],
       [1003,    0],
         ...
       [1020,    1],
         ...
       [1050,    1]])
</snippet></ROW><ROW><id>20545829</id><snippet>nans_in_grid = np.isnan(grid)
nan_rows = np.all(nans_in_grid, axis=0)
nan_cols = np.all(nans_in_grid, axis=1)

indicies_to_remove = zip(np.nonzero(nan_rows)[0], np.nonzero(nan_cols)[0])
y_indice_to_remove, x_indice_to_remove = zip(*indicies_to_remove)

tmp = grid[[x for x in range(grid.shape[0]) if x not in x_indice_to_remove], :]
grid = tmp[:, [y for y in range(grid.shape[1]) if y not in y_indice_to_remove]]
</snippet></ROW><ROW><id>20545829</id><snippet>def pad_to_square(a, pad_value=np.nan):
    m = a.reshape((a.shape[0], -1))
    padded = pad_value * np.ones(2 * [max(m.shape)], dtype=m.dtype)
    padded[0:m.shape[0], 0:m.shape[1]] = m
    return padded

g = np.isnan(grid) 
grid = pad_to_square(grid[:, ~np.all(g, axis=0)][~np.all(g, axis=1)])
</snippet></ROW><ROW><id>20545829</id><snippet>shape = grid.shape[0]

first_col  = (i for i,col in enumerate(grid.T) if np.isfinite(col).any() == True).next()
last_col  = (shape-i-1 for i,col in enumerate(grid.T[::-1]) if np.isfinite(col).any() == True).next()
first_row = (i for i,row in enumerate(grid) if np.isfinite(row).any() == True).next()
last_row  = (shape-i-1 for i,row in enumerate(grid[::-1]) if np.isfinite(row).any() == True).next()

row_len = last_row - first_row
col_len = last_col - first_col
delta_len = row_len - col_len
if delta_len == 0:
    pass
elif delta_len &lt; 0:
    first_row = first_row - abs(delta_len)
    if first_row &lt; 0:
        delta_len = first_row
        first_row = 0
        last_row += abs(delta_len)
elif delta_len &gt; 0:
    first_col -= abs(delta_len)
    if first_col &lt; 0:
        delta_len = first_col
        first_col = 0
        last_col += abs(delta_len)

grid =  grid[first_row:last_row+1, first_col:last_col+1]
</snippet></ROW><ROW><id>20545831</id><snippet>__enter__</snippet></ROW><ROW><id>20545831</id><snippet>__exit__</snippet></ROW><ROW><id>20545831</id><snippet>class ForUseInWith(object):

    def test(self):
        print 'works!'

    def __enter__(self):
        return self

    def __exit__(self, *args, **kwargs):
        pass
</snippet></ROW><ROW><id>20545831</id><snippet>&gt;&gt;&gt; with ForUseInWith() as disposable:
    disposable.test()

works!
</snippet></ROW><ROW><id>20545831</id><snippet>__init__</snippet></ROW><ROW><id>20545831</id><snippet>open()</snippet></ROW><ROW><id>20545831</id><snippet>__exit__</snippet></ROW><ROW><id>20545871</id><snippet>if(i % 1 == 0): x+=10; y+=10
if(i % 2 == 0): x-=10; y-=10
</snippet></ROW><ROW><id>20545871</id><snippet>if(i % 2 == 1): x+=10; y+=10
if(i % 2 == 0): x-=10; y-=10
</snippet></ROW><ROW><id>20545956</id><snippet>obj</snippet></ROW><ROW><id>20545956</id><snippet>json</snippet></ROW><ROW><id>20545956</id><snippet>obj</snippet></ROW><ROW><id>20545956</id><snippet>obj = tags.copy()
</snippet></ROW><ROW><id>20545957</id><snippet>import itertools
# assuming that `bits` is your array of bits (0 or 1)
# ordered from LSB to MSB in consecutive bytes they represent
# e.g. bits = [0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1] will give you bytes = [128,255]
bytes = [sum([byte[b] &lt;&lt; b for b in range(0,8)])
            for byte in zip(*(iter(bits),) * 8)
        ]
# warning! if len(bits) % 8 != 0, then these last bits will be lost
</snippet></ROW><ROW><id>20546242</id><snippet>StringIO</snippet></ROW><ROW><id>20546242</id><snippet>&gt;&gt;&gt; df = pd.DataFrame({'a':range(3), 'b':list('abc')})
&gt;&gt;&gt; s = StringIO()
&gt;&gt;&gt; df.to_csv(s)
&gt;&gt;&gt; my_csv = s.getvalue()
&gt;&gt;&gt; my_csv
',a,b\n0,0,a\n1,1,b\n2,2,c\n'
</snippet></ROW><ROW><id>20546371</id><snippet>def create_log(cls, user_obj, old_obj, new_obj):
    """ Create a log about the changes of an object"""
</snippet></ROW><ROW><id>20546371</id><snippet>@classmethod
def create_log(cls, user_obj, old_obj, new_obj):
    """ Create a log about the changes of an object"""
</snippet></ROW><ROW><id>20546371</id><snippet>@staticmethod
def create_log(user_obj, old_obj, new_obj):
    """ Create a log about the changes of an object"""
</snippet></ROW><ROW><id>20546408</id><snippet>get_dummies()</snippet></ROW><ROW><id>20546408</id><snippet>pd.get_dummies(df.unstack().dropna()).groupby(level=1).sum()
</snippet></ROW><ROW><id>20546408</id><snippet>        a  b  c  d  e
0                    
11      1  1  1  0  0
666     1  0  0  1  1
10101   0  1  1  1  0
1010    1  1  1  1  0
414147  0  1  1  0  0
10101   1  1  0  1  0
1242    0  0  0  1  1
101     1  1  1  1  0
411     0  0  1  1  1
444     1  1  1  0  0
</snippet></ROW><ROW><id>20546408</id><snippet>df.unstack().dropna()</snippet></ROW><ROW><id>20546408</id><snippet>get_dummies</snippet></ROW><ROW><id>20546443</id><snippet> np.random.shuffle(np.transpose(r))
</snippet></ROW><ROW><id>20546731</id><snippet>socket.py</snippet></ROW><ROW><id>20546731</id><snippet>socket</snippet></ROW><ROW><id>20546731</id><snippet>socket.pyc</snippet></ROW><ROW><id>20546731</id><snippet>req = urllib2.Request("http://google.com/", headers = header)
#                                                           ^
</snippet></ROW><ROW><id>20546829</id><snippet>net._setParameters=(1.76464967 , 0.46764103 , 1.63394395 ,-0.95327762 , 1.19760151, -1.20449402, -1.34050959)
</snippet></ROW><ROW><id>20546829</id><snippet>_setParamethers</snippet></ROW><ROW><id>20546829</id><snippet>net._setParameters([1.76464967 , 0.46764103 , 1.63394395 ,-0.95327762 , 1.19760151, -1.20449402, -1.34050959])
</snippet></ROW><ROW><id>20546829</id><snippet>1/Q</snippet></ROW><ROW><id>20546829</id><snippet>&gt;&gt;&gt; def netp(Q): return float(net.activate([Q]))
&gt;&gt;&gt; for i in inp:
...   print '{}\t{:.5f}'.format(i, netp(i))
</snippet></ROW><ROW><id>20546829</id><snippet>1.0      0.97634
0.5      0.46546
0.33333  0.29013
0.25     0.20762
0.2      0.16058
0.16666  0.13042
0.14285  0.10952
0.125    0.09421
0.11111  0.08254
0.1      0.07335
</snippet></ROW><ROW><id>20546892</id><snippet>np.partition</snippet></ROW><ROW><id>20546892</id><snippet>def smallest_n(a, n):
    return np.sort(np.partition(a, n)[:n])

def argsmallest_n(a, n):
    ret = np.argpartition(a, n)[:n]
    b = np.take(a, ret)
    return np.take(ret, np.argsort(b))

dists = np.random.rand(1000*999//2) # a pdist array

In [3]: np.all(argsmallest_n(dists, 100) == np.argsort(dists)[:100])
Out[3]: True

In [4]: %timeit np.argsort(dists)[:100]
10 loops, best of 3: 73.5 ms per loop

In [5]: %timeit argsmallest_n(dists, 100)
100 loops, best of 3: 5.44 ms per loop
</snippet></ROW><ROW><id>20546892</id><snippet>closest = argsmallest_n(dists, 100)
tu = np.triu_indices(1000, 1)
pairs = np.column_stack((np.take(tu[0], closest),
                         np.take(tu[1], closest))) + 1
</snippet></ROW><ROW><id>20546935</id><snippet>Font.render</snippet></ROW><ROW><id>20546935</id><snippet>str</snippet></ROW><ROW><id>20546935</id><snippet>import pygame
import random

pygame.init()
black=(0,0,0)
screen = pygame.display.set_mode((800,600))
screen.fill((255,255,255))

#Dice random number generation
diceRoll = random.randrange(0, 5)

#Text through GUI
myFont = pygame.font.SysFont("Times New Roman", 18)

randNumLabel = myFont.render("You have rolled:", 1, black)
### pass a string to myFont.render
diceDisplay = myFont.render(str(diceRoll), 1, black)

screen.blit(randNumLabel, (520, 20))
screen.blit(diceDisplay, (520, 30))

### main loop
run = True
while run:
    for e in pygame.event.get():
        if e.type == pygame.QUIT:
            run = False
    pygame.display.flip()
</snippet></ROW><ROW><id>20547039</id><snippet>#!/usr/bin/perl

use strict;
use warnings;
use HTML::Entities;
use utf8;

my $str = 'ொடக்கத்தில் கடவுள';

print decode_entities($str);
</snippet></ROW><ROW><id>20547039</id><snippet>ொடக்கத்தில் கடவுள
</snippet></ROW><ROW><id>20547167</id><snippet>errno</snippet></ROW><ROW><id>20547167</id><snippet>&gt;&gt;&gt; OSError(2).errno
&gt;&gt;&gt; OSError(2, 'message').errno
2
&gt;&gt;&gt; OSError(2, 'message').strerror
'message'
</snippet></ROW><ROW><id>20547733</id><snippet>self.button</snippet></ROW><ROW><id>20547733</id><snippet>App</snippet></ROW><ROW><id>20547733</id><snippet>convert0</snippet></ROW><ROW><id>20547733</id><snippet>self</snippet></ROW><ROW><id>20547733</id><snippet>Tkinter.Button.config</snippet></ROW><ROW><id>20547733</id><snippet># Idle 07_02_LED ON using GUI
from time import sleep

from Tkinter import *

class App:

    def __init__(self, master): 
        frame = Frame(master)
        frame.pack()
        Label(frame, text='Turn LED ON').grid(row=0, column=0)

        Label(frame, text='Turn LED OFF').grid(row=1, column=0)

        ####################################################################
        self.button = Button(frame, text='LED 0 ON', command=self.convert0)
        self.button.grid(row=2, columnspan=2)
        ####################################################################


    def convert0(self, tog=[0]):

        tog[0] = not tog[0]
        if tog[0]:
        #########################################
            self.button.config(text='LED 0 OFF')
        #########################################

        else:
        #########################################
            self.button.config(text='LED 0 ON')
        #########################################

root = Tk()

root.wm_title('LED on &amp; off program')

app = App(root)

root.mainloop()
</snippet></ROW><ROW><id>20547932</id><snippet>[django: templates/**.*]
</snippet></ROW><ROW><id>20547932</id><snippet>[jinja2: templates/**.*]
</snippet></ROW><ROW><id>20548015</id><snippet>glib.idle_add (self.test_except)</snippet></ROW><ROW><id>20548272</id><snippet> string.ascii_lowercase 

 string.ascii_uppercase

 string.ascii_letters


import string  #you need to import string 
# you enter your choice of ascii char sets(above) for the arg 'alpha', by default though it's ascii_letters
def decrypt_print(alpha=string.ascii_letters):
    message = raw_input('Enter encrypted text: ')
    de = ""
    l = len(message) # the proper way to call len
    for i in range(26):
        new_alphabet = alpha[i:] + alpha[:i] #creates new alphabet for each shift
        for c in message:
            index = alpha.index(c)
            new_letter = new_alphabet[index]
            de += new_letter
        print de + ' shift:'+ str(i)
        de = ""
</snippet></ROW><ROW><id>20548272</id><snippet>decrypt_print(string.ascii_letters)

Enter encryped text: gdkkn
</snippet></ROW><ROW><id>20548272</id><snippet>gdkkn shift:0
**hello shift:1** # my bold
ifmmp shift:2
jgnnq shift:3
khoor shift:4
lipps shift:5
mjqqt shift:6
nkrru shift:7
olssv shift:8
pmttw shift:9
qnuux shift:10
rovvy shift:11
spwwz shift:12
tqxxA shift:13
uryyB shift:14
vszzC shift:15
wtAAD shift:16
xuBBE shift:17
yvCCF shift:18
zwDDG shift:19
AxEEH shift:20
ByFFI shift:21
CzGGJ shift:22
DAHHK shift:23
EBIIL shift:24
FCJJM shift:25
</snippet></ROW><ROW><id>20548338</id><snippet># Allocate empty array.
bigarray = numpy.empty([width, height, len(filenames)]);
# Load files.
for i in range(len(filenames)):
    bigarray[:,:,i] = numpy.load(filenames[i]);
</snippet></ROW><ROW><id>20548338</id><snippet>numpy.append</snippet></ROW><ROW><id>20548338</id><snippet># Load first array.
bigarray = numpy.load(filenames[0]);
# Add a new axis to make it 3D.
bigarray = bigarray[numpy.newaxis,...];
# Load rest of arrays.
for i in range(1,len(filenames)):
    bigarray = numpy.append(bigarray, numpy.load(filenames[i])[numpy.newaxis,...], axis=0);
</snippet></ROW><ROW><id>20548411</id><snippet>print('\n'.join('{}: {} ({})'.format(*k) for k in sorted(usinlist, key=lambda k: (k[2], k[0], k[1]))))
</snippet></ROW><ROW><id>20548479</id><snippet>include_scripts</snippet></ROW><ROW><id>20548479</id><snippet>include_styles</snippet></ROW><ROW><id>20548479</id><snippet>next</snippet></ROW><ROW><id>20548479</id><snippet>context.namespaces</snippet></ROW><ROW><id>20548479</id><snippet>import mako.runtime

# Scan for scripts and styles to include.
include_scripts = []
include_styles = []
# Start at the first descendant template.
ns = next
while isinstance(ns, mako.runtime.Namespace):
    if hasattr(ns.attr, 'include_scripts'):
        include_scripts.extend(ns.attr.include_scripts)
    if hasattr(ns.attr, 'include_styles'):
        include_styles.extend(ns.attr.include_styles)

    # NOTE: If the template namespace does not have *next* set, the build
    # in python function *next()* gets returned.
    ns = ns.context.get('next')
</snippet></ROW><ROW><id>20548967</id><snippet>import numpy as np
import pandas as pd
import matplotlib.pyplot as plt

def barchart(data, labels):
    pos = np.arange(len(data)) + 0.5  # the bar centers on the y axis
    plt.barh(pos, data.sort_index(), align='center', height=0.25)
    plt.yticks(pos, labels.sort_index())

data1 = pd.DataFrame({'key': list('ABCDE'), 'val': np.random.randn(5)})

new_keys = list('EDACB')
data1['ii'] = [new_keys.index(x) for x in data1.key]

data1 = data1.set_index('ii')
barchart(data1["val"], data1["key"])
plt.show()
</snippet></ROW><ROW><id>20548985</id><snippet>import random
import time
adding = input("Enter Name: ")
with open("settings.txt", "a+") as f:
    f.write('\n'.join(i for i in adding.split() if len(adding.split(" "))&gt;1 else adding))
    data = a.readlines()
for line in data:
    print (line)
time.sleep(10)
</snippet></ROW><ROW><id>20548985</id><snippet>&gt;&gt;&gt;Enter Name: Adam D Smith
Adam
D
Smith
</snippet></ROW><ROW><id>20549051</id><snippet>INSTALLED_APPS</snippet></ROW><ROW><id>20549051</id><snippet>settings.py</snippet></ROW><ROW><id>20549080</id><snippet>def excelcolumn(colnum):
    alpha, remainder = colnum // 26, colnum % 26
    out = "" if alpha == 0 else chr(alpha - 1 + ord('A'))
    out += chr(remainder + ord('A'))
    return out
</snippet></ROW><ROW><id>20549080</id><snippet>def excelcolumn(colnum):
    if colnum &lt; 26:
        return chr(colnum + ord('A'))
    return excelcolumn(colnum // 26 - 1) + chr(colnum % 26 + ord('A'))
</snippet></ROW><ROW><id>20549090</id><snippet>from multiprocessing import Pool
pool = Pool()
result1 = pool.apply_async(solve1, [A])    # evaluate "solve1(A)" asynchronously
result2 = pool.apply_async(solve2, [B])    # evaluate "solve2(B)" asynchronously
answer1 = result1.get(timeout=10)
answer2 = result2.get(timeout=10)
</snippet></ROW><ROW><id>20549090</id><snippet>processes</snippet></ROW><ROW><id>20549090</id><snippet>args = [A, B]
results = pool.map(solve1, args)
</snippet></ROW><ROW><id>20549213</id><snippet>subprocess</snippet></ROW><ROW><id>20549213</id><snippet>check_output</snippet></ROW><ROW><id>20549213</id><snippet>import subprocess
print sum(int(subprocess.check_output(["/bin/sh", "-c", "n=`expr {} + 1` &amp;&amp; echo $n".format(i)])) for i in range(10))
</snippet></ROW><ROW><id>20549213</id><snippet>55
</snippet></ROW><ROW><id>20549263</id><snippet>transform</snippet></ROW><ROW><id>20549263</id><snippet>&gt;&gt;&gt; df2 = pd.DataFrame({'VAR_1' : [1,2,3,4,5], 'GROUP': [1,1,1,2,2]})
&gt;&gt;&gt; df2["GROUP_MEAN"] = df2.groupby('GROUP')['VAR_1'].transform('mean')
&gt;&gt;&gt; df2
   GROUP  VAR_1  GROUP_MEAN
0      1      1         2.0
1      1      2         2.0
2      1      3         2.0
3      2      4         4.5
4      2      5         4.5

[5 rows x 3 columns]
</snippet></ROW><ROW><id>20549263</id><snippet>transform</snippet></ROW><ROW><id>20549462</id><snippet>token</snippet></ROW><ROW><id>20549462</id><snippet>token_code</snippet></ROW><ROW><id>20549462</id><snippet>list_display</snippet></ROW><ROW><id>20549462</id><snippet>list_select_related</snippet></ROW><ROW><id>20549462</id><snippet>'alert'</snippet></ROW><ROW><id>20549462</id><snippet>list_select_related</snippet></ROW><ROW><id>20549582</id><snippet>from itertools import count

for i in count():
    clock.tick(75)
    # do stuff
    if i%2:
        # do stuff at half speed
</snippet></ROW><ROW><id>20549739</id><snippet>head, sep, tail = line.strip().partition(" ")
</snippet></ROW><ROW><id>20549739</id><snippet>with open("Input.txt") as inFile:
    for line in inFile:
        print line.strip().partition(" ")[2]
</snippet></ROW><ROW><id>20549739</id><snippet>MG   -5.000000000000E-01 -5.000000000000E-01  0.000000000000E+00
S     1.558454815345E-01  1.558454815345E-01  2.500000000000E-01
O     2.189546044408E-01 -1.271822846411E-01  4.012978695812E-01
</snippet></ROW><ROW><id>20549869</id><snippet>Definition: figsize(sizex, sizey)
Docstring:
Set the default figure size to be [sizex, sizey].

This is just an easy to remember, convenience wrapper that sets::

  matplotlib.rcParams['figure.figsize'] = [sizex, sizey]
</snippet></ROW><ROW><id>20549869</id><snippet>figsize(10,5)
plot(range(10))
</snippet></ROW><ROW><id>20549924</id><snippet>import struct
chars = ser.readline()[:-1]
value = struct.unpack('&gt;h', chars)
</snippet></ROW><ROW><id>20549924</id><snippet>value = (ord(chars[0])&lt;&lt;8) + ord(chars[1])</snippet></ROW><ROW><id>20550309</id><snippet>format</snippet></ROW><ROW><id>20550309</id><snippet>%</snippet></ROW><ROW><id>20550329</id><snippet>def buildDTree(sofar, todo, sigma=None):
    if sigma is None:
        sigma = [[]]
    sal = []
    if not todo:
        return sigma, binaryTree(sofar)
    else:
        _, withelt = buildDTree(sofar + [todo[0]], todo[1:], sigma)
        _, withoutelt = buildDTree(sofar, todo[1:], sigma)
        here = binaryTree(sofar)
        here.setLeftBranch(withelt)
        here.setRightBranch(withoutelt)
        sal += here.getLeftBranch().getValue()
        sigma += [sal]
        return sigma, here

sigma, _ = buildDTree([], [1,2,3])
</snippet></ROW><ROW><id>20550329</id><snippet>sigma</snippet></ROW><ROW><id>20550329</id><snippet>class DTreeBuilder(object):
    def __init__(self):
        self.sigma = [[]]

    def buildDTree(self, sofar, todo):
        sal = []
        if len(todo) == 0:
            return binaryTree(sofar)
        else:
            withelt = buildDTree(sofar + [todo[0]], todo[1:])
            withoutelt = buildDTree(sofar, todo[1:])
            here = binaryTree(sofar)
            here.setLeftBranch(withelt)
            here.setRightBranch(withoutelt)
            sal += here.getLeftBranch().getValue()
            self.sigma += [sal]
            return here
</snippet></ROW><ROW><id>20550329</id><snippet>builder = DTreeBuilder()
builder.build([], [1,2,3])
print builder.sigma
</snippet></ROW><ROW><id>20550466</id><snippet>transformString()</snippet></ROW><ROW><id>20550466</id><snippet>parseString()</snippet></ROW><ROW><id>20550466</id><snippet>leaveWhitespace()</snippet></ROW><ROW><id>20550466</id><snippet>from pyparsing import *

strong  = QuotedString("**").leaveWhitespace()
text    = Word(printables).leaveWhitespace()
tokens  = strong | text
grammar = OneOrMore(tokens)

strong.setParseAction(lambda x:"&lt;strong&gt;%s&lt;/strong&gt;"%x[0])

A = "The **cat** in the **hat**."
print grammar.transformString(A)
</snippet></ROW><ROW><id>20550466</id><snippet>The &lt;strong&gt;cat&lt;/strong&gt; in the &lt;strong&gt;hat&lt;/strong&gt;.
</snippet></ROW><ROW><id>20550466</id><snippet>from pyparsing import *

strong  = QuotedString("**")

strong.setParseAction(lambda x:"&lt;strong&gt;%s&lt;/strong&gt;"%x[0])

A = "The **cat** in the **hat**."
print strong.transformString(A)
</snippet></ROW><ROW><id>20550469</id><snippet>adding = input("Enter Name: ")

with open("settings.txt", "a") as f:
    f.write(adding)

with open("settings.txt", "r") as fp:
    print(fp.readlines())
</snippet></ROW><ROW><id>20550852</id><snippet>import re
fixed = re.sub(r"(\[name:.*?)\n", r"\1,\t", originalString, re.M)
</snippet></ROW><ROW><id>20550852</id><snippet>from:   [name:  Illianney Amada,       id:     674176087]
from:   [name:  Natalia Morel-Gibbs,   id:     100003799207624]
from:   [name:  Jules Kaneyge Pand,    id:     100000110811550]
</snippet></ROW><ROW><id>20550852</id><snippet>\n</snippet></ROW><ROW><id>20550852</id><snippet>originalString = "from:\t[name:\tString\nid:\tSequenceofNumber]"
fixedString = ",\t".join(originalString.split("\n"))
</snippet></ROW><ROW><id>20550852</id><snippet>\n</snippet></ROW><ROW><id>20550852</id><snippet>,\t</snippet></ROW><ROW><id>20550852</id><snippet>from:\t[name:\tString,\tid:\tSequenceofNumber]
</snippet></ROW><ROW><id>20550945</id><snippet>@app.route('/hi', methods = ['GET','POST'])
def myIndex():
    return "Hello World!", 200
</snippet></ROW><ROW><id>20550945</id><snippet>WSGIScriptAlias /app /var/www/myDir/myApp/app.wsgi
</snippet></ROW><ROW><id>20550945</id><snippet>@app.route('/newapp/hi', methods = ['GET','POST'])
def myIndex():
    return "Hello World!", 200
</snippet></ROW><ROW><id>20550963</id><snippet>scrapy crawl &lt;spider_name&gt; -o csv
</snippet></ROW><ROW><id>20550963</id><snippet>if opts.output:
    ...
    valid_output_formats = self.settings['FEED_EXPORTERS'].keys() + 
                           self.settings['FEED_EXPORTERS_BASE'].keys()
    ....
    self.settings.overrides['FEED_FORMAT'] = opts.output_format
</snippet></ROW><ROW><id>20551035</id><snippet>sys.stderr</snippet></ROW><ROW><id>20551035</id><snippet>sys.stdout</snippet></ROW><ROW><id>20551035</id><snippet>import sys
sys.stderr = sys.stdout
</snippet></ROW><ROW><id>20551035</id><snippet>console</snippet></ROW><ROW><id>20551035</id><snippet>windows</snippet></ROW><ROW><id>20551035</id><snippet>setup.py</snippet></ROW><ROW><id>20551041</id><snippet>import pygame
from pygame.locals import * 

# Initialize the font system and create the font and font renderer
pygame.font.init()
default_font = pygame.font.get_default_font()
font_renderer = pygame.font.Font(default_font, size)

# To create a surface containing `Some Text`
label = font_renderer.render(
    "Some Text",   # The font to render
    1,             # With anti aliasing
    (255,255,255)) # RGB Color
</snippet></ROW><ROW><id>20551041</id><snippet># To apply this surface to another you can do the following
another_surface.blit(
    label,  # The text to render
    (0,0))  # Where on the destination surface to render said font
</snippet></ROW><ROW><id>20551041</id><snippet>import pygame
from pygame.locals import * 
screen_dimensions = width, height = 800, 600
screen = pygame.display.set_mode(screen_dimensions)
</snippet></ROW><ROW><id>20551041</id><snippet>       800    
    -----------
    -         -
600 -         -
    -         -
    -----------
</snippet></ROW><ROW><id>20551041</id><snippet>0,0</snippet></ROW><ROW><id>20551041</id><snippet>800,600</snippet></ROW><ROW><id>20551041</id><snippet># Using the label created above
screen.blit(label, (5, 5))
</snippet></ROW><ROW><id>20551041</id><snippet>pygame.mouse.get_pos()</snippet></ROW><ROW><id>20551138</id><snippet>Greenlet.exception</snippet></ROW><ROW><id>20551166</id><snippet>python setup.py register</snippet></ROW><ROW><id>20551270</id><snippet>from itertools import combinations
for item in combinations(list_1, 2):
    if any(i in item[1] for i in item[0]):
        print item
</snippet></ROW><ROW><id>20551270</id><snippet>([[1, 'a'], [2, 'b']], [[1, 'a'], [5, 'd']])
</snippet></ROW><ROW><id>20551346</id><snippet>&gt;&gt;&gt; class A:
        def __getitem__(self, index):
            if index &gt;= 10:
                raise IndexError
            return index * 111

&gt;&gt;&gt; list(A())
[0, 111, 222, 333, 444, 555, 666, 777, 888, 999]
</snippet></ROW><ROW><id>20551346</id><snippet>&gt;&gt;&gt; class B:
        def __iter__(self):
            yield 10
            yield 20
            yield 30


&gt;&gt;&gt; list(B())
[10, 20, 30]
</snippet></ROW><ROW><id>20551346</id><snippet>static PyObject *
iter_iternext(PyObject *iterator)
{
    seqiterobject *it;
    PyObject *seq;
    PyObject *result;

    assert(PySeqIter_Check(iterator));
    it = (seqiterobject *)iterator;
    seq = it-&gt;it_seq;
    if (seq == NULL)
        return NULL;

    result = PySequence_GetItem(seq, it-&gt;it_index);
    if (result != NULL) {
        it-&gt;it_index++;
        return result;
    }
    if (PyErr_ExceptionMatches(PyExc_IndexError) ||
        PyErr_ExceptionMatches(PyExc_StopIteration))
    {
        PyErr_Clear();
        Py_DECREF(seq);
        it-&gt;it_seq = NULL;
    }
    return NULL;
}
</snippet></ROW><ROW><id>20551346</id><snippet>int
PySequence_Check(PyObject *s)
{
    if (s == NULL)
        return 0;
    if (PyInstance_Check(s))
        return PyObject_HasAttrString(s, "__getitem__");
    if (PyDict_Check(s))
        return 0;
    return  s-&gt;ob_type-&gt;tp_as_sequence &amp;&amp;
        s-&gt;ob_type-&gt;tp_as_sequence-&gt;sq_item != NULL;
}
</snippet></ROW><ROW><id>20551351</id><snippet>str(totalCost)</snippet></ROW><ROW><id>20551351</id><snippet>print</snippet></ROW><ROW><id>20551351</id><snippet>print ("The total cost for the lawn is "+str(totalCost))
</snippet></ROW><ROW><id>20551351</id><snippet>print</snippet></ROW><ROW><id>20551351</id><snippet>None</snippet></ROW><ROW><id>20551351</id><snippet>None+str(totalCost)
</snippet></ROW><ROW><id>20551351</id><snippet>lawnCost = "£15.50"
lengthLawn = float(input("Lengh of lawn: "))
widthLawn = float(input("Width of lawn: "))

totalArea = lengthLawn * widthLawn

print("The total area of the lawn is {}m²".format(totalArea))

totalCost = totalArea * 15.50

print("The cost of lawn per m² is £15.50")
print("The total cost for the lawn is {}".format(totalCost))
</snippet></ROW><ROW><id>20551351</id><snippet>print</snippet></ROW><ROW><id>20551351</id><snippet>str</snippet></ROW><ROW><id>20551351</id><snippet>float</snippet></ROW><ROW><id>20551351</id><snippet>str.format</snippet></ROW><ROW><id>20551399</id><snippet>ktemp=kor</snippet></ROW><ROW><id>20551399</id><snippet>ktemp</snippet></ROW><ROW><id>20551399</id><snippet>kor</snippet></ROW><ROW><id>20551399</id><snippet>ktemp = kor[:]</snippet></ROW><ROW><id>20551399</id><snippet>kor</snippet></ROW><ROW><id>20551495</id><snippet>from django.db.models import Count
Games.objects.filter(owned=0).annotate(vote=Count('votes')).order_by('-vote')
</snippet></ROW><ROW><id>20551581</id><snippet>itertools</snippet></ROW><ROW><id>20551581</id><snippet>def combs(elt2color, combination_size=4, max_colors=3):

    def inner(needed, index):
        if needed == 0:
            yield result
            return
        if n - index &lt; needed:
            # not enough elements remain to reach
            # combination_size
            return
        # first all results that don't contain elts[index]
        for _ in inner(needed, index + 1):
            yield result
        # and then all results that do contain elts[index]
        needed -= 1
        elt = elts[index]
        color = elt2color[elt]
        color_added = color not in colors_seen
        colors_seen.add(color)
        if len(colors_seen) &lt;= max_colors:
            result[needed] = elt
            for _ in inner(needed, index + 1):
                yield result
        if color_added:
            colors_seen.remove(color)

    elts = tuple(elt2color)
    n = len(elts)
    colors_seen = set()
    result = [None] * combination_size
    for _ in inner(combination_size, 0):
        yield tuple(result)
</snippet></ROW><ROW><id>20551581</id><snippet>elt2color = dict([('A', 'red'), ('B', 'red'), ('C', 'blue'),
                  ('D', 'blue'), ('E', 'green'), ('F', 'green'),
                  ('G', 'green'), ('H', 'yellow'), ('I', 'white'),
                  ('J', 'white'), ('K', 'black')])
for c in combs(elt2color):
    for element in c:
        print("%s-%s" % (element, elements[element]))
    print "\n"
</snippet></ROW><ROW><id>20551581</id><snippet>max_colors</snippet></ROW><ROW><id>20551581</id><snippet>itertools</snippet></ROW><ROW><id>20551581</id><snippet>itertools</snippet></ROW><ROW><id>20551581</id><snippet>def combs2(elt2color, combination_size=4, max_colors=3):
    from collections import defaultdict
    from itertools import combinations
    color2elts = defaultdict(list)
    for elt, color in elt2color.items():
        color2elts[color].append(elt)

    def at_least_one_from_each(iterables, n):
        if n &lt; len(iterables):
            return # impossible
        if not n or not iterables:
            if not n and not iterables:
                yield ()
            return
        # Must have n - num_from_first &gt;= len(iterables) - 1,
        # so num_from_first &lt;= n - len(iterables) + 1
        for num_from_first in range(1, min(len(iterables[0]) + 1,
                                           n - len(iterables) + 2)):
            for from_first in combinations(iterables[0],
                                           num_from_first):
                for rest in at_least_one_from_each(iterables[1:],
                                             n - num_from_first):
                    yield from_first + rest

    for numcolors in range(1, max_colors + 1):
        for colors in combinations(color2elts, numcolors):
            # Now this gets tricky.  We need to pick
            # combination_size elements across all the colors, but
            # must pick at least one from each color.
            for elements in at_least_one_from_each(
                    [color2elts[color] for color in colors],
                    combination_size):
                yield elements
</snippet></ROW><ROW><id>20551581</id><snippet>result</snippet></ROW><ROW><id>20551581</id><snippet>from_first</snippet></ROW><ROW><id>20551581</id><snippet>rest</snippet></ROW><ROW><id>20551581</id><snippet>itertools</snippet></ROW><ROW><id>20551581</id><snippet>from_first</snippet></ROW><ROW><id>20551581</id><snippet>itertools</snippet></ROW><ROW><id>20551581</id><snippet>itertools</snippet></ROW><ROW><id>20551581</id><snippet>itertools</snippet></ROW><ROW><id>20551581</id><snippet>O(1)</snippet></ROW><ROW><id>20551581</id><snippet>itertools</snippet></ROW><ROW><id>20551581</id><snippet>iterable</snippet></ROW><ROW><id>20551581</id><snippet>elt2ec</snippet></ROW><ROW><id>20551581</id><snippet>def combs3(iterable, elt2ec, k, maxec):
    # Generate all k-combinations from `iterable` spanning no
    # more than `maxec` equivalence classes.
    elts = tuple(iterable)
    n = len(elts)
    ec = [None] * n  # ec[i] is equiv class ordinal of elts[i]
    ec2j = {} # map equiv class to its ordinal
    for i, elt in enumerate(elts):
        thisec = elt2ec[elt]
        j = ec2j.get(thisec)
        if j is None:
            j = len(ec2j)
            ec2j[thisec] = j
        ec[i] = j
    countec = [0] * len(ec2j)
    del ec2j

    def inner(i, j, totalec):
        if i == k:
            yield result
            return
        for j in range(j, jbound[i]):
            thisec = ec[j]
            thiscount = countec[thisec]
            newtotalec = totalec + (thiscount == 0)
            if newtotalec &lt;= maxec:
                countec[thisec] = thiscount + 1
                result[i] = j
                yield from inner(i+1, j+1, newtotalec)
                countec[thisec] = thiscount

    jbound = list(range(n-k+1, n+1))
    result = [None] * k
    for _ in inner(0, 0, 0):
         yield (elts[i] for i in result)
</snippet></ROW><ROW><id>20551581</id><snippet>inner()</snippet></ROW><ROW><id>20551581</id><snippet>combs3()</snippet></ROW><ROW><id>20551581</id><snippet>combs()</snippet></ROW><ROW><id>20551581</id><snippet>combs2()</snippet></ROW><ROW><id>20551581</id><snippet>constrained_combinations()</snippet></ROW><ROW><id>20551581</id><snippet>combs3()</snippet></ROW><ROW><id>20551581</id><snippet>combs2()</snippet></ROW><ROW><id>20551581</id><snippet>constrained_combinations()</snippet></ROW><ROW><id>20551581</id><snippet>itertools.combinations()</snippet></ROW><ROW><id>20551581</id><snippet>combs3()</snippet></ROW><ROW><id>20551581</id><snippet>allowed_combinations()</snippet></ROW><ROW><id>20551581</id><snippet>max_colors</snippet></ROW><ROW><id>20551581</id><snippet>allowed_combinations()</snippet></ROW><ROW><id>20551641</id><snippet>base64</snippet></ROW><ROW><id>20551641</id><snippet>base64</snippet></ROW><ROW><id>20551641</id><snippet>get_body_encoded</snippet></ROW><ROW><id>20551641</id><snippet>print message.get_body_encoded()
</snippet></ROW><ROW><id>20551641</id><snippet>from boto.sqs.message import RawMessage
q.set_message_class(RawMessage)
</snippet></ROW><ROW><id>20551641</id><snippet>&gt;&gt;&gt; print 'hello this is a test'.decode('base64')
??e??b?+??-
</snippet></ROW><ROW><id>20551766</id><snippet>L1_total = L2 - t - ri
</snippet></ROW><ROW><id>20551884</id><snippet>ValueError: No JSON object could be decoded</snippet></ROW><ROW><id>20551884</id><snippet>geometry_string = db.session.scalar(pg_functions.geojson(getattr(feature, field.name)))</snippet></ROW><ROW><id>20551884</id><snippet>geometry_string = db.session.scalar(pg_functions.geojson(getattr(feature, field.name))) or '{}'</snippet></ROW><ROW><id>20551884</id><snippet>json.loads()</snippet></ROW><ROW><id>20551884</id><snippet>{}</snippet></ROW><ROW><id>20551973</id><snippet>fileID = fs.put( open( r'owl.jpg', 'r')  )
</snippet></ROW><ROW><id>20551973</id><snippet>fileID = fs.put( open( r'owl.jpg', 'rb')  )
</snippet></ROW><ROW><id>20551981</id><snippet>ax = plt.subplot( 111 ) 
wedges, texts = ax.pie( np.abs( np.random.randn(5  ) ))

for w in wedges:
    w.set_linewidth( 2 )
    w.set_edgecolor( 'cyan' )
</snippet></ROW><ROW><id>20551988</id><snippet>a = 1
while (a == 1): #always enters
        if (player not in(r,p,s)): #if it is r or p or s it skips this
                player = input ("That wasn't r, p, or s. Please try again. r is Rock, p is Paper, and s is Scissors. Put your letter in HERE-----&gt; ")
                if (player in (r,p,s)):
                        a = 2
        #and loops back, a being still 1
</snippet></ROW><ROW><id>20551988</id><snippet>player = None
while player not in (r, p, s):
    player = input ("That wasn't r, p, or s. Please try again. r is Rock, p is Paper, and s is Scissors. Put your letter in HERE-----&gt; ")
</snippet></ROW><ROW><id>20552074</id><snippet>A = input('Enter 0 or 1 for 1st input: ')
if A not in (0, 1): raise Exception ('Your error message')
</snippet></ROW><ROW><id>20552074</id><snippet>A = 42
while A not in (0, 1): 
    A = input('Enter 0 or 1 for 1st input: ')
</snippet></ROW><ROW><id>20552164</id><snippet>__init__</snippet></ROW><ROW><id>20552207</id><snippet>test.File.put( open( r'c:\temp\owl.jpg', 'r') )
</snippet></ROW><ROW><id>20552207</id><snippet>test.File.put( open( r'c:\temp\owl.jpg', 'rb') )
</snippet></ROW><ROW><id>20552216</id><snippet>/contrib/admin/templates/admin/</snippet></ROW><ROW><id>20552216</id><snippet>project
--templates
----admin
------base.html
</snippet></ROW><ROW><id>20552554</id><snippet>sys.path</snippet></ROW><ROW><id>20552554</id><snippet>ui/__init__.py</snippet></ROW><ROW><id>20552554</id><snippet>web/__init__.py</snippet></ROW><ROW><id>20552554</id><snippet>app.py</snippet></ROW><ROW><id>20552554</id><snippet>app.py</snippet></ROW><ROW><id>20552554</id><snippet>-m app</snippet></ROW><ROW><id>20552554</id><snippet>app.py</snippet></ROW><ROW><id>20552554</id><snippet>import app</snippet></ROW><ROW><id>20552554</id><snippet>window.py</snippet></ROW><ROW><id>20552554</id><snippet>window.py</snippet></ROW><ROW><id>20552554</id><snippet>-m ui.window</snippet></ROW><ROW><id>20552554</id><snippet>window.py</snippet></ROW><ROW><id>20552554</id><snippet>import ui.window</snippet></ROW><ROW><id>20552554</id><snippet>connection.py</snippet></ROW><ROW><id>20552554</id><snippet>connection.py</snippet></ROW><ROW><id>20552554</id><snippet>-m web.connection</snippet></ROW><ROW><id>20552554</id><snippet>connection.py</snippet></ROW><ROW><id>20552554</id><snippet>import web.connection</snippet></ROW><ROW><id>20552554</id><snippet>app.py</snippet></ROW><ROW><id>20552554</id><snippet>constants.py</snippet></ROW><ROW><id>20552554</id><snippet>ui</snippet></ROW><ROW><id>20552554</id><snippet>web</snippet></ROW><ROW><id>20552554</id><snippet>sys.path</snippet></ROW><ROW><id>20552554</id><snippet>site-packages</snippet></ROW><ROW><id>20552554</id><snippet>sys.path</snippet></ROW><ROW><id>20552554</id><snippet>pip</snippet></ROW><ROW><id>20552554</id><snippet>ipython</snippet></ROW><ROW><id>20552554</id><snippet>$PATH</snippet></ROW><ROW><id>20552554</id><snippet>myapp</snippet></ROW><ROW><id>20552554</id><snippet>__init__.py</snippet></ROW><ROW><id>20552554</id><snippet>myapp.</snippet></ROW><ROW><id>20552554</id><snippet>import</snippet></ROW><ROW><id>20552554</id><snippet>-m</snippet></ROW><ROW><id>20552554</id><snippet>app.py</snippet></ROW><ROW><id>20552706</id><snippet>ceil</snippet></ROW><ROW><id>20552706</id><snippet>ceil</snippet></ROW><ROW><id>20552706</id><snippet>ceil</snippet></ROW><ROW><id>20552706</id><snippet>ceil(1.000000000000000000000000000000001)</snippet></ROW><ROW><id>20552706</id><snippet>1.000000000000000000000000000000001</snippet></ROW><ROW><id>20552706</id><snippet>ceil</snippet></ROW><ROW><id>20552706</id><snippet>double</snippet></ROW><ROW><id>20552706</id><snippet>float</snippet></ROW><ROW><id>20552706</id><snippet>ceil</snippet></ROW><ROW><id>20552706</id><snippet>double</snippet></ROW><ROW><id>20552706</id><snippet>ceil</snippet></ROW><ROW><id>20552706</id><snippet>int</snippet></ROW><ROW><id>20552706</id><snippet>int</snippet></ROW><ROW><id>20552769</id><snippet>import numpy as np
import sk_calc

class MyDia(QtGui.QDialog, Dlg):
    def __init__(self):
        QtGui.QDialog.__init__(self)
        self.setupUi(self)
        self.buttonOPLOT.clicked.connect(self.onPLOT)
        self.buttonPRED.clicked.connect(self.onPRED)

    def onPRED(self):
        if self.button_1.isChecked():
            a = 1
        elif self.button_2.isChecked():
            a = 2
        else:
            a = 0
        query = np.zeros((1,18))
        # ... etc

        # when user has made his choices the data goes do this

        # create an instance of the Calc class, passing in
        # parameters from the gui
        calc = sk_calc.Calc(a)

        # call methods of the instance, passing in parameters
        # from the gui, and receiving returned values
        prediction = calc.pred(query)

        # calc.plot() ... etc
</snippet></ROW><ROW><id>20552769</id><snippet>import numpy as np
from sklearn.svm import SVR
# import other stuff from scikitlearn

DEFAULT_CSVPATH = 'path/to/some/file.csv'

class Calc(object):
    def __init__(self, a, csvpath=None):
        if csvpath is None:
            csvpath = DEFAULT_CSVPATH
        # reading in a csv file with my data
        self.data = np.genfromtxt(
            csvpath , delimiter=';', dtype=float,
            skip_header=2, usecols=range(0,22))

        self.features = data[:,4:22] # the "X" of my DATA
        self.targets = data[:,1]     # the "Y" of my DATA

        # Regression using the DATA, a comes from user click
        self.svr_rbf = SVR(kernel='rbf', C=2e4, gamma=a)

        # method of scikit-learn
        self.svr_rbf.fit(features, targets).predict(features)

    def pred(self, query):
        # query is defined by the user in the gui typing in some values
        prediction = self.svr_rbf.predict(query)
        return prediction

    def plot(self):
        # ... use pylab with DATA features and targets
        # self.data ...
        # self.features ...
</snippet></ROW><ROW><id>20552773</id><snippet>%s</snippet></ROW><ROW><id>20552773</id><snippet>cursor.executemany("Update MyDB Set timetaken = %s Where id = %s and source = %s", time)
</snippet></ROW><ROW><id>20552773</id><snippet>rows = []
for f, v in mydict.iteritems():
    id, source = f.split('#')
    rows.append((int(v), one, two))
</snippet></ROW><ROW><id>20552773</id><snippet>rows = [[int(v)] + f.split('#') for f, v in mydict.iteritems()]
</snippet></ROW><ROW><id>20552868</id><snippet>Button</snippet></ROW><ROW><id>20552868</id><snippet>Button.Button</snippet></ROW><ROW><id>20552868</id><snippet>import button
class KeyboardKey(button.Button):
    def __init__(self, name, x, y):
        super(self.__class__, self).__init__(name, x, y)
</snippet></ROW><ROW><id>20552868</id><snippet>types.ModuleType</snippet></ROW><ROW><id>20552868</id><snippet>__init__</snippet></ROW><ROW><id>20552868</id><snippet>&gt;&gt;&gt; import base64
&gt;&gt;&gt; base64.__init__
&lt;method-wrapper '__init__' of module object at 0x00AB5630&gt;
</snippet></ROW><ROW><id>20552868</id><snippet>&gt;&gt;&gt; base64.__init__('modname', 'docs here')
&gt;&gt;&gt; base64.__doc__
'docs here'
&gt;&gt;&gt; base64.__name__
'modname'
</snippet></ROW><ROW><id>20552937</id><snippet>if</snippet></ROW><ROW><id>20552937</id><snippet>Foo</snippet></ROW><ROW><id>20552937</id><snippet>OsSpecificClass = MacClass if os.name == 'posix' else WinClass
</snippet></ROW><ROW><id>20552937</id><snippet>OsSpecificClass</snippet></ROW><ROW><id>20552951</id><snippet>&gt;&gt;&gt; print {'c1': 0.5, 'gamma': 1, 'lambda': 1, 'A': 1}
{'A': 1, 'c1': 0.5, 'gamma': 1, 'lambda': 1}
</snippet></ROW><ROW><id>20552951</id><snippet>OrderedDict</snippet></ROW><ROW><id>20552951</id><snippet>dict</snippet></ROW><ROW><id>20552951</id><snippet>OrderedDict</snippet></ROW><ROW><id>20552951</id><snippet>&gt;&gt;&gt; from collections import OrderedDict
&gt;&gt;&gt; print OrderedDict({'c1': 0.5, 'gamma': 1, 'lambda': 1, 'A': 1})
OrderedDict([('A', 1), ('c1', 0.5), ('gamma', 1), ('lambda', 1)])
</snippet></ROW><ROW><id>20552951</id><snippet>repr</snippet></ROW><ROW><id>20552951</id><snippet>OrderedDict</snippet></ROW><ROW><id>20552951</id><snippet>OrderedDict</snippet></ROW><ROW><id>20552951</id><snippet>&gt;&gt;&gt; print OrderedDict([('c1', 0.5), ('gamma', 1), ('lambda', 1), ('A', 1)])
OrderedDict([('c1', 0.5), ('gamma', 1), ('lambda', 1), ('A', 1)])
</snippet></ROW><ROW><id>20552951</id><snippet>OrderedDict</snippet></ROW><ROW><id>20552951</id><snippet>OrderedDict</snippet></ROW><ROW><id>20552951</id><snippet>dict</snippet></ROW><ROW><id>20552951</id><snippet>super</snippet></ROW><ROW><id>20552951</id><snippet>class AutoVivifiedOrderedDict(OrderedDict, AutoVivification): pass</snippet></ROW><ROW><id>20552951</id><snippet>defaultdict</snippet></ROW><ROW><id>20552951</id><snippet>def AutoVivification():
    return defaultdict(AutoVivification)
</snippet></ROW><ROW><id>20552951</id><snippet>OrderedDefaultDict</snippet></ROW><ROW><id>20552951</id><snippet>def OrderedAutoVivification():
    return OrderedDefaultDict(AutoVivification)
</snippet></ROW><ROW><id>20552951</id><snippet>OrderedDefaultDict</snippet></ROW><ROW><id>20552951</id><snippet>__init__</snippet></ROW><ROW><id>20553565</id><snippet>Canvas</snippet></ROW><ROW><id>20553565</id><snippet>create_line</snippet></ROW><ROW><id>20553565</id><snippet>import Tkinter as tk

class Example(tk.Frame):
    def __init__(self, root):
        tk.Frame.__init__(self, root)
        self.canvas = tk.Canvas(width=300, height=150,borderwidth=1)
        self.canvas.pack(side="top", fill="both", expand=True)
        points = (20,20,20,100,70,100)
        self.canvas.create_line(points, fill="red")

if __name__ == "__main__":
    root = tk.Tk()
    Example(root).pack(fill="both", expand=True)
    root.mainloop()
</snippet></ROW><ROW><id>20553655</id><snippet>if</snippet></ROW><ROW><id>20553655</id><snippet>elif</snippet></ROW><ROW><id>20553655</id><snippet>setText</snippet></ROW><ROW><id>20553655</id><snippet>setChecked</snippet></ROW><ROW><id>20553655</id><snippet>knownFolders = {
    "Desktop": (self.folderheader1, self.folderactive),
    "Documents": (self.folderheader2, self.folderactive_2),
    ...
}
</snippet></ROW><ROW><id>20553655</id><snippet>if</snippet></ROW><ROW><id>20553655</id><snippet>elif</snippet></ROW><ROW><id>20553655</id><snippet>if neededname in knownFolders:
    header, checkBox = knownFolders[neededname]
    header.setText(_translate("MainWindow", "Status: Active", None))
    checkBox.setChecked(True)
</snippet></ROW><ROW><id>20553655</id><snippet>relevantFolders = [folders.getObject(neededdirs, d, 'name')
                   for d in neededdirs
                   if folders.getObject(neededdirs, d, 'bool')]
</snippet></ROW><ROW><id>20553662</id><snippet>http://localhost/titles
</snippet></ROW><ROW><id>20553662</id><snippet>http://localhost/titles.html
</snippet></ROW><ROW><id>20553662</id><snippet>@cherrypy.expose
def titles_html(self):
    today = date.today()
    tmpl = env.get_template('titles.html')
    return tmpl.render(launch1=(date(2014,2,18)-today).days)
</snippet></ROW><ROW><id>20553731</id><snippet>django-admin.py startproject Nutana
</snippet></ROW><ROW><id>20553731</id><snippet>C:\Python27\Scripts</snippet></ROW><ROW><id>20553760</id><snippet>src=</snippet></ROW><ROW><id>20553760</id><snippet>&gt;&gt;&gt; import base64
&gt;&gt;&gt; png_data = "iVBORw0KGgoAAAANSUhEUgAAAAUAAAAFCAYAAACNbyblAAAAHElEQVQI12P4//8/w38GIAXDIBKE0DHxgljNBAAO9TXL0Y4OHwAAAABJRU5ErkJggg=="
&gt;&gt;&gt; with open('/tmp/red.png', 'w') as fp:
...     fp.write(base64.b64decode())
...
</snippet></ROW><ROW><id>20553824</id><snippet>"topdirectory/sub1/subsub1/subsubsub1/target".rsplit('/',2)[-2:]
</snippet></ROW><ROW><id>20553824</id><snippet>os</snippet></ROW><ROW><id>20553870</id><snippet>col = gtk.TreeViewColumn( "Command")
self.treeview.append_column( col)
cell = gtk.CellRendererSpin()
col.pack_start( cell, expand=False)
col.set_attributes( cell, text=2)
</snippet></ROW><ROW><id>20553926</id><snippet>User</snippet></ROW><ROW><id>20553926</id><snippet>Bottle</snippet></ROW><ROW><id>20553926</id><snippet>UserViewSet</snippet></ROW><ROW><id>20553926</id><snippet>UserSerializer</snippet></ROW><ROW><id>20553965</id><snippet>Editor -&gt; Smart Keys -&gt; Use "CamelHumps" words</snippet></ROW><ROW><id>20553965</id><snippet>Alt + ←/→</snippet></ROW><ROW><id>20554039</id><snippet>r'^admin/', include(admin.site.urls)
</snippet></ROW><ROW><id>20554039</id><snippet>r'^glossary$', include('glossary.urls')
</snippet></ROW><ROW><id>20554039</id><snippet>r'^glossary/', include('glossary.urls')
</snippet></ROW><ROW><id>20554039</id><snippet>$('a').on('click', function(e) {
        e.preventDefault(); 
        var body = $('body'),
              div = $('&lt;div&gt;&lt;/div&gt;')
              link = $(this).attr('href');
        data = $.load(link);
        div.html(data);
        div.appendTo(body)
    });
</snippet></ROW><ROW><id>20554410</id><snippet>nCost = '%.2f'%(nCost*1.25)
</snippet></ROW><ROW><id>20554410</id><snippet>    nCost = nCost * 1.25
</snippet></ROW><ROW><id>20554410</id><snippet>round</snippet></ROW><ROW><id>20554410</id><snippet>nCost = round(nCost*1.25, 2)
</snippet></ROW><ROW><id>20554410</id><snippet>&gt;&gt;&gt; nCost = 1.33333
&gt;&gt;&gt; nCost = round(nCost*1.25, 2)
&gt;&gt;&gt; nCost
1.33
&gt;&gt;&gt; nCost = nCost * 1.25
&gt;&gt;&gt; nCost
1.6625
</snippet></ROW><ROW><id>20554410</id><snippet>%.2f</snippet></ROW><ROW><id>20554410</id><snippet>{:.2f}</snippet></ROW><ROW><id>20554410</id><snippet>round(13.4999, 2)</snippet></ROW><ROW><id>20554410</id><snippet>13.949999999999999289457264</snippet></ROW><ROW><id>20554410</id><snippet>repr</snippet></ROW><ROW><id>20554410</id><snippet>str</snippet></ROW><ROW><id>20554410</id><snippet>%f</snippet></ROW><ROW><id>20554410</id><snippet>13.95</snippet></ROW><ROW><id>20554410</id><snippet>Decimal</snippet></ROW><ROW><id>20554410</id><snippet>float</snippet></ROW><ROW><id>20554489</id><snippet>os.chmod()</snippet></ROW><ROW><id>20554489</id><snippet>for file in files:
    filename = os.path.splitext(file)[0]
    print filename
    shutil.move(filename, result_dir)
</snippet></ROW><ROW><id>20554518</id><snippet>&gt;&gt;&gt; itemlist[0].childNodes[0].nodeValue
u'A61K9/00'
</snippet></ROW><ROW><id>20554553</id><snippet>import random
def main():
    capitals={"Washington":"Olympia","Oregon":"Salem",\
                    "California":"Sacramento","Ohio":"Columbus",\
                    "Nebraska":"Lincoln","Colorado":"Denver",\
                    "Michigan":"Lansing","Massachusetts":"Boston",\
                    "Florida":"Tallahassee","Texas":"Austin",\
                    "Oklahoma":"Oklahoma City","Hawaii":"Honolulu",\
                    "Alaska":"Juneau","Utah":"Salt Lake City",\
                    "New Mexico":"Santa Fe","North Dakota":"Bismarck",\
                    "South Dakota":"Pierre","West Virginia":"Charleston",\
                    "Virginia":"Richmond","New Jersey":"Trenton",\
                    "Minnesota":"Saint Paul","Illinois":"Springfield",\
                    "Indiana":"Indianapolis","Kentucky":"Frankfort",\
                    "Tennessee":"Nashville","Georgia":"Atlanta",\
                    "Alabama":"Montgomery","Mississippi":"Jackson",\
                    "North Carolina":"Raleigh","South Carolina":"Columbia",\
                    "Maine":"Augusta","Vermont":"Montpelier",\
                    "New Hampshire":"Concord","Connecticut":"Hartford",\
                    "Rhode Island":"Providence","Wyoming":"Cheyenne",\
                    "Montana":"Helena","Kansas":"Topeka",\
                    "Iowa":"Des Moines","Pennsylvania":"Harrisburg",\
                    "Maryland":"Annapolis","Missouri":"Jefferson City",\
                    "Arizona":"Phoenix","Nevada":"Carson City",\
                    "New York":"Albany","Wisconsin":"Madison",\
                    "Delaware":"Dover","Idaho":"Boise",\
                    "Arkansas":"Little Rock","Louisiana":"Baton Rouge"}

    wrong=[]

    print ("STATE TEST \n")

    incorrect_answers = False

    while len(capitals)&gt;0:
        pick=random.choice(list(capitals.keys()))
        correct_answer=capitals.get(pick)
        print ("What is the capital city of",pick,"?")
        answer=raw_input("Your answer: ")
        if answer.lower()==correct_answer.lower():
            print ("That's Correct!\n")
        else:
            print ("That's Incorrect.")
            print ("The correct answer is",correct_answer)
            wrong.append(pick)
            incorrect_answers = True
    del capitals[pick]

    print ("You missed",len(wrong),"states.\n")


    if incorrect_answers:
        print ("Here are the ones that you may want to brush up on:\n")
        for each in wrong:
            print (each)
    else:
        print ("Perfect!")
main()
</snippet></ROW><ROW><id>20554793</id><snippet>'\xe6\xad\xa9'</snippet></ROW><ROW><id>20554793</id><snippet>æ­©</snippet></ROW><ROW><id>20554793</id><snippet>\xE3</snippet></ROW><ROW><id>20554793</id><snippet>\xED</snippet></ROW><ROW><id>20554793</id><snippet>Â</snippet></ROW><ROW><id>20554860</id><snippet>best_guess.values()</snippet></ROW><ROW><id>20554860</id><snippet>value in line['full name']</snippet></ROW><ROW><id>20554860</id><snippet>all</snippet></ROW><ROW><id>20554860</id><snippet>line</snippet></ROW><ROW><id>20554860</id><snippet>def NameExists(best_guess, line):
    vals = set(best_guess.values())
    return bool(set(line.values()).intersection(vals))
</snippet></ROW><ROW><id>20554917</id><snippet>._state.db</snippet></ROW><ROW><id>20554917</id><snippet>settings.DATABASES['default']</snippet></ROW><ROW><id>20554917</id><snippet>._state.db</snippet></ROW><ROW><id>20554917</id><snippet>None</snippet></ROW><ROW><id>20554917</id><snippet>db_name = 'default'
if instance._state.db is not None:
    db_name = instance._state.db
db_backend = settings.DATABASES[db_name]['ENGINE'].split('.')[-1]
MYSQL = db_backend == 'mysql'
</snippet></ROW><ROW><id>20555186</id><snippet>GATED_CONTENT = (
    '/some_content_dir/', # This is a directory we want to gate
    '.pdf', # maybe we want to gate an entire content type
)

MIDDLEWARE_CLASSES = (
    ...  # Out of the box middleware...blah blah
    'yourapp.somemodule.sessionmiddleware.GatedContent',
)
</snippet></ROW><ROW><id>20555186</id><snippet>yourapp
   |-somemodule
        |-sessionmiddleware.py
</snippet></ROW><ROW><id>20555186</id><snippet>class GatedContent(object):
"""
Prevents specific content directories and types 
from being exposed to non-authenticated users
"""

def process_request(self, request):
   path = request.path
   user = request.user # out of the box auth, YMMV

   is_gated = False
   for gated in settings.GATED_CONTENT:
      if path.startswith(gated) or path.endswith(gated):
          is_gated = True
          break
  # Validate the user is an authenticated/valid user
  if is_gated and not user.is_authenticated():
      # Handle redirect
</snippet></ROW><ROW><id>20555420</id><snippet>sys.modules</snippet></ROW><ROW><id>20555420</id><snippet>__name__</snippet></ROW><ROW><id>20555420</id><snippet>module_object = import_py_file(import_name)
module_object.__name__ = import_name
sys.modules[import_name] = module_object
</snippet></ROW><ROW><id>20555420</id><snippet>__name__</snippet></ROW><ROW><id>20555422</id><snippet>repr(col)</snippet></ROW><ROW><id>20555422</id><snippet>setofcols.add(tuple(column.A1.tolist()))
</snippet></ROW><ROW><id>20555422</id><snippet>set</snippet></ROW><ROW><id>20555422</id><snippet>tuple</snippet></ROW><ROW><id>20555422</id><snippet>column.A1</snippet></ROW><ROW><id>20555422</id><snippet>(0, 1, 0)</snippet></ROW><ROW><id>20555422</id><snippet>set</snippet></ROW><ROW><id>20555422</id><snippet>repr</snippet></ROW><ROW><id>20555422</id><snippet>set</snippet></ROW><ROW><id>20555422</id><snippet>bubble's</snippet></ROW><ROW><id>20555422</id><snippet>count = 0
for i in xrange(iters):
    M =  np.random.randint(2, size=(h,n))
    product = np.dot(M,F)
    setofcols = set(tuple(x) for x in product.T.tolist())
    # or {tuple(x) for x in product.T.tolist()} if new enough Python
    if (len(setofcols)==2**n):
        count += 1
        # print M # to see the unique M
print count*1.0/iters
</snippet></ROW><ROW><id>20555422</id><snippet>dot([1,10,100,...],column)</snippet></ROW><ROW><id>20555422</id><snippet>np.unique</snippet></ROW><ROW><id>20555422</id><snippet>set</snippet></ROW><ROW><id>20555422</id><snippet>count = 0
X = 10**np.arange(h)
for i in xrange(iters):
    M =  np.random.randint(2, size=(h,n))
    product = np.dot(M,F)
    setofcols = np.unique(np.dot(X,product).A1)
    if (setofcols.size==2**n):
        count += 1
print count*1.0/iters
</snippet></ROW><ROW><id>20555422</id><snippet>  200    0.201    0.001    0.204    0.001 {numpy.core._dotblas.dot}
  100    0.026    0.000    0.026    0.000 {method 'sort' of 'numpy.ndarray' objects}
  100    0.007    0.000    0.035    0.000 arraysetops.py:93(unique)
</snippet></ROW><ROW><id>20555443</id><snippet>getattr</snippet></ROW><ROW><id>20555443</id><snippet>setattr</snippet></ROW><ROW><id>20555443</id><snippet>the_object=TheClass()
for attname in ['foo','bar']: 
    setattr(the_object, attname, attname+attname)
</snippet></ROW><ROW><id>20555443</id><snippet>&gt;&gt;&gt; the_object.foo
'foofoo'
</snippet></ROW><ROW><id>20555504</id><snippet>Unicode</snippet></ROW><ROW><id>20555504</id><snippet>encodings</snippet></ROW><ROW><id>20555504</id><snippet>encoding</snippet></ROW><ROW><id>20555504</id><snippet>encodings</snippet></ROW><ROW><id>20555504</id><snippet>encoding</snippet></ROW><ROW><id>20555504</id><snippet>encoding</snippet></ROW><ROW><id>20555504</id><snippet>Response headers</snippet></ROW><ROW><id>20555504</id><snippet>BeautifulSoup</snippet></ROW><ROW><id>20555504</id><snippet>.decode()</snippet></ROW><ROW><id>20555504</id><snippet>encoding</snippet></ROW><ROW><id>20555504</id><snippet>decode</snippet></ROW><ROW><id>20555504</id><snippet>str</snippet></ROW><ROW><id>20555504</id><snippet>unicode</snippet></ROW><ROW><id>20555504</id><snippet>unicode</snippet></ROW><ROW><id>20555504</id><snippet>.encode()</snippet></ROW><ROW><id>20555504</id><snippet>utf-8</snippet></ROW><ROW><id>20555504</id><snippet>encoding</snippet></ROW><ROW><id>20555504</id><snippet>,ignore</snippet></ROW><ROW><id>20555504</id><snippet>encoding</snippet></ROW><ROW><id>20555504</id><snippet>encodings</snippet></ROW><ROW><id>20555504</id><snippet>unicode</snippet></ROW><ROW><id>20555504</id><snippet>encodings</snippet></ROW><ROW><id>20555618</id><snippet>a = (sixteen_bit_val &amp; 0xE000) &gt;&gt; 13
b = (sixteen_bit_val &amp; 0x1800) &gt;&gt; 11
# ... and so on ..
</snippet></ROW><ROW><id>20555840</id><snippet>input()</snippet></ROW><ROW><id>20555840</id><snippet>raw_input()</snippet></ROW><ROW><id>20555840</id><snippet>source = raw_input("Enter the name of the source file (w/ extension): ")
f = open(source, "r")
</snippet></ROW><ROW><id>20555840</id><snippet>input()</snippet></ROW><ROW><id>20555840</id><snippet>source</snippet></ROW><ROW><id>20555840</id><snippet>&gt;&gt;&gt; input('Gimme: ')
Gimme: source
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
  File "&lt;string&gt;", line 1, in &lt;module&gt;
NameError: name 'source' is not defined
&gt;&gt;&gt; input('Gimme: ')
Gimme: Hello
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
  File "&lt;string&gt;", line 1, in &lt;module&gt;
NameError: name 'Hello' is not defined
</snippet></ROW><ROW><id>20555840</id><snippet>raw_input()</snippet></ROW><ROW><id>20555896</id><snippet>s/</snippet></ROW><ROW><id>20555896</id><snippet>/</snippet></ROW><ROW><id>20555896</id><snippet>\1</snippet></ROW><ROW><id>20555896</id><snippet>my_string = re.sub(r'^(.*?) \(The\)$', r'The \1', my_string)
my_string = re.sub(r'\bL\.? ?L\.? ?C\.?\b', '', my_string)
my_string = re.sub(r'[(),]', '', my_string)
</snippet></ROW><ROW><id>20555896</id><snippet>g</snippet></ROW><ROW><id>20555896</id><snippet>my_string = re.sub(r'^(.*?) \(The\)$', r'The \1', my_string, 1)
my_string = re.sub(r'\bL\.? ?L\.? ?C\.?\b', '', my_string, 1)
my_string = re.sub(r'[(),]', '', my_string)
</snippet></ROW><ROW><id>20556064</id><snippet>output,stderror = self.p.communicate("\r")</snippet></ROW><ROW><id>20556064</id><snippet>self.p.stdin.write("\r")
</snippet></ROW><ROW><id>20556088</id><snippet># original part (left)
import numpy as np
import matplotlib.pyplot as plt
f,ax = plt.subplots(1,2) 
ax[0].set_aspect('equal')
data=np.abs(np.random.randn(7))
wedges, texts = ax[0].pie(data)

# redraw plot using patches (right)
import matplotlib.patches as mpatches
from matplotlib.collections import PatchCollection
ax[1].set_aspect('equal')
ax[1].axis('off')

groups=[[0,1,2],[3,4],[5,6]]
radfraction = 0.1
patches = []
for i in groups:
  ang = np.deg2rad((wedges[i[-1]].theta2 + wedges[i[0]].theta1)/2,)
  for j in i:
    we = wedges[j]
    center = (radfraction*we.r*np.cos(ang), radfraction*we.r*np.sin(ang))
    patches.append(mpatches.Wedge(center, we.r, we.theta1, we.theta2))

colors = np.linspace(0, 1, len(patches))
collection = PatchCollection(patches, cmap=plt.cm.hsv)
collection.set_array(np.array(colors))
ax[1].add_collection(collection)
ax[1].autoscale(True)
</snippet></ROW><ROW><id>20556124</id><snippet>in_dll</snippet></ROW><ROW><id>20556124</id><snippet>#include &lt;stdlib.h&gt;

int (*hello_printf)(const char *format, ...) = NULL;

int test(const char *str, int n) {
    if (hello_printf == NULL)
        return -1;
    hello_printf(str, n);
    return 0;
}
</snippet></ROW><ROW><id>20556124</id><snippet>from ctypes import *

cglobals = CDLL(None)
lib = CDLL("./lib.so")

hello_printf = c_void_p.in_dll(lib, "hello_printf")
hello_printf.value = cast(cglobals.printf, c_void_p).value

&gt;&gt;&gt; lib.test("spam %d\n", 1)
spam 1
0
</snippet></ROW><ROW><id>20556403</id><snippet>Event.objects.raw('DELETE FROM myapp_event')
</snippet></ROW><ROW><id>20556403</id><snippet>Event.objects.raw('TRUNCATE myapp_event')   
</snippet></ROW><ROW><id>20556403</id><snippet>&lt;django_app_name&gt;_&lt;model_name&gt;</snippet></ROW><ROW><id>20556416</id><snippet>'ascii'</snippet></ROW><ROW><id>20556416</id><snippet>import sys
sys.getdefaultencoding()
sys.stdin.encoding
sys.stdout.encoding
</snippet></ROW><ROW><id>20556530</id><snippet>anchor</snippet></ROW><ROW><id>20556530</id><snippet>import Tkinter as tk

root = tk.Tk()

canvas = tk.Canvas(bg="red", height=100, width=100)
canvas.pack(anchor=tk.NW)

button = tk.Button(text="button")
button.pack(side=tk.RIGHT, anchor=tk.SE)

root.mainloop()
</snippet></ROW><ROW><id>20556933</id><snippet>plt.xlim( auto=False )
plt.ylim( auto=False )
</snippet></ROW><ROW><id>20556933</id><snippet>countorf</snippet></ROW><ROW><id>20556933</id><snippet>xl, yl = plt.xlim( ), plt.ylim( )
</snippet></ROW><ROW><id>20556933</id><snippet>x,y</snippet></ROW><ROW><id>20556933</id><snippet>plt.xlim( xl )
plt.ylim( yl )
</snippet></ROW><ROW><id>20557009</id><snippet>','</snippet></ROW><ROW><id>20557009</id><snippet>'\t'</snippet></ROW><ROW><id>20557009</id><snippet>csv</snippet></ROW><ROW><id>20557009</id><snippet>'\t'</snippet></ROW><ROW><id>20557009</id><snippet>csv</snippet></ROW><ROW><id>20557012</id><snippet>self.frame.after(0, self.showGUI)</snippet></ROW><ROW><id>20557012</id><snippet>self.showGUI()</snippet></ROW><ROW><id>20557012</id><snippet>printer</snippet></ROW><ROW><id>20557012</id><snippet>printer</snippet></ROW><ROW><id>20557012</id><snippet>showGUI</snippet></ROW><ROW><id>20557012</id><snippet>printer</snippet></ROW><ROW><id>20557012</id><snippet>__init__</snippet></ROW><ROW><id>20557035</id><snippet>len</snippet></ROW><ROW><id>20557035</id><snippet>len</snippet></ROW><ROW><id>20557035</id><snippet>len</snippet></ROW><ROW><id>20557035</id><snippet>len</snippet></ROW><ROW><id>20557035</id><snippet>list</snippet></ROW><ROW><id>20557035</id><snippet>str</snippet></ROW><ROW><id>20557083</id><snippet>import networkx as nx

class myGraph(nx.Graph):
    def __eq__(self, other):
        return nx.is_isomorphic(self, other)
    def __hash__(self):
        return hash(tuple(sorted(self.degree().values())))


if __name__ == '__main__':
    G1 = myGraph([(1,2)])
    G2 = myGraph([(2,3)])
    G3 = myGraph([(1,2),(2,3)])
    print G1.__hash__(), G1.edges()
    print G2.__hash__(), G2.edges()
    print G3.__hash__(), G3.edges()
    print G1 == G2
    print G1 == G3
    graphs = {}
    graphs[G1] = 'G1'
    graphs[G2] = 'G2'
    graphs[G3] = 'G3'
    print graphs.items()
</snippet></ROW><ROW><id>20557083</id><snippet>3713081631935493181 [(1, 2)]
3713081631935493181 [(2, 3)]
2528504235175490287 [(1, 2), (2, 3)]
True
False
[(&lt;__main__.myGraph object at 0xe47a90&gt;, 'G2'), (&lt;__main__.myGraph object at 0x1643250&gt;, 'G3')]
[aric@hamerkop tmp]$ python gc.py 
3713081631935493181 [(1, 2)]
3713081631935493181 [(2, 3)]
2528504235175490287 [(1, 2), (2, 3)]
True
False
[(&lt;__main__.myGraph object at 0x1fefad0&gt;, 'G2'), (&lt;__main__.myGraph object at 0x27ea290&gt;, 'G3')]
</snippet></ROW><ROW><id>20557179</id><snippet>&gt;&gt;&gt; '\n'.join(['bytestring with non-ascii character ☺', u'unicode'])
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
UnicodeDecodeError: 'ascii' codec can't decode byte 0xe2 in position 36: \
   ordinal not in range(128)
</snippet></ROW><ROW><id>20557179</id><snippet>pip</snippet></ROW><ROW><id>20557182</id><snippet>list_confs = {}
for line in conf_list.splitlines():
    thingy, yesno, number = line.split(' / ')
    list_confs[thingy] = (thingy, yesno, number)
</snippet></ROW><ROW><id>20557182</id><snippet>'host'</snippet></ROW><ROW><id>20557182</id><snippet>'host', 'yes', '7200'</snippet></ROW><ROW><id>20557182</id><snippet>list_conf = list_confs['host']
print(list_conf[1], list_conf[2]) # will print yes 7200
</snippet></ROW><ROW><id>20557305</id><snippet>from operator import attrgetter
from itertools import groupby
def getMatches(people, prop):
    people = sorted(people, key = attrgetter(prop))
    return [list(grp) for k, grp in groupby(people, attrgetter(prop))]

print getMatches(people, "age")
</snippet></ROW><ROW><id>20557305</id><snippet>for group in getMatches(people, "age"):
    print [people.name for people in group]
</snippet></ROW><ROW><id>20557305</id><snippet>['mike', 'joe']
['nick', 'Janet']
</snippet></ROW><ROW><id>20557309</id><snippet>.lower()</snippet></ROW><ROW><id>20557309</id><snippet>(^\s?\w+\b|(\b\w+)[\.?!\s]*$)</snippet></ROW><ROW><id>20557309</id><snippet>MATCH 1-1. Terrific
MATCH 2-1. Saturday.
        2. Saturday
MATCH 3-1. its
MATCH 4-1. fabulous
        2. fabulous
MATCH 5-1. Iranian
MATCH 6-1. missiles 
        2. missiles
MATCH 7-1. with
MATCH 8-1. Poland. 
        2. Poland
</snippet></ROW><ROW><id>20557309</id><snippet>import re, string

sentences = open("sentences.txt").read().splitlines()
data = open("data.txt").read()
pattern = re.compile(r"(^\s?\w+\b|(\b\w+)[\.?!\s]*$)")
for line in sentences:
    words = line.strip().split()
    first = words[0].lower()
    last = words[-1].translate(None, string.punctuation).lower()
    if (re.search(first, data, re.I)):
        print "Found " + first + " in data.txt"
    if (re.search(last, data, re.I)):
        print "Found " + last + " in data.txt"
</snippet></ROW><ROW><id>20557309</id><snippet>Found Terrific in data.txt
Found fabulous in data.txt
</snippet></ROW><ROW><id>20557495</id><snippet>queue</snippet></ROW><ROW><id>20557495</id><snippet>self.queue</snippet></ROW><ROW><id>20557495</id><snippet>self.</snippet></ROW><ROW><id>20557495</id><snippet>Queue</snippet></ROW><ROW><id>20557495</id><snippet>e</snippet></ROW><ROW><id>20557495</id><snippet>return</snippet></ROW><ROW><id>20557495</id><snippet>None</snippet></ROW><ROW><id>20557495</id><snippet>list[1:len(queue)]</snippet></ROW><ROW><id>20557495</id><snippet>list</snippet></ROW><ROW><id>20557495</id><snippet>self.queue</snippet></ROW><ROW><id>20557495</id><snippet>self.queue[1:len(queue)]</snippet></ROW><ROW><id>20557495</id><snippet>__init__</snippet></ROW><ROW><id>20557495</id><snippet>list.insert</snippet></ROW><ROW><id>20557495</id><snippet>list</snippet></ROW><ROW><id>20557495</id><snippet>[-1]</snippet></ROW><ROW><id>20557495</id><snippet>-1</snippet></ROW><ROW><id>20557495</id><snippet>self.queue[1:]</snippet></ROW><ROW><id>20557495</id><snippet>len(self.queue)</snippet></ROW><ROW><id>20557495</id><snippet>pop(0)</snippet></ROW><ROW><id>20557495</id><snippet>append</snippet></ROW><ROW><id>20557495</id><snippet>if the_list</snippet></ROW><ROW><id>20557495</id><snippet>if len(the_list) &gt; 0</snippet></ROW><ROW><id>20557495</id><snippet>pop</snippet></ROW><ROW><id>20557495</id><snippet>class Queue(object):
    def __init__(self, queue=None):
        if queue is None:
            self.queue = []
        else:
            self.queue = list(queue)
    def dequeue(self):
        return self.queue.pop(0)
    def enqueue(self, element):
        self.queue.append(element)
</snippet></ROW><ROW><id>20557495</id><snippet>IndexError: dequeue from empty Queue</snippet></ROW><ROW><id>20557495</id><snippet>IndexError: pop from empty list</snippet></ROW><ROW><id>20557495</id><snippet>try</snippet></ROW><ROW><id>20557495</id><snippet>    def dequeue(self):
        try:
            return self.queue.pop(0)
        except IndexError:
            raise IndexError('dequeue from empty Queue') 
</snippet></ROW><ROW><id>20557495</id><snippet>def test_queue():
    q = Queue()
    for i in range(10):
        q.enqueue(i)
    for i in range(10):
        value = q.dequeue()
        if value != i:
            print('Value #{} should be {} but is {}'.format(i, i, value))
    try:
        value = q.dequeue()
    except IndexError:
        pass # we _want_ an error here
    else:
        print('#10 should raise an IndexError, but got {}'.format(value))

if __name__ == '__main__':
    test_queue()
</snippet></ROW><ROW><id>20557495</id><snippet>unittest</snippet></ROW><ROW><id>20557495</id><snippet>nose</snippet></ROW><ROW><id>20557645</id><snippet>wss://domain.tld</snippet></ROW><ROW><id>20557645</id><snippet>netloc</snippet></ROW><ROW><id>20557645</id><snippet>urllib.parse</snippet></ROW><ROW><id>20557645</id><snippet>&gt;&gt;&gt; from urllib.parse import urlparse # in 2.x it's from urlparse
&gt;&gt;&gt; url = 'wss://domain.tld'
&gt;&gt;&gt; bits = urllib.parse.urlparse(url)
&gt;&gt;&gt; netloc = bits.netloc
&gt;&gt;&gt; netloc
'domain.tld'
</snippet></ROW><ROW><id>20557645</id><snippet>netloc</snippet></ROW><ROW><id>20557645</id><snippet>split(':')</snippet></ROW><ROW><id>20557645</id><snippet>host</snippet></ROW><ROW><id>20557645</id><snippet>netloc</snippet></ROW><ROW><id>20557645</id><snippet>&gt;&gt;&gt; host, _, port = netloc.rpartition(':')
&gt;&gt;&gt; if ']' in port: host = netloc
&gt;&gt;&gt; host
'domain.tld'
</snippet></ROW><ROW><id>20557645</id><snippet>socket.gethostbyname</snippet></ROW><ROW><id>20557645</id><snippet>socket.socket</snippet></ROW><ROW><id>20557645</id><snippet>gethostbyname</snippet></ROW><ROW><id>20557645</id><snippet>gethostbyname</snippet></ROW><ROW><id>20557645</id><snippet>getaddrinfo</snippet></ROW><ROW><id>20557645</id><snippet>&gt;&gt;&gt; import socket
&gt;&gt;&gt; addresses = socket.getaddrinfo(host, None) # or host, port if you prefer
gaierror: [Errno 8] nodename nor servname provided, or not known
</snippet></ROW><ROW><id>20557645</id><snippet>domain.tld</snippet></ROW><ROW><id>20557645</id><snippet>www.google.com</snippet></ROW><ROW><id>20557645</id><snippet>getaddrinfo</snippet></ROW><ROW><id>20557681</id><snippet>for s,x in itertools.product(range(65),ml):
    t = s * x 
    if t == 65:
        print s
        print x
        break
</snippet></ROW><ROW><id>20557831</id><snippet>thread.start_new_thread</snippet></ROW><ROW><id>20557831</id><snippet>threading</snippet></ROW><ROW><id>20557831</id><snippet>Thread</snippet></ROW><ROW><id>20557831</id><snippet># This line should be at the top of your file, obviously :p
from threading import Thread 

threads = []
for i in sites:
    t = Thread(target=ftpconnect, args=[i])
    threads.append(t)
    t.start()

# Wait for all the threads to complete before exiting the program.
for t in threads:
    t.join()
</snippet></ROW><ROW><id>20557831</id><snippet>for</snippet></ROW><ROW><id>20557831</id><snippet>ftpconnect(i)</snippet></ROW><ROW><id>20557831</id><snippet>None</snippet></ROW><ROW><id>20557831</id><snippet>my_function</snippet></ROW><ROW><id>20557831</id><snippet>my_function()</snippet></ROW><ROW><id>20557831</id><snippet>[i]</snippet></ROW><ROW><id>20557831</id><snippet>ftpconnect</snippet></ROW><ROW><id>20557831</id><snippet>i</snippet></ROW><ROW><id>20557831</id><snippet>Thread</snippet></ROW><ROW><id>20557831</id><snippet>start</snippet></ROW><ROW><id>20558020</id><snippet>for album,song in song_database.iteritems():
    for s in song:
        for sdir in 'Songs_1', 'Songs_2', 'Songs_3':
            try:
                src_dir_1 = src_dir + "/" + sdir + "/" + album + "/" + s + ".mp3"
                shutil.copy2(src_dir_1,dest_dir)
                print src_dir_1
            except IOError:
                pass
</snippet></ROW><ROW><id>20558020</id><snippet>break</snippet></ROW><ROW><id>20558020</id><snippet>os.path.join</snippet></ROW><ROW><id>20558020</id><snippet>src_dir_1 = os.path.join(src_dir, sdir, album, s + ".mp3")
</snippet></ROW><ROW><id>20558306</id><snippet>f = open('something.mp3', 'rb')
</snippet></ROW><ROW><id>20558306</id><snippet>open('asd.mp3')</snippet></ROW><ROW><id>20558415</id><snippet>'%s' %</snippet></ROW><ROW><id>20558415</id><snippet>print ', '.join(['%s' % str(doctor_times[k]['id']) for k in doctor_times.keys()])
</snippet></ROW><ROW><id>20558415</id><snippet>str</snippet></ROW><ROW><id>20558415</id><snippet>%s</snippet></ROW><ROW><id>20558415</id><snippet>print ', '.join(str(doctor_times[k]['id']) for k in doctor_times.keys())
</snippet></ROW><ROW><id>20558415</id><snippet>print ", ".join(str(v['id']) for v in doctor_times.values())
</snippet></ROW><ROW><id>20558624</id><snippet>"file://"</snippet></ROW><ROW><id>20558624</id><snippet>&gt;&gt;&gt; import urllib2
&gt;&gt;&gt; urllib2.urlopen("file:///etc/debian_version").read()
'wheezy/sid\n'
</snippet></ROW><ROW><id>20558778</id><snippet>__init__</snippet></ROW><ROW><id>20558778</id><snippet>def remove_none(obj):
  if isinstance(obj, (list, tuple, set)):
    return type(obj)(remove_none(x) for x in obj if x is not None)
  elif isinstance(obj, dict):
    return type(obj)((remove_none(k), remove_none(v))
      for k, v in obj.items() if k is not None and v is not None)
  else:
    return obj

from collections import OrderedDict
data1 = ( 501, (None, 999), None, (None), 504 )
data2 = { 1:601, 2:None, None:603, 'four':'sixty' }
data3 = OrderedDict( [(None, 401), (12, 402), (13, None), (14, data2)] )
data = [ [None, 22, tuple([None]), (None,None), None], ( (None, 202), {None:301, 32:302, 33:data1}, data3 ) ]
print remove_none(data)
</snippet></ROW><ROW><id>20558778</id><snippet>defaultdict</snippet></ROW><ROW><id>20558778</id><snippet>__init__</snippet></ROW><ROW><id>20558778</id><snippet>defaultdict</snippet></ROW><ROW><id>20558778</id><snippet>elif</snippet></ROW><ROW><id>20558778</id><snippet>tuple</snippet></ROW><ROW><id>20558987</id><snippet>tuple</snippet></ROW><ROW><id>20558987</id><snippet>for i in orientation:
    newCord = firstCord[0] + i[0], firstCord[1] + i[1]
</snippet></ROW><ROW><id>20558987</id><snippet>list</snippet></ROW><ROW><id>20558987</id><snippet>for i in orientation:
    newCord = [firstCord[0] + i[0], firstCord[1] + i[1]]
</snippet></ROW><ROW><id>20559035</id><snippet>from itertools import combinations
def get_support(df):
    pp = []
    for cnum in range(1, len(df.columns)+1):
        for cols in combinations(df, cnum):
            s = df[list(cols)].all(axis=1).sum()
            pp.append([",".join(cols), s])
    sdf = pd.DataFrame(pp, columns=["Pattern", "Support"])
    return sdf
</snippet></ROW><ROW><id>20559035</id><snippet>&gt;&gt;&gt; s = get_support(df)
&gt;&gt;&gt; s[s.Support &gt;= 3]
   Pattern  Support
0        a        6
1        b        7
2        c        7
3        d        7
4        e        3
5      a,b        5
6      a,c        4
7      a,d        4
9      b,c        6
10     b,d        4
12     c,d        4
14     d,e        3
15   a,b,c        4
16   a,b,d        3
21   b,c,d        3

[15 rows x 2 columns]
</snippet></ROW><ROW><id>20559069</id><snippet>regex</snippet></ROW><ROW><id>20559069</id><snippet>import re
string = "Fri Dec 13 03:49:06 +0000 2013,I need some HARD TRAP beats producers help me out here...louiethefifthonline@gmail.com,490060971,[]"
regex = "\w+@\w+\.com"
match = re.findall(regex,string)
print match
</snippet></ROW><ROW><id>20559069</id><snippet>['louiethefifthonline@gmail.com']
</snippet></ROW><ROW><id>20559069</id><snippet>string</snippet></ROW><ROW><id>20559069</id><snippet>dict</snippet></ROW><ROW><id>20559069</id><snippet>str()</snippet></ROW><ROW><id>20559069</id><snippet>string = str({"metadata":{"result_type":"recent","iso_language_code":"et"},
            "created_at":"Tue Dec 03 01:41:53 +0000 2013","id":407686093790662656,"id_str":"407686093790662656","text":"@emblems123 justinbieberfan12599@gamil.com","source":"\u003ca href=\"http:\/\/twitter.com\/download\/iphone\" rel=\"nofollow\"\u003eTwitter for iPhone\u003c\/a\u003e","truncated":False,"in_reply_to_status_id":407677310821613569,"in_reply_to_status_id_str":"407677310821613569","in_reply_to_user_id":2201997043,"in_reply_to_user_id_str":"2201997043","in_reply_to_screen_name":"emblems123","user":{"id":1220098345,"id_str":"1220098345","name":"PYD","screen_name":"bieberfan12599","location":"NY"}})
</snippet></ROW><ROW><id>20559069</id><snippet>['justinbieberfan12599@gamil.com']
</snippet></ROW><ROW><id>20559494</id><snippet>from functools import wraps
def retry_if_exception(ex, max_retries):
    def outer(func):
        @wraps(func)
        def wrapper(*args, **kwargs):
            assert max_retries &gt; 0
            x = max_retries
            while x:
                try:
                    return func(*args, **kwargs)
                except ex:
                    x -= 1
        return wrapper
    return outer
</snippet></ROW><ROW><id>20559923</id><snippet>python -c 'print file.shape\n import sys,os\n'
</snippet></ROW><ROW><id>20559923</id><snippet>unexpected character after line continuation character
</snippet></ROW><ROW><id>20559923</id><snippet>python -c $'print file.shape\n import sys,os\n'
</snippet></ROW><ROW><id>20559923</id><snippet>$'...'</snippet></ROW><ROW><id>20559923</id><snippet>\n</snippet></ROW><ROW><id>20559923</id><snippet>file</snippet></ROW><ROW><id>20559923</id><snippet>shape</snippet></ROW><ROW><id>20559923</id><snippet>python -c 'sys.path.append(os.path.join(os.environ['PETSC_DIR'],'bin','pythonscripts'))'
</snippet></ROW><ROW><id>20559923</id><snippet>sys.path.append(os.path.join(os.environ[PETSC_DIR],bin,pythonscripts))
</snippet></ROW><ROW><id>20559923</id><snippet>PETSC_DIR</snippet></ROW><ROW><id>20559923</id><snippet>bin</snippet></ROW><ROW><id>20559923</id><snippet>pythonscripts</snippet></ROW><ROW><id>20559923</id><snippet>print walls.shape()</snippet></ROW><ROW><id>20559923</id><snippet>walls</snippet></ROW><ROW><id>20559923</id><snippet>shape</snippet></ROW><ROW><id>20559923</id><snippet>os.path.getsize(path)</snippet></ROW><ROW><id>20559923</id><snippet>os.path</snippet></ROW><ROW><id>20560604</id><snippet>url</snippet></ROW><ROW><id>20560604</id><snippet>{% url path.to.view ... %}
</snippet></ROW><ROW><id>20560604</id><snippet>{% with var='path.to.view' %}
    {% url var ... %}
{% endwith %}
</snippet></ROW><ROW><id>20560604</id><snippet>{% load url from future %}
{% url var ... %}
or
{% url 'path.to.view' ... %}
</snippet></ROW><ROW><id>20560604</id><snippet>{% load url from future %}</snippet></ROW><ROW><id>20560604</id><snippet>{% url path.to.view ... %}</snippet></ROW><ROW><id>20560790</id><snippet>while word:
    scrambled_word += word[letter]
    word = word[:letter] + word[(letter+1):]
</snippet></ROW><ROW><id>20560790</id><snippet>word</snippet></ROW><ROW><id>20560790</id><snippet>&gt;&gt;&gt; "koala"[:3]
'koa'
&gt;&gt;&gt; "koala"[4:]
'a'
</snippet></ROW><ROW><id>20560790</id><snippet>word[letter]</snippet></ROW><ROW><id>20560790</id><snippet>&gt;&gt;&gt; word = "koala"
&gt;&gt;&gt; l = list(word)
&gt;&gt;&gt; random.shuffle(l)
&gt;&gt;&gt; word = "".join(l)
&gt;&gt;&gt; word
'oklaa'
</snippet></ROW><ROW><id>20561058</id><snippet>ROWID</snippet></ROW><ROW><id>20561058</id><snippet>INTEGER PRIMARY KEY</snippet></ROW><ROW><id>20561058</id><snippet>MAX(ROWID)+1</snippet></ROW><ROW><id>20561058</id><snippet>INTEGER PRIMARY KEY AUTOINCREMENT</snippet></ROW><ROW><id>20561058</id><snippet>sqlite_sequence</snippet></ROW><ROW><id>20561058</id><snippet>name</snippet></ROW><ROW><id>20561058</id><snippet>seq</snippet></ROW><ROW><id>20561058</id><snippet>ON CONFLICT IGNORE</snippet></ROW><ROW><id>20561058</id><snippet>sqlite_sequence</snippet></ROW><ROW><id>20561486</id><snippet># faster lookup on users
cur.execute ("select ref from users")
users = set(row[0] for row in cur.fetchall())

with open("your/file.CSV") as f:
    r = reader(f)
    for row in r:
        if row[0] in users:
            do_something_with(row)
</snippet></ROW><ROW><id>20561706</id><snippet>os.walk</snippet></ROW><ROW><id>20561706</id><snippet>find</snippet></ROW><ROW><id>20561706</id><snippet>find /opt/ -type f -follow 
</snippet></ROW><ROW><id>20561706</id><snippet>followlinks = True</snippet></ROW><ROW><id>20561706</id><snippet>os.walk</snippet></ROW><ROW><id>20561706</id><snippet>os.walk("/opt/", followlinks = True)
</snippet></ROW><ROW><id>20561745</id><snippet>desc</snippet></ROW><ROW><id>20561745</id><snippet>class SomeClass(object):

    HAIRCOLORS = set(['blonde', 'brunette', 'brown', 'black', 'auburn', 'red'])
    EYECOLORS = set(['green', 'blue', 'brown', 'gray'])

    def __init__(self, haircolor="blond", eyecolor="green"):
        self.haircolor = haircolor
        self.eyecolor = eyecolor
        self.height = 1.55 # you didn't mention any validation here

    @property
    self.haircolor(self):
        return self._haircolor

    @haircolor.setter
    self.haircolor(self, color):
        color = color.lower()
        if color not in self.HAICOLORS:
            raise ValueError("'%s' is not a valid hair color" % color)
        self._haircolor = color

    # same thing for eyecolor

    @property
    def desc(self):
        return dict(
           haircolor=self.haircolor, 
           eyecolor=self.eyecolor, 
           height=self.height)
</snippet></ROW><ROW><id>20561745</id><snippet>class ChoiceDescriptor(object):
    def __init__(self, key, choices):
        self.key = key
        self.storage = "_%s" % key
        self.choices = set(choices)

    def __get__(self, instance, cls=None):
        if instance is None:
            return self
        return getattr(instance, self.storage)


    def __set__(self, instance, value):
        value = value.lower()
        if value not in self.choices:
            raise ValueError(
                "'%s' is not a valid value for '%s'" % (value, self.key))
        setattr(instance, self.storage, value)


class SomeClass(object):
    haircolor = ChoiceDescriptor("haircolor", 
        ['blonde', 'brunette', 'brown', 'black', 'auburn', 'red'])
    eyecolor = ChoiceDescriptor("eyecolor", 
        ['green', 'blue', 'brown', 'gray'])
</snippet></ROW><ROW><id>20562090</id><snippet>from __future__ import print_function, unicode_literals

import json
import numpy
import tifffile  # http://www.lfd.uci.edu/~gohlke/code/tifffile.py.html

data = numpy.arange(256).reshape((16, 16)).astype('u1')
metadata = dict(microscope='george', shape=data.shape, dtype=data.dtype.str)
print(data.shape, data.dtype, metadata['microscope'])

metadata = json.dumps(metadata)
tifffile.imsave('microscope.tif', data, description=metadata)

with tifffile.TiffFile('microscope.tif') as tif:
    data = tif.asarray()
    metadata = tif[0].image_description
metadata = json.loads(metadata.decode('utf-8'))
print(data.shape, data.dtype, metadata['microscope'])
</snippet></ROW><ROW><id>20562108</id><snippet>/admin/</snippet></ROW><ROW><id>20562108</id><snippet>next</snippet></ROW><ROW><id>20562261</id><snippet>function scanSizes(root) {
  return [].reduce.call(root, function(sizes, node) {
    var bounds = node.getBoundingClientRect();
    sizes.push({tag: node.outerHTML, area: bounds.width * bounds.height});
    var children = node.querySelectorAll("*");
    if (children.length &gt; 0)
      sizes.push.apply(sizes, scanSizes(children));
    return sizes;
  }, []).sort(function(x, y) {
    var a = x.area, b= y.area;
    return a &gt; b ? -1 : a &lt; b ? 1 : 0;
  });
}

var sizes = scanSizes(document.querySelectorAll("body &gt; *"));

// sizes[0].tag contains the largest html tag (as a string)
// sizes[0].area its area size in pixels (width * height)
</snippet></ROW><ROW><id>20562261</id><snippet>function scanSizes(root) {
  return [].map.call(root, function(node) {
    var bounds = node.getBoundingClientRect();
    return {tag: node.outerHTML, area: bounds.width * bounds.height};
  }).sort(function(x, y) {
    var a = x.area, b= y.area;
    return a &gt; b ? -1 : a &lt; b ? 1 : 0;
  });
}

var sizes = scanSizes(document.querySelectorAll("*"));
</snippet></ROW><ROW><id>20562575</id><snippet>X = root.winfo_width

print X()
</snippet></ROW><ROW><id>20562891</id><snippet>self</snippet></ROW><ROW><id>20562891</id><snippet>self</snippet></ROW><ROW><id>20562891</id><snippet>super(MyThread, self).__init__(group=group, target=target,
                               name=name, args=args, kwargs=kwargs,
                               verbose=verbose)
</snippet></ROW><ROW><id>20562891</id><snippet>super()</snippet></ROW><ROW><id>20562891</id><snippet>self</snippet></ROW><ROW><id>20562891</id><snippet>super()</snippet></ROW><ROW><id>20562891</id><snippet>group</snippet></ROW><ROW><id>20562891</id><snippet>Thread.__init__()</snippet></ROW><ROW><id>20562891</id><snippet>self</snippet></ROW><ROW><id>20562891</id><snippet>self</snippet></ROW><ROW><id>20562891</id><snippet>group</snippet></ROW><ROW><id>20562891</id><snippet>group=group</snippet></ROW><ROW><id>20563220</id><snippet>import spider
spider.webspider(b='http://example.com', w=200, d=5, t=5)
</snippet></ROW><ROW><id>20563220</id><snippet>webspider</snippet></ROW><ROW><id>20563220</id><snippet>from spider import webspider
webspider(b='http://example.com', w=200, d=5, t=5)
</snippet></ROW><ROW><id>20563220</id><snippet>from spider import webspider as myspider
myspider(b='http://example.com', w=200, d=5, t=5)
</snippet></ROW><ROW><id>20563685</id><snippet>attrs</snippet></ROW><ROW><id>20563685</id><snippet>process_value</snippet></ROW><ROW><id>20563685</id><snippet>def process_onclick(value):
    m = re.search("window.open\('(.+?)'", value)
    if m:
        return m.group(1)
</snippet></ROW><ROW><id>20563685</id><snippet>&gt;&gt;&gt; re.search("window.open\('(.+?)'",
...           "window.open('page.asp?ProductID=3679','productwin','width=700,height=475,scrollbars,resizable,status');"
...          ).group(1)
'page.asp?ProductID=3679'
&gt;&gt;&gt; 
</snippet></ROW><ROW><id>20563685</id><snippet>Rule</snippet></ROW><ROW><id>20563685</id><snippet>SgmlLinkExtractor</snippet></ROW><ROW><id>20563685</id><snippet>rules=(
    Rule(SgmlLinkExtractor(allow=(),
                           attrs=('onclick',),
                           process_value=process_onclick),
         callback='parse_item'),
)
</snippet></ROW><ROW><id>20563745</id><snippet> //Get the elements you want to compare
 WebElement element=driver.findElement(By.xpath("XPATH For Panel"));
 WebElement elementTwo=driver.findElement(By.xpath("XPATH For Pop Up"));


 //Then get the values of the z-indexes 
 String zindex = element.getCssValue("z-index");
 String zindexTwo = elementTwo.getCssValue("z-index");
</snippet></ROW><ROW><id>20563745</id><snippet>System.setProperty("webdriver.chrome.driver", "/path/to/chromedriver.exe");
WebDriver driver=new ChromeDriver();
</snippet></ROW><ROW><id>20563810</id><snippet>&lt;record id="view_0001" model="ir.ui.view"&gt;  
&lt;field name="name"&gt;XXXXXXX&lt;/field&gt;
&lt;field name="model"&gt;res.partner&lt;/field&gt;
&lt;field name="arch" type="xml"&gt;
    &lt;form string="XXXXXXXXXX" version="7.0"&gt;
        &lt;group col="4" colspan="2"&gt;
            &lt;field name="ids_count"/&gt; 
            &lt;field name="mobile" attrs="{'invisible': [('ids_count','=', 0)]}"/&gt;
            &lt;field name="fax" attrs="{'invisible': [('ids_count','=', 0)]}"/&gt;
            &lt;field name="email" widget="email" attrs="{'invisible': [('ids_count','=',0)]}"/&gt; 
        &lt;/group&gt;
        &lt;field name="vip_ids"&gt;&lt;/field&gt;

    &lt;/form&gt; 
&lt;/field&gt;
&lt;/record&gt;
</snippet></ROW><ROW><id>20563810</id><snippet>from openerp.osv import fields, osv
class res_partner_users_vip_rel2(osv.osv):
    _inherit = 'res.partner'
    _description = "VIP status for partner (users)"
    def getcount(self, cr, uid,ids,name,arg,context):
        res={}
        sql="""
            SELECT partner_id id, count(*) cnt FROM res_partner_users_vip_rel2 
            WHERE partner_id = """+str(ids[0])+""" GROUP BY partner_id """
        cr.execute(sql)
        res.update(dict(cr.fetchall()))
        if res!={}:
            return res 
        return {ids[0]:0}
    _columns = {                
        'ids_count':fields.function(getcount,type="integer",string='Count'),

        'vip_ids': fields.many2many(
            'res.users',
            'res_partner_users_vip_rel2',
            'partner_id',
            'users_id',
            'VIP status'),
         }
</snippet></ROW><ROW><id>20563874</id><snippet>for m in MyList:
    MyLargeRec[m][6]+=1
</snippet></ROW><ROW><id>20564203</id><snippet>import json

myList = json.loads(s)
</snippet></ROW><ROW><id>20564203</id><snippet>s</snippet></ROW><ROW><id>20564203</id><snippet>myList</snippet></ROW><ROW><id>20564230</id><snippet>[][]</snippet></ROW><ROW><id>20564230</id><snippet>k</snippet></ROW><ROW><id>20564230</id><snippet>k</snippet></ROW><ROW><id>20564230</id><snippet>test = [[[chr(i + 97)] for i in range(j * 3, j * 3 + 3)] for j in range(3)]
</snippet></ROW><ROW><id>20564230</id><snippet>matrix = []
for j in range(3):
    row = []
    for i in range(j * 3, j * 3 + 3):
        row.append([chr(i + 97)])
    matrix.append(row)
print matrix
</snippet></ROW><ROW><id>20564230</id><snippet>[[['a'], ['b'], ['c']], [['d'], ['e'], ['f']], [['g'], ['h'], ['i']]]
</snippet></ROW><ROW><id>20564424</id><snippet>import sys
from PyQt4 import QtGui, QtCore

class CustomButton(QtGui.QPushButton):
    custom_clicked = QtCore.pyqtSignal(str, name='customClicked')
    def mousePressEvent(self, event):
        self.custom_clicked.emit("Clicked!")

class SignalsAndSlots(QtGui.QWidget):

    def __init__(self):
        QtGui.QMainWindow.__init__(self)
        layout = QtGui.QHBoxLayout(self)
        self.custom_button = CustomButton("Press Me", self)
        self.custom_button.setObjectName('customButton')
        self.label = QtGui.QLabel("Nothing...", parent=self)
        layout.addWidget(self.custom_button)
        layout.addWidget(self.label)
        QtCore.QMetaObject.connectSlotsByName(self)

    @QtCore.pyqtSlot(str, name='on_customButton_customClicked')     
    def autoSlot(self, msg):
        self.label.setText(msg)

if __name__ == "__main__":
    app = QtGui.QApplication(sys.argv)
    gui = SignalsAndSlots()
    gui.show()
    app.exec_()
</snippet></ROW><ROW><id>20564424</id><snippet>import sys
from PyQt4 import QtGui, QtCore

class CustomButton(QtGui.QPushButton):
    custom_clicked = QtCore.pyqtSignal(str)
    def mousePressEvent(self, event):
        self.custom_clicked.emit("Clicked!")

class SignalsAndSlots(QtGui.QWidget):

    def __init__(self):
        QtGui.QMainWindow.__init__(self)
        layout = QtGui.QHBoxLayout(self)
        self.custom_button = CustomButton("Press Me", self)
        self.custom_button.setObjectName('customButton')
        self.label = QtGui.QLabel("Nothing...", parent=self)
        layout.addWidget(self.custom_button)
        layout.addWidget(self.label)
        self.custom_button.custom_clicked.connect(self.on_clicked)

    def on_clicked(self, msg):
        self.label.setText(msg)

if __name__ == "__main__":
    app = QtGui.QApplication(sys.argv)
    gui = SignalsAndSlots()
    gui.show()
    app.exec_()
</snippet></ROW><ROW><id>20564433</id><snippet>def mapValues(values):
    values = [float(i.split('%')[0]) for i in values]
    colorMap = np.array(['#F8696B', '#FFEB84', '#63BE7B'])
    #colorMap = np.array(["low", "mid", "high"])
    values = np.asarray(values)
    _, bins = np.histogram(values, 2)
    mapped = np.digitize(values, bins)
    return list(colorMap[mapped - 1])

def mapAndAdd(finalList, tempList, v1,v2,v3):
    v1 = mapValues(v1)
    v2 = mapValues(v2)
    v3 = mapValues(v3)
    for i,j in enumerate(newList):
        finalList.append(j + [v1[i] , v2[i] , v3[i]])


uniqueDataSet = set()

finalList = []
for index, DataSet in enumerate(lst):
    if (DataSet[0] + DataSet[1]) in uniqueDataSet:
        v1.append(DataSet[2])
        v2.append(DataSet[3])
        v3.append(DataSet[4])
        newList.append(DataSet)
    else:
        if (index != 0):
            mapAndAdd(finalList, newList, v1,v2,v3)

        uniqueDataSet.add(DataSet[0] + DataSet[1])
        newList = [DataSet]
        v1 = [DataSet[2]]
        v2 = [DataSet[3]]
        v3 = [DataSet[4]]

mapAndAdd(finalList, newList, v1,v2,v3)
</snippet></ROW><ROW><id>20564573</id><snippet>import zmq
import time
from multiprocessing import Pipe, current_process
from multiprocessing.reduction import reduce_connection

context = zmq.Context()
socket = context.socket(zmq.PUB)
socket.bind("tcp://*:5556")

time.sleep(1)

a, b = Pipe()
reduced_a = reduce_connection(a)
socket.send_pyobj(reduced_a)
socket.send(current_process().authkey)

print b.recv()
</snippet></ROW><ROW><id>20564573</id><snippet>import zmq
from multiprocessing import reduction

def rebuild_handle_with_key(pickled_data, authkey=None):
    from multiprocessing import current_process
    from multiprocessing.util import sub_debug
    from multiprocessing.connection import Client
    from multiprocessing.reduction import recv_handle
    import os
    address, handle, inherited = pickled_data
    if inherited:
        return handle
    sub_debug('rebuilding handle %d', handle)
    conn = Client(address, authkey=authkey or current_process().authkey)
    conn.send((handle, os.getpid()))
    new_handle = recv_handle(conn)
    conn.close()
    return new_handle

def rebuild_connection_with_key(reduced_handle, readable, writable, authkey=None):
    import _multiprocessing
    handle = rebuild_handle_with_key(reduced_handle, authkey)
    return _multiprocessing.Connection(
        handle, readable=readable, writable=writable
        )

reduction.rebuild_connection = rebuild_connection_with_key

context = zmq.Context()
socket = context.socket(zmq.SUB)
socket.connect ("tcp://localhost:5556")
socket.setsockopt(zmq.SUBSCRIBE, '')

obj = socket.recv_pyobj()
authkey = socket.recv()
answer_conn = obj[0](obj[1][0],obj[1][1],obj[1][2], authkey)
# answer_conn = obj[0](*obj[1])

answer_conn.send('All is OK!')
</snippet></ROW><ROW><id>20564724</id><snippet>QSortFilterProxyModel</snippet></ROW><ROW><id>20564724</id><snippet>    self.proxyModelContact = QSortFilterProxyModel(self)
    self.proxyModelContact.setSourceModel(recordsTableModel(self.contacts))
    self.contactsTableView.setModel(self.proxyModelContact)
</snippet></ROW><ROW><id>20564724</id><snippet>QSortFilterProxyModel</snippet></ROW><ROW><id>20564724</id><snippet>setFilterRegExp(pattern)</snippet></ROW><ROW><id>20564724</id><snippet>setFilterKeyColumn(index)</snippet></ROW><ROW><id>20564724</id><snippet>textChanged</snippet></ROW><ROW><id>20564724</id><snippet>def onTextChanged(self, text):
    self.proxyModelContact.setFilterRegExp(str(text))
</snippet></ROW><ROW><id>20564786</id><snippet>cd C:\Users\Sam\Desktop\TextBlob
python setup.py install
</snippet></ROW><ROW><id>20564833</id><snippet>os.path.normpath</snippet></ROW><ROW><id>20564833</id><snippet>chain.from_iterable</snippet></ROW><ROW><id>20564833</id><snippet>simonDuplicates = [os.path.normpath(path) for path in chain.from_iterable(files for files in file_dict.values() if len(files) &gt; 1)]
</snippet></ROW><ROW><id>20564833</id><snippet>simonDuplicates = map(os.path.normpath, chain.from_iterable(files for files in file_dict.values() if len(files) &gt; 1))
</snippet></ROW><ROW><id>20564849</id><snippet>explained_variance_ratio_</snippet></ROW><ROW><id>20564849</id><snippet>RandomizedPCA</snippet></ROW><ROW><id>20564849</id><snippet>RandomizedPCA</snippet></ROW><ROW><id>20564849</id><snippet>import numpy as np
from sklearn.decomposition import TruncatedSVC

model = TruncatedSVD(n_components=10).fit(X)
X_proj = model.transform(X)
explained_variances = np.var(X_proj, axis=0) / np.var(X, axis=0).sum()
</snippet></ROW><ROW><id>20565427</id><snippet>&amp;</snippet></ROW><ROW><id>20565427</id><snippet>os.system("konsole --workdir " + os.getcwd() + "&amp;")
</snippet></ROW><ROW><id>20565676</id><snippet>index("end-1c")</snippet></ROW><ROW><id>20565676</id><snippet>&lt;KeyRelease&gt;</snippet></ROW><ROW><id>20565676</id><snippet>import Tkinter as Tk

def countlines(event):
    (line, c) = map(int, event.widget.index("end-1c").split("."))
    print line, c

root = Tk.Tk()
root.geometry("200x200")
a = Tk.Text(root)
a.pack()
a.bind("&lt;KeyRelease&gt;", countlines)

root.mainloop()
</snippet></ROW><ROW><id>20565676</id><snippet>import Tkinter as Tk

def countlines(event):
    (line, c) = map(int, event.widget.index("end-1c").split("."))
    print line, c

root = Tk.Tk()
root.geometry("200x200")
a = Tk.Text(root)
a.pack()
bindtags = list(a.bindtags())
bindtags.insert(2, "custom")
a.bindtags(tuple(bindtags))
a.bind_class("custom", "&lt;Key&gt;", countlines)

root.mainloop()
</snippet></ROW><ROW><id>20565952</id><snippet>up,down,right or left</snippet></ROW><ROW><id>20565952</id><snippet>import Tkinter as Tk
from PIL import Image, ImageTk

root = Tk.Tk()
root.geometry("600x360+100+50")
canvas = Tk.Canvas(root)
canvas.grid(sticky=Tk.N+Tk.E+Tk.S+Tk.W)

width = 300
height = 180

image_file = Image.open("above_image.png")
PIL_image = ImageTk.PhotoImage(image_file.convert("RGBA"))
canvas_img = canvas.create_image(width,height,image=PIL_image)

def callback(event):
    """ This function is called whenever a event occurs """
    if width-9 &lt; event.x &lt; width+9 and height-24 &lt; event.y &lt; height-12:
        print "clicked up arrow!"
    elif width-9 &lt; event.x &lt; width+9 and height+12 &lt; event.y &lt; height+24:
        print "clicked down arrow!"
    elif width+12 &lt; event.x &lt; width+25 and height-8 &lt; event.y &lt; height+8:
        print "clicked right arrow!"
    elif width-25 &lt; event.x &lt; width-12 and height-8 &lt; event.y &lt; height+8:
        print "clicked left arrow!"

canvas.bind("&lt;Button-1&gt;", callback)
root.mainloop()
</snippet></ROW><ROW><id>20566141</id><snippet>import operator


def higest_divisors(a, b):
    _ret = {var: len([x for x in range(a, b+1) if not var % x]) for var in range(a, b+1)}.items()
    max = 0
    _to_ret = []
    for n, t in sorted(_ret, key=operator.itemgetter(1))[::-1]:
        if max &lt;= t:
            _to_ret.append(n)
            max = t

    return _to_ret

if __name__ == '__main__':
    print higest_divisors(2, 10)
</snippet></ROW><ROW><id>20566141</id><snippet>from itertools import takewhile
import operator


def highest_divisors(a, b):
    _divisors = sorted({var: len([x for x in range(a, b + 1) if not var % x])
                        for var in range(a, b + 1)}.iteritems(),
                       key=operator.itemgetter(1))[::-1]
    _max = _divisors[0][1]
    return [n for n, v in takewhile(lambda y: y[1] == _max, _divisors)]


if __name__ == '__main__':
    for var in highest_divisors(2, 10):
        print var
</snippet></ROW><ROW><id>20566732</id><snippet>optimize.newton</snippet></ROW><ROW><id>20566732</id><snippet>x0</snippet></ROW><ROW><id>20566732</id><snippet>args</snippet></ROW><ROW><id>20566732</id><snippet>def f(x, y):
    return x * x - 3 + y

def main():
    x0 = .1
    y = 1
    res = optimize.newton(f, x0, args=(y,))
</snippet></ROW><ROW><id>20566829</id><snippet>re.compile(r"M[A-Z]+\*")
</snippet></ROW><ROW><id>20566964</id><snippet>x =[(34, 55), (1, 75), (5, 36), (1, 49), (1, 186), [(3, 47), (131, 167)], (7, 434)]
y= [(77, 98), (109, 183), (77, 108), (1, 49), (1, 185), [(45, 78), (45, 84)], (3, 429)]

tmpl = "\tq: {0}\th: {1}"

for q, h in zip(x, y):
    if isinstance(q, list):
        for q2, h2 in zip(q, h):
            print tmpl.format(q2, h2),
        print
    else:
        print tmpl.format(q, h)
</snippet></ROW><ROW><id>20566978</id><snippet>counter</snippet></ROW><ROW><id>20566978</id><snippet>timeout</snippet></ROW><ROW><id>20566978</id><snippet>start</snippet></ROW><ROW><id>20566978</id><snippet>stop</snippet></ROW><ROW><id>20566978</id><snippet>        #...
        timer1.setInterval(1000)  
        timer1.disconnect()       # removes previous connections
        timer1.timeout.connect(lambda: self.counter(15))
        timer1.start()
        #...
</snippet></ROW><ROW><id>20567123</id><snippet>forward ((int(forward))
#       12   3       32
</snippet></ROW><ROW><id>20567123</id><snippet>forward(int(forward))
#      1   2       21
</snippet></ROW><ROW><id>20567123</id><snippet>right ((int(right))
</snippet></ROW><ROW><id>20567123</id><snippet>left ((int(left))
</snippet></ROW><ROW><id>20567123</id><snippet>turtle</snippet></ROW><ROW><id>20567123</id><snippet>forward = input()
forward(int(forward))
</snippet></ROW><ROW><id>20567123</id><snippet>input()</snippet></ROW><ROW><id>20567123</id><snippet>forward</snippet></ROW><ROW><id>20567123</id><snippet>input()</snippet></ROW><ROW><id>20567123</id><snippet>steps = input()
forward(int(steps))
</snippet></ROW><ROW><id>20567123</id><snippet>print "Want to go forward again?  (y) (n)"
moreForward = input()
if moreForward == y:
    turtleFoward()
</snippet></ROW><ROW><id>20567123</id><snippet>y</snippet></ROW><ROW><id>20567123</id><snippet>'y'</snippet></ROW><ROW><id>20567123</id><snippet>def turtleForward():
    while True:
        steps = input("How far forward do you want to go? ")
        forward(int(steps))
        moreForward = input("Want to go forward again?  (y) (n)")
        if moreForward.lower() != 'y':
            return
</snippet></ROW><ROW><id>20567494</id><snippet>dictionary</snippet></ROW><ROW><id>20567494</id><snippet>arr = {}
for x in xs:
    arr[x.index] = x
</snippet></ROW><ROW><id>20567494</id><snippet>dictionary comprehension</snippet></ROW><ROW><id>20567494</id><snippet>myDict = {x.index:x for x in xs}
</snippet></ROW><ROW><id>20567658</id><snippet>easy_install "..."</snippet></ROW><ROW><id>20567658</id><snippet>C:\python27\Scripts\</snippet></ROW><ROW><id>20567751</id><snippet>chips_bet</snippet></ROW><ROW><id>20567751</id><snippet>try:
    chips_bet = int(raw_input("Place your bet!"))
except ValueError:
    betAmount()
</snippet></ROW><ROW><id>20567751</id><snippet>chips_bet</snippet></ROW><ROW><id>20567751</id><snippet>if 0 &lt;= chips_bet &lt;= chip_count_player1:
</snippet></ROW><ROW><id>20567751</id><snippet>bet = getBet()
...
def getBet(maximum):
    bet = -1
    while (bet &lt; 0) or (bet &gt; maximum):
        try:
            bet = int(raw_input("Place your bet!"))
        except ValueError: pass
    return bet
</snippet></ROW><ROW><id>20567778</id><snippet>print</snippet></ROW><ROW><id>20567778</id><snippet>print "foo"</snippet></ROW><ROW><id>20567778</id><snippet>print("foo")
</snippet></ROW><ROW><id>20567778</id><snippet>import sys
_stdout = sys.stdout

class MyStream(object):
    def __init__(self, target):
        self.target = target

    def write(self, s):
        s = 'Foo : {!r}'.format(s)
        self.target.write(s)
sys.stdout = MyStream(sys.stdout)
print 'Hi'
sys.stdout = _stdout   # return print to its old behavior
</snippet></ROW><ROW><id>20567778</id><snippet>Foo : 'Hi'
</snippet></ROW><ROW><id>20567778</id><snippet>print</snippet></ROW><ROW><id>20567778</id><snippet>print</snippet></ROW><ROW><id>20567778</id><snippet>print</snippet></ROW><ROW><id>20567778</id><snippet>2to3 --write  --fix print test.py
</snippet></ROW><ROW><id>20567778</id><snippet>print</snippet></ROW><ROW><id>20567778</id><snippet>print</snippet></ROW><ROW><id>20567778</id><snippet>print</snippet></ROW><ROW><id>20567778</id><snippet>from __future__ import print_function
import __builtin__

def print(*args, **kwargs): 
    __builtin__.print('Foo:', *args, **kwargs)
print('Hi')
</snippet></ROW><ROW><id>20567778</id><snippet>Foo: Hi
</snippet></ROW><ROW><id>20567984</id><snippet>QTreeView</snippet></ROW><ROW><id>20567984</id><snippet>setModel</snippet></ROW><ROW><id>20567984</id><snippet>QStandardItemModel</snippet></ROW><ROW><id>20567984</id><snippet>QTreeWidget</snippet></ROW><ROW><id>20567984</id><snippet>QTreeView</snippet></ROW><ROW><id>20568181</id><snippet>python-magic</snippet></ROW><ROW><id>20568181</id><snippet>libmagic1</snippet></ROW><ROW><id>20568181</id><snippet>$ apt-cache show python-magic | grep ^Depend
Depends: python (&gt;= 2.7.1-0ubuntu2), python (&lt;&lt; 2.8), libmagic1 (= 5.11-2ubuntu4)
</snippet></ROW><ROW><id>20568181</id><snippet>libmagic1</snippet></ROW><ROW><id>20568181</id><snippet>$ apt-cache show libmagic1 | grep ^Homepage
Homepage: http://www.darwinsys.com/file/
</snippet></ROW><ROW><id>20568238</id><snippet>class Mr(Person):

    @Person.name.setter
    def name(self,value):
        self._name = "Mr. "+value
</snippet></ROW><ROW><id>20568371</id><snippet>def get_user_model():
    "Return the User model that is active in this project"
    from django.conf import settings
    from django.db.models import get_model

    try:
        app_label, model_name = settings.AUTH_USER_MODEL.split('.')
    except ValueError:
        raise ImproperlyConfigured("AUTH_USER_MODEL must be of the form 'app_label.model_name'")
    user_model = get_model(app_label, model_name)
    if user_model is None:
        raise ImproperlyConfigured("AUTH_USER_MODEL refers to model '%s' that has not been installed" % settings.AUTH_USER_MODEL)
    return user_model

(in file: django/contrib/auth/__init__.py)
</snippet></ROW><ROW><id>20568384</id><snippet>,</snippet></ROW><ROW><id>20568384</id><snippet>["rock" "paper", "scissors"]
#      ^
</snippet></ROW><ROW><id>20568384</id><snippet>"rock" "paper"</snippet></ROW><ROW><id>20568384</id><snippet>"rockpaper"</snippet></ROW><ROW><id>20568384</id><snippet>&gt;&gt;&gt; ["rock" "paper", "scissors"]
['rockpaper', 'scissors']
&gt;&gt;&gt;
</snippet></ROW><ROW><id>20568429</id><snippet>grep</snippet></ROW><ROW><id>20568429</id><snippet>$ grep -oP '(?&lt;=\[).*(?=\])' &lt;&lt;&lt; '[string]_someOtherString'
string
</snippet></ROW><ROW><id>20568628</id><snippet>"class %%%(object):\n\tdef __init__(self, ***)"</snippet></ROW><ROW><id>20568628</id><snippet>class %%%(object):
    def __init__(self, ***)
</snippet></ROW><ROW><id>20568628</id><snippet>%%%</snippet></ROW><ROW><id>20568628</id><snippet>***</snippet></ROW><ROW><id>20568628</id><snippet>@@@</snippet></ROW><ROW><id>20568628</id><snippet>result = result.replace("@@@", word, 1)
</snippet></ROW><ROW><id>20568726</id><snippet>p = subprocess.Popen(['grep', '...'], stdin=subprocess.PIPE, 
                                      stdout=subprocess.PIPE)
output, output_err = p.communicate(myfile.read())
</snippet></ROW><ROW><id>20568914</id><snippet>#</snippet></ROW><ROW><id>20568914</id><snippet>#something</snippet></ROW><ROW><id>20568974</id><snippet>random</snippet></ROW><ROW><id>20568974</id><snippet>random.choice</snippet></ROW><ROW><id>20569126</id><snippet>for</snippet></ROW><ROW><id>20569126</id><snippet>with open('/path/to/file.txt') as f:
    for line in f:
        words = re.findall(r'\w+', line)
        # do something with words
</snippet></ROW><ROW><id>20569126</id><snippet>with open('/path/to/file.txt') as f:
    for line in f:
        col1, col2, rest = line.split('\t', 2) # split into 3 columns
        words = re.findall(r'\w+', rest)
        line = '\t'.join(col1, col2, ' '.join(words))
        # do something with words or line
</snippet></ROW><ROW><id>20569190</id><snippet>1.3.0</snippet></ROW><ROW><id>20569190</id><snippet>1.7.1</snippet></ROW><ROW><id>20569190</id><snippet>1.8.0</snippet></ROW><ROW><id>20569190</id><snippet>0.13</snippet></ROW><ROW><id>20569190</id><snippet>0.13</snippet></ROW><ROW><id>20569190</id><snippet>1.3.0</snippet></ROW><ROW><id>20569190</id><snippet>&gt;&gt;&gt; import matplotlib
&gt;&gt;&gt; matplotlib.__version__
'1.3.0'
&gt;&gt;&gt; df.plot()
&lt;matplotlib.axes.AxesSubplot object at 0x04E8B4F0&gt;
&gt;&gt;&gt; plt.show(_)
</snippet></ROW><ROW><id>20569269</id><snippet>@classmethod
def from_crawler(cls, crawler):
    recipients = crawler.settings.getlist('STATUSMAILER_RECIPIENTS')
    if not recipients:
        raise NotConfigured

    mail = MailSender.from_settings(crawler.settings)
    instance = cls(recipients, mail, crawler)

    crawler.signals.connect(instance.item_scraped, signal=signals.item_scraped)
    crawler.signals.connect(instance.spider_error, signal=signals.spider_error)
    crawler.signals.connect(instance.spider_closed, signal=signals.spider_closed)
    crawler.signals.connect(instance.item_dropped, signal=signals.item_dropped)

    return instance
</snippet></ROW><ROW><id>20569269</id><snippet>EXTENSIONS = {
    'your.mailer': 80
}

STATUSMAILER_RECIPIENTS = ["who should get mail"]

MAIL_HOST = '***'
MAIL_PORT = ***
MAIL_USER = '***'
MAIL_PASS = '***'
</snippet></ROW><ROW><id>20569343</id><snippet>emails = re.findall('[^@ ]+@[^@ ]+\.[^@ ]+', stringWithEmails)
</snippet></ROW><ROW><id>20569397</id><snippet>poplib.error_proto</snippet></ROW><ROW><id>20569397</id><snippet>args</snippet></ROW><ROW><id>20569397</id><snippet>p = poplib.POP3('mail.site.com')
try:
    p.user('skillian@site.com')
    p.pass_('badpassword')
except poplib.error_proto as e:
    print(e.args[0].decode('ascii')) # `'ascii'` is not necessary.
</snippet></ROW><ROW><id>20569412</id><snippet>sys.stdout.flush()</snippet></ROW><ROW><id>20569412</id><snippet>#!/usr/local/bin/python
import os
import sys

print("Hello1")
print("Hello2")
sys.stdout.flush()
os.system("/python/cppprog.o")
print("Bye1")
print("Bye2")
</snippet></ROW><ROW><id>20569412</id><snippet>]# python script.py &gt; o.txt
]# cat o.txt
Hello1
Hello2
Hello, world!
Bye1
Bye2
</snippet></ROW><ROW><id>20569432</id><snippet>([A-Z ]){6,}                                        
([A-Z ]){6,}
</snippet></ROW><ROW><id>20569432</id><snippet>import re

reg = re.compile( "[A-Z ]{6,}[A-Z ]{6,}")
string = "...˜ÃÕ=òaãNÜ ß§#üxwáã MESSAGE HIDDEN IN HERE ŸÎ=N‰çÈ^XvU…”vN˜..."

print reg.findall(string)
</snippet></ROW><ROW><id>20569432</id><snippet>[' MESSAGE HIDDEN IN HERE ']
</snippet></ROW><ROW><id>20569706</id><snippet>import TheRules</snippet></ROW><ROW><id>20569706</id><snippet>TheRules</snippet></ROW><ROW><id>20569706</id><snippet>from TheRules import ruleTable</snippet></ROW><ROW><id>20569706</id><snippet>ruleTable</snippet></ROW><ROW><id>20569706</id><snippet>TheRules.ruleTable</snippet></ROW><ROW><id>20569793</id><snippet>deepcopy</snippet></ROW><ROW><id>20570066</id><snippet>super(myClass, self)</snippet></ROW><ROW><id>20570066</id><snippet>myClass</snippet></ROW><ROW><id>20570066</id><snippet>myClass</snippet></ROW><ROW><id>20570066</id><snippet>Decorator</snippet></ROW><ROW><id>20570066</id><snippet>__init__</snippet></ROW><ROW><id>20570066</id><snippet>Decorator</snippet></ROW><ROW><id>20570066</id><snippet>myClass</snippet></ROW><ROW><id>20570066</id><snippet>super(myClass, self).__init__()</snippet></ROW><ROW><id>20570066</id><snippet>myClass</snippet></ROW><ROW><id>20570066</id><snippet>Decorator</snippet></ROW><ROW><id>20570066</id><snippet>super()</snippet></ROW><ROW><id>20570066</id><snippet>@decorator
class myClass(unittest.TestCase):
    def __init__(self, *args, **kwargs):
        unittest.TestCase.__init__(self, *args, **kwargs)
        self.test = 'test'
</snippet></ROW><ROW><id>20570066</id><snippet>super()</snippet></ROW><ROW><id>20570066</id><snippet>__class__</snippet></ROW><ROW><id>20570066</id><snippet>myClass.__init__()</snippet></ROW><ROW><id>20570066</id><snippet>myClass</snippet></ROW><ROW><id>20570231</id><snippet>/</snippet></ROW><ROW><id>20570231</id><snippet>from __future__ import division</snippet></ROW><ROW><id>20570231</id><snippet>x//y</snippet></ROW><ROW><id>20570231</id><snippet>&gt;&gt;&gt; 9/7
1
&gt;&gt;&gt; -9/7
-2
&gt;&gt;&gt; from __future__ import division
&gt;&gt;&gt; 9/7
1.2857142857142858
&gt;&gt;&gt; -9/7
-1.2857142857142858
</snippet></ROW><ROW><id>20570290</id><snippet>m = b &lt; 6 
b[m] = np.where(b[m]&lt; a,b[m],a)
</snippet></ROW><ROW><id>20570378</id><snippet>board = [[0] * 10] * 10
</snippet></ROW><ROW><id>20570378</id><snippet>board = [[0 for _ in range(10)] for _ in range(10)]
</snippet></ROW><ROW><id>20570401</id><snippet>self.naturalLanguageString = naturalLanguageString or self.__class__.__name__
</snippet></ROW><ROW><id>20570696</id><snippet>-i</snippet></ROW><ROW><id>20570696</id><snippet>python -i test.py
</snippet></ROW><ROW><id>20570715</id><snippet>@property</snippet></ROW><ROW><id>20570715</id><snippet>class MClass():

    def __init__(self):
        self.x = 2

    @property
    def y(self):
        return 5 * self.x

    #here a plus method for the setter
    @y.setter
    def y(self,value):
        self.x = y/5   

    @property    
    def z(self):
        return self.x * self.x 
</snippet></ROW><ROW><id>20570843</id><snippet>  import requests, time
  url = 'www.something.com/nextstep'
  headers = {'Content-Type': 'application/x-www-form-urlencoded'}
  values = {'action' : 'fetch', 'number' : '1'}
  r = requests.post(url, data=values, headers=headers)
  uuid = r.json()['uuid']       

  time.sleep(1)
  values = {'action':'solve', 'number':1, 'uuid':''}
  url = 'www.something.com/anothernextstep'
  r = requests.post(url, data=values, headers=headers)
</snippet></ROW><ROW><id>20570868</id><snippet>get_all_regions()</snippet></ROW><ROW><id>20570868</id><snippet>RegionInfo</snippet></ROW><ROW><id>20570868</id><snippet>RegionInfo</snippet></ROW><ROW><id>20570868</id><snippet>SQSConnection</snippet></ROW><ROW><id>20570868</id><snippet>NoSuchVersion</snippet></ROW><ROW><id>20570868</id><snippet>import boto.sqs

sqs = boto.sqs.connect_to_region('eu-west-1')
sqs.get_all_queues()
</snippet></ROW><ROW><id>20570868</id><snippet>import boto.ec2

ec2 = boto.ec2.connect_to_region('eu-west-1')
</snippet></ROW><ROW><id>20571063</id><snippet>#!/usr/bin/python3

infile = open('columnfile','r')

title = ""
scaf = set()
scafs = []
for lines in infile:
    lines = lines.split()
    if lines[0] != title:
        title = lines[0]
        scafs.append(scaf)
        scaf = set()
        scaf.add(lines[1])
    else:
        scaf.add(lines[1])

scafs.append(scafs)
del scafs[0]
del scafs[-1]

infile.close()

def consolidate(sets):
    setlist = [s for s in sets if s]
    for i, s1 in enumerate(setlist):
        if s1:
            for s2 in setlist[i+1:]:
                intersection = s1.intersection(s2)
                if intersection:
                    s2.update(s1)
                    s1.clear()
                    s1 = s2
    return [s for s in setlist if s]


for i in consolidate(scafs):
    for a in i:
        print(a)
    print("---")
</snippet></ROW><ROW><id>20571234</id><snippet>index = random.randrange(len(names) - 1)
</snippet></ROW><ROW><id>20571234</id><snippet>names[index]</snippet></ROW><ROW><id>20571234</id><snippet>names[index + 1]</snippet></ROW><ROW><id>20571234</id><snippet>print('I picked: {}'.format(names[index]))
nextname = input('Who is next?')
if nextname == names[index + 1]:
    print('Correct! It is indeed {}'.format(names[index + 1]))
</snippet></ROW><ROW><id>20571234</id><snippet>indices = list(range(len(names) - 1))
random.shuffle(indices)
for index in indices:
    print('I picked: {}'.format(names[index]))
    nextname = input('Who is next?')
    if nextname == names[index + 1]:
        print('Correct! It is indeed {}'.format(names[index + 1]))
</snippet></ROW><ROW><id>20571234</id><snippet>random.shuffle()</snippet></ROW><ROW><id>20571293</id><snippet>request.user.groups.filter(name__in=['onetime','monthtime']).exists()
</snippet></ROW><ROW><id>20571331</id><snippet>def run(block: Unit =&gt; Unit) = {
  println("entering run")
  block()
  println("exiting run")
}

def block() = println("I'm block")

run(block)
// entering run
// I'm block
// exiting run
</snippet></ROW><ROW><id>20571331</id><snippet>def run(f: Int =&gt; Int) {
  println("before call: 1, after call " + f(1))
}

def f(x: Int) = x + 1
run(f)
// before call: 1, after call 2
</snippet></ROW><ROW><id>20571963</id><snippet>&gt;&gt;&gt; df
first        bar                 baz                 foo
second       one       two       one       two       one       two
1       0.085930 -0.848468  0.911572 -0.705026 -1.284458 -0.602760
2       0.385054  2.539314  0.589164  0.765126  0.210199 -0.481789
3      -0.352475 -0.975200 -0.403591  0.975707  0.533924 -0.195430
</snippet></ROW><ROW><id>20571963</id><snippet>'one'</snippet></ROW><ROW><id>20571963</id><snippet>&gt;&gt;&gt; one = df.xs('one', level=1, axis=1)
&gt;&gt;&gt; one
first       bar       baz       foo
1      0.085930  0.911572 -1.284458
2      0.385054  0.589164  0.210199
3     -0.352475 -0.403591  0.533924    

&gt;&gt;&gt; pyplot.show(one.plot())
</snippet></ROW><ROW><id>20572070</id><snippet>df.index[ df.one.isnull( ) ][ 0 ]
</snippet></ROW><ROW><id>20572070</id><snippet>null</snippet></ROW><ROW><id>20572070</id><snippet>"one"</snippet></ROW><ROW><id>20572070</id><snippet>gen = ( idx for idx in df.index if np.isnan( df.one[ idx ] ) )
</snippet></ROW><ROW><id>20572070</id><snippet>gen.__next__()</snippet></ROW><ROW><id>20572085</id><snippet>responce = urllib2.urlopen('http://address.co/download')
assert responce.getcode() == 200
</snippet></ROW><ROW><id>20572568</id><snippet>np.vectorize</snippet></ROW><ROW><id>20572568</id><snippet>do_avg = np.vectorize(np.average)
data_2d = do_avg(data)
</snippet></ROW><ROW><id>20573253</id><snippet>begin</snippet></ROW><ROW><id>20573253</id><snippet>end</snippet></ROW><ROW><id>20573253</id><snippet>calitem = [x for x in self.appointments.filter("begin &gt;= ", start).filter("begin &lt;= " end) if x.end &lt;= end]
</snippet></ROW><ROW><id>20573372</id><snippet>xml</snippet></ROW><ROW><id>20573372</id><snippet>import xml.etree.ElementTree as ET

root = ET.parse('a.xml').getroot()

for node in root.iterfind(".//{http://www.epo.org/exchange}classification-scheme[@scheme='CPC']/.."):
    data = []
    for d in node.getchildren():
        if d.text:
            data.append(d.text)
    print ' '.join(data)
</snippet></ROW><ROW><id>20573396</id><snippet>cur.execute('''SELECT ?, ?
                    FROM OsuOrgs
                    WHERE ORG_LEVEL= ? ''', 
                    [ on_level, parent_level, x ])
</snippet></ROW><ROW><id>20573396</id><snippet>cur.execute('''SELECT {0}, {1} 
                    FROM OsuOrgs
                    WHERE ORG_LEVEL= ? '''.format(on_level, parent_level), 
                    x )
</snippet></ROW><ROW><id>20573697</id><snippet>itertools.combinations</snippet></ROW><ROW><id>20573697</id><snippet>&gt;&gt;&gt; from itertools import combinations
&gt;&gt;&gt; lst = [1, 2, 3]
&gt;&gt;&gt; list(combinations(lst, 2))
[(1, 2), (1, 3), (2, 3)]
&gt;&gt;&gt; [list(x) for x in combinations(lst, 2)]
[[1, 2], [1, 3], [2, 3]]
&gt;&gt;&gt;
</snippet></ROW><ROW><id>20573831</id><snippet>y</snippet></ROW><ROW><id>20573831</id><snippet>z</snippet></ROW><ROW><id>20573831</id><snippet>y</snippet></ROW><ROW><id>20573831</id><snippet>z = list(y)
</snippet></ROW><ROW><id>20573831</id><snippet>z = y[:]
</snippet></ROW><ROW><id>20574036</id><snippet>.ebextensions/&lt;env-name&gt;.config</snippet></ROW><ROW><id>20574036</id><snippet>option_settings:
  "aws:elasticbeanstalk:container:python":
    WSGIPath: myApp/handlers/views.py
</snippet></ROW><ROW><id>20574064</id><snippet>def quickSortHelper(alist,first,last):
    if first&lt;last:

        splitpoint = partition(alist,first,last)

        quickSortHelper(alist,first,splitpoint-1)  # Calls itself here
        quickSortHelper(alist,splitpoint+1,last)   # and here
</snippet></ROW><ROW><id>20574460</id><snippet>&gt;&gt;&gt; df_asint = df.astype(int)
&gt;&gt;&gt; coocc = df_asint.T.dot(df_asint)
&gt;&gt;&gt; coocc
       Dop  Snack  Trans
Dop      4      2      3
Snack    2      3      2
Trans    3      2      4
</snippet></ROW><ROW><id>20574460</id><snippet>fill_diagonal</snippet></ROW><ROW><id>20574460</id><snippet>&gt;&gt;&gt; import numpy as np
&gt;&gt;&gt; np.fill_diagonal(coocc.values, 0)
&gt;&gt;&gt; coocc
       Dop  Snack  Trans
Dop      0      2      3
Snack    2      0      2
Trans    3      2      0
</snippet></ROW><ROW><id>20574753</id><snippet>flask_util_js</snippet></ROW><ROW><id>20575275</id><snippet>result_queue</snippet></ROW><ROW><id>20575275</id><snippet>            result_queue.put(None)
</snippet></ROW><ROW><id>20575275</id><snippet>eat_queue()</snippet></ROW><ROW><id>20575275</id><snippet>count = 0
while count &lt; workers_num:
    if result_queue.get() is None:
        count += 1
</snippet></ROW><ROW><id>20575275</id><snippet>.join()</snippet></ROW><ROW><id>20575275</id><snippet>while True:
    try:
        job = job_queue.get(block=False)
        if job == None:
            print(proc_name + " DONE")
            return
        result_queue.put(execute(job))
    except Queue.Empty:
        pass
</snippet></ROW><ROW><id>20575275</id><snippet>get()</snippet></ROW><ROW><id>20575275</id><snippet>.get()</snippet></ROW><ROW><id>20575275</id><snippet>while True:
    job = job_queue.get()
    if job is None:
        print(proc_name + " DONE")
        break
    else:
        result_queue.put(execute(job))
result_queue.put(None)
</snippet></ROW><ROW><id>20575275</id><snippet>Queue</snippet></ROW><ROW><id>20575275</id><snippet>Queue</snippet></ROW><ROW><id>20575275</id><snippet>    job_queue = mp.Queue(maxsize=10*workers_num)
                         ^^^^^^^^^^^^^^^^^^^^^^^
</snippet></ROW><ROW><id>20575275</id><snippet>job_queue.put(some_work_item)</snippet></ROW><ROW><id>20575302</id><snippet>class Person(object):
    def __init__(self):
        self.firstName = None
        self.lastName = None
        self.age = None
</snippet></ROW><ROW><id>20575302</id><snippet>class Person(object):
    def __init__(self, firstName, lastName, age):
        self.firstName = firstName
        self.lastName = lastName
        self.age = None

person = Person('Peter', 'Smith', 21)
</snippet></ROW><ROW><id>20575302</id><snippet>person = Person(firstName='Peter', lastName='Smith', age=21)
</snippet></ROW><ROW><id>20575302</id><snippet>Person</snippet></ROW><ROW><id>20575302</id><snippet>def __str__(self):
    return ' '.join([self.firstName, self.lastName])
</snippet></ROW><ROW><id>20575302</id><snippet>person = Person(firstName='Peter', lastName='Smith', age=21)
print(person)
</snippet></ROW><ROW><id>20575790</id><snippet>enum.ignore(cppStyleComment)</snippet></ROW><ROW><id>20575790</id><snippet>from pyparsing import *
# sample string with enums and other stuff
sample = '''
    stuff before
    enum hello {
        Zero,
        One,
        Two,
        Three,
        Five=5,
        Six,
        Ten=10,
        minusone=-1,
        par1 = ((0,5)),
        par2 = sizeof("a\\")bc};,"),
        par3 = (')')
        };
    in the middle
    enum
        {
        alpha,
        beta,
        gamma = 10 ,
        zeta = 50
        };
    at the end
    '''

# syntax we don't want to see in the final parse tree
LBRACE,RBRACE,EQ,COMMA = map(Suppress,"{}=,")


lpar  = Literal( "(" )
rpar  = Literal( ")" )
anything_topl = Regex(r"[^'\"(,}]+")
anything      = Regex(r"[^'\"()]+")

expr = Forward()
pths_or_str = quotedString | lpar + expr + rpar
expr &lt;&lt;     ZeroOrMore( pths_or_str | anything )
expr_topl = ZeroOrMore( pths_or_str | anything_topl )

_enum = Suppress('enum')
identifier = Word(alphas,alphanums+'_')
expr_topl_text = originalTextFor(expr_topl)
enumValue = Group(identifier('name') + Optional(EQ + expr_topl_text('value')))
enumList = Group(ZeroOrMore(enumValue + COMMA) + Optional(enumValue) )
enum = _enum + Optional(identifier('enum')) + LBRACE + enumList('names') + RBRACE
enum.ignore(cppStyleComment)

# find instances of enums ignoring other syntax
for item,start,stop in enum.scanString(sample):
    for entry in item.names:
        print('%s %s = %s' % (item.enum,entry.name, entry.value))
</snippet></ROW><ROW><id>20575790</id><snippet>$ python examples/cpp_enum_parser.py
hello Zero =
hello One =
hello Two =
hello Three =
hello Five = 5
hello Six =
hello Ten = 10
hello minusone = -1
hello par1 = ((0,5))
hello par2 = sizeof("a\")bc};,")
hello par3 = (')')
 alpha =
 beta =
 gamma = 10
 zeta = 50
</snippet></ROW><ROW><id>20575812</id><snippet>&gt;&gt;&gt; mystr = 'abcde'
&gt;&gt;&gt; mystr[1:] # Remove the first
'bcde'
&gt;&gt;&gt; mystr[1:-1] # Remove the first and the last
'bcd'
&gt;&gt;&gt; mystr[2:-2] # Remove the first two and the last two
'c'
&gt;&gt;&gt;
</snippet></ROW><ROW><id>20575877</id><snippet>python ./manage.py shell</snippet></ROW><ROW><id>20575877</id><snippet>&gt;&gt;&gt; import django
&gt;&gt;&gt; django.VERSION
</snippet></ROW><ROW><id>20575877</id><snippet>migrate</snippet></ROW><ROW><id>20575877</id><snippet>South</snippet></ROW><ROW><id>20575905</id><snippet>join</snippet></ROW><ROW><id>20575905</id><snippet>activeCount</snippet></ROW><ROW><id>20575905</id><snippet>threads = []
for dev in run_list:
    proc = threading.Thread(target=go, args=[dev])
    proc.start()
    threads.append(proc)

for proc in threads:
    proc.join()
</snippet></ROW><ROW><id>20575980</id><snippet>pop from empty stack</snippet></ROW><ROW><id>20575980</id><snippet>ParseError: multiple elements on top level</snippet></ROW><ROW><id>20576003</id><snippet>ln -s /usr/local/opt/freetype/include/freetype2 /usr/local/include/freetype
</snippet></ROW><ROW><id>20576019</id><snippet>k</snippet></ROW><ROW><id>20576019</id><snippet>k_updated</snippet></ROW><ROW><id>20576019</id><snippet>k</snippet></ROW><ROW><id>20576019</id><snippet>k_updated</snippet></ROW><ROW><id>20576019</id><snippet>k</snippet></ROW><ROW><id>20576019</id><snippet>k_updated</snippet></ROW><ROW><id>20576019</id><snippet>k</snippet></ROW><ROW><id>20576019</id><snippet>k_updated</snippet></ROW><ROW><id>20576052</id><snippet> The output was: Error: no display specified\n' 
</snippet></ROW><ROW><id>20576117</id><snippet>rows = soup.findAll("table",{"id":"cos"})[0].findAll('tr')
records = []
for tr in rows:
  cols = tr.findAll('td')
  record = ''
  for td in cols:
    if record != '': record = record + ', '
    record = record + td.contents[0]
  records.append(record + "\n")
</snippet></ROW><ROW><id>20576313</id><snippet>&gt;&gt;&gt; import shlex, subprocess
&gt;&gt;&gt; command_line = raw_input()
/bin/vikings -input eggs.txt -output "spam spam.txt" -cmd "echo '$MONEY'"
&gt;&gt;&gt; args = shlex.split(command_line)
&gt;&gt;&gt; print args
['/bin/vikings', '-input', 'eggs.txt', '-output', 'spam spam.txt', '-cmd', "echo '$MONEY'"]
&gt;&gt;&gt; p = subprocess.Popen(args) # Success!
</snippet></ROW><ROW><id>20576313</id><snippet>&gt;&gt;&gt; import shlex, subprocess
&gt;&gt;&gt; url = 'http://www.example.com/somepage.html?foo=spam&amp;bar=eggs&amp;baz=ni'
&gt;&gt;&gt; cmd = 'wget --verbose --auth-no-challenge --no-check-certificate -O res ' + url
&gt;&gt;&gt; args = shlex.split(cmd)
&gt;&gt;&gt; p = subprocess.Popen(args)
&gt;&gt;&gt; --2013-12-13 13:36:11--  http://www.example.com/somepage.html?foo=spam&amp;bar=eggs&amp;baz=ni
</snippet></ROW><ROW><id>20576452</id><snippet>max</snippet></ROW><ROW><id>20576452</id><snippet>N</snippet></ROW><ROW><id>20576452</id><snippet>max</snippet></ROW><ROW><id>20576452</id><snippet>N = 500
X = np.arange(2,N)

def k_loop(w,n):
    K = np.arange(0, w+1)
    return (binom(w,K)*(binom(w,K)/2**w)**(float(n)/np.log(n))).sum()

def w_loop(n):
    v = [binom(n,w)*k_loop(w,n) for w in range(1,n+1)]
    return sum(v)

Y = [w_loop(n) for n in X]
</snippet></ROW><ROW><id>20576452</id><snippet>N=300</snippet></ROW><ROW><id>20576452</id><snippet>3.932s</snippet></ROW><ROW><id>20576452</id><snippet>81.645s</snippet></ROW><ROW><id>20576452</id><snippet>N=500</snippet></ROW><ROW><id>20576452</id><snippet>semilogx</snippet></ROW><ROW><id>20576470</id><snippet>def draw_circle(win, c=None):
    x=random.randint(0,450)
    y=random.randint(0,450)

    if c is None:
        centa=Point(x,y)
        c = Circle(centa,50)
        c.setFill(color_rgb(200,0,0))
        c.draw(win)
    else:
        p1 = c.p1
        x_dif = (p1.x - x) * -1
        y_dif = (p1.y - y) * -1
        c.move(x_dif, y_dif)
    return (c, x, y)
</snippet></ROW><ROW><id>20576470</id><snippet>newX = (x1-x2) * -1</snippet></ROW><ROW><id>20576470</id><snippet>newY = (y1-y2) * -1</snippet></ROW><ROW><id>20576470</id><snippet>def main():
    win= GraphWin("lab12",500,500)
    score=0
    c,x,y = draw_circle(win)
    while score &lt; 10:
        mouseClick2=win.getMouse()
        if mouseClick2.y &gt;= y-50 and mouseClick2.y &lt;= y +50 and mouseClick2.x &gt;= x-50 and mouseClick2.x &lt;= x+50:
            score=score + random.randint(0,5)
        c,x,y = draw_circle(win, c)

    print "you won"
    print "your final score is, {0}".format(score)
</snippet></ROW><ROW><id>20576470</id><snippet>unpack</snippet></ROW><ROW><id>20576470</id><snippet>x,y,z = 5,10,20  # works
x,y = 5,10,20    # does not work
x,y,z = 5,10     # does not work
</snippet></ROW><ROW><id>20576625</id><snippet>/usr/bin/python</snippet></ROW><ROW><id>20576625</id><snippet>/usr/local/bin/python</snippet></ROW><ROW><id>20576625</id><snippet>bq</snippet></ROW><ROW><id>20576625</id><snippet>/usr/bin/python</snippet></ROW><ROW><id>20576625</id><snippet>/usr/local/bin/python</snippet></ROW><ROW><id>20576625</id><snippet>/usr/local/bin/python</snippet></ROW><ROW><id>20576625</id><snippet>/usr/bin/python</snippet></ROW><ROW><id>20576625</id><snippet>/usr/bin/python</snippet></ROW><ROW><id>20576625</id><snippet>print sys.path</snippet></ROW><ROW><id>20576625</id><snippet>py2app</snippet></ROW><ROW><id>20576734</id><snippet>df['date'].apply(lambda x: x.toordinal())
</snippet></ROW><ROW><id>20576910</id><snippet>data.txt</snippet></ROW><ROW><id>20576910</id><snippet>data.txt</snippet></ROW><ROW><id>20576910</id><snippet>open("/home/foo/data.txt")</snippet></ROW><ROW><id>20576910</id><snippet>tags</snippet></ROW><ROW><id>20576910</id><snippet>xml</snippet></ROW><ROW><id>20576910</id><snippet>with open("data.txt") as data:</snippet></ROW><ROW><id>20576910</id><snippet>&lt;/{0:s)&gt;</snippet></ROW><ROW><id>20576910</id><snippet>tags = ['name', 'university', 'gpa', 'sat']  #Add desired
xml = '' #Add xml parsing

with open("data.txt") as data:

    #read data and filter out whitespace
    lines = [line.strip() for line in data.readlines()]

    #Generating xml tags via slicing
    xml = '\n'.join(['&lt;{0:s}&gt; {1:s} &lt;/{0:s}&gt;'.format(tag, value)
                     for tag, value in zip(tags, lines)])

print xml
</snippet></ROW><ROW><id>20576910</id><snippet>&lt;name&gt; John Smith &lt;/name&gt;
&lt;university&gt; Harvard &lt;/university&gt;
&lt;gpa&gt; 4.00 &lt;/gpa&gt;
&lt;sat&gt; 1600 &lt;/sat&gt;
</snippet></ROW><ROW><id>20576910</id><snippet>applicant</snippet></ROW><ROW><id>20576910</id><snippet>import os
print os.getcwd()
</snippet></ROW><ROW><id>20576910</id><snippet>import sys
filename = sys.argv[1]
</snippet></ROW><ROW><id>20576910</id><snippet>python generate.py data.txt</snippet></ROW><ROW><id>20576910</id><snippet>data.txt</snippet></ROW><ROW><id>20576910</id><snippet>dataCode(fileName)</snippet></ROW><ROW><id>20576910</id><snippet>.py</snippet></ROW><ROW><id>20576910</id><snippet>dataCode(fileName)</snippet></ROW><ROW><id>20576910</id><snippet>def dataCode(fileName):
    # ...
    with open(fileName) as data
        # ...
</snippet></ROW><ROW><id>20577053</id><snippet>&gt;&gt;&gt; my_array[0,:,:]
array([[1, 1, 1, ..., 1, 1, 1],
       [1, 1, 1, ..., 1, 1, 1],
       [1, 1, 1, ..., 1, 1, 1],
       ...,
       [1, 1, 1, ..., 1, 1, 1],
       [1, 1, 1, ..., 1, 1, 1],
       [1, 1, 1, ..., 1, 1, 1]])
&gt;&gt;&gt; my_array[0,:,:].shape
(500, 500)
</snippet></ROW><ROW><id>20577216</id><snippet>map(lambda x: min(map(min, x)), zip(*a))
</snippet></ROW><ROW><id>20577294</id><snippet>float('-inf')</snippet></ROW><ROW><id>20577294</id><snippet>0</snippet></ROW><ROW><id>20577294</id><snippet>cmp()</snippet></ROW><ROW><id>20577294</id><snippet>float('-inf')</snippet></ROW><ROW><id>20577294</id><snippet>0</snippet></ROW><ROW><id>20577294</id><snippet>0</snippet></ROW><ROW><id>20577294</id><snippet>float('-inf')</snippet></ROW><ROW><id>20577294</id><snippet>cmp()</snippet></ROW><ROW><id>20577294</id><snippet>1</snippet></ROW><ROW><id>20577294</id><snippet>cmp()</snippet></ROW><ROW><id>20577294</id><snippet>x &lt; y</snippet></ROW><ROW><id>20577294</id><snippet>x == y</snippet></ROW><ROW><id>20577294</id><snippet>x &gt; y</snippet></ROW><ROW><id>20577294</id><snippet>&gt;&gt;&gt; cmp(0, -1)
1
</snippet></ROW><ROW><id>20577330</id><snippet>def print_template(a,b):
    c="the c"
    template="{a} {b} {c}"
    print template.format(**vars())
</snippet></ROW><ROW><id>20577330</id><snippet>&gt;&gt;&gt; print_template(1,2)
1 2 the c
</snippet></ROW><ROW><id>20577332</id><snippet>import msvcrt, time
i = 0
while True:
    i = i + 1
    if msvcrt.kbhit():
        if msvcrt.getwche() == '\r':
            break
    time.sleep(0.1)
print(i)
</snippet></ROW><ROW><id>20577359</id><snippet>class MyContextManager(object):
    def __init__(self, data):
        self.data = data

    def __call__(self):
        print 'foo'

    def __enter__(self):
        print "entering... (data=%s)" % self.data
        # this will be bound to the name after the 'as' clause 
        return self

    def __exit__(self, exc_type, exc_value, traceback):
        print "exiting... (data=%s)" % self.data

with MyContextManager('bar') as manager:
    print "before"
    manager()
    print "after"
</snippet></ROW><ROW><id>20577359</id><snippet>entering... (data=bar)
before
foo
after
exiting... (data=bar)
</snippet></ROW><ROW><id>20577359</id><snippet>contextlib</snippet></ROW><ROW><id>20577444</id><snippet>$ easy_install pip
$ pip install virtualenv
$ pip install virtualenvwrapper
</snippet></ROW><ROW><id>20577444</id><snippet>$ mkvirtualenv myenv
$ pip install django
</snippet></ROW><ROW><id>20577562</id><snippet>from BaseHTTPServer import HTTPServer, BaseHTTPRequestHandler
import os

class MyHandler(BaseHTTPRequestHandler):
    def do_GET(self):
        global running
        if self.path == '/':
            self.list_files()
        elif self.path.startswith('/calculation'):
            self.send_calculation()
        elif self.path.startswith('/quit'):
            self.send_response(200)
            running = False
        else:
            self.send_file(self.path[1:])

    def do_POST(self):
        filename = self.path[1:] # Remove the / from the path
        filesize = int(self.headers['Content-Length'])
        contents = self.rfile.read(filesize)

        with open(filename, 'w') as f:
            f.write(contents.decode())

        self.send_response(200)

    def send_file(self, filename):
        # Check to see if file exists and is a file, not directory
        if os.path.isfile(filename):
            self.send_response(200)
            self.send_header('Content-Type', 'text/plain')
            self.end_headers()

            # Read and send the contents of the file
            with open(filename) as f:
                contents = f.read()
            self.wfile.write(contents)
        else:
            self.send_response(404)
            self.send_header('Content-Type', 'text/plain')
            self.end_headers()
            self.wfile.write('Dude! File not found')

    def send_calculation(self):
        empty, operation, number1, number2 = self.path.split('/')
        result = int(number1) + int(number2)
        self.send_response(200)
        self.send_header('Content-Type', 'text/plain')
        self.end_headers()
        self.wfile.write(result)

    def list_files(self):
        file_list = os.listdir(os.curdir)
        if file_list:
            self.send_response(200)
            self.send_header('Content-Type', 'text/plain')
            self.end_headers()
            for filename in file_list:
                self.wfile.write('{}\n'.format(filename))

#
# Main
#
running = True
server = HTTPServer(('', 9000), MyHandler)
print 'Server started on host:{}, port:{}'.format(*server.server_address)
while running:
    server.handle_request()
</snippet></ROW><ROW><id>20577562</id><snippet>import urllib2
import urlparse

def make_url(server, port, path, scheme='http'):
    netloc = '{}:{}'.format(server, port)
    url = urlparse.urlunsplit((scheme, netloc, path, '', ''))
    return url

#
# Main
#
server = '10.0.0.5'
port = 9000

# 1 - Request directory listing
url = make_url(server, port, '/')
file_list = urllib2.urlopen(url).read()
print 'Files from server:'
for filename in file_list.splitlines():
    print '- {}'.format(filename)

# 2 - Request contents of a file
filename = raw_input('Type a file name: ')
url = make_url(server, port, filename)
contents = urllib2.urlopen(url).read()
print 'Contents:'
print contents

# 3 - Upload a file to the server
contents = 'hello, world.\nThe End'
filename = 'foo.txt'
url = make_url(server, port, filename)
f = urllib2.urlopen(url, data=contents)

# 4 - Do some calculation
n1 = 19
n2 = 5
path = '/calculation/{}/{}'.format(n1, n2)
url = make_url(server, port, path)
result = int(urllib2.urlopen(url).read())
print '{} + {} = {}'.format(n1, n2, result)

# Send quit signal

url = make_url(server, port, '/quit')
urllib2.urlopen(url).read()
</snippet></ROW><ROW><id>20577562</id><snippet>GET http://server:port/
</snippet></ROW><ROW><id>20577562</id><snippet>GET http://server:port/filename
</snippet></ROW><ROW><id>20577562</id><snippet>POST http://server:port/filename
</snippet></ROW><ROW><id>20577562</id><snippet>GET http://server:port/calculation/x/y
</snippet></ROW><ROW><id>20577562</id><snippet>GET http://server:port/quit
</snippet></ROW><ROW><id>20577562</id><snippet>http://192.168.1.5:900/  
</snippet></ROW><ROW><id>20577562</id><snippet>do_GET()</snippet></ROW><ROW><id>20577562</id><snippet>do_POST()</snippet></ROW><ROW><id>20577579</id><snippet>output</snippet></ROW><ROW><id>20577579</id><snippet>output_dict = {}
lldp_entries = output.split("\n")

for entry in lldp_entries:
    path, value = entry.strip().split("=", 1)
    path = path.split(".")
    path_components, final = path[:-1], path[-1]

    current_dict = output_dict
    for path_component in path_components:
        current_dict[path_component] = current_dict.get(path_component, {})
        current_dict = current_dict[path_component]
    current_dict[final] = value
</snippet></ROW><ROW><id>20577608</id><snippet>callback</snippet></ROW><ROW><id>20577608</id><snippet>AsyncResult</snippet></ROW><ROW><id>20577608</id><snippet>dict</snippet></ROW><ROW><id>20577608</id><snippet>def in_parallel(funcs):
    results = {}
    pool = mp.Pool()
    for func in funcs:
        results[func] = pool.apply_async(func)
    pool.close()
    pool.join()
    return {func: result.get() for func, result in results.items()}
</snippet></ROW><ROW><id>20577608</id><snippet>def in_parallel(funcs):
    results = {}
    pool = mp.Pool()
    for func in funcs:
        def callback(result, func=func):
            results[func] = result
        pool.apply_async(func, callback=callback)
    pool.close()
    pool.join()
    return results
</snippet></ROW><ROW><id>20577608</id><snippet>imap_unordered</snippet></ROW><ROW><id>20577608</id><snippet>pool = mp.Pool()
results = list(pool.imap_unordered(foo_pool, range(10)))
pool.close()
pool.join()
</snippet></ROW><ROW><id>20577608</id><snippet>imap</snippet></ROW><ROW><id>20577608</id><snippet>map</snippet></ROW><ROW><id>20577608</id><snippet>pool = mp.Pool()
results = pool.map(foo_pool, range(10))
pool.close()
pool.join()
</snippet></ROW><ROW><id>20577608</id><snippet>map</snippet></ROW><ROW><id>20577608</id><snippet>concurrent.futures</snippet></ROW><ROW><id>20577608</id><snippet>multiprocessing</snippet></ROW><ROW><id>20577608</id><snippet>AsyncResult</snippet></ROW><ROW><id>20577608</id><snippet>callback</snippet></ROW><ROW><id>20577608</id><snippet>map</snippet></ROW><ROW><id>20577608</id><snippet>def number_and_square(x):
    return x, square(x)
</snippet></ROW><ROW><id>20577608</id><snippet>apply_async(number_and_square)</snippet></ROW><ROW><id>20577608</id><snippet>square</snippet></ROW><ROW><id>20577629</id><snippet>def get_items(s):
    s_coo = s.tocoo()
    return set(zip(s_coo.row, s_coo.col))
</snippet></ROW><ROW><id>20577629</id><snippet>&gt;&gt;&gt; n = 100
&gt;&gt;&gt; s = scipy.sparse.lil_matrix((n,n),dtype=int)
&gt;&gt;&gt; s[10, 12] = 1
&gt;&gt;&gt; (10, 12) in get_items(s)
True
</snippet></ROW><ROW><id>20577629</id><snippet>&gt;&gt;&gt; s = scipy.sparse.csr_matrix((n,n),dtype=int)
&gt;&gt;&gt; s[12, 14] = 0
&gt;&gt;&gt; (12, 14) in get_items(s)
True
</snippet></ROW><ROW><id>20577658</id><snippet>tkinter.Tk.after</snippet></ROW><ROW><id>20577658</id><snippet>from tkinter import Tk

root = Tk()

def afterstartup():
    print("hello")

# The number here is how many milliseconds to wait
root.after(1000, afterstartup)

root.mainloop()
</snippet></ROW><ROW><id>20577658</id><snippet>hello</snippet></ROW><ROW><id>20577778</id><snippet>a = numpy.array([1,2,3,0])
b = numpy.array([0,1,2,3])
a[..., None] == b[None, ...]
</snippet></ROW><ROW><id>20577778</id><snippet>&gt;&gt;&gt; a[..., None] == b[None, ...]
array([[False,  True, False, False],
       [False, False,  True, False],
       [False, False, False,  True],
       [ True, False, False, False]], dtype=bool)
</snippet></ROW><ROW><id>20577779</id><snippet>locale.setlocale(locale.LC_TIME, '')
</snippet></ROW><ROW><id>20577804</id><snippet>x = r.json()['data']['avg']['display_short']
</snippet></ROW><ROW><id>20577876</id><snippet>d</snippet></ROW><ROW><id>20577876</id><snippet>e</snippet></ROW><ROW><id>20577876</id><snippet>OrderedDict</snippet></ROW><ROW><id>20577876</id><snippet>from collections import OrderedDict
d = { '123': { 'key1': 3, 'key2': 11, 'key3': 3 },
      '124': { 'key1': 6, 'key2': 56, 'key3': 6 },
      '125': { 'key1': 7, 'key2': 44, 'key3': 9 },
    }
d_ascending = OrderedDict(sorted(d.items(), key=lambda kv: kv[1]['key3']))
d_descending = OrderedDict(sorted(d.items(), 
                                  key=lambda kv: kv[1]['key3'], reverse=True))
</snippet></ROW><ROW><id>20577876</id><snippet>d</snippet></ROW><ROW><id>20577876</id><snippet>d_ascending</snippet></ROW><ROW><id>20577876</id><snippet>d</snippet></ROW><ROW><id>20577876</id><snippet>d_ascending</snippet></ROW><ROW><id>20577876</id><snippet>e</snippet></ROW><ROW><id>20577876</id><snippet>e</snippet></ROW><ROW><id>20577876</id><snippet>d</snippet></ROW><ROW><id>20577876</id><snippet>for key, value in sorted(d.items(), key=lambda kv: kv[1]['key3'], reverse=True):
    do_something_with(key, value)
</snippet></ROW><ROW><id>20577876</id><snippet>OrderedDict</snippet></ROW><ROW><id>20577876</id><snippet>OrderedDict</snippet></ROW><ROW><id>20578044</id><snippet>ast.literal_eval</snippet></ROW><ROW><id>20578044</id><snippet>null</snippet></ROW><ROW><id>20578044</id><snippet>true</snippet></ROW><ROW><id>20578044</id><snippet>false</snippet></ROW><ROW><id>20578044</id><snippet>None</snippet></ROW><ROW><id>20578044</id><snippet>True</snippet></ROW><ROW><id>20578044</id><snippet>False</snippet></ROW><ROW><id>20578044</id><snippet>json.loads</snippet></ROW><ROW><id>20578044</id><snippet>import json
doc_dict = json.loads(view_doc_response)
first_id = doc_dict['entries'][0]['id']  # with your data, should be 12079500908
</snippet></ROW><ROW><id>20578044</id><snippet>...</snippet></ROW><ROW><id>20578044</id><snippet>...</snippet></ROW><ROW><id>20578070</id><snippet>&amp;numwant=0
</snippet></ROW><ROW><id>20578089</id><snippet>detail_link = tables.LinkColumn('detail', args=[A('id')], verbose_name='Detail', empty_values=())
</snippet></ROW><ROW><id>20578089</id><snippet>render</snippet></ROW><ROW><id>20578089</id><snippet>Event</snippet></ROW><ROW><id>20578089</id><snippet>detail_link</snippet></ROW><ROW><id>20578134</id><snippet>[&lt;expression&gt; for x in list1 for y in list2]
</snippet></ROW><ROW><id>20578134</id><snippet>y in x</snippet></ROW><ROW><id>20578134</id><snippet>any</snippet></ROW><ROW><id>20578134</id><snippet>return any([y in x for x in list1 for y in list2])
</snippet></ROW><ROW><id>20578134</id><snippet>return any(y in x for x in list1 for y in list2)
</snippet></ROW><ROW><id>20578134</id><snippet>itertools.product</snippet></ROW><ROW><id>20578134</id><snippet>return any(y in x for x, y in product(list1, list2))
</snippet></ROW><ROW><id>20578331</id><snippet>reader = csv.reader(open('somefile.txt'), delimter='\t')
</snippet></ROW><ROW><id>20578331</id><snippet>writer = csv.writer(open('somefile.txt', 'w'), delimter='\t')
</snippet></ROW><ROW><id>20578409</id><snippet>size</snippet></ROW><ROW><id>20578409</id><snippet>&lt;RootWidget&gt;:
    BoxLayout:
        size: root.size # this line was missing
        orientation: "vertical"
        # ...
</snippet></ROW><ROW><id>20578417</id><snippet>setup.py</snippet></ROW><ROW><id>20578417</id><snippet>"-r requirements.txt"</snippet></ROW><ROW><id>20578417</id><snippet>setup.py</snippet></ROW><ROW><id>20578417</id><snippet>install_requires</snippet></ROW><ROW><id>20578417</id><snippet>setup.py</snippet></ROW><ROW><id>20578432</id><snippet>from matplotlib import pyplot as plt
import numpy as np

matrix = np.random.rand(100, 200)
matrix[30, 50] = 5.0
matrix[80, 150] = 5.0

plt.imshow(matrix, cmap = cm.Greys_r)

ax = plt.gca()

x,y = numpy.array([[50, 150], [30, 80]])
line = plt.Line2D(x, y, lw=5., color='r', alpha=0.4)
line.set_clip_on(False)
ax.add_line(line)

plt.show()
</snippet></ROW><ROW><id>20578504</id><snippet>proc.join(timeout)</snippet></ROW><ROW><id>20578504</id><snippet>proc.terminate()</snippet></ROW><ROW><id>20578504</id><snippet>proc.is_alive()</snippet></ROW><ROW><id>20578504</id><snippet>Process</snippet></ROW><ROW><id>20578504</id><snippet>Pool</snippet></ROW><ROW><id>20578504</id><snippet>ProcessPoolExecutor</snippet></ROW><ROW><id>20578504</id><snippet>AsyncResult</snippet></ROW><ROW><id>20578504</id><snippet>future</snippet></ROW><ROW><id>20578504</id><snippet>terminate</snippet></ROW><ROW><id>20578512</id><snippet>from scrapy.conf import settings


class MySpider(SOMESPIDER):

    def __init__(self):
        ......
        settings.overrides['DEPTH_LIMIT'] = 3
        ......
</snippet></ROW><ROW><id>20578632</id><snippet>sys.settrace</snippet></ROW><ROW><id>20578632</id><snippet>import sys

def get_locals(func):
    def wrap(*args, **kw):
        sys.settrace(tracefunc)
        try:
            res = func(*args, **kw)
        finally:
            sys.settrace(None)
        return res

    def tracefunc(frame, event, arg):
        if event == "return":
            if frame.f_code is func.func_code:
                wrap.last_res = frame.f_locals
        return tracefunc    

    return wrap

@get_locals
def foo(x,y):
    z = x + y
    return z

def bar(x, y):
    z = x - y
    return z

a = 1
b = 2
c = foo(a, b)
d = bar(a, b)

print foo.last_res
</snippet></ROW><ROW><id>20578632</id><snippet>{'y': 2, 'x': 1, 'z': 3}
</snippet></ROW><ROW><id>20578785</id><snippet>href</snippet></ROW><ROW><id>20578785</id><snippet>&lt;a&gt;</snippet></ROW><ROW><id>20578786</id><snippet>E702 multiple statements on one line (semicolon)
</snippet></ROW><ROW><id>20578786</id><snippet>global</snippet></ROW><ROW><id>20578786</id><snippet>global commento, Template, disambigPage, commenttodisambig
</snippet></ROW><ROW><id>20578786</id><snippet>global comment
global Template
global disambigPage
global commenttodisambig
</snippet></ROW><ROW><id>20578786</id><snippet>pep8</snippet></ROW><ROW><id>20578786</id><snippet>$ pep8 --show-source --show-pep8 script.py
peppy.py:1:16: E702 multiple statements on one line (semicolon)
global commento; global Template; global disambigPage; global commenttodisambig
                                                     ^
    Compound statements (multiple statements on the same line) are
    generally discouraged.

    While sometimes it's okay to put an if/for/while with a small body
    on the same line, never do this for multi-clause statements. Also
    avoid folding such long lines!

    Okay: if foo == 'blah':\n    do_blah_thing()
    Okay: do_one()
    Okay: do_two()
    Okay: do_three()

    E701: if foo == 'blah': do_blah_thing()
    E701: for x in lst: total += x
    E701: while t &lt; 10: t = delay()
    E701: if foo == 'blah': do_blah_thing()
    E701: else: do_non_blah_thing()
    E701: try: something()
    E701: finally: cleanup()
    E701: if foo == 'blah': one(); two(); three()

    E702: do_one(); do_two(); do_three()
    E703: do_four();  # useless semicolon
</snippet></ROW><ROW><id>20578790</id><snippet>self</snippet></ROW><ROW><id>20578790</id><snippet>self.response.out.write</snippet></ROW><ROW><id>20578790</id><snippet>self</snippet></ROW><ROW><id>20578790</id><snippet>self.response.out.write</snippet></ROW><ROW><id>20578790</id><snippet>def i_write_a_lot(self):
    alias = self.response.out.write
    alias("stuff")
    alias("more stuff")
    alias("yet more stuff")
</snippet></ROW><ROW><id>20578790</id><snippet>property</snippet></ROW><ROW><id>20578790</id><snippet>@property
def alias(self):
    return self.response.out.write

def method1(self):
    self.alias("stuff")

def method2(self):
    self.alias("other stuff")
</snippet></ROW><ROW><id>20578897</id><snippet>dict</snippet></ROW><ROW><id>20578897</id><snippet>objs</snippet></ROW><ROW><id>20578897</id><snippet>import itertools as it
keys = sorted(objs.keys(), key=lambda k: objs[k]) # Make sure `objs` with the same value be arranged next to each other
groups = it.groupby(keys, lambda k: d[k]) # so that we can group them by value
match_list = [list(keys) for v, keys in groups]
</snippet></ROW><ROW><id>20578931</id><snippet>thread1 = threading.Thread(target = ping)
thread2 = threading.Thread(target = network_waiting)
thread1.start()
thread2.start()
</snippet></ROW><ROW><id>20578931</id><snippet>network</snippet></ROW><ROW><id>20578931</id><snippet>import urllib2, time, threading
network = '?'
def ping():
  global network
  try:
      urllib2.urlopen("http://www.google.com")
      network = 1
  except IOError:
      network = 0

def network_waiting():
  global network
  while network == '?':
      print "\r[*] Checking network availability.... \ ",
      time.sleep(.07)
      print "\r[*] Checking network availability.... |",
      time.sleep(.07)
      print "\r[*] Checking network availability.... /",
      time.sleep(.07)
      print "\r[*] Checking network availability.... -",
      time.sleep(.07)

thread1 = threading.Thread(target = ping) 
thread2 = threading.Thread(target = network_waiting)

thread1.start()
thread2.start() 
</snippet></ROW><ROW><id>20578931</id><snippet>global</snippet></ROW><ROW><id>20578931</id><snippet>ping</snippet></ROW><ROW><id>20578931</id><snippet>network</snippet></ROW><ROW><id>20578931</id><snippet>network</snippet></ROW><ROW><id>20578944</id><snippet>except</snippet></ROW><ROW><id>20578944</id><snippet>TypeError</snippet></ROW><ROW><id>20578944</id><snippet>assert (callable(dist_fun))
</snippet></ROW><ROW><id>20579014</id><snippet>for x, y in "a,b".split(",")
</snippet></ROW><ROW><id>20579014</id><snippet>"a,b".split(",")</snippet></ROW><ROW><id>20579014</id><snippet>'a'</snippet></ROW><ROW><id>20579014</id><snippet>'b'</snippet></ROW><ROW><id>20579014</id><snippet>&gt;&gt;&gt; "a,b".split(",")
['a', 'b']
&gt;&gt;&gt;
</snippet></ROW><ROW><id>20579014</id><snippet>&gt;&gt;&gt; "ax,by".split(",")
['ax', 'by']
&gt;&gt;&gt; [(x,y) for x, y in "ax,by".split(",")]
[('a', 'x'), ('b', 'y')]
&gt;&gt;&gt;
</snippet></ROW><ROW><id>20579014</id><snippet>"ax,by".split(",")</snippet></ROW><ROW><id>20579014</id><snippet>for x, y in</snippet></ROW><ROW><id>20579014</id><snippet>&gt;&gt;&gt; ("a,b".split(","),)
(['a', 'b'],)
&gt;&gt;&gt; [(x,y) for x, y in ("a,b".split(","),)]
[('a', 'b')]
&gt;&gt;&gt;
</snippet></ROW><ROW><id>20579014</id><snippet>("a,b".split(","),)</snippet></ROW><ROW><id>20579014</id><snippet>for x, y in</snippet></ROW><ROW><id>20579014</id><snippet>[(x, y) for line in lines.split() for x, y in (line.split(','),)]
</snippet></ROW><ROW><id>20579115</id><snippet>spider_closed</snippet></ROW><ROW><id>20579115</id><snippet>def close_spider(self, spider):
</snippet></ROW><ROW><id>20579261</id><snippet>...
{% for post in posts %}
    &lt;div class="art"&gt;&lt;img src="img?img_={{post.key()}}" class="art" width="500"&gt;&lt;/img&gt;&lt;/div&gt;
    &lt;div class="art_title"&gt;{{post.title}}&lt;/div&gt;
...
</snippet></ROW><ROW><id>20579261</id><snippet>post.key</snippet></ROW><ROW><id>20579261</id><snippet>{{post.key()}}</snippet></ROW><ROW><id>20579471</id><snippet>...
if x == dims[1] - len(message) - 1:
    horizontal = -1
...
</snippet></ROW><ROW><id>20579549</id><snippet>translate</snippet></ROW><ROW><id>20579549</id><snippet>import string

transtab = string.maketrans(string.uppercase, '*'*len(string.uppercase))
"aBCd3Fg".translate(transtab)

&gt;&gt;&gt;'a**d3*g'
</snippet></ROW><ROW><id>20579563</id><snippet>__metaclass__</snippet></ROW><ROW><id>20579563</id><snippet>__getattribute__</snippet></ROW><ROW><id>20579928</id><snippet>def select(request):
    ...
    request.session['access_token'] = str(response['access_token'])
    ...

def final(request):
    access_token = request.session['access_token']
    ...
</snippet></ROW><ROW><id>20579976</id><snippet>clicks += 1</snippet></ROW><ROW><id>20579976</id><snippet>clicks</snippet></ROW><ROW><id>20579976</id><snippet>Label.config(text=...)</snippet></ROW><ROW><id>20579976</id><snippet>Label['text'] = ...</snippet></ROW><ROW><id>20579976</id><snippet>def click():
    global clicks
    clicks += 1
    Number.config(text=clicks) # &lt;------
    print 'ok', clicks
</snippet></ROW><ROW><id>20580032</id><snippet>django.utils.functional.__proxy__</snippet></ROW><ROW><id>20580032</id><snippet>message</snippet></ROW><ROW><id>20580032</id><snippet>ugettext_lazy</snippet></ROW><ROW><id>20580032</id><snippet>", ".join(unicode(e) for e in errors)</snippet></ROW><ROW><id>20580133</id><snippet>def asynchronous():
    threads = [Greenlet.spawn(fetch, i) for i in range(10)]
    result = gevent.joinall(threads)
    print [thread.value for thread in threads]
</snippet></ROW><ROW><id>20580262</id><snippet>list_editable</snippet></ROW><ROW><id>20580262</id><snippet>order</snippet></ROW><ROW><id>20580262</id><snippet>rebuld</snippet></ROW><ROW><id>20580262</id><snippet>Category.tree.rebuild()</snippet></ROW><ROW><id>20580433</id><snippet>posts = Post.objects.all().order_by('-id')
</snippet></ROW><ROW><id>20580496</id><snippet>import re
from BeautifulSoup import BeautifulSoup

html= '''
&lt;table id="cos" width="500" cellpadding="3" cellspacing="0" border="1"&gt;
  &lt;tr&gt;
    &lt;th&gt;Company Name&lt;/th&gt;
    &lt;th&gt;CIK Number&lt;/th&gt;
    &lt;th&gt;SIC Code&lt;/th&gt;
  &lt;/tr&gt;
  &lt;tr valign="top"&gt;
    &lt;td&gt;A CONSULTING TEAM INC&lt;/td&gt;
    &lt;td align="right"&gt;1040792&lt;/td&gt;
    &lt;td align="right"&gt;7380&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr valign="top"&gt;
    &lt;td&gt;A J&amp;J PHARMA CORP&lt;/td&gt;
    &lt;td align="right"&gt;1140452&lt;/td&gt;
    &lt;td align="right"&gt;9995&lt;/td&gt;
  &lt;/tr&gt;
&lt;/table&gt;
'''

soup = BeautifulSoup(html)
table = soup.find("table", {"id":"cos"})
td = table.find('td', text='A J&amp;J PHARMA CORP')
# ^ This return text node, not td.
print(td.parent.parent.findAll('td')[1].string)
</snippet></ROW><ROW><id>20580496</id><snippet>1140452
</snippet></ROW><ROW><id>20580684</id><snippet>text</snippet></ROW><ROW><id>20580684</id><snippet>str.split</snippet></ROW><ROW><id>20580684</id><snippet>list.extend</snippet></ROW><ROW><id>20580684</id><snippet>the</snippet></ROW><ROW><id>20580684</id><snippet>&gt;&gt;&gt; nltk.Text(['the world The words']).count('the')
0
&gt;&gt;&gt; nltk.Text(['the', 'world', 'The', 'words']).count('the')
1
</snippet></ROW><ROW><id>20580684</id><snippet>import csv
import nltk

tweet = []

for t in csv.DictReader(open('test.csv'), delimiter=','):
    tweet.extend(t['text'].lower().split()) # &lt;-----------

tweet_text = nltk.Text(tweet)
print tweet_text.count('the')
</snippet></ROW><ROW><id>20580706</id><snippet>gevent.monkey.patch_socket()
</snippet></ROW><ROW><id>20580706</id><snippet>gevent.monkey.patch_all()
</snippet></ROW><ROW><id>20580706</id><snippet>gevent.monkey.patch_socket()
gevent.monkey.patch_ssl()
</snippet></ROW><ROW><id>20580828</id><snippet>functions = ['sum', 'id', 'str', 'list']
modules = ['random', 'numpy', 'scipy', 'os']
methods = ['some_other_stuff']

answer = dict()
answer['functions'] = functions
answer['modules'] = modules
answer['methods'] = methods

while True:
    choice = raw_input('Choose between functions, methods, or modules: ')
    if choice in answer.keys(): # ['functions', 'modules', 'methods']
        print answer[choice]
</snippet></ROW><ROW><id>20580957</id><snippet>urllib2.urlopen()</snippet></ROW><ROW><id>20580957</id><snippet>threading.Thread()</snippet></ROW><ROW><id>20580957</id><snippet>from threading import Thread

def open_website(url):
    return urllib2.urlopen(url)

Thread(target=open_website, args=["http://google.com"])
</snippet></ROW><ROW><id>20580957</id><snippet>import requests import async

async.get("http://google.com")
</snippet></ROW><ROW><id>20580957</id><snippet>from restclient import GET

res = GET("http://google.com", async=True, resp=True)
</snippet></ROW><ROW><id>20581014</id><snippet>GET</snippet></ROW><ROW><id>20581014</id><snippet>POST</snippet></ROW><ROW><id>20581014</id><snippet>class AjaxApp(Flask or Blueprint):

    def ajax_route(self, rule, **options):
        def decorator(f):
            @functools.wraps(f)
            def wrapper(*args, **kwargs):
                if request.method == 'POST':
                    return f(*args, **kwargs)
                return render_template("masterPage.html")

            endpoint = options.pop('endpoint', None)
            methods = options.pop('methods', ['GET', 'POST'])
            self.add_url_rule(rule, endpoint, wrapper, methods=methods, **options)
            return wrapper
        return decorator
</snippet></ROW><ROW><id>20581014</id><snippet>X-Requested-With</snippet></ROW><ROW><id>20581014</id><snippet>class AjaxApp(Flask or Blueprint):

    def ajax_route(self, rule, **options):
        def decorator(f):
            @functools.wraps(f)
            def wrapper(*args, **kwargs):
                if request.headers.get('X-Requested-With') == 'XMLHttpRequest':
                    return f(*args, **kwargs)
                return render_template("masterPage.html")

            endpoint = options.pop('endpoint', None)
            self.add_url_rule(rule, endpoint, wrapper, **options)
            return wrapper
        return decorator
</snippet></ROW><ROW><id>20581014</id><snippet>ajax_route</snippet></ROW><ROW><id>20581014</id><snippet>class AjaxBlueprint(Blueprint):
    def route(self, rule, **options):
        # one of examples

ajax = AjaxBlueprint('ajax', __name__)

@ajax.route('/main.html')
def main():
    return render_template('main.html')

app.register_blueprint(ajax)
</snippet></ROW><ROW><id>20581014</id><snippet>route</snippet></ROW><ROW><id>20581212</id><snippet>amount = 0 # Used to increment your inv value
for eachKey in stock:
# Iterate through your stock, pulling values for each item you have
    try:
        amount += stock[eachKey]*prices[eachKey]
        # Try to add your total inventory price for the current iteration
        # to your total, but if that item in your stock has no price set...
    except KeyError as e:
        print("Your item {} has no price!".format(eachKey))
        # Let you know that there's no price for this item
print("Your total inventory has value ${:.2f}".format(amount))
# Print out your total inventory value
</snippet></ROW><ROW><id>20581841</id><snippet>def largest_prime_factor(n):
    largest = None

    for i in range(2, n):
        while n % i == 0:
            largest = i
            n //= i

        if n == 1:
            return largest

    if n &gt; 1:
        return n
</snippet></ROW><ROW><id>20581919</id><snippet>'error' : e.message,
</snippet></ROW><ROW><id>20581919</id><snippet>'error' : e,
</snippet></ROW><ROW><id>20582063</id><snippet>Form XObjects</snippet></ROW><ROW><id>20582063</id><snippet>Form XObjects</snippet></ROW><ROW><id>20582063</id><snippet>pdftk multipage.pdf background template.pdf output multipage+.pdf
</snippet></ROW><ROW><id>20582063</id><snippet>Form XObjects</snippet></ROW><ROW><id>20582063</id><snippet>Form XObject</snippet></ROW><ROW><id>20582063</id><snippet>gs -sDEVICE=pdfwrite -o 100_pages_template.pdf \
-c '[/_objdef {background} /BBox [0 0 595 841] /BP pdfmark 
save /showpage {} def 
0 0 translate       % adjust according to EPS BBox 
(template.eps) run 
restore 
[/EP pdfmark 
1 1 100 { 
  [{background} /SP pdfmark 
  showpage 
} for'
</snippet></ROW><ROW><id>20582063</id><snippet>use strict;
use warnings;
use PDF::API2;

my $pdf = PDF::API2-&gt;new();
my $tmpl = PDF::API2-&gt;open('template.pdf');
my $xo = $pdf-&gt;importPageIntoForm($tmpl, 1);
for (1..100) {
    my $page = $pdf-&gt;page();
    my $gfx = $page-&gt;gfx();
    $gfx-&gt;formimage($xo, 0, 0);

   # add page specific content

}
$pdf-&gt;saveas('out.pdf');
</snippet></ROW><ROW><id>20582140</id><snippet>def get_mode():
    mode=raw_input('Welcome to Learning Helpmate BETA. Select mode, insert number of wanted mode: \n 1.mode \n 2.mode \n 3.mode\n')
    return mode

mode=get_mode()

while mode != '0':
    if mode =='1':
        print 'Welcome to mode 1'
        mode=get_mode()

    if mode =='2':
        print 'Welcome to mode 2'
        mode=get_mode()

    if mode =='3':
        print 'Welcome to mode 3'
        mode=get_mode()
</snippet></ROW><ROW><id>20582584</id><snippet>str</snippet></ROW><ROW><id>20582584</id><snippet>hashlib.sha1()</snippet></ROW><ROW><id>20582621</id><snippet>test</snippet></ROW><ROW><id>20582621</id><snippet>test.test</snippet></ROW><ROW><id>20582621</id><snippet>test/test.py</snippet></ROW><ROW><id>20582621</id><snippet>testpackage/__main__.py</snippet></ROW><ROW><id>20582621</id><snippet>~/Desktop</snippet></ROW><ROW><id>20582621</id><snippet>python -m testpackage</snippet></ROW><ROW><id>20582621</id><snippet>$ ls testpackage/
__init__.py   __main__.py   __pycache__   controller.py
$ cat testpackage/controller.py 
class Controller:
    def __init__(self):
        pass

$ cat testpackage/__init__.py 
# -*- coding: utf-8 -*-

$ cat testpackage/__main__.py 
from .controller import Controller
if __name__ == '__main__':
    print('running...')

$ python3.3 -m testpackage
running...
</snippet></ROW><ROW><id>20582621</id><snippet>test</snippet></ROW><ROW><id>20582776</id><snippet>comma variable</snippet></ROW><ROW><id>20582776</id><snippet>as</snippet></ROW><ROW><id>20582776</id><snippet>except Exception, e:
</snippet></ROW><ROW><id>20582776</id><snippet>except Exception as e:
</snippet></ROW><ROW><id>20582776</id><snippet>except (NameError, ValueError) as e:
</snippet></ROW><ROW><id>20582845</id><snippet>abs()</snippet></ROW><ROW><id>20582845</id><snippet>if abs(a - b) &gt; 5:
</snippet></ROW><ROW><id>20582845</id><snippet>&gt;&gt;&gt; a, b = 10, 5
&gt;&gt;&gt; abs(a - b)
5
&gt;&gt;&gt; a, b = 5, 10
&gt;&gt;&gt; abs(a - b)
5
</snippet></ROW><ROW><id>20582917</id><snippet>KEYUP</snippet></ROW><ROW><id>20582917</id><snippet>elif event.type == KEYUP:
</snippet></ROW><ROW><id>20582917</id><snippet>elif event.type == KEYDOWN:
</snippet></ROW><ROW><id>20582917</id><snippet>pygame.key.set_repeat(1, 30)
</snippet></ROW><ROW><id>20582989</id><snippet>a, b = [1, 2], [2, 3]

def func():
    a, b = b, a

import dis
dis.dis(func)
</snippet></ROW><ROW><id>20582989</id><snippet>  4           0 LOAD_FAST                0 (b)
              3 LOAD_FAST                1 (a)
              6 ROT_TWO             
              7 STORE_FAST               1 (a)
             10 STORE_FAST               0 (b)
             13 LOAD_CONST               0 (None)
             16 RETURN_VALUE
</snippet></ROW><ROW><id>20582989</id><snippet>b</snippet></ROW><ROW><id>20582989</id><snippet>a</snippet></ROW><ROW><id>20582989</id><snippet>LOAD_FAST</snippet></ROW><ROW><id>20582989</id><snippet>a</snippet></ROW><ROW><id>20582989</id><snippet>b</snippet></ROW><ROW><id>20582989</id><snippet>ROT_TWO</snippet></ROW><ROW><id>20582989</id><snippet>b</snippet></ROW><ROW><id>20582989</id><snippet>a</snippet></ROW><ROW><id>20582989</id><snippet>a</snippet></ROW><ROW><id>20582989</id><snippet>b</snippet></ROW><ROW><id>20582989</id><snippet>STORE_FAST</snippet></ROW><ROW><id>20582989</id><snippet>a, b, c, d = [1, 2], [2, 3], [4, 5], [5, 6]

def func():
    a, b, c, d  = d, c, b, a

import dis
dis.dis(func)
</snippet></ROW><ROW><id>20582989</id><snippet>  4           0 LOAD_FAST                0 (d)
              3 LOAD_FAST                1 (c)
              6 LOAD_FAST                2 (b)
              9 LOAD_FAST                3 (a)
             12 BUILD_TUPLE              4
             15 UNPACK_SEQUENCE          4
             18 STORE_FAST               3 (a)
             21 STORE_FAST               2 (b)
             24 STORE_FAST               1 (c)
             27 STORE_FAST               0 (d)
             30 LOAD_CONST               0 (None)
             33 RETURN_VALUE
</snippet></ROW><ROW><id>20583090</id><snippet>.cgi</snippet></ROW><ROW><id>20583090</id><snippet>ScriptAlias /cgi-bin/ /usr/local/apache2/cgi-bin/
</snippet></ROW><ROW><id>20583090</id><snippet>#!/usr/bin/env python

print "Contnt-Type: text/html"
print
print "Hello World!"
</snippet></ROW><ROW><id>20583090</id><snippet>#!/usr/bin/env python

from wsgi2cgi import CGI

from circuits.web import Server
from circuits.web.wsgi import Gateway


def app(environ, start_response):
    wrapper = CGI("hello.cgi")
    return wrapper.application(environ, start_response)


server = Server(("0.0.0.0", 5000))
Gateway({"/": app}).register(server)
server.run()
</snippet></ROW><ROW><id>20583090</id><snippet>$ curl -q -o - http://localhost:5000/
Hello World!
</snippet></ROW><ROW><id>20583383</id><snippet># approach 1: pattern for "generic smiley"
eyes, noses, mouths = r":;8BX=", r"-~'^", r")(/\|DP"
pattern1 = "[%s][%s]?[%s]" % tuple(map(re.escape, [eyes, noses, mouths]))

# approach 2: disjunction of a list of smileys
smileys = """:-) :) :o) :] :3 :c) :&gt; =] 8) =) :} :^) 
             :D 8-D 8D x-D xD X-D XD =-D =D =-3 =3 B^D""".split()
pattern2 = "|".join(map(re.escape, smileys))

text = "bla bla bla :-/ more text 8^P and another smiley =-D even more text"
print re.findall(pattern1, text)
</snippet></ROW><ROW><id>20583383</id><snippet>18^P</snippet></ROW><ROW><id>20583383</id><snippet>=^_^=</snippet></ROW><ROW><id>20583405</id><snippet>import struct
from cStringIO import StringIO


def get_image_info(data):
    """
    Return (content_type, width, height) for a given img file content
    no requirements
    """
    data = str(data)
    size = len(data)
    height = -1
    width = -1
    content_type = ''

    # handle GIFs
    if (size &gt;= 10) and data[:6] in ('GIF87a', 'GIF89a'):
        # Check to see if content_type is correct
        content_type = 'image/gif'
        w, h = struct.unpack("&lt;HH", data[6:10])
        width = int(w)
        height = int(h)

    # See PNG 2. Edition spec (http://www.w3.org/TR/PNG/)
    # Bytes 0-7 are below, 4-byte chunk length, then 'IHDR'
    # and finally the 4-byte width, height
    elif ((size &gt;= 24) and data.startswith('\211PNG\r\n\032\n')
          and (data[12:16] == 'IHDR')):
        content_type = 'image/png'
        w, h = struct.unpack("&gt;LL", data[16:24])
        width = int(w)
        height = int(h)

    # Maybe this is for an older PNG version.
    elif (size &gt;= 16) and data.startswith('\211PNG\r\n\032\n'):
        # Check to see if we have the right content type
        content_type = 'image/png'
        w, h = struct.unpack("&gt;LL", data[8:16])
        width = int(w)
        height = int(h)

    # handle JPEGs
    elif (size &gt;= 2) and data.startswith('\377\330'):
        content_type = 'image/jpeg'
        jpeg = StringIO(data)
        jpeg.read(2)
        b = jpeg.read(1)
        try:
            while (b and ord(b) != 0xDA):
                while (ord(b) != 0xFF): b = jpeg.read
                while (ord(b) == 0xFF): b = jpeg.read(1)
                if (ord(b) &gt;= 0xC0 and ord(b) &lt;= 0xC3):
                    jpeg.read(3)
                    h, w = struct.unpack("&gt;HH", jpeg.read(4))
                    break
                else:
                    jpeg.read(int(struct.unpack("&gt;H", jpeg.read(2))[0])-2)
                b = jpeg.read(1)
            width = int(w)
            height = int(h)
        except struct.error:
            pass
        except ValueError:
            pass

    return content_type, width, height
</snippet></ROW><ROW><id>20583584</id><snippet>c[0] += [2]</snippet></ROW><ROW><id>20583584</id><snippet>import operator
x = c[0]
x = operator.iadd(x, [2])
c[0] = x
</snippet></ROW><ROW><id>20583584</id><snippet>c[0]</snippet></ROW><ROW><id>20583584</id><snippet>c[0]</snippet></ROW><ROW><id>20583584</id><snippet>[2]</snippet></ROW><ROW><id>20583584</id><snippet>[1]</snippet></ROW><ROW><id>20583584</id><snippet>[1, 2]</snippet></ROW><ROW><id>20583584</id><snippet>[1, 2]</snippet></ROW><ROW><id>20583584</id><snippet>c[0]</snippet></ROW><ROW><id>20583584</id><snippet>TypeError</snippet></ROW><ROW><id>20583640</id><snippet>pydoc selenium.webdriver.remote.webelement.WebElement</snippet></ROW><ROW><id>20583640</id><snippet> |  text
 |      Gets the text of the element.
</snippet></ROW><ROW><id>20583640</id><snippet>.text</snippet></ROW><ROW><id>20583922</id><snippet>&gt;&gt;&gt; import matplotlib
&gt;&gt;&gt; matplotlib.matplotlib_fname()
'/usr/lib64/python2.7/site-packages/matplotlib/mpl-data/matplotlibrc'
</snippet></ROW><ROW><id>20583922</id><snippet>TkAgg</snippet></ROW><ROW><id>20583922</id><snippet>Agg</snippet></ROW><ROW><id>20583922</id><snippet>import matplotlib
matplotlib.use("Agg")  # or whichever backend you wish to use
</snippet></ROW><ROW><id>20584059</id><snippet>import re
n = 1

with open("script.txt","r") as my_file:
  my_list = []
  for line in my_file.readlines():
    if not re.search(r"(.*)(.txt)",line):
      my_list.append(line)
      with open("output"+str(n)+".txt","w") as out_file:
        for item in my_list:
          out_file.write(item)
    else:
      if my_list:
        my_list=[]
        n += 1
</snippet></ROW><ROW><id>20584059</id><snippet>$ cat output1.txt
forw l1tt DeleteULPhCH 0
forw l1tt activate 1
forw l1tt DeleteCCB 0 1 0
forw l1tt DeleteDLPhCH 0

$ cat output2.txt
forw l1tt setuecontext 100
forw l1tt DeleteCCB 65 1 0
</snippet></ROW><ROW><id>20584158</id><snippet>try:
    from functools import singledispatch
except ImportError:
    from singledispatch import singledispatch

@singledispatch
def build_struct(decl):
    # Don't know how to do the generic version
    return

@build_struct.register(TypeDecl)
def build_struct_typedecl(decl):
    return build_struct(decl.type)

@build_struct.register(IdentifierType)
def build_struct_identifier(decl)
    return " ".join(decl.names)

@build_struct.register(ID)
def build_struct_id(decl)
    return ['ID', decl.name]

# etc.
</snippet></ROW><ROW><id>20584158</id><snippet>build_struct</snippet></ROW><ROW><id>20584187</id><snippet>import os

direc = os.getcwd() # Get current working directory
ext = '.txt' # Select your file delimiter

file_dict = {} # Create an empty dict

# Select only files with the ext extension
txt_files = [i for i in os.listdir(direc) if os.path.splitext(i)[1] == ext]

# Iterate over your txt files
for f in txt_files:
    # Open them and assign them to file_dict
    with open(os.path.join(direc,f)) as file_object:
        file_dict[f] = file_object.read()

# Iterate over your dict and print the key/val pairs.
for i in file_dict:
    print i, file_dict[i]
</snippet></ROW><ROW><id>20584219</id><snippet>stdin</snippet></ROW><ROW><id>20584219</id><snippet>stdout</snippet></ROW><ROW><id>20584219</id><snippet>print()</snippet></ROW><ROW><id>20584219</id><snippet>BufferedIOBase</snippet></ROW><ROW><id>20584219</id><snippet>.buffer</snippet></ROW><ROW><id>20584219</id><snippet>from sys import stdin, stdout

try:
    bytes_stdin, bytes_stdout = stdin.buffer, stdout.buffer
except AttributeError:
    bytes_stdin, bytes_stdout = stdin, stdout

def main():
    for line in bytes_stdin:
        try:
            fields = line.split(b'"', 6)
            bytes_stdout.write(fields[5] + b'\n')
        except IndexError:
            pass

if __name__ == '__main__':
    main()
</snippet></ROW><ROW><id>20584219</id><snippet>stdout.write()</snippet></ROW><ROW><id>20584219</id><snippet>print()</snippet></ROW><ROW><id>20584219</id><snippet>stdout</snippet></ROW><ROW><id>20584219</id><snippet>TextIOBase</snippet></ROW><ROW><id>20584219</id><snippet>.split()</snippet></ROW><ROW><id>20584219</id><snippet>b'"'</snippet></ROW><ROW><id>20584219</id><snippet>b'\n'</snippet></ROW><ROW><id>20584219</id><snippet>print()</snippet></ROW><ROW><id>20584219</id><snippet>b</snippet></ROW><ROW><id>20584312</id><snippet>in</snippet></ROW><ROW><id>20584312</id><snippet>if key in dict:
</snippet></ROW><ROW><id>20584312</id><snippet>result = [train_dict.get(test[sample], predictions[sample]) for sample in xrange(len(listed_predictions))]
</snippet></ROW><ROW><id>20584568</id><snippet>grades = [1, 7, 2, 5, 6, 9, 11, 11, 1, 6, 1]

def streak(grades):
    def streak_rec(longest, challenger, previous, rest):
        if rest == []:             # Base case
            return max(longest, challenger)
        elif previous &lt;= rest[0]:  # Streak continues
            return streak_rec(longest, challenger + 1, rest[0], rest[1:])
        else:                      # Streak is reset
            return streak_rec(max(longest, challenger), 1, rest[0], rest[1:])

    return streak_rec(0, 0, 0, grades)

print streak(grades) # =&gt; 6
print streak([2])    # =&gt; 1
</snippet></ROW><ROW><id>20584665</id><snippet>a = ([], [])</snippet></ROW><ROW><id>20584665</id><snippet>a[0] += 2 
</snippet></ROW><ROW><id>20584791</id><snippet>buttonParameters = {
    "button1": "button1.png",
    "button2": "button2.png",
    "button3": "button3.png",
    "button4": "button4.png",
    "button5": "button5.png",
}

buttonParameters['button1'] #=&gt; "button1.png"
</snippet></ROW><ROW><id>20584791</id><snippet>buttonParameters = dict(buttonParameters)
</snippet></ROW><ROW><id>20584894</id><snippet>\</snippet></ROW><ROW><id>20584894</id><snippet>file.write("""a=input("What would you like?\\n")""")
</snippet></ROW><ROW><id>20584894</id><snippet>r</snippet></ROW><ROW><id>20584894</id><snippet>file.write(r"""a=input("What would you like?\n")""")
</snippet></ROW><ROW><id>20584971</id><snippet>asfreq</snippet></ROW><ROW><id>20584971</id><snippet>sp = sp.asfreq('W-FRI', method='pad')
</snippet></ROW><ROW><id>20584971</id><snippet>pad</snippet></ROW><ROW><id>20584971</id><snippet>resample</snippet></ROW><ROW><id>20584971</id><snippet>asfreq</snippet></ROW><ROW><id>20584971</id><snippet>resample</snippet></ROW><ROW><id>20584971</id><snippet>reindex</snippet></ROW><ROW><id>20584971</id><snippet>method=pad</snippet></ROW><ROW><id>20585051</id><snippet>print</snippet></ROW><ROW><id>20585051</id><snippet>def f(a):
    print(a)
</snippet></ROW><ROW><id>20585051</id><snippet>target</snippet></ROW><ROW><id>20585051</id><snippet>"path_2_PyScripter.exe" --PYTHON27
</snippet></ROW><ROW><id>20585284</id><snippet>virtualenv your_env_name
</snippet></ROW><ROW><id>20585284</id><snippet>source your_env_name/bin/activate
</snippet></ROW><ROW><id>20585284</id><snippet>pip install packagename
</snippet></ROW><ROW><id>20585284</id><snippet>pip freeze &gt; requirements.txt
</snippet></ROW><ROW><id>20585284</id><snippet>pip install -r requirements.txt
</snippet></ROW><ROW><id>20585681</id><snippet>lst = ['blabla', 10, 'something']
# Open the file with a context manager
with open("/path/to/file", "a+") as myfile:
    # Convert all of the items in lst to strings (for str.join)
    lst = map(str, lst)  
    # Join the items together with commas                   
    line = ",".join(lst)
    # Write to the file
    myfile.write(line)
</snippet></ROW><ROW><id>20585681</id><snippet>blabla,10,something
</snippet></ROW><ROW><id>20585681</id><snippet>lst = ['blabla', 10, 'something']
with open("/path/to/file", "a+") as myfile:
    myfile.write(",".join(map(str, lst)))
</snippet></ROW><ROW><id>20585681</id><snippet>myfile.write(",".join(map(str, lst))+"\n")
</snippet></ROW><ROW><id>20586042</id><snippet>O(n^2)</snippet></ROW><ROW><id>20586042</id><snippet>for</snippet></ROW><ROW><id>20586042</id><snippet>n-1</snippet></ROW><ROW><id>20586042</id><snippet>n</snippet></ROW><ROW><id>20586042</id><snippet>for</snippet></ROW><ROW><id>20586042</id><snippet>O(n^2)</snippet></ROW><ROW><id>20586088</id><snippet>np.fromstring</snippet></ROW><ROW><id>20586088</id><snippet>&gt;&gt;&gt; n = range(16)
&gt;&gt;&gt; s = ''.join(map(chr, n))
&gt;&gt;&gt; np.fromstring(s, dtype=np.uint64)
array([506097522914230528, 1084818905618843912], dtype=uint64)
&gt;&gt;&gt; sum((256**i)*x for i,x in enumerate(n[:8]))
506097522914230528L
&gt;&gt;&gt; sum((256**i)*x for i,x in enumerate(n[8:]))
1084818905618843912L
</snippet></ROW><ROW><id>20586191</id><snippet>try:</snippet></ROW><ROW><id>20586191</id><snippet>else:</snippet></ROW><ROW><id>20586191</id><snippet>except:</snippet></ROW><ROW><id>20586191</id><snippet>return</snippet></ROW><ROW><id>20586191</id><snippet>return</snippet></ROW><ROW><id>20586191</id><snippet>pass</snippet></ROW><ROW><id>20586191</id><snippet>else:</snippet></ROW><ROW><id>20586191</id><snippet>try</snippet></ROW><ROW><id>20586191</id><snippet>return</snippet></ROW><ROW><id>20586191</id><snippet>except</snippet></ROW><ROW><id>20586191</id><snippet>else:</snippet></ROW><ROW><id>20586191</id><snippet>else:</snippet></ROW><ROW><id>20586191</id><snippet>def foo():
    try:
        # Some code
    except:
        # Some code
        return

    # Some code
</snippet></ROW><ROW><id>20586374</id><snippet>1</snippet></ROW><ROW><id>20586374</id><snippet>&gt;&gt;&gt; import scipy.sparse as sps
&gt;&gt;&gt; shape = (1000, 2000)
&gt;&gt;&gt; rows, cols = 1000, 2000
&gt;&gt;&gt; sps_acc = sps.coo_matrix((rows, cols)) # empty matrix
&gt;&gt;&gt; for j in xrange(100): # add 100 sets of 100 1's
...     r = np.random.randint(rows, size=100)
...     c = np.random.randint(cols, size=100)
...     d = np.ones((100,))
...     sps_acc = sps_acc + sps.coo_matrix((d, (r, c)), shape=(rows, cols))
... 
&gt;&gt;&gt; sps_acc
&lt;1000x2000 sparse matrix of type '&lt;type 'numpy.float64'&gt;'
    with 9985 stored elements in Compressed Sparse Row format&gt;
</snippet></ROW><ROW><id>20586479</id><snippet>&gt;&gt;&gt; format(38.2551994324, '.32f')
'38.25519943239999776096738060005009'
</snippet></ROW><ROW><id>20586479</id><snippet>'%f' % number</snippet></ROW><ROW><id>20586479</id><snippet>'{:f}'.format(number)</snippet></ROW><ROW><id>20586479</id><snippet>format(number, 'f')</snippet></ROW><ROW><id>20586479</id><snippet>str()</snippet></ROW><ROW><id>20586479</id><snippet>'%s' % number</snippet></ROW><ROW><id>20586479</id><snippet>'{}'.format(number)</snippet></ROW><ROW><id>20586479</id><snippet>format(number)</snippet></ROW><ROW><id>20586479</id><snippet>str()</snippet></ROW><ROW><id>20586479</id><snippet>str()</snippet></ROW><ROW><id>20586479</id><snippet>decimal.Decimal</snippet></ROW><ROW><id>20586479</id><snippet>1.1</snippet></ROW><ROW><id>20586479</id><snippet>2.2</snippet></ROW><ROW><id>20586479</id><snippet>1.1 + 2.2</snippet></ROW><ROW><id>20586479</id><snippet>3.3000000000000003</snippet></ROW><ROW><id>20586768</id><snippet>db = DAL(...)</snippet></ROW><ROW><id>20586768</id><snippet>db</snippet></ROW><ROW><id>20586768</id><snippet>db</snippet></ROW><ROW><id>20586834</id><snippet>\b</snippet></ROW><ROW><id>20586834</id><snippet>re.VERBOSE</snippet></ROW><ROW><id>20586834</id><snippet>def conv(m):
    return chr(int(m.group(1)))

pat = re.compile(r"""[+\s]*    # optional whitespace or +
                     \b        # word boundary
                     n?char    # NCHAR or CHAR
                     \(        # left paren
                     ([\d\s]+) # digits or spaces - group 1
                     \)        # right paren
                     [+\s]*    # optional whitespace or +
                  """, re.VERBOSE | re.IGNORECASE)
print pat.sub(conv, data)
</snippet></ROW><ROW><id>20586834</id><snippet>str</snippet></ROW><ROW><id>20586834</id><snippet>data</snippet></ROW><ROW><id>20586834</id><snippet>str</snippet></ROW><ROW><id>20586976</id><snippet>__init__</snippet></ROW><ROW><id>20586976</id><snippet>__init__</snippet></ROW><ROW><id>20586976</id><snippet>class obstacle(object):
    def __init__(self, spel, size, pos):
        self.spel = spel
        #etc

    def break(self):
        self.spel.obstacles.remove(self)
</snippet></ROW><ROW><id>20586990</id><snippet>django.core.mail.backends.base.BaseEmailBackend.send_messages()</snippet></ROW><ROW><id>20586990</id><snippet>def send_messages(self, email_messages):
    """
    Sends one or more EmailMessage objects and returns the number of email
    messages sent.
    """
</snippet></ROW><ROW><id>20586990</id><snippet>django.core.mail.console.EmailBackend()</snippet></ROW><ROW><id>20586990</id><snippet>sys.stdout</snippet></ROW><ROW><id>20587197</id><snippet>str.find()</snippet></ROW><ROW><id>20587197</id><snippet>-1</snippet></ROW><ROW><id>20587197</id><snippet>0</snippet></ROW><ROW><id>20587197</id><snippet>if str.find(test2, start, -1) &gt; 0:
</snippet></ROW><ROW><id>20587197</id><snippet>0</snippet></ROW><ROW><id>20587197</id><snippet>if str.find(test2, start, -2) &gt;= 0:
</snippet></ROW><ROW><id>20587197</id><snippet>str.find()</snippet></ROW><ROW><id>20587197</id><snippet>xxxx</snippet></ROW><ROW><id>20587197</id><snippet>xx</snippet></ROW><ROW><id>20587197</id><snippet>def last2(value):
    if len(value) &lt; 3:
        return 0
    test2 = value[-2:]
    start = 0
    count = 0
    while True:
        index = value.find(test2, start, -1)
        if index == -1:
            break
        count +=1
        start = index + 1
    return count
</snippet></ROW><ROW><id>20587197</id><snippet>str()</snippet></ROW><ROW><id>20587197</id><snippet>&gt;&gt;&gt; last2('hixxhi')
1
&gt;&gt;&gt; last2('xaxxaxaxx')
1
&gt;&gt;&gt; last2('axxxaaxx')
2
</snippet></ROW><ROW><id>20587281</id><snippet>dType</snippet></ROW><ROW><id>20587281</id><snippet>dType= [str, str, str, int, float, float, str]
</snippet></ROW><ROW><id>20587281</id><snippet>float</snippet></ROW><ROW><id>20587281</id><snippet>zip</snippet></ROW><ROW><id>20587281</id><snippet>[t(x) for t,x in zip(dType,foo)]
Out[6]: ['plot001', '01-01-2013', 'XX', 10, 12.5, 0.65, 'A']
</snippet></ROW><ROW><id>20587281</id><snippet>functools.partial</snippet></ROW><ROW><id>20587281</id><snippet>datetime</snippet></ROW><ROW><id>20587281</id><snippet>def datetime_factory(format,s):
    from datetime import datetime
    return datetime.strptime(s,format)

from functools import partial

dType= [str, partial(datetime_factory,'%d-%m-%Y'), str, int, float, float, str]

[t(x) for t,x in zip(dType,foo)]
Out[29]: ['plot001', datetime.datetime(2013, 1, 1, 0, 0), 'XX', 10, 12.5, 0.65, 'A']
</snippet></ROW><ROW><id>20587281</id><snippet>def</snippet></ROW><ROW><id>20587281</id><snippet>partial</snippet></ROW><ROW><id>20587281</id><snippet>strptime</snippet></ROW><ROW><id>20587774</id><snippet>import pygame, sys
x=False
oldLocation=(100, 100)
newLocation=(200, 200)
window=pygame.display.set_mode((500, 500))
while True:
    for event in pygame.event.get():
        if event.type==pygame.KEYDOWN and event.key==pygame.K_SPACE:
            x=True
        if event.type==pygame.QUIT:
            pygame.quit()
            sys.exit()
    window.fill((255, 255, 255))
    if x:
        pygame.draw.circle(window, (0, 0, 0), newLocation, 50)
    else:
        pygame.draw.circle(window, (0, 0, 0), oldLocation, 50)
    pygame.display.update()
</snippet></ROW><ROW><id>20587842</id><snippet>r = cur.fetchone ()
if not r:
    print ('Login failed')
    continue
login2, = r
....
</snippet></ROW><ROW><id>20587967</id><snippet>&lt;form id="changelist-form" action="" method="post"&gt;
</snippet></ROW><ROW><id>20587967</id><snippet>def rename_action(modeladmin, request, queryset):
    queryset.update(name='Ni')
make_published.short_description = "Rename selected objects to 'Ni'"

class FooAdmin(admin.ModelAdmin):
    actions = [rename_action, ...]
</snippet></ROW><ROW><id>20587967</id><snippet>class Foo(models.Model):
    ...

    def my_action_link(self, obj):
        return '&lt;a href="/admin/app/foo/my_custom_action/%d/" class="link"&gt;Action name&lt;/a&gt;' %obj.id
    my_action_link.short_description = 'My action'
    my_action_link.allow_tags = True
</snippet></ROW><ROW><id>20587967</id><snippet>class FooAdmin(admin.ModelAdmin):
    ...

    list_display = ['name', 'my_action_link', ...]

    def get_urls(self):
        urls = super(FooAdmin, self).get_urls()
        my_urls = patterns('',
            (r'^my_custom_action/(?P&lt;pk&gt;\d+)/$', self.my_view)
        )
        return my_urls + urls

    @permission_required('foo.can_change')
    def my_view(self, request):
        obj = get_object_or_404(Foo, pk=pk)
        obj.do_something()
        # Redirect back to the change list. Or something else?
        # You could add some modelform to this view. :)
</snippet></ROW><ROW><id>20587968</id><snippet>Tkinter</snippet></ROW><ROW><id>20587968</id><snippet>import Tkinter as Tk

root = Tk.Tk()

def submit():
    print "entered text were " + entry.get()

entry = Tk.Entry(root)
entry.pack()
button = Tk.Button(root,text='submit',command=submit)
button.pack()

root.mainloop()
</snippet></ROW><ROW><id>20588135</id><snippet>get_obj_or_none(Song, name__iexact=song_name, artist=dj)</snippet></ROW><ROW><id>20588640</id><snippet>ip.replace("x", ipend) 
</snippet></ROW><ROW><id>20588640</id><snippet> ipend += 1
</snippet></ROW><ROW><id>20588640</id><snippet>for ipend in range(1,256): #Range won't actually give you the last number here.
    #Do stuff
</snippet></ROW><ROW><id>20588860</id><snippet>x = open(r"C:\Users\username\Desktop\Hi.txt", 'r')
             ^^
</snippet></ROW><ROW><id>20588860</id><snippet>\U</snippet></ROW><ROW><id>20588860</id><snippet>print()</snippet></ROW><ROW><id>20588860</id><snippet>read()</snippet></ROW><ROW><id>20588860</id><snippet>print(x.read())
</snippet></ROW><ROW><id>20588878</id><snippet>font</snippet></ROW><ROW><id>20588878</id><snippet>import tkFont
helv36 = tkFont.Font(family='Helvetica',
    size=36, weight='bold')  # you don't have to use Helvetica or bold, this is just an example
button['font'] = helv36
</snippet></ROW><ROW><id>20588878</id><snippet>grid</snippet></ROW><ROW><id>20588878</id><snippet>pack</snippet></ROW><ROW><id>20588878</id><snippet>grid</snippet></ROW><ROW><id>20588878</id><snippet>pack</snippet></ROW><ROW><id>20588878</id><snippet># using grid
# +------+-------------+
# | btn1 |    btn2     |
# +------+------+------+
# | btn3 | btn3 | btn4 |
# +-------------+------+
root = Tk()
btn1 = Button(text='btn1', font=helv36)
btn2 = Button(text='btn2', font=helv36)
btn3 = Button(text='btn3', font=helv36)
btn4 = Button(text='btn4', font=helv36)
btn5 = Button(text='btn5', font=helv36)
root.rowconfigure((0,1), weight=1)  # make buttons stretch when
root.columnconfigure((0,2), weight=1)  # when window is resized
btn1.grid(row=0, column=0, columnspan=1, sticky='EWNS')
btn2.grid(row=0, column=1, columnspan=2, sticky='EWNS')
btn3.grid(row=1, column=0, columnspan=1, sticky='EWNS')
btn4.grid(row=1, column=1, columnspan=1, sticky='EWNS')
btn5.grid(row=1, column=2, columnspan=1, sticky='EWNS')
</snippet></ROW><ROW><id>20588878</id><snippet>ttk</snippet></ROW><ROW><id>20588911</id><snippet>awk -f e.awk input.txt
</snippet></ROW><ROW><id>20588911</id><snippet>input.txt</snippet></ROW><ROW><id>20588911</id><snippet>e.awk</snippet></ROW><ROW><id>20588911</id><snippet>/^merge / {
    if (match($0,/merge into ([^[:blank:]]+)/,a)) {
        print "MERGE|"a[1]
        next
    }
}

/FROM [^(]/ {
    getFromTabs()
    if (match(from,/FROM ([^[:blank:]]+)/,a)) {
        printKey(a[1])
        do {
            ind=index(from,",")
            if (ind) {
                from=substr(from,ind+1)
                match(from,/[[:space:]]*([[:alnum:]]+)/,a)
                printKey(a[1])
            }
        }
        while (ind)
    }
}    

/^drop/ {
    if (match($0,/drop table ([^[:blank:]]+)/,a)) {
        print "DROP|"a[1]
        next
    }

}

/^create/ {
    if (match($0,/create table ([^[:blank:]]+)/,a)) {
        print "CREATE|"a[1]
    }
    if (match($0,/select.*[[:blank:]]([^[:blank:]]+);/,a)) {
        print "SELECT|"a[1]
    }
}

function printKey(key) {
    if (!(key in T)) {
        print "SELECT|"key
        T[key]++
    }
}

function getFromTabs(p) {
    p=0
    from=""
    do {
        from=(p++==0)?$0:(from ORS $0)
        getline
    }
    while (!/WHERE/)
}
</snippet></ROW><ROW><id>20588911</id><snippet>MERGE|temp_st_rx_wk_str_ip_rpt
SELECT|rx_ov_ord_excep_str_sku
SELECT|ndc
SELECT|fiscal
SELECT|store
SELECT|dss_saf_user01.rx_ov_ord_exclu_str
SELECT|rx_osv_invoice_str_ndc
DROP|temp_extract;
CREATE|temp_build_extract
SELECT|temp_st_rx_wk_Str_ip_rpt
</snippet></ROW><ROW><id>20589212</id><snippet>del</snippet></ROW><ROW><id>20589212</id><snippet>path = ('a', 'b')
</snippet></ROW><ROW><id>20589212</id><snippet>def resolve_path(dictionary, path):
    return reduce(dict.get, path, dictionary)
</snippet></ROW><ROW><id>20589212</id><snippet>def del_endpoint(dictionary, path):
    parent_path, last = path[:-1], path[-1]
    parent = resolve_path(dictionary, parent_path)
    del parent[last]
</snippet></ROW><ROW><id>20589389</id><snippet>loadmat</snippet></ROW><ROW><id>20589389</id><snippet>def get_events(matlab_obj):
    ...
    subjects = matlab_obj["s"][0]
    ...
    for subject_object in subjects:
        try:
            subject_hash = subject_object.my_hashedNumber[0][0]  # AttributeError here
</snippet></ROW><ROW><id>20589389</id><snippet>matlab_obj["s"]</snippet></ROW><ROW><id>20589389</id><snippet>subjects</snippet></ROW><ROW><id>20589389</id><snippet>(106,)</snippet></ROW><ROW><id>20589389</id><snippet>subject_object['my_hashedNumber']</snippet></ROW><ROW><id>20589389</id><snippet>[0,0]</snippet></ROW><ROW><id>20589389</id><snippet>[0][0]</snippet></ROW><ROW><id>20589537</id><snippet>sys</snippet></ROW><ROW><id>20589537</id><snippet>place</snippet></ROW><ROW><id>20589537</id><snippet>pack</snippet></ROW><ROW><id>20589537</id><snippet>grid</snippet></ROW><ROW><id>20589537</id><snippet>None</snippet></ROW><ROW><id>20589537</id><snippet>tkinter.colorchooser.askcolor</snippet></ROW><ROW><id>20589537</id><snippet>((128.5, 64.25, 64.25), '#804040')  
</snippet></ROW><ROW><id>20589537</id><snippet>from tkinter import *
from tkinter import colorchooser

mGui = Tk()
mGui.geometry("600x300+500+500")
mGui.title("Hexadecimal Color Chooser")

def getColor():
    color_choice = colorchooser.askcolor()[1]  # get the hex code
    color = Label(mGui, bg=color_choice)
    color.pack()
    hexcode = Label(mGui, text="The hexadecimal color code is: "+color_choice)
    hexcode.pack()

button = Button(mGui, text="Choose a color", command=getColor)
button.place(x=0, y=0)

mGui.mainloop()
</snippet></ROW><ROW><id>20589558</id><snippet>ModelAdmin</snippet></ROW><ROW><id>20589558</id><snippet>get_inline_instances()</snippet></ROW><ROW><id>20589558</id><snippet>class TestAdmin(admin.ModelAdmin):
    def get_inline_instances(self, request, obj=None):
        if obj.id &gt; 3:
            self.inlines = [TestInfoInline, ]
        else:
            self.inlines = []
        return super(TestAdmin, self).get_inline_instances(request, obj)
</snippet></ROW><ROW><id>20589558</id><snippet>class TestAdmin(admin.ModelAdmin):
    inlines_foo = []
    inlines_bar = [TestInfoInline, ]

    def get_inline_instances(self, request, obj=None):
        self.inlines = self.inlines_foo if obj.id &lt;= 3 else self.inlines_bar
        return super(TestAdmin, self).get_inline_instances(request, obj)
</snippet></ROW><ROW><id>20590016</id><snippet>str.find</snippet></ROW><ROW><id>20590016</id><snippet>'With a moo-moo here, and a moo-moo there'
</snippet></ROW><ROW><id>20590016</id><snippet>moo</snippet></ROW><ROW><id>20590016</id><snippet>7</snippet></ROW><ROW><id>20590016</id><snippet>7</snippet></ROW><ROW><id>20590016</id><snippet>m</snippet></ROW><ROW><id>20590016</id><snippet>8</snippet></ROW><ROW><id>20590016</id><snippet>o</snippet></ROW><ROW><id>20590016</id><snippet>9</snippet></ROW><ROW><id>20590016</id><snippet>o</snippet></ROW><ROW><id>20590016</id><snippet>10</snippet></ROW><ROW><id>20590016</id><snippet>'With a moo-moo here, and a moo-moo there'
#0123456789
</snippet></ROW><ROW><id>20590016</id><snippet>&gt;&gt;&gt; 'With a moo-moo here, and a moo-moo there'[7]
'm'
&gt;&gt;&gt; 'With a moo-moo here, and a moo-moo there'[7:10]
'moo'
&gt;&gt;&gt;
</snippet></ROW><ROW><id>20590045</id><snippet>if op == '':
 #run code
</snippet></ROW><ROW><id>20590069</id><snippet>280a 7265 6765 783d 7222 cb86 283f 503c  (.regex=r"..(?P&lt;
</snippet></ROW><ROW><id>20590069</id><snippet>regex=r"ˆ(?P&lt;pk&gt;\d+)/$",
</snippet></ROW><ROW><id>20590069</id><snippet>regex=r"^(?P&lt;pk&gt;/d+)/$",
</snippet></ROW><ROW><id>20590114</id><snippet>cx_freeze</snippet></ROW><ROW><id>20590114</id><snippet>uic</snippet></ROW><ROW><id>20590114</id><snippet>uic</snippet></ROW><ROW><id>20590114</id><snippet>your_python_dir\Lib\site-packages\PyQt4\uic</snippet></ROW><ROW><id>20590114</id><snippet>port_v2</snippet></ROW><ROW><id>20590114</id><snippet>port_v3</snippet></ROW><ROW><id>20590114</id><snippet>port_v2_</snippet></ROW><ROW><id>20590114</id><snippet>v3</snippet></ROW><ROW><id>20590114</id><snippet>cx_freeze</snippet></ROW><ROW><id>20590114</id><snippet>uic</snippet></ROW><ROW><id>20590515</id><snippet>words = [word.lower() for line in lines for word in line.split()]
</snippet></ROW><ROW><id>20590515</id><snippet>unique = list(set(word.lower() for word in words))
</snippet></ROW><ROW><id>20590515</id><snippet>with open('Gettysburgaddress.txt','r') as getty:
    words = [word.lower() for line in getty for word in line.split()]
</snippet></ROW><ROW><id>20590515</id><snippet>with</snippet></ROW><ROW><id>20590549</id><snippet>pty.spawn()</snippet></ROW><ROW><id>20590549</id><snippet>import os
import pty

logfile = open('logfile', 'wb')

def read(fd):
    data = os.read(fd, 1024)
    logfile.write(data)
    return data

pty.spawn("ninja", read)
</snippet></ROW><ROW><id>20590605</id><snippet>class Course(db.Model):
    name = CharField()

class Activity(db.Model):
    # Note that we have added a backreference
    # to activities on the `Course` model with
    # the `related_name` argument
    # so we can do course.activites
    course = ForeignKeyField(Course, related_name='activities')
    name = CharField()

results = Course.select(Course, Activity).join(Activity)
# results is now a collection of courses, each course
# with all of its activities and it all should have been
# pulled out with one SQL query
</snippet></ROW><ROW><id>20590605</id><snippet>&lt;select name="activities"&gt;
{% for course in courses %} 
 &lt;optgroup label="course.name"&gt;
    {% for activity in course.activities %} 
    &lt;option value="{{activity.id}}"&gt;{{activity.name}}&lt;/option&gt;
    {% endfor %}
&lt;/optgroup&gt;
{% endfor %}
&lt;/select&gt;
</snippet></ROW><ROW><id>20590676</id><snippet>Tag</snippet></ROW><ROW><id>20590676</id><snippet>NavigableString</snippet></ROW><ROW><id>20590676</id><snippet>from bs4 import Tag

result = []
for child in html.find('div', class_='textbox').children:
    if isinstance(child, Tag):
        result.append(child.get('alt', ''))
    else:
        result.append(child.strip())

print ' '.join(result)
</snippet></ROW><ROW><id>20590676</id><snippet>&gt;&gt;&gt; from bs4 import BeautifulSoup, Tag
&gt;&gt;&gt; sample = '''\
... &lt;div class="textbox"&gt;
...     Buying this item will cost you 
...     &lt;img align="adsbottom" alt="1" src="/1.jpg;type=symbol"/&gt;
...     silver credits and
...     &lt;img align="adsbottom" alt="1" src="/1.jpg;type=symbol"/&gt;
...     golden credits
... &lt;/div&gt;
... '''
&gt;&gt;&gt; html = BeautifulSoup(sample)
&gt;&gt;&gt; result = []
&gt;&gt;&gt; for child in html.find('div', class_='textbox').children:
...     if isinstance(child, Tag):
...         result.append(child.get('alt', ''))
...     else:
...         result.append(child.strip())
... 
&gt;&gt;&gt; print ' '.join(result)
Buying this item will cost you 1 silver credits and 1 golden credits
</snippet></ROW><ROW><id>20590708</id><snippet>str.split()</snippet></ROW><ROW><id>20590708</id><snippet>len(phrase.split())
</snippet></ROW><ROW><id>20590708</id><snippet>str.split()</snippet></ROW><ROW><id>20590708</id><snippet>None</snippet></ROW><ROW><id>20590708</id><snippet>&gt;&gt;&gt; 'Hello world!  This\tis\t         awesome!'.split()
['Hello', 'world!', 'This', 'is', 'awesome!']
&gt;&gt;&gt; len('Hello world!  This\tis\t         awesome!'.split())
5
</snippet></ROW><ROW><id>20590779</id><snippet>os.listdir()</snippet></ROW><ROW><id>20590779</id><snippet>result = [os.curdir, os.pardir] + os.listdir(path)</snippet></ROW><ROW><id>20590964</id><snippet> &lt;p id="sen1" class="lead"&gt;{{ sentence }}&lt;/p&gt;
</snippet></ROW><ROW><id>20590964</id><snippet>    function makeSentence() {
     $.ajax({
          url:'http://sentence-generator.appspot.com'
       }
     )
     .done(function(data) {
         alert(data);
         })
    .fail(function(){
        alert('error');
        })
    .always(function(){
        //alert('always');
        })
        ;
    }
</snippet></ROW><ROW><id>20590967</id><snippet>print [charTuple[i] for i in randIntArray] # new list according to new indices
</snippet></ROW><ROW><id>20590967</id><snippet>list comprehension</snippet></ROW><ROW><id>20590967</id><snippet>randIntArray = np.random.random_integers(0, len(charTuple) - 1, 12)
</snippet></ROW><ROW><id>20591190</id><snippet>&gt;&gt;&gt; i = '4\n'
&gt;&gt;&gt; i[0]
'4'
</snippet></ROW><ROW><id>20591190</id><snippet>correct = correct[0]</snippet></ROW><ROW><id>20591190</id><snippet>if</snippet></ROW><ROW><id>20591190</id><snippet>correct = next_line(the_file)
if correct:
   correct = correct[0]
</snippet></ROW><ROW><id>20591190</id><snippet>the_file</snippet></ROW><ROW><id>20591190</id><snippet>correct</snippet></ROW><ROW><id>20591190</id><snippet>correct</snippet></ROW><ROW><id>20591190</id><snippet>correct</snippet></ROW><ROW><id>20591190</id><snippet>IndexError</snippet></ROW><ROW><id>20591190</id><snippet>correct = correct[0]</snippet></ROW><ROW><id>20591402</id><snippet>in</snippet></ROW><ROW><id>20591402</id><snippet>in</snippet></ROW><ROW><id>20591402</id><snippet>dk_lookup()</snippet></ROW><ROW><id>20591402</id><snippet>ep = (mp-&gt;ma_keys-&gt;dk_lookup)(mp, key, hash, &amp;value_addr);</snippet></ROW><ROW><id>20591441</id><snippet>return</snippet></ROW><ROW><id>20591441</id><snippet>gcd</snippet></ROW><ROW><id>20591441</id><snippet>None</snippet></ROW><ROW><id>20591441</id><snippet>print</snippet></ROW><ROW><id>20591441</id><snippet>return</snippet></ROW><ROW><id>20591510</id><snippet># your string
line = '1 VNET ... 19.03 ...'
# pick out the price
price = line[40:48]
</snippet></ROW><ROW><id>20591510</id><snippet>import re
line = '1 VENT 19.03'
re.match(r'(?P&lt;id&gt;\d)\s+(?P&lt;company&gt;\w+)\s+(?P&lt;price&gt;[\.\d]+)', line).groupdict()
</snippet></ROW><ROW><id>20591676</id><snippet>while time &gt;= 0</snippet></ROW><ROW><id>20591676</id><snippet>while time &gt; 0 or time == 0</snippet></ROW><ROW><id>20591676</id><snippet>&gt;&gt;&gt; 0 &gt;= 0
True
&gt;&gt;&gt; 1 &gt;= 0
True
&gt;&gt;&gt; -1 &gt;= 0
False
</snippet></ROW><ROW><id>20591839</id><snippet>data['statuses']</snippet></ROW><ROW><id>20591839</id><snippet>for i in range (len(data['statuses'])):
</snippet></ROW><ROW><id>20591850</id><snippet>Counter</snippet></ROW><ROW><id>20591850</id><snippet>from collections import Counter
alist=[1,1,1,2,2,3,4,2,2,3,2,2,1]
print Counter(alist)
</snippet></ROW><ROW><id>20591850</id><snippet>def icount(alist):
    adic = {}
    for i in alist:
        adic[i] = adic.get(i, 0) + 1
    return adic
</snippet></ROW><ROW><id>20591850</id><snippet>defaultdict</snippet></ROW><ROW><id>20591850</id><snippet>from collections import defaultdict
adic = defaultdict(int)
for i in alist:
    adic[i] += 1
return adic
</snippet></ROW><ROW><id>20591978</id><snippet>str</snippet></ROW><ROW><id>20591978</id><snippet>repr</snippet></ROW><ROW><id>20591978</id><snippet>repr</snippet></ROW><ROW><id>20591978</id><snippet>u</snippet></ROW><ROW><id>20591978</id><snippet>str</snippet></ROW><ROW><id>20591978</id><snippet>str</snippet></ROW><ROW><id>20591978</id><snippet>repr</snippet></ROW><ROW><id>20591978</id><snippet>repr</snippet></ROW><ROW><id>20591978</id><snippet>print</snippet></ROW><ROW><id>20591978</id><snippet>str</snippet></ROW><ROW><id>20591978</id><snippet>print a,z</snippet></ROW><ROW><id>20591978</id><snippet>print (a), (z)</snippet></ROW><ROW><id>20591978</id><snippet>str</snippet></ROW><ROW><id>20591978</id><snippet>print(a, z)</snippet></ROW><ROW><id>20591978</id><snippet>print [a,z]</snippet></ROW><ROW><id>20591978</id><snippet>print</snippet></ROW><ROW><id>20591978</id><snippet>str</snippet></ROW><ROW><id>20591978</id><snippet>repr</snippet></ROW><ROW><id>20591978</id><snippet>print(a, str(z))</snippet></ROW><ROW><id>20591978</id><snippet>str(z)</snippet></ROW><ROW><id>20591978</id><snippet>z</snippet></ROW><ROW><id>20592182</id><snippet>var secretKey = 'My Secret Key';

module.exports = {
  validateRequest : function(req) {
    /* shorter version of what you have already:
    var keys = Object.keys(req.body)
                .filter(function(key) { return key !== 'cverify'; })
                .sort();

    var pop = keys.map(function(key) {
      return body[key];
    }).join('|') + '|' + secretKey;
    */
    ...

    var sha1 = require('crypto').createHash('sha1');
    sha1.update(pop);
    var digest = sha1.digest('hex').substring(0, 8).toUpperCase();
    return digest === req.body.cverify;
  }
};
</snippet></ROW><ROW><id>20592257</id><snippet>&gt;&gt;&gt; lst = [1,2,4,6,3,8,0,5]
&gt;&gt;&gt; for n in lst:
...     if n % 2 == 0:
...         lst.remove(n)
...
&gt;&gt;&gt; lst
[1, 4, 3, 0, 5]
</snippet></ROW><ROW><id>20592257</id><snippet>&gt;&gt;&gt; lst = [1,2,4,6,3,8,0,5]
&gt;&gt;&gt; for n in lst[:]:
...     if n % 2 == 0:
...         lst.remove(n)
...
&gt;&gt;&gt; lst
[1, 3, 5]
</snippet></ROW><ROW><id>20592257</id><snippet>sstring</snippet></ROW><ROW><id>20592257</id><snippet>def scanFiles2(rdir, sstring, extens, start='', cSens=False): 
    if not cSens: 
        # This only need to called once.
        sstring = sstring.lower() 
    fList = []
    for fol, fols, fils in os.walk(rdir): 
        for fil in fils: 
            if not (fil.startswith(start) and fil.endswith(extens)):
                continue
            fil = os.path.join(fol, fil)
            with open(fil) as rFil:
                for line in rFil: 
                    if not cSens: 
                        line = line.lower()
                    if sstring in line:
                        break
                else:
                    fList.append(fil)
    ...
</snippet></ROW><ROW><id>20592257</id><snippet>list.remove</snippet></ROW><ROW><id>20592257</id><snippet>list.append</snippet></ROW><ROW><id>20592257</id><snippet>with</snippet></ROW><ROW><id>20592471</id><snippet>UnboundLocalError</snippet></ROW><ROW><id>20592471</id><snippet>filename = str(filename)
</snippet></ROW><ROW><id>20592471</id><snippet>filename</snippet></ROW><ROW><id>20592471</id><snippet>global filename</snippet></ROW><ROW><id>20592471</id><snippet>filename</snippet></ROW><ROW><id>20592471</id><snippet>def metadata(filename):
    filename = str(filename)
    ...
    return tracknumber, title, artist

tracknumber, title, artist = metadata(filename)
</snippet></ROW><ROW><id>20592471</id><snippet>str</snippet></ROW><ROW><id>20592471</id><snippet>unicode</snippet></ROW><ROW><id>20592471</id><snippet>bytes</snippet></ROW><ROW><id>20592471</id><snippet>str</snippet></ROW><ROW><id>20592471</id><snippet>decode</snippet></ROW><ROW><id>20592471</id><snippet>encode</snippet></ROW><ROW><id>20592471</id><snippet>subprocess</snippet></ROW><ROW><id>20592471</id><snippet>Py</snippet></ROW><ROW><id>20592471</id><snippet>str</snippet></ROW><ROW><id>20592471</id><snippet>unicode</snippet></ROW><ROW><id>20592471</id><snippet>def metadata(filename):
   filename = str(filename).decode('utf-8')
</snippet></ROW><ROW><id>20592471</id><snippet>str</snippet></ROW><ROW><id>20592471</id><snippet>def metadata(filename):
   filename = str(filename)
</snippet></ROW><ROW><id>20592471</id><snippet>filename</snippet></ROW><ROW><id>20592471</id><snippet>subprocess.Popen</snippet></ROW><ROW><id>20592471</id><snippet>str(filename)</snippet></ROW><ROW><id>20592471</id><snippet>pipe = subprocess.Popen(
    ["metaflac", "--show-tag=title", str(filename)],
    stdout=subprocess.PIPE)
</snippet></ROW><ROW><id>20592471</id><snippet>pipe = subprocess.Popen(
    ["metaflac", "--show-tag=title", filename],
    stdout=subprocess.PIPE)
</snippet></ROW><ROW><id>20592471</id><snippet>communicate</snippet></ROW><ROW><id>20592471</id><snippet>title.decode("utf-8")
</snippet></ROW><ROW><id>20592471</id><snippet>title = title.decode("utf-8")
</snippet></ROW><ROW><id>20592471</id><snippet>artist</snippet></ROW><ROW><id>20592471</id><snippet>tracknumber</snippet></ROW><ROW><id>20592640</id><snippet>sed 's/@XmlElement(namespace = \(".*"\), \(required = true\))/@Namespace(reference=\1)\n@Element(\2)/' files
</snippet></ROW><ROW><id>20592640</id><snippet>files</snippet></ROW><ROW><id>20592640</id><snippet>*.txt</snippet></ROW><ROW><id>20592640</id><snippet>-i</snippet></ROW><ROW><id>20592640</id><snippet>sed</snippet></ROW><ROW><id>20592640</id><snippet>-i</snippet></ROW><ROW><id>20592640</id><snippet>-ibak</snippet></ROW><ROW><id>20592640</id><snippet>.bak</snippet></ROW><ROW><id>20592640</id><snippet>man sed</snippet></ROW><ROW><id>20592640</id><snippet>-i</snippet></ROW><ROW><id>20592678</id><snippet>return</snippet></ROW><ROW><id>20592678</id><snippet>SyntaxError</snippet></ROW><ROW><id>20592678</id><snippet>print "Welcome to translator!"
print "Enter in an english word"
original = raw_input("Enter a word")

if original: # Checks if original is not empty
     print original
</snippet></ROW><ROW><id>20592678</id><snippet>print "Welcome to translator!"
print "Enter in an english word"
original=raw_input("Enter a word")

def not_empty(string):
     if string:
        return string

print not_empty(original)
</snippet></ROW><ROW><id>20592687</id><snippet>product()</snippet></ROW><ROW><id>20592687</id><snippet>[','] + 3 + ['and']</snippet></ROW><ROW><id>20592687</id><snippet>[w for w in word_list if w not in (',', 'and')]</snippet></ROW><ROW><id>20592687</id><snippet>'and'</snippet></ROW><ROW><id>20592687</id><snippet>&gt;&gt;&gt; len(list(permutations([','] * 3 + ['and'])))
24
</snippet></ROW><ROW><id>20592687</id><snippet>and</snippet></ROW><ROW><id>20592687</id><snippet>nouns = [w for w in word_list if w not in (',', 'and')]
grammar = [w for w in word_list if w in (',', 'and')]
result = []
for perm in permutations(nouns):
    result.append([w for word, g in map(None, perm, grammar) for w in (word, g) if w is not None])
</snippet></ROW><ROW><id>20592814</id><snippet>list.extend()</snippet></ROW><ROW><id>20592814</id><snippet>list.append()</snippet></ROW><ROW><id>20592814</id><snippet>l.extend(t)
l.extend(t2)
</snippet></ROW><ROW><id>20592814</id><snippet>l.extend(t + t2)
</snippet></ROW><ROW><id>20592814</id><snippet>l += t + t2
</snippet></ROW><ROW><id>20592814</id><snippet>list.__iadd__</snippet></ROW><ROW><id>20592814</id><snippet>list.extend()</snippet></ROW><ROW><id>20592814</id><snippet>&gt;&gt;&gt; l = []
&gt;&gt;&gt; t = (1,2,3)
&gt;&gt;&gt; t2 = (4,5)
&gt;&gt;&gt; l += t + t2
&gt;&gt;&gt; l
[1, 2, 3, 4, 5]
</snippet></ROW><ROW><id>20592814</id><snippet>t + t2</snippet></ROW><ROW><id>20592814</id><snippet>list(t + t2)</snippet></ROW><ROW><id>20592902</id><snippet>demo1.py</snippet></ROW><ROW><id>20592902</id><snippet>import os
import cPickle as pickle

my_dir = os.path.dirname(__file__)
pickle_file_path = os.path.join(my_dir, 'demo_pickle_file.pkl')

with open(pickle_file_path, 'rb') as pickle_file:
    demo = pickle.load(pickle_file)
</snippet></ROW><ROW><id>20592910</id><snippet>=?utf-8?q?=E2=98=83?=
</snippet></ROW><ROW><id>20592910</id><snippet>name*=utf-8''%E2%98%83
</snippet></ROW><ROW><id>20592910</id><snippet>name=</snippet></ROW><ROW><id>20592910</id><snippet>name*=</snippet></ROW><ROW><id>20592910</id><snippet>Content-Disposition: form-data; name="☃"; name*=utf-8''%E2%98%83
</snippet></ROW><ROW><id>20592990</id><snippet>./manage.py collectstatic</snippet></ROW><ROW><id>20592990</id><snippet>collectstatic</snippet></ROW><ROW><id>20592990</id><snippet>STATIC_ROOT</snippet></ROW><ROW><id>20593003</id><snippet>unicode</snippet></ROW><ROW><id>20593003</id><snippet>unicode</snippet></ROW><ROW><id>20593003</id><snippet>unicode</snippet></ROW><ROW><id>20593003</id><snippet># encoding: utf8
arabic_hadith = u"دَّثَنَا عَبْدَانُ، قَالَ أَخْبَرَنَا عَبْ"
print arabic_hadith
if u"الجمعة" in arabic_hadith:‎
    day = "5"
else:
    day = ""
</snippet></ROW><ROW><id>20593068</id><snippet>(7 and 12)</snippet></ROW><ROW><id>20593068</id><snippet>(7 and 12 and 9)</snippet></ROW><ROW><id>20593068</id><snippet>h</snippet></ROW><ROW><id>20593331</id><snippet>struct</snippet></ROW><ROW><id>20593331</id><snippet>=</snippet></ROW><ROW><id>20593331</id><snippet>&gt;&gt;&gt; from struct import calcsize
&gt;&gt;&gt; calcsize('15sH')
18
&gt;&gt;&gt; calcsize('=15sH')
17
</snippet></ROW><ROW><id>20593345</id><snippet>&gt;&gt;&gt; from itertools import product
&gt;&gt;&gt; L = ["A", "B", "C"]
&gt;&gt;&gt; def f(c): return c.lower()
... 
&gt;&gt;&gt; fL = [f(x) for x in L]
&gt;&gt;&gt; for i in product(*zip(L, fL)):
...     print i
... 
('A', 'B', 'C')
('A', 'B', 'c')
('A', 'b', 'C')
('A', 'b', 'c')
('a', 'B', 'C')
('a', 'B', 'c')
('a', 'b', 'C')
('a', 'b', 'c')
</snippet></ROW><ROW><id>20593345</id><snippet>f</snippet></ROW><ROW><id>20593345</id><snippet>L</snippet></ROW><ROW><id>20593345</id><snippet>fL</snippet></ROW><ROW><id>20593345</id><snippet>&gt;&gt;&gt; fL
['a', 'b', 'c']
</snippet></ROW><ROW><id>20593345</id><snippet>zip</snippet></ROW><ROW><id>20593345</id><snippet>&gt;&gt;&gt; zip(L, fL)
[('A', 'a'), ('B', 'b'), ('C', 'c')]
</snippet></ROW><ROW><id>20593345</id><snippet>itertools.product</snippet></ROW><ROW><id>20593345</id><snippet>product(*zip(L, fL))
</snippet></ROW><ROW><id>20593345</id><snippet>product(*[('A', 'a'), ('B', 'b'), ('C', 'c')])
</snippet></ROW><ROW><id>20593345</id><snippet>product(('A', 'a'), ('B', 'b'), ('C', 'c'))
</snippet></ROW><ROW><id>20593404</id><snippet>id()</snippet></ROW><ROW><id>20593404</id><snippet>seen = set()
unique = [d for d in dictlist if id(d) not in seen and not seen.add(id(d))]
</snippet></ROW><ROW><id>20593404</id><snippet>unique = {id(d): d for d in dictlist}.values()
</snippet></ROW><ROW><id>20593404</id><snippet>set()</snippet></ROW><ROW><id>20593404</id><snippet>frozenset()</snippet></ROW><ROW><id>20593404</id><snippet>seen = set()
hashable = lambda d: frozenset(d.items())
unique = [d for d in dictlist if hashable(d) not in seen and not seen.add(hashable(d))]
</snippet></ROW><ROW><id>20593404</id><snippet>unique = {frozenset(d.items()): d for d in dictlist}.values()
</snippet></ROW><ROW><id>20593580</id><snippet>__init.py_</snippet></ROW><ROW><id>20593580</id><snippet>MyPackage</snippet></ROW><ROW><id>20593580</id><snippet>ImportError: No module named MyPackage</snippet></ROW><ROW><id>20593580</id><snippet>__init__.py</snippet></ROW><ROW><id>20593580</id><snippet>__init__</snippet></ROW><ROW><id>20593580</id><snippet>.py</snippet></ROW><ROW><id>20593580</id><snippet>lower_underscore</snippet></ROW><ROW><id>20593588</id><snippet>Song</snippet></ROW><ROW><id>20593588</id><snippet>song_name.lower()</snippet></ROW><ROW><id>20593588</id><snippet>re.sub(' +', '_', song_name)</snippet></ROW><ROW><id>20593588</id><snippet>re.sub('-+', '_', song_name)</snippet></ROW><ROW><id>20593588</id><snippet>re.sub('[\(\)\[\]]', '', song_name)</snippet></ROW><ROW><id>20593588</id><snippet>re.sub('\.+', '_', song_name)</snippet></ROW><ROW><id>20593870</id><snippet>rolling_max</snippet></ROW><ROW><id>20593870</id><snippet>&gt;&gt;&gt; stockdata["Close"] == pd.rolling_max(stockdata["Close"], 5)
2013-09-23 09:30:00    False
2013-09-23 09:31:00    False
2013-09-23 09:32:00    False
2013-09-23 09:33:00    False
2013-09-23 09:34:00    False
2013-09-23 09:35:00     True
2013-09-23 09:36:00    False
2013-09-23 09:37:00    False
2013-09-23 09:38:00     True
2013-09-23 09:39:00     True
dtype: bool
</snippet></ROW><ROW><id>20593870</id><snippet>freq</snippet></ROW><ROW><id>20593870</id><snippet>1min</snippet></ROW><ROW><id>20593914</id><snippet>bufsize</snippet></ROW><ROW><id>20593914</id><snippet>0</snippet></ROW><ROW><id>20593914</id><snippet>write</snippet></ROW><ROW><id>20593914</id><snippet>EPIPE</snippet></ROW><ROW><id>20593914</id><snippet>subprocess</snippet></ROW><ROW><id>20593914</id><snippet>bufsize</snippet></ROW><ROW><id>20593914</id><snippet>-1</snippet></ROW><ROW><id>20593914</id><snippet>0</snippet></ROW><ROW><id>20593975</id><snippet>&gt;&gt;&gt; entry = '1.1 Ensure that all positions have current'
&gt;&gt;&gt; entry.split(' ',1)
['1.1', 'Ensure that all positions have current']
</snippet></ROW><ROW><id>20593975</id><snippet>&gt;&gt;&gt; re.split(r'(\d+\.?\d+)', entry)
['', '1.1', ' Ensure that all positions have current']
</snippet></ROW><ROW><id>20593975</id><snippet>re.split</snippet></ROW><ROW><id>20594063</id><snippet>df.index = pd.DatetimeIndex(df.index);</snippet></ROW><ROW><id>20594063</id><snippet>df</snippet></ROW><ROW><id>20594063</id><snippet>df = pd.DataFrame(data = [2,10,5,1], index = ["09-02-2013","09-03-2013","09-06-2013","09-07-2013"], columns = ["Events"])
</snippet></ROW><ROW><id>20594063</id><snippet>df.index = pd.DatetimeIndex(df.index);
</snippet></ROW><ROW><id>20594063</id><snippet>idx = pd.date_range('09-01-2013', '09-30-2013')  
df = df.reindex(idx)
</snippet></ROW><ROW><id>20594063</id><snippet>idx</snippet></ROW><ROW><id>20594063</id><snippet>df</snippet></ROW><ROW><id>20594063</id><snippet>df</snippet></ROW><ROW><id>20594063</id><snippet>df</snippet></ROW><ROW><id>20594116</id><snippet>'2013/12/15 20:44:59</snippet></ROW><ROW><id>20594116</id><snippet>timestamp = now.strftime("%Y/%m/%d %H:%M:%S")
</snippet></ROW><ROW><id>20594116</id><snippet>/</snippet></ROW><ROW><id>20594116</id><snippet>&gt;&gt;&gt; open('1/2/3', 'a')
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
IOError: [Errno 2] No such file or directory: '1/2/3'
&gt;&gt;&gt; open('1-2-3', 'a')
&lt;open file '1-2-3', mode 'a' at 0xb74bd128&gt;
</snippet></ROW><ROW><id>20594116</id><snippet>/</snippet></ROW><ROW><id>20594116</id><snippet>-</snippet></ROW><ROW><id>20594116</id><snippet>timestamp = now.strftime("%Y-%m-%d %H:%M:%S")
</snippet></ROW><ROW><id>20594179</id><snippet>{% load staticfiles %}
&lt;img src="{% static "my_app/myexample.jpg" %}" alt="My image"/&gt;
</snippet></ROW><ROW><id>20594247</id><snippet>clean_username</snippet></ROW><ROW><id>20594247</id><snippet>clean</snippet></ROW><ROW><id>20594247</id><snippet>clean_username</snippet></ROW><ROW><id>20594247</id><snippet>forms.ValidationError</snippet></ROW><ROW><id>20594450</id><snippet>json</snippet></ROW><ROW><id>20594450</id><snippet>import requests

url = 'http://api.worldweatheronline.com/free/v1/weather.ashx'
params = {'format': 'json',
          'num_of_days': 1, 'fx': 'no', 'cc': 'yes', 'key': 'sekret'}
params['zip'] = 90210

r = requests.get(url, params=params)
if r.status_code == 200:
   results = r.json()

print('Weather:
Current Temp: {0[temp_f]} F | {0[temp_c]} C
Humidity: {0[humidity]}%
Wind Speed: {0[windspeedMiles]} MPH'.format(results[0]))
</snippet></ROW><ROW><id>20594450</id><snippet>requests</snippet></ROW><ROW><id>20594476</id><snippet>functools.total_ordering</snippet></ROW><ROW><id>20594476</id><snippet>__lt__()</snippet></ROW><ROW><id>20594476</id><snippet>__le__()</snippet></ROW><ROW><id>20594476</id><snippet>__gt__()</snippet></ROW><ROW><id>20594476</id><snippet>__ge__()</snippet></ROW><ROW><id>20594476</id><snippet>__eq__()</snippet></ROW><ROW><id>20594509</id><snippet>c</snippet></ROW><ROW><id>20594509</id><snippet>c</snippet></ROW><ROW><id>20594509</id><snippet>list1 = ['o', 'k', 'q', 'a', 'j', 'd']
result = [chr((ord('o') + ord('q'))/2),'c']
list1[1] = result[0]
list1[4] = result[1]
print list1
</snippet></ROW><ROW><id>20594509</id><snippet>['o', 'p', 'q', 'a', 'c', 'd']
</snippet></ROW><ROW><id>20594551</id><snippet>0xEF</snippet></ROW><ROW><id>20594551</id><snippet>0x7F</snippet></ROW><ROW><id>20594621</id><snippet>if not sUserInt:
    #do something here
</snippet></ROW><ROW><id>20594621</id><snippet>sUserInt = raw_input()
if not sUserInt:
    print "Nothing Entered"
</snippet></ROW><ROW><id>20594621</id><snippet>Nothing Entered</snippet></ROW><ROW><id>20595264</id><snippet>now = till = from_dt = datetime.now()</snippet></ROW><ROW><id>20595264</id><snippet>In [6]: query1 = Blog.objects.filter(comment__created__gt=from_dt).filter(comment__created__lt=till)

In [7]: print query1.query
SELECT "myapp_blog"."id", "myapp_blog"."name" 
FROM "myapp_blog" 

    INNER JOIN "myapp_comment" 
    ON ("myapp_blog"."id" = "myapp_comment"."blog_id") 

    INNER JOIN "myapp_comment" T3 
    ON ("myapp_blog"."id" = T3."blog_id") 

WHERE ("myapp_comment"."created" &gt; 2013-12-15 15:54:50.633000  
AND T3."created" &lt; 2013-12-15 15:54:50.633000 )
</snippet></ROW><ROW><id>20595264</id><snippet>In [10]: query2 = Blog.objects.filter(comment__created__gt=from_dt, comment__created__lt=till)
In [11]: print query2.query
SELECT "myapp_blog"."id", "myapp_blog"."name" 
FROM "myapp_blog" 

    INNER JOIN "myapp_comment" 
    ON ("myapp_blog"."id" = "myapp_comment"."blog_id") 

WHERE ("myapp_comment"."created" &gt; 2013-12-15 15:54:50.633000  
AND "myapp_comment"."created" &lt; 2013-12-15
15:54:50.633000 )
</snippet></ROW><ROW><id>20595376</id><snippet>csv</snippet></ROW><ROW><id>20595376</id><snippet>csv.DictReader</snippet></ROW><ROW><id>20595376</id><snippet>namedtuple</snippet></ROW><ROW><id>20595376</id><snippet>for line in csvfile:
    yield BSYMRecord(**{k:v for k,v in line if k in BSYMRecord._fieldnames})
</snippet></ROW><ROW><id>20595376</id><snippet>ZipFile.open</snippet></ROW><ROW><id>20595376</id><snippet>import codecs
utf8 = codecs.lookup('utf8').streamreader
</snippet></ROW><ROW><id>20595376</id><snippet>for filename in zipfile.namelist():
    with zipfile.open(filename) as f:
        csvfile = csv.DictReader(utf8(f))
        for line in csvfile:
             yield BSYMRecord(**{k:v for k,v in line if k in BSYMRecord._fieldnames})
</snippet></ROW><ROW><id>20595385</id><snippet>pidof python | awk '{print "lsof -a -p "$1}' | bash
</snippet></ROW><ROW><id>20595385</id><snippet>COMMAND   PID   USER   FD   TYPE DEVICE SIZE/OFF   NODE NAME
python  19858 jazzpi  cwd    DIR    8,1    12288 135854 /home/jazzpi
python  19858 jazzpi  rtd    DIR    8,1     4096      2 /
python  19858 jazzpi  txt    REG    8,1  2728836 532918 /usr/bin/python2.7
python  19858 jazzpi  mem    REG    8,1   125424     57 /lib/i386-linux-gnu/libtinfo.so.5.9
python  19858 jazzpi  mem    REG    8,1   247008    237 /lib/i386-linux-gnu/libreadline.so.6.2
python  19858 jazzpi  mem    REG    8,1    21648 131133 /usr/lib/python2.7/lib-dynload/readline.so
python  19858 jazzpi  mem    REG    8,1  2965552 530650 /usr/lib/locale/locale-archive
python  19858 jazzpi  mem    REG    8,1   114788     13 /lib/i386-linux-gnu/libgcc_s.so.1
python  19858 jazzpi  mem    REG    8,1  1437864   4337 /lib/i386-linux-gnu/i686/cmov/libc-2.13.so
python  19858 jazzpi  mem    REG    8,1   148996   4334 /lib/i386-linux-gnu/i686/cmov/libm-2.13.so
python  19858 jazzpi  mem    REG    8,1    95896    129 /lib/i386-linux-gnu/libz.so.1.2.7
python  19858 jazzpi  mem    REG    8,1     9800   4326 /lib/i386-linux-gnu/i686/cmov/libutil-2.13.so
python  19858 jazzpi  mem    REG    8,1     9844   4330 /lib/i386-linux-gnu/i686/cmov/libdl-2.13.so
python  19858 jazzpi  mem    REG    8,1   117009   4327 /lib/i386-linux-gnu/i686/cmov/libpthread-2.13.so
python  19858 jazzpi  mem    REG    8,1    26064 523330 /usr/lib/i386-linux-gnu/gconv/gconv-modules.cache
python  19858 jazzpi  mem    REG    8,1   117960     35 /lib/i386-linux-gnu/ld-2.13.so
python  19858 jazzpi    0u   CHR  136,3      0t0      6 /dev/pts/3
python  19858 jazzpi    1u   CHR  136,3      0t0      6 /dev/pts/3
python  19858 jazzpi    2u   CHR  136,3      0t0      6 /dev/pts/3
</snippet></ROW><ROW><id>20595385</id><snippet>variable</snippet></ROW><ROW><id>20595468</id><snippet>%s</snippet></ROW><ROW><id>20595468</id><snippet>cursor.execute("INSERT INTO " + mysql_localhost_database +".hadith" +
                   " (hadith,translated_hadith,topic)" + " VALUES (%s, %s, %s)",
               (arabic_hadith, english_hadith, topic))
</snippet></ROW><ROW><id>20595468</id><snippet>'</snippet></ROW><ROW><id>20595468</id><snippet>%s</snippet></ROW><ROW><id>20595468</id><snippet>%</snippet></ROW><ROW><id>20595468</id><snippet>%</snippet></ROW><ROW><id>20595468</id><snippet>'</snippet></ROW><ROW><id>20595649</id><snippet>HttpResponse</snippet></ROW><ROW><id>20595649</id><snippet>response.content</snippet></ROW><ROW><id>20595649</id><snippet>response = another_view(request)
rendered_html_text = response.content
</snippet></ROW><ROW><id>20595649</id><snippet>HttpResponse</snippet></ROW><ROW><id>20595649</id><snippet>base.html</snippet></ROW><ROW><id>20595856</id><snippet>__init__</snippet></ROW><ROW><id>20595856</id><snippet>__init__</snippet></ROW><ROW><id>20595856</id><snippet>x</snippet></ROW><ROW><id>20595856</id><snippet>__init__</snippet></ROW><ROW><id>20595856</id><snippet>self</snippet></ROW><ROW><id>20595856</id><snippet>__init__</snippet></ROW><ROW><id>20595856</id><snippet>x</snippet></ROW><ROW><id>20595881</id><snippet>Image.fromarray()</snippet></ROW><ROW><id>20595881</id><snippet>PIL/Image.py</snippet></ROW><ROW><id>20595881</id><snippet>_fromarray_typemap</snippet></ROW><ROW><id>20595881</id><snippet>imarray</snippet></ROW><ROW><id>20595881</id><snippet>fromarray</snippet></ROW><ROW><id>20595881</id><snippet>np.uint8( ... )</snippet></ROW><ROW><id>20596684</id><snippet>final={}  
for classes in soup.find_all("div", "AssignmentClass"):
    grades = classes.findAll("span")[5]
    periods = classes.findAll("a", "asmt_link")
    for p, g in zip(periods, grades):
                final.setdefault(p.get_text(), g)
</snippet></ROW><ROW><id>20596684</id><snippet>{'Period 1': 97.00000, 'Period 2': 84.93440, 'Period 3': 25.83333, 'Period 4': 86.38029, 'Period 5': 86.15000, 'Period 6':  86.87500, 'Period 7': 66.76380}
</snippet></ROW><ROW><id>20596777</id><snippet>def counts(x, y, z):
    if(x + y + z &gt; 1000):
        return

    if x + y + z == 1000:
        print(" {} coin $1 , {} coin $2 , {} coin $5".format(x,y/2,z/5))

    counts(x+1, y, z)
    counts(x, y+2, z)
    counts(x, y, z+5)


counts(1, 2, 5)
</snippet></ROW><ROW><id>20597176</id><snippet>self.request.params.getall('some_list')
</snippet></ROW><ROW><id>20597345</id><snippet>grid</snippet></ROW><ROW><id>20597345</id><snippet>None</snippet></ROW><ROW><id>20597345</id><snippet>grid</snippet></ROW><ROW><id>20597345</id><snippet>command</snippet></ROW><ROW><id>20597345</id><snippet>lambda</snippet></ROW><ROW><id>20597345</id><snippet>from Tkinter import Tk, Button, GROOVE

root = Tk()

def appear(index, letter):
    # This line would be where you insert the letter in the textbox
    print letter

    # Disable the button by index
    buttons[index].config(state="disabled")

letters=["A", "T", "D", "M", "E", "A", "S", "R", "M"]

# A collection (list) to hold the references to the buttons created below
buttons = []

for index in range(9): 
    n=letters[index]

    button = Button(root, bg="White", text=n, width=5, height=1, relief=GROOVE,
                    command=lambda index=index, n=n: appear(index, n))

    # Add the button to the window
    button.grid(padx=2, pady=2, row=index%3, column=index/3)

    # Add a reference to the button to 'buttons'
    buttons.append(button)

root.mainloop()
</snippet></ROW><ROW><id>20597450</id><snippet>10^(-3)</snippet></ROW><ROW><id>20597450</id><snippet>^</snippet></ROW><ROW><id>20597450</id><snippet>**</snippet></ROW><ROW><id>20597450</id><snippet>3/2</snippet></ROW><ROW><id>20597450</id><snippet>from __future__ import division</snippet></ROW><ROW><id>20597450</id><snippet>if (w[3]/w[4]-w[2]/w[1])&gt;prec:</snippet></ROW><ROW><id>20597450</id><snippet>w[4]/w[3]</snippet></ROW><ROW><id>20597450</id><snippet>w[3]/w[4]</snippet></ROW><ROW><id>20597450</id><snippet>prec</snippet></ROW><ROW><id>20597450</id><snippet>while</snippet></ROW><ROW><id>20597450</id><snippet>if</snippet></ROW><ROW><id>20597450</id><snippet>from __future__ import division
from math import *

def restriction(x,a,b,c,d):

    if x&lt;(a+b)/(c+d):
        return [x,a,b,a+c,b+d]
    if x&gt;(a+b)/(c+d):
        return [x,a+c,b+d,c,d]

def cancres(x,a,b,c,d,prec):

    if x==a/b or x==c/d:
        return x
    elif x&lt;a/b or x&gt;c/d:
        return False
    else:
        w=restriction(x,a,b,c,d)
        i=0
        while (abs(w[4]/w[3]-w[2]/w[1]))&gt;prec:
            w=restriction(x,w[1],w[2],w[3],w[4])
            print w
            i+=1
    return w

print cancres(sqrt(3),3,2,2,1,10**(-3))
</snippet></ROW><ROW><id>20597579</id><snippet>django.contrib.admin.views.main.ChangeList.__init__</snippet></ROW><ROW><id>20597579</id><snippet>    # ...
    if self.is_popup:
        title = ugettext('Select %s')
    else:
        title = ugettext('Select %s to change')
    self.title = title % force_text(self.opts.verbose_name)
    # ...
</snippet></ROW><ROW><id>20597579</id><snippet>from django.contrib.admin.views.main import ChangeList
class NewTitleChangeList(ChangeList):
    def __init__(self, *args, **kwargs):
        super(NewTitleChangeList, self).__init__(*args, **kwargs)
        self.title = "&lt;New Title Here&gt;"

class YourAdmin(admin.ModelAdmin):
    def get_changelist(self, request, **kwargs):
        return NewTitleChangeList
</snippet></ROW><ROW><id>20597588</id><snippet>wl=['A', 'Aani', 'Aaron', 'Aaronic', 'Aaronical', 'Aaronite', 'Aaronitic', 'Aaru', 'Ab', 'Ababdeh']
wlc=[['A','0'], ['Aaronic','1'], ['Key','2'], ['Aaronical','3'], ['Aaronite','4'], ['Yes','5']]

print [[word, i] for word,i in wlc if word in wl]    
# [['A', '0'], ['Aaronic', '1'], ['Aaronical', '3'], ['Aaronite', '4']]
</snippet></ROW><ROW><id>20597588</id><snippet>print [li for li in wlc if li[0] in wl]   
</snippet></ROW><ROW><id>20597588</id><snippet>wlf = []
for word, i in wlc:
    if word in wl:
        wlf.append([word,i])

print wlf       
# [['A', '0'], ['Aaronic', '1'], ['Aaronical', '3'], ['Aaronite', '4']]
</snippet></ROW><ROW><id>20597588</id><snippet>enumerate</snippet></ROW><ROW><id>20597588</id><snippet>wordlist_compound</snippet></ROW><ROW><id>20597588</id><snippet>wordlist</snippet></ROW><ROW><id>20597588</id><snippet>wordlist_compound</snippet></ROW><ROW><id>20597588</id><snippet>wordlist</snippet></ROW><ROW><id>20597588</id><snippet>wordlist_compound</snippet></ROW><ROW><id>20597588</id><snippet>filter</snippet></ROW><ROW><id>20597588</id><snippet>print filter(lambda li: li[0] in wl, wlc)
# [['A', '0'], ['Aaronic', '1'], ['Aaronical', '3'], ['Aaronite', '4']]
</snippet></ROW><ROW><id>20597593</id><snippet>snapshot()</snippet></ROW><ROW><id>20597593</id><snippet>_id</snippet></ROW><ROW><id>20597593</id><snippet>_id</snippet></ROW><ROW><id>20597593</id><snippet>cursor = collection.find(spec={},snapshot=True)
</snippet></ROW><ROW><id>20597593</id><snippet>find()</snippet></ROW><ROW><id>20597704</id><snippet>software_list</snippet></ROW><ROW><id>20597704</id><snippet>result = Software.objects.filter(reduce(operator.and_, result))</snippet></ROW><ROW><id>20597704</id><snippet>    if 'deployment_model' in request.GET:
        ...
        result.append(depquery)

        result = Software.objects.filter(reduce(operator.and_, result))
</snippet></ROW><ROW><id>20597704</id><snippet>    if 'deployment_model' in request.GET:
        ...
        result.append(depquery)

    result = Software.objects.filter(reduce(operator.and_, result))
</snippet></ROW><ROW><id>20597704</id><snippet>def software_list(request):

    if request.method == 'GET':
        result = []
        if 'industry' in request.GET and 'industry' is not None:
            formattedq = request.GET
            #QueryDict instance is immutable so we need to make a copy
            formattedq = formattedq.copy()
            formattedq = formattedq.getlist('industry')
            softquery = Q(industries__id__in=[ind for ind in formattedq])
            #debugformattedq = formattedq
            result.append(softquery)

        if 'deployment_model' in request.GET:
            formattedq = request.GET
            #QueryDict instance is immutable so we need to make a copy
            formattedq = formattedq.copy()
            formattedq = formattedq.getlist('deployment_model')
            depquery = Q(deploymentmodels__id__in=[ind for ind in formattedq])
            #debugformattedq = formattedq
            result.append(depquery)

        result = Software.objects.filter(reduce(operator.and_, result))
    else:
        SoftwareSearchForm()
    return render_to_response('software_list.html',
        {
        #'software_list':results,
        'SoftwareSearchForm':SoftwareSearchForm,
        'formattedq':result,
        },
        context_instance = RequestContext(request)
        )

    return render_to_response('software_list.html', {'SoftwareSearchForm':SoftwareSearchForm})
</snippet></ROW><ROW><id>20597704</id><snippet>if 'industry' in request.GET and 'industry' is not None:</snippet></ROW><ROW><id>20597704</id><snippet>if 'industry' in request.GET and request.GET['industry'] is not None:
</snippet></ROW><ROW><id>20597704</id><snippet>if request.GET.get('industry') is not None:
</snippet></ROW><ROW><id>20597717</id><snippet>/**
 * execute $cmd in the background without PHP waiting for it to finish
*/
function execInBackground($cmd) { 
    if (substr(php_uname(), 0, 7) == "Windows"){ 
        pclose(popen("start /B ". $cmd, "r"));  
    } 
    else { 
        exec($cmd . " &gt; /dev/null &amp;");   
    } 
} 
</snippet></ROW><ROW><id>20597717</id><snippet>&lt;html lang="en"&gt;
&lt;head&gt;
    &lt;title&gt;Data_analysis&lt;/title&gt;
&lt;/head&gt;
&lt;body&gt;
&lt;?php 
 echo " data analysis script started ";
 echo execInBackground('sh   /Users/Data/myproject/run_virt_da_py.sh');
 echo "data analysis script has been started";
 ?&gt;
&lt;/body&gt;
&lt;/html&gt;  
</snippet></ROW><ROW><id>20597929</id><snippet>total</snippet></ROW><ROW><id>20597929</id><snippet>def roll():
    for i in range(100):
        roll_d=random.randint(1,6), random.randint(1,6) 
        total.extend(roll_d)
        print(roll_d)
</snippet></ROW><ROW><id>20597929</id><snippet>total.extend()</snippet></ROW><ROW><id>20597929</id><snippet>total</snippet></ROW><ROW><id>20597929</id><snippet>def roll():
    for i in range(100):
        roll_d=random.randint(1,6), random.randint(1,6) 
        total.append(roll_d[0] + roll_d[1])
        print(roll_d)
</snippet></ROW><ROW><id>20597929</id><snippet>sum()</snippet></ROW><ROW><id>20597929</id><snippet>s = sum(r for pair in total for r in pair)
</snippet></ROW><ROW><id>20598074</id><snippet> def function():            
            from prettytable import *
            table = PrettyTable(["Teacher","Student"," ID","GPA"," Last sign learned "])
            table.add_row(["Medina","John doe","19500688","4.0","Bad"])
            table.add_row(["Medina","Samantha babcock ","91234094","2.5","Toilet"])
            table.add_row(["Jonson","Steven smith","64721881","3.0","Santa"])
            return render_template("info.html", tbl=table.get_html_string(attributes = {"class": "foo"}))
</snippet></ROW><ROW><id>20598074</id><snippet>{%extends "template.html"%}
    {{tbl|safe}}
</snippet></ROW><ROW><id>20598357</id><snippet>unrelated instance</snippet></ROW><ROW><id>20598357</id><snippet>TypeError</snippet></ROW><ROW><id>20598357</id><snippet>IndexError</snippet></ROW><ROW><id>20598357</id><snippet>ValueError</snippet></ROW><ROW><id>20598658</id><snippet>Win32GUI</snippet></ROW><ROW><id>20598658</id><snippet>input()</snippet></ROW><ROW><id>20598658</id><snippet>Console</snippet></ROW><ROW><id>20598709</id><snippet>class Expr:
    '''An Expr can be built with two different calls:
           -Expr(number) to build a literal expression
           -Expr(a, op, b) to build a complex expression. 
            There a and b will be of type Expr,
            and op will be one of ('+','-', '*', '/').
    '''
    def __init__(self, *args):
        if len(args) == 1:
            self.left = self.right = self.op = None
            self.value = args[0]
        else:
            self.left = args[0]
            self.right = args[2]
            self.op = args[1]
            if self.op == '+':
                self.value = self.left.value + self.right.value
            elif self.op == '-':
                self.value = self.left.value - self.right.value
            elif self.op == '*':
                self.value = self.left.value * self.right.value
            elif self.op == '/':
                self.value = self.left.value // self.right.value

    def __str__(self):
        '''It can be done smarter not to print redundant parentheses,
           but that is out of the scope of this problem.
        '''
        if self.op:
            return "({0}{1}{2})".format(self.left, self.op, self.right)
        else:
            return "{0}".format(self.value)
</snippet></ROW><ROW><id>20598709</id><snippet>itertools</snippet></ROW><ROW><id>20598709</id><snippet>itertools.combinations()</snippet></ROW><ROW><id>20598709</id><snippet>itertools.permutations()</snippet></ROW><ROW><id>20598709</id><snippet>permutations()</snippet></ROW><ROW><id>20598709</id><snippet>combinations()</snippet></ROW><ROW><id>20598709</id><snippet>import itertools
OPS = ('+', '-', '*', '/')
def SearchTrees(current, target):
    ''' current is the current set of expressions.
        target is the target number.
    '''
    for a,b in itertools.combinations(current, 2):
        current.remove(a)
        current.remove(b)
        for o in OPS:
            # This checks whether this operation is commutative
            if o == '-' or o == '/':
                conmut = ((a,b), (b,a))
            else:
                conmut = ((a,b),)

            for aa, bb in conmut:
                # You do not specify what to do with the division.
                # I'm assuming that only integer divisions are allowed.
                if o == '/' and (bb.value == 0 or aa.value % bb.value != 0):
                    continue
                e = Expr(aa, o, bb)
                # If a solution is found, print it
                if e.value == target:
                    print(e.value, '=', e)
                current.add(e)
                # Recursive call!
                SearchTrees(current, target)
                # Do not forget to leave the set as it were before
                current.remove(e)
        # Ditto
        current.add(b)
        current.add(a)
</snippet></ROW><ROW><id>20598709</id><snippet>NUMBERS = [4, 8, 6, 2, 15, 50]
TARGET = 590

initial = set(map(Expr, NUMBERS))
SearchTrees(initial, TARGET)
</snippet></ROW><ROW><id>20598733</id><snippet>make install</snippet></ROW><ROW><id>20598733</id><snippet>libhello.so</snippet></ROW><ROW><id>20598733</id><snippet>libhello.so</snippet></ROW><ROW><id>20598733</id><snippet>LD_LIBRARY_PATH</snippet></ROW><ROW><id>20598791</id><snippet>.daemon = True</snippet></ROW><ROW><id>20598791</id><snippet>sys</snippet></ROW><ROW><id>20598791</id><snippet>sys.stderr</snippet></ROW><ROW><id>20598791</id><snippet>.daemon = True</snippet></ROW><ROW><id>20598791</id><snippet>maxsize=0</snippet></ROW><ROW><id>20598791</id><snippet>Queue()</snippet></ROW><ROW><id>20598791</id><snippet>maxsize=0</snippet></ROW><ROW><id>20598791</id><snippet>maxsize=0</snippet></ROW><ROW><id>20598791</id><snippet>collections.deque</snippet></ROW><ROW><id>20598820</id><snippet>phrase = raw_input("Enter a phrase to reverse: ")
end = (len(phrase))-1
mystr = ""
for index in range (end,-1,-1):
    mystr += phrase[index]
print mystr
</snippet></ROW><ROW><id>20598820</id><snippet>reversedstr = mystr[::-1]
</snippet></ROW><ROW><id>20598820</id><snippet>reversedstr = ''.join(reversed(mystr))
</snippet></ROW><ROW><id>20598820</id><snippet>reversed</snippet></ROW><ROW><id>20598820</id><snippet>''.join</snippet></ROW><ROW><id>20598862</id><snippet>#allTitles =  re.compile('&lt;title&gt;(.*)&lt;/title&gt;')
allTitles =  re.compile('&lt;title&gt;(.*?)&lt;/title&gt;')
</snippet></ROW><ROW><id>20598862</id><snippet>?</snippet></ROW><ROW><id>20598862</id><snippet>&lt;/title&gt;</snippet></ROW><ROW><id>20598977</id><snippet>^[A-Za-z][^/]*(///[^/]*)?$
</snippet></ROW><ROW><id>20599136</id><snippet>.read()</snippet></ROW><ROW><id>20599136</id><snippet>"wb"</snippet></ROW><ROW><id>20599136</id><snippet>"rb"</snippet></ROW><ROW><id>20599136</id><snippet>"wb"</snippet></ROW><ROW><id>20599136</id><snippet>"ab"</snippet></ROW><ROW><id>20599136</id><snippet>'+'</snippet></ROW><ROW><id>20599136</id><snippet>"ab+"</snippet></ROW><ROW><id>20599136</id><snippet>with open("filepath/file.ext", "ab+") as fo:
    old = fo.read() # this auto closes the file after reading, which is a good practice
    fo.write("something") # to the end of the file
</snippet></ROW><ROW><id>20599255</id><snippet>XBateau_deux_joueur = XBateau_deux_joueur + 1
</snippet></ROW><ROW><id>20599255</id><snippet>tableau_joueur[XBateau_deux_joueur][YBateau_deux_joueur] = 1
</snippet></ROW><ROW><id>20599255</id><snippet>def Grille(): #définition du tableau qui servira de grille
    global XBateau_deux_joueur
    . . .
</snippet></ROW><ROW><id>20599372</id><snippet>def split_at(text, delimiter, opens='&lt;([', closes='&gt;)]', quotes='"\''):
    result = []
    buff = ""
    level = 0
    is_quoted = False

    for char in text:
        if char in delimiter and level == 0 and not is_quoted:
            result.append(buff)
            buff = ""
        else:
            buff += char

            if char in opens:
                level += 1
            if char in closes:
                level -= 1
            if char in quotes:
                is_quoted = not is_quoted

    if not buff == "":
        result.append(buff)

    return result
</snippet></ROW><ROW><id>20599372</id><snippet>&gt;&gt;&gt; split_at('obj&lt;1, 2, 3&gt;, x(4, 5), "msg, with comma"', ',')                                                                                                                                 
#=&gt;['obj&lt;1, 2, 3&gt;', ' x(4, 5)', ' "msg with comma"']
</snippet></ROW><ROW><id>20599493</id><snippet>functions = {
    "abs":"syntax: abs(number), use:The abs function is used to determine the absolute value",
    "ro":"syntax: round(number), use: The round function is used to round a number down"
}

fnct = None

while fnct not in functions:
    fnct = raw_input("Choose a function: abs, ro :")

print(functions[fnct])
</snippet></ROW><ROW><id>20599493</id><snippet>functions</snippet></ROW><ROW><id>20599493</id><snippet>fnct = None</snippet></ROW><ROW><id>20599493</id><snippet>input</snippet></ROW><ROW><id>20599493</id><snippet>KeyError</snippet></ROW><ROW><id>20599493</id><snippet>fnct</snippet></ROW><ROW><id>20599569</id><snippet>SafeConfigParser</snippet></ROW><ROW><id>20599569</id><snippet>ExtendedConfigParser</snippet></ROW><ROW><id>20599569</id><snippet>cfg_parser = ExtendedConfigParser(config_file='my_file.cfg')
</snippet></ROW><ROW><id>20599569</id><snippet>SafeConfigParser</snippet></ROW><ROW><id>20599569</id><snippet>config_file</snippet></ROW><ROW><id>20599569</id><snippet>*args</snippet></ROW><ROW><id>20599569</id><snippet>**kwargs</snippet></ROW><ROW><id>20599569</id><snippet>config_file</snippet></ROW><ROW><id>20599569</id><snippet>ExtendedConfigParser</snippet></ROW><ROW><id>20599569</id><snippet>SafeConfigParser</snippet></ROW><ROW><id>20599569</id><snippet>__init__</snippet></ROW><ROW><id>20599569</id><snippet>ExtendedConfigParser</snippet></ROW><ROW><id>20599569</id><snippet>class ExtendedConfigParser(SafeConfigParser):

    def __init__(config_file='', *args, **kwargs):
        self.config_file = config_file
        SafeConfigParser.__init__(self, *args, **kwargs)
</snippet></ROW><ROW><id>20599569</id><snippet>ExtendedConfigParser</snippet></ROW><ROW><id>20599569</id><snippet>SafeConfigParser</snippet></ROW><ROW><id>20599611</id><snippet>parser = argparse.ArgumentParser()
parser.add_argument("operation", help="mathematical operation that will be performed", 
    choices=['add', 'subtract', 'multiply', 'divide'])
parser.add_argument("num1", help="the first number", type=int)
parser.add_argument("num2", help="the second number", type=int)
args = parser.parse_args()
</snippet></ROW><ROW><id>20599611</id><snippet>"""Calculator using docopt

Usage:
  calc_docopt.py operation &lt;num1&gt; &lt;num2&gt;
  calc_docopt.py (-h | --help)

Arguments
  &lt;operation&gt; Math Operation
  &lt;num1&gt; First Number
  &lt;num2&gt; Second Number

Options:
  -h --help     Show this screen.

"""
from docopt import docopt

if __name__ == '__main__':
    arguments = docopt(__doc__, version='Calculator with docopt')
    print(arguments)
</snippet></ROW><ROW><id>20599888</id><snippet>B</snippet></ROW><ROW><id>20599888</id><snippet>class B:
  def __init__(self, someinfo, a_instance):
    self.someinfo = someinfo
    self.a_instance = a_instance

  def send_message_to_a(self):
     self.a_instance.a_function(self.someinfo)

a = A()
bs = [B('hi', a) for i in range(random.randint(1, 10))]
for b in bs:
    b.send_message_to_a() # calls the a function passing someinfo
</snippet></ROW><ROW><id>20599913</id><snippet>OOOXXXXX
OOOXXXXX
OOOXXXXX
</snippet></ROW><ROW><id>20599913</id><snippet>XXXXXX
XXXXXX
XXXXXX
</snippet></ROW><ROW><id>20599943</id><snippet>{1: {'downs': [], 'ups': [2, 3], 'node_type': 1}, 
 2: {'downs': [1, 3], 'ups': [], 'node_type': 1}, 
 3: {'downs': [2], 'ups': [1], 'node_type': 2}}
</snippet></ROW><ROW><id>20599943</id><snippet>def parse_chunk(chunk):
    node_id = int(chunk[0])
    node_type = int(chunk[1])

    nb_up = int(chunk[2])
    if nb_up:
        ups = map(int, chunk[3].split())
        next_pos = 4
    else:
        ups = []
        next_pos = 3

    nb_down = int(chunk[next_pos])
    if nb_down:
        downs = map(int, chunk[next_pos+1].split())
    else:
        downs = []

    return node_id, dict(
        node_type=node_type,
        ups=ups,
        downs=downs
        )

def collect_chunks(lines):
    chunk = []
    for line in lines:
        line = line.strip()
        if line:
            chunk.append(line)
        else:
            yield chunk
            chunk = []
    if chunk:
        yield chunk

def parse(stream):
    nb_nodes = int(stream.next().strip())
    if not nb_nodes:
        return []
    stream.next()
    return dict(parse_chunk(chunk) for chunk in collect_chunks(stream))

def main(*args):
    with open(args[0], "r") as f:
        print parse(f)

if __name__ == "__main__":
    import sys
    main(*sys.argv[1:])
</snippet></ROW><ROW><id>20599948</id><snippet>self.a</snippet></ROW><ROW><id>20599948</id><snippet>numpy.int32(self.a)</snippet></ROW><ROW><id>20599948</id><snippet>self.program.integrate_f(self.queue, (self.a,), None, numpy.int32(self.a), self.dest_buf)
</snippet></ROW><ROW><id>20600240</id><snippet>form.save_m2m()</snippet></ROW><ROW><id>20600240</id><snippet>commit=False</snippet></ROW><ROW><id>20600240</id><snippet>modified_by</snippet></ROW><ROW><id>20600240</id><snippet>widget=forms.CheckboxSelectMultiple</snippet></ROW><ROW><id>20600240</id><snippet>widget=forms.CheckboxSelectMultiple()</snippet></ROW><ROW><id>20600240</id><snippet>ModelForm</snippet></ROW><ROW><id>20600240</id><snippet>subnet</snippet></ROW><ROW><id>20600240</id><snippet>exclude</snippet></ROW><ROW><id>20600240</id><snippet>modified_by</snippet></ROW><ROW><id>20600240</id><snippet>subnet</snippet></ROW><ROW><id>20600240</id><snippet>meta</snippet></ROW><ROW><id>20600278</id><snippet>B = [2, 6, 5, 4, 2]
C = [6, 8, 7, 9, 6]
B[1:2] = C
print B
</snippet></ROW><ROW><id>20600278</id><snippet>[2, 6, 8, 7, 9, 6, 5, 4, 2]
</snippet></ROW><ROW><id>20600378</id><snippet>df = pd.DataFrame( { 'score':np.random.randn( 6 ),
                     'person':[ x*3 for x in list('ABCDEF') ]})

ax = plt.subplot( 111 )
df.score.plot( ax=ax, kind='barh', color=list('rgbkym'), title='ranking' )
ax.axis( 'off' )
for i, x in enumerate( df.person ):
    ax.text( 0, i + .5, x, ha='right', fontsize='large' )
</snippet></ROW><ROW><id>20600378</id><snippet>  person  score
0    AAA   1.79
1    BBB   0.31
2    CCC  -0.52
3    DDD   1.59
4    EEE   0.59
5    FFF  -1.03
</snippet></ROW><ROW><id>20600722</id><snippet>dict.items()</snippet></ROW><ROW><id>20600722</id><snippet>paychecks = {paycheck.ID: paycheck
    for key, employee in employees.items()
    for paycheck in employee.paychecks}
</snippet></ROW><ROW><id>20600722</id><snippet>employees</snippet></ROW><ROW><id>20600722</id><snippet>employee</snippet></ROW><ROW><id>20600722</id><snippet>for</snippet></ROW><ROW><id>20600722</id><snippet>for key, employee in employees.items():
    for paycheck in employee.paychecks:
        paychecks[paycheck.ID] = paycheck
</snippet></ROW><ROW><id>20600722</id><snippet>NameError</snippet></ROW><ROW><id>20600722</id><snippet>employee</snippet></ROW><ROW><id>20600722</id><snippet>for paycheck in employee.paychecks:
    for key, employee in employees.items():
        paychecks[paycheck.ID] = paycheck
</snippet></ROW><ROW><id>20600722</id><snippet>employee</snippet></ROW><ROW><id>20600896</id><snippet>args = ([],)
</snippet></ROW><ROW><id>20600896</id><snippet>get_strategy()</snippet></ROW><ROW><id>20600896</id><snippet>request</snippet></ROW><ROW><id>20600896</id><snippet>get_strategy("backends", "strategy", "storage", [],
             request="myReq", backend="myBackend", redirect_uri=None, 
             acess_token="myAccToken", id="myId")
</snippet></ROW><ROW><id>20600896</id><snippet>backends</snippet></ROW><ROW><id>20600896</id><snippet>strategy</snippet></ROW><ROW><id>20600896</id><snippet>storage</snippet></ROW><ROW><id>20600896</id><snippet>request</snippet></ROW><ROW><id>20600896</id><snippet>args</snippet></ROW><ROW><id>20600896</id><snippet>args = ()
</snippet></ROW><ROW><id>20600896</id><snippet>&gt;&gt;&gt; def get_strategy(backends, strategy, storage, request=None, backend=None, *args, **kwargs):
...     print request
... 
&gt;&gt;&gt; def load_strategy(*args, **kwargs):
...     get_strategy("backends", "strategy", "storage", *args, **kwargs)
... 
&gt;&gt;&gt; args = ()
&gt;&gt;&gt; kwargs = {"acess_token":"myAccToken", "id":"myId"}
&gt;&gt;&gt; load_strategy(request="myReq", backend="myBackend", redirect_uri=None, *args, **kwargs)
myReq
</snippet></ROW><ROW><id>20601114</id><snippet>url(r"^$",TemplateView.as_view(template_name="index.html"))  
# no comma at the end here --------------------------------^
url(r'^admin/', include(admin.site.urls))  
</snippet></ROW><ROW><id>20601114</id><snippet>url() url()</snippet></ROW><ROW><id>20601114</id><snippet>urlpatterns = patterns('',
    url(r"^$",TemplateView.as_view(template_name="index.html")),
    url(r'^admin/', include(admin.site.urls))  
)  
</snippet></ROW><ROW><id>20601138</id><snippet>rolling_std</snippet></ROW><ROW><id>20601138</id><snippet>ddof</snippet></ROW><ROW><id>20601138</id><snippet>ddof=1</snippet></ROW><ROW><id>20601138</id><snippet>np.std</snippet></ROW><ROW><id>20601138</id><snippet>&gt;&gt;&gt; [np.std(timeseries[max(i-periods+1,0):i+1], ddof=1) for i in np.arange(10)]
[nan, 0.70710678118654757, 1.0, 1.2909944487358056, 1.2909944487358056, 1.2909944487358056, 1.2909944487358056, 1.29099444873580
56, 1.2909944487358056, 1.2909944487358056]
</snippet></ROW><ROW><id>20601138</id><snippet>ddof=0</snippet></ROW><ROW><id>20601138</id><snippet>rolling_std</snippet></ROW><ROW><id>20601138</id><snippet>&gt;&gt;&gt; pd.stats.moments.rolling_std(timeseries, periods, ddof=0)
array([        nan,         nan,         nan,  1.11803399,  1.11803399,
        1.11803399,  1.11803399,  1.11803399,  1.11803399,  1.11803399])
</snippet></ROW><ROW><id>20601510</id><snippet>import random
word = raw_input("Enter a word: ")

charlst = list(word)        # convert the string into a list of characters
random.shuffle(charlst)     # shuffle the list of characters randomly
new_word = ''.join(charlst) # convert the list of characters back into a string
</snippet></ROW><ROW><id>20601672</id><snippet>minutes degree = 360 / 12 / 60 = 0.5
</snippet></ROW><ROW><id>20601672</id><snippet>def clockangles(hour, minute):
    return (hour * 30 + minute * 0.5) - (minute * 6)
</snippet></ROW><ROW><id>20601672</id><snippet>def clockangles(hour, minute):
    return abs((hour * 30 + minute * 0.5) - (minute * 6))
</snippet></ROW><ROW><id>20601672</id><snippet>def clockangles(hour, minute):
    ans = abs((hour * 30 + minute * 0.5) - (minute * 6))
    return min(360-ans,ans)
</snippet></ROW><ROW><id>20601723</id><snippet>^image/upload</snippet></ROW><ROW><id>20601723</id><snippet>r'^image/upload$'
</snippet></ROW><ROW><id>20601723</id><snippet>r'^image/upload/$'
</snippet></ROW><ROW><id>20601786</id><snippet>p = subprocess.Popen(cmd, shell=False, stdout=subprocess.PIPE)
somestr = p.stdout.readline()
</snippet></ROW><ROW><id>20601803</id><snippet>// get all documents that contain ancestors._id = $bop_id, only return the 'parent_id' field
$result = $db-&gt;categories-&gt;find(array('ancestors._id' =&gt; $bop_id), array('parent_id' =&gt; 1));

foreach ($result as $document) {
    build_ancestors_full($document['_id'], $document['parent_id']);
}
</snippet></ROW><ROW><id>20601803</id><snippet>function build_ancestors_full($id, $parent_id) {
    $ancestors = array();
    while ($parent_id != null) {
        $parent = $db-&gt;categories-&gt;find_one(
            array('_id' =&gt; parent_id),
            array('parent' =&gt; 1, 'name' =&gt; 1, 'slug' =&gt; 1, 'ancestors' =&gt; 1));
        $parent_id = $parent['parent'];
        unset($parent['parent']);
        // array push
        $ancestors[] = $parent;
    } 
    $result = $db-&gt;categories-&gt;update(
        array('_id' =&gt; _id),
        array('$set' =&gt;  array('ancestors' =&gt; $ancestors ) ));
}
</snippet></ROW><ROW><id>20601985</id><snippet>y=(Ay-By)/(Ax-Bx)*(x-Ax)+Ay</snippet></ROW><ROW><id>20601985</id><snippet>x=(Ay-By)/(Ax-Bx)*(x-Ay)+Ax</snippet></ROW><ROW><id>20601985</id><snippet>math.sqrt((Ax-Bx)**2+(Ay-By)**2)</snippet></ROW><ROW><id>20602012</id><snippet>.egg</snippet></ROW><ROW><id>20602012</id><snippet>sqlalchemy</snippet></ROW><ROW><id>20602012</id><snippet>site-packages</snippet></ROW><ROW><id>20602013</id><snippet>io.TextIOWrapper</snippet></ROW><ROW><id>20602013</id><snippet>io.TestIOWrapper</snippet></ROW><ROW><id>20602013</id><snippet># the rest of the code as above, then:
with zfile.open(name, 'rU') as readFile:
    line = readFile.readline().decode('utf8')
    # etc
</snippet></ROW><ROW><id>20602013</id><snippet>codecs.iterdecode</snippet></ROW><ROW><id>20602013</id><snippet>readline()</snippet></ROW><ROW><id>20602013</id><snippet>with zfile.open(name, 'rU') as readFile:
    for line in codecs.iterdecode(readFile, 'utf8'):
        print line
        # etc
</snippet></ROW><ROW><id>20602013</id><snippet>b'\x0A\x00'</snippet></ROW><ROW><id>20602013</id><snippet>ZipFile.read</snippet></ROW><ROW><id>20602070</id><snippet>filename.rename(filename.new(purebasename=output))</snippet></ROW><ROW><id>20602070</id><snippet>output</snippet></ROW><ROW><id>20602070</id><snippet>output</snippet></ROW><ROW><id>20602070</id><snippet>tracknumber</snippet></ROW><ROW><id>20602070</id><snippet>artist</snippet></ROW><ROW><id>20602070</id><snippet>title</snippet></ROW><ROW><id>20602070</id><snippet>string = string.decode("utf-8")</snippet></ROW><ROW><id>20602070</id><snippet>output</snippet></ROW><ROW><id>20602070</id><snippet>string = string.decode("utf-8")</snippet></ROW><ROW><id>20602162</id><snippet>create_text</snippet></ROW><ROW><id>20602179</id><snippet>def keys(self):
    return self._values.keys()
</snippet></ROW><ROW><id>20602179</id><snippet>class exampleitem(Item):
    ex1 = Field()
    ex2 = Field()
    ex3 = Field()

    def keys(self):
        return ['ext1', 'ext2', 'ext3']
</snippet></ROW><ROW><id>20602231</id><snippet>import theano
import numpy as np
v = np.arange(10)
var = theano.tensor.vector()
out = theano.tensor.eq(var, 2).nonzero()[0]
print out.eval({var: v})
</snippet></ROW><ROW><id>20602368</id><snippet>request.args</snippet></ROW><ROW><id>20602368</id><snippet>request.args[0]</snippet></ROW><ROW><id>20602368</id><snippet>__call__</snippet></ROW><ROW><id>20602368</id><snippet>__call__</snippet></ROW><ROW><id>20602368</id><snippet>cast</snippet></ROW><ROW><id>20602368</id><snippet>request.args(0, cast=int)</snippet></ROW><ROW><id>20602368</id><snippet>request.args</snippet></ROW><ROW><id>20602492</id><snippet>if input == "hit" or "Hit":
</snippet></ROW><ROW><id>20602492</id><snippet>if (input == "hit") or ("Hit")</snippet></ROW><ROW><id>20602492</id><snippet>if input == "hit" or input == "Hit":
</snippet></ROW><ROW><id>20602492</id><snippet>if input in ("hit", "Hit"):
</snippet></ROW><ROW><id>20602492</id><snippet>if input.lower() == "hit"
</snippet></ROW><ROW><id>20602794</id><snippet>def branchLenSum(self, depth = 0):
    rounds = depth
    if self.leftChild:
        rounds += self.leftChild.branchLenSum(depth + 1)
    if self.rightChild:
        rounds += self.rightChild.branchLenSum(depth + 1)
    return rounds
</snippet></ROW><ROW><id>20602794</id><snippet>0</snippet></ROW><ROW><id>20602794</id><snippet>getLeftChild</snippet></ROW><ROW><id>20602794</id><snippet>getRightChild</snippet></ROW><ROW><id>20602794</id><snippet>None</snippet></ROW><ROW><id>20602794</id><snippet>None</snippet></ROW><ROW><id>20602794</id><snippet>self.leftChild</snippet></ROW><ROW><id>20602794</id><snippet>self.rightChild</snippet></ROW><ROW><id>20602794</id><snippet>None</snippet></ROW><ROW><id>20602794</id><snippet>getLeftChild</snippet></ROW><ROW><id>20602794</id><snippet>getRightChild</snippet></ROW><ROW><id>20602794</id><snippet>getKey</snippet></ROW><ROW><id>20602794</id><snippet>setKey</snippet></ROW><ROW><id>20602794</id><snippet>None</snippet></ROW><ROW><id>20602794</id><snippet>!= None</snippet></ROW><ROW><id>20602794</id><snippet>== None</snippet></ROW><ROW><id>20602794</id><snippet>None</snippet></ROW><ROW><id>20602794</id><snippet>if child</snippet></ROW><ROW><id>20602794</id><snippet>None</snippet></ROW><ROW><id>20602794</id><snippet>if not child</snippet></ROW><ROW><id>20602806</id><snippet>markers = data.frame(
"1A" = c("CC", "TT", "TT", "CC", "CC"),
"1B" = c("CC", "TG", "TT", "CG", "CC"),
"2A" = c("CC", "TT", "TT", "CC", "CC"),
"2B" = c("CC", "TT", "TT", "CC", "CG"),
stringsAsFactors = FALSE
)
#
concordance = sapply(seq(1, ncol(markers), 2), function(c) {
  match = sum(markers[, c] == markers[, c+1]) / nrow(markers)
})
print(concordance)
</snippet></ROW><ROW><id>20602806</id><snippet>&gt; print(concordance)
[1] 0.6 0.8
</snippet></ROW><ROW><id>20602994</id><snippet>setAlarm</snippet></ROW><ROW><id>20602994</id><snippet>@staticmethod
def setAlarm(timeout):
    osName = platform.system()
    if osName.startswith('Windows'): # alarm is not implemented in Windows
        return
    signal.alarm(timeout)
</snippet></ROW><ROW><id>20602994</id><snippet>signal.alarm()</snippet></ROW><ROW><id>20602994</id><snippet>osName</snippet></ROW><ROW><id>20602994</id><snippet>monkeyrunner</snippet></ROW><ROW><id>20602994</id><snippet>python</snippet></ROW><ROW><id>20603020</id><snippet>&gt; dat1 = pd.DataFrame({'dat1': [9,5]})
&gt; dat2 = pd.DataFrame({'dat2': [7,6]})
&gt; dat1.join(dat2)
   dat1  dat2
0     9     7
1     5     6
</snippet></ROW><ROW><id>20603351</id><snippet>grid</snippet></ROW><ROW><id>20603351</id><snippet>None</snippet></ROW><ROW><id>20603351</id><snippet>self.__tracksListBox = Listbox(self.__master, width=100, height=25).grid(row=0, column=1,
                                                                           rowspan=4)
</snippet></ROW><ROW><id>20603351</id><snippet>self.__tracksListBox = Listbox(self.__master, width=100, height=25)
self.__tracksListBox.grid(row=0, column=1, rowspan=4)
</snippet></ROW><ROW><id>20603450</id><snippet>logging</snippet></ROW><ROW><id>20603450</id><snippet>logging.basicConfig()</snippet></ROW><ROW><id>20603450</id><snippet>import logging
logging.basicConfig(level=logging.DEBUG)
logging.debug('This message should go to the log file')
logging.info('So should this')
logging.warning('And this, too')
</snippet></ROW><ROW><id>20603450</id><snippet>DEBUG:root:This message should go to the log file
INFO:root:So should this
WARNING:root:And this, too
</snippet></ROW><ROW><id>20603450</id><snippet>file</snippet></ROW><ROW><id>20603450</id><snippet>basicConfig</snippet></ROW><ROW><id>20603450</id><snippet>logging.basicConfig(file="admin.log",level=logging.DEBUG)
</snippet></ROW><ROW><id>20603710</id><snippet>start_entry.grid(column=1, row=1, sticky=(E, W)
#                                              ^
end_entry = ttk.Entry(mainframe, textvariable = end)
</snippet></ROW><ROW><id>20604023</id><snippet>substringmatchrecursive</snippet></ROW><ROW><id>20604023</id><snippet>str</snippet></ROW><ROW><id>20604023</id><snippet>'No match'</snippet></ROW><ROW><id>20604023</id><snippet>if position == -1:
    return 'No match'
</snippet></ROW><ROW><id>20604023</id><snippet>str</snippet></ROW><ROW><id>20604023</id><snippet>position</snippet></ROW><ROW><id>20604023</id><snippet>position = substringmatchrecursive(target[position+1: ], key)
</snippet></ROW><ROW><id>20604023</id><snippet>while</snippet></ROW><ROW><id>20604023</id><snippet>while</snippet></ROW><ROW><id>20604023</id><snippet>position</snippet></ROW><ROW><id>20604150</id><snippet>def SortedLinkedList(LinkedList):
</snippet></ROW><ROW><id>20604150</id><snippet>class SortedLinkedList(LinkedList):
</snippet></ROW><ROW><id>20604228</id><snippet>&gt;&gt;&gt; chr(256)
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
ValueError: chr() arg not in range(256)
</snippet></ROW><ROW><id>20604228</id><snippet>    if string[i] &gt; 256: string[i] -= 256
</snippet></ROW><ROW><id>20604228</id><snippet>string</snippet></ROW><ROW><id>20604228</id><snippet>256</snippet></ROW><ROW><id>20604228</id><snippet>    if string[i] &gt; 255: string[i] -= 255
</snippet></ROW><ROW><id>20604480</id><snippet>file_read</snippet></ROW><ROW><id>20604480</id><snippet>file.read</snippet></ROW><ROW><id>20604480</id><snippet>args</snippet></ROW><ROW><id>20604480</id><snippet>file.read</snippet></ROW><ROW><id>20604480</id><snippet>bytesrequested</snippet></ROW><ROW><id>20604480</id><snippet>file.read</snippet></ROW><ROW><id>20604480</id><snippet>with open('file') as fin:
    fin.read(5)  # bytesrequested will be 5.
</snippet></ROW><ROW><id>20604511</id><snippet>_age_changed</snippet></ROW><ROW><id>20604511</id><snippet>on_trait_change</snippet></ROW><ROW><id>20604511</id><snippet>ge.on_trait_change(...)</snippet></ROW><ROW><id>20604511</id><snippet>from traits.api import (HasTraits, Str, Int, Float, on_trait_change,
                        TraitChangeNotifyWrapper)
from traits.trait_notifiers import StaticTraitChangeNotifyWrapper


def get_listeners(h):
    """
    h must be a HasTraits instance.

    Returns a dictionary whose keys are trait names and whose values
    are lists of notifiers.
    """
    listeners = {}
    for name in h.traits():
        notifiers = h.trait(name)._notifiers(0)
        if notifiers is not None:
            # Filter out the static listeners.  Comment this out
            # if you want to keep those.
            notifiers = [notifier for notifier in notifiers
                            if not isinstance(notifier, StaticTraitChangeNotifyWrapper)]
            listeners[name] = notifiers
    return listeners


def print_listeners(listeners):
    """
    Print the dictionary of listeners returned by `get_listeners(h)`.
    """
    for name, notifiers in listeners.items():
        print "trait '%s' has the following listeners:" % (name,)
        for notifier in notifiers:
            if notifier.name is None:
                handler = notifier.handler
                print "    '%s' %r" % (handler.__name__, type(handler))
            else:
                print "    '%s' on object %s" % (notifier.name, notifier.object)


class GenerateEvents ( HasTraits ):
    name   = Str
    age    = Int
    weight = Float

    def _age_changed(self, old):
        print "age changed from ", old, "to", self.age

    @on_trait_change('weight')
    def do_something(self, obj, name, old, new):
        print "do_something: name =", name


class ListenEvents ( HasTraits ):
    def _name_changed ( self, object, name, old, new ):
        print "_name_changed:", object, name, old, new

    def _age_changed ( self, object, name, old, new ):
        print "_age_changed:", object, name, old, new

    def _weight_changed ( self, object, name, old, new ):
        print "_weight_changed:", object, name, old, new


class AnotherListenEvents ( HasTraits ):
    def _name_changed ( self, object, name, old, new ):
        print "Another _name_changed:", object, name, old, new

    def _age_changed ( self, object, name, old, new ):
        print "another _age_changed:", object, name, old, new

    def _weight_changed ( self, object, name, old, new ):
        print "another _weight_changed:", object, name, old, new


def printit(foo):
    print foo


ge = GenerateEvents()
le = ListenEvents()
ale = AnotherListenEvents()
ge.set( name = 'Joe', age = 22, weight = 152.0 )
ge.add_trait_listener( le )
ge.add_trait_listener( ale )
ge.set( name = 'Mike', age = 34, weight = 178.0 )

# Make the function `printit` a listener to ge.name.
ge.on_trait_change(printit, name='name')
</snippet></ROW><ROW><id>20604511</id><snippet>In [103]: run trait_listeners_question
age changed from  22 to 22
do_something: name = weight
age changed from  34 to 34
_age_changed: &lt;__main__.GenerateEvents object at 0x2680950&gt; age 22 34
another _age_changed: &lt;__main__.GenerateEvents object at 0x2680950&gt; age 22 34
_name_changed: &lt;__main__.GenerateEvents object at 0x2680950&gt; name Joe Mike
Another _name_changed: &lt;__main__.GenerateEvents object at 0x2680950&gt; name Joe Mike
do_something: name = weight
_weight_changed: &lt;__main__.GenerateEvents object at 0x2680950&gt; weight 152.0 178.0
another _weight_changed: &lt;__main__.GenerateEvents object at 0x2680950&gt; weight 152.0 178.0

In [104]: listeners = get_listeners(ge)

In [105]: print_listeners(listeners)
trait 'trait_added' has the following listeners:
    '_trait_added_changed' on object &lt;weakref at 0x2656d08; to 'ListenEvents' at 0x2680d70&gt;
    '_trait_added_changed' on object &lt;weakref at 0x2656e68; to 'AnotherListenEvents' at 0x26808f0&gt;
trait 'age' has the following listeners:
    '_age_changed' on object &lt;weakref at 0x2656c58; to 'ListenEvents' at 0x2680d70&gt;
    '_age_changed' on object &lt;weakref at 0x2656db8; to 'AnotherListenEvents' at 0x26808f0&gt;
trait 'ev' has the following listeners:
    '_ev_changed' on object &lt;weakref at 0x2656c00; to 'ListenEvents' at 0x2680d70&gt;
trait 'name' has the following listeners:
    '_name_changed' on object &lt;weakref at 0x2656cb0; to 'ListenEvents' at 0x2680d70&gt;
    '_name_changed' on object &lt;weakref at 0x2656e10; to 'AnotherListenEvents' at 0x26808f0&gt;
    'printit' &lt;type 'function'&gt;
trait 'weight' has the following listeners:
    'do_something' on object &lt;weakref at 0x2671368; to 'GenerateEvents' at 0x2680950&gt;
    '_weight_changed' on object &lt;weakref at 0x2656ba8; to 'ListenEvents' at 0x2680d70&gt;
    '_weight_changed' on object &lt;weakref at 0x2656d60; to 'AnotherListenEvents' at 0x26808f0&gt;
</snippet></ROW><ROW><id>20604632</id><snippet>import urllib2
import json
url = 'http://api.opencorporates.com/v0.2/companies/search?q=&amp;jurisdiction_code=us_ca&amp;current_status=Active&amp;page='
i = 0
while True:
    i += 1
    print i
    response = urllib2.urlopen('%s%d' % (url, i))
    content = response.read()
    with open(str(i) + '.json', 'w') as f:
        f.write(content)
</snippet></ROW><ROW><id>20604632</id><snippet>HTTP Error 401: Unauthorized</snippet></ROW><ROW><id>20604793</id><snippet>return</snippet></ROW><ROW><id>20604793</id><snippet>yield</snippet></ROW><ROW><id>20604793</id><snippet>yield</snippet></ROW><ROW><id>20604793</id><snippet>def func():
    for x in range(10):
        yield x

generator = func()
for item in generator:
    print item
</snippet></ROW><ROW><id>20604817</id><snippet>.edb</snippet></ROW><ROW><id>20604817</id><snippet>libesedb</snippet></ROW><ROW><id>20605209</id><snippet>[app]</snippet></ROW><ROW><id>20605209</id><snippet>Meta</snippet></ROW><ROW><id>20605209</id><snippet>syncdb</snippet></ROW><ROW><id>20605209</id><snippet>django.db.models.get_apps</snippet></ROW><ROW><id>20605209</id><snippet>models</snippet></ROW><ROW><id>20605209</id><snippet>models = import_module('.models', app_name)
</snippet></ROW><ROW><id>20605209</id><snippet>INSTALLED_APPS</snippet></ROW><ROW><id>20605209</id><snippet>django.db.models.get_apps</snippet></ROW><ROW><id>20605209</id><snippet>AppCache.apps_models</snippet></ROW><ROW><id>20605209</id><snippet>register_models</snippet></ROW><ROW><id>20605209</id><snippet>[app]</snippet></ROW><ROW><id>20605209</id><snippet>models._Meta</snippet></ROW><ROW><id>20605209</id><snippet>models.py</snippet></ROW><ROW><id>20605209</id><snippet>INSTALLED_APPS</snippet></ROW><ROW><id>20605209</id><snippet>get_apps</snippet></ROW><ROW><id>20605258</id><snippet>sorted</snippet></ROW><ROW><id>20605258</id><snippet>itertools.groupby</snippet></ROW><ROW><id>20605258</id><snippet>from itertools import groupby
print [unique for unique, _ in groupby(sorted(process(line) for line in input_file))]
</snippet></ROW><ROW><id>20605426</id><snippet>from numpy import isnan
result = ~isnan(arr_a) * ~isnan(arr_b)
</snippet></ROW><ROW><id>20605426</id><snippet>from numpy import isfinite
isfinite(arr_a) * isfinite(arr_b)
</snippet></ROW><ROW><id>20605426</id><snippet>array([[False, False, False, False, False, False],
       [False,  True, False, False, False, False],
       [False, False, False, False, False, False],
       [False, False, False, False, False, False],
       [False, False, False, False, False, False]], dtype=bool)
</snippet></ROW><ROW><id>20605987</id><snippet>for key in Dict.keys():
   print("***Customer***")
   print("Customer Number: " + Dict[key].getCNumber())
</snippet></ROW><ROW><id>20605987</id><snippet>getCNumber</snippet></ROW><ROW><id>20605987</id><snippet>Dict</snippet></ROW><ROW><id>20605987</id><snippet>dict</snippet></ROW><ROW><id>20605987</id><snippet>for</snippet></ROW><ROW><id>20605987</id><snippet>for key in sorted(dict.keys()):
</snippet></ROW><ROW><id>20606034</id><snippet>to_python()</snippet></ROW><ROW><id>20606034</id><snippet>get_prep_value()</snippet></ROW><ROW><id>20606034</id><snippet>slug</snippet></ROW><ROW><id>20606034</id><snippet>class AutoSlugField(models.CharField):
    def pre_save(self, blog, *args, **kwargs):
        return slugify(unicode(blog))

    def to_python(self, value):
        return value

    def get_prep_value(self, value):
        return value
</snippet></ROW><ROW><id>20606109</id><snippet>x = SomeObject()
x.y = 1
a = x.y
x.y = 2
print(a) #a is still 1, not 2
</snippet></ROW><ROW><id>20606109</id><snippet>from module import name</snippet></ROW><ROW><id>20606109</id><snippet>name</snippet></ROW><ROW><id>20606109</id><snippet>import module
name = module.name
</snippet></ROW><ROW><id>20606109</id><snippet>module</snippet></ROW><ROW><id>20606109</id><snippet>name</snippet></ROW><ROW><id>20606109</id><snippet>sys.modules</snippet></ROW><ROW><id>20606109</id><snippet>print</snippet></ROW><ROW><id>20606149</id><snippet>QLabel</snippet></ROW><ROW><id>20606149</id><snippet>QWidget</snippet></ROW><ROW><id>20606149</id><snippet>QWidget</snippet></ROW><ROW><id>20606149</id><snippet>QIcon</snippet></ROW><ROW><id>20606149</id><snippet>QFont</snippet></ROW><ROW><id>20606149</id><snippet>...
def createPage(self, objName):
    page = QtGui.QWidget()
    page.setObjectName(_fromUtf8(objName))
    return page

def createLabel(self, parent, objName, text):
    label = QtGui.QLabel(parent)
    label.setGeometry(QtCore.QRect(0, 0, 921, 91))
    label.setText(_fromUtf8(text))
    label.setObjectName(_fromUtf8(objName))
    return label

def setPages(self)
    self.firstPage = self.createPage("firstPage")
    # call self.createLabel and add label to self.firstPage
    self.secondPage = self.createPage("secondPage")
    self.stackedWidget.addWidget(self.firstPage)
    self.stackedWidget.addWidget(self.secondPage)
...
</snippet></ROW><ROW><id>20606149</id><snippet>createLabel</snippet></ROW><ROW><id>20606204</id><snippet>import pandas as pd
data = {'working_hr': {3: 9.0}, 'order_no': {3: 731231}}
df = pd.DataFrame.from_dict(data, dtype=object)
</snippet></ROW><ROW><id>20606204</id><snippet>&gt;&gt;&gt; df.loc[3, 'order_no'] = [1, 2]
&gt;&gt;&gt; df
  order_no working_hr
3   [1, 2]          9
</snippet></ROW><ROW><id>20606204</id><snippet>dtype=object</snippet></ROW><ROW><id>20606204</id><snippet>object</snippet></ROW><ROW><id>20606204</id><snippet>&gt;&gt;&gt; df = pandas.read_clipboard(sep='\t', index_col=0)
&gt;&gt;&gt; df
        buyer          order_no                                 item         smv
0         H&amp;M            992754                        Cole tank top        6.17
1         H&amp;M            859901                         Thilo Bottom        8.55
2         H&amp;M            731231               Palma Short Sleeve Tee        5.65
3         H&amp;M     731231/339260                      Palma Price Tee        5.65
4         H&amp;M     859901/304141  Thilo Paijama Set top/Elva Tank Top   5.80/5.58
5         H&amp;M            768380                       Folke Tank Top           6
6         H&amp;M     596701/590691                        Paul Rock Tee        7.65
7    H&amp;M/Mexx  731231/KIEZ-P002        Palma Short Sleeve Tee/Shorts  5.65/12.85
8         NaN               NaN                                  NaN         NaN
9  Ginatricot     512008/512009                           J.Tank top         4.6
&gt;&gt;&gt; df.loc[3, 'order_no'] = str(df.loc[3, 'order_no']).split('/')
&gt;&gt;&gt; df
        buyer          order_no                                 item         smv
0         H&amp;M            992754                        Cole tank top        6.17
1         H&amp;M            859901                         Thilo Bottom        8.55
2         H&amp;M            731231               Palma Short Sleeve Tee        5.65
3         H&amp;M  [731231, 339260]                      Palma Price Tee        5.65
4         H&amp;M     859901/304141  Thilo Paijama Set top/Elva Tank Top   5.80/5.58
5         H&amp;M            768380                       Folke Tank Top           6
6         H&amp;M     596701/590691                        Paul Rock Tee        7.65
7    H&amp;M/Mexx  731231/KIEZ-P002        Palma Short Sleeve Tee/Shorts  5.65/12.85
8         NaN               NaN                                  NaN         NaN
9  Ginatricot     512008/512009                           J.Tank top         4.6
</snippet></ROW><ROW><id>20606572</id><snippet>def offsetVTK(infilename, outfilename, offset):
    outfil = open(outfilename,'w')
    with open(infilename,'r') as infil:
        lin = 1
        while lin:
            lin = infil.readline()
            if lin.lower().startswith('points'):
                numpt = int(lin.split()[1])
                outfil.write(lin)
                for i in xrange(numpt):
                    outfil.write('{0[0]} {0[1]} {0[2]}\n'.format(
                       np.array(infil.readline().split(),dtype=float) + offset))
            else:
                outfil.write(lin)
    outfil.close()

offsetVTK('ray.vtk','ray_off.vtk', np.array([100,0,0]))
</snippet></ROW><ROW><id>20606627</id><snippet>&gt;&gt;&gt; def report(x):
...     print x
...     return True
&gt;&gt;&gt; df
                   source
85363  remote_api_created
85364  remote_api_created
85365  remote_api_created
85373              iphone
85374              iphone
85412  remote_api_created

&gt;&gt;&gt; df.groupby('source').filter(report)
Series([], dtype: float64)
Empty DataFrame
Columns: []
Index: [85373, 85374]
Series([], dtype: float64)
Empty DataFrame
Columns: [source]
Index: []
</snippet></ROW><ROW><id>20606627</id><snippet>&gt;&gt;&gt; df.groupby(df['source']).filter(lambda x: len(x)&gt;2)
                   source
85363  remote_api_created
85364  remote_api_created
85365  remote_api_created
85412  remote_api_created
</snippet></ROW><ROW><id>20606829</id><snippet>x=0
y=0
while(x&lt;len(floorMap[0])):
    while(y&lt;len(floorMap)):
        ...
        y+=1
    x+=1
</snippet></ROW><ROW><id>20606829</id><snippet>y</snippet></ROW><ROW><id>20606829</id><snippet>y</snippet></ROW><ROW><id>20606829</id><snippet>y=0</snippet></ROW><ROW><id>20606829</id><snippet>x=0
while(x&lt;len(floorMap[0])):
    y=0
    while(y&lt;len(floorMap)):
        ...
        y+=1
    x+=1
</snippet></ROW><ROW><id>20606843</id><snippet>name</snippet></ROW><ROW><id>20606843</id><snippet>find_element_by_id('id_username')</snippet></ROW><ROW><id>20606843</id><snippet>find_element_by_id('id_password')</snippet></ROW><ROW><id>20606843</id><snippet>import time

time.sleep(3)
user_name_field = driver.find_element_by_id('id_username')
password_field = driver.find_element_by_id('id_password')

user_name_field.send_keys('your_user_name')
password_field.send_keys('your_password')

password_field.send_keys(Keys.RETURN)
...
</snippet></ROW><ROW><id>20606843</id><snippet>elem</snippet></ROW><ROW><id>20606843</id><snippet>driver</snippet></ROW><ROW><id>20606843</id><snippet>implicitly_wait</snippet></ROW><ROW><id>20606843</id><snippet>driver = webdriver.Firefox()
driver.implicitly_wait(30) # maximally wait 30 seconds before raising an exception.

# ...
# go to the page etc.
</snippet></ROW><ROW><id>20607321</id><snippet>urllib</snippet></ROW><ROW><id>20607321</id><snippet>urllib2</snippet></ROW><ROW><id>20607321</id><snippet>urllib.request</snippet></ROW><ROW><id>20607321</id><snippet>requests</snippet></ROW><ROW><id>20607321</id><snippet>&gt;&gt;&gt; r = requests.get("http://httpbin.org/get", 
...      params={'user': 'username', 'password': 'password', 'version': '13'})
</snippet></ROW><ROW><id>20607734</id><snippet>encryptedWord</snippet></ROW><ROW><id>20607734</id><snippet>encryptedWord = []
</snippet></ROW><ROW><id>20608018</id><snippet>\n</snippet></ROW><ROW><id>20608018</id><snippet>os.linesep</snippet></ROW><ROW><id>20608018</id><snippet>destination.write(os.linesep + '...' + os.linesep)
</snippet></ROW><ROW><id>20608018</id><snippet>file.newlines</snippet></ROW><ROW><id>20608018</id><snippet>def concatenate_fasta(file_1, file_2, newfile):
    with open(file_1, 'r') as source:
        next(source, None)  # try and read a line
        line_sep = source.newlines
        if isinstance(line_sep, tuple):
            # mixed newlines, lets just pick the first one
            line_sep = line_sep[0]

    with open(newfile,'wb') as destination
        with open(file_1,'rb') as source:
            shutil.copyfileobj(source, destination)
        destination.write(line_sep + '...' + line_sep)

        with open(file_2,'rb') as source:
            shutil.copyfileobj(source, destination)
</snippet></ROW><ROW><id>20608018</id><snippet>file_2</snippet></ROW><ROW><id>20608355</id><snippet>%</snippet></ROW><ROW><id>20608355</id><snippet>%s</snippet></ROW><ROW><id>20608355</id><snippet>%(name)s</snippet></ROW><ROW><id>20608355</id><snippet>query = "EXEC spapi_patient_match @PCode = %s, @FName = %s, @LName = %s"
params = (u'PC', u'%FN%', u'%LN%')
</snippet></ROW><ROW><id>20608355</id><snippet>?</snippet></ROW><ROW><id>20608355</id><snippet>pyodbc</snippet></ROW><ROW><id>20608505</id><snippet>&gt;&gt;&gt; from collections import defaultdict
&gt;&gt;&gt; d = defaultdict(lambda: 'UNKNOWN')
&gt;&gt;&gt; d.update({'greetings': 'hello'})
&gt;&gt;&gt; '%(greetings)s  %(name)s !!!' % d
'hello  UNKNOWN !!!'
&gt;&gt;&gt; 
</snippet></ROW><ROW><id>20609152</id><snippet>X = [0.1*i for i in xrange(40)]
Y = [TotalEnergy_GW_onelevel(x) for x in X]
plot(X,Y)
</snippet></ROW><ROW><id>20609189</id><snippet>re.escape</snippet></ROW><ROW><id>20609189</id><snippet>re.escape(string)</snippet></ROW><ROW><id>20609346</id><snippet>&gt;&gt;&gt; df
                    0     1
0 2010-05-31 00:00:00  9912
1 2010-05-31 00:00:00  9912
&gt;&gt;&gt; df.to_records()
rec.array([(0L, 1275264000000000000L, 9912.0),
           (1L, 1275264000000000000L, 9912.0)],
      dtype=[('index', '&lt;i8'), ('0', '&lt;M8[ns]'), ('1', '&lt;f8')])
</snippet></ROW><ROW><id>20609346</id><snippet>&gt;&gt;&gt; df.to_records()[0][1]
numpy.datetime64('2010-05-31T04:00:00.000000000+0400')
</snippet></ROW><ROW><id>20609346</id><snippet>&lt;M8[ns]</snippet></ROW><ROW><id>20609346</id><snippet>&gt;&gt;&gt; np.datetime64().dtype
dtype('&lt;M8')
</snippet></ROW><ROW><id>20609458</id><snippet>for el in a:
</snippet></ROW><ROW><id>20609458</id><snippet>a</snippet></ROW><ROW><id>20609458</id><snippet>el</snippet></ROW><ROW><id>20609458</id><snippet>a[i]
</snippet></ROW><ROW><id>20609458</id><snippet>a</snippet></ROW><ROW><id>20609458</id><snippet>a</snippet></ROW><ROW><id>20609458</id><snippet>a</snippet></ROW><ROW><id>20609458</id><snippet>a = [1 for _ in a]
</snippet></ROW><ROW><id>20609458</id><snippet>enumerate</snippet></ROW><ROW><id>20609458</id><snippet>for index, el in enumerate(a):
    print el #print the current value
    a[index] = 1 #change it,
    print el #and print the new one!
</snippet></ROW><ROW><id>20609532</id><snippet>import</snippet></ROW><ROW><id>20609532</id><snippet>sys.modules</snippet></ROW><ROW><id>20609532</id><snippet>reload(module)</snippet></ROW><ROW><id>20609532</id><snippet>bar.py</snippet></ROW><ROW><id>20609532</id><snippet>xs = [1, 2, 3]
</snippet></ROW><ROW><id>20609532</id><snippet>&gt;&gt;&gt; from bar import xs
&gt;&gt;&gt; id(xs)
140211778767256
&gt;&gt;&gt; import bar
&gt;&gt;&gt; id(bar.xs)
140211778767256
</snippet></ROW><ROW><id>20609532</id><snippet>&gt;&gt;&gt; import sys
&gt;&gt;&gt; sys.modules["bar"] is bar
True
</snippet></ROW><ROW><id>20609644</id><snippet>sudo pip3 install virtualenv</snippet></ROW><ROW><id>20609644</id><snippet>sudo su</snippet></ROW><ROW><id>20609644</id><snippet>#UMASK is not unioned with the one set in the PAM module
Defaults        umask_override
#Default UMASK is 007 for non-root users (for some reason I can't use 'Defaults&gt;!root')
Defaults        umask=0007
#Root UMASK is 022, to overcome permission problems when installing packages
Defaults&gt;root   umask=0022
</snippet></ROW><ROW><id>20609644</id><snippet>$ sudo apt-get install python3
#Install OK
$ sudo apt-get install python3-pip
#Install OK
$ sudo pip3 install virtualenv
#Install OK
$ virtualenv env1
#OK
</snippet></ROW><ROW><id>20609692</id><snippet>Homebrew</snippet></ROW><ROW><id>20609692</id><snippet>Homebrew</snippet></ROW><ROW><id>20609692</id><snippet>pip</snippet></ROW><ROW><id>20609692</id><snippet>setup_tools</snippet></ROW><ROW><id>20609692</id><snippet>sudo</snippet></ROW><ROW><id>20610006</id><snippet>import win32api
import win32con
import logging 
logging.basicConfig(level=logging.DEBUG, format='%(asctime)s,%(msecs)03d %(levelname)-5.5s [%(name)s] %(message)s', filename='watchRegistry.log')
log = logging.getLogger()

hiveToWatch = win32con.HKEY_CURRENT_USER
keyToWatch = 'Software\Microsoft\Calc'

values = {(hiveToWatch, keyToWatch, 'DateTime'): (win32con.REG_DWORD, 1),
          (hiveToWatch, keyToWatch, 'Templates'): (win32con.REG_DWORD, 0),
          (hiveToWatch, keyToWatch, 'UnitConv'): (win32con.REG_DWORD, 0)}

while True:

    for (hive, key, valueName), (valueType, value) in values.iteritems():
        handleWithSetRights = win32api.RegOpenKeyEx(hive, key, 0, win32con.KEY_SET_VALUE)
        log.info(r'Setting %s\%s\%s = %s' % (hive, key, valueName, value))
        win32api.RegSetValueEx(handleWithSetRights, valueName, 0, valueType, value)
        win32api.RegCloseKey(handleWithSetRights)

    # Open and close the handle here as otherwise the set operation above will trigger a further round
    handleToBeWatched = win32api.RegOpenKeyEx(hiveToWatch, keyToWatch, 0, win32con.KEY_NOTIFY)
    win32api.RegNotifyChangeKeyValue(handleToBeWatched, False, win32api.REG_NOTIFY_CHANGE_LAST_SET, None, False)
    win32api.RegCloseKey(handleToBeWatched)
</snippet></ROW><ROW><id>20610192</id><snippet>&gt;&gt;&gt; range(2,2)
[]
</snippet></ROW><ROW><id>20610192</id><snippet>range(2,int(i/2)+1)</snippet></ROW><ROW><id>20610192</id><snippet>import math
</snippet></ROW><ROW><id>20610192</id><snippet>for j in range(2, int(math.sqrt(i)+1)):
</snippet></ROW><ROW><id>20610254</id><snippet>/var/run</snippet></ROW><ROW><id>20610254</id><snippet>/tmp</snippet></ROW><ROW><id>20610254</id><snippet>$HOME/var/run</snippet></ROW><ROW><id>20610254</id><snippet>/home/prologic/public_html</snippet></ROW><ROW><id>20610254</id><snippet>GET ~/prologic</snippet></ROW><ROW><id>20610758</id><snippet>Time</snippet></ROW><ROW><id>20610758</id><snippet>time</snippet></ROW><ROW><id>20610758</id><snippet>#You initialize it:
Time = time.strftime('%H:%M%p')
# Then you overwrite it:
Time = Entry(root, relief = RIDGE, bd = 5, width = 16, cursor = 'plus', fg = 'red', selectforeground = 'red', selectbackground = 'black')
</snippet></ROW><ROW><id>20610758</id><snippet>time = time.strftime('%H:%M%p')
print time

Time = Entry(root, relief = RIDGE, bd = 5, width = 16, cursor = 'plus', fg = 'red', selectforeground = 'red', selectbackground = 'black')
Time.place(x = 0, y = 0)
Time.insert(0, time)
</snippet></ROW><ROW><id>20610759</id><snippet>#!/usr/bin/env python


import sys


from circuits import Component
from circuits.io import stdout, Process, write


class Ping(Component):

    stdout = stdout

    def init(self, host):
        self.p = Process(["/bin/ping", host]).register(self)
        self.p.start()

    def read(self, data):
        self.fire(write(data), stdout)


app = Ping(sys.argv[1])
app.run()
</snippet></ROW><ROW><id>20610759</id><snippet>from circuits.web import Controller, Server

class Root(Controller):

    def index(self):
        return "Hello World!"

Server(("0.0.0.0", 8000)).register(app)
</snippet></ROW><ROW><id>20611124</id><snippet>raise Exception</snippet></ROW><ROW><id>20611124</id><snippet>errorhandler</snippet></ROW><ROW><id>20611701</id><snippet>$ne</snippet></ROW><ROW><id>20611701</id><snippet>None</snippet></ROW><ROW><id>20611701</id><snippet>asdf = "something"
{ asdf: "foo"} 
</snippet></ROW><ROW><id>20611701</id><snippet>"something"</snippet></ROW><ROW><id>20611701</id><snippet>{$ne: "foo"}
</snippet></ROW><ROW><id>20611701</id><snippet>$ne</snippet></ROW><ROW><id>20611701</id><snippet>null</snippet></ROW><ROW><id>20611701</id><snippet>None</snippet></ROW><ROW><id>20611701</id><snippet>db.logs.find({"service_description": {"$ne" : None}}).distinct('service_description')
</snippet></ROW><ROW><id>20611797</id><snippet>etree</snippet></ROW><ROW><id>20611797</id><snippet>&gt;&gt;&gt; from lxml import etree
&gt;&gt;&gt; etree.LXML_VERSION
(3, 0, -198, 0)
</snippet></ROW><ROW><id>20611797</id><snippet>etree.LIBXML_VERSION</snippet></ROW><ROW><id>20611797</id><snippet>etree.LIBXML_COMPILED_VERSION</snippet></ROW><ROW><id>20611797</id><snippet>etree.LIBXSLT_VERSION</snippet></ROW><ROW><id>20611797</id><snippet>etree.LIBXSLT_COMPILED_VERSION</snippet></ROW><ROW><id>20612251</id><snippet>raw = word.split()
word, name, definition, wordtime = raw[0], raw[1], ' '.join(raw[2:-1]), raw[-1]
</snippet></ROW><ROW><id>20612251</id><snippet>definition</snippet></ROW><ROW><id>20612251</id><snippet>word = 'dog charles a cute cute animal 1387199870'
# definition -&gt; 'a cute cute animal'
</snippet></ROW><ROW><id>20612274</id><snippet>def update(self, move, blocks):
    if self.on_ground:
        self.jump_state = 'on_ground'

    if move.up and self.on_ground:
        # jump!
        self.yvel -= self.jump_speed
        self.jump_state = 'jumped'

    if self.jump_state = 'jumped' and not move.up and not self.on_ground:
        self.jump_state = 'ready_for_double_jump'

    if self.jump_state = 'ready_for_double_jump' and move.up:
        # jump!
        self.yvel -= self.jump_speed
        self.jump_state = 'double_jumped'

    ...
</snippet></ROW><ROW><id>20612395</id><snippet>dict([i.strip() for i in item.split("=")] for item in PARAMS.split(";"))
</snippet></ROW><ROW><id>20612395</id><snippet>PARAMS = 'TEST = xy; TEST2= klklk '
from timeit import timeit
print timeit('dict((i.strip() for i in item.split("=")) for item in PARAMS.split(";"))', "from __main__ import PARAMS")
print timeit('dict([i.strip() for i in item.split("=")] for item in PARAMS.split(";"))', "from __main__ import PARAMS")
</snippet></ROW><ROW><id>20612395</id><snippet>18.7284784281
9.16360774723
</snippet></ROW><ROW><id>20612459</id><snippet>usemap</snippet></ROW><ROW><id>20612459</id><snippet>&lt;map&gt;</snippet></ROW><ROW><id>20612459</id><snippet>&lt;img&gt;</snippet></ROW><ROW><id>20612459</id><snippet>&lt;a&gt;</snippet></ROW><ROW><id>20612459</id><snippet>A()</snippet></ROW><ROW><id>20612459</id><snippet>$('map').on('click', 'area', function(e) {
  e.preventDefault();
  var href = $(this).prop('href');
  ajax(href, [], 'mytarget');
});
</snippet></ROW><ROW><id>20612574</id><snippet>from sklearn import preprocessing
trdata = preprocessing.scale(trdata) 
</snippet></ROW><ROW><id>20612592</id><snippet>\[(\d{2})/(\d{2})/(\d{4}) (\d{2}):(\d{2}):(\d{2})\] MW(\d*) P(\d*) PR(\d*)\] (.{5}) - (.*) - (?P&lt;full_message&gt;[\s\S]*?)(?=\r?\n\[\d{2}/\d{2}/\d{4} \d{2}:\d{2}:\d{2}\]|$)
</snippet></ROW><ROW><id>20612592</id><snippet>full_message</snippet></ROW><ROW><id>20612592</id><snippet>[\s\S]*?</snippet></ROW><ROW><id>20612592</id><snippet>\r?\n\[\d{2}/\d{2}/\d{4} \d{2}:\d{2}:\d{2}\]</snippet></ROW><ROW><id>20612592</id><snippet>$</snippet></ROW><ROW><id>20612592</id><snippet>\s</snippet></ROW><ROW><id>20612592</id><snippet>\s+</snippet></ROW><ROW><id>20612765</id><snippet>DwmEnableComposition(DWM_EC_DISABLECOMPOSITION);</snippet></ROW><ROW><id>20612765</id><snippet>wglSwapBuffers</snippet></ROW><ROW><id>20612765</id><snippet>glReadPixels</snippet></ROW><ROW><id>20612847</id><snippet>struct.unpack</snippet></ROW><ROW><id>20612847</id><snippet>struct.unpack</snippet></ROW><ROW><id>20612847</id><snippet>struct.unpack</snippet></ROW><ROW><id>20613027</id><snippet>axis</snippet></ROW><ROW><id>20613027</id><snippet>sum</snippet></ROW><ROW><id>20613027</id><snippet>In [2]: row = array([0,0,1,2,2,2])

In [3]: col = array([0,2,2,0,1,2])

In [4]: data = array([1,2,3,4,5,6])

In [5]: a = csr_matrix((data, (row, col)), shape=(3,3))

In [6]: a.A
Out[6]: 
array([[1, 0, 2],
       [0, 0, 3],
       [4, 5, 6]])

In [7]: a.sum(axis=0)  # sum the columns
Out[7]: matrix([[ 5,  5, 11]])

In [8]: a.sum(axis=1)  # sum the rows
Out[8]: 
matrix([[ 3],
        [ 3],
        [15]])
</snippet></ROW><ROW><id>20613127</id><snippet>values['data'][0]['category_list']</snippet></ROW><ROW><id>20613127</id><snippet>values['data'][0]['category_list'][0]['id']</snippet></ROW><ROW><id>20613189</id><snippet>id</snippet></ROW><ROW><id>20613189</id><snippet>"</snippet></ROW><ROW><id>20613189</id><snippet>IDs = re.findall('(?&lt;=user.php\?id=)\w+(?=\"&gt;)', src)
</snippet></ROW><ROW><id>20613287</id><snippet>from Bio.Blast import NCBIXML

with open('/home/edson/ungulate/tblastn_result_test_xml') as tblastn_file: 
    tblastn_records = NCBIXML.parse(tblastn_file) 
    for tblastn_record in tblastn_records:
        for alignment in record.alignments[:4]:
            print alignment.title
            print alignment.hsps[0]
</snippet></ROW><ROW><id>20613287</id><snippet>alignments</snippet></ROW><ROW><id>20613287</id><snippet>Alignment</snippet></ROW><ROW><id>20613462</id><snippet>import wx
import wx.grid as gridlib

########################################################################
class RegularPanel(wx.Panel):
    """"""

    #----------------------------------------------------------------------
    def __init__(self, parent):
        """Constructor"""
        wx.Panel.__init__(self, parent)
        self.SetBackgroundColour("pink")


########################################################################
class GridPanel(wx.Panel):
    """"""

    #----------------------------------------------------------------------
    def __init__(self, parent):
        """Constructor"""
        wx.Panel.__init__(self, parent)
        self.grid = gridlib.Grid(self, style=wx.BORDER_SUNKEN)
        self.grid.CreateGrid(25,8)

        sizer = wx.BoxSizer(wx.VERTICAL)
        sizer.Add(self.grid, 1, wx.EXPAND)
        self.SetSizer(sizer)


########################################################################
class MainPanel(wx.Panel):
    """"""

    #----------------------------------------------------------------------
    def __init__(self, parent):
        """Constructor"""
        wx.Panel.__init__(self, parent)

        notebook = wx.Notebook(self)

        page = wx.SplitterWindow(notebook)
        notebook.AddPage(page, "Splitter")
        hSplitter = wx.SplitterWindow(page)

        panelOne = GridPanel(hSplitter)
        panelTwo = GridPanel(hSplitter)
        hSplitter.SplitVertically(panelOne, panelTwo)
        hSplitter.SetSashGravity(0.5)

        panelThree = RegularPanel(page)
        page.SplitHorizontally(hSplitter, panelThree)
        page.SetSashGravity(0.5)

        sizer = wx.BoxSizer(wx.VERTICAL)
        sizer.Add(notebook, 1, wx.EXPAND)
        self.SetSizer(sizer)

########################################################################
class MainFrame(wx.Frame):
    """"""

    #----------------------------------------------------------------------
    def __init__(self):
        """Constructor"""
        wx.Frame.__init__(self, None, title="Nested Splitters",
                          size=(800,600))
        panel = MainPanel(self)
        self.Show()

#----------------------------------------------------------------------
if __name__ == "__main__":
    app = wx.App(False)
    frame = MainFrame()
    app.MainLoop()
</snippet></ROW><ROW><id>20613548</id><snippet>itertools&lt;b&gt;.groupby&lt;/b&gt;(&lt;em&gt;iterable&lt;/em&gt;[, &lt;em&gt;key&lt;/em&gt;])</snippet></ROW><ROW><id>20613963</id><snippet>import bs4

html = """&lt;a href="javascript:UserWindow('Mike','14','0','27s', 'profile')"&gt;
&lt;a href="user.php?id=14"&gt;Mike&lt;/a&gt;"""

soup = bs4.BeautifulSoup(html) #Prepare the soup!
name = [i.string for i in soup.findAll('a') if 'user.php' in i['href']]
id = [i['href'].replace('user.php?id=','') for i in soup.findAll('a') if 'user.php' in i['href']]

dictionary = dict(zip(name,id))
print dictionary
</snippet></ROW><ROW><id>20613963</id><snippet>{u'Mike': u'14'}
</snippet></ROW><ROW><id>20613963</id><snippet>name = re.findall('user.php\?id=\d+"&gt;(\w+)',string)
id =re.findall('user.php\?id=(\d+)',string)
dictionary = dict(zip(name,id))
print dictionary
</snippet></ROW><ROW><id>20613963</id><snippet>{'Mike': '14'}
</snippet></ROW><ROW><id>20613963</id><snippet>zip</snippet></ROW><ROW><id>20613963</id><snippet>dict()</snippet></ROW><ROW><id>20614198</id><snippet>sheet.row(4).height_mismatch = True
sheet.row(4).height = 256*20
</snippet></ROW><ROW><id>20614227</id><snippet>groupby</snippet></ROW><ROW><id>20614227</id><snippet>my_resample = lambda x: x.sort_index().tail(1)
</snippet></ROW><ROW><id>20614227</id><snippet>df.groupby(pd.TimeGrouper(freq='M'), group_keys=False).apply(my_resample)
</snippet></ROW><ROW><id>20614227</id><snippet>              values
2013-01-31  5.167121
2013-02-20  4.829109
</snippet></ROW><ROW><id>20614273</id><snippet>pip install Pillow</snippet></ROW><ROW><id>20614320</id><snippet>import Tkinter, tkFileDialog

root = Tkinter.Tk()

x = tkFileDialog.askopenfilename() # Can pass optional arguments for this...

root.destroy()
</snippet></ROW><ROW><id>20614469</id><snippet>tuple</snippet></ROW><ROW><id>20614469</id><snippet>tuple(lst)
</snippet></ROW><ROW><id>20614469</id><snippet>return tuple(lst) == tup
</snippet></ROW><ROW><id>20614539</id><snippet>    {% for c in c_index %}
        &lt;div class='c-index-item' c-id='{{ c.c_id }}'&gt;
            &lt;p&gt;{{ c.name }}&lt;/p&gt;
        &lt;/div&gt;
    {% endfor %}
</snippet></ROW><ROW><id>20614542</id><snippet>check</snippet></ROW><ROW><id>20614542</id><snippet>UserName</snippet></ROW><ROW><id>20614542</id><snippet>user</snippet></ROW><ROW><id>20614827</id><snippet>complete = np.concatenate((a1,a2,a3,a4))
uvals, uind = np.unique(complete, return_inverse=True)
uvals[np.bincount(uind).argsort()[-4:]][::-1]

array([8, 3, 2, 9])
</snippet></ROW><ROW><id>20614827</id><snippet>tolist()</snippet></ROW><ROW><id>20614827</id><snippet>uvals[np.bincount(uind).argsort()[-4:]][::-1].tolist()

[8, 3, 2, 9]
</snippet></ROW><ROW><id>20615006</id><snippet>import subprocess

p = subprocess.Popen(["cgps", "-s"], stdout=subprocess.PIPE)

with open("aaa.txt", "w") as f:
    while True:
        line = p.stdout.readline()
        if not line:
            break
        if some_condition(): # &lt;-- check whether you have enough output
            p.terminate()
            break
        f.writeline(line)

p.wait()
</snippet></ROW><ROW><id>20615162</id><snippet>dict</snippet></ROW><ROW><id>20615162</id><snippet>&gt;&gt;&gt; d = {"a": 1, "b": 2, "c": 3}
&gt;&gt;&gt; for k, v in d.items():
...     print "{}={}".format(k, v)
... 
a=1
c=3
b=2
</snippet></ROW><ROW><id>20615162</id><snippet>dict</snippet></ROW><ROW><id>20615162</id><snippet>&gt;&gt;&gt; for k in d.keys():
...     print k
... 
a
c
b
</snippet></ROW><ROW><id>20615162</id><snippet>dict</snippet></ROW><ROW><id>20615162</id><snippet>&gt;&gt;&gt; for v in d.values():
...     print v
... 
1
3
2
</snippet></ROW><ROW><id>20615162</id><snippet>list</snippet></ROW><ROW><id>20615162</id><snippet>&gt;&gt;&gt; xs = [1, 2, 3]
&gt;&gt;&gt; for x in xs:
...     print x
... 
1
2
3
&gt;&gt;&gt; 
</snippet></ROW><ROW><id>20615162</id><snippet>dict</snippet></ROW><ROW><id>20615162</id><snippet>list</snippet></ROW><ROW><id>20615192</id><snippet># Add new baddies_type_1 at the top of the screen, if needed.</snippet></ROW><ROW><id>20615192</id><snippet>baddies_type_1.append(newbaddie_type_1)</snippet></ROW><ROW><id>20615192</id><snippet>goddies_type_1.append(newgoddie_type_1)</snippet></ROW><ROW><id>20615192</id><snippet># Add new goddies_type_1 at the top of the screen, if needed.</snippet></ROW><ROW><id>20615192</id><snippet>goodies</snippet></ROW><ROW><id>20615192</id><snippet>goddies</snippet></ROW><ROW><id>20615518</id><snippet>r"^top100/(?P&lt;dj_name&gt;[a-zA-Z0-9 &amp;-']+)/$"
</snippet></ROW><ROW><id>20615741</id><snippet>actor = ActorFactory() 
actor.save()
</snippet></ROW><ROW><id>20615741</id><snippet>reverse</snippet></ROW><ROW><id>20615741</id><snippet>url = reverse('my_api.actor_resource', args={'id': actor.id})
</snippet></ROW><ROW><id>20615768</id><snippet>fig.suptitle</snippet></ROW><ROW><id>20615768</id><snippet>ax[i].text(x, y, str)</snippet></ROW><ROW><id>20615768</id><snippet>ax[i]</snippet></ROW><ROW><id>20615768</id><snippet>plt</snippet></ROW><ROW><id>20615768</id><snippet>plt.figtext</snippet></ROW><ROW><id>20615768</id><snippet>ax[0].text</snippet></ROW><ROW><id>20615768</id><snippet>ax</snippet></ROW><ROW><id>20615768</id><snippet>import numpy as np
import matplotlib.pyplot as plt

histogram_data = np.random.rand(1000)
heatmap_data = np.random.rand(10, 100)

# Set up figure and axes
fig = plt.figure()
fig.suptitle("These are my two plots")
top_ax = fig.add_subplot(211) #2 rows, 1 col, 1st plot
bot_ax = fig.add_subplot(212) #2 rows, 1 col, 2nd plot
# This is the same as doing 'fig, (top_ax, bot_ax) = plt.subplots(2)'

# Histogram
weights = np.ones_like(histogram_data) / histogram_data.shape[0]
hist, bins = np.histogram(histogram_data, bins=50, weights=weights)
width = 0.7 * (bins[1] - bins[0])
center = (bins[:-1] + bins[1:]) / 2

# Use top_ax to modify anything with the histogram plot
top_ax.bar(center, hist, align='center', width=width)
# ax.text(x, y, str). Make sure x,y are within your plot bounds ((0, 1), (0, .5))
top_ax.text(0.5, 0.5, "Here is text on the top plot", color='r')

# Heatmap
heatmap_params = {'cmap':plt.cm.Blues, 'alpha':0.8, 'vmin':0, 'vmax':1}

# Use bot_ax to modify anything with the heatmap plot
heatmap = bot_ax.pcolor(heatmap_data, **heatmap_params)
cbar = fig.colorbar(heatmap, shrink=0.8, aspect=10, fraction=.1,pad=.01)

# See how it looks
plt.show()
</snippet></ROW><ROW><id>20615900</id><snippet>name</snippet></ROW><ROW><id>20615900</id><snippet>{% load url from future %}</snippet></ROW><ROW><id>20615988</id><snippet>In [1]: df = DataFrame(np.random.randn(5,2))

In [2]: df
Out[2]: 
          0         1
0  0.943371  0.171686
1  1.508525  0.005589
2 -0.764565  0.259490
3 -1.059662 -0.837602
4  0.561804 -0.592487

[5 rows x 2 columns]

In [3]: pd.set_option('display.precision',12)

In [4]: df
Out[4]: 
               0              1
0  0.94337126946  0.17168604324
1  1.50852519105  0.00558907755
2 -0.76456509501  0.25948965731
3 -1.05966206139 -0.83760201886
4  0.56180449801 -0.59248656304

[5 rows x 2 columns]
</snippet></ROW><ROW><id>20616048</id><snippet>r.encode('utf-8')
</snippet></ROW><ROW><id>20616048</id><snippet>unicode(r)
</snippet></ROW><ROW><id>20616101</id><snippet>In [23]: mi1 = MultiIndex.from_tuples([('bar', 'y'), ('bar', 'z'), ('baz', 'y'), ('baz', 'z'), ('foo', 'y'), ('foo', 'z')],names=['first','second'])

In [24]: dfa = DataFrame(np.random.randn(6),index=mi1)

In [25]: dfa
Out[25]: 
                          0
first second               
bar   y       0.18574062599
      z      -0.82120720368
baz   y      -0.05645183973
      z      -1.07579609513
foo   y      -1.03528813447
      z      -0.46439965218

[6 rows x 1 columns]
</snippet></ROW><ROW><id>20616101</id><snippet>In [26]: dfa.reset_index().sort(columns=['second',0]).set_index(dfa.index.names)
Out[26]: 
                          0
first second               
foo   y      -1.03528813447
baz   y      -0.05645183973
bar   y       0.18574062599
baz   z      -1.07579609513
bar   z      -0.82120720368
foo   z      -0.46439965218

[6 rows x 1 columns]
</snippet></ROW><ROW><id>20616405</id><snippet>requires_auth</snippet></ROW><ROW><id>20616479</id><snippet>indent=1</snippet></ROW><ROW><id>20616479</id><snippet>write()</snippet></ROW><ROW><id>20616479</id><snippet>write</snippet></ROW><ROW><id>20616479</id><snippet>string</snippet></ROW><ROW><id>20616479</id><snippet>'\t'</snippet></ROW><ROW><id>20616587</id><snippet>&gt;&gt;&gt; ListA = [1,2,3]
&gt;&gt;&gt; ListB = [10,20,30]
&gt;&gt;&gt; list(map(sum, zip(ListA, ListB)))
[11, 22, 33]
&gt;&gt;&gt;
</snippet></ROW><ROW><id>20616587</id><snippet>&gt;&gt;&gt; [sum(x) for x in zip(ListA, ListB)]
[11, 22, 33]
&gt;&gt;&gt;
</snippet></ROW><ROW><id>20616587</id><snippet>&gt;&gt;&gt; [x+y for x,y in zip(ListA, ListB)]
[11, 22, 33]
&gt;&gt;&gt;
</snippet></ROW><ROW><id>20617102</id><snippet>__metaclass__</snippet></ROW><ROW><id>20617102</id><snippet>__subclasshook__</snippet></ROW><ROW><id>20617102</id><snippet>__subclasshook__</snippet></ROW><ROW><id>20617102</id><snippet>ABCMeta</snippet></ROW><ROW><id>20617102</id><snippet>&gt;&gt;&gt; type(Foo)
&lt;class 'abc.ABCMeta'&gt;
</snippet></ROW><ROW><id>20617102</id><snippet>__subclasshook__</snippet></ROW><ROW><id>20617102</id><snippet>__subclasscheck__</snippet></ROW><ROW><id>20617102</id><snippet>__subclasshook__</snippet></ROW><ROW><id>20617102</id><snippet>__instancecheck__</snippet></ROW><ROW><id>20617102</id><snippet>__instancecheck__</snippet></ROW><ROW><id>20617102</id><snippet>__subclasshook__</snippet></ROW><ROW><id>20617102</id><snippet>__instancecheck__</snippet></ROW><ROW><id>20617102</id><snippet>ABCMeta</snippet></ROW><ROW><id>20617102</id><snippet>isinstance()</snippet></ROW><ROW><id>20617102</id><snippet>ABCMeta</snippet></ROW><ROW><id>20617102</id><snippet>ABCMeta.__instancecheck__()</snippet></ROW><ROW><id>20617102</id><snippet>Foo</snippet></ROW><ROW><id>20617102</id><snippet>ABCMeta</snippet></ROW><ROW><id>20617102</id><snippet>__instancecheck__</snippet></ROW><ROW><id>20617102</id><snippet>Foo</snippet></ROW><ROW><id>20617102</id><snippet>__instancecheck__</snippet></ROW><ROW><id>20617102</id><snippet>ABCMethod</snippet></ROW><ROW><id>20617102</id><snippet>__subclasscheck__</snippet></ROW><ROW><id>20617102</id><snippet>__subclasshook__</snippet></ROW><ROW><id>20617102</id><snippet>Foo</snippet></ROW><ROW><id>20617102</id><snippet>def interface(*attributes):
    def decorator(Base):

        def checker(Other):
            return all(hasattr(Other, a) for a in attributes)

        def __subclasshook__(cls, Other):
            if checker(Other):
                return True
            return NotImplemented

        def __instancecheck__(cls, Other):
            return checker(Other)

        Base.__metaclass__.__subclasshook__ = classmethod(__subclasshook__)
        Base.__metaclass__.__instancecheck__ = classmethod(__instancecheck__)
        return Base

    return decorator
</snippet></ROW><ROW><id>20617102</id><snippet>True
True
True
True
</snippet></ROW><ROW><id>20617102</id><snippet>__instancecheck__</snippet></ROW><ROW><id>20617102</id><snippet>__instancecheck__</snippet></ROW><ROW><id>20617102</id><snippet>__metaclass__</snippet></ROW><ROW><id>20617102</id><snippet>Foo</snippet></ROW><ROW><id>20617105</id><snippet>return</snippet></ROW><ROW><id>20617105</id><snippet>load()</snippet></ROW><ROW><id>20617105</id><snippet>yield</snippet></ROW><ROW><id>20617105</id><snippet>print('\n'.join(str(l) for l in file1.load()))
</snippet></ROW><ROW><id>20617152</id><snippet>           V → ω X             V → V X                V → ω 
V → ω X? ⇒            V → X* ⇒            V → ω | ζ ⇒ 
           V → ω               V →                    V → ζ
</snippet></ROW><ROW><id>20617152</id><snippet>factor : ('(' expr ')' | procedure | variable) ('.' variable | call)* '!'?
</snippet></ROW><ROW><id>20617152</id><snippet>factor          : factor-prefix factor-suffix '!'?
factor-prefix   : '(' expr ')' | procedure | variable
factor-suffix   : factor-continue*
factor-continue : '.' variable | call
</snippet></ROW><ROW><id>20617152</id><snippet>  factor          : factor-prefix factor-suffix '!'?
⇒
  factor          : factor-prefix factor-suffix '!'
  factor          : factor-prefix factor-suffix

  factor-prefix   : '(' expr ')' | procedure | variable
⇒
  factor-prefix   : '(' expr ')'
  factor-prefix   : procedure
  factor-prefix   : variable

  factor-suffix   : factor-continue*
⇒
  factor-suffix   : factor-suffix factor-continue
  factor-suffix   :

  factor-continue : '.' variable | call
⇒
  factor-continue : '.' variable
  factor-continue : call
</snippet></ROW><ROW><id>20617246</id><snippet>str()</snippet></ROW><ROW><id>20617246</id><snippet>if str(rest)[1] == '1':
    #do something example:
    print 'hi'
</snippet></ROW><ROW><id>20617340</id><snippet>    '%s%s%d' % (url,id, i)
</snippet></ROW><ROW><id>20617340</id><snippet>    url % (id, i)
</snippet></ROW><ROW><id>20617340</id><snippet>'&lt;url&gt;&lt;id&gt;&lt;i&gt;'</snippet></ROW><ROW><id>20617394</id><snippet>c = np.where(np.isnan(b), 3, b)
</snippet></ROW><ROW><id>20617425</id><snippet>import code.Giraffes
</snippet></ROW><ROW><id>20617425</id><snippet>userGiraffe = code.Giraffes.Giraffes.createGiraffe()
</snippet></ROW><ROW><id>20617530</id><snippet>&gt;&gt;&gt; class Foob(object):
...     def __add__(self, o): return 1
...     def __radd__(self, o): return 2
... 
&gt;&gt;&gt; f = Foob()
&gt;&gt;&gt; f + f
1
&gt;&gt;&gt; f + 5
1
&gt;&gt;&gt; 5 + f
2
</snippet></ROW><ROW><id>20617530</id><snippet>__radd__</snippet></ROW><ROW><id>20617530</id><snippet>TypeError</snippet></ROW><ROW><id>20617530</id><snippet>int</snippet></ROW><ROW><id>20617530</id><snippet>+</snippet></ROW><ROW><id>20617564</id><snippet>multiprocessing.Pool()</snippet></ROW><ROW><id>20617564</id><snippet>initializer=</snippet></ROW><ROW><id>20617629</id><snippet>test_*.py</snippet></ROW><ROW><id>20617629</id><snippet>#base.py
import sys
import unittest2 as unittest

class BaseTestClass(unittest.TestCase):

    def setUp(self):
        device = "Type that blocks"
    def tearDown(self):
        pass
</snippet></ROW><ROW><id>20617629</id><snippet># test_configpage.py
from base import *

class ConfigPageTest(BaseTestClass):

    def test_one(self):
        pass

    def test_two(self):
        pass

    @unittest.skipIf(True, 'msg')
    def test_three(self):
        pass
</snippet></ROW><ROW><id>20617629</id><snippet>.S.
----------------------------------------------------------------------
Ran 3 tests in 0.016s

OK (SKIP=1)
</snippet></ROW><ROW><id>20617633</id><snippet>&gt;&gt;&gt; print map(sum, vrt)
</snippet></ROW><ROW><id>20617870</id><snippet>def findTid (j):
    if isinstance (j, dict):
        if 'title' in j and j ['title'] == 'Controller':
            return j ['tid']
        for v in j.values ():
            r = findTid (v)
            if r: return r
    if isinstance (j, list):
        for e in j:
            r = findTid (e)
            if r: return r
</snippet></ROW><ROW><id>20618659</id><snippet>&gt;&gt;&gt; "%(foo)8s" % {'foo': 'bar'}
'     bar'
</snippet></ROW><ROW><id>20618659</id><snippet>"%(asctime)s %(filename)s: %(levelname)8s %(message)s"
</snippet></ROW><ROW><id>20618689</id><snippet>value = str(output)
</snippet></ROW><ROW><id>20618689</id><snippet>value = ', '.join(map(str, output))
</snippet></ROW><ROW><id>20618689</id><snippet>str</snippet></ROW><ROW><id>20618689</id><snippet>str.join</snippet></ROW><ROW><id>20618689</id><snippet>', '</snippet></ROW><ROW><id>20618689</id><snippet>map(str, output)</snippet></ROW><ROW><id>20618689</id><snippet>map</snippet></ROW><ROW><id>20618689</id><snippet>str</snippet></ROW><ROW><id>20618689</id><snippet>output</snippet></ROW><ROW><id>20618689</id><snippet>value = str(output)[1:-1]
</snippet></ROW><ROW><id>20618732</id><snippet>python manage.py celery worker -B</snippet></ROW><ROW><id>20618751</id><snippet>&gt;&gt;&gt; iptable=[56,48,40,32,24,16,8,0,57,49, 41,33,25,17,9,1, 58, 50, 42, 34, 26,
     18, 10,  2, 59, 51, 43, 35,
     62, 54, 46, 38, 30, 22, 14,
      6, 61, 53, 45, 37, 29, 21,
     13,  5, 60, 52, 44, 36, 28,
     20, 12,  4, 27, 19, 11, 3]
&gt;&gt;&gt; from bitarray import bitarray
&gt;&gt;&gt; msg = bitarray(endian='little')
&gt;&gt;&gt; msg.frombytes('AABBCCDD')
&gt;&gt;&gt; enc = bitarray(endian='little')
&gt;&gt;&gt; for i in iptable:
    enc.append(msg[i])


&gt;&gt;&gt; enc
bitarray('00110011001111001100000000001111111100000000000000000000')
&gt;&gt;&gt; msg
bitarray('1000001010000010010000100100001011000010110000100010001000100010')
</snippet></ROW><ROW><id>20618950</id><snippet>for line in file_handle:
</snippet></ROW><ROW><id>20618950</id><snippet>collection.Counter</snippet></ROW><ROW><id>20618950</id><snippet>from collections import Counter
with open('myfile') as f:
    c = Counter(word[0].lower() for word in f.read().split())
</snippet></ROW><ROW><id>20618950</id><snippet>with open('myfile') as f:
    c = Counter()
    for line in f:
        c.update(word[0].lower() for word in line.split())
</snippet></ROW><ROW><id>20618985</id><snippet>container = [[8,2,22,97,38,15,0,40,0,75,4,5,7,78,52,12,50,77,91,8],
             [49,49,99,40,17,81,18,57,60,87,17,40,98,43,69,48,4,56,62,0],
             [81,49,31,73,55,79,14,29,93,71,40,67,53,88,30,3,49,13,36,65],
             ...
            ]
</snippet></ROW><ROW><id>20618985</id><snippet>for array in container:
   for item in array:
       # do something
</snippet></ROW><ROW><id>20618985</id><snippet>container = { 1 : [8,2,22,97,38,15,0,40,0,75,4,5,7,78,52,12,50,77,91,8],
              2 : [49,49,99,40,17,81,18,57,60,87,17,40,98,43,69,48,4,56,62,0],
              3 : [81,49,31,73,55,79,14,29,93,71,40,67,53,88,30,3,49,13,36,65],
              ... 
            }
</snippet></ROW><ROW><id>20618985</id><snippet>for key in sorted(container.keys()):
    for item in container[key]:
        # do something
</snippet></ROW><ROW><id>20619093</id><snippet>global</snippet></ROW><ROW><id>20619093</id><snippet>def refresh():
    global variable4, variable5
    variable4 = variable1 + variable2 + variable3
    variable5 = variable3 - variable2 / variable1
</snippet></ROW><ROW><id>20619093</id><snippet>def refresh(variable1, variable2, variable3):
    variable4 = variable1 + variable2 + variable3
    variable5 = variable3 - variable2 / variable1
    return variable4, variable5
</snippet></ROW><ROW><id>20619093</id><snippet>class</snippet></ROW><ROW><id>20619093</id><snippet>def refresh(self):
    self.variable4 = self.variable1 + self.variable2 + self.variable3
    self.variable5 = self.variable3 - self.variable2 / self.variable1
</snippet></ROW><ROW><id>20619093</id><snippet>variable4</snippet></ROW><ROW><id>20619093</id><snippet>variable5</snippet></ROW><ROW><id>20619093</id><snippet>@property</snippet></ROW><ROW><id>20619093</id><snippet>class BunchOfStuff(object):
    def __init__(self):
        self.variable1 = 5
        self.variable2 = 10
        self.variable3 = 15
        self.refresh()
    def refresh():
        self.variable4 = self.variable1 + self.variable2 + self.variable3
        self.variable5 = self.variable3 - self.variable2 / self.variable1

stuff = BunchOfStuff()
print(stuff.variable4) # prints 30
stuff.variable1 = 10
print(stuff.variable4) # still prints 30
stuff.refresh()
print(stuff.variable4) # now prints 35
</snippet></ROW><ROW><id>20619093</id><snippet>refresh</snippet></ROW><ROW><id>20619093</id><snippet>class BunchOfStuff(object):
    def __init__(self):
        self.variable1 = 5
        self.variable2 = 10
        self.variable3 = 15
    def variable4(self):
        return self.variable1 + self.variable2 + self.variable3

stuff = BunchOfStuff()
print(stuff.variable4()) # prints 30 -- note that it's a method, so we call it
stuff.variable1 = 10
print(stuff.variable4()) # prints 35
</snippet></ROW><ROW><id>20619093</id><snippet>variable4</snippet></ROW><ROW><id>20619093</id><snippet>class BunchOfStuff(object):
    def __init__(self):
        self.variable1 = 5
        self.variable2 = 10
        self.variable3 = 15
    @property
    def variable4(self):
        return self.variable1 + self.variable2 + self.variable3

stuff = BunchOfStuff()
print(stuff.variable4) # prints 30 -- no need to call it, it acts like a variable
stuff.variable1 = 10
print(stuff.variable4) # prints 35
</snippet></ROW><ROW><id>20619266</id><snippet>address</snippet></ROW><ROW><id>20619266</id><snippet>list</snippet></ROW><ROW><id>20619266</id><snippet>address</snippet></ROW><ROW><id>20619266</id><snippet>nodes = []
for n in range(1000):
    nodes.append({
        'address':n,
        'resistance':x,
        'special':[],
        'parent':y,
        'children':[],
        'adjnodes':[]
    })
</snippet></ROW><ROW><id>20619266</id><snippet>dict</snippet></ROW><ROW><id>20619266</id><snippet>nodes = {}
for n in range(1000):
    nodes[n] = {
        'address':n,
        'resistance':x,
        'special':[],
        'parent':y,
        'children':[],
        'adjnodes':[]
    }
</snippet></ROW><ROW><id>20619443</id><snippet>.loc</snippet></ROW><ROW><id>20619443</id><snippet>.ix</snippet></ROW><ROW><id>20619443</id><snippet>.iloc</snippet></ROW><ROW><id>20619443</id><snippet>In [18]: p = tm.makePanel()

In [19]: p
Out[19]: 
&lt;class 'pandas.core.panel.Panel'&gt;
Dimensions: 3 (items) x 30 (major_axis) x 4 (minor_axis)
Items axis: ItemA to ItemC
Major_axis axis: 2000-01-03 00:00:00 to 2000-02-11 00:00:00
Minor_axis axis: A to D

In [20]: p.loc[:,'2000-1-4':'2000-1-31']
Out[20]: 
&lt;class 'pandas.core.panel.Panel'&gt;
Dimensions: 3 (items) x 20 (major_axis) x 4 (minor_axis)
Items axis: ItemA to ItemC
Major_axis axis: 2000-01-04 00:00:00 to 2000-01-31 00:00:00
Minor_axis axis: A to D
</snippet></ROW><ROW><id>20619497</id><snippet>place</snippet></ROW><ROW><id>20619497</id><snippet>pack</snippet></ROW><ROW><id>20619497</id><snippet>from tkinter import *
root=Tk()
mylabel = Label(root,text="This is my lablel.")
mylabel.place(x=30,y=30,height=20,width=100)
</snippet></ROW><ROW><id>20619669</id><snippet>?api_token=ab123cd45</snippet></ROW><ROW><id>20619669</id><snippet>&amp;api_token=ab123cd45</snippet></ROW><ROW><id>20619669</id><snippet>?</snippet></ROW><ROW><id>20619669</id><snippet>&amp;</snippet></ROW><ROW><id>20619706</id><snippet>#as example to be short enough
command = "meme subset_{filenum}.fas &gt; subset_{filenum}.MEME"

for i in range(100):
    param={"filenum":i} #this is used to replace {filenum} with i in comnmand
                        #param is dict with string as key
    command_t=command.format(**param)
    print command_t
    subprocess.call(command_t,shell=True)
</snippet></ROW><ROW><id>20619825</id><snippet>kivy.config.Config</snippet></ROW><ROW><id>20619825</id><snippet>fullscreen</snippet></ROW><ROW><id>20619825</id><snippet>fake</snippet></ROW><ROW><id>20619825</id><snippet>from kivy.config import Config
Config.set('graphics', 'fullscreen', 'fake')

from kivy.app import App
from kivy.uix.button import Button

class MyApp(App):
    def build(self):
        button = Button(text="Exit", size_hint=(None, None))
        button.bind(on_press=exit)
        return button

if __name__ == '__main__':
    MyApp().run()
</snippet></ROW><ROW><id>20619825</id><snippet>from kivy.config import Config
Config.set('graphics', 'fullscreen', 'fake')
Config.set('graphics', 'position', 'custom')
Config.set('graphics', 'top', '300')
Config.set('graphics', 'left', '300')

from kivy.app import App
from kivy.uix.button import Button

class MyApp(App):
    def build(self):
        button = Button(text="Exit", size_hint=(None, None))
        button.bind(on_press=exit)
        return button

if __name__ == '__main__':
    MyApp().run()
</snippet></ROW><ROW><id>20619971</id><snippet>pd.factorize</snippet></ROW><ROW><id>20619971</id><snippet>import pandas as pd

x = pd.DataFrame({'cat':('A','A','B'), 'val':(10,20,30)})
labels, levels = pd.factorize(x['cat'])
x['cat'] = labels
x = x.set_index('cat')
print(x)
</snippet></ROW><ROW><id>20619971</id><snippet>     val
cat     
0     10
0     20
1     30
</snippet></ROW><ROW><id>20619971</id><snippet>labels</snippet></ROW><ROW><id>20619971</id><snippet>x['cat'] = labels+1
</snippet></ROW><ROW><id>20620271</id><snippet>pandas</snippet></ROW><ROW><id>20620271</id><snippet>pandas.read_table</snippet></ROW><ROW><id>20620271</id><snippet>import pandas as pd
data_frame = pd.read_table('test_data.txt', sep='\s+', header=None)
data_frame.columns = ['year', 'month', 'day', 'n1', 'n2', 'n3', 'n4', 'type']
data_frame
</snippet></ROW><ROW><id>20620271</id><snippet>data_frame.describe()</snippet></ROW><ROW><id>20620466</id><snippet>...
content = response.read()
data = json.loads(content)
if not data.get('results', {}).get('companies'):
    break
...
</snippet></ROW><ROW><id>20620466</id><snippet>import json
import os
from time import sleep
import requests

url = 'http://api.opencorporates.com/v0.2/companies/search'
token = 'ab123cd45'
rate = 20  # seconds to wait after rate limited

with open('codes') as f:
    codes = [l.strip('\n') for l in f]


def get_page(code, page, **kwargs):
    params = {
        # 'api_token': token,
        'jurisdiction_code': code,
        'page': page,
    }
    params.update(kwargs)

    while True:
        r = requests.get(url, params=params)

        try:
            data = r.json()
        except ValueError:
            return None

        if 'error' in data:
            print data['error']['message']
            sleep(rate)
            continue

        return data['results']


def dump_page(code, page, data):
    with open(os.path.join(code, str(page) + '.json'), 'w') as f:
        json.dump(data, f)


for code in codes:
    try:
        os.makedirs(code)
    except os.error:
        pass

    data = get_page(code, 1)
    if data is None:
        continue

    dump_page(code, 1, data['companies'])

    for page in xrange(1, int(data.get('total_pages', 1))):
        data = get_page(code, page)
        if data is None:
            break

        dump_page(code, page, data['companies'])
</snippet></ROW><ROW><id>20620525</id><snippet>urllib.urlretrieve("x", "0001.jpg")
</snippet></ROW><ROW><id>20620525</id><snippet>"x"</snippet></ROW><ROW><id>20620525</id><snippet>x</snippet></ROW><ROW><id>20620525</id><snippet>urllib.urlretrieve(x, "0001.jpg")
</snippet></ROW><ROW><id>20620525</id><snippet>urlparse.urlsplit</snippet></ROW><ROW><id>20620525</id><snippet>path</snippet></ROW><ROW><id>20620525</id><snippet>split</snippet></ROW><ROW><id>20620525</id><snippet>/</snippet></ROW><ROW><id>20620525</id><snippet>url = 'http://www.dumpaday.com/wp-content/uploads/2013/12/funny-160.jpg'
urlParts = urlparse.urlsplit(url)
print(urlParts.path) # /wp-content/uploads/2013/12/funny-160.jpg

filename = urlParts.path.split('/')[-1]
print(filename) # funny-160.jpg
</snippet></ROW><ROW><id>20620525</id><snippet>import urllib2
import urllib
import json
import urlparse

def main():
    with open("C:\Users\Stern Marketing\Desktop\dumpaday.txt","r") as f:
        for x in f:
            urlParts = urlparse.urlsplit(x.strip())
            filename = urlParts.path.split('/')[-1]
            urllib.urlretrieve(x.strip(), filename)

if __name__ == "__main__":
    main()`
</snippet></ROW><ROW><id>20620555</id><snippet>os.startfile</snippet></ROW><ROW><id>20620555</id><snippet>CRFOLDER</snippet></ROW><ROW><id>20620555</id><snippet>.py</snippet></ROW><ROW><id>20620685</id><snippet>UnboundLocalError</snippet></ROW><ROW><id>20620685</id><snippet>datetime</snippet></ROW><ROW><id>20620685</id><snippet>datetime</snippet></ROW><ROW><id>20620685</id><snippet>real_datetime = datetime</snippet></ROW><ROW><id>20620685</id><snippet>class datetime(datetime.datetime):
    ...
</snippet></ROW><ROW><id>20620685</id><snippet>datetime = type('datetime', (datetime.datetime), {...class members...})
</snippet></ROW><ROW><id>20620685</id><snippet>datetime</snippet></ROW><ROW><id>20620685</id><snippet>__name__</snippet></ROW><ROW><id>20620685</id><snippet>nonlocal datetime</snippet></ROW><ROW><id>20620726</id><snippet>list</snippet></ROW><ROW><id>20620726</id><snippet>global</snippet></ROW><ROW><id>20621096</id><snippet>log(x)</snippet></ROW><ROW><id>20621096</id><snippet>x</snippet></ROW><ROW><id>20621143</id><snippet>$TRAVIS_PYTHON_VERSION</snippet></ROW><ROW><id>20621143</id><snippet>python:
  - 2.6
  - 2.7
  - 3.2
  - 3.3
  - pypy
install:
  - if [[ $TRAVIS_PYTHON_VERSION == 2.6 ]]; then pip install --use-mirrors importlib unittest2; fi
  - pip install -r requirements.txt
</snippet></ROW><ROW><id>20621143</id><snippet>unittest2</snippet></ROW><ROW><id>20621143</id><snippet>importlib</snippet></ROW><ROW><id>20621235</id><snippet>plot()</snippet></ROW><ROW><id>20621235</id><snippet>pd.concat([rng0,rng1,rng2,rng3,rng4,rng5],axis=1).T.plot()
</snippet></ROW><ROW><id>20621332</id><snippet>elements = []
elements.append(range(0,6))
</snippet></ROW><ROW><id>20621332</id><snippet>elements = range(0,6)
</snippet></ROW><ROW><id>20621332</id><snippet>elements</snippet></ROW><ROW><id>20621332</id><snippet>range(0,6)</snippet></ROW><ROW><id>20621332</id><snippet>[[0,1,2,3,4,5]]</snippet></ROW><ROW><id>20621332</id><snippet>[range(0,6)]</snippet></ROW><ROW><id>20621527</id><snippet>wx.StaticBox</snippet></ROW><ROW><id>20621527</id><snippet>StaticBox</snippet></ROW><ROW><id>20621527</id><snippet>Disable</snippet></ROW><ROW><id>20621527</id><snippet>Disable</snippet></ROW><ROW><id>20621545</id><snippet>&gt;&gt;&gt; m = re.search(r'(\d+)([A-Za-z]+)?\-(\d+)([A-Za-z]+)?', '01a-09B')
&gt;&gt;&gt; m.groups()
('01', 'a', '09', 'B')
&gt;&gt;&gt; m = re.search(r'(\d+)([A-Za-z]+)?\-(\d+)([A-Za-z]+)?', '01-09B')
&gt;&gt;&gt; m.groups()
('01', None, '09', 'B')
</snippet></ROW><ROW><id>20621647</id><snippet>add_student</snippet></ROW><ROW><id>20621647</id><snippet>remove_student</snippet></ROW><ROW><id>20621647</id><snippet>self.student</snippet></ROW><ROW><id>20621647</id><snippet>__init__</snippet></ROW><ROW><id>20621647</id><snippet>def __init__(self, courseName, capacity):
    # existing stuff
    self.student = {}
</snippet></ROW><ROW><id>20621647</id><snippet>add_student</snippet></ROW><ROW><id>20621647</id><snippet>value</snippet></ROW><ROW><id>20621647</id><snippet>def add_student(self, key, value):
    self.student[key] = value
</snippet></ROW><ROW><id>20621647</id><snippet>johnsmith = student('John', 'Smith', 14, 3.5)
intropython = course('Python 1', 20)
intropython.add_student('John Smith', johnsmith)
</snippet></ROW><ROW><id>20621647</id><snippet>len(self.student) == self.capacity</snippet></ROW><ROW><id>20621689</id><snippet>str.split</snippet></ROW><ROW><id>20621689</id><snippet>&gt;&gt;&gt; data_file = 'my_file.10.4.5.6.csv'
&gt;&gt;&gt; parts = data_file.split('.')
&gt;&gt;&gt; print parts[0] + '.' + parts[-1]
my_file.csv
</snippet></ROW><ROW><id>20621689</id><snippet>&gt;&gt;&gt; print re.sub(r'\..*\.', '.', data_file)
my_file.csv
</snippet></ROW><ROW><id>20622118</id><snippet>try:
    # Your code here
except urllib3.exceptions.MaxRetryError:
    # handle the exception here
</snippet></ROW><ROW><id>20622586</id><snippet>from BeautifulSoup import BeautifulSoup
soup = BeautifulSoup(open('xml.txt', 'r'))

print soup.findAll('exchange-document')["status"]

#&gt; not found 
</snippet></ROW><ROW><id>20622586</id><snippet>from BeautifulSoup import BeautifulSoup
soup = BeautifulSoup(open('xml.txt', 'r'))

for tag in soup.findAll('exchange-document'):
    print tag["status"]

#&gt; not found
</snippet></ROW><ROW><id>20622586</id><snippet>for tag in soup.findAll('exchange-document'):
    if tag["status"] not in "not found":
        print tag["status"]
</snippet></ROW><ROW><id>20622597</id><snippet>import cgi

text = results[i]["Teaser"] # the text that you want to put into textarea
html_safe_text = cgi.escape(text) # &lt; &gt; &amp; -&gt; &lt; &gt; &amp;
textarea_html = u"&lt;textarea&gt;{}&lt;/textarea&gt;".format(html_safe_text)
</snippet></ROW><ROW><id>20622597</id><snippet>import tempfile
import webbrowser
import time

def open_in_browser(html):
    """like lxml.html.open_in_browser() but `html` is a bytestring."""
    with tempfile.NamedTemporaryFile("wb", 0, suffix='.html') as file:
        file.write(html)
        webbrowser.open(file.name)
        time.sleep(60) # give the browser a minute to open before
                       # deleting the file

open_in_browser((u'''&lt;!doctype html&gt;
    &lt;meta charset="utf-8"&gt;
    &lt;title&gt;Fill textarea&lt;/title&gt;
''' + textarea_html).encode('utf-8'))
</snippet></ROW><ROW><id>20622597</id><snippet>fill-textarea.py</snippet></ROW><ROW><id>20622600</id><snippet>w = .2
bins = np.linspace(-4, 4, 11, endpoint=True)
fig, ax = plt.subplots()
for j in range(1, 15):
    tt = randn(50)

    nn, _bins = np.histogram(tt, bins)
    #  don't use scatter unless you need to change the size or color of the markers
    ax.plot(j*np.ones_like(tt), tt, 'r.')
    ax.imshow(nn.reshape(-1, 1)[::-1], extent=[j-w, j+w, -4, 4], cmap='Blues', aspect='auto', interpolation='none')


ax.set_xlim([0, 15])
ax.set_ylim([-4, 4])
</snippet></ROW><ROW><id>20622600</id><snippet>Rectangle</snippet></ROW><ROW><id>20622600</id><snippet>vmax</snippet></ROW><ROW><id>20622600</id><snippet>vmin</snippet></ROW><ROW><id>20622600</id><snippet>imshow</snippet></ROW><ROW><id>20622633</id><snippet>dbm.open</snippet></ROW><ROW><id>20622680</id><snippet>font.render</snippet></ROW><ROW><id>20622680</id><snippet>textsurface=font.render('Test', True, (0, 0, 0))
surface=pygame.Surface((100, 30))
surface.fill((255, 255, 255))
surface.blit(textsurface, pygame.Rect(0, 0, 10, 10))
surface.set_alpha(50)
window.blit(surface, pygame.Rect(0, 30, 10, 10))
</snippet></ROW><ROW><id>20622925</id><snippet>init()</snippet></ROW><ROW><id>20622925</id><snippet>main.py</snippet></ROW><ROW><id>20622925</id><snippet>if __name__ == '__main__':</snippet></ROW><ROW><id>20622925</id><snippet>__name__</snippet></ROW><ROW><id>20622925</id><snippet>helper</snippet></ROW><ROW><id>20622925</id><snippet>init()</snippet></ROW><ROW><id>20622925</id><snippet>import helper</snippet></ROW><ROW><id>20622925</id><snippet>import main</snippet></ROW><ROW><id>20622925</id><snippet>main</snippet></ROW><ROW><id>20622925</id><snippet>import helper</snippet></ROW><ROW><id>20622925</id><snippet>main</snippet></ROW><ROW><id>20622925</id><snippet>main</snippet></ROW><ROW><id>20622925</id><snippet>init()</snippet></ROW><ROW><id>20622925</id><snippet>init()</snippet></ROW><ROW><id>20622925</id><snippet>helper</snippet></ROW><ROW><id>20622925</id><snippet>way_out_quest</snippet></ROW><ROW><id>20623276</id><snippet>result</snippet></ROW><ROW><id>20623276</id><snippet>result</snippet></ROW><ROW><id>20623276</id><snippet>result</snippet></ROW><ROW><id>20623276</id><snippet>result</snippet></ROW><ROW><id>20623355</id><snippet>url_for</snippet></ROW><ROW><id>20623355</id><snippet>&lt;td&gt;&lt;a&gt; href="{{ url_for('on_plot', label=stats[0]) }}"&gt;{{stats[0]}} &lt;/a&gt;&lt;/td&gt;
</snippet></ROW><ROW><id>20623355</id><snippet>url_for()</snippet></ROW><ROW><id>20623532</id><snippet>return (a1, z1)
</snippet></ROW><ROW><id>20623532</id><snippet>(a, z) = populate()
</snippet></ROW><ROW><id>20623532</id><snippet>printInfo(a1, z1):
</snippet></ROW><ROW><id>20623532</id><snippet>printInfo(a,z)
</snippet></ROW><ROW><id>20623981</id><snippet>self.__class__</snippet></ROW><ROW><id>20623981</id><snippet>class Foo(object):
    def create_new(self):
        return self.__class__()

    def create_new2(self):
        return Foo()

class Bar(Foo):
    pass

b = Bar()
c = b.create_new()
print type(c)  # We got an instance of Bar
d = b.create_new2()
print type(d)  # we got an instance of Foo
</snippet></ROW><ROW><id>20624034</id><snippet>from PyQt4 import QtCore, QtGui

class Window(QtGui.QMainWindow):
    def __init__(self):
        QtGui.QMainWindow.__init__(self)
        menu = self.menuBar().addMenu('&amp;File')
        action = menu.addAction('&amp;Open')
        action.setShortcut(QtGui.QKeySequence('Ctrl+F'))
        action.triggered.connect(self.handleFind)
        shortcut = QtGui.QShortcut(QtGui.QKeySequence('F3'), self)
        shortcut.activated.connect(self.handleFind)
        label = QtGui.QLabel(self)
        label.setText('&lt;center&gt;Press Ctrl+F or F3&lt;center&gt;')
        self.setCentralWidget(label)

    def handleFind(self):
        reply = QtGui.QMessageBox.question(
            self, 'Message', 'Find Dialog',
            QtGui.QMessageBox.Yes | QtGui.QMessageBox.No)
        if reply == QtGui.QMessageBox.Yes:
            print('Yes')
        else:
            print('No')

if __name__ == '__main__':

    import sys
    app = QtGui.QApplication(sys.argv)
    window = Window()
    window.setGeometry(500, 300, 300, 200)
    window.show()
    sys.exit(app.exec_())
</snippet></ROW><ROW><id>20624072</id><snippet>raw_input</snippet></ROW><ROW><id>20624072</id><snippet>greatest</snippet></ROW><ROW><id>20624072</id><snippet>raw_input</snippet></ROW><ROW><id>20624072</id><snippet>&gt;&gt;&gt; 1 &lt; 'a'
True
&gt;&gt;&gt; 100000000000 &lt; 'a'
True
&gt;&gt;&gt;
</snippet></ROW><ROW><id>20624072</id><snippet>True</snippet></ROW><ROW><id>20624072</id><snippet>greatest</snippet></ROW><ROW><id>20624072</id><snippet>i</snippet></ROW><ROW><id>20624072</id><snippet>greatest</snippet></ROW><ROW><id>20624072</id><snippet>i</snippet></ROW><ROW><id>20624072</id><snippet>inputNum = int(raw_input("What is max number?"))
</snippet></ROW><ROW><id>20624089</id><snippet>pycu_alloc.restypes = [c_void_p]   
</snippet></ROW><ROW><id>20624089</id><snippet>pycu_alloc.restype = c_void_p
</snippet></ROW><ROW><id>20624089</id><snippet>ctypes</snippet></ROW><ROW><id>20624089</id><snippet>ctypes</snippet></ROW><ROW><id>20624089</id><snippet>int</snippet></ROW><ROW><id>20624089</id><snippet>c_void_p</snippet></ROW><ROW><id>20624089</id><snippet>int</snippet></ROW><ROW><id>20624089</id><snippet>cudaErrorInvalidValue</snippet></ROW><ROW><id>20624089</id><snippet>c_da = c_void_p(da)
</snippet></ROW><ROW><id>20624089</id><snippet>argtypes</snippet></ROW><ROW><id>20624089</id><snippet>c_void_p</snippet></ROW><ROW><id>20624089</id><snippet>int</snippet></ROW><ROW><id>20624089</id><snippet>c_void_p</snippet></ROW><ROW><id>20624089</id><snippet>malloc</snippet></ROW><ROW><id>20624089</id><snippet>free</snippet></ROW><ROW><id>20624089</id><snippet>free</snippet></ROW><ROW><id>20624089</id><snippet>malloc = libc.malloc
malloc.argtypes = [c_size_t]
malloc.restype = c_void_p # comment this line to crash on most 64-bit platforms

free = libc.free
free.argtypes = [c_void_p]
free.restype = None

a = malloc(1024)
free(a) # commenting this line and uncommenting the next two has no effect
#c_a = c_void_p(a)
#free(ca)
</snippet></ROW><ROW><id>20624201</id><snippet>def strip_first_col(fname, delimiter=None):
    with open(fname, 'r') as fin:
        for line in fin:
            try:
               yield line.split(delimiter, 1)[1]
            except IndexError:
               continue

data = np.loadtxt(strip_first_col('myfilename'))
</snippet></ROW><ROW><id>20624253</id><snippet>TextIOWrapper</snippet></ROW><ROW><id>20624253</id><snippet>for bline in readFile:
    try:
        line = bline.decode('utf-8')
    except UnicodeDecodeError:
        continue
    # do stuff with line
</snippet></ROW><ROW><id>20624425</id><snippet>if self.is_empty:
</snippet></ROW><ROW><id>20624425</id><snippet>True</snippet></ROW><ROW><id>20624425</id><snippet>if self.is_empty():
</snippet></ROW><ROW><id>20624425</id><snippet>pop</snippet></ROW><ROW><id>20624425</id><snippet>is_empty()</snippet></ROW><ROW><id>20624425</id><snippet>False</snippet></ROW><ROW><id>20624425</id><snippet>if not self.is_empty():
</snippet></ROW><ROW><id>20624521</id><snippet>LinearSVC</snippet></ROW><ROW><id>20624521</id><snippet>&gt;&gt;&gt; svc = LinearSVC(verbose=1)
&gt;&gt;&gt; svc.fit(data, groups)
[LibLinear]....................................................................................................
optimization finished, #iter = 1000

WARNING: reaching max number of iterations
Using -s 2 may be faster (also see FAQ)

Objective value = -0.001256
nSV = 4
LinearSVC(C=1.0, class_weight=None, dual=True, fit_intercept=True,
     intercept_scaling=1, loss='l2', multi_class='ovr', penalty='l2',
     random_state=None, tol=0.0001, verbose=1)
</snippet></ROW><ROW><id>20624521</id><snippet>LinearSVC</snippet></ROW><ROW><id>20624521</id><snippet>&gt;&gt;&gt; from sklearn.preprocessing import scale
&gt;&gt;&gt; data = scale(data)
&gt;&gt;&gt; svc.fit(data, groups)
[LibLinear]...
optimization finished, #iter = 39
Objective value = -0.240988
nSV = 4
LinearSVC(C=1.0, class_weight=None, dual=True, fit_intercept=True,
     intercept_scaling=1, loss='l2', multi_class='ovr', penalty='l2',
     random_state=None, tol=0.0001, verbose=1)
&gt;&gt;&gt; svc.predict(data)
array([1, 1, 2, 2])
</snippet></ROW><ROW><id>20624533</id><snippet>fmt="%s"</snippet></ROW><ROW><id>20624533</id><snippet>%s</snippet></ROW><ROW><id>20624533</id><snippet>%s</snippet></ROW><ROW><id>20624533</id><snippet>fmt='"%s"'</snippet></ROW><ROW><id>20624533</id><snippet>delimiter=' |</snippet></ROW><ROW><id>20624533</id><snippet>text1, text2 | text3
text4 | text5
</snippet></ROW><ROW><id>20624533</id><snippet>csv</snippet></ROW><ROW><id>20624533</id><snippet>csv</snippet></ROW><ROW><id>20624533</id><snippet>with open(filename, 'wb') as f:
    csv.writer(f).writerows(array)
</snippet></ROW><ROW><id>20624533</id><snippet>,</snippet></ROW><ROW><id>20624533</id><snippet>,</snippet></ROW><ROW><id>20624581</id><snippet>RemoveBAIO.py</snippet></ROW><ROW><id>20624581</id><snippet>routes.csv</snippet></ROW><ROW><id>20624581</id><snippet>csv</snippet></ROW><ROW><id>20624581</id><snippet>"route_id"</snippet></ROW><ROW><id>20624581</id><snippet>"\xef\xbb\xbfroute_id"</snippet></ROW><ROW><id>20624581</id><snippet>codecs.open()</snippet></ROW><ROW><id>20624581</id><snippet>'utf-8-sig'</snippet></ROW><ROW><id>20624581</id><snippet>codecs</snippet></ROW><ROW><id>20624581</id><snippet>int</snippet></ROW><ROW><id>20624581</id><snippet>"route_type"</snippet></ROW><ROW><id>20624581</id><snippet>ValueError</snippet></ROW><ROW><id>20624581</id><snippet>bus_route_ids.csv</snippet></ROW><ROW><id>20624581</id><snippet>routes.csv</snippet></ROW><ROW><id>20624581</id><snippet>\xa0</snippet></ROW><ROW><id>20624581</id><snippet>import codecs
import csv
import os

path_to_folder = '/insert/path/'

with open('hasfares.txt', 'w') as hf:
    for root, subFolders, files in os.walk(path_to_folder):
        if 'fare_rules.csv' in files:
            hf.write('%s\n' % root)

        if 'routes.csv' in files:
            routes_path = os.path.join(root, 'routes.csv')
            bus_route_ids_path = os.path.join(root, 'bus_route_ids.csv')
            appending_to_existing_file = os.path.exists(bus_route_ids_path)
            with codecs.open(routes_path, 'r', 'utf-8-sig') as inf, \
                    open(os.path.join(root, "bus_route_ids.csv"), "a") as output:
                reader = csv.DictReader(inf, quotechar='"')
                headers = ['route_id']
                writer_bus_routes = csv.DictWriter(output, headers,
                                                   extrasaction='ignore')
                if not appending_to_existing_file:
                    writer_bus_routes.writeheader()
                for row in reader:
                    if row['route_type'] == '3':
                        writer_bus_routes.writerow(row)
</snippet></ROW><ROW><id>20624581</id><snippet>bus_route_ids.csv</snippet></ROW><ROW><id>20624581</id><snippet>route_id
E1
E2
N
N1
N2
N3
170
S1
S2
S3
S4
W1
W2
W3
W4
C
</snippet></ROW><ROW><id>20624583</id><snippet>util.py</snippet></ROW><ROW><id>20624583</id><snippet>python setup.py install</snippet></ROW><ROW><id>20624583</id><snippet>util.py</snippet></ROW><ROW><id>20624583</id><snippet>PYTHONPATH</snippet></ROW><ROW><id>20624583</id><snippet>ImportError</snippet></ROW><ROW><id>20624742</id><snippet>tuple_list = zip(appliedFieldOP, appliedFieldOP2)
filtered = filter(lambda x: x1+1000 &gt;= x[0] &gt;= x1-1000, tuple_list)
</snippet></ROW><ROW><id>20624861</id><snippet>if(os.python.version&lt;3.0):
    from _future_ import print, super
</snippet></ROW><ROW><id>20624861</id><snippet>__future__</snippet></ROW><ROW><id>20624861</id><snippet>__future__</snippet></ROW><ROW><id>20624861</id><snippet>from __future__ import print_function
</snippet></ROW><ROW><id>20624877</id><snippet>Create_Validate_Code</snippet></ROW><ROW><id>20624877</id><snippet>from .auth_code import Create_Validate_Code
auth_code_str = Create_Validate_Code()
</snippet></ROW><ROW><id>20624877</id><snippet>Create_Validate_Code()
</snippet></ROW><ROW><id>20624877</id><snippet>site-packages</snippet></ROW><ROW><id>20624942</id><snippet>#!/usr/bin/python
import sys
import zlib
f = open(sys.argv[1], "rb")
g = open(sys.argv[2], "wb")
z = zlib.decompressobj()
while True:
    buf = z.unconsumed_tail
    if buf == "":
        buf = f.read(8192)
        if buf == "":
            break
    got = z.decompress(buf)
    if got == "":
        break
    g.write(got)
</snippet></ROW><ROW><id>20624984</id><snippet>...
schools = School.query

if form.name.data:
    schools = schools.filter(School.name == form.name.data)

if form.city.data:
    schools = schools.filter(School.city == form.city.data)

if form.state.data:
    schools = schools.filter(School.state == form.state.data)

# at this point schools is a query filtered with whatever was given
...
</snippet></ROW><ROW><id>20624984</id><snippet>query()</snippet></ROW><ROW><id>20624984</id><snippet>filter(query)</snippet></ROW><ROW><id>20624984</id><snippet>form = FilterForm(request.args)  # use get for filtering
schools = form.query()
if form.validate():
    schools = form.filter(schools)
return render_template('schools.html', form=form, schools=schools)
</snippet></ROW><ROW><id>20625023</id><snippet>print u'\u2019'.encode('UTF-8')
</snippet></ROW><ROW><id>20625023</id><snippet>â€™</snippet></ROW><ROW><id>20625023</id><snippet>’</snippet></ROW><ROW><id>20625023</id><snippet>\u2013</snippet></ROW><ROW><id>20625023</id><snippet>\xe2</snippet></ROW><ROW><id>20625023</id><snippet>\x80</snippet></ROW><ROW><id>20625023</id><snippet>\x99</snippet></ROW><ROW><id>20625023</id><snippet>â</snippet></ROW><ROW><id>20625023</id><snippet>€</snippet></ROW><ROW><id>20625023</id><snippet>™</snippet></ROW><ROW><id>20625023</id><snippet>sys.stdout.encoding</snippet></ROW><ROW><id>20625023</id><snippet>errors</snippet></ROW><ROW><id>20625023</id><snippet>encode</snippet></ROW><ROW><id>20625118</id><snippet>dict</snippet></ROW><ROW><id>20625118</id><snippet>&gt;&gt;&gt; print "My name is {name} and my email is {email}".format(name="Jeff", email="me@mail.com")
My name is Jeff and my email is me@mail.com
&gt;&gt;&gt;
</snippet></ROW><ROW><id>20625162</id><snippet>os.path</snippet></ROW><ROW><id>20625162</id><snippet>filename = 'path/to/file{0:05}.ext'
n = 0
while os.path.exists(filename.format(n)):
    n += 1
print(filename.format(n))
</snippet></ROW><ROW><id>20625174</id><snippet>psutil</snippet></ROW><ROW><id>20625174</id><snippet>Popen</snippet></ROW><ROW><id>20625174</id><snippet>wait</snippet></ROW><ROW><id>20625174</id><snippet>Popen.communicate</snippet></ROW><ROW><id>20625174</id><snippet>subprocess</snippet></ROW><ROW><id>20625174</id><snippet>os</snippet></ROW><ROW><id>20625174</id><snippet>psutil</snippet></ROW><ROW><id>20625174</id><snippet>Popen</snippet></ROW><ROW><id>20625174</id><snippet>wait</snippet></ROW><ROW><id>20625174</id><snippet>communicate</snippet></ROW><ROW><id>20625174</id><snippet>os.wait</snippet></ROW><ROW><id>20625174</id><snippet>os</snippet></ROW><ROW><id>20625174</id><snippet>psutil.wait</snippet></ROW><ROW><id>20625174</id><snippet>os</snippet></ROW><ROW><id>20625174</id><snippet>psutil.Popen</snippet></ROW><ROW><id>20625174</id><snippet>subprocess.Popen</snippet></ROW><ROW><id>20625347</id><snippet>elif r &lt;= 10000*b:
    return 0.5*x + 255.0
</snippet></ROW><ROW><id>20625347</id><snippet>(xh,yh) = Hf(xh,yh,r)</snippet></ROW><ROW><id>20625347</id><snippet>r &lt;= 10000*b</snippet></ROW><ROW><id>20625347</id><snippet>Hf</snippet></ROW><ROW><id>20625596</id><snippet>set.pop</snippet></ROW><ROW><id>20625596</id><snippet>&gt;&gt;&gt; {1}.pop()
1
&gt;&gt;&gt;
</snippet></ROW><ROW><id>20625596</id><snippet>return S.pop()
</snippet></ROW><ROW><id>20625596</id><snippet>min</snippet></ROW><ROW><id>20625596</id><snippet>max</snippet></ROW><ROW><id>20625596</id><snippet>return min(S) # 'max' would also work here
</snippet></ROW><ROW><id>20625596</id><snippet>&gt;&gt;&gt; S = {1}
&gt;&gt;&gt; min(S)
1
&gt;&gt;&gt; S
set([1])
&gt;&gt;&gt; max(S)
1
&gt;&gt;&gt; S
set([1])
&gt;&gt;&gt; 
</snippet></ROW><ROW><id>20625614</id><snippet>while True: wr.write('Hello Master\n') …</snippet></ROW><ROW><id>20625614</id><snippet>KeyboardInterrupt</snippet></ROW><ROW><id>20625614</id><snippet>master.rulez(3)</snippet></ROW><ROW><id>20625614</id><snippet>KeyboardInterrupt</snippet></ROW><ROW><id>20625614</id><snippet>master.rulez(3)</snippet></ROW><ROW><id>20625614</id><snippet>except KeyboardInterrupt</snippet></ROW><ROW><id>20625614</id><snippet>len(self.workers)</snippet></ROW><ROW><id>20625614</id><snippet>master.rulez(3)</snippet></ROW><ROW><id>20625614</id><snippet>KeyboardInterrupt</snippet></ROW><ROW><id>20625614</id><snippet>sys.exit()</snippet></ROW><ROW><id>20625614</id><snippet>os.kill()</snippet></ROW><ROW><id>20625614</id><snippet>import os
import time
import signal
import sys


class ChildProcess:
  def __init__(self, m):
    self.pid = None
    self.ttl = 10
    self.master = m
    self.pipe_in = None
    self.pipe_out = None

  def hey(self):
    self.ttl -= 1
    self.pipe_out.write('Hello worker %d\n' % self.pid)
    self.pipe_out.flush()

  def tell_me(self):
    msg = self.pipe_in.readline()
    print '[M] Worker process %d says: %s' % (self.pid, msg),

  def live(self):
    r1, w1 = os.pipe()
    r2, w2 = os.pipe()
    pid = os.fork()
    self.pid = pid
    if pid:
      print('[M] Created worker process %d' % pid)
      os.close(w1)
      os.close(r2)
      self.pipe_in = os.fdopen(r1, 'rt')
      self.pipe_out = os.fdopen(w2, 'wt')
      self.master.add(self)
    else:
      print('[W] Worker process ready to rock')
      os.close(r1)
      os.close(w2)
      wr = os.fdopen(w1, 'wt')
      reader = os.fdopen(r2)
      try:
        while True:
          wr.write('Hello Master\n')
          wr.flush()
          msg = reader.readline()
          print('[W] Master says %s' % msg),
      except KeyboardInterrupt:
        sys.exit()

  def die(self):
    print('[W] aghhh ... %d' % self.pid)
    os.kill(self.pid, signal.SIGTERM)


class Master:
  def __init__(self):
    self.workers = []

  def add(self, worker):
    self.workers.append(worker)

  def rulez(self, nbr=2):
    for i in range(nbr):
      worker = ChildProcess(self)
      worker.live()
    while True:
      for w in self.workers:
        w.tell_me()
        time.sleep(1)
        w.hey()

  def reap(self):
    print len(self.workers)
    for w in self.workers:
      w.die()


if __name__ == '__main__':
  master = Master()

  try:
    master.rulez(4)
  except KeyboardInterrupt:
    master.reap()
</snippet></ROW><ROW><id>20625888</id><snippet>DOCUMENT_ROOT</snippet></ROW><ROW><id>20625888</id><snippet>htdocs</snippet></ROW><ROW><id>20625888</id><snippet>Alias /robots.txt /path/to/mysite.com/static/robots.txt

Alias /favicon.ico /path/to/mysite.com/static/favicon.ico

AliasMatch ^/([^/]*\.css) /path/to/mysite.com/static/styles/$1

Alias /media/ /path/to/mysite.com/media/
Alias /static/ /path/to/mysite.com/static/

&lt;Directory /path/to/mysite.com/static&gt;
    Order deny,allow
    Allow from all
&lt;/Directory&gt;

&lt;Directory /path/to/mysite.com/media&gt;
    Order deny,allow
    Allow from all
&lt;/Directory&gt;

WSGIScriptAlias / /path/to/mysite.com/mysite/wsgi.py
WSGIPythonPath /path/to/mysite.com

&lt;Directory /path/to/mysite.com/mysite&gt;
    &lt;Files wsgi.py&gt;
        Order deny,allow
        Require all granted
    &lt;/Files&gt;
&lt;/Directory&gt;
</snippet></ROW><ROW><id>20625918</id><snippet>from __future__ import print_function

import sys
import readline
from os import environ


class MyCompleter(object):  # Custom completer

    def __init__(self, options):
        self.options = sorted(options)

    def complete(self, text, state):
        if state == 0:  # on first trigger, build possible matches
            if not text:
                self.matches = self.options[:]
            else:
                self.matches = [s for s in self.options
                                if s and s.startswith(text)]

        # return match indexed by state
        try:
            return self.matches[state]
        except IndexError:
            return None

    def display_matches(self, substitution, matches, longest_match_length):
        line_buffer = readline.get_line_buffer()
        columns = environ.get("COLUMNS", 80)

        print()

        tpl = "{:&lt;" + str(int(max(map(len, matches)) * 1.2)) + "}"

        buffer = ""
        for match in matches:
            match = tpl.format(match[len(substitution):])
            if len(buffer + match) &gt; columns:
                print(buffer)
                buffer = ""
            buffer += match

        if buffer:
            print(buffer)

        print("&gt; ", end="")
        print(line_buffer, end="")
        sys.stdout.flush()


dates = [
    '10/10/2013 13:03:51',
    '10/10/2013 13:54:32',
    '10/10/2013 18:48:48',
    '10/10/2013 19:13:00',
    '10/13/2013 12:58:17',
    '10/13/2013 13:38:15',
    '10/13/2013 16:48:58',
    '10/13/2013 17:23:59',
    '10/13/2013 20:09:56',
    '10/13/2013 21:54:14',
    '10/13/2013 21:57:43',
    '10/13/2013 22:47:40',
    '10/14/2013 13:32:53',
    '10/14/2013 21:14:51',
    '10/15/2013 10:18:23'
    ]

dates = [x.split(' ')[0] for x in dates]

completer = MyCompleter(list(set(dates)))
readline.set_completer_delims(' \t\n;')
readline.set_completer(completer.complete)
readline.parse_and_bind('tab: complete')
readline.set_completion_display_matches_hook(completer.display_matches)
print('Enter a date in m/d/yy format\n\t')
date = input("&gt; ")
</snippet></ROW><ROW><id>20625918</id><snippet>display_matches()</snippet></ROW><ROW><id>20625918</id><snippet>readline.set_completer_delims()</snippet></ROW><ROW><id>20625918</id><snippet>/</snippet></ROW><ROW><id>20625968</id><snippet>&gt;&gt;&gt; import numpy as np
&gt;&gt;&gt; from datetime import datetime
&gt;&gt;&gt; wind = np.loadtxt("ws425.log.test", delimiter=",", usecols=(0,4), dtype=object,
...                   converters={0: lambda x: datetime.strptime(x, "%Y-%m-%d %H:%M:%S.%f"),
...                               4: np.float})
&gt;&gt;&gt; 
&gt;&gt;&gt; wind
array([[datetime.datetime(2013, 12, 11, 23, 0, 27, 3293), 5.8],
       [datetime.datetime(2013, 12, 11, 23, 0, 28, 295), 5.5],
       [datetime.datetime(2013, 12, 11, 23, 0, 29, 295), 4.0],
       [datetime.datetime(2013, 12, 11, 23, 0, 30, 3310), 4.9]], dtype=object)
</snippet></ROW><ROW><id>20625968</id><snippet>pandas</snippet></ROW><ROW><id>20625968</id><snippet>&gt;&gt;&gt; import pandas as pd
&gt;&gt;&gt; df = pd.read_csv("ws425.log.test", parse_dates=[0], header=None, usecols=[0, 4])
&gt;&gt;&gt; df
                           0    4
0 2013-12-11 23:00:27.003293  5.8
1 2013-12-11 23:00:28.000295  5.5
2 2013-12-11 23:00:29.000295  4.0
3 2013-12-11 23:00:30.003310  4.9

[4 rows x 2 columns]
&gt;&gt;&gt; df[0][0]
Timestamp('2013-12-11 23:00:27.003293', tz=None)
</snippet></ROW><ROW><id>20626065</id><snippet>class Selenium2Library(
_LoggingKeywords, 
_RunOnFailureKeywords, 
_BrowserManagementKeywords, 
_ElementKeywords, 
_TableElementKeywords,
_FormElementKeywords,
_SelectElementKeywords,
_JavaScriptKeywords,
_CookieKeywords,
_ScreenshotKeywords,
_WaitingKeywords
</snippet></ROW><ROW><id>20626065</id><snippet>class _ALibrary(object):
def __init__(self):
    pass
def fun1(self):
    print 'fun1'`
</snippet></ROW><ROW><id>20626065</id><snippet>class _BLibrary(object):

def __init__(self):
    pass
def fun2(self):
    print 'fun2'
def fun3(self):
    print 'fun3'
</snippet></ROW><ROW><id>20626065</id><snippet>import _ALibrary
import _BLibrary
class CommonLibrary(_BLibrary._BLibrary,_ALibrary._ALibrary):
def __init__(self):
    for base in CommonLibrary.__bases__:
        base.__init__(self)
</snippet></ROW><ROW><id>20626372</id><snippet>def animate(i):
    timetext.set_text(i)
    x = numpy.array(range(1,npdata.shape[0]+1))
    for lnum,line in enumerate(lines):
        line.set_data(x,npdata[:,plotlays[lnum]-1,i])
    return lines, timetext # &lt;- returns a tuple of form (list, artist)
</snippet></ROW><ROW><id>20626372</id><snippet>     return tuple(lines) + (timetext,)
</snippet></ROW><ROW><id>20626372</id><snippet>animate</snippet></ROW><ROW><id>20626440</id><snippet>DateField</snippet></ROW><ROW><id>20626440</id><snippet>TextField</snippet></ROW><ROW><id>20626998</id><snippet>str.split</snippet></ROW><ROW><id>20626998</id><snippet>mydns.split('.', 1)[0]
</snippet></ROW><ROW><id>20626998</id><snippet>&gt;&gt;&gt; mydns='ec2-666-777-888-999.compute-1.amazonaws.com'
&gt;&gt;&gt; mydns.split('.', 1)[0]
'ec2-666-777-888-999'
</snippet></ROW><ROW><id>20627205</id><snippet>def sysexec(self, *argv, **popen_opts):
    """ return stdout text from executing a system child process,
        where the 'self' path points to executable.
        The process is directly invoked and not through a system shell.
    """
    from subprocess import Popen, PIPE
    argv = map_as_list(str, argv)
    popen_opts['stdout'] = popen_opts['stderr'] = PIPE
    proc = Popen([str(self)] + argv, **popen_opts)
    stdout, stderr = proc.communicate()
    ret = proc.wait()
    if py.builtin._isbytes(stdout):
        stdout = py.builtin._totext(stdout, sys.getdefaultencoding())
    if ret != 0:
        if py.builtin._isbytes(stderr):
            stderr = py.builtin._totext(stderr, sys.getdefaultencoding())
        raise py.process.cmdexec.Error(ret, ret, str(self),
                                       stdout, stderr,)
    return stdout
</snippet></ROW><ROW><id>20627205</id><snippet>Popen.wait()</snippet></ROW><ROW><id>20627205</id><snippet>local_path = py._path.local.LocalPath('/usr/bin/ls')
print(local_path.sysexec())
# out: file1\nfile2\nfile3...
print(local_path.sysexec('-l'))
# out likes "ls -l" out
</snippet></ROW><ROW><id>20627337</id><snippet>from django.db.models import Min
qs.values('title', 'title__name').annotate(count=Count('book'), min=Min('rx_datetime'))
</snippet></ROW><ROW><id>20627337</id><snippet>[{'count': 3, 'title': 1, 'title__name': u'OliverTwist', 'min': datetime.datetime(2013,5,1,0,0,0)}]
</snippet></ROW><ROW><id>20627550</id><snippet>a, b = b, a
</snippet></ROW><ROW><id>20627550</id><snippet>l[i], l[g] = l[g], l[i]
</snippet></ROW><ROW><id>20627638</id><snippet>scipy</snippet></ROW><ROW><id>20627638</id><snippet>ppf</snippet></ROW><ROW><id>20627638</id><snippet>scipy.stats.norm</snippet></ROW><ROW><id>20627638</id><snippet>In [20]: from scipy.stats import norm

In [21]: norm.ppf(0.95)
Out[21]: 1.6448536269514722
</snippet></ROW><ROW><id>20627638</id><snippet>In [34]: norm.cdf(norm.ppf(0.95))
Out[34]: 0.94999999999999996
</snippet></ROW><ROW><id>20627638</id><snippet>norm.ppf</snippet></ROW><ROW><id>20627638</id><snippet>loc</snippet></ROW><ROW><id>20627638</id><snippet>scale</snippet></ROW><ROW><id>20627638</id><snippet>In [35]: norm.ppf(0.95, loc=10, scale=2)
Out[35]: 13.289707253902945
</snippet></ROW><ROW><id>20627730</id><snippet>with open("myserver.pem", "w") as w:
    w.write("""\
-----BEGIN RSA PRIVATE KEY-----
MIIEpQIBAAKCAQEAnTsiYssvsuM1DRjyhqD8+ZB8ESqUFHgzeBYONp3yqjK8ICw/LRrxjXGXidAW
aPBXfktv3zN/kFsLMEFJKrJs/TLCfXG1CwFHMZzJRLM4aE6E0j6j+KF96cY5rfAo82rvP5kQdTIm
-----END RSA PRIVATE KEY-----
""")
</snippet></ROW><ROW><id>20627730</id><snippet>&gt;&gt;</snippet></ROW><ROW><id>20627730</id><snippet>"a"</snippet></ROW><ROW><id>20627730</id><snippet>open</snippet></ROW><ROW><id>20628146</id><snippet>Federated Login</snippet></ROW><ROW><id>20628146</id><snippet>Authentication Type</snippet></ROW><ROW><id>20628146</id><snippet>/_ah/login_required</snippet></ROW><ROW><id>20628146</id><snippet>UserService</snippet></ROW><ROW><id>20628146</id><snippet>
redirect users.createLoginURL(params['continue'], null, params.hd, [] as Set)
</snippet></ROW><ROW><id>20628369</id><snippet>{{ formset.management_form }}
</snippet></ROW><ROW><id>20628369</id><snippet>&lt;input type="hidden" name="form-TOTAL_FORMS" value="3" id="id_form-TOTAL_FORMS" /&gt;
&lt;input type="hidden" name="form-INITIAL_FORMS" value="3" id="id_form-INITIAL_FORMS" /&gt;
&lt;input type="hidden" name="form-MAX_NUM_FORMS" id="id_form-MAX_NUM_FORMS" /&gt;
</snippet></ROW><ROW><id>20628369</id><snippet>my_post_dict = request.POST.copy()
my_post_dict['form-TOTAL_FORMS'] = value
my_post_dict['form-INITIAL_FORMS'] = value
my_post_dict['form-MAX_NUM_FORMS'] = value
myformset = MyFormSet(my_post_dict)
</snippet></ROW><ROW><id>20628452</id><snippet>mark_safe()</snippet></ROW><ROW><id>20628452</id><snippet>escape()</snippet></ROW><ROW><id>20628535</id><snippet>MainModuleName.SubModuleName</snippet></ROW><ROW><id>20628535</id><snippet>MainModuleName</snippet></ROW><ROW><id>20628535</id><snippet>__init__.py</snippet></ROW><ROW><id>20628535</id><snippet>_mainmodulename.c</snippet></ROW><ROW><id>20628542</id><snippet>glob</snippet></ROW><ROW><id>20628542</id><snippet>for filename in glob.iglob('alj.csv.[0-9]'):
    # Do something with `filename`
</snippet></ROW><ROW><id>20628603</id><snippet>date</snippet></ROW><ROW><id>20628603</id><snippet>message_string</snippet></ROW><ROW><id>20628603</id><snippet>identifier</snippet></ROW><ROW><id>20628603</id><snippet>(date,comma-sep-emails,identifier)</snippet></ROW><ROW><id>20628603</id><snippet>x@x.com | x@x.net | x@x.org</snippet></ROW><ROW><id>20628603</id><snippet>def harvest_emails(target):
    """"Takes string, splits it on \n, then yields each line formatted as:
datecode, email, identifier
"""
    import re

    for line in target.splitlines():
        t = line.split(",")
        yield (
            t[0].strip(),
            ','.join(
                re.findall("\S+@\S+\.(?:com|org|net)",
                           ''.join(t[1:-1]).strip(),re.I)[0:]),
            t[-1].strip())
</snippet></ROW><ROW><id>20628603</id><snippet>&gt;&gt;&gt;messages = """04:34:03 +0000 2013,Email me for tickets email me at stormyjackson28@Gmail.com,1708824644
Tue Dec 17 04:33:58 +0000 2013,@musclepotential ok, man. you can email sbrown9049@gmail.com,25016561
Tue Dec 17 04:34:03 +0000 2013, stormyjackson28@Gmail.Com, name@domain.com,1708824644
Tue Dec 17 04:33:58 +0000 2013, brown9049@gmail.com,25016561"""
&gt;&gt;&gt;data = list()
&gt;&gt;&gt;for line in harvest_emails(messages):
        d = dict()
        d["date"],d["emails"],d["id"] = line[0],line[1].split(','),line[2]
        data.append(d)
&gt;&gt;&gt;for value in data:
        print(value)
{'emails': ['stormyjackson28@Gmail.com'], 'date': '04:34:03 +0000 2013', 'id': '1708824644'}
{'emails': ['sbrown9049@gmail.com'], 'date': 'Tue Dec 17 04:33:58 +0000 2013', 'id': '25016561'}
{'emails': ['stormyjackson28@Gmail.Com', 'name@domain.com'], 'date': 'Tue Dec 17 04:34:03 +0000 2013', 'id': '1708824644'}
{'emails': ['brown9049@gmail.com'], 'date': 'Tue Dec 17 04:33:58 +0000 2013', 'id': '25016561'}
</snippet></ROW><ROW><id>20628614</id><snippet># dict[22] = [20141011, 20120101, 20140923]

dict[id] = [ expDate, startDate, endDate ]


# Format 
print str(id) + ' | ' + ' | '.join(str(x) for x in dict[id])

# Result
# 22 | 20141011 | 20120101 | 20140923
</snippet></ROW><ROW><id>20628841</id><snippet>setattr</snippet></ROW><ROW><id>20628841</id><snippet>for i in range(1,5):
    setattr(self, 'folderheader%s' % i, QtGui.QLabel(self.folders))
</snippet></ROW><ROW><id>20628841</id><snippet>list</snippet></ROW><ROW><id>20628841</id><snippet>self.folderheaders = [QtGui.Qlabel(self.folders) for _ in range(1, 5)]
</snippet></ROW><ROW><id>20628841</id><snippet>self.folderheaders1</snippet></ROW><ROW><id>20628841</id><snippet>self.folderheaders[0]</snippet></ROW><ROW><id>20628949</id><snippet>import itertools

def generate_passwords(wordlist):
    for password_length in range(1, len(wordlist) + 1): # no repeats
        for password in itertools.permutations(wordlist, password_length):
            yield " ".join(password)
</snippet></ROW><ROW><id>20628949</id><snippet>from subprocess import call

def valid_password(password):
    rc = call(true_crypt_command(password), close_fds=True)
    return rc == 0, password
</snippet></ROW><ROW><id>20628949</id><snippet>import sys
from multiprocessing.dummy import Pool # use threads

wordlist = "foo bar zoo hello World".split()
pool = Pool(20) # check 20 passwords in parallel
for i, (found, password) in enumerate(
    pool.imap_unordered(valid_password, generate_passwords(wordlist))):
    if i % 1000 == 0: # report progress
       sys.stderr.write("\rchecked %d" % i)
    if found:
       print("Found: '%s'" % password)
       break
else:
    sys.exit("failed to find")

pool.close() 
####pool.join() # uncomment if it is not the end
</snippet></ROW><ROW><id>20628949</id><snippet>true_crypt_command()</snippet></ROW><ROW><id>20628949</id><snippet>break</snippet></ROW><ROW><id>20628949</id><snippet>pool.join()</snippet></ROW><ROW><id>20629314</id><snippet>    template = get_template("news.html") 
</snippet></ROW><ROW><id>20629314</id><snippet>    template = loader.get_template("news.html")
</snippet></ROW><ROW><id>20629623</id><snippet>str</snippet></ROW><ROW><id>20629623</id><snippet>requestNumber()</snippet></ROW><ROW><id>20629623</id><snippet>float</snippet></ROW><ROW><id>20629623</id><snippet>str</snippet></ROW><ROW><id>20629623</id><snippet>number = requestNumber("Enter Your Age:") 
number_as_string = str(number)
a, b = number_as_string[0], number_as_string[1]
# [...]
file = getMediaPath(a + b + '.wav')
</snippet></ROW><ROW><id>20629730</id><snippet>Bn = [0] * 32
</snippet></ROW><ROW><id>20629730</id><snippet>Bn = bitarray(Bn)
</snippet></ROW><ROW><id>20629768</id><snippet>lxml</snippet></ROW><ROW><id>20629768</id><snippet>etree</snippet></ROW><ROW><id>20629768</id><snippet>xpath</snippet></ROW><ROW><id>20629768</id><snippet>.//img</snippet></ROW><ROW><id>20629768</id><snippet>xpath</snippet></ROW><ROW><id>20629768</id><snippet>get</snippet></ROW><ROW><id>20629768</id><snippet>set</snippet></ROW><ROW><id>20629768</id><snippet>src</snippet></ROW><ROW><id>20629768</id><snippet>etree.tostring(tree)</snippet></ROW><ROW><id>20629768</id><snippet>from lxml import etree
tree = etree.HTML('''&lt;html&gt;
                     &lt;body&gt;
                        &lt;h1&gt;Title&lt;/h1&gt;
                        &lt;img src="/media/old/another_logo.png" alt="" /&gt;
                        &lt;p&gt;Lorem Ipsum&lt;/p&gt;
                        &lt;p&gt;&lt;img src="/media/old/logo.png" alt=""/&gt;&lt;/p&gt;
                     &lt;/body&gt;
                  &lt;/html&gt;''')

imgs = tree.xpath('.//img')

for img in imgs:
    print 'OLD_SOURCE', img.get('src')
    img.set('src', '/media/new/python.jpg')

print etree.tostring(tree)
</snippet></ROW><ROW><id>20629768</id><snippet>OLD_SOURCE /media/old/another_logo.png
OLD_SOURCE /media/old/logo.png

&lt;html&gt;
    &lt;body&gt;
        &lt;h1&gt;Title&lt;/h1&gt;
            &lt;img src="/media/new/python.jpg" alt=""/&gt;
            &lt;p&gt;Lorem Ipsum&lt;/p&gt;
            &lt;p&gt;&lt;img src="/media/new/python.jpg" alt=""/&gt;&lt;/p&gt;
    &lt;/body&gt;
&lt;/html&gt;
</snippet></ROW><ROW><id>20629786</id><snippet>currentNum</snippet></ROW><ROW><id>20629786</id><snippet>current = 0

def f():
    current = 1
    g()

def g():
    print(current)

f()  # Output: 0
</snippet></ROW><ROW><id>20629786</id><snippet>current = 0

def f():
    global current
    current = 1
    g()

def g():
    print(current)

f()  # Output: 1
</snippet></ROW><ROW><id>20629786</id><snippet>def f():
    current = 1
    g(current)

def g(current):
    print(current)

f()  # Output: 1
</snippet></ROW><ROW><id>20629786</id><snippet>calcMap</snippet></ROW><ROW><id>20629786</id><snippet>def calc_map(): 
    while floor_map[robot_x][robot_y] == uncalculated :
        for x,array in enumerate(floor_map):
            for y,element in enumerate(array):
                if uncalculated &lt; element &lt; wall:
                    current_num = element + 1
                    change_surroundings(x, y, current_num) 
</snippet></ROW><ROW><id>20629813</id><snippet>venv/bin/pip install flask-wtf</snippet></ROW><ROW><id>20629813</id><snippet>pip install flask-wtf</snippet></ROW><ROW><id>20629813</id><snippet>. bin/activate</snippet></ROW><ROW><id>20630144</id><snippet>signal.signal</snippet></ROW><ROW><id>20630144</id><snippet>gevent.signal</snippet></ROW><ROW><id>20630144</id><snippet>signal.signal</snippet></ROW><ROW><id>20630144</id><snippet>gevent.signal</snippet></ROW><ROW><id>20630144</id><snippet>signal.signal</snippet></ROW><ROW><id>20630144</id><snippet>def _term_handler(*_):
    raise TermSignal()
</snippet></ROW><ROW><id>20630144</id><snippet>signal.signal</snippet></ROW><ROW><id>20630144</id><snippet>gevent.signal</snippet></ROW><ROW><id>20630199</id><snippet>child_conn.close()</snippet></ROW><ROW><id>20630199</id><snippet>self.child.start()</snippet></ROW><ROW><id>20630199</id><snippet>duplex=False</snippet></ROW><ROW><id>20630199</id><snippet>child_conn.close()</snippet></ROW><ROW><id>20630199</id><snippet>parent_conn.recv</snippet></ROW><ROW><id>20630199</id><snippet>child_conn.send()</snippet></ROW><ROW><id>20630199</id><snippet>child_conn</snippet></ROW><ROW><id>20630199</id><snippet>child_conn.close()</snippet></ROW><ROW><id>20630199</id><snippet>self.child.start()</snippet></ROW><ROW><id>20630199</id><snippet>parent_conn.recv()</snippet></ROW><ROW><id>20630199</id><snippet>child_conn.send()</snippet></ROW><ROW><id>20630214</id><snippet>.pyc</snippet></ROW><ROW><id>20630214</id><snippet>.pyc</snippet></ROW><ROW><id>20630214</id><snippet>.pyc</snippet></ROW><ROW><id>20630229</id><snippet>  print(carty)
  x = (cartx - carty) / 2
  print(x)
  y = (cartx + carty)/4*3
</snippet></ROW><ROW><id>20630473</id><snippet>decimal</snippet></ROW><ROW><id>20630473</id><snippet>&gt;&gt;&gt; ot = 1.0/10
&gt;&gt;&gt; ot
0.10000000000000001
&gt;&gt;&gt; decimal.Decimal(1)/10
Decimal('0.1')
</snippet></ROW><ROW><id>20630672</id><snippet>m x n</snippet></ROW><ROW><id>20630672</id><snippet>2 * m * n</snippet></ROW><ROW><id>20630672</id><snippet>m + n</snippet></ROW><ROW><id>20630672</id><snippet>np.dot</snippet></ROW><ROW><id>20630672</id><snippet>def new3(normlized_a):
    weights  = numpy.floor(normalized_a * 100)
    total_wt = np.sum(weights)
    rows, cols = weights.shape
    row_values = np.dot(weights.sum(axis=1), np.arange(rows)) / total_wt
    col_values = np.dot(weights.sum(axis=0), np.arange(cols)) / total_wt
    return row_values, col_values
</snippet></ROW><ROW><id>20630672</id><snippet>(1.8352941176470587, 2.388235294117647)
(1.8352941176470587, 2.388235294117647)
(1.8352941176470587, 2.388235294117647)
(1.8352941176470587, 2.388235294117647)
timing!!!
2.59478258085
1.33357909978
1.0771122333
0.487124971828 #new3
</snippet></ROW><ROW><id>20630817</id><snippet>states = ["AL", "AK", "AZ", "AR", "CA", "CO", "CT", "DE", "FL", "GA", "HI",
          "ID", "IL", "IN", "IA", "KS", "KY", "LA", "ME", "MD", "MA", "MI",
          "MN", "MS", "MO", "MT", "NE", "NV", "NH", "NJ", "NM", "NY", "NC",
          "ND", "OH", "OK", "OR", "PA", "RI", "SC", "SD", "TN", "TX", "UT",
          "VT", "VA", "WA", "WV", "WI", "WY"]
if lead_state.upper().strip() not in states:
    print " == msg ==&gt; ERROR! abbreviation not recognized!"
</snippet></ROW><ROW><id>20631159</id><snippet>from multiprocessing import Process
import time
import resource
import signal

def do_something():
    import resource
    resource.setrlimit(resource.RLIMIT_CPU, (1,1))
    def f(signo, stackframe):
        raise Exception('stop')
    signal.signal(signal.SIGXCPU, f)
    try:
        while 1:
            print 'hello'
    except:
        print 'aborted'

def run_process_limited_time(function):

    # init Process
    p = Process(target=function, args=())

    # start process
    p.start()

    p.join(2)
    p.terminate()


if __name__ == "__main__":
    run_process_limited_time(do_something)
</snippet></ROW><ROW><id>20631468</id><snippet>pd.to_datetime</snippet></ROW><ROW><id>20631468</id><snippet>&gt;&gt;&gt; df[:2]
                        timestamp
0  Sat Dec 14 05:13:28 +0000 2013
1  Sat Dec 14 05:21:12 +0000 2013

&gt;&gt;&gt; df['timestamp'] = pd.to_datetime(df['timestamp'])
&gt;&gt;&gt; df[:2]
              timestamp
0   2013-12-14 05:13:28
1   2013-12-14 05:21:12
</snippet></ROW><ROW><id>20631468</id><snippet>&gt;&gt;&gt; df.index = df['timestamp']
&gt;&gt;&gt; df.resample('20Min', 'count')
2013-12-14 05:00:00  timestamp    1
2013-12-14 05:20:00  timestamp    5
2013-12-14 05:40:00  timestamp    8
2013-12-14 06:00:00  timestamp    1
dtype: int64
</snippet></ROW><ROW><id>20631529</id><snippet>if [ `ps -e | grep python | wc -l` -gt 1 ]
then
    pkill python
if
</snippet></ROW><ROW><id>20631649</id><snippet>&gt;&gt;&gt; s = "23423 NewYork"
&gt;&gt;&gt; [sub for sub in s.split() if all(c.isalpha() for c in sub)]
['NewYork']
&gt;&gt;&gt; s = "NewYork 23423"
&gt;&gt;&gt; [sub for sub in s.split() if all(c.isalpha() for c in sub)]
['NewYork']
</snippet></ROW><ROW><id>20632186</id><snippet>START = 1
END = 2
expos_list = [[1, 20, 40], [1, 60, 80]]
newpos_list = [[1, 12, 25], [1, 22, 38], [1, 75, 90], [1, 100, 150]]
# sort the new list
expos_list.extend(newpos_list)
expos_list.sort(lambda l1, l2: cmp(l1[0], l2[0]) or (l1[0] == l2[0] and (cmp(l1[1], l2[1]) or (l1[1] == l2[1] and (cmp(l1[2], l2[2]))))))

# remove and print the overlaps
i = 0
l = expos_list
while i &lt; len(l) - 1:
    if l[i][END] &gt; l[i + 1][START]:
        print 'overlap', l[i], l[i+1]
        if l[i][START] &lt;= l[i+1][START] and l[i][END] &gt;= l[i+1][END]:
            # i+1 is in i
            l.pop(i+1)
        elif l[i][START] &gt;= l[i+1][START] and l[i][END] &lt;= l[i+1][END]:
            # i is in i+1
            l.pop(i)
        else:
            # there is a partial overlap
            i += 1
    else:
        i += 1

# overlap [1, 12, 25] [1, 20, 40]
# overlap [1, 20, 40] [1, 22, 38]
# [1, 22, 38] # removed
# overlap [1, 60, 80] [1, 75, 90]

# outcome
print expos_list
# [[1, 12, 25], [1, 20, 40], [1, 60, 80], [1, 75, 90], [1, 100, 150]]
</snippet></ROW><ROW><id>20632186</id><snippet>lambda l1, l2: l1[0] &lt; l2[0] or (l1[0] == l2[0] and (l1[1] &lt; l2[1] or (l1[1] == l2[1] and (l1[2] &lt;= l2[2]))))
</snippet></ROW><ROW><id>20632375</id><snippet>passwd = "Password123"
is_upper = any(i.isupper() for i in passwd)
is_lower = any(i.islower() for i in passwd)
is_digit = any(i.isdigit() for i in passwd)
</snippet></ROW><ROW><id>20632520</id><snippet>Application.__call__()</snippet></ROW><ROW><id>20632520</id><snippet>handler = spec.handler_class(self, request, **spec.kwargs) 
</snippet></ROW><ROW><id>20632520</id><snippet>self</snippet></ROW><ROW><id>20632520</id><snippet>__init__</snippet></ROW><ROW><id>20632520</id><snippet>def __init__(self, application, request, **kwargs):
    super(RequestHandler, self).__init__()

    self.application = application
</snippet></ROW><ROW><id>20632588</id><snippet>rowCount</snippet></ROW><ROW><id>20632588</id><snippet>columnCount</snippet></ROW><ROW><id>20632588</id><snippet>data</snippet></ROW><ROW><id>20632588</id><snippet>QSortFilterProxyModel</snippet></ROW><ROW><id>20632691</id><snippet>&gt;&gt;&gt; queue = []

&gt;&gt;&gt; queue.append((1,2))  # FIFO in
&gt;&gt;&gt; queue.append((2,3))  # FIFO in

&gt;&gt;&gt; queue.pop(0)  # Oldest element out
(1,2)

&gt;&gt;&gt; queue.append((3,5)) 

&gt;&gt;&gt; queue.pop(0)
(2,3)
</snippet></ROW><ROW><id>20632691</id><snippet>queue</snippet></ROW><ROW><id>20632691</id><snippet>&gt;&gt;&gt; import Queue    
&gt;&gt;&gt; q = Queue.Queue()

&gt;&gt;&gt; q.put((1,2))
&gt;&gt;&gt; q.put((2,3))

&gt;&gt;&gt; q.get()
(1,2)

&gt;&gt;&gt; q.put((3,5))

&gt;&gt;&gt; q.get()
(2,3)
</snippet></ROW><ROW><id>20632691</id><snippet>&gt;&gt;&gt; from collections import deque
&gt;&gt;&gt; queue = deque()

&gt;&gt;&gt; queue.append((1,2))
&gt;&gt;&gt; queue.append((2,3))

&gt;&gt;&gt; queue.popleft()
(1, 2)

&gt;&gt;&gt; queue.append((3,5))

&gt;&gt;&gt; queue.popleft()
(2, 3)
</snippet></ROW><ROW><id>20632842</id><snippet>a = """
!
interface blah
a
ssid test1
v
ssid test2
v
ssid test3
"""
p = r'(?&lt;=ssid )\S+' # non-whitespace character chunk after ssid
match = re.findall(p, a)
</snippet></ROW><ROW><id>20632842</id><snippet>['test1', 'test2', 'test3']</snippet></ROW><ROW><id>20632849</id><snippet>np.dot</snippet></ROW><ROW><id>20632849</id><snippet>∙</snippet></ROW><ROW><id>20632849</id><snippet>e</snippet></ROW><ROW><id>20632849</id><snippet>d</snippet></ROW><ROW><id>20632849</id><snippet>x</snippet></ROW><ROW><id>20632849</id><snippet>*</snippet></ROW><ROW><id>20632849</id><snippet>(e∙d.T)∙x = e∙(d.T∙x) = [[d.T∙x] * n]
</snippet></ROW><ROW><id>20632849</id><snippet>d.T∙x</snippet></ROW><ROW><id>20632849</id><snippet>P∙x = B∙x + 1/n * e∙d.T∙x = B∙x + 1/n * [[d.T∙x] * n]
</snippet></ROW><ROW><id>20632849</id><snippet>d.T∙x</snippet></ROW><ROW><id>20632849</id><snippet>np.dot(d.T, x)</snippet></ROW><ROW><id>20633110</id><snippet>a&amp;(b|c)</snippet></ROW><ROW><id>20633110</id><snippet>(a&amp;b)|(a&amp;c)</snippet></ROW><ROW><id>20633110</id><snippet>[ [a], [b, c] ]</snippet></ROW><ROW><id>20633110</id><snippet>[ [a, b], [a, c] ]</snippet></ROW><ROW><id>20633110</id><snippet>itertools.product(*filters)</snippet></ROW><ROW><id>20633110</id><snippet>( (a, rec[a]), (b, rec[b]) )
</snippet></ROW><ROW><id>20633110</id><snippet>seen</snippet></ROW><ROW><id>20633110</id><snippet>seen = set()
dnf = list(itertools.product(*filters))

for item in data:
    keys = set(
        tuple((field, item.get(field, None)) for field in conjunct) 
        for conjunct in dnf)
    if keys.isdisjoint(seen):
        seen |= keys
        print item # unique
</snippet></ROW><ROW><id>20633198</id><snippet>final_lines = final.splitlines()
final = final_lines[0] + '\n' + ''.join(final_lines[1:])
</snippet></ROW><ROW><id>20633198</id><snippet>&gt;&gt;&gt; final = '''\
... &gt;M. tuberculosis H37Rv|Rv1617|pykA
... VTRRGKIVCTLGPATQRDDLVRALVEAGMDVARMNFSHGDYDDHKVAYERVRVASDATGR
... AVGVLADLQGPKIRLGRFASGATHWAEGETVRITVGACEGSHDRVSTTYKRLAQDAVAGD
... RVLVDDGKVALVVDAVEGDDVVCTVVEGGPVSDNKGISLPGMNVTAPALSEKDIEDLTFA
... LNLGVDMVALSFVRSPADVELVHEVMDRIGRRVPVIAKLEKPEAIDNLEAIVLAFDAVMV
... ARGDLGVELPLEEVPLVQKRAIQMARENAKPVIVATQMLDSMIENSRPTRAEASDVANAV
... LDGADALMLSGETSVGKYPLAAVRTMSRIICAVEENSTAAPPLTHIPRTKRGVISYAARD
... IGERLDAKALVAFTQSGDTVRRLARLHTPLPLLAFTAWPEVRSQLAMTWGTETFIVPKMQ
... STDGMIRQVDKSLLELARYKRGDLVVIVAGAPPGTVGSTNLIHVHRIGEDDV
... '''
&gt;&gt;&gt; final_lines = final.splitlines()
&gt;&gt;&gt; print final_lines[0] + '\n' + ''.join(final_lines[1:])
&gt;M. tuberculosis H37Rv|Rv1617|pykA
VTRRGKIVCTLGPATQRDDLVRALVEAGMDVARMNFSHGDYDDHKVAYERVRVASDATGRAVGVLADLQGPKIRLGRFASGATHWAEGETVRITVGACEGSHDRVSTTYKRLAQDAVAGDRVLVDDGKVALVVDAVEGDDVVCTVVEGGPVSDNKGISLPGMNVTAPALSEKDIEDLTFALNLGVDMVALSFVRSPADVELVHEVMDRIGRRVPVIAKLEKPEAIDNLEAIVLAFDAVMVARGDLGVELPLEEVPLVQKRAIQMARENAKPVIVATQMLDSMIENSRPTRAEASDVANAVLDGADALMLSGETSVGKYPLAAVRTMSRIICAVEENSTAAPPLTHIPRTKRGVISYAARDIGERLDAKALVAFTQSGDTVRRLARLHTPLPLLAFTAWPEVRSQLAMTWGTETFIVPKMQSTDGMIRQVDKSLLELARYKRGDLVVIVAGAPPGTVGSTNLIHVHRIGEDDV
</snippet></ROW><ROW><id>20633470</id><snippet>\S+</snippet></ROW><ROW><id>20633470</id><snippet>\S</snippet></ROW><ROW><id>20633470</id><snippet>[^\s]</snippet></ROW><ROW><id>20633470</id><snippet>[^ \v\t\f\n\r]</snippet></ROW><ROW><id>20633470</id><snippet>[^ ... ]</snippet></ROW><ROW><id>20633470</id><snippet>re.match</snippet></ROW><ROW><id>20633470</id><snippet>re.match(r'\s*\S+(?:\s+\S+){X-1,}', text_to_validate)
</snippet></ROW><ROW><id>20633470</id><snippet>(?:\s+\S+)</snippet></ROW><ROW><id>20633470</id><snippet>{X-1,}</snippet></ROW><ROW><id>20633470</id><snippet>(?:\s+\S+)</snippet></ROW><ROW><id>20633470</id><snippet>X-1</snippet></ROW><ROW><id>20633470</id><snippet>{3,}</snippet></ROW><ROW><id>20633470</id><snippet>re.split(r"\s+", text_to_validate)
</snippet></ROW><ROW><id>20633504</id><snippet>int()</snippet></ROW><ROW><id>20633504</id><snippet>float()</snippet></ROW><ROW><id>20633504</id><snippet>decimal.Decimal()</snippet></ROW><ROW><id>20633504</id><snippet>list_of_values.append(float(number))
</snippet></ROW><ROW><id>20633504</id><snippet>int()</snippet></ROW><ROW><id>20633504</id><snippet>float()</snippet></ROW><ROW><id>20633504</id><snippet>decimal.Decimal()</snippet></ROW><ROW><id>20633504</id><snippet>float()</snippet></ROW><ROW><id>20633504</id><snippet>decimal.Decimal()</snippet></ROW><ROW><id>20633594</id><snippet>wxPython</snippet></ROW><ROW><id>20633594</id><snippet>3.0.0.0</snippet></ROW><ROW><id>20633844</id><snippet>elif taxon == "Kids Earrings" or taxon == "Earrings":
</snippet></ROW><ROW><id>20633844</id><snippet>"Earrings"</snippet></ROW><ROW><id>20633844</id><snippet>taxon</snippet></ROW><ROW><id>20633844</id><snippet>"Earrings"</snippet></ROW><ROW><id>20633844</id><snippet>&gt;&gt;&gt; bool("Earrings")
True
</snippet></ROW><ROW><id>20633844</id><snippet>id_map = {}
id_map["Bracelets"] = "178785"
id_map["Earrings"] = "177591"
id_map["Kids Earrings"] = "177591"
# etc
</snippet></ROW><ROW><id>20633844</id><snippet>id_map[taxon]
</snippet></ROW><ROW><id>20634191</id><snippet>textChanged</snippet></ROW><ROW><id>20634191</id><snippet>def my_callback(widget, *args):
    # Do something with the widget

textedit_widget.textChanged.connect(my_callback)
</snippet></ROW><ROW><id>20634401</id><snippet>Interface</snippet></ROW><ROW><id>20634401</id><snippet>{% ifequal interface app_interface.title %}</snippet></ROW><ROW><id>20634724</id><snippet>Mean (M), Second Moment (M2) and Std (D)</snippet></ROW><ROW><id>20634753</id><snippet>tagtable = self.textbuffer.props.tag_table

def foreach_func(tag, data):
    print tag.props.name

tagtable.foreach(foreach_func, None)
</snippet></ROW><ROW><id>20634792</id><snippet>input_prefilter</snippet></ROW><ROW><id>20634819</id><snippet>\bM?\d{1,2}/M?\d{1,2}\b
</snippet></ROW><ROW><id>20634819</id><snippet>\b</snippet></ROW><ROW><id>20634985</id><snippet>N = int(raw_input())
...
...
n = int(raw_input("Insert the number"))
</snippet></ROW><ROW><id>20635024</id><snippet>http</snippet></ROW><ROW><id>20635024</id><snippet>Output options:
 --print WHAT, -p WHAT

   String specifying what the output should contain:

   'H' request headers 'B' request body 'h' response headers 'b' response body

   The default behaviour is 'hb' (i.e., the response headers  and  body  is 
   printed), if standard  output  is  not redirected. If the output is piped
   to another program or to a file, then only the response body is printed by
   default.
</snippet></ROW><ROW><id>20635024</id><snippet>http</snippet></ROW><ROW><id>20635024</id><snippet>`http --print hb google.com &gt; out.txt`
</snippet></ROW><ROW><id>20635416</id><snippet>     options=driver.find_elements_by_class_name("user_area")
     for option in options:
         if(option.text=="Login")
              option.click()
              time.sleep(3)
              option.click()
     email = driver.find_element_by_id('username')
     passwd = driver.find_element_by_id('passwd')
     email.send_keys('my_email')
     passwd.send_keys('my_pass')
     passwd.send_keys(Keys.RETURN)
</snippet></ROW><ROW><id>20635417</id><snippet>find</snippet></ROW><ROW><id>20635417</id><snippet>hashtable['ACR-WEB-01']=db.logs
    .find({"host_name": "WEB-01", "service_description": {"$ne" : ""}})
    .distinct("service_description")
</snippet></ROW><ROW><id>20635429</id><snippet>settings = wx.Dialog()
result = settings.ShowModal()
... # Save new settings based on result
settings.Destroy()
</snippet></ROW><ROW><id>20635429</id><snippet>import wx

class Settings(wx.Dialog):
    def __init__(self, settings, *args, **kwargs):
        wx.Dialog.__init__(self, *args, **kwargs)
        self.settings = settings

        self.panel = wx.Panel(self)
        self.button_ok = wx.Button(self.panel, label="OK")
        self.button_cancel = wx.Button(self.panel, label="Cancel")
        self.button_ok.Bind(wx.EVT_BUTTON, self.onOk)
        self.button_cancel.Bind(wx.EVT_BUTTON, self.onCancel)

        self.checkboxes = []
        for i in range(3):
            checkbox = wx.CheckBox(self.panel, label=str(i))
            checkbox.SetValue(self.settings[i])
            self.checkboxes.append(checkbox)

        self.sizer = wx.BoxSizer()
        for checkbox in self.checkboxes:
            self.sizer.Add(checkbox)
        self.sizer.Add(self.button_ok)
        self.sizer.Add(self.button_cancel)

        self.panel.SetSizerAndFit(self.sizer)

    def onCancel(self, e):
        self.EndModal(wx.ID_CANCEL)

    def onOk(self, e):
        for i in range(3):
            self.settings[i] = self.checkboxes[i].GetValue()
        self.EndModal(wx.ID_OK)

    def GetSettings(self):
        return self.settings

class MainWindow(wx.Frame):
    def __init__(self, *args, **kwargs):
        wx.Frame.__init__(self, *args, **kwargs)

        self.panel = wx.Panel(self)
        self.button = wx.Button(self.panel, label="Show settings")
        self.button.Bind(wx.EVT_BUTTON, self.onSettings)

        self.sizer = wx.BoxSizer()
        self.sizer.Add(self.button)

        self.panel.SetSizerAndFit(self.sizer)  
        self.Show()

        self.settings = [False, False, False]

    def onSettings(self, e):
        settings_dialog = Settings(self.settings, self)
        res = settings_dialog.ShowModal()
        if res == wx.ID_OK:
            self.settings = settings_dialog.GetSettings()
        settings_dialog.Destroy()

app = wx.App(False)
win = MainWindow(None)
app.MainLoop()
</snippet></ROW><ROW><id>20635521</id><snippet>len(matrix[i])</snippet></ROW><ROW><id>20635521</id><snippet>matrix</snippet></ROW><ROW><id>20635521</id><snippet>def diagonal(matrix):
    return sum([matrix[i][i] for i in range(min(len(matrix[0]),len(matrix)))])
</snippet></ROW><ROW><id>20635521</id><snippet>len(matrix)</snippet></ROW><ROW><id>20635521</id><snippet>len(matrix[0])</snippet></ROW><ROW><id>20635626</id><snippet>def edit_image():
    """
        Edit a profile image, creates a thumb...
    """
    thumb=""
    profile = db.profile(request.vars.profile_id)
    image = db(db.image.id==profile.image).select().first()
    if image:
        form = SQLFORM(db.image, image, deletable=True, showid=False)
        thumb = image.thumb
    else:
        form = SQLFORM(db.image)
    if form.accepts(request.vars, session): 
        response.flash = T('form accepted')
        #resize the original image to a better size and create a thumbnail
        __makeThumbnail(db.image,form.vars.id,(800,800),(260,260))
        redirect(URL('images'))
    elif form.errors:
        response.flash = T('form has errors')
    return dict(form=form,thumb=thumb)
</snippet></ROW><ROW><id>20635626</id><snippet>def __makeThumbnail(dbtable,ImageID,image_size=(600,600), thumbnail_size=(260,260)):
    try:    
        thisImage=db(dbtable.id==ImageID).select()[0]
        from PIL import Image
    except: return

    full_path = path.join(request.folder,'static','images', thisImage.file)
    im = Image.open(full_path)
    im.thumbnail(image_size,Image.ANTIALIAS)
    im.save(full_path)
    thumbName='thumb.%s' % (thisImage.file)
    full_path = path.join(request.folder,'static','images', 'thumbs',thumbName)
    try: 
        im.thumbnail(thumbnail_size,Image.ANTIALIAS)
    except:
        pass
    im.save(full_path)
    thisImage.update_record(thumb=thumbName)
    return
</snippet></ROW><ROW><id>20635700</id><snippet>new_post</snippet></ROW><ROW><id>20635700</id><snippet>DIV(news)</snippet></ROW><ROW><id>20635700</id><snippet>def news():
    return dict()

def news_list():
    if request.args(0) == 'user':
        query = db.newsfeed.created_by == auth.user_id
    else:
        query = db.newsfeed.id &gt; 0
    news = db(query).select(orderby=~db.newsfeed.created_on)
    return dict(news=news)

def new_post():
    form = SQLFORM(db.newsfeed)
    if form.process().accepted:
        url = URL('default', 'news_list.load', args='user')
        response.js = "$.web2py.component('%s', target='news');" % url
    return dict(form=form)

In /views/default/news.html:

{{extend 'layout.html'}}
{{=LOAD('default', 'new_post.load', ajax=True)}}
{{=LOAD('default', 'news_list.load', ajax=True, target='news')}}

In /views/default/news_list.load:

{{for post in news:}}
 &lt;div style="background: #ffffff; margin-bottom: 5px; padding: 8px;"&gt;
 &lt;h3&gt;{{=post.created_by.first_name}}&lt;/h3&gt; On {{=post.created_on}}:
  {{=MARKMIN(post.body)}}
{{pass}}

In /views/default/new_post.load:

{{=form}}
</snippet></ROW><ROW><id>20635700</id><snippet>response.js</snippet></ROW><ROW><id>20635700</id><snippet>$.web2py.component()</snippet></ROW><ROW><id>20635700</id><snippet>news_list()</snippet></ROW><ROW><id>20635700</id><snippet>news_list()</snippet></ROW><ROW><id>20635891</id><snippet>pip show &lt;insert_package_name_here&gt;| grep ^Requires
</snippet></ROW><ROW><id>20635891</id><snippet>for NAME in $(pip list|cut -d' ' -f1); do REQ=$(pip show $NAME| grep Requires); if [[ "$REQ" =~ "$REQUIRES" ]]; then echo $REQ;echo "Package: $NAME"; echo "---" ; fi;  done
</snippet></ROW><ROW><id>20635891</id><snippet>REQUIRES=django
</snippet></ROW><ROW><id>20635912</id><snippet>&gt;&gt;&gt; from pprint import pprint
&gt;&gt;&gt; pprint('''\
...                     for m in range(len(Model)):
...                 if param==1:
...                     m=m-1
... 
...                 parFlag = 0
...                 for s in range(len(PSets)):
...                     if Parameter.lower() in self._Sets._P_ModelVars[Model[m]][PSets[s]]:
...                         parFlag = 1
... '''.splitlines())
['    \t\tfor m in range(len(Model)):',
 '\t\t    if param==1:',
 '\t\t    \tm=m-1',
 '',
 '        \t    parFlag = 0',
 '        \t    for s in range(len(PSets)):',
 '\t                if Parameter.lower() in self._Sets._P_ModelVars[Model[m]][PSets[s]]:',
 '\t                    parFlag = 1']
</snippet></ROW><ROW><id>20635912</id><snippet>\t</snippet></ROW><ROW><id>20635912</id><snippet/></ROW><ROW><id>20635912</id><snippet>-tt</snippet></ROW><ROW><id>20635912</id><snippet>python -tt yourscript.py
</snippet></ROW><ROW><id>20636112</id><snippet>copy_snapshot()</snippet></ROW><ROW><id>20636112</id><snippet>us-east-1</snippet></ROW><ROW><id>20636112</id><snippet>us-west-2</snippet></ROW><ROW><id>20636112</id><snippet>import boto.ec2

conn = boto.ec2.connect_to_region('us-west-2')
conn.copy_snapshot(source_region='us-east-1', source_snap_id='snap-12345678',
                   description='My new copy')
</snippet></ROW><ROW><id>20636166</id><snippet>bookset=Book.objects.all()
user = User.objects.create_user('testuser',email='1@gmail.com')
user.entitledBooks=bookset
user.save()
</snippet></ROW><ROW><id>20636216</id><snippet>class XLSParser(object):
    def __init__(self, limit):
        self.error_list = []
        self.limit = limit

    def __iter__(self):
        for x in range(self.limit):
            if x%2: #fake error condition
                self.error_list.append(x)
            else:
                yield(x*x) #return
</snippet></ROW><ROW><id>20636216</id><snippet>parser = XLSParser(limit)
for result in parser:
    # do something

errors = parser.error_list
</snippet></ROW><ROW><id>20636243</id><snippet>settings = dict(
    ...
    ssl_options = {
        "certfile": os.path.join("certs/myserver.crt"),
        "keyfile": os.path.join("certs/myserver.key"),
    },
    ...
)
def main():
    http_server = tornado.httpserver.HTTPServer(tornado.web.Application(handlers), 
                  ssl_options = {
    "certfile": os.path.join("certs/myserver.crt"),
    "keyfile": os.path.join("certs/myserver.key"),
})

    http_server.listen(443)
    tornado.ioloop.IOLoop.instance().start()
</snippet></ROW><ROW><id>20636243</id><snippet>settings = dict(
    ...
    ssl_options = {
        "certfile": os.path.join("certs/myserver.crt"),
        "keyfile": os.path.join("certs/myserver.key"),
    },
    ...
)
def main():
    http_server = tornado.httpserver.HTTPServer(tornado.web.Application(handlers), **settings)

    http_server.listen(443)
    tornado.ioloop.IOLoop.instance().start()
</snippet></ROW><ROW><id>20636291</id><snippet>&lt;product /&gt;</snippet></ROW><ROW><id>20636291</id><snippet>Element</snippet></ROW><ROW><id>20636291</id><snippet>&lt;product /&gt;</snippet></ROW><ROW><id>20636291</id><snippet>from xml.etree import ElementTree

tree = ElementTree.parse('products.xml')
root = tree.getroot()
product_elements = root.findall('product')
</snippet></ROW><ROW><id>20636291</id><snippet>ElementTree.tostring</snippet></ROW><ROW><id>20636291</id><snippet>for product_element in product_elements:
    print(ElementTree.tostring(product_element))
</snippet></ROW><ROW><id>20636291</id><snippet>&lt;products&gt;
  &lt;product&gt;
    &lt;name&gt;First product&lt;/name&gt;
  &lt;/product&gt;
  &lt;product&gt;
    &lt;name&gt;Second product&lt;/name&gt;
  &lt;/product&gt;
  &lt;product&gt;
    &lt;name&gt;Third product&lt;/name&gt;
  &lt;/product&gt;
&lt;/products&gt;
</snippet></ROW><ROW><id>20636291</id><snippet>from xml.etree import ElementTree

tree = ElementTree.parse('products.xml')
root = tree.getroot()
product_elements = root.findall('product')

for product_element in product_elements:
    print(ElementTree.tostring(product_element))
</snippet></ROW><ROW><id>20636291</id><snippet>/tmp/xml$ python --version
Python 2.7.3
/tmp/xml$ python test.py 
&lt;product&gt;
    &lt;name&gt;First product&lt;/name&gt;
  &lt;/product&gt;

&lt;product&gt;
    &lt;name&gt;Second product&lt;/name&gt;
  &lt;/product&gt;

&lt;product&gt;
    &lt;name&gt;Third product&lt;/name&gt;
  &lt;/product&gt;
</snippet></ROW><ROW><id>20636415</id><snippet>class BottleSerializer(serializers.HyperlinkedModelSerializer):
    wine = WineSerializer(source='wine')

    class Meta:
        model = Bottle
        fields = ('url', 'wine', 'user', 'date_rated', 'rating', 'comment', 'get_more')
</snippet></ROW><ROW><id>20636415</id><snippet>class WineSerializer(serializers.HyperlinkedModelSerializer):

    class Meta:
        model = Wine
        fields = ('id', 'url', 'color', 'country', 'region', 'appellation')
</snippet></ROW><ROW><id>20636609</id><snippet>MainWindow</snippet></ROW><ROW><id>20636609</id><snippet>TopWindow</snippet></ROW><ROW><id>20636609</id><snippet>TopWindow</snippet></ROW><ROW><id>20636609</id><snippet>TopWindow</snippet></ROW><ROW><id>20636609</id><snippet>MainWindow</snippet></ROW><ROW><id>20636609</id><snippet>TopWindow</snippet></ROW><ROW><id>20636609</id><snippet>class TopWindow:
    def import(self):
        ....
        import MainWindow
        MainWindow.MainWindow().addtolistbox()
</snippet></ROW><ROW><id>20636609</id><snippet>MainWindow</snippet></ROW><ROW><id>20636609</id><snippet>MainWindow.run</snippet></ROW><ROW><id>20636609</id><snippet>class TopWindow:
    def import(self):
        ....
        import MainWindow
        MainWindow.run.addtolistbox()
</snippet></ROW><ROW><id>20636809</id><snippet>import logging
import logging.handlers
import sys

FORMAT = "%(asctime)-15s %(process)5d %(message)s"

logger = logging.getLogger(__name__)
wfh = logging.handlers.WatchedFileHandler("test.log", "a")
wfh.setFormatter(logging.Formatter(FORMAT))
logger.addHandler(wfh)
logger.setLevel(logging.DEBUG)

n = int(sys.argv[1])

for x in range(1000):
        logger.info("%6d %s" % (x, str(n)*(4096+n)))
</snippet></ROW><ROW><id>20636809</id><snippet>python test.py 1 &amp;
python test.py 2 &amp;
python test.py 3 &amp;
python test.py 4 &amp;
python test.py 5 &amp;
python test.py 6 &amp;
python test.py 7 &amp;
python test.py 8 &amp;
python test.py 9 &amp;
</snippet></ROW><ROW><id>20636809</id><snippet> grep -v ^2013 test.log
</snippet></ROW><ROW><id>20636822</id><snippet>fillna</snippet></ROW><ROW><id>20636822</id><snippet>df['sales']</snippet></ROW><ROW><id>20636822</id><snippet>df['net_pft']</snippet></ROW><ROW><id>20637038</id><snippet>PNG</snippet></ROW><ROW><id>20637038</id><snippet>PIL</snippet></ROW><ROW><id>20637038</id><snippet>import PIL
im = PIL.Image.open('cattemp.jpg')
im.save('cattemp.png')
</snippet></ROW><ROW><id>20637038</id><snippet>content=Image('cattemp.png').texture,
...
</snippet></ROW><ROW><id>20637107</id><snippet>pi</snippet></ROW><ROW><id>20637107</id><snippet>180</snippet></ROW><ROW><id>20637107</id><snippet>.5</snippet></ROW><ROW><id>20637107</id><snippet>'.5'</snippet></ROW><ROW><id>20637107</id><snippet>ax.set_xlim(1.5,3.1)</snippet></ROW><ROW><id>20637107</id><snippet>ax.set_ylim(2.4,3.7)</snippet></ROW><ROW><id>20637107</id><snippet>ax.plot([.5],[.5],marker=r'$\circlearrowleft$',ms=100)</snippet></ROW><ROW><id>20637165</id><snippet>to_pickle</snippet></ROW><ROW><id>20637433</id><snippet>motion_notify_events</snippet></ROW><ROW><id>20637433</id><snippet>    plt.connect('motion_notify_event', some_function)
</snippet></ROW><ROW><id>20637433</id><snippet>cursor = FollowDotCursor(ax, x, y)
</snippet></ROW><ROW><id>20637433</id><snippet>ax</snippet></ROW><ROW><id>20637433</id><snippet>x</snippet></ROW><ROW><id>20637433</id><snippet>y</snippet></ROW><ROW><id>20637433</id><snippet>x</snippet></ROW><ROW><id>20637433</id><snippet>y</snippet></ROW><ROW><id>20637433</id><snippet>(xi, yi)</snippet></ROW><ROW><id>20637433</id><snippet>scipy.spatial.cKDTree</snippet></ROW><ROW><id>20637433</id><snippet>import matplotlib.pyplot as plt
import scipy.spatial as spatial
import numpy as np
pi = np.pi
cos = np.cos

def fmt(x, y):
    return 'x: {x:0.2f}\ny: {y:0.2f}'.format(x=x, y=y)

class FollowDotCursor(object):
    """Display the x,y location of the nearest data point.
    http://stackoverflow.com/a/4674445/190597 (Joe Kington)
    http://stackoverflow.com/a/13306887/190597 (unutbu)
    http://stackoverflow.com/a/15454427/190597 (unutbu)
    """
    def __init__(self, ax, x, y, tolerance=5, formatter=fmt, offsets=(-20, 20)):
        try:
            x = np.asarray(x, dtype='float')
        except (TypeError, ValueError):
            x = np.asarray(mdates.date2num(x), dtype='float')
        y = np.asarray(y, dtype='float')
        mask = ~(np.isnan(x) | np.isnan(y))
        x = x[mask]
        y = y[mask]
        self._points = np.column_stack((x, y))
        self.offsets = offsets
        y = y[np.abs(y-y.mean()) &lt;= 3*y.std()]
        self.scale = x.ptp()
        self.scale = y.ptp() / self.scale if self.scale else 1
        self.tree = spatial.cKDTree(self.scaled(self._points))
        self.formatter = formatter
        self.tolerance = tolerance
        self.ax = ax
        self.fig = ax.figure
        self.ax.xaxis.set_label_position('top')
        self.dot = ax.scatter(
            [x.min()], [y.min()], s=130, color='green', alpha=0.7)
        self.annotation = self.setup_annotation()
        plt.connect('motion_notify_event', self)

    def scaled(self, points):
        points = np.asarray(points)
        return points * (self.scale, 1)

    def __call__(self, event):
        ax = self.ax
        # event.inaxes is always the current axis. If you use twinx, ax could be
        # a different axis.
        if event.inaxes == ax:
            x, y = event.xdata, event.ydata
        elif event.inaxes is None:
            return
        else:
            inv = ax.transData.inverted()
            x, y = inv.transform([(event.x, event.y)]).ravel()
        annotation = self.annotation
        x, y = self.snap(x, y)
        annotation.xy = x, y
        annotation.set_text(self.formatter(x, y))
        self.dot.set_offsets((x, y))
        bbox = ax.viewLim
        event.canvas.draw()

    def setup_annotation(self):
        """Draw and hide the annotation box."""
        annotation = self.ax.annotate(
            '', xy=(0, 0), ha = 'right',
            xytext = self.offsets, textcoords = 'offset points', va = 'bottom',
            bbox = dict(
                boxstyle='round,pad=0.5', fc='yellow', alpha=0.75),
            arrowprops = dict(
                arrowstyle='-&gt;', connectionstyle='arc3,rad=0'))
        return annotation

    def snap(self, x, y):
        """Return the value in self.tree closest to x, y."""
        dist, idx = self.tree.query(self.scaled((x, y)), k=1, p=1)
        try:
            return self._points[idx]
        except IndexError:
            # IndexError: index out of bounds
            return self._points[0]

fig, ax = plt.subplots()
x = np.linspace(0.1, 2*pi, 10)
y = cos(x)
markerline, stemlines, baseline = ax.stem(x, y, '-.')
plt.setp(markerline, 'markerfacecolor', 'b')
plt.setp(baseline, 'color','r', 'linewidth', 2)
cursor = FollowDotCursor(ax, x, y, tolerance=20)
plt.show()
</snippet></ROW><ROW><id>20637514</id><snippet>from itertools import chain

jobmstquery = Jobmst.objects.filter(jobmst_id=3296)
jobdtlquery = Jobdtl.objects.filter(jobdtl_id=3296)
queryset = chain(jobmstquery, jobdtlquery)
queryresults = serializers.serialize("python", queryset)
</snippet></ROW><ROW><id>20637559</id><snippet>&gt;&gt;&gt; import pandas as pd
&gt;&gt;&gt; from StringIO import StringIO
&gt;&gt;&gt; s = """1, 2
... 3, 4
... 5, 6"""
&gt;&gt;&gt; pd.read_csv(StringIO(s), skiprows=[1], header=None)
   0  1
0  1  2
1  5  6
&gt;&gt;&gt; pd.read_csv(StringIO(s), skiprows=1, header=None)
   0  1
0  3  4
1  5  6
</snippet></ROW><ROW><id>20637700</id><snippet>calculate_score_1</snippet></ROW><ROW><id>20637700</id><snippet>__init__</snippet></ROW><ROW><id>20637700</id><snippet>self</snippet></ROW><ROW><id>20637700</id><snippet>self</snippet></ROW><ROW><id>20637700</id><snippet>__init__</snippet></ROW><ROW><id>20637700</id><snippet>score</snippet></ROW><ROW><id>20637700</id><snippet>self.score = ...</snippet></ROW><ROW><id>20637700</id><snippet>your_question_1_window_instance.score</snippet></ROW><ROW><id>20637910</id><snippet>str(self.cleaned_data[i[0]])</snippet></ROW><ROW><id>20637910</id><snippet>u"%s" % str(u"überwach!")</snippet></ROW><ROW><id>20637910</id><snippet>u"%s" % unicode(u"überwach!")</snippet></ROW><ROW><id>20637910</id><snippet>unicode</snippet></ROW><ROW><id>20637910</id><snippet>str(u"überwach!")</snippet></ROW><ROW><id>20637910</id><snippet>UnicodeEncodeError</snippet></ROW><ROW><id>20637910</id><snippet>u"überwach!".encode("ascii")</snippet></ROW><ROW><id>20637910</id><snippet>str()</snippet></ROW><ROW><id>20637910</id><snippet>__str__</snippet></ROW><ROW><id>20637910</id><snippet>unicode</snippet></ROW><ROW><id>20637910</id><snippet>__str__</snippet></ROW><ROW><id>20637924</id><snippet>with open("file1.txt","r") as fin, open("file2.txt","w") as fout:
    string = raw_input("Enter the String:")
    for line in fin:
        if string in line:
            fout.write(line)
            try: 
                while ')' not in line:
                    line = next(fin)
                    fout.write(line)
            except StopIteration:
                pass  # ran out of file to read
</snippet></ROW><ROW><id>20637924</id><snippet>for line in fin</snippet></ROW><ROW><id>20637924</id><snippet>while</snippet></ROW><ROW><id>20637924</id><snippet>)</snippet></ROW><ROW><id>20637924</id><snippet>for</snippet></ROW><ROW><id>20637924</id><snippet>while</snippet></ROW><ROW><id>20637933</id><snippet>Series</snippet></ROW><ROW><id>20637933</id><snippet>In [31]: df = pd.DataFrame(np.random.randn(24))

In [32]: df
Out[32]: 
           0
0  -1.642765
1   1.369409
2  -0.732588
3   0.357242
4  -1.259126
5   0.851803
6  -1.582394
7  -0.508507
8   0.123032
9   0.421857
10 -0.524147
11  0.381085
12  1.286025
13 -0.983004
14  0.813764
15 -0.203370
16 -1.107230
17  1.855278
18 -2.041401
19  1.352107
20 -1.630252
21 -0.326678
22 -0.080991
23  0.438606

In [33]: import itertools as it

In [34]: series_id = it.cycle(list('abcdefghijkl'))  # first 12 letters.

In [60]: idx = pd.MultiIndex.from_tuples(zip(series_id, df.index.repeat(12)[:len(df)]))
</snippet></ROW><ROW><id>20637933</id><snippet>unstack</snippet></ROW><ROW><id>20637933</id><snippet>In [61]: df.index = idx

In [62]: df
Out[62]: 
            0
a 0 -1.642765
b 0  1.369409
c 0 -0.732588
d 0  0.357242
e 0 -1.259126
f 0  0.851803
g 0 -1.582394
h 0 -0.508507
i 0  0.123032
j 0  0.421857
k 0 -0.524147
l 0  0.381085
a 1  1.286025
b 1 -0.983004
c 1  0.813764
d 1 -0.203370
e 1 -1.107230
f 1  1.855278
g 1 -2.041401
h 1  1.352107
i 1 -1.630252
j 1 -0.326678
k 1 -0.080991
l 1  0.438606

[24 rows x 1 columns]

In [74]: df.unstack(0)[0]
Out[74]: 
          a         b         c         d         e         f         g  \
0 -1.642765  1.369409 -0.732588  0.357242 -1.259126  0.851803 -1.582394   
1  1.286025 -0.983004  0.813764 -0.203370 -1.107230  1.855278 -2.041401   

          h         i         j         k         l  
0 -0.508507  0.123032  0.421857 -0.524147  0.381085  
1  1.352107 -1.630252 -0.326678 -0.080991  0.438606  

[2 rows x 12 columns]
</snippet></ROW><ROW><id>20637933</id><snippet>unstack(0)</snippet></ROW><ROW><id>20638064</id><snippet>glob</snippet></ROW><ROW><id>20638064</id><snippet>files = [fn for fn in glob('somepath/*.txt') 
         if not os.path.basename(fn).startswith('eph')]
</snippet></ROW><ROW><id>20638065</id><snippet>numpy.std</snippet></ROW><ROW><id>20638065</id><snippet>scipy.std</snippet></ROW><ROW><id>20638065</id><snippet>std</snippet></ROW><ROW><id>20638065</id><snippet>n</snippet></ROW><ROW><id>20638065</id><snippet>ddof=1</snippet></ROW><ROW><id>20638065</id><snippet>n - 1</snippet></ROW><ROW><id>20638065</id><snippet>In [2]: a = np.array(timeseries)

In [3]: std(a)
Out[3]: 1246.1632335502143

In [4]: std(a, ddof=1)
Out[4]: 1249.8016740917631
</snippet></ROW><ROW><id>20638258</id><snippet>d</snippet></ROW><ROW><id>20638258</id><snippet>pd.DataFrame(d)
</snippet></ROW><ROW><id>20638295</id><snippet>zip()</snippet></ROW><ROW><id>20638295</id><snippet>joint = [[x + y for x, y in zip(*row)] for row in zip(outgoing, incoming)]
</snippet></ROW><ROW><id>20638295</id><snippet>outgoing</snippet></ROW><ROW><id>20638295</id><snippet>incoming</snippet></ROW><ROW><id>20638295</id><snippet>outgoing[0]</snippet></ROW><ROW><id>20638295</id><snippet>incoming[0]</snippet></ROW><ROW><id>20638295</id><snippet>outgoing[1]</snippet></ROW><ROW><id>20638295</id><snippet>outgoing[0][0]</snippet></ROW><ROW><id>20638295</id><snippet>incoming[0][0]</snippet></ROW><ROW><id>20638295</id><snippet>outgoing[0][1]</snippet></ROW><ROW><id>20638295</id><snippet>incoming[0][1]</snippet></ROW><ROW><id>20638295</id><snippet>&gt;&gt;&gt; [[x + y for x, y in zip(*row)] for row in zip(outgoing, incoming)]
[[486, 511, 615, 825, 760, 693, 848, 639, 651, 657], [444, 482, 562, 793, 729, 666, 812, 599, 592, 597], [42, 29, 53, 32, 31, 27, 36, 40, 59, 60], [29, 28, 35, 32, 31, 27, 36, 40, 59, 60], [13, 1, 18, 0, 0, 0, 0, 0, 0, 0]]
&gt;&gt;&gt; from pprint import pprint
&gt;&gt;&gt; pprint(_)
[[486, 511, 615, 825, 760, 693, 848, 639, 651, 657],
 [444, 482, 562, 793, 729, 666, 812, 599, 592, 597],
 [42, 29, 53, 32, 31, 27, 36, 40, 59, 60],
 [29, 28, 35, 32, 31, 27, 36, 40, 59, 60],
 [13, 1, 18, 0, 0, 0, 0, 0, 0, 0]]
</snippet></ROW><ROW><id>20638295</id><snippet>+=</snippet></ROW><ROW><id>20638295</id><snippet>joint</snippet></ROW><ROW><id>20638295</id><snippet>incoming</snippet></ROW><ROW><id>20638488</id><snippet>wx.EVT_TEXT_ENTER</snippet></ROW><ROW><id>20638488</id><snippet>&gt;&gt;&gt; import wx
&gt;&gt;&gt; wx.wxEVT_COMMAND_TEXT_ENTER
10165
&gt;&gt;&gt; wx.EVT_TEXT_ENTER
&lt;wx._core.PyEventBinder object at 0x000000000321C8D0&gt;
</snippet></ROW><ROW><id>20638488</id><snippet>import wx

class MyWindow(wx.Frame):
    def __init__(self):
        wx.Frame.__init__(self, None)
        self.fileNameInput = wx.TextCtrl (self, style=wx.TE_PROCESS_ENTER)
        self.fileNameInput.Bind(wx.EVT_TEXT_ENTER, self.onRename)
    def onRename(self, e):
        print('ENTER')

app =wx.PySimpleApp()
win = MyWindow()
win.Show()
app.MainLoop()
</snippet></ROW><ROW><id>20638641</id><snippet>  1 PREFIX xsd:     &lt;http://www.w3.org/2001/XMLSchema#&gt;
  2 PREFIX rdf:     &lt;http://www.w3.org/1999/02/22-rdf-syntax-ns#&gt; 
  3 PREFIX rdfs:    &lt;http://www.w3.org/2000/01/rdf-schema#&gt;
  4 PREFIX owl:     &lt;http://www.w3.org/2002/07/owl#&gt;
  5 PREFIX fn:      &lt;http://www.w3.org/2005/xpath-functions#&gt;
  6 PREFIX apf:     &lt;http://jena.hpl.hp.com/ARQ/property#&gt;
  7 
  8 PREFIX dbpedia: &lt;http://dbpedia.org/resource/&gt;
  9 Insert Data Into GRAPH &lt;test&gt; {
 10   &lt;http://dbpedia.org/resource/life&gt; &lt;http://umbel.org/umbel/rc/Artist&gt; '2'^^xsd:integer .
 11 }
</snippet></ROW><ROW><id>20638641</id><snippet>Encountered " "into" "Into "" at line 9, column 13.
Was expecting:
    "{" ...
</snippet></ROW><ROW><id>20638641</id><snippet>http://example/bookStore</snippet></ROW><ROW><id>20638641</id><snippet>PREFIX dc: &lt;http://purl.org/dc/elements/1.1/&gt;
PREFIX ns: &lt;http://example.org/ns#&gt;
INSERT DATA
{ GRAPH &lt;http://example/bookStore&gt; { &lt;http://example/book1&gt;  ns:price  42 } }
</snippet></ROW><ROW><id>20638641</id><snippet>PREFIX dbpedia: &lt;http://dbpedia.org/resource/&gt;
Insert Data 
{ GRAPH &lt;test&gt; { &lt;http://dbpedia.org/resource/life&gt; &lt;http://umbel.org/umbel/rc/Artist&gt; '2'^^xsd:integer . } }
</snippet></ROW><ROW><id>20638837</id><snippet>import foo</snippet></ROW><ROW><id>20638837</id><snippet>csr_matrix()</snippet></ROW><ROW><id>20638837</id><snippet>ndarray.__repr__()</snippet></ROW><ROW><id>20638840</id><snippet>addprevious</snippet></ROW><ROW><id>20638840</id><snippet>imgs = tree.xpath('.//img')
thm = "new-value"
for img in imgs:
    img.set('src', thm)
    a = etree.Element('a', href="#")
    img.addprevious(a)
    a.insert(0, img)
</snippet></ROW><ROW><id>20638840</id><snippet>&gt;&gt;&gt; etree.tostring(tree)
'&lt;html&gt;&lt;body&gt;&lt;a href="#"&gt;&lt;img src="new-value"/&gt;&lt;/a&gt;&lt;/body&gt;&lt;/html&gt;'
</snippet></ROW><ROW><id>20638840</id><snippet>lxml.html.fragment_fromstring</snippet></ROW><ROW><id>20638840</id><snippet>&gt;&gt;&gt; import lxml.html
&gt;&gt;&gt; img = lxml.html.fragment_fromstring('&lt;img src="old-value" /&gt;')
&gt;&gt;&gt; thm = "new-value"
&gt;&gt;&gt; img.set('src', thm)
&gt;&gt;&gt; a = etree.Element('a', href="#")
&gt;&gt;&gt; a.insert(0, img)
&gt;&gt;&gt; lxml.html.etree.tostring(a)
'&lt;a href="#"&gt;&lt;img src="new-value"/&gt;&lt;/a&gt;'
</snippet></ROW><ROW><id>20638840</id><snippet>img</snippet></ROW><ROW><id>20638840</id><snippet>a</snippet></ROW><ROW><id>20638840</id><snippet>&gt;&gt;&gt; s = '&lt;html&gt;&lt;body&gt;&lt;p&gt;&lt;img src="old_value"/&gt;some text&lt;/p&gt;&lt;/body&gt;&lt;/html&gt;'
&gt;&gt;&gt; tree = etree.HTML(s)
&gt;&gt;&gt; imgs = tree.xpath('.//img')
&gt;&gt;&gt; thm = "new-value"
&gt;&gt;&gt; for img in imgs:
...     img.set('src', thm)
...     a = etree.Element('a', href="#")
...     img.addprevious(a)
...     a.insert(0, img)
...     a.tail = img.tail
...     img.tail = ''
...
&gt;&gt;&gt; etree.tostring(tree)
'&lt;html&gt;&lt;body&gt;&lt;p&gt;&lt;a href="#"&gt;&lt;img src="new-value"/&gt;&lt;/a&gt;some text&lt;/p&gt;&lt;/body&gt;&lt;/html&gt;'
</snippet></ROW><ROW><id>20638913</id><snippet>__slots__</snippet></ROW><ROW><id>20638913</id><snippet>class MyObject():  # extend that class, here we extend object
  pass  # add nothing to the class

o = MyObject()
o.x = 'whatever'  # works
</snippet></ROW><ROW><id>20638945</id><snippet>state</snippet></ROW><ROW><id>20639005</id><snippet>clone_child.stdin.close();
clone_child.wait();
</snippet></ROW><ROW><id>20639005</id><snippet>clone_child.stdin.flush();</snippet></ROW><ROW><id>20639005</id><snippet>clone_child.stdin.close()</snippet></ROW><ROW><id>20639161</id><snippet>    ...
    def handle(self,sig,fem):
        print "in handler pid: ", os.getpid()

...
signal.signal(signal.SIGALRM,test_1.handle)
test_1.start()
print "Parent PID: ", os.getpid()
print "Child PID: ", test_1.pid
...
</snippet></ROW><ROW><id>20639161</id><snippet>Parent PID:  3137
Child PID:  3138
...
in handler pid:  3137 &lt;-- parent
...
</snippet></ROW><ROW><id>20639161</id><snippet>class test(multiprocessing.Process):
    ...
    def handle(self,sig,fem):
        ...

    def run(self):
        signal.signal(signal.SIGALRM, self.handle)
        ...

...
test_1.start()
time.sleep(2)

os.kill(test_1.pid, signal.SIGALRM)
</snippet></ROW><ROW><id>20639246</id><snippet>[leaf for branch in tree for leaf in branch]
</snippet></ROW><ROW><id>20639246</id><snippet>for branch in tree:
  for leaf in branch:
    yield leaf
</snippet></ROW><ROW><id>20639359</id><snippet>from cms.menus.menu_pool import menu_pool
</snippet></ROW><ROW><id>20639359</id><snippet>menus.menu_pool</snippet></ROW><ROW><id>20639359</id><snippet>from cms.menus import menu_pool #this would import the .py file
</snippet></ROW><ROW><id>20639359</id><snippet>menupool.MenuPool</snippet></ROW><ROW><id>20639359</id><snippet>from cms.menus.menu_pool import MenuPool #This would import the class
</snippet></ROW><ROW><id>20639359</id><snippet>from cms.menus.menu_pool import *
</snippet></ROW><ROW><id>20639412</id><snippet>&gt;&gt;&gt; import struct
&gt;&gt;&gt; def float_rep(num):
    return ''.join("{:08b}".format(ord(elem)) for elem in struct.pack('!f', num))

&gt;&gt;&gt; float_rep(0.1)
'00111101110011001100110011001101'
</snippet></ROW><ROW><id>20639412</id><snippet>&gt;&gt;&gt; def float_to_bin(num):
    sign = '-' if  num &lt; 0 else ''
    num = abs(num)
    whole = int(num)
    num  -= whole
    yield sign + bin(whole) + '.'
    while num:
        num*= 2
        whole = int(num)
        yield str(whole)
        num -= whole


&gt;&gt;&gt; ''.join(islice(float_to_bin(1.1),None,20))
'1.0001100110011001100'
&gt;&gt;&gt; ''.join(islice(float_to_bin(-1.1),None,20))
'-1.0001100110011001100'
&gt;&gt;&gt; ''.join(islice(float_to_bin(.1),None,20))
'0.0001100110011001100'
&gt;&gt;&gt; ''.join(islice(float_to_bin(0),None,20))
'0.'
&gt;&gt;&gt; ''.join(islice(float_to_bin(1),None,20))
'1.'
&gt;&gt;&gt; ''.join(islice(float_to_bin(0.25),None,20))
'0.01'
&gt;&gt;&gt; ''.join(islice(float_to_bin(0.5),None,20))
'0.1'
&gt;&gt;&gt; ''.join(islice(float_to_bin(-0.5),None,20))
'-0.1'
</snippet></ROW><ROW><id>20639458</id><snippet>stdin</snippet></ROW><ROW><id>20639458</id><snippet>Popen</snippet></ROW><ROW><id>20639458</id><snippet>process.stdin.write(ser.read())
</snippet></ROW><ROW><id>20639574</id><snippet>action</snippet></ROW><ROW><id>20639574</id><snippet>&lt;form id="update_price_form" method="POST"&gt;</snippet></ROW><ROW><id>20639574</id><snippet>ItemDetailView</snippet></ROW><ROW><id>20639574</id><snippet>DetailView</snippet></ROW><ROW><id>20639574</id><snippet>get</snippet></ROW><ROW><id>20639574</id><snippet>action</snippet></ROW><ROW><id>20639574</id><snippet>&lt;form id="update_price_form" method="POST" action="{% url "itemUpdate" %}"&gt;</snippet></ROW><ROW><id>20639659</id><snippet>~/.pylintrc</snippet></ROW><ROW><id>20639659</id><snippet>indent-string</snippet></ROW><ROW><id>20639659</id><snippet>[FORMAT]
indent-string=\t
</snippet></ROW><ROW><id>20639659</id><snippet>[MESSAGES CONTROL]
# C0111: Missing docstring
# R0904: Too many public methods
disable=C0111,R0904
</snippet></ROW><ROW><id>20639659</id><snippet>.pylintrc</snippet></ROW><ROW><id>20639659</id><snippet>.pylintrc</snippet></ROW><ROW><id>20639659</id><snippet>#pylint: disable=W0123,E4567</snippet></ROW><ROW><id>20639659</id><snippet>pylint --disable=W0702,C0103</snippet></ROW><ROW><id>20639765</id><snippet>&gt;&gt;&gt; import dis
&gt;&gt;&gt; method1 = lambda: (127 / 60) * 60
&gt;&gt;&gt; method2 = lambda: 127 - 127 % 60
&gt;&gt;&gt; dis.dis(method1)
  1           0 LOAD_CONST               1 (127)
              3 LOAD_CONST               2 (60)
              6 BINARY_DIVIDE       
              7 LOAD_CONST               2 (60)
             10 BINARY_MULTIPLY     
             11 RETURN_VALUE        
&gt;&gt;&gt; dis.dis(method2)
  1           0 LOAD_CONST               1 (127)
              3 LOAD_CONST               3 (7)
              6 BINARY_SUBTRACT     
              7 RETURN_VALUE        
</snippet></ROW><ROW><id>20639863</id><snippet>AttributeError: '_csv.writer' object has no attribute 'write'
</snippet></ROW><ROW><id>20639863</id><snippet>outSamCont = csv.writer(outSam, delimiter = '\t')
</snippet></ROW><ROW><id>20639863</id><snippet>.write()</snippet></ROW><ROW><id>20639863</id><snippet>outSamCont.write(line)
</snippet></ROW><ROW><id>20639863</id><snippet>outSamCont.write(ProcessLine(line)) 
</snippet></ROW><ROW><id>20639863</id><snippet>csv.writer</snippet></ROW><ROW><id>20639863</id><snippet>write</snippet></ROW><ROW><id>20639863</id><snippet>csv.writer</snippet></ROW><ROW><id>20640223</id><snippet>I=im2bw(I,graythresh(I));
imshow(I)
</snippet></ROW><ROW><id>20640296</id><snippet>random.randint</snippet></ROW><ROW><id>20640296</id><snippet>import datetime
import time

MINTIME = datetime.datetime(2010,8,6,8,14,59)
MAXTIME = datetime.datetime(2013,8,6,8,14,59)

mintime_ts = int(time.mktime(MINTIME.timetuple()))
maxtime_ts = int(time.mktime(MAXTIME.timetuple()))

for RECORD in range(RECORDS):
    random_ts = random.randint(mintime_ts, maxtime_ts)
    RANDOMTIME = datetime.datetime.fromtimestamp(random_ts)
    print RANDOMTIME
</snippet></ROW><ROW><id>20640453</id><snippet>bad_chars = ' \t\n\r'

def count_chars():
    with open('someclass.java', 'r') as javafile:
        for line in javafile:
            cleaned = filter(lambda c: c not in bad_chars, line)
            if cleaned:
                yield len(cleaned)
</snippet></ROW><ROW><id>20640453</id><snippet>bad_chars</snippet></ROW><ROW><id>20640453</id><snippet>&gt;&gt;&gt; print list(count_chars())
[22, 35, 33, 1, 1]
</snippet></ROW><ROW><id>20640545</id><snippet>return (t1.x, t1.y) != (t2.x, t2.y)
</snippet></ROW><ROW><id>20640674</id><snippet>test.py</snippet></ROW><ROW><id>20640674</id><snippet>from tests import *
import unittest

if __name__ == '__main__':
    testsuite = unittest.TestLoader().discover('.')
    unittest.TextTestRunner(verbosity=1).run(testsuite)
</snippet></ROW><ROW><id>20640674</id><snippet>tests</snippet></ROW><ROW><id>20640674</id><snippet>tests</snippet></ROW><ROW><id>20640674</id><snippet>test</snippet></ROW><ROW><id>20640741</id><snippet>codecs.open</snippet></ROW><ROW><id>20640741</id><snippet>from codecs import open

with open("Dataset/MALE_Training/MI_score_Male.csv", encoding='utf-7') as finp:
    csv_reader = csv.reader(finp)
    heading = next(csv_reader)                             
    for row in csv_reader:
        print row
</snippet></ROW><ROW><id>20640775</id><snippet>rotatecheck</snippet></ROW><ROW><id>20640775</id><snippet>rotate</snippet></ROW><ROW><id>20640775</id><snippet>rotate</snippet></ROW><ROW><id>20640775</id><snippet>return False</snippet></ROW><ROW><id>20640775</id><snippet>for z in range(len(curc)):
    new.append(curc[z])
</snippet></ROW><ROW><id>20640775</id><snippet>centerx</snippet></ROW><ROW><id>20640775</id><snippet>centery</snippet></ROW><ROW><id>20640775</id><snippet>curc</snippet></ROW><ROW><id>20640775</id><snippet>curc</snippet></ROW><ROW><id>20640775</id><snippet>copy</snippet></ROW><ROW><id>20640775</id><snippet>centerx</snippet></ROW><ROW><id>20640957</id><snippet>request.is_ajax()</snippet></ROW><ROW><id>20640957</id><snippet>Vary: X-Requested-With</snippet></ROW><ROW><id>20640957</id><snippet>X-Requested-With</snippet></ROW><ROW><id>20640957</id><snippet>from django.views.decorators.vary import vary_on_headers

@vary_on_headers('X-Requested-With')
def yourview(request, ...):
    pass
</snippet></ROW><ROW><id>20641179</id><snippet>collection.insert(documents, w=0)</snippet></ROW><ROW><id>20641179</id><snippet>collection.insert(q.get())</snippet></ROW><ROW><id>20641311</id><snippet>&gt;&gt;&gt; {tuple(sorted(t)): t for t in list_1}.values()
[[0, 3], [3, 4]]
</snippet></ROW><ROW><id>20641488</id><snippet>total = {}
total['username1'] = [''] #list for this username total
total['username2'] = [''] 
</snippet></ROW><ROW><id>20641541</id><snippet>from pyjamas.ui.RootPanel import RootPanel
from pyjamas.ui.Button import Button
</snippet></ROW><ROW><id>20641644</id><snippet>fout = open('Users.txt', 'w')
fout.write(ent.get())
...
</snippet></ROW><ROW><id>20641644</id><snippet>with open('Users.txt', 'w') as fout:
    fout.write(ent.get())
</snippet></ROW><ROW><id>20641822</id><snippet>begin</snippet></ROW><ROW><id>20641822</id><snippet>end</snippet></ROW><ROW><id>20641822</id><snippet>begin</snippet></ROW><ROW><id>20641822</id><snippet>5</snippet></ROW><ROW><id>20641822</id><snippet>if l[begin] == l[end]:       #if l[5] == l[0]
    begin += 1               #begin is now 6
    end -= 1
</snippet></ROW><ROW><id>20641822</id><snippet>begin</snippet></ROW><ROW><id>20641822</id><snippet>6</snippet></ROW><ROW><id>20641822</id><snippet>l = ['x', 'y', 'z', 'z', 'y', 'x']

mirror = 0
begin = 0
end = 5
while begin != len(l):
    if l[begin] == l[end]:
        begin += 1
        end -= 1
    else:
        mirror = -1
        break            #we don't need to run the loop further
if mirror == 0:
    print('mirrored')
else:
    print('NO!')
</snippet></ROW><ROW><id>20641846</id><snippet>main.write("fo.write('text to be ended with a newline command\\n')\n")
</snippet></ROW><ROW><id>20641935</id><snippet>map</snippet></ROW><ROW><id>20641935</id><snippet>block</snippet></ROW><ROW><id>20641935</id><snippet>lambda a, b: a+b</snippet></ROW><ROW><id>20641935</id><snippet>map()</snippet></ROW><ROW><id>20641935</id><snippet>def permutate(table, block):
    """Permutate this block with the specified table"""
    def index(x):
        return block[x]
    ret = []
    for x in table:
        ret.append(index(x))
    return ret
</snippet></ROW><ROW><id>20641956</id><snippet>instance.output_all_children</snippet></ROW><ROW><id>20641956</id><snippet>instance.output_all_children()</snippet></ROW><ROW><id>20641956</id><snippet>__set__</snippet></ROW><ROW><id>20641956</id><snippet>_output_all_children = None

@property
def output_all_children(self):
    if self._output_all_children is None:
        lh = ListHolder()
        traverse_directories(self.start_directory, lh)
        self._output_all_children = lh.internal_list
    return self._output_all_children
</snippet></ROW><ROW><id>20641985</id><snippet>$</snippet></ROW><ROW><id>20641985</id><snippet>control/</snippet></ROW><ROW><id>20641985</id><snippet>url(r'^control/', include('control.urls')),
</snippet></ROW><ROW><id>20642177</id><snippet>from requests import session

USERNAME = 'myuser'
PASSWORD = 'mypwd'

query = {
    'logInTo': '',
    'logFolder': 'p',
    'logSub': 'w',
}

payload = {
    'a': 'a',
    'logFrmFlag': 'Y',
    'frmUsername': USERNAME,
    'frmPassword': PASSWORD,
}

with session() as c:
    c.post('https://www.bricklink.com/login.asp', params=query, data=payload) #Login page
    request = c.get('http://www.bricklink.com/orderExcelFinal.asp') #Page I want to access
    print request.headers
    print request.text
</snippet></ROW><ROW><id>20642365</id><snippet>sort</snippet></ROW><ROW><id>20642365</id><snippet>lambda</snippet></ROW><ROW><id>20642365</id><snippet>list.sort()</snippet></ROW><ROW><id>20642365</id><snippet>sorted()</snippet></ROW><ROW><id>20642365</id><snippet>cmp()</snippet></ROW><ROW><id>20642365</id><snippet>keyList.index()</snippet></ROW><ROW><id>20642365</id><snippet>letterlist.sort(key=keyList.index)
</snippet></ROW><ROW><id>20642365</id><snippet>cmp()</snippet></ROW><ROW><id>20642365</id><snippet>functools.cmp_to_key()</snippet></ROW><ROW><id>20642365</id><snippet>cmp()</snippet></ROW><ROW><id>20642365</id><snippet>from functools import cmp_to_key

letterlist.sort(key=cmp_to_key(keyL))
</snippet></ROW><ROW><id>20642365</id><snippet>cmp()</snippet></ROW><ROW><id>20642571</id><snippet>rev_list = original[::-1]
</snippet></ROW><ROW><id>20642571</id><snippet>len</snippet></ROW><ROW><id>20642571</id><snippet>rev_list = original[::-len('1')]
</snippet></ROW><ROW><id>20642617</id><snippet>*args</snippet></ROW><ROW><id>20642617</id><snippet>f(*[1, 2, 3])
</snippet></ROW><ROW><id>20642617</id><snippet>kwargs = {'foo': 'bar', 'spam': 'ham'}
f(**kwargs)
</snippet></ROW><ROW><id>20642617</id><snippet>def func(*args, **kw):
    # args now holds positional arguments, kw keyword arguments
</snippet></ROW><ROW><id>20642801</id><snippet>ObjectId()</snippet></ROW><ROW><id>20642801</id><snippet>default</snippet></ROW><ROW><id>20642801</id><snippet>def objectid_default(obj):
    if isinstance(obj, ObjectId):
        return str(obj)  # hex string version
    raise TypeError(obj)

json.dumps(d, default=objectid_default)
</snippet></ROW><ROW><id>20642863</id><snippet>bitarray</snippet></ROW><ROW><id>20642863</id><snippet>tobytes()</snippet></ROW><ROW><id>20642863</id><snippet>bytes_value = msg.tobytes()
</snippet></ROW><ROW><id>20642961</id><snippet>check()</snippet></ROW><ROW><id>20642961</id><snippet>False</snippet></ROW><ROW><id>20642961</id><snippet>return False</snippet></ROW><ROW><id>20642961</id><snippet>def check(UserName, passw):
    for line in open('unames_passwords.txt','r'):
        user, password = line.split()
        if user == UserName and password == passw:
            return True

    return False
</snippet></ROW><ROW><id>20642961</id><snippet>pword</snippet></ROW><ROW><id>20642961</id><snippet>check()</snippet></ROW><ROW><id>20642961</id><snippet>== True</snippet></ROW><ROW><id>20642961</id><snippet>if</snippet></ROW><ROW><id>20642961</id><snippet>def login():
    UserName = input("Please enter your username: ")
    passw = input("Please enter your password: ")
    if check(UserName, passw):
        print("Thank you for logging in. Please enjoy these lyrics")
    else:
        print("Sorry, either your username or password is incorrect")
</snippet></ROW><ROW><id>20643036</id><snippet>items = raw_input("Enter your data items separated by commas: ").split(",")
</snippet></ROW><ROW><id>20643172</id><snippet>thread._local</snippet></ROW><ROW><id>20643172</id><snippet>threading.local()</snippet></ROW><ROW><id>20643172</id><snippet>value</snippet></ROW><ROW><id>20643172</id><snippet>val</snippet></ROW><ROW><id>20643172</id><snippet>dir(self.test_var)</snippet></ROW><ROW><id>20643172</id><snippet>self.test_var=threading.local()</snippet></ROW><ROW><id>20643172</id><snippet>['__class__', '__delattr__', '__dict__', '__doc__', '__getattribute__', '__hash__',
 '__init__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__',
 '__str__']
</snippet></ROW><ROW><id>20643172</id><snippet>help(threading.local())</snippet></ROW><ROW><id>20643172</id><snippet>value</snippet></ROW><ROW><id>20643172</id><snippet>self.test_var.__setattr__('value',val)
</snippet></ROW><ROW><id>20643196</id><snippet>\b</snippet></ROW><ROW><id>20643221</id><snippet>with open('path/to/input') as infile:
    getip = False
    iface = None
    interfaces = ['ethernet']  # or whatever other interfaces' IPs you want
    props = ['ip address']  # include IOS, name of the router, etc
    for line in  infile:
        if any(line.startswith(w) for w in interface):
            iface = line.split(None, 1)[0]
            getip = True
        elif getip:
            for prop in props:
                if line.startswith(prop)
                    getip = False
                    print(iface, ":", prop, line.replace(prop, '').split(None, 1)[0])
                    break
</snippet></ROW><ROW><id>20643329</id><snippet>CrawlSpider</snippet></ROW><ROW><id>20643329</id><snippet>class MySpider(CrawlSpider):
    name = 'livejournal.com'
    allowed_domains = ['livejournal.com']
    start_urls = ['http://www.papa-gen.livejournal.com']

    rules = (
        Rule(SgmlLinkExtractor(allow=('skip=', )), callback='parse_item'),
    )

    def parse_item(self, response):
        # here is where the parsing happens
        pass
</snippet></ROW><ROW><id>20643329</id><snippet>callback</snippet></ROW><ROW><id>20643331</id><snippet>dict(line.split() for line in open('path/to/input'))
</snippet></ROW><ROW><id>20643331</id><snippet>with open('path/to/input') as infile:
    answer = {}
    for line in infile:
        k,v = line.split()
        answer[k] = v
</snippet></ROW><ROW><id>20643476</id><snippet>partial_fit</snippet></ROW><ROW><id>20643493</id><snippet>with open('path/to/input') as infile:
    answer = {}
    for line in infile:
        x,y,v = line.split()
        k = (x,y)
        if k not in answer:
            answer[k] = []
        answer[k].append(v)
answer = {k:tuple(v) for k,v in answer.items()}
</snippet></ROW><ROW><id>20643493</id><snippet>collections.defaultdict</snippet></ROW><ROW><id>20643493</id><snippet>import collections
with open('path/to/input') as infile:
    answer = collections.defaultdict(list)
    for line in infile:
        x,y,v = line.split()
        answer[(x,y)].append(v)
answer = {k:tuple(v) for k,v in answer.items()}
</snippet></ROW><ROW><id>20643554</id><snippet>float.__repr__()</snippet></ROW><ROW><id>20643554</id><snippet>float.__str__()</snippet></ROW><ROW><id>20643554</id><snippet>float.__str__()</snippet></ROW><ROW><id>20643554</id><snippet>g</snippet></ROW><ROW><id>20643554</id><snippet>sprintf()</snippet></ROW><ROW><id>20643554</id><snippet>'%.12g' % fp_value
</snippet></ROW><ROW><id>20643554</id><snippet>format()</snippet></ROW><ROW><id>20643554</id><snippet>format(fp_value, '.12g')
</snippet></ROW><ROW><id>20643554</id><snippet>float</snippet></ROW><ROW><id>20643554</id><snippet>decimal.Decimal()</snippet></ROW><ROW><id>20643685</id><snippet>@app.url_value_preprocessor
def pull_lang_code(endpoint, values):
    g.lang_code = values.pop('lang_code', None)
</snippet></ROW><ROW><id>20643715</id><snippet>&lt;td&gt;</snippet></ROW><ROW><id>20643715</id><snippet>webelement.text</snippet></ROW><ROW><id>20643715</id><snippet>&lt;tr&gt;</snippet></ROW><ROW><id>20643715</id><snippet>&lt;body&gt;
  &lt;table border="1"&gt;
    &lt;tr&gt;
      &lt;td&gt;Text in 1st cell&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Text in 2nd cell&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      Text in 3rd Row
    &lt;/tr&gt;
  &lt;/table&gt;
&lt;/body&gt;
</snippet></ROW><ROW><id>20643715</id><snippet>&lt;body&gt;
  Text in 3rd Row
  &lt;table border="1"&gt;
    &lt;tbody&gt;
      &lt;tr&gt;
        &lt;td&gt;Text in 1st cell&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
        &lt;td&gt;Text in 2nd cell&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;&lt;/tr&gt;
    &lt;/tbody&gt;
  &lt;/table&gt;
&lt;/body&gt;
</snippet></ROW><ROW><id>20643715</id><snippet>&lt;tr&gt;</snippet></ROW><ROW><id>20643769</id><snippet>if k == "youtube":
    for innerk, innerv in k.iteritems():
</snippet></ROW><ROW><id>20643769</id><snippet>k</snippet></ROW><ROW><id>20643769</id><snippet>"youtube"</snippet></ROW><ROW><id>20643769</id><snippet>str</snippet></ROW><ROW><id>20643769</id><snippet>unicode</snippet></ROW><ROW><id>20643769</id><snippet>k</snippet></ROW><ROW><id>20643769</id><snippet>iteritems</snippet></ROW><ROW><id>20643769</id><snippet>dict</snippet></ROW><ROW><id>20643769</id><snippet>k</snippet></ROW><ROW><id>20643769</id><snippet>if k == "youtube":
    for innerk, innerv in value.iteritems():
</snippet></ROW><ROW><id>20643769</id><snippet>dict</snippet></ROW><ROW><id>20643769</id><snippet>list</snippet></ROW><ROW><id>20643769</id><snippet>k == "youtube"</snippet></ROW><ROW><id>20643769</id><snippet>iteritems</snippet></ROW><ROW><id>20643769</id><snippet>if k == "youtube":
    for each_dict in value:
        for innerk, innerv in each_dict.iteritems():
</snippet></ROW><ROW><id>20643769</id><snippet>for item in j:        
    if item['trailers']:
        e = item['trailers']
        for k,value in e.iteritems():
            if k == "youtube":
                for each_dict in value:
                    for innerk, innerv in each_dict.iteritems():
                        if innerk == "source" :
                            print innerv
</snippet></ROW><ROW><id>20643769</id><snippet>dict</snippet></ROW><ROW><id>20643769</id><snippet>get</snippet></ROW><ROW><id>20643769</id><snippet>if item['trailers']:</snippet></ROW><ROW><id>20643769</id><snippet>trailers</snippet></ROW><ROW><id>20643769</id><snippet>KeyError</snippet></ROW><ROW><id>20643769</id><snippet>trailers</snippet></ROW><ROW><id>20643769</id><snippet>False</snippet></ROW><ROW><id>20643769</id><snippet>bool</snippet></ROW><ROW><id>20643769</id><snippet>None</snippet></ROW><ROW><id>20643769</id><snippet>trailers</snippet></ROW><ROW><id>20643769</id><snippet>dict</snippet></ROW><ROW><id>20643769</id><snippet>for item in j:    
    y_tube = item.get('trailers', {}).get("youtube", [])
    for each_dict in y_tube:
        print each_dict.get("source", "Warning: no entry found for 'source'")
</snippet></ROW><ROW><id>20643880</id><snippet>self.testToDiagDict[test][inputSentence].append(inputSentences[0])
</snippet></ROW><ROW><id>20643880</id><snippet>inputSentence</snippet></ROW><ROW><id>20643880</id><snippet>if statement</snippet></ROW><ROW><id>20643880</id><snippet>if "INPUT_SENTENCE" in line:
</snippet></ROW><ROW><id>20643889</id><snippet>-Encoding "ASCII"</snippet></ROW><ROW><id>20643889</id><snippet>Get-Content "Path/to/InputFile1/InputFile1.txt" -totalcount 250| Out-File -Encoding "ASCII" -FilePath "Path/to/OutputFile/OutputFile.txt" -Append

Get-Content "Path/to/InputFile2/InputFile2.txt" -totalcount 250| Out-File -Encoding "ASCII" -FilePath "Path/to/OutputFile/OutputFile.txt" -Append
</snippet></ROW><ROW><id>20643950</id><snippet>.findall()</snippet></ROW><ROW><id>20643950</id><snippet>email_re = re.compile(r'&lt;some expression&gt;')

messages = ([msg['created_at'], ' '.join(email_re.findall(msg['text'])), msg['user']['id']] for msg in js.get('statuses', []))
</snippet></ROW><ROW><id>20643950</id><snippet>def extract_info(msg):
    created_at = msg['created_at']
    user_id = msg['user']
    text = msg['txt']
    emails = email_re.findall(text)
    return (created_at, ' '.join(emails), user_id)

messages = (extract_info(msg) for msg in js.get('statuses', []))
</snippet></ROW><ROW><id>20643972</id><snippet>#include &lt;Python.h&gt;
#include &lt;boost/algorithm/string/join.hpp&gt;
#include &lt;vector&gt;
#include &lt;string&gt;
#include &lt;iostream&gt;

int main(int argc, const char** argv) {
    // get data to hash
    if (argc &lt; 2) {
        std::cout &lt;&lt; "please add some command line args\n";
        return -1;
    }
    std::string data = boost::algorithm::join(
            std::vector&lt;std::string&gt;(argv+1, argv+argc), " ");
    std::cout &lt;&lt; "compute md5 of string: '" &lt;&lt; data &lt;&lt; "'\n";
    // initialize Python API
    Py_Initialize();
    // import hashlib module
    PyObject *pHashlib = PyImport_ImportModule("hashlib");
    // get hash function
    PyObject *pHashlibMd5 = PyObject_GetAttrString(pHashlib, "md5");
    // build function argument tuple
    PyObject *pFuncParams = PyTuple_New(1);
    PyTuple_SetItem(pFuncParams, 0, PyString_FromString(data.c_str()));
    // call function
    PyObject *pMd5 = PyObject_CallObject(pHashlibMd5, pFuncParams);
    // get function to retrieve hex digest
    PyObject *pMd5Hexdigest = PyObject_GetAttrString(pMd5, "hexdigest");
    // call function
    PyObject *pRet = PyObject_CallObject(pMd5Hexdigest, 0);
    // print result
    std::cout &lt;&lt; PyString_AsString(pRet) &lt;&lt; "\n";
    // deinitialize
    Py_DECREF(pRet);
    Py_DECREF(pMd5Hexdigest);
    Py_DECREF(pMd5);
    Py_DECREF(pFuncParams);
    Py_DECREF(pHashlibMd5);
    Py_DECREF(pHashlib);
    Py_Finalize();
}
</snippet></ROW><ROW><id>20643972</id><snippet>$ g++ test.cc -I /usr/include/python2.7 -l python2.7
$ ./a.out Hello World
compute md5 of string: 'Hello World'
b10a8db164e0754105b7a99be72e3fe5
</snippet></ROW><ROW><id>20643972</id><snippet>&gt;&gt;&gt; import hashlib
&gt;&gt;&gt; print hashlib.md5('Hello World').hexdigest()
b10a8db164e0754105b7a99be72e3fe5
</snippet></ROW><ROW><id>20643974</id><snippet>In [11]: df.reset_index().groupby('CUSIP').apply(lambda x: x.iloc[-1]).reset_index(drop=True).set_index('date')
Out[11]: 
           CUSIP  COLA  COLB      COLC
date                                  
1992-07-13   AAA   NaN  4677  3.485577
1997-12-12   BBB   245   NaN  3.250000
1999-12-12   CCC   223  5120  3.651450

[3 rows x 4 columns]
</snippet></ROW><ROW><id>20643974</id><snippet>In [12]: df[df.groupby('CUSIP').cumcount(ascending=False) == 0]
Out[12]: 
           CUSIP  COLA  COLB      COLC
date                                  
1992-07-13   AAA   NaN  4677  3.485577
1997-12-12   BBB   245   NaN  3.250000
1999-12-12   CCC   223  5120  3.651450

[3 rows x 4 columns]
</snippet></ROW><ROW><id>20644150</id><snippet>In [11]: df = pd.read_csv('foo.csv', sep='(?&lt;!,)\s', header=None)

In [12]: df
Out[12]: 
       0               1                                                  2
0   8988  20131126102946                                                 []
1   8989  20131126102946  [53, 31, 9, 21, 48, 7, 40, 178, 55, 179, 176, ...
2   8988  20131126102946                                                 []
3   8989  20131126102946  [53, 31, 9, 21, 48, 7, 40, 178, 55, 179, 176, ...
4    544  20131126102946  [178, 30, 176, 103, 179, 112, 21, 20, 48, 7, 5...
5    601  20131126094911                                                 []
6    602  20131126101056                                                 []
7    603  20131126101056                                                 []
8    604  20131126101056                                                 []
9    544  20131126102946  [178, 30, 176, 103, 179, 112, 21, 20, 48, 7, 5...
10   601  20131126094911                                                 []
11   602  20131126101056                                                 []
12   603  20131126101056                                                 []
13   604  20131126101056                                                 []

[14 rows x 3 columns]
</snippet></ROW><ROW><id>20644150</id><snippet>def series_chunk(chunk):
    jfile = json.loads(chunk)
    zipcode = jfile['zipcode']
    datetime = jfile['current']['proc_time']
    triggers = jfile['triggers']
    return pd.Series([jfile['zipcode'], jfile['current']['proc_time'], jfile['triggers']])

dfs = []
for fin in glob.glob('*.txt'):
    with open(fin) as f:
        df = pd.concat([series_chunk(chunk) for chunk in lines_per_n(f, 5)], axis=1)
        dfs.append(dfs)

df = pd.concat(dfs, ignore_index=True)
</snippet></ROW><ROW><id>20644150</id><snippet>series_chunk</snippet></ROW><ROW><id>20644368</id><snippet>from scipy.interpolate import spline
sx = np.array(x2+x3)
sy = np.array(y2+y3)
t  = np.arange(sx.size,dtype=float)
t /= t[-1]
N  = np.linspace(0,1,2000)
SX = spline(t,sx,N,order=4)
SY = spline(t,sy,N,order=4)

plt.plot(x1,y1, 'r')
plt.plot(x2,y2, 'b')
plt.scatter(x3,y3,c='k')

plt.plot(SX, SY,'g',alpha=.7,lw=3)    
plt.show()
</snippet></ROW><ROW><id>20644575</id><snippet>&gt;&gt;&gt; import pandas as pd
&gt;&gt;&gt; df = pd.DataFrame([[1,2],[3,4]], columns=list('ab'))
&gt;&gt;&gt; df
   a  b
0  1  2
1  3  4
&gt;&gt;&gt; df['c'] = df['b']**2
&gt;&gt;&gt; df
   a  b   c
0  1  2   4
1  3  4  16
</snippet></ROW><ROW><id>20644580</id><snippet>In [11]: s = f['Adj Close'].to_json(date_format='iso',orient='split')

In [12]: d = json.loads(s)  # import json

In [13]: [{"index": date, "value": val} for date, val in zip(d['index'], d['data'])]
Out[13]: 
[{'index': u'2013-01-02T00:00:00.000Z', 'value': 535.58},
 {'index': u'2013-01-03T00:00:00.000Z', 'value': 528.82},
 {'index': u'2013-01-04T00:00:00.000Z', 'value': 514.09},
 {'index': u'2013-01-07T00:00:00.000Z', 'value': 511.06},
 {'index': u'2013-01-08T00:00:00.000Z', 'value': 512.44},
 {'index': u'2013-01-09T00:00:00.000Z', 'value': 504.43},
 {'index': u'2013-01-10T00:00:00.000Z', 'value': 510.68},
 {'index': u'2013-01-11T00:00:00.000Z', 'value': 507.55},
 {'index': u'2013-01-14T00:00:00.000Z', 'value': 489.45},
 {'index': u'2013-01-15T00:00:00.000Z', 'value': 474.01},
 {'index': u'2013-01-16T00:00:00.000Z', 'value': 493.69},
 {'index': u'2013-01-17T00:00:00.000Z', 'value': 490.36},
 {'index': u'2013-01-18T00:00:00.000Z', 'value': 487.75},
 {'index': u'2013-01-22T00:00:00.000Z', 'value': 492.4},
 {'index': u'2013-01-23T00:00:00.000Z', 'value': 501.41},
 {'index': u'2013-01-24T00:00:00.000Z', 'value': 439.46},
 {'index': u'2013-01-25T00:00:00.000Z', 'value': 429.1}]

In [14]: json.dumps([{"index": date, "value": val} for date, val in zip(d['index'], d['data'])])
Out[14]: '[{"index": "2013-01-02T00:00:00.000Z", "value": 535.58}, {"index": "2013-01-03T00:00:00.000Z", "value": 528.82}, {"index": "2013-01-04T00:00:00.000Z", "value": 514.09}, {"index": "2013-01-07T00:00:00.000Z", "value": 511.06}, {"index": "2013-01-08T00:00:00.000Z", "value": 512.44}, {"index": "2013-01-09T00:00:00.000Z", "value": 504.43}, {"index": "2013-01-10T00:00:00.000Z", "value": 510.68}, {"index": "2013-01-11T00:00:00.000Z", "value": 507.55}, {"index": "2013-01-14T00:00:00.000Z", "value": 489.45}, {"index": "2013-01-15T00:00:00.000Z", "value": 474.01}, {"index": "2013-01-16T00:00:00.000Z", "value": 493.69}, {"index": "2013-01-17T00:00:00.000Z", "value": 490.36}, {"index": "2013-01-18T00:00:00.000Z", "value": 487.75}, {"index": "2013-01-22T00:00:00.000Z", "value": 492.4}, {"index": "2013-01-23T00:00:00.000Z", "value": 501.41}, {"index": "2013-01-24T00:00:00.000Z", "value": 439.46}, {"index": "2013-01-25T00:00:00.000Z", "value": 429.1}]'
</snippet></ROW><ROW><id>20644592</id><snippet>#!/usr/bin/python
import re

title="Announcing Elasticsearch.js For Node.js And The Browser TEst"
pattern = r'(?=((?&lt;![A-Za-z.])[A-Z][a-z.]*[\s-][A-Z][a-z.]*))'

print re.findall(pattern, title)
</snippet></ROW><ROW><id>20644592</id><snippet>(?=..)</snippet></ROW><ROW><id>20644609</id><snippet>concurrent.futures.ThreadPoolExecutor</snippet></ROW><ROW><id>20644609</id><snippet>from concurrent.futures import ThreadPoolExecutor
with ThreadPoolExecutor(max_workers=5) as executor:
    for work in work_list:
        executor.submit(work_function, work)
</snippet></ROW><ROW><id>20644609</id><snippet>work_function</snippet></ROW><ROW><id>20644609</id><snippet>from collections import Iterator
from threading import Lock
import time

class RateLimiter(Iterator):
    """Iterator that yields a value at most once every 'interval' seconds."""
    def __init__(self, interval):
        self.lock = Lock()
        self.interval = interval
        self.next_yield = 0

    def __next__(self):
        with self.lock:
            t = time.time()
            if t &lt; self.next_yield:
                time.sleep(self.next_yield - t)
                t = time.time()
            self.next_yield = t + self.interval

api_rate_limiter = RateLimiter(1)

def work_function(work):
    next(api_rate_limiter)
    call_api(...)
</snippet></ROW><ROW><id>20645168</id><snippet>from django.test.runner import DiscoverRunner
from django.db import transaction

class ExistingDBTestRunner(DiscoverRunner):

    def run_tests(self, test_labels, extra_tests=None, **kwargs):
        self.setup_test_environment()
        suite = self.build_suite(test_labels, extra_tests)
        #old_config = self.setup_databases()
        result = self.run_suite(suite)
        #self.teardown_databases(old_config)
        self.teardown_test_environment()
        return self.suite_result(suite, result)
</snippet></ROW><ROW><id>20645168</id><snippet>if 'test' in sys.argv:
     TEST_RUNNER = '&lt;?&gt;.ExistingDBTestRunner'
     # alternative db settings?
</snippet></ROW><ROW><id>20645168</id><snippet>unittest.TestCase</snippet></ROW><ROW><id>20645168</id><snippet>django.test.TestCase</snippet></ROW><ROW><id>20645211</id><snippet>hellow</snippet></ROW><ROW><id>20645211</id><snippet>Process finished with exit code 0</snippet></ROW><ROW><id>20645211</id><snippet>exit</snippet></ROW><ROW><id>20645215</id><snippet>In [11]: df1.index.name = 'year'

In [12]: df2.index.name = 'year'

In [13]: df1.reset_index(inplace=True)

In [14]: df2.reset_index(inplace=True)

In [15]: df1
Out[15]: 
   year   fruit  price  qty
0  2010   apple    1.0  2.0
1  2011   apple    3.0  4.0
2  2010  banana    0.5  1.5
3  2011  banana    7.0  8.0

[4 rows x 4 columns]

In [16]: df2
Out[16]: 
   year   fruit  weight
0  2010   apple      10
1  2010  banana      12

[2 rows x 3 columns]
</snippet></ROW><ROW><id>20645215</id><snippet>In [17]: df1.merge(df2, how='left').merge(df3, how='left')
Out[17]: 
   year   fruit  price  qty  weight  colour
0  2010   apple    1.0  2.0      10     red
1  2011   apple    3.0  4.0     NaN     red
2  2010  banana    0.5  1.5      12  yellow
3  2011  banana    7.0  8.0     NaN  yellow

[4 rows x 6 columns]
</snippet></ROW><ROW><id>20645215</id><snippet>In [18]: del df2['year']

In [19]: df1.merge(df2, how='left').merge(df3, how='left')
Out[19]: 
   year   fruit  price  qty  weight  colour
0  2010   apple    1.0  2.0      10     red
1  2011   apple    3.0  4.0      10     red
2  2010  banana    0.5  1.5      12  yellow
3  2011  banana    7.0  8.0      12  yellow

[4 rows x 6 columns]
</snippet></ROW><ROW><id>20645328</id><snippet>random.seed(64)</snippet></ROW><ROW><id>20645450</id><snippet>os.path.join</snippet></ROW><ROW><id>20645450</id><snippet>os.path.join</snippet></ROW><ROW><id>20645450</id><snippet>join</snippet></ROW><ROW><id>20645450</id><snippet>join</snippet></ROW><ROW><id>20645684</id><snippet>sudo brew install ctags</snippet></ROW><ROW><id>20645684</id><snippet>/usr/local/bin/ctags</snippet></ROW><ROW><id>20645684</id><snippet>ctags</snippet></ROW><ROW><id>20645684</id><snippet>`brew --prefix`/bin/ctags</snippet></ROW><ROW><id>20645761</id><snippet>A</snippet></ROW><ROW><id>20645761</id><snippet>&gt;&gt;&gt; A[np.triu_indices(3)]
array([ 4,  0,  3,  4, -2,  7])
</snippet></ROW><ROW><id>20645761</id><snippet>&gt;&gt;&gt; list(A[np.triu_indices(3)])
[4, 0, 3, 4, -2, 7]
</snippet></ROW><ROW><id>20645793</id><snippet>CustomPermission</snippet></ROW><ROW><id>20645793</id><snippet>CustomPermission</snippet></ROW><ROW><id>20645793</id><snippet>ForeignKey</snippet></ROW><ROW><id>20645793</id><snippet>UserCustomPermission</snippet></ROW><ROW><id>20645793</id><snippet>ForeignKey</snippet></ROW><ROW><id>20645793</id><snippet>User</snippet></ROW><ROW><id>20645793</id><snippet>ForeignKey</snippet></ROW><ROW><id>20645793</id><snippet>CustomPermission</snippet></ROW><ROW><id>20645793</id><snippet>User</snippet></ROW><ROW><id>20645793</id><snippet>CustomPermission</snippet></ROW><ROW><id>20645793</id><snippet>SubDomainDatabaseRouter</snippet></ROW><ROW><id>20645793</id><snippet>RouterMiddleware</snippet></ROW><ROW><id>20645793</id><snippet>client_cfg</snippet></ROW><ROW><id>20645793</id><snippet>SubDomainDatabaseRouter</snippet></ROW><ROW><id>20645793</id><snippet>client_cfg</snippet></ROW><ROW><id>20645793</id><snippet>DATABASE_ROUTERS = ['my.package.SubDomainDatabaseRouter']</snippet></ROW><ROW><id>20645856</id><snippet> int a = -145;

printf("%.2lf", a); // returns 0.00
printf("%.2ld", a); // returns -145
</snippet></ROW><ROW><id>20645856</id><snippet>int</snippet></ROW><ROW><id>20645856</id><snippet>d</snippet></ROW><ROW><id>20645856</id><snippet>lf</snippet></ROW><ROW><id>20645856</id><snippet>double</snippet></ROW><ROW><id>20645856</id><snippet>ld</snippet></ROW><ROW><id>20645856</id><snippet>long</snippet></ROW><ROW><id>20645975</id><snippet>self.add = add 
</snippet></ROW><ROW><id>20645975</id><snippet>__init__</snippet></ROW><ROW><id>20645975</id><snippet>__init__</snippet></ROW><ROW><id>20645975</id><snippet>IndentationError</snippet></ROW><ROW><id>20645975</id><snippet>__init__</snippet></ROW><ROW><id>20645975</id><snippet>add</snippet></ROW><ROW><id>20645975</id><snippet>__init__</snippet></ROW><ROW><id>20645975</id><snippet>pass</snippet></ROW><ROW><id>20645975</id><snippet>class test:
    def __init__(self): pass
    def add(self,a,b):
        print a+b

class subclass(test):
    print "testing"
</snippet></ROW><ROW><id>20646554</id><snippet>import time
time.sleep(1) # delays for 1 second
</snippet></ROW><ROW><id>20646727</id><snippet>scan_mark</snippet></ROW><ROW><id>20646727</id><snippet>scan_dragto</snippet></ROW><ROW><id>20646727</id><snippet>gain</snippet></ROW><ROW><id>20646727</id><snippet>scan_moveto</snippet></ROW><ROW><id>20646727</id><snippet>import Tkinter as tk
import random

class Example(tk.Frame):
    def __init__(self, root):
        tk.Frame.__init__(self, root)
        self.canvas = tk.Canvas(self, width=400, height=400, background="bisque")
        self.xsb = tk.Scrollbar(self, orient="horizontal", command=self.canvas.xview)
        self.ysb = tk.Scrollbar(self, orient="vertical", command=self.canvas.yview)
        self.canvas.configure(yscrollcommand=self.ysb.set, xscrollcommand=self.xsb.set)
        self.canvas.configure(scrollregion=(0,0,1000,1000))

        self.xsb.grid(row=1, column=0, sticky="ew")
        self.ysb.grid(row=0, column=1, sticky="ns")
        self.canvas.grid(row=0, column=0, sticky="nsew")
        self.grid_rowconfigure(0, weight=1)
        self.grid_columnconfigure(0, weight=1)

        for n in range(50):
            x0 = random.randint(0, 900)
            y0 = random.randint(50, 900)
            x1 = x0 + random.randint(50, 100)
            y1 = y0 + random.randint(50,100)
            color = ("red", "orange", "yellow", "green", "blue")[random.randint(0,4)]
            self.canvas.create_rectangle(x0,y0,x1,y1, outline="black", fill=color)
        self.canvas.create_text(50,10, anchor="nw", 
                                text="Click and drag to move the canvas")

        # This is what enables scrolling with the mouse:
        self.canvas.bind("&lt;ButtonPress-1&gt;", self.scroll_start)
        self.canvas.bind("&lt;B1-Motion&gt;", self.scroll_move)

    def scroll_start(self, event):
        self.canvas.scan_mark(event.x, event.y)

    def scroll_move(self, event):
        self.canvas.scan_dragto(event.x, event.y, gain=1)


if __name__ == "__main__":
    root = tk.Tk()
    Example(root).pack(fill="both", expand=True)
    root.mainloop()
</snippet></ROW><ROW><id>20646824</id><snippet>import xlrd

wb = xlrd.open_workbook(path)
sheet = wb.sheet_by_index(index)

column_list = range(0, sheet.ncols)

val_name = [sheet.cell_value(rowx=0, colx=i) for i in column_list]
channel = val_name.pop(0)
condition = val_name.pop(0)

print(channel, condition, "Value *", "Status")
lines = []
for r in range(1, sheet.nrows):
    row = [sheet.cell_value(rowx=r, colx=i) for i in column_list]
    channel = row[0]
    condition = row[1]
    values = row[2:]

    lines = zip( [channel]*len(values),
                 [condition]*len(values),
                 val_name,
                 values)
    for l in lines:
        print(l)
</snippet></ROW><ROW><id>20646887</id><snippet>for file_name in filelist:
    try:
        tar_file = tarfile.open(file_name)
        tar_file.extractall("./" + "location")
    except struct.error, e:  # or except struct.error as e, depends on Python version
        print "Corrupt:", file_name
    except tarfile.TarError, e:
        print "Tar error (%s): %s" % (str(e), file_name)
</snippet></ROW><ROW><id>20646916</id><snippet>StringIO</snippet></ROW><ROW><id>20646916</id><snippet>self._storage.stream_write(filename, io)</snippet></ROW><ROW><id>20646916</id><snippet>def put_content(self, path, content, chunk=None):
    path = self._init_path(path)
    try:
        self._swift_container[path] = content
    except Exception:
        raise IOError("Could not put content")
</snippet></ROW><ROW><id>20646916</id><snippet>content</snippet></ROW><ROW><id>20646916</id><snippet>io</snippet></ROW><ROW><id>20646916</id><snippet>StringIO</snippet></ROW><ROW><id>20646916</id><snippet>stream = StringIO.StringIO(self.get_content(path))
</snippet></ROW><ROW><id>20646916</id><snippet>str()</snippet></ROW><ROW><id>20646916</id><snippet>self.get_content(path)</snippet></ROW><ROW><id>20646916</id><snippet>cStringIO.StringI()</snippet></ROW><ROW><id>20646916</id><snippet>&gt;&gt;&gt; from cStringIO import StringIO
&gt;&gt;&gt; str(StringIO('test data'))
'&lt;cStringIO.StringI object at 0x1074ea470&gt;'
</snippet></ROW><ROW><id>20646916</id><snippet>StringIO</snippet></ROW><ROW><id>20646916</id><snippet>.read()</snippet></ROW><ROW><id>20646916</id><snippet>def put_content(self, path, content, chunk=None):
    path = self._init_path(path)
    try:
        self._swift_container[path] = content.read()
    except Exception:
        raise IOError("Could not put content")
</snippet></ROW><ROW><id>20646917</id><snippet>freq</snippet></ROW><ROW><id>20646917</id><snippet>for</snippet></ROW><ROW><id>20646917</id><snippet>list</snippet></ROW><ROW><id>20646917</id><snippet>n</snippet></ROW><ROW><id>20646917</id><snippet>freq = [(k[n] * samplerate) / N for n in range(0, N)]
</snippet></ROW><ROW><id>20646917</id><snippet>k[n] == n</snippet></ROW><ROW><id>20646917</id><snippet>freq = [(n * samplerate) / N for n in range(0, N)]
</snippet></ROW><ROW><id>20646917</id><snippet>range</snippet></ROW><ROW><id>20647013</id><snippet>sudo pip install dateutil
</snippet></ROW><ROW><id>20647185</id><snippet>__import__</snippet></ROW><ROW><id>20647185</id><snippet>package.module</snippet></ROW><ROW><id>20647185</id><snippet>__import__</snippet></ROW><ROW><id>20647185</id><snippet>importlib.import_module</snippet></ROW><ROW><id>20647288</id><snippet>return</snippet></ROW><ROW><id>20647288</id><snippet>return expr</snippet></ROW><ROW><id>20647288</id><snippet>None</snippet></ROW><ROW><id>20647288</id><snippet>return</snippet></ROW><ROW><id>20647322</id><snippet>len</snippet></ROW><ROW><id>20647322</id><snippet>Queue.Queue</snippet></ROW><ROW><id>20647322</id><snippet>len</snippet></ROW><ROW><id>20647322</id><snippet>Queue</snippet></ROW><ROW><id>20647322</id><snippet>qsize</snippet></ROW><ROW><id>20647387</id><snippet>import os
from subprocess import Popen

devnull = open(os.devnull, 'wb') # use this in python &lt; 3.3
# python &gt;= 3.3 has subprocess.DEVNULL
Popen(['nohup', 'script.sh'], stdout=devnull, stderr=devnull)
</snippet></ROW><ROW><id>20647456</id><snippet>|</snippet></ROW><ROW><id>20647456</id><snippet>abcd</snippet></ROW><ROW><id>20647456</id><snippet>abcd</snippet></ROW><ROW><id>20647456</id><snippet>bc</snippet></ROW><ROW><id>20647456</id><snippet>abcd</snippet></ROW><ROW><id>20647456</id><snippet>abcd|bc</snippet></ROW><ROW><id>20647456</id><snippet>bc|abcd</snippet></ROW><ROW><id>20647456</id><snippet>abcd</snippet></ROW><ROW><id>20647456</id><snippet>bc</snippet></ROW><ROW><id>20647567</id><snippet>&lt;PythonCommand&gt;</snippet></ROW><ROW><id>20647789</id><snippet>mydict={'tom': '100','dick': '50','harry': '121','jim':'25'}
print sorted(mydict, key = lambda k: int(mydict[k]), reverse = True)
</snippet></ROW><ROW><id>20647789</id><snippet>['harry', 'tom', 'dick', 'jim']
</snippet></ROW><ROW><id>20647845</id><snippet>numpy.triu_indices(N, k=0)</snippet></ROW><ROW><id>20647845</id><snippet>In [28]: B = np.array([[4, 0, 3], [2, 4, -2], [-2, -3, 7]])

In [29]: B[np.triu_indices(B.shape[0])]
Out[29]: array([ 4,  0,  3,  4, -2,  7])
</snippet></ROW><ROW><id>20647845</id><snippet>B.shape[0]</snippet></ROW><ROW><id>20647845</id><snippet>dtype</snippet></ROW><ROW><id>20647845</id><snippet>object</snippet></ROW><ROW><id>20647845</id><snippet>In [36]: A = sp.Matrix([[4, 0, 3], [2, 4, -2], [-2, -3, 7]])

# you can change the dtype of the new array to match the first array
# e.g., .astype(int), .astype(sp.Symbol)
# or you can just leave the default (dtype=object)
In [37]: C = np.array(A) #.astype(new_dtype) 

In [38]: C[np.triu_indices(C.shape[0])]
Out[38]: array([ 4,  0,  3,  4, -2,  7])
</snippet></ROW><ROW><id>20647845</id><snippet>In [39]: C[np.triu_indices(C.shape[0])].tolist()
Out[39]: [4, 0, 3, 4, -2, 7]
</snippet></ROW><ROW><id>20647892</id><snippet>actionButtonContainer</snippet></ROW><ROW><id>20647892</id><snippet>self</snippet></ROW><ROW><id>20647914</id><snippet>HDFStore</snippet></ROW><ROW><id>20647914</id><snippet>CArray</snippet></ROW><ROW><id>20647914</id><snippet>__getitem__</snippet></ROW><ROW><id>20647914</id><snippet>s[time1:time2]</snippet></ROW><ROW><id>20647914</id><snippet>class OutOfCoreSeries(object):

     def __init__(self, dir):
            .... load a list of the files in the dir where you have them ...

     def __getitem__(self, key):
            .... map the selection key (say its a slice, which 'time1:time2' resolves) ...
            .... to the files that make it up .... , then return a new Series that only
            .... those file pointers ....

     def apply(self, func, **kwargs):
            """ apply a function to the files """
            results = []
            for f in self.files:
                     results.append(func(self.read_file(f)))
            return Results(results)
</snippet></ROW><ROW><id>20648111</id><snippet>(response != 'n') or (response != 's')
</snippet></ROW><ROW><id>20648111</id><snippet>response</snippet></ROW><ROW><id>20648111</id><snippet>'n'</snippet></ROW><ROW><id>20648111</id><snippet>'s'</snippet></ROW><ROW><id>20648111</id><snippet>'s'</snippet></ROW><ROW><id>20648111</id><snippet>'n'</snippet></ROW><ROW><id>20648111</id><snippet>'s'</snippet></ROW><ROW><id>20648111</id><snippet>'n'</snippet></ROW><ROW><id>20648111</id><snippet>and</snippet></ROW><ROW><id>20648462</id><snippet>df.sort(['ticker', 'date'], inplace=True)
df['diffs'] = df['value'].diff()
</snippet></ROW><ROW><id>20648462</id><snippet>df[ 'diffs' ][ df.ticker != df.ticker.shift( 1 ) ] = np.nan
</snippet></ROW><ROW><id>20648462</id><snippet>idx = df.index</snippet></ROW><ROW><id>20648462</id><snippet>df.reindex( idx )</snippet></ROW><ROW><id>20648462</id><snippet>df.filter( ['ticker', 'date', 'value'] )
</snippet></ROW><ROW><id>20648462</id><snippet>join</snippet></ROW><ROW><id>20648462</id><snippet>groupby</snippet></ROW><ROW><id>20648462</id><snippet>df.set_index( [ 'ticker', 'date' ], inplace=True )
df.sort_index( inplace=True )
df[ 'diffs' ] = np.nan 

for idx in df.index.levels[ 0 ]:
    df.diffs[ idx ] = df.value[ idx ].diff( )
</snippet></ROW><ROW><id>20648462</id><snippet>   date ticker  value
0    63      C   1.65
1    88      C  -1.93
2    22      C  -1.29
3    76      A  -0.79
4    72      B  -1.24
5    34      A  -0.23
6    92      B   2.43
7    22      A   0.55
8    32      A  -2.50
9    59      B  -1.01
</snippet></ROW><ROW><id>20648462</id><snippet>             value  diffs
ticker date              
A      22     0.55    NaN
       32    -2.50  -3.05
       34    -0.23   2.27
       76    -0.79  -0.56
B      59    -1.01    NaN
       72    -1.24  -0.23
       92     2.43   3.67
C      22    -1.29    NaN
       63     1.65   2.94
       88    -1.93  -3.58
</snippet></ROW><ROW><id>20648512</id><snippet>a = {"1": "", "2": "", …, "20": ""}
</snippet></ROW><ROW><id>20648512</id><snippet>for key in sorted(a.iterkeys(), key=int):
    print key
</snippet></ROW><ROW><id>20648512</id><snippet>key</snippet></ROW><ROW><id>20648512</id><snippet>key</snippet></ROW><ROW><id>20648512</id><snippet>sorted</snippet></ROW><ROW><id>20648512</id><snippet>int</snippet></ROW><ROW><id>20648512</id><snippet>"3"</snippet></ROW><ROW><id>20648512</id><snippet>3</snippet></ROW><ROW><id>20648512</id><snippet>"20"</snippet></ROW><ROW><id>20648512</id><snippet>20</snippet></ROW><ROW><id>20648512</id><snippet>"3" &gt; "20"</snippet></ROW><ROW><id>20648512</id><snippet>3 &lt; 20</snippet></ROW><ROW><id>20648519</id><snippet>response = requests.get(url)
newUrl = response.url
</snippet></ROW><ROW><id>20648897</id><snippet>sys.path</snippet></ROW><ROW><id>20648897</id><snippet>-O</snippet></ROW><ROW><id>20648935</id><snippet>Request</snippet></ROW><ROW><id>20648935</id><snippet>method</snippet></ROW><ROW><id>20648935</id><snippet>urllib</snippet></ROW><ROW><id>20648935</id><snippet>HEAD</snippet></ROW><ROW><id>20649408</id><snippet>hr</snippet></ROW><ROW><id>20649408</id><snippet>strong</snippet></ROW><ROW><id>20649408</id><snippet>tags = soup.find_all(['hr', 'strong'])
</snippet></ROW><ROW><id>20649555</id><snippet>homeDir = os.path.expanduser("~") # input bytestring, returns bytestring
fullPath = homeDir + "/.config" # add 2 bytestrings 
print fullPath
</snippet></ROW><ROW><id>20649555</id><snippet>print</snippet></ROW><ROW><id>20649555</id><snippet>from __future__ import unicode_literals</snippet></ROW><ROW><id>20649555</id><snippet>from __future__ import unicode_literals

homeDir = os.path.expanduser("~") # input Unicode, returns Unicode
fullPath = homeDir + "/.config" # add 2 Unicode strings
print(fullPath) # print Unicode
</snippet></ROW><ROW><id>20649555</id><snippet>PYTHONIOENCODING</snippet></ROW><ROW><id>20649555</id><snippet>surrogateescape</snippet></ROW><ROW><id>20649555</id><snippet>fullPath</snippet></ROW><ROW><id>20649555</id><snippet>U+DCxx</snippet></ROW><ROW><id>20649555</id><snippet>print(fullPath)</snippet></ROW><ROW><id>20649555</id><snippet>os.fsencode(fullPath)</snippet></ROW><ROW><id>20649613</id><snippet>&lt;img&gt;</snippet></ROW><ROW><id>20649613</id><snippet>alt</snippet></ROW><ROW><id>20649613</id><snippet>soup('img', alt=True)</snippet></ROW><ROW><id>20649613</id><snippet>print("\n".join([img['alt'] for img in div.find_all('img', alt=True)]))
</snippet></ROW><ROW><id>20649613</id><snippet>soup = BeautifulSoup(htmlSource)
articles = soup('article', 'masonry-brick',
                style='position;  absolute; top; 0px; left: 0px;')
for div in soup.find_all('div', 'thumbnail'):
    for img in div.find_all('img', alt=True):
        print(img['alt'])
</snippet></ROW><ROW><id>20649613</id><snippet>articles</snippet></ROW><ROW><id>20649613</id><snippet>.find()</snippet></ROW><ROW><id>20649613</id><snippet>&lt;img&gt;</snippet></ROW><ROW><id>20649613</id><snippet>&lt;div&gt;</snippet></ROW><ROW><id>20649613</id><snippet>for div in soup.find_all('div', 'thumbnail'):
    img = div.find('img', alt=True)
    print(img['alt'])
</snippet></ROW><ROW><id>20649730</id><snippet>sentiment_words = {}  # this will be a dict of 3-member lists, with word as key

for word in words:
    if not word in sentiment_words:  # initialize the word if it's not present yet
        sentiment_words[word] = [0, 0, 0]
    if ispositive(word):  # increment the right sentiment item in the list
        sentiment_words[word][0] += 1
    elif isnegative(word):
        sentiment_words[word][1] += 1
    elif isneutral(word):
        sentiment_words[word][2] += 1
</snippet></ROW><ROW><id>20649854</id><snippet>self.deck = self.createDeck()
</snippet></ROW><ROW><id>20649854</id><snippet>def __init__(self):
     ...
    self.createDeck()

def createDeck(self):
    currentDeck = []
         ...
    self.deck = currentDeck
</snippet></ROW><ROW><id>20650059</id><snippet>@outputSchemaFunction("squareSchema")
def square(num):
  return ((num)*(num))
</snippet></ROW><ROW><id>20650059</id><snippet>b = foreach a generate myfuncs.square(3);
</snippet></ROW><ROW><id>20650059</id><snippet>@outputSchemaFunction("dow:long")
def get_week(format,source_date):
    your code here
</snippet></ROW><ROW><id>20650103</id><snippet>import time
answer = time.mktime(time.strptime(string, '%Y-%m-%d %H:%M:%S'))
</snippet></ROW><ROW><id>20650232</id><snippet>{{ forloop.counter }}
</snippet></ROW><ROW><id>20650232</id><snippet>{% for value in values %}
{% if forloop.counter == 1 %}
   Do something.
{% endif %}
{% endfor %}
</snippet></ROW><ROW><id>20650301</id><snippet>import random

def deckmaker(n):
    half = n // 2
    deck = []
    for i in range(n):
        if deck.count(0) == half:
            deck.append(1)
        elif deck.count(1) == half:
            deck.append(0)
        elif random.random() &gt; .5:
            deck.append(0)
        else:
            deck.append(1)
    return deck
</snippet></ROW><ROW><id>20650301</id><snippet>from collections import Counter
c = Counter()
for i in range(1000):
    c[tuple(deckmaker(2))] += 1
for t in sorted(c):
    print t, c[t]
</snippet></ROW><ROW><id>20650301</id><snippet>(0, 1) 495
(1, 0) 505
</snippet></ROW><ROW><id>20650301</id><snippet>c[tuple(deckmaker(4))] += 1
</snippet></ROW><ROW><id>20650301</id><snippet>(0, 0, 1, 1) 236
(0, 1, 0, 1) 127
(0, 1, 1, 0) 133
(1, 0, 0, 1) 135
(1, 0, 1, 0) 130
(1, 1, 0, 0) 239
</snippet></ROW><ROW><id>20650301</id><snippet>2*M</snippet></ROW><ROW><id>20650301</id><snippet>M</snippet></ROW><ROW><id>20650301</id><snippet>M</snippet></ROW><ROW><id>20650301</id><snippet>M</snippet></ROW><ROW><id>20650301</id><snippet>(2*M)-choose-M</snippet></ROW><ROW><id>20650301</id><snippet>M</snippet></ROW><ROW><id>20650301</id><snippet>2**M</snippet></ROW><ROW><id>20650301</id><snippet>M</snippet></ROW><ROW><id>20650301</id><snippet>(2*M)-choose-M</snippet></ROW><ROW><id>20650301</id><snippet>2**M</snippet></ROW><ROW><id>20650301</id><snippet>M == 26</snippet></ROW><ROW><id>20650301</id><snippet>&gt;&gt;&gt; from math import factorial as f
&gt;&gt;&gt; one = f(52) // f(26)**2
&gt;&gt;&gt; two = 2**26
&gt;&gt;&gt; float(one) / two
7389761.998476148
</snippet></ROW><ROW><id>20650301</id><snippet>nzero</snippet></ROW><ROW><id>20650301</id><snippet>nremaining</snippet></ROW><ROW><id>20650301</id><snippet>nzero / nremaining</snippet></ROW><ROW><id>20650301</id><snippet>def deckmaker(n=52):
    deck = [None] * n
    nremaining = float(n)
    nzero = nremaining / 2.0
    for i in range(n):
        if random.random() &lt; nzero / nremaining:
            deck[i] = 0
            nzero -= 1.0
        else:
            deck[i] = 1
        nremaining -= 1.0
    return deck
</snippet></ROW><ROW><id>20650301</id><snippet>nzero</snippet></ROW><ROW><id>20650301</id><snippet>if</snippet></ROW><ROW><id>20650301</id><snippet>random() &lt; 0.0</snippet></ROW><ROW><id>20650301</id><snippet>n/2</snippet></ROW><ROW><id>20650301</id><snippet>nzero == nremaining</snippet></ROW><ROW><id>20650301</id><snippet>if</snippet></ROW><ROW><id>20650301</id><snippet>random() &lt; 1.0</snippet></ROW><ROW><id>20650404</id><snippet>urllib.urlopen(url)</snippet></ROW><ROW><id>20650404</id><snippet>HTMLParser</snippet></ROW><ROW><id>20650404</id><snippet>tempfile</snippet></ROW><ROW><id>20650404</id><snippet>#sequence</snippet></ROW><ROW><id>20650647</id><snippet>master</snippet></ROW><ROW><id>20651075</id><snippet>[2] + range(3, int(n**0.5) + 1, 2)</snippet></ROW><ROW><id>20651075</id><snippet>()</snippet></ROW><ROW><id>20651075</id><snippet>[]</snippet></ROW><ROW><id>20651075</id><snippet>[]</snippet></ROW><ROW><id>20651075</id><snippet>any</snippet></ROW><ROW><id>20651075</id><snippet>()</snippet></ROW><ROW><id>20651075</id><snippet>True</snippet></ROW><ROW><id>20651075</id><snippet>xrange</snippet></ROW><ROW><id>20651075</id><snippet>range</snippet></ROW><ROW><id>20651075</id><snippet>xrange</snippet></ROW><ROW><id>20651075</id><snippet>range</snippet></ROW><ROW><id>20651075</id><snippet>+ 1</snippet></ROW><ROW><id>20651075</id><snippet>def next_higher(n):
    if n % 2 == 0:
        n = n - 1
    while True:
        n = n + 2
        s = str(n)
        if s == s[::-1]:
            if not any((n % i == 0 for i in xrange(3, int(n**0.5) + 1, 2))):
                return n
</snippet></ROW><ROW><id>20651239</id><snippet>print "hey...",
time.sleep(0.5)
</snippet></ROW><ROW><id>20651239</id><snippet>print("hey...", end=' ')
time.sleep(0.5)
</snippet></ROW><ROW><id>20651273</id><snippet>dict</snippet></ROW><ROW><id>20651273</id><snippet>from collections import defaultdict

class PropertyDict (dict):
    def __getattr__ (self, attr):
        if self.has_key(attr):
            return self.__getitem__(attr)
        return object.__getattr(self, attr)

    def __setattr__ (self, attr, value):
        self.__setitem__(attr, value)

class Record (PropertyDict):
    def __init__ (self, title = None, color = None, action = None, data = None):
        self.title = title
        self.color = color
        self.action = action
        self.data = data

class Page (PropertyDict):
    def __init__ (self):
        self.records = defaultdict(Record)

papers = defaultdict(Page)
papers[1].records[1] = Record('group', 'red', 'open', 'group1')
papers[1].records[2] = Record('group', 'green', 'open', 'group2')

papers[2].records[7].title = "ffff"
papers[1].records[1].title = 'title :-) '

print(papers[1].records[1])
print(papers)
</snippet></ROW><ROW><id>20651273</id><snippet>dict</snippet></ROW><ROW><id>20651323</id><snippet>tuples</snippet></ROW><ROW><id>20651323</id><snippet>list</snippet></ROW><ROW><id>20651323</id><snippet>sentiment_words[word]=[0,0,0]
</snippet></ROW><ROW><id>20651323</id><snippet>sentiment_words = tuple(sentiment_words)
</snippet></ROW><ROW><id>20651486</id><snippet>from django import template

register = template.Library()

@register.simple_tag
def get_sum(a, b):
    return a+b
</snippet></ROW><ROW><id>20651486</id><snippet>{% load  sum %}
</snippet></ROW><ROW><id>20651486</id><snippet>{% with a=10 b=90 %}  
    Sum is here: {% get_sum a b %}
{% endwith %}
</snippet></ROW><ROW><id>20651555</id><snippet>class hai():
  def __init__(self):
    self.b = 0
  def hel(self):
     a=10
     self.b=20
     c=a+b
     print c
 def hw(self):
     d=10
     print d, self.b
</snippet></ROW><ROW><id>20651559</id><snippet>np.recfromtxt</snippet></ROW><ROW><id>20651559</id><snippet>dtype</snippet></ROW><ROW><id>20651559</id><snippet>np.genfromtxt</snippet></ROW><ROW><id>20651559</id><snippet>dtype=None</snippet></ROW><ROW><id>20651559</id><snippet>david weight_2005 50
david weight_2012 60
david height_2005 150
david height_2012 160
</snippet></ROW><ROW><id>20651559</id><snippet>array([('david', 'weight_2005', 50), ('david', 'weight_2012', 60),
       ('david', 'height_2005', 150), ('david', 'height_2012', 160),...], 
      dtype=[('f0', 'S5'), ('f1', 'S11'), ('f2', '&lt;i4')])
</snippet></ROW><ROW><id>20651559</id><snippet>genfromtxt</snippet></ROW><ROW><id>20651559</id><snippet>dtype</snippet></ROW><ROW><id>20651559</id><snippet>Snn</snippet></ROW><ROW><id>20651559</id><snippet>dtype</snippet></ROW><ROW><id>20651559</id><snippet>names</snippet></ROW><ROW><id>20651559</id><snippet>getnfromtxt</snippet></ROW><ROW><id>20651559</id><snippet>astype</snippet></ROW><ROW><id>20651559</id><snippet>x=np.genfromtxt('stack19944408.txt',dtype=None,names=['one','two','thr'])
x.astype(dtype=[('one','S10'),('two','S10'),('thr','f')])
#array([('david', 'weight_200', 50.0), ('david', 'weight_201', 60.0),
#       ...
#      dtype=[('one', 'S10'), ('two', 'S10'), ('thr', '&lt;f4')])
</snippet></ROW><ROW><id>20651589</id><snippet>pip install scrapy==0.18.4
</snippet></ROW><ROW><id>20651626</id><snippet>df[df[column_name].isin(['HTTP', 'SSH'])]
</snippet></ROW><ROW><id>20651626</id><snippet>df[(df[column_name] == 'HTTP') &amp; (df[column_name] == 'SSH'])]
</snippet></ROW><ROW><id>20651687</id><snippet>    for i in range(len(takenSpots)):
        if takenSpots[i % 3 == 0]:
            win = True
</snippet></ROW><ROW><id>20651687</id><snippet>takenSpots</snippet></ROW><ROW><id>20651687</id><snippet>if</snippet></ROW><ROW><id>20651687</id><snippet>win_positions = [
    (0, 3, 6),
    (1, 4, 7),
    (2, 5, 8),
    (0, 1, 2),
    (3, 4, 5),
    (6, 7, 8),
    (0, 4, 8),
    (2, 4, 6),
]
for line in win_positions:
    if all(takenSpots[position] == player for position in line):
        return some_sort_of_indicator_that_that_player_won
</snippet></ROW><ROW><id>20651708</id><snippet>set_modal_flag = 0x00001000
ctypes.windll.user32.MessageBoxA(0, "Your text", "Your title", set_modal_flag)
</snippet></ROW><ROW><id>20651708</id><snippet>0x10</snippet></ROW><ROW><id>20651708</id><snippet>set_foreground_flag = 0x00010000
ctypes.windll.user32.MessageBoxA(0, "Your text", "Your title", set_foreground_flag)
</snippet></ROW><ROW><id>20651768</id><snippet>run.py</snippet></ROW><ROW><id>20651768</id><snippet>run.main(['', os.path.basename(sys.argv[0])] + sys.argv[1:])</snippet></ROW><ROW><id>20651768</id><snippet>run.main</snippet></ROW><ROW><id>20651768</id><snippet>win = self.demoModule.runTest(frame, frame, Log())</snippet></ROW><ROW><id>20651768</id><snippet>runTest</snippet></ROW><ROW><id>20651768</id><snippet>runTest</snippet></ROW><ROW><id>20651768</id><snippet>TestPanel</snippet></ROW><ROW><id>20651768</id><snippet>run.py</snippet></ROW><ROW><id>20651768</id><snippet>mainloop()</snippet></ROW><ROW><id>20651993</id><snippet>import csv
from itertools import groupby

with open(yourfile) as fin:
    tabin = csv.reader(fin, delimiter='\t')
    sentences = [[el[1] for el in g] for k, g in groupby(tabin, bool) if k]
</snippet></ROW><ROW><id>20652078</id><snippet>In [11]: df_city.moveyear.unique()
Out[11]: array([2009, 2007, 2006, 2008])
</snippet></ROW><ROW><id>20652078</id><snippet>g = df_city.groupby('moveyear')
df_city['moveyearemp'] = 0
for year, ind in g.indices.iteritems():
    year_abbr = str(year)[2:]
    df_city.loc[ind, 'moveyearemp'] = df_city.loc[ind, 'jobs%s' % year_abbr]
</snippet></ROW><ROW><id>20652078</id><snippet>In [21]: df_city.head()
Out[21]: 
        city   industry  jobs06  jobs07  jobs08  jobs09  moveyear  moveyearemp
0         sf  utilities     206      82     192     236      2009          236
1    oakland  utilities      10     244       2       7      2007          244
2  san mateo    finance     182     164      49      66      2006          182
3    oakland      sales      27     228      33     169      2007          228
4  san mateo      sales      24      24     127     165      2007           24
</snippet></ROW><ROW><id>20652270</id><snippet>words()</snippet></ROW><ROW><id>20652270</id><snippet>nltk.corpus.words()</snippet></ROW><ROW><id>20652270</id><snippet>categories()</snippet></ROW><ROW><id>20652270</id><snippet>movie_reviews</snippet></ROW><ROW><id>20652270</id><snippet>abc</snippet></ROW><ROW><id>20652270</id><snippet>reuters</snippet></ROW><ROW><id>20652270</id><snippet>qc</snippet></ROW><ROW><id>20652270</id><snippet>nltk_data/corpora</snippet></ROW><ROW><id>20652584</id><snippet>class PKIsFalseException(Exception):
    pass

try: 
    pk = a_method_that_may_raise_an_exception()
    if not pk: raise PKIsFalseException()
except (PKIsFalseException, CatchableExceptions):
    method_to_be_executed_in_case_of_exception_or_pk_is_false()
</snippet></ROW><ROW><id>20652584</id><snippet>CatchableExceptions</snippet></ROW><ROW><id>20653059</id><snippet>sklearn.__version__</snippet></ROW><ROW><id>20653179</id><snippet>map</snippet></ROW><ROW><id>20653179</id><snippet>map</snippet></ROW><ROW><id>20653179</id><snippet>itertools.imap</snippet></ROW><ROW><id>20653179</id><snippet>map()</snippet></ROW><ROW><id>20653179</id><snippet>None</snippet></ROW><ROW><id>20653179</id><snippet>map()</snippet></ROW><ROW><id>20653179</id><snippet>imap()</snippet></ROW><ROW><id>20653179</id><snippet>map(func, itertools.repeat(5), [1,2,3])</snippet></ROW><ROW><id>20653179</id><snippet>map</snippet></ROW><ROW><id>20653179</id><snippet>list</snippet></ROW><ROW><id>20653179</id><snippet>map</snippet></ROW><ROW><id>20653179</id><snippet>zip</snippet></ROW><ROW><id>20653179</id><snippet>map</snippet></ROW><ROW><id>20653179</id><snippet>list(itertools.starmap(function, itertools.zip_longest(*iterables)))
</snippet></ROW><ROW><id>20653179</id><snippet>map</snippet></ROW><ROW><id>20653179</id><snippet>map</snippet></ROW><ROW><id>20653179</id><snippet>map</snippet></ROW><ROW><id>20653179</id><snippet>map</snippet></ROW><ROW><id>20653179</id><snippet>filter</snippet></ROW><ROW><id>20653179</id><snippet>reduce</snippet></ROW><ROW><id>20653204</id><snippet>for i in range (0,1000):
   if data['statuses'][i][u'lang']==u'en':
      print data['statuses'][i]['text']
      print '\n'
</snippet></ROW><ROW><id>20653210</id><snippet>p = re.compile(r'"(http.*?)"')
        urls = p.findall(xmldata)
        for url in urls:
            xmldata_encoded = str.replace(xmldata_encoded, url, urllib.quote(url), 1)
</snippet></ROW><ROW><id>20653966</id><snippet>data = [
    {
        word
        for sentence in sentences
            if special_word in sentence
                for word in sentence
    }
    for special_word in special_words
]
</snippet></ROW><ROW><id>20654316</id><snippet>Preferences</snippet></ROW><ROW><id>20654316</id><snippet>Plugins</snippet></ROW><ROW><id>20654320</id><snippet>sys.exit(1)</snippet></ROW><ROW><id>20654320</id><snippet>sys.exit(1)</snippet></ROW><ROW><id>20654320</id><snippet>class MainWindow(wx.Frame):
    def __init__(self, title):
        wx.Frame.__init__(self, None, title=title, pos=(150,150), size=(350,200))
        self.Bind(wx.EVT_CLOSE, self.OnClose)

    def OnClose(self, event):
        self.Destroy() # or simply do sys.exit(1) here
if __name__ == "__main__":
    app = wx.App(False)
    frame = MainWindow("MyApp")
    frame.Show()
    app.MainLoop()
sys.exit(1)
</snippet></ROW><ROW><id>20654992</id><snippet>def add_after_every_n(iterator, item_to_add='\n', after_every=3):
    for i, element in enumerate(iterator, 1):  # i counts from 1
         yield element
         if i % after_every == 0:
            yield item_to_add

pairs = [[1,2] for i in range(10)]
pairs = [str(p) + ', ' for p in pairs]
pairs_string = ''.join(add_after_every_n(pairs))
pairs_string = pairs_string[:-2]  # remove last ', '
</snippet></ROW><ROW><id>20655218</id><snippet>&gt;&gt;&gt; " ".join("ab" + "d"*i + "c" for i in range(1, 5))
'abdc abddc abdddc abddddc'
</snippet></ROW><ROW><id>20655299</id><snippet>argsort</snippet></ROW><ROW><id>20655299</id><snippet>import matplotlib.pyplot as plt
import numpy as np

desc_x =[4000,3000,2000,2500,2750,2250,2300,2400,2450,2350]
rmse_desc = [.31703 , .31701, .31707, .31700, .31713, .31698, .31697, .31688, .31697, .31699]

order = np.argsort(desc_x)
xs = np.array(desc_x)[order]
ys = np.array(rmse_desc)[order]

fig = plt.figure()
ax = plt.subplot(111)

fig.suptitle('title')
plt.xlabel('x')
plt.ylabel('y')

ax.plot(xs, ys, 'b', label='desc' )
ax.legend()
plt.show()
</snippet></ROW><ROW><id>20655543</id><snippet>'ℕℤℚℝℂ'</snippet></ROW><ROW><id>20655543</id><snippet>for data in test_cases :
    if isinstance(data, bytes):
        data = data.decode('utf-8')
    print FORMAT % (data, len(data), type(data), repr(data))
</snippet></ROW><ROW><id>20655543</id><snippet>unicode</snippet></ROW><ROW><id>20655639</id><snippet>mssql</snippet></ROW><ROW><id>20655639</id><snippet>mssql+pyodbc</snippet></ROW><ROW><id>20655950</id><snippet>canopy_cli.exe</snippet></ROW><ROW><id>20656150</id><snippet>import pandas as pd
ts = df.Week
for week in range(len(ts) - 1):
    ts = ts.drop(ts.idxmin())
    ts.index = pd.Index(range(len(ts)))
    ts.name = '%s_Week' % week
    df = df.merge(pd.DataFrame(ts), left_index=True,right_index=True, how='outer')
</snippet></ROW><ROW><id>20656382</id><snippet>import mechanize        

def gmaillogin():
    browser = mechanize.Browser(factory=mechanize.RobustFactory())
    browser.set_handle_robots(False)
    r = browser.open("https://accounts.google.com/ServiceLogin?service=mail&amp;passive=true&amp;rm=false&amp;continue=http://mail.google.com/mail/&amp;scc=1&amp;ltmpl=default&amp;ltmplcache=2&amp;emr=1") 
    browser.select_form(nr=0)               
    browser.form["Email"] = "emailid"
    browser.form["Passwd"] = "password"    
    browser.submit()                        

    html = browser.response().readlines()    

    print browser.response().read()         




if __name__ == "__main__":
    gmaillogin()
</snippet></ROW><ROW><id>20656502</id><snippet>row</snippet></ROW><ROW><id>20656502</id><snippet>import numpy as np

def replaced(row, a, b):
    row_order = row.argsort()
    a_order = a.argsort()

    sorted_row = row[row_order]
    sorted_a = a[a_order]
    sorted_b = b[a_order]

    sorted_row[np.in1d(sorted_row, sorted_a)] = sorted_b

    # return results in original order
    return sorted_row[row_order.argsort()]

a = np.array([1, 5])
b = np.array([10, 550])

row = np.array([1,2,3,4,5])
print replaced(row, a, b)

row = np.array([5,4,3,2,1])
print replaced(row, a, b)

row = np.array([4, 5, 1, 3, 2])
print replaced(row, a, b)
</snippet></ROW><ROW><id>20656502</id><snippet>&gt;&gt;&gt; row = np.array([1,2,3,4,5])
&gt;&gt;&gt; print replaced(row, a, b)
[ 10   2   3   4 550]
&gt;&gt;&gt; 
&gt;&gt;&gt; row = np.array([5,4,3,2,1])
&gt;&gt;&gt; print replaced(row, a, b)
[550   4   3   2  10]
&gt;&gt;&gt; 
&gt;&gt;&gt; row = np.array([4, 5, 1, 3, 2])
&gt;&gt;&gt; print replaced(row, a, b)
[  4 550  10   3   2]
</snippet></ROW><ROW><id>20656502</id><snippet>in1d</snippet></ROW><ROW><id>20656502</id><snippet>row</snippet></ROW><ROW><id>20656502</id><snippet>row</snippet></ROW><ROW><id>20656502</id><snippet>a</snippet></ROW><ROW><id>20656502</id><snippet>&gt;&gt;&gt; import numpy as np
&gt;&gt;&gt; row = np.array([1,2,3,4,5])
&gt;&gt;&gt; a = np.array([1, 5])
&gt;&gt;&gt; b = np.array([10, 550])
&gt;&gt;&gt; np.in1d(row, a)
array([ True, False, False, False,  True], dtype=bool)
&gt;&gt;&gt; row[np.in1d(row, a)] = b
&gt;&gt;&gt; row
array([ 10,   2,   3,   4, 550])
</snippet></ROW><ROW><id>20656502</id><snippet>a</snippet></ROW><ROW><id>20656541</id><snippet>unicode</snippet></ROW><ROW><id>20656541</id><snippet>string.decode</snippet></ROW><ROW><id>20656541</id><snippet>unicode</snippet></ROW><ROW><id>20656541</id><snippet>ValueError</snippet></ROW><ROW><id>20656541</id><snippet>UnicodeError</snippet></ROW><ROW><id>20656541</id><snippet>unicode</snippet></ROW><ROW><id>20656541</id><snippet>string.decode</snippet></ROW><ROW><id>20656813</id><snippet>str.decode</snippet></ROW><ROW><id>20656813</id><snippet>u</snippet></ROW><ROW><id>20656813</id><snippet>encode</snippet></ROW><ROW><id>20656813</id><snippet>s = '\x80'
print s.decode('cp1251').encode(platform_encoding)
</snippet></ROW><ROW><id>20656813</id><snippet>'cp1251'</snippet></ROW><ROW><id>20656813</id><snippet>platform_encoding</snippet></ROW><ROW><id>20656813</id><snippet>set fileencoding=cp1252</snippet></ROW><ROW><id>20656813</id><snippet>str = '\x80'</snippet></ROW><ROW><id>20656813</id><snippet>str.decode</snippet></ROW><ROW><id>20656813</id><snippet>\x80</snippet></ROW><ROW><id>20656813</id><snippet>\u0080</snippet></ROW><ROW><id>20657376</id><snippet>a = [opt1, opt2, opt3, opt4, opt5]

data_clients = []
   for j in a:
      if j is not None:
         user, db = j.split("/") 
         db = country_assoc(int(db))
         client = Client(None, user, db)
         data_clients.append(client.get_user()) 
</snippet></ROW><ROW><id>20657503</id><snippet>"Function1 aug1 aug2 aug3"</snippet></ROW><ROW><id>20657503</id><snippet>"Funtion2 aug1 aug2"</snippet></ROW><ROW><id>20657503</id><snippet>conductor()</snippet></ROW><ROW><id>20657503</id><snippet>conductor()</snippet></ROW><ROW><id>20657503</id><snippet>def run_listbox():
    to_do_list = #get the list of strings
    for handle_string in to_do_list:
        #Let's say you got 
        #handle_string = "Predfined_function1 value1 value2" 
        #by here
        handle = handle_string.split(" ")
        #Split the string by space, so you got 
        #handle = ["Predfined_function1", "value1", "value2"] 
        #by here
        if handle[0] == "Predfined_function1":
            Predfined_function1(handle[1], handle[2]) #Call Predfined_function1(value1, value2)
        elif handle[0] == "Predfined_function2":
            Predfined_function2(handle[1], handle[2])
        #elif ...
        #...
        #elif ...
        #...
        #elif ...
        #...
</snippet></ROW><ROW><id>20657592</id><snippet>hist</snippet></ROW><ROW><id>20657592</id><snippet>s = pd.Series([1,2,3,2,2,3,5,2,3,2,np.nan])
fig, ax = plt.subplots()
ax.hist(s, alpha=0.9, color='blue')
</snippet></ROW><ROW><id>20657592</id><snippet>AttributeError: max must be larger than min in range parameter.</snippet></ROW><ROW><id>20657592</id><snippet>ax.hist(s.dropna(), alpha=0.9, color='blue')
</snippet></ROW><ROW><id>20657592</id><snippet>hist</snippet></ROW><ROW><id>20657592</id><snippet>axes[0]</snippet></ROW><ROW><id>20657592</id><snippet>ax</snippet></ROW><ROW><id>20657592</id><snippet>dfj2_MARKET1['VSPD1_perc'].hist(ax=axes[0], alpha=0.9, color='blue')
</snippet></ROW><ROW><id>20657898</id><snippet>.eps</snippet></ROW><ROW><id>20657898</id><snippet>ps2pdf</snippet></ROW><ROW><id>20657898</id><snippet>-dEPSCrop</snippet></ROW><ROW><id>20657898</id><snippet>ps2pdf -dEPSCrop input.eps output.pdf. 
</snippet></ROW><ROW><id>20657898</id><snippet>convert output.pdf output.png
</snippet></ROW><ROW><id>20658052</id><snippet>import pandas as pd
from StringIO import StringIO
s = """sample  category_a  category_b  value
1       A           Z           3.92
2       A           Y           12.43
3       B           Z           5.87
4       B           Y           6.71"""

df = pd.read_csv(StringIO(s), sep="\s+", index_col=0)
</snippet></ROW><ROW><id>20658052</id><snippet>In [7]: df
Out[7]:
       category_a category_b  value
sample
1               A          Z   3.92
2               A          Y  12.43
3               B          Z   5.87
4               B          Y   6.71
</snippet></ROW><ROW><id>20658052</id><snippet>In [5]: df.groupby('category_a').mean()
Out[5]:
            value
category_a
A           8.175
B           6.290
</snippet></ROW><ROW><id>20658052</id><snippet>In [6]: df.groupby(['category_a', 'category_b']).mean()
Out[6]:
                       value
category_a category_b
A          Y           12.43
           Z            3.92
B          Y            6.71
           Z            5.87
</snippet></ROW><ROW><id>20658220</id><snippet>data</snippet></ROW><ROW><id>20658220</id><snippet>[["0","1"],["08:18","09:16"]]</snippet></ROW><ROW><id>20658220</id><snippet>def time_to_num(time_str):
    time_str = time_str.split(':')
        #check if time_str is valid here, then:
    num = 0
    num = int(time_str[0])
    if len(time_str) == 2:
        num += int(time_str[1])/60.0
    return num
</snippet></ROW><ROW><id>20658220</id><snippet>x1 = [time_to_num(item[1]) for item in data]</snippet></ROW><ROW><id>20658220</id><snippet>#fig = matplotlib.plot...
fig.set_xticks([0, 0.25, 0.5, 0.75, 1, 1.25])
fig.set_xticklabels(['0:00', '0:15', '0:30', '0:45', '1:00', '1:15'])
</snippet></ROW><ROW><id>20658354</id><snippet>boto.set_stream_logger('boto')
</snippet></ROW><ROW><id>20658354</id><snippet>import boto
conn = boto.connect_s3("id","secret")
bucket = conn.get_bucket('mybucket', validate=False)
bucket.get_key('Development/two/three.png')
# &lt;Key: mybucket,Development/two/three.png&gt;
</snippet></ROW><ROW><id>20658354</id><snippet>list = bucket.list("Development/",delimiter="/")
for key in list:
    print key.name
</snippet></ROW><ROW><id>20658574</id><snippet>&gt;&gt;&gt; bool("False")
True
&gt;&gt;&gt; bool("")
False

&gt;&gt;&gt; print(json.dumps(u'\u0411', ensure_ascii="False"))
"\u0411"
&gt;&gt;&gt; print(json.dumps(u'\u0411', ensure_ascii=False))
"Б"
</snippet></ROW><ROW><id>20658574</id><snippet>"False"</snippet></ROW><ROW><id>20658574</id><snippet>False</snippet></ROW><ROW><id>20658574</id><snippet>return HttpResponse(json.dumps(dataset, ensure_ascii="False"), content_type="application/json; encoding=utf-8")
#                                                    ^^^^^^^ to False
</snippet></ROW><ROW><id>20658781</id><snippet>itertools.starmap()</snippet></ROW><ROW><id>20658781</id><snippet>from itertools import starmap

for func_tups in zip(*starmap(func, pairs)):
    # warning, infinite loop unless you have a break condition
</snippet></ROW><ROW><id>20658781</id><snippet>starmap()</snippet></ROW><ROW><id>20658781</id><snippet>pairs</snippet></ROW><ROW><id>20658781</id><snippet>func</snippet></ROW><ROW><id>20658781</id><snippet>zip()</snippet></ROW><ROW><id>20658781</id><snippet>map()</snippet></ROW><ROW><id>20658781</id><snippet>zip()</snippet></ROW><ROW><id>20658781</id><snippet>itertools.izip()</snippet></ROW><ROW><id>20658781</id><snippet>func()</snippet></ROW><ROW><id>20658781</id><snippet>from itertools import starmap, izip

for func_tups in izip(*starmap(func, pairs)):
    # warning, infinite loop unless you have a break condition
</snippet></ROW><ROW><id>20658953</id><snippet>__contains__</snippet></ROW><ROW><id>20658953</id><snippet>__contains__()</snippet></ROW><ROW><id>20658953</id><snippet>x in y</snippet></ROW><ROW><id>20658953</id><snippet>y.__contains__(x)</snippet></ROW><ROW><id>20658953</id><snippet>__contains__()</snippet></ROW><ROW><id>20658953</id><snippet>__iter__()</snippet></ROW><ROW><id>20658953</id><snippet>x in y</snippet></ROW><ROW><id>20658953</id><snippet>z</snippet></ROW><ROW><id>20658953</id><snippet>x == z</snippet></ROW><ROW><id>20658953</id><snippet>y</snippet></ROW><ROW><id>20658953</id><snippet>__getitem__()</snippet></ROW><ROW><id>20658953</id><snippet>x in y</snippet></ROW><ROW><id>20658953</id><snippet>i</snippet></ROW><ROW><id>20658953</id><snippet>x == y[i]</snippet></ROW><ROW><id>20658953</id><snippet>IndexError</snippet></ROW><ROW><id>20659002</id><snippet>import zmq
import time

ctx = zmq.Context()
s = ctx.socket(zmq.PUB)
s.bind("tcp://*:5567")

time.sleep(1)
for i in range(100):
    s.send("test")
</snippet></ROW><ROW><id>20659547</id><snippet>string.split('\\')
</snippet></ROW><ROW><id>20659547</id><snippet>&gt;&gt;&gt; r'D123D\user.name'.split('\\')
['D123D', 'user.name']
</snippet></ROW><ROW><id>20659555</id><snippet>myDict[i] = lambda i=i: helloName(i)
</snippet></ROW><ROW><id>20659555</id><snippet>here</snippet></ROW><ROW><id>20659555</id><snippet>here</snippet></ROW><ROW><id>20659555</id><snippet>here</snippet></ROW><ROW><id>20659555</id><snippet>here</snippet></ROW><ROW><id>20659555</id><snippet>here</snippet></ROW><ROW><id>20659557</id><snippet>(?! ... )</snippet></ROW><ROW><id>20659557</id><snippet>”(?!&lt;)
</snippet></ROW><ROW><id>20659557</id><snippet>”</snippet></ROW><ROW><id>20659557</id><snippet>&lt;</snippet></ROW><ROW><id>20659557</id><snippet>”(?![&lt; ])
</snippet></ROW><ROW><id>20659557</id><snippet>”</snippet></ROW><ROW><id>20659557</id><snippet>&lt;</snippet></ROW><ROW><id>20659581</id><snippet>cd ~/.ssh; cat id_rsa.pub &gt;&gt; authorized_keys
</snippet></ROW><ROW><id>20659581</id><snippet>ansible localhost -m linode  -a 'state=stopped ...'
</snippet></ROW><ROW><id>20659646</id><snippet>scipy.ndimage.correlate1d</snippet></ROW><ROW><id>20659646</id><snippet>scipy.signal</snippet></ROW><ROW><id>20659646</id><snippet>def correlate1(a, b):
    c = np.empty_like(a)
    for j in range(len(a)):
        c[j] = np.correlate(a[j], b[j], 'same')
    return c

def correlate2(a, b):
    n = a.shape[-1]
    a_fft = np.fft.fft(a, n=2*n)
    b_fft = np.fft.fft(b, n=2*n)
    cc = np.fft.ifft(a_fft * b_fft.conj()).real
    return np.concatenate((cc[..., -n//2:], cc[..., :(n-1)//2 + 1]), axis=-1)
</snippet></ROW><ROW><id>20659646</id><snippet>In [11]: a = np.random.rand(6000, 50)
    ...: b = np.random.rand(6000, 50)
    ...: 

In [12]: np.allclose(correlate1(a, b), correlate2(a, b))
Out[12]: True

In [13]: %timeit correlate1(a, b)
10 loops, best of 3: 37.5 ms per loop

In [14]: %timeit correlate2(a, b)
10 loops, best of 3: 71.8 ms per loop
</snippet></ROW><ROW><id>20659646</id><snippet>In [15]: a = np.random.rand(50, 6000)
    ...: b = np.random.rand(50, 6000)
    ...: 

In [16]: %timeit correlate1(a, b)
1 loops, best of 3: 516 ms per loop

In [17]: %timeit correlate2(a, b)
10 loops, best of 3: 89.2 ms per loop
</snippet></ROW><ROW><id>20659727</id><snippet>guess = 'o'
word, disp = ['n', 'o', 'o', 'n'], ['-', '-', '-', '-']
print [guess if i == guess else j for i, j in zip(word, disp)]
</snippet></ROW><ROW><id>20659727</id><snippet>['-', 'o', 'o', '-']
</snippet></ROW><ROW><id>20660170</id><snippet>requests</snippet></ROW><ROW><id>20660170</id><snippet>requests</snippet></ROW><ROW><id>20660170</id><snippet>urllib3</snippet></ROW><ROW><id>20660170</id><snippet>urllib3</snippet></ROW><ROW><id>20660170</id><snippet>httplib</snippet></ROW><ROW><id>20660170</id><snippet>-&gt; r= requests.get("http://google.com")
  /usr/local/lib/python2.7/dist-packages/requests/api.py(55)get()
-&gt; return request('get', url, **kwargs)
  /usr/local/lib/python2.7/dist-packages/requests/api.py(44)request()
-&gt; return session.request(method=method, url=url, **kwargs)
  /usr/local/lib/python2.7/dist-packages/requests/sessions.py(382)request()
-&gt; resp = self.send(prep, **send_kwargs)
  /usr/local/lib/python2.7/dist-packages/requests/sessions.py(485)send()
-&gt; r = adapter.send(request, **kwargs)
  /usr/local/lib/python2.7/dist-packages/requests/adapters.py(324)send()
-&gt; timeout=timeout
  /usr/local/lib/python2.7/dist-packages/requests/packages/urllib3/connectionpool.py(478)urlopen()
-&gt; body=body, headers=headers)
  /usr/local/lib/python2.7/dist-packages/requests/packages/urllib3/connectionpool.py(285)_make_request()
-&gt; conn.request(method, url, **httplib_request_kw)
  /usr/lib/python2.7/httplib.py(958)request()
-&gt; self._send_request(method, url, body, headers)
</snippet></ROW><ROW><id>20660170</id><snippet>urllib</snippet></ROW><ROW><id>20660170</id><snippet>HTTPConnection._send_request</snippet></ROW><ROW><id>20660170</id><snippet>HTTPConnection._send_output</snippet></ROW><ROW><id>20660170</id><snippet>HTTPConnection.send</snippet></ROW><ROW><id>20660170</id><snippet>send</snippet></ROW><ROW><id>20660170</id><snippet>httplib</snippet></ROW><ROW><id>20660170</id><snippet>httplib</snippet></ROW><ROW><id>20660170</id><snippet>httplib</snippet></ROW><ROW><id>20660170</id><snippet>import requests
import httplib

def patch_send():
    old_send= httplib.HTTPConnection.send
    def new_send( self, data ):
        print data
        return old_send(self, data) #return is not necessary, but never hurts, in case the library is changed
    httplib.HTTPConnection.send= new_send

patch_send()
requests.get("http://www.python.org")
</snippet></ROW><ROW><id>20660170</id><snippet>GET / HTTP/1.1
Host: www.python.org
Accept-Encoding: gzip, deflate, compress
Accept: */*
User-Agent: python-requests/2.1.0 CPython/2.7.3 Linux/3.2.0-23-generic-pae
</snippet></ROW><ROW><id>20660484</id><snippet>file.readline()</snippet></ROW><ROW><id>20660484</id><snippet>next()</snippet></ROW><ROW><id>20660484</id><snippet>csv.reader()</snippet></ROW><ROW><id>20660484</id><snippet>csv</snippet></ROW><ROW><id>20660484</id><snippet>import csv

def read_csv(file_path, has_header=True):
    with open(file_path, 'rb') as f:
        reader = csv.reader(f)
        if has_header: next(reader, None)
        return list(reader)
</snippet></ROW><ROW><id>20660484</id><snippet>zip()</snippet></ROW><ROW><id>20660484</id><snippet>ret = read_csv(fileName)
target, train = zip(*ret)[1:3]  # just the 2nd and 3rd columns
</snippet></ROW><ROW><id>20660484</id><snippet>zip()</snippet></ROW><ROW><id>20660484</id><snippet>itertools.izip_longest()</snippet></ROW><ROW><id>20660484</id><snippet>itertools.zip_longest()</snippet></ROW><ROW><id>20660484</id><snippet>from itertools import izip_longest

ret = read_csv(fileName)
target, train = izip_longest(*ret)[1:3]  # just the 2nd and 3rd columns
</snippet></ROW><ROW><id>20660484</id><snippet>None</snippet></ROW><ROW><id>20660484</id><snippet>fillvalue</snippet></ROW><ROW><id>20660484</id><snippet>izip_longest()</snippet></ROW><ROW><id>20660484</id><snippet>target, train = izip_longest(*ret, fillvalue=0)[1:3]  # just the 2nd and 3rd columns
</snippet></ROW><ROW><id>20660740</id><snippet>addon-sdk-1.15.zip</snippet></ROW><ROW><id>20660764</id><snippet>scipy.spatial.KDTree</snippet></ROW><ROW><id>20660764</id><snippet>scipy.spatial.KDTree</snippet></ROW><ROW><id>20660764</id><snippet>scipy.spatial.KDTree</snippet></ROW><ROW><id>20660764</id><snippet>scipy.spatial.KDTree.query_ball_point</snippet></ROW><ROW><id>20660764</id><snippet>geodetic2ecef</snippet></ROW><ROW><id>20660764</id><snippet>from math import radians, cos, sin, sqrt

# Constants defined by the World Geodetic System 1984 (WGS84)
A = 6378.137
B = 6356.7523142
ESQ = 6.69437999014 * 0.001

def geodetic2ecef(lat, lon, alt=0):
    """Convert geodetic coordinates to ECEF."""
    lat, lon = radians(lat), radians(lon)
    xi = sqrt(1 - ESQ * sin(lat))
    x = (A / xi + alt) * cos(lat) * cos(lon)
    y = (A / xi + alt) * cos(lat) * sin(lon)
    z = (A / xi * (1 - ESQ) + alt) * sin(lat)
    return x, y, z

def euclidean_distance(distance):
    """Return the approximate Euclidean distance corresponding to the
    given great circle distance (in km).

    """
    return 2 * A * sin(distance / (2 * B))
</snippet></ROW><ROW><id>20660764</id><snippet>&gt;&gt;&gt; from random import uniform
&gt;&gt;&gt; cities = [(uniform(-90, 90), uniform(0, 360)) for _ in range(50000)]
&gt;&gt;&gt; ecef_cities = [geodetic2ecef(lat, lon) for lat, lon in cities]
</snippet></ROW><ROW><id>20660764</id><snippet>scipy.spatial.KDTree</snippet></ROW><ROW><id>20660764</id><snippet>&gt;&gt;&gt; import numpy
&gt;&gt;&gt; from scipy.spatial import KDTree
&gt;&gt;&gt; tree = KDTree(numpy.array(ecef_cities))
</snippet></ROW><ROW><id>20660764</id><snippet>&gt;&gt;&gt; london = geodetic2ecef(51, 0)
&gt;&gt;&gt; tree.query_ball_point([london], r=euclidean_distance(100))
array([[37810, 15755, 16276]], dtype=object)
</snippet></ROW><ROW><id>20660764</id><snippet>r</snippet></ROW><ROW><id>20660764</id><snippet>KDTree</snippet></ROW><ROW><id>20660764</id><snippet>&gt;&gt;&gt; from pprint import pprint
&gt;&gt;&gt; pprint([cities[i] for i in [37810, 15755, 16276]])
[(51.7186871990946, 359.8043453670437),
 (50.82734317063884, 1.1422052710187103),
 (50.95466110717763, 0.8956257749604779)]
</snippet></ROW><ROW><id>20660764</id><snippet>&gt;&gt;&gt; from timeit import timeit
&gt;&gt;&gt; timeit(lambda:tree.query_ball_point(ecef_cities[:1000], r=euclidean_distance(30)), number=1)
5.013611573027447
</snippet></ROW><ROW><id>20660764</id><snippet>euclidean_distance</snippet></ROW><ROW><id>20660854</id><snippet>match</snippet></ROW><ROW><id>20660854</id><snippet>a</snippet></ROW><ROW><id>20660854</id><snippet>expression = '^\w{4,32}$'
</snippet></ROW><ROW><id>20660854</id><snippet>len(output.string)</snippet></ROW><ROW><id>20660854</id><snippet>m.group(0)</snippet></ROW><ROW><id>20661135</id><snippet>QThread</snippet></ROW><ROW><id>20661135</id><snippet>#Inherit from QThread
class Worker(QtCore.QThread):

    #This is the signal that will be emitted during the processing.
    #By including int as an argument, it lets the signal know to expect
    #an integer argument when emitting.
    updateProgress = QtCore.Signal(int)

    #You can do any extra things in this init you need, but for this example
    #nothing else needs to be done expect call the super's init
    def __init__(self):
        QtCore.QThread.__init__(self)

    #A QThread is run by calling it's start() function, which calls this run()
    #function in it's own "thread". 
    def run(self):
        #Notice this is the same thing you were doing in your progress() function
        for i in range(1, 101):
            #Emit the signal so it can be received on the UI side.
            self.updateProgress.emit(i)
            time.sleep(0.1)
</snippet></ROW><ROW><id>20661135</id><snippet>Ui_Dialog</snippet></ROW><ROW><id>20661135</id><snippet>def setProgress(self, progress):
    self.progressBar.setValue(progress)
</snippet></ROW><ROW><id>20661135</id><snippet>progress()</snippet></ROW><ROW><id>20661135</id><snippet>retranslateUi()</snippet></ROW><ROW><id>20661135</id><snippet>self.pushButton.clicked.connect(self.progress)
</snippet></ROW><ROW><id>20661135</id><snippet>self.pushButton.clicked.connect(self.worker.start)
</snippet></ROW><ROW><id>20661135</id><snippet>setupUI()</snippet></ROW><ROW><id>20661135</id><snippet>setProgress()</snippet></ROW><ROW><id>20661135</id><snippet>self.retranslateUi(Dialog)
</snippet></ROW><ROW><id>20661135</id><snippet>self.worker = Worker()
self.worker.updateProgress.connect(self.setProgress)
</snippet></ROW><ROW><id>20661135</id><snippet>from PySide import QtCore, QtGui
import time


class Ui_Dialog(object):
    def setupUi(self, Dialog):
        Dialog.setObjectName("Dialog")
        Dialog.resize(400, 133)
        self.progressBar = QtGui.QProgressBar(Dialog)
        self.progressBar.setGeometry(QtCore.QRect(20, 10, 361, 23))
        self.progressBar.setProperty("value", 24)
        self.progressBar.setObjectName("progressBar")
        self.pushButton = QtGui.QPushButton(Dialog)
        self.pushButton.setGeometry(QtCore.QRect(20, 40, 361, 61))
        self.pushButton.setObjectName("pushButton")

        self.worker = Worker()
        self.worker.updateProgress.connect(self.setProgress)

        self.retranslateUi(Dialog)
        QtCore.QMetaObject.connectSlotsByName(Dialog)

        self.progressBar.minimum = 1
        self.progressBar.maximum = 100

    def retranslateUi(self, Dialog):
        Dialog.setWindowTitle(QtGui.QApplication.translate("Dialog", "Dialog", None, QtGui.QApplication.UnicodeUTF8))
        self.pushButton.setText(QtGui.QApplication.translate("Dialog", "PushButton", None, QtGui.QApplication.UnicodeUTF8))
        self.progressBar.setValue(0)
        self.pushButton.clicked.connect(self.worker.start)

    def setProgress(self, progress):
        self.progressBar.setValue(progress)

#Inherit from QThread
class Worker(QtCore.QThread):

    #This is the signal that will be emitted during the processing.
    #By including int as an argument, it lets the signal know to expect
    #an integer argument when emitting.
    updateProgress = QtCore.Signal(int)

    #You can do any extra things in this init you need, but for this example
    #nothing else needs to be done expect call the super's init
    def __init__(self):
        QtCore.QThread.__init__(self)

    #A QThread is run by calling it's start() function, which calls this run()
    #function in it's own "thread". 
    def run(self):
        #Notice this is the same thing you were doing in your progress() function
        for i in range(1, 101):
            #Emit the signal so it can be received on the UI side.
            self.updateProgress.emit(i)
            time.sleep(0.1)

if __name__ == "__main__":
    import sys
    app = QtGui.QApplication(sys.argv)
    Dialog = QtGui.QDialog()
    ui = Ui_Dialog()
    ui.setupUi(Dialog)
    Dialog.show()
    sys.exit(app.exec_())
</snippet></ROW><ROW><id>20661498</id><snippet>__init__</snippet></ROW><ROW><id>20661498</id><snippet>__init__</snippet></ROW><ROW><id>20661523</id><snippet>import re

string = """736.199070736:  LOG_MOD_L0_RECEIVE_TXBRP_CONTROL(0, 
 0x0075007f, 
 0x005500dd,  
 0x000a00f5)"""

result = re.search(r'\(.*\)', string) # matches anything between parenthesis

result.group()

'(0, 0x0075007f, 0x005500dd,  0x000a00f5)'
</snippet></ROW><ROW><id>20661525</id><snippet>global px,py</snippet></ROW><ROW><id>20661734</id><snippet>        #select item nr 3
        index=2
        win32gui.SendMessage(self.dialogbox_hwnd,win32con.CB_SETCURSEL,index,0)
</snippet></ROW><ROW><id>20661734</id><snippet>        #select item nr 3
        index=2
        win32gui.SendMessage(self.dialogbox_hwnd,win32con.CB_SETCURSEL,index,0)

        #trigger event
        win32gui.SendMessage(self.dialogbox_hwnd, win32con.WM_LBUTTONDOWN, 0, 0)
        win32gui.SendMessage(self.dialogbox_hwnd, win32con.WM_LBUTTONUP, 0, 0)
        win32gui.SendMessage(self.dialogbox_hwnd, win32con.WM_KEYDOWN, win32con.VK_RETURN, 0)
        win32gui.SendMessage(self.dialogbox_hwnd, win32con.WM_KEYUP, win32con.VK_RETURN, 0)
        win32gui.SendMessage(self.dialogbox_hwnd, win32con.CBN_SELCHANGE)
        win32gui.SendMessage(self.dialogbox_hwnd, win32con.CBN_SELENDOK)
</snippet></ROW><ROW><id>20661798</id><snippet>data</snippet></ROW><ROW><id>20661798</id><snippet>&gt;&gt;&gt; selected = np.where((data &lt; 4) &amp; (data &gt; 1), data, np.nan)
&gt;&gt;&gt; selected
array([ nan,   2.,   3.,  nan,  nan])
</snippet></ROW><ROW><id>20661798</id><snippet>(data &lt; 4) &amp; (data &gt; 1)</snippet></ROW><ROW><id>20661798</id><snippet>data</snippet></ROW><ROW><id>20661798</id><snippet>&lt; 4</snippet></ROW><ROW><id>20661798</id><snippet>&gt;1</snippet></ROW><ROW><id>20662005</id><snippet># headings should be simple list
headings=['Jan to Feb', 'Feb to Mar', 'Mar to Apr', 'Apr to May', 'May to June',
          'Jun to July', 'July to Aug', 'Aug to Sep', 'Sep to Oct', 'Oct to Nov']
</snippet></ROW><ROW><id>20662005</id><snippet>align='center'</snippet></ROW><ROW><id>20662005</id><snippet>bar1 = plot.bar(ind,joint[0],facecolor='#777777', align='center')
</snippet></ROW><ROW><id>20662005</id><snippet>ax.xaxis.set_ticks(ind)
ax.xaxis.set_ticklabels(h)

ax.set_xlim(ind[0]-.5,ind[-1]+.5)  # set width of axis
fig.canvas.draw()  # don't forget to draw changes
</snippet></ROW><ROW><id>20662196</id><snippet>print</snippet></ROW><ROW><id>20662196</id><snippet>sys.stdout</snippet></ROW><ROW><id>20662196</id><snippet>ASCII</snippet></ROW><ROW><id>20662196</id><snippet>print</snippet></ROW><ROW><id>20662196</id><snippet>sys.stdout</snippet></ROW><ROW><id>20662196</id><snippet>.encoding</snippet></ROW><ROW><id>20662196</id><snippet>from contextlib import contextmanager
from io import BytesIO
import sys

@contextmanager
def capture_stdout_unicode(codec='UTF-8'):
    output = BytesIO()
    output.encoding = codec
    orig, sys.stdout = sys.stdout, output
    try:
        yield output
    finally:
        sys.stdout = orig
</snippet></ROW><ROW><id>20662196</id><snippet>with capture_stdout_unicode() as out:
    api_call_that_prints()

logger.info(out.getvalue())
</snippet></ROW><ROW><id>20662326</id><snippet>for x in h:
    print x
</snippet></ROW><ROW><id>20662326</id><snippet>&lt;generator object &lt;genexpr&gt; at 0x02A4FB48&gt;
</snippet></ROW><ROW><id>20662397</id><snippet>class MyMeta(type):
    def __new__(mcls, name, bases, members):
        cls = type.__new__(mcls, name, bases, members)
        for m in members.values():
            if isinstance(m, SomeAttribute):
                m.bound_cls = cls
        return cls
</snippet></ROW><ROW><id>20662397</id><snippet>class SomeClass(object):
    __metaclass__ = MyMeta

    attribute = SomeAttribute()
</snippet></ROW><ROW><id>20662399</id><snippet>import csv

container = [[['CD', 'CC', 'CD'], 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],
             [['DT', 'CC', 'CD'], 0, 0, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1],
             [['EX', 'CC', 'CD'], 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
             [['JJ', 'CC', 'CD'], 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1]]

with open('out.csv', 'w') as csvfile:
    csvw = csv.writer(csvfile, delimiter=',')
    for column in zip(*[s for s in container]):
        csvw.writerow(column)
</snippet></ROW><ROW><id>20662399</id><snippet>out.csv</snippet></ROW><ROW><id>20662399</id><snippet>"['CD', 'CC', 'CD']","['DT', 'CC', 'CD']","['EX', 'CC', 'CD']","['JJ', 'CC', 'CD']"
1,0,0,0
1,0,0,0
1,1,0,1
1,0,0,0
1,1,0,1
1,0,0,0
1,1,0,1
1,1,0,1
1,1,0,0
1,1,0,1
1,1,0,1
1,1,0,1
</snippet></ROW><ROW><id>20662471</id><snippet>data = 192 * 'Q'</snippet></ROW><ROW><id>20662471</id><snippet>data = 'e283030000000000101112131415161718191a1b1c1d1e1f202122232425262728292a2b2c2d2e2f3031323334353637'.decode("hex")</snippet></ROW><ROW><id>20662546</id><snippet>def mapValues(values):
    nValues = np.asarray(values, dtype="|S8")
    mask = nValues != 'NA'
    maskedValues = [float(i.split('%')[0]) for i in nValues[mask]]
    colorMap = np.array(['#F8696B', '#F86E6C', '#F8736D', '#F8786E', '#F97E6F', '#F98370', '#F98871', '#FA8E72', '#FA9373', '#FA9874', '#FA9E75', '#FBA376', '#FBA877', '#FBAD78', '#FCB379', '#FCB87A', '#FCBD7B', '#FCC37C', '#FDC87D', '#FDCD7E', '#FDD37F', '#FED880', '#FEDD81', '#FEE382', '#FEE883', '#FCEB84', '#F6E984', '#F0E784', '#E9E583', '#E3E383', '#DCE182', '#D6E082', '#D0DE82', '#C9DC81', '#C3DA81', '#BDD881', '#B6D680', '#B0D580', '#AAD380', '#A3D17F', '#9DCF7F', '#96CD7E', '#90CB7E', '#8ACA7E', '#83C87D', '#7DC67D', '#77C47D', '#70C27C', '#6AC07C', '#63BE7B'])
    _, bins = np.histogram(maskedValues, 49)
    mapped = np.digitize(maskedValues, bins)
    nValues[mask] = colorMap[mapped - 1]
    nValues[~mask] = "NA color"
    return nValues.tolist()
</snippet></ROW><ROW><id>20662599</id><snippet>{% endif %}</snippet></ROW><ROW><id>20662599</id><snippet>if User_No_Auth_Tld &gt; 0</snippet></ROW><ROW><id>20662599</id><snippet>{% else %}</snippet></ROW><ROW><id>20662599</id><snippet>if</snippet></ROW><ROW><id>20662599</id><snippet>{% endif %}</snippet></ROW><ROW><id>20662909</id><snippet>open</snippet></ROW><ROW><id>20662909</id><snippet>with open('filename.csv') as csvfile:
    data = [(int(x), int(y)) for x, y in csv.reader(csvfile, delimiter= ',')]
</snippet></ROW><ROW><id>20662980</id><snippet>...
import cPickle

rf = RandomForestRegresor()
rf.fit(X, y)

with open('path/to/file', 'wb') as f:
    cPickle.dump(rf, f)


# in your prediction file                                                                                                                                                                                                           

with open('path/to/file', 'rb') as f:
    rf = cPickle.load(f)


preds = rf.predict(new_X)
</snippet></ROW><ROW><id>20663033</id><snippet>SPOTLIGHT = lambda: {'spotlight': []}
</snippet></ROW><ROW><id>20663033</id><snippet>SPOTLIGHT()</snippet></ROW><ROW><id>20663115</id><snippet>&gt;&gt;&gt; def findval(str):
...     val = []
...     for x in str.split(','):
...         if '-' in x:
...            lnum, rnum = x.split('-')
...            lnum, rnum = int(lnum), int(rnum)
...            val.extend(range(lnum, rnum + 1))
...         else:
...            lnum = int(x)
...            val.append(lnum)
...     return val

&gt;&gt;&gt; findval('001,008-011,020')
[1, 8, 9, 10, 11, 20]
</snippet></ROW><ROW><id>20663115</id><snippet>Working demo</snippet></ROW><ROW><id>20663286</id><snippet>In [1]: import networkx as nx

In [2]: G = nx.MultiDiGraph()

In [3]: G.add_edge(1,2,color='green')

In [4]: G.add_edge(1,2,color='red')

In [5]: G.edges(data=True)
Out[5]: [(1, 2, {'color': 'green'}), (1, 2, {'color': 'red'})]

In [6]: G.node[1]['layer1']=17

In [7]: G.node[1]['layer2']=42

In [8]: G.nodes(data=True)
Out[8]: [(1, {'layer1': 17, 'layer2': 42}), (2, {})]
</snippet></ROW><ROW><id>20663286</id><snippet>In [9]: nx.get_node_attributes(G,'layer1')
Out[9]: {1: 17}
</snippet></ROW><ROW><id>20663324</id><snippet>SAFEARRAY</snippet></ROW><ROW><id>20663324</id><snippet>SAFEARRAY</snippet></ROW><ROW><id>20663324</id><snippet>*ppServerId = (long*) CoTaskMemAlloc((*pSize) * sizeof(long));
</snippet></ROW><ROW><id>20663324</id><snippet>CoTaskMemAlloc</snippet></ROW><ROW><id>20663324</id><snippet>CoTaskMemFree</snippet></ROW><ROW><id>20663324</id><snippet>CoTaskMemAlloc</snippet></ROW><ROW><id>20663324</id><snippet>c_wchar_p</snippet></ROW><ROW><id>20663324</id><snippet>def make_com_array(item_type, item_count):
    array_mem = windll.ole32.CoTaskMemAlloc(sizeof(item_type) * item_count)
    return cast(array_mem, POINTER(item_type))

def make_com_string(text, typ=c_wchar_p):
    text = unicode(text)
    size = (len(text) + 1) * sizeof(c_wchar)
    mem = windll.ole32.CoTaskMemAlloc(size)
    ptr = cast(mem, typ)
    memmove(mem, text, size)
    return ptr

def make_com_object(object_type):
    size = sizeof(object_type)
    mem = windll.ole32.CoTaskMemAlloc(size)
    ptr = cast(mem, POINTER(object_type))
    return ptr
</snippet></ROW><ROW><id>20663324</id><snippet>ValidateItems</snippet></ROW><ROW><id>20663324</id><snippet>def ValidateItems(self, count, p_item_array, update_blob):

    validation_results = make_com_array(OpcDa.tagOPCITEMRESULT, count)
    errors = make_com_array(HRESULT, count)

    (...)
    for index (...):
        validation_results[index].hServer = server_item_handle

    return add_results, errors
</snippet></ROW><ROW><id>20663338</id><snippet>ducktyping</snippet></ROW><ROW><id>20663338</id><snippet>def MyPuppyFloat(float):
...
</snippet></ROW><ROW><id>20663338</id><snippet>emulate float type</snippet></ROW><ROW><id>20663338</id><snippet>object.__add__(self, other)
object.__sub__(self, other)
object.__mul__(self, other)
object.__floordiv__(self, other)
object.__mod__(self, other)
object.__divmod__(self, other)
object.__pow__(self, other[, modulo])
object.__lshift__(self, other)
object.__rshift__(self, other)
object.__and__(self, other)
object.__xor__(self, other)
object.__or__(self, other)

object.__div__(self, other)
object.__truediv__(self, other)
object.__radd__(self, other)
object.__rsub__(self, other)
object.__rmul__(self, other)
object.__rdiv__(self, other)
object.__rtruediv__(self, other)
object.__rfloordiv__(self, other)
object.__rmod__(self, other)
object.__rdivmod__(self, other)
object.__rpow__(self, other)
object.__rlshift__(self, other)
object.__rrshift__(self, other)
object.__rand__(self, other)
object.__rxor__(self, other)
object.__ror__(self, other)

object.__neg__(self)
object.__pos__(self)
object.__abs__(self)
object.__invert__(self)
object.__complex__(self)
object.__int__(self)
object.__long__(self)
object.__float__(self)
object.__oct__(self)
object.__hex__(self)
</snippet></ROW><ROW><id>20663506</id><snippet>@functools.wraps()</snippet></ROW><ROW><id>20663506</id><snippet>from functools import wraps

def send_timing(f):
    @wraps(f)
    def wrapper(*args, **kw):
        # probably do a little more than just proxy
        return f(*args, **kw)
    return wrapper
</snippet></ROW><ROW><id>20663506</id><snippet>unwrapped = login_user.__wrapped__
</snippet></ROW><ROW><id>20663506</id><snippet>unwrapped</snippet></ROW><ROW><id>20663506</id><snippet>login_user</snippet></ROW><ROW><id>20663566</id><snippet>errornames = {value: name for name, value in vars(atmcd).items() if name.isupper() and name.startswith('DRV_')}
</snippet></ROW><ROW><id>20663566</id><snippet>atmcd</snippet></ROW><ROW><id>20663566</id><snippet>{'20007': 'DRV_UNKNOWN_FUNCTION', '20006': 'DRV_ERROR_FILELOAD', '20005': 'DRV_ERROR_CHECK_SUM', '20004': 'DRV_ERROR_SCAN', '20003': 'DRV_VXDNOTINSTALLED', '20002': 'DRV_SUCCESS', '20001': 'DRV_ERROR_CODES'}
</snippet></ROW><ROW><id>20663566</id><snippet>if ret in errornames:
    print 'Received a {} code'.format(errornames[ret])
</snippet></ROW><ROW><id>20663658</id><snippet>from mpl_toolkits.axes_grid1 import make_axes_locatable 

ax1 = plt.subplot2grid((1,1), (0,0))
divider = make_axes_locatable(ax1) 
ax2 = divider.append_axes("bottom", size="100%", pad=0.5)
ax3 = divider.append_axes("bottom", size="100%", pad=1)
</snippet></ROW><ROW><id>20663669</id><snippet>[]</snippet></ROW><ROW><id>20663669</id><snippet>for bar in myDict.get('foo',[]):
</snippet></ROW><ROW><id>20663772</id><snippet>meta</snippet></ROW><ROW><id>20663772</id><snippet>yield Request(url, callback=self.detail, meta={'item': item})
</snippet></ROW><ROW><id>20663772</id><snippet>detail</snippet></ROW><ROW><id>20663772</id><snippet>item = response.meta['item']
</snippet></ROW><ROW><id>20664097</id><snippet>for i in range(10):
    print i
</snippet></ROW><ROW><id>20664097</id><snippet>print i</snippet></ROW><ROW><id>20664097</id><snippet>val = eval(condition, frame.f_globals, frame.f_locals)
</snippet></ROW><ROW><id>20664465</id><snippet>a = [1, 1, 2, 2, 3, 3, 4, 4, 5, 5]
b = [1, 2, 3, 4, 5]

for x in a:
    for y in b:
        if a[x] == b[y]:
            #Do stuff here
            print "found a match " + str(a[x])
        elif y == len(b) - 1:
            break
</snippet></ROW><ROW><id>20664542</id><snippet>""</snippet></ROW><ROW><id>20664542</id><snippet>Welcome to "SO" Guys
</snippet></ROW><ROW><id>20664542</id><snippet>"Welcome to "SO" Guys"
</snippet></ROW><ROW><id>20664542</id><snippet>"Welcome to "</snippet></ROW><ROW><id>20664542</id><snippet>" Guys"</snippet></ROW><ROW><id>20664542</id><snippet>SO</snippet></ROW><ROW><id>20664542</id><snippet>simplejson</snippet></ROW><ROW><id>20664542</id><snippet>"</snippet></ROW><ROW><id>20664542</id><snippet>\</snippet></ROW><ROW><id>20664542</id><snippet>data = 'Welcome to "SO" Guys'
import simplejson
print simplejson.dumps(data)
print data
</snippet></ROW><ROW><id>20664542</id><snippet>"Welcome to \"SO\" Guys"
Welcome to "SO" Guys
</snippet></ROW><ROW><id>20664542</id><snippet>simplejson</snippet></ROW><ROW><id>20664632</id><snippet># -*- mode: python -*-
a = Analysis(['test.py'],
         pathex=['C:\\Workspace\\ZLC_python'],
         hiddenimports=[],
         hookspath=None,
         excludes=['PyQt4'],
         runtime_hooks=None)
for d in a.datas:
    if 'pyconfig' in d[0]: 
        a.datas.remove(d)
        break
pyz = PYZ(a.pure)
exe = EXE(pyz,
      a.scripts,
      a.binaries,
      a.zipfiles,
      a.datas,
      name='test.exe',
      debug=False,
      strip=None,
      upx=True,
      console=True )
</snippet></ROW><ROW><id>20664681</id><snippet>f:\django_web/
   |---MySite
       |---static/
       |   |---admin/
       |       |--css
       |       |--img
       |       |--js  
       |---MyApp/
       |   |--__init__.py
       |   |--admin.py
       |   |--models.py
       |   |--tests.py
       |   |--views.py
       |---MySite/
       |   |--__init.py
       |   |--settings.py
       |   |--testdb.py
       |   |--urls.py
       |---Apache/
       |   |--wsgi.py
       |--manage.py
</snippet></ROW><ROW><id>20664681</id><snippet>Alias /static "F:/Web_Django/MySite/static/"
&lt;Directory "F:/Web_Django/MySite/static/"&gt;
    Order allow,deny
    Options Indexes
    Allow from all
    IndexOptions FancyIndexing
&lt;/Directory&gt;

WSGIScriptAlias /MySite F:/Web_Django/MySite/Apache/wsgi.py
WSGIPythonPath F:/Web_Django/MySite
&lt;Directory F:/Web_Django/MySite/Apache/&gt;
Order deny,allow
Allow from all
&lt;/Directory&gt;
</snippet></ROW><ROW><id>20664687</id><snippet>include</snippet></ROW><ROW><id>20664687</id><snippet>^</snippet></ROW><ROW><id>20664687</id><snippet>url(r'^', include('app.urls')),
</snippet></ROW><ROW><id>20664692</id><snippet>table = soup.find('table', id='DailySettlementTable')

# The slice notation below, [2:7], says to take the third (index 2)
# to the eighth (index 7) values from the rows we get.
for rows in table.find_all('tr')[2:7]:
    cells = rows.find_all('td')
    month = cells[0]
    settle = cells[6]

    print month.string + ':' + settle.string
</snippet></ROW><ROW><id>20664844</id><snippet>json</snippet></ROW><ROW><id>20664844</id><snippet>import json

# saving
with open("totals.txt", 'w') as f27:
    json.dump(totaldict, f27)

# loading
with open("totals.txt", 'r') as f27:
    totaldict = json.load(f27)
</snippet></ROW><ROW><id>20665220</id><snippet>p.show()</snippet></ROW><ROW><id>20665220</id><snippet>plot.set_xlim([0,len(l)])
</snippet></ROW><ROW><id>20665257</id><snippet>$exists</snippet></ROW><ROW><id>20665257</id><snippet>db.test.find({'files.IyzkmGh4YGD61Tc3TJjaEY17hDldH': {'$exists': 1}})
</snippet></ROW><ROW><id>20665257</id><snippet>db.test.update(
    {'files.IyzkmGh4YGD61Tc3TJjaEY17hDldH': {'$exists': 1}},
    {'$pull': {'files': {'IyzkmGh4YGD61Tc3TJjaEY17hDldH': {'$exists': 1}}}},
    multi=True)
</snippet></ROW><ROW><id>20665583</id><snippet>grid</snippet></ROW><ROW><id>20665583</id><snippet>None</snippet></ROW><ROW><id>20665583</id><snippet>self.threadLabelTitle = tk.Label(self.threadFrame,textvariable=self.threadTitle,wraplength=400,padx=20, pady=5).grid(row=1,column=10,sticky= tk.EW)
</snippet></ROW><ROW><id>20665583</id><snippet>self.threadLabelTitle = tk.Label(self.threadFrame,textvariable=self.threadTitle,wraplength=400,padx=20, pady=5)
self.threadLabelTitle.grid(row=1,column=10,sticky= tk.EW)
</snippet></ROW><ROW><id>20665584</id><snippet>trailers = {film['trailers']['id']: [source['source'] for source in film['trailers'].get('youtube', [])] 
            for film in j}
</snippet></ROW><ROW><id>20665584</id><snippet>&gt;&gt;&gt; {film['trailers']['id']: [source['source'] for source in film['trailers'].get('youtube', [])] 
...             for film in j}
{57417: ['source1', 'source2'], 57418: []}
</snippet></ROW><ROW><id>20665708</id><snippet>enum_types()</snippet></ROW><ROW><id>20665708</id><snippet>Lib/mimetypes.py</snippet></ROW><ROW><id>20665708</id><snippet>def enum_types(mimedb):
    for i in count():
        try:
            yield _winreg.EnumKey(mimedb, i)
        except EnvironmentError:
            break
</snippet></ROW><ROW><id>20665841</id><snippet>OPTIONS</snippet></ROW><ROW><id>20665841</id><snippet>w =  OptionMenu(c, var, *OPTIONS)
</snippet></ROW><ROW><id>20665841</id><snippet>import Tkinter as tk

def serial_ports():
    for port in list('ABCDE'):
        yield port

OPTIONS = list(serial_ports())

class App(object):
    def __init__(self, master, **kwargs):
        self.master = master
        self.var = tk.StringVar()
        self.var.set('Port')
        self.option = tk.OptionMenu(master, self.var, *OPTIONS)
        self.option.pack()


root = tk.Tk()
app = App(root)
root.mainloop()
</snippet></ROW><ROW><id>20665900</id><snippet>def leftshift(ba, count):
    return ba[count:] + (bitarray('0') * count)

def rightshift(ba, count):
    return (bitarray('0') * count) + ba[:-count]
</snippet></ROW><ROW><id>20665900</id><snippet>0</snippet></ROW><ROW><id>20665900</id><snippet>bitarray</snippet></ROW><ROW><id>20665900</id><snippet>class mybitarray(bitarray):
    def __lshift__(self, count):
        return self[count:] + type(self)('0') * count
    def __rshift__(self, count):
        return type(self)('0') * count + self[:-count]
    def __repr__(self):
        return "{}('{}')".format(type(self).__name__, self.to01())
</snippet></ROW><ROW><id>20665900</id><snippet>&gt;&gt;&gt; c0 = mybitarray(c0)
&gt;&gt;&gt; c0
mybitarray('1111011111111111111111110001')
&gt;&gt;&gt; c0 &lt;&lt; 4
mybitarray('0111111111111111111100010000')
&gt;&gt;&gt; c0 &gt;&gt; 4
mybitarray('0000111101111111111111111111')
</snippet></ROW><ROW><id>20665964</id><snippet>&gt;&gt;&gt; class Person:
...    def __init__(self,Fname,Lname,Byear):
...        self.firtsName = Fname
...        self.lastName = Lname
...        self.birth_year = Byear
...    def __str__(self):
...        return "%s, %s Age: %s" %(self.lastName, self.firtsName, (datetime.datetime.now().year-self.birth_year))
... 
&gt;&gt;&gt; p1=Person('Olivia','Parker',1985)
&gt;&gt;&gt; print(p1)
Parker, Olivia Age: 28
</snippet></ROW><ROW><id>20665980</id><snippet>signalSearch</snippet></ROW><ROW><id>20665980</id><snippet>class Searcher(QObject):
    signalUpdate = pyqtSignal(str, str)

    def __init__(self, dictionary):
        super(Searcher, self).__init__()
        self.dictionary = dictionary

    # word is sent by signalSearch
    def run(self, word):
        self.signalUpdate.emit(self.dictionary, word)
</snippet></ROW><ROW><id>20665980</id><snippet>class MyMainWindow(QMainWindow, Ui_MainWindow):
    signalSearch = pyqtSignal(str)

    def __init__(self, parent=None):
        super(MyMainWindow, self).__init__()
        self.setupUi(self)
        self.dictList = ['Yahoo dictionary', 'Webster dictionary']
        self.searchThreads = []
        self.searchers = []
        # create all the threads and searchers once
        for dictionary in self.dictList:
            thread = QThread(self)
            self.searchThreads.append(thread)
            searcher = Searcher(dictionary)
            self.searchers.append(searcher)
            searcher.signalUpdate.connect(self.updateGUI)
            self.signalSearch.connect(searcher.run)
            searcher.moveToThread(thread)
            thread.start()

    def click(self):
        # send a new word to the searchers
        self.signalSearch.emit(self.lineEdit.text())

    def updateGUI(self, dictionary, word):
        print(dictionary+'['+word+']')
</snippet></ROW><ROW><id>20666016</id><snippet>from django.db.models.signals import post_save
from django.dispatch import receiver


@receiver(post_save)
def log_creation(sender, instance, created, **kwargs):
    if created and isinstance(instance, (ModelA, ModelB)):
        logger.info("created an instance of %s : %s", sender.__name__, instance)
</snippet></ROW><ROW><id>20666060</id><snippet>from itertools import chain
from django.db.models import Q, Count

qs = House.objects.all()
q = {'room__beds__gt': 0}
qs_with = qs.filter(Q(**q)).annotate(bedrooms=Count('room'))
qs_without = qs.filter(~Q(**q)).extra(select={'bedrooms': 0})
qs_all = chain(qs_with, qs_without)
</snippet></ROW><ROW><id>20666205</id><snippet>names = { "john": (“doe”, “13-apr-1985”),
          "clark": (“kent”, “11-jan—1987”),
          "bruce": (“wayne”, “05-sep-1988”)}

user = raw_input(“What is your name?”)
if user in names.keys():
  print “Your last name is: “ + names[user][0]
  print “Your date of birth is: “ + names[user][1]
else:
  print “I don’t know you.”
</snippet></ROW><ROW><id>20666205</id><snippet>names = { "john": {"last": “doe”, "birthdate": “13-apr-1985”},
          "clark": {"last": “kent”, "birthdate": “11-jan—1987”},
          "bruce": {"last": “wayne”, "birthdate": “05-sep-1988”}}

user = raw_input(“What is your name?”)
if user in names.keys():
  print “Your last name is: “ + names[user]["last"]
  print “Your date of birth is: “ + names[user]["birthdate"]
else:
  print “I don’t know you.”
</snippet></ROW><ROW><id>20666205</id><snippet>...
user = raw_input(“What is your name?”)
user = user.strip()
if user in names.keys():
  ...
</snippet></ROW><ROW><id>20666342</id><snippet>def merge(source, destination):
    """
    run me with nosetests --with-doctest file.py

    &gt;&gt;&gt; a = { 'first' : { 'all_rows' : { 'pass' : 'dog', 'number' : '1' } } }
    &gt;&gt;&gt; b = { 'first' : { 'all_rows' : { 'fail' : 'cat', 'number' : '5' } } }
    &gt;&gt;&gt; merge(b, a) == { 'first' : { 'all_rows' : { 'pass' : 'dog', 'fail' : 'cat', 'number' : '5' } } }
    True
    """
    for key, value in source.items():
        if isinstance(value, dict):
            # get node or create one
            node = destination.setdefault(key, {})
            merge(value, node)
        else:
            destination[key] = value

    return destination
</snippet></ROW><ROW><id>20666392</id><snippet>strings = ("public class MyClass extends ParentClass {","public class MyClass throws SomeException {","public class MyClass {")
pattern = "((public|private|protected)\s+(class|interface)\s+(\w+))"

for string in strings:
    print re.search(pattern,string).group(4)
</snippet></ROW><ROW><id>20666734</id><snippet>string = unicode(qstring)
</snippet></ROW><ROW><id>20666734</id><snippet>import sip
sip.setapi('QString', 2)

from PyQt4 import QtCore, QtGui
</snippet></ROW><ROW><id>20666734</id><snippet>setapi</snippet></ROW><ROW><id>20666741</id><snippet>prevstate = currentstate
</snippet></ROW><ROW><id>20666741</id><snippet>prevstate</snippet></ROW><ROW><id>20666741</id><snippet>currentstate</snippet></ROW><ROW><id>20666741</id><snippet>prevstate</snippet></ROW><ROW><id>20666741</id><snippet>currentstate</snippet></ROW><ROW><id>20666741</id><snippet>currentstate</snippet></ROW><ROW><id>20666741</id><snippet>prevstate</snippet></ROW><ROW><id>20666741</id><snippet>prevstate</snippet></ROW><ROW><id>20666741</id><snippet>currentstate</snippet></ROW><ROW><id>20666741</id><snippet>prevstate = currentstate.copy()
</snippet></ROW><ROW><id>20666741</id><snippet>prevstate</snippet></ROW><ROW><id>20666741</id><snippet>currentstate</snippet></ROW><ROW><id>20666741</id><snippet>prevstate.update(currentstate)
</snippet></ROW><ROW><id>20666759</id><snippet>globals()</snippet></ROW><ROW><id>20666759</id><snippet># ahead
def ahead():
    if 'theObject' not in globals():
        print "You need an object before you can proceed."
        opening()

    else:
        print "You walk for a while."
        print "Eventually you find a door to exit the Labrynthe with a code above it"
        print "You must translate the code using the code translator."
        print theObject
        if theObject == "map":
            print "You gotta get the code."
            dead("You walked too far to return. You die of exhaustion")
        elif theObject == "code":
            print "You say out aloud the magic open words 'open sesame!'"
            complete()
        else:
            print "Grab the code from the left room."
            opening()
</snippet></ROW><ROW><id>20666759</id><snippet>theObject</snippet></ROW><ROW><id>20666759</id><snippet>None</snippet></ROW><ROW><id>20666810</id><snippet>        url =  self.threadLinkList[self.y]+'.gif'
        imageName=self.threadLinkList[self.y][-11:-4]+'.gif'

        print(imageName)
        urllib.request.urlretrieve(self.threadLinkList[self.y],imageName)

        imgfile = Image.open(imageName)
        imgfile = imgfile.resize((150,150),Image.ANTIALIAS)
        # img = Image.open(file)

        print(imgfile)
        self.threadImage = ImageTk.PhotoImage(imgfile)

        self.threadLabelImage.config(***image*** = self.threadImage)
        self.threadImage.image = imgfile
</snippet></ROW><ROW><id>20666945</id><snippet>class WeeklyReports(models.Model):
    def FourWeeks(self, year, week):
        self.year = year
        self.week = week
        end = datetime(year, 1, 1) + relativedelta(weeks=week-1, weekday=SU)
        start = end - relativedelta(weeks=4, weekday=MO)
        mint, maxt = datetime.min.time(), datetime.max.time()
        for dt in rrule(WEEKLY, start, count=4):
            yield dt.combine(dt, mint), dt.combine(dt + timedelta(days=6), maxt)
</snippet></ROW><ROW><id>20666945</id><snippet>w = WeeklyReports()
for start, end in w.FourWeeks(year, week):
    print start, end
</snippet></ROW><ROW><id>20666945</id><snippet>w.FourWeeks(2013, 22)</snippet></ROW><ROW><id>20666945</id><snippet>yield</snippet></ROW><ROW><id>20666945</id><snippet>for start, end in FourWeeks(year, week):</snippet></ROW><ROW><id>20667015</id><snippet>def summarize(txt):
    sentences = [s for s in nltk.tokenize.sent_tokenize(txt)]
    normalized_sentences = [s.lower() for s in sentences]

    words = [w.lower() for sentence in normalized_sentences for w in
          nltk.tokenize.word_tokenize(sentence)]

    fdist = nltk.FreqDist(words)

    top_n_words = [w[0] for w in fdist.items() 
        if w[0] not in nltk.corpus.stopwords.words('english')][:N]

    scored_sentences = _score_sentences(normalized_sentences, top_n_words)

     # Summarization Approach 1:
     # Filter out nonsignificant sentences by using the average score plus a
     # fraction of the std dev as a filter

    avg = numpy.mean([s[1] for s in scored_sentences])
    std = numpy.std([s[1] for s in scored_sentences])
    mean_scored = [(sent_idx, score) for (sent_idx, score) in scored_sentences
                   if score &gt; avg + 0.5 * std]

    # Summarization Approach 2:
    # Another approach would be to return only the top N ranked sentences

    top_n_scored = sorted(scored_sentences, key=lambda s: s[1])[-TOP_SENTENCES:]
    top_n_scored = sorted(top_n_scored, key=lambda s: s[0])

    # Decorate the post object with summaries

    return dict(top_n_summary=[sentences[idx] for (idx, score) in top_n_scored],
                mean_scored_summary=[sentences[idx] for (idx, score) in mean_scored])
</snippet></ROW><ROW><id>20667049</id><snippet>FileHandler</snippet></ROW><ROW><id>20667049</id><snippet>mkdir_p</snippet></ROW><ROW><id>20667049</id><snippet>import logging
import os
import errno

def mkdir_p(path):
    """http://stackoverflow.com/a/600612/190597 (tzot)"""
    try:
        os.makedirs(path, exist_ok=True)  # Python&gt;3.2
    except TypeError:
        try:
            os.makedirs(path)
        except OSError as exc: # Python &gt;2.5
            if exc.errno == errno.EEXIST and os.path.isdir(path):
                pass
            else: raise

class MakeFileHandler(logging.FileHandler):
    def __init__(self, filename, mode='a', encoding=None, delay=0):            
        mkdir_p(os.path.dirname(filename))
        logging.FileHandler.__init__(self, filename, mode, encoding, delay)
</snippet></ROW><ROW><id>20667114</id><snippet>self.image</snippet></ROW><ROW><id>20667114</id><snippet>self.image</snippet></ROW><ROW><id>20667114</id><snippet>self.dc = wx.ClientDC(self.image)</snippet></ROW><ROW><id>20667262</id><snippet>global</snippet></ROW><ROW><id>20667262</id><snippet>someVar</snippet></ROW><ROW><id>20667262</id><snippet>someVar = "none"

def someFunction():
    global someVar
    if whatever is whatever:
        someVar = "somethingElse"
    return someVar
</snippet></ROW><ROW><id>20667443</id><snippet>__getstate__</snippet></ROW><ROW><id>20667443</id><snippet>__new__</snippet></ROW><ROW><id>20667443</id><snippet>__init__</snippet></ROW><ROW><id>20667443</id><snippet>__getnewargs__</snippet></ROW><ROW><id>20667443</id><snippet>__getstate__</snippet></ROW><ROW><id>20667443</id><snippet>__reduce__</snippet></ROW><ROW><id>20667543</id><snippet>index</snippet></ROW><ROW><id>20667543</id><snippet>&gt;&gt;&gt; a = [1,2,3]
&gt;&gt;&gt; a.index(1)
0
&gt;&gt;&gt; a.index(4)
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
ValueError: 4 is not in list
&gt;&gt;&gt;
</snippet></ROW><ROW><id>20667543</id><snippet>in</snippet></ROW><ROW><id>20667543</id><snippet>if word in mylist:
    i = mylist.index(word)
    # do something
else:
    # do something different
</snippet></ROW><ROW><id>20667624</id><snippet>num()</snippet></ROW><ROW><id>20667624</id><snippet>count</snippet></ROW><ROW><id>20667624</id><snippet>__init__</snippet></ROW><ROW><id>20667624</id><snippet>count</snippet></ROW><ROW><id>20667624</id><snippet>def __init__(self, count):
    self.count = count
    # etc...

number = numbers(9000)
</snippet></ROW><ROW><id>20667788</id><snippet>In [11]: s = '''A;B
1;2,000
3;4'''

In [12]: pd.read_csv(StringIO(s), sep=';', thousands=',')
Out[12]: 
   A     B
0  1  2000
1  3     4

[2 rows x 2 columns]

In [13]: pd.version.version
Out[13]: '0.13.0rc1-82-g66934c2'
</snippet></ROW><ROW><id>20667793</id><snippet>for pix in range(0, source.size[1]-1): #make a list of the column from the b&amp;w img
    grey = blackandwhite[i, pix]
    color = img[i, pix]
    vert_list.append((grey, color))
</snippet></ROW><ROW><id>20667793</id><snippet>vert_list[:] = (x for x in vert_list if threshold &gt; x[0])
</snippet></ROW><ROW><id>20667793</id><snippet>newimg</snippet></ROW><ROW><id>20667793</id><snippet>newimg[i,pixel + top_spacing] = vert_list[pixel][1]
</snippet></ROW><ROW><id>20667793</id><snippet>canvas</snippet></ROW><ROW><id>20667828</id><snippet>while True:
    program...
</snippet></ROW><ROW><id>20667828</id><snippet>Enter q to quit or r to restart # for instance
</snippet></ROW><ROW><id>20667828</id><snippet>while win == False</snippet></ROW><ROW><id>20667864</id><snippet># not needed for python 3
import sip
sip.setapi('QString', 2)

from collections import defaultdict
from PyQt4 import QtGui, QtCore

class Window(QtGui.QWidget):
    def __init__(self):
        QtGui.QWidget.__init__(self)
        self.tree = QtGui.QTreeWidget(self)
        self.tree.header().hide()
        for index in range(5):
            parent = QtGui.QTreeWidgetItem(self.tree, ['NUS2K%s' % index])
            if index % 3:
                parent.setCheckState(0, QtCore.Qt.PartiallyChecked)
            else:
                parent.setCheckState(0, QtCore.Qt.Unchecked)
            features = 'Loader Reports Logging'.split()
            for count, item in enumerate(features):
                child = QtGui.QTreeWidgetItem(parent, [item])
                if index % 3 and count % 3:
                    child.setCheckState(0, QtCore.Qt.Checked)
                else:
                    child.setCheckState(0, QtCore.Qt.Unchecked)
            parent.setExpanded(True)
        self.button = QtGui.QPushButton('Export', self)
        self.button.clicked.connect(self.handleExport)
        layout = QtGui.QVBoxLayout(self)
        layout.addWidget(self.tree)
        layout.addWidget(self.button)

    def handleExport(self):
        mapping = self.exportTree()
        for machine, features in mapping.items():
            print('%s:' % machine)
            for feature in features:
                print('  %s' % feature)

    def exportTree(self):
        mapping = defaultdict(list)
        root = self.tree.invisibleRootItem()
        for index in range(root.childCount()):
            parent = root.child(index)
            if parent.checkState(0) == QtCore.Qt.PartiallyChecked:
                features = mapping[parent.text(0)]
                for row in range(parent.childCount()):
                    child = parent.child(row)
                    if child.checkState(0) == QtCore.Qt.Checked:
                        features.append(child.text(0))
        return mapping

if __name__ == '__main__':

    import sys
    app = QtGui.QApplication(sys.argv)
    window = Window()
    window.setGeometry(800, 300, 300, 300)
    window.show()
    sys.exit(app.exec_())
</snippet></ROW><ROW><id>20667956</id><snippet>Customizing IPython - Config.ipynb</snippet></ROW><ROW><id>20667956</id><snippet>psource</snippet></ROW><ROW><id>20667956</id><snippet>pinfo2</snippet></ROW><ROW><id>20668158</id><snippet>This {% url ... as var %} syntax will not cause an error if the view is missing.
</snippet></ROW><ROW><id>20668158</id><snippet>urls.py</snippet></ROW><ROW><id>20668186</id><snippet>self.pushButton.setStyleSheet("background-color: red")
</snippet></ROW><ROW><id>20668350</id><snippet>pip</snippet></ROW><ROW><id>20668350</id><snippet>distribute</snippet></ROW><ROW><id>20668350</id><snippet>setuptools</snippet></ROW><ROW><id>20668350</id><snippet>virtualbox</snippet></ROW><ROW><id>20668350</id><snippet>-dev</snippet></ROW><ROW><id>20668350</id><snippet>-devel</snippet></ROW><ROW><id>20668876</id><snippet>--gateway</snippet></ROW><ROW><id>20668876</id><snippet>env.gateway</snippet></ROW><ROW><id>20668892</id><snippet>re.sub</snippet></ROW><ROW><id>20668892</id><snippet>Data = [re.sub('(ing|ed|al)$', '', w) for w in wordlist]
</snippet></ROW><ROW><id>20668892</id><snippet>re.search</snippet></ROW><ROW><id>20668892</id><snippet>if</snippet></ROW><ROW><id>20668892</id><snippet>strip_suffixes</snippet></ROW><ROW><id>20668892</id><snippet>Data = [strip_suffixes(w) for w in wordlist]
</snippet></ROW><ROW><id>20668922</id><snippet>def recurPowerNew(base, exp):
    """
    base: int or float.
    exp: int &gt;= 0

    returns: int or float; base^exp
    """
    if exp &lt;= 0:
        return 1
    elif exp%2 == 0:
        return recurPowerNew(base*base, (exp/2))

    return base*recurPowerNew(base, (exp-1))
</snippet></ROW><ROW><id>20669086</id><snippet>re</snippet></ROW><ROW><id>20669086</id><snippet>a = re.compile(r"""\d +  # the integral part
                   \.    # the decimal point
                   \d *  # some fractional digits""", re.X)
</snippet></ROW><ROW><id>20669119</id><snippet>sent_tokenize</snippet></ROW><ROW><id>20669119</id><snippet>sent_tokenize</snippet></ROW><ROW><id>20669119</id><snippet>word_tokenize</snippet></ROW><ROW><id>20669119</id><snippet>for articles in articles[1]:
    articles_id, content = articles
    clean = nltk.clean_html(content).replace('&amp;rsquo;', "'")
    sents = nltk.sent_tokenize(clean)
    pos ={}
    for sent in sents:
        tokens = nltk.word_tokenize(sent)
        pos_document = nltk.pos_tag(tokens)
        for pos_word in pos_document:
            word, part = pos_word
            if pos.has_key(part):
                pos[part].append(word)
            else:
                pos[part] = [word]
</snippet></ROW><ROW><id>20669119</id><snippet>'Mr', '.', 'Smith'</snippet></ROW><ROW><id>20669147</id><snippet>import lxml
from lxml import etree
import pykml
from pykml.factory import KML_ElementMaker as KML
from pykml import parser

x = KML.Folder(KML.name("meow"))

with open("Scratch Paper.kml", "r+") as f:
    doc = parser.parse(f).getroot()
    print doc.Document.Folder.Folder[3].name
    a = doc.Document.Folder[0]
    a.append(x)
    finished = (etree.tostring(doc, pretty_print=True))

with open("Scratch Paper.kml", "w+") as f:
    f.write(finished)

print "Done!"
</snippet></ROW><ROW><id>20669169</id><snippet>A=[4, 1, 0, 8, 5, 2]
B=sorted(range(len(A)),key=lambda x:A[x],reverse=True)
C=sorted(range(len(A)),key=lambda x:B[x])
print C
</snippet></ROW><ROW><id>20669169</id><snippet>[2, 4, 5, 0, 1, 3]
</snippet></ROW><ROW><id>20669169</id><snippet>B = [3, 4, 0, 5, 1, 2]
</snippet></ROW><ROW><id>20669304</id><snippet>File "./multiprocessing.py"</snippet></ROW><ROW><id>20669304</id><snippet>multiprocessing.py</snippet></ROW><ROW><id>20669304</id><snippet>multiprocessing</snippet></ROW><ROW><id>20669304</id><snippet>sys.path</snippet></ROW><ROW><id>20669304</id><snippet>''</snippet></ROW><ROW><id>20669304</id><snippet>import</snippet></ROW><ROW><id>20669322</id><snippet>&gt;&gt;&gt; import os
&gt;&gt;&gt; os.path.normpath(os.path.join(os.environ['PWD'], '../../..'))
'/home/me/work/project'
</snippet></ROW><ROW><id>20669322</id><snippet>os.path.normpath</snippet></ROW><ROW><id>20669334</id><snippet>&gt;&gt;&gt; all_records = '''Record 2 :
... { "K1":"value3" , 
...   "K2":"value4" 
... }'''
&gt;&gt;&gt; pattern = r"(\s*)Record (\d+):"
&gt;&gt;&gt; re.findall(pattern, all_records)
[]
</snippet></ROW><ROW><id>20669334</id><snippet>&gt;&gt;&gt; pattern = r"\s*Record (\d+)\s*:"
&gt;&gt;&gt; re.findall(pattern, all_records)
[2]
</snippet></ROW><ROW><id>20669334</id><snippet>\d+</snippet></ROW><ROW><id>20669334</id><snippet>\1</snippet></ROW><ROW><id>20669334</id><snippet>&gt;&gt;&gt; print(re.sub(pattern, r'"Record_\1": ', all_records))
"Record_2":
{ "K1":"value3" ,
  "K2":"value4"
}
</snippet></ROW><ROW><id>20669334</id><snippet>re.sub</snippet></ROW><ROW><id>20669334</id><snippet>\6</snippet></ROW><ROW><id>20669334</id><snippet>(…)</snippet></ROW><ROW><id>20669334</id><snippet>(?P&lt;name&gt;…)</snippet></ROW><ROW><id>20669334</id><snippet>\1</snippet></ROW><ROW><id>20669334</id><snippet>"</snippet></ROW><ROW><id>20669412</id><snippet>dir</snippet></ROW><ROW><id>20669412</id><snippet>__main__</snippet></ROW><ROW><id>20669412</id><snippet>__main__</snippet></ROW><ROW><id>20669412</id><snippet>$ python3.3
&gt;&gt;&gt; dir()
['__builtins__', '__doc__', '__loader__', '__name__', '__package__']
&gt;&gt;&gt; import sys
&gt;&gt;&gt; i = 2+3
&gt;&gt;&gt; dir()
['__builtins__', '__doc__', '__loader__', '__name__', '__package__', 'i', 'sys']
</snippet></ROW><ROW><id>20669412</id><snippet>sorted(locals().keys())</snippet></ROW><ROW><id>20669412</id><snippet>dir()</snippet></ROW><ROW><id>20669412</id><snippet>dir(sys)</snippet></ROW><ROW><id>20669412</id><snippet>sys</snippet></ROW><ROW><id>20669412</id><snippet>dir(i)</snippet></ROW><ROW><id>20669412</id><snippet>5</snippet></ROW><ROW><id>20669683</id><snippet>If I were doing this directly at the command line, I'd "source" a script called mySetUpFreeSurfer.sh that does nothing but set three environment variables, and then "source" another script, FreeSurferEnv.sh.</snippet></ROW><ROW><id>20669683</id><snippet>newscript.sh</snippet></ROW><ROW><id>20669683</id><snippet>subprocess.check_output</snippet></ROW><ROW><id>20669683</id><snippet>Popen</snippet></ROW><ROW><id>20669683</id><snippet>check_output</snippet></ROW><ROW><id>20669683</id><snippet>call</snippet></ROW><ROW><id>20669683</id><snippet>#!/bin/bash
source ~/scripts/mySetUpFreeSurfer.sh
source /usr/local/freesurfer/FreeSurferEnv.sh
recon-all -i /media/foo/bar -subjid s1001
...
</snippet></ROW><ROW><id>20669683</id><snippet>subprocess.check_output(['newscript.sh'])
</snippet></ROW><ROW><id>20669683</id><snippet>import subprocess
import tempfile
import os
import stat


with tempfile.NamedTemporaryFile(mode='w', delete=False) as f:
    f.write('''\
#!/bin/bash
source ~/scripts/mySetUpFreeSurfer.sh
source /usr/local/freesurfer/FreeSurferEnv.sh
''')
    root = "/media/foo/"
    for sub_dir in os.listdir(root):
        sub = "s" + sub_dir[0:4]
        anat_dir = os.path.join(root, sub_dir, "anatomical")
        for directory in os.listdir(anat_dir):
            time_dir = os.path.join(anat_dir, directory)
            for d in os.listdir(time_dir):
                dicoms_dir = os.path.join(time_dir, d, 'dicoms')
                dicom_list = os.listdir(dicoms_dir)
                dicom = dicom_list[0]
                path = os.path.join(dicoms_dir, dicom)
                cmd1 = "recon-all -i {}  -subjid {}\n".format(path, sub)
                f.write(cmd1)
                cmd2 = "recon-all -all -subjid {}\n".format(sub)
                f.write(cmd2)

filename = f.name
os.chmod(filename, stat.S_IRUSR | stat.S_IXUSR)
subprocess.call([filename])
os.unlink(filename)
</snippet></ROW><ROW><id>20669683</id><snippet>def source(script, update=1):
    pipe = Popen(". %s; env" % script, stdout=PIPE, shell=True)
    data = pipe.communicate()[0]
    env = dict((line.split("=", 1) for line in data.splitlines()))
    if update:
        os.environ.update(env)
    return env
</snippet></ROW><ROW><id>20669683</id><snippet>script</snippet></ROW><ROW><id>20669683</id><snippet>VAR=`ls -1`
export VAR
</snippet></ROW><ROW><id>20669683</id><snippet>. script; env
</snippet></ROW><ROW><id>20669683</id><snippet>VAR=file1
file2
file3
</snippet></ROW><ROW><id>20669683</id><snippet>source(script)</snippet></ROW><ROW><id>20669683</id><snippet>ValueError</snippet></ROW><ROW><id>20669683</id><snippet>env = dict((line.split("=", 1) for line in data.splitlines()))
ValueError: dictionary update sequence element #21 has length 1; 2 is required
</snippet></ROW><ROW><id>20669683</id><snippet>source</snippet></ROW><ROW><id>20669683</id><snippet>env</snippet></ROW><ROW><id>20669683</id><snippet>def source(script, update=True):
    """
    http://pythonwise.blogspot.fr/2010/04/sourcing-shell-script.html (Miki Tebeka)
    """
    import subprocess, os
    proc = subprocess.Popen(". %s; env -0" % script, stdout=subprocess.PIPE, shell=True)
    output = proc.communicate()[0]
    env = dict((line.split("=", 1) for line in output.split('\x00') if line))
    if update:
        os.environ.update(env)
    return env
</snippet></ROW><ROW><id>20669683</id><snippet>env</snippet></ROW><ROW><id>20669683</id><snippet>env</snippet></ROW><ROW><id>20669683</id><snippet>subprocess</snippet></ROW><ROW><id>20669774</id><snippet>def f1(x):
    return 'f1 %s' % x

def f2(x):
    return 'f2 %s' % x

def f3(x):
    return 'f3 %s' % x
</snippet></ROW><ROW><id>20669774</id><snippet>def compose(*funcs):
    def f(x):
        ret = x
        for func in funcs[::-1]:
            ret = func(ret)
        return ret
    return f
</snippet></ROW><ROW><id>20669774</id><snippet>F = compose(f1, f2, f3)
print F('x')
</snippet></ROW><ROW><id>20669774</id><snippet>f1 f2 f3 x
</snippet></ROW><ROW><id>20669775</id><snippet>mock</snippet></ROW><ROW><id>20669775</id><snippet>pip install mock</snippet></ROW><ROW><id>20669775</id><snippet>caliendo</snippet></ROW><ROW><id>20669775</id><snippet>pip install caliendo</snippet></ROW><ROW><id>20669775</id><snippet>from caliendo.patch import patch
from caliendo import expected_value

class TestTweepyApi(unittest.TestCase):

    @patch('tweepy.api.update_status')
    def test_tweet(self):
        expected_value.is_equal_to(my_method_that_calls_tweepy_update_status())
</snippet></ROW><ROW><id>20669789</id><snippet>UPDATE agent
SET agent_last_request = ?
WHERE agent_id = (SELECT agent_id
                  FROM listings
                  WHERE listing_id = ?)
</snippet></ROW><ROW><id>20669842</id><snippet>[[]]*3</snippet></ROW><ROW><id>20669842</id><snippet>&gt;&gt;&gt; lst = [[]]*3
&gt;&gt;&gt; # The object ids of the lists in 'lst' are the same
&gt;&gt;&gt; id(lst[0])
25130048
&gt;&gt;&gt; id(lst[1])
25130048
&gt;&gt;&gt; id(lst[2])
25130048
&gt;&gt;&gt;
</snippet></ROW><ROW><id>20669842</id><snippet>[[] for i in range(3)]</snippet></ROW><ROW><id>20669842</id><snippet>&gt;&gt;&gt; lst = [[] for i in range(3)]
&gt;&gt;&gt; # The object ids of the lists in 'lst' are different
&gt;&gt;&gt; id(lst[0])
25131768
&gt;&gt;&gt; id(lst[1])
25130008
&gt;&gt;&gt; id(lst[2])
25116064
&gt;&gt;&gt;
</snippet></ROW><ROW><id>20669896</id><snippet>accumulate(fn(line) for line in s1)</snippet></ROW><ROW><id>20669896</id><snippet>def grouper(line):
    if is_event(line):
        grouper.count += 1
    return grouper.count
grouper.count = 0

result_as_iterators = (x[1] for x in itertools.groupby(lines, grouper))
</snippet></ROW><ROW><id>20669896</id><snippet>result_as_lists = [list(x) for x in result_as_iterators]
</snippet></ROW><ROW><id>20669896</id><snippet>class Grouper(object):
    def __init__(self):
        self.count = 0
    def __call__(self, line):
        if is_event(line):
            self.count += 1
        return self.count

results_as_iterators = itertools.groupby(lines, Grouper())
</snippet></ROW><ROW><id>20669948</id><snippet>root</snippet></ROW><ROW><id>20669948</id><snippet>LOCAL SERVICE</snippet></ROW><ROW><id>20670012</id><snippet>import numpy as np
from mayavi import mlab
r = 1.0
phi, theta = np.mgrid[0:np.pi:200j, 0:2*np.pi:101j]

x = r*np.sin(phi)*np.cos(theta)
y = r*np.sin(phi)*np.sin(theta)
z = r*np.cos(phi)

intensity = phi * theta

obj = mlab.mesh(x, y, z, scalars=intensity, colormap='jet')
obj.enable_contours = True
obj.contour.filled_contours = True
obj.contour.number_of_contours = 20
mlab.show()
</snippet></ROW><ROW><id>20670042</id><snippet>mapM_</snippet></ROW><ROW><id>20670042</id><snippet>print</snippet></ROW><ROW><id>20670042</id><snippet>putStr.show</snippet></ROW><ROW><id>20670042</id><snippet>Prelude&gt; mapM_ print [a, b]
9
10

mapM_ (putStr . show) [a, b]
910Prelude&gt;
</snippet></ROW><ROW><id>20670042</id><snippet>Prelude&gt; let pylike_print ints = mapM_ (\x -&gt; putStr $ (show x) ++ " ") ints &gt;&gt; putStr "\n"
Prelude&gt; pylike_print [9, 10]
9 10
</snippet></ROW><ROW><id>20670234</id><snippet>import requests
import xml.etree.ElementTree as et

req = requests.get('http://www.agenzia-interinale.it/sitemap-5.xml')
root = et.fromstring(req.content)
for i in root:
    print i[0].text  # the &lt;loc&gt; text
</snippet></ROW><ROW><id>20670292</id><snippet>pp</snippet></ROW><ROW><id>20670292</id><snippet>multiprocessing.Pool</snippet></ROW><ROW><id>20670292</id><snippet>initializer</snippet></ROW><ROW><id>20670292</id><snippet>os.getpid()</snippet></ROW><ROW><id>20670292</id><snippet>dbname = 'database{}'.format(os.getpid())
</snippet></ROW><ROW><id>20670292</id><snippet>dbname</snippet></ROW><ROW><id>20670292</id><snippet>dbm</snippet></ROW><ROW><id>20670292</id><snippet>sqlite3</snippet></ROW><ROW><id>20670292</id><snippet>tempfile.TemporaryDirectory</snippet></ROW><ROW><id>20670292</id><snippet>os.path.join</snippet></ROW><ROW><id>20670292</id><snippet>os.listdir(the_temp_dir)</snippet></ROW><ROW><id>20670292</id><snippet>pp.Server</snippet></ROW><ROW><id>20670292</id><snippet>pp.Server</snippet></ROW><ROW><id>20670292</id><snippet>restart=True</snippet></ROW><ROW><id>20670292</id><snippet>for i, lockfile in enumerate(lockfiles):
    try:
        with lockfile:
            do stuff with databases[i]
            break
    except AlreadyLockedError:
        pass
else:
    assert False, "oops, couldn't get any of the locks"
</snippet></ROW><ROW><id>20670292</id><snippet>HANDLE</snippet></ROW><ROW><id>20670292</id><snippet>pid</snippet></ROW><ROW><id>20670292</id><snippet>pid</snippet></ROW><ROW><id>20670292</id><snippet>pid</snippet></ROW><ROW><id>20670292</id><snippet>os.kill(pid, 0)</snippet></ROW><ROW><id>20670474</id><snippet>nouns = [x for key, value in pos_dictionary.iteritems() if key.startswith('NN') for x in value]
</snippet></ROW><ROW><id>20670474</id><snippet>nouns = []
for key, value in pos_dictionary.iteritems():
    if key.startswith('NN'):
        nouns += value
</snippet></ROW><ROW><id>20670568</id><snippet>freeze.py</snippet></ROW><ROW><id>20670568</id><snippet>freeze.py</snippet></ROW><ROW><id>20670641</id><snippet>iter(x)</snippet></ROW><ROW><id>20670641</id><snippet>x</snippet></ROW><ROW><id>20670641</id><snippet>xrange()</snippet></ROW><ROW><id>20670641</id><snippet>xrange()</snippet></ROW><ROW><id>20670641</id><snippet>zip()</snippet></ROW><ROW><id>20670641</id><snippet>iter()</snippet></ROW><ROW><id>20670641</id><snippet>zip(*[xrange(5)]*2)</snippet></ROW><ROW><id>20670641</id><snippet>xrange()</snippet></ROW><ROW><id>20670641</id><snippet>zip(*[iter(xrange(5))]*2)</snippet></ROW><ROW><id>20670641</id><snippet>iter()</snippet></ROW><ROW><id>20670757</id><snippet>input</snippet></ROW><ROW><id>20670757</id><snippet>input</snippet></ROW><ROW><id>20670757</id><snippet>input</snippet></ROW><ROW><id>20670757</id><snippet>input_ = input()
</snippet></ROW><ROW><id>20670880</id><snippet>test = int(input("Enter in a number '1-10' "))
roman = ["I", "II", "III", "IV", "V", "VI", "VII", "VIII", "IX", "X"]
if 0 &lt; test &lt;= 10:
     i = roman[test-1]
     print(test, i)
</snippet></ROW><ROW><id>20670901</id><snippet>In [33]: df = pd.read_json(s)

In [25]: df
Out[25]: 
  args                date            host kwargs     operation  status   thingy      time
0   [] 2013-12-02 00:33:59  yy38.segm1.org     {}       x_gbinf    -101  a13yy38  0.000801
1   [] 2013-12-02 00:33:59  kyy1.segm1.org     {}     x_initobj       1  a19kyy1  0.003244
2   [] 2013-12-02 00:34:00  yy10.segm1.org     {}  x_gobjParams    -101  a14yy10  0.002247
3   [] 2013-12-02 00:34:00  yy24.segm1.org     {}        gtfull    -101  a14yy24  0.002787
4   [] 2013-12-02 00:34:00  yy24.segm1.org     {}       x_gbinf    -101  a14yy24  0.001067
5   [] 2013-12-02 00:34:00  yy34.segm1.org     {}       gxyzinf    -101  a12yy34  0.002652
6   [] 2013-12-02 00:34:00  yy15.segm1.org     {}     deletemfg       1  a15yy15  0.004371
7   [] 2013-12-02 00:34:00  yy15.segm1.org     {}       gxyzinf    -101  a15yy15  0.000602

[8 rows x 8 columns]

In [26]: df.dtypes
Out[26]: 
args                 object
date         datetime64[ns]
host                 object
kwargs               object
operation            object
status                int64
thingy               object
time                float64
dtype: object
</snippet></ROW><ROW><id>20670901</id><snippet>object</snippet></ROW><ROW><id>20670901</id><snippet>In [27]: df.apply(lambda x: pd.lib.infer_dtype(x.values))
Out[27]: 
args            unicode
date         datetime64
host            unicode
kwargs          unicode
operation       unicode
status          integer
thingy          unicode
time           floating
dtype: object
</snippet></ROW><ROW><id>20670901</id><snippet>In [28]: types = df.apply(lambda x: pd.lib.infer_dtype(x.values))

In [29]: types[types=='unicode']
Out[29]: 
args         unicode
host         unicode
kwargs       unicode
operation    unicode
thingy       unicode
dtype: object

In [30]: for col in types[types=='unicode'].index:
   ....:     df[col] = df[col].astype(str)
   ....:     
</snippet></ROW><ROW><id>20670901</id><snippet>In [31]: df
Out[31]: 
  args                date            host kwargs     operation  status   thingy      time
0   [] 2013-12-02 00:33:59  yy38.segm1.org     {}       x_gbinf    -101  a13yy38  0.000801
1   [] 2013-12-02 00:33:59  kyy1.segm1.org     {}     x_initobj       1  a19kyy1  0.003244
2   [] 2013-12-02 00:34:00  yy10.segm1.org     {}  x_gobjParams    -101  a14yy10  0.002247
3   [] 2013-12-02 00:34:00  yy24.segm1.org     {}        gtfull    -101  a14yy24  0.002787
4   [] 2013-12-02 00:34:00  yy24.segm1.org     {}       x_gbinf    -101  a14yy24  0.001067
5   [] 2013-12-02 00:34:00  yy34.segm1.org     {}       gxyzinf    -101  a12yy34  0.002652
6   [] 2013-12-02 00:34:00  yy15.segm1.org     {}     deletemfg       1  a15yy15  0.004371
7   [] 2013-12-02 00:34:00  yy15.segm1.org     {}       gxyzinf    -101  a15yy15  0.000602

[8 rows x 8 columns]
</snippet></ROW><ROW><id>20670901</id><snippet>In [32]: df.apply(lambda x: pd.lib.infer_dtype(x.values))
Out[32]: 
args             string
date         datetime64
host             string
kwargs           string
operation        string
status          integer
thingy           string
time           floating
dtype: object
</snippet></ROW><ROW><id>20671047</id><snippet>In [32]: data3['diffs'] = data3.groupby('ticker')['value'].transform(Series.diff)

In [34]: data3.sort_index(inplace=True)

In [25]: data3
Out[25]: 
         date    ticker     value     diffs
0  2013-10-03  ticker_2  0.435995  0.015627
1  2013-10-04  ticker_2  0.025926 -0.410069
2  2013-10-02  ticker_1  0.549662       NaN
3  2013-10-01  ticker_0  0.435322       NaN
4  2013-10-02  ticker_2  0.420368  0.120713
5  2013-10-03  ticker_0  0.330335 -0.288936
6  2013-10-04  ticker_1  0.204649 -0.345014
7  2013-10-02  ticker_0  0.619271  0.183949
8  2013-10-01  ticker_2  0.299655       NaN

[9 rows x 4 columns]
</snippet></ROW><ROW><id>20671047</id><snippet>np.diff</snippet></ROW><ROW><id>20671047</id><snippet>__array__</snippet></ROW><ROW><id>20671047</id><snippet>__array_wrap__</snippet></ROW><ROW><id>20671047</id><snippet>np.diff</snippet></ROW><ROW><id>20671072</id><snippet>import urllib
urllib.urlretrieve("http://www.nbmg.unr.edu/geothermal/mapfiles/nvgeowel.html","doc.html")
#urllib.urlretrieve("url","save as..")
</snippet></ROW><ROW><id>20671072</id><snippet>import socket
socket.setdefaulttimeout(25)
#seconds
</snippet></ROW><ROW><id>20671144</id><snippet>value[0][0]
</snippet></ROW><ROW><id>20671187</id><snippet>python -u mycode.py | tee foobar.log
</snippet></ROW><ROW><id>20671187</id><snippet>-u</snippet></ROW><ROW><id>20671638</id><snippet>C:\csvn\Python25</snippet></ROW><ROW><id>20671638</id><snippet>C:\Python26</snippet></ROW><ROW><id>20671638</id><snippet>%PATH%</snippet></ROW><ROW><id>20671660</id><snippet>import sqlite3
connection = sqlite3.connect('genes.db')
cursor = connection.cursor()

# create a table for inserting the data
create = ('CREATE TABLE genes (A text, B text, C text, D text, E text)')
cursor.execute(create)


difffile = """\
one two three four five six seven eight nine ten
a b c d e f g h i j
k l m n o p q r s t\
"""

# rows list for storing the data to insert
rows = []

# loop over lines in difffile
for line in difffile.split("\n"):

    # split the current line by whitespace
    fields = line.split()

    # skip over lines with less than 10 columns
    if len(fields) &lt; 10:
        continue

    # columns we want
    cols = (1, 6, 7, 8, 10)

    # create a row tuple with the data we want
    row = tuple([fields[col - 1] for col in cols])

    # add the current row to our rows list
    rows.append(row)

# insert row list into the database table "genes"
cursor.executemany("INSERT INTO genes VALUES(?, ?, ?, ?, ?)", rows)

# test the insert by dumping the database table genes:
results = cursor.execute("SELECT * FROM genes")
for r in results.fetchall():
    print(r)
</snippet></ROW><ROW><id>20671660</id><snippet>(u'one', u'six', u'seven', u'eight', u'ten')
(u'a', u'f', u'g', u'h', u'j')
(u'k', u'p', u'q', u'r', u't')
</snippet></ROW><ROW><id>20671785</id><snippet>mask = nValues != 'NA'
mask = nValues != '0.00'
</snippet></ROW><ROW><id>20671785</id><snippet>mask</snippet></ROW><ROW><id>20671785</id><snippet>values = ['NA', '0.00', '1.11']</snippet></ROW><ROW><id>20671785</id><snippet>[False, False, True]</snippet></ROW><ROW><id>20671785</id><snippet>array([True, False, True])
</snippet></ROW><ROW><id>20671785</id><snippet>mask</snippet></ROW><ROW><id>20671785</id><snippet>mask</snippet></ROW><ROW><id>20671785</id><snippet>'0.00'</snippet></ROW><ROW><id>20671785</id><snippet>'NA'</snippet></ROW><ROW><id>20671785</id><snippet>mask = nValues != 'NA' or '0.00'
</snippet></ROW><ROW><id>20671785</id><snippet>(nValues != 'NA') or '0.00'</snippet></ROW><ROW><id>20671785</id><snippet>nValues != ('NA' or '0.00')</snippet></ROW><ROW><id>20671785</id><snippet>ValueError</snippet></ROW><ROW><id>20671785</id><snippet>or</snippet></ROW><ROW><id>20671785</id><snippet>0.00</snippet></ROW><ROW><id>20671785</id><snippet>'NA'</snippet></ROW><ROW><id>20671785</id><snippet>'0.00'</snippet></ROW><ROW><id>20671785</id><snippet>('NA' or '0.00')</snippet></ROW><ROW><id>20671785</id><snippet>'NA'</snippet></ROW><ROW><id>20671785</id><snippet>mask = (nValues != 'NA') or (nValues != '0.00')
</snippet></ROW><ROW><id>20671785</id><snippet>ValueError</snippet></ROW><ROW><id>20671785</id><snippet>or</snippet></ROW><ROW><id>20671785</id><snippet>or</snippet></ROW><ROW><id>20671785</id><snippet>or</snippet></ROW><ROW><id>20671785</id><snippet>|</snippet></ROW><ROW><id>20671785</id><snippet>mask = (nValues != 'NA') | (nValues != '0.00')
</snippet></ROW><ROW><id>20671785</id><snippet>[True, True, True]</snippet></ROW><ROW><id>20671785</id><snippet>'NA'</snippet></ROW><ROW><id>20671785</id><snippet>'0.00'</snippet></ROW><ROW><id>20671785</id><snippet>mask = (nValues != 'NA') &amp; (nValues != '0.00')
</snippet></ROW><ROW><id>20672067</id><snippet>&gt;&gt;&gt; for base, argtype, *args in data:
...     print(base, argtype, args)
... 
1 2 [0, 0]
1 2 [0, 1]
2 1 [9]
1 3 [4, 2, 1]
3 2 [1, 4]
</snippet></ROW><ROW><id>20672067</id><snippet>for entry in data:
    get_func(*entry[:2])(*entry[2:])
</snippet></ROW><ROW><id>20672067</id><snippet>&gt;&gt;&gt; gen = ((x[0],x[1],x[2:]) for x in data)
&gt;&gt;&gt; for base, argtype, args in gen:
...    print(base, argtype, args)
... 
1 2 [0, 0]
1 2 [0, 1]
2 1 [9]
1 3 [4, 2, 1]
3 2 [1, 4]
</snippet></ROW><ROW><id>20672067</id><snippet>operator.itemgetter</snippet></ROW><ROW><id>20672067</id><snippet>&gt;&gt;&gt; import operator
&gt;&gt;&gt; unpacker = operator.itemgetter(0,1,slice(2,None,None))
&gt;&gt;&gt; for base, argtype, args in map(unpacker, data):
...     print(base, argtype, args)
... 
1 2 [0, 0]
1 2 [0, 1]
2 1 [9]
1 3 [4, 2, 1]
3 2 [1, 4]
</snippet></ROW><ROW><id>20672084</id><snippet>distutils</snippet></ROW><ROW><id>20672084</id><snippet>setuptools</snippet></ROW><ROW><id>20672084</id><snippet>init</snippet></ROW><ROW><id>20672084</id><snippet>init</snippet></ROW><ROW><id>20672084</id><snippet>init</snippet></ROW><ROW><id>20672084</id><snippet>init</snippet></ROW><ROW><id>20672084</id><snippet>launchd</snippet></ROW><ROW><id>20672094</id><snippet>d[-n]</snippet></ROW><ROW><id>20672094</id><snippet>data[n]</snippet></ROW><ROW><id>20672094</id><snippet>prev = data[0] 
highs = [prev] # should the 1st one be one the list?
for d in data:
    if d &gt; prev:
        highs.append(d) # simpler than extend([d])
    prev = d  # update prev       
highs
# [10, 6, 7, 8]
</snippet></ROW><ROW><id>20672094</id><snippet>for i in range(n, len(data)):
    if data[i]&gt;data[i-n]
        ...
</snippet></ROW><ROW><id>20672094</id><snippet>enumerate</snippet></ROW><ROW><id>20672094</id><snippet>for i, d in enumerate(data):
    j = i - n
    if j&gt;=0:
        if d &gt; data[j]:
           ....
</snippet></ROW><ROW><id>20672150</id><snippet>except</snippet></ROW><ROW><id>20672150</id><snippet>print</snippet></ROW><ROW><id>20672150</id><snippet>prefixes="item1,item2,item3"

for prefix in prefixes.split(","):
   try:
     print prefix
   except:
         pass
</snippet></ROW><ROW><id>20672314</id><snippet>flipped = {}

for key, value in d.items():
    if value not in flipped:
        flipped[value] = [key]
    else:
        flipped[value].append(key)
</snippet></ROW><ROW><id>20672314</id><snippet>collections.defaultdict(set)</snippet></ROW><ROW><id>20672314</id><snippet>flipped</snippet></ROW><ROW><id>20672314</id><snippet>{
    'Albert': ['nickname', 'firstname'],
    'Angel':  ['username'],
    'Likins': ['surname']
}
</snippet></ROW><ROW><id>20672567</id><snippet>numpy.where</snippet></ROW><ROW><id>20672567</id><snippet>&gt;&gt;&gt; import numpy as np
&gt;&gt;&gt; k = np.array([True, False, False, True, False])
&gt;&gt;&gt; np.where(k, 2, 5)
array([2, 5, 5, 2, 5])
</snippet></ROW><ROW><id>20672975</id><snippet>GroupBy.transform</snippet></ROW><ROW><id>20672975</id><snippet>DataFrame.apply</snippet></ROW><ROW><id>20672975</id><snippet>multiple column transform
&lt;class 'pandas.core.series.Series'&gt;
&lt;class 'pandas.core.series.Series'&gt;
&lt;class 'pandas.core.series.Series'&gt;
&lt;class 'pandas.core.frame.DataFrame'&gt;
&lt;class 'pandas.core.frame.DataFrame'&gt;
&lt;class 'pandas.core.frame.DataFrame'&gt;
</snippet></ROW><ROW><id>20672975</id><snippet>import numpy as np
import pandas as pd

np.random.seed(0) # so we can all play along at home

categories = list('abc')
categories = categories * 4
data_1 = np.random.randn(len(categories))
data_2 = np.random.randn(len(categories))

df = pd.DataFrame({'category': categories, 'data_1': data_1, 'data_2': data_2})

import traceback
import inspect
import itertools

def f(x):
    flag = True
    stack = itertools.dropwhile(lambda x:"#stop here" not in x, 
                                traceback.format_stack(inspect.currentframe().f_back))
    print "*"*20
    print x
    print type(x)
    print
    print "\n".join(stack)
    return x

df.groupby(['category'])[['data_1', 'data_2']].transform(f) #stop here
</snippet></ROW><ROW><id>20673192</id><snippet>get_success_url()</snippet></ROW><ROW><id>20673192</id><snippet>.../update/None</snippet></ROW><ROW><id>20673266</id><snippet>TestProcess.run()</snippet></ROW><ROW><id>20673266</id><snippet>self.bar</snippet></ROW><ROW><id>20673266</id><snippet>import os
from multiprocessing import Process, Queue

class TestProcess( Process ):
    def __init__( self, foo ):
        super( TestProcess, self ).__init__()
        self.foo = foo
        self.bar = None
        self.que = Queue()
    def run( self ):
        from time import sleep
        sleep( 1 )
        self.bar = self.foo
        print( "pid2=%s, p.bar=%s" % (os.getpid(), self.bar ))
        self.que.put(self.bar)

p = TestProcess( 5 )
p.start()
p.join()
print( "pid1=%s, p.bar=%s" % (os.getpid(), p.bar ))
print(p.que.get())
</snippet></ROW><ROW><id>20673294</id><snippet>class CrossDock(object):
    def __init__(self):
        self.locations = []

    def add_location(self, location):
        if isinstance(location, Location):
            self.locations.append(location)
        else:
            raise TypeError("location must be Location, got: " +
                            repr(type(location)))
</snippet></ROW><ROW><id>20673335</id><snippet>XML()</snippet></ROW><ROW><id>20673335</id><snippet>STYLE</snippet></ROW><ROW><id>20673335</id><snippet>XML('&lt;style&gt;body { font: normal 16px/1.6em "Open Sans",Arial,Helvetica,sans-serif; }&lt;/style&gt;')
</snippet></ROW><ROW><id>20673374</id><snippet>if s.startswith("var/vob/):
    s = s[8:]
</snippet></ROW><ROW><id>20673374</id><snippet>lstrip</snippet></ROW><ROW><id>20673458</id><snippet>{</snippet></ROW><ROW><id>20673458</id><snippet>}</snippet></ROW><ROW><id>20673458</id><snippet>{tenant}</snippet></ROW><ROW><id>20673458</id><snippet>{admin}</snippet></ROW><ROW><id>20673458</id><snippet>{password}</snippet></ROW><ROW><id>20673458</id><snippet>{</snippet></ROW><ROW><id>20673458</id><snippet>}</snippet></ROW><ROW><id>20673458</id><snippet>credentials='{{"auth": {{"tenantName": "{tenant}", "passwordCredentials": {{"username": "{admin}", "password": "{password}"}}}}}}'.format(tenant='me',admin='test',password='123')
</snippet></ROW><ROW><id>20674656</id><snippet>a == b</snippet></ROW><ROW><id>20674656</id><snippet>a is b</snippet></ROW><ROW><id>20674656</id><snippet>a</snippet></ROW><ROW><id>20674656</id><snippet>b</snippet></ROW><ROW><id>20674656</id><snippet>id()</snippet></ROW><ROW><id>20674656</id><snippet>id()</snippet></ROW><ROW><id>20674656</id><snippet>id()</snippet></ROW><ROW><id>20674656</id><snippet>is</snippet></ROW><ROW><id>20674656</id><snippet>b</snippet></ROW><ROW><id>20674656</id><snippet>a = b
</snippet></ROW><ROW><id>20674656</id><snippet>a is b
</snippet></ROW><ROW><id>20674656</id><snippet>True</snippet></ROW><ROW><id>20674656</id><snippet>_sentinel = object() # create a unique object

def somefunc(optional=_sentinel):
    if optional is _sentinel:  # we know for sure nothing was passed
        ...
</snippet></ROW><ROW><id>20674656</id><snippet>None</snippet></ROW><ROW><id>20674656</id><snippet>True</snippet></ROW><ROW><id>20674656</id><snippet>False</snippet></ROW><ROW><id>20674656</id><snippet>if a is None:
</snippet></ROW><ROW><id>20674656</id><snippet>if a == None:
</snippet></ROW><ROW><id>20674656</id><snippet>a</snippet></ROW><ROW><id>20674656</id><snippet>None</snippet></ROW><ROW><id>20674656</id><snippet>a</snippet></ROW><ROW><id>20674656</id><snippet>a.__eq__(None)</snippet></ROW><ROW><id>20674656</id><snippet>True</snippet></ROW><ROW><id>20674656</id><snippet>is</snippet></ROW><ROW><id>20675387</id><snippet>def const(**kwargs):
    return kwargs.values()[0]


do_something(x, y, const(magic_code=161))
do_something(x, y, const(other_magic=162))
</snippet></ROW><ROW><id>20675387</id><snippet>values()</snippet></ROW><ROW><id>20675387</id><snippet>def const(**kwargs):
    for x in kwargs.values():
        return x
</snippet></ROW><ROW><id>20675527</id><snippet>import array

class A:
    def __init__(self):

        # This will work in Cython
        self.S=array.array("l", range(8))

    def test(self):
         self.S[0]+=1
</snippet></ROW><ROW><id>20675527</id><snippet>cimport cpython.array

cdef class RC4:
    cdef int [:] S
    cdef int next(self)
</snippet></ROW><ROW><id>20675932</id><snippet>t, p = scipy.stats.ttest_ind(df_a.dropna(axis=0), df_b.dropna(axis=0))</snippet></ROW><ROW><id>20675932</id><snippet>&gt;&gt;&gt; import pandas as pd
&gt;&gt;&gt; import scipy.stats
&gt;&gt;&gt; import numpy as np
&gt;&gt;&gt; df_a = pd.read_clibpoard()
&gt;&gt;&gt; df_b = df_a + np.random.randn(5, 7) 
&gt;&gt;&gt; df_c = df_a + np.random.randn(5, 7) 
&gt;&gt;&gt; _, p_b = scipy.stats.ttest_ind(df_a.dropna(axis=0), df_b.dropna(axis=0))
&gt;&gt;&gt; _, p_c = scipy.stats.ttest_ind(df_a.dropna(axis=0), df_c.dropna(axis=0))
&gt;&gt;&gt; pd.DataFrame([p_b, p_c], columns = df_a.columns, index = ['df_b', 'df_c'])
      VSPD1_perc  VSPD2_perc  VSPD3_perc  VSPD4_perc  VSPD5_perc  VSPD6_perc  \
df_b    0.425286    0.987956    0.644236    0.552244    0.432640    0.624528
df_c    0.947182    0.911384    0.189283    0.828780    0.697709    0.166956

      VSPD7_perc
df_b    0.546648
df_c    0.206950
</snippet></ROW><ROW><id>20676469</id><snippet>GridLayout</snippet></ROW><ROW><id>20676469</id><snippet>GridLayout:</snippet></ROW><ROW><id>20676469</id><snippet>my.kv</snippet></ROW><ROW><id>20676469</id><snippet>#:kivy 1.0

&lt;LoginScreen&gt;:
    cols: 2
    Label:
        text: "Username"
    TextInput:
        multiline: False

    Label:
        text: "Password"
    TextInput:
        multiline: False
</snippet></ROW><ROW><id>20676599</id><snippet>youruser ALL = NOPASSWD: /sbin/service tinyproxy start, /sbin/service tinyproxy stop, /sbin/service tinyproxy restart
</snippet></ROW><ROW><id>20676599</id><snippet>sudo /sbin/service tinyproxy restart
</snippet></ROW><ROW><id>20677015</id><snippet>def getfo(self, remotepath, fl, callback=None):
    fr = self.file(remotepath, 'rb')
    file_size = self.stat(remotepath).st_size
    fr.prefetch()
    try:
        size = 0
        while True:
            data = fr.read(32768)
            fl.write(data)
            size += len(data)
            if callback is not None:
                callback(size, file_size)
            if len(data) == 0:
                break
    finally:
        fr.close()
    return size
</snippet></ROW><ROW><id>20677015</id><snippet>def get(self, remotepath, localpath, callback=None): 
  fr = self.file(remotepath, 'rb') 
  file_size = self.stat(remotepath).st_size 
  fr.prefetch() 
  try: 
      fl = file(localpath, 'wb') 
      try: 
          size = 0 
          while True: 
              data = fr.read(32768) 
              if len(data) == 0: 
                  break 
              fl.write(data) 
              size += len(data) 
              if callback is not None: 
                  callback(size, file_size) 
      finally: 
          fl.close() 
  finally: 
      fr.close() 
</snippet></ROW><ROW><id>20677015</id><snippet>if len(data) == 0:
    break
</snippet></ROW><ROW><id>20677118</id><snippet>exe = EXE(pyz,
          a.scripts,
          a.binaries,
          Tree('..\\python\\images', prefix='images\\'),
....
</snippet></ROW><ROW><id>20677118</id><snippet>pyinstaller.py --windowed --noconsole --clean --onefile AppStart\AppStart.spec
</snippet></ROW><ROW><id>20677230</id><snippet>UnboundLocalError</snippet></ROW><ROW><id>20677230</id><snippet>_</snippet></ROW><ROW><id>20677230</id><snippet>NameError: global name '_' is not defined</snippet></ROW><ROW><id>20677230</id><snippet>_</snippet></ROW><ROW><id>20677230</id><snippet>_</snippet></ROW><ROW><id>20677230</id><snippet>for _ in range(n)</snippet></ROW><ROW><id>20677471</id><snippet> </snippet></ROW><ROW><id>20677471</id><snippet>' '</snippet></ROW><ROW><id>20677471</id><snippet>fromstring(xml_text)</snippet></ROW><ROW><id>20677471</id><snippet>fromstring()</snippet></ROW><ROW><id>20677471</id><snippet>import xml.etree.ElementTree

stop_escape   = lambda text: text.replace("&amp;#", "|STOP_ESCAPE|")
resume_escape = lambda text: text.replace("|STOP_ESCAPE|", "&amp;#")

xml_text = """
&lt;root&gt;
    &lt;mytag&gt;
        data_with_space 
    &lt;/mytag&gt;
&lt;/root&gt;"""
root = xml.etree.ElementTree.fromstring(stop_escape(xml_text))
mytag_txt = resume_escape(root.find("mytag").text)
print "original text: ", repr(mytag_txt)
print "stripped text: ", repr(mytag_txt.strip())
</snippet></ROW><ROW><id>20677471</id><snippet>original text:  '\n        data_with_space \n    '
stripped text:  'data_with_space '        
</snippet></ROW><ROW><id>20677733</id><snippet>sample       sample              sample
frame 0      frame 1             frame N
 _____ _____ _____ _____         _____ _____
| ch1 | ch2 | ch1 | ch2 | . . . | ch1 | ch2 |
|_____|_____|_____|_____|       |_____|_____|
 _____
|     | = one sample point
|_____|
</snippet></ROW><ROW><id>20677733</id><snippet>import wave

def stereo_to_mono(hex1, hex2):
    """average two hex string samples"""
    return hex((ord(hex1) + ord(hex2))/2)

wr = wave.open('piano2.wav','r')

nchannels, sampwidth, framerate, nframes, comptype, compname =  wr.getparams()

ww = wave.open('piano_mono.wav','wb')
ww.setparams((1,sampwidth,framerate,nframes,comptype,compname))

frames = wr.readframes(wr.getnframes()-1)

new_frames = ''

for (s1, s2) in zip(frames[0::2],frames[1::2]):
    new_frames += stereo_to_mono(s1,s2)[2:].zfill(2).decode('hex')

ww.writeframes(new_frames)
</snippet></ROW><ROW><id>20677751</id><snippet>conn = psycopg2.connect(...)
cursor = conn.cursor()
cursor.execute("SELECT id, ip FROM schema.table;")
rows = cursor.fetchall()
cursor.close()
conn.commit()
conn.close()
conn = None
</snippet></ROW><ROW><id>20677959</id><snippet>str.format</snippet></ROW><ROW><id>20677959</id><snippet>%</snippet></ROW><ROW><id>20677959</id><snippet>&gt;&gt;&gt; 'hello there %(5)s' % {'5': 'you'}
'hello there you'
</snippet></ROW><ROW><id>20677959</id><snippet>&gt;&gt;&gt; 'hello there %(5)s' % {5: 'you'}

Traceback (most recent call last):
  File "&lt;pyshell#1&gt;", line 1, in &lt;module&gt;
    'hello there %(5)s' % {5: 'you'}
KeyError: '5'
</snippet></ROW><ROW><id>20677983</id><snippet>numpy</snippet></ROW><ROW><id>20677983</id><snippet>def line_intersection(line1, line2):
    xdiff = (line1[0][0] - line1[1][0], line2[0][0] - line2[1][0])
    ydiff = (line1[0][1] - line2[1][1], line2[0][1] - line2[1][1])

    def det(a, b):
        return a[0] * b[1] - a[1] * b[0]

    div = det(xdiff, ydiff)
    if div == 0:
       raise Exception('lines do not intersect')

    d = (det(*line1), det(*line2))
    x = det(d, xdiff) / div
    y = det(d, ydiff) / div
    return x, y

print line_intersection((A, B), (C, D))
</snippet></ROW><ROW><id>20677983</id><snippet>A = (X, Y)
</snippet></ROW><ROW><id>20677992</id><snippet>from None</snippet></ROW><ROW><id>20677992</id><snippet>&gt;&gt;&gt; try:
        raise KeyboardInterrupt
    except:
        raise Exception from None

Traceback (most recent call last):
  File "&lt;pyshell#4&gt;", line 4, in &lt;module&gt;
    raise Exception from None
Exception
</snippet></ROW><ROW><id>20677992</id><snippet>try:
    try:
        raise Exception('inner')
    except:
        raise Exception('outer') from None
except Exception as e:
    print(e.__context__) # inner
</snippet></ROW><ROW><id>20678647</id><snippet>-1</snippet></ROW><ROW><id>20678647</id><snippet>import numpy as np
import matplotlib.pyplot as plt
from scipy.spatial import Voronoi

def voronoi_finite_polygons_2d(vor, radius=None):
    """
    Reconstruct infinite voronoi regions in a 2D diagram to finite
    regions.

    Parameters
    ----------
    vor : Voronoi
        Input diagram
    radius : float, optional
        Distance to 'points at infinity'.

    Returns
    -------
    regions : list of tuples
        Indices of vertices in each revised Voronoi regions.
    vertices : list of tuples
        Coordinates for revised Voronoi vertices. Same as coordinates
        of input vertices, with 'points at infinity' appended to the
        end.

    """

    if vor.points.shape[1] != 2:
        raise ValueError("Requires 2D input")

    new_regions = []
    new_vertices = vor.vertices.tolist()

    center = vor.points.mean(axis=0)
    if radius is None:
        radius = vor.points.ptp().max()

    # Construct a map containing all ridges for a given point
    all_ridges = {}
    for (p1, p2), (v1, v2) in zip(vor.ridge_points, vor.ridge_vertices):
        all_ridges.setdefault(p1, []).append((p2, v1, v2))
        all_ridges.setdefault(p2, []).append((p1, v1, v2))

    # Reconstruct infinite regions
    for p1, region in enumerate(vor.point_region):
        vertices = vor.regions[region]

        if all(v &gt;= 0 for v in vertices):
            # finite region
            new_regions.append(vertices)
            continue

        # reconstruct a non-finite region
        ridges = all_ridges[p1]
        new_region = [v for v in vertices if v &gt;= 0]

        for p2, v1, v2 in ridges:
            if v2 &lt; 0:
                v1, v2 = v2, v1
            if v1 &gt;= 0:
                # finite ridge: already in the region
                continue

            # Compute the missing endpoint of an infinite ridge

            t = vor.points[p2] - vor.points[p1] # tangent
            t /= np.linalg.norm(t)
            n = np.array([-t[1], t[0]])  # normal

            midpoint = vor.points[[p1, p2]].mean(axis=0)
            direction = np.sign(np.dot(midpoint - center, n)) * n
            far_point = vor.vertices[v2] + direction * radius

            new_region.append(len(new_vertices))
            new_vertices.append(far_point.tolist())

        # sort region counterclockwise
        vs = np.asarray([new_vertices[v] for v in new_region])
        c = vs.mean(axis=0)
        angles = np.arctan2(vs[:,1] - c[1], vs[:,0] - c[0])
        new_region = np.array(new_region)[np.argsort(angles)]

        # finish
        new_regions.append(new_region.tolist())

    return new_regions, np.asarray(new_vertices)

# make up data points
np.random.seed(1234)
points = np.random.rand(15, 2)

# compute Voronoi tesselation
vor = Voronoi(points)

# plot
regions, vertices = voronoi_finite_polygons_2d(vor)
print "--"
print regions
print "--"
print vertices

# colorize
for region in regions:
    polygon = vertices[region]
    plt.fill(*zip(*polygon), alpha=0.4)

plt.plot(points[:,0], points[:,1], 'ko')
plt.xlim(vor.min_bound[0] - 0.1, vor.max_bound[0] + 0.1)
plt.ylim(vor.min_bound[1] - 0.1, vor.max_bound[1] + 0.1)

plt.show()
</snippet></ROW><ROW><id>20678676</id><snippet>plt.close()
</snippet></ROW><ROW><id>20678723</id><snippet>.Skip()</snippet></ROW><ROW><id>20678723</id><snippet>.Take()</snippet></ROW><ROW><id>20678723</id><snippet>var result1 = myList.Skip(2).Take(4);
var result2 = myList.Skip(1);
var result3 = myList.Skip(myList.Count() - 3);
var result4 = myList.Skip(myList.Count() - 3).Concat(myList.Skip(4))
</snippet></ROW><ROW><id>20678900</id><snippet>forms</snippet></ROW><ROW><id>20678900</id><snippet>LoginForm</snippet></ROW><ROW><id>20678900</id><snippet>from flask.ext.wtf import Form
from wtforms import TextField, BooleanField
from wtforms.validators import Required

class LoginForm(Form):
    openid = TextField('openid', validators = [Required()])
    remember_me = BooleanField('remember_me', default = False)
</snippet></ROW><ROW><id>20679387</id><snippet>R</snippet></ROW><ROW><id>20679387</id><snippet>10000</snippet></ROW><ROW><id>20679387</id><snippet>lst = []

for i in range(10000):
    lst.append(i)

print lst
</snippet></ROW><ROW><id>20679387</id><snippet>for i in range(10000):
    print i
</snippet></ROW><ROW><id>20679387</id><snippet>xrange()</snippet></ROW><ROW><id>20679387</id><snippet>range()</snippet></ROW><ROW><id>20679387</id><snippet>xrange()</snippet></ROW><ROW><id>20679614</id><snippet>model.objects.filter()
</snippet></ROW><ROW><id>20679614</id><snippet>dns_obj_list = dns.objects.all()

ip_addr = []
for row_obj in dns_obj_list:
    ip_addr.append(row_obj.ip)
</snippet></ROW><ROW><id>20679795</id><snippet>for elem in totallist:
    print all(elem[:24])  # first 24 elements are non-empty.
</snippet></ROW><ROW><id>20679807</id><snippet>PsExec \\remote-server -c long_running.py
</snippet></ROW><ROW><id>20679807</id><snippet>plink remote-server@user -m long_running.py
</snippet></ROW><ROW><id>20679807</id><snippet>ssh</snippet></ROW><ROW><id>20679807</id><snippet>ssh remote-server@user 'bash -s' &lt; long_running.py
</snippet></ROW><ROW><id>20679807</id><snippet>ssh</snippet></ROW><ROW><id>20679986</id><snippet>sudo</snippet></ROW><ROW><id>20679986</id><snippet>normal_user</snippet></ROW><ROW><id>20679986</id><snippet> stdin, stdout, stderr = ssh.exec_command('sudo -i -H -- echo $USER ; echo $USER')
</snippet></ROW><ROW><id>20679986</id><snippet>.profile</snippet></ROW><ROW><id>20679986</id><snippet>$HOME</snippet></ROW><ROW><id>20679986</id><snippet>echo $USER</snippet></ROW><ROW><id>20679986</id><snippet>normal_user</snippet></ROW><ROW><id>20680187</id><snippet>t = [[s.strip() for s in nested] for nested in t]
</snippet></ROW><ROW><id>20680187</id><snippet>str.rstrip('\n')</snippet></ROW><ROW><id>20680187</id><snippet>t = [[s.rstrip('\n') for s in nested] for nested in t]
</snippet></ROW><ROW><id>20680187</id><snippet>t = [[s.rstrip('\n') for s in nested if not s.isspace()] for nested in t]
t = [nested for nested in t if nested]
</snippet></ROW><ROW><id>20680187</id><snippet>t = filter(None, nested)
</snippet></ROW><ROW><id>20680320</id><snippet>import wx
import wx.grid

class MainWindow(wx.Frame):
    def __init__(self, *args, **kwargs):
        wx.Frame.__init__(self, *args, **kwargs)

        self.panel = wx.Panel(self)
        self.grid = wx.grid.Grid(self.panel)
        self.grid.CreateGrid(3, 3)
        self.grid.Bind(wx.EVT_KEY_DOWN, self.OnKeyDown)
        self.grid.Bind(wx.EVT_KEY_UP, self.OnKeyUp)
        self.grid.Bind(wx.EVT_CHAR_HOOK, self.OnChar)

        self.sizer = wx.BoxSizer()
        self.sizer.Add(self.grid, 1)

        self.panel.SetSizerAndFit(self.sizer)  
        self.Show()

    # You may or may not want to add e.Skip() to your RETURN key handling.
    # If you do not call e.Skip(), the event is not propagated to the widget.
    # Depends on your app logic if that is something you want or not.

    def OnKeyDown(self, e):      
        # Python 2.7, wxPython 2.8 - Works, but more like EVT_CHAR_HOOK
        # Python 3.3, wxPython Phoenix - Never shows up
        code = e.GetKeyCode()
        if code in [wx.WXK_RETURN, wx.WXK_NUMPAD_ENTER]:
            print("Return key down")
        else:
            e.Skip() 

    def OnKeyUp(self, e):
        code = e.GetKeyCode()
        if code in [wx.WXK_RETURN, wx.WXK_NUMPAD_ENTER]:
            print("Return key up")
        else:
            e.Skip() 

    def OnChar(self, e):
        # Python 2.7, wxPython 2.8 - Never shows up
        # Python 3.3, wxPython Phoenix - Works
        code = e.GetKeyCode()
        if code in [wx.WXK_RETURN, wx.WXK_NUMPAD_ENTER]:
            print("Return key char")
        else:
            e.Skip() 


app = wx.App(False)
win = MainWindow(None)
app.MainLoop()
</snippet></ROW><ROW><id>20680646</id><snippet>x = (0,1,21)

# Assumes that the values in your tuple will always be an integer.
s = '{:d} days, {:d}:{:d}'.format(*x)

print s # 0 days, 1:21
</snippet></ROW><ROW><id>20680646</id><snippet>def time_since(self):
    time_since = timezone.now() - self.date_opened
    out = [time_since.days, time_since.seconds//3600, (time_since.seconds//60)%60]

    # As per Aamir Adnan's suggestion check whether day or days is applicable
    if x[0] == 1:
        return '{:d} day, {:d}:{:d}'.format(*x)
    else:
        return '{:d} days, {:d}:{:d}'.format(*x)
</snippet></ROW><ROW><id>20680762</id><snippet>from subprocess import Popen, PIPE

def local(command):
    print 'local', local
    process = Popen(command.split(), stdout=PIPE, stderr=PIPE)
    out = process.stdout.read()
    err = process.stderr.read()
    print 'out', out
    print 'err', err
    returncode = process.wait()
    if returncode:
        raise Exception(returncode, err)
    else:
        return out
</snippet></ROW><ROW><id>20680794</id><snippet>text1</snippet></ROW><ROW><id>20680794</id><snippet>TitlePanel</snippet></ROW><ROW><id>20680794</id><snippet>TitlePanel</snippet></ROW><ROW><id>20680794</id><snippet>text1</snippet></ROW><ROW><id>20680794</id><snippet>Hide()</snippet></ROW><ROW><id>20680794</id><snippet>Show()</snippet></ROW><ROW><id>20680794</id><snippet>sizer.Replace(old_widget, new_widget)</snippet></ROW><ROW><id>20680794</id><snippet>import wx
class myframe(wx.Frame):
    def __init__(self):
        wx.Frame.__init__(self, None, size=(1000,700))

        self.TitlePanel = wx.Panel(self, size=(350, 400))
        self.TitlePanel.SetBackgroundColour("green")

        self.newPanel = wx.Panel(self, size=(300, 250))
        self.newPanel.SetBackgroundColour("black")
        self.newPanel.Hide()

        self.imgPanel = wx.Panel(self, size=(300, 250))
        self.imgPanel.SetBackgroundColour("red")

        self.modulePanel=wx.Panel(self, size=(350, 250))
        self.modulePanel.SetBackgroundColour("blue")

        self.TCPanel=wx.Panel(self, size=(300, 250))
        self.TCPanel.SetBackgroundColour("yellow")

        self.myGridSizer = wx.GridBagSizer(1,1)
        self.myGridSizer.SetEmptyCellSize((0, 0))
        self.myGridSizer.Add(self.TitlePanel, pos=(0, 0), span=(4,8), flag=wx.EXPAND)
        self.myGridSizer.Add(self.imgPanel, pos=(0, 10), span=(4,8), flag=wx.ALL)
        self.myGridSizer.Add(self.modulePanel, pos=(10, 0), span=(1,8), flag=wx.ALL)
        self.myGridSizer.Add(self.TCPanel, pos=(10, 10), span=(4,8), flag=wx.ALL)

        self.text1 = wx.StaticText(self.TitlePanel, label="This is a test run",style=2,size=(350,-1))
        font = wx.Font(18, wx.DECORATIVE, wx.ITALIC,wx.BOLD, wx.NORMAL)
        self.text1.SetFont(font)

        self.titleSizer = wx.BoxSizer()
        self.titleSizer.Add(self.text1, flag=wx.TOP|wx.LEFT|wx.ALIGN_RIGHT,border=10)
        self.TitlePanel.SetSizer(self.titleSizer)

        self.SetSizer(self.myGridSizer)

        self.text1.Bind(wx.EVT_LEFT_DCLICK, self.hideMe)
        self.imgPanel.Bind(wx.EVT_LEFT_DCLICK, self.showMe)


    def hideMe(self, event):
        self.TCPanel.Hide()
        self.myGridSizer.Replace(self.TCPanel, self.newPanel)
        self.newPanel.Show()
        self.Layout()

    def showMe(self, event):
        self.newPanel.Hide()
        self.myGridSizer.Replace(self.newPanel, self.TCPanel)
        self.TCPanel.Show()
        self.Layout()

if __name__ == "__main__":
    app = wx.App()
    region = myframe()
    region.Show()
    app.MainLoop()
</snippet></ROW><ROW><id>20680942</id><snippet>class CConfigWindow(QtGui.QMainWindow):    
    def __init__(self):
        super(CConfigWindow, self).__init__()
        self.setGeometry(200, 200, 800, 600)
        self.setWindowTitle("config")
        self.setAttribute(QtCore.Qt.WA_DeleteOnClose)
        paneW = QtGui.QWidget()
        grid = QtGui.QGridLayout()
        paneW.setLayout(grid)
        tab = QtGui.QTabWidget(self)
        grid.addWidget(tab,0,0,1,5)

        hest2 = QtGui.QPushButton("Ok")
        hest2.clicked.connect(self.ok)
        grid.addWidget(hest2,1,0)

        hest2 = QtGui.QPushButton("Cancel")
        hest2.clicked.connect(self.cancel)
        grid.addWidget(hest2,1,1)

        hest2 = QtGui.QPushButton("Factory Defaults")
        hest2.clicked.connect(self.Reset)
        grid.addWidget(hest2,1,2)

        self.setCentralWidget(paneW)
        self.show()

        self.activateWindow()
        self.raise_()

    def Reset(self):
        pass            
    def ok(self):
        self.close()

    def cancel(self):
        self.close()

    def closeEvent(self, event):
        event.accept()

self.crap = CConfigWindow()
</snippet></ROW><ROW><id>20681379</id><snippet>argparse</snippet></ROW><ROW><id>20681379</id><snippet>nargs</snippet></ROW><ROW><id>20681379</id><snippet>metavar</snippet></ROW><ROW><id>20681379</id><snippet>integers</snippet></ROW><ROW><id>20681379</id><snippet>--integers</snippet></ROW><ROW><id>20681379</id><snippet>parser.add_argument('--integers', metavar=('n','h'), type=int, nargs=2, help='Dimensions of the matrix')
</snippet></ROW><ROW><id>20681379</id><snippet>parser.add_argument('n', type=int, help='Dimensions of the matrix')
parser.add_argument('h', type=int, help='Dimensions of the matrix')
</snippet></ROW><ROW><id>20681766</id><snippet>raw_input()</snippet></ROW><ROW><id>20681766</id><snippet>raw_input()</snippet></ROW><ROW><id>20681766</id><snippet>import sys
import re

def ordnaText(text): 
    text = text.lower()
    text = re.sub(u'\W', '', text, flags=re.UNICODE)
    if text.isalnum() == True:
        return text

userinput = raw_input('....')
userinput = userinput.decode(sys.stdin.encoding)
something = ordnaText(userinput)
</snippet></ROW><ROW><id>20681766</id><snippet>sys.stdin.encoding</snippet></ROW><ROW><id>20681766</id><snippet>flags=re.UNICODE</snippet></ROW><ROW><id>20681766</id><snippet>u'\W'</snippet></ROW><ROW><id>20682679</id><snippet>return</snippet></ROW><ROW><id>20682679</id><snippet>def foo(arg1, arg2):
   print arg1, arg2

def bar():
   y = raw_input("y please")
   return y

what = "Hello"
whatelse = bar()
foo(what, whatelse)
</snippet></ROW><ROW><id>20682679</id><snippet>input</snippet></ROW><ROW><id>20682679</id><snippet>import math

def Start():
    x = input("Please input what you want do to a number then the number; a whole number.\n(Example pi 2)\nYou can pow (pow 2 3; 2 to the power of 3),pi,square and cube: ").lower()
    x = x.split()
    Action = x[0]
    number = int(x[1])
    print ("Your number: " + str(number))
    return (Action, number)


class Cal:
    def pi(self, number):
        print ("Your number multiplied by Pi: " + str(math.pi * number))

def Again():
    y = input("Type 'Yes' to do another one if not type 'No': ").lower()

    if "yes" in y:
        print ("\n")
        args = Start()
        Work(*args)
        Again()
    elif "no" in y:
        pass

def Work(Action, *args):
    if Action.startswith("pi"):
        Cal().pi(*args)
    else:
        pass

def Main():
    args = Start()
    Work(*args)
    Again()

if __name__ == "__main__":
    Main()
</snippet></ROW><ROW><id>20682775</id><snippet>map(x, y)</snippet></ROW><ROW><id>20682775</id><snippet>y.Select(item =&gt; x(item))
</snippet></ROW><ROW><id>20682775</id><snippet>map(str, [eventCodes] + data)</snippet></ROW><ROW><id>20682775</id><snippet>([eventCodes] + data).Select(item =&gt; str(item))`
 ^-----------------^                 ^-^
</snippet></ROW><ROW><id>20682775</id><snippet>str</snippet></ROW><ROW><id>20682775</id><snippet>ToString</snippet></ROW><ROW><id>20682775</id><snippet>([eventCodes] + data).Select(item =&gt; item.ToString())`
 ^-----------------^                 
</snippet></ROW><ROW><id>20682775</id><snippet>[eventCodes] + data</snippet></ROW><ROW><id>20682775</id><snippet>eventCodes</snippet></ROW><ROW><id>20682775</id><snippet>data</snippet></ROW><ROW><id>20682775</id><snippet>new[] { eventCodes }.Concat(data).Select(item =&gt; item.ToString())
</snippet></ROW><ROW><id>20682775</id><snippet>`\x01`.join(...)
</snippet></ROW><ROW><id>20682775</id><snippet>string.Join("\x01", ...)
</snippet></ROW><ROW><id>20682775</id><snippet>string.Join("\x01", new[] { eventCodes }.Concat(data)
    .Select(item =&gt; item.ToString()))
</snippet></ROW><ROW><id>20682775</id><snippet>public void sendData(string eventCodes, IEnumerable&lt;string&gt; data = null)
{
    if (data != null)
        push(string.Join("\x01", new[] { eventCodes }
            .Concat(data.Select(item =&gt; item.ToString()))) + "\x00");
    else
        push(eventCodes + "\x00");
}
</snippet></ROW><ROW><id>20682775</id><snippet>public void sendData(string eventCodes, IEnumerable&lt;string&gt; data = null)
{
    string element;
    if (data != null)
        element = string.Join("\x01", new[] { eventCodes }
            .Concat(data.Select(item =&gt; item.ToString())))
    else
        element = eventCodes;
    push(element + "\x00");
}
</snippet></ROW><ROW><id>20683224</id><snippet>enumerate</snippet></ROW><ROW><id>20683224</id><snippet>[index for index, item in enumerate(thelist) if item[0] == "332"]
</snippet></ROW><ROW><id>20683224</id><snippet>332</snippet></ROW><ROW><id>20683224</id><snippet>332</snippet></ROW><ROW><id>20683224</id><snippet>def getIndex():
    for index, item in enumerate(thelist):
       if item[0] == "332":
          return index
</snippet></ROW><ROW><id>20683341</id><snippet>converters : dict. optional

Dict of functions for converting values in certain columns. Keys can either be integers or column labels
</snippet></ROW><ROW><id>20683341</id><snippet>def CustomParser(data):
  import json
  j1 = json.loads(data)
  return j1
</snippet></ROW><ROW><id>20683341</id><snippet>df = pandas.read_csv(f1, converters={'stats':CustomParser},header=0)
</snippet></ROW><ROW><id>20683341</id><snippet>df[df['stats'][0].keys()] = df['stats'].apply(pandas.Series)
</snippet></ROW><ROW><id>20683396</id><snippet>import pip

package = [pckg for pckg in pip.get_installed_distributions() 
            if pckg.project_name == 'package_name'][0]
#  package var will contain some metadata: version, project_name and others.
</snippet></ROW><ROW><id>20683396</id><snippet>pkg_resources</snippet></ROW><ROW><id>20683396</id><snippet>from pkg_resources import get_distribution

pkg = get_distribution('package_name')  # also contains a metadata
</snippet></ROW><ROW><id>20683729</id><snippet>roi = image[y:y+h , x:x+w]

cv2.matchTemplate(roi, templ, ...
</snippet></ROW></DATA>