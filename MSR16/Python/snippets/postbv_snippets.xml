<?xml version="1.0" encoding="UTF-8" standalone="no"?><DATA><ROW><id>11014683</id><snippet>import shelve

d = shelve.open('my_shelf')
for i in range(100000):
    d[str(i)] = 'Item %s' % i
d.close()
d = shelve.open('my_shelf')
&gt;&gt;&gt; d['50000']
'Item 50000'
</snippet></ROW><ROW><id>11014820</id><snippet>itemsToCheck = {7: 'on', 8: 'on'}

&lt;input type="checkbox" {% if MyModel.id in itemsToCheck.keys %}checked="checked"{% endif %} name="{{ MyModel.id }}"/&gt;
</snippet></ROW><ROW><id>11014820</id><snippet>[(8, 'on'), (9, 'on')]
</snippet></ROW><ROW><id>11014820</id><snippet>{% if MyModel.id|stringformat:"s" in itemsToCheck.keys %}
</snippet></ROW><ROW><id>11014820</id><snippet>@register.inclusion_tag('checkbox.html')
def my_checkboxes(request, items):
    return {"items": [{'id': i.id, 'checked': request.POST[str(i.id)] == 'on'} for i in items]}
</snippet></ROW><ROW><id>11014820</id><snippet>{% for i in items %}
&lt;input type="checkbox" {% if i.checked %}checked="checked"{% endif %} name="{{ i.id }}"/&gt;
{% endfor %}
</snippet></ROW><ROW><id>11014928</id><snippet>request.body</snippet></ROW><ROW><id>11014928</id><snippet>request.body.read()</snippet></ROW><ROW><id>11015405</id><snippet>logger = logging.getLogger(__name__)
</snippet></ROW><ROW><id>11015407</id><snippet>jinja2</snippet></ROW><ROW><id>11015407</id><snippet>webapp2_extras</snippet></ROW><ROW><id>11015407</id><snippet>jinja2.Environment</snippet></ROW><ROW><id>11015407</id><snippet>from webapp2_extras import jinja2
jinja = jinja2.get_jinja2(app=self.app)
jinja.render_template("index.html")
</snippet></ROW><ROW><id>11015407</id><snippet>jinja2</snippet></ROW><ROW><id>11015407</id><snippet>libraries</snippet></ROW><ROW><id>11015407</id><snippet>app.yaml</snippet></ROW><ROW><id>11015407</id><snippet>libraries:                                                                      
- name: jinja2                                                                  
  version: "2.6" 
</snippet></ROW><ROW><id>11015634</id><snippet>d = {' a ':1,'b ':2}
key = 'a'
print any(key == k.strip() for k in d.iterkeys())
</snippet></ROW><ROW><id>11015634</id><snippet>True</snippet></ROW><ROW><id>11015634</id><snippet>def get_stripped(d, key):
    return next((v for k,v in d.iteritems() if key == k.strip()), None)

print get_stripped(d, 'a') # prints 1
print get_stripped(d, 'c') # prints None
</snippet></ROW><ROW><id>11015634</id><snippet>d = {' a ': 1, '   a': 2}</snippet></ROW><ROW><id>11015634</id><snippet>key = 'a'</snippet></ROW><ROW><id>11015904</id><snippet>numexpr</snippet></ROW><ROW><id>11015904</id><snippet>setup.py</snippet></ROW><ROW><id>11015904</id><snippet>pip install</snippet></ROW><ROW><id>11015904</id><snippet>pip install numpy</snippet></ROW><ROW><id>11015904</id><snippet>pip install -r requirements.txt</snippet></ROW><ROW><id>11015976</id><snippet>restype = ctypes.c_int
argtypes = [ctypes.c_int, ctypes.c_double]        # or whatever
functype = ctypes.CFUNCTYPE(restype, *argtypes)
wrapper = functype(address_of_static_function_as_an_int)
</snippet></ROW><ROW><id>11016406</id><snippet>(i, j)</snippet></ROW><ROW><id>11016406</id><snippet>adj_list</snippet></ROW><ROW><id>11016406</id><snippet>i</snippet></ROW><ROW><id>11016406</id><snippet>j</snippet></ROW><ROW><id>11016406</id><snippet>i_indices, j_indices = zip(*adj_list)
adj_matrix = scipy.sparse.coo_matrix((np.ones(number_of_nodes),
                                     (i_indices, j_indices)))
</snippet></ROW><ROW><id>11016430</id><snippet>trie</snippet></ROW><ROW><id>11016430</id><snippet>&gt;&gt;&gt; _end = '_end_'
&gt;&gt;&gt; 
&gt;&gt;&gt; def make_trie(*words):
...     root = dict()
...     for word in words:
...         current_dict = root
...         for letter in word:
...             current_dict = current_dict.setdefault(letter, {})
...         current_dict = current_dict.setdefault(_end, _end)
...     return root
... 
&gt;&gt;&gt; make_trie('foo', 'bar', 'baz', 'barz')
{'b': {'a': {'r': {'_end_': '_end_', 'z': {'_end_': '_end_'}}, 
             'z': {'_end_': '_end_'}}}, 
 'f': {'o': {'o': {'_end_': '_end_'}}}}
</snippet></ROW><ROW><id>11016430</id><snippet>&gt;&gt;&gt; def in_trie(trie, word):
...     current_dict = trie
...     for letter in word:
...         if letter in current_dict:
...             current_dict = current_dict[letter]
...         else:
...             return False
...     else:
...         if _end in current_dict:
...             return True
...         else:
...             return False
... 
&gt;&gt;&gt; in_trie(make_trie('foo', 'bar', 'baz', 'barz'), 'baz')
True
&gt;&gt;&gt; in_trie(make_trie('foo', 'bar', 'baz', 'barz'), 'barz')
True
&gt;&gt;&gt; in_trie(make_trie('foo', 'bar', 'baz', 'barz'), 'barzz')
False
&gt;&gt;&gt; in_trie(make_trie('foo', 'bar', 'baz', 'barz'), 'bart')
False
&gt;&gt;&gt; in_trie(make_trie('foo', 'bar', 'baz', 'barz'), 'ba')
False
</snippet></ROW><ROW><id>11016430</id><snippet>_end</snippet></ROW><ROW><id>11016686</id><snippet>ConfigParser</snippet></ROW><ROW><id>11016686</id><snippet>configparser</snippet></ROW><ROW><id>11016686</id><snippet>import</snippet></ROW><ROW><id>11016789</id><snippet>numpy.any()</snippet></ROW><ROW><id>11016789</id><snippet>any()</snippet></ROW><ROW><id>11016789</id><snippet>from numpy import *</snippet></ROW><ROW><id>11016789</id><snippet>from numpy import any</snippet></ROW><ROW><id>11016789</id><snippet>scipy</snippet></ROW><ROW><id>11016789</id><snippet>pylab</snippet></ROW><ROW><id>11016840</id><snippet>dict</snippet></ROW><ROW><id>11016840</id><snippet>csv</snippet></ROW><ROW><id>11016840</id><snippet>urllib.urlopen(z[0])  # First column in the line</snippet></ROW><ROW><id>11016840</id><snippet>open()</snippet></ROW><ROW><id>11016915</id><snippet>pip install pil
</snippet></ROW><ROW><id>11017487</id><snippet>numpy.histogram2d</snippet></ROW><ROW><id>11017487</id><snippet>import numpy as np
import matplotlib.pyplot as plt

t = np.linspace(0, 4*np.pi, 100)
x = np.cos(3 * t)
y = np.sin(t)

gridx = np.linspace(-1, 1, 5)
gridy = np.linspace(-1, 1, 5)

grid, _, _ = np.histogram2d(x, y, bins=[gridx, gridy])

plt.figure()
plt.plot(x, y, 'ro')
plt.grid(True)

plt.figure()
plt.pcolormesh(gridx, gridy, grid)
plt.plot(x, y, 'ro')
plt.colorbar()

plt.show()
</snippet></ROW><ROW><id>11017685</id><snippet>__init__</snippet></ROW><ROW><id>11017685</id><snippet>_build_query</snippet></ROW><ROW><id>11017685</id><snippet>class QueryHelper(object):
    def __init__(self, param, text):
        self._param = param
        self._query = self._build_query(text)

    def _build_query(self, text):
        return text + " and ham!"

class RefinedQueryHelper(QueryHelper):
    def _build_query(self, text):
        # no need to know how the query object is going to be used
        q = super(RefinedQueryHelper, self)._build_query()
        return q.replace("ham", "spam")
</snippet></ROW><ROW><id>11017685</id><snippet>class QueryHelper(object):
    def __init__(self, param, text):
        self._param = param
        self._build_query(text)

    def _build_query(self, text):
        self._query = text + " and ham!"

class RefinedQueryHelper(QueryHelper):
    def _build_query(self, text):
        # what if we want to store the query in __query instead?
        # then we need to modify two classes...
        super(RefinedQueryHelper, self)._build_query()
        self._query = self._query.replace("ham", "spam")
</snippet></ROW><ROW><id>11017685</id><snippet>_set_query</snippet></ROW><ROW><id>11017712</id><snippet>tell()</snippet></ROW><ROW><id>11017712</id><snippet>&gt;&gt;&gt; f = open('test', 'a+')
&gt;&gt;&gt; f.tell()
0
&gt;&gt;&gt; f.write('this is a test\n')
&gt;&gt;&gt; f.tell()
15
&gt;&gt;&gt; f.close()
&gt;&gt;&gt; f = open('test', 'a+')
&gt;&gt;&gt; f.tell()
0
&gt;&gt;&gt; f.write('this is a test\n')
&gt;&gt;&gt; f.tell()
30
</snippet></ROW><ROW><id>11017712</id><snippet>fopen()</snippet></ROW><ROW><id>11017712</id><snippet>   a+     Open for reading and appending (writing at end  of  file).   The
          file is created if it does not exist.  The initial file position
          for reading is at the beginning  of  the  file,  but  output  is
          always appended to the end of the file.
</snippet></ROW><ROW><id>11017749</id><snippet>final_potential</snippet></ROW><ROW><id>11017749</id><snippet>&gt;&gt;&gt; dim_x = np.linspace(0, 2, 5)
&gt;&gt;&gt; dim_y = np.linspace(0, 2, 5)
&gt;&gt;&gt; X * Y
array([[ 0.  ,  0.  ,  0.  ,  0.  ,  0.  ],
       [ 0.  ,  0.25,  0.5 ,  0.75,  1.  ],
       [ 0.  ,  0.5 ,  1.  ,  1.5 ,  2.  ],
       [ 0.  ,  0.75,  1.5 ,  2.25,  3.  ],
       [ 0.  ,  1.  ,  2.  ,  3.  ,  4.  ]])
</snippet></ROW><ROW><id>11017749</id><snippet>vectorize</snippet></ROW><ROW><id>11017749</id><snippet>&gt;&gt;&gt; np.vectorize(lambda x, y: x * y + 2)(X, Y)
array([[ 2.  ,  2.  ,  2.  ,  2.  ,  2.  ],
       [ 2.  ,  2.25,  2.5 ,  2.75,  3.  ],
       [ 2.  ,  2.5 ,  3.  ,  3.5 ,  4.  ],
       [ 2.  ,  2.75,  3.5 ,  4.25,  5.  ],
       [ 2.  ,  3.  ,  4.  ,  5.  ,  6.  ]])
</snippet></ROW><ROW><id>11017749</id><snippet>def wrapper(x, y): 
    return aux_functions.final_potential(complex(x, y), element_list)

a = np.vectorize(wrapper)(X, Y)
</snippet></ROW><ROW><id>11017749</id><snippet>for</snippet></ROW><ROW><id>11017749</id><snippet>vectorize</snippet></ROW><ROW><id>11017749</id><snippet>X * Y</snippet></ROW><ROW><id>11017839</id><snippet>@app.route("/images/&lt;int:pid&gt;.jpg")
def getImage(pid):
    response = make_response(image_binary)
    response.headers['Content-Type'] = 'image/jpeg'
    response.headers['Content-Disposition'] = 'attachment; filename=img.jpg'
    return response
</snippet></ROW><ROW><id>11017839</id><snippet>flask.sendfile</snippet></ROW><ROW><id>11017839</id><snippet>return send_file(io.BytesIO(image_binary))
</snippet></ROW><ROW><id>11018063</id><snippet>import pdb
pdb.set_trace()
</snippet></ROW><ROW><id>11018255</id><snippet>\r</snippet></ROW><ROW><id>11018255</id><snippet>flush</snippet></ROW><ROW><id>11018255</id><snippet>sys.stdout.write('{0} imported\r'.format(tot))
sys.stdout.flush()
</snippet></ROW><ROW><id>11018255</id><snippet>\r</snippet></ROW><ROW><id>11018674</id><snippet>apt-get install python-dev
</snippet></ROW><ROW><id>11018683</id><snippet>functools.partial()</snippet></ROW><ROW><id>11018683</id><snippet>from functools import partial

...

QtCore.QObject.connect(..., partial(self.SelectLogFileToJoin, 1))
</snippet></ROW><ROW><id>11019299</id><snippet>functional</snippet></ROW><ROW><id>11019341</id><snippet>seq="----AB--C-D-----"
newseq="--A--BC---D-"
seq=list(seq) #changing maaster sequence from string to list
newseq=list(newseq) #changing new sequence from string to list
n=len(seq) #obtaining length of master sequence
newseq.extend('.') #adding a tag to end of new sequence to account for terminal gaps

print(seq, newseq,n) #verification of sequences in list form and length
for i in range(len(seq)):
    if seq[i]!=newseq[i]:
       if seq[i]=='-':
           newseq.insert(i,'-')

       elif newseq[i]=='-':
           newseq.insert(i,seq[i])
       else:
           newseq.insert(i,seq[i])

else:
    newseq=newseq[0:len(seq)]

old=''.join(seq) #changing list to string
new=''.join(newseq) #changing list to string
new=new.strip('.') #removing tag

print(old) #verification of master-sequence fidelity
print(new) #verification of matching sequence
</snippet></ROW><ROW><id>11019341</id><snippet>----AB--C-D-----
----AB--C-D-----
</snippet></ROW><ROW><id>11019341</id><snippet>AA---A--A-----A-----</snippet></ROW><ROW><id>11019341</id><snippet>---A-A--AA---A--
---A-A--AA---A--
</snippet></ROW><ROW><id>11019516</id><snippet>http://jalopnik.com/5912009/prius-driver-beat-up-after-taking-out-two-bikers</snippet></ROW><ROW><id>11019516</id><snippet>http://jalopnik.com/index.php?op=threadlist&amp;post_id=5912009&amp;mode=all&amp;page=0&amp;repliesmode=hide&amp;nouser=true&amp;selected_thread=null</snippet></ROW><ROW><id>11019651</id><snippet>numpify</snippet></ROW><ROW><id>11019651</id><snippet>H_eff_p_n</snippet></ROW><ROW><id>11019651</id><snippet>dWave</snippet></ROW><ROW><id>11019651</id><snippet>lambdify</snippet></ROW><ROW><id>11019651</id><snippet>exec</snippet></ROW><ROW><id>11019651</id><snippet>lambda</snippet></ROW><ROW><id>11019651</id><snippet>&gt;&gt;&gt; (lambda x: x).func_name
'&lt;lambda&gt;'
</snippet></ROW><ROW><id>11019651</id><snippet>def</snippet></ROW><ROW><id>11019651</id><snippet>H_eff_p_n_lambda=numpify(self.H_eff_p)
def H_eff_p_n(*args, **kwargs):
    return H_eff_p_n_lambda(*args, **kwargs)
</snippet></ROW><ROW><id>11019651</id><snippet>cumtime</snippet></ROW><ROW><id>11019651</id><snippet>__name__</snippet></ROW><ROW><id>11019651</id><snippet>func_name</snippet></ROW><ROW><id>11019651</id><snippet>profile</snippet></ROW><ROW><id>11019651</id><snippet>cProfile</snippet></ROW><ROW><id>11019651</id><snippet>profile</snippet></ROW><ROW><id>11019651</id><snippet>func.func_name</snippet></ROW><ROW><id>11019651</id><snippet>func.func_code.co_name</snippet></ROW><ROW><id>11020074</id><snippet>splmake/spleval</snippet></ROW><ROW><id>11020327</id><snippet>i</snippet></ROW><ROW><id>11020327</id><snippet>4</snippet></ROW><ROW><id>11020327</id><snippet>j</snippet></ROW><ROW><id>11020327</id><snippet>4</snippet></ROW><ROW><id>11020327</id><snippet>k</snippet></ROW><ROW><id>11020327</id><snippet>4</snippet></ROW><ROW><id>11020327</id><snippet>4</snippet></ROW><ROW><id>11020327</id><snippet>if i != 4 or j != 4 or k != 4:
</snippet></ROW><ROW><id>11020327</id><snippet>if not (i == 4 and j == 4 and k == 4):
</snippet></ROW><ROW><id>11020327</id><snippet>if i, j, k != 4, 4, 4:
</snippet></ROW><ROW><id>11020327</id><snippet>points = itertools.product(range(0, 8 * a, a), repeat=3)
points = (p for p in points if p != (4 * a, 4 * a, 4 * a))
with open("filename", "w") as f:
    for id_p in enumerate(points, 1):
        f.write("%4.d  1  4  %4.3f  %4.3f  %4.3f\n" % id_p)
</snippet></ROW><ROW><id>11020605</id><snippet>import cv2
import numpy as np
camera_matrix = np.array([[1.3e+03, 0., 6.0e+02], [0., 1.3e+03, 4.8e+02], [0., 0., 1.]], dtype=np.float32)
dist_coeffs = np.array([-2.4-01, 9.5e-02, -4.0e-04, 8.9e-05, 0.], dtype=np.float32)

test = np.zeros((10,1,2), dtype=np.float32)
xy_undistorted = cv2.undistortPoints(test, camera_matrix, dist_coeffs)

print xy_undistorted
</snippet></ROW><ROW><id>11020605</id><snippet>[[[ 0.0187303   0.01477836]]

 [[ 0.0187303   0.01477836]]

 [[ 0.0187303   0.01477836]]

 [[ 0.0187303   0.01477836]]

 [[ 0.0187303   0.01477836]]

 [[ 0.0187303   0.01477836]]

 [[ 0.0187303   0.01477836]]

 [[ 0.0187303   0.01477836]]

 [[ 0.0187303   0.01477836]]

 [[ 0.0187303   0.01477836]]]
</snippet></ROW><ROW><id>11020605</id><snippet>EITHER one row OR one column</snippet></ROW><ROW><id>11020605</id><snippet>(10,1,2) or (1,10,2)</snippet></ROW><ROW><id>11020698</id><snippet>&gt;&gt;&gt; def f():
...   []
...   list()
...   {}
...   dict()
... 
&gt;&gt;&gt; dis.dis(f)
  2           0 BUILD_LIST               0
              3 POP_TOP             

  3           4 LOAD_GLOBAL              0 (list)
              7 CALL_FUNCTION            0
             10 POP_TOP             

  4          11 BUILD_MAP                0
             14 POP_TOP             

  5          15 LOAD_GLOBAL              1 (dict)
             18 CALL_FUNCTION            0
             21 POP_TOP             
             22 LOAD_CONST               0 (None)
             25 RETURN_VALUE        
</snippet></ROW><ROW><id>11020825</id><snippet>INTERNAL_IPS</snippet></ROW><ROW><id>11020987</id><snippet>str.partition()</snippet></ROW><ROW><id>11020987</id><snippet>with open("inputfile") as f:
    contents1, sentinel, contents2 = f.read().partition("Sentinel text\n")
with open("outputfile1", "w") as f:
    f.write(contents1)
with open("outputfile2", "w") as f:
    f.write(contents2)
</snippet></ROW><ROW><id>11021051</id><snippet>dir()</snippet></ROW><ROW><id>11021051</id><snippet>__getattr__()</snippet></ROW><ROW><id>11021051</id><snippet>match_methods</snippet></ROW><ROW><id>11021051</id><snippet>dir()</snippet></ROW><ROW><id>11021051</id><snippet>if</snippet></ROW><ROW><id>11021051</id><snippet>match_getattr()</snippet></ROW><ROW><id>11021051</id><snippet>match_methods</snippet></ROW><ROW><id>11021051</id><snippet>match_members</snippet></ROW><ROW><id>11021051</id><snippet>match_getset</snippet></ROW><ROW><id>11021051</id><snippet>dir()</snippet></ROW><ROW><id>11021215</id><snippet>&gt;&gt;&gt; a = (5,)+(6, 7)     
&gt;&gt;&gt; a
(5, 6, 7)
</snippet></ROW><ROW><id>11021329</id><snippet>requirements.txt</snippet></ROW><ROW><id>11021329</id><snippet>--extra-index-url YOUR_URL_HERE
</snippet></ROW><ROW><id>11021329</id><snippet>--index-url YOUR_URL_HERE
</snippet></ROW><ROW><id>11021651</id><snippet>grand_Matrix[0,...] = first_Matrix
grand_Matrix[1,...] = second_Matrix
</snippet></ROW><ROW><id>11021651</id><snippet>grand_Matrix = np.vstack(m[None,...] for m in matrices)
</snippet></ROW><ROW><id>11021651</id><snippet>None</snippet></ROW><ROW><id>11021670</id><snippet>def lookup_object_by_repr(myrep)
    import gc
    for obj in gc.get_objects():
        if repr(obj) == myrep:
           return obj
</snippet></ROW><ROW><id>11021742</id><snippet>get()</snippet></ROW><ROW><id>11021742</id><snippet>__future__</snippet></ROW><ROW><id>11022037</id><snippet>after</snippet></ROW><ROW><id>11022037</id><snippet>widget.after(5000,callback)
</snippet></ROW><ROW><id>11022050</id><snippet>waitkey</snippet></ROW><ROW><id>11022050</id><snippet>import cv
cv.NamedWindow("w1", cv.CV_WINDOW_AUTOSIZE)
capture = cv.CaptureFromCAM(0)

def repeat():
    frame = cv.QueryFrame(capture)
    cv.ShowImage("w1", frame)

while True:
    repeat()
    if cv.WaitKey(33)==27:
        break

cv.DestroyAllWindows()
</snippet></ROW><ROW><id>11022050</id><snippet>cv2</snippet></ROW><ROW><id>11022050</id><snippet>import cv2
import numpy as np
c = cv2.VideoCapture(0)

while(1):
    _,f = c.read()
    cv2.imshow('e2',f)
    if cv2.waitKey(5)==27:
        break
cv2.destroyAllWindows()
</snippet></ROW><ROW><id>11022054</id><snippet>class MsgID(int):
    pass

LOGIN = MsgID(0)
LOGOUT = MsgID(1)
HEARTBEAT = MsgID(2)
... # add all other message identifier numbers

class MsgType(object):
    def __init__(self, id, data):
        self.id = id
        self.data = data


def login_handler(msg):
    ...  # do something here

def logout_handler(msg):
    ...  # do something here

def heartbeat_handler(msg):
    ...  # do something here


msg_func = {
    LOGIN  : login_handler,
    LOGOUT : logout_handler,
    HEARTBEAT : heartbeat_handler,
    ...
}


class Handler(object):
    def handleMsg(self, msg):
        try:
            msg_func[msg.id](msg)  # lookup function reference in dict, call function
        except KeyError:
            log_error_mesg('message without a handler function: %d' % msg.id)
</snippet></ROW><ROW><id>11022054</id><snippet>int</snippet></ROW><ROW><id>11022054</id><snippet>msg_func</snippet></ROW><ROW><id>11022054</id><snippet>MsgID</snippet></ROW><ROW><id>11022144</id><snippet>chmod 700 foo.py
</snippet></ROW><ROW><id>11022262</id><snippet>#</snippet></ROW><ROW><id>11022262</id><snippet>%23</snippet></ROW><ROW><id>11022492</id><snippet>def get_user_version(username):
    version = cache.get("%s_version" % username)
    if version is None:
        version = random.randint(1, 1000000000)
        cache.set("%s_version" % username, version)
    return version

def get_user_cache(username, key):
    version = get_user_version(username)
    return cache.get("%s_%d_%s" % (username, version, key))

def set_user_cache(username, key, value):
    version = get_user_version(username)
    cache.set("%s_%d_%s" % (username, version, key), value)

def invalidate_user_cache(username):
    version = cache.incr("%s_version" % username)
</snippet></ROW><ROW><id>11022572</id><snippet>import Tkinter as tk

words="""this is a really large file, it has a lot of words"""*25

args=['end']
for i,w in enumerate(words.split()):
   args.extend((w+' ','TAG%d'%i))


root=tk.Tk()
text=tk.Text(root)
text.grid(row=0,column=0)
text.insert(*args)
root.mainloop()
</snippet></ROW><ROW><id>11022717</id><snippet>from collections import defaultdict

my_csv = '{d[first]},{d[middle]},{d[last]}'
print( my_csv.format( d=defaultdict(str, first='John', last='Doe') ) )
</snippet></ROW><ROW><id>11022807</id><snippet>data</snippet></ROW><ROW><id>11022807</id><snippet>    var myCheckboxes = new Array();
    $("input:checked").each(function() {
       myCheckboxes.push($(this).val());
    });

    $.ajax({
        type: "POST",
        url: 'django/builder/buildit',
        data: myCheckboxes,
        success: function(response){
            alert(response);
        }
    });
</snippet></ROW><ROW><id>11022807</id><snippet>    $.ajax({
        type: "POST",
        url: 'django/builder/buildit',
        data: $('#myform').serialize(),
        success: function(response){
            alert(response);
        }
    });
</snippet></ROW><ROW><id>11022927</id><snippet>print repr(exp)</snippet></ROW><ROW><id>11022927</id><snippet>for</snippet></ROW><ROW><id>11022927</id><snippet>exp</snippet></ROW><ROW><id>11022927</id><snippet>' test'</snippet></ROW><ROW><id>11022927</id><snippet>csv.reader()</snippet></ROW><ROW><id>11022927</id><snippet>for type, term, exp in reader:
  exp = exp.strip()
  for s in tstr:
    if check(exp, s):
      print exp + " hit on " + s
    else:
      print exp + " did NOT hit on " + s
</snippet></ROW><ROW><id>11022927</id><snippet>strip()</snippet></ROW><ROW><id>11022927</id><snippet>tstr</snippet></ROW><ROW><id>11022927</id><snippet>tstr</snippet></ROW><ROW><id>11022927</id><snippet>for i in range(2)</snippet></ROW><ROW><id>11022927</id><snippet>i=0</snippet></ROW><ROW><id>11022927</id><snippet>i=1</snippet></ROW><ROW><id>11023075</id><snippet>strlen</snippet></ROW><ROW><id>11023075</id><snippet>&gt;&gt;&gt; libc.strlen("HELLO")
5
&gt;&gt;&gt; libc.strlen(u"HELLO")
1
&gt;&gt;&gt; libc.strlen(u"HELLO".encode('ascii'))
5
</snippet></ROW><ROW><id>11023105</id><snippet>f = open("/static_content/abc/report_template.tpt" , "r")
</snippet></ROW><ROW><id>11023105</id><snippet>f = open("static_content/abc/report_template.tpt" , "r")
</snippet></ROW><ROW><id>11023426</id><snippet>[program:uwsgi]
command = /usr/local/bin/uwsgi 
    --loop gevent 
    --socket 127.0.0.1:8070 
    --wsgi-file uwsgiServer.py 
    --buffer-size 32768 --master --async 5 --enable-threads --listen 100 --uid root 
    --pp /home/ubuntu/workspace/

autostart=true
autorestart=true
environment=ENV_VAR='var'
user=root # or other
group=root # or other
directory=/home/ubuntu/workspace/
umask=022
</snippet></ROW><ROW><id>11023857</id><snippet>def intF(n, d, l=40):
</snippet></ROW><ROW><id>11023857</id><snippet>n</snippet></ROW><ROW><id>11023857</id><snippet>d</snippet></ROW><ROW><id>11023857</id><snippet>l</snippet></ROW><ROW><id>11023857</id><snippet>    s=str(n*10**l / d)
</snippet></ROW><ROW><id>11023857</id><snippet>n</snippet></ROW><ROW><id>11023857</id><snippet>10 ** l</snippet></ROW><ROW><id>11023857</id><snippet>1</snippet></ROW><ROW><id>11023857</id><snippet>l</snippet></ROW><ROW><id>11023857</id><snippet>d</snippet></ROW><ROW><id>11023857</id><snippet>/</snippet></ROW><ROW><id>11023857</id><snippet>//</snippet></ROW><ROW><id>11023857</id><snippet>s</snippet></ROW><ROW><id>11023857</id><snippet>d</snippet></ROW><ROW><id>11023857</id><snippet>float(n) / d</snippet></ROW><ROW><id>11023857</id><snippet>    if len(s) &lt; l: 
        return '0.{:0&gt;{width}}'.format(s,width=l) 
</snippet></ROW><ROW><id>11023857</id><snippet>s</snippet></ROW><ROW><id>11023857</id><snippet>l</snippet></ROW><ROW><id>11023857</id><snippet>0.</snippet></ROW><ROW><id>11023857</id><snippet>{:0&gt;{width}}</snippet></ROW><ROW><id>11023857</id><snippet>width</snippet></ROW><ROW><id>11023857</id><snippet>&gt;</snippet></ROW><ROW><id>11023857</id><snippet>s</snippet></ROW><ROW><id>11023857</id><snippet>format</snippet></ROW><ROW><id>11023857</id><snippet>    if len(s) &gt; l: 
        return s[0:len(s)-l]+'.'+s[len(s)-l:]
</snippet></ROW><ROW><id>11023857</id><snippet>a</snippet></ROW><ROW><id>11023857</id><snippet>l</snippet></ROW><ROW><id>11023857</id><snippet>l</snippet></ROW><ROW><id>11023857</id><snippet>s</snippet></ROW><ROW><id>11023857</id><snippet>.</snippet></ROW><ROW><id>11023857</id><snippet>l</snippet></ROW><ROW><id>11023857</id><snippet>    return '0.'+s
</snippet></ROW><ROW><id>11023857</id><snippet>s</snippet></ROW><ROW><id>11023857</id><snippet>l</snippet></ROW><ROW><id>11023857</id><snippet>0</snippet></ROW><ROW><id>11023857</id><snippet>&gt;&gt;&gt; intF(10, 10.1, 10)
'990.0990099.01'
</snippet></ROW><ROW><id>11023857</id><snippet>&gt;&gt;&gt; intF(10.1, 10, 10)
'101.00000000.0'
</snippet></ROW><ROW><id>11023891</id><snippet>CGIHTTPServer.py</snippet></ROW><ROW><id>11023891</id><snippet>execve</snippet></ROW><ROW><id>11023891</id><snippet>try:
    os.setuid(nobody)
except os.error:
    pass
</snippet></ROW><ROW><id>11023891</id><snippet>/tmp</snippet></ROW><ROW><id>11024246</id><snippet>theDict.values()</snippet></ROW><ROW><id>11024246</id><snippet>def CleanWhiteSpace(theDict) :
    stuff=[]
    for key2 in theDict.keys():  # this is the line I changed
        if theDict[key2] == [' ']:
            print key2
            del theDict[key2]
            print "hi"

    print theDict
    for key, value in theDict.iteritems():
        for d in value:
            print value
            if d != ' ':
                    stuff.append(d)
            theDict[key]=stuff
        stuff=[]

    return theDict
print CleanWhiteSpace({'a':['1','2'],'b':['3',' '],'c':[' ']})
</snippet></ROW><ROW><id>11024266</id><snippet>flines.pop(index)</snippet></ROW><ROW><id>11024266</id><snippet>In [1]: a = range(5)

In [2]: for i in a:
   ...:     print a.pop()
   ...: 
4
3
2

In [3]: a
Out[3]: [0, 1]
</snippet></ROW><ROW><id>11024290</id><snippet>from A import B.C
B.C.foo()
</snippet></ROW><ROW><id>11024304</id><snippet>[ .a-zA-Z]+
</snippet></ROW><ROW><id>11024304</id><snippet>&gt;&gt;&gt; re.search(r'[ .a-zA-Z]+', 'Miami').group(0)
'Miami'
&gt;&gt;&gt; re.search(r'[ .a-zA-Z]+', 'San Francisco').group(0)
'San Francisco'
&gt;&gt;&gt; re.search(r'[ .a-zA-Z]+', 'Chi. Cubs').group(0)
'Chi. Cubs'
</snippet></ROW><ROW><id>11024402</id><snippet>app.run()</snippet></ROW><ROW><id>11024402</id><snippet>if __name__ == '__main__'</snippet></ROW><ROW><id>11024445</id><snippet>connection = engine.connect()
result = connection.execute("select username from users")
for row in result:
    print "username:", row['username']
connection.close()
</snippet></ROW><ROW><id>11024578</id><snippet>mangle(name, klass)</snippet></ROW><ROW><id>11024578</id><snippet>klass</snippet></ROW><ROW><id>11024578</id><snippet>&gt;&gt;&gt; from compiler.misc import mangle
&gt;&gt;&gt; mangle('__some_such', 'Foo')
'_Foo__some_such'
</snippet></ROW><ROW><id>11024578</id><snippet>MANGLE_LEN = 256 # magic constant from compile.c

def mangle(name, klass):
    if not name.startswith('__'):
        return name
    if len(name) + 2 &gt;= MANGLE_LEN:
        return name
    if name.endswith('__'):
        return name
    try:
        i = 0
        while klass[i] == '_':
            i = i + 1
    except IndexError:
        return name
    klass = klass[i:]

    tlen = len(klass) + len(name)
    if tlen &gt; MANGLE_LEN:
        klass = klass[:MANGLE_LEN-tlen]

    return "_%s%s" % (klass, name)
</snippet></ROW><ROW><id>11024686</id><snippet>(
def main():
    pass
</snippet></ROW><ROW><id>11024952</id><snippet>if not c:
   print "The list is empty"
else:
   print "The list is not empty"
</snippet></ROW><ROW><id>11025010</id><snippet>PATH</snippet></ROW><ROW><id>11025010</id><snippet>/usr/bin/python
</snippet></ROW><ROW><id>11025010</id><snippet>python.exe</snippet></ROW><ROW><id>11025010</id><snippet>c:\Python27\python.exe</snippet></ROW><ROW><id>11025010</id><snippet>/usr/bin/python myprog.py  arg1 arg2
</snippet></ROW><ROW><id>11025010</id><snippet>c:\Python27\python.exe myprog.py arg1 arg2
</snippet></ROW><ROW><id>11025090</id><snippet>multiprocessing</snippet></ROW><ROW><id>11025090</id><snippet>.map()</snippet></ROW><ROW><id>11025090</id><snippet>multiprocessing.Pool()</snippet></ROW><ROW><id>11025090</id><snippet>y</snippet></ROW><ROW><id>11025090</id><snippet>((y, x) for x in input)</snippet></ROW><ROW><id>11025090</id><snippet>multiprocessing.Pool()</snippet></ROW><ROW><id>11025090</id><snippet>import multiprocessing as mp

def f(x):
    return (x, x*x)

if __name__ == '__main__':
    pool = mp.Pool()
    inputs = range(10)
    result = dict(pool.map(f, inputs))
</snippet></ROW><ROW><id>11025090</id><snippet>result</snippet></ROW><ROW><id>11025090</id><snippet>{0: 0, 1: 1, 2: 4, 3: 9, 4: 16, 5: 25, 6: 36, 7: 49, 8: 64, 9: 81}</snippet></ROW><ROW><id>11025090</id><snippet>x*x</snippet></ROW><ROW><id>11025090</id><snippet>x</snippet></ROW><ROW><id>11025090</id><snippet>f()</snippet></ROW><ROW><id>11025090</id><snippet>(key, x, p)</snippet></ROW><ROW><id>11025090</id><snippet>x**p</snippet></ROW><ROW><id>11025090</id><snippet>import multiprocessing as mp

def f(tup):
    key, x, p = tup  # unpack tuple into variables
    return (key, x**p)

if __name__ == '__main__':
    pool = mp.Pool()
    inputs = range(10)
    inputs = [("1**1", 1, 1), ("2**2", 2, 2), ("2**3", 2, 3), ("3**3", 3, 3)]
    result = dict(pool.map(f, inputs))
</snippet></ROW><ROW><id>11025090</id><snippet>zip()</snippet></ROW><ROW><id>11025090</id><snippet>itertools.product</snippet></ROW><ROW><id>11025177</id><snippet>c</snippet></ROW><ROW><id>11025177</id><snippet>key</snippet></ROW><ROW><id>11025177</id><snippet>'c'</snippet></ROW><ROW><id>11025177</id><snippet>value</snippet></ROW><ROW><id>11025177</id><snippet>[]</snippet></ROW><ROW><id>11025177</id><snippet>if not value:</snippet></ROW><ROW><id>11025177</id><snippet>if value==[]</snippet></ROW><ROW><id>11025177</id><snippet>if d==[]:</snippet></ROW><ROW><id>11025177</id><snippet>value</snippet></ROW><ROW><id>11025177</id><snippet>for d in value:</snippet></ROW><ROW><id>11025177</id><snippet>value</snippet></ROW><ROW><id>11025177</id><snippet>if value != " "</snippet></ROW><ROW><id>11025177</id><snippet>d</snippet></ROW><ROW><id>11025177</id><snippet>if not value[d]:</snippet></ROW><ROW><id>11025177</id><snippet>d</snippet></ROW><ROW><id>11025177</id><snippet>value</snippet></ROW><ROW><id>11025177</id><snippet>stuff</snippet></ROW><ROW><id>11025214</id><snippet>VALUES()</snippet></ROW><ROW><id>11025214</id><snippet>%s</snippet></ROW><ROW><id>11025214</id><snippet>sql = "INSERT IGNORE into NCII (title, uploaded_on, description, video_length, user, video_id, video_url) VALUES (%s, %s, %s, %s, %s, %s, %s)"

# execute with the vars in a tuple
sql_db.execute(sql, (title, uploaded_on, description, video_length, user, video_id, video_url))
</snippet></ROW><ROW><id>11025323</id><snippet>widgets = {}
form = QFormLayout()
for key, value in your_dict.iteritems():
    widgets[key] = widget = {}
    widget['spinbox'] = spinbox = QSpinBox()
    spinbox.setValue(value)
    form.addRow(key, spinbox)
</snippet></ROW><ROW><id>11025419</id><snippet>summary</snippet></ROW><ROW><id>11025419</id><snippet>summary</snippet></ROW><ROW><id>11025419</id><snippet>Post</snippet></ROW><ROW><id>11025419</id><snippet>summary</snippet></ROW><ROW><id>11025419</id><snippet>_summary</snippet></ROW><ROW><id>11025419</id><snippet>summary</snippet></ROW><ROW><id>11025419</id><snippet>_summary</snippet></ROW><ROW><id>11025419</id><snippet>User.objects.filter(post___summary__contains="some string")
</snippet></ROW><ROW><id>11025596</id><snippet>class curses_screen:
    def __enter__(self):
        self.stdscr = curses.initscr()
        curses.cbreak()
        curses.noecho()
        self.stdscr.keypad(1)
        SCREEN_HEIGHT, SCREEN_WIDTH = self.stdscr.getmaxyx()
        return self.stdscr
    def __exit__(self,a,b,c):
        curses.nocbreak()
        self.stdscr.keypad(0)
        curses.echo()
        curses.endwin()

with curses_screen() as stdscr:
    """
    Execution code plush getch code here
    """
</snippet></ROW><ROW><id>11025763</id><snippet>set</snippet></ROW><ROW><id>11025763</id><snippet>stopWords = set(["the", "and", "with", etc...])
" ".join(word for word in msg.split() if word not in stopWords)
</snippet></ROW><ROW><id>11025763</id><snippet>if any(word in stopWords for word in msg.split()):
    ...
</snippet></ROW><ROW><id>11025857</id><snippet>subprocess.Popen</snippet></ROW><ROW><id>11025857</id><snippet>rm</snippet></ROW><ROW><id>11025857</id><snippet>/home/user/t*</snippet></ROW><ROW><id>11025857</id><snippet>t</snippet></ROW><ROW><id>11025857</id><snippet>Popen</snippet></ROW><ROW><id>11025857</id><snippet>Popen</snippet></ROW><ROW><id>11025857</id><snippet>shell</snippet></ROW><ROW><id>11025857</id><snippet>True</snippet></ROW><ROW><id>11025857</id><snippet>Popen("%s %s" % (cmd, args), shell=True, stdin=PIPE, stdout=PIPE, stderr=PIPE, close_fds=True)
</snippet></ROW><ROW><id>11025857</id><snippet>glob</snippet></ROW><ROW><id>11025857</id><snippet>import glob
files = glob.glob(prepend+"*")
args = [cmd] + files
Popen(args,  stdin=PIPE, stdout=PIPE, stderr=PIPE)
</snippet></ROW><ROW><id>11025857</id><snippet>glob</snippet></ROW><ROW><id>11025857</id><snippet>files = glob.glob(prepend+"*")
for file in files:
    os.remove(file)
</snippet></ROW><ROW><id>11026085</id><snippet>self.response.out.write("""
    &lt;form action="/sign?/s" method="post"&gt;
        &lt;p&gt;First Name: &lt;input type="text" name="name"/&gt;&lt;/p&gt;
        &lt;p&gt;&lt;input type="radio" name="mood" value="good"&gt;Good&lt;/p&gt;
        &lt;p&gt;&lt;input type="radio" name="mood" value="bad"&gt;Bad&lt;/p&gt;
        &lt;p&gt;&lt;input type="radio" name="mood" value="fair"&gt;Fair&lt;/p&gt;
        &lt;p&gt;&lt;input type="submit"value="Process"&gt;&lt;/p&gt;
    &lt;/form&gt;
&lt;/body&gt;
&lt;/html&gt;""" % (urllib.urlencode({"name": name}), 
                cgi.escape(name))) # self.response.out.write ends here
</snippet></ROW><ROW><id>11026085</id><snippet>def</snippet></ROW><ROW><id>11026085</id><snippet>"""
&lt;form action="/sign?/s" method="post"&gt;
        &lt;p&gt;First Name: &lt;input type="text" name="name"/&gt;&lt;/p&gt;
        &lt;p&gt;&lt;input type="radio" name="mood" value="good"&gt;Good&lt;/p&gt;
        &lt;p&gt;&lt;input type="radio" name="mood" value="bad"&gt;Bad&lt;/p&gt;
        &lt;p&gt;&lt;input type="radio" name="mood" value="fair"&gt;Fair&lt;/p&gt;
        &lt;p&gt;&lt;input type="submit"value="Process"&gt;&lt;/p&gt;
    &lt;/form&gt;
&lt;/body&gt;
&lt;/html&gt;""" % (urllib.urlencode({"name": name}), 
                cgi.escape(name)) # one less bracket!
</snippet></ROW><ROW><id>11026085</id><snippet>"""string literal""" % (tuple, of, values)</snippet></ROW><ROW><id>11026085</id><snippet>%d</snippet></ROW><ROW><id>11026085</id><snippet>%s</snippet></ROW><ROW><id>11026085</id><snippet>%f</snippet></ROW><ROW><id>11026085</id><snippet>urllib.urlencode({"name": name})</snippet></ROW><ROW><id>11026085</id><snippet>cgi.escape(name)</snippet></ROW><ROW><id>11026085</id><snippet>%s</snippet></ROW><ROW><id>11026085</id><snippet>self.response.out.write</snippet></ROW><ROW><id>11026323</id><snippet>myVar = ["jhhj", "hgc"]
myTuple = ([1,2,3], [4,5,6], myVar)
</snippet></ROW><ROW><id>11026323</id><snippet>"jhhj"</snippet></ROW><ROW><id>11026323</id><snippet>"hgc"</snippet></ROW><ROW><id>11026323</id><snippet>myVar</snippet></ROW><ROW><id>11026323</id><snippet>myTuple</snippet></ROW><ROW><id>11026323</id><snippet>myVar</snippet></ROW><ROW><id>11026323</id><snippet>myVar.append('lololol')
</snippet></ROW><ROW><id>11026323</id><snippet>myVar</snippet></ROW><ROW><id>11026323</id><snippet>"lololol"</snippet></ROW><ROW><id>11026323</id><snippet>myVar</snippet></ROW><ROW><id>11026323</id><snippet>myVar</snippet></ROW><ROW><id>11026323</id><snippet>myVar = "lol"
myTuple = ([1,2,3], [4,5,6], myVar)
</snippet></ROW><ROW><id>11026323</id><snippet>myVar</snippet></ROW><ROW><id>11026323</id><snippet>"lol"</snippet></ROW><ROW><id>11026323</id><snippet>myVar = "lolol"
</snippet></ROW><ROW><id>11026323</id><snippet>myVar</snippet></ROW><ROW><id>11026323</id><snippet>"lol"</snippet></ROW><ROW><id>11026336</id><snippet>?</snippet></ROW><ROW><id>11026336</id><snippet>*</snippet></ROW><ROW><id>11026336</id><snippet>b.*?b</snippet></ROW><ROW><id>11026520</id><snippet>if num == Number:</snippet></ROW><ROW><id>11026520</id><snippet>if num == int(Number):</snippet></ROW><ROW><id>11026548</id><snippet>&lt;frame&gt;</snippet></ROW><ROW><id>11026556</id><snippet>self.render('hello.html', value=[0.1, None, None, 0.5])
</snippet></ROW><ROW><id>11026556</id><snippet> [0.1, None, None, 0.5]
</snippet></ROW><ROW><id>11026556</id><snippet>import json
self.render('hello.html', value=json.dumps([0.1, None, None, 0.5]))
</snippet></ROW><ROW><id>11026556</id><snippet>[0.1, null, null, 0.5]
</snippet></ROW><ROW><id>11026556</id><snippet>import json
def jsonfilter(value):
    return json.dumps(value)

environment.filters['json'] = jsonfilter
</snippet></ROW><ROW><id>11026556</id><snippet>{{value|json}}
</snippet></ROW><ROW><id>11026700</id><snippet>65535</snippet></ROW><ROW><id>11026700</id><snippet>recv</snippet></ROW><ROW><id>11026700</id><snippet>128</snippet></ROW><ROW><id>11026700</id><snippet>msg_received</snippet></ROW><ROW><id>11026700</id><snippet>recv</snippet></ROW><ROW><id>11026765</id><snippet>class imdict(dict):
def __hash__(self):
    return id(self)

def _immutable(self, *args, **kws):
    raise TypeError('object is immutable')

__setitem__ = _immutable
__delitem__ = _immutable
clear       = _immutable
update      = _immutable
setdefault  = _immutable
pop         = _immutable
popitem     = _immutable
</snippet></ROW><ROW><id>11027030</id><snippet>from flask.ext.cache import Cache

cache = Cache()
</snippet></ROW><ROW><id>11027030</id><snippet>from flask import Blueprint
from cache import cache

mod = Blueprint(...)

@mod.route("/")
@cache.cached(timeout=50)
def index():
    return datetime.now().strfmtime("%Y-%m-%d %H:%M:%S")
</snippet></ROW><ROW><id>11027030</id><snippet>from flask import Flask
from yourapp.cache import cache
from yourapp.foo import mod

app = Flask("yourapp")

# ... snip ...

cache.init_app(app)

# ... snip ...

app.register_blueprint(mod)
</snippet></ROW><ROW><id>11027060</id><snippet>activate</snippet></ROW><ROW><id>11027060</id><snippet>pip install Django==1.4</snippet></ROW><ROW><id>11027060</id><snippet>sudo</snippet></ROW><ROW><id>11027060</id><snippet>pip install -E=/path/to/my/virtual/env Django==1.4</snippet></ROW><ROW><id>11027069</id><snippet>self.whip</snippet></ROW><ROW><id>11027069</id><snippet>dict()</snippet></ROW><ROW><id>11027069</id><snippet>eval()</snippet></ROW><ROW><id>11027069</id><snippet>def reading(self):
    s = open('deed.txt', 'r').read()
    self.whip = eval(s)
</snippet></ROW><ROW><id>11027069</id><snippet>def reading(self):
    self.whip = eval(open('deed.txt', 'r').read())
</snippet></ROW><ROW><id>11027069</id><snippet>eval()</snippet></ROW><ROW><id>11027069</id><snippet>eval()</snippet></ROW><ROW><id>11027069</id><snippet>eval()</snippet></ROW><ROW><id>11027069</id><snippet>eval()</snippet></ROW><ROW><id>11027069</id><snippet>literal_eval</snippet></ROW><ROW><id>11027069</id><snippet>ast</snippet></ROW><ROW><id>11027069</id><snippet>import ast

def reading(self):
    s = open('deed.txt', 'r').read()
    self.whip = ast.literal_eval(s)
</snippet></ROW><ROW><id>11027069</id><snippet>ast.literal_eval()</snippet></ROW><ROW><id>11027069</id><snippet>with</snippet></ROW><ROW><id>11027069</id><snippet>with</snippet></ROW><ROW><id>11027069</id><snippet>import ast

def reading(self):
    with open('deed.txt', 'r') as f:
        s = f.read()
        self.whip = ast.literal_eval(s)
</snippet></ROW><ROW><id>11027069</id><snippet>with</snippet></ROW><ROW><id>11027069</id><snippet>with</snippet></ROW><ROW><id>11027090</id><snippet>subdomain</snippet></ROW><ROW><id>11027090</id><snippet>@app.route("/", subdomain="static")
def static_index():
    """Flask supports static subdomains
    This is available at static.your-domain.tld"""
    return "static.your-domain.tld"

@app.route("/dynamic", subdomain="&lt;username&gt;")
def username_index(username):
    """Dynamic subdomains are also supported
    Try going to user1.your-domain.tld/dynamic"""
    return username + ".your-domain.tld"
</snippet></ROW><ROW><id>11027417</id><snippet>host_port</snippet></ROW><ROW><id>11027417</id><snippet>rfc2616</snippet></ROW><ROW><id>11027417</id><snippet>Location</snippet></ROW><ROW><id>11027437</id><snippet>file</snippet></ROW><ROW><id>11027437</id><snippet>with</snippet></ROW><ROW><id>11027437</id><snippet>with open(…) as f:
    d = [l for l in f]
</snippet></ROW><ROW><id>11027437</id><snippet>d = f.readlines()</snippet></ROW><ROW><id>11027506</id><snippet>ffmpeg -i inputfile [ ... options ... ] 2&gt;&amp;1 | your-process 
</snippet></ROW><ROW><id>11027506</id><snippet>ffmpeg -y -i inputfile -acodec copy -vcodec copy outputfile 2&gt;&amp;1 | cat
</snippet></ROW><ROW><id>11027531</id><snippet>URL</snippet></ROW><ROW><id>11027531</id><snippet>'my_project.my_app.views.index'</snippet></ROW><ROW><id>11027531</id><snippet>index()</snippet></ROW><ROW><id>11027531</id><snippet>django.core.urlresolvers.get_resolver(None).reverse_dict</snippet></ROW><ROW><id>11027531</id><snippet>view.index</snippet></ROW><ROW><id>11027531</id><snippet>cache_view</snippet></ROW><ROW><id>11027531</id><snippet>NoReverseMatch</snippet></ROW><ROW><id>11027531</id><snippet>URL</snippet></ROW><ROW><id>11027531</id><snippet>url(r'^$', cache_page(60 * 60)(views.index), name='my_index'),
{# in template #}
{% url my_index %}
</snippet></ROW><ROW><id>11027531</id><snippet>cache_page</snippet></ROW><ROW><id>11027531</id><snippet>views.py</snippet></ROW><ROW><id>11027919</id><snippet>libreadline-dev</snippet></ROW><ROW><id>11027919</id><snippet>libreadline-dev</snippet></ROW><ROW><id>11028049</id><snippet>from subprocess import Popen
process = Popen(['firefox', '-P', '-no-remote'])
</snippet></ROW><ROW><id>11028049</id><snippet>process</snippet></ROW><ROW><id>11028592</id><snippet>list2</snippet></ROW><ROW><id>11028592</id><snippet>not in list2</snippet></ROW><ROW><id>11028592</id><snippet>set2 = set(list2)
not_matched = [a for a in list1 if not a.item1 in set2]
</snippet></ROW><ROW><id>11028680</id><snippet>.</snippet></ROW><ROW><id>11028680</id><snippet>source</snippet></ROW><ROW><id>11028680</id><snippet>source</snippet></ROW><ROW><id>11028680</id><snippet>activate</snippet></ROW><ROW><id>11028680</id><snippet>./path/to/activate</snippet></ROW><ROW><id>11028680</id><snippet>.</snippet></ROW><ROW><id>11028680</id><snippet>virtualenvwrapper</snippet></ROW><ROW><id>11028680</id><snippet>virtualenv</snippet></ROW><ROW><id>11028680</id><snippet>virtualenvwrapper</snippet></ROW><ROW><id>11028680</id><snippet>workon YOUR_ENV
</snippet></ROW><ROW><id>11029048</id><snippet>&gt;&gt;&gt; from itertools import *
&gt;&gt;&gt; from operator import mul
&gt;&gt;&gt; d = {2:2,5:1} # result of pf(20)
&gt;&gt;&gt; l = list(chain(*([k] * v for k, v in d.iteritems())))
&gt;&gt;&gt; l
[2, 2, 5]
&gt;&gt;&gt; factors = set(chain(*(permutations(l, i) for i in range(1,len(l)+1))))
set([(2, 2, 5), (2,), (5,), (5, 2, 2), (2, 2), (2, 5), (5, 2), (2, 5, 2)])
&gt;&gt;&gt; set(reduce(mul, fs, 1) for fs in factors)
set([4, 2, 10, 20, 5])
</snippet></ROW><ROW><id>11029060</id><snippet>#ModuleB.py 
class Bar(object):   
  def __init__(self):
    self.foo = Foo()
    self.val = 10
    .
    .
# at bottom of file
from moduleA import Foo
</snippet></ROW><ROW><id>11029060</id><snippet>#ModuleB.py 
class Bar(object):   
  def __init__(self):
    from moduleA import Foo
    self.foo = Foo()
    self.val = 10
</snippet></ROW><ROW><id>11029060</id><snippet>__init__.py</snippet></ROW><ROW><id>11029060</id><snippet>__init__.py</snippet></ROW><ROW><id>11029060</id><snippet>__init__.py</snippet></ROW><ROW><id>11029060</id><snippet>#package/main.py
from subpackage1.moduleA import bar  # you can now call bar() directly
from subpackage1 import moduleB  # you can now call foo like: moduleB.foo()
from subpackage2.moduleX import jah 
</snippet></ROW><ROW><id>11029060</id><snippet>import subpackage1</snippet></ROW><ROW><id>11029060</id><snippet>subpackage1.bar()</snippet></ROW><ROW><id>11029060</id><snippet>subpackage.foo()</snippet></ROW><ROW><id>11029060</id><snippet>subpackage.moduleA.bar()</snippet></ROW><ROW><id>11029480</id><snippet>django.utils.safestring.mark_safe</snippet></ROW><ROW><id>11029649</id><snippet>def run(self, **kwargs):
    value = get_value_from_database()
    print 'Passed value %s' % value
</snippet></ROW><ROW><id>11029658</id><snippet>getDefaultConf</snippet></ROW><ROW><id>11029658</id><snippet>def getDefault(x, y):
    try:
        return getDefaultConf(x,y)
    except Exception as e:
        log(WARNING, "Failed to get default parametres: "+str(e))
    return None

data_A = getDefault(param_1,param_2)
data_B = getDefault(param_1,param_3)
data_C = getDefault(param_4,param_5)
data_D = getDefault(param_4,param_6)
data_E = getDefault(param_4,param_7)
</snippet></ROW><ROW><id>11029658</id><snippet>None</snippet></ROW><ROW><id>11029750</id><snippet># -*- coding: utf-8 -*-</snippet></ROW><ROW><id>11029750</id><snippet># -*- coding: utf-8 -*-
# the following prints the Dutch word "één"
print(u"\xe9\xe9n")
</snippet></ROW><ROW><id>11029750</id><snippet>coding</snippet></ROW><ROW><id>11029750</id><snippet>File "a.py", line 1
SyntaxError: Non-ASCII character '\xc3' in file a.py on line 1, but no encoding declared; see http://www.python.org/peps/pep-0263.html for details
</snippet></ROW><ROW><id>11029750</id><snippet>print(u"\xe9\xe9n")
</snippet></ROW><ROW><id>11029841</id><snippet>import logging
requests_log = logging.getLogger("requests")
requests_log.setLevel(logging.WARNING)
</snippet></ROW><ROW><id>11030414</id><snippet>*arg</snippet></ROW><ROW><id>11030414</id><snippet>*args2</snippet></ROW><ROW><id>11030414</id><snippet>def myfunction(type, id, args1, args2):
    other_function(args1)
    other_function2(args2)
</snippet></ROW><ROW><id>11030414</id><snippet>myfunction(type, id, (1,2,3), (4,5,6))
</snippet></ROW><ROW><id>11030414</id><snippet>def myfunction(type, id, args1, args2):
    other_function(*arg1)
    other_function2(*arg2)
</snippet></ROW><ROW><id>11030414</id><snippet>myfunction</snippet></ROW><ROW><id>11030414</id><snippet>None</snippet></ROW><ROW><id>11030414</id><snippet>import itertools
def myfunction(type, id, *args):
    args = iter(args)
    args1 = itertools.takeuntil(lambda x: x is not None, args)
    args2 = itertools.dropwhile(lambda x: x is None, args)
    other_function(args1)
    other_function2(args2)
</snippet></ROW><ROW><id>11030414</id><snippet>myfunction(type, id, 1,2,3, None, 4,5,6)
</snippet></ROW><ROW><id>11031540</id><snippet>result = dict([(k,v) for k,v in theDict.items() if len(v)&gt;0])
</snippet></ROW><ROW><id>11031540</id><snippet>result = {}
for key, value in theDict.items():
    if len(value) &gt; 0:
        result[key] = value
</snippet></ROW><ROW><id>11031540</id><snippet>for key, value in theDict.items():
    if not len(value) &gt; 0:
        del theDict[key]
</snippet></ROW><ROW><id>11031667</id><snippet>dict()</snippet></ROW><ROW><id>11031667</id><snippet>{</snippet></ROW><ROW><id>11031667</id><snippet>}</snippet></ROW><ROW><id>11031909</id><snippet>pyglet.app.run()</snippet></ROW><ROW><id>11031909</id><snippet>on_draw</snippet></ROW><ROW><id>11031909</id><snippet>run</snippet></ROW><ROW><id>11031909</id><snippet>pyglet.clock.tick</snippet></ROW><ROW><id>11031909</id><snippet>pyglet.window.Window.on_draw</snippet></ROW><ROW><id>11031909</id><snippet>pyglet.window.Window.flip</snippet></ROW><ROW><id>11031909</id><snippet>BaseWindow.register_event_type('on_draw')
</snippet></ROW><ROW><id>11031909</id><snippet>Window</snippet></ROW><ROW><id>11031909</id><snippet>on_draw</snippet></ROW><ROW><id>11032355</id><snippet>t = [ 
['Name1', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '+'],
['Name1', '', '', '', '', '', 'b', '', '', '', '', '', '', '', '', '', '', '', '', '', ''],
['Name2', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', 'a', ''],
['Name3', '', '', '', '', '+', '', '', '', '', '', '', '', '', '', '', '', '', '', '', ''] 
]

from itertools import groupby

# TODO: if you need to speed things up you can use operator.itemgetter
# for both sorting and grouping
for name, rows in groupby(sorted(t), lambda x:x[0]):
    print join_rows(rows)
</snippet></ROW><ROW><id>11032355</id><snippet>def join_rows(rows):
    def join_tuple(tup):
        for x in tup:
            if x: 
                return x
        else:
            return ''
    return [join_tuple(x) for x in zip(*rows)]
</snippet></ROW><ROW><id>11032476</id><snippet>connection.queries</snippet></ROW><ROW><id>11032476</id><snippet>print connection.queries
</snippet></ROW><ROW><id>11032829</id><snippet>from pylab import *

a = subplot(111)

t = arange(1, 100)/50.
projection = sin(2*pi*t)

# Draw the original curve
a.plot(t, projection)
# Define areas to fill in
l, r = 10, 50
# Fill the areas
a.fill_between(t[l:r], projection[l:r])
show()
</snippet></ROW><ROW><id>11032832</id><snippet>&gt;&gt;&gt; from datetime import timedelta
&gt;&gt;&gt; str(timedelta(microseconds=49503757))
'0:00:49.503757'
</snippet></ROW><ROW><id>11033794</id><snippet>|br|</snippet></ROW><ROW><id>11033794</id><snippet>|br|</snippet></ROW><ROW><id>11033844</id><snippet>return</snippet></ROW><ROW><id>11033844</id><snippet>return</snippet></ROW><ROW><id>11033844</id><snippet>  if(c==a):
     do something
     return 
</snippet></ROW><ROW><id>11033844</id><snippet>return some_results</snippet></ROW><ROW><id>11033887</id><snippet>class center():
</snippet></ROW><ROW><id>11033887</id><snippet>def center(var):
</snippet></ROW><ROW><id>11033887</id><snippet>def</snippet></ROW><ROW><id>11033887</id><snippet>class</snippet></ROW><ROW><id>11033887</id><snippet>center</snippet></ROW><ROW><id>11033887</id><snippet>self</snippet></ROW><ROW><id>11033887</id><snippet>var</snippet></ROW><ROW><id>11033891</id><snippet>r = csv.reader(open('/tmp/test.csv')) # Here your csv file
lines = [l for l in r]
</snippet></ROW><ROW><id>11033891</id><snippet>[['Ip', 'Sites'],
 ['127.0.0.1', '10'],
 ['127.0.0.2', '23'],
 ['127.0.0.3', '50']]
</snippet></ROW><ROW><id>11033891</id><snippet>lines[2][1] = '30'
</snippet></ROW><ROW><id>11033891</id><snippet>[['Ip', 'Sites'],
 ['127.0.0.1', '10'],
 ['127.0.0.2', '30'],
 ['127.0.0.3', '50']]
</snippet></ROW><ROW><id>11033891</id><snippet>writer = csv.writer(open('/tmp/output.csv', 'w'))
writer.writerows(lines)
</snippet></ROW><ROW><id>11033895</id><snippet>numpy.dot</snippet></ROW><ROW><id>11033895</id><snippet>numpy.inner</snippet></ROW><ROW><id>11033895</id><snippet>&gt;&gt;&gt; a=np.array([[1,2],[3,4]])
&gt;&gt;&gt; b=np.array([[11,12],[13,14]])
&gt;&gt;&gt; np.dot(a,b)
array([[37, 40],
       [85, 92]])
&gt;&gt;&gt; np.inner(a,b)
array([[35, 41],
       [81, 95]])
</snippet></ROW><ROW><id>11033895</id><snippet>.dot</snippet></ROW><ROW><id>11033895</id><snippet>.inner</snippet></ROW><ROW><id>11033895</id><snippet>&gt;&gt;&gt; import timeit
&gt;&gt;&gt; setup = 'import numpy as np; a=np.random.random(1000); b = np.random.random(1000)'

&gt;&gt;&gt; [timeit.timeit('np.dot(a,b)',setup,number=1000000) for _ in range(3)]
[2.6920320987701416, 2.676928997039795, 2.633111000061035]

&gt;&gt;&gt; [timeit.timeit('np.inner(a,b)',setup,number=1000000) for _ in range(3)]
[2.588860034942627, 2.5845699310302734, 2.6556360721588135]
</snippet></ROW><ROW><id>11033895</id><snippet>.inner</snippet></ROW><ROW><id>11033915</id><snippet>ArgumentParser</snippet></ROW><ROW><id>11033915</id><snippet>__init__</snippet></ROW><ROW><id>11033915</id><snippet>import re as _re
...
self._negative_number_matcher = _re.compile(r'^-\d+$|^-\d*\.\d+$')
</snippet></ROW><ROW><id>11033915</id><snippet>parser._negative_number_matcher = re.compile(r'^-\d+|^-\d*\.\d+')
</snippet></ROW><ROW><id>11034447</id><snippet>In [1]: import random
   ...: diary = {'ID': ['11', '22', '33', '44', '55'], 'TravelReferenceDay': [1, 1, 2, 3, 1]}
   ...: monday_diary = [x for n, x in enumerate(diary['ID']) if diary['TravelReferenceDay'][n] == 1]

In [2]: monday_diary
Out[2]: ['11', '22', '55']

In [3]: random.choice(monday_diary)
Out[3]: '22'
</snippet></ROW><ROW><id>11034483</id><snippet>span</snippet></ROW><ROW><id>11034483</id><snippet>&gt;&gt;&gt; doc.xpath('//span[@class="graytext" and @style="font-size: 11px"]')
[&lt;Element span at 1c9d4c8&gt;]
</snippet></ROW><ROW><id>11034483</id><snippet>from lxml import etree
s = """
&lt;tbody&gt;
 &lt;tr&gt;
   &lt;td style="border-bottom: none"&gt;
   &lt;span class="graytext" style="font-weight: bold;"&gt; Reply #3 - &lt;/span&gt;
    &lt;span class="graytext" style="font-size: 11px"&gt;
    05/13/09  2:02am
    &lt;br&gt;
   &lt;/span&gt;
  &lt;/td&gt;
 &lt;/tr&gt;
&lt;/tbody&gt;
"""
doc = etree.HTML(s)

def first(sequence,default=None):
  for item in sequence:
    return item
  return default
</snippet></ROW><ROW><id>11034483</id><snippet>&gt;&gt;&gt; doc.xpath('//span[@class="graytext" and @style="font-size: 11px"]')
[&lt;Element span at 1c9d4c8&gt;]
&gt;&gt;&gt; doc.xpath('//span[@class="graytext" and @style="font-size: 11px"]/text()')
['\n    05/13/09  2:02am\n    ']
&gt;&gt;&gt; first(doc.xpath('//span[@class="graytext" and @style="font-size: 11px"]/text()'),'').strip()
'05/13/09  2:02am'
</snippet></ROW><ROW><id>11034515</id><snippet>pip</snippet></ROW><ROW><id>11034515</id><snippet>$ pip freeze &gt; req.txt</snippet></ROW><ROW><id>11034515</id><snippet>$ pip install -r req.txt</snippet></ROW><ROW><id>11034515</id><snippet>req.txt</snippet></ROW><ROW><id>11034577</id><snippet>request.POST</snippet></ROW><ROW><id>11034577</id><snippet>form.cleaned_data</snippet></ROW><ROW><id>11034577</id><snippet>save_model</snippet></ROW><ROW><id>11034577</id><snippet>ValidationError</snippet></ROW><ROW><id>11034577</id><snippet>save_model</snippet></ROW><ROW><id>11034577</id><snippet>request.user</snippet></ROW><ROW><id>11034577</id><snippet>ModelAdmin.form</snippet></ROW><ROW><id>11034798</id><snippet>^-\d+</snippet></ROW><ROW><id>11034798</id><snippet>-23foo</snippet></ROW><ROW><id>11034798</id><snippet>^-\d+</snippet></ROW><ROW><id>11034907</id><snippet>def video_upload():
    upload_form = SQLFORM(db.encodeupload)
    if upload_form.validate():
        session._unlock(response)
        [while loop checking to see if file encoding is complete]
        db.encodeupload.insert(**db.encodeupload._filter_fields(form.vars))
    [rest of code]
</snippet></ROW><ROW><id>11034907</id><snippet>session._unlock(response)</snippet></ROW><ROW><id>11034907</id><snippet>session.forget(response)</snippet></ROW><ROW><id>11035274</id><snippet>colorsys.rgb_to_hsv()</snippet></ROW><ROW><id>11035302</id><snippet>&lt;type '_sre.SRE_Pattern'&gt;</snippet></ROW><ROW><id>11035302</id><snippet>type(re.compile(''))</snippet></ROW><ROW><id>11035302</id><snippet>re</snippet></ROW><ROW><id>11035302</id><snippet>_pattern_type = type(sre_compile.compile("", 0))
</snippet></ROW><ROW><id>11035956</id><snippet>data = data(name and mood=self.request.POST) 
</snippet></ROW><ROW><id>11035956</id><snippet>mood=self.request.POST
#"name and mood" is a logical expression which will return 
#"mood" if bool(name) is True and bool(mood) is True
#Otherwise it returns the first False value.
data=data(name and mood)  
</snippet></ROW><ROW><id>11035992</id><snippet>data</snippet></ROW><ROW><id>11035992</id><snippet>import numpy as np

f = open("filename.txt")
f.readline()  # skip the header
data = np.loadtxt(f)
</snippet></ROW><ROW><id>11035992</id><snippet>y</snippet></ROW><ROW><id>11035992</id><snippet>data</snippet></ROW><ROW><id>11035992</id><snippet>X = data[:, 1:]  # select columns 1 through end
y = data[:, 0]   # select column 0, the stock price
</snippet></ROW><ROW><id>11035992</id><snippet>csv</snippet></ROW><ROW><id>11036313</id><snippet>coh0 = int((int(coh0)/500)/120)
</snippet></ROW><ROW><id>11036313</id><snippet>coh0 //= 60000
</snippet></ROW><ROW><id>11036313</id><snippet>coh0</snippet></ROW><ROW><id>11036313</id><snippet>foo1</snippet></ROW><ROW><id>11036313</id><snippet>foo1</snippet></ROW><ROW><id>11036461</id><snippet>class FilterValue(models.Model):
    name = models.CharField('Name', max_length=255)
    filter = models.ForeignKey(Filter)

    class Meta:
        unique_together = (("name", "filter"),)
</snippet></ROW><ROW><id>11036614</id><snippet>&gt;&gt;&gt; from gi.repository import Gtk
&gt;&gt;&gt; dir(Gtk.TreeModel)
['__bool__', '__class__', '__delattr__', '__delitem__', '__dict__', '__doc__',
 '__format__', '__gdoc__', '__getattribute__', '__getitem__', '__gtype__', '__hash__', 
 '__info__', '__init__', '__iter__', '__len__', '__module__', '__new__', '__nonzero__',
 '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__setitem__', '__sizeof__', 
 '__str__', '__subclasshook__', '__weakref__', '_convert_row', '_convert_value', 
 '_getiter', 'filter_new', 'foreach', 'get', 'get_column_type', 'get_flags', 'get_iter',
 'get_iter_first', 'get_iter_from_string', 'get_n_columns', 'get_path', 
 'get_string_from_iter', 'get_value', 'iter_children', 'iter_has_child', 
 'iter_n_children', 'iter_next', 'iter_nth_child', 'iter_parent', 'iter_previous', 
 'ref_node', 'row_changed', 'row_deleted', 'row_has_child_toggled', 'row_inserted', 
 'set_row', 'sort_new_with_model', 'unref_node']
</snippet></ROW><ROW><id>11036638</id><snippet>from collections import defaultdict

# Count numbers in a dictionary that defaults to zero if a key does not exist yet
counter = defaultdict(int)

with open("filename", "rU") as f:
    for line in f:
        info = line.split()
        date, time, unused, number, id = info[:5]
        counter[id, number] += 1

for (id, number), count in counter.items():
    print("The combination id=%s, number=%s occurred %d times" % (id, number, count))
</snippet></ROW><ROW><id>11036888</id><snippet>clone()</snippet></ROW><ROW><id>11036888</id><snippet>insertBefore()</snippet></ROW><ROW><id>11036888</id><snippet>insertAfter()</snippet></ROW><ROW><id>11036888</id><snippet>&lt;div style="display:none"&gt;&lt;/div&gt;</snippet></ROW><ROW><id>11036958</id><snippet>.pyd</snippet></ROW><ROW><id>11036958</id><snippet>PYTHONPATH</snippet></ROW><ROW><id>11037010</id><snippet>__iter__()</snippet></ROW><ROW><id>11037010</id><snippet>class LFSeq(object):
    def __init__(self, func):
        self.evaluated = []
        self.func = func
    def __iter__(self):
        index = 0
        while True:
            if index == len(self.evaluated):
                self.evaluated.append(self.func())
            yield self.evaluated[index]
            index += 1
</snippet></ROW><ROW><id>11037033</id><snippet>c.most_common()</snippet></ROW><ROW><id>11037033</id><snippet>Counter.most_common()</snippet></ROW><ROW><id>11037090</id><snippet>...</snippet></ROW><ROW><id>11037090</id><snippet>output=["Apple","Orange","Pear"]
team_slices=[[0,1],[1,2],[2,3]]
team_slices.each do |start, last|
  print output[start...last]
end
</snippet></ROW><ROW><id>11037090</id><snippet>end</snippet></ROW><ROW><id>11037090</id><snippet>last</snippet></ROW><ROW><id>11037406</id><snippet>pty=False</snippet></ROW><ROW><id>11037406</id><snippet>run("twistd -y run.tac", pty=False)
</snippet></ROW><ROW><id>11037803</id><snippet>Pool</snippet></ROW><ROW><id>11037803</id><snippet>from multiprocessing import Pool

# Note: This many threads may make your system unresponsive for a while
p = Pool(100)

# First argument is the function to call,
# second argument is a list of arguments
# (the function is called on each item in the list)
p.map(extractproducts, pagenumberlist)
</snippet></ROW><ROW><id>11037803</id><snippet>Pool.map</snippet></ROW><ROW><id>11037803</id><snippet>def f(x):
    return x + 1

results = Pool().map(f, [1, 4, 5])
print(results) # [2, 5, 6]
</snippet></ROW><ROW><id>11037996</id><snippet>In [15]: df.resample('M', kind='period')
Out[15]: 
          0
Jan-2012  1
Feb-2012  2
Mar-2012  3
</snippet></ROW><ROW><id>11038086</id><snippet>pandas.concat</snippet></ROW><ROW><id>11038086</id><snippet>keys</snippet></ROW><ROW><id>11038086</id><snippet>In [20]: data
Out[20]: 
{'a': 2012-04-16    0
2012-04-17    1
2012-04-18    2
2012-04-19    3
2012-04-20    4
2012-04-21    5
2012-04-22    6
2012-04-23    7
2012-04-24    8
2012-04-25    9
Freq: D,
 'b': 2012-04-16    0
2012-04-17    1
2012-04-18    2
2012-04-19    3
2012-04-20    4
2012-04-21    5
2012-04-22    6
2012-04-23    7
2012-04-24    8
2012-04-25    9
Freq: D,
 'c': 2012-04-16    0
2012-04-17    1
2012-04-18    2
2012-04-19    3
2012-04-20    4
2012-04-21    5
2012-04-22    6
2012-04-23    7
2012-04-24    8
2012-04-25    9
Freq: D}

In [21]: df = pd.concat(data, axis=1, keys=['a', 'b', 'c'])

In [22]: df
Out[22]: 
            a  b  c
2012-04-16  0  0  0
2012-04-17  1  1  1
2012-04-18  2  2  2
2012-04-19  3  3  3
2012-04-20  4  4  4
2012-04-21  5  5  5
2012-04-22  6  6  6
2012-04-23  7  7  7
2012-04-24  8  8  8
2012-04-25  9  9  9

In [23]: df2 = pd.concat([df, df], axis=1, keys=['group1', 'group2'])

In [24]: df2
Out[24]: 
            group1        group2      
                 a  b  c       a  b  c
2012-04-16       0  0  0       0  0  0
2012-04-17       1  1  1       1  1  1
2012-04-18       2  2  2       2  2  2
2012-04-19       3  3  3       3  3  3
2012-04-20       4  4  4       4  4  4
2012-04-21       5  5  5       5  5  5
2012-04-22       6  6  6       6  6  6
2012-04-23       7  7  7       7  7  7
2012-04-24       8  8  8       8  8  8
2012-04-25       9  9  9       9  9  9
</snippet></ROW><ROW><id>11038086</id><snippet>In [25]: df2['group2']
Out[25]: 
            a  b  c
2012-04-16  0  0  0
2012-04-17  1  1  1
2012-04-18  2  2  2
2012-04-19  3  3  3
2012-04-20  4  4  4
2012-04-21  5  5  5
2012-04-22  6  6  6
2012-04-23  7  7  7
2012-04-24  8  8  8
2012-04-25  9  9  9
</snippet></ROW><ROW><id>11038086</id><snippet>In [27]: df2.xs('b', axis=1, level=1)
Out[27]: 
            group1  group2
2012-04-16       0       0
2012-04-17       1       1
2012-04-18       2       2
2012-04-19       3       3
2012-04-20       4       4
2012-04-21       5       5
2012-04-22       6       6
2012-04-23       7       7
2012-04-24       8       8
2012-04-25       9       9
</snippet></ROW><ROW><id>11038086</id><snippet>In [29]: pd.concat([df2, df2], axis=1, keys=['tier1', 'tier2'])
Out[29]: 
             tier1                       tier2                    
            group1        group2        group1        group2      
                 a  b  c       a  b  c       a  b  c       a  b  c
2012-04-16       0  0  0       0  0  0       0  0  0       0  0  0
2012-04-17       1  1  1       1  1  1       1  1  1       1  1  1
2012-04-18       2  2  2       2  2  2       2  2  2       2  2  2
2012-04-19       3  3  3       3  3  3       3  3  3       3  3  3
2012-04-20       4  4  4       4  4  4       4  4  4       4  4  4
2012-04-21       5  5  5       5  5  5       5  5  5       5  5  5
2012-04-22       6  6  6       6  6  6       6  6  6       6  6  6
2012-04-23       7  7  7       7  7  7       7  7  7       7  7  7
2012-04-24       8  8  8       8  8  8       8  8  8       8  8  8
2012-04-25       9  9  9       9  9  9       9  9  9       9  9  9
</snippet></ROW><ROW><id>11038243</id><snippet># from collections import Counter
from pprint import pprint

table = [['Bacteria', 'Aquificae', 'Persephonella'],
        ['Bacteria', 'Aquificae', 'Thermovibrio'],
        ['Bacteria', 'Firmicutes', 'Bacillus']]

# count_dict = Counter( [ item for row in table for item in row   ] )

count_dict = {}
for row in table:
    for item in row:
        count_dict[item] = count_dict.get(item, 0) + 1

for index_row, row in enumerate(table):
    for index_col, element in enumerate(row):
        if element in count_dict:
            table[index_row][index_col] = '%s %s' % (element, count_dict[element])
            del count_dict[element]
        else:
            table[index_row][index_col] = '-'

pprint(table)
</snippet></ROW><ROW><id>11038243</id><snippet>[['Bacteria 3', 'Aquificae 2', 'Persephonella 1'],
 ['-', '-', 'Thermovibrio 1'],
 ['-', 'Firmicutes 1', 'Bacillus 1']]
</snippet></ROW><ROW><id>11038254</id><snippet>'xxabbbbbxxabbbbbbbbb' =~ /([ab]*)bb/;
</snippet></ROW><ROW><id>11038254</id><snippet>[ab]*</snippet></ROW><ROW><id>11038254</id><snippet>bb</snippet></ROW><ROW><id>11038254</id><snippet>[ab]*</snippet></ROW><ROW><id>11038254</id><snippet>[ab]*</snippet></ROW><ROW><id>11038254</id><snippet>bb</snippet></ROW><ROW><id>11038254</id><snippet>[ab]*</snippet></ROW><ROW><id>11038254</id><snippet>[ab]*</snippet></ROW><ROW><id>11038254</id><snippet>abbbbb</snippet></ROW><ROW><id>11038254</id><snippet>bb</snippet></ROW><ROW><id>11038254</id><snippet>[ab]*</snippet></ROW><ROW><id>11038254</id><snippet>abbbb</snippet></ROW><ROW><id>11038254</id><snippet>bb</snippet></ROW><ROW><id>11038254</id><snippet>[ab]*</snippet></ROW><ROW><id>11038254</id><snippet>abbb</snippet></ROW><ROW><id>11038254</id><snippet>bb</snippet></ROW><ROW><id>11038254</id><snippet>abbbbbbb</snippet></ROW><ROW><id>11038254</id><snippet>'xxabbbbbxxabbbbbbbbb' =~ /([ab]*?)bb/;
</snippet></ROW><ROW><id>11038254</id><snippet>[ab]*?</snippet></ROW><ROW><id>11038254</id><snippet>bb</snippet></ROW><ROW><id>11038254</id><snippet>[ab]*</snippet></ROW><ROW><id>11038254</id><snippet>[ab]*?</snippet></ROW><ROW><id>11038254</id><snippet>bb</snippet></ROW><ROW><id>11038254</id><snippet>[ab]*</snippet></ROW><ROW><id>11038254</id><snippet>[ab]*?</snippet></ROW><ROW><id>11038254</id><snippet>bb</snippet></ROW><ROW><id>11038254</id><snippet>[ab]*?</snippet></ROW><ROW><id>11038254</id><snippet>a</snippet></ROW><ROW><id>11038254</id><snippet>bb</snippet></ROW><ROW><id>11038254</id><snippet>perl -Mre=debug -E'say "xxabbbbbxxabbbbbbbbb" =~ /([ab]*)bb/;'
perl -Mre=debug -E'say "xxabbbbbxxabbbbbbbbb" =~ /([ab]*?)bb/;'
</snippet></ROW><ROW><id>11038272</id><snippet>str</snippet></ROW><ROW><id>11038272</id><snippet>len</snippet></ROW><ROW><id>11038272</id><snippet>len</snippet></ROW><ROW><id>11038272</id><snippet>str</snippet></ROW><ROW><id>11038272</id><snippet>len</snippet></ROW><ROW><id>11038272</id><snippet>len</snippet></ROW><ROW><id>11038643</id><snippet>accept()</snippet></ROW><ROW><id>11038643</id><snippet>import socket
import threading
import select
from Queue import Queue

class ClientThread ( threading.Thread ):

   def __init__ ( self, channel, details, queue=None ):
      self.channel = channel
      self.details = details
      self.queue = queue
      threading.Thread.__init__ ( self )

   def run ( self ):

      if self.queue:
         self.queue.put(1)

      print 'Received connection:', self.details [ 0 ]
      self.channel.send ( 'hello from server' )
      for x in xrange ( 10 ):
         print self.channel.recv ( 1024 )
      self.channel.close()
      print 'Closed connection:', self.details [ 0 ]

      if self.queue:
         self.queue.get_nowait()

# Set up the server:
server = socket.socket ( socket.AF_INET, socket.SOCK_STREAM )
server.bind ( ( '', 2727 ) )
server.listen ( 5 )

rlist = [server]
work_queue = Queue()

def accept_client():
   channel, details = server.accept()
   ClientThread ( channel, details, work_queue ).start() 

accept_client()

while not work_queue.empty():
   server_ready, _, _ = select.select(rlist,[],[], .25)
   if server in server_ready:
      accept_client()

print "Shutting down"
server.close()
print "Exiting"
</snippet></ROW><ROW><id>11038643</id><snippet>.25</snippet></ROW><ROW><id>11038685</id><snippet>&gt;&gt;&gt; import traceback
&gt;&gt;&gt; def what():
...    traceback.print_stack()
... 
&gt;&gt;&gt; def hey():
...    what()
... 
&gt;&gt;&gt; hey()
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
  File "&lt;stdin&gt;", line 2, in hey
  File "&lt;stdin&gt;", line 2, in what
</snippet></ROW><ROW><id>11038685</id><snippet>#tracetest.py

def what():
    return 3

def hey():
    return what()

def yo():
    return hey()

import trace
tracer = trace.Trace()
tracer.run("yo()")
r = tracer.results()
r.write_results()
</snippet></ROW><ROW><id>11038685</id><snippet>$ python tracetest.py
 --- modulename: tracetest, funcname: &lt;module&gt;
&lt;string&gt;(1):   --- modulename: tracetest, funcname: yo
tracetest.py(8):     return hey()
 --- modulename: tracetest, funcname: hey
tracetest.py(5):     return what()
 --- modulename: tracetest, funcname: what
tracetest.py(2):     return 3
</snippet></ROW><ROW><id>11038838</id><snippet>Zm = ma.masked_where((abs(z_grid) &lt; 1.02) &amp; (abs(z_grid) &gt; 0.98), (z_surface))
z_surface[where(ma.getmask(Zm)==True)] = numpy.nan
</snippet></ROW><ROW><id>11038838</id><snippet>cmap = cm.jet
lev = numpy.arange(-30,30,1);
norml = colors.BoundaryNorm(lev, 256)

surf = ax.plot_surface(X, Y, z_surface,...,norm = norml)
</snippet></ROW><ROW><id>11039242</id><snippet>class Room:
    def __init__(self, building, floor, office):
        self.building = building
        self.floor = floor
        self.office = office 

class Entry:
    def __init__(self, lastname, firstname, room):
        self.lastname = lastname
        self.firstname = firstname
        self.room = room 

entries = []
file=open('file.txt','r')
for line in file.readlines():
    lastname, remaining = line.split(', ')
    firstname, remaining = remaining.split(' ')
    building, floor, office = remaining.split('.')
    room = Room(building, floor, office)
    entry = Entry(lastname, firstname, room)
    entries.append(entry)
file.close()
</snippet></ROW><ROW><id>11039527</id><snippet>import zipfile
from zipfile import ZipFile
import cStringIO as StringIO
from django.http import HttpResponse
from django.core.servers.basehttp import FileWrapper
import os

def zipit (request):
    files = ['/home/dbs/public_html/download/codex/video.html', '/home/dbs/public_html/download/audio/audio.html']
    buffer = StringIO.StringIO()
    z = zipfile.ZipFile(buffer, "w")
    [z.write(f, os.path.join('codex', os.path.basename(f))) for f in files]
    z.close()
    buffer.seek(0)
    response = HttpResponse(buffer.read())
    response['Content-Disposition'] = 'attachment; filename=z.zip'
    response['Content-Type'] = 'application/x-zip'
    return response
</snippet></ROW><ROW><id>11039609</id><snippet>{{=T('message to translate')}}</snippet></ROW><ROW><id>11039609</id><snippet>&lt;form id="login_box" msg="{{=T('Thank you for contacting us! We have received your email and will contact you shortly.')}}" onSubmit="alert(this.getAttribute('msg')); this.submit(); this.reset(); return false;"&gt;
</snippet></ROW><ROW><id>11039720</id><snippet>__init__.py</snippet></ROW><ROW><id>11039720</id><snippet>import a, b, c, d...
</snippet></ROW><ROW><id>11039720</id><snippet>package</snippet></ROW><ROW><id>11039720</id><snippet>import package</snippet></ROW><ROW><id>11039720</id><snippet>a</snippet></ROW><ROW><id>11039720</id><snippet>b</snippet></ROW><ROW><id>11039720</id><snippet>from package import *</snippet></ROW><ROW><id>11040056</id><snippet>import mechanize
import urllib

post_url = 'http://as0.mta.info/mnr/fares/get_fares.cfm'

orig = 295 #BEACON FALLS
dest = 292 #ANSONIA

params = urllib.urlencode({'dest_stat':dest, 'orig_stat':orig })
rq = mechanize.Request(post_url, params)

fares_page = mechanize.urlopen(rq)

print fares_page.read()
</snippet></ROW><ROW><id>11040056</id><snippet>refillList()</snippet></ROW><ROW><id>11040056</id><snippet>import mechanize
import urllib, urllib2
from bs4 import BeautifulSoup

url = 'http://as0.mta.info/mnr/fares/choosestation.cfm'
post_url = 'http://as0.mta.info/mnr/fares/get_fares.cfm'

def get_fares(orig, dest):
    params = urllib.urlencode({'dest_stat':dest, 'orig_stat':orig })
    rq = mechanize.Request(post_url, params)

    fares_page = mechanize.urlopen(rq)
    print(fares_page.read())

pool = BeautifulSoup(urllib2.urlopen(url).read())

#let's keep our stations organised
stations = {}

# dict by station id
for option in pool.find('select', {'name':'orig_stat'}).findChildren():
    stations[option['value']] = {'name':option.string}

#iterate over all routes
for origin in stations:
    destinations = get_list_of_dests(origin) #use your code for this
    stations[origin]['dests'] = destinations

    for destination in destinations:
        print('Processing from %s to %s' % (origin, destination))
        get_fares(origin, destination)
</snippet></ROW><ROW><id>11040248</id><snippet>def formatTime(self, _record, _datefmt):
    t = datetime.datetime.now()
    s = t.strftime('%Y-%m-%d %H:%M:%S.%f')
    return s[:-3]
</snippet></ROW><ROW><id>11040248</id><snippet>def formatTime(self, _record, _datefmt):
    t = datetime.datetime.now()
    s = t.strftime('%Y-%m-%d %H:%M:%S.%f')
    tail = s[-7:]
    f = round(float(tail), 3)
    return "%s%.3f" % (s[:-7], f)
</snippet></ROW><ROW><id>11040412</id><snippet>widget.after(10, functools.partial(self.runBackup, mybackup))
</snippet></ROW><ROW><id>11040513</id><snippet>instance.var</snippet></ROW><ROW><id>11040513</id><snippet>self.var</snippet></ROW><ROW><id>11040513</id><snippet>instance.list = somethingelse</snippet></ROW><ROW><id>11040513</id><snippet>self.list = somethingelse</snippet></ROW><ROW><id>11040513</id><snippet>&gt;&gt;&gt; class A():
...     var = 0
...     list = []
...
&gt;&gt;&gt; a = A()
&gt;&gt;&gt; b = A()
&gt;&gt;&gt; a.var
0
&gt;&gt;&gt; a.list
[]
&gt;&gt;&gt; b.var
0
&gt;&gt;&gt; b.list
[]
&gt;&gt;&gt; a.var = 1
&gt;&gt;&gt; b.var
0
&gt;&gt;&gt; a.list.append('hello')
&gt;&gt;&gt; b.list
['hello']
&gt;&gt;&gt; b.list = ['newlist']
&gt;&gt;&gt; a.list
['hello']
&gt;&gt;&gt; b.list
['newlist']
</snippet></ROW><ROW><id>11040720</id><snippet>if</snippet></ROW><ROW><id>11040720</id><snippet>elif</snippet></ROW><ROW><id>11040720</id><snippet>if 'video' in mylist:
    files.append('/home/dbs/public_html/download/codex/codex.html')
if 'audio' in mylist:
    files.append('/home/dbs/public_html/download/audio/audio_player.html')
if 'visual' in mylist:
    files.append('/home/dbs/public_html/download/visual/visual.html')
</snippet></ROW><ROW><id>11040720</id><snippet>`... in mylist</snippet></ROW><ROW><id>11040720</id><snippet>paths = {
    'video': '/home/dbs/public_html/download/codex/codex.html',
    'audio': '/home/dbs/public_html/download/audio/audio_player.html',
    'visual': '/home/dbs/public_html/download/visual/visual.html'
}

files += [path for key, path in paths.iteritems() if key in mylist]
</snippet></ROW><ROW><id>11040729</id><snippet>class YourDictModel(ndb.Model):
    data = ndb.BlobKeyProperty()

huge_dict = dict(...)

file_name = files.blobstore.create(mime_type='application/octet-stream')
with files.open(file_name, 'a') as f:
    f.write(marshal.dumps(huge_dict))

    # Finalize the file. Do this before attempting to read it.
    files.finalize(file_name)

    # Get the file's blob key
    blob_key = files.blobstore.get_blob_key(file_name)
    entity = YourDictModel(data = blob_key)

    entity.put()
</snippet></ROW><ROW><id>11040816</id><snippet>open</snippet></ROW><ROW><id>11040816</id><snippet>DATA_PATH = '/var/lib/mypackage'

def backup():
    f = open(os.path.join(DATA_PATH, 'backup.txt'), 'w')
    f.write('some backup data...')
    f.close()
</snippet></ROW><ROW><id>11040852</id><snippet>import numpy as np

def test(input):
    return input

def memoize(function):
    cache = {}
    def decorated_function(*args):
        if args in cache:
            print 'cached'
            return cache[args]
        else:
            print 'not cached'
            val = function(*args)
            cache[args] = val
            return val
    return decorated_function

test = memoize(test)
print test(9)
print test(9)
test = np.vectorize(test)
print test(9)
print test(10)
print test(10)
</snippet></ROW><ROW><id>11040852</id><snippet>not cached
9
cached
9
cached
cached
9
not cached
10
cached
10
</snippet></ROW><ROW><id>11040905</id><snippet>w = csv.writer(...)
for r in records: 
    l = {}
    for field in fields:
        f_ = rename(field)
        v_ = transform(field, r.get(field, default(field)))
        l[f_] = v_
    w.write(l)
</snippet></ROW><ROW><id>11040905</id><snippet>rename</snippet></ROW><ROW><id>11040905</id><snippet>transform</snippet></ROW><ROW><id>11040905</id><snippet>default</snippet></ROW><ROW><id>11040905</id><snippet>rename</snippet></ROW><ROW><id>11040905</id><snippet>transform</snippet></ROW><ROW><id>11040905</id><snippet>default</snippet></ROW><ROW><id>11040905</id><snippet>def rename(field):
    t = {'emailOptOut':'EMAIL PREFERENCE'}
    return t.get(field, field)

def transform(field, data):
    t = {'emailOptOut': bool}
    return t.get(field, lambda a: a)(data)

def default(field)
    t = {'MERCHANT ID':11039215}
    return t.get(field, None)
</snippet></ROW><ROW><id>11041179</id><snippet>import difflib

def similar(seq1, seq2):
    return difflib.SequenceMatcher(a=seq1.lower(), b=seq2.lower()).ratio() &gt; 0.9

def unique(mylist, keys):
    temp = mylist[:]
    for d in mylist:
        temp.pop(0)
        [d2.pop(i) for i in keys if d.has_key(i)
         for d2 in temp if d2.has_key(i) and similar(d[i], d2[i])] 
    return mylist
</snippet></ROW><ROW><id>11041179</id><snippet>mylist = [{"greeting":"HELLO WORLD!"}, {"greeting":"Hello Mars"}, {"greeting":"Hello World!!!"}, {"greeting":"hello world"}]
unique(mylist, ['greeting'])

print mylist
</snippet></ROW><ROW><id>11041179</id><snippet>[{'greeting': 'HELLO WORLD!'}, {'greeting': 'Hello Mars'}, {}, {}]
</snippet></ROW><ROW><id>11041223</id><snippet>id</snippet></ROW><ROW><id>11041223</id><snippet>id</snippet></ROW><ROW><id>11041223</id><snippet>uuid</snippet></ROW><ROW><id>11041223</id><snippet>class Foo(object):
    __COUNT = 0
    # or: __COUNT = random.randint(0, 2**N - 1)

    def __init__(self):
        self.unique_id = self.__COUNT  # or take the SHA1 of the count
        type(self).__COUNT += 1
</snippet></ROW><ROW><id>11041421</id><snippet>dictionary.get("bogus", None)
</snippet></ROW><ROW><id>11041421</id><snippet>None</snippet></ROW><ROW><id>11041421</id><snippet>dictionary["bogus"]
</snippet></ROW><ROW><id>11041421</id><snippet>KeyError</snippet></ROW><ROW><id>11041591</id><snippet>pattern = r'\b({})\b'.format('|'.join(map(re.escape, exclusionList)))
first_word = re.sub(pattern, '', first_word)
</snippet></ROW><ROW><id>11041595</id><snippet>    # At this point, we know there is a &lt; bracket in the 'From' value
    acceptable_chars = ["a", "b", "c", ... "6", "7", "8", "9", "0", "_", ".", "@"]
    from_str = msg["From"].lower().split("&lt;")[-1]

    stripped_from = ''
    for letter in from_str:
        if letter in acceptable_chars:
            stripped_from += letter

    return stripped_from
</snippet></ROW><ROW><id>11041701</id><snippet>%20</snippet></ROW><ROW><id>11041701</id><snippet>SlugField</snippet></ROW><ROW><id>11041701</id><snippet>slugify</snippet></ROW><ROW><id>11041701</id><snippet>http://domain.com/{{ some_string_with_spaces|slugify }}/
</snippet></ROW><ROW><id>11041701</id><snippet>from django.template.defaultfilters import slugify

u'http://domain.com/%s/' % slugify(some_string_with_spaces)
</snippet></ROW><ROW><id>11041719</id><snippet>p.start()</snippet></ROW><ROW><id>11041719</id><snippet>p.start()</snippet></ROW><ROW><id>11041719</id><snippet>worker</snippet></ROW><ROW><id>11041888</id><snippet>print</snippet></ROW><ROW><id>11041888</id><snippet>repr</snippet></ROW><ROW><id>11041888</id><snippet>&gt;&gt;&gt; l = ['C:\\Users\\Dev\\Desktop\\Python_Test\\Dir 1',
...      'C:\\Users\\Dev\\Desktop\\Python_Test\\Dir 2']
&gt;&gt;&gt; for x in l:
...     print(repr(x))
...     
'C:\\Users\\Dev\\Desktop\\Python_Test\\Dir 1'
'C:\\Users\\Dev\\Desktop\\Python_Test\\Dir 2'
</snippet></ROW><ROW><id>11041888</id><snippet>repr</snippet></ROW><ROW><id>11041888</id><snippet>repr</snippet></ROW><ROW><id>11041888</id><snippet>str</snippet></ROW><ROW><id>11041888</id><snippet>&gt;&gt;&gt; for x in l:
...     print(x)
...     
C:\Users\Dev\Desktop\Python_Test\Dir 1
C:\Users\Dev\Desktop\Python_Test\Dir 2
</snippet></ROW><ROW><id>11041888</id><snippet>os.walk</snippet></ROW><ROW><id>11041888</id><snippet>os.path.join</snippet></ROW><ROW><id>11042004</id><snippet>split()</snippet></ROW><ROW><id>11042004</id><snippet>x.split()</snippet></ROW><ROW><id>11042004</id><snippet>&gt;&gt;&gt; x = 'asdf foo\nHi\nBar thing'
&gt;&gt;&gt; x.split()
['asdf', 'foo', 'Hi', 'Bar', 'thing']
</snippet></ROW><ROW><id>11042230</id><snippet>0xEF,0xBB,0xBF</snippet></ROW><ROW><id>11042230</id><snippet>UTF-8</snippet></ROW><ROW><id>11042242</id><snippet>def extract_data(s):
    check_set = set(['E1', 'E2', 'E7', 'E3', 'E9', 'E10', 'E12',
                     'IN1', 'IN2', 'IN4', 'IN10'])
    result = []
    for match in re.finditer(r'\b(E|IN)[-\d]+', s):
        for digits in re.findall(r'\d+', match.group(0)):
            item = match.group(1) + digits
            if item in check_set:
                result.append(item)
    return result
</snippet></ROW><ROW><id>11042242</id><snippet>&gt;&gt;&gt; extract_data("apto E1-E10 tower 1-2 sanit")
['E1', 'E10']
&gt;&gt;&gt; extract_data("apto IN2-IN1-IN4-E12-IN10 mamp")
['IN2', 'IN1', 'IN4', 'E12', 'IN10']
&gt;&gt;&gt; extract_data("E-2-7-3-9-12; IN1-4-10 T 1-2 inst. hidr.")
['E2', 'E7', 'E3', 'E9', 'E12', 'IN1', 'IN4', 'IN10']
</snippet></ROW><ROW><id>11042263</id><snippet>list</snippet></ROW><ROW><id>11042263</id><snippet>p.ip[0]</snippet></ROW><ROW><id>11042263</id><snippet>unicode</snippet></ROW><ROW><id>11042263</id><snippet>encode</snippet></ROW><ROW><id>11042263</id><snippet>p.ip[0].encode('utf8')</snippet></ROW><ROW><id>11042297</id><snippet>WSGIApplication</snippet></ROW><ROW><id>11042297</id><snippet>Router</snippet></ROW><ROW><id>11042297</id><snippet>router</snippet></ROW><ROW><id>11042297</id><snippet>LazyView</snippet></ROW><ROW><id>11042297</id><snippet>LateLoader</snippet></ROW><ROW><id>11042297</id><snippet>Mapper</snippet></ROW><ROW><id>11042297</id><snippet>from flask import Flask

app = Flask("yourapp")
# ... snip ...
</snippet></ROW><ROW><id>11042297</id><snippet>from .app import app
from hip_pocket import Mapper

mapper = Mapper(app)

mapper.add_url_rule("/", "index.index")
mapper.add_url_rule("/test", "index.test_endpoint", methods=["POST"])

mapper.add_url_rule("/say-hello/&lt;name&gt;",
                        "say_hello.greeter",
                        methods=["GET", "POST"])
</snippet></ROW><ROW><id>11042297</id><snippet>def index():
    return "Hello from yourapp.index.index!"

def test_endpoint():
    return "Got a post request at yourapp.index.test_endpoint"
</snippet></ROW><ROW><id>11042297</id><snippet>def say_hello(name=None):
    name = name if name is not None else "World"
    return "Greetings {name}!".format(name=name)
</snippet></ROW><ROW><id>11042297</id><snippet>from yourapp.app import app
from yourapp.urls import mapper
# We need to import the mapper to cause the URLs to be mapped.

if __name__ == "__main__":
    app.run()
</snippet></ROW><ROW><id>11042428</id><snippet>fahToCel = ((fahTemp - 32) * (5/9))
</snippet></ROW><ROW><id>11042428</id><snippet>5/9</snippet></ROW><ROW><id>11042428</id><snippet>0</snippet></ROW><ROW><id>11042428</id><snippet>5.0/9.0</snippet></ROW><ROW><id>11042428</id><snippet>celTemp</snippet></ROW><ROW><id>11042459</id><snippet>split()</snippet></ROW><ROW><id>11042459</id><snippet>csv</snippet></ROW><ROW><id>11042459</id><snippet>StringIO</snippet></ROW><ROW><id>11042459</id><snippet>StringIO</snippet></ROW><ROW><id>11042459</id><snippet>csv.reader</snippet></ROW><ROW><id>11042459</id><snippet>import csv
from cStringIO import StringIO

s = "12345 North Drive,,\"Palm Retreat, CO\",CO,92261"
s = StringIO(s)
reader = csv.reader(s, delimiter=",")
for row in reader:
    print row
</snippet></ROW><ROW><id>11042459</id><snippet>csv.reader</snippet></ROW><ROW><id>11042459</id><snippet>csv.reader</snippet></ROW><ROW><id>11042459</id><snippet>StringIO</snippet></ROW><ROW><id>11042479</id><snippet>grid</snippet></ROW><ROW><id>11042479</id><snippet>pack</snippet></ROW><ROW><id>11042479</id><snippet>pack</snippet></ROW><ROW><id>11042479</id><snippet>pack</snippet></ROW><ROW><id>11042479</id><snippet>pack</snippet></ROW><ROW><id>11042728</id><snippet>python setup.py install</snippet></ROW><ROW><id>11042728</id><snippet>python setup.py develop</snippet></ROW><ROW><id>11042986</id><snippet>0.7.3</snippet></ROW><ROW><id>11042986</id><snippet>DataFrame</snippet></ROW><ROW><id>11042986</id><snippet>df.to_csv('mydf.tsv', sep='\t')
</snippet></ROW><ROW><id>11042986</id><snippet>,</snippet></ROW><ROW><id>11042986</id><snippet>MultiIndex</snippet></ROW><ROW><id>11042986</id><snippet>MultiIndex</snippet></ROW><ROW><id>11042986</id><snippet>DataFrame</snippet></ROW><ROW><id>11042986</id><snippet>In [1]: t_df = read_table('mydf.tsv', index_col=[0,1,2])
In [2]: all(t_df.index == df.index)
Out[2]: True
</snippet></ROW><ROW><id>11042986</id><snippet>mydf.tsv</snippet></ROW><ROW><id>11042986</id><snippet>DataFrame</snippet></ROW><ROW><id>11042986</id><snippet>df</snippet></ROW><ROW><id>11042986</id><snippet>In [3]: all(t_df.columns == df.columns)
Out[3]: False
</snippet></ROW><ROW><id>11042986</id><snippet>MultiIndex</snippet></ROW><ROW><id>11042986</id><snippet>MultiIndex</snippet></ROW><ROW><id>11042986</id><snippet>In [4]: from ast import literal_eval
In [5]: t_df.columns = MultiIndex.from_tuples(t_df.columns.map(literal_eval).tolist(), 
                                              names=['one','two','three'])
In [6]: all(t_df.columns == df.columns)
Out[6]: True
</snippet></ROW><ROW><id>11043033</id><snippet>def buildDict2(theList, range1, range2):
    newdict = {}
    for a in theList:
        if range2 &gt;= len(a) or range1 &gt;= len(a):
            return "error"
        newdict[a[range1]] = a[range2]
    return newdict
if __name__ == '__main__':
    print buildDict2([["a", "s","d", 2,0,1],["b", "f",3,"h",0,2],["c", "g",5,7]],0,3)
</snippet></ROW><ROW><id>11043065</id><snippet>name = self.request.get('name')</snippet></ROW><ROW><id>11043065</id><snippet>r = Reseller()</snippet></ROW><ROW><id>11043065</id><snippet>r.put()</snippet></ROW><ROW><id>11043214</id><snippet>yourdata = [{15: [32, 'massages']}, {45: [12, 'hair-salon']}, {23:[3, 'automotive service']}]

# transfer your data into a more usable format
data = [(score,cat,name) for dat in yourdata for cat,(score,name) in dat.iteritems()]

# sort on descending score
data.sort(reverse=True)

# throw away the low-scoring items
data = data[:int(len(data)*0.6 + 1)]
</snippet></ROW><ROW><id>11043214</id><snippet>[(32, 15, 'massages'), (12, 45, 'hair-salon')]
</snippet></ROW><ROW><id>11043215</id><snippet>-30.14348404555906 &lt; lat &lt; -27.740202928232875
</snippet></ROW><ROW><id>11043215</id><snippet>132.20886239843753 &lt; lng &lt; 135.99914560156253
</snippet></ROW><ROW><id>11043350</id><snippet>def list_of_dicts(d):
    return [{key:value} for key, value in d.iteritems()]

print list_of_dicts({"a": 1,"b": 2,"c": 3})
</snippet></ROW><ROW><id>11043350</id><snippet>list_of_dicts()</snippet></ROW><ROW><id>11043350</id><snippet>dict</snippet></ROW><ROW><id>11043390</id><snippet>In [4]: import tempfile

In [5]: tf = tempfile.NamedTemporaryFile()  
In [6]: tf.name  # retrieve the name of the temp file just created
Out[6]: 'c:\\blabla\\locals~1\\temp\\tmptecp3i'
</snippet></ROW><ROW><id>11043390</id><snippet>delete</snippet></ROW><ROW><id>11043390</id><snippet>delete</snippet></ROW><ROW><id>11043478</id><snippet>try:
    val = int(hex_val, 16)
except ValueError:
    # Not a valid hex value

if val &gt; int("FFFFFF", 16):
    # Value is too large
</snippet></ROW><ROW><id>11043818</id><snippet>easy_install</snippet></ROW><ROW><id>11043818</id><snippet>python setup.py install build --compiler=mingw32</snippet></ROW><ROW><id>11043818</id><snippet>\Lib\distutils\distutils.cfg</snippet></ROW><ROW><id>11044141</id><snippet>org.gnome.notify</snippet></ROW><ROW><id>11044331</id><snippet>text.concordance(self, word, width=79, lines=25)</snippet></ROW><ROW><id>11044331</id><snippet>lines = min(lines, len(offsets))</snippet></ROW><ROW><id>11044331</id><snippet>sys.maxint</snippet></ROW><ROW><id>11044331</id><snippet>concord = text.concordance("cultural", 75, sys.maxint)
</snippet></ROW><ROW><id>11044331</id><snippet>text.concordance</snippet></ROW><ROW><id>11044331</id><snippet>stdout</snippet></ROW><ROW><id>11044331</id><snippet>print</snippet></ROW><ROW><id>11044331</id><snippet>import sys

....

# Open the file
fileconcord = open('ccord-cultural.txt', 'w')
# Save old stdout stream
tmpout = sys.stdout
# Redirect all "print" calls to that file
sys.stdout = fileconcord
# Init the method
text.concordance("cultural", 200, sys.maxint)
# Close file
fileconcord.close()
# Reset stdout in case you need something else to print
sys.stdout = tmpout
</snippet></ROW><ROW><id>11044410</id><snippet>conn = mdb.connect(user = 'root', passwd = '[REMOVED]', db = 'vancl')
cur = conn.cursor()

sql2 = "insert into vancl.vancl_query1(product_code) values('100000')"
print sql2

cur.execute(sql2)

//Commit the data
conn.commit() 

cur.close()
</snippet></ROW><ROW><id>11044761</id><snippet>options = Option.objects.all()</snippet></ROW><ROW><id>11044761</id><snippet>{% for option in options %}
    {{option}}
    {% for proof in option.proof_set.all %}
        {{proof}}
    {% endfor %}
{% endfor %}
</snippet></ROW><ROW><id>11044767</id><snippet>class MainPage(webapp2.RequestHandler):
    def get(self):
        template_values = {
            'name': 'SomeGuy',
            'verb': 'extremely enjoy'
        }

        template = jinja_environment.get_template('index.html')
        self.response.out.write(template.render(template_values))
</snippet></ROW><ROW><id>11044767</id><snippet>main.py</snippet></ROW><ROW><id>11044767</id><snippet>app = webapp2.WSGIApplication(routes=[ 
    ( r'/', MainPage ),
    # ... other paths ...
], debug=True) # True for now until ready for prod...
</snippet></ROW><ROW><id>11045340</id><snippet>cr.id</snippet></ROW><ROW><id>11045340</id><snippet>cr</snippet></ROW><ROW><id>11045340</id><snippet>crew</snippet></ROW><ROW><id>11045340</id><snippet>id</snippet></ROW><ROW><id>11045340</id><snippet>id</snippet></ROW><ROW><id>11045340</id><snippet>cr.id</snippet></ROW><ROW><id>11045757</id><snippet>self</snippet></ROW><ROW><id>11045882</id><snippet>re.sub</snippet></ROW><ROW><id>11045882</id><snippet>settings = {}
settings['name'] = 'carl'

key2 = "foo $global.name bar"

import re
print re.sub(r'\$(\w+)\.(\w+)', lambda m: settings[m.group(2)], key2)
</snippet></ROW><ROW><id>11045882</id><snippet> re.sub(r'\$(\w+)(\.(\w+))?', lambda m: globals()[m.group(1)][m.group(3) or 'default'], key2)
</snippet></ROW><ROW><id>11045882</id><snippet>globals()</snippet></ROW><ROW><id>11045882</id><snippet>locals()</snippet></ROW><ROW><id>11045882</id><snippet>import re

def some_func():
    settings = {'result_dir':'dir'} 
    args = {'run_id':'id'} 

    vars = locals() 

    print re.sub(r'\$(\w+)(\.(\w+))?', lambda m: vars[m.group(1)][m.group(3)], '$settings.result_dir + $args.run_id')

some_func()
</snippet></ROW><ROW><id>11045882</id><snippet>getattr(self)</snippet></ROW><ROW><id>11045882</id><snippet>class X(object):

    def __init__(self):
        self.settings = {'result_dir':'dir'} 
        self.args = {'run_id':'id'} 

    def some_method(self):
        print re.sub(r'\$(\w+)(\.(\w+))?', lambda m: getattr(self, m.group(1))[m.group(3)], '$settings.result_dir + $args.run_id')


X().some_method()
</snippet></ROW><ROW><id>11045945</id><snippet>%</snippet></ROW><ROW><id>11045945</id><snippet>%</snippet></ROW><ROW><id>11045945</id><snippet>%</snippet></ROW><ROW><id>11045945</id><snippet>i</snippet></ROW><ROW><id>11045945</id><snippet>%A</snippet></ROW><ROW><id>11045945</id><snippet>.format()</snippet></ROW><ROW><id>11045945</id><snippet>%</snippet></ROW><ROW><id>11045945</id><snippet>("http://www.example.com/sch/mobile-/67939/i.html?_catref=1?"
 "_trkparms=65%253A12%257C66%253A1%257C39%253A1%257C72%253A3276&amp;rt=nc"
 "&amp;_catref=1&amp;_dmpt=IN_Mobile_Phones&amp;_trksid=p3286.c0.m14.l1513&amp;_pgn={0}").format(i)
</snippet></ROW><ROW><id>11045945</id><snippet>%</snippet></ROW><ROW><id>11045945</id><snippet>("http://www.example.com/sch/mobile-/67939/i.html?_catref=1?"
 "_trkparms=65%253A12%257C66%253A1%257C39%253A1%257C72%253A3276&amp;rt=nc"
 "&amp;_catref=1&amp;_dmpt=IN_Mobile_Phones&amp;_trksid=p3286.c0.m14.l1513&amp;_pgn=") + str(i)
</snippet></ROW><ROW><id>11045980</id><snippet>def angles(x):
    return [ i * x / 5 - x for i in xrange(11)]
</snippet></ROW><ROW><id>11045980</id><snippet>angles(90)</snippet></ROW><ROW><id>11045980</id><snippet>[-90, -72, -54, -36, -18, 0, 18, 36, 54, 72, 90]</snippet></ROW><ROW><id>11045980</id><snippet>angles(45)</snippet></ROW><ROW><id>11045980</id><snippet>[-45, -36, -27, -18, -9, 0, 9, 18, 27, 36, 45]</snippet></ROW><ROW><id>11045980</id><snippet>angles</snippet></ROW><ROW><id>11045980</id><snippet>def angles(angle, steps):
    return [ i * angle * 2 / (steps - 1) - angle for i in xrange(steps)]
</snippet></ROW><ROW><id>11045980</id><snippet>angles(90, 5)</snippet></ROW><ROW><id>11045980</id><snippet>[-90, -45, 0, 45, 90]</snippet></ROW><ROW><id>11046867</id><snippet>zipfile</snippet></ROW><ROW><id>11046867</id><snippet>ZipFile.write</snippet></ROW><ROW><id>11046867</id><snippet>arcname</snippet></ROW><ROW><id>11046867</id><snippet>'/home/name/'</snippet></ROW><ROW><id>11046867</id><snippet>filename = os.path.join(dir, f)
z.write(filename, arcname=filename[11:])
</snippet></ROW><ROW><id>11047110</id><snippet>python-mode.el</snippet></ROW><ROW><id>11047110</id><snippet>python.elc</snippet></ROW><ROW><id>11047110</id><snippet>~/Downloads</snippet></ROW><ROW><id>11047110</id><snippet>pushd /Emacs/directory/with/other/.el/files</snippet></ROW><ROW><id>11047110</id><snippet>/Applications/Emacs.app/Contents/Resources/lisp/progmodes/</snippet></ROW><ROW><id>11047110</id><snippet>tar -xzf ~/Downloads/python-mode.el-6.0.8.tar.gz</snippet></ROW><ROW><id>11047110</id><snippet>popd</snippet></ROW><ROW><id>11047110</id><snippet>~/.emacs</snippet></ROW><ROW><id>11047110</id><snippet>(add-to-list 'load-path "/Emacs/directory/with/other/.el/files/python-mode.el-6.0.8")
(setq py-install-directory "/Emacs/directory/with/other/.el/files/python-mode.el-6.0.8")
(require 'python-mode)
</snippet></ROW><ROW><id>11047110</id><snippet>python-mode</snippet></ROW><ROW><id>11047165</id><snippet>from cStringIO import StringIO
import shutil

data = StringIO()
data.write('[ALL]\n')
with open(self._infilename, 'r') as f:
    shutil.copyfileobj(f, data)
data.seek(0)
config.readfp(data)
</snippet></ROW><ROW><id>11047530</id><snippet>import ast
result = ast.literal_eval(''.join(["{", s.replace(" ", ", "), "}"]))
</snippet></ROW><ROW><id>11047530</id><snippet>import ast
result = ast.literal_eval("{" + s.replace(" ", ", ") + "}")
</snippet></ROW><ROW><id>11047530</id><snippet>ast.literal_eval</snippet></ROW><ROW><id>11047530</id><snippet>eval()</snippet></ROW><ROW><id>11047780</id><snippet>$ module avail calibre &amp; module load calibre
</snippet></ROW><ROW><id>11047780</id><snippet>subprocess.call(['module','avail','calibre','&amp;','module','load','calibre'])
</snippet></ROW><ROW><id>11047780</id><snippet>subprocess.call('module avail calibre &amp; module load calibre',shell=True)
</snippet></ROW><ROW><id>11047860</id><snippet>from flask import Flask
app = Flask(__name__)
</snippet></ROW><ROW><id>11047860</id><snippet>from app import app
@app.route("/")
def hello():
    return "Hello World!"
</snippet></ROW><ROW><id>11047860</id><snippet>from app import app
if __name__ == "__main__":
    app.run()
</snippet></ROW><ROW><id>11047860</id><snippet>add_view</snippet></ROW><ROW><id>11047860</id><snippet>scan</snippet></ROW><ROW><id>11047878</id><snippet>import sys
sys.path.append('/parent/of/project')
</snippet></ROW><ROW><id>11048010</id><snippet>import random

abc = [chr(x) for x in range(97, 123)]
out = []

out.append(abc[0])
for item in abc[1:]:
    out += [''] * random.randrange(4, 8)
    out.append(item)
</snippet></ROW><ROW><id>11048021</id><snippet>label1On</snippet></ROW><ROW><id>11048021</id><snippet>label2On</snippet></ROW><ROW><id>11048021</id><snippet>draw()</snippet></ROW><ROW><id>11048021</id><snippet>for tick in fig.findobj(matplotlib.axis.Tick):
    tick.label1.set_visible(tick.label1On)
    tick.label2.set_visible(tick.label2On)

for text in fig.findobj(match=Text, include_self=False):
    s = text.get_text()
    if not s or not text.get_visible(): continue
    # do something with the texts
</snippet></ROW><ROW><id>11048274</id><snippet>int()</snippet></ROW><ROW><id>11048274</id><snippet>&gt;&gt;&gt; from Crypto.Cipher import AES
&gt;&gt;&gt; import base64
&gt;&gt;&gt; obj = AES.new('yoursecretkeyABC')
&gt;&gt;&gt; x = base64.encodestring(obj.encrypt("%016d"%1))
&gt;&gt;&gt; x
'tXDxMg1YGb1i0V29yCCBWg==\n'
</snippet></ROW><ROW><id>11048274</id><snippet>&gt;&gt;&gt; int(obj.decrypt(base64.decodestring(x)))
1
</snippet></ROW><ROW><id>11048274</id><snippet>&gt;&gt;&gt; key = [33, 53, 2, 42]
&gt;&gt;&gt; id = "%04d" % 1
&gt;&gt;&gt; x = ''.join([chr(a^ord(b)) for a, b in zip(key, id)])
&gt;&gt;&gt; x
'\x11\x052\x1b'
&gt;&gt;&gt; int(''.join([chr(a^ord(b)) for a, b in zip(key, x)]))
1
</snippet></ROW><ROW><id>11048314</id><snippet>os.environ</snippet></ROW><ROW><id>11048314</id><snippet>dict</snippet></ROW><ROW><id>11048314</id><snippet>os.environ</snippet></ROW><ROW><id>11048314</id><snippet>&gt;&gt;&gt; import os
&gt;&gt;&gt; len(os.environ)
36
&gt;&gt;&gt; 'USER' in os.environ
True
&gt;&gt;&gt; os.environ.fromkeys
&lt;bound method classobj.fromkeys of &lt;class os._Environ at 0x107096ce8&gt;&gt;
</snippet></ROW><ROW><id>11048314</id><snippet>.setdefault</snippet></ROW><ROW><id>11048617</id><snippet>ps</snippet></ROW><ROW><id>11048617</id><snippet>sh</snippet></ROW><ROW><id>11048617</id><snippet>shell=True</snippet></ROW><ROW><id>11048617</id><snippet>['/bin/sh', '-c', cmdstring]</snippet></ROW><ROW><id>11048617</id><snippet>python script.py
    /bin/sh -c "ps -ef|grep python|grep test|awk '{print $2}'"
        ps -ef
        grep python
        grep test
        awk '{print $2}'
</snippet></ROW><ROW><id>11049106</id><snippet>import subprocess as sub

def execv(command, path):
    command = 'cd %s &amp;&amp; %s &amp;&amp; pwd 1&gt;&amp;2' % (path, command)
    proc = sub.Popen(['/bin/bash', '-c', command],
                     stdout=sub.PIPE, stderr=sub.PIPE)
    stderr = proc.stderr.read()[:-1]
    stdout = proc.stdout.read()[:-1]
    if stdout == '' and not os.path.exists(stderr):
        raise Exception(stderr)
    return {
        "cwd": stderr,
        "stdout": stdout
    }
</snippet></ROW><ROW><id>11049106</id><snippet>def execv(command, path):
    command = 'cd %s &amp;&amp; %s 2&gt;&amp;1;pwd' % (path, command)
    proc = sub.Popen(['/bin/bash', '-c', command],
                     env={'TERM':'linux'},
                     stdout=sub.PIPE)
    stdout = proc.stdout.read()
    if len(stdout) &gt; 1 and stdout[-1] == '\n':
        stdout = stdout[:-1]
    lines = stdout.split('\n')
    cwd = lines[-1]
    stdout = '\n'.join(lines[:-1])
    return {
        "cwd": cwd,
        "stdout": man_to_ansi(stdout)
    }
</snippet></ROW><ROW><id>11049233</id><snippet>import requests
import os
url = 'http://someplace'
folder = 'path/to/folder/'
for card in os.listdir(folder):
    data = {'identifier': '.'.join(card.split('.')[:-1]), 'type': 'Inventory Card'}
    files = {'card': open(os.path.join(folder, card), 'rb')}
    requests.post(url, data=data, files=files, auth=('username', 'pass'))
</snippet></ROW><ROW><id>11049233</id><snippet>'.'.join(card.split('.')[:-1])</snippet></ROW><ROW><id>11049233</id><snippet>card</snippet></ROW><ROW><id>11049233</id><snippet>[:-1]</snippet></ROW><ROW><id>11049233</id><snippet>foo.20120613.txt</snippet></ROW><ROW><id>11049233</id><snippet>~/tmp</snippet></ROW><ROW><id>11049233</id><snippet>[mpenning@Bucksnort tmp]$ ls
howto  regex_trial.xml  soln.py
[mpenning@Bucksnort tmp]$
[mpenning@Bucksnort tmp]$ python
Python 2.6.6 (r266:84292, Dec 27 2010, 00:02:40)
[GCC 4.4.5] on linux2
Type "help", "copyright", "credits" or "license" for more information.
&gt;&gt;&gt; import os
&gt;&gt;&gt; for card in os.listdir('./'):
...     print "card:", card
...     print " base_name:", '.'.join(card.split('.')[:-1])
...
card: howto
 base_name:
card: regex_trial.xml
 base_name: regex_trial
card: soln.py
 base_name: soln
&gt;&gt;&gt;
</snippet></ROW><ROW><id>11049233</id><snippet>howto</snippet></ROW><ROW><id>11049545</id><snippet>after</snippet></ROW><ROW><id>11049545</id><snippet>after</snippet></ROW><ROW><id>11049650</id><snippet>grid</snippet></ROW><ROW><id>11049650</id><snippet>import Tkinter as tk

class ExampleApp(tk.Tk):
    def __init__(self):
        tk.Tk.__init__(self)
        t = SimpleTable(self, 10,2)
        t.pack(side="top", fill="x")
        t.set(0,0,"Hello, world")

class SimpleTable(tk.Frame):
    def __init__(self, parent, rows=10, columns=2):
        # use black background so it "peeks through" to 
        # form grid lines
        tk.Frame.__init__(self, parent, background="black")
        self._widgets = []
        for row in range(rows):
            current_row = []
            for column in range(columns):
                label = tk.Label(self, text="%s/%s" % (row, column), 
                                 borderwidth=0, width=10)
                label.grid(row=row, column=column, sticky="nsew", padx=1, pady=1)
                current_row.append(label)
            self._widgets.append(current_row)

        for column in range(columns):
            self.grid_columnconfigure(column, weight=1)


    def set(self, row, column, value):
        widget = self._widgets[row][column]
        widget.configure(text=value)

if __name__ == "__main__":
    app = ExampleApp()
    app.mainloop()
</snippet></ROW><ROW><id>11049901</id><snippet>restful_lib</snippet></ROW><ROW><id>11049901</id><snippet>requests</snippet></ROW><ROW><id>11049901</id><snippet>requests.post(url, data=my_xml_string)
</snippet></ROW><ROW><id>11050183</id><snippet>value_to_string</snippet></ROW><ROW><id>11050183</id><snippet>relativedelta</snippet></ROW><ROW><id>11050183</id><snippet>RelativeDeltaField</snippet></ROW><ROW><id>11050183</id><snippet>models.CharField</snippet></ROW><ROW><id>11050183</id><snippet>get_prep_value()</snippet></ROW><ROW><id>11050183</id><snippet>def get_prep_value(self, value):
    return self.to_python(value)
</snippet></ROW><ROW><id>11050183</id><snippet>CharField</snippet></ROW><ROW><id>11050183</id><snippet>to_python()</snippet></ROW><ROW><id>11050183</id><snippet>relativedelta</snippet></ROW><ROW><id>11050226</id><snippet>property()</snippet></ROW><ROW><id>11050226</id><snippet>class A:
    def __init__():
     self.a.b.c = 10

    @property
    def aliased(self):
        return self.a.b.c

    @aliased.setter
    def aliased(self, value):
         self.a.b.c = value

    def anotherMethod():
      self.aliased *= 10 # Updates value of self.a.b.c
</snippet></ROW><ROW><id>11050417</id><snippet>configure</snippet></ROW><ROW><id>11050417</id><snippet>autoreconf -vi
./configure --prefix=/usr/local #or --prefix=/usr
make
sudo make install
</snippet></ROW><ROW><id>11050550</id><snippet>errors</snippet></ROW><ROW><id>11050550</id><snippet>str.encode</snippet></ROW><ROW><id>11050550</id><snippet>?</snippet></ROW><ROW><id>11050550</id><snippet>errors='replace'</snippet></ROW><ROW><id>11050550</id><snippet>&gt;&gt;&gt; s = u'\u2019'
&gt;&gt;&gt; print s
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
  File "C:\Python27\lib\encodings\cp850.py", line 12, in encode
    return codecs.charmap_encode(input,errors,encoding_map)
UnicodeEncodeError: 'charmap' codec can\'t encode character u'\u2019' in position
 0: character maps to &lt;undefined&gt;
&gt;&gt;&gt; print s.encode('cp850', errors='replace')
?
</snippet></ROW><ROW><id>11050550</id><snippet>StreamHandler</snippet></ROW><ROW><id>11050550</id><snippet>class CustomStreamHandler(logging.StreamHandler):

    def emit(self, record):
        record = record.encode('cp850', errors='replace')
        logging.StreamHandler.emit(self, record)
</snippet></ROW><ROW><id>11050571</id><snippet>type</snippet></ROW><ROW><id>11050571</id><snippet>cls = object.__class__
object.__class__ = cls.__class__(cls.__name__ + "WithExtraBase", (cls, ExtraBase), {})
</snippet></ROW><ROW><id>11050657</id><snippet>StringIO</snippet></ROW><ROW><id>11050657</id><snippet>BytesIO</snippet></ROW><ROW><id>11050657</id><snippet>from cStringIO import StringIO
# or, in Py3/Py2.6+:
#from io import BytesIO, StringIO

s = StringIO(large_string)
while True:
    chunk = s.read(200)
    if len(chunk) &gt; 0:
        process(chunk)
    if len(chunk) &lt; 200:
        break
</snippet></ROW><ROW><id>11050761</id><snippet>ended=datetime.datetime.now()</snippet></ROW><ROW><id>11050761</id><snippet>def print_results(ended=None):
    if ended is None:
        ended = datetime.datetime.now()
    ...
</snippet></ROW><ROW><id>11051084</id><snippet>cx_Oracle.Date(2012, 5, 25)</snippet></ROW><ROW><id>11051084</id><snippet>cur.callfunc('tablename_type', ReturnType, ['MESSAGE', 'VALID_MESSAGE'])</snippet></ROW><ROW><id>11051157</id><snippet>__init__</snippet></ROW><ROW><id>11051157</id><snippet>class HomePageTest(unittest.TestCase):
    def __init__(self):
        self.driver = webdriver.Firefox()
        self.driver.implicitly_wait(30)
        self.base_url = "https://somewebsite.com"
        self.verificationErrors = []

    ...

    def tearDown(self):
        self.driver.quit()
</snippet></ROW><ROW><id>11051319</id><snippet>get_by_id(id, parent=None)</snippet></ROW><ROW><id>11051419</id><snippet>print hello</snippet></ROW><ROW><id>11051419</id><snippet>hello world</snippet></ROW><ROW><id>11051419</id><snippet>import webapp
from google.appengine.ext.webapp.util import run_wsgi_app

class MainPage(webapp.RequestHandler):
    def get(self):
        self.response.out.write('Hello, World')

app = webapp2.WSGIApplication([('/', MainPage)])

def main():
    application = webapp.WSGIApplication([("/", MainPage)], debug=True)
    run_wsgi_app(application)

if __name__ == "__main__":
    main()
</snippet></ROW><ROW><id>11051448</id><snippet>timedelta(hours=10)</snippet></ROW><ROW><id>11051448</id><snippet>timedelta(minutes=600)</snippet></ROW><ROW><id>11051499</id><snippet>metric</snippet></ROW><ROW><id>11051499</id><snippet>class metric(object):
    pass
</snippet></ROW><ROW><id>11051499</id><snippet>metric()</snippet></ROW><ROW><id>11051499</id><snippet>metric</snippet></ROW><ROW><id>11051499</id><snippet>__add__</snippet></ROW><ROW><id>11051499</id><snippet>metric = someclass
</snippet></ROW><ROW><id>11051499</id><snippet>metric = someclass()
</snippet></ROW><ROW><id>11051499</id><snippet>metric</snippet></ROW><ROW><id>11051499</id><snippet>for a in range (0, len(hitTableWord)):
</snippet></ROW><ROW><id>11051499</id><snippet>hitTableWord</snippet></ROW><ROW><id>11051499</id><snippet>hitTableNear</snippet></ROW><ROW><id>11051499</id><snippet>for word, near in zip(hitTableWord, hitTableNear):
</snippet></ROW><ROW><id>11051611</id><snippet>print " "+ "\033[01;41m" + " " +"\033[01;46m" + " " + "\033[01;42m"
</snippet></ROW><ROW><id>11051669</id><snippet>some_dict.keys() &amp; another_dict.keys()
</snippet></ROW><ROW><id>11051669</id><snippet>dict.viewkeys()</snippet></ROW><ROW><id>11051669</id><snippet>[key for key in some_dict if key in another_dict]
</snippet></ROW><ROW><id>11051669</id><snippet>dict.__contains__()</snippet></ROW><ROW><id>11051669</id><snippet>in</snippet></ROW><ROW><id>11051669</id><snippet>filter(another_dict.__contains__, some_dict.keys())
</snippet></ROW><ROW><id>11051669</id><snippet>some_dict</snippet></ROW><ROW><id>11051669</id><snippet>another_dict</snippet></ROW><ROW><id>11051718</id><snippet>#                1  2                                                 2                   
link = re.findall(r ("""onclick="window.location.href='([^'])'""",line)
</snippet></ROW><ROW><id>11052592</id><snippet>colHeaders = ["name", "attribute #1", "attribute #2", "counter"]
myTextWidgets = []
for index in range(10):
    subList = []
    for i, header in enumerate(colHeaders):
        text = Text(root,width=20, height=1, bg='white')
        text.grid(row=index,column=i)
        text.insert('0.0',header)
        subList.append(text)
    myTextWidgets.append(subList)
</snippet></ROW><ROW><id>11052592</id><snippet>myTextWidgets[0][1].config(bg="purple")
</snippet></ROW><ROW><id>11052592</id><snippet>subList = []
for i, header in enumerate(colHeaders):
    text = Text(root,width=20, height=1, bg='white')
    text.grid(row=len(myTextWidgets),column=i)
    text.insert('0.0', header)
    subList.append(text)
myTextWidgets.append(subList)
</snippet></ROW><ROW><id>11052631</id><snippet>httplib</snippet></ROW><ROW><id>11052631</id><snippet>urllib2</snippet></ROW><ROW><id>11052631</id><snippet>requests</snippet></ROW><ROW><id>11052991</id><snippet>Tkinter</snippet></ROW><ROW><id>11052991</id><snippet>Tcl/Tk</snippet></ROW><ROW><id>11053002</id><snippet>def makeLRGrid(g):
    return [row[:] for row in g]
</snippet></ROW><ROW><id>11053002</id><snippet>[:]</snippet></ROW><ROW><id>11053002</id><snippet>zip()</snippet></ROW><ROW><id>11053002</id><snippet>def transpose(g):
    return zip(*g)
</snippet></ROW><ROW><id>11053002</id><snippet>def transpose(g):
    return map(list, zip(*g))
</snippet></ROW><ROW><id>11053002</id><snippet>zip()</snippet></ROW><ROW><id>11053313</id><snippet>\\Root\\Project</snippet></ROW><ROW><id>11053313</id><snippet>from Project.gui</snippet></ROW><ROW><id>11053313</id><snippet>Project.py</snippet></ROW><ROW><id>11053313</id><snippet>sys.path.insert(0,"****\\Root")</snippet></ROW><ROW><id>11053313</id><snippet>****\\Root\\Project</snippet></ROW><ROW><id>11053313</id><snippet>from Project import Project
</snippet></ROW><ROW><id>11053313</id><snippet>from Project.gui import gui
</snippet></ROW><ROW><id>11053466</id><snippet>MY_TAGS = ["tag1", "tag2"]

MLStripper(HTMLParser):
    def __init__(self):
        self.reset()
        self.fed = []
    def handle_data(self, d):
        self.fed.append(d)
    def get_data(self):
        return ''.join(self.fed)

    def handle_starttag(self, tag, attrs):
        if tag in MY_TAGS:
            self.fed.append("&lt;%s&gt;" % tag) # tag is only string, no &lt; or &gt;.
    def handle_endtag(self, tag):
        if tag in MY_TAGS:
            self.fed.append("&lt;/%s&gt;" % tag)
</snippet></ROW><ROW><id>11053642</id><snippet>name="la"</snippet></ROW><ROW><id>11053642</id><snippet>import urllib2
import json

#The URL where we get our array of LA data
GET_LAS = 'http://www.education.gov.uk/cgi-bin/schools/performance/getareas.pl?level=la&amp;code=0'

#The URL which we interpolate the LA ID into to get individual pages
GET_URL = 'http://www.education.gov.uk/schools/performance/geo/la%s_all.html'

def get_performance(la):
    page = urllib2.urlopen(GET_URL % la)
    #print(page.read())

#get the local authority list
las = json.loads(urllib2.urlopen(GET_LAS).read())

for la in las:
    if la != 0:
        print('Processing LA ID #%s (%s)' % (la[0], la[1]))
        get_performance(la[0])
</snippet></ROW><ROW><id>11053813</id><snippet>import string

first_digits = sorted(string.ascii_letters + '_')
rest_digits = sorted(string.digits + string.ascii_letters + '_')

def convert(number):
    if number &lt; len(first_digits):
        return first_digits[number]

    current_base = len(rest_digits)
    remain = number - len(first_digits)
    return convert(remain / current_base) + rest_digits[remain % current_base]
</snippet></ROW><ROW><id>11053813</id><snippet>print convert(0)
print convert(26)
print convert(52)
print convert(53)
print convert(1692)
print convert(23893)
</snippet></ROW><ROW><id>11053813</id><snippet>A
_
z
A0
_1
FAQ
</snippet></ROW><ROW><id>11053919</id><snippet>class ToAdd(object):
    @property
    def foo(self):
        return 'foo!'

class Base(object):
    pass

b = Base()

NewBase = type('NewBase', (Base, ToAdd), {})
b.__class__ = NewBase
print(b.foo)
# foo!
</snippet></ROW><ROW><id>11054061</id><snippet>import dir_a</snippet></ROW><ROW><id>11054061</id><snippet>dir_a</snippet></ROW><ROW><id>11054061</id><snippet>dir_a</snippet></ROW><ROW><id>11054061</id><snippet>.py</snippet></ROW><ROW><id>11054061</id><snippet>dir_a.__all__</snippet></ROW><ROW><id>11054061</id><snippet>from foo import *</snippet></ROW><ROW><id>11054061</id><snippet>foo.__all__</snippet></ROW><ROW><id>11054061</id><snippet>from dir_a import *
bar = 5
</snippet></ROW><ROW><id>11054061</id><snippet>bar.py</snippet></ROW><ROW><id>11054061</id><snippet>dir_a</snippet></ROW><ROW><id>11054226</id><snippet>os.path</snippet></ROW><ROW><id>11054226</id><snippet>ntpath</snippet></ROW><ROW><id>11054226</id><snippet>posixpath</snippet></ROW><ROW><id>11054490</id><snippet>for (auto num : {1,4,5})
{
    // loop body
}
</snippet></ROW><ROW><id>11054490</id><snippet>{1,4,5}</snippet></ROW><ROW><id>11054490</id><snippet>std::initializer_list&lt;int&gt;</snippet></ROW><ROW><id>11054588</id><snippet>sort</snippet></ROW><ROW><id>11054593</id><snippet>&lt; self.sock = ssl.wrap_socket(sock, self.key_file, self.cert_file)
---
&gt; self.sock = ssl.wrap_socket(sock, self.key_file, self.cert_file, ssl_version=ssl.PROTOCOL_TLSv1)
</snippet></ROW><ROW><id>11054699</id><snippet>\n</snippet></ROW><ROW><id>11055206</id><snippet>with</snippet></ROW><ROW><id>11055206</id><snippet>.write()</snippet></ROW><ROW><id>11055206</id><snippet>l</snippet></ROW><ROW><id>11055206</id><snippet>str()</snippet></ROW><ROW><id>11055206</id><snippet>with open('output', 'w') as f:
    f.write(l[1] + "\t" + l[2] + "\t" + l[3] + "\t" + l[4] + "\t" + l[5] + "\n")
</snippet></ROW><ROW><id>11055206</id><snippet>.join()</snippet></ROW><ROW><id>11055206</id><snippet>with open('output', 'w') as f:
    f.write('\t'.join(l[1:]) + '\n')
</snippet></ROW><ROW><id>11055257</id><snippet>(\w+-*[.|\w]*)*
</snippet></ROW><ROW><id>11055575</id><snippet>import csv

with open("IDList.csv","rb") as inf:
    incsv = csv.reader(inf)
    not_wanted = set(row[0] for row in incsv)

with open("Database.csv","rb") as inf, open("FilteredDatabase.csv","wb") as outf:
    incsv = csv.reader(inf)
    outcsv = csv.writer(outf)
    outcsv.writerows(row for row in incsv if row[0] not in not_wanted)
</snippet></ROW><ROW><id>11055814</id><snippet>python setup.py bdist-egg</snippet></ROW><ROW><id>11055816</id><snippet>find_package(PythonLibs REQUIRED)
include_directories(${PYTHON_INCLUDE_DIRS})
target_link_libraries(&lt;your exe or lib&gt; ${PYTHON_LIBRARIES})
</snippet></ROW><ROW><id>11055816</id><snippet>cmake --help-module FindPythonLibs
cmake --help-command find_package
cmake --help-command include_directories
cmake --help-command target_link_libraries
</snippet></ROW><ROW><id>11055944</id><snippet>if</snippet></ROW><ROW><id>11055944</id><snippet>if '0' or '4' or '6' or '8' in str(i):
</snippet></ROW><ROW><id>11055944</id><snippet>0</snippet></ROW><ROW><id>11055944</id><snippet>True</snippet></ROW><ROW><id>11055944</id><snippet>0</snippet></ROW><ROW><id>11055944</id><snippet>4</snippet></ROW><ROW><id>11055944</id><snippet>0</snippet></ROW><ROW><id>11055944</id><snippet>True</snippet></ROW><ROW><id>11055944</id><snippet>8</snippet></ROW><ROW><id>11055944</id><snippet>True</snippet></ROW><ROW><id>11055944</id><snippet>if any(x in i for x in '0468'):
</snippet></ROW><ROW><id>11055944</id><snippet>str(i)</snippet></ROW><ROW><id>11055944</id><snippet>0</snippet></ROW><ROW><id>11055944</id><snippet>if</snippet></ROW><ROW><id>11055944</id><snippet>1</snippet></ROW><ROW><id>11055944</id><snippet>0</snippet></ROW><ROW><id>11055944</id><snippet>for</snippet></ROW><ROW><id>11055944</id><snippet>2</snippet></ROW><ROW><id>11055944</id><snippet>0</snippet></ROW><ROW><id>11055944</id><snippet>1</snippet></ROW><ROW><id>11055944</id><snippet>for i in test[:]:
</snippet></ROW><ROW><id>11056172</id><snippet>names = ['john smith', 'sally jones', 'bob jones']
d = {name: [] for name in names}
</snippet></ROW><ROW><id>11056172</id><snippet>dict.fromkeys(names, [])</snippet></ROW><ROW><id>11056253</id><snippet>p</snippet></ROW><ROW><id>11056253</id><snippet>def zipit (request):
  file_paths = ['/home/username/main/books/', '/home/username/main/index.html']
  buffer= StringIO.StringIO()
  z= zipfile.ZipFile( buffer, "w" )
  for p in file_paths:
    if os.path.isdir(p):
      for dir, subdirs, files in os.walk(p):
        for f in files:
          filename = os.path.join(dir, f)
          z.write(filename, arcname = filename[15:])
     else:
          z.write(p, arcname = p)
  z.close()
  buffer.seek(0)
  final = HttpResponse(buffer.read())
  final['Content-Disposition'] = 'attachment; filename=dbs_custom_library.zip'
  final['Content-Type'] = 'application/x-zip'
  return final
</snippet></ROW><ROW><id>11056316</id><snippet>'\n'</snippet></ROW><ROW><id>11056316</id><snippet>i</snippet></ROW><ROW><id>11056316</id><snippet>"#"</snippet></ROW><ROW><id>11056316</id><snippet>1</snippet></ROW><ROW><id>11056316</id><snippet>0</snippet></ROW><ROW><id>11056378</id><snippet>multiprocessing.Pool</snippet></ROW><ROW><id>11056378</id><snippet>_taskqueue</snippet></ROW><ROW><id>11056378</id><snippet>multiprocessing.Queue</snippet></ROW><ROW><id>11056378</id><snippet>maxsize</snippet></ROW><ROW><id>11056378</id><snippet>maxsize</snippet></ROW><ROW><id>11056378</id><snippet>multiprocessing.Pool</snippet></ROW><ROW><id>11056378</id><snippet>multiprocessing.Pool.__init__</snippet></ROW><ROW><id>11056378</id><snippet>maxsize</snippet></ROW><ROW><id>11056378</id><snippet>_taskqueue</snippet></ROW><ROW><id>11056378</id><snippet>pool._taskqueue._maxsize</snippet></ROW><ROW><id>11056378</id><snippet>pool._taskqueue._sem</snippet></ROW><ROW><id>11056378</id><snippet>pool._taskqueue._maxsize = maxsize
pool._taskqueue._sem = BoundedSemaphore(maxsize)
</snippet></ROW><ROW><id>11056499</id><snippet>$ cat sort.py
order = ['Director', 'Screenwriter', 'Producer']
items = [
    ('john jones', ['Director', 'Screenwriter', 'Producer']), 
    ('eric smith', ['Screenwriter']), 
    ('anne smith', ['Producer']), 
    ('emily smith', ['Director']), 
    ('steven jones', ['Director', 'Screenwriter'])
]

for i in sorted(items, key = lambda x: order.index(x[1][0])):
    print i
</snippet></ROW><ROW><id>11056499</id><snippet>$ python sort.py
('john jones', ['Director', 'Screenwriter', 'Producer'])
('emily smith', ['Director'])
('steven jones', ['Director', 'Screenwriter'])
('eric smith', ['Screenwriter'])
('anne smith', ['Producer'])
</snippet></ROW><ROW><id>11056499</id><snippet>for i in sorted(items, key = lambda x: (order.index(x[1][0]), x[0])):
    print i
</snippet></ROW><ROW><id>11056852</id><snippet>struct</snippet></ROW><ROW><id>11056852</id><snippet>&gt;&gt;&gt; val = (255 &lt;&lt; 8) + 13
&gt;&gt;&gt; struct.unpack('bb', struct.pack('H', val))
(13, -1)
</snippet></ROW><ROW><id>11056859</id><snippet>def a():
    a.test = 123

a()
a.test # =&gt; 123
</snippet></ROW><ROW><id>11056982</id><snippet>ignore_exceptions</snippet></ROW><ROW><id>11056982</id><snippet>ignores_exceptions</snippet></ROW><ROW><id>11056995</id><snippet>In [1]: import networkx as nx

In [2]: G=nx.path_graph(4)

In [3]: s='\n'.join(nx.generate_graphml(G))

In [4]: print s
&lt;graphml xmlns="http://graphml.graphdrawing.org/xmlns" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://graphml.graphdrawing.org/xmlns http://graphml.graphdrawing.org/xmlns/1.0/graphml.xsd"&gt;
  &lt;key attr.name="name" attr.type="string" for="graph" id="d0" /&gt;
  &lt;graph edgedefault="undirected"&gt;
    &lt;data key="d0"&gt;path_graph(4)&lt;/data&gt;
    &lt;node id="0" /&gt;
    &lt;node id="1" /&gt;
    &lt;node id="2" /&gt;
    &lt;node id="3" /&gt;
    &lt;edge source="0" target="1" /&gt;
    &lt;edge source="1" target="2" /&gt;
    &lt;edge source="2" target="3" /&gt;
  &lt;/graph&gt;
&lt;/graphml&gt;
</snippet></ROW><ROW><id>11057115</id><snippet>for</snippet></ROW><ROW><id>11057115</id><snippet>if</snippet></ROW><ROW><id>11057115</id><snippet>for key in mydict.keys():
    if item in mydict[key]:
        print key
</snippet></ROW><ROW><id>11057115</id><snippet>for</snippet></ROW><ROW><id>11057115</id><snippet>foundItem = (key for key, vals in mydict.items() if item in vals)
</snippet></ROW><ROW><id>11057115</id><snippet>item</snippet></ROW><ROW><id>11057191</id><snippet>self.__observers[event]</snippet></ROW><ROW><id>11057191</id><snippet>assert self.__observers[event] == []
observer_ref = self.__observers[event]
observer_ref.append(1)                    # this modifies self.__observers[event]
assert self.__observers[event] == [1]
</snippet></ROW><ROW><id>11057191</id><snippet>observer_ref</snippet></ROW><ROW><id>11057191</id><snippet>self.__observers[event]</snippet></ROW><ROW><id>11057467</id><snippet>i</snippet></ROW><ROW><id>11057467</id><snippet>def doReplace(toReplace):
    chapterReplacer.i = 1
    def chapterReplacer(_):
        result = 'Chapter %i' % chapterReplacer.i
        chapterReplacer.i += 1
        return result

    return re.sub('Chapter [a-zA-Z]+', chapterReplacer, test)
</snippet></ROW><ROW><id>11057467</id><snippet>nonlocal</snippet></ROW><ROW><id>11057614</id><snippet>urllib.quote()</snippet></ROW><ROW><id>11057614</id><snippet>%xx</snippet></ROW><ROW><id>11057614</id><snippet>urllib.unquote()</snippet></ROW><ROW><id>11057830</id><snippet>re.sub(r'BLOCK(?=[^&gt;]*(&lt;|$))', '*', line)
</snippet></ROW><ROW><id>11057830</id><snippet>&gt;</snippet></ROW><ROW><id>11057830</id><snippet>&lt;</snippet></ROW><ROW><id>11057830</id><snippet>BLOCK</snippet></ROW><ROW><id>11057830</id><snippet>'*'</snippet></ROW><ROW><id>11057830</id><snippet>BLOCK(?=([^&lt;&gt;]*(&lt;(&lt;[^&gt;]*&gt;|[^&lt;&gt;])*&gt;)?)*$)
</snippet></ROW><ROW><id>11057830</id><snippet>&gt;&gt;&gt; p = re.compile(r'BLOCK(?=([^&lt;&gt;]*(&lt;(&lt;[^&gt;]*&gt;|[^&lt;&gt;])*&gt;)?)*$)')
&gt;&gt;&gt; p.sub('*', 'BLOCK&lt;BLOCK&lt;BLOCK&gt;&gt;BLOCK&lt;BLOCK&gt;BLOCKzzzBLOCKBLOCK')
'*&lt;BLOCK&lt;BLOCK&gt;&gt;*&lt;BLOCK&gt;*zzz**'
</snippet></ROW><ROW><id>11057911</id><snippet>var key="title"
var item=data["fields"]
alert(item[key])
</snippet></ROW><ROW><id>11057942</id><snippet>start()</snippet></ROW><ROW><id>11057942</id><snippet>send()</snippet></ROW><ROW><id>11057942</id><snippet>import multiprocessing
import time

def simple_example(wait, timeout, query):
    conn1, conn2 = multiprocessing.Pipe(False)
    subproc = multiprocessing.Process(target=do_query, args=(wait, query, conn2))
    subproc.start()
    subproc.join(timeout)
    if conn1.poll():
        return conn1.recv()
    subproc.terminate()
    raise Exception('Query %r ran for &gt;%r' % (query, timeout))

def do_query(wait, query, conn):
    print query
    time.sleep(wait)
    conn.send(query)

res = simple_example(0, 2, 'foo')
res = simple_example(3, 2, 'foo')
</snippet></ROW><ROW><id>11058091</id><snippet>&gt;&gt;&gt; [(x[0:2] + (sum(z[2] for z in y),) + x[2:5]) for (x, y) in
      itertools.groupby(sorted(L, key=operator.itemgetter(0, 1, 3, 4)),
      key=operator.itemgetter(0, 1, 3, 4))]
[
  ('A', '', Decimal('21.0000000000'), 1330, datetime.datetime(2012, 5, 14, 0, 0)),
  ('A', '', Decimal('4.0000000000'), 1330, datetime.datetime(2012, 6, 8, 0, 0)),
  ('AA', 'C', Decimal('31.0000000000'), 1330, datetime.datetime(2012, 5, 31, 0, 0)),
  ('B', '', Decimal('7.0000000000'), 1330, datetime.datetime(2012, 5, 24, 0, 0)),
  ('B', '', Decimal('31.0000000000'), 1330, datetime.datetime(2012, 6, 4, 0, 0))
]
</snippet></ROW><ROW><id>11058149</id><snippet>i = 0
while True:
    # your usual select here, but with "and MyIndexColumn = %d' % (i,)
</snippet></ROW><ROW><id>11058210</id><snippet>for</snippet></ROW><ROW><id>11058210</id><snippet>account = splitting[0]
domain = splitting[1]
</snippet></ROW><ROW><id>11058210</id><snippet>for c in account:
    if c not in "abcdefghijklmopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789_.":
        print "Invalid char", c, "in e-mail"

for c in domain:
    if c not in "abcdefghijklmopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789_.":
        print "Invalid char", c, "in e-mail"
</snippet></ROW><ROW><id>11058210</id><snippet>string.ascii_letters</snippet></ROW><ROW><id>11058210</id><snippet>+</snippet></ROW><ROW><id>11058210</id><snippet>string.digits</snippet></ROW><ROW><id>11058210</id><snippet>+"._"</snippet></ROW><ROW><id>11058210</id><snippet>"abcdefghijklmopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789_."</snippet></ROW><ROW><id>11058379</id><snippet>import paramiko

host = ['cpu1','cpu2','cpu3']

ssh = paramiko.SSHClient()
ssh.set_missing_host_key_policy(paramiko.AutoAddPolicy())

for i in host:
    str(i)
    try:
        ssh.connect(i, username='user', password='pass')
        stdin, stdout, stderr = ssh.exec_command('w')
        print stdout.readlines()
        ssh.close()
    except Exception as ex:
        print "Excetion: %s" % str(ex)
</snippet></ROW><ROW><id>11058379</id><snippet>pass</snippet></ROW><ROW><id>11058391</id><snippet>def base36encode(number, alphabet='0123456789abcdefghijklmnopqrstuvwxyz'):
    """Converts an integer to a base36 string."""
    if not isinstance(number, (int, long)):
        raise TypeError('number must be an integer')

    base36 = '' if number != 0 else '0'
    sign = ''
    if number &lt; 0:
        sign = '-'
        number = -number

    while number != 0:
        number, i = divmod(number, len(alphabet))
        base36 = alphabet[i] + base36

    return sign + base36

def base36decode(number):
    return int(number, 36)

&gt;&gt;&gt; print base36encode(1412823931503067241)
aqf8aa0006eh
&gt;&gt;&gt; print base36decode('aqf8aa0006eh')
1412823931503067241
</snippet></ROW><ROW><id>11058484</id><snippet>import sqlite3

conn = sqlite3.connect('example.db')

c = conn.cursor()

# Create table
c.execute('''CREATE TABLE stocks
             (date text, trans text, symbol text, qty real, price real)''')

# Insert a row of data
c.execute("INSERT INTO stocks VALUES ('2006-01-05','BUY','RHAT',100,35.14)")

# Save (commit) the changes
conn.commit()

# We can also close the cursor if we are done with it
c.close() 
</snippet></ROW><ROW><id>11058530</id><snippet>s += 'Orig'</snippet></ROW><ROW><id>11058530</id><snippet>s = s + Orig</snippet></ROW><ROW><id>11058554</id><snippet>os.listdir</snippet></ROW><ROW><id>11058554</id><snippet>os.listdir("test") #-&gt; returns ["a", "b", "c"]
</snippet></ROW><ROW><id>11058554</id><snippet>from os import path, listdir
def getpaths(dirname):
    return [path.join(dirname, fname) for fname in listdir(dirname)]
getpaths("test") #-&gt; returns ["test/a", "test/b", "test/c"]
</snippet></ROW><ROW><id>11058554</id><snippet>import sys, os
dir = sys.argv[1]
files = [open(os.path.join(dir, f)) for f in os.listdir(dir)]
first2lines = ['\n'.join(f.read().split("\n")[:2]) for f in files]
print '\n'.join(first2lines)
</snippet></ROW><ROW><id>11058563</id><snippet>Popen('vgremove -f &lt;vgname&gt;')
</snippet></ROW><ROW><id>11058563</id><snippet>p = Popen(cmd.split(), stdout=PIPE, stderr=PIPE, stdin=PIPE)
p.stdin.write('yes')
</snippet></ROW><ROW><id>11058880</id><snippet>class SomeClass(object):
    @classmethod
    def func1(cls, arg1):
        print("Called func1({})".format(arg1))

    @classmethod
    def func2(cls, arg1):
        print("Call func2({})".format(arg1))

    @classmethod
    def func3(cls, arg1):
        for fnName,do in funcList.iteritems():
            if do:
                try:
                    cls.func_map[fnName](arg1)
                except KeyError:
                    print("Don't know function '{}'".format(fnName))

# can't create function map until class has been created
SomeClass.func_map = {
    'func1': SomeClass.func1,
    'func2': SomeClass.func2
}

if __name__=='__main__':
    funcList = {'func1':True, 'func2':False}
    SomeClass.func3('Argumentus-Primus')
</snippet></ROW><ROW><id>11058964</id><snippet>BlogPostResource</snippet></ROW><ROW><id>11058964</id><snippet>class BlogPostResource(ModelResource):

    comments = fields.ToManyField("resources.CommentResource",
        attribute=lambda bundle: bundle.obj.comments.all().order_by("published"))
</snippet></ROW><ROW><id>11059050</id><snippet>easy_install</snippet></ROW><ROW><id>11059241</id><snippet>.</snippet></ROW><ROW><id>11059241</id><snippet>[^&lt;&gt;]</snippet></ROW><ROW><id>11059241</id><snippet>&lt;&gt;</snippet></ROW><ROW><id>11059241</id><snippet>f[^&lt;&gt;]*k</snippet></ROW><ROW><id>11059241</id><snippet>facebook</snippet></ROW><ROW><id>11059241</id><snippet>face&lt;b&gt;book</snippet></ROW><ROW><id>11059254</id><snippet>bind</snippet></ROW><ROW><id>11059258</id><snippet>tasks_dict = dict((task['id'], task) for task in tasks)
folders_dict = dict((folder['id'], folder) for folder in folders)
forbidden_folders_set = set(forbiddenFolders)
</snippet></ROW><ROW><id>11059258</id><snippet>task = tasks_dict[id]</snippet></ROW><ROW><id>11059258</id><snippet>task['id'] == id</snippet></ROW><ROW><id>11059258</id><snippet>folder in forbidden_folders_set</snippet></ROW><ROW><id>11059258</id><snippet>dict(...)</snippet></ROW><ROW><id>11059258</id><snippet>if entry['item_id'] in tasks_dict:
    task = tasks_dict[entry['item_id']]
    if task['parent_id'] in folders_dict:
        folder = folders_dict[task['parent_id']]
        if folder in forbidden_folders_set:
            body_of_email += ...
</snippet></ROW><ROW><id>11059258</id><snippet>x in y</snippet></ROW><ROW><id>11059258</id><snippet>..._dict[x]</snippet></ROW><ROW><id>11059378</id><snippet>seen = set()
item_list = [seen.add(item) or item for item in item_list if item not in seen]
</snippet></ROW><ROW><id>11059812</id><snippet>&gt;&gt;&gt; import re
&gt;&gt;&gt; input_str = 'foo [[bar]] baz [[etc.]]'
</snippet></ROW><ROW><id>11059812</id><snippet>[[...]]</snippet></ROW><ROW><id>11059812</id><snippet>&gt;&gt;&gt; re.sub(r'\[\[.*?\]\]', '', input_str)
'foo  baz '
</snippet></ROW><ROW><id>11059812</id><snippet>[[...]]</snippet></ROW><ROW><id>11059812</id><snippet>&gt;&gt;&gt; re.sub(r'\[\[(.*?)\]\]', r'\1', input_str)
'foo bar baz etc.'
</snippet></ROW><ROW><id>11059969</id><snippet>if unit is standing still
  compute pathfinding as you would normally do
else
  compute pathfinding from the unit cell
  discard the first cell of the pathfinding route (since it would backtrack)
  compute the route directly to the next cell (by drawing a correct path)
</snippet></ROW><ROW><id>11059977</id><snippet>2</snippet></ROW><ROW><id>11059977</id><snippet>def getSum(l):
    sum = 0
    skip = False
    for i in l:
         if i == 13:
             skip = True
             continue
         if skip:
             skip = False
             continue
         sum += i
    return sum
</snippet></ROW><ROW><id>11059977</id><snippet>skip</snippet></ROW><ROW><id>11059977</id><snippet>True</snippet></ROW><ROW><id>11059977</id><snippet>skip</snippet></ROW><ROW><id>11059977</id><snippet>True</snippet></ROW><ROW><id>11059977</id><snippet>skip</snippet></ROW><ROW><id>11059977</id><snippet>False</snippet></ROW><ROW><id>11059977</id><snippet>sum</snippet></ROW><ROW><id>11060178</id><snippet>from midiutil.MidiFile import MIDIFile

# create your MIDI object
mf = MIDIFile(1)     # only 1 track
track = 0   # the only track

time = 0    # start at the beginning
mf.addTrackName(track, time, "Sample Track")
mf.addTempo(track, time, 120)

# add some notes
channel = 0
volume = 100

pitch = 60           # C4 (middle C)
time = 0             # start on beat 0
duration = 1         # 1 beat long
mf.addNote(track, channel, pitch, time, duration, volume)

pitch = 64           # E4
time = 2             # start on beat 2
duration = 1         # 1 beat long
mf.addNote(track, channel, pitch, time, duration, volume)

pitch = 67           # G4
time = 4             # start on beat 4
duration = 1         # 1 beat long
mf.addNote(track, channel, pitch, time, duration, volume)

# write it to disk
with open("output.mid", 'wb') as outf:
    mf.writeFile(outf)
</snippet></ROW><ROW><id>11060209</id><snippet>data - point</snippet></ROW><ROW><id>11060209</id><snippet>np.hypot</snippet></ROW><ROW><id>11060209</id><snippet>import numpy as np

data = np.array([[[1704, 1240],
                  [1745, 1244],
                  [1972, 1290],
                  [2129, 1395],
                  [1989, 1332]],

                 [[1712, 1246],
                  [1750, 1246],
                  [1964, 1286],
                  [2138, 1399],
                  [1989, 1333]],

                 [[1721, 1249],
                  [1756, 1249],
                  [1955, 1283],
                  [2145, 1399],
                  [1990, 1333]]])

point = [1989, 1332]

#-- Calculate distance ------------
# The reshape is to make it a single, Nx2 array to make calling `hypot` easier
dist = data.reshape((-1,2)) - point
dist = np.hypot(*dist.T)

# We can then reshape it back to AxBx1 array, similar to the original shape
dist = dist.reshape(data.shape[0], data.shape[1], 1)
print dist
</snippet></ROW><ROW><id>11060209</id><snippet>array([[[ 299.48121811],
        [ 259.38388539],
        [  45.31004304],
        [ 153.5219854 ],
        [   0.        ]],

       [[ 290.04310025],
        [ 254.0019685 ],
        [  52.35456045],
        [ 163.37074401],
        [   1.        ]],

       [[ 280.55837182],
        [ 247.34186868],
        [  59.6405902 ],
        [ 169.77926846],
        [   1.41421356]]])
</snippet></ROW><ROW><id>11060209</id><snippet>-1</snippet></ROW><ROW><id>11060209</id><snippet>-1</snippet></ROW><ROW><id>11060209</id><snippet>#-- Remove closest point ---------------------
mask = np.squeeze(dist) != dist.min(axis=1)
filtered = data[mask]

# Once again, let's reshape things back to the original shape...
filtered = filtered.reshape(data.shape[0], -1, data.shape[2])
</snippet></ROW><ROW><id>11060209</id><snippet>dist != something</snippet></ROW><ROW><id>11060209</id><snippet>import numpy as np

data = np.array([[[1704, 1240],
                  [1745, 1244],
                  [1972, 1290],
                  [2129, 1395],
                  [1989, 1332]],

                 [[1712, 1246],
                  [1750, 1246],
                  [1964, 1286],
                  [2138, 1399],
                  [1989, 1333]],

                 [[1721, 1249],
                  [1756, 1249],
                  [1955, 1283],
                  [2145, 1399],
                  [1990, 1333]]])

point = [1989, 1332]

#-- Calculate distance ------------
# The reshape is to make it a single, Nx2 array to make calling `hypot` easier
dist = data.reshape((-1,2)) - point
dist = np.hypot(*dist.T)

# We can then reshape it back to AxBx1 array, similar to the original shape
dist = dist.reshape(data.shape[0], data.shape[1], 1)

#-- Remove closest point ---------------------
mask = np.squeeze(dist) != dist.min(axis=1)
filtered = data[mask]

# Once again, let's reshape things back to the original shape...
filtered = filtered.reshape(data.shape[0], -1, data.shape[2])

print filtered
</snippet></ROW><ROW><id>11060209</id><snippet>array([[[1704, 1240],
        [1745, 1244],
        [1972, 1290],
        [2129, 1395]],

       [[1712, 1246],
        [1750, 1246],
        [1964, 1286],
        [2138, 1399]],

       [[1721, 1249],
        [1756, 1249],
        [1955, 1283],
        [2145, 1399]]])
</snippet></ROW><ROW><id>11060225</id><snippet>Popen</snippet></ROW><ROW><id>11060225</id><snippet>call</snippet></ROW><ROW><id>11060225</id><snippet>import subprocess
subprocess.Popen("/opt/openoffice.org3/program/scalc")
</snippet></ROW><ROW><id>11060225</id><snippet>call</snippet></ROW><ROW><id>11060245</id><snippet>&gt;&gt;&gt; import colorsys
&gt;&gt;&gt; colorsys.rgb_to_hsv(.3, .4, .2)
(0.25, 0.5, 0.4)
</snippet></ROW><ROW><id>11060333</id><snippet>def run_file(self):
    sub_process=subprocess.Popen(self.sub_proc_args) #Open subprocess
    self.root.update() #Update GUI    
self.run_file() #Initiate sub_process
</snippet></ROW><ROW><id>11060333</id><snippet>Popen</snippet></ROW><ROW><id>11060493</id><snippet>from mako.template import Template 
t = Template( 
""" 
% for i in xrange(5): 
    % if i == 3: 
        &lt;% break %&gt; 
    % endif 
    ${i} 
% endfor 
% for i in xrange(5): 
    % if i == 3: 
        &lt;% continue %&gt; 
    % endif 
    ${i} 
% endfor 
""") 
print t.render() 

output: 
0 
1 
2 
0 
1 
2 
4 
</snippet></ROW><ROW><id>11060508</id><snippet>!=</snippet></ROW><ROW><id>11060508</id><snippet>&lt;&gt;</snippet></ROW><ROW><id>11060508</id><snippet>is</snippet></ROW><ROW><id>11060508</id><snippet>is not</snippet></ROW><ROW><id>11060508</id><snippet>1 == 1 # true
1 != 1 # false
1 &lt;&gt; 1 # false
[] is [] # false (distinct objects)
a = b = []; a is b # true (same object)
</snippet></ROW><ROW><id>11060628</id><snippet>f.blah is f.blah
</snippet></ROW><ROW><id>11060628</id><snippet>f.blah</snippet></ROW><ROW><id>11060628</id><snippet>Foo.blah.__get__(f, type(f))
</snippet></ROW><ROW><id>11060670</id><snippet>In [17]: from django.template import Template, Context                                                                                                                   

In [18]: t = Template("{{ text }}")

In [19]: c = Context({'text': 'Vancouver marketing extraordinaire Bob Rennie asks “What if it’s not a bubble?'})                                                         

In [20]: print t.render(c)
Vancouver marketing extraordinaire Bob Rennie asks “What if it’s not a bubble?

In [21]: t.render(c)
Out[21]: u'Vancouver marketing extraordinaire Bob Rennie asks \u201cWhat if it\u2019s not a bubble?'
</snippet></ROW><ROW><id>11060670</id><snippet>t.render(c).encode('utf-8')</snippet></ROW><ROW><id>11060787</id><snippet>if __name__ == "__main__":
    try:
        t1().start()
    except:
        log.debug('Trouble with t1 synchronizer')
    try:
        t2().start()
    except:
        log.debug('Trouble with t2 synchronizer')
    try:
        t3().start()
    except:
        log.debug('Trouble with t3 synchronizer')
    Time.sleep(5)
# this sleep allows the threads to start so they will return a True for isAlive()
    while True:
        try:
            if t1().isAlive()==False:
                try:
                    t1().start()
                except:
                    log.debug('Trouble with t1 synchronizer')
            if t2.isAlive()==False:
                try:
                    t2().start()
                except:
                    log.debug('Trouble with t2 synchronizer')
            if t2.isAlive()==False()
               try:
                    t3().start()
                except:
                    log.debug('Trouble with t3 synchronizer')
</snippet></ROW><ROW><id>11060831</id><snippet>import wx

trial_range = range(1, 3)
timer_range = range(7)

class TimersClass(wx.Frame):
    def __init__(self, *args, **kwargs):
        wx.Frame.__init__(self, *args, **kwargs)

        panel = wx.Panel(self)
        self.button1 = wx.Button(panel, label = 'Go')
        self.Bind(wx.EVT_BUTTON, self.BuildTimers, self.button1)

        self.timers = {}  # a structure to hold the timers

    def BuildTimers(self, event):
        for trial in trial_range:
            for timer in timer_range:
                new_timer = wx.Timer(self)
                new_timer.Start(1 + timer*1000, oneShot=True)

                key = (trial, timer)
                self.timers[key] = new_timer # to keep the timer in the class
                new_timer.mykey = key  #optional: to know the key of the timer via the event (see Hi())

        self.Bind(wx.EVT_TIMER, self.Hi)

    def Hi(self, event):
        print "timer:",
        print event.GetEventObject().mykey


app = wx.PySimpleApp() 
frame = TimersClass(None)
frame.Center()
frame.Show()
app.MainLoop()
</snippet></ROW><ROW><id>11060831</id><snippet>timer: (1, 0)
timer: (2, 0)
timer: (1, 1)
timer: (2, 1)
timer: (1, 2)
# etc
</snippet></ROW><ROW><id>11061143</id><snippet>__init__()</snippet></ROW><ROW><id>11061143</id><snippet>Ui_MainWindow</snippet></ROW><ROW><id>11061143</id><snippet>self.setupUi()</snippet></ROW><ROW><id>11061143</id><snippet>setupUi()</snippet></ROW><ROW><id>11061143</id><snippet>super()</snippet></ROW><ROW><id>11061143</id><snippet>__init__()</snippet></ROW><ROW><id>11061143</id><snippet>MainWindow</snippet></ROW><ROW><id>11061143</id><snippet>Ui_MainWindow.__init__(self, MainWindow)</snippet></ROW><ROW><id>11061143</id><snippet>MainWindow</snippet></ROW><ROW><id>11061143</id><snippet>setupUi</snippet></ROW><ROW><id>11061143</id><snippet>class add_to(QtGui.QDialog,Ui_MainWindow):
   def __init__(self):
       super(add_to,self).__init__()
       self.window=QtGui.QMainWindow()
       self.MainWindow=Ui_MainWindow(self.window)
       Ui_MainWindow.__init__(self,self.MainWindow)
</snippet></ROW><ROW><id>11061143</id><snippet>class add_to(QtGui.QDialog,Ui_MainWindow):
   def __init__(self):
       super(add_to,self).__init__()
       self.window=QtGui.QMainWindow()
       self.MainWindow=Ui_MainWindow(self.window)
</snippet></ROW><ROW><id>11061143</id><snippet>Ui_MainWindow.__init__()</snippet></ROW><ROW><id>11061143</id><snippet>self.MainWindow=Ui_MainWindow(self.window)</snippet></ROW><ROW><id>11061209</id><snippet>br.links()</snippet></ROW><ROW><id>11061209</id><snippet>next</snippet></ROW><ROW><id>11061209</id><snippet>list</snippet></ROW><ROW><id>11061907</id><snippet>import os
os.makedirs('a/b/c', exist_ok=True)
</snippet></ROW><ROW><id>11061940</id><snippet>MOUSEBUTTONDOWN</snippet></ROW><ROW><id>11061940</id><snippet>MOUSEBUTTONUP</snippet></ROW><ROW><id>11061940</id><snippet>MOUSEMOTION</snippet></ROW><ROW><id>11061987</id><snippet>op=SIOCGIFCONF</snippet></ROW><ROW><id>11062055</id><snippet>&gt;&gt;&gt; import numpy as np
&gt;&gt;&gt; a = np.arange(100)
&gt;&gt;&gt; 
&gt;&gt;&gt; offset_length = [(3,10),(50,3),(60,20),(95,1)]
&gt;&gt;&gt;
&gt;&gt;&gt; np.concatenate([a[offset:offset+length] for offset,length in offset_length])
array([ 3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 50, 51, 52, 60, 61, 62, 63,
       64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 95])
</snippet></ROW><ROW><id>11062055</id><snippet>&gt;&gt;&gt; indices = [offset + i for offset,length in offset_length for i in xrange(length)]
&gt;&gt;&gt; a[indices]
array([ 3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 50, 51, 52, 60, 61, 62, 63,
       64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 95])
</snippet></ROW><ROW><id>11062055</id><snippet>import timeit

setup = 'import numpy as np; a = np.arange(1000); offset_length = %s'

for title, ol in [('few short', '[(3,10),(50,3),(60,10),(95,1)]'),
                  ('few long', '[(3,100),(200,200),(600,300)]'),
                  ('many short', '[(2*x,1) for x in range(400)]')]:
  print '**',title,'**'
  print 'dbaupp 1st:', timeit.timeit('np.concatenate([a[offset:offset+length] for offset,length in offset_length])', setup % ol, number=10000)
  print 'dbaupp 2nd:', timeit.timeit('a[[offset + i for offset,length in offset_length for i in xrange(length)]]', setup % ol, number=10000)
  print '    fraxel:', timeit.timeit('a[np.concatenate([np.arange(offset,offset+length) for offset,length in offset_length])]', setup % ol, number=10000)
</snippet></ROW><ROW><id>11062055</id><snippet>** few short **
dbaupp 1st: 0.0474979877472
dbaupp 2nd: 0.190793991089
    fraxel: 0.128381967545
** few long **
dbaupp 1st: 0.0416231155396
dbaupp 2nd: 1.58000087738
    fraxel: 0.228138923645
** many short **
dbaupp 1st: 3.97210478783
dbaupp 2nd: 2.73584890366
    fraxel: 7.34302687645
</snippet></ROW><ROW><id>11062149</id><snippet>.xpath</snippet></ROW><ROW><id>11062149</id><snippet>&gt;&gt;&gt; from lxml import etree
&gt;&gt;&gt; from cStringIO import StringIO
&gt;&gt;&gt; tag2values = ['newvalue1', 'newvalue2']
&gt;&gt;&gt; example = StringIO("""\
... &lt;main_tag&gt;
...    &lt;first&gt;
...      &lt;tag1&gt;val1&lt;/tag1&gt;
...      &lt;conf&gt;
...        &lt;tag2&gt;val2&lt;/tag2&gt;
...        &lt;tag3&gt;val3&lt;/tag3&gt;
...        &lt;tag4&gt;val4&lt;/tag4&gt;
...      &lt;/conf&gt;
...    &lt;/first&gt;
...    &lt;second&gt;
...      &lt;tag1&gt;val2&lt;/tag1&gt;
...      &lt;conf&gt;
...        &lt;tag2&gt;val6&lt;/tag2&gt;
...        &lt;tag3&gt;val7&lt;/tag3&gt;
...        &lt;tag4&gt;val8&lt;/tag4&gt;
...      &lt;/conf&gt;
...    &lt;/second&gt;
... &lt;/main_tag&gt;
... """)
&gt;&gt;&gt; tree = etree.parse(example)
&gt;&gt;&gt; value1selector = '*/conf/tag2[../../tag1/text() = "val1"]'
&gt;&gt;&gt; value2selector = '*/conf/tag2[../../tag1/text() = "val2"]'
&gt;&gt;&gt; for elem in tree.xpath(value1selector):
...     elem.text = tag2values[0]
... 
&gt;&gt;&gt; for elem in tree.xpath(value2selector):
...     elem.text = tag2values[1]
... 
&gt;&gt;&gt; print(etree.tostring(tree, pretty_print=True))
&lt;main_tag&gt;
   &lt;first&gt;
     &lt;tag1&gt;val1&lt;/tag1&gt;
     &lt;conf&gt;
       &lt;tag2&gt;newvalue1&lt;/tag2&gt;
       &lt;tag3&gt;val3&lt;/tag3&gt;
       &lt;tag4&gt;val4&lt;/tag4&gt;
     &lt;/conf&gt;
   &lt;/first&gt;
   &lt;second&gt;
     &lt;tag1&gt;val2&lt;/tag1&gt;
     &lt;conf&gt;
       &lt;tag2&gt;newvalue2&lt;/tag2&gt;
       &lt;tag3&gt;val7&lt;/tag3&gt;
       &lt;tag4&gt;val8&lt;/tag4&gt;
     &lt;/conf&gt;
   &lt;/second&gt;
&lt;/main_tag&gt;
</snippet></ROW><ROW><id>11062149</id><snippet>value1selector</snippet></ROW><ROW><id>11062149</id><snippet>tag2</snippet></ROW><ROW><id>11062149</id><snippet>conf</snippet></ROW><ROW><id>11062149</id><snippet>tag1</snippet></ROW><ROW><id>11062149</id><snippet>val1</snippet></ROW><ROW><id>11062149</id><snippet>Element</snippet></ROW><ROW><id>11062284</id><snippet>#!/usr/bin/env python

#import gtk
from gi.repository import Gtk 

class NameApp:
    def __init__(self):
        filename = "test.glade"
        builder = Gtk.Builder()
        builder.add_from_file(filename)
        builder.connect_signals(self)
        builder.get_object("mainWindow").show_all() 

    def buttonWriteNameToFile_clicked(self, widget):
        print("File write code...")

if __name__ == "__main__":
    app = NameApp()
    Gtk.main()
</snippet></ROW><ROW><id>11062400</id><snippet>Py_Initialize();</snippet></ROW><ROW><id>11062400</id><snippet>Py_Finalize();</snippet></ROW><ROW><id>11062661</id><snippet>sys.path()</snippet></ROW><ROW><id>11062661</id><snippet>sys.path</snippet></ROW><ROW><id>11062661</id><snippet>os.listdir</snippet></ROW><ROW><id>11062661</id><snippet>&gt;&gt;&gt; import os
&gt;&gt;&gt; d = 'C:\\test.zip'
&gt;&gt;&gt; os.listdir(d)
Traceback (most recent call last):
  File "&lt;input&gt;", line 1, in &lt;module&gt;
WindowsError: [Error 267] El nombre del directorio no es válido: 'C:\\test.zip/*.*'
&gt;&gt;&gt; 
</snippet></ROW><ROW><id>11062661</id><snippet>os.getcwd</snippet></ROW><ROW><id>11062786</id><snippet>colorsys</snippet></ROW><ROW><id>11062786</id><snippet>0.0</snippet></ROW><ROW><id>11062786</id><snippet>1.0</snippet></ROW><ROW><id>11062786</id><snippet>&gt;&gt;&gt; h, s, v = colorsys.rgb_to_hsv(144/255., 190/255., 255/255.)
&gt;&gt;&gt; 360 * h, 100 * s, 100 * v
(215.13513513513513, 43.529411764705884, 100.0)
</snippet></ROW><ROW><id>11062854</id><snippet>from distutils.core import setup
import py2exe
import matplotlib

setup(console=['afile.py'],
      options={
               'py2exe': {
                          'packages' :  ['matplotlib', 'pytz'],
                          'dll_excludes': ['libgdk-win32-2.0-0.dll',
                                         'libgobject-2.0-0.dll',
                                         'libgdk_pixbuf-2.0-0.dll',
                                         'libgtk-win32-2.0-0.dll',
                                         'libglib-2.0-0.dll',
                                         'libcairo-2.dll',
                                         'libpango-1.0-0.dll',
                                         'libpangowin32-1.0-0.dll',
                                         'libpangocairo-1.0-0.dll',
                                         'libglade-2.0-0.dll',
                                         'libgmodule-2.0-0.dll',
                                         'libgthread-2.0-0.dll',
                                         'QtGui4.dll', 'QtCore.dll',
                                         'QtCore4.dll'
                                        ],
                          }
                },
      data_files=matplotlib.get_py2exe_datafiles(),)   
</snippet></ROW><ROW><id>11062889</id><snippet>&lt;script type="text/x-handlebars"&gt;
    My firstName is {{!Employee.firstName}}
&lt;/script&gt;
</snippet></ROW><ROW><id>11062902</id><snippet>b = []
</snippet></ROW><ROW><id>11062902</id><snippet>TestSuite</snippet></ROW><ROW><id>11062902</id><snippet>TestSuite</snippet></ROW><ROW><id>11062902</id><snippet>setUp</snippet></ROW><ROW><id>11062902</id><snippet>setUp</snippet></ROW><ROW><id>11062902</id><snippet>TestSuite</snippet></ROW><ROW><id>11062902</id><snippet>self.b.extend([10, 20])
</snippet></ROW><ROW><id>11062902</id><snippet>tearDown</snippet></ROW><ROW><id>11062902</id><snippet>b</snippet></ROW><ROW><id>11062902</id><snippet>self.b = []
</snippet></ROW><ROW><id>11062902</id><snippet>self.b</snippet></ROW><ROW><id>11062902</id><snippet>TestSuite</snippet></ROW><ROW><id>11062902</id><snippet>b</snippet></ROW><ROW><id>11062902</id><snippet>tearDown</snippet></ROW><ROW><id>11062902</id><snippet>TestSuite</snippet></ROW><ROW><id>11062902</id><snippet>TestSuite</snippet></ROW><ROW><id>11062902</id><snippet>b</snippet></ROW><ROW><id>11062902</id><snippet>[10, 20, 30]</snippet></ROW><ROW><id>11062902</id><snippet>setUp</snippet></ROW><ROW><id>11062902</id><snippet>10</snippet></ROW><ROW><id>11062902</id><snippet>20</snippet></ROW><ROW><id>11062902</id><snippet>TestSuite</snippet></ROW><ROW><id>11062902</id><snippet>b</snippet></ROW><ROW><id>11062902</id><snippet>40</snippet></ROW><ROW><id>11062902</id><snippet>TestSuite</snippet></ROW><ROW><id>11062902</id><snippet>[10,20,30,10,20,40]
</snippet></ROW><ROW><id>11062902</id><snippet>del self.b[:]</snippet></ROW><ROW><id>11062902</id><snippet>append</snippet></ROW><ROW><id>11062902</id><snippet>del</snippet></ROW><ROW><id>11063047</id><snippet>ListView</snippet></ROW><ROW><id>11063047</id><snippet>class BlogPostView(ListView):
    template_name = 'blog.html'

    def get(self, request, *args, **kwargs):
        slug = kwargs.get('slug')
        slug_id = ... # code here to determine id of slug's category
        self.queryset = Post.objects.filter(category=slug_id)[:5]
        return super(BlogPostView, self).get(request, *args, **kwargs)
</snippet></ROW><ROW><id>11063047</id><snippet>url(r'^(?P&lt;slug&gt;[-\w]+)/$', BlogListView.as_view()),
</snippet></ROW><ROW><id>11063186</id><snippet>db.ReferenceProperty(users.User)</snippet></ROW><ROW><id>11063233</id><snippet>query = si.query()

for word in words:
    query |= si.Q(word)
</snippet></ROW><ROW><id>11063233</id><snippet>query = reduce(operator.or_, [si.Q(word) for word in words])
</snippet></ROW><ROW><id>11063970</id><snippet>groups()</snippet></ROW><ROW><id>11063970</id><snippet>email, password = re.search('(.*?)-+(.*?)-+', line).groups()
</snippet></ROW><ROW><id>11064103</id><snippet>&gt;&gt;&gt; *xs, x = [1, 2, 3, 4, 5, 6, 7]
&gt;&gt;&gt; xs
[1, 2, 3, 4, 5, 6]
&gt;&gt;&gt; x
7
</snippet></ROW><ROW><id>11064118</id><snippet>colorsys</snippet></ROW><ROW><id>11064118</id><snippet>255.</snippet></ROW><ROW><id>11064238</id><snippet>import mechanize

br = mechanize.Browser()
br.open("http://www.google.com/")

for f in br.forms():
    print f
</snippet></ROW><ROW><id>11064238</id><snippet>&lt;f GET http://www.google.ca/search application/x-www-form-urlencoded
  &lt;HiddenControl(ie=ISO-8859-1) (readonly)&gt;
  &lt;HiddenControl(hl=en) (readonly)&gt;
  &lt;HiddenControl(source=hp) (readonly)&gt;
  &lt;TextControl(q=)&gt;
  &lt;SubmitControl(btnG=Google Search) (readonly)&gt;
  &lt;SubmitControl(btnI=I'm Feeling Lucky) (readonly)&gt;
  &lt;HiddenControl(gbv=1) (readonly)&gt;&gt;
</snippet></ROW><ROW><id>11064421</id><snippet>*</snippet></ROW><ROW><id>11064421</id><snippet>myfunc(*mylist)
</snippet></ROW><ROW><id>11064548</id><snippet>import sys
import time

sys.stdout.write('name=')
last_lenght = 0
with open('names.txt') as names:
    for name in names:
        sys.stdout.write('\b' * last_lenght)    # go back
        sys.stdout.write(' ' * last_lenght)     # clear last name
        sys.stdout.write('\b' * last_lenght)    # reposition
        sys.stdout.write(name.strip())
        sys.stdout.flush()
        last_lenght = len(name.strip())
        time.sleep(0.5)
</snippet></ROW><ROW><id>11064568</id><snippet>as</snippet></ROW><ROW><id>11064568</id><snippet>except Exception as e:
</snippet></ROW><ROW><id>11064568</id><snippet>python3 setup.py build
</snippet></ROW><ROW><id>11064568</id><snippet>C:\Python32\tornado-2.3</snippet></ROW><ROW><id>11064568</id><snippet>tornado/build/lib</snippet></ROW><ROW><id>11064610</id><snippet>requests</snippet></ROW><ROW><id>11064610</id><snippet>import requests
from StringIO import StringIO

r = requests.get(file_url)
f = StringIO(r.content)

# f.read()
</snippet></ROW><ROW><id>11064610</id><snippet>request</snippet></ROW><ROW><id>11064610</id><snippet>request = form.instance.source_url</snippet></ROW><ROW><id>11064610</id><snippet>file_url = from.instance.source_url</snippet></ROW><ROW><id>11064637</id><snippet>awk 'NR == 2 {print}; {line1 = line2; line2 = line3; line3 = $0} END {print line1; print line2; print line3}' files*
</snippet></ROW><ROW><id>11064637</id><snippet>gawk</snippet></ROW><ROW><id>11064637</id><snippet>gawk</snippet></ROW><ROW><id>11064637</id><snippet>BEGINFILE</snippet></ROW><ROW><id>11064637</id><snippet>ENDFILE</snippet></ROW><ROW><id>11064637</id><snippet>#!/usr/bin/awk -f
function beginfile (file) {
    line1 = line2 = line3 = ""
}

function endfile (file) {
    print line1; print line2; print line3
}

FILENAME != _oldfilename \
     {
         if (_oldfilename != "")
             endfile(_oldfilename)
         _oldfilename = FILENAME
         beginfile(FILENAME)
     }

     END   { endfile(FILENAME) }

FNR == 2 {
    print
}

{
    line1 = line2; line2 = line3; line3 = $0
}
</snippet></ROW><ROW><id>11064637</id><snippet>chmod u+x fileparts
</snippet></ROW><ROW><id>11064637</id><snippet>./fileparts file1 file2 anotherfile somemorefiles*.txt
</snippet></ROW><ROW><id>11064637</id><snippet>for file in file1 file2 anotherfile somemorefiles*.txt
do
    ./fileparts "$file" &gt; "$file.out"
done
</snippet></ROW><ROW><id>11064827</id><snippet>sudo find / -name "py2applet" -type f
</snippet></ROW><ROW><id>11064935</id><snippet>im = Image.open('image.gif')
rgb_im = im.convert('RGB')
r, g, b = rgb_im.getpixel((1, 1))

print r, g, b
(65, 100, 137)
</snippet></ROW><ROW><id>11064935</id><snippet>pix[1, 1]</snippet></ROW><ROW><id>11064935</id><snippet>convert()</snippet></ROW><ROW><id>11064935</id><snippet>.jpg</snippet></ROW><ROW><id>11064945</id><snippet>&gt;&gt;&gt; ','.join(str(i) for i in xrange(100) if i % 4 in (1,2))
'1,2,5,6,9,10,13,14,...'
</snippet></ROW><ROW><id>11065083</id><snippet>for i in *.tar.gz; do tar -xvf $i; done</snippet></ROW><ROW><id>11065083</id><snippet>python setup.py install --user</snippet></ROW><ROW><id>11065083</id><snippet>cmake -DCMAKE_INSTALL_PREFIX=~/.local .</snippet></ROW><ROW><id>11065083</id><snippet>make</snippet></ROW><ROW><id>11065083</id><snippet>make install</snippet></ROW><ROW><id>11065083</id><snippet>source /home/chad/.local/share/dolfin/dolfin.conf</snippet></ROW><ROW><id>11065083</id><snippet>python setup.py install --user</snippet></ROW><ROW><id>11065161</id><snippet>import cv2
im = cv2.imread('1_tree_small.jpg')
im[im &gt;= 128]= 255
im[im &lt; 128] = 0
cv2.imwrite('out.jpg', im)
</snippet></ROW><ROW><id>11065257</id><snippet>python setup.py install --user</snippet></ROW><ROW><id>11065257</id><snippet>ln -s /usr/lib/python2.7/dist-packages/Pymacs ~/.local/lib/python2.7/site-packages/Pymacs</snippet></ROW><ROW><id>11065365</id><snippet>some object</snippet></ROW><ROW><id>11065365</id><snippet>query image</snippet></ROW><ROW><id>11065365</id><snippet>empty box image</snippet></ROW><ROW><id>11065365</id><snippet>non-object</snippet></ROW><ROW><id>11065526</id><snippet>foo</snippet></ROW><ROW><id>11065526</id><snippet>arg_count = foo.func_code.co_argcount
args = foo.func_code.co_varnames[:arg_count]

args_dict = {}
for k, v in d.iteritems():
    if k in args:
        args_dict[k] = v

foo(**args_dict)
</snippet></ROW><ROW><id>11065583</id><snippet>recfromcsv</snippet></ROW><ROW><id>11065583</id><snippet>kwargs.update(dtype=kwargs.get('update', None),</snippet></ROW><ROW><id>11065583</id><snippet>kwargs.update(dtype=kwargs.get('dtype', None),</snippet></ROW><ROW><id>11065583</id><snippet>import numpy as np
d = [('date',      np.datetime64),
    ('open',      np.float64),
    ('high',      np.float64),
    ('low',       np.float64),
    ('close',     np.float64),
    ('volume',    np.int64),
    ('adj_close', np.float64)]
a = np.recfromcsv("test.csv", dtype=d)
print(a)

[ (datetime.datetime(1969, 12, 31, 23, 59, 59, 999999), 1329.19, 1343.32, 1329.19, 1342.84, 4401570000, 1342.84)
 (datetime.datetime(1969, 12, 31, 23, 59, 59, 999999), 1314.88, 1333.68, 1314.14, 1329.1, 3687720000, 1329.1)
 (datetime.datetime(1969, 12, 31, 23, 59, 59, 999999), 1324.02, 1327.28, 1310.51, 1314.88, 3506510000, 1314.88)]
</snippet></ROW><ROW><id>11065583</id><snippet>import datetime
import numpy as np

d = [('date',     datetime.datetime),
    ('open',      np.float64),
    ('high',      np.float64),
    ('low',       np.float64),
    ('close',     np.float64),
    ('volume',    np.int64),
    ('adj_close', np.float64)]

#a = np.recfromcsv("test.csv", dtype=d)
kwargs = {"dtype": d}
case_sensitive = kwargs.get('case_sensitive', "lower") or "lower"
names = kwargs.get('names', True)
kwargs.update(
    delimiter=kwargs.get('delimiter', ",") or ",",
    names=names,
    case_sensitive=case_sensitive)
output = np.genfromtxt("test.csv", **kwargs)
output = output.view(np.recarray)

print(output)
</snippet></ROW><ROW><id>11065627</id><snippet>&gt;&gt;&gt; datetime.now().isoformat()
'2012-06-16T19:34:05.418407'
&gt;&gt;&gt; sorted([datetime.now().isoformat(), (datetime.now() - timedelta(days=100)).isoformat()])
['2012-03-08T19:34:06.802304', '2012-06-16T19:34:06.802288']
</snippet></ROW><ROW><id>11065664</id><snippet>In [25]: for exp, group in df.groupby(level=0, axis=1):
   ....:     print exp, group
   ....:     
IWWGCW Experiment           IWWGCW       
Lead Time                24     48
2010-11-27 12:00:00   0.997  0.991
2010-11-28 12:00:00   0.998  0.987
2010-11-29 12:00:00   0.997  0.992
2010-11-30 12:00:00   0.997  0.987
2010-12-01 12:00:00   0.996  0.986
IWWGDW Experiment           IWWGDW       
Lead Time                24     48
2010-11-27 12:00:00   0.998  0.990
2010-11-28 12:00:00   0.997  0.990
2010-11-29 12:00:00   0.997  0.992
2010-11-30 12:00:00   0.997  0.987
2010-12-01 12:00:00   0.996  0.986
</snippet></ROW><ROW><id>11065664</id><snippet>df.groupby(level=0, axis=1).sub(df['IWWGCW'])</snippet></ROW><ROW><id>11065664</id><snippet>df['IWWGCW']</snippet></ROW><ROW><id>11065664</id><snippet>In [29]: df.groupby(level=0, axis=1).sub(df['IWWGCW'].values)
Out[29]: 
Experiment           IWWGCW      IWWGDW       
Lead Time                24  48      24     48
2010-11-27 12:00:00       0   0   0.001 -0.001
2010-11-28 12:00:00       0   0  -0.001  0.003
2010-11-29 12:00:00       0   0   0.000  0.000
2010-11-30 12:00:00       0   0   0.000  0.000
2010-12-01 12:00:00       0   0   0.000  0.000
</snippet></ROW><ROW><id>11065672</id><snippet>        self.urls = []
</snippet></ROW><ROW><id>11065672</id><snippet>                self.urls.extend(href)
</snippet></ROW><ROW><id>11065672</id><snippet>start_a()</snippet></ROW><ROW><id>11065672</id><snippet>SGMLParser</snippet></ROW><ROW><id>11065672</id><snippet>URLLister</snippet></ROW><ROW><id>11065739</id><snippet>'bundle_files': 3
</snippet></ROW><ROW><id>11065879</id><snippet>chmod +x Standalone.py
</snippet></ROW><ROW><id>11065879</id><snippet>./Standalone.py
</snippet></ROW><ROW><id>11065909</id><snippet>index.php</snippet></ROW><ROW><id>11065909</id><snippet>index</snippet></ROW><ROW><id>11065909</id><snippet>&lt;div id="ingredients"&gt;&lt;/div&gt;</snippet></ROW><ROW><id>11065909</id><snippet>main.js</snippet></ROW><ROW><id>11065909</id><snippet>get_ingredients.php</snippet></ROW><ROW><id>11065909</id><snippet>get_ingredients.php</snippet></ROW><ROW><id>11065909</id><snippet>index</snippet></ROW><ROW><id>11065909</id><snippet>echo</snippet></ROW><ROW><id>11065909</id><snippet>print</snippet></ROW><ROW><id>11065909</id><snippet>printf</snippet></ROW><ROW><id>11066163</id><snippet>reduce</snippet></ROW><ROW><id>11066163</id><snippet>map</snippet></ROW><ROW><id>11066163</id><snippet>&gt;&gt;&gt; reduce(addfoo, foos, defaultdict(set))
defaultdict(&lt;type 'set'&gt;, {'baz': set([('bar', 0)]), 'foo': set([('bar', 1)]), 'bar': set([('foo', 1), ('baz', 0)])})
</snippet></ROW><ROW><id>11066163</id><snippet>reduce</snippet></ROW><ROW><id>11066163</id><snippet>functools</snippet></ROW><ROW><id>11066163</id><snippet>&gt;&gt;&gt; from functools import reduce
&gt;&gt;&gt; reduce(addfoo, foos, defaultdict(set))
defaultdict(&lt;class 'set'&gt;, {'baz': {('bar', 0)}, 'foo': {('bar', 1)}, 'bar': {('foo', 1), ('baz', 0)}})
</snippet></ROW><ROW><id>11066165</id><snippet>hello.js</snippet></ROW><ROW><id>11066165</id><snippet>hello.js.txt</snippet></ROW><ROW><id>11066165</id><snippet>C:\Users\ahald1\</snippet></ROW><ROW><id>11066320</id><snippet>pylab.get_backend()</snippet></ROW><ROW><id>11066687</id><snippet>unicode.translate()</snippet></ROW><ROW><id>11066687</id><snippet>import unicodedata
import sys

tbl = dict.fromkeys(i for i in xrange(sys.maxunicode)
                      if unicodedata.category(unichr(i)).startswith('P'))
def remove_punctuation(text):
    return text.translate(tbl)
</snippet></ROW><ROW><id>11066687</id><snippet>r'\p{P}'</snippet></ROW><ROW><id>11066687</id><snippet>import regex as re

def remove_punctuation(text):
    return re.sub(ur"\p{P}+", "", text)
</snippet></ROW><ROW><id>11066712</id><snippet>git clone</snippet></ROW><ROW><id>11066712</id><snippet>python setup.py develop</snippet></ROW><ROW><id>11066712</id><snippet>&gt; mkproject ckan
</snippet></ROW><ROW><id>11066712</id><snippet>WORKON_HOME/ckan</snippet></ROW><ROW><id>11066712</id><snippet>PROJECT_HOME/ckan</snippet></ROW><ROW><id>11066712</id><snippet>(ckan)~/Projects/ckan&gt; git clone git@github.com:okfn/ckan.git
</snippet></ROW><ROW><id>11066712</id><snippet>~/Projects/ckan/ckan</snippet></ROW><ROW><id>11066712</id><snippet>(ckan)~/Projects/ckan&gt; cd ckan
(ckan)~/Projects/ckan/ckan&gt; python setup.py develop
</snippet></ROW><ROW><id>11066712</id><snippet>(ckan)~/Projects/ckan/ckan&gt; pip install --ignore-installed -r requires/lucid_missing.txt -r requires/lucid_conflict.txt -r requires/lucid_present.txt
(ckan)~/Projects/ckan/ckan&gt; pip install webob==1.0.8
</snippet></ROW><ROW><id>11066712</id><snippet>(ckan)~/Projects/ckan/ckan&gt; paster make-config ckan development.ini
    (edit development.ini as necessary)
(ckan)~/Projects/ckan/ckan&gt; paster serve development.ini
Starting server in PID 17356.
serving on 0.0.0.0:5000 view at http://127.0.0.1:5000
</snippet></ROW><ROW><id>11066712</id><snippet>workon ckan</snippet></ROW><ROW><id>11066712</id><snippet>(ckan)~/Projects/ckan&gt; git clone git@github.com:okfn/ckanext-harvest.git
(ckan)~/Projects/ckan&gt; cd ckanext-harvest
(ckan)~/Projects/ckan/ckanext-harvest&gt; python setup.py develop
</snippet></ROW><ROW><id>11066852</id><snippet>&gt; git submodule init
&gt; git submodule update
&gt; python setup.py build_sphinx
</snippet></ROW><ROW><id>11066890</id><snippet>w?</snippet></ROW><ROW><id>11066890</id><snippet>zero or one w</snippet></ROW><ROW><id>11066890</id><snippet>print soup.find('a', href = re.compile(r'.*follow\?page.*'))
</snippet></ROW><ROW><id>11066963</id><snippet>#!/usr/bin/env python3
# -*- coding: utf-8 -*-

import http.server
import os  
from pygments import highlight
from pygments.lexers import PythonLexer
from pygments.formatters import HtmlFormatter

class SourceViewer(http.server.SimpleHTTPRequestHandler):
    def do_GET(self):
        path = os.path.join(os.getcwd(), self.path[1:])
        if os.path.exists(path) and path.endswith('.py'):
            with open(path) as file:
                code = file.read()
                hl = highlight(code, PythonLexer(), HtmlFormatter(noclasses=True, linenos='table'))
                self.send_response(200)
                self.end_headers()
                self.wfile.write(bytes(hl, 'UTF-8'))
                return
        else:       
            super().do_GET()


if __name__ == "__main__":
    server = http.server.HTTPServer(('localhost', 8080), SourceViewer)
    server.serve_forever()
</snippet></ROW><ROW><id>11066963</id><snippet>#!/usr/bin/env python
# -*- coding: utf-8 -*-

from __future__ import with_statement
import SimpleHTTPServer, BaseHTTPServer
import os  
from pygments import highlight
from pygments.lexers import PythonLexer
from pygments.formatters import HtmlFormatter

class SourceViewer(SimpleHTTPServer.SimpleHTTPRequestHandler):
    def do_GET(self):
        path = os.path.join(os.getcwdu(), self.path[1:])
        if os.path.exists(path) and path.endswith(u'.py'):
            with open(path) as file:
                code = file.read()
                hl = highlight(code, PythonLexer(), HtmlFormatter(noclasses=True, linenos=u'table'))
                self.send_response(200)
                self.end_headers()
                self.wfile.write(hl)
                return
        else:    
            SimpleHTTPServer.SimpleHTTPRequestHandler.do_GET(self)

if __name__ == u"__main__":
    server = BaseHTTPServer.HTTPServer((u'localhost', 8080), SourceViewer)
    server.serve_forever()
</snippet></ROW><ROW><id>11067072</id><snippet>df.reindex_axis(sorted(df.columns), axis=1)
</snippet></ROW><ROW><id>11067222</id><snippet>my_list = [(key, v2, v1) for key in my_set_of_keys for v1, v2 in my_dict[key]]
</snippet></ROW><ROW><id>11067278</id><snippet>import subprocess
cmd = ['7z', 'a', 'Test.7z', 'Test', '-mx9']
sp = subprocess.Popen(cmd, stderr=subprocess.STDOUT, stdout=subprocess.PIPE)
</snippet></ROW><ROW><id>11067389</id><snippet>_</snippet></ROW><ROW><id>11067389</id><snippet>_</snippet></ROW><ROW><id>11067389</id><snippet>def make_unique(self, item, ln):
    ln_count = Letter.objects.filter(item=item, letter__startswith=ln+'_').count() + 1
    unique_ln = "{ln}_{count}".format(ln = ln, count = ln_count)
    return unique_ln
</snippet></ROW><ROW><id>11067583</id><snippet>document_to_be_searched = "blabla bla bla."
numOfOcur = document_to_be_searched.count("bl")
</snippet></ROW><ROW><id>11067843</id><snippet>form = SQLFORM(db.mytable, _class='myclass')
</snippet></ROW><ROW><id>11067843</id><snippet>form.custom.begin</snippet></ROW><ROW><id>11067843</id><snippet>&lt;form action="" enctype="multipart/form-data" method="post"&gt;
</snippet></ROW><ROW><id>11067843</id><snippet>form.custom.begin</snippet></ROW><ROW><id>11067996</id><snippet>UNIQUE</snippet></ROW><ROW><id>11068017</id><snippet>def remove_repeated_pairs(l):
    i = 2;
    while i &lt; len(l)-1:
            if l[i] == l[i-2] and l[i+1]==l[i-1]:
                l.pop(i);
                l.pop(i);
            else:
                i+=1;

    return l;
</snippet></ROW><ROW><id>11068038</id><snippet>matplotlib.dates.date2num</snippet></ROW><ROW><id>11068038</id><snippet>matplotlib.dates.datestr2num</snippet></ROW><ROW><id>11068038</id><snippet>annotate</snippet></ROW><ROW><id>11068038</id><snippet>import datetime as dt
import matplotlib.pyplot as plt
import matplotlib.dates as mdates

x = [dt.datetime(2009, 05, 01), dt.datetime(2010, 06, 01), 
     dt.datetime(2011, 04, 01), dt.datetime(2012, 06, 01)]
y = [1, 3, 2, 5]

fig, ax = plt.subplots()
ax.plot_date(x, y, linestyle='--')

ax.annotate('Test', (mdates.date2num(x[1]), y[1]), xytext=(15, 15), 
            textcoords='offset points', arrowprops=dict(arrowstyle='-|&gt;'))

fig.autofmt_xdate()
plt.show()
</snippet></ROW><ROW><id>11068097</id><snippet>Content-Length</snippet></ROW><ROW><id>11068097</id><snippet>Transfer-Encoding: chunked</snippet></ROW><ROW><id>11068097</id><snippet>Transfer-Encoding: chunked</snippet></ROW><ROW><id>11068097</id><snippet>0</snippet></ROW><ROW><id>11068097</id><snippet>read = #string containing a line or a part of the http response
hexPat = re.compile(r'([0-9A-F]+)\r\n', re.I)
match = re.search(hexPat, read)
chunkLen = int(match.group(1), 16) #converts hexadecimal to decimal
</snippet></ROW><ROW><id>11068097</id><snippet>0</snippet></ROW><ROW><id>11068153</id><snippet>&gt;&gt;&gt; print os.getpid()
3556
&gt;&gt;&gt; os.execl( '/usr/bin/gvim', 'gvim' )
</snippet></ROW><ROW><id>11068153</id><snippet>3556 pts/1    00:00:00 gvim &lt;defunct&gt;
3557 ?        00:00:00 gvim
</snippet></ROW><ROW><id>11068153</id><snippet>import os

if os.fork():
    # parent
    do_stuff()

else:
    # child
    os.setsid()
    os.execl('prog', 'prog')
</snippet></ROW><ROW><id>11068265</id><snippet>a_list</snippet></ROW><ROW><id>11068265</id><snippet>.reduce()</snippet></ROW><ROW><id>11068265</id><snippet>var result = a_list.reduce(function(obj, x) {
    obj[key_maker(x)] = val_maker(x);
    return obj;
}, {});
</snippet></ROW><ROW><id>11068265</id><snippet>a_list</snippet></ROW><ROW><id>11068265</id><snippet>Object.keys()</snippet></ROW><ROW><id>11068265</id><snippet>var result = Object.keys(a_list).reduce(function(obj, x) {
    obj[key_maker(a_list[x])] = val_maker(a_list[x]);
    return obj;
}, {});
</snippet></ROW><ROW><id>11068284</id><snippet>yield</snippet></ROW><ROW><id>11068284</id><snippet>result()</snippet></ROW><ROW><id>11068284</id><snippet>x</snippet></ROW><ROW><id>11068284</id><snippet>def test():
    yield 1
    a = test()
    while True:
        yield next(a)

a = test()
for i in range(10):
    print(next(a))
</snippet></ROW><ROW><id>11068284</id><snippet>yield 1</snippet></ROW><ROW><id>11068284</id><snippet>N</snippet></ROW><ROW><id>11068284</id><snippet>RZ</snippet></ROW><ROW><id>11068398</id><snippet>class Female_Parent(Female_Grandparent, Male_Grandparent):
    def __init__(self):
</snippet></ROW><ROW><id>11068398</id><snippet>Female_Parent</snippet></ROW><ROW><id>11068398</id><snippet>Male_Grandparent</snippet></ROW><ROW><id>11068398</id><snippet>class Female_Parent(object):
    def __init__(self, female_grandparent, male_grandparent):
</snippet></ROW><ROW><id>11068398</id><snippet>Male_Grandparent</snippet></ROW><ROW><id>11068398</id><snippet>Male_Parent</snippet></ROW><ROW><id>11068398</id><snippet>Child</snippet></ROW><ROW><id>11068398</id><snippet>class Person(object):
    def __init__(self, mother, father):
</snippet></ROW><ROW><id>11068398</id><snippet>class Person(object):
    def __init__(self, name, sex, parents=None, children=None):
        """
        Create a Person
        """
        self.name = name
        self.sex = sex    # 'M' or 'F'

        self.parents = set()
        if parents is not None:
            for p in parents:
                self.add_parent(p)

        self.children = set()
        if children is not None:
            for c in children:
                self.add_child(c)

    def add_parent(self, p):
        self.parents.add(p)
        p.children.add(self)

    def add_child(self, c):
        self.children.add(c)
        c.parents.add(self)

    def __str__(self):
        return self.name

    def __repr__(self):
        return "Person('{}', '{}')".format(self.name, self.sex)

    #
    # Immediate relationships
    #
    # Each fn returns a set of people who fulfill the stated relationship
    #

    def _parent(self):
        return self.parents

    def _sibling(self):
        return set().union(*(p.children for p in self.parents)) - set([self])

    def _child(self):
        return self.children

    def _female(self):
        if self.sex=='F':
            return set([self])
        else:
            return set()

    def _male(self):
        if self.sex=='M':
            return set([self])
        else:
            return set()

    def relation(self, *rels):
        """
        Find the set of all people who fulfill the stated relationship

        Ex:
            self.relation("parent", "siblings")     # returns all aunts and uncles of self
        """
        # start with the current person
        ps = set([self])

        for rel in rels:
            # each argument is either a function or a string
            if callable(rel):
                # run the function against all people in the current set
                #   and collect the results to a new set
                ps = set().union(*(rel(p) for p in ps))
            else:
                # recurse to evaluate the string
                do = Person._relations[rel]
                ps = set().union(*(p.relation(*do) for p in ps))

        return ps

    def print_relation(self, *rels):
        print ', '.join(str(p) for p in self.relation(*rels))

#
# Extended relationships
#
# Supplies the necessary information for Person.relation() to do its job -
# Each key refers to a recursive function tree (nodes are string values, leaves are functions)
#
# (Unfortunately this table cannot be created until the Person class is finalized)
#
Person._relations = {
    "parent":        (Person._parent,),
    "mother":        (Person._parent, Person._female),
    "father":        (Person._parent, Person._male),
    "sibling":       (Person._sibling,),
    "sister":        (Person._sibling, Person._female),
    "brother":       (Person._sibling, Person._male),
    "child":         (Person._child,),
    "daughter":      (Person._child, Person._female),
    "son":           (Person._child, Person._male),
    "grandparent":   ("parent", "parent"),
    "grandmother":   ("parent", "mother"),
    "grandfather":   ("parent", "father"),
    "aunt":          ("parent", "sister"),
    "uncle":         ("parent", "brother"),
    "cousin":        ("parent", "sibling", "child"),
    "niece":         ("sibling", "daughter"),
    "nephew":        ("sibling", "son"),
    "grandchild":    ("child", "child"),
    "grandson":      ("child", "son"),
    "granddaughter": ("child", "daughter")
}
</snippet></ROW><ROW><id>11068398</id><snippet>mm  = Person('Grandma', 'F')
mf  = Person('Grandpa', 'M')
m   = Person('Mom', 'F', [mm, mf])
fm  = Person('Nana', 'F')
ff  = Person('Papi', 'M')
f   = Person('Dad', 'M', [fm, ff])
me  = Person('Me', 'M', [m, f])
s   = Person('Sis', 'F', [m, f])
joe = Person('Brother-in-law', 'M')
s1  = Person('Andy', 'M', [s, joe])
s2  = Person('Betty', 'F', [s, joe])
s3  = Person('Carl', 'M', [s, joe])

me.print_relation("grandmother")    # returns 'Nana, Grandma'
me.print_relation("nephew")         # returns 'Andy, Carl'
</snippet></ROW><ROW><id>11068434</id><snippet>drwxr-xr-x   2 root root  4096 2011-11-10 08:14 bin/
drwxrwxrwx   1 root root    57 2011-07-10 05:11 initrd.img -&gt; boot/initrd.img-2..

&gt;&gt;&gt; import os.path
&gt;&gt;&gt; os.path.islink('initrd.img')
True
&gt;&gt;&gt; os.path.islink('bin')
False
</snippet></ROW><ROW><id>11068468</id><snippet>Icons()</snippet></ROW><ROW><id>11068468</id><snippet>__init__()</snippet></ROW><ROW><id>11068468</id><snippet>Sprite()</snippet></ROW><ROW><id>11068468</id><snippet>class Icons(pygame.sprite.Sprite):
    def __init__(self, *args):
        pygame.sprite.Sprite.__init__(self, *args)
        ...
</snippet></ROW><ROW><id>11068468</id><snippet>*args</snippet></ROW><ROW><id>11068481</id><snippet>/usr</snippet></ROW><ROW><id>11068481</id><snippet>/user</snippet></ROW><ROW><id>11068512</id><snippet>import sys, os
sys.path.append(os.path.abspath(os.path.join(os.path.dirname(__file__), '..', '..')))
from fitness import views
</snippet></ROW><ROW><id>11068644</id><snippet>.next</snippet></ROW><ROW><id>11068644</id><snippet>In [144]: soup.find("input", type="submit")
Out[144]: &lt;input type="submit" value="jump" /&gt;

In [145]: soup.find("input", type="submit").next
Out[145]: u' 1/3\n'
</snippet></ROW><ROW><id>11068644</id><snippet>In [146]: re.findall('\d+/\d+', _)
Out[146]: [u'1/3']
</snippet></ROW><ROW><id>11068644</id><snippet>In [153]: soup.findAll("input", type="submit", text=re.compile("\d+/\d+"))
Out[153]: [u' 1/3\n']
</snippet></ROW><ROW><id>11068653</id><snippet>/</snippet></ROW><ROW><id>11068653</id><snippet>urllib.quote('http://www.example.com/some path/?file=path to/file name.png&amp;name=name.me',
             '/:?&amp;=')
'http://www.example.com/some%20path/?file=path%20to/file%20name.png&amp;name=name.me'
</snippet></ROW><ROW><id>11068801</id><snippet>{
  "prodList": [
    {
      "pid": "955492",
      "pnm": "Samsung Star 3 Duos",
      "mctid": "27",
      "pc": "5,650",
      "mrp": "6290",
      "pdc": "10",
      "pimg": "Samsung-Star-3-duos-1.jpg",
      "rt": "8",
      "prc": "1",
      "per": "Y",
      (...)
    },
    (...)
}
</snippet></ROW><ROW><id>11069378</id><snippet>if True</snippet></ROW><ROW><id>11069378</id><snippet>True</snippet></ROW><ROW><id>11069378</id><snippet>print (phr2 in phr1)</snippet></ROW><ROW><id>11069378</id><snippet>.lower()</snippet></ROW><ROW><id>11069378</id><snippet>if phr2 in phr1:
    print "true"
else:
    print "false"
input("Press enter")
</snippet></ROW><ROW><id>11069564</id><snippet>subprocess</snippet></ROW><ROW><id>11069564</id><snippet>os.system</snippet></ROW><ROW><id>11069564</id><snippet>subprocess</snippet></ROW><ROW><id>11069653</id><snippet>&gt;&gt;&gt; from BeautifulSoup import BeautifulSoup
&gt;&gt;&gt; import re
&gt;&gt;&gt; page = '''\
&lt;form action="/2811457/follow?gsid=3_5bce9b871484d3af90c89f37" method="post"&gt;
&lt;div&gt;
&lt;a href="/2811457/follow?page=2&amp;gsid=3_5bce9b871484d3af90c89f37"&gt;next_page&lt;/a&gt;
 &lt;input name="mp" type="hidden" value="3" /&gt;
&lt;input type="text" name="page" size="2" style='-wap-input-format: "*N"' /&gt;
&lt;input type="submit" value="jump" /&gt; 1/3
&lt;/div&gt;
&lt;/form&gt;
'''
&gt;&gt;&gt; soup = BeautifulSoup(page)
&gt;&gt;&gt; soup.find(text=re.compile(r'next_page')).parent.get('href')
u'/2811457/follow?page=2&amp;gsid=3_5bce9b871484d3af90c89f37'
</snippet></ROW><ROW><id>11069701</id><snippet>&gt;&gt;&gt; from collections import defaultdict, Counter
&gt;&gt;&gt; d = defaultdict(Counter)
&gt;&gt;&gt; for ip, code in [['ip1',404], ['ip1',200], ['ip1',200],
                     ['ip2',200], ['ip2',200], ['ip2',504]]:
        d[ip][code] += 1

&gt;&gt;&gt; dict(d)
{'ip2': Counter({200: 2, 504: 1}), 'ip1': Counter({200: 2, 404: 1})}
</snippet></ROW><ROW><id>11069862</id><snippet>epydoc.sourceforge.net</snippet></ROW><ROW><id>11069862</id><snippet>L{}</snippet></ROW><ROW><id>11069862</id><snippet>C{}</snippet></ROW><ROW><id>11069862</id><snippet>hello C{foo} bar</snippet></ROW><ROW><id>11069862</id><snippet>foo</snippet></ROW><ROW><id>11069862</id><snippet>I{}</snippet></ROW><ROW><id>11069862</id><snippet>pydoctor --add-package twisted</snippet></ROW><ROW><id>11069862</id><snippet>epydoc twisted</snippet></ROW><ROW><id>11070072</id><snippet>{% if "bc" in "abcdef" %}
  This appears since "bc" is a substring of "abcdef"
{% endif %}
</snippet></ROW><ROW><id>11070265</id><snippet>import</snippet></ROW><ROW><id>11070265</id><snippet>py2neo</snippet></ROW><ROW><id>11070265</id><snippet>import</snippet></ROW><ROW><id>11070265</id><snippet>from . import rest</snippet></ROW><ROW><id>11070265</id><snippet>2to3</snippet></ROW><ROW><id>11070265</id><snippet>py2neo</snippet></ROW><ROW><id>11070265</id><snippet>pip</snippet></ROW><ROW><id>11070306</id><snippet>from pylab import *
from matplotlib.widgets import Slider
import numpy as np

hte = np.array([10, 11, 12, 13, 15, 20, 21, 22, 25, 30])
hre = np.array([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])

k = 20 * hte
n4 = 10 * hre
t, w4 = 6, 25
x = arange(1, 100, 10)
d = log10(x) / 10

y = k + n4 * d + t + w4 + 8

ax = subplot(111)
subplots_adjust(left=0.15, bottom=0.25)
line, = plot(x, y, linewidth=2, color='r')

xlabel('X - Title')
ylabel('Y - title')
title('$Our Chart$')
grid(True)

axcolor = 'lightgoldenrodyellow'
axhte = axes([0.15, 0.1, 0.65, 0.03], axisbg=axcolor)
axhre = axes([0.15, 0.15, 0.65, 0.03], axisbg=axcolor)

shte = Slider(axhte, 'hte', 0.1, 30.0, valinit=1)
shre = Slider(axhre, 'hre', 0.1, 10.0, valinit=1)

def update(val):
    k = 20 * hte * shte.val 
    n4 = 10 * hre * shre.val

    y= k + n4 * d + t + w4 + 8

    line.set_ydata(y)    
    ax.set_ylim(y.min(), y.max())  
    draw()

shte.on_changed(update)
shre.on_changed(update)

show()
</snippet></ROW><ROW><id>11070311</id><snippet>clean</snippet></ROW><ROW><id>11070311</id><snippet>class Your_form(forms.ModelForm):
  field_integer = forms.IntegerField()
  field_boolean = forms.BooleanField()

  def __init__(self, *args, **kwargs):
    option = kwargs["option"]
    if option == "integer":
      field_boolean.widget = field_boolean.hidden_widget()
    else:
      field_integer.widget = field_integer.hidden_widget()
    super(Your_form, self).__init__(*args, **kwargs)
</snippet></ROW><ROW><id>11070311</id><snippet>option = 'bool'
form = Your_form(option=option)
</snippet></ROW><ROW><id>11070320</id><snippet>def convert(s):
    try:
        return s.decode('latin-1').encode('utf8')
    except AttributeError:
        return s
</snippet></ROW><ROW><id>11070320</id><snippet>row = map(convert, row) # or a compr if you prefer that
</snippet></ROW><ROW><id>11070320</id><snippet>int</snippet></ROW><ROW><id>11070455</id><snippet>from gi.repository import Gtk
from gi.repository import Gdk
from gi.repository import GObject
from gi.repository import GLib
from gi.repository import WebKit
import threading
import time

# Use threads                                       
GLib.threads_init()

class App(object):
    def __init__(self):
        window = Gtk.Window()
        webView = WebKit.WebView()
        window.add(webView)
        window.show_all()

        #webView.load_uri('http://www.google.com') # Here it works on main thread

        self.window = window
        self.webView = webView

    def run(self):
        Gtk.main()

    def show_html(self):
        print 'show html'

        time.sleep(1)
        print 'after sleep'

        # Update widget in main thread             
        GLib.idle_add(self.webView.load_uri, 'http://www.google.com') # Here it doesn't work

app = App()

thread = threading.Thread(target=app.show_html)
thread.start()

app.run()
Gtk.main()
</snippet></ROW><ROW><id>11070543</id><snippet>^</snippet></ROW><ROW><id>11070543</id><snippet>**</snippet></ROW><ROW><id>11070543</id><snippet>def simple_pendulum_deriv(x, t, g = 9.81, mu = 0.5): 
    nx = np.zeros(2)
    nx[0] = x[1]
    nx[1] = -(g * np.sin(x[0])) - mu*x[1]
    return nx
</snippet></ROW><ROW><id>11070638</id><snippet>&gt;&gt;&gt; v = open('C:/test/test.csv')
&gt;&gt;&gt; r = csv.reader(v)
&gt;&gt;&gt; row0 = r.next()
&gt;&gt;&gt; row0.append('berry')
&gt;&gt;&gt; print row0
['Name', 'Code', 'berry']
&gt;&gt;&gt; for item in r:
...     item.append(item[0])
...     print item
...     
['blackberry', '1', 'blackberry']
['wineberry', '2', 'wineberry']
['rasberry', '1', 'rasberry']
['blueberry', '1', 'blueberry']
['mulberry', '2', 'mulberry']
&gt;&gt;&gt; 
</snippet></ROW><ROW><id>11070638</id><snippet>next(r)</snippet></ROW><ROW><id>11070638</id><snippet>import csv

with open('C:/test/test.csv','r') as csvinput:
    with open('C:/test/output.csv', 'w') as csvoutput:
        writer = csv.writer(csvoutput, lineterminator='\n')
        reader = csv.reader(csvinput)

        all = []
        row = next(reader)
        row.append('Berry')
        all.append(row)

        for row in reader:
            row.append(row[0])
            all.append(row)

        writer.writerows(all)
</snippet></ROW><ROW><id>11070638</id><snippet>lineterminator</snippet></ROW><ROW><id>11070638</id><snippet>csv.writer</snippet></ROW><ROW><id>11070638</id><snippet>'\r\n'</snippet></ROW><ROW><id>11070638</id><snippet>writerows</snippet></ROW><ROW><id>11070725</id><snippet>site</snippet></ROW><ROW><id>11070725</id><snippet>sitecustomize</snippet></ROW><ROW><id>11070725</id><snippet>__builtins__</snippet></ROW><ROW><id>11070725</id><snippet>for func in [foo, bar, baz]:
    __builtins__[func.__name__] = func
</snippet></ROW><ROW><id>11070725</id><snippet>__builtins__</snippet></ROW><ROW><id>11070725</id><snippet>from myglobalutils import *</snippet></ROW><ROW><id>11070883</id><snippet>main = Program( "main", [ "main.cc" ] )

test = Command( target = "testoutput",
                source = "./main",
                action = "./main &gt; $TARGET" )
Depends( test, main )
</snippet></ROW><ROW><id>11070883</id><snippet>main = Program( "main", [ "main.cc" ] )

test = Command( target = "testoutput",
                source = "./main",
                action = "./main &gt; $TARGET" )
AlwaysBuild( test )
</snippet></ROW><ROW><id>11070883</id><snippet>main = Program( "main", [ "main.cc" ] )

test = Command( target = "testoutput",
                source = "./main",
                action = ["./main &gt; $TARGET",
                          "cat $TARGET"] )
AlwaysBuild( test )
</snippet></ROW><ROW><id>11071028</id><snippet>article.pk</snippet></ROW><ROW><id>11071028</id><snippet>None</snippet></ROW><ROW><id>11071038</id><snippet>r'blog/'</snippet></ROW><ROW><id>11071038</id><snippet>r'blog/(?P&lt;slug&gt;[-\w]+)/$'</snippet></ROW><ROW><id>11071038</id><snippet>url(r'blog/(?P&lt;slug&gt;[-\w]+)/$', 'blog.views.blog', name="blog"),
url(r'blog/', 'blog.views.blog_index', name="blog_index"),
</snippet></ROW><ROW><id>11071045</id><snippet>rr = r"""
    ^         # begin
    ([^,]+)   # match everything but a comma
    (.+?)     # match everything, until next match occurs
    (\S+)     # non-space characters
    $         # end
"""
</snippet></ROW><ROW><id>11071045</id><snippet>import re
rr = re.compile(rr, re.VERBOSE)
print rr.findall("de Batz de Castelmore d'Artagnan, Charles Ogier W.12.345")
# [("de Batz de Castelmore d'Artagnan", ', Charles Ogier ', 'W.12.345')]
</snippet></ROW><ROW><id>11071045</id><snippet>rr = r"""
    ^         # begin
    ([^,]+)   # match everything but a comma
    [,\s]+    # a comma and spaces
    (.+?)     # match everything until the next match
    \s*       # spaces
    ([A-Z])   # an uppercase letter
    \.        # a dot
    (\d+)     # some digits
    \.        # a dot
    (\d+)     # some digits
    \s*       # maybe some spaces or newlines
    $         # end
"""

import re
rr = re.compile(rr, re.VERBOSE)
s = 'Wegner, Sven Ake G.15.10\n' 
print rr.findall(s)
# [('Wegner', 'Sven Ake', 'G', '15', '10')]
</snippet></ROW><ROW><id>11071056</id><snippet>-w</snippet></ROW><ROW><id>11071056</id><snippet>python C:\Python32\Tools\scripts\2to3.py -w neo4j.py
</snippet></ROW><ROW><id>11071543</id><snippet>Thing</snippet></ROW><ROW><id>11071543</id><snippet>Field</snippet></ROW><ROW><id>11071543</id><snippet>Thing</snippet></ROW><ROW><id>11071543</id><snippet>class Field(object):
    def __init__(self, name):
        self.name = name

    def __set__(self, instance, value):
        instance.__dict__.update({self.name: value})

    def __get__(self, instance, owner):
        if instance is None:
            return self
        try:
            return instance.__dict__[self.name]
        except KeyError:
            return None

def make_field(*args):
    def wrapper(cls):
        for arg in args:
            setattr(cls, arg, Field(arg))
        return cls
    return wrapper

@make_field('foo')
class Thing(object):
    pass
</snippet></ROW><ROW><id>11071543</id><snippet>new = Thing()
</snippet></ROW><ROW><id>11071543</id><snippet>new.foo</snippet></ROW><ROW><id>11071543</id><snippet>new.foo</snippet></ROW><ROW><id>11071543</id><snippet>print(new.foo)
# None
</snippet></ROW><ROW><id>11071543</id><snippet>new.foo</snippet></ROW><ROW><id>11071543</id><snippet>'foo'</snippet></ROW><ROW><id>11071543</id><snippet>new</snippet></ROW><ROW><id>11071543</id><snippet>new.foo = 'bar'
print(new.__dict__)
# {'foo': 'bar'}
</snippet></ROW><ROW><id>11071543</id><snippet>Field</snippet></ROW><ROW><id>11071543</id><snippet>Thing.foo</snippet></ROW><ROW><id>11071543</id><snippet>print(Thing.foo)
# &lt;__main__.Field object at 0xb76cedec&gt;
</snippet></ROW><ROW><id>11071543</id><snippet>class Thing(object):
    foo = None
</snippet></ROW><ROW><id>11071647</id><snippet>int</snippet></ROW><ROW><id>11071647</id><snippet>str</snippet></ROW><ROW><id>11071647</id><snippet>if</snippet></ROW><ROW><id>11071647</id><snippet>if (original[3] == "1"):
    print "working"
</snippet></ROW><ROW><id>11071647</id><snippet>'0001'</snippet></ROW><ROW><id>11071647</id><snippet>type(original[3])
str

type(1)
int
</snippet></ROW><ROW><id>11071742</id><snippet>import numpy as np

a = np.arange(8*6*3).reshape((8, 6, 3))
l = np.array([[0,0],[0,1],[1,1]]) #an array of indexes to array "a"
b = np.array([[0,0,5],[0,1,0],[1,1,3]])

a[tuple(l.T)] = b
print(a[0,0])
# [0 0 5]

print(a[0,1])
# [0 1 0]

print(a[1,1])
# [1 1 3]
</snippet></ROW><ROW><id>11071742</id><snippet>a[l] = b</snippet></ROW><ROW><id>11071742</id><snippet>a[0,0,1] = [0,0,5]
a[0,1,1] = [0,1,0]
</snippet></ROW><ROW><id>11071742</id><snippet>b</snippet></ROW><ROW><id>11071742</id><snippet>ValueError: array is not broadcastable to correct shape
</snippet></ROW><ROW><id>11071742</id><snippet>l</snippet></ROW><ROW><id>11071742</id><snippet>In [50]: tuple(l.T)
Out[50]: (array([0, 0, 1]), array([0, 1, 1]))
</snippet></ROW><ROW><id>11071742</id><snippet>zip(*l)</snippet></ROW><ROW><id>11071742</id><snippet>tuple(l.T)</snippet></ROW><ROW><id>11071880</id><snippet>import re
from unicodedata import normalize

_punct_re = re.compile(r'[\t !"#$%&amp;\'()*\-/&lt;=&gt;?@\[\\\]^_`{|},.]+')

def slugify(text, delim=u'-'):
    """Generates an slightly worse ASCII-only slug."""
    result = []
    for word in _punct_re.split(text.lower()):
        word = normalize('NFKD', word).encode('ascii', 'ignore')
        if word:
            result.append(word)
    return unicode(delim.join(result))
</snippet></ROW><ROW><id>11071902</id><snippet>data[0]=hi
data[1]=hello
data[2]=how
data[3]=to
data[4]=hello
data[5]=python
data[6]=format
data[7]=computer
data[8]=python
data[9]=good programming language
</snippet></ROW><ROW><id>11071902</id><snippet>data[0][0]=hi
data[0][1]=hello
data[0][2]=how
data[0][3]=to

data[1][0]=hello
data[1][1]=python
data[1][2]=format
data[1][3]=computer
data[1][4]=python
data[1][5]=good programming language
</snippet></ROW><ROW><id>11071981</id><snippet>Occupant</snippet></ROW><ROW><id>11071981</id><snippet>Room</snippet></ROW><ROW><id>11071981</id><snippet>Occupant</snippet></ROW><ROW><id>11071981</id><snippet>Room</snippet></ROW><ROW><id>11071981</id><snippet>Occupant</snippet></ROW><ROW><id>11071981</id><snippet>Room</snippet></ROW><ROW><id>11071981</id><snippet>Occupant</snippet></ROW><ROW><id>11071981</id><snippet>Room</snippet></ROW><ROW><id>11071981</id><snippet>class Room:
    def __init__(self, building, floor, number):
        self.building = building
        self.floor = floor
        self.number = number
    def __str__(self):
        return (str(self.building)+'.'+str(self.floor)+'.'+str(self.number))

class Occupant:
    def __init__(self, familyname, givenname, room):
        self.familyname = familyname
        self.givenname = givenname
        self.room = room

    def __str__(self):
        return '{f}, {g} -- {r}'.format(f = self.familyname, g = self.givenname, r = self.room)

room = Room('Building', 'Floor', 'Num')
occ = Occupant('Family', 'Given', room)
print(occ)
# Family, Given -- Building.Floor.Num
</snippet></ROW><ROW><id>11072201</id><snippet>set</snippet></ROW><ROW><id>11072201</id><snippet>dict</snippet></ROW><ROW><id>11072201</id><snippet>d = {}
d[a] = a
retrieved_a = d[b]
</snippet></ROW><ROW><id>11072803</id><snippet>In [1]: s1 = "1\n2\n\n3\n\n\n4\n\n\n\n5\n\n\n\n\n6"

In [2]: s1
Out[2]: '1\n2\n\n3\n\n\n4\n\n\n\n5\n\n\n\n\n6'

In [3]: s1.splitlines()
Out[3]: ['1', '2', '', '3', '', '', '4', '', '', '', '5', '', '', '', '', '6']

In [4]: [elem for elem in s1.splitlines() if elem]
Out[4]: ['1', '2', '3', '4', '5', '6']
</snippet></ROW><ROW><id>11072866</id><snippet>import threading, cherrypy
from cherrypy import expose

class thread1(threading.Thread):
    def run(self):
        #code for script 1 goes here

class thread2(threading.Thread):
    def run(self):
        #code for script 2 goes here

t1 = thread1()
t2 = thread2()

t1.start()
t2.start()

@expose
def check(self):
    if t1.isAlive() and t2.isAlive():
        return "1"
    return "0"
</snippet></ROW><ROW><id>11072924</id><snippet>rem Configure the environment for 64-bit builds.
rem Use "vcvars32.bat" for a 32-bit build.
"C:\Program Files (x86)\Microsoft Visual Studio 9.0\VC\bin\vcvars64.bat"

rem Convince setup.py to use the SDK tools.
set MSSdk=1
set DISTUTILS_USE_SDK=1
</snippet></ROW><ROW><id>11072924</id><snippet>python setup.py install</snippet></ROW><ROW><id>11073259</id><snippet>7z</snippet></ROW><ROW><id>11073259</id><snippet>C:\Program Files\7zip\7z.exe</snippet></ROW><ROW><id>11073259</id><snippet>python</snippet></ROW><ROW><id>11073259</id><snippet>zip_file_name</snippet></ROW><ROW><id>11073259</id><snippet>C:\Windows\System32</snippet></ROW><ROW><id>11073259</id><snippet>zip_file_name</snippet></ROW><ROW><id>11073565</id><snippet>os.getcwd()</snippet></ROW><ROW><id>11073565</id><snippet>open</snippet></ROW><ROW><id>11073565</id><snippet>os.chdir</snippet></ROW><ROW><id>11073643</id><snippet>{
    "_id" : 1,
    "entry_date" : ISODate("2011-01-01T05:00:00Z"),
    "title" : "A love supreme",
    "category" : "music",
    "tags" : [
        "jazz",
        "American"
    ]
}
</snippet></ROW><ROW><id>11073643</id><snippet>{
    "_id" : 1,
    "entry_date" : ISODate("2011-01-01T05:00:00Z"),
    "title" : "A love supreme",
    "tags" : [
        "music",
        "American",
        "jazz"
    ]
}
</snippet></ROW><ROW><id>11073643</id><snippet>find</snippet></ROW><ROW><id>11073643</id><snippet>db.items.find({entry_date:{$gt:new Date(2011,0,1)},
                tags:{$in:["rap","classical"]}})
</snippet></ROW><ROW><id>11073643</id><snippet>category:"music"</snippet></ROW><ROW><id>11073643</id><snippet>db.items.find({entry_date:{$gt:new Date(2011,0,1)}, 
               tags:"music",tags:{$in:["rap","classical"]}})
</snippet></ROW><ROW><id>11073758</id><snippet>pip</snippet></ROW><ROW><id>11073758</id><snippet>pythonx.x-dev</snippet></ROW><ROW><id>11073962</id><snippet>df.groupby(df.index.map(lambda t: t.minute))
</snippet></ROW><ROW><id>11073962</id><snippet>df.groupby([df.index.map(lambda t: t.minute), 'Source'])
</snippet></ROW><ROW><id>11074037</id><snippet>ListCtrl</snippet></ROW><ROW><id>11074037</id><snippet>ListCtrl</snippet></ROW><ROW><id>11074037</id><snippet>DeleteAllItems()</snippet></ROW><ROW><id>11074037</id><snippet>ClearAll()</snippet></ROW><ROW><id>11074368</id><snippet># simplified example from the tutorial
import gtk 

def on_match_selected(completion, treemodel, treeiter):
  print treemodel[treeiter][completion.get_text_column()]

urls = [ 
    'http://www.google.com',
    'http://www.google.com/android',
    'http://www.greatstuff.com',
    'http://www.facebook.com',
    ]   
liststore = gtk.ListStore(str)
for s in urls:
    liststore.append([s])

completion = gtk.EntryCompletion()
completion.set_model(liststore)
completion.set_text_column(0)

completion.connect('match-selected', on_match_selected)

entry = gtk.Entry()
entry.set_completion(completion)

# boilerplate
window = gtk.Window()
window.add(entry)

window.connect('destroy', lambda w: gtk.main_quit())
window.show_all()
gtk.main()
</snippet></ROW><ROW><id>11074422</id><snippet>#include &lt;stdio.h&gt;
#include &lt;stdlib.h&gt;
#include &lt;unistd.h&gt;
#include &lt;iostream&gt;

int main(void)
{
  std::cout &lt;&lt; "Real user " &lt;&lt; getuid() &lt;&lt; std::endl;
  std::cout &lt;&lt; "Effective user " &lt;&lt; geteuid() &lt;&lt; std::endl;

  setregid(getegid(), getegid());
  setreuid(geteuid(), geteuid());

  std::cout &lt;&lt; "Real user " &lt;&lt; getuid() &lt;&lt; std::endl;
  std::cout &lt;&lt; "Effective user " &lt;&lt; geteuid() &lt;&lt; std::endl;

  execl("/usr/bin/python2.6", "/usr/bin/python2.6", "test.py", NULL);
}
</snippet></ROW><ROW><id>11074475</id><snippet>valeurs = doc.getElementsByTagName("providers").item(0)
element = doc.createElement("provider")
valeurs.appendChild(element)
</snippet></ROW><ROW><id>11074556</id><snippet>Random</snippet></ROW><ROW><id>11074556</id><snippet>myrandom = random.Random(myseed)
</snippet></ROW><ROW><id>11074556</id><snippet>random</snippet></ROW><ROW><id>11074556</id><snippet>Random</snippet></ROW><ROW><id>11074556</id><snippet>myrandom</snippet></ROW><ROW><id>11074621</id><snippet>directory</snippet></ROW><ROW><id>11074621</id><snippet>environment</snippet></ROW><ROW><id>11074840</id><snippet>QImage.load</snippet></ROW><ROW><id>11074840</id><snippet>QImage.loadFromData</snippet></ROW><ROW><id>11074886</id><snippet>import os
def file_exists(fname):
    try:
        os.stat(fname)
        return True
    except OSError:
        return False


if file_exists('/usr/bin/zypper'):
    ... # do the SUSE case
elif file_exists('/usr/bin/apt-get'):
    ... # do the Debian/Ubuntu case
elif file_exists('/usr/bin/yum'):
    ... # do the Red Hat case
else:
    raise OSError, "cannot find a usable package manager"
</snippet></ROW><ROW><id>11074886</id><snippet>dpkg</snippet></ROW><ROW><id>11074886</id><snippet>/var/lib/dpkg</snippet></ROW><ROW><id>11074886</id><snippet>dpkg</snippet></ROW><ROW><id>11074886</id><snippet>apt-get</snippet></ROW><ROW><id>11074886</id><snippet>apt-get</snippet></ROW><ROW><id>11074886</id><snippet>alien</snippet></ROW><ROW><id>11074886</id><snippet>rpm</snippet></ROW><ROW><id>11074886</id><snippet>dpkg</snippet></ROW><ROW><id>11074886</id><snippet>rpm</snippet></ROW><ROW><id>11074976</id><snippet>  (red_percentage &gt; ((blue_percentage / 4.35)-1) and 
</snippet></ROW><ROW><id>11074976</id><snippet>)</snippet></ROW><ROW><id>11074976</id><snippet>\</snippet></ROW><ROW><id>11074976</id><snippet>cond1 = blue_percentage &gt; (red_percentage * 0.49)
cond2 = red_percentage &lt; ((blue_percentage / 1.44) + 1)
cond3 = red_percentage &gt; ((blue_percentage / 4.35) - 1)

if (cond1 and cond2 and cond3 and 
    (blue_decimal &gt; green_decimal) and  
    (red_decimal &gt; green_decimal)):
    # do stuff ...
</snippet></ROW><ROW><id>11074976</id><snippet>( )</snippet></ROW><ROW><id>11074976</id><snippet>\</snippet></ROW><ROW><id>11075024</id><snippet>sorted(persons.values(), key=lambda item: item[2])
</snippet></ROW><ROW><id>11075024</id><snippet>list</snippet></ROW><ROW><id>11075024</id><snippet>dict</snippet></ROW><ROW><id>11075200</id><snippet>import soundcloud

client = soundcloud.Client(client_id='MY_CLIENT_ID',
                           client_secret='MY_CLIENT_SECRET',
                           redirect_uri='MY_REDIRECT_URI')
print client.authorize_url()

# visit authorization code in browser, grant access and copy and paste "code" param

code = 'MY_CODE'
access_token = client.exchange_token(code)

user = client.get('/me')
print user.username

# prints 'Paul Osman'
</snippet></ROW><ROW><id>11075200</id><snippet>exchange_token()</snippet></ROW><ROW><id>11075200</id><snippet>exchange_token()</snippet></ROW><ROW><id>11075200</id><snippet>access_token</snippet></ROW><ROW><id>11075200</id><snippet>scope</snippet></ROW><ROW><id>11075200</id><snippet>access_token = client.exchange_token('YOUR_CODE')
token = access_token.access_token
</snippet></ROW><ROW><id>11075200</id><snippet>access_token = client.exchange_token('YOUR_CODE')
print access_token.fields()
</snippet></ROW><ROW><id>11075484</id><snippet>KMeans</snippet></ROW><ROW><id>11075484</id><snippet>predict</snippet></ROW><ROW><id>11075484</id><snippet>MiniBatchKMeans</snippet></ROW><ROW><id>11075484</id><snippet>partial_fit</snippet></ROW><ROW><id>11075589</id><snippet>join</snippet></ROW><ROW><id>11075589</id><snippet>&gt;&gt;&gt; import itertools
&gt;&gt;&gt; a = ['A', 'B']
&gt;&gt;&gt; b = ['D', 'E', 'F']
&gt;&gt;&gt; print ', '.join(''.join(x) for x in itertools.product(a, b))
AD, AE, AF, BD, BE, BF
</snippet></ROW><ROW><id>11075589</id><snippet>itertools</snippet></ROW><ROW><id>11075589</id><snippet>&gt;&gt;&gt; print ', '.join(x + y for x in a for y in b)
</snippet></ROW><ROW><id>11075773</id><snippet>new_worker_thread = worker()
</snippet></ROW><ROW><id>11075849</id><snippet>index.html</snippet></ROW><ROW><id>11075849</id><snippet>  [...]
  File "C:\Users\CG\Documents\udacity\contract\main.py", line 71, in MainHandler
    template = jinja_environment.get_template('index.html')
  [...]
  File "C:\Program Files (x86)\Google\google_appengine\lib\jinja2\jinja2\loaders.py", line 169, in get_source
    contents = f.read().decode(self.encoding)
UnicodeDecodeError: 'utf8' codec can't decode byte 0x96 in position 3403: unexpected code byte
</snippet></ROW><ROW><id>11075874</id><snippet>conn.escape_string()
</snippet></ROW><ROW><id>11075898</id><snippet>for field in Third._meta.fields
  print field.name
</snippet></ROW><ROW><id>11076153</id><snippet>for</snippet></ROW><ROW><id>11076153</id><snippet>csv</snippet></ROW><ROW><id>11076153</id><snippet>[1:-1]</snippet></ROW><ROW><id>11076153</id><snippet>float_list</snippet></ROW><ROW><id>11076153</id><snippet>csv</snippet></ROW><ROW><id>11076153</id><snippet>with open('unemp.csv', 'rb') as data:
    rows = csv.reader(data)
    next(rows) #Skip the headers.
    floats = [[float(item) for number, item in enumerate(row) if item and (1 &lt;= number &lt;= 12)] for row in rows]

print(floats)
</snippet></ROW><ROW><id>11076153</id><snippet>with</snippet></ROW><ROW><id>11076153</id><snippet>csv.reader</snippet></ROW><ROW><id>11076153</id><snippet>Year</snippet></ROW><ROW><id>11076153</id><snippet>Annual</snippet></ROW><ROW><id>11076153</id><snippet>enumerate()</snippet></ROW><ROW><id>11076153</id><snippet>0</snippet></ROW><ROW><id>11076153</id><snippet>Year</snippet></ROW><ROW><id>11076153</id><snippet>13</snippet></ROW><ROW><id>11076153</id><snippet>Annual</snippet></ROW><ROW><id>11076153</id><snippet>csv</snippet></ROW><ROW><id>11076153</id><snippet>quoting</snippet></ROW><ROW><id>11076153</id><snippet>csv.reader()</snippet></ROW><ROW><id>11076153</id><snippet>csv.QUOTE_NONNUMERIC</snippet></ROW><ROW><id>11076153</id><snippet>with open('unemp.csv', 'rb') as data:
    rows = csv.reader(data, quoting=csv.QUOTE_NONNUMERIC)
    next(rows) #Skip the headers.
    floats = [[item for number, item in enumerate(row) if item and (1 &lt;= number &lt;= 12)] for row in rows]

print(floats)
</snippet></ROW><ROW><id>11076475</id><snippet>&gt;&gt;&gt; import itertools
&gt;&gt;&gt; 
&gt;&gt;&gt; d = {1:2, 2:3, 3:4}
&gt;&gt;&gt; 
&gt;&gt;&gt; for k0, k1 in itertools.combinations(d,2):
...     print 'compare', k0, k1
... 
compare 1 2
compare 1 3
compare 2 3
</snippet></ROW><ROW><id>11076475</id><snippet>sorted(d)</snippet></ROW><ROW><id>11076728</id><snippet>parsed</snippet></ROW><ROW><id>11076728</id><snippet>options</snippet></ROW><ROW><id>11077916</id><snippet>pip install haystack</snippet></ROW><ROW><id>11077916</id><snippet>pip install django-haystack</snippet></ROW><ROW><id>11078763</id><snippet>exec</snippet></ROW><ROW><id>11078763</id><snippet>print()</snippet></ROW><ROW><id>11078763</id><snippet>import sys

def run(filename):
    with open(filename) as f:
        for line in f:
            print "&gt;&gt;&gt; ", line
            exec line

if __name__ == "__main__":
    try:
        run(sys.argv[1])
    except KeyError:
        print "You should pass one filename as parameter."
</snippet></ROW><ROW><id>11079590</id><snippet>import numpy
from scipy import signal

# Set up the inputs
a = numpy.random.randn(100, 200)
a[a&lt;0] = 0
a[a&gt;0] = 255

b = numpy.random.randn(20, 20)
b[b&lt;0] = 0
b[b&gt;0] = 255

# put b somewhere in a
a[37:37+b.shape[0], 84:84+b.shape[1]] = b

# Now the actual solution...

# Set the black values to -1
a[a==0] = -1
b[b==0] = -1

# and the white values to 1
a[a==255] = 1
b[b==255] = 1

max_peak = numpy.prod(b.shape)

# c will contain max_peak where the overlap is perfect
c = signal.correlate(a, b, 'valid')

overlaps = numpy.where(c == max_peak)

print overlaps
</snippet></ROW><ROW><id>11079590</id><snippet>(array([37]), array([84]))</snippet></ROW><ROW><id>11079590</id><snippet>scipy.signal.fftconvolve</snippet></ROW><ROW><id>11079590</id><snippet>flipud</snippet></ROW><ROW><id>11079590</id><snippet>fliplr</snippet></ROW><ROW><id>11079590</id><snippet>c = signal.fftconvolve(a, numpy.fliplr(numpy.flipud(b)), 'valid')
</snippet></ROW><ROW><id>11079590</id><snippet>In [5]: timeit c = signal.fftconvolve(a, numpy.fliplr(numpy.flipud(b)), 'valid')
100 loops, best of 3: 6.78 ms per loop

In [6]: timeit c = signal.correlate(a, b, 'valid')
10 loops, best of 3: 151 ms per loop
</snippet></ROW><ROW><id>11079602</id><snippet>def _upload(self, filename):
    fp = StringIO()
    zipped = zipfile.ZipFile(fp, 'w', zipfile.ZIP_DEFLATED)
    zipped.write(filename)
    zipped.close()
    try:
        return self._execute(Command.UPLOAD_FILE, 
                        {'file': base64.encodestring(fp.getvalue())})['value']
    except WebDriverException as e:
        if "Unrecognized command: POST" in e.__str__():
            return filename
        elif "Command not found: POST" in e.__str__():
            return filename
        else:
            raise e
</snippet></ROW><ROW><id>11079645</id><snippet>SHOW TABLES</snippet></ROW><ROW><id>11079645</id><snippet>SELECT tablename FROM pg_tables WHERE schemaname = 'public'</snippet></ROW><ROW><id>11079645</id><snippet>SELECT name FROM sqlite_master WHERE type = 'table'</snippet></ROW><ROW><id>11079645</id><snippet>SELECT Distinct TABLE_NAME FROM information_schema.TABLES</snippet></ROW><ROW><id>11079645</id><snippet>SELECT table_name FROM all_tables</snippet></ROW><ROW><id>11079772</id><snippet>def func(bla, alba):
    pass
func = decorator_func(aaa, bar)(func)
</snippet></ROW><ROW><id>11079772</id><snippet>def func(bla, alba):
    pass
decorator = decorator_func(aaa, bar)
func = decorator(func)
</snippet></ROW><ROW><id>11079772</id><snippet>decorator_func</snippet></ROW><ROW><id>11079772</id><snippet>class prepend_two_arguments:
    def __init__(self, a, b):
        self.a = a
        self.b = b

    def __call__(self, f):
        def wrapped_function(*args, **kwargs):
            return f(self.a, self.b, *args, **kwargs)
        return wrapped_function

@prepend_two_arguments(1,2)
def f(a, b, c):
    return a+b+c
print(f(3)) # 6
</snippet></ROW><ROW><id>11079772</id><snippet>def add_to_result(x):
    def decorator(fn):
        def wrapped_function(*args, **kwargs):
            return fn(*args, **kwargs)+x
        return wrapped_function
    return decorator

@add_to_result(3)
def my_func(a, b):
    return a+b
print(my_func(1,2)) # 6
</snippet></ROW><ROW><id>11079854</id><snippet>[x]</snippet></ROW><ROW><id>11079854</id><snippet>lol[2][0]
</snippet></ROW><ROW><id>11080062</id><snippet>post_save</snippet></ROW><ROW><id>11080062</id><snippet>created</snippet></ROW><ROW><id>11080062</id><snippet>instance</snippet></ROW><ROW><id>11080062</id><snippet>def my_callback(sender, **kwargs):
    if kwargs['created']:
        print('Instance is new')
</snippet></ROW><ROW><id>11080181</id><snippet>--extra-index-url</snippet></ROW><ROW><id>11080181</id><snippet>--extra-index-url http://pypi.pinaxproject.com
--extra-index-url http://pypi2.pinaxproject.com
</snippet></ROW><ROW><id>11080181</id><snippet>--index-url</snippet></ROW><ROW><id>11080181</id><snippet>--extra-index-url</snippet></ROW><ROW><id>11080181</id><snippet>--index-url</snippet></ROW><ROW><id>11080510</id><snippet>r.text</snippet></ROW><ROW><id>11080510</id><snippet>oauth_token</snippet></ROW><ROW><id>11080510</id><snippet>oauth_token_secret</snippet></ROW><ROW><id>11080510</id><snippet>https://vimeo.com/oauth/authorize?oauth_token=THE_OAUTH_TOKEN_YOU_JUST_RECEIVED</snippet></ROW><ROW><id>11080510</id><snippet>oauth_token</snippet></ROW><ROW><id>11080510</id><snippet>oauth_verifier</snippet></ROW><ROW><id>11080510</id><snippet>http://stage.bahai.us/apps/terrace/vimeo-callback?oauth_token=a9fb93ebef0fb42cbb96c92ff917b7ea&amp;oauth_verifier=c7afdb2b65c1d77e0cf09687ddc5a8d5</snippet></ROW><ROW><id>11080510</id><snippet>req.sign_request(signature_method, consumer, token)</snippet></ROW><ROW><id>11080510</id><snippet>https://vimeo.com/oauth/access_token</snippet></ROW><ROW><id>11080804</id><snippet>self.users.update({"user_id": event['userid']}, {'$addToSet': {'campaigns': UserCampaigns[i]}})
</snippet></ROW><ROW><id>11081727</id><snippet>wx.lib.mixins.listctrl.ListCtrlAutoWidthMixin</snippet></ROW><ROW><id>11081727</id><snippet>wx.lib.mixins.listctrl.ListCtrlAutoWidthMixin</snippet></ROW><ROW><id>11081727</id><snippet>wx.ListCtrl</snippet></ROW><ROW><id>11081727</id><snippet>__init__</snippet></ROW><ROW><id>11081727</id><snippet>__init__</snippet></ROW><ROW><id>11081727</id><snippet>setResizeColumn</snippet></ROW><ROW><id>11081831</id><snippet>About</snippet></ROW><ROW><id>11081831</id><snippet>setMenuRole</snippet></ROW><ROW><id>11081831</id><snippet>menuRole</snippet></ROW><ROW><id>11081831</id><snippet>int main(int argc, char *argv[])
{
    QApplication a(argc, argv);

    a.setApplicationVersion(...);
    a.setOrganizationName(...);
    a.setOrganizationDomain(...);
    a.setApplicationName(...);

    MainWidget w; // MainWidget is your widget class

    QMessageBox * aboutBox = new QMessageBox(&amp;w);
    QImage img(":/images/youricon.png");
    aboutBox-&gt;setIconPixmap(QPixmap::fromImage(
        img.scaled(128, 128, Qt::KeepAspectRatio, Qt::SmoothTransformation)));
    QString txt;
    txt = txt.fromUtf8(
            "fooapp %1\nCopyright \xC2\xA9 2012 Ed Hedges\n"
            "Licensed under the terms of ....");
    txt = txt.arg(a.applicationVersion());
    aboutBox-&gt;setText(txt);

    QMenuBar menu;
    QMenu * submenu = menu.addMenu("Help");
    QAction * about = submenu-&gt;addAction("About", aboutBox, SLOT(exec()));
    about-&gt;setMenuRole(QAction::AboutRole);

    w.show();

    return a.exec();
} 
</snippet></ROW><ROW><id>11082005</id><snippet>x = 0 # initialize the score to zero before the main loop
while True:

    ...

    elif a.lower() == 's' and random1 == random2:
        x += 10 # increment the score
        print("Well done. Your current score is {0} points".format(x))
</snippet></ROW><ROW><id>11082005</id><snippet>from random import *
x = 0
while True:
    random1 = randint(1,20)
    random2 = randint(1,20)
    print("h = higher, l = lower, s = same, q = quit")
    print(random1)
    a = input().lower()
    if a == 'q':
        break

    print(random2)

    if ((a == 'h' and random1 &lt; random2) or
        (a == 'l' and random1 &gt; random2) or
        (a == 's' and random1 == random2)):
        x += 10
        print("Well done. Your current score is: {0}".format(x))
    else:
        print("Loser")
</snippet></ROW><ROW><id>11082397</id><snippet>from BeautifulSoup import BeautifulSoup

def getPrintUnicode(soup):

    body=''
    if isinstance(soup, unicode):
        soup = soup.replace(''',"'")
        soup = soup.replace('"','"')
        soup = soup.replace(' ',' ')
        soup = soup.replace('&gt;','&gt;')
        soup = soup.replace('&lt;','&lt;')
        body = body + soup
    else:
        if not soup.contents:
            return ''
        con_list = soup.contents
        for con in con_list:
            body = body + getPrintUnicode(con)
    return body

print getPrintUnicode(BeautifulSoup('&lt;td class="ln"&gt;15&lt;/td&gt;&lt;td class="sf3b2"&gt;&lt;code&gt; &lt;/code&gt;&lt;/td&gt;'))
</snippet></ROW><ROW><id>11082397</id><snippet>print int(getPrintUnicode(BeautifulSoup('&lt;td class="ln"&gt;15&lt;/td&gt;&lt;td class="sf3b2"&gt;&lt;code&gt; &lt;/code&gt;&lt;/td&gt;')))
</snippet></ROW><ROW><id>11082412</id><snippet>X-AppEngine-QueueName</snippet></ROW><ROW><id>11082412</id><snippet>X-AppEngine-TaskName</snippet></ROW><ROW><id>11082412</id><snippet>X-AppEngine-TaskRetryCount</snippet></ROW><ROW><id>11082412</id><snippet>X-AppEngine-TaskETA</snippet></ROW><ROW><id>11082466</id><snippet>def get_file_str(filename):
    ID3_tag = ['Title','Artist','Album','Track']
    out = ['','','','']
    with open(filename) as f:
        for line in f:
            try:
                (tag, value) = line.split(':')
                tag = tag.strip('[ ]\n')
                value = value.strip('[ ]\n')
                i = ID3_tag.index(tag)
                out[i] = value
            except Exception as e:
                print('Invalid data:', e)
                return -1
    return out

print(get_file_str('thisboy.song'))
</snippet></ROW><ROW><id>11082466</id><snippet>['This Boy', 'The Beatles', 'Meet The Beatles!', '3']
</snippet></ROW><ROW><id>11082466</id><snippet>desiredTag</snippet></ROW><ROW><id>11082466</id><snippet>value</snippet></ROW><ROW><id>11082466</id><snippet>tag</snippet></ROW><ROW><id>11082466</id><snippet>desiredTag</snippet></ROW><ROW><id>11082580</id><snippet>{% load endless %}</snippet></ROW><ROW><id>11082907</id><snippet>import matplotlib.pyplot as plt

plt.plot(x_A,y_A,'g--', label="plot A")
plt.plot(x_B,y_B,'r-o', label="plot A")
plt.legend()
plt.show()
</snippet></ROW><ROW><id>11082951</id><snippet>itemClicked</snippet></ROW><ROW><id>11082951</id><snippet>def handle_item_clicked(tableItem):
    #the callback, called when an item is clicked, with the item as an argument
    #populate the secondary table in some way

#register the callback with the QTableWidget
yourTableWidget.itemClicked.connect(handle_item_clicked)
</snippet></ROW><ROW><id>11082951</id><snippet>currentItemChanged</snippet></ROW><ROW><id>11083005</id><snippet>Results</snippet></ROW><ROW><id>11083005</id><snippet>CAST</snippet></ROW><ROW><id>11083136</id><snippet>MyClass</snippet></ROW><ROW><id>11083136</id><snippet>MySubclass</snippet></ROW><ROW><id>11083136</id><snippet>TypeError</snippet></ROW><ROW><id>11083136</id><snippet>firstFunc</snippet></ROW><ROW><id>11083136</id><snippet>MyClass</snippet></ROW><ROW><id>11083136</id><snippet>MySubClass</snippet></ROW><ROW><id>11083136</id><snippet>class MyClass(object):
    def uiFunc(self, MainWindow):
        self.attr1 = "foo"
        self.attr2 = "bar"
    def test(self):
        return MySubClass.firstFunc(self, 2, 2)

class MySubClass(MyClass):
    def firstFunc(self, a, b):
        c = a + b
        d = self.secondFunc(c) #removed self from parameter list
        return d

    def secondFunc(self, c):
        d = c / 2
        return d


a=MyClass()
b=MySubClass()
print (b.test())  #this works because b is the right type to pass to first/second func
a.test()   #This doesn't work because a is the wrong type.
</snippet></ROW><ROW><id>11083136</id><snippet>test</snippet></ROW><ROW><id>11083136</id><snippet>MyClass</snippet></ROW><ROW><id>11083136</id><snippet>test</snippet></ROW><ROW><id>11083136</id><snippet>MySubClass</snippet></ROW><ROW><id>11083136</id><snippet>self.secondfunc(self,c)</snippet></ROW><ROW><id>11083136</id><snippet>MySubClass.secondfunc(self,self,c)</snippet></ROW><ROW><id>11083136</id><snippet>self</snippet></ROW><ROW><id>11083136</id><snippet>class MyClass(object):
    def uiFunc(self, MainWindow):
        self.attr1 = "foo"
        self.attr2 = "bar"
    def test(self):
        return firstFunc(self, 2, 2)


def firstFunc(self, a, b):
    c = a + b
    d = secondFunc(self,c) #self from in front of function, now in parameter list
    return d

def secondFunc(self, c):
    d = c / 2
    return d

class MySubClass(MyClass):
    firstFunc=firstFunc
    secondFunc=secondFunc


a=MyClass()
b=MySubClass()
print (b.test())
print (a.test())
</snippet></ROW><ROW><id>11083221</id><snippet>conn = pymysql.connect(host='localhost', user='username', passwd='password', db='database', charset='utf8')
</snippet></ROW><ROW><id>11083264</id><snippet>with open("filename", 'rt', encoding="utf8") as infile:
    text = infile.read()

text = text[:20] + 'inserted text' + text[20:]


with open("filename", 'wt', encoding="utf8") as outfile:
    outfile.write(text)
</snippet></ROW><ROW><id>11083372</id><snippet>&gt;&gt;&gt; import types
&gt;&gt;&gt; help(types.ModuleType)
&gt;&gt;&gt; mymod = types.ModuleType("MyMod")
&gt;&gt;&gt; mymod
&lt;module 'MyMod' (built-in)&gt;
&gt;&gt;&gt;
</snippet></ROW><ROW><id>11083480</id><snippet>PyObject *myObject = (PyObject *)myFrameObject
</snippet></ROW><ROW><id>11083480</id><snippet>PyObject</snippet></ROW><ROW><id>11083480</id><snippet>PyObject_VAR_HEAD</snippet></ROW><ROW><id>11083480</id><snippet>PyObject</snippet></ROW><ROW><id>11083919</id><snippet>Timer</snippet></ROW><ROW><id>11083919</id><snippet>Thread</snippet></ROW><ROW><id>11083919</id><snippet>finished</snippet></ROW><ROW><id>11083919</id><snippet>Timer.cancel</snippet></ROW><ROW><id>11083919</id><snippet>cancel</snippet></ROW><ROW><id>11083919</id><snippet>finished</snippet></ROW><ROW><id>11083919</id><snippet>Thread.is_alive</snippet></ROW><ROW><id>11083919</id><snippet>time.sleep</snippet></ROW><ROW><id>11083919</id><snippet>cancel</snippet></ROW><ROW><id>11083919</id><snippet>&lt;_MainThread(MainThread, started 10872)&gt;
Timer is finished
</snippet></ROW><ROW><id>11084142</id><snippet>list.sort</snippet></ROW><ROW><id>11084142</id><snippet>mylist.sort(key=lambda sl: (sl.count('YES') + sl.count('MAYBE'), -sl.count('NO')), reverse=True)
</snippet></ROW><ROW><id>11084142</id><snippet>key</snippet></ROW><ROW><id>11084142</id><snippet>reverse</snippet></ROW><ROW><id>11084142</id><snippet>key = lambda sl: (sl.count('YES') + sl.count('MAYBE'), -sl.count('NO'))
mylist.sort(lambda p, q: -cmp(key(p), key(q)))
</snippet></ROW><ROW><id>11084142</id><snippet>key</snippet></ROW><ROW><id>11084142</id><snippet>key</snippet></ROW><ROW><id>11084142</id><snippet>def key_sort(seq, cmp=None, key=None, reverse=False):
    if key is not None:
        transform = [(key(x), i, x) for i, x in enumerate(seq)]
        transform.sort(None if cmp is None else lambda (k, _, _), (l, _, _): cmp(k, l))
        seq[:] = [x for _, _, x in transform]
    else:
        seq.sort(cmp)
    if reverse:
        seq.reverse()
</snippet></ROW><ROW><id>11084192</id><snippet>scipy.sparse.linalg.eig</snippet></ROW><ROW><id>11084533</id><snippet>generate</snippet></ROW><ROW><id>11084533</id><snippet>generate</snippet></ROW><ROW><id>11084569</id><snippet>nltk</snippet></ROW><ROW><id>11084569</id><snippet>&gt;&gt;&gt; import nltk
&gt;&gt;&gt; sent_detector = nltk.data.load('tokenizers/punkt/english.pickle')
&gt;&gt;&gt; sent_detector._params.abbrev_types.add('hon')
&gt;&gt;&gt; sent_detector.tokenize(your_text)
['Sir Winston Leonard Spencer-Churchill, KG, OM, CH, TD, PC, DL, FRS, Hon. RA 
(30 November 1874 \xe2\x80\x93 24 January 1965) was a British politician and 
statesman known for his leadership of the United Kingdom during the Second 
World War.', 
'He is widely regarded as one of the great wartime leaders and served as Prime 
Minister twice.', 
'A noted statesman and orator, Churchill was also an officer in the British Army,
a historian, a writer, and an artist.']
</snippet></ROW><ROW><id>11084731</id><snippet>F(x,y)</snippet></ROW><ROW><id>11084731</id><snippet>x</snippet></ROW><ROW><id>11084731</id><snippet>y</snippet></ROW><ROW><id>11084737</id><snippet>import numpy as np

def avg_positive_speed(speed):
    s = np.array(speed)
    positives = s &gt; 0
    if positives.any():
        return s[positives].mean()
    else:
        return 0.


speed = [1., 2., 0., 3.]
print avg_positive_speed(speed)
# prints 2.0

print avg_positive_speed([0., 0.])
# prints 0.0
</snippet></ROW><ROW><id>11085318</id><snippet>import fnmatch
import os

def RecursiveGlob(pathname)
    matches = []
    for root, dirnames, filenames in os.walk(pathname):
        for filename in fnmatch.filter(filenames, '*.c'):
            matches.append(File(os.path.join(root, filename)))

    return matches
</snippet></ROW><ROW><id>11085318</id><snippet># Notice the signature is similar to the SCons Glob() signature,
# look at scons-2.1.0/engine/SCons/Node/FS.py line 1403
def RecursiveGlob(pattern, ondisk=True, source=True, strings=False):
    matches = []
    # Instead of using os.getcwd() consider passing-in a path
    for root, dirnames, filenames in os.walk(os.getcwd()):
        cwd = Dir(root)
        # Glob() returns a list, so using extend() instead of append()
        # The cwd param isnt documented, (look at the code) but its 
        # how you tell SCons what directory to look in.
        matches.extend(Glob(pattern, ondisk, source, strings, cwd))

    return matches
</snippet></ROW><ROW><id>11085318</id><snippet>def MyGlob(pattern, ondisk=True, source=True, strings=False, recursive=False):
    if not recursive:
        return Glob(pattern, ondisk, source, strings)

    matches = []
    # Instead of using os.getcwd() consider passing-in a path
    for root, dirnames, filenames in os.walk(os.getcwd()):
        cwd = Dir(root)
        # Glob() returns a list, so using extend() instead of append()
        # The cwd param isnt documented, (look at the code) but its 
        # how you tell SCons what directory to look in.
        matches.extend(Glob(pattern, ondisk, source, strings, cwd))

    return matches
</snippet></ROW><ROW><id>11085368</id><snippet>    from py2neo import neo4j, cypher

    graph_db = neo4j.GraphDatabaseService()

    def handle_row(row):
        node = row[0]
        # do something with `node` here

    cypher.execute(graph_db, "START z=node(*) RETURN z", row_handler=handle_row)
</snippet></ROW><ROW><id>11085397</id><snippet>&gt;&gt;&gt; example = 0x1234   # Hexadecimal example; 2 bytes, 4660 decimal.
&gt;&gt;&gt; bin(example)       # Show as binary digits
'0b1001000110100'
&gt;&gt;&gt; example &amp; 31       # Grab 5 most significant bits
20
&gt;&gt;&gt; bin(example &amp; 31)  # Same, now represented as binary digits
'0b10100'
&gt;&gt;&gt; (example &gt;&gt; 5) &amp; 31 # Grab the next 5 bits (shift right 5 times first)
17
&gt;&gt;&gt; bin(example &gt;&gt; 5 &amp; 31)
'0b10001'
</snippet></ROW><ROW><id>11085397</id><snippet>&gt;&gt;&gt; bin(31)
'0b11111'
&gt;&gt;&gt; 0b11111
31
&gt;&gt;&gt; example &amp; 0b11111
20
</snippet></ROW><ROW><id>11085397</id><snippet>0b</snippet></ROW><ROW><id>11085699</id><snippet>output</snippet></ROW><ROW><id>11085699</id><snippet>None</snippet></ROW><ROW><id>11086020</id><snippet>if cherrypy.engine.state != cherrypy.engine.states.STARTED:
    return
</snippet></ROW><ROW><id>11086020</id><snippet>class RootServer:

    def __init__(self):
        cherrypy.engine.subscribe('start', self.start)
        cherrypy.engine.subscribe('stop', self.stop)

    def start(self):
        self.running = True

    def stop(self):
        self.running = False

    @cherrypy.expose
    def index(self, **keywords):
        for i in range(0,1000):
            lengthyprocess(i)
            if not self.running:
                return
</snippet></ROW><ROW><id>11086351</id><snippet>PyTime</snippet></ROW><ROW><id>11086351</id><snippet>datetime</snippet></ROW><ROW><id>11086351</id><snippet>from datetime import datetime

list_of_pytimes = [ ... ]
list_of_datetimes = [datetime.fromtimestamp(int(pytime)) for pytime in list_of_pytimes]
# Now this will work
pickle.dumps(list_of_datetimes)
</snippet></ROW><ROW><id>11086492</id><snippet>cat.parent</snippet></ROW><ROW><id>11086492</id><snippet>{% if cat.parent.pk == 1 %}
</snippet></ROW><ROW><id>11086492</id><snippet>1</snippet></ROW><ROW><id>11086492</id><snippet>{% if cat.parent.is_root_node %}
</snippet></ROW><ROW><id>11086699</id><snippet>request</snippet></ROW><ROW><id>11086699</id><snippet>request.db = ...connect...
</snippet></ROW><ROW><id>11086733</id><snippet>class Weapon():
    def __init__(self):
        self.ammoCount = 0
    def fire():
        print "fire!"
    def reload():
        print "reloading!"

class Dog(Animal, Weapon):
    def __init(self, numlegs):
        Animal.__init__(numlegs)

    def bark(self):
        print "Arf!"
</snippet></ROW><ROW><id>11086733</id><snippet>dog = Dog(4)
dog.fire()
</snippet></ROW><ROW><id>11086733</id><snippet>Dog</snippet></ROW><ROW><id>11086733</id><snippet>Animal</snippet></ROW><ROW><id>11086733</id><snippet>Animal</snippet></ROW><ROW><id>11086733</id><snippet>Weapon</snippet></ROW><ROW><id>11086733</id><snippet>Weapon</snippet></ROW><ROW><id>11086733</id><snippet>class Dog(Animal, Weapon):
    def __init(self, numlegs):
        Animal.__init__(numlegs)
        self.weapon = Weapon()

    def bark(self):
        print "Arf!"
</snippet></ROW><ROW><id>11086733</id><snippet>dog.weapon.fire()</snippet></ROW><ROW><id>11086733</id><snippet>Dog</snippet></ROW><ROW><id>11086733</id><snippet>class Dog(Animal):
    def __init(self, numlegs):
        Animal.__init__(numlegs)

    def bark(self):
        print "Arf!"
#some other code maybe
dog = Dog(4)
#more other code
dog.weapon = Weapon()
#even more code
dog.weapon.fire()
</snippet></ROW><ROW><id>11086733</id><snippet>Dog</snippet></ROW><ROW><id>11086733</id><snippet>Duck</snippet></ROW><ROW><id>11086733</id><snippet>Dog</snippet></ROW><ROW><id>11086733</id><snippet>Duck</snippet></ROW><ROW><id>11086767</id><snippet>import sys
sys.path.append("/path/to/local/numpy")
</snippet></ROW><ROW><id>11086832</id><snippet>a:link:after, a:visited:after { content:" [" attr(href) "] "; }
</snippet></ROW><ROW><id>11086832</id><snippet>a.printable:link:after,
a.printable:visited:after {
    content:" [" attr(href) "] ";
}
</snippet></ROW><ROW><id>11086832</id><snippet>&lt;a href="http://stackoverflow.com/" class="printable"&gt;Stack Overflow&lt;/a&gt;
</snippet></ROW><ROW><id>11087050</id><snippet>import sys
print "".join(sorted(sys.stdin.readlines(), key=lambda x:int(x.split()[-1])))
</snippet></ROW><ROW><id>11087050</id><snippet>re</snippet></ROW><ROW><id>11087050</id><snippet>key</snippet></ROW><ROW><id>11087133</id><snippet>i</snippet></ROW><ROW><id>11087133</id><snippet>j</snippet></ROW><ROW><id>11087133</id><snippet>for i in [0, 1, 2]:
    j = i + 3
    results.append(lambda i=i, j=j: nodes[i].value() == nodes[j].value())
</snippet></ROW><ROW><id>11087133</id><snippet>def make_comp_func(i, j):
    return lambda: nodes[i].value() == nodes[j].value()

for i in [0, 1, 2]:
    j = i + 3
    results.append(make_comp_func(i, j))
</snippet></ROW><ROW><id>11087279</id><snippet>\u30ed\u30f3\u30c9\u30f3\u5728\u4f4f</snippet></ROW><ROW><id>11087279</id><snippet>unicode_escape</snippet></ROW><ROW><id>11087279</id><snippet>&gt;&gt;&gt; print '\u30ed\u30f3\u30c9\u30f3\u5728\u4f4f'.decode('unicode_escape')
ロンドン在住
</snippet></ROW><ROW><id>11087279</id><snippet>&gt;&gt;&gt; '\u30ed\u30f3\u30c9\u30f3\u5728\u4f4f'.decode('unicode_escape').encode('utf-8')
'\xe3\x83\xad\xe3\x83\xb3\xe3\x83\x89\xe3\x83\xb3\xe5\x9c\xa8\xe4\xbd\x8f'
</snippet></ROW><ROW><id>11087340</id><snippet>reportlab/platypus/doctemplate.py</snippet></ROW><ROW><id>11087340</id><snippet>def handle_nextPageTemplate(self,pt):
        '''On endPage change to the page template with name or index pt'''
        if type(pt) is StringType:
            # ... in short, set self._nextPageTemplate
        elif type(pt) is IntType:
            # ... in short, set self._nextPageTemplate
        elif type(pt) in (ListType, TupleType):
            #used for alternating left/right pages
            #collect the refs to the template objects, complain if any are bad
            c = PTCycle()
            for ptn in pt:
                found = 0
                if ptn=='*':    #special case name used to short circuit the iteration
                    c._restart = len(c)
                    continue
                for t in self.pageTemplates:
                    if t.id == ptn:
                        c.append(t)
                        found = 1
                if not found:
                    raise ValueError("Cannot find page template called %s" % ptn)
            if not c:
                raise ValueError("No valid page templates in cycle")
            elif c._restart&gt;len(c):
                raise ValueError("Invalid cycle restart position")

            #ensure we start on the first one
            self._nextPageTemplateCycle = c.cyclicIterator()
        else:
            raise TypeError("argument pt should be string or integer or list")
</snippet></ROW><ROW><id>11087340</id><snippet>self._nextPageTemplateCycle</snippet></ROW><ROW><id>11087340</id><snippet>story = []
# ...
# doc.addPageTemplates([...])

story.append(NextPageTemplate(['pageLeft', 'pageRight'])) # this will cycle through left/right/left/right/...

story.append(NextPageTemplate(['firstPage', 'secondPage', '*', 'pageLeft', 'pageRight'])) # this will cycle through first/second/left/right/left/right/...
</snippet></ROW><ROW><id>11087340</id><snippet>del self._nextPageTemplateCycle</snippet></ROW><ROW><id>11087406</id><snippet>day:     {{ countdown|date:"D" }}
hour:    {{ countdown|date:"g" }}
minute:  {{ countdown|date:"i" }}
second:  {{ countdown|date:"s" }}
</snippet></ROW><ROW><id>11087406</id><snippet> new Date({{ countdown|date:"U" }} / 1000);
</snippet></ROW><ROW><id>11087705</id><snippet>global</snippet></ROW><ROW><id>11087705</id><snippet>defaultdict</snippet></ROW><ROW><id>11087705</id><snippet>from collections import defaultdict

oldPriceCompRankDict = defaultdict(list)
</snippet></ROW><ROW><id>11087705</id><snippet>oldPriceCompRankDict</snippet></ROW><ROW><id>11087705</id><snippet>defaultdict</snippet></ROW><ROW><id>11087705</id><snippet>oldPriceCompRankDict</snippet></ROW><ROW><id>11087705</id><snippet>list()</snippet></ROW><ROW><id>11088516</id><snippet>DataOutputStream</snippet></ROW><ROW><id>11088516</id><snippet>clientSocket.noTcpDelay(true);
</snippet></ROW><ROW><id>11089549</id><snippet>#!/usr/bin/env python
import webapp2
from google.appengine.api import urlfetch
import gzip
import StringIO

class Test(webapp2.RequestHandler):
  def get(self):
    self.response.headers['Content-Type'] = 'text/plain'
    url = *this_is_my_url*

    test = urlfetch.fetch(url, deadline=25)


    f = StringIO.StringIO(test.content)
    c = gzip.GzipFile(fileobj=f)
    content = c.read()

    self.response.out.write(content)

app = webapp2.WSGIApplication([
  (r'/', Test)
], debug=True)
</snippet></ROW><ROW><id>11089665</id><snippet>except Exception, e:
    # capture the traceback data
    exc_type, exc_value, exc_traceback = sys.exc_info()
    warningMsg("-14 %s" % str(e))
    warningMsg("Exec Traceback")
    traceback.print_tb(exc_traceback, limit=1, file=sys.stdout)
    warningMsg("Exception")
    traceback.print_exception(exc_type, exc_value, exc_traceback, limit=2, file=sys.stdout)
    raise
</snippet></ROW><ROW><id>11089665</id><snippet>WARNING fabfile.py:76 glassfish_deploy()-14 cannot concatenate 'str' and 'float' objects
WARNING fabfile.py:77 glassfish_deploy()Exec Traceback
File "/home/marzubus/go-agent-scripts/fabfile.py", line 52, in glassfish_deploy    oiled =     gfOil(**kwargs)
WARNING fabfile.py:79 glassfish_deploy()Exception
Traceback (most recent call last):  File "/home/marzubus/go-agent-scripts/fabfile.py",    line 52, in glassfish_deploy
oiled = gfOil(**kwargs)
File "/home/marzubus/go-agent-scripts/oilon/gfdeployer.py", line 37, in __init__
self.tmpDirectory = '/tmp/' + self.domainName + self.time
TypeError: cannot concatenate 'str' and 'float' objects
</snippet></ROW><ROW><id>11089688</id><snippet>&gt;&gt;&gt; from hashlib import md5
&gt;&gt;&gt; h = md5('email@example.com').digest().encode('base64')[:-1]
&gt;&gt;&gt; _
'Vlj/zO5/Dr/aKyJiOLHrbg=='
&gt;&gt;&gt; len(h)
24
</snippet></ROW><ROW><id>11089688</id><snippet>&gt;&gt;&gt; original = md5('email@example.com').digest()
&gt;&gt;&gt; encoded = original.encode('base64')
&gt;&gt;&gt; original == encoded.decode('base64') 
True
</snippet></ROW><ROW><id>11089907</id><snippet>data.csv</snippet></ROW><ROW><id>11089907</id><snippet>from pprint import pprint
import math
import csv

# function to massage each row into desired values
def calc_new_vals(row):
    newQuantity = float(row[2]) + 1.0
    newCompetitiveScore = float(row[1]) + math.log(newQuantity, 100)
    return [ float(row[1]), 
             float(row[2]), 
             newQuantity, 
             float(row[4]), 
             newCompetitiveScore ]

# read data from file and recalculate each row
f = open('./data.csv', 'r')
reader = csv.reader(f)
records = [ calc_new_vals(record) for record in reader ]

# This sorts by the three columns in reverse
# see this page for more: http://wiki.python.org/moin/HowTo/Sorting/
records = sorted(records, key=lambda record: record[3], reverse = True)
records = sorted(records, key=lambda record: record[2], reverse = True)
records = sorted(records, key=lambda record: record[4], reverse = True)

new_records = []
rank = 1
for row in records:
    row.append( rank )
    new_records.append( row )
    rank += 1
pprint(new_records)
</snippet></ROW><ROW><id>11089907</id><snippet>[[20.2147418139502, 20.0, 21.0, 20.8652568117822, 20.87585146131716, 1],
 [19.9412500131875, 13.0, 14.0, 20.4982216893409, 20.51431403102662, 2],
 [16.3402085164562, 6.0, 7.0, 16.729284141648, 16.76275753646333, 3],
 [15.9562389152125, 11.0, 12.0, 16.4769352577916, 16.49582953823631, 4],
 [13.2889788383618, 12.0, 13.0, 13.8285694613856, 13.845950514515218, 5],
 [11.7133173411712, 1.0, 2.0, 11.7133173411712, 11.86383233900319, 6]]
</snippet></ROW><ROW><id>11090207</id><snippet>print 'Content-Type: application/json\n\n'
</snippet></ROW><ROW><id>11090207</id><snippet>import json
text_data = "FOO"
json_data = json.dumps({'text': text_data})
print json_data
# {"text": "FOO"}
</snippet></ROW><ROW><id>11090207</id><snippet>print "callback(%s);" % json_data
# callback({"text": "FOO"});
</snippet></ROW><ROW><id>11090264</id><snippet>ArgumentParser</snippet></ROW><ROW><id>11090264</id><snippet>import argparse

class Q2TAction(argparse.Action):
    def __call__(self, parser, namespace, values, option_string):
        self.query2target = values

parser = argparse.ArgumentParser()
q2taction = parser.add_argument("query2target.bam", action=Q2TAction)
parser.parse_args()

print(q2taction.query2target)
</snippet></ROW><ROW><id>11090530</id><snippet>#!/usr/bin/perl
open(FI,"file.txt");
read(FI,$_,10000000);
close(FI);
@arr = split('--###--');
$cnt=0;
for $c (@arr)
{
    open(FO,"&gt;$cnt.txt");
    print FO $c;
    close(FO);
    $cnt++;
}
</snippet></ROW><ROW><id>11090583</id><snippet>file.size</snippet></ROW><ROW><id>11090583</id><snippet>class Doc(models.Model):
    created_on = models.DateTimeField(auto_now_add=True)
    file = models.FileField(storage=gridfs_storage, upload_to='/')
    file_size = models.PositiveIntegerField()

    def save(self, *args, **kwargs):
        self.file_size = self.file.size
        super(Doc, self).save(*args, **kwargs)
</snippet></ROW><ROW><id>11090583</id><snippet>Doc.objects.all().aggregate(Sum('file_size'))
</snippet></ROW><ROW><id>11090833</id><snippet>FileName = 'a[0][%s].png' % i
pylab.savefig(FileName)
</snippet></ROW><ROW><id>11090960</id><snippet>from django.http import HttpResponse
from netadmin.plugins.templatetags.widgets import render_widget

def ajax_render_data(request, object_id):
    return HttpResponse(render_widget(object_id))
</snippet></ROW><ROW><id>11090960</id><snippet>&lt;div class="widgets-container"&gt;
    {% for widget_settings in widgetsettings.objects.all %}
    &lt;div class="widget-content" id="widget-content-{{ widget_settings.pk }}"&gt;
        not loaded yet
    &lt;/div&gt;
    {% endfor %}
&lt;/div&gt;

&lt;script&gt;
// here we use django to render the ajax urls into an object
// in javascript so we can use it on the client side 
var ajax_urls = {
  {% for widget_settings in widgetsettings.objects.all %}
    "{{ widget_settings.pk }}: "{% url ajax_render_data widget_settings.pk %}"{% if not forloop.last %},{% endif %}
  {% endfor %}
};

// (I'll assume you're using jQuery)
// start the ajax calls when the page is loaded:
$(document).ready(loadWidgets());

function loadWidgets() {
    // loop over the urls we provided from django:
    jQuery.each(ajax_urls, function(widget_id, url) {
        // do the ajax call:
        $.get(url, function(data) {
            // put the content into the widget div:
            $('#widget-content-'+widget_id).html(data);
        });
    });
}
&lt;/script&gt;
</snippet></ROW><ROW><id>11090960</id><snippet>urlpatterns += patterns('netadmin.plugins.ajax_view',
    url(r'^ajax/(?P&lt;object_id&gt;\d+)/$', 'ajax_render_data', name='ajax_render_data'),
)
</snippet></ROW><ROW><id>11091100</id><snippet>session.execute()</snippet></ROW><ROW><id>11091100</id><snippet>connection.execute()</snippet></ROW><ROW><id>11091100</id><snippet>Connection</snippet></ROW><ROW><id>11091100</id><snippet>Session</snippet></ROW><ROW><id>11091100</id><snippet>session.connection()</snippet></ROW><ROW><id>11091142</id><snippet>from itertools import islice

with open(filename) as f:
    first10000 = islice(f, 10000)
</snippet></ROW><ROW><id>11091142</id><snippet>first10000</snippet></ROW><ROW><id>11091142</id><snippet>for x in first10000:
    do_something_with(x)
</snippet></ROW><ROW><id>11091142</id><snippet>list(islice(f, 10000))</snippet></ROW><ROW><id>11091142</id><snippet>range</snippet></ROW><ROW><id>11091142</id><snippet>with open(filename) as f:
    while True:
        next10k = list(islice(f, 10000))  # need list to do len, 3 lines down
        for ln in next10k:
            process(ln)
        if len(next10k) &lt; 10000:
            break
</snippet></ROW><ROW><id>11091172</id><snippet>import urllib2
URL = "https://pdb-services-beta.nipr.com/pdb-xml-reports/scb_xmlclient.cgi"
DATA = 'xmldata=&lt;?xml version="1.0"?&gt;&lt;!DOCTYPE SCB_Request SYSTEM "http://www.nipr.com/html/SCB_XML_Request.dtd"&gt;&lt;SCB_Request Request_Type="Create_Report"&gt;&lt;SCB_Login_Data CustomerID="someuser" Passwd="somepass" /&gt;&lt;SCB_Create_Report_Request Title=""&gt;&lt;Producer_List&gt;&lt;NIPR_Num_List_XML&gt;&lt;NIPR_Num NIPR_Num="8980608" /&gt;&lt;/NIPR_Num_List_XML&gt;&lt;/Producer_List&gt;&lt;/SCB_Create_Report_Request&gt;&lt;/SCB_Request&gt;'
req = urllib2.Request(url=URL, data=DATA)
f = urllib2.urlopen(req)
print f.read()
</snippet></ROW><ROW><id>11091667</id><snippet>./jython -m compileall /Users/owengerig/Downloads/Code\ Downloads/
</snippet></ROW><ROW><id>11091667</id><snippet>try:
    names = os.listdir(dir)
except os.error:
    print "Can't list", dir
    names = []
</snippet></ROW><ROW><id>11091667</id><snippet>        for dir in args:
            if not compile_dir(dir, maxlevels, ddir,
                               force, rx, quiet):
                success = 0
</snippet></ROW><ROW><id>11091738</id><snippet>string = u'#exampleTextInput{ background-color:#ff0000;}\n'
return HttpResponse(string, content_type='text/css')
</snippet></ROW><ROW><id>11091792</id><snippet>main()</snippet></ROW><ROW><id>11091792</id><snippet>confDict</snippet></ROW><ROW><id>11091792</id><snippet>confDict = main()</snippet></ROW><ROW><id>11091792</id><snippet>main()</snippet></ROW><ROW><id>11092043</id><snippet>~/src/myapp</snippet></ROW><ROW><id>11092043</id><snippet>~/src/myapp/setup.py</snippet></ROW><ROW><id>11092043</id><snippet>install_requires</snippet></ROW><ROW><id>11092043</id><snippet>/pypi</snippet></ROW><ROW><id>11092043</id><snippet>  install_requires=[
    'boto',
    'Flask',
    'Werkzeug',
    # and so on
</snippet></ROW><ROW><id>11092043</id><snippet>/pypi</snippet></ROW><ROW><id>11092043</id><snippet>setup.py develop ...</snippet></ROW><ROW><id>11092043</id><snippet>easy_install ...</snippet></ROW><ROW><id>11092043</id><snippet>easy_install</snippet></ROW><ROW><id>11092198</id><snippet>&lt;mess&gt;</snippet></ROW><ROW><id>11092198</id><snippet>&lt;verb&gt;</snippet></ROW><ROW><id>11092198</id><snippet>import xml.etree.ElementTree as ET
the_tree = ET.fromstring('''&lt;class id="1" name="good/bad"&gt;
    &lt;verb&gt;
        &lt;token&gt;like&lt;/token&gt;
        &lt;token&gt;feel&lt;/token&gt;
    &lt;/verb&gt;
    &lt;mess&gt;This is &lt;sugg&gt;not&lt;/sugg&gt; text&lt;/mess&gt;
    &lt;id type="incorrect"&gt;I'm glad to &lt;marker&gt;unsee you&lt;/marker&gt;.&lt;/id&gt;
    &lt;id type="correct"&gt;I'm glad to see you.&lt;/id&gt;
&lt;/class&gt;''')
elems = the_tree.find('./verb').getchildren()
verbs = [verb.text for verb in elems]
# -&gt; ['like', 'feel']
</snippet></ROW><ROW><id>11092198</id><snippet>tree, id_map = ET.XMLID('''&lt;class id="1" name="good/bad"&gt;
    &lt;verb&gt;
        &lt;token&gt;like&lt;/token&gt;
        &lt;token&gt;feel&lt;/token&gt;
    &lt;/verb&gt;
    &lt;mess&gt;This is &lt;sugg&gt;not&lt;/sugg&gt; text&lt;/mess&gt;
    &lt;id type="incorrect"&gt;I'm glad to &lt;marker&gt;unsee you&lt;/marker&gt;.&lt;/id&gt;
    &lt;id type="correct"&gt;I'm glad to see you.&lt;/id&gt;
&lt;/class&gt;''')
elems = id_map['1'].find('verb')
verbs = [verb.text for verb in elems]
</snippet></ROW><ROW><id>11092292</id><snippet>date2num</snippet></ROW><ROW><id>11092292</id><snippet>datetime</snippet></ROW><ROW><id>11092292</id><snippet>matplotlib.dates.datestr2num</snippet></ROW><ROW><id>11092301</id><snippet>$ patch --dry-run &lt; file.diff
</snippet></ROW><ROW><id>11092475</id><snippet>s = "qwerty2012"
var, some_var, another_var = s[:1], s[1:5], s[5:]
</snippet></ROW><ROW><id>11092475</id><snippet>q
wert
y2012
</snippet></ROW><ROW><id>11092590</id><snippet>id</snippet></ROW><ROW><id>11092590</id><snippet>values()</snippet></ROW><ROW><id>11092590</id><snippet>&gt;&gt;&gt; L=[
... {'id':1,'name':'john', 'age':34},
... {'id':1,'name':'john', 'age':34},
... {'id':2,'name':'hanna', 'age':30},
... ]
&gt;&gt;&gt; {v['id']:v for v in L}.values()
[{'age': 34, 'id': 1, 'name': 'john'}, {'age': 30, 'id': 2, 'name': 'hanna'}]
</snippet></ROW><ROW><id>11092590</id><snippet>&gt;&gt;&gt; L=[
... {'id':1,'name':'john', 'age':34},
... {'id':1,'name':'john', 'age':34},
... {'id':2,'name':'hanna', 'age':30},
... ] 
&gt;&gt;&gt; list({v['id']:v for v in L}.values())
[{'age': 34, 'id': 1, 'name': 'john'}, {'age': 30, 'id': 2, 'name': 'hanna'}]
</snippet></ROW><ROW><id>11092590</id><snippet>&gt;&gt;&gt; L=[
... {'id':1,'name':'john', 'age':34},
... {'id':1,'name':'john', 'age':34},
... {'id':2,'name':'hanna', 'age':30},
... ] 
&gt;&gt;&gt; dict((v['id'],v) for v in L).values()
[{'age': 34, 'id': 1, 'name': 'john'}, {'age': 30, 'id': 2, 'name': 'hanna'}]
</snippet></ROW><ROW><id>11092594</id><snippet>from time import sleep
from threading import Thread
queue = []
done = False
num_consumers = 10

def generate():
    #the generator - fill queue with values and set a flag when done
    global queue, done
    for val in permutations(allc, num):
        if len(queue) &gt; 100:
            sleep(0.5)
            continue
        queue.append(val)
    done = True

def consume():
    #the consumer - get a value from the queue and try to login
    global queue, done
    while queue or not done:
        if len(queue) == 0:
            sleep(0.05)
            continue
        try_login(queue.pop())

#create a generator and multiple consumer threads with the respective fcts
generator = Thread(target=generate)
consumers = [Thread(target=consume) for _ in range(num_consumers)]
#start the consumers and the generator
[c.start() for c in consumers]
generator.start()
</snippet></ROW><ROW><id>11092594</id><snippet>queue.pop()</snippet></ROW><ROW><id>11092594</id><snippet>if</snippet></ROW><ROW><id>11092594</id><snippet>pop</snippet></ROW><ROW><id>11092668</id><snippet>csv.reader</snippet></ROW><ROW><id>11092668</id><snippet>opened.tell()</snippet></ROW><ROW><id>11092668</id><snippet>tell()</snippet></ROW><ROW><id>11092675</id><snippet>self</snippet></ROW><ROW><id>11092675</id><snippet>self</snippet></ROW><ROW><id>11092675</id><snippet>age</snippet></ROW><ROW><id>11092675</id><snippet>increment_age</snippet></ROW><ROW><id>11092675</id><snippet>class Human:
    def __init__(self):
        self.age = 0

    def increment_age(self):
        self.age += 1

&gt;&gt;&gt; h = Human()
&gt;&gt;&gt; print h.age
0
&gt;&gt;&gt; h.increment_age()
&gt;&gt;&gt; print h.age
1
</snippet></ROW><ROW><id>11092675</id><snippet>self</snippet></ROW><ROW><id>11092675</id><snippet>self</snippet></ROW><ROW><id>11092675</id><snippet>point1</snippet></ROW><ROW><id>11092675</id><snippet>Human</snippet></ROW><ROW><id>11092675</id><snippet>Human</snippet></ROW><ROW><id>11092675</id><snippet>def fight(self, other_human):
    self.age += 1
    other_human.age -= 1
</snippet></ROW><ROW><id>11092675</id><snippet>&gt;&gt;&gt; h1 = Human()
&gt;&gt;&gt; h2 = Human()
&gt;&gt;&gt; h1.age = 5
&gt;&gt;&gt; h2.age = 3
&gt;&gt;&gt; print h1.age
5
&gt;&gt;&gt; print h2.age
3
&gt;&gt;&gt; h1.fight(h2)
&gt;&gt;&gt; print h1.age
6
&gt;&gt;&gt; print h2.age
2
</snippet></ROW><ROW><id>11092675</id><snippet>h2</snippet></ROW><ROW><id>11092675</id><snippet>other_human</snippet></ROW><ROW><id>11092675</id><snippet>fight</snippet></ROW><ROW><id>11092681</id><snippet>open()</snippet></ROW><ROW><id>11092903</id><snippet>mechanize.Browser().open()</snippet></ROW><ROW><id>11092903</id><snippet>urlopen</snippet></ROW><ROW><id>11092903</id><snippet>urllib2.URLError urlopen connection time out</snippet></ROW><ROW><id>11092903</id><snippet>urlopen</snippet></ROW><ROW><id>11092903</id><snippet>mechanize.Browser().open()</snippet></ROW><ROW><id>11092903</id><snippet>urlopen</snippet></ROW><ROW><id>11093235</id><snippet>geometry</snippet></ROW><ROW><id>11093235</id><snippet>master.geometry("%sx%s+%s+%s" % (FrameSizeX,FrameSizeY,FramePosX,FramePosY))
</snippet></ROW><ROW><id>11093247</id><snippet>pprint.pformat</snippet></ROW><ROW><id>11093247</id><snippet>ds = [{'hello': 'there'}]
logging.debug(pprint.pformat(ds))
</snippet></ROW><ROW><id>11093436</id><snippet>list_of_objects = [Object_1, Object_2, Object_3]
[x.time for x in list_of_objects]
</snippet></ROW><ROW><id>11093731</id><snippet>import re

# this is the same data just copy/pasted from your question
data = """    ahi1
    b/se
ahi 
test    -2.435953
        1.218364
    ahi2
    b/se
ahi 
test    -2.001858
        1.303935"""

# what we're gonna do, is search through it line-by-line
# and parse out the numbers, using regular expressions

# what this basically does is, look for any number of characters
# that aren't digits or '-' [^-\d]  ^ means NOT
# then look for 0 or 1 dashes ('-') followed by one or more decimals
# and a dot and decimals again: [\-]{0,1}\d+\.\d+
# and then the same as first..
pattern = re.compile(r"[^-\d]*([\-]{0,1}\d+\.\d+)[^-\d]*")

results = []
for line in data.split("\n"):
    match = pattern.match(line)
    if match:
        results.append(match.groups()[0])

pairs = []
i = 0
end = len(results)
while i &lt; end - 1:
    pairs.append((results[i], results[i+1]))
    i += 2

for p in pairs:
    print "%s, %s" % (p[0], p[1])
</snippet></ROW><ROW><id>11093731</id><snippet>&gt;&gt;&gt;
-2.435953, 1.218364
-2.001858, 1.303935
</snippet></ROW><ROW><id>11093761</id><snippet>&gt;&gt;&gt; data = {"Bob": {"Age": 20, "Hobby": "Surfing"}}
&gt;&gt;&gt; data["Bob"]["Age"]
20
</snippet></ROW><ROW><id>11093761</id><snippet>class Person:
    def __init__(self, name, age, hobby):
        self.name = name
        self.age = age
        self.hobby = hobby

&gt;&gt;&gt; data = {"Bob": Person("Bob", 20, "Surfing")}
&gt;&gt;&gt; data["Bob"].age
20
</snippet></ROW><ROW><id>11093783</id><snippet>    &lt;table&gt;
        &lt;tr&gt;
        &lt;td&gt;
        &lt;table&gt;
            &lt;th&gt;h1&lt;/th&gt;
            &lt;td&gt;{{ form1.as_table }}&lt;/td&gt;
        &lt;/table&gt;
        &lt;/td&gt;
        &lt;td&gt;
        &lt;table&gt;
            &lt;th&gt;h2&lt;/th&gt;
            &lt;td&gt;{{ form2.as_table }}&lt;/td&gt;
        &lt;/table&gt;
        &lt;/td&gt;
        &lt;td&gt;
        &lt;table&gt;
            &lt;th&gt;h3&lt;/th&gt;
            &lt;td&gt;{{ form3.as_table }}&lt;/td&gt;
        &lt;/table&gt;
        &lt;/td&gt;
        &lt;/tr&gt;
    &lt;/table&gt;
</snippet></ROW><ROW><id>11093785</id><snippet>__metaclass__</snippet></ROW><ROW><id>11093785</id><snippet>__metaclass__</snippet></ROW><ROW><id>11093785</id><snippet>__metaclass__</snippet></ROW><ROW><id>11093785</id><snippet>__metaclass__</snippet></ROW><ROW><id>11093785</id><snippet>__metaclass__</snippet></ROW><ROW><id>11093785</id><snippet>type</snippet></ROW><ROW><id>11093785</id><snippet>__metaclass__</snippet></ROW><ROW><id>11093785</id><snippet>__metaclass__</snippet></ROW><ROW><id>11093785</id><snippet>type</snippet></ROW><ROW><id>11093785</id><snippet>(name, bases, attributes)</snippet></ROW><ROW><id>11093785</id><snippet>class A(object):
    __metaclass__ = MyMeta
    def __init__(self):
        pass
</snippet></ROW><ROW><id>11093785</id><snippet>attrs = {}
attrs['__metaclass__'] = MyMeta
def __init__(self):
    pass
attrs['__init__'] = __init__
A = attrs.get('__metaclass__', type)('A', (object,), attrs)
</snippet></ROW><ROW><id>11093785</id><snippet>type</snippet></ROW><ROW><id>11093785</id><snippet>attrs</snippet></ROW><ROW><id>11093785</id><snippet>__metaclass__</snippet></ROW><ROW><id>11093785</id><snippet>type</snippet></ROW><ROW><id>11093785</id><snippet>__metaclass__</snippet></ROW><ROW><id>11093785</id><snippet>__metaclass__</snippet></ROW><ROW><id>11093785</id><snippet>__metaclass__</snippet></ROW><ROW><id>11093785</id><snippet>__dict__</snippet></ROW><ROW><id>11093785</id><snippet>__dict__</snippet></ROW><ROW><id>11093785</id><snippet>__dict__</snippet></ROW><ROW><id>11093785</id><snippet>__dict__</snippet></ROW><ROW><id>11093785</id><snippet>dict</snippet></ROW><ROW><id>11093785</id><snippet>dict</snippet></ROW><ROW><id>11093785</id><snippet>type</snippet></ROW><ROW><id>11093785</id><snippet>dictproxy</snippet></ROW><ROW><id>11093785</id><snippet>dictproxy</snippet></ROW><ROW><id>11093785</id><snippet>__dict__</snippet></ROW><ROW><id>11093895</id><snippet>[app:XXX]</snippet></ROW><ROW><id>11093895</id><snippet>[app:myapp-dev]</snippet></ROW><ROW><id>11093895</id><snippet>[app:myapp-prod]</snippet></ROW><ROW><id>11093895</id><snippet># settings.ini

[DEFAULT]
foo = bar

[app:myapp-dev]
use = egg:myapp

[app:myapp-prod]
use = egg:myapp

set foo = baz
</snippet></ROW><ROW><id>11093895</id><snippet>env/bin/pserve -n myapp-dev settings.ini
</snippet></ROW><ROW><id>11093895</id><snippet># myapp.ini

[app:myapp-section]
use = egg:myapp

foo = bar

# myapp-dev.ini

[app:main]
use = config:myapp.ini#myapp-section

foo = baz

# myapp-prod.ini

[app:main]
use = config:myapp.ini#myapp-section
</snippet></ROW><ROW><id>11093895</id><snippet>env/bin/pserve myapp-prod.ini
</snippet></ROW><ROW><id>11093918</id><snippet>"{{ STATIC_URL }}boostrap-dropdown.js"
</snippet></ROW><ROW><id>11093918</id><snippet>boostrap</snippet></ROW><ROW><id>11093918</id><snippet>bootstrap</snippet></ROW><ROW><id>11094251</id><snippet>models.py</snippet></ROW><ROW><id>11094251</id><snippet>save()</snippet></ROW><ROW><id>11094251</id><snippet>title</snippet></ROW><ROW><id>11094251</id><snippet>description</snippet></ROW><ROW><id>11094251</id><snippet>keywords</snippet></ROW><ROW><id>11094251</id><snippet>from bs4 import BeautifulSoup
import requests

from django.db import models

class Link(models.Model):
    url = models.URLField(blank=True)
    title = models.CharField(max_length=20, blank=True)
    description = models.TextField(blank=True)
    keywords = models.TextField(blank=True)

    def save(self, *args, **kwargs):
        if self.url and not (self.title or self.keywords or self.description):
            # optionally, use 'html' instead of 'lxml' if you don't have lxml installed
            soup = BeatifulSoup(requests.get(self.url).content, "lxml")
            self.title = soup.title.string
            meta = soup.find_all('meta')
            for tag in meta:
                if 'name' in tag.attrs and tag.attrs['name'].lower() in ['description', 'keywords']:
                    setattr(self, tag.attrs['name'].lower(), tag.attrs['content'])

        super(Link, self).save(*args, **kwargs)
</snippet></ROW><ROW><id>11094251</id><snippet>save()</snippet></ROW><ROW><id>11094251</id><snippet>Link</snippet></ROW><ROW><id>11094294</id><snippet>slices</snippet></ROW><ROW><id>11094294</id><snippet>{% for column in cities | sort | slice(4) -%}
&lt;div class="four columns"&gt;
    {%- for city in column -%}
    &lt;h5&gt;&lt;a href="/city/{{ city.url}}"&gt;{{ city.name }}&lt;/a&gt;
    &lt;span style="float:right;"&gt;({{ city.users_count }})&lt;/span&gt;&lt;/h5&gt;
    {%- endfor -%}
&lt;/div&gt;
{%- endfor %}
</snippet></ROW><ROW><id>11094294</id><snippet>slices</snippet></ROW><ROW><id>11094294</id><snippet>batch</snippet></ROW><ROW><id>11094294</id><snippet>n</snippet></ROW><ROW><id>11094294</id><snippet>n</snippet></ROW><ROW><id>11094307</id><snippet>ReferenceProperty</snippet></ROW><ROW><id>11094407</id><snippet>parameter_storage_class</snippet></ROW><ROW><id>11094407</id><snippet>Request</snippet></ROW><ROW><id>11094407</id><snippet>BaseRequest</snippet></ROW><ROW><id>11094407</id><snippet>dict_storage_class</snippet></ROW><ROW><id>11094432</id><snippet>&gt;&gt;&gt; print '\u84b8\u6c7d\u5730'.decode('unicode-escape')
蒸汽地
</snippet></ROW><ROW><id>11094696</id><snippet>from VideoCapture import Device
cam = Device()
cam.saveSnapshot('image.jpg')
</snippet></ROW><ROW><id>11094752</id><snippet>sudo apt-get install python-dev
</snippet></ROW><ROW><id>11094752</id><snippet>sudo apt-get install libevent-dev
</snippet></ROW><ROW><id>11094936</id><snippet>str.rpartition</snippet></ROW><ROW><id>11094936</id><snippet>.format</snippet></ROW><ROW><id>11094936</id><snippet>lvc@tiamat:~$ python
Python 3.2.3 (default, Apr 23 2012, 23:14:44) 
[GCC 4.7.0 20120414 (prerelease)] on linux2
Type "help", "copyright", "credits" or "license" for more information.
&gt;&gt;&gt; 
</snippet></ROW><ROW><id>11094936</id><snippet>./myscript.py</snippet></ROW><ROW><id>11094936</id><snippet>python myscript.py</snippet></ROW><ROW><id>11094936</id><snippet>#!</snippet></ROW><ROW><id>11094967</id><snippet>json.dumps</snippet></ROW><ROW><id>11094967</id><snippet>json.loads()</snippet></ROW><ROW><id>11095284</id><snippet>O(n^3)</snippet></ROW><ROW><id>11095284</id><snippet>O(n log n)</snippet></ROW><ROW><id>11095284</id><snippet>O(n^2)</snippet></ROW><ROW><id>11095284</id><snippet>O(n * k * iter)</snippet></ROW><ROW><id>11095284</id><snippet>iter&lt;&lt;100</snippet></ROW><ROW><id>11095509</id><snippet>C:/Users/admin/AppData/Roaming/Mozilla/Firefox/Profiles/c1r3g2wi.default
</snippet></ROW><ROW><id>11095763</id><snippet>pinax</snippet></ROW><ROW><id>11095763</id><snippet>virtualenv</snippet></ROW><ROW><id>11095763</id><snippet>pip</snippet></ROW><ROW><id>11095763</id><snippet>pip freeze &gt; requirements.txt</snippet></ROW><ROW><id>11095763</id><snippet>virtualenv</snippet></ROW><ROW><id>11095763</id><snippet>pip -r requirements.txt</snippet></ROW><ROW><id>11095883</id><snippet>list(map(list, product([1, 2, 3], ['a', 'b'])))
</snippet></ROW><ROW><id>11095883</id><snippet>list()</snippet></ROW><ROW><id>11095921</id><snippet>diff</snippet></ROW><ROW><id>11095921</id><snippet>a = range(5) # python list of numpy array
np.diff(a)
</snippet></ROW><ROW><id>11095921</id><snippet>array([1, 1, 1, 1])
</snippet></ROW><ROW><id>11096714</id><snippet>get_initial</snippet></ROW><ROW><id>11096714</id><snippet>class IncidentUpdateView(UpdateView):

    def get_initial(self):
        return { 'value1': 'foo', 'value2': 'bar' }
</snippet></ROW><ROW><id>11096714</id><snippet>initial</snippet></ROW><ROW><id>11096714</id><snippet>class IncidentUpdateView(UpdateView):
    initial = { 'value1': 'foo', 'value2': 'bar' }
</snippet></ROW><ROW><id>11096721</id><snippet>multiprocessing</snippet></ROW><ROW><id>11096811</id><snippet>import re
Variable = "The sun shines, that's fine [not, for, everyone] and if it rains, it Will Be better."
Variable1 = re.sub("\[[^]]*\]", lambda x:x.group(0).replace(',',''), Variable)
</snippet></ROW><ROW><id>11096811</id><snippet>re.sub</snippet></ROW><ROW><id>11096811</id><snippet>var1 = re.sub("re", fun, var)</snippet></ROW><ROW><id>11096811</id><snippet>var</snippet></ROW><ROW><id>11096811</id><snippet>re</snippet></ROW><ROW><id>11096811</id><snippet>fun</snippet></ROW><ROW><id>11096811</id><snippet>var1</snippet></ROW><ROW><id>11096811</id><snippet>[</snippet></ROW><ROW><id>11096811</id><snippet>\[</snippet></ROW><ROW><id>11096811</id><snippet>]</snippet></ROW><ROW><id>11096811</id><snippet>[^]]*</snippet></ROW><ROW><id>11096811</id><snippet>]</snippet></ROW><ROW><id>11096811</id><snippet>\]</snippet></ROW><ROW><id>11096811</id><snippet>lambda x: group(0).replace(',', '')
</snippet></ROW><ROW><id>11096811</id><snippet>group(0)</snippet></ROW><ROW><id>11096811</id><snippet>','</snippet></ROW><ROW><id>11096811</id><snippet>''</snippet></ROW><ROW><id>11096811</id><snippet>,</snippet></ROW><ROW><id>11097090</id><snippet>&gt;&gt;&gt; big_list = [[1, 2, 3, 4, 5, 6], [2, 3, 4, 5, 6, 7], [2, 3, 4, 26, 33, 40], [10, 23, 33, 45, 46, 47]]
&gt;&gt;&gt; normal = set([1, 3, 4, 10, 23, 46])
&gt;&gt;&gt; [x for x in big_list if len(set(x).intersection(normal)) &lt; 3]
[[2, 3, 4, 5, 6, 7], [2, 3, 4, 26, 33, 40]]
</snippet></ROW><ROW><id>11097149</id><snippet>foo = something.query(ndb.query.AND(something.a==5, something.b&lt;8, ndb.query.OR(something.c==1, something.c==2)))
</snippet></ROW><ROW><id>11097154</id><snippet>file_data = open('x:\\path\\to\\file','r').read()
my_list = re.findall(pattern, file_data, re.MULTILINE)
my_dict = {c:b for a,b,c in my_list}
</snippet></ROW><ROW><id>11097587</id><snippet>subprocess.call(['dumpbin', '/HEADERS', 'test2.exe', '|', 'find', '"machine"'])
</snippet></ROW><ROW><id>11097587</id><snippet>platform.architecture()</snippet></ROW><ROW><id>11097587</id><snippet>file</snippet></ROW><ROW><id>11097840</id><snippet>if</snippet></ROW><ROW><id>11097840</id><snippet>return</snippet></ROW><ROW><id>11097840</id><snippet>else</snippet></ROW><ROW><id>11097840</id><snippet>if x.find('{', ind) != -1 and x.find('}', ind) != -1:
    ...
    return doit(x, end+1)
else:
    return x
</snippet></ROW><ROW><id>11098014</id><snippet>class MyRand(object):
    def __init__(self):
        self.last = None

    def __call__(self):
        r = random.randint(0, 9)
        while r == self.last:
            r = random.randint(0, 9)
        self.last = r
        return r

randint = MyRand()
x = randint()
y = randint()
...
</snippet></ROW><ROW><id>11098022</id><snippet>enumerate</snippet></ROW><ROW><id>11098022</id><snippet>newlist = [x + 1 if n % step == 0 else x
           for (n, x) in enumerate(oldlist)]
</snippet></ROW><ROW><id>11098022</id><snippet>enumerate</snippet></ROW><ROW><id>11098023</id><snippet>-file</snippet></ROW><ROW><id>11098023</id><snippet>file=</snippet></ROW><ROW><id>11098167</id><snippet>description</snippet></ROW><ROW><id>11098167</id><snippet>SELECT</snippet></ROW><ROW><id>11098167</id><snippet>information_schema</snippet></ROW><ROW><id>11098167</id><snippet>COUNT(*)</snippet></ROW><ROW><id>11098167</id><snippet>description</snippet></ROW><ROW><id>11098167</id><snippet>pyodbc</snippet></ROW><ROW><id>11098167</id><snippet>rs = c.execute("SELECT * FROM Categories")
cols = [d[0] for d in rs.description]
print(cols)
for rs in c.fetchall():
    print(rs)
</snippet></ROW><ROW><id>11098206</id><snippet>code</snippet></ROW><ROW><id>11098206</id><snippet>import sys

def in_shell():
    # Interactive prompt sets sys.ps1
    if hasattr(sys, 'ps1'):
        return True

     # __IPYTHON__ is defined when running under IPython
    return '__IPYTHON__' in __builtins__
</snippet></ROW><ROW><id>11098307</id><snippet>mylist</snippet></ROW><ROW><id>11098307</id><snippet>foofunction</snippet></ROW><ROW><id>11098307</id><snippet>for item in mylist:
    foofunction(*item)
</snippet></ROW><ROW><id>11098307</id><snippet>*</snippet></ROW><ROW><id>11098602</id><snippet>class FileMapping(models.Model):
    user = models.ForeignKey(User)
    file_name = models.CharField(_('filename'))


def user_select_file(request):
    filename = get_filename_from_request()
    fm = FileMapping(user=request.user, file_name=filename)
    ....

def do_some_file_ops(request):
   fm = FileMapping.objects.filter(user=request.user)
   process_file_contents(fm)
</snippet></ROW><ROW><id>11098820</id><snippet>&gt;&gt;&gt; import warnings
&gt;&gt;&gt; WV = type("WV", (Warning, ValueError), {})
&gt;&gt;&gt; warnings.simplefilter("error", WV)
&gt;&gt;&gt; warnings.warn("wv", WV)
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
__main__.WV: wv
</snippet></ROW><ROW><id>11098820</id><snippet>&gt;&gt;&gt; import unittest
&gt;&gt;&gt; res = type("TR", (unittest.TestResult, ), dict(addError=lambda self, test, err: setattr(self, '_last_err', err)))()
&gt;&gt;&gt; unittest.FunctionTestCase(lambda: [][0])(res)
&gt;&gt;&gt; res._last_err
(&lt;type 'exceptions.IndexError'&gt;, IndexError('list index out of range',), &lt;traceback object at 0x2b4358e69950&gt;)
</snippet></ROW><ROW><id>11098820</id><snippet>warnings</snippet></ROW><ROW><id>11098820</id><snippet>Warning</snippet></ROW><ROW><id>11098820</id><snippet>&gt;&gt;&gt; WS = type("WS", (Warning, StopIteration), {})
&gt;&gt;&gt; warnings.simplefilter("error", WS)
&gt;&gt;&gt; list(type("R", (object,), dict(__init__=lambda self, stop: (setattr(self, 'stop', stop), setattr(self, 'i', 0), None)[-1], __iter__=lambda self: self, next=lambda self: (self.i, setattr(self, 'i', self.i + 1))[0] if self.i &lt; self.stop else warnings.warn("Stop", WS)))(5))
[0, 1, 2, 3, 4]
</snippet></ROW><ROW><id>11098986</id><snippet>&gt;&gt;&gt; x = ['a', 'b', 'c']
&gt;&gt;&gt; y = [1, 2, 3]
&gt;&gt;&gt; x = y+x
</snippet></ROW><ROW><id>11098986</id><snippet>deque</snippet></ROW><ROW><id>11098986</id><snippet>$ cat x1.py 
for i in range(1000000):
    x = ['a', 'b', 'c']
    y = [1, 2, 3]
    x = y+x

$ cat x2.py 
from collections import deque
for i in range(1000000):
    d = deque(['a', 'b', 'c'])
    d.extendleft(reversed([1, 2, 3]))

$ time python x1.py

real    0m1.912s
user    0m1.864s
sys     0m0.040s

$ time python x2.py

real    0m5.368s
user    0m5.316s
sys     0m0.052s
</snippet></ROW><ROW><id>11098986</id><snippet>&gt;python -m timeit -s "y = range(100000)" "x = list(xrange(10000000)); y+x"
10 loops, best of 3: 229 msec per loop

&gt;python -m timeit -s "from collections import deque; y = range(100000)" "d = deque(xrange(10000000)); d.extendleft(reversed(y))"
10 loops, best of 3: 178 msec per loop
</snippet></ROW><ROW><id>11099204</id><snippet>Gtk.get_major_version()
Gtk.get_minor_version()
Gtk.get_micro_version()
</snippet></ROW><ROW><id>11099233</id><snippet>setrecursionlimit()</snippet></ROW><ROW><id>11099641</id><snippet>from Tkinter import *

class app:
    def __init__(self, root):
        win1 = Frame(root)
        win1.grid(row=0,column=0)

        self.variable = StringVar(win1)                               
        self.variable.set(42)
        self.type = OptionMenu(win1, self.variable,
                          "None", "Clear", "Dark", "Heavy",
                          command = self.varMenu)
        self.type.grid(row=1, column=3, sticky="nsew", padx=1, pady=1)


        self.variableunit = StringVar(win1)
        self.variableunit.set('mm')
        self.unit = OptionMenu(win1,
                          self.variableunit, "mm", "colour", "shade")
        self.unit.grid(row=1, column=5, sticky="nsew", padx=1, pady=1)

    def varMenu(self, selection):
        if selection == "Heavy":
            self.variableunit.set("colour")
            self.unit.config(state = DISABLED)
        else:
            self.variableunit.set("mm")
            self.unit.config(state = NORMAL)

root = Tk()
a = app(root)
root.mainloop()
</snippet></ROW><ROW><id>11099724</id><snippet>j[1]</snippet></ROW><ROW><id>11099724</id><snippet>\n</snippet></ROW><ROW><id>11099724</id><snippet>j = line.rstrip().split('=')
</snippet></ROW><ROW><id>11099798</id><snippet>.format()</snippet></ROW><ROW><id>11099798</id><snippet>.format()</snippet></ROW><ROW><id>11099798</id><snippet>%</snippet></ROW><ROW><id>11099798</id><snippet>... there are no current plans to deprecate printf-style formatting.</snippet></ROW><ROW><id>11099969</id><snippet>l = [1]
for x in l:
    if x &lt; 10 # avoid infinite loop
         l.append(x+1)
    print x
</snippet></ROW><ROW><id>11099969</id><snippet>l = [1]
for x in l:
    if x &lt; 10 # avoid infinite loop
         l.insert(0,x+1)
    print x
</snippet></ROW><ROW><id>11099969</id><snippet>l = [1,2,3,4,5]
for x in l:
     print x
     l.remove(x)
</snippet></ROW><ROW><id>11100055</id><snippet>\n</snippet></ROW><ROW><id>11100055</id><snippet>writelines</snippet></ROW><ROW><id>11100055</id><snippet>with open('output.txt','w', encoding='UTF-8') as output:
  output.writelines(str(i)+'\n' for i in range(5))
</snippet></ROW><ROW><id>11100116</id><snippet>application = tornado.web.Application([
    (r'/blah', BlahHandler),
    ], **settings)

# Create an HTTP server listening on localhost, port 8080.
http_server = tornado.httpserver.HTTPServer(application)
http_server.listen(8080, address='127.0.0.1')
</snippet></ROW><ROW><id>11100385</id><snippet>helpwindow.setWidget(helpbrowser)
</snippet></ROW><ROW><id>11100557</id><snippet>help(module)</snippet></ROW><ROW><id>11100857</id><snippet>dataset</snippet></ROW><ROW><id>11100857</id><snippet>datasets</snippet></ROW><ROW><id>11100857</id><snippet>&lt;xsl:stylesheet version="1.0"
 xmlns:xsl="http://www.w3.org/1999/XSL/Transform"&gt;
 &lt;xsl:output omit-xml-declaration="yes" indent="yes"/&gt;
 &lt;xsl:strip-space elements="*"/&gt;

 &lt;xsl:template match="node()|@*"&gt;
     &lt;xsl:copy&gt;
       &lt;xsl:apply-templates select="node()|@*"/&gt;
     &lt;/xsl:copy&gt;
 &lt;/xsl:template&gt;
 &lt;xsl:template match="datasets/node()"/&gt;
&lt;/xsl:stylesheet&gt;
</snippet></ROW><ROW><id>11100857</id><snippet>&lt;t&gt;
    &lt;owner name="thename"&gt;
        &lt;datasets ndatasets="10" size="10000"&gt;
            &lt;dataset size="100" creationdate="..."&gt;mydataset1&lt;/dataset&gt;
            &lt;dataset size="200" creationdate="..."&gt;mydataset2&lt;/dataset&gt;
        &lt;/datasets&gt;
    &lt;/owner&gt;
    &lt;owner name="thename2"&gt;
        &lt;datasets ndatasets="10" size="10000"&gt;
            &lt;dataset size="100" creationdate="..."&gt;mydataset1&lt;/dataset&gt;
            &lt;dataset size="200" creationdate="..."&gt;mydataset2&lt;/dataset&gt;
        &lt;/datasets&gt;
    &lt;/owner&gt;
&lt;/t&gt;
</snippet></ROW><ROW><id>11100857</id><snippet>&lt;t&gt;
   &lt;owner name="thename"&gt;
      &lt;datasets ndatasets="10" size="10000"/&gt;
   &lt;/owner&gt;
   &lt;owner name="thename2"&gt;
      &lt;datasets ndatasets="10" size="10000"/&gt;
   &lt;/owner&gt;
&lt;/t&gt;
</snippet></ROW><ROW><id>11100857</id><snippet>datasets</snippet></ROW><ROW><id>11101089</id><snippet>$ \Python32\Python setup.py build
</snippet></ROW><ROW><id>11101089</id><snippet>cd</snippet></ROW><ROW><id>11101119</id><snippet>starting point</snippet></ROW><ROW><id>11101119</id><snippet>diff)</snippet></ROW><ROW><id>11101119</id><snippet>VALUES = {-4: 0.1, -3: 0.2, -2: 0.3, -1: 0.4,
    0: 0.5, 1: 0.6, 2: 0.7, 3:  0.8, 4: 0.9}

def sum_part(start_point, diff):
    sum = 0.0
    for i in range(start_point - diff, start_point + diff + 1):
        try:
            sum += VALUES[i]
        except KeyError:
            pass
        #print('%d: %.2f' % (i, sum))
    return sum

def test_sum(start_point, diff):
    sum = sum_part(start_point, diff)
    print('sum(%d, %d): %.2f' % (start_point, diff, sum))

test_sum(1, 3)
</snippet></ROW><ROW><id>11101119</id><snippet>print()</snippet></ROW><ROW><id>11101119</id><snippet>diff</snippet></ROW><ROW><id>11101181</id><snippet>Free quota
Usage is free for all users, up to 100 queries per day.
</snippet></ROW><ROW><id>11101337</id><snippet>&lt;p&gt;</snippet></ROW><ROW><id>11101337</id><snippet>&lt;p&gt;</snippet></ROW><ROW><id>11101337</id><snippet>tinyMCE.init({
        ...
        forced_root_block : false
});
</snippet></ROW><ROW><id>11101619</id><snippet>import sys
print sys.path
</snippet></ROW><ROW><id>11101619</id><snippet>import sys
sys.path.append('/absolute/path/to/your/tweepyparentdir')
</snippet></ROW><ROW><id>11101897</id><snippet>disable</snippet></ROW><ROW><id>11101897</id><snippet>from PyQt4 import QtCore, QtGui
import sys

class Foo(QtGui.QMainWindow):
    def __init__(self):
        QtGui.QMainWindow.__init__(self)

        items = ['foo', 'bar', 'yib','nuz', 'pip', 'rof']
        cb = QtGui.QComboBox(self)
        for i in items:
            cb.addItem(i)

        disable = [1,4]
        for i in disable:
            j = cb.model().index(i,0)
            cb.model().setData(j, QtCore.QVariant(0), QtCore.Qt.UserRole-1)

if __name__ == "__main__":
    app = QtGui.QApplication([])
    foobar = Foo()
    foobar.show()
    sys.exit(app.exec_())
</snippet></ROW><ROW><id>11102055</id><snippet>self</snippet></ROW><ROW><id>11102055</id><snippet>class FountainPen(object):
    cartridge_ink = "water-based"
    default_cartridge_state = "empty"

    @classmethod
    def toggle_default_cartridge_state(cls):
        if cls.default_cartridge_state == "empty":
            cls.default_cartridge_state = "non-empty"  
        else:
            cls.default_cartridge_state = "empty"

    def __init__(self):
        self.cartridge_state = self.default_cartridge_state

    def write(self):
        print Pen.write(self)
        self.cartridge_state = "empty"
        return self.cartridge_state

    def refill(self):
        self.cartridge_state = "non-empty"
        self.number_of_refills += 1
</snippet></ROW><ROW><id>11102739</id><snippet>import boto
from boto.ec2.connection import EC2Connection
from boto.dynamodb import connect_to_region

key = 'abc'
secret = '123'
regions = EC2Connection(key,secret).get_all_regions()
for r in regions:
  con = connect_to_region(aws_access_key_id=key,aws_secret_access_key=secret,region_name=r.name)
  table = con.get_table('Table Name') # no problem
  -- rest of code --
</snippet></ROW><ROW><id>11102792</id><snippet>&gt;&gt;&gt; x = '\x94#\xdb\xff'
&gt;&gt;&gt; x.encode('hex')
'9423dbff'
&gt;&gt;&gt; int(x.encode('hex'),16)
2485378047L
</snippet></ROW><ROW><id>11102877</id><snippet>tweepy</snippet></ROW><ROW><id>11102925</id><snippet>0</snippet></ROW><ROW><id>11102925</id><snippet># Python 3.2
import csv
delimiter = ','
result = {}
with open("data.csv", 'r') as data_file:
    data = csv.reader(data_file, delimiter=delimiter)
    headers = next(data)[1:] # month names starting from 2nd column in csv
    for row in data:
        temp_dict = {}
        name = row[0]
        values = []
        # converting each value from string to int / float
        # (as suggested by OP's example)
        for x in row[1:]:
            try:
                values.append(int(x))
            except ValueError:
                try:
                    values.append(float(x))
                except ValueError:
                    print("Skipping value '{}' that cannot be converted " +
                          "to a number - see following row: {}"
                          .format(x, delimiter.join(row)))
                    values.append(0)
        for i in range(len(values)):
            if values[i]: # exclude 0 values
                temp_dict[headers[i]] = values[i]
        result[name] = temp_dict    
print(result)
</snippet></ROW><ROW><id>11103051</id><snippet>&gt;&gt;&gt; sentence = "abcdefghijkl"
&gt;&gt;&gt; [sentence[i:i+2] for i in range(len(sentence) - 1)]
['ab', 'bc', 'cd', 'de', 'ef', 'fg', 'gh', 'hi', 'ij', 'jk', 'kl']
</snippet></ROW><ROW><id>11103196</id><snippet>cssselect()</snippet></ROW><ROW><id>11103196</id><snippet>:</snippet></ROW><ROW><id>11103196</id><snippet>&lt;namespace:tagname/&gt;</snippet></ROW><ROW><id>11103196</id><snippet>tagname:pseudo-class</snippet></ROW><ROW><id>11103196</id><snippet>namespace-prefix|element</snippet></ROW><ROW><id>11103196</id><snippet>cssselect()</snippet></ROW><ROW><id>11103196</id><snippet>comments</snippet></ROW><ROW><id>11103196</id><snippet>fb</snippet></ROW><ROW><id>11103196</id><snippet>from lxml.html import fromstring
html = '...'
parser = fromstring(html)
parser.cssselect('fb|comments')
</snippet></ROW><ROW><id>11103301</id><snippet>import numpy as np

def on_xlim_changed(ax):
    xlim = ax.get_xlim()
    for a in ax.figure.axes:
        # shortcuts: last avoids n**2 behavior when each axis fires event
        if a is ax or len(a.lines) == 0 or getattr(a, 'xlim', None) == xlim:
            continue

        ylim = np.inf, -np.inf
        for l in a.lines:
            x, y = l.get_data()
            # faster, but assumes that x is sorted
            start, stop = np.searchsorted(x, xlim)
            yc = y[max(start-1,0):(stop+1)]
            ylim = min(ylim[0], np.nanmin(yc)), max(ylim[1], np.nanmax(yc))

        # TODO: update limits from Patches, Texts, Collections, ...

        # x axis: emit=False avoids infinite loop
        a.set_xlim(xlim, emit=False)

        # y axis: set dataLim, make sure that autoscale in 'y' is on 
        corners = (xlim[0], ylim[0]), (xlim[1], ylim[1])
        a.dataLim.update_from_data_xy(corners, ignore=True, updatex=False)
        a.autoscale(enable=True, axis='y')
        # cache xlim to mark 'a' as treated
        a.xlim = xlim

for ax in fig.axes:
    ax.callbacks.connect('xlim_changed', on_xlim_changed)
</snippet></ROW><ROW><id>11103448</id><snippet>from ctypes import *
mydll = CDLL("my")
recvBuffer = create_string_buffer(1000)
recvLength = c_int(1000)
mydll.func(recvBuffer,byref(recvLength))
</snippet></ROW><ROW><id>11103448</id><snippet>mydll.func.argtypes = [POINTER(c_ubyte),POINTER(c_int)]
mydll.func.restype = c_int
recvBuffer = (c_ubyte*1000)()
recvLength = c_int(1000)
mydll.func(recvBuffer,byref(recvLength))
</snippet></ROW><ROW><id>11103592</id><snippet>&lt;noscript&gt; &lt;meta http-equiv="refresh" content="0; URL=/homedepot?_fb_noscript=1" /&gt; &lt;/noscript&gt;
</snippet></ROW><ROW><id>11103774</id><snippet>if hasattr(value, '__call__'):
    value = value()
</snippet></ROW><ROW><id>11103774</id><snippet>if callable(value):
    value = value()
</snippet></ROW><ROW><id>11103774</id><snippet>import types
if isinstance(value, types.GeneratorType):
    # Handle generator case
</snippet></ROW><ROW><id>11104027</id><snippet>numpy</snippet></ROW><ROW><id>11104027</id><snippet>&gt;&gt;&gt; arr1
array([[0, 3],
       [1, 4],
       [2, 5]])
&gt;&gt;&gt; arr2
array([[ 3,  6,  5,  8],
       [ 5,  8, 13, 16],
       [ 2,  5,  2,  5]])
</snippet></ROW><ROW><id>11104027</id><snippet>arr1</snippet></ROW><ROW><id>11104027</id><snippet>arr2</snippet></ROW><ROW><id>11104027</id><snippet>dist</snippet></ROW><ROW><id>11104027</id><snippet>&gt;&gt;&gt; dist = (arr2.T.reshape((2, 2, 3)) - arr1.T).reshape((4, 3))
&gt;&gt;&gt; dist
array([[ 3,  4,  0],
       [ 3,  4,  0],
       [ 5, 12,  0],
       [ 5, 12,  0]])
</snippet></ROW><ROW><id>11104027</id><snippet>numpy.linalg.norm</snippet></ROW><ROW><id>11104027</id><snippet>&gt;&gt;&gt; numpy.apply_along_axis(numpy.linalg.norm, 1, dist)
array([  5.,   5.,  13.,  13.])
</snippet></ROW><ROW><id>11104027</id><snippet>&gt;&gt;&gt; (dist ** 2).sum(axis=1) ** 0.5
array([  5.,   5.,  13.,  13.])
</snippet></ROW><ROW><id>11104027</id><snippet>&gt;&gt;&gt; arr2.T[numpy.array(zip(range(0, 3), range(1, 4)))]
array([[[ 3,  5,  2],
        [ 6,  8,  5]],

       [[ 6,  8,  5],
        [ 5, 13,  2]],

       [[ 5, 13,  2],
        [ 8, 16,  5]]])
</snippet></ROW><ROW><id>11104027</id><snippet>&gt;&gt;&gt; arr2_pairs = arr2.T[numpy.array(zip(range(0, 3), range(1, 4)))]
&gt;&gt;&gt; dist = arr2_pairs - arr1.T
&gt;&gt;&gt; (dist ** 2).sum(axis=2) ** 0.5
array([[  5.        ,   5.        ],
       [  9.69535971,   9.69535971],
       [ 13.        ,  13.        ]])
</snippet></ROW><ROW><id>11104027</id><snippet>&gt;&gt;&gt; as_strided(arr2.T, strides=(8, 8, 32), shape=(3, 2, 3))
array([[[ 3,  5,  2],
        [ 6,  8,  5]],

       [[ 6,  8,  5],
        [ 5, 13,  2]],

       [[ 5, 13,  2],
        [ 8, 16,  5]]])
</snippet></ROW><ROW><id>11104027</id><snippet>numpy</snippet></ROW><ROW><id>11104027</id><snippet>&gt;&gt;&gt; arr2_pairs = as_strided(arr2.T, strides=(8, 8, 32), shape=(3, 2, 3))
&gt;&gt;&gt; dist = arr2_pairs - arr1.T
&gt;&gt;&gt; (dist ** 2).sum(axis=2) ** 0.5
array([[  5.        ,   5.        ],
       [  9.69535971,   9.69535971],
       [ 13.        ,  13.        ]])
</snippet></ROW><ROW><id>11104027</id><snippet>mean</snippet></ROW><ROW><id>11104027</id><snippet>argmin</snippet></ROW><ROW><id>11104027</id><snippet>&gt;&gt;&gt; normed = (dist ** 2).sum(axis=2) ** 0.5
&gt;&gt;&gt; normed.mean(axis=1)
array([  5.        ,   9.69535971,  13.        ])
&gt;&gt;&gt; min_window = normed.mean(axis=1).argmin()
&gt;&gt;&gt; arr2[:,[min_window, min_window + 1]]
array([[3, 6],
       [5, 8],
       [2, 5]])
</snippet></ROW><ROW><id>11104077</id><snippet>|</snippet></ROW><ROW><id>11104077</id><snippet>    (d1|d2|d3|d4|d25)(.*?)(?=d1|d2|d3|d4|d25)
</snippet></ROW><ROW><id>11104077</id><snippet>    # start with an array of delimeters
    delimeters = [d1, d2, d3]

    # start with a blank string
    regex_delim = ''

    # build the "delimiters regex" using alternation
    for delimeter in delimeters:
        regex_delim += re.escape(delimeter) + '|'

    # remove the extra '|' at the end
    regex_delim = regex_delim[:-1]

    # compile the regex
    regex_obj = re.compile('(' + regex_delim + ')(.*?)(?=' + regex_delim + ')')

    # and that should be it!
    for match in regex_obj.finditer(html_str):
        print match.group(2)
</snippet></ROW><ROW><id>11104077</id><snippet>re.escape(delimiter)</snippet></ROW><ROW><id>11104077</id><snippet>*</snippet></ROW><ROW><id>11104077</id><snippet>re.escape(...)</snippet></ROW><ROW><id>11104077</id><snippet>\*</snippet></ROW><ROW><id>11104110</id><snippet>&gt;&gt;&gt; import re
&gt;&gt;&gt; s = "bob sue jon richard harry"
&gt;&gt;&gt; r = re.compile('(?P&lt;name&gt;[a-z]+)\s+(?P&lt;name2&gt;[a-z]+)')
&gt;&gt;&gt; [m.groupdict() for m in r.finditer(s)]
[{'name2': 'sue', 'name': 'bob'}, {'name2': 'richard', 'name': 'jon'}]
</snippet></ROW><ROW><id>11104242</id><snippet>with</snippet></ROW><ROW><id>11104242</id><snippet>with</snippet></ROW><ROW><id>11104242</id><snippet>with</snippet></ROW><ROW><id>11104242</id><snippet>with</snippet></ROW><ROW><id>11104242</id><snippet>close</snippet></ROW><ROW><id>11104242</id><snippet>with</snippet></ROW><ROW><id>11104387</id><snippet>class FindSerial(Thread):
    def __init__(self, serial, queue):
         this.serial = serial
         this.queue  = queue
         super(FindSerial, self).__init__()

    def run(self):
        .... 
        while LOOKING_FOR_SERIAL:
            if not self.queue.empty():
                  return
        ....

 ...
 for i in range(0, 10):
     t = FindSerial(serial, q)
 ...
</snippet></ROW><ROW><id>11104456</id><snippet>after</snippet></ROW><ROW><id>11104456</id><snippet>canvas_2</snippet></ROW><ROW><id>11104456</id><snippet>place_forget</snippet></ROW><ROW><id>11104456</id><snippet>canvas_1.after(1000, canvas_2.place_forget())
</snippet></ROW><ROW><id>11104456</id><snippet>canvas_1.after(1000, canvas_2.place_forget)
</snippet></ROW><ROW><id>11104470</id><snippet>strip()</snippet></ROW><ROW><id>11104470</id><snippet>.readlines()</snippet></ROW><ROW><id>11104470</id><snippet>lines = [l.split() for l in inpf if l.strip()]
</snippet></ROW><ROW><id>11104941</id><snippet>&gt;&gt;&gt; import re
&gt;&gt;&gt; s = "Sun, Jun 24, 2012 12:00 AMEngland  vs  West Indies"
&gt;&gt;&gt; match = re.search(r"\b[AP]M", s)
&gt;&gt;&gt; s[0:match.end()]
'Sun, Jun 24, 2012 12:00 AM'
&gt;&gt;&gt; s[match.end():]
'England  vs  West Indies'
</snippet></ROW><ROW><id>11105083</id><snippet>random</snippet></ROW><ROW><id>11105083</id><snippet>import random
with open("infile.txt") as f:
    lines = f.readlines()
random.shuffle(lines)
with open("outfile.txt", "w") as f:
    f.writelines(lines)
</snippet></ROW><ROW><id>11105175</id><snippet>.seqlength</snippet></ROW><ROW><id>11105175</id><snippet>()</snippet></ROW><ROW><id>11105175</id><snippet> def seqlength(self):
     with open(self.name) as file:
         linecounter = 0
         for line in file:
             linecounter += 1
             if linecounter == 3:
                 return int(line.split()[0])
</snippet></ROW><ROW><id>11105175</id><snippet>for f in files:
    file = SrcFile(f)
    print(file.name, file.seqlength())
</snippet></ROW><ROW><id>11105431</id><snippet>&gt;&gt;&gt; dictionary={"name":"abc","age":23,"male":True}
&gt;&gt;&gt; new_dictionary={"my_name":"abc","my_age":23,"male":1}
&gt;&gt;&gt; key_map = {"name": "my_name", "age": "my_age"}
&gt;&gt;&gt; all(new_dictionary[key_map.get(k, k)] == v for k, v in dictionary.items())
True
</snippet></ROW><ROW><id>11105431</id><snippet>&gt;&gt;&gt; set(dictionary.values()) == set(new_dictionary.values())
True
</snippet></ROW><ROW><id>11105431</id><snippet>sorted()</snippet></ROW><ROW><id>11105431</id><snippet>set()</snippet></ROW><ROW><id>11105431</id><snippet>1</snippet></ROW><ROW><id>11105431</id><snippet>True</snippet></ROW><ROW><id>11105433</id><snippet>C:\mypymodules</snippet></ROW><ROW><id>11105433</id><snippet>cls.py</snippet></ROW><ROW><id>11105433</id><snippet>C:\mypymodules</snippet></ROW><ROW><id>11105433</id><snippet>cls.py</snippet></ROW><ROW><id>11105433</id><snippet>setup.py</snippet></ROW><ROW><id>11105433</id><snippet>from distutils.core import setup
setup(name='cls', py_modules=['cls'])
</snippet></ROW><ROW><id>11105433</id><snippet>&gt; python setup.py install
</snippet></ROW><ROW><id>11105563</id><snippet>os.environ</snippet></ROW><ROW><id>11105563</id><snippet>In [1]: import os

In [2]: os.environ['LOGNAME']
Out[2]: 'lev'
</snippet></ROW><ROW><id>11105569</id><snippet>&gt;&gt;&gt; A = np.linspace(0,24,25).reshape([5,5,])
&gt;&gt;&gt; A
array([[  0.,   1.,   2.,   3.,   4.],
       [  5.,   6.,   7.,   8.,   9.],
       [ 10.,  11.,  12.,  13.,  14.],
       [ 15.,  16.,  17.,  18.,  19.],
       [ 20.,  21.,  22.,  23.,  24.]])
</snippet></ROW><ROW><id>11105569</id><snippet>&gt;&gt;&gt; B = A[0:2,0:2]
</snippet></ROW><ROW><id>11105569</id><snippet>&gt;&gt;&gt; B[1,1] = 60
&gt;&gt;&gt; print A
[[  0.   1.   2.   3.   4.]
 [  5.  60.   7.   8.   9.]
 [ 10.  11.  12.  13.  14.]
 [ 15.  16.  17.  18.  19.]
 [ 20.  21.  22.  23.  24.]]
</snippet></ROW><ROW><id>11105569</id><snippet>&gt;&gt;&gt; B = A[0:2,0:2].copy()
&gt;&gt;&gt; B
array([[  0.,   1.],
       [  5.,  60.]])
&gt;&gt;&gt; B[1,1] = 600
&gt;&gt;&gt; B
array([[   0.,    1.],
       [   5.,  600.]])
&gt;&gt;&gt; A
array([[  0.,   1.,   2.,   3.,   4.],
       [  5.,  60.,   7.,   8.,   9.],
       [ 10.,  11.,  12.,  13.,  14.],
       [ 15.,  16.,  17.,  18.,  19.],
       [ 20.,  21.,  22.,  23.,  24.]])
</snippet></ROW><ROW><id>11105774</id><snippet>class tornado.database.Connection(host, database, user=None, password=None, max_idle_time=25200)</snippet></ROW><ROW><id>11105774</id><snippet>db = database.Connection</snippet></ROW><ROW><id>11105774</id><snippet>db =</snippet></ROW><ROW><id>11105774</id><snippet>Connection</snippet></ROW><ROW><id>11105774</id><snippet>from tornado import database  # you can use "import tornado.database" here, but then
                              # you will have to use "tornado.database.Connection()"
                              # instead of "database.Connection()"

db = database.Connection("localhost", "re_project", user="root", password="mypassword")
for bogota in db.query("SELECT * FROM cities_copy"):  # I changed "bogota" to lower-case because the convention in Python is for only classes, not objects, to have upper-case names.
    print(bogota.title)
</snippet></ROW><ROW><id>11105962</id><snippet>class MultiKeyDict(object):

    def __init__(self, **kwargs):
        self._keys = {}
        self._data = {}
        for k, v in kwargs.iteritems():
            self[k] = v

    def __getitem__(self, key):
        try:
            return self._data[key]
        except KeyError:
            return self._data[self._keys[key]]

    def __setitem__(self, key, val):
        try:
            self._data[self._keys[key]] = val
        except KeyError:
            if isinstance(key, tuple):
               if not key:
                  raise ValueError(u'Empty tuple cannot be used as a key')
               key, other_keys = key[0], key[1:]
            else:
               other_keys = []
            self._data[key] = val
            for k in other_keys:
                self._keys[k] = key

    def add_keys(self, to_key, new_keys):
        if to_key not in self._data:
            to_key = self._keys[to_key]
        for key in new_keys:
            self._keys[key] = to_key


    @classmethod
    def from_dict(cls, dic):
        result = cls()
        for key, val in dic.items():
            result[key] = val
        return result
</snippet></ROW><ROW><id>11105962</id><snippet>&gt;&gt;&gt; d = MultiKeyDict(a=1, b=2)
&gt;&gt;&gt; d['c', 'd'] = 3 # two keys for one value
&gt;&gt;&gt; print d['c'], d['d']
3 3
&gt;&gt;&gt; d['c'] = 4
&gt;&gt;&gt; print d['d']
4
&gt;&gt;&gt; d.add_keys('d', ('e',))
&gt;&gt;&gt; d['e']
4
&gt;&gt;&gt; d2 = MultiKeyDict.from_dict({ ('a', 'b'): 1 })
&gt;&gt;&gt; d2['a'] = 2
&gt;&gt;&gt; d2['b']
2
</snippet></ROW><ROW><id>11105969</id><snippet>class MyThirdDict(dict):
    my_method = my_func
</snippet></ROW><ROW><id>11105969</id><snippet>__get__</snippet></ROW><ROW><id>11105969</id><snippet>class MyDict(dict):
    def my_method(self, a_tuple):
        return my_func(self, a_tuple)
</snippet></ROW><ROW><id>11106028</id><snippet>In [16]: [x.text for x in bk.xpath("//book/*")]
Out[16]: ['Harry Potter', '29.99', None, 'Learning XML', '39.95', None]
</snippet></ROW><ROW><id>11106094</id><snippet>list.append()</snippet></ROW><ROW><id>11106094</id><snippet>n = len(x1)

x2 = []

i = 0
for i in range(n-1): 
    x2.append((x1[i]+x1[i+1])/2)
</snippet></ROW><ROW><id>11106094</id><snippet>x1[i+1]</snippet></ROW><ROW><id>11106543</id><snippet>import os

s = '''this is a test of the... What? What is going on now?
You guys are cu-rayzy!
Morons!'''

new_lines = []
lines=s.strip().split("\n")
for line in lines:
    new_words = []
    for word in line.strip().split(" "):
        new_words.append(word[1:])
    new_lines.append(' '.join(new_words))
new_statement = "\n".join(new_lines)

print (s)

print (new_statement)
</snippet></ROW><ROW><id>11106650</id><snippet>sed</snippet></ROW><ROW><id>11106650</id><snippet>with open("path_to/filename") as f:
    file_lines = f.readlines()
    new_file = [line.replace(oldstr,newstr) for line in file_lines]

open("path_to/filename","w").write(''.join(new_file))
</snippet></ROW><ROW><id>11106650</id><snippet>with open("path_to/filename") as f:
    file = f.read()
    newfile = file.replace(oldstr,newstr)

open("path_to/filename","w").write(newfile)
</snippet></ROW><ROW><id>11106650</id><snippet>with open("path_to/filename") as f:
    open("path_to/filename","w").write(f.read().replace(oldstr,newstr))
</snippet></ROW><ROW><id>11106738</id><snippet>/usr/sbin/pm-suspend</snippet></ROW><ROW><id>11106738</id><snippet>/etc/sudoers</snippet></ROW><ROW><id>11106738</id><snippet>&lt;username&gt; ALL=(ALL) NOPASSWD: /usr/sbin/pm-suspend
</snippet></ROW><ROW><id>11107203</id><snippet>[DEFAULT]
key = value
key2 = value
key3 = value
</snippet></ROW><ROW><id>11107203</id><snippet>bugzilla_url = 'https://bugzilla.example.com/xmlrpc.cgi'
</snippet></ROW><ROW><id>11107203</id><snippet>bugzilla_url = https://bugzilla.example.com/xmlrpc.cgi
</snippet></ROW><ROW><id>11107207</id><snippet>&gt;&gt;&gt; md5 = hashlib.md5('2005-05-26-10458.68').hexdigest()     # get MD5 as hex string
&gt;&gt;&gt; float.fromhex('0.' + md5[:16])                           # first half as float
0.85771326770700229
&gt;&gt;&gt; float.fromhex('0.' + md5[16:])                           # second half as float
0.54454306955928211
</snippet></ROW><ROW><id>11107207</id><snippet>'hello world'</snippet></ROW><ROW><id>11107207</id><snippet>&gt;&gt;&gt; int(hashlib.md5('hello world').hexdigest(), 16)
125893641179230474042701625388361764291L
</snippet></ROW><ROW><id>11107207</id><snippet>hash.hexdigest()</snippet></ROW><ROW><id>11107207</id><snippet>int(hex_str, 16)</snippet></ROW><ROW><id>11107389</id><snippet>NSData+Base64.m</snippet></ROW><ROW><id>11107389</id><snippet>//
// Mapping from 6 bit pattern to ASCII character.
//
static unsigned char base64EncodeLookup[65] =
"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_";

//
// Definition for "masked-out" areas of the base64DecodeLookup mapping
//
#define xx 65

//
// Mapping from ASCII character to 6 bit pattern.
//
static unsigned char base64DecodeLookup[256] =
{
    xx, xx, xx, xx, xx, xx, xx, xx, xx, xx, xx, xx, xx, xx, xx, xx, 
    xx, xx, xx, xx, xx, xx, xx, xx, xx, xx, xx, xx, xx, xx, xx, xx, 
    xx, xx, xx, xx, xx, xx, xx, xx, xx, xx, xx, xx, xx, 62, xx, xx, 
    52, 53, 54, 55, 56, 57, 58, 59, 60, 61, xx, xx, xx, xx, xx, xx, 
    xx,  0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 
    15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, xx, xx, xx, xx, 63, 
    xx, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 
    41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, xx, xx, xx, xx, xx, 
    xx, xx, xx, xx, xx, xx, xx, xx, xx, xx, xx, xx, xx, xx, xx, xx, 
    xx, xx, xx, xx, xx, xx, xx, xx, xx, xx, xx, xx, xx, xx, xx, xx, 
    xx, xx, xx, xx, xx, xx, xx, xx, xx, xx, xx, xx, xx, xx, xx, xx, 
    xx, xx, xx, xx, xx, xx, xx, xx, xx, xx, xx, xx, xx, xx, xx, xx, 
    xx, xx, xx, xx, xx, xx, xx, xx, xx, xx, xx, xx, xx, xx, xx, xx, 
    xx, xx, xx, xx, xx, xx, xx, xx, xx, xx, xx, xx, xx, xx, xx, xx, 
    xx, xx, xx, xx, xx, xx, xx, xx, xx, xx, xx, xx, xx, xx, xx, xx, 
    xx, xx, xx, xx, xx, xx, xx, xx, xx, xx, xx, xx, xx, xx, xx, xx, 
};
</snippet></ROW><ROW><id>11107404</id><snippet>app.yaml</snippet></ROW><ROW><id>11107404</id><snippet>handlers:
- url: /.*
  script: dispatcher.app
</snippet></ROW><ROW><id>11107404</id><snippet>dispatcher.py</snippet></ROW><ROW><id>11107404</id><snippet>jinja2</snippet></ROW><ROW><id>11107404</id><snippet>class BrowseHandler(webapp.RequestHandler):

    def get(self, category, product_id):
        # Display product with given ID in the given category.


# Map URLs like /browse/(category)/(product_id) to BrowseHandler.
application = webapp.WSGIApplication([(r'/browse/(.*)/(.*)', BrowseHandler)
                                     ],
                                     debug=True)

def main():
    run_wsgi_app(application)

if __name__ == '__main__':
    main()
</snippet></ROW><ROW><id>11107418</id><snippet>ENGINE</snippet></ROW><ROW><id>11107418</id><snippet>django.db.backends.sqlite3</snippet></ROW><ROW><id>11107524</id><snippet>pdf.py</snippet></ROW><ROW><id>11107524</id><snippet>PageObject.extractText</snippet></ROW><ROW><id>11107524</id><snippet>def extractText(self):
    [...]
    for operands,operator in content.operations:
        if operator == "Tj":
            _text = operands[0]
            if isinstance(_text, TextStringObject):
                text += _text
        elif operator == "T*":
            text += "\n"
        elif operator == "'":
            text += "\n"
            _text = operands[0]
            if isinstance(_text, TextStringObject):
                text += operands[0]
        elif operator == '"':
            _text = operands[2]
            if isinstance(_text, TextStringObject):
                text += "\n"
                text += _text
        elif operator == "TJ":
            for i in operands[0]:
                if isinstance(i, TextStringObject):
                    text += i
</snippet></ROW><ROW><id>11107524</id><snippet>Tj</snippet></ROW><ROW><id>11107524</id><snippet>TJ</snippet></ROW><ROW><id>11107524</id><snippet>Tj/TJ</snippet></ROW><ROW><id>11107524</id><snippet>def extractText(self, Tj_sep="", TJ_sep=""):
</snippet></ROW><ROW><id>11107524</id><snippet>        if operator == "Tj":
            _text = operands[0]
            if isinstance(_text, TextStringObject):
                text += Tj_sep
                text += _text
</snippet></ROW><ROW><id>11107524</id><snippet>        elif operator == "TJ":
            for i in operands[0]:
                if isinstance(i, TextStringObject):
                    text += TJ_sep
                    text += i
</snippet></ROW><ROW><id>11107524</id><snippet>In [1]: pdf.getPage(1).extractText()[1120:1250]
Out[1]: u'ing an individual which, because of name, identifyingnumber, mark or description can be readily associated with a particular indiv'
</snippet></ROW><ROW><id>11107524</id><snippet>In [2]: pdf.getPage(1).extractText(Tj_sep=" ")[1120:1250]
Out[2]: u'ta" means any information concerning an individual which, because of name, identifying number, mark or description can be readily '
</snippet></ROW><ROW><id>11107524</id><snippet>In [3]: pdf.getPage(1).extractText(Tj_sep="\n")[1120:1250]
Out[3]: u'ta" means any information concerning an individual which, because of name, identifying\nnumber, mark or description can be readily '
</snippet></ROW><ROW><id>11107524</id><snippet>get_original_bytes</snippet></ROW><ROW><id>11107524</id><snippet>pdf.py</snippet></ROW><ROW><id>11107596</id><snippet>{% for o in some_list %}
  &lt;tr class="{% cycle 'red' 'green' %}"&gt;
    ...
  &lt;/tr&gt;
{% endfor %}
</snippet></ROW><ROW><id>11107764</id><snippet>Managers</snippet></ROW><ROW><id>11107771</id><snippet>newObject = Object(name, symbol, int(amount))</snippet></ROW><ROW><id>11107771</id><snippet>amount</snippet></ROW><ROW><id>11107771</id><snippet>Object</snippet></ROW><ROW><id>11107771</id><snippet>amount</snippet></ROW><ROW><id>11107771</id><snippet>''</snippet></ROW><ROW><id>11107771</id><snippet>0</snippet></ROW><ROW><id>11107771</id><snippet>newObject = Object(name, produce, int(amount) if amount else 0)
</snippet></ROW><ROW><id>11107964</id><snippet># ... do other things ...
</snippet></ROW><ROW><id>11107964</id><snippet>rpc.wait()</snippet></ROW><ROW><id>11107964</id><snippet>try/except</snippet></ROW><ROW><id>11107964</id><snippet>get_result()</snippet></ROW><ROW><id>11107964</id><snippet>wait()</snippet></ROW><ROW><id>11107964</id><snippet>from google.appengine.api import urlfetch

rpc = urlfetch.create_rpc()
urlfetch.make_fetch_call(rpc, "http://www.google.com/")

# ... do other things ... &lt;&lt; YOUR CODE HERE

rpc.wait()
</snippet></ROW><ROW><id>11108234</id><snippet>While</snippet></ROW><ROW><id>11108234</id><snippet>lis = [1, 2, 3, 4]
i = 0
while i &lt; len(lis):
    if some_condition:
        print(lis[i])
        i += 1
    elif some_other_condition:
        print(lis[i])
        i -= 1
</snippet></ROW><ROW><id>11108378</id><snippet>class MAIN(object):

    def __init__(self, master, **kwargs):
        frame = tk.Frame(master, borderwidth=5)
        frame.grid()
        et1 = tk.Entry(frame)
        et1.insert(0, 10)
        et1.grid(row=0,column=0,sticky=tk.W)
        label_contents = tk.StringVar()
        label_contents.set(et1.get())
        tk.Label(frame, textvariable=label_contents).grid(row=1, column=0, sticky=tk.W)
        refresh = tk.Button(frame, text='Refresh', command = self.refresh_clicked)
        refresh.grid(row=2, column=0, sticky=tk.W)

    #per comments:
    def refresh_clicked(event):
        #update labels here
root=tk.Tk()
app=MAIN(root)
root.mainloop()
</snippet></ROW><ROW><id>11108430</id><snippet>from selenium.webdriver.common.action_chains import ActionChains


def hover(self):
    wd = webdriver_connection.connection
    element = wd.find_element_by_link_text(self.locator)
    hov = ActionChains(wd).move_to_element(element)
    hov.perform()
</snippet></ROW><ROW><id>11108481</id><snippet>print 'xlsht=',xlsht
print 'x=',x
print 'usedRange=',xlsht.UsedRange
while y &lt; xlsht.UsedRange:
    print 'y=',y
    print 'cell=',xlsht.Cells(x,y)
    print 'value=',xlsht.Cells(x,y).Value
    if str(xlsht.Cells(x,y).Value).isdigit:
        address.append(xlsht.Cells(x,y).Value)
        y += 1
        continue
    else:
        y += 1
return address
</snippet></ROW><ROW><id>11108481</id><snippet>print('x=',repr(x))</snippet></ROW><ROW><id>11108612</id><snippet>&lt;table&gt;</snippet></ROW><ROW><id>11108612</id><snippet>div</snippet></ROW><ROW><id>11108612</id><snippet>opener = urllib2.build_opener()
opener.addheaders = [('User-agent',
    ('Mozilla/5.0 (Macintosh; Intel Mac OS X 10_6_7) '
     'AppleWebKit/535.1 (KHTML, like Gecko) '
     'Chrome/13.0.782.13 Safari/535.1'))
]
response = opener.open('http://www.gocrimson.com/sports/mbkb/2011-12/roster')
print response.readlines() # divs are now a table
</snippet></ROW><ROW><id>11108649</id><snippet>new_list = [x for x in old_list if x[1] not in to_be_removed]
</snippet></ROW><ROW><id>11108712</id><snippet>exec</snippet></ROW><ROW><id>11108712</id><snippet>exec imp_statement in globals()</snippet></ROW><ROW><id>11108712</id><snippet>__import__()</snippet></ROW><ROW><id>11108712</id><snippet>getattr()</snippet></ROW><ROW><id>11108712</id><snippet>globals()</snippet></ROW><ROW><id>11108712</id><snippet>globals().update()</snippet></ROW><ROW><id>11108712</id><snippet>import sys, os

def getClasses(directory):
    classes = {}
    oldcwd = os.getcwd()
    os.chdir(directory)   # change working directory so we know import will work
    for filename in os.listdir(directory):
        if filename.endswith(".py"):
            modname = filename{:-3]
            classes[modname] = getattr(__import__(modname), modname)
    os.setcwd(oldcwd)
    return classes

globals().update(getClasses(r"C:\plugin_classes"))
</snippet></ROW><ROW><id>11108712</id><snippet>globals()</snippet></ROW><ROW><id>11108712</id><snippet>classes = getClasess(r"C:\plugin_classes")
for clas in classes.itervalues():
    instance = clas(1, 2, 3)       # instantiate
    instance.dosomething_cool(42)  # call method
</snippet></ROW><ROW><id>11108940</id><snippet>%windir%\SysWOW64\odbcad32.exe</snippet></ROW><ROW><id>11109231</id><snippet>dict( (t.rsplit(':', 3)[0], t) for t in table ) )
</snippet></ROW><ROW><id>11109336</id><snippet>distance()</snippet></ROW><ROW><id>11109336</id><snippet>x0</snippet></ROW><ROW><id>11109336</id><snippet>x1</snippet></ROW><ROW><id>11109336</id><snippet>def distance(x0, x1, dimensions):
    delta = numpy.abs(x0 - x1)
    delta = numpy.where(delta &gt; 0.5 * dimensions, dimensions - delta, delta)
    return numpy.sqrt((delta ** 2).sum(axis=-1))
</snippet></ROW><ROW><id>11109336</id><snippet>&gt;&gt;&gt; dimensions = numpy.array([3.0, 4.0, 5.0])
&gt;&gt;&gt; points = numpy.array([[2.7, 1.5, 4.3], [1.2, 0.3, 4.2]])
&gt;&gt;&gt; distance(points, [1.5, 2.0, 2.5], dimensions)
array([ 2.22036033,  2.42280829])
</snippet></ROW><ROW><id>11109336</id><snippet>distance()</snippet></ROW><ROW><id>11109336</id><snippet>points</snippet></ROW><ROW><id>11109506</id><snippet>if recordline.match(self.name):
</snippet></ROW><ROW><id>11109506</id><snippet>if recordline.match(self):
</snippet></ROW><ROW><id>11109506</id><snippet>re.match</snippet></ROW><ROW><id>11109506</id><snippet>self</snippet></ROW><ROW><id>11109506</id><snippet>Record</snippet></ROW><ROW><id>11109506</id><snippet>self.name</snippet></ROW><ROW><id>11109506</id><snippet>          self.name = which
</snippet></ROW><ROW><id>11109506</id><snippet>l</snippet></ROW><ROW><id>11109506</id><snippet>Record(l)</snippet></ROW><ROW><id>11109506</id><snippet>SourceFile</snippet></ROW><ROW><id>11109506</id><snippet>class Record(SourceFile)</snippet></ROW><ROW><id>11109530</id><snippet>for line in infile:
    data = [x if x.isalpha() else float(x) for x in line.split()]
</snippet></ROW><ROW><id>11109530</id><snippet>try/except</snippet></ROW><ROW><id>11109530</id><snippet>def tryconvert(value, *types):
    for t in types:
        try:
            return t(value)
        except (ValueError, TypeError):
            continue
    return value

for line in infile:
    data = [tryconvert(x, int, float) for x in line.split()]
</snippet></ROW><ROW><id>11109530</id><snippet>int</snippet></ROW><ROW><id>11109530</id><snippet>float</snippet></ROW><ROW><id>11109530</id><snippet>str</snippet></ROW><ROW><id>11109530</id><snippet>tryconvert()</snippet></ROW><ROW><id>11109572</id><snippet>import csv

def lazy(csvfile):
    with open(csvfile) as f:
        r = csv.reader(f)
        for row in r:
            yield row
</snippet></ROW><ROW><id>11109668</id><snippet>java -jar jenkins.war</snippet></ROW><ROW><id>11109806</id><snippet>image_list = ['image_1', 'image_2', 'image_3', 'image_4', 'image_5']

# or doing that dynamically as well:
image_list = ['image_%d' % i for i in xrange(1,6)]
</snippet></ROW><ROW><id>11109806</id><snippet>pk</snippet></ROW><ROW><id>11109806</id><snippet>details</snippet></ROW><ROW><id>11109806</id><snippet>try, except: pass</snippet></ROW><ROW><id>11109806</id><snippet>try:
    details = Model.objects.get(pk=pk)
    ...
# django models have a special exception type
# when they don't exist.
except Model.DoesNotExist: 
    pass 
</snippet></ROW><ROW><id>11109806</id><snippet>getattr</snippet></ROW><ROW><id>11109806</id><snippet>for image_name in image_list:
    ...
    # equiv to: details.image_1, details.image_2, ...
    if getattr(details, image_name, None) != form_image:
    ...
</snippet></ROW><ROW><id>11109814</id><snippet>test</snippet></ROW><ROW><id>11109814</id><snippet>def pro(temp_line):
    test = 0
    temp_line = temp_line.strip().split()
    test = test + 1
    return test, len(temp_line)

if __name__ == "__main__":
    with open("HGDP_FinalReport_Forward.txt") as lines:
        pool = mp.Pool(processes = 10)
        tests_and_t = pool.map(pro,lines.readlines())
        tests, t = zip(*test_and_t)
        test = sum(tests)
</snippet></ROW><ROW><id>11109876</id><snippet>i</snippet></ROW><ROW><id>11109876</id><snippet>def get() : return [ (lambda x: lambda: x)(i) for i in [ 1, 2, 3 ] ]
for f in get() : print( f() )
</snippet></ROW><ROW><id>11109926</id><snippet>#!/usr/bin/env python

import sys

def hello(variable):
    print variable

data = sys.stdin.read()
hello(data)
</snippet></ROW><ROW><id>11110319</id><snippet> l = [[1, 2, 3], ('a', 'b')]
 product(*l)
</snippet></ROW><ROW><id>11110406</id><snippet>def make_closure():
  x = 123
  l = locals()
  return lambda(varname): eval(varname, None, l)

closure = make_closure()
print closure("x") # 123
</snippet></ROW><ROW><id>11110549</id><snippet>L = [(['A','B'], 5), (['A'], 6), (['C'], 1)]

# sort by descending value
L.sort(key=lambda s:s[1], reverse=True)

# keep track of what members have already occurred
seen = set()

# Cull L - ignore members already in `seen`
# (Because it is presorted, already-seen members must have had a higher value)
L = [seen.update(i) or (i,j) for i,j in L if seen.isdisjoint(i)]
</snippet></ROW><ROW><id>11110549</id><snippet>[(['A'], 6), (['C'], 1)]
</snippet></ROW><ROW><id>11110549</id><snippet>seen.update</snippet></ROW><ROW><id>11110549</id><snippet>None</snippet></ROW><ROW><id>11110549</id><snippet>None or x</snippet></ROW><ROW><id>11110549</id><snippet>x</snippet></ROW><ROW><id>11110549</id><snippet>seen.update(i) or (i,j)</snippet></ROW><ROW><id>11110549</id><snippet>(i,j)</snippet></ROW><ROW><id>11110549</id><snippet>sort</snippet></ROW><ROW><id>11110644</id><snippet>Foo</snippet></ROW><ROW><id>11110644</id><snippet>.bar</snippet></ROW><ROW><id>11110644</id><snippet>._bar</snippet></ROW><ROW><id>11110644</id><snippet>def download():
    return 'content from remote server'

class Foo(object):                    # Inherit from object for new style class!
    def __init__(self):
        self.downloaded = False
        self._bar = None

    @property
    def bar(self):
        if not self.downloaded:
            self._bar = download()
            self.downloaded = True
        return self._bar

f = Foo()
print f.bar     def download():
    return 'content from remote server'
</snippet></ROW><ROW><id>11110644</id><snippet>downloaded</snippet></ROW><ROW><id>11110644</id><snippet>class Foo(object):
    def __init__(self):
        self._bar = None

    @property
    def bar(self):
        if self._bar is None:
            self._bar = download()
        return self._bar

f = Foo()
print f.bar 
</snippet></ROW><ROW><id>11110863</id><snippet>import constraint as c

p = c.Problem()
p.addVariable(0, range(1,101))
p.addVariable(1, range(1,51))
p.addConstraint(lambda i: i &gt;= 20, [0])
p.addConstraint(lambda j: j &gt;= 21, [1])
p.addConstraint(c.MaxSumConstraint(50))

indices = ((s[0], s[1]) for s in p.getSolutionIter())  # convert to tuple generator
</snippet></ROW><ROW><id>11110863</id><snippet>for ij in indices:
    print ij
</snippet></ROW><ROW><id>11110863</id><snippet>(29, 21)
(28, 22)
(28, 21)
(27, 23)
(27, 22)
(27, 21)

...

(20, 25)
(20, 24)
(20, 23)
(20, 22)
(20, 21)
</snippet></ROW><ROW><id>11111028</id><snippet>typedef struct {
    int32_t min;
    int32_t max;
} my_domain_int32_range_t;
</snippet></ROW><ROW><id>11111028</id><snippet>class myDomainInt32RangeT(Structure):
    _fields_ = [ ('min', c_long),
                 ('max', c_long) ]
</snippet></ROW><ROW><id>11111028</id><snippet>1st 32 bits: low half of the 64-bit "min" value
2nd 32 bits: high half of the 64-bit "min" value
3rd 32 bits: low half of the 64-bit "max" value
4th 32 bits: high half of the 64-bit "max" value
</snippet></ROW><ROW><id>11111028</id><snippet>1st 32 bits: 32-bit "min" value
2nd 32 bits: 32-bit "max" value
</snippet></ROW><ROW><id>11111028</id><snippet>1st 32 bits: 3 (low half of 64-bit 3)
2nd 32 bits: 0 (high half of 64-bit 3)
3rd 32 bits: 5 (low half of 64-bit 5)
4th 32 bits: 0 (high half of 64-bit 5)
</snippet></ROW><ROW><id>11111028</id><snippet>1st 32 bits: 3
2nd 32 bits: 0
</snippet></ROW><ROW><id>11111111</id><snippet>terminals</snippet></ROW><ROW><id>11111111</id><snippet>__init__</snippet></ROW><ROW><id>11111111</id><snippet>terminals</snippet></ROW><ROW><id>11111111</id><snippet>&gt;&gt;&gt; SrcFile.terminals
set([])
</snippet></ROW><ROW><id>11111111</id><snippet>SrcFile.terminals</snippet></ROW><ROW><id>11111111</id><snippet>SrcFile().terminals</snippet></ROW><ROW><id>11111111</id><snippet>SrcFile</snippet></ROW><ROW><id>11111111</id><snippet>__init__</snippet></ROW><ROW><id>11111111</id><snippet>class SrcFile(object):
  def __init__(self, which):
    self.name = which
    self.terminals = set([])
</snippet></ROW><ROW><id>11111135</id><snippet>struct</snippet></ROW><ROW><id>11111135</id><snippet>binascii</snippet></ROW><ROW><id>11111135</id><snippet>&gt;&gt;&gt; struct.unpack('&lt;L', binascii.unhexlify('40040000'))
(1088,)
</snippet></ROW><ROW><id>11111135</id><snippet>&gt;&gt;&gt; hex(struct.unpack('&lt;L', binascii.unhexlify('40040000'))[0])
'0x440'
</snippet></ROW><ROW><id>11111149</id><snippet>sorted</snippet></ROW><ROW><id>11111149</id><snippet>sorted</snippet></ROW><ROW><id>11111149</id><snippet>operator.itemgetter</snippet></ROW><ROW><id>11111149</id><snippet># Dictionary stored in d
from operator import itemgetter
# Iterate over the elements of the dictionary; below, by
# calling items(), k gets the key value of an entry and 
# v gets the value of that entry
for k,v in d.items():
    if v and isinstance(v[0], list):
        v.sort(key=itemgetter(2)) # Start with 0, so third element is 2
</snippet></ROW><ROW><id>11111159</id><snippet>diff = difflib.ndiff(('file1', 'rb'), ('file2', 'rb'))
</snippet></ROW><ROW><id>11111159</id><snippet>a = open('file1', 'rb').read().splitlines()
b = open('file2', 'rb').read().splitlines()

for diff in difflib.ndiff(a, b):
    print diff
</snippet></ROW><ROW><id>11111195</id><snippet>readlines</snippet></ROW><ROW><id>11111195</id><snippet>readlines</snippet></ROW><ROW><id>11111195</id><snippet>bing</snippet></ROW><ROW><id>11111195</id><snippet>bing</snippet></ROW><ROW><id>11111195</id><snippet>yahoo</snippet></ROW><ROW><id>11111195</id><snippet>duckgo</snippet></ROW><ROW><id>11111195</id><snippet>readlines</snippet></ROW><ROW><id>11111195</id><snippet>readline</snippet></ROW><ROW><id>11111195</id><snippet>for</snippet></ROW><ROW><id>11111195</id><snippet>for line in fo:
    ...
</snippet></ROW><ROW><id>11111195</id><snippet>enumerate</snippet></ROW><ROW><id>11111195</id><snippet>for line_number, line in enumerate(fo):
    if condition(line_number):
        ...
</snippet></ROW><ROW><id>11111195</id><snippet>readlines</snippet></ROW><ROW><id>11111195</id><snippet>lines = fo.readlines()
bing = lines[0:10]
yahoo = lines[10:20]
duckgo = lines[20:30]
</snippet></ROW><ROW><id>11111212</id><snippet>logger = logging.getLogger("mylog")
formatter = logging.Formatter('%(asctime)s | %(name)s |  %(levelname)s: %(message)s')
logger.setLevel(logging.DEBUG)

streamLogger = logging.StreamHandler()
streamLogger.setLevel(logging.INFO)
streamLogger.setFormatter(formatter)

logFilePath = "my.log"
fileLogger = logging.handlers.TimedRotatingFileHandler(filename = logFilePath, when = 'midnight', backupCount = 30)
fileLogger.setFormatter(formatter)
fileLogger.setLevel(logging.DEBUG)

logger.addHandler(fileLogger)
logger.addHandler(streamLogger)

logger.info("Started");
try:
    x = 14
    y = 0
    z = x / y
except Exception as ex:
    logger.error("Operation failed.")
    logger.debug("Encounetered {0} when trying to perform calculation.".format(ex))

logger.info("Ended");
</snippet></ROW><ROW><id>11111429</id><snippet>class MyApplication(object):
    def __init__(self, param1, param2):
        self.app = Flask(__name__)
        self.app.add_url("/path/&lt;methodParam&gt;", "method1", self.method1, methods=["POST"])
        # Initialize the app
</snippet></ROW><ROW><id>11111429</id><snippet>def setUp(self):
        self.tearDown()
        param1 = # Param values
        param2 = # Param values
        # Other local setup 
        self.app = MyApplication(param1, param2).getApplication().test_client()
</snippet></ROW><ROW><id>11111453</id><snippet>WSGIDaemonProcess myapp processes=2 threads=12 python-path=/home/nedbat/webapps/myapp/server:/home/nedbat/webapps/myapp/lib/python2.7
WSGIProcessGroup myapp
WSGIRestrictEmbedded On
WSGILazyInitialization On
WSGIScriptAlias / /home/nedbat/webapps/myapp/myapp.wsgi
</snippet></ROW><ROW><id>11111453</id><snippet>import os
import site
import sys

VE = '/home/nedbat/webapps/myapp/ve'

site.addsitedir(VE + '/lib/python2.7/site-packages')

os.environ['DJANGO_SETTINGS_MODULE'] = 'prod_settings'
os.environ['USE_PYPY'] = 'y'
os.environ['TMPDIR'] = '/home/nedbat/webapps/myapp/tmp'

from django.core.handlers.wsgi import WSGIHandler

application = WSGIHandler()
</snippet></ROW><ROW><id>11111559</id><snippet>in</snippet></ROW><ROW><id>11111559</id><snippet>list</snippet></ROW><ROW><id>11111559</id><snippet>set</snippet></ROW><ROW><id>11111559</id><snippet>in</snippet></ROW><ROW><id>11111559</id><snippet>set</snippet></ROW><ROW><id>11111559</id><snippet>report_set = set()
for line in report:
    for word in line.split():
        if we_want_to_keep_word(word):
            report_set.add(word)
</snippet></ROW><ROW><id>11111559</id><snippet>set</snippet></ROW><ROW><id>11111559</id><snippet>list</snippet></ROW><ROW><id>11111559</id><snippet>in</snippet></ROW><ROW><id>11111559</id><snippet>set</snippet></ROW><ROW><id>11111559</id><snippet>for x in report_set:</snippet></ROW><ROW><id>11111559</id><snippet>.readlines()</snippet></ROW><ROW><id>11111559</id><snippet>with open("filename", "r") as f:
    for line in f:
        ... # process each line here
</snippet></ROW><ROW><id>11111559</id><snippet>while 1:
    lines = report.readlines()
    if not lines:
        break
</snippet></ROW><ROW><id>11111559</id><snippet>.readlines()</snippet></ROW><ROW><id>11111559</id><snippet>.readlines()</snippet></ROW><ROW><id>11111559</id><snippet>report</snippet></ROW><ROW><id>11111559</id><snippet>.readlines()</snippet></ROW><ROW><id>11111559</id><snippet>lines</snippet></ROW><ROW><id>11111559</id><snippet>while 1</snippet></ROW><ROW><id>11111559</id><snippet>for line in report:</snippet></ROW><ROW><id>11111559</id><snippet>count</snippet></ROW><ROW><id>11111559</id><snippet>len(report_set)</snippet></ROW><ROW><id>11111559</id><snippet>set</snippet></ROW><ROW><id>11111559</id><snippet>set</snippet></ROW><ROW><id>11111559</id><snippet>in</snippet></ROW><ROW><id>11111559</id><snippet>report_set.add(word)</snippet></ROW><ROW><id>11111559</id><snippet>set</snippet></ROW><ROW><id>11111559</id><snippet>FOOTNOTES</snippet></ROW><ROW><id>11111559</id><snippet>def words(file_object):
    for line in file_object:
        line = line.strip().translate(None, string.punctuation)
        for word in line.split():
            yield word

report_set = set()
with open(fullpath, 'r') as report:
    for word in words(report):
        if word == "FOOTNOTES":
            break
        word = word.lower()
        if len(word) &gt; 2 and word not in dict_file:
            report_set.add(word)

print("Words in report_set: %d" % len(report_set))
</snippet></ROW><ROW><id>11111571</id><snippet>class MyClass(object):
    def __init__(self, param):
        self.param = Param(self, param)
</snippet></ROW><ROW><id>11111571</id><snippet>class MyClass(object):
    def __init__(self, param):
        self._param = param     # naming convention, 'don't muck with it'
        # OR
        self.__param = param    # name mangled

    @property
    def param(self):
        return self._param
</snippet></ROW><ROW><id>11112000</id><snippet>./generate
</snippet></ROW><ROW><id>11112000</id><snippet>./generate &gt; output_file.csv
</snippet></ROW><ROW><id>11112000</id><snippet>output = open("output.csv", "w")
</snippet></ROW><ROW><id>11112000</id><snippet>output.write(each.name + "," + str(each.produce)  + "," + str(each.amount))
</snippet></ROW><ROW><id>11112000</id><snippet>csv</snippet></ROW><ROW><id>11112000</id><snippet>,</snippet></ROW><ROW><id>11112274</id><snippet>from os.path import splitext    

test = '&lt;name&gt;-&lt;gender&gt;-&lt;age&gt;.jpg'

fname, ext = splitext(test) # works with names like 'xxx.yyy.jpg'
if ext in ('.jpg', '.jpeg'):
    name, gender, age = (fname.split('-') + [None, None])[:3]
</snippet></ROW><ROW><id>11112419</id><snippet>x.add(y, fill_value=0)</snippet></ROW><ROW><id>11112433</id><snippet>if '4.2.1' in pl.values():
   print ("We're good!")
else:
   print ("No good")
</snippet></ROW><ROW><id>11112536</id><snippet>//td[text()[contains(.,'Good bye')]]
</snippet></ROW><ROW><id>11112536</id><snippet>td</snippet></ROW><ROW><id>11112536</id><snippet>//td[contains(text(),"Good bye")]
</snippet></ROW><ROW><id>11112536</id><snippet>contains()</snippet></ROW><ROW><id>11112536</id><snippet> "
                 Hello world "
</snippet></ROW><ROW><id>11112536</id><snippet>td</snippet></ROW><ROW><id>11112536</id><snippet>&lt;xsl:stylesheet version="1.0"
 xmlns:xsl="http://www.w3.org/1999/XSL/Transform"&gt;
 &lt;xsl:output omit-xml-declaration="yes" indent="yes"/&gt;

 &lt;xsl:template match="/"&gt;
  &lt;xsl:copy-of select="//td[text()[contains(.,'Good bye')]]"/&gt;
 &lt;/xsl:template&gt;
&lt;/xsl:stylesheet&gt;
</snippet></ROW><ROW><id>11112536</id><snippet>&lt;table&gt;
      &lt;tr&gt;
        &lt;td&gt;
          Hello world &lt;i&gt; how are you? &lt;/i&gt;
          Have a wonderful day.
          Good bye!
        &lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
        &lt;td&gt;
          Hello NJ &lt;i&gt;, how are you?
          Have a wonderful day.&lt;/i&gt;
        &lt;/td&gt;
      &lt;/tr&gt;
&lt;/table&gt;
</snippet></ROW><ROW><id>11112536</id><snippet>&lt;td&gt;
          Hello world &lt;i&gt; how are you? &lt;/i&gt;
          Have a wonderful day.
          Good bye!
        &lt;/td&gt;
</snippet></ROW><ROW><id>11112628</id><snippet>DJANGO_SETTINGS_MODULE="myproj.settings" \
  python -c 'from django.contrib.sessions.models import Session; \
    Session.objects.all().delete()' 
python manage.py runserver
</snippet></ROW><ROW><id>11112830</id><snippet>def literal_eval(node_or_string):
    """
    Safely evaluate an expression node or a string containing a Python
    expression.  The string or node provided may only consist of the following
    Python literal structures: strings, numbers, tuples, lists, dicts, booleans,
    and None.
    """
    _safe_names = {'None': None, 'True': True, 'False': False}
    if isinstance(node_or_string, basestring):
        node_or_string = parse(node_or_string, mode='eval')
    if isinstance(node_or_string, Expression):
        node_or_string = node_or_string.body
    def _convert(node):
        if isinstance(node, Str):
            return node.s
        elif isinstance(node, Num):
            return node.n
        elif isinstance(node, Tuple):
            return tuple(map(_convert, node.elts))
        elif isinstance(node, List):
            return list(map(_convert, node.elts))
        elif isinstance(node, Dict):
            return dict((_convert(k), _convert(v)) for k, v
                        in zip(node.keys, node.values))
        elif isinstance(node, Name):
            if node.id in _safe_names:
                return _safe_names[node.id]
        elif isinstance(node, BinOp) and \
             isinstance(node.op, (Add, Sub)) and \
             isinstance(node.right, Num) and \
             isinstance(node.right.n, complex) and \
             isinstance(node.left, Num) and \
             isinstance(node.left.n, (int, long, float)):
            left = node.left.n
            right = node.right.n
            if isinstance(node.op, Add):
                return left + right
            else:
                return left - right
        raise ValueError('malformed string')
    return _convert(node_or_string)
</snippet></ROW><ROW><id>11112939</id><snippet>class domParser(object):
    def __init__(self):
    #initialize dom object here, and obtain the root for the destination file object.
        self.dom = newAwesomeCompliantDom()
        self.document = self.dom.document
        self.this = self.document

    def comment(self, commentText):
    #add commentText to self.document or the above dom object you created
        self.this.appendChild(self.document.DOMImplementation.createComment(commentText))

    def start(self, tag, attrs):
    #same here
        self.this = self.this.appendChild(self.document.DOMImplimentation.newElement(tag,attrs))

    def data(self, dataText):
    #append data to the last accessed element, as a new Text child
        self.this.appendChild(self.document.DOMImpl.createDataNode(dataText))

    def end(self):
    #closing element, so move up the tree
        self.this = self.this.parentNode

    def close(self):
        return self.document

#unchecked, please validate yourself
x = lxml.etree.parse(target=domParser)
x.feed(htmlFile)
newDom = x.close()
</snippet></ROW><ROW><id>11112968</id><snippet>csv</snippet></ROW><ROW><id>11113000</id><snippet>yield</snippet></ROW><ROW><id>11113000</id><snippet>-tt</snippet></ROW><ROW><id>11113112</id><snippet>django.core.exceptions.ImproperlyConfigured</snippet></ROW><ROW><id>11113112</id><snippet>'django.db.backends.postgresql_psycopg2'</snippet></ROW><ROW><id>11113112</id><snippet>'postgresql_psycopg2'</snippet></ROW><ROW><id>11113112</id><snippet>DATABASES</snippet></ROW><ROW><id>11113155</id><snippet>def merge_sort(li):
    if len(li) &lt; 2: return li
    m = len(li) / 2
    return merge(merge_sort(li[:m]), merge_sort(li[m:]))

def merge(l, r):
    result = []
    i = j = 0
    while i &lt; len(l) and j &lt; len(r):
        if l[i] &lt; r[j]:
            result.append(l[i])
            i += 1
        else:
            result.append(r[j])
            j += 1            
    result += l[i:]
    result += r[j:]
    return result
</snippet></ROW><ROW><id>11113242</id><snippet>No such file or directory: 'File_1.xls'
</snippet></ROW><ROW><id>11113304</id><snippet>def __init__(self, parent=None):
    super(MyMainWindow, self).__init__(parent)
    self.ui = AutoGeneratedUI()
    self.ui.setupUi(self)
    # connect the clicked signal to on_button_clicked() method
    self.pushButton.clicked.connect(self.on_button_clicked) 

def on_button_clicked(self):
    print "button clicked"
    # here is the code to open a new window
</snippet></ROW><ROW><id>11113402</id><snippet>&gt;&gt;&gt; setb = set(B)
&gt;&gt;&gt; [x for x in A if not x in setb]
[(1L, 'test_case_2')]
</snippet></ROW><ROW><id>11113402</id><snippet>&gt;&gt;&gt; seta = set(A)
&gt;&gt;&gt; [x for x in B if not x in seta]
[(1L, 'test_case_4'), (2L, 'test_case_3')]
</snippet></ROW><ROW><id>11113416</id><snippet>admin/</snippet></ROW><ROW><id>11113416</id><snippet>http://127.0.0.1:8000/admin/</snippet></ROW><ROW><id>11113489</id><snippet>if time.endswith("00"):
    #code
elif time[-2:] == "15":
    #code
elif re.match(".{2}30", time):
    #code
elif time.endswith("45"):
    #code
</snippet></ROW><ROW><id>11113850</id><snippet>subprocess</snippet></ROW><ROW><id>11113861</id><snippet>def consume(iterator, n):
    "Advance the iterator n-steps ahead. If n is none, consume entirely."
    # Use functions that consume iterators at C speed.
    if n is None:
        # feed the entire iterator into a zero-length deque
        collections.deque(iterator, maxlen=0)
    else:
        # advance to the empty slice starting at position n
        next(islice(iterator, n, n), None)
</snippet></ROW><ROW><id>11113861</id><snippet>n</snippet></ROW><ROW><id>11113861</id><snippet>None</snippet></ROW><ROW><id>11113861</id><snippet>next(islice(iterator, n, n), None)
</snippet></ROW><ROW><id>11113961</id><snippet>repr()</snippet></ROW><ROW><id>11114028</id><snippet>subprocess</snippet></ROW><ROW><id>11114028</id><snippet>import subprocess
subprocess.call(["git", "pull"])
subprocess.call(["make"])
subprocess.call(["make", "test"])
</snippet></ROW><ROW><id>11114264</id><snippet>X</snippet></ROW><ROW><id>11114264</id><snippet>rescal</snippet></ROW><ROW><id>11114264</id><snippet>X</snippet></ROW><ROW><id>11114264</id><snippet>k = len(X)</snippet></ROW><ROW><id>11114264</id><snippet>T = X[i]</snippet></ROW><ROW><id>11114294</id><snippet>&gt;&gt;&gt; data=[{"id": "1","code": "111",},{"id": "2","code": "222",},{"id": "3","code": "333",}]
&gt;&gt;&gt; list_id=[x['id'] for x in data]
&gt;&gt;&gt; print(list_id)
['1','2','3']
</snippet></ROW><ROW><id>11114394</id><snippet>dict((x['id'], x) for x in L).values()
</snippet></ROW><ROW><id>11114443</id><snippet>operator.itemgetter</snippet></ROW><ROW><id>11114443</id><snippet>stock.sort(key=lambda x: (int(x['date']), float(x['amount'])))
</snippet></ROW><ROW><id>11114443</id><snippet>all_amounts = lambda x: (int(x['date']), float(x['amount']))
stock.sort(key=all_amounts)
</snippet></ROW><ROW><id>11114514</id><snippet>manage.py</snippet></ROW><ROW><id>11114514</id><snippet>manage.py</snippet></ROW><ROW><id>11114514</id><snippet>djproject</snippet></ROW><ROW><id>11114514</id><snippet>manage.py
myapp/
    __init__.py
    models.py
mysite/
    __init__.py
    settings.py
    urls.py
</snippet></ROW><ROW><id>11114654</id><snippet>help</snippet></ROW><ROW><id>11114654</id><snippet>add_argument</snippet></ROW><ROW><id>11114654</id><snippet>argparse.SUPPRESS</snippet></ROW><ROW><id>11114654</id><snippet>&gt;&gt;&gt; parser = argparse.ArgumentParser(prog='frobble')
&gt;&gt;&gt; parser.add_argument('--foo', help=argparse.SUPPRESS)
&gt;&gt;&gt; parser.print_help()
usage: frobble [-h]

optional arguments:
  -h, --help  show this help message and exit
</snippet></ROW><ROW><id>11114697</id><snippet>  import re
  string = "test [*string*] test [*st[ *ring*] test"

  points = [m.start() for m in re.finditer('\[', string)]
</snippet></ROW><ROW><id>11114738</id><snippet>&gt;&gt;&gt; a = ['Little Mary had a lamb', 'the horse is black', 'Mary had a cat']
&gt;&gt;&gt; b = ['The horse is white', 'Mary had a dog', 'The horse is hungry']
&gt;&gt;&gt; [sent for sent in a+b if 'Mary' in sent]
['Little Mary had a lamb', 'Mary had a cat', 'Mary had a dog']
</snippet></ROW><ROW><id>11114738</id><snippet>&gt;&gt;&gt; import re
&gt;&gt;&gt; [sent for sent in a+b if re.search("horse", sent)]
['the horse is black', 'The horse is white', 'The horse is hungry']
</snippet></ROW><ROW><id>11114918</id><snippet>multipart/form-data</snippet></ROW><ROW><id>11114918</id><snippet>import mimetypes
import string
import random
import time
import md5
import httplib

def upload(fields,files):
    boundaryChars = list(string.lowercase) + list(string.uppercase) + \
                    [str(x) for x in range(10)] + ['_'*10]
    random.shuffle(boundaryChars)    

    boundary = '----------RaNdOm_crAPP'+''.join(boundaryChars[:20])
    CRLF = '\r\n'
    elem = []
    for key in fields:
        elem.append('--' + boundary)
        elem.append('Content-Disposition: form-data; name="%s"' % key)
        elem.append('')
        elem.append(fields[key])
    for (key, filename,value) in files:
        elem.append('--' + boundary)
        elem.append('Content-Disposition: form-data; name="%s"; filename="%s"' % (key, filename))
        elem.append('Content-Type: %s' % mimetypes.guess_type(filename)[0] or \
                        'application/octet-stream')
        elem.append('')
        elem.append(value)
    elem.append('--' + boundary + '--')
    elem.append('')
    body = CRLF.join(elem)
    content_type = 'multipart/form-data; boundary=%s' % boundary
    return content_type, body

def search_img(item, image_name):
    try:
        f = open(image_name, 'rb')
        img = f.read()
    except IOError, e:
        print 'fail to open %s' % image_name
        print e
        return None

    ts = str(time.time())

    m = md5.new('testsearch_by_image' + item)
    m.update(ts)
    m.update('0123456789')
    sign = m.hexdigest()

    #params = urllib.urlencode( )

    contentType,body = upload({
        'item': item,
        'app_key': 'test',
        'cmd':'search_by_image',
        'sign':sign,
        #'img_file':img,
        'extra':'',
        'time_stamp':ts,
        },
        [('img_file', image_name, img)]
    )
    headers = {
        'Accept':'text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8',
        'Content-type': contentType,
        'User-Agent':'Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/536.5 (KHTML, like Gecko) Chrome/19.0.1084.56 Safari/536.5',
        'Host':'i.joyton.com:2010',
        'Origin':'http://i.joyton.com:2010',
        'Referer':'http://i.joyton.com:2010/'
    }
    #print c
    #print body

    conn = httplib.HTTPConnection('i.joyton.com', 2010)
    conn.request('POST', '/', body, headers)
    response = conn.getresponse()

    print response.status, response.reason
    print response.read()
    conn.close()
    return response.read()

if __name__ == '__main__':
    search_img('book', 'iMgXS.jpg') #the same image.
</snippet></ROW><ROW><id>11115521</id><snippet>def iterate_fds(pid):
    dir = '/proc/'+str(pid)+'/fd'
    if not os.access(dir,os.R_OK|os.X_OK): return

    for fds in os.listdir(dir):
        for fd in fds:
            full_name = os.path.join(dir, fd)
            try:
                file = os.readlink(full_name)
                if file == '/dev/null' or \
                  re.match(r'pipe:\[\d+\]',file) or \
                  re.match(r'socket:\[\d+\]',file):
                    file = None
            except OSError as err:
                if err.errno == 2:     
                    file = None
                else:
                    raise(err)

            yield (fd,file)
</snippet></ROW><ROW><id>11115521</id><snippet>handle.exe</snippet></ROW><ROW><id>11115521</id><snippet>psutil</snippet></ROW><ROW><id>11115521</id><snippet>import psutil

for proc in psutil.process_iter():
    try:
        flist = proc.get_open_files()
        if flist:
            print(proc.pid,proc.name)
            for nt in flist:
                print("\t",nt.path)

    # This catches a race condition where a process ends
    # before we can examine its files    
    except psutil.NoSuchProcess as err:
        print("****",err) 
</snippet></ROW><ROW><id>11115608</id><snippet>from heapq import nlargest
from collections import defaultdict

d = defaultdict(list)

for i in xrange(len(matrix)):
    for j in xrange(i):
      d[matrix[i][j]].append((i, j))

for value, positions in nlargest(5, d.items(), key=lambda item: item[0]):
    print value, positions
</snippet></ROW><ROW><id>11115728</id><snippet>long</snippet></ROW><ROW><id>11115728</id><snippet>&gt;&gt;&gt; type(10**509)
&lt;type 'long'&gt;
</snippet></ROW><ROW><id>11115728</id><snippet>float</snippet></ROW><ROW><id>11115728</id><snippet>&gt;&gt;&gt; float(10**509)
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
OverflowError: long int too large to convert to float
</snippet></ROW><ROW><id>11115728</id><snippet>float</snippet></ROW><ROW><id>11115728</id><snippet>&gt;&gt;&gt; import sys
&gt;&gt;&gt; sys.float_info.max
1.7976931348623157e+308
</snippet></ROW><ROW><id>11115728</id><snippet>float64</snippet></ROW><ROW><id>11115728</id><snippet>float</snippet></ROW><ROW><id>11115923</id><snippet>'\n\x00'</snippet></ROW><ROW><id>11115923</id><snippet>'\x00\n'</snippet></ROW><ROW><id>11115923</id><snippet>\x00</snippet></ROW><ROW><id>11115923</id><snippet>&gt;&gt;&gt; import struct
&gt;&gt;&gt; f = open('test', 'wb')
&gt;&gt;&gt; entry1 = 'this is a test\n'.encode('utf-16')
&gt;&gt;&gt; struct.pack('!h', len(entry1)))
&gt;&gt;&gt; f.write(entry1)
&gt;&gt;&gt; entry2 = 'another test\n'.encode('utf-8')
&gt;&gt;&gt; f.write(struct.pack('!h', len(entry2)))
&gt;&gt;&gt; f.write(entry2)
&gt;&gt;&gt; f.close()
</snippet></ROW><ROW><id>11115923</id><snippet>struct</snippet></ROW><ROW><id>11115923</id><snippet>&gt;&gt;&gt; f = open('test', 'rb')
&gt;&gt;&gt; fieldsize = struct.calcsize('!h')
&gt;&gt;&gt; length = struct.unpack('!h', f.read(fieldsize))[0]
&gt;&gt;&gt; print f.read(length).decode('utf-16')
this is a test

&gt;&gt;&gt; length = struct.unpack('!h', f.read(fieldsize))[0]
&gt;&gt;&gt; print f.read(length).decode('utf-8')
another test

&gt;&gt;&gt;
</snippet></ROW><ROW><id>11115938</id><snippet>def inside_local():
    local_x = x
    for a in xrange(n):
        if local_x:
            pass
        else:
            pass

ncalls  tottime  percall  cumtime  percall filename:lineno(function)
    1    0.258    0.258    0.258    0.258 testloop.py:13(outside)
    1    0.314    0.314    0.314    0.314 testloop.py:21(inside_local)
    1    0.421    0.421    0.421    0.421 testloop.py:6(inside)
</snippet></ROW><ROW><id>11115938</id><snippet>if</snippet></ROW><ROW><id>11116291</id><snippet>.__init__</snippet></ROW><ROW><id>11116291</id><snippet>debug-watch/print()</snippet></ROW><ROW><id>11116291</id><snippet>tablet</snippet></ROW><ROW><id>11116291</id><snippet>Correspondent</snippet></ROW><ROW><id>11116291</id><snippet>class Tablet_Correspondent(db.Model):
    def __init__(self, tablet=None, correspondent=None):
        print "in __init__: ", tablet, correspondent
        self.tablet = tablet
        self.correspondent = correspondent
</snippet></ROW><ROW><id>11116291</id><snippet>tab.correspondents.append(cor)</snippet></ROW><ROW><id>11116291</id><snippet>Tablet_Correspondent.__init__</snippet></ROW><ROW><id>11116291</id><snippet>cor</snippet></ROW><ROW><id>11116291</id><snippet>Correspondents</snippet></ROW><ROW><id>11116291</id><snippet>Tablet</snippet></ROW><ROW><id>11116291</id><snippet>__init__</snippet></ROW><ROW><id>11116291</id><snippet>cor.tablets.append(tab)</snippet></ROW><ROW><id>11116291</id><snippet>creator</snippet></ROW><ROW><id>11116291</id><snippet>association_proxy</snippet></ROW><ROW><id>11116291</id><snippet>class Tablet(db.Model, GlyphMixin):
    # ...
    correspondents = association_proxy('tablet_correspondents', 'correspondent', creator=lambda cor: Tablet_Correspondent(correspondent=cor))

class Correspondent(db.Model, GlyphMixin):
    # ...
    tablets = association_proxy('correspondent_tablets', 'tablet', creator=lambda tab: Tablet_Correspondent(tablet=tab))
</snippet></ROW><ROW><id>11117363</id><snippet>len(buffer.value)</snippet></ROW><ROW><id>11117363</id><snippet>buffer.raw.find("\x00")</snippet></ROW><ROW><id>11117363</id><snippet>list(buffer).index("\x00")</snippet></ROW><ROW><id>11117561</id><snippet>all</snippet></ROW><ROW><id>11117561</id><snippet>contacts_list = request.user_profile.contacts.all()
</snippet></ROW><ROW><id>11117561</id><snippet>{% for c in contacts_list.all %}
    {{ c.first_name }}
{% endfor %}
</snippet></ROW><ROW><id>11117613</id><snippet>pattern = "_" + phone + "%"
cursor.execute("SELECT LastName FROM contacts WHERE phone LIKE %s", (pattern,))
</snippet></ROW><ROW><id>11117613</id><snippet>Q = "SELECT LastName FROM contacts WHERE phone LIKE '_{0}%'".format(phone)
</snippet></ROW><ROW><id>11117613</id><snippet>pattern = "_{0}%".format(phone)
cursor.execute("SELECT LastName FROM contacts WHERE phone LIKE %s", (pattern,))
</snippet></ROW><ROW><id>11117617</id><snippet>np.histogram</snippet></ROW><ROW><id>11117617</id><snippet>import numpy as np

data = np.random.rand(1000)          # Random numbers between 0 and 1
t = np.cumsum(np.random.rand(1000))  # Random time series, from about 1 to 500
</snippet></ROW><ROW><id>11117617</id><snippet>np.histogram</snippet></ROW><ROW><id>11117617</id><snippet>t_bins = np.arange(0., 500., 5.)       # Or whatever range you want
sums = np.histogram(t, t_bins, weights=data)[0]
</snippet></ROW><ROW><id>11117617</id><snippet>means = sums / np.histogram(t, t_bins)][0]
</snippet></ROW><ROW><id>11117666</id><snippet>repr</snippet></ROW><ROW><id>11117666</id><snippet>json</snippet></ROW><ROW><id>11117666</id><snippet>FLOAT_REPR = repr
</snippet></ROW><ROW><id>11117666</id><snippet>Lib/json/encoder.py</snippet></ROW><ROW><id>11117666</id><snippet>JSONEncoder</snippet></ROW><ROW><id>11117788</id><snippet>s = u'中文'
return s.encode('utf-8')
</snippet></ROW><ROW><id>11117788</id><snippet>encode</snippet></ROW><ROW><id>11117788</id><snippet>utf-8</snippet></ROW><ROW><id>11117788</id><snippet>UnicodeDecodeError</snippet></ROW><ROW><id>11117788</id><snippet>encode</snippet></ROW><ROW><id>11117788</id><snippet>encode</snippet></ROW><ROW><id>11117788</id><snippet>decode</snippet></ROW><ROW><id>11117788</id><snippet>ascii</snippet></ROW><ROW><id>11117788</id><snippet>é</snippet></ROW><ROW><id>11117788</id><snippet>encode</snippet></ROW><ROW><id>11117788</id><snippet>decode</snippet></ROW><ROW><id>11117788</id><snippet>__unicode__</snippet></ROW><ROW><id>11117788</id><snippet>unicode()</snippet></ROW><ROW><id>11117788</id><snippet>ascii</snippet></ROW><ROW><id>11117788</id><snippet>__str__</snippet></ROW><ROW><id>11117788</id><snippet>str()</snippet></ROW><ROW><id>11117788</id><snippet>ascii</snippet></ROW><ROW><id>11117788</id><snippet>__unicode__</snippet></ROW><ROW><id>11117788</id><snippet>__str__</snippet></ROW><ROW><id>11117788</id><snippet>unicode</snippet></ROW><ROW><id>11117788</id><snippet>__unicode__</snippet></ROW><ROW><id>11117788</id><snippet>str</snippet></ROW><ROW><id>11117788</id><snippet>__unicode__</snippet></ROW><ROW><id>11117788</id><snippet>u'中文'</snippet></ROW><ROW><id>11117788</id><snippet>__str__</snippet></ROW><ROW><id>11117788</id><snippet>utf-8</snippet></ROW><ROW><id>11117788</id><snippet>__unicode__</snippet></ROW><ROW><id>11117788</id><snippet>__str__</snippet></ROW><ROW><id>11117788</id><snippet>class test():
    def __unicode__(self):
        return u'中文'

    def __str__(self):
        return unicode(self).encode('utf-8')
</snippet></ROW><ROW><id>11118082</id><snippet>import numpy as np
a = np.random.rand(10,3)
b = np.argmin(abs(a - .5), axis=1).choose(a.T)

# a
array([[ 0.97272372,  0.45351387,  0.19105835],
       [ 0.27895897,  0.12438789,  0.64857335],
       [ 0.05298066,  0.58122882,  0.805319  ],
       [ 0.39952727,  0.77728036,  0.65742471],
       [ 0.36522802,  0.06938552,  0.6595684 ],
       [ 0.9030323 ,  0.08965774,  0.01823633],
       [ 0.30996923,  0.53400339,  0.87600912],
       [ 0.17953532,  0.4888832 ,  0.0746074 ],
       [ 0.09052476,  0.47397504,  0.30317449],
       [ 0.31851577,  0.68135476,  0.38335483]])

# b
array([ 0.45351387,  0.64857335,  0.58122882,  0.39952727,  0.36522802,
        0.9030323 ,  0.53400339,  0.4888832 ,  0.47397504,  0.38335483])
</snippet></ROW><ROW><id>11118223</id><snippet>itertools.chain(*x)
</snippet></ROW><ROW><id>11118223</id><snippet>itertools.chain.from_iterable(x)
</snippet></ROW><ROW><id>11118223</id><snippet>&gt;&gt;&gt; [[x[0] for x in y] for y in dataset]
[[2, 1, 1], [1, 1, 9], [1, 1, 2]]
</snippet></ROW><ROW><id>11118283</id><snippet>print</snippet></ROW><ROW><id>11118283</id><snippet>&gt;&gt;&gt;  stri = "日本"
&gt;&gt;&gt;  stri
'\xe6\x97\xa5\xe6\x9c\xac'
&gt;&gt;&gt; print(stri)
日本
</snippet></ROW><ROW><id>11118283</id><snippet>repr</snippet></ROW><ROW><id>11118283</id><snippet>print</snippet></ROW><ROW><id>11118538</id><snippet>sub()</snippet></ROW><ROW><id>11118538</id><snippet>search()</snippet></ROW><ROW><id>11118538</id><snippet>&gt;&gt;&gt; strs = 'dsds +48 124 cat cat cat245 81243!!'
&gt;&gt;&gt; re.sub(r"[^0-9+._ -]+", "", strs)
' +48 124   245 81243'
</snippet></ROW><ROW><id>11118538</id><snippet>[^0-9+._ -]</snippet></ROW><ROW><id>11118538</id><snippet>^</snippet></ROW><ROW><id>11118538</id><snippet>+</snippet></ROW><ROW><id>11118582</id><snippet>variables = {}
for name, colour, shape in Applist:
    variables[name + "_n"] = name
    variables[name + "_c"] = colour
    variables[name + "_s"] = shape
</snippet></ROW><ROW><id>11118582</id><snippet>variables["Apple_n"]</snippet></ROW><ROW><id>11118582</id><snippet>variables = {}
for name, colour, shape in Applist:
    variables[name] = {"name": name, "colour": colour, "shape": shape}

print "Apple shape: " + variables["Apple"]["shape"]
</snippet></ROW><ROW><id>11118582</id><snippet>namedtuple</snippet></ROW><ROW><id>11118582</id><snippet>from collections import namedtuple

variables = {}
Fruit = namedtuple("Fruit", ["name", "colour", "shape"])
for args in Applist:
    fruit = Fruit(*args)
    variables[fruit.name] = fruit

print "Apple shape: " + variables["Apple"].shape
</snippet></ROW><ROW><id>11118582</id><snippet>Fruit</snippet></ROW><ROW><id>11118582</id><snippet>namedtuple</snippet></ROW><ROW><id>11118582</id><snippet>variables["Apple"].colour</snippet></ROW><ROW><id>11118582</id><snippet>"green"</snippet></ROW><ROW><id>11118582</id><snippet>namedtuple</snippet></ROW><ROW><id>11118582</id><snippet>Fruit</snippet></ROW><ROW><id>11118582</id><snippet>namedtuple</snippet></ROW><ROW><id>11118582</id><snippet>Fruit</snippet></ROW><ROW><id>11118582</id><snippet>class Fruit(object):
    def __init__(self, name, colour, shape):
        self.name = name
        self.colour = colour
        self.shape = shape
</snippet></ROW><ROW><id>11118661</id><snippet>instream</snippet></ROW><ROW><id>11118956</id><snippet>multiprocessing</snippet></ROW><ROW><id>11118956</id><snippet>from multiprocessing import Pool

# you could define `func`, `a` here

if __name__=="__main__":
    p = Pool() # use all available CPU cores
    b = p.map(func, a)
</snippet></ROW><ROW><id>11119155</id><snippet>from Tkinter import *
master=Tk()
listbox=Listbox(master)
listbox.pack()
for item in ['one','two','three','four']:
    listbox.insert(END, item)
</snippet></ROW><ROW><id>11119155</id><snippet>curselection</snippet></ROW><ROW><id>11119155</id><snippet>get(ACTIVE)</snippet></ROW><ROW><id>11119155</id><snippet>if listbox.curselection():
    item = listbox.get(ACTIVE)
</snippet></ROW><ROW><id>11119332</id><snippet>your_list = ['productX', 'deployment-package', '1.2.3.4', None, None, None]
'-'.join(item for item in your_list if item)
</snippet></ROW><ROW><id>11119464</id><snippet>from django.core.mail import EmailMultiAlternatives
body = render_to_string(template_name, locals(),
                      context_instance=RequestContext(request))
email = EmailMultiAlternatives(subject, body, mail_sender, [contact_request.email], headers={'Reply-To': 'do_not_reply@whatever.com'})
email.content_subtype='html'
email.send(fail_silently=False)
</snippet></ROW><ROW><id>11119594</id><snippet>goog_dict = {}
googlers = 3
for i in xrange(googlers):
   name = "goog_%s" %i
   dict_within = {'score':[], 'surprise':''}
   goog_dict[name] = dict_within 
</snippet></ROW><ROW><id>11119594</id><snippet>&gt;&gt;&gt; a = []
&gt;&gt;&gt; goog_dict = {}
&gt;&gt;&gt; goog_dict['1'] = a
&gt;&gt;&gt; goog_dict['2'] = a
&gt;&gt;&gt; goog_dict['3'] = a
&gt;&gt;&gt; goog_dict
{'1': [], '3': [], '2': []}
&gt;&gt;&gt; goog_dict['1'].append([1, 2, 3])
&gt;&gt;&gt; goog_dict
{'1': [[1, 2, 3]], '3': [[1, 2, 3]], '2': [[1, 2, 3]]}
</snippet></ROW><ROW><id>11119698</id><snippet>dispatch</snippet></ROW><ROW><id>11119698</id><snippet>Logger</snippet></ROW><ROW><id>11119698</id><snippet>foo</snippet></ROW><ROW><id>11119698</id><snippet>class BigClass(Object):

  def Logger(self):
     print 'foo has been called'

  @log(Logger)
  def Foo(self):
     print 'calling foo'


a = BigClass()
a.foo()
</snippet></ROW><ROW><id>11119774</id><snippet>open</snippet></ROW><ROW><id>11119774</id><snippet>class NamedFile(object):
    def __init__(self, name):
        self._f = f
        self.name = name

    def readline(self):
        return self._f.readline()
</snippet></ROW><ROW><id>11119774</id><snippet>def open_file(name):
    return {"name": name, "f": open(name)}
</snippet></ROW><ROW><id>11119774</id><snippet>myfile["f"].readline()</snippet></ROW><ROW><id>11119774</id><snippet>readline</snippet></ROW><ROW><id>11119774</id><snippet>NamedFile</snippet></ROW><ROW><id>11119774</id><snippet>NamedFile</snippet></ROW><ROW><id>11119774</id><snippet>readline</snippet></ROW><ROW><id>11119774</id><snippet>file</snippet></ROW><ROW><id>11119774</id><snippet>dict</snippet></ROW><ROW><id>11119914</id><snippet>import trace

def trapy(arg):
    tracer = trace.Trace()
    tracer.run(arg)
    r = tracer.results()
    r.write_results()

if __name__ == '__main__':
    import module_name
    trapy('module_name.function_name()')
</snippet></ROW><ROW><id>11119978</id><snippet>&gt;&gt;&gt; a= 'href=\"http:\/\/'
&gt;&gt;&gt; a
'href="http:\\/\\/' # the str() method is called
&gt;&gt;&gt; repr(a)
'\'href="http:\\\\/\\\\/\'' # repr() is meant to be how the object can be "read" back, or provide detailed information
&gt;&gt;&gt; str(a)
'href="http:\\/\\/' # see first example
&gt;&gt;&gt; print a
href="http:\/\/ # any conversion etc... is not performed, ie, you get your original string printed
</snippet></ROW><ROW><id>11120080</id><snippet>myCanvas["background"]</snippet></ROW><ROW><id>11120080</id><snippet>myCanvas.create_rectangle( x0, y0, x1, y1, outline=myCanvas["background"], fill=myCanvas["background"])
</snippet></ROW><ROW><id>11120240</id><snippet>print self.fieldList.index(line)</snippet></ROW><ROW><id>11120240</id><snippet>self.myMapper = QtCore.QSignalMapper()
</snippet></ROW><ROW><id>11120240</id><snippet>for item in self.fieldList:
     self.myMapper.setMapping(item, self.fieldList.index(item))
     item.textEdited.connect(self.myMapper.map)
self.myMapper.mapped[int].connect(checkState)
</snippet></ROW><ROW><id>11120240</id><snippet>def checkState(i):
    print (self.fieldList[i].objectName())
    self.fieldList[i].setText("It works!")
</snippet></ROW><ROW><id>11120240</id><snippet>palette1, palette2</snippet></ROW><ROW><id>11120240</id><snippet>def myfilter(i):
    checkState(self.fieldList[i], palette1, palette2)
</snippet></ROW><ROW><id>11120513</id><snippet>pytest.ini</snippet></ROW><ROW><id>11120513</id><snippet>tox.ini</snippet></ROW><ROW><id>11120513</id><snippet>setup.cfg</snippet></ROW><ROW><id>11120513</id><snippet>setup.cfg</snippet></ROW><ROW><id>11120770</id><snippet>yield</snippet></ROW><ROW><id>11120770</id><snippet>interface WorkerThing {
  void doSomething(string lineOfText);
}

class ThatReadsLargeFiles {
    public void readAHugeFile(WorkerThing actions) {
        // TODO write some code to read through the file and store it in line

        // Here you are yielding control to something else
        action.doSomething(line);
    }
 }
</snippet></ROW><ROW><id>11120770</id><snippet>new ThatReadsLargeFiles().readAHugeFile(new WorkerThing() {
    void doSomething(string text) {
        System.out.println(text); 
    }
};
</snippet></ROW><ROW><id>11120861</id><snippet>def check_conditions(file):
    #return true if SrcFile conditions are met

def convert_record(line):
    #generate the string you want to print for the record

for file in files:
    if check_conditions(file):
        with open(file) as file:
            for line in file:
                if &lt;regexp match&gt;:
                    record = convert_record(line)
                    &lt;write to tempfiles&gt;
</snippet></ROW><ROW><id>11120861</id><snippet>check_conditions</snippet></ROW><ROW><id>11120861</id><snippet>convert_record</snippet></ROW><ROW><id>11120871</id><snippet>keyPressEvent()</snippet></ROW><ROW><id>11120871</id><snippet>QGridLayout::itemAtPosition (int row, int column)</snippet></ROW><ROW><id>11120887</id><snippet>@pyqtSlot(QAction)
def on_menuAbout_triggered(self, action):
    """
    Show about page
    """
    about_box = QMessageBox(self)
    about_box.about(self, 'About', 'This is a GUI...\n\n&lt;a href="www.google.com"&gt;www.google.com&lt;/a&gt;')
#        about_box.setText('This is a GUI')
#        about_box.exec()
</snippet></ROW><ROW><id>11121156</id><snippet>r1 * r2</snippet></ROW><ROW><id>11121156</id><snippet>a</snippet></ROW><ROW><id>11121156</id><snippet>a</snippet></ROW><ROW><id>11121156</id><snippet>s = int(a)
</snippet></ROW><ROW><id>11121156</id><snippet>ValueError</snippet></ROW><ROW><id>11121203</id><snippet>    # preserve aspect ratio
    x, y = self.size
    if x &gt; size[0]: y = max(y * size[0] / x, 1); x = size[0]
    if y &gt; size[1]: x = max(x * size[1] / y, 1); y = size[1]
    size = x, y
</snippet></ROW><ROW><id>11121203</id><snippet> IMAGES_THUMBS = {
    'thumbs': (80, 100000),
 }
</snippet></ROW><ROW><id>11121557</id><snippet>mylist = function_generates_a_list()
def newfunc():
   function_to_test(mylist)
</snippet></ROW><ROW><id>11121557</id><snippet>timeit(newfunc)</snippet></ROW><ROW><id>11121557</id><snippet>timeit(lambda: function_to_test(mylist))</snippet></ROW><ROW><id>11121557</id><snippet>timeit</snippet></ROW><ROW><id>11121557</id><snippet>python -m timeit ...</snippet></ROW><ROW><id>11121557</id><snippet>python -m timeit --setup='import mymodule' 'mymodule.newfunc()'
</snippet></ROW><ROW><id>11121557</id><snippet>newfunc</snippet></ROW><ROW><id>11121557</id><snippet>setup</snippet></ROW><ROW><id>11121557</id><snippet>function_generates_a_list</snippet></ROW><ROW><id>11121572</id><snippet>@gen.engine</snippet></ROW><ROW><id>11121572</id><snippet> @gen.engine
 def doit(self):
     for word in LIST_OF_STUFF:
         print word

         response = yield gen.Task(self.twitter_request, 
                                   path= "/search",
                                   access_token=self.current_user["access_token"],
                                   q=word,rpp="100")

         # do something with response.
</snippet></ROW><ROW><id>11121962</id><snippet>cursor.description</snippet></ROW><ROW><id>11121962</id><snippet>.description</snippet></ROW><ROW><id>11122066</id><snippet>*.class</snippet></ROW><ROW><id>11122066</id><snippet>.class</snippet></ROW><ROW><id>11122351</id><snippet>item.delete()
items = table.objects.order_by('order')
count =0
for element in items:
  element.order = count
  element.save()
  count=count+1
</snippet></ROW><ROW><id>11122412</id><snippet>else</snippet></ROW><ROW><id>11122412</id><snippet>def do_stuff():
    if error1():
        return cleanup_and_fail()
    return ok()
</snippet></ROW><ROW><id>11122412</id><snippet>def do_stuff():
    if error1():
        return cleanup_and_fail()
    if error2():
        return do_different_cleanup_and_fail()
    return ok()
</snippet></ROW><ROW><id>11122412</id><snippet>def do_stuff():
    if option1():
        return do_option1()
    else:
        return do_option2()
</snippet></ROW><ROW><id>11122412</id><snippet>elif</snippet></ROW><ROW><id>11122412</id><snippet>def do_stuff():
    if option1():
        return do_option1()
    elif:
        return do_option2()
    else:
        return do_option3()
</snippet></ROW><ROW><id>11122517</id><snippet>import os.path
p = "/tmp/999/123.tif"
dir, filename = os.path.basename(os.path.dirname(p)), os.path.basename(p)
</snippet></ROW><ROW><id>11122517</id><snippet>In [21]: dir
Out[21]: '999'

In [22]: filename
Out[22]: '123.tif'
</snippet></ROW><ROW><id>11122517</id><snippet>import csv
import os.path

# You already have a list of absolute paths
files = ["/tmp/999/123.tif"]

# csv writer
with open('/tmp/out.csv', 'wb') as out_file:
    csv_writer = csv.writer(out_file, delimiter=',')
    csv_writer.writerow(('DirName','Filename'))
    for f in files:
        csv_writer.writerow((os.path.basename(os.path.dirname(f)), 
                             os.path.basename(f)))
</snippet></ROW><ROW><id>11122679</id><snippet>file_local = open( folder_path + file_id + '.pdf', 'wb' )</snippet></ROW><ROW><id>11122716</id><snippet>print</snippet></ROW><ROW><id>11122716</id><snippet>sys.stdout</snippet></ROW><ROW><id>11122716</id><snippet>write</snippet></ROW><ROW><id>11122716</id><snippet>print</snippet></ROW><ROW><id>11122716</id><snippet>from __future__ import print_function</snippet></ROW><ROW><id>11122716</id><snippet>print</snippet></ROW><ROW><id>11122891</id><snippet>lxml</snippet></ROW><ROW><id>11122891</id><snippet>from lxml import etree
from StringIO import StringIO

xml = etree.parse(StringIO('''&lt;TextWithNodes&gt;
&lt;Node id="0"/&gt;TEXT1&lt;Node id="19"/&gt;TEXT2 &lt;Node id="20"/&gt;TEXT3&lt;Node id="212"/&gt;&lt;/TextWithNodes&gt;'''))

xml.xpath("//text()")
Out[43]: ['\n', 'TEXT1', 'TEXT2 ', 'TEXT3']
</snippet></ROW><ROW><id>11122891</id><snippet>xml.find(".//Node[@id='19']").text
</snippet></ROW><ROW><id>11123173</id><snippet>with open('c:/HashFiles/Part1.txt') as inf, open('c:/HashFiles/hashes.txt','w') as outf:
    for line in inf:
        data = line.split(',')
        hash = data[4]
        outf.write(hash + '\n')
</snippet></ROW><ROW><id>11123173</id><snippet>class HashStorage(object):
    def __init__(self, fname_fmt):
        self.fname_fmt = fname_fmt
        self.hashfile = {}

    def thefile(self, hash):
        hashlen = len(hash)
        try:
            return self.hashfile[hashlen]
        except KeyError:
            newfile = open(self.fname_fmt.format(hashlen), 'w')
            self.hashfile[hashlen] = newfile
            return newfile

    def write(self, hash):
        self.thefile(hash).write(hash + '\n')

    def __del__(self):
        for f in self.hashfiles.itervalues():
            f.close()
        del self.hashfiles

store = HashStorage('c:/HashFiles/hashes{}.txt')

with open('c:/HashFiles/Part1.txt') as inf:
    for line in inf:
        data = line.split(',')
        hash = data[4]
        store.write(hash)
</snippet></ROW><ROW><id>11123173</id><snippet>with open('c:/HashFiles/Part1.txt') as inf, open('c:/HashFiles/hashes.txt','w') as outf:
    for line in inf:
        if not line.startswith('#'):
            data = line.split(',')
            hash = data[4]
            outf.write(hash + '\n')
</snippet></ROW><ROW><id>11123173</id><snippet>with open('c:/HashFiles/Part1.txt') as inf, open('c:/HashFiles/hashes.txt','w') as outf:
    for i in xrange(N):
        inf.next()       # skip a line

    for line in inf:
        data = line.split(',')
        hash = data[4]
        outf.write(hash + '\n')
</snippet></ROW><ROW><id>11123173</id><snippet>with open('c:/HashFiles/search_engine_primary.sql') as inf, open('c:/HashFiles/hashes.txt','w') as outf:
    for i in xrange(47):
        inf.next()       # skip a line

    for line in inf:
        data = line.split(',')
        if len(data) &gt; 15:      # skip any line without enough data items
            hash = data[15]
            outf.write(hash + '\n')
</snippet></ROW><ROW><id>11123292</id><snippet>from lxml import etree
t = etree.XML(
"""&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;review&gt;
  &lt;title&gt;Some testing stuff&lt;/title&gt;
  &lt;text&gt;Some text with &lt;extradata&gt;data&lt;/extradata&gt; in it.&lt;/text&gt;
&lt;/review&gt;"""
)
(t.text + ''.join(map(etree.tostring, t))).strip()
</snippet></ROW><ROW><id>11123292</id><snippet>t</snippet></ROW><ROW><id>11123292</id><snippet>t.text</snippet></ROW><ROW><id>11123292</id><snippet>In [50]: (t.text + ''.join(map(etree.tostring, t))).strip()
Out[50]: '&lt;title&gt;Some testing stuff&lt;/title&gt;\n  &lt;text&gt;Some text with &lt;extradata&gt;data&lt;/extradata&gt; in it.&lt;/text&gt;'
</snippet></ROW><ROW><id>11123292</id><snippet>In [6]: e = t.xpath('//text')[0]

In [7]: (e.text + ''.join(map(etree.tostring, e))).strip()
Out[7]: 'Some text with &lt;extradata&gt;data&lt;/extradata&gt; in it.'
</snippet></ROW><ROW><id>11123296</id><snippet>def exportEFS(self):
  self.exportGUI = Toplevel()
  Button(self.exportGUI, text='Backup', command=self.backup).pack(padx=100,pady=5)
  Button(self.exportGUI, text='Restore', command=self.restore).pack(padx=100,pady=5)

def backup(self):
  self.backupWindow = Toplevel()
  self.backupWindow.grab_set()

  message = "Enter a name for your Backup."

  Label(self.backupWindow, text=message).pack()

  self.entry = Entry(self.backupWindow,text="enter your choice")
  self.entry.pack(side=TOP,padx=10,pady=12)

  self.button = Button(self.backupWindow, text="Backup",command=self.backupCallBack)
  self.button.pack(side=BOTTOM,padx=10,pady=10)
</snippet></ROW><ROW><id>11123575</id><snippet>find</snippet></ROW><ROW><id>11123575</id><snippet>def find(self, key):
    if key == self.key:
        return self.data
    if key &lt; self.key and self.left:
        return self.left.find(key)
    if key &gt; self.key and self.right:
        return self.right.find(key)
    raise KeyError("No such thing")
</snippet></ROW><ROW><id>11123813</id><snippet>doc = lxml.etree.XML("""
  &lt;nmaprun&gt;
    &lt;host&gt;
      &lt;hostnames&gt;
        &lt;hostname name="host1.example.com" type="PTR"/&gt;
      &lt;/hostnames&gt;
    &lt;/host&gt;
  &lt;/nmaprun&gt;""")
for host in doc.findall('host'):
  host_el = host.find('hostnames/hostname')
  if host_el is not None:
    print host_el.attrib['name']
</snippet></ROW><ROW><id>11123813</id><snippet>doc.xpath()</snippet></ROW><ROW><id>11123813</id><snippet>doc.find()</snippet></ROW><ROW><id>11123813</id><snippet>doc.findall()</snippet></ROW><ROW><id>11123813</id><snippet>host[hostnames/hostname/@name]</snippet></ROW><ROW><id>11123813</id><snippet>host</snippet></ROW><ROW><id>11123813</id><snippet>hostnames</snippet></ROW><ROW><id>11123813</id><snippet>hostname</snippet></ROW><ROW><id>11123813</id><snippet>name</snippet></ROW><ROW><id>11123813</id><snippet>//hostnames/hostname/@name</snippet></ROW><ROW><id>11123813</id><snippet>lxml</snippet></ROW><ROW><id>11123844</id><snippet>def coerce(other)
    return self, other
end
</snippet></ROW><ROW><id>11124247</id><snippet>log = open("myprog.log", "a")
sys.stdout = log

&gt;&gt;&gt; print("Hello")
&gt;&gt;&gt; # nothing is printed because it goes to the log file instead.
</snippet></ROW><ROW><id>11124247</id><snippet># If you're using python 2.x, uncomment the next line
#from __future__ import print_function
print = log.info

&gt;&gt;&gt; print("Hello!")
&gt;&gt;&gt; # nothing is printed because log.info is called instead of print
</snippet></ROW><ROW><id>11124465</id><snippet>str()</snippet></ROW><ROW><id>11124465</id><snippet>&gt;&gt;&gt; url = QString('http://stackoverflow.com/questions/11121475')
&gt;&gt;&gt; urllib2.urlopen(url).read()
### this generates your error ending with
AttributeError: 'QString' object has no attribute 'get_type'

&gt;&gt;&gt; urllib2.urlopen(str(url)).read()
### works
</snippet></ROW><ROW><id>11124533</id><snippet>divmod</snippet></ROW><ROW><id>11124533</id><snippet>&gt;&gt;&gt; [hex(x) for x in divmod(70000, 65536)]
['0x1', '0x1170']
</snippet></ROW><ROW><id>11124553</id><snippet>sys.path.append</snippet></ROW><ROW><id>11124553</id><snippet>tweepy.error.TweepError: Failed to send request: [Errno 61] Connection refused</snippet></ROW><ROW><id>11124553</id><snippet>sys.path</snippet></ROW><ROW><id>11124553</id><snippet>src
 | my_package
 |     | __init__.py
 |     | module_1.py
 |     | module_2.py
</snippet></ROW><ROW><id>11124553</id><snippet>from my_package import module_1</snippet></ROW><ROW><id>11124553</id><snippet>sys.path</snippet></ROW><ROW><id>11124553</id><snippet>src</snippet></ROW><ROW><id>11124553</id><snippet>__init__.py</snippet></ROW><ROW><id>11124553</id><snippet>my_package</snippet></ROW><ROW><id>11124553</id><snippet>sys.path</snippet></ROW><ROW><id>11124553</id><snippet>python setup.py install</snippet></ROW><ROW><id>11124553</id><snippet>.pth</snippet></ROW><ROW><id>11124751</id><snippet>parent</snippet></ROW><ROW><id>11124751</id><snippet>def some_method_wrapper(parent):

    def some_method():
        #access any parent attribute 
        #by using the parent positional argument passed to the function
        print parent.desired_attribute
        return 'blabla'

    setattr(parent, 'new_attr', some_method)
</snippet></ROW><ROW><id>11124751</id><snippet>parent.new_attr()</snippet></ROW><ROW><id>11124751</id><snippet>def parent_function(numbers):
    # do something with numbers
    parent_function.counter += 1
    return sum(numbers)

parent_function.counter = 0

def add_reset_function(parent):

    def reset_counter():
        parent.counter = 0

    setattr(parent, 'reset', reset_counter)

# call parent_function a few times

numbers = [1, 2, 3]
for i in range(4): parent_function(numbers)
print parent_function.counter # 4

add_reset_function(parent_function)

# call the reset function just added
parent_function.reset()

print parent_function.counter # 0
parent_function(numbers)
print parent_function.counter # 1
</snippet></ROW><ROW><id>11124878</id><snippet>Threading.Timer</snippet></ROW><ROW><id>11124878</id><snippet>ExecuteDemo(..)</snippet></ROW><ROW><id>11124878</id><snippet>def ExecuteDemo():
    .
    .
    .
    threading.Timer(2, ExecuteDemo).start()
</snippet></ROW><ROW><id>11124878</id><snippet>def ExecuteDemoCaller():
    #while True: # or something..
    while someCondition:
        ExecuteDemo()
        time.sleep(2)
</snippet></ROW><ROW><id>11124929</id><snippet>u=x</snippet></ROW><ROW><id>11124929</id><snippet>v=y</snippet></ROW><ROW><id>11124929</id><snippet>(u,v) -&gt; (x,y,z)</snippet></ROW><ROW><id>11124929</id><snippet>splprep</snippet></ROW><ROW><id>11124929</id><snippet>u</snippet></ROW><ROW><id>11124929</id><snippet>u[i] = u[i-1] + dist(p[i], p[j])</snippet></ROW><ROW><id>11124929</id><snippet>x,y,z</snippet></ROW><ROW><id>11124929</id><snippet>from scipy import interpolate
import numpy as np

# example dataset (wavy cylinder)

def surf(u, v):
    x = np.cos(v*np.pi*2) * (1 + 0.3*np.cos(30*u))
    y = np.sin(v*np.pi*2) * (1 + 0.3*np.cos(30*u))
    z = 2*u
    return x, y, z

ux, vx = np.meshgrid(np.linspace(0, 1, 20),
                     np.linspace(0, 1, 20))
x, y, z = surf(ux, vx)

# reconstruct (u, v) using the existing (!) neighbourhood information
du = np.sqrt(np.diff(x, axis=0)**2 + np.diff(y, axis=0)**2 + np.diff(z, axis=0)**2)
dv = np.sqrt(np.diff(x, axis=1)**2 + np.diff(y, axis=1)**2 + np.diff(z, axis=1)**2)
u = np.zeros_like(x)
v = np.zeros_like(x)
u[1:,:] = np.cumsum(du, axis=0)
v[:,1:] = np.cumsum(dv, axis=1)

u /= u.max(axis=0)[None,:] # hmm..., or maybe skip this scaling step -- may distort the result
v /= v.max(axis=1)[:,None]

# construct interpolant (unstructured grid)
ip_surf = interpolate.CloughTocher2DInterpolator(
        (u.ravel(), v.ravel()), 
        np.c_[x.ravel(), y.ravel(), z.ravel()])

# the BivariateSpline classes might also work here, but the above is more robust

# plot projections
import matplotlib.pyplot as plt

u = np.random.rand(2000)
v = np.random.rand(2000)

plt.subplot(131)
plt.plot(ip_surf(u, v)[:,0], ip_surf(u, v)[:,1], '.')
plt.title('xy')
plt.subplot(132)
plt.plot(ip_surf(u, v)[:,1], ip_surf(u, v)[:,2], '.')
plt.title('yz')
plt.subplot(133)
plt.plot(ip_surf(u, v)[:,2], ip_surf(u, v)[:,0], '.')
plt.title('zx')
plt.show()
</snippet></ROW><ROW><id>11124929</id><snippet>u,v</snippet></ROW><ROW><id>11124929</id><snippet>u,v</snippet></ROW><ROW><id>11124929</id><snippet>u,v</snippet></ROW><ROW><id>11124929</id><snippet>LocallyLinearEmbedding</snippet></ROW><ROW><id>11124929</id><snippet>u = Y[:,0]; v = Y[:,1]</snippet></ROW><ROW><id>11124998</id><snippet>In [275]: DataFrame.from_items([('A', [1, 2, 3]), ('B', [4, 5, 6])],
   .....:                      orient='index', columns=['one', 'two', 'three'])
Out[275]: 
   one  two  three
A    1    2      3
B    4    5      6
</snippet></ROW><ROW><id>11125098</id><snippet>plt.title('&lt;C&gt;={}'.format(y))
</snippet></ROW><ROW><id>11125098</id><snippet>.format</snippet></ROW><ROW><id>11125098</id><snippet>%</snippet></ROW><ROW><id>11125138</id><snippet>&lt;a href="{{ url_for('post_blueprint.get_post', year=year, month=month, title=title)}}"&gt;
    {{ title }}
&lt;/a&gt;
</snippet></ROW><ROW><id>11125138</id><snippet>{{ url_for('static', filename='[filenameofstaticfile]') }}
</snippet></ROW><ROW><id>11125138</id><snippet>url_for</snippet></ROW><ROW><id>11125138</id><snippet>{{ url_for('post_blueprint.get_post', **post) }}
</snippet></ROW><ROW><id>11125138</id><snippet>@post_blueprint.route('/posts/')
def get_all_posts():
    models = database_call_of_some_kind # This is assuming you use some kind of model
    posts = []
    for model in models:
        posts.append(dict(year=model.year, month=model.month, title=model.title))
    return render_template('p.html', posts=posts)
</snippet></ROW><ROW><id>11125138</id><snippet>{% for post in posts %}
    &lt;a href="{{ url_for('post_blueprint.get_post', **post) }}"&gt;
        {{ post['title'] }}
    &lt;/a&gt;
{% endfor %}
</snippet></ROW><ROW><id>11125256</id><snippet>from itertools import chain, izip
list(chain.from_iterable(izip(list_a, list_b)))
</snippet></ROW><ROW><id>11125256</id><snippet>roundrobin()</snippet></ROW><ROW><id>11125256</id><snippet>itertools</snippet></ROW><ROW><id>11125256</id><snippet>def roundrobin(*iterables):
    "roundrobin('ABC', 'D', 'EF') --&gt; A D E B F C"
    # Recipe credited to George Sakkis
    pending = len(iterables)
    nexts = cycle(iter(it).next for it in iterables)
    while pending:
        try:
            for next in nexts:
                yield next()
        except StopIteration:
            pending -= 1
            nexts = cycle(islice(nexts, pending))
</snippet></ROW><ROW><id>11125408</id><snippet>text_data = """'1990-01-01','f','2'
'1990-01-02','c','4'
'1990-01-01','j','2.5'
'1990-01-01','j','1.5'
'1990-01-02','b','3.9'
"""

import csv
from StringIO import StringIO
from operator import itemgetter
from itertools import groupby


temp = StringIO(text_data)
tabular = list(csv.reader(temp, quotechar="'"))
tabular.sort(key=lambda L: (L[0], float(L[2]))

for key, val in groupby(tabular, itemgetter(0)):
    print next(val) # or do something appropriate
</snippet></ROW><ROW><id>11125408</id><snippet>['1990-01-01', 'j', '1.5']
['1990-01-02', 'b', '3.9']
</snippet></ROW><ROW><id>11125431</id><snippet>import re
import json

s = """Format= {
Window_Type="Tabular",
Tabular= { Num_row_labels=5 } }"""

s = "{" + re.sub(r'([a-zA-Z0-9_]+)=',r'"\1":', s) + "}"
obj = json.loads(s)

if obj['Format']['Window_Type'] == "Tabular":
    print "Its tabular!"
    numrows = obj['Format']['Tabular']['Num_row_labels']
    print "Numrows:", numrows
    if numrows &gt;= 5:
        print "Print this fileName"
</snippet></ROW><ROW><id>11125431</id><snippet>Its tabular!
Numrows: 5
Print this fileName
</snippet></ROW><ROW><id>11125452</id><snippet>.shape</snippet></ROW><ROW><id>11125452</id><snippet>&gt;&gt;&gt; a = zeros((2, 5))
&gt;&gt;&gt; a.shape
(2, 5)
</snippet></ROW><ROW><id>11125452</id><snippet>numpy.shape(a)</snippet></ROW><ROW><id>11125478</id><snippet>HttpResponse</snippet></ROW><ROW><id>11125478</id><snippet>HttpResponse</snippet></ROW><ROW><id>11125615</id><snippet>sku</snippet></ROW><ROW><id>11125615</id><snippet>r'sku[\s:]*(\d{8})'</snippet></ROW><ROW><id>11125615</id><snippet>&gt;&gt;&gt; import re
&gt;&gt;&gt; string = '... | sku: 01234567 | price: 150 | ... '
&gt;&gt;&gt; re.findall(r'sku[\s:]*(\d{8})', string)[0]
'01234533'
</snippet></ROW><ROW><id>11125615</id><snippet>sku</snippet></ROW><ROW><id>11125615</id><snippet>r'sku[\s:]*(\d*)'</snippet></ROW><ROW><id>11125615</id><snippet>&gt;&gt;&gt; import re
&gt;&gt;&gt; string = '... | sku: 01234 | price: 150 | sku: 99872453 | blah blah ... '
&gt;&gt;&gt; re.findall(r'sku[\s:]*(\d*)', string)[0]
'01234'
&gt;&gt;&gt; re.findall(r'sku[\s:]*(\d*)', string)[1]
'99872453'
</snippet></ROW><ROW><id>11125615</id><snippet>sku1</snippet></ROW><ROW><id>11125615</id><snippet>sku2</snippet></ROW><ROW><id>11125615</id><snippet>sku-sp</snippet></ROW><ROW><id>11125615</id><snippet>sku-18</snippet></ROW><ROW><id>11125615</id><snippet>sku_anything</snippet></ROW><ROW><id>11125615</id><snippet>&gt;&gt;&gt; re.findall(r'sku\D*(\d*)', string)[0]
</snippet></ROW><ROW><id>11125615</id><snippet>&gt;&gt;&gt; re.findall(r'sku[^0-9]*([0-9]*)', string)[0]
</snippet></ROW><ROW><id>11125615</id><snippet>sku</snippet></ROW><ROW><id>11125615</id><snippet>\D*</snippet></ROW><ROW><id>11125615</id><snippet>[^0-9]*</snippet></ROW><ROW><id>11125615</id><snippet>\d*</snippet></ROW><ROW><id>11125615</id><snippet>[0-9]*</snippet></ROW><ROW><id>11125615</id><snippet>*</snippet></ROW><ROW><id>11125615</id><snippet>*</snippet></ROW><ROW><id>11125615</id><snippet>+</snippet></ROW><ROW><id>11125615</id><snippet>?</snippet></ROW><ROW><id>11125615</id><snippet>{}</snippet></ROW><ROW><id>11125615</id><snippet>*</snippet></ROW><ROW><id>11125615</id><snippet>+</snippet></ROW><ROW><id>11125615</id><snippet>?</snippet></ROW><ROW><id>11125615</id><snippet>c{4}</snippet></ROW><ROW><id>11125615</id><snippet>c{1,6}</snippet></ROW><ROW><id>11125615</id><snippet>[]</snippet></ROW><ROW><id>11125615</id><snippet>[abc]</snippet></ROW><ROW><id>11125615</id><snippet>[a-z]</snippet></ROW><ROW><id>11125615</id><snippet>[A-Z]</snippet></ROW><ROW><id>11125615</id><snippet>[a-zA-Z]</snippet></ROW><ROW><id>11125615</id><snippet>[0-9,\.+-e]</snippet></ROW><ROW><id>11125615</id><snippet>^</snippet></ROW><ROW><id>11125615</id><snippet>[]</snippet></ROW><ROW><id>11125615</id><snippet>[^0-9]</snippet></ROW><ROW><id>11125615</id><snippet>[^a-z]</snippet></ROW><ROW><id>11125615</id><snippet>\s</snippet></ROW><ROW><id>11125615</id><snippet>\d</snippet></ROW><ROW><id>11125615</id><snippet>[0-9]</snippet></ROW><ROW><id>11125615</id><snippet>\D</snippet></ROW><ROW><id>11125615</id><snippet>[^0-9]</snippet></ROW><ROW><id>11125615</id><snippet>\S</snippet></ROW><ROW><id>11125615</id><snippet>\w</snippet></ROW><ROW><id>11125615</id><snippet>\W</snippet></ROW><ROW><id>11125615</id><snippet>()</snippet></ROW><ROW><id>11125615</id><snippet>findall</snippet></ROW><ROW><id>11125615</id><snippet>(\d{8})</snippet></ROW><ROW><id>11125615</id><snippet>[0-9]{8}</snippet></ROW><ROW><id>11125688</id><snippet>api.get_zone_stats(3, "daily", "%s", "%s" %(last_month, getdate))
</snippet></ROW><ROW><id>11125688</id><snippet>%</snippet></ROW><ROW><id>11125688</id><snippet>"%s" %(last_month, getdate)
</snippet></ROW><ROW><id>11125688</id><snippet>%s</snippet></ROW><ROW><id>11125688</id><snippet>api.get_zone_stats(3, "daily", "{0}".format(last_month), "{0}".format(getdate))
</snippet></ROW><ROW><id>11125688</id><snippet>api.get_zone_stats(3, "daily", str(last_month), str(getdate))
</snippet></ROW><ROW><id>11126019</id><snippet>str()</snippet></ROW><ROW><id>11126019</id><snippet>class myFloat( float ):
    def __str__(self):
        return "%.12f"%self

 x = myFloat( 17510.3889778429 )
 print "%s"%x
</snippet></ROW><ROW><id>11126019</id><snippet>17510.388977842900
</snippet></ROW><ROW><id>11126099</id><snippet>with</snippet></ROW><ROW><id>11126099</id><snippet>reader = csv.reader(filein, skipinitialspace = True)
listofxys = []
for row in reader:
    listofxys.append(row)
</snippet></ROW><ROW><id>11126099</id><snippet>reader = list(csv.reader(filein, skipinitialspace = True))</snippet></ROW><ROW><id>11126099</id><snippet>zip()</snippet></ROW><ROW><id>11126099</id><snippet>import csv

with open("test") as filein:
    reader = csv.reader(filein, skipinitialspace = True)
    xs, ys = zip(*reader)

print(xs)
print(ys)
</snippet></ROW><ROW><id>11126099</id><snippet>('10', '2', '5', '7', '9', '3', '2', '6', '0', '5')
('5', '4', '6', '8', '12', '45', '4', '5', '3', '6')
</snippet></ROW><ROW><id>11126099</id><snippet>csv.QUOTE_NONNUMERIC</snippet></ROW><ROW><id>11126099</id><snippet>reader = csv.reader(filein, quoting=csv.QUOTE_NONNUMERIC, skipinitialspace = True)</snippet></ROW><ROW><id>11126099</id><snippet>(10.0, 2.0, 5.0, 7.0, 9.0, 3.0, 2.0, 6.0, 0.0, 5.0)
(5.0, 4.0, 6.0, 8.0, 12.0, 45.0, 4.0, 5.0, 3.0, 6.0)
</snippet></ROW><ROW><id>11126324</id><snippet>with open("yourFile") as fd:
    arr = [x.strip().split() for x in fd.read().split("done")][:-1]
</snippet></ROW><ROW><id>11126324</id><snippet>[['eggs'], ['bacon'], ['ham', 'cheese']]
</snippet></ROW><ROW><id>11126324</id><snippet>with open("yourFile") as fd:
    l = [x.strip().split() for x in fd.read().split("done")][:-1]
    print dict(zip(map(str,range(len(l))),l))
</snippet></ROW><ROW><id>11126505</id><snippet>debug=False</snippet></ROW><ROW><id>11126505</id><snippet>threading.Timer</snippet></ROW><ROW><id>11126505</id><snippet>import random, threading, webbrowser

port = 5000 + random.randint(0, 999)
url = "http://127.0.0.1:{}".format(port)

threading.Timer(1.25, lambda: webbrowser.open(url) ).start()

app.run(port=port, debug=False)
</snippet></ROW><ROW><id>11126505</id><snippet>if __name__ == '__main__':</snippet></ROW><ROW><id>11126581</id><snippet>re</snippet></ROW><ROW><id>11126581</id><snippet>import urllib
import re

url = 'http://www.rob389.com/dp/tr/11/9789754681383'
txt = urllib.urlopen(url).read()
pat = re.compile(r'tOBJ\.DATA\[0\]\.(\w+)\s*=\s*([^;]*);', flags=re.M|re.DOTALL)
my_dict = dict((k,v.strip('"')) for k,v in pat.findall(txt))
</snippet></ROW><ROW><id>11126581</id><snippet>'MMM00_ITEM_CODE': '9789751028440',
'MMM00_ORG_TITLE': '026512',
'MMM00_SRC_CODE': '9789754681383',
'MMM00_TITLE': 'Uykusuz Bir Gece',
'MMM00_TYPE': 'M',
'MMM00_WEIGHT': '0',
'MMM00_WIDTH': '13.6',
</snippet></ROW><ROW><id>11126581</id><snippet>my_dict = dict((k,v.strip('"')) for k,v in pat.findall(txt) if k.startswith('MMM00'))
</snippet></ROW><ROW><id>11126599</id><snippet>myVar1</snippet></ROW><ROW><id>11126599</id><snippet>myVar2</snippet></ROW><ROW><id>11126599</id><snippet>myfile.py</snippet></ROW><ROW><id>11126599</id><snippet>import myfile</snippet></ROW><ROW><id>11126599</id><snippet>runTests.py</snippet></ROW><ROW><id>11126599</id><snippet>myfile.myVar1 = sys.argv[1]
</snippet></ROW><ROW><id>11126599</id><snippet>myVar1</snippet></ROW><ROW><id>11126599</id><snippet>import myfile</snippet></ROW><ROW><id>11126599</id><snippet>myfile.myVar1
</snippet></ROW><ROW><id>11126843</id><snippet>hdf5write(fname,'/data',dataVariable)</snippet></ROW><ROW><id>11126843</id><snippet>import h5py

r=h5py.File(fname,'r+')
data=r['data']
</snippet></ROW><ROW><id>11126843</id><snippet>print data[:,:,:,1]
</snippet></ROW><ROW><id>11126843</id><snippet>dataMem=data[:]
</snippet></ROW><ROW><id>11126844</id><snippet>class CMixin:
    def method3(self):
        return self.method1()+self.method2()

class C1(A,B, CMixin):
    pass

class C2(A2,B, CMixin):
    pass
</snippet></ROW><ROW><id>11126844</id><snippet>class C:
    def __init__(self, a, b):
        self.a = a
        self.b = b

    def method3(self):
        return self.a.method1() + self.b.method2()


c1 = C(a1, b)
c2 = C(a2, b)
</snippet></ROW><ROW><id>11126886</id><snippet>array_filter</snippet></ROW><ROW><id>11126886</id><snippet>$positive = array_filter($numbers, function($x) { return $x &gt; 0; });
$negative = array_filter($numbers, function($x) { return $x &lt; 0; });
</snippet></ROW><ROW><id>11126886</id><snippet>array_map</snippet></ROW><ROW><id>11126886</id><snippet>intval</snippet></ROW><ROW><id>11126886</id><snippet>$positive = array_map('intval', array_filter($numbers, function($x) { return $x &gt; 0; }));
$negative = array_map('intval', array_filter($numbers, function($x) { return $x &lt; 0; }));
</snippet></ROW><ROW><id>11126962</id><snippet> f = open("c:/dir/jsondec.json")
 data = json.load(f)
</snippet></ROW><ROW><id>11126962</id><snippet>data</snippet></ROW><ROW><id>11126962</id><snippet> node = data['properties']['stock']['properties']['warehouse']
 print str(node)
</snippet></ROW><ROW><id>11127102</id><snippet>a = [1,2,3]
b = [4,5,6]

ab = []

for x in a:
    for y in b:
        ab.append(x * y)

print(ab)

[4, 5, 6, 8, 10, 12, 12, 15, 18]
</snippet></ROW><ROW><id>11127102</id><snippet>a = [1,2,3]
b = [4,5,6]

ab = [ x * y for x in a for y in b ]

print(ab)

[4, 5, 6, 8, 10, 12, 12, 15, 18]
</snippet></ROW><ROW><id>11127102</id><snippet>for ... ab.append(x * y)</snippet></ROW><ROW><id>11127102</id><snippet>[ x * y for ... ]</snippet></ROW><ROW><id>11127102</id><snippet>ab = ( x * y for x in a for y in b )
</snippet></ROW><ROW><id>11127102</id><snippet>print(ab)
&lt;generator object &lt;genexpr&gt; at 0x4d7058&gt;

print( list(ab) )
[4, 5, 6, 8, 10, 12, 12, 15, 18]
</snippet></ROW><ROW><id>11127102</id><snippet>[a[x] * b[y] for x,_a in enumerate(a) for y,_b in enumerate(b)]
</snippet></ROW><ROW><id>11127102</id><snippet>from operator import mul

a = [1,2,3]
b = [4,5,6]

ab = list(map(mul, a,b))

print(ab)

[4, 10, 18]
</snippet></ROW><ROW><id>11127102</id><snippet>ab = map(mul, a,b)
</snippet></ROW><ROW><id>11127102</id><snippet>&lt; generator &gt;</snippet></ROW><ROW><id>11127102</id><snippet>print(ab)
&gt;&gt;&gt; &lt;map object at 0x4d4eb0&gt;

print( list(ab) )
&gt;&gt;&gt; [4, 10, 18]
</snippet></ROW><ROW><id>11127102</id><snippet>a = [1,2,3]
b = [4,5,6]
c = [7,8,9]

abc = list(map(lambda x,y,z: x * y * z, a,b,c))

print(abc)

[28, 80, 162]
</snippet></ROW><ROW><id>11127102</id><snippet>from itertools import product
from functools import reduce
from operator import mul

a = [1,2,3]
b = [4,5,6]

ab = list(map(lambda x: reduce(mul,x), product(a,b)))
--or--
ab = list(map(lambda x: mul(*x), product(a,b)))

print(ab)

[4, 5, 6, 8, 10, 12, 12, 15, 18]
</snippet></ROW><ROW><id>11127345</id><snippet>datafile = open("temp.txt", "r")
record = datafile.readline()

while record != '':
    d1 = record.strip("\n").split(",")
    print d1[0],float (d1[1])
    record = datafile.readline()

datafile.close()
</snippet></ROW><ROW><id>11127446</id><snippet>int(''.join(your_list), 16)
</snippet></ROW><ROW><id>11127523</id><snippet>from django.db.models import Count

popular_events = Events.objects.annotate(attendee_count=Count('attendee')).filter(attendee_count__gt=50)
</snippet></ROW><ROW><id>11127597</id><snippet>In [1]: from lxml import etree

In [2]: tree = etree.parse('awful.xml')

In [3]: data = {int(node.attrib['id']): node.tail.strip()
   ...: for node in tree.xpath('//TextWithNodes/Node') if node.tail.strip()}

In [4]: data
Out[4]: 
{0: 'MESSAGE SET',
 20: '1. 1/1/09 - sample text 1',
 212: 'sample text 2',
 223: 'sample text 3'}
</snippet></ROW><ROW><id>11127597</id><snippet>strip</snippet></ROW><ROW><id>11127597</id><snippet>\t\n</snippet></ROW><ROW><id>11127597</id><snippet>tail</snippet></ROW><ROW><id>11127618</id><snippet>vertices = numpy.array([0.5, 0.5, -0.5, 0.5, -0.5, -0.5, 0.5, -0.5], 
                       dtype='float32')
</snippet></ROW><ROW><id>11127618</id><snippet>glVertexPointer(2, GL_FLOAT, 0, None)</snippet></ROW><ROW><id>11127738</id><snippet>.send()</snippet></ROW><ROW><id>11127738</id><snippet>pyramid_tm</snippet></ROW><ROW><id>11127738</id><snippet>send()</snippet></ROW><ROW><id>11127738</id><snippet>.send_immediately()</snippet></ROW><ROW><id>11127903</id><snippet>{% include %}</snippet></ROW><ROW><id>11127903</id><snippet>{% include "mess.html" %}</snippet></ROW><ROW><id>11127903</id><snippet>RequestHandler</snippet></ROW><ROW><id>11127903</id><snippet>RequestHandler</snippet></ROW><ROW><id>11128014</id><snippet>collections.deque</snippet></ROW><ROW><id>11128014</id><snippet>from collections import deque

def textwindow(filename, numlines):
    with open(filename) as f:
        window   = deque((f.readline() for i in xrange(numlines)), maxlen=numlines)
        nextline = True
        while nextline:
            text = "".join(window)
            yield text
            nextline = f.readline()
            window.append(nextline)

 for text in textwindow("bigfile.txt", 10):
     # test to see whether your regex matches and do something
</snippet></ROW><ROW><id>11128067</id><snippet>with open(filename, 'w') as f:
    ...
    while 1:
        *poll register*
        f.write(fp0)
        f.flush()
        sleep(1)
</snippet></ROW><ROW><id>11128080</id><snippet>with open('/tmp/ba.data') as dataF:
    oldk, oldsub = None, None
    for key, subi in groupby(map(str.split,dataF), lambda x: (x[1],x[2])):
        if oldk == None:
            oldk, oldsub = key, list(subi)
        else:       
            newsub = list(subi)
            print ' '.join(oldk), '-&gt;', ' '.join(key), float(oldsub[-1][3])-float(newsub[0][3])
            oldk, oldsub = None, None
</snippet></ROW><ROW><id>11128080</id><snippet>07:00:00 B -&gt; 07:00:00 A 0.0
07:00:00 B -&gt; 07:00:00 A -2.0
07:00:01 B -&gt; 07:00:01 A -2.0
07:00:02 A -&gt; 07:00:03 B 2.0
07:00:03 A -&gt; 07:00:03 B 1.0
07:00:04 A -&gt; 07:00:04 B 1.0
</snippet></ROW><ROW><id>11128080</id><snippet>if oldk == None:
</snippet></ROW><ROW><id>11128080</id><snippet>if oldk == None or oldk[0] != key[0]:
</snippet></ROW><ROW><id>11128080</id><snippet>07:00:00 B -&gt; 07:00:00 A 0.0
07:00:00 B -&gt; 07:00:00 A -2.0
07:00:01 B -&gt; 07:00:01 A -2.0
07:00:03 B -&gt; 07:00:03 A -1.0
07:00:04 A -&gt; 07:00:04 B 1.0
</snippet></ROW><ROW><id>11128192</id><snippet>mailserver #lamson project
- lamson files
webapp #django 1.4 app
- settings.py ...
</snippet></ROW><ROW><id>11128192</id><snippet>import sys
import os
sys.path.append('../webapp')

os.environ['DJANGO_SETTINGS_MODULE'] = 'settings'
</snippet></ROW><ROW><id>11128192</id><snippet>import emails.models
</snippet></ROW><ROW><id>11128533</id><snippet>dir()</snippet></ROW><ROW><id>11128533</id><snippet>Windows -&gt; Preferences -&gt; PyDev -&gt; Interpreter -&gt; Python -&gt; Forced Builtins
</snippet></ROW><ROW><id>11128996</id><snippet>with hide('running', 'stdout', 'stderr'):
    run('echo -e "%s\n%s\n" | sudo passwd %s' % (passwd, passwd, user))
</snippet></ROW><ROW><id>11128996</id><snippet>child = pexpect.spawn('some command that expects password')
child.expect('Enter password:')  
child.sendline('somepassword')
child.expect('Enter password:')  --- passwd may ask twice
child.sendline('somepassword')
child.expect(pexpect.EOF, timeout=None)
...
</snippet></ROW><ROW><id>11129206</id><snippet>&gt;&gt;&gt; ts = 1340241300
&gt;&gt;&gt; import datetime
&gt;&gt;&gt; from dateutil import tz
&gt;&gt;&gt; dt = datetime.datetime.fromtimestamp(ts).replace(tzinfo=tz.tzutc())
&gt;&gt;&gt; dt
datetime.datetime(2012, 6, 20, 21, 15, tzinfo=tzutc())
</snippet></ROW><ROW><id>11129206</id><snippet>&gt;&gt;&gt; import numpy as np
&gt;&gt;&gt; np.datetime64(dt.isoformat())
numpy.datetime64('2012-06-20T17:15:00-0400')
</snippet></ROW><ROW><id>11129324</id><snippet>sudo python your_python_script.py
</snippet></ROW><ROW><id>11129324</id><snippet>sudo chmod a+rw /path/to/folder/that/you/want/to/write/to
</snippet></ROW><ROW><id>11129330</id><snippet>And I also want the program to be able to identify colors.</snippet></ROW><ROW><id>11129330</id><snippet>numpy</snippet></ROW><ROW><id>11129330</id><snippet>PIL</snippet></ROW><ROW><id>11129330</id><snippet>image[xloc][yloc][rgbcolor]</snippet></ROW><ROW><id>11129330</id><snippet>image[xloc][yloc][red]</snippet></ROW><ROW><id>11129330</id><snippet>numpy</snippet></ROW><ROW><id>11129511</id><snippet>for idx, (bl, dl) in enumerate(zip(buttonlist, daylist)):
    TKinter.Button(text=dl, command=lambda: button_pressed(bl))
</snippet></ROW><ROW><id>11129511</id><snippet>def button_pressed(which):
    print 'I am button {}'.format(b1)
</snippet></ROW><ROW><id>11129725</id><snippet>count  = 0
coin=[200,100,50,20,10,5,2,1]
total=[200,0,0,0,0,0,0,0]

def func(i):
    global count,total,coin
    for x in range(total[i-1]/coin[i-1]+1):
        total[i]=total[i-1]-x*coin[i-1]
        if (i == 7):
            count += 1
        else:
            func(i+1)
</snippet></ROW><ROW><id>11129869</id><snippet>import numpy
from matplotlib import pyplot as plt

if __name__ == '__main__':
    x = [1, 2, 3]
    plt.ion() # turn on interactive mode
    for loop in range(0,3):
        y = numpy.dot(x, loop)
        plt.figure()
        plt.plot(x,y)
        plt.show()
        _ = raw_input("Press [enter] to continue.")
</snippet></ROW><ROW><id>11129869</id><snippet>import numpy
from matplotlib import pyplot as plt
if __name__ == '__main__':
    x = [1, 2, 3]
    plt.ion() # turn on interactive mode, non-blocking `show`
    for loop in range(0,3):
        y = numpy.dot(x, loop)
        plt.figure()   # create a new figure
        plt.plot(x,y)  # plot the figure
        plt.show()     # show the figure, non-blocking
        _ = raw_input("Press [enter] to continue.") # wait for input from the user
        plt.close()    # close the figure to show the next one.
</snippet></ROW><ROW><id>11129869</id><snippet>plt.ion()</snippet></ROW><ROW><id>11129869</id><snippet>plt.show</snippet></ROW><ROW><id>11129869</id><snippet>import numpy
import time
from matplotlib import pyplot as plt

if __name__ == '__main__':
    x = [1, 2, 3]
    plt.ion()
    for loop in xrange(1, 4):
        y = numpy.dot(loop, x)
        plt.close()
        plt.figure()
        plt.plot(x,y)
        plt.draw()
        time.sleep(2)
</snippet></ROW><ROW><id>11129889</id><snippet>val = my_dict.get(key, mydefaultval)
</snippet></ROW><ROW><id>11130121</id><snippet>json</snippet></ROW><ROW><id>11130121</id><snippet>default</snippet></ROW><ROW><id>11130121</id><snippet>simplejson</snippet></ROW><ROW><id>11130121</id><snippet>namedtuple_as_object</snippet></ROW><ROW><id>11130121</id><snippet>simplejson.dump</snippet></ROW><ROW><id>11130121</id><snippet>simplejson.dumps(x, cls=TestEncoder, namedtuple_as_object=True)
</snippet></ROW><ROW><id>11130148</id><snippet>define TMP_PYTHON_PROG
print 'hello'
print 'world'
endef

export TMP_PYTHON_PROG
target:
    @python -c "$$TMP_PYTHON_PROG"
</snippet></ROW><ROW><id>11130148</id><snippet>define</snippet></ROW><ROW><id>11130148</id><snippet>endef</snippet></ROW><ROW><id>11130148</id><snippet>export</snippet></ROW><ROW><id>11130148</id><snippet>$$</snippet></ROW><ROW><id>11130235</id><snippet>data</snippet></ROW><ROW><id>11130235</id><snippet>indices</snippet></ROW><ROW><id>11130235</id><snippet>indptr</snippet></ROW><ROW><id>11130235</id><snippet>csr_matrix</snippet></ROW><ROW><id>11130306</id><snippet>import urllib2

proxy  = urllib2.ProxyHandler({'https': 'IP:PORT'})
opener = urllib2.build_opener(proxy)
urllib2.install_opener(opener)

my_ip = urllib2.urlopen('http://whatthehellismyip.com/?ipraw').read()
print my_ip
</snippet></ROW><ROW><id>11130395</id><snippet>$ cd ~/path/to/gothonweb/
python bin/app.py
</snippet></ROW><ROW><id>11130395</id><snippet>$ cd bin/   # WRONG! WRONG! WRONG!
$ python app.py  # WRONG! WRONG! WRONG!
</snippet></ROW><ROW><id>11130506</id><snippet>string</snippet></ROW><ROW><id>11130506</id><snippet>string.whitespace</snippet></ROW><ROW><id>11130506</id><snippet>if all(c in string.whitespace for c in teststring):
   # contains only whitespace
</snippet></ROW><ROW><id>11130506</id><snippet>.strip()</snippet></ROW><ROW><id>11130506</id><snippet>.split()</snippet></ROW><ROW><id>11130506</id><snippet>.isspace</snippet></ROW><ROW><id>11130506</id><snippet>if all(c.isspace() for c in teststring):
    # contains only whitespace      
</snippet></ROW><ROW><id>11130506</id><snippet>.isspace</snippet></ROW><ROW><id>11130506</id><snippet>if teststring.isspace():
    # contains only whitespace
</snippet></ROW><ROW><id>11130532</id><snippet>f = open("c:/dir/jsondec.json")
data = json.load(f)
node = data['properties']['stock']['properties']['warehouse']
print str(node)
</snippet></ROW><ROW><id>11130532</id><snippet>$f = file_get_contents('c:/dir/jsondec.json');
$data = json_decode($f, true);
$node = $data['properties']['stock']['properties']['warehouse'];
echo $node;
</snippet></ROW><ROW><id>11130532</id><snippet>f</snippet></ROW><ROW><id>11130532</id><snippet>$f</snippet></ROW><ROW><id>11130532</id><snippet>Array</snippet></ROW><ROW><id>11130532</id><snippet>print_r($node);
</snippet></ROW><ROW><id>11130532</id><snippet>var_dump($node);
</snippet></ROW><ROW><id>11130532</id><snippet>echo $node;
</snippet></ROW><ROW><id>11130532</id><snippet>json_decode()</snippet></ROW><ROW><id>11130550</id><snippet>subprocess</snippet></ROW><ROW><id>11130550</id><snippet>args</snippet></ROW><ROW><id>11130550</id><snippet>args = [    imagemagick,
            filename + "_b.bmp",
            filename + "_w.bmp",
            "-alpha", "off", "( ... )", "-composite",
            filename + ".png" ]
</snippet></ROW><ROW><id>11130550</id><snippet>( ... )</snippet></ROW><ROW><id>11130550</id><snippet>args</snippet></ROW><ROW><id>11130613</id><snippet>win32clipboard.pyd</snippet></ROW><ROW><id>11130613</id><snippet>win32clipboard.pyd</snippet></ROW><ROW><id>11130613</id><snippet>pywintypes27.dll</snippet></ROW><ROW><id>11130613</id><snippet>c:\windows\system32</snippet></ROW><ROW><id>11130613</id><snippet>c:\windows\system32\pywintypes27.dll</snippet></ROW><ROW><id>11130613</id><snippet>build\exe.win32-2.7</snippet></ROW><ROW><id>11130613</id><snippet>setup.py bdist_msi</snippet></ROW><ROW><id>11130613</id><snippet>import os
import sys
import win32api
...
pywintypes_dll = 'pywintypes{0}{1}.dll'.format(*sys.version_info[0:2])      # e.g. pywintypes27.dll
build_exe_options = {..., "include_files": [ (os.path.join(win32api.GetSystemDirectory(), pywintypes_dll), pywintypes_dll)]}
...
setup(  ...,
        options = { 'build_exe': build_exe_options, 
                    ...,
                  },
        ...)
</snippet></ROW><ROW><id>11130613</id><snippet>pywintype27.dll</snippet></ROW><ROW><id>11130701</id><snippet>&gt;&gt;&gt; import boto
&gt;&gt;&gt; c = boto.connect_s3()
&gt;&gt;&gt; rs = c.get_all_buckets()
</snippet></ROW><ROW><id>11130796</id><snippet>web.sendmail(from_address, to_address, subject, msg, headers={'Content-Type':'text/html;charset=utf-8'})
</snippet></ROW><ROW><id>11130796</id><snippet>def prepare_message(self):
    for k, v in self.headers.iteritems():
        if k.lower() == "content-type":
            self.message.set_type(v)
        else:
            self.message.add_header(k, v)

    self.headers = {}
</snippet></ROW><ROW><id>11130804</id><snippet>for line in open('data.txt'):
   # etc
</snippet></ROW><ROW><id>11130804</id><snippet>inf = open('data.txt')
for line in inf:
   # etc
inf.close()
</snippet></ROW><ROW><id>11130804</id><snippet>try/finally</snippet></ROW><ROW><id>11130804</id><snippet>inf = open('data.txt')
try:
    for line in inf:
       # etc
finally:
    inf.close()
</snippet></ROW><ROW><id>11130804</id><snippet>with</snippet></ROW><ROW><id>11130804</id><snippet>with open('data.txt') as inf:
    for line in inf:
       #etc
</snippet></ROW><ROW><id>11130804</id><snippet>try/finally</snippet></ROW><ROW><id>11130820</id><snippet>from gi.repository import Gtk</snippet></ROW><ROW><id>11130820</id><snippet>Gtk.IconSize.BUTTON</snippet></ROW><ROW><id>11130820</id><snippet>import pygtk</snippet></ROW><ROW><id>11130820</id><snippet>import gtk</snippet></ROW><ROW><id>11130820</id><snippet>gtk.ICON_SIZE_BUTTON</snippet></ROW><ROW><id>11130837</id><snippet>{'key1': 'val1', 1: 'val2'}</snippet></ROW><ROW><id>11130841</id><snippet>wx.App</snippet></ROW><ROW><id>11130841</id><snippet>wx.Event</snippet></ROW><ROW><id>11130841</id><snippet>self</snippet></ROW><ROW><id>11130934</id><snippet>unicode_literals</snippet></ROW><ROW><id>11130934</id><snippet>generators</snippet></ROW><ROW><id>11130934</id><snippet>with_statement</snippet></ROW><ROW><id>11130977</id><snippet>import numpy as np
x = np.arange(10)
x2 = x[x&lt;5]
</snippet></ROW><ROW><id>11130977</id><snippet>np.all</snippet></ROW><ROW><id>11130977</id><snippet>y = np.arange(12).reshape(3,4)

b = y &lt; 6
b1 = np.all(b, axis=0)
b2 = np.all(b, axis=1)

y1 = y[b1]
y2 = y[b2]
</snippet></ROW><ROW><id>11131055</id><snippet>self.response.out.write(today.strftime("""&lt;html&gt;&lt;body&gt;&lt;p style='color:#3E3535'&gt;%A, %d %B&lt;/p&gt;"""))
</snippet></ROW><ROW><id>11131092</id><snippet>class Meta</snippet></ROW><ROW><id>11131092</id><snippet>class Vote(models.Model):
    VOTE_ENUM = (
        (VoteEnum.DOWN_VOTE, VoteEnum.toString(VoteEnum.DOWN_VOTE)),
        (VoteEnum.NONE, VoteEnum.toString(VoteEnum.NONE)),
        (VoteEnum.UP_VOTE, VoteEnum.toString(VoteEnum.UP_VOTE)),

    )
    question = models.ForeignKey(Question, null=False, editable=False, blank=False)
    voter = models.ForeignKey(User, blank=False, null=False, editable=False)
    vote_type = models.SmallIntegerField(default=0, null=False, blank=False, choices=VOTE_ENUM)

    class Meta:
        abstract = True

    def is_upvote(self):
        return self.vote_type &gt; 0
    def is_downvote(self):
        return self.vote_type &lt; 0

class VoteAnswer(Vote):
    answer = models.ForeignKey(Answer, null=False, editable=False, blank=False)

    class Meta:
        unique_together = (("voter", "answer"),) # to prevent user from voting on the same question/answer/comment again

    def __unicode__(self):
        vote_type = "UP" if vote_type &gt; 0 else ("DOWN" if vote_type &lt; 0 else "NONE")
        return u"{0}: [{1}] {2}".format(user.username, vote_type, answer.text[:32])

    def is_upvote(self):
        return "FOO! "+str(super(VoteAnswer, self).is_upvote())

class VoteComment(Vote):
    comment = models.ForeignKey(Comment, null=False, editable=False, blank=False)

    class Meta:
        unique_together = (("voter", "comment"),) # to prevent user from voting on the same question/answer/comment again

    def __unicode__(self):
        vote_type = "UP" if vote_type &gt; 0 else ("DOWN" if vote_type &lt; 0 else "NONE")
        return u"{0}: [{1}] {2}".format(user.username, vote_type, comment.text[:32])

    def is_upvote(self):
        return "BAR!"
</snippet></ROW><ROW><id>11131097</id><snippet>sym</snippet></ROW><ROW><id>11131097</id><snippet>sym</snippet></ROW><ROW><id>11131097</id><snippet>lst = (100,100)</snippet></ROW><ROW><id>11131097</id><snippet>for</snippet></ROW><ROW><id>11131097</id><snippet>lst</snippet></ROW><ROW><id>11131097</id><snippet>for x,y in (100,100):
    ...
</snippet></ROW><ROW><id>11131097</id><snippet>def sym(lst):
    x,y=lst
    tmp=x*y
    if rec(tmp):
        return tmp
    else:
        return None  #max will ignore None values since None &gt; x is always False.
</snippet></ROW><ROW><id>11131097</id><snippet>Pool</snippet></ROW><ROW><id>11131097</id><snippet>Pool.map()</snippet></ROW><ROW><id>11131097</id><snippet>map</snippet></ROW><ROW><id>11131189</id><snippet>type(cls,parents,attributes)</snippet></ROW><ROW><id>11131189</id><snippet>type</snippet></ROW><ROW><id>11131189</id><snippet>__metaclass__</snippet></ROW><ROW><id>11131189</id><snippet>type.__new__(meta, cls, parents, attrs)</snippet></ROW><ROW><id>11131189</id><snippet>__metaclass__</snippet></ROW><ROW><id>11131189</id><snippet>__metaclass__</snippet></ROW><ROW><id>11131189</id><snippet>def __metaclass__(cls, bases, attrs):
    type.__new__(metaclassGoesHere, cls, bases, attrs)
</snippet></ROW><ROW><id>11131189</id><snippet>metaclassGoesHere</snippet></ROW><ROW><id>11131274</id><snippet>from itertools import islice

def window(seq, n=2):
    """
    Returns a sliding window (of width n) over data from the iterable
    s -&gt; (s0,s1,...s[n-1]), (s1,s2,...,sn), ...                   
    """
    it = iter(seq)
    result = list(islice(it, n))
    if len(result) == n:
        yield result    
    for elem in it:
        result = result[1:] + [elem]
        yield result

def contains_sequence(all_values, seq):
    return any(seq == current_seq for current_seq in window(all_values, len(seq)))            

test_iterable = [1,2,3]
search_sequence = [1,2]

result = contains_sequence(test_iterable, search_sequence)
</snippet></ROW><ROW><id>11131692</id><snippet>cd Desktop</snippet></ROW><ROW><id>11131692</id><snippet>No such file or directory: 'File_1.xls'
</snippet></ROW><ROW><id>11131847</id><snippet>global</snippet></ROW><ROW><id>11131847</id><snippet>trackLocations</snippet></ROW><ROW><id>11131847</id><snippet>from Tkinter import *
import mp3play
import tkFileDialog
import Tkinter
import tkFont
import Tkinter as tk

class musicplay:
    def __init__(self):
        self.music = None
        self.play_list = []
        self.trackLocations = []

        self.root = tk.Tk()
        self.root.title("EmoPlayer")

        self.root.configure(background='black')
        self.root.geometry('300x100+750+300')

        self.filename = Tkinter.StringVar()
        self.name = Tkinter.StringVar()
        self.play_list = Tkinter.StringVar()

        menubar = Menu(self.root)
        filemenu = Menu(menubar, tearoff=0, bg="black", fg="Orange")
        menubar.add_cascade(label='File', menu = filemenu)
        filemenu.add_command(label='Open', command = self.open_file)
        filemenu.add_separator()
        filemenu.add_command(label='Exit', command = self.Exit)
        self.root.config(menu=menubar)

        open_file = Button(self.root, width = 6, height = 1,
                           text = 'Mood',fg='Orange', bg='black')
        open_file.grid(row=0, column=3)

        play_button = Button(self.root, width = 5, height = 1, text='Play',
                             fg='Orange', command = self.play, bg="black")
        play_button.grid(row=0, column=0, sticky = W)

        stop_button = Button(self.root, width = 5, height = 1, text='Stop',
                             fg='Orange', command = self.stop, bg="black")
        stop_button.grid(row=0, column=1, sticky = W)

        pause_button = Button(self.root, width = 5, height = 1, text='Pause',
                              fg='Orange', command = self.pause, bg="black")
        pause_button.grid(row=0, column=2)

        self.volume_slider = Scale(self.root, label='Volume',
                              orient = 'horizontal', fg = 'Orange', 
                              command = self.vol, bg="black")
        self.volume_slider.grid(row=0, column=4)

        file_name_label = Label(self.root, font=('Comic Sans', 8),
                                fg = 'Orange', wraplength = 300,
                                textvariable=self.name, bg="black")
        file_name_label.grid(row=3, column=0, columnspan=8)

        play_list_window = Toplevel(self.root, height = 150, width = 100)
        play_list_window.title("Playlist")
        self.play_list_display = Listbox(play_list_window, selectmode=EXTENDED,
                                    width = 50, bg="Dark Slate grey",
                                    fg="Orange")
        self.play_list_display.bind("&lt;Double-Button-1&gt;", self.tune_changed)
        self.play_list_display.pack()
        play_list_window.mainloop()

        self.root.mainloop()        

    def open_file(self):                                
        """
        Opens a dialog box to open .mp3 filemusic,
        then sends filename to file_name_label.
        """
        self.filename.set(tkFileDialog.askopenfilename(
            defaultextension = ".mp3",
            filetypes=[("All Types", ".*"), ("MP3", ".mp3")]))
        self.playlist = self.filename.get()
        playlist_pieces = self.playlist.split("/")
        self.play_list.set (playlist_pieces[-1])
        playl = self.play_list.get()
        self.play_list_display.insert(END, playl)
        print self.filename.get()
        self.music = mp3play.load(self.filename.get())
        pieces = self.filename.get().split("/")
        self.trackLocations += [self.filename.get()]
        self.name.set(pieces[-1])

    def play(self):
        """Plays the .mp3 file"""
        self.music.play()

    def stop(self):
        """Stops the .mp3 file"""
        self.music.stop()                

    def pause(self):
        """Pauses or unpauses the .mp3 file"""
        if self.music.ispaused():
            self.music.unpause()
        else:
            self.music.pause()

    def vol(self, event):
        """Allows volume to be changed with the slider"""
        v = Scale.get(self.volume_slider)
        try:
            self.music.volume(v)
        except:
            pass

    def tune_changed(self, event):
        idx = event.widget.curselection()[0]
        self.music = mp3play.load(self.trackLocations[int(idx)])
        print ("Now playing %s" % event.widget.get(idx))

    def Exit(self):
        exit()

if __name__ == "__main__":
    musicplay()
</snippet></ROW><ROW><id>11131858</id><snippet>import logging
log = logging.getLogger('')
</snippet></ROW><ROW><id>11131858</id><snippet>from logger import log
log.info('whatever')
</snippet></ROW><ROW><id>11131858</id><snippet>from logger import log
log.warn('some other thing')
</snippet></ROW><ROW><id>11131888</id><snippet>&gt;&gt;&gt; id = "3333333"
&gt;&gt;&gt; url = "https://example.com/%s" % id
&gt;&gt;&gt; print url
https://example.com/3333333
&gt;&gt;&gt; 
</snippet></ROW><ROW><id>11131888</id><snippet>&gt;&gt;&gt; url = "https://example.com/{0}".format(id)
&gt;&gt;&gt; print url
https://example.com/3333333
&gt;&gt;&gt; 
</snippet></ROW><ROW><id>11131888</id><snippet>avasal</snippet></ROW><ROW><id>11131888</id><snippet>f = open('file.txt', 'r')
for line in f.readlines():
    id = line.strip('\n')
    url = "https://example.com/{0}".format(id)
    urlobj = urllib.urlopen(url)
    try:
        json_data = json.loads(urlobj)
        print json_data
    except:
        print urlobj.readlines()
</snippet></ROW><ROW><id>11131918</id><snippet>source /etc/bash_completion.d/virtualenvwrapper
</snippet></ROW><ROW><id>11131918</id><snippet>.bashrc</snippet></ROW><ROW><id>11132413</id><snippet>set</snippet></ROW><ROW><id>11132413</id><snippet>dict</snippet></ROW><ROW><id>11132413</id><snippet>set</snippet></ROW><ROW><id>11132413</id><snippet>import re
from collections import Counter
import time

# names file downloaded from http://www.tucows.com/preview/520007
# the set contains over 5400 names
f = open('./names.txt', 'r')
names = [ name.rstrip() for name in f.read().split(',') ]
name_set = set(names) # set of unique names
names_dict = Counter(names) # Counter ~= dict of names with counts

# Expect: 246   lalala   name="Jack";surname="Smith"
pattern = re.compile(r'.*\sname="([^"]*)"')

def select_rows_set():
    f = open('./data.txt', 'r')
    out_f = open('./data_out_set.txt', 'a')
    for record in f.readlines():
        name = pattern.match(record).groups()[0]
        if name in name_set:
            out_f.write(record)
    out_f.close()
    f.close()

def select_rows_dict():
    f = open('./data.txt', 'r')
    out_f = open('./data_out_dict.txt', 'a')
    for record in f.readlines():
        name = pattern.match(record).groups()[0]
        if name in names_dict:
            out_f.write(record)
    out_f.close()
    f.close()

if __name__ == '__main__':
    # One round to time the use of name_set
    t0 = time.time()
    select_rows_set()
    t1 = time.time()
    time_for_set = t1-t0
    print 'Total set: ', time_for_set

    # One round to time the use of names_dict
    t0 = time.time()
    select_rows_dict()
    t1 = time.time()
    time_for_dict = t1-t0
    print 'Total dict: ', time_for_dict
</snippet></ROW><ROW><id>11132413</id><snippet>Counter</snippet></ROW><ROW><id>11132697</id><snippet>IndexError</snippet></ROW><ROW><id>11132697</id><snippet>ValueError</snippet></ROW><ROW><id>11132697</id><snippet>Exception</snippet></ROW><ROW><id>11132697</id><snippet>try:
    ...
except (ValueError, IndexError) as e:
    ...
</snippet></ROW><ROW><id>11132916</id><snippet>&gt;&gt;&gt; from Crypto.Cipher import AES
&gt;&gt;&gt; from Crypto import Random
&gt;&gt;&gt; key = b'Sixteen byte key'
&gt;&gt;&gt; iv = Random.new().read(AES.block_size)
&gt;&gt;&gt; cipher = AES.new(key, AES.MODE_CFB, iv)
&gt;&gt;&gt; msg = iv + cipher.encrypt(b'Attack at dawn')
&gt;&gt;&gt; msg.encode("hex")
'e10e096aabff9db382abe8d704404995a7b64d72a4e1b9e5208912d206c4'
</snippet></ROW><ROW><id>11132916</id><snippet>&gt;&gt;&gt; recv='e10e096aabff9db382abe8d704404995a7b64d72a4e1b9e5208912d206c4'
&gt;&gt;&gt; cipher.decrypt(recv.decode("hex"))[len(iv):]
'Attack at dawn'
&gt;&gt;&gt; 
</snippet></ROW><ROW><id>11132955</id><snippet>g = Gnuplot.Gnuplot(debug=1)
#xpos is always the same
xpos=0.0
for plotnr,datafile in enumerate(glob.glob('*.dat')):
    #ypos as a function of the plot-number, e.g.
    ypos=plotnr*2.0
    g("set key at "+str(xpos)+","+str(ypos))
    d = Gnuplot.File(datafile, using='1:2', with_='l', title=datafile)
    g.plot(d)
</snippet></ROW><ROW><id>11132965</id><snippet>ctypes</snippet></ROW><ROW><id>11132965</id><snippet>ctypes.c_void_p(offset)
</snippet></ROW><ROW><id>11132965</id><snippet>VBO</snippet></ROW><ROW><id>11132983</id><snippet>scipy.interpolate.interp1d</snippet></ROW><ROW><id>11132983</id><snippet>x</snippet></ROW><ROW><id>11132983</id><snippet>&gt;&gt;&gt; from scipy.interpolate import interp1d
&gt;&gt;&gt; x = np.linspace(0, 10, 10)
&gt;&gt;&gt; y = np.array([np.exp(-x/3.0), 2*x])
&gt;&gt;&gt; f = interp1d(x, y)
&gt;&gt;&gt; f(2)
array([ 0.51950421,  4.        ])
&gt;&gt;&gt; np.array([np.exp(-2/3.0), 2*2])
array([ 0.51341712,  4.        ])
</snippet></ROW><ROW><id>11132983</id><snippet>x</snippet></ROW><ROW><id>11132983</id><snippet>y</snippet></ROW><ROW><id>11133063</id><snippet>(&lt;command&gt;, 1)
</snippet></ROW><ROW><id>11133958</id><snippet>counter = 1
for key, value in results.iteritems():
    if key == "results":
        svalue = str(value)
        while counter != -1:
            tweetposstart = svalue.find("u'text'",counter)
            tweetposend = svalue.find("u'from_user_name'",counter)
            if tweetposstart != -1:
                tweet = svalue[tweetposstart:tweetposend]
                print tweet
                counter = counter + tweetposstart
            else:
                counter = tweetposstart
</snippet></ROW><ROW><id>11133985</id><snippet>try-catch</snippet></ROW><ROW><id>11133985</id><snippet>commit()</snippet></ROW><ROW><id>11133985</id><snippet>session.flush()</snippet></ROW><ROW><id>11133985</id><snippet>session.add(c?)</snippet></ROW><ROW><id>11133985</id><snippet>add/flush</snippet></ROW><ROW><id>11133985</id><snippet>try-catch</snippet></ROW><ROW><id>11133985</id><snippet>def _add_coupon(c):
    """ @param c: instance of Coupon.  
        @return: True if success, False on failure.
    """
    try:
        session.add(c)
        session.flush()
        return True
    except sqlalchemy.exc.IntegrityError as err:
        # @todo: handle as appropriate: return existing instance [session.query(Coupon).filter(Coupon.value==c.value).one()] or re-raise
        logger.error("Tried to add a duplicate entry for the Coupon value [%s]. Aborting", c.value)
        return False
</snippet></ROW><ROW><id>11134063</id><snippet>app_label = 'global_variables'
</snippet></ROW><ROW><id>11134705</id><snippet>v1*(x-px) + v2*(y-py) + v3*(z-pz) = 0
</snippet></ROW><ROW><id>11134705</id><snippet>(x,y)</snippet></ROW><ROW><id>11134705</id><snippet>z</snippet></ROW><ROW><id>11134772</id><snippet>expr = pp.operatorPrecedence(clause,[ 
                            ("OR", 2, pp.opAssoc.LEFT, ), 
                            ("AND", 2, pp.opAssoc.LEFT, ),]) 
</snippet></ROW><ROW><id>11134772</id><snippet>expr = pp.operatorPrecedence(condition,[ 
                            ("OR", 2, pp.opAssoc.LEFT, ), 
                            ("AND", 2, pp.opAssoc.LEFT, ),]) 
</snippet></ROW><ROW><id>11134772</id><snippet>condition = (expr + operator + expr)
</snippet></ROW><ROW><id>11134772</id><snippet>condition = pp.Group(expr + operator + expr)
</snippet></ROW><ROW><id>11134772</id><snippet>x &gt; 7 AND x &lt; 8 OR x = 4</snippet></ROW><ROW><id>11134772</id><snippet>[[['x', '&gt;', '7'], 'AND', [['x', '&lt;', '8'], 'OR', ['x', '=', '4']]]]
</snippet></ROW><ROW><id>11134772</id><snippet>[['A', 'and', 'B'] 'and', 'C']
</snippet></ROW><ROW><id>11134772</id><snippet>['A', 'and', 'B', 'and', 'C']
</snippet></ROW><ROW><id>11134772</id><snippet>import pyparsing as pp

operator = pp.Regex("&gt;=|&lt;=|!=|&gt;|&lt;|=").setName("operator")
number = pp.Regex(r"[+-]?\d+(:?\.\d*)?(:?[eE][+-]?\d+)?")
identifier = pp.Word(pp.alphas, pp.alphanums + "_")
comparison_term = identifier | number 
condition = pp.Group(comparison_term + operator + comparison_term)

expr = pp.operatorPrecedence(condition,[
                            ("AND", 2, pp.opAssoc.LEFT, ),
                            ("OR", 2, pp.opAssoc.LEFT, ),
                            ])

print expr.parseString("x &gt; 7 AND x &lt; 8 OR x = 4")
</snippet></ROW><ROW><id>11134772</id><snippet>expr = pp.operatorPrecedence(condition,[
                            ("NOT", 1, pp.opAssoc.RIGHT, ),
                            ("AND", 2, pp.opAssoc.LEFT, ),
                            ("OR", 2, pp.opAssoc.LEFT, ),
                            ])
</snippet></ROW><ROW><id>11134772</id><snippet>comparison_term</snippet></ROW><ROW><id>11134772</id><snippet>operatorPrecedence</snippet></ROW><ROW><id>11134772</id><snippet>opPrec</snippet></ROW><ROW><id>11134772</id><snippet>opPrec</snippet></ROW><ROW><id>11134772</id><snippet>ParserElement.enablePackrat</snippet></ROW><ROW><id>11134901</id><snippet>collections.deque</snippet></ROW><ROW><id>11134901</id><snippet>.appendleft</snippet></ROW><ROW><id>11134901</id><snippet>.extendleft</snippet></ROW><ROW><id>11134901</id><snippet>appendleft</snippet></ROW><ROW><id>11134901</id><snippet>extendleft</snippet></ROW><ROW><id>11134901</id><snippet>def extendleft(self, other)
    for item in other:
        self.appendleft(c)
</snippet></ROW><ROW><id>11134901</id><snippet>a = b+a</snippet></ROW><ROW><id>11134901</id><snippet>a.extendleft(reversed(b))
</snippet></ROW><ROW><id>11136054</id><snippet>&lt;form action="/register/" method="post"&gt;
</snippet></ROW><ROW><id>11136054</id><snippet>&lt;form action="/register/" enctype="multipart/form-data" method="post"&gt;
</snippet></ROW><ROW><id>11136054</id><snippet>request.FILES['avatar']
</snippet></ROW><ROW><id>11136054</id><snippet>$upload_to</snippet></ROW><ROW><id>11136054</id><snippet>/home/dotcloud/data/media/photo</snippet></ROW><ROW><id>11136309</id><snippet>def parse_page1(self, response):
    item = MyItem()
    item['main_url'] = response.url
    request = Request("http://www.example.com/some_page.html",
                      callback=self.parse_page2)
    request.meta['item'] = item
    return request

def parse_page2(self, response):
    item = response.meta['item']
    item['other_url'] = response.url
    return item
</snippet></ROW><ROW><id>11136517</id><snippet>return</snippet></ROW><ROW><id>11136517</id><snippet>else</snippet></ROW><ROW><id>11136517</id><snippet>def safe(fun):
    def f(*args):
        if not args[0] == 0:
            return fun(*args)
        else:
            return "Division by 0"
    return f
</snippet></ROW><ROW><id>11136517</id><snippet>def safe(fun):
    def f(*args):
        try:
            return fun(*args)
        except ZeroDivisionError:
            return "Division by 0"
    return f
</snippet></ROW><ROW><id>11136731</id><snippet>printf("\x41\x42\x43\n");
</snippet></ROW><ROW><id>11136832</id><snippet>def func(x): # here x is a local variable which refers to the object[1,2,3]
    y = [4, 5, 6]
    x = y  #now the local variable x refers to the object [4,5,6]

def funcsecond(x): # here x is a local variable which refers to the object[1,2,3]
    y = [4, 5, 6]
    x[1] = y[1]  # it means [1,2,3][1]=5 , means you changed the object x was pointing to

x = [1, 2, 3]
</snippet></ROW><ROW><id>11137161</id><snippet>from lxml import etree
d = etree.parse("10.233.85.0.22.xml")

d.xpath('//port[@portid="12345"]/service/@name') // return name of service in portid=12345
d.xpath('//port[@portid="12345"]/service/@product') // return product in port with portid=12345
</snippet></ROW><ROW><id>11137589</id><snippet>class Packagings:
    def _init_(self):      # first, I suppose you wanted to write __init__ as @larsmans noticed in comment
        self.length,self.deckle,self.tmp,self.flute,self.gsm,self.t_weight,self.weight
</snippet></ROW><ROW><id>11137589</id><snippet>class Packagings:
    def __init__(self):
        self.length = 0
        self.deckle = 0.0
        self.tmp = 0.0
        self.flute = []
        self.gsm = []
        self.t_weight = 0
        self.weight = 0
</snippet></ROW><ROW><id>11138023</id><snippet>&lt;option value=\"'+item.accountName+'\"&gt;'+item.accountName+'&lt;/option&gt;
</snippet></ROW><ROW><id>11138023</id><snippet>&lt;option value="{{ item.accountName }}"&gt;{{ item.accountName  }}&lt;/option&gt;
</snippet></ROW><ROW><id>11138040</id><snippet>x = [1,1,2,2,3]
y = [2,3,1,3,1]

fwd = set( zip(x,y) )
rev = set( zip(y,x) )
print ' not bi: ', fwd.difference(rev)
</snippet></ROW><ROW><id>11138077</id><snippet>self.flute</snippet></ROW><ROW><id>11138077</id><snippet>self.flute.append</snippet></ROW><ROW><id>11138766</id><snippet>def foo(a='a', b='b', c='c'):
    print a + b + c
</snippet></ROW><ROW><id>11138766</id><snippet>&gt;&gt;&gt; foo()
'abc'
&gt;&gt;&gt; foo(c='x')  # don't know or care about a and b's value
'abx'
</snippet></ROW><ROW><id>11138849</id><snippet>while 1:
    messages = q.get_messages()
    # do something with messages
    time.sleep(N)
</snippet></ROW><ROW><id>11139075</id><snippet>dict.items()</snippet></ROW><ROW><id>11139075</id><snippet>(key, value)</snippet></ROW><ROW><id>11139075</id><snippet>key</snippet></ROW><ROW><id>11139075</id><snippet>operator.itemgetter()</snippet></ROW><ROW><id>11139075</id><snippet>reverse</snippet></ROW><ROW><id>11139075</id><snippet>&gt;&gt;&gt; from operator import itemgetter
&gt;&gt;&gt; dic={'Tea': 35, 'Coffee': 35, 'Chocolate': 10}
&gt;&gt;&gt; for key, value in sorted(dic.items(), key=itemgetter(1), reverse=True):
...     print(key, value)
... 
Tea 35
Coffee 35
Chocolate 10
</snippet></ROW><ROW><id>11139075</id><snippet>&gt;&gt;&gt; for key, value in sorted(dic.items(), key=lambda x: (-x[1], x[0])):
...     print(key, value)
... 
Coffee 35
Tea 35
Chocolate 10
</snippet></ROW><ROW><id>11139191</id><snippet>import types
types.FunctionType(code_obj, globals={}, name='x')(1)
</snippet></ROW><ROW><id>11139191</id><snippet>class A(object):
    def __init__(self, name):
        self.name = name
    def f(self, param):
        print self.name, param

# just pass an instance as first parameter to a function or to an unbound method
func = types.FunctionType(A.f.__code__, globals={}, name='f')
func(A('a'), 2)
unbound_method = types.MethodType(func, None, A)
unbound_method(A('b'), 3)
# or bound the function to an instance
bound_method = types.MethodType(func, A('c'), A)
bound_method(4)
</snippet></ROW><ROW><id>11139371</id><snippet>&gt;&gt;&gt; numbers = 1,2
&gt;&gt;&gt; print ",".join("'{0}'".format(n) for n in numbers)
'1','2'
</snippet></ROW><ROW><id>11139416</id><snippet>import wx
import sys

employees = [('Earl Boffo', 'Software'), ('Mildred Plotka', 'Software'), ('Sugar Kane', 'QA')]

classes = [('Python'), ('Java'), ('C#')]

class EmployeesPanel(wx.Panel):
    def __init__(self, parent):
        wx.Panel.__init__(self, parent)

        # create some sizers 
        mainSizer = wx.BoxSizer(wx.VERTICAL)

        self.list = wx.ListCtrl(self, size=(100,100), style=wx.LC_REPORT)

        self.list.InsertColumn(0, 'Name')
        self.list.InsertColumn(1, 'Group')

        for i in employees:
            index = self.list.InsertStringItem(sys.maxint, i[0])
            self.list.SetStringItem(index, 1, i[1])

        # A button
        self.button = wx.Button(self, label="Exit")
        self.Bind(wx.EVT_BUTTON, self.OnClick,self.button)

        mainSizer.Add(self.list, 0, wx.EXPAND|wx.ALL, 5)
        mainSizer.Add(self.button, 0, wx.ALL, 5)

        self.SetSizer(mainSizer)
        self.Show()

    def EvtComboBox(self, event):
        self.logger.AppendText('EvtComboBox: %s\n' % event.GetString())
    def OnClick(self,event):
        sys.exit(3)

app = wx.App(False)
frame = wx.Frame(None, title="Training Tracker", size=(700,500))
nb = wx.Notebook(frame)

nb.AddPage(EmployeesPanel(nb), "Employees")
frame.Show()
app.MainLoop()
</snippet></ROW><ROW><id>11139632</id><snippet># -*- coding: utf-8
import ctypes


class Locale(object):
    def __init__(self, locale):
        LC_ALL_MASK = 8127
        # LC_COLLATE_MASK = 8
        self.libc = ctypes.CDLL("libc.so.6")
        self.ctx = self.libc.newlocale(LC_ALL_MASK, locale, 0)



    def strxfrm(self, src, iteration=1):
        size = 3 * iteration * len(src)
        dest =  ctypes.create_string_buffer('\000' * size)
        n = self.libc.strxfrm_l(dest, src, size,  self.ctx)
        if n &lt; size:
            return dest.value
        elif iteration&lt;=4:
            return self.strxfrm(src, iteration+1)
        else:
            raise Exception('max number of iterations trying to increase dest reached')


    def __del__(self):
        self.libc.freelocale(self.ctx)
</snippet></ROW><ROW><id>11139632</id><snippet>locale1 = Locale('C')
locale2 = Locale('mk_MK.UTF-8')

a_list = ['а', 'б', 'в', 'ј', 'ќ', 'џ', 'ш']
import random
random.shuffle(a_list)

assert sorted(a_list, key=locale1.strxfrm) == ['а', 'б', 'в', 'ш', 'ј', 'ќ', 'џ']
assert sorted(a_list, key=locale2.strxfrm) == ['а', 'б', 'в', 'ј', 'ќ', 'џ', 'ш']
</snippet></ROW><ROW><id>11139717</id><snippet> written = open('binary.file', 'wb')
 for chunk in rawdata.chunks():
        written.write(chunk)
 written.close()
</snippet></ROW><ROW><id>11139781</id><snippet>print({str(key): str(value) for key, value in ab.items()})
{'a': 'A', 'c': 'C', 'b': 'B'}
</snippet></ROW><ROW><id>11139781</id><snippet>dict((str(key), str(value)) for key, value in ab.items())
</snippet></ROW><ROW><id>11139909</id><snippet>missing_buckets = [x for x in timebuckets if ((x not in found_tenors) and (x == '1y' or  x[-1] != 'y'))]
                   ^^^^^
</snippet></ROW><ROW><id>11140110</id><snippet>from xml.dom import Node
from collections import OrderedDict

if not hasattr(Node, 'get_all_node_types'):

    @classmethod
    def get_all_node_types(cls, refresh=False):

        if not hasattr(cls, '_type_dict') or refresh:
            unsorted_types = {getattr(cls, name) : name for name in dir(cls) if name.endswith('_NODE')}
            cls._type_dict = OrderedDict(sorted(unsorted_types.items(), key = lambda t : t[0]))
        return cls._type_dict

    setattr(Node, 'get_all_node_types', get_all_node_types)
</snippet></ROW><ROW><id>11140322</id><snippet># if you don't want to consider duplicates either
output = set(your_first_list) == set(your_second_list)

# if duplicates matter
output = sorted(your_first_list) == sorted(your_second_list)
</snippet></ROW><ROW><id>11140364</id><snippet>GET</snippet></ROW><ROW><id>11140364</id><snippet>POST</snippet></ROW><ROW><id>11140364</id><snippet>method="POST"</snippet></ROW><ROW><id>11140364</id><snippet>&lt;form&gt;</snippet></ROW><ROW><id>11140364</id><snippet>post()</snippet></ROW><ROW><id>11140398</id><snippet>logger.debug('content of file not propper: %s', ie)
</snippet></ROW><ROW><id>11140398</id><snippet>logger.debug('content of file not propper: %s' % ie)
</snippet></ROW><ROW><id>11140494</id><snippet>Graphics</snippet></ROW><ROW><id>11140500</id><snippet>def get_send_items(items, results):
    send_items = []
    results_dict = {i.path:i for i in results}
    for p, s, m in items:
        result = results_dict.get(p)
        if result is None:
            send_items.append((p, s, m, None))
        elif result.mtime != m:
            send_items.append((p, s, result.mtime, result.hash))
    return send_items
</snippet></ROW><ROW><id>11140500</id><snippet>result</snippet></ROW><ROW><id>11140500</id><snippet>items</snippet></ROW><ROW><id>11140500</id><snippet>result[::-1]</snippet></ROW><ROW><id>11140500</id><snippet>result</snippet></ROW><ROW><id>11140500</id><snippet>result.remove(i)</snippet></ROW><ROW><id>11140500</id><snippet>result</snippet></ROW><ROW><id>11140500</id><snippet>result[::]</snippet></ROW><ROW><id>11140500</id><snippet>result</snippet></ROW><ROW><id>11140500</id><snippet>items.remove(j)</snippet></ROW><ROW><id>11140500</id><snippet>remove()</snippet></ROW><ROW><id>11140887</id><snippet>def show_most_informative_features(vectorizer, clf, n=20):
    c_f = sorted(zip(clf.coef_[0], vectorizer.get_feature_names()))
    top = zip(c_f[:n], c_f[:-(n+1):-1])
    for (c1,f1),(c2,f2) in top:
        print "\t%.4f\t%-15s\t\t%.4f\t%-15s" % (c1,f1,c2,f2)
</snippet></ROW><ROW><id>11140982</id><snippet>cat File_A File_B File_C File_D |sort | uniq -u | while read line ; do file=`grep -l $line File*` ; echo "$file $line" ; done
</snippet></ROW><ROW><id>11140982</id><snippet>#!/usr/bin/perl

use strict;
use autodie;

my $wordHash ;

foreach my $arg(@ARGV){
    open(my $fh, "&lt;", $arg);
    while(&lt;$fh&gt;){
        chomp;
        $wordHash-&gt;{$_}-&gt;[0] ++;
        push(@{$wordHash-&gt;{$_}-&gt;[1]}, $arg);
    }
}

for my $word ( keys %$wordHash ){
    if($wordHash-&gt;{$word}-&gt;[0] eq 1){
        print $wordHash-&gt;{$_}-&gt;[1]-&gt;[0] . ": $word\n"
    }
}
</snippet></ROW><ROW><id>11140982</id><snippet>cat File_A File_B File_C File_D |sort | uniq -u
</snippet></ROW><ROW><id>11140982</id><snippet>cat File_A File_B File_C File_D |sort | uniq
</snippet></ROW><ROW><id>11140982</id><snippet>for line in File* ; do echo "working on $line" ; sort $line | uniq ; done
</snippet></ROW><ROW><id>11141084</id><snippet>wb = load_workbook('path/doc.xls', use_iterators=True)</snippet></ROW><ROW><id>11141206</id><snippet>from django.db.models import Count

users = User.objects.annotate(num_followers=Count('to_users')).order_by('-num_followers')
</snippet></ROW><ROW><id>11141206</id><snippet>from django.contrib.auth.models import User
from django.db import models

class Relationship(models.Model):
    from_user = models.ForeignKey(User, related_name='from_users')
    to_user = models.ForeignKey(User, related_name='to_users')
</snippet></ROW><ROW><id>11141206</id><snippet>&gt;&gt;&gt; from so.models import *
&gt;&gt;&gt; from django.contrib.auth.models import User
&gt;&gt;&gt; u1 = User()
&gt;&gt;&gt; u1.username='user1'
&gt;&gt;&gt; u1.save()
&gt;&gt;&gt; u2 = User()
&gt;&gt;&gt; u2.username='user2'
&gt;&gt;&gt; u2.save()
&gt;&gt;&gt; u3=User()
&gt;&gt;&gt; u3.username='user3'
&gt;&gt;&gt; u3.save()
&gt;&gt;&gt; # so we have 3 users now
&gt;&gt;&gt; r1 = Relationship()
&gt;&gt;&gt; r1.from_user=u1
&gt;&gt;&gt; r1.to_user=u2
&gt;&gt;&gt; r1.save()
&gt;&gt;&gt; r2=Relationship()
&gt;&gt;&gt; r2.from_user=u1
&gt;&gt;&gt; r2.to_user=u3
&gt;&gt;&gt; r2.save()
&gt;&gt;&gt; r3=Relationship()
&gt;&gt;&gt; r3.from_user=u2
&gt;&gt;&gt; r3.to_user=u3
&gt;&gt;&gt; r3.save()
&gt;&gt;&gt; rels = Relationship.objects.all()
&gt;&gt;&gt; rels.count()
3
&gt;&gt;&gt; # we have 3 relationships: user1 follows user2, user1 follows user3, user2 follows user3
&gt;&gt;&gt; users = User.objects.annotate(num_followers=Count('to_users')).order_by('-num_followers')
&gt;&gt;&gt; for user in users:
&gt;&gt;&gt;     print user.username, user.num_followers
user3 2
user2 1
user1 0
</snippet></ROW><ROW><id>11141216</id><snippet>False</snippet></ROW><ROW><id>11141216</id><snippet>false</snippet></ROW><ROW><id>11141216</id><snippet>import json
measurement = 2
listcolorlist = [[234, 431, 134],
                 [214, 451, 114]]
listspeclist = [[0.34, 0.42, 0.45, 0.34, 0.78],
                [0.44, 0.32, 0.45, 0.37, 0.53]]
python_data = {"measurement" : 15000,
               "imi" : 0.5,
               "times" : 30,
               "recalibrate" : False,
               "data" : [{"colorlist" : listcolorlist[i],
                          "speclist" : listspeclist[i]}
                         for i in range(measurement)]}
print(json.dumps(python_data))
</snippet></ROW><ROW><id>11141232</id><snippet>*optional</snippet></ROW><ROW><id>11141232</id><snippet>config.add_route('name_with_optional', '/required/{optional}/{str}')
config.add_route('name', '/required/{str}')
</snippet></ROW><ROW><id>11141232</id><snippet>@view_config(route_name='name_with_optional')
@view_config(route_name='name')
def my_view(request):
    optional = request.matchdict.get('optional')
</snippet></ROW><ROW><id>11141232</id><snippet>optional</snippet></ROW><ROW><id>11141232</id><snippet>None</snippet></ROW><ROW><id>11141232</id><snippet>'name'</snippet></ROW><ROW><id>11141232</id><snippet>def opt_must_contain(info, request):
    opt = info['match'].get('opt')
    return opt in ('opt_a', 'opt_b', 'opt_c')

config.add_route('my_route', '/view_1/{opt}', custom_predicates=[opt_must_contain])
</snippet></ROW><ROW><id>11141232</id><snippet>False</snippet></ROW><ROW><id>11141232</id><snippet>def opt_must_contain(context, request):
    opt = request.matchdict.get('opt')
    return opt in ('opt_a', 'opt_b', 'opt_c')

config.add_route('my_route', '/view_1/{opt}')

@view_config(route_name='my_route', custom_predicates=[opt_must_contain])
def my_view(request):
    opt = request.matchdict.get('opt')
</snippet></ROW><ROW><id>11141232</id><snippet>opt</snippet></ROW><ROW><id>11141305</id><snippet>plt.close()</snippet></ROW><ROW><id>11141305</id><snippet>plt.close(2)</snippet></ROW><ROW><id>11141305</id><snippet>plt.close(plot1)</snippet></ROW><ROW><id>11141305</id><snippet>plt.close('all')</snippet></ROW><ROW><id>11141305</id><snippet>plt.show()</snippet></ROW><ROW><id>11141305</id><snippet>plt.close()</snippet></ROW><ROW><id>11141305</id><snippet>plt.ion()</snippet></ROW><ROW><id>11141305</id><snippet>fig = plt.figure(figsize=plt.figaspect(0.75))
ax = fig.add_subplot(1, 1, 1)
....
par_plot, = plot(x_data,y_data, lw=2, color='red')
</snippet></ROW><ROW><id>11141305</id><snippet>ax</snippet></ROW><ROW><id>11141305</id><snippet>axes(ax)</snippet></ROW><ROW><id>11141305</id><snippet>par_plot</snippet></ROW><ROW><id>11141305</id><snippet>axsliderA = axes([0.12, 0.85, 0.16, 0.075])
sA = Slider(axsliderA, 'A', -1, 1.0, valinit=0.5)
sA.on_changed(update)
</snippet></ROW><ROW><id>11141305</id><snippet>axsliderA</snippet></ROW><ROW><id>11141305</id><snippet>sA</snippet></ROW><ROW><id>11141305</id><snippet>update</snippet></ROW><ROW><id>11141305</id><snippet>def update(val):
    A = sA.val
    B = sB.val
    C = sC.val
    y_data = A*x_data*x_data + B*x_data + C
    par_plot.set_ydata(y_data)
    draw()
</snippet></ROW><ROW><id>11141305</id><snippet>par_plot.set_ydata(y_data)</snippet></ROW><ROW><id>11141305</id><snippet>par_plot</snippet></ROW><ROW><id>11141305</id><snippet>draw()</snippet></ROW><ROW><id>11141305</id><snippet>from pylab import *
import matplotlib.pyplot as plt
import numpy

def update(val):
    A = sA.val
    B = sB.val
    C = sC.val
    y_data = A*x_data*x_data + B*x_data + C
    par_plot.set_ydata(y_data)
    draw()


x_data = numpy.arange(-100,100,0.1);

fig = plt.figure(figsize=plt.figaspect(0.75))
ax = fig.add_subplot(1, 1, 1)
subplots_adjust(top=0.8)

ax.set_xlim(-100, 100);
ax.set_ylim(-100, 100);
ax.set_xlabel('X')
ax.set_ylabel('Y')

axsliderA = axes([0.12, 0.85, 0.16, 0.075])
sA = Slider(axsliderA, 'A', -1, 1.0, valinit=0.5)
sA.on_changed(update)

axsliderB = axes([0.43, 0.85, 0.16, 0.075])
sB = Slider(axsliderB, 'B', -30, 30.0, valinit=2)
sB.on_changed(update)

axsliderC = axes([0.74, 0.85, 0.16, 0.075])
sC = Slider(axsliderC, 'C', -30, 30.0, valinit=1)
sC.on_changed(update)

axes(ax)
A = 1;
B = 2;
C = 1;
y_data = A*x_data*x_data + B*x_data + C;

par_plot, = plot(x_data,y_data, lw=2, color='red')

show()
</snippet></ROW><ROW><id>11141305</id><snippet>update</snippet></ROW><ROW><id>11141526</id><snippet>{{response.write('&lt;input type="hidden" name="recid" value="' +
    str(response._vars['prs']['id'][k])+'"/&gt;',escape=False)}}
</snippet></ROW><ROW><id>11141526</id><snippet>&lt;input type="hidden" name="recid" value="{{=prs['id'][k])}}"/&gt;
</snippet></ROW><ROW><id>11141526</id><snippet>ajax()</snippet></ROW><ROW><id>11141526</id><snippet>name="{{='recid%s' % prs['id'][k]}}"
</snippet></ROW><ROW><id>11141526</id><snippet>recid = [v for v in request.post_vars if v.startswith('recid')]
if recid:
    recid = int(recid[0][5:])
    [code to delete record with id==recid]
</snippet></ROW><ROW><id>11141570</id><snippet>defaultdict</snippet></ROW><ROW><id>11141570</id><snippet>collections</snippet></ROW><ROW><id>11141570</id><snippet>&gt;&gt;&gt; import collections
&gt;&gt;&gt; data = collections.defaultdict(list)
&gt;&gt;&gt; for k, v in (('a', 'b'), ('a', 'c'), ('b', 'c')):
...     data[k].append(v)
... 
&gt;&gt;&gt; data
defaultdict(&lt;type 'list'&gt;, {'a': ['b', 'c'], 'b': ['c']})
</snippet></ROW><ROW><id>11141570</id><snippet>id</snippet></ROW><ROW><id>11141570</id><snippet>&gt;&gt;&gt; for k, v in (('a', 'b'), ('a', 'c'), ('b', 'c')):
...     i = 0
...     while (k, i) in data:
...         i += 1
...     data[(k, i)] = v
... 
&gt;&gt;&gt; data
{('a', 1): 'c', ('b', 0): 'c', ('a', 0): 'b'}
</snippet></ROW><ROW><id>11141574</id><snippet>MyFuncs (folder)
    __init__.py (can be completely empty)
    utilFunctions.py
    genericFunctions.py
    uselessFunctions.py
    Views (folder)
        __init__.py (again!!)
        views.py
</snippet></ROW><ROW><id>11141574</id><snippet>import MyFuncs.utilFunctions
from MyFuncs.Views import views
import MyFuncs.uselessFunctions as nonsenseFunctions
</snippet></ROW><ROW><id>11141574</id><snippet>from MyFuncs import utilFunctions

utilFunctions.aFunctionYouCode()
</snippet></ROW><ROW><id>11141917</id><snippet>dis</snippet></ROW><ROW><id>11142032</id><snippet>from flask import Flask
from auth import auth_blueprint
from posts import post_blueprint

app = Flask(__name__)
app.register_blueprint(auth)
app.register_blueprint(posts)
app.run()
</snippet></ROW><ROW><id>11142152</id><snippet>stat</snippet></ROW><ROW><id>11142152</id><snippet>os.stat</snippet></ROW><ROW><id>11142152</id><snippet>stat =</snippet></ROW><ROW><id>11142152</id><snippet>stat_result</snippet></ROW><ROW><id>11142291</id><snippet>if iRow.DEV_TYPE is not None and iRow.DEV_TYPE not in devcatList:</snippet></ROW><ROW><id>11142398</id><snippet>tuple</snippet></ROW><ROW><id>11142398</id><snippet>[1,2]</snippet></ROW><ROW><id>11142398</id><snippet>list</snippet></ROW><ROW><id>11142398</id><snippet>(1,2)</snippet></ROW><ROW><id>11142398</id><snippet>tuple</snippet></ROW><ROW><id>11142398</id><snippet>tuple</snippet></ROW><ROW><id>11142398</id><snippet>(1)</snippet></ROW><ROW><id>11142398</id><snippet>(1,)</snippet></ROW><ROW><id>11142398</id><snippet>1,2</snippet></ROW><ROW><id>11142398</id><snippet>(1,2)</snippet></ROW><ROW><id>11142415</id><snippet>import ntpath, posixpath

assert ntpath.join("a", "b") == r"a\b"
assert posixpath.join("a", "b") == "a/b"
</snippet></ROW><ROW><id>11142469</id><snippet>ircSend('NICK ' + nick + '\r\n')
ircSend('USER john_bot john_bot bla :john_bot\r\n')

data = ircRecv() # explained later
if data.find('PING') != -1:
    ircSend('PONG ' + data.split()[1] + '\r\n')

ircSend('JOIN :' + chan + '\r\n')
ircSend('PRIVMSG ' + chan + ' :Hello.\r\n')
</snippet></ROW><ROW><id>11142469</id><snippet>a=irc.recv (4096)
print a
</snippet></ROW><ROW><id>11142469</id><snippet>data = irc.recv(4096)
for line in data.split('\r\n'):
    # process the line
</snippet></ROW><ROW><id>11142469</id><snippet>def ircRecv():
    line = ''
    while 1: # same as while True:
        character = irc.recv(1)
        if character == '\n':
            break # exit the loop
        elif character != '\r':
            line += character
    print line
    return line
</snippet></ROW><ROW><id>11142469</id><snippet>&lt;message&gt;  ::= [':' &lt;prefix&gt; &lt;SPACE&gt; ] &lt;command&gt; &lt;params&gt; &lt;crlf&gt;
&lt;prefix&gt;   ::= &lt;servername&gt; | &lt;nick&gt; [ '!' &lt;user&gt; ] [ '@' &lt;host&gt; ]
&lt;command&gt;  ::= &lt;letter&gt; { &lt;letter&gt; } | &lt;number&gt; &lt;number&gt; &lt;number&gt;
&lt;SPACE&gt;    ::= ' ' { ' ' }
&lt;params&gt;   ::= &lt;SPACE&gt; [ ':' &lt;trailing&gt; | &lt;middle&gt; &lt;params&gt; ]
&lt;middle&gt;   ::= &lt;Any *non-empty* sequence of octets not including SPACE
           or NUL or CR or LF, the first of which may not be ':'&gt;
&lt;trailing&gt; ::= &lt;Any, possibly *empty*, sequence of octets not including
             NUL or CR or LF&gt;
&lt;crlf&gt;     ::= CR LF
</snippet></ROW><ROW><id>11142469</id><snippet># put this inside the main loop
# this will throw an IndexError when the connection is closed,
# an empty line does not contain any spaces
line = ircRecv()
if line.split()[0].find('!') != -1:
    # the first character must be a colon because &lt;command&gt; can't include
    # an exclamation mark
    someOneElsesNick = line[1:line.find('!')]
    command = line.split()[1]
</snippet></ROW><ROW><id>11142469</id><snippet>    if command == 'PRIVMSG':
        destination = line.split()[2] # channel or bot's nick
        # &lt;trailing&gt;, in this case, the message
        message = line[line[1:].find(':')+2 : ] # everything after the 2nd colon

        # we add one since we don't want include the &lt;trailing&gt; colon in
        # the message and an other one because line[1:].find() is one smaller 
        # number than line.find() would be

        # if we receive a private message, we have to respond to the sender,
        # not to ourself
        if destination == nick:
            destination = someOneElsesNick

        if message.startswith('hi!'):
            ircSend('PRIVMSG ' + destination + ' :Hi, '
            + someOneElsesNick + '!\r\n')
</snippet></ROW><ROW><id>11142554</id><snippet>()</snippet></ROW><ROW><id>11142554</id><snippet>f()
</snippet></ROW><ROW><id>11142554</id><snippet>a</snippet></ROW><ROW><id>11142554</id><snippet>a</snippet></ROW><ROW><id>11142554</id><snippet>f</snippet></ROW><ROW><id>11142677</id><snippet>Popen</snippet></ROW><ROW><id>11142677</id><snippet>p=sp.Popen(['qdel', '%d'%i],stdout=sp.PIPE)
</snippet></ROW><ROW><id>11142677</id><snippet>shell=True</snippet></ROW><ROW><id>11142677</id><snippet>;</snippet></ROW><ROW><id>11142790</id><snippet>pattern_file_map.setdefault(which_match, []).append(line)
</snippet></ROW><ROW><id>11142790</id><snippet>collections.defaultdict(list)</snippet></ROW><ROW><id>11142994</id><snippet>def SAD_singleton(cls):
    class tmp(object):
        def __init__(self):
            self.c = None
    instances = tmp()
    def getinstance():

        if instances.c is None:
            instances.c = cls()

        return instances.c
    return getinstance
</snippet></ROW><ROW><id>11143078</id><snippet>import Image

old_im = Image.open('someimage.jpg')
old_size = old_im.size

new_size = (800, 800)
new_im = Image.new("RGB", new_size)   ## luckily, this is already black!
new_im.paste(old_im, ((new_size[0]-old_size[0])/2,
                      (new_size[1]-old_size[1])/2))

new_im.show()
# new_im.save('someimage.jpg')
</snippet></ROW><ROW><id>11143290</id><snippet>def generate_cache_filename(instance, path, specname, extension):
    extension = '.jpg'
    return 'cache/images_upload/%s_%s%s' % (instance.pk, specname, extension)
# generate random string of 10 characters
def id_generator(size=10, chars=string.ascii_uppercase + string.digits):
    return ''.join(random.choice(chars) for x in range(size))

def generate_random_filename(instance, filename):
    filename = id_generator()
    extension = '.jpg'
return 'images_upload/%s_%s%s' % (instance.pk, filename, extension)

class Model(models.Model):
    name = models.CharField(max_length=20)
    image_1 = ProcessedImageField([Adjust(contrast=1.2, sharpness=1.1), ResizeToFill(500, 370)], upload_to=generate_random_filename, format='JPEG', options={'quality': 90})
    thumbnail_1 = ImageSpec([Adjust(contrast=1.2, sharpness=1.1), ResizeToFill(83, 78)], image_field='image_1', cache_to=generate_cache_filename, format='JPEG', options={'quality': 90})
</snippet></ROW><ROW><id>11143290</id><snippet># thanks to jdi for the help in the for-loop
if form.is_valid():
        # A for loop is used here, because my database contains 5 images and 5              thumbnails
        image_list = ['image_%d' % i for i in xrange(1,6)]
        for image_name in image_list:
            form_image = form.cleaned_data[image_name]
            try:
                details = Model.objects.get(pk=pk)
                if getattr(details, image_name, None) != form_image:
                    getattr(details, image_name, None).delete(save=False)
            except Model.DoesNotExist: 
                pass
</snippet></ROW><ROW><id>11143577</id><snippet>from bs4 import BeautifulSoup
import os, sys
from multiprocessing import Pool


source_folder='/Python27/source_xml'

def extract_text(article):
    soup=BeautifulSoup(open(source_folder+'/'+article))

    #I think this strips any tags that are nested in the sample_tag
    clean_text=soup.sample_tag.get_text("  ",strip=True)

    #This grabs an ID which I used as the output file name
    article_id=soup.article_id.get_text("  ",strip=True)

    with open(article_id,"wb") as f:
            f.write(clean_text.encode("UTF-8"))

def main():
    pool = Pool()
    pool.map(extract_text, os.listdir(source_folder))

if __name__ == '__main__':
    main()
</snippet></ROW><ROW><id>11143623</id><snippet>list()</snippet></ROW><ROW><id>11143623</id><snippet>set()</snippet></ROW><ROW><id>11143623</id><snippet>tuple()</snippet></ROW><ROW><id>11143623</id><snippet>list(dict)</snippet></ROW><ROW><id>11143623</id><snippet>tuple(dict)</snippet></ROW><ROW><id>11143623</id><snippet>set(dict)</snippet></ROW><ROW><id>11143623</id><snippet>break</snippet></ROW><ROW><id>11143623</id><snippet>pop()</snippet></ROW><ROW><id>11143623</id><snippet>div={'a':(1,2,3,4),'b':[1,2],'c':(1,2,3,4)}
tup=(1,2,3,4)
for x in set(div):
    if div[x]==tup:
        div.pop(x)

print(div)        

{'b': [1,2]}
</snippet></ROW><ROW><id>11143865</id><snippet>import re
class Sequence(list):
    def __init__(self, s):
        if isinstance(s, str):
            self.extend(re.findall(r'[^\[\]]|\[\d+\]', s))
        else:
            list.__init__(self, s)
    def __str__(self):
        return ''.join(self)
    def __getslice__(self, i, j):
        l = list(self)
        return Sequence(l[i:j])
</snippet></ROW><ROW><id>11143865</id><snippet>In [1]: seq = Sequence('2-123[01]3-22')
</snippet></ROW><ROW><id>11143865</id><snippet>In [2]: seq
Out[2]: ['2', '-', '1', '2', '3', '[01]', '3', '-', '2', '2']
</snippet></ROW><ROW><id>11143865</id><snippet>In [3]: print seq
2-123[01]3-22
In [4]: print seq[-6:]
3[01]3-22
</snippet></ROW><ROW><id>11144032</id><snippet>- url: /(.+)
  static_files: images/\1
  upload: images/(.*)
</snippet></ROW><ROW><id>11144032</id><snippet>- url: /(.*\.(gif|png|jpg))
  static_files: static/\1
  upload: static/(.*\.(gif|png|jpg))
</snippet></ROW><ROW><id>11144038</id><snippet>gtk.TextView</snippet></ROW><ROW><id>11144038</id><snippet>HBox</snippet></ROW><ROW><id>11144038</id><snippet>gtk.ScrolledWindow</snippet></ROW><ROW><id>11144038</id><snippet>HBox</snippet></ROW><ROW><id>11144038</id><snippet>gtk.ScrolledWindow</snippet></ROW><ROW><id>11144038</id><snippet>gtk.TextView</snippet></ROW><ROW><id>11144038</id><snippet>gtk.ScrolledWindow</snippet></ROW><ROW><id>11144038</id><snippet>TextViewer</snippet></ROW><ROW><id>11144038</id><snippet>gtk.TextView</snippet></ROW><ROW><id>11144038</id><snippet>Hbox</snippet></ROW><ROW><id>11144038</id><snippet>ScrolledWindow</snippet></ROW><ROW><id>11144038</id><snippet>ScrolledWindow</snippet></ROW><ROW><id>11144038</id><snippet>import gtksourceview2
view = gtksourceview2.View()
</snippet></ROW><ROW><id>11144455</id><snippet>widgets = ['Test: ', Percentage(), ' ', Bar(marker=RotatingMarker()), ' ', ETA(), ' ', FileTransferSpeed()]
pbar = ProgressBar(widgets=widgets)

def dlProgress(count, blockSize, totalSize):
    if pbar.maxval is None:
        pbar.maxval = totalSize
        pbar.start()

    pbar.update(min(count*blockSize, totalSize))

urllib.urlretrieve(url, fileName, reporthook=dlProgress)
pbar.finish()
</snippet></ROW><ROW><id>11144539</id><snippet>&gt;&gt;&gt; import itertools
&gt;&gt;&gt; map(''.join, itertools.product(*((c.upper(), c.lower()) for c in 'Fox')))
['FOX', 'FOx', 'FoX', 'Fox', 'fOX', 'fOx', 'foX', 'fox']
</snippet></ROW><ROW><id>11144539</id><snippet>&gt;&gt;&gt; s = 'Fox'
&gt;&gt;&gt; map(''.join, itertools.product(*zip(s.upper(), s.lower())))
</snippet></ROW><ROW><id>11144716</id><snippet>&gt;&gt;&gt; numpy.transpose([numpy.tile(x, len(y)), numpy.repeat(y, len(x))])
array([[1, 4],
       [2, 4],
       [3, 4],
       [1, 5],
       [2, 5],
       [3, 5]])
</snippet></ROW><ROW><id>11145008</id><snippet>import dateutil
import pytz

# timezone dictionary built here: http://stackoverflow.com/a/4766400/366335
# tzd = {...}

string = 'Jun 20, 4:00PM EDT'
date = datetuil.parser.parse(string, tzinfos=tzd).astimezone(pytz.utc)
</snippet></ROW><ROW><id>11145104</id><snippet>__init__.py</snippet></ROW><ROW><id>11145104</id><snippet>foo/baz/quux/b.py
foo/baz/quux/quuuux/c.py
foo/bar/a.py
</snippet></ROW><ROW><id>11145104</id><snippet>foo/baz/quux/b.py</snippet></ROW><ROW><id>11145104</id><snippet>def func_b():
    print 'func b'
</snippet></ROW><ROW><id>11145104</id><snippet>foo/baz/quux/quuuux/c.py</snippet></ROW><ROW><id>11145104</id><snippet>def func_c():
    print 'func c'
</snippet></ROW><ROW><id>11145104</id><snippet>foo</snippet></ROW><ROW><id>11145104</id><snippet>src</snippet></ROW><ROW><id>11145104</id><snippet>foo/bar/a.py</snippet></ROW><ROW><id>11145104</id><snippet>foo</snippet></ROW><ROW><id>11145104</id><snippet>import foo.baz.quux.b as b
import foo.baz.quux.quuuux.c as c

def func_a():
    b.func_b()
    c.func_c()
</snippet></ROW><ROW><id>11145104</id><snippet>foo/bar/a.py</snippet></ROW><ROW><id>11145104</id><snippet>import foo.bar.a as a

a.func_a()
</snippet></ROW><ROW><id>11145104</id><snippet>src</snippet></ROW><ROW><id>11145346</id><snippet>B</snippet></ROW><ROW><id>11145346</id><snippet>__init__</snippet></ROW><ROW><id>11145346</id><snippet>class BForm(forms.ModelForm):
    # either redefine the boolean field
    boolean_field = models.BooleanField(initial=False)

    class Meta:
        model = B

    # or override the __init__ method and set initial=False
    # this is a bit more complicated but less repetitive
    def __init__(self, *args, **kwargs):
        super(BForm, self).__init__(*args, **kwargs)
        self.fields['boolean_field'].initial = False
</snippet></ROW><ROW><id>11145346</id><snippet>class BAdmin(admin.ModelAdmin):
    form = BForm

admin.site.register(B, BAdmin)
</snippet></ROW><ROW><id>11145563</id><snippet>Gtk.Menu</snippet></ROW><ROW><id>11145563</id><snippet>Gtk.MenuItem</snippet></ROW><ROW><id>11145701</id><snippet>__getattr__</snippet></ROW><ROW><id>11145701</id><snippet>__setattr__</snippet></ROW><ROW><id>11145701</id><snippet>self.foo = bar</snippet></ROW><ROW><id>11145701</id><snippet>__setattr__</snippet></ROW><ROW><id>11145701</id><snippet>__dict__</snippet></ROW><ROW><id>11145701</id><snippet>self.__dict__['foo'] = bar</snippet></ROW><ROW><id>11145701</id><snippet>A</snippet></ROW><ROW><id>11145701</id><snippet>object</snippet></ROW><ROW><id>11145701</id><snippet>super(A, self).__setattr__(item, value)</snippet></ROW><ROW><id>11145701</id><snippet>object.__setattr__(self, item, value)</snippet></ROW><ROW><id>11145706</id><snippet>numpy.loadtxt</snippet></ROW><ROW><id>11145706</id><snippet>&gt;&gt;&gt; import numpy
&gt;&gt;&gt; d = numpy.loadtxt("mdat.txt", skiprows=2)
&gt;&gt;&gt; d
array([[ 0.   ,  0.021],
       [ 0.1  ,  0.021],
       [ 0.2  ,  0.021],
       [ 0.3  ,  0.021],
       [ 0.4  ,  0.021],
       [ 0.5  ,  0.021],
       [ 0.6  ,  0.021]])
</snippet></ROW><ROW><id>11145706</id><snippet>skiprows=2</snippet></ROW><ROW><id>11145706</id><snippet>d[:,0]</snippet></ROW><ROW><id>11145706</id><snippet>d[:,1]</snippet></ROW><ROW><id>11145706</id><snippet>loadtxt</snippet></ROW><ROW><id>11145706</id><snippet>&gt;&gt;&gt; times, charges = numpy.loadtxt("mdat.txt", skiprows=2, unpack=True)
&gt;&gt;&gt; times
array([ 0. ,  0.1,  0.2,  0.3,  0.4,  0.5,  0.6])
&gt;&gt;&gt; charges
array([ 0.021,  0.021,  0.021,  0.021,  0.021,  0.021,  0.021])
</snippet></ROW><ROW><id>11145787</id><snippet>word</snippet></ROW><ROW><id>11145787</id><snippet>rule</snippet></ROW><ROW><id>11145787</id><snippet>rule</snippet></ROW><ROW><id>11145787</id><snippet>import xml.etree.ElementTree as ET
tree = ET.parse("1.xml")
for rule in tree.iter("rule"):
    for child in rule:
        if child.tag == 'word':
            print "%s" % child.text
        elif child.tag == 'marker':
            print "("
            for subchild in child:
                if subchild.tag == 'word':
                    print "%s" % subchild.text
            print ")"
</snippet></ROW><ROW><id>11145871</id><snippet>wikixml.xpath('//edition/text() | //edition2/text()')
</snippet></ROW><ROW><id>11145871</id><snippet>wikixml.xpath('//*[self::edition or self::edition2]/text()]
</snippet></ROW><ROW><id>11145871</id><snippet>wikixml.xpath('/wikimedia/projects/project/editions/*[self::edition or self::edition2]/text()]
</snippet></ROW><ROW><id>11145871</id><snippet>/wikimedia/projects/project/editions/ *[self::edition or self::edition2]
|
/wikimedia/projects/project/editions/img/@src
</snippet></ROW><ROW><id>11145871</id><snippet>edition</snippet></ROW><ROW><id>11145871</id><snippet>edition2</snippet></ROW><ROW><id>11145871</id><snippet>src</snippet></ROW><ROW><id>11145871</id><snippet>/wikimedia/projects/project/editions/ *[self::edition or self::edition2 or attribute::src]
</snippet></ROW><ROW><id>11145871</id><snippet>src</snippet></ROW><ROW><id>11145871</id><snippet>/wikimedia/projects/project/editions/(*[self::edition or self::edition2] | img/@src )
</snippet></ROW><ROW><id>11145876</id><snippet>figtext</snippet></ROW><ROW><id>11145876</id><snippet>from pylab import *

figure()
gca().set_position((.1, .3, .8, .6)) # to make a bit of room for extra text
plot([1,2], [3,4])
figtext(.95, .9, "This is text on the side of the figure", rotation='vertical')
figtext(.02, .02, "This is text on the bottom of the figure.\nHere I've made extra room for adding more text.\n" + ("blah "*16+"\n")*3)
xlabel("an interesting axis label")    
show()
</snippet></ROW><ROW><id>11145876</id><snippet>axes.set_position()</snippet></ROW><ROW><id>11145894</id><snippet>PySide</snippet></ROW><ROW><id>11145894</id><snippet>QtCore</snippet></ROW><ROW><id>11145894</id><snippet>Qt</snippet></ROW><ROW><id>11145894</id><snippet>qt</snippet></ROW><ROW><id>11145894</id><snippet>import qt</snippet></ROW><ROW><id>11145894</id><snippet>PySide</snippet></ROW><ROW><id>11145894</id><snippet>bbpy</snippet></ROW><ROW><id>11145917</id><snippet>python manage.py migrate someapp 0022
</snippet></ROW><ROW><id>11145917</id><snippet>python manage.py schemamigration --auto someapp
</snippet></ROW><ROW><id>11145917</id><snippet>0023_someone_elses_migration.py
0023_my_migration.py
</snippet></ROW><ROW><id>11145969</id><snippet>io</snippet></ROW><ROW><id>11145969</id><snippet>IOBase</snippet></ROW><ROW><id>11146027</id><snippet>&gt;&gt;&gt; import shelve
&gt;&gt;&gt; s = shelve.open('TestShelve')
&gt;&gt;&gt; from collections import deque
&gt;&gt;&gt; s['store'] = deque()
&gt;&gt;&gt; d = s['store']
&gt;&gt;&gt; id(s['store'])
27439296
&gt;&gt;&gt; id(d)
27439184
</snippet></ROW><ROW><id>11146027</id><snippet>writeback=True</snippet></ROW><ROW><id>11146027</id><snippet>s = shelve.open('TestShelve', writeback=True)
</snippet></ROW><ROW><id>11146027</id><snippet>writeback=False</snippet></ROW><ROW><id>11146027</id><snippet># having opened d without writeback=True, you need to code carefully:
temp = d['xx']      # extracts the copy
temp.append(5)      # mutates the copy
d['xx'] = temp      # stores the copy right back, to persist it
</snippet></ROW><ROW><id>11146119</id><snippet>security</snippet></ROW><ROW><id>11146119</id><snippet>security find-identity -s &lt;search term&gt;</snippet></ROW><ROW><id>11146119</id><snippet>security export</snippet></ROW><ROW><id>11146119</id><snippet>security -h &lt;command&gt;</snippet></ROW><ROW><id>11146119</id><snippet>subprocess.call</snippet></ROW><ROW><id>11146273</id><snippet>with open(..., 'w') as f:
    s = f.read()
    for src, dest in replacements:
        s = s.replace(src, dest)
    f.seek(0)
    f.write(s)
</snippet></ROW><ROW><id>11146280</id><snippet>&gt;&gt;&gt; import numpy
&gt;&gt;&gt; a = [[1,2],[2,2],[3,3],[4,2],[5,6]]
&gt;&gt;&gt; b = [1,2,2,3,1]
&gt;&gt;&gt; a = numpy.array(a)
&gt;&gt;&gt; b = numpy.array(b)
&gt;&gt;&gt; a[b==1]
array([[1, 2],
       [5, 6]])
&gt;&gt;&gt; a[b==2]
array([[2, 2],
       [3, 3]])
&gt;&gt;&gt; b[b==2]
array([2, 2])
</snippet></ROW><ROW><id>11146280</id><snippet>&gt;&gt;&gt; [i for i,j in zip(a,b) if j == 1]
[[1, 2], [5, 6]]
&gt;&gt;&gt; [i for i,j in zip(a,b) if j == 2]
[[2, 2], [3, 3]]
&gt;&gt;&gt; [i for i,j in zip(b,b) if j == 2]
[2, 2]
</snippet></ROW><ROW><id>11146280</id><snippet>&gt;&gt;&gt; def func(a,b,x):
...     return [i for i,j in zip(a,b) if j == x]
... 
&gt;&gt;&gt; func(a,b,2)
[[2, 2], [3, 3]]
&gt;&gt;&gt; 
</snippet></ROW><ROW><id>11146329</id><snippet>%</snippet></ROW><ROW><id>11146329</id><snippet>instr = "'{0}', '{1}', '{2}', '{3}', '{4}', '{5}', '{6}'".format(softname, procversion, int(percent), exe, description, company, procurl)
</snippet></ROW><ROW><id>11146394</id><snippet>serversocket.setsockopt(SOL_SOCKET, SO_REUSEADDR, 1) 
</snippet></ROW><ROW><id>11146420</id><snippet>pip</snippet></ROW><ROW><id>11146420</id><snippet>apt-get</snippet></ROW><ROW><id>11146420</id><snippet>pythonz</snippet></ROW><ROW><id>11146546</id><snippet>shelve</snippet></ROW><ROW><id>11146693</id><snippet>{{ value if value != None  }}</snippet></ROW><ROW><id>11146806</id><snippet>isinstance</snippet></ROW><ROW><id>11146806</id><snippet>say_it</snippet></ROW><ROW><id>11146806</id><snippet>if hasattr(hw_obj, 'say_it'):
    print hw_obj.say_it()
</snippet></ROW><ROW><id>11146858</id><snippet>&gt;&gt;&gt; a = np.arange(12.0).reshape((4,3))
&gt;&gt;&gt; a[1,1] = np.nan
&gt;&gt;&gt; a[2,2] = -999
&gt;&gt;&gt; a
array([[   0.,    1.,    2.],
       [   3.,   nan,    5.],
       [   6.,    7., -999.],
       [   9.,   10.,   11.]])
&gt;&gt;&gt; m = np.ma.array(a,mask=(~np.isfinite(a) | (a == -999)))
&gt;&gt;&gt; m
masked_array(data =
 [[0.0 1.0 2.0]
 [3.0 -- 5.0]
 [6.0 7.0 --]
 [9.0 10.0 11.0]],
             mask =
 [[False False False]
 [False  True False]
 [False False  True]
 [False False False]],
       fill_value = 1e+20)
</snippet></ROW><ROW><id>11147111</id><snippet>from itertools import takewhile
from collections import Counter

def modal(xs):
       counter = Counter(xs).most_common()
       _, count = counter[0]
       return takewhile(lambda x: x[1] == count, counter)
</snippet></ROW><ROW><id>11147111</id><snippet>==</snippet></ROW><ROW><id>11147111</id><snippet>is</snippet></ROW><ROW><id>11147111</id><snippet>is</snippet></ROW><ROW><id>11147111</id><snippet>int</snippet></ROW><ROW><id>11147111</id><snippet>&gt;&gt;&gt; a = 1
&gt;&gt;&gt; a is 1
True
&gt;&gt;&gt; a = 300
&gt;&gt;&gt; a is 300
False
</snippet></ROW><ROW><id>11147380</id><snippet>__getattribute__</snippet></ROW><ROW><id>11147380</id><snippet>__dict__</snippet></ROW><ROW><id>11147380</id><snippet>_log_</snippet></ROW><ROW><id>11147380</id><snippet>slog = StrLogger('foo')
thelog = slog._log_
do_stuff_with(slog)
print thelog
</snippet></ROW><ROW><id>11147442</id><snippet>def ngrams(seq, n=2):
    return [seq[i:i+n] for i in range(len(seq) - n + 1)]
</snippet></ROW><ROW><id>11147442</id><snippet>collections.Counter</snippet></ROW><ROW><id>11147442</id><snippet>from collections import Counter
print Counter(ngrams("abbabcbabbabr"))
</snippet></ROW><ROW><id>11147442</id><snippet>ngrams()</snippet></ROW><ROW><id>11147442</id><snippet>from collections import deque

def ngrams(it, n=2):
    it = iter(it)
    deq = deque(it, maxlen=n)
    yield tuple(deq)
    for p in it:
        deq.append(p)
        yield tuple(deq)
</snippet></ROW><ROW><id>11147702</id><snippet>class Category(Base):
    __tablename__ = 'categories'
    pk   = Column(String(6), primary_key=True)

class Item(Base):
    __tablename__ = 'items'
    pk          = Column(String(6), primary_key=True)
    category_pk = Column(String(6), ForeignKey('categories.pk') )
    size        = Column(Integer(), nullable=False)
    category    = relationship('Category', backref=backref('items'))

class Sizes(Base):
    __tablename__ = 'sizes'
    category_pk = Column(String(6), primary_key=True )
    size        = Column(Integer(), primary_key=True )
    category    = relationship('Category', backref=backref('sizes'))
    items       = relationship('Item')

    __table_args__ = (
        ForeignKeyConstraint(
            ["category_pk", "size"],
            ["items.category_pk", "items.size"]
        ),
    )
</snippet></ROW><ROW><id>11147784</id><snippet>upload_files = self.get_uploads('file')  # 'file' is file upload field in the form
</snippet></ROW><ROW><id>11147784</id><snippet>upload_files = self.get_uploads('logo_img')
</snippet></ROW><ROW><id>11147918</id><snippet>import paramiko

user = "user"
pass = "pass"
host = "host"

client = paramiko.SSHClient()
client.load_system_host_keys()
client.set_missing_host_key_policy(paramiko.AutoAddPolicy())
client.connect(host, port=22, username=user, password=pass)
client.exec_command("./mycommand1")
client.exec_command("./mycommand2")
client.close()
</snippet></ROW><ROW><id>11148190</id><snippet>import timeit

def f1(aRange):
    x = [2*i for i in aRange]
    y = [3*i for i in aRange]
    return x,y

def f2(aRange):
    x, y = zip(*[(2*i, 3*i) for i in aRange])
    return x,y

def f3(aRange):
    x, y = zip(*((2*i, 3*i) for i in aRange))
    return x,y

def f4(aRange):
    x = []
    y = []
    for i in aRange:
        x.append(i*2)
        y.append(i*3)
    return x,y

print "f1: %f" %timeit.Timer("f1(range(100))", "from __main__ import f1").timeit(100000)
print "f2: %f" %timeit.Timer("f2(range(100))", "from __main__ import f2").timeit(100000)
print "f3: %f" %timeit.Timer("f3(range(100))", "from __main__ import f3").timeit(100000)
print "f4: %f" %timeit.Timer("f4(range(100))", "from __main__ import f4").timeit(100000)
</snippet></ROW><ROW><id>11148190</id><snippet>f1: 2.127573
f2: 3.551838
f3: 3.859768
f4: 4.282406
</snippet></ROW><ROW><id>11148331</id><snippet>import sys

infile, outfile = sys.argv[1], sys.argv[2]

with open(infile) as inf, open(outfile,"w") as outf:
    line_words = (line.split(',') for line in inf)
    outf.writelines(words[1].strip() + '\n' for words in line_words if len(words)&gt;1)
</snippet></ROW><ROW><id>11148336</id><snippet>--no-install</snippet></ROW><ROW><id>11148336</id><snippet>pip install --no-install &lt;package&gt;
</snippet></ROW><ROW><id>11148336</id><snippet>Downloading/unpacking celery                                                                                   
  Downloading celery-2.5.5.tar.gz (945Kb): 945Kb downloaded
  Running setup.py egg_info for package celery

    no previously-included directories found matching 'tests/*.pyc'
    no previously-included directories found matching 'docs/*.pyc'
    no previously-included directories found matching 'contrib/*.pyc'
    no previously-included directories found matching 'celery/*.pyc'
    no previously-included directories found matching 'examples/*.pyc'
    no previously-included directories found matching 'bin/*.pyc'
    no previously-included directories found matching 'docs/.build'
    no previously-included directories found matching 'docs/graffles'
    no previously-included directories found matching '.tox/*'
Downloading/unpacking anyjson&gt;=0.3.1 (from celery)
  Downloading anyjson-0.3.3.tar.gz
  Running setup.py egg_info for package anyjson

Downloading/unpacking kombu&gt;=2.1.8,&lt;2.2.0 (from celery)
  Downloading kombu-2.1.8.tar.gz (273Kb): 273Kb downloaded
  Running setup.py egg_info for package kombu

Downloading/unpacking python-dateutil&gt;=1.5,&lt;2.0 (from celery)
  Downloading python-dateutil-1.5.tar.gz (233Kb): 233Kb downloaded
  Running setup.py egg_info for package python-dateutil

Downloading/unpacking amqplib&gt;=1.0 (from kombu&gt;=2.1.8,&lt;2.2.0-&gt;celery)
  Downloading amqplib-1.0.2.tgz (58Kb): 58Kb downloaded
  Running setup.py egg_info for package amqplib

Successfully downloaded celery anyjson kombu python-dateutil amqplib
</snippet></ROW><ROW><id>11148336</id><snippet>&lt;virtualenv root&gt;/build</snippet></ROW><ROW><id>11148696</id><snippet>getQuote</snippet></ROW><ROW><id>11148696</id><snippet>yahooQF</snippet></ROW><ROW><id>11148696</id><snippet>require("quantmod")
getQuote("GS", what = yahooQF(c("Market Capitalization", "Earnings/Share", 
         "P/E Ratio", "Book Value", "EBITDA", "52-week Range")))

            Trade Time Market Capitalization Earnings/Share P/E Ratio Book Value EBITDA  52-week Range
GS 2012-06-21 04:00:00               47.870B          6.764     14.27    134.476      0 84.27 - 139.25
</snippet></ROW><ROW><id>11148696</id><snippet>getQuote("GS", what=yahooQF())
</snippet></ROW><ROW><id>11148696</id><snippet>getFinancials</snippet></ROW><ROW><id>11148696</id><snippet>getEarnings</snippet></ROW><ROW><id>11148696</id><snippet>require("qmao")
tail(getEarnings("GS"), 10)
                    EPS.ESTIMATE EPS.ACTUAL PREV.YEAR.ACTUAL
2010-04-20 06:00:00         4.01       5.59             3.39
2010-07-20 07:00:00         2.08       0.78             4.93
2010-10-19 07:00:00         2.32       2.98             5.25
2011-01-19 07:00:00         3.76       3.79             8.20
2011-04-19 07:00:00         0.82       1.56             5.59
2011-07-19 06:00:00         2.27       1.85             0.78
2011-10-18 06:00:00        -0.16      -0.84             2.98
2012-01-18 06:00:00         1.24       1.84             3.79
2012-04-17 06:00:00         3.55       3.92             1.56
2012-07-17 06:00:00         2.05         NA             1.85
</snippet></ROW><ROW><id>11148696</id><snippet>update_instruments.*</snippet></ROW><ROW><id>11148696</id><snippet>require("FinancialInstrument")
stock("GS", currency("USD")) # define the stock
#[1] "GS"
update_instruments.yahoo("GS") #update with yahoo
#[1] "GS"
getInstrument("GS")
#primary_id          :"GS"
#currency            :"USD"
#multiplier          :1
#tick_size           :0.01
#identifiers         : list()
#type                :"stock"
#name                :"Goldman Sachs Gro"
#exchange            :"NYSE"
#market.cap          :"47.870B"
#avg.volume          :5480530
#EPS                 :6.76
#EPS.current.year.est:11.4
#EPS.next.year.est   :12.9
#book.value          :134
#EBITDA              :0
#range.52wk          :"84.27 - 139.25"
#defined.by          :"yahoo"
#updated             : POSIXct, format: "2012-06-21 19:31:11"
</snippet></ROW><ROW><id>11148937</id><snippet>import time

s = '2012-06-21 20:36:11'

t = time.strptime(s, '%Y-%m-%d %H:%M:%S')
print time.strftime('%d %B %Y %H:%M', t)
</snippet></ROW><ROW><id>11148937</id><snippet>21 June 2012 20:36
</snippet></ROW><ROW><id>11148937</id><snippet>def nth(n):
    return str(n) + nth.ext[int(n)%10]
nth.ext = ['th', 'st', 'nd', 'rd'] + ['th']*6

print nth(t.tm_mday) + time.strftime(' %B %Y %H:%M', t)
</snippet></ROW><ROW><id>11148937</id><snippet>21st June 2012 20:36
</snippet></ROW><ROW><id>11149295</id><snippet>&lt;a href="{% url page_item item.id %}"&gt;Item 1&lt;/a&gt;
</snippet></ROW><ROW><id>11149374</id><snippet>def check_thread(self):
    # Still alive? Check again in half a second
    if self.mt.isAlive():
        self.after(500, self.check_thread)
    else:
        print "Step Three"

def my_function(self):
    self.mt = MyThread()
    self.mt.start()
    self.check_thread()
</snippet></ROW><ROW><id>11149406</id><snippet>class MyWidget(self, tkinter.Frame):
    def __init__(self, *args, **kwargs):
        tkinter.Frame.__init__(self, *args, **kwargs)
        self.entry = tkinter.Entry(self)
        self.button = tkinter.Button(self, text="...",
                                     command=self._on_button)
        self.button.pack(side="right")
        self.entry.poack(side="left", fill="both", expand=True)

    def _on_button(self):
        s = &lt;call whatever dialog you want...&gt;
        if s != "":
            self.entry.delete(0, "end")
            self.entry.insert(0, s)

...
entry = MyWidget(master)
entry.grid(...)
...
</snippet></ROW><ROW><id>11149587</id><snippet>print repr(fromstring(response).text_content())
</snippet></ROW><ROW><id>11149850</id><snippet>sys.exit()</snippet></ROW><ROW><id>11150008</id><snippet>import time
import sys
for x in range(101):
    sys.stdout.write('\r%d%%' % x)
    sys.stdout.flush()
    time.sleep(0.2)
sys.stdout.write('\n')
</snippet></ROW><ROW><id>11150008</id><snippet>import sys
sys.stdout.write('this is a very long line')
sys.stdout.write('\rshort line')
sys.stdout.write('\n')
</snippet></ROW><ROW><id>11150187</id><snippet>fh.seek(0)
</snippet></ROW><ROW><id>11150187</id><snippet>data = list(read)
</snippet></ROW><ROW><id>11150187</id><snippet>data</snippet></ROW><ROW><id>11150413</id><snippet>import re

def natural_sort(l): 
    convert = lambda text: int(text) if text.isdigit() else text.lower() 
    alphanum_key = lambda key: [convert(c) for c in re.split('([0-9]+)', key)] 
    return sorted(l, key=alphanum_key)
</snippet></ROW><ROW><id>11150454</id><snippet>language-agnostic</snippet></ROW><ROW><id>11150454</id><snippet>if</snippet></ROW><ROW><id>11150454</id><snippet>if</snippet></ROW><ROW><id>11150454</id><snippet>if</snippet></ROW><ROW><id>11150454</id><snippet>tmp == ''</snippet></ROW><ROW><id>11150454</id><snippet>rtn.append</snippet></ROW><ROW><id>11150454</id><snippet>if curCharIndex == lastIndex: push items to list</snippet></ROW><ROW><id>11150454</id><snippet>if</snippet></ROW><ROW><id>11150659</id><snippet>Authentication Options</snippet></ROW><ROW><id>11150659</id><snippet>(Experimental) Federated Login</snippet></ROW><ROW><id>11150659</id><snippet>Google Accounts API</snippet></ROW><ROW><id>11150734</id><snippet>cd('dir') # doesn't works.
</snippet></ROW><ROW><id>11150734</id><snippet>with cd('dir'):
    print('pwd') # Directory change reflects here.
</snippet></ROW><ROW><id>11150734</id><snippet>run('export WORKON_HOME=$HOME/.virtualenvs')
run('source /usr/local/bin/virtualenvwrapper.sh &amp;&amp; mkvirtualenv myenv')
run('source /usr/local/bin/virtualenvwrapper.sh &amp;&amp; workon myenv')
</snippet></ROW><ROW><id>11150734</id><snippet>with prefix('WORKON_HOME=$HOME/.virtualenvs'):
    with prefix('source /usr/local/bin/virtualenvwrapper.sh'):
        with prefix('workon myenv'): # Assuming there is a env called `myenv`
            run('pip install -r requirements.txt') # Works in virtualenv
</snippet></ROW><ROW><id>11150849</id><snippet>::1             localhost 
</snippet></ROW><ROW><id>11150968</id><snippet>self</snippet></ROW><ROW><id>11150968</id><snippet>ROSTER = []

class Player():
    def __init__(self, name, score = 0):
        self.name = name
        self.score = score
        ROSTER.append(self)
</snippet></ROW><ROW><id>11150968</id><snippet>ROSTER</snippet></ROW><ROW><id>11150968</id><snippet>&gt;&gt;&gt; p1 = Player("Jane")
&gt;&gt;&gt; p2 = Player("John")
&gt;&gt;&gt; ROSTER
[&lt;__main__.Player instance at 0x10a937a70&gt;, &lt;__main__.Player instance at 0x10a937a28&gt;]
&gt;&gt;&gt; for p in ROSTER:
...   print p.name, p.score
... 
Jane 0
John 0
</snippet></ROW><ROW><id>11150968</id><snippet>ROSTER = dict()

class Player():
    def __init__(self, name, score = 0):
        self.name = name
        self.score = score
        ROSTER[self.name] = self
</snippet></ROW><ROW><id>11150968</id><snippet>ROSTER[name]</snippet></ROW><ROW><id>11150968</id><snippet>ROSTER.values()</snippet></ROW><ROW><id>11150968</id><snippet>&gt;&gt;&gt; p1 = Player("Jane")
&gt;&gt;&gt; p2 = Player("John")
&gt;&gt;&gt; print ROSTER["Jane"].name, ROSTER["Jane"].score
Jane 0
&gt;&gt;&gt; print ROSTER["John"].name, ROSTER["John"].score
John 0
&gt;&gt;&gt; for p in ROSTER.values():
...   print p.name, p.score
... 
Jane 0
John 0
</snippet></ROW><ROW><id>11151305</id><snippet>def parseLocation(self,response):
    hxs = HtmlXPathSelector(response)
    item = response.meta['item']

    dl = hxs.select("//dl")
    if len(dl)&gt;0:
        address = hxs.select("//dl[1]/dd").extract()
        loc = {'address':remove_entities(replace_escape_chars(replace_tags(address[0], token=' '), replace_by=''))}
        yield loc

    locations_select = hxs.select("//select/option/@value").extract()
    if len(locations_select)&gt;0:
        yield self.fetchLocations(locations_select, response.meta['company_id'], item)
</snippet></ROW><ROW><id>11151305</id><snippet>yield loc</snippet></ROW><ROW><id>11151305</id><snippet>loc</snippet></ROW><ROW><id>11151305</id><snippet>dict</snippet></ROW><ROW><id>11151305</id><snippet>Item</snippet></ROW><ROW><id>11151418</id><snippet>sheet.write(j,col.element)
</snippet></ROW><ROW><id>11151418</id><snippet>sheet.write(j,col,element)
</snippet></ROW><ROW><id>11151559</id><snippet>ipython</snippet></ROW><ROW><id>11151559</id><snippet>showPythonShell()</snippet></ROW><ROW><id>11151559</id><snippet>from IPython import embed; embed();
</snippet></ROW><ROW><id>11151559</id><snippet>ipython</snippet></ROW><ROW><id>11151559</id><snippet>ipython</snippet></ROW><ROW><id>11151677</id><snippet>django.conf.settings.COMPRESS_OUTPUT_DIR 
Default :   'CACHE' 
Controls the directory inside COMPRESS_ROOT that compressed files will be written to.)
</snippet></ROW><ROW><id>11151677</id><snippet>MEDIA_CACHE</snippet></ROW><ROW><id>11151677</id><snippet>COMPRESS_OUTPUT_DIR</snippet></ROW><ROW><id>11151677</id><snippet>'compressor'</snippet></ROW><ROW><id>11151677</id><snippet>'cache'</snippet></ROW><ROW><id>11151790</id><snippet>w.writerows(c.split(' | ') for c in content)
</snippet></ROW><ROW><id>11152368</id><snippet>""</snippet></ROW><ROW><id>11152593</id><snippet>val = cache.setdefault('the-key', calculate_value('the-key'))
</snippet></ROW><ROW><id>11152593</id><snippet>&gt;&gt;&gt; cache = {'a': 1, 'b': 2}
&gt;&gt;&gt; cache.setdefault('a', 0)
1
&gt;&gt;&gt; cache.setdefault('b', 0)
2
&gt;&gt;&gt; cache.setdefault('c', 0)
0
&gt;&gt;&gt; cache
{'a': 1, 'c': 0, 'b': 2}
</snippet></ROW><ROW><id>11153040</id><snippet>import numpy as np
import pylab as pl

for i in xrange(1, 5):
    pl.subplot(220+i)
    pl.pie([i,2], labels=["a","b"], autopct='%1.1f%%')

l = pl.legend(title="sample")
pl.show()
</snippet></ROW><ROW><id>11153040</id><snippet>import numpy as np
import pylab as pl

for i in xrange(1, 5):
    pl.subplot(220+i)
    pl.pie([i,2], labels=["a","b"], autopct='%1.1f%%')

fig = pl.gcf()
axe = fig.add_axes([0.4,0.4,0.2,0.2])

pie = pl.pie([1,1], labels=["a","b"])
l = pl.legend(title="sample", loc="center")
for group in pie:
    for x in group:
        x.set_visible(False)

pl.show()
</snippet></ROW><ROW><id>11153051</id><snippet>from selenium.firefox.webdriver import WebDriver
driver = WebDriver()
</snippet></ROW><ROW><id>11153051</id><snippet>from selenium import webdriver
driver = webdriver.Firefox()
</snippet></ROW><ROW><id>11153116</id><snippet>django.utils.decorators.method_decorator</snippet></ROW><ROW><id>11153116</id><snippet>__name__</snippet></ROW><ROW><id>11153116</id><snippet>functools.update_wrapper</snippet></ROW><ROW><id>11153116</id><snippet>Role</snippet></ROW><ROW><id>11153116</id><snippet>space_admin_required = method_decorator(role_required(roles.space_admin))
class AddProposal(FormView):

    @space_admin_required
    def dispatch(self, *args, **kwargs):
        return super(AddProposal, self).dispatch(*args, **kwargs)
</snippet></ROW><ROW><id>11153709</id><snippet>var data = {
    csrfmiddlewaretoken: $('#myForm input[name=csrfmiddlewaretoken]').val(),
    foo: 'bar',
};

$.ajax({
    type: 'POST',
    url: 'url/to/ajax/',
    data: data,
    dataType: 'json',
    success: function(result, textStatus, jqXHR) {
        // do something with result
    },
});
</snippet></ROW><ROW><id>11153709</id><snippet>jQuery(document).ajaxSend(function(event, xhr, settings) {
    function getCookie(name) {
        var cookieValue = null;
        if (document.cookie &amp;&amp; document.cookie != '') {
            var cookies = document.cookie.split(';');
            for (var i = 0; i &lt; cookies.length; i++) {
                var cookie = jQuery.trim(cookies[i]);
                // Does this cookie string begin with the name we want?
                if (cookie.substring(0, name.length + 1) == (name + '=')) {
                    cookieValue = decodeURIComponent(cookie.substring(name.length + 1));
                    break;
                }
            }
        }
        return cookieValue;
    }
    function sameOrigin(url) {
        // url could be relative or scheme relative or absolute
        var host = document.location.host; // host + port
        var protocol = document.location.protocol;
        var sr_origin = '//' + host;
        var origin = protocol + sr_origin;
        // Allow absolute or scheme relative URLs to same origin
        return (url == origin || url.slice(0, origin.length + 1) == origin + '/') ||
            (url == sr_origin || url.slice(0, sr_origin.length + 1) == sr_origin + '/') ||
            // or any other URL that isn't scheme relative or absolute i.e relative.
            !(/^(\/\/|http:|https:).*/.test(url));
    }
    function safeMethod(method) {
        return (/^(GET|HEAD|OPTIONS|TRACE)$/.test(method));
    }

    if (!safeMethod(settings.type) &amp;&amp; sameOrigin(settings.url)) {
        xhr.setRequestHeader("X-CSRFToken", getCookie('csrftoken'));
    }
});
</snippet></ROW><ROW><id>11153766</id><snippet>Counter</snippet></ROW><ROW><id>11153766</id><snippet>sys.version_info</snippet></ROW><ROW><id>11153766</id><snippet>import collections</snippet></ROW><ROW><id>11153766</id><snippet>print collections.__file__</snippet></ROW><ROW><id>11153766</id><snippet>class Counter</snippet></ROW><ROW><id>11153891</id><snippet>&gt;&gt;&gt; 4 &lt; 5 &lt; 6
True
&gt;&gt;&gt; 4 &lt; 5 !=2
True
</snippet></ROW><ROW><id>11153891</id><snippet>a op1 b op2 c</snippet></ROW><ROW><id>11153891</id><snippet>op1</snippet></ROW><ROW><id>11153891</id><snippet>op2</snippet></ROW><ROW><id>11153891</id><snippet>&lt;</snippet></ROW><ROW><id>11153891</id><snippet>&gt;</snippet></ROW><ROW><id>11153891</id><snippet>!=</snippet></ROW><ROW><id>11153891</id><snippet>==</snippet></ROW><ROW><id>11153891</id><snippet>&lt;=</snippet></ROW><ROW><id>11153891</id><snippet>&gt;=</snippet></ROW><ROW><id>11153891</id><snippet>is</snippet></ROW><ROW><id>11153891</id><snippet>is not</snippet></ROW><ROW><id>11153891</id><snippet>in</snippet></ROW><ROW><id>11153891</id><snippet>not in</snippet></ROW><ROW><id>11153891</id><snippet>a op1 b and b op2 c
</snippet></ROW><ROW><id>11153891</id><snippet>&gt;&gt;&gt; 5 != '5' != 'five' != (3+2)
True
</snippet></ROW><ROW><id>11153891</id><snippet>5 != (3+2)</snippet></ROW><ROW><id>11153891</id><snippet>==</snippet></ROW><ROW><id>11153891</id><snippet>__eq__</snippet></ROW><ROW><id>11153932</id><snippet>y = int(w, base=2)
</snippet></ROW><ROW><id>11153932</id><snippet>f</snippet></ROW><ROW><id>11153932</id><snippet>f.close()
</snippet></ROW><ROW><id>11153932</id><snippet>with open("cipher.txt", "r") as f:
    ciphers = f.readlines()
</snippet></ROW><ROW><id>11154267</id><snippet>import string

shift = 221

letters = string.ascii_letters + string.punctuation + string.digits
text = raw_input("Please enter text\n")

e = ''.join(letters[letters.index(l) + shift % len(letters)]
            if letters.index(l) is not None else ' ' for l in text)
print e
</snippet></ROW><ROW><id>11154267</id><snippet>from itertools import cycle, izip
from operator import add, sub
from string import printable as alphabet

def vigenere(text, key, mode='encode'):
    alen = len(alphabet)
    key = cycle(key + key[-2:0:-1])
    op = add if mode == 'encode' else sub
    return ''.join(alphabet[op(alphabet.index(c),
                               alphabet.index(k)) % alen]
                   for c, k in izip(text, key))

c = vigenere('attack at dawn', 'secret', mode='encode')
print c  # CHFBqN8BF8FoIO
print vigenere(c, 'secret', mode='decode')
</snippet></ROW><ROW><id>11154682</id><snippet>do_this</snippet></ROW><ROW><id>11154682</id><snippet>do_that</snippet></ROW><ROW><id>11154682</id><snippet>foo</snippet></ROW><ROW><id>11154682</id><snippet>foo</snippet></ROW><ROW><id>11154682</id><snippet>class Foo(object):
    def __init__(self, x, y):
        self.x = x
        self.y = y

    def do_this(self):
        pass

    def do_that(self):
        pass

    def __call__(self):
        self.do_this()
        self.do_that()

foo = Foo(x, y)
foo()
foo.do_this()
</snippet></ROW><ROW><id>11154715</id><snippet>import views</snippet></ROW><ROW><id>11154715</id><snippet>from views import * #Now instead of views.ShowTime i just use ShowTime
</snippet></ROW><ROW><id>11154715</id><snippet>from TestApp.views import *
</snippet></ROW><ROW><id>11155066</id><snippet>Select(self, idx, on=1)

[de]select an item
</snippet></ROW><ROW><id>11155067</id><snippet>Decimal</snippet></ROW><ROW><id>11155067</id><snippet>from fractions import Fraction
from decimal import localcontext, Decimal

def print_fraction(f, digits):
    assert(f.imag == 0)

    # Automatically reset the Decimal settings
    with localcontext() as ctx:
        ctx.prec = digits
        print(Decimal(f.numerator) / Decimal(f.denominator))

f = Fraction(5, 7)
print_fraction(f, 52)
</snippet></ROW><ROW><id>11155067</id><snippet>0.7142857142857142857142857142857142857142857142857143</snippet></ROW><ROW><id>11155124</id><snippet>    group = parser.add_mutually_exclusive_group(required=True)
    group.add_argument('--foo',action=.....)
    group.add_argument('--bar',action=.....)
    args = parser.parse_args()
</snippet></ROW><ROW><id>11155409</id><snippet>In [1]: s = '1. Good morning 2. Hello 3. Bye'

In [2]: import re

In [3]: re.split('\d+\. ', s)
Out[3]: ['', 'Good morning ', 'Hello ', 'Bye']
</snippet></ROW><ROW><id>11155409</id><snippet>' *\d+\. *'</snippet></ROW><ROW><id>11155460</id><snippet>&gt;&gt;&gt; from cluster import *
&gt;&gt;&gt; L = [15,16,57,59,14]
&gt;&gt;&gt; cl = HierarchicalClustering(L, lambda x,y: abs(x-y))
&gt;&gt;&gt; cl.getlevel(2)
[[14, 15, 16], [57, 59]]
</snippet></ROW><ROW><id>11155460</id><snippet>&gt;&gt;&gt; [mean(cluster) for cluster in cl.getlevel(2)]
[15, 58]
</snippet></ROW><ROW><id>11155522</id><snippet>import functools
slot = functools.partial( self.checkState, self.fieldList["valueField" + str(i)] )
self.fieldList["valueField" + str(i)].cursorPositionChanged.connect( slot )
</snippet></ROW><ROW><id>11155555</id><snippet>HtmlXPathSelector</snippet></ROW><ROW><id>11155555</id><snippet>mymodule</snippet></ROW><ROW><id>11155555</id><snippet>with patch('mymodule.HtmlXPathSelector') as MockClass:
    ...
</snippet></ROW><ROW><id>11155555</id><snippet>with patch('__main__.Class') as MockClass:
</snippet></ROW><ROW><id>11155859</id><snippet>my $xml = join (/\n/, &lt;main::DATA&gt;);
my @fees = (1, 2, 3, 4);

$xml =~ s/(&lt;Status Fees=")\${Fees}("\/&gt;)/{$1 . shift(@fees) . $2}/ige;

print "$xml";

__DATA__
&lt;Principal ID="122" &gt; 
&lt;Status Fees="${Fees}"/&gt; 
&lt;/Principal&gt; 
&lt;Principal ID="123" &gt; 
&lt;Status Fees="${Fees}"/&gt; 
&lt;/Principal&gt; 
&lt;Principal ID="124" &gt; 
&lt;Status Fees="${Fees}"/&gt; 
&lt;/Principal&gt; 
&lt;Principal ID="125" &gt; 
&lt;Status Fees="${Fees}"/&gt; 
&lt;/Principal&gt;
</snippet></ROW><ROW><id>11155859</id><snippet>&lt;Principal ID="122" &gt; 
&lt;Status Fees="1"/&gt; 
&lt;/Principal&gt; 
&lt;Principal ID="123" &gt; 
&lt;Status Fees="2"/&gt; 
&lt;/Principal&gt; 
&lt;Principal ID="124" &gt; 
&lt;Status Fees="3"/&gt; 
&lt;/Principal&gt; 
&lt;Principal ID="125" &gt; 
&lt;Status Fees="4"/&gt; 
&lt;/Principal&gt;
</snippet></ROW><ROW><id>11155859</id><snippet>${Fees}</snippet></ROW><ROW><id>11155859</id><snippet>$Fees</snippet></ROW><ROW><id>11155859</id><snippet>my $xml = join (/\n/, &lt;main::DATA&gt;);
my ($fee1, $fee2, $fee3, $fee4) = (1, 2, 3, 4);

$xml =~ s/(&lt;Status Fees=")\${(.*?)}("\/&gt;)/{$1 . eval('$'.$2) . $3}/ige;

print "$xml";

__DATA__
&lt;Principal ID="122" &gt; 
&lt;Status Fees="${fee1}"/&gt; 
&lt;/Principal&gt; 
&lt;Principal ID="123" &gt; 
&lt;Status Fees="${fee2}"/&gt; 
&lt;/Principal&gt; 
&lt;Principal ID="124" &gt; 
&lt;Status Fees="${fee3}"/&gt; 
&lt;/Principal&gt; 
&lt;Principal ID="125" &gt; 
&lt;Status Fees="${fee4}"/&gt; 
&lt;/Principal&gt;
</snippet></ROW><ROW><id>11155859</id><snippet>&lt;Principal ID="122" &gt; 
&lt;Status Fees="1"/&gt; 
&lt;/Principal&gt; 
&lt;Principal ID="123" &gt; 
&lt;Status Fees="2"/&gt; 
&lt;/Principal&gt; 
&lt;Principal ID="124" &gt; 
&lt;Status Fees="3"/&gt; 
&lt;/Principal&gt; 
&lt;Principal ID="125" &gt; 
&lt;Status Fees="4"/&gt; 
&lt;/Principal&gt;
</snippet></ROW><ROW><id>11156077</id><snippet>operator.itemgetter(1)</snippet></ROW><ROW><id>11156077</id><snippet>operator.eq</snippet></ROW><ROW><id>11156077</id><snippet>compose()</snippet></ROW><ROW><id>11156077</id><snippet>def compose(f, g):
    def composed(x):
        return f(g(x))
    return composed
</snippet></ROW><ROW><id>11156077</id><snippet>from operator import itemgetter, eq
from functools import partial

def take_items(a):
    return takewhile(compose(partial(eq, 1), itemgetter(1)), a)
</snippet></ROW><ROW><id>11156077</id><snippet>def take_items(a):
    for x in a:
        if x[1] != 1:
            break
        yield x
</snippet></ROW><ROW><id>11156265</id><snippet>{
    "a" : [
        [1, 2, 3, 4, 5],
        [6, 7, 8, 9, 10],
        [11, 12, 13, 14, 15],
        [16, 17, 18, 19, 20]
    ],
    "b" : [
    ...
    ]
}
</snippet></ROW><ROW><id>11156265</id><snippet>import json
myfile = open("myfile.txt")
myVars = json.load(myfile)
myfile.close()
myVars['a']
</snippet></ROW><ROW><id>11156353</id><snippet># -*- coding: utf-8 -*-
from mpl_toolkits.mplot3d import Axes3D
import matplotlib.pyplot as plt
import numpy as np
from itertools import product, combinations
fig = plt.figure()
ax = fig.gca(projection='3d')
ax.set_aspect("equal")

#draw cube
r = [-1, 1]
for s, e in combinations(np.array(list(product(r,r,r))), 2):
    if np.sum(np.abs(s-e)) == r[1]-r[0]:
        ax.plot3D(*zip(s,e), color="b")

#draw sphere
u, v = np.mgrid[0:2*np.pi:20j, 0:np.pi:10j]
x=np.cos(u)*np.sin(v)
y=np.sin(u)*np.sin(v)
z=np.cos(v)
ax.plot_wireframe(x, y, z, color="r")

#draw a point
ax.scatter([0],[0],[0],color="g",s=100)

#draw a vector
from matplotlib.patches import FancyArrowPatch
from mpl_toolkits.mplot3d import proj3d

class Arrow3D(FancyArrowPatch):
    def __init__(self, xs, ys, zs, *args, **kwargs):
        FancyArrowPatch.__init__(self, (0,0), (0,0), *args, **kwargs)
        self._verts3d = xs, ys, zs

    def draw(self, renderer):
        xs3d, ys3d, zs3d = self._verts3d
        xs, ys, zs = proj3d.proj_transform(xs3d, ys3d, zs3d, renderer.M)
        self.set_positions((xs[0],ys[0]),(xs[1],ys[1]))
        FancyArrowPatch.draw(self, renderer)

a = Arrow3D([0,1],[0,1],[0,1], mutation_scale=20, lw=1, arrowstyle="-|&gt;", color="k")
ax.add_artist(a)
plt.show()
</snippet></ROW><ROW><id>11156400</id><snippet>&lt;body data-viewurl="http://www.example.com/route/to/view"&gt;
    ...
&lt;/body&gt;
</snippet></ROW><ROW><id>11156400</id><snippet>.data()</snippet></ROW><ROW><id>11156400</id><snippet>var viewurl = $('body').data('viewurl');
</snippet></ROW><ROW><id>11156400</id><snippet>&lt;head&gt;
    &lt;link rel="ajax-datasource" id="viewurl"
          href="http://www.example.com/route/to/view" /&gt;
    ...
&lt;/head&gt;
</snippet></ROW><ROW><id>11156400</id><snippet>$('link#viewurl').attr('href')</snippet></ROW><ROW><id>11156400</id><snippet>$('link[rel=ajax-datasource]').attr('href')</snippet></ROW><ROW><id>11156400</id><snippet>&lt;head&gt;
    ...
    &lt;script type="text/javascript"&gt;
       window.contextVariables = {
           viewurl = "http://www.example.com/route/to/view",
           ...
       };
    &lt;/script&gt;
&lt;/head&gt;
</snippet></ROW><ROW><id>11156400</id><snippet>contextVariables.viewurl</snippet></ROW><ROW><id>11156455</id><snippet>solve</snippet></ROW><ROW><id>11156455</id><snippet>1262         if all(p.is_linear for p in polys):
1263             n, m = len(polys), len(symbols)
1264             matrix = zeros(n, m + 1)
1265 
1266             for i, poly in enumerate(polys):
1267                 for monom, coeff in poly.terms():
1268                     try:
1269                         j = list(monom).index(1)
1270                         matrix[i, j] = coeff
1271                     except ValueError:
1272                         matrix[i, m] = -coeff
1273 
1274             # returns a dictionary ({symbols: values}) or None
1275             result = solve_linear_system(matrix, *symbols, **flags)
</snippet></ROW><ROW><id>11156455</id><snippet>Poly</snippet></ROW><ROW><id>11156455</id><snippet>polys</snippet></ROW><ROW><id>11156455</id><snippet>symbols</snippet></ROW><ROW><id>11156532</id><snippet>sql = "INSERT INTO `testSmall` (`idtestSmall`, `column1`, `column2`) VALUES (?, ?, ?);"
cursor.execute (sql, (row[0], row[1], row[2]))
</snippet></ROW><ROW><id>11156532</id><snippet>row[0], row[1], row[2]</snippet></ROW><ROW><id>11156532</id><snippet>sql = "INSERT INTO testSmall VALUES (%s);" % ', '.join('?' for _ in row)
cursor.execute (sql, row)
</snippet></ROW><ROW><id>11156855</id><snippet>d.values()</snippet></ROW><ROW><id>11156855</id><snippet>ds = sorted(d.iteritems())
name0, name1, name2..., namen = [v[1] for v in ds]
</snippet></ROW><ROW><id>11156855</id><snippet>for k, v in dict.iteritems():
    setattr(self, k, v)
</snippet></ROW><ROW><id>11156855</id><snippet>def func(**kwargs):
    # Do stuff with labeled args

func(**d)
</snippet></ROW><ROW><id>11156953</id><snippet>StringIO</snippet></ROW><ROW><id>11157061</id><snippet>textwrap.dedent()</snippet></ROW><ROW><id>11157061</id><snippet>&gt;&gt;&gt; print(textwrap.dedent(s))

Controller = require 'controller'

class foo
    view: 'baz'
    class: 'bar'

    constructor: -&gt;
        Controller.mix @
</snippet></ROW><ROW><id>11157145</id><snippet>import numpy as np
from StringIO import StringIO
import pylab as pl

datastr = """06/14/12    SMB 12104560    8096373.6   1.5     1.08
06/15/12    SMB 10328540    8217192.68  1.26    1.24
06/18/12    SMB 5495294     8232792.78  0.67    0.85"""

data = np.loadtxt(StringIO(datastr), 
                  dtype=np.dtype([("date", "S8"), ("value", "f8")]), 
                  usecols=(0,-1))
x = np.arange(len(data))
pl.bar(x, data["value"], width=0.8)
pl.xticks(x+0.4, data["date"])
pl.show()
</snippet></ROW><ROW><id>11157519</id><snippet>testvar = "MyVariable"
</snippet></ROW><ROW><id>11157519</id><snippet>'format': '%(levelname)s %(asctime)s %(module)s %(process)d %(thread)d %(message)s ' + testvar
</snippet></ROW><ROW><id>11157537</id><snippet>calendar.monthrange</snippet></ROW><ROW><id>11157537</id><snippet>&gt;&gt;&gt; from datetime import date, year
&gt;&gt;&gt; import calendar
&gt;&gt;&gt; def first_day(dt):
...      # Simply copy year and month into new date instance
...      return date(dt.year, dt.month, 1)
...
&gt;&gt;&gt; def last_day(dt):
...      days_in_month = calendar.monthrange(dt.year, dt.month)[1]
...      return date(dt.year, dt.month, days_in_month)
...
&gt;&gt;&gt; nth_day = 32
&gt;&gt;&gt; day_of_year = date(2012, 1, 1) + timedelta(days=nth_day - 1)
&gt;&gt;&gt; day_of_year
datetime.date(2012, 2, 1)
&gt;&gt;&gt; first_day(day_of_year), last_day(day_of_year)
(datetime.date(2012, 2, 1), datetime.date(2012, 2, 29))
&gt;&gt;&gt; day_of_year - first_day(day_of_year), last_day(day_of_year) - day_of_year
(datetime.timedelta(0), datetime.timedelta(28))
</snippet></ROW><ROW><id>11157537</id><snippet>def delta_to_start_and_end(year, day_of_year):
    dt = date(year, 1, 1) + timedelta(days=(day_of_year - 1))

    def first_day(dt):
         return date(dt.year, dt.month, 1)
    def last_day(dt):
         days_in_month = calendar.monthrange(dt.year, dt.month)[1]
         return date(dt.year, dt.month, days_in_month)

    return (dt - first_day(dt)).days, (last_day(dt) - dt).days
</snippet></ROW><ROW><id>11157537</id><snippet>&gt;&gt;&gt; delta_to_start_and_end(2012, 32)
(0, 28)
&gt;&gt;&gt; delta_to_start_and_end(2011, 32)
(0, 27)
&gt;&gt;&gt; delta_to_start_and_end(2012, 34)
(2, 26)
&gt;&gt;&gt; delta_to_start_and_end(2012, 364)
(28, 2)
</snippet></ROW><ROW><id>11157537</id><snippet>1</snippet></ROW><ROW><id>11157537</id><snippet>0</snippet></ROW><ROW><id>11157537</id><snippet>+ 1</snippet></ROW><ROW><id>11157537</id><snippet>delta_to_start_and_end</snippet></ROW><ROW><id>11157537</id><snippet>def last_day(dt):
     rest, month = divmod(dt.month, 12)
     return date(dt.year + rest, month + 1, 1) - timedelta(days=1) 
</snippet></ROW><ROW><id>11157537</id><snippet>divmod</snippet></ROW><ROW><id>11157537</id><snippet>13</snippet></ROW><ROW><id>11157537</id><snippet>1</snippet></ROW><ROW><id>11157537</id><snippet>divmod</snippet></ROW><ROW><id>11157537</id><snippet>1</snippet></ROW><ROW><id>11157537</id><snippet>12</snippet></ROW><ROW><id>11157736</id><snippet>keys = set(l1).intersection(set(d1.keys()))
result = {k:d1[k] for k in keys}
</snippet></ROW><ROW><id>11157736</id><snippet>keys = set(l1).intersection(d1)
</snippet></ROW><ROW><id>11157736</id><snippet>keys = d1.keys() &amp; l1
</snippet></ROW><ROW><id>11157746</id><snippet>search = request.GET['q']
message = "You searched for: %s." % search
for term in list(set(search.split())):
    # ...search each term and compile into a set of results
</snippet></ROW><ROW><id>11157799</id><snippet>range_expr = 'C:C'

for row in ws.iter_rows(row_offset=4):
    '''do things'''
</snippet></ROW><ROW><id>11157866</id><snippet>mpkg</snippet></ROW><ROW><id>11157866</id><snippet>.run</snippet></ROW><ROW><id>11157866</id><snippet>Popen</snippet></ROW><ROW><id>11157866</id><snippet>File.mpkg</snippet></ROW><ROW><id>11157866</id><snippet>ls -l /Path/to/File.mpkg</snippet></ROW><ROW><id>11157866</id><snippet>.deb</snippet></ROW><ROW><id>11157866</id><snippet>dpkg</snippet></ROW><ROW><id>11157866</id><snippet>p = subprocess.Popen(['/usr/bin/dpkg', '-i', '/Path/to/File.deb'], ...)
</snippet></ROW><ROW><id>11157866</id><snippet>p = subprocess.Popen('dpkg -i /Path/to/File.deb', ..., shell=True)
</snippet></ROW><ROW><id>11157866</id><snippet>Popen</snippet></ROW><ROW><id>11157866</id><snippet>Popen.communicate</snippet></ROW><ROW><id>11157866</id><snippet>p = subprocess.Popen(
    ['/Path/to/File.mpkg'],
    stdout=subprocess.PIPE, stderr=subprocess.PIPE,
    stdin=subprocess.PIPE)
(out, err) = p.communicate()
</snippet></ROW><ROW><id>11157866</id><snippet>out</snippet></ROW><ROW><id>11157866</id><snippet>err</snippet></ROW><ROW><id>11157866</id><snippet>subprocess.call</snippet></ROW><ROW><id>11157936</id><snippet>password = "pass"
username = "user"
transport.connect(username = username, password = password)
</snippet></ROW><ROW><id>11158342</id><snippet>data = numpy.loadtxt((etf + '.csv',
</snippet></ROW><ROW><id>11158342</id><snippet>loadtxt</snippet></ROW><ROW><id>11158342</id><snippet>   dtype = ([("date", "S8"), ("value", "f8")])
</snippet></ROW><ROW><id>11158342</id><snippet>=</snippet></ROW><ROW><id>11158342</id><snippet>data = numpy.loadtxt((etf + '.csv'), ... )
</snippet></ROW><ROW><id>11158342</id><snippet>etf + '.csv'</snippet></ROW><ROW><id>11158342</id><snippet>(</snippet></ROW><ROW><id>11158482</id><snippet>import re

for x in set(re.findall(r'\b\w+\b', f.read())):
</snippet></ROW><ROW><id>11158482</id><snippet>\w</snippet></ROW><ROW><id>11158482</id><snippet>[a-zA-Z]</snippet></ROW><ROW><id>11158482</id><snippet>&gt;&gt;&gt; re.findall(r'\b\w+\b', "This is not is, clearly is: weird")
['This', 'is', 'not', 'is', 'clearly', 'is', 'weird']
</snippet></ROW><ROW><id>11158569</id><snippet>import gzip
import cStringIO
from Crypto.Cipher import Blowfish

#gzip and encrypt
small_buffer = cStringIO.StringIO()
small_string = "test data"
with gzip.GzipFile(fileobj=small_buffer,compresslevel=6, mode='wb') as gzip_obj:
    gzip_obj.write(small_string)
compressed_str = small_buffer.getvalue()
blowfish = Blowfish.new('better than bad')
#remainder = '|'*(8 - (len(compressed_str) % 8))
pad_bytes = 8 - (len(compressed_str) % 8)
padding = chr(pad_bytes)*pad_bytes
compressed_str += padding
encrypted = blowfish.encrypt(compressed_str)
print("encrypted: {}".format(encrypted))



#decrypt and ungzip (pretending to be in a separate space here)
value = encrypted
blowfish = Blowfish.new('better than bad')
decrypted = blowfish.decrypt(value)
buff = cStringIO.StringIO(decrypted)
buff.seek(-1,2) #move to the last byte
pad_bytes = ord(buff.read(1)) #get the size of the padding from the last byte
buff.truncate(len(buff.getvalue()) - pad_bytes) #probably a better way to do this.
buff.seek(0)
with gzip.GzipFile(fileobj=buff) as gz:
    back_home = gz.read()
print("back home: {}".format(back_home))
</snippet></ROW><ROW><id>11158712</id><snippet>ln -s /path/to/target /path/to/shortcut</snippet></ROW><ROW><id>11158712</id><snippet>/usr/lib/python2.7/python /path/to/application.py</snippet></ROW><ROW><id>11158726</id><snippet>from operator import mul

def validate(array, sizes):
    if reduce(mul, sizes) != len(array):
        raise ValueError("Array dimension incompatible with desired sizes")

    return array, sizes

def reshape(array, sizes):
    for s in sizes:
        array = [array[i:i + s] for i in range(0, len(array), s)]

    return array[0]

data = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]
length = [2, 2, 3]

print reshape(validate(data, length))

length = [2, 2, 2]

print reshape(validate(data, length))
</snippet></ROW><ROW><id>11158726</id><snippet>[[[1, 2], [3, 4]], [[5, 6], [7, 8]], [[9, 10], [11, 12]]]
Traceback:
   (...)
ValueError: Array dimension incompatible with desired sizes
</snippet></ROW><ROW><id>11158726</id><snippet>numpy</snippet></ROW><ROW><id>11158726</id><snippet>from numpy import array

print array(data).reshape(*length)  # optionally add .tolist() to convert to list
</snippet></ROW><ROW><id>11158742</id><snippet>{% load 'active_tags' %}
</snippet></ROW><ROW><id>11158742</id><snippet>{% load active_tags %}
</snippet></ROW><ROW><id>11158789</id><snippet>pyramid.compat.escape</snippet></ROW><ROW><id>11158789</id><snippet>cgi.escape</snippet></ROW><ROW><id>11158789</id><snippet>html.escape</snippet></ROW><ROW><id>11158789</id><snippet>markupsafe.escape(x)</snippet></ROW><ROW><id>11158789</id><snippet>__html__</snippet></ROW><ROW><id>11159253</id><snippet>class MainWindow(QWidget):
    def __init__(self):
        QWidget.__init__(self)
        layout = QGridLayout()
        self.sliders = []
        slider_amount = 3
        slider_precision = 10000 # sliders work only with ints, so large ints are used and mapped to floats
        for i in range(slider_amount):
            slider = QSlider(Qt.Horizontal)
            slider.setRange(0, slider_amount*slider_precision)
            slider.setSingleStep(slider.maximum()/100.0)
            slider.setPageStep(slider.maximum()/20.0)
            slider.valueChanged.connect(self.on_slider_value_changed)
            slider.float_value = (i+1)/((1+slider_amount)/2.0*slider_amount) # provide your own default values
            slider.label = QLabel()
            self.sliders.append(slider)
            layout.addWidget(slider, i, 0)
            layout.addWidget(slider.label, i, 1)
        self.update_slider_values()
        self.setLayout(layout)
        self.show()

    def on_slider_value_changed(self, value):
        changed_slider = self.sender()
        changed_slider.float_value = float(value)/changed_slider.maximum()
        delta = sum(slider.float_value for slider in self.sliders)-1
        while abs(delta)&gt;0.00001:
            d = len(self.sliders)-1
            for slider in self.sliders:
                if slider is changed_slider:
                    continue
                old_value = slider.float_value
                slider.float_value = min(max(0, old_value-delta/d), 1)
                delta -= old_value-slider.float_value
                d -= 1
        self.update_slider_values()

    def update_slider_values(self):
        for slider in self.sliders:
            slider_signals_blocked = slider.blockSignals(True)
            slider.setValue(round(slider.float_value*slider.maximum()))
            slider.blockSignals(slider_signals_blocked)
            slider.label.setText('{:.2f}'.format(slider.float_value))

app = QApplication(sys.argv)
mw = MainWindow()
app.exec_()
</snippet></ROW><ROW><id>11159396</id><snippet>--reload</snippet></ROW><ROW><id>11159396</id><snippet>/pserve --reload develoment.ini</snippet></ROW><ROW><id>11159418</id><snippet>import mmap

with open('dump.xml', 'rb') as f:
  # Size 0 will read the ENTIRE file into memory!
  m = mmap.mmap(f.fileno(), 0, prot=mmap.PROT_READ) #File is open read-only

  # Proceed with your code here -- note the file is already in memory
  # so "readine" here will be as fast as could be
  data = m.readline()
  while data:
    # Do stuff
    data = m.readline()
</snippet></ROW><ROW><id>11159471</id><snippet>int_values = [int(v) for v in cell.internal_values if type(v) == float]
</snippet></ROW><ROW><id>11159471</id><snippet>int_values = [int(cell.internal_values[i]) for i in xrange(1, len(cell.internal_values), 2)]
</snippet></ROW><ROW><id>11159509</id><snippet>my_dict.clear()</snippet></ROW><ROW><id>11159798</id><snippet>nf = urllib.urlopen(url)
start = time.time()
page = nf.read()
end = time.time()
nf.close()
# end - start gives you the page load time
</snippet></ROW><ROW><id>11159920</id><snippet>in</snippet></ROW><ROW><id>11159920</id><snippet>for line in f:
    for table in tables:
        # snip...
        if table in line:
            # ...
</snippet></ROW><ROW><id>11160217</id><snippet>12345
18889992345
</snippet></ROW><ROW><id>11160217</id><snippet>12345
1999888345
</snippet></ROW><ROW><id>11160217</id><snippet>import random
import operator

# Easier to use a mutable list than an immutable string for insertion.
sequence = list('123456789123456789')
insertions = '999 888 777 666 555 444 333 222 111'.split()
locations = [random.randrange(len(sequence)) for i in xrange(10)]
modifications = zip(locations,insertions)
print modifications
# sort them by location.
# Since Python 2.2, sorts are guaranteed to be stable,
# so if you insert 999 into 1, then 222 into 1, this will keep them
# in the right order
modifications.sort(key=operator.itemgetter(0))
print modifications
# apply in reverse order
for i,seq in reversed(modifications):
    print 'insert {} into {}'.format(seq,i)
    # Here's where using a mutable list helps
    sequence[i:i] = list(seq)
    print ''.join(sequence)
</snippet></ROW><ROW><id>11160217</id><snippet>[(11, '999'), (8, '888'), (7, '777'), (15, '666'), (12, '555'), (11, '444'), (0, '333'), (0, '222'), (15, '111')]
[(0, '333'), (0, '222'), (7, '777'), (8, '888'), (11, '999'), (11, '444'), (12, '555'), (15, '666'), (15, '111')]
insert 111 into 15
123456789123456111789
insert 666 into 15
123456789123456666111789
insert 555 into 12
123456789123555456666111789
insert 444 into 11
123456789124443555456666111789
insert 999 into 11
123456789129994443555456666111789
insert 888 into 8
123456788889129994443555456666111789
insert 777 into 7
123456777788889129994443555456666111789
insert 222 into 0
222123456777788889129994443555456666111789
insert 333 into 0
333222123456777788889129994443555456666111789
</snippet></ROW><ROW><id>11160553</id><snippet>child = pexpect.spawn('some command that requires password')
child.expect('Enter password:')
child.sendline('password')
child.expect(pexpect.EOF, timeout=None)
cmd_show_data =  child.before
cmd_output = cmd_show_data.split('\r\n')
for data in cmd_output:
    print data
</snippet></ROW><ROW><id>11160553</id><snippet>script.py</snippet></ROW><ROW><id>11160701</id><snippet>def do_stuff():
    ... stuff happens ...

if __name__ == '__main__':
    do_stuff()
</snippet></ROW><ROW><id>11160701</id><snippet>from mymodule import do_stuff
do_stuff()
</snippet></ROW><ROW><id>11160701</id><snippet>import mymodule

with open(os.path.splitext(mymodule.__file__)[0] + ".py") as fh:
    exec fh.read()
</snippet></ROW><ROW><id>11160750</id><snippet>cur.execute("""INSERT INTO perioder(fra, id, til) 
               VALUES (?,?,?);""", (fra, per_id, til))
</snippet></ROW><ROW><id>11160750</id><snippet>?</snippet></ROW><ROW><id>11160750</id><snippet>execute()</snippet></ROW><ROW><id>11160943</id><snippet>&gt;&gt;&gt; s="19920101 00:00"
&gt;&gt;&gt; format = "%Y%m%d %H:%M"
&gt;&gt;&gt; d = datetime.datetime.strptime(s, format)
&gt;&gt;&gt; print d
1992-01-01 00:00:00
</snippet></ROW><ROW><id>11160943</id><snippet>3 19920101 23:00</snippet></ROW><ROW><id>11160943</id><snippet>&gt;&gt;&gt; expected = d + datetime.timedelta(days=1)
&gt;&gt;&gt; print expected
1992-01-02 00:00:00
</snippet></ROW><ROW><id>11160943</id><snippet>import csv
import sys
import datetime
import pprint


all_data_points = {}
all_dates = []
expected = ''
format = "%Y%m%d %H:%M"

with open('datafile', 'rt') as f:
    reader = csv.reader(f)
    for row in reader:
        if row and 'Datetime' not in row:
            day_str = row[0]
            rain_str = row[1]
            if not expected:
                all_data_points[day_str] = rain_str
                all_dates.append(day_str)
                d = datetime.datetime.strptime(day_str, format)
                expected = d + datetime.timedelta(days=1)
            else:
                d = datetime.datetime.strptime(day_str, format)
                gap_in_days = d - expected 
                start_day = expected
                if gap_in_days.days &gt; 1:
                    for i in xrange(gap_in_days.days):
                        next_day = start_day + datetime.timedelta(days=1+i)
                        day_str = next_day.strftime(format)
                        all_data_points[day_str] = 'M'
                        all_dates.append(day_str)
                all_data_points[day_str] = rain_str
                expected = d

    pprint.pprint(all_data_points)
</snippet></ROW><ROW><id>11160976</id><snippet>outf.write(str(num))
</snippet></ROW><ROW><id>11160976</id><snippet>outf.write('{}'.format(num))  # more "modern"
outf.write('%d' % num)        # deprecated mostly
</snippet></ROW><ROW><id>11160976</id><snippet>write</snippet></ROW><ROW><id>11160976</id><snippet>num = 7
outf.write('{:03d}\n'.format(num))

num = 12
outf.write('%03d\n' % num)          
</snippet></ROW><ROW><id>11160976</id><snippet>007
012
</snippet></ROW><ROW><id>11161425</id><snippet>if len(lines)&gt; 4</snippet></ROW><ROW><id>11161572</id><snippet>def display():
    print('This program will tell you the area some shapes')
    print('You can choose between...')
    print('1. rectangle')
    print('or')
    print('2. triangle')

def shape():
    shap = int(input('What shape do you choose?'))
    if shap == 1: rectangle()
    elif shap == 2: triangle()
    else:
        print('ERROR: select either rectangle or triangle')
        shape()


def rectangle():
    l = int(input('What is the length?'))
    w = int(input('What is the width?'))
    areaR=l*w
    print('The are is...')
    print(areaR)


def triangle():
    b = int(input('What is the base?'))
    h = int(input('What is the height?'))
    first=b*h
    areaT=.5*first
    print('The area is...')
    print(areaT)

if __name__=="__main__":
    display() #cal display to execute it 
    shape() #cal shape to execute it 
</snippet></ROW><ROW><id>11161629</id><snippet>MarketSocket.py</snippet></ROW><ROW><id>11161629</id><snippet>IO</snippet></ROW><ROW><id>11161629</id><snippet>Parser</snippet></ROW><ROW><id>11161629</id><snippet>from ..Parser import Parser</snippet></ROW><ROW><id>11161629</id><snippet>python MarketSocket.py</snippet></ROW><ROW><id>11161629</id><snippet>__init__.py</snippet></ROW><ROW><id>11161629</id><snippet>MarketData</snippet></ROW><ROW><id>11161629</id><snippet>sys.path</snippet></ROW><ROW><id>11161629</id><snippet>import sys
sys.path.append('../')
</snippet></ROW><ROW><id>11161655</id><snippet>In [1]: s = 'gpmetisfile.txt.part.4'

In [2]: import re

In [3]: re.sub('\D', '', s)
Out[3]: '4'
</snippet></ROW><ROW><id>11161655</id><snippet>'gpmetisfile.txt.06_2012.part.4'</snippet></ROW><ROW><id>11161655</id><snippet>'0620124'</snippet></ROW><ROW><id>11161733</id><snippet>data</snippet></ROW><ROW><id>11161733</id><snippet>.post()</snippet></ROW><ROW><id>11161733</id><snippet>headers</snippet></ROW><ROW><id>11161733</id><snippet>data = {
    'code': '4/xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx',
    'client_id': 'xxxxxxxxxxx.apps.googleusercontent.com',
    'client_secret': 'xxxxxxxxxxxxxxxxx',
    'redirect_uri': 'http://127.0.0.1:8000/information/youtube/'.
    'grant_type': 'authorization_code'
}
r = requests.post(url, data=data)
</snippet></ROW><ROW><id>11161750</id><snippet>Connection reset by peer</snippet></ROW><ROW><id>11161750</id><snippet>shutdown</snippet></ROW><ROW><id>11161750</id><snippet>RST</snippet></ROW><ROW><id>11161888</id><snippet>serve.py</snippet></ROW><ROW><id>11161888</id><snippet>templates/index.html</snippet></ROW><ROW><id>11161888</id><snippet>static/lpoll.js</snippet></ROW><ROW><id>11161973</id><snippet>HKEY_CLASSES_ROOT\Python.File\shell\open\command
</snippet></ROW><ROW><id>11162009</id><snippet>.show</snippet></ROW><ROW><id>11162009</id><snippet>menu.show_all()</snippet></ROW><ROW><id>11162009</id><snippet>item.show()</snippet></ROW><ROW><id>11162009</id><snippet>menu.append(item)</snippet></ROW><ROW><id>11162241</id><snippet>class Foo(object):
    ...
</snippet></ROW><ROW><id>11162241</id><snippet>class..</snippet></ROW><ROW><id>11162241</id><snippet>def bar(self, x):
    ...
</snippet></ROW><ROW><id>11162241</id><snippet>instance.bar(x)</snippet></ROW><ROW><id>11162241</id><snippet>Foo.bar(instance, x)</snippet></ROW><ROW><id>11162241</id><snippet>Foo</snippet></ROW><ROW><id>11162241</id><snippet>__init__</snippet></ROW><ROW><id>11162241</id><snippet>class Foo(object):
    def __init__(self):
        self._bar = None  # Bar is an important "private" member
        self._baz = None  # As is baz
        self._fizzbuzz = 4  # Of course, you can also provide defaults here
</snippet></ROW><ROW><id>11162322</id><snippet>dict</snippet></ROW><ROW><id>11162322</id><snippet>dict</snippet></ROW><ROW><id>11162322</id><snippet>&gt;&gt;&gt; timeit.timeit('a["500"]','a ={}\nfor i in range(1000): a[str(i)] = i')
0.06659698486328125
&gt;&gt;&gt; timeit.timeit('a[500]','a ={}\nfor i in range(1000): a[i] = i')
0.09005999565124512
</snippet></ROW><ROW><id>11162322</id><snippet>int</snippet></ROW><ROW><id>11162483</id><snippet>winfo_rootx</snippet></ROW><ROW><id>11162483</id><snippet>winfo_rooty</snippet></ROW><ROW><id>11162483</id><snippet>wm_geometry</snippet></ROW><ROW><id>11162483</id><snippet>    x = parentWgdt.winfo_rootx()
    y = parentWgdt.winfo_rooty()
    height = parentWgdt.winfo_height()
    geom = "+%d+%d" % (x,y+height)
</snippet></ROW><ROW><id>11162483</id><snippet>geom</snippet></ROW><ROW><id>11162483</id><snippet>geometry</snippet></ROW><ROW><id>11162483</id><snippet>Wgdt</snippet></ROW><ROW><id>11162483</id><snippet>Widget</snippet></ROW><ROW><id>11162563</id><snippet>.text</snippet></ROW><ROW><id>11162563</id><snippet>tostring</snippet></ROW><ROW><id>11162563</id><snippet>In [1]: from lxml import etree

In [2]: xml = '''&lt;xml&gt;
   ...: &lt;language&gt;en-US&lt;/language&gt;
   ...: &lt;provider&gt;VenturesLLC&lt;/provider&gt;
   ...: &lt;video&gt;
   ...:     &lt;original_spoken_locale&gt;en-US&lt;/original_spoken_locale&gt;
   ...:     &lt;vendor_offer_code&gt;TEST_VENDOR&lt;/vendor_offer_code&gt;
   ...:     &lt;release_date&gt;2011-01-15&lt;/release_date&gt;
   ...:     &lt;title&gt;Moving Forward&lt;/title&gt;
   ...:     &lt;vendor_id&gt;ASDF_ING_2012&lt;/vendor_id&gt;
   ...: &lt;/video&gt;&lt;/xml&gt;'''

In [3]: tree = etree.fromstring(xml)

In [4]: vid = tree.xpath('//video')[0]

In [5]: etree.tostring(vid, pretty_print=True)
Out[5]: '&lt;video&gt;\n  &lt;original_spoken_locale&gt;en-US&lt;/original_spoken_locale&gt;\n  &lt;vendor_offer_code&gt;TEST_VENDOR&lt;/vendor_offer_code&gt;\n  &lt;release_date&gt;2011-01-15&lt;/release_date&gt;\n  &lt;title&gt;Moving Forward&lt;/title&gt;\n  &lt;vendor_id&gt;ASDF_ING_2012&lt;/vendor_id&gt;\n&lt;/video&gt;\n'

In [6]: print _
&lt;video&gt;
  &lt;original_spoken_locale&gt;en-US&lt;/original_spoken_locale&gt;
  &lt;vendor_offer_code&gt;TEST_VENDOR&lt;/vendor_offer_code&gt;
  &lt;release_date&gt;2011-01-15&lt;/release_date&gt;
  &lt;title&gt;Moving Forward&lt;/title&gt;
  &lt;vendor_id&gt;ASDF_ING_2012&lt;/vendor_id&gt;
&lt;/video&gt;
</snippet></ROW><ROW><id>11162624</id><snippet>c = Connection()
c.database_names()
</snippet></ROW><ROW><id>11162638</id><snippet>Connection</snippet></ROW><ROW><id>11162640</id><snippet>pts = self.map.scatter(x, y, 90)
self.figure.canvas.mpl_connect('pick_event', DataCursor(plt.gca()))
pts.set_picker(5)
</snippet></ROW><ROW><id>11162640</id><snippet>def __call__(self, event):
    self.event = event
    xdata, ydata = event.artist._offsets[:,0], event.artist._offsets[:,1]
    #self.x, self.y = xdata[event.ind], ydata[event.ind]
    self.x, self.y = event.mouseevent.xdata, event.mouseevent.ydata
    if self.x is not None:
        city = clim['Name'][event.ind[0]]
        if city == self.annotation.get_text() and self.annotation.get_visible():
            # You can click the visible annotation to remove it
            self.annotation.set_visible(False)
            event.canvas.draw()
            return
        self.annotation.xy = self.x, self.y
        self.annotation.set_text(city)
        self.annotation.set_visible(True)
        event.canvas.draw()
</snippet></ROW><ROW><id>11162640</id><snippet>clim['Name']</snippet></ROW><ROW><id>11162640</id><snippet>event.ind</snippet></ROW><ROW><id>11162794</id><snippet>import os

for fname in os.listdir('.'):    # change directory as needed
    if os.path.isfile(fname):    # make sure it's a file, not a directory entry
        with open(fname) as f:   # open file
            for line in f:       # process line by line
                if 'apples' in line:    # search for string
                    print 'found string in file %s' %fname
                    break
</snippet></ROW><ROW><id>11162794</id><snippet>with</snippet></ROW><ROW><id>11162932</id><snippet>input()</snippet></ROW><ROW><id>11162932</id><snippet>raw_input()</snippet></ROW><ROW><id>11162932</id><snippet>input()</snippet></ROW><ROW><id>11163251</id><snippet>text</snippet></ROW><ROW><id>11163251</id><snippet>&gt;&gt;&gt; from xml.etree.ElementTree import parse, tostring
&gt;&gt;&gt; doc = parse('file.xml')
&gt;&gt;&gt; elem = doc.findall('original_spoken_locale')[0]
&gt;&gt;&gt; elem.text = 'new-value'
&gt;&gt;&gt; print tostring(doc.getroot())
&lt;video&gt;
    &lt;original_spoken_locale&gt;new-value&lt;/original_spoken_locale&gt;
    &lt;another_tag&gt;somevalue&lt;/another_tag&gt;
&lt;/video&gt;
</snippet></ROW><ROW><id>11163251</id><snippet>en-US</snippet></ROW><ROW><id>11163342</id><snippet>    import win32com.client as win32
    wb = excel.Workbooks.Open(excel_file)
    selection = "A1:J30" 
    xl_range = wb.Sheets(&lt;sheet_name&gt;).Range(selection)
    excel.ActiveWorkbook.Sheets.Add(                  After=excel.ActiveWorkbook.Sheets(3)).Name="image_sheet"
    cht = excel.ActiveSheet.ChartObjects().Add(0,0,
                                            xl_range.Width, xl_range.Height)
    xl_range.CopyPicture()
    # add the chart to new sheet
    cht.Chart.Paste()
    # Export the sheet with the chart to a new file
    cht.Chart.Export(&lt;image_filename&gt;)
    # Delete the sheet
    cht.Delete()
    excel.ActiveSheet.Delete()
    # Close the book
    excel.ActiveWorkbook.Close()
</snippet></ROW><ROW><id>11163630</id><snippet>def dep_id_from_postcode(context):
    postcode = context.current_parameters['postcode']
    return int(postcode[:2])

class Person(Base):
    postcode = Column(String)
    # ...

    # ...
    department_id = Column(Integer(), ForeignKey('department.id'), onupdate=dep_id_from_postcode)
    # ...
</snippet></ROW><ROW><id>11163820</id><snippet>endpoint = TCP4ClientEndpoint(reactor, host, port)
agent = ProxyAgent(endpoint)

headers = {}
auth = base64.b64encode("%s:%s" % (username, password))
headers["Proxy-Authorization"] = ["Basic " + auth.strip()]

body = agent.request("GET", path, Headers(headers))
</snippet></ROW><ROW><id>11164157</id><snippet>finally</snippet></ROW><ROW><id>11164157</id><snippet>finally</snippet></ROW><ROW><id>11164279</id><snippet>replace</snippet></ROW><ROW><id>11164279</id><snippet>line.replace("ATOM", "1").replace("# ORB", " ")
</snippet></ROW><ROW><id>11164279</id><snippet>input  = open('inp.txt', 'r')
output = open('out.txt', 'w')
clean  = input.read().replace("ATOM", "1").replace("# ORB", " ")
output.write(clean)
</snippet></ROW><ROW><id>11164327</id><snippet>my_functions = []

def put_in_list(fn):
    my_functions.append(fn)
    return fn

@put_in_list
def function1():
    pass

@put_in_list
def function2():
    pass
</snippet></ROW><ROW><id>11164334</id><snippet>from collections import deque

def now_nxt_deque(iterable, n=1):
    deq = deque(maxlen=n)
    for i in iterable:
        deq.append(i)
        if len(deq) == n:
            yield tuple(deq)

for i in now_nxt_deque("hello world", 3):
    print(i)

('h', 'e', 'l')
('e', 'l', 'l')
('l', 'l', 'o')
('l', 'o', ' ')
('o', ' ', 'w')
(' ', 'w', 'o')
('w', 'o', 'r')
('o', 'r', 'l')
('r', 'l', 'd')
</snippet></ROW><ROW><id>11164681</id><snippet>fork()</snippet></ROW><ROW><id>11164681</id><snippet>exec()</snippet></ROW><ROW><id>11164681</id><snippet>subprocess.Popen()</snippet></ROW><ROW><id>11164681</id><snippet>close_fds</snippet></ROW><ROW><id>11164681</id><snippet>os.pipe()</snippet></ROW><ROW><id>11164681</id><snippet>Popen()</snippet></ROW><ROW><id>11164681</id><snippet>pipe()</snippet></ROW><ROW><id>11164748</id><snippet>in_</snippet></ROW><ROW><id>11164791</id><snippet>self.response.headers['Content-Type'] = 'application/csv'
writer = csv.writer(self.response.out)

writer.writerow(["foo", "foo,bar", "bar"])
</snippet></ROW><ROW><id>11164800</id><snippet>random_ingegers</snippet></ROW><ROW><id>11164800</id><snippet>numpy.random</snippet></ROW><ROW><id>11164800</id><snippet>from numpy.random import random_integers</snippet></ROW><ROW><id>11164869</id><snippet>class ThisWorksNow(object):
  def outer(self):
    acc = []
    def inner(msg):
      acc.append(msg)
    inner("Why doesn't")
    inner(" this work?")
    print "".join(acc)
ThisWorksNow().outer()
</snippet></ROW><ROW><id>11164869</id><snippet>nonlocal</snippet></ROW><ROW><id>11164869</id><snippet>print</snippet></ROW><ROW><id>11164869</id><snippet>class StringBuilder(list): # class name stolen from Java
    def __str__(self):
        """this makes the object printable in a way which represents the concatenated string"""
        return "".join(self)
    @property
    def string(self):
        """this gives us a property which represents the concatenated string"""
        return "".join(self)
 # use whatever suits you better, one or both
</snippet></ROW><ROW><id>11164869</id><snippet>class ThisWorksNow(object):
  def outer(self):
    acc = StringBuilder()
    def inner(msg):
      acc.append(msg)
    inner("Why doesn't")
    inner(" this work?")
    print acc
    print acc.string # depending on what you take above
ThisWorksNow().outer()
</snippet></ROW><ROW><id>11164869</id><snippet>global</snippet></ROW><ROW><id>11164869</id><snippet>global</snippet></ROW><ROW><id>11164869</id><snippet>acc</snippet></ROW><ROW><id>11164869</id><snippet>class WhyDoesntThisWork(object):
  def outer(self):
    global acc
    acc = ''
    def inner(msg):
      global acc
      acc = acc + msg
</snippet></ROW><ROW><id>11164869</id><snippet>acc</snippet></ROW><ROW><id>11164869</id><snippet>global</snippet></ROW><ROW><id>11164869</id><snippet>acc</snippet></ROW><ROW><id>11164869</id><snippet>global acc</snippet></ROW><ROW><id>11164869</id><snippet>acc</snippet></ROW><ROW><id>11164871</id><snippet>curl -X POST -d @my_file.xml http://user:pass@myhost/
</snippet></ROW><ROW><id>11164871</id><snippet>-X</snippet></ROW><ROW><id>11164898</id><snippet>PATH</snippet></ROW><ROW><id>11164898</id><snippet>/usr/local/bin/</snippet></ROW><ROW><id>11164943</id><snippet>count</snippet></ROW><ROW><id>11164943</id><snippet>count</snippet></ROW><ROW><id>11164943</id><snippet>for</snippet></ROW><ROW><id>11164943</id><snippet>n</snippet></ROW><ROW><id>11164943</id><snippet>import sys

def out(s):
    sys.stdout.write(s + "\n")
    sys.stdout.flush()

count = 0
n = 1
while count &lt; 6:

    six_consecutive = True
    for a in range(n):
        for b in range(n):
            for c in range(n):
                #out("a: %d b: %d c: %d  n: %d" % (a, b, c, n))
                if 6*a + 9*b + 20*c == n:
                    six_consecutive = False

    out("n == %d  count == %d  six_consecutive == %s" %
            (n, count, str(six_consecutive)))

    if six_consecutive:
        count += 1
    else:
        count = 0

    n += 1

print("Largest number of McNuggets that cannot be bought in exact quantity: %d." % (n - 5))
</snippet></ROW><ROW><id>11164952</id><snippet>.</snippet></ROW><ROW><id>11164952</id><snippet>result = re.search('\&lt;title\&gt;(.+?)\&lt;/title\&gt;', html, re.DOTALL)
</snippet></ROW><ROW><id>11164952</id><snippet>'.'</snippet></ROW><ROW><id>11164993</id><snippet>class Bar:
    def __init__(self):
        for fn in ["open","openW","remove","mkdir","exists","isdir","listdir"]:
            print "register", fn
            def func_wrapper(filename, fn=fn):
                print "called func wrapper", fn, filename
            setattr(self, fn, func_wrapper)
</snippet></ROW><ROW><id>11164993</id><snippet>def mkwrapper(fn):
    def func_wrapper(filename):
        print "called func wrapper", fn, filename
    func_wrapper.__name__ = fn
    return func_wrapper

class Bar:
    def __init__(self):
        for fn in ["open","openW","remove","mkdir","exists","isdir","listdir"]:
            print "register", fn
            func_wrapper = mkwrapper(fn)
            setattr(self, fn, func_wrapper)
</snippet></ROW><ROW><id>11164993</id><snippet>fn</snippet></ROW><ROW><id>11165168</id><snippet>shell = subprocess.Popen("/bin/bash -i".split(), stdin=subprocess.PIPE,
                         stdout=subprocess.PIPE, stderr=subprocess.PIPE)
</snippet></ROW><ROW><id>11165168</id><snippet>pexpect</snippet></ROW><ROW><id>11165186</id><snippet>[:]</snippet></ROW><ROW><id>11165186</id><snippet>[::]</snippet></ROW><ROW><id>11165186</id><snippet>[::-1]</snippet></ROW><ROW><id>11165437</id><snippet>&gt;&gt;&gt; import logging
&gt;&gt;&gt; from testfixtures import LogCapture
&gt;&gt;&gt; with LogCapture() as l:
...     logger = logging.getLogger()
...     logger.info('a message')
...     logger.error('an error')
</snippet></ROW><ROW><id>11165437</id><snippet>&gt;&gt;&gt; l.check(
...     ('root', 'INFO', 'a message'),
...     ('root', 'ERROR', 'another error'),
...     )
Traceback (most recent call last):
 ...
AssertionError: Sequence not as expected:

same:
(('root', 'INFO', 'a message'),)

first:
(('root', 'ERROR', 'another error'),)

second:
(('root', 'ERROR', 'an error'),)
</snippet></ROW><ROW><id>11165437</id><snippet>from testfixtures import log_capture

@log_capture()
def test_function(l):
    logger = logging.getLogger()
    logger.info('a message')
    logger.error('an error')

    l.check(
        ('root', 'INFO', 'a message'),
        ('root', 'ERROR', 'an error'),
        )
</snippet></ROW><ROW><id>11165437</id><snippet>&gt;&gt;&gt; from testfixtures import LogCapture
&gt;&gt;&gt; l = LogCapture()
</snippet></ROW><ROW><id>11165437</id><snippet>&gt;&gt;&gt; l.check(('root', 'INFO', 'a message'))
&lt;...&gt;
</snippet></ROW><ROW><id>11165437</id><snippet>l.records</snippet></ROW><ROW><id>11165437</id><snippet>l</snippet></ROW><ROW><id>11165437</id><snippet>LogCapture</snippet></ROW><ROW><id>11165437</id><snippet>msg</snippet></ROW><ROW><id>11165437</id><snippet>levelname</snippet></ROW><ROW><id>11165524</id><snippet>myFunction</snippet></ROW><ROW><id>11165524</id><snippet>MyClass</snippet></ROW><ROW><id>11165524</id><snippet>__init__</snippet></ROW><ROW><id>11165524</id><snippet>myFunction</snippet></ROW><ROW><id>11165569</id><snippet>def filter_nested_dict(node, search_term):
    if isinstance(node, list):
        if node[0] == search_term:
            return node
        else:
            return None
    else:
        dupe_node = {}
        for key, val in node.iteritems():
            cur_node = filter_nested_dict(val, search_term)
            if cur_node:
                dupe_node[key] = cur_node
        return dupe_node or None
</snippet></ROW><ROW><id>11165728</id><snippet>collections.Counter</snippet></ROW><ROW><id>11165728</id><snippet>import collections
count = collections.Counter()

# add a list
for i in listb:
    if count[i] == 0:
        all_open.append(i)
    count[i] += 1

# delete a list
for i in listb:
    count[i] -= 1
    if count[i] == 0:
        all_open.remove(i)
</snippet></ROW><ROW><id>11165728</id><snippet>all_open</snippet></ROW><ROW><id>11165728</id><snippet>count.keys()</snippet></ROW><ROW><id>11165764</id><snippet>$ git clone https://github.com/celery/billiard
$ cd billiard 
$ python setup.py develop
</snippet></ROW><ROW><id>11165845</id><snippet>import socket,os,threading,subprocess                                                                                                    

class mysocket(socket.socket):

    def __init__(self,*arg, **kw):
        super(mysocket,self).__init__(*arg, **kw)
        self.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)

    def read(self):
        return self.recv(2048)

    def write(self,data):
        self.send(data)

    def accept(self):
        conn,addr = super(mysocket,self).accept()
        return mysocket(_sock=conn),addr

socket.socket = mysocket

import SocketServer

class RequestHandler(SocketServer.BaseRequestHandler):

    def handle(self):
        subprocess.call('script -q -f -c "bash -i" /dev/null',shell=True,env=os.environ,stdin=self.request,stdout=self.request,stderr=self.request)

class ThreadedTCPServer(SocketServer.ThreadingMixIn, SocketServer.TCPServer):
    pass

if __name__ == '__main__':
    address = ('0.0.0.0', 2000)
    server = ThreadedTCPServer(address, RequestHandler)
    server.serve_forever()
</snippet></ROW><ROW><id>11165873</id><snippet>In [1]: x = symbols("x", real=True)

In [2]: solve(x + 1 &lt; 2, x)
Out[2]: x &lt; 1
</snippet></ROW><ROW><id>11165949</id><snippet>{k:v for v in userplays.values() for k in v.keys()}.keys()
</snippet></ROW><ROW><id>11165949</id><snippet>['Lady Gaga', 'Mogwai', 'AC/DC', 'The Raconteurs', 'The XX']
</snippet></ROW><ROW><id>11165949</id><snippet>import timeit

userplays = { "Alice"   : { "AC/DC" : 2,
                            "The Raconteurs" : 3,
                            "Mogwai" : 1
                          },
              "Bob"     : { "The XX" : 4,
                            "Lady Gaga" : 3,
                            "Mogwai" : 1,
                            "The Raconteurs" : 1
                          },
              "Charlie" : { "AC/DC" : 7,
                            "Lady Gaga" : 7
                          }
            }


def f1():
    set(b for v in userplays.values() for b in v.keys())

def f2():
    {k:v for v in userplays.values() for k in v.keys()}.keys()    

t1=timeit.Timer(f1).timeit(10000)
t2=timeit.Timer(f2).timeit(10000)
faster=abs(t1-t2) / max(t1,t2)
print("""
set:                {:.4} seconds
dict:               {:.4} seconds
faster of those is  {:.4%} faster

""".format(t1,t2,faster))
</snippet></ROW><ROW><id>11165949</id><snippet>set:                0.02448 seconds
dict:               0.01988 seconds
faster of those is  18.7907% faster
</snippet></ROW><ROW><id>11165949</id><snippet>f1: set from a generator expression
f2: keys from a dict comprehension
f3: set comprehension
f4: set from a list comprehension

       rate/s      f4       f1       f2       f3 
f4    358,650    0.0%   -13.4%   -31.7%   -41.3% 
f1    414,246   15.5%     0.0%   -21.1%   -32.2% 
f2    525,230   46.4%    26.8%     0.0%   -14.1% 
f3    611,158   70.4%    47.5%    16.4%     0.0% 
</snippet></ROW><ROW><id>11165949</id><snippet>import timeit
import locale
locale.setlocale(locale.LC_NUMERIC, "")

userplays = { "Alice"   : { "AC/DC" : 2,
                            "The Raconteurs" : 3,
                            "Mogwai" : 1
                          },
              "Bob"     : { "The XX" : 4,
                            "Lady Gaga" : 3,
                            "Mogwai" : 1,
                            "The Raconteurs" : 1
                          },
              "Charlie" : { "AC/DC" : 7,
                            "Lady Gaga" : 7
                          }
            }

def f1():
    """set from a generator expression"""
    set(b for v in userplays.values() for b in v.keys())

def f2():
    """keys from a dict comprehension"""
    {k:v for v in userplays.values() for k in v.keys()}.keys()    

def f3():
    """set comprehension"""
    {b for v in userplays.values() for b in v.keys()}

def f4():
    """set from a list comprehension"""
    set([b for v in userplays.values() for b in v.keys()])

def test_table(funcs, c):
    results={k.__name__:timeit.Timer(k).timeit(c) for k in funcs}
    fastest=sorted(results,key=results.get, reverse=True)
    table=[]
    table.append([' ','rate/s']+fastest)
    for e in fastest:
        temp=[]
        temp.append(e)
        temp.append(int(round(float(c)/results[e])))
        t2=['{:.1%}'.format((results[x]-results[e])/results[e]) for x in fastest]
        table.append(temp+t2)
    print()    
    for e in funcs:
        print('{}: {}'.format(e.__name__, e.__doc__))
    print()            
    pprint_table(table)    

def format_num(num):
    """Format a number according to given places.
    Adds commas, etc. Will truncate floats into ints!"""

    try:
        inum = int(num)
        return locale.format("%.*f", (0, inum), True)

    except (ValueError, TypeError):
        return str(num)

def get_max_width(table, index):
    """Get the maximum width of the given column index"""
    return max([len(format_num(row[index])) for row in table])        

def pprint_table(table):
    col_paddings = []
    for i in range(len(table[0])):
        col_paddings.append(get_max_width(table, i))

    for row in table:
        # left col
        print(row[0].ljust(col_paddings[0] + 1),end=' ')
        # rest of the cols
        for i in range(1, len(row)):
            col = format_num(row[i]).rjust(col_paddings[i] + 2)
            print (col,end=' ')
        print()

test_table([f1,f2,f3,f4],100000) 
</snippet></ROW><ROW><id>11165954</id><snippet>functions.py</snippet></ROW><ROW><id>11165954</id><snippet>import functions</snippet></ROW><ROW><id>11165954</id><snippet>pip install -e src/mycheckout</snippet></ROW><ROW><id>11166085</id><snippet>def DrawAWobble(y_wobble,step=0.1):
    R = y_wobble/2.0 - 1/(2.0*y_wobble)

    glBegin(GL_QUAD_STRIP)
    x = 0.0
    while x&lt;2.0+0.5*step:
        glTexCoord2f(0.5*x,0.0); glVertex2f(0.5*(x-1), -0.5 + R + (R*R-(1-x)*(1-x)+1)**0.5)
        glTexCoord2f(0.5*x,1.0); glVertex2f(0.5*(x-1),  0.5 + R + (R*R-(1-x)*(1-x)+1)**0.5)
        x += step
    glEnd()
</snippet></ROW><ROW><id>11166191</id><snippet>s = int(input('What is the side length')
</snippet></ROW><ROW><id>11166539</id><snippet>python</snippet></ROW><ROW><id>11166539</id><snippet>import django</snippet></ROW><ROW><id>11166539</id><snippet>django</snippet></ROW><ROW><id>11166539</id><snippet>/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/site-packages/</snippet></ROW><ROW><id>11166556</id><snippet>random.choice(words) * 5</snippet></ROW><ROW><id>11166556</id><snippet>random.choice</snippet></ROW><ROW><id>11166556</id><snippet>&gt;&gt;&gt; import random
&gt;&gt;&gt; words = ['hello', 'apple', 'something', 'yeah', 'nope', 'lalala']
&gt;&gt;&gt; print ''.join(random.choice(words) for _ in range(5))
applesomethinghellohellolalala
</snippet></ROW><ROW><id>11166677</id><snippet>ephem.degrees()</snippet></ROW><ROW><id>11166677</id><snippet>ephem.degree</snippet></ROW><ROW><id>11166677</id><snippet>TypeError: 'float' object is not callable
</snippet></ROW><ROW><id>11166677</id><snippet>ephem.degree</snippet></ROW><ROW><id>11166677</id><snippet>az = float(ephem.degrees('180'))
alt = float(ephem.degrees('30'))
ra, dec = obs.radec_of(az,alt)
print ra, dec

→ 12:30:10.05 -89:53:54.7
</snippet></ROW><ROW><id>11166677</id><snippet>ephem.degrees()</snippet></ROW><ROW><id>11166677</id><snippet>float()</snippet></ROW><ROW><id>11166677</id><snippet>az = ephem.degrees('180')
alt = ephem.degrees('30')
</snippet></ROW><ROW><id>11166677</id><snippet>radec_of()</snippet></ROW><ROW><id>11166677</id><snippet>radec_of()</snippet></ROW><ROW><id>11166677</id><snippet>az</snippet></ROW><ROW><id>11166677</id><snippet>alt</snippet></ROW><ROW><id>11166677</id><snippet>ra, dec = obs.radec_of('180', '30')
</snippet></ROW><ROW><id>11166677</id><snippet>Observer</snippet></ROW><ROW><id>11166677</id><snippet>obs.pressure = 0
ra, dec = obs.radec_of('180', '30')
print ra, dec

→ 12:24:25.48 -89:55:15.9
</snippet></ROW><ROW><id>11166757</id><snippet>is</snippet></ROW><ROW><id>11166757</id><snippet>==</snippet></ROW><ROW><id>11166757</id><snippet>None</snippet></ROW><ROW><id>11166757</id><snippet>class A(object):
    def __eq__(self, other):
        return True

print A() == None
</snippet></ROW><ROW><id>11166757</id><snippet>True
</snippet></ROW><ROW><id>11166757</id><snippet>is</snippet></ROW><ROW><id>11166798</id><snippet>{{record['city']}} {{record['date']}}
</snippet></ROW><ROW><id>11166837</id><snippet>python setup.py --version
</snippet></ROW><ROW><id>11166837</id><snippet>--version</snippet></ROW><ROW><id>11167101</id><snippet>PicklingError: Can't pickle 'tkapp' object: &lt;tkapp object at 0x02A4C4F0&gt;</snippet></ROW><ROW><id>11167101</id><snippet>multiprocessing</snippet></ROW><ROW><id>11167101</id><snippet>no share</snippet></ROW><ROW><id>11167101</id><snippet>true</snippet></ROW><ROW><id>11167101</id><snippet>pickle</snippet></ROW><ROW><id>11167101</id><snippet>def start_server(self):
    self.logger.insert(END,"Starting process for client.")
    process=multiprocessing.Process(target=self.start_serving)
    process.start()
</snippet></ROW><ROW><id>11167101</id><snippet>def start_serving():
    HOST, PORT = "localhost", 9999
    server = SocketServer.TCPServer((HOST, PORT), MyTCPHandler)
    server.serve_forever()
</snippet></ROW><ROW><id>11167101</id><snippet> def start_server(self):
    self.logger.insert(END,"Starting process for client.")
    self.process = multiprocessing.Process(target=start_serving) # make sure you keep a reference of the process.
    self.process.start()
</snippet></ROW><ROW><id>11167101</id><snippet>def stop_server(self):
    self.process.terminate()


if __name__ == "__main__":
    Application().run()
</snippet></ROW><ROW><id>11167101</id><snippet>ThreadingMixIn</snippet></ROW><ROW><id>11167101</id><snippet>thread</snippet></ROW><ROW><id>11167101</id><snippet>process</snippet></ROW><ROW><id>11167101</id><snippet>thread</snippet></ROW><ROW><id>11167101</id><snippet>serve_forever</snippet></ROW><ROW><id>11167562</id><snippet>dict</snippet></ROW><ROW><id>11167562</id><snippet>keys()</snippet></ROW><ROW><id>11167562</id><snippet>sorted()</snippet></ROW><ROW><id>11167562</id><snippet>OrderedDict</snippet></ROW><ROW><id>11167562</id><snippet>collections</snippet></ROW><ROW><id>11167562</id><snippet>&gt;&gt;&gt; from collections import OrderedDict
&gt;&gt;&gt; od = OrderedDict()
&gt;&gt;&gt; od[1] = "one"
&gt;&gt;&gt; od[2] = "two"
&gt;&gt;&gt; od[3] = "three"
&gt;&gt;&gt; od.keys()
[1, 2, 3]
</snippet></ROW><ROW><id>11167610</id><snippet>close</snippet></ROW><ROW><id>11167610</id><snippet>deleteLater</snippet></ROW><ROW><id>11167610</id><snippet>def removeButtons(self):
    for cnt in reversed(range(self.dvbox.count())):
        # takeAt does both the jobs of itemAt and removeWidget
        # namely it removes an item and returns it
        widget = self.dvbox.takeAt(cnt).widget()

        if widget is not None: 
            # widget will be None if the item is a layout
            widget.deleteLater()
</snippet></ROW><ROW><id>11167982</id><snippet>logger = cherrypy.log.access_log
logger.removeHandler(logger.handlers[0])
</snippet></ROW><ROW><id>11168081</id><snippet>\</snippet></ROW><ROW><id>11168081</id><snippet>'</snippet></ROW><ROW><id>11168081</id><snippet>"</snippet></ROW><ROW><id>11168081</id><snippet>'</snippet></ROW><ROW><id>11168081</id><snippet>r'it wouldn\'t be possible to store this string'
r'since it'd produce a syntax error without the escape'
</snippet></ROW><ROW><id>11168253</id><snippet>'google.appengine.ext.ndb.NdbDjangoMiddleware'
</snippet></ROW><ROW><id>11168470</id><snippet>def pytest_funcarg__res(request):
    def setup():
        print "res-setup"
    def teardown(val):
        print "res-teardown"
    return request.cached_setup(setup, teardown)

def test_hello(res):
    raise KeyboardInterrupt()
</snippet></ROW><ROW><id>11168470</id><snippet>============================= test session starts ==============================
platform linux2 -- Python 2.7.3 -- pytest-2.2.5.dev4
plugins: xdist, bugzilla, pep8, cache
collected 1 items

tmp/test_keyboardinterrupt.py res-setup
res-teardown


!!!!!!!!!!!!!!!!!!!!!!!!!!!!!! KeyboardInterrupt !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
/home/hpk/p/pytest/tmp/test_keyboardinterrupt.py:10: KeyboardInterrupt
</snippet></ROW><ROW><id>11168513</id><snippet>def posSubStringMatchRecursive(target,key,res):
    import string
    index=str.rfind(target, key)
    if index !=-1:

        target=target[:(index+len(key)-1)]
        res.append(index) #append the index to the list res, 
        return posSubStringMatchRecursive(target,key,res) #Use return here when calling recursively else your program will return None, and also pass res to the function
    else:
        return res

 print(posSubStringMatchRecursive('aatcgdaaaggraaa', 'aa',[]))#pass a empty list to the function
print(posSubStringMatchRecursive('aatcgdaaaggraaa', 'a',[]))
</snippet></ROW><ROW><id>11168513</id><snippet>[13, 12, 7, 6, 0]`
[14, 13, 12, 8, 7, 6, 1, 0]
</snippet></ROW><ROW><id>11168656</id><snippet>repr</snippet></ROW><ROW><id>11168656</id><snippet>class TaskCategory(db.Model):
    title = db.StringProperty()
    description = db.TextProperty()

    def __repr__(self):
        return unicode(self.title)
</snippet></ROW><ROW><id>11168715</id><snippet># -*- coding: utf-8
... 
img_urls = form_soup.findAll('a', title=u'查看大图')
</snippet></ROW><ROW><id>11168715</id><snippet>u</snippet></ROW><ROW><id>11168715</id><snippet>coding</snippet></ROW><ROW><id>11168715</id><snippet>img_urls = form_soup.findAll('a', title=u'\u67e5\u770b\u5927\u56fe')
</snippet></ROW><ROW><id>11168715</id><snippet>&gt;&gt;&gt; from BeautifulSoup import BeautifulSoup
&gt;&gt;&gt; example = u'&lt;P class=img_s&gt;\n&lt;A href="/pic/93/b67793.jpg" target="_blank" title="&lt;A href="/pic/93/b67793.jpg" target="_blank" title="\u67e5\u770b\u5927\u56fe"&gt;&lt;IMG src="/pic/93/s67793.jpg"&gt;&lt;/A&gt;&lt;/P&gt;'
&gt;&gt;&gt; soup = BeautifulSoup(example)
&gt;&gt;&gt; soup.findAll('a', title=u'\u67e5\u770b\u5927\u56fe')
[&lt;a href="/pic/93/b67793.jpg" target="_blank" title="查看大图"&gt;&lt;img src="/pic/93/s67793.jpg" /&gt;&lt;/a&gt;]
</snippet></ROW><ROW><id>11168754</id><snippet>with open('file1.txt','r+') as f1 ,open('file2.txt','r+') as f2:
    file1=set(x.strip() for x in f1 if x.strip())
    file2=set(x.strip() for x in f2 if x.strip())
    newfile=file1.symmetric_difference(file2) #symmetric difference removes those values which are present in both sets, and returns a new set.
    f2.truncate(0) #truncate the file to 0 bytes
    f1.truncate(0)
    f2.seek(0) # to push the cursor back to the starting pointing in the file.
    f1.seek(0)
    for x in newfile:
        f1.write(x+'\n')
        f2.write(x+'\n')
</snippet></ROW><ROW><id>11168754</id><snippet>svn
git
firefox
gedit
google chrome
bar
</snippet></ROW><ROW><id>11169020</id><snippet>from Test import Cfg
import Component

if __name__ == '__main__':
    assert id(Cfg) == id(Component.Cfg)
</snippet></ROW><ROW><id>11169020</id><snippet>import Cfg
import Component

if __name__ == '__main__':
    assert id(Cfg) == id(Component.Cfg)
</snippet></ROW><ROW><id>11169020</id><snippet>Cfg</snippet></ROW><ROW><id>11169106</id><snippet>candidates = db.relationship('Candidate', backref='post', lazy='dynamic')
</snippet></ROW><ROW><id>11169106</id><snippet>candidates</snippet></ROW><ROW><id>11169106</id><snippet>candidate</snippet></ROW><ROW><id>11169106</id><snippet>__table_args__ = (
        UniqueConstraint("id", "candidate_id"),
    )
</snippet></ROW><ROW><id>11169106</id><snippet>commit</snippet></ROW><ROW><id>11169106</id><snippet>db.session.add(post)
db.session.commit()
</snippet></ROW><ROW><id>11169106</id><snippet>from sqlalchemy.orm import sessionmaker
Session = sessionmaker()
session = session()
session.commit()
</snippet></ROW><ROW><id>11169106</id><snippet>db.session.commit()
</snippet></ROW><ROW><id>11169106</id><snippet># In sqlalchemy
Base = declarative_base()
class Post(Base):
    # ...

# In flask-sqlalchemy
class Post(db.Model):
    # ...
</snippet></ROW><ROW><id>11169154</id><snippet>PYTHONPATH</snippet></ROW><ROW><id>11169154</id><snippet>PYTHONPATH</snippet></ROW><ROW><id>11169154</id><snippet>import sys;sys.path.append(the_path)</snippet></ROW><ROW><id>11169353</id><snippet>ffmpeg</snippet></ROW><ROW><id>11169353</id><snippet>subprocess</snippet></ROW><ROW><id>11169353</id><snippet>import subprocess

execstr1 = 'ffmpeg -x -y -z ...'
execstr2 = 'ffmpeg -a -b -c ...'

out1 = subprocess.check_output(execstr1, shell=True)

out2 = subprocess.check_output(execstr2, shell=True)
</snippet></ROW><ROW><id>11170163</id><snippet>collections</snippet></ROW><ROW><id>11170163</id><snippet>from collections import namedtuple

Transaction = namedtuple("Transaction", ["account", "amount"])
</snippet></ROW><ROW><id>11170163</id><snippet>class Transaction(object):</snippet></ROW><ROW><id>11170163</id><snippet>namedtuple</snippet></ROW><ROW><id>11170163</id><snippet>&gt;&gt;&gt; t = Transaction(account="my private account", amount=+1000)
&gt;&gt;&gt; t
Transaction(account='my private account', amount=1000)
&gt;&gt;&gt; t.amount
1000
&gt;&gt;&gt; t.amount += 1
Traceback (most recent call last):
  File "&lt;ipython-input-6-ae60188f2446&gt;", line 1, in &lt;module&gt;
    t.amount += 1
AttributeError: can't set attribute
</snippet></ROW><ROW><id>11170252</id><snippet>DROP DATABASE IF EXISTS `mydb`;
CREATE DATABASE `mydb`
    DEFAULT CHARACTER SET utf8
    DEFAULT COLLATE utf8_general_ci;

USE 'mysql';
GRANT ALL PRIVILEGES ON mydb.* TO 'mydb_user'@'localhost' IDENTIFIED BY 'your_password'

WITH GRANT OPTION;
FLUSH PRIVILEGES;
</snippet></ROW><ROW><id>11170252</id><snippet>$mysql -u root -p &lt; script.sql
</snippet></ROW><ROW><id>11170252</id><snippet>DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.mysql',
        'NAME': 'mydb',                  
        'USER': 'mydb_user',             
        'PASSWORD': 'your_password',                  
        'HOST': '',                     
        'PORT': '',                      
    }
}
</snippet></ROW><ROW><id>11170252</id><snippet>python manage.py syncdb
</snippet></ROW><ROW><id>11170332</id><snippet>sqlreset</snippet></ROW><ROW><id>11170332</id><snippet>manage.py help</snippet></ROW><ROW><id>11170450</id><snippet>from operator import itemgetter

class Find_Overlaps(webapp2.RequestHandler):
    def get(self):
        all_dates = []
        first_dates = db.GqlQuery("SELECT * FROM First_Set")
        for date in first_dates:
            row = {'dataset':'First_Set', 'dbkey':date.key(), 'offset':date.start_time, 'type': -1}
            all_dates.append(row)
            row = {'dataset':'First_Set', 'dbkey':date.key(), 'offset':date.end_time, 'type': 1}
            all_dates.append(row)

        second_dates = db.GqlQuery("SELECT * FROM Second_Set")
        for date in second_dates:
            row = {'dataset':'Second_Set', 'dbkey':date.key(), 'offset':date.start_time, 'type': -1}
            all_dates.append(row)
            row = {'dataset':'Second_Set', 'dbkey':date.key(), 'offset':date.end_time, 'type': 1}
            all_dates.append(row)

        newlist = sorted(all_dates, key=itemgetter('offset','type'))
        number_datasets = 2 #goal is to find overlaps in all sets not only the best overlaps, that's why this is needed
        loopcnt = 0
        update_bestend = 0
        overlaps = []
        for row in newlist: #Below is mostly from Marzullo's alghorithm
            loopcnt = loopcnt - row['type']#this is to keep track of overall tally
            if update_bestend == 1:
                if loopcnt == (number_datasets - 1):
                    bestend = row['offset']
                    end_set = row['dataset']
                    end_key = row['dbkey']
                    overlaps.append({'start':beststart,'start_set':start_set,'start_key':start_key,'end':bestend,'end_set':end_set,'end_key':end_key})
                    update_bestend = 0
            if loopcnt == number_datasets:
                beststart = row['offset']
                start_set = row['dataset']
                start_key = row['dbkey']
                update_bestend = 1

        for overlap in overlaps: #just to see what the outcome is
            self.response.out.write('start: %s, start_set: %s, end: %s, end_set: %s&lt;br&gt;' % (overlap['start'], overlap['start_set'], overlap['end'], overlap['end_set']))
</snippet></ROW><ROW><id>11170635</id><snippet>__new__()</snippet></ROW><ROW><id>11170635</id><snippet>inspect</snippet></ROW><ROW><id>11170831</id><snippet>print &gt;&gt;fp, some_long_string
</snippet></ROW><ROW><id>11170869</id><snippet>Pasaporte</snippet></ROW><ROW><id>11170869</id><snippet>Usario</snippet></ROW><ROW><id>11170956</id><snippet>&gt;&gt;&gt; s.apply(enumerate)
a    &lt;enumerate object at 0x13cf910&gt;
b    &lt;enumerate object at 0x13cf870&gt;
c    &lt;enumerate object at 0x13cf820&gt;
d    &lt;enumerate object at 0x13cf7d0&gt;
e    &lt;enumerate object at 0x13ecdc0&gt;
</snippet></ROW><ROW><id>11170956</id><snippet>&gt;&gt;&gt; list(enumerate(s))
[(0, 'six'), (1, 'seven'), (2, 'six'), (3, 'seven'), (4, 'six')]
</snippet></ROW><ROW><id>11170956</id><snippet>&gt;&gt;&gt; ",".join(s)
'six,seven,six,seven,six'
</snippet></ROW><ROW><id>11170956</id><snippet>&gt;&gt;&gt; from functools import partial
&gt;&gt;&gt; s.apply(partial(map, lambda x: x*2 ))
a                ['ss', 'ii', 'xx']
b    ['ss', 'ee', 'vv', 'ee', 'nn']
c                ['ss', 'ii', 'xx']
d    ['ss', 'ee', 'vv', 'ee', 'nn']
e                ['ss', 'ii', 'xx']
</snippet></ROW><ROW><id>11170956</id><snippet>&gt;&gt;&gt; Series([s[x]+" my index is:  "+x for x in s.keys()], index=s.keys())
a      six index  a
b    seven index  b
c      six index  c
d    seven index  d
e      six index  e
</snippet></ROW><ROW><id>11171076</id><snippet>import re
m = re.search("Your number is &lt;b&gt;(\d+)&lt;/b&gt;",
      "xxx Your number is &lt;b&gt;123&lt;/b&gt;  fdjsk")
if m:
    print m.groups()[0]
</snippet></ROW><ROW><id>11171115</id><snippet>Could not find platform independent libraries &lt;prefix&gt;
Could not find platform dependent libraries &lt;exec_prefix&gt;
Consider setting $PYTHONHOME to &lt;prefix&gt;[:&lt;exec_prefix&gt;]
</snippet></ROW><ROW><id>11171115</id><snippet># installing zipimport hook
import zipimport # builtin
# installed zipimport hook
# /usr/lib64/python2.4/site.pyc matches /usr/lib64/python2.4/site.py
import site # precompiled from /usr/lib64/python2.4/site.pyc
# /usr/lib64/python2.4/os.pyc matches /usr/lib64/python2.4/os.py
import os # precompiled from /usr/lib64/python2.4/os.pyc
</snippet></ROW><ROW><id>11171115</id><snippet>rpm --force -hUv url_for_python_rpm
</snippet></ROW><ROW><id>11171128</id><snippet>ufw</snippet></ROW><ROW><id>11171128</id><snippet>ufw</snippet></ROW><ROW><id>11171128</id><snippet>which ufw</snippet></ROW><ROW><id>11171128</id><snippet>ufw</snippet></ROW><ROW><id>11171128</id><snippet>simon@mymachine:~$ python
Python 2.6.5 (r265:79063, Apr 16 2010, 13:57:41) 
[GCC 4.4.3] on linux2
Type "help", "copyright", "credits" or "license" for more information.
&gt;&gt;&gt; import ufw
&gt;&gt;&gt; ufw.__file__
'/usr/lib/python2.6/dist-packages/ufw/__init__.pyc'
&gt;&gt;&gt; 
</snippet></ROW><ROW><id>11171159</id><snippet>feedparser</snippet></ROW><ROW><id>11171159</id><snippet>feedparser.py</snippet></ROW><ROW><id>11171159</id><snippet>feedparser.__file__</snippet></ROW><ROW><id>11171390</id><snippet>python my_program.py</snippet></ROW><ROW><id>11171390</id><snippet>which python</snippet></ROW><ROW><id>11171390</id><snippet>virtualenv -p /usr/bin/python3.2</snippet></ROW><ROW><id>11171584</id><snippet>import sys
print sys.path
</snippet></ROW><ROW><id>11171584</id><snippet>PYTHONPATH</snippet></ROW><ROW><id>11171584</id><snippet>PATH</snippet></ROW><ROW><id>11171872</id><snippet>open()</snippet></ROW><ROW><id>11171872</id><snippet>StringIO</snippet></ROW><ROW><id>11171872</id><snippet>from PIL import Image
from StringIO import StringIO

im = Image.open(StringIO(self.request.files["ImageUpload"][0]["body"]))
im.save("out.jpg", "JPEG")
</snippet></ROW><ROW><id>11171915</id><snippet>for line in infile:
    print '{:{}{}}'.format(line.strip(), align, width)
</snippet></ROW><ROW><id>11171915</id><snippet>width</snippet></ROW><ROW><id>11171915</id><snippet>align</snippet></ROW><ROW><id>11171915</id><snippet>with open("in.txt", 'r') as infile, open("out.txt", 'w') as outfile: 
   for line in infile:
        outfile.write('{:{}{}}\n'.format(line.strip(), align, width))
</snippet></ROW><ROW><id>11171915</id><snippet>with open(...) as var: do stuff</snippet></ROW><ROW><id>11171915</id><snippet>  var = open(...)
  do stuff
  close(var)
</snippet></ROW><ROW><id>11172000</id><snippet>resp = self.client.post(self.client.post(...))
</snippet></ROW><ROW><id>11172032</id><snippet>subplot</snippet></ROW><ROW><id>11172032</id><snippet>matplotlib.pyplot</snippet></ROW><ROW><id>11172032</id><snippet>def plot_figures(figures, nrows = 1, ncols=1):
    """Plot a dictionary of figures.

    Parameters
    ----------
    figures : &lt;title, figure&gt; dictionary
    ncols : number of columns of subplots wanted in the display
    nrows : number of rows of subplots wanted in the figure
    """

    fig, axeslist = plt.subplots(ncols=ncols, nrows=nrows)
    for ind,title in zip(range(len(figures)), figures):
        axeslist.ravel()[ind].imshow(figures[title], cmap=plt.gray())
        axeslist.ravel()[ind].set_title(title)
        axeslist.ravel()[ind].set_axis_off()
    plt.tight_layout() # optional
</snippet></ROW><ROW><id>11172032</id><snippet>nrows</snippet></ROW><ROW><id>11172032</id><snippet>ncols</snippet></ROW><ROW><id>11172032</id><snippet>plot_figures(figures)</snippet></ROW><ROW><id>11172032</id><snippet>nrows</snippet></ROW><ROW><id>11172032</id><snippet>ncols</snippet></ROW><ROW><id>11172032</id><snippet>1</snippet></ROW><ROW><id>11172032</id><snippet>import matplotlib.pyplot as plt
import numpy as np

# generation of a dictionary of (title, images)
number_of_im = 6
figures = {'im'+str(i): np.random.randn(100, 100) for i in range(number_of_im)}

# plot of the images in a figure, with 2 rows and 3 columns
plot_figures(figures, 2, 3)
</snippet></ROW><ROW><id>11172072</id><snippet># When plotting initially, save the handle
plot_handle, = self.map.plot(x,y,'ro') 
...

# When changing the data, change the xdata and ydata and redraw
plot_handle.set_ydata(new_y)
plot_handle.set_xdata(new_x)
self.figure.canvas.draw()
</snippet></ROW><ROW><id>11172100</id><snippet>gui_test.py</snippet></ROW><ROW><id>11172100</id><snippet>gui_test.pyw</snippet></ROW><ROW><id>11172100</id><snippet>chmod a+x gui_test.py
</snippet></ROW><ROW><id>11172100</id><snippet>#!/usr/bin/env python
</snippet></ROW><ROW><id>11172100</id><snippet>./gui_test.py
</snippet></ROW><ROW><id>11172292</id><snippet>y = x[:]</snippet></ROW><ROW><id>11172292</id><snippet>y = x</snippet></ROW><ROW><id>11172292</id><snippet>y = x</snippet></ROW><ROW><id>11172292</id><snippet>y</snippet></ROW><ROW><id>11172292</id><snippet>x</snippet></ROW><ROW><id>11172292</id><snippet>&gt;&gt;&gt; x=[1,2,3,4]
&gt;&gt;&gt; y=x
&gt;&gt;&gt; y is x
True          # it means both y and x are just references to a same object [1,2,3,4], so changing either of y or x will affect [1,2,3,4]
&gt;&gt;&gt; y=x[:]     # this makes a copy of x and assigns that copy to y,
&gt;&gt;&gt; y is x     # y &amp; x now point to different object, so changing one will not affect the other.
False
</snippet></ROW><ROW><id>11172292</id><snippet>[:]</snippet></ROW><ROW><id>11172292</id><snippet>&gt;&gt;&gt; x= [[1,2],[4,5]]
&gt;&gt;&gt; y=x[:]   #it makes a shallow copy,i.e if the objects inside it are mutable then it just copies their reference to the y
&gt;&gt;&gt; y is x
False         # now though y and x are not same object but the object contained in them are same 
&gt;&gt;&gt; y[0].append(99)
&gt;&gt;&gt; x
[[1, 2, 99], [4, 5]]
&gt;&gt;&gt; y
[[1, 2, 99], [4, 5]]
&gt;&gt;&gt; y[0] is x[0]
True  #see both point to the same object
</snippet></ROW><ROW><id>11172292</id><snippet>copy</snippet></ROW><ROW><id>11172292</id><snippet>deepcopy()</snippet></ROW><ROW><id>11172364</id><snippet>x, y = (1, 2)</snippet></ROW><ROW><id>11172364</id><snippet>i = j = 1</snippet></ROW><ROW><id>11172364</id><snippet>x = y = []</snippet></ROW><ROW><id>11172364</id><snippet>x</snippet></ROW><ROW><id>11172364</id><snippet>y</snippet></ROW><ROW><id>11172392</id><snippet>    brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
    brush.setStyle(QtCore.Qt.SolidPattern)
    #self.graphicsView.setForegroundBrush(brush)
    self.graphicsView.setBackgroundBrush(brush)
</snippet></ROW><ROW><id>11172392</id><snippet>    text = self.scene.addText('hello')
    text.setDefaultTextColor(QtGui.QColor(QtCore.Qt.red))
</snippet></ROW><ROW><id>11172392</id><snippet>    # self.graphicsView.setForegroundBrush(brush)
</snippet></ROW><ROW><id>11172450</id><snippet>ident = myTimer.GetId()
self.timers[ ident ] = myTimer
</snippet></ROW><ROW><id>11172450</id><snippet>self.timers[ myTimer ] = myTimer
</snippet></ROW><ROW><id>11172450</id><snippet>self.timers.append( myTimer ) 
</snippet></ROW><ROW><id>11172450</id><snippet>w=Widget(..., id=int)
</snippet></ROW><ROW><id>11172515</id><snippet>def triangle():
  res = 0
  inc = 1
  while True:
    res += inc
    inc += 1
    yield res

t = triangle()
print next(t)
print next(t)
print next(t)
print next(t)
</snippet></ROW><ROW><id>11172515</id><snippet>def summer():
  res = 0
  inc = 0
  while True:
    res += inc
    inc = (yield res)

s = summer()
print s.send(None)
print s.send(3)
print s.send(5)
print s.send(2)
print s.send(4)
</snippet></ROW><ROW><id>11172596</id><snippet>i</snippet></ROW><ROW><id>11172686</id><snippet>import package</snippet></ROW><ROW><id>11172686</id><snippet>package.module</snippet></ROW><ROW><id>11172686</id><snippet>import package.module</snippet></ROW><ROW><id>11172686</id><snippet>package.module</snippet></ROW><ROW><id>11172686</id><snippet>from package import module</snippet></ROW><ROW><id>11172686</id><snippet>from scipy import io</snippet></ROW><ROW><id>11172686</id><snippet>scipy.io</snippet></ROW><ROW><id>11172686</id><snippet>write_array</snippet></ROW><ROW><id>11172686</id><snippet>savetxt</snippet></ROW><ROW><id>11172722</id><snippet>nonzero</snippet></ROW><ROW><id>11172722</id><snippet>(array([x1, x2, x3,...]), array([y1, y2, y3,...]), array([z1, z2, z3,...]),...)</snippet></ROW><ROW><id>11172722</id><snippet>&gt;&gt;&gt; a = numpy.array([[0, 0], [0, 1], [1, 0]], dtype=numpy.bool)
&gt;&gt;&gt; numpy.nonzero(a)
(array([1, 2]), array([1, 0]))
</snippet></ROW><ROW><id>11172722</id><snippet>&gt;&gt;&gt; a[numpy.nonzero(a)]
array([ True,  True], dtype=bool)
</snippet></ROW><ROW><id>11173044</id><snippet>for circle in circles[:]:
    circle.update()
</snippet></ROW><ROW><id>11173074</id><snippet>&gt;&gt;&gt; from scipy.sparse import csr_matrix
&gt;&gt;&gt; a = csr_matrix(np.arange(12).reshape((4,3)))
&gt;&gt;&gt; a.data.nbytes
88
</snippet></ROW><ROW><id>11173074</id><snippet>&gt;&gt;&gt; print a.data.nbytes + a.indptr.nbytes + a.indices.nbytes
152
</snippet></ROW><ROW><id>11173184</id><snippet>SequenceField</snippet></ROW><ROW><id>11173184</id><snippet>ObjectId</snippet></ROW><ROW><id>11173284</id><snippet>time</snippet></ROW><ROW><id>11173284</id><snippet>https-tcp-session.txt</snippet></ROW><ROW><id>11173284</id><snippet>bash</snippet></ROW><ROW><id>11173284</id><snippet>/usr/bin/time -f "%e" rm -f /tmp/A.raw /tmp/B.raw /tmp/result.raw; \
rwfilter --sport=443 --proto=6 --pass=stdout %s | \
rwsort --fields=sIP,dIP | \
# rest omitted
</snippet></ROW><ROW><id>11173284</id><snippet>time</snippet></ROW><ROW><id>11173284</id><snippet>rm</snippet></ROW><ROW><id>11173284</id><snippet>time</snippet></ROW><ROW><id>11173284</id><snippet>%s</snippet></ROW><ROW><id>11173284</id><snippet>https-tcp-session.txt</snippet></ROW><ROW><id>11173284</id><snippet>$1</snippet></ROW><ROW><id>11173284</id><snippet>bash</snippet></ROW><ROW><id>11173284</id><snippet>https-tcp-session.txt</snippet></ROW><ROW><id>11173284</id><snippet>$1</snippet></ROW><ROW><id>11173284</id><snippet>$ bash https-tcp-session.txt trace.rwf.gz
</snippet></ROW><ROW><id>11173350</id><snippet>dt.day != days</snippet></ROW><ROW><id>11173350</id><snippet>dt.day in days</snippet></ROW><ROW><id>11173350</id><snippet>TypeError</snippet></ROW><ROW><id>11173474</id><snippet>sort(ls[0:pivotIndex])
sort(ls[(pivotIndex + 1):len(ls)])
</snippet></ROW><ROW><id>11173474</id><snippet>partition</snippet></ROW><ROW><id>11173536</id><snippet>do {
        n = sendsegmented(s-&gt;sock_fd, buf, len, flags);
        len -= n;
} while (len &gt; 0);
</snippet></ROW><ROW><id>11173759</id><snippet>OUTPUT = StringIO.StringIO()         

def on_servername_insertatcursor(self, widget):
    servername = widget.get_text()
    OUTPUT.write("USHARE_NAME="+servername+'\n')

def on_netif_changed(self, widget):
    netif = widget.get_active_text()
    OUTPUT.write("USHARE_IFACE="+netif+'\n')

def on_port_insertatcursor(self, widget):
    port = widget.get_text()
    OUTPUT.write("USHARE_PORT="+port+'\n')

def on_telprt_insertatcursor(self, widget):
    telprt = widget.get_text()
    OUTPUT.write("USHARE_TELNET_PORT="+telprt+'\n')

def on_dirs_insertatcursor(self, widget):
    dirs = widget.get_text()
    OUTPUT.write("USHARE_DIR="+dirs+'\n')

def on_iconv_toggled(self, widget):
    iconv = widget.get_active()
    if iconv == True:
        OUTPUT.write("USHARE_OVERRIDE_ICONV_ERR="+"True"+'\n')
    else:
        OUTPUT.write("USHARE_OVERRIDE_ICONV_ERR="+"False"+'\n')
</snippet></ROW><ROW><id>11173759</id><snippet>def reset_output(self):
    OUTPUT.seek(0)
    OUTPUT.truncate()
</snippet></ROW><ROW><id>11173759</id><snippet>import StringIO

OUTPUT = StringIO.StringIO()         

def foo():
    OUTPUT.write('foo')

def bar():
    OUTPUT.write('bar')

def print_output():
    print OUTPUT.getvalue()

def reset_output():
    OUTPUT.seek(0)
    OUTPUT.truncate()

if __name__ == "__main__":
    foo()
    bar()
    print_output()
    reset_output()
    print_output()
</snippet></ROW><ROW><id>11173759</id><snippet>$ python test.py 
foobar

$
</snippet></ROW><ROW><id>11173782</id><snippet>if doubles == 3:
    pos = 10
    doubles = 0
pos += d1+d2
</snippet></ROW><ROW><id>11173826</id><snippet>partial</snippet></ROW><ROW><id>11173826</id><snippet>pow</snippet></ROW><ROW><id>11173826</id><snippet>_pow = pow
pow = lambda x, y: _pow(x, y)
</snippet></ROW><ROW><id>11173854</id><snippet>set</snippet></ROW><ROW><id>11173854</id><snippet>children = {5,10,15,20,25}

globalChildren = {1,2,3,4,5,6,7,8,9,10,12,14,16,18,20}

difference = children - globalChildren
shared = children &amp; globalChildren
</snippet></ROW><ROW><id>11173875</id><snippet>&lt;!-- A Trie based date field ...</snippet></ROW><ROW><id>11173875</id><snippet>-&gt;</snippet></ROW><ROW><id>11173875</id><snippet>--&gt;</snippet></ROW><ROW><id>11173875</id><snippet>&lt;filter class="solr.SynonymFilterFactory" ...</snippet></ROW><ROW><id>11173875</id><snippet>ignore Case="true"</snippet></ROW><ROW><id>11173875</id><snippet>ignoreCase="true"</snippet></ROW><ROW><id>11174051</id><snippet>python -v</snippet></ROW><ROW><id>11174103</id><snippet>json.load</snippet></ROW><ROW><id>11174103</id><snippet>read</snippet></ROW><ROW><id>11174103</id><snippet>json.load(reponse)</snippet></ROW><ROW><id>11174103</id><snippet>json.loads(response.read())</snippet></ROW><ROW><id>11174162</id><snippet>&lt;select id="users"&gt;
    &lt;option value="blah"&gt;Select a user&lt;/option&gt;
    &lt;option value="load"&gt;Load Users...&lt;/option&gt;
&lt;/select&gt;
</snippet></ROW><ROW><id>11174162</id><snippet>$('select#users').on('change',function(){
    if($(this).val() == 'load'){
        //show add user dialog
    }
    });
</snippet></ROW><ROW><id>11174162</id><snippet>$('#add-new-user-form').submit(function(){
    //get data from form and make a dataString to post to server
    var username = $('input[name="username"]').val();
    //similar for other fields
    var dataString = 'username='+ username + '&amp;email=' + email + '&amp;pass=' + pass;
    $.ajax({  
        type: "POST",  
        url: "url/to/your/backend/code",  
        data: dataString,  
        success: function(responseData) { 
            //check how to return JSON or any other data using your backend
            var newUser = responseData;
            var newSelect = $('&lt;select id="users"/&gt;');
            newSelect.append('&lt;option value="' + newUser.value + '" &gt;' + newUser.name + '&lt;/option&gt;');
            $('#users').replaceWith(newSelect);
            $("#users option[value='" + newUser.value + "']").attr('selected', 'selected');
            }  
    });  
    return false;//prevent default form submission
    }
</snippet></ROW><ROW><id>11174330</id><snippet>X = Y = list()
</snippet></ROW><ROW><id>11174539</id><snippet>decode</snippet></ROW><ROW><id>11174539</id><snippet>encode</snippet></ROW><ROW><id>11174539</id><snippet>&gt;&gt;&gt; s = '\xd0\xbc\xd0\xb0\xd1\x80\xd0\xba\xd0\xb0'
&gt;&gt;&gt; us = s.decode('utf-8')
&gt;&gt;&gt; print us
марка
</snippet></ROW><ROW><id>11174539</id><snippet>print</snippet></ROW><ROW><id>11174539</id><snippet>&gt;&gt;&gt; s = u'\xd0\xbc\xd0\xb0\xd1\x80\xd0\xba\xd0\xb0'
</snippet></ROW><ROW><id>11174539</id><snippet>decode</snippet></ROW><ROW><id>11174539</id><snippet>&gt;&gt;&gt; us = ''.join(chr(ord(c)) for c in s).decode('utf-8')
&gt;&gt;&gt; print us
марка
</snippet></ROW><ROW><id>11174634</id><snippet>&gt;&gt;&gt; help(json)
Extending JSONEncoder::

    &gt;&gt;&gt; import json
    &gt;&gt;&gt; class ComplexEncoder(json.JSONEncoder):
    ...     def default(self, obj):
    ...         if isinstance(obj, complex):
    ...             return [obj.real, obj.imag]
    ...         return json.JSONEncoder.default(self, obj)
    ...
    &gt;&gt;&gt; dumps(2 + 1j, cls=ComplexEncoder)
    '[2.0, 1.0]'
    &gt;&gt;&gt; ComplexEncoder().encode(2 + 1j)
    '[2.0, 1.0]'
    &gt;&gt;&gt; list(ComplexEncoder().iterencode(2 + 1j))
    ['[', '2.0', ', ', '1.0', ']']
</snippet></ROW><ROW><id>11174644</id><snippet>__init__</snippet></ROW><ROW><id>11174644</id><snippet>__new__</snippet></ROW><ROW><id>11174644</id><snippet>__new__</snippet></ROW><ROW><id>11174644</id><snippet>__init__</snippet></ROW><ROW><id>11174644</id><snippet>__new__</snippet></ROW><ROW><id>11174644</id><snippet>__init__</snippet></ROW><ROW><id>11174644</id><snippet>__init__(self[, ...])</snippet></ROW><ROW><id>11174644</id><snippet>__new__()</snippet></ROW><ROW><id>11174644</id><snippet>GNULibError(3, 'missing.lib')</snippet></ROW><ROW><id>11174644</id><snippet>__init__</snippet></ROW><ROW><id>11174644</id><snippet>__new__</snippet></ROW><ROW><id>11174644</id><snippet>__new__</snippet></ROW><ROW><id>11174644</id><snippet>__init__</snippet></ROW><ROW><id>11174708</id><snippet>OrderedDict.__init__</snippet></ROW><ROW><id>11174708</id><snippet>__init__</snippet></ROW><ROW><id>11174708</id><snippet>class OrdDictSub(collections.OrderedDict):
    def __init__(self):
        super(OrdDictSub, self).__init__()
</snippet></ROW><ROW><id>11174708</id><snippet>OrderedDict</snippet></ROW><ROW><id>11174708</id><snippet>dict</snippet></ROW><ROW><id>11174708</id><snippet>dict</snippet></ROW><ROW><id>11174708</id><snippet>dict</snippet></ROW><ROW><id>11174757</id><snippet>product</snippet></ROW><ROW><id>11174757</id><snippet>x1 = xrange(min1,max1,step1)
x2 = xrange(min2,max2,step2)
x3 = xrange(min3,max3,step3)
...

for v1, v2, v3, v4, v5, v6 in itertools.product(x1, x2, x3, x4, x5, x6):
    icky_thing(....)
</snippet></ROW><ROW><id>11174757</id><snippet>ranges = [
    xrange(min1,max1,step1),
    xrange(min2,max2,step2),
    xrange(min3,max3,step3),
    ...
]

for v1, v2, v3, v4, v5, v6 in itertools.product(*ranges):
    icky_thing(....)
</snippet></ROW><ROW><id>11174791</id><snippet>homeDir = os.path.expanduser("~")
</snippet></ROW><ROW><id>11174804</id><snippet>&gt;&gt;&gt; u'\xd0\xbc\xd0\xb0\xd1\x80\xd0\xba\xd0\xb0'.encode('latin-1')
'\xd0\xbc\xd0\xb0\xd1\x80\xd0\xba\xd0\xb0'
</snippet></ROW><ROW><id>11175081</id><snippet>def count(l):
    total = 0
    result = []
    for val in l:
        total += val
        result.append(total)
    return result
</snippet></ROW><ROW><id>11175081</id><snippet>while</snippet></ROW><ROW><id>11175119</id><snippet>Authorization=Authorization()
</snippet></ROW><ROW><id>11175119</id><snippet>ReadOnlyAuthorization()
</snippet></ROW><ROW><id>11175403</id><snippet>import warnings
warnings.simplefilter("ignore", UserWarning)

import the_module_that_warns
</snippet></ROW><ROW><id>11175403</id><snippet>warnings</snippet></ROW><ROW><id>11175632</id><snippet>from rpy2.robjects.packages import importr

MASS = importr('MASS')

# the function is now at MASS.fitdistr
</snippet></ROW><ROW><id>11175700</id><snippet>&gt;&gt;&gt; lst = [0,0,1,0,1,1,0]
&gt;&gt;&gt; l, s = len(lst), sum(lst)
&gt;&gt;&gt; result = [0] * (l - s) + [1] * s
&gt;&gt;&gt; result
[0, 0, 0, 0, 1, 1, 1]
</snippet></ROW><ROW><id>11175733</id><snippet>#circle.circle_computation()
if circle_create == True:
    #circle_list[i].draw_circle()
    for j in xrange(i):
        circle_list[j].draw_circle()
</snippet></ROW><ROW><id>11176117</id><snippet>personalposts = db.GqlQuery("select * from PersonalPost where user_id =:1 order by created desc limit 30",user_id)
</snippet></ROW><ROW><id>11176117</id><snippet>GqlQuery</snippet></ROW><ROW><id>11176117</id><snippet>q = GqlQuery("SELECT * FROM Song WHERE composer = 'Lennon, John'")

q = GqlQuery("SELECT __key__ FROM Song WHERE composer = :1", "Lennon, John")

q = GqlQuery("SELECT * FROM Song WHERE composer = :composer", composer="Lennon, John")
</snippet></ROW><ROW><id>11176267</id><snippet>sphinx</snippet></ROW><ROW><id>11176267</id><snippet>sphinx</snippet></ROW><ROW><id>11176267</id><snippet>numpydoc</snippet></ROW><ROW><id>11176267</id><snippet>def foo(path, field_storage, temporary):
    """This is function foo

    Parameters
    ----------
    path : str
        The path of the file to wrap
    field_storage : :class:`FileStorage`
        The :class:`FileStorage` instance to wrap
    temporary : bool
        Whether or not to delete the file when the File instance
        is destructed

    Returns
    -------
    describe : type
        Explanation
    ...

    Examples
    --------
    These are written in doctest format, and should illustrate how to
    use the function.

    &gt;&gt;&gt; a=[1,2,3]
    &gt;&gt;&gt; print [x + 3 for x in a]
    [4, 5, 6]
    ...
    """

    pass
</snippet></ROW><ROW><id>11176267</id><snippet>numpydoc</snippet></ROW><ROW><id>11176267</id><snippet>autodoc</snippet></ROW><ROW><id>11176337</id><snippet>from zope.interface import (
    Attribute,
    Interface,
    )

class IMyOwnEvent(Interface):
    foo = Attribute('The foo value')
    bar = Attribute('The bar value')
</snippet></ROW><ROW><id>11176337</id><snippet>from zope.interface import implementer

@implementer(IMyOwnEvent)
class MyOwnEvent(object):
    def __init__(self, foo, bar):
        self.foo = foo
        self.bar = bar
</snippet></ROW><ROW><id>11176337</id><snippet>@implementer</snippet></ROW><ROW><id>11176337</id><snippet>registry.notify</snippet></ROW><ROW><id>11176337</id><snippet>request.registry.notify(MyOwnEvent(foo, bar))
</snippet></ROW><ROW><id>11176337</id><snippet>config.add_subscriper</snippet></ROW><ROW><id>11176337</id><snippet>pyramid.events.subscriber</snippet></ROW><ROW><id>11176337</id><snippet>from pyramid.events import subscriber
from mymodule.events import MyOwnEvent

@subscriber(MyOwnEvent)
def owneventsubscriber(event):
    event.foo.spam = 'eggs'
</snippet></ROW><ROW><id>11176337</id><snippet>IMyOwnEvent</snippet></ROW><ROW><id>11176337</id><snippet>MyOwnEvent</snippet></ROW><ROW><id>11176337</id><snippet>send_robust</snippet></ROW><ROW><id>11176772</id><snippet>file.seek()</snippet></ROW><ROW><id>11176772</id><snippet>file.write()</snippet></ROW><ROW><id>11176772</id><snippet>file.seek(0, 2)</snippet></ROW><ROW><id>11176772</id><snippet>u</snippet></ROW><ROW><id>11176772</id><snippet>from io import open
fil = open('text.txt', 'a+')
fil.write('abc') # This fails
fil.write(u'abc') # This works
</snippet></ROW><ROW><id>11176959</id><snippet>get_absolute_url</snippet></ROW><ROW><id>11176959</id><snippet>findme</snippet></ROW><ROW><id>11176959</id><snippet>findme</snippet></ROW><ROW><id>11176959</id><snippet>name="findme"</snippet></ROW><ROW><id>11176959</id><snippet>(r'^articles/(?P&lt;year&gt;\d{4})/$', 'news.views.year_archive', name="news_year_archive"),
</snippet></ROW><ROW><id>11176959</id><snippet>main_view</snippet></ROW><ROW><id>11176959</id><snippet>side_view</snippet></ROW><ROW><id>11176959</id><snippet>address</snippet></ROW><ROW><id>11176959</id><snippet>city</snippet></ROW><ROW><id>11176959</id><snippet>state</snippet></ROW><ROW><id>11177081</id><snippet>print '%x' % 0b11111111   # -&gt; 'ff'  (from binary)
print '%x' % 0377         # -&gt; 'ff'  (from octal)
print '%x' % 255          # -&gt; 'ff'  (from decimal)
print '%x' % 0xff         # -&gt; 'ff'  (from hex)
</snippet></ROW><ROW><id>11177099</id><snippet>cx</snippet></ROW><ROW><id>11177278</id><snippet>*args</snippet></ROW><ROW><id>11177278</id><snippet>**kwargs</snippet></ROW><ROW><id>11177278</id><snippet>FountainPen(5,1)</snippet></ROW><ROW><id>11177278</id><snippet>FountainPen.__init__</snippet></ROW><ROW><id>11177278</id><snippet>self</snippet></ROW><ROW><id>11177278</id><snippet>manufacturer</snippet></ROW><ROW><id>11177278</id><snippet>*args</snippet></ROW><ROW><id>11177278</id><snippet>1</snippet></ROW><ROW><id>11177278</id><snippet>args</snippet></ROW><ROW><id>11177278</id><snippet>[1]</snippet></ROW><ROW><id>11177278</id><snippet>*kwargs</snippet></ROW><ROW><id>11177278</id><snippet>{}</snippet></ROW><ROW><id>11177278</id><snippet>Pen.__init__</snippet></ROW><ROW><id>11177278</id><snippet>1</snippet></ROW><ROW><id>11177278</id><snippet>self</snippet></ROW><ROW><id>11177278</id><snippet>length</snippet></ROW><ROW><id>11177278</id><snippet>None</snippet></ROW><ROW><id>11177535</id><snippet>repr(...)</snippet></ROW><ROW><id>11177535</id><snippet>'ab*c'</snippet></ROW><ROW><id>11177535</id><snippet>"""digraph {
 0 [label="a"]
 1 [label="...*"]
 2 [label="b"]
 3 [label="c"]
 4 [label="Match"]
 0 -&gt; 1
 1 -&gt; 2
 1 -&gt; 3
 3 -&gt; 4
 2 -&gt; 1
}"""
</snippet></ROW><ROW><id>11177535</id><snippet>0</snippet></ROW><ROW><id>11177535</id><snippet>1</snippet></ROW><ROW><id>11177535</id><snippet>2</snippet></ROW><ROW><id>11177535</id><snippet>3</snippet></ROW><ROW><id>11177535</id><snippet>2</snippet></ROW><ROW><id>11177535</id><snippet>1</snippet></ROW><ROW><id>11177826</id><snippet>from django.conf import settings
from django.utils import translation

class AdminLocaleMiddleware:

    def process_request(self, request):
        if request.path.startswith('/admin'):
            request.LANG = getattr(settings, 'ADMIN_LANGUAGE_CODE',
                                   settings.LANGUAGE_CODE)
            translation.activate(request.LANG)
            request.LANGUAGE_CODE = request.LANG
</snippet></ROW><ROW><id>11177826</id><snippet>MIDDLEWARE_CLASSES</snippet></ROW><ROW><id>11177826</id><snippet>MIDDLEWARE_CLASSES = {
    # ...
    'foo.bar.AdminLocaleMiddleware',
    # ...
}
</snippet></ROW><ROW><id>11177826</id><snippet>settings.py</snippet></ROW><ROW><id>11177826</id><snippet>ADMIN_LANGUAGE_CODE = 'ru-RU'
</snippet></ROW><ROW><id>11177929</id><snippet>import os
PROJECT_ROOT = os.path.dirname(os.path.realpath(__file__))
DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite',
        'NAME': os.path.join(PROJECT_ROOT, 'dev.db'),
        'USER': '',
        'PASSWORD': '',
        'HOST': '',
        'PORT': '',
    }
}
</snippet></ROW><ROW><id>11177977</id><snippet>pip install -r requirements.txt &amp;&amp; ./celeryd -lINFO</snippet></ROW><ROW><id>11178246</id><snippet>1x2x3</snippet></ROW><ROW><id>11178246</id><snippet>2x3</snippet></ROW><ROW><id>11178246</id><snippet>2x3</snippet></ROW><ROW><id>11178246</id><snippet>1</snippet></ROW><ROW><id>11178246</id><snippet>1</snippet></ROW><ROW><id>11178246</id><snippet>2x2</snippet></ROW><ROW><id>11178246</id><snippet>4x2</snippet></ROW><ROW><id>11178246</id><snippet>4 != 2</snippet></ROW><ROW><id>11178246</id><snippet>4</snippet></ROW><ROW><id>11178246</id><snippet>2</snippet></ROW><ROW><id>11178246</id><snippet>1</snippet></ROW><ROW><id>11178318</id><snippet>.sub(replacement, string[, count=0])</snippet></ROW><ROW><id>11178318</id><snippet>&gt;&gt;&gt; p = re.compile( '(blue|white|red)')
&gt;&gt;&gt; p.sub( 'colour', 'blue socks and red shoes')
'colour socks and colour shoes'
&gt;&gt;&gt; p.sub( 'colour', 'blue socks and red shoes', count=1)
'colour socks and red shoes'
</snippet></ROW><ROW><id>11178348</id><snippet>from numpy import matrix
from numpy.linalg import solve

def circfit(xs, ys):
    a = matrix([[x,y,1.] for x,y in zip(xs, ys)])
    b = matrix([[-(x*x + y*y)] for x,y in zip(xs, ys)])
    res = solve(a,b)
    xc = -0.5 * res.item(0)
    yc = -0.5 * res.item(1)
    r = (xc*xc + yc*yc - res.item(2))**0.5
    return xc,yc,r
</snippet></ROW><ROW><id>11178348</id><snippet>circfit([0,1,2],[2,1,2])   # -&gt;  (1.0, 2.0, 1.0) as expected
</snippet></ROW><ROW><id>11178486</id><snippet>{{ variable }}</snippet></ROW><ROW><id>11178486</id><snippet>&lt;html&gt;
&lt;head&gt;
&lt;script&gt;
var someJavaScriptVar = '{{ geocode[1] }}';
&lt;/script&gt;
&lt;body&gt;
&lt;p&gt;Hello World&lt;/p&gt;
&lt;button onclick="alert('Geocode: {{ geocode[0] }} ' + someJavaScriptVar)" /&gt;
&lt;/body&gt;
&lt;/html&gt;
</snippet></ROW><ROW><id>11178486</id><snippet>&lt;html&gt;
&lt;head&gt;
&lt;script&gt;
var myGeocode = ['{{ geocode[0] }}', '{{ geocode[1] }}'];
&lt;/script&gt;
&lt;body&gt;
&lt;p&gt;Hello World&lt;/p&gt;
&lt;button onclick="alert('Geocode: ' + myGeocode[0] + ' ' + myGeocode[1])" /&gt;
&lt;/body&gt;
&lt;/html&gt;
</snippet></ROW><ROW><id>11178486</id><snippet>&lt;html&gt;
&lt;head&gt;
&lt;script&gt;
var myGeocode = [{{ ', '.join(geocode) }}];
&lt;/script&gt;
&lt;body&gt;
&lt;p&gt;Hello World&lt;/p&gt;
&lt;button onclick="alert('Geocode: ' + myGeocode[0] + ' ' + myGeocode[1])" /&gt;
&lt;/body&gt;
&lt;/html&gt;
</snippet></ROW><ROW><id>11178486</id><snippet>for</snippet></ROW><ROW><id>11178486</id><snippet>if</snippet></ROW><ROW><id>11178644</id><snippet>del list_temp[0:len(list_temp)]</snippet></ROW><ROW><id>11178644</id><snippet>list_temp = list()</snippet></ROW><ROW><id>11178644</id><snippet>list_temp = []</snippet></ROW><ROW><id>11178644</id><snippet>list_temp = list()</snippet></ROW><ROW><id>11178796</id><snippet>self.buttonGroup.buttonClicked[int].connect(self.bitArray.toggleBit)
</snippet></ROW><ROW><id>11179026</id><snippet>class SimpleHelloWorld(IRCReplyModule):

     def __init__(self):
            #super(IRCReplyModule,self).__init__('hello world')
            super(SimpleHelloWorld,self).__init__('hello world')
</snippet></ROW><ROW><id>11179026</id><snippet>__init__</snippet></ROW><ROW><id>11179026</id><snippet>super().__init__()</snippet></ROW><ROW><id>11179103</id><snippet>permutations</snippet></ROW><ROW><id>11179103</id><snippet>def nexthigher(n):
    for p in permutations(sorted(str(n))):
        i = int("".join(p))
        if i &gt; n:
            return i
</snippet></ROW><ROW><id>11179190</id><snippet>TextProperty</snippet></ROW><ROW><id>11179190</id><snippet>yourproperty = db.StringProperty()
</snippet></ROW><ROW><id>11179190</id><snippet>yourproperty = db.TextProperty()
</snippet></ROW><ROW><id>11179190</id><snippet>TextProperty</snippet></ROW><ROW><id>11179212</id><snippet>yield int(d)</snippet></ROW><ROW><id>11179212</id><snippet>yield int(m)</snippet></ROW><ROW><id>11179212</id><snippet>def getDigits(m):
    for d in str(m):
        yield int(d)
</snippet></ROW><ROW><id>11179282</id><snippet>Queue</snippet></ROW><ROW><id>11179282</id><snippet>Producer</snippet></ROW><ROW><id>11179282</id><snippet>def produce(self, e):
    self.oq.put(e*2)
    self.oq.task_done()
    print "Producer %s produced %d and put it to output Queue"%(self.getName(), e*2)
</snippet></ROW><ROW><id>11179282</id><snippet>self.oq.task_done()</snippet></ROW><ROW><id>11179282</id><snippet>oq.get()</snippet></ROW><ROW><id>11179282</id><snippet>iq.join()</snippet></ROW><ROW><id>11179282</id><snippet>oq.join()</snippet></ROW><ROW><id>11179282</id><snippet>Daemons</snippet></ROW><ROW><id>11179282</id><snippet>Queue.join()</snippet></ROW><ROW><id>11179282</id><snippet>Queue.task_done()</snippet></ROW><ROW><id>11179282</id><snippet>Consumer</snippet></ROW><ROW><id>11179282</id><snippet>Consumer</snippet></ROW><ROW><id>11179355</id><snippet>readline()</snippet></ROW><ROW><id>11179355</id><snippet>readline()</snippet></ROW><ROW><id>11179355</id><snippet>read(1)</snippet></ROW><ROW><id>11179365</id><snippet>def set_hash(entity, name, value):
  if value:
    setattr(entity, name, hashlib.sha512(value + salt).hexdigest())


set_hash(person, "last_name", last_name)
set_hash(person, "first_name", first_name)
</snippet></ROW><ROW><id>11179623</id><snippet>&lt;BackSpace&gt;</snippet></ROW><ROW><id>11179623</id><snippet>&lt;Delete&gt;</snippet></ROW><ROW><id>11179623</id><snippet>&lt;&lt;Cut&gt;&gt;</snippet></ROW><ROW><id>11179623</id><snippet>return "break"</snippet></ROW><ROW><id>11179681</id><snippet>&gt;&gt;&gt; the_list = ['Order', '1', '5', 'Order', '2', '18', 'Order', '3', '45', 'Order', '4', '2', 'Order', '5', '8', 'Order', '6', '2', 'Order', '7', '1', 'Order', '8', '1', 'Order', '9', '1']
&gt;&gt;&gt; the_list[::3]
['Order', 'Order', 'Order', 'Order', 'Order', 'Order', 'Order', 'Order', 'Order']
&gt;&gt;&gt; the_list[2::3]
['5', '18', '45', '2', '8', '2', '1', '1', '1']
&gt;&gt;&gt; max(int(num) for num in the_list[2::3])
45
</snippet></ROW><ROW><id>11179681</id><snippet>3</snippet></ROW><ROW><id>11179681</id><snippet>2</snippet></ROW><ROW><id>11179681</id><snippet>the_list[2::3]</snippet></ROW><ROW><id>11179681</id><snippet>the_list</snippet></ROW><ROW><id>11179681</id><snippet>int(num)</snippet></ROW><ROW><id>11179681</id><snippet>max</snippet></ROW><ROW><id>11179681</id><snippet>max</snippet></ROW><ROW><id>11179681</id><snippet>&gt;&gt;&gt; max((int(num), i) for i, num in enumerate(the_list[2::3]))
(45, 2)
</snippet></ROW><ROW><id>11179950</id><snippet>lis = []
class Object():
    def __init__(self, var):
        self.something = var 
        lis.append(self)  #here self is the reference to the instance being created and you can save it in a list to access it later
xxx = Object('123')
xx = Object('12')
x = Object('1')

for x in lis:
    print(x.something)
</snippet></ROW><ROW><id>11179950</id><snippet>123
12
1
</snippet></ROW><ROW><id>11179997</id><snippet>&lt;pre&gt;
%for key in tags_photo:
    %try:
        {{ key }} :  {{ exif[tags_photo[key]].raw_value }}
    %except KeyError:
        %continue
    %end
%end
&lt;/pre&gt;
</snippet></ROW><ROW><id>11179997</id><snippet>%end</snippet></ROW><ROW><id>11179997</id><snippet>try</snippet></ROW><ROW><id>11179997</id><snippet>except</snippet></ROW><ROW><id>11179997</id><snippet>for</snippet></ROW><ROW><id>11180274</id><snippet>$ python
&gt;&gt;&gt; from gi.repository import WebKit
&gt;&gt;&gt; help(WebKit.WebView)
</snippet></ROW><ROW><id>11180319</id><snippet>Lib\site-packages</snippet></ROW><ROW><id>11180319</id><snippet>def foo():
    print("foo called")
</snippet></ROW><ROW><id>11180319</id><snippet>C:\Python32\Lib\site-packages\foo.py</snippet></ROW><ROW><id>11180319</id><snippet>&gt;&gt;&gt; import foo
&gt;&gt;&gt; foo.foo()
foo called
</snippet></ROW><ROW><id>11180481</id><snippet>__new__</snippet></ROW><ROW><id>11180481</id><snippet>type</snippet></ROW><ROW><id>11180481</id><snippet>object</snippet></ROW><ROW><id>11180481</id><snippet>b = type('B', (A,), {'obj': A()})
</snippet></ROW><ROW><id>11180481</id><snippet>class B</snippet></ROW><ROW><id>11180692</id><snippet>J</snippet></ROW><ROW><id>11180692</id><snippet>f</snippet></ROW><ROW><id>11180692</id><snippet>f</snippet></ROW><ROW><id>11180692</id><snippet>J</snippet></ROW><ROW><id>11180692</id><snippet>f</snippet></ROW><ROW><id>11180692</id><snippet>J</snippet></ROW><ROW><id>11180692</id><snippet>fJ</snippet></ROW><ROW><id>11180709</id><snippet>import serial
import struct
from time import sleep

def C(val):
    return struct.pack('!H', val)

ser = serial.Serial(port='/dev/tty.PL2303-00002006', baudrate=9600)

sleep(2)

ser.write(C(0xaa00))

sleep(1)
ser.write(C(0xaa36))

sleep(1)
ser.write(C(0xaa11))

sleep(1)

while True:
    print ser.readline()
</snippet></ROW><ROW><id>11180709</id><snippet>gnd</snippet></ROW><ROW><id>11180709</id><snippet>gnd</snippet></ROW><ROW><id>11180709</id><snippet>rxd</snippet></ROW><ROW><id>11180709</id><snippet>txd</snippet></ROW><ROW><id>11180709</id><snippet>txd</snippet></ROW><ROW><id>11180709</id><snippet>rxd</snippet></ROW><ROW><id>11180709</id><snippet>txd</snippet></ROW><ROW><id>11180709</id><snippet>txd</snippet></ROW><ROW><id>11180709</id><snippet>rxd</snippet></ROW><ROW><id>11180709</id><snippet>rxd</snippet></ROW><ROW><id>11180858</id><snippet>&gt;&gt;&gt; q = list("aaabbbbcc")
&gt;&gt;&gt; q
['a', 'a', 'a', 'b', 'b', 'b', 'b', 'c', 'c']
&gt;&gt;&gt; r = set(q)
&gt;&gt;&gt; r
set(['a', 'c', 'b'])
&gt;&gt;&gt; [x for x in r if all([q.count(x) &gt;= q.count(y) for y in r])]
['b']
</snippet></ROW><ROW><id>11181024</id><snippet>def application(env, start_response):
    start_response('200 OK', [('Content-Type','text/html')])
    return "Hello World"
</snippet></ROW><ROW><id>11181159</id><snippet>&gt;&gt;&gt; def fibonacci(number):
...     if number &lt; 2:
...         return number
...     print "Number is currently %d, getting fibonacci(%d)" % (number, number - 1)
...     minus_one = fibonacci(number-1)
...     print "Number is currently %d, just got fibonacci(%d), now getting fibonacci(%d)" % (number, number - 1, number - 2)
...     minus_two = fibonacci(number-2)
...     print "Number is currently %d, returning %d + %d" % (number, minus_one, minus_two)
...     return minus_one + minus_two
</snippet></ROW><ROW><id>11181159</id><snippet>fibonacci</snippet></ROW><ROW><id>11181159</id><snippet>&gt;&gt;&gt; fibonacci(4)
Number is currently 4, getting fibonacci(3)
Number is currently 3, getting fibonacci(2)
Number is currently 2, getting fibonacci(1)
Number is currently 2, just got fibonacci(1), now getting fibonacci(0)
Number is currently 2, returning 1 + 0
Number is currently 3, just got fibonacci(2), now getting fibonacci(1)
Number is currently 3, returning 1 + 1
Number is currently 4, just got fibonacci(3), now getting fibonacci(2)
Number is currently 2, getting fibonacci(1)
Number is currently 2, just got fibonacci(1), now getting fibonacci(0)
Number is currently 2, returning 1 + 0
Number is currently 4, returning 2 + 1
3
</snippet></ROW><ROW><id>11181166</id><snippet>order.find('Identifier')</snippet></ROW><ROW><id>11181166</id><snippet>Identifier</snippet></ROW><ROW><id>11181166</id><snippet>findall</snippet></ROW><ROW><id>11181166</id><snippet>find</snippet></ROW><ROW><id>11181212</id><snippet>root.overrideredirect(1)</snippet></ROW><ROW><id>11181212</id><snippet>def main():
    root = Tk()
    root.overrideredirect(1)
    root.geometry('500x250+500+200')
    app = Application(root)
    app.parent.configure(background = 'gray32')
    root.resizable(width=FALSE, height=FALSE)
    app.mainloop()
</snippet></ROW><ROW><id>11181415</id><snippet>try:
    Uebersetzung.objects.get(artikel=unicode(each[0]),deutsch=unicode(each[1]),turk=unicode(each[2]))
</snippet></ROW><ROW><id>11181426</id><snippet>images = list of images to be stitched, loaded from directory
stitched_image = images[0]

for (image in images):
    if first image then skip it (continue)
    else combine_images(stitched_image, image)

def combine_images (stitched_image, image_to_add):
    top_left_corner = top left corner of image_to_add 
    // top_left_corner dimensions need to be big enough that you don't have a false positive, 
    // but not so big that the overlap doesn't exist
    coordinates = find_coordinates(stitched_image,top_left_corner)

    new_width = max(stitched_image.width,image_to_add.width + coordinates.x)
    new_height = max(stitched_image.height,image_to_add.width + coordinates.y)
    new_image = new Image(new_width,new_height) // See note 1
    new_image.paste(stitched_image,(0,0))
    new_image.paste(image_to_add,(coordinates.x,coordinates.y))

    stitched_image = new_image

def find_coordinates (image,sub_image):
    // See note 2 for how to implement
</snippet></ROW><ROW><id>11181467</id><snippet>get_current_user()</snippet></ROW><ROW><id>11181467</id><snippet>import webapp2
from google.appengine.api import users

class BaseHandler(webapp2.RequestHandler):
  def get_user(self):
    #Maybe also adding some logic here or returning your own User model
    return users.get_current_user()


class MainPage(BaseHandler):
  def get(self):
    if self.get_user():
      self.response.headers['Content-Type'] = 'text/plain'
      self.response.out.write('Hello, ' + self.get_user().nickname())
    else:
      self.redirect(users.create_login_url(self.request.uri))
</snippet></ROW><ROW><id>11181606</id><snippet>if d*100 - int(d*100):
    print str(d)
else:
    print ".2f" % d
</snippet></ROW><ROW><id>11181607</id><snippet>__main__</snippet></ROW><ROW><id>11181607</id><snippet>__builtins__</snippet></ROW><ROW><id>11181607</id><snippet>__builtin__</snippet></ROW><ROW><id>11181607</id><snippet>__builtins__</snippet></ROW><ROW><id>11181607</id><snippet>__builtin__</snippet></ROW><ROW><id>11181607</id><snippet>__builtins__</snippet></ROW><ROW><id>11181607</id><snippet>__builtins__</snippet></ROW><ROW><id>11181607</id><snippet>import</snippet></ROW><ROW><id>11181607</id><snippet>__builtin__</snippet></ROW><ROW><id>11181607</id><snippet>__builtin__</snippet></ROW><ROW><id>11181607</id><snippet>builtins</snippet></ROW><ROW><id>11181620</id><snippet>import ephem

# Convert a Galactic coordinate to RA and dec                          

galactic_center = ephem.Galactic(0, 0)
eq = ephem.Equatorial(galactic_center)
print 'RA:', eq.ra, 'dec:', eq.dec

→ RA: 17:45:37.20 dec: -28:56:10.2
</snippet></ROW><ROW><id>11181620</id><snippet># So where is that RA and dec above Boston?
# Pretend that a star or other fixed body is there.

body = ephem.FixedBody()
body._ra = eq.ra
body._dec = eq.dec
body._epoch = eq.epoch

obs = ephem.city('Boston')
obs.date = '2012/6/24 02:00' # 10pm EDT
body.compute(obs)
print 'Az:', body.az, 'Alt:', body.alt

→ Az: 149:07:25.6 Alt: 11:48:43.0
</snippet></ROW><ROW><id>11181734</id><snippet>dict</snippet></ROW><ROW><id>11181734</id><snippet>dict</snippet></ROW><ROW><id>11181734</id><snippet>isinstance(x, Dictable)</snippet></ROW><ROW><id>11181734</id><snippet>hasattr(x, "dict")</snippet></ROW><ROW><id>11181734</id><snippet>Mapping</snippet></ROW><ROW><id>11181734</id><snippet>__getitem__</snippet></ROW><ROW><id>11181734</id><snippet>__iter__</snippet></ROW><ROW><id>11181734</id><snippet>__len__</snippet></ROW><ROW><id>11181734</id><snippet>collections.Mapping</snippet></ROW><ROW><id>11181734</id><snippet>dict(Foo())</snippet></ROW><ROW><id>11181734</id><snippet>class Foo(Mapping):
    def __getitem__(self, key):
        if key not in ("bar1", "bar2"):
            raise KeyError("{} not found".format(repr(key))
        return getattr(self, key)

    def __iter__(self):
        yield "bar1"
        yield "bar2"

    def __len__(self):
        return 2
</snippet></ROW><ROW><id>11181788</id><snippet>cat
dog
....
</snippet></ROW><ROW><id>11181788</id><snippet>word_list = [word.rstrip() for word in open("words.txt","r")]
</snippet></ROW><ROW><id>11181795</id><snippet>('defname', {...})</snippet></ROW><ROW><id>11181795</id><snippet>'defname'</snippet></ROW><ROW><id>11181795</id><snippet>{...}</snippet></ROW><ROW><id>11181806</id><snippet>table_name</snippet></ROW><ROW><id>11181806</id><snippet>2*(DOT+identifier)</snippet></ROW><ROW><id>11181806</id><snippet>expr.setResultsName('something')</snippet></ROW><ROW><id>11181806</id><snippet>expr('something')</snippet></ROW><ROW><id>11181806</id><snippet>from pyparsing import *

identifier = Word(alphas, alphanums).setName('identifier')
DOT = Suppress('.')

# Option 1 - fully specified options
full_database_name = identifier('user') + DOT + identifier('database')
just_database_name = identifier('database')
table_name = (full_database_name + DOT + identifier('table') | 
              just_database_name + DOT + identifier('table'))

# Option 2 - use FollowedBy to explicitly lookahead when checking for leading user
table_name = (Optional(identifier('user') + FollowedBy(2*(DOT+identifier)) + DOT) + 
                identifier('database') + DOT + identifier('table'))

# Option 3 - use liberally matching expression, with a parse action to assign fields
def assignTableFields(fields):
    if len(fields) == 2:
        fields['database'],fields['table'] = fields
    elif len(fields) == 3:
        fields['user'],fields['database'],fields['table'] = fields
    else:
        raise ParseException("wrong number of fields")
table_name = delimitedList(identifier, delim='.').setParseAction(assignTableFields)

for test in ("a.b.c", "b.c"):
    print test
    print table_name.parseString(test).dump()
    print
</snippet></ROW><ROW><id>11181806</id><snippet>"a . b"</snippet></ROW><ROW><id>11181806</id><snippet>def noWhitespace(source, locn, tokens):
    if not source[locn:].startswith('.'.join(tokens)):
        raise ParseException("found whitespace between fields")
table_name.addParseAction(noWhitespace)
</snippet></ROW><ROW><id>11181806</id><snippet>addParseAction</snippet></ROW><ROW><id>11181806</id><snippet>setParseAction</snippet></ROW><ROW><id>11182026</id><snippet>MainPage</snippet></ROW><ROW><id>11182026</id><snippet>helloworld.py</snippet></ROW><ROW><id>11182026</id><snippet>helloworld.py</snippet></ROW><ROW><id>11182026</id><snippet>app = webapp2.WSGIApplication([('/', 'handlers.MainPage'),
                               ('/sign', 'handlers.Guestbook')],
                              debug=True)
</snippet></ROW><ROW><id>11182026</id><snippet>helloworld.py</snippet></ROW><ROW><id>11182026</id><snippet>app = webapp2.WSGIApplication([('/', 'handlers.main.MainPage'),
                               ('/sign', 'handlers.guestbook.Guestbook')],
                              debug=True)
</snippet></ROW><ROW><id>11182107</id><snippet>__unicode__()</snippet></ROW><ROW><id>11182107</id><snippet>Inscription</snippet></ROW><ROW><id>11182107</id><snippet>User</snippet></ROW><ROW><id>11182107</id><snippet>__unicode__()</snippet></ROW><ROW><id>11182107</id><snippet>User</snippet></ROW><ROW><id>11182107</id><snippet>Inscription</snippet></ROW><ROW><id>11182155</id><snippet>title = text.encode('utf8')
</snippet></ROW><ROW><id>11182298</id><snippet>Stub</snippet></ROW><ROW><id>11182298</id><snippet>staticmethod</snippet></ROW><ROW><id>11182298</id><snippet>functools.wraps</snippet></ROW><ROW><id>11182298</id><snippet>__name__</snippet></ROW><ROW><id>11182298</id><snippet>__doc__</snippet></ROW><ROW><id>11182298</id><snippet>__module__</snippet></ROW><ROW><id>11182298</id><snippet>__dict__</snippet></ROW><ROW><id>11182298</id><snippet>__dict__</snippet></ROW><ROW><id>11182298</id><snippet>staticmethod</snippet></ROW><ROW><id>11182298</id><snippet>__new__</snippet></ROW><ROW><id>11182298</id><snippet>__init__</snippet></ROW><ROW><id>11182298</id><snippet>__new__</snippet></ROW><ROW><id>11182298</id><snippet>def deco(wrapped_cls):
    @functools.wraps(wrapped_cls)
    class Wrapper(wrapped_cls):
        def __new__(cls, *args, **kwargs):
            ...
            return wrapped_cls(*args, **kwargs)
    return Wrapper
</snippet></ROW><ROW><id>11182298</id><snippet>wrapped_cls</snippet></ROW><ROW><id>11182298</id><snippet>cls</snippet></ROW><ROW><id>11182298</id><snippet>Wrapper.__new__</snippet></ROW><ROW><id>11182298</id><snippet>functools.wraps</snippet></ROW><ROW><id>11182298</id><snippet>functools.wraps</snippet></ROW><ROW><id>11182298</id><snippet>def deco(wrapped_cls):
    def __new__(cls, *args, **kwargs)
        ...
        return super(wrapped_cls, cls)(*args, **kwargs)
    wrapped_cls.__new__ = classmethod(__new__)
    return wrapped_cls
</snippet></ROW><ROW><id>11182298</id><snippet>__init__</snippet></ROW><ROW><id>11182298</id><snippet>__init__</snippet></ROW><ROW><id>11182298</id><snippet>isinstance(myObject, Stub)</snippet></ROW><ROW><id>11182298</id><snippet>Stub</snippet></ROW><ROW><id>11182298</id><snippet>type</snippet></ROW><ROW><id>11182348</id><snippet>def create_table():
    curname = None
    for amount in xrange(2500):
        name = best(amount)
        if name != curname:
            if curname is not None:
                print "%d-%d %s" % (minamt, amount-1, curname)
            curname = name
            minamt = amount
    print "%d-%d %s" % (minamt, amount-1, curname)
</snippet></ROW><ROW><id>11182373</id><snippet>datetime</snippet></ROW><ROW><id>11182373</id><snippet>DataFrame</snippet></ROW><ROW><id>11182373</id><snippet>import datetime
from pandas import *

start = datetime(2000, 1, 1)
end = datetime(2012, 12, 1)
d = DateRange(start, end, offset=datetools.Hour())
t_df = DataFrame({'field_1': np.array(['OFF', 'ON'])[np.random.random_integers(0, 1, d.size)], 'field_2': np.random.random_integers(0, 1, d.size)}, index=d)
</snippet></ROW><ROW><id>11182373</id><snippet>In [1]: t_df.head()
Out[1]: 
                    field_1  field_2
2000-01-01 00:00:00      ON        1
2000-01-01 01:00:00     OFF        0
2000-01-01 02:00:00     OFF        1
2000-01-01 03:00:00     OFF        1
2000-01-01 04:00:00      ON        1
In [2]: t_df.shape
Out[2]: (113233, 2)
</snippet></ROW><ROW><id>11182373</id><snippet>DataRange</snippet></ROW><ROW><id>11182373</id><snippet>Index</snippet></ROW><ROW><id>11182373</id><snippet>str</snippet></ROW><ROW><id>11182373</id><snippet>t_df.index = t_df.index.map(str)
</snippet></ROW><ROW><id>11182373</id><snippet>parse_dates = True</snippet></ROW><ROW><id>11182373</id><snippet>DataFrame</snippet></ROW><ROW><id>11182373</id><snippet>read_table</snippet></ROW><ROW><id>11182373</id><snippet>In [3]: import numpy as np
In [4]: import timeit
In [5]: t_df.to_csv('data.tsv', sep='\t', index_label='date_time')
In [6]: t = timeit.Timer("from __main__ import read_table; read_table('data.tsv', sep='\t', index_col=0, parse_dates=True)")
In [7]: np.mean(t.repeat(10, number=1))
Out[7]: 9.5226533889770515
</snippet></ROW><ROW><id>11182373</id><snippet>DataFrame</snippet></ROW><ROW><id>11182373</id><snippet>Index</snippet></ROW><ROW><id>11182373</id><snippet>datetime</snippet></ROW><ROW><id>11182373</id><snippet>In [8]: t = timeit.Timer("from __main__ import t_df, dateutil; map(dateutil.parser.parse, t_df.index.values)")
In [9]: np.mean(t.repeat(10, number=1))
Out[9]: 7.6590064525604244
In [10]: t = timeit.Timer("from __main__ import t_df, dateutil; t_df.index.map(dateutil.parser.parse)")
In [11]: np.mean(t.repeat(10, number=1))
Out[11]: 7.8106775999069216
In [12]: t = timeit.Timer("from __main__ import t_df, datetime; t_df.index.map(lambda x: datetime.strptime(x, \"%Y-%m-%d %H:%M:%S\"))")
Out[12]: 2.0389052629470825
In [13]: t = timeit.Timer("from __main__ import t_df, np; map(np.datetime_, t_df.index.values)")
In [14]: np.mean(t.repeat(10, number=1))
Out[14]: 3.8656840562820434
In [15]: t = timeit.Timer("from __main__ import t_df, np; map(np.datetime64, t_df.index.values)")
In [16]: np.mean(t.repeat(10, number=1))
Out[16]: 3.9244711160659791
</snippet></ROW><ROW><id>11182373</id><snippet>In [17]: def f(s):
   ....:         return datetime(int(s[0:4]), 
   ....:                     int(s[5:7]), 
   ....:                     int(s[8:10]), 
   ....:                     int(s[11:13]), 
   ....:                     int(s[14:16]), 
   ....:                     int(s[17:19]))
   ....: t = timeit.Timer("from __main__ import t_df, f; t_df.index.map(f)")
   ....: 
In [18]: np.mean(t.repeat(10, number=1))
Out[18]: 0.33927145004272463
</snippet></ROW><ROW><id>11182373</id><snippet>numpy</snippet></ROW><ROW><id>11182373</id><snippet>pandas</snippet></ROW><ROW><id>11182373</id><snippet>datetime</snippet></ROW><ROW><id>11182373</id><snippet>str</snippet></ROW><ROW><id>11182373</id><snippet>int</snippet></ROW><ROW><id>11182373</id><snippet>datetime</snippet></ROW><ROW><id>11182571</id><snippet>__init__</snippet></ROW><ROW><id>11182571</id><snippet>Goal.__init__</snippet></ROW><ROW><id>11182571</id><snippet>__init__</snippet></ROW><ROW><id>11182571</id><snippet>backref='activity'</snippet></ROW><ROW><id>11182571</id><snippet>backref=backref('activity', uselist=False)</snippet></ROW><ROW><id>11182571</id><snippet>Activity.__init__</snippet></ROW><ROW><id>11182571</id><snippet>__init__</snippet></ROW><ROW><id>11182571</id><snippet>Activity.add_goal()</snippet></ROW><ROW><id>11182571</id><snippet>Activity</snippet></ROW><ROW><id>11182571</id><snippet>relationship</snippet></ROW><ROW><id>11182571</id><snippet>__init__</snippet></ROW><ROW><id>11182578</id><snippet>import itertools

places = [
    "Pp",
    "Aa@",
    "Ss5",
    "Ss5",
    "Ww",
    "Oo0",
    "Rr",
    "Dd",
]

for letters in itertools.product(*places):
    print "".join(letters)
</snippet></ROW><ROW><id>11182578</id><snippet>places</snippet></ROW><ROW><id>11182631</id><snippet>None</snippet></ROW><ROW><id>11182631</id><snippet>is None</snippet></ROW><ROW><id>11182663</id><snippet>something in some_dictionary</snippet></ROW><ROW><id>11182663</id><snippet>something</snippet></ROW><ROW><id>11182663</id><snippet>some_dictionary</snippet></ROW><ROW><id>11182663</id><snippet>9</snippet></ROW><ROW><id>11182663</id><snippet>subfix</snippet></ROW><ROW><id>11182663</id><snippet>9</snippet></ROW><ROW><id>11182663</id><snippet>subfix</snippet></ROW><ROW><id>11182663</id><snippet>False</snippet></ROW><ROW><id>11182663</id><snippet>subfix</snippet></ROW><ROW><id>11182663</id><snippet>subfix = {1: 'st', 2: 'nd', 3: 'rd'}
</snippet></ROW><ROW><id>11182663</id><snippet>subfix</snippet></ROW><ROW><id>11182663</id><snippet>subfix = {(0, 4, 5, 6, 7, 8, 9, 11, 12, 13): 'th', 1: 'st', 2: 'nd', 3: 'rd'}
</snippet></ROW><ROW><id>11182760</id><snippet>app.mount("/demo",core.app)
</snippet></ROW><ROW><id>11182760</id><snippet>mount(prefix, app, **options)[source]
</snippet></ROW><ROW><id>11182760</id><snippet>root_app.mount('/admin/', admin_app)
</snippet></ROW><ROW><id>11182792</id><snippet>intro</snippet></ROW><ROW><id>11182792</id><snippet>into</snippet></ROW><ROW><id>11182792</id><snippet>intro</snippet></ROW><ROW><id>11182792</id><snippet>import call</snippet></ROW><ROW><id>11182792</id><snippet>call.intro()</snippet></ROW><ROW><id>11183120</id><snippet>Post.objects.filter(posttag__tag=tag)
</snippet></ROW><ROW><id>11183197</id><snippet>from re import split
from itertools import groupby, izip

fruits = set(["apple", "pear"])
animals = set(["bear", "cat"])

json_structure = {}

text_input = ["apple001.png", "apple002.jpg", "bear001.png", "pear001.png", "cat001.png"]

def check(filename):
"""Checks which group a filename is in and returns an integer for ordering"""
    n = split(r'[0-9]', filename)[0]
    if n in fruits:
        return 0
    else:
        return 1


grouped = groupby(sorted(text_input, key=check), key=check)

for objects, object_type in izip(grouped, ["fruits", "animals"]):
    items = objects[1]
    json_structure[object_type] = list(items)

print json_structure
</snippet></ROW><ROW><id>11183206</id><snippet>@get('/restartmyserver')
def handler():
    http_auth_data = bottle.request.auth() # returns a tuple (username,password) only basic auth.
    if http_auth_data[0] == user and http_auth_data[1] == password:
        os.system("your_shell_script_to_restart_gevent_wsgi")
    bottle.redirect('/')
</snippet></ROW><ROW><id>11183404</id><snippet>&gt;&gt;&gt; from datetime import datetime
&gt;&gt;&gt; x = datetime.now()
&gt;&gt;&gt; print x
2012-06-25 12:03:15.835467
&gt;&gt;&gt; x.date()
datetime.date(2012, 6, 25)
&gt;&gt;&gt; 
&gt;&gt;&gt; print x.date()
2012-06-25
&gt;&gt;&gt; 
</snippet></ROW><ROW><id>11183405</id><snippet>cmd_folder = os.path.abspath(os.path.split(inspect.getfile(inspect.currentframe() ))[0])
sys.path.append(cmd_folder+'/../')
</snippet></ROW><ROW><id>11183481</id><snippet>bin-path-excludes</snippet></ROW><ROW><id>11183481</id><snippet>build_exe</snippet></ROW><ROW><id>11183481</id><snippet>bin-path-excludes: ["C:\Program Files\MiKTeX 2.9\miktex\bin\x64",] ,
</snippet></ROW><ROW><id>11183499</id><snippet>import requests
beginning = requests.get('http://example.com/').iter_content(1024).next()
</snippet></ROW><ROW><id>11183499</id><snippet>req = requests.head('http://example.com')
</snippet></ROW><ROW><id>11183597</id><snippet>_CaptureEq</snippet></ROW><ROW><id>11183597</id><snippet>Foo.__eq__</snippet></ROW><ROW><id>11183597</id><snippet>__hash__</snippet></ROW><ROW><id>11183597</id><snippet>class _CaptureEq:
    'Object wrapper that remembers "other" for successful equality tests.'
    def __init__(self, obj):
        self.obj = obj
        self.match = obj
    # If running on Python 3, this will be a new-style class, and
    # new-style classes must delegate hash explicitly in order to populate
    # the underlying special method slot correctly.
    # On Python 2, it will be an old-style class, so the explicit delegation
    # isn't needed (__getattr__ will cover it), but it also won't do any harm.
    def __hash__(self):
        return hash(self.obj)
    def __eq__(self, other):
        result = (self.obj == other)
        if result:
            self.match = other
        return result
    def __getattr__(self, name):  # support anything else needed by __contains__
        return getattr(self.obj, name)
</snippet></ROW><ROW><id>11183597</id><snippet>__eq__</snippet></ROW><ROW><id>11183597</id><snippet>NotImplemented</snippet></ROW><ROW><id>11183597</id><snippet>class Foo(object):
    def __init__(self, a, b, c):
        self.a = a
        self.b = b
        self.c = c
    def __key(self):
        return (self.a, self.b, self.c)
    def __eq__(self, other):
        if not isinstance(other, Foo):
            # Don't recognise "other", so let *it* decide if we're equal
            return NotImplemented
        return self.__key() == other.__key()
    def __hash__(self):
        return hash(self.__key())
</snippet></ROW><ROW><id>11183597</id><snippet>get_equivalent</snippet></ROW><ROW><id>11183597</id><snippet>&gt;&gt;&gt; from capture_eq import *
&gt;&gt;&gt; bar_1 = Bar(1,2,3,4,5)
&gt;&gt;&gt; bar_2 = Bar(1,2,3,10,11)
&gt;&gt;&gt; summary = set((bar_1,))
&gt;&gt;&gt; assert(bar_1 == bar_2)
&gt;&gt;&gt; bar_equiv = get_equivalent(summary, bar_2)
&gt;&gt;&gt; bar_equiv.d
4
&gt;&gt;&gt; bar_equiv.e
5
</snippet></ROW><ROW><id>11183597</id><snippet>__hash__</snippet></ROW><ROW><id>11183800</id><snippet>dict</snippet></ROW><ROW><id>11183800</id><snippet>mylist = []
for k, v in data.items():
    if v != 'null':
        mylist.append((k, v))
</snippet></ROW><ROW><id>11183800</id><snippet>if</snippet></ROW><ROW><id>11183800</id><snippet>if</snippet></ROW><ROW><id>11183810</id><snippet>args=(p.id)</snippet></ROW><ROW><id>11183810</id><snippet>reverse()</snippet></ROW><ROW><id>11183810</id><snippet>args=(p.id,)</snippet></ROW><ROW><id>11183810</id><snippet>'reserve.views.view_reviews'</snippet></ROW><ROW><id>11183810</id><snippet>'view_reviews'</snippet></ROW><ROW><id>11183810</id><snippet>reverse('reserve.views.view_reviews', args=(p.id,))
</snippet></ROW><ROW><id>11183880</id><snippet>('/blog/([0-9]+)/([.*]+)</snippet></ROW><ROW><id>11183880</id><snippet>get(self, post_id, subject)</snippet></ROW><ROW><id>11183880</id><snippet>('/blog/([0-9]+)/[.*]+</snippet></ROW><ROW><id>11183929</id><snippet>Configurator</snippet></ROW><ROW><id>11183929</id><snippet>Configurator</snippet></ROW><ROW><id>11183929</id><snippet>make_wsgi_app</snippet></ROW><ROW><id>11183929</id><snippet>wiki2/src/views/tutorial/__init__.py</snippet></ROW><ROW><id>11183929</id><snippet>from pyramid.config import Configurator
from sqlalchemy import engine_from_config
from pyramid.session import UnencryptedCookieSessionFactoryConfig

from .models import DBSession

def main(global_config, **settings):
    """ This function returns a Pyramid WSGI application.
    """
    engine = engine_from_config(settings, 'sqlalchemy.')
    DBSession.configure(bind=engine)
    my_session_factory = UnencryptedCookieSessionFactoryConfig('itsaseekreet')
    config = Configurator(settings=settings, session_factory=my_session_factory)
    ...
</snippet></ROW><ROW><id>11184047</id><snippet>cursor.execute('INSERT INTO collegelist (name, address) VALUES ("%s", "%s")') &lt;--</snippet></ROW><ROW><id>11184047</id><snippet>execute</snippet></ROW><ROW><id>11184047</id><snippet>execute</snippet></ROW><ROW><id>11184047</id><snippet>q_insert = "INSERT INTO collegelist (name,address) VALUES (%s,%s)"
for college in tuples:
    cursor.execute(q_insert,(college[0], college[1]))
    db.commit()
</snippet></ROW><ROW><id>11184161</id><snippet>ABC</snippet></ROW><ROW><id>11184161</id><snippet>ABXC</snippet></ROW><ROW><id>11184161</id><snippet>ABC</snippet></ROW><ROW><id>11184161</id><snippet>AXC</snippet></ROW><ROW><id>11184333</id><snippet>&gt;&gt;&gt; help(conn.fp)
</snippet></ROW><ROW><id>11184474</id><snippet>if 0 in (result1, result2, result3):
</snippet></ROW><ROW><id>11184474</id><snippet>if result1==0 or result2==0 or result3==0:
</snippet></ROW><ROW><id>11184474</id><snippet>if (0,0,0) == (result1, result2, result3):
</snippet></ROW><ROW><id>11184474</id><snippet>if result1==0 and result2==0 and result3==0:
</snippet></ROW><ROW><id>11184474</id><snippet>if result1==result2==result3==0:
</snippet></ROW><ROW><id>11184777</id><snippet>pip install python-rest-client</snippet></ROW><ROW><id>11184869</id><snippet>&gt;&gt;&gt; min(['11', '5'])
'11'
&gt;&gt;&gt; min([11, 5])
5
</snippet></ROW><ROW><id>11185106</id><snippet>isalpha</snippet></ROW><ROW><id>11185106</id><snippet>isdigit</snippet></ROW><ROW><id>11185106</id><snippet>&gt;&gt;&gt; 'hello'.isalpha()
True
&gt;&gt;&gt; '123'.isdigit()
True
</snippet></ROW><ROW><id>11185106</id><snippet>&gt;&gt;&gt; 'hi there'.isalpha()
False
</snippet></ROW><ROW><id>11185106</id><snippet>int</snippet></ROW><ROW><id>11185106</id><snippet>isinstance</snippet></ROW><ROW><id>11185106</id><snippet>int(blah)</snippet></ROW><ROW><id>11185307</id><snippet>map()</snippet></ROW><ROW><id>11185307</id><snippet>zip()</snippet></ROW><ROW><id>11185307</id><snippet>dict()</snippet></ROW><ROW><id>11185307</id><snippet>map</snippet></ROW><ROW><id>11185307</id><snippet>&gt;&gt;&gt; def addOne(x):
...     return x+1
... 
&gt;&gt;&gt; l = [1, 2, 3, 4]
&gt;&gt;&gt; print(map(addOne, l))
[2, 3, 4, 5]
</snippet></ROW><ROW><id>11185307</id><snippet>zip()</snippet></ROW><ROW><id>11185307</id><snippet>&gt;&gt;&gt; l1, l2 = [1, 2, 3, 4], [5, 6, 7, 8]
&gt;&gt;&gt; print(zip(l1, l2))
[(1, 5), (2, 6), (3, 7), (4, 8)]
</snippet></ROW><ROW><id>11185307</id><snippet>dict</snippet></ROW><ROW><id>11185307</id><snippet>&gt;&gt;&gt; d = dict(zip(l1, l2))
&gt;&gt;&gt; d[1]
5
&gt;&gt;&gt; d
{1: 5, 2: 6, 3: 7, 4: 8}
</snippet></ROW><ROW><id>11185307</id><snippet>&gt;&gt;&gt; for key, value in d:
...   print(key)
... 
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
TypeError: 'int' object is not iterable
</snippet></ROW><ROW><id>11185307</id><snippet>dict</snippet></ROW><ROW><id>11185307</id><snippet>int</snippet></ROW><ROW><id>11185307</id><snippet>int</snippet></ROW><ROW><id>11185307</id><snippet>dict</snippet></ROW><ROW><id>11185307</id><snippet>&gt;&gt;&gt; list(d)
[1, 2, 3, 4]
</snippet></ROW><ROW><id>11185307</id><snippet>&gt;&gt;&gt; for key, value in d.items():
...   print(key, value)
... 
1 5
2 6
3 7
4 8
</snippet></ROW><ROW><id>11185307</id><snippet>print_function</snippet></ROW><ROW><id>11185307</id><snippet>__future__</snippet></ROW><ROW><id>11185307</id><snippet>iteritems()</snippet></ROW><ROW><id>11185307</id><snippet>items()</snippet></ROW><ROW><id>11185307</id><snippet>items()</snippet></ROW><ROW><id>11185307</id><snippet>iteritems()</snippet></ROW><ROW><id>11185307</id><snippet>items()</snippet></ROW><ROW><id>11185588</id><snippet>sites = hxs.select('//ul/li')
items = []

for site in sites:
    item = Website()
    item['name'] = site.select('a/text()').extract() # this extracts a list, so i guess .extract()[0] is expected
    item['url'] = site.select('//a[contains(@href, "http")]/@href').extract() # '//a[...]' maybe you expect that this gets the links within the `site`, but it actually get the links from the entire page; you should use './/a[...]'. And, again, this returns a list, not a single url.
</snippet></ROW><ROW><id>11185590</id><snippet>img_id="{{ message.key }}"
</snippet></ROW><ROW><id>11185590</id><snippet>key()</snippet></ROW><ROW><id>11185815</id><snippet>if a is in b:
</snippet></ROW><ROW><id>11185815</id><snippet>if a in b:
</snippet></ROW><ROW><id>11185984</id><snippet>for filename in files:
    try:
        im = Image.open(os.path.join(dirname,filename))
    except IOError, e:
        print "error opening file :: %s : %s" % (os.path.join(dirname,filename), e)
    else:
        print im.size
</snippet></ROW><ROW><id>11185984</id><snippet>for filename in files:
    try:
        im = Image.open(os.path.join(dirname,filename))
    except IOError, e:
        print "error opening file :: %s : %s" % (os.path.join(dirname,filename), e)
        continue

    print im.size
</snippet></ROW><ROW><id>11186055</id><snippet>import urllib2
from BeautifuSoup import BeautifulSoup

soup = BeautifulSoup(urllib2.urlopen('http://www.cbssports.com/nba/draft/mock-draft').read())

# if there's only one table with class = data
table = soup.find('table', attrs = {'class' : 'data'})

# if there are multiple tables with class = data
table = soup.findAll('table', attrs = {'class' : 'data'})[n]
# suppose you need the n-th table of the list returned

rows = table.findAll('tr') # gives all the rows, you can set attrs to filter
</snippet></ROW><ROW><id>11186055</id><snippet>for row in rows:
    cols = row.findAll('td')
    ...
</snippet></ROW><ROW><id>11186245</id><snippet>README</snippet></ROW><ROW><id>11186245</id><snippet>root</snippet></ROW><ROW><id>11186245</id><snippet>sudo</snippet></ROW><ROW><id>11186421</id><snippet>func</snippet></ROW><ROW><id>11186421</id><snippet>&gt;&gt;&gt; def func(a=0,b=10):
...  return a+b
...
&gt;&gt;&gt; args = {'a':15,'b':15}
&gt;&gt;&gt; func(**args)
30
&gt;&gt;&gt; args={'a':15}
&gt;&gt;&gt; func(**args)
25
&gt;&gt;&gt; args={'b':6}
&gt;&gt;&gt; func(**args)
6
&gt;&gt;&gt; args = {}
&gt;&gt;&gt; func(**args)
10
</snippet></ROW><ROW><id>11186421</id><snippet>&gt;&gt;&gt;func(**{'a':7})
17
</snippet></ROW><ROW><id>11186688</id><snippet>try</snippet></ROW><ROW><id>11186688</id><snippet>def a():
    treeinfo = subprocess.check_output(['C:\Python27\Scripts\scons.bat','-f' ,'scons_default.py' ,'--tree=all'])
    print "\n"
    print "Your machine type is ",platform.machine()
    print "Compiling using default compiler\n"
    print treeinfo

def b():
    subprocess.call('helloworld.exe')
    print"Build success"

def c():
    log64 =  subprocess.check_output(["dumpbin", "/HEADERS", "helloworld.exe"])
    if arch64 in log64:
        print "Architecture of the compiled file is 64-bit "
    elif arch32 in log64:
        print "Architecture of the compiled file is 32-bit"

def try_these(funs, catch):
    for fun in funs:
        try:
            fun()
        except catch:
            print 'ERROR!'

try_these([a, b, c], catch=(IOError, OSError))
</snippet></ROW><ROW><id>11186885</id><snippet>pr</snippet></ROW><ROW><id>11186885</id><snippet>a</snippet></ROW><ROW><id>11186885</id><snippet>b</snippet></ROW><ROW><id>11186885</id><snippet>kw1</snippet></ROW><ROW><id>11186885</id><snippet>kw2</snippet></ROW><ROW><id>11186885</id><snippet>&gt;&gt;&gt; def pr(a, b):
...   print a, b
... 
&gt;&gt;&gt; 
&gt;&gt;&gt; d = {'a': 1, 'b':2}
&gt;&gt;&gt; pr(**d)
1 2
</snippet></ROW><ROW><id>11187100</id><snippet>&gt;&gt;&gt; b[1] = -1
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
RuntimeError: array is not writeable
</snippet></ROW><ROW><id>11187385</id><snippet>class Node:
    def __init__(self, key, children=None):
        self.key = key
        self.children = children if children is not None or []
</snippet></ROW><ROW><id>11187580</id><snippet>federated_id</snippet></ROW><ROW><id>11187580</id><snippet>username</snippet></ROW><ROW><id>11187580</id><snippet>name</snippet></ROW><ROW><id>11187580</id><snippet>federated_id</snippet></ROW><ROW><id>11187580</id><snippet>user_db</snippet></ROW><ROW><id>11187580</id><snippet>user_db</snippet></ROW><ROW><id>11187580</id><snippet>user_db</snippet></ROW><ROW><id>11187580</id><snippet>users.get_current_user()</snippet></ROW><ROW><id>11187580</id><snippet>get_user()</snippet></ROW><ROW><id>11187580</id><snippet>user_db</snippet></ROW><ROW><id>11187580</id><snippet>None</snippet></ROW><ROW><id>11187580</id><snippet>name</snippet></ROW><ROW><id>11187580</id><snippet>username</snippet></ROW><ROW><id>11187580</id><snippet>email</snippet></ROW><ROW><id>11187580</id><snippet>admin</snippet></ROW><ROW><id>11187580</id><snippet>federated_id</snippet></ROW><ROW><id>11187580</id><snippet>from google.appengine.api import users
from google.appengine.ext import ndb
import webapp2

class User(ndb.Model):
  name = ndb.StringProperty(required=True)
  username = ndb.StringProperty(required=True)
  email = ndb.StringProperty()
  federated_id = ndb.StringProperty()
  admin = ndb.BooleanProperty()

class BaseHandler(webapp2.RequestHandler):
  def get_user_db(self):
    federated_user = users.get_current_user()
    if not federated_user:
      return None
    user_db_qry = User.query(User.federated_id == federated_user.user_id())
    user_db_list = user_db_qry.fetch(1)
    #If that returns non empty list, then return the first element which is the user_db
    if user_db_list:
      return user_db_list[0]

    #Otherwise create a new user_db entity, with default values and return
    user_db = User(
        name=federated_user.nickname().title(),
        username=federated_user.nickname(),
        email=federated_user.email(),
        federated_id=federated_user.user_id(),
        admin=users.is_current_user_admin(),
      )
    user_db.put()
    return user_db

class MainHandler(BaseHandler):
  def get(self):
    self.response.headers['Content-Type'] = 'text/html'
    if self.get_user_db():
      self.response.out.write('Hello, %s!&lt;/br&gt;' % self.get_user_db().name)
      self.response.out.write('&lt;a href="%s"&gt;Logout&lt;/a&gt;' % (users.create_logout_url(self.request.uri)))
    else:
      self.response.out.write('Hello, stranger!&lt;br&gt;')
      self.response.out.write('&lt;a href="%s"&gt;Login&lt;/a&gt;' % (users.create_login_url(self.request.uri)))

app = webapp2.WSGIApplication([('/', MainHandler)],
                              debug=True)
</snippet></ROW><ROW><id>11187907</id><snippet>from test_mod1 import Test as Test1
from test_mod2 import Test as Test2
</snippet></ROW><ROW><id>11188024</id><snippet>try:
    from libmproxy import proxy, dump, cmdline
except ImportError:
    import sys
    print 'Executable:', sys.executable
    print '\n'.join(sorted(sys.path))
    raise
</snippet></ROW><ROW><id>11188436</id><snippet>/* use a function for the exact format desired... */
function ISODateString(d){
 function pad(n){return n&lt;10 ? '0'+n : n}
 return d.getUTCFullYear()+'-'
  + pad(d.getUTCMonth()+1)+'-'
  + pad(d.getUTCDate())+'T'
  + pad(d.getUTCHours())+':'
  + pad(d.getUTCMinutes())+':'
  + pad(d.getUTCSeconds())+'Z'}

var d = new Date();
console.log(ISODateString(d)); // prints something like 2009-09-28T19:03:12Z
</snippet></ROW><ROW><id>11188457</id><snippet>coordinates</snippet></ROW><ROW><id>11188457</id><snippet>nul</snippet></ROW><ROW><id>11188457</id><snippet>geocode</snippet></ROW><ROW><id>11188706</id><snippet>import re
your_string = '&lt;python&gt;&lt;regex&gt;&lt;split&gt;'
parts = re.findall(r'&lt;.+?&gt;', your_string)  
print parts # ['&lt;python&gt;', '&lt;regex&gt;', '&lt;split&gt;']
</snippet></ROW><ROW><id>11188955</id><snippet>np.all</snippet></ROW><ROW><id>11188955</id><snippet>axis</snippet></ROW><ROW><id>11188955</id><snippet>&gt;&gt;&gt; r[np.all(r == 0, axis=1)]
array([[ 0.,  0.,  0.]])
&gt;&gt;&gt; r[~np.all(r == 0, axis=1)]
array([[-1.41421356, -0.70710678, -0.70710678],
       [ 0.        , -1.22474487, -1.22474487]])
</snippet></ROW><ROW><id>11189108</id><snippet>import json

def remove_dot_key(obj):
    for key in obj.keys():
        new_key = key.replace(".","")
        if new_key != key:
            obj[new_key] = obj[key]
            del obj[key]
    return obj

new_json = json.loads(data, object_hook=remove_dot_key) 
</snippet></ROW><ROW><id>11189126</id><snippet>request.POST.getlist('ukeys', '')
</snippet></ROW><ROW><id>11189476</id><snippet>zlib</snippet></ROW><ROW><id>11189506</id><snippet>intelhex</snippet></ROW><ROW><id>11189506</id><snippet>import intelhex
ih = intelhex.IntelHex('myfile.hex')
</snippet></ROW><ROW><id>11189506</id><snippet>&gt;&gt;&gt; ih[0x01c200]
224
&gt;&gt;&gt; ih[0x01c201]
165
&gt;&gt;&gt; ih[0x01c202]
230
&gt;&gt;&gt; ih[0x01c203]
246
</snippet></ROW><ROW><id>11189506</id><snippet>s = ih.gets(0x01c200, 4)      # "\xe0\xa5\xe6\xf6"
</snippet></ROW><ROW><id>11189506</id><snippet>import struct
i = struct.unpack('&gt;I', s)   # (3768968950L,)
</snippet></ROW><ROW><id>11189506</id><snippet>def getInt(ih, addr):
    return struct.unpack('&gt;I', ih.gets(addr, 4))[0]

getInt(ih, 0x01c200)    # -&gt; 3768968950
</snippet></ROW><ROW><id>11189506</id><snippet>ih[undefined_addr]</snippet></ROW><ROW><id>11189506</id><snippet>ih.gets(undefined_addr, 1)</snippet></ROW><ROW><id>11189506</id><snippet>ih.gets(addr, n)</snippet></ROW><ROW><id>11189520</id><snippet>$ Python makeReadingsFile.py eichstaett.net.xml   test.readings.xml
Python: can't open file 'makeReadingsFile.py': [Errno 2] No such file or directory
</snippet></ROW><ROW><id>11189520</id><snippet>Python makeReadingsFile.py eichstaett.net.xml   test.readings.xml
Traceback (most recent call last):
  File "makeReadingsFile.py", line 75, in &lt;module&gt;
    import argparse
ImportError: No module named argparse
</snippet></ROW><ROW><id>11189678</id><snippet>#!/usr/bin/env python
</snippet></ROW><ROW><id>11189839</id><snippet>if any(s in mystring for s in ('foo', 'bar', 'hello')):
    pass
</snippet></ROW><ROW><id>11189839</id><snippet>def mystringlist():
    yield 'foo'
    yield 'bar'
    yield 'hello'
if any(s in mystring for s in mystringlist()):
    pass
</snippet></ROW><ROW><id>11190236</id><snippet>import Tkinter as tk

class TableWithFrame(tk.Frame):
    def __init__(self,master=None,*args,**kwargs):
        tk.Frame.__init__(self,master,*args,**kwargs)
        self.table=tk.Frame(self)
        self.table.grid(row=0,column=0)

        self.optionmenu=None
        self.option=tk.StringVar()

        self.frames={}
        self.options=[]
        self.current_choice=None

        self.add_optionmenu()
        self.option.trace("w",self.option_changed)


    def add_option(self,option_string,frame):
        self.options.append(option_string)
        if(self.optionmenu is not None):
            self.optionmenu.destroy()
        self.add_optionmenu()
        self.frames[option_string]=frame

    def add_optionmenu(self):
        if(self.optionmenu is not None):
            self.optionmenu.destroy()

        if(self.options):
            self.optionmenu=tk.OptionMenu(self,self.option,*self.options)
            self.optionmenu.grid(row=1,column=0)

    def option_changed(self,*args):
        choice=self.option.get()
        if(self.current_choice is not None):
            self.current_choice.grid_forget()
        self.current_choice=self.frames[choice]
        self.current_choice.grid(row=0,column=1)


if __name__ == "__main__":
    def populate_table(table):
        """ junk data """
        for j in range(3):
            for i in range(10):
                l=tk.Label(table,text='%d'%(i*j))
                l.grid(row=j,column=i)


    def create_opt_frames(TWF):
        #Fixed Frame
        F=tk.Frame(TWF)
        F.boxes={}
        TWF.add_option('Fixed',F)

        #List Frame
        F=tk.Frame(TWF)
        F.boxes={}
        for i in (1,2,3,4):
            choice_title = tk.Label(F, text='Value %g'% float(i+1))
            choice_title.grid(row=0, column=i, sticky="news")
            box = tk.Entry(F, bg='white')
            box.grid(row=1, column=i, sticky="ew")
            F.boxes[i]=box

        TWF.add_option('List',F)

        #Bigger and Between Frame
        F=tk.Frame(TWF)
        F.boxes={}
        choice_title1 = tk.Label(F, text='Min Value')
        choice_title1.grid(row=0, column=0, sticky="news")
        choice_title2 = tk.Label(F, text='Max Value')
        choice_title2.grid(row=0, column=1, sticky="news")
        for i in (1,2):
            box = tk.Entry(F)
            box.grid(row=1, column=i-1, sticky="nsew", padx=1, pady=1)
            F.boxes[i]=box

        TWF.add_option('Between',F)
        TWF.add_option('Bigger',F)

    def print_boxes(TWF):
        """ Example of how to get info in Entry fields """
        if(TWF.current_choice is not None):
            for k,v in TWF.current_choice.boxes.items():
                print ("boxnum (%d) : value (%s)"%(k,v.get()))
        TWF.after(1000,lambda : print_boxes(TWF))

    root=tk.Tk()
    App=TableWithFrame(root)
    populate_table(App.table)
    create_opt_frames(App)
    print_boxes(App)
    App.grid(row=0,column=0)
    root.mainloop()
</snippet></ROW><ROW><id>11190541</id><snippet>open()</snippet></ROW><ROW><id>11190541</id><snippet>import</snippet></ROW><ROW><id>11190541</id><snippet>os.chdir(PATH)</snippet></ROW><ROW><id>11190754</id><snippet>[]</snippet></ROW><ROW><id>11190754</id><snippet>ukeys = request.POST.getlist('ukeys[]')
</snippet></ROW><ROW><id>11190864</id><snippet>scatter</snippet></ROW><ROW><id>11190864</id><snippet>matplotlib</snippet></ROW><ROW><id>11190864</id><snippet>import numpy as np
import pylab as plt

X = np.linspace(0,5,100)
Y1 = X + 2*np.random.random(X.shape)
Y2 = X**2 + np.random.random(X.shape)

plt.scatter(X,Y1,color='k')
plt.scatter(X,Y2,color='g')
plt.show()
</snippet></ROW><ROW><id>11191259</id><snippet>numpy.fromfile</snippet></ROW><ROW><id>11191259</id><snippet>numpy.frombuffer</snippet></ROW><ROW><id>11191259</id><snippet>&gt;&gt;&gt; np.frombuffer(buffer("\0\0"), dtype=np.float16)[0]
0.0
&gt;&gt;&gt; np.frombuffer(buffer("\x00\x3c"), dtype=np.float16)[0]
1.0
</snippet></ROW><ROW><id>11191294</id><snippet>eachdict</snippet></ROW><ROW><id>11191294</id><snippet>code</snippet></ROW><ROW><id>11191294</id><snippet>for eachdict in mylistofdict:
    if 'code' not in eachdict:
        continue
    eachdict['code'] = referencedict[eachdict['code']]
</snippet></ROW><ROW><id>11191294</id><snippet>code</snippet></ROW><ROW><id>11191294</id><snippet>code</snippet></ROW><ROW><id>11191294</id><snippet>if 'code' not in eachdict: continue</snippet></ROW><ROW><id>11191294</id><snippet>if 'code' in eachdict</snippet></ROW><ROW><id>11191310</id><snippet>any()</snippet></ROW><ROW><id>11191310</id><snippet>def foo(l=[]):
    if any(l):
        print 'List is not empty'
    else:
        print 'List is empty'

foo([''])
# List is empty
</snippet></ROW><ROW><id>11191433</id><snippet>wildcard = "Python source (*.spectrum)|*.spectrum|" \
           "All files (*.*)|*.*"
</snippet></ROW><ROW><id>11191433</id><snippet>def onOpenFile(self, event):
    """
    Create and show the Open FileDialog
    """
    dlg = wx.FileDialog(
        self, message="Choose a file",
        defaultDir=self.currentDirectory, 
        defaultFile="",
        wildcard=wildcard,
        style=wx.OPEN | wx.MULTIPLE | wx.CHANGE_DIR
        )
    if dlg.ShowModal() == wx.ID_OK:
        paths = dlg.GetPaths()
        print "You chose the following file(s):"
        for path in paths:
            print path
    dlg.Destroy()

#----------------------------------------------------------------------
def onSaveFile(self, event):
    """
    Create and show the Save FileDialog
    """
    dlg = wx.FileDialog(
        self, message="Save file as ...", 
        defaultDir=self.currentDirectory, 
        defaultFile="", wildcard=wildcard, style=wx.SAVE
        )
    if dlg.ShowModal() == wx.ID_OK:
        path = dlg.GetPath()
        print "You chose the following filename: %s" % path
    dlg.Destroy()
</snippet></ROW><ROW><id>11191796</id><snippet>python manage.py sqlclear appname
python manage.py syncdb
</snippet></ROW><ROW><id>11191893</id><snippet>GtkStyle</snippet></ROW><ROW><id>11191893</id><snippet>GtkProgressBar</snippet></ROW><ROW><id>11191893</id><snippet>bg</snippet></ROW><ROW><id>11191893</id><snippet>Gtk.STATE_PRELIGHT</snippet></ROW><ROW><id>11191893</id><snippet>progress_bar.modify_bg(gtk.STATE_PRELIGHT, gtk.gdk.color_parse("blue"))
</snippet></ROW><ROW><id>11191910</id><snippet>get_name()</snippet></ROW><ROW><id>11191910</id><snippet>print expander.get_name()
</snippet></ROW><ROW><id>11191910</id><snippet>gtk.Buildable.get_name()</snippet></ROW><ROW><id>11191910</id><snippet>gtk.Widget.get_name()</snippet></ROW><ROW><id>11191910</id><snippet>id</snippet></ROW><ROW><id>11192075</id><snippet>int</snippet></ROW><ROW><id>11192075</id><snippet>from __future__ import division</snippet></ROW><ROW><id>11192075</id><snippet>float</snippet></ROW><ROW><id>11192075</id><snippet>.0</snippet></ROW><ROW><id>11192162</id><snippet>file_path = r"d:\folder\file.csv"
cursor.execute("LOAD data local INFILE %s INTO TABLE test ...);", file_path)
</snippet></ROW><ROW><id>11192177</id><snippet>def exitDevice(ip,m=None,sendExit=True):
   if m is None: m = getDefaultValueForM()
   if sendExit: m.send ( 'exit' )
</snippet></ROW><ROW><id>11192394</id><snippet>re</snippet></ROW><ROW><id>11192394</id><snippet>re</snippet></ROW><ROW><id>11192559</id><snippet>line = renameLink.sub ( "[[\g&lt;linkTarget&gt;][\g&lt;linkText&gt;]]" , line )
</snippet></ROW><ROW><id>11192559</id><snippet>[[LinkTarget][Link Text]]
</snippet></ROW><ROW><id>11192559</id><snippet>line = r""""Link Text":[LinkTarget]"""
renameLink = re.compile("\"(?P&lt;linkText&gt;[^\"]+)\":\[(?P&lt;linkTarget&gt;[^\[\]]+)\]")
print(renameLink.sub ("[[\g&lt;linkTarget&gt;][\g&lt;linkText&gt;]]", line))
</snippet></ROW><ROW><id>11192559</id><snippet>[[LinkTarget][Link Text]]
</snippet></ROW><ROW><id>11192672</id><snippet>my_list = my_string.split(',')
</snippet></ROW><ROW><id>11192672</id><snippet>my_list = map(int, my_string.split(','))
</snippet></ROW><ROW><id>11192672</id><snippet>str</snippet></ROW><ROW><id>11192672</id><snippet>str()</snippet></ROW><ROW><id>11192732</id><snippet>next</snippet></ROW><ROW><id>11192732</id><snippet>__next__</snippet></ROW><ROW><id>11192732</id><snippet>return</snippet></ROW><ROW><id>11192732</id><snippet>__iter__</snippet></ROW><ROW><id>11192732</id><snippet>self</snippet></ROW><ROW><id>11192732</id><snippet>__iter__</snippet></ROW><ROW><id>11192732</id><snippet>next</snippet></ROW><ROW><id>11192732</id><snippet>__iter__</snippet></ROW><ROW><id>11192732</id><snippet>__iter__</snippet></ROW><ROW><id>11192735</id><snippet>if blocks</snippet></ROW><ROW><id>11192735</id><snippet>while should_continue:
        socks = dict(poller.poll())
        if socket_pull in socks and socks[socket_pull] == zmq.POLLIN:
            Work_on_socket_pull ....

        if socket_sub in socks and socks[socket_sub] == zmq.POLLIN:
             Work_on_socket_sub ....
</snippet></ROW><ROW><id>11192735</id><snippet>register callbacks</snippet></ROW><ROW><id>11192735</id><snippet>stream_pull = zmqstream.ZMQStream(socket_pull)
stream_pull.on_recv(getcommand)

stream_sub = zmqstream.ZMQStream(socket_sub)
stream_sub.on_recv(process_message)
</snippet></ROW><ROW><id>11192735</id><snippet>In this case on_recv()</snippet></ROW><ROW><id>11192826</id><snippet>pip</snippet></ROW><ROW><id>11192826</id><snippet>extras_require</snippet></ROW><ROW><id>11192834</id><snippet>.combine(date, time)</snippet></ROW><ROW><id>11192834</id><snippet>time</snippet></ROW><ROW><id>11192834</id><snippet>&gt;&gt;&gt; import datetime
&gt;&gt;&gt; tdate = datetime.date(2012,1,31)
&gt;&gt;&gt; datetime.datetime.combine(tdate, datetime.time())
datetime.datetime(2012, 1, 31, 0, 0)
</snippet></ROW><ROW><id>11192834</id><snippet>time.min</snippet></ROW><ROW><id>11192834</id><snippet>&gt;&gt;&gt; datetime.datetime.combine(tdate, datetime.time.min)
datetime.datetime(2012, 1, 31, 0, 0)
</snippet></ROW><ROW><id>11192912</id><snippet>def in_order(a,b):
    j = iter(b)
    for i in a:
        while True:
            try:
                j_ = j.next()
            except StopIteration:
                return False
            if i == j_:
                break
    return True
</snippet></ROW><ROW><id>11192912</id><snippet>a = [1, 5, 2, 6, 2, 5, 1]
b = [4, 1, 5, 2, 6, 2, 5, 1, 6, 2, 3]
print in_order(a,b)
</snippet></ROW><ROW><id>11192912</id><snippet>True</snippet></ROW><ROW><id>11193157</id><snippet>class Day(models.Model):
    name = models.CharField(max_length=9)
    ordering = models.PositiveIntegerField()

    class Meta:
        ordering = ['ordering']
</snippet></ROW><ROW><id>11193390</id><snippet>__init__.py</snippet></ROW><ROW><id>11193487</id><snippet>for line in reader:
    if line:
        ... # process and save
</snippet></ROW><ROW><id>11193532</id><snippet>import foo #then use foo.raiseFlag()
</snippet></ROW><ROW><id>11193532</id><snippet>from foo import raiseFlag #use raiseFlag()
</snippet></ROW><ROW><id>11193663</id><snippet>input</snippet></ROW><ROW><id>11193663</id><snippet>input()</snippet></ROW><ROW><id>11193663</id><snippet>input()</snippet></ROW><ROW><id>11193663</id><snippet>input</snippet></ROW><ROW><id>11193663</id><snippet>answer</snippet></ROW><ROW><id>11193663</id><snippet>while True:
    answer = input("Select a spot:")
    answer = int(answer)
</snippet></ROW><ROW><id>11193818</id><snippet>if a == '' or b == '':
    print('Either a or b is empty')
</snippet></ROW><ROW><id>11193818</id><snippet>if '' in (a, b):
    print('Either a or b is empty')
</snippet></ROW><ROW><id>11193848</id><snippet>class Blueprint(_PackageBoundObject):
    ....
    def __init__(self, name, import_name, static_folder=None,
                 static_url_path=None, template_folder=None,
                 ...)
        _PackageBoundObject.__init__(self, import_name, template_folder)
    ....
</snippet></ROW><ROW><id>11193848</id><snippet>@locked_cached_property
def jinja_loader(self):
    """The Jinja loader for this package bound object.

    .. versionadded:: 0.5
    """
    if self.template_folder is not None:
        return FileSystemLoader(os.path.join(self.root_path,
                                             self.template_folder))
</snippet></ROW><ROW><id>11193848</id><snippet>Blueprints</snippet></ROW><ROW><id>11193848</id><snippet>_PackageBoundObject</snippet></ROW><ROW><id>11193979</id><snippet>g</snippet></ROW><ROW><id>11193979</id><snippet>g</snippet></ROW><ROW><id>11193979</id><snippet>f</snippet></ROW><ROW><id>11193979</id><snippet>g</snippet></ROW><ROW><id>11193979</id><snippet>f</snippet></ROW><ROW><id>11193979</id><snippet>g</snippet></ROW><ROW><id>11193979</id><snippet>f = open('cartas.txt', 'r')
g = open('copiar.txt', 'r+')

for line in f:
    line = line.replace('s', 'ch')
    g.write(line)

f.close()
g.close()
</snippet></ROW><ROW><id>11194185</id><snippet>'int' object has no attribute '__getitem__'
</snippet></ROW><ROW><id>11194185</id><snippet>[]</snippet></ROW><ROW><id>11194185</id><snippet>col</snippet></ROW><ROW><id>11194185</id><snippet>col = [[0 for col in range(5)] for row in range(6)]
</snippet></ROW><ROW><id>11194185</id><snippet>col</snippet></ROW><ROW><id>11194185</id><snippet>col</snippet></ROW><ROW><id>11194376</id><snippet>bits = []
min_address = False
for row in ws.iter_rows(row_offset=4,column_offset=3):
    c = row[2]
    d = row[3]
    if not d.internal_value: #d will always have a value if the row isn't blank
        if min_address: 
            break #bits is what you want it to be now
        bits = [] #reset bits every time we hit a new row
        continue #this will just skip to next row

    for bits_cell in row[4:]:
        if bits_cell.internal_value:
            bits.append(bits_cell.internal_value)
    if c.internal_value:
        if c.internal_value == min(address):
            min_address = True #we set it to true, then kept going until blank row
</snippet></ROW><ROW><id>11194573</id><snippet>In [14]: glued = pd.concat([x, y], axis=1, keys=['x', 'y'])

In [15]: glued
Out[15]: 
          x                             y                    
          A         B         C         A         B         C
0 -0.264438 -1.026059 -0.619500  1.923135  0.135355 -0.285491
1  0.927272  0.302904 -0.032399 -0.208940  0.642432 -0.764902
2 -0.264273 -0.386314 -0.217601  1.477419 -1.659804 -0.431375
3 -0.871858 -0.348382  1.100491 -1.191664  0.152576  0.935773

In [16]: glued.swaplevel(0, 1, axis=1).sortlevel(axis=1)
Out[16]: 
          A                   B                   C          
          x         y         x         y         x         y
0 -0.264438  1.923135 -1.026059  0.135355 -0.619500 -0.285491
1  0.927272 -0.208940  0.302904  0.642432 -0.032399 -0.764902
2 -0.264273  1.477419 -0.386314 -1.659804 -0.217601 -0.431375
3 -0.871858 -1.191664 -0.348382  0.152576  1.100491  0.935773

In [17]: glued = glued.swaplevel(0, 1, axis=1).sortlevel(axis=1)

In [18]: glued
Out[18]: 
          A                   B                   C          
          x         y         x         y         x         y
0 -0.264438  1.923135 -1.026059  0.135355 -0.619500 -0.285491
1  0.927272 -0.208940  0.302904  0.642432 -0.032399 -0.764902
2 -0.264273  1.477419 -0.386314 -1.659804 -0.217601 -0.431375
3 -0.871858 -1.191664 -0.348382  0.152576  1.100491  0.935773
</snippet></ROW><ROW><id>11194573</id><snippet>In [19]: glued.groupby(level=0, axis=1).mean()
Out[19]: 
          A         B         C
0  0.829349 -0.445352 -0.452496
1  0.359166  0.472668 -0.398650
2  0.606573 -1.023059 -0.324488
3 -1.031761 -0.097903  1.018132
</snippet></ROW><ROW><id>11194639</id><snippet>from gi.repository import WebKit
</snippet></ROW><ROW><id>11195041</id><snippet>import shutil
import os
import tempfile

def writePPS(seekValue,newData):
    PPSFiles = findPPS("/pps")
    for file_ in PPSFiles:
        #create a temp file
        newpps = tempfile.NamedTemporaryFile(suffix=".pps")
        print newpps.name
        with open(file_,"r+") as pps:
            #parse through the pps file and find seekvalue, replace with newdata
            for data in pps:
                valueBoundry = data.find(":")
                if seekValue == data[0:(valueBoundry)]:
                    print "writing new value"
                    newValue = data[0:(valueBoundry+1)] + str(newData)
                    #write to our temp file
                    newpps.write(newValue)
                else: 
                    newpps.write(data)

            #move temp file to pps
            newpps.flush()
            shutil.copy(newpps.name,"/pps/ohm.pps")
</snippet></ROW><ROW><id>11195041</id><snippet>with</snippet></ROW><ROW><id>11195196</id><snippet>return</snippet></ROW><ROW><id>11195196</id><snippet>def do_it():
    with open(path) as f:
        print 'before condition'
        if &lt;condition&gt;:
            return
        print 'after condition'
</snippet></ROW><ROW><id>11195310</id><snippet>INSTALLED_APPS</snippet></ROW><ROW><id>11195310</id><snippet>INSTALLED_APPS = (
    ...
    'foxycart',
    ...
)
</snippet></ROW><ROW><id>11195310</id><snippet>FOXYCART_URL</snippet></ROW><ROW><id>11195310</id><snippet>FOXYCART_URL = "http://foo"
</snippet></ROW><ROW><id>11195488</id><snippet>def newickNode(newickString, parent=None):
    String = newickString[1:-1].split(',')
    for x in String:
        splitString = x.split(':')
        nodeName = splitString[0]
        nodeDistance = float(splitString[1]) 
        node = Node(nodeName, nodeDistance, parent)
        yield node

for node in newickNode('(A:0.1,B:0.2,C:0.3,D:0.4)'): 
    node.displayNode()
</snippet></ROW><ROW><id>11195488</id><snippet>def newickNode(newickString, parent=None):
    String = newickString[1:-1].split(',')
    nodes = []
    for x in String:
        splitString = x.split(':')
        nodeName = splitString[0]
        nodeDistance = float(splitString[1]) 
        node = Node(nodeName, nodeDistance, parent)
        nodes.append(node)
    return nodes
</snippet></ROW><ROW><id>11195677</id><snippet>input</snippet></ROW><ROW><id>11195677</id><snippet>input()</snippet></ROW><ROW><id>11195677</id><snippet>input</snippet></ROW><ROW><id>11195677</id><snippet>&gt;&gt;&gt; a=[1,2,3,4]
&gt;&gt;&gt; a[input]

Traceback (most recent call last):
  File "&lt;pyshell#6&gt;", line 1, in &lt;module&gt;
    a[input]
TypeError: list indices must be integers, not builtin_function_or_method
</snippet></ROW><ROW><id>11195677</id><snippet>&gt;&gt;&gt; Board=['a','x','o','b','c','d']
&gt;&gt;&gt; n=input()#input returns a string,not integer
2
&gt;&gt;&gt; if Board[int(n)]!='x' and Board[int(n)]!='o': #list expect  only integer indexes,convert n to integer first using
    Board[int(n)]='x'


&gt;&gt;&gt; Board
['a', 'x', 'o', 'b', 'c', 'd']
</snippet></ROW><ROW><id>11195734</id><snippet>import logging

# create logger with 'spam_application'
logger = logging.getLogger('spam_application')
logger.setLevel(logging.DEBUG)
# create file handler which logs even debug messages
fh = logging.FileHandler('spam.log')
fh.setLevel(logging.DEBUG)
# create console handler with a higher log level
ch = logging.StreamHandler()
ch.setLevel(logging.ERROR)
# create formatter and add it to the handlers
formatter = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s')
fh.setFormatter(formatter)
ch.setFormatter(formatter)
# add the handlers to the logger
logger.addHandler(fh)
logger.addHandler(ch)
</snippet></ROW><ROW><id>11195734</id><snippet>ch = logging.StreamHandler()
ch.setLevel(logging.INFO)
</snippet></ROW><ROW><id>11195734</id><snippet>logging</snippet></ROW><ROW><id>11195734</id><snippet>NullHandler</snippet></ROW><ROW><id>11195734</id><snippet>NullHandler</snippet></ROW><ROW><id>11195734</id><snippet>import logging
logging.getLogger('spam_application').addHandler(logging.NullHandler())
</snippet></ROW><ROW><id>11196100</id><snippet>class Model(models.Model):
    image_1 = ProcessedImageField([Adjust(contrast=1.2, sharpness=1.1), ResizeToFill(500, 370)], upload_to=generate_image_filename_1, format='JPEG', options={'quality': 90})
    thumbnail_1 = ImageSpec([Adjust(contrast=1.2, sharpness=1.1), ResizeToFill(83, 78)], image_field='image_1', cache_to=generate_cache_filename, format='JPEG', options={'quality': 90})
</snippet></ROW><ROW><id>11196100</id><snippet>def thumbnail(request, pk):
    thumb_pk = pk
    instance = Model.objects.get(pk=thumb_pk)
    return render_to_response('thumbnail.html',{'instance': instance},context_instance = RequestContext(request))
</snippet></ROW><ROW><id>11196100</id><snippet># show the tumbnail

&lt;img alt="thumbnail" src="{{ instance.thumbnail_1.url }}" width="83" height="78"&gt;
</snippet></ROW><ROW><id>11196150</id><snippet>exec</snippet></ROW><ROW><id>11196160</id><snippet>with open("filename") as f:
    for line in f:
        if "foo" in line:
           ... # do something to handle the case of "foo" in line
</snippet></ROW><ROW><id>11196160</id><snippet>/etc/hosts</snippet></ROW><ROW><id>11196160</id><snippet>import sys
_, in_fname, out_fname = sys.argv

found_in_file = False
with open(in_fname) as in_f, open(out_fname, "w") as out_f:
    for line in lst:
        if line.endswith("dax"):
            found_in_file = True
        out_f.write(line)
    if not found_in_file:
        out_f.write("192.168.0.199\tdax\n")
</snippet></ROW><ROW><id>11196160</id><snippet>/etc/hosts</snippet></ROW><ROW><id>11196160</id><snippet>/etc/hosts</snippet></ROW><ROW><id>11196160</id><snippet>/etc/hosts</snippet></ROW><ROW><id>11196160</id><snippet>192.168.0.10</snippet></ROW><ROW><id>11196160</id><snippet>192.168.0.59</snippet></ROW><ROW><id>11196160</id><snippet>192.168.1.*</snippet></ROW><ROW><id>11196160</id><snippet>*</snippet></ROW><ROW><id>11196160</id><snippet>import re
import sys
_, in_fname, out_fname = sys.argv

pat = re.compile(r'^192.168.0.(\d+)\s+(\S+)')

with open(in_fname) as in_f, open(out_fname, "w") as out_f:
    for line in in_f:
        m = pat.search(line)
        if m:
            x = int(m.group(1))
            if 10 &lt;= x &lt; 60:
                line = "192.168.1." + str(x) + "\t" + m.group(2) + "\n"
        out_f.write(line)
</snippet></ROW><ROW><id>11196160</id><snippet>os.rename()</snippet></ROW><ROW><id>11196160</id><snippet>move_subnet.py</snippet></ROW><ROW><id>11196160</id><snippet>python move_subnet.py /etc/hosts ./hosts_copy.txt
</snippet></ROW><ROW><id>11196160</id><snippet>python move_subnet.py C:/Windows/system32/drivers/etc/hosts ./hosts_copy.txt
</snippet></ROW><ROW><id>11196160</id><snippet>hosts_copy.txt</snippet></ROW><ROW><id>11196271</id><snippet>"'%s'" % escape_string(str(obj))

Use connection.string_literal(obj), if you use it at all.
_mysql.string_literal(obj) cannot handle character sets.
</snippet></ROW><ROW><id>11196271</id><snippet># connection:  &lt;_mysql.connection open to 'localhost' at 1008b2420&gt;

str_value = connection.string_literal(tuple(provider))
# '(\'provider1\', \'provider2\')'

SQL = "SELECT * FROM table WHERE provider IN %s"
args = (str_value,)
cursor.execute(sql,args) 
</snippet></ROW><ROW><id>11196334</id><snippet>:</snippet></ROW><ROW><id>11196334</id><snippet>result = getString(argument_x)
print result # it returns "PASS"
if result == "PASS":
  print("Result equals pass")
#Add any other statements here to be executed as a result
#of result == "PASS"
</snippet></ROW><ROW><id>11196451</id><snippet>system()</snippet></ROW><ROW><id>11196451</id><snippet>-e</snippet></ROW><ROW><id>11196459</id><snippet>putenv()</snippet></ROW><ROW><id>11196526</id><snippet>__init__()</snippet></ROW><ROW><id>11196526</id><snippet>Consumer</snippet></ROW><ROW><id>11196526</id><snippet>multiprocess.Process</snippet></ROW><ROW><id>11196526</id><snippet>Consumer</snippet></ROW><ROW><id>11196526</id><snippet>Process</snippet></ROW><ROW><id>11196526</id><snippet>__init__()</snippet></ROW><ROW><id>11196526</id><snippet>run()</snippet></ROW><ROW><id>11196526</id><snippet>start()</snippet></ROW><ROW><id>11196526</id><snippet>Consumer</snippet></ROW><ROW><id>11196526</id><snippet>Queue</snippet></ROW><ROW><id>11196526</id><snippet>Queue</snippet></ROW><ROW><id>11196559</id><snippet>object</snippet></ROW><ROW><id>11196559</id><snippet>type</snippet></ROW><ROW><id>11196559</id><snippet>type</snippet></ROW><ROW><id>11196559</id><snippet>type</snippet></ROW><ROW><id>11196559</id><snippet>object</snippet></ROW><ROW><id>11196559</id><snippet>object</snippet></ROW><ROW><id>11196559</id><snippet>type</snippet></ROW><ROW><id>11196588</id><snippet>USERNAME</snippet></ROW><ROW><id>11196588</id><snippet>import os
user_name = os.getenv("USERNAME")
</snippet></ROW><ROW><id>11196588</id><snippet>%SystemDrive%\Users\{username}</snippet></ROW><ROW><id>11196588</id><snippet>USERDATA</snippet></ROW><ROW><id>11196588</id><snippet>USERPROFILE</snippet></ROW><ROW><id>11196588</id><snippet>APPDATA</snippet></ROW><ROW><id>11196588</id><snippet>import os
appdata_dir_name = os.getenv("APPDATA")
</snippet></ROW><ROW><id>11196615</id><snippet>import threading
import Queue
import sys

def do_work(in_queue, out_queue):
    while True:
        item = in_queue.get()
        # process
        result = item
        out_queue.put(result)
        in_queue.task_done()

if __name__ == "__main__":
    work = Queue.Queue()
    results = Queue.Queue()
    total = 20

    # start for workers
    for i in xrange(4):
        t = threading.Thread(target=do_work, args=(work, results))
        t.daemon = True
        t.start()

    # produce data
    for i in xrange(total):
        work.put(i)

    work.join()

    # get the results
    for i in xrange(total):
        print results.get()

    sys.exit()
</snippet></ROW><ROW><id>11196615</id><snippet>from multiprocessing import Pool

def process_line(line):
    return "FOO: %s" % line

if __name__ == "__main__":
    pool = Pool(4)
    with open('file.txt') as source_file:
        # chunk the work into batches of 4 lines at a time
        results = pool.map(process_line, source_file, 4)

    print results
</snippet></ROW><ROW><id>11196615</id><snippet>map</snippet></ROW><ROW><id>11196615</id><snippet>from multiprocessing import Process, Manager
import time
import itertools 

def do_work(in_queue, out_list):
    while True:
        item = in_queue.get()
        line_no, line = item

        # exit signal 
        if line == None:
            return

        # fake work
        time.sleep(.5)
        result = (line_no, line)

        out_list.append(result)


if __name__ == "__main__":
    num_workers = 4

    manager = Manager()
    results = manager.list()
    work = manager.Queue(num_workers)

    # start for workers    
    pool = []
    for i in xrange(num_workers):
        p = Process(target=do_work, args=(work, results))
        p.start()
        pool.append(p)

    # produce data
    with open("source.txt") as f:
        iters = itertools.chain(f, (None,)*num_workers)
        for num_and_line in enumerate(iters):
            work.put(num_and_line)

    for p in pool:
        p.join()

    # get the results
    # example:  [(1, "foo"), (10, "bar"), (0, "start")]
    print sorted(results)
</snippet></ROW><ROW><id>11196821</id><snippet>import csv
import glob
import os
import itertools

def get_data(fname):
    """
    Load a .csv file
    Returns a dict of {'exchange':float(price)}
    """
    with open(fname, 'rb') as inf:
        items = (row.split() for row in csv.reader(inf))
        return {item[0]:float(item[1]) for item in items}

def do_compare(a_name, a_data, b_name, b_data):
    """
    Compare two data files of {'key': float(value)}

    Returns a list of
      - the name of the first file
      - the name of the second file
      - the number of keys in A which are not in B
      - the number of keys in B which are not in A
      - the number of values in A less than the corresponding value in B
      - the number of values in A equal to the corresponding value in B
      - the number of values in A greater than the corresponding value in B
    """
    a_keys = set(a_data.iterkeys())
    b_keys = set(b_data.iterkeys())

    unique_to_a = len(a_keys - b_keys)
    unique_to_b = len(b_keys - a_keys)

    lt,eq,gt = 0,0,0
    pairs = ((a_data[key], b_data[key]) for key in a_keys &amp; b_keys)
    for ai,bi in pairs:
        if ai &lt; bi:
            lt +=1 
        elif ai == bi:
            eq += 1
        else:
            gt += 1

    return [a_name, b_name, unique_to_a, unique_to_b, lt, eq, gt]

def main():
    os.chdir('d:/tariff_compare')

    # load data from csv files
    data = {}
    for fname in glob.glob("*.csv"):
        data[fname] = get_data(fname)

    # do comparison
    files = data.keys()
    files.sort()
    with open('summary.csv', 'wb') as outf:
        outcsv = csv.writer(outf)
        outcsv.writerow(["File A", "File B", "Unique to A", "Unique to B", "A&lt;B", "A==B", "A&gt;B"])
        for a,b in itertools.combinations(files, 2):
            outcsv.writerow(do_compare(a, data[a], b, data[b]))

if __name__=="__main__":
    main()
</snippet></ROW><ROW><id>11197102</id><snippet>msg.format(*args)
</snippet></ROW><ROW><id>11197245</id><snippet>def SmallGenerator():
    for item in GeneratorFunction(3):
        yield item
</snippet></ROW><ROW><id>11197453</id><snippet>8</snippet></ROW><ROW><id>11197453</id><snippet>0x38</snippet></ROW><ROW><id>11197453</id><snippet>\xff\xfe8\x06
</snippet></ROW><ROW><id>11197453</id><snippet>\xff \xfe 8 \x06
</snippet></ROW><ROW><id>11197453</id><snippet>\x</snippet></ROW><ROW><id>11197676</id><snippet>import re
p = re.compile(r'''&lt;!inc\(|\)!&gt;''')
awesome = p.split(body)
</snippet></ROW><ROW><id>11197676</id><snippet>)!&gt;</snippet></ROW><ROW><id>11197676</id><snippet>)!/inc&gt;</snippet></ROW><ROW><id>11197719</id><snippet>select_related()</snippet></ROW><ROW><id>11197719</id><snippet>class LeaderboardTable(tables.Table):
    rank = tables.Column()
    name = tables.Column(order_by=("first_name", "last_name"))
    team = tables.Column()
    points = tables.Column()

    def render_name(self, record):
        return u"%s %s" % (record.user.first_name, record.user.last_name)
</snippet></ROW><ROW><id>11197719</id><snippet>render_name</snippet></ROW><ROW><id>11197719</id><snippet>TemplateColumn</snippet></ROW><ROW><id>11197806</id><snippet>item</snippet></ROW><ROW><id>11197806</id><snippet>for item in employeeList:
  print "Employee name is: %s" % (item[0])
  if item[0] == input and item[1] &gt;= 500:
    print "This person is a manager."
  else:
    print "This person is not a manager."
</snippet></ROW><ROW><id>11198018</id><snippet>Replaces the passed color in the PixelArray with another one.
PixelArray.replace (color, repcolor, distance=0, weights=(0.299, 0.587, 0.114)): Return None
Replaces the pixels with the passed color in the PixelArray by changing them them to the passed replacement color.
</snippet></ROW><ROW><id>11198125</id><snippet>3&gt;&gt; print('♔♕♖')
♔♕♖
</snippet></ROW><ROW><id>11198125</id><snippet>chcp 65001</snippet></ROW><ROW><id>11198269</id><snippet>import scipy
from scipy import ndimage
import matplotlib.pyplot as plt

im = scipy.misc.imread('all_blobs.png',flatten=1)
im, number_of_objects = ndimage.label(im)
blobs = ndimage.find_objects(im)

plt.imsave('blobs.png', im)
for i,j in enumerate(blobs):
    plt.imsave('blob'+str(i)+'.png',im[j])
</snippet></ROW><ROW><id>11198466</id><snippet>png</snippet></ROW><ROW><id>11198466</id><snippet>&gt;&gt;&gt; help(png)
    Boxed row flat pixel::

     list([R,G,B, R,G,B, R,G,B],
       [R,G,B, R,G,B, R,G,B])

    Flat row flat pixel::    

      [R,G,B, R,G,B, R,G,B,
       R,G,B, R,G,B, R,G,B]

    Boxed row boxed pixel::

      list([ (R,G,B), (R,G,B), (R,G,B) ],
           [ (R,G,B), (R,G,B), (R,G,B) ])
</snippet></ROW><ROW><id>11198466</id><snippet> write(self, outfile, rows)
 |      Write a PNG image to the output file.  `rows` should be
 |      an iterable that yields each row in boxed row flat pixel format.
 |      The rows should be the rows of the original image, so there
 |      should be ``self.height`` rows of ``self.width * self.planes`` values.
 |      If `interlace` is specified (when creating the instance), then
 |      an interlaced PNG file will be written.  Supply the rows in the
 |      normal image order; the interlacing is carried out internally.
</snippet></ROW><ROW><id>11198466</id><snippet>each row in boxed row flat pixel format.</snippet></ROW><ROW><id>11198466</id><snippet>&gt;&gt;&gt; rows = [[255 for element in xrange(4) for number_of_pixles in xrange(256)] for number_of_rows in xrange(256)]
&gt;&gt;&gt; import numpy # Using numpy is much faster
&gt;&gt;&gt; rows = numpy.zeros((256, 256 * 4), dtype = 'int')
&gt;&gt;&gt; rows[:] = 255
&gt;&gt;&gt; png_writer = png.Writer(width = 256, height = 256, alpha = 'RGBA')
&gt;&gt;&gt; png_writer.write(open('white_panel.png', 'wb'), rows)
</snippet></ROW><ROW><id>11198466</id><snippet>Writer</snippet></ROW><ROW><id>11198466</id><snippet>     |  write_array(self, outfile, pixels)
     |      Write an array in flat row flat pixel format as a PNG file on
     |      the output file.  See also :meth:`write` method.
     |  
     |  write_packed(self, outfile, rows)
     |      Write PNG file to `outfile`.  The pixel data comes from `rows`
     |      which should be in boxed row packed format.  Each row should be
     |      a sequence of packed bytes.
</snippet></ROW><ROW><id>11198466</id><snippet>numpy</snippet></ROW><ROW><id>11198466</id><snippet>import png
import numpy
rows = numpy.zeros((256, 256, 4), dtype = 'int') # eassier format to deal with each individual pixel
rows[:, :] = [255, 0, 0, 255] # Setting the color red for each pixel
rows[10:40, 10:40] = [0, 255, 255, 255] #  filled squared starting at (10,10) to (40,40)
locs = numpy.indices(rows.shape[0:2])
rows[(locs[0] - 80)**2 + (locs[1] - 80)**2 &lt;= 20**2] = [255, 255, 0, 255] # yellow filled circle, with center at (80, 80) and radius 20
png_writer = png.Writer(width = 256, height = 256, alpha = 'RGBA') # create writer
png_writer.write(open('colors_panel.png', 'wb'), rows.reshape(rows.shape[0], rows.shape[1]*rows.shape[2])) # we have to reshape or flatten the most inner arrays so write can properly understand the format
</snippet></ROW><ROW><id>11198534</id><snippet>answer = raw_input("Would you like to play it again?") // Get the user answer

if answer == 'yes':
  restart_game()     // if answer is 'yes' play the game again
else:
  close_game()       // else close the game
</snippet></ROW><ROW><id>11198677</id><snippet>data = [v; zeros(nplots,N)]</snippet></ROW><ROW><id>11198677</id><snippet>;</snippet></ROW><ROW><id>11198677</id><snippet>numpy.concatenate((v, zeros((nplots,N))), axis = 0)</snippet></ROW><ROW><id>11198677</id><snippet>data = np.array(v,zeros(nplots,N));
TypeError: data type not understood
</snippet></ROW><ROW><id>11198677</id><snippet>np.array</snippet></ROW><ROW><id>11198677</id><snippet>zeros(nplots,N)</snippet></ROW><ROW><id>11198677</id><snippet>numpy</snippet></ROW><ROW><id>11198677</id><snippet>numpy.zeros</snippet></ROW><ROW><id>11198677</id><snippet>()</snippet></ROW><ROW><id>11198677</id><snippet>data = numpy.concatenate((v, numpy.zeros((nplots,N))), axis = 0)</snippet></ROW><ROW><id>11198677</id><snippet>double</snippet></ROW><ROW><id>11198743</id><snippet>myfile = open('xyz.txt', 'w')
myfile.writelines(var1)
myfile.close()
</snippet></ROW><ROW><id>11198743</id><snippet>myfile = open('xyz.txt', 'w')
for line in lines:
    var1, var2 = line.split(",");
    myfile.write("%s\n" % var1)

myfile.close()
text_file.close()
</snippet></ROW><ROW><id>11198743</id><snippet>writelines</snippet></ROW><ROW><id>11198743</id><snippet>with</snippet></ROW><ROW><id>11198863</id><snippet>&gt;&gt;&gt; def myFunc( a, b ):
...     def innerFunc( c ):
...         print c
...     innerFunc( 2 )
...     myFunc.innerFunc = innerFunc
...     print a, b
...
&gt;&gt;&gt;
&gt;&gt;&gt; myFunc(1,2)
2
1 2
&gt;&gt;&gt; myFunc.innerFunc(3)
3
&gt;&gt;&gt; 
</snippet></ROW><ROW><id>11198863</id><snippet>myFunc.func_code</snippet></ROW><ROW><id>11198863</id><snippet>&gt;&gt;&gt; help(myFunc.func_code)
 Help on code object:
 class code(object)
  |  code(argcount, nlocals, stacksize, flags, codestring, constants, names,
  |        varnames, filename, name, firstlineno, lnotab[, freevars[, cellvars]])
  |  
  |  Create a code object.  Not for the faint of heart.
  |
</snippet></ROW><ROW><id>11198983</id><snippet>&lt;/script&gt;</snippet></ROW><ROW><id>11198983</id><snippet>&lt;script type="text/javascript" src="js/tiny_mce.js"&gt;&lt;/script&gt;
</snippet></ROW><ROW><id>11199085</id><snippet>In [14]:np.correlate(["3", "2","1"], [0, 1, 0.5])
---------------------------------------------------------------------------
ValueError                                Traceback (most recent call last)
/home/dog/&lt;ipython-input-14-a0b588b9af44&gt; in &lt;module&gt;()
----&gt; 1 np.correlate(["3", "2","1"], [0, 1, 0.5])

/usr/lib64/python2.7/site-packages/numpy/core/numeric.pyc in correlate(a, v, mode, old_behavior)
    643         return multiarray.correlate(a,v,mode)
    644     else:
--&gt; 645         return multiarray.correlate2(a,v,mode)
    646 
    647 def convolve(a,v,mode='full'):

ValueError: data type must provide an itemsize
</snippet></ROW><ROW><id>11199085</id><snippet>In [15]: np.correlate([int("3"), int("2"),int("1")], [0, 1, 0.5])
Out[15]: array([ 2.5])



import numpy as np

file = open('final_gdpnum.txt', 'r')
gdp07 = []
for line in file:
    fields = line.strip().split()
    gdp07.append(int(fields [0]))    

file2 = open('internetnum.txt', 'r')
netnum07 = []
for line in file2:
    fields2 = line.strip().split()
    nnetnum07.append(int(fields2 [0]))

print np.correlate(gdp07,netnum07,"full")
</snippet></ROW><ROW><id>11199085</id><snippet>import codecs

f =  codecs.open(file, "r", codecs.BOM_UTF8)
for line in f:
    fields = line.strip().split()
    gdp07.append(int(fields [0]))
</snippet></ROW><ROW><id>11199163</id><snippet>psUtilInfo - psutil.Process(pid)
cpuPercentage = int(psUtilInfo.get_cpu_percent())
memoryInfo, _vms =psUtilInfo.get_memory_info()
</snippet></ROW><ROW><id>11199163</id><snippet>psutil.get_pid_list()
</snippet></ROW><ROW><id>11199323</id><snippet>QTreeWidget</snippet></ROW><ROW><id>11199323</id><snippet>viewport()</snippet></ROW><ROW><id>11199323</id><snippet>viewport()</snippet></ROW><ROW><id>11199354</id><snippet>bits</snippet></ROW><ROW><id>11199354</id><snippet>bits</snippet></ROW><ROW><id>11199354</id><snippet>all_bits</snippet></ROW><ROW><id>11199354</id><snippet>bits</snippet></ROW><ROW><id>11199354</id><snippet>min_addr_bits</snippet></ROW><ROW><id>11199354</id><snippet>all_bits</snippet></ROW><ROW><id>11199458</id><snippet>export VIRTUALENVWRAPPER_PYTHON=/usr/local/bin/python</snippet></ROW><ROW><id>11199458</id><snippet>export VIRTUALENVWRAPPER_PYTHON=/usr/local/bin/python
export VIRTUALENVWRAPPER_VIRTUALENV=/usr/local/bin/virtualenv
source /usr/local/bin/virtualenvwrapper.sh
</snippet></ROW><ROW><id>11199568</id><snippet>def nest(data):
    result = {}
    for record in data:
        assert len(record) &gt; 2
        d = result
        for key in record[:-2]:
            d = d.setdefault(key, {})

        key,value = record[-2:]
        d[key] = value
    return result
</snippet></ROW><ROW><id>11199587</id><snippet>FILE.close()
</snippet></ROW><ROW><id>11199991</id><snippet>&gt;&gt;&gt; sorted(['20100405','20121209','19990606'])
['19990606', '20100405', '20121209']
&gt;&gt;&gt; sorted(['20100405','20121209','19990606'], reverse=True)
['20121209', '20100405', '19990606']
</snippet></ROW><ROW><id>11200057</id><snippet>response.status</snippet></ROW><ROW><id>11200057</id><snippet>@route('/', method='GET')
def homepage():
    response.status = 202
    return {'foo' : 'bar'}
</snippet></ROW><ROW><id>11200146</id><snippet>numpy</snippet></ROW><ROW><id>11200277</id><snippet>class Category(models.Model):
   ...
   parent_category = models.ForeignKey('self', null=True, blank=True)
</snippet></ROW><ROW><id>11200277</id><snippet>Category</snippet></ROW><ROW><id>11200277</id><snippet>parent_category</snippet></ROW><ROW><id>11200277</id><snippet>Category</snippet></ROW><ROW><id>11200277</id><snippet>subcategories = Category.objects.filter(
    parent_category__id=target_category.id)
</snippet></ROW><ROW><id>11200466</id><snippet>db.Person_certification.start_date.requires = IS_NOT_IN_DB(...)
</snippet></ROW><ROW><id>11200506</id><snippet>pg_restore</snippet></ROW><ROW><id>11200506</id><snippet>mongorestore</snippet></ROW><ROW><id>11200506</id><snippet>do_command()</snippet></ROW><ROW><id>11200506</id><snippet>iostat</snippet></ROW><ROW><id>11200506</id><snippet>vmstat</snippet></ROW><ROW><id>11200686</id><snippet>ordereddict</snippet></ROW><ROW><id>11200686</id><snippet>class Container(object):
  def __init__(self):
    self.data = []
    self.byid = {}

  def setData(self, listofdicts):
    for item in listofdicts:
      id = item['id'] # Something here that's meaningful.
      self.data.append(item)
      self.byid[id] = item

  def getByPos(self, idx):
    return self.data[idx]

  def getById(self, itemid):
    return self.byid[itemid]
</snippet></ROW><ROW><id>11200735</id><snippet>/dev/urandom</snippet></ROW><ROW><id>11200735</id><snippet>/dev/urandom</snippet></ROW><ROW><id>11200954</id><snippet>QThread::Priority</snippet></ROW><ROW><id>11200954</id><snippet>yieldCurrentThread()</snippet></ROW><ROW><id>11200954</id><snippet>Qt::AutoConnection</snippet></ROW><ROW><id>11201322</id><snippet>import ScriptingBridge
f = ScriptingBridge.SBApplication.applicationWithBundleIdentifier_("com.apple.Finder")
</snippet></ROW><ROW><id>11201346</id><snippet>import wx

class MainWindow(wx.Frame):

    def __init__(self,parent,id):
        wx.Frame.__init__(self,parent,id,'Python Test App',size=(600,400))
        panel=wx.Panel(self)
        wx.Frame.CenterOnScreen(self)

        status=self.CreateStatusBar()
        menubar=wx.MenuBar()
        file_menu=wx.Menu()
        edit_menu=wx.Menu()

        ID_FILE_NEW = 1
        ID_FILE_OPEN = 2

        ID_EDIT_UNDO = 3
        ID_EDIT_REDO = 4


        file_menu.Append(ID_FILE_NEW,"New Window","This is a new window")
        file_menu.Append(ID_FILE_OPEN,"Open...","This will open a new window")

        edit_menu.Append(ID_EDIT_UNDO,"Undo","This will undo your last action")
        edit_menu.Append(ID_EDIT_REDO,"Redo","This will redo your last undo")


        menubar.Append(file_menu,"File")
        menubar.Append(edit_menu,"Edit")
        self.SetMenuBar(menubar)

        self.Bind(wx.EVT_MENU, self.test, None, 1)

    def test(self, event):
        self.new = NewWindow(parent=None, id=-1)
        self.new.Show()

class NewWindow(wx.Frame):

    def __init__(self,parent,id):
        wx.Frame.__init__(self, parent, id, 'New Window', size=(400,300))
        wx.Frame.CenterOnScreen(self)
        #self.new.Show(False)

if __name__=='__main__':
        app=wx.PySimpleApp()
        frame=MainWindow(parent=None,id=-1)
        frame.Show()
        app.MainLoop()
</snippet></ROW><ROW><id>11201465</id><snippet>def parse(self, response,my_cookies=get_cookies):
    return Request(url="http://my_domain.com/",
        cookies=my_cookies,
        callback=self.login)
</snippet></ROW><ROW><id>11201465</id><snippet>my_cookies=get_cookies</snippet></ROW><ROW><id>11201465</id><snippet>def parse(self, response):
    return Request(url="http://my_domain.com/",
        cookies=self.get_cookies(),
        callback=self.login)
</snippet></ROW><ROW><id>11201465</id><snippet>cookies</snippet></ROW><ROW><id>11201465</id><snippet>Request</snippet></ROW><ROW><id>11201943</id><snippet>Python 2.7.3 (default, Apr 20 2012, 22:44:07) 
[GCC 4.6.3] on linux2
Type "help", "copyright", "credits" or "license" for more information.
&gt;&gt;&gt; data1 = range(0, 1000, 3)
&gt;&gt;&gt; data2 = range(0, 1000, 5)
&gt;&gt;&gt; data3 = list(set(data1 + data2)) # makes new list without duplicates
&gt;&gt;&gt; total = sum(data3) # calculate sum of data3 list's elements
&gt;&gt;&gt; print total
233168
</snippet></ROW><ROW><id>11201943</id><snippet>sum</snippet></ROW><ROW><id>11201943</id><snippet>&gt;&gt;&gt; sum = 0
&gt;&gt;&gt; total = sum(data3) # calculate sum of data3 list's elements
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
TypeError: 'int' object is not callable
</snippet></ROW><ROW><id>11201943</id><snippet>sum</snippet></ROW><ROW><id>11201943</id><snippet>set</snippet></ROW><ROW><id>11201943</id><snippet>list</snippet></ROW><ROW><id>11202305</id><snippet>Button</snippet></ROW><ROW><id>11202305</id><snippet>command</snippet></ROW><ROW><id>11202305</id><snippet>Button</snippet></ROW><ROW><id>11202305</id><snippet>class MyButton(object):
  def __init__(self, frame_but, text):
    self.but = Button(frame_but, text, command=self.StartBut)

  def StartBut(self):
    value = self.but.box.get()
</snippet></ROW><ROW><id>11202305</id><snippet>class Foo(object):
  def echo(self, a):
    return a
</snippet></ROW><ROW><id>11202305</id><snippet>f = Foo()
f.echo(2)
</snippet></ROW><ROW><id>11202305</id><snippet>f.echo(2)</snippet></ROW><ROW><id>11202305</id><snippet>Foo.echo(f, 2)</snippet></ROW><ROW><id>11202305</id><snippet>f</snippet></ROW><ROW><id>11202305</id><snippet>self</snippet></ROW><ROW><id>11202305</id><snippet>a</snippet></ROW><ROW><id>11202305</id><snippet>Foo.echo(f, 2)</snippet></ROW><ROW><id>11202305</id><snippet>f.echo(2)</snippet></ROW><ROW><id>11202305</id><snippet>Button</snippet></ROW><ROW><id>11202305</id><snippet>class Button(object):
  ...
  def hit(self):
    self.command()
</snippet></ROW><ROW><id>11202305</id><snippet>Button</snippet></ROW><ROW><id>11202305</id><snippet>class Button(object):
  ...
  def hit(self):
    self.command(self)
</snippet></ROW><ROW><id>11202305</id><snippet>but1 = Button(frame_but, text='Start', command =StartBut)
</snippet></ROW><ROW><id>11202305</id><snippet>self</snippet></ROW><ROW><id>11202305</id><snippet>def StartBut(button):
  value = button.box.get()
</snippet></ROW><ROW><id>11202305</id><snippet>instance.method(args)</snippet></ROW><ROW><id>11202305</id><snippet>Class.method(instance, args)</snippet></ROW><ROW><id>11202305</id><snippet>' '.join(["hello", "world"])</snippet></ROW><ROW><id>11202305</id><snippet>str.join(' ', ["hello", "world"])</snippet></ROW><ROW><id>11202305</id><snippet>' '.join(["hello", "world"])</snippet></ROW><ROW><id>11202467</id><snippet>from ... import *</snippet></ROW><ROW><id>11202467</id><snippet>execfile()</snippet></ROW><ROW><id>11202467</id><snippet>settings/__init__.py</snippet></ROW><ROW><id>11202468</id><snippet>def on_next2_clicked(self,button):
    cmd = "My Command"
    proc = subprocess.Popen(cmd,shell=True, stdout=subprocess.PIPE)
    while True:
        line = proc.stdout.read(2)
        if not line:
            break
        self.fper = float(line)/100.0
        self.ui.progressbar1.set_fraction(self.fper)
        while Gtk.events_pending():
            Gtk.main_iteration()  # runs the GTK main loop as needed
    print "Done"
</snippet></ROW><ROW><id>11202692</id><snippet>odf</snippet></ROW><ROW><id>11203146</id><snippet>&gt;&gt;&gt; s = """&gt;FBpp0293870 type=protein;loc=3L:join(21527760..21527913,21527977..21528076,21528130..21528390,21528443..21528653,21528712..21529192,21529254..21529264); ID=FBpp0293870; name=CG33289-PC; parent=FBgn0053289,FBtr0305327; dbxref=FlyBase:FBpp0293870,FlyBase_Annotation_IDs:CG33289-PC; MD5=478485a27487608aa2b6c35d39a3295c; length=405; release=r5.45; species=Dmel; MEMLKYVISDNNYSWWIKLYFAIIFALVLFVAVNLAVGIYNKWDSTPVII
GISSKMTPIDQIPFPTITVCNMNQAKKSKVEHLMPGSIRYAMLQKTCYKE
SNFSQYMDTQHRNETFSNFILDVSEKCADLIVSCIFHQQRIPCTDIFRET
FVDEGLCCIFNVLHPYYLYKFKSPYIRDFTSSDRFADIAVDWDPISGYPQ
RLPSSYYPRPGVGVGTSMGLQIVLNGHVDDYFCSSTNGQGFKILLYNPID
QPRMKESGLPVMIGHQTSFRIIARNVEATPSIRNIHRTKRQCIFSDEQEL
LFYRYYTRRNCEAECDSMFFLRLCSCIPYYLPLIYPNASVCDVFHFECLN
RAESQIFDLQSSQCKEFCLTSCHDLIFFPDAFSTPFSQKDVKAQTNYLTN
FSRAV"""
&gt;&gt;&gt; import re
&gt;&gt;&gt; print re.sub(r'.*FlyBase_Annotation_IDs:([\w-]+).*;', r'\1\n', s)
CG33289-PC
 MEMLKYVISDNNYSWWIKLYFAIIFALVLFVAVNLAVGIYNKWDSTPVII
GISSKMTPIDQIPFPTITVCNMNQAKKSKVEHLMPGSIRYAMLQKTCYKE
SNFSQYMDTQHRNETFSNFILDVSEKCADLIVSCIFHQQRIPCTDIFRET
FVDEGLCCIFNVLHPYYLYKFKSPYIRDFTSSDRFADIAVDWDPISGYPQ
RLPSSYYPRPGVGVGTSMGLQIVLNGHVDDYFCSSTNGQGFKILLYNPID
QPRMKESGLPVMIGHQTSFRIIARNVEATPSIRNIHRTKRQCIFSDEQEL
LFYRYYTRRNCEAECDSMFFLRLCSCIPYYLPLIYPNASVCDVFHFECLN
RAESQIFDLQSSQCKEFCLTSCHDLIFFPDAFSTPFSQKDVKAQTNYLTN
FSRAV
&gt;&gt;&gt; 
</snippet></ROW><ROW><id>11203209</id><snippet>subprocess.Popen(['R', 'CMD', 'BATCH', '/path/to/script.R'])
</snippet></ROW><ROW><id>11203209</id><snippet>$ cat 1.py
import time
import subprocess

print time.time()
subprocess.Popen(['sleep', '1000'])
print time.time()

$ python 1.py
1340698384.08
1340698384.08
</snippet></ROW><ROW><id>11203840</id><snippet>def ChoiceBox(choice):</snippet></ROW><ROW><id>11203840</id><snippet>def ChoiceBox(self, choice)</snippet></ROW><ROW><id>11204130</id><snippet>for each line in input file:
    if line starts with binary tag: set output flag to True
    if line starts with binary-termination tag: set output flag to False
    if output flag is True: copy line to the output file
</snippet></ROW><ROW><id>11204130</id><snippet>outputFile = open('./output', 'w')    
inputFile = open('./input.txt', 'r')

flag = False

for line in inputFile:

    if line.startswith("&lt;binary size"):
        flag = True
    elif line.startswith("&lt;/binary&gt;"):
        flag = False
    elif flag:
        outputFile.write(line[:-1]) # remove newline


outputFile.close()
inputFile.close()
</snippet></ROW><ROW><id>11204521</id><snippet>__getitem__</snippet></ROW><ROW><id>11204521</id><snippet>def __getitem__(self, key):
    if key not in self._keys:
        raise Exception("'" + key + "'" + " is not a valid key")
    return dict.__getitem__(self,key)
</snippet></ROW><ROW><id>11204743</id><snippet>class Parent(object):
    def hello(self):
        print 'Hello world'
    def goodbye(self):
        print 'Goodbye world'

class Child(Parent):
    def goodbye(self):
        raise NotImplementedError
</snippet></ROW><ROW><id>11204743</id><snippet>class Parent(object):
    def hello(self):
        print 'Hello world'
    def goodbye(self):
        print 'Goodbye world'

class Child:
    def __init__(self):
        self.buddy = Parent()
    def hello(self):
        return self.buddy.hello()
</snippet></ROW><ROW><id>11204792</id><snippet>@classmethod 
def info(cls, component, msg, *args):     
    """Log an info message"""     
    cls.__log(cls.Level.INFO, component, msg, (args)  

@classmethod 
def __log(cls, level, component, msg, *args):    
    """Log a message at the requested level"""     
    logging.getLogger("local").log(level, " - ".join([component, msg.format(*args)])) 

Logger.info("MyComponent", "My message with arg '{0}'", "TestArg")
</snippet></ROW><ROW><id>11204870</id><snippet>types</snippet></ROW><ROW><id>11204870</id><snippet>&gt;&gt;&gt; import types
&gt;&gt;&gt; var = 1
&gt;&gt;&gt; NumberTypes = (types.IntType, types.LongType, types.FloatType, types.ComplexType)
&gt;&gt;&gt; isinstance(var, NumberTypes)
True
</snippet></ROW><ROW><id>11204870</id><snippet>IntType</snippet></ROW><ROW><id>11204870</id><snippet>int</snippet></ROW><ROW><id>11204870</id><snippet>&gt;&gt;&gt; isinstance(var, (int, long, float, complex))
True
</snippet></ROW><ROW><id>11204870</id><snippet>complex</snippet></ROW><ROW><id>11204870</id><snippet>&gt;&gt;&gt; try:
...     NumberTypes = (types.IntType, types.LongType, types.FloatType, types.ComplexType)
... except AttributeError:
...     # No support for complex numbers compiled
...     NumberTypes = (types.IntType, types.LongType, types.FloatType)
...
</snippet></ROW><ROW><id>11204870</id><snippet>&gt;&gt;&gt; try:
...     NumberTypes = (int, long, float, complex)
... except NameError:
...     # No support for complex numbers compiled
...     NumberTypes = (int, long, float)
...
</snippet></ROW><ROW><id>11204876</id><snippet>class MyCustomClass(QtCore.QThread):
    custom_signal = QtCore.pyqtSignal(object)
</snippet></ROW><ROW><id>11204876</id><snippet>&gt;&gt;&gt; def callback(result):
...    print type(result)
...
&gt;&gt;&gt; obj = MyCustomClass()
&gt;&gt;&gt; obj.custom_signal.connect(callback)
&gt;&gt;&gt; obj.custom_signal.emit('hello')
&lt;type 'str'&gt;
&gt;&gt;&gt; obj.custom_signal.emit({'x': 1})
&lt;type 'dict'&gt;
</snippet></ROW><ROW><id>11205160</id><snippet>subprocess.check_output(["java", "-classpath", "/Users/feralvam/Programas/semanticvectors-3.4/semanticvectors-3.4.jar:/Users/feralvam/Programas/lucene-3.5.0/lucene-core-3.5.0.jar:/Users/feralvam/Programas/lucene-3.5.0/contrib/demo/lucene-demo-3.5.0.jar:", "pitt.search.semanticvectors.CompareTerms", "-queryvectorfile","/Users/feralvam/termvectors.bin","term1","term2"])
</snippet></ROW><ROW><id>11205337</id><snippet>/</snippet></ROW><ROW><id>11205337</id><snippet>login: required</snippet></ROW><ROW><id>11205337</id><snippet>login: required</snippet></ROW><ROW><id>11205337</id><snippet>app.yaml</snippet></ROW><ROW><id>11205362</id><snippet>python</snippet></ROW><ROW><id>11205362</id><snippet>python3</snippet></ROW><ROW><id>11205362</id><snippet>python2.7</snippet></ROW><ROW><id>11205362</id><snippet>python3.2</snippet></ROW><ROW><id>11205362</id><snippet>python</snippet></ROW><ROW><id>11205362</id><snippet>python3</snippet></ROW><ROW><id>11205684</id><snippet>{% for key, value in details.iteritems %}
    {{ key }}
    {{ value }}
{ % endfor %}
</snippet></ROW><ROW><id>11205758</id><snippet>&gt;&gt;&gt; soup = BeautifulSoup('&lt;META NAME="City" content="Austin"&gt;')
&gt;&gt;&gt; soup.find("meta", {"name":"City"})
&lt;meta name="City" content="Austin" /&gt;
&gt;&gt;&gt; soup.find("meta", {"name":"City"})['content']
u'Austin'
</snippet></ROW><ROW><id>11205786</id><snippet>env = os.environ.copy()
env['LANG'] = 'en_US.UTF-8'
subprocess.check_output( ..., env = env)
</snippet></ROW><ROW><id>11205913</id><snippet>\b</snippet></ROW><ROW><id>11205913</id><snippet>pattern = re.compile("\\b" + re.escape(old) + "\\b",re.I)
</snippet></ROW><ROW><id>11205913</id><snippet>\b</snippet></ROW><ROW><id>11206174</id><snippet>cssSelector = re.compile(r'^(?P&lt;type&gt;[\*|\w|\-]+)?(?P&lt;id&gt;#[\w|\-]+)?(?P&lt;classes&gt;\.[\w|\-|\.]+)*(?P&lt;data&gt;\[.+\])*$')

&gt;&gt;&gt; cssSelector.match("table#john.test.test2[hello]").groups()
('table', '#john', '.test.test2', '[hello]')
&gt;&gt;&gt; cssSelector.match("table").groups()
('table', None, None, None)
&gt;&gt;&gt; cssSelector.match("table#john").groups()
('table', '#john', None, None)
&gt;&gt;&gt; cssSelector.match("table.test.test2[hello]").groups()
('table', None, '.test.test2', '[hello]')
&gt;&gt;&gt; cssSelector.match("table#john.test.test2").groups()
('table', '#john', '.test.test2', None)
&gt;&gt;&gt; cssSelector.match("*#john.test.test2[hello]").groups()
('*', '#john', '.test.test2', '[hello]')
&gt;&gt;&gt; cssSelector.match("*").groups()
('*', None, None, None)
</snippet></ROW><ROW><id>11206174</id><snippet>attribSelector = re.compile(r'(?P&lt;word&gt;\w+)\s*(?P&lt;operator&gt;[^\w\,]{0,2})\s*(?P&lt;value&gt;\w+)?\s*[\,|\]]')

&gt;&gt;&gt; a = attribSelector.findall("[link, ds9 != test, bsdfsdf]")
&gt;&gt;&gt; for x in a: print x
('link', '', '')
('ds9', '!=', 'test')
('bsdfsdf', '', '')
</snippet></ROW><ROW><id>11206343</id><snippet>PROTOCOL = "sslv23"
...
    print "[i] Initializing context ..."
    ctx = M2Crypto.SSL.Context(protocol=PROTOCOL, weak_crypto=True)
    ctx.load_cert_chain(certchainfile=CERTFILE, keyfile=KEYFILE)
    ctx.set_options(M2Crypto.m2.SSL_OP_ALL)
    ctx.set_tmp_rsa(M2Crypto.RSA.gen_key(512, 65537))
    ctx.set_cipher_list("ALL")
</snippet></ROW><ROW><id>11206343</id><snippet>set_tmp_rsa()</snippet></ROW><ROW><id>11206343</id><snippet>-ssl2</snippet></ROW><ROW><id>11206343</id><snippet>openssl s_client</snippet></ROW><ROW><id>11206343</id><snippet>set_tmp_rsa</snippet></ROW><ROW><id>11206343</id><snippet>openssl ciphers -v</snippet></ROW><ROW><id>11206343</id><snippet>% openssl ciphers -v EXPORT
EXP-EDH-RSA-DES-CBC-SHA SSLv3 Kx=DH(512)  Au=RSA  Enc=DES(40)   Mac=SHA1 export
EXP-EDH-DSS-DES-CBC-SHA SSLv3 Kx=DH(512)  Au=DSS  Enc=DES(40)   Mac=SHA1 export
EXP-ADH-DES-CBC-SHA     SSLv3 Kx=DH(512)  Au=None Enc=DES(40)   Mac=SHA1 export
EXP-DES-CBC-SHA         SSLv3 Kx=RSA(512) Au=RSA  Enc=DES(40)   Mac=SHA1 export
EXP-RC2-CBC-MD5         SSLv3 Kx=RSA(512) Au=RSA  Enc=RC2(40)   Mac=MD5  export
EXP-RC2-CBC-MD5         SSLv2 Kx=RSA(512) Au=RSA  Enc=RC2(40)   Mac=MD5  export
EXP-ADH-RC4-MD5         SSLv3 Kx=DH(512)  Au=None Enc=RC4(40)   Mac=MD5  export
EXP-RC4-MD5             SSLv3 Kx=RSA(512) Au=RSA  Enc=RC4(40)   Mac=MD5  export
EXP-RC4-MD5             SSLv2 Kx=RSA(512) Au=RSA  Enc=RC4(40)   Mac=MD5  export
</snippet></ROW><ROW><id>11206464</id><snippet>&gt;&gt;&gt; lis = [{'date': 1, 'value':5}, {'date':2,'value':3}]
&gt;&gt;&gt; {x['date']:x['value'] for x in lis}
{1: 5, 2: 3}
</snippet></ROW><ROW><id>11206511</id><snippet>year</snippet></ROW><ROW><id>11206511</id><snippet>&gt;&gt;&gt; from datetime import date
&gt;&gt;&gt; print date.today().year + 1
2013
</snippet></ROW><ROW><id>11206511</id><snippet>&gt;&gt;&gt; year = 2012
&gt;&gt;&gt; print year + 1
2013
</snippet></ROW><ROW><id>11206511</id><snippet>int</snippet></ROW><ROW><id>11206511</id><snippet>&gt;&gt;&gt; date = '2012-06-26'
&gt;&gt;&gt; print int(date[:4]) + 1
2013
</snippet></ROW><ROW><id>11206511</id><snippet>date</snippet></ROW><ROW><id>11206511</id><snippet>&gt;&gt;&gt; today = date.today()
&gt;&gt;&gt; print date(today.year + 1, today.month, today.day)
2013-06-26
</snippet></ROW><ROW><id>11206511</id><snippet>.replace</snippet></ROW><ROW><id>11206511</id><snippet>&gt;&gt;&gt; print today.replace(year=today.year + 1)
2013-06-26
</snippet></ROW><ROW><id>11206511</id><snippet>today</snippet></ROW><ROW><id>11206511</id><snippet>def nextyear(dt):
   try:
       return dt.replace(year=dt.year+1)
   except ValueError:
       # February 29th in a leap year
       # Add 365 days instead to arrive at March 1st
       return dt + timedelta(days=365)
</snippet></ROW><ROW><id>11207199</id><snippet>__setattr__</snippet></ROW><ROW><id>11207199</id><snippet>__getattr__</snippet></ROW><ROW><id>11207199</id><snippet>__setattr__</snippet></ROW><ROW><id>11207199</id><snippet>class SubConfig(object):
    def __init__(self, config, key_types):
        self.__dict__.update(
            _SubConfig__config=config,
            _SubConfig__values={},
            _SubConfig__key_types=key_types
            )
</snippet></ROW><ROW><id>11207378</id><snippet>&lt;div id="flash" tal:condition="request.session.peek_flash()"&gt;
  &lt;span tal:omit-tag="" 
        tal:repeat="message request.session.pop_flash()"&gt;
      ${message}&lt;br&gt;
  &lt;/span&gt;
&lt;/div&gt;
</snippet></ROW><ROW><id>11207378</id><snippet>tal:omit-tag</snippet></ROW><ROW><id>11207378</id><snippet>&lt;span&gt;</snippet></ROW><ROW><id>11207442</id><snippet>from django.core.urlresolvers import resolve
from myapp.views import user_profile_view

try:
    my_view = resolve("/%s/" % user_name)
    if my_view == user_profile_view:
        # We match the user_profile_view, so that's OK.
    else:
        # oops, we have another view that is mapped on that URL
    # you already have something mapped on this address
except:
    # app doesn't have such path
</snippet></ROW><ROW><id>11207442</id><snippet>def user_profile_view(request, user_name):
    # some code here

user_profile_view.name = "User Profile View"
</snippet></ROW><ROW><id>11207442</id><snippet>if getattr(my_view, "name", None) == "User Profile View":
    ...
</snippet></ROW><ROW><id>11207507</id><snippet>set_position</snippet></ROW><ROW><id>11207507</id><snippet>move</snippet></ROW><ROW><id>11207507</id><snippet>window2.move(pos_x, pos_y)</snippet></ROW><ROW><id>11207585</id><snippet>from functools import total_ordering
@total_ordering
class ReversedOrder:
    def __init__(self, value):
        self.value = value
    def __eq__(self, other):
        return other.value == self.value
    def __lt__(self, other):
        return other.value &lt; self.value
</snippet></ROW><ROW><id>11207585</id><snippet>functools.total_ordering</snippet></ROW><ROW><id>11207585</id><snippet>import operator
class ReversedOrder:
    def __init__(self, value):
        self.value = value
for x in ['__lt__', '__le__', '__eq__', '__ne__', '__ge__', '__gt__']:
    op = getattr(operator, x)
    setattr(ReversedOrder, x, lambda self, other, op=op: op(other.value, self.value))
</snippet></ROW><ROW><id>11207802</id><snippet>Dialog.run()</snippet></ROW><ROW><id>11207802</id><snippet>Dialog.run()</snippet></ROW><ROW><id>11207803</id><snippet>t</snippet></ROW><ROW><id>11207803</id><snippet>p(t) = \sum_{a} p_a \delta(t-t_a) + f(t)</snippet></ROW><ROW><id>11207803</id><snippet>a</snippet></ROW><ROW><id>11207803</id><snippet>t_a</snippet></ROW><ROW><id>11207803</id><snippet>p_a</snippet></ROW><ROW><id>11207803</id><snippet>t_a</snippet></ROW><ROW><id>11207803</id><snippet>f(t)</snippet></ROW><ROW><id>11207803</id><snippet>f(t)dt</snippet></ROW><ROW><id>11207803</id><snippet>t</snippet></ROW><ROW><id>11207803</id><snippet>[t,t+dt)</snippet></ROW><ROW><id>11207803</id><snippet>\int p(t) =1</snippet></ROW><ROW><id>11207803</id><snippet>t</snippet></ROW><ROW><id>11207803</id><snippet>1-\sum_a p_a</snippet></ROW><ROW><id>11208154</id><snippet>x</snippet></ROW><ROW><id>11208154</id><snippet>list</snippet></ROW><ROW><id>11208154</id><snippet>numpy</snippet></ROW><ROW><id>11208154</id><snippet>array</snippet></ROW><ROW><id>11208154</id><snippet>*</snippet></ROW><ROW><id>11208154</id><snippet>&gt;&gt;&gt; m * x
[]
</snippet></ROW><ROW><id>11208154</id><snippet>plt.plot(x, y, x, numpy.array(x) * m +b) 
</snippet></ROW><ROW><id>11208186</id><snippet>int()</snippet></ROW><ROW><id>11208186</id><snippet>float()</snippet></ROW><ROW><id>11208186</id><snippet>if any(float(x) &gt;= 95 for x in fields[3:23]):
</snippet></ROW><ROW><id>11208618</id><snippet>class Vec(list):
    pass

functions = {"__add__": operator.add,
             "__mul__": operator.mul,
             "__truediv__": operator.truediv,
             "__sub__": operator.sub}
for name, op in functions.iteritems():
    setattr(Vec, name, lambda self, other, op=op: Vec(map(op, self, other)))
</snippet></ROW><ROW><id>11208618</id><snippet>op=op</snippet></ROW><ROW><id>11208618</id><snippet>op</snippet></ROW><ROW><id>11208640</id><snippet>app=QtGui.QApplication(sys.argv)
</snippet></ROW><ROW><id>11208916</id><snippet>match = re.search("Num_row_labels=(\d+)", line)
</snippet></ROW><ROW><id>11208916</id><snippet>(\d+)</snippet></ROW><ROW><id>11208916</id><snippet>re.search</snippet></ROW><ROW><id>11208916</id><snippet>re.match</snippet></ROW><ROW><id>11208916</id><snippet>match</snippet></ROW><ROW><id>11208916</id><snippet>10</snippet></ROW><ROW><id>11208916</id><snippet>if int(match.group(1)) &gt;= 10:
    print "Num_row_labels is at least 10"
</snippet></ROW><ROW><id>11208916</id><snippet>match.group(1)</snippet></ROW><ROW><id>11208916</id><snippet>\d+</snippet></ROW><ROW><id>11208916</id><snippet>int()</snippet></ROW><ROW><id>11208916</id><snippet>int()</snippet></ROW><ROW><id>11208991</id><snippet>conn.close()</snippet></ROW><ROW><id>11209373</id><snippet>#!/usr/bin/env python
from ftplib import FTP

def writeFunc(s):
  print "Read: " + s

ftp = FTP('ftp.kernel.org') 
ftp.login()
ftp.retrbinary('RETR /pub/README_ABOUT_BZ2_FILES', writeFunc)
</snippet></ROW><ROW><id>11209373</id><snippet>#!/usr/bin/env python
from ftplib import FTP

class Reader:
  def __init__(self):
    self.data = ""
  def __call__(self,s):
     self.data += s

ftp = FTP('ftp.kernel.org') 
ftp.login()
r = Reader()
ftp.retrbinary('RETR /pub/README_ABOUT_BZ2_FILES', r)

print r.data
</snippet></ROW><ROW><id>11209373</id><snippet>#!/usr/bin/env python
from ftplib import FTP
from StringIO import StringIO

ftp = FTP('ftp.kernel.org') 
ftp.login()
r = StringIO()
ftp.retrbinary('RETR /pub/README_ABOUT_BZ2_FILES', r.write)

print r.getvalue()
</snippet></ROW><ROW><id>11209441</id><snippet>class shape:
  def __init__(self, name):
    self.name = name

  def printMyself(self):
    print ('I am a shape named %s.' % self.name)

shape1 = shape(name = 'myFirstShape.')
shape2 = shape(name = 'mySecondShape.')
shape1.printMyself()
shape2.printMyself()


class polyCube(shape):
    def __init__(self, name, lenght, width, height):
        shape.__init__(self,name) #pass self here, you're calling parent's __init__() explicitly so you should pass self.

        self.length = lenght
        self.width = width
        self.height = height

    def printMyself(self):
     shape.printMyself(self)
     #use self.length ,self.width instead of just lenght,width etc
     print ('I am also a cube with dimensions %.2f, %.2f, %.2f.' % (self.length, self.width, self.height)) 


class polySphere(shape):
    def __init__(self, name, radius):
        shape.__init__(self,name) #pass self here

        self.radius = radius

    def printMyself(self):
     shape.printMyself(self)
     print ('I am also a sphere with dimensions of %.2f.' % (self.radius)) #use self.radius here

cube1 = polyCube('firstCube', 2.0, 1.0, 3.0)
cube2 = polyCube('secondCube', 3.0, 3.0, 3.0)
sphere1 = polySphere('firstSphere', 2.2)
sphere2 = polySphere('secondSphere', 3.5)
shape1 = shape('myShape')
cube1.printMyself()
cube2.printMyself()
sphere1.printMyself()
sphere2.printMyself()
</snippet></ROW><ROW><id>11209459</id><snippet>print urllib2.urlopen("%s?%s" % (url,urllib.urlencode({'nothing':12345}))).read()
</snippet></ROW><ROW><id>11209584</id><snippet>Image.frombuffer</snippet></ROW><ROW><id>11209584</id><snippet>Image.frombuffer</snippet></ROW><ROW><id>11209584</id><snippet>buffer</snippet></ROW><ROW><id>11209584</id><snippet>frombuffer</snippet></ROW><ROW><id>11209584</id><snippet>fromstring</snippet></ROW><ROW><id>11209584</id><snippet>Image._MAPMODES</snippet></ROW><ROW><id>11209785</id><snippet>print anchor
</snippet></ROW><ROW><id>11209785</id><snippet>print anchor[0].text
</snippet></ROW><ROW><id>11209906</id><snippet># copied from 
# http://matplotlib.sourceforge.net/mpl_examples/mplot3d/wire3d_demo.py

from mpl_toolkits.mplot3d import axes3d
import matplotlib.pyplot as plt
import numpy as np

fig = plt.figure()
ax = fig.add_subplot(111, projection='3d')
X, Y, Z = axes3d.get_test_data(0.05)
ax.plot_wireframe(X, Y, Z, rstride=10, cstride=10)

plt.show()
</snippet></ROW><ROW><id>11209938</id><snippet>+(+a)</snippet></ROW><ROW><id>11209938</id><snippet>-(-a)</snippet></ROW><ROW><id>11209939</id><snippet>i=[1,2,3,4]
for i in i:
    ...
</snippet></ROW><ROW><id>11209939</id><snippet>for i in (1,2,3,4):
    ...
</snippet></ROW><ROW><id>11209939</id><snippet>for i in xrange(1,5): #range in python3.x
    ...
</snippet></ROW><ROW><id>11209939</id><snippet>strvars=[]
boxes=[]
for i in xrange(1,5):
    svar=StringVar()
    box=Entry(choice_frame, bg='white', borderwidth=0, width=0, textvariable=svar)
    box.grid(row=1, column=i-1, sticky="ew", padx=1, pady=1)
    svar.trace('w',numberwritten)
    #If you want to pass the box associated with the stringvar, you can do this:
    #svar.trace('w',lambda a,b,c,box=box : numberwritten(box)) #box.get() get's the contents of an Entry too!
    strvars.append(svar)
    boxes.append(box)

number1,number2,number3,number4=strvars  #unpack stringvars 
box1,box2,box3,box4=boxes   #unpack boxes
</snippet></ROW><ROW><id>11209939</id><snippet>StringVar</snippet></ROW><ROW><id>11209939</id><snippet>boxes[0]</snippet></ROW><ROW><id>11209939</id><snippet>strvars[0]</snippet></ROW><ROW><id>11209939</id><snippet>def numberwritten(number):
    fg = number.get()
    print fg 

numbers = [StringVar() for i in xrange(4) ]  #Name available in global scope.
for i in numbers:
    i.trace('w',lambda a,b,c,n=i: numberwritten(n) )

# In separate definition def ChoiceBox(choice): (not full code under this def)
def ChoiceBox(choice):  

    for i in xrange(4):
        choice_title = Label(choice_frame, text='Value %g'% float(i+1), bg='white', borderwidth=0, width=0)
        choice_title.grid(row=0, column=column+i, sticky="nsew", padx=1, pady=1)

    boxes=[]
    for i in xrange(4):
        box=Entry(choice_frame,bg='white',borderwidth=0,textvariable=numbers[i])
        box.grid(row=1,column=i, sticky='ew', padx=1, pady=1
        boxes.append(box)

    box1,box2,box3,box4=boxes
</snippet></ROW><ROW><id>11209939</id><snippet>width=0</snippet></ROW><ROW><id>11210080</id><snippet>io.open()</snippet></ROW><ROW><id>11210080</id><snippet>open()</snippet></ROW><ROW><id>11210080</id><snippet>io.TextIO</snippet></ROW><ROW><id>11210080</id><snippet>ą</snippet></ROW><ROW><id>11210080</id><snippet>u'\u0105'</snippet></ROW><ROW><id>11210080</id><snippet>u'a\u0328'</snippet></ROW><ROW><id>11210301</id><snippet>zip</snippet></ROW><ROW><id>11210301</id><snippet>next()</snippet></ROW><ROW><id>11210301</id><snippet>gen</snippet></ROW><ROW><id>11210301</id><snippet>iter(range(3))</snippet></ROW><ROW><id>11210301</id><snippet>StopIteration</snippet></ROW><ROW><id>11210301</id><snippet>In [8]: zip(range(3), gen)
0
1
2
Out[8]: [(0, 0), (1, 1), (2, 2)]
</snippet></ROW><ROW><id>11210309</id><snippet>'error'</snippet></ROW><ROW><id>11210309</id><snippet>[e[i:] for i,e in
 ((e.find('error:'),e) for e in err.splitlines())
 if i != -1]
</snippet></ROW><ROW><id>11210309</id><snippet>e</snippet></ROW><ROW><id>11210309</id><snippet>re.findall('error:(.*)', err)
</snippet></ROW><ROW><id>11210309</id><snippet>error:</snippet></ROW><ROW><id>11210309</id><snippet>re.findall('error:.*', err)
</snippet></ROW><ROW><id>11210485</id><snippet>p.interact()
</snippet></ROW><ROW><id>11210485</id><snippet>p.expect(pexpect.EOF, timeout=None)
</snippet></ROW><ROW><id>11210485</id><snippet>output_lines =  p.before
output_lines_list = output_lines.split('\r\n')
for line in output_lines: print line
</snippet></ROW><ROW><id>11210485</id><snippet>p.logifile = sys.stdout</snippet></ROW><ROW><id>11210485</id><snippet>if i == 2:
        print 'Inside EOF block'
        if p.isalive():
            print '******************************************************'
            print '         Closing the process of Download !!!          '
            print '******************************************************\n\n'
            p.close()
</snippet></ROW><ROW><id>11210485</id><snippet>import getpass
getpass.getpass("please provide your password")
</snippet></ROW><ROW><id>11210636</id><snippet>file2</snippet></ROW><ROW><id>11210636</id><snippet>file2</snippet></ROW><ROW><id>11210636</id><snippet>file1</snippet></ROW><ROW><id>11210636</id><snippet>file2</snippet></ROW><ROW><id>11210636</id><snippet>file2=list(csv.reader(open(table2,'r')))
for row in file1:
     print row
     for prow in file2:
         print prow
</snippet></ROW><ROW><id>11210902</id><snippet>import subprocess
import os

def is_tool(name):
    try:
        devnull = open(os.devnull)
        subprocess.Popen([name], stdout=devnull, stderr=devnull).communicate()
    except OSError as e:
        if e.errno == os.errno.ENOENT:
            return False
    return True
</snippet></ROW><ROW><id>11211032</id><snippet>instance</snippet></ROW><ROW><id>11211032</id><snippet>Image()</snippet></ROW><ROW><id>11211032</id><snippet>albums</snippet></ROW><ROW><id>11211032</id><snippet>instance.albums.all()</snippet></ROW><ROW><id>11211032</id><snippet>Model</snippet></ROW><ROW><id>11211032</id><snippet>pk</snippet></ROW><ROW><id>11211032</id><snippet>upload_to()</snippet></ROW><ROW><id>11211032</id><snippet>post_save()</snippet></ROW><ROW><id>11211032</id><snippet>m2m_changed</snippet></ROW><ROW><id>11211032</id><snippet>instance.albums.all()</snippet></ROW><ROW><id>11211032</id><snippet>@receiver(m2m_changed, sender=Image.albums.through)
def save_file_on_m2m(sender, instance, action, **kwargs):
    if action == 'post_add' and hasattr(instance, _UNSAVED_FILEFIELD):
        instance.image = getattr(instance, _UNSAVED_FILEFIELD)
        instance.save()        
        instance.__dict__.pop(_UNSAVED_FILEFIELD)
</snippet></ROW><ROW><id>11211032</id><snippet>Image.albums</snippet></ROW><ROW><id>11211032</id><snippet>image</snippet></ROW><ROW><id>11211032</id><snippet>image</snippet></ROW><ROW><id>11211032</id><snippet>Image()</snippet></ROW><ROW><id>11211099</id><snippet>python -m tabnanny hisrel_split.py
</snippet></ROW><ROW><id>11211099</id><snippet>python -t hisrel_split.py
</snippet></ROW><ROW><id>11211108</id><snippet>r.content</snippet></ROW><ROW><id>11211108</id><snippet>r.text</snippet></ROW><ROW><id>11211181</id><snippet>import numpy
import multiprocessing

x = numpy.linspace(0,20,10000)
p = multiprocessing.Pool(processes=4)

print p.map(numpy.sqrt, x)
</snippet></ROW><ROW><id>11211181</id><snippet>timeit</snippet></ROW><ROW><id>11211181</id><snippet>% python -m timeit -s 'import numpy; x=numpy.linspace(0,20,10000)' 'prop=[]                                                                          
for i in numpy.arange(0,len(x)):
         prop.append(numpy.sqrt(x[i]))'
10 loops, best of 3: 31.3 msec per loop

% python -m timeit -s 'import numpy, multiprocessing; x=numpy.linspace(0,20,10000)
p = multiprocessing.Pool(processes=4)' 'l = p.map(numpy.sqrt, x)' 
10 loops, best of 3: 102 msec per loop
</snippet></ROW><ROW><id>11211181</id><snippet>l = numpy.sqrt(x)</snippet></ROW><ROW><id>11211181</id><snippet>% python -m timeit -s 'import numpy; x=numpy.linspace(0,20,10000)' 'l = numpy.sqrt(x)'
10000 loops, best of 3: 70.3 usec per loop
</snippet></ROW><ROW><id>11211312</id><snippet>from Encode.Ffmpeg import Ffmpeg
</snippet></ROW><ROW><id>11211851</id><snippet>from bisect import bisect_left
secondData[bisect_left(secondData, "8:33:00"):bisect_left(secondData, "8:34:00")]
</snippet></ROW><ROW><id>11211851</id><snippet>secondData</snippet></ROW><ROW><id>11211966</id><snippet>compilInstruction</snippet></ROW><ROW><id>11211966</id><snippet>for elt in AST.children:
    if elt.type!='fonctionDef':
        (env, compteurLabel)=compilInstruction(env, fichierSortie, elt, compteurLabel)
</snippet></ROW><ROW><id>11211966</id><snippet>compilInstruction</snippet></ROW><ROW><id>11211966</id><snippet>env</snippet></ROW><ROW><id>11211966</id><snippet>compteurLabel</snippet></ROW><ROW><id>11211966</id><snippet>env</snippet></ROW><ROW><id>11212056</id><snippet>search</snippet></ROW><ROW><id>11212056</id><snippet>match</snippet></ROW><ROW><id>11212056</id><snippet>m = p_oz.search(text)
</snippet></ROW><ROW><id>11212056</id><snippet>re.match</snippet></ROW><ROW><id>11212056</id><snippet>re.search</snippet></ROW><ROW><id>11212243</id><snippet>class BlogAdmin(admin.ModelAdmin):
    . . .
    search_fields = ['title','body']
    . . . 
</snippet></ROW><ROW><id>11212243</id><snippet>admin.site.register(Blog, BlogAdmin)
</snippet></ROW><ROW><id>11212243</id><snippet>from django.db import models
from blog.models import Blog
from django.contrib import admin

class CommentInline(admin.TabularInline):
    model = Comment

class BlogAdmin(admin.ModelAdmin):
    list_display = ('title','created','updated',)
    search_fields = ['title','body',]
    list_filter = ('Date Created','Date Updated',)
    inlines = [CommentInline,]

class CommentAdmin(admin.ModelAdmin):
    list_display = ('post','author','body_first_60','created','updated',)
    list_filter = ('Date Created','Date Updated',)

admin.site.register(Blog, BlogAdmin)
</snippet></ROW><ROW><id>11212243</id><snippet>from django.db import models

class Blog(models.Model):
    title = models.CharField(max_length=60)
    body = models.TextField()
    created = models.DateTimeField("Date Created")
    updated = models.DateTimeField("Date Updated")

    def __unicode__(self):
        return self.title

class Comment(models.Model):
    body = models.TextField()
    author = models.CharField(max_length=60)
    created = models.DateTimeField("Date Created")
    updated = models.DateTimeField("Date Updated")
    post = models.ForeignKey(Blog)

    def __unicode__(self):
        return self.body
</snippet></ROW><ROW><id>11212398</id><snippet>c=26</snippet></ROW><ROW><id>11212398</id><snippet>n_i</snippet></ROW><ROW><id>11212398</id><snippet>N</snippet></ROW><ROW><id>11212581</id><snippet>w</snippet></ROW><ROW><id>11212581</id><snippet>source</snippet></ROW><ROW><id>11212581</id><snippet>source</snippet></ROW><ROW><id>11212581</id><snippet>w</snippet></ROW><ROW><id>11212581</id><snippet>def reading(filename, source):
    with open(filename, 'rb') as st:
        source = pickle.loads(st.read())
    return source
w = reading(filename, w)
</snippet></ROW><ROW><id>11212581</id><snippet>source</snippet></ROW><ROW><id>11212581</id><snippet>def reading(filename):
    with open(filename, 'rb') as st:
        source = pickle.loads(st.read())
        return source

w = reading(filename)
</snippet></ROW><ROW><id>11212581</id><snippet>source</snippet></ROW><ROW><id>11212581</id><snippet>def reading(filename, source):
    with open(filename, 'rb') as st:
        source.update(pickle.loads(st.read()))

reading(filename, w)
</snippet></ROW><ROW><id>11212581</id><snippet>w</snippet></ROW><ROW><id>11212581</id><snippet>def reading(filename):
    global w
    with open(filename, 'rb') as st:
        w = pickle.loads(st.read())

reading(filename)
</snippet></ROW><ROW><id>11212630</id><snippet>if k2 in d.get(k1, {}):
    # do something
</snippet></ROW><ROW><id>11212630</id><snippet>in</snippet></ROW><ROW><id>11212630</id><snippet>if d.get(k1, {}).has_key(k2):
    # do something
</snippet></ROW><ROW><id>11212630</id><snippet>has_key</snippet></ROW><ROW><id>11212883</id><snippet>AssociationProxy</snippet></ROW><ROW><id>11212883</id><snippet>DictProxy</snippet></ROW><ROW><id>11212883</id><snippet>class DictProxy(object):
    def __init__(self, col, keyattr, valattr = None):
        self.obj = None
        self.col = col
        self.keyattr = keyattr
        self.valattr = valattr

    def __get__(self, obj, class_):
        self.obj = obj
        return self

    def __repr__(self):
        outdict = {}
        for k, v in getattr(self.obj, self.col).iteritems():
            if not k is None:
                if self.valattr == None:
                    outdict[getattr(k, self.keyattr)] = v
                elif v is not None:
                    outdict[getattr(k, self.keyattr)] = getattr(v, self.valattr)
                else:
                    outdict[getattr(k, self.keyattr)] = None
        return repr(outdict)

    def __getitem__(self, key):
        keyobj = [obj for obj in getattr(self.obj, self.col) if getattr(obj, self.keyattr) == key]
        if not len(keyobj):
            return None
        if self.valattr == None:
            return getattr(self.obj, self.col)[keyobj[0]]
        else:
            return getattr(getattr(self.obj, self.col)[keyobj[0]], self.valattr)

    def __contains__(self, key):
        return len([obj for obj in getattr(self.obj, self.col) if getattr(obj, self.keyattr) == key]) != 0

def dict_proxy(*arg):
    return DictProxy(*arg)
</snippet></ROW><ROW><id>11212883</id><snippet>class Event(ManagerBase):
    """Defines an event."""

    __tablename__ = 'eventing_events'

    id = Column(Integer, primary_key=True)
    device_id = Column(Integer, ForeignKey(EventingDevice.id), nullable=False)
    device = relation(EventingDevice)
    type_id = Column(Integer, ForeignKey(EventType.id), nullable=False)
    type = relation(EventType)
    datetime = Column(DateTime, nullable=False)
    summary = Column(String(500))

    fields = dict_proxy("field_values", "name", "value")
</snippet></ROW><ROW><id>11212883</id><snippet>fields</snippet></ROW><ROW><id>11212883</id><snippet>Event</snippet></ROW><ROW><id>11212883</id><snippet>EventFieldValue.name</snippet></ROW><ROW><id>11212883</id><snippet>EventFieldValue</snippet></ROW><ROW><id>11212883</id><snippet>backref</snippet></ROW><ROW><id>11212883</id><snippet>__setitem__</snippet></ROW><ROW><id>11212895</id><snippet>    video_list = fnmatch.filter(files, pattern)
</snippet></ROW><ROW><id>11212895</id><snippet>    if host.path.isfile(video_list): # check whether the file is valid 
</snippet></ROW><ROW><id>11212895</id><snippet>host.path.isfile()</snippet></ROW><ROW><id>11212895</id><snippet>video_list</snippet></ROW><ROW><id>11212895</id><snippet>host.path.isfile()</snippet></ROW><ROW><id>11212895</id><snippet>    import os.path

    for fname in video_list:
        fpath = host.path.join(root, fname)
        if host.path.isfile(fpath):
            host.download(fpath, os.path.join(dir_dest, fname), 'b')
</snippet></ROW><ROW><id>11212895</id><snippet>host.path.join()</snippet></ROW><ROW><id>11212895</id><snippet>os.path.join()</snippet></ROW><ROW><id>11212895</id><snippet>host.lstat()</snippet></ROW><ROW><id>11212895</id><snippet>host.stat()</snippet></ROW><ROW><id>11212895</id><snippet>host.close()</snippet></ROW><ROW><id>11212895</id><snippet>host</snippet></ROW><ROW><id>11212895</id><snippet>with</snippet></ROW><ROW><id>11212895</id><snippet>host.close()</snippet></ROW><ROW><id>11212895</id><snippet>    with ftputil.FTPHost('xxx.xxx','xxx','xxxxx') as host: # ftp host info
        recursive = host.walk(...)
        ...
</snippet></ROW><ROW><id>11212903</id><snippet>line[:-1] + '\n'</snippet></ROW><ROW><id>11212912</id><snippet>python setup.py build --fcompiler=ifort
sudo python setup.py install
</snippet></ROW><ROW><id>11213076</id><snippet>import Image
img = Image.open("Chess_Board.bmp")
</snippet></ROW><ROW><id>11213076</id><snippet>quantized = img.convert('P', palette=Image.ADAPTIVE, colors=4)
</snippet></ROW><ROW><id>11213076</id><snippet>import numpy as np
a = np.array(quantized)
blockLengthX = np.argmin(a[0]==a[0,0])
blockLengthY = np.argmin(a[:,0]==a[0,0])
</snippet></ROW><ROW><id>11213076</id><snippet>result = a[::blockLengthX, ::blockLengthY]
</snippet></ROW><ROW><id>11213076</id><snippet>import Image
import numpy as np
img = Image.open("Chess_Board.bmp")
a = np.array(img.convert('P', palette=Image.ADAPTIVE, colors=4))
blockLengthX = np.argmin(a[0]==a[0,0])
blockLengthY = np.argmin(a[:,0]==a[0,0])
result = a[::blockLengthX, ::blockLengthY]
</snippet></ROW><ROW><id>11213183</id><snippet>set(list(l)[0])
</snippet></ROW><ROW><id>11213183</id><snippet>list(l)</snippet></ROW><ROW><id>11213183</id><snippet>l</snippet></ROW><ROW><id>11213183</id><snippet>[0]</snippet></ROW><ROW><id>11213183</id><snippet>(17,14,13)</snippet></ROW><ROW><id>11213183</id><snippet>set((17,14,13))</snippet></ROW><ROW><id>11213183</id><snippet>set((10,12,10))</snippet></ROW><ROW><id>11213183</id><snippet>{10,12}</snippet></ROW><ROW><id>11213183</id><snippet>&gt;&gt;&gt; l=[(17,14,13),(19,17,2),(22,11,7),(22,13,1),(23,10,5),(23,11,2),(25,5,2)]
&gt;&gt;&gt; list(l)[0]
(17, 14, 13)
&gt;&gt;&gt; set(list(l)[0])
{17, 13, 14}
</snippet></ROW><ROW><id>11213495</id><snippet>Education::Teacher</snippet></ROW><ROW><id>11213495</id><snippet>Education::TeacherUtils</snippet></ROW><ROW><id>11213495</id><snippet>Teacher</snippet></ROW><ROW><id>11213495</id><snippet>Teacher.cpp</snippet></ROW><ROW><id>11213495</id><snippet>Education::Utils::Teacher</snippet></ROW><ROW><id>11213495</id><snippet>utils</snippet></ROW><ROW><id>11213495</id><snippet>Education::Utils::Teacher</snippet></ROW><ROW><id>11213495</id><snippet>Education::Teacher</snippet></ROW><ROW><id>11213495</id><snippet>utils</snippet></ROW><ROW><id>11213555</id><snippet>val1 = 22.0
val2 = 7.0
whole,frac = divmod(val1,val2)
frac = frac/val1
</snippet></ROW><ROW><id>11213555</id><snippet>val = 22.0/7.0
strval = str(val)
head,tail = strval.split(".")
whole = float(head)
frac = float("."+tail)
</snippet></ROW><ROW><id>11213555</id><snippet>&gt;&gt;&gt; frac
0.14285714286000001
&gt;&gt;&gt; whole
3.0
</snippet></ROW><ROW><id>11213568</id><snippet>&gt;&gt;&gt; list("Pla\net")
['P', 'l', 'a', '\n', 'e', 't']
&gt;&gt;&gt; list("Plan\et")
['P', 'l', 'a', 'n', '\\', 'e', 't']
</snippet></ROW><ROW><id>11213568</id><snippet>\n</snippet></ROW><ROW><id>11213568</id><snippet>\e</snippet></ROW><ROW><id>11213568</id><snippet>&gt;&gt;&gt; list("Pla\\net")
['P', 'l', 'a', '\\', 'n', 'e', 't']
&gt;&gt;&gt; list(r"Pla\net")
['P', 'l', 'a', '\\', 'n', 'e', 't']
</snippet></ROW><ROW><id>11213780</id><snippet>session.expunge(obj1)
</snippet></ROW><ROW><id>11213780</id><snippet>session2.add(obj1)
</snippet></ROW><ROW><id>11213780</id><snippet>session2.merge(obj1)
</snippet></ROW><ROW><id>11213836</id><snippet>request.POST</snippet></ROW><ROW><id>11213836</id><snippet>contents = request.POST.keys()[0] + "=" + request.POST.values()[0]
</snippet></ROW><ROW><id>11213874</id><snippet>import pylab
import numpy as np

x = [[1,2],[2,1]]

fig = pylab.figure()

axes_list = []
table_list = []

for i in xrange(5):
    axes_list.append( fig.add_subplot(2,3,i+1) )
    axes_list[i].set_xticks([])
    axes_list[i].set_yticks([])
    axes_list[i].set_frame_on(False)
    table_list.append(pylab.table(cellText=x,colLabels = ['col']*2,rowLabels=['row']*2,colWidths = [0.3]*2,loc='center'))

pylab.savefig('my_fig.pdf')
pylab.show()
</snippet></ROW><ROW><id>11213874</id><snippet># Specify a title for the plot
axes_list[i].set_title('test')

# Specify the axes size and position
axes_list[i].set_position([left, bottom, width, height])

# The affect of the above set_position can be seen by turning the axes frame on, like so:
axes_list[i].set_frame_on(True)
</snippet></ROW><ROW><id>11214076</id><snippet>zip</snippet></ROW><ROW><id>11214076</id><snippet>for row in zip(file1, file2, file3, file4):
    # output the 4 column values in row
</snippet></ROW><ROW><id>11214112</id><snippet>def is_doublespace_separated(input_string):
    return '  '.join(input_string.split()) == input_string.strip()
</snippet></ROW><ROW><id>11214112</id><snippet>string.split</snippet></ROW><ROW><id>11214112</id><snippet>string.join</snippet></ROW><ROW><id>11214112</id><snippet>string</snippet></ROW><ROW><id>11214112</id><snippet>'  '</snippet></ROW><ROW><id>11214115</id><snippet>blocks</snippet></ROW><ROW><id>11214115</id><snippet>&lt;!DOCTYPE HTML&gt;
&lt;html lang="en"&gt;

&lt;head&gt;
    &lt;title&gt;Base.Html&lt;/title&gt;
    {% load static %}

    {% block css %}{% endblock %}
    &lt;link rel="stylesheet"  type="text/css" href="{% static "CSS/base.css" %}" /&gt;
&lt;/head&gt;

&lt;body&gt;

...ect
</snippet></ROW><ROW><id>11214115</id><snippet>&lt;!-- extending works --&gt;
{% extends "Base.html" %} 

{% block css %}
{% load static %}
&lt;link rel="stylesheet"  type="text/css" href="{% static "CSS/speakers.css" %}" /&gt;
{% endblock %}

{% block currentpage_content %}
&lt;h2&gt;Guest speakers at the event&lt;/h2&gt;

&lt;p&gt; This text would be red if speakers.css was applying properly &lt;/p&gt;
...ect
</snippet></ROW><ROW><id>11214168</id><snippet>min_periods</snippet></ROW><ROW><id>11214300</id><snippet>(x, y, z)</snippet></ROW><ROW><id>11214300</id><snippet>z</snippet></ROW><ROW><id>11214391</id><snippet>import wx

########################################################################
class MyPanel(wx.Panel):
    """"""

    #----------------------------------------------------------------------
    def __init__(self, parent):
        """Constructor"""
        wx.Panel.__init__(self, parent)

        self.mainSizer = wx.BoxSizer(wx.VERTICAL)
        self.createControls()
        self.SetSizer(self.mainSizer)

    #----------------------------------------------------------------------
    def createControls(self):
        """"""
        myDict = {"var1":"co-eff1", "var2":"co-eff2",
                  "var3":"co-eff3", "var4":"co-eff4",
                  "var5":"co-eff5", "var6":"co-eff6",
                  "var7":"co-eff7", "var8":"co-eff8",
                  "var9":"co-eff9", "var10":"co-eff10",
                  "var11":"co-eff11", "var12":"co-eff12",
                  "var13":"co-eff13"}
        for key in myDict:
            lblOne = wx.StaticText(self, label=key)
            lblTwo = wx.StaticText(self, label=myDict[key])

            sizer = wx.BoxSizer(wx.HORIZONTAL)
            sizer.Add(lblOne, 0, wx.ALL, 5)
            sizer.Add(lblTwo, 0, wx.ALL, 5)
            self.mainSizer.Add(sizer)

########################################################################
class MyFrame(wx.Frame):
    """"""

    #----------------------------------------------------------------------
    def __init__(self):
        """Constructor"""
        wx.Frame.__init__(self, None, title="Frame Example",
                          size=(400,400))
        panel = MyPanel(self)
        self.Show()

if __name__ == "__main__":
    app = wx.App(False)
    frame = MyFrame()
    app.MainLoop()
</snippet></ROW><ROW><id>11214403</id><snippet>__init__</snippet></ROW><ROW><id>11214403</id><snippet>logs = map(LogFile, lognames)
</snippet></ROW><ROW><id>11214403</id><snippet>def LogFile(filepath):
    class _LogFile:
        def __init__(self, path):
            ...
    return _LogFile(filepath)
</snippet></ROW><ROW><id>11214815</id><snippet>h5repack</snippet></ROW><ROW><id>11214815</id><snippet>ptrepack</snippet></ROW><ROW><id>11214815</id><snippet>h5repack</snippet></ROW><ROW><id>11214821</id><snippet>inverse(f, delta)</snippet></ROW><ROW><id>11214821</id><snippet>def inverse(f, delta=1e-5):
    ...
    def newton(y, iters=15):
        guess = float(y)/2
        ...
    return newton
</snippet></ROW><ROW><id>11214821</id><snippet>guess = 1
</snippet></ROW><ROW><id>11214821</id><snippet>low, high = 0, float(y)
</snippet></ROW><ROW><id>11214821</id><snippet>find_bounds</snippet></ROW><ROW><id>11214915</id><snippet>proceed_button.Bind(wx.EVT_BUTTON, self.process_auth_tokens)
</snippet></ROW><ROW><id>11214915</id><snippet>process_auth_tokens</snippet></ROW><ROW><id>11215117</id><snippet>f = Figure(figsize=(15,9))
</snippet></ROW><ROW><id>11215316</id><snippet>unquote</snippet></ROW><ROW><id>11215316</id><snippet>urllib</snippet></ROW><ROW><id>11215316</id><snippet>&gt;&gt;&gt; s = '/path/to/my/handler/?action=query&amp;id=112&amp;type=vca&amp;info=ch%3D0%26type%3Devent%26ev46[sts%3Dbegin'
&gt;&gt;&gt; import urllib
&gt;&gt;&gt; urllib.unquote(s)
'/path/to/my/handler/?action=query&amp;id=112&amp;type=vca&amp;info=ch=0&amp;type=event&amp;ev46[sts=begin'
</snippet></ROW><ROW><id>11215316</id><snippet>unquote()</snippet></ROW><ROW><id>11215316</id><snippet>HttpRequest.body</snippet></ROW><ROW><id>11215316</id><snippet>QueryDict</snippet></ROW><ROW><id>11215478</id><snippet>C:\Python27\scripts\easy_install pyopengl
</snippet></ROW><ROW><id>11215495</id><snippet>"True"</snippet></ROW><ROW><id>11215495</id><snippet>{% if is_true == True %}
</snippet></ROW><ROW><id>11215495</id><snippet>{% if is_true %}
</snippet></ROW><ROW><id>11215495</id><snippet>"True"</snippet></ROW><ROW><id>11215495</id><snippet>True</snippet></ROW><ROW><id>11215495</id><snippet>"True"</snippet></ROW><ROW><id>11215495</id><snippet>else</snippet></ROW><ROW><id>11215495</id><snippet>{% if True == "True" %}
    &lt;h2&gt;Say True&lt;/h2&gt;
{% else %}                     # You will end up here
    &lt;h2&gt; False &lt;/h2&gt;
{% endif %}
</snippet></ROW><ROW><id>11215533</id><snippet>if sys.platform != 'win32':
    ...
</snippet></ROW><ROW><id>11215577</id><snippet>class countcalls(object):

    def __init__(self, f):
        self._f = f
        self._numcalls = 0

    def __call__(self, *args, **kwargs):
        self._numcalls += 1
        return self._f(*args, **kwargs)

    def count(self):
        return self._numcalls

@countcalls
def f():
    print 'f called'

f()
f()
f()
print f.count() 

# output:
#   f called
#   f called
#   f called
#   3
</snippet></ROW><ROW><id>11215577</id><snippet>@countcalls
def f():
    print 'f called'
</snippet></ROW><ROW><id>11215577</id><snippet>def f():
    print 'f called'
f = countcalls(f)
</snippet></ROW><ROW><id>11215577</id><snippet>_f</snippet></ROW><ROW><id>11215577</id><snippet>f</snippet></ROW><ROW><id>11215577</id><snippet>countcalls</snippet></ROW><ROW><id>11215577</id><snippet>f(...)</snippet></ROW><ROW><id>11215577</id><snippet>f.__call__(...)</snippet></ROW><ROW><id>11215577</id><snippet>()</snippet></ROW><ROW><id>11215577</id><snippet>f</snippet></ROW><ROW><id>11215577</id><snippet>    def __call__(self, *args, **kwargs):
        self._numcalls += 1
        return self._f(*args, **kwargs)
</snippet></ROW><ROW><id>11215577</id><snippet>*args</snippet></ROW><ROW><id>11215577</id><snippet>**kwargs</snippet></ROW><ROW><id>11215577</id><snippet>&gt;&gt;&gt; def f(*args): print args
... 
&gt;&gt;&gt; f(1, 2)
(1, 2)
&gt;&gt;&gt; f()
()
&gt;&gt;&gt; def add(a, b): return a + b
... 
&gt;&gt;&gt; add(*[4, 3])
7
&gt;&gt;&gt; add(**{'b': 5, 'a': 9})
14
</snippet></ROW><ROW><id>11215577</id><snippet>def f(*args, **kwargs): return g(*args, **kwargs)</snippet></ROW><ROW><id>11215577</id><snippet>__call__</snippet></ROW><ROW><id>11215577</id><snippet>f</snippet></ROW><ROW><id>11215577</id><snippet>@dec</snippet></ROW><ROW><id>11215577</id><snippet>def f(...): ...</snippet></ROW><ROW><id>11215577</id><snippet>def f(...): ...</snippet></ROW><ROW><id>11215577</id><snippet>f = dec(f)</snippet></ROW><ROW><id>11215839</id><snippet>def load_workbook(filename, use_iterators=False):        
    if isinstance(filename, file):
        # fileobject must have been opened with 'rb' flag
        # it is required by zipfile
        if 'b' not in filename.mode:
            raise OpenModeError("File-object must be opened in binary mode")

    try:
        archive = ZipFile(filename, 'r', ZIP_DEFLATED)
    except (BadZipfile, RuntimeError, IOError, ValueError), e:
        raise InvalidFileException(unicode(e))
    wb = Workbook()

    if use_iterators:
        wb._set_optimized_read()

    try:
        _load_workbook(wb, archive, filename, use_iterators)
    except KeyError, e:
        raise InvalidFileException(unicode(e))
    finally:
        archive.close()
    return wb
</snippet></ROW><ROW><id>11215839</id><snippet>  def save(self, filename):
    """Write data into the archive."""
    archive = ZipFile(filename, 'w', ZIP_DEFLATED)
    self.write_data(archive)
    archive.close()
</snippet></ROW><ROW><id>11215839</id><snippet>wb.save(filename = dest_filename)</snippet></ROW><ROW><id>11215839</id><snippet>handled automatically</snippet></ROW><ROW><id>11215839</id><snippet>class Workbook(object):</snippet></ROW><ROW><id>11215839</id><snippet>__del__</snippet></ROW><ROW><id>11215839</id><snippet>1.5.5</snippet></ROW><ROW><id>11215839</id><snippet>1.5.8</snippet></ROW><ROW><id>11215911</id><snippet>SQLITE_BUSY</snippet></ROW><ROW><id>11215917</id><snippet>__lt__</snippet></ROW><ROW><id>11215917</id><snippet>__gt__</snippet></ROW><ROW><id>11215917</id><snippet>class Foo:
    def __init__ (self, a, b):
        self.a = a
        self.b = b

    def __lt__ (self, other):
        if self.a == other.a:
            return self.b &lt; other.b
        return self.a &lt; other.b

    def __gt__ (self, other):
        return other.__lt__(self)

    def __eq__ (self, other):
        return self.a == other.b and self.b == other.b

    def __ne__ (self, other):
        return not self.__eq__(other)
</snippet></ROW><ROW><id>11215917</id><snippet>total_ordering</snippet></ROW><ROW><id>11215917</id><snippet>@functools.total_ordering
class Foo:
    def __init__ (self, a, b):
        self.a = a
        self.b = b

    def __lt__ (self, other):
        if self.a == other.a:
            return self.b &lt; other.b
        return self.a &lt; other.b

    def __eq__ (self, other):
        return self.a == other.b and self.b == other.b
</snippet></ROW><ROW><id>11216084</id><snippet>dCell.push(my text);
</snippet></ROW><ROW><id>11216084</id><snippet>dCell.push('my text');
</snippet></ROW><ROW><id>11216104</id><snippet>write(2)</snippet></ROW><ROW><id>11216104</id><snippet>socket.sendall</snippet></ROW><ROW><id>11216104</id><snippet>write(2)</snippet></ROW><ROW><id>11216104</id><snippet>socket.sendall</snippet></ROW><ROW><id>11216104</id><snippet>write(2)</snippet></ROW><ROW><id>11216418</id><snippet>$.post()</snippet></ROW><ROW><id>11216573</id><snippet>def encoding(val):
    if isinstance(val, unicode):
        return val.encode('utf-8')
    else:
        return str(val)


for id, val in mydict.items():
    data = dict(reduce(lambda x, y: x+y, [v.items() for v in val]) + [('id', id)])
    sorted_keys = sorted(map(str, data.keys()))
    sorted_vals = map(encoding, [v[k] for k in sorted_keys])  # sorted by keys
    format = ', '.join(["'%s'"] * len(sorted_vals))
    c.execute("insert into deldictmysql
               (%s) values (%s)" % (', '.join(sorted_keys), format), sorted_vals)
</snippet></ROW><ROW><id>11216639</id><snippet>MyEnumBaseClass</snippet></ROW><ROW><id>11216639</id><snippet>MyEnumClass</snippet></ROW><ROW><id>11216639</id><snippet>MyEnumClass</snippet></ROW><ROW><id>11216639</id><snippet>class MyEnumClass(object):
    def __init__(self, value, description, ui = None):
        self.value = value
        self.description = description
</snippet></ROW><ROW><id>11216639</id><snippet>MyEnumClassConstants</snippet></ROW><ROW><id>11216639</id><snippet>MyEnums</snippet></ROW><ROW><id>11216639</id><snippet>getEnum()</snippet></ROW><ROW><id>11216639</id><snippet>def getEnum(value, itr):
    for enumObj in itr:
        if enumObj.value == value:
            return enumObj
    return None
</snippet></ROW><ROW><id>11216639</id><snippet>(
    ERROR1,
    ERROR2,
    ERROR3,
    ERROR4
) = range(1, 5)
</snippet></ROW><ROW><id>11216639</id><snippet>_enums = (
    ErrorEnum1,
    ErrorEnum2,
    ErrorEnum3,
    ErrorEnum4
) = (
    MyEnumClass(ERROR1, "ERROR1"),
    MyEnumClass(ERROR2, "ERROR2"),
    MyEnumClass(ERROR3, "ERROR3"),
    MyEnumClass(ERROR4, "ERROR4")
)
</snippet></ROW><ROW><id>11216639</id><snippet>_enums</snippet></ROW><ROW><id>11216639</id><snippet>getEnum()</snippet></ROW><ROW><id>11216639</id><snippet>def getCount():
    return len(_enums)

def getList():
    return _enums
</snippet></ROW><ROW><id>11216639</id><snippet>getEnum()</snippet></ROW><ROW><id>11216639</id><snippet>def getEnum(value, itr=_enums):
    for enumObj in itr:
        if enumObj.value == value:
            return enumObj
    return None
</snippet></ROW><ROW><id>11216639</id><snippet>__all__</snippet></ROW><ROW><id>11216639</id><snippet>_enums</snippet></ROW><ROW><id>11216639</id><snippet>_</snippet></ROW><ROW><id>11216639</id><snippet>__all__ = ["MyEnumClass", "ERROR1", "ERROR2", "ERROR3", "ERROR4",
        "ErrorEnum1", "ErrorEnum2", "ErrorEnum3", "ErrorEnum4",
        "getCount", "getList", "getEnum"]
</snippet></ROW><ROW><id>11216639</id><snippet>MyEnumClass</snippet></ROW><ROW><id>11216639</id><snippet>__all__</snippet></ROW><ROW><id>11216639</id><snippet>__all__ = ["MyEnumClass", "ERROR1", "ERROR2", "ERROR3", "ERROR4",
        "ErrorEnum1", "ErrorEnum2", "ErrorEnum3", "ErrorEnum4",
        "getCount", "getList", "getEnum"]

class MyEnumClass(object):
    def __init__(self, value, description, ui = None):
        self.value = value
        self.description = description

(
    ERROR1,
    ERROR2,
    ERROR3,
    ERROR4
) = range(1, 5)


_enums = (
    ErrorEnum1,
    ErrorEnum2,
    ErrorEnum3,
    ErrorEnum4
) = (
    MyEnumClass(ERROR1, "ERROR1"),
    MyEnumClass(ERROR2, "ERROR2"),
    MyEnumClass(ERROR3, "ERROR3"),
    MyEnumClass(ERROR4, "ERROR4")
)

def getCount():
    return len(_enums)

def getList():
    return _enums

def getEnum(value, itr=_enums):
    for enumObj in itr:
        if enumObj.value == value:
            return enumObj
    return None
</snippet></ROW><ROW><id>11216639</id><snippet>ERROR1</snippet></ROW><ROW><id>11216639</id><snippet>ERROR2</snippet></ROW><ROW><id>11216792</id><snippet>import multiprocessing as mp
import time

def build(q):
    print 'I build things'
    time.sleep(5)
    q.put(42)
    return 

def run(q):
    while True:
        num = q.get()
        if num == 42:
            print 'I run after build is done'
            return
        else:
            print 'not the right number...'

    def get_number():
        return 41

if __name__ == '__main__':
    queue = mp.Queue()

    run_p = mp.Process(name='run process', target=run, args=(queue,))
    build_p = mp.Process(name='build process', target=build, args=(queue,))

    run_p.start()
    build_p.start()

    print 'waiting on build'
    build_p.join()
    print 'waiting on run'
    run_p.join()
    queue.close()
    print 'waiting on queue'
    queue.join_thread()
    print 'done'
</snippet></ROW><ROW><id>11216825</id><snippet>get_focus()</snippet></ROW><ROW><id>11216868</id><snippet>class User():
    def setup(self):
        self.listA = []                          # instance variable
        self.listB = []                          # instance variable
        for i in range(1):
            self.listA.append('a')
            self.listB.append('b')
</snippet></ROW><ROW><id>11216998</id><snippet>&lt;presence to='99999_myroom@chat.hipchat.com/my_nickname'&gt;
  &lt;x xmlns='http://jabber.org/protocol/muc'/&gt;
&lt;/presence&gt;
</snippet></ROW><ROW><id>11217062</id><snippet>s = "[0], [1], [2], [3]"

print s.replace(',', ' |')

# Output:
# [0] | [1] | [2] | [3]
</snippet></ROW><ROW><id>11217062</id><snippet>s = "[0], [1], [2], [3]"

s = s.split(',')
s = map(str.strip, s)
s = " | ".join(s)

print s
# Output:
# [0] | [1] | [2] | [3]
</snippet></ROW><ROW><id>11217184</id><snippet>result</snippet></ROW><ROW><id>11217184</id><snippet>result</snippet></ROW><ROW><id>11217184</id><snippet>build_substrings("a")</snippet></ROW><ROW><id>11217184</id><snippet>result</snippet></ROW><ROW><id>11217184</id><snippet>build_substrings("ab")</snippet></ROW><ROW><id>11217184</id><snippet>result</snippet></ROW><ROW><id>11217196</id><snippet>Loop()</snippet></ROW><ROW><id>11217409</id><snippet>f.seek(0)
print f.readline()
&gt;&gt;&gt; Hello, world!

f.seek(4)
print f.readline()
&gt;&gt;&gt; o, world!
</snippet></ROW><ROW><id>11217803</id><snippet>import matplotlib.pyplot as plt
import math
x = [1,2,3,4,5]
y = [1000, 1002, 1001, 1003, 1005]
low = min(y)
high = max(y)
plt.ylim([math.ceil(low-0.5*(high-low)), math.ceil(high+0.5*(high-low))])
plt.bar(x,y) 
plt.show()
</snippet></ROW><ROW><id>11218055</id><snippet>bufsize=1</snippet></ROW><ROW><id>11218055</id><snippet>Popen(["process"], stdout=PIPE, stderr=PIPE, bufsize=1)
</snippet></ROW><ROW><id>11218083</id><snippet>equ2 = ['+', '10', '+', '2', '-', '2', '+', '4']
flag4 = list()

chgsgn = dict([('+','-'), ('-','+')])

while len(equ2):
    sgn = equ2.pop(0)
    num = equ2.pop(0)

    flag4.append(chgsgn[sgn] + num)


print flag4
</snippet></ROW><ROW><id>11218083</id><snippet>equ2</snippet></ROW><ROW><id>11218083</id><snippet>chgsgn = dict([('+','-'), ('-','+')])
flag4 = [chgsgn[sgn]+num for (sgn,num) in zip(*[iter(equ2)]*2)]
print flag4
</snippet></ROW><ROW><id>11218172</id><snippet>sage: install_package("wxPython")
</snippet></ROW><ROW><id>11218172</id><snippet>checking for GTK+ - version &gt;= 2.0.0... no
*** Could not run GTK+ test program, checking why...
*** The test program failed to compile or link. See the file config.log for the
*** exact error that occured. This usually means GTK+ is incorrectly installed.
configure: error:
The development files for GTK+ were not found. For GTK+ 2, please
ensure that pkg-config is in the path and that gtk+-2.0.pc is
installed. For GTK+ 1.2 please check that gtk-config is in the path,
and that the version is 1.2.3 or above. Also check that the
libraries returned by 'pkg-config gtk+-2.0 --libs' or 'gtk-config
--libs' are in the LD_LIBRARY_PATH or equivalent.
Error configure wx widgets.

real    0m13.972s
user    0m2.791s
sys 0m5.232s
************************************************************************
Error installing package wxPython-2.8.7.1
************************************************************************
</snippet></ROW><ROW><id>11218281</id><snippet>prototype = c.PYFUNCTYPE(    
    c.c_char_p,                
    c.py_object
)

func = prototype(('MyFunction', libTest))

func( MyClass )
</snippet></ROW><ROW><id>11218370</id><snippet>import samples.lightIntensity as lightIntensity
lightIntensity.changelightIntensity(1.2)
</snippet></ROW><ROW><id>11218370</id><snippet>lightIntensity.py</snippet></ROW><ROW><id>11218370</id><snippet>import lightIntensity</snippet></ROW><ROW><id>11218370</id><snippet>lightIntensity.changelightIntensity(1.2)</snippet></ROW><ROW><id>11218370</id><snippet>import</snippet></ROW><ROW><id>11218370</id><snippet>changelightIntensity(1.2)</snippet></ROW><ROW><id>11218504</id><snippet>import pickle

a = {'hello': 'world'}

with open('filename.pickle', 'wb') as handle:
  pickle.dump(a, handle)

with open('filename.pickle', 'rb') as handle:
  b = pickle.load(handle)

print a == b
</snippet></ROW><ROW><id>11218595</id><snippet>name = request.forms.get('name')
data = request.files.get('data')
raw = ""
if name and data.file:
    while True:
        datachunk = data.file.read(1024)
        if not datachunk:
            break
        raw = raw + datachunk

    filename = data.filename
    return "Hello %s! You uploaded %s (%d bytes)." % (name, filename, len(raw))
</snippet></ROW><ROW><id>11218758</id><snippet>join()</snippet></ROW><ROW><id>11218758</id><snippet>join()</snippet></ROW><ROW><id>11218758</id><snippet>import multiprocessing as mp
import time

def build():
    print 'I build things'
    for i in range(10):
        with open('testfile{}.txt'.format(i), 'w+') as f:
            f.write('')
            time.sleep(5)


def main():
    build_p = mp.Process(name='build process', target=build)
    build_p.start()
    return 18

if __name__ == '__main__':

    v = main()
    print v
    print 'done'
</snippet></ROW><ROW><id>11218758</id><snippet>&gt; python mptest.py
18
done
I build things
</snippet></ROW><ROW><id>11219097</id><snippet>name_pairs = set((i['name'], i['last']) for i in lst)
if (d['name'], d['last']) not in name_pairs:
    lst.append(d)
</snippet></ROW><ROW><id>11219204</id><snippet>@</snippet></ROW><ROW><id>11219204</id><snippet>@foo
def bar():
    pass
</snippet></ROW><ROW><id>11219204</id><snippet>def bar():
    pass
bar = foo(bar)
</snippet></ROW><ROW><id>11219211</id><snippet>exec my_code in mymodule.__dict__
</snippet></ROW><ROW><id>11219211</id><snippet>import imp

my_code = '''
def a():
    return 3

def b():
    return 4 + a()
'''

mymodule = imp.new_module('mymodule')

exec my_code in mymodule.__dict__
print(mymodule.b())
</snippet></ROW><ROW><id>11219211</id><snippet>exec(my_code, mymodule.__dict__, mymodule.__dict__)
</snippet></ROW><ROW><id>11219372</id><snippet>apache.conf</snippet></ROW><ROW><id>11219372</id><snippet>SetEnv APPDATA 1.2.3.4.5
</snippet></ROW><ROW><id>11219445</id><snippet>import transaction

def redirect_to_trial(trans, obj=None, parent=None):
    if obj.id not in parent:
        request = getattr(obj, 'REQUEST', None)
        if request:
            trial_url = obj.__parent__.__parent__.absolute_url()
            request.response.redirect(trial_url)

@grok.subscribe(ISite, IObjectRemovedEvent)
def on_site_delete(obj, event):
    kwargs = dict(
        obj = obj,
        parent = event.oldParent,
    )
    transaction.get().addAfterCommitHook(redirect_to_trial, kws=kwargs)
</snippet></ROW><ROW><id>11219467</id><snippet>{% if action1 == "manage_companies" % }</snippet></ROW><ROW><id>11219467</id><snippet>{% if action1 == "manage_companies" %}</snippet></ROW><ROW><id>11219553</id><snippet>m = re.search('"([^"]*)"', a)
m.group(1)
</snippet></ROW><ROW><id>11219553</id><snippet>[^"]*</snippet></ROW><ROW><id>11219553</id><snippet>"</snippet></ROW><ROW><id>11219553</id><snippet>"a" bcd "e"
</snippet></ROW><ROW><id>11219623</id><snippet>rom scrapy.spider import BaseSpider
from scrapy.selector import HtmlXPathSelector
from scrapy.http import FormRequest, Request

from robots_immo.items import AnnonceItem

class ElyseAvenueSpider(BaseSpider):

    name = "elyse_avenue"
    allowed_domains = ["elyseavenue.com"] # i fixed this
    start_urls = ["http://www.elyseavenue.com/"] # i added this

    def parse(self, response):
        yield FormRequest.from_response(response, formname='moteurRecherche', formdata={'recherche_distance_km_0':'20', 'recherche_type_logement':'9'}, callback=self.parseAnnonces)

    def parseAnnonces(self, response):
        hxs = HtmlXPathSelector(response)
        annonces = hxs.select('//div[@id="contenuCentre"]/div[@class="blocVignetteBien"]')
        items = []
        for annonce in annonces:
            item = AnnonceItem()
            item['nom'] = annonce.select('span[contains(@class,"nomBienImmo")]/a/text()').extract()
            item['superficie'] = annonce.select('table//tr[2]/td[2]/span/text()').extract()
            item['prix'] = annonce.select('span[@class="prixVignette"]/span[1]/text()').extract()
            items.append(item)
        return items
</snippet></ROW><ROW><id>11219705</id><snippet>[...]
class datetime.datetime
A combination of a date and a time. Attributes: year, month, day, hour, 
minute, second, microsecond, and tzinfo.
[...]
</snippet></ROW><ROW><id>11219705</id><snippet>redemption_date</snippet></ROW><ROW><id>11219823</id><snippet>GetNumberOfEventLogRecords  Retrieves the number of records in the specified event log.
GetOldestEventLogRecord     Retrieves the absolute record number of the oldest record 
                            in the specified event log.
NotifyChangeEventLog        Enables an application to receive notification when an event
                            is written to the specified event log.

ReadEventLog                Reads a whole number of entries from the specified event log.
RegisterEventSource         Retrieves a registered handle to the specified event log.
</snippet></ROW><ROW><id>11219823</id><snippet>events = win32evtlog.ReadEventLog(hand, flags,0)
events_list = [event for event in events if event.EventID == "27035"]
if event_list:
    print 'Event Category:', events_list[0].EventCategory
</snippet></ROW><ROW><id>11219950</id><snippet>&gt;&gt;&gt; data =  [[1, .45, 0], [2, .49, 2], [3, .98, 0], [4, .82, 1], [5, .77, 1], [6, .98, 2] ]
&gt;&gt;&gt; sorted(data, key=lambda x:(x[2], -x[1]))
[[3, 0.98, 0], [1, 0.45, 0], [4, 0.82, 1], [5, 0.77, 1], [6, 0.98, 2], [2, 0.49, 2]]
</snippet></ROW><ROW><id>11219967</id><snippet>a = [[] for i in xrange(3)]
</snippet></ROW><ROW><id>11219967</id><snippet>a = [[]]*3
</snippet></ROW><ROW><id>11219967</id><snippet>$ cat /tmp/3.py
a = [[] for i in xrange(3)]

print str(a)

a[0].append(1)
a[1].append(2)
a[2].append(3)

print str(a[0])
print str(a[1])
print str(a[2])

$ python /tmp/3.py
[[], [], []]
[1]
[2]
[3]
</snippet></ROW><ROW><id>11219967</id><snippet>a = [[]]*3</snippet></ROW><ROW><id>11219967</id><snippet>[]</snippet></ROW><ROW><id>11219967</id><snippet>[]</snippet></ROW><ROW><id>11219967</id><snippet>xrange(3)</snippet></ROW><ROW><id>11219967</id><snippet>range</snippet></ROW><ROW><id>11219967</id><snippet>xrange</snippet></ROW><ROW><id>11219967</id><snippet>xrange</snippet></ROW><ROW><id>11220220</id><snippet>cmds.gradientControlNoAttr(self.range_ctr, e=True, changeCommand=self.myCallback)
</snippet></ROW><ROW><id>11220220</id><snippet>gradientControlNoAttr</snippet></ROW><ROW><id>11220519</id><snippet>Python.h: No such file or directory</snippet></ROW><ROW><id>11220519</id><snippet>C:\Python27\include</snippet></ROW><ROW><id>11220519</id><snippet>Settings - Compiler and debugger - Search directories - Compiler</snippet></ROW><ROW><id>11220519</id><snippet>C:\Python27\libs\python26.lib</snippet></ROW><ROW><id>11220794</id><snippet>=</snippet></ROW><ROW><id>11220794</id><snippet>set</snippet></ROW><ROW><id>11220794</id><snippet>SET /P NAME=Enter name:
SET /P GENDER=Enter age:
SET /P AGE=Enter gender:
</snippet></ROW><ROW><id>11220794</id><snippet>%GENDER %</snippet></ROW><ROW><id>11220873</id><snippet>unittest.main()</snippet></ROW><ROW><id>11220873</id><snippet>qsort</snippet></ROW><ROW><id>11220873</id><snippet>qsort</snippet></ROW><ROW><id>11220873</id><snippet>unittest.main()</snippet></ROW><ROW><id>11220873</id><snippet>def qsort</snippet></ROW><ROW><id>11220873</id><snippet>def</snippet></ROW><ROW><id>11220873</id><snippet>if __name__=="__main__"</snippet></ROW><ROW><id>11220873</id><snippet>def qsort (list):
    if list == []:
        return []
    else:
        pivot = list [0]
        lesser = qsort([x for x in list[1:] if x&lt;pivot])
        greater = qsort([x for x in list[1:] if x&gt;=pivot])
        return lesser + [pivot] + greater

if __name__ == '__main__':
    unittest.main()
</snippet></ROW><ROW><id>11220928</id><snippet># ...
import datetime
# ...
class MyModel(Base):
    __tablename__ = "my_table"
    # ...
    created_at = Column(DateTime, default=datetime.date.today)
    last_updated_at = Column(DateTime, onupdate=datetime.datetime.now)
</snippet></ROW><ROW><id>11221077</id><snippet>variable is False</snippet></ROW><ROW><id>11221481</id><snippet>&gt;&gt;&gt; from lxml import etree
&gt;&gt;&gt; s = """&lt;Report&gt;
&lt;Preflight errors="0" criticalfailures="0" noncriticalfailures="0" signoffs="0" fixes="0" warnings="10"&gt;
  &lt;PreflightResult type="Check" level="warning"&gt;
    &lt;PreflightResultEntry xml:lang="en-US"&gt;
      &lt;Message&gt;PDF/X-1a:20000 : PDF/X-1a:20000 output intent is missing &lt;/Message&gt;
      &lt;StringContext&gt;
        &lt;BaseString&gt;PDF/X-1a:20000 : %PDFXVersion% output intent is missing&lt;/BaseString&gt;
      &lt;/StringContext&gt;
    &lt;/PreflightResultEntry&gt;
  &lt;/PreflightResult&gt;
&lt;/Preflight&gt;&lt;/Report&gt;
"""
&gt;&gt;&gt; root = etree.XML(s)
&gt;&gt;&gt; for message in root.findall('Preflight/PreflightResult/PreflightResultEntry/Message'):
    print message.text


PDF/X-1a:20000 : PDF/X-1a:20000 output intent is missing 
&gt;&gt;&gt; 
</snippet></ROW><ROW><id>11221739</id><snippet>itertools</snippet></ROW><ROW><id>11221739</id><snippet>from itertools import product
help(product)
</snippet></ROW><ROW><id>11221739</id><snippet>for item1, item2 in product(list1, list2):
    pass
</snippet></ROW><ROW><id>11221739</id><snippet>with open('result.csv') as outfile:
   writer = csv.writer(outfile, dialect='excel')
   for ...
       writer.write(...)
</snippet></ROW><ROW><id>11221739</id><snippet>sort</snippet></ROW><ROW><id>11221739</id><snippet>from cProfile import Profile
p = Profile()

p.runctx('my_function(args)', {'my_function': my_function, 'args': my_data}, {})
p.print_stats()
</snippet></ROW><ROW><id>11221739</id><snippet>      2706 function calls (2004 primitive calls) in 4.504 CPU seconds

Ordered by: standard name

ncalls  tottime  percall  cumtime  percall filename:lineno(function)
     2    0.006    0.003    0.953    0.477 pobject.py:75(save_objects)
  43/3    0.533    0.012    0.749    0.250 pobject.py:99(evaluate)
...
</snippet></ROW></DATA>